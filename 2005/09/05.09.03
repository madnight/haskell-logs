00:20:23 * Lemmih considers mailing a job application to Microsoft Research.
00:23:25 <autrijus> Lemmih: want to hack on GHC full time?
00:29:02 <Lemmih> autrijus: Yeah, and I would do it for food, shelter and free internet. (:
00:29:12 <Lemmih> (with my level of education I would probably only to clean up after the big boys)
00:29:56 <autrijus> actually I can do without food and shelter
00:30:10 <autrijus> internet, electricity and computer is all I need
00:30:20 <autrijus> does this make my bid more competitive? :D
00:31:40 <vegai> Lemmih: you mean you only have one PhD? :P
00:31:53 <vegai> oh wait, that was Google
00:32:38 <rep> you don't need a phd to work at google
00:33:08 <rep> i got a job offer from them with only a bachelor..
00:33:11 <vegai> well, I wasn't being completely serious
00:33:29 <rep> oh :)
00:44:46 <liyang> Lemmih: do it. :)
00:45:19 <liyang> Or, if you're still at an applicable stage, apply for an summer internship first.
02:19:48 <ulfdoz> re
04:44:00 * boegel|home y0ws
05:17:09 * boegel|home is experiencing strange stuff with a fresh winXp install: it has no ie :|
05:17:27 <boegel|home> xp pro that is
05:17:51 <sieni> http://www.smh.com.au/news/technology/microsoft-ceo-im-going-to-fing-kill-google/2005/09/03/1125302772214.html
05:17:53 <goron> boegel|home: It's called a virus.
05:18:07 <goron> boegel|home: Unless you have SP2.
05:18:21 <boegel|home> goron: hehe :) on a fresh install ? nah
05:18:41 <goron> boegel|home: I had a virus before I could get the updates....
05:19:01 <boegel|home> I think something went wrong when installing it... it asked for a SP1 cd, and I don't have one :)
05:19:13 <boegel|home> goron: no internet was connected, kinda weird to get a virus then :)
05:19:21 <goron> boegel|home: yes, that's special.
05:19:39 <goron> boegel|home: Your first mistake was to install windows.
05:19:52 <boegel|home> goron: there is some file missing (or corrupt) on the cd (digiras.chm), but I've never experienced problems with it
05:20:47 * boegel|home is updating his FC4 system with yum, and needs to download 1.1gb :)
05:26:15 <goron> boegel|home: Yes, there's no real optimal updating yet, on *n*x. Although, Suse comes close.
05:27:29 <greenrd> conary is pretty sweet
05:27:33 <greenrd> it uses "changesets"
05:28:19 <greenrd> they still send whole files (e.g. libc.so.6), but xdiff-style binary compression could easily be added to it as it's still under development
05:28:28 <sieni> debian is nice
05:29:26 * boegel|home is almost halfway downloading
05:29:31 <greenrd> also, conary is multithreaded (finally, a package manager that can download and update at teh same time!)
05:31:05 <goron> greenrd: that's good. (does it do source too?)
05:31:17 <greenrd> how do you mean?
05:31:22 <goron> sieni: Debian doesn't use binary diffs.
05:32:03 <goron> greenrd: That you can build from source via packages?
05:32:13 <greenrd> goron: Oh absolutely.
05:32:31 <pejo> greenrd, uhm, isn't that just to fork off a wget in the background and you have 'multithreading'?
05:32:45 <greenrd> pejo: Sure, it's not rocket science. But no-one else is doing it.
05:32:50 <greenrd> By default, anyway.
05:50:55 <poetix> @seen xerox
05:50:56 <lambdabot> xerox is in #haskell. Last spoke 14 hours and 53 seconds ago.
05:53:52 <xerox> Hiya poetix
05:55:11 <poetix> Hi
05:55:40 <poetix> Some progress - I have the simplest possible C wrapper for creating and destroying an obby client_buffer object
05:55:59 <poetix> You can't do anything else with it at the moment, but at least it builds
05:56:02 <xerox> Hooray!
05:56:38 <poetix> Now I have to understand c2hs well enough to create the bindings
05:56:43 <xerox> I'm still playing with LSystem, heh.
05:56:51 <poetix> And then I can start adding on new functions from there
05:57:33 <poetix> My modest goal at the moment is to be able to write a Haskell program that will log on to a gobby server, announcing itself as a user called "Haskell"
05:57:46 <xerox> The most powerful and difficult part of c2hs, partly because it isn't documented _very_well_ (especially the marsheller's syntax), are the {#fun ..#} hooks.
05:58:13 <poetix> It looks like .chs files are Haskell files with special syntax added?
05:59:09 <poetix> I had a naive idea that you just fed c2hs C header files, and it made magic happen
05:59:23 <poetix> Now I see that you have to do a bit more than that...
05:59:26 <xerox> Yes, they're also referred as annotated Haskell modules.
06:00:00 <poetix> So does c2hs act as a kind of preprocessor to turn them into plain Haskell?
06:00:25 <xerox> Yep.  It takes "half of the informations" from the C header and the annotation syntax.
06:00:42 <poetix> Right. Now I get it.
06:00:46 <xerox> ..and the "other half" from the annotation syntax, even.
06:01:00 <poetix> Well, I've only got two functions to annotate, and neither of them is very complex
06:01:19 <xerox> It's pretty nice.  One of its best features is find type inconsistencies between the hooks and the C header's definitions.
06:01:52 <poetix> I had a thought about resource management.
06:02:20 <xerox> You could proceed in two ways to call C from Haskell with c2hs.  {#call ..#} and {#fun ..#} hooks.
06:02:43 <poetix> In C++, if an object is created on the stack its destructor is called when it falls out of scope
06:03:07 <poetix> In the C API, all objects are going to be created on the heap, and will have to be explicitly managed
06:03:35 <xerox> So you're creating/destroying them in the Haskell or the foreign world?
06:03:38 <poetix> But it would be nice to have a Haskell idiom for making sure that "foreign" resources we create get cleaned up
06:04:07 <poetix> In the C API, we're creating an object with "new", and returning a pointer to it
06:04:20 <xerox> There are some issues with that approach, like not knowing when exactly a finalizer will be called after the resource being collected.
06:04:34 <xerox> But it works, for the little I used, check out ForeignPtrs
06:05:25 <poetix> Do ForeignPtrs automatically call a foreign destructor function when they get finalized?
06:07:18 <xerox> That's their purpose, yep
06:08:18 <poetix> Cool, I'll look into those as well. Anyhow, I'd better get on with it...
06:10:11 <xerox> Check the c2hs manual too!
06:19:26 <boegel|home> what was the link to the online sudoku solver again ?
06:19:33 <boegel|home> yo Itkovian
06:19:45 <Itkovian> hi boegel
06:23:29 <xerox> http://www-users.cs.york.ac.uk/~shackell/sudoku/Sudoku.html
06:23:49 <xerox> Strangely enough I needed it too today and I searched the logs :)
06:24:37 <Itkovian> I'm off again, while the headache is gone, I'll do some work in the house. ttyl
06:24:48 <basti_> hi
06:25:19 <xerox> Hiya basti_
06:25:28 <xerox> boegel|home: any news from the gobby side?
06:29:46 <boegel|home> xerox: haven't tried anymore, sorry
06:30:36 <boegel|home> is there some program which will generate all possible solution for an incomplete sudoku board ?
06:33:09 <xerox> ndm said so for the program on that site
06:33:38 <astrolabe> boegel|home:  Hi.  Did you see the Monad Reader article?
06:34:02 <astrolabe> about a sudoku solver
06:51:49 <xerox> Mumble mumble.
06:52:49 <xerox> This is from 2004: http://www.worldchanging.com/archives/001757.html
06:54:17 <xerox> The paper it refers as "requring paid subscription" is now free, and I'm a bit impressed by the fact that the two first items in the references list are books from Von Neumann and Turing, gee!
07:04:27 <boegel|home> astrolabe: no, where
07:04:36 <boegel|home> hmm, running make produces problems :s
07:06:39 <astrolabe> Oh, it was poetix :)  http://www.haskell.org/tmrwiki/SolvingSudoku
07:18:59 <SamB> @doc Data.Generics
07:19:00 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.Generics.html
07:26:21 <poetix> Hmmm, I have a problem with c2hs
07:27:23 <poetix> Although the header file I pass to it contains just extern "C" global function declarations, it seems to want to pull in all the C++ header files required by that file as includes
07:27:31 <poetix> And it doesn't like C++ header files at all...
07:29:35 <xerox> Could you split it in two files, one containing only the extern "C" parts?
07:29:56 <poetix> Well, the file I'm passing in really contains nothing but extern "C" parts
07:30:12 <poetix> And an include directive
07:30:13 <xerox> Oh-uhm.
07:30:28 <xerox> What kind of error does it give?
07:30:40 <poetix> Ah, maybe I need to tell the gcc preprocessor to work in C++ mode...
07:34:27 <poetix> Nope, doesn't help
07:34:52 <poetix> The problem is that create_buffer wants to return a pointer to an object of a class which is defined in a C++ header
07:35:23 <poetix> So we have to import that header into the header file that defines create_buffer
07:35:37 <poetix> I guess if I had create_buffer return a void* there wouldn't be that problem
07:35:53 <xerox> I think so too
07:36:08 <poetix> I could have the .cpp file do the include the the C++ source, and cast the pointer to void* before returning it
07:36:36 <poetix> I was just hoping to be a bit more typesafe than that, but now I think about it that's probably defying the laws of compiler physics
07:37:13 <poetix> You can't refer to types that are basically C++ classes in plain C code, extern "C" or no extern "C"
07:37:29 <poetix> And I thought this was going to be an interesting *Haskell* project...
07:46:35 <poetix> c2hs doesn't want to marshall my (Ptr ())!
07:48:14 * poetix starts clawing distractedly at himself
07:48:33 <xerox> How have you defined the pointer?
07:48:53 <poetix> {# void as ClientBuffer newtype#}
07:49:04 <poetix> {#Pointer void as ClientBuffer newtype#}
07:50:15 <xerox> Which expands to newtype ClientBuffer = ClientBuffer ..?
07:50:41 <poetix> "There is no default marshaller for this combination of Haskell and C type"
07:51:05 <poetix> newtype ClientBuffer = ClientBuffer (Ptr ()), I guess
07:51:41 <xerox> Please check if it's like this or ClientBuffer (Ptr (ClientBuffer))
07:51:55 <xerox> Oooh, I see it.
07:52:10 <xerox> You want: {#pointer *void as ClientBuffer newtype#}
07:52:24 <poetix> Yes, I have that (including the *)
07:52:42 <xerox> And you get that error message?
07:52:47 <poetix> Yes
07:53:23 <poetix> Haskell Type: ClientBuffer, C Type: (Ptr ())
07:53:34 <xerox> Are you using as in/out param or result value?
07:53:43 <poetix> Both, in fact
07:53:53 <poetix> void* create_buffer()
07:54:00 <poetix> and void delete_buffer(void* buffer)
07:54:09 <xerox> You'd need to specify the constructor for result values marshalling.
07:54:34 <poetix> ?
07:54:48 <xerox> And the official c2hs release should marshal in params like that without the need of specifying a marshaller.
07:54:56 <poetix> !
07:54:57 <xerox> (The Gtk2Hs one doesn't IIRC)
07:55:19 <xerox> You need: ...} -> `ClientBuffer' ClientBuffer#}
07:55:24 <poetix> So how do I do that?</hopelessly_dependent_newbie_mode>
07:56:50 <xerox> If I'm correct  void* create_buffer()  translates to  {#fun create_buffer as createBuffer { } -> `ClientBuffer' ClientBuffer#}
07:57:18 <xerox> Giving back to you a  createBuffer :: IO ClientBuffer  Haskell function.
07:58:31 <poetix> That looks right
07:59:37 <poetix> It's stopped complaining for that function, but still complains for the other one:
08:00:00 <poetix> {#fun delete_buffer as deleteBuffer{'ClientBuffer' ClientBuffer} -> ()#}
08:00:26 <xerox> The syntax for each type is along the lines "inmarsh `Type' outmarsh"
08:01:07 <poetix> Got it.
08:01:13 <poetix> OK, now both of those errors are gone
08:01:40 <poetix> But it's complaining "Unknown identifier! Cannot find a definition for 'void' in the header file"
08:01:55 <xerox> Ouch.
08:02:23 <xerox> Workaround: define some type synonym in the C header.
08:02:33 <xerox> Solution: I'm currently informing
08:05:13 <poetix> That worked - I think
08:06:21 <xerox> c2hs examples doesn't show them..
08:07:15 <xerox> BTW, talking of resources allocating and freeing, keep in mind that you can block-scope the resources in a bracket-like way, if it sounds reasonable (e.g. writing a withBuffer args $ \clientBuffer -> do ...)
08:07:19 <luqui> is there a "isSubstring" or "isSubsequence" function in haskell...?
08:07:32 <xerox> @index isPrefixOf
08:07:33 <lambdabot> Data.List
08:07:38 <xerox> @docs Data.List
08:07:39 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.List.html
08:08:00 <autrijus> > isPartOf xs (y:ys) = (isPrefix xs (y:ys)) || (isPartOf xs ys)
08:08:18 <xerox> is<Interrupted by autrijus>
08:08:22 <autrijus> (of course you need two moe base case: isPartOf [] [] = True ; isPartOf _ [] = False)
08:08:37 <luqui> no way, I'm going to have to write it
08:08:42 <luqui> (that's not hard, but it sucks)
08:08:57 <xerox> autrijus: copy&pasted it for you :-)
08:09:03 <luqui> :-)
08:09:15 <xerox> s/://
08:09:39 <luqui> i'm just annoyed that such a common operation (I think), in a language that has many many standard operators, has none for that
08:10:00 <xerox> poetix: would you like to gobby the gobby bindings? :-)
08:10:13 <xerox> meta-gobbying at work
08:10:21 <poetix> xerox: Heh. ;)
08:10:32 <poetix> I have to take my son out to do some shopping right now
08:10:41 <autrijus> luqui: part of the reason is that with string as really stream of chars, normal index() can't easily be fusioned
08:10:42 <poetix> But maybe later
08:10:44 <xerox> aww!  Have fun :-)
08:10:58 <luqui> that kinda makes sense....
08:12:01 <nothingmuch> is it a violation of the Eq role to have a == b, and b == c, but a != c?
08:12:51 <nothingmuch> because if you can assume that the optimizing matchers, that skip much faster than naive matching can be generalized
08:14:17 <luqui> besides the complete nonsensical structure of your last sentence, yes
08:14:57 <luqui> but mostly because Eq is "equality", which is transitive
08:16:23 <xerox> I think that a deeper analysis could be done (not that I'm really capable of doing it), but I also agree with luqui.
08:17:35 <nothingmuch> in that case, http://www-igm.univ-mlv.fr/~lecroq/string/node14.html#SECTION00140
08:18:30 <luqui> boyer-moore wouldn't get you too much on lists of Char
08:18:36 <luqui> because you can't skip
08:18:46 <luqui> well, I guess you can, and it would be a little faster than testing
08:18:56 <luqui> but it's really more appropriate on packed strings
08:19:38 <nothingmuch> why can't you skip?
08:19:43 <nothingmuch> drop n
08:19:46 <luqui> you have to traverse the linked list
08:19:50 <nothingmuch> the real problem is matching backwards
08:19:52 <nothingmuch> that's still skipping
08:20:01 <nothingmuch> you don't have to evaluate the equality operation
08:20:01 <luqui> yeah, but it's theta(n)
08:20:19 <luqui> not theta(1) like it is with packed strings
08:20:51 <luqui> right, so it would be somewhat faster
08:21:03 <luqui> but you wouldn't get the real rockin' benefit of boyer-morre
08:21:05 <luqui> moore
08:21:22 <luqui> comparing chars is a really fast operation, mind you
08:22:20 * luqui implemented Parrot's findstr algorithm and spent a day optimizing it
08:22:24 <luqui> :-)
08:22:51 <nothingmuch> is it as fast as Class::Multimethods::Pure? ;-)
08:22:55 <luqui> haha
08:24:52 <metaperl> hi luqui . I told someone about how x went to xx and ? : when to ?? :: and they thought it was ridiculous... killing backwards compatibility for no reason
08:25:33 <luqui> haha
08:26:11 <luqui> Perl 6 is the definition of killing backwards compatibility
08:26:31 <luqui> that's right, whenever you want to say "let's kill backwards compatibility on this feature"
08:26:34 <nothingmuch> "no reason"
08:26:40 <luqui> you can say "let's Perl 6 this feature"
08:26:43 <nothingmuch> uh, what no reason?
08:26:47 <luqui> lol
08:27:03 <luqui> how does one answer that?
09:08:03 <xerox> Yummy, toast.
09:30:07 * poetix returns
09:30:42 <poetix> xerox: ping
09:30:54 <lispy_> pong
09:30:55 * xerox unsafeCoerces poetix
09:31:02 * poetix yelps
09:31:22 <xerox> Let me get the other toast and I'll spawn gobby.
09:31:35 <poetix> xerox: You think c2hs should be happy with extern "C" declarations?
09:31:41 <xerox> I don't know!
09:31:42 <lispy_> xerox: oh, yeah, i still want to try out gobby
09:31:50 <lispy_> xerox: know of a mac dmg yet? ;)
09:32:14 <xerox> lispy_: unfortunately, not.  Though a friend tried creating it..
09:32:28 <xerox> Let me ping him, maybe he succeeded.
09:32:28 <lispy_> xerox: your friend failed?
09:32:33 <lispy_> ah
09:33:21 <lispy_> how would you write a rule (using parsec) for optional parts of a grammar?
09:34:33 <poetix> In that case I won't worry too much about the fact that it seems not to like them at all...
09:34:40 <lispy_> if my grammar accepts "-1.0" and "-1.0f" as floats and "-1.0" is already accepted by float_constant is there a way to say float_num = float_constant >>= optional $ char 'f'
09:35:10 <xerox> lispy_: maybe you could use <|>
09:35:13 <poetix> It looks like I need to have two header files, one .hpp that has extern "C" declarations, and one .h that has exactly the same function declarations but in pure C syntax
09:35:28 <xerox> poetix: I think it is the case.
09:35:40 <poetix> I build the C++/C bridge against the .hpp headers, and run c2hs against the .h headers
09:35:49 <lispy_> xerox: certainly i could say float_num = try float_constant <|> (float_constant >== char 'f')
09:35:53 <poetix> And I have to cast everything from the C++ side to and from void* !
09:36:00 <lispy_> xerox: but i wanted something more direct
09:36:47 <lispy_> maybe optional could be implemented in terms of option
09:37:10 <poetix> Well, not *everything* - I can keep primitive types, and even structs if I write a pure C struct definition mirroring the C++ definition - just no class types.
09:37:20 <lispy_> option [try float_constant, float_constant >>= char 'f']
09:38:08 <xerox> lispy_: I can't seem to find it in the documentation
09:38:28 <lispy_> xerox: what i'm looking for?  yeah, i've already search the documentation :(
09:38:43 <lispy_> i was hoping to figure out a way to write such a function :)
09:38:44 <luqui> is there a standard MaybeT?
09:39:15 <TheHunter> no.
09:39:26 <luqui> damn
09:39:32 <luqui> that's exactly what I need right no
09:39:33 <luqui> now
09:40:01 <lispy_> i wonder if optional = try
09:40:07 <poetix> xerox: I only have gobby on Windows at the moment, and I'm logged into Linux right now
09:40:21 <TheHunter> you can use ErrorT instead or use your own one.
09:40:21 <poetix> Also, I have a bunch of chores I should stop putting off...
09:40:49 <xerox> poetix: np.
09:40:58 <luqui> I think I'm going to use ListT and waste all elements but the first one
09:41:13 <luqui> haskell being lazy should be fine with that,right?
09:41:29 <TheHunter> i'm not sure ListT should be used at all.
09:41:33 <luqui> why?
09:41:51 <TheHunter> it doesn't map monads into monads.
09:41:51 <TheHunter> ErrorT () should be fine.
09:42:02 <luqui> okay
09:42:41 <luqui> thanks
09:42:46 <TheHunter> you get an appropriate maybe-like `mplus` with it.
09:43:05 <luqui> that's exactly what I needed it for :-)
09:43:06 <luqui> so good
09:54:34 <TheHunter> but you are right, MaybeT should be in the libs.
10:04:49 <luqui> TheHunter, how do I put an error into an ErrorT
10:05:37 <TheHunter> mzero, fail, throwError, pattern match failing.
10:06:00 <luqui> fail is nice, mzero is nice too considering I'm using mplus
10:06:10 <luqui> throwError didn't work
10:06:26 <TheHunter> @type Control.Monad.Error.throwError
10:06:31 <lambdabot> forall e (m :: * -> *) a.
10:06:31 <lambdabot> (Control.Monad.Error.MonadError e m) =>
10:06:31 <lambdabot> e -> m a
10:06:59 <TheHunter> throwError () should work.
10:07:28 <luqui> maybe my error was saying something different
10:07:32 <SamB> @type Control.Monad.Error.throwError ()
10:07:34 <lambdabot> forall (m :: * -> *) a.
10:07:34 <lambdabot> (Control.Monad.Error.MonadError () m) =>
10:07:34 <lambdabot> m a
10:09:52 <luqui> No instance for (Error ())
10:09:52 <luqui> arising from use of `throwError' at ...
10:10:40 <luqui> any idea?
10:10:41 <TheHunter> you already need an Error () instance to use that thing as a monad.
16:21:46 --- topic: '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050823","see also #haskell.se #darcs"]'
16:21:46 --- topic: set by shapr on [Wed Aug 31 09:39:07 2005]
16:21:46 --- names: list (clog amiddelk tessier exe Nomius conal lisppaste2 autrijus smott olliej mwc isomer_\ isomer humasect Korollary Raziel ibid SM_a1 greenrd SamB lispy_ acke- psi dodecahedron cmeme marcot basti_ keverets Philippa_ arjanb rep sieni ksandstr revision17 jiing_ takuan Lemmih Squider Nioate binary42 stepcut metaperl araujo brandon samx Muad_Dibber vegai astrolabe shapr moo_away johs musasabi_ tic eno-away Lor jp-autark _shawn jgrimes TheHunter tmoertel)
16:21:46 --- names: list (cooz pejo Khisanth markg thebug Cale frederik1 wilx aleator thingie24 juhp rt luqui oplog4 xerox ulfdoz zamez mattam cognominal djw rafl ozone kaol liyang mornfall dons kosmikus spinclad moomlyn Lunar^ aheller gzl asmodai FrederikEaton jlouis thedward sorje shrimpx calvin_ kolmodin Igloo scw resiak Defiler cathper Spark emu jiing tumm wagle tuomov geoffb ctrlsoft boegel ulph cjb jesse98 kpk lispy skylan seafood lambdabot gdsx tromp yosemite)
16:21:46 --- names: list (jwp borism noj nibro norpan earthy mflux)
16:30:33 <humasect> it is not possible to Show a => in data types?
16:34:27 <Igloo> You can give data declarations contexts, but they don't do what you want them to
16:34:42 <humasect> ok
16:37:26 <ulfdoz> What's context for instead, if not ensuring that a parameter is an instance of a class?
16:39:28 <greenrd> As I understand it, it creates a "proof obligation" not a "theorem", so you have to explicitly state that fact whenever you use it. Which is stupid, but there you go.
16:39:40 <humasect> curiosity
16:40:34 <greenrd> Simon Peyton-Jones (and others on this channel) informed me that it is considered a misfeature of Haskell.
16:40:51 <greenrd> But it's too late to fix it now because it's been there for too long, I think.
16:41:20 <greenrd> GADTs should allow you to do this, but the relevant bit hasn't been implemented in GHC 6.4.
16:42:57 <ulfdoz> can't really follow. First I should continue diving into haskell. :)
16:43:08 <ulfdoz> so many projects, so little time...
16:43:53 <greenrd> yeah it confused me as well. I'm just past newbie stage myself :)
16:44:49 <humasect> orchestraAtTime t (Song { orchestras=[] }) = emptyOrchestra    <-- i highly enjoy the ability to express this kind of things.
16:45:46 <ulfdoz> In haskell section 4.2.1 I read exactly what I would expect, especially the explanation for the Set-Example.
16:45:57 <ulfdoz> s/haskell/haskell report/1
16:51:08 <skew> Hi everybody!
16:51:35 <TheHunter> Hi skew!
16:53:23 <skew> What have I missed?
16:59:13 <TheHunter> hmm, dons has a couple of new projects like h4sh and FastPacketString. Can't think of much else right now.
16:59:56 <TheHunter> oh, and we recently established that natural transformations between Functors are parametrically polymorphic, at least for polynomial Functors.
17:00:06 <TheHunter> where have you been?
17:00:24 <skew> graduating, finding a job and an appartment, stuff like that
17:00:32 <skew> which has gone pretty well
17:00:57 <skew> what's h4sh?
17:01:15 <TheHunter> using haskell functions on the shell level.
17:01:32 <TheHunter> @where h4sh
17:01:33 <lambdabot> http://www.cse.unsw.edu.au/~dons/h4sh.html
17:02:01 <TheHunter> oh, what kind of job do you have?
17:03:54 <skew> I'm at yahoo working on their AdSense competitor thing
17:04:13 <skew> It's a pretty interesting system, lots of machines and message passing and in-memory databases
17:04:39 <skew> Also, a few of us have been itching to rewrite bits in erlang
17:04:57 <TheHunter> it's written in c++ right now?
17:05:54 <skew> mostly c, actually, for historical reasons
17:06:16 <skew> as in, g++ is broken on the Approved Platform
17:06:56 <TheHunter> i see.
17:06:58 <skew> but we'll be upgrading soon and things should get better.
17:07:24 <skew> oh, h4sh looks neat
17:09:37 <skew> There's a lot of room for code generators and domain sepecific languages and stuff like that, which I hope to start working on soon
17:10:24 <TheHunter> that sounds indeed nice.
17:11:57 <skew> There really isn't a lot of concurrency, though, so I don't think STM is enough of a win to bring in Haskell
17:12:44 <skew> not the CPU efficiency seems to be a big issue
17:13:45 <skew> Anyway, I was trying to write some Haskell for distributing a program across a cluster of machines
17:15:32 <skew> describe threads a Map String Dynamic -> IO () functions, where the Dynamics hold Chans, then read a config file to see which components to instantiate locally, and which chans needs to be connected up to a little process that shovels data across the network
17:16:47 <skew> except making channels of the right type is a little tricky
17:17:00 <skew> unsafeCoerce# seems to work on a channel
17:17:46 <skew> I think what I need is unsafeToDyn :: TypeRep -> a -> Dynamic
17:18:43 <TheHunter> how well does it scale?
17:19:18 <skew> how well does what scale?
17:19:54 <skew> describing all the executable code for a system in a single program might be a bit hard to change
17:20:35 <skew> but as long as the serialization stays the same, nodes could be updated independently
17:20:40 <TheHunter> hmm.
17:21:00 <skew> updating processes in a running node is a little tougher than in Erlang
17:21:27 * TheHunter doesn't know any erlang.
17:21:35 <TheHunter> maybe that's the reason i'm not following.
17:22:35 <skew> Well, you can write a concurrent program in Haskell by making a bunch of channels for your threads to communicate over, and then starting up some threads with forkIO
17:23:26 <TheHunter> ok, so all your stuff runs on a single machine?
17:24:13 <skew> I'm thinking it would only take a little bit of metadata and stylized initialization code to be able to take a program written in that style and run a few of the threads on one machine and a few on another, with the channels between box being transparently serialized over the network
17:24:59 <TheHunter> ok, i see.
17:25:36 <skew> so the program starting up would read some config file to see which processes it is supposed to run, and what network address the channels across the boundary need to go to
17:26:47 <skew> do you know if there's any way to search the Haskell mailing list archives? I'm wondering if there has been any work in the GHC runtime to use faster IO multiplexing like epoll
17:27:24 <TheHunter> i haven't seen anything like that being discussed.
17:27:58 <TheHunter> i usually search the mailing list using google...
17:31:21 <skew> anyway, the interface to a process is described with something like [(String,TypeRep)] giving name and type for the channels it wants to talk on, and Map String Dynamic -> IO () for actually starting it up, with a little typeclass for turning [String] and Chan a -> Chan b -> Chan c -> IO () into a function of type Map String Dynamic ->  IO ()
17:32:29 <skew> I think I'm just going to make a copy of Dynamic.hs and add my little function
17:34:11 <TheHunter> sounds reasonable.
17:41:57 <skew> have you tried the multithreaded GHC yet?
17:42:14 <skew> it sounds neat, but I don't have an SMP box so it wouldn't really do much for me
17:48:49 <stepcut> skew: shapr wrote something for searching some haskell mailing lists.... not sure where it is or which lists
17:51:00 <machack666> how do you output an encapsulated data type from within a monad?
17:51:46 <skew> encapsulated?
17:51:51 <machack666> I have a data type Data { foo :: String, bar :: String } deriving Show, and I am using a reader monad to encapulate changes to this structure
17:52:58 <skew> so the monad just gives accessors for getting foo and bar?
17:53:43 <machack666> I have a number of functions which perform actions on this (obviously simplified) example structure.
17:54:13 <machack666> The monad is an Eval Data, which is essentially a Reader Data Data.
17:54:39 <skew> how about fmap show get?
17:55:17 <machack666> I am trying to get the original Data out of the Eval Data to show, or to do a liftIO ... ? (not sure what goes here)
17:56:14 <skew> if Eval is just Reader Data, then you should be able to use the action get :: Reader s s, which just returns the state
17:56:39 <skew> you can't lift IO into reader as far as I know, so you would have to pass the value out somehow, or change your monad, or use trace
17:59:54 <machack666> I'll try some things and get back to you ... :)
18:01:24 <humasect> IORef or State monad... decisions
18:26:30 <lispy_> xerox: that's too bad
18:57:19 <humasect> oh StateT is lovely.
19:01:05 <Igloo> Sure is.
19:03:16 <stepcut> heh
19:03:43 <stepcut> I started using it with NewCGI -- I can't say I fully understand it yet -- but I do know that it made the code much prettier than I expected
19:15:31 <humasect> it's solving my problems - things started with a dirty custom stateful monad.
19:20:11 <humasect> does there exist syntax which allows reversing application? say: (aFunc aParm) to become read in reverse order, (aParm aFunc) ?
19:21:20 <Igloo> You could define your own operator to do that
19:21:28 <humasect> aha
19:21:41 <humasect> never even considered. thanks =)
19:21:54 <dons>  a <$ f or something
19:22:06 <dons> there was a similar thing in Thompson's book, iirc
19:22:09 <Cale> ($ aParm) aFunc
19:22:19 <dons> or maybe a <.< f was the syntax
19:22:23 <Cale> (but I don't really like that :)
19:22:54 <humasect> hmm i like it, using ~$
19:24:06 <Cale> well, I wouldn't normally write that -- there are times when it's handy when dealing with higher order functions though
19:24:11 <humasect> actually perhaps piggying with $ is a more practical idea
19:25:30 <humasect> (.$) f a b  = f b a
19:25:59 <Cale> what is the context of this?
19:26:36 <humasect> records.
19:26:41 <Cale> (.$) = flip
19:27:54 <humasect> @libsrc ($)
19:27:55 <lambdabot> ($) not available
19:28:06 <humasect> kind of silly.
19:28:31 <ulfdoz> what does this "$"-sign?
19:28:43 <humasect> $f = (f)
19:29:40 <ulfdoz> ah
19:30:53 * TheHunter is annoyed by the non-existence of a decent mail client.
19:30:56 <humasect> hmm the $ is still picked up as $ before anything else.
19:31:42 <araujo> TheHunter, write one ... in haskell :-[
19:31:45 <araujo> :-]
19:32:27 <TheHunter> i might even consider that.
19:32:43 <humasect> i would just feel more comfortable with (<parm> <record>) in some situations
19:33:01 <araujo> TheHunter, i said it seriously ... it' be nice
19:33:25 <TheHunter> evolution would be ok if it were usuable with the mouse and had a web-frontend
19:33:47 <skew> I worry more about things being usable without the mouse myself
19:33:55 <TheHunter> *keyboard
19:34:21 <TheHunter> exactly, that what i wanted to say.
19:34:29 <skew> thunderbird works pretty well with the keyboard
19:34:39 <humasect> x_?
19:36:31 <skew> better than firefox anyway, which has an annoying habit of leaving keyboard focus behind when you switch tabs
19:45:26 <TheHunter> 'gui toolkits' should be able to easily create matching curses, graphical and web-frontends at the same time.
19:47:48 <ulfdoz> What about a gui toolkit with same interface for web-, text and graphical-guis.
19:48:47 <ulfdoz> bye
19:49:28 <TheHunter> that's basically what i mean, but usablility usually forbids that the interface are exactly the same.
19:49:29 <TheHunter> bye
20:04:48 <dons> TheHunter, how are you liking D[D[D[D[D[D[D[D[D[DMSU?
20:04:58 <dons> oops. damn wireless delay
20:18:06 <TheHunter> i like it here. Much work to do, but also much fun. The internet connection could be better though.
20:18:38 <dons> hehe. what are you studying?
20:18:49 <TheHunter> math.
20:19:19 <dons> only math? bad Thomas!
20:19:24 <dons> ;)
20:19:58 <dons> probably has better career prospects that Haskell hacking though..
20:20:14 <TheHunter> well, when I've gratuated I might consider cs again.
20:22:05 <dons> I had an interesting talk  a week or so ago about how to do math with origami, which needs computer support. very interesting math/comp sci overlap.
20:22:23 <dons> s/had an/attended an/
20:29:07 <TheHunter> ouch, *graduated. In a year, I'll probably be totally unable to distinguish t and d.
20:31:02 <dons> oh, you doing a masters?
20:31:15 <dons> or is it that german 4th year thesis thing?
20:32:15 <TheHunter> yes, masters for now. If I'd stayed in Germany, I would have done that diploma thing.
20:32:57 <dons> diploma-something-something-something
21:14:21 <dons> Lemmih, hey what do you think of an Addr# -> FastString introduction function?
21:14:38 <dons> i.e. packAddr "mypackedstringalready"#
21:15:19 <dons> Lemmih or anyone else who has an opinion :)
21:15:25 <Lemmih> That would be great.
21:17:33 * Lemmih would like to make ghc-src use fps.
21:18:43 <dons> why? doesn't it use FastString internally?
21:18:52 <dons> utils/FastString.hs ?
21:19:16 <dons> which doesn't provide anything like the range of operattoins, or mmapping
21:19:30 <Lemmih> Yeah, but using a maintained library would be better.
21:19:57 <dons> ah, ok.
21:20:10 <dons> shrink the code base a little too
21:22:53 <dons> FastString.hs in ghc has this nice hash-consed implemenntation I'm toying with using
21:23:08 <dons> new strings are only created if they're not already allocated somewhere else.
21:23:51 <dons> good for ghc-like programs with lots of repeated literal strings
21:25:59 <Lemmih> But it IS a bit ugly (:
21:26:22 <dons> ah well. noone said fast strings would be pretty.
21:30:45 <dons> what are you doing with fps, btw?
21:31:00 * dons likes user feedback, helps me to work out where to hack
21:31:28 <Lemmih> Implementing a tiger tree hash.
21:32:19 <dons> equality on 1G packed strings only uses 0.76s user time :)
21:32:35 <dons> pity my poor laptop only has 256M ram...
21:33:00 <dons> i wonder if this is the first time anyones ever done == on 1G strings in haskell?
21:34:00 <humasect> wierd. compiler errors/warnings are rare now.
21:35:24 <Cale> humasect: hm?
21:35:41 <Cale> humasect: in your coding?
21:35:44 <humasect> yeah
21:37:49 <Cale> Yeah, depending on what you're doing, it can be fairly easy to write compiling code right off, if you're keeping the types straight in your head.
21:38:13 <humasect> it's very satisfying
21:38:27 <humasect> it feels much more natural than a few days ago
21:39:28 <humasect> say at first the types (especially relating to monads) for a beginner is a kind of little battle
21:40:22 <humasect> now it feels i know exactly what is going on in all cases and when, except for some odd inter-monad behaviors
21:41:08 <humasect> my initial gut attraction to haskell is being fulfilled.
21:41:46 <luqui> what I really like about haskell
21:41:52 <dons> gut attraaction! mmm. tasty lambdas
21:41:55 <luqui> is that for code that has sufficiently few degrees of freedom
21:41:59 <humasect> =)
21:42:00 <luqui> if your code typechecks, it is correct
21:42:23 <humasect> agreed.. and simplifying is very important
21:42:24 <luqui> and it's possible to design your program's types to have few degrees of freedom almost everywhere
21:43:10 <humasect> especially unecessarily having to express iterations and fallthroughs
21:43:57 <humasect> and specifically, my bindings are no more than two characters unless for records. =)
21:44:43 <humasect> (less of an indirect requirement on naming convention and organization.. it's all "up to the design")
21:49:54 <humasect> it's not slow.
21:59:38 <dons> h4sh 0.2 is released. this is a stable release and will probably be the last update for a whlie.
22:10:04 <skew> luqui: have you tried Epigram?
22:11:52 <luqui> Epiwhat?
22:13:39 <skew> www.e-pig.com
22:14:03 <luqui> that looks like it's a squatter
22:14:14 <skew> oh, www.e-pig.org
22:14:58 <skew> there's also www.dur.ac.uk/CARG/epigram, but that seems a bit older
22:15:03 <luqui> interesting
22:15:13 <luqui> so it's like provable code?
22:15:45 <skew> something like that
22:16:01 <skew> maybe more like a type system strong enough that it can prove your code if you try hard enough
22:16:44 * luqui is doing type system research about now
22:16:55 <luqui> so that might be a good example...
22:17:08 <skew> type system research about what?
22:17:27 <skew> dons: was that 0.76s on the laptop?
22:17:45 <luqui> coming up with the right type system for Perl 6
22:17:54 <skew> hmm
22:18:02 <dons> yep.
22:18:06 <luqui> so far it looks pretty similar to Scala's
22:18:16 <skew> that seems pretty fast
22:18:32 <skew> fps is designed mostly for strings?
22:18:33 <dons> == is a memcmp call
22:18:48 <dons> I would say yes.
22:19:04 <dons> what where you thinking about?
22:19:12 <skew> systems at work use a lot of in-memory databases
22:19:38 <skew> I'm thinking how Haskell might be used with tightly-packed binary data structures
22:19:49 <dons> here's the interface: http://www.cse.unsw.edu.au/~dons/fps/Data.FastPackedString.html
22:20:09 <dons> packing arbitrary types needs the Binary class, or maybe SerTH
22:21:43 <dons> there's also newBinary, but i haven't looked at this.
22:22:32 <dons> I think there is definitely scope for developing a standard packed binary library
22:22:43 <dons> it must be one of the faq around here
22:25:49 <dons> http://hackage.haskell.org/packages/NewBinary-0.1.tgz looks useful
22:26:16 <dons> class Binary a where
22:26:19 <dons>     put    :: BinHandle -> a -> IO (Bin a)
22:26:19 <dons>     get    :: BinHandle -> IO a
22:59:31 <skew> My component code is working.
22:59:53 <skew> Now I just need error checking and distribution
23:07:16 <dons> Lemmih, you know have packAddress :: Addr# -> FastString :)
23:08:33 <dons> know? wtf. now. too much code, not enough breakfast or lunch
23:08:39 <Lemmih> (:
23:08:52 <Lemmih> Neat.
23:10:12 <dons> currently it involves a memcpy to a ForeignPtr. ping me if you can think of a safe non-copying way. I'm not sure a simple cast is safe
23:11:13 <Lemmih> dons: ping.
23:11:20 <dons> packAddress addr# = unsafePerformIO $ do
23:11:20 <dons>     i <- liftM fromIntegral $ c_strlen (Ptr addr#)
23:11:21 <dons>     return $ createPS i $ \to -> c_memcpy to (Ptr addr#) i
23:11:41 <dons> yeah?
23:14:01 <dons> hmm. maybe just constructing a plain ForeignPtr /is/ safe
23:14:06 <Lemmih> packAddress addr# = unsafePerformIO $ newForeignPtr_ cStr >>= \p -> return $ FS p 0 (strLen cStr) where cStr = Ptr addr# ?
23:14:27 <dons> right. like I said ;)
23:14:33 <dons> newForeignPtr_ (Ptr obj) = return (ForeignPtr obj PlainNoFinalizer)
23:14:57 <dons> we just need no finalizer, and some kind of assurance that it isn't on the managed part of the heap.
23:15:03 <dons> so I think we get both of those
23:15:20 * dons hacks
23:17:23 <Lemmih> How about an 'unmmap'?
23:17:55 <dons> where? in general?
23:19:44 <Lemmih> Perhaps a 'finalize' would be better.
23:20:17 <dons> new packAddress doesn't segfault ;)
23:20:48 <Lemmih> Hurrah. (:
23:21:45 <dons> you want to force old strings to get cleaned up explictily do you?
23:23:31 <Lemmih> Yes, and mmap'ed files to be unmmap'ed.
23:24:07 <dons> rather than relying on the storage manager to do it?
23:24:36 <dons> seems ok, just a wrapper over finalizeForeignPtr
23:24:44 <Lemmih> Indeed.
23:26:34 <dons> hmm. probably should be called unsafeFinalize. wouldn't slices complicate things?
23:26:58 <dons> i.e. you may not want a particular string anymore, but some slice you generated from it will still refer to the underlying pages.
23:27:47 <dons> we don't have the same accompanying proof that the storage manager has as to what ptrs are live.
23:43:56 <Lemmih> Well, it isn't more unsafe than 'finalizeForeignPtr'.
23:46:51 <dons> not sure I agree with 'more unsafe'. most calls to FPS functions generated new pointers into the underlying byte array, making it more likely than normal that stray pointers are live. but it's moot. the function is already implemented and darcs pushed :)
