00:10:25 <humasect> haskell sits on the couch making comments
00:10:50 <Cale> you know you're addicted to ghci when you alias ":re"="make" in your shell.
00:10:51 <humasect> that lazy evaluating evaluator
00:11:05 <humasect> baha
00:11:25 <z0d> Cale: or when you make ghci your default shell
00:11:40 <Cale> z0d: that works too
00:11:49 <humasect> or when you runghc Setup.lhs and bombs on a local .ghci
00:14:08 <humasect> local to a newly cabal-get'd package? oh burn.
00:15:15 <Cale> dcoutts: you around?
00:17:52 <Cale> How do I free pixmaps created with Gtk2hs?
00:18:03 <Cale> They leak memory really really quickly.
00:19:06 <Cale> and I don't think I'm preserving references to them...
00:27:00 <sieni> stupid emacs
00:36:16 <vegai> Cale: what are their types?
00:37:00 <vegai> I see a System.Glib.GObject.objectUnref :: Ptr a -> FinalizerPtr a  -- might that apply?
00:37:36 <vegai> or perhaps objectWeakunref :: GObjectClass o => o -> GWeakNotify -> IO ()
00:38:16 <vegai> oh no, that was a callback thingie
00:38:57 <Cale> Pixmap
00:39:23 <Cale> It doesn't look like g_free is bound to anything
00:40:44 <vegai> it'd be kinda ugly if that had to be called explicitly in Haskell code
00:43:51 <Cale> I wonder if the pointers being created are ForeignPtrs or not
00:45:14 <Cale> yeah, it is a ForeignPtr...
00:46:19 <Cale> but I don't see where the finalizer gets added
00:49:04 <Cale> curious, I'm not seeing a finalizer for pixmaps, though I do see them for other kinds of objects
01:03:12 <Cale> Do ForeignPtrs have any sort of default finalizer?
01:03:15 <shapr> Good morning #haskell!
01:03:36 <Cale> good morning shapr!
01:03:42 * shapr bounces cheerfully
01:06:50 <sieni> how nice it is to try to print gentle introduction to haskell on a4 paper
01:07:14 <sieni> 1. get the dvi file
01:07:31 <Cale> is there no .tex?
01:07:41 <sieni> yes
01:08:04 <sieni> but it's quicker to dvips the dvi with -t a4 option
01:08:26 <Cale> ah, okay
01:08:48 <sieni> except that the dvi wasn't a tar package and it didn't contain the fig1.eps and fig2.eps that needed to be dug from the tex source package
01:09:31 <Cale> also, I think if you do that, it's not going to reflow the text, so depending on how the paper size is changing, it might be awkward
01:09:50 <Cale> I can't recall exactly how a4 is related to letter
01:09:57 <sieni> xpdf at least completely fubared the printout (cut out the heading and page numbering)
01:10:05 <Cale> yeah
01:10:11 <Cale> I'd expect that
01:11:58 <JaffaCake> morning all
01:13:11 <sieni> well a4 is 297mm x 210mm  and letter is 279mm x 216mm, so a simple repositioning should be enough to print letter-sized documents on a4
01:13:30 <Cale> You need to add the a4paper option to the documentclass declaration in haskell-tutorial.tex
01:13:31 <sieni> but for example xpdf seems to choke on that
01:13:47 <Cale> then run pdflatex haskell-tutorial.tex
01:13:49 <sieni> dvips -t a4 worked well enough
01:14:46 <sieni> well the letter <-> a4 problem is a general annoyance, not just limited to the haskell tutorial
01:15:16 <Cale> yeah, it is
01:17:55 <sieni> and at least the letter -> a4 problem would be easily solvable by just repositioning the pages automatically, since a4 is just 6mm narrower than letter
01:19:18 <Cale> that should be a solvable problem
01:19:43 <Cale> In fact, the pdf viewer should be able to deal with it when you go to print.
01:21:05 <Cale> how does acroread deal with it? It takes so long to start up, it must have some features :)
01:21:25 <sieni> acroread might actually handle that properly
01:21:29 <sieni> I was using xpdf
01:24:42 <sieni> and if you give -paper a4 option to xpdf, it just ignores it and produces letter sized postscript output
01:24:45 <ricebowl> is there a type class narrowed than Num which only covers floating-point numbers?
01:24:49 <ricebowl> narrower, rather
01:26:44 <gour> JaffaCake: congrats for 6.4.1 & amd64 support, :-))
01:26:47 <Cale> Floating
01:26:58 <JaffaCake> gour: cheers
01:27:07 <Cale> somewhat larger than Floating is Fractional
01:27:50 <gour> JaffaCake: now i use ghci for my as my tutorial-tool (I learn with Craft of FP)
01:27:50 <Cale> Then there's RealFrac and RealFloat
01:27:50 <ricebowl> Fractional covers Float and Double?
01:28:00 <ricebowl> and IIRC there was another type... but I am somewhat new to Haskell
01:28:11 <Cale> Fractional covers everything with division
01:28:15 <ricebowl> ok
01:28:22 <ricebowl> that's what I was looking for.
01:28:26 <ricebowl> is there a reference somewhere?
01:28:29 <Cale> Floating gets you things like pi and exp
01:28:33 <Cale> http://www.haskell.org/onlinereport/standard-prelude.html
01:28:34 <ricebowl> *nods*
01:28:37 <ricebowl> thanks
01:29:21 <Cale> http://www.haskell.org/onlinereport/basic.html also has a nice diagram
01:40:10 <shapr> hiya ignas
01:40:38 <ignas> hi
01:41:46 <musasabi> Does Haskell98 allow mixing default method definitions and type signatures in class definitions?
01:43:03 <musasabi> i.e. is it class <name> <typespec> where {<typesig>} {<default-method>} or class <name> <typespec> where {<typesig> {<default-method>}} ?
01:44:21 <Cale> you can mix them
01:45:06 <Cale> topdecl -> class [scontext =>] tycls tyvar [where cdecls] | ...
01:45:28 <Cale> cdecl -> gendecl | (funlhs | var) rhs
01:46:07 <Cale> gendecl is a type declaraction or a fixity declaration (or empty)
01:48:29 <musasabi> thanks.
02:04:01 <dcoutts> Cale, pong
02:04:09 <Cale> hello
02:04:17 <dcoutts> JaffaCake, you're back! we've missed you
02:04:23 <Cale> I'm having trouble with pixmaps not getting deallocated
02:04:53 <Cale> They're ForeignPtrs, but I don't see where the Finalizer gets added
02:05:03 <dcoutts> really? oh hmm
02:05:08 * dcoutts goes to look
02:06:44 <dcoutts> Cale, ah, it's a GObject deriviative, so makeNewGObject is the thing that adds the finaliser
02:06:55 <Cale> ah, hmm...
02:07:42 <dcoutts> they're all reference counted too, so if any other it of gtk+ is using them then they won't get dealloacted either
02:07:54 * shapr cackles evilly
02:08:05 <Cale> I'm creating new pixmaps and then setting them as the current image in a single Image widget.
02:08:31 <dcoutts> so the image will retain a reference to them, until you set the image to have a new pixmap
02:08:57 <Cale> yeah - but it doesn't seem like it's dropping the old one when I set a new one
02:10:11 <dcoutts> you're doing imageSetFromPixmap right?
02:10:55 <Cale> set image [ imagePixmap := pixmap ]
02:11:03 <dcoutts> ok
02:11:15 * dcoutts goes to look at the Gtk+ C code
02:15:11 <dcoutts> Cale, well the GtkImage does correctly unref the pixmap
02:15:23 <Cale> okay
02:15:25 <Cale> hrm
02:15:37 <dcoutts> Cale, perhaps it's just that the GC doesn't get round to freeing the thing very quickly
02:16:28 <Cale> perhaps I should try inserting performGC calls?
02:16:38 <dcoutts> yes, I was thinking that
02:17:04 <dcoutts> but I was wondering how we tell when the thing really is GC'ed
02:17:11 <dcoutts> and indeed when it really is freed
02:26:37 <ski> information wants to be freed ?
02:31:55 <Cale> oh, we'll know if it's getting freed :)
02:32:05 <dcoutts> beause?
02:32:21 <Cale> Moving the mouse around for a few seconds chews hundreds of megs of memory :)
02:32:31 <dcoutts> ah I see
02:33:13 <dcoutts> yes, it's an interesting point that the RTS does not know how "expensive" each ForeignPtr is
02:34:01 <dcoutts> if it did, it might be worth spending a little extra effort on freeing them
02:34:16 <Cale> okay, performGC after the set image [imagePixmap := pixmap] didn't help
02:34:21 <dcoutts> Cale, btw if you're doing animation then it might be better not to use Pixmaps at all
02:34:45 <Cale> oh?
02:35:03 <dcoutts> we were only using Pixmaps as persistent backing since our drawing was too slow to redo 'live'
02:35:16 <Cale> I need at least one pixmap for the background which I'm going to draw on repeatedly
02:35:27 <dcoutts> because?
02:35:37 <dcoutts> can't you just draw directly onto the window
02:35:57 <dcoutts> it means you have to deal with expose events yourself however
02:36:02 <Cale> because I'm drawing a semi transparent widget thing that's changing shape
02:36:47 * dcoutts tries to understand
02:37:47 <dcoutts> you can draw the background pixmap onto a drawing window too
02:37:50 <Cale> Okay, remember the click and drag to set the starting position and angle?
02:37:54 <dcoutts> yes
02:38:40 <Cale> okay, so when the user presses the mouse button, I draw a little transparent dot where they clicked. If they move the mouse pointer out of the dot, a little arrow follows the direction of the pointer
02:39:02 <dcoutts> ok
02:40:02 * dcoutts thinks you should be using a DrawWindow and drawing onto it directly with Cairo rather than going via an intermediate pixmap
02:40:03 <Cale> perhaps I can save the background pixmap, and only draw the animation directly
02:40:14 <dcoutts> yes
02:40:21 <Cale> there is one very nice thing about the pixmap being there
02:40:43 <Cale> the cairo drawings get very very complicated, and can take 20-30 seconds to draw in some bad cases
02:41:27 <dcoutts> if you've got the background surface saved as a cairo surface then it's easy to splat it on and then draw over it
02:41:45 <Cale> ah
02:41:52 <Cale> :)
02:42:07 <dcoutts> and the dimensions of your image are  not changing much?
02:42:37 <Cale> only when the window changes shape
02:42:40 <dcoutts> that was another reason for allocating new pixbufs was that each image could be a different size, which typically does not happen with animation
02:43:31 <dcoutts> so you're doing some animation over the top of an expensive-to-calculate background picture right?
02:43:36 <Cale> yeah
02:44:09 <dcoutts> so draw the background into an appropriate sized off-screen cairo surface
02:44:17 <dcoutts> then keep that around
02:44:37 * boegel spams: only 2.5 hours left for voting on the lambdabot contest (http://elis.ugent.be/~kehoste/haskell-blah_lambdabotContest.html)
02:44:55 <dcoutts> and when repainting the actual on screen window, splat the background in and draw over it
02:45:29 <dcoutts> you can use clipping to your advantage so you don't have to redraw the whole thing
02:46:18 <dcoutts> hmm however I'm not sure about the lifetime of the background surface, ask xerox about that
02:46:42 <dcoutts> bost cairo objects are block scoped, so you don't keep them around for ever
02:47:15 <Cale> I think Surfaces are one of those
02:47:32 <Cale> You can only get them using with... functions
02:48:18 <Cale> which pass a surface to your function of type Surface -> IO a. Whether it's safe to stick the surface in an IORef and keep it for later, I don't know
02:48:45 <dcoutts> oh but you can use a pixmap as a surface
02:48:59 <dcoutts> and you can keep those around for ever :-)
02:49:05 <dcoutts> as you noticed :-)
02:50:04 <dcoutts> so draw the background onto a pixmap surface then blat that onto the on screen surface (the DrawWindow of the DrawingArea)
02:50:20 <dcoutts> and do your extra drawing over the top
02:50:44 <dcoutts> you'll need to do that bit of redrawing on expose events too
02:51:25 <dcoutts> in fact you should only draw on expose events
02:51:46 <dcoutts> the mouseover bits should just invalidate bits of the picture and change the drawing state
02:52:16 <dcoutts> invalidating then leads to expose events for the invalidated bits
02:55:07 <dcoutts> Cale, make any sense?
02:55:29 <Cale> dcoutts: sorry :)
02:55:32 <Cale> one sec
02:55:36 <dcoutts> np
02:57:53 <Cale> I use drawDrawable to get the background into the drawingarea?
03:19:10 <dcoutts> Cale, if your using cairo then you don't use drawDrawable. That's part of the old GDK api.
03:19:43 <dcoutts> you make a cairo surface from the pixbuf and use the cairo surface composition features
03:20:33 <Cale> so I use pixbufGetFromDrawable?
03:20:44 <Cale> er
03:21:25 <Cale> sorry, let me sort out some of this code first :)
03:21:33 <dcoutts> ok
03:28:43 <Cale> okay, so I have a Pixmap and a DrawingArea, which I can get the DrawWindow of, I also know how to render my additional widget where I'd like it.
03:29:09 <Cale> How do I set the pixmap as the background of the cairo rendering?
03:29:38 <dcoutts> hmm, it's slightly more anoying that I thought but doable
03:30:12 <dcoutts> we use renderWithDrawable on the DrawWindow of the DrawingArea
03:30:26 <Cale> yep
03:30:33 <Cale> I was using that before, in fact
03:30:36 <dcoutts> and then also use renderWithDrawable on the pixmap
03:30:48 <dcoutts> we only really want to get at the surface however
03:31:10 <dcoutts> but there isn't a function for just getting the surface for a pixmap for reasons I don't quite understand
03:32:02 <Cale> Is this something that Paolo could add?
03:32:19 <dcoutts> no, it's a wierdness of the gtk+/cairo api
03:32:38 <dcoutts> so we getSource from within renderWithDrawable pixmap
03:33:13 <dcoutts> and do setSourceSurface withing the DrawWindow rendering context
03:33:22 <dcoutts> you might need a liftIO in there
03:33:46 * dcoutts wonders if it's possible to use a Pixbuf here instead
03:33:56 <Cale> ah, Render is a MonadIO?
03:34:02 <dcoutts> yes
03:37:09 <dcoutts> the annoying thing is that gtk+ doesn't yet support using Pixbufs as cairo surfaces, only Pixmaps (one being client side, the other server side)
03:37:26 <dcoutts> it's planned but not implemented yet
03:37:57 <dcoutts> Cale, you could ask xerox to provide a longer lived surface type
03:39:08 <dcoutts> Cale, that's entirely possible, you could have an image surface that is not block scoped, one that uses ForeignPtrs instead
03:39:10 <Cale> so the Pattern will stick around?
03:39:17 <dcoutts> Surface, yes
03:39:21 <Cale> er
03:39:25 <Cale> I mean, in the present plan
03:39:33 <Cale> we call getSource
03:39:40 <dcoutts> an image Surface is just a big chunk of memory
03:40:01 <dcoutts> getSource gives the surface from the current rendering context
03:40:19 <dcoutts> so if you're rendering on a pixmap then you get back the surface
03:40:27 <Cale> what's a Pattern?
03:40:58 <dcoutts> it's things like solid fills, gradient fills, tiled bitmap fills, etc
03:41:12 <Cale> getSource :: Render Pattern
03:42:08 <dcoutts> oh, sorry, I gave you the wrong function
03:42:10 <dcoutts> surfaceCreateSimilar
03:42:58 <Cale> ah, okay
03:44:06 <dcoutts> this would be easier if we had a longer lived surface type
03:44:18 <dcoutts> using pixmap for that is not realy convenient
03:49:33 <dcoutts> Cale, I'm talking nonsense
03:49:39 <dcoutts> it's cairo_get_target  we want
03:50:22 <dcoutts> which xerox has bound as withTargetSurface
03:50:27 <dcoutts> again block scoped
03:52:11 <Cale> how do we use it block scoped?
03:52:43 <dcoutts> withTargetSurface $ \surface -> do
03:53:09 <dcoutts> when already in the scope of renderWithDrawable myPixmap $ do ...
03:53:23 <dcoutts> renderWithDrawable myPixmap $
03:53:27 <dcoutts>   withTargetSurface $ \surface -> do
03:53:33 <dcoutts>     ...
03:54:15 <dcoutts> then we need to renderWithDrawable drawWindow
03:54:24 <dcoutts> that will require liftIO
03:54:57 <dcoutts> then inside that we can use splat the surface as the background for our drawWindow
03:56:06 <Cale> sorry, what exactly does withTargetSurface do?
03:56:10 <Cale> It's not documented
03:56:22 <Cale> (well, it's there, but there's no description)
03:56:25 <dcoutts> it get's the surface of the current rendering context
03:56:39 <Cale> ah, okay
03:56:51 <Cale> and we can liftIO and then render onto something else?
03:57:09 <dcoutts> yes
03:57:24 <Cale> okay, that sounds like a good thing to abstract :)
03:57:34 <dcoutts> see what I mean about inconvenient? bug xerox to give us a longer lived surface type
03:58:26 <Cale> that might be a good idea
03:59:31 <Cale> If he doesn't want to, then we can still write functions which abstract the process of using surfaces from different places in different ways.
03:59:53 <Cale> I'll be writing withSurfaceFromDrawable
04:00:22 <dcoutts> ok
04:05:07 <shapr> yozora: hi, learning Haskell?
04:06:04 * boegel notices shapr always picks people who joined ages ago and haven't talked since
04:09:56 <Wilmer> not always, he also picked me :-)
04:10:12 <Wilmer> but maybe the fact that they join and never talk just makes him more curious ;-)
04:10:45 * dcoutts wonders how shapr notices, or if he's got some prog that notices
04:12:31 <yozora> hiya
04:12:38 <yozora> i've learned a little
04:12:49 <yozora> i did some in uni and now i've gone back to it
04:12:59 <yozora> and it's my favourite language
04:13:16 <yozora> :)
04:13:36 <boegel> w00 ! nice
04:14:12 <yozora> it's just a pleasure to program in
04:14:34 <yozora> and there's all these really clever people working in it and writing papers and stuff
04:14:40 <dons> @karma+ yozora
04:14:41 <lambdabot> yozora's karma raised to 1.
04:14:52 <yozora> :)
04:15:30 <dcoutts> yozora, and there's plenty for you to help out with too :-)
04:15:34 <yozora> i like it how it's just so deep
04:15:37 <yozora> :)
04:15:56 * dcoutts tries to persuade yozora to help with hIDE
04:16:11 <yozora> i'd love to, but I'm not sure how much I could contribute
04:17:05 <dcoutts> it should be easier once we got the basics in place
04:17:27 <dcoutts> dons, Lemmih_, lots of overnight hacing I see :-)
04:18:15 <boegel> dcoutts: night ? nah, it's 1pm, get real :P
04:18:32 <dons> a little bit, i've been a bit busy with other stuff, but hopefully some more commits will get in before icfp
04:18:43 <dcoutts> dons, cool
04:18:50 <dons> i'm going to spend a couple of weeks solidly on it after icfp i think
04:18:58 <dcoutts> oh great :-)
04:19:00 <dons> don't tell manuel, though ;)
04:19:04 <dcoutts> heh heh
04:19:18 <boegel> who's manuel ?
04:19:30 <dcoutts> I'd like to get the module browsing bit working
04:19:37 <dcoutts> and have that work with Yi
04:19:48 <dons> boegel, my supervisor, www.cse.unsw.edu.au/~chak
04:20:00 <dcoutts> we ought to be able to browse hundreds of files without using too much resources I reckon
04:20:11 <dons> oh, that'd be cool!
04:20:21 <dcoutts> it might need some help from Yi though
04:20:34 <dons> yep, sure.
04:20:35 <dcoutts> we we don't want to be using memory for every file opened
04:20:52 <dcoutts> if unmodified files are mmaped then that's obviously ok
04:21:26 <dcoutts> and we probably want to be able to dump the state of an open but unsaved file onto disk in a temporary file
04:21:41 <dons> yep, that's no problem
04:21:44 <dcoutts> so we could even cope with quite a few open and modified files
04:22:21 <dcoutts> I want to enable you to browse/edit a source tree the size of fptools without having to think about how many files you have 'open'
04:22:44 <dons> yes, that's a good benchmark
04:22:49 <dcoutts> there should be no concept of open as such, just modified and unsaved
04:23:10 <gour> dcoutts: hi, have you tailorized mirroring?
04:23:19 <dcoutts> to the user. all files are open all the time and easily browsable
04:23:20 <gour> dcoutts: ..enabled..
04:23:22 <dcoutts> gour, not yet
04:27:02 * shapr boings
04:27:38 <gour> shapr: do you, maybe, run postgres on your server?
04:37:44 <Cale> arg... not working
04:37:52 <dcoutts> ?
04:38:22 <Cale> it's definitely running the code at least, as verified by putStrLns...
04:38:38 <Cale> renderWithSurfaceFromDrawable :: (DrawableClass source, DrawableClass dest) =>
04:38:38 <Cale>                                  source -> dest -> (Surface -> Render a) -> IO a
04:38:38 <Cale> renderWithSurfaceFromDrawable src dst f =
04:38:38 <Cale>     renderWithDrawable src $ withTargetSurface $ \s -> liftIO $ renderWithDrawable dst (f s)
04:39:08 <Cale> does that look sane?
04:39:22 <dcoutts> I think so
04:39:32 <dcoutts> the 's' does not escape
04:40:12 <Cale>     renderWithSurfaceFromDrawable pixmap drawWindow $ \s -> do
04:40:12 <Cale>         setSourceSurface s 0 0
04:40:12 <Cale>         renderPin pin
04:41:07 <Cale> this (along with some code to get those things from IORefs) is in the onExpose event for the drawingArea
04:42:14 <dcoutts> it doesn't look like you're actually using the pattern however
04:42:21 <Cale> oh
04:42:30 <Cale> I need a rectangle or something :)
04:42:47 <dcoutts> let me find an example...
04:43:47 <dcoutts> so setting the current pattern (eg with setSourceSurface) means that pattern is used for subsequent drawing operations
04:43:56 <Cale> right
04:44:00 <Cale> I get that now
04:44:32 <dcoutts> here's an example : http://cairographics.org/samples/image.html
04:44:35 <boegel> yo b0gg1e
04:44:43 <b0gg1e> hiall.
04:45:02 <Cale> ah, paint :)
04:47:03 <ricebowl> argh.
04:47:11 <ricebowl> I have a type definition, like so: type Point a = (a, a)
04:47:18 <ricebowl> I want to restrict a to the class Fractional
04:47:25 <ricebowl> but I can't seem to figure it out
04:47:47 <dcoutts> Fractional a => Point a
04:48:04 <ricebowl> => allows me to restrict the class of a?
04:48:30 <dcoutts> ricebowl, you can't really restrict it at the definition of Point (sadly) but you can at it's uses
04:48:46 <dcoutts> yes, {class context} => {type}
04:48:53 <ricebowl> oh
04:49:07 <ricebowl> so basically in my function definition I'll have to restrict the type?
04:49:13 <dcoutts> yes
04:49:37 <Cale> dcoutts: nice, it works now :)
04:49:41 <shapr> gour: Yes I do, why?
04:49:47 <dcoutts> ricebowl, which will usually happen automatically if you treat the 'a' as a Fractional thing
04:49:48 <ricebowl> er, d'oh, I already had that... thanks
04:49:53 <ricebowl> right
04:50:28 <dcoutts> since the type inference will work out that your function will only work for 'a's in the Fractional class since
04:50:33 <ricebowl> this would be easy except I can't seem to find any docs for beginners that go beyond the "this-is-recursion, oooh, aaah" level
04:50:46 <gour> shapr: afaik, Trac 0.9 can use postgresql back-end, so no need for sqlite, if it helps you
04:50:58 <shapr> Is there a trac 0.9 debian package?
04:51:01 <dcoutts> shapr, can you recomend a suitable tutoirial to ricebowl ?
04:51:20 <shapr> For what exactly? Just Haskell in general?
04:51:33 <ricebowl> pretty much
04:51:37 <dcoutts> shapr, he said "I can't seem to find any docs for beginners that go beyond the "this-is-recursion, oooh, aaah" level"
04:51:44 <shapr> I can help!
04:51:46 <ricebowl> I'm taking a class on Haskell. I've got some experience in ML and plenty of experience in general.
04:51:55 <shapr> @wiki HaskellDemo I'd suggest starting with this simple demo
04:51:56 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo I'd suggest starting with this simple demo
04:51:57 <ricebowl> Thus most of the stuff I come across is fairly useless; I need syntax, not semantics. :p
04:52:07 <shapr> Then get "Yet Another Haskell Tutorial" from Hal Daume
04:52:11 <shapr> @learn it's on the learning page.
04:52:12 <lambdabot> http://www.haskell.org/learning.html
04:52:24 <shapr> If you have short specific code questions, you can use @eval
04:52:30 <shapr> @eval map (+1) [1..5]
04:52:36 <lambdabot> [2,3,4,5,6]
04:52:43 <shapr> @type 1 :: PortNumber
04:52:44 <lambdabot> bzzt
04:52:51 <gour> shapr: Trac on Debian info is here:http://projects.edgewall.com/trac/wiki/TracOnDebian
04:52:52 <ricebowl> nice
04:52:53 <shapr> Hm, network isn't imported :-)
04:53:02 <shapr> @type 1 :: Float
04:53:03 <lambdabot> Float :: Float
04:53:15 <dblhelix> huh?
04:53:17 <gour> shapr: but probably there is no debian package for 0.9 - it is still beta
04:53:35 <gour> shapr: moreover it does not include darcs-backend
04:53:44 <gour> shapr: install from the tarball..
04:53:45 <shapr> gour: That sucks. Can you build debs? :-)
04:53:58 <gour> shapr: well, i'm on Gentoo
04:54:03 <shapr> I don't have time to maintain tarball installations.
04:54:09 <dblhelix> why does lambdabot say Float :: Float and not 1 :: Float or (1 :: Float) :: Float?
04:54:31 <ricebowl> we've been following the slides written by John Hughes at Chalmers, they're not bad except for that whole "omgomg this is a function!@!!!" part
04:55:01 <shapr> Most programmers don't have a clue about pure functions.
04:55:15 <ricebowl> well I suppose it can be said that most programmers don't have a clue in general :p
04:55:17 <shapr> Believe me, I did J2EE for a few years, and I'm now doing Zope/Plone.
04:55:22 <shapr> I think that's accurate.
04:55:24 <ricebowl> haha
04:55:27 <ricebowl> oh well
04:55:45 <shapr> But that's because most people don't try to excel in whatever they do.
04:55:46 <Lemmih> dcoutts: Have you checked out the new hIDE/yi code?
04:55:59 <ricebowl> I've been doing C for more than a decade; functional programming is different but not difficult :p
04:56:01 <shapr> poetix: Hey, I like the new music! Are you going to dig out anything else? Any b-sides maybe? :-)
04:56:02 <ricebowl> yes that is true
04:56:19 <shapr> ricebowl: You have reached a community where the urge to excel is normal :-)
04:56:23 <poetix> shapr: I think I've exhausted the archives now
04:56:27 <dblhelix> more importantly, functional programming is fun
04:57:03 <ricebowl> yes, it is
04:57:52 <shapr> ricebowl: Do you have any specific questions?
04:59:10 <ricebowl> right now, no
04:59:41 <ricebowl> well, aside from trying to figure out why I keep getting errors such as "Inferred type is not general enough ..."
04:59:55 <ricebowl> but I'm googling at the moment
05:00:56 <Philippa> it means the type you've specified (or used something as) contains more types than the one it inferred - for example, if you specified a -> a and it inferred Num a => a -> a
05:02:23 <gour> shapr: on which hardware runs your server?
05:03:53 <ricebowl> Philippa - yes, but I'm trying to figure out why it decides that a must be of type Double :p
05:04:04 <ricebowl> must be sqrt...
05:04:34 <musasabi> defaulting rules perhaps.
05:08:19 <ricebowl> well, here's the code: http://rafb.net/paste/results/fZoNSL47.html
05:09:07 <ricebowl> ah, I forgot to include this line: quadratic :: Fractional a => (a, a, a) -> [a]
05:09:20 <dcoutts> Lemmih, just trying to build it
05:09:50 <dcoutts> I't be nice if we could load packages from ghc's --user package db
05:10:06 <dcoutts> it'd make it much easier to do a simple build script
05:17:45 <boegel> dcoutts: you should _really_ join #haskell-blah right now
05:18:00 <dcoutts> boegel, I have :-)
05:18:19 <boegel> dcoutts: woops, sorry :)
05:19:09 * boegel summons dons
05:19:25 <dcoutts> @summon dons
05:19:26 <lambdabot> Unknown command, try @listcommands.
05:19:29 <dcoutts> @bah
05:19:30 <lambdabot> Unknown command, try @listcommands.
05:28:30 <boegel> CosmicRay: hi, how's HWN?
05:29:00 <CosmicRay> boegel: it will be out in an hour or two
05:29:08 <dcoutts> cool
05:29:27 <Cale> dcoutts: you'll have to try this out :)
05:29:31 * dcoutts notices that he crops up in HWN rather frequently
05:29:38 <dcoutts> Cale, yeah? sounds good
05:30:07 <boegel> CosmicRay: cool, can't wait :)
05:30:19 <Cale> vx.hn.org/autoshare/nymphaea.tar.bz2
05:31:00 <CosmicRay> dcoutts: that's because you release new haskell software rather frequently, I'm afraid ;-)
05:31:07 <Cale> oh, btw, I added that workaround to gtk2hs on my local copy
05:31:23 <Cale> (the bizarre add events thing)
05:32:10 <dcoutts> CosmicRay, :-)
05:32:31 <dcoutts> Cale, right, it's in the current darcs version too
05:32:39 <Cale> oh
05:32:44 <dcoutts> Cale, oh dear, I et this error:
05:32:49 <Cale> when I did a darcs pull it didn't bring anything in
05:32:55 <dcoutts> (nymphaea:29533): Gdk-WARNING **: Using Cairo rendering requires the drawable argument to
05:32:55 <dcoutts> have a specified colormap. All windows have a colormap,
05:32:55 <dcoutts> however, pixmaps only have colormap by default if they
05:32:55 <dcoutts> were created with a non-NULL window argument. Otherwise
05:32:55 <dcoutts> a colormap must be set on them with gdk_drawable_set_colormap
05:32:55 <dcoutts> nymphaea: user error (NULL pointer)
05:33:14 <Cale> oh
05:33:26 <Cale> I don't get that here for some reason
05:33:32 <Cale> does it stop the program?
05:34:01 <Cale> oh
05:34:04 <Cale> null pointer
05:34:07 <Cale> huh
05:34:29 <Cale> I'll be sure to pass a window when creating the pixmap then
05:34:35 <dcoutts> good idea
05:34:52 <Cale> I just set it to depth 24 figuring that it would be fine
05:34:55 <dcoutts> the change is in darcs: http://haskell.org/gtk2hs/darcs/gtk2hs/gtk/Graphics/UI/Gtk/Abstract/Widget.chs.pp
05:35:22 <dcoutts> Cale, yeah, some people might run their screen at 32 or 16 bits depth
05:35:37 <dcoutts> 32 is quite common actually with some kinds of graphics card
05:36:23 <Cale> ah, okay - so it must be compatible with the display then
05:36:45 <dcoutts> Cale, it syncs at some odd time of the morning so you might not have got the change when you last pulled
05:36:56 <Cale> yeah, I'm seeing the change now
05:37:29 <dcoutts> it syncs at 4am local time (to the haskell.org server) which is something like 9am in europe :-)
05:38:37 <xerox> Hey people, I skimmed the discussion!
05:38:58 <xerox> I must run out to get the bus, so ttyl :(
05:39:01 <dcoutts> xerox, so we think we need more persistent surfaces in some circumstances
05:39:07 <dcoutts> xerox, oh, bye then :-)
05:39:14 <dons> interesting, visual haskell now has a bsd license.(but still binary only releases)
05:39:25 <xerox> they couldn't give me the passport yet @#£%!!!
05:39:34 <dcoutts> xerox, grr
05:39:42 <dcoutts> dons, what license do you think hIDE should have?
05:39:48 <xerox> Hopefully I'll get it today, bye now!
05:39:53 <dcoutts> xerox, good luck
05:41:05 <dcoutts> dons, I was thinking of LGPL or similar for the core modules so we don't exclude too many plugins due to license compatability problems
05:41:19 <dons> I think GPL, I'm not sure how controversial that is
05:41:20 <CosmicRay> woo, ghc 6.4.1 is out
05:41:27 <dcoutts> dons, or GPL + exception for certain specific public APIs
05:41:50 <dcoutts> dons, I like GPL too, but I worry that it might exlude some plugins
05:42:14 <juhp> finally it is out :-)
05:42:53 <dons> ah, you think people might write plugins that call our code, but not necessarily be free code? do you have an example?
05:43:20 <dcoutts> dons, oh yes, just seen the VS email from JaffaCake, I wonder if we'll ever see the source under the SD license
05:44:03 <dcoutts> dons, well I was more concerned with free code that is not necessarily GPL compatable
05:44:08 <JaffaCake> dcoutts: I wish
05:44:55 <dcoutts> JaffaCake, so we can't see how the VS Haskell plugin does the lexing or uses the GHC API, we just have to go on the paper? (which is rather good btw)
05:45:28 <JaffaCake> sure you can, but you have to sign up for a more restrictive license
05:45:51 <ski> ricebowl : sqrt :: Floating a => a -> a
05:46:15 <dcoutts> JaffaCake, ah, oh well, that wouldn't be a good idea if I want to contribute to hIDE
05:46:31 <JaffaCake> maybe not
05:46:35 <ski> ricebowl : so change to  quadratic :: Floating a => (a, a, a) -> [a]
05:46:40 <dcoutts> JaffaCake, welcome back btw :-)
05:46:46 <dons> or we could just reverse engineer the commits made to Lexer.x ;)
05:46:48 <JaffaCake> ta, nice to be back :)
05:46:58 <dcoutts> JaffaCake, how's the new family member?
05:47:14 <dcoutts> dons, heh heh
05:47:22 <dons> yeah, good to see you JaffaCake :)
05:47:23 <JaffaCake> doing fine, but my daughter (the older sibling) just shut her finger in a door this morning :(
05:47:32 <boegel> hIDE = Visual Haskell ?
05:47:36 <ski> ouch :(
05:47:47 <dons> boegel, /=
05:47:52 <boegel> dons: okay
05:48:04 <ricebowl> ah
05:48:07 <ricebowl> ok
05:48:08 <boegel> dons: seen the lambabot results in #haskell-blah ?
05:48:16 <dons> oh, I should check the result.
05:48:21 <ricebowl> thanks. I presume it has something to do with the definition of the / operator?
05:48:26 <dcoutts> boegel, no, there's a VistualStudio plugin that JaffaCake has been involved in, hIDE is Free Software
05:48:37 <boegel> dcoutts: I see
05:48:41 <dcoutts> @where hIDE
05:48:42 <lambdabot> http://www.haskell.org/hawiki/hIDE
05:48:58 <ski> ricebowl : (/) :: Fractional a => a -> a -> a
05:49:03 <ricebowl> thought so.
05:49:07 <Philippa> <dons> ah, you think people might write plugins that call our code, but not necessarily be free code? do you have an example? <- in-house project-specific plugins
05:49:12 <ski> ricebowl : type class Floating is sub to Fractional
05:49:18 <ricebowl> right
05:49:26 <dcoutts> dons, from the paper it didn't sound like the lexer changes were too tricky, mostly to remove some of the layout bits which are unnecessary for syntax highliting
05:49:34 <ricebowl> that makes sense
05:49:45 <ricebowl> too bad Hugs doesn't mention that little fact to me :p
05:49:47 <ricebowl> oh well
05:49:56 <JaffaCake> dcoutts: the VS API license is here: http://www.vsipdev.com/LicenseAgreement.aspx
05:50:10 <ski> ricebowl : btw, why do you subtract with discriminant in first case, when it is zero ?
05:50:22 <Philippa> can I make a quickie feature request for Visual Haskell?
05:50:33 <dcoutts> JaffaCake, ta, oh but I can't even see the license unless I register :-) I'll leave it.
05:50:43 <JaffaCake> oh, really?
05:51:11 <dcoutts> JaffaCake, I get redirected to http://www.vsipdev.com/signin.aspx?ReturnUrl=%2fLicenseAgreement.aspx
05:51:19 <JaffaCake> that's ridiculous, I'll send you a copy
05:51:35 <dcoutts> JaffaCake, oh, ta
05:52:15 * dcoutts thinks it's quite MS, to make you register before you can see terms and conditions :-)
05:52:25 <dons> hehe
05:52:31 <ski> ricebowl : http://www.haskell.org/onlinereport/basic.html#sect6.3 has a diagram on that, as Cale said
05:53:02 <ski> ricebowl : also, hugs respnds with (amongst other things) "class Fractional a => Floating a" if asked ":i Floating"
05:55:04 * ski wonders what error message helium would give ..
05:55:15 <dcoutts> JaffaCake, so does that mean you can't ever contribute plugins to hIDE ?
05:55:20 <ski> hm, right, helium doesn't do type classes (yet ?)
05:55:21 * dcoutts hopes not
05:55:37 <JaffaCake> no
05:55:41 <dblhelix> ski: afaik the release version does not
05:55:47 * dcoutts hopes for as wide contributions as possible
05:56:04 <JaffaCake> unless you're planning to make it GPL, in which case that makes it slightly more difficult for me
05:56:18 <dcoutts> JaffaCake, how about LGPL ?
05:56:19 <Philippa> "no viral licenses"?
05:56:28 <dcoutts> then plugins can be things like BSD
05:56:34 <JaffaCake> LGPL isn't any less problematic, really
05:56:52 <dcoutts> but it would allow you to write BSD licensed plugins, no?
05:57:07 <JaffaCake> sure, that's fine
05:57:33 <JaffaCake> I just have difficulty working with GPL/LGPL code directly (or rather my employers do)
05:57:50 <dcoutts> JaffaCake, right, that's ok, we can fix core modules
05:58:02 <dcoutts> dons, opinion?
05:58:43 <earthy> weird though
06:00:22 <dcoutts> dons, so there's a reason for making the core LGPL rather than GPL, because it allows BSD licensed plugins
06:01:05 <ibid> gpl does not prohibit bsd-licensed plugins
06:01:28 <musasabi> gpl makes it more difficult.
06:01:39 <Igloo> That depends who you ask  :-)   It would be nice to make an explicit allowance in the licence
06:01:44 <musasabi> as slowly the BSD licensed code gets tainted by the GPL bits.
06:02:15 <ibid> Igloo: depends on what bsd license one means, but most people use the gpl-compatible kind
06:02:20 <dcoutts> ibid, it means you're directly linking to GPL code and you the GPL license provisions apply
06:02:20 <sieni> probably it's better to have an explicit exception clause for the plugins
06:02:39 <ibid> dcoutts: yes, but you are allowed
06:02:39 <Igloo> ibid: But is something using a plugin API a derived work of the thing that exposes the API?
06:02:51 <ibid> Igloo: that one is a hard question
06:03:07 <dcoutts> it depends on how formal the API is I think
06:03:15 <ibid> but i mean, the only reason to use lgpl instead of gpl is to get around gpl incompatibility, no?
06:03:16 <Igloo> ibid: Yeah, hence it's easier to say "You can make plugins with whatever licence you want using $API" rather than trying to answer it  :-)
06:03:24 <Cale> dcoutts: does a drawingArea have to be visible in order for it to give a valid DrawWindow?
06:03:40 <dcoutts> Cale, possibly, I'm not quite sure
06:03:40 <sieni> one can probably look at the gnu c++ compiler license or something about how to write the exception clause(s)
06:03:41 <ibid> Igloo: yes, but then i wouldn't use even lgpl
06:04:00 <Igloo> I meant GPL with an extra line along the lines of the above
06:04:18 <Philippa> isn't the GPL itself copyright so that derivative licenses like that aren't actually legal?
06:04:19 <dcoutts> the thing is that at least initially our public pluging interface(s) will be rather fluid
06:04:28 <dcoutts> and so hard to codify in a license
06:04:36 <ibid> Igloo: my original comment was prompted by the talk about using lgpl instead of gpl because of this :)
06:04:46 <Igloo> Philippa: The licence terms themselves are uncopyrightable
06:04:54 <ibid> Philippa: that's an interesting question
06:05:06 <dcoutts> Philippa, you don't modify the GPL, you say in the copyright statement that it is licnesed under GPL with this or that extension
06:05:08 <sieni> ttp://developer.apple.com/documentation/DeveloperTools/gcc-3.3/libstdc++/17_intro/license.html
06:05:18 <dcoutts> you include a copy of the GPL unmodified
06:05:31 <Philippa> dcoutts: fair enough
06:05:31 <sieni> +h
06:05:32 <Cale> ah, yes, it very much does
06:05:48 <ibid> Philippa: it seems that actual license terms do not get copyright protection (not enough originality?), the gpl copyright covers mainly the preface and the appendix
06:05:50 <dcoutts> Igloo, that's not quite  right, the GPL license itslef is copyright FSF
06:06:00 <ibid> dcoutts: igloo is correct
06:06:06 <Philippa> ibid: in which country's law?
06:06:06 <Igloo> No, licence terms are uncopyrightable
06:06:10 <ibid> dcoutts: see my response to Philippa :)
06:06:20 <Cale> You don't get anything usable when you call drawingAreaGetDrawWindow if the drawing area is hidden.
06:06:44 <ibid> Philippa: the people i've heard this analysis from used the US law, but if the reason is unoriginality, i don't see how it is much different elsewhere
06:06:52 <dcoutts> Cale, null pointer? I should make that return a Maybe then, or throw an exception
06:06:53 <Igloo> The reason AIUI is that there is only one way to say exactly the same thing in legalese, so you can't write your own equivalent licence
06:07:16 <ibid> Igloo: ie. unoriginality :)
06:07:28 <Philippa> I /can/ see that varying from country to country
06:07:36 <Igloo> OK, that's not what I'd understand by the term, but fair enough
06:07:53 <prionic> has anybody tried to setup nibros hspr, lately?
06:08:22 <dcoutts> well the FSF claim copyright :-)
06:08:22 <dcoutts> Copyright (C) 1989, 1991 Free Software Foundation, Inc.
06:08:22 <dcoutts> 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
06:08:22 <dcoutts> Everyone is permitted to copy and distribute verbatim copies
06:08:24 <dcoutts> of this license document, but changing it is not allowed.
06:08:34 <Philippa> you can handle the same thing by case law even, with the net effect being something like "you're going to get to the same place eventually but you'll have to draw it up yourself"
06:08:36 <Igloo> If the preamble and postamble, yes
06:08:54 <dcoutts> but I agree that copyrightability of a license seems questionable
06:09:09 <Cale> I wish the type system could enforce more of these GTK invariants :)
06:09:12 <ibid> dcoutts: if you research this, you'll find the fsf saying much the same thing as what igloo and i have said
06:09:15 <Philippa> certainly there's going to be a wide array of situations in which people're allowed to copy anyway
06:09:27 <dcoutts> Cale, do pass on your sugestions, we'd like to do more of that
06:09:32 <ibid> dcoutts: there's no need to quote from the license, we are all well versed inn it:)
06:09:43 <dcoutts> Cale, preferable in email so we won't forget
06:09:53 <dcoutts> ibid, heh ok :-)
06:09:55 <Cale> dcoutts: well, I'm not sure how to express a lot of the things you'd need to
06:10:32 <Cale> But perhaps if there were some way to get out of this imperative view of things... :)
06:10:34 <Igloo> Oh, and if you're making GPL exceptions you might want to explicitly allow cross-module inlining, too
06:11:29 <JaffaCake> Igloo: good idea, that's always worried me about the LGPL
06:11:56 <dcoutts> JaffaCake, yes, and the LGPL talks about dynamic linking which we don't have
06:12:02 <Cale> dcoutts: I should take another look at fugdets and get back to you :)
06:12:06 <dcoutts> we tend to ignore that ibt
06:12:16 <dcoutts> Cale, hmm, try something more recent than fudgets
06:12:40 <Igloo> We have it with non-Haskell libs
06:12:41 <Cale> something arrow-based?
06:12:46 <dcoutts> Cale, there have been a couple emails to the gtk2hs lists about arrows based high level abstractions
06:12:56 <dcoutts> Igloo, indeed
06:14:11 <Cale> Whatever we do needs to be convenient syntactically too though. :) I suppose with the arrow syntax you get something reasonably nice looking.
06:14:26 * Igloo reads the VH announcement; I can't remember the last time I saw a version 0.0  :-)
06:14:32 <dcoutts> Cale, hmm, I worry about arrow interfaces sometimes
06:15:08 <boegel> Igloo: the only reason they're doing an announcement is to be on time for the HWN issue :p
06:15:57 <Igloo> :-)
06:17:21 <Cale> vx.hn.org/autoshare/nymphaea.tar.bz2
06:17:31 <Cale> perhaps it will work this time :)
06:17:36 <dcoutts> ok
06:17:50 <Cale> annoying that bugs have to be machine dependent :)
06:18:57 <JaffaCake> Here's an old Haskell vs. the LGPL discussion: http://www.haskell.org/pipermail/libraries/2001-May/000416.html
06:19:31 <JaffaCake> I don't agree with everything I said back then, but some of the points are still valid
06:19:36 <dcoutts> Cale, yeah, pixmaps are a bit of an X11'ism, we try to avoid them mostly
06:20:49 <ibid> the lgpl is a bad license, almost everybody agrees on it
06:21:03 <ibid> even the fsf downplays it
06:21:26 <dcoutts> though the fsf dwnplays it for other reasons
06:21:42 <dcoutts> because they want to promote the GPL over the LGPL
06:21:51 <ibid> yes, that's their primary reason
06:21:53 <musasabi> There should be an easy "this library is free keep it that way but I don't care what it is linked with" license.
06:22:09 <vegai> BSD?
06:22:18 <vegai> oh, not really
06:22:21 <ibid> musasabi: there isn't one
06:22:26 <Igloo> BSD doesn't have "keep it that way"
06:22:29 <ibid> musasabi: and there really cannot be one
06:22:29 <vegai> yeah
06:22:39 <ibid> (the lgpl is a demonstration of that)
06:22:46 <ibid> (a failed experiment)
06:22:49 <vegai> what about just saying what musasabi said in the LICENSE file?
06:22:58 <vegai> does it really have to be legalese to be valid?
06:23:07 <ibid> vegai: debian would consider it non-free
06:23:09 <Cale> dcoutts: you might notice that it still has a fairly bad memory leak if you size the drawing window fairly large and click a bunch of times
06:23:13 <vegai> ibid: who cares :)
06:23:21 <ibid> vegai: it has to be precise
06:23:25 <dcoutts> Cale, you're not reusing the pixmap?
06:23:27 <ibid> vegai: unambiguous
06:23:32 <Igloo> vegai: Does musasabi's licence allow cross-module inlining? And would the courts agree with you?
06:23:53 * vegai groans in frustration.
06:23:53 <ibid> vegai: for example, there's nothing saying that the licensor uses "free" to mean "as in speech"
06:24:02 <Cale> Really, I should just create a pixmap when the drawing window resizes, but that's not being done at the moment
06:24:12 <dcoutts> Cale, yes
06:24:16 <ibid> vegai: you also need to define linking
06:24:25 <ibid> (and that's the lgpl tar pit)
06:24:39 <Cale> but it's really strange that the memory for those pixmaps is not being reclaimed
06:24:43 <vegai> add "Users of this library are required to use common sense while applying this license"
06:25:14 <Cale> maybe because GHC sees them as single pointers and therefore too small to care about?
06:25:15 <dcoutts> Cale, they should be reclaimed eventually
06:25:40 <dcoutts> but ForeignPtrs to expensive resources is not ideal
06:25:41 <ibid> vegai: even more non-free.  whose common sense?  what authority does the licensor have over users?  (bare licenses cover distribution etc, but not usage)
06:26:29 <vegai> ibid: those are exactly the kind of things no non-lawyer should need to think about
06:26:30 <Cale> That would be a nice feature for GHC
06:26:32 <sieni> what about WTFPL?
06:26:35 * vegai lives in a dream world.
06:26:35 <sieni> http://joachim.vmlinux.org/cgi-bin/dwww?type=file&location=/usr/share/doc/wmaker/COPYING.WTFPL
06:26:40 <ibid> vegai: you are operating from a false premise
06:26:50 <vegai> ibid: true
06:27:02 <Cale> (have the GC take into consideration the allocated size of ForeignPtrs)
06:28:13 <vegai> ibid: and false :)
06:28:31 <vegai> the question "whose common sense?" can be answered by using common sense.
06:28:56 <ibid> vegai: the point of a free software license is for the author to make promises in the style "if you do this, i won't sue you for infringement"; for that to be a useful promise, it has to be a) explicit and b) precise - which means verbiage (most of the free software license are not in legalese, they're just thorough)
06:29:04 <ibid> vegai: by whose common sense?
06:29:32 <vegai> ibid: whose? The parties' involved
06:29:50 <vegai> I'm not saying that people or especially the juridical system *has* common sense
06:30:17 <ibid> the more plumbing you add to the promise, the more verbiage the license needs.  so, if you want a simple license, ask simple things :)
06:30:28 <ibid> vegai: what if they don't agree on what's common sense?
06:30:29 <vegai> sieni: oh, I missed that. That's good :)
06:30:37 <vegai> ibid: then they're probably not really using common sense
06:30:46 <ibid> vegai: that's not a useful argument
06:31:01 <ibid> there are going to be disagreement
06:31:20 <ibid> so, do we choose the licensor's, the licensee's or a judge's version of common sense?
06:31:48 <vegai> that's a weird question
06:32:00 <ibid> how so?
06:32:14 <ibid> you do know that there are about as many common senses as there are people?
06:32:36 <vegai> that's a rather large assumption
06:32:46 <ibid> that's not an assumption, that's an observation
06:32:49 <vegai> not as large as saying that there's only one, though, but still
06:33:01 <dcoutts> JaffaCake, anyway, apart from IDEs etc, there's many other things to tak about now you're back, especially Cabal things
06:33:10 <ibid> well, i didn't say they're all distinct :)
06:34:15 <dcoutts> JaffaCake, gentoo has started shipping cabalised packages and there are many more on the way
06:34:16 <vegai> as I admitted, I'm living in a dream world
06:34:56 <vegai> how would something like WTFPL work in a courtroom?
06:35:16 <vegai> it would be declared invalid by the judge and then...?
06:35:17 <dcoutts> JaffaCake, and with that initial experience we have some things to suggest, both for cabal and ghc
06:36:24 <vegai> oh, I misread the WTFPL part a bit. I thought it was absurd enough to say that the image files are the license :)
06:37:18 <ibid> heh
06:37:45 <ibid> i usually write that with a little less expletives: "You may treat this [file] as if it were in the public domain."
06:39:10 --- topic: set to '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","see discussion on http://haskell.org/hawiki/hIDE about the development of an IDE for Haskell","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050920","see also #haskell.se #darcs","try '/msg nickserv set unfiltered on' if lamdabot doesn't respond to you"]' by CosmicRay
06:40:12 <vegai> ibid: is that somehow different from "This file is in the public domain"?
06:41:38 <dcoutts> Cale, can I suggest a simple performance improvement?
06:42:04 <boegel> w00 ! HWN !
06:42:26 <dcoutts> JaffaCake, ta for sending the VSIP license
06:42:28 <CosmicRay> :-)
06:42:55 <JaffaCake> dcoutts, sorry disappeared to get lunch
06:42:57 <Igloo> Does the nickserv thing work if you aren't using a registered nick OOI?
06:43:06 <Lemmih> dcoutts: Where can we get the needed information to find the local package db?
06:43:09 <JaffaCake> happy to talk about Cabal things whenever you want
06:43:23 <dcoutts> JaffaCake, cool, perhaps when SyntaxNinja is around is best
06:43:36 <dcoutts> JaffaCake, the ghc comments though...
06:44:04 <Cale> dcoutts: sure
06:44:07 <dcoutts> JaffaCake, I think it'd be easier if ghc used a directory of package files rather than a single file
06:44:23 <JaffaCake> yes, I remember that - I know I dropped the ball a bit
06:44:30 <Igloo> SyntaxNinja isn't normally around in UK office hours
06:44:41 <dcoutts> JaffaCake, I've said this before, but with the experience of integrating cabal/gentoo, I still think it'd be a good idea
06:44:49 <dcoutts> Igloo, oh yeah, oh well
06:44:54 <boegel> CosmicRay: nice one again
06:45:17 <dcoutts> Cale, use a clip region, it saves doing lots of drawing, especialy with the animation
06:45:20 <boegel> CosmicRay: in some way, your HWN issue makes sure I understand what I've read on the mailing lists ! yaay
06:45:21 <JaffaCake> dcoutts: I think it's fine in principle, we just need to work out the details
06:45:29 <boegel> CosmicRay: how about that leather binding ? :)
06:45:49 <Cale> okay
06:45:54 <dcoutts> Cale, it's easy: drawingArea `onExpose` \Expose { region = region } -> do
06:46:07 <dcoutts> Cale, then: cairoRegion region and clip
06:46:28 <ibid> vegai: that's a declaration, which might be false; mine is a license statement (i could probably rewrite even more explicitly as "The author and contributors grant you the license to treat ...")
06:46:34 <dcoutts> Cale, performance then notably improves
06:46:48 <ibid> vegai: not all jurisdictions allow an author to explicitly place their work in the public domain
06:46:56 <vegai> right
06:47:11 <vegai> "Imagine that this [file] is in the public domain"? :)
06:47:30 <dcoutts> JaffaCake, so for some of the details, I sugges that ghc-pkg be able to be used in a mode where you ask "supposing I were to drop this package file in this dir, would there be any problems?"
06:47:34 <vegai> euh, I would be a bad lawyer
06:47:46 <dcoutts> JaffaCake, so you still get the benefits of the ghc-pkg abstraction
06:47:54 <vegai> or if I wasn't, I would try harder
06:48:14 <ibid> vegai: no "i give you permission to treat this file as if it were ..." :9
06:48:44 <dcoutts> JaffaCake, and packagers could use it as an extra sanity check, but we'd get packages that "Just Work"tm wighout having to have lots of pre/post custom actions
06:49:04 <Igloo> ibid: Do jurisdictions that don't allow you to PD things still have a concept of PD?
06:49:20 <JaffaCake> dcoutts: a simple way to think about it is to say that the complete package database is the concatenation of all the files in the directory, except that we can omit the [...] around each file
06:49:28 <ibid> Igloo: of course
06:49:30 <dcoutts> JaffaCake, yep
06:49:58 <musasabi> Who maintains the haskelldb Debian package? (libgmp mess upload would be nice)
06:50:13 <Philippa> Igloo: they're stuck with a concept of "nobody's gonna sue"
06:50:24 <ibid> Igloo: copyright isn't perpetual, works are falling into the public domain as we speak (those dropping now have been typically created in around 1890)
06:50:40 <Philippa> praise bloody disney...
06:50:52 <JaffaCake> dcoutts: what I'm not sure about is the migration path
06:51:01 <dcoutts> JaffaCake, and the other thing we'd like is to have use more than one dir, even for the 'global' package db, on in /usr/lib/ghc-x.Y and one under /usr/local so that we can seperate packages installed by the system package manager, and ones installed manually by the user/local sysadmin
06:51:02 <ibid> hm, actually, works are likely not dropping now
06:51:12 <dcoutts> JaffaCake, allow it to use both for a while
06:51:21 <ibid> those that would be dropping now have already dropped before, when the protection period was shorter
06:51:32 <dcoutts> JaffaCake, /usr/lib/ghc-X.y/package.conf and /usr/lib/ghc-X.y/package.conf.d/*.conf
06:51:42 <ibid> i take that back
06:51:45 <Igloo> ibid: Right, I just wasn't sure if it all worked the same in these odd jurisdictions
06:52:00 <ibid> there are works dropping now, but not as many as there could be
06:52:18 <ibid> Igloo: i'd say explicit pding is possible mainly in the common-law countries
06:52:26 <ibid> but i need to go to a bus, bbl :)
06:52:30 <JaffaCake> dcoutts: ok - do you want /usr/lib/ghc-X-Y/package.conf.d to be built-in, or are you going to use the GHC_PACKAGE_PATH env var (which we haven't implemented yet)
06:52:56 <boegel> fatbrain: new ?
06:52:58 <dcoutts> JaffaCake, I'm happy for it to be built in
06:53:19 <JaffaCake> ok, sounds plausible
06:54:21 <JaffaCake> changes to GHC should be fairly minor... changes to ghc-pkg a little less minor but not too hard
06:54:46 <dcoutts> yes so the question is how ghc-pkg would operatre in that circumstance
06:55:18 <JaffaCake> do you want packages to register into package.conf.d by default?
06:55:23 <dcoutts> the current options to register etc will work fine, their implementation may change slightly
06:55:32 <dcoutts> JaffaCake, I don't really mind
06:55:48 <dcoutts> JaffaCake, the important thing is that we be able to just drop one in
06:56:04 <dcoutts> JaffaCake, so as I mentioned, we might want a ghc-pkg --pretend mode or something
06:56:20 <JaffaCake> if it wasn't the default, then you'd have to say 'ghc-pkg -f /usr/lib/ghc-X-Y/package.conf.d register'
06:56:43 <dcoutts> to check if adding a package to the db would cause any comflicts, and if not the package manager will be responsible for dropping the file into the right dir
06:57:08 <JaffaCake> conflicts are unlikely these days
06:57:24 <dcoutts> JaffaCake, oh yes, well it could be the default, I don't mind, we can supply extra args no problem
06:57:37 <JaffaCake> the only conflict that is really fatal at register time is when a package with the same name/version is already installed
06:58:29 <dcoutts> JaffaCake, well the other thing that worries us is incompatabile versions of packages being used together, but that's a slightly different issue
06:59:21 <JaffaCake> it's hard to detect a problem at register time - it's quite reasonable to have multiple versions of a package installed, for example
07:00:19 <dcoutts> JaffaCake, well there are some situations, eg: pkg A and pkg B both depend on pkg C, A gets built against C-0.1, B gets built against C-0.2, Now I can't use A & B in the same program.
07:00:47 <dcoutts> since A & B may both expose bits of C in their interfaces
07:00:52 <JaffaCake> yes - but it's not illegal to have both A and B registered
07:01:02 <dcoutts> true, jsut we can't use them together
07:01:24 <dcoutts> we could detect it when we build MyProg which uses A & B
07:01:34 <dcoutts> but currently we don't and neither does cabal
07:01:40 <JaffaCake> you might have a system policy that prevents having both A and B installed, I don't think it's something that ghc-pkg should know about though
07:02:01 <JaffaCake> GHC will detect the conflict, BTW
07:02:02 <dcoutts> but cabal might need more help from ghc-pkg in detecting the situation
07:02:16 <dcoutts> yes, we'll get build errors rather than configure errors
07:02:36 <JaffaCake> I see, you want configure errors?
07:02:59 <dcoutts> it'd be nicer if runhaskell Setup.lhs configure could give some helpful message, like rebuild A against C-0.2
07:03:33 <dcoutts> I think this is a problem that people are going to run into, especially if they're usign things like cabal-get
07:04:04 <JaffaCake> well, ghc-pkg has a bunch of logic for detecting these conflicts (it isn't much use right now), but it could be used to implement a kind of "dependency conflict check"
07:04:10 <dcoutts> the binary dep graph is a subset of the sources dep graph, and things may need rebuilding to keep a consistent binary dep graph
07:04:14 <Igloo> configure can't detect that once you allow multiple versions of a package to be in a single executable, as it won't know if the two As are used independently or if things frmo one are given to another
07:05:02 <dcoutts> I din't know that ghc could use two versions of the same package anyway
07:05:15 <JaffaCake> Igloo: a fine point - that's going to be a build error, and hard to detect at configure time
07:05:16 <dcoutts> even if they are indeed used privately/independently
07:05:30 <dcoutts> JaffaCake, it can now can it?
07:05:32 <JaffaCake> dcoutts: it can't... yet :)
07:05:38 <dcoutts> ah, ok
07:06:06 <JaffaCake> we plan to implement it at some point
07:06:36 <dcoutts> so it'll make the situation even harder to detect, unless there is a build-depends-private:
07:07:02 <dcoutts> and we check that build-depends-private packages don't leak into interfaces
07:07:35 <fatbrain> boegel: yes
07:07:45 <boegel> fatbrain: want the tour ?
07:08:02 <fatbrain> yes
07:08:08 * boegel ruffles the drums
07:08:12 <boegel> here we go !
07:08:24 <boegel> first of all, this is the best place to ask Haskell-related questions
07:08:29 * dblhelix leans back and watches boegel doing a tour
07:08:53 <boegel> there are many experienced people in here, both helpfull and grumpy
07:08:54 <JaffaCake> dcoutts: you could continue to require that the transitive closure of dependencies doesn't include two versions of the same package... it's more restrictive than necessary, but enough to prevent accidental build errors
07:09:13 <boegel> most important, there's shapr, the walking Haskell index (and founder of this channel)
07:09:29 <boegel> next, there's lambdabot in here, a powerfull IRC bot with lot's of nifty stuff
07:09:39 <boegel> @eval map (*5) [1..3]
07:09:46 <lambdabot> [5,10,15]
07:09:48 <poetix> @vixen Say hello to fatbrain, vixen
07:09:49 <lambdabot> panties and bras are for weaklings. I like to be free.
07:09:51 <boegel> @type map
07:09:53 <lambdabot> forall b a. (a -> b) -> [a] -> [b]
07:09:58 <JaffaCake> dcoutts: the relaxation of the module restriction will enable us to have multiple packages with the same module name, that's the more important benefit
07:10:07 <boegel> @whereis hIDE
07:10:08 <lambdabot> Maybe you meant: where where+
07:10:12 <boegel> @where hIDE
07:10:13 <lambdabot> http://www.haskell.org/hawiki/hIDE
07:10:21 <boegel> @vixen are you female ?
07:10:23 <lambdabot> of course i'm female
07:10:25 <boegel> @arr
07:10:25 <poetix> @yow
07:10:26 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
07:10:26 <lambdabot> Yow!  Now I get to think about all the BAD THINGS I did to a
07:10:26 <lambdabot> BOWLING
07:10:26 <lambdabot> BALL when I was in JUNIOR HIGH SCHOOL!
07:10:36 <boegel> fatbrain: following so far?
07:10:49 <fatbrain> yes
07:10:57 <boegel> okay, continuing ...
07:11:11 <boegel> next, htere's the Haskell Wiki @ http://haskell.org/hawiki
07:11:21 <dcoutts> JaffaCake, yes, I just worry that the binary dependencies are too complex for our poor package manager to track :-)
07:11:36 <boegel> lot's of usefull stuff on there, project proposal, people brainstorming about stuff, things like that...
07:11:53 <dcoutts> JaffaCake, we'd probably have to rely on cabal detecting things
07:12:01 <boegel> there's also the Haskell mailing list: haskell@haskell.org and haskell-cafe@haskell.org
07:12:29 <Igloo> Hmm, "typeable" or "typable"? The web isn't being very decisive
07:12:32 <boegel> and last but not least, there's TMR (The Monad.Reader), a Haskell e-zine @ http://haskell.org/tmrwiki
07:12:34 <JaffaCake> dcoutts: are the dependencies more complex than just a tree?
07:12:41 <humasect> typeable
07:12:59 <boegel> and off course HWN (Haskell Weekly News), both on the mailing list and @ http://sequence.complete.org/
07:13:02 * dblhelix is impressed by how boegel is giving the tour... has shapr finally met his match?
07:13:05 <boegel> fatbrain: any questions?
07:13:38 <dcoutts> JaffaCake, our package manager is good at tracking source dependencies but much less good at tracking binary dependencies, and in Haskell the two are quite different (in C they're often the same)
07:13:54 <fatbrain> No, not at the moment, I'm gonna check out those url's and after that I might have some questions
07:14:02 * Igloo decides to agree with humasect, despite the History of Haskell's contradiction  :-)
07:14:06 <fatbrain> thanks for the tour
07:14:29 <JaffaCake> dcoutts: you mean Gentoo's package manager?
07:14:34 <dcoutts> JaffaCake, yes
07:15:03 <dcoutts> JaffaCake, and then people using cabal-get for local package installtions will have even less in the way of dependency tracking
07:15:08 <JaffaCake> it lets you upgrade a package without recompiling everything that depends on it, which is broken IMO :)
07:15:12 <boegel> fatbrain: have fun with Haskell, and don't hesitate to keep coming back here and ask (simple) questions
07:15:50 <humasect> igloo: hs-plugins =)
07:15:52 <dcoutts> JaffaCake, yes, because in C you can do that mostly since C libs usually keep their ABI
07:15:56 <humasect> (tops it off)
07:16:14 <JaffaCake> as long as your C libs are dynamically linked...
07:16:17 <dcoutts> JaffaCake, eg glibc, glib, gtk, etc are binary compatible from 2.0 to 2.8
07:16:21 <dcoutts> JaffaCake, yes
07:16:41 <JaffaCake> actually glibc broke binary compatibiliy a few times - GHC suffered badly
07:17:10 <dcoutts> yes, so it depends on the guarantees of the library authors
07:17:25 <fatbrain> boegel: of course :) thanks
07:17:35 <boegel> fatbrain: pleasure
07:17:37 <dcoutts> but it's sufficiently true in C that you can get away with it almost all the time
07:17:59 <dcoutts> the gentoo portage people are working on better binary dep tracking but they're being slow :-(
07:18:00 <JaffaCake> ok, I'll conceed that
07:18:20 <JaffaCake> so what binary dep tracking is in place right now?
07:18:27 <dcoutts> mostly none :-)
07:18:40 <JaffaCake> ah :)
07:19:10 <JaffaCake> so when you've installed a package, the package manager forgets what it depended on?
07:19:27 <dcoutts> eg we have a program to upgrade all your ghc libs when you upgrade ghc, modeled on what the gentoo python people do
07:20:18 <dcoutts> JaffaCake, not quite, it knows what it depends on, but doesn't use that information fully
07:20:36 <dcoutts> JaffaCake, anyway those are source deps, the binary deps are a subset
07:20:42 <JaffaCake> yes
07:21:00 <dcoutts> so it remembers the source deps, but that doesn't help so much
07:21:04 <JaffaCake> but making source deps == binary deps is a good first approximation
07:21:28 <dcoutts> well that'd require rebuilding vast amounts of stuff unecessarily
07:21:42 <dcoutts> eg upgrade glibc -> rebuild everything
07:21:50 <dcoutts> which would not make people happy
07:22:34 <JaffaCake> well, your source dep says glibc>=2.3, and if the binary dep is the same then no recompilation required
07:22:54 <dcoutts> we need to remember things like, if it says >= foo-1.0, then once it's installed it's now == foo-1.0, but only for Haskell packages
07:23:03 <JaffaCake> exactly
07:23:24 <dcoutts> and it depends on the version of ghc it was built with
07:23:37 <dcoutts> I think
07:23:44 <JaffaCake> yes, essentially
07:24:12 <dcoutts> now we can slot things which makes it better than some package managers
07:24:23 <dcoutts> ie have multiple versions installed
07:24:25 <Igloo> Erk. I've just realised you actually need to do that transitively, right?
07:24:29 <JaffaCake> In general, for any source dep on a static library, the binary dep must fix the version
07:24:33 <dcoutts> Igloo, I suspect so
07:24:51 <Igloo> If A srcdeps on B, and B bindeps on C then A bindeps on B and C (all bin deps with exact versions)
07:24:52 <dcoutts> Igloo, I was wondering about that too
07:25:18 <dcoutts> Igloo, the debian package manager can handle that?
07:25:23 <Igloo> Oh, but that's all right, because it's actually /exact/ version and not just upstream version
07:25:32 <JaffaCake> that's true - if C is upgraded then A is invalid, so A depends on C
07:25:54 <Igloo> dcoutts: Yes, I think that will work after all
07:26:35 <JaffaCake> or if "invalid" is transitive then you're ok (B is invalid so A is invalid, and A doesn't need to explicitly depend on C)
07:26:52 <Igloo> Yeah
07:36:21 <dcoutts> Lemmih, we can get the local package file by using ghc's header files
07:37:02 <boegel> Keean and John are using the mailing list as a chat box, cool, isn't it ? :D
07:37:28 <dcoutts> boegel, heh ,invite then to #haskell
07:39:07 <boegel> John is already here, right ? (CosmicRay)
07:40:10 <boegel> hey jewel
07:40:19 <jewel> oi
07:40:20 <jewel> hi
07:40:46 * boegel is glad to see more females in #haskell
07:40:59 * jewel checks penis
07:41:02 <jewel> sorry
07:41:07 <boegel> woops :|
07:41:13 <boegel> it's just...
07:41:15 <boegel> your name...
07:41:17 * boegel blushes
07:41:30 * jewel winks at boegel 
07:41:35 * boegel winks back
07:42:48 <jewel> I don't think I've ever met a female hacker (vs programmer)
07:43:57 <boegel> jewel: Philippa ?
07:46:06 <jewel> haskell hacker?
07:46:12 <earthy> even
07:50:16 <dcoutts> JaffaCake, what's the easiest way for us to find the path of ghc's local package;conf file?
07:50:30 <dcoutts> eg the one the lifes in $HOME/.ghc/i386-linux-6.4.1/package.conf
07:50:47 <dcoutts> I don't see an easy way of getting the ghc version
07:50:51 <JaffaCake> grok the output of 'ghc-pkg list' I guess
07:51:30 <dcoutts> we can get all other other items withing a Haskell module
07:51:36 <JaffaCake> or easier, grok the output of 'ghc -v'
07:52:08 <dcoutts> ok, I guess we'll generate or substitute into a module
07:52:19 <Igloo> Why do you want that?
07:52:34 <dcoutts> so we can load plugins out of the users package db
07:52:44 <dcoutts> rather tha requireing them to be registered globally
07:52:51 <dcoutts> ie with hs-plugins
07:53:07 <Igloo> Ah, this is hide/yi, not gentoo?
07:53:12 <dcoutts> Igloo, yes
07:53:20 <Igloo> OK  :-)
07:54:38 <dcoutts> JaffaCake, we can nearly do it all in a .hs file by #including ghcplatform.h (which gives HOST_ARCH & HOST_OS) but __GLASGOW_HASKELL__  doesn't tell us the minor verion sadly
07:55:33 <JaffaCake> dcoutts: yes, that's deliberate
07:55:55 <JaffaCake> but can you use System.Info.compilerVersion?
07:56:03 <dcoutts> ohh :-)
07:56:23 <dcoutts> oh :-(
07:56:35 <dcoutts> > System.Info.compilerVersion
07:56:35 <dcoutts> Version {versionBranch = [6,4], versionTags = []}
07:56:41 <dcoutts> no ".1"
07:56:49 <JaffaCake> oh
07:58:01 <JaffaCake> oh well, I think that omits the patchlevel for the same reason (it's only intended to be used to distinguish between API versions, which shouldh't change between patchlevels)
07:58:13 <dcoutts> ho hum
07:58:37 <dcoutts> I'll have to use bash/autoconf/ or some other evil power
07:58:45 <JaffaCake> you should probably run ghc --version
07:58:53 <JaffaCake> run it from Haskell with runInteractiveProcess
07:59:07 <dcoutts> $ ghc --numeric-version
07:59:13 <JaffaCake> yup, or that
07:59:30 <dcoutts> ok, I'll go do that
07:59:32 <JaffaCake> you could steal the code from Cabal
07:59:40 <dcoutts> good idea
07:59:45 <JaffaCake> "./Setup.lhs configure" has to check the GHC versions
07:59:50 <dcoutts> yes
08:00:47 <Lemmih> dcoutts: Make sure you call System.Plugins.Consts.ghc
08:01:31 <dcoutts> Lemmih, huh?
08:02:05 <Lemmih> (if you're going for the 'ghc --numeric-version' solution)
08:02:16 <dcoutts> oh ok
08:06:24 <Lemmih> Can the ghc library be installed on GHC 6.4?
08:09:21 * shapr boings happily
08:09:29 <dcoutts> heh, cabal does it by running ghc --version > tmp and then parsing the contents of tmp
08:09:43 <shapr> JaffaCake: When do you expect 6.6? Or will it be 7.0 ?
08:10:34 * JaffaCake raises his weary head from where it had collapsed on the keyboard
08:10:39 <JaffaCake> 6.6???
08:11:20 <dcoutts> poor JaffaCake, he just gets 6.4.1 out the door with a ton ob fixes and people are pestering him about 6.6
08:11:24 <dcoutts> :-)
08:12:03 * shapr grins
08:12:08 <JaffaCake> only joking... 6.6 in a few months I suppose
08:12:26 <shapr> ok, just curious when we can expect to see -smp in general use.
08:12:34 <dcoutts> oh, that soon eh
08:12:52 <JaffaCake> we're working on some major changes in the SMP stuff, that's my next project
08:12:59 * Igloo wonder what will be worthy of making a 7.0
08:13:27 <JaffaCake> 6.6 has SMP and the GHC API so far, not sure if that's worthy of 7.0
08:13:46 <basti_> a pvm interface!
08:13:50 <dcoutts> chuck in shared libs and I'm sure it would be :-)
08:13:51 <basti_> :D
08:14:00 <shapr> What sort of changes? Is there a short summary of the SMP changes planned?
08:14:01 <JaffaCake> hehe, shared libs aren't that hard
08:14:16 <Igloo> Shared libs on all platforms?  :-)
08:14:36 <JaffaCake> shapr: not really... but we're reworking the scheduler to reduce lock contention and improve affinity
08:14:43 <shapr> Ah, ok.
08:14:46 <JaffaCake> Igloo: just the ones that matter ;)
08:15:11 <shapr> Will you be increasing the scheduler granularity as well? I know House could use that.
08:15:19 <JaffaCake> I nearly have shared libs on amd64, but the linker isn't being terribly cooperative at the moment
08:15:52 <dcoutts> oh and some core library bits, like Data.PackedString.UTF8, System.MMap (in terms of System.Posix.MMap or System.Win32.MemoryMapping)
08:15:55 <JaffaCake> shapr: you can change the scheduler granularity with +RTS -C, or did you mean something different?
08:16:29 <dcoutts> JaffaCake, I heard you made some changes to ForiegnPtr? dons was saying
08:16:43 <shapr> Hm, I don't remember the details. Lunar^_ told me something about scheduler changes needed to have hOp/House as a real everyday OS.
08:16:47 <JaffaCake> dcoutts: just the changes already in the HEAD
08:17:09 * shapr pokes Lunar^_ 
08:17:25 <dcoutts> JaffaCake, yes, so how's it different/better now?
08:17:34 <shapr> Quel dommage, il dormir.
08:17:52 <JaffaCake> ForeignPtr is a product type now (single constructor), and it stores the Addr# directly
08:17:53 * shapr totally forgets how to conjugate "to sleep"
08:18:01 <JaffaCake> makes it much more amenable to optimisation
08:18:09 <earthy> 'il dorme'
08:18:09 <dcoutts> JaffaCake, so one less indirection on access?
08:18:19 <JaffaCake> yes
08:18:26 <earthy> of 'il est dormant'
08:18:30 <earthy> or somesuch
08:19:28 <JaffaCake> dcoutts: I sent dons my attempt at a packed string library, it uses ForeignPtr and gets pretty good performance
08:19:58 <JaffaCake> I think he's going to merge it with his
08:20:03 <dcoutts> JaffaCake, nice, so it'd make our Pixbuf array stuff quicker to I expect
08:20:12 <JaffaCake> should do, yes
08:20:14 <dcoutts> JaffaCake, yes a standard one would be nice
08:20:33 <earthy> hm. sounds schweet
08:20:56 <JaffaCake> there's almost no penalty for using ForeignPtr vs. Ptr now
08:21:03 <dcoutts> excelent
08:21:31 <dcoutts> well done JaffaCake :-)
08:21:46 <shapr> JaffaCake: Many thanks for all your work on GHC!
08:22:01 <JaffaCake> I can't take all the credit... other people prodded me in the right direction (weren't you one of them? :))
08:22:23 <shapr> Um, maybe.
08:22:32 <shapr> I'm good at cheerleading.
08:22:49 <JaffaCake> was referring to dcoutts, but never mind :)
08:22:52 <dcoutts> JaffaCake, well if you count me winging about using ForeignPtrs in loops, then perhaps yes :-)
08:22:59 <shapr> whew
08:23:47 <shapr> I want a Dummies' guide to GHC.
08:24:15 <CosmicRay> shapr: I want a Dummie's guide to performant 8-bit strings in GHC. ;-)
08:24:18 <int-e> "Use BASIC" ?
08:24:28 <shapr> John Meacham asked about quickcheck tests for optimizations, any ideas how that would work?
08:24:28 <basti_> CosmicRay: packed strings?
08:24:35 * int-e ducks.
08:24:42 <CosmicRay> basti_: those are still 32-bit.
08:24:46 <CosmicRay> basti_: FastPackedStrings are 8-bit.
08:24:59 <CosmicRay> but neither of them works well for using Parsec to handle binary network protocols ;-)
08:25:18 <basti_> ahh
08:25:32 <basti_> youre aware that you buy that memory savings at the expense of time?
08:25:47 <basti_> in most of the cases at least
08:25:53 <CosmicRay> how's that?  shouldn't FastPackedStrings be faster since there's no more 8-to-32-bit conversions going on?
08:26:08 <CosmicRay> or weird unicode stuff interfering with binary protocols (see hugs)
08:26:08 <JaffaCake> CosmicRay: try using Alex to parse your network packets?
08:26:36 <basti_> uhm... i was thinking like: an 8-bit memory access is the same as a 32-bit access, just with some logic happening after
08:26:40 <basti_> (probably in microcode)
08:27:05 <basti_> maybe we were talking about different things
08:27:07 <CosmicRay> basti_: it can't help cache performance to have 3 unused bytes.
08:27:19 <basti_> thats the other side of the medal then, yes
08:27:27 <CosmicRay> JaffaCake: hmm.  I've never used alex but I am familiar with the lex concept.  You think it would be easier than parsec for binary network protocols?
08:27:42 <basti_> probably these days this is more important again too
08:27:50 <JaffaCake> sure, we use Alex on binary data in GHC's parser
08:28:45 <CosmicRay> JaffaCake: what about it makes it easier than parsec for this?
08:29:15 <JaffaCake> I'm not sure why using parsec is difficult, actually
08:29:24 <musasabi> CosmicRay: for performance using just a basic buffer (with ForeignPtr) + peek/poke is quite fast.
08:29:43 <dcoutts> CosmicRay, alex allows you to define your own char reader thingy
08:29:49 <JaffaCake> CosmicRay: I mean I haven't tried, so don't fully understand the problems
08:29:55 <dcoutts> CosmicRay, so you're not restricted to strings as input
08:30:03 <CosmicRay> dcoutts: ah ha.  that would be key.
08:30:12 <JaffaCake> but Alex abstracts the underlying Char stream, so you can replace it with an array or whatever you want
08:30:18 <CosmicRay> JaffaCake: Parsec will only parse over 1) lists of something, or 2) a file.
08:30:25 <JaffaCake> ah
08:30:28 <dcoutts> CosmicRay, so eg ghc's Alex lexer reads byte by byte from a big chunk of memory
08:30:34 <CosmicRay> JaffaCake: it has no provision for me to provide, say, an IO function that yields chunks of CStrings or whatnot.
08:31:09 <CosmicRay> dcoutts: sounds like a nice compliment to mmap.
08:31:38 <dcoutts> CosmicRay, if it can read direct from a file then you can probably hack it to use an arbitrary (IO Char) function
08:32:08 <dcoutts> CosmicRay, yes, ghc currently 'slurps' it's input files rather than mmaping them, but it's an implementation detail
08:32:08 <CosmicRay> dcoutts: I suspect it just does hGetContents on the file.  but yes, I suppose with appropriate use of unsafeInterleaveIO, that could be done.
08:32:20 <dcoutts> CosmicRay, oh, ho hum
08:32:29 * CosmicRay throws the insufficient laziness trout at dcoutts
08:32:32 <JaffaCake> dcoutts: I have wondered from time to time whether we should mmap() instead
08:32:49 <dcoutts> JaffaCake, particularly for .hi files I'd think it'd help
08:33:06 <dcoutts> because they get read over and over during the course of a build
08:33:06 <JaffaCake> indeed, good opint
08:33:25 <JaffaCake> only once if you use --make, though
08:33:31 <musasabi> mmap may not be worth the while.
08:33:38 <dcoutts> hence the need for a nice System.MMap module :-)
08:33:55 <CosmicRay> dcoutts: ... which would be *incredibly easy* to implement.
08:34:09 <dcoutts> darcs uses mmap & ForeignPtr quite a bit with good effect
08:34:28 <CosmicRay> I use it in one of my not-yet-finished projects to calculate MD5s.
08:34:38 <CosmicRay> though both the mmap and the MD5 calculation happens in C.
08:35:39 <dcoutts> CosmicRay, though you'd want it to be portable to win32 too
08:35:58 <dcoutts> CosmicRay, but yes, one could start with System.Posix.MMap
08:36:12 <JaffaCake> if someone implements it, it goes in
08:36:20 <CosmicRay> dcoutts: yes, one could always do that and state that it's not portable at the outset ;-)
08:36:29 <dcoutts> and do System.MMap once it's clearer how people us it
08:37:06 <dcoutts> JaffaCake, hmm, prod one of the darcs people, perhaps Igloo to pull the mmap stuff out of darcs
08:37:12 <musasabi> CosmicRay: for parsec it might make sense to make it eat [FastPackedString] (makes interleaving IO easy)
08:37:42 <shapr> I'm looking forward to --make that doesn't link everytime.
08:37:45 <dcoutts> I'd say ask dons since he pulled out the FPS stuff, but I don't want to distract dons from Yi/hIDE :-)
08:37:53 <Igloo> I need to get around to asking contributors about BSDing code first
08:38:03 <dcoutts> Igloo, oh yes right
08:38:22 <Igloo> But I dislike this "throw it into ghc" attitude
08:38:43 <CosmicRay> musasabi: wouldn't I have to convert it to [Word8] for Parsec's sake?
08:38:52 <musasabi> Having too many things in the base package will make dependencies more unclean.
08:38:53 <CosmicRay> Igloo: it works well for python.
08:38:59 <JaffaCake> Igloo: you do?
08:39:12 <dcoutts> Igloo, hmm, but for low level small thing I think it makes sense, you know I'm all in favour of pulling some of the larger packaes out, eg X11, OpenGL, HGL, FGL,
08:39:22 <Igloo> Yes; I want things pulled /out/ of the compilers, into their own cabal packages
08:39:28 <musasabi> CosmicRay: currently yes, but with a modified parsec that should work. Most importantly it does not require IO inside.
08:39:37 <JaffaCake> we're talking about the unix package, it's not really part of GHC
08:39:39 <CosmicRay> dcoutts: I'd agree with that, but I'd think that we could add more pure-Haskell things *in*, such as FTP libraries, etc.
08:40:01 <Igloo> Then stop shipping it with ghc  :-)
08:40:04 <dcoutts> Igloo, but System.MMap or Data.PackedString are just the sort of small modules that should be gathered together and distributed with the compiler
08:40:22 <JaffaCake> for lack of another maintainer, I maintain it
08:40:26 <dcoutts> it's the big chunks like OpenGL, FGL, etc that should be cabalised
08:40:29 <Igloo> dcoutts: It shouldn't matter if cabal works
08:40:31 <JaffaCake> (also, I wrote most of it)
08:40:52 <Igloo> Having things shipped with the compilers means real headaches for having things synchronised
08:41:05 <dcoutts> Igloo, true, but how far do we go with the proliferation of tiny little packages
08:41:20 <shapr> If cabal-get works, then you can go as far as Debian.
08:41:26 <JaffaCake> the plan has always been to separate these packages out... just waiting for all the infrastructure to be in place
08:41:49 <Igloo> dcoutts: I don't really mind how small they are (although I think missingh is silly) as they aren't in the compilers
08:41:53 <dcoutts> but eg glibc is one block, hence mmap should be in base or at least distrbuted with the compiler
08:41:59 <CosmicRay> musasabi: how about something that works with CStringLen
08:42:07 <CosmicRay> musasabi: it would seem to work a little easier with hGetBuf
08:42:12 <Igloo> s/as/as long as/
08:42:37 <musasabi> CosmicRay: but you need IO for peek/poke.
08:42:38 <dcoutts> JaffaCake, ah, then there's another thing for ghc 7.0 :-) stripping out some of the non-core packages that come with ghc
08:42:47 <JaffaCake> it needs to be (almost as) easy as it is now to get GHC + a bunch of useful libraries, though
08:43:01 <musasabi> CosmicRay: and I really think that using fps is better than a Ptr.
08:43:13 <shapr> Can you put a bunch of cabal packages into a single tgz and install from there?
08:43:17 <dcoutts> yes, cabal-get and the distro packaging systems need to be more fully developed
08:43:25 <dcoutts> shapr, not yet
08:43:41 <CosmicRay> musasabi: looking at the FPS interface, it says that converting a FPS to a [Word8] is O(n).
08:43:43 <shapr> Patches accepted, right?
08:44:00 <CosmicRay> musasabi: I would have expected it to be O(1), since it is essentially casting a pointer in memory to a different type.
08:44:09 <musasabi> CosmicRay: of course. Also converting CStringLen to [Word8] is O(n)
08:44:14 <CosmicRay> ah, perhaps what I was after is a Ptr Word8.
08:44:16 <dcoutts> shapr, yes multi-package cabal thingies is on SyntaxNinja's "please sned me patches" list
08:44:41 <CosmicRay> musasabi: what I'm after is something that lets me suck in binary data to memory and consume it directly with parsec, no conversions needed.
08:44:49 <JaffaCake> dcoutts: I think we need to put some serious thought into that before writing patches
08:44:50 <musasabi> CosmicRay: FastPackedString -> Ptr Word8 is O(1) (unless you want to a pointer to a copy).
08:44:55 <CosmicRay> it sounds like FPS doesn't do that.
08:45:05 <dcoutts> JaffaCake, yes I agree, I can see some pitfalls
08:45:08 <Igloo> You can't use Haskell lists if you want that
08:45:24 <CosmicRay> Igloo: I know
08:45:34 <musasabi> CosmicRay: fps is currently the best abstraction for that.
08:45:50 * musasabi is waiting conditional dependencies to add fps support into network-alt.
08:46:22 <CosmicRay> musasabi: It doesn't have and FastPackedString -> Ptr Word8, does it?
08:46:28 <CosmicRay> musasabi: *nice*
08:46:33 <CosmicRay> s/and/any/
08:47:27 <musasabi> unsafeUseAsCStringLen :: FastString -> (CStringLen -> IO a) -> IO a
08:47:36 <CosmicRay> hah
08:47:51 <CosmicRay> and -- nice.
08:47:54 <musasabi> That is unsafe because you could be evil and poke the Ptr thus mutating the contents of the FastPackedString.
08:48:44 <musasabi> But ideal foor peek.
08:48:49 <CosmicRay> indeed.
08:49:27 <musasabi> For the other way (constructing data) generate looks like a good interface.
08:49:33 <CosmicRay> although, recvBufFrom already returns a Ptr a....
08:50:44 * musasabi has had enough Ptr related bugs in Haskell programs to want abstracting them away when possible.
08:50:49 <Igloo> @type Foreign.peek
08:51:25 <musasabi> @type Foreign.Ptr.peek
08:51:33 <lambdabot> forall a. (Foreign.Storable.Storable a) => GHC.Ptr.Ptr a -> IO
08:51:33 <lambdabot> a
08:51:33 <lambdabot> bzzt
08:51:43 <Igloo> Hmm
08:52:45 * Igloo wonders about peek :: (Memory m, Storable s) => m s -> IO s; instance Memory Ptr; instance Memory ReadPtr
08:53:20 <Igloo> Or somesuch
08:58:48 <musasabi> Igloo: how about rather extending array interface to pointers?
09:00:26 <Igloo> How does that allow you to write a safe useAsCStringLen?
09:01:14 <earthy> 'comes with batteries included' *nod*
09:01:29 <earthy> i.e.: yes, separating things out into cabal packages is a good idea
09:01:37 <earthy> but make a tarball that comes with batteries included
09:02:00 <earthy> that is: with much of the stuff that is now in GHC's hierarchical libs
09:05:36 <musasabi> Igloo: well providing a read-only array instance of FastPackedString should be easy (that works like an IArray)
09:06:41 <Igloo> We don't have read-only arrays do we?
09:06:56 <Igloo> Unless you mean you want // to memcpy the whole thing?
09:07:22 <Igloo> I was talking about a type that only has the read operations defined on it
09:07:29 <musasabi> Igloo: well that is not much different from what PArray does.
09:07:47 * Igloo doesn't know PArray
09:08:19 <musasabi> Parallel arrays in GHC.PArr
09:08:38 <dcoutts> Lemmih, I'm about to add src/Hide/SystemEnv.hs with a function userPkgConf :: IO FilePath
09:09:10 <dcoutts> Lemmih, I'd use that in src/Main.hs in the loadPlugin function right?
09:09:19 <greenrd> Does anyone know of a proof assistant / prover that has a vaguely Haskell-like syntax?
09:10:14 <dcoutts> Lemmih, ech, maybe I'll leave that bit to you or dons
09:11:06 <Lemmih> dcoutts: Neat!
09:12:57 <dcoutts> Lemmih, pushed
09:13:22 <dcoutts> Lemmih, I'll let you figre out how to use it if that's ok :-) loadPlugin scares me
09:13:44 <Lemmih> (:
09:14:18 <dcoutts> Lemmih, I'm about to add a build script that will configure/build/install/register all the packages locally
09:20:17 <Lemmih> dcoutts: hIDE can now load plugins from the local package db. Yay! (:
09:21:22 <dcoutts> Lemmih, cool
09:22:31 <dcoutts> Lemmih, once cabal can use other package config dbs I think hIDE should use it's own package db, what do you think?
09:22:57 <Lemmih> I agree.
09:25:44 * Lemmih thinks hIDE is evolving pretty fast.
09:25:49 <greenrd> OK, I might try writing my own proof tool in Haskell
09:26:22 * dcoutts agrees with Lemmih 
09:26:29 <musasabi> greenrd: you might want to ask at haskell-cafe.
09:26:51 <musasabi> I think there are a few tools into that direction, but I have never investigated them.
09:29:08 <greenrd> musasabi: OK will do
09:29:42 <greenrd> And what's this?
09:30:02 <greenrd> coolness: "ghc-src is a Haskell parser with full support for every GHC extension. It is based on the GHC source and is meant as a replacement for haskell-src-exts, though it could of course have other ueses."#
09:30:08 <greenrd> thanks Lemmih!
09:30:13 <Lemmih> No problem (:
09:30:16 <greenrd> just what I needed!
09:44:08 <dcoutts> Lemmih, hmm the local package db isn't working for me
09:44:17 <dcoutts> hIDE: Unknown package: hide-base-0.1.0
09:44:26 <Akshaal> hello
09:44:29 <dcoutts> but ghc-pkg list shows it's registered ok
09:45:11 <dcoutts> and ghci -package can load it ok
09:48:10 <Lemmih> I'll look into it.
09:48:26 <dcoutts> Lemmih, I've pushed the build script
09:48:51 <Lemmih> Ah. Found it.
09:49:31 * dcoutts goes to get some more tea and waits Lemmih's patch
09:49:40 <Lemmih> Evil lazy IO is the problem.
09:50:20 <dcoutts> oh?
09:50:50 <Lemmih> Oh wait, no.
10:05:40 <Lemmih> dcoutts: Fix pushed.
10:05:47 <dcoutts> Lemmih, great
10:08:32 <dcoutts> Lemmih, yay, it loads
10:10:47 * Lemmih is working on proper syntax-highlighting now.
10:10:51 <Lemmih> Hi SyntaxNinja.
10:10:53 <dcoutts> sool
10:10:58 <dcoutts> cool, I mean :-)
10:11:15 <dcoutts> Lemmih, I notice there is some sligt lag when typing
10:11:27 <dcoutts> I wonder if we can do anything about that
10:11:50 <dcoutts> perhaps it's due to the thread stuff
10:12:12 <dcoutts> I should see if you get the same lag on the yi console version
10:12:17 * Lemmih haven't noticed any delays.
10:12:40 <dcoutts> hmm, compare entering text quickly in the Yi edit box and the one below
10:12:52 <dcoutts> it's not a big delay
10:12:58 <dcoutts> it's really quite slight
10:13:51 <psi> is there a screenshot of the current hide progress? :)
10:14:01 <SyntaxNinja> HI  LemmiH
10:14:02 * Lemmih can't feel the difference.
10:14:16 <Lemmih> Except that the cursor keeps blinking in the Yi handled buffer.
10:14:23 <cjb> Hm.  Does anyone else use a Touchstream keyboard?
10:15:39 <Lemmih> psi: There haven't been much visual progress since the last screenshot.
10:15:49 <dcoutts> where was the last one?
10:15:54 * dcoutts uploads a new one
10:17:10 <psi> Lemmih: do you mean the mockup on the wiki?
10:17:13 <Lemmih> dcoutts: The gui mockup on the Wiki.
10:17:37 <dcoutts> http://haskell.org/~duncan/hIDE/hIDE.png
10:18:07 <dcoutts> this one shows the current syntax highliting and the thing actually running rather than just in the GUI designer
10:18:46 <psi> nice :)
10:19:20 <psi> I need to get glade compiled on os x. darwinports is giving me a hard time doing so.
10:20:01 <dcoutts> Lemmih, dons had some code to make the view use a monospace font, or perhaps it was courier
10:20:16 <dcoutts> in this pic: http://www.cse.unsw.edu.au/~dons/yi+gtk.png
10:23:27 <basti_> my this is really going quick
10:23:42 <dcoutts> basti_, well, looks can decieve
10:23:53 <dcoutts> it's quite easy to throw together a GUI mockup
10:24:07 <dcoutts> connecting up all the stuff can take more time
10:24:14 <basti_> ah its a mockup
10:24:17 * basti_ phews
10:24:38 <dcoutts> well actually it does allow you to edit the file
10:24:51 <dcoutts> using Yi's input and buffer management
10:25:33 <basti_> but the colors aren't there?
10:25:38 <dcoutts> the rest of the ide shell is still mostly a mockup
10:25:47 * basti_ nodnods
10:25:48 <dcoutts> oh yes, the syntax highliting is there
10:25:54 <basti_> ohh :D
10:26:01 <Lemmih> Well not really.
10:26:13 <dcoutts> using a Gtk widget that does syntax highliting
10:26:17 <basti_> heh
10:26:18 <basti_> okay
10:26:20 <dcoutts> it's not done in Haskell yet
10:26:34 <dcoutts> that's what Lemmih says he's working on now :-)
10:26:50 <SyntaxNinja> looks like youc guys can quit working on hIDE; visual studio for haskell was just released ;)
10:26:56 <SyntaxNinja> and it integrates w/ cabal!
10:27:04 <dcoutts> pa!
10:27:09 <dcoutts> so will hIDE :-)
10:27:10 <Lemmih> :-P
10:27:15 * SyntaxNinja is tired of this half-assed support for cabal in Unix, I'm switching!
10:27:17 <SyntaxNinja> ;)
10:27:24 <dcoutts> SyntaxNinja, indeed ours uses cabal for it's plugins
10:27:33 <SyntaxNinja> sweet
10:27:36 <dcoutts> so you can write hIDE plugins as cabal packages
10:27:39 <SyntaxNinja> OK I'll stick with unix
10:27:47 <dcoutts> phew! :-)
10:28:02 <xerox> Do you know one gets "*** #haskell [freenode-info] please register your nickname...don't forget to auto-identify! http://freenode.net/faq.shtml#nicksetup" on join?
10:28:05 <SyntaxNinja> cabal-and-hide?
10:28:26 <dcoutts> SyntaxNinja, actually this brings up the issue of package databases again
10:28:32 <SyntaxNinja> again?!?!
10:28:38 <dcoutts> sorry :-0
10:29:02 <SyntaxNinja> so how's that?
10:29:03 <SyntaxNinja> hi CosmicRay
10:29:10 <basti_> xerox: only as long as i didnt register.
10:29:22 <dcoutts> SyntaxNinja, it'd be nice if hIDE could use it's own seperate package db to save polluting the global or local user's one with loads of hide-* packages
10:29:28 <xerox> basti_: I do!  But I got it O_o
10:29:37 <basti_> ohh
10:29:37 <SyntaxNinja> dcoutts: I agree.
10:29:39 <xerox> Anyway, I finally got this damn passport.
10:30:24 <dcoutts> SyntaxNinja, so building hIDE plugins would want to do: runghc Setup.lhs install --package-db=$HOME/.hIDE/plugins.conf
10:30:29 <SyntaxNinja> dcoutts: so first step, I think, is add --ghc-options and --ghc-pkg-options to cabal. that's a good workaround that's completely fine.  then we can back-fill witha proper solution later.
10:30:40 <prionic> how do i define DEBUG for the cpp preprocessor?
10:30:43 <dcoutts> SyntaxNinja, yeah, ok
10:30:57 <dcoutts> prionic, -DDEBUG
10:31:35 <prionic> dcouts: thx
10:31:45 <SyntaxNinja> later == after ICFP, or if JaffaCake  overrules me and Just Does It
10:33:48 <dcoutts> SyntaxNinja, np
10:36:20 <Akshaal> does winner of ICFP known?
10:36:22 <SyntaxNinja> I'm a total nerd.  I'm seriously trying to figure out how I can get by without bringing a cell phone/pda, two laptops, a digital camera, and two ipods to estonia.  one laptop and one ipod are my gf's
10:36:30 <SyntaxNinja> Akshaal: that's announced at the conference
10:43:07 <Igloo> Is your gf going too?
10:43:17 <Igloo> And what's the problem with taking them?
10:43:54 <SyntaxNinja> she's in germany, and I'm visiting her after
10:44:07 <SyntaxNinja> eh, just too much expensive stuff to travel with
10:44:16 <SyntaxNinja> expensive, easy to steal
10:45:31 <Igloo> Ah
10:46:06 * vegai is away: gone for awhile
11:31:12 <greenrd> Lemmih: I get this error when I try to build ghc-src-0.2.0:
11:31:21 <greenrd> can't find source for Language.Haskell.GHC.Parser in ["."]
11:31:35 <greenrd> woops
11:31:35 <Lemmih> Did you run './Setup.lhs configure'?
11:31:48 <greenrd> yes, but I specified the wrong path to cpphs
11:31:56 <greenrd> I specified the dir not the executable
11:32:09 <greenrd> It should really print an error message when it tries to execute the dir.
11:32:45 <Lemmih> Yeah it should. Creating Langauge.Haskell.GHC.Parser at configure time is a dirty hack /-:
11:33:13 <Lemmih> Feel free to send patches (:
11:54:07 * shapr boings
11:54:25 <dcoutts> @arr
11:54:26 <lambdabot> I heard andersca is a pirate
11:54:30 <shapr> I heard that too!
11:54:57 <dcoutts> what's up shapr
11:55:29 <shapr> I'm working, though I'd rather be Haskelling.
11:55:38 <dcoutts> I bet
11:55:49 <dcoutts> what do you work on these days?
11:56:09 <Muad_Dibber> dishwasher
11:56:21 <dcoutts> @google dishwasher
11:56:23 <lambdabot> http://www.reviewcentre.com/products92.html
11:56:28 <dcoutts> heh
11:56:51 <shapr> dcoutts: SSDD, I'm writing some SQL to put employee info into a webpage.
11:57:14 <Itkovian> evening
11:57:17 <dcoutts> but not using Haskell :-(
11:57:22 <dcoutts> evening Itkovian
11:58:35 <shapr> Sadly not.
11:59:02 <shapr> One reason I like HaskellDB so much is that I've used "smart SQL generation code" in other languages.
11:59:36 <shapr> How's yiDE going?
11:59:40 <dcoutts> you mean used the sql generated by HaskellDB in for example a php script
11:59:46 <dcoutts> shapr, oh it's ok
12:00:00 <dcoutts> Lemmih, is working on proper syntax highliting
12:00:20 * Lemmih is about to release ghc-api which is the first step towards syntax highlighting.
12:00:24 <dcoutts> dons is planning to put in a fews days soonish
12:00:34 <shapr> Nah, I mean that Zope has ZSQL methods that parameterize SQL, and it's such a horrible hack and it works so badly, and has so many holes where stuff breaks... that HaskellDB is like heaven.
12:00:39 <dcoutts> I'm working on the module/file browser
12:00:43 <shapr> Cool!
12:01:10 <dcoutts> and I've been trying to persuade kolmodin to chip in next month after he finnishes his exams
12:02:04 <dcoutts> kolmodin was one of the people who did the Haste IDE (out of a team of 2 good Haskell devs and 3 'other' ones)
12:03:09 <dcoutts> shapr, oh I see what you're saying about HaskellDB
12:10:09 <shapr> I worked on some multipage SQL queries when I had my first professional programming job. I wish I'd had HaskellDB then.
12:10:20 <dcoutts> I bet
12:10:57 <shapr> Most of the queries would have been small and manageable if we'd had the higher order query abilities of HaskellDB.
12:11:04 <shapr> hola jao
12:11:34 <shapr> It's me!</shapr>
12:11:48 <xerox> How many people in #haskell today.
12:11:54 <Muad_Dibber> a lot
12:11:57 <Muad_Dibber> how many active?
12:12:02 <Muad_Dibber> the same as usual :P
12:12:18 <shapr> Would be cool to ask lambdabot how many unique nicknames/hostnames have been active in the last 24 hours.
12:12:40 <xerox> Plugin/Stats.hs
12:12:48 <Itkovian> that was fast
12:13:09 <xerox> Now do apply ("emacs "++) and hit RRT
12:13:11 <xerox> *RET
12:21:22 <jao> hola, shapr
12:21:52 <CosmicRay> xerox: 151.
12:23:58 <Itkovian> but how many of those actually speak?
12:24:06 <Itkovian> or rather, speak on topic
12:24:28 <Muad_Dibber> 6?
12:24:41 <CosmicRay> heh
12:24:44 <Muad_Dibber> Itkovian, CosmicRay, shapr, dcoutts, xerox, Philippa?
12:25:54 <xerox> TheHunter, Cale, e many else too :)
12:26:00 <CosmicRay> boegel, cale, basti, dons, ibid, igloo, jaffacake, lispy, metaperl, musasabi, philippa, rafl, sbeyer, syntaxninja, vegai, etc. all do.
12:26:03 <CosmicRay> there are more.
12:26:22 <Muad_Dibber> sure :)
12:26:24 <xerox> dons!  Missed him, I need @karma-
12:26:30 * dcoutts blabberson and on
12:26:33 <Muad_Dibber> there is no way to monitor that though :P
12:26:33 <Itkovian> boegel
12:26:35 <Itkovian> ?
12:26:46 <Muad_Dibber> nice to meet you dcoutts blabberson, i'm Muad_Dibber :)
12:26:52 <Itkovian> but no way all 151 say something
12:27:04 <Itkovian> THIS IS YOUR WAKE UP CALL! Talk, we are listening!
12:27:06 * dcoutts can't spell
12:27:17 <Itkovian> neither can I
12:27:20 <Itkovian> no worries
12:27:21 * dcoutts blabbers on and on!
12:27:25 <Muad_Dibber> oh
12:27:30 <Muad_Dibber> it was a nice name for you though :P
12:27:34 <Itkovian> lol
12:27:38 <dcoutts> :-)
12:27:42 <sbeyer> CosmicRay, hm?
12:28:06 <Muad_Dibber> and besides dcoutts, i dont like you no more :P
12:28:14 <dcoutts> oooh!
12:28:26 <Muad_Dibber> winning the lambdacontest from me
12:28:26 * dcoutts skulks off
12:28:27 <Muad_Dibber> bah :P
12:28:35 <dcoutts> heh heh heh
12:29:01 <xerox> I didn't vote, but I would have voted for the first dcoutts' one.
12:29:25 <dcoutts> ta xerox :-)
12:29:47 <dcoutts> xerox, did you see the conversation with Cale this morning?
12:29:53 <xerox> Yup
12:29:57 <dcoutts> xerox, have you seen his latest code
12:30:13 <xerox> Nope
12:30:19 <dcoutts> the issue was that he needed a persistent surface to use as a background
12:30:25 <xerox> Yes
12:30:33 <dcoutts> oh go take a look, it's quite nice
12:30:46 <xerox> Will do!
12:30:57 <CosmicRay> sbeyer: I was just naming people that speak ;-)
12:31:00 <dcoutts> xerox, vx.hn.org/autoshare/nymphaea.tar.bz2
12:31:01 <xerox> I'd love to hack but I'm way too sleepy :-/
12:31:16 <dcoutts> xerox, np
12:31:23 <xerox> dcoutts: if you can convert it to a patch I could apply them to the repo
12:31:35 <xerox> I suppose I could do it, *yawn* :)
12:31:53 <dcoutts> xerox, ask Cale to do it
12:32:00 <xerox> OK.
12:32:16 <xerox> I'm very sorry to not be part of the developing :(
12:32:23 <xerox> ..at least 'active part'
12:32:41 <dcoutts> xerox, I'm not either, I'm just an advisor :-)
12:33:14 <xerox> I should be!  School is sucking too much time, and going back and forth for this passport issue made me very tired.
12:33:27 <dcoutts> poor xerox
12:33:36 <xerox> At least, finally I got it.
12:34:00 <xerox> I still can't read the legalese-written modules I'm supposed to fill, but hey :)
12:36:12 <xerox> OK, goodnight (with eventual jumps in the chat if needed).
12:46:57 <ski> FoldArrow> run (fold >>> arr (maybe 0 (\(x,y) -> x + y))) [1,2,3,4]
12:46:57 <ski> 10
12:48:32 <xerox> :t run ?
12:48:53 <ski> run :: ContArr r x r -> (x -> r)
12:50:15 <ski> also
12:50:28 <ski> fold :: ContArr r [a] (Maybe (a,r))
12:50:37 <ski> (hehe)
12:51:12 <ski> an interesting idea i got
12:51:28 <ski> sortof converting internal iteration into external iteration, i think
12:55:38 <Itkovian> brb
13:12:51 * vegai is back (gone 02:26:45)
13:13:40 <shapr> Muad_Dibber: I nominate you for the person to collect irc stats. Aren't there programs that suck up channel logs and display stats per week, month, year, etc?
13:14:10 <dcoutts> shouldn't lambdabot do that?
13:14:23 <Wilmer> hmm
13:14:30 <Wilmer> you *could* use pisg to make that kind of stats
13:14:36 <Wilmer> although it'd take some time to generate year-stats :-)
13:14:39 <shapr> I dunno, log analysis programs are easy to write in Haskell, right?
13:14:43 <shapr> pisg?
13:14:45 <Wilmer> yeah
13:14:49 <Wilmer> but it's written in perl ;-)
13:15:18 <shapr> #haskell has several years of log files.
13:15:51 <shapr> Has anyone tried writing apache log analysis tools in Haskell?
13:16:07 <Wilmer> it'd be interesting to run piespy here for a while too btw, you might've seen it on /., it generates a graph of the social network of a channel
13:16:21 <Wilmer> i guess it'll draw you in a circle between all the newbies? ;-)
13:16:50 <shapr> I dunno
13:16:57 <shapr> poetix: I'm enamored of Hubwards at the moment.
13:17:10 <poetix> shapr: Goes on a bit
13:18:00 <poetix> I used a weird software synth called the Orangator on that one, hence the fizzy main riff
13:18:07 <shapr> It's tasty.
13:18:11 * poetix switches to #haskell-blah
13:18:50 <shapr> Wilmer: Might do that, I dunno. I'll check it out.
13:20:59 <shapr> Ick, it's Java!
13:21:14 <Wilmer> yeah, sorry :-(
13:21:29 <Wilmer> iirc someone rewrote it in perl btw, somehow it runs a lot faster (and especially consumes a lot less memory)
13:21:36 <shapr> Can't be too complicated though... It just sees who addresses who, right?
13:21:42 <Wilmer> exactly
13:21:53 <shapr> I am unsurprised. Java is the ultimate memory hog.
13:21:53 <Wilmer> you just have to figure out some nice way to draw the graphs
13:21:58 <Wilmer> indeed
13:22:09 <dcoutts> GraphViz
13:22:16 <dcoutts> @google GraphViz
13:22:17 <Wilmer> i know they had to more than double the memory limits for acm just because of java
13:22:17 <lambdabot> http://www.research.att.com/sw/tools/graphviz/
13:22:20 <Wilmer> ah!
13:22:55 <dcoutts> oh, GraphViz has a new home page now that it's properly opensource
13:23:13 <dcoutts> www.graphviz.org
13:23:41 <maayhme> graphviz is ok but it cant generate big images
13:23:49 <maayhme> which is quite a pain
13:23:51 <dcoutts> it's nice, you just generate a text file and feed it to the program to produce all sorts of output formats
13:24:03 <dcoutts> I use it to generate quite large images
13:24:15 <maayhme> with details ?
13:24:33 <dcoutts> you can use svg output to make it zoomable
13:24:41 <maayhme> couldnt output more than some dozen of nodes in a graph
13:25:03 <maayhme> with content inside each node, that is
13:25:14 <dcoutts> oh I typically don't do that
13:25:29 <maayhme> use only colors ?
13:25:39 <dcoutts> so I never found if it has a problem with that
13:25:45 <dcoutts> just text labels
13:26:07 <maayhme> how many nodes you have in your description
13:26:21 <dcoutts> <100
13:27:02 <maayhme> I wanted to use it on some programs with more than 100 nodes
13:27:18 <maayhme> for dataflow graphs
13:27:20 <maayhme> didnt get far
13:27:20 <maayhme> ;)=
13:27:44 <dcoutts> I'm using it for type system constraint solving
13:27:59 <maayhme> yea, lattice ?
13:28:36 <dcoutts> subtype constrainst between var that get represented as a possibly cyclic graph
13:29:09 <maayhme> with multiple inheritance ?
13:29:23 <rep> relax. don't do it. when you want to go do it.
13:29:26 <dcoutts> it's a differnt notion of subtype than OOP
13:29:51 <maayhme> dcoutts, yea, whats it ?
13:29:54 <ski> subtyping /= (implementation) inheritance
13:30:20 <dcoutts> it's for a binding time analysis
13:30:34 <maayhme> ski, on the operational point of view, subtying cant be implemented using inheritance ?
13:31:15 <ski> inheritance *sometimes* yield subtyping
13:31:41 <maayhme> dcoutts, sounds quite cool, is it related to partial evaluation ?
13:31:56 <dcoutts> yep
13:32:06 <maayhme> okay
13:32:21 <maayhme> that doesnt say me the diff between inheritance and subtyping
13:32:21 <maayhme> ;)
13:32:29 <ski> maayhme : seeing you in #ocaml .. then you should know (or learn) that inheritance there doesn't always give subtype
13:32:46 <ski> inheritance is a way of reusing implementation
13:32:48 <dcoutts> maayhme, in this case it's just a different use of the term really
13:33:12 <ski> subtyping (also called *interface* inheritance) is about types
13:35:03 <maayhme> ski, excuse me, im quite a novice. whats the difference betwee real inheritance and interface inheritance ?
13:35:22 <ski> http://ctp.di.fct.unl.pt/mei/talmp/docs/InheritanceIsNotSubtyping.pdf
13:35:42 <dcoutts> maayhme, by "real inheritance" you mean "implementation inheritance"
13:37:19 <maayhme> I mean inheritance like in C++ : public
13:37:27 <ski> interface inheritance extends a type, in the case of a record type (i.e. interface), this creates a subtype .. otoh, in the case of a variant type, it creates a supertype
13:38:39 <ski> implementation inheritance can have a couple of ingredients, e.g. extension with new field (method), replacement of old method (possibly resuing old with 'super')
13:40:26 <ski> also, here "open recursion" can come into play, i.e. an object of an from some base class extended class, if a method of the base class is called, it can then call a methd defined in the extended class (virtual methods)
13:41:06 <ski> one example of inheritance not yielding subtype for classes is binary methods
13:41:49 <maayhme> binary methods ?
13:41:59 <ski> assume class A has method foo : A -> ...
13:42:10 <maayhme> yea
13:42:14 <ski> e.g. foo can be 'equal' or 'lesserThan', etc
13:42:36 <ski> then if B extends A, we may want foo : B -> ...  in class B
13:43:32 <ski> actually, in ocaml this is properly expressed by not typing foo in class A in the above way, rather as foo : 'this -> ...   where 'this is the type of the actual class of the object
13:43:55 <ski> following ?
13:44:27 <maayhme> okay, so B is not a subtype of A but a dedicated type with a different method, and the 'this thing make it implementable using only 1 code
13:44:41 <maayhme> right ?
13:45:06 <maayhme> ' is abstract data type in ocaml afaik
13:45:25 <ski> 'this expresses what we want, so we don't have to do evil downcasts as runtime (even unexpressible in ocaml)
13:45:41 <ski> ' is for type-variable, because it is a type-variable
13:45:54 <maayhme> I see
13:46:10 <ski> it's not determined until you do a 'new' operation to actually create an instance object of a class
13:46:13 <maayhme> so thats inheritance without subtyping ?
13:46:35 <ski> yes, because A expects the foo arg to be A (or subtype)
13:46:52 <ski> but, B *won't* accept A's
13:47:10 <maayhme> :) ok I undestood, thanks
13:47:25 <ski> so, B's foo is stricter, not laxer than A's, so it's not a subtype  (just as strict would work, though)
13:47:38 <ski> maayhme : there are other manifestations, too
13:47:51 <maayhme> yea I understand the difference now
13:47:54 <ski> good
13:48:31 <maayhme> is there any work on haskell about 'axiomatic reification'
13:48:58 <maayhme> like, creating new datatypes depending on the runtime flow of the program
13:48:59 <ski> (there are also possible problems involing Liskov Substituition Principle (LSP), behavioural subtyping and mutability of objects, e.g.)
13:49:17 <ski> what would that be like ? example ??
13:49:29 <ski> hm
13:49:47 <maayhme> for instance, it would allow to do program analysis using an axiomatic typing of the heap of the program
13:49:56 <maayhme> thats the use I see for it
13:50:05 <ski> are you thinking of things a bit similar to e.g. ocamls generative exceptions ?
13:50:19 <ski> what is axiomatic typing ?
13:51:30 <maayhme> cant find anything about ocaml generative exception
13:51:59 <maayhme> axiomatic typing would be an idea for coupling proof-directed analysis and type-based analysis
13:52:47 <maayhme> Im thinking about it in terms of reflection / reification, for instance for developing a type/proof-based debugger
13:53:38 <maayhme> (for machine code)
13:54:00 <maayhme> I guess on source programs, you already have the type information and its included in the proof-directed analysis (I suppose)
13:54:01 <ski> maayhme : hm, possibly that's not the correct term ..
13:54:36 <ski> (you know about typed assembler, i hope ?)
13:54:42 <maayhme> that would be like analysing flow-types and adding types in runtime in the debugger scope
13:54:56 <maayhme> TAL you suggest I suppose
13:55:00 <ski> yah
13:55:15 <maayhme> Im more experienced in real assembly decompilation as I work in reverse engineering
13:55:22 <maayhme> but yea, I like the idea of TAL
13:57:28 <gour> dcoutts: have you configure cronjob?
13:57:39 <gour> dcoutts: ..configured..
13:57:53 <ski> maayhme : a little info re ocaml at http://caml.inria.fr/pub/docs/u3-ocaml/ocaml-core.html#htoc21
13:58:46 <maayhme> ski, read that page in the past, thanks for the link Ill look again
13:59:17 <ski> maayhme : basically, a generative datatype is one that, if defined in an inner dynamic scope, e.g. a lambda, then each activision of the lambda creates a new distinct datatype (instead of it being the same as lifting the datatype outside the lambda (and dealing with visibility))
13:59:34 <dcoutts> gour, ah thanks for reminding me
14:00:15 <maayhme> ski, so that includes a runtime info in the type
14:00:21 <gour> dcoutts: build.sh script does not work
14:01:17 <dcoutts> gour, what goes wrong?
14:01:31 <maayhme> ski, thats interresting, but that would be nice to do axioms that allow you to verify the various flows for a given object in the program, some specific type transitions beeing those one that generate the faults
14:01:40 <ski> maayhme : yes, some kind of run-time generation of unique things ..
14:01:42 <gour> configure: Dependency hide-shell-any: using hide-shell-0.1.0
14:01:42 <gour> Setup.lhs: cannot satisfy dependency yi-any
14:01:42 <gour> ********************
14:01:42 <gour> setup configure failed for plugins/yiBase
14:01:48 <maayhme> but its nearer of modelchecking than theorem proving
14:01:55 <dcoutts> gour, ah you need Yi :-)
14:02:08 <dcoutts> gour, check the instructions on the wiki
14:02:12 <dcoutts> @where hIDE
14:02:13 <lambdabot> http://www.haskell.org/hawiki/hIDE
14:02:13 <maayhme> a kind of onthefly modelchecking using types
14:02:14 <gour> dcoutts: i thought everything is in repo :-(
14:02:19 <ski> (maayhme : anyway, associated something you said with that)
14:02:28 <dcoutts> gour, yi is on it's own
14:04:09 <gour> dcoutts: should i install under global or user?
14:05:40 <dcoutts> gour, either
14:05:48 <dcoutts> doesn't matter
14:08:05 <gour> dcoutts: ahh, i forgot to configure with 'user' :-(
14:08:13 <Lemmih> Can I get someone with GHC 6.4.1 to test a package for me?
14:08:56 <gour> i'm with   6.4.1
14:09:15 <Lemmih> http://scannedinavian.org/~lemmih/ghc-api
14:10:08 <gour> Lemmih: what are reqs to build it?
14:10:29 <Lemmih> Cabal > 1.0
14:11:13 <gour> ok
14:11:18 <gour> Lemih: Failure: 'cpphs' is needed.
14:11:28 <dcoutts> gour, emerge cpphs
14:11:49 <sylvan> "unknown field "hs-source-dirs"", has that name been changed or something?
14:11:53 <Lemmih> gour: Oh yeah. 'cpphs' is also needed (:
14:11:54 <gour> 0.9 is ok?
14:11:56 <sylvan> (cabal)
14:12:42 <gour> Lemmih: is cpphs-0.9 ok?
14:12:48 <Lemmih> gour: I think so.
14:12:52 <dcoutts> Lemmih, so you've stripped out most of the ghc front end then?
14:13:42 * gour is building ghc-api
14:15:30 <gour> gour@gaura-nitai ~/repos/hIDE $ ./bin/hIDE hide-base-0.1.0 hide-shell-0.1.0 hide-yi-0.1.0
14:15:30 <gour> Loading plugins: ["hide-shell-0.1.0","hide-yi-0.1.0"]
14:15:30 <gour> hIDE: user error (loadShared: couldn't load `/usr/lib/libz.so' because /usr/lib/libz.so: invalid ELF header)
14:16:05 <Lemmih> dcoutts: ghc-api is just a quick cabalization of the ghc library.
14:16:32 <Lemmih> gour: What platform?
14:16:54 <gour> Lemmih: amd64
14:17:26 <Lemmih> Can you load the plugins in GHCi?
14:17:52 <gour> Lemmih: how to do that?
14:18:07 <Lemmih> ghci -package hide-shell -package hide-yi
14:18:15 <dcoutts> Lemmih, taken from the ghc-6.5 cvs tree then?
14:18:28 <Lemmih> dcoutts: Yes.
14:18:33 <dcoutts> I see
14:18:37 <gour> Lemmih: the same error
14:19:23 <Lemmih> While loading the shell or yi?
14:19:48 <gour> Loading package glade-0.9.9 ... linking ... done.
14:19:48 <gour> Loading package sourceview-0.9.9 ... ghc-6.4.1: can't load .so/.DLL for: z (/usr/lib/libz.so: invalid ELF header)
14:20:01 <gour> Lemmih: here is about ghc-api:
14:20:09 <gour> gaura-nitai gour # ghc-pkg list
14:20:11 * Lemmih passes the ball to dcoutts.
14:20:13 <gour> /usr/lib64/ghc-6.4.1/package.conf:
14:20:17 <gour>     rts-1.0, base-1.0, haskell98-1.0, template-haskell-1.0, unix-1.0,
14:20:20 <dcoutts> gour, /usr/lib/libz.so is not a realy thingy
14:20:22 <gour>     parsec-1.0, haskell-src-1.0, network-1.0, QuickCheck-1.0,
14:20:25 <gour>     HUnit-1.1, mtl-1.0, fgl-5.2, X11-1.1, HGL-3.1, OpenGL-2.0,
14:20:29 <gour>     GLUT-2.0, stm-1.0, readline-1.0, (lang-1.0), (concurrent-1.0),
14:20:33 <gour>     (posix-1.0), (util-1.0), (data-1.0), (text-1.0), (net-1.0),
14:20:35 <dcoutts> gour, /usr/lib/libz.so is a 'gnu linker script'
14:20:37 <gour>     (hssource-1.0), Cabal-1.1.3, glib-0.9.9, gtk-0.9.9, mogul-0.9.9,
14:20:38 <gour>     glade-0.9.9, gconf-0.9.9, sourceview-0.9.9, plugins-0.9.10, yi-0.2,
14:20:38 <gour>     ghc-api-0.1.0
14:20:39 <gour> ..built..
14:20:49 <Lemmih> gour: Hurrah.
14:20:55 <gour> :-)
14:21:01 <dcoutts> gour, so just remove the 'z' from the libs list it should still work
14:21:46 <gour> dcoutts: where is this stuff?
14:22:15 <dcoutts> oh I see it's in the sourceview package, hmm
14:22:24 <gour> :-)
14:22:56 <gour> Lemmih: probably i can unregister ghc-api (for my needs) ?
14:23:14 <dcoutts> gour, what does this say: $ ghc-pkg field sourceview extra-libraries
14:23:41 <gour> dcoutts: extra-libraries: gtksourceview-1.0 gnomeprint-2-2 art_lgpl_2 xml2 z
14:23:59 <dcoutts> there's the 'z'
14:24:20 <gour> so i need to rebuild gtk2hs?
14:24:32 <dcoutts> actually, no, just to re-register
14:24:34 <gour> or just fix cabal file?
14:24:39 <dcoutts> exactly
14:24:58 <dcoutts> gtk2hs installes the package.conf files so you can edit that and re-register
14:25:31 <dcoutts> edit /usr/lib/gtk2hs/sourceview.package.conf
14:26:01 <dcoutts> and then: ghc-pkg update /usr/lib/gtk2hs/sourceview.package.conf
14:26:32 <dcoutts> so just remove the "z" from the extra-libraries: list
14:27:15 <gour> dcoutts: the hIDE is up .-)
14:29:15 <SyntaxNinja> cabal!
14:29:15 <dcoutts> gour, great!
14:29:30 <dcoutts> @cool-add cabal
14:29:31 <lambdabot> Unknown command, try @listcommands.
14:29:36 <dcoutts> @cool-add hIDE
14:29:36 <gour> dcoutts: what can i do with it?
14:29:36 <lambdabot> Unknown command, try @listcommands.
14:29:43 <dcoutts> gour, not much :-)
14:30:15 <dcoutts> gour, hack on it, do whatever Lemmih tells you to do, that kind of thing :-)
14:30:39 <gour> dcoutts: i'm joking, but maybe you are not :-)
14:31:01 <dcoutts> I think we both are :-)
14:31:06 <dcoutts> you can start coding useful plugins!
14:31:08 <gour> dcoutts: well, i'm testing syntax high. by importing my tutorial files
14:31:38 <dcoutts> the syntax hl is done by GtkSourceView at the moment
14:31:42 <gour> let me first understand a bit what is under the hood
14:31:56 <gour> it's ok for atm :-)
14:32:08 <dcoutts> gour, take a look at the test plugin 1 & 2
14:32:28 <gour> congrats, Quit works!
14:32:38 <dcoutts> gour, yeah, I added that just for you :-)
14:32:49 * gour feels honoured
14:33:38 <gour> i'd like also to go (again) through hs-plugins & yi papers..
14:33:48 <dcoutts> yes, they're very interesting
14:33:51 <gour> however, it has to wait a bit..
14:33:57 <dcoutts> well worth a read
14:34:12 <dcoutts> and the Visual Haskell paper is good too
14:34:16 <gour> as i wrote yesterday, next week-end i must have 9 hours of teaching material ready
14:34:22 <gour> and hold a seminar
14:34:33 <gour> wish me good luck
14:34:36 <dcoutts> yeah, life is busy
14:34:38 <dcoutts> good luck
14:35:05 <gour> i see you are a nighty-bird, but i'm finished for today
14:35:16 <dcoutts> :-)
14:35:27 <gour> i'll check log tomorrow :-)
14:35:42 <gour> good night
14:35:47 <dcoutts> right, g'night
14:46:29 * shapr installs the new ghc6 6.4.1 debs!
14:56:32 <SyntaxNinja> shapr: are they uploaded to debian?
14:58:36 * Lemmih will go to sleep now since he has a date with the military tomorrow.
14:58:42 <Lemmih> Goodnight, #haskell.
14:58:46 <Muad_Dibber> Goodnight lambdabot
14:58:49 <Muad_Dibber> Lemmih also
15:06:07 <shapr> SyntaxNinja: dunno, got mine from haskell-unsafe
15:07:08 <SyntaxNinja> sweeeeeet
15:07:59 * Itkovian goes watch 'allo-'allo
15:26:07 <tmccort> What's the performance of Haskell like?
15:29:14 <sylvan> tmccort, pretty good
15:32:23 <astrolabe> I find it quite hard to program in efficiently.
15:32:34 <orbitz> hi tmccort
15:32:38 <astrolabe> I think I don't know enough
15:33:07 <orbitz> astrolabe: with functional languages, and ML's in particuarly, it isn't too hard to do decent optimizations, so you don't have to work veyr hard to make efficient code
15:34:16 <tmccort> What's some program source I could look at to better learn haskell?
15:35:23 <orbitz> tmccort: why not read a book on haskell?
15:35:32 <orbitz> reading programs source code isn't very productive if you don't know the language
15:35:33 <ndm> tmccort, why do you want to learn haskell?
15:35:46 <astrolabe> Looking through the prelude is helpful
15:35:54 <ndm> there are masses amounts of code out there, but its all a bit general purpose unless you can see exactly what you are aiming for
15:36:28 <tmccort> orbitz, I mean in addition to a book.
15:37:02 <orbitz> tmccort: mos tbooks contain source
15:37:09 <astrolabe> tutorials here: http://www.haskell.org/learning.html
15:37:14 <orbitz> tmccort: not to mention the haskell website is tons and tons and tons of references
15:37:24 <orbitz> browsing teh website for 5 minutes reveals
15:37:25 <orbitz> much
15:37:34 <orbitz> you cn also download teh darcs source code if that isnt' enough
15:38:23 <ndm> the source code to hoogle is available online
15:38:51 <astrolabe> I think the definitions here are a good start http://www.cs.uu.nl/~afie/haskell/tourofprelude.html
15:38:53 <tmccort> I got a question. If Haskell is a functional language why is code littered with "do" which makes it look sort of imperative?
15:39:06 <astrolabe> good question!
15:39:07 <orbitz> for monads probably
15:39:10 <ndm> http://cvs.sourceforge.net/viewcvs.py/hoogle/hoogle/src/
15:39:25 <ndm> tmccort, my code is not littered with do!
15:39:37 <astrolabe> Yes, 'do' is for monads, but that is the imperitave like part of haskell
15:39:41 <ndm> its a question of style, some people tend to use a lot of monads and a lot of 'do'#
15:39:54 <orbitz> tmccort: is teh code you are lookign at part of teh I/O stuff?
15:39:55 <ndm> some avoid it like the plague, and use only 1 or 2 cases, but mostly entirely functional
15:39:59 <orbitz> if so, then that's why, since I/O is fairly imperitive
15:40:15 <orbitz> tmccort: read algorithms impleemtnations in haskell
15:40:56 <tmccort> Is do like a virus though? If only part of the program has one wouldn't thinking that uses it also have to use do?
15:41:16 <orbitz> virus?
15:41:17 <orbitz> huh?
15:41:39 <astrolabe> You can write code so it only has do on the outer layers, the rest being pure functions.
15:41:39 <tmccort> As in it spreads.
15:41:40 <maayhme> haskell virus! soon the worm-monad
15:41:43 <sylvan> tmccort, do allows you to sequence stuff where it makes sense to do so, and use functional stuff where it makes sense to do so... The IO monad is "like a virus" in that you can't turn an IO action into a pure function
15:42:14 <sylvan> and like astrolabe says, you generally only create a thin "skin" of imperative code to interface with the OS and the users, while you keep the actual program functional
15:42:44 <tmccort> Oh ok.
15:43:55 <Cale> you can turn pure values into IO actions though, so it's okay - you can program everything which is pure in a pure fashion and use it to build up your IO
15:44:55 <Cale> I find that Haskell is still a pretty decent language even if 90% of your program is imperative though.
15:45:07 <Cale> since you have first class IO actions
15:45:13 <sylvan> Yes. Writing IO in Haskell is a lot easier than in imperative languages
15:45:16 <integral> newtype beats typedef any day :-)
15:45:23 <sylvan> "Haskell - the finest imperative language in the world!" =)
15:45:51 <Cale> also, it can't be emphasized enough that "Monad" doesn't mean "IO"
15:46:28 <sylvan> Exactly.. there's tons of other useful monads.. Like ST, Maybe, List etc.
15:46:56 <astrolabe> For a beginer though, IO is the only one needed.
15:47:16 <Cale> but it's a terrible example of a monad :)
15:47:24 <tmccort> What would be a good book to read for learning Haskell?
15:47:25 <astrolabe> (or at least, you don't need to know the others are monads)
15:47:31 <Cale> yeah, I suppose so
15:47:42 <Cale> to write code, you can get away without it
15:47:44 <sylvan> I like "The Craft of Functional Programming" and "The Haskell School of Expression"
15:47:54 <astrolabe> http://www.haskell.org/soe/
15:48:16 <Cale> Also, "Yet Another Haskell Tutorial" is a pretty good tutorial online and it's basically a book.
15:49:36 <Cale> @seen xerox
15:49:37 <lambdabot> I saw xerox leaving #haskell-blah and #haskell 1 hour, 56 minutes
15:49:37 <lambdabot> and 24 seconds ago.
15:50:01 <Cale> I suppose xerox_ is still here :)
15:50:23 <astrolabe> I think the books and tutorials for beginners are pretty good, which is just as well, because haskell has lots of novel concepts for an imperitive programmer.
15:50:54 <Cale> Yeah, they sort of have to be good :)
15:57:57 <tmccort> I'm also looking at Ocaml... now I can't decide witch to learn.
15:59:00 <tmccort> which even.
15:59:55 <shapr> Both!
16:00:45 <shapr> OCaml is philosophically closer to C, you get more execution speed at the cost of things like unchecked int overflows.
16:01:13 <Itkovian> but the syntax ... I tend to find occaml programs hard to read
16:01:15 <shapr> So it really depends on which style you prefer.
16:01:52 <shapr> I'm all about getting the computer to do all the work for me, I don't mind the extra cost of slower runtime speed.
16:02:49 * araujo would recommend "Razonando Con Haskell" for those spanish-speakers
16:10:47 <Itkovian> shapr: that depends on the app ... if you're serving a few thousand people, you do care.
16:10:53 <Itkovian> anyway, I'm off to sleep
16:10:54 <Itkovian> night
16:31:13 <ndm> shapr, but haskell Int has unchecked overflow
16:31:54 <ndm> tmccort, Haskell is nicer to learn
16:32:11 <ndm> Ocaml is faster but i'm not sure there are any other advantages - maybe something to learn second
16:34:15 <araujo> Ive heard the object system of Ocaml is a mess though
16:34:45 <ndm> i've heard it has a horrible syntax, but haven't actually seen an example of it to know if its true
16:34:55 <ndm> i saw some ML the other day, was a shock how much prettier haskell is
16:35:11 <araujo> well, ive seen worse syntaxs
16:35:15 <araujo> it is not that bad
16:35:23 <Lor> ndm, ML as in ocaml or sml?
16:35:40 <araujo> Of course, Haskell is more beautiful
16:35:45 <vegai> sml and ocaml are very different in term of prettiness, imho
16:35:46 <araujo> imho
16:35:50 <ndm> Lor, sml
16:36:03 <Lor> sml isn't too bad. Just a bit verbose.
16:36:04 <ndm> yeah, there are worse
16:36:13 <ndm> its just quite impressive  how nice haskell turned out
16:36:29 <araujo> I would prefer Ocaml .. over.. say... java :-)
16:36:40 <Lor> I think java has a nicer syntax than ocaml.
16:36:52 <dons> @seen greenrd
16:36:53 <lambdabot> greenrd is in #haskell. Last spoke 5 hours, 4 minutes and 43 seconds
16:36:53 <lambdabot> ago.
16:37:07 <Lor> let ... in let ... in let ... in ... is just an awful, awful mess.
16:37:28 <dons> greenrd, Isabelle has a vaguely haskell like syntax, as does twelf. though Agda might be the real ticket, since it's written in haskell
16:37:41 <araujo> IJusDontLikeToHaveSoBiNamesLikeThisWithoutEvenKnowingWhatTheyProperlyDo()
16:37:57 <dons> Coq is also a little like haskell
16:38:23 <Lor> Uh? coq has horrible syntax.
16:38:32 <Lor> The newer syntax is a little better, but still icky.
16:39:05 <dons> yeah, definitely icky. twelf too. but it's not php :)
16:39:16 <ndm> and thank god its not perl
16:39:29 <ndm> syntax is a superficial issue, but one that is very important
16:39:47 <ndm> the only language i've seen which is ugly at a deeper level than syntax is perl
16:39:55 <dons> I mean, I can read this without knowing Coq:
16:39:56 <dons> Inductive types: Set :=
16:39:56 <dons> | tv: V -> types
16:39:56 <dons> | arrow: types -> types -> types.
16:40:23 <dons> @remember ndm the only language i've seen which is ugly at a deeper level than syntax is perl
16:40:38 <Lor> perl has no syntax.
16:40:47 <thedward> I was reading the Perl Best Practices chapter on subroutines, it just about made me want to cry.
16:40:55 <Lor> Or rather, the entire language is perl's syntax.
16:41:07 <ndm> perl is the only language i've ever tried to learn and failed
16:41:15 <dons> any language that needs "best practices" is broken
16:41:24 <ndm> i could program small things, but i didn't really understand anything
16:41:26 <ndm> it never clicked
16:41:38 <Lor> dons, hence all languages are broken.
16:41:39 <Cale> gap has nice identifiers in its library, things like AugmentedCosetTableNormalClosureInWholeGroup and BrauerTableOfExtensionBySingularAutomorphism
16:41:40 <Lor> But I agree.
16:42:01 <ndm> Haskell needs no best practices
16:42:09 <araujo> The only thing i see perl is good it is on obfuscated contests :-P
16:42:21 <ndm> i'm consistently amazed at the number of ways to atractively typeset an if then else expression
16:42:43 <Lor> ndm, the order of parameters should be thought out to make partial application maximally useful.
16:42:53 <Lor> etc.
16:43:07 <ndm> Lor, true - thats one thing i still haven't figured out
16:43:16 <ndm> it always seems wrong to me the order of lookup
16:43:20 <araujo> Well, let's say that Haskell requires you to think in other level of abstractions
16:43:34 <Cale> There will be lots of "best practices" in any language.
16:43:58 <Cale> any interesting language anyway
16:44:03 <Cale> you'll always be able to write obfuscated gibberish
16:44:41 <Cale> ndm: which lookup?
16:45:33 <ndm> @hoogle lookup
16:45:34 <lambdabot> Prelude.lookup :: Eq a => a -> [(a, b)] -> Maybe b
16:46:13 <Cale> yeah, that is a little strange, but I seem to recall there was a good reason for it...
16:46:53 <ndm> yes, i'm sure there is
16:47:04 <ndm> but my brain seems to be wired in the opposite order
16:47:10 <Cale> though my initial reaction is that they should be the other way around too
16:47:31 <Cale> Since you're likely to change the element you're looking up sooner than you change the map
16:47:50 <ndm> @hoogle elem
16:47:51 <lambdabot> Prelude.elem :: Eq a => a -> [a] -> Bool
16:47:51 <lambdabot> List.elemIndices :: Eq a => a -> [a] -> [Int]
16:47:51 <lambdabot> List.elemIndex :: Eq => a -> [a] -> Maybe Int
16:47:59 <ndm> but it is consistent with elem
16:48:00 <Cale> oh, that one is obvious :)
16:48:03 <Cale> yeah
16:48:07 <ndm> which in my mind is the right way round
16:48:13 <ndm> funny how the mind plays tricks like that
16:48:22 <Cale> I would be sort of annoyed to have elem the other way around :)
16:48:36 <Cale> simply because of the usage in mathematics :)
16:48:40 <ndm> yep, which just shows that your mind (and mine) are inconsistent
16:49:18 <ndm> anyway, sleep calls, goodnight
17:03:27 * juhp starts pushing the new ghc to Fedora Extras :)
17:04:02 <dons> juhp is a good package maintainer
17:04:23 <juhp> 8-)
17:04:34 <juhp> wish i had time to code too ;-P
17:04:41 <SyntaxNinja> I hear it's already in Haskell Unsafe
17:04:44 <SyntaxNinja> DEBIAN WINS
17:04:47 <SyntaxNinja> ;)
17:05:19 <juhp> yeah, yeah
17:05:39 <juhp> I did two local test builds already last night
17:05:41 <Igloo> SyntaxNinja: Speaking of which, you still need to do something with cabal in Debian
17:05:48 <SyntaxNinja> Igloo: yeah, I know.
17:05:53 <SyntaxNinja> it'll happen after ICFP, though.
17:05:54 <Igloo> OK, cool
17:06:07 <SyntaxNinja> I'm leaning toward doing the cabal-new thing, as you suggested.
17:06:12 <SyntaxNinja> when are you leaving, btw?
17:06:18 <SyntaxNinja> and where are you staying?
17:06:18 <Igloo> 25th
17:06:25 <juhp> SyntaxNinja: when will it be in unstable? :)
17:06:26 <SyntaxNinja> not going to TFP, then?
17:06:26 <Igloo> Or 2nd, depending on leaving where
17:06:40 <Igloo> No, can't justify the extra expense  :-(
17:06:41 <SyntaxNinja> that answers the question ;)
17:06:42 <dcoutts> juhp, I reckon you win, "Haskell Unsafe" is not exactly mainstream
17:06:46 <Igloo> L'Ermitage
17:07:22 <SyntaxNinja> I'll be at best western
17:07:29 <dcoutts> juhp, any problems yet with 6.4.1? we're still testing it for gentoo
17:07:34 <Igloo> juhp: It won't be in unstable for a while as other things need to transition in Debian first
17:08:19 <SyntaxNinja> Igloo: is it waiting on anything of mine?
17:08:28 <Igloo> Yes, cabal, as above  :-)
17:08:31 <juhp> dcoutts: no everything looks good so far - though I only really built darcs with it :)
17:08:59 <dcoutts> we've tried darcs & gtk2hs on amd64 and I've tried quite a bit of stuff on x86
17:09:04 <Igloo> I haven't checked your other packages, that's just listed on the ghc page
17:09:12 <SyntaxNinja> Igloo: why is 6.4.1 waiting on cabal?
17:09:33 <Igloo> Because gmp, and thus 6.4, have to go into testing first
17:09:35 <SyntaxNinja> if 6.4 works in unstable w/ cabal, why is 6.4.1 different?
17:09:51 <SyntaxNinja> and cabal is keeping 6.4 out of testing?
17:09:53 <juhp> dcoutts: I only tested x86_64 :)
17:10:11 <Igloo> Yes, as it need ghc << 6.2.2mumble
17:10:17 <SyntaxNinja> fsck
17:10:34 <Igloo> It's not the only thing
17:10:47 <SyntaxNinja> OK well I'll try to fix that ASAP. if someone wants to NMU that's OK. basically to change the package name to cabal-new or something
17:10:58 * Igloo finds Isaac has chosen a hotel about as far from mine as he could possibly have done and feels slighted  :-)
17:11:10 <SyntaxNinja> heh
17:11:18 <SyntaxNinja> notice I waited for you to answer before picking my hotel ;)
17:11:31 <SyntaxNinja> well, you didn't invite me to stay in your guest room this time ;)
17:11:40 <dons> heh
17:11:55 <dcoutts> hey dons I've been making progress on the file browser
17:12:06 <dons> yeah, we can all cram into a room at some nice upmarket hotel, and hvae a #haskell hackathon!
17:12:07 <SyntaxNinja> has anyone tried to organize a #haskell meeting yet?
17:12:24 <dons> dcoutts, cool! I'm just reviewing Lemmih's changes atm
17:12:35 <dons> SyntaxNinja, not that I know of.
17:12:40 <SyntaxNinja> will you be free on the eve of the 25th?
17:12:48 * Igloo can't make that
17:12:51 <dcoutts> dons, did you add your monospace/courier font patch?
17:12:58 <Igloo> Unless you're starting at 1am or something  :-)
17:13:00 <SyntaxNinja> we could say, meet in the lobby of the best western for dinner on the eve of 25th or 26th or something?
17:13:24 <SyntaxNinja> although I don't know offhand what evening plans are for the conference itself hmm
17:13:36 <Igloo> I suspect nothing except the conference meal day
17:13:45 <SyntaxNinja> which day is that?
17:13:48 <Igloo> Can't remember
17:13:56 <dons> dcoutts, yes. should be inthere now. though not sure if Lemmih is using the right interface to yi, I think he's building windows by hand
17:14:13 <Igloo> I don't think my hotel is close enough I'll want to go there and back before eating, so meeting outside the conference venue would make more sense to me  :-)
17:14:23 <Igloo> Where are you staying, dons?
17:14:24 <SyntaxNinja> yeah, probably
17:14:36 <dcoutts> dons, did you try my build.sh script? it should do it right (and if not tell me)
17:14:47 <dons> I'm at the RevelExpress
17:14:55 <SyntaxNinja> shoudl we just pick a date, time, & place and plan to meet there? so we can identify each-other and get relevant info, then go get dinner or something
17:15:10 <dcoutts> dons, oh actually the build script does not rebuild yi
17:15:13 <SyntaxNinja> we could say, after the conference on the 27th?
17:15:58 <Igloo> SyntaxNinja: dons has chosen a hotel about as far as possible from /both/ of us as is possible
17:15:58 <dons> 27th is good for me
17:16:02 <SyntaxNinja> front steps of the conference venue
17:16:05 <SyntaxNinja> dons hates us
17:16:12 <dons> yes, but still only a few blocks Igloo :p
17:16:31 <dons> but the price was phd-student-ariffic!
17:16:32 <SyntaxNinja> shapr: it won't be the same without you
17:16:33 <Igloo> blocks? That must be, what, about 10km for an Australian?
17:16:54 <dons> bah
17:17:12 <SyntaxNinja> oh dons is australian?
17:17:19 * Igloo blinks
17:17:23 <dons> uh oh, secret is out
17:17:31 <SyntaxNinja> \msg igloo hm now how do we ditch him
17:17:32 <SyntaxNinja> oops!
17:17:45 <dons> hehehe
17:17:45 <SyntaxNinja> ;)
17:17:52 <Igloo> 27th is the ICFP dinner
17:18:00 <Igloo> I don't actually know if I'm going to that or not
17:18:08 <SyntaxNinja> oh. let's make it 26th then?
17:18:13 <SyntaxNinja> or is there a tour or something that day?
17:18:19 <SyntaxNinja> where is the "social" schedule?
17:18:37 <Igloo> Hmm, 26 is ICFP reception, which I guess must be in the evening
17:18:45 <Igloo> I'm looking at http://www.cs.ioc.ee/tfp-icfp-gpce05/page.php?page=reginfo
17:18:46 <SyntaxNinja> Igloo: are you still sufficiently bearded?
17:18:54 <Igloo> But of course
17:19:10 <SyntaxNinja> OK. 28th?
17:19:33 * SyntaxNinja wonders if he'd recognize Igloo without a beard
17:19:48 <dcoutts> it'd be quite a shock I think
17:20:11 <Igloo> Aha. Reception is at 8pm http://www.cs.ioc.ee/tfp-icfp-gpce05/page.php?page=prog
17:20:23 <dons> 28 is ok
17:20:33 --- topic: set to '[#haskell @ ICFP: Meet outside conference venue at end of schedule Sept 28!!! || "logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","see discussion on http://haskell.org/hawiki/hIDE about the development of an IDE for Haskell","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050920","see also #haskell.se #darcs","try '/msg nickserv' by SyntaxNinja
17:21:17 <Igloo> Who comprises #haskell @ ICFP exactly?
17:21:28 <Igloo> SyntaxNinja, dons, Igloo, Heffalump?
17:21:39 <SyntaxNinja> hm
17:21:41 <SyntaxNinja> dcoutts: ?
17:21:46 <SyntaxNinja> JaffaCake I think
17:21:53 <dons> i have blue hair for those who haven't met me, so should be easy to spot
17:22:15 <Igloo> I look like a geek, so I should stand right out too
17:22:33 * dcoutts wonders if he'd be recognisable without his long hair and vacant expression
17:22:53 * dcoutts wishes he were going to ICFP this year
17:22:57 <dons> now, where are we meeting?
17:23:15 * Igloo points at the topic
17:23:40 <Igloo> Oh, where are the workshops?
17:26:29 <Igloo> Oh, hmm, the MO workshop finishes 2h later than ICFP
17:27:37 <Igloo> Is there a reason not to make it the evening of the HW?
17:27:43 <Igloo> (30th)
17:28:38 <dons> though that finishes at 18.15 too
17:28:50 <Igloo> Yes, but we'll all be finishing at the same time
17:28:56 <dons> i have no problem with the 30th
17:29:31 <Igloo> I guess we could just meet later on the 28th, but that seems more likely to go pear shaped  :-)
17:29:46 <SyntaxNinja> well, I figured we should get together as earlyas possible, just for dinner, then we can coordinate future meet-ups at that time.
17:29:49 <SyntaxNinja> once we knwo whos' there.
17:30:54 <Igloo> Well, the 26 might be sensible depending on what food is at the reception. Then again, there's only a 1.5h gap
17:30:57 <SyntaxNinja> I gotta run.  feel free to change it, just email me :)
17:31:10 <Igloo> Presumably we'll try to meet at the reception anyway
17:31:51 <SyntaxNinja> yeah
17:32:02 <SyntaxNinja> OK l8r. let me know.
17:32:04 <SyntaxNinja> peace out
17:32:30 <Igloo> Well, as organising meets goes, that was a bit of a disaster  :-)
17:32:41 <dons> :}
17:33:08 <Igloo> Do you know if you're going to the conference dinner, dons?
17:33:16 <dons> I don't think I am
17:33:33 <dons> that was extra $, wasn't it ;)
17:33:36 <Igloo> BTW, have you got any pieces of paper confirming you're going?
17:33:40 <Igloo> Yeah  :-)
17:33:46 <dons> no pieces of paper either.
17:33:52 <Igloo> OK, good
17:34:26 <dons> yeah, you had to request specifically a piece of paper, if you had visa problems
17:34:50 <Igloo> Hmm, OK. I'm sure I've been sent them in the past.
17:34:59 <dons> I have too
17:35:17 <dons> certainly I got one for last years HW, but it all depends on the organisers I guess
17:35:53 <dons> so you think we should do something on the 27th for those not going to the icfp dinner
17:36:38 <dons> i'm confused. what did we decide?
17:36:48 <Igloo> Well, that all depends on whether I'm going or not  :-)
17:37:17 <dons> perhaps check your confirmation email?
17:37:17 <Igloo> If none of us are going I think it would definitely make sense, though
17:37:22 <dons> yeah.
17:37:30 <Igloo> The admin staff have that
17:40:00 <dons> ok, well perhaps we try to get in touch at the icfp reception on the 26th, and then work from there, planning for the 28th
17:40:33 <Heffalump> Never fear, Ganesh is here!
17:40:59 * Heffalump senses a lack of previous fear
17:41:22 * Igloo senses an increased level of fear in the last few 10s of seconds
17:41:40 <dons> my fear level is currently "orange"
17:41:46 <Igloo> Heff's causing trouble by going to the ICFP dinner
17:41:53 <dons> ah, right
17:42:06 <Igloo> (unless I'm also going, in which case dons is causing trouble by not doing so)
17:42:15 <Heffalump> igloo: find your registration mail
17:42:23 * Heffalump is also going to the TFP dinner.
17:42:26 <Igloo> I'll e-mail the support staff to send me a copy
17:42:28 * Heffalump has a feeling this was a mitake.
17:42:31 <Heffalump> s/mitake/mistake/
17:45:59 <Heffalump> w00t
17:46:07 * Heffalump finds his flight, hotel *and* registration details
17:46:08 * Igloo gets suspicious and looks in e-mail backups
17:46:34 * Heffalump makes paper copies of all of the above
17:50:19 <Igloo> Ah, OK, I am going to the dinner
17:51:03 <Igloo> And "Dear Ian Lynagh!\n\n\nYou have successfully" trips my brain's spam sensor
17:51:35 <dons> hehe
17:52:35 <dons> so that means we can really only meet on 26th (after reception?) or >= 28th anyway
17:53:11 <dons> and since the reception starts at 8, probably >= 28th is better
17:53:48 <Igloo> Yeah. I think 30th is the best for the Big Meet
17:54:02 <Heffalump> is that after HW?
17:54:08 <dons> I agree. lesat chance of an io error
17:54:10 <Igloo> The evening of HW, yes
17:55:00 <dons> is that good with you Heffalump?
17:56:07 <Heffalump> yes
17:56:18 <Heffalump> I also seem to be going to the GPCE reception, FWIW.
17:57:40 <Igloo> When is that?
17:57:55 * Igloo gets the impression Heff just went down the page ticking all the boxes  :-)
17:58:14 <Heffalump> 29th
17:58:18 <Heffalump> I did apply some intelligence.
17:58:19 <Heffalump> Honest.
17:58:32 <Heffalump> I think I assessed the likelihood of there being people I wanted to talk to at things.
17:58:58 <Heffalump> And this is my money, not a grant, so I would have thought fairly hard.
18:04:24 * Igloo skims HWN and notices a typo in the typos section
18:04:47 <dons> hmm, we should change the topic to not point to the wrong date
18:05:39 <Igloo> Yes.
18:07:15 --- topic: set to '["#haskell @ ICFP: Meet after Haskell workshop on Sep 30!!", "logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","see discussion on http://haskell.org/hawiki/hIDE about the development of an IDE for Haskell","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050920","see also #haskell.se #darcs"]' by dons
18:10:08 * Igloo sleeps
20:17:37 <tmccort> How do I install new GHC packages such as HOpenGL?
20:18:26 <Cale> what OS/distribution are you running?
20:18:39 <Cale> HOpenGL comes with GHC for the most part
20:18:41 <tmccort> Windows
20:18:52 <Cale> You should already have it then, I think
20:19:44 <tmccort> Cool, thanks.
20:19:46 <Cale> (I don't use windows though)
20:20:19 <Cale> you probably will have to compile your program with --make
20:20:57 <tmccort> What does the argument do?
20:21:01 <tmccort> that
20:21:21 <Cale> It searches for dependencies automatically
20:22:25 <Cale> It's also possible that -package HOpenGL is needed
20:47:47 <juhp> ok, ghc is built for fc4 :)  building now for fc3
20:49:36 <sethk> Is the library for using gtk from haskell called gtk2hs?  That's close ...
20:50:46 <Cale> gtk2hs, yeah
20:51:03 <sethk> thanks
20:51:25 <Cale> I've been working on an LSystem drawing program with xerox and lots of help from dcoutts using it.
20:54:55 <humasect> uu, wxhaskell has gl support. eg. gtk2hs does not.. yet
20:54:59 <sethk> damn, got a seg fault on the build of gtk2hs.  Hope it is one of the ones that goes away when you run again
20:55:59 <humasect> (it's -package OpenGL for ghc's installer afaicr)
20:57:01 <humasect> it's a little too bad that wxcore can't be linked without wx - 8mb exes base ~_~
21:03:00 <sethk> I've had to restart the build of gtk2hs several times after seg faults.  Is this common?
21:10:15 <juhp> sethk: where is it segfaulting?
21:10:57 * juhp notes that there are "just a few warnings" when building ghc-6.4.1 (with ghc-6.4)
21:11:00 <sethk> juhp, different places each time I restart it.
21:11:07 <sethk> I finally got it to complete
21:11:17 <juhp> the buildlogs are 3MB ;-)
21:11:27 <sethk> it looks a lot like the general seg fault once in a while with gcc v3 that's been around for years
21:11:44 <juhp> http://buildsys.fedoraproject.org/logs//4/1233-ghc-6.4.1-1.fc4/
21:12:02 <sethk> that's ghc 6.4.1?
21:12:05 <juhp> sethk: hmm, dunno - news to me
21:12:36 <sethk> juhp, big problem with the early version 3 compiler releases.  Then it keeps regressing back into the compiler package.
21:12:39 <juhp> sethk: yep - but it hasn't been pushed out yet - will probably will available tomorrow at the latest
21:12:49 <sethk> juhp, ok, I'll wait.  :)
21:13:13 <sethk> I'm now ready to test gtk2hs.  Which means I guess I'll have to figure out how to use it. :)
21:13:53 <juhp> otherwise if you're impatient you can grab the unsigned packages
21:14:19 <juhp> sethk: there are some demos included :)
21:14:46 <sethk> juhp, yes, I found the demo directory.  The calc app runs.  Looks like my install is ok
21:14:53 <juhp> cool
21:15:41 <sethk> calc.hs is only 64 lines.  the other .hs file is 150 lines, total of 214 lines including comments
21:15:50 <sethk> impressive if that is the entire app.
21:16:46 <juhp> yep
21:21:05 <sethk> the file chooser app is 167 lines, very impressive
21:21:28 <sethk> plus the glade file, but that's data, not code
21:31:49 <Cale> sethk: yeah, it's fairly nice with glade how detached the UI design is from the code
21:36:03 <tmccort> When trying to use wxhaskel I get the following error.
21:36:07 <tmccort> mismatched interface file versions: expected 6041, found 6040
21:37:35 <tmccort> Any ideas?
21:39:01 <sethk> only very generally.  There is a compiler of gui definition files.
21:39:11 <sethk> the compiler embeds a version in the generated file
21:39:28 <sethk> its complaining that it was not generated with the expected version
21:39:42 <sethk> I would expect that to mean that the interface was generated, and then wx was updated
21:39:49 <sethk> does that make sense?
21:40:35 <tmccort> No
21:41:56 <sethk> where is the interface file from?
21:42:51 <tmccort> From the download of wxHaskell
21:47:54 <sethk> hmm, I would try erasing and regenerating the files.  Possibly there are generated files in the distribution that are somehow wrong for the environment
21:48:03 <sethk> that's reaching, of course, but so is any other explanation
22:26:09 <juhp> sethk: it means there were some .hi files around compiled with ghc-6.4 when compiling with 6.4.1 fwiw :)
22:26:41 <sethk> juhp, so I was more or less on the right track
22:26:54 <juhp> sethk: yep, that's right :)
22:27:23 <sethk> the distribution should be pruned.
22:28:05 <juhp> yeah if they're really in the src tarball..
22:28:44 <sethk> as he described what they did, they have to be.  Of course, it's possible that he had an older build that he forgot about
22:28:57 <juhp> yay, ghc is built for fc3 too :)
22:29:20 <juhp> sethk: yea - haven't tried it in a while
22:29:49 <sethk> the install locations are the same, iirc, so except while you are actually installing a new version, you should have a consistent set of tools.
22:30:02 <sethk> but you could have a partially built directory and then update the compiler, of course
22:33:56 <humasect> ou visual haskell looks nice
22:35:25 <sethk> haven't seen it yet.  where dos it live?
22:35:30 <humasect> http://www.haskell.org/visualhaskell/
22:35:44 <humasect> not sure if 0.0 is with 6.4 or 6.4.
22:35:45 <humasect> 1
22:37:05 <sethk> hmm, the download is an msi file.  microsoft specific, I take it.
22:37:07 <juhp> I don't see any .hi files in the wxhaskell src zipball anyway
22:37:17 <humasect> it's for visual studio 2003. =)
22:37:28 <sethk> juhp, operator error then, I guess.  :)
22:37:37 <juhp> nod
22:37:39 <sethk> humasect, too bad.
22:37:53 <sethk> humasect, I'll have to track down whether that eclipse plug in is still being worked on.
22:37:54 <humasect> depends if you have that or not
22:38:06 <humasect> it was about a month ago
22:38:10 <sethk> humasect, I have it, but I don't use it.
22:38:20 <sethk> humasect, the eclipse plugin was?
22:38:25 <humasect> the eclipse plug was nice but a little restrictive
22:38:26 <humasect> yes
22:38:34 <sethk> humasect, I'll look for it.
22:38:46 <sethk> restrictive how?  Just not all there yet, or something about the design you didn't like?
22:39:03 <humasect> the vs plugin has cabal support.. so you could build libraries and such. the eclipse plug just compiles everything to theResult.exe as you saved modules.
22:40:44 <sethk> humasect, that's a big thing, potentially.  Hopefully that's because it is early
22:42:41 <humasect> the vs plug is nice for people that use vs. at least between emacs/vim -> eclipse -> hIDE =)
22:43:12 <sethk> If I download a binary, such as wxhaskell built with ghc 6.4, do I have a problem using it with 6.4.1?
22:44:30 <humasect> nope
22:46:51 <Lemmih> Good morning, #haskell.
22:47:31 <humasect> good morning, #haskell/Lemmih
22:51:34 <dons> morning Lemmih
22:59:28 <juhp> sethk: yes, it will only work with ghc-6.4
22:59:44 <juhp> ghc is very picky about version...
23:00:09 <sethk> juhp, so I'll have to recompile from source for 6.4.1
23:00:20 <juhp> sethk: yep - 'fraid so
23:00:39 <sethk> juhp, ok.  as long as everything compiles, that's not a problem.  :)
23:01:02 <Itkovian> meuning
23:47:35 * boegel shakes everybody's hand
23:47:37 <boegel> hello
23:56:51 <musasabi> Was there a difference in the implementation of recursive (e.g. newtype K = K [K]) vs non-recursive newtypes in GHC?
23:56:57 <juhp> hm
23:57:04 * juhp tries to build the new yi
23:57:14 <juhp> does it require new cabal?
23:57:27 <juhp> + runhaskell Setup.lhs configure --with-compiler=/usr/bin/ghc-6.4.1
23:57:27 <juhp> *** Exception: Line 11: Unknown field 'hs-source-dirs'
23:59:32 <juhp> anyway better build gtk2hs first ;-)
