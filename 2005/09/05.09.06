00:00:08 <dons> @code
00:00:10 <lambdabot> Concurrent.hs: newForeignPtr = GHC.ForeignPtr.newConcForeignPtr
00:00:18 <dons> how timely
00:00:20 <dons> @code
00:00:21 <lambdabot> Chan.hs: readChan (Chan read _write) = do
00:00:23 <dons> @code
00:00:24 <lambdabot> Internals.hs: arguments, and construct a string which inverts the translatsions
00:00:26 <dons> @code
00:00:28 <lambdabot> Exception.hs: dynExceptions (DynException e) = Just e
00:00:32 <dons> ok, that will do
00:10:21 <ulfdoz> ?¿?
00:31:11 * ski ponders O(0)
00:32:20 <sieni> http://mathworld.wolfram.com/LandauSymbols.html
00:34:32 <ski> mm
00:35:36 <ski> i wonder how hard it would be to make a system for checking complexities
00:37:36 <ski> i guess it'd be easier to start with a strict system (not lazy/by-need, anyway)
00:38:29 <int-e> Determine the complexity for general algorithms? You'll run into undecidable problems very soon.
00:38:48 <ski> only big-O
00:39:00 <ski> so we're allowed to approximate upwards
00:39:07 <int-e> yes, you're subsuming the halting problem in any case.
00:39:20 <ski> subsuming ?
00:39:50 <int-e> including
00:39:53 <Cale> ski: your problem is harder than the halting problem
00:40:09 <Cale> (or at least as hard as)
00:40:19 <ski> even for sometimes giving very bad approcimations ?
00:40:37 <Cale> well, the halting problem is "does it stop at all?"
00:40:46 <Cale> which is as bad an approximation as one can give
00:40:48 <int-e> it means that in some cases your algorithm will produce no answer, no matter how it works.
00:41:09 <ski> yes  (but we can have a complexity class for 'unknown whether it stops or not' :)
00:41:28 <ski> int-e : i'm not sure that has to be the case
00:42:17 <int-e> 'unknown whether it stops or not' is what I meant with 'no result' - it's not a complexity class in the original sense.
00:42:26 <ski> the trivial algorithm approximates every program's complexity by that top (worst) complexity .. and that certainly terminates
00:43:28 <int-e> I didn't mean that it necessarily doesn't terminate on some algorithm, it can also terminate with no result - which is what you are doing.
00:43:35 <ski> int-e : you're right .. it's an extension in the same sense as integral fro x between 4 and +infinity
00:44:28 <ski> int-e : sorry, i took your statement as saying that such an algorithm can't always terminate
00:45:49 <ski> anyway .. i guess my question is how far one can come along this line .. i.e. how usable algorithms that returns usable answers in "most common cases" can we get
00:46:01 <int-e> That being said I'd guess it's easy to get some not very interesting results (for example upper bounds for the evaluation of primitve recursive functions) and is hard for many interesting algorithms.
00:46:38 <ski> also .. if we restrict to special cases of structured recursion, etc .. how far can we come then ..
00:50:04 <ski> (.. also .. how far can one get with partly human-assisted proofs .. i.e. library writes have to write down 'hints' or something to help system proving bounds .. but this prolly gets in some sense similar to dependent types ..)
00:50:48 <ski> i can't remember seeing any paper on things like this .. that's why i wondered
01:06:13 * boegel y0ws
01:06:41 * Muad_Dibber opens his eyes. You woke me up boegel
01:06:51 <ski> @woy
01:06:52 <lambdabot> Maybe you meant: moo wn yow
01:07:54 <boegel> ski: heh
01:07:59 <boegel> @wn
01:08:56 * ski wonders why his mouse is out on a walk across the screen, all by itself
01:09:09 <int-e> looking for food?
01:09:58 * ski doubts there is food suitable for mouses, at top left corner of screen
01:10:25 <Muad_Dibber> nobody ever said mouses are smart, right?
01:10:35 <ski> hm .. point
01:10:58 <int-e> be nice to mice and they won't run away :)
01:11:18 * gour is away: meditating
01:12:12 <ski> (hm .. but i never owned any mice)
01:12:17 <boegel> gour: hummmmmmmmmmmmm...
01:12:49 * gour auuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuummmmmmmmmm
01:13:29 * gour is back.
01:13:45 <humasect> 18:30:48 <Lemmih> Weird. Using SDL-mixer for GHCi fails with SIGHUB.
01:14:08 <ski> gour : that short ?
01:14:19 * gour boegel disturbs gour's meditation
01:15:25 <gour> it looks i missed the early morning today :(
01:17:22 <ski> you slept through it ?
01:18:13 <gour> no, did other (casual) things
01:18:50 * ski considers eating second breakfast
01:19:46 <gour> when did you have 1st?
01:20:01 <ski> maybe 2 hours ago
01:20:13 <gour> already hungry?
01:20:23 * ski ate nothing yesterday
01:21:09 <gour> heh, if you can, do it ;)
01:21:43 <ski> (i was too tired .. slept through it)
01:22:31 <gour> you mean, you slept the whole day yesterday?
01:23:50 <boegel> not eating :s I couldn't cope with that (unless I was forced too)
01:24:09 <ski> gour : yes
01:24:31 <gour> ski: huh, you must have a heavy hacking session before that?
01:25:13 <gour> boegel: what can force you into such austerity?
01:25:19 <ski> gour : nah, just distributing 2 newspaper districts and then not sleeping
01:25:55 <gour> ski: then you'll be soon back
01:27:00 <ski> when hacking, i often don't notice stuff like hunger or fatigue
01:27:14 <ski> gour : mhm ?
01:27:22 <gour> it's called samdhi in Sanskrit :-)
01:27:29 <gour> err: samadhi
01:27:35 <ski> what is ?
01:27:38 <gour> i.e. total absorption
01:27:42 <ski> aha :)
01:28:29 <gour> transcending the bodily needs
01:38:24 <xerox> G'day.
01:42:05 <boegel> gour: huricane Katrina for example
01:43:33 <gour> boegel: well it's very unfortunate, but we do no have much influence on nature's working
01:43:45 <boegel> true
01:43:54 <boegel> other stuff too: having no money, war, ...
01:44:09 <boegel> but if I have a choice, it's 3 meals a day for me, I hardly ever skip one
01:44:10 <Lemmih> humasect: Huh?
01:48:45 <gour> boegel: i understand, but still we can change only ourselves, and that's not easy either :-)
01:48:54 <gour> now I have to go out, by folks
01:49:06 * gour away doing stuff outside
01:52:16 <boegel> outside ? you're nuts, there are people there
01:52:25 <boegel> atleast, that's what I've heard
01:52:36 * boegel loves to play the uber-nerd role
01:53:43 <Muad_Dibber> *cough*play*cough*
01:54:02 * ski hopes for some clouds
01:55:00 <int-e> the people aren't the worst - have you seen that bright yellow thing they put up at the ceiling? now that is scary.
01:55:16 <ski> indeed
01:55:39 <ski> evil bright shiny .. thing
01:56:16 <int-e> (http://ars.userfriendly.org/cartoons/?id=19991208)
01:56:26 * ski waited for that :)
01:57:13 * boegel laughs between his misery
01:57:14 <ski> (seems we both misremembered some)
01:57:48 <Muad_Dibber> you know
01:57:50 <Muad_Dibber> what i find scary?
01:58:01 <ski> sol ?
01:58:07 <Muad_Dibber> all the smileys
01:58:21 <Muad_Dibber> with everything people say you get some kind of smiley :|
01:58:23 <int-e> being exposed to an uncontrolled, open nuclear fission?
01:58:37 <Muad_Dibber> it would be like typing a normal smiley at the end of every line :|
01:58:46 <Muad_Dibber> and not untill you hear something funny or so type another one :S
01:59:02 <Muad_Dibber> they cannot have thought the world should be like that!
01:59:10 <xerox> Unix beards doesn't need to fear this: http://www.boycottgillette.com/
02:01:44 <ski> that's scary
02:33:22 <shapr> @yow !
02:33:23 <lambdabot> Eisenhower!!  Your mimeograph machine upsets my stomach!!
02:36:08 <ulph> hey shapr!
02:36:25 <shapr> hej ulph, wassup?
03:14:14 * ski wants a ltu2irc nick convertor
03:14:54 <shapr> Mine are equal.
03:15:07 <cjb> What's ltu?
03:15:50 <shapr> http://lambda-the-ultimate.org/
03:15:50 <ski> Lambda the Ultimate - The Programming Languages Weblog - http://lambda-the-ultimate.org/
03:16:04 <cjb> Ah, yes.
03:16:35 * cjb <- equal, too.
03:20:25 * gour is back (again)
03:20:32 * ski ponders whether some are more equal
03:28:51 <shapr> All men are created equal, but some are more equal than others.
03:33:40 <z0d> shapr: hi. about 1.5 year ago there was a discussion about a Haskell NNTP library. have you finished it?
03:33:56 <xerox> http://www.rasterman.com/files/e17_movie-02.avi
03:34:48 <ski> shapr : but does that apply to nicks, too ?
03:35:34 <xerox> I find that that desktop increment my state of anxiousness...
03:36:00 <xerox> Is it the future ?!
03:36:05 <shapr> z0d: No, I haven't.
03:39:40 <shapr> xerox: That background would distract me.3
03:40:35 <xerox> Indeed, shapr.
03:41:16 <xerox> A friend showed it to me after I finally found a way to have a fullscreen X11 Emacs on GNOME, heh.
03:41:43 <shapr> A true 3D desktop would have some good points, but I wouldn't want to have a sandstorm going on in the background.
03:42:08 <shapr> One example would be alarm clocks and the like, they could slowly come out of the distance to the foreground for appointments.
03:42:22 <xerox> Oh, it reminds me that one SoC project was natural language command interface to SUN's Looking Glass!
03:42:58 <xerox> Anyway, lunchtime.
03:47:33 <boegel> shapr: nice idea :)
03:48:37 <Philippa> a 3d desktop'd be nice if there were more screen area in my peripheral vision
03:48:39 <shapr> I have more ideas than I know what to do with.
03:48:44 <Philippa> atm I try to organise everything hierarchically, I guess
03:48:59 <shapr> Yeah, we're heavily limited by our tiny display area.
03:49:36 <shapr> 3D glasses with head tracking would work fine with a tiny display area, too bad they're not easily available.
03:50:21 <shapr> Glasses with 1600x1200 for each eye would work.
03:50:26 <boegel> xerox: what's thig enlightment thing ? some osX feature ?
03:50:33 <shapr> Enlightment is a window manager.
03:50:40 <shapr> Enlightenment*
03:50:43 <boegel> for mac ? or linux ?
03:50:53 <shapr> http://www.enlightenment.org/
03:51:05 <xerox> http://shots.osdir.com/slideshows/slideshow.php?release=427&slide=1
03:51:09 <shapr> Enlightenment was the first of the serious eyecandy projects.
03:51:34 <xerox> Here's a debian-base, enlightenment-managed-x11, linux distro
03:52:12 <boegel> looks cool !
03:52:15 <shapr> I always wanted to try alternative interface ideas like hexagonal menus, color shading to show the number of deeper choices under a menu, etc.
03:52:19 * boegel likes eye-candy 
03:55:42 <tuomov> hmm..
03:55:47 <shapr> markg: Do you work for the premier Haskell company at OSU?
03:55:53 <shapr> hei tuomov
03:55:56 <tuomov> 3d would be useful if we had a holo display behind the primary 2d display
03:56:02 <shapr> How so?
03:56:15 <tuomov> one could display all sorts of clocks and stuff in the holo space out of way
03:56:27 <shapr> ?
03:56:28 <tuomov> but for working a plain 2d display is better, I think
03:56:41 <tuomov> well, most work anyway
03:56:56 <shapr> I think a 3D display would be greatly superior for most work, we just haven't had the chance to come up with decent interfaces.
03:57:13 <tuomov> it's not like we carve on tablets. we write and draw on paper..
03:57:24 <shapr> Not with wiring, or machines.
03:57:35 * xerox saw something about holo display
03:57:39 <shapr> I think those are accurate metaphors for some flavors of programming.
03:57:41 <tuomov> of course for 3d design and such a real 3d display would probably be better
03:57:52 <tuomov> but most work is just doing stuff that would have gone on paper before on computer
03:58:05 <shapr> Like what?
03:58:22 <tuomov> writing, drawing
03:58:23 <shapr> For accounting, 3D visualization of trends would help you spot errors.
03:58:38 * ski imagines a 3d editor .. with "char voxels"
03:58:39 <tuomov> yeah, visualisation could benefit from it
03:58:43 <tuomov> but it's not really "work"
03:59:01 <tuomov> you'd probably still tell a program to draw it from data in a 2d grid
03:59:22 <ski> ?
03:59:23 <shapr> 3D glasses and a 3D hand sensor would allow 3D sculpting with your hands.
04:00:05 <ski> tuomov : what do you mean by 'data in a 2d grid' ?
04:00:12 <tuomov> a spreadsheet
04:00:14 <shapr> pejo: Hey, who offers broadband in LuleÃ¥? bbb and telia are way expensive.
04:00:55 <ski> tuomov : do you mean stuff like database relations ?
04:01:20 <tuomov> eh?
04:01:27 <tuomov> just some numbers in a matrix
04:01:33 <pejo> shapr, hm. No idea. Sorry.
04:01:39 <tuomov> ever used s spreadsheet program?
04:01:46 <tuomov> s=a
04:02:01 <ski> a little
04:02:06 <tuomov> I don't think 3d will help display and modify that raw data
04:02:08 <shapr> pejo: awright
04:02:08 <sieni> For matrices there's Fortran 77 :-)
04:02:25 <shapr> I do think 3D will help display spreadsheet data.
04:02:45 <tuomov> it will help visualise it, but not display the raw numbers
04:02:48 <shapr> Not in a grid, but using data visualization.
04:03:03 <tuomov> and the raw numbers are what you really work on
04:03:14 <shapr> But the visualization is what you want.
04:03:18 <tuomov> in the end
04:03:36 <shapr> I wish I had my bookkeeping in a 3D display.
04:03:51 <tuomov> anyway, my point was that I don't think 3D is of any help for most of "real work" on a computer
04:04:00 <tuomov> just representing some of that work
04:04:33 <ski> some time ago, i have imagined a system for displaying and walking around a graph, where the nodes nearest to the 'current node' are largest and the ones that are further out are smaller (and if too long away, just not shown) .. this could possibly in some cases be helped by 3d display
04:04:40 <tuomov> you'll still want a 2d surface most of the time even with a holo display
04:05:31 <tuomov> but the holo display could display other things as well unobstructively in the background
04:05:39 <ski> (and of course when you walk around, it would "zoom" nodes up and down to reflect new position)
04:06:01 <tuomov> 3D UIs to traditional concepts are BS
04:06:09 <shapr> hej mannen
04:06:36 <shapr> tuomov: I'm not convinced. But let me have a few years to play with a 3D display and I'll have more data.
04:06:43 <ski> hm .. with a true holo display, we could even have stuff we only see if we look at the display from the right angle :)
04:06:44 <tuomov> like a quake hack for navigating the FS... I can type the path much faster than that
04:07:17 <xerox> "point with eyes and click with thought"
04:07:17 <shapr> Yeah, but quake was never designed for FS navigation.
04:07:20 <xerox> !
04:07:31 <mannen> shapr: har du tid att hjälpa mig nån kort minut, precis börjat läsa om haskell, har några enkla korta frågor
04:07:34 <tuomov> shapr: but that's what most of 3d UIs are about
04:07:44 <tuomov> concepts that don't work at all
04:07:48 <shapr> mannen: Kan inte lÃ¤sa latin-1, kan du anvÃ¤nder UTF-8?
04:07:51 <tuomov> just because it's "cool"
04:07:52 <shapr> mannen: or english
04:07:57 <xerox> "say back in your head and to back in the hierarchy"
04:08:05 <xerox> *go
04:08:08 <vikasg> there's a doom hack for sysadmins; you can kill a process by shooting a monster
04:08:11 <ski> xerox : though, in my case, i meant physically moving head .. so different people can see different things simultneously at same screen
04:08:19 <boegel> xerox: I wouldn't like a computer reading my mind...
04:08:20 <shapr> tuomov: I think that's because the hardware isn't available for real use.
04:08:41 <mannen> tror inte jag kan använda utf-8 här i skolan, har fick det knappt att fungera bra hemma :(
04:08:48 <tuomov> a 3d display won't help a crappy 3d navigation system
04:08:50 <ski> mannen : vad Ã¤r dina frÃ¥gor ?
04:08:52 <shapr> I know I could make use of a real 3D sound render system.
04:08:58 <tuomov> there's no point in trying to make things 3d that aren't 3d
04:09:02 <shapr> mannen: OcksÃ¥ finns #haskell.se
04:09:46 <Philippa> it'd occasionally be nice for me to have 'layers' on the desktop - essentially your usual virtual screens, but with some keyboard+scroll wheel shortcut for flicking between as well
04:10:24 <shapr> I have H-n to switch to the next ion desktop.
04:10:31 <Philippa> I'm stuck on windows
04:10:34 <cjb> But you can use a keyboard+scroll wheel shortcut to move between virtual screens.
04:10:42 <Philippa> not on this OS I can't!
04:10:42 <tuomov> it'd be nice to have a second workspace in the background so I can just look over the primary one to see some things
04:10:43 <shapr> Philippa: There's an easy solution to that...
04:10:54 <cjb> Ohh.  Well, then, yes; it would be nice if you had a competent window manager.
04:11:06 <cjb> shapr: ion users in da house, yo.
04:11:11 <tuomov> it would be possible to do that with a second display, but that takes space
04:11:15 <Philippa> shapr: it's only easy if you ignore issues like app migration and being able to run all the games I would under 'doze
04:11:21 <tuomov> a holo display could display such things in the air
04:11:48 <ndm> and ignore the fact that windows is a nicer operating system :)
04:12:41 <pejo> ndm, fire in the hall!
04:13:46 <Philippa> ndm: it's not IME
04:14:08 <Philippa> really, if it weren't for the apps and to a lesser extent the fact I've got the common keyboard shortcuts drilled into me I'd switch like /that/
04:14:12 <xerox> http://www.trnmag.com/Stories/2004/063004/Holograms_enable_pocket_projectors_063004.html
04:14:35 <cjb> xerox: I know those guys well.  :)
04:14:46 <cjb> And have seen their demo units and stuff.  It is very cool.
04:14:51 <ndm> you can remap the keyboard easily enough
04:15:18 <cjb> Philippa: Which apps?  I think you are being Afraid Of Change.
04:15:20 <ndm> although you can never find a replacement for textpad of visual studio
04:15:24 <ndm> * or
04:15:36 <ndm> (or WinHugs of course)
04:16:08 <cjb> So?  The Linux community is obviously doing just fine without either.
04:16:36 <Philippa> cjb: textpad is one of them. I've not found an IM client I like either
04:16:48 <cjb> Philippa: Have you tried gaim recently?
04:16:52 <ndm> i've not found one i like on windows...
04:16:55 <Philippa> Why do I give a fuck how the linux community is doing?
04:17:01 <Philippa> I care how *I'll* do
04:17:07 <Philippa> about six months back IIRC
04:17:09 <cjb> Philippa: I was talking to ndm.
04:17:12 <Philippa> it was... tolerable
04:17:21 <Philippa> yes, about apps that I use
04:17:47 <cjb> Hm.  You're not giving very concrete reasons.  :/  I suppose maybe you just prefer Windows, for aesthetic reasons?
04:17:48 <ndm> the linux community are wrong about many things, just as teh windows community are
04:17:58 <ndm> cjb, Textpad, concrete reason
04:18:07 <ndm> there is no other editor in the same class
04:18:12 <Philippa> editors I'm *used to* is a concrete reason
04:18:16 <xerox> Textpad is just an heavily stripped down version of Emacs.
04:18:24 <ndm> xerox, wrong - its beautiful
04:18:28 <Philippa> bullshit, emacs doesn't do GUI properly at all
04:18:48 <ndm> Textpad is perfect, it has no suprises, which is what makes it amazing
04:18:48 <Philippa> I'll look seriously at yi when there's a good GUI front end, sure
04:18:57 <cjb> Huh?  emacs has "done GUI properly" for decades.
04:19:09 <ndm> hehe, linux users confuse GUI and Good GUI
04:19:33 <Philippa> cjb: last time I looked, it couldn't do the GUI things I wanted it to. 'nuff said.
04:19:43 <ndm> Philippa, which IM client do you use?
04:19:44 <cjb> ndm: Windows users make ridiculous overgeneralisations.
04:19:52 <ndm> cjb, nope - thats just me ;)
04:19:59 <Philippa> currently Trillian, with mIRC for IRC
04:20:15 <cjb> Yeah, Trillian is decent.
04:20:18 <ndm> hmm, i hate skins, which is what kept me away from Trillian
04:20:20 <Philippa> I can use xchat tolerably, and I quite like irssi when I'm on a console anyway, but hey
04:20:28 <Philippa> fair enough, it put me off for a long time too
04:20:47 <xerox> mIRC doesn't even have Unicode supporto :(
04:20:50 <ndm> but finding a non-skinned IM anymore is nearly impossible
04:20:50 <xerox> -o
04:20:50 * cjb is using xemacs for IRC/mail/news/RSS/code.
04:21:04 <Philippa> cjb: I'm well aware that's possible. I'm not interested
04:21:09 <Itkovian> lol
04:21:20 <cjb> S'okay, I don't expect everyone to be.  :)
04:21:39 <xerox> I can't use Emacs for Mails/RSS.
04:21:39 <Itkovian> you don't?
04:21:41 <Philippa> I /would/ consider it if it did GUI stuff the way I consider to be 'properly'
04:21:52 <pejo> cjb, what do you use for RSS, and does it 'just work'?
04:21:53 <cjb> Moving to emacs is one of those things like learning dvorak, when you realise the next few weeks/months of your life are going to be hellishly slow, but maybe there's something better at the end of it.
04:22:08 <xerox> Philippa: the time spent through the tutorial it's worth it, IMO.
04:22:08 <cjb> pejo: nnrss, a gnus backend.  (Since I'm already using gnus for mail and nntp.)
04:22:16 <Itkovian> Philippa:  which is?
04:22:23 <xerox> cjb: agreed completely.
04:22:37 <Philippa> xerox: I'm pretty sure I've run through at least one tutorial once. I'd want to spend a significant amount of time customising it to hell and back
04:22:44 <cjb> (And I'm not saying it leaves you in some high plane of existence *after* those weeks/months.  Just that maybe the emacs style will click for you.)
04:22:56 <Philippa> Itkovian: lengthy and complicated to explain :-) Managing native look-and-feel is part of it though
04:23:09 <ndm> people who use textpad become spoiled, after that emacs will never work
04:23:10 <Itkovian> Philippa: ah, as on my mac ;-)
04:23:10 * cjb still has arguments with emacs sometimes, but also considers it to make him deathly efficient with text files.
04:23:16 <xerox> Philippa: it takes some time to be mangled completely to a form completely suitable.  I find it nice to learn new features every day or such.
04:23:21 <pejo> cjb, as usual when dvorak comes up - the studies about benefits of that layout were performed by dvorak himself, afaik. Most people type faster when they learn touch typing, which isn't strange.
04:23:39 <cjb> Philippa: The current version of GNU emacs ships with the Gtk2 widgetset by default.  Did you know that?
04:23:42 <ndm> pejo, but it does reduce wrist strain apparently
04:23:54 <Philippa> no, and that helps. But it's still miles from perfect
04:23:55 <cjb> pejo: Sure, I won't argue with that.  I'm aware of the studies.
04:24:03 <gour> cjb: is it maintained?
04:24:10 <Philippa> believe it or not, Gtk2 often fails to feel native for a windows user
04:24:16 <cjb> Philippa: I'm afraid I don't see how, since you haven't given any more examples of things you want it to do that it already can.
04:24:31 * Philippa sighs
04:24:31 <cjb> You want your Linux applications to look "native" to Windows?  I can see how that'd be a problem.
04:24:47 <Philippa> FFS
04:25:02 <cjb> (Also, gtk is themable; there are Windows themes, even.)
04:25:07 <Philippa> I *will not switch unless the /apps/ make me happy*
04:25:12 <xerox> :-)
04:25:12 <pejo> Philippa, heh. I bet you're used to this? :-)
04:25:15 <Philippa> and the windows themes /still don't feel native/
04:25:25 <ndm> no skinned application can ever be perfect
04:25:31 <Philippa> ndm: *bingo*
04:25:38 <ndm> Firefox is the closest I've ever seen, and its still a bit off
04:25:49 <ndm> (Firefox with Qute theme, that is)
04:25:55 <Philippa> yeah. Firefox is okay, but I wouldn't want to build a text editor from the same platform
04:26:10 <cjb> Philippa: Sorry I'm frustrating you.  (Trying to solve your like for something to look "native", which appears to mean "be Windows", is frustrating too!)
04:26:21 <Philippa> cjb: you may have noticed there are windows builds of emacs
04:26:25 <ndm> its not just look native, its also feel native
04:26:42 <ndm> everything responds _slightly_ differently - thats what upsets people
04:26:49 <Philippa> ndm: exactly
04:26:51 <cjb> Ah, hm.
04:27:23 <Philippa> I would've moved to emacs if it felt like it could be beaten into shape on this platform
04:27:25 <kosmikus> the real problem isn't emacs, it's Windows ;)
04:27:37 <xerox> Philippa: I completely agree with your point.  I do use Emacs for IRC because of the great editing capabilities (e.g. flyspell correction on the fly, multiline editing, etc etc).
04:27:47 <gour> every knows: (G)vim rules :-)
04:28:00 <cjb> xerox: Not to mention parentheses matching!  :)
04:28:16 * cjb uses emacs for irc 'cause it means he doesn't have to remember stupid window numbers associated with channels.
04:28:28 <xerox> Those in fact are two of the main features because I use IRC on Emacs.
04:28:29 <pejo> cjb, nnrss isn't a part of gnus though, is it?
04:28:36 <cjb> pejo: I think it is these days.
04:29:05 <cjb> It's amazing to talk to irssi users and hear "Yeah, I have 40 windows open."  "How do you remember what's in which?"  "Um, dunno, I kinda put the same channels in the same place sometimes."
04:29:29 <Philippa> I run one client per network and switch via the taskbar
04:29:33 <xerox> Others are extreme configure power to mangle highlights/colors and the multiple buffer window.
04:29:37 <cjb> And they don't seem to realise that having this state pushed to their brain instead of the computer is crazy.  I think I'm just destined not to understand some types of user.
04:30:03 <Philippa> it's going to be hardwired if you want to switch really quickly anyway though
04:30:04 <cjb> Philippa: So, when you want to change channel, you grab the mouse and click in the taskbar and then go back to the keyboard again?  That's even worse!  :)
04:30:16 * cjb doesn't use the mouse anymore.  Or, tries not to.
04:30:17 <pejo> cjb, users adapt. I use the same screen numbers for stuff, otherwise I'd mix things up.
04:30:20 <xerox> Pfft.  My point was interesting.
04:30:49 <Philippa> cjb: yeah, I'd like better keyboard shortcuts for switching apps - but that's not too big a deal usually
04:30:58 <Philippa> the pace I IRC at doesn't really need the keyboard switching
04:31:05 <xerox> Who cares if you use the mouse or not...  the power of editing capabilities and multiple buffer display without much screen space losing is "teh best" part of it, in, my experience.
04:31:12 <cjb> That makes sense.
04:31:16 <Philippa> I spend as long doing the mental context switch as I do mousing anyway
04:31:24 <xerox> Ah!! Also very fast and clever way to switch buffers to active channels.
04:31:25 <cjb> xerox: Not sure irssi doesn't have those, mind.
04:31:32 <cjb> xerox: .. irssi has that, too.
04:31:35 * cjb == being fair.  ;-)
04:31:37 <xerox> cjb: nah.
04:31:44 <xerox> ESC+number is painful
04:31:56 <cjb> There's a key combo to go to the next channel with new activity in irssi, just like C-c C-spc in ERC.
04:32:00 <Philippa> xerox: yup, that I get. I tend to run an... interestingly stripped down kind of screen
04:32:29 <Philippa> and I'm unlikely to turn down extra editing capability for free - it's the cost of relearning how to do everything that I don't want to pay
04:32:33 <xerox> I'll shot :-P
04:32:54 <cjb> xerox: hm?
04:33:22 <cjb> Philippa: Okay.  "So, we can agree that you're an inefficient and awful person, but you're too lazy to do anything about it."
04:33:26 * cjb is being entirely unserious.  :)
04:33:44 <Philippa> the cost of switching would be /high/ for me
04:33:53 <Philippa> like, months of being unproductive and frustrated
04:33:59 <cjb> Why moreso than the rest of us, OOI?
04:34:20 <xerox> http://haskell.galois.com/~paolo/darkmood-060905-1322.png
04:34:34 <pejo> cjb, ok, nnrss needs w3. I didn't want rss that badly. :-)
04:35:03 <Philippa> I don't know whether I've got the windows stuff more hardwired than anybody else did on switching, but it's pretty hefty. Switching the OS would make /everything/, day-in, day-out hurt. And I do get frustrated and worn out more easily than most, I've a track record of it - which slows the unlearning and learning processes down a lot
04:35:09 <cjb> xerox: Neat.  Got a .emacs around?
04:36:14 <xerox> But this doesn't show the capabilities I was talking about, let me try make the point in a new screenie.
04:36:20 <cjb> xerox: Mine looks more like http://www.inference.phy.cam.ac.uk/cjb/lewis.png .
04:36:32 <xerox> http://haskell.galois.com/~paolo/showoff-060905-1324.png
04:36:36 <cjb> Philippa: Okay, fair enough.
04:37:08 <xerox> This shows what I was talking about, now I can't live without it :-)
04:37:13 <Philippa> I get extremely annoyed at things not behaving the way I intend, it's one of the reasons I code in Haskell :-)
04:37:23 <xerox> Philippa: hehe, agreed.
04:37:27 <cjb> Hm, your webserver isn't talking to me anymore.
04:37:45 <Philippa> I do intend to pick up yi once there's a reasonable GUI available and see what I can do with it though
04:37:46 <cjb> Philippa: That's a feeling absolutely everyone running Linux has.  It's the whole reason most of us switched!
04:38:19 <Philippa> much of linux suffers from it too though, insofar as the configuration can be problematic
04:39:00 <Philippa> and I've got a little fed up of trying out 5 apps to find out that between them they might form one that has my desired feature-set and there's no good way to glue them together
04:39:04 <pejo> cjb, and we aren't really surprised your zshrc is 2000 lines. :P
04:39:27 <cjb> pejo: *cackle*
04:40:09 <xerox> Philippa: did you see what I mean visually, though?
04:40:15 <cjb> What can I say?  I don't like ever typing the same thing twice.  :)
04:40:20 <Philippa> xerox: looking now
04:40:40 <cjb> xerox: Your web server is not handling requests.
04:40:48 <xerox> Let me try...
04:41:13 <pejo> cjb, or as people usually put it - a sysadmin is someone who spends 6 hours automating something that could have been done in 3 hours.
04:41:43 <cjb> pejo: Good job I'm not a sysadmin, then.  :)
04:42:07 <Itkovian> cjb: that is one lean desktop
04:42:48 <Philippa> mine tends to consist of one maximised window and a packed taskbar at any one time
04:42:56 <ski> xerox : still not serving
04:43:04 <xerox> http://mu.neuralnoise.com/showoff-060905-1324.png
04:43:12 <Itkovian> Philippa: for that one has _multiple_ destops. Much easier
04:43:44 <Itkovian> On my mac, though, everything resides on one desktop, and switcing is a piece of cake
04:43:49 <xerox> That should work.
04:43:55 <Philippa> Itkovian: How do you handle cross-desktop notification?
04:44:32 <Itkovian> I don't. If I'm busy, I can't be bothered :-)
04:44:36 <Itkovian> You could use sound
04:45:03 <Philippa> sound's not sufficient, I want a small flag raised 'til I look at something that I can notice but which can also be ignored
04:45:15 <xerox> What are you talking about?
04:45:23 <Philippa> xerox: in windows I have stuff flashing in the taskbar
04:45:31 <xerox> Ah!  GNOME flashes as well.
04:45:34 <Philippa> (or in PC-Pine's case, it changes the colour of the icon)
04:45:48 <Itkovian> Philippa: you could have flags in the tray in e.g. KDE or gnome, I think
04:45:59 <Philippa> yeah. IIRC apps have to know to do that though
04:46:00 <xerox> GAIM does an excellent work too.
04:46:35 <Philippa> which is one of the problems I tend to find: there're all these neat customisations, but then you've got to go out and make everything interoperate - O(N^2) config!
04:46:42 <pejo> Those flashing things are really inefficient though. Just like irc. :-)
04:46:52 <xerox> Philippa: I think not.
04:46:56 <Philippa> pejo: they're extremely efficient for what I want them to do
04:47:07 <pejo> Phillippa, interrupt?
04:47:20 <Philippa> xerox: go make an app that doesn't usually use GNOME- or KDE-specific features flash
04:47:29 <Philippa> pejo: I don't /want/ that
04:47:34 <Philippa> I want to be able to ignore it if I choose
04:47:48 <xerox> Philippa: XMMS/Firefox does it, and I don't think they do any special interaction... I could be wrong, though.
04:47:52 <Philippa> conscious there's something waiting for me, no more, no less
04:48:03 <xerox> The only app I never saw flashing was xterm.
04:48:27 <Philippa> ah, good, I guess more people're integrating it then. I'm pretty sure there's a specific function call you need to make to do it
04:48:46 <xerox> I don't call any function
04:49:08 <xerox> Neither I tell any program to do so..
04:49:51 <Philippa> yes, apparently now people are writing their apps to make use of it where they might not have done so before. This is a good thing. An app still has to be aware that the feature may exist, determine whether it does or not and then use it
04:50:04 <Philippa> somewhere, the app has to decide "I wanna flash everybody!"
04:51:35 <xerox> It is indeed possible that they get it for free somehow...  but what's your point?
04:52:34 <Philippa> it wasn't always like that. And even if it is for that one feature, every time I hack up something neat I've got to consider whether the apps need to know about it to interact with it. End result: I get more than a little frustrated whenever I do sit down to do some serious desktop customisation
04:52:40 <cjb> Itkovian: Yeah, that desktop's on an old laptop.  Things are usually more spaced out.  :)
04:52:51 <xerox> Philippa: do you do GUI programming in Windows?
04:53:02 <cjb> I use maximised windows, but they each have their own workspace.
04:53:03 <Philippa> xerox: I've done some. I'm aware it's every bit as nasty and then some
04:53:12 <Philippa> I've been known to bitch loudly that all GUI libs suck :-)
04:54:38 <xerox> I never succeeded in writing GUI programs before trying Gtk2Hs out :-)  I got that LSystem rendering program working in 20 mins.
04:54:56 <xerox> (With the great help of glade)
04:55:04 <Philippa> yeah, I'll look at Gtk2Hs next time I'm doing something GUIish in Haskell. wxHaskell's not bad either
04:55:39 <Philippa_> unfortunately I had a bit of an issue when I tried writing an IRC client with it, couldn't convince it to display incoming messages right
04:55:48 <Philippa_> (did I miss anything?)
04:55:51 <xerox> Nope
04:56:08 <shapr> A Haskell gui app bootstrap project would be nice.
04:56:09 <xerox> Duncan wrote a nice thing about how an IRC client could be written (or more generally threaded apps) in Haskell using Gtk2Hs
04:56:21 <shapr> Something that has simple tutorials for gtk2hs and wxHaskell at least.
04:56:52 <gour> agree
04:57:01 <xerox> It's pretty simple!
04:57:06 <shapr> Oh, and for HOpenGL too.
04:57:21 <gour> xerox: for one who knows!
04:57:46 <xerox> First you do VB-like work on Glade, and make an XML .glade file.  Then, in the .hs you get the items as Gtk Objects, and mangle them adding signal handlers.
04:57:58 <xerox> s/items/widgets/1
04:58:05 <Philippa_> I tend not to like doing VB-like work these days
04:58:15 <xerox> If _I_ was capable of doing it, it could be done by the rest of you :-)
04:58:21 <Philippa_> got too pissed off with what happens when you need things to change at runtime
04:58:42 <xerox> I can't really say, never tried complex things as now.
04:58:43 <tuomov> and that's the crappiest way possible to do the gui for an app :)
04:58:59 <Philippa_> and TBH, even for simple forms I'm not sure I wouldn't rather pass a bunch of data off to a function to build it for me
04:59:21 <xerox> What do you mean?
04:59:29 <shapr> Is there a way to do the Glade stuff programmatically and dynamically?
04:59:37 <xerox> shapr: sure.
04:59:43 <shapr> Right, what Philippa_ said.
04:59:49 <shapr> I'd rather pass a bunch of data to a function that builds it.
04:59:51 <xerox> You just build the widgets by using functions, and pack them in containers manually
05:00:02 <xerox> Doing it by clicking here and there is just more convenient.
05:00:08 <tuomov> no, one shouldn't be building widgets
05:00:13 <xerox> You don't loose any power, I think.
05:00:21 <tuomov> the app should not at all be concerned with what the ui looks like
05:00:31 <Philippa_> tuomov: not sure I can agree there
05:00:51 <tuomov> it should be possible to plug in almost any kind of ui without changing the app
05:00:55 * shapr hears vis coming in the distance.
05:01:03 <tuomov> http://iki.fi/tuomov/vis/ :)
05:01:23 <xerox> No, I'm really sure you don't lose any power.  You just get the iterms from "xmlGetWidget castToButton "buttonDraw"" instead of "newButtonWithLabel .."
05:02:06 <cjb> tuomov: Holy crap, you're the ion guy.  Hello.
05:02:14 <tuomov> hello.
05:02:46 <shapr> cjb: ion authors, y0!
05:02:53 * shapr grins
05:03:04 * xerox antialiases tuomov 
05:03:17 <xerox> ...bluuurrry...
05:03:19 * tuomov turns to a pool of slime
05:03:27 * cjb sniggers.
05:03:42 <cjb> Oooh, I have an idea.
05:03:47 <cjb> We should have #haskell Screenshot Day.
05:04:40 <cjb> Everyone should post a screenshot and someone should collate them onto a single page for us to chat about.
05:05:24 <shapr> Mine are always emacs with the misty-day theme running under ion3.
05:05:50 <cjb> shapr: May I see?  I'm still on ion2.
05:06:05 <cjb> Not that there's much visual difference.  :)
05:06:19 <shapr> There's zero visual difference the way I use it.
05:06:26 <xerox> :-)
05:06:52 <cjb> Heh.  I wonder if ion/emacs is the most common desktop, then, at least of those of us talking right now.
05:07:03 <xerox> http://www.firstmonday.org/issues/issue10_5/masum/
05:08:08 <shapr> http://www.scannedinavian.org/~shae/shapr-screenshot.png
05:08:30 <Philippa_> http://www.flippac.org/desktop.png
05:08:56 <cjb> shapr: Thanks.  That's an.. interesting colour scheme.
05:09:18 <cjb> .. but saying that, I just saw Philippa_'s.
05:09:23 <shapr> mistyday r0xx
05:10:00 <Philippa_> cjb: I tend to do the foreground/background thing on a per-app basis, though I use roughly the same scheme in textpad
05:10:06 <Philippa_> windows just has the default scheme
05:10:18 <Philippa_> the big text is on account of my eyesight sucking - I don't want it to get any worse reading small text
05:10:20 * xerox is stunned: http://www.chicagocrime.org/map/
05:10:25 <cjb> Philippa_: I really don't know where to start.  :)  I suppose you've memorised which IRC server is in which tiny mIRC icon?
05:10:46 <cjb> Why give yourself tiny targets on the taskbar if you have bad eyesight?
05:11:24 <Philippa_> because I rarely have to use them directly
05:11:26 <cjb> I have okay corrected eyesight, and I don't even do that.  Having to click tiny boxes (eg. Windows close-boxes) is the road to RSI.
05:11:40 <gour> Philippa: have you read Relearning to See book?
05:11:55 <xerox> Philippa_: YAY  what font.
05:11:56 <Philippa_> my left hand tends to be worse than the right, ironically enough (and yes, I'm right-handed and mouse with the right)
05:12:11 <Philippa_> Ariel Black
05:12:14 <pejo> To outweight all the colors and stuff in here: http://www.csee.ltu.se/~pj/pj-screen.png
05:12:48 <Itkovian> omg pejo you are living in the stone age
05:12:52 <cjb> pejo: yow!
05:12:58 <cjb> pejo: You have my desktop circa 1993.  Congrats.  :)
05:13:03 <xerox> pejo: are you kidding?
05:13:09 <pejo> cjb, thank you. :-)
05:13:10 <Philippa_> cjb: I have the order for the servers memorised because having to check each time would slow me down
05:13:35 <shapr> pejo: Wow, last time I had a desktop like that was 1998.
05:13:43 <Philippa_> I imagine I could talk mIRC into telling me as a tooltip, but it doesn't really matter
05:14:03 <cjb> Philippa_: Ah, I see the difference between us now.  You like *being* the computer, and I like *using* the computer.  ;-)
05:14:13 <Philippa_> large toolbars actually irritate me more - I'm reasonably good at targetting stuff that size (used to play a lot of FPS)
05:14:23 <pejo> xerox, hm?
05:14:27 <Philippa_> unless I'm doing a lot with the mouse the cursor tends to hover pretty low anyway
05:14:33 <dons> @karma+ pejo
05:14:34 <lambdabot> pejo's karma raised to 1.
05:14:42 <Philippa_> cjb: I like being able to think "freenode" and just do it without having to check which order I left it in today
05:14:57 <Philippa_> if that requires hardwiring 10-odd facts about my desktop, I can cope with that
05:15:08 <cjb> That's phenomenal.  You've reduced your mouse to being a taskbar navigator, and your brain to being a virtual taskbar.
05:15:35 <Philippa_> the mouse does more when there's cause - I do have a strong preference for the keyboard when sensible though, for all the usual reasons
05:15:43 <Philippa_> (which explains my choice of news and mail reader, for example)
05:15:57 <Itkovian> http://elis.ugent.be/~ageorges/desktop1.png
05:16:09 <cjb> Philippa_: What do you use?
05:16:12 <Philippa_> mIRC's the only thing I usually have to memorise, though it'd be nice to modify GSView so I could stack all the papers on one icon and do the MDI thing
05:16:15 <Philippa_> PC-Pine
05:16:29 <dblhelix> http://www.cs.uu.nl/~stefan/images/desktop.png
05:16:38 <Philippa_> the icon's towards the right on my toolbar
05:16:48 <vikasg> pejo, I've seen screenshots like that only in research papers
05:16:54 <cjb> Does someone have a flickr account or something we could throw these photos on?
05:17:19 <Itkovian> dblhelix: ah ... Tiger ...
05:17:33 <dblhelix> Itkovian: yep :)
05:17:42 <cjb> My boss has a twm desktop like that.  Here's his .twmrc:
05:17:42 <cjb> islay:cjb~ % head -n3 ~mackay/.twmrc
05:17:42 <cjb> #
05:17:42 <cjb> # $XConsortium: system.twmrc,v 1.7 89/12/01 11:23:47 jim Exp $
05:17:42 <cjb> # DJCM 12 4 94 ---
05:17:48 <cjb> (At least, the first three lines of it.)
05:18:00 <xerox> dblhelix: very eye-pleasing
05:18:05 * cjb accuses pejo of being in the wrong decade.
05:18:24 <dblhelix> xerox: it is
05:18:26 <cjb> dblhelix: Oh, is that the new Mail.app?  Looks nice.
05:18:49 <dblhelix> cjb: yeah, it took some getting used to, but now it's okay
05:19:14 <dblhelix> actually, this is a screenshot of my left monitor... I use two
05:19:22 <Itkovian> grr
05:19:35 <xerox> I want multiple monitors too!
05:19:49 <Itkovian> xerox: get a matrox or a mac
05:19:50 <cjb> http://www.inference.phy.cam.ac.uk/cjb/shiny.png # the opposite of pejo's desktop :)
05:19:58 <xerox> I could use the TV with this laptop, but it isn't really...
05:20:11 <pejo> cjb, it all boils down to us adapting to the constraints imposed on us by the system though. I can absolutely not tolerate my wm to crash on me, for example.
05:20:39 <cjb> pejo: Sure.  ion's never crashed on me.
05:21:10 <Philippa_> pejo: my desktop'd probably be even more blatantly hierarchical if there were good support for it under windows
05:21:32 <Philippa_> I might well have just the one mIRC session with query sessions layered by server if it'd let me, for example
05:21:37 <Philippa_> (one reason I considered writing my own client)
05:21:43 <dons> Philippa_, why are you trapped on windows?
05:21:48 <Philippa_> dons: apps, games
05:21:56 <Philippa_> we had that argument earlier
05:22:01 <pejo> dons, check the logs, if you care about her blood pressure. :-)
05:22:06 <Philippa_> in fact, about an hour ago
05:22:13 <dons> oh, sorry.
05:22:18 * ndm returns, and nothing has changed
05:22:24 <tuomov> http://iki.fi/tuomov/shot.png
05:22:33 <tuomov> a slightly brighter ion shot than shapr's
05:22:47 <sieni> are there any useful apps on windows? all the windows ports of unix apps seem to perform in an inferior way for one reason or the other
05:22:53 <tuomov> (speaking of which, I really need to update the shots on the homepage to include all the new features..)
05:23:00 <xerox> Mumble mumble.
05:23:08 <cjb> tuomov: What are the new features?  :)
05:23:13 <ndm> sieni: TextPad, Visual Studio, WinHugs - ports are never the same
05:23:22 <Itkovian> pejo: lol
05:23:25 <cjb> Isn't WinHugs a port of Hugs?
05:23:26 <tuomov> e.g. that statusbar at the bottom left, and the partially overlapping split
05:23:39 <Philippa_> sieni: sadly you're right, that's one of the things that stops me making the leap
05:23:43 <Itkovian> lispy: ping
05:23:50 <ndm> cjb, not really - its an extra 4000 lines of code
05:23:51 <Philippa_> though admittedly I'd get pissed off enough about having to reboot to play games anyway
05:24:24 <Itkovian> Philippa_: there's lots of games for linux too, you know
05:24:33 <Philippa_> Itkovian: why thank you
05:24:35 <ndm> there is a port of hugs for windows, as well as winhugs, but hte two are separate
05:24:48 <Itkovian> but anyway ... I still need winblows too for playing Morrowind etc.
05:24:49 <Philippa_> (or to put it another way: that's great, but the ones I want to play are on windows and sometimes are windows-only)
05:25:14 <xerox> :-\
05:26:11 <Itkovian> Philippa_: I know ... sad, isn't it. I'd love a Morrowind port to mac or linux.
05:26:23 <Philippa_> yeah, it'd be nice
05:26:43 <Itkovian> in fact I only played a little because I was tired of rebooting
05:27:00 <Philippa_> mind you, I'd like things like a european release of KOF2002 on (non-Neo Geo) consoles
05:27:05 <xerox> I only play Go and WipeOut 3 from time to time :-)
05:27:07 <tuomov> luckily 99.99% of the games today suck.
05:27:25 <Itkovian> tuomov: no, 99.99% of today's games are clones of yesterday's games
05:27:36 <pejo> cjb, as for ion - I know twm will be on most systems, hence I can just copy my .twmrc and start working in the environment I'm used to.
05:27:55 <gour> http://dev.atmarama.org/desktop.png
05:28:01 <cjb> pejo: Is that even true?  Do, say, Ubuntu or FC4 ship with twm?
05:28:02 <Itkovian> I'd also love WiFi on the train (free) so it would allow me to play Quake3 ;-)
05:28:06 <gour> my kde beauty :-)
05:28:10 <Philippa_> and then the clones that contain many improvements over older versions and sometimes have significant differences just get dismissed as more clones too (UT suffered from that)
05:28:12 <Itkovian> and I'd love a free port of NiverWinter Nights to mac.
05:28:35 <tuomov> I don't mind clones.. I mind the clones being of three games
05:28:35 <Philippa_> actually, UT suffered from that so much that UT2003 was practically trying to be a Q3A clone because all the Q3A fanboys complained it was an /inferior/ clone
05:28:55 * cjb just plays Go from his desktop, and plays other games on consoles.
05:28:58 <pejo> cjb, I have no idea to be honest, but twm was a part of X for a long time. Those X.org people might have split it out, I'm not sure. Anyways, my desktop mostly resides on Solaris.
05:29:02 <tuomov> wolfenstein, dune, and some car game
05:29:06 <tuomov> that's all there is anymore
05:29:21 <Itkovian> I'd love a remake of Hi-Octane
05:29:23 <Philippa_> PC games market collapsing, news at 10
05:29:39 <Philippa_> there's a lot of stuff to be had on the consoles, fortunately
05:29:52 * Itkovian doesn't own a game console
05:30:03 <tuomov> I want good old adventure games!
05:30:12 <tuomov> and no 3d, please
05:30:25 <rep> the only decent game for PC is "football manager 2005" :)
05:30:27 <Philippa_> they've mostly been superseded by console-style RPGs and survival horror games
05:30:30 <Itkovian> Sam&Max
05:30:36 <tuomov> sam&max rocks
05:30:37 <Philippa_> a shame at times
05:30:48 * gour is away: lunch
05:31:02 <xerox> One for all, Monkey Island.
05:31:05 <tuomov> well, 3d characters in the style of syberia is ok, though
05:31:20 <tuomov> but the background graphics should be hand-drawn or rendered
05:31:31 * rep is playing football manager 2005 as we speak
05:31:35 <tuomov> s/rendered/ray-traced or whatever at high quality/
05:31:42 <Philippa_> these days 3d backgrounds're starting to look pretty viable
05:32:00 <tuomov> I have yet to see real-time 3d that didn't suck
05:32:02 <Philippa_> FFX worked OK, and I fully expect Square's PS3 output to be absolutely gorgeous
05:32:04 <xerox> I saw some impressing shots of car games (though I don't like them)
05:32:05 <rep> Philippa_ you mean resident evil-like backgrounds?
05:32:17 <Philippa_> rep: no
05:32:38 <rep> Philippa_ so what do you mean :)
05:32:41 <Philippa_> at least, not as of any of the RE games I've played where the graphics were 2D
05:32:46 <Philippa_> I mean *3D backgrounds*
05:32:52 <Philippa_> played Final Fantasy X?
05:32:58 <Philippa_> the camera moves around as you do, stuff like that
05:33:02 <rep> it's the same as resindent evil
05:33:08 <tuomov> I don't want that camera movement shit
05:33:14 <tuomov> it just makes the game complicated to control
05:33:23 <rep> except the old resident evils are like 10 years old :{
05:33:28 <Philippa_> tuomov: doesn't have to. FFX has no need for camera controls whatsoever
05:33:28 <rep> :)
05:34:09 <xerox> What is FFX?
05:34:22 <Philippa_> rep: the only time I've seen seriously-moving backgrounds (as opposed to composite stuff with a couple of 3D objects on a 2D background) in a PSX survival horror game they've clearly been FMV
05:34:23 <nnunley> xerox:  Final Fantasy 10
05:34:25 <tuomov> and despite how much I hate the rodent normally, it's the one true adventure game controller
05:34:45 <rep> Philippa_ oh, you mean MOVING
05:34:50 <nnunley> It's amusing that FF7 did have camera control for part of the game.
05:34:51 <tuomov> I don't like having to "drive" the character  from the keyboard or another similar controller
05:35:04 <rep> Philippa_ the first resident evil to have moving backgrounds was resident evil remake
05:35:15 <Philippa_> ah, the gamecube version?
05:35:18 <Philippa_> I should rent that sometime
05:35:57 <rep> it's great :)
05:36:07 * ski played Turrican I yesteryesterday
05:36:08 <rep> resident evil 4 is nice too
05:36:11 <rep> but different
05:36:40 <Philippa_> ski: sweet
05:37:22 <tuomov> I should try to find the time to learn Go better..
05:37:31 <ski> Philippa_ : been introducing my 6yo nephew to the good old classics :)
05:38:59 <xerox> tuomov: you're pretty good at it IIRC
05:39:42 <Philippa_> ski: I still can't get my boyfriend to learn a 2d fighter properly :-(
05:40:26 <ski> what kind ? platform ? kick&jump ?
05:40:38 <xerox> haha, jump&bump is great.
05:40:42 <Philippa_> the term usually refers to SF2-likes now
05:40:55 <Philippa_> though the double dragon-style ones're good for a laugh sometimes
05:41:02 <xerox> apt-get install jumpnbump
05:43:04 <xerox> Anybody wants to play a game at jumpnbump?  It supports network play, yay :-D
05:48:31 * Lemmih installs jumpnbump.
05:49:38 <cbus> hehe ;)
05:50:38 <xerox> Yeah!
05:50:45 <xerox> Tell me when you're ready, hehe :_D
05:52:10 <Lemmih> Ready!
05:52:47 <xerox> My ip, port 26411 !
05:54:40 <Lemmih> hm
05:55:12 <xerox> heh, I saw you moving in some strange (and repetitive) way, then I killed you, and you disappeared after some same moving
05:55:30 <xerox> I reopened it
05:55:50 <Lemmih> I can't move...
05:55:52 <xerox> Hmm
05:55:54 <xerox> Right :(
05:56:05 <xerox> I was a bit lagged, I freed the bandwidth now
05:56:17 <xerox> Closed & reopened
05:56:50 <xerox> You do have to use a d w keys I think
05:56:54 <Lemmih> My rabit is still stoned.
05:57:24 <xerox> Mumble.
05:57:26 <Lemmih> *rabbit
05:57:45 <ski> wabid wabbits
05:57:47 <xerox> I'll try to be the rabbit 1 and you will use 0 I think, with direction keys <- ^ ->
05:58:21 <xerox> Opened
05:58:57 <xerox> Still can't move?
05:58:58 <Lemmih> I was able to move a bit.
05:59:16 <xerox> I find that I still have to use the direction keys, good...
05:59:24 <xerox> Lemmih: we could try swap server/client?
05:59:42 <Lemmih> I'm behind a router /-:
05:59:55 <xerox> :-|
06:02:27 <Lemmih> Hah. The -fireworks option is hilarious.
06:02:45 <xerox> haha yea :-)
06:02:54 <xerox> Anybody else could try network play?
06:04:09 <Itkovian> nope
06:17:57 <rafl_> Hello guys.
06:18:07 <rafl_> Is there a way to make ghc use ccache?
06:20:10 <cjb> rafl_: I am boggling at the confusion that could cause such a question, but also interested in case I'm missing something.  :)
06:21:22 <rafl_> cjb: ghc executes a c-compiler some times, doesn't it? This can be cached I guess.
06:23:14 <xerox> http://mu.neuralnoise.com/bump-060905-1510.png
06:23:23 <xerox> (My brother won, grumble!)
06:28:35 <Igloo> rafl_: There's a flag like -progC that allows you to tell it what C compiler to use; will that do what you want?
06:28:54 <rafl_> Igloo: Yes :-)
06:30:30 <rafl_> Igloo: Bit I can't find that option in the manpage.
06:31:27 <Lemmih> -pgmc cmd
06:31:28 <Igloo> It's -pgmc
06:53:42 <rafl_> Hm, using ccache doesn't seem to work: not a C/C++ file                     316
06:53:42 <rafl_> unsupported compiler option          276
06:53:42 <rafl_> no input file                        219
07:00:41 <Lemmih> Hi CosmicRay.
07:00:47 <Lemmih> How's HWN?
07:02:49 <CosmicRay> working on it now
07:07:42 <boegel> CosmicRay: I'm a HWN collector, I have 'em all !!! ;)
07:14:33 * xerox yawns
07:17:01 * boegel yawns along with xerox 
07:18:30 <Igloo> rafl_: Some of the calls will just be for linking, and the C filenames will have a .hc extension
07:18:41 <Igloo> rafl_: You can use -v to see what's going on
07:19:47 <rafl_> Igloo: Well, I just moved compiling to another machine which also is OK. :-)
07:20:09 <CosmicRay> boegel: hehe ;-)
07:28:32 <basti_> hmm what could serve as a good example for why STM makes sense? I was looking at Lock-free programming, but that seems a little far-fetched, and STM does not have directly to do with it?
07:29:31 <greenrd> Well, isn't STM "lock-free" from the user's point of view?
07:29:51 <greenrd> Well, at least, the programmer does not have to create or manage locks.
07:30:13 <basti_> yes that was the point
07:30:32 <basti_> but actually, there are ways to program data-structures like lists without locks, but still parallel
07:31:02 <basti_> one of the possible ways to do so is hiding the technical details in STM, but LL/SC works as well
07:31:42 <basti_> you'd just need to use a special library that is similar to a synchronisation library...
07:35:20 <shapr> basti_: STM is *compositionally* lock-free.
07:36:02 <basti_> as in, everything you write with STM, that has no locks in every part, is lock free?
07:37:05 <shapr> For a given chunk of code, if you could float the thread properties up to the type, then you could guarantee all of your code would never deadlock, never have a race condition, etc.
07:37:32 <basti_> oh.
07:37:40 <basti_> thats more than i thought it could do.
07:38:03 <shapr> Race conditions and deadlock are so hard to debug (in Java for example) because you can't just compose two pieces of code and guarantee that they're as safe together as they were apart.
07:38:31 <basti_> i knew that yes. but i didnt see how STM rules these out?
07:38:49 * basti_ opens that paper again
07:39:21 <boegel> CosmicRay: no really, I'm collecting them
07:39:25 <basti_> hmmm
07:39:47 <CosmicRay> boegel: you could also just periodically pull from http://darcs.complete.org/hwn.  the back issues are in archives/
07:39:54 <xerox> boegel: there's a darcs repo of them  :-)
07:40:01 <boegel> CosmicRay: that's not exiting :p
07:40:12 <boegel> collecting them is !!! ;)
07:40:17 <CosmicRay> hehe
07:40:34 <basti_> shapr: you can not build a lock in STM?
07:41:07 <CosmicRay> are you printing, then laminating them, and storing them in a temperature and humidity-controlled vault? ;-)
07:44:19 <CosmicRay> on acid-free paper, of course.
07:46:16 <boegel> CosmicRay: yeah, sure I am
07:53:52 <basti_> so actually, yes, STM can force lock-freedom
07:54:16 <basti_> (via encouraging certain programmer behaviour)
07:54:26 <basti_> but, does it guarantee?
07:55:59 <CosmicRay> beta of today's HWN at http://darcs.complete.org/hwn/prep.html ;-)
08:08:17 <kosmikus> CosmicRay: the DarcsCorner entry sounds a bit strange ...
08:08:49 * earthy grinz
08:10:47 * shapr grumbles at Telia
09:05:18 <beelsebob_> mornin all
09:05:24 <shapr> yow!
09:07:23 <beelsebob_> woy!
09:07:32 * beelsebob_ found a juggling society :)
09:07:38 <shapr> neat!
09:07:58 * beelsebob_ is going tonight
09:08:15 <CosmicRay> hey shapr
09:08:38 <CosmicRay> thanks kosmikus
09:10:08 <shapr> hiya CosmicRay
09:12:05 <shapr> CosmicRay: Hey, what do you think about a Python parser designed for code auditing?
09:12:30 <CosmicRay> hmm.  seems it would be hard to do automated auditing of Python code, perhaps
09:12:48 <CosmicRay> I'd be interested in a Haskell parser that shows inferred types ;-)
09:12:56 <shapr> That's what I'm talking about.
09:13:10 <CosmicRay> a Python parser that shows inferred types?
09:13:13 <shapr> Yup
09:13:19 <CosmicRay> ah.  interesting indeed.
09:13:31 <CosmicRay> sort of a pylint, eh?
09:13:39 <beelsebob_> hmm, not where's an idea for a Haskell IDE... on the fly type checking, and allow you to see what type it's infered for any expression
09:13:48 <shapr> Starkiller's type system is interesting. But I want this mostly for my own use. As in, I hate Plone with a passion, and my only option is to fix it.
09:13:56 <CosmicRay> heh
09:14:29 <beelsebob_> ... and in fact, highlight all areas where the two do not match
09:15:41 <shapr> @google type error slicing demo
09:16:05 * lispy has been getting excited about ocaml lately
09:16:17 <CosmicRay> lispy: don't.  I am an ocaml refugee.
09:16:29 <CosmicRay> that is, I used ocaml, and switched to Haskell because Haskell provided everything I wished ocaml did.
09:16:51 <lispy> CosmicRay: i should have qualified that.  I see ocaml as a high performance alternative to haskell
09:17:16 <lispy> so when haskell just doesn't cut it, rewrite parts in ocaml instead of C
09:17:33 <shapr> Hm, that's a neat idea.
09:17:37 <CosmicRay> I guess I've never encountered a situation where Haskell just doesn't cut it. ;-)
09:17:48 <CosmicRay> that said, it shouldn't be to terribly hard to make a binding to ocaml
09:18:00 <CosmicRay> if a generic Python binding is possible, then surely ocaml is also
09:18:13 <CosmicRay> though of course there you have all sorts of complexity due to native code vs. bytecode vs. interpreted code
09:18:28 <lispy> CosmicRay: i was playing with opengl and found the lack of good, fast state mutation was killing the natural (and efficient) way of writing interactive graphics
09:18:33 --- topic: set to '["logs: http://meme.b9.com/cview.html?channel=haskell&date=today","http://www.haskell.org/learning.html","http://www.haskell.org/tmrwiki/IssueFour","We put the Funk in Funktion","http://sequence.complete.org/hwn/20050906","see also #haskell.se #darcs"]' by CosmicRay
09:18:50 * Lemmih hands a FastMutInt to lispy.
09:19:10 <Igloo> lispy: I suspect the easier way will be just to write better Haskell code
09:19:16 <CosmicRay> even something like ioref didn't cut it?
09:19:38 <lispy> CosmicRay: not really, it was much slower than the C version (noticibly so)
09:20:17 <lispy> i should probably get some numbers to back me up
09:20:18 * CosmicRay posts HWN on time this week.
09:20:24 <shapr> lispy: Did you profile it?
09:20:49 <Igloo> If you put a very simple example somewhere with numbers I might have a look some time
09:21:13 <lispy> shapr: no, but given the way the examples grew i know roughly what code was the slow down
09:21:32 <shapr> Well, profile it :-)
09:21:38 <lispy> Igloo: i might have to take you up on that
09:22:11 <lispy> shapr: actually now that i think about it, i did profile at least one of the programs but the profiler was useless
09:22:22 <CosmicRay> you know, it would be good to write up a doc on proper coding practices for fast & memory-eficient Haskell programs
09:22:26 <CosmicRay> and then give it to David Roundy
09:22:27 <lispy> shapr: it didn't give me any info about which parts were slow
09:22:52 <shapr> hm, weird.
09:23:08 <shapr> CosmicRay: We could just interview JaffaCake and Igloo.
09:23:18 <lispy> shapr: and dons too
09:23:23 <shapr> yeah, good point.
09:23:31 <CosmicRay> yes.  easy to read examples would also be excellent.
09:23:36 <CosmicRay> of what to do, and what not to do.
09:23:37 <Lemmih> Neat example of pretty Haskell code which is faster than the obvious C counterpart: http://www.haskell.org/pipermail/glasgow-haskell-users/2005-june/008574.html
09:23:55 <CosmicRay> personally I seem to just get it right about 90% of the time, but the remaining 10% is highly mystifying.
09:24:08 <Lemmih> (For Int's, that is)
09:24:15 <CosmicRay> Lemmih: that URL 404'd
09:24:35 <lispy> yeah, same here
09:24:41 <Igloo> Experience is the best teacher, IMO
09:25:18 <Lemmih> http://www.haskell.org/pipermail/glasgow-haskell-users/2005-June/008574.html
09:25:23 <CosmicRay> Igloo: problem is, I don't really understand *why* certain code is slow or a memory hog.  Usually my solution is "put seq at random places until it works"
09:26:00 <Igloo> You just have to think like a lazy evaluator. Looking at the infered strictness info in -ddump-simpl can help, too
09:27:02 <Igloo> And every time you feel like putting a seq somewhere without understanding why, slap yourself with a large fish
09:27:06 <shapr> Yeah, laziness is foreign to the existing programmer culture.
09:27:11 <shapr> But we're changing that!
09:27:17 <cjb> What does the seqLength function do, please?
09:27:39 <lispy> @index seqLength
09:28:03 * Igloo would guess force the length, and hence structure, of a list to be evaluated
09:28:17 <Lemmih> cjb: Lots of numeric operations.
09:29:07 <lispy> i was looking at gcc specific deritives for C, and they added one for declaring a function as pure
09:30:00 <lispy> i thought that was sort of saying that FP had made an impact on a C compiler :)
09:30:45 <lispy> i guess if a function is pure they do things like common subexpression elimination
09:32:41 <shapr> CosmicRay: Hey, what about the parser module for Python. The easy approach might be to use your Python binding to slurp the ASTs out of Python for static analysis.
09:32:56 <CosmicRay> ooo, evil ;-)
09:33:18 <CosmicRay> one trick about python is that objects can change as you go
09:33:24 <CosmicRay> though that is probably not all that common
09:33:36 <shapr> It's common in Zope/Plone.
09:33:47 <CosmicRay> eww.
09:33:54 <lispy> CosmicRay: sbcl can do static analysis of common lisp
09:33:57 <Igloo> Lemmih: Why is that Haskell faster than the obvious C?
09:33:57 <CosmicRay> you will have quite a challenge then
09:34:19 <lispy> Igloo: did the url work for you?
09:34:26 <Igloo> The second one, yeah
09:34:40 <Igloo> But I don't see anything in it that should trip C up but not Haskell
09:34:42 <lispy> hmm...i didn't see a second one
09:34:50 <Lemmih> Igloo: Perhaps 'obvious' was the wrong word...
09:35:02 <lispy> oh, there it is
09:35:10 <Igloo> Do you mean the recursive C program?
09:35:44 <SyntaxNinja> y0
09:36:44 <Lemmih> Igloo: Have you looked at the GHC generated C code?
09:38:45 <Igloo> No
09:38:57 <xerox> heh.  http://lkml.org/lkml/2005/8/20/95
09:39:11 <shapr> lispy: changing objects at runtime is roughly like macros, very hard to do static analysis.
09:40:01 <xerox> What exactly _is_ static analysis?
09:40:17 <Lemmih> Igloo: It's tighter than the non-recursive C code I wrote.
09:41:17 <lispy> shapr: yes, i realize it makes it difficult.  I just meant, there is hope!
09:41:30 <lispy> xerox: analysis that happens not at run time
09:42:19 <lispy> xerox: specifically, at compile time, but in some languaes the difference between run-time and compile time is not obvious
09:45:20 <lispy> xerox: for example, sbcl and ghci seem interpreted but they do some amount of compilation as you type stuff in
09:52:50 <SyntaxNinja> how do I make Philippa_'s dos-oriented file look right in emacs?
09:53:07 <shapr> {- -*- mode: haskell; coding: utf-8-dos -*-
09:54:17 <SyntaxNinja> ahhh
09:55:38 <wilx> Yo!
09:55:46 <wilx> What was the name of the colaborative editor?
09:55:49 <shapr> gobby
09:55:53 <wilx> Thanks.
09:56:27 <lispy> gobby doesn't like osx :(
09:56:36 <lispy> i want to try it, but no diec
09:56:38 <lispy> er diec
09:56:41 * lispy gives up
09:56:57 <lispy> obviously my keyboard wants me to type "diec" instead of "dice"
10:01:55 <xerox> lispy: (re static analysis) fair enough.
10:02:12 <xerox> lispy: (re gobby) poetix is writing the Haskell bindings to libobby!
10:02:38 <lispy> xerox: Long Live Yi!
10:02:43 <shapr> w00 Yi!
10:02:52 <shapr> yi-haa!
10:03:45 <xerox> Once they're completed, a Yi plugin is not far from dreams..
10:04:32 <lispy> xerox: although to be fair, i bet Yi needs a lot of UI work to really do colabrative editing
10:05:17 <shapr> Not really.
10:05:29 <xerox> Why?
10:05:36 <shapr> Yi is pretty simple.
10:05:53 <cjb> What is Yi?
10:06:17 <xerox> You have to find a way to provide (host,port,password) and you're pretty done.
10:06:27 <xerox> It does support multiple buffers right?
10:07:11 <shapr> Yes it does.
10:08:47 <shapr> @where yi
10:08:58 <lispy> lambdabot: what's up?
10:09:04 <lispy> @vixen hi!
10:09:14 <shapr> cjb: http://www.cse.unsw.edu.au/~dons/yi.html
10:09:57 <xerox> Yes, Emacs crashes, grmbl.
10:10:18 <lispy> xerox: heh, yeah and it's slow to start up
10:10:29 <lispy> so you're double penalized!
10:11:02 <shapr> xemacs doesn't crash.
10:11:21 <xerox> I think it's because I'm just using emacs-snapshot instead of compiling my own.  I never had these problems with my own compiled version, pfft.
10:11:37 * xerox felt lazy
10:12:35 <xerox> But laziness improves composability!
10:13:31 <SyntaxNinja> eamcs doesn't crash :)
10:13:33 <SyntaxNinja> emacs I mean
10:13:56 <xerox> Sob it does here when I float with the mouse on the modeline.  I think it's compiled against some crap X11 lib.
10:15:38 <lispy> xerox: "emacs -nw" should fix that
10:15:51 <xerox> ...and give me 4 colors in Emacs.
10:16:02 <cjb> xerox: I don't think that's true anymore.
10:16:19 <xerox> I did try for some time using it inside gnome-terminal, but it's a pain.
10:16:34 <lispy> xerox: i think you get 16 colours now
10:16:43 * cjb uses xemacs -nw.  All the better to attach over ssh with.
10:17:19 <xerox> BRB
11:00:41 * shapr boings
11:01:09 * lispy bloats
11:01:48 * basti_ fades
11:07:05 <xerox> psst.
11:07:21 <shapr> what?
11:07:51 <basti_> "wanna buy an 'E'"?
11:08:07 <shapr> I'll guess "SHOSHONE" for the prize!
11:08:11 <shapr> @yow !
11:09:23 * xerox meeps
11:09:31 * shapr moops
11:09:38 <xerox> You are SILENT today!
11:09:43 <shapr> Am not.
11:09:45 <shapr> I am quite loud.
11:09:52 <shapr> Mostly because I'm singing though.
11:10:00 <xerox> I can't hear you in all this silet!
11:10:02 <xerox> *silent
11:10:21 <CosmicRay> shapr: if you sing like you speak, my metronome probably can't go fast enough to be of any use for you ;-)
11:10:27 <shapr> hehe
11:10:33 <shapr> I just sing like the singer I'm listening to.
11:10:54 <shapr> I can speak rather speedily though.
11:11:03 <basti_> shapr: I'm now percieving that everything inside the STM monad can be made lock free. how is that forced though?
11:11:25 <shapr> basti_: forced?
11:11:30 <shapr> Ich verstehe nicht.
11:11:41 <basti_> i mean, how does STM stop you from building your own lock?
11:12:25 <shapr> iirc, it's because STM doesn't mix with IO except by some specific liftSTM function that does it intelligently.
11:12:43 <shapr> I think that Control.Concurrent is all IO-based, meaning STM is safe.
11:12:58 <basti_> as i see it, one could (if they really wanted) recurse inside a STM function
11:12:58 <shapr> Unless you use unsafePerformIO, which screws everything. (saw that on a mailing list recently)
11:13:02 <basti_> in some strange way
11:13:06 <basti_> lol yes
11:13:14 <shapr> Yeah, you can stack STM computations, but that's what they're for!
11:13:30 <basti_> i mean... stupidly recurse and then maybe lock?
11:13:45 <shapr> You mean an infinite loop or something?
11:14:06 <basti_> well an infinite loop would be an infinite loop
11:14:12 <shapr> If you call other STM code from inside some STM code, it just works. That's the whole coolness of compositional locking.
11:14:22 <basti_> and not a lock, is it?
11:14:30 <shapr> Er, not a lock, right.
11:14:33 <basti_> ;)
11:14:49 <basti_> hmm right, then you can't, in a way
11:14:57 <shapr> Compositionality is what makes programming and software engineering worthwhile.
11:15:03 <basti_> yes
11:15:11 <shapr> STM makes that work for threading/locking/race conditions.
11:15:13 <basti_> i just didnt realize why that makes STM lockfree
11:15:31 <basti_> it doesnt guarantee wait-freedom no
11:15:37 <shapr> Software Transactional Memory came from outside the Haskell world, check the refs.
11:15:42 <shapr> No, you may have to wait.
11:15:59 <basti_> yes i checked a lot
11:16:14 * SamB thinks he could use a GHC compiled by NHC
11:16:14 <shapr> Check out the SMP GHC paper, it talks about parallel thunk reduction. It's equally interesting.
11:16:28 <basti_> hmmm
11:16:30 <basti_> ok
11:17:06 <shapr> Anyway, STM optimistically does stuff, and only checks for a lock upon 'committing the transaction'.
11:17:09 <lispy> SamB: why NHC?
11:17:41 <SamB> lispy: so it would use less memory and thus swap less!
11:17:59 <SamB> of course, then it probably wouldn't be compatible with GHCi...
11:18:04 <basti_> yes it uses a little pointer trick to pretend it is transactional
11:18:38 <SamB> basti_: how is that different from actually being transactional?
11:18:54 <basti_> SamB: its not at all
11:19:09 <basti_> its just not "transactional memory". just as java code is no "assembler"
11:19:52 <xerox> You should see a video, but I don't remember where I got that from, mumble.
11:20:10 <gour> shapr: bok
11:20:17 <shapr> gour: zdravo
11:20:29 <gour> shapr: you learn fast :-)
11:20:35 <shapr> Yes :-)
11:20:47 <shapr> For most new things I only need to hear/read/see it once.
11:20:56 <gour> shapr: have you maybe managed to see those exercises from 13th ch.
11:21:08 <shapr> No, I got distracted and didn't get home at all, sorry.
11:21:23 <gour> ok, i'll wait then...
11:21:40 <gour> it's a kind of showstopper :-)
11:22:00 <gour> in the meantime, can i ask you another one?
11:22:06 <shapr> Sure, ask anything.
11:22:12 <shapr> No promises I can answer though.
11:22:17 <xerox> AH-HA!
11:22:19 <xerox> http://download.microsoft.com/download/3/3/0/330bddc3-d61e-46f2-b0eb-1ff358a80027/new_winfs_returns_2005.wmv
11:22:30 <gour> can u tell me something about lambdabot
11:22:38 <gour> i'm pretty ignorant in regards
11:22:39 <shapr> What would you like to know about lambdabot?
11:22:42 <shapr> @version
11:22:48 * shapr pokes lambdabot 
11:23:02 <gour> what it can be useful for me?
11:23:15 <basti_> it can free your programs from points
11:23:21 <xerox> It's my pairprogramming buddie from long time!
11:23:29 <shapr> lambdabot has a bunch of useful plugins. The most immediately useful are @index, @hoogle, and @type
11:23:32 <xerox> @index unsafePerformIO
11:23:42 <shapr> Those commands can find a function by name, by type, or give you the type of some code.
11:23:47 <xerox> @docs System.IO.Unsafe
11:23:54 <lispy> @hoogle [a] -> a
11:23:54 <shapr> Right, the @docs command too.
11:24:00 <shapr> Sadly, lambdabot seems to be hibernating for the moment.
11:24:11 <gour> what do i need to build the stuff 1st?
11:24:11 * lispy pokes lambdabot with a spoon
11:24:36 * basti_ pokes lambdabot with a trout
11:24:37 <gour> wiki pages are not complete, at least for a newbie
11:24:38 * xerox waits for his pizza to come...
11:24:50 * shapr pokes lambdabot with a HERRING!
11:25:03 * lispy hides outside the door hoping to intercept the pizza delivery person
11:25:03 <shapr> gour: What trouble are you having?
11:25:14 <gour> with lambdabot?
11:25:22 <xerox> Fooled!  We are cooking ours pizzas!
11:25:34 <lispy> do'h!
11:25:36 <gour> shapr: i don't have it yet
11:25:37 <shapr> Yes, what trouble are you having building lambdabot?
11:25:57 <gour> shapr: afaik, it has some reqs
11:26:27 <gour> i'm on gentoo and would like not to build too much out of portage :-)
11:26:45 <gour> however, it is not (yet) available
11:26:57 <shapr> Do you have darcs and Cabal installed?
11:27:33 <gour> yes, latest darcs & cabal-1.1.2_pre20050816
11:28:40 <gour> and i pulled also the latest patches from lambdabot repo
11:28:46 <gour> didn'g go further
11:33:06 <shapr> Have you tried to build it?
11:33:09 <Muad_Dibber> gentoo rocks.
11:33:10 <Muad_Dibber> err
11:33:14 * Muad_Dibber hushesh
11:33:18 <shapr> gour: autoreconf && ./configure && make
11:34:14 * SamB wonders why MS office uses xml namespaces in non-X HTML
11:34:23 <gour> shapr: Rebuilding dependencies ... ghc-6.4.1.20050801: unknown package:plugins
11:34:38 <gour> shapr: rm: cannot remove `depend': No such file or directory
11:34:41 <shapr> Ah, you need to darcs get hs-plugins and install it.
11:34:50 <shapr> Which will require haskell-src-exts...
11:34:54 <shapr> You might want to try cabal-get.
11:35:08 * SamB stops looking at the source and just pretends he didn't know the TADS 3 documentation was done in Word
11:36:14 * gour emerging stuff
11:39:04 <SamB> @index finalizer
11:40:29 * gour compiling lambdabot
11:42:15 <Igloo> CosmicRay: Do you play an instrument, then?
11:42:16 <gour> shapr: lambdabot is compiled, what's next
11:42:41 <shapr> Edit the Config.hs to change the name, bokbot maybe? Then start it up.
11:42:49 <gour> shapr: running lambdabot gives:
11:43:00 <gour> shapr: lambdabot: magic number mismatch: old/corrupt interface file?
11:43:11 <shapr> Sounds like you need to remove old .hi files.
11:43:21 <gour> shapr: i remember having such problems when compiling yi
11:43:27 <shapr> Strange.
11:43:44 <gour> but from where could i have those old .hi ?
11:43:56 <shapr> I have no idea, doesn't make sense.
11:44:48 <gour> does it require newest hs-plugins, i emerged 0.9.10
11:45:03 <shapr> I use hs-plugins from dons' darcs repo.
11:52:42 <xerox> Did you see the winfs video?
11:52:50 * shapr is hacking on Flippi
11:52:52 <xerox> It's strongly typed! heh.
11:55:14 <lispy> is strongly typed the same as bold type face? ;)
11:55:38 <lispy> \strong{is this valid \LaTeX ?}
11:55:51 <xerox> The three guys showing it off are pretty excited :-)
11:56:24 <kosmikus> shapr, gour: works for me, with 0.9.10
11:56:47 <shapr> hiya kosmikus, ltns
11:56:55 <xerox> kosmikus: :-O  Which lambdabot sources are you using?
11:57:03 <kosmikus> shapr: if you ignore me :)
11:57:24 <kosmikus> lispy: \strong isn't defined in LaTeX by default
11:57:33 <gour> i am pulling anew, problems with that 'set-scripts-executable' darcs stuff :-(
11:57:40 <lispy> kosmikus: ah
11:57:48 <lispy> kosmikus: i never can remember
11:57:55 <xerox> \bfsomething or \somethingbf I think
11:57:59 <kosmikus> xerox: ah, that might be the problem, I think I was using the 3.0 tag
11:58:02 <gour> kosmikus: is there working ebuild for hs-plugins
11:58:15 <lispy> \emph{maybe this is strongly typed}
11:58:27 <xerox> lispy: that's probably italics
11:58:39 <kosmikus> gour: the overlay ebuild should work
11:58:47 <kosmikus> lispy: \textbf{this is \dots}
11:59:39 <gour> kosmikus: i tried it, but got: lambdabot: magic number mismatch: old/corrupt interface file?
11:59:42 <xerox> Ah-ha! :-D
12:00:13 <kosmikus> xerox: no, I was wrong, I *was* using the latest sources
12:00:16 * lispy has been making a really bad joke about "strong" in "strongly typed"
12:00:27 <kosmikus> gour: as I said, it works for me
12:00:48 <gour> kosmikus: with the overlay ebuild?
12:01:56 <kosmikus> yeah, sure
12:02:18 <gour> well, i tried with the above error,
12:02:32 <kosmikus> not sure if it is hs-plugins fault
12:02:42 <shapr> w00
12:02:44 <shapr> ksbot: @help
12:02:44 <ksbot>  @help <command> - ask for help for <command>
12:02:45 <kosmikus> see? :)
12:03:00 <gour> otoh, that mkrelease.sh script does not put +x to all the scripts and then ebuild fails :-(
12:03:13 <kosmikus> which ebuild?
12:03:39 <gour> how do u handle that darcs stupidity of not preserving +x attribute
12:03:57 <shapr> there's a new executable scripts switch.
12:04:04 <gour> ebuild from the gentoo-haskell overlay with the local source
12:04:08 <lispy> gour: there is --set-script-executable but in the end you need just use chmod
12:04:36 <lispy> --set-scripts... only works with darcs get
12:04:41 <kosmikus> 1.0.4pre4 has this as a default, I think
12:04:44 <gour> lispy: i pulled from the repo with it, but still no luck
12:05:02 <lispy> kosmikus: i hope so
12:05:02 <kosmikus> at least I didn't have to chmod anything recently ...
12:05:08 <gour> none of the config. scripts are set
12:06:01 <gour> in one autoconf project i had to wrote a script to change attribute before running dist, i.e. local dist-hook
12:06:05 <lispy> gour: there was some talk of having a custom script that can run after the get (defined by the repo), but...that was hard to implement and was never finished
12:06:14 <gour> but would be nice to have it automagically
12:06:20 <kosmikus> again, works for me
12:06:31 <gour> kosmikus: what r u doing?
12:06:35 <shapr> gour: You can probably turn it on in your prefs.
12:06:48 <gour> shapr: i tried with that too
12:07:34 <gour> kosmikus: in my gentoo-haskell overlay, hs-build is dated Aug 16th, is it the last one?
12:09:12 <kosmikus> hs-plugins? yes, that's the latest that's in there, and it's the one I'm currently using
12:11:55 <gour> and what about haskell-src-exts & harp, ie. dates of ebuild?
12:14:01 <kosmikus> I'm just using the current versions from the overlay: src-exts-0.2, Aug 15; harp-0.2, Aug 4
12:15:34 <gour> on my system harp - Aug 4th & haskell-src-exts - Aug 16th
12:15:47 <gour> now I re-emerged harp and saw:
12:16:13 <gour> and cannot find libHSharp-0.2.a on library path (ignoring)
12:16:20 <gour> is is harmless?
12:16:39 <kosmikus> yes
12:17:06 * gour re-emerging haskell-src-exts
12:19:30 * gour re-emerging done
12:19:39 <gour> now i'll try hs-plugins
12:20:09 * gour fetching sources
12:21:10 * gour emerging hs-plugins
12:22:38 * gour emerging is finished
12:23:18 * gour  makes (lambdabot)
12:23:41 * xerox runs around in circle
12:24:06 <gour> xerox: why not in a triangle?
12:24:07 * basti_ yanks at a line under xerox' feet
12:24:40 * gour still makes (lambdabot)
12:25:15 * gour wonders why there is no lambdabot ebuild ???
12:25:31 * gour finished making (lambdabot)
12:25:32 <xerox> Which default values would you put for a bot?
12:25:37 <gour> what now?
12:25:50 <xerox> Did you configure it in the Config.hs file?
12:25:58 <gour> not
12:26:04 <xerox> Do it!  It's rather simple.
12:26:20 <xerox> ...then 'make && ./lambdabot' !
12:26:31 <gour> what should i put there?
12:26:46 <xerox> Check the "defaults" and change the obvious ones
12:27:36 <gour> everything looks good :-)
12:28:43 <xerox> e.g. you can't name it "lambdabot" because there is another one.
12:28:56 <xerox> ..and maybe you would like to add yourself as admin :-)
12:29:22 <gour> what do you put instead of 'lambdabot' ?
12:29:45 <xerox> The nick you like best for you new pet!
12:29:55 <xerox> *your
12:30:02 <gour> ok
12:31:11 * gour rebuilding (lambdabot)
12:32:11 <gour> after ./lambdabot i get (again):
12:32:14 <gour> lambdabot: magic number mismatch: old/corrupt interface file?
12:32:28 <gour> the same was with my attempt to build yi
12:32:32 <gour> any idea?
12:33:18 <xerox> Nope :-(
12:33:37 <gour> anyone?
12:34:58 <gour> anyway, what is supposed to happen after firing lambdabot?
12:35:17 <kosmikus> I get:
12:35:18 <kosmikus> Loading plugins ........................... done.
12:35:18 <kosmikus> Running reader loop...
12:35:38 <gour> no luck here...
12:35:47 <gour> why don't you provide ebuild?
12:36:27 <gour> so, the problem is, i believe, with hs-plugins?
12:36:28 <kosmikus> because I just compiled it for the first time since 6 months or so
12:36:49 <gour> i'm just joking, it won't help atm :-)
12:37:09 <kosmikus> I have no idea where the problem is
12:37:17 <Muad_Dibber> evening all
12:37:22 <kosmikus> has anyone got it running on amd64?
12:37:41 <Muad_Dibber> lambdabot? not yet
12:37:45 <Muad_Dibber> but have tried only briefly
12:37:52 <cm> hallo
12:38:08 <Muad_Dibber> hi
12:39:07 <kosmikus> re the non-existence of an ebuild for lambdabot: also, it's another package that isn't released properly as a tarball
12:39:32 <gour> ah, i understand
12:40:00 <kosmikus> seems to be a real disadvantage of darcs ...
12:40:02 <gour> but, the problem here is hs-plugins
12:40:12 <gour> how?
12:40:40 <Muad_Dibber> to be able to release your program properly you mean kosmikus?
12:40:40 <kosmikus> it makes people lazy, so they don't provide tarballs anymore
12:41:01 <gour> but what about darcs dist ?
12:47:18 <gour> good night folks
12:47:26 <gour> i had enough for today
12:47:47 <Muad_Dibber> gnight
12:48:37 <kosmikus> apparently, darcs dist isn't used that often
12:49:08 <Muad_Dibber> well
12:49:12 * Muad_Dibber knows nothing about it :P
12:49:28 <Muad_Dibber> never even used darcs really so i dont know whether darcs dist is usefull or not :P
12:51:38 <ulfdoz> Muad_Dibber: Haven't tested as well, but only met people praising it.
12:54:43 <goron> @seen Lemmih
12:54:45 <Itkovian> evening
12:54:45 <kosmikus> I don't think that anything's really wrong with darcs or darcs --dist, it's just that darcs makes it too easy to set up a repository that allows anonymous partial checkouts, so people think it's no longer necessary to release tarballs
12:55:06 <kosmikus> there's nothing that can really be done about it, except to point out that they still should ...
12:55:13 <Itkovian> kosmikus: can't that be a side-effect of tagging an entire darcs repos?
12:55:35 <kosmikus> what exactly?
12:55:53 <Itkovian> producing a tarball
12:56:22 <goron> kosmikus: What exactly is the problem with not releasing a tarball?
12:56:47 * Itkovian sweats
12:56:51 <Itkovian> pfft.
12:57:34 <kosmikus> I think the most significant disadvantage is that you can't properly compute checksums
12:58:38 <araujo> Hello hello here
12:58:44 <araujo> kosmikus, buddy what's up?
12:58:45 <goron> That is a trivial problem.
12:59:06 <kosmikus> araujo: hi there
12:59:09 <kosmikus> goron: how so?
12:59:10 <araujo> Kind of an academic question, Is functional programming more inclined to mathematics or algebra?
12:59:46 <goron> kosmikus: Associate every checkout with a checksum.
12:59:59 <cm> :)
13:00:04 <Itkovian> erm, algebra _is_ mathematics
13:01:05 <sieni> Is nuclear weapon design more inclined to physics or nuclear physics?
13:01:30 <kosmikus> goron: that'd need support from the darcs side, and it requires all users to trust the darcs checksum computation
13:01:40 <goron> @=
13:02:06 <araujo> Ok, i see what you mean now :-]
13:02:26 <goron> kosmikus: Yes, completely correct.
13:03:05 <Itkovian> kosmikus: otherwise you'd need to trust the website, or whatever where the tarball checksumj is stored, no?
13:03:14 <Itkovian> so it amounts to the same.
13:03:25 <araujo> Itkovian, i just wanted to know if it was more specific to algebra than to other mathematic field
13:03:32 <goron> Itkovian: indeed
13:03:34 <araujo> actually...
13:04:12 <Itkovian> araujo: well, I don't know if it's entirely suitable fo hardcore numerical stuff ...
13:07:02 <kosmikus> Itkovian: I think these are two independent things: trust in the checksum computation, trust in the integrity of the checksum
13:07:45 <Itkovian> kosmikus: yes, I realised that as soon as I hit the 'enter' ;-)
13:07:46 <goron> kosmikus: Don't you always do the checksum computation locally to verify stuff?
13:08:04 <Itkovian> goron: he means if the algorithm and its implementation can be trusted
13:08:17 <Itkovian> I think
13:08:36 <kosmikus> goron: that's how it's usually done, yes; download tarball, download checksum (from independent places, possibly), compute checksum locally, compare
13:08:55 <goron> Itkovian: You can trust whatever is on your local system(assuming correct and honest hardware).
13:09:27 <goron> kosmikus: And how do you propose it should work?
13:09:28 <Itkovian> goron: if you have looked at the source, maybe
13:09:28 <kosmikus> I'm also not saying that darcs is really at a disadvantage here, except for the fact that it's much less widely used than other approaches at the moment
13:09:46 <kosmikus> so, for instance, Gentoo as a distribution is not likely to accept it as a distribution method in the near future
13:10:05 <goron> kosmikus: Oh, this is all about gentoo! ;)
13:10:08 <kosmikus> which is why I'm interested in people making tarball releases, because otherwise I as a packager have much more work to do
13:10:35 <kosmikus> goron: mostly
13:11:21 <kosmikus> but I think it applies to other similar systems as well (bsd ports, even hackage)
13:12:50 <goron> kosmikus: What "attack" are you trying to avoid that's possible with current systems?
13:14:30 <kosmikus> let's start with non-malicious things: darcs could have a bug, resulting in incorrect checkouts -- I had this just a few weeks ago with the cabal repo
13:15:05 <kosmikus> this'll lead to bug reports that are incorrectly blamed on the wrong package, and might be hard to detect or reproduce
13:19:42 <goron> kosmikus: Two options: (darcs server maintainer should tag something as a release or something(I am not very familiar with Darcs) and then verify the checksum and whether it works. You could automate this, but then you would have to assume there are no network errors.
13:21:41 <goron> (the first option is your complaint about "releases", which you brought up in the start of the discussion.)
13:21:41 <kosmikus> goron: as I said, this would require checksum support in darcs first, and I'm not convinced that your approach amounts to less work than just to provide a tarball
13:23:02 <goron> kosmikus: I'd say that every software that is broken shouldn't be used. So, if Darcs isn't stable, it shouldn't be used.
13:24:07 <kosmikus> ah, this sounds a bit naive; darcs can very well be stable and still have bugs; all packages do ...
13:24:24 <kosmikus> also, the "darcs bug" example above was just one example, not the only one
13:24:31 <goron> kosmikus: It all depends on your definition of stable.
13:25:35 <goron> kosmikus: My definition of 100% stable is 100% correct w.r.t. specs. Where specs is "that behaviour that is desired"(since formal specs also contain bugs).
13:25:36 <kosmikus> goron: ok, then according to your definition, TeX is probably about the only stable program of reasonable size
13:25:46 <goron> kosmikus: Could be.
13:26:35 <goron> Bugs costs lots and lots of more money than just fixing them. (well, at least that's my experience).
13:26:46 <Muad_Dibber> nice theory. now the real life goron :)
13:26:54 <goron> Muad_Dibber: real life sucks.
13:27:09 <Muad_Dibber> lol
13:27:58 <goron> Muad_Dibber: Do you already have an idea about the Thesis you are going to do?
13:28:23 <Muad_Dibber> yes
13:28:38 <Muad_Dibber> its going to be about software composition and the likes
13:29:26 <Muad_Dibber> so no haskell for me
13:29:35 <goron> Stratego?
13:29:40 <Muad_Dibber> yup
13:30:05 <goron> I never would have thought that. ;)
13:30:45 <Muad_Dibber> oh but you're a smart boy ;)
13:30:53 <goron> I think "composing" and "software" are <insert you know who> favorite words.
13:31:00 <kosmikus> there's no reason why you couldn't do "software composition and the likes" in Haskell ;)
13:31:14 <goron> Says Haskell Uber Lord ;)
13:31:46 <goron> There's also no reason why you couldn't do it in Brainfuck.
13:31:50 <Muad_Dibber> kosmikus: well, maybe haskell is to good in composing so there are no projects in that thing :P
13:31:56 <goron> That would be a real challenge.
13:32:08 <kosmikus> Muad_Dibber: hehe :)
13:32:10 <Muad_Dibber> after the STC i will have a talk wiht <insert you know who>
13:32:19 <goron> STC?
13:32:23 <kosmikus> goron: good idea.
13:32:32 <Muad_Dibber> colloquiem
13:33:01 <goron> They claim that we have colloquia too.
13:33:08 <Muad_Dibber> who is we?
13:33:21 <kosmikus> has mr. visser turned into the dark lord since I've left? ;)
13:33:23 <goron> Applied Computing Science students.
13:33:39 <goron> kosmikus: You left?
13:33:41 <Muad_Dibber> eelco voldemord :P
13:34:03 <kosmikus> goron: depends on your viewpoint
13:34:13 <kosmikus> but I left .uu, yes
13:34:23 <Muad_Dibber> but he hasn't left #haskell :)
13:34:33 <goron> kosmikus: Where are you working now?
13:34:45 <kosmikus> .uni-bonn.de
13:35:08 <goron> kosmikus: You are a native .de?
13:37:07 <kosmikus> yes
13:37:13 <Muad_Dibber> he's got rid of us weird dutch speaking people :P
13:37:34 <kosmikus> not so weird anymore after 4.5 years ;)
13:38:07 <basti_> .nl -> .de or .be -> .de?
13:38:22 <kosmikus> former
13:39:49 <goron> kosmikus: And did you learn something in .nl, or was it a complete waste of time?
13:39:58 <basti_> thats sad
13:41:28 <kosmikus> goron: no, I learnt a lot, why do you ask?
13:45:40 <goron> kosmikus: I don't think the level of my education is that high.
13:46:20 <goron> I had the intention of actually learning something on university, but there are only a few courses that didn't present trivial facts.
13:47:58 <Muad_Dibber> goron: uni cant help your level is quite a bit higher than that of the average student :P
13:48:39 <kosmikus> goron: have we met, actually? I'm not good with names ...
13:49:27 <Muad_Dibber> goron wasn't in on generic programming me thinks
13:50:22 <goron> kosmikus: We haven't formally been introduced to each other, but I have seen you a couple of times.
13:52:38 * goron curses and ditches Opera, again.
13:52:57 <amiddelk> mmm .uu is dominating #haskell now?
13:52:58 <kosmikus> goron: ok, then
13:53:05 <Muad_Dibber> amiddelk: now you are here, yes :)
13:53:37 <Itkovian> wtf is .uu?
13:53:42 <goron> Evil place.
13:53:50 <Muad_Dibber> a non valid tld
13:53:59 <Itkovian> ic
13:54:13 <Muad_Dibber> mostly we use it as abreviation for university of utrecht though
13:54:22 <Itkovian> ok.
13:54:45 <Itkovian> well, we kicked you lot out 175 years ago ;-)
13:55:11 <amiddelk> they do functional programming in belgium?
13:55:26 <Itkovian> well, some do.
13:55:31 <Muad_Dibber> they actually do anything in belgium? </stupid remark>
13:55:43 <Itkovian> Muad_Dibber: mostly they squabble
13:55:48 <basti_> lol
13:56:20 <Itkovian> they could do a lot, but somehow,we've been bred to 'compromise', i.e. do jack shit
13:56:30 <goron> Itkovian: Don't feel safe just yet...
13:56:40 * Itkovian ducks
13:56:45 <Muad_Dibber> indeed goron
13:56:51 <Muad_Dibber> its just a matter of year
13:56:54 <Muad_Dibber> *time
13:56:58 <Itkovian> haha
13:57:08 <Muad_Dibber> and then france and we will be fighting because we both dont *want* to have belgium back
13:57:36 <Itkovian> well ... I'd rather not go back too. with your weird accent.
13:57:50 <Itkovian> nou
13:57:54 <Itkovian> gossie
13:57:57 <Itkovian> seg
13:58:05 <Muad_Dibber> actually vlaams is one of the most beautifull dialects or whatever you call it in dutch :P
13:58:18 <goron> Itkovian: We don't have an accent. You have.
13:58:24 <Itkovian> Muad_Dibber: we've got a few hundred forms of dialect
13:58:26 <goron> ;)
13:58:32 <Muad_Dibber> Itkovian: you know what i mean yeh
13:58:36 <Itkovian> goron: erm.no. ;-0
13:58:59 <Itkovian> basically, people from say a few cities further can't understand me
13:59:19 <Itkovian> although much has been lost due to AN being promoted
13:59:37 <Muad_Dibber> should promote haskell instead....
13:59:40 <goron> Muad_Dibber: Generic programming looks a lot like PT. (a lot of work)
13:59:51 <Muad_Dibber> goron: really wasnt :)
14:00:17 <amiddelk> no, because I made all the exercises (/hides)
14:00:32 <Muad_Dibber> amiddelk: so, you will make them for goron as well right? :)
14:00:35 <goron> Muad_Dibber: So what was so special about GP then?
14:00:50 <Muad_Dibber> goron: it was partly given by kosmikus :P
14:01:14 <goron> Muad_Dibber: Well, I think that's a good thing. What else?
14:01:48 <Muad_Dibber> goron: ask amiddelk, he did most of the work anyway ;) ;)
14:02:38 <goron> Muad_Dibber: You do the same when your girlfriend asks you for some relaxing activity?
14:03:09 <Itkovian> relaxing isn't work, eh
14:03:10 <Muad_Dibber> goron: keeping your girlfriend happy takes more time than following GP :P
14:03:16 * Itkovian reads the HWN
14:03:31 <goron> Haskell Weekly News?
14:03:35 <Muad_Dibber> anyway
14:03:39 <Muad_Dibber> time for me to find my bed
14:03:45 <Muad_Dibber> so early? yes. so early.
14:03:48 <Muad_Dibber> g'night all :)
14:03:55 <goron> night
14:29:24 <z0d> lisppaste2: url
14:29:24 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
14:30:43 <lisppaste2> z0d pasted "Is there a more elegant way?" at http://paste.lisp.org/display/11435
14:32:47 <Cale> z0d: I dunno, that's looks reasonably elegant to me
14:33:06 <z0d> Cale: thanks for looking
14:33:13 <Cale> At least, it's obvious what it's doing
14:34:09 <Cale> you can avoid computing odd a and just put otherwise, it's slightly more efficient, but doesn't look quite so pretty
14:41:33 <tennin> i'm a little confused about monads
14:43:02 <xerox> Don't worry, many are :-)
14:44:36 <xerox> tennin: do you have any questions?
14:45:04 <SyntaxNinja> just picture monads as tiny, silly, luminous, and devious sprites who fly around your haskell code carrying state from one piece of code to another.
14:45:12 <SyntaxNinja> I don't think that'll help, but it can't hurt.
14:45:15 <basti_> and thats supposed to help?
14:45:59 <Philippa> tennin: do you want someone to try dumping a complete explanation on you, or would you rather work from what you know?
14:47:07 <basti_> @remember SyntaxNinja  < SyntaxNinja> just picture monads as tiny, silly, luminous, and devious sprites who fly around your haskell code carrying state from one piece of code to another. | < SyntaxNinja> I don't think that'll help, but it can't hurt.
14:47:35 <tennin> they're like a generalization of function application, right?
14:47:48 <basti_> (is this syntax right?)
14:48:00 <SyntaxNinja> @quote SyntaxNinja
14:48:11 <SyntaxNinja> lambdabot: heloooooo
14:48:14 <basti_> is lambdabot right?
14:48:45 <tennin> i.e. IM x >>= f   =  f x , where IM is the identity monad
14:49:31 <tennin> but, unless I'm mistaken, you can't really use normal function application syntax except with the identity monad.
14:49:37 <basti_> hmm
14:49:51 <basti_> i always found it hard to explain what a monad is
14:50:23 <Philippa> tennin: that's deliberate
14:50:28 <basti_> its a functor, and a >>=, and a return
14:50:48 <tennin> that is, do {b <- f a; c <- g b; return c}  isn't the same as do {return g f a} ...?
14:50:49 <integral> you sort of say "do this, and when you're done call this function with your data for me"
14:50:50 <Philippa> >>= is essentially a means of intercepting "monadic" function application so the monad can do stuff when it happens
14:50:53 <basti_> >>= gives some notion of "sequence", and return is the connection to the "normal" world
14:52:13 <Philippa> tennin: do you mean return (g f a) rather than return g f a?
14:52:32 <Philippa> return g f a doesn't make any sense
14:52:39 <basti_> tennin: and, then, the types wouldn't check
14:52:52 <basti_> f would be  a -> m b
14:53:02 <tennin> sorry, right, return (g f a )
14:53:12 <basti_> and then you can't put a "m b" in g.
14:53:14 <basti_> I'd say
14:54:01 <Philippa> tennin: with return (g f a), g is an ordinary function rather than something in the monad
14:54:13 <tennin> right, i understand that
14:54:23 <tennin> well, i sort of understand it
14:54:38 <Philippa> monads need to be able to treat function application differently, so they need an explicit function for doing it
14:54:57 <Philippa> otherwise they can't do anything different from ordinary functions
14:55:11 <tennin> but is there some construct that lets the monadic function application be implicit?
14:55:20 <Philippa> do notation
14:55:55 <Philippa> do {a <- foo; return (f a)} => foo >>= (\a -> return (f a))
14:56:15 <tennin> but it's still not 100% implicit in do notation, since you have to apply one function at a time and "assign" to "variables"
14:56:18 <Philippa> (that's a slight simplification, there's some stuff in there for calling fail if there's a pattern-match failure, but you can ignore that 90% of the time)
14:56:32 <Philippa> close as you'll get
14:57:18 * TheHunter would prefer if that were the translation for variable-bindings in do-notation.
14:57:53 <TheHunter> because that would allow to get rid of that nasty fail in the Monad type class.
14:57:58 <tennin> it bugs me that you can't make it completely transparent
14:58:06 <tennin> oh well, guess i'll just have to make do
15:00:49 <kosmikus> tenning: with "f a b", you could not tell if "a" or "b" would happen first, but with "do { a' <- a; b' <- b; return (f a' b') }", you can
15:01:26 <tennin> like, why should the identity monad get special privileges?  it's just one particular special case of monadic binding right?  :-P
15:01:36 <tennin> yeah, i'm sure there are good reasons for it
15:02:36 <kosmikus> squares are just one special case of rectangles, and they also have special privileges
15:03:15 <kosmikus> it's completely normal if you move from an abstract concept like a monad to a more concrete concept like the identity monad, that the concrete instance will have properties that are beyond the ones of the abstract concept
15:03:24 <basti_> tennin: the good reason #1 is "uhm, basically that looks like, a sequential program"
15:03:36 <Cale> It would be nice to have some concept of commutative monads in Haskell
15:03:49 <Cale> together with syntax for them
15:03:59 <basti_> hm
15:04:04 <kosmikus> Cale: ever read Conor's draft on "idioms" ?
15:04:27 <Cale> kosmikus: I don't think so...
15:04:41 <Cale> though I do recall seeing something about idioms
15:05:15 <Cale> they were functors with return, right?
15:06:07 <Cale> hmm.. maybe not
15:06:29 <basti_> i remember that a bit
15:06:34 <kosmikus> class Idiom i where { k :: a -> i a; s :: i (a -> b) -> i a -> i b }
15:06:48 <basti_> ahh
15:07:34 <basti_> what can we do with that?
15:07:35 <Philippa> they're sort of "monads without higher-order computations", if I've understood correctly
15:07:56 <Philippa> no way to go from i (i a) -> i a
15:08:11 <mwc> Does this K and S business have anything to do with Unlambda?
15:08:21 <basti_> I'd not hope!
15:08:22 <basti_> ;)
15:10:28 <Cale> they're called idi and <%> in the paper I found
15:11:11 <kosmikus> I took the definition from Wadler's blog, that was the first I found it with Google
15:11:53 <basti_> i think theres a mention on that arrows page
15:12:01 <basti_> is that what you were referring to kosmikus
15:12:29 <kosmikus> he argues that if you take "i = (a ->)", you'll see the reason for the names ;)
15:13:03 <kosmikus> I didn't find the draft paper just now, but Cale seems to ...
15:13:18 <Cale> http://www.cs.nott.ac.uk/~ctm/notions/implementation/utilities/idioms/
15:15:24 <ulfdoz> bye
15:16:01 <kosmikus> Cale: yes, thanks
15:16:25 <kosmikus> ... and good night
15:23:29 <Heffalump> anyone know where to download haskell web server from?
15:23:55 <Heffalump> the tarball link on Marvin's webpage for hws-wp is broken, and I can't find hws itself anywhere either.
15:36:47 <Cale> haha, "As it happens, you can teach a Haskell compiler to understand this notation suitably rendered into ASCII. It's done by just the kind of type class Prolog you might expect from a crook like me. I am suitably ashamed of myself."
15:38:11 <basti_> lol
15:55:47 <mwc> "Everytime you use unsafePerformIO, God kills a puppy."
15:56:05 * mwc is really more of a cat person anyways
16:02:38 <SyntaxNinja> hm... this doesn't look like god's doing:
16:02:38 <SyntaxNinja> unsafePerformIO = getPuppy >>= kill >> unsafePerformIO'
16:10:21 <Heffalump> yeah, it's not type correct, for one thing.
16:10:29 <Heffalump> and I can't imagine that god makes type errors.
16:10:43 <Heffalump> (not type correct from the pov of the standard unsafePerformIO interface, that is)
16:11:18 <SyntaxNinja> you dare question?
16:12:55 * mwc wonders if he's started the first actual religious war on #haskell 
16:14:00 <Igloo> I was going to say that, but it could be (the >>= and >> being in the ((->) a) monad)
16:14:24 <Heffalump> bah :-)
16:14:54 <Heffalump> though I don't see how one can implement kill in a reader monad.
16:15:19 <Igloo> Can you define unsafePerformIO' in a reader monad then?
16:15:28 <Heffalump> ok, I'm confused.
16:15:43 <Heffalump> If you forkIO several threads and have them all read from a (different) handle
16:15:51 <Heffalump> how does the RTS avoid busy-waiting?
16:16:06 <Igloo> It's a select underneath, isn't it?
16:16:08 <Heffalump> or having one of the threads block the entire thing
16:16:19 <Heffalump> so the RTS re-multiplexes the reads into a single select?
16:16:33 <Igloo> Think so
16:18:29 <Heffalump> right, strace agrees.
16:18:32 <Heffalump> that's really nice.
17:29:52 <wagle> @seen shapr
17:30:02 <wagle> hmm
17:30:09 <wagle> @seen lambdabot
17:30:27 <wagle> 8(
17:30:58 <Lemmih> shapr is in #haskell. Shapr last spoke 5 hours and 14 minutes ago.
17:37:49 <Pseudonym> Lemmih: @arr
17:37:52 * SamB wonders how you would use a C library that provides its own main function
17:38:07 <Pseudonym> SamB: That's not a library, it's a framework.
17:38:21 <SamB> okay, so its a framework
17:38:22 <SamB> still
17:38:25 <Pseudonym> Presumably it provides some place to put your personal entry point.
17:39:02 <SamB> yes, "void glk_main(void)"
17:40:47 <Pseudonym> So... what's the question?
17:41:19 <SamB> how would I link a program with this, preferably in a somewhat reusable way?
17:41:40 <Pseudonym> Errr... much like you'd normally link it with libc.
17:41:48 <Pseudonym> Only you link it with this as well, and don't implement main().
17:42:15 <Pseudonym> Free cakes!
17:42:16 <Igloo> There's a bit in teh GHC userguide about how to do that sort of thing, I think
17:42:17 <Pseudonym> BBL
17:42:24 <Igloo> Or maybe it's in the FFI spec
17:42:31 <Igloo> I'm sure I've seen one, anyway
17:43:00 * SamB doesn't usually do anything to make GHC link with libc
17:45:54 <dons_> @bot
17:46:10 <dons_> no lambdabot? hmm.
17:49:50 <SyntaxNinja> hi dons
17:50:50 <dons_> hi SyntaxNinja
19:02:22 <Pseudonym> Mmmm... free cakes.
19:12:13 <SamB> what does ZCMain demangle to?
19:12:32 <Lemmih> Main?
19:13:01 <SamB> er, but I see the same thing only starting with Main...
19:17:09 * SamB wishes ghc would listen when he said -no-hs-main
19:18:41 <SamB> how would I link with, say, libX11?
19:20:10 * SamB discovers that the usual method works fine
19:36:02 * SamB finally figured out how to link haskell code to Glk
19:36:43 * SamB wishes Glk would provide a way to get argc and argv, which would make some up if necessary
19:37:32 <SamB> I had to write, like, a 40 line C file!
19:42:46 * SamB really wishes Glk had an FFI friendly interface
19:49:06 <SamB> @index unsafePerformIO
19:53:00 <SamB> @google unsafePerformIO
19:56:00 <dave_m> I think lambdabot is down
20:05:31 * lispy_ pokes lambdabot 
20:05:37 * lispy_ with a spoon!
20:17:34 <wagle> a rusty spoon?
20:18:37 * lispy_ pokes wagle with a (rusty?) spoon
20:19:58 * wagle COW's and evades the poke
20:20:18 * SamB thinks lambdabot is *hung*
20:20:30 <wagle> lambdabot: wake up, dude!
20:20:51 * SamB points to lambdabot in user list
20:20:53 <int-e> don't let that Copy Of Wagle get away :)
20:22:29 <lispy_> SamB: heh, that means something in the local slang
20:22:36 * lispy_ also thinks lambdabot is "hung"
20:24:23 <sieni> well hung?
20:24:51 <lispy_> indeed
20:24:53 <wagle> anti well hunged
20:36:14 <hacked``> wtf
20:36:18 <hacked``> haskell = shit
20:36:22 <hacked``> for autistic people
20:36:52 <lispy_> hi
20:36:56 <lispy_> oh, he's gone
20:36:59 <wagle> wasnt that... special
20:37:02 <lispy_> that was random
20:37:27 <lispy_> i'd say by his own definition haskell is right for him
21:17:02 * mwc just had a paradigm shift
21:17:16 <mwc> how long did it take to occur to you that a typeclass is just a second order type?
21:17:39 <mwc> I was just trying to explain typeclassing to an OO dude as to why haskell rocks
21:17:42 <mwc> and it hit me
22:56:27 <musasabi> morning
23:00:16 <aleator> I just realized. Images aren't data. They're functions.
23:05:31 <dons_> isn't the code / data boundary not really a boundary anyway (in haskell at least)?
23:08:35 <aleator> Guess it still is in my head..
23:09:40 <Cale> functions are data :)
23:12:28 <aleator> But practically, function is much more flexible than an array.. You must iterate an array but you can just define functions.. :)
23:14:18 <aleator> Like image gradient: gradient (x,y) = original (x,y) - original (x-1,y).
23:16:12 <Pseudonym> OTOH, you can't iterate functions often.
23:16:25 <Pseudonym> So I wouldn't necessarily say "much more flexible".
23:16:35 <Cale> Pseudonym: you can sample them
23:20:02 <Pseudonym> It depends on the domain.
23:20:19 <Pseudonym> It's hard to sample binary trees.
23:20:33 <Pseudonym> Not that it's easy to construct an array with binary tree keys.
23:21:16 <aleator> Well, For my needs image is (Int,Int) -> Double.. And that is easy to sample.
23:35:56 <gour> Lemmih: hi
23:37:16 <Lemmih> Hi.
23:37:29 <gour> yesterday i tried to build lambdabot
23:37:36 <gour> but without success
23:37:43 <gour> it looks like a problem with hs-plugins
23:37:58 <gour> today i am trying the same with cabal-get
23:38:10 <gour> but i get errors after running Install.lhs
23:38:15 <gour> are u interested?
23:38:31 <gour> i have a log file
23:38:53 <gour> and run ~amd64 on Gentoo
23:39:04 <Lemmih> Am I to blame?
23:39:34 <gour> no, i saw the followinng: "Questions or problems?  Email me or Lemmih" :-)
23:40:05 <gour> or is it the wrong address?
23:42:28 <Lemmih> OK, send me the log file.
23:44:17 <gour> it goes
23:45:55 <gour> do u want it via email?
23:51:58 <ulfdoz> re
23:53:13 <Lemmih> Ah, you're installing cabal-get. I missed that.
