00:02:18 <juhp> oh, wow - gtk2hs mozembed works for me again!
00:02:37 <juhp> thanks dcoutts?! :-)
00:03:43 <kzm> Gmorn
00:03:46 <kzm> @seen gour
00:03:47 <lambdabot> gour is in #haskell. I don't know when gour last spoke.
00:03:55 <kzm> gour, awake?
00:04:27 * kzm nudges gour.
00:04:49 <kzm> Oh well.
00:09:47 <C-Keen> moin.
00:11:46 <boegel> y0w C-Keen
00:11:57 <C-Keen> :)
00:20:06 <kzm> Anybody use WASH using external commands (ie. "system")?
00:20:22 <gour> kzm: here i'm
00:20:48 <kzm> Good morning!  You wanted a report on WASH?
00:21:17 <ProfTeggy> Moin
00:21:19 <gour> kzm: good morning, i was just taking breakfast, although a little late
00:21:38 <gour> kzm: yes, i'm interested what can be done with wash
00:22:25 <kzm> I got things working now - nothing fancy, just a couple of forms for submitting data (file upload or text area), and passing to a Haskell function.  Very simple to code.
00:22:32 <ibid> hm, am i evil if i give my stuents take-home exercises that have to do with the data type "data Nat = Zero | Succ Nat deriving (Read,Show,Eq)"?
00:23:01 <gour> kzm: let me explain what i'd need it for
00:23:17 <gour> kzm: my teacher has a web site with different forms
00:23:18 <kzm> The User Guide is a bit outdated, which made for a difficult start, but I wrote a Makefile to run the preprocessor (wash2hs) manually, and now it's working smoothly.
00:23:46 <gour> kzm: and the whole site is designed with agl (Adobe stuff)
00:24:04 <kzm> ibid, why is that evil?
00:24:17 <ibid> kzm: you tell me :)
00:24:25 <gour> kzm: and after submitting a form, he uses old cgiemail script (insecure)
00:24:44 <ibid> kzm: stuff like, write a foldNat and implement natTimes with it :)
00:25:03 <gour> kzm: which picks all the cgi environment and sends a mail to his email address
00:25:06 <kzm> gour, while you haven't gotten to the question yet, I think I should warn you that I'm probably not qualified to answer it :-)
00:25:18 <gour> kzm: :-)
00:25:25 <kzm> gour: (yet)
00:25:31 <gour> kzm: ok, simple stuff
00:25:32 <Itkovian> good meuning
00:25:46 * Itkovian has got hold of ST's Craft of FP. whoieee
00:25:53 <gour> kzm: i have a html form which asks for my name
00:25:54 <ProfTeggy> ibid, that's perfectly reasonable
00:26:05 <ProfTeggy> ibid, I'd say, go ahead
00:26:20 <ibid> nice to have a prof's go-ahead ;)
00:26:31 <gour> kzm: after i submit my name, i need a script to send email to some email address
00:26:49 <kzm> ibid - what is the spec for foldNat?
00:27:03 <gour> kzm: and the content of email should be (besides To:, Subject: ..) something like:
00:27:12 <gour> kzm: Name: name
00:27:16 <ibid> kzm: the type is foldNat :: (a -> a) -> a -> Nat -> a
00:27:38 <gour> where 'name' is replaced with the content of the input field submitted in the form
00:27:52 <gour> kzm: is it simple to do that with wash?
00:28:02 <ProfTeggy> ibid, this doesn't look as general as it could be
00:28:20 <ibid> ProfTeggy: lifted it out of bird :)
00:28:45 <ibid> ProfTeggy: what would you say?
00:29:51 <ProfTeggy> (a -> b) -> a -> Nat -> b
00:29:54 <kzm> gour, not sure how the interface to email is, but the rest should be easy.  (I'm sure the email is too)
00:30:52 <ibid> ProfTeggy: well, that doesn't work with the def i had in mind
00:30:58 <kzm> ibid, foldNat f x n => f^n a?
00:31:04 <ibid> basically
00:31:09 <gour> kzm: so it should be easy for a wash-haskell script to pick the content of forms' input fields and process it?
00:31:09 <kzm> (iterate f n times on a)
00:32:02 <kzm> gour, that's my impression, yes.  Try it out, d/l the UG, take five minutes starting from the examples there.
00:32:30 <kzm> ...and you'll be ahead of me in no time :-)
00:32:48 <ibid> ProfTeggy: a fold should feed the parameter function back its return value, methinks
00:32:57 <ibid> ProfTeggy: so that makes a = b
00:33:58 <gour> kzm: well, your are definitely loaded with much more haskell skills than myself
00:34:08 <gour> kzm: so i cannot compete (atm :-)
00:34:27 <ProfTeggy> ibid, of course (stupid me): foldNat Zero x = x
00:34:30 <ibid> ProfTeggy: basically, that makes Nat isomorphic to [()]
00:34:34 <ProfTeggy> Yup
00:34:52 <kzm> gour: bah.  That's how *I* feel, trying to keep up with the mailing lists.
00:34:53 <ProfTeggy> foldNat f  x Zero = x rather
00:35:04 <gour> kzm: and one friend of my teacher (mine as well) is interested how would a haskell script compare with something similar in Perl
00:35:59 <boegel> Itkovian: do you have that book at work or at home ?
00:36:01 <gour> kzm: when i see those things, as well as discussions about monads people are having here i just wonder if id'll make it..
00:36:48 <Itkovian> boegel: it lies well within grabbing range atm.
00:37:15 <boegel> Itkovian: cool
00:37:31 <boegel> Itkovian: how did you obtain it ? bought it ?
00:37:50 <kzm> It's the price we pay for being an acadmic language.  Lots of complicated theory applied to your everyday tools.  Just ignore it :-)
00:38:07 <Itkovian> boegel: it was on my lib list and koen had it in his rack
00:38:21 <ibid> kzm: not "complicated theory", just "scarily-named stuff" :)
00:38:50 <boegel> Itkovian: oh, ok
00:38:55 <gour> kzm: i am trying to make it more practical in everyday's sense :-)
00:39:00 <boegel> Itkovian: when are you returning it ? >:)
00:39:04 <Itkovian> boegel: my list is clean now.
00:39:13 <boegel> Itkovian: hooray !
00:39:14 <Itkovian> boegel: you could take a peek, no problem there
00:39:30 <gour> kzm: i.e. since i'm not a CS, i need the language for practical stuff
00:40:15 <kzm> ibid - indistinguishable from magic, at any rate :-)
00:40:42 <ibid> :)
00:41:16 <boegel> Itkovian: could I take it home for the weekend ? :)
00:42:03 <Itkovian> boegel: sure. I won't have time to read much I guess
00:46:33 <boegel> Itkovian: cool !
00:46:57 <boegel> anyone have any pointers for a wysiwyg html/php editor ?
00:48:30 <gour> boegel: quanta, nvu
00:50:01 * kzm swears at his web server, which found this an appropriate time to make itself unavailable.
00:50:34 <kzm> boegel, surely, you should have turned left at the intersection?
00:51:10 <boegel> kzm: uh ?
00:55:00 <vegai> gour: perhaps we oughta start a #haskell-for-dummies
00:55:12 <vegai> #haskell-for-nonphd
00:55:36 <gour> vegai: good idea
00:55:38 <vegai> #haskell-for-normal-people would be too rude, I guess
00:55:42 <ulfdoz> .oO( #haskell-in-practice ) :)
00:55:53 <gour> vegai: the 2nd one is cute
00:56:12 <vegai> of course, it really should be the other way around. There should be a #haskell-for-phds where all that talk would take place :P
00:56:13 <Cale> I kind of like the fact that Haskell takes all this abstract stuff and makes it practical :)
00:56:25 <gour> vegai: you are free to invite me
00:56:48 <vegai> gour: I don't know, I'm already on three #haskell* -channels :)
00:57:08 <vegai> -for-nonphd is kinda rude too
00:57:51 <vegai> -pragmatic?
00:57:59 <Itkovian> vegai: that shoud be #haskell-overflow
00:58:08 <vegai> Itkovian: ok.
00:58:27 <Itkovian> iirc that was created for in depth discussions, between a few people
00:58:47 <vegai> well, that's almost the opposite to what I was thinking
00:59:08 <vegai> i.e. shallow discussions between many people :)
00:59:24 <Cale> that's haskell-blah :)
00:59:28 <gour> vegai: or maybe we can make a #haskell-phd chanell :-)
00:59:33 <vegai> ...about haskell
00:59:52 <Cale> what's wrong with the plain #haskell?
01:00:05 <vegai> nothing...
01:00:06 <sieni> argh, please no more #haskell* channels :-)
01:00:06 <Cale> People can't talk about shallow practical stuff in here?
01:00:07 <gour> Cale: we are just joking..
01:00:52 <Cale> ah :) somehow I thought that this was at least halfway serious :)
01:00:54 <gour> Cale: newbies dreaming about the future when they will understand all the esoteric stuff about monads, comonads, monoids, functors...
01:01:14 <gour> Cale: plethora of such stuff :-)
01:01:52 <gour> Cale: e.g. there is not much about writing gui "Hello world!" here :-)
01:02:13 <Cale> hehe, there's no reason there couldn't be :)
01:03:09 <gour> Cale: besides the fact i cannot write about it ;)
01:03:28 <Cale> hehe
01:04:53 <gour> Cale: but i hope i'll advance so i can ask you some relevant questions one day
01:05:03 <Cale> well, sure :)
01:06:55 <dcoutts> juhp, you're welcome :-)
01:07:28 <juhp> dcoutts: is --disable-dependency-tracking still needed when building gtk2hs?
01:07:53 <juhp> to be honest I don't remember why I have it...
01:07:53 <dcoutts> juhp, --disable-dependency-tracking does nothing at all. automake just adds it automatically
01:08:04 <juhp> oh
01:08:04 <Cale> I think GUIs are sort of written the wrong way around these days. It would be nice to have programs which simply expose a plain interface, and have a separate program to design GUI stylesheets which are applied. Somewhat like glade, but even more detached.
01:08:05 <juhp> ok
01:08:25 <dcoutts> Cale, yeah, that'd be nice
01:08:45 <dcoutts> a clean seperation of the presentation layer
01:08:52 <juhp> dcoutts: so it is not part of gtk2hs at all - doh - thanks
01:08:55 <Cale> Of course, you might still end up writing extra widgets separately from your program which get used by the stylesheets
01:09:25 <Cale> but that would be a good deal less common
01:10:05 <juhp> Cale: point - it would also make it a lot easier to write toolkit independent code
01:10:49 <Cale> It would make it basically trivial
01:11:10 <Cale> as long as there's a style layer using whatever toolkit, you're okay
01:11:47 <aleator> .. deriving(GUI) ?
01:12:25 * gour hopes something practical will come about (one day) from that GUIs discussion
01:14:40 <dcoutts> morning shapr
01:14:44 <Cale> yello shapr
01:15:26 <shapr> hiya
01:15:28 <shapr> wassup?
01:15:35 <Cale> not much
01:15:38 <dcoutts> juhp, you're not thinking of --enable-packager-mode rather then --disable-dependency-tracking are you?
01:15:44 <Cale> woke up in the middle of the night, so I'm here :)
01:15:52 <juhp> dcoutts: no, no - I have that too
01:15:57 <dcoutts> ok
01:16:19 <dcoutts> juhp, yeah I did make some changes to the way we build gtkmozembed
01:16:30 <dcoutts> or rather the linker flags that we use
01:16:56 <juhp> dcoutts: perhaps it crept in from cut'n'paste from a configure log file or something
01:17:05 <dcoutts> heh
01:17:07 <juhp> dcoutts: great stuff
01:17:48 <kzm> To use runProcess and capture stdout - do I need to forkIO and read a handle?
01:17:56 <dcoutts> juhp, mind if I get you to check something: what is the mozilla lib dir on fedora and is it on the /etc/ld.so.conf path?
01:18:18 <kzm> (or is there a better way to do this?)
01:18:41 <dcoutts> juhp, and: readelf -a /usr/lib/mozilla/libgtkembedmoz.so | grep PATH
01:20:50 <juhp> dcoutts: grep returns nothing for me
01:21:39 <juhp> dcoutts: but the dir doesn't seem to be in ld.so.conf
01:22:59 <dcoutts> juhp, hmm interesting, I wouldn't expect it to work in that case
01:23:52 <dcoutts> juhp, so we link mozembed progs using -Wl,-rpath,${mozilla_libdir}
01:24:36 <juhp> dcoutts: using rpath sounds right
01:24:41 <dcoutts> juhp, so the mozilla lib dir is /usr/lib/mozilla on fedora?
01:25:24 <juhp> dcoutts: no - $libdir/mozilla-$version/
01:26:03 <dcoutts> juhp, oh, try the readelf -a ${mozlibdir} | grep PATH again then
01:26:33 <dcoutts> (unless you used the right one in the first place)
01:26:43 <juhp> dcoutts: I did - thanks to zsh :)
01:26:48 <dcoutts> oh ok :-)
01:26:51 <dcoutts> hmm, odd
01:26:58 <dcoutts> so using the -rpath allows us to find the libgtkembedmoz.so however it should not help with finding the other mozilla libs
01:27:15 <juhp> ah
01:27:27 <dcoutts> we do also link directly agsint the other mozilla libs (xpcom etc)
01:27:46 <dcoutts> however I would not expect it to use the exe's rpath to find them
01:27:59 <dcoutts> since they are frist required by libgtkembedmoz.so
01:28:11 <dcoutts> and if that does not have the rpath set...
01:28:26 <juhp> dcoutts: ok so on fedora the other moz libs are in libdir :)
01:28:34 <dcoutts> ah!
01:29:06 <kzm> Sorry if this is really basic, but how do I create a handle to pass for stdout to runProcess?
01:29:07 <dcoutts> the standard libdir which is on the global ld runtime path
01:29:36 <kzm> openFile isn't exactly what I'm looking for, I think..
01:32:06 <aleator> Hi, Any ideas how to speed this up : http://pastebin.com/416977 ?
01:34:46 <defcon8> filter "True" (map Char.isUpper "aBCde")
01:34:46 <defcon8>  <-- why isnt this working, i am trying to filter the upper case words
01:34:58 <kzm> Okay: I can use "createPipe" and "fdToHandle" -- but is that *really* what one is supposed to do to interact with a subprocess?
01:35:06 <Cale> does setPixel take something other than a (CInt, CInt) as its first parameter?
01:35:21 <boegel> have you guys seen this ? http://www.cs.uu.nl/dazzle/f08-schrage.pdf (Haskell Ready to Dazzle the Real World)
01:35:29 <ibid> defcon8: there's something wrong at your use of "True"
01:35:30 <defcon8> oh yeah sorry
01:35:32 <defcon8> i remembher
01:35:45 <defcon8> filter Char.isUpper "aBCde"
01:35:48 <boegel> @type filter
01:35:50 <lambdabot> forall a. (a -> Bool) -> [a] -> [a]
01:35:58 <boegel> @type consty
01:35:59 <lambdabot> Not in scope: `consty'
01:36:01 <boegel> @type const
01:36:02 <lambdabot> forall a b. a -> b -> a
01:36:08 <kzm> boegel, "seen" is exactly the word (I printed it, but haven't read it yet)
01:36:16 <boegel> @eval const True 1
01:36:17 <lambdabot> True
01:36:32 <Cale> filter (const True) = id
01:36:40 <boegel> defcon8: does that help ?
01:36:58 <boegel> Cale: it's nto our business why he's using filter for that purpose, but hey ;)
01:37:03 <defcon8> yeah thanks
01:37:40 <aleator> cale: setPixel :: (CInt,CInt) -> CDouble -> Image -> IO ()
01:40:38 <Cale> aleator: then why are you applying fromIntegral?
01:41:31 <aleator> Cale: ah.. Old habit? My bad.
01:42:11 <Cale> that said, I don't really know what could be done otherwise -- lists are sort of a heavy datastructure for that.
01:42:23 <aleator> Would mallocArray be faster?
01:42:38 <Cale> you could try it
01:42:43 <aleator> Yeah.. It is just that lists are really handy for rest of the problem..
01:43:00 <Cale> that's always the trouble :)
01:43:03 <juhp> kzm: probably - I'm afraid so - you might like to look at the obsolete? code in POpen.hs for clues :)
01:47:57 <musasabi> Is there a HaXml Debian package?
01:49:04 <kzm> juhp, thanks.  I decided just to output to a file, and reread the file.  That way, output is stored for posterity as well :-)
01:49:21 <gour> dcoutts: can you explain me what's the deal with mac os and having gnome stuff for it?
01:49:46 <kzm> but it's a shame there's no good way to do that, IMO a runProcess with type ... -> IO String would cover a lot of uses.
01:49:53 <kzm> (at least my kind of uses)
01:49:58 <gour> dcoutts: i am browsing darwinports repo, and it looks like all the stuff is there...
01:50:03 <dcoutts> gour, cool
01:50:15 <dcoutts> gour, well macosx is just unix I guess
01:50:27 <dcoutts> so it probably wan't too hard to port
01:51:42 <earthy> um. mac os x is slightly different
01:52:04 <earthy> unfortunately in some significant ways...
01:52:13 <earthy> such as two level linking
01:52:16 <gour> atm, i have problem with darwinports.org site, but i briefly checked e.g. gnomedb & bonobo stuff
01:52:22 <gour> and it's there
01:52:24 <earthy> i.e. two level namespace for linking
01:53:13 <shapr> brandon: Hiya, learning Haskell?
01:53:21 <gour> earthy: i'm pretty much ignorant with mac os (this is only one field :-) but what os the majority of mac users run?
01:53:36 <boegel> tiger ? panther ?
01:53:42 <shapr> Any newbies around who have questions?
01:53:55 <shapr> rq: hiya, learning Haskell? Have any questions?
01:54:13 <gour> boegel: what are the differences?
01:55:08 <gour> boegel: they are not the members of the same family?
01:55:33 <boegel> gour: I'm no MacOS user, but I believe one it the upgraded version of the other, not sure though
01:55:37 <boegel> ask Itkovian
01:56:50 <gour> Itkovian: can you help us resolving the mac os-es issue?
01:57:38 <Itkovian> erm
01:58:08 <gour> we are discussing about different version of mac os-es
01:58:11 <gour> what is the deal?
01:58:20 <Itkovian> I've no idea
01:58:26 <gour> i.e. in what they are differing fro meach other?
01:58:29 <Itkovian> I've been using my Powerbook since 6 months
01:58:47 <Itkovian> I think the core unix stuff is quite the same, at least API-wise
01:58:59 <Itkovian> some apps differ in functionality, speed, etc.
01:59:02 <gour> i'm interested in regards to have multi-platformability for e.g. gtk2hs
01:59:17 <Itkovian> I've only used Panther for a month or so, until I got hold of Tiger
01:59:32 <gour> e.g. bonobo stuff works on win32 and on darwinports i saw it too
01:59:38 <Itkovian> I've no idea if gtk works
01:59:53 <Itkovian> if it's in either darwinports of fink, it should work
02:00:05 <gour> soo, if we want to provide a complete gnome-haskell, will it work?
02:00:16 <Itkovian> on macosx?
02:00:18 <gour> or what is the mac os the majority users run?
02:00:19 <Itkovian> no idea
02:00:31 <Itkovian> I think most people use Panther or Tiger
02:00:46 <Itkovian> anything >= 10.3 will do fine, I think
02:01:13 <gour> panther & tiger are jsut diffeent version of the same os?
02:01:18 <kzm> shapr, here's a newbie question: apparently openFile with WriteMode doesn't create it?
02:01:38 <Itkovian> yup, Tiger is the newest release
02:01:52 <Itkovian> with loads of improvements, of course
02:02:01 <Itkovian> but the C-api should be the same
02:02:04 <gour> dcouts: hey ma, see http://pdb.finkproject.org/pdb/section.php/gnome
02:02:08 <Itkovian> it does use gcc-4.0
02:02:13 <shapr> kzm: I don't know.
02:02:28 <gour> fink shows lot of gnome packages, so we're fine?
02:03:13 <kzm> It should, according to the docs.
02:03:31 <kzm> But I get an error message...will investigate.
02:04:40 <Itkovian> gour: i guess so
02:05:14 <gour> Itkovian: ta, it is encouraging to hear so
02:05:21 <earthy> you're fine up to a point
02:05:39 <earthy> look at e.g. the Mac OS X GHC distribution
02:05:42 <earthy> it does not depend on fink
02:05:55 <gour> Itkovian: btw, how are you satisfied with your hardware?
02:06:02 <earthy> so making a gnome-haskell lib for that would involve quite a bit of work ;)
02:06:22 <earthy> but yeah, most anything gnome or kde has in fact been ported
02:06:32 <Itkovian> gour: yeah, very much
02:06:41 <earthy> and I think almost every mac os x user is at 10.3 at least
02:06:50 <gour> earthy: so, what is the problem then?
02:06:58 <earthy> there might be some left that haven't shelled out to upgrade since 10.2
02:07:00 <gour> earthy: just to provide bindings
02:07:08 <earthy> gour: I don't have either fink or darwinports
02:07:20 <kzm> Okay - found it.  I system "mv" the directory into existence, and apparently, mv returns before it is done.  (sigh).  I've added a sleep, rather an ugly hack, imo.
02:07:20 <earthy> and still run ghc without any problem
02:07:23 <gour> earthy: by the time we'll have bindings, they will anyway upgrade
02:07:29 <earthy> gour: :)
02:07:51 <earthy> well, it's actually relatively easy to stick to the 10.3 api, and 10.4 is supposed to not break that
02:08:00 <gour> earthy: so let's go writing those bindings
02:08:07 <earthy> (deprecate parts, maybe, but not break)
02:08:39 <jlouis> oy oy ;)
02:08:50 <gour> dcoutts: see also http://darwinports.org/ports.php?by=cat&substr=gnome&Search=Submit
02:11:05 <jlouis> http://j.mongers.org/pub/haskell/RandomWallpaper/PickRandomWallpaper.hs -- does a very important thing for me ;)
02:12:17 <Itkovian> jlouis: seems like a cool way to browse yr prOn
02:14:41 <shapr> hiya beelsebob_, how's life?
02:23:10 <beelsebob_> complicated
02:23:24 <jlouis> Itkovian: yr prOn is much better browsed with feh or qiv, I'd think
02:25:19 <beelsebob_> morning piglet
02:25:26 <beelsebob_> bah... wrong window
02:26:03 <beelsebob_> shapr: gotting hat-delta results in and writing it up finally
02:26:13 <beelsebob_> it appears to pwn hat-detect
02:28:21 <shapr> spiffy
02:28:49 <beelsebob_> best result so far is hat-detect 26 - 1 hat-delta
02:28:50 <beelsebob_> :)
02:31:47 <Itkovian> jlouis: I have no idea
02:44:14 <jlouis> And Conjure is going well. Torrent representation was written yesterday.
02:44:20 <shapr> cool!
02:48:58 <jlouis> shapr: yeah, We'll soon have a generic TorrentStore supporting operations for reading and writing pieces, abstracting out the boring low-level stuff
02:49:32 <jlouis> With that finished, we can begin building the code communicating with the tracker and the other clients
02:49:59 <jlouis> STM is going to be used to communicate between threads
02:50:12 <shapr> cool!
02:50:43 * shapr updates his Conjure repo
02:51:42 <musasabi> Has anyone done a TCP stack in Haskell?
02:52:23 <shapr> House
02:52:23 <jlouis> musasabi: don't think so
02:52:56 <jlouis> I've read TCP stacks before and they are ugly and evil
02:53:14 <musasabi> shapr: I thought they were missing that.
02:53:34 <musasabi> uip is just 3600 lines of C, I think I could do better in Haskell...
02:53:48 <shapr> http://www.cse.ogi.edu/~hallgren/House/ - "A network protocol stack, with basic support for Ethernet, IPv4 over Ethernet, ARP, ICMP, UDP and TFTP (Iavor Diatchki and Thomas Hallgren)."
02:54:32 <musasabi> shapr: seems lacking TCP.
02:54:49 <shapr> hm
02:54:58 <shapr> You think it would be hard to extend?
02:55:18 <musasabi> Haven't looked at the code.
02:55:18 <shapr> I've tried to check out the House cvs repo several times without success. Does anyone have a recent copy?
02:56:28 <shapr> jlouis: What's the conjure repo again?
02:56:31 * shapr advertises
02:57:33 <jlouis> http://j.mongers.org/pub/haskell/darcs/conjure/
02:58:21 <jlouis> Patches are welcome! Supply them to map pred "kmpvjtAnpohfst/psh"
02:58:27 <shapr> heh
02:59:47 <jlouis> Hey, Cool hackers work on Conjure, mind you ;)
03:10:07 <shapr> musasabi: Do you have a recent checkout of House?
03:10:23 <musasabi> shapr: no, unfortunately.
03:11:22 <shapr> Does anyone here have a recent checkout of House?
03:11:41 <shapr> I wish they'd use darcs, cvs is such a crappy protocol.
03:15:16 <shapr> Lunar^: Do you have a recent checkout of House?
03:20:01 <Lunar^> shapr: nope
03:20:29 <shapr> foo
03:21:04 <shapr> I guess I could manually trawl the web interface.
03:21:59 <kzm> what's unsafe about unsafeInterleaveIO?
03:24:12 <musasabi> kzm: e.g. failures
03:24:34 <musasabi> kzm: and the time the IO happens is unpredictable.
03:25:32 <musasabi> kzm: e.g. "do writeFile "foobar" "something"; str <- unsafeInterleaveIO $ readFile "foobar"; removeFile "foobar"; doStuffWith str
03:25:56 <juhp> kzm: right - that is why I tried to write POpen, but it was buggy
03:27:27 <juhp> there have been various other attempts
03:28:23 <musasabi> juhp: I think I have a working popen lying around if you are interested.
03:28:33 <juhp> musasabi: oh sure :)
03:28:50 <vegai> does the actual implementation of read use some kind of magical way of transforming the string, or does it simply go through every digit one by one?
03:29:22 <juhp> as I recall mine lost output larger than 4kB or something
03:29:39 <juhp> and input didn't work iirc
03:30:10 <juhp> well it was a while back, so it is a bit hazy now :)
03:33:20 <musasabi> juhp: seems the code was using temporary files, but it contains most of the stuff needed - http://youzen.b2.fi/~musasabi/AFilter.hs
03:34:01 <musasabi> the trick is to just use the low level operations instead of System.Process
03:34:32 <juhp> musasabi: ok thanks
03:40:12 <musasabi> Has anyone benchmarked priority queues in Haskell?
03:45:14 <shapr> musasabi: I got the House repo to update with "sed -i.bak -e 's/glass\.cse\.ogi\.edu/cvs\.haskell\.org/g' **/CVS/Root"
03:45:43 <juhp> shapr: heh
03:46:21 <shapr> I've been studying under the master, dons
03:48:03 <juhp> hehe
03:50:20 <shapr> musasabi: Check it out http://www.cse.ogi.edu/~hallgren/House/kernel/pfe.cgi?Net.TCP
03:52:41 <kzm> musasabi, okay thanks (sorry about late - lunch interceded here)
03:55:12 <musasabi> shapr: thanks
03:55:25 <shapr> Who's doing javascript generation from Haskell these days? WASH, HsWebForms, and Pugs?
03:55:30 <shapr> Anyone else?
03:55:43 <shapr> musasabi: I'm curious, what are you doing?
03:56:24 <musasabi> shapr: I have some PArrows->Javascript code.
03:57:07 <Itkovian> musasabi: shows us!
03:57:11 <shapr> ah neat
03:57:17 <shapr> It's in the PArrows repo
03:57:22 <Itkovian> ok
03:57:48 <musasabi> http://www.cs.helsinki.fi/u/ekarttun/PArrows/PArrows/src/Text/ParserCombinators/PArrow/ToJavaScript.hs
03:58:56 <musasabi> joelr: You asked about the number of simultaneous connections with networking on haskell-cafe ?
03:59:04 <joelr> yes
03:59:07 <joelr> hi musasabi
03:59:19 <joelr> i thought it was a haskell issue but it's not
03:59:29 <joelr> it's an issue with the client's c++ server
03:59:32 <musasabi> at least on *nix, you need to do "ulimit -n <n>" to set the number of file descriptors.
03:59:55 <joelr> musasabi: i know that, thanks,, i'm on mac osx. i just thought since lockfile is limited to 1024 there could be other limits
04:00:14 <musasabi> well there is the select(2) limit.
04:01:11 <lisppaste2> joelr pasted "catching exceptions" at http://paste.lisp.org/display/13199
04:01:24 <joelr> musasabi: yeah, 10240 on mac osx
04:01:35 <joelr> musasabi: any idea with this?
04:01:37 <joelr> paste
04:04:31 <musasabi> joelr: I would just use StateT World IO and ditch ErrorT.
04:04:41 <musasabi> joelr: and write the catch for that.
04:05:29 <joelr> musasabi: i rather like my ErrorT ;)
04:06:04 <joelr> musasabi: i'm using it other places and find it very helpful. within this same monad. the connection error is the exceptional case
04:06:07 <musasabi> that is slow ;)
04:06:07 <joelr> pun intended
04:06:35 <musasabi> then again if you are not interested in the last ounce of performance it is fast enough.
04:07:16 <joelr> musasabi: no, no interest in premature optimization ;)
04:07:24 <joelr> musasabi: interested in catching that exception, though
04:07:47 <joelr> musasabi: and making my scripts display a nice message
04:07:57 <joelr> and failing gracefully
04:16:04 <musasabi> joelr: well there is throwError and catchError.
04:16:17 <Cale> joelr: well, where would you like to catch the exception? It looks like possibly it's happening in connectTo
04:16:24 <joelr> right
04:16:35 <joelr> it's indeed happening in connectTo
04:16:47 <joelr> i would like to catch it... somewhere
04:16:59 <joelr> hopefully in my connect function
04:19:43 <Cale> perhaps tryJust in Control.Exception is what you want?
04:19:59 <Cale> (or try)
04:20:42 <Cale> well, really, you'd want a combinator that takes the Either returned by try and lifts that into your monad properly
04:21:03 <joelr> Cale: i'm using ErrorT
04:21:31 <joelr> so if try returns an Either then i could well be fine... unless it's a different Either... which i guess it is
04:21:46 <joelr> Cale: i'll take a look at tryJust, thanks
04:22:09 <Cale> right, you want to take that either and decide whether to throw an error in your monad, or return a value
04:22:53 <joelr> Cale: exactly
04:24:42 * shapr grumbles at emacs
04:25:10 <joelr> shapr: what's up?
04:26:17 <shapr> gnumacs randomly locks up and dies on my system.
04:27:40 <joelr> shapr: you must be on mac osx :D
04:28:29 <shapr> Nah, Linux/x86
04:28:34 <joelr> ah
04:28:48 <shapr> I dunno why it rolls over and dies like that.
04:29:23 <shapr> Wouldn't be so bad if I didn't use emacs for news, email, irc, and yahoo & icq instant messaging.
04:29:38 <shapr> and editing, of course :-)
04:29:43 <juhp> shapr: at least it doesn't make your system lockup :)
04:29:49 <joelr> shapr: you are sick /news, email, irc, yahoo & icq)
04:29:58 <shapr> And that's just part of the list.
04:30:07 <shapr> emacs *is* my system.
04:30:10 <shapr> That's why I want Yi.
04:30:19 <joelr> Yi?
04:30:22 <joelr> what's that
04:30:27 <shapr> @where yi
04:30:27 <lambdabot> http://www.cse.unsw.edu.au/~dons/yi.html
04:30:35 <juhp> happens to me sometimes with xemacs, eg when running ghc in compile-mode :-(
04:30:45 <shapr> Never happened to me with xemacs.
04:31:10 <juhp> yeah it is new for me too - since I moved to this x86-64 box
04:31:10 <joelr> cool
04:31:19 <joelr> yi = cool but i have emacs
04:31:46 <Cale> cool = yi
04:31:49 <joelr> i mean, we have java editors extensible in java, c++ editors extensible in c++
04:31:49 <shapr> Yeah, but emacs has major warts that will never be fixed.
04:31:59 <joelr> lisp editors extendable in lisp
04:32:05 <joelr> why not have a haskell editor ...
04:32:07 <joelr> hehe
04:32:39 <shapr> Emacs has a lot of goodness, but the badness won't be repaired in my lifetime. Therefore, I must get another editor.
04:32:49 <Cale> heh
04:32:57 <joelr> dunno, i'm loath to switch
04:33:10 <joelr> have been using it for... ugh... dunno, the past 13 years?
04:33:11 <boegel> shapr: is Yi usefull for every day already ? It says 0.1.0 which isn't encouraging
04:33:12 <Cale> exactly how much source code does emacs have?
04:33:29 <shapr> joelr: I've only been using it for seven or eight years.
04:33:42 * Cale wonders how many vertices the tree of s-expressions for emacs is. :)
04:33:43 <juhp> Cale: muahaha
04:33:45 <shapr> But the more I learn about emacs, the more I am irritated by its warts.
04:33:55 <juhp> shapr: nod
04:34:04 <shapr> And I really do know a lot about emacs.
04:34:08 <jlouis> emacs is a wierd thing
04:34:10 <boegel> what's wrong with vim ? I thought that's thé editor ? (I'm switching to it as we speak)
04:34:19 <jlouis> vim is borin
04:34:20 <jlouis> g
04:34:34 <shapr> emacs is an elisp interpreter with an editor written on top of it.
04:34:37 <boegel> vim in an editor. it's not supposed to be exciting :)
04:34:38 <Cale> vim is nice, but it's only scriptable in a frightening language
04:34:48 <jlouis> I do not remember why I switched from vim to emacs
04:34:56 <shapr> Much of the power of emacs comes from the ability to dynamically modify the whole editor at runtime.
04:34:59 * boegel doesn't want scriptable, me wants an editor
04:35:07 <shapr> boegel: You *do* want scriptable.
04:35:11 <jlouis> Maybe I should go back to vim
04:35:11 <boegel> and no psychologist, tetris game or whatever
04:35:15 <boegel> shapr: I do , :)
04:35:16 <Cale> hehe
04:35:55 <boegel> shapr: why would I want scriptable ?
04:35:57 <Cale> boegel: well, you probably at least want an editor which parses your code properly at least
04:36:02 <shapr> I could rant about this... but I'll save it for later.
04:36:08 <shapr> I have to work now.
04:36:24 <boegel> Cale: yeah...
04:36:41 <Cale> hIDE will also type check your code as you write it :)
04:37:00 <boegel> that'll be cool
04:37:36 <Cale> http://www.scannedinavian.org/YiWiki/ScreenShots
04:38:23 <Cale> (the second one in particular is fun :)
04:38:32 <Cale> er, and the third :)
04:38:43 <boegel> Yi = hIDE ?
04:38:57 <Cale> Yi is a component of hIDE
04:39:06 <Cale> the editor component
04:39:12 <boegel> oh, I see
04:39:15 <Cale> as well as being a standalone editor
04:39:20 <boegel> how long before it's usable ? :)
04:39:24 <boegel> *useable
04:39:25 <Cale> I'm not sure :)
04:39:50 <boegel> well, neither am I :P
04:39:50 <Cale> Yi itself is relatively usable, though the GUI version of it is broken on my system (or was last time I tried it)
04:40:13 <Cale> hIDE isn't beta quality yet
04:40:22 <Cale> but it has some cool features already
04:40:24 <gour> boegel: i'm also on vim and wait to be able to switch to hIDE (yi) using the same commands :-)
04:40:26 <boegel> cool
04:40:34 <boegel> gour: :)
04:40:41 <Cale> Yi will be able to emulate vim/emacs etc
04:40:49 <boegel> I'm using vim for other things next to Haskell though...
04:40:53 <Cale> basically any keybindings that you like
04:41:05 <Cale> well, sure :)
04:41:06 <gour> boegel: sure, it serves mutt here
04:41:13 <boegel> Cale: that's cool
04:41:38 <gour> so we want to stay with those features, aka keyboard commands
04:43:07 <Cale> whoa, dcoutts has been busy -- 44 patches against gtk2hs :)
04:43:36 <gour> Cale: today?
04:44:09 <Cale> no, since a good week or so
04:44:28 <boegel> nice... I'm glad it evolving
04:44:31 <gour> ahh, ok, it is already sync-ed
04:44:33 <boegel> *it's (argh)
04:45:44 <eivuokko> Ghc links statically into libgmp in Windows? :-S
04:47:40 <Cale> eivuokko: doesn't it usually?
04:47:49 <Cale> oh, hmm... perhaps not
04:48:00 <eivuokko> I doubt it, and I don't really care about other platforms.
04:48:37 <eivuokko> I hope I can build ghc in Windows myself...maybe I can remedy it.
04:49:08 <Cale> wait, it's producing executables which are statically linked against gmp?
04:49:26 <eivuokko> Really annoying setback for me.  Using LGPLd code in non-dynamically linked commercial setting is kinda annoyance.
04:49:40 <Cale> or it, itself is linked statically against libgmp?
04:50:00 <eivuokko> That atleast is true, no dependency to any dll that is libgmp
04:50:23 <Cale> hmm
04:53:20 <eivuokko> It's unbeliavable how much work using haskell in Windows, in fairly typical commercial, purposes can be. :-(
04:57:19 <Cale> can you strings the binaries produced to see if they're statically linked with GMP? That's interesting (and potentially annoying)
05:00:37 <Cale> http://www.haskell.org/pipermail/haskell/2004-July/014301.html -- see replies to this message
05:01:40 <eivuokko> I am very well aware of this tricks.
05:01:44 <eivuokko> *these
05:02:21 <eivuokko> (IANAL, tho)
05:03:59 <eivuokko> It is in fact, annoying to even have to have clearly documented LGPL part of software.  Having to put machine readable source (unfortunately asm dumps aren't probably enouhg) is even more annoying.
05:07:28 <musasabi> Is there a good BSD licensed bignum library around?
05:08:57 <marcot> What does \ means in: cPluranguloAlPlurangulo a4'>>= \a4'
05:08:59 <marcot> What does \ means in: cPluranguloAlPlurangulo a4'>>= \a4''
05:09:56 <eivuokko> These symbols are found with strings'ing and grep -i ghc.exe gmp___gmpn_gcd_1 ___gmpz_cmp ___gmpz_cmp_si ___gmpz_cmp_ui ___gmpz_get_si ___gmpz_get_ui
05:10:05 <eivuokko> So, hmm.
05:10:39 <eivuokko> Also message "cannot allocate in gmp".
05:10:40 <marcot> Where can I get doc about the meaning of \ ?
05:11:12 <boegel> @type (\)
05:11:12 <lambdabot> parse error on input `)'
05:11:17 <eivuokko> Seems like lambda to me.
05:11:18 <boegel> @type (\\)
05:11:19 <lambdabot> Not in scope: `\\'
05:11:26 <boegel> @index (\\)
05:11:26 <lambdabot> bzzt
05:11:45 <eivuokko> @eval (\x -> x+1) 1
05:11:46 <lambdabot> 2
05:13:19 <marcot> eivuokko: hum... I forgot about lambda notation. thanks.
05:13:19 <boegel> @pl (a >>= \a)
05:13:20 <lambdabot> (line 1, column 10):
05:13:20 <lambdabot> unexpected ")"
05:13:20 <lambdabot> expecting letter or digit, operator, pattern or "->"
05:13:34 <boegel> doesn't seem like correct syntax to me...
05:17:51 * boegel finds the 'formal verification for functional programming languages' on the Haskell mailing list very interesting
05:18:28 <paolino_> hi I want to put constraint on building a 'type' is it possible ?
05:18:59 <paolino_> I tried this to no success
05:19:01 <paolino_> type GEvolution solution generator = (GSolution solution,RandomGen generator) => ([solution],generator)
05:19:11 <boegel> paolino_: unfortunatley, no.. atleast not that I know of
05:19:40 <wilx`> Hm...
05:20:06 <boegel> paolino_: how about type GEvolution = ([GSolution],RandomGen)
05:20:20 <paolino_> ah
05:20:36 <boegel> or type (GSolution sol) (RandomGen gen) = ([sol],gen)
05:20:45 <boegel> if that pleases you more...
05:21:05 <boegel> I think they work both, but don't shoot me if they don't :) my syntax is a bit rusty
05:21:18 <paolino_> where is the synonim in
05:21:25 <paolino_> the second ?
05:22:11 <paolino_> I try first one
05:22:20 <boegel> synonym ? I'm not sure what you mean... the difference is that the second type takes 2 arguments, the first doesn't (the frist is an alias)
05:22:25 <boegel> *first
05:22:27 <wilx`> http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#type-synonyms
05:22:36 <wilx`> GHC specific extensions.
05:23:25 <boegel> wilx`: I don't think paolino_ is an advanced user, so maybe that's a bit over the top ?
05:23:32 <paolino_> GEvolution is missing inthe second
05:23:38 <boegel> I'm no advanced user either, for the record
05:23:39 <paolino_> surely
05:23:44 <boegel> paolino_: or, sorry
05:23:44 <paolino_> over the top
05:23:45 <wilx`> Neither am I :)
05:23:53 <boegel> or type GEvolution (GSolution sol) (RandomGen gen) = ([sol],gen)
05:24:12 <boegel> forgot the type name :)
05:24:26 <boegel> I know the first works, dunno about the second though...
05:25:18 <bosie> hello
05:25:52 <boegel> hey bosie
05:26:51 <paolino_> mmh GSolution and RandomGen are classes
05:27:30 <paolino_> I want to put class constraint on the type
05:27:38 <paolino_> GEvolution
05:28:52 <wilx`> Well, why don't you just try it?
05:30:21 <wilx`> Use -fglasgow-exts and try to use the first thing you pasted.
05:32:55 <boegel> @type round
05:32:55 <lambdabot> forall a b. (RealFrac a, Integral b) => a -> b
05:33:03 <dons> mmm. do I love sushi :)
05:33:15 <paolino_> wilx`, I am trying also to understand slowly
05:34:39 <dons> joelr, no not heavy duty. though simonM has. I guess you've read his web server paper?
05:34:44 <boegel> @pl map sum $ transpose $ zipWith (\x -> x +1) ls
05:34:45 <lambdabot> map sum (transpose (zipWith (1 +) ls))
05:34:51 <boegel> @pl map sum $ transpose ls
05:34:52 <lambdabot> map sum (transpose ls)
05:35:01 <boegel> @pl map (sum.transpose) ls
05:35:02 <lambdabot> map (sum . transpose) ls
05:35:09 <boegel> @pl map (sum.transpose)
05:35:09 <lambdabot> map (sum . transpose)
05:35:13 <boegel> @pl map sum $ transpose $ zipWith (\x -> x +1)
05:35:13 <lambdabot> map sum (transpose (zipWith (1 +)))
05:36:16 <paolino_> wilx`, so in haskell I can't build types with classes ?
05:36:29 <paolino_> (only with those extensions )
05:37:08 <wilx`> Yup, you cannot do that with plain Haskell98.
05:37:23 <boegel> @pl zipWith (\a b -> zipWith f a b) x y
05:37:24 <lambdabot> zipWith (zipWith f) x y
05:38:12 <ChronoWiz> someone was saying emacs was better than vim like an hour ago... i have one thing to say
05:38:24 <ChronoWiz> about emacs:
05:38:28 <ChronoWiz> RMS has RSI
05:38:52 <dons> vim and emacs are isomorphic
05:38:59 <wilx`> RSI?
05:39:04 <dons> this I learnt while writing yi
05:39:18 <paolino_> wilx`, does that hold also for  newtypes ?
05:39:50 <wilx`> paolino_, I am not sure.
05:40:28 <paolino_> wilx^ ,it compiles but than fail to declare sugnature with that
05:40:37 <paolino_>   generate' :: [GEvolution] ->Int -> [GEvolution]
05:40:47 <paolino_> makes it fail again
05:41:26 <wilx`> type GEvolution solution generator = (GSolution solution,RandomGen generator) => ([solution],generator)
05:41:30 <wilx`> Two type parameters.
05:42:09 <boegel> ChronoWiz: who's RMS ?
05:42:20 <boegel> Richard M. Stallman ?
05:42:38 <dons> does he really have RSI?
05:42:41 <ChronoWiz> yes and yes
05:42:45 <ChronoWiz> obviously from using emacs!
05:42:46 <dons> interesting
05:42:48 <ChronoWiz> he invented the damn thing
05:42:56 <ChronoWiz> ctrl-meta argh
05:43:01 <dons> well, you type a lot more keystrokes with emacs
05:43:29 <ChronoWiz> emacs is cool though
05:43:42 <ChronoWiz> but i wouldn't use it unless i really needed all the extra stuff
05:43:43 <dons> vim/vi sort of encode the keystroke prefix in the state, as a `mode'. saving keystrokes for good users.
05:44:42 <paolino_> wilx`,  thi is compiling: type GEvolution = (GSolution solution,RandomGen generator) => ([solution],generator)
05:44:52 * dons hunts around for more sushi
05:45:01 <paolino_> maybe we are talking about different things
05:48:11 <vegai> you have wild sushi where you live?
05:49:11 <dons> well, it's in the kitchen somewhere ;)
05:49:35 <vegai> the genetic biologists could do something useful for a change...
05:52:19 * paolino_ gives up understanding
05:52:46 <paolino_> anyway this is nice:
05:52:48 <paolino_> class GSolution solution where
05:52:48 <paolino_>   generators :: (RandomGen generator) => [[(solution,generator)] -> Int -> [(solution,generator)]]
05:55:04 <Cale> eivuokko: of course, it's okay for GHC to be linked statically with GMP
05:55:44 <Cale> it's the executables which it produces which may be of concern
05:56:31 <Cale> GHC itself satisfies the LGPL rules, since it provides more than is necessary to link against a different version of GMP
05:57:40 <Cale> The only concern is whether it statically links your code with GMP, which it might do, but all that you have to provide to your users is binary .o files for your modules (at user request), so that your program can be relinked if necessary.
05:58:50 <dons> hmm
05:59:09 <dons> it does statically link it, by default
05:59:30 <dons> linking and law, just shouldn't mix
06:05:32 <eivuokko> Cale, Yeah, ghc is no problem.
06:06:46 <dcoutts> boegel, still interested in OpenGL ?
06:10:02 <boegel> dcoutts: uh, yeah sure, although I don't have much time... is the HOpenGL binding in gtk2hs ready ?
06:11:07 <eivuokko> Cale, it is the annoying details like allowing limited reverse engineering and written offer valid for three years to get those object codes that is annoying.
06:11:30 <bosie> is there something like design patterns for haskell ?
06:11:44 <ProfTeggy> re
06:11:44 <eivuokko> bosie, they are more like idioms.
06:12:24 <bosie> kk
06:12:53 <eivuokko> bosie, Haskell programming style usually consists of fairly high level of abstraction compared to languages where design patterns come from that most design patterns are merely idioms.  Architecture level patterns of course apply pretyt much the same.
06:13:13 <bosie> well
06:14:54 <bosie> i do haskell programming primarly for university and i try to solve the examples from the classes. after each lecture the prof issues 5 excersices. one of them will be in an exam. so i try to solve them. as a matter of fact so far most of the excersices had the same ground problem but i always solved it in different ways kinda
06:15:34 <bosie> so i was wondering if there are some idioms who cover certain mechanism
06:17:11 <eivuokko> Ah.  Haskell wiki has style examples, or you could just ask here.
06:17:37 <bosie> haskell wiki ?
06:18:05 <eivuokko> @where wiki
06:18:06 <lambdabot> I know nothing about wiki.
06:18:08 <ValarQ> @wiki CommonHaskellIdioms
06:18:08 <lambdabot> http://www.haskell.org/hawiki/CommonHaskellIdioms
06:19:09 <bosie> eivuokko thx
06:20:40 <boegel> @eval (sum $ map (^^(-1)) $ [3.785584,3.286231,3.286123,3.286447,3.287203,3.770028,3.287095,3.286879,3.286663,3.286555] )^^(-1) * 9.0
06:20:41 <lambdabot> 3.0369496795904403
06:20:48 <boegel> @eval (sum $ map (^^(-1)) $ [3.785584,3.286231,3.286123,3.286447,3.287203,3.770028,3.287095,3.286879,3.286663,3.286555] )^^(-1) * 10.0
06:20:49 <lambdabot> 3.374388532878267
06:21:05 <boegel> @eval (sum $ map (^^(-1)) $ [3.785584,3.286231,3.286123,3.286447,3.287203,3.770028,3.287095,3.286879,3.286663] )^^(-1) * 9.0
06:21:06 <lambdabot> 3.3844384750101506
06:21:14 * boegel swears
06:21:51 <Cale> boegel: wha?
06:22:33 <boegel> Cale: :) the code I wrote used to works, I tested it, but the values I calculate and measure are different
06:22:54 <Cale> what are you computing?
06:23:22 <boegel> I'm aggregation measurements of 10^5 intervals to 10^6 intervals
06:24:08 <boegel> I don't get it, it worked when I wrote it at home :(
06:24:38 <Cale> you're taking the harmonic mean of the measurements there
06:25:45 <wilx`> Bah.
06:25:56 <wilx`> Has anybody don't BitTorrent client in Haskell yet?
06:26:07 <boegel> I have measurements of the form n/a, n/b, ... and I want the value for (a+b+...)(10*n)
06:26:16 <boegel> that's (a+b+...)/(10*n)
06:26:34 <Cale> n is the number of measurements?
06:26:36 <boegel> wilx`: shapr is working on it, and someone has extended his work
06:26:56 <boegel> Cale: n is the interval, yeah, so it's 10^5
06:27:29 <boegel> so I take the first 10 elements of the list, and compute the harmonic mean as you call it
06:27:31 <Cale> um, so you theoretically know a,b,c,...
06:27:38 <wilx`> Hmm.
06:28:04 <boegel> Cale: no, I don't know the interval size, it should work for several interval sizes
06:28:17 <boegel> the only thing I do know is the 'factor' , i.e. 10
06:28:35 <bosie> eivuokko well,  for example if i wanna solve a problem which calculates all permutations of the problem (all numbers with a cross sum N) then i would like to use code from another permutation problem i already solved.
06:28:43 <bosie> eivuokko if that made any sense
06:29:33 <boegel> n/a , n/b --> ( (n/a)^(-1) + (n/b)^(-1) + ...)^(-1) = (a/n + b/n + ....)^(-1) = ( (a+b+..)/n )^(-1) = n / (a+b+....)
06:30:01 <boegel> so I want (10*n)/(a+b+...c), no the converse as I told before
06:30:02 <Cale> yeah
06:30:07 <dcoutts> boegel, not quite, but nearly
06:30:11 <boegel> so it shoudl work...
06:30:18 <boegel> dcoutts: nice ! keep me posted
06:30:25 <dcoutts> boegel, I was hoping you could help be test it :-)
06:30:32 <boegel> dcoutts: hmm
06:30:42 <dcoutts> boegel, with your 3D Lsystem prog
06:30:48 <Cale> boegel: well, that calculation is correct anyway
06:30:49 <boegel> i don't have any programs to test it though... you could use my HaskLS program
06:30:57 <boegel> dcoutts: it available on my website
06:31:06 <dcoutts> boegel, yep
06:31:12 <Cale> bosie: hm?
06:31:13 <boegel> Cale: yeah, I suspect something else must've gone horribly wrong somewhere
06:31:42 <Cale> bosie: ah, you're looking for Haskell idioms?
06:31:46 <bosie> Cale whats the most efficient way to calculate all permutations ?
06:32:17 <bosie> Cale i pass a number (say 1000) and i wanna know how many numbers have the cross sum 1000
06:33:15 <bosie> Cale was wondering if there is an idiom for something like that, since imo the only diff compared to other problems would be how the permutation is build but the lists and comparision etc should be the same imo
06:33:20 <Cale> hm, cross sum?
06:33:27 <bosie> 19 = 10
06:33:30 <bosie> 21=3
06:33:37 <bosie> 888 = 24
06:33:51 <Cale> ah, digit sum
06:33:57 <bosie> kk
06:34:09 <bosie> digit sum yes
06:34:09 <bosie> ;)
06:34:23 <poetix> @seen shapr
06:34:24 <lambdabot> shapr is in #webwitches and #haskell. Last spoke 1 hour, 34 minutes and
06:34:24 <lambdabot> 40 seconds ago.
06:34:31 <Cale> well, you're looking for the number of partitions of 1000 into parts less than 10 then
06:35:04 <Cale> assuming that you're asking the question in a nonstupid way, so that you disallow zero digits :)
06:35:25 <Cale> (or are you bounding the numbers generated, or you just want to generate them all?)
06:35:26 <bosie> of course i disallow zero digits
06:35:28 <Cale> okay
06:35:40 <bosie> with zeros allowed it would always be infinite
06:35:50 <Cale> so you should be able to use some combinatorics to get a nice way to compute that directly
06:36:30 <bosie> hm
06:37:14 <Cale> It's the coefficient of x^n in 1/(1 - (x + x^2 + x^3 + ... + x^9))
06:37:24 <int-e> a_n = a_(n-1)+a_(n-2)+...+a_(n-9).
06:37:31 <int-e> same thing :P
06:37:36 <Cale> yep :)
06:37:44 <bosie> now i have to think about that lol
06:37:52 <int-e> (except that Cale's version also tells you the initial 9 coefficients)
06:39:25 <astrolabe> Same as the number of partitions of 1000 into less than 10 parts?
06:39:44 <Cale> astrolabe: yes, by flipping the Ferrers' diagram
06:39:50 <bosie> how do you get all the numbers by that ?
06:40:01 <astrolabe> Ah.  The only thing I remember from combinatorics :)
06:40:30 <Cale> erm, wait, we don't really want partitions do we?
06:40:37 <bosie> say you have 10 than a solution would be 19 or 91
06:40:38 <int-e> astrolabe: but the problem considers 9+1 to be different from 1+9, so that flipping around won't work ...
06:40:41 <Cale> because we're counting 12 and 21 as different
06:40:44 <Cale> yeah
06:40:57 <Cale> so it's not the same
06:41:04 <astrolabe> I need to scroll further
06:41:24 <astrolabe> So ordered partitions?
06:41:34 <Cale> astrolabe: how many decimal numbers with no zero digits have a particular digit sum
06:41:57 <Cale> or equivalently, how many strings on the alphabet {1,...,9} are there with a particular sum
06:43:00 <astrolabe> Sounds like an ideal dynamic programming problem to me.  I bet the maths is horrible.
06:43:10 <Cale> it's not that bad :)
06:43:26 <int-e> ah of course. the first 9 values are a_n = 2^(n-1) [1<=n<=9]
06:43:40 <Cale> int-e: yeah :)
06:44:10 <bosie> good thing i dont understand at all what you guys are doing ;)
06:44:34 <Cale> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}]), {x,0,10}][[3]]
06:44:35 <mbot> Cale: Terminated
06:44:35 <mbot>  
06:44:40 <Cale> hum
06:45:03 <Cale> oh
06:45:30 <Cale> mbot: @help math
06:45:31 <mbot>  @math <expr>, Mathematica interface plugin.
06:45:33 <Cale> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}]), {x,0,10}][[3]]
06:45:34 <mbot> Cale: Terminated
06:45:34 <mbot>  
06:45:41 <Cale> mbot: @math hello
06:45:42 <mbot> Cale: "Good day to you!"
06:45:47 <int-e> @math help
06:45:48 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
06:45:48 <mbot> int-e: "See http://documents.wolfram.com/v5/ for detailed Mathematica help."
06:46:00 <int-e> lambdabot: hmm?
06:46:01 <Cale> at first the mathematica module was unloaded
06:46:02 <bosie> so you are saying for say 5 you have 16 possibilities ?
06:46:12 <Cale> bosie: yeah
06:46:24 <dcoutts> @botsnack
06:46:25 <lambdabot> :)
06:46:25 <mbot> Unknown command, try @listcommands.
06:46:47 <Cale> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,10}][[3]]
06:46:49 <mbot> Cale: {1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511}
06:46:49 <dcoutts> mbot, you are not the true lambdabot!
06:46:51 <Cale> ah, there :)
06:46:56 <Cale> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,20}][[3]]
06:46:57 <mbot> Cale: {1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511, 1021, 2040, 4076, 8144,
06:46:57 <mbot> 16272,
06:46:57 <mbot>  32512, 64960, 129792, 259328, 518145}
06:47:08 <Cale> mbot: @part #haskell
06:47:29 <Cale> there are the first few coefficients for you :)
06:48:04 <bosie> for what ?
06:48:35 <Cale> for your problem
06:48:56 <Cale> that's the solution for n = 0, n = 1, n = 2, etc.
06:49:19 <bosie> @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,8}][[3]]
06:49:19 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
06:49:25 <bosie> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,8}][[3]]
06:49:27 <Cale> mbot left :)
06:49:32 <bosie> oh :(
06:49:35 <bosie> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,8}][[3]]
06:49:36 <mbot> bosie: {1, 1, 2, 4, 8, 16, 32, 64, 128}
06:49:36 <Cale> there :)
06:49:49 <bosie> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,2}][[3]]
06:49:50 <mbot> bosie: {1, 1, 2}
06:50:05 <bosie> i still dont get what those numbers are
06:50:21 <Cale> the number of strings of length n for n = 0 to 2
06:50:23 <Cale> er
06:50:25 <Cale> of sum n
06:50:38 <bosie> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,5}][[3]]
06:50:39 <mbot> bosie: {1, 1, 2, 4, 8, 16}
06:50:48 <Cale> (there's one string of sum 0, namely the empty string)
06:51:07 <bosie> you mean when i mix them toghether i get a sum for n=5 ?
06:51:24 <shapr> poetix: hiya!
06:51:47 <bosie> no that cant be either
06:51:49 <Cale> the number of strings on {1,...,9} with sum n = 5 is 16
06:52:08 <bosie> ah
06:52:23 <xerox> Yow!
06:52:24 <bosie> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html... there is no Series[]
06:52:36 <Cale> that's a mathematica command
06:52:38 <int-e> the number of strings on {1...9} with sum = 1000000 is a 300602 digit number ;)
06:52:38 <Cale> not Haskell
06:52:40 <bosie> kk
06:52:44 <bosie> oh
06:52:50 <astrolabe> groan, I've just seen the 2^(n-1) thing :(
06:53:06 <int-e> for 1000 it's only 301 digits.
06:53:21 <bosie> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,20}][[3]]
06:53:23 <mbot> bosie: {1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511, 1021, 2040, 4076, 8144,
06:53:23 <mbot> 16272,
06:53:23 <mbot>  32512, 64960, 129792, 259328, 518145}
06:53:48 <int-e> for 100, it's 578898605322411968407792545793
06:53:57 <bosie> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,50}][[3]]
06:53:58 <mbot> bosie: {1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511, 1021, 2040, 4076, 8144,
06:53:58 <mbot> 16272,
06:53:58 <mbot>  32512, 64960, 129792, 259328, 518145, 1035269, 2068498, 4132920, 8257696,
06:53:58 <mbot>  16499120, 32965728, 65866496, 131603200, 262947072, 525375999, 1049716729,
06:54:21 <bosie> right, it seems its not really effecient ;)
06:54:32 <shapr> poetix: awake?
06:54:41 <int-e> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,100,100}][[3]]
06:54:42 <mbot> int-e: {-1/1010101010101010099, 90807060504030201/
06:54:42 <mbot>  1020304050607080906050403020099989801, -4581062126210580457256423020120602/
06:54:42 <mbot>  1030610152128364549515149453931210907029997969698000299,
06:55:07 <int-e> hmm. I guess that was wrong.
06:55:33 <Cale> that's the expansion at x = 100
06:55:45 <int-e> ah I see
06:55:51 <int-e> ok, I didn't want that.
06:55:54 <bosie> trillian crashed
06:56:04 <shapr> mbot: @math Series[1/(1-Product[x^i,{i,1,3}]), {x,0,9}][[5]]
06:56:05 <mbot> shapr: 10
06:56:31 <Cale> mbot: @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,100}][[3]][[101]]
06:56:32 <mbot> Cale: 578898605322411968407792545793
06:56:55 <shapr> How are these different from list comps?
06:57:28 <Cale> It's generating the coefficients of a power series
06:57:33 <poetix> shapr: Distracted.
06:57:37 <Cale> I suppose you could work with list comprehensions
06:57:39 <shapr> Cale: too bad I have no clue what that means.
06:58:00 * xerox bounces here and there
06:58:00 <Cale> shapr: well, do you remember Taylor series from Calculus?
06:58:08 <shapr> I never had calculus.
06:58:11 <Cale> ah, okay
06:58:21 <poetix> shapr: -> overflow
06:58:27 <shapr> I've taught some of it to myself, but I never got to Taylor series.
06:58:32 <Cale> so there's a way to take sufficiently nice functions, and find polynomials which approximate them
06:59:09 <shapr> Sort of like an incremental interpolated solution?
06:59:41 <Cale> well, you use the information about the derivatives at a point on the function
06:59:41 <shapr> The more terms you solve from a series, the closer you get to the solution, right?
06:59:44 <Cale> yeah
06:59:50 <Cale> hopefully :)
07:00:00 <Cale> at least, for particularly nice functions, it will work
07:00:01 <shapr> Oh, so it works from the derivatives back to the solution?
07:00:04 <Cale> yeah
07:00:16 <shapr> Dang, I thought of that ...
07:00:30 <shapr> I want to use it for fractal compression though.
07:00:47 <xerox> D'oh!
07:01:16 <Cale> it turns out that you can extract the notion of these series and formalise it, removing the notion of real valued functions that was in behind it
07:01:31 <shapr> What good is that?
07:01:39 <Cale> and that formalisation is what gets used in combinatorics to count things in a really powerful way
07:01:41 <shapr> What do the formal series do for you?
07:01:53 <Cale> the formal series are kind of like lists
07:02:00 <Cale> but with a particular multiplication on them
07:02:19 <shapr> I should really take some math classes someday.
07:02:34 <astrolabe> yes!
07:02:37 <Cale> You use the lists to count the number of things you're interested in with "size" n, whatever size means to you
07:03:10 <bosie> do i have to include some library to use fromInt ?
07:03:12 <Cale> Then adding the lists/series corresponds with disjoint union of the sets of things
07:03:13 <shapr> Hm, I'll add this to my things to learn. Start with the Taylor series?
07:03:25 <Cale> bosie: fromInt no longer exists, use fromIntegral
07:03:46 <Cale> shapr: well, you could start in a number of places, but Taylor series might be good
07:04:10 <bosie> thank you
07:04:19 <Cale> shapr: if you're interested, the best intro to calculus/mathematics text I know of is Michael Spivak's book "Calculus"
07:05:09 <Cale> It has excellent coverage of everything involved in building up the real numbers and proving things about how they work.
07:05:35 <Cale> (at least, extending into Calculus of a single variable)
07:05:36 * Frederick hates calculus
07:06:18 <Cale> Anyway, these formal series, the operations of addition and multiplication on them correspond to sticking the sets of objects that they count together in various ways
07:06:30 <Cale> addition corresponds to disjoint union
07:06:55 <Cale> multiplication corresponds to Cartesian product (where you define the weight of a pair (a,b) to be the sum of the weights of a and b)
07:07:21 <Cale> there are other things which you can talk about too, like formal differentiation
07:08:01 <bosie> @math Series[1/(1-(Sum[x^i,{i,1,9}])), {x,0,20}][[3]]
07:08:02 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
07:08:02 <mbot> bosie: {1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511, 1021, 2040, 4076, 8144,
07:08:02 <mbot> 16272,
07:08:02 <mbot>  32512, 64960, 129792, 259328, 518145}
07:09:27 <bosie> Cale 2^(n-1) doesnt provide the real answer  but it comes close ot it or ?
07:09:59 <Cale> 2^(n-1) works for n = 1 to 9
07:10:10 <Cale> past that, it fails
07:10:11 <bosie> ah
07:11:13 <int-e> for n=10, it'll also count 10 = 10 along with 10=9+1, 10 = 8+2 and so on, and thus be too large by 1
07:11:26 <Cale> yeah
07:11:35 <bosie> yup
07:13:23 <bosie> friend has a solution which takes 90 seconds for n=20
07:13:23 <bosie> ....
07:14:25 <Cale> yeah, you can do a lot better than that :)
07:14:34 <Cale> that's probably brute force generation or something
07:14:43 <bosie> yea
07:14:44 <bosie> ;)
07:15:22 * int-e has one that takes 5 seconds for 1000000 :)
07:15:25 <bosie> not that bad for brute force so
07:15:46 <bosie> int-e in haskell ?
07:16:02 <int-e> yes
07:16:29 <bosie> aw
07:17:02 <Cale> mbot: @math Series[1/(1 - (Sum[x^i, {i, 1, 9}])) - (1 + x/(1 - 2x)), {x, 0, 20}] // Normal
07:17:03 <mbot> Cale: -x^10 - 3*x^11 - 8*x^12 - 20*x^13 - 48*x^14 - 112*x^15 - 256*x^16 -
07:17:03 <mbot>  576*x^17 - 1280*x^18 - 2816*x^19 - 6143*x^20
07:17:53 <shapr> Cale: ok, I'll add that book to my wishlist.
07:17:59 <Cale> hehe, how much it's off from the powers of 2
07:18:02 <Cale> shapr: :)
07:18:31 <Cale> shapr: It can be a bit expensive, but it's very much worth it, in my opinion
07:18:41 <bosie> Cale which book ?
07:18:44 <Cale> mbot: @part #haskell
07:18:55 <Cale> Michael Spivak's Calculus
07:19:19 <shapr> What about the Haskell Road to Logic and Maths?
07:19:30 <Cale> (note that this is not the same as "Calculus on Manifolds", which is good, but not the same book)
07:19:41 <shapr> What about Spivak's "Hitchhiker's Guide to Calculus" ?
07:19:59 <bosie> int-e do you mind sharing the code with me ?
07:20:05 <Cale> I don't know about the Hitchhiker's Guide to Calculus, I haven't seen it before
07:20:25 <Cale> HR is decent if you're a beginner to both Haskell and mathematics
07:20:52 <Cale> We used HR to teach kids math and Haskell as part of a teaching experiment when I was at McMaster
07:21:06 <Cale> for some reason, the full text of HR is still online
07:21:09 <bosie> you teach haskell to kids? cathper
07:21:17 <bosie> Cale
07:21:22 <Cale> bosie: yeah, monads and all :)
07:21:31 <dons> Cale, are you going to submit the @math plugin back to the main repo?
07:21:32 <bosie> what age are those kids?
07:21:34 <Cale> 11 year old kids :)
07:21:38 <bosie> damn
07:21:54 <Cale> dons: well, I could, but it's not of any use to anyone who doesn't have mathematica
07:22:00 <shapr> Cale: You found it?
07:22:01 <bosie> Cale some elite intelligent kids eh?
07:22:06 <int-e> @math Solve[x^10-Sum[x^i,{i,1,9}] == 0, x] //N
07:22:07 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
07:22:15 <Cale> shapr: it's where it was when the book was still in beta
07:22:15 <dons> right, but maybe some of the other people who're using lambdabot now have mathematica?
07:22:20 <Cale> okay
07:22:24 <dons> i know vegai is running it for his uni course
07:22:30 <dons> there must be others
07:22:32 <int-e> well, whatever. a_n is about 1.99803^n
07:22:34 * xerox raises hand
07:22:36 <Cale> Well, it's basically the same as the plugs plugin, but sure :)
07:22:51 <shapr> Cale: I already have a full copy, so...
07:22:51 <dons> but the regexes are different, aren't they?
07:23:23 <Cale> http://www.cwi.nl/~jve/HR/HR.ps.gz
07:23:49 <dons> Cale, does @math have a time bound?
07:24:14 * SamB wishes he had mathematica, but you, like, have to PAY for it... and like its not cheap...
07:24:15 <Cale> yeah, via the runmath script
07:24:16 <dons> also, can you do IO with @math?
07:24:43 <Cale> dons: I'm not 100% sure it's safe, but I've managed to exclude everything I could find
07:24:51 <dons> right, so runmath == runplugs?
07:24:53 <int-e> bosie: I wrote this a while ago: http://web.inf.tu-dresden.de/~bf3/haskell/LinRec.hs ... and used it, get [1,1,1,1,1,1,1,1,1] [0,0,0,0,0,0,0,0,1] (1000000+8) . note that it will take *a lot* longer to print than to calculate the result, so you probably want to take the time of <term> `mod` 31 or something like that
07:25:04 <Cale> dons: well, it's similar in nature :)
07:25:14 <dons> ok, I get it. sounds good
07:25:22 <musasabi> How do I convert a CalendarTime into a ClockTime ?
07:25:36 <bosie> dresden cool
07:25:41 <dons> @hoogle CalendarTime -> Clocktime
07:25:42 <lambdabot> No matches, try a more general search
07:25:44 <int-e> bosie: also the comments in that module do not really explain what I'm doing.
07:25:45 <dons> @hoogle CalendarTime -> ClockTime
07:25:45 <lambdabot> System.Time.toClockTime :: CalendarTime -> ClockTime
07:25:49 <dons> ah ha!
07:25:52 <dons> hoogle rules
07:26:44 <Cale> vx.hn.org/autoshare/mathmodule.tar.bz2
07:26:50 <dons> cheers
07:27:09 <Cale> no guarantees that it's safe
07:27:15 <int-e> bosie: in fact they don't even explain how to use that beast.
07:27:19 <Cale> look carefully at how it works :)
07:27:30 <Cale> (it's actually kind of hackish)
07:27:32 <bosie> int-e yea i am wondering that now hehe
07:27:38 <dons> Cale, I won't run it in #haskell, but it may be useful to others
07:28:05 <dons> it fits under the "no guarantees , distributed in the hope it will be useful " clause
07:28:10 <Cale> okay :)
07:28:19 <musasabi> hmm, why didn't I find that looking at the System.Time docs :-(
07:28:24 <Cale> no guarantees that running it is even legal :)
07:28:39 <dons> :D cool
07:28:52 <Cale> though I think Wolfram really should be happy to get such good advertising
07:29:09 <Cale> I know that several people have bought mathematica after playing with the bot.
07:29:16 <Cale> (students, though)
07:29:26 <dons> hmm. maybe you should get a commission from them
07:29:29 <Cale> heh
07:30:00 <dons> i know they have some web interface, but it goes via their server only
07:30:03 <bosie> Cale the 11yr old students bought it? ;)
07:30:06 <dons> weird and paranoid
07:30:26 <int-e> bosie: for 'get', you give a linear recurrence, a_n = b_1*a_(n-k)+b_2*a_(n-k+1)...b_k*a_(n-1) becomes [b_1,...,b_k], then the initial elements a_0, a_1, ..., a_(k-1) as another list, then the number of the element that you want to calculate
07:30:30 <Cale> bosie: nope :)
07:30:51 <SamB> I don't think wolfram will be particularly worried about something that prevents you from doing IO and only gives you a few lines of output at a time...
07:30:59 <Cale> SamB: yeah
07:31:19 <Cale> the current memory/time usage settings are draconian too
07:31:34 <dons> but we could solve some crucial problem, and never have to pay them!
07:31:34 <int-e> bosie: the other functions, step and generate, take the same two lists.
07:33:13 <dons> is mathematica an elegant language? how good are their libraries?
07:33:28 <dons> could it be replaced with sufficient haskell libs
07:33:28 <dons> ?
07:34:19 <SamB> dons: of course it could! but probably only if you reimplemented mathematica as a Haskell library!
07:34:43 <dons> i was wondering if there was some killer feature.
07:35:14 <dons> that they had the secret too
07:35:18 <dons> s/too/to/
07:35:31 <SamB> if that was it, wouldn't they mention it on their website?
07:35:57 <dons> ok. so they don't have a monopoly on math then :)
07:37:03 <dons> is there a meta theory on how to map math to hardware that they use?
07:37:16 <dons> is it like a theorem prover, or more like a fp language?
07:37:21 <dons> or something worse..
07:37:56 <dons> my only experience of these math tools was maple a few years ago, and it was ugly
07:38:06 <dcoutts> anyone here know about OpenGL?
07:38:22 <dcoutts> I'm getting all my polgons overlap incorrectly
07:38:49 <dcoutts> eg a rotating cube but the back faces appear in front of the front ones
07:38:56 <SamB> Its probably nicer than maple, or people probably wouldn't say such nice things about it on Ward's Wiki
07:39:01 <dcoutts> it's like I'm missing the depth buffer
07:39:14 * boegel leaves for home
07:39:19 <boegel> have a nice weekend everyone !
07:39:23 <SamB> dcoutts: maybe you have the faces inside-out?
07:39:46 <SamB> try reversing the order of the vertices?
07:41:30 <dcoutts> SamB, hmm possible, but it'd be odd. I adapted it from a working program that used GLUT. I'm now using Gtk2Hs. But I'd expect the HOpenGL bits to still be the same.
07:41:43 <SamB> dcoutts: oh, interesting.
07:42:29 <dons> ah, it's all term rewriting. very nice
07:43:28 <dons> and functions are first class, and it needs to be pure. hmm, but there's also dynamic scope
07:44:57 <SamB> dons: well, try doing a decently-usable full-blown CMS without dynamic scope some time...
07:45:39 <dons> CMS?
07:45:48 <SamB> Computer Mathematics System
07:46:02 <bosie> and i was about to say content managment system
07:46:10 <SamB> should I just say CAS?
07:47:05 <dons> why is dynamic scope required? it's not some fundamental requirement
07:47:28 <Cale> Mathematica is kind of fundamentally broken, but it's been made to work well.
07:47:43 <dons> ah Cale, how so? this is what I'm interested in
07:47:55 <Cale> It's elegant in some ways, but the evaluation scheme is crazy.
07:48:09 <Cale> It's ad-hoc typeless pattern matching
07:48:16 <bosie> erm could please someone tell me how to stop ghci from executing my program
07:48:27 <Cale> bosie: Ctrl-C
07:48:35 <bosie> that crashes ghci
07:48:42 <Cale> dons: You can define what are called upvalues
07:48:48 <SamB> bosie: what crazy OS are you on?
07:48:49 <Cale> I can write Cos[x] ^= 2
07:48:54 <bosie> windows ;)
07:49:00 <Cale> and that becomes part of the definition of x, not Cos
07:49:03 <SamB> bosie: I suspected as much
07:49:05 <dons> hmm.
07:49:07 <dons> scary Cale
07:49:33 <xerox> dons: indeed.
07:49:45 <Cale> You can define arbitrary code transformations to reach in and occur in whatever part of the evaluation you'd like
07:49:52 <dons> it's always interesting to see languages that emerge in fields where they don't know about language design.
07:49:59 <SamB> anybody know how to stop GHCi without killing it on windows?
07:50:07 <Cale> It's really not easy to think about, but teriffically flexible
07:50:25 <dons> but are  people concerned about reasoning?
07:50:37 <dons> or is this for the theorem prover crowd
07:51:05 <Cale> Mathematica isn't something which the theorem prover crowd would be happy with :)
07:51:21 <dons> do people do mathematical proofs in mathematica, and submit them at conferences?
07:51:24 <dons> `proofs'
07:51:34 <Cale> only insane people
07:51:42 <Cale> Nobody real :)
07:51:59 <SamB> Cale: you mean, fictitious people?
07:52:09 <musasabi> dons: most mathematicians I know prefer to work with a pen and paper. If they gather they like blackboards and sofas.
07:52:19 <Cale> heh, fictitious mathematicians, I suppose they might be real people :)
07:52:41 <dons> musasabi, yeah. some like theorem provers though, these days :)
07:52:48 <dons> Isabelle, at leats
07:52:55 <Cale> Doron Zeilberger is sort of a real mathematician, but he's a bit of a nut. He uses maple.
07:53:22 <Cale> He does have some nice methods, but his philosophy is a bit skewed :)
07:54:05 <Cale> http://www.math.rutgers.edu/~zeilberg/ -- in particular, check out the opinions page. Sometimes he's right, sometimes he's wrong, but he's always inflammatory!
07:55:18 <Cale> http://www.math.rutgers.edu/~zeilberg/GT.html -- heh
07:56:58 <dons> @localtime dons
07:57:01 <lambdabot> Local time for dons is Sat Nov  5 02:51:03 2005
07:57:03 <dons> night!
07:57:07 <Cale> night!
07:57:08 <dcoutts> yay! I've got the spinning cube working with proper depth and face culling
07:57:17 <xerox> dcoutts++!
07:57:18 <Cale> dcoutts: gtk2hs3d?
07:57:24 <xerox> Goodnight dons.
07:57:45 <dcoutts> it's was just a matter of doing the gl initialisation within the appropriate calls to direct the gl input to the paricular widget
07:58:16 <dcoutts> so in the GtkGlExt interface one has to say "direct gl calls to that widget"
07:59:04 <dcoutts> including setting up things like the depth buffer and depth comparison
07:59:15 <joelr> what is the debugger-geni they are referring to here? http://haskell.org/hawiki/Profiling
07:59:25 <dcoutts> and all GL calls have to be bracketed within that
07:59:40 <SamB> dcoutts: yeah, it did sound like an initialisation problem...
07:59:49 <dcoutts> I'll see about providing a convenience function to make that a bit easier
07:59:53 <dcoutts> SamB, yeah
08:01:03 * joelr is trying to profile for the first time
08:04:11 <joelr> how do you profile?
08:04:58 <joelr> aha, found it
08:10:24 <joelr> how do i build a cabalized library for profiling?
08:10:47 <joelr> i'm trying this on my code ghc -prof --make Logon.hs -o logon -package Script
08:11:19 <joelr> and although the package is installed centrally it says it cannot find Script (from import Script in Logon.hs)
08:11:49 <musasabi> joelr: you build the cabal package with profiling.
08:12:04 <joelr> so i give it the -prof -auto-all options?
08:12:07 <joelr> +RTS also?
08:12:30 <musasabi> joelr: that is done with a recent version of cabal by adding -p to the configure phase.
08:12:38 <joelr> ah!
08:12:44 <joelr> let me try
08:13:09 <joelr> hmm
08:13:16 <joelr> ./setup configure -p does not work
08:13:30 <musasabi> Do you have a new version of Cabal?
08:13:44 <joelr> no idea, i think i hav ethe one that came with ghc 6.4.1
08:14:02 <musasabi> You might want to upgrade Cabal and then retry.
08:14:07 <joelr> let me try
08:14:32 <joelr> i'm pulling the latest from darcs
08:23:08 <shapr> dcoutts: yIDE-gl ?
08:25:54 <joelr> do i need pfsesetup?
08:26:04 <joelr> configure: No pfesetup found
08:27:45 <musasabi> I don't think so (I don't have a pfesetup and things work fine)
08:28:44 <dcoutts> shapr, heh, possible, though I'm not sure I see the use-case
08:29:53 <shapr> speed
08:30:09 <shapr> have you seen slava pestov's recent gl-editor work?
08:30:40 <shapr> http://factor-language.blogspot.com/
08:31:57 <joelr> i just ran -Wall for the first time. i lived in the dark :(
08:32:15 <shapr> Ah, there's so much to learn :-)
08:33:12 <joelr> Could not find module `Data.FastPackedString':
08:33:27 <joelr> why would i get this if i'm including fps in my list of dependencies in cabal?
08:36:55 <Lemmih> Did you reconfigure?
08:37:04 <joelr> i built setup
08:37:06 <joelr> with --make
08:37:35 <joelr> and then did setup --configure=/opt/local -p
08:41:05 <Lemmih> joelr: And it found the fps package?
08:41:11 <joelr> yes
08:41:54 <Lemmih> And you can import Data.FastPackedString from GHCi?
08:41:59 <joelr> yes
08:42:04 <joelr> this is happening with the new cabal
08:42:05 <joelr> latest
08:42:55 <shapr> hiya snowzz, learning Haskell?
08:43:23 <snowzz> hi shapr. yep noob here. =)
08:43:31 <shapr> Do you have any questions?
08:43:33 <joelr> Lemmih: it's strange
08:43:33 <Lemmih> joelr: Does Cabal run ghc with '-package fps'?
08:43:40 <joelr> no idea
08:43:50 <Lemmih> (./setup build -v)
08:43:50 <snowzz> shapr: heard about haskell 3 days ago
08:43:58 <shapr> snowzz: So, learning for fun then?
08:44:37 <snowzz> shapr: yes =).
08:45:05 <snowzz> shapr: haskell.org is awesome
08:46:46 <snowzz> anyways, im still a noob.... can anyone suggest a linux distro with lots of haskell packages?
08:47:47 <SamB> snowzz: debian has a good few...
08:48:07 <snowzz> im currently running sid... but it the versions arent recent
08:48:45 <SamB> well, testing has okay versions...
08:49:15 <dcoutts> boegel, SamB: http://haskell.org/gtk2hs/archives/2005/11/04/start-of-opengl-binding/
08:49:21 <joelr> Lemmih: giv ee a se
08:49:27 <SamB> and sid is what, unstable? that should be more recent.
08:49:58 <snowzz> yup sid = unstable
08:50:01 <snowzz> i tried... pinning ghc. since i wanted gtk2hs
08:50:07 <snowzz> but its old
08:50:41 <snowzz> i get errors on hugs when trying parsec
08:50:43 <joelr> Lemmih: yes, it does
08:50:59 <dcoutts> snowzz, up to date gtk2hs packages will be in debain soon. Marcot has been working on it.
08:51:00 <shapr> snowzz: I'm using debian/unstable with ghc6
08:51:22 <dcoutts> I think gtk2hs-0.9.9 might already be in the unstable collection
08:51:26 <SamB> there are library packages in debian?
08:51:31 <snowzz> dcoutts, cool
08:51:32 <shapr> sure, lotsa
08:51:39 <Lemmih> joelr: That's weird.
08:51:48 <dcoutts> apparently it's been sitting in "NEW" for a couple weeks because of some backlog or something
08:51:50 <joelr> Lemmih: /opt/local/bin/ghc -package-name Script --make -ffi -fglasgow-exts -Wall -hide-all-packages -i -idist/build/autogen -i. -odir dist/build -hidir dist/build -package base-1.0 -package mtl-1.0 -package template-haskell-1.0 -package network-1.0 -package fps-0.1
08:52:14 <dcoutts> xerox, ping
08:52:16 * SamB can't depend on them being available for the ghc he has installed anyways, though...
08:52:25 <xerox> dcoutts, bong
08:53:42 <snowzz> dcoutts, just did an apt-get update, still not there. is there a repo i missed?
08:54:12 <SamB> snowzz: don't worry, just build. though it can take a while...
08:54:13 <shapr> haskell-unsafe?
08:54:38 <snowzz> added haskell-unsafe already
08:54:46 <snowzz> but gtk2hs is still 0.9.6-0pre1
08:55:19 * snowzz wget + build mode
08:55:24 <snowzz> =)
08:55:39 <SamB> darcs get?
08:55:44 <joelr> i've got cabal issues, damn
08:56:03 <joelr> runhaskell Setup.hs configure --prefix=/opt/local
08:56:09 <joelr> unknown package: Cabal-1.0
08:56:12 <joelr> why would that be?
08:56:26 <joelr> i did install cabal-1.1.4 and unregistered the earlier one
08:57:21 <SamB> joelr: maybe you have something else that depends on the earlier one?
08:57:40 <joelr> i just tried to configure fps, i guess i need to rebuild stuff that fps depends on
08:57:51 <joelr> right?
08:58:04 <SamB> joelr: its a good thing to try
08:58:14 <dcoutts> xerox, see: http://haskell.org/gtk2hs/archives/2005/11/04/start-of-opengl-binding/
08:58:21 <joelr> the only issue is that fps does not depend on anything
08:58:24 <joelr> but base an dunix
08:59:12 <xerox> @karma+ dcoutts -- that's cool!!
08:59:13 <lambdabot> dcoutts's karma raised to 6.
08:59:17 <dcoutts> snowzz, ask markcot or Igloo
08:59:57 <dcoutts> xerox, :-) (I've been getting a lot of karma recently)
09:00:22 <xerox> And I got the B.Mandelbrot autograph! :D
09:00:27 <dcoutts> xerox, cool!
09:00:48 <dcoutts> that must be positive karma :-)
09:00:51 <dcoutts> @karma+ xerox
09:00:52 <lambdabot> xerox's karma raised to 9.
09:01:02 <Cale> ah, cool
09:01:11 <Cale> yeah you mentioned going to a talk by him?
09:01:13 <joelr> i'm getting quite a few of these lately
09:01:13 <xerox> Thanks :D  It is cool.
09:01:14 <joelr> ghc-6.4.1: ghc-6.4.1: panic! (the `impossible' happened, GHC version 6.4.1):
09:01:14 <joelr>         unknown exception
09:01:20 <snowzz> shapr: thanks, this channel is really friendly
09:01:28 <snowzz> =)
09:01:28 <xerox> Cale: yes!
09:01:36 <Cale> what did he talk about?
09:01:38 <xerox> Cale: fractal economics :D
09:01:42 <Cale> ah :)
09:01:43 <dcoutts> joelr, tell us what this says: ghc-pkg field Cabal depends
09:02:07 <joelr> depends: base-1.0
09:02:28 <xerox> Cale: he didn't go much in details, but it's like using rewriting systems to calculate stocks' graphs and such
09:02:50 <joelr> so runhaskell Setup.hs configure --prefix=/opt/local did not work
09:02:59 <joelr> ghc --make Setup.hs -o setup did work
09:03:07 <Cale> xerox: neat :)
09:03:11 <dcoutts> joelr, oh ok, then it's not the problem I suspected
09:03:11 <xerox> He noticed the self-similarity (typical of fractals at different levels of zoom) in the peaks (which in economics are meant to be more important than the daily variation) saw on different scales.
09:03:12 <joelr> with the follow-up setup configure
09:03:17 <xerox> Cale: it indeed is!
09:03:34 <xerox> So he tried to make up a way to generate those graphs, the image were very, very nice.
09:03:45 <xerox> I did video-record nearly the whole thing :-)
09:03:51 <Cale> cool
09:04:03 <xerox> Via the cellphone, so it's not very good, but I think it's audible.
09:04:13 <shapr> snowzz: we try
09:04:29 <xerox> It was like, record, save, send via bluetooth to the ibook of my friend, delete, record -> recur
09:04:32 <shapr> snowzz: if you have anymore questions, feel free to ask
09:04:45 <xerox> I'll show you as soon as I get the videos back :-)
09:04:51 <Cale> :)
09:05:34 <snowzz> shapr: =)
09:20:12 <beelsebob_> /me tries to figure out how to put together a darcs patch
09:20:16 * beelsebob_ fails
09:20:22 * beelsebob_ wondres how he /med
09:20:25 <xerox> What do you mean?
09:20:38 <xerox> /me thinks -- ;)
09:20:48 <int-e> //me thinks harder
09:21:04 <beelsebob_> what commands do I need to issue to darcs to get it to find the files I changed, build a patch, and then suubmit it?
09:21:23 <beelsebob_> once I've done this I'll deffinately be a 5th dan... submitted code to YHC
09:21:32 <eivuokko> darcs record (possibly multiple times), darcs send
09:22:16 <xerox> darcs record --all ?
09:22:36 <xerox> darcs whatsnew tells you about what are the modifications made since the last recorded state
09:22:43 <eivuokko> darcs whats (maybe with -s and -l) to see diff/changed files/added files.  darcs record to take some or all of changes and put together a patch, darcs send to send that patch to someone
09:22:53 * beelsebob_ wonders why darcs record is showing him things he hasn't edited
09:22:54 <xerox> :-)
09:23:13 <xerox> The cool thing is that it is interactive, so you could reject them.
09:23:17 <beelsebob_> hunk ./inst/lib/hsffi.h 30
09:23:17 <beelsebob_> +void prim_addFun(Char* name, Int arity, CFunction func);
09:23:18 <beelsebob_> +void prim_addCon(Char* name, Int size, Int number, Int flags);
09:23:18 * beelsebob_ has not changed this file at all
09:23:25 <beelsebob_> I could... but why are they there?
09:23:49 <eivuokko> I recommend in that case, take copy of your checkout and darcs revert changes you think are wrong.
09:24:27 <eivuokko> Or possibly darcs record -a and darcs send -o to a file, darcs unrecord to get same state, but changes safely in a file if you need them.
09:24:44 <beelsebob_> but... I've never touched the files... I don't know why darcs is saying they've changed
09:24:54 <eivuokko> Something has.
09:25:20 <eivuokko> The automatic code feature isn't ready yet.
09:25:38 <ProfTeggy> Nice weekend all.
09:29:41 <snowzz> thanks everyone. gtg. =)
09:36:46 <joelr> musasabi: ping
09:38:38 <musasabi> pong
09:39:06 <joelr> musasabi: question... so once i build the stuff with profiling i just run the binary with some options and that's it?
09:40:12 <musasabi> yes
09:40:31 <joelr> musasabi: also, you wouldn't know what changed in the new cabal? because it can't find Data.FastPackedString now
09:40:43 <joelr> although it's installed
09:41:04 <musasabi> Does "ghc-pkg list" show it?
09:41:09 <joelr> yep
09:41:16 <joelr> and i can load it in the prelude
09:41:16 <musasabi> and is it in build-depends ?
09:41:20 <joelr> and it was working fine before :)
09:41:25 <joelr> musasabi: correct
09:41:37 <joelr> musasabi: and it's being passed as a -package option to ghc by cabal
09:42:34 <musasabi> joelr: I would try adding -v to the command line and get the exact GHC command used. Then debug why that does not work.
09:42:54 <joelr> musasabi: how do you debug that?
09:43:03 <joelr> because i see -package fps-0.1
09:43:22 <joelr> and i just rebuilt and reinstalled fps
09:44:15 <joelr> musasabi: somehow i'm suspecting the new cabal had something to do with this... don't know how
09:44:33 <musasabi> I don't think it should have.
09:45:12 <musasabi> joelr: you might want to rebuild setup.exe from Setup.lhs and ./setup clean and see if it makes the problem go away
09:45:17 <mwc> JohnMeacham: How's jhc coming these days?
09:45:26 <joelr> musasabi: let me try
09:48:19 <joelr> musasabi: the interesting thing is that a lot of other modules use fps but it only barfs on particular ones
09:48:46 <joelr> musasabi: it built without -p
09:48:57 <joelr> musasabi: do i have to have a -p version of fps as well/
09:49:07 <musasabi> joelr: yes.
09:49:32 <musasabi> Normal and profiling versions of libraries are separate things for GHC.
09:49:54 <joelr> musasabi: so i build it one with configure -p and once without?
09:50:06 <joelr> musasabi: or is there a way to build both at the same time?
09:50:50 <musasabi> joelr: make a short script which does 1) build setup, 2) configure + build + install, 3) configure -p + build + install, 4) clean
09:51:04 <joelr> musasabi: ok, trying
09:51:32 <joelr> musasabi: how do i see the profiled libraries with  ghc-pkg?
09:52:15 <musasabi> joelr: I don't think they are separately showed... which is quite irksome.
09:52:35 <joelr> interestnig
09:52:44 <joelr> i built configured with -p
09:52:49 <joelr> ar: creating archive dist/build/libHSfps-0.1.a
09:52:50 <joelr> ar: creating archive dist/build/libHSfps-0.1_p.a
09:52:50 <joelr> b
09:52:56 <joelr> so it did build both?
09:59:45 <joelr> banky +RTS -p -RTS chesmsh.pov cam 100
09:59:55 <joelr> what's the point of +RTS and -RTS together?
10:00:44 <musasabi> joelr: so you can have +RTS -opt1 ... -optN -RTS -progArgK ...
10:01:04 <musasabi> joelr: of course one usually just writes: banky chesmsh.pov cam 100 +RTS -p
10:01:25 <joelr> musasabi: so if i built the binary with ghc -prof --make -o logon -package Script Logon.hs
10:01:31 <joelr> do i still need +RTS -p?
10:01:42 <joelr> to run it
10:02:38 <musasabi> joelr: +RTS -p causes the profile info to be actually written out.
10:02:57 <joelr> musasabi: strange, i thought i saw it generated anyway. *.hp
10:03:15 <joelr> heap*hp heap*ps
10:03:47 <SyntaxNinja> has anyone in the history of IRC ever used memoserv?
10:03:48 <joelr> i must be wrong, cause i copied something from the wiki page on profiling and ran that
10:04:25 <musasabi> SyntaxNinja: yes.
10:05:22 <SyntaxNinja> Lemmih!
10:09:22 <joelr> are there any resources on how to decipher .prof output?
10:10:36 <dcoutts> joelr, there is a profile viewer in the gtk2hs demo collection
10:11:04 <joelr> 	total time  =       37.00 secs   (1850 ticks @ 20 ms)
10:11:04 <joelr> 	total alloc = 1,394,764,176 bytes  (excludes profiling overheads)
10:11:07 <joelr> this is bad, right?
10:11:56 <amiddelk> depends on what you are doing ;)
10:12:12 <joelr> i'm launching 500 threads or so
10:12:18 <joelr> that connecto to a server and do things
10:12:41 <joelr> but all i get from the profile (well, the bulk) is this
10:12:41 <joelr>  CAF                     Main                                                 320          38  86.6   95.1
10:12:43 <vegai> looks very bad
10:12:48 <dcoutts> joelr, it's not too bad, c2hs used to allocate 4GB over the liftime of an ordinary run :-)
10:13:02 <joelr> main takes 86% of the time and 95% of the memory
10:13:22 <joelr> does that mean that the space leak is in main?
10:13:38 <joelr> CAF                            Main                  86.6   95.1
10:13:38 <joelr> CAF                            Script.Engine         13.2    4.7
10:16:01 <joelr> how would i narrow it down within main?
10:18:38 <Cale> that's top level values in your Main module
10:18:52 <Cale> are you caching things?
10:18:58 <joelr> let me paste
10:19:13 <joelr> i did not look much into it, one of the QA techs wrote some haskell code :-)
10:19:30 <joelr> but this is good for me to understand as they are running out of memory on a 512mb windows machine
10:19:34 <amiddelk> joelr: if you want to paste multiple lines of information, use: http://paste.lisp.org/
10:19:44 <Cale> or of course, the wiki
10:19:48 <Cale> :)
10:19:52 <Cale> @paste
10:19:53 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
10:20:27 <joelr> no way
10:20:33 <joelr> lisppaste rules :)
10:20:38 <Cale> usage of the paste page has slowed since we required registration, which is odd, because registering is easy :)
10:20:51 <Cale> (and gets cached in a cookie)
10:21:39 <Cale> but perhaps the paste page should be world editable, I doubt that spam there would be very annoying
10:22:28 <SyntaxNinja> the wiki isn't particularly good for irc paste anymore since you have to log in
10:22:45 <Cale> but isn't everyone perpetually logged in? :)
10:23:05 <Cale> I never have to do anything when I open my browser, anyway
10:25:08 <lisppaste2> joelr pasted "where's the space leak?" at http://paste.lisp.org/display/13205
10:25:14 <joelr> ok, here's the ugly code
10:25:30 <Cale> lisppaste also always puts bizarre junk into your pastes
10:25:40 <joelr> a little background... i created this "scripting engine" for qa techs to write poker bots and excercise the poker server
10:25:40 <Cale> and it doesn't syntax colour
10:25:56 <int-e> wth is unicode character 65279?
10:26:20 <joelr> and this guy wrote something up and since it appears that main is eating up all the memory, the problem is in this code
10:26:24 <xerox> Cale: yes, I'm currently offering a karma+ to whoever comes up with Haskellsyntax highlighting for lisppaste.
10:26:33 <joelr> and since i'm the scripting guru i need to take care of it
10:26:43 <joelr> and provide guidance
10:26:51 <joelr> on how to properly do it
10:26:51 <SyntaxNinja> Cale: actually, I can't log in for some reason :(
10:27:55 <Cale> um, how about that affiliateIDs structure? how large is that on its own?
10:28:03 <shapr> I deleted my email that had Peter Thiemann's hws+hs-plugins, does anyone else have a copy?
10:28:05 <joelr> 100 rows
10:28:08 <Cale> if you fully evaluate it
10:28:27 <joelr> i cannot edit the haskell paste wiki page, although i'm logged in
10:28:35 <joelr> Cale: no idea. how do i find out?
10:28:41 <joelr> it's just the bytes that you see
10:28:56 <joelr> 100 rows 8 bytes each
10:29:09 <joelr> or 100 sublists of 8 items each where each item is a number
10:29:34 <joelr> i suppose that's an int by default so that's 100 * 8 * 4
10:29:42 <joelr> 3k
10:29:49 <xerox> @dice 2d4
10:29:49 <lambdabot> 2d4 => 6
10:29:57 <Cale> that shouldn't be too large
10:30:01 <xerox> Oh, so, some entropy flowed in dons' box.
10:30:31 <joelr> Cale: so how would i find out what part of main is eating up the memory?
10:30:56 <joelr> Cale: the other thing is that i keep a Data.Map for each script
10:31:03 <joelr> where the user variables are stored
10:31:26 <joelr> getvar retrieves the value
10:31:46 <Cale> you said that the main cost centre was CAF in Main, right?
10:31:48 <joelr> then script env is run the value of that affiliateid is placed in that map
10:32:13 <joelr> since it's evaluated lazily i would guess that it sticks those 3k times in there, times the # of connections launched
10:32:21 <joelr> 3k * 500 for example
10:32:28 <joelr> CAF                            Main                  86.6   95.1
10:32:29 <joelr> CAF                            Script.Engine         13.2    4.7
10:32:55 <Cale> yeah, that doesn't tell you much
10:33:45 <Cale> that says that most (all?) of the allocations are done by constants
10:33:52 <joelr> 3200 * 500 connections is just 1.5 mb, not a lot
10:34:03 <joelr> Cale: what does tha tmean?
10:34:11 <joelr> by constants
10:34:51 <Cale> well, say you wrote something like  x = fac 100  at the top level of your program
10:35:27 <Cale> x would be evaluated at most once, and the value stored so that subsequent uses of x could see the result
10:35:43 <joelr> Cale: i'm with you so far
10:36:11 <Cale> CAF collects up all the one-off costs for evaluation in each module
10:36:39 <Cale> (that is, all those expressions which will only ever be evaluated at most once)
10:36:54 <joelr> hmm
10:37:49 <Cale> is that all that your profile report says?
10:38:31 <joelr> Cale: basically yes, it repeats the same info down the report
10:38:41 <Cale> hmm
10:38:46 <joelr> with a bunch of entries that barely take any time or do any allocation
10:39:04 <Cale> um, could you pass the -caf-all flag to GHC?
10:39:45 <joelr> sure, when building the library
10:39:51 <joelr> right?
10:39:57 <Cale> when building Main at least
10:40:03 <joelr> ok, sec
10:40:23 <shapr> @seen malcolm
10:40:24 <lambdabot> I haven't seen malcolm.
10:40:28 <shapr> @seen malcolm_
10:40:28 <lambdabot> I haven't seen malcolm_.
10:40:31 * shapr shrugs
10:40:42 <joelr> Cale: ghc -prof --make -caf-all -o logon -package Script Logon.hs
10:40:44 <joelr> right?
10:41:07 <shapr> What's the fix to "src/Text/PrettyPrint/HughesPJ.hs:1:0: \n conflict: module `Text.PrettyPrint.HughesPJ' \n belongs to the current program/library and also to package base-1.0"" ?
10:41:09 <Cale> is Logon the one with module Main in it?
10:41:17 <joelr> Cale: 100%
10:41:59 <Igloo> Malcolm removed that from the CVS of something, possibly HaXml, recently
10:42:33 <shapr> Igloo: Seems that the darcs repo hasn't been updated yet.
10:42:51 <Cale> joelr: could I see the whole profiling output?
10:42:55 <shapr> Ok, where do I get a cvs.haskell.org account?
10:43:02 <Cale> joelr: and have you read the GHC docs on profiling?
10:43:11 <Cale> http://www.haskell.org/ghc/docs/latest/html/users_guide/profiling.html
10:43:12 <Igloo> I may have the wrong project. Anyway, removing it is almost certainly the way to go
10:43:21 <joelr> Cale: i just rebuilt it with caf and no, i have not read the docs
10:43:34 <Igloo> It only won't be if there are local changes
10:43:54 <joelr> Cale: running like this, correct? ./logon +RTS -p > /dev/null
10:43:55 <Cale> you probably also want the -auto-all flag
10:44:21 <Cale> but that will do for now I suppose
10:44:27 <joelr> running
10:44:43 <shapr> hi snowzz
10:44:43 <joelr> takes a few minutes to launch them 500 bots
10:45:21 <snowzz> hello shapr, im currently building gtk2hs from the debian source package
10:45:37 <snowzz> shapr, found it on debian-mentors =)
10:45:41 <shapr> cool
10:46:14 <Cale> joelr: I'm wondering whether the numbers you're getting for CAFs being large are meaningful at all because you didn't tell it to add any other cost centres
10:46:33 <snowzz> do haskell apps tend to compile for a long time?
10:46:36 <joelr> Cale: you mean by hand?
10:46:42 <joelr> Cale: or is that some -h option?
10:46:46 <Cale> by using the -auto-all flag
10:46:52 <shapr> snowzz: It depends on the app, but gtk2hs does take awhile.
10:46:54 <joelr> ah, ok, lets see
10:47:01 <Cale> which adds scc's to all the top level functions
10:47:13 <Cale> (exported or not)
10:47:14 <joelr> it's done
10:47:19 <joelr> Cale: let me upload it
10:48:00 <snowzz> shapr: =)
10:48:21 <joelr> Cale: http://wagerlabs.com/logon.prof
10:48:34 <joelr> this is after ghc -prof --make -auto-all -caf-all -o logon -package Script Logon.hs
10:48:37 <Cale> yeah, this is silly
10:48:44 <joelr> followed by ./logon +RTS -p > /dev/null
10:49:31 <Cale> you're not collecting anything useful here, just CAFs -- it's telling you that Main allocates the most memory with CAFs, but that's probably just the list of 100 IDs
10:49:36 <joelr> i did profile the Script package, btw, hopefully it's using that
10:49:42 <Cale> recompile with -auto-all
10:49:54 <Cale> and run it again, and you should get a lot more useful output
10:49:54 <joelr> Cale: the script library or main?
10:49:56 <joelr> Main
10:49:57 <Cale> Main
10:50:08 <xerox> Main
10:50:14 * xerox whistles
10:50:15 <joelr> dam
10:50:16 <joelr> damn
10:50:24 <joelr> ghc -prof --make -auto-all -caf-all -o logon -package Script Logon.hs --- this skipped main :)
10:50:29 <joelr> i forgot to touch it
10:51:14 <joelr> looks like -auto-all includes -caf-all
10:51:23 <Cale> quite possibly
10:51:30 <joelr> mmm
10:51:47 <joelr> Fixup of 93184 too large for field width of 16 bits
10:52:06 <joelr> i get 3 of these from /tmp/ghc20341.s
10:52:20 <Cale> huh, no idea what that means
10:53:52 * shapr laughs at the latest post on haskell-general.
10:54:00 <lisppaste2> joelr pasted "fixup too large" at http://paste.lisp.org/display/13206
10:54:18 <joelr> am i a power user or something?
10:54:21 <Cale> does it fail to compile?
10:54:49 <joelr> Logon.h is 0 bytes
10:54:54 <Cale> perhaps try cleaning out the temporary files in the directory before recompiling
10:55:30 * xerox wonders about a possible non-recursive definition of: f 0 = 0; f l = f (l-1) * 2 + 1
10:55:53 <joelr> no, bummer
10:55:56 <joelr> be back shortly
10:56:10 <xerox> Idea.
10:56:16 <int-e> xerox: 2^i-1
10:56:19 <xerox> Yeah.
10:56:38 <xerox> Hmm, more or less.
10:57:21 <Cale> mbot: @math RSolve[{f[0] == 0, f[l] == f[l-1] * 2 + 1}, f[l], l]
10:57:24 <mbot> Cale: {{f[l] -> -1 + 2^l}}
10:57:49 <xerox> Right.
10:57:51 <Cale> mbot: @part #haskell
10:58:19 <xerox> Boom boom cha :)
10:59:14 <astrolabe> What does RSolve do?
10:59:26 <astrolabe> Hia xerox :)
10:59:26 <Cale> Solves systems of recurrence equations
10:59:47 <astrolabe> hmm clever.
10:59:48 <xerox> Cale: I did read many GEB pages on the train.  The dialogue about levels is *so* nice.
10:59:53 <xerox> Howdy astrolabe!
11:00:02 <shapr> roconnor: Want to extend your QuickCheck example into an article for the next TMR?
11:00:09 <Cale> xerox: the push and pop discussion?
11:00:12 <xerox> Yeah!
11:00:21 <Cale> :)
11:00:25 <shapr> Yeah, I liked that discussion.
11:00:35 <astrolabe> Godel Escher Bach?
11:00:40 <Cale> yeah
11:00:42 <xerox> Cale: How to do RSolve by hand? :-D
11:01:00 <Cale> In general? It takes a lot :)
11:01:06 <int-e> hmm. I could reread that, it's been a while. The one with levels is the push pop one with the missing pop?
11:01:14 <xerox> int-e: right.
11:02:04 <astrolabe> It's been ages for me.  I don't remember anything about pushing and popping there.
11:02:34 * xerox shakes shapr
11:02:39 <xerox> QuickCheck example? arf arf.
11:03:02 <Cale> I'd say it was one of the major points of the book :)
11:03:27 <xerox> Time to enjoy the theory then ;)
11:03:50 <shapr> xerox: what?
11:04:05 <xerox> shapr: roconnor's one, I think
11:05:40 <astrolabe> Cale: weird.
11:06:33 <astrolabe> xerox: I guess linear recurences go a bit like linear ODEs.  To do with eigenvalues, particular integrals, general solns etc.
11:07:12 <astrolabe> Where 'etc' here means I can't think of anything else.
11:07:17 <xerox> astrolabe: come back from the buzzwordslands!!!
11:07:30 <xerox> i.e. can you elaborate a bit on that, maybe expanding acronyms? :-)
11:07:41 <astrolabe> LOL!  They aren't buzzwords!
11:08:04 * xerox stabs astrolabe
11:08:09 <astrolabe> ordinary differential equations.
11:08:26 <xerox> Danke.
11:08:35 <astrolabe> I thought you were a maths guy?
11:09:05 <xerox> English acronyms fools me :(
11:09:17 <astrolabe> Ah :) Sorry.
11:10:43 <astrolabe> Is there a page listing/demonstrating lambda-bot commands?
11:11:09 <xerox> Dinner time, AFK, BBL, TTYL, bzzt..
11:11:26 <shapr> xerox: It's on the wiki.
11:13:53 <astrolabe> shapr: did you mean me?
11:23:06 <paolino_> is there a function ala iterate which take the list of functions to be applied one after another  ?
11:23:29 <paolino_> foldl (.) ?
11:25:20 <astrolabe> paolino_: foldl and foldr yes.
11:26:09 * joelr lets out a deep sigh
11:26:19 <joelr> why do i always get in trouble?
11:26:47 <joelr> into
11:28:54 <Cale> paolino_: foldr (.) id
11:29:20 <Cale> Always use foldr unless you have a good reason not to.
11:29:50 <joelr> Cale: what do you think of combining -O with -prof?
11:30:04 <joelr> because, strangely enough, with -O the program compiles
11:30:09 <Cale> okay
11:30:13 <Cale> well, what do you get?
11:30:17 <Cale> try it
11:30:25 * joelr is trying
11:30:52 <joelr> i took a bet on -O generating different assembly and it worked
11:31:11 <joelr> without -O ghc was apparently generating assembly that could not be compiled
11:31:27 <Cale> you should hang onto that branch of your source tree
11:31:39 <Cale> because the GHC people might want it :)
11:32:12 <joelr> Cale: it's work for hire :( unless they want me to run it on my end
11:32:32 <joelr> i had plenty of "this could not be happening! i'm dying" errors from ghc in the past 2 days
11:32:36 <joelr> now this
11:32:46 <joelr> well, now i get a bus error
11:32:53 <Cale> wow
11:32:56 <joelr> from my program, though. compiled with -O
11:33:23 <joelr> running in gdb
11:33:52 <Cale> that's bizarre
11:34:09 <SamB> doesn't -O turn on -fvia-C?
11:34:32 <joelr> SamB: beats me but without it the assembly code generated by ghc does not compile
11:35:31 <joelr> and of course in gdb it's running fine
11:35:39 <Cale> heh
11:36:24 <SamB> yeah, I found out the other day that I can run SimCity 3000 Unlimited under valgrind but not alone...
11:36:42 <SamB> I think it has to do with valgrind hooking pthreads
11:36:43 <joelr> what's valgrind?
11:37:15 <basti_> joelr: kind of a debugger
11:37:26 <basti_> more a memory monitor or something
11:37:31 <joelr> ok
11:37:33 <SamB> a tool that uses dynamic translation to find problems in memory use, mostly
11:38:09 <joelr> dynamic translation?
11:38:25 <joelr> the best tool for memory problems that i used was purify
11:38:33 <joelr> at least back in the 90s
11:38:44 <joelr> trounced everything else handily
11:38:53 <joelr> but that was code injection
11:39:03 <SamB> like, you know, it translates x86 instructions into x86 instructions that do about the same thing but are instrumented so it can find problems...
11:39:04 <joelr> don't know what dynamic translation is
11:39:17 <joelr> SamB: aha
11:39:22 <joelr> SamB: understood now
11:39:46 <joelr> cale, let me post the prof
11:40:16 <paolino_> @pl foldr1 . map (\index -> functions !! index)
11:40:17 <lambdabot> foldr1 . map (functions !!)
11:40:36 <SamB> qemu does a similar thing, though it can translate into many machine codes (thanks to its inventive use of relocations), and from a few different machine codes...
11:40:38 <joelr> cale, check it out
11:41:08 <SamB> oh, and qemu doesn't check for memory issues, just runs programs/operating systems
11:42:52 <Cale> joelr: understandably, all the allocation is getting done in script
11:44:33 <joelr> i'm gonna comment stuff that has to do with that list of numbers
11:44:35 <Cale> joelr: could you think of something memory intensive that script does? Perhaps add more cost centres around function calls in script and see how it breaks down
11:44:37 <joelr> see if it changes anything
11:44:41 <xerox> shapr: where, on the wiki?
11:44:54 <Cale> I actually really doubt it's the list of numbers
11:45:02 <joelr> Cale: let me look it up and see how to do the manual cost centers
11:45:05 <Cale>  CAF                     Main                                                 320          37   0.0    0.0     0.0    0.0
11:45:05 <Cale>   affiliateIDs           Main                                                 332           1   0.0    0.0     0.0    0.0
11:45:31 <Cale> CAF is now down to 0 percent, since we're recording other stuff
11:46:58 <joelr> Cale: so insert that in front of suspicious lines in the script's do?
11:47:20 <Cale> yeah
11:47:58 <Cale> {-# SCC "name" #-}
11:48:06 <Cale> where name is different for each one
11:48:21 <joelr> Cale: if i have multiple calls to the same function, do i insert the same CC in fron of them?
11:48:26 <joelr> or just in front of the first one?
11:48:37 <Cale> each call
11:48:53 <joelr> each call the same CC? each call different cc?
11:49:14 <Cale> well, I suppose you get to choose, but I'd say different
11:49:28 <Cale> you're already getting cost centres for top level functions
11:49:45 <joelr> no, in the script i have multiple lines like
11:49:49 <joelr> ignore a
11:49:51 <joelr> ignore b
11:49:54 <joelr> ignore c
11:50:05 <joelr> things like that, do they game the same CC?
11:50:12 <Cale> ah, perhaps you'd like to make a CC for ignore
11:52:17 <joelr> well, commenting out the list stuff did not change much
11:52:24 <joelr> doing manual cost centers
11:56:10 <Frederick> guys does haskell has a null value like C's NULL?
11:56:23 <Cale> Frederick: in what type?
11:56:29 <Frederick> Cale, string
11:56:34 <Frederick> list in fact
11:56:34 <Cale> "" ?
11:56:36 <Cale> []
11:56:42 <Cale> the empty list
11:57:00 <Frederick> Cale, lemme post my code to explain better
11:57:01 <Cale> or do you mean something else?
11:57:40 <amiddelk> You could think of undefined as a null value for any type, except that you can't check for it...
11:57:57 <Frederick> Cale, im trying to make a free-context grammar handler with parsec here -> http://rafb.net/paste/results/EGHwIy17.html at line 11-13
11:58:10 <gzl> free-context grammar? :)
11:58:31 <Frederick> gzl, yes :p help appreciated and well paid
11:58:57 <joelr> ghc doesn't like this for some reason
11:58:59 <joelr>        {-# SCC "getvar" #-}botAFFID <- getvar affiliateID
11:59:14 <joelr> parse error in pattern at char 7 which is getvar
11:59:16 <joelr> strange
11:59:24 <gzl> Frederick: they're usually called context-free grammars
11:59:33 <joelr> no, wait that's the opening curly brace
11:59:58 <Frederick> gzl, sorry it was freelly translated by me from portuguese
11:59:59 <Cale> Frederick: okay, so what's the trouble?
12:00:00 <joelr> but this only applies to the <- notation apparently
12:00:03 <gzl> ah, I see.
12:00:31 <Frederick> Cale, look the second case of word2Letter if it is empty I dont know how to handle it
12:00:52 <Cale> Maybe Char
12:01:02 <joelr> how can I rewrite this? botAFFID <- getvar affiliateID
12:01:35 <Cale> wouldn't you put the CC after the <- ?
12:01:48 <joelr> Cale: i would not have an idea but let me try
12:02:10 <joelr> Cale: that worked. how did you know?
12:02:35 <Cale> joelr: because the thing on the left of the <- is just a formal parameter
12:02:47 <Cale> the thing on the right is a value
12:02:55 <amiddelk> Frederick: you could either leave out that [] case in your function definition, or use undefined (or error "this should not happen" ;) )
12:02:56 <joelr> ok
12:03:25 <joelr> Cale: profiling with individual cost-centers
12:04:00 <joelr> if someone read about the channel that built the world (#winprog) then #haskell is the channel that... dunno, but it's quite unique for what it is
12:04:17 <joelr> i'm getting tons of help here :) thank you guys!
12:05:07 <Frederick> Cale, amiddelk this must happen the list will allways be empty some time when I end up parsing the word
12:05:52 <Cale> joelr: quite welcome :)
12:06:03 <Cale> Frederick: I'm not exactly sure what your function is going to do
12:06:17 <amiddelk> same here :)
12:06:25 <amiddelk> it isn't type correct in the first place ;)
12:06:44 * shapr is having trouble building HaXml
12:07:07 <joelr> Cale: http://wagerlabs.com/logon.prof is the latest and logon.prof.1 is the previous
12:07:43 <Frederick> Cale, I need to create a context-free grammar handler
12:07:56 <Frederick> so I need to give as input a set pf variables, terminals and productions
12:08:06 <Cale> joelr: well, connect is looking heavy...
12:08:12 <amiddelk> Frederick: your word2letter function has to return a character... so if it's input value can be the empty string, then you need some character representation for it. If you don't have that, then you should make sure you never pass it the empty string...
12:08:17 <joelr> lets see
12:08:49 <Cale> Frederick: or have it return a Maybe Char, because it might fail
12:08:49 <Frederick> than I need to remove, useless symbols, productions that substitute variables, empty productions and left recursion
12:09:02 <lisppaste2> joelr pasted "connect" at http://paste.lisp.org/display/13210
12:09:04 <Cale> Frederick: are you familiar with the Maybe type?
12:09:19 <Frederick> Cale, not at all
12:09:29 <Frederick> but this is most a draft
12:09:32 <Cale> data Maybe a = Just a | Nothing
12:09:34 <joelr_> http://paste.lisp.org/display/13210
12:09:54 <Frederick> cause I cant check words while I dont input the grammar properly
12:10:03 <Cale> That is, a value of type Maybe a is either of the form Just x for some x of type a, or the value Nothing
12:10:19 <joelr_> Cale: connect is in my Script library so would it work if I insert the individual CC in there?
12:10:28 <Frederick> to pass the productions to the program like S -> aSb should I use the map function?
12:11:00 <Cale> joelr_: what's env?
12:11:14 <joelr_> Cale: that's a property list, why? like in wxHaskell
12:11:21 <amiddelk> Frederick: I have the idea that you want to do two things at the same time... pars some kind of grammar and then check words. And you do it while parsing the grammar? And by the way... you already use parser combinators so why do this analysis by yourself?
12:11:24 <joelr_> [ a := b, c := d ]
12:11:31 <Cale> ah
12:11:32 <Cale> I see
12:11:45 <joelr_> Cale: i'm converting it into a map
12:11:49 <joelr_> Data.Map
12:12:03 <Frederick> amiddelk, cause Im very new to haskell (1 week) so I might be using the wrong approach
12:12:05 <joelr_> would it work if i insert the manual CC into the library?
12:13:36 <Frederick> amiddelk, to create my set of productions would the map function be a good choice?
12:13:55 <Cale> joelr_: yeah, you can put CCs in your library
12:14:00 <joelr_> doing
12:14:16 <xerox> What are CCs you're alking about?
12:14:24 <Cale> xerox: cost-centres
12:14:26 <joelr_> individual cost center annotations
12:14:47 <xerox> Which are?
12:15:02 <joelr_> http://www.haskell.org/ghc/docs/latest/html/users_guide/profiling.html#id3135141
12:15:08 <xerox> I see :-)
12:15:32 <Cale> markers for profiling -- GHC can tell you how much memory is used by the evaluation of a given expression while running your program
12:15:51 <amiddelk> Frederick: with the map function you transform elements of a list. I'm not sure what you are doing so I can't answer if that is usefull in your case. But have fun coding, I have to leave now :)
12:16:54 <Cale> Frederick: basically, we don't have enough useful information about what you're trying to do in order to make a meaningful suggestion
12:17:11 <Frederick> Cale, oki I will specify the problem better
12:17:20 <Cale> Frederick: if you need to have a function which potentially fails to return a value, then you represent that using the Maybe type constructor
12:17:25 <Frederick> I need to do a Context-Free grammar handler
12:17:29 <Cale> yeah
12:17:33 <Frederick> I must enter a description of a grammar
12:17:43 <joelr_> this is fun
12:17:44 <Cale> but what in particular does the function you're trying to write do?
12:17:50 <Frederick> that is a set of variables, a set of terminals and a set of productions
12:17:58 <Cale> I know what a CFG is :)
12:18:17 <Frederick> Cale, I need to somehow input the productions
12:18:25 <Cale> okay
12:18:32 <joelr_> i wonder if it was foolish to pitch haskell as a simple scripting language given all the rope you have to hang yourself
12:18:38 <Frederick> I got the concepts but my knowledge of haskell is pretty superficial
12:19:09 <SamB> joelr_: all scripting languages provide plenty of rope!
12:19:32 <joelr_> SamB: those strict ones provide less :-)
12:19:42 <Cale> Well, you might create a data type for productions, and then a parsec parser, or even just a Read instance for that type.
12:19:48 <joelr_> although it looks like the problem is not in the script but rather in my scripting library
12:20:03 <Frederick> so Ive started defining the universal structure of the grammar, tha abstract types that compose all grammars so Ive defined a term, a Nonterm, A symbol and a starting symbol and a production, btw I dont understand my own definition of production
12:20:35 <Cale> Frederick: your Symbol type has only two values in it
12:20:57 <Frederick> Cale, sure a symbol can be a terminal or a nonterminal
12:21:07 <Frederick> no other choice I believe
12:21:09 <Cale> but that's not what you want
12:21:22 <Frederick> Cale, why not?
12:21:29 <Cale> Don't you want the potential terminal or nonterminal to have a name?
12:21:54 <Frederick> Cale, I dont understand your question, I cant get the point of it
12:22:02 <Cale> Note that you declared Term and Nonterm as synonyms for String, but you also defined them as data constructors of Symbol
12:22:20 <Cale> Your two uses of "Term" aren't the same
12:22:55 <Cale> data Symbol = Term String | Nonterm String
12:23:00 <Frederick> Im trying to give a name to the structure Im evaluating at the momment that is my symbol
12:23:01 <Cale> is probably what you want
12:23:40 <Frederick> so my definition of StartSymbol is also wrong right?
12:23:57 <Cale> well, possibly
12:24:06 <joelr_> Cale: it looks like it's my packet parsing code
12:24:16 <Cale> type just gives another name to an existing type
12:24:20 <Frederick> joelr_, this is much like a parser
12:24:23 <Cale> it doesn't construct a new type
12:24:33 <Frederick> hm
12:24:43 <Cale> joelr_ is talking about something else :)
12:24:50 <Frederick> :p
12:24:56 * shapr swears viciously
12:25:00 <Cale> joelr_: hmm...
12:25:01 <Frederick> I also need some help reading the last definition line
12:25:08 <Frederick> data Production = Nonterm ::= [Sym]
12:25:35 <Cale> Probably that should be [Symbol]
12:26:06 <shapr> CVS really irritates me.
12:26:24 <tessier> That's why I use subversion
12:26:27 <Frederick> Cale, how can I read that line, is it read as : "A production is a Nonterm that ... I cant get what does it mean adter the ::= part
12:26:34 <shapr> Subversion really irritates me too.
12:26:44 <tessier> Then there's just no pleasing you.
12:26:49 <shapr> darcs does not irritate me :-)
12:26:49 <fworp> thats why i use darcs :P
12:27:04 <Cale> a production is a nonterminal and a list of symbols with a ::= between them
12:27:18 <Cale> ::= is an infix data constructor
12:27:53 <Frederick> Cale, can I substitute ::= for -> or it is reserved?
12:27:58 <joelr_> Cale: but i tihnk i'm getting the idea of how to dig deeper into this. just keep annotating :-)
12:28:00 <Cale> -> is reserved
12:28:06 <Cale> but you could use :->
12:28:17 <xerox> :-D
12:28:17 <Cale> joelr_: yeah
12:28:37 <joelr_> Cale: any suggestions with the -h options? are they useful in my case?
12:29:39 <Cale> joelr_: I've never used them
12:29:48 <Frederick> Cale, is this version better? http://rafb.net/paste/results/pehecT30.html
12:30:43 <Frederick> Cale, I still wonder if I can store the productions in that way
12:31:02 <Cale> well, type StartSymbol = Symbol String is going to be a kind error, because Symbol doesn't take any parameters.
12:31:33 <Cale> you could just make it type StartSymbol = Symbol
12:31:45 <Cale> but type synonyms are usually not all that important anyway
12:32:05 <Cale> it's the data and newtype declarations that you have to care about
12:32:17 <Frederick> Cale, I got your point about starting symbol
12:33:30 <Cale> http://www.cs.uu.nl/~afie/haskell/tourofsyntax.html#Data%20types
12:33:48 <Cale> that has a quick example of the syntax and what it means
12:36:11 <joelr_> Cale:      exp/evalU/cmd       Script.Engine                                        338         910  44.7   54.7    44.7   54.7
12:36:59 <joelr_> that;s the packet parsing call. i guess i'm gonna have to write up some tests and see what's cooking
12:37:03 <joelr_> thanks for your help!
12:37:09 <Cale> joelr_: no problem
12:39:40 <Frederick> Cale, http://rafb.net/paste/results/ga53zb64.html but the end seems wrong
12:40:07 <Cale> well, the last line of main binds a value
12:40:13 <Cale> which isn't allowed
12:40:20 <Cale> (since it's pointless)
12:40:50 <Cale> it's like getLine >>= \productions ->
12:41:00 <Cale> with nothing on the other side of the arrow
12:41:28 <Cale> also, you're not allowed to name a variable starting with an uppercase letter
12:41:30 <Frederick> I got an error cause Im not closing the do statement
12:41:36 <Frederick> Cale, how could I fix that?
12:41:53 <Cale> I suppose you could end it with something like return () which does nothing
12:42:12 <Cale> or remove the "Productions <-" from the last line there
12:42:55 <Frederick> Cale, im trying to read the set of productions there
12:43:10 <Cale> yeah, but then what?
12:43:14 <Frederick> Ive added the return () as you suggested
12:43:36 <Frederick> Cale, then I need to continue the program :p Im just trying to get the input so I can use it
12:44:14 <Frederick> now it complains saying that formais.hs:41: Data constructor not in scope: `Productions' but it is defined in line 12
12:44:32 <Cale> it's not a data constructor
12:44:39 <Cale> you declared a type there
12:44:49 <Cale> Productions has the data constructor ::=
12:46:20 <Frederick> Cale, I dont get what Im making wrong
12:46:36 <Cale> well, you're trying to read in strings there, right?
12:47:00 <Cale> so you'll want to give those strings variable names, which start with lowercase letters
12:47:56 <Frederick> Cale, sort of string that would be a list of strings cause I want to read things like ['S::= aBa', 'B ::=a'] taking as example a grammar for a language which the only created word is aaa
12:48:34 <Cale> well, that's going to take some parsing
12:48:49 <bosie> test
12:48:52 <Frederick> Cale, sure
12:49:07 <Cale> getLine just gets a line of text as a string
12:49:43 <Frederick> Cale, can I use some high level function as "getList"?
12:49:52 <shapr> Is there a way to get ghci to dump errors in C-x ` format?
12:50:07 <Cale> fmap read getLine
12:50:23 <Cale> (or just read the line as a string, and apply read to it)
12:50:45 <Cale> read will read strings into types which have Read instances
12:52:25 <Frederick> Cale, im googling to check if I can understand it
12:52:45 <Cale> @eval read "[1,2,3,4]" :: [Integer]
12:52:47 <lambdabot> [1,2,3,4]
12:53:25 <Cale> @eval read "[\"Hello\", \"World\"]" :: [String]
12:53:27 <lambdabot> ["Hello","World"]
12:53:44 <Cale> @type read
12:53:45 <lambdabot> forall a. (Read a) => String -> a
12:54:13 <Cale> Frederick: how much have you written in Haskell up to this point?
12:54:35 <Frederick> Cale, Ive read and made all samples from haskell.org suggested tutorials
12:54:50 <Cale> Did you read Yet Another Haskell Tutorial?
12:55:04 <Frederick> Cale, yes it is open right now on my screen
12:55:08 <Cale> ah, okay
12:55:10 <work_metaperl> if you haven't read it, DONT
12:55:16 <work_metaperl> it's a waste of time
12:55:19 <work_metaperl> and paper
12:55:23 <Cale> work_metaperl: how so?
12:55:32 <work_metaperl> buy "The Haskell Road to Logic, Maths, and Computer Programming"
12:55:42 <work_metaperl> or SJT's book "Craft of Functional Programming"
12:55:44 <Cale> or just download it, as it's still on the website :)
12:55:55 <bosie> work_metaperl thats a waste ? cos i just bought it
12:55:58 <work_metaperl> Haskell Road is not freely d/l AFAIK
12:56:16 <work_metaperl> Yet Another is a waste. bosie: what did you buy?
12:56:17 <Cale> http://www.cwi.nl/~jve/HR/HR.ps.gz
12:56:27 <bosie> work_metaperl the craft of...
12:57:03 <work_metaperl> bosie: Craft is very good. haskell road is excellent
12:57:18 <bosie> i am a beginner, haskell road is good for us noobs too?
12:57:29 <work_metaperl> many topics in haskell road are off-topic for learning haskell, but all the haskell is super direct and well-explained
12:57:42 <work_metaperl> bosie: i'm a noob and I enjoyed the first 12 chapters of SJT
12:58:02 <bosie> work_metaperl of how many?
12:58:12 <work_metaperl> his treatment of relations was too touchy-feely for me. So i dropped him for Haskell Road. But SJT's book teaches a _whole_ lot and does so carefully. It's a very good read
12:58:22 <work_metaperl> bosie: I think it has like 17 chapters
12:59:08 <Cale> Haskell road is decent, but it's not really a Haskell book. It doesn't even explain things like typeclasses iirc.
12:59:10 <bosie> oki
12:59:23 <Cale> It's a book about logic and mathematics moreso :)
12:59:23 <bosie> i will start with SJT's book then ;)
12:59:45 <Cale> YAHT is decent to get yourself started writing Haskell code
13:00:18 <work_metaperl> Cale: it does... not in a separate chapter but he does explain typeclasses in a clear and succinct way. It does not explain monads... but the treatment of data structures is nothing short of beautiful. enough to bring tears to your eyes
13:00:22 <work_metaperl> YAHT is silly
13:00:26 <Cale> from there you can pick up additional topics on the wiki and mailing lists
13:00:26 <work_metaperl> and incomplete
13:00:30 <work_metaperl> and full of typos
13:00:35 <work_metaperl> dont waste time with that hack-ware
13:00:36 <Cale> I'll agree that it's incomplete
13:00:47 <astrolabe> I found 'The Haskell School of Expression' really good.
13:03:02 <sylvan> Somebody needs to write a new book that takes a more practical approach than the existing ones... Monadic IO and data types in chapter one, I say!
13:03:19 <SyntaxNinja> sylvan: keep telling cosmigray that.
13:03:44 <sylvan> SyntaxNinja, what? He's writing something?
13:04:25 <work_metaperl> sylvan: I disagree... In haskell, the first thing is to learn how to think. The thinking required for monads and types comes at a later stage... In haskell, you learn to think. The real world apps will fall apart at your feet once you can dissect with lucid functional analysis...
13:04:38 <work_metaperl> sylvan: haskell on all 8 cylinders at darcs.complete.org
13:05:37 <astrolabe> The Hakell Schoold of Expression has types in chapter 1 and IO in chapter 3 (of 24)
13:05:40 <sylvan> work_metaperl, Well I don't think you need to konw the theory of monads to do monadic IO.. Haskell currently has a reputation of being an "academic toy language" and a large part of the blame lies with books that treat it as if it is
13:06:11 <Cale> What? It's not an academic toy language? ;)
13:06:13 <Cale> hehe
13:06:45 <Cale> I sure hope it never stops being an academic toy language as it becomes practical for real world use.
13:06:47 <sylvan> astrolabe, _data types_.. A problem with taking the "logical route" to teaching haskell (which leads to introducing data types in chapter 8 or something) is that people don't use stuff introduced that late to the same extent because they spend 75% of the time leraning the language without knowing about it
13:07:33 <Cale> I agree about data types
13:07:35 <sylvan> Cale, well it's that TOO.. But I'd like a book which takes a more practical approach and doesn't shy away from features because the theory behind them is complex (like monadic IO, you can use it without knowing the details of how it works)
13:07:45 <Cale> data types are the first thing I teach people when teaching Haskell
13:07:48 <sylvan> And it should include GUI and stuff like that
13:07:54 <Cale> along with some simple functions
13:07:57 <Cale> and then typeclasses
13:08:18 <Cale> because you need to know how to read type signatures
13:08:23 <Cale> in order to learn Haskell
13:08:29 <sylvan> John Hughes switched to a very "practical" approach in his FP course last year.. It worke dout pretty well too, 70% passed instead of the usual 50%
13:09:05 <sylvan> Yeah, type classes, QuickCheck generators, IO.. All of that can be understood well enough to use without understanding the details of the theory behind it
13:09:06 <astrolabe> sylvan: In chapter 2 he says 'In Haskell, new data types such as this are defined using a data declaration: data Shape = Circle Float | Square Float.
13:09:51 <sylvan> astrolabe, ah.. I guess I remembered it wrong.. I seem to recall him delaying it til chapter 6 or something like that.. He hasn't come out with a new edition has he (mine's 2nd edition)?
13:10:00 <Cale> sylvan: I leave IO until after explaining just about every other monad
13:10:06 <work_metaperl> sylvan: who is John Hughes?
13:10:13 <Cale> even though it seems impractical to do that :)
13:10:22 <sylvan> The guy behind arrows and quickcheck and a bunch of other things
13:10:37 <Cale> GHCi provides enough of an interface to the language
13:10:52 <Cale> that IO is relatively unimportant
13:11:13 <astrolabe> sylvan: No mention of editions that I can see, and mine's new.
13:11:21 <Cale> (and IO is easy enough once you're prepared for it)
13:11:28 <work_metaperl> I quote Smerdyakov: "Well-designed functional programs have I/O as a separate driver"
13:11:29 <sylvan> yeah but I like showing it off relatively early anyway.. otherwise a lot of people will just go "so how do you actually DO anything with it?"
13:11:52 <Cale> fair enough
13:12:06 <eivuokko> It probably depends who you teach, tho
13:12:10 <astrolabe> Hudak's approach is to tell you how to IO long before monads, which I think works well.
13:12:15 <sylvan> astrolabe, on mine it says "second edition" right under the title on the front
13:12:27 <Cale> heh, the person I'm teaching Haskell to right now won't even use GHCi. She just wants to write code and execute it by hand.
13:12:39 <sylvan> hehe
13:12:57 <Cale> So IO is a bit of a moot point for the time being :)
13:13:03 <eivuokko> Yeah, then ghci/hugs is perfect.  But if you get someone who has even written javascript, no IO is going to be....just very impractical calculator.
13:13:07 <Cale> also, everything is in the form of an exercide
13:13:11 <Cale> exercise*
13:13:32 <Cale> So she's derived the definitions of return and bind for 3 or 4 monads now
13:13:46 <Cale> from the types and feedback from me
13:14:20 <Cale> (as we're covering monads)
13:14:27 <astrolabe> sylvan: This is what amazon.co.uk are advertising, which is where I got mine. http://images-eu.amazon.com/images/P/0521644089.02.LZZZZZZZ.jpg
13:15:13 <bosie> you use haskell in multimedia projects?
13:15:44 <sylvan> astrolabe, ah we're talking about different books =) Sorry.. I was thinking about "the craft of functional programming"
13:16:00 <astrolabe> :)  Ah, it all becomes clear.
13:16:04 <sylvan> =)
13:17:34 <sylvan> So what's the story behind this "Haskell on all eight cylinders" thing? Is it going to be a book? How far along is it? I there a PDF-version (or some sort of formatted version) somewhere?
13:20:29 <work_metaperl> I noticed the SGML at darcs.complete.org
13:21:20 <Frederick> Cale, I still with the error of formais.hs:41: The last statement in a 'do' construct must be an expression in here http://rafb.net/paste/results/gFavra33.html  I also wonder if this input for the productions will work as spected on a list
13:21:57 <SyntaxNinja> sylvan: it's just a work in progress. he hasn't had much time for it lately.
13:22:23 <kombinator> sylvan: what do students have to do to pass that course - pass an exam?
13:22:37 <shapr> sylvan: There's a darcs repo
13:24:34 <Cale> Frederick: it's a tabbing thing
13:24:35 <sylvan> kombinator, yes, as well as several lab assignments
13:24:49 <sylvan> shapr, yeah I'm browsing it but I don't have any docbook tools and not even darcs (yet) on this computer
13:25:01 <Cale> Frederick: the putStr, etc are outside the do block since they're not as indented as the other lines
13:28:18 <Frederick> Cale, thx a lo now it says StartSymbol Isnt in scope so I think I missdefined it again
13:29:13 <Cale> Frederick: well, what sort of a thing do you think StartSymbol is?
13:29:19 <Cale> it's the name of a type
13:30:30 <wilx`> http://images-eu.amazon.com/images/P/0521644089.02._PV45_ZAWoooo,5,15,100,100,times,20,255,40,240_PIsm.arrow,TopLeft,-2,-19_PE99_PD99_PC_SCLZZZZZZZ_.jpg
13:30:40 <wilx`> Yay! for Amazon images abuse :D
13:31:45 <Frederick> Cale, think Ive fied it
13:33:47 <Frederick> http://rafb.net/paste/results/LzubTo33.html it saus Ive multiple defined nonterm in lines 7 and 8
13:34:18 <Frederick> Im missconcepting  the data usage
13:35:33 <eivuokko> Data constructor scope is the module, so you can't have same constructor in two data declarations in same module.
13:37:48 <Frederick> eivuokko, so I cant have soething like a Starting Symbol is a Variable or a termnal?
13:38:24 <SamB> Frederick: type StartSymbol = Either Variable Terminal...
13:39:01 <Frederick> SamB, what do you mean?
13:39:03 <eivuokko> Frederick, I think you are kinda amiss there anyway...
13:39:19 <Frederick> eivuokko, yes Im lost
13:39:35 <eivuokko> type Term...data Symbol = Term | Nonterm...do you realise that Term words here have diffrent scope, one is type, and one is Constructor (sort of function)
13:39:35 <fworp> yeah, i would just take the data declaration for StartSymbol out
13:40:16 <Frederick> eivuokko, yes and this is what I expect
13:40:42 <Frederick> eivuokko, at least I believe it is what I expect I want a sort of a recursive type not sure Im using the right words
13:41:07 <eivuokko> Your Symbol can carry no information except state being Term or Nonterm, it's just like data Bool = True | False
13:41:43 <Frederick> oki
13:41:46 <eivuokko> I find it hard to believe this is what you are after.  But maybe I misunderstood.
13:42:18 <Frederick> eivuokko, doesnt the symbol holds a term or a nonterm
13:42:20 <Frederick> ?
13:43:12 <eivuokko> Yeah, but it holds just the information being *a Term* or *a Nonterm*, not for example what is the name of term.
13:43:15 <Oejet> Hello people!  What a nice evening.
13:43:59 <Frederick> eivuokko, hopw could I redefine it to hold a term or a nonterm itself?
13:44:27 <eivuokko> Frederick, making a constructor that can hold value of type Symbol
13:44:46 <Frederick> eivuokko, lemme google for constructor
13:44:52 <eivuokko> Ah
13:47:05 <Lemmih_> Hiya Oejet.
13:47:08 <eivuokko> data Symbol = Symbol Symbol, well uhm.  First Symbol is the name of type being declared.  Second word Symbol is a constructor, a special type of function, and last word Symbol is marker what type of parameter the constructor holds.
13:47:18 <eivuokko> Grrr...I think someone else could explain this better :-S
13:47:23 <Oejet> Lemmih_: Hejsa.
13:47:42 <SamB> Frederick: it seems to me that you would benefit from either completing a tutorial or at least reading through (or even skimming) the Prelude
13:48:01 <Frederick> SamB, ive read it twice but is is a hell of a bunch of info
13:48:06 <Oejet> eivuokko: Don't worry, I think that all the time in my teaching job.
13:48:28 <Frederick> eivuokko, so I dont need the lines 5 and 6 wherre I define ther and non term?
13:49:20 <eivuokko> Frederick, I am fairly sure you don't :)  But as SamB said, it should be more clear to you if you read some tutorial that teaches types.
13:49:52 <Frederick> eivuokko, Ive read all the tutorials suggested on the website but it takes some time to get the businnes working :p
13:51:15 <Cale> did you do the exercises?
13:51:37 <Frederick> Cale, some of them
13:51:44 <Frederick> most I would say
13:53:11 <eivuokko> Frederick, writing your datatypes alone and adding show declaration, like data Foo = Bar | Baz deriving Show and then loading your file into ghci /hugs and simply constructing your wanted data structures might help to understand data-declaractions :o
13:54:17 <Frederick> eivuokko, this is what im doing :p
14:00:28 <malcolm_>  ping shapr?
14:02:03 <Frederick> eivuokko, it isnt working and I dont know why
14:02:19 <SamB> Frederick: comment out the parts that don't work
14:03:30 <Frederick> SamB, already tried but Im stuck right in the part I need to make work
14:04:43 <SamB> Frederick: just get rid of everything that doesn't work first anyway
14:05:25 <Frederick> SamB, but I cant get rid of this definition it is exactly what Im trying to do
14:08:39 <SamB> Frederick: just try and get something working and play with that
14:08:42 <lisppaste2> Frederick pasted "test" at http://paste.lisp.org/display/13213
14:09:41 <Frederick> I need to have the Symbol type well defined so I can have my words wich are list of symbols
14:10:01 <Frederick> in fact a word is a list of terminals
14:10:22 <Frederick> and my productions (my next step) will need these types well defined
14:13:33 <Frederick> SamB, did you check and got an idea about what I need?
14:14:24 <SamB> well, first you most likely want to uncomment lines 5 and 6 again...
14:14:38 <SamB> or replace Nonterm in line 13 with String
14:15:09 <SamB> then comment out main
14:15:55 <Frederick> all done sir
14:16:02 <Frederick> why commenting out main?
14:16:16 <SamB> because it is fundamentaly broken
14:16:35 <Frederick> oki done
14:18:07 <SamB> in particular, you don't really want to pattern match the result of getLine against a constructor
14:18:18 <SamB> especially when that constructor isn't nullary
14:19:04 <SamB> more to the point, you just want to load that up in GHCi and start playing with it
14:19:14 <goron> When building gtk2hs from darcs, I get after autoconf --install:
14:19:18 <goron> configure.ac:26: version mismatch.  This is Automake 1.9.6,
14:19:18 <goron> configure.ac:26: but the definition used by this AM_INIT_AUTOMAKE
14:19:18 <goron> configure.ac:26: comes from Automake 1.8.5.  You should recreate
14:19:18 <goron> configure.ac:26: aclocal.m4 with aclocal and run automake again.
14:19:20 <goron> autoreconf: automake failed with exit status: 63
14:21:44 <Frederick> SamB, doesn't every 'program' need a main in haskell ?
14:22:04 <SamB> Frederick: you don't need a whole program to play with code in GHCi
14:22:32 <Frederick> I know, but in this case I think I need
14:22:40 <goron> Frederick: And you don't need main, you need an entry point which can be distinct from main (compiler option).
14:23:12 <SamB> goron: that is irrelevant
14:23:19 <goron> Need=(when you create an executable)
14:23:59 <Frederick> anyway, I want to compile the code, so I need the main, right ?
14:24:09 <goron> SamB: Sure looks relevant to me.
14:24:15 <SamB> Frederick: you don't want to compile the code until you have written it
14:24:28 <SamB> as of now, you have not written it
14:24:47 <goron> SamB: Oh, compiling unwritten code... yes, that's a bit hard.
14:24:52 <Frederick> just part of it
14:25:22 <SamB> Frederick: well, anyway, you really just want to load it in GHCi and play with building values
14:25:39 <Frederick> how do I define an entry point without a main function ?
14:25:44 <SamB> oh, add "deriving (Show)" to the data declarations
14:26:14 <goron> Frederick: SamB was right, you don't want to know this yet.
14:27:30 <SamB> I sort of know how, but I have no idea why it would be usefull
14:28:16 <goron> SamB: It adds to the feature count of course!
14:28:35 <SamB> goron: that doesn't explain why someone bothered to implement it
14:28:43 <SamB> and there is no feature count!
14:28:52 <SamB> GHC has countless features, after all!
14:29:17 <goron> SamB: I am sure they are countable.
14:29:31 <eivuokko> Hehe.  For semi-decent reason, someone had main in his library modules for running tests.  Now he he can use same build and deps info and just change linking step.
14:30:42 <SamB> eivuokko: but you need to supply that option when building the module in question, afaik not when linking...
14:30:57 <lisppaste2> Frederick pasted "second try" at http://paste.lisp.org/display/13214
14:31:20 * Frederick is lost again not even loading it is working , the same declaration is broken as you can see on the abve paste
14:32:12 <fnord123> well you commented out main
14:32:53 <goron> :)
14:33:46 <Frederick> I did everything you said and it didn't work
14:34:14 <Frederick> fnord123, as the guys suggested
14:34:41 <fnord123> i just got here, mate. let me crack a term window and shove that code through ghc
14:36:38 <Frederick> fnord123, I think there is a problem with the definitions in the begining of the code
14:37:02 <int-e> deriving (show) is not the same as deriving (Show)
14:37:05 <goron> Any GTK2HS guru here?
14:37:12 <xerox> What's up with Gtk2Hs?
14:37:18 <goron> ./configure: line 4114: syntax error near unexpected token `GLIB,glib-2.0'
14:37:22 <goron> xerox: that.
14:37:43 <Frederick> int-e, rgr that
14:37:47 <xerox> :-|
14:38:07 <xerox> goron: Makefile hackery is due to dcoutts, I could only suggest to wait for him
14:38:16 <goron> xerox: What auto tools do you need to build everything? GNU?
14:38:24 <xerox> ...or check if you can understand its awkward syntax :-|
14:38:25 <xerox> Yes.
14:38:27 <fnord123> they aren't indented correctly for one. I'm trying to sort this out. I've got a bunch of errors now filled with question marks
14:38:43 <goron> xerox: I tried GNU, but I got an error the first time I ran autoreconf --install
14:38:55 <goron> xerox: Second time I ran it, problems went away.
14:38:55 <Frederick> fnord123, was this last post for me?
14:38:58 <fnord123> you know what. I think you might be in some fudged up term node
14:39:06 <goron> xerox: Then ./configure, and I got that error message.
14:39:23 <fnord123> my compiler keeps picking up  unicode. possible I picked this up pasting from my browser though
14:39:26 <goron> configure build system with those macro's is way too fragile, imo.
14:39:42 <Frederick> fnord123, I will paste it again in rafb
14:40:14 <Frederick> fnord123, http://rafb.net/paste/results/EIv4vC40.html
14:41:59 <fnord123> whats your error
14:42:16 <fnord123> by retyping every space in the file, I got it to: test.hs:37:7: The last statement in a 'do' construct must be an expression
14:43:01 <Frederick> fnord123, weird error
14:43:04 <fnord123> ah, the blank lines are problems too. got rid of them
14:43:14 <fnord123> Couldn't match `[Char]' against `StartSymbol'
14:43:19 <fnord123> is that your issue?
14:43:26 <Frederick> fnord123 , all the blank lines ??
14:43:40 <fnord123> yeah coz they mean the end of the do
14:43:51 <fnord123> I'm assuming you want the return to be the end of the do
14:44:07 <goron> Frederick: You can't use Uppercase identifiers.
14:44:23 <fnord123> snarf, good eye goron
14:44:36 <goron> Frederick: but this is a valid identifier:aStartSymbol.
14:44:46 <fnord123> he doesnt even use that var again
14:44:51 <goron> Frederick: not what I would recommmend that one to you.
14:44:59 <Frederick> and how about the error : couldn't match char against startSymbol ?
14:45:06 <goron> fnord123: That every one is perfect.
14:45:14 <goron> everyone
14:45:23 <Frederick> but i will use
14:45:50 <goron> "Free-Context"
14:46:08 <goron> Is that a joke?
14:46:13 <Frederick> nope
14:46:24 <_gour> goron: on which OS you want to build gtk2hs?
14:46:30 <goron> _gour: FreeBSD
14:47:36 <_gour> goron: on Linux I had a problem when invoking autoreconf, and I even got confirmation from autoconf devs that there is a bug which will be fixed in 2.60
14:47:55 <_gour> goron: so can you try to manually invoke aclocal, automake...?
14:48:55 <goron> _gour: I did those commands. What'
14:49:01 <goron> s "..."?
14:49:24 <_gour> goron: autoconf
14:49:41 <goron> configure.ac:117: error: possibly undefined macro: AC_MSG_ERROR
14:49:41 <goron>       If this token and others are legitimate, please use m4_pattern_allow.
14:49:41 <goron>       See the Autoconf documentation.
14:50:04 <goron> _gour: That's the complete output of autoconf.
14:51:05 <goron> _gour: You had the same error on Linux?
14:51:20 <_gour> goron: wait a minute, let me try to invoke those commands from the tarball
14:51:45 <_gour> goron: do you install from tarball or you pulled from repo?
14:51:52 <goron> repo
14:52:13 <fnord123> argh. anyone know how to connect to dal.net? My client seems to never be able to connect.
14:53:33 <_gour> goron: so 'configure' script was already present in the repo or is it created?
14:53:52 <goron> _gour: created
14:54:11 <Frederick> fnord123, http://rafb.net/paste/results/yIXVuR87.html
14:54:41 <fnord123> you can't have gaps like that
14:54:48 <fnord123> and you still have main commented out
14:55:16 <paolino_> is there a function for  [f,g,h,..] x => [f x, g (f x), h (g (f x)), ..] ?
14:55:40 <_gour> @where gtk2hs
14:55:41 <lambdabot> http://haskell.org/gtk2hs/
14:56:34 <goron> fnord123: you can have gaps like that.
14:58:25 <fnord123> doesnt it mean the end of the do, or iis it only based on the indenting?
14:58:50 <goron> fnord123: it doesn't mean the end of the do.
14:59:04 <fnord123> yom yom yom I'm eating my words. yom yom
14:59:24 <gour> goron: which version of autoconf & automake you have?
15:00:24 <goron> gour: The gnu one is...autoconf (GNU Autoconf) 2.59
15:00:39 <gour> goron: automake?
15:00:42 <goron> gour: automake (GNU automake) 1.9.6
15:01:20 <gour> goron: ok that should be ok
15:02:15 <goron> gour: so.. you can execute ./configure?
15:02:35 <goron> (without errors)
15:02:55 <gour> goron: now, from the repo, i can't
15:03:25 <Frederick> fnord123, http://rafb.net/paste/results/yIXVuR87.html did you see?
15:03:41 <goron> gour: And that's because of the error you first mentioned(1), or (2) the same error as I am getting?
15:03:53 <fnord123> i did but apperently I dont know what I'm talking about
15:04:35 <gour> goron: well 1) was on another project, autoreconf does not invoke toolchain properly
15:04:50 <Frederick> fnord123, what do you mean?
15:04:51 <gour> goron: now i get errors while invoking automake
15:05:06 <gour> goron: let me try few things..
15:07:47 <goron> gour: I am off to sleep. We will talk later.
15:07:58 <gour> goron: hmm strange, autoreconf does work in my case as well as configure
15:08:08 <gour> goron: i'm tired too
15:08:20 <gour> goron: will inform dcoutts tomorrow
15:09:01 <goron> 'night
15:09:22 <lisppaste2> Frederick pasted "Another try" at http://paste.lisp.org/display/13216
15:09:24 <gour> good night
15:12:10 <fnord123> Frederick: Id like to help but I'm afraid my haskell skills aren't up to it
15:12:25 <Frederick> fnord123, lets give it a try
15:12:35 <Frederick> do you know Context-Free grammars?
15:12:48 <fnord123> yes, but I'm beginning haskell.
15:15:35 <astrolabe> Frederick: You should explain the way in which it fails to work (compilation error or whatever)
15:16:07 <Frederick> Malformed LHS to type of class declaration at line 7 aksi will happen in line 9 since both have the same structure
15:16:20 <astrolabe> (not that I'm going to be able to help!)
15:16:39 * Frederick kicks astrolabe 
15:17:05 <astrolabe> should 'symbol' have a capital S?
15:17:35 <Frederick> accodirng to the guys data statements should bvecome with lower letters
15:18:10 <astrolabe> the guys?
15:18:36 <Frederick> astrolabe, other folks in channel
15:18:46 <Frederick> astrolabe, ive modified it and now I got another error
15:19:00 <Frederick> astrolabe, The last statement in a 'do' construct must be an expression
15:19:00 <Frederick> Failed in line 41
15:19:59 <fnord123> asrolabe, he wants to use getLine to read in data and slip into his data format. I'm supposing he needs to derive his data from another class to do that as well as show
15:20:15 <Frederick> oki identation problems fixed
15:20:42 <fnord123> and perhaps tell the compiler that startSymbol is of type StartSymbol
15:21:38 <lisppaste2> Frederick pasted "retry" at http://paste.lisp.org/display/13217
15:22:38 <Frederick> fnord123, ivew fixed identation mistakes put all in order now it seems parsec isnt importing things right cause I got an error in line 1 so if you could be kind and take a look with me I would be gratefull
15:22:58 <fnord123> no i definitly get by that
15:23:16 <Frederick> fnord123, give the last source a chance take a look
15:23:36 <Frederick> Cale, are you gone?
15:24:42 <astrolabe> What error do you get now?
15:24:43 <fnord123> fmap read getLine --this gives me an error.
15:25:43 <Frederick> astrolabe, formais.hs:1:
15:25:43 <Frederick>     Ambiguous type variable `a' in the top-level constraint:
15:25:43 <Frederick>       `Read a' arising from use of `read' at formais.hs:44
15:26:51 <astrolabe> Do you know what formais.hs is?
15:27:05 <Frederick> astrolabe, is my program ??
15:27:44 <fnord123> thats the line i mentioned mate
15:28:03 <astrolabe> @type getLine
15:28:03 <lambdabot> IO String
15:28:11 <astrolabe> @type read
15:28:12 <lambdabot> forall a. (Read a) => String -> a
15:28:21 <fnord123> io string and string are different
15:28:44 <astrolabe> fnord: right
15:28:55 <Frederick> sorry folks I dont get the point
15:29:10 <fnord123> read <- getLine -- compiles and links now
15:29:16 <astrolabe> but fmap does something.  I'll have to think
15:29:27 <fnord123> it maps functions. :P
15:29:45 <Frederick> fnord123, did you remove the map?
15:29:52 <fnord123> but if you go fmap (read <- getLine) you need another function to map it to. yes i removed the map
15:30:27 <astrolabe> What is the output of this program?
15:31:15 <lisppaste2> fnord annotated #13214 with "Frederick's programme." at http://paste.lisp.org/display/13214#1
15:31:39 <Frederick> oki back to a working code if I got the productions I cant make it workd as expected cause the productions wont get input by the proper form
15:31:56 <fnord123> good luck. :)
15:32:51 <astrolabe> @type fmap
15:32:52 <lambdabot> forall (f :: * -> *) b a. (Functor f) => (a -> b) -> f a -> f b
15:33:26 <shapr> Dang, I missed Malcolm
15:37:55 <fnord123> alright, I'm removing this .hs file, frederick. good luck
15:39:35 <Frederick> fnord123, what do you mean?
15:40:32 <fnord123> are we done with your code in here?
15:40:58 <Frederick> fnord123, surelly not, why?
15:41:04 <Frederick> I cant make it work properly
15:41:16 <fnord123> in case you get stuck again or something. i dunno.
15:41:33 <astrolabe> oki back to a working code if I got the productions I cant make it workd as expected cause the productions wont get input by the proper form   Was a bit hard to understand
15:41:33 <Frederick> fnord123, I still stuck
15:42:01 <Frederick> astrolabe, lemme give you a babel fish :)
15:42:08 <astrolabe> :)
15:42:14 <Frederick> oki the code is running and accepting input
15:42:30 <Frederick> but Im beeing unable to test it
15:43:07 <astrolabe> Frederick: Why not?
15:43:16 <Frederick> I also believe that the way im reading the set of productions is wrong, since it is not matching with the definition of the type in line 15
15:45:38 <astrolabe> Can you show me what a user input for the productions would look like?
15:45:51 <Frederick> astrolabe, productions should be something like ["S ::= a | B", "B ::=  b"]
15:47:18 <astrolabe> @eval read ["S := a|B","B := b"]
15:47:18 <lambdabot> Couldn't match `Char' against `[Char]'
15:48:22 <astrolabe> @eval map read ["S := a|B","B := b"]
15:48:23 <lambdabot> Add a type signature
15:48:52 <Frederick> astrolabe, what does lambdalob means?
15:49:32 * SamB wonders why driftnet isn't picking up the MP3 he's playing over SMB
15:49:40 <astrolabe> It's a program, a 'bot', which can do lots of useful stuff
15:49:58 * SamB supposes driftnet doesn't like SMB
15:50:03 <Frederick> astrolabe, rofl no I mean what kind of signature I must input
15:50:27 <SamB> astrolabe: lambdabot hasn't loaded his code
15:50:36 <astrolabe> Hmm I'm trying to work that out
15:50:58 <SamB> Frederick: let me think
15:51:32 <SamB> map read ["S := a|B","B := b"] :: [Production] ?
15:51:52 <SamB> or Productions, I guess
15:52:38 <SamB> only I think you probably don't want to do that unless you've got a special Read instance for Productions
15:53:18 <SamB> thats probably what you want to use Parsec for
15:53:34 <Frederick> SamB, I will have a single instance of productions
15:55:52 <Frederick> SamB, do you know parsec? maybe we together can manage a way to adapt parsecs sample of CFG to my needs
15:56:01 <Frederick> cause it is the exaclty same concept
15:56:23 <SamB> Frederick: I know a fair bit
15:56:50 <Frederick> SamB, basically Im defining a BNF
15:56:55 <Frederick> as described in parsec
15:57:02 <Frederick> and want to input the productions in run time
15:57:06 <SamB> Frederick: first you'll want to write a parser for terminals, I think
15:57:18 <Frederick> SamB, sure
15:57:25 <Frederick> SamB, I will brb in a bit
15:57:35 <Frederick> I got an emergency here gimme 12 mins plz
15:59:35 <joelr> folks, is there a way to find out the maximum heap size of a running haskell program as opposed to the total allocation?
15:59:56 <joelr> it seems to me that i could allocate a lot within the same 1mb of heap for example
16:01:01 <fnord123> oh joel. you sim running guy
16:01:12 <joelr> fnord123: what?
16:01:23 <joelr> sim what?
16:01:28 <fnord123> simulation
16:01:41 <fnord123> you sound like your trying to benchmark a simulation
16:01:46 <SamB> joelr: I'm not sure
16:01:46 <joelr> umm... nah, just your regular plain vanilla pickling and unpickling
16:01:58 <joelr> no, no simulation
16:02:00 <fnord123> as for your actual question i dont have an answer
16:02:09 <SamB> you could look in the GHC makefiles
16:02:53 <joelr> hmm
16:03:23 <dbremner> joelr - have you tried valgrind?
16:03:37 <joelr> dbremner: not really
16:06:35 <SamB> dbremner: that won't help
16:07:29 <SamB> its for C programs, GHCs allocation would slip right by it
16:07:42 <joelr> what i'm trying to deal with is a space leak but
16:07:49 <joelr> how do i know it's a space leak?
16:08:12 <joelr> how do i know that it's not just allocating lots of memory to be garbage-collected right away?
16:09:17 <dbremner> SamB - there's an allocation profiler that seems like it would work, if you're trying to determine peak memory usage.
16:11:17 <int-e> hmm. look at gc statistics? +RTS -s/dev/stdout  gives me a line "xxx bytes maximum residency (nnn sample(s))"
16:11:30 <Frederick> back
16:11:42 <joelr> aha
16:11:43 <int-e> I don't know how reliable that is but I'd hope it's of the right order of magnitude
16:12:42 <joelr> int-e: right on the money, thank you!
16:12:50 <int-e> [I add the /dev/stdout so I get the output immediately instead of heaving to find it in a file]
16:13:14 <Frederick> SamB, I need to read the productions in order to have the parser
16:13:42 <int-e> joelr: http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html#rts-options-gc describes it at the end of the section; there's another option, -S for detailed GC statistics
16:13:53 <SamB> Frederick: no, I mean to read terminals in your parser language
16:14:01 <SamB> that is, the representation for terminals
16:14:16 <Frederick> SamB, Ive created a list of terminals
16:14:17 <joelr> int-e: thanks
16:14:37 <int-e> joelr: http://www.haskell.org/ghc/docs/latest/html/users_guide/prof-heap.html#rts-options-heap-prof could also be interesting (but you've played around with some of those options already)
16:15:52 * Frederick considers the idea of giving up from haskell and starting to code in c
16:15:56 <waltz> Does there exist a Usenet newsgroup for Haskell?
16:16:05 <waltz> Frederick: Then /part.
16:17:31 <waltz> ...or refrain from such comments.
16:17:59 <Frederick> waltz, im stuck for hours
16:18:00 <shapr> I consider coding in C sometimes.
16:18:09 <shapr> But then my masochistic urge dies down...
16:18:27 <shapr> Frederick: Hey, I got stuck for hours too, in the beginning.
16:18:28 <Frederick> my problem should be so hard to define Im getting confused by small problems
16:18:32 <shapr> But now I am a functional superhero!
16:18:48 <Frederick> shapr, so please save me
16:18:48 * shapr is SuperHero of the North!
16:18:49 <waltz> heh
16:19:01 <shapr> Frederick: Ok, here's the solution....
16:19:11 <Frederick> shapr, I dont want you todo it for me
16:19:26 <Frederick> if you suddenly die now I must be able to keep going
16:19:31 <shapr> Frederick: Treat it all like an equation. You don't have steps or changes, you only have evaluation where one thing simplifies into another.
16:19:48 <Frederick> I got a code, it has at least the right looking
16:19:59 <Frederick> shapr, im trying this
16:20:07 <Frederick> but I cant seem to freaking read my grammar
16:20:14 <shapr> The inductive approach has two steps, 1. how to stop 2. how to get closer to stop
16:20:15 <Frederick> I need to read a Context-Free Grammar
16:20:38 <Frederick> This is supposed to be an easy task in haskell
16:21:01 <Frederick> I got some samples but hey are all "hard coded"  the grammar is part of th input of my program
16:21:18 <shapr> Have you read the parsec tutorial?
16:21:36 <Frederick> shapr, like 20 times
16:21:44 <shapr> Have you tried all the examples?
16:21:59 <Frederick> shapr, right now it is open in front of me and the samples are hard coded I mean they dont define the grammar in run time
16:22:10 <shapr> Have you tried all the Parsec examples?
16:22:27 <shapr> Have you written them into a file, loaded them into GHCi, and played with them interactively?
16:22:35 <shapr> Have you then tried to modify them to see how they really work?
16:22:39 <Frederick> shapr, yes...
16:22:46 <Frederick> shapr, yes
16:22:59 <shapr> In that case, you should be able to modify them to solve your problem :-)
16:23:23 <shapr> If you continue to have difficulties, google for parsec filetype:hs
16:23:30 <shapr> That way you can look at how other people have used Parsec.
16:23:50 <Frederick> shapr, Im trying dammit but I dont have a single sample in parsec of reading a gramamr it shows how to hard code I need to read it from input
16:23:57 <shapr> *Lots* of grammars are written with Parsec. You can likely adapt the available code to your needs.
16:24:23 <shapr> You're thinking about it the wrong way. your grammar is written in a grammar.
16:24:32 <shapr> So you need to hardcode your grammar grammar.
16:24:38 <Frederick> shapr, the input of myu program consists in the grammar so I cant hardcode it
16:24:57 <Frederick> shapr, Ive already written my grammar grammar
16:25:03 <shapr> Does it work?
16:25:16 <Frederick> shapr, not the productions input
16:25:21 <int80_h> what's a grammar grammar?
16:25:31 <Frederick> int80_h, the skeleton of a grammar
16:25:34 <shapr> int80_h: It's the parser that takes grammar rules. Like a BNF parser.
16:25:40 <int80_h> oh thanks :)
16:25:48 <shapr> Frederick: So, google for a BNF parser and steal it.
16:25:52 <Frederick> all grammars have some basic structures the grammar grammar represent them
16:25:53 <sh10151> bovine normal form
16:26:05 <shapr> I must go now, I have a gorgeous woman requesting my attention.
16:26:13 * shapr &
16:26:14 <sh10151> yay for shae
16:26:32 <int80_h> I thought it meant Bupkis Normal Form
16:40:28 <Frederick> guys I really cant get what am I doing of so wrong
16:42:16 <Frederick> Cale, are you still around?
16:44:55 <lightstep> @seen Cale
16:44:55 <lambdabot> Cale is in #haskell-overflow and #haskell. Last spoke 2 hours, 53 minutes
16:44:55 <lambdabot> and 40 seconds ago.
16:45:19 <Frederick> lightstep, do you think you can enlight me?
16:45:39 <lightstep> can you paste your current version?
16:46:08 <Frederick> lightstep, sure but I think I got a conceptual mistake
16:46:11 <lightstep> (although i don't understand grammars very much, and i only skimmed the backlogs)
16:47:00 <lisppaste2> Frederick pasted "last" at http://paste.lisp.org/display/13220
16:47:07 <lightstep> it's just that i can't find any version in the backlog right now
16:47:13 <lightstep> thanks
16:47:58 <Frederick> lightstep, my problem is how to define the productions properly
16:48:30 <Frederick> Ive found lots of parsers for grammars that arent given in time of execution but I need to give it in time of execution
16:48:51 <lightstep> ok, a terminal is a literal string
16:49:04 <lightstep> and a non-terminal should be a list of productions?
16:49:37 <lightstep> probably i forgot something
16:49:56 <Frederick> a terminal is a single char, a nonterminal is a list of productions yes, like "a" is a terminal and S ::= a | B where B ::= b are samples of productions
16:50:23 <lightstep> ok, so it should be
16:50:28 <lightstep> type Terminal = Char
16:50:37 <lightstep> and type Nonterminal = [Production]
16:50:57 <lightstep> now we need to figure out what a production is
16:51:10 <lightstep> what is a symbol, by the way?
16:51:48 <Frederick> lightstep, Ive called symbol the entity that is beeing evaluated at the momment in fact a symbol can be a terminal or a nonterminal (production)
16:52:25 <Frederick> lightstep, I can redefine all if you think it is appropriated
16:52:33 <lightstep> you mean, the symbol used as the name of the element (like "S" and "B" in your example)?
16:53:02 <lightstep> my point about the types was that they should match the model, then everything usually works out fine
16:53:13 <Frederick> lightstep, in the example symbol can be S or B or a or b
16:55:23 <lightstep> type grammar = Map Symbol Definition
16:55:28 <lightstep> perhaps
16:56:07 <Frederick> lightstep, how would that be?
16:56:36 <lightstep> with suitable types for Symbol and Definition
16:57:02 <lightstep> definition would represent a sum of products of things
16:57:20 <lightstep> or whatever a definition in a grammar is
16:57:34 <Frederick> lightstep, http://rafb.net/paste/results/CBYjNp26.html this is what im trying to do
16:57:35 <lightstep> oh, another thing
16:58:35 <lightstep> about the do block, "variable <- action" binds variable to the result of the action. it doesn't execute anything else, so it won't map anything etc.
17:00:12 <lightstep> you can use these variables later, but not in the same line
17:01:19 <Frederick> lightstep, the problem is right on this map Im getting crazy beeing unable to do it
17:02:38 <lightstep> what are you trying to map read on?
17:02:45 <lightstep> a line is a list of characters
17:03:07 <lightstep> do you want all the lines?
17:03:11 <lightstep> @type getContents
17:03:12 <lambdabot> IO String
17:04:41 <Frederick> lightstep, no Im trying to map variables into productions so I can have something like A -> a
17:05:56 <lightstep> well, main is composed of IO actions
17:06:22 <lightstep> but it's generally just a user interface to the parser/pretty printer
17:06:56 <lightstep> the most important things are to make the types like the mathematical notation, and then code the grammar grammar in haskell
17:07:13 <Frederick> lightstep, I believe my grammar grammar is right
17:08:43 <lightstep> but your program doesn't contain parsec definitions except 'word'?
17:09:31 <Frederick> lightstep, im tryng it but im very new to haskell
17:09:38 <lightstep> a bunch of minor errors: the name of a type cannot be "productions", since it must start with a captial letter
17:10:18 <lightstep> also, a Symbol it just like a Bool, ie. contains one of two possible values (not the whole Term and Nonterm types)
17:11:14 <Frederick> lightstep, can you help me through fixing my current program cause im getting confused without knowing when it works or now, ny now it has no error message
17:12:02 <lightstep> also, the commented word2Letter function uses Nothing, which it can't, since Nothing requires you to tag the result type with Maybe
17:12:30 <lightstep> Frederick, ok. first, you need to fix productions and fix or comment main, to load it into the interpreter
17:12:51 <Frederick> ki ive commented main
17:12:57 <lightstep> fixing main may be hard, since it requires a parser for productions, which isn't in the program yet
17:14:05 <lightstep> bah, all the europeans are sleeping now
17:14:30 <Frederick> lightstep, http://rafb.net/paste/results/3UCaDa24.html is it right now the type mistake?
17:16:08 <lightstep> err, you need to comment all of main
17:16:23 <lightstep> you can use {- block comments -}
17:16:57 <lightstep> if some parts are not comented, the compiler will shout weird errors
17:17:08 <Frederick> done
17:17:38 <lightstep> k, now it loads into ghci
17:18:36 <Frederick> loads fine
17:19:04 <lightstep> as you can see, 'c' :: Term is a terminal
17:19:29 <lightstep> "identifier" is a Nonterm
17:19:48 <lightstep> but the symbols are strange
17:20:22 <lightstep> :t Term     says    Term :: Symbol
17:20:26 <Frederick> <interactive>:1: Variable not in scope: `c'
17:20:26 <Frederick> *Main> 'c'
17:20:26 <Frederick> 'c' *Main> 'identifier'<interactive>:1: lexical error in string/character literal
17:20:52 <lightstep> not the brace/apostrophe/quotes
17:20:58 <lightstep> *note
17:21:17 <lightstep> 'c' is character, "str" is string. `f` is something else completely.
17:22:19 <Frederick> iv just copied 'c' on the interpreter
17:24:02 <lightstep> well, i meant the 11 characters 'c' :: Term
17:24:06 <lightstep> but nevermind
17:26:08 <Frederick> hm
17:27:09 <lightstep> what?
17:27:33 <Frederick> lightstep, im getting nervous im overlooking something
17:28:06 <lightstep> you did
17:28:31 <lightstep> otherwise, the program would b e easy and would work
17:28:47 <lightstep> what do you have in mind?
17:30:39 <Frederick> suicide :p
17:30:43 <Frederick> no taking serious nou
17:30:45 <Frederick> now
17:30:58 <Frederick> I need to define a grammar gramamr that works
17:31:20 <Frederick> once I can give input in the CFG
17:31:27 <Frederick> I make the rest ofthe algorithm
17:31:40 <lightstep> i think that there it a problem with Symbol (the type)
17:31:54 <lightstep> which makes it impossible to model grammars
17:32:28 <lightstep> and then you can't code the grammar grammar in any meaningful way
17:32:32 <Frederick> lightstep, wich would it be?
17:32:49 <Frederick> lightstep, can you show me another approach?
17:33:24 <lightstep> as i said earlier, a Symbol can have 2 values
17:33:29 <Frederick> lightstep, 1 sec I need reboot
17:33:32 <Frederick> 1 sec please
17:47:39 <lightstep> if Frederick returns, please tell him that i went to sleep, and that a haskell tutorial would solve many of his problems
18:18:54 <araujo> lambdabot, @yow
18:18:55 <lambdabot> Remember, in 2039, MOUSSE & PASTA will be available ONLY by
18:18:55 <lambdabot> prescription!!
18:23:02 <Frederick> back
18:24:05 <wilx`> [02:47] <lightstep> if Frederick returns, please tell him that i went to sleep, and that a haskell tutorial would solve many of his problems
18:24:21 <Frederick> wilx`, :)
18:24:58 <Frederick> brb
19:15:53 <SamB> we told him that a haskell tutorial would be a lot of help already... he said he's read all of them... (I'm not sure I believe him!)
19:16:50 * SamB suddenly realizes that the reason the channel is so dead is because it is saturday
19:17:06 * SamB is still in friday
19:18:06 <SamB> man his code is crazy!
19:20:13 * Korollary doesn't know what day it is
19:26:20 <SamB> @help time
19:26:21 <lambdabot>  @help <command> - ask for help for <command>
19:26:30 <SamB> @help
19:26:30 <lambdabot>  @help <command> - ask for help for <command>
19:26:47 <SamB> @listcommands
19:26:47 <lambdabot> use listcommands [module|command], please. Modules are:
19:26:47 <lambdabot> babel base code dice dict dummy dynamic elite fact haddock help hoogle
19:26:47 <lambdabot> karma localtime more pl plugs quote search seen spell state system todo
19:26:47 <lambdabot> topic type version vixen where
19:27:06 <SamB> @localtime Korollary
19:27:08 <lambdabot> Local time for Korollary is Fri Nov 04 19:26:50
19:27:38 <SamB> @where Korollary
19:27:38 <lambdabot> I know nothing about korollary.
19:29:40 <Korollary> I'm on the #haskell map
19:36:53 * fworp searches for a haskell-friendly unix shell account provider
19:41:10 <Korollary> fworp: why ?
19:43:58 <fworp> Korollary, because i would like to compile and use haskell stuff for my website, and im not self hosting
19:49:51 <fworp> the admin of my current shell provider tried to build ghc for me today, but, for whatever reason, that didnt work. and the binaries depended on a newer version of perl than he liked. Building it from source may have too, which would explain allot.
19:59:24 <SamB> fworp: huh. I thought only the Great Mangler required Perl these days...
19:59:42 <dons> a newer version of perl? hmm
19:59:46 <SamB> maybe your shell provider's has bugs?
20:00:00 <dons> maybe that's a really old box they have
20:00:10 <SamB> or it could be ancient...
20:00:23 <SamB> isn't it possible to have more than one perl installed?
20:05:25 <dons> fworp, can't you compile the binary on your   box, and then run it on the server?
20:07:16 <SamB> dons: that wouldn't work too well if the great mangler doesn't like that version of PERL...
20:07:29 <dons> but the perl code is run at compile time, not runtime
20:07:41 <dons> so if he can compile up a haskell binary, then perl is not an issue.
20:07:47 <dons> or even compile -fasm
20:07:49 <SamB> oh, of the program, gotcha
20:08:09 <dons> i've never heard of a perl issue with the mangler, though. this must be an *old* box
20:08:11 * SamB thought dons meant GHC
20:08:50 <SamB> dons: what about libc issues?
20:09:55 <dons> link it statically?
20:09:56 <SamB> Korollary: I will see tomarrow before you do!
20:10:45 <SamB> am I like the only Haskell user in the state?
20:10:52 <SamB> or just the only one who uses IRC?
20:11:26 <dons> @map
20:11:27 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
20:11:52 <SamB> dons: yes, thats what I am looking at ;-)
20:12:14 <dons> oh. :)
20:12:46 <SamB> I'm in Pennsylvania, if anyone was/will be wondering...
20:13:57 <samx> i'm pretty near your spot then. new york
20:15:23 <SamB> I think sethk is in New York, too...
20:15:28 <Korollary> he is
20:15:32 <SamB> possibly New Jersey
20:15:57 <Korollary> I'm near dbremner.
20:17:09 <SamB> sjanssen looks lonely
20:18:12 <dons> maybe you should start a Monad users support group in the states
20:18:54 <gzl> SamB: I'm in the US
20:18:54 <Korollary> dons: does anybody live in northern .au ?
20:19:26 <dons> not many people. maybe a few hundred thousand all up
20:19:47 <gzl> wow, in all of northern au?
20:20:56 <dons> yeah, I reckon so
20:21:08 <dons> @wikipedia northern territory
20:21:10 <lambdabot> http://en.wikipedia.org/wiki/Northern_territory
20:21:11 <Korollary> I heard that it was unbearably hot there
20:21:22 <dons> the desert can get hot ;)
20:21:24 <SamB> dons: are they indiginous or did their ancestors come from europe?
20:21:39 <dons> there youu go, populatoin of 201,800
20:21:58 <dons> I think half and half
20:22:26 <Korollary> "The population of the Northern Territory is only about 1% of the total population of Australia."
20:22:40 <Korollary> "Indigenous Australians people make up 27 per cent of the Northern Territory's population and own some 49% of the land in the Northern Territory."
20:25:27 <araujo> Hello!
20:25:37 <araujo> Anyone knows a public darcs repo?
20:26:37 <dons> yes!
20:26:39 <dons> @version
20:26:39 <lambdabot> lambdabot 3p168, GHC 6.5.20050806 (Linux i686)
20:26:39 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:26:46 <dons> @google _darcs
20:26:47 <lambdabot> http://dev.conio.net/repos/risp/_darcs/
20:27:06 <SamB> what is risp?
20:27:31 <araujo> mm...
20:27:31 <dons> no idea.
20:27:40 <araujo> There are some ruby code there :-]
20:41:08 <nik777> ok, new channel
20:41:15 <fworp> dons: i think the perl dependency was for version 5.8 (maybe?), and the server uses freebsd 4.9
20:41:43 <Cale> hello nik777
20:41:57 <Cale> learning Haskell?
20:42:23 <SamB> nik777 is interested in how to actually use darcs to coordinate development between widely-seperated groups of people, actually...
20:42:35 <Cale> ah
20:43:41 <SamB> our flagship project is probably lambdabot.
20:44:04 <Cale> hehe :)
20:44:16 <Cale> It does seem to get attached to a lot of code :)
20:44:26 <SamB> @version
20:44:27 <lambdabot> lambdabot 3p168, GHC 6.5.20050806 (Linux i686)
20:44:27 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
20:44:58 <Cale> @type concatMap
20:44:59 <lambdabot> forall b a. (a -> [b]) -> [a] -> [b]
20:45:10 <Cale> @type (=<<)
20:45:11 <lambdabot> forall b (m :: * -> *) a. (Monad m) => (a -> m b) -> m a -> m b
20:45:27 <Korollary> @type (>>=)
20:45:28 <lambdabot> forall (m :: * -> *) b a. (Monad m) => m a -> (a -> m b) -> m b
20:45:38 <Cale> @eval [1,2,3] >>= \x -> [10*x,10*x+1]
20:45:39 <lambdabot> [10,11,20,21,30,31]
20:46:05 <Cale> @yow
20:46:06 <lambdabot> over in west Philadelphia a puppy is vomiting ...
20:46:32 <SamB> Lambdabot has an hs-plugins based plugin system, so there are a lot of pretty much independant plugins, and we basically darcs send anything we want included to dons
20:46:38 <Cale> @hoogle a -> [a] -> b
20:46:40 <lambdabot> Data.List.head :: [a] -> a
20:46:40 <lambdabot> Data.List.last :: [a] -> a
20:46:40 <lambdabot> Prelude.head :: [a] -> a
20:47:03 <Cale> @hoogle (a -> b) -> ([a] -> [b])
20:47:04 <lambdabot> No matches, try a more general search
20:47:08 <Cale> what? :)
20:47:22 <Korollary> @type foldl1
20:47:23 <lambdabot> forall a. (a -> a -> a) -> [a] -> a
20:47:38 <Cale> @hoogle (a -> a -> a) -> [a] -> a
20:47:39 <lambdabot> Data.List.foldl1 :: (a -> a -> a) -> [a] -> a
20:47:39 <lambdabot> Data.List.foldl1' :: (a -> a -> a) -> [a] -> a
20:47:39 <lambdabot> Data.List.foldr1 :: (a -> a -> a) -> [a] -> a
20:47:43 <SamB> @hoogle (a -> b) -> [a] -> [b]
20:47:44 <lambdabot> Data.List.map :: (a -> b) -> [a] -> [b]
20:47:44 <lambdabot> Prelude.map :: (a -> b) -> [a] -> [b]
20:47:44 <lambdabot> Control.Parallel.Strategies.parMap :: Strategy b -> (a -> b) -> [a] -> [b]
20:48:01 <Korollary> hmm, parentheses
20:48:08 <Cale> ah, it considers (a -> b) -> ([a] -> [b]) and (a -> b) -> [a] -> [b] different types :)
20:48:15 <Cale> that's a bug :)
20:48:17 <SamB> nik777: so that isn't very complicated
20:48:51 <SamB> I think darcs projects tend to go best when you have one or a couple of maintainers who you can just send stuff to
20:48:55 <Korollary> well, are the types a and (a) equivalent ?
20:48:59 <nik777> ok, my original plan was for each of us to have darcs repos of our development. We then send patches to eachother when we have something new working. Then, for releae, we put the agreed patches onto a public darcs repo for the general public.
20:49:23 <Cale> Korollary: yeah, and (->) is right associative
20:49:28 <nik777> However, it seems that 'darcs send' needs to see the remote repo - it can't just send to a user somewhere.
20:49:43 <Cale> darcs send sends to an email address, I think
20:50:19 <SamB> nik777: you could have a couple of publicly-visible repos, one with all the experimental stuff and one of stuff you have decided to put in the next release
20:50:28 <nik777> Cale: true, but if I try 'darcs send' without access to the remote repo, darcs  send tells me there are no patches to send.
20:50:40 <Cale> ah, right
20:51:08 <nik777> SamB: Yes, I'm beginning to think that might be the solution. Is there a reason why 'darcs send' needs to see the remote repo?
20:51:40 <SamB> nik777: to know which patches are already there
20:52:11 <nik777> SamB: I had assumed that the receiver of the email could decide which patches to apply, and which to ignore.
20:52:36 <SamB> nik777: which allows it to only offer you patches the remote repo doesn't yet have, as well as meaning it doesn't need to send nearly the entire repo along with the new patches
20:53:40 <SamB> it is possible that darcs isn't actually the VCS for you
20:53:59 <nik777> The darcs FAQ indicates I could achieve my goal using context files. I've tried the example in the FAQ, without success. However, I think I have is worked out.
20:54:20 <nik777> SamB: possibly. It seemed a much better fit than CVS or Subversions...
20:54:44 <SamB> nik777: you could base your sendings off the central relase repo
20:55:02 <nik777> SamB: That's an idea worth investigating!!
20:55:10 <SamB> nik777: oh, no, I'm not suggesting CVS or SVN, those would be much worse for what you want...
20:55:23 <nik777> Ok, I'll have a try with that, and see where it leads me.
20:55:37 <nik777> SamB: BTW, which other VCS would you suggest?
20:55:55 <CosmicRay> nik777: didn't get in on this conversation, but have you considered darcs?
20:56:34 <nik777> SamB: I think your latest suggestion is the correct solution, and the way darcs was intended to be used.
20:56:38 <SamB> CosmicRay: that was the one we were talking about in the first place ;-)
20:57:27 <nik777> CosmicRay: I'm actually trying to find out how to use darcs. I've just had some misunderstandings regarding how it worked
20:57:44 <CosmicRay> ah
20:57:52 <nik777> CosmicRay: After initial scepticism when someone first suggested darcs to me, I've become a bit of a convert.
20:58:18 <CosmicRay> nik777: sounds familiar ;-)
20:58:46 <nik777> SamB: Ok, I have to go and pick up one (or more) kids. Thanks for your time, I believe I have an almost perfect solution. Thank you for your time :o)
20:59:49 <SamB> nik777: I don't actually have any other VCS to suggest, its just that the workflow you were talking about sounded like something I'd heard about somewhere before... I'm not sure where. There are so many up-and-coming distributed VCSes these days...
21:00:01 <nik777> Cheers all - maybe one day I'll come back and try to learn Haskell :o)
21:00:22 <nik777> SamB: Ok, thanks! I'll let you know how it works out for us :o)
21:00:37 <SamB> nik777: your welcome for the time ;-)
21:00:39 <nik777> Cheers all!
21:01:32 * SamB basks in the friendly atmosphere
23:40:03 <gour> dcouts: ping
