02:12:52 <jlouis> Hi
02:13:10 <ikegami--> hello
02:13:18 <yozora> hi
02:14:02 <jlouis> @where conjure
02:14:02 <lambdabot> http://j.mongers.org/pub/haskell/darcs/conjure/
02:14:09 <jlouis> updated with some cool stuff by adept
02:16:52 <ikegami--> what's conjure?
02:17:19 <ikegami--> (and I'm going to see the Conjure.hs)
02:17:33 <ikegami--> aha, Bittorrent
02:17:41 <jlouis> yeah!
02:22:12 <ikegami--> hmm, it's interesting and cool
02:41:29 <psi> does it work yet?
02:59:56 <jlouis> psi: nope ;)
03:00:20 <jlouis> But we are working on getting it to work
03:04:42 <psi> ok :) good luck
03:06:59 <ikegami--> Does conjure need OpenSSL?
03:07:22 <ikegami--> I don't know about the bittorrent, but for my project I need an OpenSSL wrapper in Haskell
03:08:27 <ikegami--> (not http://www.haskell.org/crypto/ but the interface of openssl, such as 'openssl smime')
03:28:15 <jlouis> ikegami--: No. The Bittorrent protocol does not use SSL
03:44:52 <musasabi> Is this the correct way to have abort/commit hooks with STM:
03:45:53 <musasabi> atomicallyCA commit abort trans = atomically(trans `orElse` abort) >> atomically commit
03:47:24 <musasabi> although the commit hook is too late :-(
03:47:48 <musasabi> Is there any solution besides nested transactions (not supported by GHC) ?
03:50:17 <jlouis> atomically(trans `orElse` commit `orElse` abort) ?
03:50:39 <jlouis> or maybe have the commit part pushed inside trans
03:51:02 <musasabi> jlouis: that does not work (the first one when trans is succesfull)
03:51:26 <jlouis> yup, see that
03:51:34 <jlouis> the latter is the way I would go then
03:51:44 <musasabi> if it is pushed inside the trans is may be run multiple times when the transaction aborts
03:52:16 <jlouis> hmmm
03:53:02 <jlouis> Its not that easy, heh
03:54:38 <musasabi> basically my commit hook is writeToLogFileTransactionHasCommitted, so it must be run exactly on commit.
03:56:54 <musasabi> If it is run inside STM we get the 1) write commit to disk, 2) abort, 3) system crash, 4) inconsistent log, and with the commit outside the transaction, 1) Trx1 commits, 2) Trx2 commits (after 1 and dependent on it), 3) Log Trx2 (happens first by bad luck), 4) System crash, 5) inconsistent log
03:58:36 <SamB> jlouis: what if the tracker URL starts with https:// ? ;-)
04:01:41 <shapr> Wow, the sun{rise/set} through the falling snow looks like a distant nuclear explosion happening just over the horizon.
04:01:44 <jlouis> SamB: shhhhhhh! ;)
04:02:18 <shapr> Good morning #haskell !
04:02:46 <musasabi> morning shapr 
04:03:13 <shapr> How's code?
04:04:39 <ikegami--> jlouis: i see
04:05:23 <ikegami--> I'm talking at another IRC channel about a local meeting to study Haskell in Japan (Kansai area)
04:05:32 <ikegami--> In Japan, Haskell becomes popular now
04:05:40 <ikegami--> very hot topic
04:05:58 <shapr> Cool!
04:06:40 <shapr> I downloaded monadius and other Haskell games, and a partial ruby interpreter from .jp Haskell sites.
04:07:59 <ikegami--> they will join the meeting :)
04:08:48 <shapr> Wow, neat!
04:09:14 <shapr> I liked the games :-)
04:09:47 <araujo> Hello here.
04:09:49 <araujo> monadius?
04:10:59 <ikegami--> now it's time to go home
04:11:00 <shapr> @google monadius haskell
04:11:01 <lambdabot> http://www.geocities.jp/takascience/windows/monadius.html
04:11:18 <shapr> Are those great screenshots or what?
04:11:31 <ikegami--> and Frag is also great
04:12:10 <shapr> Yeah, Frag is really cool. I like the arrow based reactive structure.
04:13:46 <araujo> For windows :-(
04:15:38 <ikegami--> here is an install log on Debian
04:15:41 <ikegami--> http://ukai.org/d/index.cgi?2005-05-31&l=en
04:15:44 <ikegami--> for monadius
04:15:56 <ikegami--> (with little hack using perl)
04:16:05 <ikegami--> I guess monadius can work on Linux
04:17:56 <jlouis> shapr: where are you located? Sweden?
04:18:06 <ikegami--> and I'll ask the author to port monadius to Linux later
04:18:14 <ikegami--> :)
04:18:37 <shapr> jlouis: yup, see @map
04:18:49 <shapr> hiya mikd, learning Haskell?
04:18:49 <jlouis> @map
04:18:49 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
04:19:30 <mikd> hi
04:19:55 <mikd> already know quite a lot of haskell :)
04:20:12 <shapr> Cool, welcome to #haskell
04:20:16 <mikd> cheers
04:20:27 <shapr> I guess you don't have any Haskell questions then?
04:20:31 <phys_rules> welcome, mikd :)
04:20:36 <mikd> heh, not at the moment
04:21:21 <mikd> unless you know if drag+drop works in gtk2hs...
04:21:43 <jlouis> shapr: ah, cool location
04:21:46 <shapr> dcoutts is the one to ask about that.
04:21:49 <shapr> jlouis: Cold even.
04:22:02 <jlouis> I can imagine
04:22:06 <jlouis> More time indoors coding
04:22:09 <shapr> I'm 70 km south of the arctic circle.
04:22:24 <shapr> With regular time unicycling in the deep snow.
04:22:37 <phys_rules> most of the haskell people are concentrated in western europe =)
04:22:43 <phys_rules> according to the map that is ;)
04:25:50 <shapr> Oh, I remember the problem... Monadius builds fine for me, but ghc6-hopengl doesn't call glutinit.
04:30:00 <shapr> "freeglut  ERROR:  Function <glutCreateWindow> called without first calling 'glutInit'."
04:32:30 * SamB sighs with relief
04:32:51 * SamB had been unable to set the keyboard focus, but restarting Window Maker fixed it
04:36:58 <SamB> jlouis: great, I think my merger conflicts with your merger...
04:38:31 <ADEpt> Aha! You guys merging something new? :)
04:39:08 <SamB> ADEpt: no, but remember that conflict between your patch and my patch?
04:39:10 <jlouis> shhhh, ADEpt ;)
04:39:22 <jlouis> Theres some new stuff in a short amount of time
04:39:32 <jlouis> ... if the test goes through
04:39:33 <SamB> well, now I have a conlict between jlouis's merger and mine
04:39:51 <jlouis> doh
04:40:12 <SamB> jlouis: I'll fix it
04:40:22 <jlouis> The changes are cool guys. Mighty haskell programmers work on Conjure!
04:41:47 <SamB> oh great, it has to run the tests...
04:41:55 <ADEpt> jlouis: i just pulled and about to send out new batch of patches, so dont go away :)
04:42:13 <SamB> ADEpt: you didn't also merge the mergers?
04:43:46 <ADEpt> SamB: I did, but I didnt sent it to jlouis :(
04:43:54 <SamB> oh.
04:44:21 <SamB> so, who shall send?
04:44:55 <ADEpt> SamB: you :)
04:44:59 <SamB> okay
04:45:39 <SamB> jlouis: okay, there is stuff
04:45:47 <SamB> integrate!
04:47:28 * ADEpt waits for signal to pull :)
04:52:27 <SamB> okay, so disregard my merging of mergers
04:53:32 * SamB unpulls
04:54:10 <jlouis> ok, awating mails ;)
04:54:42 <jlouis> I'll integrate them, but my small work should be online now.
04:55:13 <SamB> jlouis: but disregard my patch entitled "  * Merge mergers wrt no more overlapping instances"
04:55:29 <jlouis> SamB: ok
04:55:43 <SamB> because that conflicts with your merging of mergers
04:55:49 <ADEpt> SamB: hm. I never actually used unpull before. Please advice me - i just pulled from jlouis, got conflicts in several files, resolved them manually. What should I do now - record and send or unpull(?) something
04:56:00 * ADEpt is being haunted by his CVS past
04:56:10 <SamB> ADEpt: which files?
04:56:25 <ADEpt> Bencode.hs and config.mk.in
04:56:32 <SamB> ah
04:56:53 <SamB> revert and pull again?
04:57:11 <ADEpt> wait a sec
04:57:12 <SamB> the revert is only needed because of the conflict markers...
04:57:37 <SamB> jlouis fixed it, even though I said I was going to do it
04:57:59 <jlouis> ok
04:58:13 <jlouis> I'll just integrate stuff
04:58:17 <SamB> or, if you have an unsent patch, you might need to unpull it
04:58:28 <jlouis> yup
04:59:12 <SamB> assuming it doesn't do anything substantially different than what jlouis's does
04:59:26 <SamB> which from the filenames I think is a pretty safe assumption ;-)
05:01:21 <ADEpt> aha. It worked.
05:12:23 <CosmicRay> JaffaCake: ping
05:12:31 <JaffaCake> pong
05:12:45 <CosmicRay> JaffaCake: everything except for ghc itself is out there now
05:12:56 <JaffaCake> wow, great
05:13:03 <CosmicRay> ghc has converted up through 2002, so I expect it will finish within the next 12-24 hours
05:13:08 * JaffaCake tries a darcs get
05:13:09 <phys_rules> hey JaffaCake!
05:13:27 <JaffaCake> hi phys_rules
05:14:57 <phys_rules> JaffaCake: I'm trying to port GHC 6.5 to Solaris x86
05:15:08 <phys_rules> there is some progress, but still some issues that I cannot resolve
05:16:35 <CosmicRay> JaffaCake: if there's anything you don't like about the conversion, please do let me know
05:17:11 <CosmicRay> JaffaCake: btw I have created snapshots (darcs optimize --checkpoint) for each tree, so darcs get --partial should be much faster than a plain darcs get, and should give you all the info you need unless you want to look at old diffs
05:17:30 <CosmicRay> that will be particularly helpful for the ghc tree, where there will be some 23,000 patches to download otherwise ;-)
05:17:47 <JaffaCake> hehe, thanks
05:22:24 <JaffaCake> CosmicRay: you could change "project" in the patch name to be something more specific, eg. "nofib", but it's probably a bit late
05:22:38 <JaffaCake> not a big deal anyway
05:22:50 <CosmicRay> yeah, I didn't realize it was going to shove that in until I started looking at the finished repos.
05:23:04 <CosmicRay> I'd have to rebuild the repos.  I could do that if you want.
05:23:42 <JaffaCake> nah, it's not worth rebuiding everything for
05:23:47 <CosmicRay> but I'd rather not unless there are other problems to fix at the same time ;-)
05:25:44 <CosmicRay> we talked about having a shell script that would check out GHC, populating it with subrepos (such as libraries) as appropriate
05:26:05 <ADEpt> jlouis: patches are on the way
05:26:09 <CosmicRay> I'd be happy to write that for you, or you could...  I guess it could go in the ghc darcs repo
05:26:16 <jlouis> ADEpt: cool cool cool cool
05:26:58 <ADEpt> jlouis: i'm yet to see how your pictures differ from my pictures. Oh. Seems that I forgot the pictures.
05:27:06 <CosmicRay> JaffaCake: two other things to start thinking about: 1) how do you want to hand out commit permissions to the darcs repo, and 2) what commit mechanism do you want to be standard
05:27:15 <CosmicRay> oh, and 3) do you want e-mail notifications of commits
05:27:32 <CosmicRay> #3 will require darcs 1.0.4 to be installed on monk.  I have a binary of that in ~jgoerzen/bin, BTW.
05:28:01 <JaffaCake> CosmicRay: sure.. but most people will just want libraries, so I don't think it's a high priority
05:28:10 <CosmicRay> OK
05:28:14 <ADEpt> jlouis: no, I included the pictures :)
05:28:37 <jlouis> okie!
05:28:44 <CosmicRay> by commit mechanism, the choices generally boil down to committers using darcs push or sending GPG-signed e-mails to a patch bot
05:28:55 <phys_rules> JaffaCake: can you help me with some problems I have porting GHC to Solaris x86 ?
05:29:06 <JaffaCake> phys_rules: happy to
05:29:30 <phys_rules> I sent you an email, explaining some of the problems
05:30:01 <phys_rules> there seems to be a problem with the mangler on solaris, it generates weird .s files
05:30:12 <phys_rules> and they don't export any of the entry/return stg...
05:30:49 <phys_rules> so I just compiled the raw_s's (removing the /, and discarding the call __DISCARD__)
05:31:17 <phys_rules> I can give you RTS debug info as well if you wish
05:31:32 * JaffaCake is dealing with outstanding questions in a FIFO
05:31:59 <JaffaCake> CosmicRay: #1: probably same as we do for cvs, but we'll have to put everyone in the darcs group
05:32:41 <JaffaCake> CosmicRay: #2: darcs push works on cvs.haskell.org with SSH, I imagined we would use that, unless you have a better idea?
05:33:09 <JaffaCake> CosmicRay: #3: yes we want email notifications, and I'll install your darcs binary
05:33:44 <phys_rules> JaffaCake: If I remove the initial call to the stg_init from the hs_add_root then for example running genapply gets some code generated on screen but then it core dumps
05:34:35 <CosmicRay> JaffaCake: darcs push will work with #1 if everyone is in the darcs group... or you could have the former fptools repos owned by the haskell group.  We will have to watch the umask and possibly do a bit of tweaking there.
05:36:38 <dcoutts_> @seen JohnMecham
05:36:39 <lambdabot> I haven't seen JohnMecham.
05:36:50 <JaffaCake> CosmicRay:  darcs 1.0.4 is now in /usr/bin
05:37:08 <CosmicRay> JaffaCake: nice, thanks
05:37:34 <dcoutts_> @seen JohnMeacham
05:37:35 <lambdabot> I haven't seen JohnMeacham.
05:37:39 <CosmicRay> JaffaCake: I'll do some checking on group-writable darcs repos and e-mail notifications and let you know if there are any questions.
05:37:48 <JaffaCake> great
05:38:02 <CosmicRay> JaffaCake: oh, what do you think of the ghc-6.4 branches migrated to darcs?
05:41:11 <JaffaCake> phys_rules: looks like we need to figure out what is wrong with the mangler first
05:41:19 <JaffaCake> I can't find your email, sorry :(
05:42:45 <phys_rules> JaffaCake: I just resent it
05:56:28 <phys_rules> JaffaCake: would be nice if there would be an Apply.s  generated on a linux machine, so I could compare them (since solaris in the mangler is in the same group)
05:56:48 <phys_rules> I don;t have linux unfortunately
05:56:53 <JaffaCake> phys_rules: I'll send you one
05:59:28 <phys_rules> JaffaCake: can you send me a raw_s as well ?
05:59:38 <JaffaCake> sure
06:00:10 <JaffaCake> done
06:00:13 <CosmicRay> JaffaCake: one other thing to consider is where will "darcs send" e-mail patches?  these would normally be submissions from people that don't have direct commit access
06:00:42 <CosmicRay> those with direct access can then, if they approve, commit patches to their local repo and darcs push them up.
06:00:53 <JaffaCake>  I think to the same list as commit messages go - i.e. cvs-ghc@haskell.org for ghc commits, etc.
06:01:44 <JaffaCake> hmm, I should probably  make aliases for darcs-*@haskell.org
06:01:53 <CosmicRay> well, one problem with that is that this will require moderator approval before they hit the list.
06:02:00 <CosmicRay> since people may not be subscribed to that list.
06:02:11 <CosmicRay> and my experience with moderator approval on haskell.org lists is that it never happens ;-)
06:02:12 <kzm> Any idea what this means: "xsact: /bin/sh: setNonBlockingFD: invalid argument (Bad file descriptor)"
06:02:15 <JaffaCake> I can probably munge the mailman config to accept darcs patches
06:02:27 <kzm> (xsact is my program, it does use sh via system)
06:02:44 <JaffaCake> CosmicRay: you've had moderated messages dropped?  that shouldn't happen :S
06:02:45 <phys_rules> JaffaCake: hmm, but I see the .s doesn't export things like stg_ap_0_ret , how does the whole thing get linked then ?
06:02:57 <CosmicRay> JaffaCake: yes.  to cvs-ghc even. ;-)
06:03:02 <JaffaCake> oh dear
06:03:22 <jlouis> kzm: It has a file descriptor (fd) which it tries to make non-blocking, but the fd given is invalid
06:04:06 <kzm> How could that come about?
06:04:27 <kzm> I'm trying to use a PBS cluster, so I expect the unexpected.  The question is how to work around it :-)
06:05:17 <CosmicRay> JaffaCake: the only other problem I can think of with using the cvs-* lists is that the submissions may get lost in the noise.  but it's your call.  When people manually send you diffs to ghc now, do they use glasgow-haskell-users or cvs-ghc or some other way?
06:05:45 <JaffaCake> phys_rules: the _ret symbols are removed by the mangler, we only use the _info symbols (the two symbols would point to the same address anyway)
06:06:20 <phys_rules> JaffaCake: yeah, but the mangler doesn't remove the ret symbols so that probably is the problem..
06:06:31 <JaffaCake> CosmicRay: the answer to your question is yes :)
06:06:57 <CosmicRay> heh
06:07:31 <JaffaCake> we don't get that many patches right now, so let's see how it goes with cvs-ghc@haskell.org
06:07:53 <ferdy> hi folks, I'm trying to bootstrap ghc-6.4.1 using a binary ghc-6.4.1 on alpha. I'm getting this errors: http://pastebin.com/442194 . Any help will be really appreciated
06:08:01 <CosmicRay> JaffaCake: ok
06:08:18 <JaffaCake> I can always filter them into a separate folder locally
06:08:44 <CosmicRay> ferdy: not sure on this particular error, but common things to check are in mk/config.mk.  Make sure you hard code unregisterised to yes and ghci to no.
06:08:55 <CosmicRay> alpha doesn't support ghci
06:09:08 <ferdy> will try, thanks
06:09:18 <CosmicRay> other than that, others may have better tips for you
06:10:21 <kzm> Does the "sh" part indicate it is my call to "system" that is the culprit?
06:10:41 <phys_rules> JaffaCake: I've sent you my Apply.raw_s
06:10:46 <JaffaCake> ferdy: where did you get your binary 6.4.1?
06:10:54 <ferdy> JaffaCake: from the debian peeps
06:11:20 <ferdy> JaffaCake: I'm trying to use that one to build a compiler capable to build ghc-6.4.1 (ok, I might be explaining myself horribly)
06:11:42 <ferdy> JaffaCake: I'm doing a binary package for Gentoo Linux so users are able to bootstrap their own ghc on alpha
06:12:30 <JaffaCake> hmm, I didn't realise Debian had a GHC port for alpha
06:12:38 <JaffaCake> that's cool :)
06:12:45 <ferdy> JaffaCake: haha it is :P
06:13:31 <JaffaCake> it's probably unregisterised, so you need to set GhcUnregisterised=YES in mk/build.mk
06:13:48 <JaffaCake> (create mk/build.mk if it doesn't exist)
06:14:20 <JaffaCake> then you'll need to make clean in ghc/compiler
06:14:32 <ferdy> k, testing
06:15:49 <ferdy> any way to check if it is unregistered or not ?
06:17:34 <ferdy> and also, what do you recommend gcc-3.3.2 or gcc-3.4.4 ?
06:21:12 <jlouis> ADEpt: wheee, nice pic! It is not that far away from what I percieved
06:21:55 <JaffaCake> ferdy: can't think of a really easy way to test whether a compiler is building unregisterised binaries or not... but if you compile something with -v -fvia-C, a *registerised* compiler will have a line that invokes ghc-asm, and an unregisterised compiler will not
06:22:16 <ferdy> k, will try
06:22:36 <JaffaCake> ferdy: we like GHC to work with all gcc versions.  AFAIK 3.3.2 and 3.4.4 are equally bad :)
06:22:45 <ADEpt> jlouis: i believe it is off in some aspects. Your todays docs for InterestTable helps a lot, though. I will read and update. Oh, btw, how about me changing requestSeeder to requestedFromSeeder and requestLeecher to requestedFromLeecher ?
06:22:56 <ferdy> JaffaCake: hahaha, ok
06:23:01 <jlouis> ADEpt: do it!
06:23:15 <jlouis> its more readable that way
06:23:55 <jlouis> pulling IO from Shuffle is ok too
06:24:15 * jlouis ponders on Generics for BEncode
06:24:16 <xerox> iPods?
06:24:30 <jlouis> xerox: nope ;)
06:25:27 <ADEpt> jlouis: what for (i mean, Generics)?
06:25:41 <JaffaCake> phys_rules: never mind, I see you've already sent me the .s
06:25:54 <ADEpt> jlouis: i had some exp with generics, btw.
06:27:19 <jlouis> ADEpt: okie. I now remember why I did not do it: 0verkill probably
06:27:23 <ctrlsoft> is there any way of doing 'withCString' without requiring IO ?
06:27:39 <jlouis> What we have now seems to work ;)
06:28:49 <ADEpt> jlouis: i wonder if it will be too bad to narrow shuffle to [Int] from [a] ?
06:29:17 <ADEpt> jlouis: because for short lists it does not shuffle very good ...
06:29:51 <jlouis> I had hoped for shuffle to be as general as possible
06:30:13 <jlouis> but if it doesn't work, specializing it is certainly one solution
06:31:02 <phys_rules> JaffaCake: maybe the only problem is that it does  .long   stg_ap_0_ret - stg_ap_0_info instead of just  .long   stg_ap_0_info
06:31:03 <jlouis> (And I updated Conjure yet again today)
06:31:38 <JaffaCake> phys_rules: yes, I just noticed that
06:33:20 <ADEpt> jlouis: ah, not to worry, i think that i am being overly paranoid.
06:33:34 <JaffaCake> phys_rules: I wonder if you have an inconsistent setting for unregisterised somewhere
06:33:41 <ADEpt> jlouis: btw, errors during quickCheck run does not propagate to test.sh :(
06:34:09 <jlouis> ADEpt: when programming lazy, overly parania is mandatory ;)
06:34:18 <jlouis> ... or an effective space profiler, heh
06:34:45 <jlouis> ADEpt: you saw my little && \ + exit $? hack to test.sh?
06:34:54 <jlouis> test.sh.in, rather
06:36:12 * neologism reading about post-declarative progamming
06:36:18 <neologism> programming even ;)
06:36:20 <joelr1> howdy
06:36:34 <xerox> neologism: let us know more, please :-)
06:36:54 <phys_rules> JaffaCake: is there a way to check it ?
06:36:59 <neologism> xerox: in imperative programing you tell what and how do things
06:37:05 <neologism> in declarative you tell what to do
06:37:12 <JaffaCake> phys_rules: what's in your mk/build.mk file?
06:37:14 <neologism> in post-declarative you just declare what is the goal
06:37:28 <ADEpt> jlouis: yes, even with it. And it is redundant, I am almost sure.
06:37:30 <xerox> Sounds like 'IA' 
06:37:38 <phys_rules> GhcWithInterpreter=NO
06:37:39 <phys_rules> GhcWithNativeCodeGen=NO
06:37:39 <phys_rules> SplitObjs=NO
06:37:39 <phys_rules> GhcLibWays=
06:37:39 <xerox> AI, even, in English, heh.
06:37:40 <joelr1> would the real slim shady^H^H^H^H^H^H^H^Hsimon marlow please stand up?
06:37:45 <neologism> xerox: yes... :)
06:38:06 <neologism> its tightly coupled with agents
06:38:28 <xerox> Could you point us to something?
06:38:39 <JaffaCake> phys_rules: your Apply.hc is already wrong, because those _ret symbols should be _info
06:38:53 <neologism> xerox: I am afraid my univ provides just texts in czech :(
06:38:59 <xerox> Urgh.
06:39:00 <JaffaCake> and that could happen if TABLES_NEXT_TO_CODE is not defined, but it should be
06:39:20 <JaffaCake> joelr1: yo :)
06:39:42 <phys_rules> JaffaCake: well, I was trying to bootstrap it from windows, should I try to define TABLES_NEXT_TO_CODE explicitly ?
06:40:03 <phys_rules> JaffaCake: the windows' build.mk is different
06:40:03 <JaffaCake> phys_rules: so you're bootstrapping from .hc files?
06:40:07 <phys_rules> JaffaCake: yes
06:40:09 <JaffaCake> ah
06:40:21 <JaffaCake> then you should set GhcUnregisteriesd=YES in mk/build.mk
06:40:31 <JaffaCake> and follow the instructions in the Building Guide!
06:40:49 <phys_rules> JaffaCake: the windows's build.mk has it
06:41:17 <JaffaCake> looks like you've got quite a long way so far, nice going
06:41:18 <ferdy> JaffaCake: ok, conffirmed, the debian peeps build ghc with GhcUnregistered=YES unless you are on i386 or sparc
06:41:48 <JaffaCake> ferdy: right
06:41:53 <phys_rules> JaffaCake: so the build.mk should be the same on both the target & the host ?
06:42:19 <JaffaCake> phys_rules: hmm, well not necessarily, but the GhcUnregisterised settings should be the same
06:43:32 <phys_rules> JaffaCake: ok, I think that's not mentioned in the porting instructions..
06:43:41 * JaffaCake looks
06:44:55 <JaffaCake> phys_rules: ok, well the instructions mention using distrib/hc-build, which has the required mk/build.mk settings in it
06:46:15 <phys_rules> JaffaCake: but that doesn't change the fact the generated .s is wrong, no ?
06:46:19 <JaffaCake> joelr1: what username?
06:46:25 <phys_rules> JaffaCake: I'm just trying to rebuild rts
06:46:40 <JaffaCake> phys_rules: yes, change the GhcUnregisterised setting, then you'll probably have to rebuid everything
06:46:48 <joelr1> JaffaCake: backup
06:46:53 <JaffaCake> ta
06:46:57 <joelr1> JaffaCake: sent you a private message
06:48:26 <phys_rules> JaffaCake: btw, my hc-build doesn't have the GhcUnregistered=YES
06:48:44 <phys_rules> JaffaCake: it does a cat >> mk/build.md with the content exactly the ones I pasted
06:48:47 <phys_rules> ones=one
06:50:38 <JaffaCake> phys_rules: you're right - my mistake
06:51:15 <JaffaCake> phys_rules: but if you follow hc-build it should work
06:51:29 <phys_rules> JaffaCake: I followed it exactly, that's the problem :(
06:51:52 <JaffaCake> oh dear :)
06:52:38 <phys_rules> JaffaCake: If it were easy there would be a binary distro of ghc for solaris x86 already :)
06:52:52 <joelr1> JaffaCake: ghc is in ~/temp/ghc-6.4.1
06:52:59 <JaffaCake> so did you use --enable-hc-boot-unregisterised?
06:53:07 <joelr1> JaffaCake: darcs is installed as well
06:53:08 <phys_rules> JaffaCake: of course
06:53:20 <JaffaCake> joelr1: thanks
06:53:50 <JaffaCake> phys_rules: so I don't understand why it is trying to build Apply.hc with the mangler
06:54:47 <phys_rules> JaffaCake: what should it do normally ?
06:55:03 <bourbaki> moin
06:55:18 <bourbaki> hey ever heared of the hieroglyphic monad :)? From: http://www.hermetics.org/pdf/deemonad.pdf
06:55:21 <phys_rules> so should I have GhcUnregistered=YES in build.mk or not ?
06:55:21 <bourbaki> To: /Users/bourbaki/Downloads/deemonad.pdf
06:55:24 <bourbaki> Size: 519 KB (531,133 bytes)
06:55:26 <bourbaki> Transferred: 519 KB (531,133 bytes)
06:55:30 <bourbaki> dang
06:56:25 <JaffaCake> phys_rules: sorry, no
06:57:09 <JaffaCake> unless you want the bootstrapped compiler to also be unregisterised (but that shouldn't be necessary)
06:57:49 <JaffaCake> phys_rules: Apply.hc is built by gcc in the first pass, without using the mangler
06:58:19 <JaffaCake> in the second pass, Apply.hc is discarded, and Apply.cmm is built using the GHC binary built in the first pass
06:58:26 <JaffaCake> does that shed any light?
06:59:05 <phys_rules> I'll try to redo the steps from hc-build again
06:59:11 <phys_rules> maybe something went wrong at a point
06:59:31 <phys_rules> thanks for the help :) I hope it'll work eventually :)
06:59:40 <JaffaCake> no problem, good luck
07:09:18 <joelr1> JaffaCake: can you reproduce the crashes?
07:09:32 <JaffaCake> hang on, I'm working on it :)
07:09:40 <JaffaCake> I have the code, what exactly do I do now?
07:09:40 <joelr1> oh, ok
07:09:55 <JaffaCake> in ~backup/postmortem
07:10:03 <joelr1> JaffaCake: right
07:10:05 <JaffaCake> I unpulled the most recent patch
07:10:12 <joelr1> JaffaCake: ok
07:10:45 <JaffaCake> I keep losing the connection for some reason
07:11:04 <joelr1> JaffaCake: stupid linksys wag54g router
07:11:19 <JaffaCake> oh
07:12:16 <joelr1> JaffaCake: just mention my name if  you need anything, my emacs windows hide the irc client
07:12:49 <JaffaCake> joelr1: ok, I'm reading the README
07:12:55 <joelr1> :-)
07:19:04 <ADEpt> jlouis: thing is, "ghci < qc_in", which is called from quickCheck.hs, returns zero exit status even if it fails to compile a module ...
07:19:12 <JaffaCake> joelr1: it's been running a couple of minutes, how long does it normally take?
07:19:15 <jlouis> ADEpt: doh!
07:19:23 <joelr1> hmm
07:19:35 <joelr1> JaffaCake: it depends, usually crashes within a minute
07:19:39 <joelr1> let me see something
07:19:42 <JaffaCake> I'm getting a bunch of (trapEx: socket: resource exhausted (Too many open files)
07:19:48 <joelr1> ah
07:19:52 <ADEpt> jlouis: yep. | tee temp_file and grep from temp file could do the trick, but it is just not neat...
07:19:52 <joelr1> JaffaCake: of course
07:20:00 <joelr1> JaffaCake: break that
07:20:09 <joelr1> then type ulimit -n 10240
07:20:13 <joelr1> ulimit -n 
07:20:22 <joelr1> to confirm that it's indeed 10240 and then run again
07:20:47 <JaffaCake> ok, done
07:21:21 <joelr1> JaffaCake: mac osx gives you just 256 descriptors by default. let me know if you can crash now
07:21:33 <JaffaCake> ok
07:26:19 <joelr1> JaffaCake: any luck?
07:26:29 <JaffaCake> joelr1: yes, got a bus error
07:26:38 <JaffaCake> running it in gdb now
07:27:00 <joelr1> JaffaCake: yeah! 
07:27:03 <jlouis> JaffaBugHunterInGHCCake
07:27:07 <JaffaCake> forgot to unlimit -c, so no core dump
07:27:27 <joelr1> JaffaCake: gdb should give you exactly what i posted in the readme
07:27:35 <JaffaCake> right
07:27:48 <joelr1> JaffaCake: i tried to look into that but it totally beats me. don't know what that code means and where it comes from 
07:27:50 <JaffaCake> I've also added +RTS -Ds for a scheduler trace
07:28:11 <phys_rules> JaffaCake: still no go, but when I did a rename of *.hc to *.c it tries to compile them on first pass, but gives an assembler error "junk at the end of file, first unrecog. character is "-""
07:29:09 <joelr1> JaffaCake: you could probably see the extent too big errors on my machine as well
07:29:36 <joelr1> and there's the "internal error: lockFile: fd out of range" too
07:29:54 <joelr1> bugs love me
07:30:01 <joelr1> haskell bugs love me
07:31:55 <joelr1> JaffaCake: i hope to be like you when i grow up, please try to keep track of how you resolved the crashes issue so that i could learn. i would much appreciate that!
07:32:33 <joelr1> i looked at the scheduler trace, btw, but it's not very informative. at least i did not see anything wierd apart from the crashes happening when a thread is woken up
07:32:54 <ADEpt> jlouis: what do you think, should itbl API be paranoid or not? I am thinking about checking chat piece index actually falls within [0..size itbl] - is it really necessary?
07:33:13 <JaffaCake> joelr1: :)
07:33:27 <JaffaCake> I got the same trace as you
07:33:47 <JaffaCake> this is going to be tricky... looks like some random heap corruption
07:33:53 <joelr1> JaffaCake: my intuition tells me it's something to do with the logger. don't know why
07:34:06 <joelr1> JaffaCake: that is that the logger triggers this
07:34:20 <phys_rules> JaffaCake: I'm wondering though, is it okay that the generated .hc's have info tables referncing the entry functions without them being defined anywhere ? (I was explicitly doing a RTS_FUN in StgMiscClosures)
07:34:21 <JaffaCake> you have a lot of threads blocked on MVars
07:34:24 <joelr1> is it corrupted by haskell code or can it be corrupted by foreign code?
07:34:49 <joelr1> JaffaCake: right. they are trying to log i believe
07:35:14 <JaffaCake> joelr1: it could be caused by foreign code, or a bug in the runtime
07:35:17 <joelr1> JaffaCake: all threads trace through a single logger and if Chan is implemented on MVars then all threads would be waiting for the logger
07:35:44 <joelr1> JaffaCake: it seemed convenient to have a single logger but it could well be a bad idea
07:35:48 <JaffaCake> interesting that it's always in the same place, though
07:36:08 <JaffaCake> I doubt your logger is directly to blame
07:36:08 <joelr1> JaffaCake: it can happen in two places, actually. but just two places.
07:36:17 <joelr1> so it's not totally random i would think
07:36:46 <joelr1> i would remove ssl to start with, see if the problem persists but then ssl is the bulk of what the code does
07:36:50 <joelr1> the ssl handshake that is
07:39:41 <JaffaCake> anyone know what the lbzx instruction in powerpc asm does?
07:41:17 <joelr1> JaffaCake: let me look it up
07:41:39 <JaffaCake> I have a suspicion that you have a faulty foreign declaration somewhere
07:41:44 <joelr1> http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/aixassem/alangref/lbzx.htm
07:42:05 <joelr1> also http://pds.twi.tudelft.nl/vakken/in1200/labcourse/instruction-set/lbzx.html
07:42:29 <joelr1> and finally http://www.google.com/search?q=powerpc+assembler+guide&btnG=Search&hl=en&lr=&safe=off&client=safari&rls=en
07:42:46 <joelr1> JaffaCake: all the ffi is in SSL.hs
07:42:50 <joelr1> and BIO.hs
07:43:04 <joelr1> but i don't think i'm even using BIO 
07:43:26 <JaffaCake> joelr1: ..maybe not, but it appears that the s34n block is attempting to dereference a non-pointer
07:43:57 <joelr1> JaffaCake: how do you tell?
07:44:17 <JaffaCake> well, s34n is the code for a closure, which has a single non-pointer field
07:44:27 <joelr1> JaffaCake: also, the code base is very small, all the pointer stuff is right there in the open
07:44:29 <JaffaCake> the code pulls out the non-pointer and dereferences it
07:44:56 <JaffaCake> actually s34n is part of the implementation of peekCAString, it seems
07:44:57 <joelr1> JaffaCake: hmm... let me take a quick look
07:45:12 <joelr1> JaffaCake: how do you tell _that_?
07:45:25 <phys_rules> JaffaCake: I've look at it, and it seems the .hc's get first passed only when you have an ghc-inline already, which I don't, so it seems the mangler is the only way to go ?
07:45:28 <JaffaCake> I grepped for s34n in /opt/local/lib/ghc-6.4.1/*
07:45:31 * shapr chortles merrily
07:46:02 <joelr1> JaffaCake: but i'm not using that in the code
07:46:13 <JaffaCake> ok, I wonder who is
07:46:29 <joelr1> JaffaCake: there's peekList and pokeList in Util.hs, though
07:46:46 <joelr1> but i'm using peekByteOff 
07:46:50 <CosmicRay> joelr1: are you having segfaults
07:47:00 <joelr1> CosmicRay: yes, of course
07:47:09 <shapr> It would be neat to have a dependency graph all the way down to the symbols in /opt/local/lib/ghc-6.4.1/* .
07:47:21 <CosmicRay> joelr1: I missed the early part of the conveersation.  I was too, with hsql, and pretty much determined that it's hsql's fault
07:47:29 <CosmicRay> which reminds me, I need to start writing bindings for hdbc.
07:47:41 <joelr1> JaffaCake: i got it
07:47:45 <CosmicRay> shapr: that's /usr/local to you, unix heathen! ;-)
07:47:52 <joelr1> JaffaCake: take a look at SSL.hs
07:47:57 <psi> $ hmp3 ~/music/
07:47:57 <psi> Segmentation fault
07:48:00 <psi> :(
07:48:11 <joelr1> JaffaCake: plenty of withCString
07:48:14 <JaffaCake> joelr1: yes?
07:48:18 <JaffaCake> ah
07:48:49 <joelr1> JaffaCake: actually, just 3
07:49:18 <JaffaCake> I don't think it's those - withCString would do a pokeCString, not a peek
07:51:56 <joelr1> JaffaCake: well... formatCalendarTime in Conc.hs?
07:52:59 <joelr1> JaffaCake: my latest contribution on FreeBSD/Intel: 
07:53:00 <joelr1> ghc-6.4 in free(): error: chunk is already free
07:53:00 <joelr1> Abort trap (core dumped)
07:54:00 <psi> dons, are you there?
07:54:02 <JaffaCake> joelr1: I have another thought
07:54:07 <joelr1> JaffaCake: yes?
07:54:11 <JaffaCake> peekCAString is called by errnoToIOError
07:54:31 <joelr1> JaffaCake: ah!
07:55:16 <musasabi> What are the plans for the base package in the long run?
07:55:51 <JaffaCake> joelr1: i wonder if it's possible that strerror() is returning something bogus
07:55:57 <JaffaCake> or perhaps it is being passed a bogus errno
07:56:06 <musasabi> It seems to contain lots of GHC specific things which makes it quite hard to write cabal packages which would work with multiple compilers nicely.
07:56:33 <joelr1> JaffaCake: umm... am i using ioeGetErrorString?
07:56:35 <musasabi> Or - should other compilers provide a base package if it is different from the GHC base package.
07:57:17 <joelr1> JaffaCake: i don't think so. who is calling strerror then?
07:57:20 <JaffaCake> joelr1: lost connection *again*, happens if I don't type anything for about 3 seconds :(
07:57:33 <joelr1> JaffaCake: let me modify the router config
07:57:50 <JaffaCake> strerror is called by errnoToIOError, which is called for just about any system call failure that returns an errno
07:58:26 <joelr1> JaffaCake: strange, i have it connect on demand with a max idle time of 5 minutes
07:58:35 <joelr1> JaffaCake: don't know why it's booting you :(
07:59:18 <joelr1> JaffaCake: must be ssh then but i don' t know where to look to fix that
08:00:45 <joelr1> JaffaCake: let me see if this helps http://www.macosxhints.com/article.php?story=20040614094333567
08:02:24 <JaffaCake> I'm not getting actively booted, but the connection dies when I type something, it hangs for a while then says the connection was reset
08:03:16 <joelr1> JaffaCake: do you mind if i disconnect you for a second?
08:04:13 <JaffaCake> finished?
08:04:16 <joelr1> JaffaCake: see if it's better now
08:06:36 <joelr1> JaffaCake: do you see the logger printing non-printable characters, btw?
08:06:46 <JaffaCake> haven't noticed
08:06:53 <JaffaCake> is that a bug too?
08:07:15 <joelr1> in my case it periodically prints I with an accent, just single lines with that and then the stuff dumped through the channel. i wonder what it could be
08:07:31 <joelr1> i also saw it print empty lines 
08:07:45 <JaffaCake> hmm, that's worrying
08:10:15 <joelr1> JaffaCake: yes, my apologies
08:10:42 <joelr1> JaffaCake: my laptop offers you a unique chance to witness a batch of haskell bugs that you won't otherwise stumble upon ;)
08:11:35 <joelr1> semi-random crashes in just two places, strange putStrLn behavior (printing garbage), lockFile out of range and, of course, your favorite "extent too large"
08:15:27 <joelr1> JaffaCake:  i must have a nose for trouble 
08:16:17 <joelr1> obscure bugs r us
08:16:18 <JaffaCake> joelr1: sometimes that's useful
08:16:28 <joelr1> JaffaCake: you are welcome!
08:17:07 <joelr1> this all started with my selling haskell to the client as the "easy scripting language"
08:17:31 <joelr1> the project is a bit of a disaster now as i can't manage to bring up 4,000 bots and have them play for hours
08:18:45 <joelr1> i had the client switch to freebsd (what they use) from windows. it conveniently happens that osx is freebsd as well. but i can't even claim that things are working on my end as the issue you are looking into does not let me establish a lot of connections either
08:20:12 <joelr1> so i appreciate what you are doing very much
08:20:20 <joelr1> JaffaCake: are you still getting disconnected by ssh?
08:20:30 <JaffaCake> not so far
08:21:55 <joelr1> glad to help
08:23:18 <jlouis> joelr1: osx is almost FreeBSD ;)
08:23:38 <joelr1> how is almost?
08:25:20 <neologism> I think it uses a lot of userland from fbsd
08:25:23 <neologism> and some kernel things
08:25:28 <neologism> (not many althought)
08:26:03 <JaffaCake> joelr1: ok, i'ts not errnoToIOError
08:26:19 <JaffaCake> but there are only a few functions in the libraries that call peekCAString
08:26:50 <araujo> Hello Haskell'ers!
08:27:20 <dcoutts_> @seen ferdy
08:27:20 <lambdabot> ferdy is in #haskell.es. I don't know when ferdy last spoke.
08:27:35 <joelr1> JaffaCake: so we know it's peekCAString and that that issue is in Haskell code. should make your job a little easier, right?
08:28:28 <JaffaCake> joelr1: toCalendarTime is suspect
08:28:56 <joelr1> JaffaCake: cool
08:28:58 <JaffaCake> joelr1: yes, it's not random corruption as I first thought, that definitely makes it easier
08:29:12 <joelr1> JaffaCake: don't forget the other stack trace
08:29:13 <JaffaCake> but you can't get a backtrace in Haskell code, that makes it harder
08:29:23 <joelr1> JaffaCake: it refers to another function that you can grep for
08:29:28 <joelr1> i wonder what is using that one
08:29:36 <joelr1> maybe that would give you a better clue
08:29:57 <JaffaCake> hmm, yes I'll just see where that one is 
08:30:25 <joelr1> JaffaCake:  s8j1_info
08:30:41 <joelr1> i have seen no others
08:30:44 <joelr1> just these two
08:30:59 <joelr1> pay attention folks, this is a reality show :-) haskell-style
08:31:39 <joelr1> a distinguished compiler writer, the key developer behind our beloved ghc is troubleshooting a heavy-duty issue in real-time and reporting on it
08:31:45 <joelr1> now, where else would you see this?!
08:32:28 <JaffaCake> joelr1: s8j1_info is in Network.BSD, but not easy to pin it down, called it lots of places
08:32:39 * xerox tunes on cartoon network
08:33:04 * JaffaCake whacks GHC with a large frying pan
08:33:23 <joelr1> xerox: oh, c'mon, don't be a party pooper. i don't even have that but even if i did this is far more interesting
08:33:54 <joelr1> repro setups have tremendous power!
08:33:58 <joelr1> simple ones at least
08:36:55 <xerox> j/k :-)
08:38:16 <joelr1> xerox: i know
08:38:43 <joelr1> when JaffaCake is done i think i'll try to make a case for haskell as a network proxy
08:38:47 <joelr1> and protocol converter
08:39:13 <xerox> Woot.
08:39:19 <jethr0> hehe
08:39:23 <xerox> Squhid
08:39:40 <jethr0> prohxy
08:39:41 * joelr1 kicks himself for not figuring out where s8j1_info and s34n_info live
08:39:45 <joelr1> before JaffaCake did
08:39:58 <joelr1> i thought i grepped for them but could not find them
08:40:12 <joelr1> thing is i already have all the packets implemented
08:40:21 <joelr1> i would hate to recode them in erlang
08:40:40 <joelr1> maybe i could have erlang supervising a bunch of haskell proxies, though
08:40:47 <joelr1> and restarting them as needed
08:41:01 <xerox> Erlang... you play with powerful toys.
08:41:25 <jethr0> joel: have you done any erlang programming yet?
08:41:44 <jethr0> is it worth trying or only if haskell bails out on you ;-)
08:43:27 <joelr1> xerox: i sure do. i wrote a poker server in erlang. http://wagerlabs.com/openpoker.tgz
08:43:44 <joelr1> xerox: click on the openpoker category in my blog to see the posts. http://wagerlabs.com
08:43:44 <xerox> Wasn't it closed-source?
08:43:53 <joelr1> xerox: it was. but now it's GPL
08:44:02 <xerox> Cool.. I think :-)
08:44:11 <joelr1> jethr0: i hope i asnwered your question ;)
08:44:18 <joelr1> jethr0: it's definitely worth trying
08:44:21 <xerox> Did you kill the people you're working for?
08:44:50 <joelr1> xerox: no way. that was a project of my own. spent a year living hand-to-mouth to get it done. commercial failure.
08:44:51 <jethr0> well, maybe i will. but first i really want to grok haskell!
08:44:58 <joelr1> xerox: the current project is closed-source, though
08:45:12 <joelr1> xerox: and the one done in haskell and the one i'm having trouble with 
08:45:31 <joelr1> and the one that's bringing forward all sorts of obscure haskell bugs
08:45:32 <xerox> I recall you asking help for code 'that must not be seen'
08:45:43 <xerox> But hey... dunno.
08:45:43 <joelr1> xerox: that's what JaffaCake is looking at
08:45:47 <jethr0> yeah, debugging and profiling can be a b*tch in haskell, i guess
08:46:07 <JaffaCake> joelr1: can you run ./configure in ~/temp/ghc-6.4.1 for me (I dont' have the perms)
08:46:09 <joelr1> jethr0: try FFI in erlang for a refreshing view on what's bitching
08:46:25 <joelr1> JaffaCake: let me just give you the permissions
08:46:39 <joelr1> i'll create a little file for you, sec
08:47:26 <joelr1> JaffaCake: look at foo in your home dir
08:47:31 <jethr0> *g*, can it be so much worse than FFI in haskell? *g*
08:47:34 <joelr1> JaffaCake: that's the sudo password
08:47:38 <joelr1> sudo bash ...
08:47:45 <JaffaCake> ok, thanks
08:47:50 <joelr1> haskell ffi is absolutely lovely
08:48:11 <joelr1> JaffaCake: i nuked one file in that tree, though. one Haskell file, don't remember which one
08:48:19 <joelr1> JaffaCake: in the libraries, i believe
08:48:40 <joelr1> JaffaCake: but then you can grab it from /opt/...
08:48:53 <JaffaCake> you sure that's the right pw?  I can't get it to work
08:49:03 <jethr0> really, haven't tried it yet, but it seemed difficult at first glance.
08:49:05 <joelr1> JaffaCake: looking
08:49:40 <joelr1> JaffaCake: you type sudo bash, right?
08:49:51 <joelr1> then it asks you for the password and you type in this one, right?
08:50:15 <JaffaCake> yes, tried 'sudo sh', 'sudo bash'
08:50:24 <joelr1> JaffaCake: what does it say?
08:50:47 <JaffaCake> Sorry, try again.
08:51:00 <JaffaCake> did you put me in the right group to su?
08:51:07 <joelr1> maybe not. hang on
08:51:49 <joelr1> JaffaCake: you should be admin now
08:51:55 <joelr1> try again, maybe logout and login
08:52:30 <JaffaCake> looks like I've been disconnected anyway :)
08:54:16 <shapr> jethr0: http://www.haskell.org/hawiki/FfiTutorial
08:54:19 <joelr1> JaffaCake: any luck now?
08:54:23 <JaffaCake> joelr1: no joy
08:54:32 <joelr1> hmm
08:54:42 <shapr> Cale: Finally, the spambots have started logging in...
08:54:49 <shapr> Cale: http://www.haskell.org/hawiki/WikiSandBox?action=diff&date=1133092984
08:54:57 <JaffaCake> I just want to look at mk/config.h
08:55:06 * shapr sighs
08:55:14 <joelr1> JaffaCake: would it help if you downloaded ghc again?
08:55:25 <joelr1> JaffaCake: or should i change permissions to you?
08:55:29 <joelr1> JaffaCake: let me try that first
08:55:34 <JaffaCake> do you have a ghc tarball?
08:55:50 <joelr1> JaffaCake: let me change perms first
08:55:55 <JaffaCake> ok
08:56:37 <shapr> hi mitocori, learning Haskell?
08:57:01 <joelr1> JaffaCake: try now
08:57:26 <JaffaCake> looks good, thanks
08:57:43 <shapr> Guess not...
08:59:56 <jlouis> shapr: hehe, it seems my simple FPS -> SHA1 fix was bad
09:00:13 <jlouis> Don't do FPS.unpack and stuff it into SHA1. You'll suffocate on the stack size
09:00:36 <jlouis> (String size: 265k)
09:00:40 <JaffaCake> joelr1: I've got to go, I'll continue this tomorrow
09:00:53 <joelr1> JaffaCake: thanks!
09:01:11 <jlouis> joelr1: what did you find?
09:01:21 <JaffaCake> joelr1: it'd help if you could build GHC in that tree, if you have the cycles to spare
09:01:30 <joelr1> JaffaCake: i will of course
09:01:39 <JaffaCake> that'd be great, thanks
09:01:40 <joelr1> JaffaCake: it will be ready for you tonight
09:01:48 <joelr1> in fact i will start right now
09:02:04 <JaffaCake> the configure is still going, should be finished in a minute
09:02:04 <shapr> jlouis: Igloo wrote a SHA1 for FPS, it's in the darcs source.
09:02:12 <joelr1> ah, ok
09:02:30 <jlouis> shapr: cool!
09:02:42 <joelr1> jlouis: not much so far
09:02:49 <jlouis> joelr1: well, what is the problem?
09:02:58 <joelr1> jlouis: too long to explain 
09:02:59 <jlouis> (Just the one-liner explanation ;)
09:03:02 <jlouis> doh!
09:03:05 <JaffaCake> joelr1: finished
09:03:09 <joelr1> jlouis: crashes somewhere in ghc
09:03:13 <jlouis> ah
09:03:15 <joelr1> JaffaCake: building
09:03:31 <joelr1> JaffaCake: just make, right?
09:03:47 <musasabi> Is 128mb ram enough to build GHC?
09:04:23 <JaffaCake> joelr1: probably a good idea to tweak a couple of settings... create mk/build.mk and put the following in it:
09:04:25 <joelr1> seems like ghc builds itself with 16mb of heap, no?
09:04:27 <joelr1>  /opt/local/bin/ghc -H16m -
09:04:29 <JaffaCake> GhcLibWays=
09:04:31 <joelr1> or is that the minimum?
09:04:32 <JaffaCake> SplitObjs=NO
09:04:43 <JaffaCake> 16m is just a hint
09:04:47 <joelr1> JaffaCake: can you do it now? i'll stop the build
09:04:52 <JaffaCake> oh sure
09:04:52 <joelr1> JaffaCake: stopped
09:05:33 <JaffaCake> ok, go ahead
09:05:46 <joelr1> JaffaCake: i just did make clean, that doesn't touch build.mk, does it?
09:06:26 <JaffaCake> no it doesn't
09:06:31 <joelr1> JaffaCake: building now
09:06:34 <JaffaCake> bye folks!
09:07:24 <joelr1> i wonder if SPJ hangs out here too
09:07:41 <joelr1> simon, are you here? :D
09:07:53 <shapr> He's been here twice, but not recently.
09:08:02 <joelr1> shapr: what's his nick?
09:08:11 <shapr> I don't actually remember...
09:08:47 * xerox tickles shapr
09:08:58 * dcoutts_ slaps xerox 
09:09:17 * xerox parkours away rapidly
09:09:42 <Philippa_> that only really works once you're out of striking distance
09:09:57 <xerox> Dang.
09:10:02 <Philippa_> ('mafraid the lot who think of it as a martial art about escape are... well, wrong)
09:10:36 <xerox> It's the first time I use it in this sense, in fact.  I very much enjoy that art.
09:11:39 <joelr1> tickling is a martial art?
09:11:46 <joelr1> war-tickling?
09:12:11 <xerox> No, 'le parkour' :-)
09:12:46 <Philippa_> joelr1: they talk about pressure points instead, usually
09:12:52 <Philippa_> (there're... other uses for them)
09:13:18 * xerox rolls away after a 3m high jump
09:13:22 <joelr1> wow, i learned something new today. is that a french martial art like kick-boxing?
09:13:36 <xerox> No, it's 'free run' plus taoism (?!)
09:13:48 <joelr1> i need to google for that
09:14:24 <xerox> There is this french guy who is like 'the spiritual leader', which has parkour.com I think.
09:14:57 <xerox> Some points of their philosophy are very interesting.
09:15:31 <Philippa_> I've not read any myself, though a friend's been trying to learn. I gather they're keen on... well, not wanking around with pointless stuff
09:16:58 <xerox> They bright when it comes to ask 'how do you do that?', it doesn't need of any skate, bmx, or tricky/expensive material, it's just you doing just what you can afford to do.  'IT WILL SPREAD' -- some guy in the video 'Jump Britain'.
09:17:14 <SamB> @docs System.Console.GetOpt
09:17:14 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/System-Console-GetOpt.html
09:17:40 <xerox> SamB: if you're looking into getopts, take a look at pesco's libraries, they were kinda nice.
09:17:48 <xerox> IIRC.
09:21:17 <Philippa_> xerox: not using equipment's kinda the point a lot of the time anyway, I thought
09:21:24 <xinming> hmm, how to keep some values of a list?
09:21:45 <xerox> Philippa_: ..in what?
09:22:07 <xinming> It seems, You can only calculate all values a time. And if you wish to update part of them, You won't able to do that
09:23:29 <SamB> xerox: hmm, well, tell jlouis. I'm just making --help work for conjure...
09:23:56 <SamB> @index exit
09:23:57 <lambdabot> bzzt
09:24:02 <xerox> SamB: I'm sure you can do it on your own too :-)
09:24:02 <Philippa_> xerox: parkour
09:24:31 <Philippa_> I got the idea it's rather the point to be mostly just using what you have on you all the time
09:25:09 <eivuokko> @index exitWith
09:25:12 <lambdabot> System.Exit
09:26:39 <xerox> Philippa_: hmm, I think that the obstacles are not something you're using, I mean, the point is passing by, not doing show.
09:26:57 <Philippa_> xerox: yup
09:27:00 <xerox> That's why they RUN, i.e. not stop.
09:27:12 <SamB> certainly you don't have obstacles on you all the time
09:27:18 <xerox> The more I talk about it, the more I like it.
09:27:30 <xerox> SamB: I'm not so sure about this.  You should see some videos. :-)
09:27:31 <xinming> anyone would answer my question please?
09:27:45 * SamB happens to keep a pirate ship in his pocket
09:28:06 <SamB> hmm
09:28:15 <xerox> BUT, I'd still like to learn to unicycle.  I like to compel myself with this kind of 'difficult' toys.  Let me pose it that way.
09:28:15 <xinming> Is there a way to keep a pool which can be updated.
09:28:23 <Saulzar_> xinming, That's right - but you can keep making new values recursively...
09:28:24 <xerox> I'm sorry xinming.
09:28:33 <SamB> @hoogle [a] -> Int -> a -> [a]
09:28:34 <lambdabot> Data.List.take :: Int -> [a] -> [a]
09:28:34 <lambdabot> Data.List.drop :: Int -> [a] -> [a]
09:28:34 <lambdabot> Prelude.take :: Int -> [a] -> [a]
09:28:41 <Philippa_> xinming: er, I'm not sure you're making sense to me given that we're talking about haskell - where're you getting your mutability from?
09:28:45 <SamB> @hoogle update
09:28:46 <lambdabot> Data.HashTable.update :: HashTable key val -> key -> val -> IO Bool
09:28:46 <lambdabot> Data.IntMap.update :: (a -> Maybe a) -> Key -> IntMap a -> IntMap
09:28:46 <lambdabot> a
09:28:46 <lambdabot> Data.Map.update :: Ord k => (a -> Maybe a) -> k -> Map k a -> Map k
09:28:46 <lambdabot> a
09:28:53 * SamB groans
09:29:10 <SamB> @hoogle update :: [a] -> a -> [a]
09:29:11 <lambdabot> hoogle: Hoogle/Parser.hs:(82,8)-(85,38): Non-exhaustive patterns in
09:29:11 <lambdabot> function g
09:29:11 <lambdabot>  
09:29:33 * SamB thinks that should combine both forms of search
09:29:34 <SamB> @author hoogle
09:29:35 <lambdabot> Unknown command, try @listcommands.
09:29:39 <xinming> SamB: Just like, If I wish to add a pair to a List, and then add another pair
09:29:43 <xinming> how do I handle this?
09:29:54 <SamB> oh, (:) is good for adding stuff to lists
09:29:57 <SamB> @type (:)
09:29:58 <lambdabot> forall a. a -> [a] -> [a]
09:30:04 <SamB> so like
09:30:10 <Philippa_> depends where you want to add the new items, essentially
09:30:17 <SamB> > (3,4):[(1,2)]
09:30:18 <lambdabot> [(3,4),(1,2)]
09:30:49 <SamB> this works great for stacks ;-)
09:31:46 <xinming> SamB: hmm, for example, If you wish to get a pair from user's input, And keep it into "database", and also, type another pair. and ...
09:32:11 <xinming> otherwise, I have to hand code the database into haskell. :-/
09:32:21 <SamB> xinming: nuh uh!
09:32:27 <SamB> there are database bindings!
09:32:51 <SamB> anyways, (:) works juts fine for that
09:33:08 <xerox> @type List.lookup
09:33:09 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
09:33:15 <xinming> SamB: hmm, do you mean recursively call "self"?
09:33:29 <xerox> @type List.find
09:33:30 <lambdabot> forall a. (a -> Bool) -> [a] -> Maybe a
09:33:37 <SamB> xinming: what in the world is "self"?
09:33:44 <SamB> I've heard of Self, but what is "self"?
09:34:17 <xerox> @type find . (. fst) . (==)
09:34:18 <lambdabot> Not in scope: `find'
09:34:23 <xerox> @type List.find . (. fst) . (==)
09:34:24 <lambdabot> forall b a. (Eq a) => a -> [(a, b)] -> Maybe (a, b)
09:34:35 <xerox> @type snd . List.find . (. fst) . (==)
09:34:35 <xinming> just like mygetLine which will get a line and add it to List, and then call mygetLine again.
09:34:36 <lambdabot>   Couldn't match `(a, b)' against `[(a1, b1)] -> Maybe (a1, b1)'
09:34:36 <lambdabot>   Expected type: a1 -> (a, b)
09:34:38 <xerox> OK ok.
09:35:46 * xinming goes to think more.
09:37:55 <SyntaxNinja> 'morning
09:38:12 <SamB> xinming: thats a good idea
09:38:26 <SamB> more people should try it ;-)
09:44:42 <xinming> SamB: how to turn an IO String into String?
09:44:56 <SamB> xinming: <- in a do, or >>= out of one
09:45:08 <xinming> just like define a function which will return String
09:45:08 <SamB> those don't do what you said but they do do what you need
09:45:26 <xinming> SamB: They will return IO String not String. :-/
09:45:33 <SamB> they don't return a thing
09:45:50 <SamB> <- binds things and >>= applies them
09:46:10 <SamB> @type (>>=)
09:46:11 <lambdabot> forall (m :: * -> *) b a. (Monad m) => m a -> (a -> m b) -> m b
09:46:15 <xinming> that's the problem, If it is IO String, It will raise an type error
09:46:48 <SamB> xinming: stick your IO String on the left of a >>= and a function that takes a string as argument on the right
09:47:20 <SamB> oh, and the function needs to return something in IO
09:47:33 <jeffno> How does referential transparency hold once IO is intruduced?
09:47:46 <SamB> jeffno: because IO values represent actions
09:48:25 <fworp> they are executed by the runtime 'later on' your program just builds them up
09:48:57 <fworp> atleast, thats one interpretation
09:49:10 <SamB> in short, IO is a black box in which we hide all our nasty (or not-so-nasty) implementation details
09:50:09 <SamB> its called abstraction ;-)
09:50:11 <jeffno> But if a function returns a value read from IO, how can you "replace like with like"?
09:50:29 <xerox> jeffno: because things are forced to be sequenced under the IO Monad.
09:50:35 <SamB> jeffno: you could use another function that does the same thing
09:51:00 <xinming> SamB: do you mean `myget = getLine >>= read`?
09:51:28 <SamB> xinming: er, well, not quite.
09:51:56 <xerox> xinming: 'read' is not of type IO b, that is, (>>=) :: IO a -> (a -> IO b) -> IO b
09:52:07 <SamB> more like "myget = getLine >>= (\str -> return (read str))"
09:52:08 <xerox> xinming: try using do notation, it's quite straightforward.
09:52:44 <xerox> myget = do
09:52:45 <xerox>   line <- getLine
09:52:45 <xerox>   print (read line)
09:52:45 <xerox> For example?
09:53:14 <xinming> xerox: It will return IO b, yes, How about return directly into b instead of IO b? As It is straight forward to understand what a function do. :-/
09:53:35 <xerox> xinming: b could be equal to a.
09:53:42 <xerox> @type read
09:53:43 <lambdabot> forall a. (Read a) => String -> a
09:53:52 <xerox> It's just that read is a pure function.
09:53:57 <xerox> @type print
09:53:58 <lambdabot> forall a. (Show a) => a -> IO ()
09:54:06 <xerox> While print is an IO action.
09:54:31 <jeffno> So if I had a function "getInt" that read an integer from IO, and said "val = getInt + getInt", couldn't getInt return two different things?
09:54:54 <xerox> jeffno: what's the type of getInt?
09:55:25 <xinming> xerox: maybe IO String -> Int.
09:55:31 <xinming> But this might not work. :-/
09:55:41 <xerox> I suppose getInt :: IO Int, then, if you want to do IO actions, you want to put an order on them, just 'do' it!
09:55:59 <xerox> In the very sense of the term.  Get one Int, get the second, sum (and print?) them.
09:56:24 <xerox> jeffno = do
09:56:25 <xerox>   a <- getInt
09:56:25 <xerox>   b <- getInt
09:56:25 <xerox>   print (a + b)
09:57:11 <fworp> xinming: there is no destructor for values of type IO a. The only thing you can do with IO actions is build up other io actions, or just pass them around.
09:57:13 <xerox> When you start doing IO, you expose the program to the time variable.  I.e. you want your program to behave in some sequential way you should specify, isn't the 'do' syntax straightforward in this sense?
09:57:31 <xerox> do { this; this; this; ... and_this; }
09:57:50 <jeffno> Ok, maybe I should actually read up on monads now.
09:58:12 <Philippa_> fworp: or call it main so the haskell implementation realises it's the entire program. But yeah
09:58:27 <xerox> Don't be frightened by the 'buzzword', do you see what I mean?
09:59:06 <SamB> @hoogle Data.IntMap.IntMap a -> [a]
09:59:08 <lambdabot> No matches, try a more general search
09:59:14 <jeffno> It seems like there's a "do" jail you have to put all IO stuff into.
09:59:21 <xerox> jeffno: righto.
09:59:32 <Philippa_> it's the IO type rather than do itself that's the jail, but other than that you're exactly right
09:59:34 <xerox> jeffno: and when you come there, you've free access to the pure world again.
09:59:40 <SamB> jeffno: well, you don't need the "do".
09:59:45 <SamB> its more of an IO jail
09:59:53 <Philippa_> SamB: snap!
10:00:10 <ndm> @hoogle IntMap a -> [a]
10:00:11 <lambdabot> Data.IntMap.elems :: IntMap a -> [a]
10:00:11 <lambdabot> Data.IntMap.keys :: IntMap a -> [Key]
10:00:13 <Philippa_> jeffno: you can turn ordinary values into IO values using return
10:00:18 <ADEpt> jlouis: ayt?
10:00:46 <fworp> Philippa_: well you dont actually do anything with the value of main, the runtime system does. So if you are implicitly passing the value of main off to the runtime system, the analogy still holds.
10:00:59 * SamB tries rewriting shuffle to use IntMap
10:03:58 <jeffno> Ok, thanks guys, that makes me feel better :)  I thought for a minute I was learning functional Haskell for nothing.
10:05:47 <SamB> ADEpt: how do you benchmark/profile shuffle?
10:06:41 <Philippa_> jeffno: even really IO-heavy code like the first version of my wiki has a lot of functional stuff going on
10:06:55 <Philippa_> even though the vast majority of code in it's in some kind of monad (not always the IO monad)
10:07:06 <SamB> hmm, using IntMap doesn't work because the random list might have dupes, I suppose...
10:08:08 <SamB> the beauty of Monads is they treat imperative code as first-class citizens
10:08:53 <jeffno> Types are good.
10:09:17 <SamB> yes!
10:09:32 <SyntaxNinja> yay types
10:09:44 <ADEpt> SamB: what do you mean?
10:09:49 <jeffno> I find the whole idea of Smalltalk abhorrent :)
10:10:05 <SamB> well, the integrated IDE is sweet, but yes
10:10:14 <SamB> the code is SO tricky to work with!
10:10:24 <SamB> especially that belonging to the integrated IDE
10:10:28 <araujo> smalltalk is good.
10:10:39 <araujo> One of the decent languages you can find out there.
10:11:01 <SamB> self would be decent, but there isn't a decent implementation...
10:11:07 <jeffno> I was playing with Squeak and early on got a DoesNotUnderstand, and that was it for me.
10:11:41 <SamB> the only one in existance is overly dependant on the layout of C++ classes and that of the heap
10:11:46 <jeffno> Not to mentioned I trashed my trash, and the whole environment just seemed fragile.
10:11:59 <SamB> trashed your trash?
10:12:14 <jeffno> Yes, I put the trash in itself by accident.
10:12:15 * SamB doesn't see what the problem with that is, actually
10:12:32 * SamB doesn't see how else you'd get rid of one you didn't want
10:12:32 <jeffno> It seemed like a core thing that I wouldn't want to erase!
10:12:45 <ADEpt> SamB: how I can rollback changes that I already recorded? Unrecord + revert?
10:12:53 <Philippa_> it should probably warn you about doing that though
10:13:01 <SamB> ADEpt: that, or unpull
10:13:08 <Philippa_> gotta go...
10:13:18 <SamB> Philippa_: yes, I suppose
10:13:28 <SamB> jeffno: and yes, the environment is fragile.
10:13:30 <ADEpt> SamB: unpull only in case if I pulled them, or it works for local records as well?
10:13:43 <SamB> probably because the code for the environment has gotten quite messy over the years
10:13:52 <SamB> its due for a major cleanup
10:14:05 <jeffno> Seems like Smalltalk would be prone to getting messy.
10:14:16 <ADEpt> SamB: ah, i see myself :)
10:14:27 * ADEpt goes home
10:15:30 <fworp> what erks me about smalltalk, is the utter lack of a language, its just a willy nilly mish mash of library level code.
10:17:16 <araujo> jeffno, yes, i agree, the squeak env. looks kind of fragile. Saddly, there are no decent smalltalk implementations.
10:17:49 <araujo> VW is the only Smalltalk implementation you can safely use, and it is propietary
10:18:00 <jeffno> araujo: I just can't get over the lack of types.  Types are self-documenting and I think are essential for building any large system.
10:18:34 <araujo> jeffno, Objects are types.
10:18:51 <jeffno> I mean static typing.
10:18:57 <jeffno> Not runtime failures.
10:19:26 <araujo> Well, the approach os Smalltalk is the fact that OOP is only possible with dynamic typing.
10:19:35 <araujo> But i think that's a different history.
10:19:42 <jeffno> Different history?
10:20:16 <araujo> yes, about your initial statement.
10:20:16 <fworp> (core smalltalk doesnt really even have objects, thats part of the library)
10:20:51 <jeffno> I don't follow araujo, could you expand on it?
10:24:58 <araujo> jeffno, they claim dynamic typing satisfy better the OOP approach, for example , allow a true polymorphism 
10:25:14 <araujo> Smalltalk is both an IDE and PL
10:25:38 <araujo> Where you can add objects and creates instances on runtime
10:25:42 <fworp> more ide than pl :P
10:27:12 * SamB wonders how you would implement something like Gtk in straight Haskell with static types
10:27:14 <shapr> I like Sun's implementation of Smalltalk.
10:27:30 <SamB> shapr: which is?
10:27:33 <SamB> you mean Self?
10:27:48 <shapr> http://gliebe.de/self/screenshot.html
10:27:54 * SamB likes the language, but doesn't think too much of the implementation
10:28:10 <SamB> the parts written in Self are great
10:28:15 <shapr> I like the Self implementation, I just wish it support polyinline caching on x86.
10:28:22 <SamB> however the implementation makes to many assumptions
10:30:43 <shapr> Yeah, it was designed for SPARC.
10:30:56 <SamB> I'm not positive I can even get it to compile and run without segfaulting on x86
10:31:20 <SamB> certainly I'd need to use an old GCC
10:31:42 <shapr> Sure is fun to use though.
10:31:56 <SamB> would be more fun if I had a PPC or SPARC though
10:32:01 <SamB> its so slow!
10:32:16 <shapr> I like the simplicity of the single hierarchy. What's the point of having both classes and instances?
10:33:18 <samx_> hi. newbie question: I'm trying to "import" in ghci, e.g. "import Control.Monad.Cont", but ghci is saying "<interactive>:1:0: parse error on input `import'". What am I doing wrong?
10:33:27 <shapr> For my head, (prototype oriented > object oriented).
10:33:39 <shapr> samx_: :m + Control.Monad.Cont
10:33:41 <Lemmih> samx_: :m Control.Monad.Cont
10:34:04 <SamB> shapr: there are a few nasty things that can come up with just objects and more objects 
10:34:10 <xerox> I'm used to the '+' too, is it avoidable?
10:34:20 <fworp> Io is a nice language. ever played around with it?
10:34:32 <SamB> like how do you make an object print differently from its traits?
10:34:47 <xerox> Saw it passing, the implementation had some troubles compiling the last time I tried.
10:36:03 <shapr> SamB: hm?
10:36:18 <shapr> I've never tried Io, do you mean the really old one, or the new one?
10:36:39 <shapr> SamB: I don't understand the question?
10:38:09 <xerox> It's like, you can't type them differently and write Show instances?
10:38:44 <samx_> thanks
10:39:48 <SamB> shapr: well, like in python you have __repr__ methods, right?
10:41:11 <shapr> Yeah...?
10:42:09 <SamB> so, how would you have a different method on an object and on its traits?
10:42:28 <SamB> without actually sticking the method on the objects?
10:42:59 <tic> type classes?
10:43:23 <SamB> tic: get real
10:43:40 <tic> sorry :(
10:43:43 <SamB> how do you have type classes when you have no types?
10:43:50 <tic> ah like /that/
10:44:07 <shapr> Are you saying you want to show the traits differently in different contexts? I still don't understand...?
10:44:55 <SamB> shapr: well, how do you make the point traits object not try to print itself as point?
10:45:48 <SamB> this came up in connection Slate, actually
10:45:56 <SamB> s/connection //
10:48:53 <shapr> Could you have those traits as their own instances?
10:50:30 <SamB> huh?
10:50:48 <danY2K> ?!
10:50:50 <danY2K> sry..
10:50:58 <araujo> I came to Haskell from Smalltalk ....
10:50:58 <SamB> own instances?
10:51:19 <SamB> araujo: what a singularly unusual translation
10:51:46 * SamB didn't know there were roads from Smalltalk to Haskell yet
10:52:14 <shapr> I don't understand the problem... Under what circumstances would you want to show the instance differently from its traits, without that being an instance method?
10:52:16 <araujo> There you go :-]
10:52:49 <araujo> But i don't think i would get back to ST for OOP 
10:53:05 <araujo> I would consider other languages like Dylan for example.
10:53:19 <SamB> shapr: well, would you want it to print a recursive error message about how it couldn't understand the "x" method?
10:54:56 <SamB> @kind (,)
10:54:57 <lambdabot> * -> * -> *
10:56:16 <shapr> SamB: I'm still totally lost, let's defer this discussion until another day, maybe I'll understand it then...
11:02:30 <jeffno> Regarding Smalltalk to Haskell, I thought Kay argued for the functional style of programming?
11:03:16 <shapr> Alan Kay argued for late binding, and monads are all over that like white on rice!
11:04:34 <shapr> hoi franka 
11:04:46 <franka> Hi, shapr.
11:04:55 <SamB> shapr: don't you mean "type classes"?
11:07:02 <shapr> er, no?
11:07:33 <shapr> I see what you mean though.
11:09:41 <SyntaxNinja> hi franka
11:09:54 <franka> Hello, SN.
11:10:37 <david__> what IS late binding exactly? :) and how does it relate to monads?
11:11:02 <shapr> It means you wait as late as possible to figure out what a symbol actually resolves to.
11:11:16 <david__> mmm yeah
11:11:42 <shapr> Python uses that to great effect in Plone, to the point of generate some definitions for names only after they're called for the first time.
11:11:55 <david__> aha
11:12:13 <shapr> Haskell does late binding most obviously with typeclasses, as SamB just said.
11:12:42 <david__> yeah.. but what did you mean with monads?
11:12:55 <david__> aha.. just that monadic code can be for any kind of monad?
11:13:12 <franka> Saying type classes use late binding is an insult to type classes.
11:13:12 <shapr> Which is in fact, typeclasses yet again...
11:13:53 <shapr> Actually, I was thinking about the reordering of computations.
11:14:09 <david__> okay
11:14:18 <franka> Type class methods are statically bound, lexically scoped and have a definite type.
11:14:58 <franka> Though I see what you mean.
11:15:36 <franka> Actually, they aren't really lexically scoped, though...
11:15:43 <shapr> Since (a >>= b) >>= c must be the same as a >>= (b >>= c), the result of a bind is put off until it's directly requested. That gets especially cool when you look at mfix.
11:16:03 <franka> Since Haskell has a very strange notion of method binding given the open world semantics.
11:16:15 * shapr hugs franka in the open world.
11:16:42 <franka> You are finally coming out of the closet?
11:16:54 <shapr> The world is my closet.
11:16:59 <shapr> But you're kinda cute...
11:17:20 <franka> Some people don't think so.
11:17:44 <shapr> Anyway, lazy evaluation is one form of late binding, in my opinion.
11:18:00 <franka> God, no.
11:18:08 <shapr> Why not?
11:18:16 * shapr wants Illumination.
11:18:18 <eivuokko> It isn't polymorphic?
11:18:44 <franka> Lazy evaluation is entirely compatible with lexical scoping.  Late binding is not.
11:19:10 <franka> Laziness only affects reduction order.
11:19:50 <franka> To me, late binding means something like dynamic scoping.
11:25:20 <shapr> franka: Ya know, I'd love to have something like a cross between an interview and a discussion with you in every TMR :-)
11:25:35 <shapr> The recent universal type discussion was way cool.
11:26:03 <shapr> I'd like to research and further discuss the late binding subject as well.
11:27:30 <Cale> (a >>= b) >>= c and a >>= (b >>= c) unfortunately don't quite have the same type. You either want to use (>>) or write (a >>= b) >>= c is the same as a >>= (\x -> b x >>= c)
11:27:35 <franka> I am just a below-average researcher with an above-average-sized mouth.
11:27:56 <shapr> franka: Works for me.
11:28:04 <franka> You should interview someone more knowledgeable, and less spasmodic.
11:28:17 * shapr shrugs
11:28:29 <shapr> I always find interesting new knowledge when talking to you, so...
11:36:39 <jethr0> hi, can any of you give me any pointers on fast array access in haskell?
11:36:58 <musasabi> STUArray
11:37:04 <musasabi> unsafe{Read,Write}
11:37:25 <jethr0> i am writing a simple raytracer (*yeah*, who hasn't done that ;-) and want to use arrays to represent textures.
11:37:49 <Cale> jethr0: okay, so you can expect to consume the whole array
11:37:53 <jethr0> musasabi: i only need read access, is that still a valid choice?
11:37:58 <jethr0> yep
11:38:03 <jethr0> no, not exactly
11:38:03 <astrolabe> jethr0: write-once, read many times?
11:38:10 <Cale> Just use an unboxed ordinary array
11:38:15 <musasabi> unsafeFreeze
11:38:26 <musasabi> depends just how much performance you want.
11:38:29 <Cale> there's no reason to use a mutable array here
11:38:51 <jethr0> okay, right now i am using Array, but it seems like such a waste to use a linked list implementation, no?
11:39:03 <Cale> it's not a linked list
11:39:10 <jethr0> cale: how would an unboxed ordinary array look like?
11:39:43 <jethr0> cale: isn't Array a list of [(idx, value)]?
11:39:49 <Cale> no
11:40:03 <Saulzar> jethr0, Hehe - I'm doing exactly the same thing... 
11:40:09 <Cale> It's a flat region of memory which allocates pointers to values
11:40:10 <astrolabe> I guess it is essentially an array of pointers to values for your app
11:40:19 <Cale> you get O(1) access to any given element
11:40:34 <jethr0> okay, then that's not my problem! but i am having some difficulties profiling the program...
11:40:51 <jethr0> i get time and heap profiles all right, but can't really read them *g*
11:40:53 <Cale> could we see the profiling results?
11:40:57 <Saulzar> Creating an Array is very slow too, if you have a big array
11:41:11 <jethr0> saulzar: so, how far is yours progressed?
11:41:47 <Cale> Yeah, creation of an array involves a list, but that's not so different from the case in other languages -- the list is just taking the place of a loop
11:41:48 <jethr0> cale: i might not have them handy, but i can regenerate some. might take a while...
11:42:26 <jethr0> hmm, i just need to load a whole file into memory and address it by index. is there a way to do that SIMPLY in haskell?
11:42:59 <Cale> Well, if you're familiar with the FFI stuff, there's a bunch of low-level memory access things there.
11:43:02 <Saulzar> jethr0, I've got the basics down.. some simple shape interesctions, transformed shapes, lighting/shadows
11:43:49 <Saulzar> I have it making an array and ouputting to a pgm file - so far creating the array and saving to file are the biggest costs :)
11:44:12 <jethr0> saulzar: cool. i have just been toying around... bump mapping, texture mapping, ... but no CSG, no transforms, etc
11:44:40 <Saulzar> I am going to try CSG next
11:45:47 <Saulzar> jethr0, Are you just learning haskell?
11:45:55 <jethr0> yeah. i am going to switch to scene graph next. nested transforms, textures, shaders, etc
11:46:19 <jethr0> saulzar: well, i am not a complete newbie, but this is my first "bigger" project (at currently 270 lines ;-)
11:46:46 <Cale> 270 lines is a significant amount of Haskell code :)
11:47:04 <Saulzar> Wow, I must be doing something wrong - I have 1200 lines already ... but I have a lot of needless abstraction :)
11:47:11 <jethr0> exactly. i am really amazed how well this worked out.
11:47:56 <jethr0> hmm, but clean transformations and so on will cost me. but my aim would be well below 1000 lines.
11:48:29 <Saulzar> I have been using functions for just about all the abstraction... defined my Object type as Ray -> [Hit]
11:48:39 * fworp meant the new one, but thats now an hour old conversation
11:49:00 <jethr0> i had my share of problems. haven't gotten cones and cylinders to work yet.
11:49:15 <jethr0> refraction is also a majer pain in the ass *argh* *me-too-stupid*
11:49:21 <Saulzar> Hehe
11:49:38 <Saulzar> I have spheres boxes and planes...
11:50:17 <Saulzar> It has been remarkably painless though
11:50:27 <jethr0> cale: i got a time profile now. how would you be reading it?
11:50:45 <Cale> put it online somewhere, lisppaste works well
11:50:56 <jethr0> exactly. i have mainly spheres up till now, but reflections, transparency, textures, bump mapping all simply happened.
11:51:22 <Saulzar> jethr0, I switched to having intersections defined as t, Entering/Leaving so that things like refraction/CSG aren't so horrible
11:51:59 <Cale> http://paste.lisp.org/
11:52:37 <jethr0> cale: yes, but what channel should i paste into?
11:52:38 <jethr0> ???
11:52:43 <Cale> #haskell
11:53:17 <Cale> that just sets where the notification message will appear :)
11:53:55 <Cale> lisppaste2: url
11:53:58 <Saulzar> I've made a few data types strict and that improved performance no end
11:53:59 <Cale> hmm
11:54:01 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
11:54:07 <Cale> aha
11:54:09 <Cale> there :)
11:54:22 <jethr0> saulzar: i considered that because most operations will eventually be executed...
11:54:39 <jethr0> i must have done something right ;-)
11:54:52 <Cale> Unboxing arrays makes them strict
11:54:56 <jethr0> saulzar: how did you decide what to make strict?
11:55:02 <Saulzar> At least I'm sure the elements of a vector won't need to be lazily evaluated separately :)
11:55:03 <jethr0> ahh
11:55:40 <Saulzar> I just made Colour (elements of my array), and Vector elements strict...  
11:55:51 <jethr0> cale: it certainly is even harder to make sense of it without knowing the code...
11:56:05 <jethr0> cale: but i find the lower part really hard to make use of.
11:56:27 <Saulzar> Still it is not quick, 10-20 seconds for 800x600 with very simple scene, but it is not bad given that it is not intended for extreme speed :)
11:56:31 <jethr0> saulzar: and THAT already brought you a speedup?
11:56:40 <Saulzar> Oh yes, big speedup
11:56:45 <jethr0> cool
11:56:46 <Cale> well, you show me, and I'll tell you what to add cost centres to :)
11:56:57 <jethr0> ;-)
11:57:04 <psi> is anyone here running ghc on ubuntu ppc?
11:57:14 <psi> ghci barely works
11:57:16 <jethr0> i've never dealt in cost centres before. but gotta start somewhen!
11:57:30 <Cale> psi: what happens?
11:57:39 <jethr0> psi: ghci on x86-64 is/was pretty broken too.
11:57:41 <psi> Cale, the impossible :)
11:57:49 <jethr0> exactly
11:57:49 <Cale> ah
11:57:58 <jethr0> same on x86-64
11:58:19 <Cale> does plain ghc work?
11:58:24 <psi> yes
11:59:03 <psi> i can run some functions in ghci
11:59:25 <Cale> hmm, I seem to recall that there was another stage in the GHC compiling to get GHCi to work, I wonder if that has anything to do with it (I don't really know)
11:59:43 <jethr0> what does "total alloc = 5,159,573,304 bytes" mean when top records only a few MB?
11:59:57 <Heffalump> total allocated ever?
12:00:00 <psi> Before the impossible happens, i get this: Loading package haskell98-1.0 ... <interactive>: Unable to mmap( MAP_FIXED ) for Jump Islands
12:00:02 <Cale> yeah
12:00:09 <jethr0> don't know. it's in my a.out.prof time profiling.
12:00:11 <Heffalump> as opposed to total currently allocated
12:00:57 <jethr0> well, alltime total would be pretty stupid and i don't think i have allocated that much ever in haskell.
12:01:04 <psi> jethr0, so this is known by the developers?
12:01:28 <jethr0> no, i am using an old version and simply use the 32bit version *sorry*.
12:01:35 <Cale> jethr0: Things get garbage collected as they're used up, so it keeps the total allocated at any one time low
12:01:40 <jethr0> but it might be fixed in the current x86-64 version
12:02:00 <jethr0> still, 5GB seems like a lot of memory!
12:02:27 <Cale> well, it means that you probably have high turnover
12:02:44 <jethr0> heh, would a good place to start optimizing ;-)
12:02:44 <Cale> memory is getting allocated and thrown away quickly
12:03:15 <Cale> Yeah, you might want to memoise some things
12:03:29 <Cale> where's that paste?
12:03:48 <Cale> http://paste.lisp.org/new/haskell is the shortcut url
12:03:50 <jethr0> http://paste.lisp.org/display/14119
12:04:29 <Cale> ah, okay
12:04:46 <lisppaste2> jethr0 pasted "raytrace profiling" at http://paste.lisp.org/display/14120
12:04:52 <jethr0> hehe
12:06:17 <Saulzar> Just get rid of this one -> worldToString :)
12:06:22 <jethr0> cale: memoising would involve changing the function types, no?
12:06:55 <Saulzar> Hmm, what would be memoisable in a raytracer?
12:07:14 <jethr0> in a raytracer, lazy evaluation is really overkill, isn't it?
12:07:35 <jethr0> only the evaluation order makes a difference, but eventually every ray will be evaluated!
12:07:35 <Cale> raytracing is kind of a form of lazy evaluation to begin with
12:07:50 <jethr0> how's that?
12:08:08 * SamB thinks shapr's idea of late binding is a bad pun
12:08:10 <SamB> jethr0: hmm, I dunno.
12:08:12 <SamB> depends
12:08:14 <SamB> Cale: yeah, I was kinda thinking that
12:08:18 <SamB> jethr0: well, "backwards" ray-tracing is
12:08:28 <Cale> You're not evaluating every ray of light in the scene, only the ones you care about
12:08:29 <SamB> ("backwards" being where you start at the camera and trace to the lights)
12:08:34 <Cale> yeah
12:08:46 <SamB> which is the kind you do
12:09:10 <Saulzar> Complete foward raytracing is somewhat impractical :)
12:09:20 <jethr0> hmm, backwards as in from light to eye? yes, that would be pretty lazy ;-)
12:09:32 <SamB> jethr0: no, you're backwards
12:09:37 <jethr0> hehe
12:09:53 <Cale> Forward raytracing is tracing the physical rays of light
12:09:55 <SamB> ordinary raytracing is what I meant by "backwards" raytracing
12:10:03 <jethr0> but, when going from the eye into the scene i only create the rays i am interested in, in the first place
12:10:07 <SamB> which is what the quotes are for
12:11:26 <SamB> anyway, I don't think lazyness will hurt, but dunno if it can actually save you any ifs
12:11:37 <Cale> wow, 'dot' accounts for 15% of the evaluation :)
12:11:39 <SamB> or cases, or whatever
12:11:41 <Cale> er
12:11:43 <Cale> allocation
12:11:48 <jethr0> samb: i DO think lazyness might hurt due to all the overhead in creating thunks and closures!
12:11:51 <SamB> where is the program?
12:12:01 <Saulzar> jethr0, Got any pretty pictures to go with the profile? 
12:12:10 <SamB> jethr0: well, thats not lazyness per se
12:12:18 <jethr0> cale: well, i use dot products quite heavily ;-)
12:12:20 <SamB> well, thunks,
12:12:28 <SamB> anyways, we can optimize it!
12:12:31 <SamB> let me see!
12:12:42 <Cale> jethr0: do you know about seq?
12:12:48 <jethr0> saulzar: sure, but my uplink is rather slow right now!
12:12:56 <SamB> Cale: where is code!
12:13:06 <Cale> SamB: no code yet
12:13:08 <Saulzar> Hmm, seems strange that it would use 15% of allocation, though I suppose that could account for all new vector creation ...
12:13:11 <SamB> oh really?
12:13:17 <jethr0> jethr0 pasted "raytrace profiling" at http://paste.lisp.org/display/14120
12:13:27 <SamB> jethr0: where is code?
12:13:29 <Cale> SamB: http://paste.lisp.org/display/14119
12:13:38 <jethr0> same thing.
12:13:49 <jethr0> cale: read about it, but didn't have a chance of trying it yet!
12:14:06 <jethr0> also deepseq and $! i guess?
12:14:22 <Cale> yeah, potentially
12:14:30 <jethr0> saulzar: oh, you mean allocation. yes, that's definitely strange. i thought execution time!
12:14:38 <Cale> $! is just a handy form of seq
12:14:44 <jethr0> right now i haven't made anything strict (colors, vectors, ...)
12:15:06 <SamB> jethr0: stick in some !s and see if it improves
12:15:28 <jethr0> but as i said, i could make EVERYTHING strict (because i don't really use lazy evaluation here).
12:15:37 <jethr0> but the question is: where to put those !s
12:15:48 <SamB> jethr0: in the data constructor definitions
12:15:56 <Cale> just before each field of your Vector type
12:15:56 <SamB> for starters
12:16:07 <Cale> which makes those fields strict wrt to the vector
12:16:24 <SamB> also, -funbox-strict-fields
12:16:31 <jethr0> saulzar: http://jethr0.dyndns.org/raytracing/14.png
12:17:47 <jethr0> does that work only for structs or also for data definitions?
12:17:49 <Saulzar> Crazy effect with the specular/refraction... looks like you have about 10 lights
12:17:56 <jethr0> data Vector = Int! Int! Int!
12:18:15 <jethr0> saulzar: no, its just two lights and mad bump mapping ;-)
12:18:26 <jethr0> no refraction involved
12:18:58 <jeffno> Is there a page somewhere that describes Haskell idioms?
12:19:04 <jethr0> http://jethr0.dyndns.org/raytracing/17.png
12:19:15 <Saulzar> Hmm - using integer arithmetic?
12:19:26 <jethr0> it's a plane with texture and bump mapping...
12:19:45 <jethr0> saulzar: no sorry, of course not *g*
12:19:45 <jeffno> For example, I found the following line of code surprising when I found out what it did: 
12:19:50 <jeffno> map (map (const False))
12:19:56 <Saulzar> I think it's !Int btw.
12:20:21 <Lokadin> data BinaryTree a = Leaf a | Branch (BinaryTree a) a (BinaryTree a) deriving Show
12:20:24 <Lokadin> elements (Leaf x) = x
12:20:26 <Lokadin> why doesn't it work :(
12:20:28 <Lokadin> ?
12:20:30 <Lokadin> elements (Branch left x right) = elements left ++ (x ++ elements right)
12:20:39 <jethr0> jeffno: google: haskell idioms
12:20:50 <Cale> Lokadin: watch the types
12:20:58 <Cale> Lokadin: what's the type of elements?
12:20:59 <jethr0> saulzar: ok
12:21:03 <Saulzar> jethr0, Neat :)
12:21:08 <SamB> @google Haskell idioms
12:21:09 <lambdabot> http://haskell.org/hawiki/CommonHaskellIdioms
12:21:13 <jethr0> hehe
12:21:20 <jethr0> samb: thx
12:21:21 <jeffno> Thanks!
12:21:41 * SamB made @google, too ;-)
12:21:47 * jeffno feels foolish for asking a Google'able question.
12:21:52 <Lokadin> elements is BinaryTree
12:21:58 <jethr0> samb: which part? the "@" or the "google" ;-)
12:22:09 <SamB> jethr0: the part where it works
12:22:16 <Lokadin> BinaryTree a -> [a] no?
12:22:26 <jethr0> so, you were feeling lucky back then, huh?
12:22:27 <SamB> jethr0: lambdabot is a sandbox for all
12:22:32 <SamB> @where lambdabot
12:22:32 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
12:22:47 <jethr0> samb: good to know. got to love your sand boxes!
12:22:54 * xerox made @wikipedia! :-9
12:22:58 <SamB> jethr0: I think I was just copying off pynfobot
12:23:05 <xerox> (Thanks SamB for @google, hehe!)
12:23:12 <Lokadin> well it says BinaryTree [a] -> [a]
12:23:14 <jethr0> samb: *tststs*
12:23:20 <Lokadin> i don't see why that should be a problem..
12:24:23 <SamB> that is to say, I liked pynfobots google feature, which did the same thing. I kept wanting to @google here. They kept telling me to implement. So one time I actually went and did it.
12:25:09 <xerox> It's the same story for MANY lambdabot's features :-)
12:25:21 <xerox> How many times I got told "Go for it!" ?  ;-)
12:25:38 <astrolabe> lambdabot has a serious bug.  Watch.
12:25:44 <astrolabe> @quote astrolabe
12:25:44 <lambdabot> astrolabe hasn't said anything memorable
12:25:50 <astrolabe> :)
12:25:56 <SamB> that isn't necessarily a bug
12:26:15 <Heffalump> @quote astrolabe
12:26:16 <xerox> This was fun:
12:26:16 <lambdabot> astrolabe hasn't said anything memorable
12:26:19 <xerox> @quote lambdabot
12:26:19 <lambdabot>  of course i'm female
12:26:21 <jethr0> astrolabe: if i were you, i'd hope it's a bug *g*
12:26:22 <xerox> @quote lambdabot
12:26:23 <lambdabot>  Couldn't match kind `?? -> ? -> *' against `(* -> *) -> * -> *'
12:26:26 <xerox> No...
12:26:28 <xerox> @quote lambdabot
12:26:28 <lambdabot>  lambdabot hasn't said anything memorable
12:26:31 <xerox> Ah-ha!
12:26:43 <SamB> well, I mean besides the fact that lambdabot has a really strange concept of "memorable"
12:26:57 <astrolabe> Oh.  That's odd
12:26:59 <jethr0> samb: can you do strictness annotations for type declarations too?
12:27:09 <xerox> The problem is that it seems _I_ never said something memorable.
12:27:13 <jethr0> type RGB = (!Float, !Float, !Float) ??
12:27:15 <SamB> jethr0: I hope not
12:27:27 <xerox> Why not?
12:27:31 <jethr0> hehe
12:27:33 <xerox> It could be useful at times.
12:27:45 <jethr0> wouldn't be a type alias anymore, huh?
12:27:45 <SamB> well, it sounds nastier than GHC's kinds
12:27:57 <xerox> Oh, 'type', dang.
12:28:02 <xerox> data, boy!
12:28:06 <SamB> or maybe I should say it would make GHC's kinds even nastier
12:28:28 <SamB> in any case, definately not for newtypes.
12:28:31 <SamB> er, types.
12:28:35 <jethr0> ???
12:28:46 <SamB> I thought you meant like
12:28:50 <xerox> jethr0: ssssh, nod slowly.
12:28:52 <SamB> !a -> !b -> c
12:29:07 <Lokadin> i mean it's strange i can add them
12:29:18 <Lokadin> the values i mean
12:29:23 <Lokadin> just can't seem to make them into a list
12:29:26 * SamB is probably more confused than jethr0 
12:29:27 * jethr0 nods and pretends to follow the conversation
12:29:45 <SamB> anyway, the whole idea is confusing
12:29:52 <jethr0> s/follow/be able to follow/
12:29:52 <SamB> which is why I hope you can't do it
12:30:09 <jethr0> i can't, just asking...
12:30:14 <Lokadin> maybe you guys could help me? :$
12:30:26 <jethr0> so, if i want to strictify i need to use "data" and constructors?
12:31:34 <jethr0> lokadin: what (in one sentence) is the problem?
12:32:49 <Lokadin> umm, well i can't convery BinaryTree to list
12:32:53 <Lokadin> convert*
12:33:13 <Lokadin> gives me a run time error
12:33:31 <jethr0> lokadin: so it does compile?
12:33:35 <Lokadin> yep
12:34:12 <Lokadin> and if i change from the ++ to + then it adds them without a problem
12:35:22 <jethr0> have you tried: (elements left) ++ x ++ (elements right) ?
12:36:18 <Lokadin> nope, but the program before it didn't need it and niether does the adding
12:36:21 <Lokadin> so i assumed you don't need it
12:36:26 <Lokadin> but i'll tyr it anyways
12:37:14 <jethr0> lokadin: works fine for me
12:37:20 <Lokadin> really? :|
12:37:21 <jethr0> *Main> elements (Branch (Leaf [5]) [3] (Leaf [2]))
12:37:27 <jethr0> => [5,3,2]
12:37:30 <Lokadin> o
12:37:37 <Lokadin> i don't have them as [5] items
12:37:39 <basti_> is >>= right or left associative?
12:37:56 <Lokadin> yea that works 
12:37:59 <basti_> it is associative, but the haskell operator isn't
12:38:13 <jethr0> lokadin: what do you mean? if the type of BinaryTree is "Int" then you can't concatenate them!
12:38:32 <jethr0> lokadin: and if it is [Int] then you can't add them!
12:38:47 <Lokadin> it's of time a
12:38:49 <Lokadin> type*
12:39:13 <jethr0> so, you would have to do: elements (Leaf x) = [x]
12:39:19 <jethr0> then it should work your way!
12:39:35 <Lokadin> ?
12:39:50 <jethr0> oh, and also: elements (Branch left x right) = (elements left) ++ [x] ++ (elements right)
12:40:14 <ADEpt> @seen jlouis
12:40:14 <lambdabot> jlouis is in #haskell-blah and #haskell. Last spoke 3 hours, 37 minutes
12:40:14 <lambdabot> and 1 second ago.
12:40:20 <jethr0> lokadin: should your leaves contain arrays or single values?
12:40:29 <jethr0> @seen jethr0
12:40:29 <lambdabot> You are in #haskell. Last spoke just now.
12:40:39 <jethr0> @seen cale
12:40:39 <lambdabot> cale is in #haskell. Last spoke 19 minutes and 41 seconds ago.
12:40:46 <kosmikus> basti_: left
12:41:01 <Lokadin> one sec prof is talking
12:41:27 <basti_> kosmikus: but only in haskell. a>>=(b>>=c) should equal (a>>=b)>>=c shouldn't it?
12:41:28 <Cale> sorry :)
12:41:45 <Lokadin> hmmm
12:42:03 <Lokadin> well i thought the type should be elements :: BinaryTree a -> [a]
12:42:08 <lisppaste2> jethr0 pasted "binary tree" at http://paste.lisp.org/display/14122
12:42:26 <Lokadin> kk
12:42:28 <jethr0> lokadin: and now it is!
12:42:32 <Lokadin> :D
12:42:37 <Lokadin> if only i could see it :(
12:42:46 <Lokadin> slow connection
12:43:28 <Lokadin> yaya!!!
12:43:28 <Lokadin> :D
12:43:34 * Lokadin hugs jethr0 
12:43:34 <jethr0> lokadin: i am not helping you with your homework right now, am i ;-)
12:43:39 <Lokadin> !! :D
12:43:39 <Lokadin> lol
12:43:41 <Lokadin> nope
12:43:48 <Lokadin> i'm doing tutorial on spare time
12:43:58 <Lokadin> @YAHT
12:43:58 <lambdabot> Unknown command, try @listcommands.
12:44:02 <Lokadin> :(
12:44:04 <xerox> @where YATH
12:44:05 <Lokadin> yaht
12:44:05 <lambdabot> I know nothing about yath.
12:44:09 <xerox> @where YAHT.
12:44:09 <lambdabot> I know nothing about yaht..
12:44:10 <Cale> @where yaht
12:44:10 <lambdabot> http://www.isi.edu/%7Ehdaume/htut/
12:44:11 <jethr0> okay, well this solution is slow, because of "++"
12:44:14 * xerox growls
12:44:23 * jethr0 wonders what "yaht" might be
12:44:37 * xerox gives up on writing
12:44:44 <Cale> @google yet another haskell tutorial pdf
12:44:46 <lambdabot> http://www.isi.edu/~hdaume/htut/tutorial.pdf
12:44:50 <Cale> heh
12:44:53 <kosmikus> basti_: that's not even type correct, usually
12:44:54 <Cale> there's the real link
12:45:08 <Lokadin> how can you make it faster?
12:45:16 <xerox> Pushing it down the road
12:45:28 <Lokadin> ?
12:45:37 <xerox> j/k !
12:45:44 <Lokadin> ol
12:45:45 <Lokadin> lol
12:45:50 <xerox> olol
12:45:54 <xerox> lolol
12:45:57 <xerox> ..
12:45:57 <jethr0> hmm, don't know. maybe elements (Branch left x right) = (elements left) ++ (x : elements right)
12:46:13 <jethr0> what does "j/k" mean?
12:46:16 <kosmikus> basti_: (a >>= b) >>= c == a >>= (\x -> b x >>= c) is what should be true
12:46:20 <pesco> basti_: a >>= (\x -> b x >>= c)  =  (a >>= b) =
12:46:20 <Cale> just kidding
12:46:22 <pesco> eek.
12:46:25 <jethr0> ah
12:46:41 <jethr0> this young hoppers with their youth lingo *g*
12:46:48 <pesco> What kosmikus said. :)
12:47:24 <Lokadin> lol
12:47:32 <Lokadin> whats *g* ?
12:47:38 <Cale> grin
12:47:49 <jeffno> Some day all our conversation is going to look like Haskell code.
12:47:55 <sieni> not giggle?
12:48:03 <Lokadin> lol
12:48:03 <jethr0> lokadin: or even concatenating at the very end of the computation (but that's getting ahead of ourselves)
12:48:04 <Cale> possibly
12:48:09 <jethr0> whatever
12:48:23 <Lokadin> well how is that?
12:49:16 <jethr0> it's yet above me. one can do some need tricks with continuation passing style...
12:49:32 <Lokadin> :|
12:49:44 <shapr> SamB: Would I be so cruel as to wrap a bad pun up into a serious answer?
12:49:47 <Cale> it's not that inefficient
12:49:51 <jethr0> http://users.aber.ac.uk/afc/stricthaskell.html#cps
12:50:13 <Cale> you're referring to that implementation of elements?
12:50:23 <Lokadin> bah i have to get back to listneing to my psych lecture, i have a test on tuesday
12:50:26 <Lokadin> kk
12:50:33 <Cale> I'd say it's reasonably efficient. You're unlikely to run into problems :)
12:50:33 <jethr0> yep, i thought "++" was considered slow...
12:50:45 <Cale> heh, you're sitting in a psych lecture hall?
12:50:52 <Lokadin> yea
12:50:52 <xerox> Gotcha
12:50:53 <Lokadin> lol
12:50:53 <xerox> > take 10 lol where lol = "ol" : zipWith (:) (intersperse 'o' $ cycle "l") lol
12:50:55 <lambdabot> ["ol","lol","olol","lolol","ololol","lololol","olololol","lolololol","
12:50:55 <lambdabot> ololololol","lololololol"]
12:51:46 <Cale> ++ is only slow if you use it to attach lots of small strings on the end
12:51:55 <jethr0> > ints = 1 : (map (+1) ints)
12:51:56 <lambdabot>  parse error on input `='
12:52:25 <Cale> because you end up creating and then throwing away lots of list structures
12:52:51 <Cale> If the lists you're appending are roughly the same size, it's not so bad.
12:53:01 <jethr0> exactly, and in "elements" happens the same (recursively), doesn't it?
12:53:06 <jethr0> okay
12:53:18 <Cale> there are bad cases
12:53:32 <Cale> like, if your tree was heavily unbalanced in the wrong way
12:53:41 <jethr0> cale: on what basis did you recommend strictifying my vectors?
12:53:47 <jethr0> cale: anything you saw in the profile?
12:54:00 <Cale> jethr0: well, there's no harm in it
12:54:20 <Cale> As you're almost never just going to need the, say, y component of a vector
12:54:40 <Cale> if you need one of the components, you'll probably need all of them
12:55:21 <jethr0> hmm, reasonable, thx
12:55:36 <SamB> jethr0: it would decrease allocation by about 75% per vector?
12:56:03 <Cale> If you use it with unbox strict fields, it will decrease memory usage by a lot
13:04:12 <Cale> If you have something like data Vector = Vector Double Double Double, the data structure for a Vector actually looks something like [tag] [thunk] [thunk] [thunk] where the thunks are pairs consisting of a boolean tag which says whether they've been evaluated yet, and a pointer to either code or a double.
13:04:12 <jethr0> so what is all this unboxing? does it mean that no thunks/closures are created for this data?
13:04:12 <Cale> yeah
13:04:12 <jethr0> ok, cool
13:04:12 <Cale> with unboxing, your vector will look like  [tag] Double Double Double
13:04:12 <Cale> the tag is an integer, in your case, it'll always be 0 -- I'm not sure if the compiler optimises that away
13:04:12 <SamB> Cale: aren't you missing some #s?
13:04:12 <Cale> well, yes
13:04:12 <jethr0> and how about my texture array? it is now: type Texture = Array.Array (Integer,Integer) (Float,Float,Float)
13:04:12 <jethr0> can i make that strict too?
13:04:12 <Cale> By Double there, I mean an actual double-precision floating point value in memory
13:04:12 <Cale> you should try to avoid 'type' -- use newtype or data
13:04:12 <Cale> (just for the fact that more possibility for type errors is actually a good thing :)
13:04:12 <jethr0> okay, newtype it is
13:04:12 <Cale> It's a little less convenient, but it's worth it
13:04:12 <SamB> jethr0: you need data for Vector
13:04:12 <Cale> well, of course :)
13:04:12 <jethr0> i have data for vector. but it gets really annoying to write "Vector 2 3 4" instead of (2,3,4) all the time!
13:04:12 <Cale> For that Texture type, newtype is fine. You may want to play with the array type a it
13:04:12 <Cale> bit*
13:04:12 <Cale> that's an unboxed array
13:04:12 <Cale> er
13:04:12 <Cale> a boxed array
13:04:12 <jethr0> ok, and how do i unbox it?
13:04:26 <Cale> good question :)
13:04:45 <Cale> unboxed arrays can't store tuples
13:05:08 <Cale> you could have it as 3 unboxed arrays of Floats
13:05:25 <Cale> (you're still allowed to index them however you want)
13:05:30 <jethr0> hehe, well i really only need to store the complete file and have an access function figure out the tuple question!
13:06:05 <jethr0> so, how do i unbox an array of doubles? Array (Integer,Integer) Double    ??
13:06:15 <Cale> UArray
13:06:22 <jethr0> aaaahhhh
13:06:22 <SamB> jethr0: Data.Array.Unboxed
13:06:30 <jethr0> aaaaahhhhh
13:06:31 <SamB> @docs Data.Array.Unboxed
13:06:32 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Array-Unboxed.html
13:06:48 * jethr0 hugs lambdabot and all its developers
13:06:53 <xerox> :)
13:06:58 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Array-IArray.html -- this is where all the (immutable) array operations are
13:07:01 <jethr0> @docs newtype
13:07:01 <lambdabot> newtype not available
13:07:12 <Cale> newtype is a keyword
13:07:19 <Cale> you use it just like data
13:07:25 <SamB> jethr0: it only gives docs for modules
13:07:32 <jethr0> n/p. i was just trying it ;-)
13:07:32 <SamB> @index newtype
13:07:32 <Cale> only it's only allowed to have one constructor with one field
13:07:32 <lambdabot> bzzt
13:08:15 <Cale> newtype creates a new type in the type system, which is implemented the same way as another type
13:08:38 <Cale> as opposed to data, which changes the data representation, even if you only have one constructor and one field
13:08:42 <xerox> Cale's thousand rephrase of the Same Idea :-)
13:09:02 * xerox hands Cale a little shiny cup
13:09:13 <jethr0> well, but you have to type the constructor all the time then, right?
13:09:13 <Cale> heh
13:09:27 <xerox> (with a laser-impressed lambda on it, of course)
13:09:27 <SamB> @remember xerox > take 10 lol where lol = "ol" : zipWith (:) (intersperse 'o' $ cycle "l") lol
13:09:40 <xerox> haha.
13:09:49 <Cale> jethr0: potentially. If you implement some operations on the type, then you won't need it
13:09:54 <Cale> (afterward)
13:09:56 * xerox hugs SamB
13:10:05 <SamB> @quote
13:10:05 <lambdabot> SyntaxNinja says: I think that the compiler authors will fly here from
13:10:05 <lambdabot> England just to kill me if I did that
13:10:09 <jethr0> @quote xerox
13:10:09 <lambdabot>  > take 10 lol where lol = "ol" : zipWith (:) (intersperse 'o' $ cycle "l"
13:10:09 <lambdabot> ) lol
13:10:14 <xerox> cool :-)
13:10:41 <jethr0> @remember jethr0 *something i never said*
13:10:47 <jethr0> @quote jethr0
13:10:48 <lambdabot>  *something i never said*
13:11:16 <SamB> hmm
13:11:18 * xerox rings the ABUSE bell
13:11:28 <jethr0> oh sorry, can you unremember sth?
13:11:33 <xerox> ;-)
13:11:35 * jethr0 was just kidding around *sry*
13:11:43 <SamB> xerox: does that mean we have to play games written in half of common lisp?
13:11:53 <xerox> brrr.
13:11:54 <jethr0> ???
13:12:22 * jethr0 adores lisp (except for it "missing" type system)
13:12:29 <Cale> @ghc
13:12:30 <lambdabot>  GHC internal error
13:12:36 <Cale> @ghc
13:12:37 <lambdabot>  Duplicate binding in parallel list comprehension
13:12:45 <Cale> @ghc
13:12:45 <lambdabot>  TELL SIMON: evalAbsence
13:12:47 <jethr0> @unremember jethr0
13:12:52 <Cale> heh
13:12:53 <jethr0> @forget jethr0
13:12:53 <lambdabot> Unknown command, try @listcommands.
13:12:57 <Cale> @ghc
13:12:58 <lambdabot>  Illegal deriving item
13:13:01 <Cale> @ghc
13:13:02 <lambdabot>  Qualified name in function definition
13:13:09 <Cale> @ghc
13:13:10 <lambdabot>  Kind signature on data type declaration has non-* return kind
13:13:39 <Cale> @ghc
13:13:40 <lambdabot>  All the type patterns for a generic type constructor must be identical
13:13:52 <Cale> @ghc
13:13:53 <lambdabot>  You need -fglasgow-exts to derive an instance for this class
13:14:01 <Cale> @ghc
13:14:01 <lambdabot>  Kind signature on data type declaration has non-* return kind
13:14:04 * jethr0 puts fingers into his ears and sings *lalala*
13:14:08 <Cale> hehe
13:14:30 <jeffno> This may be why I ignored lambdabot that first day I got here..
13:14:46 <araujo> jethr0, many people would say they love lisp because of the missing type system.
13:15:04 <xerox> @code
13:15:05 <lambdabot> Module "code" produced error: Text.Regex.Posix.regcomp: error in pattern
13:15:33 <Cale> nice
13:15:37 <xerox> @code
13:15:38 <lambdabot> Module "code" produced error: Text.Regex.Posix.regcomp: error in pattern
13:15:40 <jethr0> araujo: and i might be one of them. but the bigger your system gets the more dynamic typing tends to bite you in the ass!
13:15:42 <xerox> Okay.
13:15:46 <SamB> @quote jethro
13:15:46 <lambdabot> jethro hasn't said anything memorable
13:16:01 <jethr0> thx
13:16:10 <jethr0> so, did my unremembering work?
13:16:11 --- topic: set to '["Haskell is still the language of choice for discriminating hackers", "logs: http://tunes.org/~nef/logs/haskell/","http://www.haskell.org/learning.html","Haskell IDE: http://haskell.org/hawiki/hIDE","http://www.haskell.org/tmrwiki/IssueFive","We put the Funk in Funktion","http://sequence.complete.org/hwn/20051129","HCAR 11/2005: http://haskell.org/communities/","Haskell libraries top 10: http://haskell.org/tmrwiki/TopTenHaskell"]' by CosmicRay
13:16:11 <araujo> jethr0, yes, that's true.
13:16:42 <SamB> araujo: many people haven't experienced a nice, hand-holding typesystem
13:16:47 <jethr0> that looks alot like the previous topic!
13:17:10 <Cale> jethr0: I found myself even frustrated in small projects, as most of my bugs were things which a reasonable typesystem would have caught, and instead I had to mess around with a debugger
13:17:22 <danY2K> yop
13:17:27 <CosmicRay> that means the new HWN is out, boegel ;-)
13:17:32 <jethr0> true, and apart from a few quirks the haskell type inference works really transparently without much intervention from the user!
13:17:53 * jeffno still gets confused by some of the type errors.
13:18:05 <jethr0> cale: especially when you are trying to be smart and make super-higher-order-functions in lisp!
13:18:19 <jethr0> you never get the type right in all cases, but lisp just won't tell you where!
13:18:23 <sieni> Cale: just leave the bugs out, then you don't have to worry with the type checking ;-)
13:18:38 * jeffno hates when he forgets to put a comma between items in a list, and gets a type error.
13:18:41 * jethr0 is also sometimes baffled by ghc compiler warnings.
13:18:50 <Cale> Well, higher order functions are part of the way one programs in a functional language.
13:18:56 <araujo> But here, we get to the same point of the distinction between a static or dynamic type system.
13:19:39 <Cale> runtime type errors are a good deal harder to fix than compile time ones
13:20:00 <jethr0> cale: yes, but haskell makes it so much less painful to get a complex HOF right!
13:20:12 <Cale> jethr0: yes
13:20:23 <SamB> jethr0: why do you suppose we have @ghc? some of them are so baffling its funny!
13:20:27 <jethr0> cale: especially since most runtime systems don't report the source code location quite so well!
13:20:45 <Cale> especially as you don't end up using 100 funcalls all over the place, and having to quote things specially with #'
13:21:17 <sieni> ahh, the pleasures of cl ^_^
13:21:32 <jethr0> cale: well, i am more of a scheme man personally and scheme fixed lots of those uglinesses *g*
13:21:41 <Cale> yeah
13:21:46 <Cale> I agree
13:22:04 <Cale> CL has this seemingly needless distinction between functions and other values which I don't understand.
13:22:10 <jethr0> at the expense of shoot-yourself-in-the-foot-macros
13:22:41 <jethr0> well, it allows for a bigger namespace ;-)
13:22:58 <Cale> That's about the only benefit that I could see for it
13:23:24 <Cale> however, it's questionable whether one would ever want to make extensive use of that feature
13:23:37 <jethr0> i think it has historical reasons (not sure). i kind of remember some distinction in the environments. never mind, i forgot!
13:23:48 <jethr0> ^_^
13:24:05 <Cale> I can imagine some nicely obfuscated code which makes use of the same names for functions and values all over the place
13:25:00 <jethr0> but one great feature of lisp/scheme is context-aware macros. and treating code and data identically allows for some heavy duty abstractions with extremely little code!
13:25:27 <araujo> I think the type system isn't only limited to technical points, but also got a great influence over the programmer thinking. Static typing will make you think more about data types and their interactions between other abstractions (such a functions). Dynamic typing will make you think more about abstraction compositions, like for example objects in Smalltalk or CommonLisp
13:26:26 <jeffno> I'm not sure how dynamic typing leads to that kind of thinking.
13:26:26 <jethr0> as long as you are on top of typing, even type inference hinders you creatively when rapidly prototyping.
13:26:34 <araujo> I think that choosing the language that fits better your needs, it is pretty subjective in that regard.
13:26:51 <Cale> I've never felt that types hindered my creativity
13:26:54 <jethr0> but when things become more complex you loose sight of types and then a type system helps you not hurting yourself!
13:27:27 <jethr0> hmm, you know, sometimes i am annoyed because haskell won't allow sth i'd like to do.
13:27:28 <araujo> I never inferred one is better than another in my statement.
13:27:43 <Cale> jethr0: like what?
13:27:50 <jethr0> most often it's my idea not making sense, but sometimes it's haskell ;-) (existential types anyone?)
13:27:57 <Cale> Usually I find that if Haskell doesn't allow something, it would have been a bug anyway
13:28:05 <jethr0> true
13:28:18 <Cale> Existential types and even dynamic types are available in GHC
13:28:25 <jethr0> in the standard?
13:28:31 <Cale> not in the standard
13:28:44 <Cale> GHC is way ahead of standardisation
13:28:52 <araujo> I believe you can be as creative using types as using objects 
13:29:09 <jethr0> one can argue about lists/arrays with items of different types in them and most often they don't make sense.
13:29:14 <araujo> (if you can notice any distinction at all)
13:29:17 <Cale> @docs Data.Dynamic
13:29:18 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Dynamic.html
13:29:51 <jethr0> but coming from scheme and not being used to such niceties as Maybe, one might wish for sth like that some times.
13:30:06 <SamB> araujo: are you talking about that language named after the peppers?
13:30:25 <SamB> araujo: or that other dependantly typed language?
13:30:31 <Cale> hehe
13:30:56 <Cale> even in Haskell, there's a lot of room for creativity in the type system
13:31:10 <Cale> you can use classes to do some pretty clever type-directed things
13:31:29 <Cale> @docs Text.Printf
13:31:30 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Text-Printf.html
13:31:36 <Cale> for example
13:31:36 <araujo> SamB, i am comparing Haskell with CL/Smalltalk actually.
13:31:39 <jethr0> cale: have you really never struggled with haskell to get some typing idea across that it would simply deny with some strange error message?
13:31:41 <SamB> Cale: true, but in Haskell you can tell the difference between types and objects
13:31:54 * xerox still want to do turing-complete things with fundeps
13:31:57 <jethr0> maybe "hindering creativity" was too strong a formulation.
13:32:23 <SamB> jethr0: like what?
13:32:36 <jethr0> cale: but you have to be QUITE clever to make things possible that in dynamically typed languages wouldn't be an issue.
13:33:01 <Cale> jethr0: The only type errors that I've run into have been genuine bugs. Sometimes quite subtle bugs in the way I was thinking about my algorithm, but once I sorted out the type error, I've always found that it was some mistake that I made.
13:33:13 <jethr0> i really don't know. like some occasion where you need existential types, but need to stay standard conformant?
13:33:29 <SamB> jethr0: I suppose it all depends on whether you are trying to do simple things in complicated ways, or complicated things in simple ways...
13:33:43 <Cale> I don't think I've actually put existential types to use in a real program.
13:33:49 <Cale> hmmm
13:34:01 <jethr0> cale: i often had the same experience. but (not least due to my newbieness, i had to struggle with haskell to make the type system understand what i wanted)
13:34:09 <jethr0> like, some issues with frominteger, etc.
13:34:13 <SamB> jethr0: type systems are great for the latter
13:34:24 <Cale> well, you have to struggle with any programming language to express yourself as a beginner :)
13:34:39 <jeffno> Speaking of that..
13:34:56 <jeffno> Can somebody help give me some intuition for this:
13:35:00 <SamB> jeffno: yes, oh beginner?
13:35:06 <jethr0> yeah, but when you know exactly what you do, dynamically typed languages are easier on you (until you make a mistake that is)
13:35:16 <jeffno> map (map (const False))
13:35:19 <Cale> maybe
13:35:27 <Cale> I kind of like having to type fromIntegral
13:35:35 <jethr0> hehe
13:35:42 <SamB> jethr0: lately I haven't been doing a whole lot of such things
13:35:45 <jethr0> what does "const" do?
13:35:54 <Cale> const a b = a
13:35:56 <jeffno> Returns the first argument.
13:36:07 <SamB> Cale: personally, I think fromIntegral is rather on the long side
13:36:23 <Cale> const a = \b -> a
13:36:24 <SamB> I define fI = fromIntegral if I'm going to be doing it a lot
13:36:34 <jeffno> Integral reminds of calc.
13:36:36 <jethr0> what a very helpful function
13:36:38 * araujo believes that choosing between dynamic or static typing is just a matter of preference
13:36:54 <jethr0> doesn't that miss an argument then above?
13:36:54 <SamB> but I do appreciate being informed of where conversion is happening
13:37:02 <Cale> yeah
13:37:09 <Cale> that's what I was going to say
13:37:18 * jethr0 thinks that for complex, huge projects inferred static typing helps a lot
13:37:25 <Cale> You're converting between numeric types. They're really not all the same thing.
13:37:52 <Cale> Rationals are drastically different from Doubles, which are really different from Integers
13:37:52 <araujo> jethr0, I also _think_ so. 
13:37:53 <jethr0> hehe, but that takes getting used to coming from any other language than haskell ;-)
13:38:00 <xerox> const x _ = x
13:38:10 <araujo> But i wouldn't argue saying that it is the absolute truth.
13:38:39 <Cale> Well, of course any language feature is a matter of preference
13:38:40 <araujo> For example, Smalltalk is used in very big applications very succesfully.
13:38:49 <fworp> > (map $ map $ const false) [[1,2,3],[1,2]]
13:38:50 <lambdabot>  Not in scope: `false'
13:38:53 <fworp> ergh
13:38:56 <SamB> jethr0: well, it saves hunting for hard-to-find subtle bugs like you might have to do in C
13:38:57 <fworp> > (map $ map $ const False) [[1,2,3],[1,2]]
13:38:59 <lambdabot> [[False,False,False],[False,False]]
13:39:02 <fworp> yeah
13:39:04 <jeffno> And C is used to build large operating systems.  Doesn't mean it's ideal :)
13:39:05 <SamB> fromIntegral, that is
13:39:34 <jethr0> *g*
13:39:41 <ADEpt> araujo: C is used in very big applications very succesfully. Which usually means that inside they are full of stuff like 'a[i++]=b[i++]' :)
13:39:42 <araujo> jeffno, yes, that's why i never said it is the absolute truth, sometimes reality shows it is _not_ true :-]
13:39:49 * jethr0 wonders how many conversations are concurrent right now!
13:39:49 <xerox> const = (fst .) . (,)
13:39:56 <jeffno> fworp, did you know what it did before you ran it?
13:40:08 <SamB> araujo: just because it helps doesn't make it the only thing that could help
13:40:08 <Cale> xerox: :)
13:40:22 <araujo> ADEpt, yes, it is true. I think it applies the same to any other language.
13:40:24 <fworp> jeffno: yeah
13:40:31 <jethr0> adept: that doesn't seem safe or even defined in the language standard...
13:40:34 <xerox> const = (snd .) . flip (,)
13:40:35 <araujo> SamB, Never said that.
13:40:48 <fworp> i wasnt positive
13:40:55 <jethr0> or was it x = a[i++] + b[i++] that wasn't defined?
13:40:57 <jeffno> fworp: Ok, because it totally surprised me.  I'm having a hard time developing intuition.
13:40:58 <fworp> (which is why i ran it)
13:41:08 <Cale> jethr0: yeah
13:41:14 <Cale> er
13:41:15 * jeffno wonders if he will have to puzzle over all functional code.
13:41:21 <araujo> SamB, I said it exists dynamic typing systems that do very good. That was all.
13:41:25 <Cale> x = a[++i] + b[++i] ?
13:41:33 <jethr0> oh sorry
13:41:52 <jethr0> but seeing "++" twice on the same line in C just make all my alarm bells go off.
13:41:54 <xerox> ahah, who can make a function which type is:
13:41:54 <xerox> @type ($) ?
13:41:55 <lambdabot> parse error (possibly incorrect indentation)
13:41:57 <xerox> ahah, who can make a function which type is:
13:41:57 <xerox> @type ($)
13:41:58 <lambdabot> forall b a. (a -> b) -> a -> b
13:42:04 <xerox> (Sorry for the repast of the question)
13:42:08 <SamB> araujo: well, Smalltalk wouldn't be nearly so useful without the development environment!
13:42:10 <samx_> i find that the biggest problem coming to haskell is the lack of any comprehensive documentation.. you'll either have to dig into research docs written often a scientific notation and accuracy in mind, or read how the libraries are implemented.. which can be pretty frustrating, if you are just looking to use the language
13:42:14 <xerox> (with only standard functions, no lambdas)
13:42:17 <jethr0> i'm still not sure about "a[i++] = b[i++]"
13:42:25 <fworp> jeffno: i think the only cure for that is experience
13:42:30 <jethr0> samx_: amen
13:42:33 <araujo> SamB, That's because Smalltalk is both a PL and an IDE 
13:42:33 <jethr0> to that
13:42:34 <fworp> not that i have all that much myself
13:42:45 <Cale> samx: there are places where the hierarchical libraries documentation is weak, but it's not that bad
13:42:56 <jeffno> fworp: Ok.  Guess it's back to more head-pounding.
13:43:22 <Cale> http://haskell.org/ghc/docs/latest/html/libraries/ -- you can see that there's quite a lot of documentation :)
13:43:24 <xerox> Let me restate it: who can make a function of type "forall b a. (a -> b) -> a -> b" with only standard Haskell98 functions (without anonymous ones) ?
13:43:29 <xerox> :-D
13:43:32 * SamB doesn't see the problem with reading the library implementation
13:43:38 <Cale> There are certain things where reading the papers will help a lot
13:43:44 <xerox> (without ($) :P)
13:43:45 <Cale> like Control.Parallel.Strategies
13:43:49 <Cale> and STM
13:44:06 <ADEpt> jethr0: actually, the order of exection in that expression is not defined by standard, and, as such, implementation-specific
13:44:12 <SamB> @type ($)
13:44:13 <lambdabot> forall b a. (a -> b) -> a -> b
13:44:13 <fworp> myfun = iterate
13:44:29 <SamB> @type id :: (a -> b) -> a -> b
13:44:30 <lambdabot> (a -> b) -> a -> b :: forall a b. (a -> b) -> a -> b
13:44:40 <xerox> ihih.
13:44:42 <ADEpt> jethr0: circa 99, watcom tended to do left ++ first, and gcc tended to do right ++ first.
13:44:57 <xerox> SamB: it's by id, but not that way, cheater :P
13:45:01 <SamB> oh, so thats that @type bug I was looking for
13:45:15 <xerox> It's not a bug.
13:45:26 <xerox> @type id (+)
13:45:27 <lambdabot> forall a. (Num a) => a -> a -> a
13:45:39 <xerox> id (+) ==> (+)
13:45:43 <SamB> xerox: it forgot the function name!
13:45:52 <Cale> @type ($) (+) 
13:45:53 <lambdabot> forall a. (Num a) => a -> a -> a
13:45:56 <xerox> Hm?
13:45:58 <SamB> xerox: tell me how that isn't a bug!
13:46:08 <fworp> @type iterate
13:46:09 <lambdabot> forall a. (a -> a) -> a -> [a]
13:46:13 <xerox> SamB: the problem is that it writes the type again
13:46:21 <xerox> @type id
13:46:23 <lambdabot> forall a. a -> a
13:46:31 <xerox> ^- you see, it doesn't write the name again anytime
13:46:36 <Cale> @type let y f = f (y f) in y
13:46:37 <lambdabot> forall t. (t -> t) -> t
13:46:39 <SamB> xerox: the first type was the type from the expression
13:46:47 <SamB> oh
13:46:47 <SamB> oh,
13:46:48 <jethr0> adept: great, sound like a good, hard-to-debug source of trouble when switching compilers ;-)
13:46:50 <xerox> Try, try try!
13:46:55 <SamB> I see
13:47:04 <samx_> cale, i'm not complaining about the quantity of the documentation.. but just having the library docs, without any examples on how to use them can be quite frustrating
13:47:34 <Cale> samx_: have you tried on the wiki?
13:47:39 <samx_> cale, yep
13:47:44 <Cale> which library?
13:47:52 <xerox> @type (id .) . id
13:47:53 <lambdabot> forall b a. (a -> b) -> a -> b
13:47:58 * xerox hands the golden lambda
13:48:00 <jethr0> i second that. just look at "newtype". where would one look for examples of use?
13:48:09 <xerox> :-)
13:48:09 <SamB> samx_: so ask here!
13:48:10 <Cale> jethr0: the report :)
13:48:18 <Cale> hehe
13:48:25 <jethr0> yep, ok, bad example.
13:48:26 * xerox feels lonely
13:48:44 <SamB> @pl (\f x -> f x)
13:48:44 <lambdabot> id
13:48:52 <samx_> not talking about any specific library, .. or you can read that as, most of them
13:48:52 <jethr0> then take "uarray".
13:49:08 <jeffno> The Gentle Introduction has plenty of stuff.
13:49:22 <Cale> @pl let y f = f (y f) in y
13:49:23 <lambdabot> fix (ap id)
13:49:28 <SamB> jethr0: I would read the source!
13:49:32 <Cale> ah, it knows about fix :)
13:49:35 <xerox> hehe.
13:49:37 * SamB almost always reads the source
13:49:57 <jeffno> Plus there's a reference manual online.
13:50:00 <jethr0> okay, but that's pretty drastic if you need an array, don't you think?
13:50:00 <Cale> UArrays are just like Arrays
13:50:04 <SamB> Cale: despite the fact that my Prelude does not
13:50:14 <Cale> (as far as interface is concerned)
13:50:25 <Cale> really, you just need some IArray and MArray examples
13:50:33 <jethr0> cale: i am not necessarily asking for myself, but finding information can be hard...
13:50:52 <Cale> there's always asking here :)
13:50:53 <SamB> Cale: except you can't use the functions from Data.Array on them
13:51:04 <SamB> @index Array
13:51:05 <lambdabot> Data.Array, Data.Array.IArray, Data.Array.Unboxed, Data.Array.Diff
13:51:07 <Cale> Data.Array itself should be removed
13:51:24 <jethr0> right, i hadn't thought of irc for haskell "support" before yesterday.
13:51:25 <Cale> It should just be a reexport of IArray
13:51:28 <SamB> Cale: no
13:51:37 <SamB> it should export IArray(..)
13:51:44 <Cale> yes
13:51:47 <SamB> and Array, of course
13:52:16 <SamB> and probably some appropriate utilities
13:52:40 <jethr0> i recently glanced over some of the state monads and state transformers and available documentation / examples are very scarce.
13:52:48 <Cale> It might as well just export all its children. That would be convenient.
13:52:54 <SamB> jethr0: look at my BF interpreter
13:53:03 <jethr0> where
13:53:04 <SamB> it is in fact quite dense ;-)
13:53:08 <jethr0> hehe
13:53:16 <SamB> @google site:paste.lisp.org bf.hs
13:53:17 <lambdabot> http://paste.lisp.org/list?20
13:53:28 <SamB> arg, not again
13:53:29 <Cale> heh
13:53:50 <SamB> http://paste.lisp.org/display/13015
13:53:51 <samx_> jeffno, gentle introduction doesn't go into the libraries really at all.. other than the basics of prelude.. but when trying to write real world programs, with complex error handling, data structures, user interfaces etc, it's no help at all
13:54:17 * SamB annotates it in the hopes of raising its pagerank
13:54:29 <jeffno> samx: Ah, I see.
13:55:00 <Cale> SamB: that's nice :)
13:55:14 <samx_> jethr0, yeah.. i've been trying to understand transformers for quite a while now, but there is really no decent documentation nor examples
13:55:23 <jethr0> samb: i'd actually call that "dense" ;-)
13:55:49 <Cale> You even managed to make use of the FFI
13:56:24 * jethr0 doesn't think he is up to the challenge of understanding that right now
13:56:28 <lisppaste2> SamB annotated #13015 with "I still use this" at http://paste.lisp.org/display/13015#1
13:57:02 <Cale> SamB: why not move it to the Wiki?
13:57:18 <SamB> Cale: sure!
13:57:25 <SamB> where?
13:57:43 <Cale> http://www.haskell.org/hawiki/TheGallery
13:57:51 * jethr0 hasn't even done any "lifting" yet.
13:57:51 <Cale> let's start expanding that
13:58:10 <xerox> I thought it was a Gallery of Haskellers' pics :D
13:58:15 * xerox should sleep
13:58:38 <Cale> or possibly http://www.haskell.org/hawiki/ShortExamples
13:58:43 <jethr0> xerox: depending on you time zone and mine it's only 11pm *g*
13:58:58 <jethr0> your*
13:59:09 <SamB> Cale: what should I call the page without using a four-letter word?
13:59:13 <Cale> @localtime xerox
13:59:15 <lambdabot> Local time for xerox is Tue Nov 29 22:58:52 2005
13:59:20 <jethr0> see
13:59:33 <jethr0> @localtime jethr0
13:59:35 <lambdabot> Local time for jethr0 is Tue Nov 29 22:59:14
13:59:41 <fworp> @type (.) id
13:59:42 <lambdabot> forall b a. (a -> b) -> a -> b
13:59:43 <Cale> "BFInterpreter"
13:59:47 <xerox> fworp: ah-ha!
13:59:58 <fworp> :)
14:00:12 <xerox> @type (id .) . (. id)
14:00:13 <lambdabot> forall a c. (a -> c) -> a -> c
14:00:13 <jethr0> who the hell is going understand "BF" for brainf*ck?
14:00:28 <jethr0> going to*
14:00:41 <Cale> You can add a description :)
14:00:49 <jethr0> :8
14:01:18 <SamB> jethr0: wouldn't most people?
14:01:33 <Cale> SamB: should I add it?
14:01:34 <jethr0> hmm, out of context, i don't think so.
14:01:53 <SamB> Cale: I'm doing it
14:02:13 * jethr0 awaits the wiki editing clash...
14:02:40 <SamB> apparantly BFInterpreter isn't a wikiword
14:02:48 <Cale> http://www.haskell.org/hawiki/ShortExamples
14:02:58 <jeffno> BF is a bit obscure.
14:03:16 <jeffno> I thought it was something to do with BNF when you mentioned it.
14:03:21 <jethr0> try "[BFInterpreter|BFInterpreter]"
14:03:30 <Cale> I did it :)
14:03:31 <jethr0> but then hawiki might not know it.
14:03:45 <Cale> ["BFInterpreter"] will work
14:04:04 <Cale> I added ["ShortExamples/BFInterpreter"]
14:04:13 <Cale> http://www.haskell.org/hawiki/ShortExamples_2fBFInterpreter?action=show
14:04:30 <SamB> oh?
14:05:22 * SamB notices that TheGallary calls for heavily commented programs
14:06:34 * SamB tries to figure out how to revert
14:07:19 <Cale> alternately, you could comment your code :)
14:08:08 <SamB> hmm, true!
14:08:36 <xerox> > not False
14:08:37 <lambdabot> True
14:09:18 <Cale> the scary thing is that I don't see that BF code as being all that dense :)
14:09:48 <Cale> It's nicely written, if you know all the libraries involved
14:10:12 * xerox rolls on the floor laughing.
14:10:14 <xerox> > let i = not; am = ($); lying = False in i `am` lying
14:10:15 <lambdabot> True
14:10:55 <Cale> though I'd probably go with something more abstract than a block of memory, like an STArray or something :)
14:11:05 <Cale> (or an IOUArray)
14:11:33 <SamB> Cale: I mean "dense" in a good way ;-)
14:11:36 * ADEpt is scared. He stared at BFinterpreter for about two minutes and came off without a slightest idea ....
14:11:40 <xerox> SamB: that rocked.
14:12:08 <ADEpt> ah! Brainf*ck?
14:12:11 <Cale> yes
14:12:19 <ADEpt> should've guessed from name :)
14:12:27 <SamB> ADEpt: yes!
14:12:56 <xerox> Hmpf.
14:13:02 <ADEpt> SamB: how about multi-threaded brainf*ck with STM? ;)
14:13:48 <SamB> ADEpt: there isn't a standard for multi-threaded brainf*ck at all
14:14:00 <SamB> ADEpt: anyway, I'm not even using MArrays
14:14:09 <Cale> SamB: do you have a wikiname for yourself?
14:14:19 <Cale> SamuelBronson doesn't link
14:14:33 <ADEpt> SamB: i think it is easy. Same field, many interpreters from different starting points. Sort of Core Wars :)
14:15:23 <SamB> Cale: SamBronson
14:15:25 <Cale> heh, I wonder what a functional adaptation of corewars would look like
14:15:45 <Cale> Lambda terms battling it out
14:16:03 <SamB> Cale: that doesn't make sense...
14:16:10 <Cale> SamB: I know ;)
14:17:12 <ADEpt> Cale: Like, battle for who has the weakest strong normal form ... :)
14:17:18 <Cale> heh
14:17:37 <ADEpt> SamB: who wrote InterestTable - you or jlouis?
14:18:05 <SamB> ADEpt: jlouis
14:18:21 <Cale> InterestTable?
14:18:25 <SamB> ADEpt: are you referring to the failing test?
14:18:38 <ADEpt> SamB: yes.
14:18:41 <Cale> oh Conjure :)
14:18:54 <SamB> Cale: Conjure component
14:19:12 <ADEpt> SamB: I found the root cause, but I cant get the idea of nextPiece. Wanna look? 
14:20:21 * SamB looks
14:20:48 <ADEpt> SamB: no! wait! pull from me first! I only record the latest bit ...
14:22:23 <SamB> ADEpt: pull what from you?
14:22:51 <ADEpt> SamB: patches :) If you really want to have a look, of course...
14:23:10 * SamB tries again
14:24:25 <SamB> ADEpt: are you sure you rsync'd them?
14:25:37 <ADEpt> yep
14:26:07 <ADEpt> SamB: are you sure you are pulling from me? :)
14:26:33 <SamB> darcs pull http://adept.homeunix.net/conjure
14:27:00 <SamB> okay, now I see something!
14:27:43 * ADEpt rises priority of http traffic to help SamB
14:28:16 * SamB woulda thought that *he* would be the bottleneck
14:29:39 <dons> @seen psi
14:29:39 <lambdabot> psi is in #haskell. Last spoke 2 hours, 28 minutes and 35 seconds ago.
14:29:41 <ADEpt> SamB: my channel is 128/96 adsl and usually 99% utilized, so i wont be so sure
14:29:46 <SamB> I actually have to go
14:30:19 <dons> psi, are you running latest hmp3?
14:30:45 <dons> SamB - no hmp3 segfaults of late?
14:30:49 <ADEpt> SamB: in your own time, look at the prop_completable_by_next_piece, ok?
14:31:02 <ADEpt> dons: i tried to build it and failed :(
14:31:20 <SamB> dons: 0.1p78 has been running for about 29:08 now
14:31:34 <dons> ADEpt, how? you mean darcs failed?
14:31:52 <ADEpt> dons: no, compilation of hmp3 failed
14:32:17 <SamB> ADEpt: do you have fps?
14:32:25 <dons> SamB, ok cgood.
14:32:34 <ADEpt> SamB: yes, from current darcs
14:32:43 <dons> ADEpt, ! oh, that's unusual. how did it fail?
14:33:01 <psi> dons, i had just pulled it from the darcs repo
14:33:08 <dons> psi, when?
14:33:12 <SamB> dons: not THAT unusual
14:33:21 <dons> what's the last patch, psi?
14:33:31 <ADEpt> dons: Linking ...
14:33:31 <ADEpt> gcc: dist/build/./hmp3-tmp/cbits/utils.o: No such file or directory
14:33:31 <ADEpt> gcc: dist/build/./hmp3-tmp/cbits/hooks.o: No such file or directory
14:33:44 <dons> ok. your Cabal is too old. please update it
14:33:50 <dons> ADEpt, whiich Cabal version, btw?
14:33:55 <psi> just before i reported the error. did you fix something around that time?
14:33:57 <dons> $ ghc-pkg list Cabal
14:34:11 <psi> one sec
14:34:13 <ADEpt> `--> ghc-pkg list Cabal
14:34:13 <ADEpt> /usr/lib/ghc-6.4.1/package.conf:
14:34:13 <ADEpt>     Cabal-1.0
14:34:21 * SamB goes to walk the dog now
14:34:33 <dons> yep, you need a newer Cabal, ADEpt. I'll note this  in the README.
14:34:45 <dons> I'm using     Cabal-1.1.4
14:34:45 <ADEpt> SamB: forgot to tell. Problem with prop_completable_by_next_piece is that it selects the same piece over and over again ....
14:35:00 <psi> dons, does that mean the top item in "darcs changes"?
14:35:01 <ADEpt> dons: I think that Cabal comes with ghc, right?
14:35:21 <xerox> Is there a way to avoid GHC complaining about undefined somethings in "let a = something" ?
14:35:27 <dons> psi, yep.
14:35:30 <SyntaxNinja> dons: have you checked out cabal-install yet?
14:35:31 <psi> Tue Nov 29 12:19:58 CET 2005  Don Stewart <dons@cse.unsw.edu.au>
14:35:31 <dons> trying to work out which version you have.
14:35:31 <psi>   * Use snprintf(3), instead of Text.Printf. kick 25% allocs of ui
14:35:35 <SyntaxNinja> ADEpt: an old version, yes. 
14:35:41 <dons> psi, ah. ok.
14:35:53 <kosmikus> xerox: something = undefined
14:36:02 <dons> psi, ok then, what OS, what arch?
14:36:05 <dons> which gcc.
14:36:19 <psi> dons, ubuntu ppc, gcc 4.0.2
14:36:27 <dons> ppc. hmm. gcc 4.0.2. hmm.
14:36:33 <SamB> dons: snprintf? ouch!
14:36:33 <psi> :)
14:36:41 <dons> bah.
14:36:56 <xerox> see = undefined
14:36:56 <xerox> so = Just $ let me = see in map
14:37:01 <psi> is gcc 4 icky? i have 3.3 installed as well.
14:37:03 * ADEpt does sudo apt-get install libghc6-cabal-dev
14:37:12 * xerox should stop Haskell poetry attempts... shouldn't he?
14:37:13 <ADEpt> SyntaxNinja: this should help, right?
14:37:32 <dons> psi, we could try that. could you do: darcs unrecord ; darcs revert --all ?
14:37:40 <dons> so just unrecord the latest patch
14:37:58 <dons> though I think that's unlikely to be the cause
14:38:48 <dons> SyntaxNinja, cabal-install. No?
14:39:04 <ADEpt> I wonder if it could also be the case of non-buildable cabal-get
14:40:26 <SamB> ADEpt: I built my own cabal, personally
14:40:42 * SamB *really* goes to walk dog
14:40:48 <ADEpt> SamB: shh. Remember, you are out walking the dog :)
14:40:51 <psi> dons: so i type 'y' for the first patch, and then 'n' an additional 92 times? :)
14:41:01 <dons> no, 'y' then 'd' (for done)
14:41:11 <psi> ah
14:41:14 <dons> :)
14:42:00 <ADEpt> dons: first time I that THAT question, I had repo with 280+ patches and no irc. Somwhere around 30th patch it dawned on me to press '?'
14:42:08 <SamB> ADEpt: the trouble is, I keep forgetting.
14:42:16 * xerox is hoping to find a way to finish "who = let the = do {gs out} ..." but it seems so hard.
14:42:17 * SamB goes to finish putting on his shoe
14:43:09 <ADEpt> SamB: forgetting the dog??
14:43:58 <SamB> ADEpt: forgetting that my shoes won't magically appear where I want them, more like
14:44:15 <ADEpt> SamB: well, that's what the dog for :)
14:44:26 <ADEpt> SamB: to magically bring you your shoes
14:44:38 * ADEpt is a cat person, however, so he is not sure
14:44:38 <psi> dons, didn't help
14:45:02 <SamB> the dog isn't allowed upstairs
14:45:07 <astrolabe> ghc doesn't seem to like me importing both Array and Data.Array.Diff   any hints please.
14:45:19 <dons> psi, ok. good. then I can write ffi bindings :) I'll log on to a mac today, and see if I can build it there.
14:45:23 <dons> psi, also, do you get a core dump?
14:45:29 <SamB> anyhow, I've got me & the dog all geared up and everything now
14:45:36 <psi> dons, i also noticed that ./Setup.lhs install doesn't set the executable bit on the binary
14:45:46 <dons> oh, that's weird.
14:45:55 <dons> Cabal playing funny tricks?
14:46:03 <psi> no idea
14:46:07 <dons> since it can't be my fault
14:46:32 <dons> ah i love cabal. all the blame is shifted to someone else when builds fail.
14:46:37 <psi> i have a core dump
14:46:58 <dons> any info about where the error occured in a : gdb -c hmp3.core dist/build/hmp3/hmp3
14:47:45 <ADEpt> astrolabe: The only time i tried to use Array.Diff everything was fine. What have you got?
14:47:52 <psi> dons, getline it seems
14:48:05 <psi> (gdb) bt
14:48:05 <psi> #0  0x1004e504 in ?? ()
14:48:05 <psi> #1  0x104770e8 in getline ()
14:48:09 <xerox> ahah
14:48:12 <xerox> to = {- be -} or [not to {- be -}]
14:48:18 * xerox giggles for his poetry
14:48:30 <psi> + some more, i don't know if it's relevant
14:48:38 <dons> i'll have to think about that psi -- interesting.
14:48:56 <dons> if  I can't reproduce it on the mac, i'll get back to you.
14:48:59 <astrolabe> ADEpt: errors like 'Ambiguous occurrence '!' '  I guess it's a clash between Array and Data.Array.Diff, but I don't know how to avoid it.
14:49:07 <psi> dons, ok :) thanks
14:49:09 <ADEpt> dons: aha! it builds. I'll try it tomorrow 
14:49:32 <xerox> This was nice, wasn't it?
14:49:41 <xerox> I mean, to :: Bool, and it's an infinite loop!
14:49:41 <ADEpt> astrolabe: and with -Wall?
14:49:45 <dons> very nice xerox :)
14:49:48 * jethr0 's back from stargate atlantis ;-)
14:49:56 <xerox> dons: hehe, thanks!
14:49:58 <dons> ADEpt, good.
14:50:23 <xerox> It's like saying, the answer is either True or False
14:50:27 <xerox> but you can't find it.
14:51:51 <astrolabe> ADEpt: Ah it seems ok if I just don't import Array.  Thanks for your help.
14:51:52 <xerox> (because it's an infinite loop)
14:53:19 <xerox> Goodnight.
14:53:44 <jethr0> @localtime xerox
14:53:45 <lambdabot> Local time for xerox is Tue Nov 29 23:53:23 2005
14:53:46 <jethr0> n8
14:54:00 <jethr0> @lambdabot
14:54:00 <lambdabot> Unknown command, try @listcommands.
14:54:04 <jethr0> @listcommands
14:54:04 <lambdabot> use listcommands [module|command], please. Modules are:
14:54:04 <lambdabot> babel base code dice dict dummy dynamic elite fact haddock help hoogle
14:54:04 <lambdabot> karma localtime more pl plugs poll quote search seen spell state system
14:54:04 <lambdabot> todo topic type version vixen where
14:57:36 <ADEpt> 'night
14:57:43 <ADEpt> @localtime SamB
14:57:44 <lambdabot> Local time for SamB is Tue Nov 29 17:58:15
15:02:43 <int80_h> minion, archives
15:02:54 <int80_h> bah
15:03:03 <int80_h> what's the name of the daemon here?
15:04:01 <astrolabe> @where archives
15:04:01 <lambdabot> I know nothing about archives.
15:04:16 <int80_h> @where logs
15:04:17 <lambdabot> I know nothing about logs.
15:04:21 <int80_h> waaah
15:04:30 <int80_h> give me logs :)
15:04:36 <dons> anyone know how to rewrite dynamic references in objects on the mac? I want to rewrite a reference to GMP.framework/Versions/A/GMP to /Users/dons/lib/libgmp  - but I've forgotten how I did this last time :S
15:04:41 * int80_h thinks his problem may have been answered earlier
15:04:49 <astrolabe> int80_h: you could look at the channel intro
15:06:01 <int80_h> good god, that's genius!
15:06:53 <int80_h> hmm I don't see any mention of the logs in the topic
15:07:01 <int80_h> oh wait nwm
15:07:41 <astrolabe> @where+ logs http://tunes.org/~nef/logs/haskell/
15:07:41 <lambdabot> logs ~> http://tunes.org/~nef/logs/haskell/
15:08:16 * dons hunts for link editor flags
15:14:28 * SamB only ever imports Array from Data.Array these days
15:15:09 <dons> who needs visual editors or stream editors. all i want is my link editor!
15:15:52 <SamB> dons: what are you going to edit text files in?
15:16:41 <dons> I'll rewrite 'echo', so that 'echo foo' edits the file the way I require.
15:16:47 <dons> rewrite the links in echo ;)
15:17:00 <dons> it's a whole new paradigm! ;)
15:17:30 * SamB thinks dons is going nuts
15:18:26 * boegel|home boings
15:18:52 * SamB doesn't think his client is boing-compliant
15:19:34 <dons> it mustn't support boing-0.1 protocol
15:19:40 <dons> it's in an rfc!
15:19:59 <SamB> dons: is it an IRC extension?
15:21:43 * boegel|home tries to figure out ICA
15:22:13 <astrolabe> independent component analysis?
15:22:26 <boegel|home> astrolabe: yes
15:22:39 <boegel|home> I'm comparing it with PCA
15:22:41 <astrolabe> I do that at work
15:22:46 <boegel|home> astrolabe: familiar with it ?
15:22:49 <boegel|home> oh cool
15:22:54 <boegel|home> let me msg you
15:22:57 <astrolabe> I've even invented an algorithm
15:24:30 <boegel|home> astrolabe: check pm, don't want to spoil the fun in #haskell
15:24:48 <astrolabe> boegel|home: I've been talking to you there
15:24:52 <astrolabe> can't you see it?
15:25:06 <boegel|home> astrolabe: nope... you should make sure you're talking to boegel|home , not boegel :)
15:25:28 <astrolabe> You said 'hello :)'
15:25:33 <boegel|home> oh, you haven't identified, that's the problem...
15:25:37 <astrolabe> and I replied
15:25:39 <astrolabe> oh
15:25:39 <boegel|home> new freenode policy
15:25:57 <boegel|home> astrolabe: to make things easy, just join #ica :)
15:26:08 <astrolabe> Is that the ListServ thing?
15:26:35 <boegel|home> nickserv
15:26:54 <astrolabe> Ah right
15:28:07 <joelr1> howdy folks
15:28:09 <astrolabe> it says the nickname astrolabe is already registered.  But I registered it!
15:28:23 <joelr1>        when (cmd /= SrvHandshake {} ) $
15:28:23 <joelr1>             fail $ "startPokerClient: " ++ show cmd
15:28:48 <joelr1> is there a way to do this? if i use a case then i get a warning about the non-exhaustive pattern matching
15:29:07 <joelr1> any way to work around that? i want to fail if cmd matches a constructor and do nothing otherwise
15:29:24 <dons> how could it not match a constructor?
15:29:31 <dons> doesn't static typing ensure this?
15:29:36 <joelr1> dons: you think this would just work?
15:29:44 <joelr1> dons: i thought you could only do pattern matching in a case
15:30:01 <joelr1> cmd can be one of, say, 200 constructors
15:30:02 <dons> you can eval any pure computatoin in a case, and pattern match the result
15:30:14 <SamB> joelr1: you want to fail only if it isn't bottom?
15:30:17 <dons> and you want to check it is the SrvHandshake?
15:30:19 <joelr1> dons: yes, but i only care to trigger fail when it does not match
15:30:35 <dons> you can't use /= like this. but you can use case
15:30:45 <joelr1> yes, i want to check if it's the SrvHandshake and do nothing otherwise. i know i can use case but
15:30:55 <joelr1> i get the non-exhaustive pattern matching warning
15:30:58 <SamB> joelr1: _!
15:30:58 <joelr1> how do i work around that/
15:31:00 <dons> case cmd of { SrvHandshake {} -> ... ; _ -> return () } 
15:31:35 <joelr1> dons: so return () in a case does nothing apart from just returning from a case, right? since it's not a real "return"
15:31:48 <dons> it returns the unit value
15:31:53 <joelr1> dons: cause i want to continue my monad if i'm not failing
15:31:59 <dons> which is also what 'when' returns if it doessn't match in the condition
15:32:05 <SamB> joelr1: it doesn't return past the case
15:32:10 <joelr1> dons: aha
15:32:14 <joelr1> interesting feature
15:32:17 <SamB> you can say return () at the top of a do
15:32:18 <dons> it's not throwing an exceptionn or anything.
15:32:19 <joelr1> i live and i learn
15:32:34 <SamB> and it won't do a thing
15:32:36 <dons> 'fail' however, would throw something, out to the inner most catch
15:32:40 <joelr1> i thought return in the case was like return in the do
15:32:52 <dons> it is, from the current expr, which is just a case ;)
15:33:00 <dons> just the lhs of the ->
15:33:03 <joelr1> so if i had return in the catch then it would return from the encompassing expression
15:33:05 <dons> rhs/
15:33:06 <joelr1> cool
15:33:08 <joelr1> thanks
15:33:21 <SamB> > do return (); return True :: Maybe Bool
15:33:22 <lambdabot> Just True
15:33:44 <dons> SamB tries to confuse people ;)
15:33:48 <SamB> I mean, its not like the do is real or anything
15:33:55 <SamB> > return () >> return True :: Maybe Bool
15:33:56 <lambdabot> Just True
15:34:02 <joelr1> :-)
15:34:14 <joelr1> ok, thank you y'all
15:34:31 <dons> when == if cond then act else return ()
15:34:40 <dons> just saves writing that else branch
15:34:50 <SamB> dons: also then
15:34:52 <joelr1> dons: right. thanks
15:35:59 <dons> when              :: (Monad m) => Bool -> m () -> m ()
15:36:01 <dons> when p s          =  if p then s else return ()
15:36:14 <dons> unless            :: (Monad m) => Bool -> m () -> m ()
15:36:14 <dons> unless p s        =  if p then return () else s
15:36:20 <dons> little used, but useful!
15:36:26 * SamB would write the latter
15:36:42 <SamB> unless = when . not
15:36:59 <dons> @type Control.Monad.when . not
15:37:00 <lambdabot> forall (m :: * -> *). (Monad m) => Bool -> m () -> m ()
15:37:13 <SamB> @pl if p then return () else s
15:37:13 <lambdabot> if' p return s
15:37:29 <SamB> hmm...
15:37:31 <SamB> @pl ()
15:37:32 <lambdabot> ()
15:37:37 <SamB> @pl return ()
15:37:38 <lambdabot> return
15:37:41 <SamB> aha!
15:37:54 <SamB> bug, I say!
15:37:56 <SamB> bug!
15:38:43 <dons> hmm
15:38:55 <Frederick> yo folks
15:39:10 <SyntaxNinja> hi Frederick
15:39:28 <SamB> Frederick: hello stranger
15:51:49 <lisppaste2> int80_h pasted "4.14 from Thompson" at http://paste.lisp.org/display/14134
15:52:09 <Frederick> does anyone knows a good sample of earleys algorithm?
15:52:14 <int80_h> hi guys, any help with this would be much appreciated
15:52:14 <Frederick> except from wikipedia :p
15:54:09 <jethr0> @google earleys algorithm
15:54:11 <lambdabot> http://www.sycamoreauctions.com/10139067/
15:54:13 <jethr0> *gg*
15:54:29 * jethr0 was just kidding
15:54:54 * jethr0 is enfatuatad with these cool bot features
15:55:11 <jethr0> in*
15:55:54 <autrijus> @seen SyntaxNinja
15:55:55 <lambdabot> SyntaxNinja is in #haskell and #haskell-blah. Last spoke 16 minutes and
15:55:55 <lambdabot> 44 seconds ago.
15:56:04 <dons> psi, ok. hmp3 doesn't segfault on the Mac OSX. It builds and runs quite ok.
15:56:10 <dons> heya autrijus
15:56:23 <int80_h> dons can you help me out with a problem?
15:56:34 <autrijus> yo dons. 2 more days and I'll be in .au!
15:56:54 <SamB> int80_h: remind us what the problem is about
15:56:56 <psi> dons, what compiler?
15:57:16 <autrijus> SyntaxNinja: I've started to use the hs' trac but I can't seem to find the login/password; the ml passwd doesn't seem to work.
15:57:37 <int80_h> http://paste.lisp.org/display/14134
15:57:39 <dons> $ gcc --version
15:57:40 <dons> powerpc-apple-darwin8-gcc-4.0.0 (GCC) 4.0.0
15:57:50 <dons> with ghc 6.4.1 and Cabal from darcs
15:57:50 <int80_h> samB I'm doing a problem out of Thompson
15:57:53 <Lemmih> int80_h: 'evenN m-1' is not 'evenN (m-1)'.
15:58:05 <int80_h> eep
15:58:12 <psi> i have ghc 6.4
15:58:24 <dons> autrijus, cool!
15:58:36 <dons> will you have email access? (I guess so)
15:58:54 <dons> psi, 6.4 should be ok.
15:59:06 <dons> SamB uses 6.4 with no worries on a linux/x86 box
15:59:10 <autrijus> I think I will. have you received my mail re my cell #?
15:59:13 <tic> int80_h, function applications binds "stronger"
15:59:17 <dons> yep.
15:59:24 <SamB> well, I need -fasm
15:59:35 <autrijus> cool then, we should have no problem finding each other
15:59:36 <dons> SamB?
15:59:44 <SamB> dons: or don't I?
15:59:55 <int80_h> okay I will make some changes
16:00:03 <dons> SamB, you shouldn't need to touch the .ccabal file at all on linux.
16:00:11 <SamB> huh
16:00:29 <dons> there was a brief hour or so where Binary.hs was borked on linux, but that has been fixed.
16:00:30 <dons> (i.e. ghc spews up on it)
16:01:26 <dons> psi, is there any chance I could log on to your box to do some testing? I don't have access to any ppc/linux box.
16:01:42 <jethr0> @where+ pugs http://www.pugscode.org/
16:01:43 <lambdabot> pugs ~> http://www.pugscode.org/
16:01:46 <jethr0> @where pugs
16:01:46 <lambdabot> http://www.pugscode.org/
16:01:53 <jethr0> *ahh*
16:02:06 <int80_h> okay now I return a zero no matter what
16:02:11 <psi> dons, sure. i just need to install sshd.
16:02:13 <int80_h> sounds like a logic problem
16:02:24 <dons> psi, yikes. ok :)
16:02:36 <SamB> int80_h: I think you need to follow the algorithm more closely
16:03:05 <int80_h> SamB should I make these three functions one?
16:03:09 <SamB> yes
16:03:14 <int80_h> hrm
16:03:20 <int80_h> am I on the right track?
16:03:22 <SamB> also, don't only do powers of two
16:03:33 <SamB> its too confusing that way
16:03:39 <int80_h> okay
16:04:10 <SamB> I mean, if you do that, you have 2* everywhere and can't tell what 2* is what
16:04:16 <int80_h> hmm well see I thought doing powers of two was part of the algorithm
16:04:55 <int80_h> okay I need to think on it then
16:04:59 <int80_h> thanks :)
16:05:48 <SamB> theres no particular reason to prefer two
16:06:25 * SamB thinks int80_h came for help with this before
16:06:36 <int80_h> but 2^n is defined as 2 ^ (2*m)
16:06:46 <int80_h> yeah I did but I can't look up the logs right now
16:07:00 <int80_h> I'm waiting for my login password. It's been about an hour
16:07:06 <SamB> ah
16:07:07 <int80_h> so I took a chance and asked again
16:07:38 <SamB> well, I still remember what my code looked like when I implemented it the last time ;-)
16:08:02 <int80_h> so if 2^n is defined that way, why would I not apply the definition as I see it? Which is in terms of powers of two
16:08:51 <SamB> well, you could call it a
16:09:04 <int80_h> yes yes?
16:09:17 <SamB> and then say pow2 = pow 2
16:09:22 <SamB> or whatever
16:09:44 <int80_h> I lost you... you said "<SamB> well, you could call it a
16:09:49 <int80_h> a what?
16:09:51 <SamB> "a"
16:09:54 <int80_h> ooooh
16:09:56 <SamB> maybe b would be better
16:10:16 <int80_h> ah reuse, reduce, recycle
16:10:49 <int80_h> crap the server I was coding hugs on crapped out
16:10:55 <int80_h> crappy crap crap
16:11:44 <SamB> I remember I used guards and even (or was it odd?)
16:11:57 <SamB> I can't seem to find the file
16:12:05 <int80_h> there is a function called even?
16:12:11 <SamB> > even 2
16:12:12 <lambdabot> True
16:12:55 <SamB> which is to say, yes ;-)
16:19:49 * SamB wonders if he killed the channel
16:20:03 <dons> oh, I see ghc 6.4 emits bogus import warnings
16:20:18 <dons> I really find those annoying:                imported from System.IO at Lexer.hs:31:25-26
16:20:21 <dons>                imported from Prelude at Implicit import declaration
16:20:27 <SamB> dons: in what way are they actually bogus?
16:20:30 <SamB> annoying, yes.
16:20:37 <SamB> but they also make perfect sense!
16:21:02 <dons> but they're also no present in 6.4.1, or <=6.2.2
16:21:06 <dons> just a 6.4-ism
16:21:18 <dons> since going around hiding Prelude is annoying
16:21:31 <MarcWeber> Can you give me an example of how to print a number formatted by showIntAtBase?
16:21:46 <SamB> that explains why you haven't done it
16:21:52 <dons> yep.
16:22:22 <SamB> actually, I had my explanation as soon as you said "bogus import warnings"
16:22:42 <Lemmih> showIntAtBase 2 (Char.intToDigit) 23 ""
16:22:42 <Lemmih> "10111"
16:24:34 <MarcWeber> Lemmih: Can you tell me where to find the difinition of ShowS?
16:24:51 <dons> @index ShowS
16:24:51 <lambdabot> Text.Show, Prelude
16:25:12 <Lemmih> type ShowS = String -> String
16:26:00 <SamB> @hoogle ShowS -> ShowS -> ShowS
16:26:02 <lambdabot> No matches, try a more general search
16:26:08 <jethr0> > showIntAtBase 2 (Char.intToDigit) 23 ""
16:26:10 <lambdabot> "10111"
16:26:14 * SamB becomes upset
16:26:15 <Lemmih> MarcWeber: You can ask GHCi stuff like that.
16:26:16 <jethr0> *cool*
16:26:20 <SamB> @hoogle ShowS
16:26:21 <lambdabot> Prelude.ShowS :: String -> String
16:26:21 <lambdabot> Prelude.shows :: Show a => a -> ShowS
16:26:21 <lambdabot> Text.Show.ShowS :: String -> String
16:26:34 <SamB> um, no!
16:26:42 <SamB> Prelude.ShowS = String -> String
16:26:49 <dons> Cabal rocks. I really couldn't have written such a portable Makefile without debugging, using GNU make.
16:27:01 <dons> this thing just works :)
16:27:07 <dons> @karma+ SyntaxNinja
16:27:08 <MarcWeber> Lemmih: I know.. but I couldn't find it using hasktags.. so I simply forgot to ask ghci for the type..
16:27:08 <lambdabot> SyntaxNinja's karma raised to 4.
16:27:19 <jethr0> jeje
16:27:39 <SamB> dons: I only wish it wouldn't insist on sticking its objects in that strange directory...
16:27:50 <eivuokko> dons, yeah, it's very cool :)  *and it works in Windows ;) *
16:27:57 <eivuokko> SamB, You can change that, tho..
16:28:01 <dons> oh well. it's better than sticking it in $pwd, SamB.
16:28:19 <SamB> dons: not if I want to run ghci it isn't!
16:28:33 <dons> true. then you need -idist/build/foo/
16:28:38 <dons> true. then you need -idist/build/foo/foo/
16:28:47 <SamB> I think I tried that
16:29:04 <dons> just make sure -i points to the dir with the .hi files in it. works for me.
16:29:07 <SamB> also, why does it need to compile the same modules over again for different programs?
16:29:23 <dons> I think that's a known bug
16:29:37 <Lemmih> You can't avoid that safely.
16:29:49 <eivuokko> Uhm.  It's so-so.  If it didn't how'd you make them dependent on preprocessor symbols
16:29:50 * SamB thought it was a direct result of keeping files in -idist/build/foo...
16:30:13 <SamB> eivuokko: use the same preprocessor symbols throughout?
16:31:00 <SamB> of course, a better solution might be multiple mains...
16:31:06 <SamB> er.
16:31:06 <SamB> no.
16:31:12 <eivuokko> SamB, maybe that was considered too risky to suppose..
16:31:17 * SamB is confused as to why he just said that
16:32:37 <eivuokko> And anyway, current trend on last few years on build systems have been that rather more work than possibly inconsistent build.
16:33:35 <SamB> eivuokko: maybe I'd just like an easy way to claim multiple executables as being of the same program or something...
16:33:59 <MarcWeber> Lemmih, dons Where can I find the definition of ShowS? I can only find the exporting line in base/Prelude.hs
16:34:13 <dons> GHC.Show.hs probably
16:34:24 <dons> Show.lhs
16:34:34 <eivuokko> SamB, :)
16:34:39 <dons> here, as Lemmih stated: 
16:34:40 <dons> -- | The @shows@ functions return a function that prepends the
16:34:40 <dons> -- output 'String' to an existing 'String'.  This allows constant-time
16:34:40 <dons> -- concatenation of results using function composition.
16:34:40 <dons> type ShowS = String -> String
16:34:43 <SamB> eivuokko: anyhow, the poeple who come up with this stuff should be forced to use my computer for awhile
16:35:02 <dons> ah, it works like DLists do, iirc.
16:35:19 <jethr0> @localmachine samb
16:35:19 <lambdabot> Unknown command, try @listcommands.
16:35:21 <jethr0> ;-)
16:35:38 <MarcWeber> dons: Can I ask hasktags to also add these definitions? I would save a lot of time..
16:36:03 <dons> maybe. you'd need the fptools src on your box. try it!
16:36:21 <eivuokko> Samb, Uhm, I don't know if that'd help...
16:36:24 * dons doesn't use hasktag. just :new ~/fptools/libraries/base/GHC/Show.lhs ;)
16:36:38 <SamB> eivuokko: I might at least get some more RAM out of it!
16:36:48 <eivuokko> SamB, Heh
16:37:17 <eivuokko> Isn't ram for pc's dirt cheap nowdays?
16:37:26 <SamB> I suppose
16:37:38 <SamB> I'd have to find the exact type I need, though
16:37:45 <MarcWeber> dons: Ups.. I forgot to also add the lhs files.. Thanks!
16:37:46 <eivuokko> o.O
16:38:01 <SamB> and I don't think my computer can handle more than about another 128 MiB stick
16:38:09 <jethr0> @google ddr ram price
16:38:10 <lambdabot> http://www.ramseeker.com/
16:38:17 <SamB> or if it can, I'd need to get it in 256 MiB sticks
16:38:44 <SamB> it would probably be cheaper to get a new old machine with more RAM ;-)
16:38:47 <jethr0> samb: you computer is rather old, isn't it?
16:38:56 <jethr0> your*
16:39:23 <SamB> yup
16:39:36 <SamB> Its a PII 450 MHz with 256 MiB RAM
16:40:00 <eivuokko> Ouch.
16:40:03 <jethr0> well, but that should easily handle up to 1gib of ram...
16:40:30 <SamB> jethr0: the mobo doesn't go that high
16:40:36 <jethr0> *arg*
16:41:21 <MarcWeber> Lemmih: Which purpose does the last string argument have of showIntAtBase?
16:43:43 <dons> @remember ghc Unable to mmap( MAP_FIXED ) for Jump Islands
16:44:22 <SamB> > showIntAtBase 2 (Char.intToDigit) 23 ", World!"
16:44:23 <lambdabot> "10111, World!"
16:46:06 <jethr0> well, here in germany, mobo + cpu + ram would cost you $180 or so (duron 1800, 500mib)
16:46:45 <Lemmih> MarcWeber: Concatenating two ShowS's is fast.
16:48:19 <jethr0> even more like $140.
16:48:37 <SamB> jethr0: but then I'd need a case...
16:48:55 <jethr0> samb: you have a case, don't you ;-)
16:48:57 <MarcWeber> Oh.. and you don't need to use ++ .. Thanks!
16:49:16 <SamB> jethr0: and I thought you didn't use $s in germany?
16:49:20 <jethr0> buying a computer one always spend more than one wanted to
16:49:35 <SamB> jethr0: what does the mobo come with?
16:49:41 <jethr0> we don't, using US$ as world currency *g*
16:49:58 <jethr0> well, i just looked up the cheapest components i could find...
16:50:27 <SamB> jethr0: I don't know if I have a *standard* case
16:50:27 <SamB> its one of those DELL dealies
16:50:38 <jethr0> lan, sound, looks like no video.
16:51:16 <jethr0> na, single components. never mind, just wanted to give you an expression how relatively affordable computers have become since your PII *g*
16:51:23 <jethr0> impression
16:51:35 <SamB> well, I suppose I could use my Voodoo 3 still...
16:52:02 <jethr0> but for 7$ more it'll also have video onboard...
16:53:39 <SamB> jethr0: the computer was about $200, iirc
16:54:07 <jethr0> you mean yours? when did you buy it?
16:54:08 <SamB> I think I paid $50 for the 256 MiB of RAM
16:55:11 <SamB> we got it used
16:55:17 <SamB> in like 2003 or something
16:55:54 <jethr0> cool, i am using a p2 celeron 450 myself, but it really sucks most when compiling...
16:56:04 <jethr0> AND i have 500mib of ram
16:58:41 <SamB> dons: hmp3 ate my db!
16:58:51 * jethr0 can't shake the feeling that he just killed the channel...
17:00:11 <dons> SamB, how so?
17:00:14 <SamB> jethr0: what happened to the other 12 MiB?
17:00:37 <dons> or did i change the format, and not put in a heads up. did you just rebuild?
17:01:17 <jethr0> ^_^
17:01:25 <jethr0> damn, i might have been ripped of!
17:01:38 <dons> this ppc/linux bug is evil. ghc's doing something wrong I think, since it crashes before the first line of main() is run.
17:02:36 <eivuokko> Uh.  Sounds like mislinked runtimes.
17:03:03 <dons> not the C main, the haskell main, which happens after a bunch of rts stuff happens
17:03:12 <eivuokko> Ah.
17:03:15 <SamB> dons: actually it keeps dying with "user error (keypad)" as soon as I start it
17:03:22 <dons> SamB, oh nice.
17:03:30 <dons> latest code?
17:03:59 <SamB> dons: maybe I really do need that -fasm?
17:04:09 <dons> ah, yes youu do!
17:04:14 <dons> I forgot you were on 6.4
17:04:16 <dons> silly me.
17:04:18 <jethr0> ok, gotta go. good night.
17:04:19 <dons> @karma- dons
17:04:20 <lambdabot> You can't change your own karma, silly.
17:04:37 <SamB> dons: I even mentioned it in context!
17:04:53 <dons> yes, I'll have to add this to the readme as well.
17:05:46 <SamB> maybe you should just stick it in the cabal file?
17:06:08 <Cale> 1152 upgraded, 128 newly installed, 75 to remove and 24 not upgraded -- perhaps I should be doing these updates slightly more often :)
17:06:48 <dons> SamB, yeah, ok. also I bet this is (half) the problem on 6.4 ppc/linux
17:07:10 <dons> gour I think reported that yi can't be run with either -fasm or -fvia-C with 6.4, only 6.4.1
17:07:13 <dons> bet it's the same bug.
17:07:20 <SamB> dons: also, you could work on making it not eat your database when you accidentally build without -fasm
17:07:25 <dons> due to a) code gen bug, and b) ffi bug in ghc.
17:07:36 <dons> SamB, you mean when it segfaults?
17:07:38 <dons> yes.
17:07:56 <dons> is ghc 6.4.1 in debian? 
17:08:08 <SamB> dons: no, I mean when it says:
17:08:08 <SamB> user error (keypad)
17:08:20 <dons> oh. ok. yeah. that's weird.
17:08:32 <dons> good one.
17:09:21 <SamB> now its segfaulting...
17:09:30 <SamB> but I just need to build it right...
17:10:32 <dons> yeah, that's a good idea.
17:10:39 <dons> since buliding it wrong is wrong.
17:11:01 <SamB> however, eating databases is bad in any case whatsoever!
17:11:05 <dons> now, why would it eat the .hmp3db. 
17:11:10 <dons> strange.
17:11:19 <dons> yes. dbs should not be eaten.
17:11:23 <SamB> dons: well I guess you'll just have to build it wrong and figure it out!
17:11:35 <dons> yep, I'll do that
17:11:46 <SamB> but I'll give you a hint: it left me a not-long-enough one
17:12:18 <dons> hmm. ok. i should probably bracket the state writer
17:12:28 <SamB> and as I suspected, it is actually of length 0
17:12:58 <SamB> you should write it to a tempfile and rename it over after you finish
17:12:58 <SamB> maybe
17:15:05 * SamB wonders what LINES might be
17:15:31 <dons> ncurses var
17:17:35 <SamB> dons: oh.
17:17:40 <SamB> I see.
17:18:01 <SamB> GDB mistook it for a return address, apparantly
17:19:01 <dons> are you trying debug that keymap error? it's a known bug in the generation of calls to the ffi.
17:19:39 * SamB just runs ./Setup.hs clean like a good boy and rebuilds
17:20:16 <dons> gee, -fasm is really a lot faster than -fvia-C now
17:20:46 <SamB> dons: maybe GCC got slower
17:22:27 <dons> ok, I've made -fasm the default now. that should help out 6.4.
17:24:46 <SamB> nice
17:38:24 <dons> SamB, ah I think i've worked out why .hmp3db gets zeroed.
17:38:52 <dons> the ui is inited before the state is read. but then the ui crashes due to the ffi bug, which causes a shutdown. the shutdown flushes the state to disk..
17:38:58 <dons> but it's empty!
17:39:04 <dons> easy to fix.
17:40:22 <SamB> dons: ah
18:11:08 <araujo> There exist some 'standar' way of naming combinators?
18:16:14 <Cale> araujo: hm?
18:18:25 <Cale> there are combinators without normal forms, and it's undecidable whether a general combinatory term has a normal form
18:18:47 <Cale> but there are a bunch of common combinators which have moderately standard names
18:19:10 <Cale> S and K certainly :)
18:26:02 <autrijus> @pl \x y -> x ++ de y
18:26:03 <lambdabot> (. de) . (++)
18:50:21 <interferon> has anyone tried out the Frag first-person shooter in haskell?  compilation fails for me with "Type constructor or class not in scope: `PixelData'"
18:50:51 <Lemmih> Frag depends on >=GHC-6.4
18:51:10 <dons> I should add that to the wiki if it isn't already
18:51:14 <dons> @hawiki Frag
18:51:14 <lambdabot> http://www.haskell.org/hawiki/Frag
18:51:16 <Lemmih> (or rather, HOpenGL-2.0)
18:51:24 <dons> yep. that's it.
18:53:38 <interferon> Lemmih, ah thanks!
19:00:55 <interferon> dons, i can't edit the wiki but you ought to list ghc 2.6 as a separate requirement
19:01:40 <dons> 6.4?
19:01:50 <interferon> err, yes
19:02:02 <dons> it's not a separate requirement, is it? just HOpenGL-2.0
19:02:14 <dons> so you could have 6.2.2, and install your own HOpenGL.
19:02:33 <Lemmih> Is it even feasible to install HOpenGL-2.0 with 6.2?
19:02:54 <dons> not sure.
19:02:59 <Lemmih> Isn't it only distributed in the $fptools?
19:03:10 <dons> oh. hmm. good point. I wonde.r
19:03:23 <dons> it's certainly easier to just grab 6.4.x
19:03:29 <dons> I'll make that explicit then
19:08:18 <Cale> interferon: you can edit the wiki if you log in
19:13:43 <interferon> Cale, ah
19:15:11 <SamB> perhaps that ought to be a made clear?
19:15:29 <SamB> is shapr still the wiki-master?
19:35:34 <JohnMeacham> howdy.
19:37:01 <SamB> JohnMeacham: hello
19:37:08 <SamB> oh, where do you read about GRIN?
19:37:16 * SamB isn't feeling lucky today
19:44:13 <mokv> hi
19:45:04 <Lemmih> Hi mokv.
19:47:21 <SamB> I wish to learn GRINs secrets?
19:47:35 <SamB> s/\?/!/
19:47:50 <SamB> Where shall I turn?
19:49:54 <Lemmih> The GRIN paper, perhaps?
19:50:01 <SamB> hmm.
19:50:05 <SamB> @google GRIN paper
19:50:06 <lambdabot> http://www.dgrin.com/archive/index.php/t-3657.html
19:50:33 <SamB> nope!
19:50:40 <SamB> still not feeling lucky.
19:51:16 <SamB> GRIN is not a very googlable name
19:51:49 <JohnMeacham> SamB search for boquist and grin
19:51:55 <JohnMeacham> @google boquist thesis grin
19:51:57 <lambdabot> http://www.cs.chalmers.se/~boquist/phd/
19:52:13 <JohnMeacham> there is a shorter paper on his home page which is more accesable too.
19:52:28 <SamB> JohnMeacham: okay.
19:52:40 <mokv> hi
19:53:00 <mokv> so i wanted to ask what do you haskellers think about rob pike's 5 rules of programming?
19:53:16 <SamB> @google rob pike's 5 rules of programming
19:53:17 <lambdabot> http://www.lysator.liu.se/c/pikestyle.html
19:53:34 <JohnMeacham> http://www.cs.chalmers.se/~boquist/ifl96.ps covers pretty much all the essentials and is a good overview.
19:53:59 <SamB> @where+ GRIN http://www.cs.chalmers.se/~boquist/ifl96-abstract.html
19:54:00 <lambdabot> grin ~> http://www.cs.chalmers.se/~boquist/ifl96-abstract.html
19:54:12 <SamB> @where GRIN
19:54:12 <lambdabot> http://www.cs.chalmers.se/~boquist/ifl96-abstract.html
19:56:33 * SamB hasn't seen the Algol 68 report
19:58:07 <mokv> the 5 rules are in chapter "Complexity"
19:58:28 <mokv> or here http://www.ece.utexas.edu/~adnan/pike.html
20:03:40 <SamB> mokv: that looks good
20:04:00 <SamB> and they wondered why we always go back to [], rather than using fancier datastructures!
20:04:57 <mokv> hmm
20:05:21 <mokv> SamB, i tend to do the same
20:05:56 <SamB> well, I mean, we'll use Maps where appropraite and whatnot
20:06:34 <SamB> personally I believe in the judicious use of GOTO ;-)
20:08:46 <mokv> does haskell even have goto? :D
20:09:11 <SamB> no ;-)
20:09:18 <SamB> thats for C ;-)
20:10:25 <fworp> i read some article somewhere about explicit recursion being allot like goto.
20:10:35 <SamB> I notice that Haskell encourages most of the things Pascal is mentioned as discouraging
20:12:02 <SamB> hmm, that stuff about includes hardly seems very relevant these days...
20:12:29 <dons> a tail call is a goto
20:12:55 <dons> so recursion is fast ;)
20:13:10 <SamB> only for some reason nobody has ever complained that tail calls make programs unreadable!
20:13:38 <dons> not function programs, surely.
20:14:03 <dons> in fact, here's the code: 
20:14:05 <dons> #define JMP_(cont)          \
20:14:06 <dons>     {                   \
20:14:06 <dons>       void *__target;           \
20:14:06 <dons>       __DISCARD__();            \
20:14:08 <dons>       __target = (void *)(cont);        \
20:14:10 <dons>       goto *__target;                   \
20:14:13 <dons>     }
20:14:15 <dons> it's a goto!
20:14:29 <dons> and a computed one at that :)
20:14:40 <SamB> couldn't we tell that from the name JMP_?
20:14:45 <dons> hehe
20:14:52 <SamB> I mean, its fairly mnemonic
20:15:04 <dons> well, except for the _ part
20:15:25 <fworp> i think the implication is that they are unstructured control flow. there are lots of recursive patterns that could be abstracted away as say, functions, or ifs and fors and all that. (or folds, or maps)
20:15:41 * fworp looks for the article
20:15:43 <SamB> fors? ick!
20:15:50 <SamB> fworp: which article?
20:15:54 <fworp> im looking
20:15:58 <SamB> goto considered harmful?
20:16:04 <SamB> @google goto considered harmful
20:16:05 <lambdabot> http://www.acm.org/classics/oct95/
20:17:12 <fworp> no, though the name of the paper/article is very similar to that one, something like "unstructured recursion considered harmful"
20:17:18 <SamB> ah
20:17:24 <SamB> no doubt a tribute
20:17:29 <SamB> or something like that
20:17:34 <rep> too many "considered harmful" articles
20:18:00 <SamB> rep: yes, but if it is about something equivalent to goto, it should have considered harmful in the name ;-)
20:18:09 <SamB> @google tail recursion considered harmfu
20:18:10 <lambdabot> http://dbkit02.it.lth.se/rss/showArchive.phtml?pid=38/
20:18:13 <SamB> @google tail recursion considered harmful
20:18:14 <lambdabot> http://portal.acm.org/citation.cfm?id=810196
20:18:32 <rep> i should write '"considered harmful" considered harmful'
20:18:38 <mokv> @google "considered harmful considered harmful"
20:18:39 <lambdabot> http://www.meyerweb.com/eric/comment/chech.html
20:18:41 <fworp> i think its been done :P
20:18:48 <SamB> rep: been done already ;-)
20:18:51 <rep> ah
20:19:12 <mokv> :D
20:19:18 <SamB> but nevertheless, if its about something equivalent to goto...
20:19:42 * dons likes RULE pragmas, and should remember to use them more often
20:19:44 <rep> goto can be useful
20:19:49 <SamB> dons: hehe
20:19:51 <rep> in c, at least
20:20:00 * SamB claims full responsibility
20:20:11 <SamB> (unjustly, of course)
20:20:50 <rep> i'm thinking of getting golden teeth
20:20:52 <rep> opinions?
20:21:12 <mokv> rep: want to look like a sicilian maffiaman?
20:21:24 <rep> well
20:21:30 <rep> i just want to look cool
20:22:56 <SamB> @google "tail recursion" "recursion considered harmful"
20:22:58 <lambdabot> http://www.cis.uab.edu/sloan/LectureNotes/CS303/Queues.ppt
20:23:05 <SamB> @google "recursion considered harmful"
20:23:06 <lambdabot> http://www.latrobe.edu.au/philosophy/phimvt/joy/faq1.html
20:24:10 <mokv> so golden teeth look cool?
20:24:27 <mokv> well it will be readily apparent you're rich
20:24:52 <mokv> rep: i'd rather cut my little finger though
20:25:06 <mokv> to look like a jakuza... jakuza are cool
20:25:09 <fworp> you could always get one of those 'grills'. they are like gold dentures, my brother bought a set
20:25:31 <rep> i'd rather not cut my little finger
20:25:36 <SamB> rep: spend the money on books
20:25:51 <rep> what books?
20:25:59 <SamB> fiction books!
20:26:05 <rep> meh
20:26:08 <mokv> no way
20:26:13 <rep> reading takes too much time :(
20:26:19 <SamB> lazy!
20:26:24 <mokv> spend it on steriods
20:26:32 <SamB> comic books, then!
20:26:37 <SamB> they go faster
20:26:41 <mokv> comic books are for kids
20:26:49 <SamB> meh!
20:27:11 * SamB refuses to believe it
20:27:29 <SamB> maybe you just read the wrong ones!
20:27:56 <mokv> what should i read
20:28:28 <SamB> there is apparantly a lot of nice manga
20:29:08 <mokv> like
20:29:22 <SamB> well, I liked chobits
20:29:36 <SamB> dunno if its been released in english though...
20:29:40 <mokv> hayashibara hikari mangas?
20:29:52 <SamB> I'm no expert ;-)
20:30:22 * SamB read a scanslation of chobits, FYI -- doesn't know japanese
20:30:28 <mokv> http://google.co.jp/images?q=hayashibara%20hikari
20:32:32 * dons wonders about a typeclassed binding to sprintf for FastStrings
20:33:21 <SamB> ghost in the shell is a nice science-fiction/something else manga
20:33:52 <mokv> you didnt get it samb
20:34:17 <mokv> chobits is fanservice
20:34:32 <SamB> no, I didn't!
20:34:39 <SamB> oh, well, there is a lot of that
20:34:51 <mokv> you didnt because you have safe search on
20:34:55 <mokv> in google images ;]
20:35:13 <SamB> no wonder
20:35:21 * SamB is afraid to turn it off
20:35:46 <mokv> yet you arent afraid to read manga like chobits
20:36:06 <mokv> its strange freenode even has a bot called chii
20:36:12 <mokv> /whois chii
20:37:33 <SamB> I notice it is in ##c and #twisted
20:37:37 <SamB> why might that be?
20:38:16 <mokv> its everywhere
20:38:54 <mokv> you dont get it...... ;(
20:39:01 * mokv thinks chobits is SICK!!
20:40:20 <SamB> mokv: maybe...
20:40:33 <rep> i hope the GOOG stock will go back up
20:41:12 <mokv> you hold google shares rep?
20:42:18 <cjb> GOOG went down?
20:42:21 <rep> options
20:43:12 <SamB> why did it go down?
20:43:22 <SamB> can Google tell you?
20:43:26 <mokv> because people realised google sucks
20:43:31 <SamB> if not, maybe thats why!
20:43:42 <mokv> ironic that a google search for GOOG links to yahoo anyways
20:43:54 <SamB> heh
20:45:04 <rep> SamB finance.yahoo.com will tell you
20:45:16 <rep> mokv i have options
20:45:21 <rep> cjb yes, almost 5%
20:45:52 <mokv> still 5% is within the usual flux
20:46:03 <cjb> Gosh.  I hadn't noticed going down before.  Anyone know why?
20:46:05 <rep> it's the biggest fall in the past year
20:46:13 <rep> cjb yes
20:46:27 <cjb> Other than, y'know, it being about $300 overvalued.
20:46:33 <rep> some analyst changed their opinion from "buy" to "hold"
20:49:19 <SamB> rep: don't you get paid just to keep stocks anyways?
20:50:01 <rep> SamB what do you mean?
20:50:44 <SamB> rep: you get to have a portion of the profits if you hold stock, right?
20:51:05 <mokv> he has options
20:51:07 <rep> SamB i don't hold stock
20:51:27 <SamB> rep: well, yes
20:51:30 <mokv> rep: you work at google?
20:51:30 <rep> are you talking about dividends?
20:51:32 <rep> mokv yes
20:51:36 <interferon> i got Frag to install and run, but i'm getting a framerate of about 3.  i have the opengl extensions mentioned on the page.  what could be the deal?
20:51:40 <SamB> that sounds like the word
20:51:40 <mokv> oh so that's why
20:51:55 <SamB> interferon: well, do you have GL acceleration?
20:51:56 <rep> SamB tech companies generally don't give out dividends
20:52:00 <SamB> rep: oh
20:52:06 <rep> SamB although MSFT did it recently
20:52:07 <interferon> SamB, how could i find out?
20:52:22 <SamB> what is the point of a stock which doesn't pay dividends?
20:52:27 <mokv> google is not in a very safe position
20:52:43 <rep> SamB speculation
20:52:43 <mokv> SamB, trading
20:53:19 <mokv> i mean, when google search got popular that was because it was the best around
20:53:24 <mokv> but things have changed
20:53:33 <nuffer> I'm looking for a non-mutable array
20:53:35 <mokv> for example this recent google base is quite lousy
20:53:37 <rep> mokv what's a better search engine?
20:53:41 <SamB> who is better now?
20:53:46 <nuffer> what am I looking for?'
20:53:46 <SamB> who is known?
20:53:52 <rep> yeah, i don't understand the point of google base
20:53:54 <mokv> they are about the same now
20:53:56 <mokv> all of them
20:53:58 <SamB> nuffer: an IArray
20:54:01 <mokv> google doesnt stand out at all
20:54:04 <SamB> @index IArray
20:54:05 <lambdabot> Data.Array.IArray, Data.Array.Unboxed, Data.Array.Diff
20:54:17 <interferon> google doesn't stand out at all?
20:54:18 <rep> mokv how about UI-wise?
20:54:34 <nuffer> hmmm
20:54:36 <SamB> a regular old Array will work
20:54:37 <mokv> rep, google's design looks a bit aged, but otherwise same
20:54:40 <SamB> @index Array
20:54:40 <lambdabot> Data.Array, Data.Array.IArray, Data.Array.Unboxed, Data.Array.Diff
20:54:48 <mokv> yahoo and msn are bloated
20:54:51 <nuffer> would an Array be smarter than an IArray?
20:54:57 <mokv> but only their main page
20:55:19 <rep> i like the ad placement in google better than msn's
20:55:24 <SamB> mokv: what does that have to do with it?
20:55:34 <SamB> what I want is results!
20:55:45 <mokv> SamB, results are about the same
20:55:46 <SamB> not just nice output pages
20:55:47 <rep> SamB if the results are the same, the UI matters
20:56:15 <SamB> also, I want my email and my usenet archives
20:56:28 <nuffer> also, can I use that to make a 2d array?
20:56:33 <nuffer> or do I need to use a jagged array?
20:56:41 <interferon> SamB, how can i find out if i have gl acceleration?
20:56:42 <SamB> nuffer: Array is an IArray
20:56:46 <rep> SamB don't both ms and yahoo also have those thing?
20:56:49 <rep> (as well as google)
20:56:58 <SamB> rep: usenet archives?
20:57:04 <SamB> I doubt it!
20:57:07 <rep> ah, maybe not usenet archives
20:57:13 <rep> but email, they do
20:57:20 <SamB> and I *hope* they don't have my email!
20:57:40 <rep> well i mean hotmail/yahoo mail/gmail
20:57:52 <SamB> how much storage do they provide?
20:57:59 <rep> i have no idea
20:58:01 <mokv> gigabytes
20:58:05 <SamB> and I don't recall seeing "ads by MSN" anywhere
20:58:06 <mokv> like gmail
20:58:17 <mokv> SamB, do you miss them?
20:58:24 <SamB> frankly, no
20:58:29 <SamB> because they would be scary!
20:58:34 <rep> well, SamB if they aren't there, don't worry they'll appear soon
20:58:40 <mokv> well google ads are still a big improvement from the flashing banners
20:58:48 <SamB> mokv: exactly!
20:58:52 <rep> mokv yahoo ads are similar
20:58:59 <mokv> yes
20:59:03 <SamB> I don't want to see what microsoft would do in that respect...
20:59:05 <mokv> but, are they effective?
20:59:11 <mokv> do people actually click them?
20:59:16 <mokv> they dont even look at them
20:59:20 <rep> mokv google's earning say they are effective :)
20:59:21 <rep> earnings
20:59:22 <mokv> there was a test... sec
20:59:55 <rep> but yeah, i don't even look at them either
21:00:12 <mokv> http://www.nngroup.com/events/tutorials/eyetracking.html
21:00:18 <mokv> yeah
21:01:13 <SamB> mokv: of course mostly people don't look at them
21:01:14 <rep> i believe the advertisers pay per click
21:01:22 <rep> so clearly a lot of people click them
21:01:33 <mokv> yes
21:01:33 <fworp> when im looking to actually buy something online though, i do.
21:01:33 <SamB> a tiny amount of people click on them
21:01:46 <SamB> only it turns out to be a lot
21:02:09 <rep> i think something like 95% of google's earnings come from ads
21:02:17 <mokv> SamB, yes but would you build your whole business on that?
21:02:20 <mokv> it's quite risky
21:02:36 <rep> mokv indeed
21:02:55 <rep> i'm a bit worried as well
21:03:29 <SamB> I admit they need to work on the ad selection for gmail...
21:03:39 <SamB> or at least, not many of my emails get decent ads.
21:03:50 <SamB> maybe because nobody is selling anything haskell-related ;-)
21:04:21 <rep> SamB it's probably not easy to do, because there isn't enough information in one email
21:04:25 <mokv> also lot of google attempts fail
21:04:32 <mokv> google talk for example. google reader too
21:04:38 <SamB> yeah
21:04:49 <SamB> google maps is way cool, though!
21:05:01 <mokv> yeah
21:05:09 <mokv> except it doesn't provide them any revenue
21:05:26 <mokv> but consumes a whole lot of bandwidth
21:05:26 <SamB> even if they insist on calling it by the lame name "local"
21:05:29 <SamB> hmm
21:05:36 <SamB> why don't they get revenue?
21:05:44 <mokv> why would they?
21:05:50 <mokv> it has no ads
21:05:59 <mokv> companies dont pay to be places on the map
21:06:15 <SamB> they should fix it to add geographically relevant ads!
21:06:16 <rep> well, it reinforces the brand, or something
21:07:06 <rep> so although it doesn't make money directly, it helps other products make more money
21:07:16 <mokv> thats true
21:09:43 <mokv> well one of google's advantages is that it's international
21:10:08 <rep> what do you mean?
21:10:16 <SamB> another is that it is regarded as "cool" by highly technical users...
21:10:21 <mokv> yahoo and msn are english only
21:10:34 <rep> ah
21:10:35 <mokv> well no not english only
21:10:44 <SamB> spanish and french too?
21:10:49 <SamB> also gibberish?
21:11:30 <mokv> yahoo.cn? msn.cn?
21:11:52 <mokv> SamB, google is regarded as "cool"?
21:11:59 <mokv> it maybe was in 2000
21:12:02 <SamB> isn't it?
21:12:18 <SamB> I said "highly technical", mind!
21:12:32 <mokv> i dont know
21:12:49 <rep> google is cool :P
21:12:54 <mokv> there are a lot of "highly technical" people suspecting a google conspiracy
21:12:54 <rep> at least from the inside
21:12:55 <SamB> @msn yahoo
21:12:56 <lambdabot> Not enough privileges
21:13:00 <SamB> @yahoo msn
21:13:00 <lambdabot> Unknown command, try @listcommands.
21:13:21 <mokv> SamB, #haskell is not very representative
21:13:25 <mokv> ask #lisp for example
21:13:26 <SamB> well, true.
21:13:33 <mokv> everyone will hate google and like yahoo
21:13:39 <rep> mokv why?
21:13:43 <SamB> And I suppose I did implement @google...
21:13:49 <SamB> mokv: those people are like ancient
21:14:08 <mokv> rep, yahoo store was the first big commercial user of common lisp
21:14:13 <mokv> or rumour has it at least
21:14:28 <rep> ah, yes, with paul graham
21:14:28 <SamB> ah
21:14:29 <mokv> SamB, ok well. windows users are about 95%
21:14:34 <mokv> and they will use msn
21:15:14 <gzl> that's not true
21:15:17 <SamB> mokv: and how many of them are technical?
21:15:28 <mokv> SamB, why does that matter?
21:15:31 <gzl> lots of nontechnical people on windows don't use MSN
21:15:42 <mokv> google cannot live off highly technical internet users
21:15:52 <mokv> gzl, oh
21:15:53 <gzl> they're not living off highly technical internet users
21:16:09 <rep> mokv _everyone_ uses google
21:16:15 <gzl> they have a rather large market share
21:16:16 <mokv> i dont
21:16:18 <SamB> anyways, who do you suppose the less technical people listen to?
21:16:24 <mokv> gzl, yes that's my point
21:16:30 <rep> mokv but you're highly technical
21:16:36 <mokv> :P
21:16:38 <gzl> is he? :P
21:16:47 <rep> well, if he's here..
21:16:56 <gzl> fair enough
21:17:04 <gzl> mokv: what is your point?
21:17:09 <mokv> i'm not very good with haskell though
21:17:21 <SamB> rep: well, I don't remember seeing him before!
21:17:25 <gzl> you seemed to be claiming that 95% of people are Windows users and thus they'll all use MSN
21:17:35 <mokv> gzl, well, my point is that it's not google's priority to be attractive to highly technical users
21:17:46 <gzl> it's not google's priority, but it's clearly something they do
21:17:53 <mokv> ?
21:17:58 <SamB> anyways, I didn't mean that only highly technical users used it...
21:18:00 <rep> gzl is it?
21:18:04 <mokv> gzl, not any more
21:18:16 <mokv> for example: gmail
21:18:27 <SamB> its just that they tell everyone else to do it too...
21:18:30 <mokv> highly technical people would use mutt or something
21:18:37 <rep> mokv i use gmail!
21:18:44 <SamB> mokv: I don't have time to be that highly technical
21:18:52 <mokv> rep, with the web frontend?
21:18:55 <rep> mokv yes
21:18:56 <gzl> I think you have a strange understanding of what "highly technical" means, not that it's even a well specified term
21:19:07 <mokv> rep, ok but youre a google employee
21:19:10 <rep> not really gmail, but the "internal" version
21:19:16 <rep> mokv well, yes
21:19:26 <rep> but i didn't like the idea of gmail either at the beginning
21:19:32 <rep> then i decided to give it a try
21:19:38 <mokv> i used it too
21:19:40 <rep> and it's surpsinigly good
21:19:45 <SamB> although one of these days I need to figure out how to recieve darcs patches via mail, and for that I'll probably need something else...
21:19:57 <rep> but again, i'm not using the publicly available version
21:20:04 <mokv> i just dont need a web frontend to mail
21:20:06 <rep> so it might be a bit different
21:20:22 <rep> mokv you shouldn't see it as a web frontend
21:20:22 <gzl> first of all, gmail isn't simply a web frontend to mail, it's a good free mail account that you can access via POP if you like
21:20:25 <rep> but as a whole client
21:20:45 <gzl> second, who cares if you don't need a web frontend? clearly, lots of other people use it
21:20:46 <mokv> gzl, yes...
21:20:56 <mokv> i said highly technical people will use something like mutt
21:21:01 <gzl> and I said that's just silly
21:21:01 <mokv> which doesnt show text ads
21:21:07 <mokv> so that's not good for google
21:21:14 <SamB> mokv: who cares its a web frontend? well, obviously the poor folks who have to write all that javascript care...
21:21:15 <mokv> ...
21:21:23 <rep> SamB hehe
21:21:31 <rep> i wouldnt't say they are "poor" hehe
21:21:54 <mokv> well... from a technical standpoint there is nothing astonishing about gmail
21:21:58 <SamB> rep: poor in terms of pulling-hair-out, not in financial terms
21:21:58 <gzl> somebody who knows what they're doing doesn't have to use relatively arcane tools
21:22:24 <SamB> mokv: except that it is really slick
21:22:27 <rep> mokv you'll be surprised
21:22:37 <rep> mokv there's a lot more to it than you can see
21:22:39 <SamB> its more of a usability standpoint
21:24:02 <SamB> mokv: what do you use?
21:24:11 <rep> he clearly uses mutt
21:24:17 <gzl> haha
21:24:23 <SamB> mokv: what is your address?
21:24:37 <mokv> ;o
21:25:12 <mokv> i could have a lot of addresses
21:25:20 <mokv> everyone gets one from their ISP to start with
21:25:29 <mokv> then your school/university
21:25:32 <mokv> and workplace
21:25:42 <mokv> how is gmail/yahoo mail/etc better than those?
21:25:51 <SamB> well, what is an address which you actually read the mail from?
21:26:11 <rep> mokv not everyone has school/work/etc emails
21:26:16 <gzl> if you switch ISPs, you lose that account
21:26:24 <mokv> gzl, yes
21:26:29 <gzl> it's not always practical to use your work email for personal stuff
21:26:29 <SamB> what I'm getting at here is I want to send you an invite!
21:26:32 <rep> mokv also, you usually get one ISP address per household
21:26:32 <mokv> and if google goes bankrupt you lose gmail
21:26:37 <mokv> or if they decide to charge you
21:26:42 <rep> mokv don't worry, it won't go bankrupt :P
21:26:43 <gzl> the likelihood of google going bankrupt is far lower than the other things
21:26:43 <mokv> or they can do anything
21:26:45 <gzl> which are inevitable
21:26:49 <gzl> this is stupid
21:26:55 <rep> and they won't charge you
21:27:12 <rep> there's no money to make by selling email accounts
21:27:14 <gzl> the probability of you graduating from school and losing your account is much higher than the probability of google suddenly going bankrupt
21:27:22 <gzl> and same with all the others
21:27:35 <SamB> gzl: and even if you don't graduate, you'll still lose your account
21:27:37 <mokv> but i will get ...@alum....
21:27:46 <SamB> assuming you don't go to gradschool, that is...
21:27:46 <gzl> those are frequently only forwarding addresses
21:27:57 <gzl> assuming that your school offers that, which not all do
21:28:04 <mokv> ok
21:28:24 <SamB> mokv: anyways, where to send invite?
21:28:40 <mokv> SamB, i have 100 invites to send myself
21:28:50 <mokv> in fact i have infinite
21:28:52 <SamB> mokv: oh
21:28:58 <SamB> darn!
21:29:04 <mokv> because if i invite myself the old account gets i=i-1
21:29:12 <SamB> I'm back at 100 again and wanted to get rid of one!
21:29:13 <gzl> also, it's not like there are no reasonable options other than gmail, but it's certainly one reasonable option
21:29:15 <mokv> while the newly invited gets 19 new invites to start with
21:29:24 <mokv> so if i script it i have infinite invites
21:29:42 <SamB> mokv: if you script it, you'll likely have none
21:29:47 <SamB> I mean, really...
21:29:53 <mokv> ok
21:30:03 <mokv> i have too much invites already
21:30:18 <mokv> btw... i have invited people to gmail
21:30:18 <rep> hehe
21:30:22 <mokv> and they just didn't like it
21:30:33 <mokv> but they were non tech savvy
21:31:00 <mokv> ....my father said it has a girlish design so he wont use it publicly....
21:31:05 <rep> haha
21:31:07 <SamB> heh
21:31:10 <gzl> hahaha
21:31:14 <rep> that's a nice reason :D
21:31:31 <SamB> thats just google's normal color scheme, really!
21:33:57 <gzl> yeah, it's mostly white
21:34:13 <rep> and blue
21:34:42 <gzl> I said mostly :)
21:36:32 <SamB> and a little green here and there
21:36:57 <SamB> sometimes a bit of yellow
21:37:14 <mokv> depends on the section
21:37:18 <mokv> web search si blue
21:37:18 <SamB> yeah
21:38:02 <rep> i don't see how it's girly :)
21:38:15 <gzl> i don't think anyone sees how it's girly
21:38:24 <mokv> i didn't get it either
21:38:37 <mokv> he said it's colors are pale and it's all rounded and...
21:39:06 <SamB> okay, so maybe google's other stuff isn't all rounded...
21:39:09 <rep> interesting opinion
21:39:46 * SamB wonders why he has something in "deleted items" dated May 16
21:39:58 <Cale> hehe
21:40:16 <SamB> it must be a subtle bug
21:40:20 <Cale> not as bad as the broken exim installation I had running for 4 years :)
21:40:24 <gzl> the most annoying thing about gmail is that you can't mass delete
21:40:42 <SamB> or mass archive
21:40:53 <mokv> you can
21:40:58 <SamB> you can?
21:41:05 <rep> you can select all the mails on a page, can't you?
21:41:07 <SamB> oh, okay.
21:41:09 <gzl> that's not the same
21:41:11 <SamB> maybe you can.
21:41:13 <rep> true
21:41:19 <SamB> gzl: whats the difference?
21:41:35 <gzl> if you have more email than fits on one page, it forces you to delete one page at a time
21:41:35 <mokv> well if you have more pages it's annoying
21:41:43 <SamB> ah
21:41:47 <mokv> ;o
21:42:05 <SamB> hmm, I really ought to unsubscribe from some lists
21:42:12 <gzl> it seems rather stupid to encourage people to never delete email and give some vast amount of space and then not have stuff like that
21:42:14 <mokv> that's the point of gmail
21:42:19 <mokv> you dont have to bother deleting
21:42:20 <SamB>  1 - 50 of 640 Older ›  Oldest » 1 - 50 of 640 Older ›  Oldest »
21:42:31 <gzl> that's not an answer though
21:42:36 <mokv> hmm
21:42:39 <gzl> it doesn't matter whether I don't have to delete it
21:42:42 <gzl> I want to delete it
21:42:51 <mokv> gzl, you are special
21:42:57 <SamB> gzl: you have a psychological disorder!
21:43:00 <mokv> most people didnt have time to delete their mail
21:43:09 <mokv> so their mailbox filled up
21:43:18 <mokv> google realised it.... and created gmail
21:43:32 <mokv> it's for people who dont bother
21:43:41 <gzl> .........
21:44:06 <mokv> no?
21:44:06 <gzl> having a lot of space isn't mutually exclusive with anything I'm saying
21:44:52 <mokv> gzl, ok so tell them you want a "show 1,000,000 mails per page" option
21:44:57 <SamB> heh
21:45:36 <gzl> not that that would be a reasonable way to do it ...
21:46:52 <SamB> how about just 1000?
21:47:36 <mokv> no
21:47:48 <gzl> I guess, it seems strange to display that much email on a single page just to let somebody delete it
21:47:54 <mokv> if you have more than 100 you most likely have more than 100000 too
21:47:57 <gzl> it's a silly idea
21:48:10 <mokv> gzl, so, how would you do it?
21:48:20 <gzl> be able to specify criteria and then delete based on that
21:48:34 <mokv> but every mail client can already do that
21:48:36 <gzl> e.g. delete all messages received before Jan 1 2005 and tagged with this label
21:48:44 <gzl> gmail can't
21:48:57 <SamB> gzl: just delete the label ;-)
21:48:57 <mokv> gmail is for people who dont need such functionality
21:49:05 <mokv> SamB, that wont delete the mail
21:49:12 <SamB> mokv: so?
21:49:19 <SamB> you'll never find it again!
21:49:23 <mokv> :D
21:49:36 <gzl> I think you have a lot of really bizarre ideas about who gmail is for
21:49:54 <mokv> gmail.com says it very clearly
21:49:58 <gzl> correction. a lot of really bizarre ideas
21:50:12 <mokv> "    *
21:50:12 <mokv>       Don't throw anything away.
21:50:12 <mokv>       Over 2669.542177 megabytes (and counting) of free storage so you'll never need to delete another message.
21:50:12 <mokv>     *
21:50:12 <mokv> "
21:50:21 <mokv> whoops
21:51:02 <mokv> ...i wanted that on one line. damn unicode linebreaks
21:51:04 <gzl> once again
21:51:21 <gzl> not needing to delete messages is not the same thing
21:51:49 <gzl> if I have 1000 crap messages I want to get rid of, why would I keep them just because I have the space? they clutter stuff up and get in the way
21:52:28 <mokv> so why do you use gmail where you cannot delete them?
21:52:48 <mokv> as opposed to just about any other mail client where you can
21:53:42 <gzl> I don't use gmail
21:53:49 <SamB> anyway, apparantly deleting stuff doesn't even work ;-)
21:53:59 <mokv> SamB, yes it does
21:54:27 <mokv> gzl, umm ok somehow i thought you were talking about gmail....
21:54:31 <Cale> SamB: you can delete things from deleted items
21:54:45 <Cale> I'm not sure if they're ever automatically cleared
21:54:50 <gzl> blimey, I am talking about gmail, I was just mentioning something I didn't like about it when I tried it out
21:54:59 <Cale> I never delete reasonable email
21:55:12 <Cale> It's easy to search, and categorise
21:55:34 <SamB>  (messages that have been in Trash more than 30 days will be automatically deleted)
21:55:39 <Cale> oh
21:55:40 <Cale> hmm
21:55:49 <Cale> does manual deletion kill it?
21:55:59 <SamB> I don't really care
21:56:01 <Cale> :)
21:56:06 <Cale> odd bug
21:56:13 <xinming> why I use gmail is because it has such a big space, and I don't need to delete the message from mailing list again. :-)
21:56:18 <SamB> its not like there is a count of messages or anything
21:56:38 <Cale> yeah
21:56:51 <Cale> I use it to deal with my mailing list subscriptions, it's really nice for that
21:56:59 <SamB> can I set gmail to automatically archive stuff from certain lists if I don't read it within a month of recieving it?
21:57:18 <SamB> or maybe two weeks or something
21:57:25 <xinming> SamB: There isn't a timer in Gmail I think,
21:57:41 <Cale> that's a nice feature request
21:57:44 <xinming> SamB: But you can label it, and archive it. It's clear. :-)
21:57:54 <mokv> usenet was better for mailing list-type communication
21:57:56 <mokv> :/
21:58:00 <Cale> My main feature request is being able to set a fixed width font for viewing.
21:58:06 <SamB> mokv: I agree
21:58:33 <SamB> I wish you could post to the haskell.org lists via gmane without waiting for simon...
21:58:47 <SamB> and without subscribing
21:59:16 <SamB> maybe a "post only" subscription...
21:59:26 <Cale> It's nice that there's basically no spam on the list. At least, I haven't noticed any
22:00:46 <mokv> SamB, i meant with a newsreader
22:00:58 <mokv> for example dragonfly lists are available via nntp too...
22:01:01 <SamB> mokv: exactly!
22:01:09 <mokv> that practice should be more widespread
22:01:16 <SamB> mokv: did you think gmane was just a web interface?
22:01:23 <mokv> hmm
22:01:34 <mokv> yes :P
22:01:58 <mokv> but now i'm enlightened
22:02:22 <SamB> why did you suppose it was called "mail to news and back again"?
22:02:39 <SamB> or did you not know that it was called that?
22:03:42 <mokv> i didn't know..
22:04:46 <SamB> yeah. that is the most sensible explanation
22:05:00 * SamB wonders what time it is for adept
22:05:50 <mokv> but usenet is supposed to be decentralised
22:06:00 <SamB> so?
22:06:05 <mokv> everyone gets a usenet server with their isp too
22:06:08 <SamB> the important part is the newsreader!
22:06:11 <mokv> so why use gmane?
22:06:28 <SamB> because that works for mailing lists
22:06:38 <SamB> at least, you can read them okay
22:06:46 <mokv> yeah
22:06:58 <mokv> you could read mailing list archives on the web before gmane
22:07:09 <SamB> and really its not gmanes fault that your posts have to get past simon...
22:07:11 <mokv> the annoying thing is not being able to post
22:07:19 <SamB> well, you CAN...
22:07:20 <mokv> yea
22:07:34 <SamB> it just takes simon too long to approve them
22:07:56 <SamB> iirc, the simon in question is JaffaCake...
22:09:00 * SamB needs sleep
22:09:03 <SamB> @localtime SamB
22:09:04 <lambdabot> Local time for SamB is Wed Nov 30 01:09:36
22:09:09 <SamB> @wiki HaskellUserLocations
22:09:09 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
22:12:44 <mokv> night
22:24:26 <skew> Hi! Anybody using Data.Graph.Inductive around here?
22:25:29 <xinming> Is monad a type constructor?
22:25:37 <skew> Monad is a type class
22:25:47 <skew> "monad" would be a type variable
22:28:06 * xinming thinks, He might know what nomad is... he might not...
22:28:06 <xinming> hmm, what I mean is, I think it is a bit like a layer between the data and function to perform extra things.
22:29:17 <SamB> xinming: a monad is probably something like "a -> (>>=, return, S(a))"
22:29:25 <skew> if you look at it that way, the monad represents having some "effects" beside the result.
22:29:50 <xinming> SamB: please don't confuse me again... I need to clarify myself on understand such things. :-/
22:30:14 <SamB> xinming: sorry ;-)
22:30:29 <SamB> that was supposed to look like a mathemeticians description ;-)
22:30:47 <skew> IO is the one with "real" side-effects like printing output or segfaulting your computer. Maybe is a very simple monad where the "effect" is just that maybe you don't actually get a value - like a very trivial exception system
22:32:04 <xinming> in my understanding, there is a "layer" between function and data. and this layer handle the input and output.
22:32:32 <xinming> But I know, There is more than that
22:33:14 <xinming> maybe something like "partial application" acts as data
22:34:09 <skew> Maybe is a better example than IO, I think
22:34:19 <skew> It's the simplest monad other than the identity.
22:36:41 <Khisanth> SamB: strange looking math you got there :)
22:37:37 <mcnster> hello
22:38:50 <mcnster> does anyone know of an effort to recast the prelude using a comonadic OI-like framework from the get-go?
22:39:04 <skew> hello
22:39:10 <mcnster> hi skew
22:39:38 <skew> I don't think anybody understood how to do IO with comonads
22:40:16 <mcnster> i'll take that as a "no" then ;-)
22:40:19 <skew> at least, that's what it looked like the last time it came up on the list
22:40:25 <sieni> cd ~/kitchen && more coffee
22:41:39 * sieni got his fix
22:42:54 <mcnster> hmm
22:43:23 <ADEpt> morning
22:44:59 <mcnster> hi adept
22:48:28 <unusednick> hmrph
22:48:37 * unusednick is having problems building lambdabot
22:51:40 <Cale> unusednick: dons will be interested
22:51:44 <Cale> what's the problem?
22:52:04 <unusednick> well, i can't build FastPackedString
22:52:35 <unusednick> what's the etiquetton on pasting in this channel?
22:52:41 <unusednick> *ettiquete on
22:53:02 <Cale> I'd say up to 5 lines, past that, best to use either lisppaste or the wiki
22:53:09 <Cale> lisppaste2: url
22:53:09 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
22:53:23 <unusednick> yeah, i've used lisppaste in #scheme 
22:53:28 <unusednick> this is a short one:
22:53:30 <unusednick> % runhaskell Setup.hs configure
22:53:30 <unusednick> runhaskell Setup.hs configure
22:53:30 <unusednick> Configuring fps-0.1...
22:53:31 <unusednick> runhaskell: waitForProcess: interrupted (Interrupted system call)
22:53:43 <unusednick> not very informative, i'm afriad
22:53:46 <Cale> hmm
22:53:53 <unusednick> but i really have no clue where to start with that
22:54:11 <unusednick> this is OS X 10.4, Cabal 1.1.4
22:54:20 <unusednick> the latest GHC from DarwinPorts
22:54:27 <Cale> try runghc, just to be sure, though I'd think you'd get another error if that was the problem
22:54:49 <unusednick> exact same thing
22:54:51 <Cale> yeah
22:55:14 <unusednick> i did manage to build a couple things with this GHC install
22:55:19 <unusednick> darcs and cabal 1.1.4
22:55:37 <unusednick> so i don't think my ghc is completely hosed, at least
22:56:06 <Cale> yeah, I wonder where that's coming from... perhaps I'll have a look at the configure script for fps
22:56:33 <unusednick> you mean the Setup.hs?
22:56:34 <Cale> this is the darcs repo of fps?
22:56:36 <Cale> yeah
22:56:41 <unusednick> Cale: yes
22:57:03 <Cale> hmm, it's just the default one
22:57:12 <unusednick> yup
22:57:17 <unusednick> i guessed so much
22:57:26 <Cale> so that makes it a problem with cabal
22:57:37 <unusednick> any thing i can do to test that?
22:57:58 <Cale> have you used any other cabal configurations?
22:58:05 <unusednick> not really
22:58:19 <unusednick> i guess i should try building something else
22:58:27 * unusednick wonders if hs-plugins depends on fps
22:58:34 * unusednick decides to find out
22:58:35 <mysteriousentity> Hello
22:58:52 <Cale> mysteriousentity: hello
22:58:58 <Cale> unusednick: something to try anyway
22:59:12 <mysteriousentity> I'm currently trying to undertand monads
22:59:14 <Cale> I think Lemmih is a major cabal person
22:59:14 <unusednick> hmm, got pretty much the same
22:59:31 <Cale> mysteriousentity: cool, what have you read so far?
22:59:32 <mysteriousentity> going through this tutorial: http://www.haskell.org/tutorial/monads.html
22:59:47 <mysteriousentity> I'm up to 9.3
22:59:55 <mysteriousentity> inc                     :: R Integer -> R Integer
22:59:55 <mysteriousentity> inc i                   =  lift1 (i+1)
23:00:01 <Cale> eek, that's a hard place to start with monads :)
23:00:37 <mysteriousentity> after trying to understand this function I put all the code in a file and tried to compile
23:00:45 <mysteriousentity> and that function does not compile
23:00:48 <Cale> okay
23:00:57 <mysteriousentity> gentle.hs:22:
23:00:57 <mysteriousentity>     Couldn't match `R Integer' against `R a -> R b'
23:00:57 <mysteriousentity>         Expected type: R Integer
23:00:57 <mysteriousentity>         Inferred type: R a -> R b
23:00:57 <mysteriousentity>     Probable cause: `lift1' is applied to too few arguments in the call
23:00:57 <mysteriousentity>         (lift1 (i + 1))
23:00:59 <mysteriousentity>     In the definition of `inc': inc i = lift1 (i + 1)
23:01:12 <mysteriousentity> I was wondering if I'm doing something wrong or not
23:01:58 <Cale> um, no, that function definition is just broken I think
23:02:03 <unusednick> ah, google to the rescue: http://www.mail-archive.com/glasgow-haskell-bugs@haskell.org/msg07747.html
23:02:18 <Cale> inc = lift1 (+1)
23:02:26 <Lemmih> (i+1) doesn't make sense when 'i' is of type 'R Integer'.
23:02:29 <mysteriousentity> ah, that makes sense
23:02:53 <mysteriousentity> I thought about how that could work for half an hour!!! :)
23:03:24 <shapr> jiihaa
23:03:30 <Cale> I'm also absolutely floored that there's a bug in the Gentle Intro, since it's like, the oldest current Haskell tutorial.
23:03:40 <shapr> time to fix it!
23:03:56 <Cale> Who's the maintainer?
23:04:00 <shapr> No clue
23:04:24 <Cale> Premission is granted to correct, improve, or enhance this document. If you wish to publish updated versions of the tutorial on haskell.org please contact John Peterson.
23:04:53 * Cale fires off an email
23:04:57 <unusednick> Cale: that url i pasted
23:05:02 <unusednick> that solved my whole problem
23:05:21 <shapr> yaarg!
23:05:35 <yaarg> good morning!
23:05:50 <shapr> good morning!
23:06:15 <Cale> unusednick: cool :)
23:06:33 <Cale> unusednick: that's a strange problem
23:06:41 <shapr> How'd we get all these pastebots?
23:07:19 <pejo> shapr, easier to paste stuff than to write new sentences with content!
23:07:29 <shapr> I'm tempted to make a lambdapaste... but I'll work on FLM instead.
23:07:42 <shapr> god morgon pejo!
23:09:30 <Cale> mysteriousentity: for more info on monads, there's my MonadsAsContainers article on the wiki: http://www.haskell.org/hawiki/MonadsAsContainers, and also All About Monads, http://www.nomaware.com/monads/html/
23:10:39 <kolmodin> good morning
23:11:13 <shapr> yow!
23:12:58 <mysteriousentity> Thank you, Cale.
23:13:11 <Cale> mysteriousentity: no problem
23:13:11 <shapr> I was wondering about persisting an inductive graph...
23:13:38 <shapr> it seems to me that inductive graphs could be stored efficienly by filing off the pieces.
23:18:56 <shapr> Pastebot: help
23:19:02 <shapr> hmm
23:20:01 <Cale> shapr: yeah, I'd think you'd just serialise all the contexts -- after all, they're sort of a glorified list :)
23:20:17 <unusednick> hmm, my compilation is erroring out in line pairs like the following:
23:20:19 <shapr> Yeah
23:20:19 <unusednick> import Map (Map)
23:20:19 <unusednick> import qualified Map as M
23:20:38 <Cale> unusednick: really? what's the error?
23:20:40 <Cale> er
23:20:42 <Cale> oh
23:20:46 <Cale> import Data.Map
23:20:56 <Cale> import Data.Map (Map)
23:21:01 <Cale> import qualified Data.Map as M
23:21:12 <Cale> (the latter two are what you want)
23:21:24 <unusednick> this is lambdabot from darcs
23:21:36 <unusednick> but lemme try that
23:21:38 <Cale> oh
23:21:46 <Cale> it has its own Map module
23:21:53 <unusednick> Serial.hs:1:0:
23:21:53 <unusednick>     Warning: `Map' is imported more than once:
23:21:53 <unusednick> 	       imported from Map at Serial.hs:32:0-24
23:21:53 <unusednick> 	       imported from Map at Serial.hs:31:12-14
23:22:04 <Cale> ah
23:22:08 <unusednick> it gives me two warnings like that
23:22:14 <Cale> import qualified Data.Map as M hiding (Map)
23:23:06 <unusednick> now i get:
23:23:06 <unusednick> Serial.hs:119:19: Not in scope: type constructor or class `M.Map'
23:23:13 <Cale> oh
23:23:14 <Cale> heh
23:23:23 <Cale> um
23:24:04 <Cale> what happens if you remove the first line and just have: import qualified Data.Map as M
23:24:09 * shapr warbles
23:24:11 <unusednick> just tried that
23:24:25 <Cale> Odd that that fails
23:24:30 <unusednick> Serial.hs:56:64: Not in scope: type constructor or class `Map'
23:24:36 <Cale> yeah
23:24:47 <Cale> and that warning stops the build?
23:24:56 <unusednick> well, the build ends there.
23:25:04 <unusednick> maybe i'm making that good old fallacy
23:25:13 <unusednick> the "sequence implies cause" fallacy.
23:25:29 <Cale> which command was make running?
23:25:39 <Cale> ghc  -package plugins -threaded -v0 -main-is Boot.main Boot.o Shared.o Map.o -o lambdabot
23:25:45 <Cale> that's the second last for me
23:25:54 <Cale> after is "strip lambdabot"
23:25:55 <unusednick> lisppaste2: url
23:25:55 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
23:26:16 <Cale> ah, -Werror
23:26:26 <Cale> but I don't even get warnings
23:26:58 <Cale> also paste the configure output
23:26:59 <lisppaste2> unusednick pasted "lambdabot compilation failure.  OS X 10.4, GHC 6.4 (from DarwinPorts)" at http://paste.lisp.org/display/14145
23:27:53 <Cale> er, hmm
23:28:14 <lisppaste2> unusednick annotated #14145 with "Configure output" at http://paste.lisp.org/display/14145#1
23:28:36 <unusednick> maybe ghc is dying in an odd way?
23:28:43 <Cale> well, one difference is that I'm compiling with 6.4.1
23:28:54 <Cale> apart from the arch
23:29:12 <unusednick> hrmph
23:29:25 <Cale> hum
23:29:26 <unusednick> why does darwinports claim it has 6.4.1, i wonder
23:30:41 <Cale> you could edit config.mk, and remove the -Werror from HC_OPTS, but it'd be a hack
23:30:58 <unusednick> hrmph.
23:31:14 <unusednick> would upgrading haskell to 6.4.1 be worth it?
23:31:26 <Cale> there's been quite a few changes
23:31:40 <unusednick> i'll probably do that first.
23:32:14 <Cale> to be honest, I don't know exactly what's causing the problem. It's extra odd in that Map.hs is only there for backward compatibility
23:32:28 <Cale> dons would probably be interested
23:32:37 <Cale> wonder where he is
23:32:39 <Cale> @seen dons
23:32:40 <lambdabot> dons is in #haskell. Last spoke 3 hours and 7 seconds ago.
23:51:46 <shapr> bok gour 
23:51:58 <gour> shapr: bok
23:52:12 <Korollary> bok ?
23:52:29 <shapr> It's croation for 'hi'
23:52:35 <Korollary> oh
23:52:41 <gour> :-)
23:52:52 <shapr> It's also croation for 'bye'
23:53:09 <gour> or "what's up"
23:53:35 <Korollary> It's Turkish for "shit", seriously heh.
23:54:14 <ADEpt> and it's russian for "side (of body)"
23:54:23 <gour> funny are all those languages, ah?
23:54:30 <unusednick> it's canadian french for a glass of beer
23:54:44 <dblhelix> fwiw, in dutch a 'bok' is a male goat
23:54:54 <unusednick> come on guys, of course a one-syllable thing is going to mean something in many languages
23:55:27 <gour> ADEpt: it's the same in croatian, but slightly different accent, this one (hi) is short
23:55:43 <dblhelix> yeah, we have 'bok' beers too :)
23:56:21 * ADEpt remembers "Love Actually" .. " -And how do you pronounce 'table' here? -As 'table' -Hm, strange, we too. :)
23:57:40 <gour> actually 'bok' comes from 'bog' which means God and people used to greet each other like that (iirc, germans have something like gruess Gott")
23:57:56 <unusednick> jeez, all package systems for OS X suck.
23:58:02 <gour> but young people being not so pious, 'invented' a new word 'bok'
23:58:43 <shapr> So, anyone want to write TMR articles?
23:58:46 <jewel> it's afrikaans for a gazelle
23:58:52 <jewel> and a term of endearment "bokkie"
23:59:03 <unusednick> gour: i would not make too many hypotheses about a word that has two of the earliest consonants that children produce, and a cardinal vowel.
23:59:38 <ADEpt> shapr: i want to read them, if that counts
