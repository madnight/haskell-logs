00:00:55 <ski> a general introduction which is nice and not very hard is, Conceptual Mathematics, by Schanuel and someone iirc
00:01:43 <ski> another non-CS-specific book is, Elementary Categories, Elementary Toposes, by Colin McLarty
00:02:40 <ski> and, a thick book, with many examples from topology and algebra is, Abstract and Concrete Categories, by Adamek and 2 others, this is online now, http://katmat.math.uni-bremen.de/acc/acc.pdf
00:02:49 <ski> araujo : pick and choose
00:02:53 <araujo> haha
00:02:55 <araujo> Thanks ski 
00:03:38 * araujo checks that one online right now
00:04:07 <ski> hm, this is also nice (not very thick), it has examples from grammars and stuff, http://www.amazon.com/exec/obidos/tg/detail/-/0521422264/qid=1132214578/sr=1-1/ref=sr_1_1/104-8766715-6253502?v=glance&s=books
00:05:25 <araujo> Oh, that looks cool.
00:10:57 <araujo> It looks very straight-forward
00:14:35 <boegel> does anyone know why there's no HWN this week ?
00:31:54 <araujo> @type (\ _ -> Just "foo") >> return "bar"
00:31:55 <lambdabot> forall t. (Monad ((->) t)) => t -> [Char]
00:32:14 <araujo> Can someone explain me the type of that computation?
00:32:30 <ski> @type (>>)
00:32:31 <lambdabot> forall (m :: * -> *) b a. (Monad m) => m a -> m b -> m b
00:32:43 <araujo> I know about class type , but first time i see something with ((->) t)
00:32:56 <ski> so, (\ _ -> Just "foo") :: t -> Maybe String
00:33:16 <ski> but also, since it is left arg to (>>), it should have type 'm a'
00:33:32 <ski> t -> Maybe String = (->) t (Maybe String)
00:33:50 <ski> so, if  t -> Maybe String = m a  then  m = (->) t
00:33:52 <araujo> oh :-O
00:34:19 <ski> maybe what you intended was  Just "foo" >> return "bar"  ?
00:34:38 <araujo> @type Just "foo" >> return "bar"
00:34:39 <lambdabot> Maybe [Char]
00:35:00 <araujo> Yeah, though ive found very interesting the other one.
00:35:13 * araujo saluda a Nomius 
00:35:34 <ski> (->) t  is a reader monad, over environment type t
00:35:44 <ski> basically '(->) t' is iso to 
00:35:52 <araujo> I see
00:35:55 <ski> Reader t
00:36:32 <stefanw> is there a diff implementation for Haskell? I'm searching for a function like diff :: String -> String -> String which computes the diff (in the sense of the unix tool `diff') of two strings
00:37:20 <araujo> Thanks again ski , get it.
00:37:53 <Nomius> Hola araujo 
00:38:04 <araujo> Nomius, Hola :-)
00:38:16 <Nomius> Muy amable lo tuyo...
00:38:20 <Nomius> Siempre que entro me saludás :-D
00:38:37 <araujo> haha, no suelo ver mucho spanish-speakers por aqui :-(
00:38:45 <Nomius> Jejeje
00:39:05 <Nomius> Somos pocos los hispanohablantes en freenode :-)
00:39:15 <araujo> Nomius, Por cierto, me he registrado #haskell.es , interesado en idle'ar alla? :-)
00:39:16 <ski> #haskell.es ?
00:39:36 <Nomius> Pero ni tu estás ahí :-P
00:39:47 <araujo> Si estoy :-P
00:39:55 <araujo> Y tambien tenemos al lambdabot :-]
00:40:05 <ski> @seen lambdabot
00:40:06 <lambdabot> Yes, I'm here. I'm in #haskell.es, #haskell.it, #gentoo-haskell, #haskell-
00:40:06 <lambdabot> overflow, #haskell-blah and #haskell
00:40:08 <Nomius> Y porqué demonios no me aparecía en el whois :-S
00:40:34 <araujo> Nomius, ah, pues porque tengo una opcion para no mostrar los canales en los que estoy :-)
00:40:42 <Nomius> Que feo
00:41:47 <araujo> Nomius, Si, lo hice un tiempo atras cuando hubo una oleada de spammer aqui en freenode
00:41:53 * araujo modes english
00:49:53 <stefanw> "The Haskell language is a rather obscure functional language, known to but few, and additionally is reported to characteristically suffer unpredictable but sometimes severe performance problems." (see http://linuxmafia.com/faq/Apps/scm.html)
00:51:56 <araujo> mmm.....
00:54:33 <araujo> comments like that without proper arguments are plain stupid.
00:55:44 <araujo> I also don't know how a languahge that is been taught in several univ. worlwide can be considered obscure.
00:56:33 <stefanw> Personally, I find such a stupid comment rather entertaining :-)
00:57:26 <araujo> Sure they are.
00:58:15 <gour> what do you think about Greg's post to haskell today?
00:58:31 <gour> ' Improvements to GHC' thread
01:01:24 <dons> stefanw, hehe :)
01:02:48 <dons> hmm, that's a weird one: "darcs also suffers from impenetrable, poorly designed error messages and diagnostics"
01:02:53 <dons> that's news to me
01:03:00 <dons> and I use darcs every hour :)
01:03:54 <araujo> :-]
01:05:35 <dons> who was it who said (shapr?) that they welcome their competitors using languages other than haskell? it's a bad sign if your enemies start coding in haskell!
01:06:05 <araujo> hahaha
01:15:03 <kzm> @seen shapr
01:15:04 <lambdabot> shapr is in #haskell-blah and #haskell. Last spoke 7 hours, 26 minutes
01:15:04 <lambdabot> and 14 seconds ago.
01:15:17 <kzm> Hrmf.  Up late again...
01:17:18 <ski> hi haskellnewbie
01:17:43 <haskellnewbie> hey there...as my handle would perhaps indicate, I'm trying to write my first monad, and am lost
01:17:58 <ski> what should your monad do ?
01:18:32 <haskellnewbie> compute a round of the sha hash computation, and maintain state between calls to it with updates
01:18:49 <ski> a state monad ?
01:19:02 <haskellnewbie> yeah, I got that far...the notation is killing me
01:19:15 <ski> what do you have, so far ?
01:20:04 <haskellnewbie> hmmmm....about half of the FIPS 180-2 spec directly expressed as haskell...the first half is all stateless functions and constants, which translated directly smooth as butter...this is my first haskell program and I'm in love with it
01:21:16 <haskellnewbie> I just don't know for sure how to wire up which pieces where, in the constructor or state update functions
01:22:04 <ValarQ> haskellnewbie: have you read http://www.nomaware.com/monads/html/ ?
01:22:37 <ValarQ> haskellnewbie: it got a pretty good state monad example
01:22:51 <ski> you have to define some monad type (or use library types)
01:24:13 <haskellnewbie> yes, that is already in my browser cache! :-)
01:25:02 <haskellnewbie> I do not understand everything completely in the state example at that url
01:25:39 <haskellnewbie> what does $ do in monad-land?
01:25:56 <ValarQ> same as outside monad-land
01:26:11 <haskellnewbie> ah, and that is?
01:26:37 <ski> f $ x = f x
01:26:45 <ski> function application
01:26:57 <haskellnewbie> sweet, thank you!
01:28:23 <haskellnewbie> the meaning of the definition of getany at http://www.nomaware.com/monads/html/statemonad.html eludes me :-(
01:28:38 <ski> 'f a (g b (h x y (i z)) c (j d (k e)))' is the same as 'f a $ g b (h x y $ i z) c $ i d $ j e'
01:28:57 <yaarg> good for getting rid of parentheses
01:29:21 <ValarQ> haskellnewbie: are you familiar with the do-notation?
01:29:45 <haskellnewbie> dimly, that's part of what I'm trying to grok...I'm coming from a perl/forth/lisp background, fyi
01:30:13 <ValarQ> haskellnewbie: http://www.nomaware.com/monads/html/class.html#donotation
01:30:35 <ski> haskellnewbie : it gets the current state (random generator), uses that to get a random value, and a new generator, and puts the new generator back, then returnes the random value
01:31:13 <haskellnewbie> oh thank you I think that the donotation page is going to get me sorted out!
01:34:06 <ValarQ> btw, if >>= is bind what do we call >> ?
01:34:22 <ski> 'then', i've heard
01:34:35 <ValarQ> oh
01:34:42 <ValarQ> makes sense
01:34:51 * ski misread 'donotation' as 'denotation'
01:36:00 <ski> 'a let clause is allowed at the beginning of a do block' ?
01:36:32 <ski> > do x <- [1,2,3]; let y = sqrt x; [x,-x]
01:36:32 <lambdabot>  parse error on input `}'
01:36:42 <ski> > do {x <- [1,2,3]; let y = sqrt x; [x,-x]}
01:36:43 <lambdabot>  parse error on input `}'
01:36:49 <ski> hm
01:36:59 <ski> > do x <- [1,2,3]; let {y = sqrt x}; [x,-x]
01:37:00 <lambdabot> [1.0,-1.0,2.0,-2.0,3.0,-3.0]
01:37:04 <dons> > do x <- Nothing ; let y = 2 ; return x
01:37:04 <lambdabot>  parse error on input `}'
01:37:14 <dons> > (do x <- Nothing ; let y = 2 ; return x)
01:37:15 <lambdabot>  parse error on input `)'
01:37:23 <ski> 'let' thinks 'return 2' is a declaration inside it
01:37:33 <ski> no such problem if indenting instead
01:37:34 <ValarQ> {} is needed when using ; i believe
01:37:40 <ski> it's not needed
01:37:48 <ValarQ> ok
01:37:49 <dons> I use lets in dos all the time
01:37:56 * ski too
01:38:02 <ValarQ> > [1,2] >>= [x,x+1]
01:38:03 <lambdabot>  Not in scope: `x'
01:38:11 <ValarQ> > [1,2] >>= \x -> [x,x+1]
01:38:12 <ski> so 'a let clause is allowed at the beginning of a do block' seems not right
01:38:12 <lambdabot> [1,2,2,3]
01:38:23 <ValarQ> > do x <- [1,2] ; [x,x+1]
01:38:24 <lambdabot> [1,2,2,3]
01:38:32 <ski> > do x <- [1,2,3]; let {y = sqrt x}; [y,-y]
01:38:33 <lambdabot> [1.0,-1.0,1.4142135623730951,-1.4142135623730951,1.7320508075688772,-1.
01:38:33 <lambdabot> 7320508075688772]
01:38:33 <dons> allowed anywhere, yeah.
01:38:37 <ski> (i meant to say, of course)
01:38:39 <ValarQ> seems i was wrong again :)
01:40:08 <flux__> hmm, this looks interesting, I wonder if a statically typed languge would be better or worse for this purpose: http://geophile.com/osh/index.html
01:40:20 <flux__> (an 'object shell' for one-liners, written in python)
01:40:39 <haskellnewbie> jesus, this is a "literate haskel irc chanell"
01:40:54 <haskellnewbie> that lambdabot is kewl
01:42:21 <dons> :)
01:42:37 <ski> haskellnewbie : '> ' is a new alias for the '@eval ' command
01:43:19 <dons> flux__, interesting. there's a statically typed shell written in Clean
01:43:34 <ski> hm, where ?
01:43:35 <dons> just means you get your errors earlier, rather than later
01:43:49 <dons> Esther, is the name.
01:44:38 <flux__> is it something that's still developed?
01:45:12 <dons> not sure. the paper was a couple of years ago
01:45:25 <flux__> osh seems to be especially useful when needing ad-hoc sql queries
01:45:58 <flux__> the types would somehow need to come from the sql query results
01:47:35 <flux__> hm, if the sql query code was outside the code itself, the types derived by the compiler could be used for automatic conversions of the query results
01:49:16 <flux__> well, actually it could just use 'read' and things would work automagically, but still the query would need to generate a tuple of length dependant on the query results, to be more useful
02:07:43 <joelr1> howdy
02:13:48 <shapr> joelr1: What's up?
02:14:18 <joelr1> nothing :-) just the mere fact of my joining the channel made me realize the solution to my question ;)
02:14:21 <shapr> joelr1: btw, as much as I advertise spikes and tdd, I myself am often guilty of not doing it...
02:14:49 <shapr> So that was more like "gee, we should all do this, especially me."
02:15:10 <joelr1> yeah
02:15:30 <shapr> It's very difficult to do tdd and spikes with Zope/Plone.
02:16:11 <shapr> Cale: That's the best email obfuscation I've ever seen. I have no clue how it works.
02:18:44 <shapr> CosmicRay: I love your "Sometimes when you least expect it." screenshot.
02:18:47 * shapr laughs much
02:21:17 <shapr> @quote cjs
02:21:18 <lambdabot>  I have to explain this shit to people. I mean, I start out right, "Hey,
02:21:18 <lambdabot> you know how you always have these bugs because what you thought was in
02:21:18 <lambdabot> the variable is not there?" And I get all of these nods of agreement. "
02:21:18 <lambdabot> Well, I've found a new language that solves that problem." Audience: "
02:21:18 <lambdabot> Ooooh! How?" Me: "There's no variables!" And then they all start moving
02:21:20 <lambdabot> away from me slowly....
02:25:42 <Morloth|Zzz> Greetings
02:26:24 <shapr> hoi Morloth
02:26:37 <boegel> Morloth: you're joining while sleeping ? impressive
02:27:15 <Morloth> boegel: It's not the only channel I'm currently on ;)
02:27:35 <shapr> Are you learning Haskell, or a long time user?
02:27:47 <Morloth> I'm just learning
02:27:59 <Morloth> For 3 days now I guess
02:28:50 <Morloth> Most of you are long time users I suppose?
02:28:52 <shapr> Cool, have any questions?
02:28:57 <shapr> Nah, it's a mix.
02:29:03 <Morloth> shapr: Actually I do :)
02:29:06 <shapr> Plus, even long time users have lots to learn.
02:29:24 <shapr> I've been using Haskell for about four years, and there's still so much to explore.
02:29:36 <shapr> The basics are easy to pick up, but the really cool stuff stretches out forever.
02:29:45 <shapr> Morloth: ask me!
02:29:47 <Morloth> shapr: I see :)
02:29:48 <Morloth> ok
02:29:52 <shapr> me me! pick me!
02:30:05 <ValarQ> :)
02:30:27 <shapr> The last few days I've been playing with a TCP/IP stack written in pure Haskell. That's just immensely cool.
02:30:38 <Morloth> I wish to sqrt a integer and then determain wether the result is a int. So I tried something like sqrt x - primIntToFloat( floor x ) == 0
02:31:01 <dons> whether the result is an int?
02:31:12 <shapr> I've been swapping emails with a guy who implemented the basics of 802.11 WiFi in pure Haskell, on top of the Gnu Universal Software Radio Peripheral.
02:31:19 <Morloth> It works well when I put in on the command line in hugs. But when I put in in, say test.hs, it doesn't work. Hugs complains it doesn't know primIntToFloat
02:31:23 <shapr> This community is just *so* cool :-)
02:31:25 <Morloth> dons: yes
02:31:33 <dons> what do you mean by that?
02:31:45 <flux__> shapr, I imagine there are still some issues with using that in real time..
02:31:59 <Morloth> dons: I mean that sqrt 5 != a integer but a rational number, but sqrt 4 is an integer
02:32:14 <dons> in haskell there are no types at runtime. they're all removed  at compiled time. so you can't write code that checks a type
02:32:25 <shapr> flux__: Yes, you're right. He said that 1MBit/sec is probably the best it could do right now, but you've got to admit that's not bad for a Google Summer of Code student project :-)
02:32:32 <Morloth> dons: But the code I posted above works quite well
02:32:42 <Morloth> exept when I try to load it from a .hs file
02:32:48 <flux__> wow, I wouldn't have expected even 1Mbit/s, I think that's pretty good ;)
02:33:06 <shapr> flux__: He also said that the biggest problem is USB bandwidth between the USRP and the host.
02:33:15 <Morloth> shapr: cool! :)
02:33:18 <flux__> shapr, usb1.1/2?
02:33:20 <shapr> Anyway, I'm going to ask him if I can post his reply to my blog.
02:33:32 <shapr> USB2, the USRP pages say that USB1 is way too slow.
02:33:54 <Morloth> shapr: do you know what I do wrong?
02:34:13 * shapr looks
02:34:30 <flux__> I imagine pci is the only way to fix that
02:34:47 <Morloth> the code i use = 'bevatKwadraat (x:xs) = (sqrt x) - primIntToFloat (floor (sqrt x)) == 0 || bevatKwadraat xs
02:34:49 <shapr> flux__: He said something about a quadrature thingy... I got the impression it compresses the data?
02:35:28 <Morloth> and I get ERROR opdracht3.hs:44 - Undefined variable "primIntToFloat"
02:35:35 <shapr> Morloth: Why not check to see if the floor of the result equals the result?
02:36:05 <Morloth> shapr: that's what I do, right?
02:36:31 * shapr drinks more caffeine and looks again.
02:36:56 <Morloth> But I have to convert the Int I get from floor to a float, because sqrt x gives me a float as result
02:37:07 <shapr> oh
02:37:34 <shapr> You can use fromIntegral
02:37:58 <Morloth> shapr: instead of primIntToFloat ?
02:38:15 <shapr> I don't think I know primIntToFloat
02:38:17 <shapr> @index primIntToFloat
02:38:17 <lambdabot> bzzt
02:39:36 <Morloth> Hmmz... perhaps it's some sort of extention?
02:39:50 <shapr> > let result = sqrt 5 in result == fromIntegral (floor result)
02:39:51 <lambdabot> False
02:39:55 <shapr> > let result = sqrt 4 in result == fromIntegral (floor result)
02:39:56 <lambdabot> True
02:40:00 <shapr> Like that?
02:40:05 <Morloth> like that :)
02:40:08 <Morloth> thanks
02:40:43 <shapr> But before you take off to use that code, let me explain it...
02:40:51 <shapr> @type fromIntegral
02:40:52 <lambdabot> forall b a. (Num b, Integral a) => a -> b
02:41:00 <shapr> Morloth: Do you know typeclasses already?
02:41:22 <Morloth> shapr: I'm kinda new to this all, but I do understand a part of it
02:41:47 <shapr> Um, what other programming languages do you know? Maybe I can relate Haskell to something else?
02:41:57 <Morloth> C, C++, Java
02:42:11 <Morloth> and prolog, a little bit :)
02:42:44 <shapr> Ok
02:42:58 <shapr> Typeclasses are somewhat like interfaces in Java
02:43:44 <Morloth> ok
02:44:06 <shapr> You can define an operation on a bunch of different types.
02:44:09 <shapr> @wiki HaskellDemo
02:44:10 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo
02:44:38 <Morloth> shapr: you mean because of polymorphism?
02:44:53 <shapr> Yeah, typeclasses give you one flavor of polymorphism.
02:45:04 <shapr> But I can never remember the names of the different types.
02:45:07 <shapr> er, flavors..
02:45:23 <Morloth> :)
02:46:04 <Morloth> But (Num b, Integral a), means a tuple of a Number type and a Integral type? or should I interprent that differently?
02:46:21 <shapr> Good guess, but in this case that's about typeclasses.
02:46:29 <shapr> Anything before the => has to do with typeclasses.
02:46:52 <shapr> In this case, it means the b type must be an instance of Num, and the a type must be an instance of Integral.
02:47:09 <musasabi> Morloth: (A t1, B t2) => "given t1 in A and t2 in B ..." 
02:47:52 <Morloth> ah, ok
02:47:59 <Morloth> ah, ok! I get it :)
02:48:36 <shapr> Hm, what's the url to the Haskell report about typeclasses?
02:48:52 <shapr> Anyway, the standard typeclasses have useful stuff like Eq and Ord.
02:49:20 <shapr> Eq is a typeclass with two methods, (==) and (/=), and you only really have to define one of those for your type.
02:49:30 <shapr> It's equality, unsurprisingly.
02:49:47 <shapr> Ord is ordered, and to be an instance of Ord your type must already be an instance of Eq. Makes sense, yeah?
02:50:20 <shapr> Ok, short intro to typeclasses is over, do you have any questions about typeclasses or anything else Haskell?
02:50:29 <Morloth> I don't know what you mean with oredered? Like ordered in a list or something?
02:50:41 <basti_> the set would be ordered.
02:50:42 <musasabi> Morloth: comparison.
02:50:45 <basti_> you can compare its elements
02:50:48 <Morloth> shapr: Nah, I'll look it up on the web. Thanks for your time :)
02:50:53 <Morloth> ah, ok
02:51:00 <Morloth> makes sence then =)
02:51:02 <basti_> > compare 4.24 5.98
02:51:02 <lambdabot> LT
02:51:06 <basti_> > compare "hi" "hello"
02:51:07 <lambdabot> GT
02:51:18 <basti_> :-o
02:51:20 <musasabi> @type (>)
02:51:20 <lambdabot> forall a. (Ord a) => a -> a -> Bool
02:51:39 <Morloth> Ok, I get it :))
02:51:58 <Morloth> Thanks again for your time. I'll be back when I get stuck again ;)
02:52:22 <shapr> Ok, feel free to ask any questions you get.
02:53:01 <Morloth> Ok, I will
02:53:43 <gour> shapr: what would be appropriate structure for a representation of months 
02:54:02 <shapr> It depends on what you want.
02:54:11 <shapr> Have you seen Ashley Yakeley's Time library?
02:54:14 <gour> shapr: i need e.g. Nov + 4 = Mar
02:54:23 <gour> no
02:54:39 <gour> have you url?
02:54:56 <shapr> gour: In that case, you could define data Months = January | February | ... deriving Enum
02:55:32 <gour> shapr: and i can have basic arithmetic with Enum class only?
02:56:30 <shapr> Enum is the class that does [1..5]
02:57:14 <shapr> Wouldn't Nov + 4 be Jan?
02:57:32 <shapr> You wouldn't get Nov + 4 directly from Enum, but you would get succ and pred
02:57:39 <shapr> > succ 1
02:57:40 <lambdabot> 2
02:57:46 <gour> shapr: that i know, but i need a kind of 'cyclic' structure', like when you normalizing 450deg , you should get 90deg
02:57:46 <shapr> > succ True
02:57:48 <lambdabot> Prelude.Enum.Bool.succ: bad argument
02:58:37 <gour> shapr: ok, let me study Enum class more closely
02:59:08 <shapr> I don't understand, normalizing 450deg? Oh, you mean 450 deg around a circle.
02:59:11 <gour> shapr: 450deg= 360 +90
02:59:20 <gour> yup
03:00:16 <gour> i actually need a structure for handling zodiac signs, where e.g. 4th house from the 12th is actually the 3rd :-)
03:00:41 <gour> always one less, 'cause one starts counting from the starting house :-)
03:01:28 <gour> shapr: have to go now for about 30min, will be back
03:01:34 <shapr> ok
03:12:42 <samc> anyone know how hack computers would tech me?
03:14:15 <shapr> hey samc!
03:14:19 <shapr> where ya been?
03:14:35 <shapr> Man, I had something to tell you... what was it.
03:14:56 <shapr> You'd asked about something... I can't remember it now though.
03:15:10 <shapr> samc: Do you have a blog or something?
03:15:20 <samc> hey shapr!
03:15:32 <samc> 1. it a long story
03:15:40 <samc> 2. ;(
03:15:44 <samc> 3. no
03:16:26 <shapr> samc: Are you back for good? Or just a short visit?
03:16:50 * samc shrugs
03:19:01 <araujo> Goood Morning!!
03:19:02 <shapr> samc: Do you have a website?
03:19:05 <shapr> hola araujo 
03:19:15 <araujo> Hola shapr 
03:19:17 <araujo> What's up?
03:20:17 <shapr> Fun code!
03:20:26 <araujo> hah cool
03:20:31 <samc>  /me tries to pick up what could be loosely called his projects but can hardly even remember how to use the tools (and it's only been weeks)
03:20:31 <shapr> lambdas on the wire!
03:20:31 * araujo getting read for it too
03:20:36 <samc> oops
03:20:37 * araujo getting ready for it too
03:21:15 <samc> shapr, no I have nothing
03:21:41 <tic|school> shapr, did you see the "boring code... boring code... fun code fun code fun code BeOS code BeOS code fun BeOS code.." ad in DrDobbs a couple of years back? 
03:21:59 <shapr> No?
03:22:22 <tic|school> you said "fun code", one of my neurons got a callback. :)
03:22:22 <shapr> But I can understand the sentiment... Haskell makes me feel that way!
03:22:53 <tic|school> *nod*
03:23:35 <shapr> This pure Haskell TCP/IP stack is really cool.
03:24:00 <shapr> I wish I had 800 euro to buy a Gnu Universal Radio Software Peripheral and try to improve the pure Haskell WiFi implementation.
03:24:39 <araujo> :-]
03:24:53 <shapr> Oh, I have a better idea... I'd plug the USRP into my colocated box, down at the local ISP.
03:25:08 <shapr> Then I'd let Haskell developers play with it.
03:25:26 * araujo thinking to code some Haskell tool to generate web-pages
03:25:34 <Morloth> crap :/, shapr can you help me with 1 more question?
03:26:49 <shapr> Sure, ask me
03:27:06 <Morloth> I'm doing something wrong, but I don't get it... I try to write a simple function -> testHugs :: Int -> Bool, testHugs x = sqrt x == 0. When I load this it complains -> Instance of Floating Int required for definition of testHugs
03:27:31 <Morloth> But I never use a Floating Int as input, so I don't understand why it's complaining about it
03:27:42 <shapr> @type sqrt
03:27:43 <lambdabot> forall a. (Floating a) => a -> a
03:27:57 <shapr> sqrt wants an instance of Floating
03:28:16 <Morloth> But Int is a type of Floating, so it shouldn't matter, does it?
03:29:19 <shapr> I don't think Int is an instance of Floating.
03:30:28 <Morloth> so I should use testHugs :: (Floating a) => a -> Bool
03:30:30 <Morloth> ?
03:31:12 <shapr> You can use fromIntegral to convert the zero to a Floating
03:31:37 <araujo> Int belongs to Real
03:31:49 <araujo> Float belongs to Fractional
03:32:06 <araujo> Floating is subclass of Fractional
03:32:26 <araujo> So you need to pass to sqrt both a Float or a Double
03:32:33 <Morloth> araujo: ah, ok
03:34:11 <araujo> That description is going from the top , down through the class hierarchy :-)
03:34:25 <samc> then you can finally discover which numbers have a square root of zero
03:34:55 <araujo> > sqrt 0
03:34:56 <lambdabot> 0.0
03:35:13 <araujo> @type 0
03:35:14 <lambdabot> forall t. (Num t) => t
03:36:58 <Morloth> yes, it works now :)
03:37:03 <samc> \me apologises
03:37:03 <Morloth> But the function is rather funcy...
03:37:10 <samc> bah what is it
03:37:48 <Morloth> bevatKwadraat (x:xs) = let result = sqrt (fromInteger (toInteger x)) in result == fromIntegral (floor result) || bevatKwadraat xs
03:37:55 <Morloth> That can't be right :)
03:38:29 <Morloth> bevatKwadraat :: [Int] -> Bool
03:38:46 <SamB> Morloth: what language is that?
03:38:56 <Morloth> Haskell ?
03:39:00 <Morloth> oh, Dutch
03:39:38 <SamB> hehe
03:39:44 <SamB> I know its Haskell.
03:39:51 <Morloth> I know, sorry :)
03:39:54 <SamB> ML is uglier ;-)
03:51:46 <araujo> Can somebody help me to understand what happens here: [1,2,3] >> (\ x -> return 1)
03:52:09 <araujo> @eval [1,2,3] >> (\ x -> return 1)
03:52:10 <lambdabot>   The lambda expression `\ x -> ...' has one arguments,
03:52:10 <lambdabot>   but its type `m b' has none
03:52:27 <araujo> mm...
03:52:47 <gour> shapr: i'm back, had to wash some pots in the kitchen :-)
03:53:02 <mauke> @type (>>)
03:53:02 <lambdabot> forall (m :: * -> *) b a. (Monad m) => m a -> m b -> m b
03:53:33 <araujo> mauke, yeah, though i don't see the relation with the output.
03:54:35 <mauke> > (\x -> 0) :: Int
03:54:36 <lambdabot>   The lambda expression `\ x -> ...' has one arguments,
03:54:36 <lambdabot>   but its type `Int' has none
03:54:36 <lambdabot>   In the expression: (\ x -> 0) :: Int
03:55:07 <mauke> looks like you get that error when trying to use a function where a non-function is expected
03:55:26 <araujo> oh.. mm, look, i get a result here with ghci
03:55:37 <araujo> lambdabot gives that error though
03:55:46 <araujo> i was asking about the result i get in ghci
03:55:52 <araujo> Prelude> [1,2,3] >>= (\ l -> return 1)
03:55:53 <araujo> [1,1,1]
03:56:45 <shapr> There's a really cool thread on strong normalization happening on The Types Forum, http://lists.seas.upenn.edu/mailman/listinfo/types-list or gmane.comp.science.types
03:57:17 <mauke> > [1,2,3] >> return 1
03:57:18 <lambdabot> [1,1,1]
03:58:27 <araujo> Oh, interesting... that syntax doesn't work here
03:58:45 <mauke> what error do you get?
03:59:12 <araujo> lisppaste2, help?
03:59:13 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
03:59:29 <lisppaste2> araujo pasted "error" at http://paste.lisp.org/display/13699
04:00:03 <mauke> >>, not >>=
04:00:25 <mauke> a >> b is equivalent to a >>= \_ -> b
04:00:30 <araujo> Oh, bah, 
04:00:31 <araujo> yeah
04:00:44 * araujo should probably get some sleep
04:04:15 <araujo> mauke, anyway, after my stupid typo, i still got the doubt of the output
04:04:30 <mauke> what part do you not understand?
04:04:40 <mauke> it's like [1 | _ <- [1,2,3]]
04:05:01 <araujo> What i can deduce is the fact that 'return' tries to create a list data type, and takes the first value of the list for it
04:05:23 <mauke> return x = [x]
04:05:37 <araujo> uhu, i think i can see what happens
04:05:42 <araujo> Thanks.
04:34:41 <SamB> > [1,2,3] >> return "Hello"
04:34:42 <lambdabot> ["Hello","Hello","Hello"]
04:35:42 <ProfTeggy> Hi all.
04:37:05 <SamB> ProfTeggy: hello
04:37:41 * shapr entertains himself by leaving hidden Discordian messages in html comments in his LtU post.
04:54:50 <boegel> @seen CosmicRay 
04:54:50 <lambdabot> CosmicRay is in #haskell. I don't know when CosmicRay last spoke.
05:02:51 <sieni> lambdabot: @pl map(\z->(ord z-48)`mod`39)
05:02:52 <lambdabot> map ((`mod` 39) . subtract 48 . ord)
05:03:11 <sieni> "ok"
05:10:20 <araujo> Oh, c'mon, that was easy :-P
05:27:23 <CosmicRay> hello boegel
05:29:19 <boegel> CosmicRay: hey ! how about HWN ?
05:30:45 <CosmicRay> boegel: I will try to have it out this morning
05:30:55 <CosmicRay> ran out of time tuesday and yesterday (though I did not forget this time <g>)
05:31:20 <boegel> heh
05:31:23 <boegel> okay, cool then
05:31:36 <boegel> there's been _a lot_ of posting on the mailing lists though :)
05:32:42 <CosmicRay> urgh.  err, I mean, great... ;-)
05:33:01 <boegel> :P
05:33:19 <boegel> one _very_ long discussion on "Making Haskell more open", enjoy :)
05:35:08 <CosmicRay> oh good.
05:35:19 <CosmicRay> then I can link to the thread starter and say "read the interesting discussion" ;-
05:35:43 <CosmicRay> I don't link summarizing controversial subjects.  prefer to just say "read the thread" ;-)
05:36:07 <boegel> well, there's one interesting post which poriveded a summary
05:36:11 <boegel> *provided
05:36:19 <boegel> @y0w
05:36:19 <lambdabot> I'm GLAD I remembered to XEROX all my UNDERSHIRTS!!
05:37:47 <boegel> CosmicRay: I think it was a post from Gour
05:38:04 <CosmicRay> boegel: excellent
05:38:17 <boegel> I think that's the most important one in the whole discussion
05:38:43 <boegel> the others are basically people giving their own opinion, as far as I recall
05:39:48 <shapr> What did I miss?
05:40:18 --- topic: set to '["Haskell is still the language of choice for discriminating hackers", "logs: http://tunes.org/~nef/logs/haskell/","http://www.haskell.org/learning.html","see discussion on http://haskell.org/hawiki/hIDE about the development of an IDE for Haskell","http://www.haskell.org/tmrwiki/IssueFive","We put the Funk in Funktion","http://sequence.complete.org/hwn/20051101"]' by shapr
05:40:31 <CosmicRay> shapr: http://changelog.complete.org/node/419
05:40:33 <samc> CosmicRay, very funny last time it was late
05:40:42 <samc> we expect no less this time
05:40:56 <samc> I jest ofcourse
05:41:10 <CosmicRay> samc: hehe, that time I actually *forgot* and it was a week late.  probably won't go into as much detail this time.  but I'm glad somebody read it ;-)
05:41:12 <shapr> CosmicRay: Yeah, I saw that, it's awesome!
05:41:16 <CosmicRay> <g>
05:41:43 <shapr> I've discovered that Drupal allows you to put html comments into posts.
05:41:59 <CosmicRay> heh
05:42:08 <CosmicRay> you sound like you have some evil plan
05:42:13 * shapr grins
05:42:13 <boegel> CosmicRay: hey, I read it too, and I think you should use your fantasy again to give us some explenation !
05:42:20 <CosmicRay> hehe
05:42:42 <samc> so there is no misunderstanding; I wasn't jesting about the very funny part
05:42:55 <shapr> CosmicRay: You could look at the html source of my most recent post to LtU, near the word Illuminate. But it just says <!-- Do you see the fnords? -->
05:43:00 <CosmicRay> boegel: I actually researched the history of the hour for that one ;-)
05:43:07 <CosmicRay> hehe
05:43:37 <shapr> Hey, how does one run the soundrecorder app on a recent copy of windows?
05:43:59 <shapr> Just Start -> Run "soundrec" ?
05:44:06 <shapr> Does anyone use windows here?
05:44:15 <shapr> I can't believe I said that...
05:45:23 <CosmicRay> shapr: scary, isn't it.
05:45:32 <CosmicRay> I didn't realize until yesterday that Windows XP Pro costs $300.
05:45:54 <CosmicRay> I had to order a copy for an employee here and must have said something when I saw that.
05:46:03 <shapr> Linux costs significantly less than $300 USD.
05:46:05 <CosmicRay> my coworker got a good chuckle out of it.
05:46:09 <shapr> hah
05:46:12 <CosmicRay> indeed it does, and is worth more ;-)
05:47:53 <joelr1> shapr: so you wanted me to write about my experience?
05:48:03 <shapr> yes please!
05:48:06 <joelr1> shapr: and i just did. check haskell-cafe ;)
05:48:26 <shapr> w00
05:48:40 <joelr1> i'll detail things in the blog in the next week or so, showing my bad and (supposedly) good practices
05:48:48 <Saulzar> I guess it becomes more relavant now that hardware is cheaper
05:48:51 <joelr1> nothing like comparing chunks of code
05:49:03 <Saulzar> Suddenly you notice that half the bill is taken by windows rather than a tenth
05:49:23 <boegel> shapr: click start -> Programs -> Accesoires -> Recorder
05:49:26 <boegel> something like that
05:49:36 <boegel> why are you on windows anyway ?
05:50:39 <CosmicRay> joelr1: wow, you have a thread here ("GHC cannot compile my code") made up almost entirely of your own posts ;-)
05:51:15 <joelr1> CosmicRay: yes, i know. that was a reality show
05:51:19 <CosmicRay> hehe
05:51:20 <shapr> joelr1: Great post!
05:51:28 <joelr1> i was trying to help people troubleshoot my issues
05:51:40 <shapr> joelr1: I think you described the Haskell experience correctly.
05:51:45 <joelr1> shapr: i'm saved by the bell and so is my reputation :-)
05:51:46 <dblhelix> yeah, thumbs up for joelr1
05:51:57 <joelr1> shapr: which part was the correct one?
05:51:59 * joelr1 bows
05:52:04 <shapr> joelr1: All of it...
05:52:16 <joelr1> nothing like a challenge of learning a new language on a new project
05:52:26 <shapr> That is, Haskell (GHC?) is ready for commercial usage, but very little has been done in that area.
05:52:46 <joelr1> shapr: i would like to hack ghc maybe :-) i'm in love with haskell 
05:52:52 <shapr> Yeah, it's beautiful.
05:53:08 <dcoutts> joelr1, well the more ghc hackers the better
05:53:22 <shapr> I also think you said something like "In Haskell, start with the simple (naive?) approach first." or maybe "premature optimization is the root of all evil"
05:53:30 <joelr1> haskell is deceptively beautiful 
05:53:40 <shapr> What's deceptive about that?
05:53:51 <dcoutts> we don't have enough ghc hackers and the ones we've got are overworked (though they are incredably productive)
05:53:53 <joelr1> shapr: deceptive is trying to grasp fundeps :) 
05:53:59 <shapr> I think it's beautiful and deceptively simple.
05:54:06 <joelr1> shapr: they are just a few lines of code, right? ;-) just some | -> etc
05:54:11 * shapr grins
05:54:19 <dcoutts> joelr1, you can add your voice to the current debate on records in Haskell
05:54:40 <joelr1> shapr: re: naive approach... it helps to know things beforehand
05:54:43 <shapr> Like I always say, "Haskell has very few moving pieces, but those pieces express very many powerful ideas."
05:54:49 <joelr1> shapr: premature optimization is NOT always the root of evil
05:54:52 <dcoutts> joelr1, much of the complexity and problems you ran into were due to trying to avoid the current standard Haskell records
05:55:02 <joelr1> shapr: i spent a week of sleepless nights rewriting the whole shebang 
05:55:08 <joelr1> dcoutts: yeah, that's for sure
05:55:19 <shapr> joelr1: Yeah, you kicked ass :-)
05:55:19 <joelr1> dcoutts: the namespace thing sucks :(
05:56:16 <dcoutts> joelr1, they're talking about that on the haskell mailing list at the moment in the thread "Improvements to GHC"
05:57:10 <sieni> http://yro.slashdot.org/yro/05/11/17/1350209.shtml?tid=188&tid=158
05:57:15 <joelr1> shapr: thank you!
05:57:23 <joelr1> dcoutts: i know, i track it
05:57:40 <joelr1> dcoutts: i guess i'll throw in my $.2
05:57:42 <joelr1> .02
05:58:05 <dcoutts> joelr1, I think one of the reasons that we don't complain about records is that the kind of programs we write often don't need records.
05:58:28 <dcoutts> joelr1, "real world" apps that deal with many messy details do often need records
05:59:06 <joelr1> dcoutts: indeed
05:59:08 <dcoutts> joelr1, so the records issue is one that should be looked at from a practical application perspective (as well as from the type theory point of view)
05:59:22 <shapr> I use a lot of records.
05:59:38 <shapr> But then, I'm not an academic :-)
05:59:39 <dcoutts> shapr, you write useful software
05:59:56 <shapr> joelr1: So, starting a Haskell consultancy group? Want to hire me? ;-)
05:59:57 <dcoutts> I find my GUI software uses more records
06:00:00 * shapr grins
06:00:37 * joelr1 already has Cale in the queue 
06:00:38 <joelr1> hehe
06:00:43 <joelr1> shapr: you will be next then
06:00:52 * shapr cheers
06:01:07 <joelr1> a haskell consultancy in beautiful tenerife, canary islands
06:01:10 <joelr1> yummy
06:02:09 <shapr> I'd send in my application immediately!
06:02:33 <shapr> That's the place with the incredible mountains right?
06:02:53 <shapr> That would be so perfect for mountain unicycling.
06:03:26 <dcoutts> shapr, mmm
06:03:39 * dcoutts just got the axel on his coker fixed
06:04:18 <shapr> I'd like to try a Coker. I'm having fun with my 26" Large Marge plus 3" Gazz though.
06:04:31 <dcoutts> it's quite a different experience
06:04:49 <dcoutts> shapr, well next time you're in .uk ... :-)
06:04:52 <shapr> ok :-)
06:05:28 <dcoutts> shapr, you know we play weekly unicycle hockey in Oxford :-)
06:05:37 * dcoutts loves this city
06:06:36 <basti_> strangest sport ever: underwater rugby ^^
06:07:01 <dcoutts> strangest sport ever: unicycle quiddich
06:07:12 <shapr> strangest sport ever: extreme ironing
06:07:37 <sieni> strangest sports ever: watersports
06:08:02 <tuomov> how about spectator sports?
06:08:38 <basti_> synchronous high diving is cool though
06:09:14 <joelr1> shapr: yeah, amazing mountains
06:09:15 <joelr1> http://en.wikipedia.org/wiki/Tenerife
06:09:25 <joelr1> http://en.wikipedia.org/wiki/Image:Anaga.jpg
06:10:43 <joelr1> i think your falls are gonna be spectacular, though ;) might wanna wear a skydiving rig with a propeller, though, for when you really start to take off
06:11:53 <dblhelix> joelr1: how would you achieve moving labels out of the value-level namespace? then, they won't be first class anymore, won't they? or am I not understanding you correctly?
06:12:30 <joelr1> dblhelix: i'm not that deep yet, see. i don't even know if the labels _should_ be first-class, etc. or if they should be functions
06:12:54 <dblhelix> joelr1: if they are functions, they *are* first class
06:13:14 <dblhelix> joelr1: for instance, you can feed them as arguments to higher-order functions
06:14:11 <dblhelix> data Point = P {x :: Int, y :: Int} ; collectXs :: [Point] -> [Int]; collectXs = map x
06:14:17 <dblhelix> (and stuff like that)
06:14:46 <joelr1> dblhelix: ah
06:15:09 <joelr1> well don't know how to move them into their own namespaces then. maybe introduce namespaces into haskell?
06:15:42 <ProfTeggy> let xmlns:foo = "..." in foo:x = 42
06:15:45 <ProfTeggy> *shudder*
06:15:52 <ProfTeggy> ;-)
06:16:36 <ProfTeggy> Oh, and (:) has better uses in Haskell.  
06:16:58 <dblhelix> joelr1: well, weren't you pleading for per-type namespaces for labels? that would definitely break first-classness... it would complicate currying... etc... not a good idea, imho
06:18:00 <joelr1> dblhelix: hey, i was just asking :-)
06:18:08 <dblhelix> ProfTeggy: you've clearly read too many horror stories... be careful, those angle brackets soon will be chasing you in your dreams
06:18:18 <joelr1> honestly, this is the quintessential business users vs. programmers debate :-)
06:18:23 <dblhelix> joelr1: didn't you like my answer? ;)
06:18:24 <ProfTeggy> dblhelix: <huh/>?
06:18:35 <joelr1> dblhelix: not a single bit! 
06:18:36 <joelr1> see
06:19:05 <joelr1> i just need stuff to do my job but you are telling me that my job cannot be done because it will break the beauty of the tool that you supplied... for me to do my job :D
06:19:17 <joelr1> dblhelix: i can dig you if i wear my programmer's hat, though
06:19:57 <dblhelix> joelr1: ah, so... basicly... you want us to design a language just for you, huh? :)
06:21:02 <joelr1> nah, i just think that it's common sense for records to have their own namespaces.. or just the field accessors to be particular to each record. whichever way is easier
06:21:23 <joelr1> it just makes sense (tm)
06:22:31 <dblhelix> joelr1: seriously, records in Haskell are not perfect. for one thing, they aren't really first class: you can't pass a label to a function and use it to update a record, for example... one can think of more nifty record systems, indeed... you could take a look at some of daan leijen's papers, if you are interested
06:25:25 <joelr1> dblhelix: yes, i was going to
06:25:32 <joelr1> dblhelix: got urls?
06:25:47 <dblhelix> joelr1: www.cs.uu.nl/~daan
06:25:52 <joelr1> i found a like on lambda-the-ultimate but don't remember if i downloaded the paper
06:25:55 <joelr1> dblhelix: ok, thanks
06:43:08 <musasabi> The problem with nifty record systems is that everyone has their own.
06:43:30 <musasabi> and most of them create error messages from hell upon errors
06:43:34 <basti_> hmm
06:43:46 <basti_> i experienced records as rather "hum" too
06:43:59 <basti_> i actually coded that yi interface without records
06:44:08 <basti_> but with something... that... became... ugly in it's place
06:46:14 <basti_> sp00ky.
06:46:29 <basti_> i would like a pat on the back for that, please.
06:47:13 * basti_ wails
06:48:09 <basti_> musasabi: please.
06:50:28 <basti_> hello wolverian 
06:50:39 <basti_> are you a perl6 hacker?
06:59:52 <moonlite_> i want to do this: "trig(x)*length" where x and length is an Int and trig is either sin or cos. I've made a higher order function that should do this for me. However im having conversion problems. I've tried using round and fromInteger in ways that seem logical to me, but nothing seems to work. How do i do this?
07:01:16 <basti_> hmmm
07:01:42 <moonlite_> oh, i have a mockup: http://pastebin.com/433106
07:02:31 * musasabi pats basti_ in the back
07:02:38 <musasabi> (was away hacking HLists)
07:02:40 <basti_> mmmmmmh
07:02:41 <basti_> :D
07:02:56 * boegel leaves quickly
07:03:07 <basti_> @hoogle Integral a=> a->Double
07:03:08 <lambdabot> Prelude.fromIntegral :: (Integral a, Num b) => a -> b
07:03:31 <basti_> > let x=5::Int in (sin (fromIntegral x))*(fromIntegral x)
07:03:32 <lambdabot> -4.794621373315692
07:03:35 <basti_> there you go
07:03:52 <musasabi> Has anyone got a version of HaskellDB which use HList rather than home cooked records?
07:04:12 <basti_> hmm mine uses a wacko list construction
07:04:20 <basti_> let me quote something musasabi 
07:04:21 <moonlite_> basti_: thx
07:04:50 * musasabi would rather avoid writing conversions from one record format to the other (and translating properties is tedious at best)
07:05:03 <basti_> lisppaste2: @url
07:05:04 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
07:05:44 <lisppaste2> basti_ pasted "HaskellDB HList?" at http://paste.lisp.org/display/13704
07:09:49 <musasabi> Is it possible to make two types aliases of eachother?
07:10:04 <musasabi> like type, except I want the single constructor to work too.
07:10:35 <musasabi> data Foo = Foo; type Bar = Foo; <- and then some way to get "Bar" work as a value.
07:11:36 <bringert> I don't know of any HaskellDB HList hack
07:11:45 <bringert> but it should certainly be possible
07:12:46 <xerox> musasabi: fundeps?
07:13:06 <basti_> musasabi: i don't have a clue.
07:13:35 <basti_> "type" are just macros arent they?
07:13:40 <basti_> it should behave benign imo
07:13:53 <musasabi> mmh.
07:13:57 <musasabi> -> hack it then
07:14:01 <bringert> hmm, data constructor synonyms, I don't think you can do that easily
07:14:11 <bringert> in current haskell that is
07:14:22 <basti_> I don't have a clue.
07:14:22 <bringert> adding it shouldn't be a problem I guess
07:15:46 <tic|school> hrm, stuck in Monad country.  Must bind take an `a' and return a `b'?
07:16:05 <basti_> tic|school: 
07:16:10 <basti_> @type (>>=)
07:16:11 <lambdabot> forall (m :: * -> *) b a. (Monad m) => m a -> (a -> m b) -> m b
07:16:15 <bringert> tic|school: what do you want it to return?
07:16:15 <basti_> tic|school: easy?
07:16:48 <tic|school> bringert, I'm not quite sure. ;-) Maybe it'd be easiest to have a look at some code, because I can't quite explain myself..
07:18:25 <tic|school> http://rafb.net/paste/results/2tXhMy37.html
07:18:54 <tic|school> do I need to add `b' to my data type?
07:21:24 * shapr 's head explodes
07:21:49 <tic|school> Hm. Think I fixed it. :)
07:21:57 <tic|school> Dunno if it was much of a fix though, but it seems to work.
07:22:07 <tic|school> maybe I should let GHC take care of the type inference for me..
07:22:21 <shapr> Aaugh, I just started seeing connections among strong normalization, universal types, the calculus of constructions, and impredicative type systems.
07:25:53 <shapr> Has anyone here read Michael Dummet in connection with the Curry-Howard isomorphism?
07:26:13 <shapr> Is there a Dummet tutorial that's aimed towards a type theory background?
07:26:55 <xerox> shapr: was that "What's so appealing about Blah-LÃ¶f type theory" ?
07:27:04 <shapr> Yeah, that's the right thread.
07:27:20 <xerox> I read it!
07:27:27 <shapr> Did you understand it?
07:27:32 <xerox> I didn't understand it completely.
07:27:44 <xerox> I think it pass on things needed to understand its flow
07:28:14 <shapr> Poetix might know about Michael Dummet.
07:42:34 <musasabi> mmh too easy :-)
07:43:21 <musasabi> Of course there are minor glitches like both HList and HaskellDB wanting to use ".{+,-,*,<}." for different purposes...
07:44:27 <shapr> Can a fragment offset in a packet be negative?
07:45:26 <musasabi> you should not send such packets, but they may come out of network.
07:47:11 <Igloo> I would have expected the field to be defined as unsigned
07:48:03 <shapr> The standard only says 13 bits that I can see.
07:50:04 <shapr> I'm looking at the bottom of page 13 of RFC791 ... I'll ask google if it's been superseded.
07:50:07 <musasabi> http://www.cs.helsinki.fi/u/ekarttun/haskell/haskelldb_hlist.diff for those wanting to try out crazy things.
07:52:32 <shapr> Looks like that's all the information, 13 bits.
08:11:50 <shapr> karma: hiya, learning Haskell?
08:12:20 <karma> Hello! Sorry for not-haskell question, but may be somebody can help me.. Had someone remember some resources\presentations on topic "(Computational) algebra in high-perfomance computing" or so. Thanks!
08:12:35 <karma> shapr, hello :) Yes, i learning Haskell :)
08:13:41 <shapr> karma: Do you have any Haskell questions?
08:14:27 <shapr> What fits into computational algebra?
08:16:50 <xerox> @docs Control.Exception
08:16:50 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Exception.html
08:18:12 <karma> shapr, effective modeling of CAS (computer algebra system) for parallel environment
08:19:17 <JKnecht> I wonder if http://www.sciencedirect.com/science?_ob=GatewayURL&_origin=CONTENTS&_method=citationSearch&_piikey=S0165011405003386&_version=1&md5=83f40dd4b090478
08:19:57 <JKnecht> 967a8123d70202012 is a positive sighting for a (possible) Haskell fuzzification.
08:20:44 <xerox> JKnecht: it is not free, is it?
08:20:46 <JKnecht> ( Rotation-invariant t-norm solutions of a system of functional equations )
08:21:20 <JKnecht> if you are in an academic environment prolly so. Should be accessible thru your libraries systems.
08:21:54 <JKnecht> s/libraries/whatever the correct possive form is/
08:22:51 <JKnecht> (in the current Fuzzy Sets and Systems )
08:23:32 <musasabi> How do I import an operator qualified?
08:23:58 <shapr> I'm not in an academic environment, but I tend to read these sorts of papers, and advertise the good ones to my friends.
08:23:59 <musasabi> "Foo.<operator>" does not work and neither does "Foo.(<operator>)"
08:24:05 <shapr> I guess these guys just miss out though.
08:25:24 <JKnecht> Not if they're U.S. taxpayers. Should be able to just go to some local institutions library and get free access with positive identification.
08:25:33 <ntgrl> musasabi: (Foo.<operator>) ?
08:26:05 <shapr> I paid US taxes for 27 years, but nowadays I'm in Sweden. How do I get access to research that was paid for by my taxes?
08:26:54 <JKnecht> SOL? :)
08:27:11 <musasabi> ntgrl: thanks
08:28:55 <shapr> From my viewpoint, authors who produce papers that have no freely accessible versions are SOL. Because, one of the roles I've chosen is to massage heavy duty research into a form that's accessible to the average motivated commercial programmer.
08:29:06 <rep> http://humanupgrades.com/
08:29:19 <xerox> @wtf SOL
08:29:21 <lambdabot> *** "sol" wn "WordNet (r) 2.0"
08:29:21 <lambdabot> sol
08:29:21 <lambdabot>   n 1: a colloid that has a continuous liquid phase in which a
08:29:21 <lambdabot>     solid is suspended in a liquid [syn: {colloidal solution},
08:29:21 <lambdabot>     {colloidal suspension}]
08:29:23 <lambdabot> [5 @more lines]
08:29:37 <shapr> For example, my posts to lambda-the-ultimate.org, The Monad.Reader, my blog, mailing lists, etc
08:31:25 <shapr> But, I won't read papers that have no freely accessible version, just like I won't buy copy protected CDs.
08:33:36 <shapr> hiya malcolm_ 
08:33:44 <malcolm_> Hi shapr
08:33:48 <shapr> How's code?
08:34:11 <malcolm_> just made an official announcement of Blobs
08:34:43 <malcolm_> (therefore hoping to other people to join in and do coding for me...)
08:35:34 <shapr> cool!
08:37:38 <xerox> What's blobs?
08:37:43 <shapr> http://haskell.org/Blobs
08:37:51 <shapr> @where+ blobs http://haskell.org/Blobs
08:37:51 <lambdabot> blobs ~> http://haskell.org/Blobs
08:39:06 <pesco> malcolm_: Do you want automatic layout algorithms?
08:39:37 <malcolm_> pesco: personally, no, but I can see others might want to plug them in
08:39:57 <pesco> I've read a bunch of papers on different methods and have been wanting to implement them in Haskell since then.
08:40:39 <malcolm_> contributions willingly accepted...
08:41:03 <pesco> Okay. I'm not sure whether or when I will find the time though, anyway. But I'll make a mental note. :)
08:41:08 * pesco makes a mental note.
08:41:42 <malcolm_> pesco: I use yellow stickies for mental notes
08:44:50 <malcolm_> Does anyone know why http://meme.b9.com/ is lacking irc logs for #haskell for the last few days?
08:45:47 <shapr> Yeah, the cmeme bot flaked out.
08:45:59 <pesco> flaky botty
08:45:59 <shapr> I use http://tunes.org/~nef/logs/haskell
08:46:12 <shapr> Though maybe I should make a mirror on scannedinavian.
08:46:17 * pesco waves to shapr.
08:46:18 <pesco> Huhu.
08:46:20 <shapr> Or we could add logging to lambdabot?
08:46:21 <shapr> hiya pesco 
08:46:48 <pesco> Yes, we should add logging to lambdabot. Time that lazy bum got something to do!
08:47:27 * pesco nudges lambdabot.
08:47:58 <pesco> shapr: Prolog embeddings in Haskell are fun, but not as neat as I had hoped.
08:48:08 <pesco> s/are/look/
08:49:44 <malcolm_> shapr: the irc logs on tunes.org don't seem to have the nice search facility from meme
08:50:38 <shapr> malcolm_: Yeah, true, it's just raw text.
08:50:52 <shapr> Wouldn't be too hard to parse them into a useful format though.
09:06:15 <masm> With 'replace l = map (\x -> foldr max 0 l) l' how many times is the foldr expression evaluated in 'replace [1..10]'?
09:06:32 <xerox> 0
09:06:41 <xerox> ;-)
09:07:37 <boegel|home> @eval let replace l = map (\x -> foldr max 0 l) l' in replace [0..10]
09:07:38 <lambdabot>  Not in scope: `l''
09:07:44 <boegel|home> masm: ^
09:07:49 <boegel|home> @eval let replace l = map (\x -> foldr max 0 l) l in replace [0..10]
09:07:50 <lambdabot> [10,10,10,10,10,10,10,10,10,10,10]
09:07:52 <xerox> (1, when it's computed, if CSE is activated.)
09:08:02 <boegel|home> @eval let replace l = map (\x -> foldr max 0 x) l in replace [0..10]
09:08:02 <lambdabot>  add an instance declaration for (Num [b])
09:08:02 <lambdabot>   In an arithmetic sequence: [0 .. 10]
09:08:29 <boegel|home> nvm
09:09:00 <masm> xerox, CSE?
09:09:36 <Igloo> CSE isn't relevant
09:09:36 <xerox> masm: that is, 0 because Haskell is lazy; but if the common subexpression eliminator is active, the anonymous function passe to map is evaluated one time.
09:09:41 <xerox> Igloo: isn't it?
09:09:48 <xerox> OK!  Sorry :-|
09:09:52 <Igloo> In practice it'll be 1, but I don't know if the report guarantees that
09:10:04 <Igloo> No, there is no common subexpression
09:10:10 <Igloo> foldr max 0 l + foldr max 0 l would need CSE
09:10:21 <xerox> In some sense.. hmm, anyway.
09:11:17 <Igloo> You might need some sort of hoisting; I'm not familiar enough with the details of any of the implementations
09:12:27 <malcolm_> I think because the variable x bound by the lambda is never used, the expression foldr max 0 l will be lifted out.
09:14:52 <beelsebob_> malcolm_: does blobs have a significant advantage over dotty for graph output?
09:15:01 <beelsebob_> e.g. for pretty hat?
09:15:06 <beelsebob_> or should I continue to be lazy?
09:16:32 <eivuokko> Argh.  I am compiling ghc cvs head (in Windows), and it dies on "Prologue junk?:" and some asm.  What'd be good way to continue?
09:17:07 <beelsebob_> hehehe *evil face* compile yhc darcs?
09:17:54 <JKnecht> don't use Windows?
09:18:17 <malcolm_> beelsebob_: Blobs doesn't have automatic layout
09:18:49 <beelsebob_> malcolm_: if I have a layout, is there a significant advantage of using blobs over dotty?
09:18:58 <eivuokko> JKnecht, Do you have possibly something to say or just want a flamewar?
09:19:18 <beelsebob_> i.e. if I process with dotty and then go from a marked up dot file to a blob file, will I get any advantage?
09:19:24 <beelsebob_> I guess I could easily edit things
09:19:28 <beelsebob_> after the event
09:19:35 <malcolm_> beelsebob_: the point of Blobs is to allow manual layout and editing.
09:20:05 <beelsebob_> malcolm_: m'kay, so it would let us play with the graphs and highlight things postumously
09:20:12 <Igloo> eivuokko: Report it, along with details fo C compiler etc
09:20:28 <malcolm_> beelsebob_: I suppose.
09:21:07 <Igloo> I think you can do editting with some of the graphviz tools, but it seemed hard to use when I tried it
09:21:34 <beelsebob_> Igloo: indeed they are... particularly the Mac version doesn't support editing
09:21:50 <beelsebob_> I get really irritated by graphviz... it imposes some nasty constraints
09:22:04 <eivuokko> Igloo, Yeah, sure.  I just wished there was some way to continue so I could get working ghc built myself.
09:22:29 <beelsebob_> eivuokko: www.gentoo.org
09:22:51 <Igloo> eivuokko: You could fix the bug, or do an unregisterised build
09:22:57 <beelsebob_> ... or http://www-users.cs.york.ac.uk/~ndm/yhc/
09:23:00 <malcolm_> eivuokko: the message "prologue junk" sounds like it comes from the Evil Mangler (TM)
09:23:54 <malcolm_> eivuokko: which is a perl script to fiddle with the generated asm, removing stuff and making it faster
09:24:00 <masm> What is the difference betwen 'const x' and '\_ -> x'?
09:24:36 <beelsebob_> masm: nothing?
09:24:41 <eivuokko> malcolm, Hmmm.  I have vague idea what you're talking about, unfortunately it's maybe a bit beyond for me to touch it for the moment.
09:25:08 <masm> Haskell can be so... frustrating! 
09:25:34 <masm> Using ghc, in '(\l -> map (\x -> foldr max 0 l) l) [1..10]' foldr is evaluated 10 times; in '(\l -> map (const (foldr max 0 l)) l) [1..10]' it is evaluated 1 time! Why?
09:25:36 <eivuokko> Thanks, Igloo, malcolm, I'll try to find out if I can do something.
09:28:32 <masm> Damn... I think I'll learn SML, instead. :)
09:28:58 <jdinunci> Wht's the problem, masm?
09:30:18 <masm> I can't understand some basic things like why those two expressions are evaluated differently.
09:30:20 <Igloo> masm: Not with optimisation on
09:31:17 <masm> Igloo, how do I turn optimisation on? Can I do it with ghci?
09:31:38 <malcolm_> masm: by 'ghc' do you mean 'ghci'?  It might make a difference, since ghci doesn't do any optimisation
09:31:56 <Igloo> -O, and I don't think so
09:36:11 <neologism> http://shootout.alioth.debian.org/benchmark.php?test=all&lang=all&sort=fullcpu
09:36:13 <neologism> interesting
09:40:13 <SyntaxNinja> 'morning
09:42:20 * Lemmih hugs SyntaxNinja.
09:44:40 <SyntaxNinja> aww Lemmih
09:51:56 <musasabi> How do I do TypeEq instances?
09:52:03 <JKnecht> eivuokko, you are genuinely well advised to use Unix since while an effort has been made to make Haskell platform independent, it is clearly going to be easier to use on the platform family where the overwhelming majority of it's development and use occurs.
09:52:47 <musasabi> Basically I want "instance Foo l (X l)" and "instance Foo a (X b)" with fundeps.
09:54:23 <musasabi> And of course the fundeps fails for the case "a == b", thus I need something like "instance NotTypeEq a v => Foo a (X b)", but how do I do that?
09:54:30 <eivuokko> JKnecht, Simply impossible.  I want to use ghc for some commercial production code, which must run in Windows, hence I am trying to get it better for this platform.
09:55:09 <eivuokko> That mangler is next to impossible to read :-S
09:56:40 <JKnecht> Okey Dokey. Won't argue about the implicit notion that "commercial production" implies DOS, clearly you will be performing a community service by improving the DOS Haskell support.
09:57:04 <eivuokko> JKnecht, DOS?  Wtf you are talking about?
09:57:50 <eivuokko> It is rather oldey to call OSes disk-based anymore.
10:00:43 <eivuokko> I am so freaking sorry if it's wrong to try to ask help here for ghc issues in Windows.  It's not like it is off your wonderfull-dream-com-true platform.  Pisses me off to get responses like that.  Fine, I'll shut up and just deal with mailing lists.
10:02:08 <SyntaxNinja> eivuokko: please feel free to ask for ghc help on windows here and on the mailing lists.
10:02:23 <Philippa_> seconded
10:02:26 <Philippa_> (hell, I'm windows-based)
10:02:31 <gdfk> Just ignore people that give you crap =)
10:02:39 <JKnecht> yeah.
10:02:49 <SyntaxNinja> eivuokko: there are folks who care about windows, and they are excellent hackers.
10:03:00 <Philippa_> JKnecht: it would help if you didn't pull snide stuff like referring to DOS instead of Windows
10:03:25 <JKnecht> Acknowledged.
10:03:38 <xinming> (op x) y and (x op) y, what the differences between this please?
10:04:49 <Igloo> (+ x) y = y + x    (x +) y = x + y
10:04:51 <xinming> is (op x) y ==> x op y, and x op y ==> y op x?
10:05:10 <xinming> Igloo: thanks.
10:05:43 <Igloo> You'd need to write `op` if you really wanted to use something called op
10:06:01 <xinming> Igloo: I know, mod function is the case. ;-)
10:12:45 <SamB> JKnecht: windows hasn't been DOS since, like, Windows 2000!
10:13:57 <SamB> even the 9x series at least *pretends* not to be DOS. and does a surprisingly good job of it, too...
10:17:43 <JKnecht> It will always be DOS AFAIC.
10:18:28 <Philippa_> wow, spot the small-minded arsehole
10:18:32 <xinming> 98 is based Dos. :-P even Me version of Windows. Is also based on Dos.
10:18:37 <xerox> Philippa_ is back!
10:19:31 <SamB> xinming: we don't like to talk about that one
10:19:38 <SamB> JKnecht: you don't C far
10:20:30 <SamB> I'm not sure if NT is really the right direction, but at least it has the potential to be safe and stable...
10:20:57 <JKnecht> AFAIC = As Far As I'm Concerned. I work with the platform in question currently, and have done so for may years including inside IBM/MS.
10:20:57 <xinming> hmm, how to write a one-liner which will get the max number of a List?
10:21:05 <JKnecht> s/may/many/
10:21:30 <fworp> something like 'foldr max list'
10:21:32 <xinming> hmm, use map
10:21:35 <fworp> err
10:21:55 <thedward> @type maximum
10:21:56 <lambdabot> forall a. (Ord a) => [a] -> a
10:21:56 <xinming> hmm, I didn't learnt foldr yet. So, I wish to know if I can write that one using map
10:22:04 <chucky> xinming: use maximum?
10:22:05 <fworp> @type max
10:22:06 <lambdabot> forall a. (Ord a) => a -> a -> a
10:22:11 <fworp> oh, right
10:22:13 <chucky> @type maximum
10:22:14 <lambdabot> forall a. (Ord a) => [a] -> a
10:22:45 <xinming> chucky: No. I wish to know how to get 2 elements of a list using function map
10:23:53 <shapr> Let's all agree to disagree.
10:23:59 <SamB> JKnecht: did you do any NT kernel work?
10:24:03 <shapr> Everybody gets to make their own choices.
10:24:05 <chucky> xinming: what elements is it you want to get from the list? I'm not sure I understand the question
10:24:44 <shapr> If you really want to flame each other, move it to #haskell-blah
10:24:59 <shapr> I'm here for the functional programming.
10:25:14 * SamB thinks linux is teh best disk operatin' system around
10:25:36 <rep> disk?
10:25:40 <rep> linux sux :(
10:25:43 <shapr> I think everybody gets to choose what fits them best.
10:25:43 <bringert> and if we are going to have flame wars, they'd better be about programming languages
10:25:47 <shapr> rep: dude
10:25:52 <SamB> rep: of course.
10:25:55 <JKnecht> we'll an age ago I did the performance testing of very early versions of NTFS/HPFS. At that time there were 2 competing FSes and the precursor of NTFS was codenamed 'Pinball'.
10:25:58 <rep> shapr d00d?
10:26:01 <shapr> rep: purely emotional comments like that really don't help.
10:26:19 <rep> well
10:26:20 * bringert likes GOTO
10:26:25 <rep> it's not really purely emotional
10:26:32 * bringert considers GOTO harmless
10:26:35 <SamB> rep: what does your OS operate? magical artifacts?
10:26:38 <xinming> let max l = case l of { [] -> 0; (x:xs) -> max' x (max xs) where max' x y = if x > y then x else y}
10:26:40 <xinming> :-P
10:26:43 <shapr> rep: Yes, it is. Now let it go.
10:26:44 <rep> SamB what do you mean?
10:26:46 <chucky> I had a very heated discussion about whether or not "sample" is a good function to include in Quickcheck the other day. :)
10:26:49 <shapr> Take the OS wars to #haskell-blah guys.
10:26:55 <rep> i've noticed that linux has some stability issues!
10:26:56 <thedward> could you implement GOTO in template haskell?
10:26:56 --- mode: ChanServ set +o shapr
10:27:12 <SamB> rep: I never said it was good at operating anything else!
10:27:20 <rep> SamB i see
10:27:20 <xinming> chucky: thanks, I go to a wrong direction of solve this problem
10:27:37 <rep> shapr is it that time of the month?
10:27:42 --- kick: rep was kicked by shapr (Kicked by shapr)
10:27:44 <shapr> Guess so.
10:27:47 <bringert> hehe
10:27:51 <rep> i thought so..
10:27:57 <SamB> thedward: the Haskell equivalent of GOTO is the function call, afaict
10:28:00 <shapr> rep: So, if you're done being offensive...
10:28:20 <SamB> rep: dude, boys don't have periods!
10:28:22 <rep> shapr the thing is that you're getting pissed for _ONE_ comment i made.
10:28:26 <JKnecht> s/we'll/well/
10:28:38 <rep> anyway, i'll get back to work :)
10:28:42 <shapr> spiffy
10:29:10 <thedward> SamB: but using function calls makes the code too transparent
10:29:14 --- mode: shapr set -o shapr
10:29:51 * malcolm_ wonders if the funny noises he is hearing are coming from IRC, or whether he is just going gaga
10:29:58 <SamB> thedward: in that case, you should look inte embedded domain-specific esolangs
10:30:18 <SamB> s/inte/into/
10:31:13 <SamB> thedward: you could use callCC to much the same effect, probably...
10:32:46 <xinming> Someone ever said that -> is right associative, does that mean, a->a->a->a->a will become a->(a->a->a->a) ? Or only a->a->a->(a ->a)
10:32:59 <bosie> hello
10:33:08 <SamB> xinming: all of the above
10:33:16 <shapr> xinming: a -> (a-> (a-> (a-> (a->a))))
10:33:16 <eivuokko> xinming, a -> (a->a->a)
10:33:30 <xinming> Oh,Ok, I think I know, It's dynamic.
10:33:37 <bosie> is there a way to insert a number at a specific position into an [Int] list ?
10:33:45 <SamB> xinming: anyway, why are they all as?
10:33:47 <shapr> hiya bosie 
10:34:02 <shapr> conal: Hiya, how's code?
10:34:12 <bosie> like Insert(9,1,[1,2,3]) returns [1,0,2,3
10:34:17 <bosie> 1,9,2,3
10:34:32 <xinming> bosie: hmm, maybe take and drop will be a choice.
10:34:44 <bosie> :(
10:35:00 <xinming> SamB: hmm, because they are type name.
10:35:28 <bosie> xinming i see
10:35:34 <bosie> i was hoping for a built-in function
10:36:24 <xinming> SamB: maybe something related to class. Not so sure about that, As I still didn't understand many aspects of haskell. :-/
10:40:48 * SamB thought types looked more like:
10:42:02 <SamB> @type \ _ _ _ _ -> undefined
10:42:03 <lambdabot> forall a t t1 t2 t3. t3 -> t2 -> t1 -> t -> a
10:44:00 <xinming> hmm, Is there a way to use guard in one liner?
10:44:27 <xerox> > let abs' x | x < 0 = -x | otherwise = x in abs' (-2)
10:44:28 <lambdabot> 2
10:45:12 <xerox> (re: xinming)
10:45:20 <xinming> xerox: thanks
10:45:27 <xerox> You're welcome!
10:45:27 <SamB> ooh, ugly!
10:45:42 <xerox> Nawh.
10:46:11 <bosie> get :: [Int] -> Int -> Int -> [Int]
10:46:11 <bosie> how would i use that function in foldl ?
10:46:21 <bosie> is that even possible ?
10:47:00 <xerox> @type let get = undefined :: [Int] -> Int -> Int -> [Int] in foldl get
10:47:01 <lambdabot>   Expecting a function type, but found `a'
10:47:01 <lambdabot>   Expected type: [Int] -> Int -> [Int]
10:47:17 <bosie> get is my own function xerox ;)
10:47:27 <xerox> I know.
10:47:53 <bosie> solved it by using map
10:48:03 <bosie> but i would happy to know if thats possible with foldl too
10:48:53 <SamB> bosie: well, map is more usually implemented in terms of foldr
10:49:03 <xerox> Given that<Interrupted by SamB>
10:49:45 <bosie> inject :: Int -> [Int] -> [Int]
10:49:45 <bosie> inject num list = map (get list num) [1..length(list)]
10:50:08 <bosie> sorry
10:50:14 <bosie> inject :: Int -> [Int] -> [[Int]]
10:50:14 <bosie> inject num list = map (get list num) [1..length(list)]
10:50:21 <bosie> how would i implement that with either foldl or foldr?
10:50:48 <SamB> bosie: the compiler can inline map
10:50:48 <SamB> but if you must know
10:52:07 <SamB> well, okay, so the actualy Haskell code says
10:52:17 <SamB> map :: (a -> b) -> [a] -> [b]
10:52:17 <SamB> map _ []     = []
10:52:17 <SamB> map f (x:xs) = f x : map f xs
10:53:00 <SamB> and there are some rules:
10:53:05 <SamB> {-# RULES
10:53:05 <SamB> "map"	    [~1] forall f xs.	map f xs		= build (\c n -> foldr (mapFB c f) n xs)
10:53:05 <SamB> "mapList"   [1]  forall f.	foldr (mapFB (:) f) []	= map f
10:53:05 <SamB> "mapFB"	    forall c f g.	mapFB (mapFB c f) g	= mapFB c (f.g) 
10:53:05 <SamB>   #-}
10:53:36 <SamB> as well as a definition
10:53:38 <eivuokko> heh
10:53:48 <SamB> mapFB ::  (elt -> lst -> lst) -> (a -> elt) -> a -> lst -> lst
10:53:48 <SamB> {-# INLINE [0] mapFB #-}
10:53:48 <SamB> mapFB c f x ys = c (f x) ys
10:54:03 <SamB> and there are a whole bunch of comments, too.
10:54:21 <SamB> my guess is that its best to just use map and leave to the GHC hackers the optimization ;-)
10:54:30 <eivuokko> I guess it has been in need of optimisations in past ;)
10:54:51 <bosie> oh well i dont care for optimization so far cos it runs in a few milliseconds anyway ;))
10:55:17 <bosie> was just curious if its easy to implement it with foldl too
10:55:19 <bosie> or foldr
10:55:49 <SamB> bosie: oh sure
10:55:54 <SamB> it would be easy
10:56:06 <SamB> but it might not have very nice strictness behaviour
10:58:15 <bosie> hmm ok
10:59:20 <bosie> thx for ur help
11:00:20 <SamB> you can probably read some paper about bananas, lozenges and barbed wire to find out other definitions of map...
11:00:42 <bosie> ?
11:01:10 <SamB> shapr probably knows what I mean
11:01:15 <SamB> I forget what it is called...
11:01:30 <SamB> there is probably more than one, too
11:01:35 <eivuokko> Foomorphism?
11:02:01 <SamB> eivuokko: various morphisms come up, yes.
11:02:13 <SamB> but thats not the name I meant
11:03:33 <xinming> > Char.toUpper 'a'
11:03:34 <lambdabot> 'A'
11:04:10 * xinming wonders why it will say undefined variable in hugs. 
11:04:39 <SamB> xinming: you probably need to :m + it or something
11:04:47 <SamB> I dunno
11:04:48 <SamB> GHCi implements that specially
11:04:52 <eivuokko> Huh
11:05:12 <eivuokko> You mean it has autoimport?
11:05:37 <SamB> not exactly.
11:06:04 <SamB> oh, and apparantly @eval imports Char qualified
11:06:13 <eivuokko> Yeah, that's what I thought.
11:06:18 <JKnecht> hmmm, the Meme archive of #haskell still not tracking. Is there another?
11:06:34 <SamB> but GHCi lets you refer to anything by qualifying it with the actual module name.
11:06:56 <eivuokko> So it seems.  Funny.
11:07:02 <SamB> at least, if none of the *ed modules imports something qualified as that
11:07:05 <SamB> not funny.
11:07:07 <SamB> Handy.
11:07:15 <xinming> Prelude> :module Hugs.Char
11:07:15 <xinming> ERROR - Cannot find module "Hugs.Char"
11:07:27 <SamB> :module Char?
11:07:41 <xinming> still the error
11:07:51 <eivuokko> Data.Char? ;)
11:09:03 <xinming> eivuokko: hmm, Don't know why these not works,
11:09:11 <SamB> mine seems to be totally b0rk, when it comes to modules
11:09:23 * eivuokko doesn't have hugs installed
11:09:25 <xinming> I tried this wil the directory hierarchy which is the same as /usr/lib/hugs/libraries
11:09:26 * SamB just uses ghci anyway
11:09:54 * xinming just wish to learn haskell, as the book suggest using hugs. :-)
11:10:12 <SamB> well, I suggest GHCi, as that is nicer in *almost* every way than Hugs.
11:10:26 <SamB> Hugs sometimes gives nicer-looking type signatures, I think.
11:10:39 <SamB> oh, and it is more portable
11:10:46 <xinming> SamB: I tried both of them, :-)
11:10:53 <SamB> didn't GHCi work fine?
11:12:20 <xinming> SamB: hmm, ghci works fine, I use ghci for trying some one liner most time. hmm, why choose hugs is because I want to know, if it happened the same problem to ghc, I can know where goes worng. Just like loading modules.
11:12:51 <bosie> what is a "data contructor"?
11:13:04 <SamB> bosie: something like, say
11:13:08 <SamB> @type Just
11:13:09 <lambdabot> forall a. a -> Maybe a
11:13:31 <SamB> @type Nothing
11:13:32 <lambdabot> forall a. Maybe a
11:13:37 <bosie> uh
11:13:38 <bosie> m
11:13:42 <SamB> > Just "foo"
11:13:43 <lambdabot> Just "foo"
11:14:11 <bosie> i load a file and it tells me data contructor "CheckSameChars" not in scope
11:14:15 <dcoutts> SamB, as of 6.4 ghci gives as good looking type signatures
11:14:24 <SamB> dcoutts: oh really?
11:14:28 <bosie> tho i see it clearly in my file ;)
11:14:28 <dcoutts> SamB, that is it leaves out the foralls when in Haskell98 mode
11:14:30 * SamB doesn't agree
11:14:43 <SamB> dcoutts: I was talking about the type variables
11:14:57 <dcoutts> SamB, what do you mean?
11:15:00 <SamB> GHC doesn't have much imagination in that area
11:15:10 <SamB> it just uses the same letter over again with different numbers
11:15:16 <Lemmih> bosie: How is it defined?
11:15:39 <dcoutts> SamB, only in rare curcumstances, I think hugs does something similar in those cases
11:15:43 <bosie> CheckSameChars :: String -> Char -> String
11:15:43 <bosie> CheckSameChars s c = filter s c
11:15:48 <dcoutts> SamB, got an example?
11:15:50 <Lemmih> bosie: Functions in Haskell must start with a lowercase letter or an underscore.
11:16:00 <bosie> ah
11:16:09 <bosie> why is that ?
11:17:00 <Lemmih> So we can tell functions and data constructors apart.
11:17:03 <dcoutts> SamB, ok got one. You're right hugs has a better type var: let f x = f f in f
11:17:11 <bosie> what is a function ?
11:17:24 <bosie> i thought test::.... is a function ?
11:17:31 <Lemmih> bosie: 'checkSameChars' is a function.
11:17:39 <bosie> oh
11:17:41 <bosie> ok
11:22:11 <SamB> hugs used to have a more informative :i, too
11:22:31 <bosie> SamB talkin 2 me?
11:23:18 <SamB> bosie: not particularly, but you are welcome to listen
11:23:20 <SamB> ;-)
11:23:35 <bosie> SamB you arent used to audience, are you? ;)
11:24:01 <SamB> I dunno. What do you mean by audience?
11:24:07 --- mode: ChanServ set +o SyntaxNinja
11:24:12 <bosie> someone who listens to you
11:24:52 <SamB> hmm.
11:24:57 <SamB> good question!
11:25:13 <bosie> anyone listening to virgin radio by any chance?
11:25:18 <SamB> I am and I'm not ;-)
11:25:25 <SamB> to the previous question
11:25:32 <bosie> i figured ;)
11:25:35 <machack666> that's kind of a personal question.  :)
11:25:53 <bosie> machack666 hehe well, yea weird name for a radio station
11:25:54 <shapr> ooh, he's got the power!
11:26:42 <shapr> JKnecht: Yes, http://tunes.org/~nef/logs/haskell/
11:26:57 <musasabi> Sometimes Fundeps look just like template metaprogramming in C++ :-(
11:31:14 --- mode: SyntaxNinja set -o SyntaxNinja
11:32:15 * musasabi wants easy "==" and "/=" for type signatures.
11:33:11 <SamB> dons: hmm, running into errors with hmp3 again. mostly the same thing.
11:36:51 <bosie> hmm
11:37:19 <bosie> is there some easy way to see by how many chars a string if off from another one?
11:38:42 <SamB> bosie: in what way?
11:38:44 <bosie> like bosie == botie is of by one
11:39:03 <SamB> you mean insertions, deletions, or substitutions?
11:39:10 <bosie> hmm
11:39:12 <bosie> all of them
11:39:30 <musasabi> that is nontrivial
11:39:31 <SamB> yeah, thats what I meant
11:39:43 <bosie> hmm damn
11:39:49 <SamB> well, lambdabot has something like that for its command spelling-correction
11:39:50 <eivuokko> "zip" and "all" with right function as param.
11:39:55 <eivuokko> Erm, filter
11:40:08 <bosie> eivuokko filter and all ?
11:40:17 <SamB> eivuokko: that won't work
11:40:20 <bosie> cool i was heading for take and drop ;)
11:40:23 <machack666> levinstein algorithm
11:40:47 <machack666> I think that's an incorrect spelling. :)
11:40:50 <eivuokko> SamB, Ah, if he needs inserts and deleations, no.
11:41:09 <o_Rocky> hi, everyone
11:42:04 <bosie> well my approach was to split one string on each position and compare the two parts to the other string
11:42:07 <Lemmih> > let neqCount a b = length (filter (uncurry (/=)) (zip a b)) in neqCount "hello" "hallo"
11:42:08 <lambdabot> 1
11:42:19 <o_Rocky> is there anyone interested in programing a Sudoku with wxHaskell?
11:42:36 <bosie> uncurry ?
11:43:51 <o_Rocky> id
11:44:04 <o_Rocky> id x = x
11:46:36 <o_Rocky> is there anyone interested in programing a Sudoku with wxHaskell?
11:46:40 <dcoutts> o_Rocky, apparently Sudoku can be written quite nicely in Haskell
11:46:55 <int-e> @type uncurry
11:46:56 <lambdabot> forall c b a. (a -> b -> c) -> (a, b) -> c
11:46:59 <dcoutts> a professor at my department was having fun with it
11:47:00 <o_Rocky> yes, i know
11:47:15 <o_Rocky> well...
11:47:27 <bosie> yep found it, but its not listed in cs.uu.nl/@afie/haskell
11:47:31 <shapr> poetix wrote a Sudoku solver for The Monad.Reader.
11:47:43 <o_Rocky> do you know some one who could help me with it?
11:47:48 * dcoutts would use Gtk2Hs of course :-)
11:48:33 <o_Rocky> i need to do something with wxHaskell...
11:48:44 <bosie> food
11:49:01 <dcoutts> o_Rocky, is that an assignment?
11:49:05 <SyntaxNinja> is there any provision for concurrency in haskell 98?
11:49:11 <dcoutts> SyntaxNinja, nope
11:49:15 <o_Rocky> educational purposes
11:49:35 <dcoutts> SyntaxNinja, it's a library extension
11:50:01 * SamB wonders what the point of using Haskell is if you are going to use C strings everywhere
11:50:09 <SamB> and corrupt them, too!
11:50:34 <dcoutts> SamB, yeah we should be using string in Haskell, just not necessarily 'String's :-)
11:50:55 <SamB> dcoutts: well, personally, I like Strings.
11:51:03 <dcoutts> they're very convenient
11:51:20 <SamB> you hardly ever run into crashes from wayward pointers on Strings...
11:51:22 <o_Rocky> can somebody please help me?
11:51:32 <dcoutts> SamB, heh yeah
11:51:46 <SamB> I wish dons wasn't such a space freak ;-(
11:52:08 <SyntaxNinja> o_Rocky: you can feel free to post questions here.
11:52:14 <dcoutts> just not so good when it comes to treating large buffers of character data as Strings (performance wise).
11:52:26 <o_Rocky> SyntaxNinja: thanks!
11:52:47 <o_Rocky> how do i make an interactive program in haskell?
11:52:53 <SamB> dcoutts: oh come on, my filenames aren't THAT long!
11:53:00 <eivuokko> lol
11:53:01 <dcoutts> SamB, we really ought to be able to make a convenient and safe string library that does things more effeciently underneath.
11:53:06 <dcoutts> SamB, hah! yeah.
11:53:35 <dcoutts> SamB, actually filenames are a case in point, not of performance but charset problems.
11:53:38 <SamB> dcoutts: its just that for some reason dons has something against triple copy, and he apparantly broke something
11:53:38 <o_Rocky> 1 + 1
11:53:51 <Lemmih> > 1 + 1
11:53:52 <lambdabot> 2
11:54:02 <o_Rocky> interesting :P
11:54:18 <basti_> yes, it can do [1..]
11:54:24 <o_Rocky> lololol
11:54:38 <SamB> > length "/home/naesten/"
11:54:45 <lambdabot> 14
11:54:45 <o_Rocky> (but it won't rigth?)
11:54:50 <basti_> it would
11:54:59 <xinming> lisppaste2: help
11:54:59 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
11:55:01 <bringert> > let x = x in x
11:55:01 <lambdabot> Add a type signature
11:55:08 <o_Rocky> then someone have to kill him...
11:55:32 <dcoutts> it's safe it just fills the channel with noise so we don't
11:55:36 <dcoutts> but it works:
11:55:39 <dcoutts> > [1..]
11:55:40 <lambdabot> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
11:55:40 <lambdabot> 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,
11:55:40 <lambdabot> 52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,
11:55:40 <lambdabot> 76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,
11:55:40 <lambdabot> 100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,
11:55:40 <Lemmih> o_Rocky: It truncates the result to 2048 bytes.
11:55:42 <lambdabot> [24 @more lines]
11:55:49 <SyntaxNinja> o_Rocky: interactrive, meaning talking to the ujser, or working w/ an interpreter?
11:55:50 <o_Rocky> nice!
11:55:51 <dcoutts> so that's why we dont
11:55:53 <SyntaxNinja> o_Rocky: ghci is an interpreter
11:55:56 <dcoutts> (often)
11:56:26 <o_Rocky> SyntaxNinja: i want an interactive GUI
11:56:37 <o_Rocky> program independent
11:57:32 <dcoutts> I've been writing an Mancala game using Gtk2Hs with cairo.
11:57:39 <o_Rocky> a grid 9x9 and some nice things in wxHaskell
11:57:43 <basti_> mancala?
11:57:55 <dcoutts> http://www.lookoutnow.com/game/man.htm
11:58:58 <o_Rocky> dcoutts: i call it "Bantumi"
11:59:11 <dcoutts> it's got several names
11:59:20 <dcoutts> there are many veriations
11:59:58 <basti_> ah that
12:00:27 <dcoutts> o_Rocky, if you're looking for a tutorial boegel wrote an article for TMR which went through the development of a graphical game usign Gtk2Hs
12:01:29 <o_Rocky> Gtk2Hs?
12:01:35 <dcoutts> @where gtk2hs
12:01:35 <lambdabot> http://haskell.org/gtk2hs/
12:01:45 <o_Rocky> but i want to use wxHaskell
12:02:02 <o_Rocky> @where wxHaskell
12:02:02 <lambdabot> http://wxhaskell.sourceforge.net/
12:02:40 <dcoutts> well I think they have some tutorials too
12:04:02 * dcoutts goes back to writing the GUI for his source code analysis algorithm
12:04:27 <o_Rocky> i'm not so good with monads
12:04:48 <o_Rocky> i think this is one step ahead of me
12:04:55 <musasabi> I cannot get the VSpace techniqueue (per instance fundeps and TypeCast to work) - Is there some other example code?
12:05:45 <musasabi> Oleg has used it at least but I am failing to understand why/how it works.
12:08:16 <SyntaxNinja> o_Rocky: get started by doing an interactive console application
12:09:17 <xinming> how to write a function to test if the number is prime?
12:09:29 <o_Rocky> i already have a grid 9x9, unfortunately i don't know how it works :P
12:09:49 <o_Rocky> but it works :P
12:13:38 * CosmicRay solicits feedback for the HDBC interface at http://www.complete.org/~jgoerzen/t/html/index.html
12:17:25 <o_Rocky> há aqui alguem q esteja farto de coçar a micose?
12:17:33 <basti_> #haskell.es ?
12:17:51 <dcoutts> CosmicRay, sExecute? why not just execute?
12:17:52 <musasabi> CosmicRay: why not HaskellDB?
12:18:30 <CosmicRay> musasabi: well, this is a replacement more for HSQL than for HaskellDB
12:18:51 <CosmicRay> there are some problems with haskelldb.  the fact that is uses hsql udner the hood is part of it. ;-)
12:19:14 <dcoutts> CosmicRay, I guess the best way to see if an interface is complete and convenient is to write some demo progs.
12:19:25 <dcoutts> and see what wrinkles come up
12:19:26 <CosmicRay> dcoutts: hmm.  good question.  I had a reason but I forgot it ;-)
12:19:33 <CosmicRay> yup, I plan to do that.
12:19:48 <dcoutts> CosmicRay, presumably because it's "statement execute"
12:20:01 <dcoutts> CosmicRay, but it doesn't follow the simple name convnetion for the rest of the module
12:20:09 <bringert> CosmicRay: a HDBC back-end for HaskellDB should be possible, right?
12:20:20 <CosmicRay> musasabi: and the problems with hsql are: it loads the entire result set from a query in memory at the beginning, it doesn't support precompiled queries, it doesn't support positional parameters, it has broken escaping (and it shouldn't need escaping)
12:20:25 <CosmicRay> bringert: I'd think so
12:20:33 <CosmicRay> I'm trying to model it after Perl's DBI
12:20:47 <musasabi> mmh, I haven't touched HSQL at all (I know it exists, but nothing beyond that)
12:21:11 <dcoutts> CosmicRay, so how do we add backends?
12:21:20 <CosmicRay> haskelldb also has some other properties that make it impractical for some work.  One being that every SELECT it issues is a "SELECT DISTINCT"
12:21:31 <bringert> yeah, we should fix that one
12:21:51 <CosmicRay> dcoutts: you provide one "connect" function that returns a Connection object, see http://www.complete.org/~jgoerzen/t/html/Database-HDBC-Types.html#t%3AConnection
12:21:52 <CosmicRay> similar to hsql
12:21:54 <dcoutts> CosmicRay, gour was thinking of doing libgda bindings. That'd be more useful if it could be made into a backend of an existing Haskell DB interface
12:22:04 <CosmicRay> nice
12:22:14 <CosmicRay> I'm planning to do at least a postgresql and odbc binding for hdbc
12:22:31 <dcoutts> libgda is a gnome(ish) project. It has db bindings for many backends.
12:22:48 <dcoutts> hmm, that's the wrong way of saying it
12:22:50 <machack666> are the values returned natively all strings or are the drivers doing some coersion for that?
12:22:51 <CosmicRay> yeah.  there are a proliferation of db backend abstration libraries
12:22:56 <CosmicRay> dcoutts: I know what you mean
12:22:59 <dcoutts> right
12:23:10 <CosmicRay> from memory, ODBC, wxWidgets, gda, qt
12:23:36 <dcoutts> the useful thing about libgda (appart from the large number of backend that it supports) is that it is the basis for the data-bound widgets in gnomedb
12:23:43 <machack666> one of the greatest features of the DBI is the ability to have the column names in the result query (as keys of the hash)
12:23:51 <CosmicRay> machack666: well, this is actually my greatest concern, so I'm glad you mentioned that.  I've only looked at the Postgresql API so far, but from what I can tell, it handles everything as a string
12:23:54 <dcoutts> much like the db bindings in wxWidgets
12:23:54 <machack666> i.e., the fetchrow_hashref
12:23:56 <machack666> etc
12:24:06 <machack666> SQLite handles it all as strings as well
12:24:07 <CosmicRay> machack666: yeah, I plan to have that here
12:24:11 <machack666> not sure about MySQL
12:24:20 <CosmicRay> yeah I know sqlite does, but it's "special"
12:24:42 <CosmicRay> machack666: once we have a function that can give the column names, it is trivial to write something to give the row as a Map
12:24:56 <CosmicRay> however, I will note that this whole idea is broken, because column names aren't portable across databases
12:25:06 <machack666> if you have a more fleshed out result and statement class, i think this looks good for the bare "$dbh" class
12:25:15 <CosmicRay> for instance, select count(*) from foo could be variously listed as "count", "COUNT", "COUNT()", "COUNT(*)", etc.
12:25:40 <machack666> DBI can normalize that for you to some extent (case-wise,at least)
12:25:43 <CosmicRay> what the result be for each row?
12:25:48 <machack666> but, yes
12:26:03 <machack666> ?
12:26:18 <CosmicRay> just trying to understand what you mean by "result class"
12:27:12 <CosmicRay> I've tried to define the minimum interface necessary for the C binding
12:27:27 <CosmicRay> and then the rest of the missing statement-related thigns are simple Haskell functions, I hope
12:27:39 <CosmicRay> machack666: are you interested in participating in this project?
12:27:42 <machack666> ok, that makes sense
12:27:44 <CosmicRay> I use darcs ;-)
12:28:00 <machack666> sure, I have a lot of DBI experience, and am coming to speed on haskell
12:28:18 <CosmicRay> machack666: darcs get http://darcs.complete.org/hdbc
12:28:19 <machack666> is the current rev working, or just documented?
12:28:22 <machack666> :D
12:28:25 <CosmicRay> it builds
12:28:37 <CosmicRay> the few functions that are documented exist
12:28:40 <CosmicRay> the data types exist
12:28:43 <CosmicRay> I have no DB bindings yet
12:28:45 <machack666> do you have any stubs for the Driver
12:28:49 <machack666> n/m
12:28:58 <CosmicRay> Database.HDBC.Types is pretty much it
12:29:25 <CosmicRay> machack666: feel free to "darcs send" any patches my way
12:29:30 <machack666> I've been looking for a good DBI equivalent in haskell, so this is fortuitous
12:29:57 <CosmicRay> hsql works for small projects.
12:30:14 <CosmicRay> it doesn't work so well with very large result sets.
12:30:20 <xinming> what does function rem do?
12:30:25 <CosmicRay> I have a suspicion that it also leaks memory and segfaults.
12:30:30 <machack666> I don't have time to look right now, but I will definitely give it a look soon
12:30:36 <CosmicRay> machack666: great, thanks
12:31:32 <machack666> could there be some way to use lazy eval to wrap the prepate/execute/fetch in a list monad to automatically fetch new rows when needed?
12:31:55 <CosmicRay> machack666: yes.
12:31:59 <CosmicRay> I fully plan to do so
12:32:06 <CosmicRay> the secret to that, btw, is unsafeInterleaveIO
12:32:19 <eivuokko> Such minimal interface for DBing would be cool.
12:32:20 <CosmicRay> and it's pure Haskell.
12:33:07 <machack666> what is the ffi of choice nowadays for portability?
12:33:23 <CosmicRay> everybody has a favorite
12:33:27 <CosmicRay> I like hsc2hs myself
12:33:40 <CosmicRay> it is widely available, not a pain to build, and easy to grok.
12:33:52 <CosmicRay> though possibly less automated than some.
12:34:10 <machack666> when I get some time I might take a stab at writing a driver module and see what I can do from there.  That seems like the first step to getting something interesting working.  :D
12:34:25 <CosmicRay> yup
12:34:45 <machack666> cool
12:35:40 <xinming> hmm, anyone here can explain the difference between mod and rem? :-/
12:36:11 <mauke> > -3 `mod` 5
12:36:12 <lambdabot> -3
12:36:13 <xinming> > 5 `mod` 3
12:36:14 <lambdabot> 2
12:36:15 <mauke> > -3 `rem` 5
12:36:16 <lambdabot> -3
12:36:21 <mauke> hmm
12:36:31 <machack666> why are the binding Maybe String?  What effect does having Nothing in a column binding have?
12:36:41 <fworp> probably nothing
12:36:41 <mauke> > 3 `rem` -5
12:36:42 <lambdabot>   precedence parsing error
12:36:42 <lambdabot>    cannot mix `rem' [infixl 7] and prefix `-' [infixl 6] in the same
12:36:42 <lambdabot> infix expression
12:36:48 <mauke> > 3 `rem` (-5)
12:36:49 <lambdabot> 3
12:37:01 <mauke> > 3 `mod` (-5)
12:37:02 <lambdabot> -2
12:37:08 <xinming> 5 / 3 ==> result -> 1, and there is 2 can't be devided.
12:37:38 <xinming> So, IIRC, mod is used for get the 2 in above example.
12:37:41 <xinming> :-/
12:38:34 <sieni> is there somewhere a printed table of the default precedence of haskell in the style of http://www.isthe.com/chongo/tech/comp/c/c-precedence.html
12:39:03 <int-e> > (-3) `mod` 5
12:39:04 <lambdabot> 2
12:39:09 <int-e> there you go
12:39:15 <int-e> > (-3) `rem` 5
12:39:16 <lambdabot> -3
12:40:00 * xinming is still in confusion.
12:40:11 <astrolabe> sienni: How do you mean printed?  There is one in the report.
12:40:46 <mauke> sieni: http://haskell.org/onlinereport/decls.html#fixity
12:42:35 <int-e> xinming: `mod` takes care to return a result between 0 (inclusive) and the provided modulus (exclusive)
12:54:47 <joelr1> howdy
12:55:15 <musasabi> evening
12:55:30 <lisppaste2> joelr1 pasted "Anything wrong with this?" at http://paste.lisp.org/display/13710
12:55:47 <joelr1> 8:55pm here, evening indeed
12:55:56 <joelr1> hi musasabi 
12:57:23 * bringert should go home
12:57:38 <musasabi> joelr1: getChanContents will return an infinite list of values.
12:57:39 <bringert> how do I call a function from itself, but at a different type?
12:57:55 <joelr1> musasabi: oh, shit
12:58:02 <joelr1> musasabi: where does it say that?!
12:58:12 <musasabi> bringert: use an explicit type signature (that is called polymorphic recursion).
12:58:40 <bringert> ah, right
12:58:45 <o_Rocky> where are the "for" routine in haskell?
12:58:49 <musasabi> "getChanContents :: Chan a -> IO [a]	"
12:58:50 <musasabi> Return a lazy list representing the contents of the supplied Chan, much like hGetContents.
12:58:51 <mauke> define "for"
12:58:53 <o_Rocky> or, where is
12:58:58 <musasabi> joelr1: http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-Chan.html
12:58:59 <joelr1> musasabi: ouch!
12:59:14 <musasabi> joelr1: just loop with readChan.
12:59:17 <joelr1> i have been looking at it but did not realize it was an infinite list
12:59:28 <shapr> TheHunter: Hey, did you write the QCExts that showed up on the wiki? If so, can you give me an explicit license for it?
12:59:35 <joelr1> musasabi: i used to do that and then thought performance would be better or something like that
12:59:40 <musasabi> joelr1: a general pattern works like: loop chan = readChan chan >>= work >> loop chan where work val = ...
12:59:45 <bringert> I tried an explicit type signature, but it doesn't seem to work. the type in question is a GADT
12:59:53 <musasabi> ouch
13:01:19 <o_Rocky> mauke: for(initial condition; stop case; iterator) { list_of_funcs }
13:01:38 <mauke> o_Rocky: that doesn't make sense
13:01:49 <mauke> what do you mean by "stop case"?
13:02:15 <o_Rocky> lol
13:02:26 <mauke> wrong answer
13:02:29 <o_Rocky> mauke: never programed in C?
13:02:31 <shapr> for(x=0;x<length.array;x++) { }
13:02:39 <mauke> o_Rocky: I have
13:02:46 <mauke> unfortunately Haskell is quite unlike C
13:02:54 <shapr> Fortunately!
13:03:07 <shapr> I like variety.
13:03:16 <mauke> in haskell, if you evaluate x < array.length twice, you get the same results
13:03:31 <o_Rocky> well, i like haskell too, but i don't understand it
13:03:37 <mauke> so you either have an infinite loop, or a no-op
13:04:31 <mauke> o_Rocky: what languages do you know?
13:04:53 <o_Rocky> Haskell, Prolog, C, Java
13:05:08 <mauke> looks like you don't know Haskell
13:05:17 <o_Rocky> :)
13:05:29 <o_Rocky> Maybe True
13:05:49 <o_Rocky> Maybe True :: Maybe Bool
13:05:59 <mauke> @type Just True
13:06:00 <lambdabot> Maybe Bool
13:06:06 <o_Rocky> ou isso
13:06:08 <o_Rocky> :P
13:06:20 <o_Rocky> that's it
13:06:54 <shapr> Haskell uses recursion instead of loops.
13:07:32 <o_Rocky> yes, but recursion does me no good programing GI
13:07:35 <shapr> length []     = 0
13:07:35 <shapr> length (x:xs) = 1 + length xs
13:07:39 <shapr> GI?
13:07:43 <o_Rocky> Graphical interfaces
13:07:49 <shapr> Why not?
13:07:54 <kosmikus> why not, indeed
13:08:07 <tic> fudgets!
13:08:11 <mauke> then you're screwed, because recursion is the only way to loop in Haskell
13:08:12 <tic> state monads!
13:08:24 <o_Rocky> what should i do? "main = ... main" !?
13:08:25 <flux__> o_rocky, however, there are plenty of functions that do recursion for you
13:08:30 <o_Rocky> it doesent make sense
13:08:41 <shapr> Actually, yes...
13:08:43 <shapr> Something much like that.
13:08:56 <mauke> hmm, maybe you should learn OCaml first
13:08:58 <shapr> Look at lambdabot's main loop for example.
13:09:38 <shapr> Nah, recursion isn't difficult, just unfamiliar.
13:09:55 <o_Rocky> but when it calls the main func it will forguet the actual state of StateT monad and that's not what i want...
13:10:19 * dcoutts programs GUIs with recursion all the time
13:10:43 <shapr> Anyone know if I can get QuickCheck to check a parameterized type for multiple parameters somehow?
13:11:01 <bringert> ok, forget, I was being stupid
13:11:06 <shapr> I don't want to type a bunch of properties that are identical except for type signature of Tree Int, Tree Float, etc
13:11:27 <mauke> OCaml introduces several key concepts (type inference, pattern matching, autocurrying, recursion instead of loops) but you can still use mutables and traditional loops, do I/O, etc.
13:12:21 <o_Rocky> mauke: the only introduction i need is to IO monad and wxHaskell
13:12:30 <mauke> oh, ok
13:13:23 <o_Rocky> mostly wxHaskell
13:14:18 <SyntaxNinja> o_Rocky: when you call a function recursively, it'll carry the state with it.
13:14:39 <SyntaxNinja> mauke: no need to get excited. haskell isn't so tricky that you need to learn a whole new language first!
13:14:39 <o_Rocky> SyntaxNinja: really?
13:14:41 * boegel|home boings
13:14:49 <SyntaxNinja> o_Rocky: if you're using the StateT monad, yeah
13:15:12 <SyntaxNinja> f = do s <- get
13:15:12 <SyntaxNinja>    put (s + 1)
13:15:12 <SyntaxNinja>   f
13:15:27 <SyntaxNinja> the 2nd call to f will have the new (s+1) state.
13:15:27 <o_Rocky> SyntaxNinja: let me give it a try
13:15:37 <SyntaxNinja> be sure to add a base case ;)
13:15:53 <o_Rocky> f is pointfree?
13:15:55 <SyntaxNinja> boegel|home: no need to get excited
13:16:14 <boegel|home> SyntaxNinja: no, but I like to boing
13:16:18 * boegel|home boings again
13:16:59 <flux__> syntaxninj1, well, I dunno about that, I found learning ocaml first helpful :P
13:17:34 <fworp> me too, though i regret it, and would have rather have learned sml first
13:18:58 <o_Rocky> SyntaxNinj1: f is pointfree?
13:19:13 <Revision17> So, for someone like me, who has learned O'Caml reasonably well, where would be a good place to start learning haskell?
13:19:40 <shapr> Can I pattern match on a record?
13:20:00 <SyntaxNinj1> flux__: maybe helpful, but with a bit of gumption it's probably more efficient to just learn haskell
13:20:26 <bringert> shapr: you mean a normal haskell record?
13:20:32 <bringert> if so, yes
13:20:59 <mauke> Revision17: hmm, try http://haskell.org/learning.html
13:21:27 <SyntaxNinja> o_Rocky: f doesn't have any arguments
13:21:35 <shapr> I want to do foo (Record { a b c d }) = ...
13:21:41 <boegel|home> yo Itkovian 
13:21:44 <shapr> Is that possible?
13:21:55 <SyntaxNinja> o_Rocky: btw why are you using StateT instead of State?
13:22:15 <Itkovian> boegel|home: hi
13:22:48 <o_Rocky> because the Sudoku puzzle may not have solution
13:23:03 <o_Rocky> StateT SudokuGrid Maybe m
13:23:07 <kosmikus> shapr: semantics?
13:23:50 <shapr> doh, user error.
13:23:58 <shapr> Works just fine :-)
13:24:07 <SyntaxNinja> o_Rocky: do you have a book or tutorial? I found simon thompson's exercises for monads quite useful.
13:24:13 <SyntaxNinja> I can give you some exercises if you like.
13:26:13 <o_Rocky> sorry...
13:26:20 <o_Rocky> i was wrong
13:28:14 <o_Rocky> i didnt programed this... (as you already have noticed...)
13:30:03 <o_Rocky> type SudokuState a = StateT SudokuGrid Maybe a
13:30:46 <shapr> Are you using the source from http://www.haskell.org/tmrwiki/SolvingSudoku ?
13:31:02 <shapr> Sure looks the same :-)
13:31:35 <o_Rocky> @Just True
13:31:35 <lambdabot> Not enough privileges
13:31:36 * araujo back from bed
13:33:05 <o_Rocky> the thing is, i need to take this code and make something nice with wxHaskell
13:34:04 <shapr> Is this homework?
13:35:27 <o_Rocky> something like that, yes
13:36:12 <o_Rocky> why do you ask?
13:36:28 <shapr> Because, for ethical reasons we can only give limited homework help.
13:36:31 <shapr> @wiki HomeworkHelp
13:36:32 <lambdabot> http://www.haskell.org/hawiki/HomeworkHelp
13:36:49 <o_Rocky> ohhh
13:40:03 <TheHunter> shapr, sure, you can use it under whatever license you want.
13:40:14 <shapr> TheHunter: thanks
13:40:29 <shapr> I'll make it BSD3 if that's okay with you.
13:40:44 <SamB> shapr: I'm not giving Frederick too much help am I?
13:41:03 <shapr> SamB: I don't think so.
13:41:15 <SamB> how do I tell?
13:42:10 <shapr> The goal of teaching is understanding in the student. If what you do interferes with that, it's bad.
13:42:28 <shapr> If you give someone a full solution and they just use it and don't figure out how it works, it's bad.
13:42:38 <SyntaxNinja> just don't give answers, or give them a way to implement their program / homework without understanding it.
13:42:52 <shapr> But some people learn best from a full solution, because they can tweak it till they understand why it works the way it works.
13:43:36 <shapr> SamB: Frederick seems encouraged to learn more. I call that good :-)
13:43:56 <SamB> shapr: true
13:44:25 <SamB> I have been careful to not give him too much at any given time ;-)
13:45:30 <o_Rocky> shapr: thanks for the "newbie" link :)
13:45:54 <SamB> and he does have to understand whats needed in order to tell if what I give him fulfills the requirements ;-)
13:47:45 <o_Rocky> shapr: to start, SyntaxNinja have a proper diagnose on me, i know a little bit of Monads, i need to learn more...
13:48:22 <o_Rocky> Does anybody recomend a good Monad tutorial?
13:48:50 <shapr> http://www.nomaware.com/monads/
13:49:17 <o_Rocky> tks
13:49:25 <SyntaxNinja> StateT is kinda baptism with fire. I would focus on IO at first.
13:49:49 <basti_> lol
13:52:44 <o_Rocky> my teacher said that we(students) have to slam our heads against a wall with monads, that's almost what i'm doing...
13:54:46 <SyntaxNinja> o_Rocky: I don't think I agree with your teacher even a little bit.
13:54:50 <SyntaxNinja> who is your teacher?
13:55:30 <o_Rocky> Portugues
13:55:34 <o_Rocky> Portuguese
13:56:15 <SyntaxNinja> sometimes I wonder if haskell teachers get a kick out of scaring people with monads.  they're not that scary if you take it step by step
13:57:00 <o_Rocky> http://www.di.uminho.pt/~jno/images/Image-095.JPG
13:57:17 <o_Rocky> the person on the rigth
13:57:54 <chucky> The Gen monad in QuickCheck is a rather nice monad to introduce people to I think. John Hughes does it in his course any way. :)
13:58:54 <shapr> I start with the Maybe monad.
13:59:05 <chucky> Maybe is nice as well. It's very simple
14:00:04 <chucky> though I didn't actually take the time to learn how to use it as a monad until recently
14:00:30 <o_Rocky> Maybe Monad was the only monad that was teached...
14:06:02 * shapr cackles happily
14:06:18 <dons> hey SamB.
14:07:03 <dons> SamB, thanks for the patches :S
14:07:20 * dons should stop coding after around 11pm, i reckon.
14:08:10 <dons> @seen SamB
14:08:10 <lambdabot> SamB is in #haskell-overflow, #haskell-blah and #haskell. Last spoke 22
14:08:10 <lambdabot> minutes and 15 seconds ago.
14:08:52 <SamB> you are welcome
14:08:59 <dons> I don't like the triple copy since it really slows down start up times on my mp3 repo
14:09:34 <SamB> so you forgot to allocate an extra byte for the terminating 0, eh?
14:09:40 <dons> yes :/
14:09:43 <dons> @karma- dons
14:09:43 <lambdabot> You can't change your own karma, silly.
14:09:45 * boegel|home leaves for bed
14:09:48 <boegel|home> g'night everyone !
14:09:51 <SyntaxNinja> l8r
14:09:58 <Lemmih> 'night boegel|home.
14:10:06 <SamB> This is why most of us like to program in Haskell rather than C :-P
14:10:17 <dons> hehe. is hmp3 running as normal now?
14:10:24 <SamB> yeah.
14:10:33 <SamB> except the little red bar at the bottom is missing ;-)
14:10:40 <dons> hehe
14:10:42 <dons> excellent
14:10:47 <dons> @karma+ SamB
14:10:48 <lambdabot> SamB's karma raised to 6.
14:10:59 <SamB> however, its only been running for 20 minutes since I started the fully fixed one ;-)
14:11:07 <dons> the bar at the botoom will also be used for typing in search terms and such.
14:11:15 <dons> but hopefully not red :)
14:11:18 <SamB> ehe
14:11:32 * SamB goes up to clean behind the toilet
14:11:52 <TheHunter> shapr, (I had forgotten that written something here) sure, that's ok.
14:12:10 <SamB> dons: so why did you name a dangerous function like that with no "unsafe"?
14:12:57 <dons> yeah, double plus ungood
14:13:43 <xinming> > [ 1 | x <- [1..10]]
14:13:44 <lambdabot> [1,1,1,1,1,1,1,1,1,1]
14:13:50 <xinming> Is there a shorter version please?
14:14:04 <dons> > replicate 10 1
14:14:05 <lambdabot> [1,1,1,1,1,1,1,1,1,1]
14:14:26 <xinming> > replicate 5 "string"
14:14:27 <lambdabot> ["string","string","string","string","string"]
14:14:32 <xinming> > concat replicate 5 "string"
14:14:33 <lambdabot>   The function `concat' is applied to three arguments,
14:14:33 <lambdabot>   but its type `[[a]] -> [a]' has only one
14:14:33 <lambdabot>   In the definition of `xxxx': xxxx = concat replicate 5 "string"
14:14:34 <dons> > let f = 1 : f in take 10 f
14:14:35 <lambdabot> [1,1,1,1,1,1,1,1,1,1]
14:14:43 <xinming> > concat( replicate 5 "string" )
14:14:44 <lambdabot> "stringstringstringstringstring"
14:14:50 <xinming> hmm, dons thanks
14:14:55 <mauke> > concatMap "string" [1..5]
14:14:55 <lambdabot> Couldn't match `a -> [b]' against `[Char]'
14:14:59 <xinming> replicate is enough
14:15:04 <mauke> d'oh, missing const
14:15:51 <dons> @pl (\c -> Just (c,c))
14:15:51 <lambdabot> Just . join (,)
14:16:03 <dons> and  there is always an answer like this:
14:16:07 <dons> > take 10 $ unfoldr (\c -> Just (c,c)) 1
14:16:08 <lambdabot> [1,1,1,1,1,1,1,1,1,1]
14:16:34 <dons> @karma+ unfoldr
14:16:34 <lambdabot> unfoldr's karma raised to 2.
14:16:38 <xinming> @dict-all TMTOWTO
14:16:38 <lambdabot> Unknown command, try @listcommands.
14:16:46 <xinming> @listcommands
14:16:46 <lambdabot> use listcommands [module|command], please. Modules are:
14:16:46 <lambdabot> babel base code dice dict dummy dynamic elite fact haddock help hoogle
14:16:46 <lambdabot> karma localtime more pl plugs quote search seen spell state system todo
14:16:46 <lambdabot> topic type version vixen where
14:16:58 <xinming> @localtime
14:17:17 <xinming> @command
14:17:17 <lambdabot> Unknown command, try @listcommands.
14:17:20 <shapr> @localtime xinming
14:17:21 <lambdabot> Local time for xinming is Fri Nov 18 06:17:02
14:17:27 <xinming> @localtime shapr 
14:17:29 <lambdabot> Local time for shapr is Thu Nov 17 23:17:06 2005
14:17:48 <xinming> oops, I am always standing in the future. ;-)
14:17:50 <Cale> hmm...  "The function `concat' is applied to three arguments" -- I like the spelled out number :)
14:17:57 <dons> @localtime dons
14:18:14 <shapr> Dons has left the timestream completely.
14:18:16 <SamB> dons: isn't there supposed to be a @dict-all command?
14:18:24 <dons> @help all-dicts
14:18:35 <dons> wake up lambabot
14:18:38 <lambdabot> I perform dictionary lookups via the following 14 commands:
14:18:39 <xinming> @all-dict TMTOWTO
14:18:39 <shapr> @hello
14:18:40 <lambdabot>  @all-dicts .. Query all databases on dict.org
14:18:42 <lambdabot>  @devils ..... The Devil's Dictionary
14:18:45 <lambdabot>  @easton ..... Easton's 1897 Bible Dictionary
14:18:46 <lambdabot>  @elements ... Elements database
14:18:49 <lambdabot> [10 @more lines]
14:18:50 <lambdabot> Local time for dons is Fri Nov 18 09:12:51 2005
14:18:52 <lambdabot> No match for "TMTOWTO".
14:18:54 <lambdabot>  @help <command> - ask for help for <command>
14:18:54 <shapr> tmoertel wrote that module.
14:18:55 <SamB> xinming: does your computer not know what year it is?
14:19:02 * SyntaxNinja points out that some people could just msg lambdabot
14:19:03 <dons> xinming, no! you're in the past :)
14:19:58 <sjanssen_> I just @listcommands in a private message to lambdabot, should it use @more, so it doesn't print out for more than 60 seconds?
14:20:17 <dons> sjanssen_, good idea.
14:23:16 <SamB> dons: 30 minutes now
14:24:27 <dons> looks good here so far
14:36:16 <shapr> @ghc
14:36:17 <lambdabot>  yi-static: internal error: TSO object entered!
14:36:22 <shapr> Wow, cool.
14:36:50 * shapr just got "Only unit numeric type pattern is valid"
14:37:26 <dons> > 3 :: 2
14:37:26 <lambdabot>  Only unit numeric type pattern is valid
14:37:40 <dons> > undefined :: 1
14:37:41 <lambdabot>  add an instance declaration for (Show GHC.Base.Unit)
14:37:51 <dbremner> shapr - hello
14:39:03 <shapr> hiya dbremner, how's life?
14:39:21 <dbremner> shapr - pretty good, yourself?
14:39:27 * cjb finds ten year-old elisp that he'd quite like to work.  Sigh.
14:39:42 <shapr> dbremner: I'm having a blast with the House TCP/IP stack.
14:40:06 <shapr> dons: neat, :t undefined :: 1  gives undefined :: 1 :: GHC.Base.Unit
14:40:08 <dons> shapr, cool. what you up to? what evil plans?
14:40:15 <xinming> ["abcdefg", "hijklmn"] how to compose into another form? ["ah", "bi", "cj", ...]
14:40:28 <shapr> Yes, my Evil Project.
14:40:39 <dons> > transpose ["abcdefg", "hijklmn"]
14:40:39 <lambdabot> ["ah","bi","cj","dk","el","fm","gn"]
14:40:49 <xinming> dons: thanks.
14:40:57 <dons> @docs Data.List
14:40:57 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html
14:40:58 <dons> ;)
14:48:49 <xinming> transpose ((x:xs) : xss)
14:49:07 <fworp> > (concat . transpose) ["peanut butter","jelly"]
14:49:08 <Lemmih> Good night, guys.
14:49:08 <lambdabot> "pjeealnluyt butter"
14:49:13 <fworp> mmm
14:49:58 <xinming> in the above example, what will these 3 "variable" get for the first match?
14:50:11 <xinming> transpose ["abcdefg", "hijklmn"]
14:52:11 <xinming> hmm, I think I know
14:56:27 <Cale> > transpose ["abcdefg", "hijklmn"]
14:56:29 <lambdabot> ["ah","bi","cj","dk","el","fm","gn"]
14:57:28 <Cale> I wonder why permutations and combinations were ever removed from the List library
14:58:00 <Cale> They're both easy enough to write, but then again, most of the prelude and list stuff is.
14:58:10 <musasabi> To make them better homework exercises?
14:58:15 <fworp> > zipWith (:) ["abcdefg","hijklmn"]
14:58:16 <lambdabot>  add an instance declaration for (Show ([[[Char]]] -> [[[Char]]]))
14:58:27 <Cale> well, that's not a decent reason to remove them :)
14:58:46 <fworp> > zipWith (:) "abcdefg" "hijklmn"
14:58:46 <lambdabot> Couldn't match `[Char]' against `Char'
14:59:05 <Cale> > zipWith (\x y -> [x,y]) ["abcdefg","hijklmn"]
14:59:06 <lambdabot>  add an instance declaration for (Show ([[Char]] -> [[[Char]]]))
14:59:15 <fworp> oh right
14:59:31 <Cale> > zipWith (\x y -> [x,y]) "abcdefg" "hijklmn"
14:59:32 <lambdabot> ["ah","bi","cj","dk","el","fm","gn"]
14:59:40 <dons> musasaabi, hehe homework. right!
14:59:59 <dons> or often you'll just specify homework that says: you cannot import List
15:00:20 <Cale> yeah, I mean, it's easy enough to tell if they write perms = permutations
15:00:54 <dons> kinda ;) and obfuscated haskell is not a widely spread ability
15:01:13 <dons> unlike obfuscated java, where students seem to have an amazing natural ability
15:01:30 <Cale> It's easier to write the function than it would be to obfuscate the fact that you're using the List library's version
15:01:44 <musasabi> dons: well when one is thinking in Haskell and writing Java the end-result can be quite horrible ;)
15:01:57 <dons> ah true, musasabi!
15:02:15 <dons> also, hard core C programmers tend to write *weird* haskell with too many allocas
15:02:22 <Cale> hehe
15:03:03 <Cale> When I was playing around with the ffi, I found it a bit fun to write "p <- malloc"
15:04:16 <SamB> Cale: hehe
15:04:18 * SamB looks for context
15:05:18 <dons> SamB, hmp3 still running ok? you'll let me know of the first sign of trouble, I guess ;)
15:05:44 <Cale> What are other people's opinions on the composition/record selection thing?
15:05:46 <SamB> quick, somebody write us up our own log viewer webapp ;-)
15:05:57 <dons> oh, we have a new log module in lambdabot..
15:06:02 <dons> perhaps I should turn it on.
15:06:18 <SamB> dons: okay, except for this "user error (curses exception: wmove)" which I assume was masked by the clrtoeol issue
15:06:33 <Cale> I'm sort of getting tired of arguing about it, as (.) will probably not lose its place as function composition for fear of breaking code anyway.
15:06:39 <SamB> dons: I'm talking about the clog logs
15:07:17 <dons> SamB, oh wmove too eh? linux ncurses is weird
15:07:40 <SamB> Cale: . is for composition.
15:07:52 <SamB> Cale: record selection can get its own punctuation mark!
15:08:04 <Cale> SamB: I agree
15:08:30 <SamB> too bad we are pretty much out of them :-(
15:08:46 <Cale> I actually think that no puncuation mark for record selection (somewhat like we currently have) is best.
15:08:54 * SamB thinks this is why perl 6 is allowing Unicode symbols
15:09:11 <SamB> Cale: yeah. probably.
15:09:22 <Cale> Haskell should allow unicode symbols - I think the Report says it does.
15:09:24 <SamB> maybe an infix operator...
15:09:31 <Cale> but GHC doesn't implement that
15:09:32 <SamB> Cale: well, yes.
15:09:33 <Philippa_> I do like most of the current record syntax
15:09:39 <Philippa_> it's the lack of power that pisses me off
15:09:40 <SamB> but the report says a lot of things ;-)
15:10:03 <SamB> Philippa_: yeah ;-)
15:10:07 <Cale> I wish GHC would allow unicode. It would be awfully nice to be able to use greek letters for type variables.
15:10:14 <xinming> why perl 6 will support Unicode in my opinion is that the punctuations aren't enough to compose so many operations. ;-)
15:10:21 * SamB wishes there was an update operation that took functions
15:10:25 <Philippa_> someone got an URL for SPJ's proposal again?
15:10:36 <Philippa_> yeah, that'd be a nice extension
15:10:38 <Cale> Doesn't perl 5 support unicode anyway?
15:10:57 <xinming> Cale: Not supported at first.
15:10:58 <Cale> I seem to remember the snowman operator coming up in the context of perl 5.
15:11:04 <SamB> maybe someone should hack up some kind of {-# ENCODING #-} standard ;-)
15:11:05 <Cale> :)
15:11:42 <Philippa_> although in the general case it's case rec of {pattern} -> rec {newstuff here}, which isn't too onerous IMO
15:11:45 <Cale> I think that UTF-8 would be good enough for now.
15:12:18 <Philippa_> similarly, you can still refer to the old record in the update if you've got it named
15:12:39 <Philippa_> foo {field = field foo * 2} and so forth
15:12:55 <SamB> Cale: but it would be nice for GHC to still reject files whose encoding it doesn't know
15:13:09 <SamB> of course, iirc GHC uses alex...
15:13:21 <SamB> which iirc doesn't support unicode yet
15:13:50 <SamB> Philippa_: what if I wanted to update a deeply nested field?
15:14:21 <Cale> I really think it would be nice for that to be fixed :) Of course, you might start ending up with people like me with strange keyboard setups releasing libraries with identifiers people can't type, but that's another thing :)
15:14:54 <Cale> Î¼ = join; Î· = return
15:14:58 <Cale> hehe
15:15:12 <Philippa_> SamB: Nest away... though yeah, it'd be nice to allow foo.bar.baz = newvalue
15:15:33 <Khisanth> Cale: snowman operator? must be perl6
15:15:49 <Khisanth> maybe something for serialization :)
15:15:59 <mauke> â
15:16:08 <sploo22> is anybody here familiar with arrows
15:16:11 <sploo22> ?
15:16:19 <SamB> Philippa_: even some kind of composable update would be nice 
15:16:32 <Cale> sploo22: not too familiar, but I know a little about them
15:16:48 <Cale> I'm sure someone here knows more than me :)
15:17:13 <Philippa_> SamB: um, example?
15:17:17 <Khisanth> mauke: I was thinking of freeze and thaw from Storable, is there a melting snowman?
15:17:27 <sploo22> Cale: well, I was reading "Arrows and Computation" by Ross Paterson today, trying to wrap my head around it
15:17:34 <Philippa_> (I mean, you can compose updates insofar as the result's another record you can update again...)
15:17:36 <SamB> Philippa_: I'm not sure what the syntax would be.
15:17:37 <mauke> no idea
15:17:48 <Philippa_> pick any halfarsed syntax that communicates the idea? :-)
15:17:51 <sploo22> Cale: and there was an example of an arrow type: newtype ListMap i o = LM ([i] -> [o])
15:18:01 <Cale> sploo22: sure :)
15:18:07 <SamB> but I'd like something no more than three times as verbose as (map . map . map)
15:18:28 <Philippa_> {onefield ~= {innerupdate} }?
15:18:39 <sploo22> Cale: it was one of the example problems... it said that it was "almost an arrow type" but that there was some problem with getting it to work. but it seems pretty straightforward to me, am I missing something?
15:20:07 <Cale> sploo22: hmm, how does "first" work?
15:20:46 <sploo22> Cale: just a second, let me paste my code
15:21:06 <Philippa_> SamB: ah. With you, I think. Does my syntax (where ~= means "apply this function" and we take update syntax without the record in front as a function taking a record...) work for you?
15:21:27 <SamB> Philippa_: that would be nice
15:21:36 <SamB> I'm not sure it would work though
15:22:13 <Philippa_> yeah. A different syntactic variant for "just apply the update" would though
15:22:25 <SamB> I guess it would probably not be too tricky to parse
15:22:55 <nuffer> hi, I'm working with GHC
15:23:05 <nuffer> and I have 'import Multimedia.SDL.Core' but I get module not found
15:23:14 <nuffer> even though I can see the module on my filesystem in the GHC folders
15:23:18 <nuffer> what's going on here?
15:23:21 <sploo22> Cale: ok, see http://www.haskell.org/hawiki/HaskellIrcPastePage (at the top)
15:24:12 <Cale> well, that has the right type at least
15:24:19 <Cale> does it satisfy all the laws?
15:25:11 <sploo22> Cale: as far as I know... let me double-check
15:25:26 <eivuokko> nuffer, Do you have correct -package on commandline?
15:25:37 <nuffer> I don't know what that means, so I'm going to guess no, I don't
15:25:57 <Cale> nuffer: try ghc --make
15:26:59 <nuffer> just tells me there are no input files
15:27:02 <nuffer> I'm on windows, if that matters
15:27:44 <nuffer> ach, sorry eivuokko, got to run
15:28:03 <dons> @seen joelr
15:28:04 <lambdabot> I haven't seen joelr.
15:28:04 <nuffer> if someone wants to /msg me and tell me what I'm doing wrong, I'd be quite grateful
15:28:07 <dons> @seen joelr_
15:28:07 <lambdabot> I haven't seen joelr_.
15:28:21 <SamB> nuffer: are you scared of AndersJ or something?
15:28:39 <Cale> sploo22: it doesn't seem to satisfy the functor law
15:29:53 <xinming> where to get the built-in operator list for haskell?
15:30:21 <shapr> @seen joelr1
15:30:21 <lambdabot> I saw joelr1 leaving #haskell 1 hour, 23 minutes and 4 seconds ago.
15:30:42 <musasabi> /c/c
15:30:49 <dons> joelr1, sometimes I get the feeling you're really despairing of Haskell, but then I see: "I'm quite satisfied with my first Haskell project. I love Haskell and
15:30:52 <dons> will continue hacking away with it. "
15:31:13 <dons> I wonder if he reads the logs.
15:31:17 <shapr> Could be.
15:31:23 <shapr> Maybe lambdabot needs a @tell command.
15:31:31 <SamB> what logs are readable?
15:31:34 <shapr> You could use memoserv I guess.
15:31:37 <SamB> the logs up there are raw
15:31:51 <dons> http://tunes.org/~nef/logs/haskell/
15:31:52 <dons> ?/
15:31:54 <shapr> SamB: You could write a nice formatter :-)
15:31:57 <SamB> shapr: you are the web developer, right?
15:32:04 * shapr runs away
15:32:14 <Cale> runLM (first $ LM cycle >>> LM tail) [(1,1), (1,2)] == runLM (first (LM cycle) >>> first (LM tail)) [(1,1), (1,2)]
15:32:17 <SamB> okay. somebody write me the function that hashes nicknames to colors and I'll consider it ;-)
15:32:19 <shapr> Right now I'm the TCP/IP newbie.
15:32:23 <Philippa_> dons: it's like that when you find something really great that *still* doesn't quite manage what you want despite being much better than all the other crap
15:32:33 <SamB> tcp/ip? bah.
15:32:34 <dons> @remember joelr Fundeps, existential types, HList take a while to grasp
15:32:36 <SamB> who needs them.
15:32:45 <Cale> sploo22: try that
15:32:45 <xinming> :-/ anyone can answer me? if there is a list of operators availabe for haskell
15:32:55 <dons> Philippa_, yeah.
15:32:56 <shapr> xinming: You can define your own, so.. not really.
15:33:05 <xinming> hmm, include $! $ and ^ such kind of operators.
15:33:10 <SamB> xinming: you can look at the report's index
15:33:10 <Cale> xinming: there's a bunch in the prelude
15:33:11 <dons> but he really went nuts with all the haskell extensions under the sun.
15:33:17 <shapr> xinming: You can read the standard library docs to find out what's available by default.
15:33:21 <SamB> there is probably a section for infix ops
15:33:33 <xinming> Ok,thanks.
15:33:34 <dons> Fundeps and HList. has anyone other than Joel written a program that uses both?
15:33:44 <Philippa_> heh
15:33:52 <dons> as well as threads, ffi, packed strings..
15:33:54 <dons> binary io
15:33:57 <Philippa_> I'd expect a lot of uses of HList to use fundeps
15:33:57 <Cale> any HList program uses fundeps
15:34:02 <SamB> I'm not sure I've managed to even write an entire program that uses fundeps ;-)
15:34:08 <SamB> I doubt it much, in fact ;-)
15:34:08 <sploo22> Cale: oh, ok. thanks very much! :)
15:34:15 <dons> lambdabot uses fun deps
15:34:20 <Philippa_> I've had a go with fundeps before in a setting where HList was part of the 'natural' solution
15:34:23 <dons> they're great for associating types.
15:34:25 <SamB> of course, Haskell things can be useful without being programs
15:34:25 <Cale> Fundeps are pretty natural
15:34:30 <dons> but maybe we should just have associated types ;)
15:34:39 <kosmikus> usually, whenever I find myself using fundeps, I start thinking that my design is broken, so I usually end up using something else
15:34:48 <Cale> I don't see what's so wrong about having both associated types and fundeps
15:34:55 <SamB> maybe I should be more specific: I don't think I ever got very far in a program with fundeps.
15:34:56 <Cale> sure, they overlap a lot
15:35:01 <Philippa_> dons: I found myself musing on a generalised defaulting mechanism earlier...
15:35:06 <dons> you can have both, but fun deps do a lot of other weird things
15:35:14 <SamB> what are associated types?
15:36:04 <dons> associate types with a class, then instances get to define their own types.
15:36:13 <dons> similar, but cleaner, imo, than fundeps
15:36:37 <Cale> Fundeps basically give you a restrited form of type functions.
15:36:41 <SamB> paper(s)?
15:36:59 <Cale> http://citeseer.ist.psu.edu/chakravarty05associated.html
15:37:20 <dons> SamB, http://www.cse.unsw.edu.au/~chak/papers/CKPM05.html, http://www.cse.unsw.edu.au/~chak/papers/CKP05.html
15:37:43 <dons> with associated types you can map ML modules to Haskell type classes, and back
15:37:49 <dons> as stefanw has shown.
15:38:04 <SamB> are citeseer's downloads still broken?
15:38:05 <Cale> So surely you can do it with fundeps :)
15:38:05 <kosmikus> Cale: yes, where type functions are what you really want.
15:38:13 <dons> Cale, yes.
15:38:22 <dons> a la Lambdabot's MODULE almost.
15:38:29 <luqui> Every time I come in here, I come into dons having a conversation with Cale
15:38:33 <Cale> heh
15:38:35 <dons> hehe
15:38:51 <SamB> luqui: do you always come around the same time of day?
15:38:55 <dons> because Cale is an insomniac, and likes to stay up during .au day
15:39:04 <Philippa_> I really should write up a no-subtyping-required proposal for extensible types in Haskell
15:39:06 <Cale> hehe, you noticed that :)
15:39:20 <Philippa_> oh *god*
15:39:25 <Philippa_> I  just had a horrific thought
15:39:30 <kosmikus> Philippa_: like the one I'm writing up? ;)
15:39:32 <Philippa_> extensible GADTs
15:39:39 <dons> oh my. hard..
15:39:41 <luqui> Philippa_, what's wrong with subtyping?
15:39:53 <Philippa_> luqui: would require changes to GHC's Core language
15:39:53 <kosmikus> of course you want extensible GADTs as well
15:39:59 <Cale> Subtyping breaks HM, iirc.
15:40:07 <luqui> ahh, that would be important
15:40:13 <Cale> I can't quite recall why.
15:40:15 <Philippa_> Cale: yes, but not as badly as you'd think if you're sensible about it
15:40:27 <dons> @remember joelr the learning curve is far steeper with Haskell but it is far more elegant and readable
15:40:30 <shapr> @type (++ ":" ++)
15:40:31 <lambdabot> parse error on input `)'
15:40:33 <eivuokko> Cale, maybe because practical subtyping might need conversions, which HM might not like?
15:40:41 <shapr> What's up with that?
15:40:42 <Philippa_> Cale: you unify two subtypes and discover they have more than one common supertype. Worse yet, multiple least upper bounds.
15:40:46 <dons> shapr, weird.
15:40:58 <Philippa_> that's where most of the breakage comes from
15:41:00 <dons> Prelude> :t (++ ":" ++)
15:41:00 <dons> <interactive>:1:10: parse error on input `)'
15:41:08 <Cale> Philippa_: ah, right
15:41:16 <Cale> hmm...
15:41:18 <Philippa_> oh, and you tend to end up wanting to loosen your "most general type" guarantee a little
15:41:24 <dons> shapr, it looks like a weird section
15:41:32 <shapr> I wonder why it doesn't work.
15:41:34 <Philippa_> because inferring top (or as close as you can get) all the time is lame
15:41:34 <dons> and parsing gets confused.
15:41:43 <kosmikus> shapr: why should it work?
15:41:45 <dons> @type ((++ "x") ++)
15:41:45 <lambdabot>   Expecting a function type, but found `[a]'
15:41:45 <lambdabot>   Expected type: [a]
15:41:48 <kosmikus> shapr: it's not a section
15:41:49 <luqui> shapr, does it make sense for operators that are not associative?
15:42:24 * shapr thinks about that.
15:42:40 <musasabi> A
15:42:54 <dons> @type (\s t ->  s ++ "x" ++ t)
15:42:55 <lambdabot> [Char] -> [Char] -> [Char]
15:42:56 <shapr> At first glance, it seems equivalent to (\x y -> x ++ ":" ++ y)
15:43:00 <dons> @pl (\s t ->  s ++ "x" ++ t)
15:43:00 <lambdabot> (. ('x' :)) . (++)
15:43:06 <dons> that's what it's equivalent too ;)
15:43:13 <dons> @type (. ('x' :)) . (++)
15:43:13 <lambdabot> [Char] -> [Char] -> [Char]
15:43:20 <shapr> wild
15:43:21 <shapr> Thanks
15:43:34 <musasabi> "Extensible records with scoped labels" looked very nice.
15:44:07 <xinming> It's a full service bot. :-)
15:44:11 <luqui> @pl (\s t -> s ++ "xxx" ++ t)
15:44:12 <lambdabot> (. ("xxx" ++)) . (++)
15:44:27 <xinming> what does pl mean ?
15:44:31 <luqui> pointless :-)
15:44:33 <dons> another thing, joelr wants to use macos x and windows, the two worst supported ghc archs
15:44:34 <luqui> (as in pointfree)
15:45:21 <kosmikus> good night ...
15:45:49 <dons> @where+ blobs http://haskell.org/Blobs
15:45:49 <lambdabot> blobs ~> http://haskell.org/Blobs
15:45:50 <Cale> yeah, who uses windows, anyway?
15:45:54 <Cale> hehe
15:46:13 <dons> exactly!
15:46:22 <dons> I mean, for a server??
15:46:29 <eivuokko> Yes.
15:46:39 <eivuokko> I do.
15:46:43 <Cale> mac os x had okay support
15:46:58 <xinming> well, many admin use windows as the don't like the command interface
15:47:00 <Cale> Thanks to Wolfgang
15:47:07 <dons> yeah the mac basically works. but still it is weird. and a few things don't work nicely
15:47:31 <Philippa_> I'm a windows user and I still wouldn't want to use it for a server. But hey, if the client pays their money...
15:47:44 <dons> yeah :/ oh well.
15:48:46 <dons> oh, nice, david roundy is using ion.
15:48:55 <dons> and tuomov is using darcs
15:48:57 <dons> happy happy
15:49:04 <Cale> Really, it would be nice if there was some extra support for the windows users out there. I recall being pissed off at Windows' broken terminal when trying to use GHC.
15:49:18 <eivuokko> Huh?
15:49:31 <SyntaxNinja> oh hey, I uploaded the new haskell-mode emacs mode to Debian last night, so you Debian Emacs users go get it and let me know of any problems.
15:49:44 <SyntaxNinja> Cale: have you told anyone of your troubles?
15:49:49 <Cale> I ended up installing emacs just because its terminal emulation was better.
15:49:52 <SyntaxNinja> I mean, like someone who can do soemthing about it
15:50:04 <Cale> Microsoft?
15:50:07 <dons> but they have many users, why can't the users get the ghc port up to scratch? like we do for every other OS?
15:50:15 <eivuokko> Cale, what you are saying makes no sense.  There is no "terminal emulation" as there is in unix.
15:50:43 <Cale> eivuokko: well, what do you call the command-line interface in a window?
15:50:53 <eivuokko> dons, Windows has limited support for sh and configure etc, it is much harder to play with them in Windows that in unixes.
15:50:54 <Philippa_> eivuokko: there is, however, a notion of "console window"
15:51:00 <eivuokko> Cale, console window.
15:51:09 <Philippa_> and you can't configure that half as well as you should be able to
15:51:28 <Muad_Dib> who have many users?
15:51:55 <dons> apparently we have a lot of windows ghc users, despite the window ghc port being the more unstable
15:52:06 <Muad_Dib> well
15:52:12 <Muad_Dib> i mostly use ghc on iwndows as well :P
15:52:14 <Cale> afaict, its emulating an 80x25 ansi terminal
15:52:18 <Cale> it's*
15:52:23 <dons> which makes me wonder if there's so many users, why is the port unstable?
15:52:28 <Muad_Dib> yeah
15:58:49 <Muad_Dib> i didnt know about that one either
15:58:49 <dons> as for every other OS, stability is proportional (roughly) to the number of users 
15:58:49 <eivuokko> What is unstable about it?
15:58:49 <dons> but maybe there's a big "can't do this easily" coefficient on windows
15:58:49 <Cale> there was a feature to switch it into 80x50 or something, but no scrollback, and the keys seemed broken
15:58:49 <dons> eivuokko, oh, going back to all the problems joelr has had with this network app on windows
15:58:49 <Muad_Dib> dons: or there is a "on this OS users mostly arent developers themselves" coefficient
15:58:49 <eivuokko> dons, Ah, yeah, ok.  Some io in libraries is badly broken
15:58:49 <dons> yeah, so let ability_to_fix_code = 0.01
15:58:49 <dons> so in the end, we havve 10 competent people using windows who can actually fix things, so it has the stability of one of the more obscure unixes
15:58:49 <Muad_Dib> indeed
15:58:49 <eivuokko> Mmmm.
15:58:49 <Muad_Dib> whereas the common unix distributions has about 100 users, who are all competent and fix the bugs themselves
15:58:49 <eivuokko> It could maybe use redoing rts and goign through libraries.
15:58:49 <Muad_Dib> or
15:58:49 <SamB> dons: probably the reason is related to the fact that windows is approiximately 1000 times more annoying to compile C code on?
15:58:49 <Muad_Dib> most windows users are just beginners
15:58:49 <dons> also there are a lot more portability issues on windows.
15:58:49 <Muad_Dib> and use only the most common parts of the code
15:58:49 <musasabi> And testing things on windows is harder than on *nix.
15:58:49 <Muad_Dib> so, the other (interesting) parts are never really tested
15:58:49 <SamB> and windows is so SLOOW
15:58:49 <dons> it's a platform that's trying to drive away new software, then?
15:58:49 <eivuokko> It seems many Windows problems come from libraries being unixy, not ghc.
15:58:49 <musasabi> Is is quite easy to test a library package on a given *nix, but doing the same on windows usually takes at least a day.
15:58:49 <Philippa_> seconded
15:58:49 <shapr> For me at least, it's much harder to develop on Windows. I ended up using the Win32 Nokia 9210 emulator by VNC, mounting the source via smb, and using the JVM remote debugging attachment from Linux.
15:58:49 <SamB> no, it effortlessly drives away new software
15:58:49 <dons> shapr!
15:58:49 <haskellnewbie> shapr: that sounds painful
15:58:49 <Muad_Dib> windows doesnt drive away new software
15:58:49 <Muad_Dib> infact, it welcomes all new software
15:58:49 <Muad_Dib> at least when its from Microsoft itself
15:58:49 <shapr> haskellnewbie: For me, it was less painful than directly developing on Windows.
15:58:49 <shapr> I still have a nice screenshot from that job though - http://www.scannedinavian.org/~shae/nokia-emu-jython.png
15:58:49 <dons> so MS doesn't have an apple-like desire to get new coders on their platform?
15:58:49 <eivuokko> Also, note from feedback I got today, who'd want to tell you problems in Windows?
15:58:49 <Philippa_> the unix-flavouredness of almost everything else people work with does make life hard on windows
15:58:49 <shapr> eivuokko: That's an exception on #haskell
15:58:49 <eivuokko> Right.
15:58:49 <shapr> eivuokko: You *know* we encourage people to ask questions.
15:58:49 <Philippa_> yeah, I've usually had at least something vaguely helpful
15:58:49 <Muad_Dib> dons: why would they?
15:58:49 <Philippa_> even the time I caught an RTS bug
15:58:49 <Philippa_> they're doing that for .NET
15:58:49 <Philippa_> by and large they prefer a separate subculture of windows programmers. It's a pain in the arse
15:58:49 <dons> eivuokko, oh sorry :) there just seems to be so many barriers to getting code running properly on windows, it can be frustrating
15:58:56 <Muad_Dib> but
15:59:01 <Muad_Dib> other things focus on windows :P
15:59:05 <eivuokko> shapr, Yes, well.  It is not my experience that I get help on Windows related issues here.  Not just today.  Maybe I ask wrong then.
15:59:12 <Muad_Dib> so its just the point of view you take
15:59:13 <eivuokko> *wrongly
15:59:19 <musasabi> 1) open VNC to the other side of the country, 2) install sh + utilities, 3) iterate 2) a few before a version happens to work, 4) install ghc, 5) fix GHC that does not work, 6) copy lib sources, 7) note that you need to pack them in a different format for windows, 8) try building the library, 9) edit on *nix -> 8), 10) it works
15:59:30 <Axioplase> Hi!
15:59:31 <Philippa_> eivuokko: I do find the level of helpfulness varies rather, and often people just don't *know*
15:59:40 <Cale> Axioplase: hello!
15:59:48 <shapr> eivuokko: If it weren't so hard to automate and remotely test software on Windows, I'd keep a spare win32 box around so I could develop cross-platform Haskell apps.
15:59:49 <SamB> dons: maybe its just that the shell and devtools are very unconducive to a productive working environment, wheras apple started with a succesful development OS (the home of Quake!)?
16:00:00 <SyntaxNinja> eivuokko: it all depends on who is here.  most of us use linux, I think.  if you don't find someone who knows about your problem her, post to a mailing list.
16:00:06 <SyntaxNinja> Philippa_ uses windows
16:00:06 <eivuokko> shapr, It isn't hard.  I used to build daily binaries for darcs..
16:00:32 <Cale> ndm uses windows
16:00:33 <Philippa_> eivuokko: it's harder to do it from a CLI though
16:00:34 <eivuokko> shapr, I build *a lot* of stuff automated in Windows, at work.
16:00:39 <dons> SamB, yeah, and also they give away laptops to uni students who write code
16:00:43 <Philippa_> which means you need quite a lot of windows-specific knowledge
16:00:50 <dons> and send them to LA once a year for hack fests
16:00:51 <Axioplase> someone here succeeded in make me think that haskell might be a language of choice, so I'm coming here to see how haskellers are... (Hi Lunar^ !)
16:00:51 <Philippa_> whereas almost everything else is a *nix variant sooner or later
16:00:56 <shapr> eivuokko: Can you do that with a straight up install of Windows whatever?
16:00:56 <Muad_Dib> let me give another example
16:00:58 <dons> s/LA/SanFran/
16:01:03 <shapr> salut Axioplase 
16:01:04 <SyntaxNinja> Axioplase: they rule. any more questions? ;)
16:01:06 <eivuokko> Philippa, I agree it requires a lot of knowledge.  I say it requires a lot of knowledge in unixes as well.
16:01:14 <Muad_Dib> when creating a website, do you creat it in IE and then fix mozilla to do the same, or otherwise around? :P
16:01:17 <triplah> lol
16:01:28 <triplah> come to a haskell channel and ask about haskell
16:01:33 <Philippa_> yes, but it's easier to find where to acquire the knowledge for *nix IME
16:01:34 <eivuokko> shapr, Yeah, I do most of my stuff with straight install of Windows.
16:01:36 <Philippa_> and that's saying something
16:01:50 <Philippa_> I know to read up on cron if I'm ever setting up a *nix system, for example...
16:01:53 <triplah> Axioplase: i started learning haskell two days ago. I assure you, my mind has been blown :)
16:01:59 <shapr> eivuokko: I may end up asking you questions about Haskell on windows then :-)
16:02:00 <dons> hehe :)
16:02:02 <SyntaxNinja> Axioplase: he means that in a good way
16:02:17 <eivuokko> I think it isn't fair to compare "clean" Wdinwos with linux distro that allows you to say on install that you want python, perl etc.  It isn't hard to install f.ex. python in Windows, takes like 5mins tops (if you aren't dumb and unwilling)
16:02:40 <Philippa_> SyntaxNinja: I fail to see how anything involving direct contact between lips and brain could be good ;-)
16:02:44 <triplah> Muad_Dib: make it standards complian, then give a link for people who arent using browses that render it properly
16:02:50 <eivuokko> shapr, Ask away...I'll answer if I can.
16:03:01 <triplah> compliant*
16:03:04 <Muad_Dib> triplah; where do you check wether its standard copliant?
16:03:11 <dons> SamB, up for 1.5 hrs now. any trouble your end?
16:03:11 <musasabi> eivuokko: but needing to install 10 different programs (by hand and clicking through installers) can be very painful for casual testing - and no automatic dependencies.
16:03:14 <Axioplase> SyntaxNinja: I had guessed. Actually, I wanted to write my school project in scheme, but since I don't know haskell yet, I want to give it a try.
16:03:15 <SamB> there was a good deal of hostility directed at windows earlier
16:03:17 <triplah> Muad_Dib: w3c
16:03:18 <shapr> eivuokko: Well, debian comes with a way to install a bunch of stuff like that easily with its default installation. I think it is a fair comparison.
16:03:26 <Muad_Dib> triplah: and you actually get visitors?
16:03:27 <Philippa_> yeah, I do like Debian's system
16:03:27 <Cale> It's annoying how much work it is to install things on windows. On Debian, I can generally type one command and have all the dependencies of a piece of software downloaded and installed with reasonable defaults.
16:03:38 <eivuokko> musasabi, Yes, it is sad fact that most installers don't abide "quiet" install in uniform way.
16:03:43 <Muad_Dib>  emerge **** in gentoo Cale ;)
16:03:44 <Philippa_> although booting into sarge and discovering I couldn't boot back into win2k yet and it's missing *everything* was a scary experience
16:03:49 <triplah> Muad_Dib: no, i dont make sites beyond silly uni stuff myself
16:03:57 <Cale> Muad_Dib: yeah, in gentoo as well, though the process is slower :)
16:04:01 <Philippa_> luckily I knew the package names for a text mode web browser, an IRC client and SSH...
16:04:07 <Philippa_> I'd have been seriously screwed otherwise
16:04:07 <SyntaxNinja> SamB: who was directing hostility at windows?
16:04:15 <Muad_Dib> triplah: so when i'm talking about a big website, we can be quite sure they will be focussing on IE :P
16:04:25 <Cale> Philippa_: apt-cache search
16:04:27 <triplah> Muad_Dib: yeah :|
16:04:28 <eivuokko> shapr, I know.  I run debian.  I don't think it is fair.  As a new user of debian, installing only *few* things works like apt-get install pyuthon.  Most of time I need to get correct package name, which takes easily 2mins.
16:04:41 <eivuokko> shapr, Not to imply I am new user of debian...
16:04:54 <shapr> hm, I use apt-cache search
16:05:04 <eivuokko> Yeah, sure.  apt-cache isnt default installed.
16:05:06 <eivuokko> iirc
16:05:06 <triplah> eix somethingresemblingpackagename
16:05:08 <triplah> :)
16:05:11 * SamB wonders if he could get a laptop from apple
16:05:11 <shapr> I think it is.
16:05:15 * shapr looks
16:05:17 <Cale> it is installed by default
16:05:18 <SamB> dons: nope!
16:05:35 * machack666 would recommend an apple laptop
16:05:37 <Cale> apt-file isn't
16:05:39 <xinming> eivuokko: It is installed by default
16:05:39 <Muad_Dib> SamB: if you got enough $, everything is possible :P
16:05:40 <dons> SamB, good good. remind me to buy you a beer next time in your part of the world ;)
16:05:43 <SamB> well, except the bar at the bottom went missing
16:05:49 <xinming> eivuokko: apt-file isn't installed by default
16:05:51 <SamB> one of the songs had a too-long basename...
16:05:52 <musasabi> A concrete step to make windows support of haskell libraries better would be to provide a service that takes signed cabal packages (tar.gz + signature) and tries to build them and run tests and sends results back.
16:05:53 <SyntaxNinja> eivuokko: sure it is installed by default
16:05:54 <shapr> eivuokko: apt-cache is part of apt, it's required.
16:06:00 <eivuokko> Hmmm
16:06:02 <dons> SamB, ah good bug report. danke
16:06:02 <shapr> musasabi: Yeah, good idea!
16:06:21 <SyntaxNinja> musasabi: have you seen cabal-put?
16:06:23 <eivuokko> Ok, then I remember wrong.
16:06:28 <Philippa_> Cale: I did know enough to sort myself out
16:06:38 <Philippa_> OTOH, someone who hadn't used Debian before would've been really, really fucked
16:06:44 <shapr> eivuokko: In any case, I support your ability to run Haskell on anything you like...
16:06:53 <SamB> SyntaxNinja: JKnecht, I think...
16:06:53 <musasabi> SyntaxNinja: yes, that seems to do half of it.
16:06:58 <shapr> I just don't know anything about Windows, so I can't help much.
16:07:02 <Philippa_> also, IIRC apt-cache search doesn't let you search descriptions?
16:07:07 <Cale> Philippa_: but you're right, the initial setup phase can be a little rough -- Ubuntu looks impressive in that respect
16:07:16 <shapr> Philippa_: it does
16:07:19 <SyntaxNinja> SamB: well nothing against him, but I've never seen JKnecht here before, so I wouldn't say that's exactly typical.
16:07:24 <Philippa_> OK, that would've helped
16:07:27 <Cale> that's exactly what apt-cache search does
16:07:36 <eivuokko> shapr, Heh, I actually got much more help today than I expected. :)  And my problem, as can be seen todays nigthly builds, wasnt Windows specific.
16:07:54 <Philippa_> would still be a bit bewildering to someone trying to figure out which of the various versions they could actually run and how to use the console versions and so forth, but hey
16:08:08 <SyntaxNinja> musasabi: most of what we need is already there. I'd kinda like someone to take over the hackageDB and cabal-get/cabal-put stuff, fwiw.
16:08:08 <Philippa_> it's setting up X that's the real pain in the arse
16:08:23 <SamB> dons: but I am under 21!
16:08:35 <SyntaxNinja> btw, a bunch of ppl here at galois use mac OS X and most stuff is perfectly portable.
16:08:47 <shapr> I was 21 last year. (ok, 0x21)
16:09:04 <Muad_Dib> shapr you old fart... :P
16:09:06 <SyntaxNinja> heh
16:09:18 <SyntaxNinja> > 0x21
16:09:19 <lambdabot> 33
16:09:21 <SamB> SyntaxNinja: I know it isn't typical
16:09:27 <SyntaxNinja> > 0x21 + 1
16:09:28 <lambdabot> 34
16:09:29 <musasabi> Most of the Windows nonportablity is just some FFI things.
16:09:33 <shapr> SyntaxNinja: yeah yeah :-)
16:09:45 <SamB> I mean, some good-natured insults from time to time are one thing....
16:09:54 <musasabi> What functions happen to use stdcall and which one use ccall and what types are not defined etc
16:10:02 <shapr> I'd rather skip the insults entirely...
16:10:06 <eivuokko> musasabi, Huh?  In my experience most of unportability coems from excess use of autotools.
16:10:24 <SyntaxNinja> stupid autotools :)
16:10:27 <SamB> Philippa_: well, remember that there is such a thing as IRCing from a computer that still works ;-)
16:10:28 <Philippa_> when I get it from linux users I tend to rib them about BSD. But only when it's on that level
16:10:33 <musasabi> eivuokko: well autotools causes problems even without windows ;)
16:10:39 <eivuokko> musasabi, True that!
16:10:43 <SyntaxNinja> does anyone want to take over devel of cabal-get, cabal-put?
16:11:03 <Philippa_> SamB: yeah, my machine wasn't screwed, I just had no way to boot into my usual OS until I figured out how to configure GRUB. I'd been expecting the Debian installer to get that right for me, stupidly enough
16:11:17 <Philippa_> I mean, what with it having figured out that there was in fact an OS already there
16:11:24 <shapr> I'd like to, but I don't have the necessary focus.
16:11:42 <Philippa_> AOL, but then I know you're not really asking me anyway
16:12:16 <shapr> I think cabal-{get,put} are important pieces of the Haskell infrastructure.
16:12:17 <SamB> Philippa_: this is why you are supposed to be sure you know how to configure GRUB *before* installing it ;-)
16:12:32 <SamB> it took me forever to get around to installing GRUB...
16:12:44 <shapr> And I'd like to add my darcsforge idea to Cabal/Hackage
16:12:56 <SamB> well, though, I guess if the win2k bootloader was what you had before you don't have much choice...
16:13:03 <Philippa_> right
16:13:12 <eivuokko> I'd like to help with cabal stuff, but unfortunately I want to get few things in ghc right first and get some haskell code into production at work..
16:13:20 <machack666> GRUB? Real men `cat > /dev/sda0' and cross their fingers... ;D
16:13:29 <SamB> I actually didn't install Linux alongside Windows until after I'd installed Linux thrice already ;-)
16:13:45 <Philippa_> machack666: take a good look at my nick and guess how likely I am to consider myself a real man ;-)
16:13:46 <shapr> I installed Linux on a separate hard drive the first time.
16:13:59 <SyntaxNinja> I'm working on a new tool called "cabal-install" that you run against a .tar.gz or a .cabal file and it installs it for you in one step instead of 4 :)
16:14:03 <SamB> one was a 6.x redhat, one was a 7.x redhat, and then there is this Debian box.
16:14:04 <SyntaxNinja> it's pretty straightforward
16:14:08 <shapr> SyntaxNinja: wah cool!
16:14:17 <SamB> I actually didn't have a windows computer to install on until I'd done all those...
16:14:18 <dons> SyntaxNinja, 0x21 + 1? I would not have guessed.
16:14:21 <SyntaxNinja> cabal-install Foo-1.0.tar.gz --prefix=/usr/local --user 
16:14:25 <SyntaxNinja> dons: not me!!
16:14:33 <ozone> SamB: colinux is a nice compromise if you need windows
16:14:39 <eivuokko> Heh
16:14:46 <eivuokko> I run colinux :)
16:14:49 <nuffer> alright
16:14:52 <SamB> Then after I got my XP box I installed ubuntu alongside.
16:14:59 <SamB> but I never boot to it, really...
16:15:06 <ozone> eivuokko: it's great huh :)
16:15:06 <nuffer> would anyone like to help me figure out how to imort Multimedia.SDL.Core now?
16:15:13 <eivuokko> coLinux sucks because it has to bind the thing in one cpu, tho.
16:15:15 <nuffer> imort being import
16:15:18 <dons> nuffer, do you need a -package flag
16:15:21 <SyntaxNinja> dons: that was shapr
16:15:25 <eivuokko> ozone, yeah, it is.
16:15:45 <xinming> I still remember that I let Red hat 7.3 to autopartition my whole hard disk...
16:15:47 <eivuokko> ozone, Depends what you do with it, tho.  IO speed is abysmal for such solution.
16:16:02 <dons> SyntaxNinja, ah, ok :) I see
16:16:10 <SamB> did I mention that my first three installs, I let wipe the system?
16:16:11 <nuffer> dons: I don't know
16:16:19 <ozone> true
16:16:27 <SyntaxNinja> > 0x17
16:16:28 <lambdabot> 23
16:16:33 <SamB> > 0x21
16:16:34 <lambdabot> 33
16:16:40 <dons> nuffer, where does this library live?
16:16:42 <SyntaxNinja> > 0x19
16:16:44 <lambdabot> 25
16:16:47 <xinming> Who knows that Red Hat will delete all partition instead of using "several" partitions.
16:16:50 <nuffer> dons: in my GHC folder
16:16:51 <SyntaxNinja> I'm not old enough to drink yet
16:16:55 <SyntaxNinja> (in hex)
16:16:56 <dons> hehe
16:17:01 <nuffer> under import/Multimedia/SDL
16:17:12 <SamB> xinming: you don't think that is a sensible default?
16:17:15 <dons> nuffer, what do you mean? did you download a haskell package?
16:17:22 <dons> did you build and install it?
16:17:22 <nuffer> no, it came with the installer
16:17:35 <nuffer> I just downloaded the ghc binary installer for windows
16:17:37 <nuffer> this package seems to have come with it
16:17:49 <shapr> Neat
16:17:56 <dons> you're most likely missing the -package foo argument to specify the package this library lives in.
16:17:58 <xinming> SamB: hmm, In fact, I ever "manually" parititioned my hard drive once. So, I thought It will use the previous...
16:18:06 <dons> I'm not sure what package it is though, you'll have to work tha tout.
16:18:10 <nuffer> what exactly is a package?
16:18:14 <dons> "ghc-pkg list" might help
16:18:24 <dons> a package is a haskell library in a nice binary bundle
16:18:26 <dons> sort of.
16:18:34 * SamB was kidding about that being a good default
16:18:36 <eivuokko> I can't spot it directly
16:18:44 * SamB doesn't think that sort of thing should HAVE a default
16:19:00 <nuffer> hmmm, I don't see it in the package list
16:19:28 <eivuokko> It's not in package.conf as far as I could see
16:19:29 <xinming> SamB: well, At that time, I just got a 20G disk, Not much important data. But It taught me that automatic is for a real man..
16:20:15 <eivuokko> nuffer, Which installer was it?
16:20:21 <nuffer> okay, wait, I guess I did copy the files into the GHC folders without realizing it perhaps
16:20:38 <nuffer> and it prompted me saying a certain directory already existed, namely Multimedia, and I assumed that meant that the whole thing was already there
16:20:39 <nuffer> perhaps I was wrong
16:20:45 <eivuokko> nuffer, ah, that explains, it must be installed and registered properly with ghc-pkg
16:21:40 <nuffer> ugh, let me try and figure out how to do that
16:21:59 <eivuokko> nuffer, It should be part of the install-script where you got the modules from
16:22:18 <nuffer> eivuokko: I think there is, but I'm on windows
16:22:25 <nuffer> this was clearly targetted at Linux
16:22:33 <eivuokko> nuffer, Or, hopeyfully, it is cabalised library.  Where is that thing from?
16:22:54 <Philippa_> nuffer: you using Adrian Hey's bindings?
16:22:59 <Philippa_> I had... "fun" getting those to work
16:22:59 <nuffer> err, let me dig it up
16:23:06 <Philippa_> and I've forgotten how I did it
16:23:24 <nuffer> http://homepages.nildram.co.uk/~ahey/HLibs/Multimedia.SDL.Core/
16:23:31 <Philippa_> yeah, that's the one
16:24:14 <nuffer> yeah, any hints?
16:24:39 <nuffer> I have a file labelled package that looks like it's data for ghc package manager or something, what should I do with that one?
16:24:39 <Philippa_> um. It's late. You might have to edit some package configuration files or something like that
16:24:49 <Philippa_> poke at it and see if you can figure it out :-)
16:25:33 <SyntaxNinja> nuffer tell the author to upgrade to cabal
16:31:12 <nuffer> dammit, the makefile updates the package.conf file
16:31:21 <nuffer> but I don't have make because it's Windows
16:33:20 <Philippa_> get MSYS
16:33:22 <Philippa_> it helps a lot
16:33:55 <shapr> Wasn't there a @timein command for lambdabot ?
16:34:10 <nuffer> hmmm, I found a different SDL binding
16:34:40 <dons> @localtime shapr
16:34:41 <lambdabot> Local time for shapr is Fri Nov 18 01:34:19 2005
16:34:51 <dons> ah, but yes.
16:34:59 <shapr> I was thinking more like @timein Hong Kong
16:35:07 <dons> and I forgot to update it when lambdabot moved over to the linux box
16:35:09 <nuffer> okay, it has a .cabal file, what do I do with that?
16:35:13 <shapr> @code
16:35:13 <lambdabot> Module "code" produced error: Text.Regex.Posix.regcomp: error in pattern
16:35:16 <dons> it's an evil perl script that should be rewritten in Haskell.
16:35:24 <dons> also @code is broken.
16:35:31 <dons> you found the two things that are broken ;)
16:35:31 <shapr> I see
16:35:35 <shapr> heh
16:35:46 <dons> @uptime
16:35:46 <lambdabot> uptime: 1 day, 13 minutes and 12 seconds
16:36:18 <shapr> @get-shapr
16:36:18 <lambdabot> shapr!!
16:36:27 * shapr enters an infinite recursive loop
16:37:09 <dons> fix $ \shapr -> get shapr
16:37:16 <shapr> noooo
16:37:29 * shapr twists into the shape of a Klein bottle
16:37:43 <lambdabot> Module "shapr" screwed up: thread killed
16:38:20 <shapr> aiee
16:38:27 <dons> hehe
16:38:31 * shapr is naked without his threads.
16:38:59 <dons> yikes!
16:39:04 * dons covers his eyes
16:39:17 * shapr shows off those unicycle muscles
16:39:21 <shapr> :-)
16:39:26 <dons> oh my!
16:39:45 <shapr> It's obviously after my bedtime...
16:40:02 <dons> @uptime shapr
16:40:02 <lambdabot> uptime: 1 day, 17 minutes and 28 seconds
16:40:06 <dons> doh, doesn't work that way ;)
16:40:21 <shapr> haha
16:48:57 <nuffer> http://hackage.haskell.org/ModHackage/Hackage.hs?action=info&pkg=SDL&pkgVersion=0%2e2%2e0
16:49:01 <nuffer> can anyone help me install that on windows?
16:49:10 <nuffer> I've gotten to "setup build" and I get a couple errors:
16:49:26 <nuffer> I:/ghc/ghc-6.4.1/libHSrts.a(Main.o)(.text+0x1d):Main.c: undefined reference to `__stginit_ZCMain'
16:49:31 <nuffer> and
16:49:33 <dons> hmm
16:49:44 <nuffer> I:/ghc/ghc-6.4.1/libHSrts.a(Main.o)(.text+0x43):Main.c: undefined reference to `ZCMain_main_closure'
16:52:12 <syntaxfree> hey.
16:52:40 <nuffer>  15:17:55 <humasect> hmm. aha. passed in by Setup.lhs sdl-config T_T
16:52:41 <nuffer> what does that mean?
16:52:42 <syntaxfree> are you aware of Lush?
16:52:57 <nuffer> someone with my same problem seemed to think that was the solution to his problem, but I don't understand exactly what it is
16:53:20 * fworp is aware of lush
16:53:35 <SyntaxNinja> nuffer: this package uses autoconf. is that working for you
16:53:38 <SyntaxNinja> nuffer: did you run configure?
16:53:39 <fworp> but little more than that
16:53:54 <nuffer> Syntax, yes, I did configure first
16:54:03 <nuffer> not using autotools, using cabal
16:54:10 <SyntaxNinja> I haven't the slightest clue what "Setup.lhs sdl-config T_T" means
16:54:31 <SyntaxNinja> nuffer: cabal would have called autoconf, fwiw.
16:54:43 <syntaxfree> fworp: would you use Lush rather than CL for small-time numerical work?
16:55:16 <SyntaxNinja> nuffer: what ghc version?
16:55:27 <nuffer> 6.4.1
16:56:50 <SyntaxNinja> nuffer: I'm installing libsdl now. I'll see if I get the same error.
16:57:10 <syntaxfree> I'm  pretty  much sure Haskell is out for this project, but I'm tempted to use some variant of Lisp instead of going for Octave/Matlavb.
16:57:53 <nuffer> it seems like it's trying to build it as a program instaed of a library
16:58:06 <fworp> im not sure syntaxfree
16:58:22 <syntaxfree> I don't like Matlab.
16:58:46 <SyntaxNinja> nuffer: ./setup build -v4 and show us what command-line GHC is using?
16:58:58 <SyntaxNinja> nuffer: it builds for me just fine, and isn't trying to build it as a library. you got the tarball from that hackage web page?
16:58:59 <fworp> i dont like paying for stuff in general
17:00:05 <fworp> so id probably go with lush :P
17:03:02 <SyntaxNinja> nuffer: (I'm on linux)
17:04:19 <nuffer> SyntaxNinja: you here?
17:04:22 <nuffer> I:\ghc\ghc-6.4.1\bin\hsc2hs.exe -oGraphics\UI\SDL\General.hs Graphics\UI\SDL\General.hsc
17:04:32 <nuffer> that's where it's failing
17:05:09 <SyntaxNinja> hi nuffer
17:05:14 <nuffer> yeah, hi
17:05:28 <SyntaxNinja> hsc2hs is giving a linking error?
17:05:35 <nuffer> it would appear so, yes
17:05:43 <SyntaxNinja> do you have that installed?
17:05:51 <nuffer> hsc2hs?
17:05:53 <SyntaxNinja> ja
17:05:58 <nuffer> yes, I do
17:06:08 <nuffer> configure: Using hsc2hs: I:\ghc\ghc-6.4.1\bin\hsc2hs.exe
17:06:23 <eivuokko> Hmm
17:06:40 <SyntaxNinja> nuffer: can you paste your entire output somewhere?
17:06:43 <SyntaxNinja> w/ -v4
17:06:52 <nuffer> that's pretty much all there is
17:07:11 <nuffer> that command, and the two errors about undefined references to __stginit_ZCMain and ZCMain_main_closure
17:08:45 <SyntaxNinja> what happens if you run hsc2hs by hand?
17:08:59 <SyntaxNinja> try without arguments
17:09:18 <nuffer> gives me usage
17:10:13 <SyntaxNinja> and if you run it by hand with those arguments, it also gives you that error?
17:11:24 <nuffer> yes
17:14:02 <machack666> I don't know about with Windows, but I've had a similar error on Mac OS X, which boiled down to me needing to provide a -package flag on building.  (It may have even been on SDL--I'll check my logs to see what I got.)
17:14:25 <SyntaxNinja> machack666: excellent
17:14:32 <haskellnewbie> ooohhhh, more monad trouble here :-(
17:14:57 <SyntaxNinja> haskellnewbie: just do it
17:15:03 <haskellnewbie> heh
17:15:29 <SyntaxNinja> althogh it's failing during hsc2hs, so I'm pretty confused
17:15:57 <nuffer> I don't understand... bleh
17:16:07 <haskellnewbie> all of the state monad examples I've read are horribly confusing
17:16:44 <SyntaxNinja> haskellnewbie: even the one in the control.monad.state documentation?!?!
17:17:00 * int80_h ponders changing his nickname
17:17:07 <eivuokko> nuffer, out of curiosity, how did you install SDL?  Built from source using mingw/msys?
17:17:17 <haskellnewbie> syntaxninja: yes, I've been pondering it for almost 2 days
17:17:44 <nuffer> um, no, I downloaded win32 binaries for mingw
17:17:49 <nuffer> I didn't really "install" it per se
17:18:04 <nuffer> more of a copied every file into the directory that has the Haskell bindings
17:18:06 <haskellnewbie> sheep and grandparents are NOT cutting it for me as examples
17:18:24 <SyntaxNinja> sheep and grandparents?
17:18:27 <nuffer> how should I have installed it?
17:18:55 <eivuokko> nuffer, just confused with sdl-config...
17:19:04 <SyntaxNinja> haskellnewbie: did you see the "examples" section here: http://www.haskell.org/ghc/docs/latest/html/libraries/mtl/Control-Monad-State.html
17:19:06 <haskellnewbie> oh, the freakin silly monad examples I've been staring at for 2 days are all abstract as hell, except for the "tick" counter I've seen on the wiki
17:19:31 <nuffer> sdl-config?
17:19:40 <haskellnewbie> yes, I have
17:20:05 <SyntaxNinja> well, at least you liked tick
17:20:14 <SyntaxNinja> numberTree isn't clear?
17:20:19 <haskellnewbie> kinda
17:20:24 <SyntaxNinja> haskellnewbie: what's the difficulty?
17:20:44 <nuffer> would anyone like to clear up this whole SDL binding thing for me?
17:20:55 <SamB> SyntaxNinja: that monad tutorial
17:20:56 <nuffer> or should I just migrate to linux if I want to do graphical haskell dev?
17:21:18 <int80_h> no migrate to bsd
17:21:23 <haskellnewbie> in "newtype State s a" is s a thing I declare with "data"???
17:21:26 * int80_h watches as the flamewar starts
17:21:29 <SyntaxNinja> nuffer: unless machack666 has some suggestion, I don't know what the problem is.
17:21:39 <eivuokko> I got the same error now
17:21:43 <nuffer> eivuokko: as me?
17:21:45 <eivuokko> Had to copy sdl-config around
17:21:46 <eivuokko> Yeah
17:21:53 <SyntaxNinja> haskellnewbie: a newtype is pretty similar to data
17:21:54 <nuffer> okay, what do I need to do with sdl-config?
17:22:13 <SyntaxNinja> haskellnewbie: you can pretty much think of it as being the same, except you can only have one constructor
17:22:24 <eivuokko> nuffer, Nothing if you got this far
17:22:33 <SyntaxNinja> oh, sorry I misread your question
17:22:38 <nuffer> huh?
17:22:41 <nuffer> what are you saying, then?
17:23:00 <eivuokko> I am just saying I got same error as you, now I am trying to fix it
17:23:05 <nuffer> oh, okay =P
17:23:21 <SyntaxNinja> haskellnewbie: s is the state you want to keep. in the 'tick' example, it's a number.  what is the state for your application?
17:23:53 <SamB> yeah, Linux is like awful!
17:23:56 <haskellnewbie> a partially applied function (that needs to be changed from time to time) and an array of words
17:24:02 <int80_h> it is indeed
17:24:10 <machack666> nuffer: just tracked down my logs, and it looks like it was fairly inconclusive.  :(  It may have had something to do with SDL_main being defined as the library's entry point, but I didn't know.
17:24:11 <SamB> BSD is teh best
17:24:14 <int80_h> linux is an abomination
17:24:20 <int80_h> heh
17:24:23 <int80_h> it's the leet
17:24:28 <int80_h> I mean the leet
17:24:29 <machack666> If you can shake Lemmih's tree, he was the one I was working with.
17:24:30 <SyntaxNinja> haskellnewbie: so s would be (TypeOfFunction, WordArray) or whatever the state type is.
17:24:31 <int80_h> dammit
17:24:33 <int80_h> the
17:24:46 <int80_h> stupid chat client won't let me spell t e h
17:25:16 <nuffer> machack666: that seems reasonable
17:25:31 <nuffer> I mean, clearly the error is in not finding a main of some sort
17:25:32 <SamB> dons: oh great.
17:25:34 <nuffer> how would I do that?
17:25:42 <SamB> it flaked out on me again!
17:26:15 <machack666> are you installing the .hs from source linking against static libs?
17:27:00 <machack666> (too lazy to scroll through the conversation previous)
17:27:16 <nuffer> I don't know, honestly
17:27:29 <haskellnewbie> SN: so I can also use named "variables" in that definition of s?
17:27:30 <nuffer> I'm using the cabal scripts
17:27:57 <dons> SamB, how so?
17:27:59 <dons> cpu?
17:28:10 <SamB> dons: no, I said flake, not flip!
17:28:15 <haskellnewbie> for use in do notation?
17:28:31 <SamB>  @E Unknown command 'esten/music/anime/Final'
17:28:31 <SamB>  @E Unknown command 'sten/music/anime/Final'
17:28:31 <SamB> only without the leading spaces.
17:28:34 <SyntaxNinja> haskellnewbie: no, types.
17:28:35 <SamB> and with lots more of that
17:28:56 <dons> SamB. it died and mpg321 said that?
17:29:06 <dons> (they're mpg321 messages)
17:29:16 <SyntaxNinja> haskellnewbie: so if you have something like "Data MyState = MyState Foo Bar" then your state will be something like "type Foo a = State MyStata a"
17:29:18 <SamB> yeah
17:29:19 <SamB> again
17:29:29 <SamB> and yes, I know they are from mpg321
17:29:34 <dons> SamB, there's something weird about your set up :/
17:29:45 <dons> that's my opinion ;)0
17:29:48 <SamB> dons: heh
17:30:03 <dons> any other clues?
17:30:07 <haskellnewbie> SN: where do I use the "{ myStateVariable :: mytype }" business?
17:30:18 <SamB> have you been testing with insanely long filenames with spaces in them?
17:30:31 <eivuokko> Hmmm.  This is wierd...why doesn't hsc2hs work in this case.
17:30:34 <dons> i've just committed a patch for long file names
17:30:38 <dons> but not yet with spaces.
17:30:57 <dons> once i've got this tree code in, i'll be doing some hard testing
17:31:04 <dons> but i want to get the tree code done today
17:31:05 <SyntaxNinja> haskellnewbie: not sure what you mean. that looks like record syntax, though mytype should start w/ a caps.
17:31:14 <SyntaxNinja> haskellnewbie: paste your code somewhere?
17:31:33 <dons> SamB, how long are these insanely long filenames?
17:31:45 <SamB> dons: well.
17:31:46 <SamB> hmm.
17:31:58 <haskellnewbie> yeah, it is record syntax I think..how do I update 2 seperate pieces of state? I need to update the stored function and the array from time to time
17:32:00 <dons> I'm trying to work out how to reproduce it at this end
17:32:20 <nuffer> so... SDL... anyone got any ideas now?
17:32:20 * SamB tries to figure out how to calculate.
17:32:39 <dons> head | wc -c ?
17:32:43 <dons> head -1 | wc -c 
17:32:58 * dons guesses at what SamB is calculating
17:33:06 <SyntaxNinja> haskellnewbie: something like this:
17:33:07 <SyntaxNinja> f = do statVar <- get
17:33:07 <SyntaxNinja>            let newStateVar = stateVar{state1=newState1, state2=newState2}
17:33:07 <SyntaxNinja>           put newStateVar
17:33:31 <int80_h> <- is that set notation?
17:33:48 <SyntaxNinja> haskellnewbie: that is, if your state is a "data" declaration w/ two "fields"
17:33:53 <SamB> dons: but the first one isn't longest
17:33:58 <SyntaxNinja> int80_h: no, it's "bind", like variable assignment
17:34:03 <int80_h> I just read about list comprehensions is why I ask
17:34:14 <SyntaxNinja> int80_h: the syntax is somewhat overloaded
17:34:21 <haskellnewbie> SyntaxNinja: yes, it is
17:34:23 <int80_h> variable...assignment...I used to know what that was...think ... think.
17:34:47 <SyntaxNinja> int80_h: it gives "stateVar" the value of the output of the "get" function
17:34:54 <int80_h> oh yes, my grand daddy told me of languages from days of yor.
17:35:08 <SyntaxNinja> Oo
17:35:14 <int80_h> they would bind values to symbols
17:35:21 * int80_h is trying to make a joke 
17:36:03 <int80_h> Thanks Syntax Ninja. I'm about to get serious after I type in the code I wrote yesterday and find out where it's wrong
17:36:49 <SyntaxNinja> we all bind values to symbols!
17:36:54 <haskellnewbie> can I update, say, state1 above with "state1 <- newState1" or am I on crack?
17:37:04 <eivuokko> nuffer, I just don't get it.  Why'd hsc2hs and ghc work together...wierd.
17:37:24 <nuffer> I dunno what's going on either
17:37:43 <dons> SamB, $ ls -1 | ghc -e 'do xs <- getContents ; mapM_ putStrLn $ List.sortBy (\b c -> length b `compare` length c) (lines xs)' | tail -1 | wc -c
17:37:55 <SamB> dons: its not that hard!
17:38:01 <SamB> % find ~/music/mp3s{,.ogg} | ghc -e 'getContents >>= \x -> print (maximum (map length (lines x)))'  
17:38:03 <haskellnewbie> brb, I must go and roll a smoke...I am almost there with this monad madness I think
17:38:12 <dons> ah, true ;)
17:38:13 <SamB> 147
17:38:21 <dons> ok.
17:38:21 <SyntaxNinja> haskellnewbie: don't get your question. I'm leaving in a few.
17:38:36 <machack666> nuffer: are you on cygwin, and/or what compiler do you have installed?
17:38:44 <nuffer> I don't have a compiler installed
17:38:57 <dons> SamB, btw, that's insanely long
17:39:07 <eivuokko> machack666, ghc in windows comes with gcc with it
17:39:24 <dons> touch `ghc -e "replicate 255 'x'"`.mp3
17:39:24 <machack666> eivuokko: do you knwo which version?
17:39:29 <fworp> mingw
17:39:32 <SyntaxNinja> dons: are you using the FilePath module, OOI?
17:39:41 <fworp> 3.3 or something
17:39:41 <SyntaxNinja> where have all these new windows users come from?
17:39:56 <dons> SyntaxNinja, nope, should I?
17:40:03 <eivuokko> machack666, Uhm, yes...so?  3.4.2
17:40:06 <dons> ah. perhaps if I ever want it to run on windows.
17:40:06 <haskellnewbie> don't look at me, I'm on Ubuntu!
17:40:11 <SamB> dons: if I read in the whole tree with that function in GHCi, it works fine when printed right off...
17:40:20 <xinming> how to define the length using map ?
17:40:25 <machack666> I've run into some weird library issues where gcc 4.0 and gcc 3.x had ABI clashes
17:40:26 <xinming> the function length
17:40:30 <int80_h> a pox on <latest linux fad>
17:40:33 <machack666> is there an equivalent of `nm' on windows?
17:40:36 <SyntaxNinja> dons: maybe. it does some smart stuff
17:40:36 <SamB> xinming: you can't
17:40:52 <SamB> xinming: use a fold instead
17:40:56 <haskellnewbie> int80: well it runs the same on all my intel and ppc hw, which is nice!
17:41:02 <dons> SamB, with find doing the searching
17:41:02 <SyntaxNinja> dons: though one big win is windows portability, but I'm guessing you won't need that.
17:41:06 <eivuokko> machack666, 3.4.2 is current for mingw, and it's the same compiler.  And the issue is with c-style haskell symbol, anyway
17:41:12 <int80_h> I'm goofing with you. I just like ragging on linux ;)
17:41:18 <SamB> dons: say what?
17:41:24 <xinming> SamB: don't tell me for now, I haven't read to that part. :-)
17:41:46 <haskellnewbie> int80: I prefer *BSD on my servers, of course
17:41:55 <dons> SamB, i'm unsure what you were implying. can you clarify?
17:41:58 <eivuokko> machack666, ACtually, to be more precise, the problem is that there is no haskell Main.main or corresponding and it links with haskell runtime
17:42:15 <int80_h> haskellnewbie: so why not on your workstations?
17:42:48 <int80_h> I don't use FreeBSd but it seems to be the most linux like as far as ease of use goes.
17:42:52 <haskellnewbie> laziness....sheer laziness...I'm too old to NOT use a unix with good hw autodetection on my WS
17:42:55 <SamB> I used the expandDirectory function in FastIO from ghci
17:43:05 <dons> ah, ok cool.
17:43:18 <SamB> unfortunately it worked just fine :-(
17:43:33 <haskellnewbie> <----can only afford cheap hw that works better with whorish linux distros
17:43:34 <SamB> that was before I did those off-by-1 fixes..
17:43:48 <int80_h> oh I don't have a need for any fancy hw detection. I still use floppy drives , for example ;)
17:44:01 <dons> still, running in ghci is a bit different. also no -O flags
17:44:02 * int80_h hasn't tried using a USB device yet
17:44:10 <machack666> I see.  Would the --hs-main flag be anything useful in this case?
17:44:19 <dons> SamB, but still it is a bit suspicious.
17:44:30 <eivuokko> machack666, that only works with haskell source, I think
17:44:39 <dons> also, something simple like off by 1,I would have thought would matter at my end too. I'd expect immmediate segfaults ;)
17:44:48 <SamB> dons: point.
17:44:55 <SamB> or at least heap panics or something
17:45:10 <eivuokko> How would I stop ghc from linking with rts?
17:45:17 <SamB> eivuokko: um.
17:45:25 <SamB> that would be stupid!
17:45:35 <SyntaxNinja> gotta go home. l8r all!
17:45:39 <SamB> wouldn't it?
17:46:08 <eivuokko> SamB, hsc2hs runs ghc as compiler and linker for C program, how's that?
17:46:28 <dons> ghc just passes the flags straight through to the gcc backend
17:46:36 <machack666> you could always pass ghc -c and link manually :D
17:46:40 <SamB> eivuokko: you would still need the RTS for the Haskell code...
17:46:44 <nuffer> okay, so I have to go play some waterpolo now
17:47:00 <nuffer> but if anyone figures out how to get the SDL bindings working, I'd really appreciate it if they'd PM me
17:47:06 <eivuokko> SamB, hsc2hs generates c-program that prints haskell module, it never gets linked with haskell
17:47:09 <SamB> try the -no-hs-main flag
17:47:17 <eivuokko> SamB, didn't help. :-(
17:47:30 <SamB> what are you trying to do?
17:47:32 <eivuokko> dons, Yeah, but I don't understand how hsc2hs hopes this to work
17:47:52 <eivuokko> SamB, understand why hsc2hs expects this to work
17:48:02 <SamB> eivuokko: it usually does!
17:48:03 <machack666> well, I need to get to work...
17:48:06 <eivuokko> SamB, And how this case is diffrent from the normal course of action
17:48:19 <SamB> eivuokko: maybe should paste hsc file?
17:49:21 <haskellnewbie> oh, SN left! who will be my monad guru now??
17:49:57 <lisppaste2> eivuokko pasted "Problematic hsc from SDL bindings" at http://paste.lisp.org/display/13719
17:50:32 * dons creates 255 files 255 chars long
17:51:25 <eivuokko> hsc2hs problems go to the ghc mailinglists, right?
17:57:18 <dons> eivuokko, yep
17:57:34 <dons> glasgow-haskell-bugs or -useers
17:57:38 <dons> glasgow-haskell-bugs or -users
17:57:59 <eivuokko> Any idea why this would behave diffrently between Windows and Linux?
17:58:15 <SamB> eivuokko: cause windows is wierd?
17:58:28 <SamB> (And GHC doesn't use Cygwin?)
17:58:42 * eivuokko is thinking hsc2hs uses ld per default but can't find it in Windows
17:58:57 <SamB> eivuokko: what do you mean, can't find it?
17:59:01 <SamB> it ought to!
17:59:01 <dons> SamB, long files names seem pretty harmless here so far (since the long file name patch)
17:59:10 <SamB> it needs mingw32, doesn't it?
17:59:18 <eivuokko> SamB, no, it should not
17:59:23 <SamB> dons: well, I'm rebuilding
17:59:35 <SamB> eivuokko: how do YOU think it should link on windows?
17:59:56 <dons> SamB, but really something else is probably up, I reckon.
18:02:26 <eivuokko> Hmmm.
18:02:51 <eivuokko> Does anyone project that uses hsc2hs successfully in Windows, except fptools?
18:03:25 <SamB> eivuokko: you could check their makefiles if you want a headache
18:03:38 <SamB> but I suppose you knew that ;-)
18:03:59 <eivuokko> SamB, fptools?  It is a bit diffrent for ghc stuff, they use it with explicit parameters etc.
18:04:05 <SamB> eivuokko: I expect it would go more smoothly with the toolchain...
18:04:32 <SamB> I mean, face it, you need a C compiler at least...
18:04:35 <eivuokko> SamB, fwiw, I have all the tools it can possibly want, just that hsc2hs works diffrently in Windows, and I am just curious whetever it works for anyone else
18:04:42 <eivuokko> SamB, ghc in Windows comes with gcc...
18:04:59 <SamB> eivuokko: and you don't think it comes with ld also?
18:05:09 <eivuokko> SamB, Yes, but it doesn't use it.
18:05:24 <eivuokko> SamB, If I read hsc2hs source correctly, that is
18:05:35 <eivuokko> SamB, So, I would like an example how someone managed to use it in Windows
18:05:43 <SamB> then what where you saying about not being able to find ld?
18:06:13 <eivuokko> SamB, First of all, ghc ld isnt in path, second it was just guess.  Now I know it doesn't even look for it
18:07:58 <SamB> ghc main executable isn't in PATH on *nix...
18:17:14 <lisppaste2> int80_h pasted "4.14 from Thompson" at http://paste.lisp.org/display/13720
18:19:05 <int80_h> ack never mind
18:19:15 * int80_h remebers that google is his bestest friend
18:20:41 <SamB> remember, @google is at your service ;-)
18:22:41 <int80_h> @google is a feature of the lambdabot?
18:22:42 <lambdabot> http://www.haskell.org/hawiki/MegaMonad
18:23:12 <SamB> int80_h: yes
18:23:19 <int80_h> schweet
18:23:43 <int80_h> add me to the list of people that think this channel is one of the friendliest ever
18:25:04 * SamB actually added that feature
18:25:29 <int80_h> aw thanks samB :)
18:25:53 <SamB> I did it because whenever I complained that lambdabot did not support googling, they (probably shapr and dons) kept telling me to write a lambdabot plugin ;-)
18:26:00 <int80_h> I just shudder to think what my experience would be like if #haskell was like #debian or #perl
18:26:07 <SamB> yeah.
18:26:19 <SamB> your text would be off the screen in like a minute!
18:26:27 <SamB> or less!
18:26:38 <int80_h> and they would call me a goober for being a newbie
18:26:43 <int80_h> wankers
18:26:56 <SamB> if they ever managed to spot your communication, yeah, sure
18:27:47 <haskellnewbie> ok, after pondering many webpages and my code, I've refined what the hell exactly I'm trying to write: a monad that keeps a function and an array as state, and can have either of them updated, and the array returned, as well as performing a 'tick' of computation
18:28:50 <SamB> haskellnewbie: you could tuple them and use State or StateT
18:29:03 <haskellnewbie> I'm trying to use State right now
18:29:24 <SamB> and borrow a couple of functions from Control.Arrow that are useful with tuples and functions ;-)
18:29:40 <haskellnewbie> and having trouble figuring out what gets declared where
18:29:47 <SamB> haskellnewbie: oh?
18:30:31 <haskellnewbie> the monad constructor is giving me fits
18:31:05 <SamB> You probably want to do something like type MyMonad a = State (arr, fun) a
18:31:23 <SamB> (only using real types in place of arr and fun
18:31:27 <SamB> )
18:32:00 <haskellnewbie> what's the :: line for that look like?
18:32:10 <SamB> you don't use a :: line for that exactly
18:32:21 <SamB> that is to simplify the :: lines
18:32:45 <SamB> I'll show you my unlambda interpreter if you think it might help
18:33:07 <SamB> that uses StateT but the idea is similer
18:33:16 <SamB> s/similer/similar/
18:33:38 <SamB> or you could share your code that doesn't work
18:33:40 <SamB> lisppaste2: help
18:33:41 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
18:36:16 <lisppaste2> int80_h annotated #13720 with "illegal instruction" at http://paste.lisp.org/display/13720#1
18:36:34 <int80_h> samB can you help me out?
18:36:42 <int80_h> I don't think google can help with this one
18:39:18 <haskellnewbie> I'll cut and paste my code here in a sec
18:40:17 <int80_h> use lisppaste please :)
18:40:40 <SamB> hmm
18:40:59 <SamB> illegal instruction error?
18:41:05 <int80_h> yeah
18:41:07 <SamB> I have absolutely no idea how that relates to Haskell (not to call you a liar, its just not something that translates easily!)
18:41:12 <int80_h> does my code look like it would cause that?
18:41:38 <int80_h> well I was thinking it would have to do with bad code causing hugs to barf
18:41:53 <eivuokko> Lemmih, In your SDL bindings, for Windows, in order for hsc2hs work, it should get -DSDL_main=main because for someone reason, linking with libSDLmain.a doesn't work in Windows.
18:42:27 <SamB> well, lets see what happens if I try to run it!
18:42:44 <int80_h> yeah I was about to try and run it on a new version of hugs
18:42:50 <SamB> if you are unlucky it might work
18:42:51 <int80_h> but it needs an addition function 
18:42:58 <int80_h> called square
18:43:03 <int80_h> let me paste square for you
18:43:11 <SamB> @index square
18:43:11 <lambdabot> bzzt
18:44:15 <lisppaste2> int80_h annotated #13720 with "square" at http://paste.lisp.org/display/13720#2
18:44:33 <int80_h> I meant, additional
18:44:47 <haskellnewbie> if I have a type foo, how do I define fooarray to be a type that is an Array of foo indexed with ints?
18:44:59 <SamB> int80_h: hmm, well if I run it I get:
18:45:08 <SamB> *Main> twoPowerN 2
18:45:08 <SamB> *** Exception: stack overflow
18:45:22 <int80_h> sounds like m recursive function doesn't terminate
18:45:32 <int80_h> my
18:45:35 <SamB> which is a lot more helpful ;-)
18:45:41 <int80_h> yeah
18:45:42 <SamB> int80_h: oh, you forgot the base cases ;-)
18:45:46 <triplah> where can i find the definition of list.minimum ?
18:45:51 <int80_h> wait I thought I included those
18:46:06 <int80_h> hold on let me point out what I think is the base case
18:46:10 <haskellnewbie> "data fooArray foo = Array Int foo" is not liked by ghc
18:46:33 <triplah> i need to write a minimum function where i can pass a function as an argument to detirmine order
18:46:36 <SamB> haskellnewbie: you need to use upper case
18:47:07 <triplah> ie minimum length ["age","goat","something","else"]
18:47:07 <SamB> int80_h: also, shouldn't you be calling evenN from oddN, not oddN again?
18:47:11 <haskellnewbie> samb: I was in my actual code
18:47:39 <int80_h> twoPowerN n
18:47:39 <int80_h>    | n == 0 = 1
18:47:46 <int80_h> that is one base case
18:47:56 <int80_h> oddN m
18:47:56 <int80_h>    | m == 0 = 0
18:47:59 <SamB> int80_h: maybe you missed the base case
18:48:06 <int80_h> ah es
18:48:08 <int80_h> thanks
18:48:09 <SamB> you should add a baser case to give an error message ;-)
18:48:11 <thou> triplah: http://www.haskell.org/onlinereport/standard-prelude.html
18:48:16 <triplah> thou: thanks
18:48:18 <int80_h> :)
18:48:26 <SamB> most people are using patterns for that
18:49:22 <SamB> also, observe:
18:49:26 <SamB> > even 1
18:49:27 <lambdabot> False
18:49:30 <SamB> > odd 1
18:49:32 <lambdabot> True
18:52:32 <thou> triplah: by the way, you can get code for GHC's libraries here:  http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/libraries/base/   (E.g., go to Data/List.hs there to find GHC's minimum definition)
18:53:07 <thou> @type minimumBy
18:53:08 <lambdabot> Not in scope: `minimumBy'
18:53:16 <thou> @type Data.List.minimumBy
18:53:17 <lambdabot> forall a. (a -> a -> Ordering) -> [a] -> a
18:53:18 <triplah> thou: thanks heaps
18:54:05 <thou> > Data.List.minimumBy length ["3", "22", "111"]
18:54:05 <lambdabot>   Expecting a function type, but found `Int'
18:54:05 <lambdabot>   Expected type: [a] -> [a] -> Ordering
18:54:05 <lambdabot>   Inferred type: [a] -> Int
18:54:25 <triplah> thou: interesting :)
18:54:28 <thou> oops, well... close enough :)
18:54:44 <SamB> thou: I would call what you want "minimumThrough"
18:55:17 <SamB> I, too, wish we had such functions in Data.List
18:55:50 <SamB> int80_h: I wrote a function that computes powers of anything
18:55:57 <thou> or minimumWith
18:56:07 <SamB> actually, I think its easier to do that than just powers of two ;-)
18:56:12 <eivuokko> nuffer, You can use those SDL binding by runghc Setup.lhs configure; adding -DSDL_main=main to SDL.buildinfo and runghc Setup.lhs build, and install.
18:56:29 <SamB> magic numbers and all that
18:56:41 <SamB> of course, we already had
18:56:46 <SamB> @type (^)
18:56:47 <lambdabot> forall a b. (Integral b, Num a) => a -> b -> a
18:56:57 <SamB> > 2 ^ 2
18:56:58 <lambdabot> 4
18:57:24 <SamB> > 2 ^ -2
18:57:25 <lambdabot>   precedence parsing error
18:57:25 <lambdabot>    cannot mix `(^)' [infixr 8] and prefix `-' [infixl 6] in the same
18:57:25 <lambdabot> infix expression
18:57:29 <SamB> > 2 ^ (-2)
18:57:30 <lambdabot> Prelude.^: negative exponent
18:57:34 <SamB> > 2 ^^ (-2)
18:57:35 <lambdabot> 0.25
18:57:42 <SamB> @type (^^)
18:57:43 <lambdabot> forall a b. (Integral b, Fractional a) => a -> b -> a
18:57:54 <SamB> @type (**)
18:57:55 <lambdabot> forall a. (Floating a) => a -> a -> a
19:00:14 * SamB wonders whether GHC would be capable of jumping straight to the body for the even case after going through the body for the odd case
19:00:48 <thou> @pointless (\ x y -> (length x) < (length y))
19:00:48 <lambdabot> (. length) . (<) . length
19:11:19 <haskellnewbie> I am trying to make a type that can hold either Word32 or Word64
19:11:29 <SamB> Either?
19:11:35 <SamB> or you could use a constraint
19:12:16 <haskellnewbie> how would a constraint work?
19:13:07 <haskellnewbie> and then I need to be able to make arrays of the resulting type
19:15:24 <haskellnewbie> it really doesn't like this: data FIPSword a = Word32 a | Word64 a
19:15:51 <haskellnewbie> or this: data FIPSword  = Word32 | Word64
19:16:28 <SamB> haskellnewbie: you don't seem to understand data constructors
19:16:43 <haskellnewbie> I guess not
19:16:47 <SamB> there is a type constructor Either, defined like this:
19:17:01 <SamB> data Either a b = Left a | Right b
19:17:07 <SamB> you can use it like this:
19:17:25 <SamB> > [Left "Hello!", Right 1]
19:17:26 <lambdabot> [Left "Hello!",Right 1]
19:17:31 <SamB> @type [Left "Hello!", Right 1]
19:17:32 <lambdabot> forall b. (Num b) => [Either [Char] b]
19:18:09 <SamB> haskellnewbie: does that clear things up at all?
19:18:32 <SamB> oh, I forgot to mention that it has associated data constructors Left and Right ;-)
19:18:39 <haskellnewbie> no, that's worse! where is Either getting used?
19:18:54 <SamB> haskellnewbie: in the type signature
19:20:57 <haskellnewbie> I just really don't want to have to use 2 kinds of arrays...that's why I'm trying to make a type to hold either kind of word (Word32 or Word64), and then make an array of those
19:22:19 <SamB> haskellnewbie: what are you trying to do again?
19:22:29 <SamB> like, what are you really trying to do?
19:23:03 <araujo> Either [Word32] [Word64] ?
19:23:33 <thou> [Either Word32 Word64]
19:23:51 <SamB> haskellnewbie: oh, and are you aware that [Word64] isn't an actual array type?
19:24:04 <haskellnewbie> that's a list of them, right?
19:24:08 <SamB> yeah\
19:27:18 <thou> :(
19:30:07 * heatsink has a theory question today.
19:30:39 <heatsink> In haskell, we talk of higher-order quantification as having a forall that is on the inside of a type.
19:30:56 <heatsink> In first order predicate logic, higher-order quantification means quantifying over properties, rather than values.
19:31:01 <heatsink> Are these things related?
19:35:26 <SamB> heatsink: you make my head spin just trying to think what the question is asking :-(
19:35:47 <heatsink> sorry
19:35:52 <araujo> heatsink, give an example
19:38:03 <SamB> dons: been running for 1:36 at 0.0p128
19:38:06 <Korollary> in 1st order logic, (forall a(P a)) -> (forall b(P b)) would be a valid formula and it wouldn't be called higher order quantification.
19:38:18 <Korollary> I think that's what he means
19:38:46 <SamB> yeah, but that doesn't have any arrows inside the foralls!
19:39:15 <Korollary> forall applies to a formula, not to an arrow.
19:39:24 <SamB> aren't there, like, laws against that kind of thing?
19:39:29 <SamB> (in Haskell)
19:40:49 <heatsink> Well, I was trying to get my head around the relationship between higher-order types and higher-order quantification.
19:40:53 <SamB> dons: it still doesn't like chmod -r'd mp3s
19:42:31 <vIkSiT> hi all
19:42:37 <vIkSiT> Anyone worked with difference lists?
19:42:39 <Korollary> I don't know what higher order quantification means in haskell.
19:43:08 <Korollary> vIkSiT: do you mean diffarrays ?
19:43:16 <heatsink> Korollary: I meant types with forall on the right side of arrows.
19:43:36 <Korollary> heatsink: a la "a -> (forall b)" ?
19:43:42 <heatsink> yea
19:44:26 <Korollary> heatsink: that looks equivalent to "forall b( a -> b )" to me. Do you mean something more complicated ?
19:44:34 <musasabi> vIkSiT: Like http://www.cse.unsw.edu.au/~dons/yi/Yi/DLists.hs ?
19:46:28 <Philippa_> heatsink: that's higher-rank
19:46:39 <heatsink> hmm, ok
19:46:39 <Philippa_> higher-order quantification would be quantifying over quantifiers
19:46:58 <Philippa_> "for all statements of the form 'for all...'..."
19:48:17 <heatsink> I guess I was thinking in the wrong direction then.
19:48:55 <vIkSiT> musasabi, Korollary , as the second link illustrates
19:49:04 <vIkSiT> I'm not very clear as to how a diff list works conceptually..
19:49:16 <vIkSiT> might i have an example?
19:49:47 <vIkSiT> -- a difference list is a function that given a list returns the original contents of the difference list prepended at the given list ---
19:50:16 <vIkSiT> in this definition for example, what does it mean by "original contents of the difference list" ?
19:50:45 <vIkSiT> given a list [a b c] and list [d e], how would a difflist be constructed?
19:51:16 <Korollary> vIkSiT: let me see the source for myself.
19:52:41 <vIkSiT> Korollary, ty
19:53:34 <heatsink> wow, that's a tiny implementation :)
19:54:00 <Korollary> vIkSiT: ok, it's named a bit confusing. But what he calls a difference list is actually a function that operates on lists.
19:55:03 <Korollary> vIkSiT: so, a difference list is any function that is of type [a] -> [a]. "id" is a difference is for instance (named zeroDL).
19:55:58 <vIkSiT> oh
19:56:12 <vIkSiT> hmm.
19:56:22 <heatsink> this isn't the same thing as diff arrays.  That confused me for a few minutes.
19:56:33 <vIkSiT> Korollary, can you have a look at this then - http://www.ling.helsinki.fi/kit/2004k/ctl272/Bangor/clbook_38.html
19:57:14 <vIkSiT> I got confused by the above link actually. I was talking about the conceptual difference list, which i'm trying to build in relation to context free grammars
19:59:05 <Korollary> vIkSiT: I don't know prolog, so I am a bit lost there myself.
19:59:45 <vIkSiT> Korollary, yeah, i've been trying to figure that bit out myself. 
20:01:18 <Korollary> vIkSiT: I suppose you are looking for a concrete implementation of functions that produces difference lists, applies difference lists, etc.
20:02:19 <vIkSiT> Korollary, actually, i'm sure i can implement the friggin thing myself, if i can figure out what a difference list actually is, conceptually! All I have to go on at the moment is a logic based definition, and a bunch of prolog pages..
20:02:36 <vIkSiT> nothing which shows a concrete example of a diff-list
20:03:50 <Korollary> vIkSiT: the haskell source does
20:03:58 <Korollary> vIkSiT: check out openDL and closeDL
20:04:55 <vIkSiT> YES! I found a reference
20:05:02 <vIkSiT> Korollary, ah, will check that
20:05:12 <vIkSiT> http://www.w3.org/People/cmsmcq/2004/lgintro.html
20:05:50 <Korollary> agh, prolog again
20:06:13 <vIkSiT> Korollary, but this time, an example right below it in sane notation ;)
20:06:23 <nuffer> (21:56:04) eivuokko: nuffer, You can use those SDL binding by runghc Setup.lhs configure; adding -DSDL_main=main to SDL.buildinfo and runghc Setup.lhs build, and install.
20:06:26 <nuffer> I seem to be getting the same error
20:06:30 <vIkSiT> [a b c d] [c d]
20:08:30 <nuffer> it's almost as though it's not looking at the SDL.buildinfo file
20:10:05 <nuffer> in fact, it's definitely not looking at the SDL.buildinfo file
20:10:17 <nuffer> because I just filled the file with gibberish, same result, then moved it, same result
20:13:59 <eivuokko> Can you give me your cc-options in SDL.buildinfo?
20:15:03 <nuffer> sure
20:15:37 <nuffer> cc-options: -I/usr/include/SDL -DSDL_main=main -D_REENTRANT
20:15:37 <nuffer> ld-options: -DSDL_main=main -L/usr/lib -lSDL 
20:15:48 <nuffer> I wasn't sure where that -D went, so I just put it in both
20:16:30 <eivuokko> It goes to cc-options, being preprocessor definition
20:16:44 <nuffer> now I've regressed though, it doesn't even get to that error anymore, it's giving me errors about not finding the .h files
20:17:02 <eivuokko> Yes!
20:17:16 <eivuokko> Well, I hope it's yes.
20:17:31 <nuffer> no, I'm pretty sure that's backwards
20:17:37 <nuffer> because I had those, and then got rid of them, and now I have them again
20:17:41 <eivuokko> Hmm
20:17:43 <nuffer> after starting over from scratch
20:17:54 <eivuokko> Ok, this is what I did: Opening SDL-devel-whatever
20:18:01 <nuffer> okay
20:18:13 <eivuokko> I took all include\*.h and put them in ghc-install\include
20:18:23 <eivuokko> I took all lib\*.* and put them in ghc-install
20:18:45 <eivuokko> If you manage to link dynamically, you need DLL next to your exe or in path
20:18:48 <nuffer> like, I:\ghc\ghc-6.4.1 for me?
20:18:59 <eivuokko> Yeah, libs there
20:19:09 <eivuokko> and I:\ghc\ghc-6.4.1\include for includes
20:19:18 <nuffer> wait, holy crap, setup build is working
20:19:35 <nuffer> it returned successfully
20:19:36 <nuffer> wow
20:19:45 <eivuokko> I stopped after build worked for me
20:21:09 <nuffer> well, the package seems to have installed properly
20:22:22 <eivuokko> I didn't install or test it, because there wasn't clear example.
20:22:49 <nuffer> the file Test.hs looks like it should be a test... but it doesn't really seem to do anything
20:22:52 <nuffer> or work at all, for that matter
20:23:33 <nuffer> getting tons of undefined references
20:23:37 <nuffer> almost like it can't find the actual libraries
20:25:14 <eivuokko> Hmmh
20:25:27 <eivuokko> WinMain, eh...
20:25:48 <eivuokko> I guess I should have tried this too, but I haven't done non-consle apps so no idea
20:26:11 <nuffer> WinMain?
20:26:14 <nuffer> it looks like it can't find the SDL stuff
20:26:36 <eivuokko> Hmmm
20:26:52 <nuffer> Test.o(.text+0x4f):fake: undefined reference to `GraphicsziUIziSDLziEvents_zdfShowUserEventID_closure'
20:26:56 <nuffer> I have a list like that a mile long
20:27:07 <eivuokko> You did runghc Setup.lhs install?
20:27:18 <nuffer> yes, I did
20:27:39 <nuffer> well, I did "setup install"
20:27:45 <nuffer> from the setup I had built from Setup.lhs
20:28:03 <eivuokko> Ah
20:29:02 <eivuokko> This is stupid....now I see
20:29:14 <nuffer> que?
20:29:38 <eivuokko> The WinMain stuff
20:29:44 <eivuokko> I have no idea how to solve that anyway
20:30:12 <eivuokko> Probably has to have some hook or something
20:31:20 <nuffer> also
20:31:20 <nuffer> I:\Program Files\SDL\SDL-0.2.0/libHSSDL-0.2.0.a: could not read symbols: Archive has no index; run ranlib to add one
20:31:32 <eivuokko> o.O
20:32:04 <eivuokko> That sounds like a good reason not to work.  setup build and install again?  Or maybe clean first.
20:33:11 <nuffer> I run ranlib on it, and it does nothing
20:33:24 <nuffer> or, rather, it doesn't solve the problem
20:34:40 <eivuokko> Hmmmh. 
20:34:50 * eivuokko thinks GHC should have library etc to solve this
20:35:24 * nuffer thinks the author should have figured out how to make his library run on windows, and then published it with the library, to save the rest of us some time
20:35:49 <eivuokko> Well, he might not have access to Windows
20:36:06 <nuffer> okay, fine, it would be nice if someone had done it though
20:36:25 <eivuokko> Hmm
20:36:48 <eivuokko> I might do it, but it will bitrot because I am not going to use it myself, probably.
20:37:19 <nuffer> I mean, I'm kind of a newbie, I don't have a damn clue how to get this thing working
20:37:31 <eivuokko> Yeah, I know :-(
20:37:41 <eivuokko> Why do you need sdl anyway?
20:38:11 <nuffer> I don't need it, I just wanted to try my hand at gamedev under Haskell
20:38:22 <eivuokko> I see.
20:38:33 <SamB> tried GL?
20:38:49 <nuffer> well, I'd rather be using SDL, but I'm about ready to say screw it and try some GL stuff
20:39:12 <eivuokko> There are HGL, OpenGL and GLUT packages that come with ghc
20:39:20 <eivuokko> They probably have stuff that works out of the box
20:40:08 <nuffer> I guess I'll just do that
20:40:23 <nuffer> well, I think I'll do my o-chem problem set first
20:40:28 <nuffer> but then I'll have a look at the HGL stuff
20:42:07 <nuffer> man, o-chem is no fun
20:42:22 <eivuokko> What is that?
20:42:29 <nuffer> organic
20:42:34 <nuffer> (chemistry)
21:19:02 * araujo saluda a Nomius 
21:28:33 * vIkSiT pokes araujo 
21:41:02 <araujo> oh no, vIkSiT is here
21:41:05 <araujo> :-)
21:42:24 <triplah> how would i import data.List so i can use List.minimumBy as  just minimumBy
21:42:39 <vIkSiT> lol
21:43:11 <araujo> import Data.List 
21:43:47 <triplah> araujo: thhanks
21:43:56 <araujo> welcome
21:44:25 * araujo installing the new darcs version
21:48:53 <triplah>  minimumBy length ["qre","wfsdfs"]
21:48:57 <triplah> that wont run for me
21:48:58 <triplah> :(
21:49:07 <luqui> what does it say?
21:49:17 <triplah>     Couldn't match `Int' against `t -> t1'
21:49:18 <triplah>       Expected type: Int
21:49:30 <luqui> @eval minimumBy length "qre" "wfsdfs"
21:49:31 <lambdabot> Couldn't match `[a]' against `t -> t1'
21:49:37 <luqui> @eval minimumBy length ["qre", "wfsdfs"]
21:49:38 <lambdabot>   Expecting a function type, but found `Int'
21:49:38 <lambdabot>   Expected type: [a] -> [a] -> Ordering
21:49:38 <lambdabot>   Inferred type: [a] -> Int
21:49:42 <luqui> ahh
21:49:56 <luqui> the function is supposed to take an Ordering
21:50:16 <triplah> ahh, its definition says its takes a comparison function
21:50:34 <triplah> oh, hmm
21:50:40 <triplah> length ISNT a comparison function
21:50:43 * triplah slaps self
21:50:59 <luqui> minimumBy (\x y -> length x `compare` length y) ["qre", "wfsdfs"]
21:51:05 <luqui> @eval minimumBy (\x y -> length x `compare` length y) ["qre", "wfsdfs"]
21:51:07 <lambdabot> "qre"
21:51:21 <triplah> yep
21:51:23 <triplah> thanks
22:17:37 <Korollary> @seen Pseudonym
22:17:38 <lambdabot> I haven't seen Pseudonym.
22:23:56 <dons> SamB, regarding -r, that's on the todo list. thanks for remdingin me
22:24:29 <dons> luqui, try the new eval syntax:
22:24:43 <dons> > 1 + 2
22:24:44 <lambdabot> 3
22:25:39 <luqui> why was that added?
22:26:24 <dons> it's nicer :)
22:27:08 <luqui> @paste
22:27:08 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
22:29:52 <luqui> I pasted something.  What's going on?
22:30:01 <luqui> Why is that an error?
22:31:45 <luqui> anyone?
22:32:03 <Korollary> luqui: It looks like "mkFoo" can produce values of any type of the Foo typeclass. 
22:32:49 <luqui> Oh.  As in, I could ask it (via type inference) for some other Foo value and it would be able to produce it?
22:32:58 <Korollary> yes
22:33:05 <luqui> er, it *should* be able to produce it
22:33:05 <luqui> okay
22:33:17 <luqui> well, I want to export mkFoo, but I don't want to export VFoo, is that possible?
22:33:45 <luqui> I suppose I have to export the type (but not the constructor) VFoo, right?
22:34:32 <Korollary> not possible once you fix this by removing the prototype
22:34:50 <luqui> okay
22:37:13 <luqui> so there's no way of telling it that I'm going to produce some Foo without committing to which one?
22:37:53 <luqui> I suppose that would reduce to subtyping
22:37:57 <luqui> which HM can't do
23:33:11 * araujo monadically enlightened *
23:33:27 <sieni> hmm...
23:40:48 <sieni> fiksu kuva netissä: http://koti.mbnet.fi/kuukke/data/kokkaus.jpg
23:40:52 <sieni> oops
23:41:24 <sieni> (the finnish part was: "very clever idea to put that on the internet")
23:42:25 <Korollary> cleverness is overrated
23:46:58 <haskellnewbie> oh how I wish I were monadically enlightened!
23:49:54 <Korollary> haskellnewbie: how far along are you with typeclasses ?
