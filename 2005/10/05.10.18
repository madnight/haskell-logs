00:00:01 <JKnecht> sethk: did you use what came with X/emacs or did you use Stefan Monniers Haskell mode?
00:00:26 <sethk> JKnecht, I downloaded it from the site linked on haskell.org/ghc
00:00:51 <Cale> Actually, I think that a monad may actually be a monoid object in the category of functors over a category, where a  monoid object in the category of sets is the usual sort of monoid
00:00:53 <sethk> JKnecht, is there a better or newer one?
00:03:13 <JKnecht> I've so far only used what came with Xemacs. Haven't yet installed the mentioned mode which does explictly mention Hugs and GHC.
00:04:09 <sethk> JKnecht, the latter is what I'm using.
00:04:18 <sethk> the other indentation mode isn't any better with do
00:04:25 <JKnecht> I'll be happy just to spend a couple of weeks understanding all the pragmata of Haskell before actually using.
00:05:04 <sethk> actually, it is better
00:05:15 <sethk> it doesn't indent after the fact very well, but it does a good job as you type
00:05:48 <sethk> oh, wait, there is a way to cycle through choices even in indent-region.  very slick
00:07:38 <Cale> sethk: the fact that those choices were very limited, and the fact that it cycled was enough to put me off of it, but if people like it, I suppose that's what it's there for :)
00:07:56 <sethk> Cale, recycling is better then permanently guessing wrong
00:08:12 <sethk> Cale, you could easily write a macro to just accept all the default indentations
00:08:32 <Cale> yeah, I'd probably want that
00:08:57 <sethk> hey, it's only lisp code.  you can handle it.  :)
00:09:07 <Cale> Use all the indentations that the simple mode would give when pressing tab
00:09:34 <Cale> yeah, maybe -- though when I looked at it, it looked rather monstrous
00:09:40 <sethk> Cale, right.  just take the first one, skip the rest
00:09:49 <JKnecht> The Encyclopaedic Dictionary of Mathematics has an excellent article on Categories and Functors.
00:09:52 <sethk> Cale, well, lisp code is kind of like monads.  Simple once you understand it.
00:09:59 <sethk> Cale, when in doubt, just add more parens
00:10:15 <Cale> sethk: I've written things in common lisp and scheme
00:10:33 <Cale> (but not that much)
00:10:50 <Cale> enough to be used to the parens :)
00:10:52 <sethk> Cale, you have to admit it is a least two orders of magnitude less difficult than monad theory.  :)
00:11:07 <Cale> parens? yeah
00:11:10 <Cale> heh
00:11:57 <Cale> Actually, I never did manage to understand most of the design decisions in common lisp
00:12:00 <Cale> heh
00:12:12 <sethk> not decisions.  evolutions
00:12:33 <Cale> the whole "functions occupy different slots than other values" thing was incredibly annoying
00:13:39 <sethk> oh, it's a most annoying language
00:14:16 <Cale> I went to one of the lisp IRC channels to ask about getting rid of the compiler warnings for unused variables because I wanted to pass lambda terms which sometimes ignored their arguments, and someone just couldn't understand why you'd ever want a function which ignored a parameter
00:14:27 <Cale> Specifically, I wanted const
00:14:33 <Cale> in certain cases
00:14:50 <sethk> I don't think those folks have ever written anything other than lisp macros  :)
00:14:53 <Cale> but another person came along who was more clued in, thankfully :)
00:15:10 <sethk> It's like the people who use blackbox and fluxbox who can't imagine why you would want multiple desktops
00:15:20 <Cale> :)
00:15:43 <Cale> I actually have dropped my use of multiple desktops to 2. One is for managing music, the other for everything else.
00:16:07 * ValarQ got seven
00:16:17 <JKnecht> never heard of blackbox or fluxbox. I use a 3 x 9 desktop pager in FVWM.
00:16:17 <ValarQ> and i use them heavily
00:16:21 <Cale> This started when I started using the snapshotting pager in enlightenment
00:16:25 <Cale> er
00:16:29 <Cale> and iconbox rather
00:16:48 <ValarQ> http://arda.no-ip.org/someiceshot.png
00:16:53 <sethk> Cale, well, it isn't question of whether you need them.  It is a question of being able to _imagine_ why you might.
00:17:00 <JKnecht> so 27.
00:17:00 <Cale> yeah
00:17:31 <Cale> I've also gotten into the "strange" practice of never maximising anything
00:17:47 <Cale> including browser windows
00:18:08 <sethk> I've _never_ maximized windows
00:18:13 <Cale> I always stack things so that at least a corner is showing
00:18:32 <ValarQ> sethk: not even the webbrowser?
00:18:40 <sethk> never.  I hate that
00:18:46 <sethk> I have to see at least something behind it.
00:19:50 <JKnecht> Well I'm certainly looking forward to finding out hou Haskell marries category theory and denotational semantics, but now it's time to make the donuts. BBL.
00:19:54 <ValarQ> ok, i use the keyboard to switch workspaces mostly, then it can be quite comfortable to have maximized windows (if they are needed)
00:21:08 <sethk> ValarQ, I know, everyone else does, I'm not sure why it has always bothered me.
00:21:19 <sethk> ValarQ, I also hate people putting their fingers on my monitor.  :)
00:22:03 <ValarQ> sethk: who doesn't?
00:22:29 <sethk> I guess all the people who keep pointing at stuff on monitors
00:22:36 <Cale> I have my irc client set up with a border type such that clicking on the side of it makes it slide shut to a thin strip at the edge of the screen and back out
00:22:52 <sethk> that's a neat idea
00:23:16 <ValarQ> sethk: i always run firefox and thundermail in one virtualdesktop and i run them maximized, i maximize very few other windows thought
00:23:55 <sethk> I generally have an admin desktop, two development desktops, two documentation desktops, one for email and browsing
00:28:56 * beelsebob_ prods the room
00:30:46 <Cale> hello
00:30:56 * beelsebob_ pokes cale in the ribs
00:31:00 <beelsebob_> how goes it?
00:31:08 <Cale> okay
00:31:17 <astrolabe> Cale: I don't think GLn is a functor
00:31:17 * ValarQ checks "prods" up in the dictionary
00:31:18 <beelsebob_> :)
00:31:34 <beelsebob_> @google define: prod
00:31:36 <lambdabot> No result found.
00:31:39 <beelsebob_> :(
00:31:49 <Cale> astrolabe: the map which sends a vector space to the group of linear maps over it is
00:31:57 <Cale> invertible
00:33:20 * beelsebob_ considers adding Maybe as a possible answer to hat-delta
00:34:31 <astrolabe> Cale: I don't see why you are mentioning invertability here.
00:34:43 <Cale> astrolabe: otherwise it's not a group
00:35:47 <astrolabe> Oh, I see
00:36:21 <astrolabe> My problem is, given a morphism of vector spaces, what is the image of this morphism under the function?
00:36:31 <astrolabe> *functor
00:37:15 <Cale> yeah, that needs to be specified
00:38:44 <Cale> it's basically by conjugation, I think
00:38:49 <Cale> hmm
00:42:24 <Cale> oh
00:42:46 <Cale> right, I messed that up a bit
00:42:59 <Cale> I wanted the functor GL_n on fields
00:43:10 <astrolabe> I don't think it was crucial to your point.
00:43:18 <Cale> taking fields to invertible linear maps on F^n
00:43:23 <astrolabe> But I'm a pedant.
00:43:26 <Cale> :)
00:43:29 <Cale> good point though
00:43:42 <sethk> astrolabe, are you sure you are exactly a pendant?
00:44:14 <astrolabe> sethk:  Oh dear, I'll have to think about that.
00:48:14 <Cale> You can take a field morphism and turn it into a morphism of groups GL_n(f): GL_n(K) -> GL_n(F) by simply  GL_n f m = f . m, if m is a linear map
00:48:38 <Cale> where f applies to tuples in F^n by mapping across components
00:48:44 <Cale> er
00:48:46 <Cale> K^n
00:49:19 <Cale> hrm
00:49:31 <Cale> does that work? maybe not
00:49:34 <Cale> heh
00:49:40 <Cale> should be something simple like that
00:50:56 <Cale> oh
00:50:57 <Cale> heh
00:51:07 <Cale> you do the other obvious thing
00:51:30 <Cale> you apply f to all the components of the matrix representing m
00:52:18 <int-e> and both amount to the same ... which is why this will work out nicely.
00:52:36 <int-e> unless I'm missing something.
00:52:50 <Cale> ah, perhaps they do
00:53:11 <Cale> for a moment, I thought that the types were messed up in the first case
00:53:12 <int-e> (should be f . m = m' . f then, where m is the matrix with replaced entries)
00:53:38 <int-e> err m' is the matrix...
00:54:26 <Cale> anyway, the application to coefficients thing certainly works
00:56:34 <int-e> so (f . m) o (g . n) = (m' . f) o (g . n) = m' . (f o g) . n = (f o g) . m` n or something like that.
01:01:58 <araujo> Hello!
01:02:11 <ValarQ> hi
01:06:39 <skew> hi
01:13:09 <ValarQ> dcoutts: ayt?
01:19:41 <ibid> dcoutts: ayh?
01:20:27 <musasabi> How do I install GHC to a windows machine as a normal user? Trying to use the msi tells me only "The system administrator has set policies to prevent this installation."
01:20:51 <Cale> musasabi: Ask your sysadmin?
01:21:43 <musasabi> Cale: the sysadmin tells me that "no global installations, but you can install as user things"
01:21:59 <Cale> hmm
01:23:51 <ibid> ask your sysadmin? :)
01:24:03 <Cale> heh
01:24:14 <dcoutts> musasabi, I used some dodgy msi extractor from a dodgy russian "warez" site :-)
01:24:32 <Cale> Those with user-level privileges can install managed applications if the system administrator has enabled the installation. Otherwise, the user will only be able to install MSI applications provided the user has permission to write files, create directories, and write registry keys in the locations where the installation typically writes those resources. If the user cannot write to a location, then the installer will only be able to write
01:24:32 <Cale>  to that location if the administrator has given permission for the installer to do so.
01:24:50 <dcoutts> ValarQ, ibid, ayt? ayh?
01:25:04 <Cale> are you {there,here}
01:25:27 <dcoutts> Cale, on the windows system I have acces to all .msi installations are prevented
01:25:40 <dcoutts> Cale, oh, I see :-)
01:26:01 <ibid> dcoutts: how screwed am i if all i have is 0.9.8?
01:26:03 * musasabi found the zip file on the ghc homepage - that should work at least.
01:26:13 <dcoutts> musasabi, I used something called MsiEx
01:26:20 <ibid> (the canonical answer to "ayh" is "iah":)
01:26:36 <dcoutts> ibid, oh
01:26:53 <dcoutts> ibid, why are you screwed with 0.9.8? what are you tryign to do?
01:27:15 <ibid> dcoutts: i am assuming that's "not very screwed"?
01:27:53 <dcoutts> I guess it depends on what you are trying to build
01:28:08 <ibid> dcoutts: well, JyuGraphics doesn't work :)
01:28:27 <ibid> dcoutts: layoutEmpty is missing
01:29:14 <ibid> (this is on a windows installation.  i may be able to get an upgrade, but i'd rather not try the patience of the sysadmins:)
01:29:23 <dcoutts> ibid, oh right.
01:29:42 <dcoutts> ibid, I guess you can probably avoid the layout stuff.
01:30:04 <ibid> dcoutts: not really, unless the non-pango text stuff works
01:30:11 <dcoutts> ibid, there will be a 0.9.10 release with a windows installer soonish
01:30:17 <ibid> but it looks like i have to bother the sysadmins anyway
01:30:21 <ibid> soonish = ?
01:30:31 <dcoutts> soonish = end of the month
01:30:46 <ibid> (there's something screwy with the installation here, unrelated though)
01:30:52 <ibid> dcoutts: ok, not fast enough
01:31:14 <dcoutts> ibid, well you can build it yourself from source
01:31:28 <dcoutts> ibid, or avoid the pango bits
01:31:59 <ibid> i cannot build it myself from source
01:32:32 <ibid> but as i said, the installation seems to be screwed anyway, i need to tell the admins
01:32:42 <ibid> wouldn't you agree:
01:32:45 <ibid> Loading package glib ... can't load .so/.DLL for: glib-2.0 (addDLL: unknown erro
01:32:48 <ibid> r)
01:32:59 <ibid> :)
01:33:11 <dcoutts> ibid, nope sorry. we can't get it to work with ghci on windows
01:33:19 <ibid> ah
01:33:26 <ibid> that's good to know
01:33:28 <dcoutts> ibid, or rather we can, but if we make it work with ghci then it doesn't work with ghc :-)
01:33:37 <ibid> heh
01:33:40 <dcoutts> ibid, so you can have one or the other
01:34:24 <ibid> yeah. right choice, imho
01:34:43 * aleator just got a weird idea about marrying ghci and irc together..
01:35:47 <ibid> dcoutts: hmm, would it be hard for me to foreign import the layoutEmpty stuff myself?
01:36:01 <ibid> dcoutts: or is there, in 0.9.8, some other way to create a PangoLayout?
01:46:01 <dcoutts> ibid, see widgetCreateLayout
01:46:13 <dcoutts> ibid, see the demo/graphic/Drawing.hs
01:46:41 <ibid> ahh
01:46:43 <ibid> thanks
01:51:18 <{Arias}> there is a function like map but with IO return type?
01:51:27 <Lemmih> @type mapM
01:51:32 <lambdabot> forall b (m :: * -> *) a. (Monad m) => (a -> m b) -> [a] -> m [b]
01:52:35 <{Arias}> I need to read a file and apply a function to each character
01:52:40 <{Arias}> i try this:
01:52:49 <{Arias}> read <- readFile inputfile
01:52:52 <Cale> fmap
01:52:56 <{Arias}> map function read
01:53:04 <{Arias}> let's see thanks
01:53:19 <Cale> {Arias}: well, depending on what you mean by "like map"
01:53:30 <ibid> dcoutts: it works now, many thanks :)
01:53:36 <Cale> fmap :: (Functor f) => (a -> b) -> (f a -> f b)
01:53:41 <{Arias}> like map...
01:53:52 <{Arias}> I need to apply a function to each character of the string
01:53:54 <Cale> so in the case of IO, that's (a -> b) -> (IO a -> IO b)
01:54:04 <{Arias}> but map don't works inside a do
01:54:16 <Cale> what kind of function?
01:54:18 <ibid> dcoutts: (BouncingBall is bouncing properly:)
01:54:19 <Cale> (type)
01:54:47 <{Arias}> the function will change special chars to html entities
01:55:04 <Cale> does it involve any IO?
01:55:10 <ibid> {Arias}: sounds like you want some sort of lift
01:55:31 <Cale> maybe just return?
01:55:32 <ibid> or rather, when your function is f, you may want to use return . f
01:55:41 <ibid> or let :)
01:55:50 <{Arias}> cale, i need to read the string from a file
01:56:04 <Cale> string <- readFile ...
01:56:11 <{Arias}> yes
01:56:12 <Cale> print (myFunction string)
01:56:48 <{Arias}> i'm trying this:
01:56:53 <{Arias}> main = do
01:56:59 <{Arias}> string <- readFile ...
01:57:16 <{Arias}> map htmlentities string
01:57:38 <Cale> well, map htmlentities string isn't an IO action to perform
01:57:40 <ibid> {Arias}: what are you trying to do?  that does nothing
01:57:44 <Cale> so you can't put it there
01:57:47 <{Arias}> and htmlentities is a case changing characters to html entities
01:57:58 <Cale> do you perhaps want to print the result?
01:58:03 <ibid> {Arias}: are you trying to modify the value of string?
01:58:23 <{Arias}> y want to write the result in other file x)
01:59:04 <Cale> {Arias}: writeFile "myfile.txt" (map htmlentities string)
01:59:26 <Cale> or: let result = (map htmlentities string)
01:59:34 <Cale> writeFile "myfile.txt" result
01:59:47 <{Arias}> ok, thanks :D
02:00:37 <{Arias}> x)
02:01:19 <beelsebob_> hehe, bored of writing man pages... so I wrote a man page syntax highlighting mode instead
02:13:19 <kzm> Morning, all.
02:13:35 <kzm> What is the recommended Haskell way of writing web pages?
02:13:43 * kzm thought it was time to look into that.
02:14:13 <Cale> There are a variety of libraries that people use.
02:14:28 <Cale> GHC comes with Text.Html
02:14:34 <kzm> Yes, I know.  If there were only one, I shouldn't have to ask, should I?
02:14:39 * kzm grins.
02:14:40 <Cale> :)
02:15:05 <Cale> I don't think that anything stands out as an obvious preferred way
02:15:15 <cjs> Are you trying to do a web app? It often depends a lot on the application.
02:15:17 <kzm> Text.Html's a bit simplistic, isn't it?
02:15:20 <Cale> http://www.cs.chalmers.se/~d00nibro/hsp/
02:15:27 <cjs> E.g., if you need internationalization, some frameworks just won't do it nicely.
02:15:43 <kzm> Isn't HaSP built on HSP?  (or perhaps I am confused)
02:15:52 <kzm> And WASH?
02:16:03 <Cale> there's WASH too
02:16:22 <kzm> I guess what I want is some kind of comparison between the options.
02:16:32 <kzm> (comparison "of"?)
02:17:13 <kzm> (I know what you are going to say: try them all, and do the writeup :-)
02:18:40 <Cale> Well, I haven't done anything substantial with them myself
02:19:11 <Cale> What sort of application are you writing?
02:19:51 <kzm> I was only going to try a simple form as front end for running a shell script...
02:20:36 <kzm> Mainly for my own elucidation and entertainment, really. :-)
02:21:46 <Cale> I wonder how HaXml would do
02:21:54 <kzm> Printed the WASH docs, so I guess I'll grab a cup of coffee, and have a look.  So at least I'll get some coffee out of it :-)
02:22:06 <Cale> :)
02:22:16 <kzm> Haven't looked much at HaXml, but I thought it was for building XML parsers?
02:22:30 <Cale> http://www.cs.york.ac.uk/fp/HaXml/HaXml/index.html
02:22:44 <Cale> looks like it does all things XML to some extent
02:23:10 <kzm> BTW, there was a combinator library (or something) using more or less XML and Haskell code intermixedly (if that is a real word).
02:23:22 <kzm> Perhaps in TMR?  HWN?
02:23:38 <Cale> That sounds like HSP or a derivative thereof
02:24:56 <kzm> Hmm... looked cool, at any rate. 'parently not TMR, at least I couldn't find it there.
02:25:15 <kzm> Okay, I'm off for that coffee.
02:25:24 <Cale> http://thread.gmane.org/gmane.comp.lang.haskell.general/12002
02:25:55 <Cale> remember to change scannedinavian.org to .com
02:27:05 <Cale> http://scannedinavian.com/~lemmih/hsp/examples/Session
03:00:23 <dcoutts_> ibid, glad to hear it
03:01:16 <dcoutts_> xerox, the cairo did not build on win32 because of a buglet with include paths. Trying again...
03:19:34 <ValarQ> dcoutts_: ibid?
03:20:14 <ValarQ> dcoutts_: i got some problems with building gtk2hs
03:24:49 <b0gg1e> 'morning.
03:27:06 <araujo> Good morning!
03:44:02 <dcoutts_> xerox, yay the cairo bindings built on win32, now to see if they work...
03:45:07 <dcoutts_> ValarQ, try the latest darcs version as of this morning. There were a few build fix patches that went in yesterday.
03:45:14 <dcoutts_> darcs pull
03:46:34 <dcoutts_> dons!
03:48:02 <ValarQ> dcoutts_: i'll try that
03:54:38 <Heffalump> morning
03:57:21 <ValarQ> dcoutts_: still fails to compile
04:02:26 <dcoutts_> ValarQ, I'll be back in an hour
04:03:03 <Heffalump> morning
04:03:09 <boegel> hey Heffalump
04:03:43 <ValarQ> dcoutts_: ok
04:04:44 * boegel sings
04:13:31 <dcoutts_> ValarQ, actually I'm back early. What was the problem then?
04:13:56 <dons> dcoutts!
04:14:04 <dcoutts_> :-)
04:15:01 <dcoutts_> Paul Hudak got back to me about my reimplementation of SOE using Gtk/cairo
04:15:14 <dcoutts_> he's fairly entheusiastic
04:15:35 <boegel> dcoutts: cool
04:15:38 <dcoutts_> "This sounds fantastic!  I've been wanting to switch away from
04:15:38 <dcoutts_> HGL, which is buggy as you point out, and isn't being maintained by
04:15:38 <dcoutts_> anyone."
04:15:43 <dcoutts_> yay
04:15:56 <boegel> dcoutts: cool, you'll be in his new book :)
04:16:03 <dcoutts_> heh
04:16:14 <boegel> and that's not fairly enthousiastic, that's _very_ enthousiastic
04:16:28 <dcoutts_> yeah, I guess so
04:16:43 <dcoutts_> they tried a wxHaskell implementation but couldn't finnish it
04:16:56 <dcoutts_> apparently the Region api was too hard to implement with wxHaskell
04:16:57 <boegel> wxHaskell sux :P
04:17:15 * dcoutts_ would not be os undiplomatic as to say such a thing
04:17:16 * shapr throws monads at boegel 
04:17:25 * boegel ducks
04:17:34 * beelsebob_ throws arrows at shapr
04:17:40 <shapr> good morning #haskell!
04:17:43 * shapr dodges
04:17:58 <dcoutts_> morning shapr
04:18:05 <shapr> Yow! How's code?
04:18:05 <beelsebob_> morning shapr
04:18:15 <dcoutts_> @yow
04:18:16 <dons> @localtime shapr
04:18:22 <shapr> ?
04:18:24 <lambdabot> Is it clean in other dimensions?
04:18:25 <lambdabot> Local time for shapr is Tue Oct 18 13:18:02 2005
04:18:28 <shapr> whoa nifty
04:18:33 <dons> @bot
04:18:35 <lambdabot> :)
04:18:43 <shapr> How's it do that? /ctcp time ?
04:18:51 <dcoutts_> yep
04:18:53 <beelsebob_> shapr: code's good for me... I got bored of writing man pages... so I wrote this instead http://www.dusoft.co.uk/freebies.php
04:19:17 <shapr> beelsebob_: spiffy!
04:19:27 * dcoutts_ noticed a ctcp time request when one does @localtime dcoutts
04:19:28 <dons> where'd that @yow get to? hmm.
04:19:30 <beelsebob_> so then I went back to writing manual pages
04:19:39 <dcoutts_> dons, it's there
04:19:42 <beelsebob_> ... in spiffy highlightedness
04:19:49 <dcoutts_> dons, "Is it clean in other dimensions?"
04:19:52 <dons> ah, I see. no CAPITALS
04:19:52 <beelsebob_> dons: lambdabot: Is it clean in other dimensions?
04:19:56 <int-e> @localtime int-e
04:19:57 <dcoutts_> @yow
04:19:58 <lambdabot> I HAVE to buy a new "DODGE MISER" and two dozen JORDACHE JEANS
04:19:58 <lambdabot> because
04:19:58 <lambdabot> my viewscreen is "USER-FRIENDLY"!!
04:20:03 <beelsebob_> @woy
04:20:04 <lambdabot> Maybe you meant: moo wn yow
04:20:10 <beelsebob_> @wn
04:20:19 * int-e is too unfriendly to reply ...
04:20:25 <shapr> dons: Did you come up with a good inline lambdabot command syntax?
04:20:41 <dcoutts_> @localtime dcoutts_
04:20:43 <lambdabot> Local time for dcoutts_ is Tue Oct 18 12:00:42
04:20:50 <shapr> btw, can anyone get to the ipv6 freenode servers?
04:20:56 <dcoutts_> eek my clock is wrong
04:21:03 <dons> well, I was thinking about @foo x y z@
04:21:24 <dcoutts_> @localtime dcoutts_
04:21:26 <lambdabot> Local time for dcoutts_ is Tue Oct 18 12:20:20
04:21:31 <dcoutts_> that's better
04:21:36 <musasabi> What does cause "test: internal error: resumeThread: thread not found" on GHC-6.4.1 on Windows (and what can I do to fix it) ?
04:22:02 <shapr> dcoutts_: ntp is great
04:26:14 <dons> musasabi, looks like a rts bug ?
04:26:37 <dcoutts_> shapr, yeah I should set it up
04:27:30 <shapr> dons: Want me to set up Trac + darcs on Scannedinavian for hIDE?
04:28:14 <boegel> bubblesort: 1 5 3 9 6
04:28:19 <Lemmih> shapr: Yeah!
04:28:35 * dcoutts_ votes for shapr to do so
04:28:37 <musasabi> dons: yes, and I am wondering whether it is a known issue, or whether I should go ahead and report it.
04:29:02 <dcoutts_> @eval sort [1,5,3,9,6]
04:29:09 <lambdabot> [1,3,5,6,9]
04:29:33 * dcoutts_ has never seenbubblesort implemented in Haskell
04:29:35 <boegel> dcoutts: oh man, you gave it away for bubblesort !
04:29:44 <dcoutts_> boegel, ah sorry
04:30:00 <boegel> dcoutts_: he was working on it :P
04:30:04 <dcoutts_> heh
04:30:29 <dons> shapr, please do so. surveys indicate 3/3 hIDE hackers support you doing this :)
04:30:31 <dcoutts_> shapr, oh, turns out I was using ntp but my ntpd died for some reason
04:30:53 <tromp> i
04:31:08 <tromp> uhm, hello folks
04:31:17 <dcoutts_> boegel, oh now you scared bubblesort off!
04:32:47 <dons> yay. openbsd is 10 years old today. (relevance: you can run haskell on openbsd :)
04:35:44 <int-e> @eval let bubble [a] = Right [a]; bubble (a:b:cs) | a>b = Left $ b:a:cs; bubble (a:bs) = either (bubble.(a:)) (Right.(a:)) $ bubble bs; bubblesort as = either bubblesort id $ bubble as in bubblesort [5,2,23,13,17]
04:35:48 <lambdabot> [2,5,13,17,23]
04:36:24 <int-e> . o O ( my favourite single-pass bubble sort :) )
04:36:34 <boegel> dcoutts_: :(
04:38:31 <musasabi> looks like I just corrupted the stack behind the scenes.
04:38:36 <dons> :)
04:47:09 <goron> @moo
04:47:22 <goron> @seen goron
04:47:23 <lambdabot> You are in #haskell. Last spoke just now.
04:47:44 <goron> Hmm, ok @moo is still disabled.
04:49:10 <dons> poor goron, you love @moo so much, but now it's gone :(
04:49:49 <dons> you'll just have to write @eval's that print @moos :)
04:53:17 <pitecus> hi dons
04:53:30 <dons> hey pitecus!
04:53:42 <dblhelix> do we still have @yow
04:53:46 <dblhelix> @yow
04:53:47 <lambdabot> Hey, wait a minute!!  I want a divorce!! ... you're not Clint
04:53:47 <lambdabot> Eastwood!!
04:53:54 <dblhelix> ah, gladly
04:54:10 <pitecus> i saw you said hi when it was middle of the night here.
04:54:12 <dblhelix> @vixen what makes you think I'm not?
04:54:13 <lambdabot> i dunno, what now?
04:54:22 <dons> ah, pitecus, I see :)
04:54:24 <dblhelix> @vixen now we're done
04:54:25 <lambdabot> now now now...so demanding
04:54:34 <dons> your client must have reconnected during the night
04:54:50 <pitecus> it's almost always connected :)
04:54:58 <dons> you learning haskell?
04:55:40 <pitecus> sortof, I am lab assistant in a course that uses haskell, so need to grok it more or less.
04:55:41 <dons> btw, you should add yourself to:
04:55:42 <dons> @map
04:55:43 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
04:55:59 <musasabi> Is there a working way of having a Cabal package with non-static build-depends?
04:56:14 <dons> pitecus, ah! what does the course use haskell for?
04:56:39 <dons> musasabi, in what sense are they non-static?
04:56:49 <pitecus> it's called languages and computability.
04:56:53 <dons> can you just have multiple .cabal files that you select prior to ./configure ?
04:57:29 <dons> luckily haskell's easy to grok, I think
04:58:03 <dons> will the students write assignments in haskell, I guess?
04:58:17 <goron> It depends on what level you want to understand Haskell. Basically the language is simple, implementations tend to be somwhat more complicated :)
04:58:17 <pitecus> O yes just simple excericises
04:58:43 <pitecus> so I have to help themk when they get stuck
04:59:03 <dons> ah .. I always think assignments should really stress the students out and be epic in their difficulty
04:59:23 <dons> luckily I don't usually get to set the assignments :)
04:59:40 <ValarQ> dcoutts_: i'm back as well :)
04:59:40 <rep> i wish it would be possible to write kernel modules in haskell.
04:59:52 <dons> rep: see House!
04:59:53 <pitecus> luckily for poor lab assistants
05:00:03 <rep> dons freebsd/linux kernel modules :(
05:00:06 <dons> pitecus, true :S
05:00:30 <ValarQ> dcoutts_: heres the error message: Events.hsc:85:0:  Failed to load interface for `Graphics.UI.Gtk.Gdk.Keys':  Could not find module `Graphics.UI.Gtk.Gdk.Keys'
05:00:44 <dons> rep, I'm not sure why you couldn't write a kernel module in haskell
05:00:57 <rep> dons it would require work
05:00:58 <dons> it would require also loading the ghc rts and such, but it is doable
05:01:02 <dons> work, yes
05:01:05 <shapr> Megz: Hey I can give you a short description of a monad..
05:01:27 <rep> dons i'm too lazy to even start trying :>
05:01:35 <musasabi> dons: to be able to optionally depend on some haskell package.
05:01:47 <dcoutts_> ValarQ, try rm gtk/*.deps
05:02:06 <ValarQ> dcoutts_: ok
05:02:16 <musasabi> Currently I am using autoconf to move from .cabal.in to .cabal and I am trying to make things more sensible.
05:02:38 <dcoutts_> musasabi, cabal is going to get optional dependency syntax
05:03:01 <dons> pitecus, you in ireland?
05:03:07 <pitecus> Dublin
05:03:18 <musasabi> so just provide n^2 cabal files until it?
05:03:21 <beelsebob_> hmmm, were you one of the many people I met at IFL?
05:03:40 <dcoutts_> ValarQ, the auto dep regenerating is not that great I'm afraid.
05:04:13 <dons> musasabi, yeah, I have a couple of projects with optional deps, and I just use 2 .cabal files that are chosen prior to configure. but i haven't seen any nicer way.
05:04:38 <beelsebob_> pitecus: that was directed at you btw :)
05:04:44 <dons> pitecus, cool. you should definitely add yourself to the #haskell user map then :)
05:04:49 <ValarQ> dcoutts_: ok, we'll see if it works
05:04:59 <beelsebob_> dons: how do you do that?
05:05:07 <dons> ok, so the map is at:
05:05:08 <dons> @map
05:05:09 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
05:05:15 <dons> which is just a wiki page
05:05:15 <shapr> dons: For cheesy humor you could tell students that FP doesn't have assignments, but they'll definitely get an evaluation.
05:05:23 <pitecus> beelsebob_, I don't think I was at IFL, whatever that was
05:05:32 <beelsebob_> ah, okay
05:05:40 <dons> you log in (click on UserPreferences and get a name and passwd) then refresh and edit
05:05:41 <pitecus> dons the page says I am not allowed to modify it.
05:05:45 <beelsebob_> FP conference... in Dublun... a couple of months ago
05:05:47 <pitecus> Ah, OK
05:05:51 <dons> or send me the latitude and longitude, then I'll add the values
05:06:09 <pitecus> dons, Wikipedia says: Lat. 53.3472°N, Lon. 6.2592°W
05:06:48 <dons> cool, i'll add it. it'll update the map in about 5 minutes
05:07:20 <pitecus> beelsebob_, No I wasn't there. I don't get to go to programming conferences. I sometimes to NLP and CompLing conferences.
05:07:32 <dblhelix> dons; why can the locations wiki page not be edited?
05:07:51 <dons> spammers mean we need to validate edits with a login first
05:09:17 <ValarQ> dcoutts_: seems to work
05:09:41 <dons> pitecus, is haskell used in any other courses ?
05:09:55 <beelsebob_> dons: Lat: 51:16:16N (51.271) Lon:1:04:28E (1.0745)
05:09:56 <dons> shapr, heh! I like that :)
05:10:19 <ValarQ> dcoutts_: where does it get installed?
05:10:30 <pitecus> dons, not sure, but I doubt it. They teach mostly Java.
05:11:23 <dons> ok, though interesting they choose it for what sounds like a nice theory course (?)
05:11:37 <dcoutts_> ValarQ, if you did not specify and ./configure --prefix=  then it defaults to installing to /usr/local/lib/gtk2hs/
05:11:44 <dcoutts_> and/any
05:11:52 <pitecus> They teach Java even to non-CS students that do conversion courses. This is kind of silly really.
05:11:59 <dons> we use mostly C and Java here too I guess, but luckily 1A and 3 or 4 other courses use haskell
05:12:07 <dcoutts_> xerox, yay, your cairo bindings work on win32
05:12:14 <pitecus> 1A is AI?
05:12:14 <ValarQ> dcoutts_: doesn't it have to ad some files in my /opt/ghc-6.4 directory?
05:12:27 <ValarQ> s/ad/add/
05:12:29 <dons> 1A == first comp sci course
05:12:39 <dcoutts_> ValarQ, it will register itself using ghc-pkg
05:12:58 <ValarQ> dcoutts_: ok, just gotta roll an ebuild then
05:13:09 <dons> also in Principles of Programming Languages, a type theory+proofs+compiler writing course (this is the one I write the assignments in ;)
05:13:24 <dcoutts_> ValarQ, oh, you can start with the existing gtk2hs ebuild
05:13:30 <pitecus> My girlfriend is in one of those IT for dummies courses and they teach them Java. I don't think they'll get to learn about methods in this semester though.
05:13:37 <dons> we also use Haskell in Adv. FP, Parsing and Translation, and possibly they get a bit in Software Construction
05:13:49 * dcoutts_ should really make a gtk2hs-darcs ebuild
05:13:55 <pitecus> dons, sounds reasonable
05:14:14 <dons> we also throw Java at people coming in from other degrees.
05:14:16 <dons> it's silly really
05:14:29 <dblhelix> here we start with a course on fp, then we have grammars and parsing, and implementation of programming languages...
05:14:42 <ValarQ> dcoutts_: yeah, i just copied it :)
05:14:49 <dons> dblhelix, all in haskell?
05:14:56 <dblhelix> dons: yes
05:15:07 <int-e> dcoutts: is the CVS still the primary repository for gtk2hs or has that changed?
05:15:19 <ValarQ> dcoutts_: does 'make dist' work?
05:15:28 <dons> cool, that's the way it should be :) so that's basically the same as unsw, but we also have this type theory course now
05:15:33 <dblhelix> then, the master program is also haskell centered: type systems, adv. fp, generic programming etc.
05:15:43 <dons> ah, that's really nice.
05:15:48 <dons> where's this?
05:15:53 <dons> utrecht?
05:15:53 <dblhelix> dons: utrecht
05:16:01 <dblhelix> yes
05:16:34 <dons> which is why it's haskell HQ according to @map ;)
05:16:45 <dblhelix> :)
05:17:09 <dons> pitecus, you're on the map!
05:17:22 <pitecus> Yeah, first on the whole damn island!
05:17:47 <pitecus> And I'm not even Irish.
05:17:59 <dons> hehe
05:18:42 * xerox bounces happily !!!
05:18:45 <ValarQ> pitecus: i'm very close to a damn island myself
05:18:45 <xerox> dcoutts_: YAY!
05:19:14 <pitecus> ValarQ, where's that?
05:19:28 <dons> check the map
05:19:29 <dcoutts_> xerox, though some stuff behaves differently, but maybe that's because I'm using cairo-1.0.2
05:19:40 <ValarQ> pitecus: Sweden, Kalmar
05:19:41 <pitecus> Sweden
05:19:42 <xerox> Great.
05:19:49 <paolino> ciao, how reads  "class Monad (m::* -> *) where" ?
05:19:50 <xerox> dcoutts_: what did you try?
05:20:08 <pitecus> That guy near the north pole must be frozen
05:20:18 <dons> shapr, are you cold up there?
05:20:21 <ValarQ> pitecus: thats mr Shapr :)
05:20:36 <dblhelix> pitecus: he likes it cold
05:20:40 <pitecus> hehe
05:20:51 <shapr> It's pretty warm here, 5° or so.
05:21:03 <shapr> This is the warmest part of the day though.
05:21:05 <ValarQ> shapr: almost the same as here
05:21:08 <pitecus> Climate change and all that.
05:21:16 <ValarQ> my guess is that we got higher humidity thought
05:21:18 <dons> shapr is the coldest lambda of them all
05:21:22 * shapr laughs
05:21:28 <xerox> Lunch!
05:21:33 * pitecus goes for lunch
05:21:38 <dcoutts_> xerox, yes good idea
05:21:38 <shapr> It's getting too cold to unicycle in a sweater and bike shorts.
05:21:44 * dcoutts_ goes for lunch
05:21:50 <dblhelix> shapr is keeping his continuations cool
05:21:55 <ValarQ> lol @ formarn
05:22:04 <xerox> dons: you got my mail? (bbiab)
05:22:12 <paolino> good lunch
05:22:23 <dons> xerox, yep. still hacking. will be fixed in a day or so.
05:22:25 <dons> check my reply
05:22:33 <dons> (just don't load yiBase for now)
05:23:08 * dblhelix thinks the locations wiki should be gps powered... would've been nice to see all markers move to estonia last month :)
05:23:29 <shapr> Yeah, that would be cool.
05:23:41 <shapr> dons found a GPS Google maps app recently.
05:23:50 <dblhelix> @localtime dons
05:23:53 <lambdabot> Local time for dons is Tue Oct 18 22:27:42 2005
05:24:33 <dblhelix> dons: as always, your way ahead of (y)our time
05:24:34 <ValarQ> oh, thats a neat function
05:24:37 <dons> hmm, so yeah, it would be easy to maintain a little db on lambdabot's home taking gps numbers from people, and using that as a backend to page talking to google maps
05:24:48 <dons> no, my time looks ok here :)
05:25:49 <dblhelix> dons: okay, but don't reveal what will happen int the evening; i want it to be a surprise
05:25:56 <dons> hehe :)
05:26:08 * dblhelix has seen to many enterprise episodes on time travelling
05:26:41 * shapr grins
05:26:44 <dblhelix> mmm... haskell is still to conquer asia
05:26:57 <dblhelix> when will that happen?
05:27:00 <ValarQ> and africa...
05:27:08 <dblhelix> indeed
05:27:25 <dons> we do have some chinese #haskellers, and russians, but they're not on the list yet
05:27:33 <ndm> maybe the solution is to take people who already know haskell, and send them off to africa
05:27:40 <dons> however, i'm not sure i've seen any sth. africans for example
05:27:47 <dons> ndm, good idea. sabbaticals for all!
05:28:08 <dons> we can start the "teach haskell abroad" program
05:28:16 <dblhelix> ndm: good idea... should we appoint them now?
05:28:37 <dblhelix> should we draw?
05:28:51 <ndm> do we have any haskellers in japan, i quite fancy that...
05:29:08 <dblhelix> who drew himself out of military service last month? I remember someone mentioning it...
05:29:09 <dons> we do indeed!
05:30:08 * jewel is South African
05:30:14 <dons> ah!
05:30:14 <shapr> jewel: put yourself on the map!
05:30:19 <dons> @map
05:30:20 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
05:30:26 <jewel> not really a haskeller though
05:30:38 <dons> a #haskeller is all that matters
05:30:45 <shapr> jewel: sure you are
05:31:14 <jewel> and I'm in Thailand anyway
05:31:29 <ValarQ> hello Megz
05:31:43 <dons> we don't have any Thailand dots on the map either!
05:31:50 * shapr boings cheerfully
05:31:54 <dons> please add your coords, jewel :)
05:31:57 <dblhelix> jewel: you're now assigned the honourable task of spreading the joy of strongly typed lazy functional programming in south africa! enjoy!
05:32:05 <rep> i wonder where i should add myself
05:32:09 <shapr> Or you can just spread Joy...
05:32:22 <shapr> jewel: Speaking of which, what sort of code are you working on these days?
05:32:26 <dons> rep, well, it's *where you are now*. so presumably that is only 1 place?
05:32:45 <rep> dons rome, but i'm leaving in a week
05:32:49 <rep> (italy)
05:32:52 <jewel> I'm learing CL these days
05:33:04 * dons ponders a thailand holiday this summer
05:33:10 * dblhelix goes to rome on thursday!
05:33:18 <rep> dblhelix woot
05:33:19 <shapr> Megz: Hey man, stop bouncing or I'll temp ban you just to cut down on the noise.
05:33:20 * ValarQ wonders what mr Megz is up to
05:33:33 --- mode: ChanServ set +o shapr
05:33:43 <paolino> how is it func k l=map (\r -> r*k) l  pontfree ?
05:33:45 <dons> shapr puts on his big hat
05:33:47 <dons> :)
05:33:54 <dblhelix> o oh
05:33:56 <shapr> now I just have to remember how to ban people... sheez
05:34:00 <dons> paolino, it is?
05:34:03 --- mode: shapr set +b *!Megz@*
05:34:09 <dons> @pl let f k l = map (\r -> r*k) l
05:34:10 <lambdabot> (line 1, column 30):
05:34:10 <lambdabot> unexpected end of input
05:34:10 <lambdabot> expecting variable, "(", operator, ";" or "in"
05:34:17 <dons> @pl let f k l = map (\r -> r*k) l in f
05:34:17 <lambdabot> map . (*)
05:34:19 <Megzl> Sorry.
05:34:25 <shapr> Megzl: no worries, it just happens.
05:34:27 <dons> now that's more like it, paolino :)
05:34:37 <shapr> Megz: You should stick with the Megzl nickname.
05:34:52 <shapr> Unless Megz is your registered nickname of course..
05:35:45 <paolino> ah thanks
05:36:01 <dblhelix> why aren't there any haskellers in haskell county, kansas?
05:36:35 <rep> anyone wanna add me to the HaskellUserLocation page? my coords are 41.784945 12.357001
05:36:42 <dons> rep, ok. cool.
05:36:56 <cjb> Uh, isn't it a wiki?  :)
05:36:59 <rep> dons my name is Suleiman Souhlal
05:37:01 <rep> dons thanks :)
05:37:12 <dons> rep, of course :) formerly reppie?
05:37:18 <rep> yep
05:37:38 <rep> you can put "reppie" as my nickname
05:37:43 <dons> you've submitted lambdabot patches too, isn't that right (?)
05:37:46 <dblhelix> the artist formerly known as
05:37:54 <rep> dons i think yi patches
05:38:06 <dons> ah, that's right. thanks, btw!
05:38:12 <rep> np :)
05:38:25 <ValarQ> dcoutts_: my ebuild seems to have worked except i forgot to add some lines...
05:38:41 <jewel> I'm 13.731 , 100.521
05:39:04 <dons> thanks jewel
05:40:57 <dblhelix> now, let's do business... who volunteers migrating to Kazakhstan, just to spread the use of haskell? hands please
05:41:21 <dblhelix> anyone for Peru?
05:41:32 <rep> i'll happily migrate to japan
05:42:15 <dcoutts_> xerox, I ran all the gtk/demo/cairo/*.hs demos
05:42:19 <dons> siberia is empty too
05:42:24 <dons> and antarctica!
05:42:28 <dcoutts_> xerox, the one that's wierd is the text one
05:42:38 <dblhelix> I think it'd be best if I cover the Caribbean ;)
05:42:47 <dcoutts_> xerox, it advances the current point after drawing the text.
05:42:56 * Akshaal is from siberia, btw
05:43:05 <dcoutts_> xerox, though on second thought perhaps it did that with cairo 1.0.0 and we just never noticed.
05:43:05 <paolino> @pl let f g l=filter $ map g l
05:43:06 <lambdabot> (line 1, column 27):
05:43:06 <lambdabot> unexpected end of input
05:43:06 <lambdabot> expecting variable, "(", operator, "$", "$!", "`seq`", ";" or "in"
05:43:11 <dons> Akshaal! and where are you now?
05:43:18 <Akshaal> in kiev
05:43:20 <paolino> @pl let f g l=filter f $ map g l
05:43:21 <lambdabot> (line 1, column 29):
05:43:21 <lambdabot> unexpected end of input
05:43:21 <lambdabot> expecting variable, "(", operator, "$", "$!", "`seq`", ";" or "in"
05:43:30 <jewel> why is the US so unrepresented?
05:43:32 <dblhelix> Akshaal: add your coordinates then
05:43:32 <dons> paolino, let ... = ... in ...
05:43:50 <dons> jewel, I think that Haskell is not so common in the US, in fact
05:43:55 * Akshaal is lazy as haskell
05:43:56 <dons> ML perhaps
05:44:04 <dons> is more common in the US.
05:44:13 <dons> except in Oregon, where it's Haskell all the way :)
05:44:14 <ozone> dons: scheme, i think
05:44:23 <paolino> @pl let func f g l=filter f $ map g l in func
05:44:24 <lambdabot> (. map) . (.) . filter
05:44:28 <dons> a scheme, yes ozone. you're right
05:44:33 <dblhelix> Akshaal: that's no problem... then you'll do just enough... in this case, providing us with your coordinates :)
05:44:52 <dblhelix> haskell: not as lazy as you think
05:44:57 <dons> @wikipedia kiev
05:45:02 * dblhelix should be in advertisement
05:45:07 <lambdabot> http://en.wikipedia.org/wiki/Kiev
05:45:27 <dblhelix> that's in Ukraine, isn't it?
05:45:33 <dons> Akshaal, but did you learn Haskell in siberia?
05:45:54 <dons> dblhelix, yes.
05:45:56 <Akshaal> yeah, I am NOW in kiev..  I lived in Omsk city about 24 years
05:46:33 <dcoutts_> xerox, heh, yeah, go run the text demo again. It's not a win32-specific thing.
05:48:00 <adept> dblhelix: yep, that's in Unkraine
05:48:15 <adept> dblhelix: lousy place just right now :) +5C, rains
05:48:37 <dons> Akshaal, adept, do you know if haskell is taught in any university in ukraine?
05:48:53 <adept> dons: no
05:48:57 <dcoutts_> xerox, in fact it was a cairo-1.0.0 thing. From the 1.0.0 release notes: "The cairo_show_text function now advances the current point according to the total advance values of the string."
05:48:59 * Akshaal has no clue
05:49:05 <adept> dons: "no" = not taught
05:49:28 <dons> adept, is there a secret ukranian fp language, or is, what, C the most common? :)
05:49:38 <adept> dons: I can speak for Kiev, Lviv and Kharkiv, which pretty much makes sure that everywhere else it is not taught as well :)
05:50:01 <dons> yep, sure.
05:50:16 <Akshaal> dons: in univ: Delphi, Visual C++, Pascal
05:50:24 <musasabi> Switching to multiple cabal files seems to work, but now I want to pass some flags from the cabal file to cabal hooks in Setup.lhs. How do I do that sort of thing without manually re-reading the cabal file?
05:50:47 <adept> dons: when I was in uni, chalk, whiteboard, labdas, turing machines, markov chain, primitive-recursive functions and such had their heyday. Not much hands-on programming, I'm afraid
05:51:13 <dons> :( "hands-on programming"  -- I like that term :)
05:51:35 <dons> it's hard to imagine a programming course where you don't program - but machines are (or were) expensive
05:51:42 <ValarQ> dcoutts_: ok, second run :)
05:51:53 <ValarQ> dcoutts_: did you wan't my .ebuild ?
05:52:27 <paolino> what type is (. map)  ? I can't parse it
05:52:29 <ValarQ> s/'//
05:52:40 <adept> dons: for "basics of sw development" and "OS concepts" we had toy C projects, "DB theory" was backed up by, AFAIR, Delphi, and so on. FP-related courses were mostly theory for me.
05:52:56 <beelsebob_> paolino: it's the function that maps another function after it runs another one
05:53:30 <Akshaal> adept: then you are lucky, most people even don't know what fp is
05:54:00 <paolino> beelsebob_, after ?
05:54:15 <adept> Akshaal: i believy that if it was not for the "legacy" of our faculty, I had a fat chance of being ignorat about FP at all. Sad but true.
05:54:25 <adept> ^believe
05:54:27 <dcoutts_> ValarQ, did you have to make any interesting changes to the ebuild?
05:54:30 <beelsebob_> paolino: it accepts two functions and a list
05:54:39 <beelsebob_> it runs the first function on the list
05:54:39 <ValarQ> dcoutts_: only cairo
05:54:49 <dcoutts_> ValarQ, right
05:54:53 <adept> @type (. map)
05:54:56 <dcoutts_> xerox, I've fixed the text demo (and made it even cooler)
05:54:58 <lambdabot> forall a b c. (([a] -> [b]) -> c) -> (a -> b) -> c
05:55:00 <ValarQ> dcoutts_: didn't have to do that much
05:55:02 <beelsebob_> and then uses the second function, and the result of that to put into map
05:55:30 <dons> Akshaal, jewel, reppie: you're on the map :)
05:55:45 <Akshaal> dons: :))
05:55:53 <dblhelix> it all about @map and (. map) now
05:55:58 <adept> now we need an ion cannon button
05:56:16 <dons> hehe
05:56:39 <beelsebob_> ionCannon :: World -> World
05:56:42 <beelsebob_> there you go :)
05:56:53 <ndm> ionCannon :: World -> Nothing
05:56:56 <beelsebob_> lol
05:56:58 <ndm> a better ion cannon
05:57:00 <dons> hah
05:57:16 <ValarQ> hehe
05:57:17 <dons> ionCannon :: RealWorld# -> IO ()
05:57:58 <dons> @type RealWorld
05:57:59 <lambdabot> bzzt
05:58:03 <dons> @type GHC.Base.RealWorld
05:58:04 <lambdabot> bzzt
05:58:21 <dons> @type GHC.ST.RealWorld
05:58:22 <lambdabot> bzzt
05:58:22 * dblhelix is cleaning his desk: a six-day holiday... 
05:58:51 <dblhelix> four of which will be spent in rome
06:00:01 <dblhelix> my gf forbid me to bring along any books that have greek letters or "other strange symbols" in it
06:00:15 <basti_> ^^
06:00:16 <beelsebob_> lol
06:00:26 <dons> @kind GHC.Base.RealWorld
06:00:27 <lambdabot> *
06:01:04 <Igloo> @version
06:01:04 <lambdabot> lambdabot 3p107, GHC 6.5 (OpenBSD i386)
06:01:04 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
06:01:09 <adept> dons: (speaking of state of FP here) however, it was relatively easy to find 2 people for ICFP team who know haskell :)
06:01:11 <dblhelix> @vixen: you're a star
06:01:12 <lambdabot> Does your mommie know you're here, little naughty boy?
06:01:16 <dons> @kind GHC.Base.RealWorld -> IO ()
06:01:17 <lambdabot> *
06:01:31 <dons> adept, cool!
06:01:47 <dons> was that you who made the request on the icfp list/
06:01:48 <dons> ?
06:01:57 <dblhelix> lambdabot gets more nasty each day
06:01:59 <adept> about ... ?
06:02:07 <adept> dons: ah, about statistics. no, not me
06:02:25 <dons> oh, I remember someone in ukraine asking for a partner or two who knew haskell for next year
06:02:40 <dons> at the end of the first round, perhaps this was
06:03:16 * dblhelix intends to participate next year... just have to find myself a team
06:04:15 <Igloo> dons: Where do I find the runplugs source?
06:04:22 <dons> in scripts/
06:04:27 <dons> inside lambdabot/
06:04:33 <Igloo> Ta
06:04:34 <dons> needs hs-plugins from darcs
06:06:57 <dons> @localtime dons
06:07:01 <lambdabot> Local time for dons is Tue Oct 18 23:10:49 2005
06:07:05 <dons> night!
06:07:30 <dblhelix> dons: night! see you next week... :) *grin*
06:09:12 <shapr> dons: Thinking about "programming course where you don't program" I remember the quote "Computer Science is about computers like astronomy is about telescopes."
06:10:03 <beelsebob_> shapr: that was mr Djykstra
06:10:05 <beelsebob_> (sp)
06:10:09 <xerox> dcoutts_: back!
06:10:28 <shapr> Dijkstra I think.
06:10:36 <dblhelix> shapr: you as a native speaker, can you concisely indicate what's the difference between *computer* science and  *computing* science?
06:10:38 <adept> dons: about partner - that was me :)
06:10:52 <dblhelix> Dijkstra, definitely
06:10:54 <adept> @localtime dblhelix
06:10:57 <lambdabot> Local time for dblhelix is Tue Oct 18 15:10:33 2005
06:10:57 <beelsebob_> and it's bang on... comp sci courses should *not* be teaching how to write Java
06:11:10 <beelsebob_> ... or how to write anything for that matter
06:11:18 <xerox> dcoutts_: I'll darcspull and try :D
06:11:24 <shapr> Btw, I have to advertise a really cool tool that delysid wrote - webpage here - http://delysid.org/schearnet.html demo here - http://mozart.soundportal.at:8000/delYsid.ogg
06:11:41 <xerox> Yea, it is fun :D
06:11:47 <adept> dblhelix: computers are devices for computing :)
06:11:55 <shapr> Point xmms at the demo stream, it's cool!
06:12:07 <beelsebob_> yep... telescopes are devices for astronoming
06:12:10 <adept> dblhelix: one can talk about properties of addition without referring to pocket calculator
06:12:39 <adept> dblhelix: likewise, one can talk about properties of calculation without referring to real computing devices (computers)
06:12:41 <dblhelix> adept: I get the difference between computing and computers :)
06:12:46 <beelsebob_> adept: some would argue that you are then studying maths though
06:12:54 <beelsebob_> I would argue that that's a good thing
06:13:10 <adept> beelsebob_: i got bachelor in applied math and than 2 more years of CS.
06:13:16 <beelsebob_> :)
06:13:40 <adept> beelsebob_: at least, it's easier to explain our education system this way
06:13:44 <beelsebob_> kinda my point... computing is a limited (and interesting) subset of maths
06:13:58 <adept> beelsebob_: why limited?
06:14:00 <beelsebob_> and programming is largely irrelevant to it
06:14:13 <beelsebob_> adept: I meant strict subset
06:14:19 <beelsebob_> it does not encompas all maths
06:14:21 <C-Keen> re
06:14:21 <adept> ah
06:16:49 <xerox> delYsid's stream is addictive
06:16:51 <shapr> truly
06:16:58 <shapr> I have to install this on snowblind.
06:17:14 <xerox> hIDE STARTED!
06:17:15 <shapr> You think we could persuade him to do SC output to save bandwidth?
06:17:17 * xerox yows
06:17:36 <xerox> Woooot!
06:17:43 <xerox> What is SC ?
06:17:46 <shapr> supercollider.
06:17:52 <shapr> It's the event based sound thingy.
06:17:55 <xerox> Ah, that.  I think so.
06:19:00 <xerox> My gosh.  hIDE looks great.
06:21:53 <rep> starcraft!
06:22:05 <rep> best pc game ever?
06:22:15 <shapr> It's ok.
06:22:22 <shapr> Dark Reign was better for RTS.
06:22:55 <rep> i think dark reign was pretty lame, to be honest :(
06:23:06 <shapr> Did you use the unit programmability?
06:23:15 <rep> you mean the waypoints?
06:23:50 <shapr> Nah, I mean the 27 possible settings for each unit. Pursuit, repair, and deviation or something.
06:24:12 <rep> *shrug*
06:24:20 <rep> starcraft was great in multiplayer
06:25:08 <rep> very balanced etc
06:25:28 <shapr> Yeah, but units were stupid. They just attacked anything.
06:25:45 <shapr> You have to maintain tight control of Guardians for example, otherwise they get squished.
06:25:47 <rep> yes, you had to micromanage them
06:25:50 <xerox> dcoutts_: is it needed to install the plugins as cabal packages so that ghc-pkg sees them?
06:26:06 <shapr> You don't have to micromanage in Dark Reign, you can program unit following, unit behaviour, etc.
06:27:21 <rep> i wish they still made good pc games :(
06:28:10 <shapr> We could always write a game in Haskell that has the balance of StarCraft and the programmability of Dark Reign.
06:28:31 <shapr> I'm sure it would be popular.
06:29:11 <rep> hehe
06:29:33 <xerox> We should hack on hIDE!
06:30:06 <rep> and then use hIDE to write this game.
06:30:13 <xerox> Right on.
06:30:56 <shapr> Yeah!
06:31:19 <goron> First it should be possible to get hIde via darcs.
06:31:25 <shapr> You can?
06:31:28 <xerox> It is!
06:31:30 <goron> I can't.
06:31:35 <xerox> Why so?
06:31:35 <shapr> What's the problem?
06:31:36 <goron> darcs crashes.
06:31:39 <xerox> Urgh.
06:31:49 <goron> It uses 90% CPU for >30 minutes.
06:31:56 <xerox> It works smoothly here
06:31:58 <goron> And then I killed it.
06:32:04 <goron> So, it doesn't really crash.
06:32:06 <GeoBesh> Sorry, which version of darcs?
06:32:09 <goron> It just doesn't work.
06:32:15 <goron> One moment I will try again.
06:33:31 <shapr> GeoBesh: for what?
06:34:10 <goron> Oh, no it was while darcs pull -a in the yi dir.
06:34:14 <GeoBesh> I was curious about which version of darcs crashed -- or hung
06:34:22 <goron> 1.0.3 (release)
06:34:29 <shapr> goron: reget the whole repo, see if that works better.
06:35:54 <Cale> shapr: I had an idea for an RTS game a while back
06:36:01 <shapr> tell me!
06:36:07 <shapr> I have some ideas too.
06:36:32 <Cale> The basic idea is that rather than controlling individual units, you control the properties of a blob which spreads out over ground
06:37:23 <Cale> It doesn't just spread though, you can direct it, and set up flows
06:39:10 <Cale> and when it smashes into enemy blob, it annihilates it
06:39:23 <goron> shapr: Why does your yi repo only contain 34 patches, while dons's has more?
06:39:27 <Cale> (proportional to velocity, I suppose, in order to keep things interesting) :)
06:39:52 <shapr> Because there are two yi repos now. One is for the old ncurses yi, and one is for the yi that's being integrated into hIDE.
06:40:02 <shapr> The scannedinavian.org repo is the hIDE repo.
06:40:24 <goron> Ah, yes, with darcs everything is a fork.
06:40:47 <shapr> Cale: This sounds cool, use something like feng shui to setup currents and flows that allow your blob to spread and grow.
06:40:54 <Cale> :)
06:40:56 <Cale> yeah
06:41:02 <Cale> shapr: have you ever played xbattle?
06:41:05 <goron> One other thing: how can I build hIde? Should I chmod +x build.sh?
06:41:07 <shapr> nope
06:41:14 <Cale> it's sort of a discretised version of what I'm thinking of
06:41:21 <shapr> goron: I think autoreconf && ./configure && make
06:41:56 <Maddas> Cale: Heh :-)
06:42:09 <goron> shapr: Well, it's not that.
06:42:34 <shapr> Cale: The more I think about it, the more I like it. Terrain would affect your spread, sounds vaguely related to simulated annealing as well.
06:42:44 <Cale> something like a cross between xbattle, liquid war, and inspired somewhat by go, where you only have one kind of piece, but it's how you use it that matters :)
06:43:19 <Cale> rather than lots of different units which have to be balanced against each other
06:43:23 <goron> xerox: How can I build hIDE?
06:43:34 <shapr> heippa hei sieni
06:44:22 <Cale> ow, my hdd just clicked twice, fairly loudly
06:44:37 <shapr> time to check dmesg
06:44:59 <Maddas> Cale: Mine does that a couple of times in a row every other week, I'm always worried but have no idea whether it means anything :)
06:45:05 <Maddas> But then again, this is a laptop.
06:45:34 <arguile> If I hear a click it's immediate backups and a new drive
06:45:40 <xerox> goron: sh build.sh
06:45:58 <arguile> The 'Click of Death' is to be feared by the righteous ;)
06:46:02 <Cale> I think it's the heads resetting to the side and coming back onto the disc
06:46:16 <xerox> I get some errors at runtime, mmmh.
06:46:37 <Cale> arguile: I fixed the iomega click of death with nothing but a flathead screwdriver :)
06:46:48 <Cale> and not for screws :)
06:46:53 <xerox> Could not find module `Hide.SystemEnv':
06:46:53 <xerox>   use -v to see a list of the files searched for((26,7),(26,21))
06:47:09 <Cale> (if you recall that)
06:47:25 <goron> *** Exception: Line 9: Unknown field 'hs-source-dirs'
06:47:25 <goron> ********************
06:47:26 <goron> setup configure failed for plugins/baseApp
06:47:55 <xerox> goron: it's not meant to be simply compilable atm, anyway.
06:48:31 <goron> xerox: It's not? I would say that developers would like to have a quick start.
06:48:41 <arguile> Cale: Without releasing the magic black smoke? Impressive. I fix it by swapping my drive w/ one in one of the co-op's computers ;)
06:48:49 <xerox> OK cool, CommonSense works :D
06:49:22 <shapr> goron: Ah, you need to upgrade cabal to 1.1.4, or rename it to hs-source-dir (I think)
06:49:25 <xerox> goron: okay.  It has many dependencies, and you have to elide yiBase from the plugins list in the build.sh file
06:49:28 <Cale> arguile: the head smacks up against the side and sticks a bit, you can just nudge it with the screwdriver and it will come loose and the drive will work again.
06:49:40 <Cale> (for a while)
06:49:44 <xerox> Right shapr.
06:49:55 <arguile> Cale: I'm taking it this is the old ZIP stuff?
06:49:58 <Cale> yeah
06:50:09 <Cale> was quite a long time ago :)
06:53:08 <goron> shapr: and cabal is part of ghc?
06:53:33 <goron> shapr: Or is it a separate package?
06:55:02 <int-e> goron: yes. there's a cabal in ghc but it's outdated so you need (for all I know) the separate package.
06:58:10 <Cale> whoa is new-yi ever easy to crash
06:58:14 <xerox> Who is actually working on hIDE?  dons, dcoutts_, ... ?
06:58:50 <Cale> the secret cabal
06:59:05 <Cale> (which of course, doesn't exist)
06:59:21 <int-e> the haskell underground?
06:59:27 <goron> Hmm, on second thought, please ping me whenever I can compile it with one command.
06:59:46 <JKnecht> n00b Q: If H98 is stable conserved defined base, but lots of needed stuff is in the extensions, how does that work? Just does my implicit community interaction or is there some post 98 definition that packages like cabal can conform to?
07:00:02 <JKnecht> s/my/by/
07:00:05 <Cale> GHC
07:00:25 <int-e> @fact hsu
07:00:26 <lambdabot> hsu: I know nothing about Haskell Secret Underground..
07:00:46 <goron> int-e: It's secret, ofcourse he doesn't know about it.
07:00:46 <Cale> JKnecht: there's talk of a new standard because most programs use extensions
07:01:05 <Cale> I like how it knows what it stands for :)
07:01:31 <JKnecht> does something defined the defacto consensus set of extensions like GHC?
07:02:19 <goron> JKnecht: Not that I know of.
07:02:37 <JKnecht> got it.
07:03:39 <Cale> Basically, some large subset of the extensions that one gets by -fglasgow-exts are considered fairly standard
07:04:19 <JKnecht> Makes sense as Glasgow seems to be to Haskell as Edinburgh is to Prolog.
07:04:20 <Igloo> The intersection of features ghc and hugs support are the best thing there is to "standard" extensions, I think
07:04:21 <Cale> the GHC documentation has a list of extensions along with descriptions
07:07:07 <JKnecht> Would be great if there were nice relations such as Hugs being written entirely in Haskell so anything in it could be compiled in GHC.
07:12:40 <ndm> JKnecht: there are massive advantages in having different haskell compilers in different lagnauges
07:12:48 <ndm> its the only way to have a standard
07:15:31 * shapr bounces cheerfully.
07:15:44 <Cale> Building hide-HaskellSense-0.1...
07:15:44 <Cale> ghc-6.4: Error: module 'Generics' is exposed by package ghc-api-0.2 and package lang-1.0
07:15:52 <Cale> this seems to be cropping up again
07:16:05 <Cale> though ghc-api is hidden
07:16:49 <xerox> Cale: did you delete lang from the .cabal ?
07:17:12 <Cale> which .cabal?
07:17:21 <Cale> I deleted it from one of the .cabals
07:17:41 <Cale> (though I forget which, it was yesterday, and I was tired, as I am now :)
07:17:56 <Cale> the current .cabal doesn't mention lang
07:18:27 <xerox> ghc-api
07:19:14 <Cale> Build-depends: template-haskell, readline, unix, Cabal, base, haskell98
07:19:22 <Cale> GHC-Options: -fglasgow-exts -DGHCI -DUSE_READLINE -ignore-package lang -v0
07:19:34 <Cale> should I get rid of the ignore?
07:19:52 <xerox> No wait..
07:20:13 <xerox> The 'util' is to remove in Cabal.cabal.
07:20:39 <xerox> 'The ignore is there for a reason' said duncan.
07:21:13 <Cale> there's no dependency on util in my Cabal.cabal
07:21:22 <Cale> though there's a comment saying that it is
07:21:28 <Cale> Build-Depends: base
07:21:51 <xerox> That's correct
07:25:21 * joelr waves
07:25:25 <Cale> hello
07:25:28 * shapr particles
07:25:32 <Cale> heh
07:25:32 <joelr> folks, is zlib built into ghc these days/
07:25:39 <joelr> hi shapr ! hi cale
07:26:29 <goron> Bad translations from English to Dutch are pretty damn funny.
07:26:44 <shapr> like what?
07:27:02 <goron> Table of contents=Inhoudstafel
07:27:21 <goron> shapr: Do you understand the Dutch?
07:27:37 <cjb> goron: No, they're all crazy.
07:27:38 <joelr> anyone?
07:27:50 <shapr> @google zlib haskell
07:27:51 <lambdabot> http://www.haskell.org/hdirect/user-4.html
07:28:12 <joelr> shapr: yes, it refers to examples directory but i find none
07:28:14 <joelr> somehow
07:28:20 <joelr> strange
07:28:48 <Cale> joelr: MissingH has GZip decompression: http://quux.org/devel/missingh/html/MissingH-FileArchive-GZip.html
07:29:16 <joelr> Cale: is zlib ghc? someone is compressing binary data with zlib's compress on windows, will i be able to deflate the data?
07:30:57 <joelr> Cale: i meant whether zlib and gzip are the same thing
07:31:27 <Cale> I was fairly sure they're related :)
07:32:37 <joelr> ok then
07:33:06 <Cale> they're at the very least written by the same guy
07:33:36 <Cale> I thought they used the same algorithm, but it's not clear from the pages I'm looking at
07:34:23 <joelr> ok, thanks cale
07:41:52 <musasabi> The new release of network-alt has support for networkin on Windows (although it is not optimized there).
07:44:07 <Cale> xerox: Adding -ignore-package lang to the GHC options in the cabal file for the package I'm building seems to fix it.
07:46:42 <Cale> hmm
07:46:44 <Cale> no
07:48:46 <xerox> Cale: which was that?
07:49:02 <xerox> Lemmih: ping
07:49:08 <Cale> hide-HaskellSense
07:49:37 <Cale> but now it's gone back to the mode where it always complains about the conflict
07:50:08 <Cale> perhaps I should try rebuilding ghc-api
07:50:08 <xerox> About what?
07:50:14 <xerox> Ah.
07:50:26 <shapr> I think JaffaCake talked about this problem recently.
07:50:38 <shapr> It has something to do with libraries being exposed twice...
07:50:51 <Cale> yeah
07:51:14 <Cale> and even if I explicitly "ghc-pkg hide ghc-api" it doesn't help
07:51:47 <Cale> Is the Generics that ghc-api exposes the same as the one that lang exposes?
07:53:59 <shapr> I think JaffaCake said that if two exposed libs import the same module, it'll cause problems.
07:55:16 <xerox> Yep, GHC throws an exception instead of printing the error message.
07:58:17 <xerox> It should be a docs/ or just a TODO/WHISHLIST file for hIDE
07:58:23 <xerox> s/It/There/
07:58:43 <shapr> As soon as I get Trac setup...
07:59:14 <xerox> I'd like to know what's to do, so I could try, if I can do it - a-la pugs!
08:02:13 <shapr> I need to figure out the login stuff for Trac. How do I let anonymous view and logins modify? hmmm.
08:05:01 <xerox> shapr: it seems to exists the support channel #trac !
08:05:03 <Wi> @eval 1+2
08:05:04 <lambdabot> 3
08:08:41 <shapr> privet Wi
08:09:05 <xerox> :-\
08:09:12 <glguy> how do I ask lambdabot the point-free form of something?
08:09:17 <shapr> use the @pl command
08:09:23 <shapr> You can also talk to lambdabot privately if you want.
08:09:37 <genneth> it's even dirtier than it sounds
08:09:40 <shapr> xerox: Yeah, but it's just apache auth, I think.
08:09:55 <genneth> back when it would make cow noises, i would just get no work done
08:10:04 <xerox> Oh-kay..
08:10:50 <Cale> okay, hiding all the hide packages is good
08:11:13 <Cale> the script that builds them really should do that :)
08:11:29 <xerox> Cale: I found that it installed them in the local path (~), was the same for you?
08:11:38 <Cale> yeah, I fixed that :)
08:11:49 <xerox> I think it's ok.
08:12:08 <Cale> src/Hide/Yi.hs:25:37: Module `Yi.Window' does not export `newWindow'
08:12:12 <Cale> someone had this problem
08:12:19 <Cale> what was the solution?
08:12:23 <xerox> Yep, elide 'baseYi' or 'yiBase' from build.sh
08:12:30 <paolino> is it different (a -> [a1]) -> [a] -> [a1] from (a -> [b]) -> [a] -> [b] ?
08:12:39 <xerox> paolino: nope.
08:12:45 <Cale> xerox: ah, just don't build that plugin at all?
08:12:46 * dcoutts_ notices that poor unsuspecting people are trying to build hIDE again
08:12:57 <xerox> Cale: yea, dons said so, as now.
08:12:58 <Cale> dcoutts: :)
08:13:05 <paolino> how :t respond one or the other ?
08:13:24 <dcoutts_> xerox, yes the plugins need to be registered. That's what the build.sh script does.
08:13:42 <Cale> paolino: I wouldn't worry about it :)
08:13:46 <xerox> dcoutts_: there is a nasty behavior going on..
08:14:01 <dcoutts_> oh yeah?
08:14:05 <Cale> although I'd personally prefer if it tried harder to use letters
08:14:18 <dcoutts_> xerox, there are probably still lots of bugs
08:14:19 <paolino> cm' f=foldr (\a b -> f a ++ b) []
08:14:20 <Cale> dcoutts_: shouldn't it hide the packages as it builds them?
08:14:31 <xerox> dcoutts_: okay, no bugreports as now?
08:14:32 <dcoutts_> Cale, no they need to be registered
08:14:37 <Cale> I run into problems with Generics
08:14:44 <paolino> the exercise is to rewrite concatMap
08:14:49 <dcoutts_> xerox, s'ok you can tell us what the problem is
08:15:00 <Cale> (even with hiding ghc-api as you mentioned)
08:15:15 <paolino> how I assert the result cm' == concatMap ?
08:16:01 <xerox> dcoutts_: let's say I have a project where some module imports another, in the project's hierarchy of modules itself.  CommonSense does not find the imported module and stops checking the module's correctness, underlining the import.
08:16:03 <Cale> paolino: You want a proof?
08:16:22 <paolino> yes
08:16:26 <xerox> QuickCheck?
08:16:48 <Cale> Well, QC isn't quite a proof, though it's a good way to actually check things :)
08:16:56 <dcoutts_> xerox, yep, it does not handle imports correctly yet. Talk to Lemmih
08:17:26 <xerox> dcoutts_: apart from it, it's very, very, very, very nice.
08:17:46 <dcoutts_> xerox, so which bit do you want to hack on? :-)
08:18:07 <xerox> I'd love to make it usable :-D
08:18:08 <ValarQ> dcoutts_: yay, it works now :)
08:18:36 <ValarQ> dcoutts_: is that fancy cairodemo app out in the wild yet?
08:20:16 <dcoutts_> ValarQ, which fancy demo?
08:20:41 <xerox> dcoutts_: implement 'new' 'open' 'save' ?
08:20:46 <dcoutts_> xerox, well there's some need for someone who can code cairo stuff :-)
08:20:54 <xerox> Woot, tell me :-D
08:20:57 <ValarQ> dcoutts_: http://haskell.org/gtk2hs/archives/category/cairo/
08:21:07 <ValarQ> dcoutts_: that one
08:21:12 <dcoutts_> ValarQ, oh that, ask xerox
08:21:26 <xerox> @where nymphaea
08:21:27 <lambdabot> http://haskell.galois.com/~paolo/nymphaea
08:21:33 <Cale> Base case: foldr (\a b -> f a ++ b) [] [] = [] which works as desired.
08:21:37 <dcoutts_> xerox, well I was thinking it'd be really nice to have a module graph as a browser view
08:21:40 <xerox> Try it, it's absolutely amusing!  <chuckle>
08:22:01 <dcoutts_> xerox, you see at the moment the tree view browser view tabs on the left hand side of the main window
08:22:15 <xerox> Yes.
08:22:22 <dcoutts_> well it'd be nice to have one that is a module dependency graph
08:22:40 <dcoutts_> and you could scroll about and select nodes(modules)
08:22:44 <xerox> What kind of graph view are you thinking of?
08:22:50 <Cale> Inductive case: Suppose that the identity cm' = concatMap holds for all lists of length k < n, and let (x:xs) be a list of length n+1. Then foldr (\a b -> f a ++ b) [] (x:xs) = f x ++ ((foldr (\a b -> f a ++ b)) [] xs) = f x ++ concatMap f xs = f x ++ concat (map f xs) = concat (f x : map f xs) = concat (map f (x:xs)) = concatMap f (x:xs)
08:23:11 <ValarQ> hmm, i got some problem here
08:23:11 * xerox checks Cale's blood pressure
08:23:11 <dcoutts_> it use graphviz to do the actual graph layout, but then cairo to do the rednering/zooming/panning highliting etc
08:23:31 <Cale> xerox: heh
08:23:32 <xerox> dcoutts_: should it stay in the left "vertical pane" ?
08:23:37 <ValarQ> dcoutts_: Drawing.hs:12:10: Not in scope: `cairoCreateContext'
08:23:37 <dcoutts_> xerox, yes
08:23:44 <xerox> Woot?
08:24:11 <Cale> Woot.
08:24:15 <dcoutts_> ValarQ, which demo are you cimpiling there?
08:24:21 <ValarQ> dcoutts_: seems the gtk/cairo demos don't work
08:24:28 <ValarQ> dcoutts_: Drawing.hs
08:25:00 <ValarQ> dcoutts_: the programs that just outputs a .png works fine
08:25:08 * Cale laughs preemptively at things before reading them. Sleep deprivation takes its toll.
08:25:19 * Cale sips coffee.
08:25:43 <Cale> paolino: does that proof work for you?
08:26:14 <Cale> I suppose it doesn't quite apply to infinite lists unless you want to use ordinals and transfinite induction.
08:26:16 <dcoutts_> ValarQ, are you using the latest darcs version of Gtk2Hs ?
08:26:37 <xerox> dcoutts_: I think I need a sketch of how it should look like :-D
08:26:38 <Cale> (but the proof would have the same structure for that)
08:26:43 <dcoutts_> ValarQ, that cairoCreateContext was added only a day or so ago
08:26:45 <ValarQ> dcoutts_: i updated it this morning, as you told me to
08:26:52 <dcoutts_> ValarQ, hmm, odd
08:28:07 <ValarQ> dcoutts_: how can i trace the error?
08:28:13 <paolino> Cale more than enough :)
08:28:23 <xerox> dcoutts_: why was it added?
08:28:32 <dcoutts_> xerox, it's a pango thing
08:28:33 <ValarQ> dcoutts_: there must be some form of list of functions exported from the module somewhere
08:28:42 <xerox> ah.
08:28:48 <dcoutts_> ValarQ, and you're using Gtk+ 2.8.x ?
08:29:42 <ValarQ> dcoutts_: 2.6.8
08:29:48 <dcoutts_> ValarQ, you can get a list of the functions like so:
08:29:49 <dcoutts_> echo ':b Graphics.UI.Gtk.Cairo' | ghci
08:30:31 <dcoutts_> ValarQ, ah, it was Gtk+ 2.8 and later that have the cairo integration.
08:30:45 <Cale> dcoutts_: it gets to hide-HaskellSense, builds that, installs it, and then GHC decides to stop working (unless one of lang or ghc-api is ignored with a switch)
08:31:09 <ValarQ> dcoutts_: ok, that :b list is very empty
08:31:16 <Cale> dcoutts_: I made a few modifications to the cabal files as directed along the way
08:31:23 <ValarQ> dcoutts_: i'll install gtk+ 2.8 then
08:31:29 <dcoutts_> ValarQ, so while you can build the cairo bindings on their own if you've got cairo installed, you can't use the gtk/cairo integration unless you've got Gtk+ 2.8.x
08:31:35 <Cale> ghc-6.4: Error: module 'Generics' is exposed by package lang-1.0 and package ghc-api-0.2
08:31:54 <dcoutts_> ValarQ, right, so the gtk/cairo integration functions are not being bound because your version of Gtk+ doesn't have them.
08:32:14 <dcoutts_> Cale, hmm that's a tricky problem.
08:32:56 <dcoutts_> Cale, are you installing the hide-HaskellSense package globally or only for your user?
08:33:17 <Cale> globally -- will it not work that way?
08:33:33 <dcoutts_> Cale, well it might explain why you've had that problem and we havn't
08:33:40 <araujo> Hello!
08:33:42 <dcoutts_> Cale, the build.sh script installes them locally
08:33:46 <paolino> time to reask :how do I read "class Monad (m::* -> *) where" ? what is (m::* -> *) ?
08:34:04 <xerox> paolino: * -> * is the kind of the type
08:34:08 <Cale> m is of kind * -> *
08:34:10 <dcoutts_> Cale, but it's a good point that the ghc-api is going to cause problems like that
08:34:12 <xerox> paolino: kinds are types of types
08:34:15 <xerox> @kind Int
08:34:16 <lambdabot> *
08:34:20 <Cale> which means that it takes a type and produces a type
08:34:21 <dcoutts_> Cale, we'll have to think about it.
08:34:22 <xerox> @kind Maybe
08:34:23 <lambdabot> * -> *
08:34:28 <dcoutts_> Lemmih, opinions?
08:34:43 <Cale> dcoutts: Use hierarchy?
08:35:08 <Cale> Shouldn't all the modules in ghc-api be in some nice tree?
08:35:30 * xerox summons Lemmih
08:35:34 <Cale> it looks like there are a lot of them
08:35:55 <Cale> what is the purpose of package lang anyway?
08:35:55 <dcoutts_> Cale, yeah they should
08:36:00 <dcoutts_> @seen JaffaCake
08:36:01 <lambdabot> I saw JaffaCake leaving #haskell 10 days, 23 hours, 25 minutes and
08:36:01 <lambdabot> 32 seconds ago, and I have missed 8 days, 21 hours, 58 minutes and
08:36:01 <lambdabot> 44 seconds since then.
08:36:21 <Cale> just to get in the way by exporting things which are already in the hierarchy at the base level?
08:36:28 <Cale> :)
08:36:44 <paolino> caan I have some more examples of kinds (without the *?) ?
08:36:56 <Cale> paolino: read * as "Type"
08:36:56 <dcoutts_> Cale, package lang is being phased out. Nothing should use it. ghc-api doesn't use it.
08:37:00 <xerox> @kind Char
08:37:05 <lambdabot> *
08:37:06 <xerox> @kind []
08:37:07 <lambdabot> * -> *
08:37:12 <xerox> @kind Arrow
08:37:14 <lambdabot> bzzt
08:37:18 <xerox> @kind Control.Arrow.Arrow
08:37:18 <dcoutts_> @kind (->)
08:37:19 <lambdabot> bzzt
08:37:19 <lambdabot> ?? -> ? -> *
08:37:20 <Cale> dcoutts_: how bad would it be to unregister it?
08:37:32 <dcoutts_> Cale, well then HaskellSense would not work
08:37:40 <Cale> argh
08:37:44 <Cale> heh
08:37:49 <dcoutts_> Cale, but you can load as many or as few plugins as you like when you start hIDE
08:38:00 <Cale> I mean lang
08:38:07 <paolino> xerox how I read last one ?
08:38:23 <Cale> does HaskellSense use lang?
08:38:32 <dcoutts_> Cale, I reccomend that you register ghc-api globally, but hidden and all the hIDE plugins locally using the ./build.sh
08:38:41 <dcoutts_> Cale, no it does not.
08:39:00 <dcoutts_> Cale, you might have builtsometing wrong by removing the -ignore-package lang thing
08:39:02 <Cale> my question was how bad it would be to unregister lang
08:39:05 <Philippa> dcoutts_: I PMed you a quickie feature request, did it arrive? ('snothing overly serious)
08:39:11 <xerox> paolino: (->) :: ?? -> ? -> *  means it gets two types and returns a type.  The kind of those two types are some GHC-specific thing, treat them as '*'.
08:39:17 <dcoutts_> Cale, Philippa yep
08:39:40 <dcoutts_> Philippa, oh but you couldn't see my replies since this alias is not registered
08:39:51 <dcoutts_> I said:
08:39:52 <dcoutts_> add it here: http://www.haskell.org/hawiki/hIDE_2fDesign
08:40:00 <dcoutts_> "Desirable Plugins" section
08:40:04 <dcoutts_> what we need to make sure is that it is possible and easy for someone to write such a plugin
08:40:27 <paolino> xerpx -> is the lambda operator ?
08:40:28 <dcoutts_> Philippa, I guess the idea of that feature is so you can extend the syntax (sort of)
08:40:32 <Cale> sorry for being generally confused, I didn't get much sleep :)
08:40:52 <dcoutts_> Cale, nothing should be using lang, it's a bug if it is
08:40:54 <xerox> paolino: (->) is the functions data constructor
08:41:16 <xerox> Err, type constructor.
08:41:20 <Cale> dcoutts_: so if I unregister package lang, the universe won't generally come to an end?
08:41:24 <paolino> nientedimenoche?
08:41:55 <dcoutts_> Cale, I wouldn't reccomend it.
08:42:00 <Cale> okay
08:42:05 <dcoutts_> Cale, it;d be better to build ghc-api without hacking it
08:42:16 <dcoutts_> Cale, and make sure Cabal does not depend on util
08:42:28 <xerox> paolino: check the query
08:42:29 <dcoutts_> ghc-pkg field Cabal depends
08:42:45 <dcoutts_> Cale, what does that give for you?
08:42:48 <Cale> depends: base-1.0
08:42:51 <dcoutts_> ok good
08:42:55 <Cale> I edited the .cabal for that
08:43:07 <Cale> iirc
08:44:07 <xerox> Yep.
08:44:47 <dcoutts_> xerox, did you want to try cairo on win32?
08:45:20 <xerox> I indeed want to
08:45:46 <xerox> On other thoughs: I was wondering if one could make use of CommonSense in standalone Yi, is it possible?
08:45:50 <dcoutts_> xerox, you'll need the gtk+ 2.8 installer from gladewin32.sf.net
08:45:56 <dcoutts_> xerox, probabbly possible
08:46:02 <Cale> for whoever maintains ghc-pkg, a minor feature request: allow multiple package arguments
08:46:13 <dcoutts_> xerox, but we're not aiming for that at the moment
08:46:18 <xerox> Okay.
08:46:42 <Cale> hrm
08:46:50 <dcoutts_> xerox, and to build gtk2hs from source you'll need mingw and msys
08:47:01 <dcoutts_> xerox, and ghc obviously
08:47:04 <Cale> I'm having the same problem installing them locally
08:47:14 <Cale> and ghc-api is hidden
08:47:18 <dcoutts_> Cale, what does it say exactly?
08:47:25 <Cale> ghc-6.4: Error: module 'Generics' is exposed by package lang-1.0 and package ghc-api-0.2
08:47:32 <dcoutts_> when doing what?
08:47:37 <Cale> setup configure failed for plugins/baseApp
08:47:46 <xerox> dcoutts_: your build isn't usable?
08:47:50 <Cale> oh
08:47:55 <Cale> sorry
08:48:01 <Cale> not then
08:48:02 <dcoutts_> xerox, I've not got an installer built yet. i'm working on it.
08:48:09 <xerox> Okay.
08:48:21 <xerox> Let's hack some hIDE, I could wait more for the installer :-D
08:48:28 <dcoutts_> xerox, I'm just installing ghc-6.4.1
08:48:35 <xerox> You rock.
08:48:38 <Cale> let me just do it over :)
08:48:42 <dcoutts_> xerox, I got it to all build with ghc-6.2.2 and ghc-6.4
08:48:52 <Cale> Registering hide-HaskellSense-0.1...
08:48:53 <Cale> Reading package info from ".installed-pkg-config" done.
08:48:53 <Cale> Saving old package config file... done.
08:48:53 <Cale> Writing new package config file... done.
08:48:53 <Cale> ghc-6.4: Error: module 'Generics' is exposed by package lang-1.0 and package ghc-api-0.2
08:48:53 <xerox> You deserve a hug! :-D
08:48:53 <Cale> ********************
08:48:57 <Cale> setup configure failed for plugins/ideShell
08:49:13 <xerox> So a plugin should implement a main function, and it's done?
08:49:25 <dcoutts_> xerox, a dynamic_main
08:49:29 <xerox> Ah.
08:49:40 <xerox> plugin_main ?
08:49:48 <dcoutts_> xerox, and that module with the dynamic_main probably needs to be listed first in the exposed-modules section of the .cabal file
08:49:59 <xerox> hehe, I think I'm looking at the only static part, woo :)
08:50:12 <dcoutts_> xerox, take a look at one of the other plugins, eg the htmlviewer plugin (it's nice and short)
08:50:23 <Cale> dcoutts_: actually, that's slightly inaccurate, as I needed to add -ignore-package lang to even get HaskellSense to build, hmm... so it might be with the previous thing.
08:50:36 <Cale> (just remembered that I added that)
08:50:44 * xerox admits he's using Yi to view .hs since yesterday, when he succeeded in building it.
08:50:56 <Cale> that's commonSense
08:51:05 <Cale> Build-depends:  base, haskell98, glib, gtk, mtl, fps
08:51:08 <xerox> If only could I open/save/close files! :-D
08:51:16 <dcoutts_> xerox, yay
08:51:30 <xerox> The colorful and cool-looking gtk viewer is addictive.
08:51:35 <dcoutts_> xerox, ah but if you could save files then you'd hate us if we every lost any of your work :-)
08:51:52 <xerox> ...and do backups :-D
08:52:09 <Cale> I ran the new yi, and it was cool looking, but it crashed after a few characters of input
08:52:55 <xerox> It crashes inputting unicode, but okay :-D
08:52:58 <Cale> whoa, infinite loop error
08:53:02 <Cale> message
08:53:33 <Cale> no, these are ordinary chars
08:53:42 <Cale> well, I suppose my locale is UTF-8
08:54:12 <xerox> Doesn't crash now... dunno :-D
08:54:29 <dcoutts_> Cale, there must be something wrong with your setyp, you should not need to add -ignore-package lang anywhere
08:54:30 <xerox> At least C-x C-c works, so it feels like Emacs ;-)
08:54:37 <Cale> dcoutts_: hrm
08:55:03 <dcoutts_> Cale, I wonder if it might be easier to start again and do it step by step
08:55:29 <dcoutts_> Cale, btw what ghc version?
08:55:53 <Cale> 6.4
08:56:32 <Cale> xerox: and I can type kanji into yi "just fine", apart from not being able to move the cursor through some of the characters
08:56:42 <xerox> dcoutts_: what about the hardcoded path in htmlViewer?
08:56:46 <Cale> it eventually crashes if I type enough of anything though
08:57:14 <xerox> Cale: yeah, it works.  It crashed before, and I think it acts suspiciously in some situations.
08:57:34 <dcoutts_> xerox, change it if you need to.
08:57:37 <xerox> dcoutts_: what is it exactly?
08:57:44 <xerox> I.e. where should it point to?
08:57:46 <dcoutts_> Cale, hmm I'd try 6.4.1 if I were you.
08:57:56 <dcoutts_> xerox, it should point to the mozilla libs
08:58:00 <joelr> does someone have pre-built fps for windows?
08:58:10 <dcoutts_> or the firefox libs if you built mozembed for firefox
08:58:22 <dcoutts_> xerox, it should do it automatically. But it doesn't yet.
08:59:27 <dcoutts_> xerox, you can report your yi crashes to dons, or if it chashes when not using the yi plugin then report them to Lemmih
09:00:25 <xerox> dcoutts_: I was talking about standalone Yi before
09:00:54 <dcoutts_> xerox, oh ok
09:01:13 <dcoutts_> xerox, dons found some bugs recently and fixed them
09:01:30 <xerox> So how to use the htmlViewer?
09:01:32 <musasabi> joelr: Have you tried using "ghc --make -package Cabal Setup.lhs -o setup" and then use "setup" ? That avoids the "runghc Setup.lhs build" bug in a few instances.
09:01:50 <dcoutts_> xerox, just load it when you start hIDE
09:01:56 <joelr> musasabi: let me try that
09:02:06 <dcoutts_> xerox, the hide command line takes the list of plugins to load
09:02:34 <dcoutts_> xerox, at the moment, just for demo purposes, the hml viewer installes itself as an editor, just so you can see it working.
09:03:12 <joelr> musasabi: are you on windows?
09:03:26 <joelr> i downloaded binary happy, alex, etc. and wonder where these should be placed
09:03:58 <Cale> vx.hn.org/autoshare/yi-kanji.png
09:04:48 <xerox> haha, what does it mean?
09:05:02 <Cale> data GoStone = Black | White
09:05:11 <Cale> data GoBoard = ...
09:05:17 <joelr> does anyone know how to actually install happy, alex, etc. on windows/
09:05:18 * xerox laughs
09:05:31 <musasabi> joelr: I have a VNC connection to a remote windows machine, but I don't really understand Windows very well.
09:05:33 <ValarQ> Cale: ?!?
09:05:52 <joelr> before anyone disses me, happy comes with a bunch of files apart from the exe ;)
09:06:00 <dcoutts_> @seen dbhelix
09:06:00 <lambdabot> I haven't seen dbhelix.
09:06:05 <Maddas> Cale: How do you enforce uppercase typenames in Japanese? :-)
09:06:06 * xerox mumbles
09:06:07 <Cale> ValarQ: !?!
09:06:15 <dcoutts_> @seen dblhelix
09:06:15 <lambdabot> I saw dblhelix leaving #haskell-blah and #haskell 1 hour, 54 minutes
09:06:15 <lambdabot> and 37 seconds ago.
09:06:17 <xerox> Cale: you should try it in hIDE, with CommonSense enabled :D
09:06:17 <Cale> Maddas: heh
09:06:36 <Cale> xerox: I don't think GHC supports unicode properly
09:06:43 <xerox> dcoutts_: Error loading plugins: unknown package: hide-html-viewer-0.1.0  What do I do wrong?
09:06:48 <ValarQ> Cale: can haskell handle such characters?
09:06:57 <Cale> ValarQ: It's supposed to
09:07:06 <Cale> but GHC doesn't implement it, I don't think
09:07:29 <dcoutts_> xerox, is hide-html-viewer-0.1.0 registered?
09:07:37 <xerox> dcoutts_: I see it in ghc-pkg list
09:07:43 <ValarQ> Cale: ok :/
09:07:48 <Cale> As for the uppercase type names, you could either not worry about it, or insist on katakana
09:08:26 <xerox>     hide-base-0.1.0, hide-CommonSense-0.1, hide-HaskellSense-0.1,
09:08:26 <xerox>     hide-shell-0.1.0, hide-html-viewer-0.1.0
09:08:29 <glguy> So... I want to write a Othello (Reversi) move generator, need to represent an 8x8 board (maybe 10x10 if I'm going to add a border) what type would be the best to contain such a thing
09:08:46 <xerox> glguy: I'd suggest an Array.
09:08:51 <tromp> Word64
09:08:52 <Cale> glguy: Probably a diff array
09:09:07 <xerox> Cale: I don't get the point of the diff array
09:09:12 <tromp> 8x8 screams for bitboards
09:09:19 <Cale> xerox: you're going to be changing it
09:09:31 <Cale> It's not quite necessary, but it's an easy change
09:09:35 <xerox> Yes but... can't you do it functionally?
09:09:36 <dcoutts_> tromp is probably right here
09:09:46 <Cale> xerox: that's what Diff arrays give you
09:09:51 <xerox> Cale: uhm.
09:09:57 <xerox> @docs Array.Diff
09:09:57 <dcoutts_> UArray (Int, Int) Bool is actually an array of bits
09:09:58 <lambdabot> Array.Diff not available
09:10:08 <dcoutts_> @docs Data.Array.Diff
09:10:08 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.Diff.html
09:10:40 <Cale> you can forget about the stuff there and just use DiffArray like you would Array
09:10:51 <Cale> It follows the IArray interface
09:11:01 * dcoutts_ quite likes tromp's Word64 idea
09:11:03 <Maddas> Cale: Why do diff arrays require the IO monad?
09:11:08 <Cale> they don't
09:11:12 <Maddas> Oh
09:11:16 <sethk> dons, I'm just went back to building yi.  I downloaded hs-plugins and built it.  I did configure and make in hs-plugins.  then I tried "make install" which appears to not do anything other than create an empty file.  what is the step to make hs-plugins visible to the compiler when building yi?
09:11:18 <dcoutts_> that's the point of them
09:11:19 * Maddas misread in that case
09:11:24 <Cale> they only require it if you're doing low level stuff
09:11:34 <Cale> like implementing new unboxed instances
09:11:38 <Maddas> Ok
09:11:51 * Maddas should look at them later on
09:12:18 <Cale> they give you O(1) functional update, O(1) indexing
09:12:20 <dcoutts_> xerox, I've seen that before, but can't remember what it might be
09:12:31 <Maddas> Cale: Right, that's what I assumed
09:12:36 <mflux_> but what about the constant factor?
09:12:37 <Cale> the only trick is that if you access older versions, it gets slower
09:13:01 <Cale> mflux_: not any worse than anything else, afaict
09:13:08 <dcoutts_> mflux_, the constant factor is not very good I think
09:13:19 <dcoutts_> there is more bookkeeping
09:13:51 * xerox mumbles more
09:13:56 <Cale> Surely better than allocating a new 8x8 array every time
09:15:02 <glguy> Do i declare a diffarray explicitly... or convert another MArray into a diff array
09:15:22 <glguy> ah, newDiffArray
09:15:27 <Cale> no
09:15:30 <Cale> don't use that :)
09:15:32 <glguy> nope
09:15:34 <Cale> you just use the functions in IArray
09:15:35 <glguy> don't
09:15:44 <glguy> alrighty..
09:15:54 <Cale> The only difference from Array is that you type DiffArray in the types
09:16:21 <xerox> Only that?
09:16:21 <Cale> in fact, you could generalise your whole program over the type of the array you're using and try switching it later :)
09:16:24 <Cale> yes
09:16:34 <xerox> type Board = .. -- :-)
09:16:44 <Cale> right
09:17:35 <xerox> I didn't know the type of (//), now the whole thing makes sense.
09:17:54 <xerox> I should finish the life game, and try the DiffArray :D
09:18:15 <Cale> :)
09:22:47 <xerox> yawn..
09:22:48 <Cale> I think the DiffArray documentation should point out a bit more clearly that these are a drop-in replacement for the Array type.
09:22:56 * xerox too
09:27:15 <dcoutts_> Cale, as tromp pointed out, you can fit an 8x8 board in a couple 64 bit words. That's pretty cheap to allocate.
09:27:57 <Cale> dcoutts_: It's somewhat inconvenient to actually use though.
09:28:34 <tomaszz> dcoutts_: if you have only 1 bit of information per field
09:28:57 <Cale> he said a couple
09:29:09 <Cale> you have 1.5 bits per field
09:29:13 <tomaszz> dcoutts_: I missed that :-)
09:29:32 <Julianus> @seen julian
09:29:33 <lambdabot> I saw julian leaving #haskell 11 hours, 36 minutes and 46 seconds
09:29:33 <lambdabot> ago.
09:29:50 <Julianus> bye guys
09:30:02 <Cale> Julianus: later
09:30:07 <Julianus> i'm going to the school
09:30:14 <Julianus> ;)
09:30:19 <Julianus> c u soon
09:30:26 <dcoutts_> Cale, one can use a UArray (Int, Int) Bool. It's implemented as a bitset.
09:30:46 <dcoutts_> so it's very small and cheap to allocate.
09:31:03 <tomaszz> Cale: isn't it more like 1.58 ;-)
09:31:10 <Cale> dcoutts_: that's true
09:31:16 <Cale> tomaszz: heh :)
09:33:27 <Cale> actually probably something like 1.45, you should be able to get a little compression with most actual othello boards
09:33:48 <tomaszz> Cale: yeah :)
09:33:57 <glguy> alright, so i just haven't learned to use arrays yet... recommend me a place to read about them?
09:34:18 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.IArray.html -- scroll way down
09:38:10 <Cale> Indexing an empty array always gives an array-bounds error, but bounds still yields the bounds with which the array was constructed. -- heh, I think some IOHCC program should store all of its data in this fashion
09:38:40 <Cale> oh, the previous sentence: If, in any dimension, the lower bound is greater than the upper bound, then the array is legal, but empty.
09:40:49 <goron> Cale: I fully understand why it's 1/n since this morning btw :D
09:41:04 <Cale> goron: cool
09:41:41 <glguy> what do I need to import to use DiffArray
09:41:53 <Cale> Data.Array.Diff
09:42:06 <Cale> it will bring Data.Array.IArray with it
09:42:09 <glguy> awesome... hugs is broken?
09:42:14 <Cale> oh
09:42:15 <glguy> ERROR "/opt/local/lib/hugs/libraries/Hugs/ST.hs":50 - Syntax error in type expression (unexpected `.')
09:42:51 <Cale> hehe, that'll teach me to assume that someone is running GHC
09:42:58 <glguy> i have ghc too
09:43:15 <glguy> just didn't use it
09:43:37 <Cale> GHC has more of the libraries than hugs at the moment
09:44:07 <Igloo> glguy: You need -98 for ST
09:44:17 <Cale> this isn't about ST
09:44:28 <glguy> Igloo's suggesting fixed the ERROR
09:44:33 <Cale> oh
09:44:39 <Cale> yes
09:44:40 <Cale> okay
09:45:09 <Cale> heh, I figured that it was due to Data.Array.Diff being missing without looking more carefully :)
09:46:10 <Cale> maybe their implementation of Diff arrays uses ST
09:46:26 <Cale> (or your program uses ST)
09:46:51 <Cale> I'm going to take a nap, I think
09:47:37 <Cale> sleeptil 13:46 ; xmms -p
09:47:39 * shapr boings cheerfully
09:47:40 <Cale> :)
09:47:47 <shapr> Oh good idea
09:48:26 <shapr> Where's sleeptil? is it an alias for at?
09:49:58 <Cale> It's a shell script which periodically checks if the time is equal to that.
09:50:43 <Cale> (I think every 30 seconds or so)
09:51:08 <rep> sounds like at
09:51:20 <rep> well
09:51:22 <rep> at + cron
09:51:40 <joelr> dons: ping
09:51:42 <Cale> at registers a job with cron
09:51:51 <Cale> this is much more simplistic
09:52:07 <joelr> i get this error when building fps on windows
09:52:08 <joelr> $ ./setup build
09:52:08 <joelr> Preprocessing library fps-0.1...
09:52:08 <joelr> Building fps-0.1...
09:52:08 <joelr> Chasing modules from: Data.FastPackedString
09:52:11 <joelr> Compiling Data.FastPackedString ( ./Data/FastPackedString.hs, dist\build\./Data/
09:52:14 <joelr> FastPackedString.o )
09:52:17 <joelr> ./Data/FastPackedString.hs:292:16: Parse error in pattern
09:52:22 <joelr> any ideas how to work around it? no such error on mac osx
09:53:59 <ndm> joelr: can you show us that line, and the 2 before and after it
09:54:07 <joelr> ok
09:54:18 <joelr> pack str = createPS (Prelude.length str) $ \(Ptr p) -> stToIO (go p 0# str)
09:54:18 <joelr>     where
09:54:19 <joelr>         go _ _ []        = return ()
09:54:19 <joelr>         go p i (C# c:cs) = writeByte p i c >> go p (i +# 1#) cs
09:54:19 <joelr>         writeByte p i c = ST $ \s# ->
09:54:20 <ndm> sounds like an #ifdef thats meaning certain things only become avlie on windows
09:54:21 <joelr>             case writeCharOffAddr# p i c s# of s2# -> (# s2#, () #)
09:54:34 <joelr> it's #if !defined(__GLASGOW_HASKELL__)
09:54:36 <ndm> which line is 292
09:54:50 <joelr> like 292 is the one right after the catch-all go
09:54:57 <joelr> go p i (C# c:cs) = writeByte p i c >> go p (i +# 1#) cs
09:55:17 <ndm> have you got -fglasgow-exts turned on?
09:55:24 <ndm> otherwise the # is a parse error
09:55:26 <joelr> i'm just building this
09:55:33 <joelr> i.e. ./setup build
09:55:48 <ndm> that looks like the problem, at first glance
09:55:56 <joelr> ndm: i don't think # is char 16, though
09:55:57 <joelr> is it
09:56:11 <ndm> count the spaces, remember
09:56:19 <joelr> hmmm, you are right
09:56:23 <joelr> so how do i work around this?
09:56:31 <joelr> this is stock ghc 6.4.1 on windows
09:56:36 <ndm> bug the author :)
09:56:48 <ndm> or put it at the top of the file
09:56:58 <ndm> you can put {- options -fglasgow-exts -}
09:57:07 <ndm> or something similar - i don't know the exact syntax
09:57:07 <joelr> ok
10:02:22 <musasabi> joelr: You might want to look at the fps.cabal.mmap file and copy over at least the Extensions field to the .cabal file you are using.
10:02:37 <joelr> actually, i think i just built it
10:02:48 <joelr> ndm: that line helped, no idea why the problem on windows and not on mac osx
10:02:50 <joelr> thanks
10:08:45 <ndm> joelr, no probs - make sure you send a patch to the author
10:23:51 <paolino> can't parse this error
10:23:54 <paolino> class Computation leaf where
10:23:55 <paolino>   whatyoudohere :: t -> t
10:24:11 <paolino> the error from that sorry
10:24:36 <Igloo> What are you trying to do?
10:24:51 <paolino> understand
10:25:13 <paolino> instance/class
10:25:54 <paolino> at least one argument must be of type 'leaf' ?
10:26:02 <paolino> in every function
10:29:10 <xerox> Anybody knows of a smart Time library for Haskell?
10:29:50 * pitecus just learned that Char is pronounced char and not car in English...
10:30:49 <glguy> pitecus: kind of a circular definition, eh?
10:31:16 <aqua_scummmm> anyone have time to help someone totally new to haskell?
10:31:36 <aqua_scummmm> guess not him
10:31:37 <Igloo> paolino: If leaf isn't mentioned in the type you don't know which instance you are using
10:31:55 <mauke> aqua_scummmm: depends on the problem
10:32:03 <Igloo> pitecus: It's pronounced car by more prople than it is char
10:32:15 <aqua_scummmm> i started reading the haskell tutorial for C Programmers
10:32:17 <aqua_scummmm> http://www.haskell.org/~pairwise/intro/section1.html
10:32:29 <aqua_scummmm> and tried to run the fibonnacci example
10:32:30 <pitecus> is /tʃɑɹ/ better, glguy ?
10:32:50 <glguy> pitecus: no, garbage characters are no better ;)
10:32:55 <pitecus> Igloo, thanks for restoring my sanity
10:33:07 <pitecus> glguy, no garbage IPA in UTF-8
10:33:12 <glguy> okay, so what IRC client do you guys all use that does utf-8 so well
10:33:13 <RemiTurk> good evening
10:33:17 <mauke> U+0283 (202 131): LATIN SMALL LETTER ESH [ʃ]; U+0279 (201 185): LATIN SMALL LETTER TURNED R [ɹ]
10:33:18 <paolino> what means g@(Graph a b) as an argument ?
10:33:23 <aqua_scummmm> and i am getting a error about possible not having a modulke included or incorrect indentation
10:33:23 <Igloo> It wasn't circular anyway. "char" the English word is distinct from "Char" the Haskell type  :-)
10:33:27 <pitecus> xchat meself
10:33:57 <pesco> glguy: irssi works well, if you know the right setting.
10:33:57 <xerox> paolino: name@(..) names a pattern
10:34:06 <mauke> aqua_scummmm: which fibonacci example?
10:34:11 <glguy> pesco: what is the setting
10:34:11 <aqua_scummmm> <3 xchat, unfortunatly im on colloquy right now
10:34:14 <pesco> glguy: Gaim just seems to do the right thing when your locale is set to UTF8.
10:34:22 <xerox> paolino: for example, xs@(y:ys) means xs is a list which head is y and tail is ys.
10:34:41 <pesco> glguy: utf8_terminal or something, I don't remember...
10:34:50 <paolino> is it like writing let g=Graph a b in ?
10:34:57 <aqua_scummmm> mauke:  I am entering these two lines
10:34:58 <aqua_scummmm> fibs :: [Int]
10:34:59 <aqua_scummmm> fibs = 0 : 1 : [ a + b | (a, b) <- zip fibs (tail fibs)]
10:35:09 <mauke> aqua_scummmm: where are you entering them?
10:35:11 <aqua_scummmm> in GHCI and GHC on osx
10:35:20 <mauke> you can't do that
10:35:21 <aqua_scummmm> both as command input and file input
10:35:23 <aqua_scummmm> same errors
10:35:31 <mauke> it should work in a file
10:35:31 <xerox> paolino: yes, without needing to actually do it by hand
10:35:42 <aqua_scummmm> hrm
10:35:46 <aqua_scummmm> i dont need any includes right?
10:35:54 <aqua_scummmm> because the default should cover it all
10:36:00 <aqua_scummmm> and no headers or anything?
10:36:16 <paolino> question ,can I write let Graph a b = g   in ... also ?
10:36:32 <xerox> paolino: yes, it's pattern matching again
10:36:51 <mauke> aqua_scummmm: putting the two lines in a file and running ghci tehfile.hs works here
10:37:15 <aqua_scummmm> lemme try one more time, i might have done something wrong
10:37:16 <thedward> @eval let fibs = 0 : 1 : [ a + b | (a, b) <- zip fibs (tail fibs)] in take 10 fibs
10:37:17 <pesco> glguy: /set term_charset UTF-8
10:37:19 <lambdabot> [0,1,1,2,3,5,8,13,21,34]
10:37:19 <pesco> glguy: I think.
10:37:42 <glguy> well... looks like my version of irssi doesn't have that
10:38:00 <pesco> huh
10:38:32 <glguy> MacIrssi 0.8.0
10:39:22 <pesco> glguy: Mine's 0.8.10-rc5
10:39:35 <pesco> Vanilla irssi that is.
10:40:04 <aqua_scummmm> zomg im sorry
10:40:11 <aqua_scummmm> wrong input file :(
10:40:18 <aqua_scummmm> test2.hs not test.hs
10:40:24 <aqua_scummmm> well, thanks
10:40:30 <aqua_scummmm> btw hi everyone
10:40:50 <pitecus> hi
10:40:53 <bourbaki> moin
10:41:29 <glguy> okay... what was that setting?
10:41:52 <xerox> @eval let fibs = 1 : 1 : zipWith (+) fibs (tail fibs) in take 10 fibs
10:41:53 <lambdabot> [1,1,2,3,5,8,13,21,34,55]
10:42:12 <glguy> doesn't the fib sequence begin with a 0?
10:42:42 <thedward> @eval let fibs = 0 : 1 : [ a + b | a <- fibs | b <- ( tail fibs)] in take 10 fibs
10:42:43 <lambdabot>  Illegal parallel list comprehension: use -fglasgow-exts
10:43:02 <xerox> @lambda fibonacci
10:43:02 <lambdabot> unbound variable: fibonacci
10:43:08 <xerox> @lambda fib
10:43:09 <lambdabot> unbound variable: fib
10:43:12 <xerox> @lambda fibs
10:43:15 <lambdabot> out of fuel - use @resume to continue
10:43:20 <aqua_scummmm> mauke: fibs !! is positive, as expected, fibs !! 47 is negative, is this overflow?
10:43:21 <xerox> hah
10:43:33 <mauke> aqua_scummmm: what's the type of your fibs?
10:43:40 <aqua_scummmm> int
10:43:43 <xerox> @eval let fibs = 1 : 1 : zipWith (+) fibs (tail fibs) in fibs !! 47 :: Int
10:43:44 <lambdabot> 512559680
10:43:46 <mauke> then yes
10:43:47 <thedward> @eval let fibs = 0 : 1 : [ a + b | (a, b) <- zip fibs (tail fibs)] in fibs !! 47
10:43:47 <xerox> @eval let fibs = 1 : 1 : zipWith (+) fibs (tail fibs) in fibs !! 47 :: Integer
10:43:48 <glguy> Needs to be Integer instead then :)
10:43:48 <lambdabot> 2971215073
10:43:49 <lambdabot> 4807526976
10:44:48 <aqua_scummmm> int is system limit integer, and Integer is infinite?  Class vs type?
10:45:00 <aqua_scummmm> *type vs Class
10:45:19 <mauke> int doesn't exist
10:45:30 <aqua_scummmm> ah
10:45:32 <mauke> Int is a fixed-width integer, Integer is arbitrary large
10:45:42 <mauke> or -ly
10:45:54 <aqua_scummmm> ok
10:46:01 <aqua_scummmm> ill get there in the tutorial
10:46:03 <aqua_scummmm> thanks for the help
10:46:12 <aqua_scummmm> continue with your conversations
10:47:00 <glguy> what would lambdabot do for @eval let fibs = 0 : 1 : zipWith (+) fibs (tail fibs) in fibs !! 100000
10:47:22 <xerox> count?
10:47:29 <glguy> nevermind, it could do it
10:47:35 <mauke> @eval let fibs = 0 : 1 : zipWith (+) fibs (tail fibs) in fibs !! 100000
10:47:38 <glguy> I tried in hugs and it blew up
10:47:38 <lambdabot> out of memory (requested 1048576 bytes)
10:47:51 <mauke> what would jesus do?
10:48:06 * xerox suppress a joke
10:48:10 <glguy> when I tried it in ghc, it just took a few more seconds
10:49:21 <glguy> So this guy was making a lot of noise in the movie theater, and I was about to go and kick his ass.. but then i looked at my bracelet "WWJD" and I thought "What would he do?" So I walked down and lit him on fire
10:50:08 <xerox> Who is 'J' ?
10:50:19 <glguy> jesus
10:50:37 <aqua_scummmm> in my town WWJD= Who Wants Jelly Donuts?
10:50:52 <mauke> what would judas do?
10:51:02 <ulph> shapr: hey?
10:51:08 <mauke> http://www.air0day.com/wwjd/
10:51:09 <glguy> someone type one of those unicode characters I typically can't read, i want to see if they show up on my other client
10:51:28 <mauke> U+04D2 (211 146): CYRILLIC CAPITAL LETTER A WITH DIAERESIS [Ӓ]
10:51:42 <aqua_scummmm> ∫ßˆ˙∑ˆøåß∂˙∆˚åß∂
10:51:43 <glguy> http://www.venganza.org/
10:52:28 <aqua_scummmm> haha
10:52:33 <aqua_scummmm> love the spaghetti monster
10:52:56 <ulph> shapr: i know what lambdabot plugin we need! :)
10:52:57 <glguy> The graph of the global average temperature vs. number of pirates
10:53:10 <tic> arr!
10:53:26 <glguy> okay... one more LETTER A WITH DIABETES
10:54:01 <mauke> U+04D2 (211 146): CYRILLIC CAPITAL LETTER A WITH DIAERESIS [Ӓ]
10:54:06 <aqua_scummmm> Å
10:54:08 <aqua_scummmm> å
10:54:14 <glguy> nope, still doesn't work
10:54:17 <glguy> oh well
10:54:26 <glguy> ascii was good enough for god, it's good enough for me
10:54:44 <aqua_scummmm> ƒµçk
10:54:48 <aqua_scummmm> çøçk
10:54:55 <aqua_scummmm> thers no cool K's
10:55:35 <aqua_scummmm> ßµ∏
10:55:46 <aqua_scummmm> </immaturity>
10:56:34 <xerox> Cale: ping
11:02:41 <pitecus> I think καππα has a cool k
11:05:10 <aqua_scummmm> looks too normal, but yes it is better than standard
11:06:09 <dcoutts_> @seen JaffaCake
11:06:10 <lambdabot> I saw JaffaCake leaving #haskell 11 days, 1 hour, 55 minutes and 41
11:06:10 <lambdabot> seconds ago, and I have missed 8 days, 21 hours, 58 minutes and 44
11:06:10 <lambdabot> seconds since then.
11:06:34 <pitecus> Hm, the velar click might be more satisfying aqua_scummmm: ʞ
11:06:59 <aqua_scummmm> oh very nice
11:09:13 <SamB> how come I can't edit HaskellUserLocations?
11:10:04 <dcoutts_> SamB, register on the wiki, it's easy
11:10:21 <SamB> dcoutts: where do I register/login\do this
11:10:38 * SamB presses enter too soon again!
11:11:49 <SamB> wait, it claims to be an immutable page...
11:13:00 <dcoutts_> the UserPreferences link in the top right of the page
11:14:04 <dcoutts_> xerox, I've built a win32 installer! Now I'm going home...
11:15:05 <shapr> ulph: What?
11:15:20 <ulph> shapr: looking up prices and URLs to unicycles
11:16:24 * xerox hops around dcoutts
11:16:25 <shapr> What about a wheelbuilder plugin?
11:22:47 <ulph> well yeah, that to
11:23:26 <ulph> not that i know how to calculate that the spoke lengths though ;)
11:23:33 <SamB> okay, how does lambdabot qualify as a user?
11:24:01 <SamB> somebody should figure out how to get my name to fit...
11:26:51 <araujo> Hello!
11:27:13 * araujo can't remenber watching somebody riding an unicycle here
11:32:29 <shapr> araujo: You want to see a unicycle video? Or what?
11:32:44 <araujo> shapr, Sure :-]
11:33:00 * araujo in his free time
11:33:16 <shapr> check out http://thunderbird.scannedinavian.com/~shae/unifilms/
11:33:20 <ValarQ> 'lo shapr
11:33:39 <shapr> What does the Q on the end of Valar stand for?
11:33:54 <ValarQ> shapr: dunno
11:34:04 <shapr> ok
11:34:15 <ValarQ> shapr: i usually call myself vq but that is already taken on freenode
11:34:26 <shapr> I know the Valar, but I was wondering if the Q meant a specific Valar or something.
11:34:31 <ValarQ> shapr: so i threw a couple of random chars in between them
11:34:32 <araujo> shapr, which one?
11:34:44 <shapr> lemme get the url to my favorite uni video...
11:34:54 <shapr> araujo: http://thunderbird.scannedinavian.com/~shae/unifilms/11_Au_TAQUET_10Mo.wmv
11:35:06 <aqua_scummmm> ever see kris hold ride?
11:35:12 <aqua_scummmm> *kris holm
11:35:13 <shapr> kris *holm*
11:35:14 <ValarQ> shapr: oh, you have read tolkiens books have you? :)
11:35:31 <shapr> Yeah, when I was 11 or so.
11:35:39 <araujo> Thanks shadowie
11:35:42 <araujo> shapr, *
11:35:59 <ValarQ> shapr: i think about reading silmarilion again...
11:36:17 <ValarQ> shapr: btw, have you used my crappy code?
11:36:21 <shapr> aqua_scummmm: Kris Holm rocks, and I have a 2004 Kris Holm 24" Mountain Unicycle. You should see my current unicycle :-)
11:36:33 <shapr> I haven't used it yet, but I'm considering using it for a TMR article.
11:36:41 <shapr> Would you like to write a TMR article about your code?
11:36:52 <aqua_scummmm> i work at a sports store, and we get stuff really cheap, one of his unicycles is on my to get list
11:36:57 <ValarQ> shapr: whats a TMR?
11:37:04 * araujo wonders how many uncicycles shapr owns
11:37:04 <shapr> The *process* of improvement seems most difficult for new Haskell programmers.
11:37:05 <aqua_scummmm> i saw him in new world disorder, a mountain bike film
11:37:19 <shapr> araujo: I own three unicycles, 20" 24" and 26"
11:37:24 <araujo> :-P
11:37:40 <shapr> The 26" is close to the most monster truck unicycle you can get.
11:37:50 <ValarQ> shapr: i find it hardest to compose programs
11:37:53 <araujo> hah, got a picture of it?
11:37:54 * dcoutts owns 2 unicycled, 28" and 36". He is also about to order a 24" one.
11:37:55 <aqua_scummmm> do any freeride/mountain unicycling on them?
11:38:06 <araujo> dcoutts, 36" ?!?
11:38:14 <dcoutts> araujo, yep :-)
11:38:16 <shapr> Yes, five days a week of Muni
11:38:23 <aqua_scummmm> haha nice
11:38:26 <aqua_scummmm> you live in SF?
11:38:28 <shapr> aqua_scummmm: Here's me and my current uni - http://www.scannedinavian.org/~shae/unicycle/PICT3226.smaller.JPG
11:38:31 <araujo> dcoutts, What do you use it for?, touch the sky? :-P
11:38:46 <shapr> SanFran? No, I live in Boden, Sweden.
11:38:46 <dcoutts> araujo, to cycle to work and generally get around town
11:38:48 <aqua_scummmm> nice
11:38:55 <{Arias}> hi!
11:38:58 <araujo> mm
11:39:02 <{Arias}> how can i convert a Char to a String ?
11:39:06 <aqua_scummmm> ah, san francisco named their transportation muni as well
11:39:14 <araujo> you guys unicycle a lot over there in europe right?
11:39:16 <{Arias}> [char] ?
11:39:17 <dcoutts> {Arias}, show or (\c -> [c])
11:39:33 <{Arias}> ok thanks
11:39:34 <shapr> muni == mountain unicycl*
11:39:41 <aqua_scummmm> oh lol
11:39:43 <dcoutts> araujo, not really, shapr and I are just wierdos
11:39:53 <araujo> haha
11:40:03 <aqua_scummmm> i thought you meant dealing with cyclcing/commuting
11:40:03 <shapr> Lemmih also unicycles.
11:40:18 <shapr> I work from home, so unicycling is my exercise.
11:40:19 <ValarQ> araujo: yeah, don't judge us all after shapr and aqua
11:40:34 <araujo> ValarQ, hah, ok, i won't, sorry ;-)
11:40:38 <shapr> hei esap
11:40:38 <ndm> {Arias}: or (:[])
11:40:41 <esap> Hei!
11:41:00 <ValarQ> araujo: some of us have a normal hobby, like creating doomsdaydevices
11:41:05 <araujo> shapr, Ok, so you don't use it for transportation?
11:41:12 <araujo> ValarQ, :-P
11:41:41 * ValarQ is actually working on a machine that might kill him
11:41:56 <araujo> I can't imagine myselkf using it for transportation as dcoutts does
11:42:07 <ValarQ> that hydraulics is kind of frightening
11:42:13 <shapr> aqua_scummmm: My current uni has a 65mm wide Large Marge rim, a Profile hub & cranks, a 3" Nokian Gazzaloddi, I'll be putting on my JCielinki cranks tonight, and of course, a Kris Holm Fusion seat.
11:42:25 <{Arias}> thanks ndm
11:42:30 <{Arias}> hola araujo :)
11:42:38 <araujo> Hola {Arias} !
11:42:51 <shapr> As soon as I can afford it, I'll be upgrading to the 3.7 inch Endomorph tire.
11:42:59 <aqua_scummmm> ive heard about unicycles starting to switch to freewheel devices and handbrakes
11:43:15 <aqua_scummmm> which would be freaky
11:43:18 <shapr> I have brakes on my KH24.
11:43:21 <dcoutts> aqua_scummmm, sounds bonkers. I don't know how you'd comtrol them
11:43:41 <shapr> Yeah, I dunno how freewheeling would work.
11:44:17 <shapr> If you could lock the cranks to the frame, you'd get balance, then you could freewheel downhill at insane speeds. You'd better have a really good brake.
11:44:18 <aqua_scummmm> itd probably be like a freestyle BMX freewheel, where it can go forwards and backwards
11:44:46 <aqua_scummmm> based on direction of spin (if any)
11:44:47 <aqua_scummmm> i dunno
11:45:09 <shapr> You'd need a shiftable hub though.
11:46:17 <aqua_scummmm> shapr:  why?  even if youre not shifting?
11:46:46 <shapr> Because, if the wheel is free, you could only go downhill. BC wheels are fun, but not so useful.
11:47:05 <glguy> Oops, for the last 40 minutes ghci was been trying to compute the 1 millionth fibonacci number
11:47:39 <aqua_scummmm> shapr: ah glguy lol
11:48:09 * araujo watching the shapr's unycicle video
11:50:04 <glguy> did I miss the link
11:50:29 <glguy> nm
11:50:29 <glguy> found it
11:51:28 * araujo used to rollerblade a lot 
11:52:51 <aqua_scummmm> araujo likes to use the /me command
11:52:56 <aqua_scummmm> :P
11:53:04 * araujo thinks that is not true
11:54:13 <shapr> mm code
11:56:55 <araujo> shapr, liked the video, and even thought of getting an unicycle until the video show the accidents :-P
11:59:49 <goron> shapr: I really don't understand how you get any work done.
12:00:05 <shapr> What do you mean?
12:00:31 <goron> shapr: do a /lastlog shapr and you can see what I mean.
12:01:28 <shapr> You think the amount of time I spend on IRC is physically impossible?
12:01:48 <liyang> shapr: yes.
12:01:52 <goron> shapr: Well, having a company, and answering so many questions....
12:02:00 <ulfdoz_> I assume, some people only exist on wires. :)
12:02:30 <shapr> Well, if I spent more time working I'd probably have more unicycles...
12:03:00 <shapr> goron: Blame it on hyperactivity :-P
12:03:13 <astrolabe> If you worked really hard, you could even get a bicycle ;)
12:03:18 <shapr> Seriously though, #haskell/Haskell is just one of the things I do.
12:04:51 <ndm> shapr, so what you are saying is you could do more haskell :)
12:05:19 <shapr> Yeah sure, but I choose to spend time with my woman, finding jobs, learning new stuff (that's not computer related).
12:05:40 <shapr> I also read a lot of books, play computer games...
12:06:03 <ndm> i choose to spend my time avoiding my woman...
12:06:14 <liyang> How? You're always talking whenever I take a peek in here.
12:06:27 <shapr> Oh, I write poetry and I'm working on a cheesy sci-fi novel :-)
12:06:42 <araujo> ndm, haha
12:07:48 <shapr> liyang: maybe it's really fast context switching? Right now I'm also reading som TopMind vs FP on Ward's Wiki and investigating Frank Debussy's challenges for possible TMR articles.
12:09:28 <liyang> shapr: I want to know what input device you're using. Maybe it's because my wrists have gone carpal that I can't type fast or too much... but just how do you keep it up? O.o
12:09:45 <shapr> I use a kinesis contoured keyboard with a custom "I am not a koala" keymap.
12:09:56 <liyang> (Or maybe he has his brain wired into the interweb...)
12:10:08 <liyang> shapr: ::drool::
12:10:11 <ndm> its not the speed of typing that impresses me, its the speed of thought and the accumulation of knowledge
12:10:29 <shapr> I have a theory that thumbs are meant for chording, not the other fingers, so I moved all of my modifier keys under my thumbs.
12:10:44 <shapr> shift, alt, ctrl, super, and hyper are all under my thumbs.
12:11:31 <shapr> ndm: I think any speed I have is just motivation. There's so much fun stuff to learn!
12:11:47 <shapr> Follow your passion!
12:12:25 <shapr> liyang: Seriously, if you have RSI problems, I have a bunch of advice. I had RSI for six months or so, I switched to the dvorak right-hand keymap so I could still touchtype sensibly.
12:13:21 <shapr> Anyway, if you want to talk about speed of though and accumulation of knowledge, there are bunch of people who are better at it than I am.
12:14:00 <shapr> I often meet people on the 'net who are slightly more than half my age, and know so much more than I do.
12:14:54 <shapr> I try to emulate their good habits, and ask them to point me to the good stuff I haven't found yet.
12:16:15 <shapr> I also try to consciously improve everything I do. There's lots of useful information on the 'net about improving your memory, comprehension, etc.
12:16:55 <shapr> goron: How do you learn?
12:17:35 <shapr> Metacognition is fun and useful.
12:18:06 <shapr> liyang: Anyway, come to the next EuroHaskell and you'll see that I am not yet wired into the interweb :-P
12:18:15 <Heffalump> when/where is it? :-)
12:18:41 <shapr> I don't know yet, any suggestions for a free venue conducive to Haskelling?
12:18:56 <Heffalump> no idea
12:19:06 <shapr> Anything in the UK?
12:19:22 <Heffalump> free venues aren't easy to find :-)
12:19:36 <shapr> Chalmers aka John Hughes will likely let us show up and use some rooms.
12:20:27 <shapr> I'm planning on moving to Stockholm next summer, so it'd be easier for me to do in-person organizing at Chalmers.
12:20:28 <liyang> shapr: I've found the MS Natural keyboard helped quite a bit. It helped even more when I took it apart and angled both sides like a wedge. (Propped up with books and a glasses case; it's how I got through my MSc thesis...)
12:20:50 <shapr> liyang: I have some ideas about a spoken programming language, I think that would help.
12:21:00 <liyang> :)
12:21:17 <shapr> That's one reason I purchased a high quality headset+mic recently.
12:21:18 <liyang> Arrange a place for EuroHaskell and I'll turn up. :)
12:21:21 <shapr> ok!
12:21:50 <Igloo> liyang: The moon, third crater from the left
12:21:59 * Igloo stretches the definition of Euro a bit
12:22:11 * araujo thinkin' if he should go and get a haircut
12:22:36 <liyang> Igloo: and specify a time too. One in the past, maybe.
12:22:37 <Igloo> Is the location of HW '07 known?
12:22:55 <liyang> Because technically, you only need one time travellers' convention...
12:23:00 <Heffalump> I don't think ICFP is decided much more than a year in advance.
12:23:07 <Igloo> (3413532+562423i) seconds past the epoch
12:23:09 <musasabi> Are bus errors with GHC on sparc related to faulty libgmp or just normal?
12:23:30 * musasabi is getting them when trying to compile some files, but not all
12:23:41 <Igloo> What version of ghc, and what OS?
12:23:59 <rep> anyone read CTM?
12:24:21 <Heffalump> CTM?
12:24:28 <rep> http://www2.info.ucl.ac.be/people/PVR/book.html
12:24:36 <musasabi> "SunOS myntti 5.9 Generic_117171-15 sun4u sparc" and GHC 6.4.1
12:25:29 <Igloo> I thought that was supposed to work, but I guess it doesn't. Try an unregisterised ghc build.
12:25:29 <rep> Heffalump i'm looking for a good book to read
12:25:32 <musasabi> The GHC version is the one on the download page, while my libgmp is compiled with v8plus.
12:25:54 <Igloo> I don't remember ever seeing anything about faulty libgmps
12:28:44 <musasabi> My gcc is ancient too if it may cause problems (but I am using the ghc binary so I don't think that should be the reason)
12:29:08 <musasabi> It is Bus faulting in the literate preprocessor.
12:29:40 <Heffalump> rep: on what subject?
12:30:00 <rep> Heffalump any :)
12:30:12 <{Arias}> to comment a block of code ??
12:30:24 <Heffalump> {- foo -}
12:30:33 <{Arias}> ahh thanks :)
12:30:41 <musasabi> from ghc -v - it dies after the running unlit line (but the literate preprocessor seems to be fine by itself)
12:31:23 <pejo> musasabi, there are some release notes baout either gcc 2.95.x or 3.4 required on solaris iirc.
12:33:35 <musasabi> pejo: but I don't get to the stage where gcc is called. (the version is 2.8.1, but I am thinking of trying to live with -fasm)
12:42:07 <pejo> mus, isn't -fasm the native codegen? (Don't have ghc handy). Thought it bit rotted for sparc in 6.4?
12:45:05 <malcolm> musasabi: is your ghc dynamically linked against some .so, and picking up a too-old version maybe?
12:46:37 <musasabi> malcolm: I compiled versions of the libraries specifically for the ghc binary. (readline-5.0, ncurses-5.5, gmp-4.1.4)
12:46:59 <musasabi> But it could be that the ghc binary doesn't like one of those.
12:47:03 <{Arias}> how can I check if a String starts with a '-' ?
12:47:18 <malcolm> musasabi: and it is definitely picking these up?  ldd lib/ghc-6.4/ghc-6.4
12:47:20 <{Arias}> y need to declare a function ?
12:50:04 <ndm_> {Arias}: if head xs == '-' then ... else ...
12:50:22 <ndm_> although thats not quite true... - if xs is [] then you crash
12:50:32 <ndm_> so if you have a possibly empty list
12:50:47 <{Arias}> mm
12:50:50 <TheHunter> @eval "x" `isPrefixOf` "xyz"
12:50:51 <ndm_> case xs of {'-':_ -> true ; _ -> false}
12:50:51 <liyang> {Arias}: you can pattern match it on the first character: isInitDash (h : _) = h == '-'
12:50:52 <lambdabot> True
12:51:14 <Igloo> take 1 str == "-"   will do it
12:51:50 <musasabi> malcolm: yes, I think so (http://youzen.b2.fi/~musasabi/ldd.txt has the info)
12:52:00 <liyang> TIMTOWTDI :)
12:53:42 <malcolm> musasabi: My ghc-6.2.1 on solaris is not linked against gmp-3.  You said you compiled up gmp-4 specially.
12:55:25 <{Arias}> thanks :)
12:58:39 <musasabi> malcolm: libgmp-4.X provides libgmp.so.3 at least on linux systems.
12:59:54 <musasabi> malcolm: Is that the same one as http://haskell.org/ghc/dist/6.2.1/ghc-6.2.1-sparc-sun-solaris2.tar.bz2 ?
13:00:08 <malcolm> musasabi: I see.  have you tried 'strace' or equivalent on ghc, to work out the most recent syscalls were when it crashed?
13:00:39 <Heffalump> ('truss' is the Solaris 'strace' equivalent IIRC)
13:01:04 <goron> shapr: I didn't really follow the discussion.
13:01:12 <shapr> ah, too bad.
13:02:40 <goron> shapr: But now I have :)
13:02:49 <malcolm> musasabi: yes, that's the one I have.  Needed to compile my own readline-4.3 and ncurses, but no gmp required.  Mine seems to work without bus errors.
13:04:27 <goron> shapr: Basically I read the material a couple of times and try to understand everything. If I don't understand something I find different sources and try to disambiguate. Really learning a skill requires practice, but that's only necessary sometimes.
13:05:14 <paolino> @seen xerox
13:05:15 <lambdabot> xerox is in #haskell-overflow, #haskell-blah and #haskell. Last
13:05:15 <lambdabot> spoke 1 hour, 48 minutes and 50 seconds ago.
13:05:34 <goron> shapr: E.g. in one course I had to spend 30 hours a week. Normally I spend about 10 hours per course per week. During those 30 hours I gained a lot of experience and became skillful in that area.
13:06:04 <goron> shapr: I think learning by doing is the best way to learn things, but most stuff is so trivial that it doesn't require practice to do so.
13:06:44 <xerox> paolino: oi
13:07:08 <goron> shapr: E.g. I am doing a course on Organic Chemistry this quarter.
13:07:17 <musasabi> http://youzen.b2.fi/~musasabi/ldd.txt has updated info.
13:07:35 <goron> shapr: The questions in the book are straightforward applications of simple rules.
13:07:49 <goron> shapr: I don't think it's important to know such simple rules.
13:07:58 <musasabi> It seems that it crashes 1) if the object file exist before reading it, 2) in the linking stage if the object file didn't exist.
13:08:08 <musasabi> I'll try 6.2.1 next and see what happens.
13:08:22 <goron> shapr: In high-school I did learn those rules, but now I keep my brain free for important stuff.
13:08:48 <SamB> dcoutts: where can I see more about that gtk2hs threading issue?
13:08:54 <shapr> Yeah, I agree with you. As long as you know where to find the rules, and have used them before so you can easily refresh your memory, you're good to go.
13:09:00 <mrchebas> hello haskell people! Where in the libraries can i find binary and for Int?
13:09:18 <goron> shapr: I have been trying to understand floorplanning and the problems that come with it.
13:09:33 <goron> shapr: There's A LOT of context in that area.
13:09:52 <goron> shapr: They overload a lot of words with different semantics.
13:10:27 <goron> shapr: It's pretty darn complicated to really understand what they mean (i.e. transform it in my own little brain language)
13:10:47 <malcolm> musasabi: hmm, you previously said it wasn't getting as far as calling gcc, but your log shows that it does seem to be calling gcc.  In fact it looks like the linker is crashing.
13:10:55 <adept> mrchebas: would you care to elaborate?
13:11:19 <goron> shapr: And now I am learning MetaPost which I think is a valuable thing to know, since Donald Knuth has taken the time to learn it.
13:11:39 <goron> shapr: Hmm, well, I am learning some stuff too, so it seems :)
13:11:51 <goron> shapr: But that's basically it.
13:11:56 <musasabi> malcolm: yes, I was looking at the first failure and didn't notice the second one.
13:12:08 <adept> goron: didnt Knuth took time to _write_ it, too? :)
13:12:15 <goron> adept: No
13:12:19 <goron> adept: He wrote MetaFont.
13:12:29 <goron> adept: That's the predecessor.
13:12:33 <mrchebas> adept: i found it, It is the "binary and" operator
13:12:49 <goron> adept: But you were close ;)
13:12:50 <mrchebas> adept: in Data.Bits
13:13:54 <musasabi> So it might be that I need to first install a new gcc...
13:13:59 <goron> shapr: But where do you find those other smart people?
13:14:08 <SamB> knuth probably didn't have all that much to learn, in terms of language...
13:14:33 <goron> SamB: And he probably could dream all the associated maths too.
13:14:58 <SamB> I mean, he had already done all his diagrams in MetaFont!
13:15:17 <SamB> (iirc)
13:15:36 <musasabi> I'll try that one tomorrow night.
13:15:55 <SamB> gcc.real (GCC) 4.0.2 (Debian 4.0.2-2)
13:16:09 * SamB shows off GCC 4
13:16:27 <thedward> once I install cabal, how do I register it?
13:16:31 <shapr> goron: You find the smartest people you can, and ask them to point you in the right direction.
13:16:38 <shapr> That includes pointing you to other smart people.
13:18:16 <adept> shapr: how do you deal with circular pointers dereference? :)
13:18:53 <SamB> to try to implement Z-Machine I/O with gtk2hs even without working threads, or to learn about garbage collection...
13:19:31 <goron> shapr: And still the level of the average human is low compared to what would be possible.
13:19:42 <SamB> (The threads would be for running both GHCi's and GTK's mainloop at the same time...
13:20:02 <SamB> Oops, I forgot to close the parentheses!)
13:20:15 <Heffalump> in response to the discussion about learning stuff, I think a large part of being able to do something well is being able to use the supporting tools quickly. And that's why learning a bunch of stuff you could easily look up is worthwhile.
13:21:00 <dcoutts> SamB, you can use threads ok with gtk2hs
13:21:23 <goron> dcoutts: But still with the polling mechanism?
13:21:40 <dcoutts> goron, of one form or another yes.
13:21:44 <SamB> dcoutts: I looked at that link you showed me, but the GTK mainloop didn't seem to get any time...
13:22:10 <dcoutts> SamB, really? Usually it's the other way around :-)
13:22:23 <goron> dcoutts: I know the problem is non-trivial, but I wondered whether you already came up with something.
13:23:03 <dcoutts> SamB, the main thread calls mainGUI, so that gives the Gtk loop it's time. Then that calls back to us regularly giving Haskell threads a chance to run.
13:23:18 <dcoutts> It is a polling solution, however the overhead is actualyl quite low.
13:23:44 <SamB> dcoutts: so does that only work if you call mainGUI from the main thread?
13:23:59 <dcoutts> SamB, you could call mainGUI from another thread.
13:24:42 <dcoutts> SamB, the point is that in the single threaded rts, calling mainGUI blocks all Haskell threads. Which is why we must arrange for it to call us back regularly.
13:25:15 <dcoutts> goron, the problem is that both gtk and ghc have main loops which have collections of event sources. You can't block in either system because they are unaware of each others event sources so you would miss events.
13:25:21 <SamB> dcoutts: yes, I did that.
13:25:56 <dcoutts> SamB, well that should work. You can post the code if it's being problematic.
13:26:26 <dcoutts> goron, gtk has ways of integrating other event loops into it, but the ghc rts doesn't provide any api for getting at the things it's waiting on.
13:27:24 <SamB> dcoutts: wouldn't it make more sense to have the GHC rts do the waiting?
13:27:44 <dcoutts> SamB, that'd be fine too, but it's not very easy to do.
13:28:00 <dcoutts> SamB, Haskell threads can wait on at most one FD at once.
13:28:09 <SamB> dcoutts: oh, really?
13:28:25 <SamB> so is this a problem?
13:28:49 * SamB imagines a ton of threads splitting off to wait on different FDs
13:29:02 <dcoutts> SamB, actually it'd be better to go the other way since the gtk main loop can have event sources other than just FDs and timers.
13:29:28 <dcoutts> SamB, yes you can do that trick, but it's not effecient or nice. You wouldn't want to do that every time round the gtk event loop/
13:29:29 <goron> dcoutts: yes, you explained it somewhat similar earlier.
13:29:30 <SamB> dcoutts: hmm.
13:29:50 <SamB> dcoutts: how do you know it isn't efficient?
13:30:02 <dcoutts> SamB, imagination :-)
13:30:28 <dcoutts> SamB, it's one call to select() vs, creating N threads and N MVars.
13:30:46 <SamB> why would you need N MVars?
13:30:56 <SamB> wouldn't one Chan or one MVar be enough?
13:30:59 <Heffalump> the GHC RTS is quite clever about multiplexing blocking IO into a single call to select
13:31:16 <Heffalump> Is there any way to redo the GTK main loop so it translates into something that the GHC RTS can handle?
13:31:20 <SamB> and those are GREEN threads, or maybe CLEAR ones!
13:31:34 <dcoutts> Heffalump, yes, internally in ghc it all ends up as one select() call, but it's the N threads in between that is a silly overhead.
13:31:56 <SamB> I still think you ought to try it!
13:32:09 <dcoutts> Heffalump, the gtk main loop can be driven iteration by iteration from the Haskell side
13:32:14 <Heffalump> so hack the RTS to offer a proper "select" interface?
13:32:16 <dcoutts> if that helps at all
13:32:45 <dcoutts> Heffalump, or hack the RTS to tell me what it is waiting on (ie call me rather than caling select)
13:33:00 <thedward> I'm trying to compile the example that comes with JRegex, and am gettings errors like: "undefined reference to `__stginit_Maybe_'" does anyone have any suggestions?
13:33:05 <Heffalump> yeah, though I think giving control to the RTS would be safer
13:33:16 <Heffalump> depends on what else the GTK main loop needs to do.
13:33:16 <dcoutts> I did implement that solution one, but it uses lots of internal ghc headers
13:33:28 <SamB> I agree! theres no telling what crazy things the GHC RTS may need to wait on!
13:33:30 <Heffalump> wouldn't the Simons accept the patch?
13:33:53 <Heffalump> it seems quite reasonable to offer a proper select interface
13:34:05 <howya-doin> hi yall
13:34:21 <SamB> reasonable? sure! easy? doubtful...
13:34:25 <dcoutts> both main loops need to block on activity of a number of file desciptiors with some timeout (for timers and thread delay)
13:34:46 <Heffalump> hmm, timeout.
13:34:52 <dcoutts> that's fine too
13:35:08 <dcoutts> ghc knows what it's timeout needs to be
13:35:16 <Heffalump> oh, that was Eelco
13:35:22 <malcolm> thedward: sound like the Cabal file is missing a depends: haskell98 field
13:35:32 * Heffalump wonders where he came from and why he quit with that quit message
13:36:39 <{Arias}> mmm
13:36:53 <kosmikus> Heffalump: I guess that Eelco is lurking here from time to time, because there's a #stratego channel now, and if you're online anyway ...
13:37:07 <Heffalump> kosmikus: right :-)
13:37:13 <goron> I noticed it too.
13:37:22 <malcolm> thedward: or perhaps your call to the compiler just needs -package haskell98 flag
13:37:25 * Heffalump waves to visser
13:37:36 <{Arias}> if I have a String, and want to take a piece of this string from character 2 to end
13:37:48 <{Arias}> how can I do it easyly ?
13:37:55 <Heffalump> {Arias}: tail
13:38:01 <{Arias}> lets see
13:38:06 <SamB> anyhow, I have this function:
13:38:07 <SamB> testUI = do iost <- createUI
13:38:07 <SamB>             timeoutAdd (yield >> return True) 5
13:38:07 <SamB>             thread <- forkIO mainGUI
13:38:07 <SamB>             return (iost, thread)
13:38:07 <SamB>  
13:38:14 <visser> hi there Heffalump
13:38:17 <Heffalump> @eval tail "foobar"
13:38:18 <lambdabot> "oobar"
13:38:26 <SamB> in a module called ZMachine.IO
13:38:28 <{Arias}> ok thanks :)
13:38:32 <SamB> and then I:
13:38:35 <SamB> Prelude> :l ZMachine.IO
13:38:40 <SamB> *ZMachine.IO> (iost, thread) <- testUI
13:39:06 <Heffalump> dcoutts: what does GTK actually do once the select returns?
13:39:10 <dcoutts> SamB, you're calling initGUI at some point I presume
13:39:25 <SamB> and then my window looks like a window that needs to be redrawn...
13:39:49 <SamB> dcoutts: yes, or I would have trouble loading my .glade file in createUI ;-)
13:40:13 <dcoutts> SamB, do ordinary thread things work in ghci? the readLine stuff doesn't block the whole ghic process does it?
13:40:39 <thedward> malcolm: awesome. thanks.
13:40:39 <SamB> dcoutts: well, even if I do:
13:40:39 <SamB> *ZMachine.IO> yield
13:40:52 <SamB> it still doesn't redraw...
13:41:26 <dcoutts> but when you run mainGUI not in a forkIO it's fine?
13:42:00 <shapr> howya-doin: hiya, learning Haskell?
13:42:12 <SamB> hmm, I just thought "maybe one yield isn't enough", and so I did:
13:42:16 <SamB> *ZMachine.IO> let forever x = x >> forever x
13:42:16 <SamB> *ZMachine.IO> forever yield
13:42:21 <SamB> and now its drawn...
13:42:32 <dcoutts> oh interesting
13:42:41 <SamB> so yeah, I guess the readLine stuff must be blocking the whole process...
13:42:50 <dcoutts> :-(
13:43:37 <SamB> it probably isn't hard to fix it! but it is unfortunately GHCi that is broken...
13:43:41 <dcoutts> SamB, yeah ghci is the probem. Try this:
13:43:44 <franka> Wow, crowded.
13:43:45 <dcoutts> let foo n = do {print n; threadDelay 100000; foo (n+1)}
13:43:49 <dcoutts> foo 0
13:43:52 <Heffalump> franka: that's cos Haskell rocks
13:43:55 <dcoutts> {that works fine}
13:43:59 <dcoutts> forkIO $ foo 0
13:44:04 <dcoutts> {that doesn't}
13:44:29 <Heffalump> franka: oh, and the Utrecht mafia is clearly taking over the world :-)
13:44:31 * dcoutts notes #haskell is about to top 190 people
13:44:49 <franka> Heffalump: Hm, are you from Utrecht?
13:45:03 <Heffalump> franka: no, but I recognised your name as being so
13:45:04 * xerox waves to dcoutts
13:45:09 <SamB> dcoutts: you know what else is wrong with that?
13:45:16 * dcoutts waves back to xerox 
13:45:21 <dcoutts> SamB, what else?
13:45:32 <franka> Ah, so I'm famous... FINALLY!  haha
13:45:32 <SamB> it doesn't give the thread a name, so I can't kill the thread!
13:45:39 <xerox> dcoutts, installer? installer? installer?  :-D
13:45:41 <Heffalump> or infamous ;-)
13:45:45 <dcoutts> SamB, hah!
13:45:49 <franka> Even better. :)
13:46:04 <dcoutts> SamB, sorry about that :-)
13:46:20 <dcoutts> xerox, oh well it's at my office on a win32 machine
13:46:23 <franka> There ought to be an evil laugh emoticon...
13:46:31 <SamB> oh well, its not like I was going to get much done in this GHCi anyways...
13:46:33 <Heffalump> muhahahaha is quite effective
13:46:56 <SamB> so has anyone complained about this problem with GHCi before?
13:47:15 <dcoutts> SamB, yes. They are thinking of building ghci with the threaded rts
13:47:30 <franka> Heffalump: So, where are you located?
13:47:36 <dcoutts> SamB, but they hadn't got up the confidence to do so.
13:47:52 <Heffalump> franka: Cambridge
13:47:55 <SamB> what does the threaded RTS do for me?
13:48:01 * dcoutts fears the threaded rts may break all his progs
13:48:01 <Heffalump> was at Oxford till about a year ago
13:48:15 <SamB> especially if you say gtk2hs doesn't like it?
13:48:15 <dcoutts> SamB, it'll mean the call to readline will not block ghci
13:48:17 <franka> Heffalump: Cambridge, UK or Mass?
13:48:25 <Heffalump> UK
13:48:26 <franka> Ah, UK, I guess.
13:48:49 <SamB> dcoutts: that isn't dependant on whether you forkIO or forkOS?
13:49:00 <dcoutts> SamB, well apparently the next version of the ghc rts might support binding Haskell threads to OS threads in hwich case gtk2hs has a chance of working.
13:49:10 <franka> I was going to go to Oxford, but I'm still working on my thesis.  In the meantime I'm working at CWI.
13:49:12 <syntaxfree> so I was filling this online form to apply for a job.
13:49:27 <syntaxfree> I'm afraid I'm not gonna get into any master programs at all.
13:49:33 <dcoutts> SamB, no. If the foreign call is marked in some way then it'll not block other threads.
13:49:45 <SamB> dcoutts: oh, cool
13:49:50 * dcoutts tries to recall what the annotation is exactly
13:49:54 <syntaxfree> and comes this field "Group affiliations -- sports, church, etc.".
13:50:06 <syntaxfree> I freak out and write in "The Haskell community".
13:50:22 <franka> Heffalump: What are you working on?
13:50:25 <dcoutts> SamB, but the downside is that then you end up making ffi calls in mostly random OS threads, which many C libs do not tollerate.
13:50:33 <SamB> we are at least as big as a smallish church, I think ;-)
13:50:46 <SamB> dcoutts: true...
13:51:07 <Heffalump> franka: I work in industry (for ARM)
13:51:11 <SamB> or at least, I imagine so...
13:51:16 <dcoutts> SamB, whihc mean we have to lock things (which for gtk would be a big overhead)
13:51:26 <SamB> haven't ever really tried threads in C...
13:51:28 <syntaxfree> I think I need someone to officially accept me in "the Haskell community" now.
13:51:43 <franka> Heffalump: I see.  Hm, didn't I just see some story on Slashdot about ARM?
13:51:46 <SamB> syntaxfree: make Simon do it
13:51:51 <RemiTurk> which one?
13:51:52 <dcoutts> SamB, using multiple OS threads with Gtk+ in C is very painful and tricky.
13:51:55 <syntaxfree> Simon who?
13:51:55 <Heffalump> errm, dunno. /me checks :-)
13:51:59 <SamB> RemiTurk: hehe
13:52:11 <syntaxfree> SPJ?
13:52:12 <franka> Not today.  Like a week ago.
13:52:20 * SamB specificly didn't specify which one ;-)
13:52:55 <RemiTurk> If SPJ officially accepts you into The Haskell Community, I don't think any of us here would be able to sneer at you anymore ;)
13:52:55 <dcoutts> ahoy SyntaxNinja!
13:53:35 <franka> God, it sounds so good to hear The Cure again.  It's been awhile. Currently: "Letter to Elise"
13:53:46 <RemiTurk> oh dear, now my tired eyes see two syntax-somethings here. I definitely need to be here more
13:53:51 <malcolm> Heffalump: are you working with Alastair Reid?
13:53:58 <SyntaxNinja> ahoy
13:54:01 <syntaxfree> syntaxninja is my brother in syntax.
13:54:13 <syntaxfree> do not sneer at me thinking you were sneering at him.
13:54:15 <Heffalump> malcolm: not really. He works in R&D, I work on the productoin compiler.
13:54:16 <RemiTurk> The Syntax Brothers
13:54:24 <syntaxfree> we're not real brothers.
13:54:31 <Heffalump> Though I try to find good reasons to do stuff with him :-)
13:54:35 <syntaxfree> it's like "brothers in arms", except it's "brothers in syntax".
13:54:50 * syntaxfree whistles the Dire Straits tune.
13:54:51 <malcolm> Heffalump: do you guys at ARM still use Haskell for anything?
13:55:17 * RemiTurk thinks he really shouldn't sneer at anyone before having made any actual contribution....
13:55:18 <franka> I like "syntaxfree" better than "SyntaxNinja".
13:55:34 <syntaxfree> it's from Sonic  Youth's "The Ineffable Me".
13:55:45 <syntaxfree> "Can't catch me, I'm syntax free". I suspect it's a song about Lisp.
13:55:55 <syntaxfree> Good song too. Try to find it in soulseek or something.
13:56:09 <Heffalump> malcolm: I use it a bit for generating C.
13:56:14 <franka> Lisp is all about syntax.
13:56:26 <Heffalump> and the thing we were using it for before isn't completely dead yet, though it's close to it
13:56:44 <syntaxfree> I thought Lisp was all about being a dynamic-typed language that supports higher-order functions.
13:56:46 <franka> It leverages its simple syntax.
13:57:10 <eivuokko> Is "Haskell web server with plugins" alive, and if, where?  Or is there some other nice way to use haskell for web-stuff?
13:57:19 <franka> Lisp is a functional language, but it isn't used like one.
13:57:26 <malcolm> Heffalump: did it die because it was difficult to find Haskell people to maintain it, or because it just isn't useful anymore?
13:57:32 <Heffalump> the latter
13:57:48 <franka> All the EmacsLisp code I see looks like imperative code.
13:57:53 <Heffalump> there's no interest in using Haskell for production software
13:58:16 <Simon_> I hereby welcome syntaxfree in the Haskell community.
13:58:38 <xerox> Howdy Simon_
13:58:39 <franka> Which Simon is this?  Marlow?
13:58:55 <SamB> Heffalump: what were you using it for before?
13:58:58 <Simon_> Decipher me or be overwhelmed.
13:58:59 <RemiTurk> franka: he'd be JaffaCake I'd think
13:59:08 <Heffalump> SamB: an experimental compiler
13:59:10 <franka> Aha.  Too convenient.
13:59:21 <SyntaxNinja> franka: who asked
13:59:32 <franka> Asked-uh what-uh?
13:59:43 <SyntaxNinja> (13:55:27) franka: I like "syntaxfree" better than "SyntaxNinja".
13:59:53 <franka> Nobody asked.  I was offering my opinion.
13:59:56 <xerox> Greets Cale.
14:00:07 <Simon_> Simon likes "syntaxfree" better too.
14:00:08 <franka> i do that.
14:00:21 <malcolm> Heffalump: well indeed, few businesses have any interest in using a particular language - but one might hope that they might have an interest in e.g.maintainability of software, speed of development etc.  Although I suspect in ARM's case, "production" means "generates fast code", and haskell rarely wins there.
14:00:44 <Heffalump> malcolm: indeed.
14:00:52 <syntaxfree> ghc-compiled Haskell is prolly faster than Python or Ruby.
14:01:01 <Heffalump> also "has robust, reliable and portable tools"
14:01:06 <syntaxfree> I think Haskell should be measured against Python, not C.
14:01:11 <Heffalump> syntaxfree: we don't release software in those languages either :-)
14:01:46 <franka> Dave Clarke told me yesterday he was planning to use Ruby to implement Reo.  I called him a traitor.
14:01:49 <SamB> Heffalump: what languages do you use?
14:01:50 <franka> :)
14:02:00 <syntaxfree> Ruby's syntax is cool.
14:02:01 <franka> Not that he's ever been really in the Haskell camp...
14:02:02 <malcolm> syntaxfree: I think ARM is worried that their processors are only, like, 300MHz, so every cycle counts
14:02:04 <goron> Heffalump: ARM is like low-power computer chips ARM?
14:02:17 <goron> never mind
14:02:23 <franka> syntaxfree, I thought you were syntax-free!
14:02:24 <syntaxfree> my previous-to-this-one computer was 300 MHz.
14:02:26 <Heffalump> goron: yes
14:02:30 <goron> Heffalump: what exactly do you do?
14:02:38 <Heffalump> malcolm: we mainly ship software that people use on PCs to develop for ARMs
14:02:40 <ndm_> my laptop is 100Mhz
14:02:42 <syntaxfree> the little fucker did everything.
14:02:42 <SamB> low-power in terms of physical power, not in terms of what they can do exactly...
14:02:48 <Heffalump> but speed of said software is still considered an issue
14:02:52 <Heffalump> goron: compiler developer
14:03:01 <malcolm> There are more ARM processors in the world than Intel, AMD and PowerPC put together.
14:03:32 <SamB> this computer is 450 MHz, but those are PII MHz, and it may average less than 300 MIPS...
14:03:36 <goron> Heffalump: Isn't a compiler "done" someday?
14:04:00 * malcolm suspects Cobol compilers are "done"
14:04:07 <Heffalump> goron: well, there are always new architectures to support and new microarchitectures to tune for
14:04:16 <syntaxfree> how fast is Cobol?
14:04:17 <Heffalump> and more optimisations to do for the current world
14:04:17 <SamB> malcolm: what makes you think that?
14:04:30 <malcolm> SamB: think what?
14:04:39 <SamB> don't they need to keep them up with the latest advances in C?
14:04:47 <SamB> or Linux, or something?
14:05:35 <SamB> malcolm: that cobol compilers are done
14:05:58 <syntaxfree> I wonder how fast, in x86 or PPC MhZ terms, is a typical 1960's mainframe.
14:05:59 <malcolm> SamB: "done" in the sense that nobody finds them interesting any more
14:06:20 <SamB> malcolm: well, probably.
14:06:21 <Heffalump> or useful, which is more important in the commercial world
14:06:30 <SamB> but I bet they have people maintaining them anyways!
14:06:39 <Heffalump> (useful in the sense of wanting more features, rather than having the existing ones continue to work as before)
14:06:42 <dcoutts> malcolm, I heard the other day of some people developing 'aspect' cobol (!!?)
14:06:52 <dcoutts> like aspect Java
14:06:55 <malcolm> Ralf Lammel is a Cobol expert...
14:07:07 <Heffalump> dcoutts: desperate attempt to sound hip and trendy, methinks ;-)
14:07:09 <syntaxfree> http://www.cwi.nl/~ralf/AspectCobol/
14:07:18 <Heffalump> anyway, aspects are all a big con.
14:07:37 <goron> Oh, no AspectCobol!
14:07:43 <malcolm> but there is still lots of money in legacy Cobol apps
14:07:48 <xerox> Cobol‽
14:07:51 <dcoutts> Heffalump, glad to hear that from an author of an AspectJ complier :-)
14:08:04 <Heffalump> they're a very effective con.
14:08:08 <syntaxfree> what does "Aspect" even mean?
14:08:28 <Heffalump> (and to be fair I've seen some reasonable compelling examples of them helping modularity)
14:08:47 <malcolm> nhc98 now has an aspect-oriented literate runtime system (courtesy of Tony Sloane)
14:08:55 <dcoutts> Heffalump, I guess that could actually be useful in a cobol context.
14:09:04 <Heffalump> But they're like C++ or Perl. Kitchen sink features with no principles whatsoever.
14:09:18 <syntaxfree> 75% of all business data is processed in COBOL.
14:09:19 <Heffalump> Tony Sloane also got nhc to target ARM, didn't he?
14:09:35 <syntaxfree> There are between 180 and 200 billion lines of COBOL code in use worldwide.
14:09:39 <malcolm> Palm Pilot I think
14:09:52 <dcoutts> Heffalump, the thing with cobol progs (I'm lead to believe) is that people don't understand them anymore. They can merely observe their behaviour. In that case aspects might be a good way of implementing extensions to cobol programs.
14:09:58 <syntaxfree> 15% of all new applications (5 billion lines) through 2005 will be in COBOL.
14:10:13 <malcolm> I had Gofer running on a 8MHz M68000 a few years back.
14:10:25 <Heffalump> malcolm: Palms have had ARMs (XScale) in them for a few years now AIUI
14:10:47 <malcolm> Heffalump: ah, wasn't sure about that.
14:12:01 <Simon_> Remember, Cobol 2002 isn't AspectCobol yet!
14:12:42 * malcolm wonders how many other people are interested in running Haskell on embedded processors
14:13:15 <Heffalump> well, I'd quite like to, just to bring my interests together a bit
14:14:02 <Simon_> I'm interested in simulating embedded processors with Haskell.
14:14:34 <malcolm> Heffalump: I think the forthcoming yhc compiler might be good for cross-compiling.  It has a platform-independent bytecode, so it is just a matter of compiling up a runtime system and linking.
14:15:42 <xerox> What was the fix for lambdabot saying "ghc: failed with error code 1" on @eval ?
14:15:55 <Heffalump> yhc?
14:16:28 <shapr> Simon_: Sounds like fun.
14:16:35 <malcolm> Heffalump: one of our research students has hacked about with nhc98 significantly.  yhc is a working title.
14:16:54 <Heffalump> ah, right. Is that Tom?
14:17:07 <Heffalump> I remember talking to either him or ndm about that at ICFP.
14:17:07 <Godfrey> @localtime Godfrey
14:17:09 <lambdabot> Local time for Godfrey is Wed Oct 19 07:16:43 2005
14:17:09 <malcolm> Heffalump: yup, maybe you met him in Tallinn
14:17:17 <shapr> Simon_: So you'll just write an interpreter?
14:19:09 <SyntaxNinja> shapr!
14:19:34 <shapr> SyntaxNinja!
14:20:01 <SyntaxNinja> what?
14:20:08 <shapr> um, hi!
14:20:21 * SyntaxNinja waves
14:20:40 <malcolm> Simon_ seems to be a n=syntax
14:21:30 <SyntaxNinja> everyone copies off of me
14:22:12 <Simon_> What are you saying about me?
14:22:39 <syntaxfree> n equals what?
14:22:45 <SyntaxNinja> username on the system, maybe
14:22:47 <glguy> type /whois simon_
14:22:51 <glguy> ah
14:22:54 <glguy> that's what you were asking
14:23:09 <Simon_> duh.
14:23:11 <glguy> n means the name you claim to have without ident verifying it
14:23:35 <malcolm> Simon_: we are all wondering who you are, since you very conveniently arrived to welcome syntaxfree into the Haskell community
14:24:02 <malcolm> just after he said he needed one of the Simons to do so :-)
14:24:33 <SyntaxNinja> there's a difference between "being a Simon" and "being any old Simon"
14:24:58 <Simon_> As I said, decipher me, or be overwhelmed.
14:25:15 * SyntaxNinja disappears into the shadows
14:26:01 <malcolm> Simon_: no IMs ?
14:27:25 <shapr> Simon_: You're in chicago
14:27:33 <Simon_> IMs?
14:27:44 <syntaxfree> shapr: Where am I?
14:27:57 <shapr> I think .es, but let me check to be sure...
14:28:20 <shapr> syntaxfree: Miami?
14:28:24 <syntaxfree> nope.
14:28:26 <syntaxfree> Not in the US.
14:28:28 <shapr> huh
14:28:33 <syntaxfree> c'mon, find out! ;-)
14:29:28 <shapr> I dunno, somewhere south of Miami?
14:29:29 <SamB> hmm, I'm on the map now, but my nick badly overlaps sethk's...
14:29:33 <franka> Montevideo.
14:29:45 <syntaxfree> closer, but not there yet.
14:30:01 <syntaxfree> I still haven't put myself on the hawiki map.
14:30:14 <syntaxfree> I frankly didn't have the patience to learn how to do it.
14:30:25 <Simon_> I'm in the map under another nickname.
14:30:47 <franka> Uruguay for sure.
14:30:56 <shapr> syntaxfree: You can either login to the HaWiki (creating an account is easy) or just give your name and address to someone with a login.
14:30:57 <syntaxfree> actually, not Uruguay,  no.
14:31:04 <shapr> address == Lat & Long
14:31:05 <franka> Argentina?
14:31:06 <syntaxfree> I have a login.
14:31:12 <syntaxfree> this is me:
14:31:13 * RemiTurk notes it's quite suspect you're called n=syntax@d64-180-119-35.bchsia.telus.net
14:31:16 <syntaxfree> @hawiki DiegoNavarro
14:31:17 <lambdabot> http://www.haskell.org/hawiki/DiegoNavarro
14:31:21 <RemiTurk> (where you=Simon_)
14:31:36 <shapr> too easy.
14:32:27 <xerox> I should make an hawiki page too!
14:33:13 <syntaxfree> my hawiki page is huge already, and it's prolly gonna grow.
14:33:30 <syntaxfree> I wanna keep it as a scrapbook of idle mathematical ideas other people can pick up.
14:34:38 * SamB notes that the coordinates he put in are actually somewhere in the woods, but they were the closest gridpoint to his home, and not really that far from his house ;-)
14:35:02 <syntaxfree> google maps are a good way to find your lat & long
14:35:14 <syntaxfree> shapr: what is the "address"  in that?
14:35:29 <shapr> Your latitude and longitude.
14:35:37 <syntaxfree> I mean.
14:35:42 <syntaxfree> address = lat & long
14:35:47 <syntaxfree> what is "address"' there?
14:36:21 <SamB> in fact, the coordinates I put in are on the philadelphia side of the creek...
14:38:18 <glguy> Does anyone know the website that has the source code from "The Haskell Schoo of Expression" ?
14:38:31 * RemiTurk goes to sleep
14:38:34 <syntaxfree> SamB: find your exact location at maps.google.com
14:38:37 <RemiTurk> have a nice day
14:38:58 * xerox found a nice thing in maps... (let me show you.)
14:39:14 <SamB> hey, this map has the El station on the wrong street!
14:39:42 <SamB> syntaxfree: they don't seem to have very good maps of right where I am...
14:39:51 <xerox> http://maps.google.com/maps?ll=62.165502,-141.078186&spn=0.573831,2.447479&t=k&hl=en
14:40:04 <syntaxfree> samb: they don't have very good maps of where I am either.
14:40:17 <syntaxfree> which is odd, as other parts of Rio de Janeiro have excellent images.
14:40:24 <syntaxfree> oh, there you are. I blurted out where I l ive.
14:40:59 * SamB tries giving his actual address
14:41:30 <SamB> I suppose I could always try the satellite pictures ;-)
14:41:44 <syntaxfree> google maps doesn't have brazilian addresses. But I type "Rio de Janeiro", and find my house in the satellite.
14:42:11 <syntaxfree> I've been trying to find the Moulin Rouge in Paris.
14:42:18 <syntaxfree> but Paris is huge! No luck :~
14:42:30 <syntaxfree> I do have Versailles, though.
14:43:22 <rep> i've become an expert at finding my house in google maps
14:43:35 <rep> (in rome, italy)
14:44:24 <syntaxfree> me too :)
14:44:37 <syntaxfree> not that, but my university, my girlfriend's place, etc.
14:44:41 <syntaxfree> I wonder what this is: http://maps.google.com/maps?q=Moscow&ll=55.781183,37.626618&spn=0.002425,0.010274&t=k&hl=en
14:45:34 <malcolm> syntaxfree: following your suggestion, I just found the eiffel tower
14:45:52 <syntaxfree> yes, the eiffel tower is not hard to spot :)
14:46:00 <syntaxfree> Let me show you a picture of my university.
14:46:36 <syntaxfree> http://maps.google.com/maps?q=rio+de+janeiro&ll=-22.978989,-43.232628&spn=0.003710,0.005249&t=k&hl=en
14:47:40 <malcolm> syntaxfree: the large circular thing north of Paris is the Stade de France
14:49:32 <gaal> ndm_: about?
14:49:40 <ndm_> gaal, yep
14:49:50 <gaal> heya :) 0.08 just sent.
14:49:54 <syntaxfree> malcolm: yes, but that large circular thing I showed you is in Moscow.
14:49:58 <gaal> passes all tests but one.
14:50:10 <malcolm> syntaxfree: oops...
14:50:27 <SamB> wow, 69th street terminal looks neat!
14:50:54 <Simon_> this is my place: http://maps.google.com/maps?q=Chicago&ll=41.857464,-87.650675&spn=0.003211,0.010274&t=k&hl=en
14:51:10 <gaal> @shapr, masquerading as a bot again?
14:51:11 <lambdabot> Unknown command, try @listcommands.
14:51:15 <gaal> heh.
14:51:16 <ndm_> gaal: cool! just committing and testing it
14:51:43 <syntaxfree> @seen Simon_
14:51:44 <lambdabot> Simon_ is in #haskell. Last spoke 49 seconds ago.
14:51:50 <syntaxfree> @seen eieiei
14:51:51 <lambdabot> eieiei has changed nick to syntaxfree.
14:51:51 <lambdabot> You are in #haskell. Last spoke just now.
14:51:57 <SamB> I live about here: http://maps.google.com/maps?q=104+glencoe+road,+upper+darby,+PA&spn=0.011406,0.045662&t=k&iwloc=A&hl=en
14:52:05 <syntaxfree> I love how lambdabot still remembers my old nickname.
14:52:46 <syntaxfree> now look for "One Microsoft Way" :-)
14:53:46 <shapr> gaal: What did I do?
14:55:42 <syntaxfree> this is One Infinite Loop: http://maps.google.com/maps?q=Chicago&ll=41.857464,-87.650675&spn=0.003211,0.010274&t=k&hl=en
14:55:49 <syntaxfree> haha. not that ;-)
14:56:05 <syntaxfree> http://maps.google.com/maps?q=apple+computer+cupertino&ll=37.400395,-122.032024&spn=0.003425,0.006951&t=k&hl=en
14:56:40 <gaal> shapr: you have a @^W^W^Wahhh, no this is just irssi decorating your name. silly me.
14:58:29 <adept> syntaxfree: that thing in moscow looks like Luzhniki stadium
14:59:02 <syntaxfree> adept: ever been to Moscow?
15:01:40 <SamB> so these coordinates, they are for the center of the view?
15:01:51 <adept> syntaxfree: several times, slightly less than "plenty" :)
15:02:09 <adept> syntaxfree: way too much for my liking :)
15:02:17 <int80_h> winamp can stream video, I was aware that iTunes could
15:02:26 <int80_h> I mean, I wasn't aware
15:05:25 <dolmen> syntaxfree, le Moulin Rouge: http://maps.google.co.uk/maps?q=paris+France&ll=48.883725,2.332127&spn=0.004591,0.012883&t=k&hl=en
15:05:45 <malcolm> syntaxfree: I think this might be the Moulin Rouge: http://maps.google.com/maps?ll=48.882716,2.337363&spn=0.002721,0.008225&t=k&hl=en
15:05:56 <dcoutts> anyone know much about haxml? how do I ignore white space between tags? (The behaviour changed between versin 1.12 and 1.13.)
15:05:57 <dolmen> ;)
15:06:40 <malcolm> dolmen: so which of us is right?
15:07:03 <Heffalump> dcoutts: I can't imagine anyone here knowing anything about HaXml.
15:07:19 <malcolm> dcoutts: what do you mean, ignore whitespace?  I thought that was done automatically.
15:07:36 <dcoutts> malcolm, yeah, I though so too. It used to do that.
15:07:54 <malcolm> dcoutts: which bit of HaXml are you using?
15:08:03 <dcoutts> Now I get (CString "\n   ") between all my tags.
15:08:11 <dolmen> malcolm, I'm right. I searched the address on pagesjaunes.fr. It has street maps
15:08:21 <dcoutts> malcolm, the parsing and document structure
15:09:07 --- mode: shapr set -o shapr
15:09:21 <malcolm> dcoutts: generic parser, not a type-ful one?
15:09:28 <dcoutts> malcolm, yes
15:09:34 <dcoutts> haxml version 1.12 filtered out the white space between tags. version 1.13 leaves them in
15:09:48 <shapr> gaal: Ah yes, I was getting rid of some join/leave spam.
15:10:40 <malcolm> dcoutts: I think keeping whitespace is a bugfix.  You can probably write a simple filter to eliminate whitespace-only texts.
15:10:50 * visser is away: zzzz
15:13:12 <SamB> why do you think it uses that funky ><foo style?
15:13:28 <malcolm> dcoutts: deep ((all isSpace ? none : keep) `o` txt) or something
15:13:42 <Lemmih> xerox: pong.
15:14:04 <syntaxfree> deep?
15:14:27 <xerox> Lemmih!
15:15:00 <Lemmih> xerox: You fixed the ghc-api building problem?
15:15:22 <SamB> syntaxfree: yes, a special combinator reserved for deep intuition!
15:15:29 <malcolm> syntaxfree: deep is a HaXml combinator.  a bit like a fold
15:15:31 <xerox> Lemmih: is there a way to tell CommonSense where to look for modules?  The syntax checking stops on an 'can't find it' import usually (because the module imported is in the current sources hierarchy, not installed yet)
15:15:48 <xerox> Lemmih: yeah, removing 'util' from the Cabal.cabal file did it.
15:16:23 <Lemmih> xerox: No, not yet. We need to hack the Cabal/project managing code first.
15:16:27 <xerox> Lemmih: JaffaCake found the bug consisting in GHC raising an exception before or instead of printing an error message.  With the error message, finally, Duncan found the problem, I believe.
15:16:40 <dcoutts> malcolm, thing is, I'm not using haxml in the best way. I never figured out how to use the filter combinators for simple extraction of xml into a structured haskell type. So my prog is just recusing over the xml structure and converting into an internal reprenetnation.
15:17:02 <syntaxfree> I see.
15:17:06 <dcoutts> unforunatley the xml docs I'm working with do not have a well defined dtd. they are rather sloppy
15:17:12 <syntaxfree> it seemed lie Haskell poetry.
15:17:21 <syntaxfree> "all is space, space is deep, space keeps no one", etc.
15:17:54 <malcolm> dcoutts: OK.  wait for 1.14.  It is going to have a completely new secondary parser.  http://nhc98.blogspot.com/
15:17:59 <xerox> Lemmih: anyway, CommonSense is simply great.
15:19:25 <dcoutts> malcolm, the filter stuff seems like it's deigned for xslt-like duty. I'm just doing "Xml2Haskell", but of a sloppy document kind.
15:20:06 <xerox> dcoutts, so, with the installer, I only need to install GHC and that, and compile nymphaea?
15:20:35 <ndm_> gaal: i added a GhcExt's test
15:20:52 <ndm_> which neither hadhtml or hihoo passes :)
15:21:06 <gaal> ndm_: thanks, will look, but going to bed now. :)
15:21:26 <malcolm> dcoutts: have a look at my blog (address above)  In 1.14, the XmlContent class will use parsec-like combinators, so you can either use DtdToHaskell or just write your own.  The basic primitve parsers know how to ignore whitespace.
15:21:26 <ndm_> the ones in GhcExt's are less important to get right, since they will probably get screwed up by hoogle later on anyway...
15:21:29 <ndm_> ok, good night
15:21:45 <dcoutts> malcolm, sounds nice.
15:21:45 <gaal> heh :)
15:25:05 <dcoutts> xerox, well actually I wanted to ask you about that. Should the gtk2hs installer require the seperate gtk installer and then work with various gtk and ghc versions? or should it come bundled with gtk and only work with one gtk & ghc combination?
15:25:18 <shapr> malcolm: Hey, you haven't posted to your blog recently.
15:25:30 <xerox> dcoutts, the first idea sounds nicer... is it much more work?
15:25:34 <malcolm> shapr: how many days?
15:25:46 <xerox> (...but I think it should bundle cairo in either case)
15:25:47 <shapr> it's been a week!
15:26:12 <dcoutts> xerox, hmm
15:26:27 * dcoutts has to go now
15:26:37 <xerox> See you soon :-)
15:26:44 <dcoutts> yep
15:26:44 <malcolm> shapr: a week in which I have started to teach a course, write an exam paper, and started to supervise an undergrad project..  not much time for hacking
15:26:52 <shapr> ok ok :-)
15:26:59 <shapr> At least you have reader(s) though.
15:28:04 <malcolm> oh, oh, has anyone left a comment yet...?
15:28:24 * malcolm goes to check
15:28:40 <xerox> Goodnight folks!
15:29:40 <shapr> malcolm: I would have left a comment about HaXml-2, but I don't have a blogger account.
15:30:29 <malcolm> shapr: I only signed up to leave a comment on someone elses, and thought "why not?"
15:30:52 <ndm_> i found livejournal was easier to post to and to update
15:31:02 <ndm_> less features, but quicker to just send a quick post off to
15:31:10 <malcolm> I was just about to ask if there were better blog hosts available
15:31:42 <ndm_> and it allows anon posting
15:32:08 <ndm_> and has easy options to make posts friends only, if the need ever arises
15:32:30 <syntaxfree> so does wordpress.
15:32:51 <malcolm> I looked into wordpress, but couldn't make head nor tail of their website.
15:33:06 <syntaxfree> click on "Download".
15:33:07 <syntaxfree> Unzip.
15:33:11 <syntaxfree> upload to your server
15:33:12 <Cale> what about running your own httpd? :)
15:33:12 <tic|away> it works, but not at all extensible.
15:33:16 <syntaxfree> open "install.php".
15:33:17 <shapr> I use PLog, written in Haskell, of course.
15:33:26 <syntaxfree> hehe :)
15:33:27 <malcolm> syntaxfree: the "your server" bit was the part I had trouble with
15:33:32 <syntaxfree> Wordpress has a huge community.
15:33:42 <syntaxfree> It's unhackable, though.
15:33:53 <syntaxfree> I can't make head or tail of its code.
15:34:04 <malcolm> I like the look of the (gtk?) blog on haskell.org, which I think is wordpress
15:34:24 * shapr finally gives in and creates an account for comments.
15:34:27 <ndm_> livejournal is all hosted
15:34:39 <syntaxfree> There are zillions of wordpress readymade designs out there.
15:34:50 <syntaxfree> Making'em your own is usually a matter of changing colours.
15:34:51 <ndm_> you can get clients, but you can also just get a simple textbox, type text in it, and hit publish
15:35:01 <ndm_> on the web, of course
15:35:19 <syntaxfree> www.navarro.mus.br/diego  <-- this is my wordpress web log :)
15:35:20 <shapr> I like running my own blog on my own server with all the source in Haskell. It's motivating.
15:35:29 <shapr> hiya wonea, learning Haskell?
15:35:34 <ndm_> the blogger thing about publishing indexes and entire blogs scared me...
15:35:40 <malcolm> ndm_: that's what you get with blogger too
15:36:07 <ndm_> yes, but it takes a lot longer, and feels a lot more complex
15:36:07 <wonea> shapr: I'm learning hope at the moment
15:36:20 <ndm_> the idea that i can't just type a url and have it detect and url'ise it worries me
15:36:25 <malcolm> ndm_: yeah, publishing index etc is just designed to confuse.  I don't think it actually does anything.
15:36:39 <shapr> wonea: Ah, nifty language. I think ADTs started with Hope.
15:36:51 <ndm_> malcolm, its all based around ftp'ing the contents up every time anything happens
15:36:57 <syntaxfree> ADTs?
15:36:58 <ndm_> not a server side thingy
15:37:00 <syntaxfree> Hope?
15:37:01 <wonea> Cool, is haskell much different?
15:37:12 <shapr> I think so. I've only read about Hope.
15:37:14 <franka> I think ADTs started in, er, whatsitcalled...
15:37:17 <malcolm> shapr: blog hosting in Haskell.  freely available?
15:37:22 <franka> holdonasec
15:37:29 <shapr> malcolm: er.. yes?
15:37:35 <franka> CLU
15:37:40 <shapr> malcolm: Give me a public ssh key.
15:37:52 <malcolm> shapr: I meant the code...
15:37:55 <shapr> Oh, sure.
15:38:07 <syntaxfree> http://www.plogworld.net/
15:38:12 <shapr> There's Peter Gammies PLog, and Björn Bringert's BloB
15:38:29 <franka> http://www.absoluteastronomy.com/encyclopedia/c/cl/clu_programming_language2.htm
15:38:51 <malcolm> BloB?  oh no, someone's taken the name already, before we released our diagram editor
15:38:53 <Cale> Wikiclone'd!
15:40:14 <wonea> is haskell hard to learn?
15:40:20 <shapr> plog is http://www.scannedinavian.org/~shae/plog-0.0.6.tar.gz, and a bit picky to setup, BloB is here - http://www.bringert.net/projects.html
15:40:41 <shapr> BloB is much nicer, but requires HaskellDB.
15:41:03 <Cale> wonea: depends on your background -- it may actually be easier to learn it if you've never been exposed to imperative languages :)
15:41:34 <wonea> I guess c, java, pascal don't really count?
15:41:54 <Cale> right, they might actually work against you a bit
15:42:14 <Cale> but the basics aren't hard
15:42:20 <wonea> would learning haskell help me understand formal methods?
15:42:24 <Cale> though there's a lot of cool stuff which you can get into
15:42:35 <Cale> probably, actually
15:42:49 <wonea> great
15:42:53 <Cale> Formal methods are easier to apply to Haskell code
15:43:03 <ndm_> Cale, but no one ever does...
15:43:19 <Cale> for example, equational reasoning works
15:43:19 <Cale> ndm_: I do :)
15:43:44 <ndm_> Cale, i do too - but it doesn't have the same depth of theory as something like model checking or Z
15:43:49 <Cale> so you can prove that one function is the same as another much as you would in mathematics
15:44:19 <wonea> I see, interesting
15:44:23 <Cale> still, I think it's quite useful :)
15:44:43 <wonea> what do you use haskell for?
15:44:50 <Cale> It's nice to be able to give proofs that a piece of code does what you want it to
15:45:15 <Cale> and even if you never do it explicitly, the fact that it's easy makes it easier to think about the code as you write it
15:45:21 <Cale> Haskell is used for lots of stuff
15:45:38 <wonea> I noticed the OpenGL plugin
15:45:44 <wonea> :-)
15:46:01 <Cale> The biggest project I've written in it was a pipeline scheduler and register allocator for PPC + Altivec code.
15:46:15 <syntaxfree> heya Cale.
15:46:23 <Cale> hi
15:46:36 <tic|away> shapr, ugh, looking at Bringert's site makes me feel bad. :(
15:46:38 <Cale> (which was part of a compiler for a high level signal processing language)
15:47:04 <syntaxfree> wonea I can't make head or tail of Java, but I'm getting to understand Haskell real fast.
15:47:07 <Cale> xerox (who just went to bed) and I have been working on a cool little app to draw L-Systems
15:47:11 <wonea> wow, sounds quite low level
15:47:29 <Cale> wonea: yeah, but I didn't have to think about it in that way :)
15:47:37 <syntaxfree> what are L-systems?
15:48:09 <Cale> My code came to ~1000-1200 lines, which was about 1/2 documentation, and that included a parser.
15:48:27 <wonea> syntaxfree: when you program in a function style is harder to switch?
15:48:45 <Cale> L-Systems are a particular kind of string rewriting system which can be used to construct fractals when given a geometric interpretation
15:49:03 <wonea> thats quite a tight project, what was the run time size approximately?
15:49:25 <syntaxfree> wonea: what do you mean?
15:49:34 <shapr> tic|away: Why?
15:49:50 <syntaxfree> I knew Scheme, and had been writing functional-style things in Python.
15:49:51 <Cale> The memory footprint was reasonable, I never really looked too hard at it
15:50:26 <wonea> suppose people don't really look at those kinds of things
15:50:28 <howya-doin> I saw an application in a meeting jus now by AGM
15:50:30 <tic|away> shapr, 'cause he's the master student/haxx0r.
15:50:31 <Cale> It would have been 10-15 times that amount of code in C
15:50:40 <wonea> wow
15:50:48 <howya-doin> it basically records phone calls and the timing back to a server from a client box
15:51:00 <howya-doin> then has some redundancy
15:51:03 <wonea> syntaxfree: I mean coding in Haskell is completely different to an object orientated approach
15:51:10 <howya-doin> and management is spening millions
15:51:12 <howya-doin> to buy it
15:51:19 <syntaxfree> I never really "got" OOP.
15:51:20 <Cale> http://vx.hn.org/autoshare/Screenshot-Snowflake-Random.png -- an L-System snowflake
15:51:28 <syntaxfree> Functional programming is closer to the way I see problems.
15:51:47 <howya-doin> can fuctional programming interface easily with databses
15:51:58 <interferon> is there any information on using functional programming with database-backed websites?
15:51:58 <howya-doin> or do you not even need a database fo a functinal program?
15:52:12 <howya-doin> are relationla databases not neeed
15:52:13 <Cale> http://vx.hn.org/autoshare/branchy.png -- a fern/tree thing
15:52:18 <howya-doin> can you builkd a function base?
15:52:21 <syntaxfree> I know there's a Scheme-PostgreSQL interface.
15:52:30 <howya-doin> scheme seems very intersting
15:52:31 <syntaxfree> Quite a few people do web back-end stuff with Scheme+PostgreSQL.
15:52:35 <howya-doin> as well as clisp
15:52:37 <howya-doin> really?
15:52:52 <shapr> tic|away: Don't feel bad about that, take it as an inspiration to do better!
15:52:54 <howya-doin> scheme +postgresql is it ez and fast and scalable?
15:53:02 <interferon> howya-doin, why would functional programming have any effect on using a database or not?
15:53:09 <howya-doin> microsoft app developed by AGM seems fast n EZ
15:53:16 <howya-doin> I dont  know
15:53:25 <shapr> Haskell's HSQL talks to PostgreSQL, MySQL, and some others.
15:53:38 <howya-doin> I want to bring business solutions to market that can handle data and then communicate to other buinsesses
15:53:41 <shapr> HaskellDB talks to HSQL in an elegant manner.
15:53:49 <howya-doin> hsql?
15:53:55 <howya-doin> what is haskellDB?
15:54:00 <wagle> syntaxfree: i learned system F first, then java got way more interesting
15:54:27 <shapr> HSQL is part of the http://HToolkit.sf.net/ project on SourceForge, HaskellDB is http://haskelldb.sf.net/ and
15:54:31 <shapr> @wiki HaskellDbTutorial
15:54:32 <lambdabot> http://www.haskell.org/hawiki/HaskellDbTutorial
15:55:14 <interferon> howya-doin, how old are you?
15:55:24 <interferon> 8?
15:55:44 <tic|away> shapr, that'd be the constructive way, yeah. :P
15:56:03 <syntaxfree> wagle: what is system F??
15:56:15 <howya-doin> im 32
15:56:27 <wagle> @google "system F:"
15:56:28 <lambdabot> http://www.purple-eye.com/
15:56:32 <wagle> @google "system F"
15:56:33 <lambdabot> http://www.purple-eye.com/
15:56:37 <wagle> ?
15:56:40 <puzzles> wagle: looking for the artist?
15:56:43 <Cale> interferon: what kind of comment is that?
15:57:31 <shapr> howya-doin: ooh, I'm 34!
15:57:37 <wagle> i wasnt lucky
15:58:20 <wagle> http://en.wikipedia.org/wiki/System_F
15:58:39 <Cale> interferon: try to be nice to people who come here :)
15:58:41 <wagle> syntaxfree: ^^
15:58:58 <puzzles> wagle: there's a popular artist by the name of System F (realname: Ferry Corsten)
15:59:04 <shapr> wagle: Neat - http://www.purple-eye.com/pee/default.asp?f=art&aid=45&pname=+System+f
15:59:11 <shapr> puzzles: yeah, exactly
15:59:16 <wagle> puzzles: i didnt know that
15:59:22 <syntaxfree> hmm. this System F is related to Java?
15:59:39 <wagle> system F does subtypes
15:59:59 <puzzles> system f also does some lovely electronic music
16:00:39 <syntaxfree> in electronic music, nothing saves but Squarepusher, Autechre and Coil.
16:00:43 <interferon> Cale, he/she was flooding the channel with asinine questions and spouting marketingspeak nonsense
16:00:52 <tic|away> mmmm squarepusher
16:00:56 <shapr> I never got into Squarepusher. I do like Autechre though.
16:01:01 <tic|away> syntaxfree, how do you like Venetian Snares?
16:01:12 <Cale> interferon: If you have nothing nice to say...
16:01:35 <interferon> is fp cool?
16:01:40 <interferon> can you do loops in fp?
16:01:44 <interferon> does fp work with databases?
16:01:44 <Cale> Even people who are interested in business should be able to take advantage of Haskell :)
16:01:46 <shapr> interferon: aw c'mon, be nice
16:01:47 <interferon> does fp work with cpus?
16:01:48 <wagle> the helloworld program for schemeheads is to write a scheme interpreter in each new language..  so, understanding subtypes made certain ways of doing things (using virtual method dispatch instead of if's, etc) much more obvious
16:01:51 <interferon> does fp even _need_ cpus?
16:02:03 <interferon> i want to create real-word, standards-compliant solutions
16:02:07 <interferon> blaaaaaaar
16:02:14 <wagle> interferon: no, you are just being rude
16:02:18 <shapr> interferon: Questions denote a need for information. You gotta start somewhere.
16:02:32 <shapr> It's better to ask than to not know.
16:02:37 <Cale> and just because someone is new and ask questions whose answers you'd find obvious, doesn't mean that they shouldn't be answered
16:02:41 <Cale> asks*
16:03:02 <puzzles> like me, i'm simply here to badger people about noisecore music, i know nothing of haskel except that legendary quicksort
16:03:07 <puzzles> haskell, even
16:03:08 <int80_h> wow I like this channel. Too many snotty channels around
16:03:13 <syntaxfree> noisecore music? Merzbow? :-)
16:03:27 <syntaxfree> this channel is amazing in that the gurus are very helpful to total newbs.
16:03:39 <int80_h> that would be me total newb
16:03:55 <puzzles> mmm, that's rare, especially in coding circles
16:03:56 <shapr> interferon: I first joined the #perl channel many years ago on EFNet, and they banned me for asking about syntax highlighting. So I learned Python instead.
16:03:58 <syntaxfree> I'm 98% a newb.
16:04:02 <int80_h> yeah I'm through chapter three of the book I'm working through
16:04:10 <syntaxfree> shapr: Haha.
16:04:12 <puzzles> thet's one of the nice things about lesser-known languages like haskell
16:04:22 <puzzles> everyone coming into it is a n00b
16:04:28 <syntaxfree> not really.
16:04:30 <shapr> A few years back, #python started banning people for asking questions. But the thing is, newbies have to ask the most basic simple questions just to get started.
16:04:37 <puzzles> syntaxfree: i say they are so it's true!
16:04:43 <puzzles> syntaxfree: don't debate it!
16:04:45 <Cale> Everyone remembers when they were new.
16:04:46 <int80_h> well the most basic questions are answered somewhere
16:05:01 <int80_h> so asking shows a lack of initiative
16:05:04 <syntaxfree> Haskell is full of gurus. The thing is, many Haskell gurus are also top academics. Academia teaches you a thing or two about humbleness.
16:05:09 <Cale> and understands that the help others gave them was useful and important
16:05:14 <puzzles> mmm
16:05:25 <syntaxfree> No disgruntled teens posing as Haskell gurus.
16:05:31 <shapr> int80_h: Sometimes you don't know where to search.
16:05:36 <puzzles> one thing i find is paramount to learning a language is learning how to learn for yourself
16:05:38 <syntaxfree> unlike what you might see at #gentoo ;-)
16:05:54 * int80_h pretends to be a disgruntled teen prtending to be a guru
16:06:01 <puzzles> if you can teach yourself a programming language, you won't ever run into problems with asking questions
16:06:03 <int80_h> u r s0 l4m3r
16:06:15 <int80_h> how was that?
16:06:25 <interferon> completely awesome
16:06:27 <puzzles> int80_h: wow, that's an incredible g3n700 impression
16:06:40 * syntaxfree apologizes for feeding the trolls.
16:06:53 <int80_h> I'm a troll?
16:06:56 <Lemmih> @elite Yeah, sweet!
16:06:56 <lambdabot> y3AH, sWeEt!
16:06:57 * int80_h sniffs
16:07:05 <puzzles> now if nobody minds, i drank half a bottle of ny-quil because i couldn't sleep last night, and i'm damn sure going to tonight
16:07:10 <puzzles> so i'm off...
16:07:22 <SyntaxNinja> @elete I am a hacker
16:07:23 <lambdabot> I 4/\/\ a |-|A(x3R
16:07:38 <syntaxfree> @elite Lieben heisst lieben
16:07:39 <lambdabot> li383n hEi5S+ lI3B3N
16:07:51 <wchogg> Does anyone actually speek in "leet" in a non-ironic fashion anymore?
16:07:56 <Lemmih> Hi SyntaxNinja.
16:08:00 <Cale> gamers
16:08:05 <SyntaxNinja> @elete hiya lemmih
16:08:06 <lambdabot> HIy4 1e/\/\/\/\Ih
16:08:15 * shapr hugs int80_h
16:08:19 <syntaxfree> Gamers don't speak number-and-symbol elite. They abbreviate.
16:08:22 <int80_h> goober kids who think it makes them look cool
16:08:23 <shapr> int80_h: I don't think you're a troll :-)
16:08:34 <Cale> syntaxfree: yeah
16:08:39 <int80_h> shapr: oh good. My self-steem was on the loine there. ;)
16:08:48 <Cale> it's mutated as it changed communities there
16:09:01 <ndm_> SyntaxNinja: did you get my cabal bug report?
16:09:11 <syntaxfree> well, I've never gamed online. But I imagine trying to type in the middle of a Quake game.
16:09:13 <SyntaxNinja> ndm_: wrt what?
16:09:19 <dons> moin
16:09:30 <ndm_> quotes in the %PATH% on windows
16:09:40 <int80_h> at sdf, the newbies always come in asking...
16:09:47 <int80_h> @elite how to hack hotmail?
16:09:48 <lambdabot> |-|OW +0 HacK hOT/\/\ai1?
16:09:50 <SyntaxNinja> ndm_: yeah, I probably did. it's in my backlog of mail that I still haven't gotten to after coming back
16:09:56 <int80_h> lambdabot, exactly
16:10:05 <ndm_> cool, yeah i figured you'd have a lot to get through
16:10:08 <SyntaxNinja> ndm_: but I promise I'll get to it soon :)
16:10:33 <int80_h> then we have fun at their expanese by suggesting things like
16:10:41 <ndm_> SyntaxNinja: it can wait, its really not that important...
16:10:41 <int80_h> @elite try re-routing the encryptions
16:10:42 <lambdabot> try r3-ROU+INg 7he 3NCRyPTIOnS
16:10:55 * int80_h sucks at typing today
16:10:57 <shapr> g'day dons
16:11:58 <Lemmih> dons: I can't get hs-plugins working with ghc 6.5 from this week /-:
16:12:18 <SyntaxNinja> hi dons
16:19:15 <dons> Lemmih, ok. i'll have a look
16:20:08 <dons> Krasimir's evil unboxed FPS code looks interesting
16:20:34 <dons> but there's something weird about his machine, I think.
16:20:45 <shapr> autrijus has more hair than I do. I'm jealous.
16:23:39 <dons> Lemmih, so no idea what's causing this bug in hs-plugins yet?
16:25:31 <sethk> dons, can you point me at something that explains what to do with hs-plugins?  I downloaded it and built it.  "make install" appeared to do nothing except create an empty file.  And of course make for yi then complains about missing hs-plugins
16:25:32 <Heffalump> shapr: so do Igloo and droundy.
16:25:40 <shapr> Hm, true.
16:25:46 <sethk> dons, so I'm missing a step between make of hs-plugins, and make of yi
16:25:47 * shapr is even more jealous now.
16:25:56 <SyntaxNinja> and malcolm
16:26:01 <shapr> oh right
16:26:11 <SyntaxNinja> you all have more hair than me... but I'm OK with that.
16:26:15 <SyntaxNinja> <--- used to have really long hair
16:26:24 <shapr> Ok, I officially withdraw from the "Haskellers Hair" contest.
16:26:35 <sethk> Cale, we discussed last night using the StateT monad with IO
16:26:39 <Heffalump> SyntaxNinja: even me?
16:26:50 <sethk> Cale, I have a function working that has access to both IO and StateT functions
16:26:58 <sethk> Cale, I can't figure out how to call that function from main
16:27:08 <sethk> Cale, the function returns m ((a, String), String)
16:27:09 <SyntaxNinja> Heffalump: probably
16:27:43 <Cale> sethk: for any m, or some particular m?
16:28:03 <sethk> Cale, ghci shows m, but the function is wrapped with runStateT (...)
16:28:18 <Cale> MonadState m?
16:29:19 <Cale> You just get an IO action by applying runStateT and then passing it an initial state
16:29:21 <sethk> Cale, no, let me paste
16:29:35 <sethk> iow :: (MonadState [Char] (StateT [Char] m),
16:29:36 <sethk>         Num a,
16:29:36 <sethk>         MonadIO (StateT [Char] m)) =>
16:29:36 <sethk>        t -> [Char] -> m ((a, [Char]), [Char])
16:29:36 <sethk> *
16:29:37 <dons> sethk, hs-plugins cabalised. So: runhaskell Setup.hs configure ; runhaskell Setup.hs build ; runhaskell Setup.hs install
16:29:45 <sethk> dons, thanks
16:29:53 <SyntaxNinja> sweeeeet
16:29:57 <dons> grab the latest hs-plugins from darcs, for best results
16:29:59 <sethk> Cale, that (what you said) is what I can't do.
16:30:07 <Cale> sethk: m is allowed to be IO here
16:30:27 <sethk> Cale, ok.  When I do what I think you are saying, ghci complains with:
16:30:40 <Cale> er hang on, t?
16:30:48 <Cale> are you not using that parameter?
16:31:11 <sethk> Cale, t?
16:31:20 <Cale> t -> [Char] -> ...
16:31:23 <sethk> Cale, "using t" has no meaning for me
16:31:38 <Cale> using the parameter of the function that's in that spot
16:31:40 <sethk> Cale, I have this function, runStateT ( whatever) which returns the type I pasted
16:31:47 <Cale> like in your definition of iow
16:31:47 <sethk> Cale, I want to call that function from main
16:31:53 <Cale> the first parameter to that function
16:32:01 <Cale> do you use it in the function body?
16:32:03 <sethk> the only parameter is the state
16:32:12 <sethk> do I use it?  no, not yet
16:32:17 <Cale> okay
16:32:22 <Cale> I can tell that from the type :)
16:32:25 <sethk> I could use it for test purposes
16:32:25 <Cale> okay
16:33:18 <Cale> so, just:  iow something initialState
16:33:22 <Cale> from main
16:33:24 <sethk> Cale, ok, now the state type is set, but it doesn't really change my question
16:33:36 <sethk> the type is now:  iow :: (MonadState [Char] (StateT [Char] m),
16:33:36 <sethk>         MonadIO (StateT [Char] m),
16:33:36 <sethk>         Num a) =>
16:33:36 <sethk>        String -> [Char] -> m ((a, [Char]), [Char])
16:33:48 <sethk> so I used the parameter which happens to be of type String
16:33:56 <Frederick> guys newbie question here, I know it is simple to solve http://epiphanic.org/util/pastebin.php?post=40 why is that so wrong?
16:34:07 <Cale> so pass in the two strings, and you'll get something you can run from main
16:34:08 <sethk> Cale, but I can't do in main:       iow "test"
16:34:12 <Cale> two strings
16:34:21 <sethk> Cale, two strings?  What is the second one for?
16:34:26 <Cale> well, look at your type
16:34:34 <Cale> you weren't using the first one before
16:35:01 <Cale> Frederick: square x isn't an action
16:35:05 <sethk> I don't understand, then.  runStateT has the type  s -> (...)       takes only one parameter the initial state
16:35:12 <Cale> no
16:35:12 <sethk> Cale, so why am I passing two parameters
16:35:26 <Cale> @type Control.Monad.State.runStateT
16:35:28 <lambdabot> forall s a (m :: * -> *).
16:35:28 <lambdabot> Control.Monad.State.StateT s m a -> s -> m (a, s)
16:35:47 <Cale> it takes a StateT s m a, and an s, and gives an m (a,s)
16:36:07 <sethk> Cale, in the past when I've used runState, I did not pass the monad to it
16:36:11 <Frederick> Cale, do you mind corretting it for me or giving me a tip of the mistake, I want to define a function as you can see
16:36:19 <Cale> sethk: you did
16:36:26 <sethk> Cale, no, I have the code in front of me
16:36:32 <Cale> Frederick: what do you want the program to do when it's run?
16:36:37 <Cale> sethk: can I see?
16:36:39 <sethk> Cale, we said that form uses runState as a constructor
16:36:44 <sethk> Cale, yes, hold on ...
16:37:13 <Frederick> I want to pass a number to it and have it squared in return
16:37:25 <Cale> Frederick: so you want something like:
16:37:35 <Cale> main = do line <- getLine
16:37:38 <sethk> testStateMonad :: String -> (String, String)
16:37:38 <sethk> testStateMonad = MS.runState( do s1 <- MS.get
16:37:38 <sethk>                                  MS.put "value in testStateMonad"
16:37:38 <sethk>                                  s2 <- MS.get
16:37:38 <sethk>                                  return s1 )
16:37:51 <sethk> main = do (s, v) <- return (testStateMonad "hello")
16:37:51 <sethk>           print s
16:37:51 <Cale>         print (square (read line))
16:38:06 <Frederick> Cale, can you please post in pastebin?
16:38:11 <Frederick> cause things here get messed
16:38:12 <Cale> @paste
16:38:13 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
16:38:21 <sethk> Cale, so I call testStateMonad, which is wrapped in runState, with one parameter
16:38:22 <Cale> okay, I'll paste it there
16:38:44 <shapr> Mm, I love the simple solutions. All of those fooBy functions are so handy.
16:39:08 <Cale> Frederick: pasted
16:39:20 <Frederick> Cale, gimme the link :D
16:39:26 <Cale> @paste
16:39:27 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
16:39:30 <Cale> there
16:39:58 <Cale> sethk: you pass it the action right there
16:40:10 <Cale> that's the first parameter to runState
16:40:11 <sethk> yes.  exactly what I'm doing in both cases
16:40:23 <rep> sethk are the gnome's sethk?
16:40:31 <Cale> and then note that your function has type String -> ...
16:40:36 <sethk> rep, no
16:40:41 <rep> sethk ah :)
16:40:57 <rep> sethk i hear theer's a sethk who is a celebrity in gnome-land
16:41:05 <rep> (but i've personally never heard of him)
16:41:08 <sethk> rep, I'm in linuxhelp, but not gnome
16:41:10 <Frederick> Cale, I seem to have an error on line 3 wich is the main line
16:41:12 <Frederick> any idea?
16:41:19 <Frederick> square.hs:3: parse error on input `=
16:42:12 <Cale> Frederick: spacing or something?
16:42:12 <sethk> Cale, the second case is runStateT, not runState
16:42:25 <Cale> sethk: runStateT and runState work the same way
16:42:26 * shapr hacks up some code to make it easier to drive around in Ur-Quan Masters game.
16:42:36 <sethk> Cale, yes, I thought so.
16:42:38 <Cale> shapr: :)
16:42:52 <Frederick> Cale, http://epiphanic.org/util/pastebin.php?post=41
16:43:11 <Cale> Frederick: tab the second line of main in
16:43:20 <Cale> so that it lines up with the first
16:43:20 <sethk> Cale, in any event, if we use two arguments, then according to the signature, the first is not String, but m String
16:43:25 <sethk> Cale, no
16:43:31 <sethk> Cale, I mean the state monad
16:43:39 <sethk> Cale, (my state happens to be string)
16:43:51 <Cale> sethk: can you put the code on the paste page?
16:43:58 <sethk> Cale, sure.
16:44:20 <sethk> Cale, what is confusing me is that it appears I have to call runStateT differently (than runState)
16:44:26 <Cale> nope
16:44:41 <Cale> you really shouldn't
16:44:52 <Cale> I think there's an accidental parameter getting in somewhere
16:45:05 <sethk> Cale, no, I think I see what it is
16:45:13 <Frederick> Cale, new error, how does identation counts? http://epiphanic.org/util/pastebin.php?post=41
16:45:24 <Frederick> Cale, new error, how does identation counts? square.hs:4: The last statement in a 'do' construct must be an expression
16:45:31 <sethk> Cale, I assumed that because the signature of runStateT (the constructor, in the docs) is  s -> m (a, s)
16:45:42 <Cale> Frederick: like this: http://epiphanic.org/util/pastebin.php?post=42
16:45:45 <sethk> Cale, I have to use a function whose type is   s -> m (a, s)
16:45:49 <Cale> Frederick: whitespace matters in Haskell
16:45:50 <sethk> but that's not the case
16:46:19 <Frederick> Cale, how?
16:46:30 <Frederick> worked thx a lot
16:46:37 <Cale> Frederick: things are grouped by their indentation level
16:46:57 <Cale> note that I lined things up so that the lines in the do started on the same character
16:47:16 <Cale> If you don't like it, you can use braces and semicolons.
16:47:23 <Frederick> Cale, like python?
16:47:36 <Cale> Frederick: yeah, like python, except that it's optional to use it
16:47:43 <Frederick> Cale, thx a lot
16:48:44 <Cale> sethk: the difference, as we discussed is that runStateT is a named field of a record - the type in the docs is the type of the field, but you get an automatically defined function with that name which takes a record of that type and extracts that field
16:48:57 <Cale> so it takes one more function parameter than the field type
16:49:01 <Cale> for example:
16:49:02 <sethk> Cale, yes, but that is equally true of runState
16:49:09 <Cale> oh, yes it is
16:49:19 <Cale> and you'll see that they really do work the same way :)
16:49:49 <Cale> @type Control.Monad.State.runState
16:49:51 <lambdabot> forall s a. Control.Monad.State.State s a -> s -> (a, s)
16:49:54 <Cale> @type Control.Monad.State.runStateT
16:49:55 <lambdabot> forall s a (m :: * -> *).
16:49:55 <lambdabot> Control.Monad.State.StateT s m a -> s -> m (a, s)
16:50:06 <Cale> same number of parameters
16:50:14 <sethk> Cale, right, that's what I get also  :)
16:50:36 <sethk> Cale, hm, let me try something
16:53:16 <Cale> because of the initial type that you gave for iow, I think maybe you had  iow x = runStateT (...) where x wasn't being used.
16:54:39 <sethk> Cale, yes, I did, and we changed that.
16:54:45 <sethk> Cale, so now it is being used.
16:55:22 <Cale> so running   iow x st  from main should work
16:56:43 <sethk> Cale, yes but now I'm trying to figure out why runState and runStateT require a different number of arguments
16:56:50 <Cale> they don't
16:57:19 <sethk> Cale, ok, let me paste.
16:59:45 <sethk> Cale, pasted.  Clearly they are different functions and the usage is different
16:59:51 <sethk> but I'm still puzzled
17:00:27 <sethk> Cale, the type of the function within runState (...) is different than the type of the function within runStateT( ... )
17:00:27 <Cale> your initialState parameter isn't the initial state
17:00:33 <sethk> Cale, just a name
17:00:50 <sethk> Cale, the compiler isn't smart enough to know what it means :)
17:01:04 <sethk> Cale, although since the first argument of the signature is the state ...
17:01:04 <Cale> right, but it's not state for any state monad, so that's clear
17:01:20 <sethk> what is not for any state monad?
17:01:21 <Cale> the second parameter to iow will be the real initial state
17:01:34 <sethk> ok, then the first parameter, of type String is?
17:01:44 <Cale> just a parameter
17:01:55 <sethk> that doesn't appear in the signature for runStateT
17:02:10 <sethk> let me put some more arguments in, see what happens
17:02:18 <sethk> I'm beginning to think that problem is that I _am_ thinking in types
17:02:35 <Cale> what you're calling the "initial state" in the code is never being used as state at all
17:02:44 <sethk> Cale, makes no difference to my question
17:02:49 <sethk> Cale, pretend I named it x
17:02:52 <Cale> okay
17:03:03 <Cale> I just think that might be related to the confusion
17:03:17 <sethk> Cale, it was at first, yes  :)
17:03:23 <Cale> the reason you have to pass iow another parameter is just because you declared it with another parameter
17:03:25 <sethk> Cale, I was just too lazy to change it  :)
17:03:41 <sethk> Cale, there is where you lose me.  I declare it with _one_ parameter.  count them, just one
17:03:54 <Cale> yes, but it returns a function
17:04:06 <Cale> which means that it takes another parameter
17:04:17 <Cale> f = \x -> ...
17:04:21 <sethk> Cale, I'm beginning to see this
17:04:21 <Cale> is the same as
17:04:23 <Cale> f x = ...
17:04:54 <Cale> (up to the stupid monomorphism restriction thing, which doesn't matter if you include type signatures)
17:05:00 <sethk> Cale, I don't understand why the expression within runStateT doesn't need to have the signature of runStateT
17:05:26 <Cale> runStateT isn't a constructor, it's a field accessor
17:05:28 <sethk> Cale, isn't there a switch to turn off the monomorphism restriction?  Or is that different
17:05:32 <Cale> yeah
17:05:37 <Cale> you can just turn it off
17:05:46 <sethk> Cale, either it is both, or I'm even more confused
17:05:55 <sethk> Cale, because it appears in the type definition of StateT
17:05:56 <Cale> StateT is a constructor
17:06:36 <Cale> runStateT is a field of StateT s m a with type s -> m (a, s)
17:06:36 <sethk> Cale, right, but using runStateT ( whatever ), I'm creating an instance of StateT
17:06:40 <Cale> no
17:06:52 <Cale> by using do, you're creating an instance of StateT
17:07:03 <Cale> runStateT unwraps the StateT
17:07:05 <sethk> ok, then runStateT appears in the Constructor definition because ?
17:07:12 <Cale> because it's the name of a field
17:07:24 <sethk> the name of the only field
17:07:27 <Cale> right
17:07:52 <sethk> ah, I see it
17:07:55 <sethk> what you aren't saying
17:07:58 <Cale> example: data Person = Guy { name :: String, age :: Integer } | Girl { name :: String, age :: Integer }
17:08:15 <Cale> name :: Person -> String
17:08:23 <Cale> is the accessor
17:08:30 <Cale> that's automatically defined by that
17:08:41 <sethk> Cale, you are confused about what I'm confused about.
17:08:49 <Cale> no, it makes sense :)
17:08:53 <sethk> Cale, the problem is not that I don't understand the constructor syntax
17:08:56 <sethk> but listen:
17:08:57 <Cale> oh
17:08:59 <Cale> okay
17:09:08 <sethk> I think the problem is that StateT runStateT :: (s->m(a,s)) means that StateT runStateT has type (s->m(a,s))
17:09:12 <sethk> rather than
17:09:31 <sethk>  runStateT has type (s->m(a,s))
17:09:48 <Cale> StateT (...) always has type StateT s m a
17:10:00 <ski_> runStateT :: StateT s m a -> (s->m(a,s))
17:10:04 <Cale> but the thing it's holding has type (s->m(a,s))
17:10:06 <Cale> and yes
17:10:08 <sethk> Cale, yes, but that would seem not to be addressing the same issue
17:10:10 <Cale> that's right
17:10:26 <Cale> er, what ski wrote
17:10:27 <sethk> wrapping something in runStateT doesn't give it that type, because runStateT isn't that type
17:10:33 <sethk> StateT runStateT is that type
17:10:45 <Cale> which type?
17:10:47 <sethk> Cale, I knew what ski_ wrote 20 seconds after I started using it
17:10:54 <ski_> (runStateT doesn't 'wrap' at all, it *unwraps*)
17:11:18 <ski_> sethk : hm
17:11:19 <sethk> Cale, the problem is that everyone just keeps repeating the types in the documentation.  If someone doesn't understand it in the doc, they won't understand it any more if you type it into the irc window
17:11:28 <ski_> sethk : what do you mean by "StateT runStateT is that type" ?
17:11:34 <sethk> ski_, let's not get hung up on my possible misuse of a term here.
17:11:47 <sethk> that type is (s->m(a,s))
17:12:01 <ski_> that is the type of the field ..
17:12:03 <Cale> (StateT anything) :: StateT s m a
17:12:16 <sethk> Cale, yes, I see that now
17:12:21 <Cale> anything :: s -> m (a, s)
17:12:33 <sethk> Cale, again what keeps hanging me up, in a million places, is that tendency to reuse names
17:13:07 <ski_> runStateT, as an expression, is the accessor, that given an 'StateT s m a' will return that field  .... runStateT as a name in a record construction, however stand for the field itself
17:13:26 <sethk> exactly, the same name meaning two different things
17:13:40 <ski_> (which, imo, is a little bit confusin/bad)
17:13:42 <howya-doin> so wait wih haskell DB you can do things that SQL can;;t?
17:13:50 <howya-doin> someone help me out here
17:13:54 <howya-doin> that si amazing if ture
17:13:57 <howya-doin> true
17:14:10 <sethk> howya-doin, that DB thing will allow your haskell program to access an existing database
17:14:19 <sethk> howya-doin, through that database's existing interface
17:14:23 <Lemmih> Using the same identifier for different things in different scopes isn't bad, IMHO.
17:14:38 <sethk> Lemmih, I know, but it absolutely is a terrible thing
17:14:46 <ski_> (howya-doin : iiuc, with haskellDB you can call SQL, and then do whatever you want in haskell with the info from SQL)
17:14:48 <sethk> Lemmih, if you wanted to say, how much confusion can we create?
17:14:54 <sethk> Lemmih, that would be a great place to start
17:15:11 <Lemmih> sethk: Scoping is not hard to understand.
17:15:19 <sethk> Lemmih, you miss the point
17:15:22 <ski_> (Lemmih : but it isn't different scopes, here ..)
17:15:54 <shapr> howya-doin: HaskellDB allows you to typecheck queries, and to do higher order queries.
17:16:02 <Lemmih> ski_: But it is.
17:16:51 <ski_> (rather, it's more like parallel name-spaces .. like normal variables and (data) constructors namespace, resp. type (variables and constructors) namespace)
17:17:13 <Lemmih> ski_: Exactly.
17:17:30 <Frederick> ski_, heya
17:17:39 <sethk> the fact that having two namespaces allows you to reuse a name does not imply that you must reuse a name
17:17:49 <sethk> and it is a horribly confusing practice
17:17:55 <sethk> bites in ML also.
17:18:07 <ski_> Lemmih : and, imo, this is a case where the namespaces shouldn't be parallel/separated
17:18:07 <Cale> sethk: the name is reused to keep those things in different namespaces attached to each other
17:18:27 <ski_> Frederick : yah
17:18:31 <Cale> sethk: there's a direct correspondence: for each record field, there is an appropriate accessor
17:18:44 <sethk> Cale, yes, I know that.
17:19:18 <Cale> If they weren't named the same thing code would be harder to read
17:19:33 <sethk> Cale, that's where I absolutely completely utterly disagree
17:19:35 <Cale> because you could name the field one thing, and the accessor something completely different
17:19:42 <sethk> thank god
17:19:49 <sethk> please give them different names
17:19:58 <Cale> and they wouldn't be attached to each other in your brain
17:20:00 <sethk> so a person can understand which is used where
17:20:10 <sethk> Cale, that's the point.  If you are worried, call one runStateT'
17:20:53 <Cale> also, it would defeat one of the only points of having that syntax in the first place which is to avoid explicitly declaring accessors
17:20:53 <ski_> using    'foo someRecord :: Int'  together with 'MakeRecord {foo = ... :: Int , ...}'  is a bit confusing, imo
17:22:05 <Cale> data Person = Person { name :: String, age :: Integer } -- a Person is a name which is a String, together with an age which is an Integer, if p is a Person, then name p is the name of p
17:22:19 <ski_> having 'someRecord .foo :: Int' together with '... {foo = ... :: Int , ...}'  is more consistent, imo ..
17:22:44 <Cale> ski_: that over-overloads .
17:22:54 <ski_> Cale : what do you mean ?
17:23:05 <Cale> well, . is already horrible overloaded
17:23:09 <ski_> Cale : ah .. function composition, yes
17:23:09 <Cale> horribly*
17:23:12 <rep> kalifornia is druggy druggy druggy
17:23:12 <ski_> sure
17:23:22 <Cale> and hierarchical modules
17:23:27 <dons> Lemmih, dcoutts, looks like we get a (paid!) part-time hIDE hacker :)
17:23:30 <ski_> concrete syntax isn't so important, here
17:23:36 <Cale> yeah
17:23:36 <Lemmih> dons: How so?
17:23:48 <ski_> Cale : yeah .. i wasn't proposing using exactly that
17:23:59 <Cale> but how do you refer to the function name, then?
17:24:01 <sethk> Cale, I'm only saying that it is a source of confusion when learning the language
17:24:05 <Cale> (.name)?
17:24:09 <ski_> using s/./#/ or something would work just as well
17:24:10 <dons> a student at unsw is going to use hIDE/yi as a gui framework for a proof rewriting project
17:24:17 <ski_> Cale : yes
17:24:20 <dons> which will require hacking :)
17:24:28 <Lemmih> dons: Cool.
17:24:30 <Cale> I suppose that would work okay
17:24:46 <ski_> one could also try to do it the other way around ..
17:24:49 <dons> so he just wants a gtk-based gui with src in buffers that he can manipulate, which yi/hide would be perfect for I think
17:24:54 <dons> he'll be around for about 6 months
17:25:08 <ski_> i.e. make the accessor the primary thing, and field the secondary thing ..
17:25:14 <Cale> I'd rather have name # person than person # name
17:25:19 <ski_> sure
17:25:26 <ski_> that is just concrete syntax issue
17:25:28 <Cale> that's just ordering of arguments
17:25:29 <Cale> yeah
17:26:12 <ski_> with the other way, though, i'm not sure of how to have record-expressions, in a nice way ..
17:26:59 <ski_> (but the current way is imo, a bit schizophrenic .. 'name' both has type  'Person -> String' and type 'String', huh ? :)
17:28:11 <ski_> hmm
17:28:24 <Cale> well, sort of :)
17:29:07 <Lemmih> dcoutts: ping.
17:29:10 <dons> @where fps
17:29:11 <lambdabot> http://www.cse.unsw.edu.au/~dons/fps.html
17:29:33 <ski_> Name myPerson = "Howard"
17:29:36 <sethk> ski_, that is exactly the confusion I was experiencing.
17:29:41 <ski_> Age myPerson = 37
17:29:58 <ski_> sethk : yes .. (that's why i commented)
17:30:07 <ski_> that would define a record 'myPerson'
17:30:17 <ski_> (without using record expresion)
17:30:31 <Cale> what's the type of Name?
17:30:32 <sethk> ski_, yes, I know, I was just confirming that you got it right
17:30:48 <ski_> Cale : here, Name is an accessor,  Name :: Person -> String
17:31:23 <ski_> (so, this is the other sane way i spoke of .. having accessors be primary)
17:31:32 <Cale> hmm
17:32:02 <ski_> Head (mapS f as) = f (Head as)
17:32:12 <ski_> Tail (mapS f as) = mapS f (Tail as)
17:32:12 <Cale> that makes using records in-place in expressions pretty unwieldy though
17:32:26 <ski_> would map over a stream defined by accessors
17:32:36 <ski_> m-yes
17:32:49 <ski_> so, it needs more thought
17:33:00 <Cale> you end up doing  (let Name p = ... ; Age p = ... in p) a whole lot
17:33:12 <ski_> (or 'where')
17:33:15 <Cale> yeah
17:33:32 <ski_> right, we want to avoid having to copy over fields that don't change
17:33:35 <Cale> assuming that you're in a declaration, which is reasonable
17:33:41 <ski_> m
17:33:55 <sethk> dons, I did the things for hs-plugins (that you gave me earlier, runhaskell Setup.hs ...) and it seemed happy.  But running make in yi now gives a different error, "failed to load interface for Plugins"
17:34:07 <sethk> dons, did I do something wrong?  is this the same issue or a different one?
17:34:25 <ski_> Foo newRecord = ...
17:34:36 <ski_> access newRecord = access oldRecord
17:34:36 <ski_> hm
17:34:46 <ski_> that prolly doesn't work well
17:34:52 <dons> Plugins? are you using the latest hs-plugins?
17:35:18 <ski_> Cale : so, some kind of record-expression is prolly needed even with this approach ..
17:35:53 <Cale> you end up wanting the same thing back, in order to avoid mentioning p over and over
17:36:02 <Cale> p { Name = ... ; Age = ... }
17:36:17 <sethk> dons, pulled it from darcs yesterday evening
17:36:34 <sethk> dons, and the build didn't complain about anything (the build for hs-plugins)
17:36:46 <ski_> Cale : anyway, i think often an accessor-based definition of records could be quite nice to have ..
17:37:25 <dons> hmm :/
17:37:34 <ski_> (of course, one could have that even with  ".name")
17:40:25 <Cale> sethk: btw, purely syntactically, it's probably nicer to use let/in or where in order to avoid smashing those do blocks into the parentheses
17:40:56 <sethk> Cale, yes.  the reason I did it that way was to look at the type for the function without the runStateT, and then with
17:41:01 <sethk> Cale, I know it's ugly
17:41:19 <Cale> yeah, I suppose it makes it clear which parameter is which
17:41:35 <sethk> Cale, clear is a bit of an overstatement  :)
17:41:38 <sethk> Cale, but it helps
17:41:58 <sethk> Cale, but I should have just cut and pasted and made two functions, which is actually what I'm doing now.
17:42:03 <dons> sethk, can you build a statiic yi for me? or are you trying to build hIDE ultimately?
17:42:12 <ski_> Cale : hm .. possibly it's help if one didn't use '=' with the accessors in the record expression ..
17:42:27 <sethk> dons, I'll be happy to build a static yi.  I'm not on hide yet, just trying yi
17:42:49 <sethk> dons, I'll be happy to build a static yi as soon as I can build a yi at all  :)
17:43:20 * ski_ knows how he'd write the record expression just fine in a lambda-calc with mu-binding (for continuations, not fixpoint)
17:43:36 <sethk> ski_, how?
17:43:53 <ski_> sethk : are you sure you want to see it ? :)
17:44:08 <sethk> ski_, sure, but not if it will flood the channel
17:44:12 <dons> what yi do you have? where was it pulled from?
17:45:16 <sethk> dons, let me check, I think it is the snapshot but let me look at the tarball name
17:45:23 <dons> sethk, ok. to build a static yi and avoid all plugin issues: uncomment the commented-out last 4 lines of the .cabal file for yi
17:45:25 <ski_> 'mu k. case k of k0 Name -> k0 (...) ; k1 Age -> k1 (...) ; k2 -> k2 p'   p being the old record which we want to change two fields of
17:45:29 <dons> this will build a binary called yi-static
17:45:46 <ski_> sethk : you are not expected to understand that code, though :)
17:46:01 <sethk> ski_, not right now, no.  but eventually
17:46:14 <ski_> (it's not in any way legal haskell .. :)
17:46:16 <sethk> dons, which finesses plugins, I take it?
17:46:20 <sethk> ski_, yes, I got that.  :)
17:46:54 <sethk> dons, it is yi-0.1.0, I'll check on the file name if you need it.
17:47:05 <Cale> what does mu do when it binds k?
17:47:10 <dons> what is the last patch, when you run 'darcs changes | less' ?/
17:47:17 <dons> the first patch, I mean. the most recent one
17:47:41 <ski_> Cale : it captures the current continuation :)  (no copy, just reify)
17:48:46 <sethk> dons, I'll try that ...
17:49:09 <ski_> (Cale : then it checks the continuation to see what it wants to do .. extract field Name (and then do k0) or extract field Age (and then do k1), or extract some other field and do something after that (that whole is k2))
17:49:13 <sethk> dons, oct 7, cabal fix
17:49:33 <sethk> dons, what is the name of the cabal file I should edit?
17:49:38 <Cale> ski_: ah, cool
17:50:08 * ski_ ponders a way to invent specific nice syntax which corresponds to this .. but doesn't manipulate continuations ..
17:50:36 <Cale> glib/System/Glib/Signals.chs:172:2: Not in scope: `connectGeneric' -- I'm getting this when compiling gtk2hs since I upgraded to GHC 6.4.1
17:50:49 <Cale> has anyone seen it before?
17:50:55 <ski_> (Cale : btw, in 'k0 Name' that is Name back-applied to 'k0' to get a whole continuation (but here it's a continuation-pattern, of course))
17:51:28 <Cale> ski_: yeah
17:51:49 <Cale> ski_: you should write some toy-compilers for these languages of yours :)
17:52:09 <sethk> dons, file name is yi-20051016.tar.bz2 which I think you already know from the patch
17:52:10 * ski_ wonders how a record-variant of a pairing-morphism-expression in category theory would look like ..
17:52:19 <ski_> Cale : alas, not mine :)
17:52:23 <dons> sethk, hmm...
17:52:29 <ski_> Cale : i saw that mu in a paper somewhere
17:52:47 <dons> what file name is this sethk? is it a tarball you downloaded?
17:52:51 <sethk> dons, let me extract again and build, make sure I didn't bork it
17:52:54 <sethk> dons, yes, the tarball
17:53:08 <dons> ok, so you have *ncurses* yi :)
17:53:17 <dons> which is certainly fun to play with.
17:53:26 <sethk> dons, How do I get the real one?
17:53:32 <ski_> (Cale : and i have a small project to implement some things like this .. just not been doing much on it in a while .. thinking out issues i guess)
17:53:33 <dons> so, to build that statically, you say: make way=static
17:53:41 <dons> then just run ./yi-static
17:53:47 <Cale> the ncurses one lets you save files :)
17:53:52 <dons> true!
17:53:59 <sethk> dons, ok.  I'm getting an error about not having alex.  Why would I get that now, but not before?
17:54:03 <dons> play with that one, the gtk yi is a serious work in progress
17:54:08 <sethk> dons, ok.
17:54:21 <sethk> dons, I'll compile a static one also.
17:54:29 <sethk> but first I guess I'm installing alex.
17:54:52 <dons> sethk, you might be able to defeat the alex warning by 'touch'ing Yi/Syntax/TestLex.hs
17:55:10 <sethk> dons, ok.
17:57:53 <dons> ncurses yi is really rather nice, I must say
17:58:04 <dons> gtk feels so heavy in comparison :S
17:58:05 <sethk> dons, I don't have TestLex.hs, only TestLex.x.  Doesn't that mean I need alex?
17:58:10 <dons> yes
17:58:59 <dons> hands up: who would use Yi (presuming it implemented enough emacs or vim) if it only came with a GTK gui?
17:59:16 <dons> and who would require an ncurses gui?
17:59:24 <sethk> I would use gtk
18:00:00 <Cale> I'd use both
18:00:00 <dons> I know tuomov requires ncurses, and I probably would too, once I start ssh'ing around
18:00:18 <dons> good point Cale.
18:00:33 <dons> gtk locally, ncurses remotely, I think I'd probably use.
18:00:55 <Cale> with me, it would depend on the size of the edit I was doing too
18:01:13 <dons> oh, interesting. why so?
18:01:29 <Cale> If I'm doing something small, I usually don't like to leave my terminal, and ncurses apps usually seem to be a little snappier
18:01:40 <Cale> but if I'm doing something large, the gui is nice
18:02:13 <dons> ok, interesting. do you use the ion window manager?
18:02:21 <Cale> I tend to use vim in the terminal and emacs in the gui
18:02:30 <Cale> I've seen it, but no
18:02:37 <Cale> I've used pwm in the past
18:02:37 <dons> with ion, the terminal/gui thing kind of dissolves
18:02:55 <dons> really, you switch between keybindings?
18:03:03 <Cale> yeah
18:03:07 <Cale> it's not a big deal
18:03:24 <Cale> after about a week of emacs, I was pretty used to it
18:03:24 <dons> true, i constantly need to use emacs in, say, foreign shells or mozilla
18:04:23 <sethk> I'm lost without my emacs macros and bindings
18:04:24 <Cale> vim seems better for the sorts of things you'd do in a small edit
18:05:02 * ski_ currently gets by with nano, for that
18:05:07 <Cale> whereas emacs has all sorts of fun tools
18:05:31 <dons> I use emacs only for ProofGeneral
18:05:43 <dons> which I guess is a fun tool :)
18:05:55 <dons> oh, and for bench marking how slow it is compared to Yi ;) hehehe
18:05:58 <dons> mhwhahaha
18:05:58 <sethk> dons, will I be able to write yi extensions in haskell?
18:06:03 <dons> yes!1
18:06:10 <dons> that's the number 1 motivation
18:06:13 <dons> you already can, btw
18:06:15 <dons> see examples/
18:06:17 <sethk> excellent
18:06:33 <dons> also, see the recent yi paper
18:06:35 <Cale> Yi is just one big cluster of extensions
18:06:36 <sethk> I use emacs, even though it is dog slow, because I find it too frustrating to not have an extensible editor
18:06:39 <sethk> dons, will do
18:06:42 <dons> @google Dynamic Applicatoins from the ground up
18:06:43 <lambdabot> http://www.simplebits.com/notebook/2004/09/01/sluggish.html
18:06:49 <dons> @google Dynamic Applications from the ground up
18:06:50 <lambdabot> http://www.cse.unsw.edu.au/~dons/papers/SC05.html
18:06:51 <Cale> the core is tiny
18:07:19 <dons> hIDE follows this model, and adds the idea that the extensions are distributable cabal packages
18:07:22 <dons> which is a nice idea
18:07:37 <dons> so we have a pre-made plugin distribution system :)
18:07:39 <Cale> zaphod kernel: CPU0: Temperature above threshold
18:07:42 <Cale> uh oh
18:07:49 <dons> quick! THROW WATER ON IT!
18:08:00 <sethk> dons, ./yi-static brings up an empty window.  Maybe that means it is working?
18:08:07 <dons> typee something...
18:08:17 <dons> oh, it's in vim mode, so remember your vi keys
18:08:24 <sethk> dons, right, I already did :q
18:08:26 <dons> if you want some other editor, type ./yi-static --help
18:08:28 <sethk> dons, :)
18:08:30 <sethk> dons, ok.
18:08:35 <dons> ./yi-static --as=mg for example
18:08:42 <sethk> dons, you want a copy of the static binary?
18:08:51 <dons> why?
18:09:05 <Cale> dons: I had problems moving the cursor through multibyte characters in the gui yi. I don't presently have a copy of the ncurses yi to try it
18:09:05 <dons> oh, to sell for $$ I guess :)
18:09:25 <sethk> dons, I don't know.  :)
18:09:55 <dons> Cale, that's weird. ncurses will certainly behave strangely, since it forces 8 bits
18:13:45 <dons> @seen syntaxfree
18:13:45 <lambdabot> syntaxfree is in #haskell. Last spoke 2 hours, 4 minutes and 33
18:13:45 <lambdabot> seconds ago.
18:13:57 <dons> syntaxfree, you're coords on @map seem wrong
18:13:58 <dons> @map
18:13:59 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
18:14:07 <dons> -23.003671  -23.003671 "syntaxfree"
18:14:11 <dons> seems unlikely ;)
18:16:22 <Cale> dons: also, I could get it to crash by typing too fast, but we'll see if that's different when I rebuild it in a little bit
18:16:43 <dons> gtk yi?
18:16:51 <dons> the latest gtk yi, btw?
18:17:15 <dons> I think (hope) that problem dissapeared with the bugs I squashed on the weekend
18:18:06 <Cale> it was relatively new -- not sure if it's still the latest
18:18:22 <Cale> I was having lots of problems with packages though
18:19:07 <dons> we  need to simplify the dependency tracing issue
18:19:36 <sethk> dons, the man page says to consult the html documentation.  Do I have that?  I have a ps file, five pages.
18:20:13 <dons> for yi?
18:20:18 <sethk> dons, yes
18:20:23 <dons> do you have haddock installed?
18:20:33 <sethk> not sure.  If not, I'll install it
18:20:36 <dons> make html usually builds the html docs, unless you don't have haddock installed
18:21:18 <sethk> ok
18:22:21 <sethk> I'm building haddock.  when I did make html in yi, I got "nothing to be done".  Is that because configure didn't find haddock and disabled it?
18:22:33 <dons> yep
18:22:49 <sethk> k.  I'll rerun configure after haddock is built
18:22:59 <dons> dying with some shell fragment where the empty string for $(HADDOCK) has been interpolated is way worse  :)
18:23:06 <syntaxfree> I'm  here.
18:23:18 <syntaxfree> what's the buzz, tell me what'sahappening.
18:23:25 <dons> syntaxfree, the coords seem to be missing either the latitude or longitude
18:23:27 <dons> @map
18:23:28 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
18:23:38 <syntaxfree> oh.
18:23:43 <dons> you duplicated one value, and ended up in the mid-atlantic :)
18:23:58 <syntaxfree> It's not a bad place to live in.
18:24:08 <dons> hehe
18:24:17 <Frederick> syntaxfree, do you need a helicopter to pick you up?
18:24:27 <dons> we'll send one right away!
18:24:40 <dons> quick ... to the haskell-mobile!
18:24:51 <Julianus> Hi folks!
18:24:56 * ski_ snickers
18:24:59 <ski_> hi Julianus
18:25:48 <ski_> do you have some haskell question ?
18:25:48 <Frederick> the greatest thing about internet isd that you can find ppl stuck in the same problems you are stuck, with the difference they are at going to dinner and you are going to lunch
18:26:18 <dons> Julianus, yet another .ar #haskell person!
18:26:23 <dons> have you seen:
18:26:24 <dons> @map
18:26:24 <lambdabot> http://www.haskell.org/hawiki/HaskellUserLocations
18:26:31 <Julianus> someone know this book? "Basic Simple Type Theory" Riger Hindley
18:27:12 <dons> ah, the book that is neither 'basic' nor 'simple'?
18:27:14 <dons> i seem to recall.
18:28:31 <Julianus> Basic Simple
18:28:56 <sethk> dons, at least he is consistent with his naming convention
18:29:03 <syntaxfree> I'm reading an introductory type paper that I'm loving.
18:29:04 <dons> :)
18:29:18 <ski_> (syntaxfree : which ?)
18:29:43 <Julianus> sylvan: what paper ?
18:29:53 <Julianus> syntaxfree: what paper
18:30:07 <Julianus> http://assets.cambridge.org/052146/5184/sample/0521465184ws.pdf
18:30:09 <Cale> heh, It would be funny if you open the book and "Basic" and "Simple" turn out to be technical terms with definitions that are several pages long
18:30:30 <syntaxfree> "Functional programming with Overloading and Higher-Order Polymorphism", by Mark P. Jones
18:30:48 <dons> yeah, that's a great paper
18:31:09 <Julianus> syntaxfree: link?
18:31:13 <dons> syntaxfree, did you work out your correct coordinates?
18:31:26 <dons> or are you really at: -23.003671  -23.003671 :S
18:31:46 <syntaxfree> I'm a little busy right now.
18:31:48 <Julianus> lol
18:31:49 <syntaxfree> Promise to fix it later.
18:31:55 <dons> ok cheers
18:32:03 <Julianus> syntaxfree: point me this paper
18:32:18 <dons> @google Functional programming with Overloading and Higher-Order Polymorphism
18:32:19 <lambdabot> http://www.cse.ogi.edu/~mpj/pubs/springschool.html
18:32:23 <dons> there you go
18:33:16 <sethk> Cale, dons ok, I'm up here.
18:33:34 <ski_> also http://citeseer.ist.psu.edu/jones95functional.html
18:33:38 <sethk> Cale, point me somewhere in the code that I can see what vi commands already exist
18:33:58 <syntaxfree> in spite of the pedant title, it's very readable for beginners with no familiarity at all with type theory.
18:34:00 <Cale> sethk: there should be a vi/vim .hs file
18:34:04 <dons> sethk, you want to see where the yi keymaps are implemened?
18:34:05 <sethk> k
18:34:11 <sethk> dons, sure.
18:34:14 <dons> Yi/Keymap/*.hs
18:34:15 <Cale> I don't have the source on me atm
18:34:19 <sethk> dons, and just generally what is available
18:34:21 <ski_> night #haskell
18:34:32 <Julianus> night ski_
18:34:38 <Cale> night ski
18:34:46 * ski_ leaves
18:34:47 <dons> the mg mode prints a nice buffer of the current bindings, but no such luck with vim for now
18:35:01 <sethk> dons, ok.
18:35:25 <Cale> I hate build systems. :)
18:35:26 <dons> sethk, does it behave like a reasonable vim, in your opinion?
18:35:38 <Cale> So bloody stateful
18:35:42 <sethk> dons, so far.  but I've only been running it for 30 seconds.  :)
18:35:45 <dons> they are a blight on all our houses :S
18:37:05 <sethk> dons, does the gui version have syntax highlighting?  Does anything do auto indent yet?
18:37:18 <dons> yes and yes
18:37:30 <sethk> dons, can I see indent work with my curses version?
18:37:35 <dons> not ghc-based auto indenting
18:37:44 <dons> no, curses does nothing
18:37:49 <sethk> ok
18:37:51 <dons> well, nothing gui-ish
18:38:07 <sethk> so I should download the web version if I want to get an idea of indentation and highlighting ?
18:38:19 <sethk> dons, what do you mean by ghc-based auto indenting?
18:38:28 <Cale> src/Yi/Gtk.hs:198:10: Not in scope: `keyChar' -- what do you want to bet that if I blow away my copy of yi (which I haven't modified) and get it again from darcs, this problem will go away?
18:39:23 <sethk> dons, to get the gui version, do I use the sources by darcs link?
18:39:41 <Cale> darcs get http://www.scannedinavian.org/repos/yi
18:39:53 <Cale> actually, http://www.scannedinavian.org/YiWiki/DownloadYi
18:40:08 <Julianus> syntaxfree: seem good
18:40:33 <Cale> bash: ./Setup.lhs: /home/dons/bin/runhaskell: bad interpreter: No such file or directory
18:40:37 <Cale> dons :)
18:40:57 <sethk> Cale, that didn't get me any source (the darcs DownloadYi)
18:41:21 <sethk> hm, the first one seems to
18:41:24 <Cale> that webpage describes how to get the sources for the things you'll need
18:41:47 <sethk> Cale, ok
18:41:54 <Cale> oh
18:41:59 <Cale> the problem didn't go away
18:42:49 * Cale goes back to the gtk2hs directory and makes sure it's all installed correctly
18:44:56 <Speck> Can I compile hIDE without the mozilla dependency?
18:45:45 <Cale> dons: I get a bunch of identifiers not being in scope when building Yi.Gtk -- I have the latest darcs gtk2hs installed
18:46:01 <Cale> (they look more like Yi identifiers anyway)
18:46:26 <Lemmih> Speck: You can remove the html-viewer from the build script.
18:46:44 <dons> Cale, the bash thingo is my bad.
18:47:07 <Cale> dons: yeah, not so hard to fix that
18:47:11 <dons> but what about these identifiers. hmm
18:47:15 <dons> what's up with that?
18:47:20 <Speck> shoot, that darn "impossible error" from GHC again
18:47:48 <Cale> src/Yi/Gtk.hs:198:10: Not in scope: `keyChar', src/Yi/Gtk.hs:199:39: Not in scope: `modif', src/Yi/Gtk.hs:201:34: Not in scope: `keyName'
18:47:53 <Cale> and a couple more
18:47:59 <Cale> which are for the same identifiers
18:48:34 <dons> maybe you don't have the latest gtk after all
18:48:44 <dons>  gtk-0.9.9.5,
18:49:13 <Cale> I have the latest darcs repo gtk-0.9.9.5
18:49:31 <Cale> just downloaded
18:50:05 <dons> it's defnd in ./Graphics/UI/Gtk/Gdk/Events.hs
18:51:20 <Cale> um, I see no declaration for keyChar in there
18:51:37 <Cale> though Key has a field named eventKeyChar
18:51:49 <dons> hmm. it's in mine. now I wonder what is going on
18:52:07 <dons> I have darcs gtk2hs, last patch: Sun Sep 25 18:40:26 EST 2005  as49
18:52:31 <dons> from http://haskell.org/gtk2hs/darcs/gtk2hs
18:53:03 <Cale> where do I get that info?
18:53:11 <Cale> I'm getting mine from the same place
18:53:50 <Cale> um
18:53:58 <Cale> last patch in September?
18:54:04 <Cale> that's old
18:54:09 <dons> yeah. hmm :/
18:54:12 <Cale> Mon Oct 17 22:46:14 EDT 2005  duncan_coutts
18:54:12 <Cale>   * [gtk2hs @ 2005-10-18 02:46:14 by duncan_coutts]
18:54:12 <Cale>   Fix demos to use new event record field names.
18:54:19 <dons> i'll update and get back to you
18:54:23 <Cale> okay
18:54:25 <Speck> was it confirmed that cabal was causing the crazy "impossible" build errors when building with cabal, and not ghc?
18:54:43 <dons> yes, it's a ghc bug on Windows
18:55:44 <sethk> I must say, at least from a build perspective, this is amazingly smooth for an early beta
18:56:03 <dons> what's that, sethk?
18:56:06 <dons> yi curses, or hIDE?
18:56:45 <sethk> so far yi curses
18:56:47 <Cale> heh, I've had horrible package conflict issues building hIDE :)
18:56:50 <sethk> hs-plugins
18:56:55 <Cale> yi is fairly easy usually
18:56:58 <sethk> I'm building the latest gtk2hs
18:57:20 <dons> yeah, i put a fair bit of effort into yi's build system. so that's nice that you find it easy :)
18:57:27 * dons `throwTo` uni
18:57:50 <Simon_> @seen shapr
18:57:51 <lambdabot> shapr is in #haskell-blah, #webwitches and #haskell. Last spoke 1
18:57:51 <lambdabot> hour, 29 minutes and 39 seconds ago.
18:59:17 <Speck> webwitches, eh
19:05:36 <Speck> odd, when I run Setup.lhs on cabal, it doesn't seem to find that it needs to use CPP, even though that's noted in Cabal.cabal
19:09:47 <Cale> dons: I updated the names to the new ones, which was fairly simple once I knew what the new names were
19:10:06 <Cale> dons: now I'm getting Chasing modules from: boot/Static.hs
19:10:06 <Cale> Could not find module `Yi'
19:13:29 <sh10151> got a stylistic question, in do-notation, I have the situation:
19:13:39 <sh10151> inputFilename <- head getArgs
19:13:52 <sh10151> e.g. I don't care about any member of getArgs except the first
19:14:00 <sh10151> but that doesn't work because of the IO monad
19:14:11 <Cale> fmap head getArgs
19:14:37 <Cale> inputFilename <- fmap head getArgs
19:14:47 <Cale> or liftM, which is the same thing
19:14:58 <Cale> (but only for monads)
19:15:06 <sh10151> thanks, that helps
19:15:30 <sh10151> is there a reason to prefer one over the other?
19:16:55 <sh10151> i see fmap is in prelude so that's a powerful argument for it :)
19:21:46 <Cale> It's also more general
19:22:13 <sethk> Cale, in that case maybe liftM would be more readable.  ?
19:22:23 <Cale> liftM is kind of unnecessary, but it emphasizes the fact that you're using a monad, I suppose
19:22:58 <sethk> Cale, back to my state monad for a minute if you can bear it.  :)
19:23:37 <sethk> Cale, is it correct to say that I supply the value of the state to the state monad, the state monad uses and/or modifies it during a set of computations, and I get the state back at the end
19:23:54 <Cale> yes
19:23:58 <sethk> Cale, and the state monad is _not_ used to hold the state between computational sequences?
19:24:23 <Cale> well, that's what >>= does, is carry the state along
19:24:33 <sethk> Cale, right, but I mean afterwards
19:24:41 <sethk> Cale, afterwards meaning a defined set of operations
19:24:46 <sethk> Cale, let me explain a bit
19:24:48 <int-e> afterwards, there is no state monad anymore
19:24:48 <Cale> afterwards, if you want to carry the state around, it's up to you
19:25:03 <sethk> int-e, that's exactly what I was asking
19:25:20 <sethk> Cale, int-e I've put the state into an IORef.  Sensible?
19:25:27 <int-e> well, it's just a function after all. the state only exists during the actual computation.
19:26:13 <sethk> int-e, yes, but that isn't obvious, since I _can_ do this:  return (whatever)    which gives me a monad, say just as an example State Int
19:26:20 <sethk> that's a bad example as State takes two types
19:26:23 <sethk> but you know what I mean
19:26:33 <sethk> but if I understand correctly
19:26:55 <sethk> the _only_ thing I can do with that thing I created with return(whatever) is pass it to runState with a _new_ initial state value
19:27:10 <sethk> obliterating any value that might be "in" there.
19:27:41 <Cale> sethk: you do all the computations which need the state in the state monad
19:27:49 <sethk> Cale, yes, that's not the question
19:28:14 <sethk> Cale, the question is what happens to that state monad _between_ calculations in the state monad.  int-e answered me, I think; there is no such thing, really
19:28:18 <Cale> usually you don't have/want to keep the state after the end, unless that's the result
19:28:37 <sethk> Cale, oh, no, I absolutely need to keep it in this application
19:28:48 <Cale> ah, okay
19:29:13 <sethk> it's hard to think of a real life program that doesn't have to maintain at least some state information
19:30:00 <Cale> It's amazing how much you can do just treating things as functions... in fact, that's all that the state monad does, is to hide the state in function parameters
19:30:18 <sethk> Cale, true, but that is orthogonal to the question of whether state needs to persist
19:31:19 <sethk> is part of the reason you said the state monad is atypical, the fact that it returns values while most monads that return something return m values?  runState returns (type, type)   not m (type, type)
19:31:34 <sethk> I know I can force it to (type, type) but that actually doesn't buy anything
19:31:42 <sethk> I mean force it ti m (type, type)
19:31:43 <sethk> sorry
19:31:57 <sethk> Cale, does the question make any sense?
19:32:23 <sethk> Cale, contrast it with IO, which returns, say, IO String rather than String
19:32:48 <Julianus> one question.....
19:32:58 <sethk> in a similar context State returns (String, String)   not State String String (String, String)
19:33:11 <sethk> sethk, to use String arbitrarily as both types
19:33:19 <sethk> Julianus, ask, I'm might blather on forever.  :)
19:33:39 <dav> can anyone recommand a book that can teach haskell? not only the syntax and usage of tools, but also good practice and style of functional programming..
19:33:54 <Julianus> Ricahrd Bird Book
19:34:07 <Julianus> Introduction to Functional Programming
19:34:18 <sethk> dav, Hudak
19:34:33 <sethk> The Haskell school of expression (or that's close to the title)
19:34:35 <int-e> sethk: runState is not a Monad operation; it's an interpreter for the State Monad. Likewise, the IO Monad has an interpreter, but it's mostly not exposed in the RTS - the closest we come to that is unsafePerformIO.
19:35:04 <sethk> int-e, yes, I know.  I'm contrasting the two and trying to understand the implications
19:35:08 <Julianus> are Latices and Domain (from domain theory) sinonymous ?
19:35:51 <sethk> int-e, and that explanation might be attractive but it isn't accurate.  I've been interleaving IO monad stuff and StateT monad stuff in the same function all day
19:36:43 <dav> sethk / Julianus - thx. looking those up.
19:36:46 <sethk> int-e, I guess you might conceptualize that by saying that the state monad interpreter calls the io monad interpreter
19:36:53 <Cale> sethk: sorry, I'm just a bit involved in filling out stupid paperwork, I'll get back to you in a sec
19:36:56 <Julianus> > class Eq a => Lattice a where
19:36:56 <Julianus> >     bottom, top :: a
19:36:56 <Julianus> >     meet, join :: a -> a -> a
19:36:56 <Julianus> >     lt          :: a -> a -> Bool
19:36:56 <Julianus> >     x ?lt? y     = (x ?join? y) == y
19:37:06 <sethk> Cale, no hurry, just picking brains again.
19:38:14 <sethk> Cale, int-e, strangely, reading this short comonad paper today clarified a number of things for me.  I expected to not understand a word of it, given my struggles with the monad concept.
19:43:33 <int-e> sethk: hmm, StateT is a slightly different beast, it actually adds state operations to a given monad (and modifies >>= to carry that state along). so yes, that interpreter will invoke the IO interpreter if you transformed an IO monad with StateT.
19:44:20 <sethk> int-e, good.  I'm getting the idea here, finally.
19:45:02 <int-e> I think my biggest realization with respect to Monads was that Monads alone (i.e. return and >>=) don
19:45:11 <int-e> 't actually do much at all.
19:45:28 <wchogg> What do you mean, int-e?
19:46:13 <int-e> They provide for a way to express operations as a sequence of atomic operations, and one trivial atomic operation, return. To do anything interesting, you need other monad operations; for example, the state Monad provides setstate and getstate.
19:46:20 <sethk> int-e, one of my "things" is to realize that when you've written in a do       abc <- hGetLine    you've only coded half of a binary operator statement
19:46:28 <sethk> int-e, you haven't coded the RHS yet
19:46:41 <sethk> I think that's why I find >>= and >> so much less confusing
19:47:26 <sethk> of course it would have been easier if the compiler said "hey stupid, where's the RHS" instead of "the last thing in a do must be an expression", or whatever the exact wording is
19:48:17 <Cale> It would be nice if the compiler could give more detailed explanations of a problem when requested
19:48:52 <Cale> Like it might provide some options as to common questions about that type of error message
19:49:28 <sethk> Cale, yes.  I know that error messages are a difficult problem, and more difficult in this environment, but that one is so common that it would be nice if it were more clear.
19:50:59 <wchogg> sethk, I scrolled up but I didn't see you say what the comonad paper you read was?
19:51:01 <int-e> ah. peek (=getstate) and poke (=setstate) I meant.
19:51:20 <sethk> wchogg, sorry, Codata and Comonads in Haskell, Richar B. Kieburtz
19:51:38 <wchogg> Thanks, I appreciate it.
19:51:55 <sethk> int-e, is there a stack monad?  push and pop?  Be easy to make one but if it is useful it probably already exists.
19:52:26 <Cale> sethk: see, the "last thing in a do must be an expression" actually refers to the syntax that you typed - if it said "missing right hand side of >>=", then people would be even more confused if they hadn't fully been introduced to that translation process.
19:52:37 <sethk> Cale, yes, I know
19:52:44 <Cale> So what you really need is something which explains the problem :)
19:52:48 <sethk> Cale, I wasn't being literal, that would be just as bad or worse, you are correct
19:53:04 <sethk> Cale, I'm not sure what the right thing to say is ...
19:53:09 <wchogg> Cale, perhaps it could just give a link to a relevant paper or faq?
19:53:52 <Frederick> guys whi is that wrong? http://rafb.net/paste/results/TzAaPD81.html
19:54:07 <Cale> "Pick an option: [1] Why does the last thing in a do block have to be an expression? [0] Next."
19:54:31 <Frederick> huh?
19:54:43 <Cale> Frederick: not directed at you :)
19:54:53 <Cale> Frederick: spacing again
19:54:57 <Frederick> dammm
19:55:08 <Cale> Frederick: just line up print with "line" on the line above
19:55:29 <Lemmih> wchogg: That would be so wrong.
19:55:56 <Frederick> qsort.hs:1:
19:55:57 <Frederick>     Ambiguous type variable `a' in these top-level constraints:
19:56:09 <Frederick> Cale, I will need some days to get used with this identation
19:56:28 <Cale> Frederick: ah, right, because it doesn't know what type of list to expect
19:56:44 <Frederick> lets supose I want an integer list
19:57:14 <sethk> Frederick, watch out for the tabs/spaces problem.  Make sure your editor is set to spaces only
19:57:16 <Cale> main = do line <- getLine; let xs = read line :: [Integer]; print $ qsort xs
19:57:39 <Frederick> sethk, Im with it edited to tabs
19:57:41 <Frederick> dammed
19:57:44 <Frederick> thx a lot
19:57:57 <Cale> that ought to work
19:58:08 <sethk> at least eliminate that as a possible cause.
19:58:13 <wchogg> Lemmih, it would be wrong but amusing for your compiler to open up firefox and the haskell website when you screw up.  Either that, or simply print RTFM.
19:58:14 <Cale> if you ever get fed up with it, remember that semicolons and braces always work
19:58:49 <sethk> Cale, true.  I do understand why people don't want to do extraneous typing
19:59:03 <sethk> Cale, and the indented format is what you would enter anyway if you use good style
19:59:05 <Cale> present the compilation errors in the form of a text adventure game which you can walk around in
19:59:10 <sethk> Cale, but it can bite you in the ass at times.
19:59:27 <int-e> sethk: I don't know. it'd be something like popState = peek >>= \(hd,tl) -> poke tl >> return hd ; pushState hd = peek >>= \tl -> poke (hd:tl)
20:00:09 <sethk> int-e, could work.
20:00:22 <sethk> int-e, of course list head and tail are fine for push and pop all by themselves.  :)
20:00:24 <Frederick> same problem, I cant seeem to find the right identation http://rafb.net/paste/results/lBbH6B28.html
20:00:39 <sethk> Frederick, did you see Cale's note about using { } and ;?
20:00:53 <sethk> Frederick, you can take over the blocking task yourself.
20:01:07 <Frederick> sethk, it will be even worse cause I cant use it properly
20:01:07 <sethk> Frederick, I do this if I suspect I borked the indentation, to see if it changes things.
20:01:12 <Cale> Frederick: for now, just do {line <- getLine; let xs = read line :: [Integer]; print $ qsort xs }
20:01:20 <sethk> Frederick, if you can't, you also can't figure out why the indentation is wrong.  :)
20:01:58 <Cale> Frederick: the basic idea is that lines of the same block start at the same character on the page
20:02:32 <Cale> so your "let" is a little too far to the left, and your "print" is actually just right
20:02:36 <Frederick> crap
20:02:40 <sethk> Cale, except the first line of the block
20:02:41 <Frederick> 2 more spaces and nopw it works
20:03:04 <Frederick> Cale, ive started yesterday on haskell I dont have concepts clear yet
20:03:22 <Cale> sethk: yeah, he could also unindent the "print", but that wouldn't look right :)
20:03:51 <Frederick> Amuzing it works!
20:04:21 <Cale> Frederick: easier than creating a main action all the time is just to load your code in an interpreter
20:04:25 <Cale> like ghci
20:04:56 <Frederick> Cale, the program I will have to do certainly will need a main so I may betterget used soon
20:05:02 <Cale> then you can test qsort directly by typing things like  qsort [5, 3, 7, 1, 2]
20:05:15 <Cale> Frederick: sure, but it's still good for deugging
20:05:22 <Cale> debugging*
20:05:26 <Frederick> Cale, I agree on this point
20:05:38 <Cale> My 'b' key sucks.
20:07:10 <Frederick> Cale, is there any tool like special editor I can/should use for haskel?
20:07:48 <dav> Cale: speaking of ghci. i was trying to define a function in there. it didn't seem to like assigments. am I missing something?
20:08:03 <Cale> Frederick: well, there's a group here working on some really neat editor/ide tools, but for now, I just recommend your favourite text editor as long as it has haskell syntax highlighting
20:08:10 <Cale> Frederick: vim and emacs are both nice
20:08:13 <Cale> dav: right
20:08:22 <Cale> dav: you can use  let f x = ...
20:08:34 <Frederick> and why do I need to declare the input of the read line to be evaluated as an int?
20:08:35 <Cale> dav:  but you're not really supposed to use ghci that way
20:08:50 <Cale> dav: put your declarations in a file, and test them with ghci
20:09:08 <Cale> Frederick: because read needs to know which type of thing it's trying to read
20:09:25 <Cale> and the way that your program was written, it was impossible to know
20:09:33 <Frederick> Cale, but I can use the same qsort for chars right?
20:09:38 <Cale> right
20:09:44 <Cale> that's actually the problem :)
20:09:57 <Cale> this doesn't come up too often, because usually in a real program, you know what type of data you're reading
20:10:06 <dav> Cale: thanks! :-)
20:10:21 <Cale> dav: you can reload the file quickly with :re
20:10:37 <int-e> (just :r works, too)
20:10:45 <Cale> oh, it does now?
20:10:54 <Cale> cool
20:10:54 <int-e> I'm using it all the time :)
20:11:11 <Cale> I seem to remember it not working back when I started using ghci
20:11:21 <Cale> meh
20:11:22 <Frederick> Cale but this -> http://rafb.net/paste/results/7OpUP649.html
20:12:07 <Frederick> with an entry like [a,b,c] or ["a","d","b"] is returning error as Fail: Prelude.read: no parse
20:12:24 <Cale> It wants something which looks like a string
20:12:35 <Cale> but for that case
20:12:45 <Cale> I'd just remove the let, and qsort the line
20:13:39 <Cale> try it with "abc"
20:13:41 <Cale> er
20:13:50 <Cale> Or "hello, world!"
20:13:57 <Frederick> calm down
20:14:03 <Cale> heh
20:15:25 <Frederick> Im starting to get the concepts
20:15:34 <Frederick> thx a lot for the patience now I must go sleep
20:15:35 <Frederick> :)
20:15:42 <int-e> @eval data.List.partition (<5) [1,6,5,3,2,9,0,8,4,7]
20:15:46 <int-e> @eval Data.List.partition (<5) [1,6,5,3,2,9,0,8,4,7]
20:15:56 <lambdabot>  parse error on input `data'
20:16:02 <lambdabot> ([1,3,2,0,4],[6,5,9,8,7])
20:16:20 <Cale> Frederick: good night, and good luck with Haskell :)
20:17:18 <Frederick> Cale, this weekend I will expend a long time bugging you all here dont expect to be rid of me so easily :p
20:18:19 <Cale> Frederick: no problem :)
20:34:40 <Julianus> wow
20:34:45 <Julianus> ;)
20:35:22 <Cale> big netsplit
20:35:30 <Julianus> hahaha
20:35:54 <Cale> hm?
20:36:29 <stepcut> hrm, I jack wants me to register a callback function, I wonder how I can create a function ptr in haskell...
20:37:05 <Cale> stepcut: have you read the FFI spec?
20:37:25 <stepcut> Cale: yeah.. it talks about how to export a function to C, but that is for compile time stuff...
20:37:48 <Cale> hm?
20:38:24 <stepcut> there is 'Calling Haskell from C', but that is not quite what I am doing here..
20:38:32 <Cale> isn't it?
20:38:59 <Cale> You want to construct a FunPtr, right?
20:39:40 <stepcut> Cale, ah I missed that
20:39:55 <stepcut> thanks
20:40:00 <Cale> no problem
20:48:58 <stepcut> sweet! it seems to work!
20:56:28 <sethk> Is that like a sign pointed at the house with the screwy mirros?
21:07:41 <Julianus> bye guys
21:07:41 <Julianus> c u
21:22:52 <sethk> is there support in the libraries for marshalling and demarshalling?
21:23:09 <Akshaal> read, show ?
21:23:18 <sethk> Akshaal, no
21:23:24 <Akshaal> not exactly marshalling..
21:23:30 <sethk> Akshaal, right  :)
21:25:03 <sethk> there are others, you could use Storable, but I want either something clean or I'll write it myself.
21:27:55 <dons> support? yeah, Storable. peek and poke and so on.
21:28:18 <dons> or use c2hs or such
21:41:22 <Cale> dons: yi seems to crash a lot, and in different ways each time
21:41:29 <Cale> first one:
21:41:35 <Cale> (yi:11923): Gtk-WARNING **: Invalid text buffer iterator: either the iterator is uninitialized, or the characters/pixbufs/widgets in the buffer have been modified since the iterator was created.
21:41:35 <Cale> You must use marks, character numbers, or line numbers to preserve a position across buffer modifications.
21:41:35 <Cale> You can apply tags and insert marks without invalidating your iterators,
21:41:35 <Cale> but any mutation that affects 'indexable' buffer contents (contents that can be referred to by character offset)
21:41:36 <Cale> will invalidate all outstanding iterators
21:41:38 <Cale> Segmentation fault
21:41:43 <Cale> second:
21:41:48 <Cale> Xlib: unexpected async reply (sequence 0x286c)!
21:41:54 <Cale> followed by freezing
21:42:08 <Cale> (are you doing X calls from multiple threads?)
21:42:22 <sethk> dons, I don't want to use c.  I'm porting _from_ c.  actually c++, but the same difference.
21:42:42 <sethk> that gtk thing is a corrupted linked list
21:43:03 <Cale> the first thing I can cause to happen fairly reliably by holding down a key
21:43:22 <Cale> It'll type a bunch of characters and then die
21:43:30 <sethk> definitely random corruption of the heap.
21:43:37 <Cale> I'm not sure what it was that I did which caused the second one.
21:43:37 <sethk> probably the heap, definitely a link list structure
21:43:52 <sethk> Cale, use valgrind, it will find it in a few minutes
21:46:29 <dons> gtk sucks
21:47:08 <sethk> that it does
21:47:09 <sethk> big time
21:47:22 <dons> anyway, yi is way too beta atm. we'll see what happens in a month or so
21:48:36 <Cale> X kind of sucks too - why isn't it possible to write an app which makes X calls from multiple threads without crashing?
21:48:59 <sethk> it is possible
21:49:14 <sethk> dons, if you need debugging help let me know.  I more or less specialize in that sort of thing.
21:50:25 <CaptFudd> C and C++ arent the same difference
21:50:36 <dons> ah! ok. luckily we're not actually goign to hack gtk
21:50:50 <Cale> CaptFudd: same difference from what?
21:50:52 <dons> i'd like to keep strictly to haskell stuff, and work around any C bugs we find along the wya
21:51:39 <sethk> CaptFudd, I know, Cis harder
21:51:51 <sethk> CaptFudd, but in terms of the errors you can make, it is the same
21:52:03 <sethk> CaptFudd, absolutely nothing in c++ stops you from making all the traditional c errors.
21:52:04 <Cale> sethk: What do you do, have threads acquire some resource before making X calls, and then release it when they are done?
21:52:35 <sethk> Cale, you serialize the calls so that on a per call basis, only one thread is calling.  But a call (such as handling a single event) is very short
21:52:47 <sethk> Cale, similar to what happens with system calls on bsd
21:53:22 <Cale> I wonder if Gtk2Hs could be written in a way so as to ensure this
21:53:32 <sethk> Cale, sure
21:53:46 <sethk> Cale, it's a matter of taking control of event dispatching
21:53:55 <sethk> and the necessary functions are already there and exposed.
21:54:01 <sethk> BRB
21:54:21 <mflux_> after all, X is only a wire protocol, all you need to ensure that you don't mangle the packets and you should be home safe?
21:54:47 <mflux_> I suppose in certain cases you can also take multiple X-connections, but I don't know if that works for a single application very nicely..
21:54:51 <Cale> mflux_: you can't get the packets out of order
21:55:10 <mflux_> cale, not atleast the ones that affect some state..
21:55:22 <mflux_> cale, but I suppose drawing stuff is pretty stateless, no?
21:55:33 <Cale> yeah, I'd think so
21:55:45 <mflux_> there may be (and I think there even are?) some sequence numbers though, but that should be trivial to maintain
21:57:58 <Cale> I think you could just use a reader monad over IO carrying an MVar which represented the ability to make X calls
21:58:41 <Cale> and a lifting function from IO to the new monad which wrapped gtk2hs functions such that they would acquire and release this resource.
21:59:03 <Cale> TMVars even
21:59:58 <sethk> X is usually over tcp, and the packets are delivered reliably.
22:00:20 <sethk> Cale, yes, the mvar is basically a condition variable
22:02:01 <machack666> how do you update a deeply nested data structure?  say I have the declaration: data RecursiveMap = String | Map String RecursiveMap
22:02:32 <Cale> machack666: recursively :)
22:02:50 <machack666> naturally, :D
22:03:05 <sethk> machack666, use a balanced tree structure rather than a list to keep down the nesting levels.
22:03:22 <sethk> machack666, or use my b-tree structure which will cut down the size enormously, but isn't debugged yet.
22:03:24 <Cale> and don't think of it as updating the structure, think of it as constructing a new structure based on the old one
22:03:31 <sethk> :)
22:03:48 <Cale> sethk: he is using a balanced tree
22:03:51 <sethk> Cale, good
22:04:00 <sethk> Cale, I've seen people use straight lists for that.
22:04:01 <machack666> I'm wondering if there is a syntax to support updating to a particular level
22:04:11 <Cale> well, a bunch of balanced trees
22:04:13 <sethk> machack666, what do you mean "to a particular level?"
22:04:31 <Cale> there's no updating in Haskell :)
22:04:40 <sethk> Cale, I'm growing trees like rabbits.  If I can mix just a hare.  :)
22:04:51 <sethk> Cale, well, IORef, other cheating things.  :)
22:04:55 <Cale> yeah
22:05:12 <machack666> say I have a root object, and I have a series of Maps which are string indexed to either other maps or some terminal value
22:06:18 <machack666> if I want to set a key for a map which is accessed by several other keys (ie, not the root object) and create a new map with the insert function, while still retaining the rest of the existing hierarchy, how do I do that?
22:06:57 <Cale> machack666: just construct a new value where the rest of the existing hierarchy takes its definition from the old one
22:07:03 <Cale> It's all pointers
22:07:40 <sethk> machack666, of course the specifics depend on the tree structure, but in principal you can graft onto an existing tree starting pretty much anywhere
22:07:54 <sethk> machack666, now, if you mean there is only one copy of the data, that can be trickier.
22:08:19 <machack666> Cale: So, for a basic data record, data Basic = Basic { aField::String, bField::String } I can write structure { aField = newVal }
22:08:33 <Cale> right
22:08:41 <machack666> how do I do the equivalent when it is a nested structure like the above?
22:08:46 <Cale> and bField won't get rebuilt, it'll just be a pointer to the same thing
22:08:53 <machack666> right
22:08:56 <Cale> oh, you write a recursive function
22:09:11 <Cale> which decides what to do on each level of the structure
22:09:24 <Cale> possibly with extra parameters to control its behaviour
22:09:39 <machack666> structure { aField = lookupOrReplace structure value }
22:09:43 <machack666> something like that?
22:10:29 <Cale> if you like
22:11:10 <Cale> if you could be more specific about what you're trying to do, I might be able to help better
22:12:56 <machack666> Well, actually, I'm trying to use Data.Array to keep track of a large number of similar structures, each of which has indivdual fields which can be updated.  It's not actually a recursive structure, but I figured if I could understand the recursive case, I'd be better able to understand the rest.
22:13:30 <Cale> what sorts of transformations do you want to do?
22:13:50 <machack666> "updates" of the values.
22:13:56 <Cale> you could write a map function over your structure, which would recursively apply a function to all the elements in it
22:14:04 <Cale> or various kinds of folds
22:14:22 <machack666> I will only want to update the structure one index at a time, in response to user interaction.
22:15:01 <machack666> for a simple example, think a battleship gameboard where I want to update when a square has been chosen for a missle.
22:15:01 <Cale> so maybe you want another datatype which indexes into that structure?
22:15:40 <Cale> for that, I'd just use an array with //
22:16:28 <machack666> well, that's too dang obvious.
22:16:34 <Cale> hehe
22:16:55 <Cale> but note what // does, it takes some indexes and new values, and it makes those updates
22:17:27 <Cale> if you wanted to do a similar thing on a different kind of structure, you'd need some kind of indexing system
22:19:19 <machack666> so write a function that takes the array, the field to update, the new value, and the index, do a whiz-bang "array // (ix, (array ! ix) { field = value })" and we're gravy?
22:20:15 <machack666> any sort of syntactic shorthand to generate helper functions for these functions?  I presume there could / should be one for each field in the secondary structure.
22:20:50 <Cale> unfortunately, field labels are not first class
22:20:58 <Cale> so you can't pass them as parameters
22:20:58 <machack666> or maybe TH could come to the rescue
22:21:19 <Cale> though you could create a data structure which represented paths to elements of your structure
22:21:35 <Cale> For example
22:21:42 <Cale> Say I have a binary tree:
22:22:05 <Cale> data Tree a = Leaf a | Branch a (Tree a) (Tree a)
22:22:06 <sethk> you have a binary tree
22:22:33 <machack666> yup
22:22:47 <Cale> data Path = Stop | Left Path | Right Path
22:23:26 <machack666> I think I see where this is going...
22:25:00 <machack666> I see how that would work in the uniform recursive case with a simple datatype, but how would it work for records?  Aren't they essentially tuples in disguise?
22:25:02 <Cale> say you have a tree, a value of type a, and a path. Then you can recurse through the tree according to the path, and supposing that the path is valid, you can update the value of type a at that spot with the new one
22:25:27 <Cale> Records are just like any other data type in Haskell, except for the syntax
22:26:00 <machack666> so if I want to update field 1 or field 8, how would I indicate that?
22:26:25 <Cale> Not necessarily with a number :)
22:27:17 <Cale> In fact, for data structures where there's more than one type of data stored in there, you probably want the value to update with to be a part of the path
22:27:31 <machack666> example?
22:28:32 <Cale> data Tree a b = Leaf a b | Branch (Tree a b) (Tree a b)
22:29:01 <Cale> data Path a b = Left Path | Right Path | A a | B b
22:29:32 <Cale> of course, this sort of thing can often fail, if your path doesn't lead anywhere
22:30:54 <machack666> are the A and B concrete types?
22:31:36 <machack666> or just a way of distinguishing the "position" of the structure?
22:32:14 <Cale> just a way to distinguish positions
22:32:27 <Cale> is it an update to the a field, or the b field?
22:33:38 <machack666> so say I have 10 fields ... it starts to become unwieldy to have data Path a b c d e f g h i j  = Left Path | ... | J j
22:33:49 <machack666> any shortcuts?
22:34:26 <Cale> Well, what are you trying to do really? :)
22:34:56 <Cale> It's unusual to have that much data around where you don't break down the structure further
22:35:06 <Cale> or define a set of special operations on it
22:36:10 <machack666> I have a grid of squares which have a number of fixed attributes, such as fgcolor, bgcolor, character, number, borders, fill, locked status.
22:36:25 <machack666> basically a big recurring structure for each square in the grid
22:36:59 <Cale> okay
22:37:01 <machack666> edit functionalities will change a particular field in a particular square
22:37:11 <machack666> usually one square at a time.
22:37:13 <Cale> so really, you have a grid of things of one type
22:37:17 <machack666> right
22:37:28 <machack666> that's why I thought Data.Array is a logical choice
22:37:36 <Cale> oh certainly
22:37:43 <Cale> especially if it doesn't change size
22:38:01 <machack666> right, unless requested, but I think I know how to handle that.
22:38:41 <machack666> I'm writing a "Grid" library which essentially wraps a lot of nice features of Data.Array specific to a 2-dimensional array
22:40:19 <Cale> machack666: like what?
22:40:32 <skew> Data.Array is probably not the array you want if you are going to be doing a lot of updates
22:40:57 <Cale> Yeah, you can just replace the type name with DiffArray and import Data.Array.Diff
22:41:05 <Cale> which makes the updates faster
22:41:18 <Cale> O(1)
23:05:47 <Megzl> I keep on being quite curious about Haskell, but I haven't been able to allow myself to get into it. I get into things really obsessively and spend all my time working on learning it...
23:05:58 <Megzl> However, each time I come here, it end up feeling like a whore.
23:06:10 <Megzl> ie, that I wasted hours talking about a language that is really, well, a toy.
23:06:25 <Megzl> Whereas I could have been, say, learning something else; learning to do better network code in C++.
23:06:33 <Megzl> To get serious cool shit done, instead of 'messing around' with Haskell.
23:07:07 <Megzl> The last time I came here I was really interested in all the ideas about Haskell, but when I was through I said: oh god, oh god, I could have been coding, why am I wasting time with Haskell.
23:08:58 <aleator> Megzl: If it makes you feel any better or less abrasive, I do most of my real work in Haskell.
23:09:13 <Megzl> How could I get real stuff done with Haskell?
23:09:21 <Megzl> That doesn't seem possible.
23:09:34 <stepcut> Megzl: more coding, less yapping...
23:10:02 <Megzl> Let's see, I use luabind which binds lua into C++ -- it's a library for C++
23:10:10 <Megzl> Let's see, I use RakNet -- which is a network code library -- uh, for C++
23:10:23 <Megzl> I use Ogre3d -- the best 3d engine -- uh, for C++
23:10:34 <sethk> Megzl, I don't see anyone handcuffing you to a chair, prying your eyelids open, and making you talk about haskell
23:10:48 <Megzl> Ok, sure, in "theory" I could spend the next 6 months trying to get those things to work in haskell.
23:10:51 <sethk> Megzl, go mozy on over to the c++ channel.  They'll take good care of you over there
23:10:57 <aleator> Megzl:  I use OpenCV. It is image processing library for C. And I still use haskell.
23:10:59 <sethk> Megzl, don't spend any time on it.
23:11:14 <sieni> megzl: could you go whining somewhere else, that's quite offtopicl
23:11:31 <Megzl> No, these are real concerns.
23:11:34 <Megzl> It's me 'reality.'
23:11:40 <Megzl> s/me/my
23:11:46 <sethk> Megzl, do you expect people here to agree with you?
23:11:54 <sethk> Megzl, you are entitled to use any language you like.
23:11:59 <Megzl> sethk: Can you please stop while you're ahead.
23:12:04 <sethk> Megzl, no
23:12:11 <sethk> Megzl, go code in c++
23:12:14 <sethk> have lots of fun
23:12:18 <aleator> Megzl: Of what? No one is forcing you to use haskell. If you can't use it is Your problem.
23:12:29 <Megzl> sethk, I never asked anyone to agree with me. Stop saying "go code C++" -- come up with something more unique and interesting to say besides a boilerplate cliche response.
23:12:43 <Megzl> Let's end the negative tone you have right now, sethk.
23:12:50 <Cale> Megzl: I wrote a pipeline scheduler in Haskell which scheduled some sine/cosine pair code so that it ran at 2.6 clocks/float
23:12:59 <aleator> Choose tool that is appropriate for you instead of complaining of how hammer is a bad screwdriver. :/
23:13:01 <sethk> Megzl, go write c++
23:13:07 <Megzl> sethk on /ignore
23:13:19 <sethk> I'm just crushed.  :)
23:13:24 <Megzl> Cale: So your idea is that Haskell has specialized uses?
23:13:32 <Cale> Megzl: no, very general ones
23:13:34 <Megzl> Cale: That I should use Haskell in places where C++ can't come close?
23:13:41 <Cale> You can code lots of things in Haskell
23:13:55 <sethk> well, let's be honest.  he can't.
23:14:05 <sethk> :)
23:14:26 <Cale> Places where C++ won't come close are abundant though
23:14:36 <sethk> Cale, of course.  but he is just trolling
23:14:39 <sethk> don't feed him.
23:14:47 <Megzl> Cale: But what about all my libraries? It's hard enough working on a project where instead of having a 10 man team, I have a 1-man team but have access to 20 men's excellent libraries.
23:14:53 <Cale> FFI
23:14:59 <Megzl> And I end up using 7 different libraries, and each one of them is completely essential.
23:15:27 <Megzl> It's hard enough keeping it all straight just in C++ -- let alone bound *in haskell*
23:15:40 <Cale> hm?
23:15:55 <Cale> There are quite good bindings to things
23:16:19 <Cale> Usually with abstraction layers which make the libraries nicer to use and harder to code bugs with
23:17:04 <Megzl> Cale, but imagine if I set out to -switch to Haskell-
23:17:12 <Megzl> Say I was going to do it.
23:17:17 <Cale> okay
23:17:22 <Megzl> I'd have a ridiculous amount of things to do to get my project going with Haskell.
23:17:33 <Megzl> I think it's too much.
23:18:07 <aleator> Megzl: I claim contrary. I think (besides learning haskell+ffi) you'd have exactly same amount of work ahead of you in many cases.
23:18:21 <Megzl> Ok, let me give you a little example.
23:18:57 <Megzl> I use a language called lua -- which is a really awesome scripting language. It's dynamically typed, and the lang is based around tables -- tables which can store any type of value as key, and can store other tables as values.
23:19:02 <Cale> That pipeline scheduler could have been 10 or 15 times as much code in C.
23:19:14 <Cale> and I wouldn't have gotten it done
23:19:21 <skew> Cale: only 15x ?
23:19:24 <dons> I have had /ignore Megzl for days now, and always wonder what you guys get upset about :)
23:19:33 <Cale> skew: possibly conservative :)
23:19:50 <skew> trying to make any real data types in C is a huge pain
23:20:04 <skew> which reminds me, I'm supposed to be writing a tool to generate the things
23:20:09 <Cale> skew: it used lazy evaluation heavily
23:20:25 <skew> just for searching?
23:20:27 <Megzl> There exists such a thing for lua called "luabind." Luabind is a rather wild piece of wizardry; it's had two guys working on it for years, and it's all template metaprogramming. But it will reflect your C++ classes, functions, everything, into Lua.
23:20:43 <Megzl> In the tiniest bit of syntax, I can drop whole classes in.
23:20:54 <Megzl> And the binary/C++ compiled version runs from Lua.
23:21:03 <Megzl> For each function.
23:21:13 <Megzl> Now, I use lua all the time for my objects, scripted objects.
23:21:38 <Cale> Megzl: check out hs-plugins
23:21:48 <Megzl> If I wanted access to something like this in Haskell -- I'd need to spend the next 2 years re-doing this kind of work.
23:21:52 <dons> please don't
23:21:56 <skew> does that help with FFI stuff?
23:22:25 <skew> I thought that was mostly about dynamically loading Haskell, except for including dlopen bindings
23:22:54 <dons> @type System.Eval.Haskell.eval
23:23:05 <dons> wake up lambdabot!
23:23:05 <skew> is anyone here familiar with JHC?
23:23:14 <lambdabot> forall a.
23:23:14 <lambdabot> (AltData.Typeable.Typeable a) =>
23:23:14 <lambdabot> String -> [System.Eval.Utils.Import] -> IO (Maybe a)
23:23:29 <Megzl> It's not only a matter of things which exist to bind C/C++ api's to Haskell -- but also things which are FOR c++.
23:23:35 <skew> I'm wondering if the explicit type passing could be used to make a really nice Dynamic
23:23:42 <Megzl> http://www.rafb.net/paste/results/rz4NBk34.html // Here's what a few of my luabind bindings look like, in C++ code.
23:23:49 <dons> like a Typeable?
23:24:15 <skew> like supporting polymorphism, and all the rest of the type system
23:24:40 <dons> ah, yes, you need at least to represent the full range of types, and use unification at runtime, instead of ==
23:24:49 <dons> see "Plugging Haskell In" :)
23:24:53 <Megzl> I just couldn't do it in Haskell -- I couldn't reflect Haskell functions/classes into a script language.
23:24:59 <Megzl> Without a year of work.
23:25:18 * dons `throwTo` home
23:25:41 <Megzl> I really do want to do Haskell though.
23:25:44 <aleator> Megzl: Why would you wish to? I consider haskell atleast equivalent to lua what comes to 'scripting'.
23:25:50 <Megzl> It bugs me, cause I want to learn only for the brain-aspect of things.
23:26:04 <Megzl> But my pragmatic side is saying No, you need to 'get things done and built.'
23:26:05 <aleator> Megzl: Well that shows.
23:26:40 <Cale> I didn't mean check out hs-plugins for binding to an external scripting language. I meant check it out for using Haskell as a "scripting language" for your app.
23:26:57 <Cale> (For your Haskell app)
23:27:05 <Megzl> aleator: well, I can startup 70 lua VM's. the whole thing only takes 100K
23:27:19 <Megzl> you can just fire them VM's off like torpedos
23:27:25 <skew> that makes sense, but I thought Megzl was complaining about wanting to use C++ libraries at that time
23:27:50 <Megzl> Ok, well I don't necessarily need to use Lua.
23:28:02 <Megzl> But I need to be able to type program code into a game-type GUI to script objects in realtime.
23:28:04 <aleator> Megzl: Why do you wish to launch 70 luas?
23:28:10 <Megzl> aleator: They run on the server.
23:28:23 <Megzl> aleator: Say, for instance: A creature is a lua VM.
23:28:26 <Megzl> that creature can crash.
23:28:31 <skew> In Haskell, 70 threads probably gives you equally good isolation
23:28:33 <Megzl> If the user who created it didn't code it properly.
23:28:45 <Megzl> ie, the scripts aren't reliable.
23:29:48 <Megzl> Ok -- this is even too much for Haskell -- I should ask a very simple question.
23:29:55 <Megzl> How about getting Ogre3d engine running in Haskell?
23:30:15 <skew> hsc2hs?
23:30:28 <skew> what is it that wxHaskell is built with?
23:30:35 <Megzl> It's not C, skew.
23:31:09 <Cale> so?
23:31:14 <Cale> Isn't it C++?
23:31:18 <Megzl> Yes.
23:31:32 <Cale> So you should be able to write bindings
23:31:34 <skew> http://www.haskell.org/libraries/#interfacingTools
23:31:52 <skew> something there should get you halfway
23:32:01 <Megzl> And how long would those bindings take me to write for Ogre3d's 1000 member functions?
23:32:06 <Megzl> and 98 classes
23:32:13 <Megzl> maybe it was 150 classes, I don't remember
23:32:35 <skew> the question is, how long would it take to write or borrow a tool that would generate the bindings
23:32:46 <sethk> damn, what a time for my box to crash.
23:32:50 <sethk> I missed the fun.  :)
23:32:53 <Cale> You don't write bindings like that by hand.
23:33:17 <skew> take a look at wxHaskell, I think they generate their lowest level bindings
23:33:20 <Cale> iirc, someone was writing a template haskell program which would generate bindings on the fly
23:33:25 <aleator> Megzl: Be a bit less abrasive and you actually learn things instead of putting people into defensive.
23:33:29 <skew> and it's a C++ program too...
23:33:49 <aleator> Megzl: Do you use all 1000 functions? Or do you need all of them just to start?
23:34:21 <Megzl> A large number of those are because of inheritance
23:34:23 <Megzl> duplication
23:34:49 <Megzl> Ogre3d's interface is quite fat.
23:34:59 <skew> anyways, it's probably much more constructive to find something you can do without these libraries, rather than complaining that you don't know enough about Haskell to bind the libraries, and it's not worth learning Haskell because it doesn't have library bindings
23:35:15 <Cale> You could use a better form of polymorphism in your binding, and get a library which was easier to use.
23:35:19 <Megzl> But if I can't use my libraries I have no use for it.
23:35:34 <skew> Is there nothing you ever write a program for except to use Ogre3d?
23:35:36 <aleator> Number of functions does not usually matter. it is things like memory management style and function signatures that make bindings easier or harder.
23:35:38 <Megzl> Library access is #1 priority
23:35:55 <Cale> I agree with aleator
23:37:17 <Megzl> Which Haskell binding thing "just works."
23:37:30 <Megzl> Get something that "just works" and you'll increase Haskell's spread considerably.
23:37:45 <Megzl> Which Haskell binding thing "just works." --> ?
23:38:06 <skew> I think none of them
23:38:46 <skew> wxHaskell borrowed C wrappers from another binding project, it turns out
23:38:54 <sethk> Cale, I'm putting my persistent state into an IORef, and extracting it from the IORef and use it as the initial state on calls to runStateT.  Is that the best way to do it?
23:39:02 <Cale> You may have to put in some effort with all of them. There are things in other languages which just don't translate in a direct fashion to haskell.
23:39:26 <Cale> (You could come up with a translation, but you'd want control over it)
23:39:40 <Cale> sethk: you could do that
23:39:49 <Megzl> This would be fine if I was using 1 library.
23:39:53 <Cale> the IORef is attached to your user interface?
23:39:54 <Megzl> I could consider Haskell.
23:40:13 <sethk> Cale, not exactly
23:40:13 <Cale> Megzl: why not look at the libraries Haskell already has?
23:40:24 <sethk> Cale, it doesn't have a user interface in the usual sense.  It is a server
23:40:27 <aleator> Megzl: No one wants you to consider haskell?
23:40:47 <Megzl> Cale: There's just no way there's things like this stuff for Haskell.
23:41:03 <sethk> see?  I told you he's trolling.  :)
23:41:05 * aleator feels so ashamed to enjoy this trolling..
23:41:07 <Cale> Megzl: there are libraries to do OpenGL
23:41:29 <Megzl> Cale, Ogre3d is independent of OpenGL or Direct3d
23:41:33 <Megzl> you can use either.
23:41:39 <Megzl> And it supports GL/DX shaders.
23:41:49 <Megzl> Cg, HLSL, etc.
23:42:16 <Megzl> Ogre does multiple renderer plugins without any overhead.
23:42:19 <Cale> so use it :)
23:42:41 <Megzl> Cale: ie, Raknet: A game network objects library and client/server system?
23:42:52 <Megzl> no such for Haskell!
23:43:12 <sethk> Cale,  in the c version (that I'm porting from), I have an environment handle class which has various bits and pieces of info.  I have some other shared data structures as well.
23:43:21 <Megzl> Ok, I'm sorry for sounding this way, but I'm just trying to realistic.
23:43:29 <Megzl> These are my real concerns.
23:43:44 <sethk> Cale, I've done some of the conversion of types.
23:43:47 <Cale> Megzl: why not just code it in both?
23:44:03 <Megzl> I guess I should just give up on thinking I could get any real stuff done with Haskell, but instead use it for messing around/learning a new way of thinking about code.
23:44:12 <Cale> If you want to use Haskell, I recommend it for all the complex algorithmic stuff you're doing
23:44:12 <sethk> Cale, anyway, so far IORef is working.  My main question is:  is there another better, less imperative alternative?
23:44:17 <Megzl> Which might help improve all my other code in any language.
23:44:18 <skew> Megzl: it sounds like you have one particluar problem, and one particluar library, and complain that other languages do not have it. You might equally complain that lua has nothing like Ruby on Rails, and is therefore totally useless as a language
23:44:33 <Cale> sethk: well, why is that state being maintained beyond the life of your state monad?
23:45:18 <Cale> sethk: if you're going to keep it in an IORef anyway, you might as well just access the IORef directly
23:45:24 <sethk> Cale, because it has to be shared
23:45:33 <Megzl> Ruby on rails is cool, yeah.
23:46:15 <sethk> Cale, wouldn't you still get the advantage of the state being provided to the StateT code?
23:46:17 <skew> and lua doesn't have it, it would take me years to write, lua is useless for getting real work done, maybe just useful for learning new ideas about scripting languages
23:46:27 <sethk> Cale, that is, the state isn't an argument on every call
23:46:55 <sethk> Cale, I guess you could protect the IORefs with concurrency objects and use the IORef directly.
23:47:12 <Cale> Megzl: I could claim that C++ is a poor language, because it's hard to write bindings to Haskell libraries in it.
23:47:25 <skew> a distributed multi-language 3D game is not a good first program in any combination of languages, I think
23:48:01 <sethk> Cale, I can restructure so that threads sleep, and all the threads remain inside the StateT monad, but then they have to receive data from input streams.
23:48:03 <Lemmih> I miss the old days where the Haskell community was small enough to keep the trolls out. *sigh*
23:48:13 <sethk> Lemmih, don't answer him.
23:48:22 <sethk> Lemmih, I can't do that, he /ignored me.
23:48:29 <sethk> arrogant bastard
23:48:54 <sethk> by the way, on channels where I'm an admin, if someone does a clearly aggresive ignore like that, he is kicked.  :)
23:48:59 <sethk> which would be my vote.
23:49:00 <Cale> Megzl: and if you want this stuff for Haskell, why don't you write it?
23:49:07 <integral> sethk: why are you making it worse by shouting about it?
23:49:18 <sethk> integral, you're right
23:49:19 <skew> because he doesn't know enough (yet) to do it
23:49:46 <Cale> I haven't had too much need for non-Haskell libraries. In fact, it's very rare that I need a library that's not in the GHC Hierarchical libraries
23:50:09 <Cale> I suspect many people are the same
23:50:40 <sethk> integral, because he pissed me off, but you are right, I shouldn't feed him.  :)
23:51:10 <Cale> integral: Megzl has ignored sethk, I think
23:51:44 <skew> there's lot of stuff like XML, DB access, GUIs that isn't in there
23:51:44 <Cale> sethk: hmm...
23:51:45 <integral> Cale: I gathered that bit :)   But it doesn't help the problem go away by taking the channel over with complaints about it...
23:52:11 <Cale> skew: all of which don't show up too often in the code I find myself writing
23:52:30 <Cale> skew: the GUI bit is true. Nymphaea uses gtk2hs
23:52:32 <integral> skew: Do you think those libraries should always come bundled with a compiler, rather than supplied as extra packages?
23:52:37 <sethk> Cale, back to haskell  :)  Can the stuff we did last night with StateT and two monads, be extended to others?  Is there a way with monads so that my code running in the StateT monad can use not only IO, but a third monad (that I wil construct)?
23:52:38 <skew> and there's that promised library diaspora
23:53:19 <integral> I quite like the extra packages way since they all tend to require sets of C libraries,  and IMHO it gets messy when a compiler suite detects which libraries to install due to uninstalled lib dependendencies
23:53:50 <Cale> sethk: you can apply another monad transformer, if that's what you're asking
23:55:17 <sethk> Cale, what's the mechanism to use it?  I make the call from main which creates the StateT monad, and that monad now has access to IO and StateT.  I don't understand how to extend that technique for an additional manager.
23:55:29 <Cale> integral: I rather like being able to ask my admin to install ghc, and getting most of the libraries I'll likely need :)
23:55:48 <skew> integral: I think that's a sensible default, except for the library dependency stuff, but it  probably leads to a cleaner organization to separate things out so they can come as individual packages
23:55:51 <sethk> Cale, a different variant of lift
23:56:42 <integral> Cale: that's true.   but if they don't have gtk installed, would you expect GHC to include a copy of gtk and its dependencies just to build gtk2hs?
23:56:43 <Cale> ReaderT Integer (StateT [String] IO) a
23:57:13 <Megzl> Actually, I've never used /ignore in my whole life -- it's against my morals.
23:57:23 <Cale> integral: sure, things which are bindings to external libraries might be better kept separate
23:57:30 <Megzl> Telling sethk I put him on /ignore so that he stops saying "go use C++" isn't, however, against my morals.
23:57:39 <integral> Cale: sure, I think that's the best place to put the difference
23:58:04 <Megzl> I guess you guys don't see, I really want to get into Haskell.
23:58:24 <Megzl> But we can't forget efficiency!
23:58:27 <Cale> Megzl: you keep saying that, but you don't seem to be talking about Haskell all that much
23:59:19 <Cale> Megzl: I'd suggest coding a frontend of your app in C++ with the Ogre3D library, if you wish, and have that part communicate with a haskell program which handles the game logic.
23:59:26 <Megzl> Cale, I just have so much work to get done -- Haskell is kind of like waving goodbye to a beautiful woman on a train who you'll never get to spend time with cause you have to go to another country to get work done.
23:59:52 <skew> horribly broken analogies
23:59:55 <Cale> Megzl: Use Haskell for the projects you do in your spare time then
