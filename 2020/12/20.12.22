00:14:23 <Turmiht> I disconnected.. have a way to get history I missed?
00:15:32 <dminuoso> Turmiht: Check the topic of the channel
00:22:40 <Turmiht> I read the log and try -w, but found nothing about -w option in cabal --help
00:25:40 <sclv> -w is short for with-ghc
00:26:24 <sclv> re earlier, autocorrect turning my double hyphens into dashes, sigh
00:27:44 <Turmiht> is it in cabal's help? I still cannot found it
00:28:22 <Turmiht> search pattern `with-ghc` highlight nothing
00:28:39 <sclv> might only be kn the help for specific subcommands
00:31:31 <Turmiht> build with 8.10.3 also failed
00:31:36 <Turmiht> sadly
00:32:55 <Turmiht> -w works but it's not in manual if I'm not missed it
00:33:28 <Turmiht> whatever, your advise is helpful and thx
01:33:48 <Turmiht> I just removed the binutils installed from homebrew and the original problems disappeared however how it fails in building phase instead of linking.
01:34:32 <Turmiht> Seems ghc use the linux version bin utils to build lib for me earlier.
01:37:16 <Turmiht> just for reference if somebody meet the same error.
01:53:25 <kindaro> How can I view Template Haskell splices when building with Cabal?
01:53:52 <kindaro> `cabal build --ghc-options '-ddump-splices -ddump-to-file'` does not seem to produce any relevant files.
01:54:46 <kindaro> I am using Cabal 3.4.
02:09:51 <gentauro> 08:41 < tdammers> gentauro: you'd think well-typed, out of all people, would have a "strictly no scandinavians" hiring policy?
02:10:12 <gentauro> I just find it strange that no scandis are at your company. I mean, people here are all <3 Haskell …
02:10:43 <gentauro> I heard from an employee that IOHK has a single dane (or somebody living here in CPH) as an employee
02:10:57 <gentauro> maybe is the wage gap? 
02:11:30 <gentauro> tdammers: nevertheless, I'm doing some promo on LinkedIn. Hopefully some of my fellow CPH and FP lovers will apply :)
02:12:52 <tdammers> yes, please do. wage gap might play a role, but I don't think it's the decisive factor - after all, we do have people in other high-income areas
02:15:03 <gentauro> tdammers: I noticed myself (found and organizer of MF#K in Denmark) where people "beg" for FP jobs. And yes, wage isn't an issue. Personally, I had to decline a Swedish (Haskell) startup-job cos the person offered me a salary that was worse than a Danish cashier …
02:15:18 <gentauro> I mean, I would <3 to work with Haskell, but with a "fair" salary ;)
02:15:28 <tdammers> hmhm
02:16:31 <gentauro> tdammers: Well-Types is an UK company right? What will happen from the new year (Brexit)?
02:18:48 <tdammers> it is, yes
02:19:23 <tdammers> I'm not sure it's decided what the consequences of Brexit will be, but it won't be the end of the company
02:22:27 <gentauro> tdammers: I guess WT can do the same as `serokell` where if the owners of WT just apply for a virtual Estonian citizenship (I have it) they can make a company in the EU from anywhere in the world
02:22:46 <gentauro> but I guess the owners of WT already have that covered :)
02:22:55 <tdammers> yep
02:22:58 <merijn> eh, Brexit has already happened, this year is just the end of the grace period for the free trade agreement. And since consulting isn't a physical good I suspect the impact of Brexit is at worst "slightly increased cost"
02:23:11 <tdammers> we also literally have one employee in Estonia (though I believe he doesn't have citizenship)
02:23:38 <tdammers> merijn: yeah, hence my assessment that chances to the company structure might not be necessary at all
02:23:54 <tdammers> after all, we already have plenty of clients outside of the EU
02:24:44 <gentauro> merijn: I do freelance gigs. And my `Certified Public Accountant` told me to "stay away" from anything UK related (so much paperwork that needs to be done now)
02:25:39 <gentauro> 11:23 < tdammers> after all, we already have plenty of clients outside of the EU
02:25:42 <gentauro> good to hear
02:26:10 <tdammers> the interesting bit is of course that we're a UK-based company that has both clients and employees outside the UK
02:26:42 <merijn> gentauro: I mean, it's the exact same paperwork as working with companies in the US
02:27:38 <tdammers> this is interesting already even without brexit, because while I am employed by WT directly as far as employment legalities are concerned, the fiscal situation is that WT rents my services from a Dutch payroll agency, and I am fiscally employed by the payroll agency, not WT
02:27:46 <gentauro> merijn: yeah, that pretty `meh` as well. I know one of the few `Tor` employees here in Denmark. It was to much hasle to `Tor` created a danish subsidiary company in Denmark
02:28:55 <merijn> gentauro: You don't need to directly employ people anyway. An old colleague "works for" a US company, but he's basically self-employed and then his company gets contracted from the US, as there's much simpler paperwork for B2B contract
02:28:57 <tdammers> some other WT employees are fiscally self-employed, and send invoices to WT directly, so they get to do the international paperwork themselves - but I opted to do the payrolling thing, for all sorts of boring reasons
02:29:37 <gentauro> merijn: yeah, that is what Oskar Wickström (haskellatwork) does :)
02:30:57 <kuribas> why isn't there a IsLable instance for Proxy?
02:31:06 <kuribas> IsLabel
02:31:09 <tdammers> main reason being that Dutch gov't is on a crusade against "fake self employement", and that means that if you do it that way, you will be subjected to a lot of paperwork and scrutinity, and you may find yourself being considered "not really self-employed after all", and then you get to deal with even more bureaucratic nonsense
02:31:45 <kuribas> Or at least some kind of Label type in base?
02:31:50 <tdammers> I mean, the intended goal is honorable - this kind of fake self-employment has been a loophole to bypass labor laws for a long while
02:32:22 <gentauro> tdammers: so it's like in DK. If you work as a freelance as you would do as an employee (same tasks) then the Government will "fine" the hiring company
02:32:38 <tdammers> yes. even retroactively.
02:33:00 <gentauro> the trick is to have at least "two different" companies in a fiscal year
02:33:12 <tdammers> the rules are bit more involved here
02:33:17 <gentauro> I guess
02:33:29 <tdammers> e.g., for certain industries (like performing arts), two is not enough
02:34:12 <tdammers> you also have to make a plausible argument that you are spending at least 24 hours per week directly on the job - and for musicians, this can be a problem, because the time you spend preparing for gigs and practicing your instrument skills does not count towards that
02:34:30 <gentauro> :o
02:34:41 <tdammers> which is absolute nonsense of course, but that's the situation
02:35:04 <gentauro> so artist needs to be part of a "corporate" then?
02:35:12 <tdammers> hmm, no
02:35:15 <gentauro> that will help with "creativity"
02:35:28 <kuribas> tdammers: that would make the actual work versus percieved work ration for a musician 0.1% 
02:35:35 <tdammers> some artists manage to meet the criteria, while many others instead do the payroll thing
02:35:43 <tdammers> kuribas: yes, just about
02:36:34 <tdammers> kuribas: though not that extreme. when I was still a pro musician, I would work 80 hour weeks on average; about 2-3 hours of that would be performing, and another 16 hours teaching, plus maybe 1-2 hours doing paid composition / arrangement work
02:36:48 <tdammers> so about a 1:4 ratio
02:37:29 <gentauro> maybe they are part of the "SCAM" that they use in Spain with the "media money". It's shared based on your exposure on TV/radio. People who "sell out" and vote the "dark side" on how to distribute the "media money", gets their music played between 01:00 - 05:00 AM
02:37:52 <gentauro> since ther music is played the "most", they get more TV-money that "well know artist"
02:38:32 <gentauro> "well know artist" complain about this, but nobody cares cos they had these campaigsn where they called "everybody thiefs" for "stealing the music". Karma can be a b- …
02:38:35 <gentauro> :)
02:38:46 <tdammers> it's a shame that there's no good model for fitting professional artists into the capitalist model
02:38:48 <kuribas> tdammers: funny thing is, if I am doing choir accompaniment, I hardly need to practice, and get payed usually quite well.  When doing "serious music", like Brahms quartets, I spend months praciticing, going to Gent every weekend with the train to rehearse, and if I get just the cost back I can be happy.
02:39:53 <kuribas> tdammers: tl;dr people don't care about Brahms, but they care about John Rutter :-)
02:40:07 <gentauro> tdammers: I once where at this small bar with some IT-people drinking a few beers. It was only us and some "random" Swedish band playing some music in the background. Since nobody else came in, the owner didn't want to pay the band. So we all chipped up money for gas so they could go back to Sweden
02:40:14 <tdammers> kuribas: that's the arts for ya. when I was a pro, I'd do the stuff I love for a sandwich and gas money, but playing stupid charts stuff, or just sitting in a corner playing unobtrusive piano music was the stuff that'd rake in the money
02:40:15 <gentauro> musician don't have it easy …
02:40:18 <kuribas> or worse, Ludovico einaudi
02:41:04 <tdammers> I know you classical pianists hate Einaudi, but I kind of admire him for having found a thing that sells and consistently pulling off selling it over and over and over again
02:41:20 <tdammers> and apparently he manages to do it without grinding his soul into a mushy pulp
02:41:21 <kuribas> sure, he's absolutely great at marketing
02:41:45 <gentauro> wait a second. Is this an analogy with FP/Haskell? xD
02:41:53 <tdammers> nooooooo...
02:41:58 <kuribas> yeah, this is very offtopic
02:42:15 <kuribas> unless you compare einaudi with php
02:42:25 <tdammers> nah, he's way too consistent
02:42:31 <gentauro> kuribas: for me it is. I would rather work with Haskell, but what brings food on the table is my .NET gigs
02:42:34 <gentauro> xD
02:42:37 <kuribas> tdammers: lol
02:42:53 <kuribas> gentauro: not f# I suppose
02:42:56 <kuribas> ?
02:43:18 <gentauro> in Denmark is C#, cos the person who created it was a dane. Tough market to introduce something else …
02:43:48 <tdammers> C# is also insanely popular across Europe due to Windows and the MS stack in general
02:43:59 <gentauro> kuribas: but sometimes I do F#, but people can't maintain it so I end up re-writting it to C# :(
02:44:05 <kuribas> gentauro: can you introduce FP concepts in your team?
02:44:14 <tdammers> lots of European companies have been on MS stacks forever, and many corporate IT systems started as an Excel sheet on the CEO's computer
02:44:20 <kuribas> .NET seem to have better support for immutability than java
02:44:34 <tdammers> gah, there's the I-word again
02:44:51 <gentauro> kuribas: not where I am at the moment. It's a freelance gig. If I introduce something and the team can't take over, I have to provide "free hours" until they do. So this time no FP for me ;)
02:45:57 <dminuoso> https://hackage.haskell.org/package/websockets-0.12.7.2/docs/Network-WebSockets.html#t:WebSocketsData
02:45:59 <dminuoso> You should only use the Text or the Text instance when you are sure that the data is UTF-8 encoded (which is the case for Text messages).
02:46:06 <dminuoso> Can anyone guess what they mean by this here? It sounds confused.
02:46:10 <gentauro> kuribas: but right now, I'm writing a tool in Haskell that generates F# code :)
02:46:30 <kuribas> tdammers: what's wrong with that?
02:46:30 <gentauro> I'm expecting to have it ready by the end of the year
02:46:53 <tdammers> dminuoso: I think it means "if you are not sure that the data you will receive is UTF-8 encoded, then do not use the Text instances"
02:47:43 <tdammers> kuribas: it misses the point. the problem isn't just mutability, and making variables immutable when you can just willy-nilly have all sorts of side effects is completely pointless
02:48:07 <tdammers> take, for example, clojure, which makes a pompous deal out of immutability, but completely ignores other side effects, such as disk I/O
02:48:09 <kuribas> tdammers: I totally agree, but at least it's a small step, no?
02:48:47 <dminuoso> tdammers: Given the context that's strange.
02:49:42 <tdammers> dminuoso: the other interpretation just doesn't make sense ("when you are sure that the data is UTF-8 encoded, then do not use any other instances")
02:50:37 <kuribas> tdammers: IMO the biggest fuckup in clojure is using hashmaps for everything. 
02:50:43 <dminuoso> tdammers: Mmm. The phrasing is just odd, especially the `(which is the case for Text messages)` part of it.
02:51:08 <kuribas> tdammers: being so lenient means that most advantages of purity go away.
02:51:21 <gentauro> kuribas: some F# I have seen, it's just C# (OO) but written with F# syntax
02:51:38 <gentauro> very few people write F# as they would write SML/ML
02:51:44 <tdammers> kuribas: clojure never really had a lot of advantages of purity in the first place, but hashmaps-for-everything has nothing to do with it
02:51:46 <dminuoso> But I think they're just trying to say `fromDataMessage @Text` will crash, unles you are getting a Text message (as per websocket specs), or an utf8 encoded binary message.
02:52:02 <tdammers> you can have completely pure hashmaps (though preventing HashDoS is tricky then)
02:52:12 <kuribas> tdammers: hashmaps for everything means it's impossible to reason about anything
02:52:32 <kuribas> tdammers: and the goal of immutability is reasoning
02:52:47 <tdammers> no it doesn't
02:53:01 <tdammers> *pure* hashmaps means they're still pure, and you can still reason about their purity
02:53:36 <tdammers> it's very vaguely similar to how you can still apply pure reasoning to IO actions, as long as you don't apply pure reasoning to the *execution* of IO actions
02:53:50 <kuribas> pure until something crashes because you don't have a field in the hashmap...
02:54:38 <tdammers> that's orthogonal
02:54:47 <tdammers> we have enough partial functions in Haskell too
02:55:01 <kuribas> gentauro: in that case it would be better to keep it in C#
02:55:18 <tdammers> > [] ! 1
02:55:20 <lambdabot>  error:
02:55:20 <lambdabot>      • Couldn't match expected type ‘Array i0 e’ with actual type ‘[a0]’
02:55:21 <lambdabot>      • In the first argument of ‘(!)’, namely ‘[]’
02:55:25 <tdammers> > [] !! 1
02:55:27 <kuribas> tdammers: and I try to avoid partial functions in haskell
02:55:28 <lambdabot>  *Exception: Prelude.!!: index too large
02:55:44 <tdammers> so avoid partial functions in clojure. this has nothing to do with purity
02:56:36 <kuribas> tdammers: every function in clojure that takes a hashmap is partial.
02:56:50 <tdammers> that is obviously false
02:56:55 <kuribas> tdammers: or even worse when it isn't partial, it just returns a wrong result.
02:57:27 <kuribas> yeah, the "obviously false" case is worse.
02:57:37 <kuribas> I prefer things crashing early over wrong behaviour.
02:58:05 <kuribas> IMO total > partial > total doing the wrong thing
02:58:29 <tdammers> (get hashmap key) returns nil if the key doesn't exist
02:58:34 <tdammers> that is neither partial nor the wrong thing
02:58:41 <tdammers> what else would you want it to do?
02:59:08 <tdammers> it could crash, but that would make it partial, by the definition we use in Haskell
02:59:46 <tdammers> then again, due to the lack of a type checker, most clojure functions are in fact partial - `get`, for example, cannot be called on something that isn't a collection
03:00:13 <tdammers> but anyway, this has absolutely nothing to do with effects, nor mutability
03:00:16 <kuribas> tdammers: it's not about what I want a hashmap to do, it's about when I want to use a hashmap.
03:00:26 <kuribas> and I don't want to use it for everything
03:00:33 <tdammers> that's a completely valid complaint
03:00:45 <tdammers> but it has nothing to do with purity or partiality
03:00:59 <tdammers> your complaint is about hashmaps being too generic
03:01:17 <tdammers> about not providing any static constraints as to which values may go into which keys
03:01:25 <kuribas> tdammers: it can: (get 5 :a) => nil
03:01:40 <kuribas> (get "abc" :a) => nil
03:01:44 <tdammers> right
03:02:10 <tdammers> but since clj runs on the jvm, and uses java interfaces to implement things like lookup, you can fabricate classes that will cause lookups to crash
03:02:33 <tdammers> granted, that's a bit of a fabricated argument
03:05:18 <kuribas> the philosophy of clojure is to be very lenient
03:05:26 <kuribas> it's typically the java side that crashes
03:11:47 <kuribas> tdammers: my point is that with pattern matching and records, you can avoid a complex type system, and still get easy to understand errors.
03:12:03 <kuribas> tdammers: a sufficiently smart compiler could even do that at compile time.
03:12:18 <kuribas> SBCL is quite good in static analysis.
03:12:54 <gentauro> 11:54 < kuribas> gentauro: in that case it would be better to keep it in C#
03:12:58 <gentauro> kuribas: yep
03:14:17 <kuribas> tdammers: I totally agree that the benifits from static pure FP doesn't come from a single feature, but several features and how you use them.
03:15:10 <tdammers> case in point, something more strict than hashmaps is fairly useless without static checks
03:15:15 <tdammers> take for example Python classes
03:15:36 <tdammers> you can say foo.bar, which is roughly equivalent to (get foo :bar) in clojure, or bar foo in haskell
03:16:06 <tdammers> in haskell, the compiler can tell you that you cannot apply bar to foo, because the foo type doesn't have a bar field
03:16:36 <tdammers> in clojure, you're just going to get nil, which is the interpreter telling you, at runtime, that the value you're looking at doesn't have a bar field
03:16:46 <tdammers> in python, you get a crash at runtime
03:17:20 <tdammers> so in both of these dynamic languages, the error doesn't get reported until runtime - Python fares no better than clojure, even though you declared the class beforehand as a "type"
03:18:16 <gentauro> tdammers: languages with `casting` are as bad as `dynamic-typed` langauges.
03:18:21 <tdammers> so why, then, would you go through the trouble of declaring classes (or having explicit record fields, or anything similar) when you can't get more useful (i.e., earlier and louder) failures out of it?
03:19:16 <tdammers> gentauro: not the point, really - all I'm saying here is that the benefit of more explicit record types is that you can get better static reasoning, but if the static reasoning doesn't happen and you still won't get errors until you actually run the broken code, then you're not getting much value out of it
03:19:59 <tdammers> clojure acknowledges this and says, OK, so we're not getting any static assertions out of this either way, so let's just use the simpler solution here
03:26:09 <kuribas> tdammers: yeah, earlier and louder is better that late and/or silent
03:26:38 <kuribas> tdammers: but you do get earlier and louder errors, as long as you don't do nil punning.
03:28:27 <kuribas> tdammers: I think scheme works that way, let me test...
03:28:28 <tdammers> the "lateness" of errors can be classified pretty much like this: 1. while writing the code, 2. while building ("compile-time"), 3. when running test suite, 4. when starting up the application, 5. when running the offending code under the error conditions
03:28:53 <tdammers> anything more fine-grained than that is largely irrelevant
03:29:38 <tdammers> oh, and there is 6. after running the offending code under the error conditions
03:29:55 <tdammers> which is of course the worst, because now you have absolutely no idea what even triggers the error
03:30:30 <dminuoso> I guess memory corruption is a frequenty case of 6.
03:30:53 <tdammers> yeah, and it's the reason why, all else being equal, garbage collection is the lesser evil
03:31:00 <gentauro> tdammers: or type-system not providing anything at all :P https://youtu.be/Gv2I7qTux7g?t=549
03:31:44 <kuribas> tdammers: 5. running the code in acceptance, 6. running the code in production
03:32:14 <tdammers> kuribas: that's one of those more fine-grained distinctions that don't matter much in practice
03:36:40 <kuribas> tdammers: in our case, we even remotely connect to the production repl :-)
03:36:48 <dminuoso> gentauro: Speaking of "langauges with `casting`", should we have a good and long talk about Haskell and it's ubiquitous realToFrac and fromIntegral functions? :>
03:37:10 <dminuoso> Realistically, Haskell is not a dime better than C with regards to casting of integral types.
03:37:47 <dminuoso> It's some worse in fact, because you're constantly annoyed to insert realToFrac and fromIntegral everywhere, which add no value to the quality of code.
03:40:40 <kuribas> can unsafeCoerce crash a production server?
03:42:24 <kuribas> or will it crash a single thread?
03:42:46 <dminuoso> It has the capability of crashing the entire process
03:43:22 <solonarv> you can probably achieve a segfault using unsafeCoerce
03:44:26 <tdammers> s/probably/definitely/ -- been there, done that
03:44:50 <solonarv> I only hedged because I couldn't provide/remember a concrete example ;)
03:45:15 <sshine> 1 is a decent probability.
03:45:16 <dminuoso> % unsafeCoerce 10 :: String
03:45:16 <yahb> dminuoso: ; <interactive>:34:20: error:; Not in scope: type constructor or class `String'; Perhaps you meant one of these: `IsString' (imported from GHC.Exts), `Strict' (imported from Control.Lens), `Strict' (imported from Language.Haskell.TH)
03:45:23 <dminuoso> err
03:45:49 <dminuoso> % unsafeCoerce 10 :: String
03:45:49 <yahb> dminuoso: ""
03:45:53 <dminuoso> Okay what?
03:46:08 <dminuoso> % unsafeCoerce 10 :: IO String
03:46:09 <yahb> dminuoso: "[Segmentation fault]
03:46:18 <dminuoso> Much better. ^- kuribas 
03:46:23 <kuribas> % unsafeCoerce (10 :: Int) :: String
03:46:24 <yahb> kuribas: ""
03:46:26 <solonarv> ADT-to-ADT is usually (always?) safe, both Integer (which the 10 defaults to) and String are ADTs
03:46:47 <dminuoso> solonarv: I dont think it's safe.
03:47:30 <dminuoso> solonarv: Also, IO is also just an ADT.
03:47:30 <kuribas> 10 must be compatible with String...
03:47:39 <kuribas> maybe some magic bit
03:47:49 <solonarv> no, IO is a newtype over a function. That makes it not an ADT (in terms of representation)
03:47:56 <dminuoso> Ah, I see what you mean
03:48:38 <solonarv> data Int = I# Int# ; so  (10 :: Int) is represented by a tag saying "first constructor" followed by the actual value
03:49:23 <kuribas> tdammers: gauche scheme raises an error when accessing an unbound slot
03:49:54 <solonarv> data [] a = [] | a : [] a ; if you try to interpret that (10 :: Int) value as a [b] , you look at that tag, which tells you "first constructor"; the first constructor is [], which has no fields, so you don't look any further and everything "works"
03:50:06 <dminuoso> solonarv: Here's why your theory is wrong:
03:50:48 <dminuoso> % unsafeCoerce () :: NE.NonEmpty Char -- solonarv 
03:50:49 <yahb> dminuoso: ; <interactive>:1:20: error:; Not in scope: type constructor or class `NE.NonEmpty'; No module named `NE' is imported.
03:50:57 <dminuoso> % import qualified Data.List.NonEmpty as NE
03:50:58 <yahb> dminuoso: 
03:50:59 <dminuoso> % unsafeCoerce () :: NE.NonEmpty Char -- solonarv 
03:51:00 <yahb> dminuoso: [Segmentation fault]
03:51:16 <solonarv> I don't see where this contradicts my theory
03:52:03 <solonarv> you try to interpret () as a NonEmpty Char, you see "first constructor", and you go on to look at the next few memory addresses where you expect that constructor's two fields; but instead there's garbage
03:52:09 <kuribas> how does yahb detect segmentation fault?
03:52:32 <solonarv> kuribas: ptrace, I think
03:52:49 <dminuoso> 12:46:04     solonarv | ADT-to-ADT is usually (always?) safe, both Integer (which the 10 defaults to) and String are ADTs
03:52:53 <dminuoso> Im just saying its not always safe
03:53:04 <solonarv> ah yes, then I agree
03:56:19 <merijn> kuribas: You can just install a signal handler for SIGSEGV :p
03:56:47 <kuribas> merijn: can you resume from that?
03:57:00 <merijn> Sure, why not?
03:57:34 <merijn> For one, you process may have many threads besides the one the segfaulted
03:58:23 <merijn> kuribas: Only SIGKILL and SIGSTOP can't be overridden with a signal handler
03:58:30 <kuribas> right
03:58:31 <nfd> mind you, in a single-thread application, exiting your sigsegv handler will promptly replay the same effect that caused the last segfault, so
03:59:31 <nfd> second of all, i don't know what sane actions you can take in that handler other than "violently explode but write a little note on the way out"
03:59:46 <dminuoso> nfd: A lot, actually
03:59:50 <merijn> nfd: It Depends (TM)
04:00:03 <dminuoso> nfd: This trick is used to implement high performance speculative JIT exit points with.
04:00:34 <nfd> i mean, It Depends, but you're doing some really weird systems hacking s.t. you wouldn't need this discussion
04:00:40 <dminuoso> When Java HotSpot does a speculative optimization, it speculatively constant folds (quite deep), and prepends a read to a special page. When the speculative optimization is invalidated, read permissions for that page are taken back
04:00:48 <dminuoso> Triggering a SIGSEGV
04:01:04 <nfd> common application dev puts sigsegv clearly in the category of "the program is wrong"
04:01:13 <dminuoso> So the sigsegv handler of HotSpot then undoes the optimization, fixes the read permission, and resumes.
04:01:37 <dminuoso> (The benefits of this, is that it plays nicely with branch predictors in the CPU)
04:02:01 <tdammers> wow, our craft is absolutely terrible
04:02:02 <dminuoso> as opposed to flipping a bit in memory and doing a conditional jnz on it
04:02:43 <nfd> hotspot is a bizarre pile of beauty in horrors, and i know this quite well, as someone who has spent weeks of my life minmaxing its gc
04:03:05 <merijn> tdammers: tbh, I disagree with that being terrible
04:03:19 <nfd> it's not Terrible, it's Systems
04:03:26 <merijn> tdammers: That's just "using hardware features that currently don't have nicely provided interfaces"
04:03:33 <nfd> regrettably our code has to run on actual computers
04:03:45 <dminuoso> nfd: Switch jobs and become a mathematician
04:03:49 <dminuoso> You never have to worry about computability again.
04:03:50 <tdammers> merijn: the terrible part is that they don't have nicely provided interfaces to begin with
04:03:52 <merijn> tdammers: The fuck do I have MMU and virtual addresses for if people are going to whine when I use them >.>
04:04:24 <merijn> Same reason GHC programs take 1 TB according to top/linux's dumb memory measuring >.>
04:04:35 <tdammers> yeah, that's terrible too
04:04:56 <nfd> dminuoso: /me laughs in von neumann/godel/hilbert/....
04:04:58 <merijn> Linux/top are terrible, GHC's implementation is totally sensible and intended use of the interface
04:05:20 <merijn> It's just unfortunate some users blame GHC/haskell
04:05:41 <nfd> linux is terrible, but what're ya gonna use
04:05:48 <merijn> nfd: FreeBSD :p
04:05:49 <dminuoso> merijn will say freebsd in 1 second
04:05:51 <dminuoso> Oh darn
04:05:53 <dminuoso> He beat me to it
04:05:54 <nfd> plan9? bsd? hurd?
04:06:18 <dminuoso> Also, Windows is an option.
04:06:20 <merijn> FreeBSD isn't great on the desktop, but linux sucks there too so just use macOS or Windows :p
04:06:52 <dminuoso> merijn: to be honest, my quality of life has drastically improved since switching to a wiling window manager. That alone is what keeps me on Linux.
04:07:15 <merijn> dminuoso: I used FreeBSD with tiling window manager for ages, but I don't really miss it
04:07:28 <merijn> dminuoso: My main mode of operation is full screen terminal running tmux anyway :p
04:07:29 <nfd> i went to university talking to/making buddies with the grad students and faculty who hacked on netbsd a lot, haha
04:07:40 <kuribas> dminuoso: what's a willing window manager? :-)
04:07:56 <nfd> reliably i would talk to them about flaws in linux and how i was sure netbsd did it better, and they would wince and say there was a bug
04:09:09 <nfd> like, CLOCK_MONOTONIC in linux isn't actually that MONOTONIC, and netbsd has something actually monotonic, and i said that was great, and they said "yeah but it kinda panics the kernel actually"
04:09:33 <nfd> tiling window manager? yeah i think i use one of those on my phone
