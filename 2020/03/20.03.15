00:59:12 <Nolrai> So in the app src test folder structure, where are you supposed to put unit tests for your application files?
00:59:33 <Nolrai> Or should they be such thin layers they don't need tests?
01:28:20 <ddk> Hello All
01:28:56 <ddk> I Need to generate PDF file any pointer / experiences would be helpful
01:29:41 <ddk> * using Haskell
01:38:20 <koluacik> Hello, all! Is it possible to achieve automatic tiling like in dwm and xmonad in i3? I know that i3 is a manual tiling window manager but it might be possible by manipulating the output of i3-save-tree. Anyone had any luck with this?
01:38:37 <koluacik> Sorry wrong channel, i apologize
01:39:35 <opticblast> Is it possible to connect to a socket at a URL using Network.Socket?
01:40:13 <opticblast> I only see how to connect to a hostname like example.com, not example.com/foobar?opt=quz
01:40:48 <opticblast> Or maybe it works the same both ways and the error is unrelated.
01:43:41 <pavonia> opticblast: You can only connect to a host/IP + port. That foobar thing is part of the HTTP protocol, not part of the connection
02:43:31 * hackage aws-cloudfront-signed-cookies 0.2.0.2 - Generate signed cookies for AWS CloudFront  https://hackage.haskell.org/package/aws-cloudfront-signed-cookies-0.2.0.2 (chris_martin)
03:02:02 * hackage wordlist 0.1.0.4 - Command-line tool to get random words  https://hackage.haskell.org/package/wordlist-0.1.0.4 (chris_martin)
03:08:46 <zincy_> I have a theory ... 
03:09:26 <zincy_> You could learn to use all the category theoretic constructs in Haskell without knowing a thing about CT itself
03:10:08 <phadej> but would it be any fun then?
03:10:17 <zincy_> No
03:10:37 <zincy_> Do you think it could be possibe though :D
03:10:40 <zincy_> ?
03:11:02 * hackage aws-cloudfront-signed-cookies 0.2.0.4 - Generate signed cookies for AWS CloudFront  https://hackage.haskell.org/package/aws-cloudfront-signed-cookies-0.2.0.4 (chris_martin)
03:13:37 <zincy_> Anyway ... 
03:13:52 <zincy_> Are adjunctions just isomorphisms between functors?
03:14:47 <[exa]> zincy_: by starring at&using CT products for a sufficient time you will inevitably get the intuition and learn CT, no matter how much you want to avoid it. :]
03:15:18 <zincy_> [exa]: Yeah
03:16:45 <zincy_> [exa]: I am just concerned it might get addictive
03:17:45 <[exa]> zincy_: make an everyday practical fact check that you have produced better software. :]
03:18:13 <maralorn> zincy_: But I think you are probably kinda right.
03:18:49 <[exa]> zincy_: anyway regarding isomorphism, there's some relation; see e.g. https://en.wikipedia.org/wiki/Adjoint_functors#Definition_via_Hom-set_adjunction
03:20:21 <maralorn> zincy_: But generelasing isomorphisms to functors is kinda not obvious. Often the obvious solution is to strong and restrictive.
03:21:05 <zincy_> maralorn: You mean right about using CT constructs in Haskell without knowing any CT? 
03:21:55 <zincy_> maralorn: When you say generalising isomorphisms do you mean just finding a lawful instance for an adjunction?
03:22:14 <zincy_> hmm I guess functor pairings are something else
03:22:22 <maralorn> But typical adjunctions feel really not very isomorphismy. e.g. the free functor and the forget functor.
03:22:37 <[exa]> zincy_: the same wiki article has 'equivalence of categories' down below, which is probably more relevant term here.
03:22:38 <maralorn> zincy_: Yeah
03:23:22 <maralorn> zincy_: I was very comfortable with monads long before understanding the whole "endo-thinggy in this and that category"
03:23:51 <zincy_> Yeah
03:24:11 <[exa]> zincy_: in particular, isomorphism requires that FG really squashes to 1, it is usually more useful to only require that it's naturally isomorphic to 1
03:24:13 <zincy_> What is a common example of an adjunction?
03:24:32 * hackage loc 0.1.3.6 - Types representing line and column positions and ranges in text files.  https://hackage.haskell.org/package/loc-0.1.3.6 (chris_martin)
03:24:59 <zincy_> [exa]: Sorry what is FG?
03:25:16 <maralorn> zincy_: No, I mean it‚Äòs not obvious to define a concept that is sensible to be called a "functor isomorphism". Adjunctions are not the solution.
03:25:27 <zincy_> I dont understand this bit at all "FG really squashes to 1"
03:25:30 <zincy_> :D
03:25:31 * hackage loc-test 0.1.3.6 - Test-related utilities related to the /loc/ package.  https://hackage.haskell.org/package/loc-test-0.1.3.6 (chris_martin)
03:25:49 <zincy_> maralorn: ah
03:26:43 <maralorn> zincy_: So F and G are the functors there.
03:27:01 <zincy_> When you look at the leftAdjunct = curry and rightAdjunct = uncurry I thought  leftAdjunct . rightAdjunct is an isomorphism no?
03:27:14 <zincy_> Ah right
03:27:47 <zincy_> So F -> G is a natural transformation not an isomorphism?
03:28:13 <zincy_> Isomorphism says there is a way of squashing the functors
03:28:15 <maralorn> So what [exa] is saying is it would be really restricting to ask for something like (Functor f, Functor g) => f (g a) ~~ Identity a
03:28:41 <maralorn> Yes, in non-Haskell notation.
03:28:46 <maralorn> natural transformations are the morphisms in the category of functors.
03:28:47 <zincy_> Ok makes sense
03:29:16 <[exa]> zincy_: sorry :] basically the same idea is here https://en.wikipedia.org/wiki/Isomorphism_of_categories at the end of intro
03:29:57 <zincy_> ok
03:30:06 <zincy_> are endofunctors just a category?
03:32:01 * hackage orgstat 0.1.8 - Statistics visualizer for org-mode  https://hackage.haskell.org/package/orgstat-0.1.8 (volhovm)
03:33:32 * hackage dl-fedora 0.7.4 - Fedora image download tool  https://hackage.haskell.org/package/dl-fedora-0.7.4 (JensPetersen)
03:34:39 <maralorn> zincy_: Well you can often built the weirdest category out of everything. I am not sure, that it is particularly useful to think about endofunctors as the objects of a category.
03:36:20 <maralorn> zincy_: An endofunctor is just a functor of a category into itself. So when talking programming we actually mostly care only about one category the category with our types as objects and functions as morphisms. So it is completely natural to only talk about endofunctors.
03:37:15 <maralorn> But in this picture they are not the category but only the set Hom(O, O), for some object O.
03:39:50 <maralorn> I‚Äôll be off for a while, but if you have more questions and no one else answers them I‚Äôm glad to try later.
03:49:31 * hackage hs-server-starter 0.1.1.0 - Write a server supporting Server::Starter's protocol in Haskell  https://hackage.haskell.org/package/hs-server-starter-0.1.1.0 (hiratara)
04:07:32 <zincy_> maralorn: Thanks! Speak soon
04:10:06 <phadej> endofunctors are monoid, and thus are category; whether that gives you any insight, dunno.
04:10:19 <phadej> but they do form a very natural category
04:11:24 <phadej> oh I tricked myself in characterising monads, almost.
04:11:31 <phadej> into*
05:42:32 * hackage relational-schemas 0.1.8.0 - RDBMSs' schema templates for relational-query  https://hackage.haskell.org/package/relational-schemas-0.1.8.0 (KeiHibino)
05:54:59 <devl> I am newbe in haskell
05:55:40 <devl> it's hard - difficult to understand
05:57:00 <[exa]> the basic concepts are fundamentally different from other languages but it's not too complicated to actually understand them
06:22:02 * hackage rampart 1.0.0.2 - üè∞ Determine how intervals relate to each other.  https://hackage.haskell.org/package/rampart-1.0.0.2 (fozworth)
06:27:00 <maralorn> My normal modell about Haskell being hard is that you just didn‚Äòt read the right documentation yet.
06:38:55 <zincy_> Haskell is hard if you take your baggage from an OOP language with you
06:39:26 <zincy_> If you have those bags then you need to come to terms with the fact that you are learning to program again
06:40:14 <maralorn> devl: Just ask away, if we can help.
06:41:39 <zincy_> If you newtype a transformer stack, what should the functor instance be for?
06:41:50 <zincy_> newtype PokerGame a = PokerGame (ReaderT GameEnv (StateT Game IO) a)
06:42:32 <oats> is there a recommended package for lists with their length encoded in their type?
06:42:36 <zincy_> The only thing you can do is call fmap on `a` right?
06:43:54 <oats> zincy_: I'm not sure I understand, could you clarify?
06:45:33 <zincy_> So you see this pattern often
06:45:47 <zincy_> newtype App a = App {  runApp :: ReaderT Options (ExceptT AppError IO) a } deriving (Monad, Functor, Applicative)
06:46:03 <oats> right, done that myself loads of times :)
06:46:20 <zincy_> Yeah so I am trying to understand the motivation behind it
06:47:56 <oats> behind using newtype?
06:48:24 <oats> or the monad transformer idea as a whole
06:48:36 <geekosaur> it's basically a convenience function for your own monad stack, rather than remembering how you defined the stack in order to use it
06:49:15 <zincy_> behind the typeclass instances
06:49:42 <zincy_> As in what would fmap or >>= look like?
06:50:04 <geekosaur> it's "relayed" to the underying Applicative or Monad
06:50:59 <oats> fmap would probably be something like 'fmap f app = fmap f (runApp app)'
06:51:07 <oats> yeah, what geekosaur said
06:51:23 <zincy_> ah ok it just forgets your wrapper essentially
06:51:33 <oats> because it's a newtype decl, the deriving stuff knows how to pick part your type to get at the type underneath
06:51:44 <oats> (with the condition that the underlying type is also F/A/M)
06:52:00 <oats> pretty simple mechanical transformation :)
06:52:18 <mrkgnao> does anyone have any experience with final-pretty-printer?
06:52:31 <zincy_> Thanks!
06:53:28 <geekosaur> zincy_, this is GeneralizedNewtypeDeriving, you can read details in the ghc manual
06:53:28 <mrkgnao> i'd like to write a pretty printer that's precedence-sensitive and am wondering if i can save myself some trouble by using this module's utilities: 
06:53:31 <mrkgnao> <http://hackage.haskell.org/package/final-pretty-printer-0.1.0.0/docs/Text-PrettyPrint-Final-Extensions-Precedence.html>
06:53:56 <zincy_> I keep forgetting that monad transformers are still monads
06:53:59 <mrkgnao> but it seems like nobody uses this, and i'd be better off with quchen/prettyprinter like everyone else...
06:54:05 <zincy_> geekosaur: cheers
06:54:20 <zincy_> monads that implement lift that is
06:54:56 <mrkgnao> also hi #haskell, it's been a while since i was last around :)
06:55:08 <zincy_> mrkgnao: hi
06:56:25 <mrkgnao> hello! 
07:12:26 <ddk>  /msg NickServ identify <password>
07:12:45 * Clint squints.
07:13:26 <ddk> Anyone having experience of generating PDF files with Haskell 
07:14:25 <[exa]> ddk: what exact kind of PDF? (ie. does pandoc->latex count?)
07:17:10 <ddk> I don't know about that no prior experience with pandoc or even latex, I'm Building a web app with Haskell Backend, and React Frontend, I have users in database and for some reason I want to create pdf file containing details of Users like name, address etc ... a list which the app user can download. Just that. 
07:21:23 <ddk> [exa]: ^^
07:22:05 <mrkgnao> pandoc is probably your best bet
07:22:32 <mrkgnao> if you can generate a pandoc document from your database queries, it should not be very difficult to make a PDF out of that
07:23:05 <ddk> yeah queries I have, but I need formatting to
07:24:00 <ddk> mrkgnao: so I first see Pandoc and then use something to get Pdf which I can provide to users ?
07:24:19 <mrkgnao> pandoc can generate the PDF itself
07:25:06 <mrkgnao> you have to build a Pandoc syntax tree from your queries, with formatting handled there, then there should just be some sort of renderToPDF function you can call with that syntax tree
07:26:03 <[exa]> ddk: creating PDFs by hand is in fact pretty complicated
07:26:04 <ddk> okay I will look at this , other option I was thinking of I have HTML already with me, are there options to convert HTML to PDF , benefit is I don't have to learn new syntax
07:26:32 <ddk> [exa]: yeah And I was looking for cheap solution :)
07:26:35 <mrkgnao> pandoc can read HTML i think, can't it?
07:27:09 <ddk> Idk yet :)
07:27:13 <mrkgnao> if you're generating HTML from something i'd just repurpose that to generate LaTeX instead
07:27:19 <mrkgnao> and then use pandoc to convert that latex to pdf
07:27:50 <[exa]> ddk: generate markdown/html/latex or the pandoc immediate language (which is great!) and then just leave it to pandoc I'd say
07:28:05 <ddk> HTML I don't know per say , but I have React Components with me, I even don't know about Latex syntax too
07:29:25 <[exa]> ddk: this is pretty easy to generate: https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:Block
07:29:30 <ddk> [exa]: so with Haskell I can query the database, get data, have a function to convert raw data into pandoc language and ultimately get PDF ?
07:30:02 <[exa]> ddk: yeah I guess that's the best choice
07:33:22 <ddk> Thanks for the support and pointing me to right direction Guys !
07:36:05 <ddk> well another question, IF I develop a fully functional web app with Haskell backend, Postgres database and decent React Frontend, all things alone would it make me a valid candidate to Get A Haskell JOB, I worked in industry earlier for 2 years currently No job but personnel project. Looking for remote work in near future after I complete mine.
08:13:00 <jophish> vkWithInstance (VkInstanceCreateInfo nullPtr zero Nothing mempty mempty) Nothing
08:13:08 <jophish> that's a whole lot of words for nothing!
08:18:55 <[exa]> jophish: vulkan standard.
08:32:21 <oats> is there a recommended package for lists with a fixed length?
08:32:50 <oats> I see multiple packages with various amounts of updatedness and/or documentation
08:36:37 <shapr> int-e: did lambdabot ever get updated to ghc8+ ?
08:37:28 <int-e> It's on 8.6.5, I'm still waiting on a dependency for 8.8. I've made some progress on that front this week.
08:37:46 <shapr> oh nice!
08:37:57 <shapr> I kinda want to run lambdabot on work slack
08:38:56 <int-e> https://github.com/lambdabot/lambdabot/issues/186 is the ticket (and if you look at the timing you can see that I've not been too busy with this one. But with ghc 8.10 around the corner this is slowly getting on my nerves :P)
08:40:28 <shapr> yeesh, looks like my last lambdabot commit was 2005
08:40:31 * hackage weeder 2.0.0 - Detect dead code  https://hackage.haskell.org/package/weeder-2.0.0 (OliverCharles)
08:41:10 <shapr> I'm gonna bet the codebase has changed some
09:02:06 <jophish> oats: I like vector-sized
09:02:24 <jophish> https://github.com/expipiplus1/vector-sized
09:02:29 <jophish> (is is mine :)
09:05:08 <oats> )
09:05:14 <oats> I'll check it out, thanks :)
09:19:07 <fizzler> Hi, is there any way how, when specifying a record, I can define a field in terms of other fields of the same record?
09:23:00 <monochrom> r@R{f1 = me} = R{f1 = 3, f2 = me+1}
09:23:13 <monochrom> exploits lazy evaluation
09:23:38 <monochrom> (me = 3 coming from f1 = 3)
09:24:02 <oats> is that just tying a tiny knot? :P
09:24:07 <monochrom> yes
09:28:15 <fizzler> monochrom ooh fancy :)  thank you!
09:29:01 <slack1256> I got some paths that are given to me via dbus of the form "file:///home/slack1256/documents/pablos%20folder/recipes%20thursday.org". Notice the "file://" at the beginning and the spaces encoded as "%20" (three chars).
09:29:15 <slack1256> Does any directory/filepath parse that correctly?
09:29:55 <monochrom> URL parser or URI parser.
09:30:48 <monochrom> for example network-uri (used to be part of network)
09:32:12 <ysangkok> there is another one by mark karpov too: https://hackage.haskell.org/package/modern-uri
09:33:12 <slack1256> monochrom: Awesome
09:33:42 <ysangkok> there is a test showing that it does file:// URIs https://github.com/mrkkrp/modern-uri/blob/a3a31aa254d542e715cfd85758542b3aa95254d0/tests/Text/URISpec.hs#L206
09:34:43 <slack1256> ysangkok: I will check it out, thanks you :-)
09:54:24 <slack1256> Is there a package like `these` (that's the name), but with a data type isomorphic to `data Xor a b = Maybe (Either a b)`?
09:55:00 <slack1256> The idea it is that encodes an alternative where either exclusively `a` or `b` or `none` exists.
09:57:01 * hackage ghcid 0.8.4 - GHCi based bare bones IDE  https://hackage.haskell.org/package/ghcid-0.8.4 (NeilMitchell)
10:19:42 <berndl> Is MaybeT the transformer corresponding to MonadPlus?
10:22:43 <[exa]> berndl: not sure how you mean "corresponding", but it certainly implements the MonadPlus behavior
10:23:33 <solonarv> berndl: it's *one* such transformer, sure
10:23:50 <berndl> Well, you have (ReaderT, MonadReader), (StateT, MonadState), (ContT, MonadCont), etc.
10:24:16 <berndl> solonarv: Is it not the canoncial one?
10:25:39 <solonarv> well, the thing is that all these classes have a specific monad which implements them (Reader, State, Cont)
10:25:43 <solonarv> MonadPlus doesn't have that
10:26:19 <solonarv> sure, Maybe implements MonadPlus, but so do [] and IO (just two examples)
10:27:43 <monochrom> [] is one of the most free instances of MonadPlus.
10:28:33 <monochrom> I guess the other ones are equivalent :)
10:30:05 <berndl> If you believe that MonadPlus is supposed to be about choice and failure, then MaybeT should be the canonical one.
10:30:19 <monochrom> No, [] is better.
10:30:19 <statusfailed> Has anyone messed around with Vulkan in Haskell?
10:30:31 <berndl> But [] is more about nondeterminism.
10:30:36 <monochrom> Also I don't understand why monad transformer rather than a monad.
10:30:44 <solonarv> statusfailed: there are vulkan bindings, so surely someone has. but I personally haven't.
10:31:03 <monochrom> Perhaps MonadPlus is about non-determinism too?
10:31:16 <statusfailed> solonarv: fair answer :p
10:31:17 <monochrom> [] is also about choice and failure?
10:31:40 <berndl> But nondeterminism does not involve failure.
10:31:45 <monochrom> We can play word games indefinitely and keep mincing words.
10:32:13 <monochrom> Sure nondeterminism embraces failure and killing off a possible world that fails.
10:33:13 <berndl> monochrom: I was introduced to nondetermism in the context of finite-automata, and the concept of "failure" was never mentioned in that setting.
10:33:27 <berndl> I think NonEmpty captures nondeterminism better.
10:34:06 <monochrom> But if you look at the laws, not intuitive urban legend narratives, you only have an identity element and associativity.  Maybe adds one more law not already in the MonadPlus law, namely biasing towards the left.  [] doesn't have that.  So [] is freer than Maybe for MonadPlus.
10:34:49 <monochrom> You should learn nondeterministic Turing machine and under what criterion do we say it solves your problem.
10:35:50 <monochrom> And it comes down to what I said, a lot of possible runs will fail and we just discard them, if some run succeeds we let it survive and pretend it is the only thing that happened.
10:36:03 <sm[m]> in a list comprehension, I wrote an assignment like "let Just a = foo" hoping that a Nothing would skip that item. Instead I get a pattern match failure at runtime. Is there a nice way to do what I wanted there ?
10:36:19 <solonarv> sm[m]: yes, but it's ugly: Just a <- [foo]
10:36:40 <sm[m]> whoa, how does that work ?
10:36:45 <solonarv> or if you want to be more general: Just a <- pure foo -- this works in a do block as well
10:37:02 <monochrom> Actually nondeterministic finite automata too so you just haven't heard enough.
10:37:03 <berndl> monochrom: If [] is the more natural fit for MonadPlus, then is ListT the transformer for MonadPlus?
10:37:16 <solonarv> sm[m]: binds (using the <- syntax) have the "skip if pattern match fails" behavior, 'let' doesn't
10:37:18 <monochrom> Why transformer?
10:37:29 <sm[m]> neither seems to suit my code
10:37:35 <berndl> monochrom: Because I'm interested in transformers.
10:37:43 <solonarv> sm[m]: what do you mean?
10:37:46 <sm[m]> solonarv: that's what I thought.. I'll play around more, thank you
10:38:01 <sm[m]> I meant neither of those compiles here
10:38:09 <solonarv> there is a reason I wrapped 'foo' in [ ] (or pure)
10:38:37 <solonarv> if 'let Just a = foo' compiles, then 'Just a <- [foo]' should as well
10:38:51 <Eduard_Munteanu> You can also (<$>) / fmap to apply a function to the Just value
10:39:18 <berndl> monochrom: If I have a monad and want to add nondetermisnm to it, wouldn't I use ListT?
10:40:28 <solonarv> I wouldn't. I would perhaps use [] as the *base* of a transformer stack, though.
10:41:15 <sm[m]> it's not important, but there's the whole list comprehension FWIW: https://termbin.com/oete
10:41:59 <sm[m]> I messed up I'm sure
10:42:21 <sm[m]> ha! yes there it is
10:42:35 <sm[m]> thanks, I will meditate on it!
10:49:42 <monochrom> String -> [(String, a)] is how to get a nondeterministic parser monad.  Sleep on it.
10:49:56 <oats> monochrom: I'm uncomfortable
10:50:16 <monochrom> What do you mean?
10:51:05 <oats> monochrom: oh, is that just if, eg, there's multiple possible parsings of a string?
10:52:08 <Cale> yes
10:52:15 <_deepfire> The world needs an UI for minimising haskell programs -- the use case being problematic expressions.
10:52:41 <ysangkok> sm[m]: hmmm i think you'd have it easier if you started writing more functions instead of cramming everything in one huge list comprehension
10:52:45 <Cale> and ambiguity of that sort is helpful when you want to be able to write a combinator that lets you parse an arbitrary number of copies of something
10:53:27 <ysangkok> sm[m]: something like a funciton "mkNullposting :: Integer -> nullposting" maybe
10:55:17 <sm[m]> ysangkok: that‚Äôs what I‚Äôm refactoring away from actually. The current code is gnarly and I think this will turn out better
10:55:35 <ysangkok> sm[m]: i don't understand why a huge list comprehension is any better?
10:57:12 <sm[m]> hard to explain right now except by pointing at Hledger.Read.Csvreader, I‚Äôll let you know how it turns out
10:58:17 <d34df00d> Isn't LogicT for nondeterminism also?
10:58:18 <d34df00d> Sorta.
10:58:26 <ysangkok> the api shouldn't really matter with regards to which syntax you are choosing. you can make equationally equal values using list comprehensions, of course. i am talking about code readability and avoiding noise.
10:58:58 <ysangkok> (syntax noise)
10:59:06 * d34df00d makes syntax noises.
10:59:23 * Rembane make semantic silences
11:07:00 <monochrom> The world needs to replace programmers by robots.
11:07:10 <Rembane> And vice versa
11:07:25 <[exa]> monochrom: y tho
11:09:49 <ysangkok> the world needs to replace programmers by mathematicians :O less syntax, more proving/creativity
11:10:26 <maerwald> monochrom: if that means I can do whatever I want without caring about money, sure =)
11:10:42 <maerwald> But I have a suspicion that money will go into the profit of companies :P
11:10:46 <[exa]> ysangkok: you never saw matlab right?
11:11:32 * hackage weeder 2.0.1 - Detect dead code  https://hackage.haskell.org/package/weeder-2.0.1 (OliverCharles)
11:11:44 <monochrom> I would call matlab users engineers not mathematicians.
11:12:18 <ysangkok> exactly!
11:12:31 <geekosaur> S?
11:13:47 <[exa]> geekosaur: +1
11:23:37 <zincy__> program synthesis is surely the route to automating programming
11:23:59 <zincy__> Apart from the obvious my point is that is the path we are on
11:27:15 <zincy__> Now if only synthesis was at the point we could synthesis synthesisers
11:53:11 <slack1256> I got a gtk program that when run with +RTS -s -RTS reports 2Mb memory usage, but when looked on htop the RSS is around 48 Mb. Doesn't the RTS report memory usage on FFI memory?
11:53:37 <geekosaur> RTS reports only memory used by ghc's heap
11:54:06 <geekosaur> it can't know what is allocated from/via C
11:54:17 <shapr> Does anyone know of a wrapper around Vector that has indexes like Array?
11:54:19 <shapr> I want the best of both
11:54:44 <slack1256> geekosaur: I suspected that, thanks.
11:57:09 <geekosaur> slack1256: there's mallinfo() to ask C's memory allocator about memory usage, although it can tell lies
11:58:45 <[exa]> slack1256: RSS includes mmapped libraries shared with other processes and generally isn't a very good guide for measuring RAM usage below 100MB
11:59:19 <geekosaur> that too
11:59:57 <geekosaur> determining actual memory usage is often tricky these days because systems are so clever about memory usage
12:07:12 <d34df00d> slack1256: also, AFAIK RTS doesn't show peak memory usage, which can be roughly twice as big as what it reports normally due to copying GC.
12:07:20 <d34df00d> And RSS would sure show that copying GC "overhead".
12:09:53 <slack1256> Mmmm at least the leaks I am serching isn't not reported by the RTS, it's only via
12:10:25 <slack1256> the RSS on htop
12:11:02 <slack1256> When running with +RTS -P -s -hc --RTS memory usage stays there.
13:13:02 * hackage ekg-core 0.1.1.7 - Tracking of system metrics  https://hackage.haskell.org/package/ekg-core-0.1.1.7 (MikhailGlushenkov)
13:25:59 <oats> jophish: thanks again for recommending your library! Is there a way I can pattern-match pull a Vector apart, like a tuple or list?
13:43:18 <dsal> Is there a reasonable way to have a stateful attoparsec parser?
13:43:50 <dsal> I guess I can stick a StateT around a Parser.
13:58:53 <oats> alternatively, is there a better way to write this junk? :P https://paste.xinu.at/7uCI6fW/hs
13:59:02 * hackage front 0.0.0.4 - A reactive frontend web framework  https://hackage.haskell.org/package/front-0.0.0.4 (swamp_agr)
13:59:40 <monochrom> StateT S Parser a = S -> Parser (S, a).  This will have the effect that if there is failure and backtracking, your S state will be rolled back as well.
14:04:34 <d34df00d> I have a String with some XML. What'd be the easiest way to apply some XSLT transformation to it given that I don't have experience hxt (so hxt-xslt is not necessarily the easiest)?
14:12:37 <d34df00d> Well actually in this case I can do smth that everybody loves.
14:12:41 <d34df00d> Parsing HTML with regexes!
14:15:01 <monochrom> haha
14:20:15 <oats> oh no
14:22:22 <CTHULHUJESUS> can someone help me with a c2hs problem?
14:25:28 <dsal> monochrom: Yeah, rolling back in this case makes sense.  I'm parsing gopro telemetry so ideally I'd like it to roll back after a stream finishes, but I'm being a little sloppy since they don't do any kind of weird recursion that would break things (probably)
14:36:21 <jackdk> oats: https://hackage.haskell.org/package/linear-1.21/docs/Linear-Matrix.html even if you're not using `linear`, do you have access to `distribute`?
14:39:26 <oats> ooh, yes!
14:39:33 <oats> Vector here does implement distributive
14:39:41 <oats> that's neat, I didn't know about that typeclass
14:52:04 <mpickering> nh2: Sure I will
14:52:21 <nh2> mpickering: that's great!
14:55:54 <Fylwind> getting "No instance for IsLabel" from "data R = R { x :: Int }; g = #x (R { x = 1 })". Is this not the right way to use OverloadedLabels?
14:57:40 <mpickering> nh2: I updated it now
16:16:02 * hackage musicScroll 0.2.0.0 - Supply your tunes info without leaving your music player.  https://hackage.haskell.org/package/musicScroll-0.2.0.0 (RubenAstudillo)
16:16:18 * slack1256 happy noises
16:24:32 * hackage reqcatcher 0.2.2.0 - A local http server to catch the HTTP redirect  https://hackage.haskell.org/package/reqcatcher-0.2.2.0 (hiratara)
16:30:50 <sm> ysangkok, re our earlier list comprehension chat: here's old https://github.com/simonmichael/hledger/blob/e0c3275d/hledger-lib/Hledger/Read/CsvReader.hs#L830 & new https://github.com/simonmichael/hledger/blob/feef6fdc/hledger-lib/Hledger/Read/CsvReader.hs#L832 . I'm pretty happy with the progress but I'd be happy to see your refactoring (probably too much work though)
16:31:02 <sm> afk a bit
16:40:22 <ysangkok> sm: oh, looks like step 3 is so much shorter? it really does the same? does indeed look a lot better
17:01:19 <remexre> are there standard lens operators for working w/ the ReaderT pattern
17:02:14 <jackdk> `view` aka `(^.)` use the `MonadReader`class . Is that what you mean?
17:03:00 <remexre> no, I'm referring to the pattern of most of one's logic being expressed in a ReaderT Env IO, where Env looks like { foo :: TVar Foo, bar :: TVar Bar } etc
17:03:24 <remexre> so I guess I'd want a lens that could go through a TVar
17:10:23 <solonarv> remexre: you'd probably end up having to write a new combinator
17:11:36 <solonarv> something like this might work: accessTVar :: MonadReader e m => (e -> TVar s) -> StateT s m a -> m a
17:12:51 <solonarv> then the usage would look something like: accessTVar foo $ someFooField += 1; otherFooField %= func
17:14:34 <solonarv> or possibly some variation depending on how big you want your 'atomically' calls to be
17:25:20 <remexre> unfortunate :|
17:27:35 <Axman6> aybe lens-actions would help
17:27:38 <Axman6> maybe*
17:29:49 <solonarv> nah, lens-action seems to only have getters
17:30:23 <solonarv> I don't expect that combinator to be particularly hard to write, though
17:31:52 <Axman6> but if the actions are being performed on TVars then it doesn't really matter that the optics are getters, as long as ther action being applied to the TVar does the modifications
17:34:53 <solonarv> well, the problem is that maybe you want more than just a getter!
17:38:40 <solonarv> % stateTVar f act = do var <- asks f; s <- liftBase (readTVar var); (a, s') <- runStateT act; writeTVar var s'
17:38:40 <yahb> solonarv: ; <interactive>:27:42: error: Variable not in scope: liftBase :: STM a -> STM a1
17:39:12 <solonarv> % import Control.Monad.Base
17:39:12 <yahb> solonarv: 
17:39:19 <solonarv> % stateTVar f act = do var <- asks f; s <- liftBase (readTVar var); (a, s') <- runStateT act; liftBase (writeTVar var s')
17:39:19 <yahb> solonarv: ; <interactive>:29:42: error:; * Couldn't match type `(->) r' with `STM'; arising from a functional dependency between:; constraint `MonadBase STM ((->) r)' arising from a use of `liftBase'; instance `MonadBase ((->) r1) ((->) r1)' at <no location info>; * In a stmt of a 'do' block: s <- liftBase (readTVar var); In the expression:; do var <- asks f; 
17:39:49 * solonarv sighs
17:42:11 <solonarv> % stateTVar f act = do var <- asks f; s <- liftBase (readTVar var); (a, s') <- runStateT act s; liftBase (writeTVar var s')
17:42:11 <yahb> solonarv: 
17:42:19 <solonarv> % :t stateTVar
17:42:19 <yahb> solonarv: (MonadReader r m, MonadBase STM m) => (r -> TVar a1) -> StateT a1 m a2 -> m ()
17:42:37 <solonarv> remexre: something like that?
17:42:54 <solonarv> (also should call it something else, as 'stateTVar' is already taken)
17:45:23 <remexre>  hm, yeah, I think so!
17:47:52 <solonarv> (obviously the 'MonadBase' stuff is so you can have some transformers on top of STM)
18:09:18 <ysangkok> sm: sent you a PR
18:19:25 <sm[m]> ysangkok: thanks!
18:36:50 <ysangkok> sm[m]: i guess it is a question of style, i could imagine somebody working with an IDE would think type annotations is a waste of space
18:40:02 <opticblast> Even if Haskell had a decent IDE, I would still use type annotations, because they are another way that I can express my intentions to the compiler
18:40:55 <Axman6> ysangkok: I can't
18:41:13 <Axman6> Most of my programming is type first, implementation later
18:42:34 <mrkgnao> inference is overrated
18:42:45 <ysangkok> sounds like might like my pr then :D https://github.com/simonmichael/hledger/pull/1210/files
18:46:51 <mjrosenb> I have some primary state (Array Pos Stuff), and some dependent state (calculateDep :: Array Pos Stuff -> DependentState).  Since most changes to the primary state are incremental, I'd like to update the dependent state incrementally.
18:47:05 <mjrosenb> I can think of two ways of doing this, but neither of them sound good.
18:49:26 <mjrosenb> both would involve me writing updateDepIncremental :: Array Pos Stuff -> Array Pos Stuff -> Set Pos -> DependentState -> DependentState
18:51:23 <mjrosenb> the first would be to store the old state, then attempt to calculate the differences between the old state and the new state (diff :: Array Pos Stuff -> Array Pos Stuff -> Set Pos), but I could imagine calculating the difference might take a while, since I'd need to do structural equality checks on all of the positions, and the structures can get kinda large
18:52:23 <mjrosenb> the other would be to keep track of all of the Pos's that are updated over the course of mutations of the state, but I don't particularly like that because it honestly sounds kinda nasty to do.
18:52:44 <mjrosenb> is there another way that I haven't thought of?
18:53:14 <mjrosenb> or something about what I've said that's wrong?
18:56:17 <dmwit> Another thing to consider is to modify the API you're using to modify the array to modify both at once.
18:56:52 <dmwit> i.e. instead of moveCharacterRight :: Pos -> Array Pos Stuff -> Array Pos Stuff, do moveCharacterRight :: Pos -> (Array Pos Stuff, DependentState) -> (Array Pos Stuff, DependentState).
18:57:14 <dmwit> Sometimes the update will be complicated enough that you'll just recompute the DependentState or whatever, but that's on the API implementor to decide.
18:58:12 <dmwit> You should probably transition from Array Pos Stuff to an abstract type at the same time, to ensure there's an abstraction boundary that makes it sane to do this.
18:59:39 <Squarism> is anyone successful in running haskell-ide-engine with vscode and nix?  
19:03:05 <mjrosenb> dmwit: so, right now, my api is 'Control.Lens', which may have been a mistake.
19:09:56 <mjrosenb> dmwit: are there any guides to doing something like that when using lens?
19:23:13 <sm[m]> ysangkok: I won‚Äôt get to that pr today but yes for my taste in this code those type signatures aren‚Äôt really worth it
19:28:54 <dmwit> mjrosenb: Dunno! Seems plausible to me.
19:29:08 <dmwit> But I guess you'd have to write your basic lenses by hand to modify both pieces.
19:33:27 <mjrosenb> dmwit: from what I can tell, there is relatively little documentation on writing lenses by hand :-/
19:36:21 <jackdk> generally type holes help. there's not too many ways to put the pieces together
19:38:42 <Axman6> writing lenses by hand is pretty trivial, I thought that lens also provided documentation on how to do it for several different types of optics
19:40:44 <jackdk> tbf it isn't trivial the first time you see it
19:45:04 <jackdk> mjrosenb: https://www.irccloud.com/pastebin/0xmNK3A8/LensByTypeHole.hs
19:48:47 <iqubic> I can write lenses and traversals by hand, but not prisms.
19:51:39 <jackdk> I tend to reach for `prism` for those.
19:51:56 <jojojojojo> prisms do kinda have to be more subtle type-wise
19:54:52 <jojojojojo> iirc when I last looked most of the subtlety was to be able to hijack (.)
19:55:04 <iqubic> Correct.
19:57:02 <jojojojojo> prism bt seta = dimap seta (either pure (fmap bt)) . right'
19:57:30 <jojojojojo> not actually that nasty once someone has already defined `Prism s t a b`
19:59:26 <Axman6> :t dimap
19:59:27 <lambdabot> Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d
20:00:27 <jojojojojo> you take the (b,c) relation and extend it to an (a,d) relation
20:28:54 <mjrosenb> so, for this case, I guess I want something where ) have a tuple, (Array Pos Stuff, Other), and reads go to the array, and writes go to both things, but "modified" for Other.
20:30:29 * mjrosenb reads the link
20:32:27 <mjrosenb> hrm, so I access the array as both a lens and a traversal, so I guess the thing I need will be a Traversal?
20:32:49 <mjrosenb> or will the update variant break all of the laws meaning I'll need to go to something more generic?
21:13:44 <dmwit> I think you should still plan on having all the things that used to be lenses in the old API still be lenses in your new API.
21:55:50 <iqubic> That sounds like a good plan.
22:21:31 * hackage Agda 2.6.1 - A dependently typed functional programming language and proof assistant  https://hackage.haskell.org/package/Agda-2.6.1 (AndresSicardRamirez)
22:32:43 <Monadic> Does anyone know if there is an xmonad configuration that mimics i3 keybindings?  I may try to switch over from i3
22:37:35 <dsal> What's a good way to run a program and get stdout as a bytestring?
22:40:05 <heatsink> Use createProcess to run a subprocess and get its stdout as a Handle
22:40:28 <heatsink> there's a function in the bytestring library to read a Handle's contents as a bytestring
22:42:51 <Comonad> yeah, you can use createProcess in System.Process and then hGetContents in Data.ByteString
22:43:00 <Comonad> (@ dsal)
22:43:18 <dsal> Thanks.  I was trying a fancier library I found, but it returns a String.
22:51:14 <dsal> neat.  Seems to work.  Thanks heatsink and comboy 
22:51:19 <dsal> er, guy who quit
22:54:48 <jle`> it's always too easy to quit a comonad
22:55:11 <Axman6> I always lose context when I do
23:01:02 * hackage cobot-io 0.1.2.8 - Biological data file formats and IO  https://hackage.haskell.org/package/cobot-io-0.1.2.8 (zmactep)
23:08:40 <dsal> Neat.  It seems I now have everything I need to extract all the metadata from all my GoPro media.
23:10:38 <dsal> The stuff is pretty rich.  I did all the low-level processing last night.  Today I did some higher level junk, and now I can find an extract from mp4 files directly.  I haven't done high level for all the things because I'm not entirely sure how I'll use it all, but here's an example dump from an mp4 in case anyone's interested:  
23:10:38 <dsal> https://gist.githubusercontent.com/dustin/8c40bac63ae58af8f3accc37a64b6854/raw/765f5f39cfa31e4f860ca9e599a5086fcff9b623/processed.txt
23:11:57 <dsal> It's got scene type probabilities, face detection + smile probabilities, then boring stuff like GPS time, location, speed, gyroscope temperature, etc...
23:12:51 <fog> https://gist.github.com/fog-hs/e3b0c7154549165635a80449db78b9d3
23:12:59 <fog> Datatypes!!! finito!
23:15:31 * hackage hasbolt 0.1.4.3 - Haskell driver for Neo4j 3+ (BOLT protocol)  https://hackage.haskell.org/package/hasbolt-0.1.4.3 (zmactep)
23:22:29 <fog> hmm, the layers dont have names...
23:35:10 <mjrosenb> Is there a prelude function blah :: [a] -> [(a, [a])], which will for a list of length N, return N items, one for each element in the list, consisting of that element and the list without that element?
23:35:25 <mjrosenb> bonus points if it works on Sets as well
23:49:25 <MarcelineVQ> mjrosenb: no but that's sometimes called  select.   select [] = []; select (x:xs) = (x,xs) : [(y,x:ys) | (y,ys) <- select xs]
23:56:46 <Axman6> that's also essentially the list zipper applied to all locations in the list 
23:58:29 <Axman6> I've needed something similar a few times, select' xs = [(is,x,ts) | (is,x:ts) <- zip (inits xs) (tails xs)]
23:58:46 <Axman6> > let  select' xs = [(is,x,ts) | (is,x:ts) <- zip (inits xs) (tails xs)] in select' "abcde"
23:58:48 <lambdabot>  [("",'a',"bcde"),("a",'b',"cde"),("ab",'c',"de"),("abc",'d',"e"),("abcd",'e'...
