00:13:10 <siraben> Hey everyone, I'm having an issue trying to find the right type to pick when making a typeclass.
00:13:13 <siraben> http://ix.io/2eED
00:13:44 <siraben> I want to move int', add', lam' and app' into a typeclass, but this won't work:
00:13:45 <siraben> newtype CPS repr a = CPS { unCPS :: forall b. repr ((a -> b) -> b) }
00:14:10 <siraben> (this is tagless final, semantic conversion into CPS)
00:16:49 <siraben> Sorry, I meant in finding the right type to use in the instance declaration.
00:36:10 <siraben> Ah, looks like Oleg did it already. http://okmij.org/ftp/tagless-final/course/CPS.hs
01:19:18 <sternmull> Is there even a case where you can make something an instance of Functor but not an Applicative? Is Functor just a rudiment of history?
01:34:57 <kosmikus> sternmull: sure, there are examples. `Const a` is not applicative if `a` is not monoidal. `Sum f g` is generally not applicative even if `f` and `g` are.
01:39:38 <sternmull> kosmikus: Interesting. Thank you.
02:02:26 <merijn> sternmull: There's a bunch of things where you can't sensibly make Applicatives
02:02:54 <merijn> sternmull: Another example from my own code, I have a "data Query r" which represents a conduit stream of 'r' values returned by a database query
02:03:22 <merijn> sternmull: It is trivially a Functor with "fmap f" = "Conduit.map f"
02:04:00 <merijn> sternmull: There might be an Applicative interpretation of it, but it's hard to see a sensible interpretation of that
02:06:30 <sternmull> i still don't get the intuition for it. If i can apply a function to everything "in a structure" (it is a Functor) then how should it not be possible to also apply functions in a structure to values in a structure to produce a structure with the results...
02:07:01 <koz_> sternmull: Because the structure analogy is weak.
02:07:09 <koz_> (also, 'pure' tends to be a serious problem)
02:07:40 <merijn> sternmull: Well, the simplest example is "Const k a"
02:07:51 <merijn> sternmull: "data Const k a = Const k"
02:07:52 <sternmull> yeah, i guess so. But the structure analogy is what my mind is stuck with (and that even that i know that functions are functors...)
02:08:00 <koz_> sternmull: It's not a good analogy.
02:08:05 <merijn> sternmull: It's an interesting example because it's *always* a Functor
02:08:16 <merijn> sternmull: Only sometimes (needs a constraint on k) an Applicative
02:08:21 <merijn> sternmull: And never a monad
02:09:03 <merijn> sternmull: So just try and implement all three of those classes for "data MyConst k a = MyConst k" and see what comes out. Don't forget to (try to) check the laws
02:09:39 <merijn> Seeing where you get stuck is a good way of learning the limitation of each
02:10:34 <sternmull> Ok. First will read a bit more and then try that.
02:15:24 <tdammers> the best "analogy" I can think of is "something you can fmap over"
02:15:42 <koz_> Yeah - it has to have a lawful fmap.
02:15:46 <koz_> If it can do that, it's a Functor.
02:15:46 <merijn> A functor is like a functor...
02:16:06 <tdammers> the type and the laws are as good as it gets
02:16:16 <koz_> [insert some joke about monads and burritos]
02:16:17 <tdammers> and then look at a couple examples to develop an intuition
02:16:30 <Rembane> It needs one free type variable, and then you can go to town. 
02:16:34 <tdammers> koz_: I thought the burrito thing was great, until I got it
02:16:59 <Rembane> I love the burritos as monads paper 
02:20:10 <merijn> tdammers: I thought it was terrible
02:20:18 <merijn> Monads aren't like burritos
02:20:24 <merijn> *Comonads* are like burritos
02:20:36 <merijn> You can't keep things inside, no matter how hard you try!
02:21:01 <koz_> merijn: So does that mean monads are like coburritos?
02:21:09 <tdammers> merijn: it *is* terrible; I just assumed that "burrito" was just a completely nonsensical random object, chosen to symbolize the futility of using metaphors to "understand monads"
02:21:30 <merijn> koz_: There's a SIGBOVIK paper called "Burritos for the Hungry Mathematician", explaining burritos using monads :p
02:21:32 <tdammers> but then I realized that the "burrito" part referred to "wrapping stuff", and that is just so so bad on so many levels
02:21:48 <koz_> merijn: SIGBOVIK?
02:22:44 <merijn> koz_: The April fool's conference organized by the ACH (Assocation for Computational Hersey)
02:23:30 <merijn> koz_: They put out conference proceedings every year on April 1. The CFP welcomes any paper that is: 1) a joke implementation of a serious idea, 2) a serious implementation of a joke idea, or 3) a joke implementation of a joke idea
02:24:10 <merijn> Like the instant classic "red eye detection and elimination" paper, that used machine learning to detect red coloured letter 'i' in photos and would remove them >.>
02:24:32 <merijn> koz_: http://sigbovik.org/
02:24:39 <koz_> merijn: Rofl.
02:24:41 <tdammers> that sounds useful, merjn
02:25:35 <merijn> koz_: The proceedings are works of art, I highly recommend browsing them
02:28:32 * hackage ghcid 0.8.5 - GHCi based bare bones IDE  https://hackage.haskell.org/package/ghcid-0.8.5 (NeilMitchell)
02:29:16 <tdammers> merijn: the "About SIGBOVIK" alone is good for several reasonable chuckles
02:29:31 <tdammers> that list of subjects
02:56:57 <fendor> @help tell
02:56:57 <lambdabot> tell <nick> <message>. When <nick> shows activity, tell them <message>.
03:24:48 <merijn> What's the best (in terms of high precision) Floating number? CReal?
03:31:02 * hackage hasql-transaction 0.10.0.3 - Composable abstraction over retryable transactions for Hasql  https://hackage.haskell.org/package/hasql-transaction-0.10.0.3 (NikitaVolkov)
03:42:41 <fendor> @tell zeta_0 with the hie.yaml, I can open darcs in ghcide just fine.
03:42:41 <lambdabot> Consider it noted.
04:14:32 * hackage rebase 1.6.0.1 - A more progressive alternative to the "base" package  https://hackage.haskell.org/package/rebase-1.6.0.1 (NikitaVolkov)
04:15:32 * hackage rerebase 1.6.0.1 - Reexports from "base" with a bunch of other standard libraries  https://hackage.haskell.org/package/rerebase-1.6.0.1 (NikitaVolkov)
04:29:32 * hackage arion-compose 0.1.1.0 - Run docker-compose with help from Nix/NixOS  https://hackage.haskell.org/package/arion-compose-0.1.1.0 (RobertHensing)
04:55:02 <Ariakenom> merijn: floats are a subset of the rationals. CReal is a superset (I assume)
04:59:28 <[exa]> merijn: also, what's the purpose? probably depends on whether you want to break some π precision recods or just need a bit better precision that with Double
05:59:54 <hyperisco> so I feel like I am a couple years behind on the discussion on mtl-style effects ie using classes
06:01:00 <hyperisco> seems to me it is still highly effective, save some bothers like ask what or put where
06:01:17 <hyperisco> which can be addressed with indexing
06:03:10 <hyperisco> and afaik the discussion now is on whether to stay with this shallow embedding (I think people call it "final encoding" or "tagless final") or use a deep embedding (I think people call it "extensible effects" or "initial encoding")
06:06:15 <siraben> hyperisco:  I think it is the other way around?
06:06:55 <siraben> Initial encoding is like using data declarations, tagless final is all about making semantically invalid terms unrepresentable.
06:07:30 <siraben> So in the initial encoding, App (B True) (B False) :: Expr, all good, but app (b true) (b false) is ill-typed in the tagless final encoding.
06:07:53 <siraben> AFAIK There is some overlap between these two areas if you bring in GADTs.
06:08:49 <hyperisco> siraben, other way around on what exactly?
06:10:07 <siraben> That  the shallow embedding is the initial encoding, and deep embedding is the tagless final.
06:11:15 <hyperisco> siraben, shallow embeddings use the features of the language in a direct way, so for example if you want to embed a function you'd probably use ->
06:11:39 <siraben> And a deep embedding?
06:11:47 <hyperisco> whereas deep embeddings are more so syntactical encodings which are interpreted
06:13:08 <siraben> Ah, I got it the other way around then, heh.
06:13:35 <hyperisco> I have the same problem but with the other set of terms
06:13:44 <hyperisco> because they seem to be reversed in some sense
06:18:20 <MarcelineVQ> > over (taking 3 traverse) ("0"++) . fmap show $ [7..10] -- is there a nicer way to write this?
06:18:22 <lambdabot>  ["07","08","09","10"]
06:20:21 <MarcelineVQ> trying to make a nice one-liner for padding 0-9 and understand lens a bit at the same time, targeting parts of a list in this case
06:21:32 * hackage conduit-extra 1.3.5 - Batteries included conduit: adapters for common libraries.  https://hackage.haskell.org/package/conduit-extra-1.3.5 (MichaelSnoyman)
06:21:55 <hyperisco> for me another axis is parameterisation versus mapping
06:22:48 <hyperisco> maybe not "axis" but perspective
06:23:43 <hyperisco> by default I avoid unnecessary parameterisation because it tries to account for the unknown, which is all possible uses
06:34:00 <infandum> So I have a program that uses inline-r. Is it easy to distribute a pre-built binary of the program?
06:34:02 * hackage massiv 0.5.1.0 - Massiv (Массив) is an Array Library.  https://hackage.haskell.org/package/massiv-0.5.1.0 (lehins)
06:34:27 <infandum> Do I just follow the linux instructions here (http://gelisam.blogspot.com/2014/12/how-to-package-up-binaries-for.html)?
06:55:32 * hackage capability 0.3.0.0 - Extensional capabilities and deriving combinators  https://hackage.haskell.org/package/capability-0.3.0.0 (aherrmann)
07:16:02 * hackage conduit 1.3.2 - Streaming data processing library.  https://hackage.haskell.org/package/conduit-1.3.2 (MichaelSnoyman)
08:10:02 * hackage hledger-stockquotes 0.1.0.0 - Generate HLedger Price Directives From Daily Stock Quotes.  https://hackage.haskell.org/package/hledger-stockquotes-0.1.0.0 (lysergia)
08:22:02 * hackage headed-megaparsec 0.1.0.3 - More informative parser  https://hackage.haskell.org/package/headed-megaparsec-0.1.0.3 (NikitaVolkov)
08:24:02 * hackage aeson-match-qq 1.2.0 - Declarative JSON matchers.  https://hackage.haskell.org/package/aeson-match-qq-1.2.0 (MatveyAksenov)
08:25:32 * hackage headed-megaparsec 0.1.0.4 - More informative parser  https://hackage.haskell.org/package/headed-megaparsec-0.1.0.4 (NikitaVolkov)
08:28:29 <Uniaika> bgamari: hi! I've hit this error while contributing to Haddock https://github.com/haskell/haddock/commit/e6ca100973c496cd98da3385594fa9a81320f7cb#commitcomment-35879929
08:29:01 * hackage hasql-th 0.4.0.5 - Template Haskell utilities for Hasql  https://hackage.haskell.org/package/hasql-th-0.4.0.5 (NikitaVolkov)
08:30:36 <merijn> Uniaika: Is Stackage nightly using 8.10 now, perhaps?
08:30:54 <Uniaika> merijn: I don't know, is the CI using stackage nightly? :D
08:31:20 <Uniaika> I could succesfully build my branch due to stack using the 15.4 LTS
08:31:20 <merijn> Oh, wait, that comment is from november 2019
08:31:53 <Uniaika> yeah, I suspect the 15.4 LTS fixed a lot of stuff regarding outdated libraries, including ghc-lib-parser
08:32:08 <Uniaika> (The 15.* actually)
08:38:52 <Uniaika> (oh, and I'm using 8.8.3, if it can be of any help)
08:39:02 <sm[m]> ghc 8.10 isn't in any stackage snapshot yet
08:39:40 <merijn> Uniaika: At this point your problem statement is rather unclear
08:40:58 <Uniaika> okay sorry I will rephrase
08:41:44 <Uniaika> I have a PR open on haddock, and while `stack build` works perfectly at home, it seems that the CI is unable to build properly.
08:41:52 <Uniaika> here is the compilation warning : https://travis-ci.org/github/haskell/haddock/builds/664434709#L1693-L1698
08:42:11 <Uniaika> and after some investigation, it seems related to this https://github.com/haskell/haddock/commit/e6ca100973c496cd98da3385594fa9a81320f7cb#commitcomment-35879929
08:43:49 <Uniaika> To provide some context, I build haddock with stack, as the README told me I could do so, and thus use the lts-15.4
08:43:50 <bgamari> Uniaika, hi
08:44:10 <Uniaika> which I suspect use the correct version of ghc-lib-parser, while Travis CI does not / cannot
08:44:13 <Uniaika> hi ben!
08:44:34 <bgamari> looking at your link
08:44:39 <Uniaika> sorry for bothering you, but since you were mentionned on the last occurence of this problem, I thought you'd like to be kept informed
08:44:45 <bgamari> thanks
08:46:04 <bgamari> Uniaika, the function in question is present in 8.8.2
08:46:27 <bgamari> Uniaika, it looks like the CI configuration needs to be updated
08:47:54 <Uniaika> bgamari: is it only a matter of changing 'ghc-8.8.1' to 'ghc-8.8.3' (or .2) in .travis.yml?
08:48:18 <bgamari> I'm trying to figure out whether .travis.yml is actually generated or not
08:49:51 <Uniaika> you mean it's a different one from the one I'm seeing in the repo?
08:49:56 <Uniaika> *gasp*
08:50:39 <bgamari> Uniaika, no no, I'm just wondering whether the file in the repo should be regenerated with haskell-ci
08:51:23 <Uniaika> ooooh
08:51:24 <Uniaika> okay
08:53:46 <bgamari> Uniaika, perhaps just go ahead and edit it
08:54:11 <bgamari> Uniaika, haskell-ci in nixpkgs is too old to know about anything but 8.8.1 so I can't regenerate it properly anyways
08:55:20 <Uniaika> got it!
09:02:02 * hackage dobutokO2 0.14.0.0 - A program and a library to create experimental music from a mono audio and a Ukrainian text  https://hackage.haskell.org/package/dobutokO2-0.14.0.0 (OleksandrZhabenko)
09:12:28 <jumper149> Hi, I noticed Archlinux uses base 4.13.0.0 but the latest version on Hackage is 4.12.0.0. Is there a changelog somewhere?
09:14:57 <lyxia> jumper149: https://gitlab.haskell.org/ghc/ghc/blob/master/libraries/base/changelog.md#41300-july-2019     https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.13.0.0/
09:21:02 <Uniaika> bgamari: only waiting for your approval: https://github.com/haskell/haddock/pull/1135 :)
09:25:48 <glguy> Anyone remember a recent article that was basically a cookbook for base version compatibility?
09:26:36 <glguy> I think it went by on /r/haskell recently but I forgot to save it
09:26:39 <lyxia> https://www.fosskers.ca/en/blog/base
09:26:59 <glguy> thanks!
09:29:57 <bgamari> Uniaika, did you mean for this to be in master as well?
09:30:31 <phadej> glguy: personally i'd just depend on `base-compat` or `base-compat-batteries`, they abstract a lot of CPP for you
09:33:22 <Uniaika> bgamari: see my answer :)
09:40:26 <sm[m]> glguy: ha, I predicted right: https://www.reddit.com/r/haskell/comments/fe7yce/blog_tracking_changes_to_base/fjwed32/
11:00:02 * hackage BinderAnn 0.1.0.0 - Source-to-source plugin for enhancing EDSLs with static annotations  https://hackage.haskell.org/package/BinderAnn-0.1.0.0 (agustinmista)
11:03:15 <glguy> phadej: Is it normal for this to be not producing any output during this phase? https://travis-ci.org/github/matterhorn-chat/matterhorn/jobs/664510337 I'm trying switch to the modern haskell-ci generated .travis.yml
11:20:40 <maerwald> Anyone tried static linking in FreeBSD?
11:23:00 <Uniaika> maerwald: yeah uh… my advice would be "don't"
11:23:07 <maerwald> :'(
11:23:27 <maerwald> But how to have compatible binaries for different releases?
11:24:36 <Uniaika> if you need portability across different FreeBSD hosts, I can recommend Poudriere, or building on each hosts
11:24:53 <Uniaika> (quite sad we don't have nix on fbsd)
11:26:12 <maerwald> and linux binary compatibility?
11:27:17 <Uniaika> maerwald: what do you mean by that?
11:29:21 <maerwald> FreeBSD used to be able to run linux binaries
11:29:59 <maerwald> Not sure if you still can
11:32:44 <evelyn> it still has linux binary compatability
11:34:53 <Uniaika> ah, yes that's still A Thing™
11:36:41 <phadej> glguy: which phase?
11:36:56 <glguy> phadej: I think it was just supressing output from dependency build
11:37:02 <maerwald> Uniaika: is that a reasonable thing to do? static linux binary on FreeBSD?
11:37:09 <glguy> eventually output appeared and I think everything is ok
11:38:07 <phadej> glguy: yes, it's unfortunate that travis_wait works that way
11:38:38 <phadej> glguy: but I needed it, as sometimes there are fancy packages which take 10min to compile and without travis_wait the build would abort
11:39:36 <phadej> glguy: otoh, the dependencies are usually mostly cached, so there is not much to see in that step in active projects
11:40:07 <Uniaika> maerwald: if you somehow make it work, then go for it
11:40:18 <Uniaika> in my opinion, we're beyond reasonable, here :P
11:41:19 <kolu> hey [exa]
11:41:30 <kolu> I've finally solved the acronym exercism exercise
11:46:57 <maerwald> Uniaika: yeah, doesn't work. Says ELF binary type "0" not known
11:47:07 <glguy> phadej: Why does haskell-ci build first without tests and then after with them?
11:47:27 <phadej> because test might affect selected build-plan
11:47:42 <phadej> (e.g. restrict dependencies in non-obvious way)
11:55:02 <maerwald> Oh, it actually works, but statically linked SSL fail to verify certificates :D
11:56:09 <Uniaika> maerwald: too old ssl? :/
11:57:25 <NemesisD> any polysemy users here? i'm having a hard time determining if i'm supposed to add INLINE or INLINEABLE pragmas to my interpreters and functions that use my effects
12:11:02 * hackage autopack 0.0.0.0 - Custom Setup to automate package modules discovery  https://hackage.haskell.org/package/autopack-0.0.0.0 (vrom911)
12:12:00 <maerwald> Uniaika: it's statically linked. It probably doesn't find the certificate store or something
12:12:30 <maerwald> if you're interested, here is the build failure when trying static build https://gist.github.com/hasufell/01199cb461b26273061b6b1c09fe274c#file-gistfile2-txt-L396-L398
12:12:53 <maerwald> I would go so far to say this might be a GHC bug
12:13:51 <maerwald> bc not finding the lib at all doesn't seem right, that's something GHC should take care of
12:16:36 <zeta_0> does anyone here know how to connect xmonad to connect a laptop to a monitor?
12:17:38 <Uniaika> zeta_0: isn't that something xrandr would do?
12:18:14 <zeta_0> Uniaika: i don't know, that's why i'm asking here
12:18:26 <Uniaika> maerwald: alas I'm far from being able to help you :/ I think perhaps raichoo (on twitter/github/whatever) could help you
12:18:50 <Uniaika> zeta_0: install arandr and launch it 
12:20:23 <zeta_0> Uniaika: arandr or xrandr?
12:20:51 <Uniaika> zeta_0: if you want to get started quickly, arandr
12:21:00 <Uniaika> xrandr is the CLI tool, arandr the GUI tool
12:24:36 <zeta_0> Uniaika: oh, arandr is a gui front-end to xrandr
12:26:09 <Uniaika> yes
12:33:16 <zeta_0> Uniaika: is there a way to set arandr to automatically connect the monitor to my laptop when i connect them together?
12:33:31 <Uniaika> well now that's when xrandr comes in useful :P
12:33:45 <Uniaika> I don't know much about XMonad, however
12:33:59 <Uniaika> maybe ask on #XMonad? zeta_0 
12:39:32 * hackage hledger 1.17.1 - Command-line interface for the hledger accounting tool  https://hackage.haskell.org/package/hledger-1.17.1 (SimonMichael)
12:40:32 * hackage hledger-ui 1.17.1 - Terminal user interface for the hledger accounting tool  https://hackage.haskell.org/package/hledger-ui-1.17.1 (SimonMichael)
13:23:32 * hackage jira-wiki-markup 1.1.3 - Handle Jira wiki markup  https://hackage.haskell.org/package/jira-wiki-markup-1.1.3 (tarleb)
13:33:42 <zeta_0> ok, i sent a message on #xmonad
13:33:57 <zeta_0> #xmonad looks dead though
13:34:39 * jared-w blinks
13:34:53 <jared-w> zeta_0: are you on basically every IRC channel I'm also on? o.O
13:35:53 <zeta_0> jared-w: lol, uh ya, i'm trying to get some help using xmonad to connect my laptop to an external monitor, i can't get it to work
13:36:51 <quest> Hey guys im thinking about taking next fall off from my quest at a CS degree in order to learn Haskell. Ive been learning Haskell for two months now and I love it. Absolutely love it. I figured that if I continue learning all summer and fall that by the time I go back to school I will be able to apply everything I learn to the functional paradigm
13:36:52 <quest> and should come out the other side a more multi-faceted programmer than I would otherwise. I have a couple questions though. Do you believe that this plan will make me really good at programming? Will employers be impressed that I know multiple paradigms at a young age? Is knowing Haskell an advantage in security related fields? I don't know
13:36:53 <quest> exactly what I want to do but security fascinates me and I love math. Thanks
13:37:04 <urinal666> quest:  hi i am your favourite neo nazi
13:37:26 <merijn> @where ops
13:37:26 <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw mniip monochrom quicksilver shachaf shapr ski
13:37:32 --- mode: ChanServ set +o Cale
13:37:37 --- mode: Cale set +b *!*@2001:999:70:d03b:4166:a154:1f23:706b
13:37:48 --- kick: urinal666 was kicked by Cale (urinal666)
13:37:52 --- mode: Cale set -o Cale
13:38:07 <merijn> Cale: Cheers
13:38:51 <merijn> quest: I always find it tricky to quantify "good" at programming, but it will certainly provide you a very different insight into programming
13:39:16 <Cale> quest: Well, there's a lot of interesting computer science and mathematics behind Haskell, though you also don't need to know most of it to be effective at programming in Haskell.
13:39:43 <merijn> quest: I don't think haskell itself is directly relevant to security, but then I think security is mostly language orthogonal (in the sense that security related jobs tend to not be specific to any programming language)
13:41:00 <Cale> Employers... well, there are some companies hiring Haskell programmers (the one I work for included), but it's also not really huge in industry (yet?)
13:41:51 <quest> so basically its not a bad idea and could have benefits? Its kind of impossible for me to sink all of my time into Haskell when im at school (a positive of corona virus). I just don't want to do it and then feel like it was a waste of time.
13:42:26 <Cale> I think you won't feel that your time has been wasted -- at least, I found it quite useful personally.
13:42:34 <merijn> quest: In general people like haskell *more* over time of using it, so if you like it now you'll certainly not like it less ;)
13:42:40 <Cale> I probably wouldn't be a software developer at all if it weren't for Haskell
13:43:28 <merijn> quest: Additionally, I highly doubt any time invested in Haskell will qualify as wasted in your carreer. And lastly, although it took me way longer to be productive in Haskell than some other languages, it's now my goto language for essentially everything
13:43:41 <Cale> (I think I'd rather find some other way to put my mathematics degree to use in that case)
13:44:20 <Cale> On the other hand, I'm not sure you should have to completely put the rest of your education on hold to learn Haskell either.
13:44:58 <Cale> But if you were thinking of taking a term off anyway, it might be a good way to spend the time
13:45:10 <merijn> ^^^ that
13:45:25 <quest> ok lots to think about!
13:45:48 <hyperisco> quest, I'd think carefully about the financial implications, modulo your country
13:46:14 <hyperisco> why not degree first and other things after
13:48:15 <Cale> It can be nice to have a language like Haskell to play around with ideas from CS and certain parts of math in.
13:50:16 <Cale> But e.g. I'd spent about 2 months of my spare time while doing a pure mathematics undergrad to get to the point where I felt like I could really be productive with it, and after about a year, I was "comfortable" for some definition of that. Maybe that could've gone faster if I'd dropped everything to learn it, but I'd also not have learned lots of other good stuff.
13:51:10 <hyperisco> I picked it up while I was in school using the summer break
13:52:16 <hyperisco> Hiring prospects are nil to none in my area. Have to assess that yourself for where you live and where you are willing to move to.
13:54:06 <quest> hey my wifi went out. I missed everything after I mentioned that I was looking to maximize my knowledge over all else. 
13:55:02 * hackage fx 0.4.0.1 - Revamped effect system  https://hackage.haskell.org/package/fx-0.4.0.1 (NikitaVolkov)
13:55:33 <ski> quest : see PM
13:55:37 <zeta_0> hello everyone, i'm a self taught computer programmer(i have been programming for 5 years) and i am having a hard time trying to land remote work, all the haskell job postings have only been for senior haskell programmers, so i've gone the web development route with javascript, html, and css, but i'm still having trouble landing a remote job, any tips guys?
13:55:49 <quest> ski: got it!
13:56:42 <hyperisco> zeta_0, do you have prior work to demonstrate?
13:57:32 * hackage HaskellNet 0.5.2 - Client support for POP3, SMTP, and IMAP  https://hackage.haskell.org/package/HaskellNet-0.5.2 (JonathanDaugherty)
13:57:55 <zeta_0> right now i've been applying to weworkremotely.com, so far only one job recruiter has responded and asked for my resume, but the job recruiter hasn't responded after that, so i'm just here applying for more remote jobs
13:59:16 <zeta_0> hyperisco: yes, i have 1 year of working in the tech industry as a computer programmer, some open source projects, and i am taking online college classes here and there to eventually get a degree
13:59:51 <maerwald> well, don't hold your breath at this time of year
14:00:00 <hyperisco> or do
14:00:00 <zeta_0> i here of other self taught computer programmers land remote programming jobs all the time, so i have no idea what i am doing wrong?
14:00:01 <maerwald> During a catastrophe
14:00:39 <zeta_0> sorry for the rant, i'm just frustrated, any tips would be greatly appreciated
14:01:25 <hyperisco> I cannot speak for every employer, but my gist of hiring remote is typically for experienced people
14:01:46 <maerwald> Yes and that's a reasonable policy
14:01:56 <hyperisco> rather than assimilating someone into an office culture, training them, letting them grow in the company over years and years
14:02:15 <hyperisco> hire remote is like I need X skillset to solve Y problem
14:03:49 <zeta_0> hyperisco: yes, i put the 1 year of my experience on my resume, but i am not sure why some companies don't respond, i have been applying to remote jobs that don't require a degree, so i don't know what i'm missing
14:04:02 * hackage hledger-lib 1.17.1 - Core data types, parsers and functionality for the hledger accounting tools  https://hackage.haskell.org/package/hledger-lib-1.17.1 (SimonMichael)
14:04:39 <maerwald> You're missing an ongoing epidemic it seems
14:04:51 <[exa]> zeta_0: usually the best thing to do is to fill up your github with good projects
14:05:02 * hackage hledger-web 1.17.1, hledger-ui 1.17.1.1, hledger 1.17.1.1 (SimonMichael)
14:05:13 <hyperisco> Sorry but I don't know. I don't have your resume and I'm not qualified for professional consulting. I am guessing your school has such qualified people you can speak with, though
14:05:36 <hyperisco> If you have any co-op programs at your school then they likely have experts on staff that can help you with job applications
14:05:47 <zeta_0> maerwald: ya, that's probably what's wrong right now(dam you corona virus)
14:05:50 <[exa]> zeta_0: I got headhunter mailstorms after publishing even relatively boring stuff from my bachelor thesis
14:05:52 <maerwald> 1. hiring market is now dead, no one knows what's happening, 2. if you have no professional experience, remote is a bad idea (for you and your employer)
14:06:23 <Uniaika> +1 maerwald 
14:07:35 <zeta_0> [exa]: my gitlab is full of my personal projects, and i just started contributing to ghc, xmonad, and darcs, so that shouldn't be an issue
14:07:49 <maerwald> We're entering an economical crisis that's likely worse than 9/11 and the financial crisis combined and you're worried about getting a haskell job. I think soon the question will be how to get a job at all.
14:08:07 <maerwald> So chill, do some haskell
14:09:17 <zeta_0> maerwald: i'm trying to a coding job in general not just a haskell job, and ya, i spend 3 quarters of my day coding and the last quarter of the day sending out job applications
14:09:45 <maerwald> Right, many ppl experience the same now
14:09:58 <zeta_0> maerwald: i live in a really remote area, so working remotely is really my only choice
14:10:19 <zincy_> maerwald: Has the coding job market already frozen?
14:10:36 <maerwald> In Europe I would say yes
14:10:53 <maerwald> Borders are closed anyway. Companies in quarantine
14:11:10 <zincy_> Good time to go through some old classic textbooks :D
14:13:36 <zeta_0> i live in the united states, right now the corona virus is at it's peak here, so the coding economy here is probably all jacked up here as well
14:14:50 <zeta_0> i didn't think that it would effect remote work though, part of being quarantined is being at home
14:14:55 <quest> maybe out your guys scope but are there any chat rooms like this you know of where I can ask questions about corona virus/economics. Everything Im finding on my google searches is...strange
14:15:19 <zeta_0> quest: have you tried reddit?
14:15:31 <zeta_0> oh well, back to coding i guess
14:15:37 <quest> im looking for live chat
14:15:43 <maerwald> zeta_0: the entire economy is shattering. No one is buying, investors withdrawing their money. It's not just that ppl work from home for a few months
14:15:45 <[exa]> quest: that's the usual thing when no one knows what will happen :D
14:16:11 <monochrom> My sisters work in IT and programming, they're all working from home now, and often conversing by voice through the computer.
14:16:25 <maerwald> Companies are already closing here in germany, for good.
14:16:53 <monochrom> Hell even I had to do my lectures online.  Although, I have complete lecture notes upfront, so I call it an online reading group.
14:16:58 <[exa]> maerwald: "for good" you mean totally, or until it's safe to work?
14:17:03 <maerwald> Yes, totally
14:17:27 <monochrom> Yikes
14:17:28 <maerwald> Seems many ppl haven't understood what's going on and what the effects will be
14:17:58 <[exa]> I'm currently in luxembourg, everyone's kindof moved to homeoffice-as-much-as-possible but nothing really closed for good yet
14:18:14 <[exa]> anyway, thanks, good to know.
14:18:21 <monochrom> To be fair even me only learned recently from Extra Credits that the great depression was probably caused by the 1918 flu.
14:18:22 <quest> maerwald: are you nervous? 
14:18:35 <maerwald> quest: for the economy yes
14:18:38 <zeta_0> ok, does anyone here know how long the corona virus is going to last? i heard that in china it's already starting to taper off
14:19:03 <maerwald> zeta_0: not the right channel to ask. There are lots of scientific blog posts about it
14:19:19 <[exa]> zeta_0: 2 chinese guys from here told me that it's contained and they are very carefully trying to get everything back
14:19:26 <[exa]> but yeah we're going offtopic, sorry
14:19:36 <monochrom> It tapers off faster if you lock down earlier and stricter.  China was doing it.  Canada now too, at least provinces that get hit hard.
14:19:48 <zeta_0> i'm sorry for going off topic
14:19:59 <[exa]> there's always #haskell-blah
14:20:01 <monochrom> Ooops yeah. Continue in #haskell-offtopic!
14:20:11 <monochrom> blah I'm done with #haskell-blah
14:20:14 <maerwald> the offtopic channel ambiguity 
14:20:16 <maerwald> haha
14:20:18 <[exa]> man
14:22:16 <suppi> what's the difference between blah and offtopic?
14:22:22 <maerwald> Quality!
14:23:06 * [exa] stares in #offtopic topic in disbelief
14:23:26 <monochrom> blah requires encrypted connection. blah is full of pointless political bickering last time I checked. blah doesn't have the same ops, in fact in reality no op, therefore people feel like acting uncivil.
14:23:53 <[exa]> that explains why I can't join
14:24:00 <maerwald> So choose between anarchy and monarchy
14:24:22 <quest> I asked a question in blah and nothing happened...
14:27:12 <zeta_0> so my best bet would be to continue working on my personal and open source projects, then when the corona virus dies down and everything gets back to normal, then i can start apply for remote jobs again, how does that sound?
14:28:01 <zeta_0> so you guys are from all over the world, that's cool
14:28:47 <zeta_0> it seems like europe has the most functional programmers
14:29:13 <maerwald> Not sure about that. It's also very popular in russia
14:29:13 <monochrom> It's always unwise to keep upgrading and arming yourself. Even long before the pandemic.
14:29:17 <maerwald> And the competition is hard there
14:29:24 <monochrom> err typo! s/unwise/wise/
14:29:42 <monochrom> Umm Russia is part of Eurpoe :)
14:29:52 <maerwald> Heh
14:30:29 <quest> maerwald: what do you mean by competition?
14:30:44 <maerwald> Too many smart people (like physicists turning haskell programmer)
14:32:10 <ski> quest : you haven't even waited half an hour, yet ..
14:32:30 <monochrom> "In Soviet Russia, physicists turn into haskell programmers" is supposed to be a joke for the Western world in which we take for granted that physicists turn into python scripters. :)
14:33:38 <Uniaika> < monochrom> Umm Russia is part of Eurpoe :) // Tell that to Vladivostok :P
14:33:49 <monochrom> and the latter's notion of makefile is "#!/bin/sh \n gcc myprog.c mylib.c -o myprog"
14:34:15 <Uniaika> on the matter of of physicists, I only recently learned that many great programmers had studied electrical engineering
14:34:29 <maerwald> Uniaika: yeah, I can confirm
14:34:36 <maerwald> Not sure what's going on there
14:34:40 <maerwald> Must be a conspiracy
14:35:24 <jjhoo> very funny, considering that I have majored in physics, python is one of my favourites, and I'm also interested in functional programming
14:36:07 <zeta_0> does anyone here know how to use autorandr to automatically connect to an external monitor? i am using xmonad
14:36:31 <maerwald> zeta_0: probably better to ask in an OT channel or #xmonad or so
14:36:31 <monochrom> like, over bluetooth?!
14:36:49 <zeta_0> monochrom: through hdmi cable
14:37:51 <maerwald> Ok, next quest: static haskell binaries on mac *shudder*
14:38:11 <maerwald> At least nix works there... ish
14:39:17 <Uniaika> maerwald: post your paypal, you're doing God's work :p
14:39:25 <maerwald> haha
14:40:05 <Uniaika> no but I'm serious, I would gladly send some bucks your way to thank you for your work 
14:40:22 <maerwald> I wanted to know how stack do their osx build, but never got an answer
14:40:36 <maerwald> They must know something, at least
14:40:37 <Uniaika> can't you infer that from the CI configuration?
14:43:11 <sm[m]> maerwald: what about that static-haskell-nix project 
14:43:22 <maerwald> sm[m]: doesn't work
14:43:38 <maerwald> https://github.com/nh2/static-haskell-nix/issues/85
14:43:56 <maerwald> the usual nix rabbit hole
14:44:19 <sm[m]> heh
14:45:40 <sm[m]> is fpcomplete's osx stack executable somehow extra static ?
14:45:46 <sm[m]> compared to one I built myself ?
14:46:11 <sm[m]> would you know the command to report that ?
14:46:30 <maerwald> file exe?
14:46:52 <maerwald> or ldd/lddtree
14:47:43 <sm[m]> on a mac, file says just Mach-O 64-bit executable x86_64, and I have no ldd
14:48:09 <maerwald> otool -L ?
14:49:00 <monochrom> peter$ otool
14:49:08 <sm[m]> thanks! I get https://termbin.com/gv0z  (the first is brew-installed, the second is fpcomplete's binary I believe)
14:49:47 <maerwald> interesting, so they don't do static linking at all
14:49:48 <sm[m]> not sure if that's what we mean by static
14:50:02 <maerwald> how do they make sure it works across different OSX releases
14:50:45 <sm[m]> there's a small chance I built the second one myself. I'll have to double check
14:50:47 <Uniaika> damnit, I got one of those extra-large haddock errors while generating the GHC docs
14:51:12 <Uniaika> does someone have a candle to light up for me? I'm going to need some diving help 
14:51:18 <jumper149> How would one create a data type that represents an interval of Integers?
14:51:57 <jumper149> So that you can easily derive Enum and Bounded if that's possible?
14:55:25 <sm[m]> yes, https://termbin.com/5cq9 is the binary from https://www.stackage.org/stack, seems dynamic
14:56:10 <isovector1> can i put a type application in a haddock @@-delimited code block?
14:56:23 <sm[m]> Uniaika: haddock's output is a bit of a nightmare, it needs work
14:56:42 <Uniaika> jumper149: I remember this question being asked here, some time ago, and basically the answer was something along the lines of "without dependent types, no you can't"
14:56:45 <Uniaika> sm[m]: :'(
14:56:52 <Uniaika> I don't even understand what's happening
14:57:09 <sm[m]> you should be able to make it less verbose, but currently that doesn't work
14:57:49 <monochrom> isovector1: I think yes, I think there's ought to be a way because @ is valid Haskell code even in e.g., patterns, f x@(Just _) = ...
14:58:05 <Uniaika> sm[m]: I'm building with 'hadrian/build -j --flavour=Quick --freeze1 docs --docs=no-sphinx-pdfs --docs=no-sphinx-html'
14:58:12 <Uniaika> hmm
14:58:30 <Uniaika> I hope it's not my fault…
14:59:05 <sm[m]> I see your paste in #ghc. The huge error is just the haddock command line. It seems to be returning no actual haddock error.
14:59:47 <sm[m]> try to run that command manually and reproduce, then maybe shrink the command line and the source until you get a clue about the error
15:00:02 <Uniaika> oh, interesting.
15:00:04 <Uniaika> thank you
15:00:17 <sm[m]> np
15:00:44 <sm[m]> if you're having a problem while using the ghc build system.. try to remove the ghc build system from the problem :)
15:02:24 <Uniaika> I shall keep that in mind :)
15:08:25 <isovector1> monochrom: turns out it needs a backslash escape. thanks!
15:08:32 * hackage algebra-checkers 0.1.0.0 - Model and test API surfaces algebraically  https://hackage.haskell.org/package/algebra-checkers-0.1.0.0 (isovector)
15:29:30 <koz_> > [1, 2] <|> [3, 4]
15:29:31 <lambdabot>  [1,2,3,4]
15:29:36 <koz_> Yep, figured.
15:32:00 <Axman6> a.k.a the porque no los dos alternative operator
15:34:57 <{abby}> the answer to why not both is generally "laziness"
15:36:15 <Uniaika> koz_: that's an interesting property of Alternative []! :) Thank you
15:36:47 <jumper149> Are orphan instances not so bad? I have a data type defined somewhere in my program and when testing with QuickCheck I want it have an instance for 'Arbitrary', but to me it seems stupid to import QuickCheck in the program (not the test) and to define the instance there. Am I sane?
15:37:16 <koz_> Uniaika: It mirrors its MonadPlus instance I think.
15:37:25 <koz_> jumper149: Wrap in a newtype.
15:37:37 <koz_> Then you can define Arbitrary for the newtype, and only import QuickCheck in your test rig.
15:38:03 <koz_> THis also means you can have several _different_ Arbitrary instances depending on what properties you care about.
15:38:56 <jumper149> koz_: ty, I can do that! Oh that is actually super useful then you can test different properties in the same file!
15:39:16 <koz_> jumper149: Yep. I've been doing that _a lot_ recently in my work codebase.
15:42:33 <Uniaika> sm[m]: So, haddock is a thirsty monster. Without ± 8GB of RAM, it cannot generate the documentation for base.
15:42:45 <koz_> Uniaika: Wow, that's seriously thirsty.
15:43:41 <Uniaika> koz_: I had to start i3wm and kill firefox (with like 5 tabs) in order to make it compile
15:44:05 <Uniaika> can't wait for the quarantine to finish so I can have access to my desktop with 16GB of RAM
15:44:16 <koz_> Uniaika: I dev on a monster which lives in my house for a reason.
15:44:40 <koz_> (32G of RAM and 12 cores)
15:44:47 <Uniaika> koz_: they are sometimes attracted to the under of beds
15:44:52 <Uniaika> holy crap
15:44:57 <koz_> Uniaika: Mine is attached to the over of a desk.
15:45:00 <Uniaika> that's a nice beast you've got there
15:45:02 <koz_> (among other things)
15:45:10 <koz_> Yeah, well, I'm a bit of an obsessive.
15:45:28 <Uniaika> oh, just realised you're also koz_ from Twitter :)
15:45:45 <koz_> Uniaika: Yep, you realize correctly. I am some variant of 'Koz Ross' everywhere.
15:46:34 <int-e> koz_: I can attest to the fact that having 32G is really nice, you hardly ever have to worry about running out of memory.
15:46:36 <Uniaika> koz_: my birdsite handle is @TechnoEmpress
15:46:43 <koz_> Uniaika: Oh hi!
15:47:00 <koz_> I enjoy the stuff you post a lot.
15:47:09 <koz_> int-e: Yup, confirmed, though I have managed.
15:47:27 <koz_> (usually it's due to me being silly and going infinite, but I've had a legitimate workload damn near exhaust me)
15:47:31 <int-e> koz_: obviously. it's there, you'll find a use for it. I have :)
15:47:43 <koz_> (something about 'memory leaks' and 'code that has to grind through _years_ of NASA satellite data)
15:47:58 <koz_> (memory leaks were not of my doing)
15:48:38 <koz_> Does anyone know if HSpec does shrinking when testing QuickCheck properties?
15:48:58 <Uniaika> koz_: what, really? I'm honoured :)
15:49:09 <koz_> Uniaika: I'm pretty selective with whom I follow. :D
15:49:32 <Uniaika> extra-honoured then! :D
15:50:23 <Uniaika> alright, I think I'm going to do this whole "documentation improvement" thing on a remote server
15:50:27 <Uniaika> at least I have the RAM.
15:50:52 <koz_> Uniaika: I'm afraid I can't donate Sebastian.
15:51:01 <koz_> (I would, but I keep him away from the world for a reason)
15:51:44 <Uniaika> yeah don't worry :P
15:52:58 <sm[m]> Uniaika: good catch!
15:53:30 <sm[m]> it's good to see haddock getting some attention
15:54:26 <jumper149> koz_: Would you mind explaining what shrinking actually does? I am currently using hspec and QuichCheck and just went with 'shrinkNothing' to define my Arbitrary instance for now.
15:54:54 <koz_> jumper149: Basically, if I understand correctly, upon failure, shrinking attempts to make the failing case 'smaller' to reproduce the error on something that won't make your eyeballs bleed.
15:55:18 <koz_> For example, if you were checking something shaped like a list, a sensible shrinking strategy would be taking subsequences of the list.
15:55:23 <jumper149> ahhhhh ok, it's not too important then ;)
15:55:30 <koz_> I'm currently checking a lot of ASTs, and my shrinks are 'subtrees'.
15:55:37 <koz_> jumper149: I'd say it's a good idea to have.
15:55:50 <koz_> Unless you like shovelling through multi-_screen_ representations of error cases.
15:55:55 <koz_> (which I have had happen)
15:56:01 <Uniaika> sm[m]: :D
15:56:02 <Uniaika> I try
15:56:16 <jumper149> Ye it is, but not for my usecase really. Only for recursive data?
15:56:25 <Uniaika> I'm not a category theorist of even a good haskeller, but I have some supplies of motivations
15:56:29 <koz_> jumper149: Not necessarily. Vectors aren't recursive, but they can get super-big.
15:56:41 <koz_> Like, it's anything which makes it easier for the poor human. :P
15:58:20 <jumper149> koz_: I guess you are right... humans suck :p
16:37:47 <zeta_0> i am finally able to automatically connect my laptop to an external monitor, thanks everyone for the help
16:38:06 <zeta_0> xmonad works great with multiple monitors
16:40:36 <Abedawgg> Hello, I decided to get into live coding today with Tidal Cycles. I'm trying to instal Haskell library through my terminal but i got an error message. Failed to install, consider updating this script via: ghcup upgrade"ghcup --cache install" failed!”Does anyone know how to fix this? 
16:41:14 <Axman6> did you try running ghcup upgrade
16:41:14 <Abedawgg> I'm running Mojave 10.14
16:41:35 <Abedawgg> I didn't. is that a command or another library I have to install? 
16:43:27 <Axman6> you haven't really told us what you've tried so far so I don't know
16:44:31 <Abedawgg> So far I've only ran this script on haskell.org/ghcup/    
16:44:34 <Abedawgg> curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
16:45:22 <sm[m]> Paging maerwald
16:49:02 * hackage mr-env 0.1.0.1 - A simple way to read environment variables in Haskell  https://hackage.haskell.org/package/mr-env-0.1.0.1 (meowgorithm)
16:54:45 <koz_> Is that package meant to be 'Mister Env' or 'MonadReader Env'?
16:55:06 <Axman6> Hey, my name's Mr. Env!
16:55:58 <ysangkok> my next cat will be called Meowgorithm :O haha
16:56:30 <solonarv> that's a neat name but it's a bit long
16:56:55 <MarcelineVQ> Eowgorithm for short
16:58:21 * koz_ is disappointed it's not 'Gor-Gor'.
16:59:40 <evelyn> Meownad
16:59:49 <koz_> Even better.
17:00:47 <MarcelineVQ> Meownad,  purr  >=>
17:01:40 <Axman6> the last oneis pronounced "fishi"
17:02:15 <MarcelineVQ> > over (taking 3 traverse) ("0"++) . fmap show $ [7..10] -- is there a nicer way to write this?
17:02:17 <lambdabot>  ["07","08","09","10"]
17:08:15 <Axman6> yes, ["07","08","09","10"]
17:09:54 <MarcelineVQ> alternative easy changes include "0"++  to '0':        how about for   over (taking 9 traverse) ("0"++) . fmap show $ [1..]
17:10:30 <ysangkok> > map (\x -> if x >= 10 then show x else "0" ++ show x) [7..10]
17:10:32 <lambdabot>  ["07","08","09","10"]
17:11:36 <siraben> MarcelineVQ:  why did you use lens in that, by the way?
17:12:04 <MarcelineVQ> because my other version was hard to read and I'm trying to find excuses to learn some lens
17:12:13 <MarcelineVQ> ysangkok: that's pretty reasonable :>
17:12:48 <koz_> > (\x -> if x >= 10 then show x else "0" <> show x) <$> [7 .. 10]
17:12:50 <ysangkok> or if you insist on working with characters you can match on x:nil
17:12:50 <lambdabot>  ["07","08","09","10"]
17:13:04 <ysangkok> but if you really want to learn optics, why not try out that new book ? :O i would read it if i had time
17:13:11 <koz_> ysangkok: WHich new book?
17:13:29 <ysangkok> https://leanpub.com/optics-by-example
17:13:45 <koz_> ysangkok: Ah, neat!
17:14:07 <MarcelineVQ> I can't be buying that sort of thing just now but I am interested in it
17:17:50 <MarcelineVQ> I wonder what the lens translates to, whether it avoids extra checks passed the first 3 items, not that it's some great computational strain
17:18:59 <iqubic> I can recommend Optics By Example quite a bit. Everything I know about lenses I learned from there.
17:20:32 <ysangkok> MarcelineVQ: you know there is a channel for lenses too? i think it is #haskell-lens
17:20:32 <iqubic> I also submitted a bunch of issues I noticed with the book, through Chris' nice google doc for this thing.
17:21:03 <ysangkok> iqubic: oh cool! i love it when there is the possibility of giving feedback easily
17:21:42 <MarcelineVQ> dibblego: does the content of https://github.com/data61/lets-lens reflect how the lens library comes together? That is to say would I be able to answer my own question [just above] by doing it?
17:23:41 <MarcelineVQ> ysangkok: yeah though there's so many people here that use them I figured the crossover would be similar :>
17:23:57 <MarcelineVQ> but I will ask there at some point / next time
17:37:07 <nh2> maerwald sm[m]: You can't fully statically link on OSX, Apple discourages it to the extend that there's no chance of doing it because they provide no ABI stability like Linux syscalls do.
17:38:38 <ysangkok> hmmm if i compile c code with -g, gdb knows the size of structs. theoretically i could read this information from haskell and avoid mallocing a hardcoded number of bytes when making pointers in haskell to pass to my c code. did anyone attempt something like this?
17:39:40 <ysangkok> would be simpler if it was c++, then i could static_assert the sizes...
17:51:04 <Axman6> I feel like that's somethging at least one of the FFI packages can do
17:54:05 <ysangkok> well really types do not exist in the C ABI, so i don't think there is any portable way to do that
17:54:15 <ysangkok> found a stackoverflow q: newtype Ret = Ret { getRet :: CInt } deriving (Read, Show, Eq, Ord)
17:54:28 <ysangkok> oops, meant https://stackoverflow.com/q/9492801/309483
17:57:21 <ysangkok> cffi can do something like it, but in reality it is parsing C separately from the compilation process and probably relies on having your C build system make #defines in headers and such: https://cffi.readthedocs.io/en/release-1.2/overview.html#abi-versus-api
17:58:01 <ysangkok> meh, i'll just hardcore the sizes and it'll segfault with weird ABI's. YOLO
18:00:56 <ysangkok> if it doesn't work i'll re-make expect(1) in haskell and run gdb in it, feed it into templatehaskell hahahaha :D
18:01:36 <ysangkok> oh my, it's like a flashback to the hacks of yore :O
18:04:39 <benjwadams> What are recommended resources for intermediate Haskell learners these days?   I worked through LYAH a number of years ago, haven't really touched Haskell for a while, but now am trying to understand a project on GitHub which uses it.
18:04:57 <benjwadams> it = Haskell, of course
18:05:25 <ysangkok> benjwadams: there are so many learning resources, most of them are more comprehensive than LYAN
18:05:29 <Axman6> what's the project?
18:06:13 <benjwadams> TidalCycles.  I also sometimes grapple with XMonad, but I have less interest hacking on GUI/Desktop environments
18:07:01 <ysangkok> benjwadams: haskellbook.com is very verbose but comprehensive, i dunno if that is your style
18:11:51 <nh2> ysangkok: I don't quite understand, why not just use hsc2hs so you can sizeof() as usual?
18:12:58 <nh2> benjwadams: intermediate Haskell: https://tech.fpcomplete.com/haskell/syllabus
18:13:14 <ysangkok> nh2: oh, i didn't even know about that, thanks :O will read the docs
18:15:16 <nh2> ysangkok: it's a pre-processor (the most standard/common one) that allows you to parse C header files to conclude all kinds of things for injection into Haskell code. Can also help to generate `Storable` instances very easily. One (very big) example use case, where I also use sizeof: https://github.com/nh2/hatrace/blob/f7948e0fbe85b08adb2a7d4c7590cabb2d9eec11/src/System/Hatrace/Types.hsc#L409
18:15:56 <nh2> ysangkok: all the stuff with hashes (#) in the file is hsc2hs syntax
18:15:56 <ysangkok> nh2: so it is totally separate from templatehaskell?
18:16:27 <nh2> ysangkok: yes, it's a separate preprocessor program that runs before GHC is even invoked. Cabal has builtin support for it
18:16:42 <ysangkok> very cool, sounds perfect
18:17:22 <nh2> ysangkok: if you create a `.hsc` file, Cabal/stack will automatically call hsc2hs on it in the "Preprocessing..." step
18:18:44 <ysangkok> i will try it now, brace yourselves!
18:18:59 <ysangkok> :D
18:21:02 * hackage org-mode-lucid 1.2.0 - Lucid integration for org-mode.  https://hackage.haskell.org/package/org-mode-lucid-1.2.0 (fosskers)
19:01:02 * hackage nix-diff 1.0.9 - Explain why two Nix derivations differ  https://hackage.haskell.org/package/nix-diff-1.0.9 (GabrielGonzalez)
21:22:48 <jared-w> Yesssssssssssssssssssssssssssssssssssssss
21:22:50 <jared-w> https://github.com/haskell-CI/setup/runs/521070993?check_suite_focus=true
21:30:20 <jared-w> What we're looking at here is a setup-haskell action that installs the correct GHC and Cabal for windows, macOS, and linux for use with Github Actions.
21:31:32 * hackage aeson 1.4.7.0 - Fast JSON parsing and encoding  https://hackage.haskell.org/package/aeson-1.4.7.0 (AdamBergmark)
21:56:04 <sm[m]> nice jared-w! I'm using stack
21:56:41 <jared-w> sam[m]: on github actions CI?
21:57:01 <sm[m]> yup, here's a multi-ghc run: https://github.com/simonmichael/hledger/actions/runs/59210695
21:57:41 <sm[m]> it's nice isn't it
21:57:48 <sm[m]> github actions
22:09:32 <MarcelineVQ> anyone have any hints on how to write this? https://github.com/data61/lets-lens/blob/master/src/Lets/Lens.hs#L314 I've hit a full stop on it as I can't figure out how to supply arguments since I have neither a or b. I can't get my   p s (f t)   from the Prism without suplying  p a (f b)
22:10:24 <Axman6> what is the definition of Prism?
22:10:36 <MarcelineVQ> https://github.com/data61/lets-lens/blob/master/src/Lets/Lens.hs#L281
22:10:53 <Axman6> and what does Choice give you?
22:12:02 <MarcelineVQ> is that a leading question or are you asking? :>  Choice is given in Choice.hs  https://github.com/data61/lets-lens/blob/master/src/Lets/Choice.hs#L18 providing left and right
22:12:13 <Axman6> boht :)
22:12:17 <Axman6> both*
22:13:51 <Axman6> Don't forget that you get to choose what p is, so you can pick p ~ (->) if you want, then your prism has type Applicative f => (a -> f b) -> (s -> f t)
22:14:06 <Axman6> (I don't actually know the answer but I'm trying to play type tetris)
22:14:27 <MarcelineVQ> That's a route I tried earlier but I don't have an  a  to start with
22:15:00 <MarcelineVQ> er rather I don't have a way to conjure up an  (a -> f b)
22:15:08 <Axman6> but you have an s, and with your prism you can maybe get an a
22:16:45 <Axman6> maybe try changing the type to be more concrete, so setP :: Prism (Maybe a) (Maybe b) a b -> (Maybe s) -> Either (Maybe b) a
22:18:07 <MarcelineVQ> ah yeah lemme try, I suppose I do also get to choose the applicative
22:19:33 * hackage process 1.6.8.2 - Process libraries  https://hackage.haskell.org/package/process-1.6.8.2 (MichaelSnoyman)
22:27:39 <MarcelineVQ> Axman6: thank you, I had forgotten a forall like that allowed you to choose the variables yourself
22:27:44 <MarcelineVQ> that one's solved now
22:27:51 <Axman6> noice
22:28:07 <MarcelineVQ> rather handily too
22:37:02 <jared-w> sa[m]: Yeah, gh actions is really nice. Gitlab's CI is also quite nice. Although I've definitely ran into its limitations repeatedly and frequently, so I'm probably going to end up giving the upper hand to github here
22:45:52 <jared-w> sm[m]: your github actions file is impressive, though. Definitely going to be referencing that (and spelling your name right..)
