01:11:27 <Uniaika> morning
01:15:40 <andinus> morning 0/
01:17:35 <Uniaika> andinus: how are you? :)
01:18:54 <andinus> doing fine
01:19:56 <andinus> deciding on what to work on next
01:23:26 <Uniaika> andinus: may I interest you in writing documentation for popular-yet-underdocumented modules of base? ;)
01:23:35 <Uniaika> we also get to find some bugs in haddock!
01:24:05 <andinus> oh i dont do haskell yet
01:24:14 <Uniaika> *yet*
01:24:48 <andinus> yeah i plan to learn it someday, i'm newbie to programmingg and stuff
01:44:25 <bahamas> when going between String, ByteString, and Text do you have a mnemonic to remember when it's pack and when unpack?
01:44:57 <Uniaika> bahamas: I'm quite visual, so I always image the gift box as being Text :P
01:45:39 <Uniaika> although I always forget the order for encodeUtf8 / decodeUtf8, but then I have no shame in Hoogling stuff, so it's alright
01:49:53 <koz_> Haskell: There's a string type for that!
01:53:05 <MarcelineVQ> Axman6: hoo boy got the same problem for the exercise right after ehe :( but this time I don't even have  s  to work with and still get  t  out of it. https://github.com/data61/lets-lens/blob/master/src/Lets/Lens.hs#L321
01:54:38 <MarcelineVQ> How do you guys figure this stuff out :O  give me a  b  and I'll give you a  t, even though the only way to get a  t  is to give an  s... ;_;
01:56:42 <koz_> MarcelineVQ: You probably need a bunch of APLens operators.
01:56:52 <koz_> That look like you hit your face on the keyboard.
01:57:37 <MarcelineVQ> so far I either end up needing b -> s   or just  s  
02:00:08 <tdammers> bahamas: remember that String is [Char]; ByteString and Text are opaque, "packed", so unpack always goes from a packed type (ByteString or Text) to a list type ([Char] or [Word8])
02:00:14 <tdammers> and pack goes the other way around
02:00:55 <tdammers> same with encode/decodeUtf8: remember that UTF8 is an encoding which means you have "string" on one side, and "encoded data" on the other
02:01:01 <tdammers> Text is a string type, ByteString is not
02:01:29 <tdammers> ByteString is encoded data, so encode goes from string (Text) to encoded data (ByteString), and decode goes ByteString -> Text
02:02:28 <tdammers> it may also help to insert an implicit "as" in the function names: encodeAsUtf8 means "take a string and encode it as UTF-8 (bytes)", decodeAsUtf8 means "take raw bytes, interpret them as UTF-8, and decode them to a string"
02:03:10 <tdammers> the great thing about Haskell, however, is that using them wrong is a type error - if you accidentally write encodeUtf8 when you should be doing decodeUtf8, the types don't check
02:14:54 <gentauro> tdammers: ByteString are built-on `boxed` Int8 right?
02:15:05 <gentauro> tdammers: ByteString are built-on `boxed` #Int8 right? (forgot the MagicHash)
02:16:00 <tdammers> gentauro: afaik the use a raw byte array primitive.
02:18:15 <gentauro> tdammers: tdammers: which maps to `unsigned char` in C?
02:18:22 <gentauro> ups, to many tdammers :)
02:18:55 <tdammers> unsigned char*, basically
02:19:17 <gentauro> a pointer? Hmmm
02:19:41 <tdammers> or rather something like struct { size_t length; unsigned char* data; }
02:21:32 * hackage base-compat-migrate 0.2.0.0 - Helps migrating projects to base-compat(-batteries).  https://hackage.haskell.org/package/base-compat-migrate-0.2.0.0 (AdamBergmark)
02:22:18 <gentauro> tdammers: that gives sense
02:23:39 <mpickering> I am getting a bit confused why I am still seeing async exceptions when using `mask`
02:24:04 <mpickering> The book says that even when using mask there are "interuptible operations"
02:25:10 <mpickering> "All operations that may block indefinitely are designated as interruptible"
02:25:12 <mpickering> By whom?
02:42:31 * hackage salak 0.3.6 - Configuration (re)Loader and Parser.  https://hackage.haskell.org/package/salak-0.3.6 (leptonyu)
02:42:48 <merijn> mpickering: The answer is "it's nearly impossible to tell", which is why I already complained about bracket & co being hopelessly broken years ago, only to get bikeshedded and what-if'ed into oblivion so I never ended up fixing it
02:43:10 <mpickering> sounds good
02:43:29 <mpickering> I think the answer to my question was that functions in `System.Process` use interruptible FFI
02:43:31 <merijn> mpickering: For sure anything potentially blocking on MVar's
02:43:49 <mpickering> so they can still get killed by async exceptions even if you mask
03:25:31 * hackage elm-syntax 0.3.0.0 - Elm syntax and pretty-printing  https://hackage.haskell.org/package/elm-syntax-0.3.0.0 (OlleFredriksson)
03:39:01 * hackage unliftio-pool 0.2.1.1 - Data.Pool generalized to MonadUnliftIO.  https://hackage.haskell.org/package/unliftio-pool-0.2.1.1 (BardurArantsson)
04:03:46 <dmwit> MarcelineVQ: Do you want a hint?
04:04:49 <dmwit> Jung vs c k l jnf whfg n l, naq qvqa'g npghnyyl vaibyir nal k'f ng nyy?
04:09:35 <aveltras> is it possible / common to have a test suite depend on a dependency's test suite ?
04:11:45 <Uniaika> aveltras: I think I would encode that in my CI's configuration
04:17:34 <aveltras> i meant in term of code, i have a package which defines an interface and several other packages which define implementations of this interface, the thing here is that the tests (modulo specific implementation setup) will be exactly the same. i see that for example with https://github.com/yesodweb/serversession/blob/master/serversession/src/Web/ServerSession/Core/StorageTests.hs it's accomplished by putting the test 
04:17:34 <aveltras> suite directly in the library but that seems like a hack
04:29:02 * hackage character-cases 0.1.0.0 - Exposes subspecies types of Char. And naming cases. e.g. meaning of [a-z], [A-Z], [0-9], PascalCase, camelCase, and sneak_case.  https://hackage.haskell.org/package/character-cases-0.1.0.0 (aiya000)
04:50:54 <MarcelineVQ> dmwit: yes I'm really stumped
05:00:57 <dmwit> Okay. My next message was a rot13'd hint.
05:01:03 <dmwit> If it wasn't enough I'm happy to give another.
05:18:17 <ziman> hello, I'm trying to use DerivingVia but "deriving instance C T via T'" seems to be misparsed as an application of "C" to three arguments
05:19:07 <ziman> is this not supported for standalone deriving? is there any way at all to use DerivingVia of classes for types like () or Int?
05:20:02 <ziman> solved, thank you for rubberducking :)
05:20:53 <Noxxi> :') :') 
05:25:16 <Uniaika> ziman: so?? what's the answer?
05:25:17 <Uniaika> :D
05:26:03 <MarcelineVQ> dmwit: after finding a suitable decrypter I'm not sure I understand the hint, y is the thing I don't have
05:36:05 <ziman> you have to specify "via" in a different order: https://stackoverflow.com/questions/53403102/deriving-via-with-standalone-deriving/53404233
05:37:11 <dawwwww> Hi everyone. I am trying to debug a segfault using gdb in a web application written with snap and built with stack.
05:38:38 <dawwwww> This is what I have done. `stack clean; stack build --ghc-options="-g -debug" --no-strip;` Then `gdb -q .stack-work/dist/...`, then i do `run` but I can't get a backtrace
05:39:54 <dawwwww> After the segfault I run `bt` but I get `#12 0x00120301230102 in ?? ()`
05:42:08 <dawwwww> Is there a way I can get the line numbers? Thanks in advance :)
05:45:14 <MarcelineVQ> dmwit: could I ask what p, x, y are in your hint? I'm seeing them as  p :: Prism s t a b     x :: a -> (f b)    y :: s
05:45:39 <[exa]> dawwwww: the 00x012030123... is very likely without any line number
05:47:44 <dmwit> MarcelineVQ: They are the p, x, y in the definition of Prism
05:47:51 <dmwit> uh
05:48:04 <dmwit> The p is the p from the definition of Prism. x and y are arguments I made up
05:48:47 <dawwwww> [exa] Here is the whole backtrace although I don't think it's very useful
05:48:48 <dawwwww> (gdb) bt#0  0x0000000043ea58de in ?? ()#1  0x00007ffff0e90d30 in ?? ()#2  0xebb2b883221e2d30 in ?? ()#3  0x9a470cf753dd2cb1 in ?? ()#4  0x699ac59102624ebb in ?? ()#5  0x99b55f2312faceb2 in ?? ()#6  0x000000420abdfd90 in ?? ()#7  0x5396a8ae77cab66b in ?? ()#8  0x66eb1d717e2a8212 in ?? ()#9  0xb7b2787990f2f9a9 in ?? ()#10 0x78d2a1212991aab5 in ??
05:48:48 <dawwwww> ()#11 0x9744f93b95d215fd in ?? ()#12 0x69388f4a1bb9fe98 in ?? ()#13 0xe525c1e4939ac5aa in ?? ()#14 0x4280b8e407d67c89 in ?? ()#15 0x1df71f7f6684e369 in ?? ()#16 0x27a83402073c2db5 in ?? ()#17 0x00764c699f6b6a50 in ?? ()#18 0x29fdaa673db86fed in ?? ()#19 0xc604ba0f2a3c3afc in ?? ()#20 0x3a051e89cf7e613b in ?? ()#21 0x6135f6ad5515f13d in ?? ()#22
05:48:49 <dawwwww> 0x2bd31122d81ff1ba in ?? ()#23 0x00007ffff0e90510 in ?? ()#24 0x9c9745160e7b4445 in ?? ()#25 0x4a4bf9c936d621a0 in ?? ()#26 0x101c97f8404582fa in ?? ()#27 0x24e4a788c7e0ed70 in ?? ()#28 0xf647ee78da0a1e45 in ?? ()#29 0x509d13dbc27ac184 in ?? ()#30 0xbb51fe61c0bbee3d in ?? ()#31 0xbdbbf2e2114193a9 in ?? ()#32 0x814bf4d2a61286c7 in ?? ()#33
05:48:49 <dawwwww> 0x82f965f8a3349c19 in ?? ()#34 0x7cdc5596ac67725b in ?? ()#35 0x5701a69c94e96d9c in ?? ()#36 0x875a4c10f3f57c75 in ?? ()#37 0x0000000000000000 in ?? ()
05:49:00 <dmwit> MarcelineVQ: From your link, `type Prism s t a b = forall p f. (Choice p, Applicative f) => p a (f b) -> p s (f t)`.
05:49:57 <dmwit> MarcelineVQ: So if `p x y` was really (isomorphic to) `y`, then the contents of a `Prism s t a b` would be a function `f b -> f t` where we get to choose `f`...
05:52:07 <[exa]> dawwwww: please pastebin more than 1 line of code
05:52:52 <[exa]> dawwwww: anyway, which thread segfaulted?
05:54:03 <dawwwww> oh sorry. Thread 3 "aeshop-run:w" segfaulted
05:54:29 <MarcelineVQ> dmwit: thank you I'll mull on that, I don't understand how to apply it but I do understand what you're talking about now
05:58:25 <dmwit> MarcelineVQ: If you don't feel enlightened after, say, ten minutes of mulling and attempting things, then ask for another hint; don't let this drag on too long.
05:59:55 <dmwit> dawwwww: segfaults are almost always in code that links with C libraries. Perhaps those C libraries do not have their appropriate debugging symbol tables installed/available to gdb?
06:02:30 <dawwwww> Ah ok, so maybe I could use the ghci debugger and go step by step until I see the segfault?
06:03:40 <frdg> for those who use Haskell in their job. Say corona virus didn't exist. What would your company say if they got a call from a college student saying they would work for free and be basically an intern because they want to learn Haskell at a deeper level? Would they even consider it? There are no Haskell internships that I can find anywhere near me
06:03:40 <frdg> but there are companies making job posting looking for Haskell programmers.
06:04:58 <MarcelineVQ> dmwit: got it thank you, your hint to choose an approproate type for Choice lead to a type called Tagged that fit the goal of only having a relevant second parameter. other than looking at instances for Choice and plugging in at a guess idk how a person is to figure that out themselves but that's kind of the crux of self-guided courses I guess
06:05:29 <dmwit> Galois has an internship program. But, full transparency: it is *very* competitive (I think last season we had 900 applicants and accepted 10ish), and I can't guarantee you'd be working on a Haskell project though the odds are good (especially if you list that as a goal).
06:06:13 <Uniaika> dmwit: Galois is R&D-oriented, right?
06:06:13 <frdg> ill look up Galois
06:06:29 <dmwit> MarcelineVQ: Well, the way I figured it out from your link was looking at the type of Prism and going, "yeah, but I don't really want the s or the a to even *exist* in that type signature". Then I speculated a bit from there.
06:07:00 <MarcelineVQ> it should have been natural for me then, I think that particular thought all the time :>>
06:07:01 * hackage warp-grpc 0.4.0.0 - A minimal gRPC server on top of Warp.  https://hackage.haskell.org/package/warp-grpc-0.4.0.0 (AlejandroSerrano)
06:07:05 <dmwit> Galois is pretty R&D-oriented, yeah. If it looks like we're building something that somebody might accidentally use we spin off a startup company. ^_^
06:09:11 <srk> dmwit: should I try to apply if (I'm working/want to work) on ivory/tower?
06:10:01 <dmwit> Hm. I'm not sure we're doing anything with ivory much any more (I think that contract ended a bit ago?), but if that's your cup of tea then I think we'd have lots of other things that you'd also find exciting.
06:10:02 * hackage yeamer 0.1.0.5 - Yesod-based server for interactive presentation slides  https://hackage.haskell.org/package/yeamer-0.1.0.5 (leftaroundabout)
06:10:34 <[exa]> dawwwww: does the 'aeshop-run' look anyhow familiar? if not I suggest using Debug.Trace and pinning it down
06:11:08 <dawwwww> oh yes, I should have specified. It's my aeshop-run is my executable
06:15:16 <srk> dmwit: I do like embedded programming / robotics :) currently using a fork of ivory/tower to generate firmware for various STM32 devices. I find it great for embedded dev (even compared to embedded rust), only lacking thing for me was device support
06:16:10 <dmwit> Nice! Whatcha building?
06:17:02 <srk> well, robots :) CANOpen BLDC servo controller is the goal
06:18:07 <srk> some radio stuff as well, I already have implementations of CANOpen and LoRaWAN protocols
06:18:59 <dmwit> Not being an initiate, I have just 30s of Googling under my belt... this is a well-ish specified way to communicate with motors, I guess?
06:19:02 <dmwit> Neat!
06:19:48 <srk> yes, commonly used to control industrial machines
06:21:29 <srk> goal is to build a distributed control system for such machines (e.g. 5 axis CNC mill)
06:32:02 * hackage hvega 0.7.0.0 - Create Vega-Lite visualizations (version 4) in Haskell.  https://hackage.haskell.org/package/hvega-0.7.0.0 (DouglasBurke)
06:34:32 * hackage ihaskell-hvega 0.2.4.0 - IHaskell display instance for hvega types.  https://hackage.haskell.org/package/ihaskell-hvega-0.2.4.0 (DouglasBurke)
06:41:02 * hackage haskell-to-elm 0.3.0.0 - Generate Elm types and JSON encoders and decoders from Haskell types  https://hackage.haskell.org/package/haskell-to-elm-0.3.0.0 (OlleFredriksson)
06:46:07 <sm[m]> jared-w: cool
07:05:46 <frdg> hello, I feel like I have a decent understanding of everything up to monads but I would like to start a project to solidify my knowledge before I move on cause im yet to actually make a full fledged program. Any suggestions? 
07:06:38 <hyperisco> How about an idea generator
07:07:18 <sm[m]> A guess the number game
07:07:41 <frdg> im just gonna write down every suggestion I get!
07:08:35 <sm[m]> I challenge you to get it working in less than an hour
07:09:03 <frdg> I accept
07:09:17 <jpcooper> The listings LaTeX package doesn't seem to be great with Haskell. It is quite patchy with its colouring of function names. Can anyone suggest some tricks to make things nicer?
07:10:09 <sm[m]> Hurrah! Good luck.
07:10:52 <Zemyla> Is there an efficient algorithm for finding the base 2 log of a positive Integer?
07:11:22 <sm[m]> So who wants to bet on frdg
07:12:39 <frdg> id be weary taking the under
07:24:32 * hackage hopenpgp-tools 0.23.1 - hOpenPGP-based command-line tools  https://hackage.haskell.org/package/hopenpgp-tools-0.23.1 (ClintAdams)
07:25:32 <lyxia> Zemyla: https://hackage.haskell.org/package/integer-gmp-1.0.2.0/docs/GHC-Integer-Logarithms.html
07:41:32 * hackage servant-to-elm 0.4.1.0 - Automatically generate Elm clients for Servant APIs  https://hackage.haskell.org/package/servant-to-elm-0.4.1.0 (OlleFredriksson)
07:54:23 <Ariakenom> integer logarithms in base! this is whats keeping haskell from the mainstream
07:55:45 <phadej> ?
07:56:13 <phadej> Ariakenom: the lack of them?
08:07:35 <dzdcnfzd> Hi. Question: I want to use STArrays inside the STT monad. Is there a way to do that?
08:08:45 <dzdcnfzd> The reason I want this specifically is that I want an ST monad with Error processing, and first most obvious way to do that was to use ExceptT e (STT s) a
08:10:21 <dzdcnfzd> But now I'm realizing that there is no (STT s) instance for Data.Array.MArray
08:10:40 <dzdcnfzd> Which makes me think maybe I'm missing something that everyone knows.
08:11:25 <dzdcnfzd> Either that no one uses STT (doesn't seem to be true based on downloads?) or that there's an easy way to convert STT <-> ST
08:12:53 <Ariakenom> (first most obvious way would surely be to write some if/case expressions)
08:19:26 <merijn> dzdcnfzd: The download count is often off due to bots/mirroring
08:19:50 <dzdcnfzd> merijin: Interesting. Do people use STT or no?
08:19:55 <dzdcnfzd> Would you in a project
08:20:30 <dzdcnfzd> Am I better off just using ST and doing my error handling manually?
08:20:53 <merijn> Last update in 2016, warning about being careful with broken instances...seems odd
08:21:09 <merijn> dzdcnfzd: Also, you don't need a transformer to wrap things in ExceptT?
08:21:19 <merijn> You can juse do "ExceptT e (ST s) a"
08:21:58 <dzdcnfzd> Ohhhh
08:22:03 <dzdcnfzd> Okay, thanks, I'll do that.
08:22:43 <int-e> STT always felt very dubious to me.
08:25:13 <dzdcnfzd> porque
08:25:26 <LysergicDreams> https://media.giphy.com/media/7JgYv9FobG1HzAO8BA/source.gif
08:26:33 <LysergicDreams> mistell...
08:32:13 <jumper149> Hi, I'm trying to derive a monad instance, but keep GHC doesn't let me :'(
08:32:36 <jumper149> I'm using GeneralizedNewtypeDeriving and StandaloneDeriving
08:34:26 <jumper149> This is what I'm doing: http://ix.io/2eLq   ... and this is my compiler message: http://ix.io/2eLu
08:35:16 <jumper149> Apparently it cannot deduce the Applicative instance, but shouldn't that instance be implied by the monad instance?
08:35:31 <merijn> jumper149: Applicative is a superclass of Monad, so you need one for Monad to be allowed
08:35:39 <ChaiTRex> jumper149: Not currently.
08:35:55 <jumper149> So I just add deriving Applicative?
08:38:00 <ChaiTRex> jumper149: That might work, but I think you need to do a full instance definition. I think there's a standard one you can use.
08:38:13 <jumper149> ... ok and Functor. This is stupid boilerplate imho ^^
08:38:28 <jumper149> ChaiTRex: It compiled
08:38:57 <ChaiTRex> jumper149: Oh, good.
08:39:40 <jumper149> The GHC user guide just didn't explain it very well here: https://downloads.haskell.org/~ghc/7.8.1/docs/html/users_guide/deriving.html under 7.5.5.1
08:40:06 <merijn> jumper149: Why are you looking at the user guide for GHC 7.8?
08:40:29 <jumper149> Just used google and clicked on the first one I guess
08:40:53 <sm[m]> frdg: at 1.5h. How did it go ?
08:40:54 <jumper149> But it's the same here: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-GeneralisedNewtypeDeriving
08:41:05 <sm[m]> frdg: at 1.5h. How did it go ?
08:46:47 <whataname> How to capture Network.Socket exceptions? Like the remote server just disconnect without an exit signal, how the client to detect that?
08:48:00 <[exa]> that should manifest quite early whenever you next call some kind of read or write on the socket
08:48:15 <[exa]> AFAIK should be catchable as a normal IO exception
08:48:42 <whataname> More specifics?
08:49:00 <whataname> Which one IO excception?
08:49:38 <whataname> Under this situation, the remote disconnect without an exit signal, how the client detect it?
08:50:01 <frdg> of course my wifi goes out right after I ask a question sorry. https://pastebin.com/R0PSSh14
08:50:18 <srk> whataname: it doesn't
08:50:25 <srk> whataname: you need pings for that
08:50:53 <[exa]> whataname: the TCP has a timeout and you will eventually get the signal from the OS that the connection is dead. After some kind of timeout ofc.
08:50:55 <whataname> And what I can get from pings?
08:51:13 <[exa]> from pings you get precise information whether the other end is still active
08:51:16 <srk> actual liveness of the connection
08:51:32 * hackage dobutokO2 0.15.0.0 - A program and a library to create experimental music from a mono audio and a Ukrainian text  https://hackage.haskell.org/package/dobutokO2-0.15.0.0 (OleksandrZhabenko)
08:51:36 <whataname> This case, I think python has some exceptions for this
08:51:53 <whataname> Like you said, socket read or write timeout
08:52:26 <whataname> But I'm not familiar with haskell's exceptions, which exception can handle this read timeout exception?
08:52:56 <LysergicDreams> frdg: Make guessLoop read the stdin & then call itself if the guess is incorrect.
08:53:32 <frdg> LysergicDreams: ok ill try this
08:53:50 <srk> whataname: common pattern with sockets is to use bracket to catch all exceptions and perform cleanup
08:54:18 <whataname> From pings, if they just disconnected, so they woundn't respose pongs I guess
08:54:28 <srk> yes
08:55:02 <whataname> Then how I can detect that , still through set a timeout?
08:55:12 <whataname> Read timeout
08:55:45 <whataname> What is bracket? Is a package or module in haskell?
08:55:57 <srk> read/write timeouts are one thing, pings you can do on the protocol level
08:56:24 <srk> https://hackage.haskell.org/package/base-4.11.0.0/docs/Control-Exception.html#v:bracket
09:03:43 <zincy_> Is using Servant's QueryParam' '[Required, Strict] an anti pattern when you could just use Capture
09:26:41 <whatatiming> sorry, network was off
09:27:21 <whatatiming> how this setSocketOption and getSocketOption work?
09:27:31 * hackage dobutokO2 0.15.1.0 - A program and a library to create experimental music from a mono audio and a Ukrainian text  https://hackage.haskell.org/package/dobutokO2-0.15.1.0 (OleksandrZhabenko)
09:28:40 <whatatiming> setSocketOption mySocket RecvTimeOut (x::Int), what this x means?
09:29:11 <whatatiming> I cant get a good example for that
09:29:44 <zincy_> Can you hash a 4 digit number securely?
09:30:11 <zincy_> Someone is saying you might be able to reverse a hash deterministically if the input is 4 numbers
09:30:34 <heatsink> Are these 4 base-10 digts?
09:30:49 <heatsink> You can reverse a hash by brute force, there are only 1000 possiblities
09:30:56 <heatsink> 10000 rather
09:31:22 <zincy_> yes 4 base 10
09:31:23 <[exa]> zincy_: unless the hash function takes say 100 years to compute, no
09:31:29 <monochrom> 4 digits are too few, only 10000 possibilities? One can easily brute-force it?
09:32:02 <zincy_> What if you add a salt?
09:32:04 <monochrom> or it's anticipated to be anywhere between 4 and 200 digits.
09:32:17 <zincy_> Oh salts just protect against rainbow lookups right
09:32:29 <ChaiTRex> zincy_: Salts aren't going to help. You don't need a table to do 10,000 hashes.
09:32:42 <monochrom> you publish your salts too
09:32:45 <heatsink> whatatiming: `x` is a variable, and it has a type annotation that it's an Int
09:33:17 <zincy_> ok thanks
09:33:49 <ChaiTRex> zincy_: Salts also make it where you can't spot two passwords that are the same.
09:33:57 <ChaiTRex> zincy_: At least not easily.
09:33:59 <[exa]> zincy_: generally, 4-digit numbers are not secure. PINs are just an easy way to slightly disfavor the probability of attacking the rest of the system, usually against naive attackers only
09:34:03 <dmwit> A pepper could help, if you're willing to take 2^64/10000-long to do a single hash. =P
09:34:28 <ChaiTRex> Salts, peppers, and hot sauces.
09:34:43 <dmwit> Ooo, I don't know about hot sauces, what are they?
09:34:49 <ChaiTRex> I don't know :)
09:35:05 <monochrom> Err what's pepper then?
09:35:05 <ChaiTRex> A good name for the next innovation.
09:35:11 <[exa]> I'm calling the next crypto primitive hot sauce!
09:35:19 <dmwit> monochrom: Like a salt, but you don't remember it.
09:35:25 <monochrom> oh haha
09:35:56 <monochrom> Gosh everything you people say must be taken with a grain of salt.
09:36:09 <dmwit> Wait, no, I'm serious.
09:36:18 <ChaiTRex> monochrom: https://en.wikipedia.org/wiki/Pepper_(cryptography)
09:36:24 <monochrom> yikes
09:36:26 <ChaiTRex> monochrom: Peppers are real.
09:37:06 <monochrom> Ah OK, pepper may work.
09:37:08 <[exa]> $j3ca$pepper   <- pepper with small grain of salt
09:37:12 <dmwit> Oh, this thing recommends storing the pepper. The thing I was taught is don't even store the pepper (and therefore make it small enough you can brute force it!).
09:38:06 <lhurttila> What would be a smart way to impose limits on values in a list when you're changing all of them at once? For example map (+5) [1..10] and limiting the values to 10 so result would be [6,7,8,9,10,10,10,10,10,10]
09:38:06 <dmwit> Maybe if pepper is agreed on to mean this, we can make the thing I had in my head be hot sauce. ^_^
09:38:10 <monochrom> I see. Maybe brute-forcing PIN alone or pepper alone is easiy enough, but both is hard enough.
09:38:29 <dmwit> lhurttila: map (min 10 . (+5)) [1..10] -- ?
09:38:49 <dmwit> monochrom: right
09:40:28 <zincy_> nice find
09:40:31 <zincy_> pepper I like it
09:40:39 <lhurttila> dmwit works. thanks. Why is it min tough and not max? Sound quite counter intuitive
09:40:53 <monochrom> I prefer red wine sauce reduction.
09:42:00 <ChaiTRex> lhurttila: Yeah, sometimes it seems backwards. You have to think carefully. In this case, you have 10 and the number. You want the maximum or minimum? Maximum will give you a bunch of 10s and numbers above 10. Minimum will give you a bunch of numbers below 10 and 10s. 
09:42:45 <ChaiTRex> lhurttila: Since minimum gives the desired results, choose that.
09:44:47 <lhurttila> ChaiTRex I'll actually need both but for example map (max 8 . min 10 . (+5)) [1..10] seems to work. Still don't understand why those max and min aren't the other way around though
09:46:40 <lhurttila> oh it's a comparing function. now it makes sense
09:47:49 <monochrom> max 8 = atLeast 8  :)
09:48:32 <ChaiTRex> I get tripped up because I think of it as sort of enforcing a maximum, which it doesn't.
10:13:51 <eacameron> Is there a way in optparse-applicative to get the "args -- more args" behavior where anything after the " -- " is not parsed and treated as one giant argument?
10:16:49 <devalot> eacameron: I thought that was the default behavior.
10:17:35 <devalot> eacameron: Do you have an `argument' parser with `some` or `many`?
10:18:30 <eacameron> devalot: not in this particular command. How do I actually *get* the stuff after "--"?
10:19:31 <devalot> eacameron: https://hackage.haskell.org/package/optparse-applicative-0.15.1.0/docs/Options-Applicative-Builder.html#v:argument
10:20:11 <devalot> eacameron: Usually with `some` if you want at least one, and `many` for zero or more.
10:20:58 <eacameron> devalot: what happens if there are `--flag`s in that blob? I think it will try to parse them separately
10:22:53 <devalot> eacameron: Anything after '--' is put into arguments even if it would have parsed as a flag.
10:24:45 <devalot> eacameron: Here's an example: https://github.com/pjones/vimeta/blob/master/src/Vimeta/UI/CommandLine/TV.hs#L48
10:37:51 <eacameron> devalot: It's not working for me. passing " -- -b master" causes it to fail on -b because -b is not something my parser actually understands. I just want to pass it down to another command.
10:38:25 <devalot> eacameron: Can you paste your code somewhere?
10:38:55 <zeta_0> fendor: hello again, i just read the message that you sent me 2 days ago, so you got ghcide working with a darcs project that you built with cabal? i'm not sure why i can't get it to work for me, here's the instructions that i used to build darcs with cabal: http://darcs.net/Development/GettingStarted
10:39:23 <zzz> > mempty
10:39:25 <lambdabot>  ()
10:39:39 <zzz> > mempty :: IO ()
10:39:40 <lambdabot>  <IO ()>
10:40:33 <fendor> zeta_0, yeah, tried that too but I was too lazy to set-up darcs. that's why I just did `cabal get darcs`, cd'd into that dir and then executed `cabal build`, followed by `echo "cradle: { cabal: {}}" > hie.yaml` which just worked fine for me.
10:41:01 <fendor> also opening the project in ghcide afterwards
10:44:55 <frdg> is there a way to have a permenant account name on free node? every time I log on it has me make a new username
10:47:37 <zeta_0> fendor: ok, i'll try out the steps you used, also, is it ok to build the latest version of darcs? in home.nix i have ghc865 setup and ghcide set to ghc685, so i don't know if ghcide will have a version mismatches with darcs?
10:48:17 <fendor> zeta_0, i am using ghc-8.6.5, too
10:48:18 <zeta_0> fendor: i really want to get ghcide working with darcs, so i can start contributing to the darcs open source project
10:49:19 <eacameron> devalot: I wonder if that's a new feature... I'll bet I'm out of date.
10:49:22 <eacameron> I see it in the code now.
10:49:29 <zeta_0> fendor: ok, then i should be good to go, i'll let you know if i was able to get it to work or not
10:49:39 <devalot> eacameron: Glad you found it.
10:50:08 <eacameron> devalot: And you're right. It's the default. AllPositionals is the policy used after --
10:51:49 <fendor> zeta_0, good luck!
10:59:11 <zeta_0> fendor: thanks, good luck to you too
11:00:10 <frdg> https://pastebin.com/YMBjwCq0 I was wondering if you have any criticism's to this simple random number guessing game. Im not looking as much for advice to make it better but more of if you think I came up with a decent, syntactically sound program. Would you have done this different?
11:02:38 <solonarv> frdg: I see a logic error: if y == x then you print both "guessed too low" and "correct guess! you win!"
11:03:21 <frdg> solonarv: I see. Should be an easy fix!
11:03:34 <solonarv> frdg: I'd write this with a case expression, personally
11:03:56 <solonarv> case y `compare` x of LT -> too low; GT -> too high; EQ -> you win
11:04:19 <frdg> ok cool ill do this right now thanks!
11:05:47 <solonarv> frdg: and regarding your earlier question about a permanent account: you can register with NickServe so other people can't take your nickname, and configure your client to always connect with that nickname
11:06:17 <solonarv> to get started: /msg NickServ help
11:07:03 <frdg> wow I had no idea you could enter commands like that
11:10:44 <frdg> solonarv: it worked im now officially frdg
11:12:52 <solonarv> frdg: for comparison, here's how I would write that: https://gist.github.com/Solonarv/6e0e7d4011edc392f813b2a11dc0536d
11:14:01 <frdg> ok I peeked at it im gonna try to do it on my own and see how my solution compares!
11:15:52 <sm[m]> nice frdg, and here was mine: https://hub.darcs.net/simon/guess-the-number/browse/guess-the-number.hs
11:15:52 <kberg> I have a.hs b.hs and c.hs all in app/ , when I import b into a, no problem but it doesn't recognize c.hs. using cabal and nix
11:16:16 <sm[m]> it takes more than an hour, doesn't it
11:17:03 <frdg> again, Id have been weary taking the under haha
11:17:47 <solonarv> sm[m]: but that is a different guess-the-number game! ;)
11:18:46 <kberg> how could there be a problem when all files *.hs are in the same directory as main.hs? I'm new to haskell
11:19:08 <sm[m]> seems very similar solonarv
11:19:48 <solonarv> kberg: hmm. you say "it" doesn't recognize c.hs, what do you mean by "it"?
11:20:15 <solonarv> do you have an 'import C' somewhere and ghc is complainig that it can't find the corresponding .hs file?
11:20:35 <kberg> I mean, first the b.hs used to make problems, then all of a sudden it worked and I could just import b, but no autocomplete on c.hs
11:20:35 <kberg>  
11:21:08 <kberg> btw shortening the filenames to single letters to make writing easier
11:21:25 <solonarv> yeah I figured as much, since a, b, c aren't even legal module names
11:22:35 <kberg> lsp recognises b.hs and autocompletes when i try to import, but nothing on c.hs...they are both very simple modules with barely anything in them
11:24:34 <zeta_0> after running cabal new-build i got this error at the end of the build? https://gist.github.com/zeta-00/d2054baf3aea15f6b238d61e78675ecd
11:27:08 <zeta_0> am i missing some more tools that cabal depends on?
11:27:19 <maerwald> yes, it tells you which
11:27:41 <maerwald> Should be easy to google
11:27:50 <sclv> well it seems the package you're trying to build binds to curl
11:28:05 <sclv> so you'll need to install the curldev package for your system, assuming yr linux
11:28:14 <sclv> if you're mac or windows its... substantially more of a pain
11:29:03 <solonarv> on windows my go-to was doing everything inside mingw64, then you can just pacman -S mingw-blah-libcurl-dev
11:29:18 <fendor> zeta_0, you are running nixos, right? you can use `nix-shell -p cabal curl` and whatever library you need
11:30:11 <ysangkok> how do i use withForeignPtr on a list?
11:30:45 <ysangkok> probably some generic monad function that is not in Foreign.*
11:30:53 <ysangkok> :t withForeignPtr
11:30:55 <lambdabot> error: Variable not in scope: withForeignPtr
11:31:04 <sclv> ?hoogle withForeignPtr
11:31:04 <lambdabot> Foreign.ForeignPtr withForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO b
11:31:05 <lambdabot> Foreign.ForeignPtr.Safe withForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO b
11:31:05 <lambdabot> Foreign.ForeignPtr.Safe.Compat withForeignPtr :: () => ForeignPtr a -> Ptr a -> IO b -> IO b
11:31:43 <sclv> ?ty traverse
11:31:45 <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
11:31:52 <sclv> ysangkok: ^^
11:32:13 <ysangkok> ooh traverse? the meme finally applies to me. "it's always just traverse" right :O
11:32:59 <ysangkok> thanks
11:33:30 <ysangkok> but yeah, i should have realized it is not monad because the individual elements are not interacting
11:36:19 <ysangkok> oh my, it just works :O kind of terrifying when you just haphardly write traverse somewhere and everything compiles :O
11:37:12 <MarcelineVQ> but it's all traverse
11:37:27 <MarcelineVQ> oh you did that already :>
11:38:10 <koz_> It's traverse all the way down.
11:38:19 <koz_> Traverse is like turtles.
11:38:40 <MarcelineVQ> but it's all: a generalization of IO that isn't specific enough to do exactly what you want so you invent a new typeclass even though it would have just been done with and over with one extra exception check
11:38:46 <kberg>  is hs-source-dirs an obligatory entry in a cabal file?
11:38:55 <MarcelineVQ> but it's all: a monoid
11:39:08 <koz_> MarcelineVQ: Yup, monoids all the way down. Monoids and ST.
11:41:00 <MarcelineVQ> somewhere a ghost is rattling its chains cooing: ST is just IO
11:41:36 <maerwald> Don't tell the children.
11:42:09 <koz_> MarcelineVQ: It probably means 'IO is just ST'.
11:44:18 <kberg> do I have to writing anything into the .cabal file for *.hs files in the src directory? I was assuming that all those files would be just importable automatically
11:44:52 <kberg> *except for the hs-source-dir: src specification
11:44:58 <solonarv> you have to list all the .hs files
11:45:09 <koz_> kberg: Uhh, how would it know which ones are exposed and which are not?
11:45:17 <koz_> Cabal can't read your mind.
11:45:35 <MarcelineVQ> hpack tries to :>
11:45:37 <kberg> well I was thinking that it would figure it out by the imports in the main file
11:45:43 <maerwald> https://github.com/kowainik/autopack
11:45:45 <maerwald> try that
11:45:49 <maerwald> tell me how it went
11:46:09 <koz_> kberg: What if you're writing a library?
11:46:14 <koz_> Or a combo of library and executable?
11:46:16 <fendor> kowainik has such cool tools
11:46:33 <fendor> and blog posts
11:46:35 <kberg> just trying to learn haskell using miso
11:46:41 <maerwald> dmj`: ^
11:46:43 <maerwald> haha
11:48:45 <kberg> koz_ but I didn't write anything into .cabal and I still could import a file that executed a shell script reloading my browser and it worked
11:49:44 <koz_> kberg: *shrugs* Just because something happens to work doesn't make it a good idea.
11:49:53 * koz_ looks at the entire damned C programming language.
11:50:07 <kberg> yeah I guess, still odd
11:51:34 <kberg> do I have to write every module under library > exposed-modules ?
11:52:25 <koz_> Every module you want users to have access to.
11:52:36 <koz_> If you need purely internal stuff, you can put it into other-modules.
11:53:18 <kberg> i'm creating a webapp and it's just for internal use. will try, thank you for helping
11:53:41 <koz_> If you're making a web app, don't you only have an executable stanza?
11:53:43 <koz_> Or is this an executable + library combo?
11:54:36 <kberg> just executable app (miso)
11:55:25 <koz_> In that case, you don't have exposed-modules at all.
11:55:33 <koz_> You have main-is and other-modules.
11:56:40 <kberg> is   hs-source-dirs:      src  obligatory ? that's where I put my *.hs files
11:57:39 <koz_> kberg: It can be whatever.
11:57:43 <koz_> You can even have several.
11:57:49 <koz_> By convention we use src.
11:57:58 <koz_> But I can think of _at least_ one library which doesn't (aeson).
11:58:04 <Phyx-> 18:28:41 < solonarv> on windows my go-to was doing everything inside mingw64, then you can just pacman -S mingw-blah-libcurl-dev <-- don't do that
11:58:25 <kberg> koz_ ty <3
12:01:20 <dmwit> `hs-source-dirs: src` is not obligatory. The default is `hs-source-dirs: .`.
12:01:39 <Phyx-> < sclv> if you're mac or windows its... substantially more of a pain <-- `mingw-pkg install curl` should do on Windows
12:02:06 <kberg> what does  .`. mean?
12:02:20 <koz_> kberg: The current directory.
12:02:39 <koz_> C.f. '..', which means 'the parent of the current directory'.
12:02:43 <MarcelineVQ> ` is just being used as a conversational quote mark   
12:02:48 <sclv> thanks phyx! Can we put that sort of advice somewhere central?
12:03:00 <sclv> I (a dope) had no idea it was that easy
12:03:35 <MarcelineVQ> `hs-source-dirs: .`.   is an unfortunate mix of english sentence punctuations, quote ticks and a period, the important part is    hs-source-dirs: .
12:04:01 * hackage om-actor 0.1.0.0 - Actor pattern utilities.  https://hackage.haskell.org/package/om-actor-0.1.0.0 (taphu)
12:04:46 <MarcelineVQ> where that . means the current directory as koz_ mentions
12:05:27 <kberg> man just getting up and running with the haskell tools is the worst experience ever...I'm fighting to get anything running for days, reading and learning stuff about cabal,nix and lsp,hie etc
12:06:01 <koz_> kberg: It does take some time, I will admit.
12:06:12 <sclv> i think getting an ide setup etc is not a beginner thing
12:06:27 <sclv> its better to start with the simplest possible setup, learn the language then gradually upgrade
12:06:46 <sclv> this is the opposite of java or something where you start with a full-fledged ide that holds your hand
12:06:49 <sm[m]> kberg: tool overload.. best to start with a simple setup (ghcid)
12:07:06 <koz_> sclv: And eats all of your RAM and still runs slowly.
12:07:22 <kberg> i already got most of the stuff working in emacs with lsp, just the final thing of importing stuff makes problems
12:07:23 <koz_> Java had engendered in me a hatred of IDEs that has _never_ been shown to be wrong.
12:07:37 <frdg> sclv: what would you recommend for someone who's both a beginner with Haskell and linux?
12:07:44 <MarcelineVQ> 'the haskells tools' is a list that's differen for everybody
12:08:39 <kberg> emacs is just too awesome, my irc client is within emacs too 
12:08:42 <zeta_0> fendor: sorry, i was gone for a while, ok i'll setup the a quick default.nix to enter into a nix-shell'
12:08:48 * koz_ uses vim, lol.
12:08:57 <koz_> I was an emacs user for many years though.
12:08:58 <sm[m]> koz_: we should not be throwing stones in this glass house :)
12:09:11 <koz_> sm[m]: What's this in reference to?
12:09:16 <MarcelineVQ> people in glass houses sink with the ship
12:09:18 <koz_> My use of vim or my hatred of IDEs?
12:09:27 <jakalx> kberg: I'm using spacemacs, lsp and hie - it worked kind of out the box. Otherwise I would second ghcid, it's really nice
12:09:54 <zeta_0> does the new cabal automatically generate it's own sandboxes?
12:10:36 <maerwald> zeta_0: read https://www.haskell.org/cabal/users-guide/nix-local-build-overview.html
12:10:38 <koz_> zeta_0: I think it uses a Nix-like store instead.
12:10:44 <kberg> jakalx I'm using spacemacs too, everything working except, I seem to misunderstand something, because I just can't import a file in the same directory, but another file in the same directory works just fine, although they just have dummy functions in them
12:10:50 <sclv> you can think of the nix-like store as "on-the-fly-auto-sandboxing"
12:11:00 <sm[m]> https://idioms.thefreedictionary.com/people+who+live+in+glass+houses+shouldn%27t+throw+stones
12:11:05 <sclv> frdg: i just use emacs with the default haskell package, and ghc, and ghci and cabal
12:11:26 <koz_> sm[m]: I am familiar with the idiom, I merely do not understand which of my statements prior to said you were referring to by means of this idiom.
12:11:30 <sclv> that's how i started using haskell many years ago, and i never changed
12:11:33 <sm[m]> criticism of java IDEs
12:11:46 <koz_> sm[m]: It's not just _Java_ IDEs.
12:11:50 <koz_> It's IDEs as a species.
12:11:56 <koz_> I have foudn them all to be universally terrible.
12:12:03 <koz_> And anything which claims to be an IDE by extension.
12:12:14 <koz_> Not a _single_ counter-example in my entire time developing in any language ever.
12:12:16 <sclv> i had good experiences with IDEs in other languages back in the daaay
12:12:50 <sm[m]> jetbrains IDEs are great
12:12:54 <koz_> They're all slow, incredibly opaque for reasons of 'user friendliness' and 'Just Work(tm)'ing, and generally tend to be _less_ useful than what I can get from vim.
12:12:57 <koz_> sm[m]: I beg to differ.
12:13:05 <koz_> However, this is merely my opinion.
12:13:10 <koz_> Other people can use, and do, what they like.
12:13:25 <koz_> (well, vim and the shell)
12:13:25 <zeta_0> maerwald koz_ : oh ok, thanks guys
12:13:31 <koz_> (but hey, details)
12:13:34 <maerwald> well, no one cares about IDE or not, but we care about "I can jump to a definition of an identifier". And that seems to be terribly difficult in haskell ;)
12:13:34 <sm[m]> smalltalk & lisp IDEs too.. & emacs
12:13:49 <dzdcnfzd> I'm having a lot of difficulty figuring out how to define a data structure which includes a mutable array of the form STArray. What do I do with the free variable? If I have `data Foo = Foo (STArray s Int Int), where do I quantify the s?
12:13:53 <sm[m]> but we digress
12:14:05 <koz_> dzdcnfzd: 'data Foo s = ...'.
12:14:13 <koz_> You gotta cart that s around.
12:14:23 <jakalx> personally I dislike learning n tools just to edit source code
12:14:55 <zeta_0> would what's the difference between cabal v2-commands and cabal new-commands? this dam cabal mismatches confuse the hell out of me
12:15:11 <sm[m]> yep, editor tags or a good grep plugin seems the current state of the art
12:15:19 <koz_> zeta_0: None I think?
12:15:44 <sm[m]> in emacs, I must say deadgrep has made a big difference for me
12:16:21 <maerwald> zeta_0: starting with cabal-3.0.0.0 cabal new-build, cabal v2-build and cabal build are all the same
12:16:23 <maerwald> Yes, what a mess
12:16:44 <koz_> cabal just-build-it-good.
12:18:57 <jakalx> kberg: I just check, there is nothing especially configured, just the haskell and lsp layers
12:19:33 <kberg> it's so insane, even the module it recognises fails the moment I drag it into src although I specify hs-source-dirs: src
12:19:59 <kberg> jakalx thank you for informing me
12:20:04 <koz_> What's the module header?
12:20:19 <jakalx> kberg: do you have cabal config for your project?
12:20:30 <kberg> name is Misc.hs and module Misc where ...
12:20:41 <kberg> jakalx yes
12:20:58 <koz_> kberg: Can you paste your cabal file to gist.github? I suspect there's something awry there.
12:21:11 <kberg> will do mom
12:21:18 * koz_ is a mom.
12:21:55 <kberg> https://gist.github.com/ndistqt/510076058426793123ae7dbcf09606a9
12:22:49 <koz_> jsaddle -any, <-- what's with the -any?
12:23:08 <dzdcnfzd> Okay, that's interesting. I already tried that. I think my problem, then, is really a general one with how to deal with type signatures for functions involving the ST monad. Imagine I have data Foo s = Foo (STArray s Int Int). Then I want to use it, so I make a function bar :: Integer -> ST s (STArray s Int Int). Is that right?
12:23:18 <dzdcnfzd> Or am I missing something
12:23:23 <koz_> dzdcnfzd: Yes, that's it.
12:23:27 <kberg> dunno, just copyied it because I am a noob
12:23:30 <dzdcnfzd> Does the `s` have to be quantified somehow?
12:23:37 <koz_> dzdcnfzd: Not really.
12:23:47 <koz_> kberg: Where'd you copy it from?
12:24:03 <kberg> from the github examples of the miso project I think
12:24:23 <koz_> dzdcnfzd: Actually, it would be bar :: Integer -> ST s (Foo s).
12:24:30 <koz_> kberg: Link?
12:24:39 <kberg> give me a min
12:24:44 <dzdcnfzd> koz_ What If I have a function bar: Foo s -> ST s (Foo s)
12:24:50 <koz_> What of it?
12:24:50 <kberg> https://github.com/dmjio/miso/tree/master/sample-app-jsaddle
12:24:56 <dzdcnfzd> What's the relationship between the two parameters?
12:25:03 <kberg> ups
12:25:05 <kberg> that's not it
12:25:07 <dzdcnfzd> Is it right that they're all the same?
12:25:08 <zeta_0> maerwald koz_ ok, that's good to know, thanks again, i'm glad they finally fixed this cabal commands problem
12:25:22 <koz_> kberg: https://github.com/dmjio/miso/blob/master/sample-app-jsaddle/app.cabal is the cabal file.
12:25:28 <koz_> Note that it looks very much not like your own.
12:25:38 <kberg> yea
12:25:41 <kberg> just noticed
12:26:14 <koz_> dzdcnfzd: The two 's' es, you mean? They're the same type.
12:26:25 <koz_> ST is parameterized by a state token type.
12:26:32 <koz_> Much like how State is parameterized by a state type.
12:27:00 <koz_> Now, arrays have to cart around a state token type as well - this indicates relative operation ordering.
12:27:12 <koz_> (as per the Launchbury and Peyton-Jones paper on ST)
12:27:15 <dzdcnfzd> Oh, interesting
12:27:39 <koz_> So thus, when you need to _change_ a mutable array, you end up in ST s (because that's the mutable state effect), but the token still has to be carted on the original array.
12:27:41 <koz_> hence the type above.
12:27:48 <koz_> Don't worry - this threw me pretty hard at first as well.
12:27:54 <dzdcnfzd> Okay
12:28:10 <dzdcnfzd> I think I got thrown by the type of runST
12:28:18 <koz_> The type of runST is interesting.
12:28:23 <dzdcnfzd> I started thinking `s` never got quantified
12:28:35 <koz_> Nope.
12:28:37 <dzdcnfzd> or... I don't know what the technical term is. Instantiated?
12:28:42 <koz_> The magic is that _only_ runST works lke that.
12:28:50 <koz_> This basically says 'you can never leak the s out of ST'.
12:28:54 <koz_> You can't even _name_ it!
12:29:15 <dzdcnfzd> Yes, that's really cool
12:29:24 <dzdcnfzd> But `s` actually _is_ quantified, INSIDE runST
12:29:29 <koz_> While you're _in_ ST, it's all good, but to _leave_ ST, you have to ensure that said 's' is not present in the result.
12:29:37 <dzdcnfzd> That's very cool
12:29:58 <koz_> If you want the details of this, I'd recommend reading the 'Lazy Functional State Threads' paper that started all this.
12:30:09 <koz_> It is incredibly readable, but still contains all the details if you're curious.
12:30:32 <dzdcnfzd> Yeah, I'll definitely look at those.
12:30:40 <dzdcnfzd> I wouldn't have without your recommendation so thanks
12:30:54 <koz_> dzdcnfzd: Basically, any paper with SPJ's name on it is a fun read.
12:31:03 <koz_> He's an absolute _master_ at motivating research.
12:32:47 <Uniaika> his talks are also quite wonderful
12:32:58 <koz_> All the Comic Sans!
12:35:54 <solonarv> dzdcnfzd: note, if you write something like bar :: Foo s -> ST s (Foo s) then the 's' is indeed quantified here, much like any other type variable in a top-level type signature
12:36:29 <solonarv> the explicitly-quantified version is: bar :: forall s. Foo s -> ST s (Foo s)
12:37:50 <koz_> Yeah, solonarv makes a valid point. There is an implicit forall in front of that signature quantifying every type variable that's not trapped under its own forall.
12:38:15 <monochrom> Aww there is a binary integer literal extension for 0b1010, but none for character literals!
12:43:59 <koz_> monochrom: What, you wanna write hex unicode literals or something?
12:45:46 <monochrom> Haha no just decoding the binary robot message in https://www.smbc-comics.com/comic/memory-2  (press the red button to see it)
12:52:36 <Zer000> is there a way to get the mime of a file by looking at the file, with ffprobe or something? I could write a bash script to run ffprobe and then process the results in a separate step, then parse the output. But is there an easy peasy way to do it?
12:53:22 <koala_man> Zer000: file -i?
12:55:02 <Zer000> koala_man, does that just look at the extension?
12:55:40 <koz_> Zer000: file tests each argument in an attempt to classify it.  There are three sets of tests, performed in this order: filesystem
12:55:42 <koz_>      tests, magic tests, and language tests.
12:55:46 <koz_> From the manpage.
12:55:59 <Zer000> thank you i will rtfm
13:05:45 <kberg> lol now it just works
13:06:07 <kberg> koz_ u there?
13:33:20 <zeta_0> fendor: some errors were thrown when i tried to enter into a nix-shell? https://gist.github.com/zeta-00/2d806c4d2720e4200a0add034994fd60 https://gist.github.com/zeta-00/5c445f688410e6de7336eeac6009d41b
13:34:07 <zeta_0> fendor: also i'm not sure if that's the correct way to install curl in this default.nix file?
13:35:04 <fendor> zeta_0, I usually copy the shell.nix from haskell-ide-engine
13:35:36 <fendor> regarding your nix error, no idea what is happening there
13:36:26 <srk> zeta_0: is there a darcs.cabal file?
13:37:22 <srk> it looks like the expression is trying to exec cabal2nix
13:41:14 <zeta_0> srk: yes, the links that pastsbined and sent to fendor shows it
13:41:26 <zeta_0> typo paste bin
13:41:38 <srk> ah, there's ls
13:44:01 <srk> try something simple like nix-shell -p 'haskellPackages.callCabal2nix "darcs" ./. {}'
13:44:50 <srk> or haskell.packages.ghc865.callCabal2nix "darcs" ./. {}
13:47:44 <zeta_0> fendor srk : i think darcs.cabal needs to be changed to darcs.2.14.2.drv(same name as the directory name), damn it, i forgot about that
13:48:35 <zeta_0> typo: darcs.2.14.2.cabal
13:48:48 <fendor> zeta_0, no, it does not
13:50:07 <ph88> what's a good technique for modeling a state machine where some transitions are valid or not depending on conditions ?
13:56:53 <iqubic> I hear that edwardk has a good machine library.
13:57:00 <iqubic> @hackage machine
13:57:00 <lambdabot> http://hackage.haskell.org/package/machine
13:57:20 <iqubic> Or er..
13:57:26 <iqubic> @hackage machines
13:57:26 <lambdabot> http://hackage.haskell.org/package/machines
13:59:26 <dmwit> ph88: Depends on what you want to do with the model.
13:59:35 <lhurttila> Why does map (-5) [1..10] cause an error (Non type-variable argument in the constraint), when map (+5) [1..10] works just fine?
13:59:40 <zeta_0> fendor: no? then what's wrong with it?
13:59:45 <dmwit> For most of the situations I've been in, leaving that kind of validation to runtime has been the most sensible solution.
14:00:07 <dmwit> lhurttila: Because (-5) is the literal number negative five. You want `map (subtract 5) [1..10]`.
14:00:08 <ph88> dmwit, it's actually for purescript to change the pages in the browser depending on actions
14:00:32 <zeta_0> fendor: it's probably something simple that i missed
14:00:53 <dmwit> lhurttila: It's a quirk of the syntax; there's just no good solution given the constraints, and so we have the slightly-less-than-good solution of `subtract`.
14:02:33 <lhurttila> dmwit ok. Still seems quite inconsistant that +5 works without problems.
14:03:44 <dmwit> Well, + simply isn't part of the lexical syntax of numbers, while - is.
14:04:59 <yushyin> maybe https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0229-whitespace-bang-patterns.rst can and will change that, so (- 5) is different from (-5)?
14:06:40 <dmwit> hm =)
14:07:49 <dmwit> The only thing worse than language warts is slowly and subtly changing language warts.
14:08:00 <yushyin> :D
14:08:44 <dmwit> Gross. What a grumpy attitude. Where's my young self saying to just make things be the good way they should have been all along? o no
14:09:06 * dmwit disappears in a puff of logic
14:12:21 <fendor> zeta_0, idk, but you do not have to rename the darcs.cabal
14:12:35 <Cale> It's a little more than - being part of the lexical syntax of numbers
14:12:52 <int-e> dmwit: I agree... things are still constantly changing... somebody should really stop it now that it's harder for me to keep up.
14:13:13 <Cale> dmwit, lhurttila: There's actually a special case for - to mean negation, you can try it with (-x) and it'll be the same way
14:13:26 <Cale> I actually have never really minded this all that much.
14:15:10 <int-e> The truly gross thing about unary minus is that (as far as I recall--I no longer have a running hugs) ghc and hugs disagree about the meaning of (-x +) and (+ -x).
14:15:17 <Cale> lol
14:16:46 <Cale> I seem to recall there were also some times where you could distinguish whether you were in GHC vs. Hugs or perhaps it was different versions of GHC by a bug in comment parsing where --> would be considered the start of a comment
14:17:26 <Cale> (rather than a valid infix operator as it's meant to be)
14:18:24 <monochrom> Great tools for autoconf to determine haskell compiler versions :)
14:19:50 <int-e> monochrom: Have you ever looked at pre-cpuid code for detecting x86 processor variants? That was another murky area.
14:21:05 <monochrom> I haven't but I think I guessed some tricks from linux kernel boot logs (dmesg)
14:21:42 <monochrom> Like "let me divide this number by that number, if I get this answer I know you have the Pentium division bug" :)
14:22:15 <monochrom> And there was another easily testable FF-something opcode bug too.
14:22:33 <monochrom> Ah why does Intel have all the fun?
14:26:20 <zeta_0> fendor: i was able to get into the nix-shell, changing the cabal file and the nix file used by cabal2nix to the same name as the directory name did fix the error, when i did cabal get darcs, it named the cabal file darcs.cabal, not, darcs-2.14.2.cabal
14:26:43 <zeta_0> fendor: well, it works, and i'm finally in the nix-shell, yay
14:27:41 <zeta_0> fendor: the 2nd pastebin: https://gist.github.com/zeta-00/2d806c4d2720e4200a0add034994fd60
14:41:32 * hackage arion-compose 0.1.1.1 - Run docker-compose with help from Nix/NixOS  https://hackage.haskell.org/package/arion-compose-0.1.1.1 (RobertHensing)
15:15:19 <kolu> hey
15:15:36 <kolu> can anyone tell me if there is a last list element by index?
15:15:39 <kolu> such as -1
15:15:44 <kolu> list !! -1
15:15:53 <monochrom> No. But consider "last".
15:16:04 <ChaiTRex> > last [1 .. 10]
15:16:06 <lambdabot>  10
15:16:15 <monochrom> But consider time complexity.
15:16:33 <monochrom> Python is poisonous. Python is why people don't consider time complexity.
15:16:49 <monochrom> and pretend that "array" and "linked list" are the same thing
15:17:00 <ChaiTRex> If you want faster finite lists, maybe look into Vectors.
15:17:06 <jackdk> monochrom: we have a saying in Australia: "if you leave the snake alone it won't hurt you"
15:17:15 <monochrom> :)
15:18:31 <maerwald> -1 is how you catch the tail of the snake, though
15:18:36 <maerwald> or was it the head...
15:19:14 <kolu> I don't care about the tail
15:19:17 <kolu> Only its position
15:19:23 <jackdk> kolu: could you give us a bit more context about what you're trying to achieve?
15:19:37 <ChaiTRex> kolu: If you want the index, length xs - 1.
15:20:03 <ChaiTRex> kolu: Keep in mind that length can be slow.
15:20:23 <ph88> is there any way to do indexedmonad without the monad part ?
15:20:57 <kolu> I want to check whether an item on a certain index is equal to the input item
15:21:02 <monochrom> I think you can easily adapt the idea to do indexed whatever type you want?
15:21:38 <ChaiTRex> kolu: input == xs !! index
15:21:40 <Zer000> I need help with http requests! I am doing a multipart/formdata POST of a file and there is no way to set the Content-Type header. I'm using Req, which in turn relies on http-client for constructing the form parts.
15:22:40 <ChaiTRex> kolu: Though there may be a better way if you're doing that to achieve something else (like if you're finding all the indexes that match the input or something).
15:23:18 <Zer000> if you visit this page, https://hackage.haskell.org/package/http-client-0.6.4/docs/Network-HTTP-Client-MultipartFormData.html#t:Part there is only a method to add headers, but Content-Type is a different field in the Part data structure
15:23:22 <zeta_0> fendor: i almost got it working but now ghcide is throwing this other error(scroll down to the 3rd pastebin)? https://gist.github.com/zeta-00/2d806c4d2720e4200a0add034994fd60
15:24:48 <zeta_0> fendor: do i also need to setup nix in the hie.yaml file as well, since i am going into a nix-shell, or is that unnecessary?
15:25:43 <kolu> ChaiTRex
15:25:49 <kolu> actually what I'm trying to do
15:25:57 <kolu> is get to the middle index
15:26:16 <kolu> I thought of dividing the last index by 2 to get there
15:26:37 <solonarv> why not just divide the length by 2?
15:27:16 <kolu> yes, length works perfect
15:30:10 <monochrom> Binary search but on linked list to defeat the point?
15:30:36 <urinal666> you foul lamer
15:30:50 <zeta_0> what does this error mean guys(scroll down to the bottom pastebin)? https://gist.github.com/zeta-00/2d806c4d2720e4200a0add034994fd60
15:31:19 <monochrom> People can be really creative in how to turn failure into self-perceived success.
15:32:14 <urinal666> monochrom: you are promoting neo nazism with your links get out of here
15:32:17 --- mode: ChanServ set +o monochrom
15:32:22 --- mode: monochrom set +b *!*@2001:999:70:d03b:a502:81d8:f405:b8df
15:32:22 --- kick: urinal666 was kicked by monochrom (urinal666)
15:33:06 <kolu> failure is good
15:36:04 --- mode: monochrom set -o monochrom
15:39:15 <Zer000> I think I figured it out. I can created a part, and then do part { partContentType = ...}
15:40:33 <dmwit> kolu: Usually, trying to get to the middle of a list is a sign that either 1. you are using the wrong algorithm or 2. you are using the wrong data structure.
15:44:26 <kolu> what data structure would be appropriate
15:54:37 <ph88> monochrom, do you know how the indexed type is build ? with gadt ?
15:55:05 <maerwald> monochrom: and we know have scientific evidence that you learn from success better than from failure, hah
15:55:17 <maerwald> (which isn't all that surprising is it)
15:59:23 <maerwald> But this guy clearly doesn't, know he's off in ##rust
16:00:27 <monochrom> I just know that in military real-time strategy games, units get promoted after success. As for failure it's a harsh "you die anyway".
16:03:52 <maerwald> Maybe there should be such a GHC mode... if your code doesn't typecheck...
16:04:10 <monochrom> Actually is there a survivor bias in the evidence for learning from success?  I know for sure that those students who still haven't dropped my course are both learning and pretty successful, but like 1/3 dropped the course and I don't know how much they learned.
16:06:10 <maerwald> monochrom: https://journals.sagepub.com/doi/abs/10.1177/0956797619881133
16:06:35 <maerwald> Seems it's a meta-study
16:08:46 <maerwald> But how do you get past the abstract I'm not sure lol
16:08:53 <monochrom> Hrm, interesting, I'll have to think about what to make of it.
16:09:14 <monochrom> Yeah me neither, not going to read the whole thing. Would rather play Civ 5.
16:22:33 <kolu> so if I want to jump to a specific list index 
16:22:37 <kolu> say list !! 5
16:22:55 <kolu> I have to traverse all elements up until 5?
16:23:18 <maerwald> It's a linked list yeah
16:25:10 <maerwald> > [1..] !! 121919191919293834634777761227766667346
16:25:16 <lambdabot>  mueval-core: Time limit exceeded
16:32:20 <int-e> > [1..] !! 121919191919293834630481844928862224425 -- scnr
16:32:22 <lambdabot>  42
16:33:17 <zeta_0> fendor: what does this ghcide error mean? unrecognized target syntax for ''.\n\n'', ""
16:33:38 <zeta_0> does anyone else here know what this error means?
16:35:51 <solonarv> int-e: how? overflow?
16:36:09 <solonarv> oh yes, !! takes an Int argument
16:36:37 <maerwald> in ghci you get a warning for that
16:36:49 <maerwald> -Woverflowed-literals
16:38:54 <fendor> zeta_0, maybe https://github.com/digital-asset/ghcide/issues/487 ?
16:39:42 <fendor> maybe `cabal repl` doesnt succeed
18:00:16 <zeta_0> what does this cabal build error mean?
18:00:43 <zeta_0> https://hastebin.com/ohiguyicoj.coffeescript
18:01:31 <zeta_0> well, it's just a warning, so i think it did build, hopefully
18:01:59 <dmwit> Error message looks pretty clear to me.
18:04:26 <zeta_0> dmwit: ghcide is still throwing that damn error': https://github.com/digital-asset/ghcide/issues/487
18:04:42 <zeta_0> dmwit: they haven't fixed it yet, so i think i'm screwed
18:08:12 <zeta_0> eshell is missing a lot of things that the terminal has, which is a bummer
18:16:36 <fog> where does stack put cabal3? i did stack install aeson to get the ghc 8.8.3, and it says it is using cabal3
18:16:45 <fog> the stack .exe and the ghc dir are both in appdata
18:23:03 <fog> I have not done stack install cabal-install
18:23:30 <fog> but still, when i do stack install some+package, it says that its using cabal 3 and that this isnt tested with stack
18:23:49 <fog> its just a warning, but it shows that stack can see a version of cabal
18:24:01 <fog> but when i search for it i find nothing! no cabal.exe anywhere
18:26:39 <fog> also when i try stack install cabal-install it complains about the version of base being above the permitted upper bound
18:27:03 <fog> but i would prefer to just add the cabal stack is using...
18:27:35 <fog> oh, actually, maybe its just that because its ghc 8.8.3 that it tells stack that the version of cabal it uses is v3
18:27:51 <fog> not that there is actually any cabal exe....
18:28:09 <fog> so then the quesion is, how do i install cabal?
18:28:47 <fog> i tried stack install cabal-install --allow-newer, but thats a cabal flag
18:31:05 <dmwit> Are you sure that error is about cabal-install and not Cabal?
18:31:20 <dmwit> ?hackage Cabal is a separate entity; it is a library that both stack and cabal-install use
18:31:20 <lambdabot> http://hackage.haskell.org/package/Cabal is a separate entity; it is a library that both stack and cabal-install use
18:31:55 <dmwit> Take this with a grain of salt, I guess. I've only done very basic things with stack still.
18:32:40 <fog> hmm, cabal bonaries for windows are here; https://www.haskell.org/cabal/download.html
18:33:50 <fog> yeah, if i put that next to the stack exe its on the path and everything seems to work
18:34:19 <fog> well, its downloading the package list at least
18:36:45 <sm[m]> stack is talking about the  Cabal library built in to it, it doesn't run cabal.exe
18:36:56 <sm[m]> that warning is harmless (but annoying)
18:39:57 <sm[m]> really time for a stack release
19:38:15 <tko`> ahh I love haskell :3 that's all I wanted to say 
19:55:04 <dmwit> \o/
20:47:25 <sm[m]> word!
20:47:53 <isovector1> is there some library that does proper application of TH Types?
20:48:43 <isovector1> eg if i have ForallT [KindedTV a_3530822107858468865 StarT] [] (AppT (AppT ArrowT (VarT a_3530822107858468865)) (AppT (ConT GHC.Maybe.Maybe) (VarT a_3530822107858468865))), and I apply that to ConT 'Bool, I'd like to get back ConT 'Maybe `AppT` ConT 'Bool
20:50:26 <glguy> You could build something like that with http://hackage.haskell.org/package/th-abstraction-0.3.2.0/docs/Language-Haskell-TH-Datatype.html#v:applySubstitution
20:52:23 <isovector1> glguy, thanks, i was looking at that lib already but didn't notice that one
20:52:35 <isovector1> i'm writing a typechecker anyway, so i think i could just unify the bastards
21:40:47 <wroathe> Anyone know why Storable doesn't have instances for tuples and lists?
21:41:52 <wroathe> Actually, nvm
22:40:31 <jusss> setSocketOption :: Socket -> SocketOption -> Int -> IO ()
22:40:42 <jusss> Now, there are SocketOption constructors (RecvTimeOut and SendTimeOut)
22:40:42 <jusss> for what I want.  But there is no way to give it a proper timeval
22:41:16 <jusss> how I can set RecvTimeOut on a socket?
22:41:28 <jusss> and will it trigger an exception?
22:48:34 <dsal> What are you trying to do?  recv timeout doesn't seem very useful in general.
22:49:15 <jusss> dsal: the remote disconnted without an exit signal, how the client detect it
22:49:22 <dsal> It's documented as:  RecvTimeOut	
22:49:22 <dsal> SO_RCVTIMEO: this does not work at this moment.
22:50:11 <dsal> The most reliable way to do that is to send something to it and have the send fail.
22:50:15 <jusss> why it's not work
22:50:46 <jusss> how to catch that send fail?
22:51:34 <dsal> I don't know what your application looks like.  Most of what I've done in this area has been using conduit and having a watchdog of some sort.
22:52:05 <dsal> My protocol periodically transmits a message that the client responds to.  I reset my watchdog timer when I don't get a message in a bit.
22:52:52 <dsal> e.g. https://github.com/dustin/mqtt-hs/blob/master/src/Network/MQTT/Client.hs#L331-L361
23:14:08 <gaze__> how are lexers usually implemented with Megaparsec? it doesn't really even seem like idris uses one
23:17:40 <jackdk> in my experience I haven't ever written a separate lexer/parser split when using megaparsec
23:18:05 <jackdk> instead, I write primitive parsers that parse the lexemes, then combine them to build the actual parser
23:23:05 <gaze__> I mean what I really wanna do is parse a c++ file (yes I know, god help me), where clang is a little too overpowered, but I want to skip over large sections whose lexemes I don't want to define/that I want to ignore
23:23:27 <gaze__> so mixing the lexer and parser is great
23:30:43 <jusss> dsal: https://hackage.haskell.org/package/network-3.1.1.1/docs/Network-Socket-ByteString.html#v:sendAll
23:30:54 <jusss> what exception will raise?
23:31:13 <jusss> and I can use Control.Exception.catch to capture it?
23:32:52 <dsal> Yeah... haskell's a bit bad about documenting exceptions.
23:33:37 <jusss> I think bad about everything
23:34:46 <dsal> haha.  I think it's good at most things.  Exceptions are just a bit weird.
23:35:42 <jusss> because it's related to IO ? 
23:35:46 <jusss> to runtime error
23:50:16 <glguy> All functions communicate failures by converting the error number to IOError
23:50:25 <glguy> It's documented right there
23:51:08 <glguy> The network library is a pretty thin wrapper around the underlying socket interface
23:52:54 <jusss> glguy: I should capture IOError when send fail?
