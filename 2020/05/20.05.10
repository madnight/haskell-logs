00:59:45 * hackage minilight-lua 0.1.0.0 - A binding library of minilight for Lua langauge.  https://hackage.haskell.org/package/minilight-lua-0.1.0.0 (myuon)
01:42:27 <dnlkrgr> with cabal, how can I make a local package visible to other projects so that I can use it in their `build-depends`?
02:16:10 <freeside> erf. ghc 8.8.3 has some kind of memory leak, it's taken up 10 gigs of ram compiling pandoc.
02:22:56 <maerwald> freeside: that's not a memory leak xD
02:26:44 <freeside> heh
02:28:21 <jophish> lol, just wrote a 800 character type signature
02:28:37 <freeside> Haskell: it's character-building.
02:28:42 <Tuplanolla> Does your essay type check?
02:29:25 <jophish> the typechecker loves it
02:29:30 <jophish> spends a long time there
02:30:47 <jophish> tbf this is autogenerated code, and the signature appears 3 times, i.e. (a -> a') -> a'' where a, a' and a'' are all variations on the same long type
02:35:06 <freeside> i might try 8.6 or 8.10. https://gitlab.haskell.org/ghc/ghc/issues/17745
02:36:39 <maerwald> freeside: thats runtime and about rewrite rules afais
02:39:45 <maerwald> oh no, it's implicit dictionary argument passing causing thunk build ups
02:39:47 <maerwald> lol
02:43:09 <maerwald> freeside: so just pass -fdicts-strict
02:44:43 <freeside> okay, i will try that, thank you. just feeling a bit demoralized right now, i've been trying to get Word and Pandoc and AWS and ghc to all play nicely together for the last two days and i feel like i've been crawling uphill through mud
02:45:38 <freeside> i have found ghc-options inside pandoc.cabal and will keep my fingers crossed
02:46:25 <maerwald> this probably all has nothing to do with memory consumption during *compilation*
02:51:25 <freeside> you're right, that's not quite the right git issue
02:51:44 <freeside> i was looking at an issue yesterday that looked just like my situation, it had a nice graph of space usage, but i can't find it now
02:52:18 <freeside> anyway, my ghc is now holding steady at 1.2g
02:52:26 <freeside>   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
02:52:27 <freeside> 23979 ec2-user  20   0 1024.6g   1.2g 142744 R  99.0 31.5   1:49.05 ghc
02:54:38 <pie_> well, time to try to figure out how to stick more code in https://github.com/chpatrick/clang-pure/blob/master/src/Language/C/Clang/Internal/FFI.hsc
02:56:06 <Guest_45> Hello
02:56:18 <Guest_45> I tried to install Haskell on mac
02:56:24 <Guest_45> Through Terminal
02:56:33 <freeside> and it took up all your ram?
02:56:34 <Guest_45> But it gives me an error message
02:56:45 <Guest_45>   Reason: Incompatible library version: ghcup requires version 8.0.0 or later, but liblzma.5.dylib provides version 6.0.0
02:57:05 <Guest_45> can anybody explain how to fix this
02:57:36 <freeside> you might do better running your haskell within stack, which should take care of things like that. at the cost of other problems. https://www.haskellstack.org/
02:58:45 <Guest_45> But I need ghc and cabal 
03:01:16 * hackage haskoin-store-data 0.26.2 - Data for Haskoin Store  https://hackage.haskell.org/package/haskoin-store-data-0.26.2 (jprupp)
03:02:04 <freeside> you will get ghc and cabal, if stack works. i know ghcup was supposed to make haskell Just Work, but evidently it didn't :(
03:02:14 * hackage haskoin-store 0.26.2 - Storage and index for Bitcoin and Bitcoin Cash  https://hackage.haskell.org/package/haskoin-store-0.26.2 (jprupp)
03:17:58 <maerwald> Guest15982: yeah
03:18:26 <maerwald> freeside: why you recommending stack :>
03:22:22 <maerwald> You'll probably see no less issues with cross-platform binaries on the stack issue tracker
03:22:36 <maerwald> Or cabal, or ghc bindists
03:25:50 <freeside> i am rapidly reaching the point of declaring that all software sucks
03:26:08 <freeside> i can do extraordinary things with code, but figuring out how to instruct Word regarding paragraph list styles is driving me to tears
03:26:08 <maerwald> Guest_45: which osx version?
04:51:12 <Guest_45> Hey guys. I installed Haskell stack, but I need ghc and cabal-install. I cannot do it through Haskell platform since it gives me error message: Incompatible library version: ghcup requires version 8.0.0 or later, but liblzma.5.dylib provides version 6.0.0
04:51:15 <Guest_45> Please help
04:51:34 <maerwald> Guest_45: please try again
04:52:03 <maerwald> just run the curl command again
04:52:14 <Guest_45> I already tried several times. I have Mac. And the curl command gives me this error message
04:52:53 <merijn> Guest_45: Which version of macOS?
04:53:09 <Guest_45> MacOS Sierra 10.12.6
04:53:09 <maerwald> Guest_45: I just fixed it, but the server needs some time to update 
04:53:47 <maerwald> hang on a second
04:53:56 <merijn> Guest_45: ok, so none of the Catalina issues. I just install the GHC bindist myself and install cabal-install by hand
04:54:34 <Guest_45> So just to make it clear. I used ghcup install, copied curl in Terminal. Then install fails and the reason is  Incompatible library version: ghcup requires version 8.0.0 or later, but liblzma.5.dylib provides version 6.0.0
04:54:49 <Guest_45> This curl: curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
04:55:09 <maerwald> Guest_45: curl --proto '=https' --tlsv1.2 -sSf https://gitlab.haskell.org/haskell/ghcup-hs/-/raw/darwin-lzma-fix/bootstrap-haskell | sh
04:55:21 <freeside> nice
04:55:23 <maerwald> the update takes a while
04:56:24 <Guest_45> Is this an updated curl? 
04:56:42 <maerwald> Did you run the command?
04:57:17 <Guest_45> Yes. I typed in Terminal a new curl. No success again. It says: Unknown SSL protocol error in connection to gitlab.haskell.org:-9836
04:58:27 <freeside> might be easier to just open the url in a browser and save it
04:58:35 <merijn> Guest_45: Alternative approach, you can download a GHC binary here: https://www.haskell.org/ghc/download_ghc_8_10_1.html#macosx_x86_64 unzip, then run "./configure --prefix=path/to/install/to && make install" :)
04:59:10 <maerwald> Guest_45: yes, you can just download the script and run it too
05:01:01 <maerwald> oh hang on, I forgot to upload :)
05:01:07 <maerwald> curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
05:01:09 <maerwald> should work now
05:02:10 <freeside> i didn't have to pass any options to my curl but i'm on 10.13.6.
05:02:45 * hackage haskoin-store-data 0.26.3 - Data for Haskoin Store  https://hackage.haskell.org/package/haskoin-store-data-0.26.3 (jprupp)
05:03:45 * hackage haskoin-store 0.26.3 - Storage and index for Bitcoin and Bitcoin Cash  https://hackage.haskell.org/package/haskoin-store-0.26.3 (jprupp)
05:05:09 <Guest_45> Seems like it's working
05:05:29 <freeside> keeping fingers crossed for you
05:23:07 <maerwald> can you do optional subcommands with optparse-applicative?
05:23:34 <maerwald> I guess it might potentially make the parser ambiguous
05:24:45 * hackage tasty 1.3 - Modern and extensible testing framework  https://hackage.haskell.org/package/tasty-1.3 (RomanCheplyaka)
05:26:44 <merijn> maerwald: You can
05:27:23 <merijn> I did that at one point
05:27:25 <maerwald> I guess it would try to parse the subcommand first then and fall back to the other parser
05:27:38 <merijn> maerwald: Yeah
05:28:41 <maerwald> I basically want a subcommand to be "default" when it isn't specified, for backwards compatibility
05:29:03 <maerwald> Wonder how the help pages will look like then
05:29:55 <maerwald> merijn: also, did you see https://github.com/haskell/cabal/issues/6771
05:30:24 <maerwald> Interestingly, pkgconfig database is part of the solver. Except no one knows how exactly
05:30:32 <merijn> maerwald: No, because unless it's work or directly blocking my thesis stuff I've banned myself from looking at code/issues :p
05:31:11 <maerwald> fighting the procrastination?
05:31:25 <merijn> Not very succesfully, but a b it :p
05:38:12 <srk> mm, both cabal and ghcid could use some improvements for cabal.project multilib projects. like error messages are starting with src/ and you can't take copy the path right away
05:38:41 <srk> for ghcid I guess that's just cabal repl and found https://github.com/haskell/cabal/issues/5374 which points to ghc --interactive interface
05:38:48 <srk> but what to do with the filenames..
06:07:53 <average> hi Haskell
06:08:01 <average> I might actually write something in your wonderful language..
06:08:03 <average> one day..
06:08:38 <enikar> why not today.
06:09:10 <average> enikar: today I'm getting paid for other things. but who knows, if someone throws money at me to write Haskell..
06:09:13 <average> you never know..
06:10:22 <beaszt-nix> Hello, noob here,newtype Vertex v = Vertex v deriving (Eq, Ord, Bounded ,Enum, Show)
06:10:30 <beaszt-nix> Gives no error in ghci
06:10:42 <beaszt-nix> But when loading into ghci from .hs file
06:32:45 * hackage extensions 0.0.0.1 - Parse Haskell Language Extensions  https://hackage.haskell.org/package/extensions-0.0.0.1 (shersh)
07:55:45 * hackage password 2.0.1.0 - Hashing and checking of passwords  https://hackage.haskell.org/package/password-2.0.1.0 (nideco)
08:21:43 <sm[m]> freeside, maerwald: pretty interesting that -fdicts-strict fixes ghcâ€™s pandoc-building regression; good to know
08:26:04 <freeside> i can't yet aver that -fdicts-strict has fixed my pandoc build. i put that in as an option and then i think i ended up overwriting that change so it ended up taking 3.6-plus-swap to build. it eventually took a couple hours of mostly swapping.
08:26:29 <freeside> i'll run an experiment now.
08:36:03 <maerwald> sm[m]: does it?
08:40:02 <freeside> btw, where should one put the -fdicts-strict? in Makefile or in pandoc.cabal?
08:48:30 <zeta_0> what .emacs config do you people have setup for haskell-mode? i followed the documentation in emacs haskell-mode, but my setup is not working correctly? https://dpaste.org/AvEe
08:49:28 <zeta_0> i'm trying to get haskell-mode working with ihaskell and emacs-ipython-notebook, but i can't seem to get the auto-completion working?
08:54:45 <zeta_0> i haven't found anyone that uses ihaskell in emacs yet, so it's hard finding someone to ask for help on setting things up in .emacs
08:57:09 <freeside> have you tried some of the others like ghcide?
08:59:10 <zeta_0> freeside: yes i'm currently using ghcide for my haskell projects, but i don't think it will work with ihaskell, that's why i'm trying to setup haskell-mode in my .emacs config
09:04:15 * hackage exinst 0.8 - Dependent pairs and their instances.  https://hackage.haskell.org/package/exinst-0.8 (RenzoCarbonara)
09:05:15 * hackage exinst-bytes 0.7.1, exinst-cereal 0.7.1, exinst-serialise 0.7.1, exinst-aeson 0.7.1 (RenzoCarbonara)
09:07:52 <zeta_0> ya, all the haskell-mode documentation is old(it still uses ghc-mod), so i don't think i'm going to be able to get this to work
09:08:45 * hackage typed-uuid 0.1.0.0 - Phantom-Typed version of UUID  https://hackage.haskell.org/package/typed-uuid-0.1.0.0 (Norfair)
09:11:20 <zeta_0> fendor: does ghcide work with ihaskell?
09:11:30 <fendor> zeta_0, no
09:12:24 <zeta_0> that's a bummer, then i am going to have to setup haskell-mode
09:13:02 <Boarders_> Does anyone know what the difference between a and (# a #) is in terms of memory layout. Should I think of the latter as a pointer to the former or?
09:14:00 <Boarders_> For instance when I do case blah of (# a #) -> a what does that do practically speaking?
09:16:00 <yubrshen> I'm also a beginner. But I have not seen the 
09:16:13 <yubrshen> expression of #a# so far.
09:16:39 <yubrshen> Could you show a real code segment containing #a$?
09:16:52 <yubrshen> I meant #a#
09:25:31 <merijn> Boarders_: Have you checked the GHC user's guide yet? :p
09:25:59 <merijn> yubrshen: (# a #) is a GHC extension called unboxed tuples, it's not "real" Haskell
09:32:29 <Boarders_> merijn: I had a quick look but thanks for the pointer Iâ€™ll have a proper look
09:45:34 <zeta_0> if ghc-mod is deprecated, then what is the current auto-complete tool that's used with haskell-mode?
09:57:17 <monochrom> haskell-mode already has auto-complete, if you have done a successful "load" of your source file.
10:07:29 <dmj`> there should be a specification for haskell code generation
10:19:49 * dsal is part of the haskell code generation
10:20:15 * hackage Shpadoinkle 0.1.0.0 - A programming model for declarative, high performance user interface.  https://hackage.haskell.org/package/Shpadoinkle-0.1.0.0 (fresheyeball)
10:21:09 <dsal> Does anyone happen to know how Control.Monad.STM.TVAr.registerDelay works?  It doesn't say much in the docs and the source is a bit mystical.
10:23:39 <dmj`> dsal: lol
10:24:19 <dsal> I'm pretty sure this use of registerDelay is much better than my crude `timeout` based thing.  I at least don't *know* I'm spawning a thread.
10:29:02 <dsal> Searching for this, I just found out that my `liftSTM` already exists as `UnliftIO.atomically` and since I'm already using `UnliftIO`, might as well delete some code.
10:30:05 <dsal> UnliftIO is like a huge junk drawer of IO.
10:30:27 <Mathnerd314> is registerDelay really that mystical? https://hackage.haskell.org/package/base-4.14.0.0/docs/src/GHC.Event.Thread.html#registerDelay, it adds a timeout callback to the the main I/O event loop.
10:31:09 <dsal> Mathnerd314: In the STM package, it exports it, but I couldn't see where it came from other than a glasgow_haskell ifdef.  So I googled around a bit.
10:31:46 * hackage Shpadoinkle-html 0.1.0.0 - A typed, template generated Html DSL, and helpers.  https://hackage.haskell.org/package/Shpadoinkle-html-0.1.0.0 (fresheyeball)
10:32:09 <dsal> Thanks for the pointer, though.  I assumed it did something like that.
10:32:23 <Mathnerd314> I'd recommend you use Hoogle, because Hoogle has all the base packages indexed, unlike Google which barely indexes hackage
10:33:14 <dsal> For some reason, I didn't think to do that.  My brain told me it knew where that function existed, but didn't make the connection that it was just a reexport from something else there.
10:34:26 <dsal> Also, just realized I basically wrote the code this thing uses as a module for my server.  I wonder if I can delete that whole thing...
10:38:10 <dsal> "this module should be considered ghc internal" is enough of a deterrent for me to not worry about it.  My thing works slightly differently anyway.
10:38:45 * hackage Shpadoinkle-backend-static 0.1.0.0 - A backend for rendering Shpadoinkle as Text.  https://hackage.haskell.org/package/Shpadoinkle-backend-static-0.1.0.0 (fresheyeball)
10:39:14 <yubrshen> merjin: Thanks for the clarification about #a#!
10:41:15 * hackage haskoin-store-data 0.26.4 - Data for Haskoin Store  https://hackage.haskell.org/package/haskoin-store-data-0.26.4 (jprupp)
10:42:15 * hackage haskoin-store 0.26.4 - Storage and index for Bitcoin and Bitcoin Cash  https://hackage.haskell.org/package/haskoin-store-0.26.4 (jprupp)
10:42:36 <yubrshen> zeta_0: I'm using haskell-mode out of the box with emacs Doom, with stack, the autocompletion sometimes works.
10:43:45 * hackage Shpadoinkle-backend-pardiff 0.1.0.0 - A Virtual Dom in pure Haskell, based on Html as an Alignable Functor.  https://hackage.haskell.org/package/Shpadoinkle-backend-pardiff-0.1.0.0 (fresheyeball)
10:44:48 <yubrshen> I don't have time to bother the configuration. It works OK for me for now, with a repl working.
10:45:04 <yubrshen> flycheck working
10:45:21 <yubrshen> tho code format when save almost working
10:45:34 <yubrshen> it's good enough for me learning Haskell.
10:53:16 * hackage Shpadoinkle-backend-pardiff 0.1.0.1 - A Virtual Dom in pure Haskell, based on Html as an Alignable Functor.  https://hackage.haskell.org/package/Shpadoinkle-backend-pardiff-0.1.0.1 (fresheyeball)
10:54:16 * hackage latex-svg-pandoc 0.2.1 - Render LaTeX formulae in pandoc documents to images with an actual LaTeX  https://hackage.haskell.org/package/latex-svg-pandoc-0.2.1 (phadej)
11:05:12 <baskaransri> hi!
11:05:27 <baskaransri> I have a question about comonads
11:07:16 <Uniaika> ask
11:07:26 <baskaransri> Is there a modified comonad which has an extract which relies on a monad?
11:07:35 <baskaransri> extract' : w m a -> m a
11:08:05 <baskaransri> I'm thinking about probability distributions, and I require IO or something to sample
11:10:01 <baskaransri> so I have a Dist m Colours -> m Colours which looks like extract, and duplicate is easy
11:16:42 <baskaransri> I could probably define it so that m was a class of things including Identity, but I'd want to run it under IO
11:27:16 * hackage tasty-golden 2.3.3.3 - Golden tests support for tasty  https://hackage.haskell.org/package/tasty-golden-2.3.3.3 (RomanCheplyaka)
11:57:45 * hackage Shpadoinkle-backend-snabbdom 0.1.0.0 - Use the high-performance Snabbdom virtual dom library written in JavaScript.  https://hackage.haskell.org/package/Shpadoinkle-backend-snabbdom-0.1.0.0 (fresheyeball)
11:59:15 * hackage yamlparse-applicative 0.1.0.1 - Declaritive configuration parsing with free docs  https://hackage.haskell.org/package/yamlparse-applicative-0.1.0.1 (Norfair)
13:11:15 * hackage Shpadoinkle-router 0.1.0.0 - A single page application rounter for Shpadoinkle based on Servant.  https://hackage.haskell.org/package/Shpadoinkle-router-0.1.0.0 (fresheyeball)
13:11:29 <koz_> Is there a NonEmptyText analogous to NonEmptyList?
13:11:32 <maerwald> ghcide behaves weird with flags and CPP
13:12:33 <maerwald> it seems it assumes the CPP to be defined, although the flag isn't, resulting in errors. When I enable the flag in cabal.project.local it will try to rebuild the deps on *every* start
13:19:45 * hackage Shpadoinkle-widgets 0.0.0.2 - A collection of common reusable types and components.  https://hackage.haskell.org/package/Shpadoinkle-widgets-0.0.0.2 (fresheyeball)
13:20:25 <EvanR> koz_: (Char, Text) :P
13:21:55 <maerwald> There are two packages
13:22:03 <maerwald> both with odd API
13:26:18 <EvanR> all packages can be decomposed into two packages one with odd API and one with even API
13:27:15 * hackage ref-extras 0.1.1 - Extra stuff for mutable references  https://hackage.haskell.org/package/ref-extras-0.1.1 (ejconlon)
13:27:32 <maerwald> and now ghcide stopped seeing dependencies
13:28:53 <maerwald> I still haven't understood the need of hie.yaml. That's all information that can be inferred
13:29:35 <Uniaika> maerwald: I think mpickering can englighten you on it ;)
13:30:44 <dsal> koz_: why do you want a nonempty text?  That sounds a little like https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/
13:31:15 <maerwald> newtype with smart constructor to the rescue
13:33:16 * hackage Shpadoinkle-examples 0.0.0.1 - Example usages of Shpadoinkle  https://hackage.haskell.org/package/Shpadoinkle-examples-0.0.0.1 (fresheyeball)
13:35:03 <maerwald> and the multi-cradle examples in the docs mostly don't work. The path has to point to the place where the .cabal file is apparantely, not where the sources are
13:35:10 <maerwald> so you end up with "" as path
13:38:15 * hackage Shpadoinkle-router 0.1.0.1 - A single page application rounter for Shpadoinkle based on Servant.  https://hackage.haskell.org/package/Shpadoinkle-router-0.1.0.1 (fresheyeball)
13:38:27 <maerwald> I guess it's still not ready
13:50:19 <koz_> dsal: How is a type for _non-empty Text_, validating not parsing?
13:50:29 <koz_> You go from 'a text which might be empty' to 'something we know can't be'.
13:50:33 <koz_> You're structurally adding information.
13:51:11 <mpickering> maerwald: Please open issues rather than guessing incorrectly what is wrong
13:51:12 <koz_> C.f. [a] versus NonEmpty a.
13:51:57 <dsal> It's a bit of an X-Y, but knowing it's empty or not doesn't take you very far.
13:52:19 <koz_> dsal: In my case, it actually does.
13:52:42 <dsal> Yeah, it might.  I said "sounds a little like" not "you're definitely doing it wrong"  :)
13:52:53 <koz_> I'm fairly sure 'how far structural refinement takes you' is rather domain-specific.
13:52:56 <koz_> Ah, OK.
13:52:58 <koz_> My bad then.
13:53:02 <koz_> Didn't mean to question your judgment or anything.
13:53:10 <koz_> Just got a bit confused at the Alexis King reference there mainly.
13:53:26 <koz_> (I'm a big fan of her writing, that piece _especially_)
13:53:34 <dsal> Nah, I don't know enough about what you're doing, but it's a thing to think about.  I often overlook things like that, myself, so I figured I'd toss it out there.
13:53:53 <koz_> dsal: Oh, of course. I have been called on weirdo decisions here many times, rightly.
13:54:24 <dsal> One neat thing about writing this mqtt broker is that I'm looking back on my old mqtt code wondering why I did things this way...
13:54:37 <maerwald> mpickering: pretty sure there are already issues for those things
13:54:39 <maerwald> e.g. https://github.com/digital-asset/ghcide/issues/470
13:55:08 <maerwald> multi component seems WIP, judging from https://github.com/digital-asset/ghcide/pull/522
13:55:33 <koz_> dsal: *mumbles something about documentation*
13:55:45 <maerwald> and there are multiple issues about users asking why they need a hie.yaml at all
13:55:49 <mpickering> "Everything should automatically inferred" is why all tools were broken for a long time
13:56:14 <mpickering> It's not as if people aren't trying to improve this situation
13:56:50 <dsal> koz_: Oh, that's one of the things...  A lot of the types are "not important" in the sense that they don't matter a lot for what I was doing at the time.  But what's this Word16?  I get to make things a bit better as I go.
13:57:04 <mpickering> If you expecting everything to just work suddenly after 20 years of things not working then you are going to be disappointed
13:57:15 <maerwald> :D
13:57:31 <maerwald> Also, I think I found a cabal bug in the process
13:57:38 <koz_> dsal: I basically got schooled on use of Word16 in domain-specific settings at work. Someone said 'just newtype the damn thing and give it a name'.
13:57:57 <dsal> Just regular type alias is fine for what I'm doing and is a huge improvement.
13:58:00 <koz_> For two reasons: first, clearer to the reader; second, you'll wanna add some semantics (or _remove_ some semantics) eventually anyway, and newtypes make this much easier to enforce.
13:58:01 <mpickering> The hie.yaml is intended to be mostly temporary to give the build tools time to catch up and provide the right information 
13:58:04 <dsal> It's not quite the same.
13:58:09 <maerwald> "constraints: your-package some-flag" in cabal.project.local will make cabal think the config has been updated all the time
13:58:09 <mpickering> but even then, how do you know if it's a stack or cabal project?
13:58:13 <dsal> But I can tell what it's for at least.
13:58:32 <mpickering> If you explicitly configure your project then everything works a lot better and continues to work
13:58:42 <maerwald> mpickering: yeah, that problem exists in codex as well. They hack around it by checking for .stack-work in fact, afair
13:59:03 <mpickering> There is no accurate check, you can have a .stack-work and want to build with cabal
13:59:14 <maerwald> true, but this is about defaults I'd say
13:59:16 <mpickering> hence why having the possibility to explicitly configure is necessary unless you want it to be very annoying
13:59:28 <maerwald> zero-configuration is nice
13:59:51 <mpickering> Sure it is, so use it on GHC where you won't have to configure anything :) 
14:00:00 <mpickering> because I already set up all the configuration for you..
14:00:16 <mpickering> master won't work for that actually but it will when my multi-component patch gets landed
14:00:33 <mpickering> If you want something polished then try again in 10 years ;) 
14:01:01 <maerwald> the multi-component is also a little confusing semantically... it could be multiple components from the *same* package and mulitple components from different *packages* right?
14:03:26 <mpickering> I don't think I tested multiple packages in a cabal.project
14:03:29 <mpickering> I will try that
14:03:38 <mpickering> It should work thinking about it
14:04:43 <mpickering> GHC doesn't really know the difference after all
14:06:25 <koz_> % :t ($>)
14:06:25 <yahb> koz_: Functor f => f a -> b -> f b
14:07:03 <koz_> % :info ($>)
14:07:03 <yahb> koz_: ($>) :: Functor f => f a -> b -> f b -- Defined in `Data.Functor'; infixl 4 $>
14:34:40 <maerwald> I'm trying to hide a single command in optparse-applicative, but it's hiding *all* commands then. Seems it chains different than thought
14:49:47 <johnw> maerwald: are you an expert on static Haskell binaries for macOS?
14:50:03 <maerwald> That's easy: give up.
14:50:06 <maerwald> :D
14:50:11 <johnw> how close can I expect to get?
14:50:16 <johnw> I'm down to 3 libraries left
14:50:36 <johnw> I wonder if I switch to integer-simple, can I get rid of the gmp dependency...
14:50:39 <maerwald> bundles sources and create something like this: https://hackage.haskell.org/package/lzma-clib
14:51:23 <maerwald> Then https://github.com/haskell-hvr/lzma/pull/22/commits/d86e9e1e9386cf2b4d27cfa01a47b3f99bd639f9
14:52:08 <maerwald> Doing partially static linking isn't supported by cabal and will require you to do weird stuff with ghc-options
14:52:28 <maerwald> there was a thread somewhere about that
15:02:45 * hackage tasty-dejafu 2.0.0.2 - Deja Fu support for the Tasty test framework.  https://hackage.haskell.org/package/tasty-dejafu-2.0.0.2 (barrucadu)
15:04:45 * hackage di-polysemy 0.1.2.0 - DI logger wrapped for Polysemy  https://hackage.haskell.org/package/di-polysemy-0.1.2.0 (nitros12)
15:12:27 <jumper149> Is it possible to create a data type that is a sum type of all members of a specific class?
15:13:42 <koz_> jumper149: What happens if someone writes a new instance of this class?
15:14:44 <jumper149> koz_: There wouldn't be a constructor for that one I guess
15:15:02 <koz_> jumper149: Well, then it's _not_ a sum type of 'all members of a specific class'?
15:15:13 <koz_> I guess a better question is 'what's your goal here'?
15:17:16 <jumper149> I have a class and I want to be able to have a wrapping data type so I can give it toJSON and fromJSON instances.
15:17:41 <koz_> So you have a situation of the form 'instance (Foo a) => FromJSON a where ...'?
15:18:23 <koz_> Write a newtype Bar, then something like 'instance (Foo a) => FromJSON (Bar a) where ..'.
15:18:28 <koz_> Analogous for ToJSON.
15:18:34 <koz_> Then you can just use DerivingVia where needed.
15:22:02 <jumper149> koz_: No I don't think that is what I have. It's just that I need a sum type so that the client can pick one and then the server will respond accordingly. And it just so happens that this sum type will be a wrapper to all instances of a class.
15:23:02 <koz_> So you're sending the server some kind of message. Is it _really_ the case that the content of the message is 'a value of any type whatsoever'?
15:23:09 <koz_> (modulo being an instance of whatever class)
15:23:17 <koz_> That seems more than a tad unlikely.
15:23:57 <jumper149> I think it might come down to the way servant does the API.
15:24:18 <koz_> jumper149: Then I'll leave it to someone who understands servant.
15:24:25 <koz_> (since I don't)
15:24:37 <jumper149> Still ty for helping :)
15:25:02 <jumper149> I probably shouldnt focus on the class thing too hard and just create the sum type by hand^^
15:25:40 <jumper149> Then I can also make sure whether its actually isomorphic to everything in the class
15:31:16 * hackage concurrency 1.10.0.0 - Typeclasses, functions, and data types for concurrency and STM.  https://hackage.haskell.org/package/concurrency-1.10.0.0 (barrucadu)
15:32:15 * hackage tasty-dejafu 2.0.0.3, hunit-dejafu 2.0.0.2, dejafu 2.2.0.0 (barrucadu)
15:45:45 * hackage serialise 0.2.3.0 - A binary serialisation library for Haskell values.  https://hackage.haskell.org/package/serialise-0.2.3.0 (BenGamari)
15:46:45 * hackage cborg 0.2.3.0 - Concise Binary Object Representation (CBOR)  https://hackage.haskell.org/package/cborg-0.2.3.0 (BenGamari)
16:08:23 <jumper149> Is there a nice vector/array data type with it's length given on type level with a Nat from TypeLits?
16:14:32 <solonarv> jumper149: there are two or three libraries with that, yes
16:14:40 <solonarv> I can't remember which one to recommend thoug
16:14:54 <jumper149> Argh do you atleast recall the names?
16:15:08 <jumper149> Google mostly leads me to blogs about type level programming :p
16:15:15 * hackage cpkg 0.2.5.4 - Build tool for C  https://hackage.haskell.org/package/cpkg-0.2.5.4 (vmchale)
16:15:22 <solonarv> oh don't google, use hackage search
16:15:32 <solonarv> a good search term shuld be: sized vector
16:16:06 <solonarv> @hackage vector-sized -- this one, probably
16:16:06 <lambdabot> http://hackage.haskell.org/package/vector-sized -- this one, probably
16:16:15 * hackage ttc 0.2.1.0 - Textual Type Classes  https://hackage.haskell.org/package/ttc-0.2.1.0 (TravisCardwell)
16:16:37 <solonarv> it is a wrapper over the 'vector' package
16:17:07 <jumper149> solonarv: That actually sounds awesome as it will be a drop in for Vector :)))
17:25:52 <koz_> Is there some tool to generate a Haskell project's import graph?
17:26:12 <koz_> jumper149: As a co-maintainer of vector-sized, I can field your question.
17:26:20 <koz_> (or any related ones)
17:28:51 <hpc> koz_: if it was the other meaning of vector, that'd be an amazing pun
17:29:06 <koz_> hpc: If only.
17:29:16 <koz_> Press F to pay respects for the humour that could have been.
17:29:51 <dmj`> koz_: graphmod maybe?
17:29:54 <dmj`> @package graphmod
17:29:54 <lambdabot> http://hackage.haskell.org/package/graphmod
17:30:01 <koz_> dmj`: Thanks, will investigate.
17:32:47 <koz_> dmj`: Seems liek what I want.
17:33:46 <dmj`> koz_: nice
17:33:59 <slack1256> Is there a standard way to find documentation (haddock's html) of installed packages?
17:34:53 <Axman6> If you're using stack, you can use stack haddock --open
17:35:05 <koz_> dmj`: I guess if we have an edge from u to v, it means u depends on v?
17:35:30 <slack1256> Nvm, ghc-pkg describe has the location of the htmls.
17:36:15 <slack1256> Axman6: Woah, I have a haddock command. I thought it only served to create the documentation, not to search it.
17:38:41 <slack1256> Axman6: I understood incorrectly, it is `stack haddock --open` which does the magic, not `haddock --open`.
17:39:14 <jackdk> I use `firefox $(cabal v2-haddock | tail -n 1)`
17:40:29 <koz_> jackdk: Oh, that's really clever.
17:41:24 <jumper149> jackdk: I was actually just wondering about that earlier ++
17:49:24 <slack1256> I am now using 'ghc describe <package-name> | gawk '/haddock-html/ { print $2 "/index.html" }' | xargs firefox'
17:53:46 * hackage monadic-recursion-schemes 0.1.0.0 - Recursion Schemes for Monadic version.  https://hackage.haskell.org/package/monadic-recursion-schemes-0.1.0.0 (KatsutoshiItoh)
17:58:17 <solonarv> make it more portable with s/firefox/xdg-open/ !
17:58:49 <koz_> And put it in a script with a name.
18:00:43 <koz_> :t iterateN
18:00:46 <lambdabot> error:
18:00:46 <lambdabot>     â€¢ Variable not in scope: iterateN
18:00:46 <lambdabot>     â€¢ Perhaps you meant one of these:
18:00:59 <koz_> :t foldM
18:01:00 <lambdabot> (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m b
18:04:49 <jumper149> Do I need some extension to use these type level functions https://hackage.haskell.org/package/base-4.14.0.0/docs/GHC-TypeLits.html#g:3 ?
18:07:45 <jumper149> Im already using DataKinds, TypeFamilies and TypeOperators. I guess the problem lies elsewhere
18:15:07 <koz_> Am I silly for wanting something like (Monad m) => (s -> m a) -> StateT s m a?
18:15:13 <koz_> Does such a thing exist?
18:15:29 <koz_> jumper149: What's the nature of your problem?
18:15:49 <jumper149> I want to have a data contructor like:
18:16:40 <jumper149> data A (n :: Nat) = A (VS.Vector (n * n) Int)
18:17:03 <jumper149> But GHC doesn't let me multiply my Nats
18:17:07 <koz_> You wanna import GHC.TypeNats.
18:17:28 <jumper149> I have TypeLits imported,isn't that enough?
18:17:29 <koz_> Something like 'import GHC.TypeNats (type (*), Nat)' should do.
18:17:39 <koz_> What version of GHC are you on?
18:18:13 <jumper149> koz_: 8.6.5
18:18:23 <koz_> jumper149: Try changing to GHC.TypeNats?
18:18:31 <koz_> If that still gives you issues, pastebin the exact error.
18:23:07 <jumper149> koz_: TypeNats doesn't make a difference. Explicitly telling to import (type (*), Nat) ended with: parse error on `import ...(*)...`.
18:23:34 <koz_> You have TypeOperators imported?
18:23:36 <jumper149> I can import and use (+) though
18:23:37 <koz_> s/imported/on/
18:23:41 <koz_> Ah.
18:23:50 <koz_> {-# LANGUAGE NoStarIsType #-}
18:23:52 <koz_> Try that.
18:24:36 <jumper149> Thank you! Thats looking better :) 
18:25:00 <jumper149> {-# LANGUAGE Koz_IsStart #-}
18:25:05 <jumper149> Star*
18:26:03 <koz_> Lol, thanks.
18:26:21 <koz_> It's a bit of a nuisance, because up until relatively recently, '*' indicated a kind.
18:26:29 <koz_> But in reality, kinds and types aren't distinct things.
18:26:34 <solonarv> koz_: lift . (=<< get) ?
18:26:41 <koz_> SO without that on, GHC thinks 'n * n' is actually a type.
18:26:48 <solonarv> or something like that
18:26:52 <koz_> Or rather, it's _not_ a type operator.
18:26:59 <koz_> solonarv: Yeah, I ended up writing this exact thing.
18:27:10 <koz_> I have no clue why it's not provided.
18:27:15 <koz_> (either in transformers or mtl)
18:35:15 * hackage magma 0.5.0.0 - magma is an algebraic structure.  https://hackage.haskell.org/package/magma-0.5.0.0 (KatsutoshiItoh)
18:38:27 <jumper149> Is it right that GHC can't derive `KnownNat (n * n)`?
18:39:28 <jumper149> with `KnownNat n =>` of course
18:39:30 <koz_> Yes.
18:39:34 <koz_> You need the Clash plugins.
18:39:40 <koz_> GHC knows nothing of arithmetic.
18:39:56 <koz_> You want this: http://hackage.haskell.org/package/ghc-typelits-knownnat
18:40:02 <koz_> http://hackage.haskell.org/package/ghc-typelits-natnormalise
18:40:07 <koz_> ^ this could also help
18:40:15 * hackage strict-tuple-lens 0.1.0.0 - Optics for the `strict-tuple` library  https://hackage.haskell.org/package/strict-tuple-lens-0.1.0.0 (topos)
18:40:19 <koz_> The docs describe how to enable them.
18:40:19 <c_wraith> GHC can't even derive (m ~ n) => ((m + 1) ~ (n + 1)) 
18:40:34 <koz_> (stick it in a {-# ... #-} at the top of the relevant file)
18:40:40 <koz_> c_wraith: Yep, GHC dunnos how to count.
18:40:44 <koz_> GHC is a four-year-old.
18:41:12 <c_wraith> pretty sure a lot of 4 year olds can manage that.  maybe 2?
18:41:27 <koz_> c_wraith: GHC is a 2^n-year-old for small n.
18:42:25 <jumper149> I still have to list it as a dependency for cabal though right?
18:42:34 <koz_> jumper149: Yes.
18:42:46 <koz_> They're typechecker plugins, but you gotta build them.
18:45:29 <jumper149> ufffffffffffffff, ghcjs doesn't like it :(
18:45:37 <koz_> jumper149: ... oh yeah, I doubt that it would.
18:45:58 <koz_> I'm pretty sure the Clash plugins are _not_ tested with ghcjs.
18:46:13 <wavemode_> dependent types AND ghcjs... you really like living on the bleeding edge
18:46:37 <koz_> wavemode_: Emphasis on _bleeding_.
18:46:39 <jumper149> wavemode_: It's a project for fun and learning so I guess it's not too bad like this
18:46:53 <koz_> jumper149: Yeah, I'd say you won't get terribly far with ghcjs in combo with that.
18:46:59 <koz_> I'm not even sure if anyone's _tried_.
18:48:11 <jumper149> Yeah I also don't think that I'm gonna try that.
18:48:54 <koz_> I'm fairly familiar with how to wrangle this sort of thing using regular GHC.
18:49:06 <koz_> (heck, the entire finitary library is basically an exercise in this)
18:49:20 <koz_> (including probably the _weirdest_ type applications I've ever had to do)
18:57:15 * hackage stable-marriage 0.1.3.0 - algorithms around stable marriage  https://hackage.haskell.org/package/stable-marriage-0.1.3.0 (KatsutoshiItoh)
18:59:57 <zeta_0> what do the empty lists mean in this elm code? http://dpaste.com/15HFAVM
19:00:20 <koz_> zeta_0: Maybe asking in #elm might be more helpful?
19:01:05 <zeta_0> koz_: i already asked this in #elm, but no one has responded yet, so i figured i'd give it a try here
19:01:10 <jumper149> zeta_0: Looks like arguments to the html keywords go there
19:02:36 <jumper149> like `class` for example. You should look up where the functions are from though
19:02:41 <MarcelineVQ> I would assume it's an attributes list, is there elm docs to check?
19:05:00 <wavemode_> that code is just constructing HTML. one of the lists is attributes, the other is the element's contents iirc
19:05:58 <zeta_0> ya, i'm not sure, but i love how elm generates all the html/css/js , and it's a very user friendly language
19:07:20 <zeta_0> i guess no one hangs out in #elm, that channel looks dead
19:11:45 * hackage di-polysemy 0.1.3.0 - DI logger wrapped for Polysemy  https://hackage.haskell.org/package/di-polysemy-0.1.3.0 (nitros12)
19:20:01 <Axman6> zeta_0: how long have you been haning out in there? #haskell is one of the largest channel s on freenode, so it is unusually busy
19:26:08 <zeta_0> Axman6: i was talking about #elm, not #haskell
19:27:08 <Axman6> that's what I mean
19:27:21 <Axman6> it's not a very big channel. "dead" is relative to the size of the channel
19:28:32 <zeta_0> oh, i misunderstood what you said, agreed
20:02:16 * hackage incremental-parser 0.4.0.2 - Generic parser library capable of providing partial results from partial input.  https://hackage.haskell.org/package/incremental-parser-0.4.0.2 (MarioBlazevic)
20:20:31 <hololeap> Does it seem odd to anyone else that #haskell is one of the largest channels on freenode considering it's not that popular of a language?
20:20:57 <dsal> irc is for smart people, and only smart people use haskell.
20:21:18 <remexre> is there a way to make a newtype that uses the stock derive for a type that has custom instances?
20:21:25 <MarcelineVQ> the gateway drug is unavoidably the most popular
20:21:48 <dsal> I wonder if it's like TAOCP.  Everyone has it on their bookshelf, because, obviously, but most people can't read it.
20:22:09 <dsal> remexre: What do you mean 'stock derive' ?
20:22:23 <dsal> Like DerivingVia?
20:22:33 <remexre> like I have a Term type, and want == on it to be modulo alpha-equivalence; but I want newtype LiteralEqTerm = LiteralEqTerm Term, where == on it is the instance that deriving (Eq) on Term would've made
20:23:11 <dsal> Or GeneralizedNewtypeDeriving?
20:23:42 <remexre> definitely not GeneralizedNewtypeDeriving; maybe DerivingVia, need to look it up
20:24:39 <remexre> I don't think DerivingVia does what I want
20:25:10 <remexre> I guess I want like, newtype LiteralEqTerm = LiteralEqTerm Term deriving stock Eq via Term
20:25:26 <dsal> I guess I don't know what 'stock Eq' means.
20:25:44 <remexre> ot
20:25:46 <remexre> it's from DerivingStrategies *
20:25:55 <dmwit> remexre: No, it has to go the other way.
20:26:13 <dmwit> remexre: Term has to have the stock-derived instance, and your newtype may have the custom alpha-equivalence hand-written instance.
20:26:15 <dsal> Ooh, I see.
20:26:38 <remexre> hm, unfortunate
20:26:41 <dmwit> remexre: N.B. I am not saying it is technically difficult or anything like that, just that there currently isn't a mechanism to do it the way you want to.
20:27:10 <dmwit> remexre: Of course, you can always write the instance yourself... or ask -ddump-deriv to write it for you and copy-and-paste...
20:27:46 <remexre> I might try building on Data.Eq.Deriving instead, and fall back to -ddump-deriv if that fails
20:33:38 <remexre> hm, types should be in the env for template haskell purposes as soon as they've been declared, right?
20:34:20 <heatsink> Template haskell splices can't access things that are defined in the same file
20:34:51 <remexre> oh really? ugh
20:35:33 <heatsink> Actually, there are two things
20:35:35 <remexre> wait, then how does deriving-compat work, like, at all?
20:36:00 <heatsink> It can refer to names that are defined in the same file
20:36:08 <remexre> in this case it does, yeah
20:36:27 <heatsink> Splices can't execute code that is defined in the same file
20:36:38 <remexre> yeah, this is for a type
20:37:10 <remexre> I declare the type Formula, I want to use makeEq :: Name -> Q Exp, so I do foo = $(makeEq ''Formula)
20:37:14 <remexre> and I get â€˜Formulaâ€™ is not in the type environment at a reify
20:37:54 <heatsink> It should be accessible
20:41:27 <remexre> https://git.sr.ht/~remexre/stahlos/tree/9dd3f90d43e7546b09b1bada11adb7692420796b/src/compiler-bootstrap/src/Language/Stahl/Core/Formula.hs#L58 is where it's not
20:49:46 * hackage dbus 1.2.15.1 - A client library for the D-Bus IPC system.  https://hackage.haskell.org/package/dbus-1.2.15.1 (blaze)
21:02:54 <zeta_0> dsal: what do the empty lists mean here in this elm code? http://dpaste.com/15HFAVM
21:03:39 <remexre> zeta_0: attributes
21:04:08 <remexre> https://package.elm-lang.org/packages/elm/html/latest/Html#div (also this is #haskell, not #elm, just fyi)
21:04:59 <Axman6> nd that question was already answered over an hour ago, with the same answer
21:05:39 <zeta_0> remexre: thanks, and apologies, no one responded in #elm
21:06:07 <zeta_0> Axman6: my bad i must of missed it, but it makes sense now, still getting used to the new syntax
21:08:40 <dsal> That's the same syntax as Haskell. :)
21:10:45 * hackage calamity 0.1.6.1 - A library for writing discord bots  https://hackage.haskell.org/package/calamity-0.1.6.1 (nitros12)
21:10:56 <zeta_0> huh, i've never seen that before, but anyways, so far i really like elm
21:12:29 <zeta_0> have anyone of you taken a look at this? https://www.reddit.com/r/haskell/comments/gghnuw/the_state_of_haskell_ides/
21:12:35 <remexre> yup
21:13:04 <zeta_0> i'm glad haskell's tooling is improving
21:30:14 <suzu_> same
21:30:18 <suzu_> haskell tooling is a big deal to me
21:39:13 <Axman6> Time to contribute to the haskell IDE stuff then!
21:39:57 <yubrshen> For
21:40:41 <yubrshen>  me, my defauld IDE will be always emacs, as I've invested already enough in emacs.
21:42:07 <yubrshen> The overall return on investment matters a lot, and also the effectiveness of workflow rather than individual features is more critical.
22:36:58 <suzu_> i recently left emacs for vscode
22:37:12 <suzu_> i just sorta got tired of working on my editor
22:37:36 <suzu_> and wanted to try out some new editors to believe that im still making a good choice with emacs
22:37:46 <suzu_> i tried vscode and sorta just kept using it
22:37:48 <suzu_> lol
22:48:08 <rotaerk> pfft, haskell tooling is perfect. PERFECT!
22:48:32 <rotaerk> well not really ... but good enough for me in practicce
22:57:15 <suppi> It would be really nice if ghcide or some other executable would ship with ghc so that tools can work with it without having the user install additional things and keep them in sync
22:57:42 <suppi> tools -> editors
22:59:00 <suppi> that was my biggest issue with intero, i had to install an executable for each project i was working on and keep them synced with the ghc version
22:59:50 <rotaerk> I just use an editor without any language-specific features except syntax coloring, and then I use ghcid; got fed up with trying to get intero/dante/etc to work consistently
22:59:51 <Axman6> the haskell-ide-engine solution to that is to compile one version og itself for each compiler you used, because it's not as simple as shipping ghc with itself
22:59:55 <rotaerk> haven't tried ghcide though
22:59:59 <Axman6> you need the version of ghc the project is using
23:01:43 <suppi> that's too much of a hassle for me
23:02:00 <suppi> I use dante because it just uses ghci
23:04:02 <rotaerk> I think I'll ttry out haskell-lsp when it's ready
23:04:43 <koz_> I'd be keen to try it, depending on whether it works with Vim.
23:04:51 <koz_> (and/or 'as such')
23:33:43 <freeside> today, i resume my pandoc compilation! on a new machine with 16 gigs of ram instead of 4. let's see what happens.
23:35:04 <freeside> [ 61 of 158] Compiling Text.Pandoc.Lua.Marshaling.CommonState
23:35:51 <freeside> and already it's blown past 4 gigs!
23:35:52 <freeside>   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
23:35:53 <freeside> 13523 ec2-user  20   0 1025.3g   5.8g 145936 S 357.5 37.3   9:58.55 ghc
23:36:32 <freeside> it is impressive how much RAM is needed to compile a program whose job is, ultimately, to read one kind of text file and write another kind of text file
23:37:16 <freeside> i wonder if it's due to generics and aeson
23:39:01 <Axman6> Pandoc has a lot of data types IIRC
23:39:09 <Axman6> and, a lot of code in general
23:40:09 <freeside> the 1990s perl programmer in me is shaking head slightly
23:40:45 * hackage bugsnag-hs 0.1.0.1 - A Bugsnag client for Haskell.  https://hackage.haskell.org/package/bugsnag-hs-0.1.0.1 (JasperWoudenberg)
23:43:16 * hackage reanimate 0.3.0.0 - Animation library based on SVGs.  https://hackage.haskell.org/package/reanimate-0.3.0.0 (DavidHimmelstrup)
23:52:00 <freeside> aaaand pandoc built! yay! but pandoc-crossref is now not building! i think i need to hire someone to help do this kind of package management sysadmin :/
23:52:30 <freeside>  Could not find module â€˜Text.Pandoc.Classâ€™  There are files missing in the â€˜pandoc-2.9.1.1â€™ package,
23:52:44 <[exa]> freeside: pandoc is huge by design, is something forcing you to use it?
23:53:53 <[exa]> anyway Text.Pandoc.Class should exist in any recent pandoc, certainly in >=2.9
23:54:20 <[exa]> oh, missing files, wow
23:54:30 <freeside> well, you know what george mallory said about everest.
23:54:51 <freeside> but also because i am thinking about extending pandoc with support for outline lists, by way of a filter.
23:55:20 <freeside> on a more teleological level, the answer to your question is that i am well on my way to reinventing pandoc, because i need to read markdown-like input and write to docx and html and pdf
23:56:28 <freeside> and i would rather not reinvent a wheel that already in size and scope resembles the roving city-states from "the biggest box-office bomb of 2018", /Mortal Engines/
23:57:45 * hackage junit-xml 0.1.0.1 - Producing JUnit-style XML test reports.  https://hackage.haskell.org/package/junit-xml-0.1.0.1 (JasperWoudenberg)
23:58:56 <freeside> before i admit defeat and cabal install the filter, i want to try a build from source, because i might be writing just such a filter anyway
23:59:50 <MarcelineVQ> files missing usually means you're on arch linux and you've used pacman installed haskell packages
