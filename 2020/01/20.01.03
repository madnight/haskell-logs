00:04:29 <p0a> so you're saying that specifying the implementation of `return' etc picks an object M and natural trans. η, μ as above
00:05:44 <p0a> I'm a little lost but anyway thank you for explaining this. I will keep it in mind as I learn more about monads
00:16:32 <olligobber> p0a, yeah, return is eta, and join is mu
00:18:00 <olligobber> and the monad laws are somehow equivalent to the associativity of >=> and identity rules on return
00:19:00 <p0a> olligobber: thank you 
00:20:03 <p0a> :t join
00:20:05 <lambdabot> Monad m => m (m a) -> m a
00:20:08 <dminuoso_> p0a: You can make the diagrams earlier a bit more explicit in Haskell by picking :.: 
00:20:26 <dminuoso_> Then `join :: Monad m => m :.: m ~> m`
00:20:28 <p0a> What do you mean :.: dminuoso_ ?
00:20:37 <dminuoso_> p0a: It's type level composition
00:20:53 <dminuoso_> So `(T :.: T) a` is isomorphic to `T (T a)`
00:21:07 <dminuoso_> Just like `(f . f) a` is equivalent to `f (f a)`
00:21:47 <p0a> well I would have to think about it sometime after I understand more about monads 
00:22:04 <p0a> Because I don't see what M⊗M→M has to do with m (m a) → m a
00:22:25 <p0a> oh wait ⊗ = composition
00:22:32 <dminuoso_> p0a: Right. 
00:22:57 <p0a> I will still have to think about this later lol
00:23:42 <dminuoso_> p0a: this is a haskellized version of the commuting diagrams: https://gist.github.com/dminuoso/d5ab4ba5d8a5142dde9f4d4c736e3ecb
00:25:15 <iqubic> dminuoso_: What is the type of (:.:)?
00:25:25 <dminuoso_> iqubic: It's just an infix Compose
00:25:38 <iqubic> Ah. I see.
00:25:41 <dminuoso_> % import GHC.Generics
00:25:41 <yahb> dminuoso_: 
00:25:44 <dminuoso_> % :i (:.:)
00:25:45 <yahb> dminuoso_: type role (:.:) representational nominal nominal; newtype (:.:) (f :: k2 -> *) (g :: k1 -> k2) (p :: k1) = Comp1 {unComp1 :: f (g p)}; -- Defined in `GHC.Generics'; infixr 7 :.:; instance (Alternative f, Applicative g) => Alternative (f :.: g) -- Defined in `GHC.Generics'; instance (Applicative f, Applicative g) => Applicative (f :.: g) -- Defined in `GHC.Generics'; instance forall k2 (f :: k2 -> *) 
00:25:53 <p0a> you probably need higher-kinded types haskell or whatnot 
00:26:00 <iqubic> Alright that's verbose, but that's fine.
00:26:14 <p0a> iqubic: http://dev.stephendiehl.com/fun/001_basics.html#higher-kinded-types
00:26:17 <iqubic> p0a: Haskell supports higher kinded types out of the box.
00:26:25 <p0a> yeah you are right 
00:27:00 <dminuoso_> iqubic: newtype (:.:) f g a = Comp { unComp :: f (g a) }
00:27:42 <p0a> dminuoso_: thanks for the github link
00:27:50 <iqubic> dminuoso_: I knew what you were talking about as soon as you said infix Compose.
00:28:00 <iqubic> I know what the Compose newtype does.
00:28:13 <dminuoso_> Ah fair
00:29:27 <iqubic> dminuoso_: Have you seen Chris Penner's new Optics book. I found it really enlightening.
00:29:39 <dminuoso_> No.
00:30:09 <iqubic> https://leanpub.com/optics-by-example/ I know it's a bit expensive, but I love this book.
00:31:47 <iqubic> I just remember that the first time I ever used lenses was when you walked me through a series of lense exercises.
00:33:05 <iqubic> dminuoso_: If I recall correctly you originally got that series of exercises from Ertes.
00:33:17 <iqubic> It's a shame he's no longer around to teach us.
00:35:00 <p0a> How did you get to optics from haskell? :P
00:35:30 <iqubic> https://hackage.haskell.org/package/lens-4.18.1
00:35:36 <iqubic> With this library.
00:35:41 <iqubic> It's an awesome library.
00:36:02 <dminuoso_> https://hackage.haskell.org/package/optics deserves a mention as well.. :)
00:36:17 <iqubic> But if you want to learn about lenses, start here instead: https://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html
00:36:30 <p0a> sorry I assumed lenses are about physics
00:36:33 <MarcelineVQ> honorable mention for unreadable source code
00:36:46 <iqubic> dminuoso_: which library do you like better?
00:37:03 <dminuoso_> MarcelineVQ: Unreadable source code?
00:37:26 <MarcelineVQ> optics implementation is really hard to follow for me
00:37:51 <dminuoso_> MarcelineVQ: Any lens is any easier? ..
00:37:51 <MarcelineVQ> its use seems straightforward though which is good
00:38:30 <dminuoso_> Im a bit unsure what you are referring to though. Which part did you find particularly hard to read?
00:38:33 <mniip> olligobber, I have uhh one sec
00:39:05 <iqubic> dminuoso_: which library do you like better, Optics or Lens?
00:40:03 <mniip> olligobber, https://i.imgur.com/QUfBPmz.png
00:40:33 <dminuoso_> iqubic: I'd personally prefer optics because type signatures become readable, GHC diagnostics become readable, and you can sensibly write down type signatures for optics or composed optics trivially.
00:40:43 <dminuoso_> Which is pretty much the point of the library.
00:40:47 <mniip> kleisli category laws from the monad laws
00:41:30 <iqubic> dminuoso_: I see. Makes senes.
00:42:22 <dminuoso_> iqubic: (And optics uses profunctors, so you get things like AffineTraversal)
00:42:40 <dminuoso_> But that is really just an implementation detail
00:43:14 <dminuoso_> Who is responsible for yahb here?
00:43:18 <mniip> me
00:43:29 <dibblego> I have yet to find a use-case for AffineTraversal
00:43:39 <mniip> dibblego, NonEmpty?
00:43:58 <dibblego> where neither Functor nor Traversal are sufficient
00:44:13 <dibblego> and use-case is "useful operation on AffineTraversal"
00:44:30 <mniip> affine is 1 or more, right?
00:44:32 <dibblego> er, Functor nor Applicative
00:44:37 <dminuoso_> mniip: Ah. Is there a process for recommending which libraries it ships? It would be wonderful it optics was loadable :)
00:44:37 <dibblego> no, affine is 0 or 1
00:44:42 <mniip> ah
00:44:43 <dibblego> think Traversal that does not use (<*>)
00:45:20 <dibblego> _Just is affine because it uses fmap/pure
00:45:27 <mniip> dminuoso_, does it define operators that are in conflict with lens?
00:45:48 <dibblego> (and not (<*>))
00:46:28 <mniip> dibblego, maybe sometimes you want to ensure you're not losing data with sth like ^?
00:46:54 <dibblego> yeah, but (^?) doesn't give you anything because you're not losing data (so which operation does?)
00:47:10 <mniip> you are throwing away data with ^?
00:47:18 <mniip> it's using the First monoid
00:47:30 <dibblego> yes, but "so what now?"
00:47:41 <MarcelineVQ> dminuoso_: I just had a hard time understanding what was going on in the lib source code, I'm probably being too harsh currently
00:47:51 <dibblego> which useful operation has AffineTraversal, where Functor will not type-check?
00:48:19 <mniip> suppose you have some field deep in a structure buried under a stack of Maybes
00:48:32 <mniip> you want to preserve the invariant that this field cannot have more than one slot
00:48:43 <dibblego> yes, but I'm still not coming up with, "gee lucky I have AffineTraversal"
00:48:54 <dibblego> which operation will make me say that?
00:49:47 <dibblego> so I have T ~ (A, Maybe B) and there is Traversal' T B
00:49:58 <dibblego> I can do all the Traversaly things now
00:50:05 <dibblego> but what things am I missing because it is affine?
00:50:35 <mniip> you can't accidentally read a B from a list of T's
00:50:55 <dibblego> which operation do you mean here? (read)
00:51:03 <mniip> ^?
00:51:27 <dibblego> how will that give me a B?
00:51:35 <mniip> that will give you a Maybe B
00:51:38 <dibblego> right
00:51:51 <mniip> I'm saying if there was a version of ^? that only accepted affine traversals
00:52:09 <dibblego> would its type change?
00:52:17 <mniip> in lens? yes
00:52:24 <dibblego> what would it be?
00:52:31 <dminuoso_> It'd incur an additional Pointed constraint I think?
00:52:45 <dibblego> would it still return Maybe ?
00:52:49 <dminuoso_> % :t (^?)
00:52:49 <yahb> dminuoso_: s -> Getting (First a) s a -> Maybe a
00:53:55 <mniip> s -> Getting (Maybe a) s a -> Maybe a
00:54:05 <mniip> the difference being, Maybe's Monoid requires Semigroup a
00:54:26 <mniip> which tbh is not strictly better...
00:54:29 <mniip> but it's different for sure
00:54:43 <mniip> you could have a non-monoidal Maybe alias
00:54:46 <mniip> and use that
00:55:16 <MarcelineVQ> ski: wake
01:10:08 <p0a> so when I was writing php back in the day 
01:10:22 <p0a> it'd be a file.php you'd visit. The philosophy now is to write dispatchers?
01:10:49 <p0a> using happstack, for example? The same seems to be true with hunchentoot (in common lisp)
01:11:25 <mniip> the philosophy was that a webserver would serve a directory, and special files in that directory would do special things, e.g. launch CGI scripts
01:11:33 <mniip> apache still does this to this day
01:11:44 <mniip> and that is fine for a mostly static website
01:12:17 <mniip> for a mostly dynamic website you have to use the handler approach your configuration maps every URL to some action
01:12:39 <mniip> the action can still be going to a directory to read a file, but you wouldn't use that to launch scripts
01:12:42 <dminuoso_> I reject the notion that this has anything to do with "static" or "dynamic" websites.
01:12:46 <mniip> well yes
01:13:33 <mniip> you can serve a super static website with the nginx approach
01:13:44 <mniip> but serving a super dynamic website with the apache approach will lead to issues
01:13:55 <mniip> namely performance
01:14:14 <p0a> so happstack/etc replace apache?
01:14:23 <mniip> (I am not really qualified to talk about webservers)
01:14:23 <p0a> doesn't that mean they may be more insecure/less optimized?
01:14:51 <dminuoso_> p0a: It's the other way around.
01:15:20 <p0a> dminuoso_: websites like google/facebook, what webservers do they use?
01:15:24 <dminuoso_> p0a: If a software can do a gazillion things, there's a gazillion potential security flaws and things to consider. If a software does only one thing well, it's generally much easier to protect it.
01:16:02 <p0a> dminuoso_: so you'd say the happstack approach is fine for a website that serves 1000s of users a day?
01:16:17 <dminuoso_> It's probably fine for a million users a day too.
01:16:36 <p0a> okay, thank you. I just have never seen it in use 
01:16:46 <a1c`> :t GT
01:16:46 <a1c`> what is GT and LT?
01:16:47 <lambdabot> Ordering
01:16:48 <refusenick> Will Haskell 2020's new features remove the need for GHC extensions in day-to-day programming?
01:17:00 <p0a> greater than/less than
01:17:00 <dminuoso_> a1c`: They are nullary data constuctor from the data type Ordering
01:17:07 <dminuoso_> a1c`: data Ordering = GT | LT | EQ
01:17:29 <mniip> refusenick, probably not
01:17:42 <refusenick> mniip: oh :(
01:17:53 <dminuoso_> mniip: Sure, it has performance considerations, but that's largely not tied to whether a website is dynamic or static.
01:18:01 <a1c`> dminuoso_: ok
01:18:03 <mniip> the haskell standard is in a really rough spot
01:18:25 <a1c`> I thought Ordering is a type class
01:18:28 <mniip> either A) they standardize a bunch of extensions that are nigh impossible to implement which would make GHC the only standard compiler
01:18:42 <mniip> or B) they don't standardize commonly used extensions so people will still be writing non-standard haskell
01:19:27 <mniip> there are a few extensions that people use on a daily basis without any regard for the complexity of the compiler implementation
01:19:40 <p0a> they might opt for standarization without requiring them for a conforming implementation
01:19:44 <refusenick> That's what I meant.
01:19:48 <p0a> i.e. optional feature
01:19:53 <Ailrun[m]> a1c`: for type class, you might want `Ord`.
01:20:08 <a1c`> @let sortGT a b = if a< b then GT else LT
01:20:09 <lambdabot>  Defined.
01:20:10 <dminuoso_> p0a: I think optional features in language specifications are an oddball
01:20:22 <a1c`> > sortBy sortGT [2,-1,4,7,3,3]
01:20:24 <lambdabot>  [7,4,3,3,2,-1]
01:20:54 <iqubic> a1c`: You might like to use comapare there.
01:21:02 <Ailrun[m]> :t compare
01:21:03 <lambdabot> Ord a => a -> a -> Ordering
01:21:05 <dminuoso_> p0a: You might as well not specify it at all, because whether or not a conforming implementation can run your code still depends on the implementation.
01:21:15 <iqubic> > sortBy compare [2,-1,4,7,3,3]
01:21:18 <lambdabot>  [-1,2,3,3,4,7]
01:21:38 <phadej> dminuoso_: you may specify that if X exists, it should be like specified
01:21:43 <iqubic> > sortBy (compare . Down) [2,-1,4,7,3,3]
01:21:45 <lambdabot>  error:
01:21:46 <lambdabot>      • Occurs check: cannot construct the infinite type: a ~ Down a
01:21:46 <lambdabot>        Expected type: Down a -> Down a -> Ordering
01:21:50 <phadej> and that's better then no spec at all
01:21:55 <iqubic> damn.
01:22:01 <Ailrun[m]> use on
01:22:03 <mniip> the extensions I have in mind are RankNTypes, GADTs, TypeFamilies
01:22:10 <dminuoso_> phadej: So the semantics are clearly defined at least?
01:22:12 <a1c`> iqubic: Ailrun[m] sort is equal to sortBY ?
01:22:33 <mniip> Haskell98/2010 makes almost no requirements regarding the internal semantics of the compiler
01:22:43 <iqubic> I use OverloadedStrings all the time.
01:22:53 <refusenick> Stuff like higher-order dependent types aren't on the table, I'd guess, but FlexibleContexts and EmptyCase seem like a reasonable defaults to standardize on so I'm not spamming them atop every file.
01:23:02 <Ailrun[m]> no, `sortGT` is simular with `compare`
01:23:07 <mniip> the three I've listed almost exclusively require pretty complicated constraint solving in System FC
01:23:15 <phadej> overloadedstrings is very easy to specify, but otoh it's a thing which you still may not want to have enabled by default
01:23:21 <dminuoso_> refusenick: Once you start with "reasonable defaults" you end up with a very large list of extensions that are very reasonable to some.
01:23:32 <phadej> or you can argue about thata
01:23:32 <mniip> yeah, sure, you can standardize a bunch of "quality of life" extensions
01:23:57 <a1c`> sort = sortBy compare?
01:24:05 <phadej> fwiw, with overloadedstrings one problem is instance for String
01:24:15 <dminuoso_> a1c`: Indeed. That's exactly how its defined
01:24:15 <iqubic> a1c`: That is correct.
01:24:16 <phadej> which is Char ~ a => IsString [c] atm
01:24:19 <dminuoso_> a1c`: https://hackage.haskell.org/package/base-4.12.0.0/docs/src/Data.OldList.html#sort
01:24:25 <Ailrun[m]> sortGT = compare `on` Down
01:24:27 <a1c`> ok
01:24:33 <phadej> > flip compare
01:24:35 <lambdabot>  <() -> () -> Ordering>
01:24:37 <mniip> oh also
01:24:45 <phadej> > flip compare 'x' 'z'
01:24:47 <lambdabot>  GT
01:24:49 <mniip> FlexibleContexts/FlexibleInstances
01:24:53 <mniip> considered super harmless
01:24:55 <iqubic> yes, that's it.
01:24:58 <Ailrun[m]> so what you did can also be expressed in the follwing way
01:24:59 <dminuoso_> mniip: MPTC included then.
01:25:01 <Ailrun[m]> > sortBy (compare `on` Down) [1,3,2]
01:25:03 <lambdabot>  [3,2,1]
01:25:12 <dminuoso_> You generally dont use FC/FI unless you have MPTC flinging around somewhere.
01:25:18 <mniip> yet by enabling them you require the compiler to do constraint solving and not HM(X) which could be used to implement haskell98
01:25:21 <mniip> not sure about 2010
01:25:22 <a1c`> then group = groupBy (==) I assume
01:25:38 <iqubic> Yes
01:25:50 <mniip> NoFlexibleInstances ensures that constraints can be resolved at the time of generation
01:25:55 <mniip> allowing a HM(X) style algorithm
01:26:10 <iqubic> a1c`: Instead of asking use these questions, I'd recommend looking at the actual source code.
01:26:27 <a1c`> iqubic: ok...
01:26:33 <iqubic> You could get the answers to your questions, and not annoy use.
01:26:41 <Ailrun[m]> @source group
01:26:41 <lambdabot> Unknown command, try @list
01:26:50 <Ailrun[m]> oh,
01:26:54 <Ailrun[m]> @src group
01:26:54 <lambdabot> group = groupBy (==)
01:27:04 <Ailrun[m]> a1c`: see
01:27:12 <a1c`> @src see
01:27:12 <lambdabot> Source not found. My mind is going. I can feel it.
01:27:12 <refusenick> By HM(X), you mean something like Hindley-Milner inference?
01:27:15 <mniip> yes
01:27:32 <mniip> maybe we can try and standardize GHC Core but
01:27:42 <mniip> that doesn't strike me as something extremely elegant
01:27:48 <iqubic> a1c`: You can use this lambdabot feature in a /msg so it doesn't flood us here.
01:27:52 <mniip> what not with all the coercion business
01:28:34 <a1c`> iqubic: ok
01:28:52 <mniip> you can take a look at the typing judgments https://gitlab.haskell.org/ghc/ghc/blob/master/docs%2Fcore-spec%2Fcore-spec.pdf
01:28:55 <mniip> not really an eye candy
01:29:24 <p0a> damn programming is like wizardry these days
01:29:34 <mniip> and the problem is
01:29:50 <mniip> this is likely the simplest it can be, in order to implement all these features
01:29:57 <mniip> or at least the simplest that we know so far
01:30:14 <mniip> GHC people always strived to make Core as minimal as possible
01:30:21 <mniip> and yet it's still this
01:30:42 <p0a> well it's comforting to know that those who work on these things are phd researchers
01:30:49 <phadej> specifying core won't help you to formalise e.g. FlexibleInstances
01:30:51 <p0a> and not some bloke trying to understand how beep bops
01:30:56 <phadej> there is no "instances" in Core, e.g.
01:31:04 <phadej> so you'd need to specify translation
01:31:19 <phadej> which is not that much
01:31:37 <phadej> different than from "just specifying what should be accepted or not"
01:31:58 <phadej> AFAIK C++ standard works by specifying an abstract machine though (think core), and then specifying how things are translated to it
01:32:24 * hackage gi-gtk-declarative 0.6.3 - Declarative GTK+ programming in Haskell  https://hackage.haskell.org/package/gi-gtk-declarative-0.6.3 (owickstrom)
01:32:41 <phadej> (the idea is that compiler should produce the code which works as an abstract machine would, but it can do better)
01:32:52 <p0a> phadej: I've never heard of that before 
01:32:52 <mniip> the flexible instances thing is an issue during elaboration
01:33:06 <mniip> the transformation from Haskell to Core
01:33:24 * hackage gi-gtk-declarative-app-simple 0.6.3 - Declarative GTK+ programming in Haskell in the style of Pux.  https://hackage.haskell.org/package/gi-gtk-declarative-app-simple-0.6.3 (owickstrom)
01:33:34 <mniip> by specifying Core we guide a possible implementation away from an internal implementation that would not support flexibleinstances at all
01:33:36 <p0a> anyway enough time wasted here. Thank you all for your help! Will continue tomorrow 
01:34:18 <phadej> p0a: https://corecppil.github.io/CoreCpp2019/Presentations/Bryce_C++_Execution_Model.pdf
01:34:36 <phadej> the C++ abstract machine is too close to hardware for haskell though
01:35:13 <mniip> well, system F?
01:35:22 <mniip> either that or untyped lambda calculus
01:36:03 <mniip> the former is dangerously close to what Core is
01:36:08 <phadej> Core is a bit of stuff on top of System Fomega, indeed
01:36:08 <mniip> the latter sucks
01:36:31 <phadej> except if/when dependent haskell / linear haskell is merged
01:36:44 <MarcelineVQ> core is system fc iirc, and probably more additions by now
01:36:51 <mniip> what's the progress on that
01:37:01 <phadej> linear haskell is quite close to merge, AFAIK
01:37:22 <phadej> i remember seeing some comments "please review this patch"
01:37:45 <mniip> learning new core >.>
01:38:04 <phadej> btw, in Haskell98 the dictionary translation of instances is not the only one
01:38:16 <phadej> but I guess that with RankNTypes it's the only option
01:38:21 <mniip> yup
01:38:25 <refusenick> phadej: Didn't C++11 give it an abstract machine with some relation to affine types?
01:38:59 <phadej> refusenick: my C++ knowledge is quite shallow, I don't know
01:39:21 <phadej> I'm not bored enough to actually look at the (C++) standard
01:40:28 <mniip> my last venture out into the C++ standard ended by concluding that std::memcpy is magic and cannot be implemented by hand in a non-UB manner
01:40:46 <mniip> (strict aliasing)
01:42:09 <phadej> I looked at C standard (to check what CPP should/n't do)
01:42:22 <phadej> quite fancy
01:42:38 <refusenick> C's memory model isn't the same as C++'s
01:44:04 <refusenick> When affine types are mentioned wrt C++, it's with a nod to the move semantics for smart pointers - about as far from C as C++ gets.
01:44:09 <mniip> C doesn't have "objects" and "lifetimes"
01:46:02 <siers> In groundhog (with sqlite), how can I do select queries by the primary key (that's created by default)?
02:04:04 <mniip> say I have an ambiguously typed method in a typeclass:  class C x where f :: forall y. x -> F y
02:04:14 <mniip> how do I, when writing an instance, get y in scope
02:04:26 <phadej> InstanceSigs
02:04:55 <mniip> doesn't help if it's ambiguous
02:08:21 <mniip> https://bpaste.net/raw/UPMA
02:13:48 <phadej> I'm not sure if you then have to wait for https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0155-type-lambda.rst
02:14:05 <mniip> hmm
02:14:11 <mniip> a workaround would be
02:14:51 <mniip> class C x where { f' :: forall y. Tagged y (x -> F y) }; f :: forall y. x -> F y; f = unTagged (f' @y)
02:15:00 <phadej> Tagged or Proxy# yes
02:15:20 <mniip> I would prefer Tagged as that's more transparent
02:16:18 <phadej> yes, I use Tagged myself 
02:16:41 <phadej> to avoid AllowAmbiguousTypes to begin wth :)
02:18:03 <mniip> I'm fine with AAT here
02:18:22 <mniip> it's not ambiguous once concrete types are involved
02:20:56 <mniip> hm, I could stick f into C
02:21:24 * hackage fuzzy-parse 0.1.0.0 - Tools for processing unstructured text data  https://hackage.haskell.org/package/fuzzy-parse-0.1.0.0 (voidlizard)
02:23:53 <a1c`> why there's no a find value by key function for Map k v?
02:24:00 <a1c`> https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Map-Lazy.html
02:25:27 <__monty__> a1c`: Both lookup, ! and !? do what you're asking for.
02:26:35 <a1c`> sorry, sloppy
02:27:13 <__monty__> a1c`: A simple hoogle for `Map k v -> k -> v` would also show you this.
02:29:31 <sourjyo> joined
02:40:16 <alphazer0> Welcome
03:06:04 <a1c`> we don't actually have `reduce` in Data.List?
03:06:24 <a1c`> the name I mean
03:06:52 <a1c`> I know there're foldl and foldr
03:07:00 <a1c`> but why not reduce?
03:08:37 <sm[m]> which of those would reduce be ?
03:09:36 <MarcelineVQ> a1c`: we don't care too much about names, having reduce is as easy a writing  reduce = foldl
03:10:00 <__monty__> Why have reduce? Because it's popular? Haskell's a lot older than Mapreduce.
03:10:01 <Athas> A 'reduce' should have a more restricted type: (a -> a) -> a -> [a] -> a
03:10:13 <Athas> __monty__: reduce is a lot older than Haskell.
03:10:49 <__monty__> Tell me more.
03:11:07 <a1c`> __monty__: what is Mapreduce?
03:11:34 <Athas> I don't know when Lisp got reduce first, but it was in CLtL in 1984.
03:12:03 <__monty__> a1c`: Google's "revolutionary" technology that popularized functional concepts in imperative languages.
03:34:07 <__monty__> Athas: I'm having a hard time finding the provenance of either term.
03:35:39 <a1c`> "<Athas> A 'reduce' should have a more restricted type: (a -> a) -> a -> [a] -> a" why not (a->a->a) -> [a] -> a？
03:36:10 <a1c`> :t (+)
03:36:11 <lambdabot> Num a => a -> a -> a
03:38:31 <__monty__> That's probably what they meant.
03:39:35 <mniip> doesn't everyone love church-encoded Dic
03:39:36 <mniip> Dict
03:39:58 <mniip> forall r. (c => r) -> r
03:40:00 <cvlad-> How would even `(a -> a -> a) -> [a] -> a` work for `[]`? `foldl` doesn't have its shape because of Haskell particularities. It has to have its shape so it's not a partial function. And I have no idea how `(a -> a) -> a -> [a] -> a` would work.
03:48:10 <kuribas> let's say I want to extend a servant API with more information, for example some endpoints have filters, and I want to extract the information about the filters as meta data.
03:48:12 <cdunklau> is there a Prelude typeclass suitable for a "ring" of nullary constructors? if not, would it be reasonable to make the Enum things wrap around?
03:48:28 <kuribas> Do I need to add my own types to servant, or is there an easier way?
03:49:08 <cdunklau> e.g. `data Direction = Right | Up | Left | Down` such that `pred Right = Down` and `succ Down = Right`
03:49:59 <Ailrun[m]> % :info Enum
03:49:59 <yahb> Ailrun[m]: class Enum a where; succ :: a -> a; pred :: a -> a; toEnum :: Int -> a; fromEnum :: a -> Int; enumFrom :: a -> [a]; enumFromThen :: a -> a -> [a]; enumFromTo :: a -> a -> [a]; enumFromThenTo :: a -> a -> a -> [a]; {-# MINIMAL toEnum, fromEnum #-}; -- Defined in `GHC.Enum'; instance Enum GeneralCategory -- Defined in `GHC.Unicode'; instance Integral a => Enum (Ratio a) -- Defined in `GHC.R
03:50:32 <Ailrun[m]> % :i Enum
03:50:32 <yahb> Ailrun[m]: class Enum a where; succ :: a -> a; pred :: a -> a; toEnum :: Int -> a; fromEnum :: a -> Int; enumFrom :: a -> [a]; enumFromThen :: a -> a -> [a]; enumFromTo :: a -> a -> [a]; enumFromThenTo :: a -> a -> a -> [a]; {-# MINIMAL toEnum, fromEnum #-}; -- Defined in `GHC.Enum'; instance Enum GeneralCategory -- Defined in `GHC.Unicode'; instance Integral a => Enum (Ratio a) -- Defined in `GHC.R
03:51:53 <Ailrun[m]> cdunklau: I don't know why the bot doesn't work, but Enum provides pred and succ as a part of its methods.
03:52:34 <__monty__> Ailrun[m]: They're asking whether it'd be reasonable to abuse Enum's pred/succ and make them wrap around.
03:52:44 <cdunklau> yes, that
03:53:00 <madnight> cvlad-, https://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.List.html#foldl1%27
03:53:01 <Ailrun[m]> Oh, it's just my internet ... sorry for excessive messages.
03:54:42 <Ailrun[m]> monty: Oh, right. It should not wrap arround like that. Thx for correction :)
03:56:32 <cdunklau> i think it's probably less terrible yet still convenient to derive Enum but make my own turnL/turnR that use pred/succ and special case the boundries
03:56:52 <cvlad-> madnight: That is a partial function, which is almost always a bad idea. It would work well on `NonEmpty a` instead of `[a]` though.
03:57:16 <sourjyo> how to scroll through and read the previous conversation? Im new btwH
04:00:04 <madnight> cvlad-, good point, or you could change the type signature to safeFold :: (a -> a -> a) -> [a] -> Maybe a
04:00:21 <madnight> and return Nothing in case of []
04:02:26 <mniip> ok similar question
04:02:36 <__monty__> sourjyo: IRC doesn't persist chat history, there's a link to logs in the topic.
04:02:54 <mniip> data T a where D :: T (x, y)
04:03:02 <mniip> how to bind x when pattern matching on D
04:04:05 <madnight> sourjyo, https://madnight.github.io/haskell-logs/
04:04:24 <mniip> I though scopedtyvars would let me \(D :: T (x, y))
04:04:27 <mniip> but apparently not
04:08:58 <mniip> hmm
04:15:01 <mniip> I could write indT
04:18:09 <mniip> a pattern synonym even
04:37:25 <hseg> Hi. Is there a convenient way of reflecting natural numbers to the type level?
04:38:43 <mniip> convenient in what sense
04:39:18 <hseg> Use case: I have a function whose type is conceptually C a => (n:Int) -> ((Vec n a) -> a) -> a (for some appropriate choice of C, mod some impl details)
04:40:33 <hseg> Convenient in the sense that it is a) lightweight syntactically b) supports somewhat involved computations (although I suppose I could compute before lifting)
04:40:54 <mniip> GHC TypeNats?
04:41:09 <mniip> someNatVal
04:41:30 <cvlad-> madnight: Sure, but folds follow a pretty formulaic algorithm to their signatures. Actually, `maybe`, `either` and `foldr` are all what we call `catamorphisms`. The formula, informally, is:
04:41:30 <cvlad-> - take each constructor and add `-> r` after it, like: `Nothing -> r` and `Just a -> r`
04:41:30 <cvlad-> - for each function from the previous step, remove unary constructors (so `Nothing -> r` becomes just `r`)
04:41:30 <cvlad-> - for each function from the previous step, replace the constructors with their arguments, in a curried form (so `Just a -> r` becomes `a -> r`; and if we had two arguments, it would be `a -> b -> r`)
04:41:30 <cvlad-> - special rule: if the type is recursive, replace the recursive argument with `r`
04:41:30 <cvlad-> - for each function from the previous step, create a new function `f1 -> f2 -> t -> r` where `t` is the original type, so: `r -> (a -> r) -> Maybe a -> r`.
04:41:31 <cvlad-> Doing the same for `Either a b`, we have:
04:41:31 <cvlad-> - `Left a -> r` goes to `a -> r`
04:41:32 <cvlad-> - `Right b -> r` goes to `b -> r`
04:41:32 <cvlad-> - so we have `(a -> r) -> (b -> r) -> Either a b -> r, which is exactly `either`
04:41:33 <cvlad-> Also for `[a]`:
04:41:34 <cvlad-> - `[] -> r` goes to `r`
04:41:35 <cvlad-> - `a:as -> r` goes to `a -> r -> r` (because of the recursive constructor rule; `(:) :: a -> [a] -> [a]` so this is `a -> r -> r`)
04:41:35 <cvlad-> - so we have `r -> (a -> r -> r) -> [a] -> r` which is exactly `flip foldr`
04:43:20 <hseg> mniip: Missed that function. Yeah, that'd work. So SomeNat is basically a Dict of a type-level Nat?
04:43:29 <mniip> yes
04:43:48 <mniip> of some unknown Nat
04:44:10 <hseg> Great!
04:55:09 <hseg> vector-sized seems to do what I want. Only little annoyance is that it isn't Representable, so I'll have to write the Group instance myself. No matter
05:17:54 <hseg> my mistake, it is
05:20:43 <nevere> Is there any way I can implement `prove5thDoorIsClosed` in this snippet?  https://codeshare.io/5X9JQE
05:21:35 <merijn> Possibly, but I'd seriously question wanting to :p
05:26:02 <lortabac> nevere: what's preventing the 5th door from being open? Maybe I missed something
05:27:11 <nevere> lortabac: You are right. So the function should return a `Maybe (Dict (GetDoor 5 a) ~ Closed)`
05:28:21 <nevere> merijn: Basically, I have a value of `Hallway a`, and I need to call another function that accept (GetDoor 5 a ~ Closed) => `Hallway a`.
05:30:21 <merijn> Yeah, my point was that this sort of dependently typed programming in Haskell sucks, and I would recommend avoiding it :p
05:30:54 <lortabac> nevere: pattern-matching on the first 5 elements of the hallway should be enough
05:31:19 <hseg> Dammit. Just remembered that instance resolution doesn't take into account the constraints, so e.g. an instance C f, D x => E (f x) overlaps nearly every possible other instance.
05:31:50 <hseg> No wonder you don't get many instances of form Representable f, C x, D f => E (f x)
05:32:36 <hseg> ... this feels like the kind of thing that can be addressed with DerivingVia...
05:35:19 <hseg> it is! https://hackage.haskell.org/package/adjunctions-4.4/docs/Data-Functor-Rep.html#t:Co
05:37:41 <hseg> Unfortunately, afaict it is impossible to write something of the form (Representable f, Rep f ~ r) => forall c::(*->*)->Constraint r. c ((->) r) -> c f
05:38:48 <hseg> (idea being that any class that hasn't been updated to having an instance at Co would be able to derive it from the instance for ((->)r))
05:51:35 <nevere> lortabac: That worked. Thanks. Can it be done for any Nat, something like https://codeshare.io/5X9JQE?
05:54:08 <lortabac> nevere: you can try as an exercise, but it's probably going to be painful
05:54:50 <lortabac> as merijn said, this kind of programming in Haskell is very cumbersome
06:00:23 <mniip> why can't GHC just use the type variable names I gave it
06:01:01 <merijn> mniip: Because there's several unification steps in between?
06:01:18 <suppi> is it possible to implement a function like `universeBi :: ... => a -> [b]` so when a and b are the same type it'll do this: `universeOf gplate` and when it's not it'll use `universeOnOf types ignored` ?
06:01:33 <ggole> Unifying a type variable without a name and one with a name should result in a variable with the name, so how is that an excuse?
06:02:41 <suppi> i think i could do it if i define universeBi in a typeclass or something, but is it possible to do that without it?
06:10:45 <nevere> lortabac: Actually I have tried and failed. It was a couple of days back. I was just re-trying now.
06:16:57 <mniip> hmmm
06:17:04 <mniip> you're not wrong
06: