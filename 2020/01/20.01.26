01:25:05 * hackage super-user-spark 0.4.0.4 - Configure your dotfile deployment with a DSL.  https://hackage.haskell.org/package/super-user-spark-0.4.0.4 (Norfair)
01:41:26 <Poscat[m]> ?src seq
01:41:26 <lambdabot> Source not found. My pet ferret can type better than you!
02:05:36 <dainichi> > Data.List.filter (>3) [1,2,3,4,5,7,6]
02:05:40 <lambdabot>  [4,5,7,6]
02:23:54 <dainichi> > Math.NumberTheory.ArithmeticFunctions.divisorsList 12
02:23:54 * hackage cabal2spec 2.4.2 - Convert Cabal files into rpm spec files  https://hackage.haskell.org/package/cabal2spec-2.4.2 (PeterSimons)
02:23:56 <lambdabot>  error:
02:23:56 <lambdabot>      Not in scope: ‘Math.NumberTheory.ArithmeticFunctions.divisorsList’
02:23:56 <lambdabot>      No module named ‘Math.NumberTheory.ArithmeticFunctions’ is imported.
02:25:19 <dainichi> @pl \a b -> a^2+b^2
02:25:19 <lambdabot> (. (^ 2)) . (+) . (^ 2)
02:27:22 <dainichi> ((. (^ 2)) . (+) . (^ 2)) 3 4
02:27:49 <dainichi> > ((. (^ 2)) . (+) . (^ 2)) 3 4
02:27:51 <lambdabot>  25
03:17:27 <kindaro> I unregistered some packages and now I cannot install anything. Cabal complains that `containers-0.6.2.1` are incompatible with `ghc-8.6.5`. See log: https://gist.github.com/kindaro/853b8775b8a350480fd4def012eaff2b I can remove `~/.cabal`, but it will take hours to rebuild and does not confront the issue meaningfully. How can I troubleshoot and
03:17:28 <kindaro> understand the problem?
03:19:57 <__monty__> kindaro: Some libraries are tied to GHC, base is the most obvious example but GHC also comes with versions of containers, text, transformers and others.
03:20:16 <kindaro> Yes, I know.
03:20:32 <__monty__> You can't install a different version of base for a certain GHC and I don't think you can install different version of the other libs either.
03:21:27 <__monty__> Though you can try --allow-newer=containers
03:21:57 <__monty__> Are you using cabal <3.0?
03:23:04 <kindaro> See longer log with `verbose`. https://gist.github.com/kindaro/3ed0ae4a96ff4f34134cc2fd1ca00ed8
03:25:49 <kindaro> __monty__: I happen to have several versions of `containers` installed, although not sure why. There is a suitable version of `containers` in the system package database of `ghc-8.6.5`. Cabal should pick it, but it does not.
03:26:40 <kindaro> I am using current master `cabal-install`.
03:28:12 <__monty__> The constraints on the optparse-applicative you're trying to install probably prevent it from doing so.
03:28:32 <__monty__> Why are you installing a lib anyway? Life's much easier with a cabal file.
03:31:25 <kindaro> Thing is, I cannot install almost anything. `optparse-applicative` is an example.
03:32:22 <__monty__> Sounds like you're using old-style install rather than the v2-install that became the default in 3.0 tbh.
03:33:09 <__monty__> I only use install for binaries (well, I don't but I would only use it for that purpose).
03:33:17 <kindaro> I have current master `cabal-install`.
03:33:56 <__monty__> You get the same error when running v2-install? (just to be sure)
03:35:13 <kindaro> Yes, same error.
03:37:59 <__monty__> You're on nix? Then you should definitely not be installing libs.
03:39:50 <kindaro> No, I am not on nix. I have a selection of `ghc` binaries from different sources. Maybe I should check against all of them...
03:40:51 <__monty__> Then what's all the /nix/var/nix about?
03:41:52 <kindaro> That is one of the sources I get `ghc` from.
03:42:58 <__monty__> That definitely complicates matters. If the package database is in the nix store it's not writable.
03:48:03 <kindaro> Stack has its own global package databases, one for each version of GHC it makes available.
03:48:35 <kindaro> But the problem manifests both in Nix and Stack provided GHC.
03:49:12 <kindaro> But turns out it only touches `ghc-8.6.5`!
03:49:42 <__monty__> Probably because of the constraint on base?
03:50:58 <kindaro> Which constraint?
03:51:15 <__monty__> base-4.12.0.0
03:51:29 <kindaro> See log across Stack provided GHC: https://gist.github.com/kindaro/77fa679399cb3fa706c272fbb417b031
03:51:37 <__monty__> I'm not sure where it's getting that though. It's not a direct dependency of optparse-applicative.
03:52:25 <kindaro> it is not directly related to any specific package. It manifests with almost any.
03:54:02 <kindaro> Give me a list of packages and I can check which agree to install. `hackage-security` is the sole example I have so far. It has no dependencies — may be related.
03:54:30 <__monty__> It's weird the problem is specific to ghc 8.6.5.
03:58:27 <kindaro> Indeed it is weird. The package database of Cabal must be broken so there is a conflict of some sort.
04:00:17 <__monty__> The conflict is between containers 0.6.2.1 and ghc-8.6.5 (the library, not the compiler).
04:02:35 <kindaro> But there was no conflict previously. Half of my package database depends on that version of `containers`.
04:03:14 <__monty__> Maybe ghc-8.6.5 is the new dependency and the culprit?
04:04:26 <kindaro> In any way, there is a «more matching» version of `containers` in the system package database of a GHC installation.
04:05:03 <kindaro> `ghc-8.6.5` has also been around forever. I use it daily.
04:05:36 <__monty__> The library, not the compiler?
04:07:50 <kindaro> I am not sure.
04:08:52 <MarcelineVQ> those container versions are within bounds for that library version anyway, so idk man, weird stuff
04:09:08 <MarcelineVQ> *ghc library version
04:12:25 <__monty__> Time to ask the experts in #hackage, may be a bug.
04:14:36 <MarcelineVQ> that being said idk if base 4.12 matches ghc 8.6.5, ghc 8.6.1 is the last one in the list at https://wiki.haskell.org/Base_package and the error I see mentions base 4.12 with ghc 8.6.5
04:15:33 <MarcelineVQ> 4.12.0.0 specifically
04:18:07 <MarcelineVQ> the key lines seeming to be:  [__2] trying: ghc-8.6.5    [__3] rejecting: ghc:-buildable (conflict: base==4.12.0.0/installed-4.12.0.0,
04:18:23 <MarcelineVQ> idk how to read that conflict part tho tbh
04:20:33 <MarcelineVQ> or really much of any of the lines, I wonder if these are documented with explanations somewhere
04:23:14 <MarcelineVQ> Not anywhere google is finding
04:40:24 * hackage cmt 0.7.1.0 - Write consistent git commit messages  https://hackage.haskell.org/package/cmt-0.7.1.0 (smallhadroncollider)
05:17:03 <maerwald> MarcelineVQ: full error?
05:18:09 <__monty__> maerwald: kindaro's gists higher up.
05:18:22 <MarcelineVQ> maerwald: kindaro posted a few logs  https://gist.github.com/kindaro/853b8775b8a350480fd4def012eaff2b  https://gist.github.com/kindaro/3ed0ae4a96ff4f34134cc2fd1ca00ed8   https://gist.github.com/kindaro/77fa679399cb3fa706c272fbb417b031
05:23:30 <maerwald> I can't see which version it's trying to pick
05:24:14 <merijn> Looks like it has both containers and ghc in its dependencies
05:24:24 <merijn> And the containers constraint conflicts with ghc
05:24:32 <maerwald> merijn: I cannot reproduce that here though with optparse-applicative
05:24:39 <merijn> Impossible to say without seeing the cabal file they're building though
05:24:53 <merijn> maerwald: optparse-applicative doesn't depend on ghc, so of course not
05:25:07 <maerwald> cabal install --dry-run --lib optparse-applicative-0.15.1.0 containers-0.6.2.1
05:25:08 <maerwald> works fine
05:25:16 <merijn> I think there's something in their CWD that affects things
05:25:20 <maerwald> maybe the command is run from a project dir
05:25:23 <merijn> .ghc.environment file possible
05:25:29 <merijn> s/possible/possibly
05:25:34 <merijn> Or a project file, yeah
05:26:33 <kindaro> maerwald, merijn: note the error appears with almost any package. I run from a clean directory.
05:26:59 <maerwald> found ghc-pkg in /nix/var/nix/profiles/default/bin/ghc-pkg
05:27:01 <maerwald> you are using nix
05:27:03 <merijn> kindaro: Which version of cabal-install?
05:27:10 <maerwald> good luck
05:27:21 <kindaro> See above!
05:28:37 <merijn> kindaro: I don't see it anywhere in your logs, only the Cabal version, which claims to be 3.3, which is rather odd, since there is no 3.3
05:28:51 <kindaro> maerwald: Nix is merely providing a `ghc` executable set. The same error appears with other installations of GHC.
05:28:58 <merijn> So something is seriously fucked
05:29:11 <kindaro> @meri
05:29:11 <lambdabot> Maybe you meant: vera more
05:29:22 <maerwald> kindaro: Then show me logs with a properly installed ghc
05:29:41 <merijn> Cabal-3.3 is Cabal head from github
05:30:12 <merijn> I don't know where you're getting it from, but, uh, don't
05:30:50 <merijn> Because unreleased dev versions != stable, working environments
05:31:06 <kindaro> maerwald: Not sure what is improper with Nix, but see more in logs: I also checked against GHC provided by Stack.
05:31:24 <maerwald> well, stack is a completely different thing
05:31:34 <maerwald> it's hard to tell what is wrong when there are so many tools involved.
05:32:20 <maerwald> I can't reproduce that with a normal non-nix GHC installation and without cabal-head
05:32:31 <kindaro> merijn: I checked against multiple versions of `cabal-install`.
05:34:00 <kindaro> maerwald: Stack and Nix provide GHC, not doing any work directly. Not sure what you advice — to build from source?
05:34:01 <merijn> Like maerwald optparse-applicative builds fine for me with cabal-install 3.0 and GHC 8.6.5
05:34:17 <merijn> Incidentally, all the stack builds seem to work fine *except* the 8.6.5 one, if I look at those logs
05:34:57 <kindaro> merijn: Right!
05:35:30 <merijn> Which would indicate something is broken with your 8.6.5 install
05:36:33 <kindaro> merijn: These are 2 different GHC installations, with distinct system package databases.
05:36:56 <merijn> "system package database" as in apt-get/whatever?
05:37:27 <kindaro> No, as in `ghc-pkg` package databases.
05:37:55 <merijn> Why do you have two? How do you end up with those?
05:39:54 * hackage tldr 0.6.2 - Haskell tldr client  https://hackage.haskell.org/package/tldr-0.6.2 (psibi)
05:40:48 <kindaro> merijn: One is froStack, the other 
05:41:06 <maerwald> this is not how you debug your problems. You want to reduce the amount of tools involved in your problem to figure out what's going on
05:41:09 <kindaro> merijn: One is from Stack, the other from Nix. See: https://gist.github.com/kindaro/36c535711e42d9272bda81ee732b5885
05:41:50 <maerwald> if you don't want to use a regular installation, then it's reasonable to assume your problem is nix
05:41:54 <kindaro> maerwald: As I said previously: not sure what you advice — to build from source?
05:42:11 <maerwald> use the pre-built tarballs
05:43:21 <maerwald> If you are on NixOS, this might not work...
05:44:16 <merijn> I mean, at this point I would probably just purge everything Haskell related, install a single GHC. Check that that works and has sane environment and only then consider adding different versions
05:44:22 <__monty__> maerwald: If the problem happens with both a GHC provided by Nix and the same version provided by stack you've just eliminated the GHC being the issue...
05:44:37 <maerwald> __monty__: no, those can be two different problems
05:44:49 <merijn> __monty__: Or introduced an extra possible breakage by the two ghc's confusing each other's configs :p
05:47:07 <maerwald> it's like vim plugin problems... if you can't reproduce it with a minimal config, then it's likely your config that is broken, not the plugin
05:47:19 <kindaro> maerwald: What do you advice? Test on a clean virtual machine?
05:47:28 <maerwald> kindaro: what distro are you on?
05:49:17 <kindaro> I am sure it is the config. Or, rather, corrupted user package database. After all, removing `~/.cabal` helps. Question is, what exactly went wrong.
05:49:38 <maerwald> meh, you didn't back up .cabal?
05:49:43 <maerwald> Now you can't file a bug report...
05:50:02 <kindaro> maerwald: Arch Linux. Of course I did.
05:50:08 <maerwald> Good
05:50:20 <maerwald> try a ghcup installation maybe
05:50:40 <maerwald> this is why I think we should never remove v1 sandboxes
05:50:43 <maerwald> breakage is more contained
05:51:31 <merijn> maerwald: tbh, I've so far never managed to break the global install (well, I managed to get updates stuck by having the index in a locked state, but that's easily fixed)
05:51:41 <maerwald> I've had frequent problems with the store
05:52:41 <maerwald> https://github.com/haskell/cabal/issues/6483 like that
05:52:58 <maerwald> and the new hie<->ghcide joint project will keep using cabal-helper it seems, yay
05:53:51 <alc> what are `combinators` in haskell?
05:59:19 <erisco> alc, functions that put things together
05:59:54 * hackage tasty-lua 0.2.1 - Write tests in Lua, integrate into tasty.  https://hackage.haskell.org/package/tasty-lua-0.2.1 (tarleb)
06:04:04 <kindaro> maerwald: Behold: https://gist.github.com/kindaro/579224ca16b297cc1aa2009c47fe1207
06:04:33 <maerwald> kindaro: are you using the ghcup provided cabal?
06:05:32 <kindaro> No, should I? I use current master.
06:05:42 <maerwald> Yes, you should
06:09:09 <kindaro> maerwald: Like here? https://gist.github.com/kindaro/ce4e5759729e3db06a4c6e99458cae96
06:10:52 <maerwald> kindaro: the only difference I see to my setup is that your pkg-config doesn't work
06:11:02 <maerwald> not sure that would cause the solver to fail, though
06:16:05 <kindaro> Not sure why Cabal thinks `pkg-config` is not working. Works at command line. But this issue can be resolved with some Nix magic. Installation still fails.
06:16:49 <maerwald> kindaro: what architecture?
06:18:03 <kindaro> x86_64
06:18:35 <maerwald> https://hackage.haskell.org/package/ghc-8.6.5/ghc.cabal is not buildable by default, if you are keen you could turn the buildable switch on and see what happens
06:18:45 <maerwald> I believe it is trying to rebuild the ghc API package for some reason
06:18:53 <maerwald> but it's marked unbuildable by default
06:18:54 * hackage stylish-haskell 0.10.0.0 - Haskell code prettifier  https://hackage.haskell.org/package/stylish-haskell-0.10.0.0 (JasperVanDerJeugt)
06:19:43 <kindaro> maerwald: This amounts to building GHC?
06:20:27 <maerwald> this is the GHC API, I don't know what the build system does
06:20:54 * hackage lackey 1.0.11 - Generate Ruby clients from Servant APIs.  https://hackage.haskell.org/package/lackey-1.0.11 (fozworth)
06:21:17 <kindaro> Can you explain in some more words?
06:21:34 <maerwald> https://hackage.haskell.org/package/ghc
06:22:08 <kindaro> ?
06:23:24 <merijn> maerwald: I said that earlier, yes
06:24:16 <merijn> maerwald: There's work to make GHC API cabal-installable, but it doesn't work, so it is indeed unbuildable. The question is "why does it think everything he builds depends on ghc?"
06:24:45 <merijn> maerwald: So flipping the buildable switch will not work
06:25:01 <maerwald> maybe the error message will change
06:25:16 <merijn> yes, to "failing to build ghc"
06:25:32 <maerwald> :D
06:25:40 <merijn> kindaro: Do you have a file named .ghc.environment in your current directory?
06:26:10 <maerwald> does cabal write those files outside of project directories?
06:26:13 <maerwald> I hope not
06:26:43 <merijn> maerwald: It shouldn't, but who knows what he's done before trying this
06:27:08 <merijn> maerwald: Gotta be more paranoid when debugging!
06:28:41 <kindaro> merijn: As mentioned previously, I run from a clean directory.
06:29:23 <merijn> *something* is telling it there's a dependency on the ghc lib and it's not the singletons package
06:29:55 <maerwald> does cabal potentially update packages during an install that are not part of the "direct" dependency graph, but does so to update reverse-dependencies?
06:30:20 <maerwald> I would suspect, especially with the store, it doesn't
06:30:35 <merijn> maerwald: It never did and with v2-build the question itself is meaningless, tbh
06:30:37 <maerwald> but if it does, it may be that your depgraph is different with a clean store
06:30:51 <maerwald> which I think at this point is the only explanation?
06:31:04 <merijn> It's failing (correctly) because the ghc dependency can't be solved
06:31:13 <merijn> The question is, where does the ghc dependency come from
06:31:21 <merijn> maerwald: Nope
06:31:29 <maerwald> but he said it resolves with a clean store?
06:31:35 <merijn> maerwald: The solver doesn't account for existing installs
06:31:47 <merijn> maerwald: It solves without considering the store
06:32:52 <maerwald> kindaro: so when you delete/backup ~/.cabal/store, it works?
06:32:53 <merijn> If it's a clean and empty directory and release version of cabal-install 3.0, then I don't see how it could possibly come up with a ghc constraint
06:33:14 <merijn> Well, maybe some junk constraints in ~/.cabal/config could corrupt it?
06:33:19 <maerwald> make sure you *only* delete/backup ~/.cabal/store and not any other files
06:33:22 <merijn> Have you tried removing ~/.cabal/config
06:34:35 <kindaro> Let me check again. I shall come back shortly.
06:42:42 <aveltras> what would be the type signature of a function which takes a monad transformer stack and a function to reduce this transformer stack to a smaller expected transformer stack ?
06:44:21 <aveltras> this should work no matter the "height" of the given transformer stack as long as the given function "reduces" it enough
06:46:00 <maerwald> You mean something like: BarT (FooT b) a -> BarT Identity a
06:47:13 <merijn> aveltras: There's no real general way to do this
06:47:33 <merijn> aveltras: Although you might be interested in monad morphisms and natural transformations, see:
06:47:36 <merijn> @hackage mmorph
06:47:36 <lambdabot> http://hackage.haskell.org/package/mmorph
06:49:12 <aveltras> the goal is to have a function which takes arbitrary height stack like FooT (BarT (Baz t)) and to always get a Baz T since that's the thing my function knows how to act on
06:49:28 <aveltras> thanks merijn for the pointer, i'll investigate this
06:50:36 <merijn> aveltras: Yeah...that's impossible
06:50:52 <merijn> aveltras: Working on arbitrary/unknown stacks isn't possible
06:51:12 <maerwald> maybe it's possible with polysemy
06:51:18 <merijn> aveltras: Although with mmorph you might be able to apply your function to "the lower part of the stack", but depends on what your function does
06:51:27 <maerwald> basically knowing you're left with one effect only, no matter what effect it is
06:51:31 <merijn> maerwald: But then we're no longer talking about transformer stacks, though
06:51:37 <maerwald> yeah
06:51:47 <maerwald> and then your compile errors are funnier
06:52:26 <maerwald> but polysemy has some glue code to convert from and to transformers I think, not sure how useful that is though
06:53:02 <aveltras> i think i'll keep the stack reduction on the consumer side of the library then :)
07:28:38 <maerwald> how did you unbreak 7.10.3 again with those "relocation R_X86_64_32S against symbol `stg_bh_upd_frame_info' can not be used when making a PIE object; recompile with -fPIC" messages?
07:48:32 <iggybibi[m]> hello, I am using the recursion-schemes lib, and trying to makeBaseFunctor. I get the error Constructor ‘TarrowF’ must use the type variable only as the last argument of a data type.
07:48:43 <iggybibi[m]> I have this : Tarrow (Arrow (Types types) (Types types)), but if I replace it with Tarrow (Types types, Types types), then it is able to derive it
07:48:52 <iggybibi[m]> the error message doesn't make much sense as in the second case the type variable is used in both arguments of the tuple
07:49:00 <iggybibi[m]> anyone know anything about this?
07:49:43 <iggybibi[m]> Tarrow is a constructor
07:50:13 <sicklork1n> I'm poking around IxSet.Typed and was curious how to implement a version of union that's left-biased on some index, in my case a primary key.
07:51:27 <sicklork1n> i can write it interms of updateIx but seems like I must be missing something fundementa
07:52:54 * hackage fused-effects-squeal 0.1.0.0 - A fused-effects adapter for squeal-postgresql.  https://hackage.haskell.org/package/fused-effects-squeal-0.1.0.0 (iko)
08:01:15 <sicklork1n> this works i suppose - needs more digging..  foldr (uncurry updateIx) a . map (pk &&& id) . toList
08:04:54 * hackage implicit 0.3.0.0 - A math-inspired programmatic 2&3D CAD system.  https://hackage.haskell.org/package/implicit-0.3.0.0 (Juri_)
08:07:58 * juri_ does a little dance.
08:08:53 * hackage tasty-lua 0.2.2 - Write tests in Lua, integrate into tasty.  https://hackage.haskell.org/package/tasty-lua-0.2.2 (tarleb)
08:22:12 <jle`> iggybibi[m]: what is the definition of the data type?
08:23:22 <kindaro> merijn: If I `rm ~/.cabal/config`, the issue stays.
08:23:51 <maerwald> that means the store has an impact on the build plan
08:24:52 <kindaro> maerwald: If I `rm ~/.cabal/store`, the issue gets fixed.
08:25:29 <maerwald> Yeah, not a good sign
08:27:27 <kindaro> More though: I can `rm -rfv ~/.ghc` and the issue gets fixed, so it may have something to do with the user package database.
08:28:30 <kindaro> Both the user package database & the store need to be present for the issue to appear.
08:29:46 <maerwald> wait, so you mixed it v1-install?
08:29:52 <maerwald> well, no wonder that breaks
08:30:12 <maerwald> ~/.ghc should be empty, unless you used v1-install to install stuff globally
08:30:13 <kindaro> What are you even talking about?
08:30:25 <maerwald> that doesn't work well together
08:32:14 <maerwald> delete ~/.ghc
08:32:20 <maerwald> or ~/.ghc/x86_64-linux-8.6.5
08:33:05 <nshepperd2> when you v2-install things, the environment file gets written into .ghc
08:33:30 <maerwald> I don't have any files there except ghci_history
08:35:04 <nshepperd2>  ~/.ghc/x86_64-linux-whatever/environment/default
08:35:09 <kindaro> Your user package database must be located elsewhere?
08:35:23 <maerwald> nshepperd2: that's something v1 creates
08:36:47 <maerwald> kindaro: anyway, don't mix v1 and v2
08:37:07 <maerwald> v1 is fine with sandboxes, but never install anything globally
08:38:58 <nshepperd2> maerwald: no
08:39:30 <maerwald> nshepperd2: how come I don't have it then?
08:39:55 <nshepperd2> do you use v2-install?
08:39:58 <maerwald> yes
08:40:33 <nshepperd2> v2-install --lib specifically
08:40:50 <zebrag> Is there a non paywall version of "Predictive parser combinators need four values to report errors, 1996, Partridge"?
08:41:33 <maerwald> nshepperd2: ah true
08:42:07 <maerwald> so what he really wants to delete is ~/.ghc/x86_64-linux-8.6.5/package.conf.d
08:42:13 <maerwald> so to not lose the environment files
08:43:57 <nshepperd2> no, the environment file is the problem
08:44:03 <nshepperd2> (probably)
08:44:21 <maerwald> kindaro: can you check whether it's the env file or package.conf.d dir causing it?
08:45:14 <maerwald> if it's the env file, I guess this could be a bug maybe, or at least a usability issue with 'cabal install --lib'
08:45:38 <kindaro> In a moment. My computer is busy compiling `singletons`.
08:46:24 <nshepperd2> i don't use v2-install --lib anymore because of it
08:47:08 <maerwald> the resolution failure is also very cryptic, it's hard to guess this is the problem
08:47:21 <nshepperd2> i wrote my own script to manage and build a dummy cabal project and install the resulting environment file instead
08:47:21 <iggybibi[m]> <jle` "iggybibi: what is the definition"> data Types types = Tarrow (Arrow (Types types) (Types types)) and newtype Arrow a b = Arrow (a,b)
08:48:04 <maerwald> I guess this is another reason to have freeze files over just pinning hackage state. Because user environment files may change the build plan.
08:48:25 <isovector1> i want to add some hints to hlint, eg suggesting "don't use a lambda here" or "make sure you put a newline here", and can't for the life of me figure out if this is already supported
08:49:24 <nshepperd2> building a project with a cabal file ignores the default environment, so it's not a problem for that
08:52:23 <iggybibi[m]> I think it's because I can't really derive functor for something like data X a = X (Arrow a a)
08:52:56 <iggybibi[m]> why can I derive Functor for data X a = X (a,a)
08:53:31 <iggybibi[m]> but not data Arrow a b = Arrow a b; data X a = X (Arrow a a)
08:53:53 <iggybibi[m]> is Arrow missing a specific instance that's needed when deriving functor for X?
08:56:08 <iggybibi[m]> the error message is just confusing : Can't make a derived instance of ‘Functor X’:
08:56:09 <iggybibi[m]>         Constructor ‘X’ must use the type variable only as the last argument of a data type
08:56:09 <iggybibi[m]>     • In the data declaration for ‘X’
09:22:24 * hackage Unique 0.4.7.7 - It provides the functionality like unix "uniq" utility  https://hackage.haskell.org/package/Unique-0.4.7.7 (kapral)
09:24:24 <kindaro> maerwald, merijn, nshepperd2: It is not as simple as removing an _«environment»_ file. If I `rm ~/.ghc/x86_64-linux-8.6.5/environments/default`, I can install one package. Then it gets created again, and I have the same issue with the next package. The contents of the file are immaterial to the issue, only its presence. So, it may still
09:24:24 <kindaro> be an issue with the store.
09:30:31 <nshepperd2> what if you install all the libraries at once
09:31:16 <kindaro> Like, all the Hackage?
09:31:25 <maerwald> that would take a while xD
09:31:32 <nshepperd2> All the packages that you're planning to install
09:31:32 <shapr> I did that once, it was great fun
09:31:39 <shapr> nshepperd2: do it! it's great!
09:31:44 <nshepperd2> ol
09:31:46 <nshepperd2> lol
09:31:47 <maerwald> did you run out of disk space or memory? lol
09:31:49 <shapr> nshepperd2: there was even an acme package specifically for that
09:31:59 <shapr> maerwald: I have 128GB of ram and 3TB of storage in this laptop
09:32:12 <maerwald> sounds like a regular haskell setup
09:32:15 <shapr> not much battery life though
09:32:27 <shapr> and it sometimes burns me
09:32:36 <shapr> cause the Xeons are just a bit too eager
09:32:38 <nshepperd2> haha
09:32:52 <kindaro> Anyway, do we have a legitimate bug here? What is my next step?
09:33:20 <maerwald> Well, whether it's technically a bug is still not clear, but it is definitely bad user-facing behavior
09:33:47 <nshepperd2> kindaro instead of installing things one by one, if you install them in one command cabal can solve for compatible versions
09:35:02 <kindaro> How can I approach bisecting the store? Do I simply remove files or do I need to unregister them somehow?
09:36:46 <nshepperd2> what i used to do was maintain a v2-install command line of every package i wanted
09:37:14 <nshepperd2> cabal v2-install lens vector parsers...
09:37:36 <maerwald> I usually just do: cabal v2-repl --build-depends lens --build-depends vector ...
09:37:58 <nshepperd2> then when i wanted to install a new package I'd delete the default environment, then run that command again with the new package appended to the end
09:38:14 <maerwald> no point in installing libraries at all with v2 imo
09:38:34 <kindaro> nshepperd2: So you never filed an issue?
09:42:36 <nshepperd2> no
09:43:54 * hackage escape-artist 1.2.0.0 - ANSI Escape Sequence Text Decoration Made Easy  https://hackage.haskell.org/package/escape-artist-1.2.0.0 (ryan_daniels)
09:46:36 <iggybibi[m]> <iggybibi[m] "is Arrow missing a specific inst"> can't figure this out :( 
09:46:49 <nshepperd2> The proper solution to this imo is an actual package manager kind of thing, which would manage the set of libraries
09:51:49 <maralorn[m]> iggybibi: Just guessing. Could it be, that there already is a Functor instance for tuple but none for arrow?
09:53:17 <maralorn[m]> (In fact when we are talking about really arrows they should be contravariant in the first argument so the instance you are trying to implement sounds wrong to me.
09:53:42 <solonarv> iggybibi[m]: generally speaking, the DeriveFunctor mechanism can only handle types where the parameter is used as the last argument to other types
09:53:58 <solonarv> however, (->) and tuples have special-cased handling baked in
09:55:12 <solonarv> that is why 'data X a = X (a, a) deriving Functor' works
09:56:09 <maralorn[m]> makes sense.
09:56:21 <Dufaer> I am trying to get the Visual Studio Code "Haskell Language Server" plugin to work.
09:56:22 <Dufaer> I just built haskell-ide-engine (HIE) with Stack, but it does not seem to be working correctly. How can I tell for sure?
09:56:22 <Dufaer> In particular, the Visual Studio Code plugin is telling me: "unable to load package `ghc-prim-0.5.3'"
09:56:22 <Dufaer> Or is it just a GHC version mismatch? The GHC in PATH is version 8.6.5 (installed by apt), while HIE version is apparently 8.8.1.
09:56:22 <Dufaer> The plugin kept telling me something about a wrapper, but suddenly stopped. So I propably need to istall GHC 8.8.1 anyway.
09:56:25 <Dufaer> I believe Stack already installed it (to install HIE), but I am not sure where.
09:56:59 <solonarv> Dufaer: you need a separate HIE for each GHC version you use
09:57:42 <maralorn[m]> Is there some kind of "effect system" / application design which uses "tagless final" encoding but not mtl?
09:59:00 <Dufaer> OK, so for now I just build GHC 8.8.1 (using Stack, probably?), put it somewhere next to my current HIE and tell the VSC plugin about it?
09:59:00 <iggybibi[m]> <maralorn[m] "(In fact when we are talking abo"> it's not really an arrow in the category theory sense, just think of it as a product of a and b
09:59:10 <iggybibi[m]> <solonarv "however, (->) and tuples have sp"> I see, thanks
09:59:11 <shapr> is there some way to start a cabal repl with my test-suite?
09:59:35 <maralorn[m]> iggybibi: Yeah, okay.
10:01:41 <shapr> oh, I figured it out
10:02:38 <solonarv> Dufaer: I haven't used it in a while, but IIRC that is not the intended workflow
10:03:02 <solonarv> *from within your project*, run: stack build haskell-ide-engine --copy-compiler-tool
10:03:22 <solonarv> this will build HIE and copy the binary to a location specific to the GHC version in use
10:05:49 <solonarv> then, by starting it with 'stack exec haskell-ide-engine' that version of HIE will be started
10:06:57 <solonarv> hie-wrapper, if I understand correctly, is supposed to figure out "oh, you are using stack" and that HIE needs to b started that way
10:27:21 <ph88^> could somebody have a look at the compile issue? https://bpaste.net/TNMA not sure what to do about it
10:32:07 <kindaro> maerwald, merijn, nshepperd2: I posted an issue. See https://github.com/haskell/cabal/issues/6512
10:32:32 <fendor> solonarv, hie wrapper only chooses which ghc version to use, e.g. hie-8.6.5 for projects that use a ghc version of 8.6.5
10:36:20 <daydaynatation> jle`: Dear jle, could you pls explain to me again the example you've shown me yesterday on the use case of MonadReader type class for (->) r  ? You've mentioned that: say you see a function in some package that takes Int as input , and then ...
10:44:24 * hackage aura 2.0.3 - A secure package manager for Arch Linux and the AUR, written in Haskell.  https://hackage.haskell.org/package/aura-2.0.3 (fosskers)
11:29:07 <ph88^> is there some blog post or announcement about cabal 3 ?
11:30:01 <yushyin> https://www.haskell.org/cabal/users-guide/file-format-changelog.html#cabal-version-3-0 ?
11:53:01 <maerwald> wait, someone actually rewrote pacman in haskell? dafuq
11:53:41 <monochrom> Now we're just waiting for NORAD :)
11:55:00 <ph88^> why they bumped cabal to new major version ?
11:55:01 <slack1256> maerwald: pacman the game or pacman the package manager?
11:55:06 <deni> is there a function to split up a ByteString into equal chunks? (say 1MB)?
11:55:12 <maerwald> the PM
11:55:16 <maerwald> https://hackage.haskell.org/package/aura-2.0.3
11:55:29 <maerwald> that probably took a while :D
11:55:41 <monochrom> Oh oops, I was thinking of the pacman game and the NORAD game :)
11:56:00 <evelyn> unfortunately arch users probably can't compile it using the arch haskell packages
11:56:26 <evelyn> this is deliciously ironic
11:57:03 <monochrom> Maybe I should write a package manager for cabal and call it DEFCON.
11:57:26 <monochrom> Because the most important command will be nuke-it-all. :)
11:58:17 <solonarv> ph88^: cabal was bumped to 3.0 to signify the completion of the new nix-style build system
11:59:08 <solonarv> ph88^: also, note that in Haskell we usually do not use SemVer, but a slightly different versioning convention: the PVP (Package Versioning Policy)
11:59:11 <solonarv> @where pvp
11:59:12 <lambdabot> https://pvp.haskell.org/
11:59:37 <pikachiu> Hello, I am quite new to Haskell.
11:59:37 <pikachiu> I am trying to parse a json with Either Type, like the `Accuracy` property here. I posted my attempt and problem here. Could someone shred some light on it?
11:59:38 <pikachiu> https://stackoverflow.com/questions/59903779/how-to-parse-json-with-field-of-optional-variant-in-haskell/59920768#59920768
11:59:45 <ph88^> new nix-style build system? hadrian ?
11:59:52 <solonarv> according to the PVP, a version looks like MAJOR.MAJOR.MINOR.PATCH; there is no semantic difference between a 2.4 => 2.5 bump and a 2.4 => 3.0 bump
11:59:56 <monochrom> IIUC SemVer and PVP have the same semanitcs, just not the same syntax.
12:00:34 <solonarv> no, hadian is GHC's new build system which replaces a hodgepodge of makefiles
12:00:44 <solonarv> cabal's nix-style builds have nothing to do with it
12:01:20 <ph88^> oh ok
12:02:32 <slack1256> deni: I searched on the repo and there is a chunk functions and some discussion on sizes (4kb vs 32kb), plus some info on system calls done on each boundary. I haven't found anything about user setting the size.
12:03:24 <deni> slack1256: is this "chunk" function located the bytestring package? cause I couldn't find it
12:06:59 <slack1256> deni: I don't think it's exported, it seems to be a internal smart constructor. But grep'd the repo for references to it.
12:07:20 <maerwald> the problem with semver and pvp is, it's too much burden on the maintainers (and they get it wrong all the time)
12:09:06 <slack1256> deni: Data/ByteString/Lazy/Internal.hs line 164 at bytestring-v0.10.10
12:09:17 <slack1256> There it is defined the smart constructor.
12:09:55 <deni> slack1256: thanks. I don't think that helps me though if it's not exported
12:12:30 <slack1256> Good luck
12:14:22 <slack1256> deni: Actually that module will help you, check out packUptoLenBytes
12:20:58 <maerwald> is it possible to inherit documentation from another module somehow?
12:21:28 <maerwald> e.g. function names are all the same, except type parameters
12:26:47 <solonarv> I'm trying to use GHCIDE and getting a "No prefixes matched" error that mystifies me. Does someone have an idea what I might be doing wrong? Here are some relevant files: https://gist.github.com/Solonarv/b83e92f2439ea105e03cd42156a580dd
12:28:00 <ph88^> when i run   cabal install -j --prefix=/usr/local alex happy   i get error   cabal.exe: installdir is not defined. Set it in your cabal config file or use --installdir=<path>    should i set installdir instead of prefix? Should i set prefix the same to installdir? should i set another installdir?  what to do here ?
12:29:44 <solonarv> usually the default install dir is ~/.cabal/bin, I do not know why it isn't set that way for you
12:31:07 <geekosaur> becsuse it's windows and a path like that is less than helpful
12:31:08 <merijn> solonarv: Overriden in ~/.cabal/config, perhaps?
12:31:35 <merijn> oh, yeah, windows too :p
12:33:06 <ph88^> what reason does cabal have to tell me to set installdir ?
12:33:18 <geekosaur> anyway installdir is the correct thing to set
12:33:27 <ph88^> instead of prefix ?
12:33:43 <geekosaur> there may be a --global option, assuming this is v1-style install, in which case prefix would be correct
12:34:06 <geekosaur> if it's v2 install, you're going the wrong way and need to rethink things
12:34:19 <ph88^> i don't know how to see what version style install it is
12:34:33 <geekosaur> what version of cabal.exe are you running?
12:34:50 <ph88^> 3.0.0.0
12:35:08 <solonarv> then it is v2 install
12:35:12 <geekosaur> so it's doing v2 install. don't try to install globally like that, let cabal itself manage it
12:35:26 <solonarv> which is perfectly reasonable to use for *executables* like alex and happy, no?
12:35:28 <ph88^> i grabbed this command from here https://gitlab.haskell.org/ghc/ghc/wikis/building/preparation/windows trying to follow this guide
12:35:45 <geekosaur> still want installdir possibly, but not prefix
12:36:05 <ph88^> i'll try replacing --prefix with --installdir then
12:36:09 <geekosaur> you want cabal itself to manage the install and put a (hopefully) copy in the installdir
12:36:56 <ph88^> https://bpaste.net/4DAA
12:37:31 <ph88^> no alex.exe and happy.exe in /usr/local/bin after running that command
12:38:05 <geekosaur> are they in /usr/local ?
12:38:54 <ph88^> no
12:39:36 <solonarv> ph88^: you did see that error message at the end, right?
12:40:00 <geekosaur> that was why I said (hopefully)
12:40:04 <solonarv> "Symlinking 'alex.exe'; Symlinking feature not available on Windows" does not sound like success to me!
12:40:42 <solonarv> you can tell cabal to copy the binary instead, IIRC the flag is called --install-method
12:40:49 <ph88^> yes it's still not working, can not build ghc on windows with this guide
12:40:54 * hackage implicit 0.3.0.1 - A math-inspired programmatic 2D & 3D CAD system.  https://hackage.haskell.org/package/implicit-0.3.0.1 (Juri_)
12:40:55 <solonarv> check 'cabal install --help' to be sure
12:41:10 <ph88^> ok i'll see about install-method
12:42:39 <dasli> Can GHCi stop with type error messages when GHC does not? And if so, what does it mean?
12:43:15 <ph88^> solonarv, the executables where placed in /usr/local instead of /usr/local/bin i suppose i can just adjust the path then
12:43:29 <dasli> I can run `stack build` in my project but not `stack ghci`.
12:48:34 <geekosaur> some versions of ghci can't do typed holes, although you'd need to apply an extension to get compilation to continue anyway
12:49:18 <geekosaur> there are also some things ghci can't handle but you'd need to be doing somewhat unusual things to run into them; try passing -fobject-code to ghci (I don't know how you do this with stack)
12:50:24 <geekosaur> (unboxed tuples don't work with ghci but this would normally manifest as a core dump, not a compile error)
12:51:37 <geekosaur> there's also that trying to load a multi-executable project might simply try to load two Main modules at the same time, which won't work well, but I thought stack made you say which one you wanted in that case
12:54:51 <dasli> The type error is about a free type variable that "would escape its scope."
12:55:53 <dasli> It's really bizarre because it's in a library that I can build AND compile interactively.
12:55:56 <geekosaur> that shouldn't differ between ghc and ghci
12:56:14 <dasli> But when I try to run my application that uses the library, there is this type error in a module of the library.
12:57:55 <dasli> *try to run my application in GHCi
12:58:31 <dasli> I can also build my application just fine in regular GHC
12:58:52 <dasli> so library+GHC, library+GHCi, and application+GHC work
12:59:01 <dasli> The problem is application+GHCi
13:02:12 <aveltras> dasli: i think there might be different configurations between ghci and compiled modules
13:02:44 <Gurkenglas> If I see duplicate code across two files in a github project, and therefore want to make one function that is called once from each file, how should I figure out what file to put it in?
13:02:56 <aveltras> dasli: might be due to the same thing than here https://stackoverflow.com/questions/47734895/error-because-type-variable-t-would-escape-its-scope-using-package-serv
13:03:01 <Gurkenglas> or what to call the file if i make a new one
13:03:38 <srid-irccloud> What happened to the `max-valid-substitutions` flag? It is missing from GHC 8.6; and I see no entry in the release notes.
13:03:43 <Gurkenglas> Would the default practice be to make a PR with a stupidly named new file so the maintainer can handle the bikeshedding?
13:05:26 <dasli> aveltras: thanks, I did try to use NoMonomorphismRestriction without success
13:06:38 <solonarv> Gurkenglas: I assume you're not in a situation where this is trivial, like one of these files already depending on the other?
13:07:27 <solonarv> if there isn't an eminently sensible common ancestor, then I would also punt that particular bit of bikeshedding onto the maintainer
13:07:28 <Gurkenglas> solonarv, no
13:08:15 <Gurkenglas> There are many modules that both files depend on, some of them in the same project
13:08:34 <merijn> srid-irccloud: GHC reports possible things you could use to fill a typed hole, I believe that flag limits how many it shows
13:09:15 <solonarv> merijn: number of valid hole fits is contorlled by -fmax-valid-hole-fits, actually
13:09:24 * hackage perceptual-hash 0.1.3.3 - Find duplicate images  https://hackage.haskell.org/package/perceptual-hash-0.1.3.3 (vmchale)
13:09:31 <merijn> hmm
13:13:41 <geekosaur> isn't that like alternate bindings for an undefined binding name? (tht is, type detection)
13:13:46 <geekosaur> typo detection
13:43:46 <dasli> hohoho I fixed it...
13:44:22 <dasli> By being painfully explicit about quantification and using ScopedTypeVariables
13:45:00 <dasli> This could probably be chalked up as "there was a problem that GHC ignored and GHCi did not"
13:45:08 <dasli> But practically speaking that sucks
13:47:53 <aveltras> having some data type like the following, is there a way to have a lens targeting _ealeAppRoot if _ealeAssetsRoot is Nothing ?
13:47:57 <aveltras> https://www.irccloud.com/pastebin/fUaX9f14/
13:48:53 <solonarv> it won't be a lens, since it has 0 or 1 targets
13:53:58 <daydayna`> how to undertand this: data (->) (a :: TYPE q) (b :: TYPE r)   -- Defined in ‘GHC.Prim’
13:54:27 <daydayna`> so function is also data ?
13:55:37 <aveltras> nothing shorter than this to get the Int ? maybe (eale ^. ealeAppRoot) id (eale ^. ealeAssetsRoot) ^. _1
13:56:25 <c_wraith> daydayna`: if it has a representation at runtime, it's data.  Morally.  Functions are actually GHC internals.  That module is just stubs for documentation.
13:57:15 <glguy> aveltras: fromMaybe is shorter than using maybe like that
13:57:23 <c_wraith> daydayna`: to be very explicit - nothing in that module is actually defined in that module.  They're all GHC internals.  That module is just where the documentation is located for them.
13:58:12 <Gurkenglas> I'm looking at the output of this language-agnostic code duplication detector and most of the output is pointing out near-identical walls of imports and I'm like "Yep. :("
13:59:16 <monochrom> That way lies parametrized modules >:)
13:59:25 <aveltras> glguy: indeed, thanks
13:59:43 <c_wraith> can't you do something with failing?  like eale ^? (failing ealeAppRoot ealeAssetsRoot)
13:59:50 <c_wraith> wait, no.
14:00:08 <c_wraith> eale ^? (failing (ealeAppRoot . _Just) ealeAssetsRoot)
14:00:31 <c_wraith> there, that'd do the job.  Use singular or something if you don't want to use ^?
14:00:36 <Gurkenglas> eale ^? ealeAssetsRoot <> ealeAppRoot
14:01:02 <c_wraith> That makes the same mistake I did the first time.
14:01:09 <Gurkenglas> ah right :D
14:01:39 <Gurkenglas> eale ^? (ealeAssetsRoot <> ealeAppRoot) . _Just
14:02:04 <monochrom> daydayna`: I wouldn't read too much into reserved words like "data".  Reserved words seldom mean literally what they mean in daily English.
14:04:07 <aveltras> thanks for your answers but i ll stick to fromMaybe for now since it seems equivalent in term of size. i should read optics by example again.. already forgotten everything :)
14:04:10 <monochrom> As a somewhat historical accident the Haskell designers chose "type" for type synonyms (therefore structural typing) and "data" for unique types (therefore nominal typing).  (->) is not a type synonym, therefore following the same convention the word "data" is used.
14:04:22 <daydayna`> the thing is that  (->) has a lot of type classes
14:04:28 <daydayna`> such as Monad, MonadRead
14:04:35 <monochrom> Yes it does.
14:04:36 <daydayna`> I just want to understand them
14:04:49 <daydayna`> It's a bit mind bending 
14:05:07 <daydayna`> (->) is a data constructor
14:05:27 <monochrom> If you can parse "instance Functor (Either a)" you can parse "instance Functor ((->) a)".
14:05:42 <monochrom> No, type constructor.
14:06:01 <daydayna`> conceptually, it takes time for me to get used to the idea that: a -> b is a data value
14:06:09 <daydayna`> of type (->)
14:06:21 <monochrom> If I have "data Foo a = MkFoo a a a", you don't call Foo a data constructor, you call MkFoo a data constructor, Foo a type constructor.
14:06:36 <monochrom> And again despite the syntax "data Foo".
14:07:01 <monochrom> No, a->b is not a value.  \x -> x*2 is.
14:07:09 <monochrom> a->b is still a type.
14:07:24 <monochrom> If you write "xxx :: yyy" then xxx is the value, yyy is the type.
14:07:32 <daydayna`> Yes, imean \x -> x*2 is a value, while it clearly is a function. that function is a value
14:07:39 <monochrom> You write "(\x -> x*2) :: (->) Integer Integer".
14:08:24 * hackage hpath-filepath 0.10.4 - ByteString based filepath manipulation  https://hackage.haskell.org/package/hpath-filepath-0.10.4 (maerwald)
14:08:29 <monochrom> A lot of this is straightforward if you use formal logic rather than reasoning by trusting English words.
14:09:08 <daydayna`> jle` explained to me the use case for (->) r being an instance of MonadReader
14:09:20 <daydayna`> I didn't write down his explanation
14:09:25 <daydayna`> do you know?
14:09:47 <monochrom> No.
14:09:54 * hackage hpath-io 0.13.0, hpath-directory 0.13.0 (maerwald): https://qbin.io/her-czech-9xiz
14:12:22 <monochrom> Apart from the tautological and obvious:
14:13:38 <monochrom> 1. There are use cases of MonadReader.  Sometimes you should write maximally polymorphic code that only commits to MonadReader rather than any particular instance, so that it's maximally reusable and composable with other code.
14:14:39 <monochrom> 2. When you do have that kind of code, and then at the use site you find that there is no other requirement, then at that use site you can instantiate to (->) XXX.
14:16:10 <monochrom> It's exactly the same story as: When you write a number-crunching algorithm you make its type Num a => a -> a.  And then when you use it you use it as Integer->Integer for example.  This is the reason Integer is a Num instance.
14:16:54 <daydayna`> i see
14:18:03 <aviD> Is it just me or does 8.8.2 use allot more memory than 8.8.1?
14:20:02 * hackage lightstep-haskell 0.5.2 - LightStep OpenTracing client library  https://hackage.haskell.org/package/lightstep-haskell-0.5.2 (DmitryIvanov)
14:20:44 <beka> monochrom: oh you. dont you know! `a -> b` is a value of the type Type1!
14:20:59 <beka> wait no, Type0, we count starting from 0, what am i saying
14:21:02 <monochrom> s/value/type/
14:21:11 <beka> sorry, i'm a dependently typed programmer
14:21:14 <beka> types are values! :)
14:21:15 <monochrom> Yes, is a Type0 of Type1
14:21:18 <beka> well, normal types
14:21:57 <berndl> beka: what does that have to do with dependent types?
14:21:59 <beka> sorry im trolling, daydayna` you should ignore what im saying, it's not releant to you p
14:22:01 <monochrom> No, dependent typing means values are [a special case of] types, not the other way round.
14:22:02 <beka> :p
14:22:37 <monochrom> The other way round is called dynamic typing or reflection or some nonsense like that.
14:22:49 <monochrom> (OK, the "nonsense" part is trolling, too.)
14:23:13 <berndl> Dependent types are types that depend on values.
14:24:13 <beka> monochrom: nah, values are not special cases of types, there's just an intersection. some values are term values, some are type values. some terms are not values b/c they have redexes, some types are not values b/c they have redexes
14:24:31 <monochrom> I should write a Declaration of Independence to denounce dependent typing.
14:24:33 <beka> unless by "value" we mean denotational value not normal form, but then the same is more or less true just under ealuation
14:24:44 <beka> monochrom: lmfao i would read that for lulz
14:24:51 <daydayna`> beka: when you say you are dependently typed programmer, you mean the idra language?
14:25:03 <beka> agda mostly, sometimes my own hacky languages
14:25:07 <beka> idris**
14:25:21 <berndl> Ah, I also code a lot in Agda.
14:25:44 <daydayna`> is adga as mature as haskell? do you see a big difference with haskell?
14:25:48 <monochrom> I'm also OK with s/value/term/
14:26:11 <beka> s/value/term/ isnt true tho! terms can have redexes, values can't!
14:26:29 <berndl> daydayna`: Haskell is an older language.
14:26:33 <beka> daydayna`: for the first question, i think it's hard to compare. for the second, i think its hard to compare :)
14:26:37 <berndl> In fact, Agda compiles to Haskell.
14:26:48 <monochrom> Oh, only in the context of "in a type experession I can use terms"
14:27:13 <daydayna`> My small brain can only hold one functional language i think ...
14:27:33 <beka> monochrom: hm?
14:27:52 <beka> one might go so far as to say all types are terms but not all terms are types 🤔 
14:28:03 <beka> at least in agda's model of dt this is true
14:28:05 <monochrom> The other way round!
14:28:06 <berndl> daydayna`: Don't limit yourself artificially.
14:28:19 <beka> monochrom: no!
14:28:25 <beka> not all terms are types at all
14:28:25 <monochrom> Bah it's hopeless to argue this.
14:28:28 <beka> 0 is not a type
14:28:36 <beka> but its definitely a term
14:28:42 <beka> and conversely, Nat is a term and a type!
14:28:45 <beka> at least in agda
14:28:59 <berndl> beka: Right. Nat is a term of type Set0.
14:29:05 <beka> indeed
14:29:06 <koz_> In this TH here: https://gist.github.com/kozross/ed8187b18f336390a5ee94c516def409, am I correct in that this just generates a sum type with n constructors?
14:29:56 <monochrom> Yikes speaking of dependent TH...
14:30:07 <beka> monochrom: are you new to dependent types? i dont recall how much experience you have with them. it's been a while since we've chatted
14:30:27 <beka> its been a while since ive been active on IRC in generally, really..
14:30:38 <monochrom> No.
14:30:51 <koz_> monochrom: Is that to beka or me?
14:30:57 <monochrom> beka
14:32:39 <monochrom> But the pasted code fragment doesn't look complete.
14:32:47 <beka> monochrom: ah yes, you're definitely not new to dependent types. strange. you're the only person i know with this much experience who would say these things.
14:32:52 <koz_> monochrom: It's OK - I checked, and answered my own question.
14:33:14 <beka> im curious what you mean, since there's clearly a difference in how we understand terms and types. could you elaborate more?
14:33:50 <monochrom> In a dependently typed language I can write "x :: Vector 0 Int" so I'm totally using the term 0 in a type expression.
14:34:32 <beka> i agree with this, yes
14:34:50 <monochrom> But I agree that I forgot that in "0 :: Nat :: Set" Nat is also a term because of "Nat :: Set".
14:35:12 <beka> ya
14:35:56 <beka> and `(\A -> A -> A) Nat` is also also a type, and a term (at least in one particular sense of term that people use for dependently typed languages)
14:39:05 <beka> but since it has a redex, it's not a normal form / value, whereas Nat has no redexes and thus is a normal form / value. assuming we're conflating normal forms with values, which is something we shouldn't do if we're being very precise, but who cares :p
14:39:46 <pounce> if i do $a <- getLine >> GetContents$ does a contain everything or everything minus the first line of input
14:39:47 <monochrom> When shouldn't we conflate normal forms with values?
14:40:17 <monochrom> What are the $ signs doing there?  Syntax error.
14:40:29 <pounce> writing too much TeX
14:40:47 <pounce> `a <- (getLine >> getContents)`
14:40:55 <monochrom> Then you should use \lstinline
14:41:07 <pounce> writing too much math
14:41:10 <pounce> specifically
14:41:21 <monochrom> and \leftarrow
14:41:27 <pounce> ohno
14:41:46 <monochrom> and \mathit{getLine}, \mathit{getContents}
14:41:56 <pounce> please....
14:42:06 <beka> monochrom: well, if we're being precise, values exist in a denotational semantics, while normal forms exist in syntax. of course, syntax is the initial semantics, and normal forms the initial values, but there are other semanticses and values which are non-initial
14:42:08 <monochrom> What's wrong with TeX in IRC is that people actually write completely broken TeX code.
14:42:17 <monochrom> If it's broken anyway, why bother.
14:42:18 <solonarv> beka: in GHC Haskell we have Type :: Type, so there is no Type{0,1,...} - it's all just Type :)
14:42:30 <beka> solonarv: only if we turn on TypeInType! :)
14:42:32 <pounce> ok fine
14:43:08 <koz_> beka: Nope. Type :: Type is _always_ true.
14:43:17 <beka> oh, it's now on by default? well thats fun
14:43:21 <pounce> if i do \mintinline{haskell}{do a <- (getLine >> getContents); print a} is the entire input printed or everything except the first line
14:43:35 <solonarv> in the typechecker, Type :: Type is always true
14:43:36 <koz_> -XTypeInType just enables a bunch of other extensions now (including DataKinds and some other stuff).
14:44:02 <solonarv> pounce: here is a hint for you: what is the type of (>>) ?
14:44:21 <solonarv> also, you could answer a question like that much faster by simply running that code :)
14:44:42 <pounce> (m a -> m b -> m b) yeah?
14:45:08 <pounce> but i didn't know if getContents always returned all of input or if it changed depending on what was already consumed
14:45:18 <monochrom> changes
14:45:44 <monochrom> only unconsumed suffix
14:45:49 <solonarv> ah, that's what your question was
14:46:17 <monochrom> But you could have run it and seen.
14:47:49 <solonarv> indeed
14:48:07 <pounce> but i thought it was going to be a quick question that people could help me with and not a lecture on types and why my latex is wrong ;-;
14:48:18 <pounce> the latter would have been faster than doing it myself , this was not
14:48:40 <solonarv> for some reason I misread your question as "will it print the first line, or everything but the first line, or everything?"
14:48:42 <sm[m]> pounce ahaha it's hard to get in and out of #haskell without a lecture :)
14:48:47 <pounce> ooh makes sense
14:48:49 <pounce> hehe
14:48:52 <solonarv> I must be tired 
14:48:59 <pounce> you're good, i appreciate the help
14:51:19 <monochrom> quick experiment trumps quick question
14:51:34 <monochrom> this is why I refuse to suck up to Piazza.
14:56:19 <hpc> that's pretty much all of my at-home programming
14:57:00 <hpc> i spend a few hours figuring out one tricky part of what i want to code, then decide that doing the rest of it is too annoying
14:59:43 <pounce> god i hate piazza
14:59:51 <pounce> all my courses use it
15:00:05 <monochrom> Use machine learning and Markov chain to read what you have written so far and write the rest for you. :)
15:00:07 <pounce> kinda guiltily use it all the time though because i love answering questions
15:04:01 <pounce> god the worst part of piazza is the networking stuff though. i'll answer questions all day just don't linkedin me
15:08:58 <pounce> goodness, this library seems like all C bindings... and all the links to the C documentation are dead
15:09:01 <pounce> this is not going to be a fun time
15:09:16 <monochrom> which library is it?
15:10:50 <pounce> https://hackage.haskell.org/package/z3
15:11:05 <monochrom> Oh, that.
15:11:22 <pounce> yeah sorry ive been on about z3 recently
15:20:53 * hackage tar-bytestring 0.6.1.1 - Reading, writing and manipulating ".tar" archive files.  https://hackage.haskell.org/package/tar-bytestring-0.6.1.1 (maerwald)
15:45:18 <pounce> is there any func in prelude `f :: Monad m => [m a] -> m [a]
15:47:02 <erisco> pounce, sequence
15:47:50 <robd> @pounce Hoogle (hoogle.haskell.org) will let you search for functions by type signature
15:47:50 <lambdabot> Unknown command, try @list
15:48:28 <pounce> robd: i tried searching it but nothing came up
15:48:40 <pounce> https://hoogle.haskell.org/?hoogle=%5Bm%20a%5D%20-%3E%20m%20%5Ba%5D&scope=package%3Abase-prelude
15:51:23 <robd> pounce: you probably need to tell it that m is a Monad? https://hoogle.haskell.org/?hoogle=Monad%20m%20%3D%3E%20%5Bm%20a%5D%20-%3E%20m%5Ba%5D&scope=package%3Abasic-prelude
15:53:31 <robd> oh and also category:Prelude https://hoogle.haskell.org/?hoogle=Monad+m+%3D%3E+%5Bm+a%5D+-%3E+m+%5Ba%5D&scope=category%3APrelude
15:57:07 <pounce> thank you!
15:57:15 <pounce> wasn't sure, because it came up with things but not in prelude
16:24:21 <hololeap> what's the best way to match a line that ends with "somestring" using megaparsec?
16:34:17 <sm[m]> satisfy (`endsWith` "somestring") or some such ?
16:35:24 <sm[m]> probably not
16:36:38 <MarcelineVQ> is  string "somestring" <* eol  too naive?
16:39:54 * hackage arduino-copilot 1.1.1 - Arduino programming in haskell using the Copilot stream DSL  https://hackage.haskell.org/package/arduino-copilot-1.1.1 (JoeyHess)
16:41:12 <sm[m]> how do you consume the stuff before somestring ? like .*? in a regex
16:42:10 <monochrom> perhaps manyTill
16:42:34 <coldpress> how do I get download the folder of a package from hackage using stack/cabal? something like what git clone does
16:42:58 <MarcelineVQ> stack.cabal unpack 
16:42:59 <monochrom> "cabal get" but let me check again
16:43:20 <MarcelineVQ> where unpack is a synonym of get iiuc
16:44:18 <monochrom> yeah, get
16:44:35 <sm[m]> cabal get -s is nice, clones the repo
16:44:38 <monochrom> "cabal --help" lists the commands, long but handy
16:47:24 * hackage NTRU 1.1.0.0 - NTRU Cryptography  https://hackage.haskell.org/package/NTRU-1.1.0.0 (Bodigrim)
16:58:19 <coldpress> MarcelineVQ, monochrom: thanks! it was hard to search for it, given the search keywords are similar to what stack/cabal do
17:12:54 * hackage smallcheck-kind-generics 0.0.0.1 - See README for more info  https://hackage.haskell.org/package/smallcheck-kind-generics-0.0.0.1 (MatthewFarkasDyck)
17:16:24 * hackage crypto-classical 0.2.1 - An educational tool for studying classical cryptography schemes.  https://hackage.haskell.org/package/crypto-classical-0.2.1 (fosskers)
17:34:24 * hackage streaming-osm 1.0.1 - A hand-written streaming byte parser for OpenStreetMap Protobuf data.  https://hackage.haskell.org/package/streaming-osm-1.0.1 (fosskers)
17:50:30 <pie_[bnc]> infinisil: hi, what
17:50:46 <pie_[bnc]> infinisil: oh, lol
17:50:47 <infinisil> Oh loooooo
17:50:50 <infinisil> l
17:51:24 * hackage versions 3.5.3 - Types and parsers for software version numbers.  https://hackage.haskell.org/package/versions-3.5.3 (fosskers)
17:52:26 <infinisil> Context: pie_[bnc] mentioned how there's sum(x, []) for list concatenation in python
17:52:38 <infinisil> And I say "join in haskell"
17:52:58 <maerwald> hmm, NTRU in haskell :>
17:53:29 <pie_[bnc]> infinisil: no it was for flattening a list of lists
17:53:55 <infinisil> That's what list concatenation is no?
17:54:01 <infinisil> You concat lists together
17:54:03 <MarcelineVQ> % :t join @[]
17:54:04 <yahb> MarcelineVQ: [[a]] -> [a]
17:54:46 <AndreasK> I forgot, can/will GHC specialize recursive functions? I know those won't be inlined but I can't remember if the same limitation is present for specialize
17:55:14 <AndreasK> Anyone know from the top of their head?
17:55:15 <pie_[bnc]> infinisil: concatenatio is ++ :P
17:55:36 <infinisil> Ah like that yeah :)
17:56:24 <MarcelineVQ> % let myConcat xs ys = join [xs,ys] in myConcat [1,2] [3,4]
17:56:24 <yahb> MarcelineVQ: [1,2,3,4]
17:57:15 <pie_[bnc]> MarcelineVQ: sure
18:25:10 <astk> following the instructions for installing haskell on linux results in an installation of 8.4, with an old cabal version
18:25:39 <astk> trying to compile with a cabal.project file doesnt seem to work with this version of cabal
18:26:15 <astk> are there instructions to build cabal 3 and a more up to date GHC on linux?
18:26:23 <sclv> which instructions on which linux?
18:26:31 <sclv> if you mean one you apt-get it could be old
18:26:33 <sclv> just use ghcup
18:26:45 <sclv> https://www.haskell.org/ghcup/
18:26:48 <astk> debian, its just apt-get install haskell-platform
18:27:12 <astk> the instructions are from haskell.org
18:27:14 <monochrom> debian sticks to older versions.
18:27:56 <astk> ghcup redirects to the same instructions...
18:28:07 <monochrom> No way. Cannot reproduce.
18:28:44 <astk> well, it detects a windows host OS and directs there at least...
18:29:37 <sclv> https://gitlab.haskell.org/haskell/ghcup/blob/master/README.md#installation
18:29:40 <MarcelineVQ> automatically redirects there?
18:30:17 <astk> no, here; https://www.haskell.org/platform/#windows
18:31:17 <astk> oh sorry i missed the other link for not windows, i can get to that curl command here; https://www.haskell.org/ghcup/#
18:31:24 <monochrom> Are you saying that https://www.haskell.org/platform/#windows tells you to use debian apt-get
18:31:36 <maerwald> O.o
18:31:43 <monochrom> Like, seriously
18:31:57 <maerwald> WSL now?
18:32:05 <astk> no i mean, it says to use haskell platform for windows, and the haskell platform instructions for debian was what i used before
18:32:43 <astk> maerwald: yeah i thought that was supposed to be on win10
18:32:51 <MarcelineVQ> are you able to take screenshots? very intersted to see what https://www.haskell.org/ghcup/ shows for you
18:32:53 <maerwald> oh well, did that curl command work?
18:35:06 <maerwald> https://gitlab.haskell.org/haskell/ghcup/blob/master/www/ghcup.js here's the host detection on the web page
20:56:24 * hackage discord-haskell 1.4.0 - Write bots for Discord in Haskell  https://hackage.haskell.org/package/discord-haskell-1.4.0 (Aquarial)
20:57:24 * hackage streamly-bytestring 0.1.0.1 - Library for streamly and bytestring interoperation.  https://hackage.haskell.org/package/streamly-bytestring-0.1.0.1 (psibi)
21:31:40 <pounce>  what the heck is the util package
21:31:52 <pounce> it uses shekel as an operator??
22:12:24 * hackage libmpd 0.9.1.0 - An MPD client library.  https://hackage.haskell.org/package/libmpd-0.9.1.0 (psibi)
22:43:10 <aleator> Hi! Quick question about HLint. Can I make a hint that matches `f $ x` whenever `x` is a do block?
22:58:12 <rsoeldner> Morning, still face some issues using ghcide with `servant-server` it always complains about `wai-app-static` with `cannot statisfy package servant-server... due to missing dependencie wai-app-static`. Does someone else had this issue ?
23:10:03 <kosmikus> rsoeldner: you mean you're trying to use it on the servant-server project? or on a project that depends on servant-server?
23:25:07 <n_hk> hi guys, I am seeking help to setup HIE with spacemacs
23:25:15 <n_hk> is this the right place to ask
23:26:07 <glubs9> is learn you a haskell down?
23:26:13 <glubs9> http://learnyouahaskell.com/
23:26:17 <glubs9> i can't seem to access it 
23:26:20 <glubs9> (Australia)
23:26:41 <n_hk> seems yes
23:26:55 <glubs9> does anyone know why?
23:27:03 <alfonsox> I think yes. I am also trying to access since morning
23:27:33 <amalloy> looks like DNS lapsed
23:27:36 <amalloy> maybe?
23:34:49 <rsoeldner> kosmikus, using the `servant-server` package on a project
23:36:15 <dmj`> n_hk: wayback machine would probably have it
23:38:03 <kosmikus> rsoeldner: and you get the error when invoking the ghcide command line tool?
23:41:45 <dmj`> n_hk: https://web.archive.org/web/20200115115627/http://learnyouahaskell.com/
23:41:46 <n_hk> anyone here using ghcide or hie
23:45:15 <rsoeldner> kosmikus, yes - as soon as I include the `servant-server` package, using just the `servant` package works
23:46:12 <rsoeldner> n_hk, trying to use it :)
23:52:27 <n_hk> rsoeldner, which editor are you using if I may know?
