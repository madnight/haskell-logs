00:25:28 <joel135> Is there a way to show desugared code in ghci?
00:25:39 <joel135> e.g. [x^2 | x <- [1..], then take 10]
00:27:26 <dminuoso> % :set -ddump-ds
00:27:27 <yahb> dminuoso: 
00:27:27 <[exa]> joel135: there's ghc option -ddump-core (or similar), not sure about ghci though
00:27:35 <[exa]> o nice
00:27:36 <dminuoso> % take 1 [x^2 | x <- [1..]]
00:27:37 <yahb> dminuoso: ; ==================== Desugared ====================; let {; $dEnum_aJNX :: GHC.Enum.Enum GHC.Integer.Type.Integer; [LclId]; $dEnum_aJNX = GHC.Enum.$fEnumInteger } in; let {; $dNum_aJNW :: GHC.Num.Num GHC.Integer.Type.Integer; [LclId]; $dNum_aJNW = GHC.Num.$fNumInteger } in; let {; $dShow_aJNZ :: GHC.Show.Show GHC.Integer.Type.Integer; [LclId]; $dShow_aJNZ = GHC.Show.$fShowInteger } in; let {
00:28:00 <dminuoso> joel135: Note, yahb is just a GHCi bot. :)
00:30:28 <joel135> that's a LOT of code
00:31:07 <dminuoso> joel135: The thing is, you're seeing a sort of intermediate language here.
00:31:39 <dminuoso> Everything is explicitly typed, all types are displayed using fully qualified names
00:31:52 <dminuoso> Dictionaries (typeclass instances) are made explicit
00:33:35 <dminuoso> (We call this intermediate language Core)
00:34:19 <dminuoso> If you wanted a semantical desugaring (according to the Haskell report), you can use @undo from lambdabot 
00:34:28 <dminuoso> @undo [x^2 | x <- [1..]]
00:34:28 <lambdabot> concatMap (\ x -> [x ^ 2]) [1 ..]
00:34:45 <joel135> @undo [x^2 | x <- [1..], mod x 2 == 1, then take 10]
00:34:54 <dminuoso> joel135: What is that `then take 10` at the end?
00:34:59 <joel135> https://gitlab.haskell.org/ghc/ghc/-/wikis/monad-comprehensions
00:35:06 <joel135> ^ I heard about it today.
00:35:27 <dminuoso> The gitlab wiki is so awfully slow.
00:35:55 <joel135> % :set -XTransformListComp
00:35:55 <yahb> joel135: 
00:36:29 <dminuoso> joel135: I see, @undo is not aware of monad comprehensions afaik
00:37:02 <dminuoso> At any rate, this will desugar to:
00:37:12 <dminuoso> @undo [x^2 | x <- [1..], mod x 2 == 1]
00:37:13 <lambdabot> concatMap (\ x -> if mod x 2 == 1 then [x ^ 2] else []) [1 ..]
00:37:19 <dminuoso> take 10 (concatMap (\ x -> if mod x 2 == 1 then [x ^ 2] else []) [1 ..])
00:37:59 <dminuoso> At least semantically. You could try `-ddump-ds-preopt` to see how exactly GHC will desugar it, but the thing is GHC does not desugar into Haskell, but rather straight into core.
00:38:11 <dminuoso> (Because -ddump-ds will run some preliminary simplifier passes)
00:38:59 <joel135> I think @undo is the sort of thing I was looking for, if it were complete.
00:39:35 <dminuoso> You could make an issue about it  https://github.com/lambdabot/lambdabot
00:40:14 <joel135> @undo do {a <- [1,2,3]; b <- [4,5,6]; return (a,b)}
00:40:14 <lambdabot> [1, 2, 3] >>= \ a -> [4, 5, 6] >>= \ b -> return (a, b)
00:40:15 <tomjaguarpaw> I'm so confused why cabal says the following when I do have both a packagename.cabal and cabal.project file
00:40:18 <tomjaguarpaw> Warning: There are no packages or optional-packages in the project
00:40:21 <tomjaguarpaw> cabal: There is no <pkgname>.cabal package file or cabal.project file.
00:40:37 <dminuoso> tomjaguarpaw: What command did you invoke?
00:40:41 <joel135> ok
00:41:10 <dminuoso> joel135: the core translation should be fine too, it just takes a little bit of getting used to it.
00:41:56 <dminuoso> joel135: https://gist.github.com/dminuoso/704f2aa9bd5d402ccb572b31e81da97e#file-gistfile1-txt-L60-L83 
00:42:00 <dminuoso> That's the desugared region
00:42:50 <dminuoso> If you just take that snipped, and get rid of all the @ and $ stuff, it should look like regular haskell.
00:44:10 <joel135> How did you highlight it?
00:44:31 <dminuoso> joel135: You can click on the line numbers to the right, and then use shift to select a region.
00:44:36 <tomjaguarpaw> dminuoso: cabal v2-build
00:44:48 <joel135> oh, and then the url changes
00:45:37 <dminuoso> Right
00:45:37 <tomjaguarpaw> cabal v2-configure also says "Warning: There are no packages or optional-packages in the project
00:45:59 <dminuoso> joel135: If you reload, Ive made a comment to the gist where I just copied the selected region, and just removed all type applications (@ foo) and dictionary applications ($ bar)
00:46:20 <dminuoso> You can then take that, remove all the qualifiers, and then it should look like regular haskell
00:46:46 <tomjaguarpaw> Oh, I know why it is. It's because cabal.project exists but doesn't have a packages: section
00:46:59 <dminuoso> Core is very readable, just dont get confused by all the TyApps and dict passing. :)
00:47:49 * hackage effet 0.3.0.1 - An Effect System based on Type Classes  https://hackage.haskell.org/package/effet-0.3.0.1 (MichaelSzvetits)
00:54:49 <joel135> thanks for writing it out
01:02:13 <[exa]> is there any concept in libraries such as "succ with wrapped overflow", say derived from Enum and Bounded? basically `succ' a = if a==maxBound then minBound else succ a`
01:10:32 <joel135> I don't seem to have Control.Monad.Group. Should it be imported with "import Control.Monad.Group"?
01:12:29 <dminuoso> heh
01:12:51 <dminuoso> It was removed in base-4.5.0.0 it seems
01:13:01 <dminuoso> Does grouping with MonadComprehensions still desugar to mgroupWith?
01:14:52 <joel135> I get parse error on input ‘]’
01:15:38 <joel135> [ x | x <- [1,1,2,2,3], then group by x ]
01:15:56 <dminuoso> % :set -XMonadComprehensions
01:15:56 <yahb> dminuoso: 
01:16:00 <dminuoso> % [(x :: [Int]) | x <- [1,2,1,2], then group by x ] :: [[Int]]
01:16:00 <yahb> dminuoso: ; <interactive>:8:49: error: parse error on input `]'
01:16:05 <dminuoso> Huh indeed.
01:20:55 <dminuoso> joel135: The wiki page is wrong
01:20:59 <dminuoso> https://db.inf.uni-tuebingen.de/staticfiles/publications/haskell2011.pdf
01:21:11 <dminuoso> Or..
01:21:13 <dminuoso> No its not!
01:21:21 <dminuoso> It seems someone broke the parser. File a bug report.
01:24:30 <joel135> ok
01:26:36 <joel135> But is it just the parser, if mgroupWith doesn't exist?
01:33:50 <dminuoso> joel135: It could also be the wiki page is out of date though
01:33:57 <dminuoso> The GHC manual does not mention `group by f`
01:34:00 <dminuoso> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadComprehensions
01:34:17 <joel135> Maybe I shouldn't file a bug report?
01:36:29 <dminuoso> joel135: Given that mgroupWith has disappeared, I'd say its working as intended.
01:36:56 <dminuoso> It seems you're now required to be explicit about the grouping function with `using`
01:37:09 <dminuoso> (Because without mgroupWith, the non-using syntax couldnt work)
01:37:30 <dminuoso> At the very least the wiki ought to be cleaned up in that regard.
01:37:44 <joel135> What is `using`?
01:38:51 <dminuoso> Refer to https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TransformListComp
01:38:53 <dminuoso> Err
01:39:00 <dminuoso> https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadComprehensions
01:39:04 <dminuoso> Looked so similar. :>
01:39:19 <dminuoso> % import GHC.Exts
01:39:19 <yahb> dminuoso: 
01:39:24 <dminuoso> % :set -XMonadComprehensions
01:39:24 <yahb> dminuoso: 
01:39:28 <dminuoso> % [ x | x <- [1,1,2,2,3], then group by x using GHC.Exts.groupWith ]
01:39:28 <yahb> dminuoso: ; ==================== Desugared ====================; let {; $dOrd_aJUI :: GHC.Classes.Ord GHC.Integer.Type.Integer; [LclId]; $dOrd_aJUI = GHC.Integer.Type.$fOrdInteger } in; let {; $dNum_aJUH :: GHC.Num.Num GHC.Integer.Type.Integer; [LclId]; $dNum_aJUH = GHC.Num.$fNumInteger } in; let {; $dShow_aJUL :: GHC.Show.Show GHC.Integer.Type.Integer; [LclId]; $dShow_aJUL = GHC.Show.$fShowInteger } i
01:40:08 <dminuoso> % [ x | x <- [1,1,2,2,3], then group by x using GHC.Exts.groupWith ]
01:40:08 <yahb> dminuoso: ; <interactive>:3:7: error:; Unexpected transform statement in a monad comprehension; Use TransformListComp
01:40:39 <dminuoso> % :set TransformListComp
01:40:39 <yahb> dminuoso: Some flags have not been recognized: TransformListComp
01:40:41 <dminuoso> % :set -XTransformListComp
01:40:41 <yahb> dminuoso: 
01:40:43 <dminuoso> % [ x | x <- [1,1,2,2,3], then group by x using GHC.Exts.groupWith ]
01:40:43 <yahb> dminuoso: [[1,1],[2,2],[3]]
01:41:04 <dminuoso> Boy this is extensions Ive never seen in use anywhere.
01:41:29 <dminuoso> % :set -XParallelListComp
01:41:29 <yahb> dminuoso: 
01:41:40 <dminuoso> % [ (x+y) | x <- [1..10] | y <- [11..20]]
01:41:40 <yahb> dminuoso: [12,14,16,18,20,22,24,26,28,30]
01:41:58 <dminuoso> ParallelListComp seems useful though.
01:42:16 <joel135> yes
02:18:59 <maerwald> is there a tool that can give an external API diff of two package versions?
02:19:39 <joel135> that sounds useful
02:25:18 <phadej> maerwald: https://imgur.com/a/pUiIJzG
02:25:51 <lortabac> http://hdiff.luite.com/
02:26:10 <dminuoso> phadej: Is that cabal-diff available outside your computer?
02:26:33 <maerwald> https://github.com/phadej/cabal-extras
02:26:58 <lortabac> oh pardon, you want changes in the external API, hdiff gives you the full diff
02:27:39 <dminuoso> Ah.
02:27:43 <phadej> I should be really reading interface files and not haddocks, but dealing with former is not something i'll do for free :)
02:27:53 <dminuoso> maerwald: hackage also lists https://hackage.haskell.org/package/precis
02:28:37 <phadej> uses haskell-src-exts :)
02:30:48 <maerwald> I'm also wondering how to tell ghc to stop using ld.gold... whatever I try, it ignores it
02:33:12 <dminuoso> data ASA_IPsec_Client_Firewall_Filter_Optional = ASA_IPsec_Client_Firewall_Filter_Optional_Optional | ...
02:33:18 <dminuoso> Mmm, this seems a bit too long..
02:34:14 <dminuoso> But, I could perhaps use OverloadedLabels, such that #Optional will map to `ASA_IPsec_Client_Firewall_Filter_Optional_Optional`.
02:35:34 <dminuoso> phadej: Curious, is that a bad thing?
02:35:51 <dminuoso> Im currently using haskell-src-exts for code generation, and so far Ive found it to be pleasant.
02:37:02 <Taneb> "Dan Burton is currently keeping haskell-src-exts on life support. If you are interested in more actively making improvements to this package, please make your interests known. You might want to try ghc-lib-parser instead."
02:37:25 <Taneb> (from the readme on GitHub for haskell-src-exts)
02:45:13 <phadej> dminuoso: when you comparing APIs it's a good idea to ask compiler what it will produce
02:45:41 <phadej> dminuoso: comparing parsed source is different
02:47:19 * hackage egison 4.1.0 - Programming language with non-linear pattern-matching against non-free data  https://hackage.haskell.org/package/egison-4.1.0 (SatoshiEgi)
03:06:19 <proofofme> TIL to pass --lib with `cabal install` ...
03:18:57 <maerwald> don't :)
03:26:41 <merijn> proofofme: Next step is to learn to not use "cabal install" at all, unless it's an executable ;)
03:27:02 <proofofme> how is that? 
03:27:37 <merijn> proofofme: There's very little workflows where installing a library that way really makes sense
03:27:59 <proofofme> for example, how would you install mysql-haskell?
03:28:19 <merijn> proofofme: Why do you need it installed? To use in your own code?
03:28:25 <proofofme> yeah
03:28:52 <merijn> proofofme: You just add it as a dependency to your project and then it gets installed automatically when you run "cabal build" on your code? :)
03:29:51 <proofofme> I haven't been using `cabal build`, just `ghc -o _______ _______.hs`
03:30:16 <merijn> ah, then you probably want to make the switch away from that :)
03:30:30 <merijn> proofofme: "cabal init --interactive" in your source directory should help get you started
03:31:34 <merijn> As soon as you start using dependencies or having more than 1 file (or really even with 1 file, tbh), using cabal will be much easier
03:33:09 <merijn> proofofme: See also: https://cabal.readthedocs.io/en/latest/index.html
03:33:15 <dminuoso> proofofme: Also, with `cabal install --lib` you rapidly get into dependency hell
03:33:42 <dminuoso> (I found that the 2nd or 3rd library easily leads to issues)
03:35:12 <dminuoso> I believe, that each library you install that way, essentially pins its own dependencies, and those become constraints for future libraries.
03:35:22 <dminuoso> At least thats what it seemed like
03:35:41 <proofofme> yeah...
03:37:35 <merijn> Someone should really update the getting started and nix-style chapter on read the docs to 1) focus on v2 workflows and 2) remove comparisons to sandboxes, now that they're gone. But I fear the only way that will happen is if "someone" equals "me" >.>
03:47:22 <fendor> it feels like this situation in a flat share where nobody wants to do the dishes, so it just piles up until someone crumbles and does it for everyone
03:48:53 <merijn> fendor: Well, it's also a matter of people having jobs, so contributions in people's spare time are prioritised by how much they affect/appeal to/are wanted by contributors
03:49:47 <merijn> Which is why I haven't done it yet. After 8 hours of work "writing docs" is never going to win from "implement something fun" or "videogames" :)
03:50:01 <fendor> I know, I did not want to say that anyone is being lazy, it is just a lot of work
03:52:36 <merijn> Congrats on the multi-home stuff, btw, I've been waiting for that for ages :>
03:54:50 <fendor> merijn, It is not merged yet T_T
03:55:16 <fendor> But I got two minor prs merged for it, so the diff becomes gradually smaller
04:03:26 <dminuoso> New record, nullary sum type with 2k constructors! :)
04:04:04 <dminuoso> Given the context, it's quite silly but the only sensible thing to do.
04:51:37 <kuribas> dminuoso: why not a newtype over Int?
05:15:49 * hackage epi-sim 0.2.2.0 - A library for simulating epidemics as birth-death processes.  https://hackage.haskell.org/package/epi-sim-0.2.2.0 (AlexanderZarebski)
05:59:20 * hackage uniqueness-periods-vector-common 0.5.1.1 - Generalization of the dobutokO-poetry-general package functionality  https://hackage.haskell.org/package/uniqueness-periods-vector-common-0.5.1.1 (OleksandrZhabenko)
06:14:49 * hackage uniqueness-periods-vector 0.3.1.0 - Generalization of the uniqueness-periods and uniqueness-periods-general packages functionality.  https://hackage.haskell.org/package/uniqueness-periods-vector-0.3.1.0 (OleksandrZhabenko)
06:39:49 * hackage uniqueness-periods-vector 0.3.1.1 - Generalization of the uniqueness-periods and uniqueness-periods-general packages functionality.  https://hackage.haskell.org/package/uniqueness-periods-vector-0.3.1.1 (OleksandrZhabenko)
06:46:20 * hackage http-conduit-downloader 1.1.1 - HTTP downloader tailored for web-crawler needs.  https://hackage.haskell.org/package/http-conduit-downloader-1.1.1 (VladimirShabanov)
06:58:49 * hackage mu-grpc-common 0.4.0.0 - gRPC for Mu, common modules for client and server  https://hackage.haskell.org/package/mu-grpc-common-0.4.0.0 (AlejandroSerrano)
06:59:49 * hackage mu-grpc-client 0.4.0.0 - gRPC clients from Mu definitions  https://hackage.haskell.org/package/mu-grpc-client-0.4.0.0 (AlejandroSerrano)
07:00:49 * hackage mu-grpc-server 0.4.0.0 - gRPC servers for Mu definitions  https://hackage.haskell.org/package/mu-grpc-server-0.4.0.0 (AlejandroSerrano)
07:25:39 <maerwald> yeah, why not
07:26:17 <merijn> ?
07:26:38 <maerwald> wrt newtype
07:30:21 <nihilazo> hello, I have ghc installed on an aarch64 machine and I want to set up stack/cabal and the rest of the tooling I need for writing haskell but I don't know how when all I have rn is ghc. How can I build those other tools? Also, do I need both cabal and stack or is it a case of using one or the other? which should I use?
07:31:01 <merijn> nihilazo: cabal used to have a bootstrap script
07:31:25 <merijn> nihilazo: Some relevant answers for you: https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07
07:32:43 <merijn> nihilazo: Here's a python bootstrapping script for cabal-install (and Cabal): https://github.com/haskell/cabal/tree/master/bootstrap
07:33:35 <nihilazo> ok. So, I think the tool I need is cabal-install and I need the cabal library, and I will need to bootstrap those as there's no binaries for aarch64 for those? Unless there is and I can't see them
07:33:51 <merijn> I doubt there's binaries for aarch64, yeah
07:34:42 <merijn> The python script should download, build and install them and finally build Cabal and cabal-install
07:36:28 <nihilazo> I have ghc already, I will see if that script works, thanks
07:37:18 <maerwald> nihilazo: http://oleg.fi/cabal-install-3.4.0.0-rc4/cabal-install-3.4.0.0-aarch64-ubuntu-18.04.tar.xz
07:37:23 <maerwald> does that binary work?
07:37:45 <nihilazo> I will try it
07:39:11 <nihilazo> it seems to, what is a good cabal command to use to test?
07:39:35 <maerwald> cabal repl --build-depends unix
07:40:04 <maerwald> you probably need 'cabal update' before
07:40:32 <nihilazo> well, that starts the repl, so I guess it's working
07:40:41 <nihilazo> it starts a GHCi
07:41:05 <nihilazo> (after spitting out some errors about library versions)
07:41:06 <nihilazo> but those don't seem to affect anything
07:42:04 <nihilazo> (the errors don't, cabal seems to work)
07:42:06 <nihilazo> cool, I don't need to build anything :D 
07:42:10 <nihilazo> thanks
07:42:14 <maerwald> what errors
07:45:07 <hseg> hi. sometimes i'm testing large datasets in ghci, is there a quick way to parallelize them?
07:45:32 <merijn> Depends
07:45:33 <hseg> specifically, i'm looking for sth like parMap :: (a -> b) -> [a] -> [b]
07:45:54 <merijn> How long are the individual functions?
07:45:54 <hseg> ... well, considering i'm them mapM_ print'ing this, it doesn't need to end in [b]
07:46:09 <hseg> text or runtime?
07:46:14 <merijn> the runtime
07:46:29 <hseg> pretty quick for the actual sizes i'm testing
07:46:34 <hseg> horrible asymptotics though
07:47:27 <merijn> I wrote a parallel map like that, but I didn't really optimise it to be low overhead, so for workloads that are less than 0.5s or whatever it's probably not efficient enough
07:47:41 <hseg> can give it a shot
07:47:46 <merijn> well, 0.5s is probably pessimistic
07:48:12 <merijn> hseg: https://hackage.haskell.org/package/broadcast-chan-0.2.1.1/docs/BroadcastChan.html#g:4
07:49:22 <merijn> `parMapM_ (Simple Terminate)` + some relevant number of threads
07:50:46 <hseg> sorry, connection dropped
07:52:06 <merijn> hseg: https://ircbrowse.tomsmeding.com/day/haskell/today/recent?id=63569&timestamp=1602686844#t1602686844
07:52:35 <hseg> ty
08:01:20 <dziban> hello!
08:02:58 <merijn> hseg: Lemme know how it performs, I've mostly been using it for parallel IO, I'm curious how well it works for parallelising short stuff
08:03:49 <ski> hello dziban
08:26:06 <hseg> merijn: sorry, was called elsewhere, giving it a shot now
08:26:18 <hseg> need to adapt my code a little though
08:28:20 <hseg> "a little" -- was using list comprehensions pretty heavily
08:37:50 * hackage streaming-bytestring 0.1.7 - Fast, effectful byte streams.  https://hackage.haskell.org/package/streaming-bytestring-0.1.7 (fosskers)
08:52:59 <tomenos> hey! Im a newbie in haskell, and Im trying to do a function that returns the most common vocal in a string (doesnt matter if is lower or upper case) 
08:53:04 <tomenos> any ideas? 
08:55:49 <merijn> Build a "Map Char Int" and then lookup the character with the highest count?
08:56:27 <tomenos> ow tks!!! gonna try it 
09:19:58 <hseg> merijn: ok, finally managed to bash things into the appropriate shape
09:20:05 <hseg> let's see how long it takes it
09:33:49 * hackage tasty-ant-xml 1.1.7 - Render tasty output to XML for Jenkins  https://hackage.haskell.org/package/tasty-ant-xml-1.1.7 (OliverCharles)
09:49:01 <kamek> to convert my own datatypes to and from Data.Text, is there a typeclass I should implement ? Or do people simply write plain functions
09:49:44 <monochrom> Just write plain functions.
09:50:19 <sim590> kamek: https://stackoverflow.com/questions/10988253/is-there-an-equivalent-of-the-show-typeclass-for-data-text
09:50:40 <sim590> I know that it's 6 years old though.
09:51:34 <monochrom> The problem with "a type class like Show" is that everyone wants it to do something slightly different, even for the same type. And it shows. (Pun!)
09:51:56 <kamek> :p
09:52:14 <monochrom> Some people want Show to stand for debugging output, some other want it to stand for user-facing output. Well they are in conflict.
09:52:21 <kamek> same for deserializing I assume ?
09:52:51 <monochrom> Oh deserialising is yet another different thing people want Show to stand for, too.
09:53:37 <dolio> Serializing to Show output is a clear bad idea, though.
09:54:40 <Uniaika> whereas having a simple set of rules like "Show is Read's counterpart, Debug/Inspect is for debugging output" <- now we don't try to shoehorn every usecase in one typeclass!
09:55:46 <monochrom> Yes I would support having multiple standard-endorsed classes, so one single class doesn't get too overloaded (pun!). For example look at Rust, it has two.
09:56:55 <monochrom> But human nature is "I want one simple standard, and it does what I want".
09:57:11 <Uniaika> monochrom: we need to form a coallition to upstream a Debug/Inspect for that kind of things
09:57:36 <Uniaika> monochrom: nah, human nature is dead for a while now. "Human Nature" is now what your marketing is making people thing their nature is
09:58:07 <monochrom> My opinion is that the stance "Show gives you valid Haskell syntax" is conceived out of the intersection of debugging output and serialization.
09:59:00 <dolio> I don't think it really makes much sense to push for Show/Read to be anything but the debug-ish one, really. The majority of instances are going to be derived according to the mechanical procedure that isn't good for user-facing display, and you can't automatically derive a good user-facing display.
10:00:01 <monochrom> Outputting Haskell syntax is sufficient, but not necessary, for debugging output purposes. For many types, there are nicer formats than Haskell syntax. For example my students agree that for tree types "deriving Show" is less readable than any homebrew format.
10:00:01 <dsal> When you can read what you show, you make a lot of things a lot easier.  I used to make clever user-friendly Show instances until I head to deal with someone else's.
10:00:16 <maerwald> Show and read may be whatever you want, if you control the data (and as such, the instance definition)
10:00:35 <monochrom> Outputting Haskell syntax is also sufficient, but not necessary, for serialization. Clearly there are more efficient formats.
10:01:08 <monochrom> BUT! If you want the debugging camp and the serialization camp to both agree on one format, it's Haskell syntax.
10:01:38 <Uniaika> + a pretty-printing package like pretty-simple
10:01:57 <Uniaika> :P
10:02:16 <dolio> Every time people invent fancy formatting for the debug output, they leave out important information that I eventually want when debugging, in my experience.
10:02:40 <dolio> So I just want to see the actually Haskell value.
10:03:44 <maerwald> meh, show could have been: show :: Style -> a -> String
10:03:58 <maerwald> data Style = Debug | Serial | Pretty
10:04:44 <geekosaur> except someone will come up with a fourth
10:04:52 <monochrom> You should that a type-level, not term-level, parameter. >:)
10:05:01 <monochrom> s/should/should make/
10:05:04 <maerwald> now we need open variants, easy
10:05:41 <monochrom> Oh, type-level is open, too.
10:05:47 <Uniaika> with a sprinkle of type apps
10:06:01 <monochrom> show :: (ShowStyle s, Show a) => s -> a -> String
10:06:19 * hackage uniqueness-periods-vector-examples 0.12.3.1 - Usage examples for the uniqueness-periods-vector series of packages  https://hackage.haskell.org/package/uniqueness-periods-vector-examples-0.12.3.1 (OleksandrZhabenko)
10:06:26 <monochrom> How do you like that monster? >:)
10:06:58 <monochrom> err
10:07:05 <monochrom> show :: (ShowStyle s, Show a) => Proxy s -> a -> String
10:09:18 <geekosaur> don't forget Text :)
10:09:42 <monochrom> Ah dammit.
10:09:54 <monochrom> show :: (ShowStyle s, Show a, IsString t) => Proxy s -> a -> t
10:10:24 <monochrom> Multiple dispatch at its finest.
10:11:25 <Uniaika> tbh, Show is good enough for debugging
10:11:34 <monochrom> CLOS be like "we figured that out 40 years ago, what took you so long"
10:11:57 <Uniaika> monochrom: what did it bring on the table?
10:12:26 <monochrom> Multiple dispatch.
10:21:57 <ezzieyguywuf> if you were going to write a web app in which (1) there's a drag/drop interface, (2) users can put stuff together in an order of their choosing with some limitations, (3) the output is a configured part number and an image displaying the configuration...what language would you use?
10:22:04 <ezzieyguywuf> I've never done something like this for a website
10:22:56 <shapr> well, I'd use Haskell but I've a decent chunk of experience building webapps in Haskell
10:23:28 <shapr> ezzieyguywuf: if it's for work, use what your team uses? if it's for fun, use what looks like the most fun?
10:23:49 * hackage http-conduit-downloader 1.1.2 - HTTP downloader tailored for web-crawler needs.  https://hackage.haskell.org/package/http-conduit-downloader-1.1.2 (VladimirShabanov)
10:24:28 <shapr> I think there should be a 20th anniversary celebration for #haskell
10:24:47 <shapr> that's a mere 28 weeks away!
10:24:51 <ezzieyguywuf> it's for work but we're not software guys
10:24:55 <ezzieyguywuf> so it's just kind of my fun side project
10:25:17 <ezzieyguywuf> I'm not averse to using haskell, but I think we might hire a software dude in india to do it and I'll manage him.
10:25:24 <ezzieyguywuf> just trying to figure out what sort of technologies are out there
10:25:39 <shapr> it sounds like a decent sized web app
10:25:45 <ski> shapr : 'twas in 2001 ?
10:26:00 <ezzieyguywuf> shapr: yea, it's def. not a quicky
10:26:06 <shapr> ski: according to chanserv Registered : Apr 30 22:22:56 2001 (19y 24w 3d ago)
10:26:34 <vincenz> shapr: Hey!
10:26:43 <ski> wasn't it at OpenProjects, some time before that ?
10:26:46 <shapr> ezzieyguywuf: My suggestion is to create a prototype in whatever language you enjoy most, and possibly hire someone to rewrite it in whatever language is most easily maintained by that person?
10:26:49 <monochrom> "28 weeks later"
10:27:05 <shapr> howdy vincenz! long time no see! What're you doing these days?
10:27:30 * ski idly recalls having to switch server host to connect to, with ircII, at some point
10:27:33 <monochrom> Too bad it is not April 1.
10:27:35 <vincenz> shapr: I'm still at Google, working on Maps, though now living in the US. you?
10:27:46 <ezzieyguywuf> shapr: that's not a bad idea. 
10:27:49 <shapr> ski: I thought freenode was the new name for openprojects? jag glömmer, det var förmycket tiden
10:28:02 <ezzieyguywuf> aren't there, like, a handful of languages that are the "go to" for this type of stuff on the web though?
10:28:06 <ezzieyguywuf> i.e. javascript, ruby?
10:28:20 <ezzieyguywuf> I don't really know, like I said I've got like 0 experience making stuff for the web outside of basic html
10:28:24 <ski> yes, but we still needed to connect using a different domain name
10:28:27 <shapr> vincenz: writing Haskell for a living. living in the DC area while my employer is in Boston
10:28:33 <dsal> ezzieyguywuf: javascript is what browsers speak, but it's not necessarily how you need to speak to the browser.
10:28:52 <ezzieyguywuf> vincenz: you work on google maps? that's awesome, that's a great piece of software.
10:28:56 <shapr> ezzieyguywuf: you could do 99% of what you need entirely on the server side, it depends on what's most comfortable for you
10:28:58 <dsal> You can write haskell or elm or something on the browser side, and haskell on the server side.
10:29:27 <ezzieyguywuf> shapr: hrm, that's starting to make sense to me. I think I need to educate myself on how this web stuff works, maybe do a small toy project
10:29:39 <shapr> ezzieyguywuf: if you have any questions, I'm happy to help!
10:29:45 <ezzieyguywuf> 👍
10:30:05 <shapr> my last year's project was a web app in Haskell that was 99% server side: https://github.com/shapr/fermatslastmargin/
10:30:08 <vincenz> ezzieyguywuf: Thanks!
10:30:18 <vincenz> shapr: I guess that's the new normal
10:30:24 <monochrom> ezzieyguywuf: Javascript is native for GUI in a web browser. However, if you like, many languages can be compiled to Javascript. Haskell (using GHCJS), Clojure, ...
10:30:40 <vincenz> monochrom: don't forget typescript :)
10:30:55 <monochrom> But GHCJS is a bit difficult to install. They say "just use Nix".
10:32:55 <bliminse> ezzieyguywuf: you may also want to consider the candidate pool that each language has. for frontend javascript definitely is number 1, and if you decide to split into backend/front I'm pretty certain Haskell
10:33:09 <bliminse> will limit your options way more than a language like java to be honest
10:33:23 <ezzieyguywuf> bliminse: yea, this is the type of stuff I was curious about too.
10:33:43 <maerwald> monochrom: if nix is the only way to install something... makes you wonder why
10:36:09 <gentauro> is there a Haskell project that reminds of `.NET LINQ`?
10:36:14 <phadej> finding a skillful person who enjoys writing web-backend java feels to be a hard (or costly) task
10:36:21 <gentauro> I want to get inspired :)
10:36:45 <gentauro> phadej: doesn't those people write Scala?
10:36:47 <dolio> GHC has extended linq-like monad comprehensions, doesn't it?
10:37:01 <maerwald> Scala devs are expensive
10:37:06 <gentauro> phadej: a know many and they are pretty happy about writing Scala for $$$
10:37:19 <phadej> gentauro: Scala would "limit your candidate pool" in the same way Haskell :)
10:37:23 <geekosaur> yes, at least for now; I've heard at least one proposal to remove them due to lack of use
10:37:52 <gentauro> phadej: but reaching out to Scala devs, would increase software quality
10:38:02 <phadej> :)
10:38:13 <maerwald> gentauro: why?
10:38:50 <phadej> I thing  that [scala devs increasing software quality] is a sarcastic comment
10:38:50 <gentauro> maerwald: at least the people I know that write Scala for food are pretty competent :)
10:39:09 <maerwald> gentauro: that's a weird conclusion then
10:39:43 <gentauro> maerwald: I will not talk bad about people working with other `tech stacks`, but it's very clear who I would work with ;)
10:39:44 <hseg> merijn: it ended up not being that much more efficient than a straight map
10:40:07 <hseg> *shrugs* happens
10:40:21 <maerwald> gentauro: I've worked with javascript devs who were pretty high on the engineer skill scale
10:40:36 <maerwald> I don't think the language has anything to do with it, it's just community bias
10:41:00 <maerwald> it might be true that low-slikk is less annoying in haskell
10:41:05 <maerwald> but that's a different thing
10:41:16 <maerwald> s/low-slikk/low-skill/
10:41:17 <gentauro> maerwald: lucky you. I worked with JS "peeps" (I wouldn't even call them devs) that didn't know what they were doing
10:41:40 <maerwald> you have the same in haskell, except that jobs are harder to get
10:41:45 <gentauro> maerwald: my point is that it's very difficult to hear that sentence with people working with Scala ;)
10:41:57 <merijn> maerwald: i think that's not entirely true
10:42:05 <gentauro> s/Scala/FP/
10:42:35 <merijn> maerwald: I think there is a historical (and decreasing) higher average skill in the Haskell community, but as it grows and expands it regresses back to the mean
10:43:16 <maerwald> which is a good thing
10:43:38 <merijn> Simply from sheer selection bias of "who feels attracted to small niche languages"
10:43:53 <gentauro> btw, I can see that I just jumped into the disccusion :) but did anybody see my question? 19:35 < gentauro> is there a Haskell project that reminds of `.NET LINQ`?
10:43:56 <gentauro> xD
10:44:46 <dolio> I answered it.
10:44:52 <dolio> And you didn't read it.
10:45:13 <gentauro> dolio: you didn't tagged me :P
10:45:38 <phadej> gentauro: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadComprehensions
10:45:45 <[exa]> Hm so sometimes when starting a scotty app on a mac, I'm getting: "file descriptor 202794296 out of range for select (0--1024). Recompile with -threaded to work around this.  Is there any good explanation of what's happening?
10:45:50 <phadej> here go your tag.
10:46:27 <monochrom> There is also this angle: If you can learn several different languages --- and very different, having learned n-1 of them doesn't help learning the nth one --- it is a good show of what your mind can do.
10:46:56 <gentauro> phadej: and dolio: it's just what I was looking for. Thx
10:48:03 <merijn> [exa]: "you need to recompile with -threaded"? :p
10:48:14 <merijn> [exa]: Looks like you hit a limitation of the non-threaded RTS
10:48:28 <ghoulguy> I bet 202794296 isn't a real file descriptor
10:48:42 <merijn> Also that
10:49:18 <[exa]> well yeah, the question is where this came from (can't find anything reasonable). I'm not aware of anything in the app that could break such stuff, it just starts scotty in a perfectly normal way, no magic, no workarounds, no nothing
10:49:31 <monochrom> threaded RTS is not going to get a higher quota for file descriptors.
10:50:04 <merijn> Well, it looks like he hit a *select* limit
10:50:09 <geekosaur> but it may use poll instead of select() which by inherent design has a low file descriptor limit
10:50:09 <merijn> Not a file descriptor limit
10:50:10 <ghoulguy> The -threaded bit is a distraction. Something is generating or corrupting an invalid file descriptor
10:50:29 <Ariakenom> threaded rts behaves nicer in a bunch of ways, right?
10:50:35 <merijn> Ariakenom: Yes
10:50:38 <geekosaur> that said, I agree that does not look to me like it was a valid fd in the first place
10:50:58 <merijn> Ariakenom: You probably always want the threaded RTS (but with parallel GC disabled! which should become the default sometime soon-ish)
10:50:59 <monochrom> However, non-threaded RTS asks for periodic SIGVTALRM, this can interfere with syscalls, and after a long story may lead to weird return values.
10:51:42 <merijn> The parallel GC is bad in most cases, unless you know what you're doing
10:51:44 <Ariakenom> merijn: soonTM :p. It's been the less buggy ines for years I think
10:51:54 <Ariakenom> less buggy one
10:52:02 <ghoulguy> OK, it could be the case that the non-threaded runtime is completely broken and shouldn't be used and in this case error message recommendation coincidentally applies
10:52:06 <[exa]> like, I shall just compile with threaded and hope that this stops happening (the random nature of this occurring is what scares me), but a better explanation that "please just workaround" would be really cool
10:52:33 <[exa]> certainly the number is not a valid FD
10:53:34 <geekosaur> especially not on a Mac which has rather low fd limits out of the box, unlike linux
10:53:41 <[exa]> yeah
10:53:59 <[exa]> "non-threaded runtime is completely broken" oh noes
10:54:11 <monochrom> Hrm, this can be very evil.
10:54:17 <geekosaur> well, I wouldnt say completely broken, but it's not very stable
10:54:25 <[exa]> I can collect versions of everything just for reference
10:54:37 <[exa]> (it's not my box in particular)
10:55:18 <merijn> [exa]: It's not "completely broken", but there's a bunch of libraries that cannot work correctly with it (for example, process)
10:56:18 <geekosaur> process can't work correctly anyway :/
10:56:18 <monochrom> Here is the evil possibility. The suggestion "use -threaded" may be a blanket suggestion that applies to other scenerios but not yours.
10:56:22 <merijn> Just remember "+RTS -qg" :p (or use -with-rtsopts)
10:57:36 <ghoulguy> Why -qg?
10:57:55 <geekosaur> disable parallel gc, I think
10:58:00 <merijn> Disables parallel GC
10:58:06 <ghoulguy> Yeah, I gathered that much
10:58:39 <geekosaur> because that's only useful with specific workloads currently, as already discussed (and comes up in here every couple weeks)
10:58:47 <merijn> ghoulguy: Because parallel GC often causes *huge* slowdown, an order of magnitude in my own code
10:59:59 <ghoulguy> Do you know what kinds of workloads it is good for?
11:01:13 <merijn> No clue, haven't seen one yet :p
11:01:37 <merijn> And even when it's good you'll want to explicitly configure how many parallel threads, instead of 1 per capability
11:02:12 <monochrom> Yeah, I now feel that perhaps the non-threaded RTS was not the cause, rather the messenger. It notices bad FDs more often because of its other limitations. If you switch to the threaded RTS, you are not eliminating the cause, only eliminating a messenger.
11:09:42 <nihilazo> is it true that ghc can only cross-compile itself and not other programs? Why?
11:09:46 <nihilazo> (I'm struggling with compiling stuff on my slow tablet that keeps freezing up)
11:10:46 <monochrom> I don't know whether it's true, and I don't know why. But may I tell you an Aesop fable?
11:11:21 <monochrom> A group of mice organized a conference to discuss how to deal with the threat from the cat.
11:11:45 <phadej> a/wg 32
11:11:51 <phadej> err
11:11:56 <monochrom> They all agreed that a bell needed to be put on the cat so the mice could get early warning.
11:12:09 <monochrom> They also agreed that someone else should do it.
11:14:51 <nihilazo> I don't understand compiler-fu enough to add something like that to ghc, if that's what you're suggesting
11:15:09 <monochrom> No.
11:15:47 <ghoulguy> nihilazo: Maybe you're the cat in this story? \o/
11:16:04 * ghoulguy puts a bell on nihilazo just in case.
11:16:07 <nihilazo> I don't really understand this story
11:16:24 <monochrom> But instead of looking for a technical reason why something isn't done, it is usually much simpler to look for an economic reason.
11:16:53 <ghoulguy> I think the first question is just "is this the case?"
11:17:46 <davean> nihilazo: why do you think GHC can only cross compile its self?
11:18:26 <nihilazo> I remember being told that before, although it may be totally untrue
11:18:49 <dsal> I use hugs to run ghc.
11:19:03 <davean> GHC is just a Haskell program
11:19:19 <davean> You need things like iserv to cross compile if TH is involved
11:21:07 <nihilazo> ah, it seems that you can build ghc to work as a cross compiler
11:21:21 <nihilazo> why did I not know this before
11:24:58 <nihilazo> seems like it's a bit of a pain though
11:32:08 <davean> cross compilation always is, and I'm not sure why other than for GHC you'd want to do it.
11:34:35 <geekosaur> gcc can only cross-compile because all the real work is done by separate programs behind the "gcc" wrapper
11:35:11 <geekosaur> each group of separate programs is specific to a host and target
11:35:44 <geekosaur> (which is also how the gcc wrapper can also compile c++, ada, etc. if you have those backends installed)
11:37:20 <zwarag> I'm having the troubles to understand how exactly is " f <= n `div` 2 " as seen in this SO answer interpreded ?  f<=n is a Bool right? and is this casted automatically to 0 or 1 to be "{0 or 1} `div` 2"?    https://stackoverflow.com/questions/24982800/haskell-factors-of-a-natural-number/24983236#24983236
11:37:52 <monochrom> f <= (n `div` 2)
11:38:04 <zwarag> merci
11:39:25 <merijn> zwarag: There are no auto-casts in haskell, ever
11:39:54 <merijn> zwarag: So logically it'd either be a type error or you got the bracketing wrong. You can figure out the bracketing by asking ghci for the fixity of operators
11:40:09 <merijn> % :i (<=)
11:40:09 <yahb> merijn: type Ord :: * -> Constraint; class Eq a => Ord a where; ...; (<=) :: a -> a -> Bool; ...; -- Defined in `GHC.Classes'; infix 4 <=
11:40:13 <merijn> % :i `div`
11:40:14 <yahb> merijn: type Integral :: * -> Constraint; class (Real a, Enum a) => Integral a where; ...; div :: a -> a -> a; ...; -- Defined in `GHC.Real'; infixl 7 `div`
11:40:32 <merijn> So <= has fixity 4 and `div` has 7, meaning `div` binds more tightly
11:53:50 * hackage pandoc 2.11.0.1 - Conversion between markup formats  https://hackage.haskell.org/package/pandoc-2.11.0.1 (JohnMacFarlane)
12:16:50 * hackage calamity 0.1.21.0 - A library for writing discord bots in haskell  https://hackage.haskell.org/package/calamity-0.1.21.0 (nitros12)
13:13:19 * hackage time 1.11 - A time library  https://hackage.haskell.org/package/time-1.11 (AshleyYakeley)
13:59:19 * hackage j 0.1.1.0 - J in Haskell  https://hackage.haskell.org/package/j-0.1.1.0 (vmchale)
14:05:11 <christo> anyone know if can set cabal build to refer to cabal v1-build? it's so my haskell language server works with a certain project
14:05:31 <christo> this projects only builds with v1- prefix
14:05:47 <christo> but haskell language server uses build by default i think
14:05:56 <monochrom> Cannot. But you could either use an older version, or write a shell script to do the translation.
14:06:18 <monochrom> To be sure, it may be a bad idea to go back to an older version. :)
14:06:28 <christo> i tried using cabal 2.4
14:06:34 <christo> and it still had issues with that
14:07:07 <christo> in that case is there a way to tell haskell language server to use v1- instead? 
14:07:16 <monochrom> It is very strange that v2- doesn't build that project. Maybe better to debug that instead.
14:07:21 <Uniaika> why is that a problem, christo?
14:07:27 <Uniaika> why do you need v1-?
14:07:44 <monochrom> Because v1- won't be around forever.
14:07:54 <christo> https://github.com/Euterpea/Euterpea2
14:07:58 <monochrom> To be sure, we're talking about 5 years into the future.
14:07:58 <christo> is the project
14:08:20 <christo> and i can built it with v1-build
14:08:52 <christo> but haskell language server in vs code uses default "cabal build" to do it's ide features
14:09:08 <christo> i want to use the project with ide support/features working
14:12:17 <Patrick24> Is anyone available to help me out with this: https://stackoverflow.com/questions/64360903/trouble-with-xmonad-handleeventhook
14:12:35 <monochrom> Ah, custom Setup.hs. Now how do I convince it to use a modern Cabal lib?
14:13:46 <monochrom> Let's give --allow-newer a try.
14:14:38 <dcoutts> monochrom: using the "custom-setup" section
14:14:38 <dcoutts> https://cabal.readthedocs.io/en/3.4/cabal-package.html#custom-setup-scripts
14:14:56 <dcoutts> and constraining the Cabal version in setup-depends
14:15:13 <monochrom> Ah nice. Thanks. This is for christo.
14:15:15 <Uniaika> Patrick24: any reason you're not asking on the #Xmonad channel?
14:15:40 <monochrom> Also, my blunt --allow-newer got passed that barrier. (But now I need to install asound-dev or something)
14:16:49 <monochrom> libasound-dev
14:21:23 <proofofme> I wish cabal operated like yarn or npm
14:22:52 <hpc> each package can only have a single installed version?
14:23:34 <proofofme> well, `cabal install` doesn't add to the cabal file ... and it creates a dependency nightmare, from what I found out the hard way the last few days
14:24:09 <hpc> ah
14:25:16 <hpc> rpm has the same issue, it's pretty trivial to create an rpm that doesn't have a declared dependency it's supposed to
14:25:22 <christo> monochrom dcoutts did u guys figure it out? 
14:25:54 <monochrom> Yes. Final testing.
14:26:13 <monochrom> @paste
14:26:13 <lambdabot> A pastebin: https://paste.debian.net/
14:26:16 <monochrom> err
14:26:19 <monochrom> @where paste
14:26:19 <lambdabot> Help us help you: please paste full code, input and/or output at eg https://paste.tomsmeding.com
14:27:19 <monochrom> And pasting patched *.cabal file
14:27:45 <christo> brb
14:30:02 <monochrom> christo: https://paste.tomsmeding.com/bLH1voGn
14:38:22 <christo> monochrom just on a call will check it out in a mo
14:43:27 <proofofme> I created a new project just to make things cleaner and I am trying to link mysql-haskell.  I keep getting an error.  I pasted my cabal file and error output to https://pastebin.com/raw/7bu2xSnm
14:47:40 <monochrom> Interesting, I just need an empty custom-setup section, I don't need to write setup-depends.
14:54:44 <proofofme> Do y'all know how to fix the dependency error on https://pastebin.com/raw/7bu2xSnm ?
14:54:47 <yushyin> proofofme: if I read it correctly the memory package is rejecting base>=4.13, you will need <4.13. Maybe you should try an older ghc with base-4.12
14:55:40 <monochrom> Use --allow-newer again? >:)
14:55:53 <monochrom> can be more refined: --allow-newer=base
14:57:23 <yushyin> or allow-newer=memory, because mysql-haskell rejects memory-0.15, but memory-0.15 supports base<5
14:58:14 <proofofme> like this `$ cabal run :clay-sniper --minimize-conflict-set --allow-newer=memory`?
15:03:05 <christo> monochrom this worked for you? allowed it to work with haskell-language-server in vs code? 
15:03:36 <monochrom> I don't use HLS. But "cabal build" succeeds.
15:06:47 <yushyin> proofofme: you may try, but it may go wrong and will not succeed
15:07:52 <proofofme> it didn't succeed ...
15:08:12 <proofofme> figuring out how to set ghc to older version with base-4.12 rn
15:08:16 <yushyin> sometimes upper bounds have a valid raison d'etre :)
15:08:26 <proofofme> ha true
15:08:26 <christo> monochrom thx, trying now
15:08:44 <monochrom> "ghcup list" lists GHC versions with base versions.
15:08:58 <christo> monochrom what version of cabal did you use? 
15:09:01 <christo> and ghc
15:09:21 <monochrom> GHC 8.8.4, cabal-install 3.2.0.0
15:09:49 <christo> ok
15:09:51 <christo> thx
15:10:57 <hekkaidekapus> proofofme: If you don’t want to patch mysql-haskell like the patched package in the parallel thread, use ghc-8.6.5. <https://matrix.hackage.haskell.org/#/package/mysql-haskell>
15:11:44 <koz_> I would recommend using ghc-8.6.5 unless you really need something which demands 8.8.
15:11:46 <koz_> It's easier.
15:11:51 <proofofme> yup, used `ghcup set 8.6.5` just now.  now trying to figure out how to install it ... I'm pretty new to non-trivial classroom Haskell lol
15:12:03 <monochrom> proofofme: "cabal build -w ghc-4.2" is the syntax
15:12:28 <monochrom> in case you don't want to statefully do "ghcup set"
15:13:55 <hekkaidekapus> proofofme: monochrom is saying `cabal build clay-sniper:exe:clay-sniper -w ghc-8.6.5` when you will be done the ghcup command.
15:13:55 <monochrom> To be sure, "cabal ... -w ghc-4.2" is an oxymoron in itself :)
15:14:18 <christo> monochrom it seems to be working with haskell-language-server in vs code now, thx
15:14:24 <christo> what exactly did your changes do/mean? 
15:14:25 <monochrom> Oh if you have done "ghcup set ..." then you don't need the -w thing.
15:14:35 <monochrom> See the diff
15:14:45 <christo> i saw the diff
15:14:54 <monochrom> Ah OK.
15:14:59 <christo> but how did you/why did you find to add teh setup thing
15:15:17 <monochrom> HCodec needs a newer version, 0.5.1 is no longer compatible with today's libraries.
15:15:54 <monochrom> the "custom-setup" section says to not insist on using old libraries for Setup.hs
15:16:11 <monochrom> (instead, implicitly, whatever comes with the compiler)
15:17:12 <monochrom> Ah how did I find out I needed them.
15:17:25 <christo> ye, that aswell
15:17:35 <monochrom> I started with a very blunt --allow-newer to check that something succeeds.
15:17:54 <larou> well, i have checked every language - and i cant express cyclic trees in any of them
15:18:03 <larou> how fruitless 
15:18:29 <monochrom> Well one thing I know from the error messages is that cabal-install was trying an old Cabal lib version for Setup.hs.
15:18:57 <larou> all i learned is how haskell is the best / only language that even comes close 
15:19:08 <monochrom> After I got past that, I noticed that HCodec-0.5.1 had an incompatibility.
15:19:29 <monochrom> And those were the only two obstacles, it turned out.
15:19:51 <monochrom> So, observations, hypotheses, observations again, repeat
15:20:30 <monochrom> Yeah I know right, nothing can express cyclic trees.
15:20:43 <hekkaidekapus> larou: The standard list type in Haskell is a linked list. You don’t need to extend anything, just use it. (I’m referring to your post in #ghc.)
15:20:44 <larou> i also learned that in a world of 10 billion people, and a plethora of computing languages - there is not that many people on IRC
15:21:21 <larou> on #ghc i wrote;
15:21:21 <larou> is there any way to extend the keyword "data" to include cyclic references, such as for expressing linked lists?
15:21:27 <monochrom> or an unmovable unstoppable data structure for that matter in the same genre.
15:21:29 <larou> i meant doubly linked lists
15:22:35 <proofofme> it's still building ... so I think it's going to work.  why did this `cabal build clay-sniper:exe:clay-sniper -w ghc-8.6.5` end up working?
15:22:35 <larou> monochrom: nothing compelling anyway  
15:23:07 <monochrom> probably because ghc-8.6.5
15:23:30 <monochrom> an older base version that your dependencies insist
15:24:29 <hekkaidekapus> larou: In that case too, you don’t need to ‘extend data’.
15:24:31 <larou> im not sure what to do now...
15:24:50 <monochrom> I guess I should write an updated tutorial on the cabal model so people don't just treat it as a black box.
15:24:50 <larou> hekkaidekapus: you do, if you want to express that fucntionality at type level
15:24:59 <hekkaidekapus> Did you try Hackage?
15:25:02 <larou> otherwise its just a record filed
15:25:08 <larou> field*
15:25:26 <larou> hekkaidekapus: for an alternative data keyword!?
15:26:00 <hekkaidekapus> Okay, I get it. You’re not very familiar with Haskell.
15:26:15 <hekkaidekapus> @hackage data-cycle
15:26:16 <lambdabot> https://hackage.haskell.org/package/data-cycle
15:26:22 <christo> monochrom cool man, cheers
15:26:28 <hekkaidekapus> larou: ^^^
15:26:31 <larou> hekkaidekapus: any time i want to "tie the knot" i can only do so using a function. nothing at type level
15:26:47 <larou> hekkaidekapus: its literally impossible that could be doing what im describing
15:27:03 <hekkaidekapus> larou: paste what you have so far.
15:27:15 <hekkaidekapus> @where paste -- larou
15:27:15 <lambdabot> Help us help you: please paste full code, input and/or output at eg https://paste.tomsmeding.com
15:27:26 <larou> data Cycle a = MkCycle Int (DList a)
15:27:34 <larou> data DList a = MkDList (DList a) a (DList a)
15:27:51 <larou> what differentiates the usage of those 2 DLists in data DList?
15:28:34 <larou> always we have "downwards" references, and any time we want to make it seem like a "backwards" or "upwards" reference, this has to be done by a mechanism at value level
15:28:38 <larou> not at type level
15:28:45 <larou> thats why i asked in #ghc
15:29:42 <larou> hekkaidekapus: i dont use anything except pastebin.com and github after i lost about a years worth of references on lpaste
15:29:49 <monochrom> Then you can give up now. For at least 5 more years Haskell won't have cyclic data structures at the type level.
15:30:05 <larou> exactly!
15:30:13 <larou> so wft am i supposed to do!?
15:30:34 <larou> just prepare abstractions that it will satisfy in the mean time?
15:30:42 <monochrom> That's a question better posed to a counsellor or life coach.
15:31:21 <larou> yeah, they could prescribe me some dank nugs to help me cope with this existential nightmare 
15:31:55 <larou> well, one other thing i wanted was something like ListT done right but for graphs...
15:32:21 <larou> so i could have something like IOGraph for emulating interacting servers in the ST monad
15:33:04 <larou> oh yeah, thats still graphs... i *suppose* i could use Int lookup graphs. but i have done *so much work* to avoid doing that!
15:33:47 <larou> though i suppose it world force me to get the abstractions, like stencil convolutions, nearest neighbour access, etc. formulated 
15:53:19 * hackage formatting 7.1.1 - Combinator-based type-safe formatting (like printf() or FORMAT)  https://hackage.haskell.org/package/formatting-7.1.1 (AlexChapman)
16:01:49 * hackage churros 0.1.1.0 - Channel/Arrow based streaming computation library.  https://hackage.haskell.org/package/churros-0.1.1.0 (LyndonMaydwell)
16:18:29 <christo> monochrom why & what do you use haskell for? 
16:18:39 <christo> i'm obviously completely new to it
16:19:04 <christo> i'm learning it because of "haskell school of music" for my dissertation project
16:19:19 <christo> which is about learning computer music concepts and Euterpea Haskell Lib
16:25:10 <Guest34530> hello
16:25:47 <yushyin> hello Guest34530
16:26:00 <christo> it's me, just testing a mac irc client
16:26:15 <yushyin> hello christo :)
16:26:16 <christo> what do ya'll guys use haskell for? 
16:26:19 <christo> hey !
16:26:48 <peutri> most everything
16:26:53 <Axman6> christo: not that you asked, but I've been using Haskell professionally for about 6 years (with a few shorter jobs using it before that) I've used it in finance, on a high frequency trading system, made web services with it for geospacial data, and plenty of data processing along with that, I've used it for large scale data processing on the cloud with a lambda-and-queues architecture, and now work on a system in a Haskell derived language to
16:26:53 <Axman6>  replace a critical part of one of the largest stock exchanges infrastructure
16:27:06 <Axman6> (ok, in the time I took me to write that you did ask)
16:28:15 <christo> cool
16:28:33 <christo> why would it be good for computer music? and why use it atall over other languages
16:28:56 <christo> i've seen a lot of people use it for computer music
16:29:32 <christo> Axman6 on enterprise/commercial scale haskell projects, what build tools/tools do u use? 
16:29:35 <Axman6> I don't think there's anything in particulaar that makes it good for computer music specifically. but overall, the incredibly powerful type system lets you get your thoughts in order, in a way that can be reliably checked
16:30:27 <frdg> christo: Here is a nice video about making music with haskell: https://www.youtube.com/watch?v=FYTZkE5BZ-0
16:30:42 <Axman6> in the past I used stack mostly, but it is(or was) somewhat more optimised for app development, as opposed to library development, which worked well in a commercial setting
16:31:23 <christo> Axman6 why should i learn haskell? does it allow me to do things say Java couldn't? 
16:32:23 <christo> or is it purely because people like the way it forces you to write code
16:32:34 <Axman6> no, most languages are turing complete and therefore equivalent, by sme definition. but the pleasure of doing it will be quite different, and some languages let you express a lot more with a lot less text
16:33:15 <Axman6> there are many many things which are much nicer in Haskell than other languages though.
16:33:35 <Axman6> writing reusable code is a pleasure, since the type system allows us to be very generic about our types
16:33:38 <christo> so haskell is about the elegance of the code that is being written itself
16:33:53 <Axman6> I wouldn't say that's what  it's about
16:34:32 <christo> i'll have to look into it more :)  
16:34:53 <christo> can i do multi-threading n' stuff in haskell? 
16:35:13 <Axman6> Haskell is probably one of the best languages for doing concurrent programming in
16:36:54 <Axman6> for two reasons - the purity of functions and lack of mutability mean that a lot of the problems with concurrency are eliminated unless you are explicit about them. GHC's multithreading system is one of the most lightweight implementations of any languages, you can happily run hundreds, thousands, or even tens of thousands of threads - network servers are usually implemented by just making a new thread per connection
16:39:29 <christo> cool
16:40:18 <christo> in haskell do you have the notion of instances (objects) like in java?
16:40:43 <Axman6> we just have data, which is immutable. we do not have objects
16:40:49 <christo> thx frdg
16:40:57 <Axman6> @sec Bool
16:40:58 <lambdabot> data Bool = False | True deriving (Eq, Ord)
16:41:09 <Axman6> @src Maybe
16:41:10 <lambdabot> data Maybe a = Nothing | Just a
16:42:05 <koz_> Is there something like 'foldMapA :: (Applicative m, Monoid n, Traversable t) => (a -> m n) -> t a -> m n
16:42:07 * Axman6 (is in a meeting and will be back later)
16:42:08 <koz_> '
16:42:09 <christo> cause' i was thinking how would one use haskell to write a game with 20 instances of Frog for example. but i'm sure there's a way
16:42:27 <koz_> christo: An instance is just a data value.
16:42:36 <koz_> So you'd just have 20 things of type Frog.
16:42:41 <christo> cheers for info Axman6 appreciate it
16:43:01 <christo> i see
16:43:57 <koz_> I mean, I guess it's just 'foldMapA f = unAp . foldMap (Ap . f)'.
16:46:46 <MarcelineVQ> koz_:  fold  where Monoid (m n)
16:47:23 <koz_> MarcelineVQ: Yeah, which is easiest to get here when we use Ap, rite?
16:48:04 <MarcelineVQ> seems like it, and foldMap as you did since you wanted to apply some f as well which I overlooked somewhow
16:48:48 <hekkaidekapus> @hoogle (Applicative m, Monoid n, Traversable t) => (a -> m n) -> t a -> m n
16:48:50 <lambdabot> Universum.Monad.Container concatMapM :: (Applicative f, Monoid m, Container (l m), Element (l m) ~ m, Traversable l) => (a -> f m) -> l a -> f m
16:48:50 <lambdabot> Util foldMapA :: (Applicative p, Monoid b, Foldable f) => (a -> p b) -> f a -> p b
16:48:50 <lambdabot> Data.FMList foldMapA :: (Foldable t, Applicative f, Monoid m) => (a -> f m) -> t a -> f m
16:48:53 <MarcelineVQ> iow I added nothing of value :>>
16:49:08 <frdg> would `otherwise` be considered a global variable?
16:49:22 <hekkaidekapus> koz_: Let’s call it foldMapA :)
16:50:42 <koz_> @hoogle Ap
16:50:43 <lambdabot> Data.Monoid newtype Ap f a
16:50:43 <lambdabot> Data.Monoid Ap :: f a -> Ap f a
16:50:43 <lambdabot> Test.Tasty.Runners newtype Ap f a
16:51:05 <MarcelineVQ> frdg: interesting question, a global constant might be a better label, but even then I'm not sure I'd say that.
16:51:28 <MarcelineVQ> *I wouldn't say that.
16:51:53 <frdg> right, its not much of a variable.
16:55:59 <frdg> `f :: a -> Bool; f _ = otherwise`. I never thought to do this :)
16:56:19 <frdg> could by my own style
17:32:54 <larou> im not sure, maybe there is some way of using the parameters to provide the lower parts
17:33:29 <larou> like, the constructor would be self referential, but that one of the parameters gave a variable that then you could also pass down the other branch
18:00:49 * hackage co-log-polysemy-formatting 0.1.0.0 - A Polysemy logging effect for high quality (unstructured) logs.  https://hackage.haskell.org/package/co-log-polysemy-formatting-0.1.0.0 (AlexChapman)
21:30:10 <plast1k_>  /msg NickServ VERIFY REGISTER plast1k_ rdynhuxvqnec
21:30:19 <plast1k_> oop
21:30:44 <Stanley00> oops :3
21:43:35 <proofofme> https://pastebin.com/E97L9507     How do I make sense of these error files?  Everything was working until I tried to add imap to my cabal file.  I messed around with versions of base ... but no success
21:45:12 <lemmih> proofofme: Looks like the 'imap' package is broken.
21:45:39 <proofofme> which part do you look at to know this?
21:46:01 <lemmih> rejecting: base-4.12.0.0/installed-4.12.0.0 (conflict: imap => base>=4.8
21:46:02 <lemmih> && <4.9)
21:46:36 <lemmih> This means it can't use base-4.12 (which is the base library for 8.6.5) because 'imap' depends on base-4.8.
21:47:05 <proofofme> should I change base versions, and if so, how?
21:47:16 <proofofme> I tried, without any success earlier
21:47:46 <koz_> proofofme: base is tied closely to compiler version.
21:47:52 <koz_> So you can't really change it.
21:47:57 <koz_> What're you after from imap?
21:48:02 <lemmih> proofofme: No, the problem is with the version of 'imap' that you're using. There are more recent versions, though.
21:48:13 <proofofme> getting and index inside a map function
21:48:19 <proofofme> getting an index*
21:48:32 <lemmih> proofofme: I don't see the dependency for 'imap' in your cabal file.
21:49:02 <koz_> Wait, this imap? http://hackage.haskell.org/package/imap
21:49:15 <koz_> That doesn't gel with what you've just said, proofofme .
21:51:12 <proofofme> I tried several versions of imap in the cabal before I removed it ... forgot that I did actually
21:51:19 <proofofme> koz_ in which way?
21:51:32 <koz_> You said you wanted 'getting an index inside a map function'.
21:51:42 <koz_> If you meant http://hackage.haskell.org/package/imap, then I don't see how that helps.
21:52:09 <proofofme> hmm ... wow, good point ...
21:52:11 <proofofme> one sec
21:53:58 <proofofme> how would y'all do it?
21:54:07 <lemmih> I think you forgot to save the cabal file after removing the 'imap' dependency. The pasted error message doesn't match the pasted cabal file.
21:54:34 <proofofme> yeah, the cabal file was after I removed imap dependency
21:55:49 <lemmih> Well, then run your executable again and see if it works.
21:56:33 <proofofme> well that works ... but how would y'all get an index inside a map function?
21:57:04 <lemmih> I'm not sure what that means. What are you trying to do?
21:58:35 <proofofme> find the numeric index of an element inside a map of elements
21:59:40 <lemmih> > zip [0..] "Hello world" -- Like this?
21:59:43 <lambdabot>  [(0,'H'),(1,'e'),(2,'l'),(3,'l'),(4,'o'),(5,' '),(6,'w'),(7,'o'),(8,'r'),(9,...
22:00:22 <lemmih> > elemIndex 'o' "Hello world" -- Or maybe like this?
22:00:25 <lambdabot>  Just 4
22:01:19 <proofofme> https://pastebin.com/RPLNgZ03
22:01:40 <proofofme> get which index the needle is in actualDivs
22:03:19 <lemmih> I still don't understand what you want but I can assure you that you won't get it from the 'imap' package. :)
22:04:04 <proofofme> return '2', because that's the first index that contains one element of the needle ... for this example, at least
22:05:24 <zq> how to go about proving that reverse . concat == concat . reverse . map reverse ?
22:35:09 <c_wraith> zq: start by proving reverse (xs ++ ys) == reverse ys ++ reverse xs
22:37:33 <zq> c_wraith: how would i do that? would dependent lists need to get involved?
22:37:41 <koz_> proofofme: So you want to find the poisition at which a certain predicate holds?
22:37:44 <c_wraith> just work definitionally
22:37:58 <c_wraith> use the definitions of reverse and (++)
22:38:27 <koz_> proofofme: So like http://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:findIndex ?
22:39:50 <proofofme> just like findIndex!  so I can pass a vector into it for the predicates, yeah?
22:40:23 <zq> oh right, equational reasoning works in haskell
22:40:27 <koz_> proofofme: I don't understand what the statement 'pass a vector into it for the predicates' means in this context.
22:40:53 <koz_> You are correct in that findIndex takes a Vector as an argument.
22:40:59 <koz_> It has nothing to do with the predicate aspect of this.
22:41:28 <proofofme> ah ok
22:42:24 <koz_> So, once again, what exactly do you want to do?
22:42:27 <koz_> Be as specific as possible.
22:44:35 <proofofme> So if the needle is [a,b,c], and the array to search is [z,y,x,a], it should return 3 because the first instance of the needle found in the "haystack" is the 3rd element (counting 0)
22:44:50 <koz_> proofofme: [z, y, x, a] is not an array.
22:44:52 <koz_> It's a list.
22:45:21 <proofofme> ok, list, I mean
22:45:27 <koz_> OK, so you have osmething like
22:45:46 <koz_> whatProofofmeWants :: (Eq a) => [a] -> [a] -> Maybe Int
22:45:48 <koz_> Right?
22:46:19 <proofofme> yup!
22:46:35 <koz_> OK, so, this is best written by starting with the more restricted version of it, which is
22:46:50 <koz_> whatKozSuggestsYouWriteFirst :: (Eq a) => a -> [a] -> Maybe Int
22:46:59 <koz_> One thing that may help you:
22:47:02 <koz_> :t zip [0 ..]
22:47:04 <lambdabot> (Num a, Enum a) => [b] -> [(a, b)]
22:47:16 <koz_> Try and write that first.
22:48:28 <proofofme> hmm
22:48:47 <koz_> There is a function that'll do this, but I think it'd be very instructional for you to try and write this yourself first.
22:49:34 <proofofme> ok give me a little bit of time to think about this one.  how long do you think it should take me?
22:49:51 <koz_> I don't think setting a time limit on a learning task is productive.
22:49:53 <koz_> Or useful.
22:50:03 <koz_> Take whatever time your understanding, and your learning pace, needs.
22:50:06 <proofofme> yeah ... what's the function btw?
22:50:07 <koz_> If you need help, ask for it.
22:50:18 <koz_> proofofme: Telling you this would defeat the purpose of this exercise.
22:50:23 <proofofme> haha ok
22:52:04 <dminuoso> hekkaidekapus: Heh, turns out this is an unfortunate consequence https://gitlab.haskell.org/ghc/ghc/-/issues/18836
22:52:57 <koz_> dminuoso: Yay, bugs!
22:55:02 <dminuoso> Putting us back to "Overlapping instances are just bad"
23:53:33 <kenran> How can I create haddock documentation for a multi-package cabal-new project such that it's "all in one page"? Is that even possible?
23:55:31 <kenran> It might have to do with the --doc-index-file option, but I don't see how I'd use it yet.
23:56:53 <kenran> I'd probably need something like https://downloads.haskell.org/~ghc/latest/docs/html/libraries/
