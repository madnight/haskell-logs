02:23:16 <ixlun> Hi all, does anyone know why cabal isn't compiling for profiling when I use: `cabal v2-run -p --profiling-detail=all-functions hchess'?
02:23:55 <ixlun> all my code recompiled as well as the libraries that it depended on, but when I run with `+RTS -p' I get: `cabal: the flag -p requires the program to be built with -prof'
02:30:19 <ixlun> Never mind - I think I've fixed it with `v2-configure'
03:31:19 * hackage ukrainian-phonetics-basic 0.1.2.0 - A library to work with the basic Ukrainian phonetics and syllable segmentation.  https://hackage.haskell.org/package/ukrainian-phonetics-basic-0.1.2.0 (OleksandrZhabenko)
03:50:33 <Guest54698> Hello o/ I have very basic questions about Haskell arrays, but i kind find the answer on the internet... Is there any simple guide about basic usage of arrays in haskells ?
03:50:49 <Guest54698> (my questions are for exemple, how to get an array length, how to append an item into an array, etc...)
03:51:09 <Guest54698> can't find*
03:51:56 <Guest54698> (im talking about actual Arrays, indexed list, List are pretty easy to apprehend until now)
03:52:27 <Rembane> Guest54698: From which module do you import your arrays? 
03:53:34 <Guest54698> Data.Array for now, but i have no restrictions about it
03:54:02 <Guest54698> if there is a better/more modern implementation
03:55:50 <Rembane> Guest54698: Data.Vector has a much nicer API in my opinion. https://hackage.haskell.org/package/vector-0.12.1.2
03:57:05 <Guest54698> im expecting to use string as indexes, not int
03:57:20 <Guest54698> but i will check the vector API for another usage for sure, didnt know about it
04:12:37 <Guest54698> i would like to have a list of entities indexed by their string ids
04:21:43 <merby> hello
04:22:34 <Uniaika> heya
04:23:15 <merby> first time joining #haskell, seems great!
04:26:59 <__monty__> 't is, merby, 't is.
04:31:28 <nitrix> merby, The channel can get pretty busy during the day, but that shouldn't discourage you from asking questions :)
04:32:25 <merijn> Guest54698: Don't you just want a Map, then?
04:33:10 <merijn> Guest54698: Data.Map from containers would be the equivalent of python dictionaries/C++'s std::map and probably what you want with string indices :)
05:06:06 <Guest54698> merijn it seems that its exactly what i needed indeed :o thank you. For information. haskell array can be indexed with any kind of value right ? Im a bit confused about it now.
05:07:17 <merijn> Guest54698: The Array type from Data.Array supports indexing via any type that has an Ix class, so while you *can* theoretically index it using String, but it's not really designed for that
05:07:48 <merijn> Array is mostly designed for numeric indices (or tuples of numbers)
05:09:04 <merijn> Guest54698: Meanwhile Map is a more traditional "lookup key value pairs" kinda data structure (as I said, comparable to python dictionaries and C++'s std::map)
05:09:39 <merijn> Guest54698: Although some of the dynamic languages mix these things together and call map/dictionary data structures "arrays" too and allow indexing them by non-numbers, which confuses things even more :p
05:10:04 <merijn> :t (Data.Array.!)
05:10:06 <lambdabot> Ix i => Array i e -> i -> e
05:10:35 <merijn> So that's indexable by any type that has an Ix instance (mostly numbers and tuples of numbers, afaik)
05:10:48 <merijn> :t Data.Map.lookup
05:10:49 <lambdabot> Ord k => k -> M.Map k a -> Maybe a
05:11:18 <merijn> That works for any key that is orderable
05:28:48 * hackage http-client-websockets 0.1.1.0 - Glue code for http-client and websockets  https://hackage.haskell.org/package/http-client-websockets-0.1.1.0 (amesgen)
06:06:04 <Guest_81> hi
06:06:20 <Guest_81> im unable to download ghcup
06:06:26 <Guest_81> on my mac
06:07:21 <maerwald> Guest_81: why
06:15:05 <joel135> I am trying curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh now in a pretty clean ubuntu 20.04
06:16:06 <joel135> un/fortunately I don't have a mac to test on
06:33:47 <tomsmeding> maerwald: do you have a keyword highlight on 'ghcup' :p
06:34:28 <maerwald> sure
07:03:18 * hackage context 0.1.1.0 - Thread-indexed, nested contexts  https://hackage.haskell.org/package/context-0.1.1.0 (jship)
07:05:48 * hackage rank1dynamic 0.4.1 - Like Data.Dynamic/Data.Typeable but with support for rank-1 polymorphic types  https://hackage.haskell.org/package/rank1dynamic-0.4.1 (FacundoDominguez)
08:18:55 <maerwald> https://github.com/pcapriotti/optparse-applicative/issues/148 the problem with DSLs... you can never anticipate all use cases
08:31:32 <merijn> maerwald: But you can mostly already implement that behaviour?
08:31:49 <maerwald> yeah, it doesn't render properly though
08:32:13 <maerwald> e.g. in stack cli you have: --[no-]dump-logs
08:32:16 <maerwald> that's proper
08:32:23 <merijn> ah, right, but then what you want is probably just "better control over help text", which is somewhere deep down my todo list :p
08:33:12 <maerwald> in the end you're messing with the internals, which is what I don't like... mix of high-level and low-level API is always awkward
08:52:02 <daphnis> how is --enable-debug-info=1 supposed to be passed with a stack project?  (trying to compile xmobar with that option)
09:02:48 * hackage context 0.1.1.1 - Thread-indexed, nested contexts  https://hackage.haskell.org/package/context-0.1.1.1 (jship)
09:08:11 <tomsmeding> daphnis: you might try 'stack build --no-strip', but not sure
09:08:30 <tomsmeding> source: 'stack build --help' :p
09:15:06 <tomsmeding> unrelated, does 'stack repl' not work with a local library in the cabal file?
09:32:50 * hackage Z-IO 0.1.7.0 - Simple and high performance IO toolkit for Haskell  https://hackage.haskell.org/package/Z-IO-0.1.7.0 (winterland)
09:57:25 <ixlun> Does anyone know if there is a way to lift to a pattern in TH?
10:03:42 <ixlun> I found LitP
10:04:00 <ixlun> but now I need to lift that into the Q monad
10:07:11 <monsterchrom> just use return? Q is a monad.
10:36:49 * hackage ukrainian-phonetics-basic 0.1.3.0 - A library to work with the basic Ukrainian phonetics and syllable segmentation.  https://hackage.haskell.org/package/ukrainian-phonetics-basic-0.1.3.0 (OleksandrZhabenko)
11:12:06 <andybkof2001> made your area like quebec and speak german, in the frontier m√©xico with texas,the flag is in the frontier, in horizont orange  almost dark like brick in up, in half gray aluminum, and in down blue sky day,  with letter L red shinning  thick, no very thick just 1 cm and 4 mm with red fire in the right side in line like shadow the same red shinnig 9 mm right,  at the left side 1 mm of shadow, 
11:12:06 <andybkof2001> and in down 3 mm of shadow red shinnig all the shadows stiked at the L  the L no with waves in line 9 mm of fire 1 left and 3 in down , the L  in the center of the new german flag occupying the entire gray strip with the shadow, the name is Deutcsh, coin deutsches. let the giants play baskectball with the browns.learn german  https://app.memrise.com/course/920/5000-german-words-top-87/1/ copy 
11:12:06 <andybkof2001> the adress of the page, and paste somewhere, for read it later, go at the bookseller and ask for the diccionary english german and read it verbatim,  https://www.youtube.com/watch?v=Y6DNjM4s-zw
11:14:56 <MarcelineVQ> That was kind of poetic until the urls
11:28:24 <koz_> The hell did I just read?
11:30:11 <ixlun> Say I had: `Data Foo = Foo Ordering' and then : `x foo = ...'. How could I convert `foo' into a template haskell `Pat'?
11:30:44 <ixlun> So far I've got `ConP ''Foo'
11:31:21 <ixlun> but I'm unsure how to convert the Ordering type consturctor into a Pat
11:33:09 * tomsmeding is going to assume that was a markov chain generator
11:33:37 <ixlun> I don't want to have to write: foo2Pat (Foo EQ) = [p|Foo EQ|] for all Ordering
11:35:25 <tomsmeding> ixlun: wild guess, would it not just be ConP ''Foo (ConP ''EQ) ?
11:35:38 <tomsmeding> or, well, ConP ''Foo [ConP ''EQ]
11:36:01 <ixlun> Ahhhhh
11:36:22 <ixlun> Didn't get that it would have another ConP as it's child
11:36:23 <tomsmeding> EQ is also just a data constructor :)
11:36:43 <ixlun> thanks tomsmeding :-)
11:36:47 <ixlun> TH is really cool!
11:37:48 <chkno> What's the simplest way to use TCP (client & server) while keeping the rest of my program Safe?  I'm starting from "error: [-Wunsafe, -Werror=unsafe] ... Network.Socket: Can't be safely imported!  The module itself isn't safe."  network-simple gives the same error, and pipes-network looks complicated.  Should I bite the bullet and learn Pipes or make small module that wraps Network.Socket & mark it 
11:37:54 <chkno> Trustworthy?
11:57:59 <merijn> Honestly, I don't think anyone's really using SafeHaskell these days
12:01:39 <Zetagon> Why not?
12:08:15 <chkno> I suppose I could keep most of my program in transport-agnostic Safe modules and then just mix the TCP in with the rest in an Unsafe top-level Main.  I'm using Safe because it came with -Weverything, and because https://wiki.haskell.org/Safe_Haskell says 'it's like -Wall', and I use -Wall (and -Wextra, -pedantic, clang-tidy, ...) when I write C.
12:30:50 <merijn> chkno: That's not the case
12:31:00 <merijn> chkno: You shouldn't use -Weverything
12:31:37 <merijn> -Wall enables everything you should care about, -Weverything includes *lots* of things that are very questionable (i.e. warns about things which aren't wrong)
12:33:18 <christo> hey guys
12:33:21 <christo> in acabal project
12:33:23 <christo> cabal*
12:33:35 <christo> what should i be .gitignore'ing? 
12:33:39 <merijn> chkno: Actually using Safe means you're going to have to audit your dependencies and mark which ones you're going to trust, or it's not really going to do anything for you :)
12:33:42 <christo> dist/ folder? 
12:34:02 <merijn> christo: dist and dist-newstyle, that should be the only thing cabal really makes
12:34:27 <christo> thx, what does those folders contain? the build of the project? after you compile it? 
12:34:34 <merijn> And if your cabal-install is making dist folders, you probably wanna upgrade to a newer version of cabal-install :p
12:34:58 <christo> everything i need for cabal is the .cabal file right? 
12:35:07 <merijn> christo: dist/dist-newstyle contains the build artifacts of your project, yes (dependencies get installed in ~/.cabal)
12:35:19 <merijn> christo: Yeah
12:35:50 <christo> ok, will do a git -rm -r -cached then i'll double check the command for it lol
12:36:01 <christo> thx
12:45:09 <maerwald> mouse scroll doesn't seem to register in brick
12:45:23 <lxsameer> hey folks, f: a -> Mb and g: b -> Mc . the bind for these two would be Mb >>= \b -> Mc  . is it correct to say, in order to compose these two to gether weh have to have a function like  z: a -> f(a) >>= g ????
12:45:46 <lxsameer> is z correct as a composition of f and g ?
12:53:24 <maerwald> Weird, seems mouse wheel up results in KUp event, not in Button event
12:54:30 <geekosaur> that's up to the terminal emulator; most translate it before the app running in the terminal can see it
12:54:45 <geekosaur> mouse wheel scrolling is just a bit of a hack
12:58:08 <geekosaur> (it should be multiple KUp events normally; there's often a configuration knob for how many)
13:02:18 * hackage aeson-combinators 0.0.4.0 - Aeson combinators for dead simple JSON decoding  https://hackage.haskell.org/package/aeson-combinators-0.0.4.0 (MarekFajkus)
13:03:41 <geekosaur> hm, although given how hacky that aspect is, it might only be one. (it's not really that kind of UI event in a terminal)
13:19:47 <maerwald> I would have expected alacritty to emit an actual mouse event maybe
13:20:54 <geekosaur> one could argue the translation is happening at the wrong level, but I suspect nobody would want to fix it
13:25:08 <geekosaur> iirc it's somewhat painful to do what you want, given that passing mouse events through is itself a hack; they'd have to arrange somehow for the original event to be saved just for mouse mode
13:25:32 <maerwald> well, it's kinda confusing, we have mousewheel in two events: VtyEvent https://hackage.haskell.org/package/vty-5.31/docs/Graphics-Vty-Input-Events.html#t:Event and BrickEvent https://hackage.haskell.org/package/brick-0.57/docs/Brick-Types.html#t:BrickEvent but both never trigger lol
13:25:40 <geekosaur> (scrolling is not normally a UI event as such)
13:26:13 <geekosaur> right, because it's up to the terminal to pass it on and most probably won't
13:28:27 <geekosaur> at least, not as button or scroll events
13:29:40 <geekosaur> again, you could try reporting it as a bug in alacritty that it gives you an up key instead of a mouse event in that case, but I suspect they'll find it too hard to fix and that's why they send key-up to begin with
13:29:59 <maerwald> https://github.com/alacritty/alacritty/issues/2512
13:30:24 <maerwald> so much more you can do with mouse event
14:08:19 * hackage morley 1.8.0 - Developer tools for the Michelson Language  https://hackage.haskell.org/package/morley-1.8.0 (gromak)
14:35:18 * hackage xlsx 0.8.2 - Simple and incomplete Excel file parser/writer  https://hackage.haskell.org/package/xlsx-0.8.2 (KirillZaborsky)
14:47:29 <frdg> adding a function to a `composition pipeline?` will decrease or preserve the size of the compositions image. Is this true and if so is this property named?
14:48:47 <c_wraith> where did that question come from? Seems like an odd thing to ask.
14:49:59 <monsterchrom> This sounds like a continuation of a misguided line of thought from several days ago.
14:50:47 <frdg> I came up with it while learning about monotonicity of entailment
14:51:40 <c_wraith> It's also clearly not true with arbitrary functions
14:52:05 <frdg> oh
14:52:39 <monsterchrom> It is true and boring. It is merely part of the definition of "function" in the first place.
14:52:48 <c_wraith> (floor . max 0 . min 1 :: Double -> Int)  vs    (floor . (*5) . max 0 . min 1 :: Double -> Int)
14:53:43 <frdg> terrible timing I must eat dinner.
15:42:19 * hackage cabal-fmt 0.1.5 - Format .cabal files  https://hackage.haskell.org/package/cabal-fmt-0.1.5 (phadej)
15:49:01 <frdg> c_wraith: `(floor . max 0 . min 1 :: Double -> Int)  vs    (floor . (*5) . max 0 . min 1 :: Double -> Int)` isn't the image of both of these functions infinite?
15:50:07 <c_wraith> nope.  The first one has the image [0, 1].  the second has the image [0, 1, 2, 3, 4, 5]
15:50:31 <c_wraith> err.  those are finite sets, not some sort of range notation
15:52:08 <frdg> I see it now
15:52:54 <frdg> there goes my theory
15:55:01 <monsterchrom> oops
15:55:04 <c_wraith> monsterchrom was referring to a simpler statement, which *is* trivially true.  Composing two functions together results in an image with a size at most the max of the sizes of the two individual functions.
15:55:24 <c_wraith> But when you are allowed to insert intermediate steps, things are no longer that simple
16:13:09 <kewa> Hi! Is this chat alive?
16:19:46 <Ariakenom> kewa, sure
16:24:07 <koz_> kewa: No, we are all turingrade AIs.
16:36:22 <monsterchrom> That counts as alive.
16:39:26 <andybkof2001> made your area like quebec and speak german, in the frontier m√©xico with texas,the flag is in the frontier, in horizont orange  almost dark like brick in up, in half gray aluminum, and in down blue sky day,  with letter L red shinning  thick, no very thick just 1 cm and 4 mm with red fire in the right side in line like shadow the same red shinnig 9 mm right,  at the left side 1 mm of shadow, 
16:39:26 <andybkof2001> and in down 3 mm of shadow red shinnig all the shadows stiked at the L  the L no with waves in line 9 mm of fire 1 left and 3 in down , the L  in the center of the new german flag occupying the entire gray strip with the shadow, the name is Deutcsh, coin deutsches. let the giants play baskectball with the browns.learn german  https://app.memrise.com/course/920/5000-german-words-top-87/1/ copy 
16:39:26 <andybkof2001> the adress of the page, and paste somewhere, for read it later, go at the bookseller and ask for the diccionary english german and read it verbatim,  https://www.youtube.com/watch?v=Y6DNjM4s-zw
16:40:46 --- mode: ChanServ set +o monsterchrom
16:40:51 --- mode: monsterchrom set +b *!*@fixed-187-188-9-123.totalplay.net
16:40:52 --- kick: andybkof2001 was kicked by monsterchrom (andybkof2001)
16:45:39 --- mode: monsterchrom set -b+b *!*@fixed-187-188-9-123.totalplay.net andybkof2001!*@*
16:45:57 <monsterchrom> Let's see how well that holds up.
16:46:06 <Kolkrabe> Looking at some nicks, I would say the channel is undead rather than alive :p
16:46:08 --- mode: monsterchrom set -o monsterchrom
16:46:15 <monsterchrom> Haha
17:02:28 <c_wraith> I've been told I should return to life for the holiday, but that'd just be too confusing.
17:02:33 <c_wraith> :t confusing
17:02:34 <lambdabot> Applicative f => LensLike (Data.Functor.Day.Curried.Curried (Data.Functor.Yoneda.Yoneda f) (Data.Functor.Yoneda.Yoneda f)) s t a b -> LensLike f s t a b
17:09:23 <monsterchrom> Another direction you could consider is elevating from a wraith to an abstract factory that makes more wraiths.
18:13:28 <c_wraith> monsterchrom: that's way too terrifying
20:20:08 <guy> hey guys
20:21:13 <guy> is this the place to ask haskell related questions
20:21:47 <xacktm> check the /topic 
20:21:51 <xacktm> tl;dr yes :)
20:23:05 <guy> okay thanks :)  I don't really know how to check that
20:23:25 <guy> I'm having a problem installing a Win32 package with cabal
20:25:31 <guy> Apparently it couldn't execute one of the files in the package Win32-2.8.3.0, ".../ghc/inplace/mingw/bin/ld.exe"
20:26:35 <guy> I'm a bit lost on what to do here because this seems to be a problem with the package uploaded
20:31:16 <davean> Thats not in the package, thats in your GHC install I think
20:33:15 <davean> ld is the linker
20:33:58 <guy> oh okay thank you
20:34:33 <guy> I was trying to install a later version of Win32 than the one that is included with the Haskell Platform
20:34:39 <davean> I'd help you more but I haven't seen a windows system in decades
20:35:00 <guy> that's fine, thank you
20:36:46 <guy> I think I'm in a bit over my head with this stuff anyways. I'll just stick to what I have and see what I can do
20:37:02 <jle`> i wanted to maybe write a haskell clone for Among Us, but i'm stuck because I can't think of a good pun
20:37:12 <jle`> i guess this is most projects die huh
20:37:27 <guy> Lamdang Us
20:37:50 <guy> Lambdang us
20:37:51 <jle`> hmm
20:38:36 <jle`> :(
20:38:47 <MarcelineVQ> Existential Crisis :>  but by the time you're done the fad will be over
20:39:04 <jle`> mostly a learning exercise :)
20:39:17 <jle`> Forall Us
20:39:23 <jle`> :O
20:42:06 <koz_> jle`: Exists a.
20:42:11 <jle`> Amonadung Us
20:42:34 <jle`> koz_: :o
20:42:46 <jle`> Exists a. Imposter a
20:42:59 <jle`> exists a. Imposter a => a
20:44:00 <koz_> 'Exists a' gets across the point much better at least.
20:44:04 <c_wraith> jle`: I already stole a perfect option.
20:46:06 <jle`> c_wraith: oh?
20:46:19 <jle`> koz_: nicely succinct
20:46:19 <c_wraith> (look at my hostmask)
20:47:22 <jle`> heh heh
20:47:27 <MarcelineVQ> neat hostmask but what's a jaldabaoth?
20:48:00 <koz_> MarcelineVQ: Some DnD monster I think?
20:58:30 <emmanuel_erc> Is there some truth to the claim that the Haskell compiler is slow? (This was a statement a coworker said to me)
20:59:33 <monsterchrom> Depends on how much you're prepared to bend "some" "truth".
21:00:17 <monsterchrom> Type inference is worst-case expoential time, there will be a few carefully designed terms and types that force that.
21:00:44 <monsterchrom> The fact remains that this worst-case doesn't happen to useful programs.
21:01:19 <c_wraith> There are definitely things you can do to make your program slow
21:01:37 <c_wraith> GHC isn't great with huge string literals or types with thousands of constructors
21:03:23 <monsterchrom> I actually know an actual worst-case example from Okasaki. And yet, I don't just go around citing it as though it's the only thing you should care. In fact, I avoid citing it because clearly it is such a bizarre example you shouldn't care.
21:03:56 <monsterchrom> I bet your coworker is the opposite. Never saw any actual example, and still go around spreading hearsay like it's the only important thing.
21:04:02 <c_wraith> GHC definitely stresses linx's default linker, too
21:04:20 <c_wraith> *linux
21:04:26 <monsterchrom> You should put such people on your ignore list.
21:08:27 <monsterchrom> For life is too short to investigate every hearsay where the speaker doesn't bother to cite evidence or give examples.
21:09:03 <gattytto> hello, I'm trying to build the haskell-servant minimum example using ghc-8.10.1 and I have added all the recommended extra-deps to stack.yaml. But while building aeson it says "out of memory". I have  tried adding --ghc-options=" -j1 +RST -MXXXXM" with no avail
21:09:17 <gattytto> is there anything else I can do to avoid memory exhaustion? both in cabal build and stack build
21:10:06 <monsterchrom> I'm afraid --ghc-options="-j1" is barking up the wrong tree.
21:10:33 <monsterchrom> It would be stack itself and cabal itself that decides to spawn 4 instance of GHC at the same time.
21:10:52 <monsterchrom> as opposed to one instance of GHC deciding to spawn 4 jobs
21:11:14 <monsterchrom> Your -j1 should be given to stack or cabal
21:11:15 <gattytto> ah yes cabal has -j arg 
21:11:23 <gattytto> thanks I'll try that
21:36:50 <MarcelineVQ> aeson is pretty heavy by itself still so fingers crossed
22:56:31 <emb> Does anyone have any tips on finding remote part time Haskell dev gig? 
