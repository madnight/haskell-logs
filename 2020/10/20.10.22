00:14:05 <Alexthek1d> hello
00:14:14 <Alexthek1d> does anyone know "duckling" ?
00:15:14 <Alexthek1d> It is programmed in haskell and needs stack to install
00:15:21 <Alexthek1d> but i am a haskell noob
00:15:49 <Alexthek1d> can't you compile it with this tack thing, get a "exe" file and run it on another machine without stack?
00:17:40 <Alexthek1d> i'd need a truly static binary that is entirely self-contained
00:21:11 <pjb> Alexthek1d: AFAIK, it's not possible on linux or most modern unix platforms.
00:21:32 <Alexthek1d> pjb, windows too?
00:21:33 <pjb> Alexthek1d: you could generate that for embedded platforms.
00:21:42 <pjb> I know nothing about Microsoft systems.
00:21:47 <Alexthek1d> i have to run it on windows
00:21:52 <Alexthek1d> okay :D
00:22:33 <pjb> I'd still be surprised if executable on MS-Windows could be entirely independent from system DLLs…
00:23:20 <Alexthek1d> ye me2
00:24:41 <yushyin> so did you try stack?
00:26:12 <lortabac> I think you can have 100% static builds on Alpine, by using musl instead of glibc
00:47:57 <merijn> That information seems rather irrelevant in the context of Windows ;)
00:48:16 <merijn> pjb: You have a strange definition of "most modern unix platforms"
00:48:42 <merijn> pjb: linux is the only one that commonly ships with glibc and glibc is the one that breaks static linking everything
00:48:59 <merijn> And even linux has exceptions (like Alpine) where they don't ship glibc
00:49:48 <Alexthek1d> okay i can use stack now
00:49:57 <Alexthek1d> running "stack build"
00:50:07 <merijn> stack doesn't really address building static binaries, though
00:50:18 <Alexthek1d> but it seems to need internet access
00:50:26 <Alexthek1d> and i have to use a proxy for that
00:50:51 <Alexthek1d> can u run something like "stack build --proxy=112.123.13.13" ? ^^
01:29:55 <Alexthek1d> seems like stack needs internet acccess
01:30:04 <Alexthek1d> Exception while reading snapshot from https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/13/7.yaml:
01:48:09 <Alexthek1d> i try so set the proxy like this in windows: " set HTTPS_PROXY=http://myproxy:9090 "
01:48:20 <Alexthek1d> but it still doesn't work
01:58:41 <dminuoso> Mmm, why don't we have 1-tuples?
01:58:50 <dminuoso> That seems like an oversight. :(
01:59:22 <dminuoso> (I guess the answer is just the grammar wouldnt allow for it)
02:05:05 <hc> dminuoso: what about (1,)? that could reasonably be parsed into a 1-tuple?
02:05:46 <merijn> hc: Disagree, that's an operator section of (,) :p
02:06:29 <yushyin> yeah, TupleSections claims that syntax
02:07:04 <hc> hmm, true
02:08:22 <dminuoso> hc: The only reasonable solution appears to have been to use say {} for tuples instead.
02:08:42 <merijn> dminuoso: There's a unary tuple somewhere in GHC or ghc-prim or something
02:09:36 <dminuoso> Though that would conflict with record syntax, unless spaces for record syntax were disallowed, or it would need more lookahead
02:09:39 <dminuoso> merijn: Mmm.
02:10:30 <dminuoso> hc: Also, `(1,)` would have felt very adhoc, not in line with () (1,2), (1,2,3)
02:12:26 <hc> dminuoso: newEmptyTuple function? ;p
02:13:11 <hc> or, use «»
02:14:19 <dminuoso> At that point, why not adapt arbitrary mixfix operators from Agda as well, and ensure you cant write programs without emacs anymore. :P
02:14:44 <dminuoso> (These two remarks are not related to one another)
02:14:52 <hc> oh, you can actually write haskell programs without emacs?
02:14:55 * hc looks surprised
02:15:20 <dminuoso> Out of curiosity, do you use haskell-language-server, hc?
02:15:35 <hc> yes I do, together with neovim
02:15:49 <hc> I occasionally use emacs for haskell as well, but haven't properly set it up
02:16:04 <dminuoso> Ah. With evil mode presumably?
02:16:09 <hc> jup
02:16:19 <dminuoso> If it wasn't for evil mode, I would still be a vim user :>
02:16:44 <dminuoso> Dunno, I keep hearing so much good things about hie, but I fear for my lightweight and fast emacs setup
02:17:28 <hc> I haven't found a perfect haskell editor yet, tbh. intellij has some nice features I miss in the others...
02:18:31 <merijn> dminuoso: ghcide is crazy fast, compared to what I used before (like hdevtools years ago)
02:18:55 <merijn> dminuoso: ghcide usually finishes type-checking in the same time as it takes vim to leave insert mode >.>
02:19:20 <dminuoso> merijn: Its not that Im worried about.
02:19:30 <dminuoso> lsp-mode looks freaking heavy
02:19:34 <hc> merijn: can take vim up to two seconds to leave insert mode, depending on your terminal emulator ;)
02:19:40 <merijn> dminuoso: in emacs?
02:20:03 <dminuoso> Triggered, it seems!
02:20:08 <dminuoso> Ye.s
02:20:19 <merijn> that seems like an emacs problem, not an hls problem :p
02:22:35 <dminuoso> Ah. Perhaps I can use eglot instead, that seems much more lightweight
02:24:37 <Alexthek1d> guys i still get "Exception while reading snapshot from https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/9/10.yaml:
02:24:37 <Alexthek1d> HttpExceptionRequest Request {"
02:24:43 <Alexthek1d> proxy doesn't work
02:24:46 <Alexthek1d> i dunno why
02:25:03 <Alexthek1d> why does it need online sources even?
02:25:20 <Alexthek1d> can't i have an offline version of stack haskell?
02:28:14 <dminuoso> Alexthek1d: If you want to be all offline, stack is a bad fit I think.
02:28:24 <dminuoso> It'll be easier with cabal and possibly skete
02:29:52 <Alexthek1d> a
02:30:01 <Alexthek1d> okay:D
02:30:29 <dminuoso> Alexthek1d: What exactly are your requirements here? Wrt to being offline I mean.
02:31:18 <Alexthek1d> i just need to get this running on the windows server of my company: https://github.com/facebook/duckling
02:31:20 <Alexthek1d> dminuoso, 
02:31:57 <__monty__> Hmm, can't really find anything about skete. One blogpost and one youtube presentation.
02:32:41 <dminuoso> __monty__: https://code.xkrd.net/skete/skete-haskell/-/tree/master
02:32:48 * hackage splitmix 0.1.0.3 - Fast Splittable PRNG  https://hackage.haskell.org/package/splitmix-0.1.0.3 (phadej)
02:33:09 <__monty__> dminuoso: Thanks. Guess DDG was failing me.
02:33:21 <Alexthek1d> i'll try cabal then
02:33:24 <merijn> __monty__: I mean, you can just download all of Hackage and point cabal at that 
02:33:33 <dminuoso> Alexthek1d: Well, you will need internet access either way
02:33:40 <Alexthek1d> dminuoso, why?
02:33:49 <dminuoso> Alexthek1d: Because our package registries live on the internet.
02:33:57 <Alexthek1d> oh 
02:33:58 <dminuoso> You have to get the dependencies from *somewhere*
02:34:36 <Perry79> Is it possible to create modular classes (congruence classes) with just a single traversal of list? in python I can do something like "for n in arr: dict[n%k] += [n]". My current Haskell solution involves k traversals of list
02:34:39 <dminuoso> What I said about `cabal + skete` is for the use case of `Im gonna live on a boat without internet for 6 months and want to develop on haskell packages`
02:34:49 <dminuoso> (Which is exactly how skete was born)
02:35:28 <Alexthek1d> dminuoso, Hm okay, thanks for the info! I can't believe that i cannot run this program on an offline server :/
02:35:37 <dminuoso> Alexthek1d: Ohh I see what you mean
02:35:39 <dminuoso> sorry I misunderstood
02:35:43 <dminuoso> Alexthek1d: No you can!
02:35:55 <Alexthek1d> :D
02:35:57 <dminuoso> Alexthek1d: You first build it with stack or cabal, and then extract the build artifact
02:36:08 <dminuoso> But the build process needs internet to grab dependencies
02:36:14 <dminuoso> (Or at least access to package registries)
02:36:47 <Alexthek1d> yes, stack fails because of this 
02:36:48 <Alexthek1d> "Exception while reading snapshot from https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/9/10.yaml:
02:37:06 <dminuoso> Alexthek1d: So what you'd do, is build it on a machine that has internet access
02:37:14 <dminuoso> Extract the resulting binary, and then put that onto your server without internet.
02:38:11 <Alexthek1d> Hm it is a machine with windows server 2019 . I have windows 10 only
02:38:54 <__monty__> merijn: Just wanted to see what skete has to offer in addition.
02:39:14 <dminuoso> __monty__: ask davean 
02:39:20 <dminuoso> They can explain it far better.
02:39:41 <dminuoso> Alexthek1d: It shouldn't be an issue I think.
02:39:53 <dminuoso> Alexthek1d: Both run PE executables.
02:39:54 <Alexthek1d> dminuoso, ok thank you
02:39:56 <dminuoso> You could try it at least.
02:40:06 <dminuoso> If it doesn't work, you could ask again.
02:40:11 <Alexthek1d> thanks
02:40:20 <dminuoso> (My windows experience is rather limited with Haskell)
02:41:58 <dminuoso> __monty__: One of the main issues with hackage, is that its a hideous blob of software. Try running a local hackage mirror, the sheer time and space requirements are crazy!
02:42:23 <Rembane> dminuoso: How crazy are the space requirements?
02:44:38 <dminuoso> Rembane: Some 2-3 digits of GiB I think. And pulling a mirror takes ages.
02:44:47 <dminuoso> With skete you can get that in under 1GiB
02:46:05 <dminuoso> When we tried to set up a hackage mirror, I was frustrated after some two weeks.
02:49:00 <merijn> dminuoso: You can point cabal at just directories of tarballs, iirc?
02:54:10 <Rembane> dminuoso: That's quite a lot. I wonder if it would be benificial for the Haskell ecosystem to have more Hackage mirrors and thus make it easier to setup new mirrors. 
03:05:21 <Alexthek1d> dminuoso, so stack failed :D :/
03:05:33 <Alexthek1d> i can't find cabal for windows tho
03:26:12 <dminuoso> Alexthek1d: https://www.haskell.org/cabal/download.html
03:26:19 <dminuoso> There's windows binaries there
03:26:29 <Alexthek1d> ye found it already 
03:26:30 <Alexthek1d> thanks
03:26:45 <dminuoso> Alexthek1d: by the way, how did the build fail exactly?
03:27:00 <Alexthek1d> same error https://github.com/facebook/duckling/issues/510
03:27:22 <Alexthek1d> trying the fix by bmoore117  now
03:43:16 <Alexthek1d> dminuoso, error is fixed . now i get a second one after 56/66
03:43:27 <Alexthek1d> oh no
03:43:37 <Alexthek1d> second run and it seems to work now 
03:43:37 <Alexthek1d> lol
03:46:20 <dminuoso> Mmm, does lens come with an iso `itself :: Iso' a a` ?
03:46:25 <dminuoso> where itself = iso id id
03:47:01 <dminuoso> Oh. I guess I can just use `id` 
03:47:02 <dminuoso> haha
03:59:58 <Alexthek1d> i have the exe now
04:00:24 <Alexthek1d> can't run it tho. Neither stack nor cabal works
04:07:04 <lortabac> Alexthek1d: you don't need stack (nor cabal) to run the executable
04:07:12 <lortabac> you just have to execute it
04:09:01 <Alexthek1d> lortabac, when i try this i get:
04:09:01 <Alexthek1d> "Exception while reading snapshot from https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/9/10.yaml:
04:09:07 <Alexthek1d> oh no 
04:09:09 <Alexthek1d> wrong
04:09:22 <Alexthek1d> duckling-example-exe.exe: /usr/share/zoneinfo/: getDirectoryContents:findFirstFile: does not exist (The system cannot find the path specified.)
04:09:23 <Alexthek1d> this
04:10:16 <ridcully> are you on windows? i doubt windows has those files
04:12:52 <lortabac> Alexthek1d: maybe the example requires some files to be present
04:13:01 <lortabac> did you try running the ducking executable?
04:13:07 <lortabac> *duckling
04:13:22 <kuribas> hi, does something like this exists?  Let's say a datastructure a :-> b, which means b depends on a.  So I have a function initialize :: MyData -> (MyData :-> DependendData).  
04:13:45 <kuribas> Then they idea is to be able to incrementally update a, and b gets updated automatically.
04:13:47 <Alexthek1d> i compiled on my windows 10 and try to run it on windows server
04:13:53 <kuribas> but without recomputing all of b.
04:13:55 <Alexthek1d> lortabac, yes
04:14:13 <ridcully> the example directly tries to load this directory
04:14:28 <ridcully> (or rather the timezone data therein)
04:14:42 <kuribas> for example for a word processor ui, I have Document :-> Intermediate :-> GraphicElements
04:14:51 <lortabac> Alexthek1d: and?
04:15:07 <lortabac> did it work?
04:15:37 <Alexthek1d> lortabac, it gives me the error above
04:16:03 <lortabac> I'm not familiar with this package, but the error is about duckling-example-exe
04:16:21 <lortabac> I was asking if you have tried running duckling-exe (or whatever it is called)
04:17:03 <kuribas> Then I can specify the UI as a single transformation on the source document, but still have good performance.
04:19:17 <Alexthek1d> lortabac, there is duckling-example-exe.exe only
04:19:26 <lortabac> oh
04:19:58 <lortabac> then I guess it has never been tested on Windows
04:22:00 <lortabac> given the name of the executable, I suppose duckling is meant to be used as a library
04:22:21 <lortabac> you can take inspiration from the example and build your own executable
04:27:42 <typetetris> https://www.irccloud.com/pastebin/cL3DJSYB/
04:28:17 <typetetris> Is that a bad idea for prod builds?
04:30:37 <merijn> typetetris: O2 generally takes a lot longer to compile and may not have any impact on a significant umber of workloads
04:31:22 <typetetris> So its up to experimentation of it is worthwhile.
04:31:32 <typetetris> if not of
04:32:21 <merijn> yeah
04:32:42 <merijn> O1 you should always do, though
04:34:24 <dminuoso> typetetris: If your builds run in CI and are not time sensitive, then O2 is fine.
04:51:44 <typetetris> hmm, O2 made ghc  8.10.2 panic on my code. That means I am a bad haskell coder :)
04:52:21 <maerwald> 8.10.2 is also a bit more segfaulty than 8.8.4 or 8.6.5
04:57:20 * hackage antiope-shell 7.5.3 - Please see the README on Github at <https://github.com/arbor/antiope#readme>  https://hackage.haskell.org/package/antiope-shell-7.5.3 (arbornetworks)
04:58:19 * hackage antiope-core 7.5.3, antiope-sns 7.5.3, antiope-es 7.5.3, antiope-dynamodb 7.5.3, antiope-contract 7.5.3, antiope-athena 7.5.3, antiope-optparse-applicative 7.5.3, antiope-messages 7.5.3, antiope-sqs 7.5.3, antiope-s3 7.5.3 (arbornetworks)
05:04:43 <Alexthek1d> lortabac, just read this "However you will still face issues when running it, as it needs to be built and run under something like MSYS2 or Cygwin, it needs linux stuff like /usr/share/zoneinfo"
05:04:49 <Alexthek1d> https://github.com/facebook/duckling/issues/510
05:31:05 <typetetris> 8.8.4 works fine
05:31:49 * hackage call-alloy 0.2.0.6 - A simple library to call Alloy given a specification  https://hackage.haskell.org/package/call-alloy-0.2.0.6 (marcellus)
06:05:33 <AWizzArd> Why is mapM_ in prelude but not traverse_ ?
06:05:52 <AWizzArd> Historical reasons?
06:06:24 <geekosaur> yes
06:07:25 <typetetris> My ghc panic with ghc 8.10.2 was related to polysemy-plugin, removing that and `-fplugin=Polysemy.Plugin` from my project made the panic go away.
06:12:48 <AWizzArd> geekosaur: do you think ghc will stick with those historical decisions or clean this at some point up, and move/remove certain functions?
06:12:57 <sandman13> Hi, I have a directory that is tracked by git and has few Haskell files. How can I setup stack without deleting the repo and starting from scratch?
06:13:28 <sandman13> I tried stack new <already_existing_directory> but it refused to setup as directory already existed
06:14:11 <geekosaur> AWizzArd, there is a library proposals process for such changes
06:14:51 <merijn> geekosaur: Incorrect
06:14:58 <merijn> geekosaur: Prelude is in the Report
06:15:10 <merijn> the library proposals process is for non-report libraries only
06:15:24 <merijn> Good freaking luck getting people to accept Prelude changes
06:15:32 <geekosaur> we aleady violate the Report in a few places (notably some Applicative stuff iirc)
06:15:49 <merijn> geekosaur: Yes, and if you recall the mailing list drama involved for those...
06:15:56 <geekosaur> and of course there's AMP which completely violates the Report
06:16:08 <merijn> AMP took months/years of mailing list skirmishes to pass
06:16:29 <merijn> And there are very vocal people who oppose to any *growth* of Prelude
06:16:58 <merijn> So the realistic time frame for "traverse_" moving to Prelude are very slim
06:18:29 <yushyin> haskell2020 now!
06:19:55 <merijn> yushyin: Everyone wants a new standard because they get all the cool new extensions, nobody wants to do the work to specify the extensions
06:19:56 <geekosaur> the kind of yammering merijn is talking about is part of why h2020 is dead, I suspect
06:20:07 <merijn> geekosaur: Well, not quite
06:20:31 <merijn> geekosaur: HaskellPrime keeps dying because people want to do the cool Prelude refactors, but not the "how do we specify extension X?" work
06:20:42 <merijn> HaskellPrime keeps being restarted and dying for that reason
06:21:52 <yushyin> my comment was meant rather sarcastically
06:40:32 <daydaynatation> what does the tilde mean? ~(f, s') <- mf s
06:40:49 <merijn> daydaynatation: Lazy pattern
06:41:09 <ph88> is this a promoted datatype which needs DataKinds extension?   type Foo = '("Bar", String)  
06:41:20 <daydaynatation> merijn: thx
06:41:26 <merijn> daydaynatation: So the pattern forcing is delayed until you evaluate the f or s'
06:42:13 <daydaynatation> merijn: when would you use it?
06:42:48 <merijn> daydaynatation: usually in a recursive binding where the pattern you're computing depends on the result of the pattern match
06:47:55 <siraben> daydaynatation: you should not use it when you have more than one constructor for the data type, see the Implications section of https://wiki.haskell.org/Lazy_pattern_match
06:54:08 <siraben> Have people here used AutoBench https://github.com/mathandley/AutoBench or is there a better alternative?
06:54:42 <hyperisco> No [cradle](https://github.com/mpickering/hie-bios#hie-bios) found for .stack-work\dist\29cc6475\build\weave\autogen\...
06:54:42 <hyperisco>  Proceeding with [implicit cradle](https://hackage.haskell.org/package/implicit-hie)
06:55:36 <hyperisco> I get that error every time I save a file in VSCode using the Haskell IDE extension. I have created a cradle yaml for my project. How can I know where it is looking for the cradle config?
07:47:22 <fendor_> hyperisco, it looks for the cradle config in some parent directory starting from the workspace directory
07:50:54 <dminuoso> ph88: Yes.
08:25:43 <ph88> dminuoso, i had another type   type Qux = Quz [Foo, AnotherFoo]  and i don't understand why this list here (of which i think it's a type list) does not need that ' in front of it like '[ .. ]
08:33:50 <lortabac> ph88: ' does not have any semantic meaning, it's just for name disambiguation, it means "search this name in the namespace of data constructors"
08:35:34 <lortabac> so if the namespace is clear the single quote is not needed
08:38:49 * hackage tzdata 0.2.20201021.0 - Time zone database (as files and as a module)  https://hackage.haskell.org/package/tzdata-0.2.20201021.0 (MihalyBarasz)
08:52:57 <tomsmeding> ph88: does that even compile? I don't think it does
08:53:09 <tomsmeding> or perhaps with DataKinds?
08:55:49 <tomsmeding> I see with a number of extensions it does compile
08:56:07 * tomsmeding requests to ignore my comments, I also don't know exactly how this all works
09:08:20 * hackage tz 0.1.3.5 - Efficient time zone handling  https://hackage.haskell.org/package/tz-0.1.3.5 (MihalyBarasz)
09:17:19 <kuribas> isn't there a library for quickly making form based UIs for editing configuration?
09:17:28 <kuribas> and exporting to XML?
09:18:06 <Uniaika> not that I know of
09:22:16 <maerwald> persistent doesn't have `updateMany`?
09:22:29 <merijn> maerwald: Probably no
09:22:50 <merijn> maerwald: Why are you using persistent?
09:23:01 <maerwald> It was not my choice.
09:23:12 <merijn> maerwald: This does not surprise me ;)
09:23:32 <maerwald> SQL is already a DSL
09:23:41 <maerwald> I don't know why I need a shitty on top
09:24:14 <maerwald> (that goes for all ORMs)
09:24:50 * hackage cobot-io 0.1.3.8 - Biological data file formats and IO  https://hackage.haskell.org/package/cobot-io-0.1.3.8 (ozzzzz)
09:29:19 * hackage ngx-export-tools-extra 0.5.6.0 - More extra tools for Nginx haskell module  https://hackage.haskell.org/package/ngx-export-tools-extra-0.5.6.0 (lyokha)
09:44:49 * hackage darcs 2.16.3 - a distributed, interactive, smart revision control system  https://hackage.haskell.org/package/darcs-2.16.3 (bfrk)
10:09:54 <monsterchrom> "As a convenience, GHC allows you to omit the quote mark when the name is unambiguous."
10:10:45 <Uniaika> monsterchrom: wait what
10:11:02 <monsterchrom> When you use DataKinds.
10:12:22 <monsterchrom> And in the case of type-level list, "For type-level lists of two or more elements, such as the signature of foo2 above, the quote may be omitted because the meaning is unambiguous."
10:12:39 <monsterchrom> Or, meta-ly, an exercise in reading the GHC user's guide.
12:09:19 * hackage versions 4.0.1 - Types and parsers for software version numbers.  https://hackage.haskell.org/package/versions-4.0.1 (fosskers)
12:09:34 <dminuoso> monsterchrom: I personally think keeping them as separate namespaces was a mistake.
12:10:08 <dminuoso> What does it even mean "when the name is unambiguous"?
12:11:05 <dminuoso> Given `data Foo = Foo`, is the reference to Foo ambiguous? `type F = Identity Foo` 
12:14:47 <dminuoso> There's of course possible answers that include "Of course it's not, Foo couldn't possibly be the data constructor". But isn't it GHCs job to report when the user might have misspecified a program that can, with some consideration, still type check?
12:15:36 <hyperisco> somehow when I call  stack build  now it just hangs
12:19:40 <dminuoso> hyperisco: Too much use of UndecideableInstances or TyFams? :>
12:20:03 <hyperisco> I didn't change any code =\ well this is just my luck lately
12:38:55 <fresheyeball> is there any way to make jsaddle-warp debugging more reliable?
12:40:11 <fresheyeball> hamishmack: it looks like I am going to be building more and more stuff on your work
12:40:25 <fresheyeball> would you be willing to do a call with me and talk about some stuff with jsaddle?
12:52:15 <merijn> dminuoso: Easy, "Just" in a type is unambigously datakinds, unless you first define a new "Just" type
12:52:53 <merijn> % :i Identity
12:52:54 <yahb> merijn: type Identity :: * -> *; newtype Identity a = Identity {runIdentity :: a}; -- Defined in `Data.Functor.Identity'; instance Applicative Identity -- Defined in `Data.Functor.Identity'; instance Eq a => Eq (Identity a) -- Defined in `Data.Functor.Identity'; instance Functor Identity -- Defined in `Data.Functor.Identity'; instance Monad Identity -- Defined in `Data.Functor.Identity'; instance Monoid a => 
12:53:10 <merijn> dminuoso: That one is also unambiguous, since the kind is * :p
12:53:42 <dminuoso> merijn: Since they occupy the same namespace, I'm not willing to accept that
12:54:30 <dminuoso> But really, my arguments boil down to "they shouldn't occupy the same namespace in the first place"
13:31:38 <monsterchrom> dminuoso: I think that automatic promotion-pun is wrong in the first place. Note that the need for the singletons library implies that automatic promotion-pun doesn't even buy any superficial convenience, lack alone fundamental benenfits.
13:33:12 <monsterchrom> Instead, "data X = A | B" should only give "X :: Type, A, B :: X", and for the promotion, one must write separately "kind X2 = A2 | B2".
13:33:43 <monsterchrom> Either that, or automatic promotion-pun should automatically induce what singletons now does.
13:37:49 * hackage keep-alive 0.1.0.0 - TCP keep alive implementation  https://hackage.haskell.org/package/keep-alive-0.1.0.0 (3kyro)
13:56:19 * hackage keep-alive 0.1.1.0 - TCP keep alive implementation  https://hackage.haskell.org/package/keep-alive-0.1.1.0 (3kyro)
14:06:31 <ComposerMike> I started getting AesonExcpetions when Stack tries to download the resolver build plan .. this seems to have happened right after I tried to use ghcup to install a default system ghc.. any ideas?
14:07:58 <ComposerMike> for instance, “Error in $.pcakages.cassave.contraints.flags[‘bytestring-lt_0_1_4’]: invalid file name”
14:13:47 <merijn> Which stack version?
14:50:23 <dansho> does anyone know how to do a 1d convolution on multiple channel data with massiv?
14:50:43 <dansho> i have a 6x3 input (6 samples, 3 channels)
14:51:23 <dansho> and stencil 3x3 (width 3, channels 3)
14:52:18 <dansho> mapStencil seems to be doing a 2d convolution though so it produces a 6x3 output instead of 6x1
15:07:30 <N3RGY> Hey all. Having a weird issue. I have a device with a quectel EG25 4G modem. The first two times I booted up, ugen recognized the device and then u3g recognized the device and made /dev/cuaUxxx devices. I can still see this in /var/log/messages. No problem. But subsequent times I turned on the device, ugen sees the modem, but u3g doesn't do anything. Any idea what could be going wrong?
15:11:54 <N3RGY> Oops sorry wrong channel!
15:33:35 <fraktor> So I'm trying to learn Parsec, and I wrote this method to parse a Float. It seems like a pretty bad way to do it though, and I'm wondering if someone could help me understand a better way to do this. https://hastebin.com/qatizuxebe.hs
15:39:23 <ph88> thank you for the clarification lortabac 
15:40:07 <Guest18> hello peeps, anyone know a good online haskell repl i could use while my linux comp is unavailable? 
15:40:29 <Guest18> the one on repl.it is really annoying me with it's bugs
15:42:01 <maerwald> It's not a particularly strong business model :)
15:43:49 <lambdabot> Maybe I should set up a Patreon ;-)
15:44:40 <Guest18> did the lambdabot just gain sentience?
15:45:10 <Guest18> i'm sorry of the things i told you in confidence, lambdabot
15:45:15 <int-e> It's a different niche... but it is kind of offering free computing resources to the masses.
15:45:45 <int-e> Guest18: Don't worry, there are no logs or people reading them.
15:46:24 <Guest18> so i take it there are no good repls out there?
15:46:29 <int-e> But it does have a feature for sending messages to the channel, which I just (ab?)used.
15:48:15 <hekkaidekapus> fraktor: It is probably not a good idea to roll your own float parser. Background:
15:48:24 <int-e> Guest18: I'm vaguely aware that such sites exist. Does tio.run do Haskell?
15:48:32 <hekkaidekapus> @where floating-point -- fraktor
15:48:32 <lambdabot> "What Every Programmer Should Know About Floating-Point Arithmetic" at <http://floating-point-gui.de/> and "What Every Computer Scientist Should Know About Floating-Point Arithmetic" by David
15:48:32 <lambdabot> Goldberg in 1991 at <http://docs.sun.com/source/806-3568/ncg_goldberg.html> and <http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.102.244>
15:49:04 <hekkaidekapus> fraktor: But you could try <https://hackage.haskell.org/package/megaparsec-9.0.0/docs/Text-Megaparsec-Char-Lexer.html#v:float>
15:50:39 <Guest18> int-e: it does
15:50:51 <Guest18> I hope it handles IO better than repl.it
15:50:54 <Guest18> thank you
15:52:15 <fraktor> hekkaidekapus: So what I'm doing is using Parsec to determine which characters are part of the float and then `read`, so it's still pretty straightforward.
15:53:01 <Guest18> Another question: if i have two ints, and wanted to divide them (not div, but /) why won't haskell let me?
15:53:12 <Guest18> If you need more context
15:53:50 <Guest18> I have a function that counts how many letters are different in two given strings. For example "hello" and "hellq" would be 1
15:54:19 <Guest18> And I use genericLength to get the length of those strings
15:54:32 <Guest18> But for some reason it won't let me divide them
15:54:46 <int-e> :t genericLength
15:54:47 <lambdabot> Num i => [a] -> i
15:56:26 <Guest18> Ok, so the typeclass is Num, and so if i make the first function also return a num, it should work?
15:56:37 <bliminse> Guest18: to divide 2 ints with / call fromIntegral on each of them
15:56:53 <hekkaidekapus> fraktor: I don’t understand well what you’re trying to do. Do you want to extract sub-strings that could be converted to floats?
15:57:22 <int-e> Something doesn't add up. Anyway, the usual conversion functions are: fromIntegral, realToFrac, and floor/round/ceiling to get back to integers.
15:57:55 <Guest18> Actually, it worked just by putting the Num constraint on the first functrion
15:59:16 <Guest18> https://pastebin.pl/view/7e4a65f8
15:59:20 <Guest18> For reference
16:00:06 <Guest18> It should calculate the percentage to which the second string is like the first
16:00:26 <Guest18> It takes a key string, and several other strings
16:00:48 <Guest18> For every one, if the percentage is bigger than 0.9, it prints pass otherwise fail
16:01:37 <Guest18> Wait, that's not the right code
16:01:59 <Guest18> https://pastebin.pl/view/49dd7475
16:02:07 <Guest18> This is the working version
16:02:45 <Guest18> The key and the other strings are guaranteed to be of the same length
16:03:34 <Guest18> I know I could have done better, maybe do the nums function with a fold or something, but i had a few minutes to do this
16:04:51 <Guest18> Suggestions?
16:12:46 <Guest18> num key sub = foldr (\(x,y) b -> if x == y then b+1 else b) 0 $ zip key sub -- i reckon this is better
16:16:39 <Guest18> Really, any suggestions whatsoever are welcome
16:17:23 <hekkaidekapus> fraktor: I’m going away. In the meantime, here is something to chew on. Your bespoke parser would recognise "+45.6". Now try Text.Megaparsec.Char.Lexer.float with that to see what you get. Also:
16:17:40 <hekkaidekapus> > isIEE 45.6 -- fraktor
16:17:42 <lambdabot>  error:
16:17:42 <lambdabot>      • Variable not in scope: isIEE :: t0 -> t
16:17:42 <lambdabot>      • Perhaps you meant ‘isIEEE’ (imported from Prelude)
16:17:56 <hekkaidekapus> > isIEEE 45.6 -- fraktor
16:17:59 <lambdabot>  True
16:18:05 <hekkaidekapus> > isIEEE +45.6 -- fraktor
16:18:07 <lambdabot>  error:
16:18:07 <lambdabot>      • No instance for (Fractional (Double -> Bool))
16:18:07 <lambdabot>          arising from a use of ‘e_1456’
16:20:37 <int-e> :t isIEEE
16:20:38 <lambdabot> RealFloat a => a -> Bool
17:01:50 <ski> Guest18 : use `replicateM_'. also remove the `return ()'s
17:02:31 <Guest18> Yeah, I know the returns are redundant
17:02:33 <ski> Guest18 : `percentage' has redundant brackets. (also `(Num a) =>' could be `Num a =>')
17:02:44 <Guest18> why replicateM_?
17:02:59 <ski> because you don't care about the list of results, anyway
17:03:32 <ski> `replicateM n act' is when you want to get back a list of `n' results of executing `act'
17:04:00 <ski> if you just want to do something `n' times, but don't care about collecting results in a list, it's better to use `replicateM_'
17:04:42 <Guest18> doesn't the compiler optimize this stuff anyway? Or is it the more idiomatic way of doing things?
17:05:10 <ski> also, you could use `n <- readIO input_line :: IO Int'. in case of a parsing error, this will abort immediately, rather than when `n' is later used
17:05:43 <ski> also, you could replace that, and `input_line <- getLine', by `n <- readLn :: IO Int', which does both for you
17:06:11 <ski> Guest18 : it probably doesn't optimize it away, i think
17:06:28 <Guest18> num key sub = foldr (\(x,y) b -> if x == y then b+1 else b) 0 $ zip key sub -- what about this?
17:07:53 <ski> (you could use `n :: Int <- readIO input_line' or `n :: Int <- readLn' instead, if you enable extension `ScopedTypeVariables'. this looks slightly more pretty. or you could just leave out the ascription, and let it infer that `n' is an `Int' (since it's passed to `replicateM_'))
17:07:59 <ski> @type replicateM_
17:08:00 <lambdabot> Applicative m => Int -> m a -> m ()
17:08:01 <ski> @type replicateM
17:08:03 <lambdabot> Applicative m => Int -> m a -> m [a]
17:08:51 <ski> yea, next thing i was going to comment on was that your `num' in the paste only works if the two lists (`String's ..) have the same length
17:09:08 <Guest18> it's guaranteed that they are
17:09:22 <ski> ok
17:09:44 <ski> well, there's many different ways to do it
17:10:02 <Guest18> how would you do it?
17:10:33 <ski> you could e.g. filter the `zip key sub' list, keeping only the pairs in which the two components are equal to each other. then count how many pairs you have left
17:10:46 <ski> you could use a list comprehension, if you want to
17:11:27 <ski> if you're going to use a fold, then probably  foldl'  is better, here, btw
17:11:44 <simon> 单子 is monad in chinese.
17:12:12 <ski> in Leibniz' sense, too ?
17:12:39 <simon> I think so. the dictionary says "(functional programming or philosophy) monad" -- I don't know if that encompasses math.
17:13:01 <ski> (personally i'd also not use `$' in there)
17:13:01 <simon> I think only chinese mathematicians know. :)
17:13:18 <Guest18> num key sub = length [(x,y) | (x,y) <- zip(key, sub), x == y] -- don't know if i wrote it correctly, but something like this maybe?>
17:13:24 <ski> presumably it does, simon
17:13:53 <ski> Guest18 : looks ok. although, instead of collecting `(x,y)' you could collect, say, `()'
17:13:57 <simon> I wonder if right-associative function application in chinese is 'f ¥ x'
17:14:07 <Guest18> ski: that makes sense
17:14:13 <ski> (or you could collect `1's, and then `sum' .. many ways to "skin the cat")
17:14:47 <ski> not in japanese, then ?
17:15:12 <simon> surely :-D
17:15:20 <ski> btw, it's `zip key sub', not `zip(key, sub)'
17:15:40 <ski> also, you could use `zipWith (==) key sub', to get a list of `Bool'eans, directly
17:18:57 <ski> > [x + y | x <- [0,1,2,3] | y <- [40,50,60]]  -- another extension
17:18:59 <lambdabot>  [40,51,62]
17:22:31 <koz_> @hoogle asum
17:22:32 <lambdabot> Data.Foldable asum :: (Foldable t, Alternative f) => t (f a) -> f a
17:22:32 <lambdabot> Data.Conduit.Combinators asum :: (Monad m, Alternative f) => ConduitT (f a) o m (f a)
17:22:32 <lambdabot> Protolude asum :: (Foldable t, Alternative f) => t (f a) -> f a
18:06:04 <koz_> What's the place to look for how GADTs are represented at runtime?
18:06:41 <NGravity> Can haskell draw 4dimensional data ? Because i wanna fix string theory and calculate the total mass of the universe 😜😂
18:09:59 <Kolkrabe> Yes, Haskell can do that
18:10:03 <NGravity> We have 12 dimensions arrays , perhaps 15 x 14.5 billion light years dimensionals, so that is the data to extract at plank measurements👍🤣
18:10:24 <NGravity> Yes yes! 😂😂😂
18:12:53 <c_wraith> koz_: GADTs aren't different at runtime, unless you mean using them for existentials.  In which case their runtime representation is the same as any other existential at runtime.
18:13:08 <c_wraith> err.  existential type classes
18:13:49 <koz_> c_wraith: Suppose you have something like 'Foo (a :: Type) where Bar :: (SomeConstraint a) => a -> Foo a'. Would this look different to 'data Foo a = Foo a'?
18:14:01 <koz_> s/= Foo/= Bar/ argh
18:14:57 <c_wraith> I suppose that's technically not an existential, even though it's doing the same thing you'd normally do with existential type classes.
18:15:37 <koz_> So would this end up looking like an existential at runtime, or not?
18:15:46 <c_wraith> I mean, it'd be packaged the same way
18:16:25 <c_wraith> (SomeConstraint a) => a -> Foo a  gets converted to SomeConstraintDict a -> a -> Foo a
18:16:38 <koz_> Ah, so the dictionary gets carted around at runtime?
18:16:42 <c_wraith> yes
18:17:03 <c_wraith> Which is why it's exceptionally rare for it to be the correct design
18:17:36 <koz_> OK, thanks. I thought as much, but I wanted to ask just in case.
18:28:17 * ski idly ponders the difference between `foo :: forall a. C a => F a -> G a' and `foo :: (exists a. C a *> F a) -> (exists a. C a *> G a)'
18:28:59 <ski> (there's also `foo :: (forall a. C a => F a) -> (forall a. C a => G a)' ..)
18:31:46 <ski> (passing around a dictionary can be useful, sometimes. but it may possibly be more useful, if you bundle the dictionary of a typeclass instance for `a', not with a single value of type `a', but with some collection of `a'. that way, one can make use of operations which take two `a's. cf. "binary methods problem" in OO)
18:38:42 <jbox> today is my first day of Haskell! I decided to try out xmonad and I'm loving it
18:39:47 <ghoulguy> hi jbox, neat that it's working out
18:44:32 <ski> jbox : feel free to ask, if you have any questions
18:45:38 <jbox> ski: thank you ^-^
18:46:04 <jbox> I've never written in a functional language before (aside from Nix and the "functional" aspects of Rust), so I'm learning a lot :D
19:21:09 <dsal> jbox: We have many more monads to choose from.  :)
20:04:10 <jbox> is there a standard haskell repl? 
20:10:27 <koz_> jbox: There's GHCi?
20:11:24 <jbox> koz_: perfect, thank you!
20:13:38 <Squarism> im wondering if you could somehow discriminate between two class instances by class constraint. Say we have "class MyClz a" and "instance MyClz a" and "instance Show a => MyClz a" . If i try to compile that i get "Duplciate instance declaration" 
20:16:14 <koz_> Squarism: You can use a newtype wrapper like 'instance Show a => MyClz (ViaShow a)'.
20:16:40 <koz_> Because in your current situation, 'instance MyClz a' already covers everything, whether it has a Show instance or not.
20:20:41 <Squarism> koz_, thanks. I think Im fooling myself to think I can use classes to pattern match, but lets see where this is going
20:55:42 <jbox> should I use my distribution package manager (pacman/yay on Arch Linux) to install the Haskell toolchain or should I use ghcup?
20:56:28 <koz_> jbox: ghcup.
20:56:35 <koz_> This applies _doubly_ on Arch.
20:57:48 <jbox> koz_: okay, thanks!
21:02:18 <dsal> jbox: You got any particular plans?
21:04:57 <jbox> dsal: I'm just configuring xmonad right now. I'm trying to get vim integration working
21:05:50 <dsal> Ah.  I never got very far configuring xmonad.  Day 1:  Get a nice interface I like.  I write lots of software I use, though.
21:38:50 * hackage pandoc 2.11.0.3 - Conversion between markup formats  https://hackage.haskell.org/package/pandoc-2.11.0.3 (JohnMacFarlane)
21:43:49 * hackage citeproc 0.1.0.3 - Generates citations and bibliography from CSL styles.  https://hackage.haskell.org/package/citeproc-0.1.0.3 (JohnMacFarlane)
22:11:49 * hackage skylighting-core 0.10.0.3 - syntax highlighting library  https://hackage.haskell.org/package/skylighting-core-0.10.0.3 (JohnMacFarlane)
22:12:49 * hackage skylighting 0.10.0.3 - syntax highlighting library  https://hackage.haskell.org/package/skylighting-0.10.0.3 (JohnMacFarlane)
23:05:20 * hackage gopro-plus 0.4.0.0 - GoPro Plus Client API.  https://hackage.haskell.org/package/gopro-plus-0.4.0.0 (dustin)
23:05:38 <jophish> Does cabal have a command to get the path to an executable?
23:05:47 <jophish> i.e. the thing called by cabal run
23:50:09 * tomsmeding thinks there is not, but would very much like to be proven wrong
23:51:18 <tomsmeding> (a hacky way to get it manually for a single case is to run 'cabal build', and look at the last Linking step)
