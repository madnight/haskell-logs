01:49:53 <tomsmeding> Is there a way to tell ghc, in the context of 'stack build'/'cabal build' to compile a particular module _first_?
01:50:12 <tomsmeding> there are multiple modules still to be compiled, but I want it to give me the errors for a particular module A first
01:50:40 <tomsmeding> (assume of course that A has no predecessors in the graph of modules still to be compiled :) )
03:35:35 <maerwald> I don't know how cabal orders things when multiple modules are on the same depgraph level, but it can either be module name or order in the .cabal file?
03:39:20 <tomsmeding> I don't know either, but I do know it's unstable :)
03:39:36 <tomsmeding> as in, I compile and get errors for A, fix some (but not all), recompile, and then it does B first
03:39:44 <tomsmeding> which is annoying and my reason for asking :p
03:42:30 <tomsmeding> I have the same problems when e.g. compiling C code with a Makefile, but then I know how to tell it to make one particular object file only
03:43:25 <accusa7i0ns> hello!
03:45:28 <tomsmeding> bye!
03:46:23 <tomsmeding> welcome back accusa7i0ns :p
03:46:48 <accusa7i0ns> thank you tomsmeding! :)
03:49:27 <accusa7i0ns> Hi all :) I am new to this chat and to IRCs in general, is there a regulation that I should read?
03:50:49 <maerwald> https://wiki.haskell.org/IRC_channel#Principles
03:50:52 <maerwald> maybe that?
03:50:57 <maerwald> not sure how up2date
03:52:18 <maerwald> I feel IRC here was more diverse couple of years ago. Maybe slack and discord took away the user base
03:52:42 <accusa7i0ns> thanks maerwald, I'll give it a look! 
04:13:09 <juri_> wow. so, i've now written a barely passable slicer in haskell.
04:33:28 <merijn> maerwald, tomsmeding: afaik cabal *doesn't* order modules, it call "ghc" (aka as "ghc --make", historically) which does its own internal dependency scheduling of modules
04:37:12 <tomsmeding> merijn: perhaps the order of the modules Cabal places on ghc's command line matters? (I haven't checked whether this correlates with the behaviour)
04:37:53 <merijn> tomsmeding: If you wanna typecheck just single files you quickly get to things like ghcide :p
04:38:05 <merijn> and/or hls
04:38:26 <__monty__> Or ghcid
04:38:32 <merijn> ghcid can't do single files
04:38:44 <merijn> It can only recompile the entire project using cabal
04:38:53 <tomsmeding> re:ghcide: ... which I have to restart after ~every file I edit because either its file tracking is completely borked, or the interaction between ghcide and languageclient-neovim is crap
04:39:01 <merijn> Or rather, the only way you can get it to compile single files is if you already know how to do so
04:39:06 <tomsmeding> quite possibly the latter though
04:39:10 <merijn> In which case tomsmeding wouldn't be having this issue :p
04:39:28 <merijn> tomsmeding: I suspect languageclient-neovim
04:39:32 <tomsmeding> yeah
04:39:40 <merijn> It's working pretty great for me with vim + ale
04:39:54 <tomsmeding> it did file watching in a completely broken way before, which I fixed with a PR, but there's probably more off
04:40:07 <merijn> ale supports neovim, I think?
04:40:22 <merijn> Yeah, it does
04:41:11 <merijn> I quickly hacked together this a year ago (apparently) https://github.com/merijn/dotfiles/blob/master/dotfiles/vim/autoload/ale_linters/haskell/ghcide.vim
04:41:18 <merijn> 0 warranty, though :p
04:41:44 <merijn> https://github.com/merijn/dotfiles/blob/master/dotfiles/vim/ftplugin/haskell.vim#L1-L9
04:42:33 * tomsmeding looks
04:45:24 <tomsmeding> "0 warranty" <- it looks fairly safe though
04:49:20 <merijn> Should be, but everything I write is "free as in puppies"
04:49:23 <merijn> :p
04:49:33 <tomsmeding> merijn: I'll try setting up ALE soon, if it works nicely for you then it probably will for me
04:49:40 <merijn> (aka "you'll have to pay if you want if fixed" ;))
04:49:44 <tomsmeding> lol sure
04:50:01 <tomsmeding> isn't that with ~all open source
04:50:19 <tomsmeding> also thanks :)
04:50:40 <merijn> For simple stuff ghcide has been working well for ages, for my phd project it's a bit hit and miss, since that's a Haskell tooling stress test of v2-build, CApiFFI, foreign code and TH :p
04:51:27 <tomsmeding> I have some TH and foreign code but mostly in modules I'm not touching, so we'll see :)
04:51:34 * tomsmeding is off to eat some lunch
06:47:32 <ninoc> prova
07:30:19 <nschoe> Hi everyone, just a quick question: I've been cross-compiling aarch64-unknown-linux-gnu-ghc-8.6.5 for the past ... 4-5 hours on my laptop (this is a GHC that I'm compiling for my Raspberry Pi 3).
07:30:19 <nschoe> It's not the first time I've done this (because I keep forgetting to add it as gc-root), but I'm curious: how come it doesn't fetch it from a binary cache?
07:30:32 <nschoe> Is it because there is not binary cache for aarch64 binaries?
07:30:58 <nschoe> Oh sh*t wrong IRC channel, sorry :/
07:31:38 <merijn> nschoe: There's no official aarch64 binary, afaik, that's probably why?
07:32:13 <uhrenmacher> ahh, hey ma haskell ppl, nice to c ya'! Ok, I know Python, Java, Javscript, Bash and C, but since I really wanted to learn a proper lang, I would like to learn something like Lisp or Haskell. What are the main differnces between Lisp and Haskell? I run Void Linux atm, so compaitibility in terms of compilers shouldn't be a problem.
07:32:22 <nschoe> merijn: I'm running NixOS and I was asking about that :)
07:32:24 <uhrenmacher> Like why do you use Haskell and not Lisp?
07:32:28 <geekosaur> "binary cache" tells me that was a nix question
07:32:45 <nschoe> geekosaur: it was indeed :)
07:33:17 <nschoe> geekosaur: I thought I was in the #nixos-aarch64 IRC channel, but it switched back to #haskell for some reason (prob. an unwanted mouse wheel scroll ^^)
07:41:04 <Zetagon> uhrenmacher: Common Lisp and Haskell doesn't have that much in common with each other. Haskell has a nice static type system, is purely functional and uses non-strict evaluation. Common Lisp is homoiconic (code and data is basically the same thing and have the same syntax which means it has a simple syntax and powerful macros. 
07:42:19 * hackage tasty 1.4 - Modern and extensible testing framework  https://hackage.haskell.org/package/tasty-1.4 (RomanCheplyaka)
07:45:46 <merijn> uhrenmacher: eh, I would sooner ask what the similarities between lisp and haskell are, tbh
07:46:43 <merijn> And beyond "you can define functions and variables" I can't think of a whole lotta similarities...
07:49:34 <Zetagon> Except both being programming languages
07:50:29 <Zetagon> dammit I forgot to close my parenthesis )
07:55:27 <asheshambasta> for cabal errors like these https://gist.github.com/asheshambasta/657363a06647b4e56170be2824c05360, what's the best way to go about debugging them? From what I can see, cabal says that packages servant-reflex & bulmex disagree on the reflex version to use. However, I've gone through the source of servant-reflex (its being depended on locally) and removed all bounds on the reflex versions I could find. 
07:55:58 <Guest63439> hey, im struggling with a really simple task... i would like to print a map in console for debugging purpose
07:56:34 <Guest63439> im trying to use trace from Debug.trace but it prints nothing for now
07:56:49 <voso534> and what is the problem? If keys and values have Show instances, just print it. Also you can you some pretty-print library
07:57:27 <Guest63439> im trying to figure how to actually print
07:57:37 <voso534> maybe your mp is empty? Is it possible? Try to convert it to a list and print it with the trace
07:57:59 <Guest63439> i dont even print the string that i pass as first argument
07:58:14 <voso534> maybe the value is not evaluating at all
07:58:32 <Guest63439> https://pastebin.com/f03b2g3s i would like to print newState
07:59:03 <Guest63439> by for example adding : trace "hello" newState after the let declarations
07:59:16 <fendor_> asheshambasta, this looks weird to me: `reflex==0.7.1.0/installed-1Wm` are you using ghcjs? 
07:59:39 <asheshambasta> fendor_: yes, I'm using reflex-platform to fire up nix-shells with the dependencies. 
08:00:02 <voso534> Guest63439 I usually add print on the first line, if it works, then in the next line and so on and... then I find where no more printing :)
08:00:35 <fendor> asheshambasta, then I guess that servant-reflex depends on a pre-installed version of reflex... similar to how ghc only works with a pre-installed version of base. Would be my uneducated guess here
08:00:47 <asheshambasta> And in this case, servant-reflex is an overriden package, which I'm including via callCabal2nix on some path. When I drop to this path and fire up a nix-shell with a cabal repl, I can confirm that the package compiles at the same reflex-platform verison.
08:00:54 <voso534> Guest63439 `If the MVar is currently empty, takeMVar will wait until it is full. ` - maybe takeMVar is waiting?
08:01:10 <asheshambasta> fendor: pre-installed? 
08:01:37 <Guest63439> voso534 i dont think so since the function keep being called recursively
08:01:46 <Guest63439> i was wondering if syntaxically, the way is use trace is correct
08:01:56 <Guest63439> i*
08:02:00 <voso534> Guest63439 even hGetLine may wait.... Try to add print as the first line of your function
08:02:06 <merijn> Guest63439: What are you calling it with, though?
08:02:22 <merijn> Guest63439: Because if the first call to "talk" gets an empty MVar it will block and stay empty forever
08:03:03 <fendor> asheshambasta, like, for a single ghc version, you can't switch the version of base that it uses, right? You will get a similar error message with cabal. Maybe it is the same for ghcjs, you can't change the reflex version for your ghcjs, but some dependency needs another reflex version.
08:03:39 <fendor> in that sense, every ghc version comes with a base version pre-installed in its packagedb that can not be changed.
08:03:54 <voso534> Guest63439 I mean something like 
08:03:57 <voso534> ```
08:04:14 <Guest63439> yep if i add a print at the top of the function i can see it every time i should
08:04:20 <voso534> heck... how to write multiline here? )
08:04:22 <Guest63439> the MVar should never be empty
08:05:02 <asheshambasta> fendor: correct, although I'd expect there to be a way to verify that? There's nothing in the servant-reflex.cabal file that I consider suspect.
08:05:06 <merijn> Guest63439: You're not calling talk (well, except recursively) in that code
08:05:10 <voso534> OK, what happens with the print after hGetLine? Is it shown?
08:05:25 <Guest63439> i didnt past the whole script
08:05:26 <merijn> Guest63439: Without seeing how you initially call "talk" it's impossible to say
08:06:00 <Guest63439> how woud you trace the let called "newState" in this function ?
08:06:24 <asheshambasta> fendor: not to forget, going to the locally checked out servant-reflex dir., I'm able to update its reflex-platform branch/rev to the same as my project (that depends on servant-reflex), and I can successfully run `nix-shell --run 'cabal new-repl'`; which, I assume, would use the same GHC/GHCJS version?
08:06:28 <merijn> @quote refreshing.desert
08:06:28 <lambdabot> chromatic says: My productivity increased when Autrijus told me about Haskell's trace function. He called it a refreshing desert in the oasis of referential transparency.
08:06:32 <merijn> Guest63439: ^^
08:06:52 <merijn> See the Debug.Trace module
08:07:06 <voso534> you can wrap newState everywhere where do you like - right hand of let for example. If it's evaluating then it will be shown on the console
08:07:26 <fendor> asheshambasta, hm, if my theory holds, then it is only coincidentally a dependency problem with servant-reflex. You can try to remove that dependency and see if it finds a build-plan.
08:07:56 <asheshambasta> If I remove servant-reflex as a dependency, things build. 
08:08:07 <voso534> but I think if you will add all those `print`s (after each line), then you will see that the code is blocked somewhere - it's my hypotheses 
08:08:29 <asheshambasta> I didn't even know what cabal meant with .../installed-...
08:09:12 <fendor> oh well, if that works, I don't know then :(
08:09:54 <Guest63439> voso534 i tried and i can see that the code is executing from the start to the end, i think i dont understand how trace is supposed to be used inside a "do" statement
08:10:40 <asheshambasta> to me it seems like bulmex and servant-reflex cannot agree on the reflex version; and the message with .../installed is a complete mystery to me; and I find no signs of version bounds on reflex in either bulmex nor in servant-reflex.
08:11:03 <asheshambasta> (both are overriden packages in my reflex `project`)
08:13:40 <fendor> asheshambasta, what reflex version does your project have when  you do not depend on servant-reflex?
08:14:07 <voso534> Guest63439 hm... another idea is to declare strict variable with `let`, something like `let !newState  = traceShow result (fst result)`  
08:15:24 <asheshambasta> fendor: I believe that's decided by the pinned reflex-platform version no? If so, I'm using https://gist.github.com/asheshambasta/423fd27b04c37e2a8f14bf84068f139a#file-sources-json-L50-L61
08:15:53 <fendor> I have no idea about the reflex-platform, unfortunately
08:16:09 <Guest63439> voso534 here : https://pastebin.com/he2cch9e still printing nothing :/
08:17:01 <asheshambasta> fendor: AFAICS, it is a curated set of packages within nix (further curation, yay!))
08:18:48 <voso534> Guest63439  1) do you see "test2" in the console?  2) more correct is IMHO to use trace/traceShow with the value which is used actually, `x` is not used, so maybe it's not evaluated at all. Better use trace/traceShow directly in the declaration of the newState
08:19:49 <Guest63439> voso534  do see test2, i will try to use it in newState declaration
08:21:32 <asheshambasta> fendor: anyway, thanks for helping. I think I understand cabal less and less as time goes on. :-)
08:22:03 <fendor> not sure this is cabal's fault, though :/
08:22:18 <fendor> the concept of pre-installed libraries is a bit hard to grasp, imo
08:24:00 <asheshambasta> yeah agreed, I think nix also makes this harder to understand.
08:26:02 <Guest63439> ok i got something, thanks voso534... i guess newState is never executed, by calling trace inside the answer declaration it works
08:28:45 <voso534> Guest63439 (y)  if something is not used in Haskell, it's not evaluated ("executed")
09:02:29 <emmanuel_erc> monsterchrom: Unfortunately, I couldn't put this coworker on the ignore list before. But I probably won't be working with them for much longer (and they're a PM to boot)
09:06:57 <asheshambasta> fendor: I think what would also help a lot is if cabal could specify where-from/why it required these bounds.
09:07:47 <fendor> asheshambasta, totally agree, but explaining a build-plan is a ton of work. It already tries, but its output is mainly readable by experts
09:19:52 <asheshambasta> fendor: yeah, I think I'd just be happy with some indication of the cabal file it read those bounds from. It seems to say that bulmex needs a range of reflex versions, but I find no mention of these bounds in the locally checked out bulmex directoryl.
09:20:31 <asheshambasta> I suspect these reflex version bounds come from a rejected version of bulmex, it does say that it rejects a set of bulmex versions. 
09:35:00 <asheshambasta> fendor: there's this discussion too: https://www.reddit.com/r/haskell/comments/9rmh9s/how_to_read_cabal_solver_failure_output/
09:35:47 <fendor> yeah, I guess one issue is that dependency solving is NP hard and the certificate for a negative instance can explode so incredibly...
09:36:12 <cebola> is there a ghc extension that allows turning an arbitrary expression into an infix op: [1] `(liftA2 (:))` [[]]
09:37:07 <monsterchrom> No.
09:38:23 <asheshambasta> fendor: but I still think that this error message is misleading. Given that I'm 100% sure that there's no mention of version bounds on reflex inside of servant-reflex (I've even grepped the entire tree), cabal should be telling me why it wants reflex == 0.7.1.0 for servant-reflex. 
09:40:49 <asheshambasta> I even verified that I'm not being an idiot and importing the source from a directory on my local machine with `callCabal2nix`. There's also no `package.yaml` etc in the servant-reflex tree (callCabal2nix secretly using hpack when it sees a package.yaml has also been a huge source of grief for me)
09:41:42 <asheshambasta> (in all honesty, callCabal2nix when using hpack does output some hpack output, but that quickly gets lost since nix outputs are quite verbose.)
10:27:48 * hackage j 0.1.2.0 - J in Haskell  https://hackage.haskell.org/package/j-0.1.2.0 (vmchale)
10:57:19 * hackage cut-the-crap 2.1.2 - Cuts out uninteresting parts of videos by detecting silences.  https://hackage.haskell.org/package/cut-the-crap-2.1.2 (Jappie)
11:57:07 <ddellacosta> anyone know how I can pass an argument to floskell as my formatter when using lsp in emacs?
12:00:05 <fendor> ddellacosta, configuration file in the top-level of your project?
12:01:27 <ddellacosta> fendor: I'm looking for something a bit more specific, like which file and what directives I need to use and etc. I've figured out that I can set the formatter in my emacs config, so wondering if there's a similar directive to set the formatter args, but not seeing one in the various emacs lsp packages
12:02:10 <ddellacosta> figured there may be someone else in #haskell who has a similar setup but understand this may be niche
12:02:19 * hackage junit-xml 0.1.0.2 - Producing JUnit-style XML test reports.  https://hackage.haskell.org/package/junit-xml-0.1.0.2 (JasperWoudenberg)
12:06:19 * hackage tasty-test-reporter 0.1.1.3 - Producing JUnit-style XML test reports.  https://hackage.haskell.org/package/tasty-test-reporter-0.1.1.3 (JasperWoudenberg)
12:09:49 * hackage pretty-diff 0.2.0.3 - Pretty printing a diff of two values.  https://hackage.haskell.org/package/pretty-diff-0.2.0.3 (JasperWoudenberg)
12:17:49 * hackage nri-prelude 0.2.0.0 - A Prelude inspired by the Elm programming language  https://hackage.haskell.org/package/nri-prelude-0.2.0.0 (JasperWoudenberg)
12:18:49 * hackage nri-env-parser 0.1.0.2 - Read environment variables as settings to build 12-factor apps.  https://hackage.haskell.org/package/nri-env-parser-0.1.0.2 (JasperWoudenberg)
12:57:19 * hackage tasty-test-reporter 0.1.1.4 - Producing JUnit-style XML test reports.  https://hackage.haskell.org/package/tasty-test-reporter-0.1.1.4 (JasperWoudenberg)
13:11:16 <ixlun> Is it possible to pattern match on a partially applied Value constructor?
13:20:15 <opqdonut> ixlun: no
13:21:00 <geekosaur> that sounds confused. a partially applied constructor is a function, not a value, so no pattern matching
13:21:17 <ixlun> I thought as much
13:21:30 <ixlun> It probably smacks of bad design if I'm running into that problem
13:21:36 <geekosaur> you do not have a thing of type Value to pattern match on, you have a (something -> Value)
13:34:50 * hackage telegram-bot-simple 0.3.2 - Easy to use library for building Telegram bots.  https://hackage.haskell.org/package/telegram-bot-simple-0.3.2 (swamp_agr)
13:36:42 <ixlun> Can anyone think of a nicer way to write this function? https://termbin.com/i0im
13:36:54 <ixlun> It feels like there should be a nicer way than what I'm doing.
13:48:52 <koz_> If I want to catch two different types of exceptions, how would I spell that normally?
13:49:00 <koz_> Do I have to do nested catches or something?
13:54:08 <monsterchrom> koz_: Control.Exception.catches is preferred. It also explains why nesting has an issue.
13:55:49 <koz_> monsterchrom: Thanks, that's actually very helpful!
13:56:02 <koz_> ... also, I _just_ realized who you (likely) are and I feel super daft.
13:56:49 <Rembane> monsterchrom: Are you having a Halloween nick? 
14:02:50 <monsterchrom> I was inspired by ghoulguy.  Also watch out for dimwitch.
14:03:09 <monsterchrom> ghoulguy in turn was inspired by people in #freenode or something.
14:03:40 <MarcelineVQ> he said deadk did it to him
14:03:56 <monsterchrom> Yes this name game is stress-testing your unification algorithms! >:)
14:05:00 <MarcelineVQ> I should think up a christmas name instead I guess
14:05:42 <MarcelineVQ> MerrycelineCM is just nonsense tho
14:05:54 <jbox> I'm having trouble getting a dev environment set up.  Vim (coc.nvim) keeps yelling at me that it can't find `import XMonad`, but I can reload xmonad just fine and it doesn't complain
14:07:14 <jbox> I should be using ghcup instead of my distribution package manager, right?
14:08:16 <koz_> monsterchrom: Less unification, more fuzzy matching.
14:08:19 * hackage reform-happstack 0.2.5.4 - Happstack support for reform.  https://hackage.haskell.org/package/reform-happstack-0.2.5.4 (JeremyShaw)
14:08:35 <koz_> jbox: For _development_, 100% use ghcup,
14:10:01 <Rembane> monsterchrom: Good stuff! :D
14:13:35 <Uniaika> fantastic nick change, ghoulguy and monsterchrom 
14:18:07 <jbox> vim (coc.vim) complains that: [coc.nvim] No [cradle](https://github.com/mpickering/hie-bios#hie-bios) found for .xmonad/xmonad.hs. Proceeding with [implicit cradle](https://hackage.haskell.org/package/implicit-hie)
14:18:16 <jbox> What should I do about this? I have cradle installed
14:18:34 <jbox> wait, no I don't
14:18:42 <jbox> I can't execute `cradle`, but ghcup says it's installed
14:19:03 <maerwald> cradle?
14:19:50 <koz_> ghcup doesn't install anything other than GHC, hie and cabal I don't think.
14:20:07 <monsterchrom> Not hie, rather hls.
14:20:14 <maerwald> https://hackage.haskell.org/package/implicit-hie
14:20:18 <monsterchrom> Definitely doesn't know wth is "cradle".
14:20:23 <maerwald> install that and run `gen-hie`
14:20:28 <maerwald> that's probably what they meant
14:20:41 <koz_> I should just start calling it 'that thing that does IDE stuff Koz doesn't care about starting with h'.
14:20:51 <monsterchrom> :)
14:20:55 <Uniaika> koz_: himplicit-hie? :D
14:21:04 <koz_> (possibly with the appendage 'because it never works for him')
14:21:05 <monsterchrom> You can always use "ghcup list" to see what ghcup knows.
14:21:07 <koz_> Uniaika: Maybe that.
14:21:22 <jbox> sorry, I meant cabal instead of cradle
14:21:23 <maerwald> I also decided to use stack for hls, so that it doesn't interfere with the running cabal (hls invalidates cabal cache or something)
14:21:25 <jbox> I can't execuet cabal
14:21:46 <monsterchrom> OK, read up on "the PATH environment variable"
14:22:36 <jbox> sorry, noob mistake LMAO
14:22:59 <jbox> I'm so used to installing stuff with my distribution package managers hehe
14:23:01 <monsterchrom> Everyone was a noob once. Not an excuse.
14:23:21 <maerwald> jbox: source ~/.ghcup/env
14:27:08 <jbox> maerwald: thank you! I would have just added stuff to $path in my .zshrc manually if you hadn't pointed that out :)
14:29:56 <jbox> vim (coc.nvim) still yells at me though. First it tells me that: No [cradle](https://github.com/mpickering/hie-bios#hie-bios) found for .xmonad/xmonad.hs. Proceeding with [implicit cradle](https://hackage.haskell.org/package/implicit-hie). Then it tells me that it can't find the 'XMonad' (and more) module, yet it exists, since xmonad runs fine and doesn't complain when I reload
14:32:19 <maerwald> there's a #haskell-ide-engine channel btw
14:32:41 <jbox> oh, thank you. This would probably be better there. Have a good one :)
14:59:43 <ddellacosta> are there any standard ways of using persistent-generated records with lens, or rather, generating lenses?
15:02:36 <koz_> ddellacosta: What's persistent-generated?
15:03:01 <Uniaika> koz_: generated by the 'persistent' library I'd say?
15:03:18 <ddellacosta> oh yeah, I mean the stuff that the quasi-quoter boilerplate spits out
15:03:22 <koz_> Uniaika: Ah, well, I assumed the all-lower-case-and-hyphen referred to a package.
15:03:36 <ddellacosta> yeah I can understand, sorry for the confusing way I wrote that
15:04:30 <koz_> If you want 'generated lenses' in general, you might look at generic-lens.
15:04:38 <koz_> However I cannot in good conscience recommend the use of that package.
15:04:54 <koz_> (but then again, you're already using persistent so what's one more...)
15:05:40 <koz_> s/might look/might wanna look/
15:05:48 <ddellacosta> koz_: why would you not recommend generic-lens? (I actually just ended up there myself)
15:06:00 <koz_> ddellacosta: Because it's type errors are unreadable gore.
15:06:04 <koz_> s/it's/its/
15:06:05 <ddellacosta> ah, fair enough
15:06:11 <ddellacosta> I can imagine actually
15:06:29 <koz_> And the entire premise of the library is _extremely_ flawed IMHO, since once you derive Generic for something, you can wave goodbye to _any_ internal invariants.
15:06:59 <koz_> And honestly, most of the 'automagic via Generic' designs are at best confusing.
15:07:02 <ddellacosta> koz_: what do you mean by "internal invariants?" Or I guess "internal" in particular
15:07:16 <koz_> (and quite questionable anyway, since there isn't typically a One True Way to be a type class instance)
15:07:36 <koz_> ddellacosta: Consider something like 'I have an Int in this data structure and it's always positive'.
15:07:59 <koz_> You can do that with smart constructors easily, but once you have a Generic instance, it's basically broken (or breakable) and there's nothing you can do about it.
15:08:12 <koz_> For a less trivial example, consider the internal representation of Data.Map.
15:08:30 <koz_> It's a self-balancing binary tree, but the type system can't guarantee that its invariants hold.
15:08:44 <koz_> Derive Generic for something like that, and those invariants are now breakable by _anyone_.
15:09:16 <koz_> Because when you derive Generic, you gain the ability to both _read_ the generic structure, but also create new ones and magic it into the type, provided it type checks.
15:09:27 <koz_> And you can't opt out of the latter in _any way whatsoever_.
15:10:42 <ddellacosta> koz_: okay, I think I'm starting to understand what you mean, but in the end isn't it a reasonable tradeoff to make if you're using it in an application context? Presumably you're able to understand if it would break any invariants you wish to avoid breaking
15:11:05 <koz_> Uhh, I don't get how that even makes sense.
15:11:23 <ddellacosta> well, maybe I don't understand your point yet then
15:11:38 <koz_> You have a self-balancing binary tree. Its invariants can only be preserved by hiding its representation and not allowing people to construct one arbitrarily. Generic _exposes_ that representation and allows _anyone_ to construct one arbitrarily.
15:11:43 <koz_> And there is _nothing_ you can do about it.
15:12:17 <koz_> Once you derive Generic, any invariant over your data structure that is _not_ imposed by the type system is gone, and _anyone_ can violate said invariants.
15:12:29 <koz_> It doesn't matter if it's 'an application context' or not.
15:12:51 <koz_> If I can import your type, I can get its Generic instance and your invariants are screwed if I want them to be, end of story.
15:13:39 <koz_> Not 'if I can import your type's data constructors'. Not 'if I can import your type's smart constructors'. If I can import your type _as such_.
15:14:19 <jbox> is stack or cabal the recommended tool?
15:14:32 <koz_> jbox: Do you _want_ to start a religious argument LOL?
15:14:39 <koz_> More seriously, it depends on who you ask.
15:14:45 <jbox> oh, sorry, I didn't know that was a sensitive topic haha
15:14:48 <koz_> I certainly have an opinion, everyone else does too.
15:14:51 <jbox> Is it like npm vs yarn?
15:15:02 <koz_> jbox: I wouldn't know because I'm wilfully ignorant of anything JS.
15:15:08 <jbox> me too tbh haha
15:15:12 <ddellacosta> koz_: I suppose what I meant was, one could decide not to derive generic on a Map, for example
15:15:19 <koz_> ddellacosta: OK, sure, I agree.
15:15:32 <koz_> But if you want to use generic-lens for your type, you have to derive Generic.
15:15:44 <ddellacosta> I guess I'm not sure if you're suggesting that Generics are generally bad, or just in certain contexts?
15:15:45 <koz_> Ditto for automagic Hashable, ditto automagic FromJSON/ToJSON, etc etc etc.
15:16:14 <koz_> I'm suggesting that once you derive Generic you can't have any invariants on that type that the type system itself does not enforce.
15:16:31 <koz_> Therefore, for any such type, anythign autoderivable via Generic basically becomes 'you give up your internal invariants lol'.
15:16:45 <ddellacosta> koz_: okay, I guess I have to think harder about the implications of that. I'm mostly considering my experience of using generics in various contexts and finding it pretty nice
15:17:03 <koz_> ddellacosta: YMMV. If the type already exposes its data constructors it makes no difference.
15:17:10 <koz_> If it _doesn't_, then it could be an issue.
15:17:50 <ddellacosta> in any case, I think I'm bailing on generic-lens for now lol
15:18:11 <koz_> The issues behind generic-lens are mostly 'its type errors are an ungodly slurry'.
15:18:37 <jbox> I was told that vim (coc.nvim) wasn't detecting the XMonad library because it wasn't in my global environment. Should I have installed xmonad with ghcup or something? I installed it with pacman (the arch linux package manager)
15:18:42 <koz_> Speaking from having to understand them on numerous occasions, for a codebase I didn't write, when it was causing issues due to a _minor_ version lift of generic-lens.
15:18:46 <ddellacosta> yeah I can't really justify adding it to this project at this point, I'm just being lazy because I know I can do what I want trivially with a traversal
15:20:32 <koz_> (I ended up just pinning to the lower version because otherwise it was impossible)
15:20:44 <gattytto> good evening :waves: 
15:20:51 <koz_> gattytto: Sup?
15:20:56 <ddellacosta> seems reasonable
15:22:12 <gattytto> I came yesterday with questions about limiting memory to haskell builds. It seems like the following:  cabal build -j1 --ghc-options=" +RTS -M3000M -RTS" ... works but the same using stack doesn't and triggers a "out of memory" error 
15:22:16 <gattytto> is this expectable? 
15:22:58 <gattytto> this is the project I'm testing with: github/gattytto/example-servant-minimal 
15:23:35 <gattytto> my usecase is a web ide with a pre-packed dockerfile (based in official haskell's) that contains ghc 8.10.1 so I forked and touched the stack.yaml to add the extra-deps to it
15:23:47 <gattytto> which are a lot and specifically aeson produces the out of memory 
15:24:09 <koz_> aeson would, honestly.
15:24:43 <koz_> gattytto: You might be able to avoid most of the extra-deps if you use a nightly.
15:24:49 <koz_> I assume you're on an LTS snapshot?
15:25:18 <gattytto> I'm using ghc-8.10.1 as resolver and system-ghc is the same, using 8.10.1-buster as the base image for my env
15:25:35 <koz_> gattytto: ghc-8.10.1 is not a 'resolver' in the stack sense.
15:25:42 <koz_> What's the 'resolver' field in your stack.yaml say?
15:25:52 <gattytto> resolver: ghc-8.10.1
15:26:00 <koz_> ... huh
15:26:06 <koz_> That's a thing?
15:26:19 <gattytto> yes it prevents it from re-downloading some other version of ghc to build
15:26:28 <gattytto> and uses system's one instead
15:26:45 <koz_> OK, well, then you might wanna wait for a stack expert.
15:26:53 <gattytto> first time I try to build the forked project (probably made with 8.6.x) it starts recommending extra-deps
15:27:13 <gattytto> so I add them all to extra-deps in stack.yaml, which ends up being around 98 of them xD
15:27:37 <koz_> Ah, so it's just 'FPComplete never update any of their templates', lol.
15:28:08 <gattytto> after a while using the mentioned cabal build line, I get: "Linking /projects/src/github.com/gattytto/example-servant-minimal/dist-newstyle/build/x86_64-linux/ghc-8.10.1/example-servant-minimal-0.0.0/x/example-servant-minimal/build/example-servant-minimal/example-servant-minimal ..."
15:28:18 <gattytto> I'm guessing cabal made it 
15:28:56 <gattytto> but issuing: stack build -j1 --ghc-options=" +RTS -M3000M -RTS" ... triggers the oom
15:29:34 <gattytto> so my question is if either stack isn't passing the ghc options or ghc is doing stuff differently when called from cabal than when called from stack
15:42:49 * hackage persistent-test 2.0.3.3 - Tests for Persistent  https://hackage.haskell.org/package/persistent-test-2.0.3.3 (MaxGabriel)
15:53:38 <_deepfire> What's the catch about mixing unlifted types with regular types -- like f.e. using unboxed tuples as values in Data.Map.Map's?
15:54:04 <_deepfire> Is it even possible?
15:54:13 <monsterchrom> \∩/  Larry Paulson's book "ML for the working programmer" contains this sentence "This sort of things is easier in Haskell"
15:55:22 <dolio> Hahaha.
15:55:50 <dolio> _deepfire: No, it's not possible.
15:56:28 <dolio> Unboxed tuples aren't just unlifted, they don't have a uniform calling convention, so it doesn't really make any sense.
15:56:41 <monsterchrom> It is in a section that uses "L a = a x (unit -> L)" to implement lazy lists.
15:57:37 <motte> hi, could anyone explain how to exception handling with the req http library?
15:57:48 <motte> to do*
15:58:13 <dolio> Are they actually lazy, though?
15:58:18 <_deepfire> dolio: I see, thank you!
15:58:25 <koz_> motte: I guess you want this? http://hackage.haskell.org/package/req-3.7.0/docs/Network-HTTP-Req.html#v:handleHttpException
15:58:34 <motte> the documentation suggests to create my own monad and then define the handleHttpException method, but i'm not sure what that really means
15:58:45 <dolio> Or just call-by-name?
15:58:45 <motte> koz_: yes!
15:59:17 <koz_> motte: If you don't need anything 'extra', you can just work in 'Req'.
15:59:32 <koz_> If you don't understand what 'anything extra' means, basically use 'Req'.
15:59:50 <koz_> So everywhere you see 'MonadHttp m', mentally sub 'm' for 'Req' in the signatures.
16:00:43 <motte> oh.. so can i "override" the handleHttpException somehow?
16:01:11 <koz_> motte: I guess the term 'monad transformer' is new to you?
16:01:25 <motte> it indeed is
16:01:35 <koz_> Then basically don't worry about it.
16:01:38 <koz_> Just work in Req.
16:02:41 <crestfallen> hi I'm having trouble in ghci. I upgraded cabal to 3.2.0.0 and ghci is at 8.4.4. when I attempt to move the cursor from right to left to edit, the cursor jumps up into the scrollback, for lack of a better explanation. this is a debian 10 machine. anyone have that issue? 
16:02:51 <motte> i basically want to return an Either String String from a function that does a GET request, where Left would contain a status code
16:03:21 <koz_> motte: So what's the closest thing you found to what you think you need?
16:03:32 <motte> using catch
16:03:34 <koz_> I guess there's some 'make a GET request' function?
16:04:02 <motte> yes, i can make the get request, the only problem is the error handling
16:04:11 <koz_> motte: OK, so you need to basically do this.
16:06:17 <koz_> catch thingThatMakesYourRequest handler
16:06:29 <crestfallen> yeah also I'm having the exact problem on another debian 10 machine at work.
16:06:37 <koz_> Where handler will be typed as 'HttpException -> Req a'.
16:06:46 <koz_> Then you can take the exception apart and figure out what went wrong.
16:06:51 <koz_> And then proceed accordingly.
16:07:31 <motte> koz_: right. but the nicer way would be using a monad transformer?
16:07:38 <koz_> motte: Orthogonal.
16:07:41 <gattytto> I think I found why my build is failing, seems like "stack" doesn't have a "--ghc-options" arg 
16:07:45 <koz_> Literally don't even concern yourself with this./
16:08:01 <crestfallen> almost unusable... any ideas?
16:08:15 <motte> koz_: alright, thanks a lot!
16:08:59 <gattytto> crestfallen: what IDE are you using? 
16:10:13 <crestfallen> gattytto, it's just the ghci that comes with cabal, in terminal. I use vim but its unrelated
16:11:55 <crestfallen> the cursor jumps up and travel to the left above the prompt line.
16:12:01 <crestfallen> travels*
16:14:19 * hackage clckwrks 0.26.2.3 - A secure, reliable content management system (CMS) and blogging platform  https://hackage.haskell.org/package/clckwrks-0.26.2.3 (JeremyShaw)
16:21:58 <crestfallen> anyone have this issue? ^ frustrated..
16:22:18 <gattytto> from what terminal are you running ghci ?
16:22:25 <gattytto> bash/zsh?
16:23:24 <crestfallen> bash on xTerm
16:25:52 <gattytto> can you try without the desktop? like, CTRL+ALT+F1 and go to ghci from that shell?
16:26:19 <crestfallen> gattytto, thanks, yeah I can barely use it. It loads programs fine, but you cannot travel right to left, or delete 
16:26:26 <crestfallen> ok one moment thanks
16:28:27 <gattytto> ouch
16:31:41 <monsterchrom> dolio: Right, it is not the Haskell sense of lazy. It has the aspect of on-demand, but it also gets re-computed every time.
16:33:29 <dolio> Right, because it's even worse to do proper laziness. :)
16:33:33 <gattytto> crestfallen: sorry I forgot to tell you, ctrl+alt+f7 will get you back to your window manager
16:33:55 <dolio> Or, even harder, rather.
16:38:28 <crestfallen> gattytto, thanks, I'm in another desktop, default x10 or something? it's not gnome, my normal desktop. but the problem remains. ctrl alt f1 didn't give me a skeletal terminal or anything.
16:38:45 <gattytto> try the other f's before 7
16:38:49 <gattytto> like 2, 3 and 4
16:39:23 <crestfallen> thanks let me start a macbook for the chat
16:39:54 <jbox> I've been trying to get my dev environment to work (get hie to recognize that xmonad is, in fact, installed), and somehow I borked everything
16:40:01 <jbox> stack won't even run now
16:40:04 <jbox> stack: error while loading shared libraries: libHShpc-0.6.1.0-ghc8.10.2.so: cannot open shared object file: No such file or directory
16:52:36 <dolio> monsterchrom: That's kind of the irony behind rants about Haskell having the 'wrong' data types relative to ML. They both have all the same data types, but you have to do a lot of work to actually do laziness in ML, while to get the ML sort of type in Haskell you just need to put ! on things.
16:56:31 <monsterchrom> Yeah
16:57:28 <gattytto> how can I put "+RTS -M3000M" in stack.yaml ghc-options: ? it seems to split them separately
17:00:01 <crestfal1en> gattytto: hi I'm in x11 and the problem is not occuring. it's like a minimal terminal not sure!
17:01:11 <gattytto> crestfal1en: that's good to hear so you found a workaround
17:06:35 <crestfal1en> gattytto: ha! that's it? ! hey do you think it's something to do with updating gnome? It seems that's the only change that I made recently... and it happened on two machines
17:09:55 <gattytto> crestfal1en: maybe default configs in xterm changed between versions, maybe you added charsets? or maybe auto-config of x changed your input settings in xorg conf
17:11:33 <crestfal1en> gattytto: how would I google the issue to see if haskell made any posts about it? I couldn't find any posts re: it.
17:11:58 <crestfal1en> I mean, what do you call that ? :)
17:18:31 <gattytto> crestfal1en: it's not haskell related, but it has to do with terminals and charsets probably
17:19:08 <gattytto> I get the same kind of behavior when trying to edit a LXD config from a heavily colorified zsh terminal
17:22:53 <crestfal1en> gattytto: thanks kindly. any quick solution? I use nvim with pathogen package
17:23:29 <gattytto> try different terminals
17:24:22 <gattytto> and try to finetune your keyboard settings in the os, add the required charsets so you make sure your keyboard functions are fully supported by the terminal you use to run ghci
17:24:41 <jbox> is stack supposed to replace ghcup?
17:27:47 <koz_> jbox: ghcup has some of the functionality of stack.
17:28:01 <crestfal1en> thanks gattytto checking on it
17:30:39 <gattytto> jbox in a general view of things, you use ghcup to setup your ghc, which can be different versions (8.x.y, for instance 8.10.1) then you will use stack toolset to manage your projects, like starting a project from scratch using default files or to call ghc in different ways to build your project
17:33:54 <gattytto> can I reference ENV_VARS for values in stack.yaml?
17:35:20 <koz_> jbox: To further elaborate, ghcup sets up GHC itself, as well as some core bits (including Cabal). You then can use cabal to do everything building-Haskell-related. Stack does both of these, but it's opinionated.
17:54:39 <gattytto> so trying to use +RTS -M3500M in my stack.yaml results in: "+RTS -M3500M"=--ghc-options +RTS --ghc-options -M3500M
17:54:41 <gattytto> :(
17:56:27 <gattytto> "'+RTS -M3500M'"=--ghc-options '+RTS --ghc-options -M3500M'
18:01:13 <gattytto> I think this did the trick: '"+RTS -M3500M -RTS"' double quotes inside singles 
18:20:19 * hackage staversion 0.2.4.0 - What version is the package X in stackage lts-Y.ZZ?  https://hackage.haskell.org/package/staversion-0.2.4.0 (debugito)
18:52:38 <mikevdg> Ho geez, there's a thousand people in this channel.
18:52:53 <mikevdg> I thought Haskell was niche.
18:53:06 <gattytto> you expected more ppl? or less? 
18:53:38 <gattytto> I'm very glad on how quick I got responses when I got here
18:54:06 <mikevdg> I was expecting maybe a dozen or so.
18:54:58 <gattytto> did you watch the computerphile videos on haskell? they are very nice
18:56:35 <mikevdg> I'm working through some tutorials now. I'm looking at the Fractional class and wondering why it exists.
19:00:23 <mikevdg> Why does Ord require so many operators? (<) is the opposite of (>=)
19:01:00 <int-e> > (0/0 < 1, 0/0 >= 1) -- IEEE disagrees
19:01:02 <lambdabot>  (False,False)
19:01:19 * hackage clckwrks-plugin-page 0.4.3.24 - support for CMS/Blogging in clckwrks  https://hackage.haskell.org/package/clckwrks-plugin-page-0.4.3.24 (JeremyShaw)
19:01:58 <dsal> mikevdg: What do you mean "Require?"  Minimal complete definition: compare | (<=)
19:02:47 <mikevdg> dsal: you're right. I just saw that.
19:03:17 <mikevdg> int-e: I reserve my right to disagree with the IEEE. You can't just change math.
19:03:18 <dsal> If you're trying to learn haskell by looking at tutorials that are telling you about fractional and stuff, you're definitely doing it the hard way.
19:03:36 <int-e> As for the Fractional class, it's more or less a field... of characteristic 0 if you want fromRational to be total.
19:03:45 <mikevdg> It's an example of a type class, to teach type classes.
19:03:48 <int-e> mikevdg: But Haskell is a programming language.
19:04:57 <int-e> mikevdg: Anyway, I suspect that IEEE floating point types (which Haskell does have) with NaNs (you'll find a lot of support for the idea that this was a mistake... but not universal support) is the reason why Ord has all these comparison methods.
19:05:48 <int-e> Also, the class methods tend to be inlined anyway, so extra methods don't hurt much, most of the time.
19:09:15 <gattytto> so I'm looking for a way to use a ENV VAR inside stack.yaml, is this possible? 
19:09:16 <int-e> There are more "superfluous" methods in other classes... mostly with the idea that the redundant methods can be optimized for some types.
19:09:57 <int-e> Foldable is an extreme example of this.
19:10:29 <dsal> I'm kind of sad about my GoPro project.  It's sufficiently feature complete that I don't really have anything I need it to do that it doesn't already do.  I've got concurrent cloud-based exodus tools, local versions, resumable parallel uploads.  Only things I could add might be helpful for other people, but I don't know any of those people.
19:10:32 <dsal> I guess I need a new project.
19:10:42 <dsal> Haskell is too easy.  :(
19:11:20 <int-e> (`:i Foldable` reads like the interface of Data.List ;-) )
19:11:22 <gattytto> dsal: can you share the repo link? 
19:12:12 <dsal> gattytto: http://dustin.sallings.org/2020/04/29/gopro-plus.html is a blog post I wrote a bit back.  github.com/dustin/gopro is the code.  If you know anyone who does stuff with GoPros, it's a bunch of essential stuff.  :)
19:15:14 <koz_> dsal: Did you tell Haskell Weekly about it?
19:15:17 <koz_> If not, _do_.
19:16:08 <gattytto> dsal: did you make it cloud-native? 
19:16:33 <dsal> gattytto: I don't know what you mean by that.
19:16:52 <dsal> koz_: oh neat.  I want to find a GoPro user someday
19:17:24 <gattytto> like kubectl apply -f your-repo/kube-manifest.yaml like elasticsearch and others
19:17:43 <gattytto> so we can deploy it in a kubernetes cluster for instance. 
19:21:51 <dsal> I'm still not sure why people would deploy anything with kubernetes.  heh
19:22:21 <dsal> It's a single binary.  (with a web interface that needs a static dir, but I've been thinking about embedding it / pulling it from github on startup)
19:23:34 <mikevdg> Prelude> toRational 1.25404319552844595 % 4503599627370496(I know some smaller numbers that will also work :-)  )
19:23:46 <mikevdg> ...that formatting didn't work.
19:23:59 <dsal> > toRational 1.25404319552844595 % 4503599627370496
19:24:00 <lambdabot>  error:
19:24:00 <lambdabot>      • No instance for (Integral Rational) arising from a use of ‘%’
19:24:00 <lambdabot>      • In the expression:
19:24:08 <mikevdg> toRational 1.2
19:24:31 <mikevdg> > toRational 1.2
19:24:31 <gattytto> dsal: deploying in kube sometimes gives more fine-grained expenditure, like if you containerize your apps in aws/gce it'll be cheaper than a vps because you pay as you use
19:24:33 <lambdabot>  5404319552844595 % 4503599627370496
19:24:46 <dsal> It's not clear what you're trying to accomplish.  Why would you type `toRational 1.2` ?
19:24:47 <Axman6> > decodeFloat 1.2
19:24:48 <lambdabot>  (5404319552844595,-52)
19:25:26 <mikevdg> I'm just playing with the numbers and trying to work out how they fit together.
19:26:09 <dsal> gattytto: But why would I want to do that?  GoPro Plus already does all the cloud stuff for free.  I wanted tools to free myself from that.  I guess I did make a web interface as well, which maybe could use that, but the `backup` command runs locally and uses AWS Lambda to push all of the data to your own S3 bucket, tracking that state locally.
19:26:28 <Axman6> > properFraction 1.2
19:26:30 <lambdabot>  (1,0.19999999999999996)
19:26:41 <mikevdg> ew.
19:27:11 <Axman6> that's why you get the weird result with 1.2, since it cannot be exactly represented in IEEE-754
19:27:26 <Axman6> > iterate (*2) 1.2
19:27:29 <lambdabot>  [1.2,2.4,4.8,9.6,19.2,38.4,76.8,153.6,307.2,614.4,1228.8,2457.6,4915.2,9830....
19:27:31 <dsal> My goal is:  GoPro decides to shut down, I can copy all my data out in ~43 minutes.  (I have a slow connection, lots of latency, and that was without much concurrency)
19:27:43 <dsal> mikevdg: If you don't like IEEE standards, there are plenty of others to choose from.
19:28:05 <Axman6> > properFraction (1.2 :: Rational)
19:28:07 <lambdabot>  (1,1 % 5)
19:28:24 <Axman6> :t 1.2
19:28:25 <lambdabot> Fractional p => p
19:30:12 <Axman6> > properFraction (1.2 :: Float)
19:30:15 <lambdabot>  (1,0.20000005)
19:30:32 <Axman6> > toRational (1.2 :: Float)
19:30:34 <lambdabot>  5033165 % 4194304
19:32:19 * hackage crdt-event-fold 1.0.0.1 - Garbage collected event folding CRDT.  https://hackage.haskell.org/package/crdt-event-fold-1.0.0.1 (rickowens)
19:36:15 <int-e> The thing is, I believe that you can get a majority of Haskell users to agree that the existing numerical classes are awful, but you cannot get them to agree on a better design for them. There's too many conflicting design goals.
19:36:58 <Axman6> simple-reflect is the onlt reasonable number implementation, fight me
19:37:23 <int-e> > scanl (+) x [1..]
19:37:24 <lambdabot>  [x,x + 1,x + 1 + 2,x + 1 + 2 + 3,x + 1 + 2 + 3 + 4,x + 1 + 2 + 3 + 4 + 5,x +...
19:37:39 <Axman6> keeping the AST and allowing the user to evaluate expressions if they need the answer is the proper thing to do
19:37:53 <mikevdg> What is simple-reflect?
19:38:02 <Axman6> > 1 + f x
19:38:03 <lambdabot>  error:
19:38:03 <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M820095627375...
19:38:03 <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
19:38:10 <Axman6> > 1 + f x :: Expr
19:38:12 <lambdabot>  1 + f x
19:38:24 <Axman6> > 3 ^ 7 :: Expr
19:38:26 <lambdabot>  3 * 3 * (3 * 3) * (3 * 3 * 3)
19:38:39 <mikevdg> :t (^)
19:38:41 <lambdabot> (Integral b, Num a) => a -> b -> a
19:39:00 <Axman6> > 3 ** 7 :: Expr
19:39:02 <lambdabot>  3**7
19:39:12 <mikevdg> :t (**)
19:39:13 <lambdabot> Floating a => a -> a -> a
19:39:28 <mikevdg> So (^) is exponent. What is (**) meant to be?
19:39:34 <int-e> mikevdg: You're seeing it in action... it captures numeric expressions in an ADT that can be pretty-printed
19:39:37 <Axman6> a different exponent...
19:39:46 <Axman6> > 3 ** 3.5
19:39:47 <lambdabot>  46.76537180435969
19:39:50 <int-e> :t (^^)
19:39:51 <lambdabot> (Fractional a, Integral b) => a -> b -> a
19:40:08 <int-e> ^ is for natural number exponents, ^^ for integer exponents, ** for arbitrary exponents
19:40:19 <mikevdg> :-o
19:40:24 <Axman6> Haskell is an exponential language, we have at least three ways to compute exponentials
19:40:47 <int-e> The operators live in different type classes.
19:40:56 <Axman6> > 5 ^ (-2)
19:40:58 <lambdabot>  *Exception: Negative exponent
19:41:00 <dsal> Learning Haskell by exploring the surface area is a daunting task.
19:41:01 <Axman6> > 5 ^^ (-2)
19:41:04 <lambdabot>  4.0e-2
19:41:30 <int-e> The numeric type classes are one of the worse places to start.
19:41:49 <int-e> (One other terrible place is the implementation of IO)
19:42:01 <dsal> :t show. (^^ 2)
19:42:02 <lambdabot> (Show a, Fractional a) => a -> String
19:42:06 <mikevdg> Yea, I got hit in the face with IO and lazy evaluation.
19:43:49 <dsal> Lazy evaluation sometimes makes really hard things easy, but I rarely notice it in general.  It can make some things work in unexpected ways when mixed with io, for sure.
19:44:29 <monsterchrom> ** uses e^x and ln, and floating point approximations, it is inappropiate if you're doing natural numbers, or even your own number type for which ln doesn't make sense.
19:44:59 <mikevdg> yea, like having a file be closed on you before you're done. Then you need to go read a chapter further ahead in the book that describes how `deepSeq` works.
19:45:05 <monsterchrom> x^^y allows negative powers, therefore 1/x must make sense. Well this doesn't make sense for some number types either.
19:45:44 <monsterchrom> Therefore, x^y is there for that.
19:45:56 <dsal> mikevdg: that sounds... Wrong.  I don't think I've ever used deepseq outside of benchmarks.
19:46:27 <dsal> What book is this?
19:46:31 <mikevdg> Well, I gave up on the IO stuff and just moved on.
19:46:35 <Axman6> lazy IO is just a bad idea in general
19:47:54 <T0pH4t> hello all, quick question. Is there a way to access the type declaration in a class so that I can use it in func signature? For example "class Foo a where type Bar " then "doStuff :: Foo a => a -> Bar a"
19:48:08 <T0pH4t> Effectively I want access to the type declared for Bar in Foo
19:48:39 <Axman6> (b ~ Bar a, Foo a) => ... ?
19:48:55 <T0pH4t> oops that should be "type Bar a" in class def
19:49:09 <Axman6> wait, does that not work the way you've written it?
19:49:19 <T0pH4t> Well Bar is defined within class Foo, so Axman6 not sure that works
19:49:27 <Axman6> I think it should
19:49:32 <T0pH4t> i don't even think what i have is legal is it?
19:49:45 <Axman6> looks legal to me
19:49:54 <Axman6> have you tried it?
19:50:11 <T0pH4t> well let me give it a shot
19:51:32 <Axman6> % :t doThing
19:51:32 <yahb> Axman6: Foo a => a -> Bar a
19:51:56 <Axman6> This is using this definition in yahb: class Foo a where type Bar a
19:52:03 <Axman6> and  doThing :: Foo a => a -> Bar a; doThing = undefined
19:53:40 <T0pH4t> hmm not liking it
19:53:54 <Axman6> what error do you get
19:54:22 <T0pH4t> oh wait u hauve b ~ Bar a
19:54:30 <Axman6> you shouldn't need that
19:54:51 <Axman6> what you have should work, but may need an extension. I can't help if you don't tell me what error you get
19:55:04 <T0pH4t> ]ok
19:55:06 <T0pH4t> hmm
19:55:10 <T0pH4t> let me give u error
19:55:48 <T0pH4t> This isn't going to be exact by GTLLiteral == Foo and Convert == Bar
19:55:53 <T0pH4t> Couldn't match type ‘a’ with ‘Convert (Convert a)’
19:55:54 <T0pH4t>       ‘a’ is a rigid type variable bound by
19:55:56 <T0pH4t>         the type signature for:
19:55:58 <T0pH4t>           func :: forall a.
19:56:00 <T0pH4t>                   GTLLiteral a =>
19:56:02 <T0pH4t>                   L.Name -> L.GTL a -> GTLFunc (Convert a)
19:56:08 <Axman6> urgh, don;t paste multiple lines here
19:56:12 <Axman6> @where paste
19:56:12 <lambdabot> Help us help you: please paste full code, input and/or output at eg https://paste.tomsmeding.com
19:56:14 <T0pH4t> ok
19:56:35 <Axman6> and since that code doesn't match what you showed before, you're going to have to share the code too
19:56:39 <crestfallen> hi I'm wondering if I install this debian package if I can fix a problem in ghci where the cursor jumps off the prompt line, while backspacing or deleting right to left.      libghc-base-unicode-symbols-doc (0.2.2.4-11)
19:56:45 <Axman6> put them both in one paste
19:56:49 <crestfallen> this is on debian buster
19:57:15 <dsal> I only use os packages for Haskell on nixos
19:58:59 <mikevdg> How do people usually get a description of a type class? Hoogle? Source diving?
19:59:13 <T0pH4t> @axman6 https://paste.tomsmeding.com/JTX8UV8V
19:59:13 <lambdabot> Unknown command, try @list
19:59:26 <T0pH4t> that may still be too confusing :/
19:59:30 <dsal> % :i Traversable
19:59:30 <yahb> dsal: type Traversable :: (* -> *) -> Constraint; class (Functor t, Foldable t) => Traversable t where; traverse :: Applicative f => (a -> f b) -> t a -> f (t b); sequenceA :: Applicative f => t (f a) -> f (t a); mapM :: Monad m => (a -> m b) -> t a -> m (t b); sequence :: Monad m => t (m a) -> m (t a); {-# MINIMAL traverse | sequenceA #-}; -- Defined in `Data.Traversable'; instance [safe] Traversa
19:59:36 <ghoulguy> mikevdg: If you're in GHCi, try  :doc Show
19:59:45 <mikevdg> thanks!
20:00:12 <monsterchrom> I read the doc. I have local docs installed and/or built.
20:00:13 <mikevdg> It has a lot of '@'s in it.
20:00:16 <ghoulguy> Otherwise I typically have the haddocks open for a package I'm using that I don't have memorized
20:00:47 <Axman6> T0pH4t: toExpr expects a Convert a but you're giving it an a
20:00:49 <gattytto> crestfallen: I think your error needs clarification, you enter to ghci, and then use :e to open a code file in your vim?
20:01:12 <monsterchrom> The @s are for the "haddock" program to read and turn into HTML markups.
20:01:28 <crestfallen> gattytto, any use of ghci, if I backspace or try to delete, the cursor jumps off the line.
20:01:39 <gattytto> oh ok
20:01:42 <monsterchrom> This is why the :doc command is unsatisfactory, too. But maybe you could learn haddock syntax and decode it yourself
20:02:16 <ghoulguy> Learning haddock syntax is worth doing if you're going to be writing Haskell code, too
20:02:17 <crestfallen> I installed above package, but that looks like its for latex notation
20:02:28 <T0pH4t> aaxman6 ur right hang on a sec, let me check something
20:02:35 <Axman6> T0pH4t: it feels like you maybe want something like func :: GTLLiteral a => L.Name -> L.GTL (L.Expression a) -> GTLFunc (Convert a)?
20:02:36 <dsal> I don't think about classes very much at all, but random package classes I usually read on the web.
20:02:47 <Axman6> or... something?
20:03:41 <Axman6> T0pH4t: it at least seems you want fromExpr instead of toExpr, since that's the only want to make a Convert a
20:03:55 <Axman6> but without knowing what this code is supposed to do I'm just playing type tetris
20:04:08 <T0pH4t> axman6 I got it, i initially refcatored some code and I refactored it wrong
20:04:23 <T0pH4t> I wasn't sure that using Convert int eh type sig was even legal, but i gues it is which is great
20:04:30 <T0pH4t> that compiled now, thx alot!
20:04:35 <T0pH4t> the type*
20:04:56 <T0pH4t> it was suppose to be L.GTL (Convert a) -> GTLFunc a
20:05:01 <T0pH4t> for the last 2 types
20:05:08 <T0pH4t> i flipped it by accident
20:07:49 <mikevdg> Does anyone here have haskell-language-server working?
20:09:54 <Axman6> sure
20:10:38 <c_wraith> is installing with ghcup not working?
20:11:18 <mikevdg> Well, it's meant to work out of the box for Visual Studio code, but it didn't. It won't recompile from master for me:
20:11:33 <mikevdg> shake-0.19.1 from stack configuration does not match >=0.16.4 && <0.19  (latest matching version is 0.18.5)
20:12:02 <mikevdg> It's a Cabal thing, but I don't want to mess with it oo much. I'd rather spend time working through these Haskell exercises.
20:12:26 <c_wraith> that's a stack thing, it appears
20:12:58 <mikevdg> er... yea, one of those thingies.
20:13:29 <crestfallen> anyone seen this? :  any use of ghci, if I backspace or try to delete, the cursor jumps off the line.
20:14:01 <crestfallen> debian buster bash, gnome-terminal
20:14:48 <mikevdg> crestfallen: that sounds like old terminal problems. You probably want to do something like "set TERM=vt100", or "set TERM=xterm".,
20:15:14 <mikevdg> It goes way back to the days when people couldn't decide which code meant "backspace".
20:15:50 <mikevdg> Also poke through the gnome-terminal settings. You'll find settings for backspace and delete behaviour.
20:16:40 <mikevdg> Or just do what I do, and never make spelling mistakes.
20:17:48 <Axman6> mikevdg: the VS Code extension is supposed to install the appropriate HLS binary for you
20:18:31 <mikevdg> yea, that's the part that didn't work. The download just failed. So I downloaded and installed manually, and now I get "The haskell-language-server has crashed 5 times" or something similar.
20:18:40 <crestfallen> mikevdg, one sec.. thanks
20:19:05 <Axman6> it's important to get the right HLS binary for your project though, the GHC used to compile it needs to match
20:19:28 <Axman6> when you say the download failed, how did it fail?
20:19:51 <mikevdg> I'll try installing it again now.
20:19:51 <Axman6> and what errors does the failing hld binary sent to its output?
20:19:54 <Axman6> hls*
20:21:33 <mikevdg> Message:  user error (AesonException "Error in $: key \"packages\" not found")
20:22:04 <mikevdg> Looks like malformed JSON, but I can't find any JSON anywhere.
20:22:19 <Axman6> are you using a stack based project?
20:22:23 <mikevdg> yes
20:22:35 <Axman6> what's your stack.yaml look like?
20:22:38 <Axman6> !where paste
20:22:38 <mikevdg> ...except for the JSON that goes between VS Code and the language server.
20:22:42 <Axman6> @where paste
20:22:42 <lambdabot> Help us help you: please paste full code, input and/or output at eg https://paste.tomsmeding.com
20:23:04 <Axman6> IIRC the Yaml parser is built on top of Aeson
20:23:08 <mikevdg> lambdabot: good bot, but it's only two lines long.
20:23:09 <mikevdg> resolver: lts-16.18install-ghc: true
20:23:27 <Axman6> it needs a packages entry too
20:23:30 <Axman6> packages:
20:23:34 <Axman6>  - '.'
20:23:43 <mikevdg> Thanks, will add. 
20:24:55 <mikevdg> oohh... it's doing something!
20:25:39 <mikevdg> It's... consuming my hard drive and blowing a lot of hot air out the back of my PC!
20:25:48 <Axman6> as it should
20:26:19 * hackage egison 4.1.2 - Programming language with non-linear pattern-matching against non-free data  https://hackage.haskell.org/package/egison-4.1.2 (SatoshiEgi)
20:32:30 <crestfallen> mikevdg, I think that command is export TERM=vt100. can I write that in .bash_profile ?
20:34:13 <mikevdg> er... if you want, but you only get very basic monochrome functionality. A VT-100 is an ancient console from the 1980s.
20:34:28 <mikevdg> I use that if absolutely nothing else works.
20:35:22 <mikevdg> I suspect that your gnome-terminal is misconfigured a bit though. Somebody might have changed it's behaviour.
20:35:50 <mikevdg> Either that, or your readline library got reconfigured by something.
20:36:07 <mikevdg> (making an assumption that ghci uses readline?)
20:36:29 <crestfallen> mikevdg, thanks, quickest fix so I can get back to slaughtering haskell?
20:36:50 <crestfallen> I essentially cant use ghci
20:37:05 <mikevdg> Yea, but just be aware that adding it it .bash_profile makes it global and it might break other things.
20:37:13 <mikevdg> e.g. `ls --color`
20:38:23 <crestfallen> no I mean the quickest fix you suggest. like I tried installing urxvt unicode but its so complicated. like all night to configure it.
20:38:32 <crestfallen> mikevdg, ^
20:38:52 <mikevdg> which distro were you on?
20:39:03 <crestfallen> debian buster
20:39:44 <crestfallen> it happened suddenly on two buster machines; must have been the update
20:40:16 <mikevdg> weird. `urxvt` should just be a case of `apt install urxvt` and it should work without any configuration.
20:40:37 <mikevdg> ...although it over-advertises itself. It's unicode support isn't as good as gnome-terminal.
20:40:59 <mikevdg> but it is very lightweight and really fast.
20:41:37 <mikevdg> It's been years since I had to fix any of that stuff. Linux consoles should work out of the box these days.
20:42:05 <mikevdg> In the worst case scenario, you could just press CTRL+ALT+F1 and try the good old-fashioned Linux console.
20:42:26 <crestfallen> mikevdg, another member suggested upgrading charsets. but I tried to download debian packages to no avail
20:43:43 <mikevdg> You don't need to download debian packages. You do everything through apt (except Haskell)
20:43:52 <mikevdg> apt install foo
20:44:41 <crestfallen> well I just use apt-get
20:46:30 <mikevdg> Holy poop. Some of my Haskell one-liners are getting crazy powerful. 
20:46:40 <T0pH4t> axman6: I don't suppose you call me why a0 is not resolving as 'a' in this? https://paste.tomsmeding.com/jDDYgsvv
20:46:57 <crestfallen> please show some simple mikevdg !
20:47:03 <crestfallen> simple ones*
20:47:07 <T0pH4t> My guess is that since actual 'a' is not used it can't determine (LitGTL)
20:47:08 <T0pH4t> ugg
20:47:14 <T0pH4t> wow bad poste :?
20:47:47 <T0pH4t> better paste: https://paste.tomsmeding.com/twpXcfs2
20:47:49 <mikevdg> > map (\x -> (length x, head x)) $ group $ sort [1,3,5,7,5,7,3,5,5,1]
20:47:52 <lambdabot>  [(2,1),(2,3),(4,5),(2,7)]
20:48:25 <mikevdg> After spending a lifetime writing Java....
20:49:35 <mikevdg> ha ha! The "proper" answer is 5 lines long.
20:50:57 <mikevdg> next up: good ol' binary trees.
20:51:18 <mikevdg> let's invert these blighters, without a whiteboard.
20:51:49 <Axman6> what is a binary tree inversion anyway?
20:52:35 <mikevdg> no idea. I think you just treat it like a sorted collection and choose a different root.
20:53:10 <mikevdg> It's the prototypical job interview question.
20:53:37 <ghoulguy> "An inversion, or mirror, of a Binary Tree (T),​ is just a Binary Tree M(T) whose left and right children (of all non-leaf nodes) are swapped."
20:54:08 <mikevdg> so, `reverse` then?
20:54:11 <c_wraith> so that's like...  2 lines?
20:54:23 <Axman6> so invert (Branch a l r) = Branch a (invert r) (invert l); invert a = a
20:54:44 <ghoulguy> except if mikevdg wants to do it as an exercise then maybe don't look up
20:54:53 <mikevdg> ah, but you can't use Haskell. That's cheating. Write it in C like a proper coder.
20:55:29 <koz_> mikevdg: Proper coders write x86 assembly. By hand. :P
20:55:39 <c_wraith> The only difference in C is that there's a bunch more syntax.
20:58:03 <Axman6> node_t * invert(node_t * t) { t == NULL ? return NULL : { node_t * tmp = t->l; t->l=invert(t->r); t->r=invert(tmp);}}
20:58:10 <mikevdg> neat.
20:58:18 <Axman6> or something, I have no idea
20:58:29 <mikevdg> I wonder how well it would go down if I did do it in x86 assembly on a white board?
20:58:48 <mikevdg> I could probably just write gibberish and they'd never check it.
20:59:42 <ghoulguy> You'd probably just convince them you'd be difficult to work with and not impress?
21:01:16 <mikevdg> Yea. I was at a Java job interview and they were asking me about VMs, lambdas, etc. They cut me off everytime I drew a comparison to other languages.
21:01:26 <dsal> I wrote tons of asm in high school for/on my calculator.  Last asm code I wrote was for AVR.  It did a useful thing for a tiny program.  Demultiplexed a PPM signal onto discrete output channels on an ATTiny85 in ~70 lines of code.  Debugged it on an oscilloscope.  heh
21:01:33 <int-e> Axman6: that'll be fun if there's sharing :)
21:01:42 <T0pH4t> Axman6: not to bother, not sure if u looked at that example. 
21:02:30 <ghoulguy> int-e: Is it still a tree if there's observable sharing?
21:02:48 <Axman6> T0pH4t: sorry, in a meeting at the moment
21:03:06 <Axman6> int-e: YOLO
21:03:16 <T0pH4t> np
21:03:33 <int-e> ghoulguy: as long as you don't actually observe it ;)
21:06:10 <int-e> Hmm, I guess there's too little going on in that function to be Turing-complete.
21:07:18 * hackage exception-via 0.1.0.0 - DerivingVia for your hierarchical exceptions  https://hackage.haskell.org/package/exception-via-0.1.0.0 (parsonsmatt)
21:08:29 <crestfallen> mikevdg, wtf now I can backspace only to the eighth space on the ghci prompt line. it stops dead, but doesn't jump off the line :)
21:09:10 <mikevdg> umm.. okay. I'd try creating another user and logging in as that user to see if it's a global problem or in ~/.config somehow.
21:09:42 <mikevdg> Or try using `xterm`.
21:09:57 <mikevdg> It's the old workhorse granddaddy terminal emulator.
21:10:06 <Axman6> my C above is missing a return t
21:12:35 <int-e> Axman6: yeah, my brain autocorrected that :P
21:12:52 <crestfallen> mikevdg, thanks a lot , what should I look for in .config ?
21:13:28 <crestfallen> it is global btw , earlier I was trying it in x11
21:13:45 <Axman6> int-e: I guess I'll never work for Google :'(
21:13:50 <mikevdg> You don't really look in .config unless you're really keen. It contains all your settings.
21:14:21 <crestfallen> mikevdg, what setting may be off though?
21:17:05 <mikevdg> There's lots of things. You have the environment variables TERM, COLUMNS. You could have a version of ghci that's been compiled funny without readline or whatever alternative it might use. You might have a screwed up terminfo database. You might have a misconfigured /etc/inputrc
21:17:42 <mikevdg> You're talking about a really deep rabbit hole that has 50 years of history to screw things up.
21:18:12 <mikevdg> Personally I suspect you've got the settings in gnome-terminal wrong. 
21:18:35 <crestfallen> but which setting(s) ?
21:19:12 <mikevdg> Edit -> Preferences -> Compatibility
21:19:22 <mikevdg> "Backspace key generates": ASCII DEL
21:19:30 <mikevdg> Delete key generates": Escape sequence
21:19:43 <mikevdg> Encoding - always UTF-8 unless you're encoding a URL
21:20:03 <mikevdg> Actually just hit the "Reset" button at the bottom of that settings form.
21:21:40 <crestfallen> reset it is! thanks trying that mikevdg 
21:25:28 <mikevdg> Just looking at ghc. It looks like it uses ncurses directly.
21:26:03 <crestfallen> very sorry pls explain. resetting (they were already as you suggested) didn't fix it
21:29:35 <mikevdg> Sorry, I can't replicate your problem. "It works on my machine" even if I screw with a lot of settings.
21:29:58 <mikevdg> Having said that, it was an ordeal just getting ghci to work. 
21:31:41 <crestfallen> thanks my friend.. really appreciate it. later mikevdg 
21:45:56 <ptrcmd> is it possible to ask stack to give me a list of packages used to run a .hs file with commands like "stack --resolver lts-16.1 XX.hs"?
21:46:47 <ptrcmd> I want to run ghci with the packages used in the .hs file
21:49:20 <ptrcmd> hmm..telling stack to give me verbose output works
23:16:49 * hackage periodic-client 1.1.7.2 - Periodic task system haskell client.  https://hackage.haskell.org/package/periodic-client-1.1.7.2 (Lupino)
