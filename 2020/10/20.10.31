00:26:31 * hackage polysemy-methodology 0.1.3.0 - Domain modelling algebra for polysemy  https://hackage.haskell.org/package/polysemy-methodology-0.1.3.0 (locallycompact)
00:32:01 * hackage polysemy-methodology 0.1.3.1 - Domain modelling algebra for polysemy  https://hackage.haskell.org/package/polysemy-methodology-0.1.3.1 (locallycompact)
00:33:01 * hackage polysemy-methodology 0.1.3.2 - Domain modelling algebra for polysemy  https://hackage.haskell.org/package/polysemy-methodology-0.1.3.2 (locallycompact)
00:34:22 <int-e> that's  a quick release cycle.
01:27:31 * hackage protocol-buffers 2.4.14 - Parse Google Protocol Buffer specifications  https://hackage.haskell.org/package/protocol-buffers-2.4.14 (k_bx)
01:28:30 * hackage protocol-buffers-descriptor 2.4.14 - Text.DescriptorProto.Options and code generated from the Google Protocol Buffer specification  https://hackage.haskell.org/package/protocol-buffers-descriptor-2.4.14 (k_bx)
01:39:27 <dminuoso> Mmm, Im starting to think Im reinventing the wheel here.
01:40:01 <dminuoso> Im writing a sort of TH clone for larger scale code generation, and currently Im engineering a sort of knowledge base to keep track and discover where some identifier was defined in.
01:40:30 <dminuoso> So I have `localReify :: String -> G ThingInfo` and `globalReify :: String -> G ThingInfo`, things like that
01:40:47 <dminuoso> Does this already exist? Libraries to facilitate generating multiple connected modules from?
02:13:02 * hackage polysemy-video 0.1.2.0 -   https://hackage.haskell.org/package/polysemy-video-0.1.2.0 (locallycompact)
02:19:01 * hackage semver 0.4.0 - Representation, manipulation, and de/serialisation of Semantic Versions.  https://hackage.haskell.org/package/semver-0.4.0 (BrendanHay)
02:29:02 * hackage semver 0.4.0.1 - Representation, manipulation, and de/serialisation of Semantic Versions.  https://hackage.haskell.org/package/semver-0.4.0.1 (BrendanHay)
03:00:02 <PerseusPlease> very basic question, if I have a function type declaration like "convertOrError :: String -> String -> a" how can I get the type "a" as a string e.g. "Int"
03:01:36 <Rembane> PerseusPlease: I think that's a bit tricky, what's the thing you really want to solve?
03:03:10 <PerseusPlease> I'm reading a config using ConfigFile and have a string which I want to convert into appropriate types such as Int
03:04:21 <PerseusPlease> I could use "read" and have the default exception message, but it's rubbish, so I'd rather write a function that outputs a sensible exception including the type conversion that failed.
03:04:54 <Rembane> PerseusPlease: Got it, there's a better version here: https://hackage.haskell.org/package/base-4.14.0.0/docs/Text-Read.html#v:readMaybe
03:05:06 <Rembane> PerseusPlease: It has another variant here: https://hackage.haskell.org/package/base-4.14.0.0/docs/Text-Read.html#v:readEither
03:05:10 <PerseusPlease> Rembane, that's what I'm using.
03:05:38 <PerseusPlease> I also saw that, but I actually want to throw an exception.
03:06:11 <Rembane> PerseusPlease: Why do you want to throw an exception?
03:06:48 <PerseusPlease> Why does anyone ever want to throw an exception, the program can't continue
03:09:44 <Rembane> PerseusPlease: You can instead have a function that returns a Left with an error message if the parsing fails and if it succeeds you return a Right with the configuration record.
03:10:05 <PerseusPlease> Rembane, sure.
03:10:54 <PerseusPlease> I think we're concentrating on the wrong bit. I would still have the problem of getting a message that included the type I was trying to convert
03:11:43 <joel135> You want to say something like (convertOrError "(20, 5, True)" "Unable to interpret the missile parameters")?
03:13:18 <joel135> And then the error message should say something like "E: Unable to interpret the missile parameters (expected (Integer, Integer, Bool))"?
03:13:21 <PerseusPlease> joel135, well... convertOrError "port" "foo123" gives error "port is not Int"
03:16:12 <PerseusPlease> ^^ that probably needs an ":: Int" 
03:18:17 <joel135> Did you see this? https://hackage.haskell.org/package/model-0.4.2/docs/Data-Model-Util.html#v:convertOrError
03:25:44 <PerseusPlease> joel135, thanks. that is close to what I am looking for but a bit on the noisy side.
03:27:25 <PerseusPlease> this isn't pretty but works "drop 6 $ show $ typeOf (Nothing :: Maybe Int)"
03:28:20 <joel135> What do you import for that?
03:28:31 <PerseusPlease> import Data.Typeable
03:28:55 <joel135> nice
03:46:16 <jil`> hello
03:46:53 <simon> hi
03:57:56 <jil`> I'm trying a code example from a book and I don't understand why I get an error in ghci when I try it.  https://paste.debian.net/1169336/ 
03:58:20 <jil`> It has to do with the notation of the operator
03:58:58 <jil`> but do you see something wrong with  fsum = foldr (+) 0 ?
03:59:50 <byorgey> jil`: there's nothing wrong with the definition of fsum, the problem is  'fsum 1 2'
03:59:58 <byorgey> fsum must be applied to a list
04:00:18 <byorgey> so you could say  'fsum [1,2]' for example.
04:06:02 <jil`> I see .  Thak you.  
04:52:46 <simon> I'm trying to test a Servant API. I'm getting a type mismatch between 'Handler a' and 'ClientM a' following this tutorial: https://docs.servant.dev/en/stable/cookbook/testing/Testing.html#strategy-1-spin-up-a-server-create-a-client-make-some-requests -- my code and type error can be found here: https://gist.github.com/sshine/12ba219e94ea043aabf171b2918a1c07
04:55:12 <simon> so, when reasoning about this error myself, I'd have to agree with GHC that a Server is not a Client. so I'm not sure why the tutorial so freely uses 'runClientM (createUser 50001)' when 'createUser :: Integer -> Handler User'. I don't know if 'Handler' is server-specific, but at least it aliases to 'Server' and does not alias to 'ClientM'.
04:59:39 <__monty__> I'm not familiar with servant but I don't see a problem with your reasoning.
05:01:30 <dminuoso> simon: You're probably just confused about scoping here
05:01:44 <dminuoso> simon: In the documentation example, there's two different createUser
05:02:09 <dminuoso> Inside the code block you're looking at, there is:
05:02:17 <__monty__> Ah, you're right, didn't see the local binding.
05:02:25 <dminuoso> `let createUser = client (Proxy :: Proxy UserApi) ... runClientM (createUser 50001) (clientEnv port)`
05:02:40 <__monty__> Not exactly stellar pedagogy of the docs maybe.
05:03:11 <dminuoso> Dunno, but if you copy and paste the examples as they are, they work just fine.
05:03:17 <dminuoso> And the code comments make it clear too
05:03:35 <dminuoso> But if you think there's improvements to be made, make a PR?
05:07:08 <__monty__> Haven't looked into servant enough to have a well founded opinion. Imo, "the examples work when copied verbatim," shouldn't be the goal for tutorial-style docs. There could be great reasons for the apparent shadowing though, if server and client code are clearly separated it might be a good way to make it easy to find related code "on the other side."
05:07:42 <dminuoso> Well, I think it's reasonable to expect a user to *read* the examples?
05:07:47 <dminuoso> Rather than just skim
05:08:52 <dminuoso> Plus
05:08:59 <dminuoso> This is deep inside the *testing* documentation
05:09:16 <__monty__> Sure, but relying on careful reading and understanding of each line is wholly unnecessary. It's not like it's important the name is shadowed.
05:10:31 * hackage HUnit 1.6.1.0 - A unit testing framework for Haskell  https://hackage.haskell.org/package/HUnit-1.6.1.0 (SimonHengel)
05:10:42 <dminuoso> __monty__: At the beginning the documentation starts off with
05:10:44 <dminuoso> "Weâ€™ll use servant-client to derive client functions and then send valid requests to our API, running in another thread. This is great for testing that our business logic is correctly implemented with only valid HTTP requests."
05:10:59 <dminuoso> But anyway
05:11:17 <Uniaika> servant-client is awesome
05:11:29 <simon> dminuoso, d'oh. thanks. :)
05:12:30 <dminuoso> Overall, when writing servant code, you either end up shadowing names a lot, of you find yourself with very verbose naming
05:12:36 <dminuoso> Since you might have:
05:12:51 <dminuoso> createUser :: Proxy UserEndpoint
05:12:52 <__monty__> Nothing wrong with verbosity in a 20 line example.
05:12:55 <dminuoso> createUser :: ClientM ...
05:12:59 <dminuoso> createUser :: Handler ...
05:13:06 <dminuoso> createUser :: User -> IO ...
05:13:39 <__monty__> You can even add a note "In a real app just shadow the names for sanity's sake."
05:13:39 <dminuoso> __monty__: Sure, but the code style will reflect the authors opinion.
05:14:04 <dminuoso> Dunno, I think when you're that far in, you shouldn't get confused by this
05:14:07 <dminuoso> It's not the beginning
05:14:19 <dminuoso> It's almost at the end of the documentation when its about testing
05:14:59 <__monty__> It's a cookbook it's not intended to be read front to back. So it's not at the end. It's exactly at the start if what you're looking for is how to test your business logic...
05:15:10 <dminuoso> make a PR if you think its worthwhile changing
05:18:19 <__monty__> I've already said I don't know enough about servant to go changing their docs, there's plenty of docs to improve that I do feel like I have enough experience with to make good contributions. Like the GHC user guide and the cabal docs.
05:24:04 <Athas> Which exception does Haskell for SIGPIPE (the one that manifests as a "Broken pipe" error message)?
05:24:56 <dminuoso> Athas: ResourceVanished
05:25:33 <Athas> From GHC.IO.Exception?  Makes sense.
05:25:34 <Athas> Thanks.
06:25:01 * hackage redis-io 1.1.0 - Yet another redis client.  https://hackage.haskell.org/package/redis-io-1.1.0 (ToralfWittner)
06:30:32 * hackage wai-predicates 1.0.0 - WAI request predicates  https://hackage.haskell.org/package/wai-predicates-1.0.0 (ToralfWittner)
06:59:02 * hackage polysemy-methodology 0.1.4.0 - Domain modelling algebra for polysemy  https://hackage.haskell.org/package/polysemy-methodology-0.1.4.0 (locallycompact)
07:06:15 <merijn> CS writing question time: What's the right way to refer to "the property of being memory bound"? Memory boundedness? Any better suggestions?
07:10:04 <jkaye[m]> I think it's just "memory bound"
07:10:08 <jkaye[m]> What's an example of how you'd want to use it?
07:12:29 <merijn> jkaye[m]: "something is memory bound" and I need something more along the lines of "because of X being memory bound..." but that's very long and wordy in context. I'm not sure how I want to use it yet, I'm trying to figure out a non-awkward wording :p
07:13:29 <pjb> merijn: X being memory bound is X being bloated.
07:14:07 <jkaye[m]> Really? You believe there are no memory-bound tasks in the world? Stop trolling.
07:14:34 <pjb> You can always trade time for space.
07:14:37 <jkaye[m]> I do think that "memory bound" is probably the most succinct you're going to get, at least that I've heard that would be easily recognizable
07:14:48 <pjb> Agreed.
07:15:13 <jkaye[m]> Trading time for space is how you solve a memory-bound problem :)
07:23:53 <merijn> Eh, hard disagree
07:24:00 <merijn> memory bound is about space
07:24:11 <merijn> It's whether you are bottle-necked by memory transfer speeds
07:24:11 <nshepperd2> PSPACE is not equal to EXPSPACE, so i don't think you can always trade time for space
07:24:52 <merijn> If you are bottle-necked by memory transfer speed you can't necessarily trade that for time, definitely not without making things worse in terms of performance
07:25:25 <merijn> nshepperd2: That's talking about complexity anyway, and while complexity analysis is interesting, it's also mostly intellectual masturbation in terms of practical HPC :)
07:26:29 <nshepperd2> true, but i think it does suggest that there are problems that objectively take more space to solve than others
07:26:54 <merijn> nshepperd2: I don't know PSPACE and EXPSPACE enough agree or disagree ;)
07:29:59 <pjb> merijn: performace is a relative term. if memory bound is a problem it means your space performace is bad. You need to take less space!  And a way to do that, is to lose time to compress, or to recompute what is stored, etc.
07:31:16 <merijn> eh, no
07:31:32 <merijn> compute vs memory bound is about bottlenecks in roofline models
07:31:53 <pjb> I take memory bound here as meaning using too much memory.  But it may be doing many memory exchanges.  CPU bound vs memory-bus bound vs. I/O bound.
07:31:57 <merijn> You can't solve being memory bound by "being slower and using less space", because then performance goes even lower
07:32:29 <merijn> pjb: That's fine, but then you're taking memory bound to mean something different from literally everyone in HPC/performance oriented fields
07:32:40 <pjb> In that case, you can up to a certain measure do some computation in the CPU (with registers) to avoid accessing the memory, but there's not much you can do in general.
07:33:33 <merijn> Anyway, this discussion is woefully unhelpful to my original question >.>
07:33:53 <pjb> It's a good thing to be memory bound in a wayâ€¦ Look at the alternatives! If you put the data in secondary memory, then you can become I/O bound. Not necessarily better.
07:34:50 <pjb> perhaps you could shorten it as "unbalanced". As in "unbalanced architecture" where the processor is too powerfull compared to the memory bus?
07:35:27 <pjb> or unbalanced as in lacking cache memory vs. main memory?
07:39:51 * nshepperd2 . o O ("memory bound" is when your ROI of performance per $ of additional memory is > performance per $ of processors)
07:42:03 <merijn> nshepperd2: In HPC roofline modelling the machine is usually a given, so you try and identify where you're bottlenecked so you can deal with that. If your implementation's memory bandwidth usage is equal to the max bandwith of your hardware, you are memory bound and any optimisation of compute is pointless, since it can't speed anything up
07:42:27 <nshepperd2> makes sense
07:42:42 <merijn> nshepperd2: If you're compute bound that means your implementation's FLOPS (traditionally, but that's a shitty metric for no floating point stuff) approaches theoretical peak FLOPS
07:44:17 <merijn> Although in parallel systems you also get stuff like occupancy and efficiency messing things up :p
07:44:36 <pjb> square[i]=f(i);  loop(g(square[i])) can be optimized and lighten the memory load with loop(g(f(i))) if f(i) can be computed in the CPU.
07:44:52 <pjb> Ie. remove temp variables, and let the compiler do its job.
08:27:01 * hackage hinotify 0.4.1 - Haskell binding to inotify  https://hackage.haskell.org/package/hinotify-0.4.1 (LennartKolmodin)
08:40:07 <carter> Howdy
08:40:34 <carter> @tell Merijn sup!
08:40:35 <lambdabot> Consider it noted.
10:09:29 <newbi> hello, i have to instal WinGHCi for my course but everytime i download it on the internet i cant install it
10:09:32 <newbi> can someone help 
10:10:55 <hc> newbi: I'm not familiar with webghci, but if all you want is a running haskell compiler/interpreter on windows, you might try out stack
10:11:14 <hc> https://docs.haskellstack.org/en/stable/README/
10:11:25 <hc> there is a direct link to a windows installer executable
10:13:20 <newbi> hc: thank you i will try it. is it new user friendly? i have to submit my homework in *.hs format
10:14:37 <__monty__> newbi: ghcup might be another option
10:16:23 <maerwald> on windows it doesn't work natively, only in WSL
10:17:59 <newbi> i installed Haskell GHCI already from their site. is stack IDE for Haskell?
10:19:53 <geekosaur> I don't know of any IDEs as such, although various editors have extensions with Haskell support
10:20:09 <geekosaur> in any case stack is a command line interface, not an IDE
10:21:41 <__monty__> Ah, WinGHCi looks like a GUI for GHCi. newbi: None of the previous advice will help any.
10:22:04 <__monty__> newbi: When you say "their site" do you mean the google code archive?
10:22:06 <monsterchrom> Finally, someone actually read the question.
10:23:17 <__monty__> Oof, looks like pretty old software though. "Tested with GHC 6.10.1"
10:23:26 <hc> newbi: no idea; it depends on your definition of 'user friendly'
10:23:26 <newbi> thank you guys. I mean the haskell.org site. i downloaded everything using PowerShell
10:23:26 <merijn> oof
10:23:39 <geekosaur> I not only read the question, I went and asked google about it and got its github. but couldn't verify it's actually still maintained, notwithstanding what it claims
10:23:51 <geekosaur> in any case it's not an IDE either
10:23:58 <geekosaur> (which was also asked)
10:24:07 <newbi> so, finally i did it. opened notepad and made a hello world .hs file, compiled it using ghc and ran in powershell
10:24:15 <geekosaur> it's just a simplistic GUI over ghci
10:24:17 <__monty__> newbi: I think I'd recommend just using `ghci` from a shell and skipping the GUI.
10:26:48 <monsterchrom> WinGHCI used to come with the Windows version of GHC. I haven't checked recently. Especially with how the GHC people no longer officially post a Windows version.
10:28:08 <monsterchrom> I like __monty__'s advice.
10:28:11 <newbi> yea, teacher told us it should come installed with GHC but didnt. im just gonna stick with notepad++ and compile it in powershell. is this fine?
10:28:16 <davean> monsterchrom: what do you mean? Theres windows versions of GHC released
10:29:30 <monsterchrom> Oops, they still do. Nevermind.
10:30:10 <monsterchrom> Ah, they quitted the installer part.
10:30:22 <merijn> monsterchrom: And 32bit support on windows
10:30:37 <geekosaur> i386 windows is gone, x86_64 is still there
10:30:57 <merijn> Not that anyone cares about 32bit anyway :p
10:31:31 <merijn> newbi: just running ghci in powershell will work fine, that's basically what WinGHCI did anyway :p
10:32:14 <monsterchrom> Still, you can't tell the average Windows-using student to simply take the tar.xz file and figure out what to do with it.
10:32:33 <geekosaur> but apparently some course or other assumes winghci is still included?
10:32:38 <davean> Are there still 32bit versions of windows available?
10:32:45 <merijn> monsterchrom: The recommended way is via chocolatey, which I personally wouldn't recommend anyway
10:32:52 <merijn> davean: Not any supported ones
10:33:07 <merijn> davean: The only Windows versions that are not EOL are 64bit only
10:33:29 <monsterchrom> And the chocolatey way may or may not give you WinGHCi. (I bet not.)
10:33:33 <merijn> davean: Which is why I strongly advocated for dropping it when that the discussion was in #ghc
10:33:57 <__monty__> I suspect it's just a prof that's used to the GHC installed on lab and other uni computers.
10:33:58 <davean> merijn: I thought there were still supported ones, but not for new installs. But none of those places *would* install GHC
10:34:20 <merijn> Anyone whose big and legacy enough to still run 32bit machines clearly has plenty of money to pay for getting things working
10:34:25 <__monty__> newbi: Compiling your code is fine. GHCi is an interpreter though, can be useful to try things out in.
10:34:51 <monsterchrom> I want to point out the irony that no one knows what has really happened, and we are all talking wind.
10:35:04 <merijn> monsterchrom: hmm?
10:35:17 <monsterchrom> No one knows whether the asker is using the GHC HQ tar.xz file or chocolatey or what.
10:35:58 <monsterchrom> No one knows which version, is it 8.10.x or 7.4.x or 6.10.x or what.
10:36:14 <monsterchrom> No one knows what the asker has really tried or not tried.
10:36:27 <merijn> monsterchrom: I think that's separate from the GHC 32bit windows discussion, though :p
10:36:50 <monsterchrom> No one knows whether the course instructor has shown using WinGHCi during class, or it's just the asker XY-problem it to "I think I need WinGHCi".
10:37:11 <newbi> okay, sorry for not being clear. i installed chocolatey, yes. but it didnt come with WinGHCi, but our teacher uses it
10:37:24 <monsterchrom> See?
10:37:29 <newbi> she says we should get it with chocolatey
10:38:00 <monsterchrom> I haven't checked, but it is very likely newer GHC versions don't come with WinGHCi. Old versions did.
10:38:05 <newbi> the course is discontinued probably in the new programme, so im probably the last gen learning Haskell
10:38:33 <newbi> im getting the hang of it now, thanks guys.
10:39:22 <__monty__> That's too bad.
10:39:31 <__monty__> Consider yourself lucky ; )
10:39:53 <monsterchrom> But what __monty__ said. Don't worry about WinGHCi, it doesn't have important extra features. Use ghci directly. This won't affect the *.hs files you will have to hand in.
10:40:23 <newbi> yea, it just looks easier the way she is using it
10:40:33 <newbi> i bet logic programming will come in handy
10:40:52 <monsterchrom> You will have to go through Window's "command prompt" though.
10:41:09 <__monty__> I love prolog+haskell courses. Some of the most mind boggling : )
10:41:37 <monsterchrom> Oh, I just inflicted shfit/reset on my students yesterday in a similar course.
10:41:40 <__monty__> GHCi doesn't run in powershell? (That's the newer windows terminal is it not?)
10:41:58 <monsterchrom> I haven't tried. I guess it works the same.
10:43:18 <monsterchrom> The only thing I care on my Windows box right now is I want the downloading of AoE3DE to finish but I don't want to be a bandwidth hog (wrt my family) so how many more hours do I have to wait. :)
10:44:38 <monsterchrom> Especially in the context of: last night I already got like 80% of it, then suddenly they pushed out the Oct30 hotfix, so it reset to 0% and started from scratch.
10:45:20 <merijn> monsterchrom: Invest in better internet :p
10:45:32 <monsterchrom> :)
10:46:46 <davean> monsterchrom: just how slow is your internet?
10:47:03 <newbi> okay i hope i wont be bothering you guys, i will have about dozen questions in a few hours.
10:47:20 <newbi> i need to write negative numbers in braces?
10:47:30 <monsterchrom> full speed is 25Mbps. I could use full speed and get it down in < 2 hours. But I'm nice, I'm using 10% of that.
10:47:33 <davean> yes, to distinguish it from subtraction
10:48:02 <davean> monsterchrom: no QoS?
10:48:15 <__monty__> newbi: Not always per se but it's a good habit.
10:48:16 <monsterchrom> No.
10:48:29 <newbi> okay, and is there a function for absolute value? because when i name my function "abs" i get an error that it could be referred to other functions that i dont know how to even use
10:48:45 <monsterchrom> > abs (-4)
10:48:47 <lambdabot>  4
10:49:39 <newbi> oh okay thanks, is there a way to override default functions
10:49:58 <monsterchrom> Yes, but do you have to?
10:50:33 <newbi> no :)
10:52:41 <__monty__> monsterchrom: I wish LEDBAT was easy to use for scenarios like that.
10:54:28 <monsterchrom> If the wikiepdia entry for that is to be believed, more like "actually available".
10:56:15 <__monty__> I mean, it's used by bittorrent clients, so there must be a foss implementation out there, right?
10:57:37 <monsterchrom> How do I convince the Steam client to use it?
10:59:06 <__monty__> Well now we get to my lamentation.
11:01:14 <[exa]> monsterchrom: you can switch the tcp congestion algorithm in kernel, I guess it can be done even for process groups
11:01:39 <[exa]> (that is, if steam uses TCP)
11:02:08 <monsterchrom> How do I switch the TCP congestion algorithm in the Windows kernel?  Do I have to recompile the kernel?
11:08:47 <[exa]> monsterchrom: no idea. :]
11:10:31 <newbi> whats with GHCi and tabs? what should i do? the functions still load but the errors are annoying
11:10:53 <newbi> i dont want all code to be in one line
11:11:09 <monsterchrom> use spaces.
11:16:49 <tomsmeding> perhaps the ghc error message for tabs should include a note that spaces are the alternative
11:17:10 <tomsmeding> this is not the first person I've seen who responds to the warning in question with "but I don't want my functions to be one-liners"
11:17:24 <tomsmeding> s/error/warning/
11:18:53 <DigitalKiWicked> i make all of my functions one line so i can run sort on the source files
11:18:57 <newbi> it did print that i use spaces instead, i just wasnt used to it
11:19:30 <davean> tabs are widly considered a problem in programming, though its really the mixingthat causes issues
11:19:33 <tomsmeding> DigitalKiWicked: how do you handle the invesion of 'module' and 'import' lines ;)
11:19:45 <DigitalKiWicked> copy paste
11:20:06 <davean> why not just use an inteligent sort?
11:20:12 <davean> also, why do you want it sorted?
11:20:16 <DigitalKiWicked> mono repo? pfft! mono file!
11:21:32 <tomsmeding> makes me think of that APL co-defns compiler
11:22:01 <tomsmeding> that compiles APL code for the GPU while running the compiler itself on the GPU, and its source has one function per line and is like ~200 lines long or something
11:23:01 <DigitalKiWicked> davean: if i can sort it i don't have to think about what the order should be the program decides and also it's uniform and things are easier to find because it's ordered
11:24:14 <DigitalKiWicked> i do actually sort data types and lists and also the way i format lists is such that they're easier to sort...
11:24:38 <tomsmeding> also https://news.ycombinator.com/item?id=13590065
11:28:25 <DigitalKiWicked> https://github.com/NixOS/nixpkgs/blob/5a05601013407fc755d1d0d4f6385a9c14b3125a/pkgs/tools/text/ocrmypdf/default.nix
11:29:20 <DigitalKiWicked> ...most of that is how i want it i see some of it is not "right"
11:30:29 <DigitalKiWicked> where "easier to sort" implies everything is on a separate line
11:30:49 <DigitalKiWicked> plz don't look at the first line of the file
11:31:51 * tomsmeding re-opens the just-closed tab to look at the first line
11:32:09 * tomsmeding smiles mischievously
11:32:20 <DigitalKiWicked> i've tried but the reviewers get mad
11:32:51 <DigitalKiWicked> BONUS! makes for cleaner git diffs
11:33:02 <tomsmeding> that _is_ a good advantage
12:01:07 <texasmynsted> Trying out fourmolu.  What does this mean? "diff-friendly-import-export: false # 'false' uses Ormolu-style lists"   I looked on the ormolu site and can't find what an ormolu style list is.
12:02:31 <yushyin> 'import Foo ( \n func1,' vs import 'import Foo \n ( func1,'
12:02:41 <yushyin> -import
12:03:29 <yushyin> as far as I could tell
12:06:59 <texasmynsted> oh. thank you
12:16:28 <newbi> is it better to use if else statements or just define a few function states
12:17:34 <newbi> e.g. if x == then smth or foo 0 = smth
12:17:49 <newbi> if x == 0 *
12:18:33 <byorgey> newbi: depends.  Personally I try to avoid if-then-else whenever possible because the syntax/indentation is annoying
12:19:03 <monsterchrom> For a simple case like this, it's fine either way.
12:19:28 <newbi> do you know which case uses less resources
12:19:38 <maerwald> multiwayif is slightly nicer
12:19:39 <monsterchrom> Same resources.
12:19:48 <newbi> thanks
12:20:04 <monsterchrom> It is way too premature to worry about that.
12:20:48 <newbi> yea, just curios. completed my assignment for this week, will hang out here for the next semester :)
12:53:01 * hackage hOpenPGP 2.9.5 - native Haskell implementation of OpenPGP (RFC4880)  https://hackage.haskell.org/package/hOpenPGP-2.9.5 (ClintAdams)
13:19:02 * hackage pandoc-dhall-decoder 0.1.0.0 - Decodes pandoc to dhall.  https://hackage.haskell.org/package/pandoc-dhall-decoder-0.1.0.0 (locallycompact)
14:01:31 * hackage pandoc-dhall-decoder 0.1.0.1 - Decodes pandoc to dhall.  https://hackage.haskell.org/package/pandoc-dhall-decoder-0.1.0.1 (locallycompact)
14:15:05 <matthew-> If a function has type of forall A. x -> A where x is some mono-type, it seems to me to be an indication of infinite recursion in the function - is this true, and is there a proof or a generalisation of such a thing?
14:15:31 <comerijn> matthew-: As in "Int -> a"?
14:15:37 <matthew-> yeah
14:15:48 <dolio> Yeah, it indicates some sort of exception or non-termination.
14:15:50 <matthew-> where "has a type" is really "is inferred to have type"
14:16:03 <comerijn> matthew-: Sounds like you might be interested in "Theorems for Free!"/
14:16:33 <matthew-> ahh, that's a phrase I've passed over in the last few days, yes.
14:16:35 <comerijn> matthew-: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.38.9875&rep=rep1&type=pdf
14:16:39 <matthew-> thank you, I'll have a read
14:17:28 <matthew-> having just implemented HM(X), I was astonished to see unbounded use of fix result of Int -> A
14:17:41 <matthew-> and then it corrected itself when I added the base case...
14:17:51 <matthew-> (and implemented "If"...)
14:18:10 <comerijn> matthew-: Similarly sometimes people use Void to signal similar infinite recursion
14:18:28 <comerijn> :t forever -- note the completely free 'b' here
14:18:29 <lambdabot> Applicative f => f a -> f b
14:19:03 <comerijn> Void being "data Void" (or in older Haskell versions "data Void = Void Void"
14:19:06 <comerijn> )
14:19:20 <hpc> newtype
14:19:34 <comerijn> I just realised that's wrong, yeah >.>
14:19:52 <matthew-> such a shame this implication is an if, and not an iff ;)
14:19:54 <comerijn> Someone else can figure out what I meant to type :p
14:34:40 <jackdk> Is anyone aware of lenses that can fail noisily? I've been mucking around with profunctorish/arrowish decoders, and just noticed that `fromKey` might want to be `fromKey' :: (Failing f, Show k, Ixed m, Index m ~ k, IxValue m ~ v) => k -> LensLike f m a v a` https://www.irccloud.com/pastebin/mWf23ECx/Failing.hs
14:35:19 <jackdk> `Failing` is a hacky typeclass to abstract over `Maybe`, `Either` and `These`, depending on how noisy you want your error reporting; perhaps there is a better way
14:45:22 * hackage compdoc-dhall-decoder 0.1.0.0 - Allows you to write FromDhall instances for Compdoc  https://hackage.haskell.org/package/compdoc-dhall-decoder-0.1.0.0 (locallycompact)
15:00:52 * hackage polysemy-methodology 0.1.5.0 - Domain modelling algebra for polysemy  https://hackage.haskell.org/package/polysemy-methodology-0.1.5.0 (locallycompact)
16:03:43 <sim590> Why is using `is` with prisms prone to erreor as suggested by this answer here: https://stackoverflow.com/a/35253041 ?
16:04:56 <ghoulguy> sim590, you'd have to ask that user why they thought that.
16:06:31 <sim590> ghoulguy: so you don't either see any reason why he'd think that. Because I can't think of a reason.
16:07:12 <ghoulguy> My guess is that some people read a blog post about "boolean blindness" and then just tried to apply it at every opportunity. That's just a guess though; I don't know what this author had in mind
16:07:36 <dolio> It's not error prone if you just want a yes/no answer, and never the underlying data. It is error prone to structure code that way (predicate + cast later) instead of pattern matching.
16:12:39 <sim590> Alright. Maybe that's it. In any case, I'm interested in havnig the free constructor checkers, so I don't have to worry about that too much. Thanks for you point of view!
16:20:27 <dolio> Also, I would not assume that ddarius is answering just because he read a blog post somewhere.
16:28:44 <sim590> dolio: Who's ddarius?
16:29:24 <dolio> The person who answered the question.
16:29:38 <sim590> Isn't he called Derek?
16:29:48 <dolio> ddarius is his irc handle.
16:30:01 <sim590> oh. Didn't know you knew him ^^
16:30:02 <dolio> Although he hasn't been around in a while.
16:57:52 * hackage agda2lagda 0.2020.11.1 - Translate .agda files into .lagda.tex files.  https://hackage.haskell.org/package/agda2lagda-0.2020.11.1 (AndreasAbel)
17:02:55 <Uniaika> I read "lada" at first haha
18:17:52 * hackage hopenpgp-tools 0.23.2 - hOpenPGP-based command-line tools  https://hackage.haskell.org/package/hopenpgp-tools-0.23.2 (ClintAdams)
18:29:44 <texasmynsted> hello
18:31:35 <yushyin> hello texasmynsted
18:31:42 <texasmynsted> Hello
18:33:26 <texasmynsted> Was just looking to learn a parsing library. Found trifecta. Looks interesting, but perhaps I should start with something else. I just found this --> http://ekmett.github.io/reader/wp-content/uploads/2009/08/A-Parsing-Trifecta.pdf
18:35:52 <texasmynsted> so many parser/combinator libraries. 
18:38:03 <texasmynsted> any recommendations? 
18:38:25 <texasmynsted> I guess most people are having fun or sleeping at the moment
18:39:05 <yushyin> I've used megaparsec a couple of times
18:42:12 <texasmynsted> ok
18:42:55 <koz_> I'd recommend starting with Megaparsec.
18:43:04 <koz_> Mark Karpov has written a fairly thorough tutorial on it.
18:46:13 <texasmynsted> Great. Thank you. I will look for it.
18:46:29 <koz_> zhttps://markkarpov.com/tutorial/megaparsec.html
18:46:35 <koz_> https://markkarpov.com/tutorial/megaparsec.html
18:46:36 <texasmynsted> https://markkarpov.com/tutorial/megaparsec.html
18:46:43 <texasmynsted> :-)
18:50:12 <texasmynsted> Wow. If that tutorial was a mission to get me to want their book, it worked.
18:50:25 <koz_> The book is stalled indefinitely - Mark was only a coauthor I think.
18:53:56 <texasmynsted> _indefinitely_ Hmm.
18:56:50 <koz_> The tutorial is still kept updated though - most recent update was September _this_ year.
19:01:58 <texasmynsted> Wow, great questions with answers here. https://monadfix.com/
19:02:20 <koz_> I work with (some of) the folks on that page.
19:03:29 <texasmynsted> :-)
19:03:30 <texasmynsted> wow
19:12:52 * hackage bitcoin-scripting 0.1.0 - Resources for working with miniscript, and script descriptors  https://hackage.haskell.org/package/bitcoin-scripting-0.1.0 (IanShipman)
19:47:22 * hackage hopenpgp-tools 0.23.3 - hOpenPGP-based command-line tools  https://hackage.haskell.org/package/hopenpgp-tools-0.23.3 (ClintAdams)
22:08:29 <slack1256> On cabal's test sections, can I have multiple modules defined? All the example I've seen only use one module.
22:10:30 <koz_> slack1256: You can have 'other-modules' just like for executables.
22:10:43 <koz_> Or are you saying you want multiple modules with Main in them?
22:10:48 <koz_> s/Main/main/
22:12:41 <slack1256> other-modules? nice
22:14:38 <slack1256> koz_: Thanks
22:29:31 <XorSwap> rate my obfuscated mess: fix(((True:).).(.flip(flip.(ap.).flip flip head.(((.).flip((.).(:))).))tail).ap fix)((.tail).((False:).))
22:30:03 <XorSwap> for clarity, map fst $ filter snd $ zip [2..] $ <the mess above>
22:55:01 <gobbleguy> :t elemIndicies
22:55:02 <lambdabot> error:
22:55:02 <lambdabot>     â€¢ Variable not in scope: elemIndicies
22:55:02 <lambdabot>     â€¢ Perhaps you meant one of these:
23:19:57 <int-e> :t elemIndices
23:19:58 <lambdabot> Eq a => a -> [a] -> [Int]
23:38:22 * hackage exact-real 0.12.4.1 - Exact real arithmetic  https://hackage.haskell.org/package/exact-real-0.12.4.1 (jophish)
23:43:22 * hackage optparse-declarative 0.4.0 - Declarative command line option parser  https://hackage.haskell.org/package/optparse-declarative-0.4.0 (kakkun61)
23:50:35 <jophish> What determines the version of a package in stackage nightly?
