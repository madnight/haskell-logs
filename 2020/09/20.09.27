01:05:18 * hackage arch-hs 0.1.1.0 - A program generating PKGBUILD for hackage packages  https://hackage.haskell.org/package/arch-hs-0.1.1.0 (berberman)
02:17:00 <Enrico63> Hello
02:19:01 <Enrico63> I'm installing [haskell-ide-engine](https://aur.archlinux.org/packages/haskell-ide-engine), but too late I read the comment "If you are suffering from long build times: Consider adjusting the _enabled_ghc_versions variable in the PKGBUILD to only the ghc versions you need", so the build process has been running for more than 1 hour now, and I do
02:19:01 <Enrico63> have seen outputs like [this](https://gist.github.com/Aster89/70b2e5570eb8447c15db04e2dd62dff9) several times
02:20:38 <Enrico63> I could kill it or leave it go, but how do I unistall whatever has been uninstalled in excess?
02:20:51 <Enrico63> Or you think I should ask on the archlinux channel?
02:30:22 <aldum> did you finish the build?
02:30:58 <aldum> if not, just clear the cache/remove the build directory
02:34:27 <Enrico63> aldum,  since it's isntalling now the last most recent version, I'm letting it finish
02:35:24 <Enrico63> carlomagno1, are you a Gas Dynamic prof?
02:37:22 <yushyin> and then you find out that hardly anybody uses haskell-ide-engine anymore but haskell-language-server. and also that ghcup can install the prebuild binaries for you
02:40:27 <aldum> the haskell situation on Arch is not optimal, to say the least
02:41:04 <Enrico63> yushyin, I plan to use it with Vim and YouCompleteMe. Is it haskeell-language-server a better choice, in this case?
02:47:35 <yushyin> Enrico63: YouCompleteMe implements a language server protocol client, so you can use haskell-language-server with it. If it's better I don't know. You'll have to try it.
02:57:29 <fendor> Enrico63, HIE is not actively developed anymore. Haskell Language Server is the successor. I would recommend Haskell Language Server
03:02:19 <Enrico63> fendor, the "not-actively-developed anymore" seems a good reason to use the other one, but I wanted to ask the question on stackoverflow, with the hope that it gets more visibility: https://stackoverflow.com/questions/64087188/what-is-the-current-situation-for-using-vim-as-ide-for-haskell-on-archlinux 
03:11:23 <fendor> Enrico63, I answered
03:15:07 <yushyin> Enrico63: 'the haskell situation on Arch is not optimal, to say the least' because arch linux uses dynamic linking for haskell packages. It results in odd compile time errors, because ghc/cabal still want to build static by default and cannot find any static libs. also ghc does not provide a stable abi which results in a rebuild of every reverse dependency each time package is updated.
03:15:54 <yushyin> Enrico63: it's an odd decision
03:16:15 <Enrico63> what decision?
03:16:35 <Uniaika> dynamically linking haskell packages
03:16:40 <yushyin> this ^
03:17:37 <Enrico63> Oh, ok, for a moment I though that asking also on SO was considered an odd decision of mine XD
03:18:33 <yushyin> ghc's support for this is not great and probably will never be. So it's an odd decision from the arch linux haskell package maintainer.
03:20:18 <yushyin> Enrico63: I recommend to use ghcup for the purpose of developing haskell stuff. Just don't bother with the packages from your linux distribution.
03:22:10 <yushyin> Enrico63: https://gitlab.haskell.org/haskell/ghcup-hs#installation
03:23:25 <Enrico63> Well, if that's my distribution it's clear I have to deal with it, no? And I was asking here too, because the intersection of the sets of haskell programmers and archlinux users could be other than empty. I'm sorry if telling my distribution made too much noise.
03:29:15 <Enrico63> yushyin, the above message was meant to be directed to you. Just to make it clear that I don't want to bother anybody and that I'm sorry if you perceived it this way.
03:29:23 <aldum> irssi shat itself, did I miss anything after the apology?
03:29:49 * hackage Z-IO 0.1.2.0 - Simple and high performance IO toolkit for Haskell  https://hackage.haskell.org/package/Z-IO-0.1.2.0 (winterland)
03:32:35 <aldum> also, if anyone has a good idea on how arch should handle haskell, talk to me
03:33:36 <yushyin> Enrico63: you are not bothering me at least. I think ghcup is a great tool to help to set up a haskell developing evironment and I would recommend it regardless the linux distribution in use.
03:37:19 <yushyin> aldum: I do have an opinion on that matter. don't bother with libraries packages, just build typical haskell tools static (pandoc, shellcheck, etc). Let people know to use either ghcup or stack for developing haskell stuff. (perhaps not a popular opinion ;))
03:38:37 <aldum> there are -bin packages in the AUR for pandoc and shellcheck
03:38:45 <aldum> maybe already doable depending what etc entails
06:31:51 <p0a> if I want to calculate n*(n+1)/2, which is an integer 
06:32:13 <p0a> do I have to do all the conversions in between? fromIntegral and then with floor?
06:32:22 <int-e> odd:t div
06:32:25 <int-e> oops
06:32:26 <int-e> :t div
06:32:28 <lambdabot> Integral a => a -> a -> a
06:32:39 <int-e> so, no, just don't use /
06:32:45 <p0a> aha, thank you 
06:32:53 <p0a> that makes sense 
06:38:43 <p0a> how can I `let' a function? a named lambda?
06:39:01 <p0a> oh nevermind, let f = (\x -> ..)
06:39:25 <xsperry> which is the same as let f x = ..
06:40:00 <xsperry> > let f x = x * x in f 10
06:40:03 <lambdabot>  100
06:42:15 <p0a> oh thank you xsperry 
06:42:47 <xsperry> np
07:04:05 <p0a> Is there a function f :: Maybe a -> a with f (Just x) = x? Partially defined 
07:04:13 <p0a> or must I pattern match every time I want to do that?
07:04:18 <[exa]> something like fromJust ?
07:04:23 <p0a> nice, thank you 
07:04:49 <[exa]> there's a whole heap of such easy matchers in Data.Maybe
07:05:34 <[exa]> you might like fromMaybe which has "default a"
07:06:27 <p0a> sure. I like mapMaybe the best I think 
07:09:47 <[exa]> dodging manual conditions is great
07:10:06 <[exa]> also, Maybe monoids are monoids
07:10:24 <p0a> right now I'm having a bit of trouble figuring out how to dodge this 
07:10:35 <p0a> but it's not hte end of the world I can just write some bad looking code 
07:10:57 <[exa]> well after having something that works you can ask hlint for a hint
07:11:05 <p0a> that's a good idea
07:11:39 <[exa]> (...or just paste it here and have it torn to pieces and reduced to half-line combination of arrows and lens magic, as usual.)
07:12:06 <[exa]> (I forgot to add "incomprehensible" to the above description)
07:12:32 <p0a> Sure I can tell you 
07:12:44 <p0a> I am searching a list for x and -x. Only one can be found (but one will certainly be present)
07:12:54 <p0a> and I want the result to be f x or (- f x) accordingly
07:13:05 <p0a> Sorry, I mean, either f x or (- f (- x))
07:13:14 <p0a> Let's say f is only defined for x > 0
07:14:09 <p0a> Maybe 2 'case of' will work out
07:14:24 <[exa]> so you have a list of whatever that contains at least one of (x) and (-x) for some specified x?
07:14:44 <[exa]> s/at least/exactly
07:14:47 <p0a> yeah
07:14:59 <p0a> well the list only contains positive x's. The x I have may be positive or negative
07:15:03 <[exa]> you might want to use list comprehensions
07:15:59 <[exa]> or just filter with abs, that might be even neater
07:16:51 <[exa]> then extract head of the list (or patternmatch it to a singleton list if you wanna be triple-sure), apply `f`, done.
07:17:07 <p0a> I think I have a workable function I can paste now 
07:17:11 <[exa]> ok
07:18:18 <[exa]> we've got a shiny new pastebing at https://paste.tomsmeding.com/ btw
07:18:23 <[exa]> *pastebin
07:18:29 <p0a> okay le tme use htat
07:18:56 <p0a> https://paste.tomsmeding.com/3PTXPmjI
07:19:24 <[exa]> oh noes this is with floats. :]
07:19:43 <p0a> floats? :)
07:19:59 <p0a> oh you mean it's not integers, right
07:20:05 <p0a> it's matrices in fact
07:21:06 <p0a> are you saying that == fails because they're Double's? maybe that's true, although the calculations are binary (either 0 or 1)
07:22:49 <[exa]> if the calculation is binary you might really want to say it's Int
07:23:16 <p0a> yeah you are right 
07:23:29 <[exa]> (==) tends to fail in completely non-algebraic ways with floats&doubles, more precisely you can forget that it holds through associative&distributive laws
07:24:41 <p0a> I remember my professor chewing me with questions from ieee754 before
07:24:58 <[exa]> general advice is to avoid ieee754 questions. :]
07:25:17 <int-e> "general"
07:26:13 <p0a> I held ground for a bit, but eventually resolved to saying something like "we need more bytes?"
07:35:05 <Guest_67> .
07:36:12 <Guest_67> Permission was denied when I wanted to add the required PATH variable to /Users/b/.bashrc
07:37:54 <[exa]> p0a: I didn't try to compile this but it might show how to really exploit the list machinery https://paste.tomsmeding.com/crh9oaVX
07:38:49 <[exa]> (oh and you might need to place `head $` before `do` to get a single possibility there)
07:39:02 <p0a> [exa]: that' svery nice 
07:39:11 <p0a> I see you're using guard and also some tricks with *>
07:39:15 <p0a> I'll have to think about it 
07:40:00 <[exa]> p0a: the monad binding (<-) for lists works like list comprehension, it tries the rest of the code for all values in the list you bound
07:40:36 <[exa]> and `guard` kindof terminates the attempt to reach a result if the condition is false
07:41:45 <[exa]> intuition for the rest: <|> is an "or" for this kind of wrapped computations (if the first branch fails, you still get some results for the second)
07:41:59 <p0a> right 
07:42:09 <p0a> I'm going to learn from that example 
07:42:16 <[exa]> and *> is a fancy version of "if nothing broke yet, return the thing on the right"
07:42:24 <p0a> guard seems handy, it's just foreign to me 
07:42:38 <p0a> I don't use it because I think I've never seen it before 
07:42:53 <[exa]> I might have simplified that with $> 1 and $> -1  from Data.Functor
07:42:55 <p0a> (Except for the tutorials/books on haskell that I've read)
07:43:15 <[exa]> uh, and list functor/applicative primer:
07:43:30 <[exa]> > [(+1),(*10)] <*> [1,2,3]
07:43:32 <lambdabot>  [2,3,4,10,20,30]
07:43:46 <p0a> that reminds me
07:43:53 <p0a> Why does it work in that fashion?
07:44:06 <p0a> I saw an example `liftA2 (,) list1 list2' for cartesian product
07:44:15 <[exa]> > [1,2] $> 10
07:44:17 <lambdabot>  error:
07:44:17 <lambdabot>      • Variable not in scope: ($>) :: [a0] -> t0 -> t
07:44:17 <lambdabot>      • Perhaps you meant one of these:
07:44:26 <[exa]> oh noes, $> is from Data.Functor
07:44:59 <[exa]> p0a: list Applicative instance is derived exactly like that. The semantics is something like "Listing of all possibilities" (with some rough corners about infinities)
07:46:00 <p0a> why couldn't it be zip-like instead?
07:46:21 <[exa]> p0a: btw the liftA2 rewrites to the "operator" form like this, I find it kindof more illustrative:
07:46:21 <p0a> i.e. [(+1),(*10)] <*> [1,2,3] would give [2, 20]
07:46:37 <[exa]> > (,) <$> [1,2,3] <*> [1,2,3]
07:46:40 <lambdabot>  [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(3,1),(3,2),(3,3)]
07:46:57 <p0a> yeah I see what that means 
07:47:32 <p0a> the magic is in <*> then; that's why I'm asking my question above about an alternative definition
07:47:35 <p0a> would it violate some 'axiom' ?
07:47:43 <[exa]> p0a: good question; the simple answer is that list comprehension wouldn't work, but I believe there's some slightly more rigorous reason
07:47:44 <kosmikus> it could be zip-like. in fact, there's a newtype called ZipList that implements exactly that applicative instance. the "default" instance is chosen to be compatible with the monad instance for lists.
07:48:28 <p0a> oh nice. I see, thank you 
07:50:18 <[exa]> oh yes there's no (reasonable) way to "flatten" lists by zipping, so their monad instance would have to be kinda fishy (thanks kosmikus!)
07:54:40 <antaoiseach> Hello folks, I'm just learning about the various GHC extensions, and I was trying this example - https://limperg.de/ghc-extensions/#bangpatterns, but the code does not seem to be working as expected for me.
07:54:50 <antaoiseach> The code snippet is here  https://paste.ofcode.org/AFpzbG8CCY3fftWuYKHuWs
07:55:09 <[exa]> p0a: btw in case of lists, the `a <- b ; c ....` is basically a fun syntax for `concatMap (\a -> c ...) b`
07:55:43 <antaoiseach> The linked guide says that with the bang pattern, `main` should execute almost instantly, but that does not seem to be the case when I try it (both in GHCi and GHC).. can anyone help me understand this?
07:56:41 <[exa]> antaoiseach: are you sure that this amount of recursion should finish almost instantly?
07:57:15 <antaoiseach> exarkun: No, I'm not sure... the guide says that it should - hence my confusion!
07:57:28 <[exa]> uh, if you _remove_ the ! it can finish instantly because it doesn't have to compute the fibs
07:57:50 <yushyin> 'Without the bang pattern, the programme terminates almost instantly ...' -- from your source
07:57:58 <antaoiseach> Oh 
07:58:06 <antaoiseach> Okay ... sorry ... my mistake then! :(
07:58:13 <[exa]> no problem :]
07:58:20 <antaoiseach> Hahaha ... sorry guys! :D
07:58:38 <[exa]> I was myself expecting a completely different kind of twist :D
07:58:44 <antaoiseach> hahaha! :D
07:59:19 * hackage vulkan 3.6.7 - Bindings to the Vulkan graphics API.  https://hackage.haskell.org/package/vulkan-3.6.7 (jophish)
07:59:44 <antaoiseach> Okay, so maybe I could make better use of this chance and ask a better question then! So I'm done with "Programming in Haskell" (2nd Edition), and loved the book. Now I'm trying to get more into the practical side of things - monad transformers, stack, various extensions etc. 
07:59:54 <antaoiseach> What would you recommend in addition/instead of this path?
08:00:16 <antaoiseach> To move from a basic but relatively strong theoretical foundation onto more advanced and practical stuff?
08:02:19 <maralorn> Can I newtype derive an instance for "MyClass MyType B" when there is an instance "MyClass A B" and a "newtype MyType = MyType A"?
08:02:52 <maralorn> antaoiseach: I like http://dev.stephendiehl.com/hask/
08:03:58 <antaoiseach> maralorn: Thank you.. that looks very nicely organised indeed!
08:04:59 <antaoiseach> maralorn: yes, that looks almost exactly like what I am looking for right now. Thanks again! :-)
08:29:18 * hackage irc-core 2.9 - IRC core library for glirc  https://hackage.haskell.org/package/irc-core-2.9 (EricMertens)
08:30:48 * hackage glirc 2.37 - Console IRC client  https://hackage.haskell.org/package/glirc-2.37 (EricMertens)
09:18:48 <Guest_7> hello i get this error: [ Info  ] verifying digest of: ghc-8.8.4-x86_64-apple-darwin.tar.xz[ Error ] DigestError "596c0f9ce80b579ed4888ed9d574ff947d0a2c9481a3b1a4affa5af110124338" "e80a789e9d8cfb41dd87f3284b75432427c4461c1731d220d04ead8733ccdb5e"[ Error ] Also check the logs in "/Users/saabriin/.ghcup/logs""_eghcup --cache install ghc recommended"
09:18:48 <Guest_7> failed!
09:18:55 <Guest_7> i have no clue that this means
09:19:13 <maerwald> oh, that's odd
09:19:33 <Guest_7> when i try to download ghc
09:19:44 <maerwald> it means either your download is corrupted or the bindist was updated in-place
09:19:48 <maerwald> can you just try again?
09:20:19 <Guest_7> i get the same error when i try 
09:21:47 <p0a> Manually download the file and compare it with the one you have 
09:22:00 <Guest_7> curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | shthis is what i put into the teminal
09:22:05 <maerwald> the hashes are correct, so either your download is corrupted or the bindist is corrupted
09:22:16 <p0a> https://www.haskell.org/ghc/download_ghc_8_8_4.html
09:22:35 <maerwald> don't download it manually if it's corrupted :)
09:23:00 <Guest_7> what do i do?
09:23:09 <maerwald> I'm checking the bindist
09:24:29 <maerwald> the bindist is fine, so your download is corrupt
09:24:51 <Guest_7> what should i do?
09:25:15 <maerwald> Guest_7: can you run: ~/.ghcup/bin/ghcup --downloader=wget install ghc 
09:25:53 <Enrico63> Hello again :)
09:25:57 <Guest_7> [ Warn  ] Could not get download info, trying cached version (this may not be recent!)[ Info  ] downloading: https://downloads.haskell.org/~ghc/8.8.4/ghc-8.8.4-x86_64-apple-darwin.tar.xzghcup: wget: executeFile: does not exist (No such file or directory)[ Error ] DownloadFailed (NonZeroExit 1 "wget"
09:25:58 <Guest_7> ["-O","/var/folders/dv/ng7l4rc57s33bjxr0h8xtg6h0000gn/T/ghcup-Afe21n/ghc-8.8.4-x86_64-apple-darwin.tar.xz","https://downloads.haskell.org/~ghc/8.8.4/ghc-8.8.4-x86_64-apple-darwin.tar.xz"])[ Error ] Also check the logs in "/Users/saabriin/.ghcup/logs
09:26:06 <Guest_7> this is the error im getting now
09:26:22 <maerwald> you don't have wget I guess
09:26:31 <geekosaur> this is os x, it doesn't come with wget which is why it's using curl
09:26:45 <maerwald> yes, but curl doesn't download the bindist correctly
09:26:54 <p0a> wgot'em
09:27:07 <geekosaur> that cached message worries me a bit
09:27:12 <maerwald> geekosaur: nope
09:28:19 <maerwald> well, we need a working downloader :)
09:28:37 <maerwald> otherwise cabal will fail too later
09:28:49 <Guest_7> can i use brew?
09:28:58 <maerwald> for installing wget?
09:29:12 <Guest_7> yea
09:29:16 <maerwald> I think so
09:29:38 <sm[m]> you can install ghc with brew :)
09:29:48 <maerwald> that's not gonna be fun
09:29:59 <Enrico63> Anybody using Vim-YCM to write Haskell?
09:30:01 <sm[m]> it's super simple
09:30:04 <maerwald> and as said: cabal will break too
09:30:14 <sm[m]> stack doesn't..
09:30:16 <sm[m]> shrug
09:30:29 <maerwald> bc stack uses haskell-tls, which is worse
09:31:32 <maerwald> sm[m]: https://github.com/hasufell/stack2cabal/runs/1173082195?check_suite_focus=true#step:8:321 have you seen this on windows?
09:31:47 <Guest_7> im a mac user
09:31:47 <sm[m]> just a drive-by comment, I don't know what y'all are talking about
09:32:33 <Enrico63> sm[m], but you can know what I am talking about :D
09:33:22 <maerwald> sm[m]: because I remember you claimed windows support is excellent and I'm seeing xxx build failures whatever I try to build :)
09:33:57 <maerwald> "could not execute ld" sounds good
09:34:26 <p0a> Excellence is relative
09:34:44 <Squarism> Anyone know if people started doing production stuff in Asterius? 
09:34:59 <sm[m]> maerwald: it doesn't ring a bell (and I don't see the "details above" it refers to)
09:35:42 <sm[m]> maerwald: are you sure you're quoting me in context :)
09:36:00 <maerwald> ofc not, I want to nudge you into helping me :p
09:36:31 <sm[m]> better to just ask me then, I'll probably try
09:37:15 <sm[m]> any luck googling for the error ?
09:38:09 <sm[m]> (& are you using a gitlab worker with github CI ? seemed so)
09:38:32 <maerwald> yeah
09:39:00 <sm[m]> that sounds cunning
09:44:46 <maerwald> what? no
09:45:11 <sm[m]> maerwald: btw I did have a look earlier since you cc'd me.. I wasn't logged in and couldn't see everything, but now I am.. and still having trouble finding the workflow that generated this - got a link ?
09:45:51 <maerwald> sm[m]: https://github.com/hasufell/stack2cabal/blob/9dd4fc1a538dd2aa0a1d91c19f590b959f9a0b40/.github/workflows/haskell.yml
09:46:06 <sm[m]> thanks
09:46:07 <maerwald> I'm messing around with flags and constraints randomly
09:46:21 <sm[m]> that'll surely work! :)
09:48:10 <maerwald> overall, haskell + windows is an awful experience
09:48:33 <maerwald> https://github.com/haskell-hvr/regex-posix/issues/4
09:48:52 <sm[m]> oh I see.. when it says see the build log above, it's actually appearing a few lines below
09:48:59 <[exa]> so if I run mmap from the mmap package on a pipe, it silently mmaps it as an empty file and doesn't report any kind of error. Is there any best way to detect that this has happened?
09:50:01 <[exa]> ad pipe I mean something that comes out of `mkfifo`
09:50:44 <sm[m]> maerwald: one thing that comes to mind that's easy to try, specify shell: bash (or whatever the syntax is) so that bash is used on windows too. Otherwise it's in powershell or something
09:51:01 <sm[m]> it can remove some variability
09:51:37 <sm[m]> I guess it runs in WSL if you do that
09:51:56 <maerwald> imo... there's not a single CI solution that has made it easy to *develop* a CI config
09:52:05 <maerwald> it's all commit-push-wait non-interactive
09:53:27 <sm[m]> there is a way of getting an interactive shell. I wish I had set it up from the start, it would have been worthwhile
09:53:41 <sm[m]> it's in the actions marketplace
09:54:35 <maerwald> so... it seems zlib fails to build straight on windows
09:55:30 <p0a> [exa]: you probably can't do that from mmap because mmap is not careful enough 
09:56:43 <p0a> [exa]: I'm not entirely sure how the FFI works but the source code seems to use system_io_mmap_file_size, which would report 0 for the pipe I suppose
09:56:47 <sm[m]> maerwald: you could also compare with mine and see what's different ? https://github.com/simonmichael/hledger/actions?query=workflow%3A%22windows+CI%22
09:57:22 <p0a> [exa]: in C if you try to mmap a pipe file descriptor you would get EACCES 
09:57:36 <maerwald> sm[m]: you're not using cabal
09:57:47 <maerwald> so that doesn't help me
09:58:21 <sm[m]> ah. Well it maybe something stack took care of for the windows users. As I've mentioned before, this is one of the things stack is good at
09:58:43 <sm[m]> it's probably discussed in their issue tracker
09:58:46 <[exa]> p0a: yeah that's likely... more like, what's the easiest test that the file cannot be mmapped AND doesn't involve rewriting the mmap library to actually force mmap to fail; which is in fact weird that it does not now.
10:00:12 <maerwald> sm[m]: stack fails in other ways
10:00:23 <maerwald> but I'm tackling one after another
10:00:39 <sm[m]> did you google the message yet ? what about https://gitlab.haskell.org/ghc/ghc/-/issues/18550
10:01:03 <sm[m]> sorry to be annoying
10:04:04 <p0a> [exa]: what is mmapable now may not be later :) Why are you using mmap?
10:05:00 <[exa]> to avoid loading tons of bytestrings to RAM, tbh
10:06:28 <p0a> how come you're sometimes doing it on pipes?
10:06:50 <[exa]> it's a shell tool; sometimes you just want to pipe stuff in dynamically
10:07:14 <[exa]> it's diff, consider `diff <(zcat foo) bar`
10:07:20 <p0a> the shell tool should know when it's a pipe and when it is not 
10:07:30 <p0a> well, in that case you show above at least
10:07:37 <[exa]> that expands to `diff /tmp/somepipe bar`
10:07:53 <p0a> Oh oh, not in /that/ case :) 
10:08:03 <p0a> I thought you did `foo | cat bar'
10:10:27 <p0a> instead of the <(zcat foo) trick, just have your shell tool uncompress the file, `tool foo bar'
10:13:32 <p0a> I don't know what the solution is, but if mmap doesn't error on a pipe, I'm not sure what to do
10:14:23 <[exa]> p0a: I'm kinda aiming to simulate the normal diff that survives this without problems, also user experience. :]
10:14:34 <p0a> [exa]: https://hackage.haskell.org/package/unix-2.7.2.2/docs/System-Posix-Files.html
10:14:48 <p0a> [exa]: You can use this to determine what kind of file you're dealing with I believe
10:15:37 <p0a> with isRegularFile, for instance 
10:15:57 <geekosaur> witha race condition
10:16:33 <p0a> I don't know how the regular `diff' works, but it probably doesn't read the whole file into memory. If you avoid doing that, you should be fine? I don't know if mmap is the solution. 
10:16:46 <geekosaur> well, you can determine it for a file descriptor with its wrapper for fstat()
10:20:08 <sm[m]> maerwald, I wonder was it relevant ? Have you been hit by a ghc-8.10.2-on-windows bug ? If so maybe use ghc-8.8.2  ?
10:21:01 <[exa]> sounds like patching mmap. :]
10:21:44 <sm[m]> or ghc-8.8.4, not sure
10:56:53 <maerwald> sm[m]: yes, I think it's a 8.10.2 bug
11:13:45 <maerwald> I'm wondering if it's actually GHC or chocolatey being broken
11:13:51 <maerwald> I'm thinkin the latter
11:14:02 <maerwald> (otherwise... why would stack work)
11:14:38 <phadej> 8.10.2 is broken
11:14:44 <phadej> it has hardcoded paths
11:15:18 <phadej> (not sure if that's the reason to the reason it doesn't work for you)
11:19:23 <maerwald> I'm not sure github actions is much of an improvement over travis. I've definitely wasted more time on it.
11:19:40 <dead10cc> is a monad a type class?
11:19:57 <ski> no, `Monad' is a type class
11:20:27 <phadej> maerwald: It's not an improvement. as in, it's not /strictly/ better. It's better at some stuff, worse at other
11:20:28 <ski> a monad is a type that is a (lawful) instance of the `Monad' type class
11:21:06 <maerwald> phadej: I'm just glad I don't have github->travis redirection problems... that's all I noticed
11:21:12 <dead10cc> well then that simplifies things, thanks
11:21:34 <phadej> maerwald: redirection problems?
11:21:47 <maerwald> yeah, constantly needing to re-login at travis
11:22:20 <phadej> hmm, I haven't noticed that. (as in, I don't remember when I logged into travis last time explicitly)
11:22:31 <phadej> maybe your browser is more strict about privacy (not a bad thing)
11:22:47 <maerwald> it's full of half-working extensions, yeah
11:22:49 <sm[m]> I find GitHub way better, if only because it covers all three platforms, and is more integrated with my repo. Maybe Travis got better
11:22:50 <koz_> I've used Github Actions. It's annoying, but I finally found how to make a config that works in all the ways I care about.
11:23:04 <maerwald> sm[m]: does travis not cover windows?
11:23:10 <phadej> it does
11:23:21 <phadej> https://docs.travis-ci.com/user/reference/windows/
11:23:26 <sm[m]> mac ?
11:23:31 <maerwald> mac is supported
11:23:38 <maerwald> I build ghcup binaries on mac
11:23:38 <phadej> and also arm target, fwiw
11:23:49 <maerwald> *mac travis
11:24:01 <maerwald> (and the linking is good)
11:24:10 <maerwald> (on ghc gitlab, it isn't)
11:24:21 <sm[m]> alrighty.. are they as uniform as on GitHub ?
11:24:38 <phadej> as uniform as travis.yml allows, I guess :)
11:25:19 <phadej> GitHub CI has a benefit that you can have multiple jobs, which are completely unrelated
11:25:30 <phadej> if travis had that, it would be strictly better, IMO.
11:25:42 <maerwald> the actions have this vibe of badly written nmp modules though
11:25:48 <phadej> (and also gave more cpu time to OSS for free, but I cannot blame anyone for not doing that)
11:25:48 <maerwald> *npm
11:26:15 <phadej> maerwald: I don't use premade actions, they take out control where I most need it
11:26:16 <maerwald> like, import some action, figure out it works 60% of the time
11:26:23 <maerwald> a little like ansible maybe
11:27:46 <maerwald> and when I want to look at what an action does... it's 5k LOC js code
11:27:58 <phadej> yes, the API is horrible.
11:28:02 <phadej> JS code glued with YAML
11:28:43 <maerwald> they should have picked haskell (and if it's just to keep most programmers out :p
11:29:07 <koz_> phadej: That was the worst part.
11:29:11 <koz_> Configuration gore is worst gore.
11:29:28 <phadej> then they would needed to seriously think about API against which actions are programmed with
11:29:32 <phadej> it's not trivial problem
11:30:03 <phadej> with JS, kind easier (you don't need to think upfront, even though it might be a good idea)
11:30:29 <maerwald> "you don't need to think upfront" is a good description of js programming, yes
11:30:43 <koz_> maerwald: Lol.
11:30:50 <sm[m]> I think CI often gets blamed because it exposes us to the issues on unfamiliar platforms, and obscure issues that locally we would just work around. But the non interactivity for learning/troubleshooting is definitely a common problem
11:31:24 <maerwald> yes... there's a market for fixing this, imo
11:31:41 <sm[m]> I guess using your own worker is a solution for this (and caching too)
11:33:32 <maerwald> doesn't seem too hard... you cache builds after each step, provide an online editor for your config and allow to rever restart from steps, as well as dropp into an interactive shell after a given step
11:34:21 <maerwald> but competing in the CI market isn't really about your tech solutions
11:53:51 <Guest_43> I download in terminal and the result is all done.But I input ghci it gave me command not found
11:54:16 <adam_wespiser> Haskell CI can sometimes take a long time, I'd really like If I could send a certificate from my computer that all the tests pass, and the CI would accept it and run less
11:55:33 <Guest_43> how
11:56:37 <adam_wespiser> I'm not sure how it would work, yet
11:57:11 <Guest_43> No I mean how can I fix tha
11:57:13 <Guest_43> t
11:57:22 <koz_> :t comparing
11:57:24 <lambdabot> Ord a => (b -> a) -> b -> b -> Ordering
11:57:43 <adam_wespiser> Nix helps a little bit with caching builds
11:57:44 <c_wraith> Guest_43: what did you install?  what os?
11:58:02 <c_wraith> Guest_43: (ghcup on os x, maybe?)
11:58:17 <koz_> @where comparing
11:58:17 <lambdabot> I know nothing about comparing.
11:58:20 <koz_> :(
11:58:26 <MarcelineVQ> Data.Ord
11:58:31 <koz_> MarcelineVQ: Thanks!
11:58:40 <c_wraith> The @where command is just for pre-canned stuff anyway.
11:58:41 <MarcelineVQ> @index comparing
11:58:41 <lambdabot> Data.Ord, Distribution.Simple.Utils
11:58:48 <c_wraith> Yeah, you wanted @index
11:58:52 <koz_> Ah.
11:59:02 <MarcelineVQ> or hoogle or grep :>
11:59:04 <koz_> But is it an int index? :P
11:59:14 <MarcelineVQ> It's Maybe Nat
11:59:20 <c_wraith> or https://hackage.haskell.org/package/base-4.14.0.0/docs/doc-index-C.html
11:59:32 <Guest_43> I download a file and I input : load lec
11:59:36 <c_wraith> it seems like no one knows about haddock's index pages
11:59:47 <maerwald> what
11:59:57 <koz_> c_wraith: Truthfully, I didn't either, until today. Thanks.
11:59:59 <adam_wespiser> you can also do "Cntrl - s" to search on hackage
12:00:24 <maerwald> adam_wespiser: isn't it *just* s?
12:00:28 <MarcelineVQ> adam_wespiser: in fact you can just press s on many hackage pages for a site-specific search
12:00:30 <maerwald> at least for me
12:00:51 <c_wraith> maerwald: a *lot* of people say things like "I wish there was a place I could just see everything defined in a package"
12:00:53 <adam_wespiser> yea, you're right
12:01:06 <adam_wespiser> for some reason i've been using cntrl-s
12:01:11 <adam_wespiser> anyway, great feature
12:01:24 <maerwald> it is, just gets a little slow in big packages
12:01:34 <maerwald> because it doesn't debounce searching
12:01:39 <Guest_8> I download ghc on windows and a file my professor gave me. But after I input :load lec3.hs , it gave me Failed, no modules loaded. How can I fix that
12:01:45 <adam_wespiser> Agreed, and sometimes it resolves to the typeclass, when I'm search by a typeclass method
12:02:01 <c_wraith> Guest_8: sounds like the file isn't in the location you're running ghc from
12:02:08 <c_wraith> err, ghci
12:02:28 <Guest_8> I think so, what should I do?
12:05:10 <adam_wespiser> try running ghci from the same directory as your file
12:08:57 <Guest_8> I run ghci in the command prompt and its like C:\Users\123>ghci, my file is in a folder on desktop. How can I run them in the same directory?
12:13:05 <ski> use `cd' to get into the folder in question
12:14:00 <Guest_8> Could you be more specific?
12:14:33 <maerwald> sm[m]: also, the add-path directive (contrary to the official github actions docs) doesn't work on windows
12:14:49 <ski> i don't know the path to your folder
12:14:59 <maerwald> that's why I like half-assed cross-platfrom approaches
12:15:31 <Guest_8> C;\Users\123\Desktop
12:15:45 <Guest_8> folername CISC
12:15:50 <ski> so the file `lec3.hs' is on your desktop ?
12:15:56 <Guest_8> yes
12:16:14 <Guest_8> in the CISC
12:16:32 <ski> is `CISC' another folder ?
12:17:03 <Guest_8> lec3 is a file in folder CISC and CISC is on desktop
12:17:09 <ski>   C:\Users\123>cd Desktop\CISC
12:17:27 <ski>   C:\Users\123\Desktop\CISC>ghci lec3.hs
12:17:49 <Guest_8> cd Desktop\cisc360
12:18:12 <ski> if it's actually called `cisc360', then yes
12:18:49 <Guest_8> omg
12:18:53 <Guest_8> it worked 
12:19:03 <Guest_8> thanks for helping me out ski
12:19:07 <ski> np
12:19:09 <Guest_8>  I love you man
12:48:42 <koz_> What's the easiest way to get a NominalDiffTime as a _whole_ number of milliseconds?
12:51:17 <[exa]> I like how time-difference question often tend not to have a reasonable solution
12:52:09 <koz_> [exa]: Well, 'reasonable' is relative the situation.
12:53:26 <[exa]> anyway you can convert the N.D.T. to Pico which is Fixed E12 (iirc), from which you should be able to get a workable Integer
12:53:50 <koz_> [exa]: Yeah, just realized nominalDiffTimeToSeconds returns picoseconds, not seconds...
12:54:01 <koz_> :t realToFrac
12:54:03 <lambdabot> (Real a, Fractional b) => a -> b
12:54:13 <[exa]> they have their own div' and mod' btw
13:10:19 * hackage mtl-uplift 0.1.0.0 - Lift substacks of monad transformer stacks  https://hackage.haskell.org/package/mtl-uplift-0.1.0.0 (sgschlesinger)
13:10:56 <koz_> "... but just to know which monad tops it" 
13:10:59 * koz_ giggles
13:11:36 <[exa]> monad stacks now have substacks?!
13:11:38 <glguy> koz_: multiply by 1000 and round
13:11:40 <[exa]> man
13:14:17 <glguy> % :t \x -> round (x * 1000 :: NominalDiffTime) :: Integer
13:14:17 <yahb> glguy: NominalDiffTime -> Integer
13:30:06 <fluturel> dsal: you were the one that made that GoPro thing-a-magic in Haskell, right?
13:30:35 <dsal> fluturel: Yeah.  Got some good use out of it today, because I filmed myself making a couple bullets and the camera split up my video.
13:31:09 <koz_> dsal: ... wait, like, _actual bullets_?
13:31:19 <fluturel> that was my question as well
13:31:28 <fluturel> how does one make bullets
13:31:32 <dsal> I have too many hobbies. https://usercontent.irccloud-cdn.com/file/mEAok2zq/loading.jpg
13:31:39 <koz_> fluturel: Uhh, it's not impossible.
13:31:47 <koz_> Hand loads were a thing for quite a while, and still are.
13:31:49 <dsal> I didn't cast the bullets in this case, though.
13:31:51 <koz_> It's just fiddly.
13:32:03 <koz_> (and obviously, machine-made ones will be much more uniform)
13:32:24 <maralorn> fragnix seems to fulfill the Haskell stereotype. Last commit immediately before the icfp talk but since then no activity what so ever. I really don‘t want to complain about it, but I am so exited about the project.
13:32:25 <dsal> But I did have to like, use a stupid piece of paper to get powder into the cases I harvested.
13:32:41 <koz_> dsal: Is this for like, a historical firearm or something?
13:32:48 <koz_> Or for something in a super-weird caliber?
13:32:59 <fluturel> I'm not that into guns and stuff, they are pretty illegal and regulated where I'm from, didn't know it was a thing
13:33:02 <dsal> Nah, .300 blackout is just kind of expensive and I like learning stuff.
13:33:07 <koz_> Ah.
13:33:28 <koz_> fluturel: I'm not into guns either, and I'm also from a pretty regulated place, but I'm interested in almost everything.
13:33:54 <dsal> I like learning in general.  The science here is kind of nuts.
13:34:07 <Rembane> dsal: How calm do you need to be to pack gun powder into cases? How big is the risk for unintended explosions? 
13:34:31 <sigmaTau> Not that big if hes telling us about it. 
13:34:33 <dsal> Most of this stuff is meant to be fairly stable until the right thing happens.
13:35:04 <fluturel> dsal: Anyway, my question was: do you want to share the source for the webapp? I don't know if it was in the link you gave me, i kind of lost it
13:35:05 <dsal> Yeah, the explosion was controlled and only occurred when and how it was desired.  So my little haskell project is archiving my video now.  :)
13:35:18 <dsal> fluturel: Yeah, it's ui in github.com/dustin/gopro
13:35:22 <Rembane> dsal: That sounds reassuring. :) 
13:35:29 <fluturel> thank youuu
13:35:32 <sigmaTau> Smart people plus explosives has never gone down well in history. 
13:35:33 <sigmaTau> just saying. 
13:35:35 <dsal> I kind of want to do a few more things there, but I feel like I might not know how to structure it well.
13:35:53 <sigmaTau> It always ends in a netfilx documentary 
13:35:55 <sigmaTau> HEH 
13:35:57 <dsal> heh
13:36:07 <dsal> I'm trying to keep my explosions as small as necessary.
13:36:29 <dsal> fluturel: So, I have MonadLogger logging to a broadcast channel that's forked for every inbound websocket connection.
13:36:48 <fluturel> koz_: I am also very interested in learning stuff, but guns in particular.. kind of always avoided them
13:37:11 <dsal> The web app attaches to that and processes incoming messages into either toasts or a data reload instruction.
13:37:20 <koz_> fluturel: I wouldn't wanna actually do anything with that stuff. I just have a weird mind that has to be fed information.
13:37:38 <koz_> I literally set yesterday (mostly) on fire to read up on Lamping's optimal reduction algorithm and linear logic and stuff.
13:37:54 <dsal> The things I do with guns are a lot safer than the things I do to get my mail.  heh
13:37:55 <koz_> Apparently, there's an affine version of the lambda calculus that describes computations in P.
13:37:57 <fluturel> koz_ : Sameee. Where are you from?
13:38:05 <koz_> fluturel: New Zealand.
13:38:08 <fluturel> Same in regards to information feeding
13:38:34 <fluturel> koz_ : P systems?
13:38:45 <koz_> fluturel: No, P as in the complexity class.
13:39:07 <fluturel> I just got excited, I know the guy who invented P systems
13:40:17 <dsal> fluturel: The app requires authenticating with the upstream service once before you can use it.  It'd be nice to be able to have a UI thing allow that, possibly even requiring it on the first use.  It's easy to understand how to do this on the haskell side, but it's not obvious to me how to structure Elm programs in something other than a couple of monoliths.
13:41:46 <fluturel> dsal: I wish I knew enough of Elm to help you
13:42:29 <fluturel> dsal: Why not write plain javascript?
13:42:46 <sigmaTau> Autistic people can code in javascript
13:42:50 * sigmaTau ducks
13:42:53 <dsal> I mostly just use the CLI tools.  That directory is as much Elm as I've worked with.  The language is fine, but the UI paradigm isn't something I quite get.  And their canonical style is rather hideous.
13:43:47 <fluturel> sigmaTau: well, savants in programming can code in quite anything
13:43:58 * koz_ is on the spectrum.
13:44:00 <sigmaTau> This is true. 
13:44:02 <koz_> (and cannot code JS)
13:44:03 <dsal> I did an initial prototype in javascript with crossfilter for the search thing.  I really don't like working in javascript and wanted an excuse to learn Elm.  I had to write my own crossfilter-like-thing in Elm which was easy enough for what I was doing.  The language is certainly nicer, but I'm not sure about their UI model.
13:44:06 <sigmaTau> koz lol
13:44:36 <sigmaTau> javascript is chaotic. 
13:44:38 <dsal> I like D3.js, but only the D3 parts.  Everything JS is kind of gross to me.
13:44:42 <sigmaTau> its like coding with a crayon. 
13:44:55 <koz_> sigmaTau: If that crayon was on fire. And sentient. And malicious.
13:44:56 <fluturel> i fear that once we all die, js is all that will be left from the millions of indian devs
13:45:02 <sigmaTau> if anxiety was a programming language it would be js 
13:45:09 <sigmaTau> koz_ lol yeah 
13:45:34 <dsal> Lots of metrics show JS as a hugely popular language because every web app has a copy of every other web app + enough of a change to blow out all the LOC metrics.
13:45:50 <sigmaTau> >:D
13:46:13 <fluturel> LOC metrics are flawed
13:47:46 <dsal> My GoPro project:  JavaScript: 79.7%, Haskell: 11.0%, Elm: 7.9%, CSS: 0.9%, HTML: 0.4%
13:47:46 <dsal>  
13:48:08 <MarcelineVQ> you monster
13:48:11 <dsal> I probably wrote like, 5 lines of javascript.
13:48:25 <dsal> Most of that is generated from Elm, but checked in so you can just clone the repo and have it work.
13:48:38 <fluturel> i just learned about let in haskell, and can't help but see similarities to CL everywhere
13:48:42 <dsal> So I'm contributing to JS being popular.
13:49:07 <fluturel> Can't you compile Elm to webassembly or something?
13:50:00 <dsal> I don't even quite know what that is.  I just run their compiler and it spits out javascript.  Then they have you run some other command that makes that javascript not huge.
13:50:09 <[exa]> Elm compiles to something like javascript-ish
13:51:44 <dsal> I deleted the intermediate file and now it's  Haskell: 49.7%, Elm: 35.7%, JavaScript: 8.5%, CSS: 3.9%, HTML: 1.7%, Makefile: 0.3%, Nix: 0.2%
13:52:31 <dsal> It spits out gopro.js which I run through whatever tool they recommend to get gopro.min.js.  I don't use gopro.js anywhere, but it makes my project look like a JS project.  I wonder if there's a way to have github ignore files when counting these things..
13:52:32 <fluturel> Apparently there isn't an option to compile to wasm directly, but i see some people are working on it
13:54:51 <fluturel> I'm going back to some more haskell before going to bed
13:54:57 <dsal> Oh, they do have a tool to have it ignore stuff.  This is good.
13:54:58 * fluturel realizes no onecares
13:55:19 <fluturel> dsal: i thought you were joking. are you?
13:55:30 <dsal> fluturel: GoPro Hero 9 is $350 with a year of cloud service.  You could record yourself sleeping and upload it to the cloud every morning.
13:55:31 <dsal> I never joke.
13:55:59 <dsal> But no, they actually have useful ways to tell their junk not to pay attention to files that aren't part of your source.  Or to recognize some things differnetly.
13:56:32 <fluturel> dsal: i see no reason why i would ever do that
13:57:15 <fluturel> dsal: that being said, i would stream myself sleeping if i knew somebody would watch
13:57:33 <koz_> fluturel: Lol.
13:57:57 <ski> fluturel : `let' is recursive in Haskell, though
13:58:21 <dsal> You just have to collect more hobbies.  :)  I've used mine for diving, recording RC aircraft crashes, 3D prints, teaching yoga, recording music stuff, shooting stuff...  whatever else comes up.
13:58:41 <dsal> One problem people have when they want to learn Haskell is "what can I do with it?"  I just mix all my interests together.
13:59:13 <fluturel> dsal: damn, i wish i had the time to have that many hobbies
13:59:18 <fluturel> maybe after uni
13:59:29 <fluturel> cause a collosal time is spent for uni
14:00:20 <fluturel> colossal* damn you double 's'
14:00:45 <monochrom> dsal, I am now imagining this meme describing you:  "recording RC aircrafts soaring" -> the "nah, no thanks" picture; "recording RC aircrafts crashing" -> the "thumb up, approval" picture. :)
14:01:22 <dsal> haha.  Crashing RC planes is great because you don't die.
14:02:32 <fluturel> ski: i have yet to learn that one detail. I need to know more, please
14:03:15 <dsal> let == letrec
14:03:18 <ski> > let xs = 0 : ys; ys = 1 : xs in take 5 xs  -- fluturel
14:03:20 <lambdabot>  [0,1,0,1,0]
14:03:51 <fluturel> that's... wow
14:04:15 <ski> > let xs = [x | y <- ys,x <- [0,y]]; ys = [1+x | x <- xs] in take 8 xs
14:04:19 <lambdabot>  *Exception: <<loop>>
14:04:23 <ski> ah
14:04:35 <ski> > let xs = 0 : tail [x | y <- ys,x <- [0,y]]; ys = [1+x | x <- xs] in take 8 xs
14:04:38 <lambdabot>  [0,1,0,2,0,1,0,3]
14:06:05 <dsal> Hey, this worked.   My project now says Haskell: 53.9% and 1% JavaScript.
14:06:06 <monochrom> "let" mutually recursive unless you add intermediate "let"s to break up your group.
14:06:31 <dsal> Oh, which is correct, because I actually wrote some real JavaScript for AWS Lambda after spending a while trying to figure out how to do something simple in Haskell.
14:06:53 <dsal> Huge uphill battle for no real gain other than keeping my hands slightly cleaner.
14:11:00 <Guest_94> Hello, I am trying to install Haskell on my Mac however am having some issues 
14:11:11 <Guest_94> Downloading the latest package list from hackage.haskell.org Installation done!In order to run ghc and cabal, you need to adjust your PATH variable.You may want to source '/Users/School/.ghcup/env' in your shellconfiguration to do so (e.g. ~/.bashrc).Detected bash shell on your system...If you want ghcup to automatically add the required PATH
14:11:12 <Guest_94> variable to "/Users/School/.bashrc"answer with YES, otherwise with NO and press ENTER.YESgrep: /Users/School/.bashrc: No such file or directory
14:11:43 <koz_> Guest_94: The automagic only works if it can find your .bashrc.
14:11:48 <koz_> Which it says doesn't exist.
14:11:54 <koz_> I presume you've never had to adjust your PATH?
14:12:02 <Guest_94> No sorry I am very new to this
14:12:10 <Guest_94> Trying to set it up for a university course
14:13:35 <koz_> Guest_94: Create an empty .bashrc in the directory it indicated (/Users/School/), then dump the contexts of /Users/School/.ghcup/env into that file.
14:13:41 <koz_> Then open a fresh shell.
14:13:57 <Guest_94> Thank you so much 
14:14:07 <Guest_94> How to create an empty .bashrc ?
14:14:18 <ski> koz_ : or source that file, maybe ?
14:14:19 <koz_> Guest_94: It's just a text file.
14:14:20 <fluturel> create a new file with that name exactly
14:14:29 <koz_> ski: sourcing that file would only affect the current shell.
14:14:46 <fluturel> 'touch .bashrc' in the shell
14:14:47 <koz_> And why bother putting a source command in your .bashrc when you can just... have those exact commands in your .bashrc.
14:14:50 <ski> koz_ : not if you put `source /Users/School/.ghcup/env' into `.bashrc' ?
14:15:18 <koz_> ski: Yeah, you could do that, but to me it adds a layer of indirection for no good reason. Also, it's not like that file is long or anything.
14:15:34 <ski> could `/Users/School/.ghcup/env' change in the future, adding more stuff perhaps ?
14:15:46 <sclv> well when you switch versions with ghcup it changes thar env file
14:15:57 <sclv> so its to manage multiversion installs
14:16:06 <koz_> sclv: OK, yeah, in that case, ski's suggestion is the right one.
14:16:11 <koz_> I manually manage GHC versions.
14:16:18 <koz_> (i.e. using -w)
14:16:34 <sclv> it may change symlinks and not that file actually I don’t remember
14:17:33 <Guest_94> Can anyone walk me through in baby steps what I need to do I'm really sorry but pretty confused
14:17:49 <normie> sorry, what are you trying to do?
14:17:52 <koz_> Guest_94: Do you know how to use a shell as such?
14:18:00 <koz_> Like, do you know commands like 'cd', 'touch', etc?
14:18:07 <Guest_94> Literally no idea
14:18:14 <maerwald> sclv: it actually doesn't change that file. That is created by the bootstrap script
14:18:22 <ski> Guest_94 : do you know how to edit a file, in a text editor ?
14:18:29 <Guest_94> I do 
14:19:13 <ski> Guest_94 : open your favorite text editor, and save a file `.bashrc' (in `/Users/School') containing the line `source /Users/School/.ghcup/env'
14:19:24 <fluturel> use your file manager to go to the home folder, right-click and open terminal, write 'touch .bashrc' and write the thing these guys told you to
14:19:31 <fluturel> in that file
14:19:46 <ski> if you want to, you could first use `touch .bashrc' to create that file (as an empty file), and then change it with your editor
14:20:00 <fluturel> yes
14:20:20 <ski> (but i think most editors would support creating the file if it wasn't there before, as well ..)
14:20:24 <normie> you can just enter "cd" or "cd ~" to go to your home directory
14:21:17 <Guest_94> do you know where to find the file after doing 'touch .bashrc'?
14:21:59 <ski> it should be in `/Users/School', assuming that was the current directory in the shell (in the terminal), when you ran the `touch .bashrc' command
14:22:24 <koz_> This is why I would follow ski's advice to just use your text editor and put the file in /Users/School that way.
14:22:45 <koz_> If you dunno _anything_ about the shell, ignore _any_ suggestions vis a vis touch or cd or whatever, since it'll only make it worse.
14:23:13 <Guest_94> ok I have a file in /users/school which is called '.bashrc' and contains the text 'source /Users/School/.ghcup/env'
14:23:22 <ski> after saving the file in your editor, if you type `cat .bashrc' in the shell, it should display (just) :
14:23:25 <ski>   source /Users/School/.ghcup/env
14:24:05 <Guest_94> if i type cat.bashrc I get this 
14:24:06 <Guest_94> [ -f "/Users/School/.ghcup/env" ] && source "/Users/School/.ghcup/env" # ghcup-env
14:24:45 <fluturel> that's fine then
14:24:46 <ski> if you enter `pwd', what does it say ?
14:25:44 <Guest_94> just '/Users/School'
14:26:11 <ski> ok. possibly you managed to save your `.bashrc' in the editor, in a different place (or forgot to save ?)
14:26:22 <ski> anyway, it shouldn't matter, if you have that contents there
14:26:57 <Guest_94> I think maybe .bashrc files are hidden?
14:27:07 <Guest_94> Because I definitely saved it in /users/school but it doesn't appear in my finder
14:27:08 <fluturel> it is in the file manager
14:28:18 <fluturel> if you want, write in the terminal 'ls -a' and see if it's there. That command shows all files, hidden included
14:28:18 <ski> if you type `ls -al' into your shell, you should see it
14:28:53 <Guest_94> Oh yeah that worked 
14:28:59 <ski> (the `l' part shows some more info for each file, like date of last modification, size, &c. without it, you just get a list of file names)
14:29:09 <Guest_94> when I now open a new instance of terminal, I get this, is this normal
14:29:17 <Guest_94> The default interactive shell is now zsh.To update your account to use zsh, please run `chsh -s /bin/zsh`.
14:29:37 <fluturel> what
14:29:48 <fluturel> did you install zsh?
14:30:00 <Guest_94> I dont even know what that is I don't think so 
14:30:10 <Guest_94> I was trying to install Haskell 
14:30:15 <ski> (hm, i think i heard someone say Mac wants to move to zsh as default shell ?)
14:30:25 <fluturel> then just to be sure
14:30:35 <fluturel> find a file named .zshrc
14:30:41 <fluturel> in the same directory
14:30:58 <fluturel> if it is, paste the 'source' thing there as well
14:31:09 <yushyin> ski: I heard the same
14:31:17 <fluturel> same steps as before, only the file is named .zshrc now
14:31:30 <Guest_94> there doesn't seem to be a file called .zshrc 
14:32:17 <Guest_94> I have .bashrc and .ghcup 
14:32:18 <normie> macos has been on zsh for a while now iirc
14:33:02 <ski> type `printenv SHELL', what does it say ?
14:33:28 <ski> or if that doesn't work, try `echo $SHELL' ?
14:33:40 <Guest_94> it says '/bin/bash'
14:33:51 <ski> hm, so i guess you're still in bash, then
14:34:18 <ski> probably "The default interactive shell is now zsh.To update your account to use zsh, please run `chsh -s /bin/zsh`." is just a nag that they want you to switch to zsh, then
14:34:25 <justsomeguy> You probably need to start a new bash shell so it can read the ~/.bashrc configuration file you just edited.
14:34:42 <justsomeguy> (Or run “source ~/.bashrc”)
14:34:46 <maerwald> Guest_94: what does your ~/.bash_profile say?
14:35:05 <maerwald> make sure it contains this line: [[ -f ~/.bashrc ]] && source ~/.bashrc
14:35:13 <Guest_94> -bash: /Users/School/.bash_profile: Permission denied
14:35:14 <ski> maerwald meant, what is the output if you type in `cat ~/.bash_profile' ?
14:35:36 <Guest_94> # Setting PATH for Python 3.4# The orginal version is saved in .bash_profile.pysavePATH="/Library/Frameworks/Python.framework/Versions/3.4/bin:${PATH}"export PATH# Setting PATH for Python 3.5# The original version is saved in .bash_profile.pysavePATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"export PATH
14:35:57 <Guest_94> Thanks for your help btw really appreciate it 
14:36:54 <ski> Guest_94 : did you already start a new terminal with shell, btw ?
14:37:11 <fluturel> ski: if the default shell is now zsh, then it kinda says that the shell you are in should already be zsh. Weird wording
14:37:42 <Guest_94> Sorry what do you mean by 'Did I already start a new terminal with shell'?
14:38:33 <yushyin> fluturel: default for new users, not for existing users, hence the `chsh'
14:38:53 <Guest_94> Is the problem something to do with it setting PATH for python when I'm trying to install Haskell?
14:39:45 <fluturel> Guest_94: no, the PATH holds several paths actually, python doesn't interfere here
14:43:06 <davve> 17
14:44:06 <Guest_94> when I type in cat ~/.bashrc
14:44:09 <Guest_94> I get this
14:44:15 <Guest_94> [ -f "/Users/School/.ghcup/env" ] && source "/Users/School/.ghcup/env" # ghcup-env
14:44:20 <Guest_94> Do you know what that means
14:46:43 <ski> fluturel : well, it seemed that the shell they were in, after starting a new shell, was not zsh, but still bash. so presumably some start-up file that bash runs prints the nag about changing shell to zsh
14:47:52 <fluturel> Guest_94: the 'cat' command just prints the contents of the file you give it
14:47:52 <ski> Guest_94 : it means that it first checks if the file `/Users/School/.ghcup/env' exists, and if it does, then it executes the shell commands found in that file
14:48:04 <ski> Guest_94 : which is more or less what you wanted to happen, anyway
14:48:25 <ski> ("it" being the bash shell, sorry)
14:48:34 <Guest_94> So i got this message
14:48:35 <Guest_94> In order to run ghc and cabal, you need to adjust your PATH variable.You may want to source '/Users/School/.ghcup/env' in your shellconfiguration to do so (e.g. ~/.bashrc).
14:48:51 <fluturel> you did that
14:48:56 <Guest_94> I thought I had done that 
14:49:03 <ski> yes, that's done and finished, i thought
14:49:18 <ski> have you closed the old terminal and shell ?
14:49:21 <fluturel> did you restart the shell?
14:49:25 <Guest_94> how do you restart the shell
14:49:35 <fluturel> close the window, open a new one
14:49:49 <Guest_94> yeh i've done that
14:49:51 <fluturel> a new terminal window, that is
14:49:55 <fluturel> ok
14:51:11 <Guest_94> i was told i should be able to check if it had worked by typing in 'ghci --version' but I just get "Command not found"
14:51:59 <fluturel> what does your PATH look like now? 'echo $PATH'
14:52:16 <maerwald> Guest_94: did you do what I said wrt ~/.bash_profile?
14:52:26 <Guest_94>  /Library/Frameworks/Python.framework/Versions/3.5/bin:/Library/Frameworks/Python.framework/Versions/3.4/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
14:53:08 <Guest_94> when I try to do '~/.bash_profile' it says "Permission Denied" - I am an admin on my MacBook though?
14:53:47 <fluturel> it thinks you are trying to execute it
14:54:02 <maerwald> Guest_94: no, I said you need to add a line to that file
14:54:16 <normie> did you try to open it in a text editor?
14:54:18 <maerwald> scroll up and read it
14:54:42 <normie> just typing in the name of a file will make your shell try and execute it
14:55:49 <Guest_94> so what should be in my file called '.bashrc' 
14:56:03 <Guest_94> at the moment it contains '[ -f "/Users/School/.ghcup/env" ] && source "/Users/School/.ghcup/env" # ghcup-env'
14:56:09 <ski> `.bash_profile' is a different file from `.bashrc'
14:56:15 <ski> i think your `.bashrc' is fine
14:56:21 <maerwald> Guest_94: you didn't read what I said
14:56:41 <Guest_94> I'm sorry I did its just pretty confusing for me 
14:56:59 <ski> <maerwald> Guest_94: what does your ~/.bash_profile say?
14:57:00 <fluturel> no, write '[[ -f ~/.bashrc ]] && source ~/.bashrc' in your .bash_profile
14:57:00 <ski> <maerwald> make sure it contains this line: [[ -f ~/.bashrc ]] && source ~/.bashrc
14:57:14 <ski> open `.bash_profile' in your text editor
14:57:41 <ski> if there isn't already a line like `[[ -f ~/.bashrc ]] && source ~/.bashrc' in it, add such a line
14:58:07 <yushyin> all the work just for they to switch to zsh in the near future and zsh sources ~/.zshrc as a login shell and as a non-login shell anyways
14:58:14 <ski> (make sure you open `.bash_profile', in your home directory, which presumably is `/Users/School')
14:58:37 <Guest_94> what's the best way to open that sorry?
14:58:50 <Guest_94> ok here we go 
14:58:51 <fluturel> Guest_94: any text editor, doesn't matter
14:59:04 <Guest_94> it contains this "# Setting PATH for Python 3.4# The orginal version is saved in .bash_profile.pysavePATH="/Library/Frameworks/Python.framework/Versions/3.4/bin:${PATH}"export PATH# Setting PATH for Python 3.5# The original version is saved in .bash_profile.pysavePATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"export PATH"
14:59:16 <fluturel> ok, add that line then
14:59:18 <fluturel> [[ -f ~/.bashrc ]] && source ~/.bashrc
14:59:30 <Guest_94> Should I delete that stuff above or leave it?
14:59:33 <ski> leave it
14:59:34 <fluturel> leave it
14:59:48 <Guest_94> ok I've added '[[ -f ~/.bashrc ]] && source ~/.bashrc'
14:59:58 <ski> then save the file
14:59:59 <fluturel> save the file, restart shell
15:00:11 <Guest_94> Oh nice that's worked 
15:00:15 <Guest_94> Haskell seems to be working now
15:00:21 <normie> yaaaaaay
15:00:23 <ski> `ghci --version' works, now ?
15:00:46 <koz_> :t asum
15:00:48 <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
15:00:52 <Guest_94> oh shit ahah 
15:01:03 <Guest_94> 'ghci --version' returns '<interactive>:1:1: error: Variable not in scope: ghci'
15:01:09 <ski> hah
15:01:16 <ski> yea, you're in GHCi, now
15:01:17 <fluturel> you are already in the ghci :)
15:01:32 <fluturel> press CMD + D to get out
15:01:36 <ski> or `:q'
15:02:03 * ski hopes that doesn't get turned into some horrible emoji, in Guest_94's IRC client
15:02:13 <Guest_94> ok ':q: worked 
15:02:28 <Guest_94> perfect it all seems to work now
15:02:28 <Guest_94> The Glorious Glasgow Haskell Compilation System, version 8.8.4
15:02:36 <Guest_94> I am going to have fun working out what all of this means ahaha
15:02:47 <Guest_94> Thank you so much though I really appreciate it thanks for your time
15:03:15 <fluturel> you are welcome, go have fun with haskell!
15:03:19 <ski> Guest_94 : if you have a file with some Haskell code, like e.g. `test.hs', you can start the interactor like `ghci test.hs' to get it to (try to) load the file directly
15:03:34 <ski> or you can use `:l test.hs', if you're already inside the interactor
15:04:14 <ski> if you've loaded the file, but then you've made some changes to it (in your editor), and saved the file, you can then reload the file in the interactor, just by doing `:r'
15:04:39 <ski> (btw, `:q' is short for `:quit', `:l' for `:load', and `:r' for `:reload')
15:05:06 <Guest_94> Perfect mate thank you 
15:05:27 <Guest_94> The guy teaching me Haskell was actually part of the team that invented it 
15:05:47 <ski> Hughes ?
15:06:30 <normie> Jones?
15:06:51 <normie> Hudak?
15:06:54 <Guest_94> He's called Phillip Wadler 
15:07:07 <normie> mr monad himself
15:07:19 <ski> ah :)
15:07:34 <fluturel> very nice
15:07:36 <Guest_94> What does that mean ahah
15:07:40 <fluturel> wish i had your luck
15:07:52 <ski> Wadler often has funny research paper titles :)
15:08:15 <normie> we have him to thank for the IO monad
15:08:21 <normie> absolute chad
15:09:21 <ski> e.g. "How to add laziness to a strict language, without even being odd" by Philip Wadler,Walid Taha,David MacQueen in 1998-09 at <https://homepages.inf.ed.ac.uk/wadler/topics/language-design.html#lazyinstrict>
15:10:01 <normie> I love "Theorems for Free!" 
15:10:15 <koz_> I think we also have him (at least partially) to thank for type classes?
15:10:35 <ski> ("Linear types can change the world!" and "Once upon a type", at <https://homepages.inf.ed.ac.uk/wadler/topics/linear-logic.html>, are two others)
15:10:55 <ski> hm, i think Jones was involved in that ? possibly also Wadler ?
15:11:21 * ski . o O ( <https://homepages.inf.ed.ac.uk/wadler/topics/type-classes.html> )
15:12:31 <normie> is Lennart Augustsson on this server by any chance
15:13:11 <dolio> Haven't seen him in a while.
15:13:13 <ski> he has been, in the past
15:13:44 <ski> (also Marlow)
15:13:58 <Guest_94> Anyway thanks for your help guys 
15:14:05 <ski> np, Guest_94
15:14:08 <Guest_94> Maybe ill be back with more questions one day hahah 
15:14:15 <ski> you're welcome
15:14:21 <normie> djinn just has some small namespace clashes that keep lambdabot from working by default
15:14:35 <normie> tell wadler we said thanks :)
15:15:07 <Guest_94> for sure :)  
15:17:20 <normie> so npm has a package called "is-even" that gets something like 2.4 million downloads a month
15:17:38 <normie> because apparently it's easier to pull in a dependency instead of just using the modulus operator
15:18:02 <normie> so I spent a few hours last night coming up with something even more convoluted and disgusting in haskell
15:18:05 <normie> https://github.com/dreamsmasher/is-even
15:18:20 <ski> i heard there was also a package called `left-pad'
15:18:27 <normie> if anyone has any more ideas of how to implement is-even, please let me know
15:18:35 <normie> HAHAHAHA the left-pad debacle was so funny
15:18:54 <pjb> is-even = not is-odd
15:19:31 <normie> I wrote 9 different versions, ranging from state transformers to profunctors to using church numerals
15:20:15 <ski> @where evolution  -- normie
15:20:15 <lambdabot> http://www.willamette.edu/~fruehr/haskell/evolution.html
15:20:46 <normie> hell yeah I forgot about this article
15:26:35 <dolio> Isn't it more expensive to depend on is-even than just writing it?
15:28:30 <ski> normie : you have various redundant pairs of brackets, in there
15:33:34 <normie> that's the joke, I honestly don't know why the npm ecosystem is so ridiculous
15:34:02 <hpc> most of those silly micropackages are written by one guy
15:34:20 <normie> but people *use* them
15:34:47 <hpc> yeah, that i can't explain
15:35:06 <normie> also @ski whereabours are these brackets
15:35:11 <normie> in evenProf?
15:35:18 * hackage achille 0.0.0 - A library for building static site generators  https://hackage.haskell.org/package/achille-0.0.0 (flupe)
15:39:51 <ski> normie : `_evenState',`<=',`isEven' .. also all the `(Integral a) =>'s which could be just `Integral a =>'
15:40:02 <ski> normie : also, you have lots of `$'s i don't like :)
15:41:34 <ski> e.g.
15:41:42 <ski>   evenState n = not . head $ evalState (sequence $ replicate (fromIntegral n) _evenState) n
15:41:47 <ski> would imho be better as
15:41:56 <ski>   evenState n = not . head $ evalState (sequence (replicate (fromIntegral n) _evenState)) n
15:41:59 <ski> or even
15:42:08 <ski>   evenState n = (not . head) (evalState (sequence (replicate (fromIntegral n) _evenState)) n)
15:42:20 <ski> one could do
15:42:43 <ski>   evenState n = (not . head . (`evalState` n)) (sequence (replicate (fromIntegral n) _evenState))
15:43:09 <ski> but of course `sequence (replicate n acts)' can be simplified to `replicateM n acts'
15:43:37 <normie> I forgot about replicateM, thank you
15:44:20 <ski> similarly
15:44:21 <ski>   (runBool . contr $ (head . dropWhile ((< n) . covar) . iterate dmp) m) False
15:44:24 <ski> looks hideous
15:44:30 <ski> how about
15:45:01 <ski>   (runBool . contr . head . dropWhile ((< n) . covar) . iterate dmp) m False
15:45:02 <ski> ?
15:48:06 <ski>   evenState n = (not . head . (`evalState` n) . replicateM (fromIntegral n)) _evenState  -- i guess i might write the previous one like this (possibly inlining `_evenState')
15:48:50 <normie> @ski changed evenProf, big thank you
15:48:51 <lambdabot> Maybe you meant: wiki src ask
15:49:04 <normie> how are you refactoring these so quick
15:50:10 <normie> I like that infix version, saves a "$" 
15:50:23 <ski> normie : also, it's not a convention/tradition on IRC to adorn people's nicknames with sigils (like `@'). simply mention the nickname, if you want to address someone, or refer to them. e.g. starting the message with the nickname, then a comma or a colon, and the bulk of the message, in the former case
15:50:54 <normie> ah, got it
15:51:13 <ski> (many IRC clients will hilight/alert the user, if their nickname is mentioned at the very start of a message. i think not as many will do it, if the nickname is mentioned elsewhere in a message (e.g. if there's a `@' in front of it))
15:51:32 <normie> I keep forgetting that '@' calls lambdabot
15:51:44 <ski> normie : hm, i thought i was actually rather slow at refactoring them (i was looking a bit at another channel, as well)
15:52:08 <normie> I think 'evenState n = not . head . evalState (replicateM (fromIntegral n) _evenState) $ n' is the most readable tbh
15:52:18 <normie> keeps some semblance of a linear control flow
15:53:10 <ski> on IRC, `@' is used to indicate that someone is an operator, in a channel. if you see a list of nicknames joined to a channel, then commonly IRC clients will display operators in the channel, by having `@' in front of their nickname (also often displayed in their messages). (but you should probably not refer to operators in a channel, by prefixing their nickname with `@', just because of that ..)
15:54:07 <ski>   evenState n = not (head (evalState (replicateM (fromIntegral n) _evenState) n))  -- isn't too bad, either
15:54:29 <ski> (a few nested brackets are nothing to be afraid of)
15:55:53 <normie> nested parentheses aren't a (common) (scheme) for readability ;)
15:55:54 <ski> (.. redundant brackets, otoh, tend to annoy me .. unless there's some particular reason to insert them, like emphasizing something, or perhaps not bothering with keeping track of relative precedence of more uncommon operators)
15:56:44 <ski> (and i seldom write any `$'s at all. `BlockArguments' removes most of my uses of `$')
15:56:58 <normie> I tend to prefer brackets for typeclass constraints regardless of quantity though
15:57:23 <ski> that's okay. at least you're aware that you don't need them, for one constraint
15:57:36 <normie> i'll need to add brackets if any subsequent constraints are added anyways
15:57:51 <ski> but e.g. it seems that people often don't know that they could write
15:57:55 <ski>   (S a) <= (S b) = a <= b
15:57:56 <ski> as
15:57:59 <ski>   S a <= S b = a <= b
15:58:33 <normie> because the precedence of infix operators is greater than those of constructors?
15:58:48 <ski> (similarly, `let (x:xs) = ...' or `case ... of [] -> ...; (x:xs) -> ...' annoy me)
15:58:57 <solonarv> s/constructors/function application/, in fact
15:59:19 <normie> oh wow
15:59:47 <ski> the "invisible function application operator", "juxtaposition", binds tighter than, has higher precedence than, all (user-defined) infix operators
16:02:16 <ski> (but note that the "syntactic operators" `@' and `~' (and `!', and also record construction syntax) binds tigher than application, in patterns. (also record construction and update syntax, in expressions))
16:03:16 <normie> interesting
16:03:53 <ski> > rootLabel Node {rootLabel = ()}
16:03:57 <lambdabot>  ()
16:05:13 <ski> % let f Node {rootLabel = r,..} = r in f Node {rootLabel = (),subForest = []}
16:05:13 <yahb> ski: ()
16:05:40 <normie> removed the redundant parens in the Peano Ord instance
16:05:50 <normie> this channel is awesome
16:06:08 <ski> oh, sorry. i missed that `data Peano = S (Peano) | Z' could be just `data Peano = S Peano | Z'
16:06:53 <ski> (and i hope you know that if you have just one type class after `deriving' .. you guessed it, you don't need brackets)
16:07:40 <normie> yee I'm aware of that one at least, but I usually find myself coming back to add more derivations anyway
16:08:10 <normie> I think it looks cleaner and more consistent if I'm defining multiple data types with different derivations too
16:09:02 <ski> mm, it's more common to want to add more `deriving' parts, than to go back later and add more constraints on a signature, i think
16:09:13 <normie> looking at the BlockArguments docs right now and damn, how have I not heard of this before
16:09:15 <normie> definitely!
16:09:51 <ski> someone mentioned, not too long ago, using `BlockArguments' like :
16:10:01 <ski>   foo x y do
16:10:16 <ski>       long parameter expression ..
16:10:23 <ski>       .. spanning multiple lines
16:10:31 <ski>     more parameters here
16:11:00 <ski> > do "look ma, no monads !"
16:11:01 <lambdabot>  "look ma, no monads !"
16:12:21 <normie> so block arguments lets you use do notation with non-monads?
16:12:28 <ski> no
16:12:46 <ski> that's a separate generalization that GHC does
16:13:01 <ski> (not requiring `do ...' to have a type of the form `m a')
16:13:04 <normie> it is cool that you can stage multiple do-blocks on the same column though
16:13:17 <solonarv> ski: in fact because record update/construction binds so tightly I like to write it like this: rootLabel Node{ rootLabel = () }
16:13:42 <ski> (i guess probably `.. spanning multiple lines' should actually be indented at least one more space, otherwise it'll think it's multiple commands, inside that `do'-expression)
16:14:13 <normie> hs does significant whitespace so much better than python
16:14:24 <ski> solonarv : heh, yea. i don't like that placement of spaces, really :)
16:14:48 <ski> normie : you can opt out, with explicit `{',`;',`}'
16:15:23 <ski> (sometimes i wonder whether some uses of `,' in Haskell would have been better as `;' (which could be implicit, when using layout))
16:17:28 <ski> (also, sometimes i want to say `MkFoo { blah x = ..x.. }', but have to say `MkFoo { blah = \x -> ..x.. }'. this can be more annoying, if i want to match on the input)
16:22:09 <solonarv> ski: at least you can match on it with \case
16:24:35 <ski> yea
16:24:52 <ski> but if there's multiple parameters, then i need to use `curry' or something
16:25:51 <ski> (or else nest the `\case's .. but that's not as readable. also enforces strict left-to-right matching)
17:32:14 <hololeap> has anyone tried both grapefruit-ui and brick? which one is your preference? i have used brick a bit and think it's well done, but i'm curious about grapefruit-ui..
17:36:19 <Axman6> I've used brick, and liked it a lot. it's been a long time though do don't have anything other to add other than pleasant memories
17:44:35 <glguy> Brick is actively maintained and extensively documented
17:45:39 <Axman6> what does ghcup use?
17:45:45 <hololeap> the brick docs are amazing
17:46:50 <koz_> @pl \x y -> x >>= (@?= y)
17:46:50 <lambdabot> (. flip (@?=)) . (>>=)
17:46:55 <koz_> Lol.
17:48:05 <Axman6> Anyone know if pl will use (=<<) if it makes things clearer/avoids flips?
17:49:55 <koz_> @pl \f -> join . fmap f
17:49:55 <lambdabot> (=<<)
17:51:14 <jackdk> @botsnack
17:51:15 <lambdabot> :)
17:54:59 <hololeap> wow, that's pretty neat
17:55:02 <sm[m]> hololeap: are those comparable ? Does grapefruit do TUIs?
17:57:24 <hololeap> sm[m]: that seems like a strange question to me. grapefruit doesn't have a TUI component but it is still for building UIs, which is also true for brick.
18:01:20 <sm[m]> we don't get asked to recommend a TUI vs a WUI too often.. usually people require one or the other
18:01:49 <sm[m]> I haven't seen any apps built with grapefruit, I'd like to know too
18:02:11 <hololeap> oh, well this isn't for a specific job or anything, just making a utility of sorts :)
18:44:48 * hackage foldl 1.4.9 - Composable, streaming, and efficient left folds  https://hackage.haskell.org/package/foldl-1.4.9 (GabrielGonzalez)
19:03:03 <hololeap> anyone know of a way for an IO action to fire when a TVar gets updated?
19:09:03 <hololeap> the overarching problem is to write a brick widget around a data type wrapped in a TVar. if another thread modifies it, i would like for the UI to update to reflect this.
19:11:32 <ski> could you make a thread that retries, if it sees the same value as last time ?
19:12:54 <ski> i suppose that requires some kind of equality comparision on the value, though
19:13:38 <hololeap> TVar has an Eq instance, although i'm not sure if it compares its contents
19:14:12 <hololeap> but, that sounds like a good idea
19:14:13 <ski> it ought not
19:14:24 <dolio> It can't do that.
19:14:43 <hololeap> right... it would have to be a -> a -> STM Bool
19:14:49 <hololeap> ish...
19:15:29 <hololeap> but my data type has an Eq instance, so that could work
19:16:25 <ski> i was thinking of having another `Bool' state, that you have set to `False' initially. then, in the transaction, if it's `False' you `retry' (after taking the value of the `TVar'), but make sure it's `True' the next time, so that you succeed when it's modified .. but i don't think you can make that kind of backtrackable state in `STM' ..
19:22:49 <hololeap> \a0 tvar -> readTVar tvar >>= \a -> if a0 == a then retry else pure a
19:23:01 <hololeap> would that work?
19:25:38 <ski> and then pass `a' as `a0', next time
19:34:15 <hololeap> cool. sounds doable. thanks ski
19:35:21 <ski> hm. i wonder whether one could make a zero-capacity channel or something, for this
19:35:32 <ski> (rendez-vous)
19:35:56 <hololeap> i'm not sure what zero-capacity channel means
19:37:22 <ski> like one thread tries to put, and immediately blocks until there's another thread that tries to take (and so can hand-over the value/baton directly from one thread to the other, no intermediate storage). or the other way around, the other thread tries to take, blocks until the first thread puts
19:38:04 <ski> so, you have effectively a channel that can store at most zero items "in transit"
19:49:13 <dsal> I feel like I'm reinventing lens...  `sortOn (maximum . fmap length . fmap _pu_parts) .`
19:50:48 * hackage Z-Data 0.1.4.0 - Array, vector and text  https://hackage.haskell.org/package/Z-Data-0.1.4.0 (winterland)
19:58:10 <ski> hm, after looking at the source of <https://downloads.haskell.org/~ghc/latest/docs/html/libraries/stm-2.5.0.0/Control-Concurrent-STM-TBQueue.html>, i don't think `newTBQueue 0' will work
19:59:45 <ski> i wonder whether one could do rendez-vous with STM
21:05:55 <hololeap> WIP: https://dpaste.com/4RRFTU2AM
21:07:52 <nshepperd> ski: is that not the same as a one item queue where the writer waits until it's empty again after writing
21:22:04 <hololeap> it does sound quite a bit like a TMVar, where a thread continually tries to put, but has to block until something else takes
21:55:19 * hackage Z-IO 0.1.3.0 - Simple and high performance IO toolkit for Haskell  https://hackage.haskell.org/package/Z-IO-0.1.3.0 (winterland)
22:02:48 * hackage network-byte-order 0.1.6 - Network byte order utilities  https://hackage.haskell.org/package/network-byte-order-0.1.6 (KazuYamamoto)
22:05:19 * hackage fast-logger 3.0.2 - A fast logging system  https://hackage.haskell.org/package/fast-logger-3.0.2 (KazuYamamoto)
22:28:27 <siraben> If I create the a state monad using ST underneath, does it make it any more efficient than the one in Control.Monad.State?
22:28:30 <siraben> http://ix.io/2yZh
22:30:32 <MarcelineVQ> I doubt it, could be fun to bench though
22:35:26 <Axman6> isn't that just state, where the state parameter is an STRef? what benefits do you think this will have?
22:53:19 * hackage qhs 0.3.2 - Command line tool qhs, SQL queries on CSV and TSV files.  https://hackage.haskell.org/package/qhs-0.3.2 (itchyny)
23:14:43 <BalterNotz> #haskell-tw
23:29:19 * hackage mtsl 0.2.0.0 - Reified monad transformer stacks  https://hackage.haskell.org/package/mtsl-0.2.0.0 (sgschlesinger)
23:41:49 * hackage uniqueness-periods-vector-general 0.4.3.0 - Some kind of the optimization approach to data inner structure.  https://hackage.haskell.org/package/uniqueness-periods-vector-general-0.4.3.0 (OleksandrZhabenko)
23:55:37 <ADG1089> can you guys suggest a framework for an app that would enable users to upload excel sheets which will be processed and inserted into database
23:56:06 <ADG1089> (web based, possible api)
23:59:56 <Axman6> Excel specifically? no. CSV? sure, plenty
