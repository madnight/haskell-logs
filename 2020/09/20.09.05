00:00:28 <Saten-san> And after that I want to perform some pattern matching, so I thought that I would make it easier by splitting the list of tuples into x, the first element, and y the second element, and xs the rest of the list.
00:05:39 <opqdonut> Saten-san: you need (x:y:xs) instead of [x:y:xs]
00:06:18 <lucky> [x:xs] would be a list inside a list
00:06:21 <opqdonut> [x:y:xs] would be the right way to pattern match a list that contains a list, like say [[1,2,3]], this would mean x=1, y=2, xs=[3]
00:59:49 * hackage hpqtypes 1.9.0.1 - Haskell bindings to libpqtypes  https://hackage.haskell.org/package/hpqtypes-1.9.0.1 (arybczak)
01:49:48 * hackage fakepull 0.3.0.1 - Monad to pull from fake stream-like objects.  https://hackage.haskell.org/package/fakepull-0.3.0.1 (igrep)
02:08:05 <p0a> Hello I am trying to use hsc2hs to print the value of BUFSIZ from <stdio.h>. How can I do that?
02:08:54 <phadej> p0a: what have you tried?
02:08:56 <p0a> I've tried this: https://termbin.com/bcuvr but the value of BUFSIZ is not correctly replaced in the resulting .hs file 
02:08:57 <p0a>  
02:09:21 <phadej> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/utils.html#input-syntax
02:09:46 <p0a> Are you sayign "stdio.h" is wrong? I tried both with "" and <>
02:10:02 <phadej> #const ⟨C_expression⟩
02:10:03 <phadej> The expression must be convertible to long or unsigned long. Its value (literal or negated literal) will be output.
02:10:36 <p0a> so is it print #const BUFSIZ?
02:11:02 <p0a> Or do I then need to also convert from CLong to Int?
02:11:52 <p0a> nice, it works now
02:12:15 <p0a> phadej: sorry, I didn't realize I had to use # to grab stuff from the C preprocessor 
02:27:25 <p0a> (btw I see now from the realworldhaskell chapter that if I had bothered to read the next subsection I would've learned about hsc2hs and #const)
03:05:18 * hackage fakepull 0.3.0.2 - Monad to pull from fake stream-like objects.  https://hackage.haskell.org/package/fakepull-0.3.0.2 (igrep)
03:09:49 * hackage fakefs 0.3.0.2 - Extensible fake file system for testing.  https://hackage.haskell.org/package/fakefs-0.3.0.2 (igrep)
03:52:19 * hackage ixset-typed-conversions 0.1.1.1 - Conversions from ixset-typed to other containers.  https://hackage.haskell.org/package/ixset-typed-conversions-0.1.1.1 (locallycompact)
04:50:48 * hackage composite-tuple 0.1.0.0 - Tuple functions for composite records.  https://hackage.haskell.org/package/composite-tuple-0.1.0.0 (locallycompact)
05:24:20 * hackage hslua-module-doclayout 0.2.0 - Lua module wrapping Text.DocLayout.  https://hackage.haskell.org/package/hslua-module-doclayout-0.2.0 (tarleb)
06:27:14 <itai33[m]> is there a straightforward way to use a local version of a package instead of the one on hackage? preferably in the same directory as a git submodule or something
06:27:35 <jkaye[m]> Are you using stack or cabal?
06:27:40 <itai33[m]> cabal
06:27:57 <jkaye[m]> Ah, I've only done it with stack, sorry
06:37:27 <yushyin> itai33[m]: never done that either, but maybe this https://cabal.readthedocs.io/en/3.4/cabal-project.html#specifying-the-local-packages ?
06:38:28 <jkaye[m]> From reading around, it seems like this is something that cabal doeesn't do very well unfortunately. Stack's solution also isn't great, but it seems a bit better for this kind of thing specifically
06:38:51 <itai33[m]> yushyin: yeah I'm looking into this now
06:38:56 <itai33[m]> jkaye: what's stacks solution?
06:40:47 <jkaye[m]> Stack extra-deps supports local paths, github repos, etc
06:42:18 <maerwald> cabal can do that just fine
06:42:43 <jkaye[m]> I don't believe there's any way to point to a private github repo's sha with cabal?
06:42:46 <jkaye[m]> Or that's what I read
06:42:49 <maerwald> there is
06:42:50 <itai33[m]> maerwald: is the link that yushyin sent the right place to look?
06:42:51 <jkaye[m]> As I said, I haven't used it
06:42:55 <jkaye[m]> So that could be wrong
06:43:08 <maerwald> suggesting stack seems orthogonal to the problem
06:43:18 <jkaye[m]> I'm not suggesting anything
06:43:29 <jkaye[m]> If you know how to do this, you should write some docs for cabal about it
06:43:40 <jkaye[m]> Because there really is not much out there to help someone do this
06:43:41 <maerwald> https://cabal.readthedocs.io/en/3.4/cabal-project.html#specifying-packages-from-remote-version-control-locations
06:43:50 <maerwald> there is
06:45:01 <jkaye[m]> What I read (also could be wrong, looking for clarification) was that those repos are not transitive
06:45:25 <jkaye[m]> E.g. if you have a private package that references another private package, you'd have to specify both in the top-level package
06:47:18 <jkaye[m]> Btw itai33: this showcases an important Haskell skill - if you want to know how to do something with either Cabal or Stack, just bring up something that the other one can do and you'll be sure to get an answer very quickly ;)
06:48:52 <itai33[m]> lolll
06:48:53 <maerwald> well, there's been misinformation/confusion about cabal for some time, mainly because it doesn't do much advertising
06:49:20 <maerwald> and the docs are a mess
06:49:45 <yushyin> oh yes ^
06:49:50 <itai33[m]> maerwald: so If I understand, the thing you sent was about having the source be a remote git repo, but this is how to have a local package in the same repo:
06:49:50 <itai33[m]> https://cabal.readthedocs.io/en/3.4/cabal-project.html?highlight=packages%3A#cfg-field-packages
06:50:29 <maerwald> itai33[m]: for vendoring, there is https://cabal.readthedocs.io/en/3.4/cabal-project.html#cfg-field-optional-packages
06:53:15 <itai33[m]> maerwald: sweet, thanks!
07:06:44 <itai33[m]> maerwald: I'm trying to do this but when I create a cabal.project file it complains that the overall package is not in the project, is there a good default cabal.project template somewhere?
07:07:02 <itai33[m]> I don't really understand what they mean in the docs
07:08:11 <maerwald> you add the main packages to 'packages' list
07:11:47 <itai33[m]> maerwald: is `packages: .` the correct way to do this?
07:12:16 <maerwald> that means it picks up the cabal file from the same directory the cabal.project file is in
07:12:19 <itai33[m]> like it works, but feels kind of bad practice or something
07:12:51 <itai33[m]> well yeah, that is basically what I want
07:13:03 <yushyin> the default value should be ./*.cabal anyways, or is it not?
07:13:10 <itai33[m]> how does it resolve directories that have two cabal files in them for some reason
07:13:19 <itai33[m]> I mean you'd think but it compliains
07:13:42 <maerwald> no idea... I've never managed to put two cabal files in one directory
07:22:18 <geekosaur> it doesn't resolve them, you can have only one *.cabal file per directory
07:22:20 <geekosaur> sadly
07:23:02 <geekosaur> but I think this is because of a ghc limitation since there's no way to stop ghc from grabbing files from the current directory instead of getting it from a different library
07:23:20 * hackage composite-xstep 0.1.0.0 - ReaderT transformer pattern for higher kinded composite data.  https://hackage.haskell.org/package/composite-xstep-0.1.0.0 (locallycompact)
08:13:49 * hackage reanimate-svg 0.10.3.0 - SVG file loader and serializer  https://hackage.haskell.org/package/reanimate-svg-0.10.3.0 (DavidHimmelstrup)
08:17:23 <itai33[m]> when registering for hackage, is the step of emailing trustees@haskell.org not needed anymore? because it kind of looks like I can upload packages and the email bounces back
08:18:07 <itai33[m]> also does anyone know how to change your listed name there doesn't seem to be an option for that
08:23:20 * hackage git-brunch 1.4.1.0 - git checkout command-line tool  https://hackage.haskell.org/package/git-brunch-1.4.1.0 (andys8)
08:28:04 <albestro> question from a haskell newbie
08:28:49 <albestro> I'm playing with CIS194 exercises, one of them is about Stream, it is an infinite list that cannot be empty
08:29:24 <albestro> what I'm facing now and I cannot figure out what the problem is, it is about making it instance of Num class
08:30:04 <geekosaur> geenerally, if that cmes up you've done something wrong somewhere, trying to use a Stream as a number
08:30:34 <albestro> let's start from the problem
08:30:43 <monochrom> Which homework number is it?
08:30:47 <albestro> I'm implementing `negate`
08:31:29 <albestro> monochrom: lesson 6 exercise 6
08:31:52 <albestro> assuming you have a bit of context about the exercises
08:32:13 <albestro> I can do in ghci `streamMap negate (streamRepeat 1)`
08:32:46 <albestro> but if I implement it as it is `streamMap negate` as `negate` for `instance Num (Stream Integer)`, it complains
08:33:12 <monochrom> OK, time for...
08:33:15 <monochrom> @where paste
08:33:15 <lambdabot> please paste full code, input, and output at https://paste.tomsmeding.com
08:34:39 <albestro> ok, let me do it ;)
08:40:27 <albestro> https://paste.tomsmeding.com/0VdZTRvw
08:43:51 <tomsmeding> albestro: 'streamRepeat 13' is of type 'Stream a' for any 'a' that implements Num
08:44:17 <tomsmeding> now you gave an instance for Num (Stream Integer), but GHC doesn't then infer that your a should really be Integer
08:44:25 <monochrom> OK, you just need a handwritten type for this.  negate (streamRepeat 13) :: Stream Integer
08:44:31 <tomsmeding> just because it's the only option that works now
08:45:04 <tomsmeding> alternatively: negate (streamRepeat (13 :: Integer)), which is not necessarily clearer as code, but might make it clearer what's going on
08:45:30 <albestro> so, the problem is that it cannot infer that 13 is a type, but just that it should be part of Num class
08:45:44 <albestro> 13 is a *type = integer
08:45:51 <tomsmeding> it's not that it cannot, it's that it doesn't _want_ to
08:46:05 <albestro> ok, got it
08:46:13 <tomsmeding> it could certainly figure out that Integer is the only option that will work here, but GHC tries hard to make type classes predictable
08:46:32 <tomsmeding> if it chose Integer now, then just adding another instance (say, Num (Stream Float)) would suddenly make this code not compile
08:46:53 <tomsmeding> so the only consistent option is to not make a choice at all if it's ambiguous
08:47:05 <albestro> seems legit
08:47:32 <albestro> is there any way to force the type, as monochrom suggested, but in the `negate` function definition in Num?
08:48:13 <tomsmeding> you can't change anything in your Num instance to make this work without changing the line where you use it at the bottom
08:48:14 <albestro> because there I would surely get as input a Stream Integer, not a Stream a
08:48:14 <monochrom> You mean (negate :: Stream Integer -> Stream Integer) (streamRepeat 13) ?
08:48:38 <albestro> monochrom: yes, something like that
08:49:04 <albestro> I now I cannot change the type of the negate, but I was wondering if it would be possible something like
08:49:28 <albestro> `negate bla = streamMap negate (bla :: Stream Integer)
08:49:45 <albestro> more or less like I would do when I call it
08:50:51 <tomsmeding> well you can do 'myCustomNegate :: Stream Integer -> Stream Integer ; myCustomNegate = negate' (replacing the ';' by a newline)
08:50:58 <tomsmeding> and then use myCustomNegate :p
08:51:10 <tomsmeding> but not sure whether that's useful
08:51:55 <albestro> ah yes, good point. an helper function that enforce the "constraint"
08:52:28 <albestro> now, after this speculation with the helper function, let's ask for the guidelines. what would you do in a situation like this?
08:53:02 <albestro> because I don't like the idea of leaving the burden to the caller, but maybe in Haskell with type inference, it is less ugly then I think
08:53:09 <tomsmeding> well, given no extra information, I would change your Num instance to read 'instance Num a => Num (Stream a) where ...'
08:53:10 <tomsmeding> :p
08:53:23 <tomsmeding> because it's still valid that way
08:53:36 <tomsmeding> but perhaps you have a reason why you don't want to generalise it like that
08:54:02 <monochrom> In practice the caller already has enough context to nail the type.
08:54:04 <albestro> ah yeah, because you still require that the type-param for Stream to be an instance of Num
08:55:49 <albestro> tomsmeding: well, I would give it a try! I quickly changed it, but it complains about fromInteger
08:56:04 <albestro> but I want to figure out why by myself, in case I would ask for more
08:56:05 <tomsmeding> ah yes
08:56:13 <tomsmeding> that's fixable :)
08:56:15 <albestro> thanks to all of you!
09:03:51 <albestro> tomsmeding: can you give me an hint on how to fix it? :P
09:04:00 <tomsmeding> fromInteger
09:05:46 <albestro> yes, it says that it expects Stream a, instead it gets Stream Integer
09:06:22 <albestro> and `fromInteger :: Num a => Integer -> a`
09:07:14 <albestro> so given an Integer, the output should implement the Num class...and it is what I'm doing, so Stream Integer is part of Num
09:07:49 <tomsmeding> my hint is "fromInteger" :p
09:09:31 <albestro> ahhh, let me try!
09:09:33 <albestro> :D
09:10:19 <albestro> it works! but I don't exactly understand why hahaha
09:10:46 <albestro> `fromInteger n = Cons (fromInteger n) $ streamRepeat 0`
09:10:49 <tomsmeding> 'n' is an Integer
09:11:01 <tomsmeding> you're supposed to create a 'Stream a'
09:11:31 <tomsmeding> so you first have to convert that 'n' into an 'a', and _precisely_ because 'a' is an instance of 'Num', you can do that using fromInteger
09:13:21 <tomsmeding> does that make sense albestro? :)
09:13:42 <albestro> I see your point, I have to go through all the mental steps, but I think I'm quite there
09:14:18 <albestro> yes, I think I get it
09:14:37 <Taio> A question for understanding: Are closed type families and generalized algebraic data types not equivalent, or are they the same?
09:14:39 <tomsmeding> the fact that your instance now reads 'instance Num a => Num (Stream a)' means that you're now defining 'Stream a' to be an instance of Num for _all_ 'a' that are already Num
09:14:46 <albestro> previously it was working because there was a perfect match, because I was specifying the instance for the specific Stream Integer
09:15:02 <tomsmeding> so now your fromInteger and negate also work on e.g. Stream Int, Stream Float, etc
09:15:10 <tomsmeding> exactly albestro 
09:15:14 <albestro> wonderful!
09:15:24 <albestro> It looks like the right way of doing it
09:15:46 <tomsmeding> sometimes, paradoxically, being more general is easier :)
09:15:48 <albestro> more general, there is no reason to restrict it to just Integers (till now)
09:16:30 <albestro> thank you again, for the support and the detailed explanation
09:18:01 <tomsmeding> Taio: ¯\_(ツ)_/¯
09:18:11 <tomsmeding> try get someone else answer
09:20:53 <geekosaur> type families are functions at type level; GADTs are values
09:23:52 <geekosaur> inspecting a GADT may bring another type into scope depending on its value, whereas a type family is a function which takes a type and produces another type
09:28:51 <dolio> GADTs are also functions, except for the just existential types.
09:33:11 <mightymosquito> Hi Can somebody help me with this -> https://www.reddit.com/r/haskell/comments/in3vsp/querying_mongo_from_haskell_how_to_access_maybe/
09:34:47 <mightymosquito> I don't know how to handle data types with type signatures like -> Action IO (Maybe Document) where Action is some fancy type defined by mongoDB haskell lib
09:35:43 <Taio> OK yes. 'type' does not introduce a new value constructor.
09:36:47 <ang> hi, any advice in which 3d graphics library is best?
09:37:50 * hackage souffle-haskell 2.0.1 - Souffle Datalog bindings for Haskell  https://hackage.haskell.org/package/souffle-haskell-2.0.1 (luc_tielen)
09:39:46 <geekosaur> mightymosquito, my guess is you need to learn how to work with monads, which in this case means you will have a function whose type is Action IO something and use "do ... val <- whateverGaveYouTheAction_IO_MaybeDocument, and val will be a Maybe Document
09:40:18 <geekosaur> but you have to put it all back into  an Action IO afterward, probably with pure
09:50:08 <geekosaur> probably wait for someone to respond on reddit since nobody seems to be around tday, but I'm guessing getUser is run under some runMongoDB-style function and you just want <-
09:51:31 <mightymosquito> geekosaur Do you mean liftDB (link to the documentation -> https://hackage.haskell.org/package/mongoDB-2.7.0.0/docs/Database-MongoDB-Query.html#v:liftDB)?
09:54:03 <geekosaur> I'm thinking of access on that same page
09:57:54 <geekosaur> orpossibly a higher level interface that takes a database instead of a Pipe; I don't know MongoDB
10:01:18 <Plazma> mongodb is web scale
10:43:56 <tomjaguarpaw> Haddock on GHC 8.10 seems to have a new style.  Is it intended to replace the old style on Hackage?
10:51:50 <int-e> tomjaguarpaw: I don't know. However, ghc and base docs are uploaded manually, so they're not indicative of what style hackage is using.
10:58:12 <tomjaguarpaw> When I say "Haddock on GHC 8.10" I mean when I run "cabal haddock" myself with ghc being ghc 8.10.
10:58:37 <tomjaguarpaw> Anyway, I hope it's not intended to be the style on Hackage. I find it much harder to read.
11:03:44 <jack3301> (*) :: Num a=> a->a->a, and when we pass two 'double' arguments to (*), due to type inference, it returns a double result. Thus, 'a' goes from 'Num' to 'Fractional', right? But when I make my own function as this one:- myMult :: Num a => a -> a; myMult x = (x/3)*5, then why does it throw an error.
11:04:17 <geekosaur> because "Num" doesn't tell it how to deal with "/"
11:04:44 <geekosaur> but "Fractional" does, so changing the constraint to Fractional a would work
11:11:50 * hackage caching 0 - Cache combinators.  https://hackage.haskell.org/package/caching-0 (davean)
11:15:54 <dminuoso> jack3301: Regarding your question, no. 'a' does not go from 'Num' to 'Fractional'. What you said is gibberish! :)
11:17:01 <dminuoso> Roughly, when you have a polymorphic binding (polymorphic meaning its type contains a type variable), then the *caller/user/consumer* must decide what the type variable is going to be. In case of `id :: a -> a`, the caller decides what `a` is going to be.
11:17:49 <dminuoso> Normally you have the complete freedom to pick *any* type you like. Say `Double`, `IO ()`, or `Maybe Int`. However, one can constrain this chose, `Num` is such a constraint.
11:18:37 <dminuoso> In case of `(*) :: Num a => a -> a -> a` it means, the caller must chose some type for a, but whatever that choice is, it *must* have an instance Num. So if you decided `a ~ Int`, then this choice is only valid if there exists some `instance Num Int`
11:21:46 <dminuoso> Does this so far make sense?
11:22:08 <jack3301> dminuoso: thanks for the explanation. yes, I get it.
11:22:21 <dminuoso> jack3301: Okay, now for the implementor you have a reversed role!
11:22:54 <dminuoso> The implementor of say `id` or `myMult` cant know what the choice its going to be. It's some opaque/unknown type, you have to be ready for any choice the caller can make.
11:23:12 <dminuoso> A constraint loosens this slightly to say "I dont know what `a` is going to be, but it's some instance of Num`.
11:26:32 <dminuoso> So inside `myMult x = ...` you'd know that x is some unknown type that has at least an instance Num. So inside the implementation (x / 10) would not be valid because
11:26:34 <dminuoso> % :t (/)
11:26:35 <yahb> dminuoso: Fractional a => a -> a -> a
11:26:51 <dminuoso> (/) demands the argument have an instance Fractional, but you only know that it has an instance Num.
11:30:08 <dminuoso> jack3301: ^- does that clear thing up a bit?
11:31:32 <jack3301> dminuoso: yes it helped.
12:18:32 <dminuoso> geekosaur: By the way, one strange thing though. It seems if I want a blocking ffi call, I have no choice but to use the threaded runtime. With non-threaded, not even masking SIGALRM/SIGVTALRM helped.
12:31:50 <dminuoso> But really, the reason why I didnt spot this earlier, is that eINTR is not being set.
12:43:50 <geekosaur> yeh, I don't recall what happens with the non-threaded runtime but it's not very sane iirc
12:44:37 <geekosaur> I think I mentioned they only support the threaded runtime (as in, make a bug report about something like this and first thing they do is ask you to reproduce with -threaded)
12:46:19 <dminuoso> That's amusing, when it defaults to non-threaded. :p
12:46:40 <dminuoso> Btw, my test scenario was broken after all. masking sigalrm helped, but the lack of eINTR is still worrying.
12:46:55 <geekosaur> there have been discussions about changing that
12:47:16 <dminuoso> Need to test it in C to see whether its the GHC RTS doing funky things, or whether there's a bug in the linux kernel here
12:47:47 <geekosaur> I'd test in C, maybe it's the ioctl() tht is broken (it's kinda wrong to block, tbh, especially without returning a timeleft if interrupted)
12:48:12 <geekosaur> yeh, we're thinking roughly the same way :)
12:49:27 <geekosaur> but RTS is also possible because it's being intercepted by the signal handler and possibly EiNTR never makes it back
12:50:29 <geekosaur> although that sequence should be ioctl -> signal handler -> returns -> ioctl returns EINTR, so.
13:04:06 <ddellacosta> Is there a way to generate haddock docs for packages I've already installed in a project? Using cabal 3.2 with new-style commands, having trouble figuring out where to look in the docs for this
13:05:35 <dminuoso> ddellacosta: What do you mean exactly by "I've already installed"?
13:06:19 <ddellacosta> dminuoso: I mean, I compiled my dependencies without the -haddock flag and now I'm wondering if I just have to go back and re-compile everything or if there's a better way
13:07:09 <ddellacosta> (in order to generic docs for dependencies I mean)
13:08:36 <ddellacosta> sorry I guess "packages" was ambiguous/confusing here
13:10:19 * hackage Map 0.1.3.3 - Class of key-value maps  https://hackage.haskell.org/package/Map-0.1.3.3 (MatthewFarkasDyck)
13:12:11 <dminuoso> geekosaur: So, this ioctl takes a bit more effort. But Im confident this is a linux bug - both errno is 0 and the return code of the ioctl is 0.
13:13:04 <dminuoso> I can mark the ffi as unsafe to be absolutely sure
13:14:30 <dminuoso> Yeah still, so if its unsafe and I still get a 0 on both, then this is either a very serious linux bug, or the ethtool ioctl neglects to set EINTR. Judging from what Ive seen about ethtool, the latter is a high probability
13:14:38 <dminuoso> *serious RTS bug
13:33:56 <monochrom> dminuoso: Hrm! I think you have a small misunderstanding.
13:34:44 <monochrom> In an FFI declaration, "unsafe" does not mean "this C function is very unsafe, RTS please call with extra care".
13:35:16 <monochrom> It means the opposite, "this C function is super-nice, RTS please call with little care, in exchange for higher efficiency"
13:36:11 <monochrom> It is "unsafe" as in "unsafePerformIO" --- telling the computer you know what you're doing, so it's OK to do the unsafe thing.
13:36:14 <dminuoso> monochrom: I know. My idea is, if its safe, then there's an extra IO manager GHC spawns etc. So by marking it unsafe, I reduce the moving parts that could potentially mask an errno
13:36:27 <monochrom> Ah OK
13:36:38 <monochrom> Then it's my misunderstanding.
13:36:48 <dminuoso> All good, thanks for the pointer.
13:37:59 <monochrom> Still, the GHC-generated asm code and the RTS still do a few context-switching  things before and after an unsafe FFI call. There are still a few moving parts, just a bit fewer than safe ones.
13:38:57 <monochrom> To a large extent I would trust strace more than even GHC wiki on this.
13:40:48 <hpc> hell, i trust strace more than source code, even when it's my own
13:40:55 <monochrom> :)
13:41:06 <hpc> especially when it's my own :P
14:03:54 <dminuoso> Ah well, its confirmed. This ioctl doesnt get -1 and EINTR
14:29:27 <orion> Hi. This function seems to express what I want to do. How do I chain invocations of it together?: https://gist.github.com/centromere/dd77053bfc2ede9bf9331b6ca92d7403
14:31:00 <orion> For example: updateUserField userEmail "foo@bar.com" (return userRecord) return
14:31:34 <orion> Now imagine that I have userFields = [ userEmail, userName, ... ] and [ "foo@bar.com", "Mr. Foo Bar", ... ]
14:32:03 <orion> If I squint at it, the last two variables to the function look like bind.
14:53:19 * hackage pandoc-throw 0.1.0.0 - MonadThrow behaviour for Pandoc.  https://hackage.haskell.org/package/pandoc-throw-0.1.0.0 (locallycompact)
14:55:49 * hackage sbvPlugin 0.12 - Formally prove properties of Haskell programs using SBV/SMT  https://hackage.haskell.org/package/sbvPlugin-0.12 (LeventErkok)
15:04:08 <dminuoso> @tell geekosaur The arcane magic I learn. Turns out that ioctl/read/readv/write/writev is documented to return a successful status when used on a "slow" device, such that "some work was done already". The ioctl just returns 0 then.
15:04:08 <lambdabot> Consider it noted.
15:04:17 <dminuoso> This is crazy
15:04:35 <dminuoso> But, I guess Im happy that there's no bugs left anymore
15:04:41 <dminuoso> Now I can resume with my library
15:23:50 * hackage FloatingHex 0.5 - Read and write hexadecimal floating point numbers  https://hackage.haskell.org/package/FloatingHex-0.5 (LeventErkok)
15:25:43 <monochrom> Fairly reasonable for read and write. There are already other reason to expect read and wrtie to be partly successful.
15:26:10 <monochrom> ioctl is the one that surprises me. Then again, perhaps ioctl is the wild wild west to begin with.
15:27:08 <la-jesystani> howdy, im trying to get into using nix for my depedency management, ive had a look at gabriel's nix repo but i cant quite get it to work, is there any other reccomended reading?
15:39:50 * hackage crackNum 2.4 - Crack various integer, floating-point data formats  https://hackage.haskell.org/package/crackNum-2.4 (LeventErkok)
16:01:23 <kindle> Hello! I am working through haskell from 1st principles. One of the code examples, when copied/pasted and rewritten by hand, gives some cryptic syntax parsing issues in GHC. Could anyone tell me what's wrong with it?
16:01:24 <kindle> https://pastebin.com/fx6qJhAQ
16:01:36 <kindle> The relevant code and errors are pasted above^
16:02:33 <kindle> Thank you in advance
16:03:52 <dolio> kindle: The second problem is that you outdented `coolness` past the definition it's in.
16:03:53 <ddellacosta> kindle: try indenting the coolness line so it's past the cool variable, or just bring it back up to the next line. You're just going to have to play with the formatting a bit
16:04:39 <kindle> dolio + ddellacosta : just the last line?
16:05:31 <kindle> How does Haskell syntax parsing work in this case? scopes are based on the column that the token is declared?
16:05:43 <dolio> Yes. `coolness` needs to be indented more than `cool`, because the latter sets the indentation.
16:06:18 <dolio> The first non-whitespace after the `where` sets the indentation level for the where block.
16:06:50 <kindle> Right, so everything needs to be aligned with the 'c'
16:06:57 <kindle> or to the right of the 'c'
16:09:04 <ddellacosta> I'm still waiting to hear what the first problem is, although I have a suspicion :-p
16:09:24 <dolio> All the definitions in the where block need to be aligned with `cool`, and things inside `cool` need to be indented more.
16:10:01 <ddellacosta> ah
16:11:01 <kindle> Interestingly enough, indenting the first suggestion fixed all of the issues
16:11:25 <kindle> shrug
16:12:44 <dolio> Not sure why that'd be.
16:14:09 <kindle> It may be some IHaskell funkiness
16:14:25 <kindle> Actually, no, the file yields the same with GHC
16:14:44 <kindle> Not sure.
17:13:51 <ddellacosta> (haskell-language-server filter:) I'm seeing that the definition for a lens operator is not showing up via (I believe) lsp-ui, but I see the data getting passed via the lsp log. Other docs do pop up, including the one for the fn call right next to it. I see no errors in various logs. Any suggestions on where to start debugging this?
17:14:20 <ddellacosta> hrm I guess this could be in one of the emacs pieces sadly
17:58:37 <mention> Hello, I am currently looking for a bit of assistance on partitioning though a list, I have about 1 1/2 attempts at one but I am struggling on succeeding. (Beginner
17:59:11 <Cale> mention: what's up?
17:59:33 <Cale> What do you mean by "partitioning through a list"?
18:01:04 <mention> Write a function that takes an equivalence relation on u as input and returns the associated partition of u. 
18:01:11 <mention> Instruction:
18:09:26 <eplib> How do you guys prefer I share code
18:09:53 <wavemode> https://gist.github.com/
18:09:59 <c_wraith> @where paste
18:09:59 <lambdabot> please paste full code, input, and output at https://paste.tomsmeding.com
18:10:24 <wavemode> ooh fancy
18:18:15 <mntion> What was the pasting site again my bad \
18:18:26 <c_wraith> @where paste
18:18:26 <lambdabot> please paste full code, input, and output at https://paste.tomsmeding.com
18:18:26 <mntion> got disconnected
18:23:17 <mntion> uaegWb80 
18:23:23 <mntion> is that correct to share?
18:23:36 <c_wraith> full url is more useful
18:24:04 <mntion> https://paste.tomsmeding.com/uaegWb80
18:35:49 <mntion> Did anyone have any thoughts from the function
21:08:50 * hackage subcategories 0.1.0.0 - Subcategories induced by class constraints  https://hackage.haskell.org/package/subcategories-0.1.0.0 (HiromiIshii)
23:50:50 * hackage constraints-deriving 1.1.1.1 - Manipulating constraints and deriving class instances programmatically.  https://hackage.haskell.org/package/constraints-deriving-1.1.1.1 (achirkin)
