00:18:13 <edwardk> MarcelineVQ: rankntypes and impredicative types in haskell aren't just about foralls but also constraints
00:18:15 <edwardk> p => ...
00:18:22 <edwardk> counts like bumping rank
00:18:31 <MarcelineVQ> oh I'd no idea
00:18:33 <edwardk> [p => q]
00:18:36 <edwardk> is impredicative
00:19:02 <edwardk> because ghc doesn't know when to float p, it tries to just float it outside anything it can
00:19:54 <edwardk> ImpredicativeTypes lets it allow that type, but ImpredicativeTypes is generally a horrorshow
00:20:22 <edwardk> the quick look at types paper should just allow this as well, as would andras kovacs' implicit fun elaboration stuff
02:38:38 <dminuoso> Mmm, servant seems to be blowing up the simplifier quite a bit. Approaching 30s for my Server module. :(
02:48:43 <AWizzArd> Generic Haskell. Thesis of Andres Löh. How much of it is still valid and up-to-date? Can one still read this and find today’s GHC working very exactly as back then, 16 (!) years ago?   https://www.andres-loeh.de/ExploringGH.pdf
03:00:49 * hackage stack-clean-old 0.1 - Clean away old stack build artefacts  https://hackage.haskell.org/package/stack-clean-old-0.1 (JensPetersen)
03:05:51 <kuribas> dminuoso: are you sure it's not aeson?
03:06:11 <kuribas> dminuoso: I find my JSON types take the longest to compile
03:06:53 <kuribas> with all the generics
03:07:30 <dminuoso> kuribas: Quite, yes. My JSON instances are handwritten.
03:07:38 <kuribas> of course for servant to be somewhat performant it has to inline all the type class definitions.
03:07:56 <dminuoso> Well, perhaps it's that.
04:14:09 <yushyin> maerwald: thanks for GHCUP_USE_XDG_DIRS but it is not mentioned in --help, also `ghcup compile ghc ...' still uses ~/.ghcup/{cache,logs} even if GHCUP_USE_XDG_DIRS is set.
04:50:17 <AWizzArd> What is the package/derivation name in Nix for the Haskell Language Server?
04:51:52 <Uniaika> AWizzArd: https://search.nixos.org/packages?show=haskellPackages.haskell-language-server&query=haskell-language-server&from=0&size=30&sort=relevance&channel=unstable#disabled
04:53:05 <dminuoso> Pretty sure that's just the wrapper for the cabal package
04:53:13 <dminuoso> Unless that's what AWizzArd is looking for :)
04:55:25 <Uniaika> dminuoso: aren't many nix derivations just wrappers for the cabal package? :P
04:56:36 <AWizzArd> I thought there might be a binary, compiled for a certain GHC version.
05:06:23 <Uniaika> Ah, that's a different request
05:06:32 <Uniaika> I'm getting those directly from their GitHub release page
05:06:42 <Uniaika> I'm pretty sure they don't exist in nixpkgs
05:07:31 <AWizzArd> Uniaika: I would like to include the language server in my Nix environment. I don’t want to install the HLS globally cause different projects may want to use different GHC versions.
05:07:51 <Uniaika> AWizzArd: well, that's why haskell-language-server-wrapper is for
05:07:55 <dminuoso> AWizzArd: https://github.com/haskell/haskell-language-server/issues/122
05:08:16 <Uniaika> typically in my path I have : .local/bin/haskell-language-server-8.6.5*  .local/bin/haskell-language-server-8.8.3*  .local/bin/haskell-language-server-wrapper*
05:08:31 <AWizzArd> My idea was to include the HLS in each project. Then I could start a nix shell in which I call Emacs, so that this instance of Emacs can "see" the specific HLS.
05:08:57 * dminuoso kicks back, thinking ghcid is the sweet spot of "ease of setup and future compatibility"
05:09:14 <dminuoso> And for what it brings. :)
05:09:50 <dminuoso> Maybe I should try out hls to know what the fuzz is about, but so far ghcid has not kept me wanting more.
05:16:00 <siraben> Why doesn't haskell-lsp in Emacs recognize packages in my cabal file?
05:16:12 <siraben> Like if I have project-specific dependencies, it says the library could not be found
05:16:38 <maralorn> AWizzArd: If you take haskell-language-server from the haskell.packages.ghcxxx version that you use for your project you should be fine. Although we don‘t build or test hls for anything other than the default ghc version.
05:17:54 <maralorn> Meaning: hls is always implicitly build for the ghc version you use to build it.
05:18:21 <maralorn> dminuoso: I actually have projects for which hls works and ghcid fails.^^
05:19:01 <dminuoso> maralorn: Curious, why is that?
05:19:36 <merijn> dminuoso: I don't think ghcid is remotely comparable to ghcide/hls, tbh
05:20:18 <merijn> dminuoso: I want warning/errors in my editor and the ability to query types. ghcid requires sacrificing an entire terminal window to it and can't even tell you the type of an expression
05:20:20 <maralorn> dminuoso: Not sure. It's probably easy to fix. But just saying it also sometimes fails to deliver ootb.
05:20:55 <dminuoso> merijn: I can query types quickly with (f :: _), ghcid gives me a prompt response. ;)
05:20:57 <AWizzArd> maralorn: how is "default ghc version" defined?
05:21:15 <dminuoso> merijn: And for the "entire terminal window" that's not true. I have my ghcid running in compilation-mode in emacs just fine
05:22:02 <maralorn> AWizzArd: It's the one used to build all packages in pkgs.haskellPackages and the one you get with pkgs.ghc. So you can see the default version just in the package search.
05:22:13 <merijn> dminuoso: Right, so all I have to do is switch to a completely different editor and get a complicated setup to work there :p
05:22:29 <maralorn> Right now it's 8.6.5 in 20.03 and 8.8.4 on 20.09 and unstable.
05:22:52 <dminuoso> Not sure about complicated setup *shrugs* 
05:23:04 <dminuoso> It's a really simplistic elisp file to tie ghcid into emacs
05:23:10 <merijn> dminuoso: It's emacs, any setup is gonna be complicated :)
05:23:23 <dminuoso> Sounds to me like you have already made up your mind then
05:23:56 <maralorn> For what it's worth the hls feedback is (or at least feels) just significantly faster then ghcid. Also hls has a quickly growing number of amazing features. Like applying warning corrections, etc.
05:24:02 <siraben> How can I make Haskell mode detect cabal packages?
05:24:44 <AWizzArd> maralorn: having an implicit build for my concrete ghc version is good of course. It would be nice if I didn’t have to specify version numbers in multiple places. Optimal is just to pin a certain Nix repo hash.
05:25:54 <dminuoso> maralorn: I dont want a fight at all, but how can lsp be faster? How does lsp obtain its information?
05:26:03 <dminuoso> Surely it interfaces with ghc or ghci under the hood
05:26:24 <dminuoso> (I dont know the details of how ghcide works internally)
05:27:15 <maralorn> dminuoso: I don‘t know. It just has a running ghc-session and only re-typechecks the changed parts.
05:27:40 <maralorn> I just can say that often the type error appears milliseconds after leaving insert mode.
05:27:43 <dminuoso> Fair enough, I can see how that could be faster. :)
05:27:48 <AWizzArd> Currently I like Intero most. Left-hand side is code, right-hand side the repl. I can mark sub expressions and get their types. Alas, it’s no longer maintained and it’s just a question of time until HLS will have overtaken.
05:28:06 <dminuoso> How does ghcide fare with the unstable GHC API?
05:28:31 <dminuoso> I mean this is my main motivator for ghcid, it just works regardless of how the GHC API changes
05:28:34 <maralorn> dminuoso: With tons of CPP. It's a nightmare.
05:28:37 <dminuoso> Heh
05:29:35 <maralorn> dminuoso: But right now it's really well maintained. So I don‘t think that new ghc versions will loose support in the next years.
05:30:41 <maralorn> siraben: I don‘t understand your question. But have you tried writting an explicit hie.yaml file?
05:30:51 <dminuoso> I might give it a try some day. From the looks of it, it's nicely modular, I just not convinced I want to drag lsp-ui into emacs :(
05:31:01 <dminuoso> Im a big fan of my sleek and small emacs setup
05:31:12 <dminuoso> (or is there an lsp tie into compilation-mode?)
05:31:14 <siraben> maralorn: I don't have an explicit hie.yaml, basically I have my dependencies in the cabal file and expect HIE to see them as well
05:31:33 <ohmysomuchuser> Hello all. I'm having trouble recompiling xmonad with ghc 8.8.3: I am running FreeBSD 12; cabal-install installed from packages; latest version installed with `cabal install Cabal cabal-install`; installed xmonad and xmonad-contrib via cabal with command `cabal install --overwrite-policy=always xmonad xmonad-contrib` - completed without error; $PATH includes $HOME/.cabal/bin; there is a symlink to 
05:31:39 <ohmysomuchuser> xmonad inside (symlink created successfully); `whereis xmonad` returns $HOME/.cabal/bin/xmonad; but xmonad --recompile causes the error: "Could not find module XMonad"; neither does it find any of the xmonad-contrib modules. Everything was working before i updated my system. I have made no changes to $HOME/.xmonad/xmonad.hs
05:31:50 <maralorn> siraben: Oh, I don‘t know anything about HIE. But you I would also expect it to see them.
05:32:51 <ohmysomuchuser> My config file: https://paste.mozilla.org/2c8jfWF5
05:32:58 <siraben> Hang on, what's the difference between HIE and haskell-language-serevr?
05:32:59 <dminuoso> ohmysomuchuser: Presumably $HOME/.cabal/bin/ is not on PATH for the user who initially started xmonad?
05:33:14 <merijn> siraben: None
05:33:14 <siraben> I have this in my config, `(setq lsp-haskell-process-path-hie "haskell-language-server-wrapper")`
05:33:16 <dminuoso> siraben: haskell-language-server is ghcide bolted onto lsp
05:33:24 <dminuoso> (roughly)
05:33:26 <merijn> siraben: HIE is/has been merging with hls
05:33:42 <merijn> siraben: See https://mpickering.github.io/ide/posts/2020-05-08-state-of-haskell-ide.html
05:33:50 <dminuoso> Ah heh indeed
05:33:56 <siraben> Hm, then I don't get why emacs isn't seeing my cabal packages
05:34:05 <siraben> I'm not using a nix shell for this project because of custom overrides
05:34:21 <ohmysomuchuser> @dminuoso I believe it is: echo $PATH shows it is.
05:34:21 <lambdabot> Unknown command, try @list
05:34:33 <siraben> And one of the dependencies has been marked broken on pkgs.haskellPackages
05:34:38 <dminuoso> ohmysomuchuser: "for the user who initially started xmonad"
05:34:51 <dminuoso> ohmysomuchuser: There is no global PATH. It's an environment variable.
05:34:55 <ohmysomuchuser> yes, that is me.
05:35:02 <dminuoso> ohmysomuchuser: Let me clarify
05:35:07 <maralorn> siraben: Have you run haskell-language-server-wrapper in the terminal? What does it display?
05:35:08 <dminuoso> ohmysomuchuser: From the *environment* xmonad is started from.
05:35:13 <dminuoso> How is xmonad started?
05:35:32 <dminuoso> Ohh
05:35:37 <dminuoso> ohmysomuchuser: I didnt read carefully, different problem
05:35:56 <siraben> maralorn:  http://ix.io/2yo8
05:35:56 <ohmysomuchuser> by my ~/.xinitrc file, and the command startx. This is after adding ~/.cabal/bin to my $PATH
05:36:01 <dminuoso> ohmysomuchuser: Which version does `cabal --version` return?
05:36:08 <siraben> It's trying to find a Main.hs file, but I'm working on a library
05:36:26 <ohmysomuchuser> 3.2.0.0
05:37:22 <siraben> cabal repl works fine, but LSP is complaining about libraries it can't find, hm.
05:37:30 <dminuoso> ohmysomuchuser: Mmm, let check the sources of xmonad real quick
05:38:42 <dminuoso> ohmysomuchuser: So personally, I'd recommend using the cabal v2- features. Set the xmonad directory up as a cabal project with a cabal file, set up a build script, which just calls `cabal build`. 
05:39:24 <ohmysomuchuser> I can add that `ghci -v ~/.xmonad/xmonad.hs` states the following locations searched: Locations searched: XMonad.hs XMonad.lhs XMonad.hsig XMonad.lhsig
05:39:40 <dminuoso> It's likely that your cabal version was bumped from below 3 to above 3, which now defaults to v2-*. Alternatively you could use v1-install in the above
05:39:47 <dminuoso> The problem is, `cabal install` no longer does what you think it does
05:39:54 <siraben> maralorn:  here's the full log https://paste.debian.net/hidden/4429c229/
05:39:59 <maerwald> shafox: I'm integrating haskell-language-server into ghcup as we speak
05:40:09 <dminuoso> ohmysomuchuser: But really, Id say go with the above.
05:42:13 <ohmysomuchuser> I will give it a try. Thank you.
05:42:52 <maerwald> shafox: and then I've an idea for a "ghcup satisfy" command, which would partly be a rip-off of https://github.com/vabal/vabal
05:43:24 <maerwald> I'm not sure if that's what you had in mind, feel free to open a ticket
05:44:01 <maralorn> siraben: Hm, the second log looks fine …
05:44:22 <maerwald> yushyin: can you open a ticket for that (preferably against master)
05:44:33 <ohmysomuchuser> ah, i forgot to add that `ghc-pkg list` lists a lot of things, but not xmonad or xmonad-contrib. `ghc-pkg` recache, does not help. Why is it not "visible"?
05:45:06 * siraben uploaded an image: Screen Shot 2020-09-22 at 19.44.29.png (246KiB) < https://matrix.org/_matrix/media/r0/download/matrix.org/UlJVsSxbfoTpFFsWCYIFuZbf/Screen Shot 2020-09-22 at 19.44.29.png >
05:45:09 <siraben> maralorn: ^
05:45:25 <dminuoso> ohmysomuchuser: So roughly, cabal has two modes called old-style and new-style
05:45:45 <dminuoso> ohmysomuchuser: In old-style, you had this notion of the "one global package database", where cabal install would build a package and register it with ghc-pkg
05:46:16 <maerwald> new-style is also global :p
05:46:28 <dminuoso> In new-style, which is nix inspired, packages are built into a store, hashed by version, constraints, etc. Then, when cabal selects a plan, it will configure a package database out of that according to the build plan
05:46:44 <dminuoso> Allowing multiple versions and flavors of a package to coexist
05:47:20 <dminuoso> The fact that we have `cabal install` is a bit funny. We could, for the sake of this discussion, pretend that it doesnt make much sense anymore.
05:48:34 <tomjaguarpaw> `cabal install` still makes sense for executables
05:48:42 <dminuoso> You can access these styles by prefixing the commands with v1-/v2- or old-/new-, and if you dont specify a prefix, before 3.0 it would default to old/v1, and after 3.0 it defaults to new/v2
05:48:50 <dminuoso> Which is why the behavior suddenly changed
05:48:51 <ohmysomuchuser> OK - I'm going to have to look into this much more. I'm not a Haskell developer, just like XMonad very much. Basically, instead of "installing it", I should "build it" as a project, right?
05:49:12 <dminuoso> ohmysomuchuser: I see! If you're not a haskell developer and want your stuff back to normal, use `v1-install` instead of `install` 
05:49:14 <dminuoso> and you should be fine
05:49:36 <tomjaguarpaw> ohmysomuchuser: This is how I do XMonad (with Cabal new-style) https://github.com/tomjaguarpaw/dotfiles/tree/master/xmonad
05:50:08 <tomjaguarpaw> but bear in mind this issue and my hacky workaround: https://github.com/xmonad/xmonad/issues/154
05:50:09 <dminuoso> Or you use a build file, like tomjaguarpaw has shown you. :)
05:50:41 <siraben> maralorn: what's happening with LSP for it not to see the libraries?
05:51:11 <dminuoso> ohmysomuchuser: Just be aware that at some point in the future v1- commands will be dropped from cabal. But this is distant. For xmonad-only users, v1- is perfectly fine to use. :)
05:51:34 <ohmysomuchuser> I have to say, this is disapointingly convoluted :( I only started having problems when xmonad-contrib was removed from the FreeBSD pkg repositories.
05:51:51 <maerwald> dminuoso: do you have a reference to that claim?
05:51:56 <maralorn> siraben: I honestly don‘t know. I have only seen an issue like that once. That was under nixos.
05:52:10 <ohmysomuchuser> So if I don't want to worry about future dropped commands, I can just do what tomjaguarpaw suggested?
05:53:00 <maralorn> siraben: It could have something to do with hls in emacs seeing different env-variables to discover packages. But I don‘t see why that would be the case.
05:53:16 <dminuoso> ohmysomuchuser: Yeah.
05:53:22 <siraben> potentially I could correct this by using direnv?
05:53:44 <siraben> In a project that worked before, I had a shell.nix and using emacs-direnv everything worked
05:53:46 <dminuoso> ohmysomuchuser: Im not sure his method is completely correct, but Id be happy to give you a helping hand if you have issues.
05:53:57 <siraben> But since I have to do an override for one of the dependencies, I can't use shell.nix here
05:54:10 <maralorn> siraben: Wait, have you installed anything in that setup with nix?
05:54:26 <dminuoso> maralorn: cabal sandbox at least gives out deprecation notices, calling v1 style legacy.
05:54:37 <siraben> maralorn: cabal and haskell language server is installed via nix, yeah
05:54:38 <dminuoso> And I recall reading discussions marking v1 commands as deprecated
05:54:40 <ohmysomuchuser> OK - I will attempt it his way, and will come back if need be. Thank you guys. While the tooling is a pain in the neck, you guys are great.
05:54:50 <siraben> But I installed the libraries with cabal
05:54:59 <dminuoso> Perhaps I misremember
05:55:18 <dminuoso> ohmysomuchuser: The tooling is actually pretty good, it's just that xmonad has a bit bizarre installation method.
05:55:26 <maralorn> siraben: And ghc?
05:55:37 <siraben> maralorn:  via nix as well
05:55:57 <maralorn> siraben: How old is your nixpkgs/hls?
05:56:14 <siraben> i updated my nix channel roughly 24 hours ago
05:56:17 <dminuoso> ohmysomuchuser: Since xmonad is not configured but *programmed* (think of xmonad as a library that you use to build a window manager with, and some stub executable), you step into the whole "build problem" domain
05:56:27 <siraben> haskell-language-server version: 0.4.0.0 (GHC: 8.8.4)
05:56:31 <dminuoso> build tools are really complicated. :)
05:56:37 <siraben> The Glorious Glasgow Haskell Compilation System, version 8.8.4
05:58:07 <maralorn> siraben: Ugh
05:58:32 <maralorn> Do you execute emacs inside the nix-shell?
05:58:39 <siraben> maralorn: nope
05:58:47 <dminuoso> maerwald: ^- I falsely send a message to someone else: cabal sandbox at least gives out deprecation notices, calling v1 style legacy. And I recall reading discussions marking v1 commands as deprecated
05:58:48 <maralorn> siraben: Can you try that?
05:58:52 <siraben> I usually use direnv for that kinda thing
05:58:56 <siraben> maralorn:  I don't have a shell.nix here
05:59:03 <maerwald> dminuoso: sandboxes are removed
05:59:10 <maralorn> Oh
05:59:17 <maerwald> but about v1- I don't remember a  clear decision, maybe phadej knows
05:59:25 <dminuoso> maerwald: Heh fair enough. Havent used these in a while :)
05:59:48 <maralorn> siraben: Can you tell if the missing packages are installed via cabal or via nix?
05:59:51 <dminuoso> v1- is very consistently called "legacy" in various issues on haskell/cabal though :)
05:59:57 <dminuoso> So that's rather suggestive already
06:00:35 <dminuoso> Found it
06:00:37 <dminuoso> maerwald: https://cabal.readthedocs.io/en/latest/nix-local-build-overview.html
06:00:44 <siraben> maralorn:  I think it's through cabal
06:00:45 <dminuoso> "[...] but these legacy commands will require the usage of the v1- prefix as of Cabal 3.0 and will be removed in a future release."
06:00:54 <siraben> also I didn't do cabal-install at all
06:00:56 <siraben> only cabal build;
06:01:09 <maralorn> siraben: Do you use ghc.withPackages ?
06:01:14 <maralorn> siraben: Yeah, that should work.
06:01:17 <siraben> maralorn:  not for this project
06:01:22 <maralorn> Okay
06:01:27 <dminuoso> Based on the fact that they dont emit a deprecation notice, I guess v1 is gonna stay for at least a year or two. :)
06:01:31 <siraben> everything worked when I used direnv, ghc.withPackages etc. in a previous project
06:01:39 <siraben> but with this weird setup, it's not working exactly
06:02:00 <maralorn> siraben: What's weird about the setup?
06:02:12 <maralorn> Have you installed hls and cabal via nix-env or configuration.nix?
06:02:24 <siraben> maralorn: https://github.com/siraben/pcf/tree/rebuild
06:02:30 <siraben> maralorn:  home-manager
06:02:46 <siraben> so, like configuration.nix I guess
06:03:09 <siraben> maralorn:  weird in the sense that it's not using nix, but a cabal file and a cabal.project file
06:03:20 <siraben> but all my tools are nix-installed
06:04:21 <kosmikus> AWizzArd: GHC has never been working as my thesis describes. The thesis describes an idealised version of Generic Haskell that used to be available as a separate preprocessor. whether it's still worth reading depends very much on what you want, but it's probably not.
06:05:52 <AWizzArd> kosmikus: okay I see, the intro however is nice and of general interest.
06:06:52 <siraben> Anyone working on an updated social graph for #haskell? https://wiki.haskell.org/wikiupload/3/3c/Haskell-current.png
06:07:17 <siraben> maralorn: I think what's happening is LSP is using the GHC installed via nix
06:07:20 <siraben> which doesn't have the packages
06:08:23 <dminuoso> siraben: yahb has the most fields! :)
06:09:06 <siraben> dminuoso:  yahb?
06:09:44 <dminuoso> % putStrLn "At your disposal"
06:09:44 <yahb> dminuoso: At your disposal
06:10:03 <dminuoso> Oh. That was supposed to read friends.
06:10:04 <dminuoso> Mmm.
06:10:10 <dminuoso> My code has more fields than friends. :(
06:10:13 <maralorn> siraben: HLS doesn‘t call any ghc from the PATH, it uses the ghc compiled into it. But yeah, that is the one from nix.
06:10:18 <dminuoso> Surprisingly no fiends
06:11:01 <siraben> didn't know that gwern used to hang around here in 2008, heh
06:11:08 <siraben> maralorn:  ah
06:11:16 <maralorn> siraben: Wait. There is no haskell-language-server-wrapper in nixpkgs.
06:11:31 <siraben> maralorn:  haskellPackages.haskell-language-server
06:12:43 <maralorn> siraben: Anyways can you try removing the "-wrapper" from your emacs config and see what happens?
06:12:51 <maralorn> Maybe the wrapper discovers some other hls?
06:13:32 <fendor> maralorn, small detail, hie-bios may use the ghc on the path to find the project ghc version
06:14:03 <siraben> maralorn:  I removed the "-wrapper" suffix from my config, still has the same issue
06:14:16 <yushyin> maerwald: ah yes, I'm sorry, I have to revert my 'bug' report :D it works as expected. I had just a very messy environment after converting to XDG_DIRS and either had still an old ghcup somewhere in PATH or not all shells/tmux had GHCUP_USE_XDG_DIRS set.
06:14:24 <siraben> fendor: what's hie-bios? I don't have that on my path
06:14:25 <maerwald> I see
06:14:55 <maerwald> yushyin: would have been surprised, because I abstract via directory getters
06:15:13 <fendor> siraben, woops, sorry, I did not want to confuse you. It is just a library in HLS that is used to load a project, just ignore it.
06:15:25 <siraben> ok, all good
06:15:47 <siraben> argh, surely someone's had this problem with haskell-lsp before, but looking around the internet no one seems to have
06:16:19 <siraben> Ah, https://emacs.stackexchange.com/questions/54017/interactively-load-cabal-packages-within-haskell-mode
06:16:52 <siraben> "I accidentally found out that the error is fixed when I cd to the directory and "cabal install varying --lib", [..]"
06:17:31 <maralorn> siraben: Just to clarify:  haskell-lsp is a library hls uses to speak the language-server-protocol. So it might make more sense to talk about hls.^^
06:17:37 <yushyin> maerwald: yeah, just a dumb mistake on my part :/
06:17:58 <siraben> maralorn:  ok, thanks
06:18:07 <fendor> siraben, you definitely dont have to invoke `cabal install --lib`
06:18:15 <maerwald> yushyin: it not showing up in --help is because you're the only one who ever complained about it :p
06:18:20 <siraben> fendor: right, that's what I want to avoid
06:18:36 <maralorn> <fendor "siraben, you definitely dont hav"> Or at least shouldn‘t have to.^^
06:19:10 <fendor> siraben, sorry, but what is the problem you observer? (Assuming it is not flycheck but hls)
06:19:24 <fendor> oof, I may just read the history
06:19:34 <siraben> fendor: there's an image I posted 
06:19:38 <siraben> that's probably the best way to explain it
06:20:11 <siraben> I'm not sure if I'm articulating the various parts of it correctly, there's a lot of software interacting (emacs, cabal, nix, lsp, etc.)
06:20:19 <maralorn> fendor: The debug output from running hls reports no errors, but in emacs it can‘t find the dependencies.
06:20:30 <fendor> i just joined twenty minutes ago, did you post it in the last minutes?
06:21:19 <siraben> fendor: https://matrix.org/_matrix/media/r0/download/matrix.org/UlJVsSxbfoTpFFsWCYIFuZbf/Screen Shot 2020-09-22 at 19.44.29.png
06:21:20 <maralorn> siraben: Hm, maybe emacs is executing hls in the wrong directory? (just grasping here.)
06:21:26 <fendor> siraben, then my first question would be, are you sure hls produces the errors and not some other tool such as flycheck?
06:22:01 <siraben> fendor:  ah, when I do flycheck-list-errors, it appears there
06:22:14 <siraben> So flycheck is the culprit here?
06:22:32 <fendor> maybe, I am unfortunately not really familiar with emacs plugins
06:22:34 <siraben> fendor: result of running haskell-language-server https://paste.debian.net/1164295/
06:22:47 <maralorn> Uuugh. I have never heard about flycheck. m(
06:22:56 <fendor> that looks ok to me
06:23:10 <siraben> maralorn:  flycheck-verify-setup says https://paste.debian.net/1164296/
06:23:22 <siraben> First checker to run seems to be lsp
06:23:41 <fendor> maralorn, I remember that multiple users had problems with errors showing up because of other tools, that is the only reason I know about it :)
06:24:16 <maralorn> siraben: Can you just disable flycheck and see what happen?
06:25:02 <siraben> Just disabled flycheck, but now all the hints and so on are gone
06:25:31 <fendor> yeah, but the diagnostics are correct? How about completion, and types?
06:25:38 <fendor> *type on hover
06:25:45 <siraben> Ok, the types on hover seem to be correct
06:25:55 <siraben> including the functions from the libraries it couldn't find before
06:26:02 <siraben> implying that it loads correctly
06:26:14 * fendor throws confetti
06:26:33 <siraben> Hm? But then why does flycheck report error?
06:26:37 <siraben> I'm even more confused
06:26:43 <fendor> flycheck and hls are completely unrelated
06:26:47 <merijn> siraben: Because it's trying to use GHC directly or something
06:27:02 <fendor> so I assume the setup of flycheck is broken in some way
06:27:07 <fendor> but hls seems to work
06:31:26 <maralorn> fendor: Lesson learned.
06:31:42 <siraben> https://github.com/jwiegley/dot-emacs/blob/18be11e9d1459ec9d80dcea87b562f7cd30f72a9/settings.el#L648
06:31:43 <siraben> interesting
06:33:52 <fendor> maralorn, :) 
06:34:31 <maralorn> Slightly unrelated: I imagine we could put some magic into nixpkgs so that haskell.packages.ghcxxx.haskell-language-server gives you a haskell-language-server-ghcxxx binary and even built them with hydra, so that we see build errors.
06:34:57 <maralorn> Then tha haskell-language-server-wrapper can work easily under nix, too.
06:39:31 <maralorn> I wonder if it would be worth it to have pkgs.haskell-language-server-ghcxxx top-level-packages. Might make it easier for people to discover them.
06:40:01 <maralorn> Gonna carry that question to a more appropriate channel.
06:40:49 <siraben> Ok
06:58:06 <ukari> why the type of same field `value1` can't be inferred when use fmap? (https://plaster.tymoon.eu/view/2057)
07:01:19 * hackage rebase 1.7.4 - A more progressive alternative to the "base" package  https://hackage.haskell.org/package/rebase-1.7.4 (NikitaVolkov)
07:03:49 * hackage rerebase 1.7.4 - Reexports from "base" with a bunch of other standard libraries  https://hackage.haskell.org/package/rerebase-1.7.4 (NikitaVolkov)
07:23:32 <hololeap> i have a local cabal project "linked" to my current project using cabal.project.local, but it's not finding the haddock docs for this other project: Warning ... could not find link destinations for ...
07:25:44 <hololeap> the line in cabal.project.local looks like `packages: ../foo/foo.cabal`
07:27:19 * hackage doctest-lib 0.1 - Parts of doctest exposed as library  https://hackage.haskell.org/package/doctest-lib-0.1 (HenningThielemann)
07:28:04 <hololeap> Warning: The documentation for the following packages are not installed. No links will be generated to these packages: ...
07:28:18 * hackage doctest-exitcode-stdio 0.0 - Run doctest's in a Cabal.Test.exitcode-stdio environment  https://hackage.haskell.org/package/doctest-exitcode-stdio-0.0 (HenningThielemann)
07:29:41 <hololeap> what would be the best way to link to the generated haddocks inside the other package dir, or should i just install the other package
07:45:22 <ahri> I've been poking around trying to work out how to use ghcjs with stack, there's old docs saying Stack will automagically download snapshots but that's no longer true as far as I can tell. GHCJS' github talks about building the compiler, which is cool, but I'll have to tell stack to use it somewhere, right?
08:08:36 <maerwald> stack dropped support for ghcjs, no?
08:08:57 <tdammers> did they ever have proper support in the first place?
08:08:58 <maerwald> I'm not sure, but I believe most ppl use nix for that
08:09:53 <tdammers> also, getting either stack or cabal to use your ghcjs compiler is the easy part; the hard part is figuring out how to make them download and compile packages from the right repository the right way
08:16:20 <siraben> maralorn:  i finally resolved it
08:16:25 <siraben> had to have a hie.yaml file all along...
08:17:26 <maralorn> siraben: Oh, okay.
08:18:00 <siraben> maralorn:  new issue that it seems to hang when I open the haskell file, hm.
08:18:39 <maralorn> :-/
08:22:09 <siraben> but, progress nonetheless
08:24:12 <maerwald> tdammers: ah right, I remember some ppl used to set up hackage overlays for thatt
08:43:03 <Guest_91> got a prob while installing haskell on mac
08:43:52 <Guest_91> can somebody help me ??
08:44:07 <siraben> Guest_91: just ask your question
08:44:53 <Guest_91> i install haskell via their website but when i wanna use i get the error GHCi command not found 
08:45:20 <Guest_91> how to overcome this error??
08:50:52 <c_wraith> well first of all, how did you actually install it?  "via the website" isn't really informative.  What was the name of the thing you downloaded?  What did you run to install it?
08:51:47 <Guest_91> https://www.haskell.org/ghcup/ t
08:52:06 <c_wraith> ok.  are you using bash as your shell?
08:52:20 <maerwald> Guest_91: source ~/.ghcup/env
08:52:24 <maerwald> in your current shell
08:52:34 <maerwald> then add the same line in ~/.bash_profile
08:52:46 <Guest_91> i run this code on terminal to instal :curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
08:53:19 <Guest_91> im using the terminal 
08:54:03 <AWizzArd> Emacs + Haskell Language Server: the three suggested Emacs plugins (lsp-mode, lsp-ui and lsp-haskell)... do they automatically try to call the haskell-language-server-wrapper exe, as soon as I open a .hs file? Or do I need to configure this binary at first?
09:01:19 <maerwald> Guest_91: did you do what I said?
09:02:55 <Guest_91> i am new on mac from windows and also new on haskell so please be more explicit !!!
09:07:19 <yushyin> Needs more punctuation marks
09:07:38 <sm[m]> that's telling you maerwald :)
09:08:26 <sm[m]> welcome Guest_91 be patient and we can help you :)
09:08:42 <maerwald> I don't have a mac, but sm[m] is very knowledgable about that
09:08:53 <sm[m]> doh
09:09:07 <Guest_91> thank you
09:12:24 <sm[m]> if you use ghcup, I defer to your maerwald who is the worlds number one expert. I use brew or stack's install script, myself
09:13:14 <yushyin> Guest_91: do you have the terminal still open? Type in 'source ~/.ghcup/env' and ghcup should work. If yes open the file ~/.bash_profile and also write that line into that file, save it! Open another terminal check if ghcup works
09:13:21 <maerwald> sm[m]: xD
09:13:34 <AWizzArd> About the Haskell Language Server: can it show me the types of sub expressions? For example I mark the var `y` in the call `foo x y z` and it will tell me the type of y?
09:14:38 <Guest_91> it workkkkk, thankk youuuuu yushyin!!!!
09:15:00 <Turmfalke> > head (_ : "bar")
09:15:06 <lambdabot>  error:
09:15:06 <lambdabot>      • Found hole: _ :: Char
09:15:06 <lambdabot>      • In the first argument of ‘(:)’, namely ‘_’
09:15:11 <Guest_91> how can i open the file ~/.bash_profile ??
09:15:25 <Turmfalke> AWizzArd: ^ You could use holes like in the example
09:15:34 <yushyin> Guest_91: With any editor
09:15:52 <yushyin> Don't know what mac users use
09:16:35 <sm[m]> Guest_91: one way is to type: open -a textedit --args ~/.bash_profile
09:16:37 <AWizzArd> Turmfalke: yes sure, I am just comparing what HLS already can do vs. intero.
09:17:04 <AWizzArd> Turmfalke: in Intero I simply mark (in Emacs) the thing I want to know the type of and immediately get it in the mini buffer.
09:17:22 <Turmfalke> Oh, I don't know even what those are, sorry
09:26:57 <slack1256> The RecordDotSyntax is expected to land in 8.12 or so?
09:30:40 <rkvist> Does irc browse https://ircbrowse.tomsmeding.com/ have a channel?
09:31:11 <tomsmeding> rkvist: it does not have a dedicated irc channel, no; is there a particular reason you're asking?
09:31:27 <tomsmeding> (at least, not that I know of :D)
09:33:51 <monochrom> Isn't that this channel? :)
09:40:12 <rkvist> lol I am sure it is not because I forgot to install postgres and thus it is not working.
09:42:04 <monochrom> I see what you mean now.
09:52:20 <tomsmeding> I'm afraid I don't fully see; perhaps a meaning of "channel" is used that I'm not getting? :)
09:53:01 <monochrom> Rather, I think rkvist means a channel about the software used behind ircbrowse.
09:53:47 <rkvist> Sorry didn't mean to cause existential issues, like normally when I go places. 
09:53:55 <tomsmeding> :p
09:55:09 <monochrom> Are existing issues discovered, or are they created?  <--- the ultimate meta-existential issue. >:)
09:57:05 <hyperisco> I think "discovery" is the fundamental question
09:58:10 <hyperisco> and I don't think discovering something creates it, so no! :P
09:59:25 <geekosaur> I walked into the middle of something, and I'm still trying to figure out what. >.>
09:59:56 <tomsmeding> geekosaur: https://ircbrowse.tomsmeding.com/browse/haskell?id=14203&timestamp=1600792200#t1600792200
10:00:28 <monochrom> It all began with my misinterpretation of a question. :)
10:01:21 <monochrom> TLDR it ended with my great skill in using puns to tie a knot.
10:02:35 <hyperisco> discovery = novel subjective actualisation
10:03:13 <monochrom> hyperisco, we all know that discovery and creation are disjoint.
10:03:54 <hyperisco> I thought this was a hotly debated amongst philo laymen like myself whenever "invention" is discussed :P
10:04:00 <hyperisco> are inventions discovered or created
10:04:12 <monochrom> But do you choose to frame your programming activity as "creating your code", or do you frame it as "discovering your code?"
10:04:22 <int-e> neither, they're patented :-P
10:04:28 <monochrom> haha you win
10:05:05 <monochrom> Because the set of all strings already exist as a mathematical set. Perhaps you discovered that you wanted one particular element to be your code.
10:05:22 <hyperisco> shoo Plato!
10:06:23 <hyperisco> I could agree the set of all strings exist but I wouldn't agree that all strings exist
10:06:48 <monochrom> OTOH if you take the stance that you created, not discovered, your code, then whatever reason you use for that stance is very likely widely applicable and so the next question is what is there to discover.
10:07:23 <hyperisco> well you say they are disjoint, I don't
10:08:08 <monochrom> (The converse is also true. Whatever reason you use to take the stance that, for example, math is discovered, is likely widely applicable and so what is there to create.)
10:09:49 <geekosaur> on the one hand, "God created the integers; all else is the work of man."
10:10:18 <geekosaur> on the other, I can follow hyperisco and various sculptors in saying that something exists in the abstract and is revealed by someone
10:10:27 <monochrom> ObHaskell: Discovery is reading eagerly-pre-evaluated values. Creation is forcing lazily-eval-on-demand values.
10:11:07 <hyperisco> I have a hard time understanding the authorship part of creation
10:11:47 <hyperisco> I'd rather say something more mundane like effects are created by causes
10:11:57 <monochrom> Well yeah, authorship and "giving credits" is a social construct. :)
10:12:04 <hyperisco> but you can't really get to saying a person is a cause
10:12:31 <monochrom> Do you accept "humanity as a whole is the author"?
10:13:05 <hyperisco> if authorship can be explained to me maybe
10:14:09 <geekosaur> considering intellectual property law, I am not sure it can be explained
10:15:10 <hyperisco> for discovery it seems okay to handwave "brain states" and fine
10:16:35 <hyperisco> but authorship seems murky because intuitively it is about originality
10:16:51 <geekosaur> you can do much the same handwave for creation. after all, something exists beforehand, you've merely come up with a new way to organize it. with luck it's even a useful way
10:17:28 <hyperisco> I could say I create my code, but I've also learned from other people, and I mimic their ideas, like Monad
10:17:43 <hyperisco> so where have I authored and where haven't I?
10:18:43 <hyperisco> if I read a bubble sort and I type it out myself verbatim, did I create that? maybe I created the copy of it, the copy is novel
10:19:36 <hyperisco> which then confusingly is on a screen, in RAM chips, bits in the CPU caches, somewhere on my SSD, somewhere in the cloud backup
10:20:12 <hyperisco> did I create all of those or was that a feat of the hardware?
10:20:42 <hyperisco> maybe all I really did was author the performance of pressing keys
10:20:53 <geekosaur> are you also a feat of the hardware?
10:21:08 <hyperisco> maybe D:
10:21:39 <monochrom> Who knows, perhaps the exact timing and velocity of your pressing keys constitute a new symphony.
10:22:02 <maerwald> is there any terminal layout library (e.g. printing tables) that deals correctly with escape chars and unicode?
10:22:12 <hyperisco> a real question \o/
10:31:28 <geekosaur> hm. I think ircbrowse used to keep track of #ghc as well
10:31:45 <geekosaur> (also the error message for an unknown channel is kinda unfortunate)
10:33:52 <geekosaur> maerwald, I'd doubt it re escapes; it's tricky at best
10:34:16 <maerwald> brick deals with it correctly, but I can't use brick to just print to screen
10:34:38 <maerwald> table-layout has too many bugs
10:35:13 <geekosaur> although there are cheaty ways if you stick to a subset of escapes
10:35:50 <sm[m]> hledger deals with it somehow (using tabular and helpers in Hledger.Utils.String or so)
10:36:08 <maerwald> sm[m]: please make it a library...
10:36:33 <sm[m]> I can't afford it
10:36:48 <maerwald> why... how much funding you need
10:37:02 <sm[m]> those are two issues, right.. dealing with wide unicode characters, and dealing with ansi escapes ?
10:37:23 <maerwald> yeah, I don't know which one affects me and I don't really want to know
10:37:39 <sm[m]> hehe
10:38:32 <sm[m]> https://hackage.haskell.org/package/hledger-lib-1.19.1/docs/Hledger-Utils-String.html#v:stripAnsi removes ansi, probably this exists in some lib too
10:39:06 <monochrom> Necessity is the mother of yak shaving. :)
10:39:30 <sm[m]> https://hackage.haskell.org/package/hledger-lib-1.19.1/docs/Hledger-Utils-String.html#v:strWidth calculates width, accounting for wide chars and ignoring ansi codes
10:40:10 <maerwald> it's like... you want to drink a coffee and you end up flying to Africa, buying a plantation, growing coffee beans, figuring out logistics and how to ship your crap. Then 20 years later you get to drink the damn coffee.
10:41:06 <maerwald> sm[m]: interesting
10:41:16 <monochrom> I think that's how coffee company empires were built.
10:41:42 <sm[m]> see also https://hackage.haskell.org/package/hledger-lib-1.19.1/docs/Hledger-Utils-Text.html
10:42:48 <maerwald> monochrom: I know right... it's always the little things where you think "this should just take a minute" and then it derails your life
10:43:40 <monochrom> I wouldn't call it "derail" if the side effect is you become a tycoon of something and get rich.
10:44:04 <maerwald> you're just trying to manipulate me into fixing this
10:44:08 <geekosaur> but I'm still waiting for my <redacted> coffee!
10:44:08 <maerwald> that won't work!
10:44:10 <monochrom> :)
10:45:11 <sm[m]> <gazing into space>  hmm, if only someone had time to extract my utils into a library...
10:45:52 <monochrom> I have Dyson in mind. The vacuum cleaner Dyson. He was very dissatisfied by the vacuum cleaners before his, so he did the yak shaving of making his own (fortunately, he also had the know-how to). As a side effect, he's a tycoon of this business now, and goes on to sell hair dryers in addition.
10:46:51 <maerwald> imagine a multi-functional vacuum cleaner, which also works as a hair dryer
10:47:13 <maerwald> just be sure to press the right button
10:47:41 <maerwald> (and a leaf blower)
10:48:47 <maerwald> why do discussions about ansi terminal always end up with vacuum cleaners? Because it sucks!
10:48:56 <monochrom> hahaha
10:49:13 <monochrom> And leaf blowers? Because it blows!
10:49:34 <maerwald> sm[m]: please rescue us
10:49:58 <maerwald> you have the know-how... just need to become tycoon now
10:50:19 <sm[m]> urgh it's not so easy
10:50:40 <maerwald> you're a good sales man
10:50:52 * maerwald increases the offer
10:52:43 <maerwald> how do you build a table now?
10:52:53 <sm[m]> maerwald: I just saw your https://github.com/muesli4/table-layout/issues/8 screenshot.. like the commenter said, that's just being caused by the colour codes, yes ? is the bug in table-layout then ?
10:53:07 <maerwald> where else would the bug be
10:56:10 <maerwald> I think I'll just implement this myself... doing a table isn't that hard
10:56:25 <maerwald> only when you want to support all sorts of weird configurations
10:56:31 <sm[m]> I use those utils + tabular. It shouldn't be that hard to add a similar fix in table-layout though.
10:58:39 <maerwald> sm[m]: can it do normal line by line output without table frames and delimiters?
10:59:06 <sm[m]> tabular.. I don't think so..
10:59:18 <sm[m]> I have munged its output when I wanted that
10:59:32 <sm[m]> oh I could be wrong
11:00:36 <tomsmeding> maerwald: in that screenshot in that issue, what bytes does ghcup write to the terminal?
11:00:52 <sm[m]> oh nice, tabular is maintained now, by bgamari
11:01:02 <tomsmeding> because that looks suspiciously like it's trying to align with tabs where ghcup thinks tabs are width 4, and your terminal emulator thinks they're width 8
11:01:03 <tomsmeding> :p
11:01:05 <bgamari> indeed; it's a nice package
11:01:15 <sm[m]> thanks bgamari !
11:01:19 <tomsmeding> or... maybe not, since the columns are 9 characters apart
11:01:42 <maerwald> tomsmeding: https://hackage.haskell.org/package/pretty-terminal-0.1.0.0/docs/src/System-Console-Pretty.html#Color
11:02:05 <tomsmeding> I was asking in particular about what characters make up the blank space between the columns :p
11:02:13 <tomsmeding> I know ansi color codes
11:02:25 <maerwald> it's probably ...space?
11:02:46 <geekosaur> the alternative being tabs, which is what tomsmeding was asking
11:02:59 <tomsmeding> or manual positioning using ansi cursor movement codes
11:03:09 <dead10cc> is there any document like "how haskellers program in x language" of from haskell to x language?
11:03:42 <sm[m]> yes, a few
11:04:26 <tomsmeding> maerwald: a way to get the actual stuff that a program is writing to the terminal is running it in `script(1)`
11:04:57 <tomsmeding> '$ script -O log.txt' opens a new shell, and copies all bytes written to the "terminal" during that shell session to log.txt
11:05:27 <tomsmeding> it's better than piping the output to a file if the command does something different depending on isatty(stdout); script(1) makes sure stdout actually looks like a tty
11:07:01 <monochrom> I simplify "how haskellers program in x language" by s/haskellers/to/
11:07:24 <tomsmeding> ah! maerwald the ansi code for switching on a simple text colour takes 5 bytes, and the ansi code for resetting colour takes 4; your "Notes" column entries are offset 9 (= 5 + 4) bytes from each other
11:07:45 <maerwald> tomsmeding: I'm already reimplementing it
11:07:51 <tomsmeding> the number of spaces is calculated by taking the length of the preceding string, which wrongly includes the ansi formatting characters
11:07:52 <tomsmeding> ah :p
11:07:59 <tomsmeding> took me a while to spoit it
11:08:02 <tomsmeding> *spot
11:08:49 * hackage stm-actor 0.2.0.0 - A simplistic actor model based on STM  https://hackage.haskell.org/package/stm-actor-0.2.0.0 (sgschlesinger)
11:09:05 <dead10cc> monochrom, no I want to see it from a haskell programming perspective
11:09:26 <tomsmeding> geekosaur: ircbrowse did indeed have lots of channels; since I was in none of those except #haskell, I disabled all except #haskell. If you want more channels, you need to only request and promise me that the ircbrowse bot is welcome there :)
11:10:44 <geekosaur> I can't speak for #ghc but suspect it would be welcomed back. I can even less speak for other channels
11:11:15 <geekosaur> (well, I can speak for #xmonad but that's not worth logging really, it's so low volume)
11:11:18 * hackage nri-prelude 0.1.0.0 - A Prelude inspired by the Elm programming language  https://hackage.haskell.org/package/nri-prelude-0.1.0.0 (JasperWoudenberg)
11:12:47 <sm[m]> tomsmeding: #hledger is ready to be logged again, thanks for the offer
11:13:04 <tomsmeding> I'll add it sm[m] 
11:13:16 <sm[m]> I suppose you don't have the old logs from ircbrowse.net ?
11:13:34 <tomsmeding> I don't :p
11:13:41 <tomsmeding> not sure how I would obtain them
11:14:02 * tomsmeding is kind of confused why the channels in ircbrowse are determined at compile time
11:14:27 <sm[m]> it would mean contacting chris done
11:14:57 <sm[m]> not urgent for me, I was just wondering
11:15:09 <monochrom> I'm a lazy programmer, I think I know. It's less work to hardcode parameters at compile time. :)
11:15:17 <tomsmeding> :p
11:15:59 <geekosaur> xmonad-style configuration :)
11:20:59 <tomsmeding> sm[m]: ircbrowse_tom should have joined #hledger
11:22:28 <sm[m]> it has not
11:23:33 <tomsmeding> why does znc not make a channel enabled by default
11:23:44 <tomsmeding> there we go
11:24:03 <tomsmeding> https://ircbrowse.tomsmeding.com/browse/hledger
11:24:28 <maerwald> sm[m]: stripAnsi... wasn't that the function with the bug? :)
11:24:56 <sm[m]> tomsmeding: thanks!
11:25:26 <sm[m]> maerwald: it got broken and fixed in hledger master recently, but works fine in all released versions AFAIK
11:26:04 <sm[m]> well I'd better qualify that, maybe 1.19 or 1.19.1 is suspect
11:27:19 * hackage stm-actor 0.2.0.1 - A simplistic actor model based on STM  https://hackage.haskell.org/package/stm-actor-0.2.0.1 (sgschlesinger)
12:01:19 <maerwald> sm[m]: and done :)
12:01:27 <maerwald> your function works well
12:01:50 <sm[m]> nice!
12:05:50 <maerwald> the solution was actually less than 10 lines of code (if I don't count the functions I copy pasted from you)
12:06:03 <maerwald> and one library less in use
12:08:19 <maerwald> sm[m]: https://gitlab.haskell.org/haskell/ghcup-hs/-/commit/40a1cc98c6ea7eb06eeca7a37915a5075451420b#c84b8cca7fc11e84e49df98e5e56e35d46791361_1560_1558
12:10:47 <sm[m]> maerwald: slight warning, I think that list of wide characters doesn't cover everything
12:11:00 <maerwald> doesn't have to
12:11:23 <sm[m]> but so far we've only once had to add another mystery unicode region to it
12:11:44 <maerwald> this isn't rocket science I think, ppl have done worse things in CSS
12:11:56 <geekosaur> it's not really possible to, as which ones are wide depends on the font and sometimes the terminal
12:12:44 <sm[m]> I think unicode specifies their nominal width
12:13:23 <sm[m]> how they get rendered is of course another matter
12:32:34 <cr0ssw1nd> hey
12:33:49 * hackage nri-env-parser 0.1.0.0 - Read environment variables as settings to build 12-factor apps.  https://hackage.haskell.org/package/nri-env-parser-0.1.0.0 (JasperWoudenberg)
12:34:11 <cr0ssw1nd> what is the way to install tools in haskell world?
12:34:35 <cr0ssw1nd> like `cargo install` in rust
12:34:51 <cr0ssw1nd> `cabal install` installs the project itself if I understand correctly
12:35:09 <maerwald> cr0ssw1nd: cabal install
12:36:05 <cr0ssw1nd> maerwald, it starts to compile my project
12:37:16 <cr0ssw1nd> for instance, I want to install hpack
12:37:21 <maerwald> cabal install hpack
12:37:33 <cr0ssw1nd> but why it compiles the whole my project
12:37:41 <cr0ssw1nd> it is like 15 minutes in my case
12:37:50 <maerwald> go outside of your project dir
12:38:13 <cr0ssw1nd> ha, thanks
12:38:22 <cr0ssw1nd> didn't think about it :)
12:41:14 <sm[m]> either way, it could build a lot of deps. But if you do it from your home dir you're more likely to have them already built
12:50:44 <maerwald> sm[m]: do I have to pay ransom for stealing your code?
12:53:00 <sm[m]> maerwald: no, use it freely. You're in the GPL "family" now. 
12:54:34 <cr0ssw1nd> sm[m], hm, I actually did it from /tmp
12:54:45 <cr0ssw1nd> doesn't it look into ~ automatically?
12:55:02 <sm[m]> ..if you want to leave, we'll have to send Vinnie the Collector ..
12:55:15 <sm[m]> cr0ssw1nd: that's fine, the main thing is a non-project directory. I always to "cd" because it's easy
12:55:18 <sm[m]> do
12:55:39 <cr0ssw1nd> lol, I forgot that there is default for cd
12:55:56 <cr0ssw1nd> started to use /tmp a lot last time
12:56:34 <maerwald> those are all excellent choices
12:56:46 <maerwald> a gentleman choice
12:57:06 <cr0ssw1nd> :)
13:01:25 <sm[m]> cr0ssw1nd: and some things are just too much hassle to build from source (pandoc) so you might find brew/nix/apt quicker
13:02:02 <cr0ssw1nd> can imagine, rpm in my case
13:02:08 <cr0ssw1nd> but probably I should try nix already
13:02:35 <sm[m]> rpm/apt tend to be very out of date, is all
13:02:47 <maerwald> cr0ssw1nd: nix... if you have time to waste :p
13:03:50 <cr0ssw1nd> gentoo already isn't that popular? :)
13:03:54 <cr0ssw1nd> for this purpose
13:04:28 <sm[m]> it's popular only among gentoo users
13:05:11 <ixlun> Is there a mapZip function?
13:05:29 <ixlun> (a -> b) -> [a] -> [(a, b)]
13:06:18 <phadej> :t \f -> map (id &&& f)
13:06:20 <lambdabot> (a -> c') -> [a] -> [(a, c')]
13:06:45 <ixlun> whoa, not seen `&&&` before
13:08:08 <sm[m]> nice
13:08:22 <cr0ssw1nd> sm[m], yeah, gentoo is probably more about wasting cpu time than your own
13:08:41 <maerwald> yeah, I wasted a lot of time on it :p
13:10:25 <phadej> ixlun: I consider that to be slightly code-golfy, `map (\x -> (x, f x))` is not that bad either
13:15:52 <ixlun> Indeed, I think if I came back to this code and saw your previous answer, I'd be scratching my head.
13:15:55 <dolio> Using (&&&) is longer once you account for importing Control.Arrow.
13:16:11 <ixlun> (I need to read up on Arrows)
13:22:53 <merijn> ixlun: tbh, you don't really
13:23:07 <merijn> I'd say Arrow is a mostly dead abstraction that's fallen in near complete disuse
13:23:34 <merijn> Most of the stuff it's used for has been superseded by a mix of Applicative, Category, and Profunctor
13:24:16 <merijn> The &&& and *** combinators are sometimes used for code golfing, but their tuple instance honestly has fairly little to do with Arrows
13:25:39 <sshine> I prefer Data.Bifunctor for tuple jugling
13:26:02 <merijn> Yeah, but &&& doesn't work with bifunctor :p
13:26:13 <sshine> :t (&&&)
13:26:15 <lambdabot> Arrow a => a b c -> a b c' -> a b (c, c')
13:27:33 <merijn> That'd require Biapplicative
13:27:44 <merijn> actually, no, not even then
13:27:48 <sshine> heh :)
13:33:11 <z0> hi. can we create a 'newtype N = N Int' that inherits everything Int has?
13:33:38 <z0> basically i want a type synonym that doesnt typecheck with the original type
13:34:24 <sshine> z0, there are many ways to automatically derive, but I think you have to be explicit about what you derive.
13:34:30 <solonarv> z0: *everything, automatically*? no. but with GeneralizedNewtypeDeriving, you can inherit a lot of things
13:35:02 <z0> that's what i thought. thanks
13:35:13 <solonarv> newtype N = N Int deriving newtype (Eq, Ord, Num, Real, Integral, Show, Read, ... more typeclasses here ...)
13:35:49 <z0> wouldnt it be useful to be able to do that?
13:35:58 <sshine> hmm, maybe. but also shaky.
13:36:05 <z0> why shaky?
13:36:49 <irreg> @pl \x y -> x y
13:36:49 <lambdabot> id
13:37:02 <sshine> I'm not sure where to start, or if what I'm thinking is the most fundamental argument to not want that. but I'd like that if my data type has some ability, this ability is listed next to the data type definition.
13:37:44 <sshine> so with derived abilities, at least it says where I derived it. otherwise I get a soup of unknown behaviors once I derive everything from something that derives everything from something else. :)
13:38:25 <z0> well, you can have 'type N = Int' and that wont bother you. the difference is that i want to make sure im not passing Dollars where i should be passing Mass (dumb example)
13:38:29 <monochrom> It is both useful to inherit and useful to forbid inheriting. There lies the conflict.
13:38:44 <sshine> what if I create a data type that has two fields (so isomorphic to a tuple), where I derive everything from each of those components, and somehow those components have overlapping instances?
13:39:19 * hackage sequence-formats 1.5.1.3 - A package with basic parsing utilities for several Bioinformatic data formats.  https://hackage.haskell.org/package/sequence-formats-1.5.1.3 (stephan_schiffels)
13:39:37 <monochrom> sshine, but then with two fields it wouldn't be newtype.
13:39:44 <sshine> monochrom, no, it wouldn't.
13:39:53 <z0> this wouldnt be a derivation, it would be like a synonym that doesnt typecheck with the original type
13:40:15 <monochrom> Here the fundamental conflict is how different people have opposite use cases of newtype and therefore opposite expectations.
13:40:18 <sshine> monochrom, so maybe this is useful to consider as a newtype-only feature. but are there deriving strategies that only work on newtypes so far?
13:41:18 <z0> https://downloads.haskell.org/~ghc/5.04.3/docs/html/users_guide/newtype-deriving.html
13:41:43 <phadej> hmm, that's ancient docs
13:42:37 <monochrom> I had a copy of GHC 4.something, but it got corrupted.
13:42:38 <sshine> z0, have you seen the safe-money package? https://hackage.haskell.org/package/safe-money - https://ren.zone/articles/safe-money - this is one approach to providing domain-specific wrappers that try to mix convenience (e.g. 3.14 :: Dense "USD") with type-safety.
13:47:59 <z0> interesting
13:48:01 <z0> thanks
13:58:42 <dolio> There would be more details needed to be worked out for such a thing.
14:01:49 <cr0ssw1nd> if I have only 1 library in my project, what is the difference between putting something into "dependencies" or into "library->dependencies" in my package.yaml ?
14:08:57 <maerwald> safe-money is awesome, yet I haven't seen it in use... I think ppl just go for Double and call it a day
14:09:52 <Uniaika> smart people don't handle money ;)
14:12:09 <cr0ssw1nd> :D
14:25:00 <ixlun> If I have: a -> f a, and a -> b, how can I combine them to get a -> f b?
14:26:23 <koz_> :t fmap
14:26:25 <lambdabot> Functor f => (a -> b) -> f a -> f b
14:26:30 <koz_> ixlun: ^
14:26:43 <sshine> :t fmap . pure
14:26:45 <lambdabot> Functor f => b -> f a -> f b
14:28:57 <ixlun> so, say x :: a -> f a and y :: a -> b
14:29:31 <ixlun> then, if I do, pure y <$> x, then I get: a -> a -> b
14:29:45 <sshine> where'd the f go?
14:30:30 <ixlun> I ain't got a clue but that's what haskell is telling me!
14:30:38 <ixlun> let me post the code...
14:31:18 <ixlun> http://ix.io/2yrC
14:31:56 <ixlun> at the bottom: x :: GameState -> Tree GameState
14:32:19 <ixlun> evaluate :: GameState -> Double
14:32:49 <ixlun> tree :: GameState -> GameState -> Double
14:32:58 <ixlun> ^ that I really don't understand
14:33:17 <ixlun> `Tree` has disappeared?
14:39:11 <dolio> `pure y :: f (a -> b)` but using it as the first argument to fmap/<$> means `f` is expected to unify with a function type.
14:39:53 <dolio> Also x has a function type, but the second argument of fmap/<$> is expected to be `f a`, which also leads to f being expected to be a function type.
14:41:16 <dolio> Anyhow, `fmap y . x` is the desired composition.
14:44:40 <ixlun> Aha, that works. thanks@
15:24:40 <cr0ssw1nd> f :: (Monad m) => m [SomeType]
15:24:44 <cr0ssw1nd> f = ... g ...
15:24:47 <cr0ssw1nd>   where
15:25:00 <cr0ssw1nd>     g :: AnotherType -> m SomeType
15:25:29 <cr0ssw1nd> how to make `g` use the same type variable `m` as in `f`? instead of new `m1`
15:27:00 <monochrom> One way is you don't give g a type signature at all.
15:27:14 <monochrom> But if it's important to give g a type signature:
15:27:26 <monochrom> Step 1: Turn on ScopedTypeVariables
15:27:54 <monochrom> Step 2: f :: forall m . (Monad m) => m [SomeType]
15:31:18 <cr0ssw1nd> monochrom, awesome
15:31:43 <cr0ssw1nd> now I recalled that I read about step 1
15:32:02 <cr0ssw1nd> but didn't know that forall also does this
15:32:28 <cr0ssw1nd> I need the type annotation mostly from educational reasons though
15:39:27 <sshine> cr0ssw1nd, it's the combination of ScopedTypeVariables and explicitl forall that makes it work.
15:40:49 <sshine> so 'Monad m => m [SomeType]' becomes '(forall m. Monad m => m [SomeType])' without ScopedTypeVariables, and with, the parenthesis extends to the 'where' declarations.
15:40:50 <cr0ssw1nd> sshine, but I actually didn't specify ScopedTypeVariables now
15:40:59 <sshine> cr0ssw1nd, oh.
15:41:07 <cr0ssw1nd> although it probably could be taken from project config
15:41:25 <cr0ssw1nd> (parent one)
15:41:51 <cr0ssw1nd> your explanation makes sense actually
15:48:49 * hackage shake-futhark 0.2.0.0 - Dependency tracking for Futhark  https://hackage.haskell.org/package/shake-futhark-0.2.0.0 (vmchale)
15:59:18 * hackage implicit-hie-cradle 0.2.0.1 - Auto generate hie-bios cradles  https://hackage.haskell.org/package/implicit-hie-cradle-0.2.0.1 (Avi_Dessauer)
16:22:57 <aljce> does anyone know of a good text escaping function i can use?
16:23:03 <aljce> like escape :: Text -> Text
16:25:27 <sm[m]> what should it do ?
16:25:48 <aljce> "\n" -> "\\n"
16:28:58 <sm[m]> here are some https://hoogle.haskell.org/?hoogle=quoteIfNeeded&scope=set%3Astackage&= like that
16:29:24 <hpc> that still leaves a lot open to interpretation - how should it handle quotes? does it matter that it's \\n and not \0x20? what other non-printable characters need to be escaped?
16:29:34 <sm[m]> click Source to see code you can copy
16:31:44 <sm[m]> looking again, it's not quite what you asked. How about just "show" ?
16:37:17 <sm[m]> T.pack . show  I guess
16:37:31 <hpc> show adds quotation marks around whatever you're escaping
16:37:49 <hpc> which may or may not be a problem
16:39:51 <sm[m]> true
17:17:31 <koz_> Is there some kind of 'how to haskell in nix gud for nix noobs' guide/writeup/scroll of knowledge I can read?
17:21:37 <cr0ssw1nd> good night
17:32:24 <z0> i just found out something neat
17:33:33 <z0> i can paginate hoogle output inside ghci by adding ' :def hoogle \x -> return $ ":!hoogle --count=99 \"" ++ x ++ "\" | less"' to ~/.ghci
17:35:10 <z0> it's great with 'hoogle --info' aswell
17:35:16 <z0> i'm happy
17:36:00 <z0> and less works as supposed, regex search and all
17:39:45 <z0> come to think of it, its obvious it would
17:45:14 <sm[m]> koz_: maybe https://www.reddit.com/r/haskell/comments/hbyaa9/zurihac_haskellnix_tutorial_overhaul/ has clues
17:52:36 <newhoggy> Has anyone noticed that `socketPair` function is missing in `network-3.1.2.0` `Network.Socket` for Windows?
17:54:46 <koz_> sm[m]: Looks good, will read.
17:58:01 <sm[m]> what's a general way to convert Int to CInt ?
17:59:39 <sm[m]> ah, fromIntegral
17:59:47 <sm[m]> I was holding it wrong
18:02:14 <newhoggy> `socketPair` definitely exists in `network-3.1.1.1` `Network.Socket` for Windows.
18:05:30 <newhoggy> https://github.com/haskell/network/issues/484
18:56:34 <sepi> https://dpaste.org/M4Te what can I do to not lose my first integer?
18:56:47 <sepi> or first on list
19:01:23 <glguy> sepi: sortl [x] = [x]; sortl [] = []
19:04:34 <sepi> wow I should take a break
19:04:49 <sepi> thanks 
19:06:19 <dolio> Your non-base case isn't right, either.
19:09:05 <dolio> I don't think it will really sort.
19:14:23 <sepi> is it because once I get the first x thats smaller than y, I'm just sending it out without checking it with the others?
19:15:18 <dolio> Yes, but the other case is just throwing one of them away, too.
19:19:03 <sepi> okay what it seems to be saying if y is greater than x then y becomes x, but if its not greater, its getting overlooked and thrown out for the recursion
19:19:19 <sepi> Should I just take a different approach overall
19:23:59 <dolio> Maybe. I'm not sure what approach you were planning on exactly.
19:42:53 <sepi> is there a skip function?
19:43:19 * hackage hoauth2 1.15.0 - Haskell OAuth2 authentication client  https://hackage.haskell.org/package/hoauth2-1.15.0 (HaishengWu)
19:43:30 <sepi> I'm thinking of doing a case compare of and skipping if two elements are equal
20:15:49 * hackage language-dickinson 1.3.0.4 - A language for generative literature  https://hackage.haskell.org/package/language-dickinson-1.3.0.4 (vmchale)
20:18:49 * hackage yesod-core 1.6.18.4 - Creation of type-safe, RESTful web applications.  https://hackage.haskell.org/package/yesod-core-1.6.18.4 (MichaelSnoyman)
20:44:19 * hackage derive-topdown 0.0.2.1 - Help Haskellers derive class instances for composited data types.  https://hackage.haskell.org/package/derive-topdown-0.0.2.1 (songzh)
21:08:56 <bitmapper>     Ambiguous module name ‘Numeric.IEEE’:
21:08:56 <bitmapper>       it was found in multiple packages: ieee754-0.8.0 ieee754-0.8.0
21:08:56 <bitmapper> what
21:09:46 <chetak_> hello
21:20:23 <bitmapper> oh i figured it out
22:06:51 <siraben> haskell-language-server uses 1.0 GB?
22:06:56 <siraben> Of ram
22:08:22 <koz_> siraben: Wouldn't surprise me.
22:08:38 <siraben> koz_: that's pretty excessive, what's causing it?
22:09:10 <koz_> siraben: I guess you'd need to ask the implementers, but it's not the first time I've heard of outrageous memory use from that.
22:09:25 <siraben> Ugh, well.
22:09:33 <siraben> At least I have docs and types on hover, I guess.
22:09:57 <siraben> It's amazing work but I'd like the mem usage to be lower
22:15:56 <siraben> edwardk: how do I work under a binder in bound?
22:16:07 <siraben> Do I just use fmap?
22:17:39 <siraben> http://ix.io/2yt3
22:18:08 <siraben> b is (Scope () Exp a)
22:18:11 <siraben> is of type*
22:40:19 * hackage stm-actor 0.2.1.0 - A simplistic actor model based on STM  https://hackage.haskell.org/package/stm-actor-0.2.1.0 (sgschlesinger)
22:48:42 <siraben> koz_:  seems to be 700+ MB for every haskell project that is opened
23:06:58 <kenran> Can cabal-install in some way output me the path where it puts the stuff it builds? I need to know the path to the binary created by `cabal build exe:my-package`.
23:09:16 <kenran> Right now I use `cabal install --installdir=something --install-method=copy, but it takes ages because I need to do it for 6 packages. It seems like it starts all over again for every single package when all I need is just to copy the binaries built by `cabal build all` to a certain location.
23:09:37 <kenran> Since we use different OS's, I can't really hard-code the paths into the `dist-newstyle` directory.
23:09:58 <phadej> kenran: cabal-install-3.4 has `cabal list-bin` command
23:17:51 <kenran> phadej: what really? dang, I'm on 3.2 with the whole project still. Maybe it's time to try moving to a newer nixpkgs revision after all...
23:32:58 <phadej> 3.4 is not yet released, there is prebuilt binaries though
