00:06:51 <dibblego> @type foldr1 (.)
00:06:53 <lambdabot> Foldable t => t (a -> a) -> a -> a
00:07:03 <dibblego> @type head
00:07:05 <lambdabot> [a] -> a
00:07:15 <dibblego> ([a] -> a) will not unify with (a -> a)
00:16:21 <Phyx-> docker containers ls
00:16:28 <Phyx-> ...
01:29:54 * hackage safe-access 0.3.3.1 - A simple environment to control access to data  https://hackage.haskell.org/package/safe-access-0.3.3.1 (thoferon)
01:37:27 <thyr15t0r> Hello!!!!!!!!
01:37:44 <thyr15t0r> What the difference between import Data.Map as M and import qualified Data.Map as M?
01:38:12 <Rembane> thyr15t0r: Without the qualified all the things from Data.Map will be imported into your local namespace. 
01:38:23 <Rembane> thyr15t0r: But you  can also access them from M.stuff...
01:39:35 <thyr15t0r> Thank you!!!!!!!!!!
01:40:39 <Rembane> No worries.
01:43:54 * hackage twee-lib 2.2 - An equational theorem prover  https://hackage.haskell.org/package/twee-lib-2.2 (NickSmallbone)
01:44:54 * hackage twee 2.2 - An equational theorem prover  https://hackage.haskell.org/package/twee-2.2 (NickSmallbone)
01:57:54 * hackage haskus-utils 1.5 - Haskus utility modules  https://hackage.haskell.org/package/haskus-utils-1.5 (SylvainHenry)
02:00:56 <idnar> I want a container that keeps the last n values inserted (n = 100 or so, my values are Text) with fast contents testing; is Data.Sequence appropriate?
02:01:56 <Rembane> idnar: A wrapper datatype and a Vector is the fastest afaik
02:02:15 <fendor> is there some exact-print for th Exp? When using the pretty-printer shipped with th, it introduces lots of newlines
02:04:18 <idnar> I tried https://hackage.haskell.org/package/ring-buffer but segfaults scared me away
02:04:51 <phadej> fendor: no, the TH's Exp doesn't have any source position annotations, so you cannot really do exact-print; formatting information is lost
02:05:48 <fendor> phadej, could I then somehow remove all these newlines? I would prefer a single line
02:06:38 <maerwald> How do you filter with a fold. I'm trying: toListOf (at x % _Just % folding (filter (\x -> True))) x
02:06:44 <maerwald> But that doesn't work
02:07:12 <phadej> fendor: maybe using https://hackage.haskell.org/package/template-haskell-2.15.0.0/docs/Language-Haskell-TH-PprLib.html#v:to_HPJ_Doc and rendering to infinitely wide will make rendering single line
02:07:27 <phadej> fendor: yet, IIRC e.g. `case` is rendered used layout, so it won't be single line then
02:07:34 <Taneb> :t filtered -- maerwald
02:07:36 <lambdabot> (Choice p, Applicative f) => (a -> Bool) -> Optic' p f a a
02:08:34 <maerwald> Taneb: that still gives a type error because of the at at the front 
02:08:50 <fendor> phadej, thank you! Will probably avoid hacks and try to embrace the newlines
02:10:15 <Taneb> maerwald: hmm, using x as both the index and the source feels a bit weird to me
02:10:54 <maerwald> Also, filtered is affine fold
02:10:55 <Taneb> In any case, I think at x . _Just ~ ix x
02:11:08 <maerwald> Those are different xes lol
02:11:10 <maerwald> Sorry 
02:12:19 <maerwald> It kinda works with preview, but not sure it does the right thing, I'll see
02:12:30 <Taneb> Yeah, you compose  filtered with another fold
02:12:42 <Taneb> Like, for example, folded
02:12:43 <phadej> at x % _Just % folded % filtered .. 
02:12:56 <phadej> hard to say whether that folded belongs there or not
02:12:59 <phadej> (cool, optics!)
02:13:09 <Taneb> (where does this % composition operator come from? I'm not familiar with it)
02:13:15 <phadej> Taneb: @package optics
02:13:23 <Taneb> Ah! I was assuming lens
02:13:37 <Rembane> idnar: data RingBuffer = Ringbuffer Int (Vector Text) -- and then put that in the module where you only export the type, and then you need some functions to do the book keeping.
02:14:22 <phadej> Taneb: combinator names are mostly the same. (shameless plug: https://oleg.fi/gists/posts/2020-01-25-case-study-migration-from-lens-to-optics.html)
02:16:07 <maerwald> preview (at i % _Just % filtered (..) % to Map.keys) inputMap
02:16:10 <maerwald> Seems to work
02:16:38 <phadej> ix i = at i % _Just
02:17:05 <maerwald> I don't really get why this works witg affine fold :>
02:17:10 <maerwald> Oh
02:17:19 <phadej> why wouldn't it?
02:17:27 <phadej> (work with affine fold)
02:17:38 <maerwald> Doc says affine fold contains at most one element 
02:18:01 <Taneb> Composition of a Fold and an Affine Fold is a Fold
02:18:12 <phadej> as result you get Maybe [keyType] don't you?
02:18:13 <Taneb> It contains at most one element, for each element of the first fold
02:18:16 <maerwald> Yeah
02:18:24 <maerwald> I see
02:18:41 <phadej> if you want [keyType] then you'd do toListOf (... % to Map.keys % folded) inputMap
02:19:44 <maerwald> Fascinating 
02:19:49 <phadej> Taneb: there's no Folds in `preview (at i % _Just % filtered (..) % to Map.keys) inputMap`
02:20:06 <Taneb> phadej: ah, so you're right
02:20:13 <phadej> Taneb: (it's also clear by the fact that optics preview doesn't work with Folds, it doesn't degrade to "firstOf")
02:21:02 <phadej> i.e. preview and firstOf (actualy headOf) have different types
02:34:31 <maerwald> Taneb: hmm, the filtered receives the entire map, not the elements
02:34:54 <maerwald> But I want to filter the map based on a predicate
02:34:54 <Taneb> maerwald: you have a map of maps?
02:35:07 <maerwald> Yeah
02:35:41 <Taneb> What do you actually want to compute?
02:36:26 <maerwald> I have a map of maps and I want to filter the inner map based on a record of the values
02:36:58 <maerwald> And return that filtered inner map
02:38:11 <jsomedon> could somebody help me to understand this code example from Conal's FRP paper? I wrote down the code and commented my questions there as well https://gist.github.com/jsomedon/48a7c088761452efc35bd3d459936bdf 
03:13:54 * hackage haskoin-store 0.20.0 - Storage and index for Bitcoin and Bitcoin Cash  https://hackage.haskell.org/package/haskoin-store-0.20.0 (jprupp)
03:23:02 <zceejkr> Hello, I have a question: I have a function of this type: Monoid m => IO (), and I want to use the type variable m in my function for type application (I have also enabled AllowAmbigousTypes). But just naively using @m fails. What must I do to achieve this?
03:25:40 <zceejkr> isMonoid :: Monoid m => IO ()
03:25:40 <zceejkr> isMonoid = do
03:25:40 <zceejkr>   quickCheck $ monoidIsAssociative @m
03:25:40 <zceejkr>   quickCheck $ monoidHasIdentity @m
03:25:50 <zceejkr> This is basically what I want to do.
03:26:07 <zceejkr> So that I can write isMonoid @Int for example
03:27:26 <[exa]> zceejkr: pass it through in a Proxy?
03:28:57 <Maxdamantus> not really familiar with the `@` syntax, but presumably you'll need `forall m.` at the beginning of that type signature.
03:29:44 <Maxdamantus> (at least, that's how visibility works with -XScopedTypeVariables)
03:31:20 <zceejkr> [exa] and Maxdamantus thanks  
03:38:42 <boxscape> Maxdamantus zceejkr you don't need forall m. with -XTypeApplications, the only thing that's necessary is that it has an explicit type signature
03:39:23 <zceejkr> boxscape: what does explicit mean in this context?
03:39:51 <boxscape> zceejkr I suppose I don't really mean anything by it. "They need a type signature" would have sufficed.
03:40:21 <boxscape> s/they need/it needs
03:40:46 <boxscape> oh but wait
03:40:56 <kuribas> does anyone have flycheck working with hie on emacs?
03:41:40 <boxscape> zceejkr I thought we were talking about the type signature of monoidHasAssociative - which doesn't need the forall. To access the m inside of isMonoid, the type signature of isMonoid does need a forall
03:41:48 <boxscape> so, sorry, you were right Maxdamantus
03:42:05 <zceejkr> This ended up working:
03:42:07 <zceejkr> isMonoid :: forall m. (Monoid m, Eq m, Arbitrary m, Show m) => IO ()
03:42:07 <zceejkr> isMonoid = do
03:42:07 <zceejkr>   quickCheck $ monoidIsAssociative @m
03:42:10 <zceejkr>   quickCheck $ monoidHasIdentity @m
03:42:17 <zceejkr> I had to enable:
03:42:42 <zceejkr> RankNTypes, TypeApplications, AllowAmbigousTypes and ScopedTypeVAriables
03:43:02 <zceejkr> Now I can do isMonoid @Int :D
03:43:08 <boxscape> nice
03:43:10 <Maxdamantus> I'm guessing `AllowAmbiguousTypes` isn't actually useful there, though dunno.
03:43:38 <boxscape> Maxdamantus you need it because the m isn't referenced anywhere visibly in the type signature of isMonoid, I would think
03:44:03 <zceejkr> yes, I tried removing it just now and I got an error
03:44:09 <Maxdamantus> boxscape: ah right.
03:45:36 <boxscape> eventually we'll hopefully be able to write `isMonoid :: forall m -> (...) => IO (); isMonoid m = do quickCheck $ monoidIsAssociative m; ...` - once we have https://github.com/ghc-proposals/ghc-proposals/pull/281
03:45:43 <Maxdamantus> hm, ghci seems to let me use similar type signatures without it.
03:46:22 <Maxdamantus> er, nvm
03:47:00 <Maxdamantus> turns out it becomes relevant with the constraint, not with the declaration ("forall")
03:47:38 <boxscape> interesting
03:50:23 <boxscape> hm it looks like GHC.Types.Any is applied if there's a forall like that and you call the function, at least in ghci
03:50:50 <boxscape> (i.e. if you call the function without specifying what the forall-quantified variable should be)
03:53:16 <boxscape> (and outside of ghci as well)
03:53:26 <mniip> ghci will default monomorphic bindings
03:53:36 <mniip> if there are constraints it will use default, if not it will use Any
03:54:29 <mniip> % x <- return []
03:54:30 <yahb> mniip: 
03:54:31 <mniip> % :t x
03:54:32 <yahb> mniip: [GHC.Exts.Any]
03:55:50 <blackandblue> I was hating on mint
03:56:02 <blackandblue> but then I switched to xfce on mint and everything is so damn smooth
03:56:12 <blackandblue> cinnamon is sluggish I guess
03:56:32 <__monty__> blackandblue: Please take that to -offtopic.
03:59:51 <boxscape> mniip ghc will do the same, apparently
04:00:36 <boxscape> i.e. `f :: forall a . Char; f = 'c'; a = f` will result in `a = f @ GHC.Types.Any` in core
04:01:14 <boxscape> % default (GHC.Types.Any)
04:01:15 <yahb> boxscape: ; <interactive>:25:1: error:; * The default type `GHC.Exts.Any' is not an instance of `Num' or `Show' or `Eq' or `Ord' or `Foldable' or `Traversable'; * When checking the types in a default declaration
04:01:26 <boxscape> hmm I get a more interesting error message there
04:01:34 <boxscape> "The type family ‘GHC.Types.Any’ should have no arguments, but has been given none"
04:01:45 <boxscape> very helpful
04:03:35 <boxscape> but it's fixed in HEAD so no worries
04:28:24 * hackage cabal-debian 5.0.1 - Create a Debianization for a Cabal package  https://hackage.haskell.org/package/cabal-debian-5.0.1 (ClintAdams)
04:28:47 <shafox> Anyone has a haskell environment setup via nix I can steal from ? I am looking for emacs, stack/cabal, hie/ghcide. I am on archlinux. Might just need these setup rather than NixOS config. 
04:29:33 <blackandblue> do you guys use ghc from apt ?
04:31:41 <Clint> blackandblue: i sure do
04:31:58 <blackandblue> ghc-static?
04:32:16 <Clint> no, i use debian
04:38:57 <blackandblue> stable?
04:46:28 <Oblomov2020> lyxia I have a question on Generic.Data.Surgery (very nice library btw, as always). If I write something like `convert p = fromOR' $ insertRField' @"pk" @0 @Int 3 $ toOR p` the result will have type `Data LARGETYPE a`. Is there a way to calculate the type LARGETYPE at the type level, so I can actually talk about it? Like `type LargeType =
04:46:28 <Oblomov2020> SomeTypeLevelComputation ...`?
04:47:45 <dmj`> blackandblue: I'd never use ghc from your package manager unless its nix
04:47:57 <dmj`> blackandblue: heard its gotten better though, the situation
04:48:45 <blackandblue> dmj`, what'd you use
04:48:51 <blackandblue> dmj`, are you on debian as well?
04:49:06 <dmj`> blackandblue: I'm on OSX and NixOS, and .. windows 10 now
04:49:28 <blackandblue> how you installing hackage
04:49:30 <blackandblue> haskell
04:49:34 <dminuoso> Mmm, how does one upload packages to a custom hackage, when your cabal config has both hackage.haskell.org and hackage.private repositories?
04:50:00 <dmj`> blackandblue: I usually just use it from a shell environment
04:50:18 <dmj`> blackandblue: nix-shell -p ghc 
04:50:29 <blackandblue> nixOS is in vm?
04:50:37 <dmj`> blackandblue: bare metal, always
04:50:46 <dmj`> unless its for testing stuff
04:50:48 <blackandblue> so dual booting w windows?
04:50:51 <dmj`> blackandblue: yea
04:50:58 <dmj`> and OSX
04:51:03 <dmj`> tri-winning
04:51:11 <blackandblue> in macbook?
04:51:14 <dmj`> blackandblue: yea
04:51:23 * hackage tasty-golden 2.3.3 - Golden tests support for tasty  https://hackage.haskell.org/package/tasty-golden-2.3.3 (RomanCheplyaka)
04:51:29 <blackandblue> macbooks max out at 512 ssd
04:51:33 <blackandblue> how you can afford 3 OSes
04:51:33 <dmj`> blackandblue: but I have another nixos machine though
04:51:55 <dmj`> blackandblue: back in my day 512GB was a lot
04:52:06 <dmj`> blackandblue: windows was on there just to update some keyboard firmware
04:52:09 <blackandblue> which model are you rocking
04:52:24 <blackandblue> hmm you need windows for macbooks firmware? strange.
04:52:24 <dmj`> blackandblue: MBP 15" 2018 
04:52:39 <dmj`> blackandblue: yea, it was this chinese ergo keyboard I bought
04:52:57 <blackandblue> so you mostly work in macOS right
04:53:45 <dmj`> blackandblue: right now yea, but SSH into another machine to do nixos stuff
04:54:09 <dmj`> blackandblue: OSX is the best desktop experience hands down, not using a retina screen is a health hazard imo
04:54:18 <dmj`> blackandblue: then just ssh into nixos glory
04:54:32 <blackandblue> I was planning to save up cash for macbook
04:54:35 <blackandblue> just for macOS
04:54:51 <int-e> dminuoso: Fun one. You could make a cabal-private alias  for  cabal --config-file=$HOME/.cabal/config-private  that only lists the private repo, maybe?
04:54:59 <dmj`> blackandblue: I mean, if you can get away with a thinkpad, or a lenovo, and just put gnome3 on it with nixos, you'd probably be set. 
04:55:10 <blackandblue> really?
04:55:21 <blackandblue> but you just said OS X has the best desktop experience
04:55:24 <dmj`> blackandblue: yea totally, steam, netflix, emacs, what more do you need
04:55:33 <blackandblue> MS Office :P
04:55:45 <dminuoso> int-e: Mmm, ah I suppose that's not a terrible idea.
04:55:46 <blackandblue> steam... wont be so useful on linux :P
04:55:51 <dmj`> blackandblue: its true, it is the best, but used a gnome3 setup at work and it was good enough
04:55:53 <hpc> steam's great on linux
04:56:03 <dmj`> blackandblue: open office ?
04:56:09 <dmj`> blackandblue: why not just use google docs? 
04:56:10 <blackandblue> it ruins the formatting
04:56:19 <blackandblue> ms excel features are missing from google docs
04:56:33 <dmj`> blackandblue: the billions Microsoft has made solely because other word processors cannot handle margins properly ... *face palm*
04:56:51 <blackandblue> sad but true ^
04:56:54 <dmj`> blackandblue: so, maybe it's time for a new job then, if you're forced to use microsoft office.
04:57:03 <int-e> dmj`: Would those be profit margins?
04:57:10 <blackandblue> I wish getting job was as easy as you are saying dmj` ^ :D
04:57:19 <dmj`> int-e: oh man, that was incredible.
04:57:27 <dmj`> int-e: how do we get lambda bot to save that on
04:57:31 <dmj`> *one
04:57:48 <int-e> @help remember
04:57:48 <lambdabot> remember <nick> <quote>: Remember that <nick> said <quote>.
04:57:59 <dmj`> blackandblue: there's lot of websites to help you get a job these days, like vettery.com and angel list
04:58:09 <blackandblue> dmj`, so now I am confused.. thinkpad or macbook hehe
04:58:20 <blackandblue> dmj`, I am not in US
04:58:33 <dminuoso> int-e: Im just a bit surprised that this is not covered. Surely Im not the only one with a private hackage repository. :)
04:58:38 <dmj`> blackandblue: up to your budget, can't go wrong. The MBP keyboard is pretty much trash, your fingers will hate you
04:58:51 <dminuoso> But perhaps all the folks using internal hackages maintain full mirrors..
04:59:10 <blackandblue> macOS.. Thats the thing I will be missing if I go for linux/thinkpad combo
04:59:15 <int-e> dminuoso: Yes, I was surprised, too. Still, the alias may alleviate the problem enough to keep moving :)
04:59:27 <dmj`> int-e: how do we quote this... 
04:59:29 <dminuoso> int-e: Absolutely, thank you for that! Hadn't thought of it. So simple :)
04:59:36 <dmj`> I said something, then you said something
04:59:41 <blackandblue> dmj`, I am not from US. so those websites wont help me get a job
04:59:42 <blackandblue> lol
04:59:55 <dmj`> blackandblue: the internet is a powerful and useful tool these days
05:00:06 <blackandblue> only if you are from US
05:00:21 <dmj`> blackandblue: you can still VPN it from China and North Korea I here
05:00:23 <blackandblue> you mean remote working? its so rare to find those jobs
05:00:25 <dmj`> hear*
05:00:52 <dmj`> blackandblue: its 2020, the future, and only 2% of people can code, it's so bad that companies will let you work from home.
05:01:22 <blackandblue> are you for serious?
05:01:26 <dmj`> @remember int-e "Would those be profit margins?"
05:01:26 <lambdabot> It is stored.
05:01:41 <dmj`> int-e: when lambdabot recalls it, we'll get it, it will be our inside joke, of sorts.
05:01:49 <dmj`> blackandblue: I'm pretty serious
05:01:50 <blackandblue> only 2 % can code? how you can say that
05:02:08 <blackandblue> I see millions of freelancers coding in upwork and freelancer.com for dirt cheap
05:02:13 <blackandblue> too difficult to compete
05:02:24 <dmj`> @google what percentage of humanity can code
05:02:25 <lambdabot> http://www.google.com/url?q=https://www.quora.com/How-many-people-on-earth-know-computer-programming
05:02:26 <lambdabot> Title: Уведомление о переадресации
05:02:44 <dmj`> Search Results
05:02:45 <dmj`> Featured snippet from the web
05:02:45 <dmj`> Only 0.5% of the world's population knows how to code.
05:02:51 <dmj`> blackandblue: it's worse than previous thought
05:02:59 <hpc> that entire exchange with lambdabot makes no sense
05:03:14 <dmj`> hpc: a pachemoo nyet? 
05:03:27 <dmj`> hpc: ti nye znayesh po-russkiy?
05:03:30 <blackandblue> dmj`, then how come there are so many coders in freelancing websites
05:03:35 <int-e> I don't know why Google thinks that lambdabot speaks russian.
05:03:57 <int-e> dmj`: I barely know enough to understand that.
05:04:07 <Uniaika> sometimes, google previews twitter results from the Finnish interface
05:04:11 <hpc> dmj`: teriyaki baguette :P
05:04:16 <hpc> why did it return a google url going directly to another url as well
05:04:22 <boxscape> blackandblue 7 billion * 0.5% = 35 million
05:04:23 <Rembane> Maybe it thinks all bots speak russian.
05:04:25 <dmj`> blackandblue: these days, son, the world is quite large, and it's only getting larger (from a population perspective). While freelancing websites seem to make up a majority of the world's population they in fact account for 0.00001% of it
05:04:35 <dmj`> hpc: hahaha
05:04:47 <dmj`> I think lambdabot needs to be audited
05:04:52 <int-e> hpc: Because Google did not use to have that redirect for the noscript version.
05:04:56 <blackandblue> dmj`, wow.. so you believe there is potential earning from coding?
05:05:11 <dmj`> blackandblue: it's a viable economic proposition
05:05:16 <blackandblue> esp if you are outside booming economy country (US)
05:05:27 <int-e> hpc: And now they do and nobody updated it. (My fault, mostly.)
05:05:33 <dmj`> blackandblue: global economy is booming too, I hear good things about southeast asia and south africa
05:05:45 <blackandblue> meh
05:05:54 <blackandblue> in tech, US economy trumps them all
05:06:33 <dmj`> blackandblue: where are you locatd
05:06:57 <dmj`> blackandblue: lots of US companies hire off shore, no reason you couldn't be in that
05:08:48 <blackandblue> dmj`, in Asia
05:09:00 <blackandblue> dmj`, 3rd world country.. I wanna work remotely
05:09:03 <blackandblue> tried, fail.
05:09:06 <blackandblue> failed*
05:09:48 <dmj`> blackandblue: I'd keep trying
05:09:58 <dmj`> blackandblue: failure is good
05:10:26 <blackandblue> dmj`, haskell jobs are very few btw
05:10:27 <blackandblue> :D
05:10:45 <blackandblue> need to learn php to enter job market
05:10:46 <blackandblue> I guess
05:11:11 <blackandblue> https://remoteok.io/remote-haskell-jobs
05:11:20 <blackandblue> last job was 10 m/o ago
05:11:21 <blackandblue> :D
05:11:33 <dmj`> blackandblue: people make lots of money with just javascript these days. I'd try out typescript. 
05:11:49 <blackandblue> what do you do for a living dmj` 
05:12:02 <dmj`> I write code
05:12:09 <mniip> the main problem with haskell jobs is that functional programming is a narrow niche
05:12:15 <mniip> and it is only needed when it is needed
05:12:16 <blackandblue> dmj`, which code
05:12:38 <mniip> per se, when people look for haskell programmers they expect people who can write production grade code already
05:12:54 <lyxia> Oblomov2020: yes it's possible, but currently only through the internals
05:13:04 <mniip> as opposed to say the java or whatever world where a large corp can hire thousands of juniors
05:13:17 <Oblomov2020> lyxia thanks, do you have some function that I should look at?
05:13:32 <blackandblue> dmj`, Javascript?
05:13:48 <dmj`> blackandblue: bash, haskell, nix, sql, javascript, python, C, go, rust, F#, C++, etc. whatever the job calls for
05:13:53 <blackandblue> wow
05:13:58 <blackandblue> freelancing?
05:14:33 <mniip> I have a haskell job, AmA
05:14:35 <dmj`> mniip: yea, I've found people reject haskell because companies 1) fear of not hiring, 2) bus factor
05:14:41 <dmj`> blackandblue: some yea
05:14:47 <blackandblue> mniip, lucky
05:14:49 <dmj`> blackandblue: ask mniip about Haskell
05:14:51 <Rembane> mniip: Do you work on a bank? 
05:14:53 <Oblomov2020> lyxia: also, what's the second parameter of `Data`? Can it always be `()`? What is it used for?
05:14:54 <mniip> no
05:15:04 <mniip> I do work with money though
05:15:08 <blackandblue> haskell is hobbyist language
05:15:11 <Rembane> mniip: What do you build using Haskell? 
05:15:17 <quicksilver> haskell jobs are few but not zero
05:15:18 <quicksilver> https://functional.works-hub.com/haskell-jobs-in-london?ads_cmpid=1077215416&ads_adid=52144548665&ads_matchtype=b&ads_network=g&ads_creative=255010391655&utm_term=london%20haskell%20jobs&ads_targetid=kwd-677518341962&utm_campaign=&utm_source=adwords&utm_medium=ppc&ttv=2&gclid=EAIaIQobChMI-fvq4tzi5wIVC7DtCh3P7AJ-EAAYAyAAEgJQPfD_BwE
05:15:18 <Rembane> mniip: ...on your job
05:15:20 <day> i cant imagine you would even be able to find many haskell programmers in my region :|
05:15:21 <mniip> business systems in the travel industry
05:15:23 <dmj`> blackandblue: sometimes, if nobody will give you a Haskell job, you should just create your own company using haskell in your free time. It's good experience.
05:15:24 <quicksilver> yuck horrible URL
05:15:39 <Rembane> mniip: That sounds fun. 
05:15:43 <mniip> it's not
05:15:44 <blackandblue> dmj`, hehe I dont have bucks to create my own startup
05:15:45 <mniip> ;)
05:15:54 <dmj`> I'd rather be stuck with a haskell codebase looking to hire, than stuck with a rails app that nobody wants to touch.
05:16:00 <dmj`> blackandblue: you don't need bucks, you just need time
05:16:08 <mniip> our company moved from rails to haskell
05:16:11 <mniip> but that was before me
05:16:25 <dmj`> mniip: wise
05:16:47 <Rembane> mniip: So the domain is boring af but Haskell is nice? 
05:17:06 <mniip> yeah that's how I would describe it
05:17:08 <dmj`> blackandblue: https://startupbook.net/ this is a good book you should read
05:17:20 <mniip> I'm not enthusiastic about the domain at all
05:17:34 <mniip> but there are interesting soolutions we're employing to solve problems
05:17:49 <lyxia> Oblomov2020: type LargeType = InsertField 0 ('Just "pk") (Rep MyType) Int, you can find it by following the definition of the constraint on insertRField
05:17:51 <mniip> did I tell you the story of how I tainted our code base with comonads
05:18:12 <lyxia> Oblomov2020: in particular look at RFieldSurgery
05:18:16 <blackandblue> dmj`, but really thou there are tons of coders out there. willing to work for half the price you want
05:18:18 <dmj`> blackandblue: just do a little haskell everyday, will be good for you. Like do hackerrank.com with Haskell. Participate in AOC, then start contributing to open source Haskell repos, before you know it, people will be hiring you, if not for Haskell, then to bait and switch you to work on something else.
05:18:22 <blackandblue> competition in coding is tough
05:18:32 <blackandblue> dmj`, will do that! thanks
05:18:40 <lyxia> Oblomov2020: Ah I forgot a bit. type LargeType = Eval (InsertField 0 ('Just "pk") (Rep MyType) Int)
05:18:57 <day> blackandblue: the problem one competes more or less globally :(
05:18:59 <dmj`> blackandblue: yea, but software isn't all about "the cheapest"
05:19:18 <dmj`> blackandblue: people and market value play a huge role too
05:19:29 <blackandblue> day, yea. I dont think only 0.5 % of population are coders :P
05:19:37 <blackandblue> dmj`, like?
05:19:51 <blackandblue> dmj`, there are tons of good experienced developers willing to work for cheap
05:20:08 <blackandblue> making money with coding aint like it used to be in 1990s
05:20:17 <dmj`> blackandblue: EQ is a big part of it, attitude, etc. Some people who own companies want to try and instill a very specific culture as well.
05:20:28 <day> blackandblue: i couldnt solve a few things in AoC, whereas others did it in minutes :P
05:20:56 <blackandblue> day, yea exactly
05:20:57 <dmj`> blackandblue: if you learn web development and make a portfolio you can shop around, you'll get a job, even if its for cheap, then get a good testimonial, some referrals, etc.
05:21:17 <dmj`> blackandblue: lots of code schools out there
05:21:34 <day> blackandblue: isnt one of thoe AoC machines even in this channel?
05:21:42 <Rembane> mniip: Tell the story about how you tainted your codebase with comonads! 
05:21:48 <day> i saw some guy in the top 10 who solved it all in haskell
05:21:50 <mniip> our company exists pretty much just because the software we made marketed itself as a few orders of magnitude more stable than other people's
05:21:55 <mniip> among our contractors
05:22:20 <mniip> Rembane, basically, I wanted to return a list with a certain element selected/highlighted
05:22:37 <mniip> so I thought - that's very ComonadStore-looking
05:22:41 <mniip> so I went searching
05:22:46 <dmj`> day: that's glguy, he moderates #haskell 
05:22:53 <day> yes!
05:23:12 <mniip> and of course the kmettiverse responded with a package: comonad-extras
05:23:14 <mniip> Zipper [a]
05:23:15 <dmj`> day: AoC extraordinaire, lots of people ask glguy if he can autograph their keyboard
05:23:22 <day> haha
05:23:26 <mniip> I was on the leaderboard in AoC once
05:23:29 <mniip> in 2017 I think
05:23:34 <day> im more thinking "why am i even trying"
05:23:35 <mniip> 97th place or so
05:24:16 <edwardk> mniip: hah
05:24:27 <Oblomov2020> lyxia when you say `Eval (InsertField 0 ('Just "pk") (GHC.Genenerics.Rep Person) Int)` that Rep doesn't seem to be well kinded; what's the right one?
05:24:41 <day> and tbf. the top contenders are probably not even the tip of the iceberg. i doubt many bother with staying up all night to be there from the start
05:24:41 <lyxia> Oblomov2020: Yes you can assume x is always (), it makes adding support for Generic1 trivial if the need ever comes up, and otherwise it seems easy enought to ignore.
05:24:47 <mniip> edwardk, you should update your package btw
05:24:54 <mniip> we had to fork and pin a commit
05:24:59 <edwardk> oh?
05:25:15 <mniip> https://github.com/ekmett/comonad-extras/pull/2
05:25:26 <blackandblue> dmj`, you mean participate here? https://adventofcode.com/2019/about
05:25:34 <dmj`> blackandblue: yea
05:25:42 <lyxia> Oblomov2020: Oh, I swapped the last two arguments, (Rep Person) and Int
05:25:46 <edwardk> merged
05:25:49 <dmj`> blackandblue: and hackerrank.com accepts Haskell too
05:26:00 <blackandblue> dmj`, I am planning to start with python
05:26:03 <day> codewars has haskell too
05:26:09 <dmj`> blackandblue: a good choice
05:26:17 <mniip> edwardk, now get in on hackage and stackage
05:26:17 <mniip> :P
05:26:25 <edwardk> working on it =)
05:26:27 <blackandblue> dmj`, thanks. I am reading automating boring stuff with python
05:27:02 <dmj`> blackandblue: yea just keep it fun, that's key. hackerrank problems are fun, and you can start with the easy ones to get your confidence up
05:27:22 <blackandblue> nice. thanks a lot dmj` 
05:27:25 <blackandblue> for the motivation.
05:27:54 <Oblomov2020> lyxia thanks, that works! Is there a way to evaluate the type synonym enough that I can use it in a class instance? Or should I always use a newtype?
05:28:20 <dmj`> blackandblue: np, you too can code with the rest of them. But it's an independent journey. Everybody is chasing money. Chase knowledge and money will chase you.
05:28:28 <edwardk> the dependency bump can be done with a revision i guess, but the only way i get you the warning is an actual bump release. blech
05:28:30 <edwardk> =)
05:28:48 <mniip> the warning is meh
05:28:55 <mniip> less important
05:29:21 <mniip> if it's on hackage it's no longer an in-tree package so our ghc-flags (-Wall -Wextra) don't apply to it
05:29:41 <mniip> er
05:29:44 <mniip> -Wall -Werror
05:30:33 <edwardk> pushed
05:30:54 * hackage comonad-extras 4.0.1 - Exotic comonad transformers  https://hackage.haskell.org/package/comonad-extras-4.0.1 (EdwardKmett)
05:31:46 <dminuoso> How much disk space does a full hackage mirror take roughly?
05:32:34 <Rembane> mniip: Awesome! :D 
05:33:25 <edwardk> dminuoso: well, about 3 years ago davean's skete could get the whole thing down to ~700MB, so you can use that as a floor ;)
05:34:23 * hackage cabal-debian 5.0.2 - Create a Debianization for a Cabal package  https://hackage.haskell.org/package/cabal-debian-5.0.2 (ClintAdams)
05:34:45 <dminuoso> edwardk: Oh really, I didn't expect to be that low. But thanks, then I won't need to find more space for this server. :)
05:34:47 <mniip> edwardk, thanks!
05:35:01 <mniip> this was faster than timezone-olson
05:35:07 <edwardk> dminuoso: skete compressed the everloving crap out of it, so i'd expect the real deal to be several times larger
05:36:03 <Clint> i wonder what the growth rate looks like
05:36:26 <c_wraith> As opposed to that time I had a PR for free outstanding for 18 months? :P
05:36:48 <c_wraith> I'd honestly almost forgotten about it when I got the email from github saying it'd been merged.
05:37:12 <edwardk> c_wraith: i've left people hanging for 8 years before. count yourself lucky. ;)
05:37:27 <mniip> actually nevermind
05:37:50 <mniip> timezone-olson got resolved in 4 months, comonad-extras was 6 months
05:37:51 <mniip> :P
05:37:54 <c_wraith> yeah, I'm worse too.  It took me 3 years to fix a bug in one of my packages - and I didn't even use the patch included in the bug report.
05:38:38 <edwardk> mniip: i'm pretty much unable to get notifications from github, so unless you ping me on irc, nothing gets fixed
05:38:56 <mniip> sad!
05:39:25 <Rembane> IRC > * 
05:39:47 <mniip> bash: *: ambiguous redirect
05:40:04 <edwardk> i was just thinking that that would be a mean thing to do at the command line
05:40:28 <Rembane> mniip: That's a broadcast, right? 
05:40:50 <mniip> no
05:41:04 <mniip> the abstraction of redirects does not allow broadcasting
05:41:09 <mniip> that's why the program `tee` exists
05:41:20 <Rembane> That sounds boring and sane. 
05:41:43 <mniip> if you think about it, bash tokens map 1 to 1 to system calls pretty much
05:42:02 <mniip> > = dup2, | = pipe + fork
05:42:05 <lambdabot>  <hint>:1:1: error:
05:42:05 <lambdabot>      parse error on input ‘=’
05:42:05 <lambdabot>      Perhaps you need a 'let' in a 'do' block?
05:42:12 <mniip> ; = fork + wait
05:42:35 <Rembane> That's beautiful. 
05:43:22 <mniip> I mean old shells were very very simple wrappers around the unix kernel
05:46:07 <day> mniip: arent shells simply acting as a user interface for stdin/stdout/stderr etc.?
05:46:37 <mniip> you'll have to be more specific?
05:46:50 <day> i mean, arent they still "just" wrappers?
05:46:59 <mniip> I think you're mixing up the role of the shell and the role of the terminal emulator
05:47:06 <day> the second they stop being a wrapper they would become their own OS, right?
05:48:12 <day> maybe
05:51:07 <lyxia> Oblomov2020: you can just use a synonym in an instance (with FlexibleInstances), it might also be a good idea to use a newtype anyway, what's your use case?
05:54:51 <nschoe> Hi everyone, just in case, is qtah's maintainer here (just in case)?
05:57:28 <dminuoso> nschoe: They would be named khumba, and they are not in here it seems
05:58:33 <nschoe> dminuoso, oh thanks, I could not remember the name, but it rings a bell now.
05:58:45 <dminuoso> nschoe: http://khumba.net/contact/
05:59:05 <nschoe> Ah yes, thanks.
05:59:18 <nschoe> I'll raise an issue on gitlab then.
05:59:53 <nschoe> Does anyone here have experience with qtah? I'm using it, it works pretty well, but it seems QSettings are not saved. I was wondering if s/o had some experience with this?
06:00:03 <Oblomov2020> lyxia but I have FlexibleInstances, and yet I get `• Illegal type synonym family application in instance: Data PersonWithId ()` when saying `instance SqlRow (Data PersonWithId ())` (a class from `Selda`)
06:01:51 <boxscape> Oblomov2020 is it a type synonym or a type family?
06:02:37 <boxscape> (also just in case make sure -XTypeSynonymInstances is enabled)
06:03:22 <boxscape> (should be implied by FlexibleInstances though, I think)
06:05:37 <boxscape> Oblomov2020 anyway I'm pretty sure that while you *can* use type synonyms in instance heads, you *cannot* use type families
06:05:55 <lyxia> Is PersonWithId a type family? I'm not sure what else could be happening
06:06:35 <Oblomov2020> boxscape lyxia: I have `type PersonWithId = Eval (InsertField 0 ('Just "pk") Int (GHC.Generics.Rep Person))` and would like to say `instance SqlRow (Data PersonWithId ())`
06:06:48 <Oblomov2020> so the problem is indeed that I have a type synonym to a type family
06:07:11 <lyxia> boxscape: oh is that right? that's news to me, I guess I never had to do it
06:07:32 <boxscape> lyxia I haven't seen it documented anywhere but yea, that's been my experience with the cases I've tried
06:07:40 <lyxia> Oblomov2020: A newtype would be more appropriate here anyway
06:07:50 <Oblomov2020> and what I'd like to do, is evaluate PersonWithId enough that I can use its actual value
06:21:07 <petersen> All testsuite using tasty seem to be hanging for me... anyone seen or know anything about this? (roughly lts14)
06:21:10 <Oblomov2020> how would I derive generic for a newtype to be the generic instance of the underlying type
06:21:26 <dminuoso> Oblomov2020: deriving via
06:21:28 <Oblomov2020> can I do that with derivingVia?
06:21:32 <dminuoso> Oblomov2020: Yes.
06:21:33 * petersen checks the issue tracker...
06:21:56 <Oblomov2020> so `deriving via` and I put there the entire sub type? Or can I say `Unwrapped`?
06:22:14 <dminuoso> Although.. I just started to question this.
06:22:40 <dminuoso> Oblomov2020: What is your intention?
06:23:01 <Oblomov2020> I have this newtype:
06:23:02 <Oblomov2020> newtype PersonWithId = PersonWithId (Data (Eval (InsertField 0 ('Just "pk") Int (GHC.Generics.Rep Person))) ())
06:23:37 <Oblomov2020> I want to have the generic instance of the underlying `Data` (I need a newtype because I want this datatype to be part of a class instance)
06:24:02 <Oblomov2020> and `Eval` is a typefamily, so I can't just do that
06:27:01 <nshepperd2> is this just a horribly overcomplicated way of avoiding writing an SqlRow instance manually?
06:28:43 <Oblomov2020> it's an exploration about deriving an SqlRow instance for a generated datatype with a db id, when you only have the base case, while toying with selda (I know how to solve the problem in beam, but selda has some restrictions). Just curiosity ;)
06:30:11 <petersen> petersen: I opened a ticket
06:34:15 <maerwald> It seems tar has a maximum path length. It can't even unpack the official ghc bindist without breaking it
06:36:26 <lyxia> Oblomov2020: deriving newtype Generic   with GeneralizedNewtypeDeriving, DerivingStrategies, UndecidableInstances
06:38:44 <lyxia> Oblomov2020: there is also a type family Old in generic-data, that I just realized I forgot to export so it's only available (but still available) in an internal module
07:22:16 <Darwin226> Say I have a complicated type T parametrized by `f` in which some of the fields are wrapped in `f`. I have a value of type `T MVar`. Is there a way to get `MVar (T Identity)`? Some uniplatey, genericsy, mmorphy thing?
07:23:40 <Cale> Darwin226: I don't think there's anything that automatic... there are a whole bunch of effectful ways to get to such a thing which have fundamentally different interactions with concurrency
07:24:42 <Cale> Darwin226: The two most obvious ways are doing a whole bunch of takeMVars or nested withMVars
07:25:01 <Cale> (along with making a new MVar)
07:25:06 <Darwin226> Cale: Anything for my specific case then? Basically I want to lock everything
07:25:07 <lyxia> there is a traversal using one-liner
07:25:33 <Cale> Darwin226: Do you want to leave values in the MVars you started with, or do you want to consume those values?
07:26:07 <Darwin226> hmm
07:26:12 <Cale> (and empty them all out, to be replaced by other values in the future)
07:26:24 <Cale> MVar often gets used as a one-element channel
07:26:42 <Darwin226> Ok my actual issue is that part of my structure must support locking (hence the MVars), but I'd also like to be able to serialize the whole thing to json
07:26:49 <Darwin226> for that I'm fine with taking all the locks
07:27:06 <Darwin226> but after serialization it would be ideal if I could just unlock everything and proceed as usual
07:27:08 <Cale> But sometimes it's just a locking variable, so yeah, it sounds like you want to take all the MVars, and then make your new MVar, and then put all the MVars back
07:27:44 <Cale> which you can do with a bunch of nested withMVar, for which you might actually be helped by Cont...
07:27:48 <Darwin226> so I guess I don't actually need MVar (T Identity), I'd be fine with just a (T Identity -> r) callback
07:28:25 <Darwin226> I also don't want to do this manually
07:28:36 <Darwin226> but via some derived traversal or something similar
07:28:39 <Cale> Do you have a lot of such types T?
07:28:46 <Darwin226> Just one big one
07:28:53 <Darwin226> Oh, actually
07:28:54 <Darwin226> yes
07:28:56 <Darwin226> a lot of them
07:29:19 <Darwin226> but only because you can't nest anonymous sums and records in haskell
07:29:24 <Cale> (It might be possible to write something in a vaguely applicative style which does the thing, but then that might not be automatic enough for you)
07:29:55 <Cale> Let's actually work that out though, because it'll probably lead to the way of making it more automatic
07:31:04 <Darwin226> `data T1 f = T1 { field1 :: Int, field2 :: f Int, field3 :: T2 f }; data T2 f = T2 { field4 :: f Int, field5 :: Int }`
07:32:39 <Darwin226> and then a function `lock :: t MVar -> (t Identity -> IO r) -> IO r` that does nested `withMVar`s on field2, and field4, and a recursive `lock` on field3
07:38:14 <lyxia> Darwin226: https://dpaste.org/eJVK with one-liner
07:39:05 <remexre> ugh, when I get an error like "Cannot deduce: Foo a0 ~ Foo a [...] Expected type: ... a ..., Actual type: ... a0 ..." what should I be looking for wrt the location of the problem
07:39:18 <Cale> lyxia: Ah, that's a third option for semantics :D
07:39:30 <Cale> (which is just to read all the MVars at separate times)
07:39:46 <Darwin226> lyxia: this is interesting. I'm just looking at gtraverse and I don't get how it works in your case
07:39:52 <Darwin226> since it should return the same type
07:39:56 <Darwin226> and in your case it changes f
07:40:02 <lyxia> Darwin226: it's the other module
07:40:41 <Cale> withMVar' :: MVar a -> ContT r IO a
07:40:41 <Cale> withMVar' r = ContT (withMVar r)
07:40:59 <Cale> You might find this useful, if you want to take all the MVars at once
07:41:28 <Darwin226> mmmhhh this is getting very traversy, I can feel it
07:41:30 <Cale> (perhaps we should fmap Identity over the result there)
07:41:36 <geekosaur> remexre, usually it means you failed to associate two uses of the type a, but sometimes it means you assumed ScopedTypeVariables was active when it wasn't (the latter would involve a type ascription with an 'a')
07:41:45 <Darwin226> lyxia: What do you mean?
07:42:12 <Darwin226> oh, Binary
07:42:14 <remexre> geekosaur: I've got ScopedTypeVariables on, but I'm forall-ing all variables, and the body of the declaration is just 'undefined' right now
07:43:03 <lyxia> does the error say "ambiguity" somewhere
07:43:07 <remexre> yeah
07:43:14 <geekosaur> so it can't be the second case, because that would be explicitly declaring something to involve 'a' but the 'a' followed sandard Haskell and was a fresh type variable instead of the one from the signature
07:43:47 <remexre> there's a lot of TypeFamilies going on too, but I don't *think* that's the issue
07:43:55 <lyxia> remexre: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-AllowAmbiguousTypes
07:43:58 <geekosaur> in this case, 'undefined' may be the problem because it doesn't have enough information to connect something ('undefined' tells it very little and it has to infer everything)
07:44:07 <remexre> ah, that tracks
07:45:31 <Darwin226> Cale lyxia Thanks guys. Putting these two things together is basically the whole solution
07:45:37 <geekosaur> without seeing the actual type signature or how it's used (you already gave us the code :)  ) can't say much more
07:47:02 <remexre> right now it's not being used, I'm gonna try to implement it enough to not have undefined and see if it keeps doing it
07:47:40 <remexre> lyxia: I'm trying to avoid AllowAmbiguousTypes, largely because /I/ know it's not ambiguous :P
07:48:56 <boxscape> remexre does the error message you're getting mention AllowAmbiguousTypes?
07:49:20 <remexre> yes, though I shouldn't need to enable it as far as I can tell
07:50:01 <Cale> Darwin226: here's a thing that works, but it's not quite as automatic perhaps as you'd like https://dpaste.org/ijYK
07:50:24 <Cale> (you can   flip runContT return  the ContT actions to turn them into IO actions)
07:50:55 <Cale> Now it's kind of obvious how to make that code Applicative
07:51:12 <Darwin226> Cale {-# LANGUAGE ApplicativeDo #-} haha
07:51:48 <Cale> haha
07:51:52 <Cale> Or just...
07:52:00 <Cale> zonkT2 t2 = T2 <$> withMVar' (field4 t2) <*> pure (field5 t2)
07:52:05 <Cale> zonkT1 t1 = T1 <$> pure (field1 t1) <*> withMVar' (field2 t1) <*> zonkT2 (field3 t1)
07:52:35 <Darwin226> Yeah
07:52:41 <Darwin226> great
07:52:53 <Darwin226> This + one-liner magic will work perfecly
07:53:42 <Darwin226> maybe...
07:53:52 <Darwin226> recursing might be problematic
07:54:59 <Cale> You might be able to use everywhere
07:55:04 <Cale> instead of gtraverse
07:55:18 <Cale> (or everywhereM...)
08:01:41 <Cale> hmm, but that's not allowed to change the type of the thing we're working on
08:35:24 * hackage static-text 0.2.0.5 - Lists, Texts, ByteStrings and Vectors of statically known length  https://hackage.haskell.org/package/static-text-0.2.0.5 (DmitryDzhus)
08:41:17 <lyxia> remexre: that link also contains a definition of the ambiguity check so you can see for yourself why GHC doesn't like your type.
08:42:39 <remexre> lyxia: the ((undefined :: a0) :: a0)? I'm more confused where the a0 is coming from than what the actual test is
08:43:00 <remexre> it is turning out that writing the body of the declaration is requiring enough machinery that it might need to redesigned anyway, though...
08:49:24 * hackage th-nowq 0.1.0.4 - Template Haskell splice that expands to current time  https://hackage.haskell.org/package/th-nowq-0.1.0.4 (DmitryDzhus)
08:50:24 * hackage th-env 0.1.0.1 - Template Haskell splice that expands to an environment variable  https://hackage.haskell.org/package/th-env-0.1.0.1 (DmitryDzhus)
08:51:25 <geekosaur> remexre, the a0 is an a that ghc can't prove is the same as the other a
08:51:27 <geekosaur> usually
08:51:49 <geekosaur> which means some connection in types missing that would let it so prove
08:52:34 <remexre> yeah, I spent some time trying to work out on a whiteboard all the un-named types involved
08:53:21 <remexre> but they all seem to be derivable from the arguments :|
08:56:54 <lyxia> "derivable from the arguments" is not sufficient, you have to be explicit about how they're derived, because GHC cannot make arbitrary deductions about the semantics of type families.
09:02:49 <remexre> oh, wait, I think I figured it out...
09:03:07 <AWizzArd> If I develop a little framework with 2-3 callbacks and want to offer internal users (in a web app) to try this out, how could I best achieve this? My guess is ghci.
09:03:12 <remexre> yeah, okay; I guess it's API redesign time... or just time to add a Proxy argument :P
09:04:31 <sm[m]> AWizzArd: you want to offer a repl in the web browser ?
09:05:04 <AWizzArd> sm[m]: no, instead a big text field into which 1-3 employees can type some Haskell code, which I want to “insert” into my framework.
09:05:28 <sm[m]> maybe the hint package iirc
09:05:38 <AWizzArd> They write a callback. They get certain data which my framework will pass in. And then they have a set of functions available and can do pure computations.
09:06:15 <geekosaur> maybe MuEval, which does more sandboxing (it wraps hint). it's also what lambdabot uses
09:06:53 <AWizzArd> There is no danger that bad code enters the system.
09:07:00 <AWizzArd> I will look at both of those.
09:07:06 <AWizzArd> Thx for the tips!
09:08:06 <AWizzArd> What do Hint and MuEval offer over ghci?
09:08:20 <AWizzArd> They can get embedded into a ghc-compiled binary?
09:08:37 <AWizzArd> No need to shell-out ghci calls?
09:14:15 <geekosaur> ghci wraps ghc-api. it's painful to work with
09:14:24 <geekosaur> hint is a friendlier wrapper
09:14:34 <AWizzArd> k
09:14:59 <geekosaur> of course if you don't mind doing staringly typed data, you can just shell out to ghci
09:15:06 <geekosaur> *stringly typed
09:21:24 <tty1> I feel like such a noob, I cant even get a hello world haskell project to run :(
09:22:03 <tdammers> echo 'main = putStrLn "Hello, world!"' > hello.hs && runghc hello.hs
09:22:45 <tty1> wwell no thats not the problem
09:22:52 <tty1> its the project build chain itself
09:22:54 <tty1> not the source
09:23:06 <Uniaika> tty1: what do you use to build your project?
09:23:21 <tty1> stack.. but let me explain the issue first
09:23:28 * Uniaika listens
09:25:10 <tty1> basically im trying to get a starter project going (which ill build into a real project) that compiles in a weird way, i can go into detail on this but not relevant. In short, I need to put my *.hs source files in a subdirectory of /src and not in /src directly.. but when i do this my test suite (which calls a hello world function) fails to run as it cant import my module anymore
09:25:49 <tty1> So basically i cant figure out how to get stack to see subdirectories in /src when it compiles.. at least I think thats why i have this problem
09:25:59 <dsal> tty1: You can convince stack to not use a standard layout, but making things harder on yourself will make things harder.
09:26:18 <dsal> You can use subdirectories as modules, e.g.,   src/Whatever/Thing.hs  can be imported as Whatever.Thing
09:26:53 <tty1> dsal: well i dont have an easier choice that I know of. I'm trying to write my code such that it will compile for both ETA and GHC, ETA requires a specific directory structure it seems
09:27:31 <tty1> dsal: in that case maybe its not so non-standard afterall... but let me try that
09:27:41 <Uniaika> would the src/Whatever/{Module1,Module2}.hs work for you?
09:28:05 <dsal> The modules would be Whatever.Module{1,2} in that case, of course.
09:28:15 <tty1> yes it will but it only sort of.. will make things look really ugly on the haskell side should someone want to use my library
09:28:27 <tty1> the specific directory structure is src/main/eta/Whatever.hs
09:28:47 <tty1> so that will force my packages to all be main.eta.Whatever which is kinda ugly
09:29:35 <dsal> eta isn't a valid module name.
09:30:02 <geekosaur> nor is main (lowercase)
09:30:03 <tty1> Then I suppose it wont work like that :(
09:30:20 <geekosaur> sources: src/main/eta
09:30:21 <geekosaur> ?
09:30:28 <tty1> which might also explain my issues trying to get it to work
09:30:29 <geekosaur> in the cabal file
09:31:09 <tty1> how would i do that in stack, i tried something similar in stack but it didnt work
09:31:14 <dsal> In package.yaml, it's source-dirs: 
09:31:31 <dsal> You should have a config already set to 'src'
09:31:55 <zeta_0> geekosaur: i am having problems with vscodium not working, could it be because of xmonad? https://hastebin.com/lomemiyifa.rb
09:32:30 <tty1> hmm
09:32:55 <zeta_0> geekosaur: i installed vscodium with nix, and it built without any errors, so i don't think it has anything do with my issue
09:33:36 <geekosaur> I've run code under xmonad so I don't think the open source version should have issues
09:33:45 <zeta_0> geekosaur: other nix users say vscodium works for them, but my guess is that they are using a desktop environment
09:34:32 <geekosaur> that's the other issue, I'm using xmonad as part of a desktop environment (mate) :)
09:34:46 <geekosaur> possiby EwmhDesktops will help in that case
09:35:24 <geekosaur> although it may also assume things like dconf which xmonad won't help you with; you may want to explore using xmonad with a desktop environment in that case
09:36:34 <tty1> dsa1: Warning: /home/freemo/source/reactive-graphs/stack.yaml: Unrecognized field in ProjectAndConfigMonoid: source-dirs
09:36:53 <geekosaur> project.yaml not stack.yaml
09:37:09 <zeta_0> geekosaur: ok, i removed EwmhDesktops, so i guess i well put it back, to see if it fixes that
09:37:10 <geekosaur> if you don't have a project.yaml then you have a cabal file (somenamehere.cabal)
09:37:17 <dsal> tty1: Look for the one you already have and change it.  You can't just put a thing anywhere.  It's specifically defined.
09:38:49 <geekosaur> zeta_0, I just started up latest vs code and it still runs with no errors. It might be looking for an XDG directory which you might have to create for it
09:41:04 <zeta_0> geekosaur: i had a java issue with idea-community ide not working, which i fixed with: startupHook = setWMName "LG3D", so my guess is that i need to add some other configuration to xmonad.hs to get vscodium to work?
09:41:52 <geekosaur> I doubt it, unless you mean XMonad.Config.Desktop which is little more than EwmhDesktops as a canned config
09:42:03 <geekosaur> but a desktop environment is far more than just EWMH
09:43:12 <geekosaur> dconf manages a key-value store for settings, there's a whole directory structure (the XDG directory stuff I mentioned) managed by the desktop environment, other daemons that manage other parts of the desktop, etc.
09:43:21 <geekosaur> xmonad is only the window manager component of a desktop
09:43:32 <geekosaur> and it's not going to be more than a window manager
09:43:57 <zeta_0> geekosaur: ok, well i'll 1st try out EwmhDesktops in xmonad.hs, if that doesn't work then i'll try something else, how does that sound?
09:44:25 <zeta_0> i am confused and not sure what to troubleshoot 1st
09:46:05 <geekosaur> try creating ~/.config directory for it, first
09:48:02 <zeta_0> geekosaur: there is a VSVodium/ directory in ~/.config, is this what you mean?
09:48:44 <geekosaur> I was wondering about the mkdir error and the equivalent (~/.config/Code) is the only one I can find on here, but that sounds like it made it..
09:49:52 <zeta_0> geekosaur: yes, nix builds/configures everything, that's why i'm guessing xmonad is missing some sort of functionality, i don't know
09:49:58 <geekosaur> I have a tenden cy to haul out the heavy artillery (like strace -f to find out what mkdir command is failing)
09:50:25 <geekosaur> xmonad is not a desktop environment, it's "missing a lot of functionality" that it will never have if you want a desktop environment
09:52:45 <geekosaur> you can use xmonad as *part of* a desktop environment; see the wiki. (not a gnome3 environment though, that's more or less why mate exists)
09:54:02 <zeta_0> geekosaur: i am happy with xmonad by itself, one of the only issues that i've had with it is getting ide's to work
09:54:34 <tty1> dsal: it wasnt already in my stack.yml, that file had only one line. I generated a new one with stack init and that didnt have it either
09:54:54 <zeta_0> geekosaur: should i go to #xmonad to ask these questions? i may be a little to off topic
09:55:18 <geekosaur> that's generally a good idea, but not sure anyon e else would be able to help
09:55:19 <dsal> tty1: 'stack new X' should build a new stack project with a useful template.
09:55:53 <geekosaur> it does sound like it wants desktop components that a window manager doesn't provide, you may have to go with something minimal like lxde to make it happy
09:56:43 <zeta_0> geekosaur: do you think setting up EwmhDesktops in xmonad.hs may fix it?
09:57:08 <tty1> dsal: nope the stack.yml is exactly the same on that new project as with init.. just like the other one there is no "source-dirs"
09:57:23 <geekosaur> I don't know but I didn't trace through startup to see if it tried to contact dconf or dbus or various other desktop services
09:57:51 <dsal> tty1: that's kind of odd.  Do you have an ancient stack or something?  I'm using a custom template, but it was based on the previous default which is quite useful.
09:58:18 <tty1> dsal: doubtful i just installed it today on arch so should be not anctient
10:02:22 <zeta_0> geekosaur: ok well i am going to try EwmhDesktops 1st, i'll be back in a bit
10:03:02 <sm[m]> tty1: there's some confusion about yaml files. The one where you configure source-dirs is package.yaml. You can find this all out from the manual
10:03:38 <tty1> dsal: are you sure it isnt called something else and you arent just confusing it with the name of the similar property in cabal?
10:04:28 <dsal> I just did a 'stack new thing' and when I look at thing/package.yaml, I see:   library:\n  source-dirs: src
10:05:03 <tty1> sm[m]: that wasnt the problem, i just figured it out though
10:05:09 <dsal> Oh, you keep referring to stack.yaml.
10:05:12 <tty1> seems like its working now
10:05:23 <sm[m]> and geekosaur referred to project.yaml :)
10:05:40 <dsal> geekosaur pointed out it was package.yaml and not stack.yaml earlier.
10:05:57 <tty1> ohhh sorry i missed that
10:06:10 <zeta_0> Geekingfrog: do i need to setup ewhm like this? https://hastebin.com/ofeyofomew.rb
10:06:14 <tty1> package.yaml isnt generated at all by stack, but stack.yml is
10:06:25 <sm[m]> I take back my reference to the manual. It would be hard for tty1 to find out where source-dirs is configured from docs.
10:06:30 <dsal> You have a weird template, then.  Must have a project.cabal, then
10:06:58 <sm[m]> stack.yaml isn't generated by stack; package.yaml is
10:07:08 <Geekingfrog> zeta_0, uhm, what ?
10:07:19 <sm[m]> doh, I'm wrong again. Sorry. I will retire.
10:08:09 <maralorn[m]> is (x ++ y) :: [a] lazy in y?
10:08:09 <zeta_0> Geekingfrog: i meant to ask geekasaur, my mistake
10:08:45 <ChaiTRex> maralorn[m]: That's pretty easy to check.
10:09:26 <ChaiTRex> > take 5 $ [1] ++ [1 ..]
10:09:29 <lambdabot>  [1,1,2,3,4]
10:10:08 <ChaiTRex> Or even
10:10:17 <ChaiTRex> > take 1 $ [1] ++ undefined
10:10:20 <lambdabot>  [1]
10:11:38 <maerwald> sm[m]: don't worry, everyone is confused by stack :p
10:19:28 <zeta_0> where did geekosaur go?
10:19:37 * Clint shrugs.
10:26:35 <jle`> i'm not telling
10:27:30 <monochrom> There is no telling. :)
10:27:58 <dsal> /nick telling
10:28:44 <maralorn[m]> > take 2 $ [1,2,3] ++ undefined
10:28:46 <Uniaika> p/win 3
10:28:47 <lambdabot>  [1,2]
10:28:49 <Uniaika> (woops)
10:32:40 <zeta_0> geekosaur: configuring ewhm in xmonad.hs did not fix the vscodium issue'
10:33:39 <geekosaur> then I will repeat: some things require you to be running a desktop manager, not merely a window manager
10:34:07 <geekosaur> there is no way to "upgrade" xmonad into a desktop manager, but it can be run as the window management component of some desktop managers
10:34:12 <zeta_0> geekosaur: how do i troubleshoot this to figure out exactly why it is not vscode is not working?
10:34:23 <geekosaur> lxde's probably easiest but may be too minimal for vscode
10:35:30 <geekosaur> you'd have to find out what component it's looking for and not finding. I know how I'd do it but strace isn't for novices and determining that it's connecting to e.g. dbus isn't easy either
10:35:59 <geekosaur> you're better off asking the vscodium folks which desktop manager components it needs
10:36:58 <geekosaur> you may be able to run some of them without running a full desktop, although if it's looking for a desktop session manager by dbus endpoint you will have little choice but to run something like mate with xmonad as a component
10:37:22 <geekosaur> these are never easy to debug
10:37:24 * hackage rings 0.1.1 - Ring-like objects.  https://hackage.haskell.org/package/rings-0.1.1 (cmk)
10:37:48 <zeta_0> geekosaur: ok, the ##vs-code channel is dead, should i just place an issue on vscodium's issue section?
10:38:03 <geekosaur> probably yes
10:40:22 <zeta_0> geekosaur: ok, thanks for the help, i like xmonad but these edge cases are frustrating
10:41:05 <geekosaur> they're not that edge any more; more and more things assume you run gnome, kde, or maybe mate
10:41:46 <geekosaur> and simply aren't interested in the minimalist folks, who in turn aren't that interested in much beyond terminals and browsers
10:42:54 <geekosaur> and will generally point you to "how to run <minimalist window manager> as part of kde/mate/xfce/lxde" if you need more
10:52:08 <zeta_0> geekosaur: ok, i submitted the issue: https://github.com/VSCodium/vscodium/issues/341
10:53:06 <zeta_0> geekosaur: i give up on vscodium for now, hopefully vscodiums maintainers can help me out
10:54:39 <zeta_0> geekosaur: if you could help me out here real quick: https://github.com/xmonad/xmonad/issues/210
10:55:56 <zeta_0> geekosaur: i'm tired of having to type mod-t all the time, is there a way to fix/automate this?
10:57:10 <geekosaur> it can be done with a manageHook but it'd be better to figure out why it does that. sadly I recall that issue and we already failed at it. (I suspect just resizing fixes it, so conceivably just e.g. changing the border width temporarily would kick it.)
10:58:30 <geekosaur> you'd need to use xprop to get the WM_CLASS information for the file dialog. there's a contrib script that wraps xprop and outputs a manageHook fragment, or you could just report the WM_CLASS here and I can tell you the right manageHook fragment to use
10:59:33 <geekosaur> hm, could also  be WM_WINDOW_ROLE
11:00:01 <zeta_0> geekosaur: ok, i would like to set a hook that executes mod-t whenever i try to open a file, like in a web browser or text-editor and other applications, so that i don't have to manually press mod-t all the time?
11:00:21 <geekosaur> that's what the manageHook does
11:00:25 <geekosaur> which is why I mentioned it
11:10:16 <zeta_0> geekosaur: ok, which function will i need to use? https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-ManageHook.html
11:10:46 <geekosaur> did you use xprop yet? what you need will depend on its results
11:14:28 <geekosaur> but the action part is:  ask >>= \w -> doF . W.sink w
11:14:41 <geekosaur> where W is from: import qualified XMonad.StackSet as W
11:15:38 <geekosaur> which could be shortened to: ask >>= doF . W.sink
11:16:03 <geekosaur> (we should really have a doSink alias to go along with doFloat, but there's little call for it normally since tiled is the default)
11:17:15 <zeta_0> geekosaur: if you could post it on the issue page so me i can have it as a reference, and so others that are having this problem can see it as well: https://github.com/xmonad/xmonad/issues/210
11:17:20 <zeta_0> geekosaur: thanks
11:17:31 <geekosaur> you still need to do the window matching part, which is where xprop comes in
11:18:13 <zeta_0> geekosaur: i ran xprop and it returned a bunch of stuff
11:18:29 <geekosaur> yes, I told you the parts to look at
11:18:47 <geekosaur> it's a list of lines <property>(<type>) = <value>
11:19:15 <geekosaur> you're looking for WM_CLASS(STRING) = ... and maybe WM_WINDOW_ROLE(STRING) = ...
11:20:20 <zeta_0> geekosaur: https://hastebin.com/tivogusapi.coffeescript
11:20:54 <geekosaur> that's npt the file dialog, it's a browser window
11:21:24 <geekosaur> open the file dialog (don't worry for now about getting it to render), open a terminal window, type xprop, click on the file dialog
11:25:22 <zeta_0> geekosaur: ok, i clicked on it, but i did not press mod-t: https://hastebin.com/kikawaguyu.coffeescript
11:35:06 <zeta_0> geekosaur: so?
11:35:27 <geekosaur> just posted to the issue
11:37:00 <zeta_0> geekosaur: oh, i just got alerted with your github response, thanks, i'll try that out now
11:55:00 <zeta_0> this piece of code in my xmonad.hs is throwing an error?
11:55:02 <zeta_0>                 , manageHook = stringProperty "WM_WINDOW_ROLE" =~ "GtkFileChooserDialog" -->
11:55:03 <zeta_0>                                ask >>= doF . W.sink
11:55:16 <iqubic> What is the error.
11:55:18 <iqubic> ??
11:55:32 <iqubic> Can you paste the compiler error you're getting?
11:56:14 <geekosaur> that's a good question, I wrote that without testing it
11:56:48 <zeta_0> https://hastebin.com/isagawiguf.coffeescript
11:57:22 <zeta_0> https://hastebin.com/titefifuhi.rb
11:57:44 <iqubic> shafox: Carrying on from the discussion in #emacs, it looks like your error isn't an lsp issue, but instead a ghc bug.
11:57:54 <zeta_0> i haven't gotten ghcide to work in the xmonad.hs file so it's hard figuring out what the errors are
11:58:02 <geekosaur> oh, I typoed. it's =? not =~
11:58:28 <iqubic> shafox: You should post the error again, for people who in here who haven't seen it.
11:58:59 <shafox> This is the error I am getting when starting lsp server inside emacs as well as running inside nix-shell (hie), https://gist.github.com/shadow-fox/a900e949e6ac44072934cf3a03b94bb8
11:59:02 <zeta_0> geekosaur: oh and --> is a valid symbol? i have never used it before
11:59:12 <iqubic> zeta_0: if you run "xmonad --recompile" it will tell you what the errors are, without needed ghcide.
11:59:34 <geekosaur> haskell lets you define new operators, that's one defined by xmonad. so is =?
11:59:47 <iqubic> https://hackage.haskell.org/package/xmonad-0.15/docs/XMonad-ManageHook.html#v:-45--45--62-
11:59:55 <geekosaur> that's equal sign followed by question mark
12:00:12 <iqubic> both of them are defined right there.
12:00:46 <geekosaur> which is why it complained about an undefined variable, to haskell an unknown operator is as much a variable as any name is. it distinguishes by letter vs. symbol characters, the latter are infix
12:00:52 <geekosaur> therefore operators
12:01:12 <zeta_0> oh, thanks for the clarification
12:01:54 <geekosaur> it compiles here with that fix, I updated the issue
12:02:22 <iqubic> what is the "ask >>= doF . W.sink" doing?
12:03:59 <geekosaur> getting the window ID, then adjusting the StackSet (internal window stack) to sink / "un-float" the specified window
12:04:51 <geekosaur> you float a window the same way, but with the addition of a location to float to instead of it overlaying its former tile; that one's common enough to have the "alias
12:04:56 <iqubic> Why though? What issue does that solve?
12:04:56 <geekosaur> " doFloat
12:05:26 <geekosaur> for some reason gtk file dialogs don't render right in their setup unless they're tiled
12:05:57 <iqubic> So you have it tiled for a brief moment, then float it?
12:06:00 <geekosaur> although I suspect it's really just forcing a re-render that is "fixing" it, not specificallly tiling, but this is a simple way to force the re-render
12:06:14 <iqubic> Ah. I see.
12:06:39 <geekosaur> for now we're just forcing it to come up tiled. if that doesn't work then we might need something more involved
12:08:38 <iqubic> XMonad is cool.
12:09:09 <iqubic> I don't use it myself, but I find XMonad to be a really cool project.
12:10:51 <iqubic> I prefer to use EXWM, which is a project that turns Emacs into a fullscreen window-manager. I'm not going to discuss it more here, because it's off topic. If you want to hear about it, mention my name in #haskell-offtopic
12:11:28 <iqubic> Now, on the topic of haskell; do any haskell based notification daemons exist?
12:11:29 <geekosaur> cue joke about emacs being a great OS…
12:12:01 <geekosaur> (he says as he switches back to his emacs window…)
12:12:12 <iqubic> geekosaur: It truely is. It just needs a decent text editor.
12:12:28 <sm[m]> what's a notification daemon ?
12:12:29 <geekosaur> I don't think so, gui still being something of a pain in haskell
12:12:53 <sm[m]> what language isn't gui something of a pain in..
12:13:20 <iqubic> sm[m]: It's a piece of software that brings up a small and usually temporary window whenever an application has a notification to show you.
12:13:23 <geekosaur> monitors the dbus endpoint for system notifications and puts up those annoying corner windows
12:13:43 <iqubic> geekosaur: You don't like notification daeomons?
12:14:04 <geekosaur> I use them but sometimes they're a pain
12:14:32 <iqubic> Yeah. It took me an hour and a half to set up notifications when I did it yesterday.
12:14:40 <sm[m]> http://hackage.haskell.org/package/fdo-notify and http://hackage.haskell.org/package/GrowlNotify might be related ?
12:15:50 <iqubic> fdo-notify is for creating notifications in Haskell, and GrowlNotify only works with Mac OSX.
12:16:02 <iqubic> Neither of those are for displaying notifications on linux.
12:16:43 <sm[m]> more recent: http://hackage.haskell.org/package/libnotify, http://hackage.haskell.org/package/gi-notify
12:17:54 <geekosaur> and expects growl which is sort of a notifyd for OS X
12:18:09 <iqubic> sm[m]: Thank you for trying to help, but those aren't quite what I'm looking for.
12:18:18 <sicklorkin> anything compt with fswatch?
12:18:30 <sm[m]> alrighty
12:18:30 <iqubic> Those are both for creating notifications, and not for displaying them.
12:18:34 <geekosaur> this is desktop notifications, not inotify
12:18:36 <sicklorkin> issue is you have kevent, iontofiy, and fsevent
12:19:05 <geekosaur> fsnotify is the usual cross-platform one
12:19:13 <sicklorkin> ahhh
12:19:22 <iqubic> geekosaur: Because I can't find anything in Haskell, I'm going to keep using Dunst.
12:19:23 <sm[m]> (sometimes a related package can lead you to the one you want)
12:19:32 <zeta_0> geekosaur: it works, thanks for the help, i responded to the issue: https://github.com/xmonad/xmonad/issues/210
12:25:54 * hackage inline-asm 0.2.0.0 - Inline some Assembly in ur Haskell!  https://hackage.haskell.org/package/inline-asm-0.2.0.0 (0xd34df00d)
12:28:06 <hyperisco> who is jyrimatti
12:28:25 <mpickering> Is there some way to debug why cabal will build different components with different package dependencies, or to work out why the hash of certain dependencies is different?
12:34:10 <oisdk_> Does anyone know if the following combinator has a name? `Cx = x C`
12:34:28 <oisdk_> alternatively: C = (\x -> x C)
12:34:53 <sm[m]> mpickering: --dry-run and increased verbosity.. maybe some --constraint's to test ideas.. ?
12:34:56 <sclv> i don't think that's a valid "combinator" in the sense of combinatory logic
12:35:03 <sclv> combinators aren't supposed to be able to refer to themselves
12:35:30 <sclv> so it might be interesting, but the theory will be different, and also it won't be named already
12:35:40 <oisdk_> sure but you could write it with the Y combinator or something, right? 
12:35:45 <ChaiTRex> :t let c x = x c in c
12:35:47 <lambdabot> error:
12:35:47 <lambdabot>     • Occurs check: cannot construct the infinite type:
12:35:47 <lambdabot>         t1 ~ (t1 -> t0) -> t0
12:37:00 <dmj`> oisdk_: you mean like: foo x = \f -> f x ?
12:37:45 <oisdk_> dmj` nope, the weird one I posted
12:38:12 <dmj`> sm[m]: gui is a blessing in haskell :)
12:38:18 <oisdk_> it's like the Y combinator with a const stuck in. It can be typed as `Fix (Cont r)`.
12:38:27 <mpickering> sm[m]: I was under the impression that each component would use the same version of external packages as each other
12:38:34 <mpickering> is that not true?
12:39:51 <sm[m]> mpickering: each component.. within a single project ? within a single cabal invocation ? 
12:39:51 <dmj`> oisdk_: that's wild
12:39:56 <sclv> if you configure them together, i'd think they would
12:40:15 <sm[m]> I'm no expert on latest cabal, and there's different modes you can run it in (cabal.project, etc.)
12:40:47 <sm[m]> generally cabal is pretty free to concoct exciting new install plans at any time unless you firmly restrict it
12:41:03 <mpickering> I mean if I have lib and exe which both depend on an external lib
12:41:23 <mpickering> then I would assume it would under normal circumstances choose the same external lib
12:41:27 <sclv> if you configure them together they should match
12:41:30 <mpickering> and not build it twice
12:41:33 <sm[m]> yes, I would too
12:41:44 <sclv> if you don't, then it may solve differently depending on many reasons
12:42:49 <sm[m]> sclv: how would you configure them not-together ?
12:43:11 <sclv> configure lets you specify components i thought?
12:45:09 <mpickering> This isn't quite that simple as I'm implementing an IDE
12:45:43 <oisdk_> @let newtype C a = C ((C a -> a) -> a)
12:45:45 <lambdabot>  .L.hs:227:1: error:
12:45:45 <lambdabot>      Multiple declarations of ‘C’
12:45:45 <lambdabot>      Declared at: .L.hs:225:1
12:45:52 <oisdk_> :t fix (\c -> C (\f -> f c))
12:45:54 <lambdabot> C a
12:46:14 <sm[m]> sclv: oh ok.. I have forgotten 
12:46:23 * hackage fltkhs 0.8.0.3 - FLTK bindings  https://hackage.haskell.org/package/fltkhs-0.8.0.3 (deech)
12:46:33 <sm[m]> I had forgotten configure was a thing
12:47:58 <mpickering> What am I looking for in the build log sm[m] ?
12:48:07 <mpickering> IS there something which describes how the hash is computed
12:48:56 <sm[m]> not sure about that mpickering , it has been a while.. I remember cranking verbosity up to max and finding some clues to the solver's activity that way
12:49:11 <sclv> you won't find the computation of the hash directly afaik
12:49:32 <mpickering> I am basically trying to implement the component smashing together logic properly
12:49:36 <sclv> the hash also includes flagas iirc
12:49:41 <mpickering> Where I take a union of the package flags from all components
12:49:57 <sclv> so its not just "which packages built against which others" but also "with which flags"
12:50:25 <mpickering> indeed
12:50:35 <mpickering> but usually the component choice does not affect which flags
12:50:39 <mpickering> and indeed it was a false alarm
12:50:50 <mpickering> I was looking at the hash of `haskell-lsp` and `haskell-lsp-types`
12:51:12 <mpickering> now I need to work out how I am getting this error "  it was found in multiple packages:
12:51:12 <mpickering>   haskell-lsp-types-0.20.0.0 haskell-lsp-types-0.20.0.0"
12:51:35 <sm[m]> hehe love that one
12:52:09 <sclv> the cabal plan file is also of course really useful for this stuff
12:52:52 <mpickering> perhaps this happens if I pass multiple of the same package-db flags?
12:53:52 <mpickering> I just assumed duplicates were ignored
12:55:24 <_deepfire> Gentlemen, what's your favorite recourse when -fprint-explicit-kinds -fprint-explicit-foralls don't help locate binders for "martian" kind variables in error messages?
12:55:53 * hackage load-font 0.1.0.3 - A cross platform library for loading bundled fonts into your application  https://hackage.haskell.org/package/load-font-0.1.0.3 (deech)
12:56:03 <d34df00d> What's a martian kind variable?
12:56:24 <_deepfire> a kind variable that you don't know where it comes from, basically
12:56:26 <d34df00d> Google shows something about NASA and Mars rovers.
12:56:30 <d34df00d> Ah.
12:57:25 <_deepfire> and yes, I've explicitly specified all kind variables in the type binders I could find -- but apparently I'm missing some..
12:57:46 <maralorn[m]> So after closely following the RecordDotSyntax proposal for months know I am thorougly annoyed by the fact that field access and namespacing problems are the majority of my code.
12:58:14 <jle`> let's just throw out haskell and start over
12:58:24 <maralorn[m]> People in that thread write a lot about using DuplicateRecordFields and OverloadedLabels. Is there a guide for this?
12:58:26 <dansho> ---> #idris
12:58:40 <dansho> idris gives records their own namespaces. problem solved =)
12:58:49 <monochrom> GHC user's guide
12:58:56 <_deepfire> the world won't let us have another lazy functional language..
12:59:27 <maralorn[m]> monochrom: I meant more like how to glue them together to have nice record access.
12:59:48 <jle`> you can use the generic-lens package with lens maybe, that's how i'd use it probably
12:59:54 * hackage hlibsass 0.1.8.1 - Low-level bindings to Libsass  https://hackage.haskell.org/package/hlibsass-0.1.8.1 (jakubfijalkowski)
12:59:55 <jle`> myRec ^. #age
13:01:02 <jle`> but be aware that uses an orphan instance
13:01:53 * hackage fltkhs-themes 0.2.0.3 - A set of themed widgets that provides drop in replacements to the ones in FLTKHS.  https://hackage.haskell.org/package/fltkhs-themes-0.2.0.3 (deech)
13:03:54 * hackage mmsyn7ukr 0.15.0.0 - A simple basic interface to some SoX functionality or to produce a voice that can be used by mmsyn7h  https://hackage.haskell.org/package/mmsyn7ukr-0.15.0.0 (OleksandrZhabenko)
13:05:58 <maralorn[m]> jle: I am not afraid of orphan instances.
13:07:17 <nisstyre> Does ghcup support installing an older cabal? Cabal 3.0 or whatever is totally broken for my workflow
13:08:28 <maerwald> yes
13:08:40 <maerwald> ghcup install-cabal <version>
13:08:52 <maerwald> it will just overwrite the previous one in ~/.ghcup/bin
13:09:19 <maerwald> if you have another cabal somewhere in an earlier PATH component, remove that
13:09:42 <nisstyre> ok thank you
13:09:46 <nisstyre> that solves my problems
13:09:49 <maralorn[m]> Found an explanation for what I was looking for on reddit from 18h ago.^^ https://www.reddit.com/r/haskell/comments/f7427x/overloadedlabels/
13:14:53 * hackage mmsyn7ukr 0.15.1.0 - A simple basic interface to some SoX functionality or to produce a voice that can be used by mmsyn7h  https://hackage.haskell.org/package/mmsyn7ukr-0.15.1.0 (OleksandrZhabenko)
13:18:28 <maxsu> hey what are functors in c++, in haskell terms?
13:18:43 <maxsu> I don't think they're really functors, more like a typeclass
13:19:03 <nisstyre> maxsu: they're not the same thing at all
13:19:20 <nisstyre> they're more like HOFs
13:20:16 <jle`> i think you can just think of them as overloading function call syntax, blahblah(...)
13:20:32 <maxsu> oh, they're also called function objects and functionals
13:20:35 <phadej> if functor in C++ is a class which implemenets operator(), then they are just functions
13:20:55 <jle`> so just basically overloading function application syntax, maybe
13:21:04 <jle`> like i know some languages you can overload what + does
13:21:11 <phadej> yes
13:21:28 <phadej> whatever you use functors in C++ you just use plain functions in Haskell
13:21:29 <jle`> so C++ functors are just overloading blah(...) notation
13:21:30 <phadej> easy
13:21:39 <maxsu> yep, not bad
13:21:59 <maxsu> the only reason they need to call them functionals/functors is because functions are not first class to begin with
13:22:30 <phadej> yes, functions are not values in C++
13:23:50 <jle`> people have thought about bringing similar overloading mechanisms to haskell, as well
13:23:58 <jle`> -XOverloadedApplication, OverloadedSpace, etc.
13:24:10 <jle`> where `f 5` would be parsed as `apply f 5`
13:24:23 <jle`> so you can overloaded function application syntax with some sort of typeclass in haskell
13:24:29 <jle`> but it's kind of silly
13:24:43 <phadej> people want weird things
13:24:50 <jle`> https://github.com/ghc-proposals/ghc-proposals/pull/275
13:26:13 <jle`> but i would maybe relate C++ functors as just overloading syntax, and not just as a tool to deal with lack of first class functions.  you could use them for more things than just as a replacement for first class functions
13:26:38 <jle`> the -XRebindableSyntax proposal is probably the closest idea in haskell
13:26:48 <jle`> er, -XRebindableApplication
13:26:55 <jle`> https://github.com/tydeu/ghc-proposals/blob/overloaded-application/proposals/0000-rebindable-application.rst
13:27:06 <maxsu> in cgal they're used methodically to let users adapt geometric algorithms to their particular domain
13:27:28 <maxsu> and it's a whole design philosophy and part of how they make things robust
13:27:58 <jle`> i say that because even Haskell, a language with first-class functions, could 'use' something like the C++ idea of functors (as the proponents of -XRebindableApplication claim)
13:28:48 <maxsu> I had not seen that before, so I thought it was some magic I didn't know - turns out they're literally just doing things like passing algorithms an evaluator
13:29:25 <maxsu> https://i.imgur.com/bJnOAeN.png
13:29:57 <maxsu> here the functor is the "is_bad" operation, which tells us when we need to continue subdividing a given face in a mesh
13:30:29 <maxsu> but here, the notion of "is_bad" totally depends on the kind of final properties we want for the output mesh
13:31:06 <maxsu> ie, it might have logic that controls how finely  the mesh is triangulated in a given region
13:40:14 <maralorn[m]> When I have myRec ^. #age can I write some instance for functor so that I can also do [myRec] ^. #age?
13:44:54 * hackage generic-data 0.8.1.0 - Deriving instances with GHC.Generics and related utilities  https://hackage.haskell.org/package/generic-data-0.8.1.0 (lyxia)
13:47:05 <jle`> maralorn[m]: what would you want that to do?
13:48:32 <maralorn[m]> fmyRec ^. #age = fmap (^. #age) fmyRec
13:49:54 <maralorn[m]> That would be awesome e.g. for reflex-frp where I am right now stacking fmaps all the time …
13:53:19 <jle`> i feel like just using fmap would make it more readable
13:53:34 <jle`> but i think this is a different problem from what you were originally asking
13:54:02 <jle`> or at least, in an orthogonal direction
13:54:05 <maralorn[m]> I guess I could just make me an operator like ^$. #age …
13:54:23 <maralorn[m]> jle: That might be.
13:55:11 <maralorn[m]> Well it is orthogonal but comes together with duplicate record names.
13:55:29 <jle`> hm, how so?
13:55:33 <jle`> you're talking about fmapping, not record access
13:55:55 <jle`> basically (^. #age) or (view #age) is substituting for 'myRecAge'
13:55:59 <jle`> but they're all just normal functions
13:56:16 <jle`> with nothing too magical going on, other than generics to get the 'age' field
13:56:51 <jle`> data MyRec = MR { myRecAge :: Int }, vs. data MyRec = MR { age :: Int }
13:57:11 <maralorn[m]> jle: But I can have different records with an #age field can‘t I?
13:57:17 <jle`> view #age, (^. #age) for the latter type is the same thing as myRecAge
13:57:20 <jle`> as a function
13:57:31 <jle`> maralorn[m]: with duplicaterecordfields, you can have different records with an #age field
13:57:38 <Cale> maralorn[m]: Theoretically, though very few people use that feature :)
13:57:39 <jle`> view #age will be polymorphic over all records with an #age field
13:58:40 <Cale> Usually I feel like if I want the polymorphism, it's not too much trouble to define an actual class
13:59:17 <maralorn[m]> Yeah, I understand.
13:59:19 <Cale> HasField feels like accidental polymorphism
13:59:23 <jle`> % import Data.Generics.Labels
13:59:23 <yahb> jle`: ; <no location info>: error:; Could not find module `Data.Generics.Labels'; It is not a module in the current program, or in any known package.
13:59:26 <maralorn[m]> But now I want (semiautomatically) more cool lenses.
13:59:54 <jle`> %! cabal instal generic-lens
13:59:54 <yahb> jle`: cabal: error while loading shared libraries: libresolv.so.2: cannot open shared object file: No such file or directory
14:00:05 <jle`> %! stack install generic-lens
14:00:05 <yahb> jle`: bash: 1: stack: not found
14:00:11 <jle`> i tried
14:00:15 <Cale> But yeah, I can understand not wanting the extra TH from a compile-time perspective
14:01:17 <jle`> maralorn[m]: but yeah, if you have data Person = P { age :: Int } and data Turtle = T { age :: Integer }
14:01:26 <jle`> then you can use view #age or (^. #age) on either of them
14:01:59 <jle`> for the first one, view #age :: Person -> Int, and for the second one, view #age :: Turtle -> Integer
14:02:13 <jle`> and it'll figure out which one through type inference
14:05:22 <Cale> The GHC proposals process, bringing duck typing to Haskell, one step at a time. ;)
14:07:57 <maralorn[m]> jle: Is there also a trick where I could combine two lenses to a new lens and have it again work with OverloadedLabels? Like data Circle = Circle { color:: Color , radius:: Int}, data Color { red:: Int, green :: Int, blue :: Int}, and now I want to do myCircle ^. #red.
14:08:04 <maralorn[m]> I mean the great thing about lenses is their composability.
14:08:05 <maralorn[m]> But how can I lift that to the typeclass level?
14:08:21 <Cale> #color . #red
14:08:43 <Cale> No special thing, just function composition
14:09:02 <maralorn[m]> Cale: Yeah, I know.^^
14:09:17 <maralorn[m]> But i‘d like an instance so that only #red also works.
14:09:29 <Cale> oh, that's... kinda gross
14:09:37 <Cale> What if there's more than one #red ?
14:09:47 <jle`> um
14:10:08 <maralorn[m]> Cale: Where?
14:10:11 <Cale> Like, data Circle = Circle { lineColor :: Color, fillColor :: Color, radius :: Int }
14:10:14 <Cale> what then?
14:10:19 <jle`> no, overloaded labels and stuff isn't 'magic' like that
14:10:29 <jle`> the point is to make it as unmagical as possible, heh
14:10:36 <maralorn[m]> Cale: I am not saying magically give me al transitive lenses.
14:10:54 <Cale> I suppose you could write an instance by hand, if GHC allows that...
14:11:02 <jle`> but this sort of thing is what the Classy Lenses design pattern is
14:11:27 <jle`> class HasColor a where red :: Lens a Int; green :: Lens a Int; blue :: Lens a Int
14:11:45 <jle`> instance HasColor Color where red = #red; green = #green; blue = #blue
14:11:54 <maralorn[m]> jle: True
14:12:02 <jle`> instance HasColor Circle where red = #color . #red .... etc.
14:12:35 <jle`> but you'd probably want to manually write that instance
14:12:47 <jle`> it wouldn't make sense in an automatic way
14:12:53 <jle`> for reasons like what Cale described
14:12:55 <maralorn[m]> Yeah, that’s okay.
14:13:35 <maralorn[m]> But how do I get from there back to using view #red myCircle
14:13:46 <jle`> you'd use view red myCircle
14:13:51 <jle`> the red from the HasColor typeclass
14:14:02 <maralorn[m]> Ah
14:14:27 <maralorn[m]> Of course.
14:14:46 <Cale> At least then you have what looks like a proper abstraction, and you're not just relying on the accident that things have the same field names somewhere
14:15:31 <Cale> I really kinda wish they didn't do all that DuplicateRecordFields shenanigans
14:15:59 <Cale> It's better to force people to do the right things from the outset sometimes
14:21:34 <bobbytables> So I'm writing an RPG in Haskell and I'm trying to figure out the best way to implement a container (like a chest) or a player's inventory.
14:22:06 <bobbytables> Basically it would be a list, but with different types (tool, food, potion, etc) in it.
14:23:04 <Cale> That definitely depends on how you're modelling the rest of the game world, but yeah, you could start with a list, or a Map (from items to quantities)
14:23:05 <bobbytables> I'm hesitating on making a sum type (Tool|Food|Potion) because that means the sum type needs to be added to for every type that I add tot he game.
14:23:27 <Cale> ah, for representing different items, it might be better to think about what things you need to do with items
14:23:38 <Cale> and make an item be a record of those things
14:24:22 <Cale> Especially if you're going to have a lot of different items
14:25:30 <bobbytables> As far as the container logic is concerned I just want to be able to list, display, and move items.
14:26:18 <jle`> probably more important is the item usage logic. otherwise if all you want to do is list, display, and move, you could just store strings/text instead of an actual data type
14:26:26 <Cale> Of course, you also probably need some strategy for serialising things at some point, so that can throw a bit of a wrench into the plan of representing game world objects as records of functions
14:28:15 <Cale> (though it can still work of course)
14:29:09 <bobbytables> The items will need data stored (weight, drability, etc) but that data depends on the type of item.
14:29:32 <bobbytables> I'm kind-of leaning towards making a list of Data.Dynamic, but I wondered if there was a better way.
14:29:35 <Cale> So you might have some top level sum type
14:30:24 <ChaiTRex> bobbytables: So make groups of items like weapons and so forth and have a sum type data Item = Weapon ... | Potion ... | ...
14:30:35 <Cale> yeah
14:31:12 <Cale> That's a reasonable option a lot of the time, and should make serialising the items easy.
14:31:24 <bobbytables> But that means the Item module needs to import the Weapon, Potion, .. modules. It seems like a violation of separating different concerns.
14:31:41 <bobbytables> But maybe I'm just overthinging it.
14:31:48 <Cale> That's assuming you put these things in different modules at all
14:32:34 <Cale> I'd probably try to keep them in the same module until things got really unwieldy somehow
14:32:57 <bobbytables> Yeah, I guess I'll run with that for now.
14:33:08 <Cale> Especially if you have bags as an item type :)
14:33:39 <bobbytables> I'm just used to OO systems where when you say "B inherits A" A doesn't have to know anything about B.
14:33:54 <bobbytables> But I'm probably overthinging it :p
14:33:58 <jle`> what do you think is inhereting what, where?
14:35:31 <Cale> This way forward where you define what items consist of by saying what data they're built from is in a way dual to the OO strategy, where you say what items are in terms of how you take items apart.
14:36:02 <Cale> (i.e. what operations are available on items)
14:36:15 <Cale> (or what messages an item responds to)
14:37:14 <bobbytables> This is also my first realy Haskell program.
14:37:19 <bobbytables> Anyways, thanks :)
14:37:28 * bobbytables blames shapr anyways.
14:38:15 <Cale> The advantage of being explicit about how data are built up is that it's easy to add new functions which work on items, by enumerating the possible cases. But that means it'll typically be more work to add new types of items in the future (though the type checker and pattern completeness checker can make refactors like that tolerable)
14:39:33 <Cale> By contrast, in the OO strategy, it's easier to add new types of items which implement the same interface, but can be more work to add new functions which apply to all items (adding a new method to that interface, you're required to extend all your existing items with it)
14:40:18 <Cale> You can reasonably do both of these things in Haskell -- I actually think it's fine to do OO where you have no subtyping at all :)
14:40:50 <Cale> The reason you can usually get away with no subtyping is that you have first class functions, so you can make records of "methods", and fill out the implementations of those methods in different ways
14:41:24 <Cale> A function which builds a record of methods can have arguments or things defined in a where clause, which are like "private" data.
14:42:56 <maralorn[m]> Cale: But if people go around and implement HasColor, HasPerson, HasWhatever for everything wouldn‘t it be completely plausible to provide HasField @"color" etc. for them?
14:43:24 <jle`> maralorn[m]: do you mean build that into the compiler?
14:43:56 <jle`> ...what would the rules for HasField even be, at that point?
14:44:30 <Cale> maralorn[m]: The thing is, if you define a class like that, it expresses intent to have an abstraction, and since the class belongs to a specific module, it's always clear when someone means to use it
14:44:57 <erisco> bobbytables, Weapon -> Item, Potion -> Item, etc
14:45:01 <Cale> maralorn[m]: Two completely separate libraries can accidentally end up with a record field named x of type Int, but it doesn't mean that it's always sensible to conflate those two things
14:45:49 <erisco> bobbytables, what you're probably wondering then is how to remember an Item is a Weapon or a Potion. Well, imo that is an OOP violation :P
14:45:52 <Cale> maralorn[m]: By making someone write an instance, it's like getting confirmation that someone has thought about whether the type actually belongs to the abstraction that's being made
14:48:38 <bobbytables> erisco: Well, my idea is that the storage system wouldn't know or care, and then the systems that do care would know about the types they need and do a search by type.
14:48:39 <monochrom> I know that a lot of people create abstract classes and interfaces (even stub helper functions, generally any stub abstraction) on the sole ground that they don't know how to solve the problem at all, they don't even know where to begin, they just want the false sense of "I'm emitting code" while procrastinating actual productivity.
14:48:41 <maralorn[m]> Well I just think from a very high level perspective I‘d want a distinct namespace for fieldnames, which can deal with name duplications and the possibility to define virtual fields.
14:49:27 <Cale> An easy policy if you don't want to think about it, is just to always name fields _typeName_fieldName
14:49:29 <erisco> bobbytables, what does a storage system need to know about an item? What is an example?
14:49:47 <monochrom> Therefore I conclude that the question "do you have at least 3 concrete examples?" is a great litmus test of whether they have a meaningful abstraction or they're full of it.
14:49:54 <maralorn[m]> monochrom: What discussion are you referring to?^^
14:50:16 <Cale> The underscores help with various TH which exists, and I've actually kind of come to like this style, even if it's a bit typographically ugly
14:50:25 <erisco> monochrom, IFoo, FooAdapter, and Foo!
14:50:30 <monochrom> Mine.
14:50:33 <bobbytables> erisco: A storage system just needs to know what items are in a container, how to dispaly those items in the GUI, and possibly the weight.
14:50:54 <Cale> A nice thing about it is that you can immediately tell which type you're extracting a field from, so it helps typechecking expressions in your head
14:51:16 <Cale> (at least until you decide that you need some classy lens abstraction or whatnot)
14:51:31 <monochrom> More seriously "By making someone write an instance"
14:51:32 <bobbytables> erisco: And then the combat system would know about weapons, and could search the inventory for items with that type, and then the crafting system could search for tools, etc...
14:51:45 <erisco> bobbytables, so it sounds like a storage has to know about all items. Then is it crazy for Item to know about all items?
14:52:33 <erisco> just suggesting that sometimes the hierarchy gets put in upside down ;)
14:52:53 <Cale> monochrom: Yes
14:53:15 <erisco> if you ever need to close over all the things that are an X, I think it was put in upside down
14:53:25 <erisco> should rather be that X is the closure of all the things
14:53:47 <erisco> i.e. sum, since we're talking types
14:53:49 <Cale> I think classes are better than duck typing OverloadedLabels/DuplicateRecordFields nonsense, and sometimes nothing at all is a better solution than classes.
14:54:09 <maralorn[m]> I was under the impression that the HasField system would be a way to give me all what I required above. But I am fine with other solutions.
14:54:43 <Cale> Yeah, well, it'll let you duplicate record fields, but I've never really comprehended why people ever want to do that.
14:54:56 <erisco> what you sometimes see in OOP is the upside down scenario and then what you get is  if (x instanceof This) else if (x instanceof That)  and so on
14:55:37 <erisco> my experience is that this is a miserable design
14:56:18 <bobbytables> erisco: Yeah, if you get into that it's bad.
14:56:49 <Cale> Like, it makes some identifiers shorter, sure
14:57:03 <erisco> and an unfortunate reason that comes about is because many languages lack sum types
14:57:16 <erisco> all you have is subtyping, which isn't quite the same thing because it is open
14:57:42 <maralorn[m]> Cale: Well 1) if a field is called "name" thinking of what is another name for the field "name" which also makes sense, is something between annoying and time stealing. 2) If both records are foreign you can‘t prevent the collision.
14:58:12 <Cale> maralorn[m]: If your type is called MyType, then the field gets called _myType_name
14:58:16 <erisco> there are tricks you can do in some languages to close the subtypes
14:58:23 <erisco> using visibility modifiers
14:58:23 <Cale> bam, don't have to even think
14:58:43 <Cale> and there's practically no collisions because we also don't name types the same thing usually
14:58:47 <erisco> I do not recall having any exhaustiveness checking though
14:59:17 <erisco> bobbytables, likewise, if your combat system is involved with finding weapons out of items, then it is knowledgeable about items
14:59:24 <Cale> and the type name is in the record field extractor, making it easier to tell what the type of x is in _myType_name x
14:59:25 <maerwald> the amount of unattended PRs in github.com/haskell projects is concerning
14:59:31 <monochrom> Row polymorphism is better than the HasField mechanism.  But meh, Haskell lacks row polymorphism.
14:59:52 <erisco> bobbytables, if it is not to be knowledgeable about items then it can just be given weapons to work with, and something else can be responsible for weeding them out of other items
15:00:05 <Cale> maerwald: I don't know that this is a problem specific to Haskell...
15:00:08 <monochrom> But to a large extent if I use HasField I use it for row polymorphism and try not to be more fancy than that.
15:00:20 <maralorn[m]> monochrom: Isn‘t that very close to each other?
15:00:39 <maerwald> Cale: maybe we should do better :/
15:00:43 <Cale> maerwald: It can literally be a full time job to shepherd PRs
15:01:04 <Cale> Depends on the PRs of course
15:01:11 <monochrom> HasField is, like, going through type class hoops to emulate row polymorphism, but because of those hoops you can also do something else.
15:01:32 <maerwald> Cale: but we have a committee for that, right?
15:01:48 <Cale> maerwald: You mean the CLC?
15:01:53 <maerwald> yeah
15:02:52 <Cale> I'm not sure if that's really their focus... they're more like "how do we come to some sort of agreement on what happens in base that only pisses off 5% of people?"
15:03:01 <maralorn[m]> monochrom: So you dislike the idea that I‘d love to use that to get virtual fields?
15:03:19 <maerwald> politics is also nice
15:03:30 * maerwald smashes laptop against forehead
15:03:44 <monochrom> Virtual field is reasonable. But also a slippery slope.
15:03:48 <maralorn[m]> Cale: Yeah, in the end it just seems to be a matter of verbosity …
15:04:27 <Cale> maralorn[m]: Yeah, it's a bit more verbose, but having used this style for a few years, I've actually come to like it a fair bit in some ways
15:05:53 <Cale> You typically shouldn't be spending more time typing than thinking anyway, so it's rare that it feels all that onerous
15:06:31 <erisco> bobbytables, fwiw I suggest being economical with the distinctions you make. Maybe "damage" makes sense on a sword and not on an apple, but perhaps a 0 damage apple is livable?
15:06:57 <Cale> and then when you're reading, lengthy names can be annoying in some contexts (like math formulas), but they're fairly limited, and you can usually work around that problem by binding local names that are shorter
15:07:22 <Cale> But like 99% of the time, it's not bad at all
15:07:33 <Cale> and saves you a bunch of trouble thinking about types
15:07:39 <maralorn[m]> erisco: I think the claim that apples don‘t do damage is problematic. Ask Newton about it.
15:07:43 <erisco> bobbytables, and some odds-and-ends attributes are perhaps suited to  Map String String
15:08:45 <Cale> lol, everything in the game can be a thrown weapon
15:08:52 <erisco> there is a economical tradeoff between what you make static and what you make dynamic
15:09:06 <erisco> in compile and turnaround times, in development time, in moddability
15:10:26 <Cale> 150 meter tall statue? Throwing weapon (but you need enough strength to pick it up)
15:10:34 <maralorn[m]> And Cale do you always use a typeName_fieldName lens with it?
15:10:48 <Cale> maralorn[m]: When it seems useful
15:11:10 <Cale> Usually we lazily force the thunk of adding makeLenses ''Foo
15:11:40 <Cale> because compile times
15:11:53 <erisco> 1) Make typed language 2) Add type inference to unburden typing 3) Add type names to identifiers to unburden thinking
15:11:56 <Cale> (though in libraries, that usually happens anyway)
15:12:35 <bobbytables> Cale: Slightly on topic: https://twitter.com/mtrc/status/1196840024433741833
15:12:44 <maralorn[m]> erisco: So true.^^
15:12:54 <Cale> maralorn[m]: When it makes sense to abstract over such fields for several types, the lens names will typically get shorter and not have that prefix
15:13:12 <Cale> bobbytables: hahaha
15:14:31 <erisco> Must have thrown a Russell's Potion
15:15:21 <maralorn[m]> erisco: xD
15:15:37 <Cale> Russell's potion heals only things which can't heal themselves
15:17:04 <maralorn[m]> erisco: I recommend a hirarchy approach. Potions are Items but can only heal Characters, which are a subtype of Items.
15:17:46 <maralorn[m]> Or something …
15:17:47 <maralorn[m]> Ofcourse you might want to have something to heal arbitrary Items, but that can‘t be an Item. Thus Metaitems.
15:19:28 <ChaiTRex> Potions are also characters if you name them. Mister Potion can heal himself, for example.
15:21:43 <maerwald> maralorn[m]: meta? https://www.youtube.com/watch?v=bVDDDPLE2BA
15:24:55 <maralorn[m]> maerwald: It‘s amazing what possibilties modern technology gives us.^^
15:25:09 <maerwald> spiritual opportunities even
15:31:24 * hackage mmsyn7ukr 0.15.1.1 - A simple basic interface to some SoX functionality or to produce a voice that can be used by mmsyn7h  https://hackage.haskell.org/package/mmsyn7ukr-0.15.1.1 (OleksandrZhabenko)
15:41:23 * hackage haskell-igraph 0.8.0 - Bindings to the igraph C library (v0.8.0).  https://hackage.haskell.org/package/haskell-igraph-0.8.0 (kaizhang)
15:43:23 * hackage mmsyn7ukr 0.15.1.2 - A simple basic interface to some SoX functionality or to produce a voice that can be used by mmsyn7h  https://hackage.haskell.org/package/mmsyn7ukr-0.15.1.2 (OleksandrZhabenko)
15:54:26 <orbit> hello?
15:56:46 <Cale> hello
15:59:48 <orbit> I'm curious if there are previous Google Summer of Code participants here
16:17:23 * hackage myxine-client 0.0.0.1 - A Haskell client for the Myxine GUI server  https://hackage.haskell.org/package/myxine-client-0.0.0.1 (kwf)
16:38:53 * hackage lean-peano 0.1.0.0 -   https://hackage.haskell.org/package/lean-peano-0.1.0.0 (oisdk)
17:01:24 * hackage lean-peano 0.1.0.1 -   https://hackage.haskell.org/package/lean-peano-0.1.0.1 (oisdk)
17:40:52 <kleisli> is there a way to search (in ghci) for all functions in scope that operate on a given type?
17:47:48 <jle`> hm, maybe _ :: A -> B ?
17:49:03 <maralorn[m]> If I have a getter optic over a can I get a getter optic over f a, where f is a functor?
17:49:39 <shachaf> What does that mean?
17:49:51 <maralorn[m]> From s -> a to f s -> f a
17:50:54 <maralorn[m]> I have a Getter' s a and I want a Getter' (f s) (f a)
17:51:34 <maralorn[m]> I wonder if there is a function/operator for this.
17:51:55 <zeta_0> can i use yesod's warp web server for other languages besides haskell?
17:54:09 <shachaf> Where does the getter come from in the first place?
18:15:52 <monochrom> "from s->a to f s -> f a" sounds like simply fmap
18:16:23 <shachaf> Yes.
18:17:15 <shachaf> "Getter s a" is a complicated encoding of "s -> a". Usually it's best to just have a function s -> a, and maybe turn it into a getter at the last moment if you need to. Then you can use "to (fmap f)" instead of "to f".
18:26:53 <alireza> hey guys i'm having trouble install hakyll
18:27:28 <alireza> pandoc and pandoc-citeproc freenode weechat
18:28:09 <alireza> err, pandoc and pandoc-citeproc cannot be built is there any step that i'm missing?
18:28:27 <alireza> i'm using cabal version 3.0.0.0.0
18:28:39 <alireza> and running on elementry os (aka ubuntu)
18:30:37 <alireza> https://dpaste.org/YjMq
18:30:43 <alireza> that's the stacktrace
19:01:00 <days> who wants to do some particle filter in haskell
19:01:09 <days> ?
19:04:56 <days> im thinking baum welch and rao blackwellization
19:07:31 <days> so to determine the time evolving hidden state from a sequence of time observations, given that the states time evolution operator depends on a second hidden internal switching state; the "regime"  
19:09:17 <days> then we can piece together linearised models (where this evolution operator is a matrix), so we can use the theoretical optimality of kalman filters for each piecewise region  
19:10:32 <days> for an excuse to use classifiers to partition up the time series into "features" used in the prediction step
19:11:51 <N3RGY> What is the type of the regime? Some small number of discrete values? 
19:12:13 <N3RGY> And if so, how do you know how many regimes to use?
19:13:25 <days> both of the hidden states types need to be determined, this is the fundamental task, to determine the "state space representation" where the regime indicating variable basically just corresponds to an int labeling of possible states, to switch between the different time evolution matricies for each regime  
19:17:34 <days> idk how to find the number of regions that are similar, how many different regions there are. maybe the predictive power would depend on this so could be expressed as an argmax and maybe determined using convex optimisation, such as with k-sparse thresholding, with a prior to penalize the number of terms drawn from a basis or frame 
19:18:02 <days> it would be kind of like asking a classifier to determine how many different animals there were in a training set
19:18:54 <days> i guess the type would be symbol rather than int, then it could be like "cat" or "dog" and the type would be the set of all these symbols
19:20:42 <days> just a big sum datatype, containing no extra information than just being a label. so really it is the identification of the first hidden state (the state space of a finite automaton which the time ovolution operator transitions between as a transfer matrix) which is the challenging type/space to determine
19:21:57 <days> not sure if the automata approach is good though, thats more like finite semigroups, probably just with int labels again 
19:22:41 <days> for this state it might be better to have a type which actually represents the dynamical properties of the underlying hidden system
19:23:24 <days> but i guess since its just a linear model then we are in Rn for some n, as the archetypal inner product space
19:24:49 <days> so then determining the hidden model is determining the various transfer matricies A_i :: Matrix (n :: Nat) (n) for each regime i :: Int
19:25:58 <days> which is where we use the kalman filter / baum welsh (the rao blackwelisation is having this linear regimes) 
19:27:27 <days> then, if we extend from a particle filter as described, to a particle smoother, then we can leverage measures of the predictive capacity of the technique in an iterative way, basically training the state space inference also on the predicted part of signal 
19:28:19 <days> Rao-Blackwellised Particle Filtering for Dynamic Bayesian Networks; https://arxiv.org/ftp/arxiv/papers/1301/1301.3853.pdf
19:28:53 <days> and then this! https://arxiv.org/pdf/1907.11547.pdf
19:29:01 <days> Double Bayesian Smoothing as Message Passing
19:29:24 <days> where we express the algorithms using a factor graph
19:29:47 <days> (yay graphs!)
19:36:54 * hackage cachix 0.3.6 - Command line client for Nix binary cache hosting https://cachix.org  https://hackage.haskell.org/package/cachix-0.3.6 (domenkozar)
19:38:34 <days> idk where to start...
19:42:09 <days> i think there was something about FastSLAM-2  doing the rao blackwell regimes somehow as part of the sequential monte carlo framework via a sampling problem instead of doing the partitioning, which makes the proofs easier
19:45:40 <novum> what is the function that takes nested lists and reduces them one level
19:45:49 <orzo> concat
19:45:52 <novum> [[1,2,3],[4,5,6]] -> [1,2,3,4,5,6]
19:46:04 <orzo> > concat [[1,2,3],[4,5,6]]
19:46:06 <novum> concat? thank you very much, kind sir or ma'am.
19:46:07 <lambdabot>  [1,2,3,4,5,6]
19:46:18 * novum hugs tight. fastest irc reply evaaaa<33333
19:48:35 <days> > join [[1,2,3],[4,5,6]]
19:48:38 <lambdabot>  [1,2,3,4,5,6]
19:48:43 <days> :t join
19:48:44 <lambdabot> Monad m => m (m a) -> m a
19:48:46 <days> :t concal
19:48:47 <lambdabot> error:
19:48:47 <lambdabot>     • Variable not in scope: concal
19:48:47 <lambdabot>     • Perhaps you meant one of these:
19:48:51 <days> :t concat
19:48:53 <lambdabot> Foldable t => t [a] -> [a]
19:50:44 <days> :t asum
19:50:46 <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
19:50:59 <days> > asum [[1,2,3],[4,5,6]]
19:51:02 <lambdabot>  [1,2,3,4,5,6]
19:51:52 <days> (thats giving the "listlike" implementation of the monad, with join as foldr <|>)
19:53:13 <days> > fold [[1,2,3],[4,5,6]]
19:53:16 <lambdabot>  [1,2,3,4,5,6]
19:53:18 <days> :t fold
19:53:19 <lambdabot> (Foldable t, Monoid m) => t m -> m
19:53:37 <days> here we have Monoid [a] instead of Alternative []
19:54:02 <days> "foldable functors of monoids are monads"
19:54:30 <days> ... no sorry, "Folable Monoids are Monads" 
19:54:49 <days> maybe there is a corresponding thing for comonads
19:55:20 <days> its normal to have this much to say about concat...
19:57:26 <days> i wonder if monoidal monads (MonadPlus) are always foldable... probably you can have a monad instance that does not use the Alternaitive property 
19:57:51 <days> :t msum'
19:57:53 <lambdabot> error:
19:57:53 <lambdabot>     • Variable not in scope: msum'
19:57:53 <lambdabot>     • Perhaps you meant ‘msum’ (imported from Data.Foldable)
19:59:17 <gbd_628> I'm having trouble with some types. I've made a dimension-indexed matrices (so Matrix :: Nat -> Nat -> Type -> Type), defined as a vector of vectors. I made a pattern synonyms for an empty matrix, but the compiler errors when I try to match on it.
19:59:24 <gbd_628> Here's the code and the error: https://gist.github.com/greatBigDot/ad40b16cab8ea165842f52efed8a8bf6
19:59:48 <gbd_628> Anyone know what's going on here? I don't understand why the compiler doesn't like it.
20:00:08 <days> Control.Monad.Plus.msum' :: (MonadPlus m, Foldable t) => t (m a) -> m a
20:01:30 <days> gbd_628: no, you have a polymorphic type for test
20:01:42 <days> you cant match on the specific type of the pattern
20:02:12 <days> you need to have test be a class member, with an instance for different types of kind Nat
20:02:41 <days> thats why its saying it cant match n with Z
20:03:35 <days> just change m and n in the type of test to Z
20:03:59 <days> but yeah, thats not using the pattern, as its already done that at type level
20:04:02 <gbd_628> days: But then, why is it possible to pattern-match on `VNil`  in  `test :: Vec n a -> ()`?
20:04:35 <days> the GADT constructor?
20:04:44 <gbd_628> Yeah
20:04:58 <days> because that gives the return type...
20:05:32 <days> GADTs instead of having kind signatures have the kinds specified at the params provided
20:05:56 <iqubic> Do we have Standalone Kind Signatures yet?
20:06:06 <days> so the type of the constructor kind of returns information at kind level, connecting the type and kind levity
20:06:42 <days> im not sure you can addorn a pattern with something similar
20:09:05 <gbd_628> Sorry, I'm confused... Isn't the type of `VNil :: Vec 'Z a`? That isn't polymorphic, but you can still pattern match on it for the polymorphic `test2 :: Vec n a -> ()`. I thought the empty matrix would be analogous to the empty vector here...
20:09:15 <days> yeah sorry what i said is totally wrong
20:09:55 <days> the point is that if test2 was given a VNil it fixes n
20:10:18 <days> thats what the type signature of the constructor enables
20:10:32 <days> you didnt provide similar information when writing the pattern
20:10:46 <days> which could be ghcs fault...
20:11:16 <gbd_628> So why doesn't that work with `MZero`? We have `MZero :: Matrix 'Z 'Z a`, so why doesn't that fix `m` and `n`?
20:12:02 <days> seems like the pattern syntax is less developed than GADTs, but at this point it would be better if someone that knew how could interject
20:12:41 <days> I'm just guessing thats the case because of the error your experiencing 
20:13:26 <days> basically, i dont know why that doesnt work... and I think you could be right to suspect that it should
20:15:24 <gbd_628> okay, thanks.
20:16:39 <days> basically, whenever I get error like that where it complains about polymorphicity and specialization not matching up I think its time to make a class.
20:16:47 <days> for type level programming stuff 
20:16:53 <gbd_628> huh... If I add in singleton arguments to make it `test :: SNat m -> SNat n -> Matrix m n a -> ()`, then `test SZ SZ MZero = ()` works...
20:16:59 <days> but yeah, not sure about patterns and classes...
20:17:53 <days> gbd_628: I bet it would work with proxies or type applications then, try AllowAmbiguousTypes
20:20:01 <gbd_628> how would I use type applications here?
20:20:17 <days> well, to provide the same information as the singletons
20:20:29 <gbd_628> do you mean `test @Z @Z ...`? I don't think that's allowed
20:20:35 <days> you dont need the value level information, so the SNats can be just proxies
20:21:06 <days> and normally when proxies are used, type applications can be instead. 
20:22:37 <days> actually it looks like your just writing the signature of test in a strange way, like via partiall application of the singletons, your making a type equality constraint that the polymorphic variables are restricted to Z
20:23:20 <days> i think you might as well write; test :: SNat Z -> SNat Z -> Matrix Z Z a -> ()
20:25:11 <gbd_628> Well later I want it to work on nonzero matrices too, I'm just looking for a convenient way to work with functions out of a Matrix
20:25:28 <gbd_628> *nonempty
20:26:19 <days> right, but if you tried to give it; test (Succ SZ) (SZ) wouldnt that give an error as it tries to match (Succ Z) to Z
20:28:27 <gbd_628> And I figured breaking it into the empty/nonempty cases would probably be useful to recursively define various functions (it is with vectors after all)
20:28:47 <days> whats the type of test?
20:28:48 <gbd_628> I don't think so, it would just go to a later pattern
20:29:16 <gbd_628> gbd_628: wouldn't it? It would fail that test Z Z clause, but I'd have later clauses to do stuff with the nonempty case
20:29:19 <days> right, but handling the basecase ni a recursion sounds like you need classes
20:29:43 <days> you have a constraint that the class has an instance of the recursive call, and it recurses down to the instance of the basecase
20:30:22 <days> your wanting one function to take two different types, thats what classes are for
20:30:27 <gbd_628> so what, I'd make a class for every utility function out of matrices I want to make?
20:31:30 <gbd_628> I guess what's confusing me the most here is that I thought this would be as simple as with length-indexed `Vec`s. In that case, you don't need classes, you usually just have two clauses: one for the `Vec 'Z a` case and one for the `Vec ('S n) a` case.
20:39:54 * hackage swish 0.10.0.3 - A semantic web toolkit.  https://hackage.haskell.org/package/swish-0.10.0.3 (DouglasBurke)
21:03:22 <elementaltamago> Does anyone here know much about optics? I developed a form of Lens that I have not seen anywhere, but assume isn't new, and am interested if there is a more profound formulation
21:05:59 <glguy> elementaltamago: you should just explain what you have instead of waiting for someone in particular to commit to hearing about it
21:06:50 <elementaltamago> I am making a game in Haskell. I wrote typeclasses for the various game elements, and wanted to establish class methods for performing various updates
21:07:28 <elementaltamago> A typical update in the game logic will then take a lens to various elements, and can access whatever they need to from other nested lenses that are provided by the typeclass
21:07:40 <elementaltamago> The issue is that with normal lenses, you can mutate the entire object
21:08:27 <elementaltamago> I might want to say something more like "Here is a player. You can drill down into the player, and into the player's items, and modify their stats, thus producing a function of type Player -> Player, but you cannot arbitrarily rewrite the player"
21:08:34 <elementaltamago> So I don't have a Lens Game Player
21:08:39 <elementaltamago> I have a RestrictedLens Game Player
21:09:18 <elementaltamago> Restricted Lenses can be composed with Lenses to produce the actual updates, and can be composed with other restricted lenses to make more restricted lenses
21:09:44 <elementaltamago> This is like a having immutable pointers that are readonly, but you can follow where they point to until you encounter mutable data, and then modify that
21:17:59 <winny> is git.haskell.org down
21:18:26 <winny> seems like it
21:31:38 <lyxia> winny: you mean gitlab?
21:52:39 <days> elementaltamago: I dont see how thats different from normal lenses
21:52:58 <days> isnt the idea of there being a "restriction" simply the lack of an instance for some leaf type?
21:53:44 <days> like, instead of having nested record accessors, you have a synonym corresponding to some location
21:53:59 <days> thats the various lesnses
21:54:10 <elementaltamago> I'm not sure I follow
21:54:11 <days> so either you provide those synonyms or you dont
21:54:26 <days> seems like instances would be the best way to do that
21:54:51 <elementaltamago> Can you say more about synonyms?
21:55:42 <days> your not making a new type of lens, a "restricted" lens, you just have a lack of lenses, a finite number of "has" Lens instances
21:56:05 <days> the synonyms would go into these instances
21:56:32 <days> not sure, maybe you could (or would need) a type level symbol as a "tag" for the different lenses
21:56:47 <elementaltamago> Essentially the idea is that I have a hook into something for which I do not have a lens, but I can use this hook with other lenses
21:57:03 <days> like, something at type level like how you would have a value level synonym "name" 
21:57:39 <days> hmm, if you want to compose them then you might need some of the Data.Constraints machinery with Dictionaries etc
21:58:04 <elementaltamago> So imagine if I have a game with a bunch of players that all have items
21:58:13 <elementaltamago> I want to have the ability to mutate the items on the players, say
21:58:15 <days> you would provide the tag as a TypeApplication
21:58:20 <elementaltamago> But not just rewrite the players arbitarily
21:58:49 <days> i you would write getLens @PlayerRecordToModify
21:59:04 <elementaltamago> So I provide this "restricted" notion of lensing where I can compose with the actual lens into item stats, to mutate them. This produces updates of type Player -> Player, but I don't allow arbitary player updates, just the ones that mutate what they are allowed to
21:59:11 <days> right, it could not rewrite fields for which you had given no instance
21:59:44 <elementaltamago> The problem if you have a full lens is that you can set a player to be a copy of another player
22:00:10 <elementaltamago> it's not just an issue of protecting certain fields from overwrites, it's also the structure globally
22:04:20 <days86> i guess it would be data Lens a b = Lens {getter :: a -> b,setter :: b -> a -> a}; class LensInstance lensTag playerType valueType | playerType,lensTag -.> valueType where getLens :: Lens playerType valueType
22:06:10 <days_> elementaltamago: not sure what you mean about the global structure being copy protected... 
22:08:27 <elementaltamago> I mean if I have a Game that has a list of Lens Game Player, I shouldn't be able to use that to set one player to be a copy of another. (or set one item to be a copy of another item on a player, etc)
22:08:41 <elementaltamago> I should only be allowed to change a larger structure as a result of mutating a mutable part of its substructure
22:19:33 <winny> lyxia: right, ran into some link rot, thanks
22:31:09 <Axman6> @hoogle fold
22:31:10 <lambdabot> Data.Foldable fold :: (Foldable t, Monoid m) => t m -> m
22:31:10 <lambdabot> Data.IntMap fold :: Whoops "Data.IntMap.fold' is gone. Use Data.IntMap.foldr or Prelude.foldr." => (a -> b -> b) -> b -> IntMap a -> b
22:31:10 <lambdabot> Data.IntSet fold :: (Key -> b -> b) -> b -> IntSet -> b
23:10:54 * hackage multi-containers 0.1.1 - A few multimap variants.  https://hackage.haskell.org/package/multi-containers-0.1.1 (zliu41)
23:55:35 <dmj`> It'd be cool if there was a tool that could convert a haskell expression into a lens equivalent, where applicable
