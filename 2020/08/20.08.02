00:29:42 <ukari> I make a instance for the class Num, but I don't need some class method like signum, is there something like minimal pragma which could tell ghc to disable methods like signum which I don't need in the compile time?
00:59:36 <dmj`> ukari: no, all valid Num instances need signum
01:58:08 <maralorn> What library should I use such that I can painlessly deal with paths like "~/../dir"?
02:06:27 <maralorn> I mean I really only care about ~, but I think it would be ridiculous to do that myself.
02:06:53 <maralorn> That has to be a solved problem.
02:11:24 <sshine> filepath won't work?
02:13:05 <sshine> ah, no ~ expansion
02:13:32 <sshine> maralorn, how about Glob?
02:17:07 <sshine> hm, can't see that it expands ~ either.
02:33:49 <ADG1089> > \e a -> if e == 0 then a else e
02:33:51 <lambdabot>  <Integer -> Integer -> Integer>
02:34:06 <ADG1089> can i write this succintly
02:34:18 <ADG1089> i.e. `e or a` as in python
02:34:38 <Rembane> f 0 a = a; f e _ = e 
04:12:48 <xwvvvvwx> I started watching this Edward Kmett talk on the lens library, and he mentions that the (.) operator can itself be composed (e.g. as `(.).(.)`), but I don't understand how to use it
04:13:07 <xwvvvvwx> From ghci it has type: (.).(.) :: (b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
04:13:46 <xwvvvvwx> Which I think means that it takes a single argument function and a two argument function and composes them to produce a new two arg function
04:14:14 <xwvvvvwx> However, when I try to write some code with this operator I get a bunch of weird type errors and I don't really understand what's going on
04:14:24 <xwvvvvwx> The code is here: https://ipfs.io/ipfs/QmeC1RCkMLqhExxZfCBXKc8vynAU6LqDLYdjXAgwefRQTv/tmp.html
04:14:34 <xwvvvvwx> What am I doing wrong?
04:15:16 <sureyeaah> f g a b = f (g a b)
04:15:44 <sureyeaah> Sorry mindfuck
04:16:18 <xwvvvvwx> What do you mean?
04:16:23 <xwvvvvwx> Is `(.).(.)` not infix?
04:17:16 <MarcelineVQ> ((.).(.)) is prefix not infix,  so you'd write  ((.).(.)) dubStr strAdd   further you've required the explicit arguments x and y for dubStrAdd but you don't use them
04:18:12 <sureyeaah> ((.).(.)) f g = \a b -> f (g a b)
04:19:05 <sureyeaah> I'm being stupid sorry
04:19:27 <xwvvvvwx> aha!
04:19:29 <xwvvvvwx> it works
04:19:32 <xwvvvvwx> awesome!
04:19:37 <xwvvvvwx> thanks so much :) :) :)
04:26:57 <maralorn> I have now looked at 5 different filepath libraries and none of them seem to have “~" expansion.
04:29:14 <maralorn> I have to be overlooking something, but my hoogle-foo is too weak
04:34:33 <MarcelineVQ> maralorn: If that's the case you might need to add it yourself, you can query environment variables in System.Environment, e.g. lookupEnv "HOME"
04:35:35 <MarcelineVQ> If it's not a thing it might not be a thing because expanding ~ is a shell thing, which makes it a messy thing, but I don't really know
04:37:02 <maralorn> MarcelineVQ: Yeah, I can certainly do it on my own. But it feels like such a common need.
04:37:38 <MarcelineVQ> it does doesn't it, the directory package even refers to ~ yet filepath (the most common path package) doesn't refer to it
04:39:36 <maralorn> I would have really expected System.Directory.canonicalizePath to do it, but it does not say so and does not do so... 
04:54:26 <tintint> Do people have opinions? Should we be explicit about what we export and import into module?
04:56:44 <thblt> tintint: the answer to your first question is yes.  Re the second, most modules I've read are explicit on their *exports*.  
04:57:29 <Cheery> it helps reading if I know where they're from.
04:59:25 <phadej> https://wiki.haskell.org/Import_modules_properly
05:01:33 <maralorn> So I looked at the code of a dhall, it normalizes ~ in its own... 
05:02:00 <tintint> :maralorn what do you mean by that? 
05:02:04 <maralorn> Wondering what other source codes I could look at... 
05:03:46 <tintint> :thblt so will you you do that with library dependencies?
05:04:32 <maralorn> tintint: still looking for a library that does ~ expansion in a given filepath.
05:04:59 <tintint> :phadej thanks for the link
05:05:19 <maralorn> I knew that dhall does work with imports that contain ~ so I looked how they deal with it.
05:06:52 <L29Ah> i want to call haskell from my inline c (to get the next chunk of a lazy bytestring); do i get it right that i can't use unsafeDupablePerformIO for this code (and it can't be run in parallel as a consequence)?
05:07:23 <maralorn> But by now I have thrown much too much time on finding a library that does it compared to just implementing  it on my own 
05:08:49 <[exa]> L29Ah: why unsafePerformIO when you can export it as IO action?
05:10:07 <[exa]> (*dupable*)
05:10:30 <thblt> maralorn: you could just map over the result of splitPath, I think, but you probably need IO at some point.
05:12:53 <L29Ah> [exa]: because my function is pure, so i don't want to pour IOs around needlessly
05:13:10 <phadej> maralorn: paths expands homedir. https://hackage.haskell.org/package/paths-0.2.0.0/docs/System-Path.html
05:13:45 <phadej> when you create a FsPath, it figures out what it is relative to in: https://hackage.haskell.org/package/paths-0.2.0.0/docs/src/System.Path.Internal.html#fromFilePath
05:14:06 <phadej> and when you makeAbsolute it, it will do what's needed
05:14:20 <maralorn> thblt: I know that I need IO. I just don't like the idea of implementing it on my own.
05:14:22 <phadej> e.g. https://hackage.haskell.org/package/paths-0.2.0.0/docs/src/System.Path.Internal.html#line-357
05:14:30 <maralorn> phadej: <3
05:15:04 <phadej> I like that `Path root` design
05:15:16 <phadej> (vs. just Path Absolute / Path Relative)
05:15:51 <maralorn> Yeah, dhall does it like that internally as well.
05:16:23 <phadej> we added XDG directories as valid roots, in HEAD, but fromFilePath doesn't know about these
05:16:30 <phadej> ... as there isn't any convention
05:17:00 <phadej> one of my goal is to make that design into Cabal/cabal-install
05:17:11 <phadej> so you can have `store-dir: $xdgcache/cabal/store`
05:17:47 <phadej> but there's plenty of work to do before that :/
05:28:08 <maralorn> phadej: but it sounds great 
05:31:52 <maerwald> phadej: what's the advantage over abs/rel
05:42:46 <maerwald> also, I'm able to break it easily: takeFileName . fromAbsoluteFilePath $ "/"
05:43:23 <maerwald> returns: Path ""
05:43:26 <maerwald> but https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_170
05:43:51 <maerwald> although you could argue it's valid
05:44:00 <maerwald> since it's a path, not a filename
05:44:10 <maerwald> at least on type level
05:44:30 <maerwald> but takeFileName should returne a filename, no?
05:49:56 <thblt> maerwald: if there's one.
05:50:10 <thblt> there's none in /
05:52:19 <maerwald> imo, it's bad API
05:52:42 <maerwald> it's good to have the guarantee "a path is never empty"
05:53:52 <maerwald> do you know what happens if you pass empty path to syscalls, for example
05:57:50 <thblt> But what would you expect takeFileName to do with /?  It can't return "/".  
05:58:52 <thblt> A Maybe wrapper could make sense.
06:04:46 <L29Ah> do i get it right that functions like `alloca` have a chance not to free the allocated memory if they're called from within unsafeDupablePerformIO?
06:08:24 <maralorn> phadej: What do you think about also providing the functions in System.Path.IO in the alternative of taking FsPath instead of FsRoot
06:17:10 <L29Ah> ok, i see packages like bytestring and cryptohash allocating in unsafeDupablePerformIO so it's probably good
06:34:59 <phadej> maerwald: in type you can talk about path-fragment like "foo" (i.e. without directory separators), but you cannot talk about "filename" or "directoryname", as that depends on what's on the filesystem
06:35:35 <phadej> you can have phantom annotations, to express your intent, but I find that choice to be quite opinionated
06:36:00 <merijn> phadej: Well, if maerwald is one thing, it's opinionated ;)
06:36:07 <phadej> merijn: yep
06:36:23 <phadej> especially about filepaths ;)
06:36:40 <phadej> one can argue that takeFileName :: Path -> Maybe PathSegment
06:37:27 <phadej> (Path ~ [PathSegment], takeFileName ~ last)
06:38:02 <phadej> at least for tree-like filesystems
07:08:07 <maralorn> Are there non-treelike filesystems?
07:10:48 <thblt> Git, in some way?
07:13:45 <maerwald> phadej: yes, I use MonadThrow for takeFileName
07:13:58 <maerwald> it's a lit less annoying in IO
07:15:15 <maerwald> phadej: related https://github.com/commercialhaskell/path/issues/18
07:15:23 <maerwald> they also fixed it with a trick
07:17:38 <maerwald> but trying to do it properly quickly leads to closed type family approaches that are just annoying
07:28:41 <phadej> maralorn: modern example is S3
07:29:32 <phadej> but arguably, you should use some different abstraction for S3 object names than `FilePath`
07:31:58 <phadej> although, it's all strings anyway
07:38:20 <phadej> and yes, Git also, which is VCS on top of content-addressable-storage
07:39:08 <phadej> add a padding to objects, and require hashes to start with few zeros to make it into PoS system. Cannot commit too often!
07:39:26 <phadej> sorry, PoW system.
07:54:58 <kiwi_45> hello all
07:55:50 <kiwi_45> which files  I should copy to remote server so that my executable runs there ? I'm using stack btw. 
08:06:36 <L29Ah> https://hackage.haskell.org/package/lz4-hs-0.1.4.1/docs/src/Codec.Lz4.html#compressSz why does this use ST even though there's no STRef's?
08:07:06 <L29Ah> kiwi_45: consider static linking
08:07:52 <kiwi_45> how to do in stack setting ?
08:08:26 <kiwi_45> L29Ah ^^
08:10:16 <frdg> I spent a lot of time on this function and it works as I would like but it just seems messy. I would appreciate feedback. https://dpaste.org/Zrf8
08:10:59 <L29Ah> kiwi_45: dunno, i don't use stack
08:11:12 <frdg> left out the type synonyms: https://dpaste.org/5pwQ
08:12:06 <L29Ah> frdg: you don't need (,,) as prefix here
08:14:24 <frdg> good point. Ill see if I find it more readable as infix
08:15:41 <frdg> ya less parens this way
08:25:47 <tomsmeding> frdg: any reason why you're constructing a data row as a : b : c : d : [] instead of just [a, b, c, d]?
08:29:48 * L29Ah smells lisp
08:30:44 <frdg> tomsmeding: the aesthetic just looked better to me. Is there a good reason to do it the other way?
08:31:03 <tomsmeding> there is literally no difference in meaning
08:31:28 <tomsmeding> just took me a while to realise you're "just constructing a list"
08:34:23 <frdg> I think I agree that the intent is more clear with your suggestion
09:21:58 <jumper149> How should I write a filepath in haddock documentation? /asd/ makes it cursive and removes the slashes.
09:22:28 <monochrom> perhaps \/
09:22:32 <jumper149> Just noticed that escaping works :)
09:22:44 <jumper149> Was still hoping for a more dedicated syntax
09:22:55 <monochrom> https://haskell-haddock.readthedocs.io/en/latest/index.html
09:40:10 <nil> frdg: perhaps deconstruct timesAndData at the binding site, to avoid having to use fst and snd?
09:43:43 <nil> frdg: you could also delegate the recursion to map/concatMap
09:50:26 <nil> frdg: suggestion: https://up.monade.li/MvCn8Y
09:59:33 <statusfailed> Does "cabal repl" ignore conditional blocks in the .cabal file?
10:02:59 <monochrom> I think no.
10:03:42 <monochrom> But mind that some "condition"s (but not all) have Prolog semantics, not Algol semantics.
10:05:09 <monochrom> E.g., "if f then build-depends: base < 3 else build-depends: base >= 3" means that since base<3 cannot be satisfied, f is forced to be false.
10:20:51 <statusfailed> monochrom: the block I'm having trouble with seems to work fine for "cabal build" (without flag) but fails when I "cabal repl" (without flag)
10:20:57 <statusfailed> so I'm confused how that would happen
10:21:01 <amf> is there a good library on hackage that abstractly represents a file system? something like https://github.com/spf13/afero
10:36:12 <ADG1089> @hoogle Integer -> Ratio Double
10:36:13 <lambdabot> System.Random.PCG uniformD :: Generator g m => g -> m Double
10:36:13 <lambdabot> System.Random.PCG.Class uniformD :: Generator g m => g -> m Double
10:36:13 <lambdabot> System.Random.PCG.Fast uniformD :: Generator g m => g -> m Double
10:36:21 <ADG1089> @hoogle Integer -> Double
10:36:22 <lambdabot> Basement.Floating integerToDouble :: Integer -> Double
10:36:22 <lambdabot> Math.ExpPairs.Ivic kolpakova2011 :: Integer -> Double
10:36:22 <lambdabot> Data.HyperLogLog.Config smallRange :: Integer -> Double
10:36:30 <ADG1089> @hoogle Double -> Ratio Double
10:36:30 <lambdabot> XMonad.Actions.Volume raiseVolume :: MonadIO m => Double -> m Double
10:36:30 <lambdabot> XMonad.Actions.Volume lowerVolume :: MonadIO m => Double -> m Double
10:36:30 <lambdabot> Boltzmann.Data doubleR :: MonadRandomLike m => Double -> m Double
10:39:41 <c_wraith> :t realToFrac
10:39:43 <lambdabot> (Real a, Fractional b) => a -> b
10:40:27 <c_wraith> ADG1089: realToFrac and fromIntegral handle those three conversions
10:47:53 <ADG1089> is there a venn diagram to explain numerical types in haskell
10:48:01 <ADG1089> I saw something helpful: https://wiki.haskell.org/Converting_numbers
10:48:47 <monochrom> There is a non-venn diagram in Haskell 2010 Report section 6.4
10:56:03 <ADG1089> Is there a higher precision decimal?
10:56:43 <jumper149> `Rational = Ratio Integer` has infinite precision
11:00:22 <ADG1089> Yes I should learn to use realToFrac
11:02:20 <jumper149> ADG1089: Rational doesn't have a Floating instances though. So you should be careful there.
11:03:55 <ADG1089> c_wraith: Thanks, solved #235: https://github.com/adityagupta1089/Project-Euler-Haskell/blob/master/src/problems/Problem235.hs
11:05:42 <ski> monochrom : Euler diagram ?
11:26:19 <gmt> Does anyone know of any code that uses Kmett's 'perhaps' library?
11:29:32 <xe4> ghcid is failing to run. it seems to be failing on the -fno-break-on-error flag in the command that it's using: ghci -fno-code -fno-break-on-exception -fno-break-on-error -v1 -ferror-spans -j
11:29:56 <xe4> does anyone recommend a course of action which might enable it to run as expected?
11:42:37 <xe4> I get the same error (No files loaded, GHCi is not working properly.) with ghcid --poll --command "ghci"
11:54:51 <tomsmeding> xe4: can you start ghci normally? Does ghcid give any more info, perhaps with --verbose ?
12:50:19 <sm[m]> weird.. when I start a yesod app from ghci, even after a stack clean and touching various hs files, it does not show recent changes in hamlet templates. What could explain that ?
12:50:50 <sm[m]> when started via yesod devel, the changes are shown
12:51:28 <dmj`> sm[m]: are you using 'stack ghci' or just 'ghci'
12:51:52 <dmj`> sm[m]: each command might be referencing different folders with different object files
12:51:56 <sm[m]> dmj`: stack exec -- ghci  -rtsopts -Wall -fno-warn-unused-do-bind -fno-warn-name-shadowing -fno-warn-missing-signatures -fno-warn-orphans -fno-warn-type-defaults  -ihledger-lib -ihledger-lib/other/ledger-parse -ihledger -ihledger-ui -ihledger-web -ihledger-web/app    -DPATCHLEVEL=224 -DDEVELOPMENT -DVERSION="\"1.18.99\""  hledger-web/app/main.hs
12:58:23 <sm[m]> pretty sure this used to work if you just touched the hs file including the hamlet file, but it has been a while
12:58:46 <sm[m]> have verified there's only one copy of this hamlet file
13:15:44 <merijn> sm[m]: Is the hamlet file being included via TH?
13:16:04 <sm[m]> yes
13:23:44 <merijn> ah, wait, I was thinking something different, ignore me :p
13:30:27 <dmj`> sm[m]: is the browser caching too aggressively
13:36:50 <hseg> hrm. given a module signature S defining a type T, how do I say "P depends on signature S s.t. T=Int"?
13:37:29 <sm[m]> dmj`: I don't think so, shift reload doesn't help and I've never seen it do that before
13:37:42 <sm[m]> I thought I might have a stray old process running on that port, but it seems not
13:37:45 <sm[m]> mystified
13:39:11 <hseg> nm, looks like just dropping in another signature named S with contents "type T = Int" works
13:52:15 <orion> Is there a particular reason why Data.HashMap isn't included in cereal? Is there some property of HashMaps that make them difficult to serialize?
13:58:52 <infinisil> orion: Probably because HashMap isn't in its dependency tree already
14:00:19 <infinisil> orion: https://hackage.haskell.org/package/cereal-plus seems to have more dependencies and instances for them
14:01:18 <int-e> there's also a https://hackage.haskell.org/package/cereal-unordered-containers
14:03:55 <int-e> and https://hackage.haskell.org/package/bytes which is far more popular than either cereal-plus or cereal-unordered-containers
14:05:54 <int-e> now how exactly does that connect to cereal, hmm
14:22:27 <orion> int-e: I only ask because I am using safecopy, which relies on cereal for most things. I technically don't have to use cereal though.
14:22:44 <orion> I could throw a newtype wrapper around my HashMap and use whatever.
14:24:20 <orion> Actually, I am mistaken. safecopy's typeclass is in terms of Get and Put from cereal, so I am stuck with it.
14:31:00 <Cheery> http://boxbase.org/entries/2020/aug/3/case-against-oop/
15:28:03 <justsomeguy> Cheery: Neat article. Recently I've been reading about Alan Kays vision of OOP, which seems pretty different than OOP as in Java or C++. This comment of his was interesting to me ... https://computinged.wordpress.com/2010/09/11/moti-asks-objects-never-well-hardly-ever/ , control-f for "16. Alan Kay" He also wrote an article http://worrydream.com/EarlyHistoryOfSmalltalk/, where he says things like "Assignment statements—even abstract 
15:28:04 <justsomeguy> ones—express very low-level goals, and more of them will be needed to get anything done. Generally, we don't want the programmer to be messing around with state, whether simulated or not."
15:41:34 <boxscape> Hm why would going from +RTS -N1 to +RTS -N8 (I have 4 physical and 8 logical cores) almost double the time my program takes to complete? Is there that much overhead?
15:45:39 <Cheery> justsomeguy: there's something interesting there that might give a reason to link it to the article.
15:45:51 <Cheery> "I think the remedy is to consign the current wide-spread meanings of “object-oriented” to the rubbish heap of still taught bad ideas, and to make up a new term for what I and my colleagues did."
15:47:43 <Cheery> the OOP paint is funny as well.
15:50:36 <justsomeguy> Cheery: I wish he had called it "cellular programming", instead. I think it's the overall vision of how programmers interact with programs as living organisms that can choose how to react to messages that matters. All the implementations I've seen fall short of that, but playing with Pharo Smalltalk at least gave me an inkling of the intent. C++/Java/etc are seem to have a completely different vision of what OOP means than what Kay 
15:50:37 <justsomeguy> intended.
15:51:09 <justsomeguy> ~ Sincerely, another guy who doesn't understand OOP.
15:52:32 <justsomeguy> Honestly, I don't have the programming experience to back up my pretty abstract ideas, here, but I find it interesting to think about these things.
15:53:48 <Cheery> justsomeguy: what's the most recent document alan kay has written about it?
15:55:29 <Cheery> btw. hilariously this has happened with design patterns as well.
15:55:58 <Cheery> if you try to search for design patterns, alexander's things are secondary.
15:56:37 <Cheery> functional going the same way as it's being "borrowed".
16:00:41 <justsomeguy> Cheery: I don't have much to point you to other than the two links I've already posted. Interacting with https://pharo.org/ (also checkout "features"), which is an IDE that feels like it's own internal universe, has definitely informed my opinions about OOP, however.
16:01:37 <justsomeguy> Cheery:  It get the impression that there is a cycle where brilliant ideas emerge, then someone makes an implementation that misses an essential feature of the idea, and then others learn from that implementation, which co-ops the idea, and that is refuted after years.
16:14:16 * justsomeguy will stop rambling now, and get back to learning haskell
16:16:52 <frdg> is it possible to get the names of record functions for a type as strings?
16:17:39 <solonarv> frdg: yes, there are several ways depending on what you need them for
16:18:17 <frdg> I just want to pass a type and get the names of the records in a list
16:18:26 <solonarv> you can access them with Template Haskell, GHC's Generic mechanism exposes them as well
16:18:41 <solonarv> and I think the Data stuff might also give you field names but I'm not sure
16:20:10 <frdg> ok ill look at generics first. Any idea what this is called?
16:20:41 <solonarv> the M1 nodes in 'Rep' contain this sort of information
16:20:56 <solonarv> you could look at e.g. aeson for examples
16:21:21 <frdg> alright thank you
16:29:46 <dsal> frdg: Are you doing this with a value, or just the type?
16:30:23 <frdg> dsal: value
16:31:44 <dsal> The obvious way is to marshal it to json and then unmarshal it to an aeson value and iterate the fields.  (or just do what aeson does with generics)
16:32:05 <dsal> (also, only semi-serious if you just want a dumb hack vs. real code0
16:34:12 <frdg> in general I feel like I'm moving in the direction of a dumb hack and should re-consider what I am doing 
16:34:41 <frdg> but it would also save me a couple of hours 
16:42:12 <sm[m]> that's not to be sneezed at!
17:04:07 <ddellacosta> frdg: this is dsal's little hack. Nice idea, I don't think it's that obvious https://gist.github.com/ddellacosta/960ba8b624aef82bd3e4d57e8b8e8c18
17:07:18 <ddellacosta> and you can probably do something smarter if you have a tree-like structure
20:08:11 <CitizenS-> #jsoo
23:23:02 <hyiltiz> Is there an automatic memoization method? Ideally it would take any function and return it's memoized version 
23:24:19 <hyiltiz> Seems like something as useful as this shouldn't be reinvented everytime it is needed
23:30:22 <Cale> hyiltiz: See the data-memocombinators package
23:31:04 <Cale> It could be more extensive, but it's a decent start.
