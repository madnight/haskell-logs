01:32:06 <tintinthong> What do people use to format haskell code?
01:32:33 <tintinthong> Something similar to prettier
01:32:38 <tintinthong>  Not a linter 
01:32:52 <tintinthong> per se
01:36:48 <Arahael> I use brittany.
01:37:06 <fendor> I think most common are: brittany, stylish-haskell, ormolu and floskell
01:37:13 <tintinthong> Arahael have you tried stylish-haskell.. any comparison points
01:37:15 <tintinthong> ??
01:37:25 <Arahael> tintinthong: Nope.
01:37:29 <fendor> stylish haskell doesn't do enough in my opinion
01:37:32 <tintinthong> yes 
01:37:35 <tintinthong> exactly
01:37:58 <fendor> it mainly organises imports, iirc. 
01:38:46 <fendor> The problem with opioniated formatters such as ormolu is that they some-times break the code in a totally illegible way
01:39:09 <tintinthong> hlint wouldnt be able to pick it up? 
01:40:07 <fendor> hlint is not a formatter but only lints
01:41:52 <tintinthong> I was thinking after a misformat by ormolu. the linter should still be able to guard against errors. 
01:43:41 <fendor> ormolu does not produce invalid code, it is just that the formatted result might look horrible in the eyes of some programmers
01:46:51 <tintinthong> ah right. ok. I thought you were saying that formatter break the code. 
01:50:01 <tintinth`> ls
01:50:04 <fendor> no, sorry, I meant line-breaks, etc...
01:50:32 <fendor> Desktop  Documents  Downloads  Music  Pictures  Templates  Videos
01:51:28 <tintinth`> s
01:51:47 <tintinth`> right i c
01:52:19 <tintinth`> @fendor which editor do you use?
01:52:19 <lambdabot> Unknown command, try @list
01:53:00 <fendor> tintinth`, vs-codium 
02:37:05 <hololeap> getSum . foldMap Sum . snd . mapAccumR (\c i -> (c+1, fromIntegral i * 256 ^ c)) 0 . BS.unpack <$> getRandomBytes 256 :: IO Integer
02:37:29 <hololeap> this seems to work
02:39:13 <hololeap> oops... almost forgot about `sum`
02:39:18 <hololeap> sum . snd . mapAccumR (\c i -> (c+1, fromIntegral i * 256 ^ c)) 0 . BS.unpack <$> getRandomBytes 256 :: IO Integer
02:41:18 <hololeap> sum = getSum . foldMap Sum
04:11:48 <whataday> value has MaybeT IO a or value has ErrorT e IO a both can use in do natation in main?
04:27:41 <whataday> MaybeT IO a and ErrorT e IO a could show up in IO's do notation?
04:37:31 <Polesch> Can you compile haskell source on Ubuntu to a windows executable?
04:39:51 <merijn> whataday: No, everything in a do block has to have the same type
04:40:03 <merijn> And main has to have type "IO a" (for some value of 'a')
04:40:14 <merijn> Polesch: In theory or practically? :p
04:40:24 <Polesch> Practically :P
04:40:42 <merijn> Polesch: It should be possible, if you manage to setup the correct toolchain, but doing that will be a massive, massive pain to the point where I recommend not bothering
04:40:53 <Polesch> Right, got it.
04:40:55 <merijn> Polesch: You're better of just installing windows in a VM and compiling there
04:54:06 <whataday> ok
04:54:54 <Digit> i recommend bothering.
05:06:00 <Digit> depends how much more/less a pain managing a windows vm, than being able to churn out for all platforms from your preferred development environment.
05:08:31 <Arahael> It generally is a pain - you can set up servers that continiously build your app for you - eg, as part of a version control system, they tend to be very very good when they're linux systems.
05:08:37 <Arahael> Can even dockerize it and all.
05:08:48 <Arahael> So if you can do it as a linux system, it's more flexible.
05:40:10 <phadej> luckily there are other people who manage windows CI machines for you
05:40:17 <phadej> and linux machines too, for that matter
05:40:39 <phadej> cross compiling to windows is indeed not worth the pain
05:41:09 <phadej> cross compiling to "toaster architecture" might be, if you don't to wait over night every time you want to compile your application :)
05:47:28 <Arahael> phadej: Frankly, why not?  It shouldn't be difficult to cross compile.
05:48:05 <Arahael> I mean, Rust and Go seem to cross compile just fine.
05:59:55 <sm[m]> building for windows with wine is pretty easy, or used to be
06:00:44 <sm[m]> but a GitHub ci script is easiest
06:01:50 <Arahael> sm[m]: Nice tip.
06:06:54 <yushyin> Arahael: must say rust's rustup does a really nice job in that regard. you install mingw, next rustup installs toolchain and target support and you are good to go.
06:07:59 <Arahael> There's lots to like about Rust.  Though language wise, I still prefer Haskell, I doubt that'll change.
07:17:36 <frdg> question regarding creating variables with IO that are based off of conditions, and then using these variables throughout the rest of the function. https://dpaste.org/5hKr
07:19:36 <poorlyknitsweate> You could do: omwCurWthr <- case basicCountryLoc loc of { Just a -> liftIO ... ; Nothing -> liftIO ... }
07:20:16 <poorlyknitsweate> (kinda pseudocode, but it shows you can use case right of <-(
07:20:31 <phadej> Rust have been implemented with cross compilation in mind from day one.
07:20:34 <phadej> GHC not so much
07:20:54 <phadej> so **it's difficult** to cross-compile, even it shouldn't be.
07:21:22 <frdg> poorlyknitsweate: I see what you did there
07:21:41 <frdg> this is exactly what I am looking for
07:22:01 <poorlyknitsweate> Nice. Glad I could help.
08:25:27 <ski> > 1%2 + 1%3
08:25:29 <lambdabot>  5 % 6
08:25:32 <ski> > 1%2 * 1%3
08:25:34 <lambdabot>  error:
08:25:34 <lambdabot>      • No instance for (Integral (Ratio Integer))
08:25:34 <lambdabot>          arising from a use of ‘e_11213’
08:29:26 <solonarv> oof, unfortunate
08:48:05 <lionrouge> hi !
08:48:33 <lionrouge> if anyone uses VSCode what is your best extension for Haskell? There are several and I wonder which is better
09:22:20 <fresheyeball> http://ix.io/2sSn
09:22:29 <fresheyeball> I can't figure out how to get my parser to behave
09:22:47 <fresheyeball>  λ.parseTest css sample
09:22:50 <fresheyeball> [Id "bar",Class "fo:o/3",Class "baz",Id "qux"]
09:22:59 <fresheyeball> but it should inclue z\\ie3_p
09:23:09 <fresheyeball> and it doesn't
09:23:19 <fresheyeball> not sure why the media parser is just not getting run here
09:31:36 <alehander92> praise God, some more time for learning
09:31:49 <alehander92> what is the best way to represent simple tuples?
09:32:03 <alehander92> i tent to use records for that, but it seems somehow un-haskelly to me 
09:32:21 <fresheyeball> use a tuple?
09:32:28 <fresheyeball> (1,2)
09:32:55 <alehander92> huh, it seems i got them mixed up with ADT-s
09:33:12 <alehander92> as usually i have more than one variant, so i can just combine them into one
09:33:39 <alehander92> ok, so do people prefer tuples, or naming explicitly each field with records
09:34:07 <alehander92> i guess because of pattern matching, tuples are usually good
09:36:20 <fresheyeball> alehander92: I don't understand
09:36:34 <fresheyeball> use a tuple if you need an anonymous structure with 2 values
09:36:37 <alehander92> sorry
09:36:57 <alehander92> what i meant was that it seems to me that not naming the fields doesn't really matter
09:36:58 <fresheyeball> if you want to have a semantic structure, use a record, and give each value a name
09:37:06 <alehander92> as people can name them while pattern matching
09:37:22 <fresheyeball> alehander92: it's true, but you can also pull them off by name
09:37:23 <fresheyeball> consider
09:37:30 <fresheyeball> data Person = Person 
09:37:32 <fresheyeball> grr
09:37:50 <fresheyeball> data Person = Person { first :: String, last :: String }
09:37:59 <fresheyeball> you could pattern match incorrectly
09:38:08 <alehander92> yes, i just wonder if it's idiomatic
09:38:10 <fresheyeball> case p of Person last first -> first ++ last
09:38:32 <alehander92> yeah, this makes sense: but if i use different types, this shouldn't be such a problem
09:38:41 <fresheyeball> but because hey are named you could use RecordWildcards to overcome this
09:38:50 <alehander92> but probably it's also better for mapping with data formats
09:39:03 <fresheyeball> case p of Person {..} -> first ++ last
09:39:09 <fresheyeball> different types help even more
09:39:20 <alehander92> seems nice yeah
09:39:29 <fresheyeball> so naming does matter
09:39:29 <alehander92> ok, next question
09:39:34 <fresheyeball> ok
09:39:36 <alehander92> i use elm for a client: do people
09:39:43 <alehander92> somehow reuse their haskell types
09:39:48 <fresheyeball> yes
09:39:50 <alehander92> or do they just copy paste them and refactor
09:39:53 <alehander92> as i did
09:40:06 <alehander92> as the syntax is a bit different
09:40:28 <alehander92> like, is there a way to just "import" type def file for simple data types 
09:40:37 <alehander92> which depend mostly on primitives
09:40:40 <fresheyeball> https://hackage.haskell.org/package/haskell-to-elm
09:40:55 <fresheyeball> there ya go :)
09:41:34 <fresheyeball> though you can also use haskell as your client
09:41:53 <fresheyeball> then you can share code
09:42:50 <alehander92> <3
09:42:52 <alehander92> this is cool.
09:43:13 <alehander92> hm, are you talking about something like fray
09:43:29 <fresheyeball> well I am the author of one
09:43:35 <fresheyeball> shameless plug
09:43:37 <fresheyeball> https://gitlab.com/fresheyeball/Shpadoinkle/-/tree/master
09:44:09 <alehander92> ugh, i forgot the name of a haskell-like lang for the browser
09:44:21 <fresheyeball> no I am talking about Haskell
09:44:27 <fresheyeball> not something Haskell like
09:44:32 <fresheyeball> PureScript is very good as well
09:45:15 <alehander92> ah ghcjs
09:45:33 <alehander92> yeah, i've heard of purescript, but elm probably seems most famous
09:45:45 <alehander92> and i gotta admit, it's errors are indeed cool
09:45:54 <fresheyeball> elm errors are great
09:46:05 <fresheyeball> but they are worse than Haskell errors by quite alot
09:46:25 <alehander92> your lib combines client and server code?
09:46:33 <alehander92> sounds as a good idea
09:46:38 <alehander92> i'll try to look at it these days
09:46:52 <alehander92> hm, yeah elm errors are pretty good maybe for beginners
09:46:55 <alehander92> but i just like the effort
09:47:00 <fresheyeball> yes
09:47:04 <alehander92> and this kind of attitude
09:47:15 <fresheyeball> If Evan wasn't an asshole, I would be more on board
09:47:41 <alehander92> i can't comment on that
09:47:50 <alehander92> ok, a last question for now
09:47:55 <fresheyeball> shoot
09:48:49 <alehander92> do people usually represent stuff like <Collection, active item in the collection> as ([t], t) or as ([t], Int) -- index or as ([t], activefunction)
09:49:04 <alehander92> or just with a more specific data structure
09:49:35 <fresheyeball> https://hackage.haskell.org/package/non-empty-zipper
09:49:40 <fresheyeball> another shamelss plug
09:50:23 <fresheyeball> there are a ton of ways
09:50:38 <fresheyeball> but I think a structure specific to your needs is generally best
09:50:53 <fresheyeball> avoid primitives unless they truely are semantic for your code
09:51:08 <fresheyeball> that includes native tuples, Ints, Strings, Text, all of that
09:51:28 <fresheyeball> use newtypes to give your types meaning
09:51:41 <alehander92> yeah, one problem with that is exactly interop
09:51:49 <Clint> fresheyeball: you might want to tweak the upper bound on base
09:51:50 <alehander92> e.g. if i use an elm or .. a typescript client
09:51:55 <fresheyeball> how so?
09:52:03 <fresheyeball> Clint: submit the code?
09:52:04 <alehander92> i now need to represent the same very custom data structure twice
09:52:13 <alehander92> but a combo of primitives is more obviously mappable
09:52:16 <Clint> fresheyeball: okay
09:52:23 <fresheyeball> alehander92: no
09:52:31 <fresheyeball> you get to have the cake and eat it to
09:52:45 <fresheyeball> newtype FirstName = FirstName Text
09:52:56 <fresheyeball> is lovely and documenting on the haskell side
09:53:07 <fresheyeball> and introduces no interop problems with typescript
09:53:25 <fresheyeball> newtype FirstName = FirstName Text deriving (ToJSON, FromJSON)
09:53:35 <fresheyeball> will work like it was never newtyped
09:53:41 <Clint> fresheyeball: looks like someone did already a year ago
09:53:48 <alehander92> yeah, but i think of stuff like nonemptyzipper
09:57:53 <fresheyeball> also not an issue
09:58:03 <Marked> Guyz.. is there difference between function and expression? if then else is expression but in fact it looks like a function a little bit.
10:02:24 <sm[m]> FYI: haskell love conference's day 2 is in progress on zoom, twitch and youtube: https://www.youtube.com/watch?v=hkWLPKj67uE , https://www.youtube.com/watch?v=WdAZxCi1784, https://haskell.love/agenda-day-2
10:06:41 <maralorn> Marked: There definitely is a difference because they are two different concepts.
10:07:29 <maralorn> Every function definition will be an expression in some way. But of course not every expression is a function. 
10:08:10 <maralorn> In the case of if you are right. It would totally be possible to write if as a function. 
10:09:45 <maralorn> Although there are intricacies with laziness and evaluation order involved.    Especially in a strict language it wouldn't be possible to write a reasonable if function.
10:14:55 <Marked> Thank you.. its hard to find article about it online. But these terms are often mentioned in tutorials and so on.
10:18:20 <maralorn> Marked: Function is a semantic name. E.g. a value that you mean with your code can be a function. Where value is more or less a syntactic term as in it refers to a piece of code which can be interpreted as a value. 
10:21:59 <maralorn> I think anything that can stand on the right hand side of an assignment is an expression.
10:22:01 <Marked> Hmmm..  I remember there is somewhere haskell specification, or reference.. I will try to look it up.
10:23:51 <maralorn> Marked: Yeah, I totally understand that it's a bit tough, because people have very precise meanings in mind for value, term, grammar, expression, function, etc. but they rarely specify it clearly. 
10:33:11 <c_wraith> the haskell report's grammar section names things like declaration, expression, and statement.  For haskell, those are a good standard meaning of each.
10:48:28 <Marked> thank you
11:11:13 <polezaivsani> Hi folks!  Skimmed through the docs and couple other places to no avail - how do i handle transitive dependencies with cabal?  e.g. i use package `foo` that exposes a type from package `text`.  Any better options to have exact same version of `text` as a dependency other than doing it manually?
11:11:55 <solonarv> polezaivsani: write just 'text' in your build-depends:  section
11:12:01 <solonarv> then run 'cabal gen-bounds'
11:12:25 <polezaivsani> solonarv: gracias!
11:12:28 <solonarv> it will output a tight version range for each package you depend on that doesn't already have a version range
11:12:34 <solonarv> copypaste that into your cabal file
11:13:35 <ddellacosta> solonarv did you just give that exact same help to someone like a day ago or am I going crazy? Or maybe it was someone else
11:13:51 <solonarv> must've been someone else or longer ago
11:14:07 <ddellacosta> I guess it's common enough. I just remember someone asking about text in particular.
11:14:08 <solonarv> I have directed people towards that before, but not yesterday or even this week
11:14:48 <hexagoxel> shouldn't cabal only create consistent install-plans anyways? I mean, following the pvp is nice, but it seems to be somewhat separate
11:15:22 <hexagoxel> bounds don't pin stuff exactly, and install plans are consistent even if you don't have any bounds.
11:15:39 <solonarv> well, cabal isn't guaranteed to actually *find* a viable plan just because one exists (the search space is just too big)
11:15:56 <solonarv> you're right that you could just 'cabal freeze' and leave the bounds out of the cabal file
11:16:40 <solonarv> but that's generally considered bad practice
11:16:47 <polezaivsani> ddellacosta: fwiw, i've asked that in few other haskell related channels in last few days
11:16:55 <hexagoxel> do you really ever get install-plans that contain different versions of the same package?
11:17:04 <hexagoxel> maybe for boot-libs in some special cases..
11:17:04 <ddellacosta> polezaivsani: gotcha! maybe I caught a previous convo then :-D
11:17:45 <hexagoxel> (it almost feels like I misunderstand the initial question)
11:19:50 <hexagoxel> you don't need gen-bounds, you don't need freeze. It will just work. cabal will find a consistent install-plan, down to revisions and flags.
11:20:30 * hexagoxel is not 100% on that, but making false statements gets the best responses :p
11:21:28 <merijn> hexagoxel: Only for automatic flags, not manual ones
11:21:38 <merijn> hexagoxel: And only if the flags affect the build plan
11:21:55 <merijn> So people conditionally changing the API based on the flags (which they shouldn't) still break shit
11:24:30 <hexagoxel> but.. the initial question was not about the pvp or API stability, was it?
11:24:41 <hexagoxel> if you have packages a -> b -> c
11:25:04 <merijn> no clue, I didn't see the question
11:25:06 <hexagoxel> then cabal will not compile b with c_1 and a with c_2
11:25:09 <c_wraith> I read the initial question as "how do I generate consistent bounds so that my direct and indirect dependency on a package use the same version?"
11:25:14 <merijn> I was just commenting on your observation
11:25:36 <merijn> cabal will *always* use only a single version of a library in a build plan
11:25:51 <solonarv> oh right, I skimmed over that in the initial question
11:25:53 <merijn> GHC supports a limited form of mixing multiple versions of the same library, but cabal doesn't support that
11:26:51 <hexagoxel> merijn: great, that matches my understanding. And I think it means that the answer to the initial question about transitive dependencies is just "that will never be a problem, no further steps required".
11:27:19 <merijn> I guess people are used to python's broken approach
11:27:24 <polezaivsani> i'm not sure how closely it relates to pvp and bounds (still learning), but the fact there could be only one version of a package in use does sorts out my initial question
11:27:28 <merijn> Which only looks at direct dependencies
11:28:07 <merijn> polezaivsani: Cabal computes (or tries to) a build plan that includes *all* transitive dependencies and enforce all their bounds
11:28:35 <merijn> polezaivsani: Rather than pip and npm, which afaik only check "are all direct dependencies installed with the right version"
11:36:23 <hexagoxel> just out of curiosity: how do stackage snapshots work in regards to flags? do they just assume the "flags don't affect API" and "flags don't change bounds"?
11:37:40 <hexagoxel> i guess flag-conditional deps are no problem, as long as it works with the version of the dep that is in that snapshot.
11:38:55 <hexagoxel> do i _want_ to know how this works? eehhh.
11:39:16 <ddellacosta> is there some simple way to abstract over Boolean and Maybe a so that I can treat them the same in a predicate function? I hope that makes sense
11:39:56 <ddellacosta> I guess, automagically use the isomorphism between those things somehow
11:40:19 <maerwald> hexagoxel: check their issue tracker to see their workflow. It's more like "I need X, so let's bump it". Real linux distros will build *some* permutations of configuration, but not all. It's  simply impossible.
11:41:21 <ddellacosta> I'm assuming lens makes it possible
11:42:21 <c_wraith> I don't know how lens would help there
11:43:04 <ddellacosta> yeah I dunno, was just considering Iso
11:43:24 <c_wraith> I mean, it depends on what sort of API you want.
11:43:33 <ddellacosta> yeah
11:44:00 <c_wraith> :t has _Just  -- probably not helpful to you, but it's sure lensy!
11:44:01 <lambdabot> Maybe b -> Bool
11:44:54 <ddellacosta> lol I like how you made that look like it's not lensy in the type sig though, impressive haha
11:45:26 <ddellacosta> okay thanks, yeah I maybe should just do something simpler 
11:49:58 <Marked> have a nice day guyz...
12:16:52 <hexagoxel> maerwald: you are talking about versions, not package flags, right? I don't think I have auto flags seen mentioned in stackage PRs ever.
12:22:50 <sm[m]> I'm guessing stackage specifies flags (in build-constraints) when necessary, and stack otherwise builds with default flags only (no auto flag toggling)
12:26:20 <sm[m]> stackage's flag customisations: https://github.com/commercialhaskell/stackage/blob/master/build-constraints.yaml#L4939
12:28:15 <hexagoxel> ah, neat, that is shorter than I expected
12:30:56 <hexagoxel> and yes, that makes sense. can just keep those mostly static when bumping snapshots, and fix manually for rare cases of strange auto-flags.
12:55:47 <maerwald> hexagoxel: no, I meant flags
16:04:08 <sim590> Can I include functions internal to some module in the haddock documentation? When I do cabal new-haddock --haddock-internal, I don't get the internal functions..
16:04:39 <sim590> I gues I could try #cabal also.
16:46:54 <ezzieyguywuf> how do I link an external (C) library using stack or cabal or w/e? Things "just work" fine when I'm developping on my linux machine, but I tried doing the same on a windows machine and while things build properly I don't think my program can find the shared library at runtime even when I place the dll in the same library
16:49:46 <frdg> I am finding that aeson is a pleasure to work with once you know what you're doing
16:49:57 <ezzieyguywuf> is aeson the json thing?
16:50:09 <frdg> ya
16:50:14 <ezzieyguywuf> nice!
16:50:18 <ezzieyguywuf> I've heard only good things
16:50:40 <frdg> its so simple its at first confusing
17:52:26 <orion> Does there exist a lens for setting a field of type "Foo" iif the input is a "Just Foo"? The use case is a POST request of an API, where every single field of the request body is of type (Maybe Foo), and the type I am trying to set is (Foo).
18:03:58 <c_wraith> > M.fromList [("a", 1), ("b", 2)] & at "c" ?~ 3  -- orion: is this what you're looking for?
18:04:00 <lambdabot>  fromList [("a",1),("b",2),("c",3)]
18:04:32 <c_wraith> :t (?~)
18:04:33 <lambdabot> ASetter s t a (Maybe b) -> b -> s -> t
18:08:30 <orion> c_wraith: I am not sure that's what I want. I'll try to refine my question.
18:10:52 <orion> The browser sends me a (input :: Maybe Foo). The database has a (attribute :: Foo). If "input" isJust, then set the "attribute" to its value. Otherwise, leave it alone.
18:17:31 <orion> c_wraith: This, but as a Setter: https://gist.github.com/centromere/325805382b15259c620d7864f395dda1
18:19:30 <orion> I suppose that would be a "Setter s s (Maybe a) a".
20:02:15 <tintin`> Is it just me or you can export type synonyms (ie type=) but not type declarations (ie data=)
20:02:38 <glguy> tintin`: You can export both, and they'd both use the same 'type' prefix when being explicit
20:06:28 <tintin`> @glguy what I mean is that where u write something like module Some.Important.Module (SomeTypeName) where
20:06:28 <lambdabot> Unknown command, try @list
20:06:40 <tintin`> glguy:
20:11:05 <glguy> tintin`: Yeah, you can export data and type declared things like that
20:12:15 <tintin`> I am using a record and I notice that there is also a constructor with the same name. Is that the issue? 
20:12:42 <glguy> tintin`: You'll need to show some code and a copy/pasted error message
20:17:37 <tintin`> glguy: This is basically the servant template 
20:17:41 <tintin`> https://pastebin.com/RwaGv3ME
20:17:51 <tintin`> Servant template for stack
20:18:18 <glguy> Change line 7 to User(User)
20:18:35 <glguy> so that you export both the type constructor as well as the value constructor named 'User'
20:18:44 <tintin`> AAhhhhhhhhh
20:18:56 <glguy> as you had it only the type constructor was being exported
20:19:22 <tintin`> Naise. It compiles. Cheers!~
20:49:22 <orion> I've figured out a way to transform a pre-existing lens in to the type of lens I want:
20:49:25 <orion> foo l = withLens l $ \getter setter -> lens getter (\s v -> setter s (fromMaybe (getter s) v))
20:51:14 <orion> Now if I do "userInDatabase & (foo userEmail) .~ Nothing", the email address won't be touched. But if I change "Nothing" to "Just "abc@123.com"", it will be updated.
20:51:45 <orion> The question now is whether this can be expressed in a more concise way.
21:11:02 <orion> > let (.~?) l = set (withLens l $ \getter setter -> lens getter (\s v -> setter s (fromMaybe (getter s) v)))
21:11:04 <lambdabot>  <no location info>: error:
21:11:05 <lambdabot>      not an expression: ‘let (.~?) l = set (withLens l $ \getter setter -> le...
21:23:49 <kraeXen> orion, you need to use it somewhere, feed it info
21:28:16 <orion> kraeXen: Thanks. I'll move it to a private message to keep the noise down.
22:42:54 <orion> I think my lens is illegal: Functor f => (Text -> f (Maybe Text)) -> User -> f User
22:43:19 <orion> (Because over l id =/= id)
22:59:14 <hyiltiz> What's the one word that you'd use if you'd want to really scare/impress someone not familiar with Haskell?
23:00:29 <hyiltiz> E.g. in Bank of London you might say supercalifragilisticexpialidocious
23:02:15 <hyiltiz> Multiple words commonly used together should be acceptible too (like monad transformers)
23:02:40 <hyiltiz> applicative functor etc.
23:02:59 <Geekingfrog> I think monad is pretty good. It's well known as *the* arcane feature of the language.
23:03:22 <Geekingfrog> can't hurt to add transformers afterward ofc
