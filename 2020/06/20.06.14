00:00:21 <typetetris> Yes, it did, nice: http://www.well-typed.com/blog/2019/10/nonmoving-gc-merge/
00:09:50 <EvanR> other languages gradually steal stuff from haskell. Haskell gradually moves closer to java
00:29:14 <solrize> nice wow
00:29:30 <solrize> but, nonmoving = more fragmentation?
00:34:16 <typetetris> solrize: You probably would have to ask bgamari about it. When I recall it correctly,only the the thread nurseries are nonmoving and the Generation 1 stuff is collected as usually.
00:34:56 <solrize> hmm ok thanks
00:35:15 <solrize> i guess they took everything into account
00:35:27 <typetetris> solrize: https://bgamari.github.io/media/2018-11-18-nonmoving-gc-for-ghc.pdf
00:35:34 <solrize> thx
00:36:23 <typetetris> So I imagine there will be some more fragmentation. GC is all about tradeoffs I heard.
00:42:16 <solrize> yeah java has a lot of gc knobs 
00:51:51 <typetetris> solrize: to troll just a little bit: go has none if I recall correctly :)
01:12:28 <typetetris> Is it possible to define an alias name for a data constructor, which I can use in a pattern match?
01:12:41 <Cheery> yes
01:12:47 <typetetris> How do I do that?
01:13:47 <Cheery> https://ocharles.org.uk/posts/2014-12-03-pattern-synonyms.html
01:13:59 <typetetris> Thanks!
01:30:42 <solrize> typetetris, i think go has redone its gc at least once, but people don't go as berserk performance tuning go as they do java, maybe
01:50:22 <typetetris> solrize, hmm as far as I know, go prioritized low latency above everything else: https://blog.golang.org/go15gc but I think they are even <1ms stop the world pauses now.
01:52:05 <solrize> lol: 
01:52:06 <solrize> I feel like I just watched the original first presentation of SQL injection - this is that big a deal. (I can't find the link, but the guy who gave that presentation thought it bombed because people started getting up and walking out five minutes into his talk - it turned out they were trying to get to the pay phones first so they could call back to their offices and alert them that the world had just been lit on fire).
01:52:12 <solrize> oops off topic
01:52:14 <solrize> sorry
01:54:47 <typetetris> so recent go gc https://blog.golang.org/ismmkeynote 
01:54:58 <solrize> nice
02:12:20 <typetetris> If I specify certain symbols in the import line, how is that list called? Import list? (Analogue to the export list?)
02:28:35 <Hopplahase> Seems fine to me. The report doesn't seem to have a better name for them either https://www.haskell.org/onlinereport/haskell2010/haskellch5.html#x11-1010005.3
02:31:19 * hackage jira-wiki-markup 1.3.1 - Handle Jira wiki markup  https://hackage.haskell.org/package/jira-wiki-markup-1.3.1 (tarleb)
02:49:06 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org'
02:49:06 --- topic: set by glguy on [Sat Jan 05 07:21:52 2019]
02:49:06 --- names: list (clog adam_wes_ mpereira hvr merijn John20 Hopplahase drewr gienah nikkal smatting zaquest chaosmasttter jonathan3 spion danvet kenran nfd9001 mystfox cosimone m0rphism jose_zap mananamenos Tenobrus6 kleisli Tuplanolla nineonine takuan tromp markus1189 xplat chalkmonster Cthalupa JesseL Saukk hari_ adam_wespiser tscholak expectsys vikfret wechselstrom shafox enikar Orbstheorem dme2 dibblego day denisse MarcelineVQ styledash otto_s_ theDon lagothrix mekeor)
02:49:06 --- names: list (lockshaw xff0x Codaraxis__ DTZUZU hendi klntsky fendor_ mud xerox_ efm Lord_of_Life vshev4enko voyons_osti klardotsh dolio codygman Jesin grumble is_null motherfsck evanjs mozzarella thecoffemaker acidjnk_new lep-delete entel tv1 grazfather wildlander darjeeling_ unlink_ redviking[m] jespada kAworu xelxebar loli tinga tinwood ArthurStrong _deepfire TimWolla shutdown_-h_now Thra11 andi- fliife85 todda7 q3k xwvvvvwx pikajew zariuq drbean_ tsrt^ Unhammer johnw)
02:49:06 --- names: list (Guest23015 amatecha__ bitonic angerman liszt alexknvl jlpeters ullbeking darthThorik jonrh drbrule edwardk higherorder jbetz ibloom caasih runeks ProofTechnique pepeiborra parsnip betawaffle peel wildsebastian koankeeper moobar livvy dwt rappet doublex d34df00d alx741 net4all jb55 alexelcu devalot andreas303 gentauro shock_ violeta Franciman vin-ivar Nilgeist_ leah2 obihann fryguybob amiri brisbin Maxdamantus stux|RC-only nerdypepper qz Cale Digit joshua[m])
02:49:06 --- names: list (Kaiepi orion monochrom GreyFaceNoSpace thunderrd Batoeh ryantrinkle Zialus_PT p8m thestr4ng3r byorgey rotty amf gehmehgeh landonf verement haasn jonge jared-w esph proteusguy kadoban HiRE digia tomboy64 Techcable Kaivo zfnmxt chindy ystael Moyst whiteline Benett vnz adamse cmsmcq ^[_ PotatoGim verlet64_ jetpack_joe pasukon JSharp Adeon tazjin coot enemeth79 FMJz___ iphy Boarders reactormonk OnkelTem m1dnight_ sagax meck ChaiTRex koz_ datajerk stefan mrus)
02:49:06 --- names: list (dave_uy Guest48221 fiQ2 lukelau valdyn ryzokuken APic cvlad- alanz_ bradparker cinayakoshka d0liver zabracks ryjm liquorice joshmeredith lally hpc jhuizy tanuki juri_ yahb thaumavorio Benzi-Junior glittershark magicman stepnem urdh kmein mawk codedmart kloeri dingo glguy wrunt waskell armin notzmv lambdabot int-e gawen gxt mikeplus64 _flow_ epic_guy[m] c6ristian grizwako[m] Joe[m]4 matric[m] aib milkii bananagram atk lnxw37d4 solomon[m]2 martin02 jojoz[m]1)
02:49:06 --- names: list (schum1 fjvallarino[m]1 nh2 NemesisD_ kav_ kip alvinsj[m]1 Takumo _Alleria banjiewen nlofaro_ pedroabreu[m]1 farn_ drewbarbs_ jchia__ CindyLinz pfurla michaelpj mounty m4lvin Philonous sz0 cstrahan aplainzetakind feuerbach atraii cgfbee ericsagnes eyenx|m Bigcheese ViCi polux2001 RecursiveG_ jmsx Delectatio Foritus Rembane Ornedan Axman6 AWizzArd dennisb cocreature Ferdirand Cir0X totbwf L29Ah blabber Athas dexterlb fionnan dmiles bobey cantstanya fiadliel)
02:49:06 --- names: list (revprez_anzio fulc927 ephemera_ texasmynsted strangeglyph matthew- phreedom arw divVerent petersen rzmt dcoutts_ noctux kini remexre spatchkaa oak- benschza a3f acarrico iomonad esg ichimaru bonz060 locallycompact thelinuxkitten poljar pacak dysfigured SupaYoshi dmwit Taneb phaul zmt00 unclechu hsiktas[m] Elorm[m] Poscat[m] gcoakes[m] wildtrees[m] mikr[m] rednaZ[m]1 tamwile[m] dyniec[m] psydruid kaushikc zerstroyer[m] execat[m] camlriot42 jongeOld[m])
02:49:06 --- names: list (jluttine[m] dumuzid[m] loyon la-s thejonny tet[m] boistordu Ericson2314 domenkozar[m] sm[m] jthvai vaibhavsagar freeman42x[m] drozdziak1[m] siraben hjoest[m] Derrick[m] hyiltiz[m] denbrahe[m] wghuber[m] iinuwa srid Brian[m]4 darkunicorn[m] boutil AlexD[m] aviD makos[m] sepp2k jlorand[m] potatope[m] reed[m] fgaz alexfmpe Fernando-Basso[m moats tsahyt1 mathyouguy madnat JoelMcCracken[m] unsupervised[m] fossegrim[m] quiet_laika[m] sureyeaah ethercrow[m] itai33[m])
02:49:06 --- names: list (utdemir[m] maralorn atopuzov[m] justache gaze__ ahf fredcy- Guest47467 nisstyre Kamuela Reiser eldritch hodapp monokrome tolt esotericalgo balbirs lieven dyl_ Tspoon edwtjo supki gargawel obfusk dcoutts heath cynick Patternmaster lemald jvanbure ynyounuo bobbytables ridcully Deewiant_ robogoat fiddlerwoaroof jkarni Profpatsch stree ycheng auri_ greymalkin exferenceBot Twey mupf runawayfive nckx wz1000 davve ft incognito9999 mikolaj Sparadox ambiso mceier uberj)
02:49:06 --- names: list (In0perable rkrishnan_ phadej Nistur ben xe4_ steell_ lucianp_ tessier zymurgy ja edigiacomo jtcs tureba uwap sarahzrf bspar shachaf tristanC noan suzu_ ego drdo Randy ij thonkpod megaTherion dredozubov sphalerite Klumben jjhoo slikts suppi J_Arcane Guest75602 duckonomy Bergle_2 mrd dexter jchia bbarker dukedave rom1504 lthms t36s mstruebing greenbourne277 sepples zgrep opqdonut flux Tourist sdx23 [exa] TommyC acertain wraithm duairc militia_ wayne jtobin isene)
02:49:06 --- names: list (jle` matheus23 Plazma CitizenSnips Partmedia infinisil fre Velpoman ping joko Wamanuz2 NieDzejkob jzl Chobbes chirpsalot bbear mgaare_ ArsenArsen Mindless- mutantmell mmaruseacph2 geal inimino Uma gabiruh jokester DocKlobi heyj bgavran systemfault idnar ocharles gregberns_ sm sdrodge cohn shadowdaemon SomeB idupree pong zyeri daGrevis jrm Bunogi danso nitrix rednaZ2 wspthr e2 debugloop solarus dxld twk- kozowu nshepperd1 crtschin_ hiroaki agander_m operand_)
02:49:06 --- names: list (ReinH cyphase nshepperd2 whataday Pongongong Cheery ent dan64 avn PragCypher bgamari spoonm jakalx sim590 Igloo Arjan drewolson perrier-jouet cpape totte ring0` @Sigyn natim87 Jonno_FTW nonzen aristid ghuntley typetetris rdivyanshu_ taktoa[c] isacl___ ajmcmiddlin mcfilib sclv m-renaud cbarrett dmj` rizary mankyKitty Hotbees runde srhb rodlogic_ parisienne__ kyagrd__ elvishjerricco teehemkay simony terrorjack feepo conjunctive edmundnoble eacameron bjs Nascha)
02:49:06 --- names: list (scav starlord stylewarning parseval thi dani- integral laghee__ rslima____ dgpratt gluegadget SrPx xyggos graingert nick_h hamishmack arsdragonfly billstclair sgraf PatrickRobotham lightandlight kristjansson ebutleriv alunduil sethetter benwr_ pent badzergling chessai jamiecook_ benl23 spinda Tritlo carter affinespaces tnks_ jackdk buggymcbugfix Firedancer mpickering Shun131 dsal johs newhoggy mudri jesyspa PoliticsII__ glowcoil dsturnbull milessabin AndreasK)
02:49:06 --- names: list (Argorok_ lexi-lambda caubert dftxbs3e sqrt2 fissureman mniip andromeda-galaxy xcin hackage so bind Rudd0 jdt Vq eagleflo Heffalump anoe peutri raoul ptrcmd dilinger lnx micro_ connrs- freeside malthe_ jameekim2 barrucadu Jello_Raptor mjrosenb_ Katarushisu Cerise pta2002_ rprosper- tomsmeding davl sigmundv- tabemann hwabyong johnstein nopf Paks Zemyla Niamkik efertone noCheese incertia kipras`away lpsmith oats Fubar^ azuline pounce ashbreeze RusAlex TMA jassob)
02:49:06 --- names: list (laxask flebron connrs immae albel727 xintron zzz jackhill dopplergange piele robotmay hive-mind kqr e echoreply magog sivs_ energizer amosbird kkd puffnfresh xlei averell Natch yumh epta andjjj23 niklasb_ w1gz wagle statusfailed electrocat add^_ T0pH4t Ankhers vqrs samiamsam seanparsons cheers saurik lassulus bollu Blkt rawles coeus MasseR {abby} wowi42 aidecoe Majiir c_wraith ggVGc ahri kjak quintasan solrize sis7 hc xacktm miklcct SegFaultAX liff orcus cp-)
02:49:06 --- names: list (mac10688 Someguy123 a3Dman_ towel jinblack theorbtwo infinity0 Bish ps-auxw lyxia otulp rembo10 adius rann russruss pierrot Logio nurupo xnyhps electrostat PigDude ixian recon_- quaestor Chousuke turq xarian silver_needles raoulb mjuad Forkk i7c yushyin simplegauss aweinstock ap5 leothrix beka mort dqd ornxka rdivacky Guest20621 anishathalye clynamen PtxDK swater teqwve mp___ riatre bcoppens ski mimi_vx catern dustinm rotaerk hexagoxel [df] nyaomi gsingh93)
02:49:06 --- names: list (docontherocks tdammers kraem tomjaguarpaw forell Ekho relrod Raito_Bezarius joeytwiddle Putonlalla cyberlard anderson davean jorj mulderr_ hiredman haveo arkeet madnight_ narendraj9 jcarpenter2 bandali jfredett Clint gothos ammar2 bob_twinkles helpplz jophish gilbertw1 absence Kneiva aurieeeh voidcontext sayak carbolymer WzC_ PlasmaStar gambpang Squarism earthy dh Tene Entroacceptor SquidDev Dykam newsham apoc NGravity dragestil d3lxa ashnur dequbed sujeet)
02:49:06 --- names: list (Aleksejs LnL phaazon abrar vjoki NinjaTrappeur vancz RoguePointer agrif comboy luigy lowryder sea-gull mikolaj_ vk3wtf asm89 aldum DustyDingo maerwald pie_ canta kosmikus d1xie nekomune @ChanServ j_klee grol thebnq Uniaika interruptinuse DigitalKiwi nemesit|znc ekleog ivegotasthma bendo oeblink glamas hrnz sveit raid noexcept arianvp milli loc Flonk luite mccoyc1 EvanR samebchase komasa beaky _janne sshine statusbot oleks pharaun_ acro fr33domlover sud0)
02:49:06 --- names: list (samebchase- heredoc dminuoso Madars exarkun tumdedum marble_visions nikola2 ManiacTwister Jon p3n thallada ByronJohnson devurandom Hijiri jsb Nikotiini mr_yogurt kaol Guest6919 dogui bjobjo Iroha haskell_enthusia happycoder stilgart DwarfMaster Unode bsima tasuki Geekingfrog mantovani deni coddinkn cjh` rodgzilla nil koala_man mingc Adluc hexo c-rog PyroLagus djanatyn stiell reyu stvc shapr blackdog atomi kubrat vodkaInferno joeyh M2tias Drezil pdxleif tstat)
02:49:06 --- names: list (fluxit obiwahn tabaqui tensorpudding Eliel michalrus vimto1 topos frobnicator Firedancer_ tms_ deu myme Cathy irclogger_com lortabac spamlessj SolarAquarion mursu dumptruckman bwe saidinwot1 oldsk00l hongminhee cjay joehillen atle_ PHO chrpape hyperfekt srk Arguggi seliopou adamCS)
02:53:18 * hackage haskoin-core 0.14.0 - Bitcoin & Bitcoin Cash library for Haskell  https://hackage.haskell.org/package/haskoin-core-0.14.0 (jprupp)
03:32:19 * hackage haskoin-core 0.14.1 - Bitcoin & Bitcoin Cash library for Haskell  https://hackage.haskell.org/package/haskoin-core-0.14.1 (jprupp)
04:04:36 <typetetris> After reading https://github.com/ghc-proposals/ghc-proposals/pull/313 I got the impression it was a mistake to use polysemy for something real.
04:05:20 <merijn> Probably :p
04:05:24 <typetetris> If I interpret the performance figures in the proposal correctly, I should simply stick to mtl for code, where performance might get relevant, am I wrong?
04:05:27 <bifunc2> if I have many ByteStrings (strict), how to concatenate them (into a strict bytestring too) in the fastest manner? for instance, would Builder be substantially faster than the "concat" function?
04:05:48 <merijn> bifunc2: How many do you have?
04:05:59 <merijn> bifunc2: And how sure are you that this is a performance bottleneck?
04:06:11 <bifunc2> 8 bytes each, 200 of them
04:06:29 <bifunc2> however doing this m any times
04:06:30 <merijn> bifunc2: And you can't just generate them as Builder's to begin with?
04:07:19 <bifunc2> hmm
04:07:44 <merijn> bifunc2: And where are they coming from? Are these just like ints or doubles you're serialising?
04:08:48 <merijn> (also, what needs to happen to the final bytestring? written to disk? to the network?
04:14:51 <bifunc2> merijn I have a loop of increasing ints (serialized in bigendian). i take each serialized int, artificially increase it's size 200x (by duplicating it 200x). then i pass this increased bytestring into a c function.
04:15:33 <bifunc2> i'm already doing this in C, but for some reason if I do the "equivalent" thing in Haskell (using "concat" for the 200x), it's way slower in Haskell
04:16:21 <bifunc2> in C it's seems I'm doing the "equivalent" thing (just memcpy into a buffer of size 200x)
04:16:32 <merijn> bifunc2: Right, so for something very static like that, I'd just preallocate the whole thing and copy it 200 times
04:17:27 <merijn> bifunc2: So, crazy idea: Create a Storable vector of the correct size, using your original value. Then rip the ForeignPtr out of it and turn it into a ByteString
04:17:31 <merijn> I bet that's *much* faster
04:18:06 <merijn> bifunc2: I actually have code doing exactly this for my project: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/Utils/Vector.hs
04:18:55 <merijn> bifunc2: Because know you're allocating the 200x8 bytes in one go, then serially writing to it and just doing some trivial pointer wrapping
04:19:00 <merijn> s/know/now
04:19:17 <merijn> And I think the concat approach is a Schlemiel the Painter algorithm
04:19:55 <bifunc2> merijn here's  concat: https://hackage.haskell.org/package/bytestring-0.10.10.0/docs/src/Data.ByteString.Internal.html#concat don't they preallocate the needed space too?
04:20:13 <merijn> bifunc2: Sure, but for each pair
04:20:22 <merijn> bifunc2: So you end up doing that + the copy 200 times
04:20:37 <bifunc2> yikes wow
04:20:40 <bifunc2> you're right
04:20:48 <MarcelineVQ> pair?
04:21:02 <bifunc2> i forgot concat is operating on just two bytestrings :)
04:21:20 <bifunc2> wait no, it's not..
04:21:21 <merijn> ah, no, I think concat is smarter
04:21:24 <MarcelineVQ> append operates on two, concat runs along a list of them
04:47:15 <bifunc2> merijn after calling byteStringToVector, how do i in the following lines of code (where i use the vector) that GC hasn't gotten rid of the original bytestring
04:47:27 <bifunc2> s/that/know that
04:48:22 <merijn> bifunc2: In your case you'd want vectorToByteString, though?
04:48:35 <merijn> i.e. allocate a vector, fill it, then convert it into a ByteString
04:49:38 <merijn> bifunc2: Also note that both ByteString and Storable Vector are built using ForeignPtr which is a GC aware pointer (i.e. it will only get freed when there are no copies of the ForeignPtr anywhere in your code)
04:49:49 <merijn> So the answer is "GC will handle it"
04:51:28 <bifunc2> ok i see, cool
06:54:43 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org'
06:54:43 --- topic: set by glguy on [Sat Jan 05 07:21:52 2019]
06:54:43 --- names: list (clog knupfer jedws Gurkenglas jneira machinedgod cross seveg NinjaTrappeur sand_dull orcus kritzefitz vyorkin KN0DE5 dddddd kuribas Thra11 zalun1 nfd darosacassio polyrain coeus Deide sigmundv_ otto_s xerox_ jonatan albethere LKoen Lord_of_Life elfets bifunc2 hari_ lizzard dme2 arahael Digit noecho __monty__ perrier-jouet JesseL troydm polyphem thc202 shock_ aarvar mpereira hvr merijn Hopplahase drewr gienah nikkal smatting zaquest jonathan3 spion danvet mystfox)
06:54:43 --- names: list (Tenobrus6 kleisli Tuplanolla nineonine takuan tromp markus1189 xplat Cthalupa expectsys vikfret wechselstrom shafox enikar Orbstheorem dibblego day denisse MarcelineVQ styledash theDon lagothrix mekeor lockshaw xff0x Codaraxis__ DTZUZU hendi klntsky fendor_ mud efm vshev4enko voyons_osti klardotsh dolio codygman Jesin grumble is_null motherfsck evanjs mozzarella thecoffemaker lep-delete entel tv1 grazfather wildlander darjeeling_ unlink_ redviking[m] jespada)
06:54:43 --- names: list (kAworu xelxebar loli tinga tinwood ArthurStrong _deepfire TimWolla shutdown_-h_now andi- fliife85 todda7 q3k xwvvvvwx pikajew zariuq drbean_ tsrt^ Unhammer johnw Guest23015 amatecha__ bitonic angerman liszt alexknvl jlpeters ullbeking darthThorik jonrh drbrule edwardk higherorder jbetz ibloom caasih runeks ProofTechnique pepeiborra parsnip betawaffle peel wildsebastian koankeeper moobar livvy dwt rappet doublex d34df00d alx741 net4all jb55 alexelcu devalot)
06:54:43 --- names: list (andreas303 gentauro violeta Franciman vin-ivar Nilgeist_ leah2 obihann fryguybob amiri brisbin Maxdamantus stux|RC-only nerdypepper qz Cale joshua[m] Kaiepi orion monochrom GreyFaceNoSpace thunderrd Batoeh ryantrinkle Zialus_PT p8m thestr4ng3r byorgey rotty amf gehmehgeh landonf verement haasn jonge jared-w esph proteusguy kadoban HiRE digia tomboy64 Techcable Kaivo zfnmxt chindy ystael Moyst whiteline Benett vnz adamse cmsmcq ^[_ PotatoGim verlet64_ jetpack_joe)
06:54:43 --- names: list (pasukon JSharp Adeon tazjin coot enemeth79 FMJz___ iphy Boarders reactormonk OnkelTem m1dnight_ sagax meck ChaiTRex koz_ datajerk stefan mrus dave_uy Guest48221 fiQ2 lukelau valdyn ryzokuken APic cvlad- alanz_ bradparker cinayakoshka d0liver zabracks ryjm liquorice joshmeredith lally hpc jhuizy tanuki juri_ yahb thaumavorio Benzi-Junior glittershark magicman stepnem urdh kmein mawk codedmart kloeri dingo glguy wrunt waskell armin notzmv lambdabot int-e gawen gxt)
06:54:43 --- names: list (mikeplus64 _flow_ epic_guy[m] c6ristian grizwako[m] Joe[m]4 matric[m] aib milkii bananagram atk lnxw37d4 solomon[m]2 martin02 jojoz[m]1 schum1 fjvallarino[m]1 nh2 NemesisD_ kav_ kip alvinsj[m]1 Takumo _Alleria banjiewen nlofaro_ pedroabreu[m]1 farn_ drewbarbs_ jchia__ CindyLinz pfurla michaelpj m4lvin Philonous sz0 cstrahan aplainzetakind feuerbach atraii cgfbee ericsagnes eyenx|m Bigcheese ViCi polux2001 RecursiveG_ jmsx Delectatio Foritus Rembane Ornedan)
06:54:43 --- names: list (Axman6 AWizzArd dennisb cocreature Ferdirand Cir0X totbwf L29Ah blabber Athas dexterlb fionnan dmiles bobey cantstanya fiadliel revprez_anzio fulc927 ephemera_ texasmynsted strangeglyph matthew- phreedom arw divVerent petersen rzmt dcoutts_ noctux kini remexre spatchkaa oak- benschza a3f acarrico iomonad esg ichimaru bonz060 locallycompact thelinuxkitten poljar pacak dysfigured SupaYoshi dmwit Taneb phaul zmt00 unclechu hsiktas[m] Elorm[m] Poscat[m] gcoakes[m])
06:54:43 --- names: list (wildtrees[m] mikr[m] rednaZ[m]1 tamwile[m] dyniec[m] psydruid kaushikc zerstroyer[m] execat[m] camlriot42 jongeOld[m] jluttine[m] dumuzid[m] loyon la-s thejonny tet[m] boistordu Ericson2314 domenkozar[m] sm[m] jthvai vaibhavsagar freeman42x[m] drozdziak1[m] siraben hjoest[m] Derrick[m] hyiltiz[m] denbrahe[m] wghuber[m] iinuwa srid Brian[m]4 darkunicorn[m] boutil AlexD[m] aviD makos[m] sepp2k jlorand[m] potatope[m] reed[m] fgaz alexfmpe Fernando-Basso[m moats)
06:54:43 --- names: list (tsahyt1 mathyouguy madnat JoelMcCracken[m] unsupervised[m] fossegrim[m] quiet_laika[m] sureyeaah ethercrow[m] itai33[m] utdemir[m] maralorn atopuzov[m] justache gaze__ ahf fredcy- Guest47467 nisstyre Kamuela Reiser eldritch hodapp tolt esotericalgo balbirs lieven dyl_ Tspoon edwtjo supki gargawel obfusk dcoutts heath cynick Patternmaster lemald jvanbure ynyounuo bobbytables ridcully Deewiant_ robogoat fiddlerwoaroof jkarni Profpatsch stree ycheng auri_)
06:54:43 --- names: list (greymalkin exferenceBot Twey mupf runawayfive nckx wz1000 davve ft incognito9999 mikolaj Sparadox ambiso mceier uberj In0perable rkrishnan_ phadej Nistur ben xe4_ steell_ lucianp_ tessier zymurgy ja edigiacomo jtcs tureba monokrome uwap sarahzrf bspar shachaf tristanC noan suzu_ ego drdo Randy ij thonkpod megaTherion dredozubov sphalerite Klumben jjhoo slikts suppi J_Arcane Guest75602 duckonomy Bergle_2 mrd dexter jchia bbarker dukedave rom1504 lthms t36s)
06:54:43 --- names: list (mstruebing greenbourne277 sepples zgrep opqdonut flux Tourist sdx23 [exa] TommyC acertain wraithm duairc militia_ wayne jtobin isene jle` matheus23 Plazma CitizenSnips Partmedia infinisil fre Velpoman ping joko Wamanuz2 NieDzejkob jzl Chobbes chirpsalot bbear mgaare_ ArsenArsen Mindless- mutantmell mmaruseacph2 geal inimino Uma gabiruh jokester DocKlobi heyj bgavran systemfault idnar ocharles gregberns_ sm sdrodge cohn shadowdaemon SomeB idupree pong zyeri)
06:54:43 --- names: list (daGrevis jrm Bunogi danso nitrix rednaZ2 wspthr e2 debugloop solarus dxld twk- kozowu nshepperd1 crtschin_ hiroaki agander_m operand_ ReinH cyphase nshepperd2 whataday Pongongong Cheery ent dan64 avn PragCypher bgamari spoonm jakalx sim590 Igloo Arjan drewolson cpape totte ring0` @Sigyn natim87 Jonno_FTW nonzen aristid ghuntley typetetris rdivyanshu_ taktoa[c] isacl___ ajmcmiddlin mcfilib sclv m-renaud cbarrett dmj` rizary mankyKitty Hotbees runde srhb rodlogic_)
06:54:43 --- names: list (parisienne__ kyagrd__ elvishjerricco teehemkay simony terrorjack feepo conjunctive edmundnoble eacameron bjs Nascha scav starlord stylewarning parseval thi dani- integral laghee__ rslima____ dgpratt gluegadget SrPx xyggos graingert nick_h hamishmack arsdragonfly billstclair sgraf PatrickRobotham lightandlight kristjansson ebutleriv alunduil sethetter benwr_ pent badzergling chessai jamiecook_ benl23 spinda Tritlo carter affinespaces tnks_ jackdk buggymcbugfix)
06:54:43 --- names: list (Firedancer mpickering Shun131 dsal johs newhoggy mudri jesyspa PoliticsII__ glowcoil dsturnbull milessabin AndreasK Argorok_ lexi-lambda caubert dftxbs3e sqrt2 fissureman mniip andromeda-galaxy xcin hackage so bind Rudd0 jdt Vq eagleflo Heffalump ptrcmd dilinger lnx micro_ connrs- freeside malthe_ jameekim2 barrucadu Jello_Raptor mjrosenb_ Katarushisu Cerise pta2002_ rprosper- tomsmeding davl sigmundv- tabemann anoe peutri raoul hwabyong johnstein nopf Paks)
06:54:43 --- names: list (Zemyla Niamkik efertone noCheese incertia kipras`away lpsmith oats Fubar^ azuline pounce ashbreeze RusAlex TMA jassob laxask flebron connrs immae albel727 xintron zzz jackhill dopplergange piele robotmay hive-mind kqr e echoreply magog sivs_ energizer amosbird kkd puffnfresh xlei averell Natch yumh epta andjjj23 niklasb_ w1gz wagle statusfailed electrocat add^_ T0pH4t Ankhers vqrs samiamsam seanparsons cheers saurik lassulus bollu Blkt rawles MasseR {abby})
06:54:43 --- names: list (wowi42 aidecoe Majiir c_wraith ggVGc ahri kjak quintasan solrize sis7 hc xacktm miklcct SegFaultAX liff cp- mac10688 Someguy123 a3Dman_ towel jinblack theorbtwo infinity0 Bish ps-auxw lyxia otulp rembo10 adius rann russruss pierrot Logio nurupo xnyhps electrostat PigDude ixian recon_- quaestor Chousuke turq xarian silver_needles raoulb mjuad Forkk i7c yushyin simplegauss aweinstock ap5 leothrix beka mort dqd ornxka rdivacky Guest20621 anishathalye clynamen PtxDK)
06:54:43 --- names: list (swater teqwve mp___ riatre bcoppens ski mimi_vx catern dustinm rotaerk hexagoxel [df] nyaomi gsingh93 docontherocks tdammers kraem tomjaguarpaw forell Ekho relrod Raito_Bezarius joeytwiddle Putonlalla cyberlard anderson davean jorj mulderr_ hiredman haveo arkeet madnight_ narendraj9 jcarpenter2 bandali jfredett Clint gothos ammar2 bob_twinkles helpplz jophish gilbertw1 absence Kneiva aurieeeh voidcontext sayak carbolymer WzC_ PlasmaStar gambpang Squarism earthy)
06:54:43 --- names: list (dh Tene Entroacceptor SquidDev Dykam newsham apoc NGravity dragestil d3lxa ashnur dequbed sujeet Aleksejs LnL phaazon abrar vjoki vancz RoguePointer agrif comboy luigy lowryder sea-gull mikolaj_ vk3wtf asm89 aldum DustyDingo maerwald pie_ canta kosmikus d1xie nekomune @ChanServ adamCS seliopou Arguggi srk hyperfekt chrpape PHO atle_ joehillen cjay hongminhee oldsk00l saidinwot1 bwe dumptruckman mursu SolarAquarion spamlessj lortabac irclogger_com Cathy myme deu)
06:54:43 --- names: list (tms_ Firedancer_ frobnicator topos vimto1 michalrus Eliel tensorpudding tabaqui obiwahn fluxit tstat pdxleif Drezil M2tias joeyh vodkaInferno kubrat atomi blackdog shapr stvc reyu stiell djanatyn PyroLagus c-rog hexo Adluc mingc koala_man nil rodgzilla cjh` coddinkn deni mantovani Geekingfrog tasuki bsima Unode DwarfMaster stilgart happycoder haskell_enthusia Iroha bjobjo dogui Guest6919 kaol mr_yogurt Nikotiini jsb Hijiri devurandom ByronJohnson thallada p3n)
06:54:43 --- names: list (Jon ManiacTwister nikola2 marble_visions tumdedum exarkun Madars dminuoso heredoc samebchase- sud0 fr33domlover acro pharaun_ oleks statusbot sshine _janne beaky komasa samebchase EvanR mccoyc1 luite Flonk loc milli arianvp noexcept raid sveit hrnz glamas oeblink bendo ivegotasthma ekleog nemesit|znc DigitalKiwi interruptinuse Uniaika thebnq grol j_klee)
07:01:18 * hackage ron 0.11 - RON  https://hackage.haskell.org/package/ron-0.11 (cblp)
07:28:06 <juri_> ok, i'm being dumb again. i have two doubles. I need the closest double that is less than the second double, but a multipule of the first double.
07:28:06 <juri_> mod wants integrals.. so.. ?
07:28:06 <merijn> juri_: What if no such double exist?
07:28:06 <juri_> the multiple can be negative.
07:28:06 <hpc> break down the problem into a composition of smaller problems
07:28:06 <hpc> make a list of numbers that are multiples of the first number, in the direction of the second number
07:28:06 <hpc> then find your answer in that list
07:28:06 <juri_> i just need a number, such that N * D1 + (D2 - N * D1) = D2.
07:28:06 * juri_ nods.
07:28:12 <juri_> ok, i'll try that.
07:28:26 <hpc> well, with that formula every number is a solution
07:28:38 <hpc> :P
07:28:40 <solonarv> there's actually floating point div' and mod' in base
07:28:46 <solonarv> bizarrely, they live in Data.Fixed
07:29:09 <solonarv> but they're there!
07:29:24 <juri_> oh. thanks. i knew i was being dumb. :)
07:31:50 <juri_> hpc: your solution worked. thanks. ;)
07:32:18 <juri_> solonarv: how dare you answer the question i asked?!! don't you know i'm dumb? :)
07:32:39 <juri_> (thanks both)
07:41:48 * hackage smuggler2 0.3.5.1 - GHC Source Plugin that helps to minimise imports and generate explicit exports  https://hackage.haskell.org/package/smuggler2-0.3.5.1 (jrp)
07:59:42 <typetetris> If I make heap profiles of my program, are they for the whole process always or do I have to do some special things for `-threaded` ?
08:12:06 <typetetris> Is it plausible that http-client and http-client-tls take 2 to 3 MiBi on the heap?
08:12:40 <c_wraith> It wouldn't surprise me if a TLS stack took that much space.
08:13:44 <MarcelineVQ> iirc that's around the size of the ghc rts, how are you measuring?
08:15:17 <typetetris> `+RTS -p -hm` and `+RTS -p -hc` and then `hp2pretty` names in the profiles suggests tls. Like `decodeASN1Repr` and such.
08:17:18 * hackage megalisp 0.0.1 - lisp parser using mega-parsec  https://hackage.haskell.org/package/megalisp-0.0.1 (KristofBastiaensen)
08:20:46 <typetetris> Yes retried with `+RTS -p -hm` and just default optimizations (iirc thats `-O`) and the main contender seems to be `Data.ASN1`.
08:32:52 <bifunc2> merijn I just came across the function touchForeignPtr: https://hackage.haskell.org/package/base-4.9.1.0/docs/Foreign-ForeignPtr.html#v:touchForeignPtr Would this eliminate the need for "with"?
08:34:03 <c_wraith> withForeignPtr is implemented in terms of touchForeignPtr.  But it makes sure to do exception handling and other things that are easy to mess up.
08:36:22 <mkk>  -[Moses believed in Allah as his creator so did Jesus and mohammed *; For he is: (Allah) the only God; our refuge; follow islam The true religion of God & jewel of THE SEAS to be lifted, [that is, be true muslimS to be lifted ****], [that is, be true muslimS to be HaPPY ****] . M-
08:39:27 * typetetris wonders which monad THE SEAS will be lifted into?
09:00:52 <ja> i am working with a package called wide-word because i want a Word128 type. now i need to serialize it into bytestring, but it doesn't implement the Binary class from the binary package. so i was thinking of making a function (FiniteBits a, Binary b) => a -> b that rounds up the amount of bits in a
09:01:05 <ja> is this a bad idea? i feel like i am jumping thorough too many hoops
09:04:33 <Cale> You could always just write a Binary instance for it
09:05:13 <Cale> also, your message seems to be cut off: "...that rounds up the amount of bits in a"
09:05:59 <Hopplahase> "in [the value of type] a", I guess
09:06:15 <Cale> oh, possibly :D
09:06:49 <ja> yep
09:07:18 <ja> well ok, i could write the binary instance but i feel like the generic function will be just as hard
09:08:30 <Hopplahase> The binary instance seems much easier to me: split the Word128 into two Word64s and handle them using the already existing Binary instance for that type
09:09:12 <Cale> It should be fairly easy anyway -- you can use the Word64 instance twice and do a little bit shifting
09:09:20 <Cale> yeah
09:09:38 <ja> ok, good idea. thanks. coding commencing...
09:43:18 * hackage table-layout 0.9.0.1 - Format tabular data as grid or table.  https://hackage.haskell.org/package/table-layout-0.9.0.1 (muesli4)
09:49:31 <cristin> ;D  hi all
11:19:11 <maralorn> Cale: Did you watch the zurihac talk by lexi-lambda ? Giving your scepiticism regarding effect system performance I think you definitely should.
11:35:12 <[exa]> maralorn: just curious-- is the talk publicly available somewhere?
11:36:13 <maerwald> I hope we'll get a list of all talks somewhere
11:36:18 * hackage optparse-generic 1.4.0 - Auto-generate a command-line parser for your datatype  https://hackage.haskell.org/package/optparse-generic-1.4.0 (GabrielGonzalez)
11:37:13 <[exa]> uh okay it's the first thing on the zurihac website... :D
11:39:14 <srk> the logo is neat
11:39:46 <xerox_> I thought it was a raspberry pi
11:41:40 <Cale> maralorn: I will -- I'm a bit behind, still halfway through Wadler's talk atm :)
11:43:09 <Cale> maralorn: However, the performance measurements of 'eff', at least a few weeks back, didn't seem to beat mtl once you turn on the flags that we always have turned on where I work.
11:45:49 <Cale> The eff library does really well in benchmarks that don't have all the relevant optimisations turned on.
11:46:59 <Cale> But maybe there's new stuff in the talk :)
11:52:23 <MarcelineVQ> is the intent even to beat mtl?
11:52:27 <Cale> Although performance is one source of skepticism about these newer effect systems, it might not even be my main one though. The bigger issue is a bit more nebulous and harder to articulate though. Effect systems certainly can be a little nicer if you're comparing them to bare monad transformers -- but that was always an implementation detail of the monads we're constructing. It seems like effect systems encourage 
11:52:27 <Cale> users to expose the implementation of their monads in a way that I'm not so much a fan of, and once you've abstracted things enough that you can't tell how the monad has been implemented, the difference is usually a moot point.
11:53:08 <dolio> Cale is the only person with an honest take on this. :P
11:56:26 <Cale> There are a few small exceptions to this -- occasionally, these libraries manage to obtain semantics for particular combinations of effects that's not easily obtained via a simple combination of monad transformers (usually having to do with the interaction of nondeterminism with exceptions or other control operators) -- if the semantics you want is among those, I have nothing against using an effect system to 
11:56:26 <Cale> implement your monad.
11:58:31 <Cale> However, eff in particular gives you fewer options overall with regard to how the primitives interact with one another, because of the way it insists on the semantics being the same independent of handler order (which corresponds to picking an order in which to apply monad transformers)
11:59:31 <Cale> Music written with only the pentatonic scale is almost guaranteed to sound nice, but sometimes you want a few extra notes that aren't inside it.
12:00:27 <c_wraith> Now I'm imagining the pentatonic scale being the opposite of wolverine
12:01:08 <dolio> I don't think performance is a serious concern for properly implemented algebraic effects stuff.
12:03:41 <Cale> I talked about performance in previous discussions mainly because having libraries which really focus heavily on that is a direction that I'd kind of like to see people exploring. I want the most common uses of ReaderT/StateT to be compiled to reading/writing a single memory address (which potentially ends up in a register), whenever other effects wouldn't interfere with that.
12:03:57 <monochrom> "semantics stays the same despite handler order" sounds like restricting your matrices to ensure commutative matrix multiplication.
12:04:07 <Cale> (and for this to happen in a way that allows applying many transformers defined in terms of them)
12:04:15 <Cale> yeah, exactly
12:04:17 <MarcelineVQ> monochrom: it's exactly commutativity
12:04:17 <Cale> haha
12:04:18 <monochrom> The outcome is so simple it's useless.
12:04:36 <Cale> I wouldn't go so far as to say it's useless
12:04:42 <Cale> But it's often not going to be the thing you wanted
12:04:52 <Cale> and if the thing you wanted isn't there, then you're just out of luck
12:06:10 <monochrom> The very purpose of existence of semantics is to have many different semantics, and to have many differnent semantics you must allow different handler orders or equivalent.
12:07:32 <monochrom> A decade or two ago, "feature interaction" was a hot topic in software enginner and/or formal methods.
12:08:31 <monochrom> Bell was interested in the question of, for example, if call forwarding and call blocking have conflicts in their details, what to do.
12:09:38 <monochrom> Pamela Zave and Michael Jackson thought up an idea equivalent to our monad transformers. The order you stack them equals a kind of precedence order, a tie-breaker.
12:10:12 <MarcelineVQ> That's the famous line from Bad
12:10:39 <Cale> haha
12:10:45 <monochrom> Some customers may prefer one precedence order, some others may prefer another. So you stack to the order of the customer.
12:11:32 <monochrom> The important is there is no such thing as "one correct resolution accepted by all customers".
12:11:51 <MarcelineVQ> ime the solution to the blocked vs forwarded call is to call the blocked caller in case it's the cusomer accidentally dialing themselves, ask them what their favorite color is, and if it's pretty close, you give them all the personal data
12:12:15 <monochrom> This is why I think that "semantics stays the same regardless of handler order" is wrong. It is pretending there is always only one correct answer.
12:12:32 <monochrom> haha
12:12:44 <MarcelineVQ> this is also the principle behind lub information hiding/restriction
12:12:59 <MarcelineVQ> color is a pretty permissive bound tho, that's the only error here
12:14:39 <dolio> So, in the library you're talking about, is the list of effects ordered, and you're required to handle them in the order given or something?
12:17:48 * hackage arduino-copilot 1.5.2 - Arduino programming in haskell using the Copilot stream DSL  https://hackage.haskell.org/package/arduino-copilot-1.5.2 (JoeyHess)
12:25:37 <maralorn> Cale: What are those optimizations?
12:25:37 <statusfailed> I'm trying to build accelerate-examples with stack, but it does with "ExitFailure 1", even with -v. Can I make it tell me why the build fails?
12:26:45 <statusfailed> I assume it's because it can't find llvm, because that's the package where it fails, but I don't know how to find out what the error is
12:28:10 <Cale> maralorn: -fexpose-all-unfoldings mainly. -fspecialise-aggressively also makes a difference.
12:31:38 <maralorn> Cale: Am I understanding correctly, that you need to compile every module implementing a monadstack with that flag?
12:32:17 <maralorn> The claim in the talk is, that always specialising all your effects is not doable.
12:47:01 <frdg> https://pastebin.com/G2fPzuBq : parser related question (using Trifecta library)
12:51:30 <dsal> frdg: It's a bit weird to send people off to a web site to read a small question, but there's a missing piece -- what have you tried?
12:53:20 <jephron> I have a noob question about Contravariant which probably stems from some sort of deep misunderstanding. (getPredicate $ contramap read (Predicate (> 3))) "4" does what I'd expect, given my intuitive understanding of contramap as sort of "gluing a function onto the input of another function"
12:53:48 <jephron> but ((contramap read (> 3)) 4) doesn't seem to behave that way
12:53:57 <frdg> dsal: Well the truth is this is a recreated example as what I'm actually doing is more complicated. Give me a minute to recreate what I have tried as well.
12:54:24 <dminuoso> jephron: It does.
12:55:03 <dminuoso> jephron: So start with accepting that `fmap` "glues" a function to another on the RHS, and `contramap` on the `LHS`. 
12:55:17 <dminuoso> % :t read
12:55:17 <yahb> dminuoso: Read a => String -> a
12:55:19 <jephron> so why does (contramap read (> 3)) "4" fail?
12:55:37 <dminuoso> % :t contramap read (> 3)
12:55:38 <yahb> dminuoso: (Contravariant ((->) a), Ord a, Num a) => a -> String
12:55:50 <dminuoso> jephron: Because you're confusing the sides here.
12:56:16 <dminuoso> Oh hold on. I need think about this
12:57:09 <dminuoso> jephron: So `read <$> (>3)` is the same as `read . (>3)` and with contramap, you'd just flip those around.
12:57:16 <dminuoso> % :t (>3) . read
12:57:16 <yahb> dminuoso: String -> Bool
12:57:26 <dminuoso> and that's not the same type huh
13:01:23 <dminuoso> jephron: Oh I tricked myself. So this is actually how Haskells instance selection works.
13:02:18 <dminuoso> jephron: In naivity, you'd expect `:t contramap read (> 3)` to fail to type check.
13:03:11 <solonarv> it could be made to fail with 'instance TypeError (Text "nope") => Contravariant ((->) a)', btw
13:03:44 <dminuoso> jephron: But it doesn't for reasons I can get into if you are interested. If not, think of this as a "deferred type error into the usage site" 
13:03:51 <solonarv> and of course if you actually try to use that somewhere concretely GHC will fail to find a 'Contravariant ((->) a)' instance and complain about that
13:04:05 * solonarv wonders if that error-instance should be added to base
13:04:56 <dminuoso> Ultimately there is no such instance, which has to do with the fact that you can't write `instance Contravariant (-> a)` (that is, you cant do sections on type level operators). 
13:06:30 <jephron> so maybe this is why I've been struggling to come up with any sort of usage of contramap that operates on functions, rather that some wrapper type like Predicate 
13:06:45 <dminuoso> jephron: You have to use a newtype wrapper like Op
13:07:08 <dminuoso> jephron: In essence, the problem is described by this
13:07:12 <dminuoso> % :i Contravariant
13:07:12 <yahb> dminuoso: type Contravariant :: (* -> *) -> Constraint; class Contravariant f where; contramap :: (a -> b) -> f b -> f a; (>$) :: b -> f b -> f a; {-# MINIMAL contramap #-}; -- Defined in `Data.Functor.Contravariant'; instance [safe] Contravariant m => Contravariant (WriterT w m) -- Defined in `Control.Monad.Trans.Writer.Lazy'; instance [safe] Contravariant m => Contravariant (ReaderT r m) -- Defined in `
13:07:22 <dminuoso> Is implementable for types of kind * -> *
13:07:28 <dminuoso> (->) :: * -> * -> *
13:08:37 <dminuoso> (->) a :: * -> *
13:08:49 <dminuoso> But the type variable is on the wrong side (because that's the domain).
13:08:50 <jephron> is this one of those places where you'd wish you could write something like `instance Contravariant (-> _ a)`?
13:09:05 <dminuoso> jephron: Sure!
13:09:20 <dminuoso> But we can't, so we make a newtype that is essentially a flipped around (->)
13:09:26 <dminuoso> (With domain and codomain flippeD)
13:09:53 <dminuoso> So `Op T A` is essentially `A -> T` (or ((->) A T)
13:10:10 <dminuoso> So if you compare `Op T A` with ((->) A T`, you can see how domain and codomain are flipped around
13:10:36 <dminuoso> That way, you can partially apply Op to some `a` (standing for an arbitrary codomain), and write a Contravariant instance for it
13:11:06 <dminuoso> So `instance Contravariant (Op a)` says, for any choice of a type (codomain) a, there exists an `instance Contravariant (Op a)`
13:11:41 <dminuoso> c.f. `instance Functor ((->) a)` which says, for any cohice of a type (domain!), there exists an `instance Functor ((->) a)`
13:11:56 <jephron> aha, okay. I know I've read about this, but I totally didn't make the connection when I was playing around with contramap
13:12:16 <dminuoso> jephron: For what its worth, there is a way to actually contramap without this.
13:12:42 <dminuoso> There's a notion of things that are not just contravariant or covariant, but something that is contravariant in one argument and covariant in both (so its both functor and contravariant)
13:12:46 <dminuoso> It's called profunctors
13:12:50 <jephron> yeah!
13:13:06 <dminuoso> (so lmap takes the role of contramap and rmap the role of fmap)
13:13:12 <jephron> I feel like I grok profunctors, at least intuitively as a sort of "put the thing between these other things"
13:13:15 <dminuoso> And luckily, (->) is an instance of Profunctor :)
13:13:19 <dminuoso> Ah great
13:13:40 <jephron> but I sort of assumed contramap would be like "the first half of dimap"
13:14:09 <jabbernaut> I installed a library manually. How do I load it? "import" will not work.
13:14:11 <dminuoso> jephron: It very much is.
13:14:39 <dminuoso> jabbernaut: It's just that you can't do type level sections, like you could in the value world like (+3) :)
13:14:39 <jephron> yeah, it just seems like it's the mechanics of using it that are a little weird
13:14:43 <dminuoso> You can only apply from left to right
13:14:46 <frdg> https://pastebin.com/aRzrhyrL/?e=1 : parsing question revised.
13:14:50 <dminuoso> And that puts some limits
13:15:07 <jephron> cool cool, thanks for the explaination 
13:15:15 <dminuoso> jephron: It depends on how you build packages. Are you a cabal or stack user?
13:15:37 <jephron> stack
13:15:49 <jabbernaut> I unzipped and used runhaskell configue/build/install
13:15:56 <dminuoso> jephron: The usual way, is to not install them manually, but add them to your packages.yaml. Refer to your stack manual
13:16:09 <jephron> oh, I think that was jabbernaut's question?
13:16:18 <dminuoso> Ah, this is some package not available in a resolver?
13:16:23 <dminuoso> Oh indeed. jabbernaut ^-
13:16:34 <jabbernaut> oops yes I installed mathforhaskell
13:16:55 <c_wraith> frdg: the problem appears to be that you're using a parser that doesn't do arbitrary backtracking
13:17:13 <jabbernaut> but when I "import Math.NumberTheory.Prime" it cannot find it
13:17:41 <jabbernaut> I used Administrator shell in Win10
13:17:55 <dsal> frdg: Instead of `parser1` trying to parse `NumberOrString`, why don't you make `paresNumberOrString :: Parser [NumberOrString]`  and use something like `sepBy` ?
13:18:01 <c_wraith> frdg: the most general solution is the `try' combinator, which stores the state before parsing, and restores it if the parse fails
13:18:23 <dminuoso> jabbernaut: The easiest way would not be to "install" it, but place the package as a sub-directory in your project
13:18:26 <c_wraith> frdg: that's overkill for your situation, though - you could just refactor the grammar in a number of ways
13:18:37 <jabbernaut> oh thanks
13:18:42 <dminuoso> jabbernaut: Then ensure your package.yaml has some `packages: ['.', 'packageName']` stanza
13:19:05 <ski>   Lo
13:19:09 <dminuoso> I think. I dont use stack, but that's how I recall it
13:19:17 <frdg> ok so it seems that some combination of `sepBy` and `try` is needed
13:19:20 <jabbernaut> appreciate it
13:19:33 <c_wraith> frdg: you shouldn't need try if you use sepBy
13:19:50 <frdg> c_wraith: ok thank you
13:19:55 <c_wraith> frdg: the problem is being caused by the fact that you have skipDot in both branches of a (<|>)
13:20:20 <dsal> I might try the number parser and then the string parser.  But parse one before you parse many.
13:20:30 <c_wraith> frdg: if you just factored it out, that would be the minimal necessary change.
13:20:44 <c_wraith> frdg: but something like sepBy is much more nicely composable
13:21:36 <frdg> ok thanks dsal, c_wraitch
13:21:46 <frdg> *c_wraith
13:21:57 <bifunc2> How can I return  a pointer with inline-c? This    [C.block| *char {    gives me error     unexpected "*"
13:24:00 <bifunc2> lol 1sec char* seems  to work
13:24:27 <solonarv> well yes, because char* is how you write that type in C ;)
13:24:39 <Tiza> dminuoso: I'm trying to do the same thing, it seems I can't import Data.List.Ordered, I tried copying the source code and importing it from another file in the same directory but ghci doesn't recognize it for some reason?
13:34:08 <xsperry> can I use == and /= to reliably compare two UTCTime objects?
13:37:32 <solonarv> xsperry: UTCTime is an integer number of picoseconds
13:37:46 <xsperry> ah okay
13:38:16 <solonarv> so technically yes, but the precision is high enough that you can't expect two separate calls to 'getCurrentTime' to give equal values
13:38:46 <solonarv> e.g. 'do x <- getCurrentTime; y <- getCurrentTime; pure (x == y)' might be True or False
13:38:49 <xsperry> I'm checking if file was modified
13:39:01 <xsperry> since the last time I checked
13:39:48 <xsperry> I used >, but that failed to detect if I copied an older version of the file, with older modification date. so I changed it to /=
13:40:38 <monochrom> Generally, if you don't see a lot of functions for a certain type, then it means the real fun is in the instances of that type, e.g., is it an Eq instance? Num instance? ...
13:41:00 <xsperry> I know it has an Eq instance, but so does Double
13:41:23 <monochrom> And indeed there are times it is correct to use == for Double.
13:42:27 <monochrom> More strongly, == for Double is reliable, too.
13:42:45 <solonarv> what do you mean by "reliable"?
13:42:51 <monochrom> What's not reliable is sin(pi/2) is not reliably 1.
13:42:54 <xsperry> I guess it would work in this case as well, it would be the same Double
13:42:57 <xsperry> or would it?
13:43:06 <xsperry> if UTCTime used Double
13:43:08 <d34df00d> Is there anything like godbolt's compiler explorer, but for ghc? godbolt itself has a too old ghc without llvm.
13:43:32 <solonarv> it would be if the underlying filesystem used Double and there was no conversion to some other format inbetween
13:43:34 <monochrom> Double itself is not some Heisenberg uncertainty thing.
13:44:09 <solonarv> if that isn't the case then you could have different code paths converting to Double differently (different rounding for example), I guess?
13:44:22 <monochrom> sin(pi/2) /= 1 because pi /= π and/or sin has deviations.
13:44:26 <wavemode> ghc itself can dump asm with -ddump-asm. that's what godbolt itself uses
13:44:26 <veverak> what is name of the function that can do: [m a] -> m [a] 
13:44:28 <veverak> ?
13:44:34 <veverak> (list of moands to monad list)
13:44:36 <xsperry> sequence
13:44:40 <xsperry> :t sequene
13:44:40 <veverak> !!! thanks
13:44:41 <lambdabot> error:
13:44:41 <lambdabot>     • Variable not in scope: sequene
13:44:41 <lambdabot>     • Perhaps you meant one of these:
13:44:41 <xsperry> :t sequence
13:44:42 <lambdabot> (Traversable t, Monad m) => t (m a) -> m (t a)
13:44:59 <solonarv> veverak: hoogle can answer such questions a lot of the time
13:45:00 <monochrom> This actually says that Double's == is reliable faithful honest-to-God, actually.
13:45:07 <veverak> solonarv: I see
13:45:14 <xsperry> @hoogle  [m a] -> m [a]
13:45:14 <lambdabot> Hledger.Utils sequence' :: Monad f => [f a] -> f [a]
13:45:15 <lambdabot> Test.FuzzCheck jumble :: (MonadIO m, MonadBaseControl IO m) => [m a] -> m [a]
13:45:15 <lambdabot> Control.Monad.Parallel sequence :: MonadParallel m => [m a] -> m [a]
13:45:31 <solonarv> you can enter a type as a search term and it will give you matching functions from its databse
13:46:06 <xsperry> @hoogle t (m a) -> m (t a)
13:46:07 <lambdabot> No results found
13:46:19 <monochrom> There is too much FUD about Double; and worse, even as far as FUDs are concerned, this one is not even blamed on the right target.
13:48:47 <d34df00d> wavemode: that's not as nice for showing other people, but I guess that works, thanks!
13:53:48 * hackage xdot 0.3.0.2 - Parse Graphviz xdot files and interactively view them using GTK and Cairo  https://hackage.haskell.org/package/xdot-0.3.0.2 (DennisFelsing)
13:59:02 <EvanR> if done right Double computations can remain accurate enough(tm) for extremely long time periods
13:59:42 <EvanR> if done wrong we don't have nice built in failure modes
14:00:11 <EvanR> so you also have to worry about doing it wrong right
14:29:39 * muslimm If U believe in the only creator of heaven & earth(the one) that moses believed in him and Jesus(monothiesm) u will be safe * islam is your 7 cave of wonders; jewel of THE SEAS. For he is: (Allah) the only God; 2 our refuge; 6follow islam 7 The true religion of God it's our way to saftiness, Time and life is in god,s Hand
14:33:07 <davve> haha damn, i wanted him to continue that
14:41:24 --- mode: ChanServ set +o monochrom
14:41:40 --- mode: monochrom set +b muslimm!*@*
14:41:45 --- mode: monochrom set -o monochrom
14:51:13 <solrize> satfiness?  i guess i won't find out what that is
14:57:53 <dsal> What's with the muslimm ban?
14:58:58 <nshepperd2> that's traditionally what one does with spammers
16:14:48 * hackage language-asn1 0.6 - Parsing of ASN1 definitions  https://hackage.haskell.org/package/language-asn1-0.6 (DmitryAstapov)
16:15:48 * hackage ekg-statsd 0.2.5.0 - Push metrics to statsd  https://hackage.haskell.org/package/ekg-statsd-0.2.5.0 (MikhailGlushenkov)
16:18:08 <jumper149> Is there a trick to deriving MonadUnliftIO from ReaderT?
16:21:04 <jumper149> GHC talks to me like it's the government and is not allowed to derive it: "We cannot know what roles the parameters to 'm' have; we must assume that the role is nominal"
16:23:23 <jumper149> ^ This is what I get for: `deriving instance MonadUnliftIO m => MonadUnliftIO (MyTransformer a b c m)` where `newtype myTransformer a b c m x = ReaderT a b c m x`
16:24:14 <solonarv> you could maybe do it with a super fancy quantified Coercible constraint, but at the point you might as well write the instance yourself IMO
16:25:10 <jumper149> solonarv: ok, was hoping for an extension that could do it for me or something like that, but I guess I will hand-write it then
16:30:48 * hackage smallcheck 1.2.0 - A property-based testing library  https://hackage.haskell.org/package/smallcheck-1.2.0 (Bodigrim)
16:31:06 <monochrom> One of the "deriving via" strategies may do what you want. But if they don't, I wouldn't press the issue. Nothing is "obvious".
16:33:28 <monochrom> Neural networks can now do integration and solve some ODEs. (Input format is AST.) In the far future, maybe they can also write "obvious" instances for you. But not today.
16:34:55 <monochrom> (https://www.quantamagazine.org/symbolic-mathematics-finally-yields-to-neural-networks-20200520/)
16:35:39 <Cale> jumper149: Also, I would usually try to avoid needing instances of MonadUnliftIO whenever I can, potentially by (if necessary) defining type classes for the operations I would have used it to deal with.
16:38:20 <Cale> Sometimes the thing that MonadUnliftIO gives you is fine, but if you don't think through what's going on with each transformer, it's easy to run into cases where you get something that typechecks and maybe you don't even know what it's doing with MonadUnliftIO, but it doesn't end up having the right meaning given your transformers.
16:40:14 <jumper149> I'm not seeing any other way to deal with this, other than having a MonadUnliftIO instance. I have multiple occurences where I need it.
16:40:15 <nshepperd2> i just fed gpt-2 this prompt: "data Plugh f a = Plugh (f a); instance Functor f => Functor (Plugh f) where" and after a few tries it generated "fmap f (Plugh t) = Plugh (fmap f t)"
16:40:49 <Cale> If you know what monad you're using, you can always just run the transformers yourself, right?
16:40:49 <monochrom> Heh
16:41:11 <nshepperd2> tabnine is trained specifically on code, so *that* can probably do it for you with better reliability already
16:41:20 <monochrom> :)
16:41:48 <jumper149> Cale: That's what I'm currently doing and I find it a lot harder to read than "This can also be done in just IO".
16:42:13 <monochrom> But I am worried, since it has other tries that we consider wrong. My worry can be eliminated if: those wrong tries don't type-check.
16:43:55 <Cale> jumper149: Yeah, so all that MonadUnliftIO does is basically running the transformer for you. I'm just saying that rather than using the MonadUnliftIO type class, you have e.g. MonadForkIO or something -- something which tells you which operation is using the "unlift"
16:44:35 <Cale> Because the stuff which makes sense for forkIO and the stuff which makes sense for catch is a bit different already, and that's only two operations
16:45:48 <Cale> Actually, looking at the unliftio library, it's kind of funny, they've already got a pretty decent guide to the stuff which ought to have type classes defined for it.
16:48:37 <monochrom> https://youtu.be/FyCYva9DhsI?t=379 :)
16:49:56 <jumper149> I guess my knowledge doesn't go deep enough to understand what could possibly go wrong with MonadUnliftIO, but then I also haven't read most of the documentation in unliftio^^
16:54:13 <dsal> jumper149: I ran into that a while back and ended up just manually implementing UnliftIO
20:26:48 * hackage text-ansi 0.1.0.1 - Text styling for ANSI terminals.  https://hackage.haskell.org/package/text-ansi-0.1.0.1 (mitchellwrosen)
20:37:59 <libertyprime> hey guys. anyone know of an emacs mode for .hsfiles ? or can tell me what the format is called?
20:43:55 <slack1256> There is haskell-mode for .hs files.
20:48:52 <justin2> Hi does anyone know the best channel for asking Cabal install questions?
21:08:09 <slack1256> justin2: I would say just by virtue of the amount of people
21:14:16 <Axman6> I assume slack1256 meant to say here is finew
21:17:02 <justin2> Awesome, I'm on the Pinebook, and I've tried almost every version matching I can think of. I've already gotten rid of the issue with the unlinked c library, and now it comes down to when I finish compiling and installing ghc+basic haskell packages with the AArch64 bootstrap, I move on to Cabal. I usually install Cabal first, and even with the Cabal that comes with GHC, when I take that version of
21:17:03 <justin2> Cabal-installer I always get the wrong Base package version.
21:18:05 <justin2> At this point, I'm not sure how much good I can get by just reinstalling GHC/Cabal at different version over and over. I wonder if there's a way to change the version of the Base package without Cabal so that I can install the CLI(Cabal-Installer).
21:18:18 <sclv> Ok what ghc and what cabal-install are you trying
21:20:01 <slack1256> Axman6: I almost say it right, damn!
21:20:03 <justin2> Previously I tried, GHC 8.10.0 and Cabal 3.2.0 and Cabal 3.0.0 and Cabal 3.0.1 and Cabal 3.0.0. Right now I went through GHC 8.8.2 Cabal 3.2.0 Cabal 3.0.0 Cabal 3.0.1 and 3.0.2.
21:20:19 <sclv> oof
21:20:40 <justin2> No worries :). I eventually want to get this up and running so I can package Cabal and GHC for Arch AArch64.
21:21:16 <justin2> If I'm even able to get that far lol, currently just worried about getting Haskell on this, and improving my Haskell.
21:21:53 <sclv> 8.8.2 should work with latest cabal install
21:22:06 <justin2> The only issue is, there is no package for cabal install.
21:22:11 <sclv> what base does ghc-pkg list say?
21:22:48 <justin2> with GHC 8.10.0 base-4.14.0.0 and 8.8.2 base-4.13.0.0
21:23:22 <sclv> right. so cabal-install 3.2 says it can work with base > 4.14
21:23:49 <justin2> But Cabal 3.0.2 requires < base-4.13 and Cabal 3.2.0 < base-4.14
21:24:08 <sclv> er i meant <
21:24:20 <sclv> So 8.8.2 should work
21:24:27 <sclv> since 13 < 14
21:24:28 <justin2> I'm on it :).
21:24:38 <justin2> The problem is when you install the Cabal package
21:24:43 <justin2> It ups the base package
21:24:46 <justin2> Then cabal-install
21:24:48 <justin2> requires <
21:25:22 <justin2> I have Cabal-3.0.0.0 3.2.0.0 3.0.1.0 3.0.2.0 all installed as packages.
21:25:34 <justin2> So just trying to match the dang GHC and cabal-install :)
21:25:46 <sclv> from the distro or just installed from the command line?
21:25:56 <justin2> Distro doesn't have haskell supported :(
21:26:18 <sclv> ok but installing cabal shouldn’t change base
21:26:29 <sclv> Base is hardwired into ghc
21:26:42 <justin2> You're right
21:27:06 <justin2> Sorry, meant the Cabal installer requires higher base, than the Cabal-install bootstrap stuff.
21:27:16 <sclv> what Cabal installer?
21:27:17 <sclv> i'm confused
21:27:24 <justin2> I was confused here too
21:27:27 <sclv> you just need to install ghc, which comes with base and also Cabal
21:27:38 <justin2> Cabal is a GHC package and cabal-install is the CLI tool.
21:27:42 <sclv> right
21:27:46 <sclv> but Cabal comes with GHC
21:27:54 <justin2> Yes but I need the CLI tool
21:27:58 <sclv> i know
21:28:29 <sclv> i'm saying that if you install ghc, then it comes with a Cabal. and you may need a newer Cabal, but that's straightforward to install
21:28:38 <sclv> and it won't change the base, because it literally can't
21:28:42 <justin2> I have tried that.
21:28:55 <sclv> but you said you succeeded, you have 3.2 installed
21:29:03 <justin2> The problem is the cabal-installer, requires a higher base than the Cabal version that comes with GHC
21:29:10 <sclv> no it doesn't
21:29:11 <justin2> I have all the cabal versions > 3.0.0.0
21:29:22 <sclv> or i mean, it may
21:29:24 <justin2> but no Cabal CLI
21:29:24 <sclv> but you have installed it
21:29:31 <sclv> ok, so you've installed Cabal 3.2
21:29:35 <justin2> Yes
21:29:36 <sclv> so you have the higher Cabal required
21:29:46 <sclv> so now why can't you build cabal-install 3.2 ?
21:29:54 <sclv> (assuming you're doing everything on ghc 8.8.2)
21:30:11 <justin2> Because it requires a different range for the base package.
21:30:21 <sclv> what range does it require, and why would that fail?
21:31:19 <justin2> <4.13
21:31:35 <sclv> no, cabal-install 3.2 should require < 4.14
21:31:46 <sclv> if it doesn't, you have a bad package for it for some reason
21:31:47 <justin2> I'm on Cabal 3.0.2
21:31:55 <justin2> I can jump back to 3.2.0
21:32:10 <sclv> right. what i'm saying is use 3.2.0 for cabal-install and Cabal both, on ghc 8.8.2
21:32:14 <justin2> 3.2.0 was what I tried first with 8.8.2
21:32:25 <sclv> the 3.2, 8.8.2 combo should work
21:32:44 <justin2> sure I'll let it do it's thing again overnight
21:32:49 <justin2> I'm in no rush
21:32:53 <justin2> Having a fun summer project lol
21:33:09 <justin2> Appreciate the help.
21:33:34 <sclv> note that bootstrap is a bit janky, since its not often used
21:34:00 <sclv> so you may be hitting a real issue. but i just mean from version numbers and my understanding, that combo of 3.2 (Cabal, cabal-install) and 8.8.2 should all version match fine
21:35:17 <justin2> Ok, just ran it
21:36:01 <justin2> running again so I can catch the output lol
21:36:17 <justin2> Erratum 835769 found and fixed at "/home/justin/.ghc_lib/lib/ghc-8.8.1/rts/libHSrts.a(Storage.o)", section 74, offset 0x00000020.
21:36:18 <justin2> Erratum 835769 found and fixed at "/home/justin/.ghc_lib/lib/ghc-8.8.1/rts/libHSrts.a(GetTime.o)", section 7, offset 0x00000020.
21:36:20 <justin2> Erratum 835769 found and fixed at "/home/justin/.ghc_lib/lib/ghc-8.8.1/rts/libHSrts.a(Itimer.o)", section 6, offset 0x00000044.
21:36:23 <justin2> Configuring HTTP-4000.3.12...
21:36:25 <justin2> Setup: Encountered missing or private dependencies:
21:36:26 <justin2> base >=4.3.0.0 && <4.13
21:36:28 <justin2> Error during cabal-install bootstrap:
21:36:30 <justin2> Configuring the HTTP package failed.
21:36:40 <justin2> That's on the cabal-install located in 3.2.0
21:36:51 <sclv> ok right so the error is the HTTP library, sigh
21:37:21 <justin2> I've been trying almost every matching cabal + ghc versioning I can think of lol
21:37:27 <justin2> Been playing with this for a few weeks.
21:37:38 <sclv> i think its fixable -- you should have asked earlier
21:37:39 <justin2> Is there any known version that 100% works
21:37:51 <sclv> they're rewriting bootstrap so they closed the issue to fix the http thing, bleh :-P
21:38:06 <justin2> I see, no worries.
21:38:10 <sclv> if you were using the 8.6 series you'd be in shape, but that's maybe a bit old for your taste
21:38:20 <justin2> I can upgrade with cabal right?
21:38:23 <sclv> also of course there's binaries for most platforms, but you're not on a standard
21:38:49 <justin2> I figured once I get cabal, I can have it fix all the things I break trying to get there lol.
21:38:55 <justin2> Because GHC works flawlessly.
21:39:33 <sclv> ok, so you can edit the bootstrap.sh and manually bump the HTTP version to a higher one that works with your base
21:39:55 <justin2> That's really smart lol :D
21:40:01 <sclv> which would be 400.3.14
21:40:04 <sclv> 4000 rather
21:40:17 <justin2> I tried moving the versions inside of the .cabal file.
21:40:21 <sclv> and if you hit other snags like that, again, just manually bump the versions in the bootstrap
21:40:30 <sclv> yeah, the bootstrap has to hardwire in single fixed versions
21:40:32 <justin2> I'll try that right now, appreciate it :)
21:40:38 <sclv> because you don't yet have cabal-install which solves all that shit for you :-P
21:40:48 <sclv> that's why its a PITA that bitrots, and why they're rewriting it
21:40:59 <justin2> Is there a good fix for that?
21:41:09 <sclv> well, for now just fix 'em as you see 'em
21:41:46 <justin2> Are you on the development team by any chance?
21:41:50 <sclv> eventually they'll hopefully finish and merge this: https://github.com/haskell/cabal/pull/6719
21:41:59 <sclv> i'm a sometime contributor, but not a core developer
21:42:04 <sclv> i work more on maintaining hackage
21:42:13 <justin2> Awesome. Thanks so much for the help.
21:42:35 <sclv> ok, good luck
21:42:35 <justin2> The getting it to AArch64 is a little bit of a journey to say the least.
21:43:05 <justin2> There was one crazy issue
21:43:10 <justin2> In glibc.
21:44:10 <justin2> I fixed it by `link ..../sdfghjk.a.o ..../sdfghjk.a.5.o` or something like that, wish I documented it so AArch64 people who aren't on Debian could get it without spending the 2-3 days of that.
21:44:26 <justin2> It was a shot in the dark, as I did many of those lol.
21:49:02 <justin2> Looking good by the way, just powered thru zlib and another library, and almost done. Thank you again for the help sclv :).
23:50:38 <justin2> exit
