00:03:48 <typetetris> Woa, is `GeneralizedNewtypeDeriving` broken in 8.10.1? Can't derive `http://hackage.haskell.org/package/time-1.10/docs/Data-Time-Format-Internal.html#t:ParseTime` because the Proxy phantom type parameter. It complains it doesn't know the Role and needs to assume nominal.
00:11:44 <c_wraith> that doesn't sound broken
00:12:01 <c_wraith> It sounds like you need to specify a role
00:21:02 <typetetris> c_wraith: Before 8.10.1 it just worked fine. Its just a `deriving ParseTIme` on a newtype wrapper around `UTCTime`.
00:47:45 <kuribas> Having large long lived data in a server system is bad, because of GC pauses.  Wouldn't be a solution to capture the long lived data in a compact region, then regularly copy it to remove garbage in the region?
00:47:57 <kuribas> the copying can be done in a thread in parallel.
00:48:34 <kuribas> or even better, partition the data in independent actors, where each one has it's own state, and does its GC independently.
00:50:25 <kuribas> it would be like manual memory management, however easy to implement.
00:54:25 <kuribas> then you could have another actor which coordinates the GC, by making sure only one actor at a time is copying it's data.
00:54:35 <kuribas> Which could avoid big memory peaks.
00:55:29 <kuribas> I've always wanted to play with the actor model.  It looks like "OO done right".
00:58:27 <[exa]> kuribas: have you actually measured this kind of gc pauses?
00:59:05 <kuribas> [exa]: no
00:59:47 <kuribas> [exa]: however, in this article, they went from 68s to 3s: https://tech.channable.com/posts/2020-04-07-lessons-in-managing-haskell-memory.html
01:00:15 <kuribas> [exa]: they reported performance loss quadratic in the size of the live data.
01:03:09 <typetetris> Removing all those `MonadFail` instances existing before sounds like a lot of breakage ...
01:03:58 <[exa]> kuribas: oh yes that seems reasonable, preventing the GC from unnecessarily walking through a heap of data
01:04:25 <kuribas> [exa]: if the server is stateless, it's not a problem
01:04:43 <[exa]> I guess you're making small changes in the big structure?
01:04:45 <kuribas> [exa]: but once you are, say, caching your data structures, it can become a problem.
01:05:12 <kuribas> [exa]: in our server, we have configuration data which doesn't change often, but it does change.
01:05:19 <kuribas> (it's in lisp though, not haskell)
01:18:48 <typetetris> How can I look up, which packages on hackage already build with ghc 8.10.1 ?
01:23:14 <maerwald> you can search for base constrained, but thats just an indicator
01:24:34 <maerwald> So you can know wich packages *resolve* with 8.10.1
01:26:03 <maerwald> GHC-8.10.1 uses base-4.14.0.0
01:27:49 * hackage hosc 0.18 - Haskell Open Sound Control  https://hackage.haskell.org/package/hosc-0.18 (RohanDrape)
01:29:53 <typetetris> maerwald, ok thanks
01:32:18 * hackage hsc3 0.18 - Haskell SuperCollider  https://hackage.haskell.org/package/hsc3-0.18 (RohanDrape)
01:45:19 * hackage hmt 0.18 - Haskell Music Theory  https://hackage.haskell.org/package/hmt-0.18 (RohanDrape)
01:46:36 <pong> is this related to the making music in Haskell YouTube video?
01:46:57 <phadej> yes and no
01:47:09 <phadej> or depends which video
01:49:19 <typetetris> does polysemy-plugin-0.2.5.0.0 compile for someone on ghc 8.10.1 ?
01:55:04 <muslimm> If U believe in the only creator of heaven & earth(the one) that moses believed in him and Jesus(monothiesm) u will be safe * islam is your cave of wonders; jewel of THE SEAS. For he is: (Allah) the only God; our refuge; follow islam The true religion of God it's our way to saftiness, Time and life is in god,s Handz
02:02:23 <kuribas> is parsec still the recommended parser library?
02:02:40 <Hopplahase> megaparsec is, I guess
02:03:27 <enikar> but, if you have ghc, you have parsec.
02:04:21 <xerox_> and if you are writing haskell, you have ghc; syllogism
02:10:17 <kuribas> ok, megaparsec it is :)
02:10:21 <kuribas> thanks
02:21:19 * hackage binary-parser 0.5.6 - A highly-efficient but limited parser API specialised for bytestrings  https://hackage.haskell.org/package/binary-parser-0.5.6 (NikitaVolkov)
03:06:48 * hackage base-prelude 1.4 - The most complete prelude formed solely from the "base" package  https://hackage.haskell.org/package/base-prelude-1.4 (NikitaVolkov)
03:19:19 * hackage postgresql-binary 0.12.3 - Encoders and decoders for the PostgreSQL's binary format  https://hackage.haskell.org/package/postgresql-binary-0.12.3 (NikitaVolkov)
03:29:52 <HenryCH> in base64 encoding, are the encoded bytes always sent without any padding? if not how can you tell a padding byte apart from actual data?
03:33:52 <srk> HenryCH: possibly by the length
03:35:06 <phadej> base64 uses == as padding character
03:35:30 <phadej> If you know the size, you can omit them
03:35:40 <phadej> if you don't, then they cannot be omitted
03:35:50 <phadej> (or at least shouldn't)
03:36:44 <HenryCH> so what you're always actually sending is some utf encoding of the base64 encoding, such that you can interpret the '='?
03:38:48 <HenryCH> in that case how do you know what text encoding was used?
03:39:06 <Hopplahase> base64 is purely ASCII
03:39:34 <HenryCH> right i see
03:41:33 <phadej> The idea of base64 is to encode arbitrary binary (octet) data in "printable" ASCII characters, so that data can be embedded in textual protocols
03:42:15 <phadej> In "base64 encoding" and "UTF8 encoding" the encoding word has different meanings
03:43:03 <phadej> base64 encodes "binary as text", and UTF8 encodes (unicode) text in some specific (binary) way.
03:44:13 <phadej> (so you can take utf8 text as binary, base64 encode it, and then encode that text in utf16 to send over wire - which is very silly thing to do, but you can do that)
03:45:00 <HenryCH> sounds like the same meaning and the encoded target are just different things?
03:47:00 <HenryCH> = is ascii 61, so if you send that, how do you tell it apart from an encoded sextet at the end? do you always just have to send the length?
03:47:22 <infinity0> they are different specialised instances of the same parameterised meaning sure :)
03:48:54 <nshepperd2> HenryCH: is your question about what base64 does when the data to be encoded is not a multiple of 3 bytes long?
03:50:01 <nshepperd2> because each base64 byte corresponds to 6 bits of input
03:50:10 <HenryCH> nshepperd2 yes, trying to understand what ultimately gets transmitted in that case
03:50:18 * hackage diagrams-pandoc 0.3.1 - A Pandoc filter to express diagrams inline using the Haskell EDSL _Diagrams_  https://hackage.haskell.org/package/diagrams-pandoc-0.3.1 (BrentYorgey)
03:51:07 <nshepperd2> i'm pretty sure the answer is it's padded with 0 bits to make up the next full base64 byte
03:51:34 <HenryCH> i get the text representation, but i'm wondering what goes over the wire and how the padding vs paddless cases are distinguished on the other end
03:51:40 <nshepperd2> (and then the output is padded with =s to make it a multiple of 4 in size, but this isn't really required)
03:53:14 <nshepperd2> you can tell which part is the padding because there's not enough of it to make a full byte
03:57:19 * hackage hasql 1.4.4 - An efficient PostgreSQL driver with a flexible mapping API  https://hackage.haskell.org/package/hasql-1.4.4 (NikitaVolkov)
03:57:22 <nshepperd2> eg. base64("a") is "YQ==". The Y represents 011000, and the Q represents 010000, then the =s are ignored
03:57:53 <nshepperd2> that's 12 bits, so you take the first 8 only and get 01100001 = 97 = 'a'
04:01:10 <HenryCH> but what's actually sent are the ascii bytes of YQ==?
04:02:41 <nshepperd2> sure
04:03:10 <nshepperd2> base64 is for converting binary data into text so yeah, you'd normally encode that text in ascii
04:03:40 <nshepperd2> or utf-8
04:03:57 <nshepperd2> along with whatever document you've embedded it in
04:05:18 * hackage secp256k1-haskell 0.2.5 - Bindings for secp256k1  https://hackage.haskell.org/package/secp256k1-haskell-0.2.5 (jprupp)
04:05:31 <nshepperd2> you could also write it down on paper
04:09:26 <HenryCH> ok i think i get it, thanks
04:27:22 <HenryCH> nshepperd2 does that imply you cant embed base64 in a utf-16 doc because you need each letter to be a single byte?
04:28:48 * hackage ghc-exactprint 0.6.3.1 - ExactPrint for GHC  https://hackage.haskell.org/package/ghc-exactprint-0.6.3.1 (AlanZimmerman)
04:32:48 * hackage cabal2nix 2.15.5 - Convert Cabal files into Nix build instructions.  https://hackage.haskell.org/package/cabal2nix-2.15.5 (PeterSimons)
04:33:17 <HenryCH> nevermind i get it :D
04:54:45 <frdg> I'm having trouble understanding the value of the function `some :: Alternative f => f a -> f [a]` , and why it must be specific to Alternatives.
05:03:21 <merijn> frdg: What do you mean by "why it must be specific to Alternatives"
05:04:06 <Hopplahase> It's easiest to understand when your think of f as a parser instance, where it tries to parse at least one occurence of the passed argument parser
05:05:03 <frdg> merijn: I mean why does a type have to be an alternative to use the function
05:05:23 <merijn> frdg: Well, if it is not an Alternative, then what does it do?
05:06:09 <Hopplahase> "Because the implementantion uses <|>" is probably not a satisfying answer?
05:32:39 <typetetris> Is there still work done on polysemy and loopbreaker? All the issue sound like they don't get to do it ..
05:36:32 <srk> typetetris: just got https://github.com/polysemy-research/polysemy/issues/316#issuecomment-643615475
05:38:26 <srk> ah, I'm already using the patched one
05:43:10 <typetetris> srk: I thought, they are simply not using loopbreaker at the moment, resulting in slower code?
05:44:24 <srk> typetetris: don't know, I've started playing with it only recently and my code is not performance bound so hard to tell
06:29:49 * hackage polysemy-webserver 0.1.0.0 - Start web servers from within a Polysemy effect stack  https://hackage.haskell.org/package/polysemy-webserver-0.1.0.0 (AndrewMiller)
06:51:48 * hackage pqueue 1.4.1.3 - Reliable, persistent, fast priority queues.  https://hackage.haskell.org/package/pqueue-1.4.1.3 (lspitzner)
07:14:47 <kuribas> why does (re)loading a file in ghci force the OverloadedStrings extention?
07:14:53 <kuribas> I enabled it in ghci, but not in the file
07:15:41 <merijn> kuribas: Because loading and importing have different effects
07:16:23 <kuribas> so I should import instead?
07:16:45 <merijn> If you import a module in ghci you don't affect any of its semantics, but only get the public API. If you load it, it behaves as if you wrote the entire thing in ghci, exposing all internal definitions, etc. so it'd make sense if that affected extensions too
07:17:08 <kuribas> hmmm.  What is the best way to load a module in emacs?
07:24:24 <kuribas> ah, I need to set haskell-process-type to 'cabal-new-repl
07:45:52 <_deepfire> Is it a bug, or me misinterpreting things, when GHC says "Overlapping instances", but only lists one?
07:46:18 * hackage hatexmpp3 0 - XMPP client with 9P and (optionally) GTK interfaces  https://hackage.haskell.org/package/hatexmpp3-0 (SergeyAlirzaev)
07:46:27 <merijn> _deepfire: Consider "overlapping" as "potentially overlapping"
07:47:24 <_deepfire> merijn: how is one expected to navigate out of this "potential" situation with just a single instance listed, though?
07:48:38 <merijn> _deepfire: Not defining it. Basically it's saying "this thing will conflict with many other possible definitions, even if those aren't in the code you are compiling right now"
07:48:46 <merijn> _deepfire: Can you pastebin your instance definition?
07:50:40 <_deepfire> merijn: I'm afraid it's a bit too convoluted to be extracted..  not a good sign on its own, of course.
07:51:18 * hackage hakyll-agda 0.1.12 - Wrapper to integrate literate Agda files with Hakyll  https://hackage.haskell.org/package/hakyll-agda-0.1.12 (FrancescoMazzoli)
07:52:49 <merijn> _deepfire: The simplest example of an overlapping instance would be something like "instance Foo [a]" this overlaps because [a] subsumes [Int], [Bool], etc. which all become undefinable. Whether this is a problem depends
07:53:24 <_deepfire> I must admit, I'm still a bit unclear about what "potential" matching could mean, since there'a fairly specific algorithm described in the GHC manual.
07:54:25 <_deepfire> So when a compiler produces an "overlapping instances" error message that contains a single instance (with no hints of others), I'm frankly surprised -- I lack the tools to conceptualise what's going on..
07:55:07 <merijn> _deepfire: Does my above example help?
07:55:32 <merijn> Do you see how "instance Foo [a]" and "instance Foo [Int]" conflict?
07:57:39 <_deepfire> merijn: the question is -- given the types you listed, would GHC produce an error message with just a single entry (for "instance Foo [a]" I assume)
07:58:12 <merijn> _deepfire: Well, the thing is "instance Foo [Int]" may be defined in some other package that GHC is not aware off while you're compiling your code with "instance Foo [a]"
07:58:59 <merijn> _deepfire: So if someone is writing an executable that depends on your code with "instance Foo [a]" and another package with "instance Foo [Int]" they are now hosed
07:59:20 <merijn> _deepfire: But GHC won't know about this conflict when those two packages are compiled
07:59:29 <merijn> Only when combining in the executable does it see bot
07:59:32 <_deepfire> some other package that GHC is not aware of?  But for any given module being compiled the set of modules (and so all incoming instances) is very clear during compilation?
08:00:06 <merijn> _deepfire: So the warning is saying that "instance Foo [a]" overlaps (i.e. with anything picking a specific type for 'a') and warning about that
08:04:01 <_deepfire> wouldn't by that logic, any instance containing a variable produce such a warning?
08:04:27 <merijn> Well, yes
08:29:10 <tinga> Hi. Any pointers to emacs setup descriptions or init files for Haskell? Reading https://wiki.haskell.org/Emacs only haskell-mode with nothing else seems to be recommended.
08:30:48 <tinga> (Ah, that wiki page has links on the right to other parts of the setup like inferior processes; missed that. Still, would be interesting to see setups that are actually working well.)
08:48:48 <srid> That wiki doesn't mention doom-emacs. cf. https://github.com/hlissner/doom-emacs/tree/master/modules/lang/haskell
09:16:59 <xsperry> if (not (length xs))  <- wasn't there a shorter way of writing this?
09:17:15 <xsperry> sorry, I meant:
09:17:21 <xsperry> if (not (null xs))
09:18:12 <merijn> xsperry: Eh, pattern matching? :p
09:18:31 <xsperry> not sure that is any shorter
09:18:41 <merijn> Depends what you intend to do
09:18:52 <xsperry> perform an action if list is not empty
09:19:05 <merijn> At the very least the parenthesis around "not (null xs)" are redundant, so that's saving 2 characters right there!
09:19:06 <xsperry> I'm actually using when instead of if, so pattern matching would definitely be longer
09:31:17 <merijn> xsperry: Oh, you can actually simplify a bit :p
09:31:20 <merijn> :t when
09:31:21 <lambdabot> Applicative f => Bool -> f () -> f ()
09:31:22 <merijn> :t unless
09:31:23 <lambdabot> Applicative f => Bool -> f () -> f ()
09:31:35 <merijn> xsperry: unless is basically "when . not"
09:32:08 <merijn> So then it's just "unless (null xs)"
09:46:55 <xsperry> merijn, ah yes, I forgot about unless
09:57:48 * hackage rdf4h 4.0.1 - A library for RDF processing in Haskell  https://hackage.haskell.org/package/rdf4h-4.0.1 (RobStewart)
10:02:18 * hackage zephyr 0.3.1 - Zephyr, tree-shaking for the PureScript language  https://hackage.haskell.org/package/zephyr-0.3.1 (coot)
10:47:15 <_deepfire> How does one debug 'cabal v2-repl' invocations busting the build cache for 'cabal v2-build'?
10:47:53 <_deepfire> I do have the same -O0 passed to both, as well as have tried twiddling with --enable-executable-dynamic for v2-build..
10:50:10 <_deepfire> there's just no clear point for this implicit parametrisation that I could inspect, it seems..
11:02:50 <ja> Facundo is talking about QualifiedDo now
11:09:12 <grazfather> hey guys, quick q: I want to define an instance of a tuple, and apply typeclass constraints to the values in the tuple. How can I do this?
11:09:35 <grazfather> example: instance MyTypeClass (Num a) => (a, a)
11:10:37 <Hopplahase> instance (Num a) => MyTypeClass (a, a)?
11:10:58 <xerox_> grazfather: are you looking for instance Num a => Class (a,a) to have tuples be instances of your class only if they have both elements of the same type and that type be a Num ?
11:12:34 <Athas> What is the equivalent of ~/.cabal on Windows?
11:12:39 <Athas> This is for CI purposes.
11:14:23 <grazfather> xerox_: I don't know if I understand what you're saying. I just want to implement the method in MyTypeClass on an anonymous type Num a => (a, a)
11:14:49 <grazfather> xerox_: actually I do understand what you said now :) Yes that's what I want
11:14:55 <xerox_> grazfather: sure, not *that* anonymous, the constructor is (,), but yeah
11:15:06 <xerox_> granted, it's a weird name
11:15:11 <grazfather> ah
11:15:28 <wavemode> is michael peyton jones related to simon peyton jones?
11:15:44 <xerox_> (a,a) is special syntax for (,) a a which is exactly equivalent, that does demistify it a bit
11:15:59 <xerox_> it makes it look like any other old boring thing like Either a a
11:16:06 <grazfather> yeah, so basically i get syntax errors when trying to apply constraints to the type. I can do `instance MyTypeClass (Int, Int)` no problem
11:16:21 <Athas> wavemode: I am 90% certain it's his son, given that they share 66% of a name and look pretty alike.
11:16:53 <xerox_> grazfather: by what you wrote it seems like you're just putting the constraints in the wrong place, it's   instance constraints => class tyvars where
11:17:25 <wavemode> "Haskell is my first baby, born slightly before my son Michael"
11:17:27 <wavemode> hm okay
11:18:26 <grazfather> xerox_: that's exactly what I was doing wrong. Thank you!
11:19:08 <xerox_> wavemode: in this talk I remember he does show his children maybe you'll find it https://www.youtube.com/watch?v=re96UgMk6GQ
11:27:01 <slack1256> Has anyone used reactive-banana-gi-gtk? Have you experienced delays on updates with it?
11:51:28 <merijn> hmm
11:51:40 <merijn> There's no Alternative version of foldMap? >.>
11:52:17 <xerox_> :t asum -- maybe?
11:52:18 <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
11:52:49 <merijn> Not quite, I have asum now, but it's awkward
11:53:03 <merijn> Since I need like "asum . map foo"
11:54:04 <xerox_> @hoogle (Foldable t, Alternative f) => (a -> f b) -> t a -> f b
11:54:05 <lambdabot> Util altMap :: (Alternative p, Foldable f) => (a -> p b) -> f a -> p b
11:54:05 <lambdabot> Relude.Foldable.Fold asumMap :: (Foldable f, Alternative m) => (a -> m b) -> f a -> m b
11:54:05 <lambdabot> RIO.Prelude foldMapM :: (Monad m, Monoid w, Foldable t) => (a -> m w) -> t a -> m w
12:06:09 <solonarv> asumMap f = getAlt . foldMap (Alt . f) -- merijn 
12:06:38 <solonarv> (you can throw a few 'coerce's in there for optimization)
12:07:56 <Shiranai> @list
12:07:56 <lambdabot> What module?  Try @listmodules for some ideas.
12:07:59 <Shiranai> @listmodules
12:07:59 <lambdabot> activity base bf check compose dice dict djinn dummy elite eval filter free fresh haddock help hoogle instances irc karma localtime metar more oeis offlineRC pl pointful poll pretty quote search
12:07:59 <lambdabot> slap source spell system tell ticker todo topic type undo unlambda unmtl version where
12:10:16 <c_wraith> solonarv: Shouldn't those be uses of like (#.) instead of coerce?
12:10:53 <solonarv> yes, sure, #. is just a less-generally-typed wrapper around coerce
12:11:09 <merijn> solonarv: To verbose to be worth it :\
12:11:15 <c_wraith> which is helpful for making sure you got it right. :)
12:24:03 <xsperry> with optparse applicative how do I get help for options in each command? prog --help just prints all the commands, and prog command prints all the options, without the help of every option
12:24:25 <xsperry> [s/command/subcommand
12:25:30 <merijn> xsperry: The global help you mean?
12:25:31 <denbrahe[m]> https://tablebooker.com/menu/52625440?utm_source=qrcode&utm_medium=print&utm_campaign=booksafe-menu-promotion
12:25:32 <denbrahe[m]> https://tablebooker.com/menu/52625440?utm_source=qrcode&utm_medium=print&utm_campaign=booksafe-menu-promotion
12:26:21 <merijn> xsperry: Wait, what do you meany by "without the help of every option"?
12:26:41 <denbrahe[m]> Whoops, that was the wrong room
12:27:21 <xsperry> merijn prog subcommand just lists possible options. I can't see a way to get help [that I entered when using optparse applicative library]
12:27:32 <xsperry> for each option
12:27:37 <xsperry> for that specific subcommand
12:28:23 <merijn> xsperry: So, I think you hit an issue I've complained about for a long time, which recently got fixed, but there's no new release with this fix yet
12:28:30 <merijn> See: https://github.com/pcapriotti/optparse-applicative/issues/294
12:28:54 <xsperry> thanks, that seems to be it
12:28:59 <merijn> xsperry: I'm not quite sure how that relates to your help question, though
12:29:19 <merijn> xsperry: Can you pastebin your parser/current output and explain what you expect differently?
12:36:18 <pseudonickname> Haskell brought me bacm t
12:36:46 <pseudonickname> Haskell brought me back to irc after like 15 years
12:39:07 <juri_> yay. i think. :)
12:43:36 <pseudonickname> Having trouble here trying to reconnect with anonymous 
12:44:13 <pseudonickname> People
12:45:36 <MarcelineVQ> That's kind of the idea underlying the word anonymous :>
12:47:36 <pseudonickname> Need to get used to it if i want to reconnect with the community
12:59:57 <merijn> hmm, what's the most convenient way to apply a list [Foo -> Bar -> Baz] to a single pair of Foo and Bar?
13:03:57 <xerox_> @pl \fs (x,y) -> fs <*> pure x <*> pure y
13:03:57 <lambdabot> (`ap` snd) . (. fst) . flip flip pure . (((.) . (<*>)) .) . (. pure) . (<*>)
13:04:04 <xerox_> certainly
13:05:24 <maerwald> @type \xs f -> forM xs (uncurry f)
13:05:26 <lambdabot> (Traversable t, Monad m) => t (a, b1) -> (a -> b1 -> m b2) -> m (t b2)
13:05:41 <maerwald> @type \xs f -> for xs (uncurry f)
13:05:43 <lambdabot> (Traversable t, Applicative f) => t (a, b1) -> (a -> b1 -> f b2) -> f (t b2)
13:07:31 <merijn> hmm, maybe just "map (($ bar) . ($ foo))"
13:07:46 <Heffalump> merijn: a list comprehension?
13:08:04 <merijn> That...might work
13:08:06 <Heffalump> [uncurry f pair | f <- fs]
13:09:11 <solonarv> I'd just go for the maximally simple 'map (\f -> f x y) fs' or '[f x y | f <- fs]', personally
13:47:29 <Shiranai> is the output of the @pl command here equally efficient as the input?
13:48:15 <maerwald> efficient?
13:48:30 <sss>  .|If U believe in the only creator of heaven & earth [the only one] [monothiesm) that moses believed in him and Jesus and mohammed u will be safe *; For he is: (Allah) the only God; our refuge; follow islam The true religion of God & jewel of THE SEAS to be lifted, that is, be true muslimS to be lifted 
13:48:56 <sss> [, that is, be true muslimS to be lifted ****]
13:49:17 <jumper149> Yesterday I asked about opinions on multiple instances of the same constraint (for example: MonadReader r m, MonadReader r' m), but I think this is actually not possible since the MonadReader class is defined with FunDeps (m -> r) and thus m can only have one instance of MonadReader, correct?
13:54:40 <merijn> jumper149: Correct
13:57:24 <jumper149> And I guess there is also no other extension than FunDeps that would make that possible, correct?
13:57:28 <Cale> jumper149: Also, generally I would recommend not using MonadReader constraints at all, except implicitly in the implementation of your own operations
13:57:32 <sss> [Moses believed in Allah as his creator so did Jesus and mohammed *; For he is: (Allah) the only God; our refuge; follow islam The true religion of God & jewel of THE SEAS to be lifted, [that is, be true muslimS to be lifted ****]
13:57:38 --- mode: ChanServ set +o Cale
13:57:44 --- mode: Cale set +b *!*@185.142.42.192
13:57:44 --- kick: sss was kicked by Cale (sss)
13:57:51 --- mode: Cale set -o Cale
13:58:25 <Cale> jumper149: You can make your own MonadReader-like class, if you need them from multiple monads.
14:00:22 <Cale> Treat monad transformers and the mtl both as implementation details. You're building some particular monad, which should probably be newtype'd for the sake of hiding its implementation, and it has its own operations which probably have better names than "ask"
14:00:29 <jumper149> Cale: I was wondering about multiple MonadReader instances of a single monad. So I don't think rewriting MonadReader would change anything.
14:01:04 <Cale> It changes a lot, because you then have separate classes for the different kinds of things being read
14:01:24 <Cale> Possibly with more specific operations which convey why those bits of the environment are present in the first place.
14:01:38 <Cale> and so there's no overlap then
14:02:14 <jumper149> Cale: Ahh I see what you mean now. Yea I could do that :)
14:04:00 <jumper149> Something like `class MonadReaderInt m` (correctly spaced) so then I can have (MonadReader r m, MonadReaderInt m) constraints I guess :)
14:04:19 <Cale> Well, don't call it that, name it based on what the Int means
14:04:40 <jumper149> Ye I was just giving a random example^^ :p
14:05:18 <Cale> Depending on what you're passing around and why, it might also be better to make the operation not simply get a value, but do the thing you were intending to do with that value in the first place
14:05:52 <Cale> e.g. instead of giving access to a database connection, you might consider giving an operation that queries the database
14:06:06 <Cale> (or do both)
14:27:49 * hackage secp256k1-haskell 0.3.0 - Bindings for secp256k1  https://hackage.haskell.org/package/secp256k1-haskell-0.3.0 (jprupp)
14:41:16 <jumper149> Cale: Ty, that seems like a solid approach to creating useful classes!
14:47:49 * hackage minimorph 0.3.0.0 - English spelling functions with an emphasis on simplicity.  https://hackage.haskell.org/package/minimorph-0.3.0.0 (MikolajKonarski)
14:48:49 * hackage miniutter 0.5.1.1 - Simple English clause creation from arbitrary words  https://hackage.haskell.org/package/miniutter-0.5.1.1 (MikolajKonarski)
15:39:24 <kamek> I'm writing a small cli application, it uses http-conduit. using https instead of http adds about 10Mb of memory usage, seems a bit expensive to me
15:39:41 <kamek> any idea what could be causing this ? can I improve it somehow ?
15:40:46 <juri_> I've got a list of elements, and i need to eliminate matching pairs. (both items, not just make the list unique)
15:41:15 <wavemode_> consecutive pairs or also nonconsecutive?
15:41:26 <juri_> they should be consecutive.
15:41:35 <juri_> but i need to remove both of them.
15:44:35 <solonarv> I'd start with a straightforward recursive function
15:45:10 <wavemode_> https://hastebin.com/oqitukacig.apache
15:48:54 <Ariakenom> what about [1,1,1,3] ?
15:49:33 <wavemode> it doesn't remove an odd number of consecutive items. wasn't in the specification
15:51:06 <juri_> oh neat.
15:51:50 <juri_> I wandered off and smashed my implementation until i got: https://hastebin.com/towomaropa.pl
15:52:12 <juri_> aparently i am not dumb. :)
15:53:18 <Ariakenom> wavemode, 
15:53:32 <Ariakenom> yes, but it seemed worth clarifying
15:54:11 <juri_> ah. need parenthesis round b:xs.
15:54:17 <juri_> but, perfect. thanks.
17:46:26 * _deepfire curses the perpetual, somewhat annoying typechcecking jitter happening across GHC releases..
17:47:40 <_deepfire> 1. deps support constraints, 2. ghc bugs, 3. ghc typechecking jitter.. life ain't bland, no..
17:48:23 <_deepfire> solution?  push harder.
17:51:12 <_deepfire> oh, I'm not complaining -- the status quo is still far more liberating than fighting the limits of your own brain, while using less structured languages..
18:03:19 * hackage generic-monoid 0.1.0.1 - Derive monoid instances for product types.  https://hackage.haskell.org/package/generic-monoid-0.1.0.1 (lukec)
18:10:12 <slack1256> On reactive-banana, is there a .debug("tag") combinator like on Rx(swift) ?
18:11:49 <slack1256> Just for information, that operator prints the state of an observable, whether that is connection, disposal, completion, event emission.
20:26:01 <Netsu> Hello!
20:27:01 <Netsu> Is there any implementation of type family constraint to check is type is an element of type-level list?
20:27:18 <Netsu> *Or is one type-level list subset of another
20:27:23 <ezzieyguywuf> how do I make multiple different modules in a stack 'project'?
20:27:44 <ezzieyguywuf> is it as easy as created a sub-directory and adding a package.yaml file to the subdirectory?
20:27:52 <ezzieyguywuf> or do I need to update stack.yaml somehow?
20:34:18 * hackage aeson 1.5.2.0 - Fast JSON parsing and encoding  https://hackage.haskell.org/package/aeson-1.5.2.0 (AdamBergmark)
21:37:43 <jj44>  be 4true 7muslimS to be 3*lifted  4**12*3*
21:41:12 <jj44>  -[Moses believed in Allah as his creator so did Jesus and mohammed *; For he is: (Allah) the only God; our refuge; follow islam The true religion of God & jewel of THE SEAS to be lifted, [that is, be true muslimS to be lifted ****]
21:58:10 <solrize> is there a good book or tutorial about haskell tooling?  like stack, cabal etc
22:04:26 <wavemode> solrize, https://www.haskell.org/cabal/users-guide/intro.html
22:10:40 <solrize> thanks
23:11:19 * hackage hasql-queue 1.0.1 - A PostgreSQL backed queue  https://hackage.haskell.org/package/hasql-queue-1.0.1 (JonathanFischoff)
23:18:48 * hackage hasql-queue 1.0.1.1 - A PostgreSQL backed queue  https://hackage.haskell.org/package/hasql-queue-1.0.1.1 (JonathanFischoff)
23:59:23 <typetetris> Did the new low latency gc hit ghc 8.10.1?
