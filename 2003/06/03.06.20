00:00:40 <Darius> Pseudonym you want toEnum
00:01:43 <Darius> Then with that function you can do powerful and important things like: putStrLn (map evenMoreGenericLength $ words gettysbergAddress)
00:03:42 <Pseudonym> Right, sorry.
00:03:58 <Pseudonym> You knew what I meant, though.
00:47:14 <Pseudonym> G'day.
00:48:58 <Gaucho> good day
00:50:29 <Pseudonym> shapr, I wrote a new wiki article that I'd like some comment on.
00:52:59 <shapr> yay
00:53:02 * shapr looks
00:54:04 <Pseudonym> Maybe I should coin the phrase "phantom argument".
00:54:17 <Pseudonym> By analogy to "phantom type".
00:54:27 <shapr> that's neat
00:54:37 <shapr> yes, but then you can't argue about it ;-)
00:54:45 <Pseudonym> True.
00:54:56 <shapr> I think this goes hand in hand with the nifty Physics stuff you wrote.
00:55:02 <Pseudonym> Kind of.
00:55:13 <Pseudonym> It's actually motivated by another example, which I haven't checked in yet.
00:55:19 <shapr> it causes similar strange nifty mental eddies
00:55:24 <Pseudonym> I was constructing generic vector spaces.
00:55:46 <Pseudonym> The thing about vector spaces is that you can have different inner products on the same vectors.
00:55:59 <Pseudonym> And it's a different vector space.
00:56:37 <Pseudonym> So I came up with this:
00:56:37 <Pseudonym> class (Num v, Fractional f) => VectorSpace vs v f | vs -> v f where
00:56:38 <Pseudonym>     scale :: vs -> f -> v -> v
00:56:38 <Pseudonym>     innerProduct :: vs -> v -> v -> f
00:56:59 <Pseudonym> vs is the type of the vector space, v is the type of a vector, and f is the type of a field element.
00:57:25 <shapr> the last example there brings up a perplexing question... why don't numbers have upper case?
00:57:44 <Pseudonym> They do.  The unicode people just haven't worked this out yet.
00:57:48 <shapr> oh
00:57:59 <shapr> what does an uppercase 6 look like?
00:58:04 <Pseudonym> The same.
00:58:09 <Pseudonym> A lower case 9, though, has a descender.
00:58:13 <shapr> aha
00:58:17 <shapr> I see
00:58:41 <Pseudonym> It's kinda odd, but apparently publishing people care about this sort of thing.
00:58:48 <cale> Oh, that's interesting. I had always thought those to simply be properties of the type being used.
00:59:03 * Pseudonym used to think so too
00:59:08 * shapr too
01:00:01 <Pseudonym> My vector space example actually uses phantom types as well as traits typeclasses.
01:01:39 <shapr> I wish HaskellDB worked with Postgresql.
01:01:43 <shapr> on linux
01:01:54 <cale> Wouldn't InnerProductSpace be a somewhat more correct name?
01:02:17 <cale> (though a bit more unwieldy)
01:02:21 <Pseudonym> cale: Possibly.  I thought all vector spaces have an inner product.
01:02:21 * shapr likes InnerSpaceProducts and OuterSpaceProducts Inc.
01:02:40 <Pseudonym> I had an idea today, to set up an e-commerce site.
01:02:46 <shapr> good idea
01:02:54 <Pseudonym> Which sells equipment for physicists for their thought experiments.
01:03:13 <shapr> like what?
01:03:16 <Pseudonym> So, for example, you can buy trains with sealed windows which travel at relativistic speeds.
01:03:20 <Pseudonym> Or canisters of ideal gas.
01:03:22 <shapr> heh
01:03:24 <shapr> cool
01:03:24 <cale> Yeah, they basically do, they can have different inner products defined on them though.
01:03:35 <shapr> I thought of selling refactored shoes.
01:03:49 <Pseudonym> Black bodies might be useful, too.
01:03:50 <cale> Electron paint.
01:04:12 <Pseudonym> The do-it-yourself Schroedinger box kit (cat not included).
01:04:17 <cale> frictionless surfaces and pulleys
01:04:21 <Pseudonym> Right.
01:04:22 <shapr> bucky balls
01:04:27 <Pseudonym> Correlated photons.
01:04:35 <cale> bucky balls exist though
01:04:35 <shapr> cooper pears
01:04:48 <shapr> in the fruit section :-)
01:04:55 <Pseudonym> Well bucky balls and cooper pairs are real. :-)
01:05:42 <Pseudonym> Infinite-extent charged lamina.
01:05:45 * Pseudonym thinks
01:06:01 <shapr> universes in multiple flavors
01:06:05 <shapr> contracting, expanding
01:06:11 <Pseudonym> Interesting.
01:06:18 * Pseudonym is trying to think back to physics lectures
01:06:37 <shapr> black hole buckets so you can drop things in and watch what happens
01:06:51 <Pseudonym> Yes, black hole/white hole pairs
01:06:55 <shapr> right
01:07:04 <shapr> as gift cufflinks of course
01:07:05 <cale> Don't forget about ideal springs and diodes to go along with that gas.
01:07:08 <shapr> keeps you cool in the summer.
01:07:10 <Pseudonym> Yes, true!
01:07:26 <Pseudonym> Ideal dielectric materials.
01:07:36 <shapr> quantum yoyos
01:07:45 <shapr> (a quantum string with a black hole on the end ;-)
01:07:54 <Pseudonym> Ooh, trippy.
01:08:01 <Pseudonym> You never know if it's up or down until you look.
01:08:11 <Pseudonym> And its spin is even quantised!
01:08:29 <Pseudonym> Man, it must be Friday afternoon.
01:08:39 <Darius> Really?
01:08:53 <Pseudonym> Actually, it's dark outside.  It must be Friday _evening_.
01:08:56 <cale> Man, it must be Friday 4:00 am.
01:08:58 * Pseudonym should be getting home
01:09:03 <Darius> It's dark outside here too.
01:09:11 <Pseudonym> Yeah, but it's 6pm here.
01:09:19 <Darius> Where are you cale?
01:09:27 <Pseudonym> Night everyone.
01:09:31 <cale> Ontario, Canada.
01:09:33 * Pseudonym should get home
01:09:43 <Pseudonym> Happy Solstice.
01:09:51 <Pseudonym> For tomorrow, obviously.
01:10:03 <cale> later
01:20:24 * shapr yawns
01:20:29 <shapr> nearly bedtime
01:20:30 <Marvin--> morning
01:20:39 <cale> morning
01:32:21 <thornber> can anyone point me towards some information about 'fusion' please ?
01:34:37 * Marvin-- refrains from physics jokes
01:35:07 * thornber is reading the 'origami' chapter from 'the fun of programming'
01:35:11 * Marvin-- growls at today's Sluggy Freelance
01:37:34 <Darius> thornber: What aspect do you want?
01:37:57 <thornber> well it's just a new term to me
01:38:19 <thornber> so the basic definitions etc
01:39:27 <thornber> BTW I really 'tfop'
01:39:35 <thornber> s/really/really like/
01:45:39 <Darius> "Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire" is pretty basic
01:45:49 <thornber> thx
01:52:11 <earthy> that's by de Moor, right?
01:52:17 <earthy> (and some others, IIRC)
01:52:36 <thornber> Meijer, Maarten Fokkinga, and Ross Paterson
01:52:51 <earthy> wrong clan.
01:52:59 <Marvin--> heh
01:53:23 * earthy just getting back into FP... last I did anything with it is about 6 years ago
02:08:55 * shapr bounces happiyl
02:09:06 <shapr> w00, webapp made a good impression today in Thessaloniki
02:09:21 <andersca> hey
02:09:25 <shapr> hi!
02:09:37 <andersca> I got a neat speakers' bag
02:09:41 <shapr> cool!
02:09:46 <shapr> do you have pix of it online?
02:09:49 * andersca misses ireland :(
02:09:52 <andersca> not really
02:11:14 <shapr> now that everyone in the Working Group loves me, it's time to start writing Haskell web services
02:11:48 <shapr> hm, dbus is running on my machine.
02:11:53 <shapr> but I don't know what to do with it.
02:12:00 <andersca> write haskell bindings for it
02:12:02 <shapr> andersca: do you have any notes or slides online? :-)
02:12:22 <andersca> http://carbon.csbnet.se/~andersca/slides/d-bus
02:12:31 <shapr> yay
02:12:56 <shapr> does danl do contract logos?
02:13:01 <andersca> he might
02:14:36 <shapr> what's sasl-compliant?
02:14:51 <andersca> it's just like the SASL protocol, but it's not using SASL
02:17:40 <Marvin--> "Each message consists of a header and a body" WOW, now THAT's groundbreaking!
02:17:54 <andersca> ;)
02:18:06 * andersca thwaps Marvin--
02:19:13 <shapr> looks nice
02:19:55 <andersca> jim gettys didn't go to my talk :/ it'd been nice to hear his comments
02:20:49 <shapr> with the copyright thing in Swedish gov't now, a Linux.se consortium would be a good thing
02:21:43 <Marvin--> shapr: don't tell me you read the trolling at /.?
02:22:36 <andersca> s/the trolling at//
02:22:58 <shapr> I didn't see any comments
02:23:13 <Marvin--> well, the article it linked was way blown out of proportion, and so was the article at aftonbladet
02:23:27 <Marvin--> I read the press release and skimmed the law text, and it looked sane for the most part
02:23:34 <Marvin--> the scariest thing was the levies on digital media
02:23:35 <shapr> in any case, Linux doesn't have any copyright problems :-)
02:23:45 * andersca got a linex t-shirt
02:23:51 <shapr> what's linex?
02:24:04 <andersca> the distribution used for the roll-out of linux and gnome in spain
02:24:07 <andersca> in schools I think
02:24:11 <shapr> oh, neat
02:24:11 <andersca> on 80k machines
02:24:33 <andersca> it has "be legal, copy linex" on the back
02:24:44 <shapr> I like that.
02:24:44 <Marvin--> shapr: the "internet is now illegal" cries are just silly, there are exceptions for temporary content and all sorts of things, and most things on the web are temporary
02:25:12 <Marvin--> and the right-to-reply is just an extension of what other news sources already have to do
02:27:49 <shapr> ok, time to sleep
02:28:11 * shapr disappears in a puff of burnt javascript
02:28:40 <Marvin--> eew
02:48:25 <thornber> can foldr1 be defined in terms of foldr ?
03:06:48 <cale> thornber: I don't think so.
03:09:18 <cale> It all comes down to computing an appropriate zero to use for the binary operator you pass in, and one might not even exist.
03:10:54 <tic_> cale, identity you mean?
03:11:12 <cale> yes
03:11:46 <thornber> cale: y, I thought so, but Thompson tries to define it (and gets it obviously wrong)
03:12:54 <tic_> cale, how does one compute an identity?
03:13:10 <cale> I don't think it's computable, actually.
03:13:58 <tic_> I don't think so either, but you wrote "comes down to computing an appropriate zero"
03:15:36 <cale> It's computable for enumerable types.
03:16:11 <cale> Not something you'd like to waste your time computing though.
03:17:46 <cale> It's certainly not possible to express generally in Haskell as an f :: (a -> a -> a) -> a
03:27:54 * cale swaps mouse buttons 2 and 7.
03:57:45 <kosmikus> foldr1 (#) == fromJust . foldr (\x y -> Just $ maybe x (x #) y) Nothing
03:59:20 <Marvin--> kosmikus: eew
03:59:36 <kosmikus> ;)
04:00:14 <Marvin--> that's just sick
04:00:48 <kosmikus> why?
04:03:49 <kosmikus> of course, Thompson's definition is almost good
04:04:52 <Heffalump> kosmikus' definition is the natural one
04:06:35 <thornber> y, it's clever, I wouldn't have thought of that
04:23:22 <cale> Where is # defined?
04:40:36 <kosmikus> (#) is an argument
04:42:06 <cale> I can't seem to find reference to that notation in the h98 report. (at least, using my browser's find) I was just wondering where it was defined.
04:42:32 <earthy> cale: it is obviously on the argument position of the definition kosmikus gave for foldr1
04:42:33 <kosmikus> that's no special notation
04:42:50 <kosmikus> you can just use operators everywhere where you can use variables
04:42:58 <cale> ah, sorry
04:44:24 <kosmikus> cool, isn't it? you can define your own sortBy as "sortBy (<=) = ..." and so on
04:44:59 <cale> yeah - by brain somehow managed to not think of # as an operator.
06:53:27 <SyntaxPolice> good morning!
06:53:30 --- mode: SyntaxPolice set -o SyntaxPolice
06:55:02 <Heffalump> it's also nice that you can define operators in the same way as you use them
06:59:02 <cale> yeah, I like that
06:59:33 <cale> It'd be cool to have access to the full set of unicode symbols for operators :)
06:59:39 <Heffalump> hmm...
07:00:27 <cale> I need to get myself a space cadet keyboard :)
08:34:24 * SyntaxPolice tries to build Yampa
08:34:46 <SyntaxPolice> every time I am in the situation of having to build tons of stuff to just try something out, I think, "forget it, I'm going to make debian packages"
08:35:13 <SyntaxPolice> but then I think, "no, if we had library infrastructure working, then we would have an easier time making debian packages..."
08:35:28 <SyntaxPolice> so I think, "I should work on lib infrastructure..." but what I really want to do right now is study arrows.
08:35:55 <jlouis> arrows seems very interesting indeed
09:13:24 <Heffalump> SyntaxPolice: a Debian package of the arrow preprocessor would be nice (and hopefully fairly trivial)
09:14:36 <Igloo> Independent of the library infastructure too
09:14:52 <Heffalump> yeah
09:15:14 <Heffalump> actually, I could just make one.
09:16:27 <Igloo> It's being built in to a branch of GHC if that affects your plans (won't help with hugs obviously and I don't know how long it will be coming)
09:17:04 <Heffalump> well, until it makes it into a release that's not hugely useful
09:17:10 <Heffalump> since I don't fancy running CVS
09:17:17 <Igloo> *nod*
09:17:19 <Heffalump> what would a good name for the package be?
09:17:32 <Igloo> What's the binary called?
09:17:35 <Riastradh> hs-arrow-pp?
09:17:39 <Heffalump> arrowp
09:18:19 <Igloo> I'd probably go for arrowp so people looking for it by name find it most easily
09:18:32 <Heffalump> the tarball is called arrow-..., though
09:18:40 <Heffalump> as is the directory in that tarball
09:19:55 <SyntaxPolice> I'm a little annoyed w/ arrowp at the moment since it doesn't seem to correctly translate the examples it comes with.  I get ghci errors about "conflicting definitions in lambda expressoin"
09:20:08 <Igloo> I think arrowp is a better name if you intend for it to go into Debian
09:20:17 <Heffalump> it also complains about syntax errors in innocuous programs that ghc is perfectly happy with
09:20:26 <Heffalump> I should report those as bugs.
09:20:41 <Heffalump> if I make a package will one of you upload it, then?
09:20:49 <SyntaxPolice> Heffalump: I agree that an arrowp package would be useful... I have a short-term goal of making a nice infrastructure for building and installing pure-haskell packages
09:21:03 <Heffalump> "pure-haskell"?
09:21:13 <Heffalump> This one seems quite straightforward, in that it just builds a binary people want.
09:21:21 <Heffalump> no need for any Haskell libraries etc.
09:21:29 <SyntaxPolice> not well defined, maybe haskell98... but something that has only haskell source files.
09:21:49 <Heffalump> ah
09:21:55 <SyntaxPolice> Heffalump: if you ignore arches that don't have ghc its straightforward.
09:22:14 <Heffalump> do the arches that don't have ghc have nhc?
09:22:21 <Heffalump> I guess it _could_ run under hugs.
09:22:42 <SyntaxPolice> actually, nhc is broken on arches without ghc at the moment, ironically
09:23:34 * Igloo thinks SP would be a better person to upload it as he has actually used it  :-)
09:23:35 <SyntaxPolice> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=193567
09:24:44 <SyntaxPolice> but I sorta agree with the idea of building packages in an ad-hock way until the library infrastructure is working, even if it means not everyoen can use them... I just don't want to be the one to do it :)
09:25:36 <SyntaxPolice> I feel that once the library infrastructure is in place, I'll take over a bunch of packages, but it would be nice if the hmake & nhc maintainer would fix the problem.
09:26:17 * SyntaxPolice can't upload packages yet :)
09:26:23 <SyntaxPolice> so I elect Igloo ;)
09:29:35 <Igloo> Oh, hmm. I could probably be persuaded, but not until after Tuesday
09:29:51 <Heffalump> is there any way to depend on ("ghc between version x and y" and "happy version z") or ("ghc version w or later" and "happy version t or later") ?
09:30:00 <Heffalump> or should I just give in and leave out the first disjunct
09:30:30 <SyntaxPolice> OT, Igloo, here's a sneak-preview of what i was talking about the other way http://monk.debian.net/apt-secure/
09:30:39 <Igloo> Give in, I think. Do you mean build-depend?
09:30:56 <SyntaxPolice> s/way/day
09:31:25 <Heffalump> yeah.
09:33:09 <Igloo> SP: So you're only checking the archive key, not the maintainer's key, and trusting the archive hasn't been compromised still, right?
09:33:56 <SyntaxPolice> right. I believe that by the time the deb gets to the end-user's machine, the maintainer's sig is no longer available.
09:34:18 <SyntaxPolice> do you think its innacurate to describe the maintainer's key as part of the chain in this case?
09:34:43 <Heffalump> also, auto-builds won't have the maintainer's signature
09:34:57 <Heffalump> is there a list of options for the Section field of debian/control anywhere?
09:35:09 <Heffalump> (I'm sure there is, but I can't find it)
09:35:14 <Igloo> Policy, I assume
09:35:19 <Heffalump> tried there
09:35:37 <Heffalump> http://www.debian.org/doc/debian-policy/ap-pkg-controlfields.html#s-pkg-f-classification is unhelpful
09:36:01 <Igloo> http://www.debian.org/doc/debian-policy/ch-archive.html#s2.1.7
09:36:18 <Heffalump> oh, bah. I read that and didn't notice that list :-)
09:36:31 <Heffalump> ta.
09:38:44 <SyntaxPolice> does anyone have the Eval.as example from the Arrow doc?  Is there any substantive difference between that and the way it woluld be implement w/ monads?
09:39:55 * Heffalump reads
09:40:28 <Heffalump> I doubt it, given that you have instance ArrowApply a
09:40:45 <Heffalump> it probably looks cleaner
09:40:58 <Heffalump> but ArrowApply is equivalent to having a Monad
09:41:14 <Heffalump> I think ArrowChoice + ArrowApply means MonadPlus, though I wouldn't swear to that
09:42:16 <SyntaxPolice> hm.
09:57:37 * Igloo wants foo { bar =$ f } sugar for foo { bar = f $ bar foo } (where f is generally a left section like 1: or 1+)
09:59:32 <SyntaxPolice> yeah, that would be nice.
09:59:52 * SyntaxPolice spends all day installing software...
10:00:21 <Igloo> Better than spending all day doing nothing  :-)
10:01:33 <SyntaxPolice> heh.  if I don't learn anything about FRP, an optimizing compiler would convert my activities to "doing nothing" :)
10:01:52 <SyntaxPolice> (and so would my boss)
10:02:01 <Heffalump> :-)
10:02:04 <Heffalump> what's your job?
10:03:00 <SyntaxPolice> http://www.aetion.com  I work for a little AI company developing Haskell software (and some java)
10:03:34 <Igloo> Nice
10:04:29 <SyntaxPolice> :-)
10:05:47 <Heffalump> ah, a spin-off :-0
10:05:49 <Heffalump> s/0/)/
10:07:18 <hdaume> SyntaxPolice: how do you pronouce that?
10:07:53 <SyntaxPolice> A-Tea-On
10:08:06 <hdaume> k :)
10:08:29 <SyntaxPolice> thats a long A
10:14:44 <Heffalump> is there anything to test that debian/rules clean puts your build tree back the way untarring would?
10:17:15 <jlouis> dont ask me.. I am from the *BSD world :)
10:17:28 <Igloo> If you rebuild the source package after building the binary package then the diff should only mention debian/ files
10:18:21 <Heffalump> why should it even mention those?
10:18:27 <Heffalump> oh, duh, sorry
10:18:35 <Heffalump> that's not true if you've modified the sources...
10:18:51 <Igloo> No, but then you wouldn't want clean to put it back
10:19:01 <Heffalump> sure
10:19:22 <Heffalump> what you're saying is that the diff should just mention things you did, after doing the above.
10:20:21 <Igloo> Yes
10:20:26 <SyntaxPolice> if the diff isn't too big, you should be able to look through the diff to tell whether make clean really worked.
10:21:26 <Igloo> grepping it for ^+++ is generally enough
10:22:38 <SyntaxPolice> diffstat can give you a pretty good idea too :)
10:31:09 <jlouis> how many are planning at attakcing ICFP this year?
10:33:10 * SyntaxPolice mentions that he will be _at_ ICFP, and is looking forward to meeting other #haskellers there
10:33:33 * Riastradh won't be there...
10:34:35 <SyntaxPolice> :(
10:38:28 <jlouis> I thought the contest
10:41:11 <inkedmn> data List a = Nil | Cons a (List a)
10:41:15 <inkedmn> ok, in that code...
10:41:29 <inkedmn> are Nil and Cons constructors for List?
10:41:37 <inkedmn> (just want to make sure i'm reading it right)
10:43:08 <hdaume> yes
10:46:44 <cale> Is System.Cmd.rawSystem only in a particular version of GHC?
10:49:49 <Igloo> The type changed recently, and it won't be in older versions
10:51:40 <cale> hmm. Any recommendations as to what I can use to execute a command other than "system"? I'd really like to be able to do all the command line parsing myself.
10:52:49 <cale> I suppose I could just use system for now. I'm just hacking together a little shell concept.
10:54:47 <SyntaxPolice> cale: http://www.haskell.org/hawiki/ExternalCommands
10:55:04 <Igloo> If GHC-only is OK then I'd recommend the latest rawSystem
10:55:20 <Igloo> Alternatively you could use the FFI to call exec yourself
10:55:35 <cale> cool, thanks.
11:02:44 * Igloo reads the wiki page and wonders where Posix.runProcess is
11:03:00 <Igloo> (in the hierarchial libraries)
11:06:39 * SyntaxPolice doesn't know
11:08:45 <SyntaxPolice> hm, its in 5.04
11:14:09 * SyntaxPolice wants to play fruit's space-invaders, but can't get everything to build :(
11:46:35 * tmoertel enjoys a cup of hot coffee (peaberry)
11:52:53 <jlouis> Closures! Yay!
11:53:00 <Igloo> Am I right in thinking that you would expect   do x; y `mplus` z  to be either the same as do x; y or d x; z if y fails?
11:53:02 <jlouis> I love them...
11:53:47 <Igloo> So for a variable generator if z happens it would use the variables that it tried to use in y in z, for example?
12:03:40 * Igloo realises I can't do it with StateT s IO anyway. Oh well.
12:09:10 <inkedmn> ok, so i'm trying to translate python's list functions into haskell (for fun/learning)
12:09:43 <inkedmn> and append() is giving me some trouble...
12:25:47 <tmoertel> inkedmn: is this what you mean?   append = (++)
12:35:42 <inkedmn> more or less, yeah
12:36:06 <inkedmn> and i can add 'a' to "bcde" just fine
12:36:17 <inkedmn> but if i want to add "abc" to "efg", no dice
12:37:45 * SyntaxPolice gets afrob soccer-playing robot triangles to play soccer
12:38:13 <SyntaxPolice> actually, they seem to have given up playing soccer and they are sitting in the corner cuddling and wiggling
12:38:46 <SyntaxPolice> "abc" ++ "efg" => "abcefg"
13:14:29 <Vincenz> Hello
13:15:06 <SyntaxPolice> greetings :)
13:28:40 <SyntaxPolice> hm. it would be nice to have a dumping ground for testing haskell-related debian packages which we could add to sources.list :)
13:30:22 <emu> feel free to set one up
13:31:34 <Igloo> I'd say there wasn't much point had I not just been reminded how long new packages take to enter the archive  :-)
13:34:49 <SyntaxPolice> maybe I'll set one up once my web server comes back in full force
13:35:20 <SyntaxPolice> Igloo: so is ghc6 uploaded?
13:35:49 <Igloo> 8 days ago
13:36:01 <Igloo> Just waiting for someone to add 4 lines to the overrides file  :-/
14:32:24 <kunphuzil> What's the lastest version of hugs?
14:32:31 <kunphuzil> I have Nov 2002.. 
14:33:07 <Heffalump> that's what I have
14:33:39 <kunphuzil> ok.. seems old. 
14:33:44 <kunphuzil> but i guess it's the newest
14:35:27 <Heffalump> there's a CVS tree, I think
14:35:36 <Heffalump> igloo: the overrides file?
15:34:25 <SyntaxPolice> is there a haskell function to get the path seperator in Haskell? (/ in unix, \ in windows, : in macos?)?
16:46:44 <hdaume> SyntaxPolice: you could probably figure it out using System.Directory.getCurrentDiectory (perhaps by first creating a dummy directory and changing to it) :)
16:50:13 <inkedmn> ok, i'm confused about using accumulators
16:50:24 <inkedmn> (as counters, basically)
19:22:23 <Heffalump> hmm, lambdabot really ought to control the topic.
19:22:31 <Riastradh> It ought to.
19:22:34 <Riastradh> But it's borken at the moment.
19:22:37 <Riastradh> @topic-tell #haskell
19:22:44 <Riastradh> ...
19:22:49 <steveh> all right
19:23:01 <steveh> what's the best way to look for a stack overflow due to too much laziness?
19:23:47 --- topic: set to '["We put the Funk in Funktion","See logs @  http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/","GHC 6.0 pre-debs: http://people.debian.org/~igloo/","ghc rpms: http://haskell.org/~petersen/rpms/ghc/","contact shapr for #haskell ICFP contest team members","arrows preprocessor pre-debs: deb http://urchin.earth.li/~ganesh/apt/ unstable/"]' by Heffalump
19:24:48 <Riastradh> @hello
19:24:48 <lambdabot> Hello world. 
19:24:55 <Riastradh> @listcommands topic
19:24:55 <lambdabot> Module topic provides the following commands: ["topic-tell","topic-cons","topic-snoc","topic-tail","topic-init"]
19:25:03 <Riastradh> #topic-tell #joy
19:25:07 <Riastradh> @topic-tell #joy
19:26:09 <steveh> :-/
19:27:10 <steveh> or better yet, how can I tell that my stack overflows are even caused by excessive laziness?
19:27:11 <Heffalump> @topic-tell
19:27:11 <lambdabot> don't know that channel
19:27:26 <Heffalump> steveh: sorry, no real idea
19:28:14 <Smerdyakov> steveh, you can't print the stack frames?
19:29:26 <steveh> time to get cozy with ghci i suppose
19:29:30 <inkedmn> evening friends
19:34:00 <steveh> all right
19:36:13 <steveh> this code lifted from okasaki breaks on large inputs and I can't figure out where to de-lazy it
19:36:46 <steveh> it's the simple binary tree membership function
19:36:57 <steveh>     member x (Tree _ a y b) =
19:36:57 <steveh>         if x < y then member x a
19:36:57 <steveh>         else if x > y then member x b
19:36:57 <steveh>         else True
19:39:17 <inkedmn> maybe use guards?
19:39:24 <inkedmn> instead of if > else > else
19:39:46 <steveh> don't think so 
19:39:52 <steveh> i have a working hypothesis now
19:39:53 <steveh> will see
19:40:00 <inkedmn> ok
19:40:17 <inkedmn> i'm newb and probably wrong, just so you know :)
19:42:00 <tmoertel> steveh: are the keys strings in this instance ?
19:42:45 <steveh> no
19:42:48 <steveh> ints
19:43:16 <tmoertel> in that case, have you tried making Tree's constructor strict ?
19:43:26 <steveh> yep
19:43:51 <steveh> as long as
19:44:44 <steveh> data RedBlackSet a = Empty | Tree Color !(RedBlackSet a) a !(RedBlackSet a)
19:44:47 <steveh> is how you'd do it
19:44:52 <steveh> which I believe is right
19:45:01 <tmoertel> where's the !a in the middle ?
19:45:21 <steveh> a is just the element, should it be there?
19:45:30 <steveh> it's an Int in this case
19:45:34 <tmoertel> yup
19:45:38 <tmoertel> give it a try
19:46:06 <steveh> heh
19:46:15 <steveh> that came back with many warnings
19:46:38 <steveh> WARNING: ignoring polymorphic case in interpreted mode.
19:46:38 <steveh>    Possibly due to strict polymorphic/functional constructor args.
19:46:38 <steveh>    Your program may leak space unexpectedly.
19:46:39 <steveh> :)
19:47:04 <Heffalump> I don't actually understand that warning.
19:47:17 <Heffalump> as in, I get it when I don't have any strict constructors.
19:47:31 <steveh> still breaks
19:47:36 <steveh> I think the issue is not with member
19:48:01 <steveh> but in rather in that I am using a lazy foldr1 to construct the million-element tree
19:48:12 <steveh> I am figuring out how to make a strict foldr1
19:48:25 <Riastradh> Use 'seq,' presumably.
19:48:33 <tmoertel> Well the !(RebBlackSet) doesn't force that the entire subtree is constructed strictly.
19:49:59 <steveh> my theory is not correct either
19:50:01 <tmoertel> steveh: When you add the !a and compile via ghc -O (and not w/in GHCi), do you still get the leak?
19:50:10 <steveh> i am doing this with ghci right now
19:50:29 <steveh> i'd have to write a simple executable program
19:50:31 <steveh> lemme do that
19:50:36 <tmoertel> GHCi will leak some things that the compiler won't.
19:50:40 <steveh> but !a had no effect on my main issue
19:58:12 <steveh> aaah
19:58:17 <steveh> I think I am lame
19:58:20 <steveh> lame lame lame
19:58:31 <steveh> so very lame
19:58:45 <steveh> Stack space overflow: current size 1048576 bytes.
19:58:45 <steveh> Use `+RTS -Ksize' to increase it.
19:58:54 <steveh> :-/
19:58:57 <inkedmn> ok, i'm trying to write a function that removes an element from a list
19:59:18 <inkedmn> just the first instance of the element (assuming there's more than one)
19:59:26 <steveh> never mind, most of my ints should still be on the heap
19:59:39 <tmoertel> @prelude delete
19:59:40 <lambdabot> *** "delete" prelude "Haskell Standard Prelude Dictionary": text follows
19:59:40 <lambdabot> delete
19:59:40 <lambdabot>   delete ::  (Eq a) => a -> [a] -> [a]
19:59:40 <lambdabot>   delete                   = deleteBy (==)
19:59:54 <steveh> tmoertel: man, way to spoil things ;)
20:00:49 <steveh> so how do I trace this program and see what unevaluated functions are taking up all the space?
20:01:19 <tmoertel> you can do it by staring at your code with intense scrutiny
20:01:27 <tmoertel> or, you can try something like hat
20:01:28 <Smerdyakov> You know it isn't an infinite loop, steveh?
20:01:47 <steveh> Smerdyakov: it's Okasaki's code, and it works on smaller inputs ;)
20:02:06 <inkedmn> hmm, 'delete' isn't coming up in Hugs...
20:02:57 <tmoertel> List.delete
20:03:09 <steveh> it's gotta be in the constructors I think
20:03:22 <steveh> tmoertel: ghc didn't complain about !a, by the way
20:03:35 <inkedmn> tmoertel: heh, yeah, realized that right after i spoke here :)
20:04:11 <steveh> data Color = Red | Black
20:04:11 <steveh> data RedBlackSet a = Empty | Tree Color !(RedBlackSet a) !a !(RedBlackSet a)
20:04:18 <steveh> are the datatypes as they stand now
20:04:22 <tmoertel> steveh: instead of using your Tree constructor, write a mkTree that strictifies the subtrees before construting a Tree value
20:04:52 <steveh> and swap out all calls to the Tree constructor with this mkTree?
20:05:39 <tmoertel> yes
20:09:03 <steveh> would that involve a recursive call to mkTree with the $! operator? otherwise I don't understand :-/
20:09:15 <tmoertel> before you do that, first check out http://users.aber.ac.uk/afc/stricthaskell.html
20:12:33 <Heffalump> that page is actually a pretty strong indictment of general laziness
20:14:38 <steveh> hm
20:14:58 <steveh> would it be possible to include a sugaring for "do everything in this clause strictly?"
20:15:22 <Riastradh> Write a TH macro for it!
20:15:27 <steveh> lol
20:15:30 <Heffalump> hmm, good point.
20:15:31 <steveh> i am a green belt ;)
20:16:22 <steveh> another stack overflow
20:16:27 <steveh> oh wait
20:16:37 <steveh> lol, forgot to swap in mkTree
20:18:36 <steveh> how hard would it be to make an extension to Haskell saying "be strict?"
20:19:20 <tmoertel> there's Eager Haskell: http://www.csg.lcs.mit.edu/projects/index.php?action=viewProject&projectID=5&projectGroup=Programming%20Languages
20:20:06 <steveh> yes but suppose one wants to have cake and eat it too?
20:22:29 <tmoertel> the idea behind Eager Haskell is that you *do* get to have and eat the cake
20:22:50 <steveh> oh
20:23:08 <steveh> I thought by the name it would just be haskell except strict
20:24:53 * shapr yawns
20:24:59 <shapr> tmoertel: hey, what are you doing for ICFP?
20:25:17 <tmoertel> shapr: I haven't made any plans
20:26:36 <tmoertel> shapr: how's the team looking so far ?
20:26:43 <shapr> well, there's me.
20:27:15 <tmoertel> anybody else ?
20:27:29 <shapr> not so far :-)
20:27:52 <shapr> most people are arranging local teams
20:29:01 <tmoertel> nobody near me programs in Haskell  :-(
20:29:23 <tmoertel> I just checked the social calendar, and I seem to have next weekend free, so I'm game.
20:29:40 <shapr> ok, that's two for the #haskell team
20:30:07 <tmoertel> ghc 5.04.3 or 6 ?
20:30:15 <shapr> I'd go for 6
20:30:23 <shapr> Template Haskell, mdo
20:30:31 <tmoertel> I was leaning toward 5.04.3 because of stability.
20:30:35 <shapr> that's true
20:31:09 <shapr> we could wait until the task is announced to make a final decision
20:31:10 <tmoertel> maybe we should wait untill we know what the challenge task is to decide
20:31:13 <shapr> :-)
20:31:16 <tmoertel> haha!
20:31:54 <shapr> sounds like a good plan
20:32:19 <shapr> last year we used Pseudonym's CVS
20:32:28 <tmoertel> is he in this year ?
20:32:36 <shapr> and he created a mailing list also
20:32:49 <shapr> but we mostly used an irc channel instead of a mailing list
20:33:01 <tmoertel> I can set CVS/list/etc. up on one of my servers.
20:33:07 <shapr> cool
20:34:01 <tmoertel> is Pseudonym on the #h team this year ?
20:34:08 <shapr> I don't know.
20:34:34 <shapr> He wasn't last year, just donated cvs and mailing list
20:34:58 <shapr> I think a good team size would be four
20:35:10 <tmoertel> more than that would lead to coordination problems
20:35:14 <shapr> yes, I agree.
20:38:10 <tmoertel> okay, we'll I'll allocate some server space for us
20:38:18 <tmoertel> s/we'll/well/
20:38:34 <shapr> yay
20:41:08 <inkedmn> what do you guys think of Dylan?
20:41:13 <inkedmn> (the language, not Bob)
20:41:30 <tmoertel> haven't looked at it since '96, but I liked it
20:41:44 <inkedmn> heard good things about it
20:42:30 <shapr> hey inkedmn, saw your Hello on lambda.weblogs.com
20:42:40 <inkedmn> ah, heh
20:42:46 <inkedmn> the little welcome email told me to do that
20:42:49 <inkedmn> felt kinda lame
20:47:44 <steveh> arg this is annoying
20:53:20 <steveh> well this is interesting
20:53:33 <steveh> foldr = stack overflow
20:53:42 <steveh> foldl = success
20:53:51 <steveh> i must figure out how that one happened
20:59:02 <steveh> also lazy composition = failure, strict composition = success
20:59:02 <steveh> fascinating
20:59:33 * shapr goes to sleep
