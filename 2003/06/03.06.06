00:25:03 * Pseudonym yawns
02:24:37 <andersca> hi dennisb
04:34:00 <shapr> gooood morning #haskelll!
04:36:10 <shapr> yikes, 8mb email.
04:57:19 * Igloo realises GHC 6 would technically be a new package and considers ITPing it
05:00:08 <mgoetze> Igloo: yeah, do it :)
05:01:05 <mgoetze> ah
05:01:16 * mgoetze notices that there's now a ghc 6 os x package
05:04:18 * shapr bounces cheerfully
05:04:43 <shapr> Igloo: if michaelw doesn't respond, I think you should.
05:09:23 <shapr> g'day CowGirl 
05:09:28 * shapr bounces happily
05:09:53 <shapr> I'm siiiinging in the rain.... just siiinging in the rain!
05:10:07 <shapr> @yow
05:10:08 <lambdabot> YOW!!  I'm in a very clever and adorable INSANE ASYLUM!!
05:10:25 <shapr> That was too poignant.
05:11:33 * Igloo mails michael
05:11:51 <CowGirl> hey
05:11:58 <Igloo> ho
05:12:05 <shapr> yay, Dr Uwe Schmidt is writing a combination cookbook/unit test suite for HXmlToolbox
05:12:10 <shapr> that will make my life much easier.
05:12:28 <mgoetze> hm
05:12:32 <mgoetze> haskell.org is so slow
05:13:18 <mgoetze> also, the ghc webpages are definitely missing a "latest version available for xxx platform" page
05:13:31 <shapr> that's a good idea
05:14:32 <Igloo> I don't think arches tend to break, they just get harder to bootstrap on if binary packages aren't maintained
05:15:06 <shapr> sf.net has a compile-farm, doesn't it?
05:15:25 <mgoetze> Igloo: yes, but do you have any idea how difficult it is to even find out that there was, once upon a time, a mips-irix port of ghc?
05:15:30 * Igloo has an account on pretty much everything Debian supports
05:15:46 <Igloo> But not SuperH annoyingly, and possibly not HURD either
05:16:00 <shapr> building a HURD box wouldn't be hard.
05:16:07 <Igloo> mgoetze: True  :-)
05:16:32 <shapr> I could scrape together a HURD box if you don't mind slow hardware.
05:16:33 <Igloo> shapr: It would want to be a reasonable piece of hardware if you were going to be compiling GHC on it...
05:16:56 <mgoetze> when i go to the ghc download page, i get 12 release versions i can click on, and exactly one of those has an irix version downloadable
05:17:13 <shapr> hm, I have a spare drive. I could dual-boot HURD on thunderbird
05:17:15 <mgoetze> Igloo: so you have an account on a mips and a mipsel box?
05:17:24 <Igloo> Although from the main whose desktop box is 2x2GHz or something maybe a slow machine *is* reasonable  :-)
05:17:32 <shapr> heh
05:17:37 <shapr> 2x1.5GHz :-)
05:17:49 <shapr> and a slow box means 800MHz ?
05:18:19 <mgoetze> slow box? i think i have a 68020 mac around here somewhere :)
05:18:20 <Igloo> That's reasonable be my standards, if it has a lot of RAM at least
05:18:26 * Igloo doesn't know how much a GHC compile likes
05:18:26 <shapr> 512mb, not a lot
05:19:08 <shapr> for me, a decent amount of RAM begins with 1 GB
05:19:09 <Igloo> mgoetze: Yes, looks like it
05:19:27 <mgoetze> Igloo: oh, ok. most DDs don't afaik
05:19:45 <shapr> does Debian have dev hardware for every arch it supports?
05:20:01 <wli> for me, a decent amount of RAM begins at 64GB
05:20:02 <Igloo> I'm slightly confused as to the difference between "all" and "developer only", but I appear ot be able to log in to casals.debian.org which is mips
05:20:12 <shapr> wli: yes, but you're special, and I'm jealous :-)
05:20:25 <Strike> shapr: http://db.debian.org/machines.cgi
05:20:38 <shapr> hi strike
05:20:41 <Igloo> Maybe developer only means what I thought it might but the status is out of date
05:20:50 <Strike> hi :)
05:21:01 <shapr> wow, debian has an s390
05:21:08 <Igloo> Oh, both the mipsels are being installed thought I think
05:21:15 <shapr> and three ia64 boxen
05:21:15 <Strike> 2 of them
05:21:35 <shapr> geez
05:21:45 <shapr> aren't s390 boxen massive mainframes?
05:22:00 <Igloo> Potentially
05:22:02 <mgoetze> shapr: probably just a partition on a massive mainframe
05:22:13 <wli> "massive" is < 24U
05:22:40 <wli> S/390's aren't particularly large
05:22:55 <Strike> raptor.debian.org resolves to an IP which reverse lookups to "debian02.zSeries.org"
05:22:57 <shapr> I used to work in a department where I was the only active user on a box with 16 CPUs. Not that I knew what to do with it.
05:23:16 <mgoetze> shapr: test mersenne numbers, of course :)
05:23:29 <wli> I hack on a 16x box daily, 32x "often"
05:23:39 <wli> they're not exactly of recent vintage
05:23:42 <shapr> it was running some sort of IBM OS
05:23:57 <shapr> MVS?
05:23:57 <wli> VM/ESA?
05:24:05 <shapr> maybe that was it..
05:24:32 <wli> 32x regattas are even smaller than 24U, more like 12U. For cpu + RAM enclosure anyway.
05:24:53 <shapr> wli: do you have any online pix?
05:25:01 <wli> shapr: of?
05:25:08 <shapr> this 16 cpu box I worked next to was *huge*
05:25:15 <wli> it's 2 48U cabinets
05:25:19 <wli> well
05:25:25 <wli> each 48U cabinet holds 16x
05:25:42 <wli> the line between boxen is fuzzy due to partitioning etc.
05:25:45 <shapr> I think this one was eight cabinets
05:26:08 <wli> how big were the cabinets?
05:26:12 <shapr> one cabinet held stacks of CDROM drives for the library catalogs
05:26:17 <wli> ah
05:26:20 <wli> they had disk
05:26:38 <wli> I've got boot bays, they fit in with the cpu + RAM modules
05:26:42 <shapr> one cabinet had hard drives
05:27:04 <wli> there are usually several full of JBOD's and some bridges and switches
05:27:17 <shapr> one cabinet had a bunch of network stuff
05:27:32 <wli> that's unusual
05:27:51 <wli> adapters are usually plugged directly into cpu/RAM modules
05:28:05 <shapr> I know the box was specifically purchased for access to OCLC in virginia, and later for some sort of access to the Library of Congress I think.
05:28:52 <shapr> what's a JBOD?
05:29:03 <mgoetze> just a bunch of disks
05:29:08 <wli> a tray full of disks
05:29:09 <shapr> heh!
05:30:17 <wli> they usually plug into the JBOD via SCA and hence get power etc. that way, and the JBOD has FC going out the back up to the FC switch on the top rung of the cabinet.
05:30:29 <shapr> I know SCA, what's FC?
05:30:37 <wli> Fibre Channel
05:43:52 * Igloo gets a prompt reply giving GHC to me
05:44:24 <shapr> Igloo: wow, cool!
05:44:55 <wli> michaelw forked over the pkg?
05:45:23 <shapr> Igloo: awesome, when should we expect the ghc6 deb?
05:45:35 <Igloo> Errr, "soon"  :-)
05:45:45 * wli can build it on a 32x/64GB NUMA-Q (assuming parallel builds work...)
05:45:58 <Igloo> If not by the end of next week definitely prod me
05:46:11 <wli> w0t???
05:46:18 <mgoetze> next... week?
05:46:28 <shapr> yeehaa
05:46:30 * Igloo vaguely thinks about 6.1 packages too. Or 6-cvs or something
05:46:37 <shapr> yes! I want cvs packages!!!!
05:46:39 * shapr BOUNCES
05:46:49 <Igloo> Heh
05:46:55 <shapr> that would be great!
05:47:02 <Igloo> I'll do the 6 ones first, but I think the debian/ should be identical
05:47:13 <Igloo> mgoetze: Too long?  :-)
05:47:47 <shapr> wli: ime parallel builds don't really work, still some problems with the dependencies in the makefiles
05:47:54 <Igloo> Depends largely on how much time I have this weekend, as I may be dragged off to cut hedges and things
05:48:01 <mgoetze> Igloo: yes :)
05:48:26 <mgoetze> well, actually, i only apt-get upgrade about once a week...
05:48:39 <shapr> I upgrade once a day.
05:48:53 * mgoetze upgrades right now
05:49:09 <Strike> shapr: I'm glad I'm not the only one  *phew*
05:49:14 <Igloo> Hmm, presumably foo-cvs packages never make it into testing
05:49:26 <Strike> sadly, I know more or less when the mirrors update, so I can time it
05:49:46 <shapr> heh, me too
05:49:57 <mgoetze> Igloo: well, if you file an rc bug, they won't
05:50:02 <shapr> around 5pm here
05:50:23 <Igloo> mgoetze: I'm thinking of packages that get built daily
05:50:35 <shapr> when my woman was running Debian, she'd upgrade once every three months or so
05:50:39 <shapr> I could never understand that.
05:50:48 <Igloo> And I'm not sure you want to keep them out
05:51:28 <mgoetze> Igloo: i don't think there's anything in the system keeping all cvs packages out of testing by default
05:51:29 <shapr> HURD can't do SMP, right?
05:51:55 <Igloo> mgoetze: But daily built packages will never be in the archive long enough to be considered
05:52:02 <Strike> -cvs packages can make it into testing (into stable even, apparently), as everybuddy-cvs is in woody
05:52:26 <mgoetze> Igloo: oh, hm. yeah, maybe
05:52:52 <shapr> I think ghc-cvs debs would be *really* popular, but maybe I'm projecting my own excitement about that idea.
05:53:01 <Igloo> Heh
05:53:19 <shapr> hey Strike, are you learning Haskell?
05:53:26 <Igloo> They'd be necessary for anyone wanting to follow TH development closely (and who didn't want to compile themself)
05:53:29 <Strike> shapr: not at the moment, but yeah ;0
05:53:31 <Strike> er ;)
05:53:44 <shapr> Strike: are you a student? or learning for fun?
05:53:56 <Strike> learning for fun
05:54:07 <shapr> cool! have you done functional programming before?
05:54:15 <Strike> yeah, in spurts and in limited amounts
05:54:25 <Strike> took one course on it at school, Scheme-based
05:54:45 <shapr> Are you professional programmer now?
05:54:46 <Strike> and Scheme encompasses most of my functional programming experience with a bit of dabbling in O'Caml and a few others
05:54:50 <Strike> no, I wish :/
05:55:00 <shapr> Still in school?
05:55:05 <Strike> nope, graduated last year
05:55:26 <shapr> Are you in tech support hell till you can find something better? :-)
05:56:26 <Strike> well, better paying than tech support, but just as bad - doing nasty Windows-based stuff for an HR firm, report creation, database queries, troubleshooting this and that (custom systems, nothing you've heard of)
05:56:45 <Strike> with smatterings of VB thrown in as the salt on the wound
05:57:00 <shapr> yikes
05:57:31 <Strike> yeah, I'm not too happy about it, but it pays the bills
05:58:16 <d-bug> Strike: Given the choice of COBOL and VB you would probably have chosen VB :)
05:58:24 <Strike> anyway, I got a bit tired of python (not that it isn't a kickass language, just that I'd done everything in it for a long time) and wanted to learn a new language, and Haskell looked cool :)
05:58:37 <Strike> d-bug: true, and between Forth and VB I'd still probably pick VB
05:58:55 <mgoetze> d-bug: Microsoft Visual COBOL!!!
06:00:06 <shapr> Strike: I think Haskell is a good choice, I jumped from Python also.
06:00:26 <Strike> yeah, plus I was a math minor so I like the algebgraic-style syntax
06:00:37 <Strike> that and since I was/am a python zealot, the syntax is nice too
06:00:41 <d-bug> i prefer ruby to python
06:00:50 <d-bug> s/to/over/
06:01:03 <Strike> yeah, I've had that discussion with numerous people before :)
06:01:08 <Igloo> Oh, shapr, do you have a bleeding edge gcc?
06:01:14 <Strike> ruby reeks of perl too much for me
06:01:30 <d-bug> ruby is smalltalkscript for me
06:01:33 <shapr> Igloo: 3.3 ?
06:01:34 <d-bug> i know nada perl
06:02:16 <Strike> d-bug: that's a good thing :)
06:02:30 * Strike learned perl a little before python, now hates perl
06:02:32 <Igloo> What do you get when you compile and run '#include <stdio.h>\n int main(void) { printf("%'020d\n", 999999999) }'?
06:02:40 * mgoetze i waiting for gcc 3.5 since that will supposedly include g95
06:02:47 <mgoetze> Strike: perl rulz!!!
06:02:57 <Igloo> g95?
06:03:09 <mgoetze> fortran 95 frontend for gcc
06:03:37 <Igloo> Ah, right
06:03:56 <mgoetze> since then i will finally be able to compile mlucas
06:04:33 <shapr> zsh/4 5118 % ./a.out
06:04:33 <shapr> 00000000000999999999
06:04:53 <Igloo> shapr: And the same if you remove the ' presumably?
06:04:53 <mgoetze> 4? 5118?
06:05:39 <shapr> Igloo: looks the same to me
06:05:40 <Igloo> If anyone has access to a compiler that might not ignore the ' flag in format strings I'm interested to know how it behaves
06:05:47 * Igloo mutters
06:06:00 <shapr> mgoetze: my zsh prompt tells me which tty I'm on, and the history number of this command 
06:06:12 <Strike> sweet, another zsh fan :)
06:06:23 <Strike> shapr: I have the feeling we'll get along just fine
06:06:23 <Igloo> Oh, sorry, I didn't mean without the '. I meant without the 0 it just gives 999999999, right?
06:06:30 <mgoetze> shapr: oh. mine tells me the exit status of the last command, unless it happens to be 0 :)
06:06:36 <shapr> yes, that too
06:06:45 <shapr> I'm using the clint prompt I think
06:06:51 <shapr> though I want to steal Igloo's prompt
06:06:57 <shapr> as soon as he puts it online
06:07:00 <Igloo> Heh
06:07:15 <Strike> put it up on dotfiles.(com|org) (can't remember which)
06:07:23 <Igloo> I'll fix the prompt and SSH chains and then do so soon
06:07:25 <shapr> Strike: do you use emacs?
06:07:31 <Strike> shapr: nope, vim
06:07:36 <mgoetze> PS1='%{%}%B%n@%m %(?..(%?%) )> %b'
06:07:36 <shapr> oh, so close ;-)
06:07:40 <Strike> hehe
06:07:42 <mgoetze> yay, vim rulz!
06:07:47 <Strike> and now I hate you, shapr :p
06:07:50 * shapr laughs
06:07:52 <Strike> it's in the rules, I have to
06:07:54 <mgoetze> RPS1='%B< %~%b'
06:08:08 <Igloo> Strike: vim and zsh? I'm still with you!
06:08:16 <mgoetze> so what's so special about igloo's prompt?
06:08:19 * Igloo raises you a mutt
06:08:22 <shapr> mgoetze: it's so cool
06:08:30 <shapr> I lost the url for the screenshot
06:08:35 <mgoetze> Igloo: yes, vim, zsh and mutt. irssi?
06:08:44 * shapr foldrs
06:08:50 <Strike> Igloo: heh, mutt's nice, but I generally use evolution locally and squirrelmail remotely
06:09:03 <Strike> irssi rocks
06:09:08 <Strike> but I use xchat :p
06:09:14 * Igloo gives mgoetze a high five
06:09:17 <Strike> irssi via ssh for remote sessions though
06:09:25 * mgoetze ponders a channel-wide... sorry, can't help myself :)
06:09:35 <Igloo> And Strike a low-five for trying  :-)
06:09:52 <shapr> heh
06:10:01 <shapr> I'm an emacs addict.
06:10:03 <Strike> heh, better than nothing I suppose :)
06:10:04 <mgoetze> Igloo: ok, uhm, i'll raise you, uh, tin? :)
06:10:06 <Igloo> shapr gets a kick in the balls for using emacs  :-P
06:10:10 <shapr> oof!
06:10:11 <Igloo> Sorry, slrn
06:10:15 <Strike> pan :)
06:10:30 * Strike is a bit of a gnome-ophile, as you may have noticed
06:10:32 <shapr> gee, emacs does editing, mail, news, and irc
06:10:33 <Igloo> mgoetze: And we could have been usch good friends...
06:10:38 * shapr snickers
06:10:51 <mgoetze> Igloo: damn
06:11:30 <Strike> shapr: and it does none of them well ;)
06:11:32 * Strike ducks
06:12:12 * mgoetze wonders wtf that kernel is that wli uses
06:13:45 <mgoetze> oh, shapr isn't even the only one to use ERC in this channel...
06:13:49 <shapr> truly
06:14:02 <shapr> I wrote a tiny bit of code for ERC even
06:14:18 <shapr> enough that I got a pissy CC: from RMS :-)
06:14:33 <mgoetze> shapr: why, did your code suck? :)
06:14:40 <Strike> meh, rms .. he didn't even pass the Debian skills test ;)
06:14:42 <shapr> "thou must assign thy copyright to the FSF or forever be cast into the Outer Proprietaryness"
06:14:59 <mgoetze> hehe
06:15:22 <mgoetze> shapr: so you told him to send you the paperwork with a SASE?
06:15:55 <Strike> does lambdabot not respond to ctcp versions?
06:16:02 <mgoetze> apparently not
06:16:09 <mgoetze> feel free to write that in
06:16:21 <Strike> heh, well, I did write an IRC bot in python ... a shoddy one, but it works okay :)
06:16:53 <Strike> actually, I was looking at doing networking in haskell but I couldn't find the Network module in any debs anywhere, so guidance there would be nice
06:17:19 <mgoetze> less than 4 hours till the chess cafe opens!
06:17:22 * mgoetze bounces
06:17:44 <Strike> heh, a chess fan too, eh?
06:17:48 * Strike plays on gameknot.com
06:17:57 <mgoetze> Strike: uhm, no.
06:18:04 <mgoetze> Strike: chess sux0rs :)
06:18:08 <Strike> meh
06:18:29 * mgoetze is a go junkie
06:18:49 <Strike> ooh, go rocks
06:18:52 <Strike> too bad I suck at it
06:19:10 <mgoetze> Strike: /join #go, and i'll give you a lesson one of these days :)
06:19:12 <Strike> I'm like 0 for ... all of my games (which is only like 5) on NNGS
06:19:59 <mgoetze> there's a big go tournament here in hamburg this weekend, 6 rounds
06:20:42 <Strike> are you ranked?  if so, what ... level (dan, is it?) are you?
06:20:53 <mgoetze> about 12kyu
06:21:03 <mgoetze> not good, but i'm working on it
06:21:18 <kosmikus> but not bad either :)
06:21:24 <Strike> definitely respectable
06:21:54 <Strike> anyway, I gotta head off to my aforementioned and oh so fun job, adios
06:22:05 <shapr> have a good day at work
06:22:07 <mgoetze> yes, and do drop by #go sometime :)
06:22:12 <Strike> heh, maybe
06:22:14 <shapr> come back and write Haskell!
06:22:22 <Strike> shapr: I do that AT work when I can sneak it in :)
06:22:29 <shapr> heh, cool
06:22:33 <Strike> okay, really gone now
06:23:00 * shapr tries to figure out what method to add for CTCP commands
06:35:31 <steveh> good morning
06:35:49 * steveh ponders the Hudak "Haskell School of Expression"
06:35:57 <steveh> + book
06:36:22 * wli looks at his copy of "The Algebra of Programming"
06:37:13 * d-bug looks at his "VB for dummies" :^)
06:37:26 <kosmikus> question: does TH think its a splice even if I write "( $", with a space in between?
06:37:39 <Igloo> No
06:37:45 <Igloo> But you probably mean "$ ("
06:37:52 <Igloo> (In which case the answer is still no)
06:39:05 <kosmikus> ah, but it considers $x a splice, right?
06:39:37 <Igloo> Yes
06:41:29 <kosmikus> any chance to add an extra options for template-haskell instead of just the usual -fglasgow-exts?
06:41:36 <kosmikus> s/options/option
06:42:59 <steveh> think I can run the Haskell Graphics library for X11 on a Mac?
06:43:26 <Igloo> I can see the argument for something that enables only the TH extension, but I disagree that -fglasgow-exts shouldn't turn TH on
06:44:03 <shapr> steveh: MOX?
06:44:07 <kosmikus> it breaks programs ...
06:44:10 <shapr> or System 8/9 ?
06:44:18 <kosmikus> but other extensions do as well ...
06:44:20 <shapr> wli: I want that book
06:44:24 <Igloo> You told GHC it could break your programs when you used -fglasgow-exts
06:44:45 <mgoetze> Strike: the new xdarwin is nice :)
06:44:50 <Igloo> Anyway, $s without spaces are ugly and should be fixed  :-)
06:44:51 <mgoetze> er
06:44:54 <mgoetze> i mean steveh 
06:45:07 <kosmikus> no, I find ($x) as section perfectly okay ...
06:45:13 <steveh> OS X
06:45:17 <steveh> with Apple's X11
06:45:32 <steveh> this is just to run through some examples in the Hudak book
06:45:59 <Igloo> Hmmm, I guess that case is more reasonable, although personally I'd still use ($ x) (as well as (+ 1) etc)
06:46:02 <steveh> was just wondering if anyone else has already done it and noticed any bumps in the road
06:46:18 <kosmikus> in the current example it is not my own code that broke
06:46:19 * steveh is downloading a bunch of stuff to his GF's notebook
06:46:28 <mgoetze> which reminds me, my download of ghc6 for osx must be done now
06:49:34 <kosmikus> Igloo: generally, would it be difficult to enable GHC extension to be enabled more selectively?
06:51:07 <Igloo> kos: I don't think it would be particularly difficult, it would just introduce a large number of new options and add complexity to the code. I'm not sure to what extent extensions depend on each other either.
06:53:29 <mgoetze> yup, ghc6 is much faster than ghc5 on my ibook
06:53:38 <kosmikus> I see. But if -fglasgow-exts is "allowed" to break any code any time, then it is very hard to write reliable Haskell software that uses one of the more stable extensions
06:54:24 <shapr> sounds like we need to start the Haskell2 standardization process.
06:56:11 <steveh> heh
06:56:25 <shapr> I nominate Igloo as the head guy.
06:56:26 <steveh> why would you standardize on something that's 96 worse than what we have now?
06:56:31 <Igloo> kos: To my mind there is H98, H98+approved ammendments and then everything else can't be relied upon
06:56:42 <steveh> :)
06:57:33 * Igloo doesn't think the community would be likely to follow me (if only because I like nkpats  :-)  ), and I don't think it would help me with my DPhil  :-(
06:57:53 <shapr> what's your DPhil subject?
06:58:07 <Igloo> Not sure, but Template Haskell should be in there somewhere
06:59:07 <mgoetze> let's standardized #haskell Haskell :)
06:59:18 <shapr> heh
06:59:39 <Igloo> Yeah! I vote we change all keywords to Klingon!
06:59:55 <mgoetze> by being the only group to write an up-to-date specification, we'll eventually become the de facto standard
07:00:10 <mgoetze> just think, this irc channel could rule the fp world :)
07:00:11 <shapr> Igloo: that would be much fun.
07:00:20 <steveh> Qapla'!
07:00:25 <Igloo> We'd need an implementation too
07:00:59 <shapr> Igloo: couldn't we use TH to rewrite the Klingon into english keywords for backwords compatibility?
07:02:05 * mgoetze puts on spohr's first clarinet concerto
07:02:06 <Igloo> No
07:02:52 <Igloo> You'd need to surround it by a splice or something, and even then it wouldn't be possible to do it so it parsed correctly
07:03:26 <shapr> how much of Haskell is unchangeable keywords? replacing the prelude would be easy.
07:03:58 <Igloo> Things like let, case, import, qualified
07:04:27 <mgoetze> hm
07:04:30 <shapr> hm
07:04:32 * mgoetze downloads a klingon font
07:05:52 <mgoetze> tlhIngan Hol vIjatlhaHbe'!
07:06:29 <shapr> w00
07:06:44 <shapr> I used to know what that meant.
07:06:53 * shapr gets dictionary
07:06:59 <mgoetze> i'm pretty sure it means "i can't speak klingon" :)
07:07:23 <kosmikus> lets just write qhc (Qo'nos Haskell compiler)
07:07:35 <shapr> heh
07:07:35 <mgoetze> hehe
07:07:59 <mgoetze> that would be really cool
07:08:12 <kosmikus> yes, imagine the error messages ;)
07:08:15 <shapr> either -F or -M allow you to specify a custom preprocessor for Haskell source files....
07:08:30 <mgoetze> it should accept both native klingon characters (utf-8) or latin transliterations
07:08:55 <kosmikus> if you don't shout at it, it doesn't compile ...
07:08:59 <Igloo> It should hurl abuse at you for being feeble if you use transliterations, though
07:09:13 <Igloo> s/abuse/extra abuse/
07:09:35 <shapr> hah
07:09:44 <shapr> I think this needs a HaWiki page
07:09:49 <tez> And if you use n+k patterns, You Have No Honour!
07:10:11 <kosmikus> and it should have a buit-in detector for cowardly Haskell ...
07:10:12 <shapr> You *MUST* bring honor to the house of Peyton-Jones!
07:11:23 <kosmikus> and imagine how many Trekk{ies,ers} will instantly start learning Haskell ;)
07:11:33 * Igloo makes a note to stab tez in the back when he's not looking
07:11:40 <tez> :)
07:11:53 <wli> Trekkies learning Haskell?
07:13:24 <shapr> waitasec, I bet anything using Klingon would be considered imperative programming.
07:13:59 <shapr> possibly even offensive programming.
07:15:00 <wli> Why would Trekkies suddenly develop an interest in Haskell?
07:15:40 <tez> Not an interest in Haskell, but Klingon Haskell!
07:15:50 <shapr> If we changed all the keywords to Klingon
07:16:53 <kosmikus> shapr: the modern Klingon thinks functional ...
07:17:45 <kosmikus> shapr: or, alternatively, an ancient scroll is found in which Kah'less tells his followers to use Haskell
07:18:03 <shapr> haha
07:18:21 <shapr> We should save this for the next April 1st
07:18:32 * Igloo thought that 5 mins ago  :-)
07:18:34 <kosmikus> good idea
07:19:01 * shapr starts work on batleth combinators
07:19:45 <shapr> I really like the star trek series, though I think its good points mostly disappeared when roddenberry was no longer running it.
07:20:09 <mgoetze> though enterprise is pretty good at times
07:20:45 <shapr> I like the culture challenges you got in the original series, and in the beginning of the next generation.
07:21:07 <shapr> oh! I saw most of AniMatrix last night
07:21:12 <shapr> it's very spiffy
07:21:27 <kosmikus> is it worth buying the DVD?
07:21:37 <shapr> I think so
07:21:51 <shapr> depends on the price, I didn't buy this one.
07:22:05 <shapr> it covers a lot of the history of The Matrix
07:22:44 <shapr> it's not for kids though, it has some very explicit violence.
07:22:45 <Igloo> How should I alphabetise "Gabriel Dos Reis" by surname? Under R?
07:23:07 <shapr> I'd say D
07:25:08 <shapr> oh nifty: http://haskell.cs.yale.edu/packages/
07:25:09 <shapr> that's new
07:25:37 <shapr> I want Runtime Loader for GHC6
07:41:12 <shapr> is there a findInSortedList in the prelude? something that uses a binary search or so?
07:43:16 <shapr> I don't see one.
07:45:08 <kosmikus> don't think so
07:51:40 <shapr> hi cale 
07:51:43 <cale> hello
07:51:48 <shapr> what's up?
07:52:11 <cale> not much - been trying to get pingus to work (ClanLib doesn't seem to work on my system at all)
07:52:38 <Igloo> findInSortedList would only get you a factor of 2 on random data anyway
08:08:42 <dennisb> hello
08:08:56 <cale> hi
08:10:48 <dennisb> I tried to connect from chalmers today to show John, but of course there was a netsplit and we ended up on out own server, being the only one on #haskell :-)
08:15:47 <shapr> heh, that sucks :-)
09:01:44 <cale> "Your argument is not simply connected." - I like that. :)
09:03:02 <cale> Nice way to accuse someone of circular reasoning.
09:06:22 <shapr> heh
09:23:47 * shapr sighs
09:24:00 <shapr> I've promised a friend I'll play warcraft III with him, but now I feel like coding.
09:24:05 <shapr> I hate it when that happens.
09:26:32 * dennisb also have problems with that
09:27:25 <cale> I don't know what the big deal about WC3 is. I got tired of it pretty quickly. What are you working on shapr?
09:27:33 <dennisb> And my friends don't always accept it when I say I want to code instead of doing whatever it is we was going to do
09:27:36 <Arnia> I want a game engine in Haskell now :/
09:28:22 <cale> Fran looks really cool - I just with it had linux bindings.
09:28:32 <shapr> Arnia: I want Zope in Haskell *now*
09:29:01 <shapr> cale: I got distracted into trying to make a simple but fast solution for the overlapping SKU problem from the mailing lists.
09:29:24 <Arnia> Well... I'm going to begin serious work on the Application Arrow and the whole framework shortly... nice project for the summer
09:29:29 <shapr> I think I came up with a way such that you only have to sort the list and then loop through it once.
09:29:37 <shapr> I'm wondering if I could actually cut that down to a single pass.
09:29:53 <shapr> Arnia: yes, I'll have more free time in the summer. I want Zope in Haskell very much.
09:30:27 <Darius> Can the loop be expressed as a foldr/map/unfoldr
09:30:39 <Darius> If so you could fuse it and get a one pass algorithm.
09:31:54 <shapr> this is my mental scribble so far: http://kungens.kemi.fi/~shae/src/haskell/ProtoSKUOverlap.lhs
09:32:37 <Arnia> shapr: Its going to be more than just Zope in haskell though, although it will make that possible. It will be an easy to use application framework
09:32:43 <shapr> Arnia: yes, I understand.
09:33:04 <shapr> cale: I thought Fran did have linux bindings?
09:33:31 <shapr> cale: the fun part about WC3 for me is playing in a team with other people, I'm fascinated by cooperation/teamwork/etc
09:33:51 <shapr> the social aspect of problem solving is one of my strongest interests.
09:34:38 <Arnia> shapr: Can I chat with you about that at some point? I'm hoping to do a social AI for my dissertation
09:34:41 <shapr> I keep trying to think up network games that require at least two players.
09:34:53 <shapr> Arnia: sure, I'd love to talk about it.
09:35:05 <shapr> though I'm sposed to go play WC3 right now.
09:35:40 <shapr> cale: oh, the heroes are an interesting new part of the game, they're strong enough that they make most of the difference in an attack/defense in my experience.
09:37:37 <cale> Yeah, I'll admit that I didn't actually play very many multiplayer sessions - probably should have tried that out more. As far as games go, I'm usually into SP.
09:37:48 <shapr> SP?
09:37:53 <shapr> oh, single player
09:37:56 <cale> yeah
09:38:12 <shapr> playing against computer AIs doesn't do much for me.
09:38:31 <cale> I really like large RPGs, like Morrowind.
09:38:33 <shapr> it's so easy to find a bug in the AI and always win.
09:39:49 <cale> "Fran is a Haskell library (or "embedded language") for interactive animations with 2D and 3D graphics and sound. It runs under Windows 95/98 and Windows NT under Hugs 98." That's what the Fran page says anyway.
09:39:49 <shapr> Arnia: hey, I'm planning to invite John Hughes to #haskell for an IRC chat/talk about Arrows. I'm looking for people who have questions to ask...
09:40:25 <shapr> what about FranTk ?
09:40:44 <shapr> http://www.dcs.gla.ac.uk/~meurig/FranTk/news.html
09:40:52 <shapr> ok, I'm really leaving now....
09:41:33 <cale> afaict, they're based on similar ideas, but they're otherwise completely different.
09:41:38 <Arnia> shapr: That's cool :) I have a few questions ;)
09:41:55 <Arnia> cale: Fruit... http://www.haskell.org/fruit
09:49:09 <Arnia> And I'm off again... woo, I'm a busy boy. ;)
09:49:16 <cale> hmm... I wonder how much trouble it would be to write a haven implementation in C using evas.
11:23:30 <cale> Does anyone know whether anything was done wrt Generic Haskell? There was supposedly some plans to add features such that typeclasses could be made derivable (and hence to make things like Functor derivable).
11:23:54 <wli> you mean TH?
11:24:20 <cale> oh, is that what became of it? I'll look into it.
11:24:45 <Darius> Generic Haskell is alive.  Generics (another thing) were added to GHC but were never fully implemented or widely used so will probably go.
11:24:53 <Darius> Generics is not Data.Generics
11:27:15 <Darius> Gmap in Data.Generics is Functor generalized and is derivable in GHC6
11:27:34 <Darius> (well sort of)
11:28:03 <wli> Does it have crush too?
11:28:16 <wli> (generic derivable fold)
11:28:24 <Darius> Yes
11:28:30 <wli> excellent
13:41:44 <Riastradh> Has anyone bought a 'WHAT PART OF _ DON'T YOU UNDERSTAND?' t-shirt yet and discovered if the text is too small or not?
13:42:45 <Igloo> Don't yo get told if you set it up?
13:42:57 <Riastradh> ?
13:44:02 <Igloo> I'd have thought you could find out
13:44:35 <Riastradh> No, they just show an image of the t-shirt.
13:44:43 <Riastradh> A small image, so you can't really tell from it.
13:45:07 <Igloo> No, I mean I'd have thought there was a way for you to find out if someone bought one
13:45:35 <Riastradh> Oh.
13:45:37 <Riastradh> I dunno.
13:45:42 <Riastradh> I don't think so.
13:45:43 <Igloo> :-)
13:45:48 <Igloo> OK
13:57:43 <Riastradh> Are there any Haskell implementations that support type lambdas or partial application of type synonyms?
13:58:36 <Igloo> GHC core supports type lambdas
14:01:00 <Riastradh> Hmm.  Is there any documentation thereon?
14:01:46 <Igloo> Probably bits and pieces of varying accuracy
15:01:26 * tmoertel causes his computer's CPU fan to kick on, as he compiles GHC 6
15:07:19 <Igloo> :-)
15:37:37 <JohnFCash> hello
15:38:12 <JohnFCash> question, why if i use recursion sending a list without () takes longer than with ()?is it just my crazy imagination?
16:15:10 <stevehu> good evening all
16:16:39 <Riastradh> Hi.
16:19:47 <stevehu> Ah, hello!
16:19:55 <Darius> @type partition
16:19:58 <stevehu> Was wondering if everyone had something fun to do on the weekends... :)
16:20:05 * stevehu is at work right now.
16:20:18 <Darius> @prelude partition
16:20:22 <lambdabot> *** "partition" prelude "Haskell Standard Prelude Dictionary": text follows
16:20:22 <lambdabot> partition
16:20:22 <lambdabot>   partition ::  (a -> Bool) -> [a] -> ([a],[a])
16:20:22 <lambdabot>   partition p xs           = foldr select ([],[]) xs
16:20:23 <lambdabot>   		         where select x (ts,fs) | p x       = (x:ts,fs)
16:20:25 <lambdabot>   		  		                | otherwise = (ts,x:fs)
16:21:08 * Riastradh has nothing fun to do on the weekend.
16:21:55 * stevehu went to the library and got books.
16:22:32 <stevehu> the Hudak haskell book, two compiler texts, "Lex & Yacc," and "Practical C++ Programming" from the library
16:22:41 <stevehu> I got the Okasaki data structures book the other day
16:22:56 <Riastradh> Ewww, you got a C++ book?
16:22:58 <stevehu> still don't understand why remove wasn't implemented in his sets...
16:23:08 <stevehu> Riastradh: From the library, settle down. :)
16:24:47 * stevehu already has a few C++ books but wanted a look at this one
16:25:09 <stevehu> I still haven't found any programming language text as useful as K&R2 though
16:25:25 <stevehu> If there were a K&R-type book for Haskell that would be great :)
16:26:16 <Riastradh> Well, write it!
16:26:41 <stevehu> Ha!
16:26:46 <Smerdyakov> Who needs it?
16:26:46 <stevehu> I am just learning myself
16:27:25 * stevehu is woefully inefficient at using online programming documentation
16:27:34 <stevehu> books just work out much better for me
16:53:28 <Riastradh> Does the Haskell web server support anything like the PLT web server's sevlets or SUnet's surflets or Seaside's whateverthey'recalleds?
18:01:01 * Igloo starts reading ghc5's debian/
18:49:24 <saz> hmm
18:49:29 * Darius didn't know case statements had such a general syntax
18:49:43 <saz> why does ghc do buffering on stdout by default?
18:50:32 <Riastradh> Such a general syntax?
18:51:05 <Darius> case 5 of x | x == 3 -> y where { y = 10 };z -> z
18:51:37 <Riastradh> Er, what's so 'general' about this?
18:51:44 <Riastradh> That is, what distinguishes it?
18:52:20 <Darius> It's more general than I thought it was.  I thought case statements were just pattern -> expression; pattern -> expression
18:52:54 <Darius> Guards I might have tried, if I ever really thought about it, but where statements I never would have tried.
18:53:13 <Riastradh> How would the top-level function declaration with pattern matching and guards and where expressions work, then, if case didn't have those things?
18:53:43 <Darius> They get translated to lets and cases just like they do.
19:46:57 <saz> is there a better way to stop stdout from being buffered than using "hSetBuffering stdout NoBuffering
19:47:00 <saz> "
19:47:03 <saz> ?
20:59:56 <tmoertel> saz: I don't think so.
21:00:28 <saz> why is it buffered by defaultA?
21:01:06 <tmoertel> saz: convention is that output is buffered by default.  Same for C, C++.
21:01:58 <saz> hmm
21:02:07 <saz> but in C, if i do printf, it appears on the screen immediately
21:02:17 <saz> doesn't wait for a scanf before it appears
21:02:29 <tmoertel> it's for efficiency purposes.  stdout is often line buffered
21:03:13 <saz> ah.. hmm..k
21:03:19 <kip_> does scanf flush stdout?
21:05:10 <kip_> #include <stdio.h>
21:05:10 <kip_> int main() {
21:05:10 <kip_>   printf("foo");
21:05:10 <kip_>   while (1) {};
21:05:10 <kip_> }
21:05:24 <kip_> will hang and not print anything.  but maybe it will flush after a newline
21:05:26 <tmoertel> kip_: i don't think so, but the underlying terminal might.
21:05:47 <tmoertel> kip_: if stdout is tied to a terminal, it is line buffered.
21:07:06 <tmoertel> From "man stdout": The stream stderr is unbuffered. The stream stdout is line buffered when it points to a terminal. Partial lines will not appear until fflush(3) or exit(3) is called, or a newline is printed. This can produce unexpected results, especially with debugging output.  The buffering mode of the
21:07:25 <tmoertel> (and so forth)
21:08:00 <kip_> is anyone familiar with ST monad, and in-place array updates.  is it possible to implement, for example, a pure Hashtable, which allows both inserts and lookups, without having to recompute the entire state from scratch on each lookup?
21:08:44 <kip_> i admit that i'm too lazy to work through the paper
21:09:38 <tmoertel> isn't the O(lg n) of, say, FiniteMap good enough ?
21:10:21 <kip_> i'm asking just from the standpoint of trying to understand the ST monad
21:10:48 <kip_> the rank 2 type of runST leaves me a little confused
21:11:18 <kip_> (i'm new to haskell)
21:11:37 <tmoertel> kip_: see http://www.haskell.org/hawiki/RankTwoPolymorphism
21:12:04 <kip_> this is the paper i'm referring to: http://citeseer.nj.nec.com/63882.html
21:12:10 <kip_> lazy functional state threads
21:12:33 * tmoertel hasn't read it
21:13:09 <kip_> ok, thanks
21:13:56 <kip_> i was pretty amazed you could do stateful computations inside a pure function
21:20:54 <wli> kip: doesn't matter if the computation's stateful
21:21:43 <wli> kip: if all the side-effects are contained within that computation's state and it just squirts out some answer at the end, you can just say "gimme the answer" (execRWST or whatever) and it's done
21:23:34 <kip_> wli: thanks.  i'm curious if you can squirt out and answer, but maintain the arrays, and do further computations (such as a hashtable with put/get operations.) does this make sense?
21:23:42 <Darius> kip: think of how many C functions are pure
21:24:10 <wli> kip: not entirely; basically all that can escape is an answer
21:24:22 <wli> kip: you can return extra things in your answer if you want
21:24:24 <kip_> so, what i'm wondering is, after a call to "runST", presumably all the sequenced operations must be performed
21:24:39 <kip_> then lets say you want to sequence further things into the same monad
21:24:49 <kip_> and you runST it again.  do you have to start computation from the beginning?
21:25:00 <Darius> The STRefs/STArrays you allocate in an ST computation can only be used in that computation
21:26:55 <kip_> *nod*. so there's no way to store them for future computations i guess (sequenced after the original monad)
21:27:28 <kip_> i guess you could copy out the array and put it back in, but that would require copying.
21:28:21 <kip_> thanks for your help
21:28:35 <Darius> I believe there's an unsafeFreeze array or some such
21:28:40 <Darius> that would avoid copying
21:28:54 <kip_> yeah, i was kind of wondering about that
21:29:04 <kip_> i guess unsafeFreeze and unsafeThaw are the way to do it
21:29:49 <Darius> However, it's unsafe if you actually use change the array.
21:30:38 <kip_> yeah, ok, i get it now..
21:31:23 <Darius> If you need to keep the array around just stay in the ST monad (or perhaps the IO monad would be better)
21:32:21 <kip_> *nod*
21:33:29 <kip_> Thanks again
21:34:51 <kip> /who #haskell
22:04:40 <d-bug> morning
22:05:39 <seth> hello, all.  anyone know if there is a binary for osx to download?  Wolfgang told me he'll have V6 soon, but I'm not sure whether there is a V5 mac osx binary.
22:10:26 <tmoertel> seth: http://www.haskell.org/ghc/download_ghc_5043.html
22:11:55 <seth> tmoertel: thanks much.
23:11:58 * tmoertel wanders off to sleep 
