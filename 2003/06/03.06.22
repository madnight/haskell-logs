04:48:09 <cale> Wow, it's been 6 hours since anyone said anything.
09:22:06 <mattam_> following a paper on monads and parsers, i'd like to make my parser type (Parser a = String -> [(a,String)]) an instance of Monad, but it is actually a type synonym, hence not allowed in an instance def. How do I avoid this problem ?
09:22:21 <Heffalump> you need to use newtype
09:22:34 <Heffalump> newtype Parser a = Parser (String -> [(a,String)])
09:23:30 <mattam> thanks
09:24:17 <andersca> make a failure into a list of successes!
09:35:15 * dbagnell is away: I'm busy
09:35:51 <mattam> that implies a lot of unnecessary constructions...
09:36:24 <Riastradh> mattam, get your head out of the OCaml idea that efficiency is everything.
09:37:16 <mattam> it's more readability and 'praticability' that i value here
09:39:39 <Heffalump> mattam: unfortunately there's no way round it
09:41:38 <mattam> i thought type synonyms were allowed in latest ghc versions (i'm building it right now). Isn't it true ?
09:41:51 <Riastradh> If so, it'll be in -fglasgow-exts.
09:42:05 <Riastradh> (i.e., use that flag when invoking ghc, use ':set -fglasgow-exts' in GHCi)
09:42:40 <mattam> k
09:42:44 * Heffalump would recommend just putting up with the syntactic nastiness if that's the only reason you'd need it
09:54:36 <syntax-laptop> hi all
09:54:45 <syntax-laptop> does anyone know if the SOE Graphics libraries are in Debian anywhere?
09:55:24 <Heffalump> are they distributable?
09:55:49 <syntax-laptop> hm. don't know
09:59:49 <syntax-laptop> yeah, looks like it, BSD style
10:04:45 <Heffalump> I made a package of arrowp, btw, but need to check on the licence since none is specified
10:08:40 <syntax-laptop> heh. that probably won't be a problem, its by Ross Paterson, right? He uses Debian, so it might make him happy even.
10:11:03 <Heffalump> yeah, I should have thought it'd be easy
10:11:15 <Heffalump> see the topic if you want to grab them now, anyway
10:11:23 <Heffalump> s/them/it/
10:15:55 * syntax-laptop thinks again about some kind of haskell-experamental debian repository
10:16:12 <syntax-laptop> since I want to make debs of hugs-november2002 for Woody sometime
10:17:58 <Heffalump> sounds good.
10:18:10 <Heffalump> do you have somewhere to host it?
10:22:08 <syntax-laptop> yeah, monk.debian.{org?,net?} is where it'll probably go once we get our web server back
10:22:12 <syntax-laptop> we've been having hardware problems
11:48:08 <kunphuzil> I just installed haskell-mode for emacs, how do i use it?
11:48:36 <tez> M-x haskell-mode
11:48:40 <Riastradh> (autoload 'haskell-mode "haskell-mode-filename-sans-extension" "Major mode for editing Haskell files." t)
11:48:46 <Riastradh> ...in your .emacs.
11:49:02 <kunphuzil> heh, my .emacs is building up
11:49:04 <Riastradh> Therebefore should be:  (add-to-list 'load-path "/path/to/haskell/mode/directory")
11:50:34 <kunphuzil> anyone else use gentoo in here, and knows where it is?
11:50:43 <Riastradh> locate haskell-mode
11:51:03 <kunphuzil> nm. found it
11:52:21 <kunphuzil> Cannot open load file: haskell-mode-filename-sans-extension
11:53:00 <Riastradh> Er.
11:53:15 <Riastradh> You were supposed to interpret that as 'put the filename of the haskell-mode file without the .el extension here.'
11:53:28 <kunphuzil> oh, heh
11:56:03 <kunphuzil>  File `/usr/lib/xemacs/xemacs-packages/lisp/haskell-mode/haskell-mode.elc' was not compiled in Emacs
11:56:17 <kunphuzil> Hm.. But I didn't use .elc, i used .el 
11:56:37 <Riastradh> rm -f that file.
11:57:09 <kunphuzil> ok
11:57:29 <mattam> kunphuzil: just use (autoload 'haskell-mode "haskell-mode" "..." t)
11:57:51 <mattam> gentoo adds the directories automatically 
11:59:28 <kunphuzil> mattam: if i do that i get an error that it can't find "haskell-mode"
12:00:14 <mattam> did you installed the xemacs or the emacs version ?
12:00:25 <mattam> that can be confusing
12:00:48 <kunphuzil> well, i did emerge emacs, and if i'm in x it runs xemacs and if i'm not in x it runs the command line version..
12:01:29 <Riastradh> Ah, you're just confused about what XEmacs is, probably.
12:01:39 <mattam> are you sure it's not emacs with Xaw ? 
12:01:43 <Riastradh> XEmacs isn't Emacs with an X GUI -- it's an entirely separate branch.
12:01:47 <kunphuzil> Yeah, what is the difference? 
12:01:58 <Riastradh> Lots of incompatibilities, and licence.
12:02:05 <kunphuzil> i think i have emacs with xaw then..
12:02:06 <mattam> so emerge app-emacs/haskell-mode
12:02:19 <kunphuzil> mattam: i did.. 
12:02:29 <kunphuzil> hmm
12:02:36 <mattam> no, you did app-xemacs/... (the default)
12:02:40 <kunphuzil> well i did emerge haskell-mode .. 
12:02:41 <kunphuzil> oh, ok
12:03:11 <kunphuzil> i think there should be a thing in emerge that asks you which package you want to emerge if there are ones that are the same
12:03:15 <mattam> that's kind of subtle if you didn't run in this problem yet :)
12:03:53 <mattam> sure, ask on #gentoo-dev :)
12:06:08 <kunphuzil> so how can i run hugs like i can run mzscheme?
12:06:35 <Riastradh> In a Haskell buffer, do 'C-c C-l' to load it into hugs.
12:06:49 <kunphuzil> ah, that's right. just like the scheme
12:08:49 <mattam> i've got a problem with my parser. I'm doing a 'many pred' combinator, and I'm not sure if i'm right, but i think I should use return "" instead of mzero when it doesn't match (the predicate fails or the sequence is empty). The fact is, if I use mzero, i don't match anything, but it is what the paper I'm reading recommends...
12:09:33 <mattam> mzero version is: many p = (p >>= \x -> (many p) >>= \xs -> return (x:xs)) `mplus` mzero
12:10:07 <kunphuzil> Riastradh: erm, a haskell buffer? i open a haskell file.. is that what you mean?
12:12:22 <Riastradh> Yes.
12:13:14 <kunphuzil> Not working :/
12:13:27 <mattam> any advice ?
12:13:47 <kunphuzil> Riastradh: just makes a beep when i try
12:15:03 <Riastradh> Maybe you should look at the installation instructions.
12:26:18 <esap> Hmm.. does anyone else think that 'head' and 'tail' functions are badly designed?
12:27:05 <Heffalump> doesn't xemacs have the same licence as emacs?
12:27:13 <Heffalump> esap: that'd be impressive, given how short they are
12:27:59 <esap> heffalump: I mean, I think their type should be (Monad m) => [a] -> m a and (Monad m) => [a] -> m [a]
12:28:44 <Heffalump> that'd make normal use of them ridiculously complicated
12:28:50 <Heffalump> why not just use liftM?
12:28:58 <esap> liftM?
12:29:17 <Heffalump> no, I don't mean that, how about (return . )
12:29:58 <esap> you mean return . head. That doesn't work, since head raises an error if the list is empty.
12:30:36 <Heffalump> you want it to call fail instead?
12:30:59 <esap> yes.
12:31:02 <Riastradh> head [] = fail "empty list"
12:31:07 <Riastradh> head (x:_) = return x
12:31:11 <Riastradh> You want that?
12:31:24 <esap> yes.
12:31:45 <Riastradh> Shouldn't that be in the Monad module, though, and not the standard prelude?
12:32:44 <esap> well perhaps. But of course, the same problem is actually for all projection functions in data X = X { proj1 :: Y, ... }
12:34:27 <esap> To me, when those functions fail with error, it places some constraints on the programmer that really should be checked by the type checker.
12:37:17 <esap> The reason why (Monad m) => [a] -> m a is the best type for 'head', is that I would prefer to handle errors with those using the Maybe monad.
12:38:24 <esap> So that the type checker catches it if I erroneously call those functions for an empty list.
12:38:44 <esap> Or alternatively, there should be a separate type for non-empty lists.
12:41:43 <esap> But I guess type checking for non-empty lists might be too hard.
12:42:17 <Heffalump> it wouldn't help, you'd have to start worrying about lists with less than two elements and lists with two elements or more next
12:42:25 <Heffalump> why don't you just write headM and tailM to do what you want?
12:42:38 <esap> I have :-)
12:44:39 <esap> But the projection functions for algebraic data types is causing quite a bit of work :(
12:44:56 <Heffalump> wdym?
12:45:27 <Riastradh> This sounds like a job for...TEMPLATE HASKELL!
12:45:31 <Riastradh> <insert fanfare here>
12:45:44 * esap still hasn't really looked at template haskell.
12:49:39 <d-bug> *drumroll*
12:50:00 <Riastradh> esap, that can be fixed.
12:51:26 * esap is reading template haskell documentation right now...
13:16:45 <kunphuzil> Can someone tell me real quick the syntax for "filter"? i have forgotten.. is that an easy way to find out?
13:17:42 <Riastradh> filter f l
13:17:54 <Riastradh> returns a list of all the elements in l for which f returns True.
13:18:09 <Strike> @prelude filter
13:18:15 <lambdabot> *** "filter" prelude "Haskell Standard Prelude Dictionary": text follows
13:18:15 <lambdabot> filter
13:18:15 <lambdabot>   filter ::  (a -> Bool) -> [a] -> [a]
13:18:15 <lambdabot>   filter p xs       = [ x | x <- xs, p x ]
13:19:20 <kunphuzil> Oh, duh.. What am I thinking.. I need a list 
13:19:41 <kunphuzil> er
14:17:06 <jlouis> Riastradh: added: the f function is often called the predicate and is denoted by p
14:18:35 <Riastradh> Blah.
14:24:56 <jlouis> Riastradh: what do you prefer, filter or a list comprehension?
14:25:18 <Riastradh> jlouis, filter.
14:25:40 <Heffalump> list comprehensions are implemented in terms of filter, so the above definition is wrong :-)
14:25:48 <Riastradh> Heh.
14:26:10 <Heffalump> or rather, the translation for them is defined in those terms, IIRC
14:27:59 <jlouis> Riastradh: ah, yes.. filter p xs seems more concise than [ x | x <- ... ]
14:29:31 <Heffalump> list comprehensions tend to express complex things more concisely than the equivalent you could write without
14:29:38 <Heffalump> but for something simple they're generally overkill
15:02:07 <kunphuzil> How come fst and snd only work on tuples? 
15:03:18 <Riastradh> What else should they work on?
15:04:41 <kunphuzil> Well, how do you get an element out of a list?
15:05:08 <Strike> (!!) 
15:05:18 <kunphuzil> Sorry :/
15:05:27 <Riastradh> list !! index
15:05:55 <kunphuzil> ehm.. could you show me an example?
15:06:10 <Riastradh> [0,1,2] !! 1 --> 1
15:06:43 <kunphuzil> Oh..
15:06:48 <kunphuzil> I thought you were yelling at me
15:07:04 <Riastradh> Oh, heh.
15:22:49 <cale> haha
15:24:24 <Strike> wait, I _was_ yelling at you :p  (j/k)
15:25:38 <kunphuzil> heh
15:33:57 <Dark-Star> is there a function that converts a String to an Int/Integer?
15:34:11 <Dark-Star> something like digitToInt, just for strings?
15:35:55 <Strike> read ?
15:36:44 <Strike> Prelude> read "12" :: Int
15:36:44 <Strike> 12
15:38:36 <Dark-Star> cool. thanks :)
16:05:20 <esap> Hmm.. how come I'm getting "variable not in scope" errors in Template haskell for symbols I try to introduce to the scope?
16:05:35 <Riastradh> Pasting your code would help.
16:07:16 * esap does basically THS.fun (lbl_name ++ "M") [succ_fun, fail_fun]. lbl_name is a projection function name obtained from data expression.
16:07:49 <esap> The undefined symbol comes from the symbol I construct by adding 'M' to.
16:13:04 <esap> see the code at http://www.kotiposti.net/epulkkin/Generic.lhs
16:14:13 <Riastradh> Gack.
16:14:19 * Riastradh smacks the web server of that machine.
16:14:30 * esap can't help it, it's ISP's web server.
16:14:45 <Riastradh> Can you use nothing else?
16:15:05 <esap> I can try, wait a sec.
16:15:15 <Heffalump> ugh, what mime type did it provide?
16:15:40 <esap> 'view-source' helps for me for that.
16:15:46 <Heffalump> ah, text/html
16:16:36 <Heffalump> http://urchin.earth.li/~ganesh/Generic.lhs
16:19:52 <esap> I think I haven't quite got all the TH stuff yet, for example, I try to use [| return x |] to return a variable, but it requires it from enclosing scope :-) But the immediate problem is about the last line of projection_function, I guess.
16:24:32 <esap> See http://www.modeemi.fi/~esap/GenericTest.lhs for a test driver for the code (and /Generic.lhs) for the actual code.
16:25:20 * Heffalump deletes the copy he made to avoid causing confusion
16:26:51 <esap> oh I just realized that doesn't compile without my PrettyP module as well (due to the code at end, only the functions up to 'projection_function' are actually needed for the problem.
17:56:30 * esap still can't understand why I get variable not in scope errors. I tried add type signature for it, and it wasn't it.
17:57:18 <Igloo_> For what?
17:57:57 <esap> I'm using template haskell, and I've generated some declarations. No matter what I do, I get "Variable not in scope:" errors for the symbols I try to declare.
17:58:19 <Igloo> Can I see the code?
17:58:32 <esap> Sure, wait a sec, I'll put it in a web server.
17:59:27 <esap> hmm.. see http://www.modeemi.fi/~esap/Generic.lhs and /GenericTest.lhs, they show the problem.
18:00:26 <Igloo> Does it work if you change Test to have
18:00:33 <Igloo> $( do d <- reifyDecl Test
18:00:42 <Igloo>       projections s )
18:00:53 <Igloo> and make the corresponding changes to the library?
18:01:52 <Igloo> Although that wouldn't be a variable - can you paste the error message?
18:02:13 <esap> Variable not in scope: `GenericTest.yM'
18:02:28 <esap> and also twice  "Variable not in scope: `GenericTest.xM'"
18:02:54 <esap> changing it to do doesn't do anything.
18:06:57 <esap> I put a new version of http://www.modeemi.fi/~esap/Generic.lhs, it has the same problem (and also duplicate declrations problems).
18:08:24 <Igloo> You're making functions like GenericTest:xM, try calling them just xM
18:09:04 <esap> hmm.. I'm just appending to an existing name.
18:09:15 <Igloo> You probably want [| return $( var "x" ) |] too
18:09:35 <Igloo> But the reified name has its location prepended
18:10:30 <esap> so should I parse the prepended location out of it or what? I want the function to be named similarly to an existing field name.
18:11:15 <Igloo> Yeah, I tend to have a de_colon function that uses break to remove the bit before a : if there is one
18:11:36 <esap> oh ok.
18:12:10 <kunphuzil> I get this error in emacs when opening a haskell file:
18:12:12 <kunphuzil> File mode specification error: (file-error "Cannot open load file" "haskell-hugs")
18:12:36 <kunphuzil> (i copied what is on this page, http://haskell.cs.yale.edu/haskell-mode/installation-guide.html, into my .emacs ..)
18:15:04 <esap> igloo: wow, that helped, now it only complains about overlapped patterns :-)
18:18:52 <Igloo> Do you always rename imports?
18:20:59 <esap> no not always. Usually when using the hierarchical module names I think it's wise to rename. Some of the GHC libraries have same identifiers as my code.
18:21:14 <Igloo> *nod*
18:22:27 <esap> hmm.. Now it would seem to work for simple data types. I can now generate monadic projection functions easily.
18:24:15 <esap> except that it doesn't work yet if the data type has parameters. Hmm..
18:25:54 <Heffalump> oh yes, another reason printing out the final result from TH would be good - when people write stuff like this, it can be made (partially) useful for people that don't have TH too
20:13:29 <kunphuzil> I've seen a lot of people put their emails in formats that if you run it through hugs/whatever it outputs their real email, what kinds of things do you guys do? :)
20:42:38 <Pseudonym> No, but if you do it, consider submitting it to the next IOHCC.
