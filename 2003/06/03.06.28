00:27:52 <Marvin--> morning?
00:28:06 <andersca> indeed
00:34:30 <clausen> rfc:
00:35:04 <clausen> http://members.optusnet.com.au/clausen/ideas/foldup.html
00:35:11 <clausen> should be relatively easy to implement in haskell?
00:35:19 <clausen> (i.e. for haskell)
00:40:32 <demoncrat> clausen - i think that's called slicing
00:40:37 <clausen> demoncrat: oh... thanks
00:40:40 * clausen looks
00:40:56 <demoncrat> possibly a restricted version of your idea
00:41:48 <clausen> http://hissa.nist.gov/unravel/
00:41:51 <clausen> ^ looks relevant
00:56:09 <clausen> demoncrat: slicing looks like it is the converse of what I'm talking about
00:56:30 <clausen> demoncrat: it looks basically equivalent to grep
00:57:01 <clausen> (ooops, I'm talking rubbish...
00:58:55 <clausen> in slicing, the variables not to be "folded" are passed, not the other way around...)
01:13:49 <demoncrat> clausen - oh, yeah
01:14:12 <clausen> demoncrat: I added a link to a paper that discusses it a bit
01:14:41 <demoncrat> i'm a bit distracted tonight... wrote my first non-toy haskell program
01:16:13 <Marvin--> demoncrat: time to enter the icfp contest then? .-)
01:17:58 <demoncrat> guessed it in one :)
01:21:24 <earthy> icfp contests qualify as toys with me. :O)
01:21:46 <demoncrat> they are pretty fun
01:21:55 <earthy> yes. ;)
01:22:18 <demoncrat> the difference is my previous haskell hacks were little exercises not meant to be used for anything
01:22:36 <earthy> it's just that this year I have *no* way of spending anywhere in the vicinity of enough time to enter
01:22:58 <demoncrat> maybe find some other people to do all the work? :)
01:23:13 <earthy> I'm not that freeloading :)
01:23:49 <demoncrat> is there a library function taking a read action and performing it repeatedly to make a list of the things read?
01:23:57 <earthy> anyway, time to go do the stuff that makes me not do this year's ICFP contest.
01:24:08 <demoncrat> like repeatedly :: IO a -> IO [a]
01:24:15 <demoncrat> have fun
01:24:34 <Marvin--> man, these race tracks are huge
01:28:16 <d-bug> Marvin--: How about this mouse pad? http://www.musmattor.com/gamerpad/gamerpad.html
01:30:38 <Marvin--> d-bug: heh!
01:38:45 <ddarius> demoncrat: Um, when would it stop?  It couldn't return the list until after executing each item.  Perhaps unsafeInterleaveIO . sequence . repeat
01:41:21 <demoncrat> on eof
01:42:47 <demoncrat> i wrote such a function, but it seems odd to have to write it all out when the standard library's supposed to have the kitchen sink, etc.
01:43:00 <demoncrat> hoped there was some more idiomatic way
01:44:42 <ddarius> map doSomething . chopUpSomeWay =<< readFile filename?
01:45:16 <demoncrat> ah, thanks
01:46:05 <ddarius> readFile isn't 100% safe though.
01:46:31 <demoncrat> treats errors like eof, or something?
01:46:36 <demoncrat> i'm afraid that's what my function does
01:48:18 <ddarius> No, if the file is changed or closed the the "string" readFile returns will be messed up/truncated.  I.e. readFile breaks referential transparency in those cases.
01:48:52 <ddarius> I think it also does treat (some?) errors like eof 
01:49:29 <jlouis> Having fun with the icfp contest yet?
01:49:45 <demoncrat> yup!
01:50:48 <demoncrat> too much talking so far, though
01:51:35 <norpan> ddarius: how can readFile break referential transparency if it is an IO action
01:52:02 <andersca> morning norp
01:52:08 <norpan> morning andersca
01:52:15 <norpan> how are things in sweden
01:52:24 <andersca> norpan: you don't know that yourself? :)
01:52:30 <andersca> or are you on your honeymoon?
01:52:34 <norpan> andersca: sure, but i want a second opinion :)
01:52:42 <andersca> norpan: things are nice
01:52:47 <andersca> norpan: just solved melodikrysset
01:53:08 <norpan> you little mygbög
01:53:20 <ddarius> It doesn't so much as the string it returns does.  Everytime you ask for another character an IO action is performed (well not likely with buffering) so you have IO actions happening in the pure code using the string.
01:53:40 <Marvin--> andersca: nämen
01:53:52 <norpan> ddarius: but can those IO actions do anything but return a character?
01:53:53 <andersca> Marvin--: what now
01:54:00 <Marvin--> andersca: *melodikrysset*!?
01:54:03 <andersca> yes
01:54:04 <jlouis> heheh, sounds fun
01:54:07 <Marvin--> sicko
01:54:09 <andersca> bah
01:54:13 <andersca> it's fun!
01:55:21 <norpan> ddarius: and once the character is returned, it will be the same always and forever, and therefor referentially transparent?
01:55:43 <ddarius> Norpan, yes they can return a -different- character or no character.
01:55:54 <norpan> ddarius: a different character from what?
01:56:26 <ddarius> the same file overwritten or rewritten
01:57:08 <norpan> but you can only compare this if you have run the readFile action twice, and runs of IO actions are of course not transparent
01:57:15 <ddarius> With readFile you have to be fairly obscene to cause the problem yourself.  With hGetContents (which is used to implement readFile) it's easier.
01:57:53 <norpan> ddarius: but that's not the same thing as referential transparency
01:58:51 <norpan> if I do x <- readFile f, then the string x is one, and only one string, it will not be different in different places
01:59:01 <ddarius> I readFile in a string.  Do something that forces half of it, write to the same file and finish forcing the other function.
01:59:13 <norpan> ddarius: yes?
01:59:27 <norpan> but then you run another IO action to write the file
02:00:00 <norpan> the string returned from readFile is still a pure string
02:00:36 <norpan> i agree that the results are not as expected but that has nothing to do with referential transparency
02:03:04 <norpan> referential transparency is only broken if you can use the same variable in two places and it will have different values
02:04:56 <Arnia> I thought that referential transparancy in a strict sense entailed a token identity between name and value. Most than consistancy of value, the name IS the value.
02:10:11 <norpan> Arnia: yes, exactly
02:10:57 <norpan> and I can break it by doing for instance unsafePerformIO
02:12:19 <Arnia> Yes... I thought that was well known
02:13:20 <norpan> It is known by me, but the issue in question was that ddarius used the term to describe the fact that the thing returned by readFile may be corrupted
03:51:05 <d33p> how would i go about printing a list of strings?
03:51:22 <ddarius> print listOfStrings
03:51:34 <vegai> =)
03:51:37 <d33p> oh
03:51:39 <d33p> :)
03:53:59 <d33p> ddarius: what i wanted was to print each string on a seperate line, i guess i'll just go append \n's to each element
03:56:10 <ddarius> you could go, putStrLn $ unlines listOfStrings
03:56:38 <ddarius> or you could go, mapM_ putStrLn listOfStrings
03:57:05 <d33p> ok
03:57:12 <vegai> what's the $-operator?
03:57:28 <ddarius> @prelude ($)
03:57:30 <lambdabot> *** "($)" prelude "Haskell Standard Prelude Dictionary": text follows
03:57:30 <lambdabot> ($)
03:57:30 <lambdabot>   infixr 0 $
03:57:30 <lambdabot>   ($) ::  (a -> b) -> a -> b
03:57:47 <ddarius> Guess, that isn't too helpful.  f $ x = f x
03:58:13 <ddarius> It's function application but it has low precedence and is right associative.
03:58:27 <vegai> ok
04:00:55 <d33p> is there no cons counterpart of adding an element to the end of the list?
04:01:48 <vegai> ++?
04:01:54 <ddarius> You -could- go, list ++ [element], but that would be inefficient.  There is no efficient way to stick an element to the end of a (normal) list.
04:02:15 <vegai> inefficient... because it builds a new list?
04:02:32 <d33p> ddarius: yeah, i guess thats reasonable
04:02:52 <ddarius> vegai: Yes.
04:03:07 <d33p> ddarius: arent lists implemented as linked lists?
04:03:45 <ddarius> d33p: Yes, that's the problem.
04:04:00 <d33p> ddarius: why is that the problem?
04:04:46 <ddarius> first, they are singly-linked lists, so you'd have to traverse the whole list to get to the end to add an element which would be inefficient, but that isn't the real problem.
04:05:10 <d33p> ddarius: oh, singly linked.. but why not just keep a pointer to the last element?
04:06:26 <d33p> i guess its a design decision that is probably beyond me.. but a pointer/list shouldnt be too much overhead
04:06:29 <ddarius> The real problem is let's say you have a list L = x -> y -> z -> nil  if you change z to be z -> w -> nil to get list L', then you have changed L to x -> y -> z -> w -> nil. I.e. you have mutated (changed) the value of L
04:07:07 <d33p> ah, we dont want side-effects
04:07:13 <ddarius> exactly
04:08:08 <d33p> fair enough
04:10:09 <d33p> thanks ddarius
04:14:38 <ddarius> One thing though, is that it's inefficient, but not excessively inefficient, for example, it's no less inefficient than it would be in C++ if you wanted to keep the old list.  It becomes (overly) inefficient when it is used like that in a loop.
04:15:47 <d33p> yeah, that would entail lots of gc activity
04:15:59 <d33p> excessive object creation/destruction
07:20:53 * shapr boings happily
07:20:58 <shapr> gooood morning #haskell!
07:21:31 <andersca> hey hey
07:25:31 <andersca> man
07:25:36 <andersca> X is very well-designed
07:25:52 <shapr> for some definition of X?
07:25:58 <andersca> X11
07:26:15 * shapr is joking
07:26:32 <wli> well
07:26:52 <andersca> shapr ;)
07:26:54 <shapr> hey wli 
07:56:58 * shapr levitates happily
08:27:51 <hdaume> anyone know where edison lives these days?
08:28:31 <shapr> Pseudonym is maintaining it, sort of
08:28:41 <shapr> as Haskell Foundation Libraries
08:28:50 <shapr> see hfl.sf.net I think
08:30:29 <cale> X is well designed for some purposes - there are things it could do better, I think.
08:30:34 <shapr> like what?
08:32:11 <cale> like if you're running stuff over a network, sometimes things can be unsuitable - it would be nice to have a mechanism to move certain threads to the server side. (that is, the display terminal)
08:32:21 <shapr> that's true
08:35:09 <cale> Also, over slow links this could be really useful if, say the various widgets that are going to show up all over your app got moved to the server (that is, all the code that draws them), since it's not much computation and it really helps responsiveness. Menus become hard to use with slower links sometimes.
08:36:09 <andersca> cale: the problem with network latency is that applications do stupid things
08:36:29 <cale> That's probably true.
08:40:10 <andersca> Moving GUI toolkits into the X-server. (This is a bad idea because: It enforces policy. It wins you little or nothing performance-related, not even on context-switch. It makes the X-server even more complex. Furthermore, it would slow down the development of the toolkits. Plus, X runs as root, which itself is bad enough for security without adding in all the complexity of the client toolkits.)
08:42:38 <cale> I don't mean that they should be permanently moved to the X server - I just mean that a client should be able to request that a bit of code (say the code that draws a particular kind of widget) get transferred to the server (at runtime). This code would typically run as the user that's logged in.
08:42:58 <shapr> NeXT had distributed objects
08:43:00 <cale> (Which hopefully isn't root)
08:43:11 <shapr> they could migrate
08:43:34 <cale> Yes, that's the sort of thing I'm talking about :)
08:44:34 <cale> It would actually be even cooler, now that I think about it, if they were smart, and could tell when migrating might be a smart thing to do on their own.
08:45:14 <cale> (though it seems that it would be really hard to get that)
08:45:41 <shapr> AOP promises to make that easier, but I don't really understand how.
08:45:54 <cale> hmm...
08:47:35 <cale> AOP seems pretty cool for some purposes, I'd be interested in learning more about it. I'd only read some of the stuff on it that Xerox parc had done.
09:56:38 * shapr boings
10:07:11 * cale turns into a blue pentagon, then bursts into flames, happily.
10:07:26 <shapr> nice graphics
10:07:45 <cale> heheh
10:07:49 * Riastradh dribbles unhappily across the floor.
10:07:55 * shapr boings cheerfully
10:07:58 <shapr> code is good
10:08:17 <Riastradh> No, most code is bad.
10:08:46 <Riastradh> There is definitely very little good C++ code.
10:10:48 <GnuVince> Scheme people are idiots
10:11:12 <shapr> all fanatics must die!
10:11:13 <shapr> @yow
10:11:14 <lambdabot> I've got to get these SNACK CAKES to NEWARK by DAWN!!
10:11:37 <Riastradh> GnuVince, uh, why is that?
10:11:48 <GnuVince> Riastradh: so I'm a Ruby spy, huh?
10:11:56 <shapr> ??
10:12:02 <Riastradh> GnuVince, I never claimed that -- vincenz claimed that.
10:12:15 <GnuVince> Riastradh: well, he's the idiot
10:12:30 * shapr hopes there's mostly humor in this discussion
10:12:33 <GnuVince> I am just following the development of two languages I rather like
10:12:50 <Smerdyakov> But.. isn't Ruby a bad language? :)
10:12:55 * shapr sighs
10:13:04 <GnuVince> Smerdyakov: no
10:13:05 <Riastradh> Are you actually on the Ruby team, or just an onlooker in #rubyicfp?
10:13:18 <shapr> judgemental comments on this channel must be limited to "haskell is the best language"
10:13:22 <GnuVince> Riastradh: I'm not participating in ICFP as part of any team
10:13:35 <GnuVince> I am just watching channels with people who DO participate
10:13:47 <GnuVince> shapr: :)
10:14:12 * Riastradh hrms, wonders how he can confirm that GnuVince isn't on the Ruby team.
10:14:43 <shapr> Riastradh: well if you're not comfortable with non-participatory onlookers, you could ask them to leave?
10:14:47 <GnuVince> Riastradh: http://www.rubygarden.org/ruby?ICFP03/TheRubyTeam
10:15:06 <GnuVince> you don't see GnuVince nor Vincent Foley-Bourgon in that page, do you?
10:15:22 <Riastradh> OK, good enough for me.
10:15:22 <shapr> hey, I'm on that page, who put my name there?
10:15:27 * Riastradh apologizes for kicking you.
10:15:39 <GnuVince> Riastradh: just ask me next time please
10:15:45 <Riastradh> OK.
10:15:56 <Smerdyakov> GnuVince, do you have a pointer to a page explaining briefly why someone would want to use Ruby?
10:16:09 <GnuVince> Smerdyakov: for ICFP?  Or in general?
10:17:34 <Smerdyakov> GnuVince, in general.
10:18:21 <vegai> it's made by the japanese!
10:18:37 <shapr> Python is made by the Dutch
10:18:44 <shapr> OCaml is made by the French
10:18:47 <GnuVince> Smerdyakov: I don't think I do (though you could search on comp.lang.ruby).  I guess people who want something like Python, with more shortcuts (or who don't like indentation), and wants something closer to Lisp that Python or Perl
10:18:48 <opet> vegai: so was kareoke
10:19:03 <GnuVince> Erlang is made by Dutch too
10:19:08 <vegai> erlang, swedes?
10:19:17 <GnuVince> Sweeden?
10:19:22 <andersca> erlang is swedish
10:19:22 <vegai> sweden
10:19:24 <GnuVince> Well, somewhere in Europe
10:19:26 <shapr> Right, swedish
10:19:32 <vegai> "somewhere in europe"
10:19:33 <andersca> shapr: svenskt!
10:19:36 <Smerdyakov> GnuVince, why would I want to use Python?
10:19:39 <Riastradh> Scheme was made by MITites.
10:19:46 <shapr> yah, the Netherlands are right next to Sweden.
10:19:55 <vegai> that's like "somewhere in US", ie. Utah
10:20:16 <GnuVince> Smerdyakov: the large number of libs, the constant improvements to the language, the large community, the free as in speech and beer?
10:20:27 <shapr> yah, Python and Ruby have similar benefits imho
10:20:29 <Smerdyakov> GnuVince, that sounds like Haskell so far. :-)
10:20:32 <vegai> Smerdyakov: same reasons that python has, basically
10:20:49 <vegai> Smerdyakov: python has more emphasis on clarity, while ruby has more on a fuller OO-design (imho)
10:20:51 <Smerdyakov> GnuVince, and OCaml
10:21:18 <shapr> python has significant whitespace, ruby uses END
10:21:24 <GnuVince> Smerdyakov: I don't know about Haskell, but I know that O'Caml doesn't have nearly as much support/libs as python does.
10:21:37 <shapr> python has single-line lambdas, ruby has multiple (iirc)
10:21:43 <GnuVince> shapr: yes.
10:21:46 <Smerdyakov> GnuVince, it has a C FFI. You can use existing C libraries with a minimal amount of work.
10:21:48 <shapr> truly, Python has a large number of available libs.
10:21:59 <shapr> hi cm
10:22:11 <cm> hi
10:22:14 <shapr> how's code?
10:23:32 <cm> okay. do i know you? :)
10:23:56 <shapr> I've spoken to you before here on #haskell
10:24:04 <shapr> at least, I think that's true.
10:24:20 <shapr> Hi, I'm Shae Erisson, I post on the haskell mailing lists and comp.lang.functional sometimse
10:24:30 <shapr> and I'm head cheerleader for the #haskell channel
10:25:00 <GnuVince> shapr: Erisson?  add a C and you are a multi-billion dollar company
10:25:44 <shapr> in UML you'd have a vertical arrow and eight arrows pointing to all directions of the compass
10:26:02 <Smerdyakov> shapr made up his last name!
10:26:28 <shapr> of course, everyone's name was made up at some point.
10:27:10 <Smerdyakov> You are banned from polite discourse for this infraction.
10:27:11 <cale> huh?
10:27:23 <cale> what?
10:27:42 <shapr> @yow
10:27:42 <lambdabot> If I am elected no one will ever have to do their laundry again!
10:27:59 <shapr> huh, dirty politics
10:28:05 <cale> lambdabot: Am I elected yet?
10:28:06 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
10:28:37 <cale> @yow
10:28:37 <lambdabot> MY income is ALL disposable!
10:28:51 <cale> @yow
10:28:51 <lambdabot> YOW!!  Up ahead!  It's a DONUT HUT!!
10:28:57 <shapr> @fortune
10:28:57 <lambdabot> Yes me, I got a bottle in front of me.
10:28:57 <lambdabot> And Jimmy has a frontal lobotomy.
10:28:57 <lambdabot> Just different ways to kill the pain the same.
10:28:57 <lambdabot> But I'd rather have a bottle in front of me,
10:28:57 <lambdabot> Than to have to have a frontal lobotomy.
10:28:58 <lambdabot> I might be drunk but at least I'm not insane.
10:29:00 <lambdabot> 		-- Randy Ansley M.D. (Dr. Rock)
10:29:13 <shapr> cm: do I know you?
10:31:07 <cm> shapr: not sure - Michael Walter, fascinated (not only) by functional programming 'n' stuff ;)
10:31:16 <shapr> nice to meet you.
10:31:32 <shapr> local sights worth seeing are lambdabot sources
10:31:35 <shapr> @fact source
10:31:36 <lambdabot> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
10:31:45 <shapr> the HaWiki, http://www.haskell.org/hawiki/
10:32:54 <cm> thanks
10:33:14 <shapr> oh, and if you don't already know Haskell, http://www.haskell.org/learning.html
10:33:26 <shapr> are you looking for anything in particular?
10:33:44 <cm> know way too few of it :) enough to understand some monads paper, that's how i got into it
10:34:03 <vegai> really understand?
10:34:04 <shapr> monads are fascinating, I agree.
10:34:15 <vegai> that's not a little, imho
10:37:17 <cm> done quite a bit of scheme before - Riastradh is a good teacher :)
10:37:26 <cm> whether i really got monads, only praxis will prove tho, i guess ;)
10:37:56 <shapr> praxis == practice? real use?
10:38:48 * Igloo bounces
10:38:54 <shapr> Igloo: what?
10:39:01 <Igloo> Having fun  :-)
10:39:05 <Igloo> What do you think of the problem, shapr?
10:39:06 <shapr> oh, me too!
10:39:33 <shapr> it's okay
10:39:39 <shapr> it's easier than last year
10:40:02 <Igloo> Really?
10:40:05 <shapr> I think so
10:40:10 <shapr> maybe I've just learned a lot in the last year :-)
10:40:12 <jlouis> Are you working on it?
10:40:21 <cm> shapr: yeah practice, sorry
10:40:26 <cm> germanized ;)
10:40:34 <shapr> ich habe keine ahnung!
10:40:37 <Igloo> I think last year it was easy to do a reasonable implementation but a lot depended on the other bots and your luck
10:40:48 <shapr> I enjoyed that though
10:40:57 <shapr> the dependence on interaction with other bots
10:41:35 <shapr> a deterministic problem is probably better for a contest though
10:45:51 <cm> hmm, at least it sounds as if it was more of a real-world problem :)
10:45:54 <vegai> I don't think you can know them before using them
10:46:03 <vegai> applies for almost anything =)
10:47:53 <esap> Hmm.. where does CVS put its lock files?
11:06:45 <shapr> maybe in the CVSROOT dir?
11:06:57 <Heffalump> no, in the same dir as the ,v file
11:07:00 <shapr> oh
11:07:19 <Heffalump> I think this problem is _much_ harder than last year's.
11:07:23 <shapr> really?
11:07:25 <shapr> hm
11:08:00 * shapr sighs
11:08:26 <shapr> after meeting some of the refugees here, I can understand why there's the occasional xenophobic swede.
11:15:32 <jlouis> Last year you could do a dumb robot in very short time. This year it seems you will need an infrastructure first
11:15:42 <jlouis> and damn, I havent got time for it ;(
12:04:40 <shapr> oy
12:05:02 <cale> ey
12:05:10 <shapr> wassup?
12:07:53 <Igloo> This is so not the time to be finding GHC bugs
12:07:58 * shapr grins
12:08:46 <cale> not much - messing around with ardour, a multitrack mixing tool to see if I can figure it out.
12:09:07 <shapr> speaking of musical programming, have you tried Haskore?
12:09:19 <Igloo> Hurrah, ghc 5.04.3 works
12:09:29 <Marvin--> shapr: refugees? xenophobic Swedes? What are you talking about?
12:11:04 <Heffalump> what bug?
12:11:15 <Igloo> More segfaults
12:11:25 <Heffalump> :(
12:11:51 <shapr> Marvin--: just some irritating person who continues to be interested in my sambo when she says, go away, I have a fiancee
12:12:06 <Marvin--> shapr: guh
12:14:56 <cale> I haven't actually tried haskore yet, but it sure looked interesting.
12:15:52 <cale> Actually, I was originally referred to Haskell because of Haskore, as I was looking into other possible music formalisms.
12:29:28 <shapr> hi Darius
12:29:42 <ddarius> hi
12:29:57 <shapr> Haskore is nifty, especially for playing with canons
12:31:26 <vegai> formalism and music combined... whew
12:31:38 <vegai> although I've read Hofstadter, that will always sound wrong
12:39:40 <ddarius> shapr: you keep read c.l.scheme or c.l.lisp?
12:39:46 <shapr> nope
12:39:51 <shapr> something cool happening there?
12:40:51 <ddarius> Not really, but I believe it was on one of them that someone mentioned a book "Concepts, Techniques, and Models of Computer Programming" that's available online (for now) that's pretty interesting.
12:43:28 <shapr> the one that's about to be published?
12:43:32 <shapr> Salminen or so?
12:43:33 <shapr> Hari?
12:43:48 <ddarius> That sounds about right.
12:44:00 <shapr> I've downloaded it, but haven't checked it out yet.
12:44:16 <shapr> oh, I've started reading the 37 chapters of the FYM(?) math book, many thanks for that link
12:44:27 <vegai> if that's a Finnish person, it's probably Harri
12:44:32 <vegai> the surname sounds finnish
12:44:59 <shapr> vegai: my last boss was named Harri Salminen, and one of the authors of that book has a similar name
12:45:04 <shapr> sadly, I'm suffering from verbal shadowing
12:45:27 <ddarius> http://www.info.ucl.ac.be/~pvr/ is the link Haridi is the last name of one of the authors (the other being Roy)
12:45:32 <shapr> aha
12:46:36 <vegai> =)
12:47:03 <shapr> ddarius: how's it hanging? (the modem ;-)
12:48:01 <ddarius> The modems fine, it's the phoneline that's broken.
12:48:09 <shapr> oh
13:10:13 <shapr> hi Marvin-- 
13:10:27 <Marvin--> bleedin' connection
13:16:04 * shapr changes ddarius' nick to Darius when he's not looking
13:16:14 <shapr> ddarius: do you read lambda.weblogs.com ?
13:16:35 <shapr> ddarius: oh, and the ll1.. lightweight languages mailing lists?
13:17:40 <ddarius> For the first, not really, I'm aware of it but don't actually follow it, the second I haven't heard of.
13:18:51 <shapr> ddarius: already on an ICFP team?
13:19:45 <ddarius> no
13:21:47 <shapr> ddarius: written any interesting code lately?
13:22:19 <shapr> the ll1 list is the lightweight languages conference at mit.edu
13:23:09 <shapr> hi hal
13:23:13 <hdaume> hey shae
13:23:17 <shapr> what's up?
13:23:25 <hdaume> i've got a q about the ICFP specs :)
13:23:34 <stefp> ll1 is very interesting but often over my head
13:23:34 <shapr> go for it
13:24:10 <ddarius> shapr: not really, been reading mostly though I do want to see if I can adapt the TypedLVars to concurrent dataflow variables.
13:24:14 <hdaume> it says "if (turn left) d -= T / (v*v + L)"...shouldn't that be +=?
13:24:29 <shapr> hdaume: have you checked the web-form?
13:24:41 <hdaume> shapr: yeah, i didn't see anything about it...
13:25:55 <ddarius> is turn right -= as well ? If so, then it is probably a typo, I'd imagine you'd check your simulator against the data they have and that'd decide it.
13:25:56 <shapr> that does look sensible to me
13:26:08 <hdaume> ddarius: no, turn right it +=
13:26:12 <hdaume> s/it/is
13:26:12 <shapr> hdaume: no, I think it is right
13:26:19 <hdaume> shapr: how?
13:26:31 <shapr> because straight up is zero pi, right?
13:26:42 <ddarius> ->
13:26:43 <shapr> and straight right is quarter pi, right?
13:26:53 <shapr> er, half pi
13:26:58 <hdaume> in my world, -> = 0, ^ = pi/2, <- = pi, v = -pi/2
13:27:12 <hdaume> turning left should increase your angle...
13:27:21 <shapr> for some reason I thought the angle increased clockwise
13:27:28 <hdaume> that's crazy talk!
13:27:34 * shapr shrugs
13:27:40 <shapr> hey, you speak in maths, not me :-)
13:27:44 * hdaume shrugs
13:27:49 <hdaume> ...must be some crazy european thing
13:27:54 <shapr> ask 'em on the form?
13:27:58 <hdaume> like "the metric system" or something
13:28:42 <hdaume> ...but that doesn't even make sense
13:29:00 <hdaume> because the position update gives:  x += v * cos(angle)
13:29:30 <hdaume> and y += v * sin(angle)
13:42:14 <Heffalump> hdaume: the map points downwards
13:42:30 <hdaume> Heffalump: i just noticed that :)
13:42:37 <hdaume> really screws with my brain :)
14:51:50 * Igloo finds YA GHC bug. Eventually. *sigh*.
14:54:08 <shapr> hi Arnia 
14:54:22 <Arnia> Heya
14:54:31 <shapr> what's up?
14:55:14 <Arnia> Writing lots of content for netalley networks
16:16:24 <Igloo> Wooo, simple driver works(ish)! http://urchin.earth.li/~ian/1x.png  :-)
16:17:08 <hdaume> Igloo: :) how many intervals?
16:17:18 <Igloo> billions
16:17:20 <hdaume> :)
16:17:26 * hdaume is at ~80k right now :)
16:17:41 <Igloo> Are you trying to submit to the lightning round?
16:17:45 <hdaume> but i know someone has <10k, so 80k sucks
16:17:49 <hdaume> Igloo: probably not
16:17:53 <Igloo> That's 64k
16:19:27 * Igloo doesn't have the time to both make the simple driver reasonable and actually run it on the tracks, mainly due to GHC being broken, which is annoying
16:19:53 <hdaume> that uskc
16:22:10 * Igloo giggles as it spends 18k steps going round in circles on map 2 as it needs to actually hit the finish line
16:22:25 <hdaume> :)
16:26:41 <Igloo> Bah, simple driver sucks on anything with straights because it needs to take the whole thing at cornering speed
16:48:23 <shapr> Igloo: are the ghc6 debs built with --enable-threaded-runtime ?
16:48:30 <shapr> oh, they couldn't have been, never mind
16:48:47 <shapr> because hopengl won't work with threaded runtime
16:49:16 <Igloo> They weren't explicitly, anyway
16:49:36 <shapr> iirc, it's off by default
16:56:34 <Igloo> How's it going?
16:59:55 * Igloo gets something submitted with seconds to spare
17:00:00 <shapr> yay
17:02:20 * shapr boings
17:02:37 <Igloo> Pity it's a pile of crap  :-)
17:03:03 * shapr grins
17:03:54 <Igloo> You can see where it spent 18k steps at the end on http://urchin.earth.li/~ian/2x.png  :-)
17:04:10 <shapr> heh
17:16:28 <plonkaz> http://zolo.freelsd.net/~sts/ICFP03/
17:16:39 <plonkaz> if you have ICFP cool link to gave me 
17:16:46 <plonkaz> i will add it on the website
17:17:07 * shapr has dyslinksia
17:17:13 <shapr> bonjour plonkaz 
17:17:18 <shapr> ca va?
17:17:24 * Riastradh exploofs.
17:17:33 * shapr protopuffs
17:17:51 * shapr bounces impetuously
17:18:10 <plonkaz> dsl 
17:18:12 <plonkaz> oui ca va et toi ?
17:18:34 <plonkaz> yes im fine 
17:18:35 <plonkaz> and you ?
17:18:36 <plonkaz> :)
17:18:40 <shapr> bien :-)
17:18:57 <plonkaz> kewl 
17:19:06 <plonkaz> hacking at xtrem ?
17:19:13 <shapr> xtrem hacking
17:19:16 <shapr> xtrem speeds
17:19:26 <plonkaz> you use VB6.0 ? :)
17:19:28 <shapr> je suis trop chouette!
17:19:29 <shapr> eww
17:19:43 <plonkaz> hardcore coderz
17:19:44 <plonkaz> :)
17:19:48 * shapr laughs
17:20:04 <shapr> I'm working on a haskell solution with my teammates
17:20:07 <shapr> are you working on a solution?
17:20:25 <h> yeah
17:20:26 <h> well 
17:20:34 <h> my team mates are working on a solution
17:20:39 <h> i just eat pizza 
17:20:42 <h> code html
17:20:45 <h> listen ragga 
17:20:56 <h> and try to setup this knoppix on this fscking laptop
17:21:05 <shapr> heh
17:21:28 <h> and i try to consolate some other friend that are trying to do it in C
17:21:29 <h> :)
17:21:36 * shapr laughs
17:21:38 <shapr> poor friend
17:22:01 <h> brb coffe and cigs
17:22:06 <shapr> our parser is 29 lines
17:25:40 <Igloo> I was about to say at least C compilers don't produce incorrect code, but then I remembered gcc 3.x
17:25:55 * shapr snickers
17:26:28 <Igloo> My parser is 19 lines
17:26:47 <Igloo> Oh, plus 8 for the definition of the Command datatype
17:26:55 <Igloo> Assuming you mean parser for the a.l.b. stuff
17:28:16 <h> with caml lex 
17:28:18 <h> we have 
17:28:24 <h> wait lets wc -l the file 
17:29:41 <Igloo> lex? Overkill, methinks  :-)
17:29:41 <h> 28 lines
17:29:54 <h> this is the parser for tracks
17:30:05 <Igloo> Ah, right
17:30:15 <shapr> we started with a parsec parser for tracks, but it's much slower
17:30:37 <Igloo> Hmmm, well I guess my parser for the tracks is a single line, but finding the start and finish points are done elsewhere
17:30:41 * shapr shushes himself
17:31:03 <h> if we remove empty line
17:31:11 <h> we fall to 20 lines
17:31:52 <shapr> hdaume: I see your new email address ;-)
17:31:52 <Igloo> But mine is a bit sub-optimal really  :-)
17:35:35 <h> ok 
17:35:40 <h> we reduced 
17:35:48 <h> parser for tracks is 18 lines now :)
17:37:29 * h listens board of canada
17:37:37 * shapr lists 2manydjs
17:37:40 <shapr> listens
17:38:07 <shapr> their Dolly Parton and Röyskopp mix is great
17:38:25 <shapr> though the Stooges and Salt'n'Pepa is the best
17:40:02 <h> :)
17:40:14 <h> now im listening killamanjaro live at paris 
17:40:28 <shapr> h: hey, would you like to learn Haskell?
17:40:33 <shapr> I can direct you to some nice tutorials
17:42:37 <h> if you want some royskopp
17:42:42 <h> there is twqo album today 
17:42:46 <h> that were released
17:42:59 <shapr> I'm saving up for new hardware at the moment
17:43:04 <shapr> every euro counts...
17:43:39 <h> sparks cds1 and sparks cds2
17:44:24 <h> shapr gimme url for haskell tut
17:45:03 <shapr> http://www.haskell.org/learning.html
17:45:06 <shapr> lots of links there
17:45:32 <shapr> hi o3 
17:47:21 <h> thx
17:49:05 * shapr boings
17:49:17 <clausen> gday
17:49:21 <shapr> hi clausen 
17:50:07 <clausen> what is a combinator?
17:50:32 <shapr> http://www.haskell.org/hawiki/Combinator
17:51:21 <clausen> thanks
17:52:57 <clausen> it's very minimalist...
17:53:01 * clausen looks on the wikipedia
17:54:11 <clausen> http://www.wikipedia.org/wiki/Combinator
17:54:14 <clausen> ^^ better
18:03:51 <h> :)
18:04:06 * Igloo bounces
18:04:14 <clausen> BTW, is there any reason to have an hawiki?
18:04:22 <clausen> why not write for wikipedia instead?
18:04:22 <shapr> sure
18:04:43 <clausen> I guess hawiki is more appropriate for experimental stuff
18:04:52 <clausen> wikipedia is for (verified) "knowledge"
18:04:54 <shapr> and for Haskell specific stuff
18:04:56 <shapr> yah, I think so
18:05:32 <clausen> what's an example of haskell specific stuff that wouldn't be approriate for the wikipedia?
18:06:15 <shapr> comonads stuff maybe
18:06:22 <shapr> since several people aren't convinced it really works
18:06:42 <clausen> that sounds like the reason is that it isn't verified knowledge
18:06:51 <shapr> also, the HaWiki is more directed towards people who want to write Haskell programs
18:09:34 <Heffalump> the hawiki also belongs on the haskell.org site
18:09:43 <Heffalump> I have no idea what wikipedia is and have no particular wish to use it ;-)
18:09:52 <shapr> wikipedia is wonderful
18:09:56 <shapr> truly wonderful
18:10:13 <Igloo> :-)
18:10:15 <shapr> I've contributed random stuff I knew that wasn't there
18:10:31 <shapr> and persuaded several of my local friends to do the same
18:10:36 <clausen> Heffalump: wikipedia is a free encyclopedia project
18:10:46 <clausen> Heffalump: it is probably more useful to have a single big project
18:10:51 <clausen> Heffalump: than lots of small specialized projects
18:11:05 <clausen> Heffalump: because it becomes better linked
18:11:11 <shapr> for example, I learned about the Entscheidungssproblem on wikipedia
18:11:25 <Heffalump> but I prefer a nice small specialised "community" wiki
18:11:32 <Heffalump> if you want better links, inter-wiki links are the way to go
18:12:00 <clausen> Heffalump: why not have a "haskell community" on the wikipedia?
18:12:21 <clausen> I think inter-wiki links create lots of practical problems
18:12:39 <clausen> (if you have clear separation between communities, then you feel bad about editing other people's work, etc.)
18:12:51 <Heffalump> but I don't want non-Haskellers editing Haskell-ish stuff
18:12:52 <clausen> also, most people have expertise in many different fields
18:12:58 <clausen> Heffalump: why?
18:13:09 <Heffalump> it's unlikely to be helpful
18:13:11 <clausen> Heffalump: it doesn't seem to cause any problems on wikipedia
18:13:20 <clausen> Heffalump: they might be able to write more succintly than you
18:13:31 <clausen> Heffalump: or they might find what you wrote confusing, and write it more clearly
18:13:32 <Heffalump> but they wouldn't understand what they were writing about...
18:13:45 <clausen> if that's the case, you can revert the changes
18:13:53 <Heffalump> only if someone noticed
18:13:54 <clausen> in practice, there haven't been any such problems on wikipedia
18:14:00 <shapr> right, same for the original wiki
18:14:02 <clausen> Heffalump: you can add pages you wrote to a watchlist
18:14:15 <clausen> s/a/your/
18:14:46 <Heffalump> the fundamental issue is that the haskell.org wiki is "our" wiki and wikipedia isn't.
18:14:55 <Heffalump> if we want to improve the software on it we can
18:15:03 <shapr> that's true
18:15:03 <Heffalump> if we want to add Haskell-specific extensions to the markup language we can
18:15:18 <shapr> though ownership on a wiki doesn't really happen
18:15:20 <clausen> sure, there are benefits to being separate
18:15:29 <Heffalump> it's a Haskell resource, not a Haskell part of some big huge project that I don't particularly care about anyway
18:15:33 <clausen> just, I think being part of a bigger community is worth the sacrifice
18:15:46 <Heffalump> (all this is of course speaking for myself, and I've hardly contributed to the wiki anyway :-)
18:15:58 <shapr> clausen: do you know of any other wikipedia communities?
18:16:32 <shapr> the sun is high in the cloudy sky at 3am
18:16:39 <shapr> wheee
18:16:50 <clausen> shapr: not big/healthy ones (not that I've looked)
18:17:06 <shapr> I'll look around when I have time
18:17:16 <clausen> Heffalump: I've found the wikipedia extremely useful in my studies
18:17:42 <clausen> (it's pure maths articles is very very good)
18:17:45 <clausen> s/is/are/
18:18:08 <clausen> and from the above example, it's haskell articles are already better than hawiki's
18:18:10 <shapr> I enjoyed the lamba calculus and decidability pages, and how well they're connected
18:18:29 <shapr> clausen: well, we started the FundamentalConcepts pages three weeks ago or so
18:18:37 <clausen> (although I doubt that's universally true!)
18:18:47 <shapr> so we're filling in rough sketches first
18:19:27 <shapr> clausen: next project, add a scripting language to wikipedia that's designed for teaching :-)
18:19:38 <shapr> have you read The Diamond Age by Neal Stephenson?
18:19:44 <clausen> no
18:19:50 <shapr> wikipedia is the closest thing to a Young Lady's Primer
18:20:02 <clausen> Young Lady's Primer?
18:20:07 <shapr> you have to read the book
18:20:09 <shapr> it's worth it
18:20:21 <shapr> so is Snow Crash imho
18:21:06 <shapr> clausen: btw, I'm very interested in wikipedia/irc/? 'net based teaching/learning stuff, so if you think of anything else, I want to know about it 
18:21:09 <Rafterman> and also Cryptonomicon
18:21:43 <shapr> Stephenson has written many spiffy books.
18:22:05 <Igloo> I'm liking GEB lots. Ender's Game was good too.
18:22:16 <shapr> Igloo: oh you're already reading them! yay!
18:22:18 * shapr bounces happily
18:22:40 <Igloo> Have the new editions of GEB changed much incidentally?
18:22:57 <shapr> Igloo: so, you see how the RTS units are like Ender's independent forces?
18:23:02 <shapr> I don't know
18:23:27 <Igloo> Heh, I guess so - but with a bit of intelligence too  :-)
18:24:14 <shapr> most of the Battle Room armies required a leader at all times, Ender's didn't. That's the great advantage I see in the RTS game.
18:26:37 <clausen> Igloo: I don't think so
18:27:06 <clausen> I lent it to a friend of mine about 10 years ago, and still haven't got it back
18:27:12 * clausen should get it off her
18:27:16 <clausen> (still friends :)
18:28:30 <Igloo> Cool
18:30:34 <clausen> hmmm, would have been 5 years ago
18:30:41 <clausen> it was the anniversary edition
18:30:50 <clausen> so that would have been 1998?
18:31:23 <Igloo> That sounds like the one that's gone missing from the library here
18:33:04 <opet> my copy is the 20th anniversary edition from 2000
18:34:00 <clausen> hmmm, maybe that is different then
18:34:05 <clausen> mine is certainly earlier than that
18:34:23 <clausen> (wasn't it first published in 1978?)
18:35:30 <opet> maybe in the US.. in the front of this copy it says "First published in Great Britain ... 1979"
18:36:26 * clausen is in .au
19:18:39 <cm> re
19:19:41 <cm> shapr: i'm at half of The Diamond Age i think - love it so far. should really continue, though, it's been a while since i last read in it :/
19:19:54 <demoncrat> g'day
19:20:04 <clausen> gday
19:35:12 <shapr> g'day
19:35:37 <shapr> I read Diamond Age in two days, I think
20:23:42 <shapr> hey Igloo, ghc6 deinstallation doesn't update /etc/alternatives/ghc to point to ghc5 if installed
20:24:15 <shapr> though 'update-alternatives --auto ghc' as root does fix it
20:25:54 * shapr bounces happily
20:30:45 <cm> shapr: are you a native english speaker?
20:30:55 <shapr> yes
20:30:59 <cm> that explains stuff :)
20:31:05 <shapr> what does it explain?
20:31:37 <shapr> why I'm so silly? ;-)
20:31:37 <cm> that you read Diamond Age in 2 days ;)
20:31:41 <cm> haha :)
20:32:23 <shapr> it takes me much longer to read anything in swedish or french
20:33:06 <clausen> I've only read one book in a foreign language
20:33:08 <clausen> get ready:
20:33:13 <clausen> "Rich Dad Poor Dad"
20:33:14 <clausen> *grin*
20:33:15 <shapr> focault's pendulum?
20:33:16 <clausen> (in portuguese)
20:33:20 <shapr> oh
20:33:37 <Smerdyakov> Hm. Foucault's Pendulum would probably be even better in Italics.
20:34:01 <wli> il pendulo foucaulto
20:34:16 <shapr> I'd like to try reading whatshisname in Italian. the Focault's Pendulum guy
20:34:19 <Smerdyakov> wli, thank You for that Information.
20:34:22 <Smerdyakov> shapr, Eco
20:34:23 <shapr> Uma Thurman? ;-)
20:34:28 <shapr> oh, Umberto Eco 
20:34:30 <wli> umberto eco
20:34:47 <wli> Also wrote the name of the rose
20:34:51 <shapr> wli: have you read it in italian?
20:34:54 <Smerdyakov> I think my most recent good author discovery is Ralph Ellison.
20:35:03 <wli> nope
20:35:07 <Smerdyakov> Invisible Man is very good.
20:35:17 <shapr> I've been slowly reading some swedish sci-fi 
20:35:26 * Smerdyakov drops sci-fi in the DUMPSTA.
20:36:14 * cm codes a q3 level renderer atm for school.
20:36:24 <Smerdyakov> "ATM"?
20:36:28 <shapr> at the moment
20:36:40 <Smerdyakov> Oh. I thought it was part of the name of what he is coding..
20:37:03 <cm> :)
21:01:14 <cale> Heh, it would be funny if he was coding a q3 level renderer for an automatic teller machine.
21:01:35 <shapr> would be a cool way to enter your PIN number
21:02:30 <cale> heh, yeah, "Enter the correct slipgates to get your money"
21:02:35 * shapr grins
21:02:43 <shapr> step in the wrong place and *splat*
21:02:55 <cale> hahaha
21:20:36 * shapr boings
