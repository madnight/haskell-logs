04:10:13 <duffy> hi :)
04:17:50 <duffy> ehrm, could someone please explain what a catamorphism is?
04:18:14 <Heffalump> something like foldr
04:18:25 <Igloo> It means something like changing lots of things into one thing IIRC
04:19:46 <duffy> yes, i found something about that... i need something more concrete ;)
04:21:03 <duffy> all I found on the web is for dan 7 functional prgrammers, or just bla, bla...
04:21:17 <Heffalump> given an inductive datatype
04:21:25 <Heffalump> for example data List a = Nil | Cons a (List a)
04:21:40 <Heffalump> or data Tree a = Leaf a | Node (Tree a) (Tree a)
04:22:06 <duffy> ok
04:22:16 <Heffalump> for each such datatype, there is an associated catamorphism, which systematically replaces the constructors with a function
04:22:27 <Heffalump> so for example foldr cons nil (Nil) = nil
04:22:41 <Heffalump> foldr cons nil (Cons a as) = cons a (foldr cons nil as)
04:22:56 <Heffalump> and foldtree leaf node (Leaf a) = leaf a
04:23:17 <duffy> aaaah. ok.
04:23:18 <Heffalump> foldtree leaf node (Node t1 t2) = node (foldtree leaf node t1) (foldtree leaf node t2)
04:24:52 <duffy> so it is all about replacing constructors with functions?
04:25:06 <duffy> or a function?
04:25:18 <Heffalump> one function per constructor
04:26:40 <duffy> thanks a lot!
04:27:57 <Dark-Star> hey duffy, trying to solve the current FP assignment? ;-)
04:28:33 <duffy> Dark-Star: yes ;)
04:30:28 <duffy> so i have to go (BBQ)
04:30:40 <duffy> thanks again and bye
06:54:30 <Vincenz> Hi
08:17:38 * andersca wablams
10:39:19 <cale> Is there a way to get ghc to just do syntactic analysis and quit?
10:40:13 <Heffalump> not even type checking?
10:40:24 <Heffalump> (naifaik, in any case)
10:40:35 <cale> No, I just want to see whether it would be worth trying to compile something very quickly.
10:40:55 <cale> As in, as a user is typing a file.
10:41:37 <Heffalump> I'd have thought you'd be better off taking some front-end and then integrating it with your editor properly, then
10:42:26 <cale> Okay, perhaps - I'm just playing around with ideas, here.
10:45:10 <cale> My basic concern with ripping parts of say, ghc out and putting them into an editor, is that ghc changes quite frequently.
10:45:53 <Heffalump> hmm, true
10:46:08 <Heffalump> I guess it depends on whether you want Haskell 98 parsing or "whatever GHC currently supports"
10:48:38 <cale> As I'd probably use the thing in the end to actually code Haskell, having support for whatever compiler I'm using (which is right now, almost exclusively ghc) would be nice. It would be even nicer if ghc could act as a library to compile code for other programs to extend themselves with.
10:49:49 <cale> I'd probably have enough desire to try to do this and submit patches to the ghc source tree if I knew where to begin. :)
10:49:59 <Heffalump> talk to Igloo, he might be able to help
10:51:40 <cale> Cool. Yeah - I can think of lots of places where Haskell would make an excellent builtin scripting language.
10:52:09 <Smerdyakov> Yeah, like Siberia!
10:52:29 <Heffalump> :-)
10:52:38 <Heffalump> integrating hugs might be more useful for building in scripting
10:52:48 <cale> Smerdyakov: yes, Siberia in particular could really use Haskell.
10:53:03 <Heffalump> cos otherwise you have to wait for it to compile each time you change the script, and it's probably much harder work integrating object code
10:53:20 <Heffalump> and hugs already has the machinery in place to be embedded in things
10:53:34 <cale> But you also lose the ability to make definitions?
10:54:06 <Heffalump> well, you can't make definitions interactively with hugs, but you can change a file and tell it to reread it
10:54:17 <Heffalump> actually, thinking about it ghci probably can be embedded in a similar way
10:54:26 <cale> Yeah, that was the idea.
10:54:38 <cale> (I had when I asked my original question)
10:55:02 * Heffalump keeps forgetting that exists :-)
10:55:38 <cale> I thought it would be really cool for a haskell ide to have a couple of windows, one for definitions, etc. and the other to have a read-eval-print loop.
10:56:18 <cale> And hopefully, no need to hit a button to compile the source :)
10:56:36 <cale> (though I suppose that wouldn't be so bad)
10:58:33 <cale> So if you could just syntax check as quickly as possible, whenever the user idles for a second or so, say, then you could tell whether it would be worth compiling the changes for them to debug using the read-eval-print loop window.
10:58:52 <Heffalump> true
11:26:31 <Igloo> I suspect that for scripting you probably want hugs as it is quicker to run tiny things
11:26:50 <Igloo> Although ideally you'd obviously want the option
11:43:24 <cale> Igloo: what do you think of the idea of GHC acting as a dynamically linked library so that other programs could pass it source and get back pointers to the pre-loaded results of compilation (closures, etc.)? Perhaps a Haskell library or extension could make binding such pointers back to (something similar to?) their original Haskell types easy.
11:45:46 <cale> or is such a thing currently doable?
11:45:49 <Igloo> I imagine it wouldn't be hard to rewrite ghci as a library and tiny frontend
11:46:21 <Igloo> With datatypes it would get trickier
11:47:41 <Heffalump> type safety of dynamic loading is always hard to guarantee
11:48:19 * Igloo doesn't know it well enough to be sure how hard it will be, but things like getting GC to work if you want laziness might be tricky
11:52:24 <Igloo> If ghci can do anything with foreign exports it might be easy
11:54:56 <cale> hmm..
12:05:35 <cale> That seems to the the only area (foreign exports) in which ghci is currently lacking.
15:52:52 <stepcut> what is the notation used to describe things like the Hindley-Milner type system?
15:53:07 <stepcut> I have no idea what A |- F : t' is supposed to mean
15:53:29 <stepcut> A |- EF : t
15:54:04 <jlouis> Operational semantics probaly
15:54:40 <jlouis> A     B
15:54:41 <jlouis> -------------
15:54:47 <jlouis> A /\ B
15:54:52 <jlouis> and stuff like that
15:54:55 <Smerdyakov> A is a set of type assignments to variables.
15:54:57 <Smerdyakov> F is a term.
15:55:00 <Smerdyakov> And t' is a type.
15:55:05 <Smerdyakov> It means that, given the types in A, F has type t'.
15:55:15 <stepcut> I realized, its pointless to read papers about Hindley-Milner, if I don't even know the greek alphabet :)
15:56:12 <stepcut> Smerdyakov: so, what keywords do I want to search for if I hope to be able to read that stuff?
15:56:16 <Darius> Symbols are symbols.
15:56:55 <Smerdyakov> stepcut, just get a book on programming language semantics.
15:57:17 <stepcut> ok
16:01:57 <Darius> Just read A |- f : t as 'given all the things have those types then f has type t' The turnstile is just short for the implication of the conjunction (and) of all things in A.
16:03:14 <Darius> E.g. say {f : A -> B, x : A} |- f x : B would be read as if f has type A -> b and x has type a then f applied to x has type B
16:03:41 <Smerdyakov> Nuh uh! x has type A! :D
16:05:59 <stepcut> maybe someone at work has a good book on thi-
16:06:00 <stepcut> this
16:10:48 <stepcut> hrm, I work right next to UCSD, maybe I can sneak into a CS class
16:11:02 <stepcut> :p
19:32:17 <flippo> @yow
19:32:19 <lambdabot> Were these parsnips CORRECTLY MARINATED in TACO SAUCE?
20:36:29 <cale> @yow
20:36:29 <lambdabot> - if it GLISTENS, gobble it!!
22:35:17 <cale> @prelude guard
22:35:19 <lambdabot> *** "guard" prelude "Haskell Standard Prelude Dictionary": text follows
22:35:19 <lambdabot> guard
22:35:19 <lambdabot>   guard ::  MonadPlus m => Bool -> m ()
22:35:19 <lambdabot>   guard p           = if p then return () else mzero
