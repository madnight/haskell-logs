00:41:15 <Marvin--> "Senior Research Associate" well I damn well don't fulfill that criterion
00:51:55 <Chilli> people with less experience might be considered if there are no suitable applicants at the sought for level
00:51:58 <Chilli> :-)
00:52:37 <Marvin--> how about people with no experience whatsoever aside from a degree project that isn't finished? ;)
04:06:03 <Marvin--> damn I tempt myself
04:19:23 <mgoetze> Marvin--: how?
04:19:44 <xkb> Hi.. does anyone here know some online papers/introductions to cpo's in a sematics context?
04:20:44 <Marvin--> mgoetze: I've got a box of strawberries on my desk...
04:23:35 <mgoetze> waiting for them to become redder? :)
04:24:27 <Marvin--> no, I was planning on having them for breakfast tomorrow
04:24:31 <Marvin--> but...
04:24:33 <Marvin--> you know...
04:26:34 <ddarius> xkb: there are some online (introductory) books (and papers) on semantics, I don't know of any papers that focus specifically on cpos.
04:28:35 <xkb> ddarius : I just googled for them.. some of them seem quite clear at first sight
04:30:17 <ddarius> From what I've read about them, the idea seems pretty straightforward
04:30:39 <Marvin--> cpo?
04:30:51 <xkb> Im trying to relate the idea to the "fixed point" in lambda calculus
04:32:50 <xkb> Complete partial order(ings)
04:33:06 <Marvin--> ah
05:19:45 <xkb> Hmm.. "less defined" and contains "less information". Could somone give an example of this? (In the context of cpo's)
05:24:29 <ddarius> Whee, I just made example functions to illustrate some of the ideas.
05:25:08 <ddarius> First off, _|_ is the "least defined" element, hence being called "bottom" or "undefined"
05:25:17 <Lilith> hmm
05:25:27 * Lilith wants to ask a stupid question
05:26:15 <ddarius> _|_ doesn't tell you anything about anything so it has no information.
05:26:19 <Lilith> is it possible to dynamically link things in haskell?
05:27:21 <ddarius> See o3's runtimeloader, it's a start.  But I unfortunately don't have the link handy...
05:27:52 * esap thinks _|_ should really be called "the collection of all things".
05:28:45 <Marvin--> Lilith: there's no libhaskell.so or libghc.so if that's what you mean, but there's a runtime loader
05:28:45 <ddarius> esap: if something is in the collection of all things, what do you know about it?
05:29:14 <esap> ddarius: nothing, unless you explicitly restrict the scope of the collection.
05:29:26 <Lilith> Marvin--: does that allow for dynamically loading a module
05:29:41 <Lilith> oh right
05:29:43 <Lilith> sorry
05:29:49 <Marvin--> Lilith: yes and no, it's like dlopen
05:29:51 <ddarius> xkb:  Now let's say we have a list.  Certainly, [3,_|_] tells you more than _|_.
05:29:51 <opet> Lilith: the ghc user guide has this to say about it:
05:29:51 <opet> -dynamic
05:29:52 <opet>     Tell the linker to use shared Haskell libraries, if available (this option is only supported on Windows at the moment, and also note that your distribution of GHC may not have been supplied with shared libraries).
05:29:55 <Marvin--> ghc 6 has something similar I think
05:30:37 <Lilith> opet: ta
05:31:16 <esap> ddarius: one good way of thinking it is that you can in effect have different kinds of lower limits to things (bottom elements), each corresponding to some collection of elements. When you choose the collection as the "whole world", you get _|_. (You can produce upper limits similarly, and get Top).
05:32:41 <ddarius> esap: as in different semantic domains (?)
05:33:31 <esap> ddarius: yes.
05:34:16 <xkb> ddarius : that example is nice :D
05:34:50 <esap> But there is a catch. You cannot include _|_ in the collection of elements you consider, or you get circularity.
05:35:31 <nqn> anyhow, lilith was asking a question on my behalf, about dynamic loading in haskell... my real question is, how does it achieve typesafety?
05:36:12 <ddarius> nqn: o3's runtime loader doesn't, he suggest as a possibility using Dynamics to handle it.
05:36:15 <nqn> do you have to know about the interfaces to the functions in your dled module beforehand?
05:36:32 <Marvin--> when I wrote hws-wp I found that using Dynamic didn't help
05:37:04 <Marvin--> well, it works for a subset of my problems, I guess
05:39:21 <ddarius> xkb: The "fixed point" you were talking about is the "least fixed point", right?  Probably in relation to recursive functions.
05:42:47 <nqn> dd:  gotcha, thanks.  i'm not using haskell, I'm using C++, but I'm trying to look for examples of how other systems solve the problem
05:44:22 <ddarius> nqn: you probably already know this, but one of the languages that does this quite well is Erlang.
05:48:09 <xkb> ddarius : yeah
05:51:32 <ddarius> xkb: In math a fixpoint is simply a function that evaluates to it's input, i.e. f(x)=x.  Obviously, it follows from that that f(f(x))=x.
05:57:45 <tic> identity
05:57:46 <tic> ?
05:57:50 <xkb> so it resembles id indeed?
05:58:45 <Marvin--> no
05:58:56 <Marvin--> x, is an fix point to f if f(x) = x
06:00:23 * ddarius missed some there.
06:04:22 <ddarius> So, we want to find the fixpoint of a function, the point where it isn't telling us anything new.
06:05:36 <xkb> aha.. the "loop" part
06:05:57 <xkb> I our lambda-calc class we used Y for that
06:06:05 <ddarius> Also, since f(x)=x the fixpoint x is the same as the value of the function.
06:06:05 <xkb> s/i/In
06:06:21 <ddarius> Yes, Y gives you f of f of f of f of f ...
06:06:45 <xkb> ;)
06:07:13 <ddarius> (or rather Yf is)
06:07:23 <xkb> so the upperbound of a cpo is a fixed point?
06:08:56 <esap> I don't think it's quite that simple.
06:09:18 <ddarius> esap: probably not
06:15:35 <esap> My opinion is that cpo provides a kind of "layering" that allows you organize things. I would rather take another relation to build extensions to cpo than to try to extend the existing hierarchy to infinity.
06:20:44 <ddarius> xkb: you may not have a meaningful upper bound
06:21:39 * esap thinks I just talked about lower bounds and not upper bounds. umm :( I'm known to confuse those sometimes.
06:23:58 <ddarius> You do have a lower bound though, so you could start there and take the smallest steps you can and you'd know the first fixpoint you hit is the least, which gives us a nice single value and takes the least amount of looking around.
06:24:44 <esap> heh
06:32:41 <ddarius> So let's say we want to find the fixpoint of map (1+) [1,2,3,4].  We'll use iterate to see each step, iterate f x being [x,f x, f (f x)...]
06:33:42 <kosmikus> it's usually not very interesting to compute fixpoints of values
06:34:17 <kosmikus> map (1+) [1,2,3,4] :: [Int] ??
06:35:05 <ddarius> okay, more precisely the fixpoint of \map f l.if null l then [] else f (head l): map f (tail l)
06:36:20 <kosmikus> I see ;)
06:36:27 <ddarius> evaluated at (1+) [1,2,3,4]
06:37:30 <ddarius> The first value is _|_ since we haven't tried anything and we are starting at the "beginning"
06:38:14 <ddarius> @get-definition a
06:38:15 <lambdabot> a = iterate (\map f l.if null l then [] else f (head l) : map f (tail l)) (\_ _.["_|_"])
06:38:39 <esap> nice rep for _|_ :-)
06:39:01 <ddarius> esap: it is slightly broken for the first value
06:39:04 <ddarius> @eval take 1 $ map (\f.f (\x.1+x) [1,2,3,4])
06:39:05 <lambdabot> type error
06:39:20 <ddarius> @eval take 1 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:39:21 <lambdabot> [[_|_]]
06:39:33 <ddarius> (which should just be [_|_])
06:40:15 <ddarius> Now, let's try applying f to itself once.
06:40:21 <ddarius> @eval take 2 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:40:22 <lambdabot> [[_|_], [2, _|_]]
06:41:25 <ddarius> It's a little more defined, but it's not a fixpoint as f(_|_) gave us [2,_|_] not _|_.
06:41:41 <ddarius> So let's try another
06:41:45 <ddarius> @eval take 3 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:41:45 <lambdabot> [[_|_], [2, _|_], [2, 3, _|_]]
06:42:10 <ddarius> still no, so let's try again
06:42:13 <ddarius> @eval take 4 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:42:14 <lambdabot> [[_|_], [2, _|_], [2, 3, _|_], [2, 3, 4, _|_]]
06:42:23 <ddarius> again
06:42:26 <ddarius> @eval take 5 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:42:26 <lambdabot> [[_|_], [2, _|_], [2, 3, _|_], [2, 3, 4, _|_], [2, 3, 4, 5, _|_]]
06:42:46 <ddarius> @eval take 6 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:42:46 <lambdabot> [[_|_], [2, _|_], [2, 3, _|_], [2, 3, 4, _|_], [2, 3, 4, 5, _|_], [2, 3, 4, 5]]
06:42:54 <ddarius> @eval take 7 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:42:55 <lambdabot> [[_|_], [2, _|_], [2, 3, _|_], [2, 3, 4, _|_], [2, 3, 4, 5, _|_], [2, 3, 4, 5], [2, 3, 4, 5]]
06:43:53 <ddarius> and a bunch more
06:43:56 <ddarius> @eval take 10 $ map (\f.f (\x.1+x) [1,2,3,4]) a
06:43:57 <lambdabot> [[_|_], [2, _|_], [2, 3, _|_], [2, 3, 4, _|_], [2, 3, 4, 5, _|_], [2, 3, 4, 5], [2, 3, 4, 5], [2, 3, 4, 5], [2, 3, 4, 5], [2, 3, 4, 5]]
06:49:08 <n3d> which lib should i use to implement network interface ?
06:49:28 <n3d> if there's one :)
06:50:44 <n3d> a joke : 21:24 < n3d> Q:  Why do programmers celebrate Christmas on Halloween?
06:50:57 <n3d> A: Because OCT 31 == DEC 25
06:51:00 <earthy> because they can't distinguish OCT 31 from DEC 25
06:51:06 <n3d> right !
06:51:34 <Marvin--> kinda fails in Sweden where we a) don't celebrate Halloween and b) celebrate Christmas the 24th :)
06:52:02 <n3d>  don't celebrate Halloween
06:52:04 <earthy> c) you don't do ocatl? :)
06:52:09 <earthy> octal that is :)
06:52:09 <n3d> you will, soon,
06:52:23 <n3d> we didn't celebrate it 3-4 years ago,
06:52:39 <n3d> and now, to make more money at this time,
06:52:53 <n3d> france celebrate it also ://
06:53:03 <earthy> actually, in .nl we don't celebrate Halloween but we *do* celebrate `Allerzielen' which is exactly All Hallow's Eve
06:53:13 <Marvin--> yeah, well, there's an increasing amount of halloween merchendise crap in the stores and maybe kids throw halloween parties or something
06:53:13 <earthy> and it is celebrated on november the 2nd.
06:53:31 <earthy> (well, at least the catholics do :))
06:53:50 <Marvin--> we "celebrate" (in the sense that it's actually a holiday, but very few do something celebratory) the same thing, All Saints' Day (alla helgons dag)
06:54:04 <earthy> marvin: All Saints' day is the 3rd.
06:54:10 <Marvin--> right
06:54:20 <Marvin--> but there's also All Saints' Eve which is the 2nd :)
06:54:22 <ddarius> xkb: That's hardly proof, but it seems to show that f^5 = f^6 (or f(f^5(_|_)) = f^5(_|_) or letting x be f^5(_|_) f(x)=x)
06:54:22 <n3d> in france, not the catholics, but the capitalists :)
06:54:33 <earthy> err... bzt. My bad. All Saint's day is the 1st in .nl.
06:54:37 * esap has never much cared for holidays.
06:54:48 <Marvin--> earthy: eh, whatever, I don't keep track of it either
06:54:58 <earthy> I just checked with google. ;)
06:57:26 <ddarius> xkb: at least at point (1+) [1,2,3,4]
06:58:24 <earthy> n3d: but you want to look at the Network lib for ghc
06:59:15 <n3d> earthy: ok, i just checked in hugs libs
07:06:09 <Marvin--> "C - A language that combines the speed of assembly with the ease of use of assembly." heh, nice sig
07:08:51 <mattam> so untrue... assembly is much more readable... :)
07:09:06 <earthy> and less portable
07:36:30 <SyntaxPolice> mornin
07:37:34 <Riastradh> The ICFP contest starts in nine hours and twenty three minutes...
07:38:25 <Marvin--> yeah yeah
07:38:29 * Igloo starts the special extra-long extended versio nof the countdown theme  :-)
07:38:39 <Riastradh> The #scheme team spits upon the #haskell team!
07:38:48 <Igloo> (not that anyone here is likely to know what that is)
07:40:10 <Marvin--> Riastradh: oh yeah?? Well...well, you can take your parentheses, and...and...
07:40:22 <opet> Igloo: you've got it going round and round my head now.. thanks ;)
07:40:23 <Igloo> :-)
07:40:29 <Igloo> opet  :-)
07:40:54 <Riastradh> Marvin--, and...?
07:41:03 <Marvin--> Riastradh: ENOPUNCHLINE :-/
07:41:15 * Riastradh takes SRFI 42's comprehensions of MANY types and smashes Haskell's simple -list- comprehensions!
07:41:49 <Marvin--> it's kinda hard for me to bash scheme since I know virtually nothing about it :)
07:42:58 <Riastradh> Well, learn it!
07:43:16 <Marvin--> well, I know it has parentheses ;)
07:43:32 <Riastradh> http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html
07:43:37 * Igloo finds http://members.xoom.it/tvarchive/sound/countdown.ZIP for the uninitiated and wonders if we'll still be there at 0:59:30am Monday night for me to play it  :-)
07:59:20 <Igloo> Today I will mostly be hating: let f = \x -> \y -> x y in f f
08:00:39 <Riastradh> Er, why not just do '($ ($))'?
08:02:06 <Igloo> The reason I'm hating it is because the way I'd like my code to work would simplify it to \y -> \y -> y y
08:02:33 <Igloo> i.e. I'm hating it as a potential input, not as part of my actual code  :-)
08:06:15 * Marvin-- fights discover 2
08:13:11 <xkb> hmm did ddarius leave?
08:13:17 <xkb> I never thanked him for his explanation
08:22:56 <Heffalump> oh, is that expression a counter-example to the question you asked me a few months ago?
08:23:44 <xkb> I asked him to explain the relationship between cpo's and fixed points
09:26:28 <Igloo> Heff: Yes
09:26:58 <Igloo> It turned out to be extremely easy to construct once I sat down and tried
09:27:10 <Heffalump> oh dear :-)
09:27:11 * Heffalump feels stupid
09:27:20 <Heffalump> hangon, that's not correctly typed
09:27:44 <Igloo> Prelude> :t let f = \x -> \y -> x y in f f
09:27:45 <Igloo> let {...} in f f :: (a -> b) -> a -> b
09:28:01 <Igloo> Oh, what it is incorrectly simplified to isn't, no
09:28:22 <Igloo> Because it should be \y1 -> \y2 -> y1 y2 (or maybe vice versa)
09:28:25 <Heffalump> oh, right, it's correct, but only in a polymorphic type system
09:29:43 <Heffalump> that's why I failed to construct a counter-example, I managed to convince myself you can never get f occuring as an argument to itself
09:30:19 <Igloo> Ah - well id id is a trivial counter-example to that
09:30:39 <Heffalump> sure, but only in a polymorphic type system
09:30:46 <Heffalump> f f can never be well-typed in a simply-typed system
09:30:56 <Igloo> *nod*
09:31:02 <Heffalump> your example *is* id id :-)
09:31:12 <Igloo> True  :-)
09:31:24 * Marvin-- grins
09:31:24 <Igloo> Oh, not quite
09:31:38 <Heffalump> with a different type
09:31:59 <Igloo> It's id_functions or something
09:32:13 <Heffalump> like I said :-)
09:32:38 <Heffalump> can you still construct a counter-example if you first exhaustively eta-reduce?
09:32:46 <Heffalump> (I'm guessing you can, but it'd be worth checking)
09:33:00 <Igloo> That doesn't eta-reduce
09:33:12 <Heffalump> since when?
09:33:34 <Igloo> \x -> \y -> y x would, \x -> \y -> x y doesn't, no?
09:33:42 <Marvin--> I thought \y -> x y was an eta redex?
09:34:26 <Heffalump> yes, it is
09:34:42 <Igloo> Oh, reduce just the inner one, right
09:35:07 <Igloo> I'm sure I could throw constants and binops in so it doesn't though
09:35:43 <Heffalump> I'm fairly sure you could too, but I think it's worth checking
09:36:07 <Heffalump> at a guess, just making it \x -> \y -> x y y would "fix" the problem
09:36:21 <Igloo> Yeah, just change y to (y . z) is enough
09:36:40 <Heffalump> ah, no, mine isn't type correct :-)
09:37:14 <Igloo> I can patch it up by renaming things as necessary when doing substitution. It'll just be a bit inefficient and ugly
09:37:30 <Heffalump> aren't you in a monad anyway?
09:37:48 <Igloo> Probably - why?
09:37:57 <Heffalump> well, you can pass around a name supply in that then
09:38:04 <Heffalump> though actually that's a bit messy
09:38:30 <Igloo> I've already got a name supply. The inefficient bit will be looking through the expression to see what variables it uses
09:39:14 <Igloo> And then compare that list every time you go through a lambda or match. It would be less annoying if it wasn't so unlikely to actually cause a problem.
09:39:41 <Igloo> (at least, I /think/ it's unlikely)
09:39:51 <Heffalump> go through the expression once at the beginning to see what variables it uses
09:39:54 <Heffalump> that's linear time
09:40:19 <Igloo> n log n as it involves looking everything up in the DAG
09:40:45 <Heffalump> then, just construct a renaming environment as you go down the tree, giving bound variables fresh names every time you pass a lambda
09:41:26 <Igloo> Yeah, I see the solution, it's just ugly for a corner case
09:49:20 <xkb> Is there no summerschool on functional programming this year?
09:50:47 <Heffalump> I think there will be one next year, since a call for proposals went out recently
09:50:55 <xkb> ah.. ok
09:50:56 <xkb> thanks
09:53:22 <jlouis> does Haskell have anything equivalent to the ''as'' keyword in SML?
09:53:47 <Riastradh> Yes -- @.
09:53:56 <jlouis> Riastradh: thanks
09:54:05 <Riastradh> foo pair@(x:xs) = ...use pair, x, or xs here...
09:54:16 <jlouis> exactly what I wanted
10:01:50 * shapr boings happily
10:03:23 <shapr> goood evening #haskell!
10:22:37 <andersca> hey hey shapr
10:22:43 <shapr> y0 y0 andersca 
10:33:42 <shapr> hello mr moz
10:33:58 * shapr moz the lawn
10:34:06 <andersca> gar
10:34:08 <shapr> :-)
10:41:21 <shapr> w000h00
11:02:18 <tmoertel> shapr: can you think of any additional links to add to the references page ?
11:02:28 * tmoertel used the wrong channel, whoops!
11:28:58 <SyntaxPolice> hi wli :)
11:50:48 <Heffalump> hi
11:50:53 <Riastradh> Hi.
11:50:59 <Riastradh> ICFP contest in five hours and ten minutes...
11:51:16 <Heffalump> yep.
11:51:44 <SyntaxPolice> shapr: are you warmed up?
11:59:34 <jlouis> ;P
11:59:45 <jlouis> you guys going to participate?
11:59:56 * Riastradh is going to spy on the #haskell team -- muwahahahaaaaa!
12:00:05 <jlouis> heheh
12:00:13 <hdaume> so has anyone placed bets on the challenge?
12:00:33 <jlouis> hdaume: about what it is?
12:00:34 * SyntaxPolice bets against the scheme team
12:00:37 <hdaume> yeah
12:00:46 <hdaume> yeah to jlouis
12:00:52 <Riastradh> The #scheme team collectively smacks SyntaxPolice!
12:01:07 <hdaume> Riastradh: i don't think you had enough parentheses in that statement
12:01:08 * hdaume ducks
12:01:11 <SyntaxPolice> ((keep your loopy hands off of me))
12:01:24 <SyntaxPolice> hdaume: ha!
12:01:26 <jlouis> hdaume: either it is about racing cars, or it is something with formulas (formula 1)
12:01:28 <hdaume> :)
12:01:31 <vegai> I'll bet on the Java team... the odds must be close to 1:100000 =)
12:01:35 <hdaume> jlouis: or race conditions...
12:01:35 <Riastradh> (smack (icfp-team "#scheme") (irc-user "SyntaxPolice"))
12:01:46 <jlouis> hdaume: hehe :)
12:01:47 <Riastradh> Formul-ae-.
12:01:52 <jlouis> mmm
12:02:08 <jlouis> Riastradh: you on the #scheme team?
12:02:13 <hdaume> Riastradh: that's not as bad as what i saw yesterday.  someone wrote "indice" for the singular of "indices"
12:02:15 <SyntaxPolice> fortunitely, Riastrad got the arguments in the wrong order (no static typechecking, you see) and I ended up smacking the #scheme team :)
12:02:16 <Riastradh> I'm running the #scheme team.
12:02:43 <jlouis> Riastradh: ah :)
12:03:07 <Riastradh> SyntaxPolice, hah, I'm using MzLib's contracts which would check it for me, and there weren't type errors -- you're just trying to break my code with your -own- code, but because I protected EVAL you can't do that!  HAH!
12:04:02 <jlouis> I'll help the #haskell team, now we do not build an SML team
12:04:28 <jlouis> though it will only be ideas. No coding here... have something due to Monday ;(
12:04:43 <SyntaxPolice> Riastradh: shoot.
12:06:38 <vegai> hmm, my birthday is tomorrow -- coincidence? (probably)
12:08:01 <SyntaxPolice> vegai: happy bday
12:08:06 <vegai> thank you
12:31:06 <Igloo> t-4.5h!
12:32:06 <jlouis> Igloo: heheh
13:30:39 * Riastradh longs for convenient monads in Scheme...
13:31:05 <Igloo> Realised you went for the wrong team, hmmm?  :-)
13:31:21 <Riastradh> No, I just want -one- thing from Haskell.
13:31:43 * Igloo grins
13:32:08 <Riastradh> ((icfp-team "#scheme") 'spits-on (irc-user "Igloo"))
13:34:10 <SyntaxPolice> we need an embeded domain specific language for assaulting Riastradh in Haskell
13:34:27 <Riastradh> ((irc-user "Riastradh") 'evades)
13:34:39 <Igloo> Yeah, and it should make good use of monads  :-)
13:35:52 * Igloo wishes again for a way to have record updates separate from the record they are updating
13:37:19 <Igloo> Oh, actually it wouldn't help here anyway
13:37:46 <hdaume> Igloo:how do you mean?
13:38:14 <hdaume> syntax for (\s x -> s { someField = x }) ?
13:38:19 <Igloo> hdaume: I also want to be able to pass around   (\x -> x { foo = bar })
13:38:22 <Igloo> Yeah
13:38:33 <hdaume> Igloo: yeah, i concur :)
13:38:37 <hdaume> you could use drift :)
13:38:42 <Igloo> Or alternatively to be able to pass around the lefthand-sides of things inside the {}
13:38:50 <hdaume> yup
13:41:14 * Igloo looks at the contest pages for the nth time
13:41:28 * hdaume looks at the contest pages for the (n+1)st time
13:41:33 <hdaume> ha
13:42:04 <Heffalump> you need TREX, I think
13:42:12 * Riastradh looks at the contest pages for the (n+2)th time.
13:42:13 <Riastradh> HAH!
13:42:24 <Riastradh> Ouch, I just banged my elbow on my desk...
13:42:41 <hdaume> :)
13:43:12 <Riastradh> I notice a trend in the web pages of the organizers.
13:43:24 <Igloo> All in chalmers.se you mean?
13:43:41 <Riastradh> Yes.
13:43:49 <Riastradh> I wonder where they're all from!
13:44:09 <Riastradh> Well, rather, where they all reside.
13:47:20 <Heffalump> oh, actually, shouldn't GHC have extensible records by now? Umut Acar was doing them, I thought.
13:47:47 <Igloo> How would that help?
13:49:27 <Heffalump> isn't that precisely what you want?
13:49:52 <Igloo> Not from the name
13:50:25 <Igloo> I want to be able to write   (\x -> x {foo=bar}) without writing "\x -> x"
13:50:41 <Heffalump> oh, you just want good syntax for it?
13:50:46 <Igloo> Yeah
13:50:51 <Heffalump> I thought you wanted polymorphism in x.
13:51:04 <hdaume> Igloo: were you the one who started the discussion about this on h@h.o a while back?
13:51:09 <Riastradh> This sounds like a job for...Template Haskell!
13:51:43 <Riastradh> <fanfare>
13:51:51 <Igloo> Don't think so
13:59:10 <Marvin--> man, what a horribly bad roleplaying session
14:03:58 <Smerdyakov> Marvin--, between you and the compiler?
14:04:39 <Marvin--> no, in our D&D campaign
14:04:45 <Marvin--> we were just way too tired
14:05:11 <Smerdyakov> Did you record it for humour value?
14:06:15 <Marvin--> heh, no
14:08:29 <Igloo> There should be a way to alias implicit parameter contexts too
14:09:04 <hdaume> :)
14:10:19 <Igloo> Or maybe just a way to declare the type of an IP once
14:11:21 <Heffalump> for what scope?
14:11:35 <Heffalump> what's the reference that says they don't play well with type classes?
14:20:11 <Igloo> A module
14:20:34 <Igloo> I didn't read it carefully enough, so it is useful for what I want
14:20:51 <Igloo> You can't do either of
14:20:52 <Igloo>   class (?x::Int) => C a where ...
14:20:52 <Igloo>   instance (?x::a) => Foo [a] where ...
14:20:58 <Igloo> http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#IMPLICIT-PARAMETERS
14:21:14 <Heffalump> oh, that's different.
14:21:22 <Heffalump> though would be nice
14:21:31 <hdaume> Igloo: how would you use that second one?
14:21:36 <hdaume> ...or the first one?
14:22:49 <Igloo> I have no idea - I just skimmed over it and concluded I couldn't do class Foo a where foo (?bar :: Baz) => a -> Bar at first
14:23:36 <hdaume> ah
14:24:32 * Igloo realises part-way through one of my translations that I actually want a change from Left a to Right (f a) to be reflected all the way back up until it is removed
14:24:35 <Igloo> Bah
14:24:43 <Heffalump> are you sure you can't do that?
14:24:57 <Igloo> Can't do what?
15:15:24 <mvw> that is a huge team
15:16:44 <Igloo> Not everyone in here is in the #haskell team if that's what you mean
15:17:49 <mvw> is there some irc channel where folks diskuss the icfp2003 contest - team neutral? :-)
15:18:43 <Igloo> This ought to be team neutral - I don't know if there is a better place for general discussion
15:19:10 <kosmikus> #haskell is team, but not language neutral :)
15:19:47 <Igloo> Rubbish - Haskell advocacy isn't bias, it's fact  :-P
15:19:47 <mvw> I thought so :-)
15:20:14 <mvw> you monadic basthhhh guys :)
15:20:31 <kosmikus> next year I'll submit an entry written in TeX ;)
15:20:39 <mvw> cool
15:20:46 <mvw> i get frustrated 
15:20:58 <mvw> no idea where other erlang folk hang around
15:21:40 <mvw> the folks at ericsson moved the server box of www.erlang.org and manged get no outside link, so the mailing lists are all down, site down etc.. :(
15:21:54 <kosmikus> what about #erlang?
15:22:49 <mvw> some are online, but no one seems active, no idea if it is possible to join a team there <sigh>
15:23:25 <mvw> anyone of you going to compete?
15:25:03 <Igloo> At least 4 of us in at least 2 teams
15:25:36 <mvw> lucky guys.. 
15:25:54 <mvw> if no one shows up, i have to do to a one man show
15:25:56 <Riastradh> Learn Haskell in one and a half hours and join a Haskell team!
15:26:35 <mvw> would be good way to qualify for such a team :-)
15:26:42 <Heffalump> it'd be quite appropriate if Erlang won given the organisers are Swedish
15:27:09 <mvw> did anyone of you participate in prior contests?
15:27:14 <Igloo> How many of them are actually Swedish?
15:27:14 * mvw new
15:27:28 * mvw new to constest <shudder>
15:27:40 <Igloo> #haskell had 5-7 people last year I think
15:28:08 <mvw> there seems to be scheme and ocaml folks as well this year
15:28:31 <mvw> i should try perl or php or some other crap and humilate you all :-)
15:28:39 <Igloo> An O'Caml team won last year I think
15:28:41 <tmoertel> mvw: why not bash ?
15:28:52 <Riastradh> OCaml always wins.
15:28:59 <Riastradh> Or at least gets in the top three places.
15:29:01 <mvw> they have good guys
15:29:03 <tmoertel> Riastradh: Haskell Carrots won in 2001.
15:29:14 <Riastradh> tmoertel, note my correction.
15:29:26 <mvw> a former colleague (jim r.) was a ocaml disciple, he was quite good
15:29:50 * tmoertel finds MLish syntax hard on the eyes
15:30:07 * Riastradh found it hard on the eyes when he first started using it.
15:30:30 * mvw has some aesthetic problems with haskell syntax, but might not have been enlightned enough yet :)
15:30:56 * tmoertel must get some food before the contest begins
15:31:00 <tmoertel> bbl
15:31:30 <mvw> thank the lord that my wife and daughter just hit bed, so i have a decent chance to concentrate :-)
15:32:12 <Igloo> Whereabouts do you three live?
15:32:13 <mvw> is a registration necessary this year?
15:32:38 <mvw> igloo: i live in bensberg, very close to Cologne in Germany
15:33:07 <Igloo> (I'm in the UK)
15:33:18 <mvw> what part?
15:33:22 <Igloo> Oxford
15:33:34 <Igloo> I was just wondering about timezones
15:33:48 <mvw> in cologne it is 00:31
15:34:09 <kosmikus> the contest starts at 02:00 German time
15:34:09 <hdaume> i thought C won last year
15:34:09 <mvw> i listened to bbc worldservice on mw to find out about the gmt time :-)
15:34:25 <kosmikus> I have been confused myself, due to summer time :-/
15:34:34 <mvw> bloody daylight savings that makes me unsure one hour
15:34:42 <hdaume> starts at 5pm (Friday) my time :)
15:34:57 <Heffalump> C was second
15:35:00 <hdaume> ah
15:35:10 <mvw> hdaume: california?
15:35:29 <hdaume> mvw: washington right now, but normally california
15:37:14 <mvw> hey there is something new - a web forum
15:37:17 <mvw> http://www.dtek.chalmers.se/groups/icfpcontest/faq.html
15:37:23 <hdaume> yup
15:37:52 <Igloo> But it's not mentioned on the news page - grr!
15:37:54 <syntax-laptop> has the problem been posted?
15:38:16 <Riastradh> syntax-laptop, of course not -- it won't be posted for another hour and twenty two minutes.
15:38:45 <Igloo> Not that we're counting or anything  :-)
15:39:30 <mvw> any good tips how to get through the competition
15:39:53 <mvw> tomorrow 10.00-12.00 i still have to go to "baby swimming" with my daughter sigh
15:40:12 <mvw> i will have sacrifice sleep
15:40:16 <Igloo> First tip: The contest is more important than your family
15:40:23 <mvw> tell me wife
15:40:33 <mvw> :-)
15:42:54 <mvw> how many people do you expect to participate?
15:43:29 <Igloo> > 100 teams last year I think, probably 2ish/team on average?
15:44:03 <mvw> that is quite much
15:44:50 <mvw> how did you learn about the date? i tried to get it about 2 months or so, asked myself through to the organizers, but got no reply.. only a nice acm folk warned me this week (grr)
15:45:48 <shapr> ah fooey
15:45:58 * Heffalump wonders what wol thinks of this attitude :-)
15:46:46 <Igloo> shapr?
15:46:56 <Riastradh> Contest starts in one hour and fifteen minutes...
15:47:30 <Igloo> Heff: No idea, but given I'll be 30mins away while I'm awake she can't easily complain too much  :-)
15:48:28 <Igloo> mvw: There was at least a 10-day mail from the organisers to the haskell list
15:48:41 <Igloo> I think someone hee noticed well before then, but I can't remember who and don't know how
15:49:58 <mvw> igloo: like i toldy you.. all erlang mailing lists are offline right now.. great timing :-)
15:50:06 <Igloo> :-(
15:50:10 * Igloo goes AFK for a bit
15:50:35 * mvw prepares a cheese sandwich (Gouda of course :)
15:52:02 <mvw> ok, organizing team seems to be there, they already answer questions on the web site (mine :-)
15:53:45 <shapr> whee
15:54:10 * shapr boings
15:54:19 <shapr> so, any last minute additions to the #haskell / functional beer team?
15:55:29 <Riastradh> emacs --batch --execute '(print (yow))' 2>/dev/null | chef
15:55:38 * shapr grins
15:55:46 <mvw> i wish you guys luck!
15:56:00 <Riastradh> "Nut inuoogh peuple-a pley SKEE-BELL..  Zeey're-a elveys theenking ebuoot
15:56:00 <Riastradh>  COCEINE oor und ELIEN BEINGS!!"
15:56:01 <shapr> me too!
15:56:10 <Riastradh> lambdabot should have a Swedish Zippy!
15:56:27 <shapr> hi n3d
15:56:38 <shapr> hi mvw, are you new to #haskell?
15:56:40 * Riastradh would write one but he's preparing for the ICFP.
15:56:50 <shapr> ah, I see.. on #erlang team
15:58:10 <mvw> shapr: I'm here out of frustration, i am looking for an erlang team to join but nobody showed up yet
15:58:42 <shapr> you should contact Luke Gorrie
15:58:46 <shapr> oh wait
15:58:54 <shapr> his parents are visiting from .au this weekend
15:59:36 <mvw>  erlang.org and its mailing lists are offline, i put notice on bluetail wiki and slashdot and hope for the cavalery :)
15:59:55 * shapr grins
16:00:59 * juhp wonders if there are any haskell teams near his timezone taking place
16:01:07 <juhp> part even
16:01:47 <shapr> juhp: psst, join the #haskell team
16:02:44 <juhp> but aren't you all in europe again? :)
16:02:54 <shapr> no actually
16:03:03 <shapr> half the team is in europe, half in pittsburgh
16:03:14 * esap is in europe. A bit bad time to start :(
16:03:23 <shapr> esap: are you already on a team?
16:04:12 <esap> shapr: no, was thinking of participating with my brother.
16:04:22 <shapr> ok
16:04:25 <juhp> shapr: so no aussies then?
16:04:33 <shapr> nope, not so far.
16:06:10 <shapr> juhp: are you in .au ?
16:06:16 <shapr> I thought you were in .jp ?
16:06:31 * juhp is not sure if he'd be able to give much time to the contest this weekend though anyway :-\
16:06:41 <juhp> shapr: yeah, i'm in jp
16:06:55 <juhp> but the timezone is almost the same ;)
16:07:20 * shapr boings impatiently
16:07:38 <shapr> isn't it time now?
16:08:12 <shapr> @time
16:08:13 <lambdabot> Sorry, I don't know the command "time", try "lambdabot: @listcommands"
16:08:16 <shapr> hrm
16:08:47 <juhp> under one hour left, right?
16:09:20 <shapr> for some reason I thought it was now...
16:09:30 <shapr> maybe that's finland time I'm thinking of...
16:09:54 <shapr> oh
16:09:55 <shapr> duh
16:10:02 <juhp> perhaps i can just join the #haskell team as an observer/tester? :)
16:10:03 <shapr> Fri Jun 27 23:10:00 UTC 2003
16:10:15 <shapr> juhp: sounds good to me
16:14:12 * Igloo returns and bounces
16:14:18 <shapr> hi Igloo!
16:15:33 * Igloo grins at the second answer
16:16:26 <shapr> I think it's cool the web-based support is written with Thiemann's WASH
16:16:42 <Smerdyakov> shapr, who are the Pittsburgh team members of the #haskell team?
16:16:44 <Riastradh> What web-based support?
16:16:47 <Igloo> Oh, nice
16:17:08 <shapr> Riastradh: the web-based support mentioned on the FAQ page
16:17:10 <shapr> Smerdyakov: tmoertel
16:17:17 <shapr> I'm pretty sure he's in Pittsburgh
16:17:21 <Smerdyakov> He's half your team?
16:17:25 <shapr> yup
16:17:38 <Smerdyakov> Okeydokey
16:17:49 <shapr> Smerdyakov: how's the SML team?
16:17:56 <Smerdyakov> There is one?
16:18:04 <shapr> you didn't organize one?
16:18:17 <Smerdyakov> Nope. I don't like these contests. I always lose interest in the first day. :P
16:18:34 <Smerdyakov> I entered the first one, though, before I knew what functional programming was! :D
16:18:34 * Igloo wonders how many hits/minute they're getting now
16:18:37 <shapr> whether you reach the goal or not, there is much to learn along the way.
16:18:45 <Igloo> Enter the lightning division then  :-)
16:18:52 <shapr> I learned a lot working with Igloo and Heffalump last time.
16:19:17 <Smerdyakov> I even submitted the announcement that the 2nd contest was starting to Slashdot. ;)
16:19:31 <mvw> i did this year :)
16:20:50 <mvw> cool: http://greenwichmeantime.com/
16:22:12 <Igloo> Oh, ICFP conference registration info is up too
16:22:33 <shapr> where?
16:22:47 <Igloo> http://regmaster.com/pli2003.html
16:22:55 <Igloo> https://w202.securedweb.net/regmaster/cgibin/PLI03/on1/RMSs.cgi has prices
16:23:22 <shapr> yay
16:23:56 <mvw> how did you find out?
16:24:22 <Igloo> I randomly clicked on the ICFP link on http://www.dtek.chalmers.se/groups/icfpcontest/dates.html and spotted it
16:25:12 <shapr> how much is it to become a member of ACM?
16:25:25 <Igloo> More than $40 I'd wager  :-)
16:25:33 * shapr grins
16:25:42 <Igloo> s/40/80/ actually
16:25:51 <mvw> i must be blind .. :)
16:26:20 <Igloo> It would get you access to things like the online digital archive I imagine, but you can get most things from the author's webpage these days anyway
16:27:09 * Igloo wonders how much it would cost to get from Oxford to Uppsala
16:28:09 <shapr> wolfgang mentions a point I've wondered about... why are first and second part of the basic arrow class, but left and right are ArrowChoice
16:28:15 <mvw> ACM has a nice journal.. I didn't join yet because payment without credit card is too much hassle from Germany
16:28:35 <Igloo> I hadn't heard of second before
16:29:01 <Igloo> Heff said he thought it was because you almost always need it when desugaring, but I haven't looked at what the desugaring does to check
16:29:37 <shapr> Igloo: re ArrowChoice?
16:29:54 <esap> I think I've seen some slide set or something like that that proposes to separate first&second from Arrow.
16:30:01 <Igloo> 30 mins!
16:30:03 <shapr> yah, I think it's a good idea
16:30:16 <shapr> so, any last minute applicants to the #haskell team?
16:30:30 <Igloo> shapr: fst is needed for the desugaring anytime you have a cmd that doesn't use something bound previously
16:30:48 <Igloo> Surely it's 29mins too early for last minute applicants
16:30:58 <shapr> :-P
16:31:08 <shapr> Mr. Literal, Sir
16:31:11 * shapr grins
16:31:19 <shapr> oh wait, you're nearing Dr. Literal, aren't you?
16:31:38 <Igloo> >2 years away
16:31:47 <shapr> 2 years till DrIgloo
16:31:48 <shapr> cool
16:32:41 <shapr> Igloo: even so, (arr fst) does that, right?
16:32:53 <shapr> it doesn't feel like a basic piece to me
16:33:22 <Igloo> Errr, no, arr fst would throw away half the information wouldn't it?
16:33:29 <Igloo> I mean if you have something like
16:33:41 <Igloo> do x <- arr1 -< input
16:33:48 <Igloo>    y <- arr2 -< input2
16:33:53 <Igloo>    return (x, y)
16:33:57 <Igloo> but with valid syntax
16:34:01 <shapr> :-)
16:34:09 <Igloo> then first is needed to pass x through the y line
16:34:13 <shapr> that's nearly valid
16:34:25 <shapr> I think you need the proc -> stuff at the top
16:34:29 <Igloo> Hey, I've never written an arrow in my life, you can't expect me to know what they look like  :-)
16:34:39 * shapr grins
16:34:40 <Igloo> I don't think it's return either, but I forget what it's called
16:34:41 <shapr> fair enough
16:35:03 <shapr> I've seen returnA occasionally
16:35:13 <Igloo> Ah, could be
16:35:18 <esap> returnA -< (x,y) I'd say.
16:35:31 <shapr> I'm just saying that with the arr combinator, you can easily build first and second, so they don't feel like basic pieces
16:35:57 <shapr> well, first, second, and &&&
16:36:01 <Igloo> first isn't arr fst though is it?
16:36:25 * shapr checks
16:36:29 <Igloo> Anyone got the types handy?
16:36:48 <hdaume> lambdabot probably does :)
16:37:07 <shapr> first :: a b c -> a (b,d) (c,d)
16:37:11 <esap> shapr: I'm not sure arr can do first and second, because it's not that easy to apply a whole arrow inside arr (unless you know the implementation of the arrow)
16:38:13 <shapr> first   :: a b c -> a (b,d) (c,d)
16:38:14 <shapr> first f = (arr fst >>> f) &&& (arr snd >>> arr const)
16:38:35 <esap> shapr: oh but I thought &&& was written using first and second :-)
16:38:45 <shapr> erm
16:38:49 <shapr> hmm
16:39:19 <shapr> I may have gotten caught in a circle, I'm not sure.
16:42:10 <Riastradh> esap, you can probably define them both ways.
16:42:15 <esap> shapr: hmm.. the Arrows paper says f &&& g = arr (\b -> (b,b)) >>> (f *** g) and f *** g = first f >>> second g.
16:42:22 <Riastradh> first just happens to be the easiest to define without any other combinators.
16:42:50 <esap> But Control.Arrow has both &&& and first/second in the type class.
16:42:59 <Riastradh> esap, yeah, and earlier in the paper, he states that you could have defined (&&&) or (***) or something as the base combinator and everything else in terms thereof, but it would be hard to define without any other arrow combinators.
16:56:44 <Igloo> <musical>du du du dummmmmmm</>
16:57:37 <shapr> du du du dummmmmmmm
16:57:44 <shapr> doodle oo, doodle oo...
16:58:05 * shapr does acrapello mission impossible
16:58:21 <mvw> ok girls
16:58:49 <shapr> yes dear?
16:59:27 <hdaume> yay task :)
17:00:05 * shapr doesn't see it
17:00:15 <hdaume> shapr: ? really
17:00:40 * shapr restarts browser
17:00:44 <Igloo> Mail or web?
17:00:54 <hdaume> hehe...i'm just messing with you :)
17:01:12 <mvw> man where is it? :)
17:01:18 * shapr sics lambdabot onto hdaume
17:01:23 <hdaume> :)
17:01:38 <lambdabot> Time for Discipline!
17:02:08 <hdaume> lambdabot: wow, that's the exact title of a spam email with questionable i just recieved
17:02:08 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
17:02:12 <Riastradh> No task yet...
17:02:56 <hdaume> it would be a lot more amusing if lambdabot would repeat in his sentence the command he didn't understand.  we could make him say funny things then :)
17:02:57 * shapr bounces impatiently
17:03:05 <mvw> yea
17:03:06 <shapr> hdaume: quick, write it!
17:03:32 * hdaume pounds on ctrl-R
17:03:41 <shapr> yay, task is up
17:03:50 <shapr> and yes, Igloo was right.
17:04:45 <hdaume> shapr: about what?
17:04:53 <shapr> about the clue
17:05:03 <hdaume> what was his guess?
17:06:33 <shapr> that you drive a car around a track
17:06:50 <mvw> this was given by the contest logo watch that race car on it :-)
17:22:09 <shapr> hi Vincenz 
17:22:40 <Vincenz> busy busy busy
17:23:01 <shapr> you on an ICFP team?
17:23:19 <Vincenz> yes
17:23:24 <Vincenz> I'm currently in windows
17:23:27 <Vincenz> to print the pdf
17:23:28 <shapr> ah
17:23:33 <Vincenz> printiner isn't installed underl inux :(
17:23:42 <Vincenz> my pc is the ssh and cvs place for our code
17:29:11 * shapr bounces cheerfully
17:44:28 <mvw> is the definition of mul ok??
17:46:43 <tmoertel> mvw: looks correct to me 10.16 x 10.16 -> 20.32 ; 20.32 >> 16 -> 20.16
17:47:11 <tmoertel> the top 10 bits get trucated, which brings us back to 10.16 fmt
17:49:49 <mvw> must x and y not get <<16 before?
17:49:58 <mvw> i should sleep.
17:50:22 <shapr> bah, sleep is for those with insufficient caffeine.
17:52:57 <mvw> i see my error, 1 is really 216, so 1' * 1' = 216 * 216 = 232 -> 216 = 1' 
17:53:22 <mvw> i see my error, 1 is really 2**16, so 1' * 1' = 2**16 * 2**16 = 2**32 -> 2**16 = 1'
18:08:02 <Igloo> Can someone confirm the number of ordinary maps please?
18:08:56 <mvw> my zip got 9 + X_rally
18:10:08 <Igloo> Ta
18:15:49 <mvw> Ta?
18:15:59 <shapr> ta == thanks
18:19:49 <shapr> hi GnuVince 
18:19:55 <GnuVince> hi shapr
18:20:17 <shapr> I think I've seen you here before, so I won't give you all the intro info :-)
18:20:21 <GnuVince> If I want to see people talk about Haskell & ICFP, is this where I should come?
18:20:25 <shapr> sure
18:20:49 <shapr> there is a #haskell team
18:20:56 <shapr> and there are several in-person teams
18:20:56 <GnuVince> shapr: intro stuff?  Like IRC policies?  Don't worry, I'm pretty well-behaved
18:21:10 <shapr> no, intro stuff like "would you like to learn Haskell"
18:21:45 <GnuVince> shapr: ah, heh :)
18:22:04 <GnuVince> Acutally, I've never been too interested in Haskell *shame*.  I prefer O'Caml and Lisp
18:22:23 <shapr> no worries, we won't lynch you.
18:22:31 <GnuVince> But Haskell people fare very well at ICFP, so I thought I'd check out :)
18:22:46 <mvw> gnuvince: i am lone erlanger haning out here :)
18:22:47 <Riastradh> #schemeicfp!
18:23:08 <mvw> a tool to convert tracks to gimp and back would be handy for track display
18:23:13 <shapr> yes, we have several OCaml, Scheme, Erlang, Lisp people around here
18:23:24 <shapr> mvw: they say it'll be up any minute
18:23:33 <shapr> Q5. You said something about PNG/TRK conversion tools (unidirectional? bidirectional?), but I don't see them.
18:23:33 <shapr> It will be available any minute.
18:23:41 <GnuVince> shapr: cool :)
18:24:32 <shapr> oh, and SML, Python, etc
18:25:14 <shapr> GnuVince: there's a lot of cool stuff in programming, and the cool stuff isn't limited to any one language.
18:25:31 <shapr> some of the cool stuff even requires languages to cooperate! <gasp>
18:25:37 <GnuVince> shapr: It's nice too see you are not the opiniated kind :)
18:26:00 <shapr> I'm strongly opinionated, I know perfectly well that I don't know everything.
18:26:29 <GnuVince> shapr: yeah, but not the "my language rules and you all suck, bow before!" kind
18:27:29 <shapr> well, I really like purely functional code, and referntial transparency, and lots of stuff in Haskell. I also like Python lots too.
18:27:39 <mvw> It is rather "my language rules and you all suck, but you are 1000 times better than Java, .." :-)
18:27:47 * shapr laughs
18:27:57 <GnuVince> mvw: ;)
18:28:37 <shapr> Igloo: any plans for ghc5.04.3 debs?
18:28:40 <mvw> i am sooo glad that i got 3 crates of coke+lemon+light yesterday :)
18:35:18 <Riastradh> Does the #haskell team have a track parser yet?
18:35:30 <shapr> shh
18:35:37 * Riastradh just wants to know how fast it is.
18:35:53 <Riastradh> ...if it's ready yet.
18:36:02 <Riastradh> (the #scheme's one takes 30 seconds to parse a single track)
18:36:05 <shapr> running on my dual 1544MHz box, it shall be extrazippy fast!
18:36:33 <Riastradh> You command it to be extra zippy fast?  That's an odd way to make computers do things.
18:36:39 <shapr> works for me.
18:39:30 <mvw> boy, i still read the description
18:44:08 <mvw> where is that txt<->graphics converter --- i use opera at 20% font to get some idea,  but that is not a hit
18:49:35 <shapr> hi vardamir 
18:50:13 <vardamir> hey, been a while since i've been on here
18:50:19 <shapr> how's life?
18:50:47 <vardamir> not bad, it'd probably be better if i were coding in Hakell, or anything other than IDL
18:50:52 <shapr> :-)
18:51:09 <vardamir> you?
18:51:17 <shapr> icfp contest just started
18:51:20 <shapr> so I'm busily hacking
18:51:28 <shapr> see http://icfpcontest.org/ 
18:52:45 * Riastradh is busily hacking against shapr.
18:52:55 <Riastradh> And winning!  Hah!
18:52:56 * shapr falls over like a felled tree
18:53:02 <Riastradh> See?
18:53:05 * shapr sings "oh, I'm a lumberjack, and I'm okay!"
18:53:09 * mvw still reading the specs
18:53:35 <vardamir> both of you coding in haskell i take it? ;)
18:53:47 <Riastradh> No, I'm Scheming.
18:53:51 <shapr> nah, Riastradh is a side-effecting weenie
18:53:57 <shapr> I mean, may the best language win...
18:54:00 * shapr teases Riastradh 
18:54:28 * Riastradh only side-effects because the car -moves- -- its coordinates are -mutated-.
18:55:13 <mvw> riastradh: nice pun
18:55:28 <Riastradh> Er...
18:55:32 <Riastradh> I didn't make a pun...
18:55:38 <Riastradh> ...or did I?  What was it?
18:55:54 <mvw> scheming .. it never occured to me (I not a native speaker :)
18:56:04 <Riastradh> Oh.
18:56:34 <mvw> better than raving
18:57:00 * mvw refers to sun's new ide
19:06:23 * mvw is now through with the specs and although he studied physics he wonders how to tackle this optimal control problem 
19:40:09 * shapr bounces happily
20:01:55 <Igloo> shapr: Is it important for you?
20:02:34 <shapr> er, is what?
20:02:52 <shapr> oh
20:02:53 <Igloo> ghc 5.04.3 debs
20:02:54 <shapr> no, not really
20:03:12 <Igloo> OK - I might do soon, but I have no concrete plans
21:16:25 * cale adds CategoryTheory to the wiki
21:16:31 * shapr laughs
21:16:36 <shapr> very punny
21:17:39 <cale> Maybe if we get enough pages on Category theory stuff, we'll get CategoryCategory
21:18:06 <shapr> the first wiki has CategoryCategory
21:18:22 <cale> ah, yeah I was wondering if it did.
21:18:56 <cale> Not only that, but there's a mathematical category of categories too. :)
21:19:29 * cale wishes the wiki did LaTeX.
21:19:32 <shapr> it can
21:19:37 <cale> oh?
21:19:37 <shapr> HaWiki at least
21:19:49 <shapr> and several other wiki flavors
21:19:55 <shapr> though the simple wikis don't
21:20:14 <shapr> read the moinmoin docs, it does mucho nifty stuff
21:20:23 <cale> cool, what's the notation for it? I'll make the CategoryTheory page look nice.
21:20:45 <shapr> you probably need to contact the HaWiki maintainer and ask him to install some macros or processors
21:20:58 <shapr> just means putting some python scripts into a certain dir
21:21:06 <shapr> you can find them on the MoinWiki
21:53:24 * shapr boings
22:30:56 * shapr goes to sleep
22:31:32 * Riastradh continues Scheming.
