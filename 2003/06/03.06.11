00:00:25 <Pseudonym> Blerg.
00:00:32 <Pseudonym> I love Z39.50.
01:35:48 <shapr> whee
01:35:53 <shapr> last swedish class today
01:40:02 <shapr> I wonder...
01:40:27 <shapr> should we move haskell-libs to haskell.org
01:41:34 <shapr> ?
01:42:35 <ChilliX> Hi shapr
01:42:37 <ChilliX> the cvs?
01:42:41 <shapr> yes
01:43:10 <shapr> I've just been reading http://haskell.cs.yale.edu/communities/05-2003/html/report.html#sect1.1 
01:43:13 <ChilliX> you could to do it like GHC, cvs at haskell.org and bug tracker etc at sf
01:44:12 <shapr> the strong point of sf.net is that any admin there can add new developers
01:44:32 <ChilliX> true
01:44:48 <shapr> does that work on haskell.org also?
01:45:10 <ChilliX> well, by asking the cvs maintainer
01:45:38 <ChilliX> which is much more difficult because that usually required support by one of the senior developers like SPJ
01:46:08 <shapr> maybe a darcs repository....
01:47:15 <shapr> thanks for the info
01:48:28 <ChilliX> so, you are now up to speed on Swedish?
01:48:33 <shapr> I wish :-)
01:48:37 <ChilliX> :-)
01:48:40 <shapr> I've had the first 'term'
01:48:56 <shapr> how's your aussie? ;-)
01:49:04 <shapr> do you know what 'stone the crows' means?
01:49:14 <ChilliX> aehm, no...
01:49:27 <shapr> neither do I...
01:49:36 <ChilliX> :-)
01:49:48 <ChilliX> maybe we should ask Pseudonym
01:49:52 <shapr> Probably so
01:50:04 <shapr> I used to drink beer with a guy from Sydney, he said that sometimes, but he was unable to explain it.
01:50:26 <ChilliX> was that inability to explain it a concequence of the beer?
01:50:31 <shapr> heh
01:50:43 <shapr> not unless he had beer before I got to the table.
01:50:52 <ChilliX> ok ;-)
01:50:56 <shapr> which is possible now that I think of it.
01:51:42 <shapr> do you have stuff to present at ICFP/HW ?
01:52:13 <ChilliX> nah - didn't manage to submit anything :-(
01:52:17 <shapr> aww
01:52:57 <shapr> Will you be at ICFP/HW ?
01:53:10 <ChilliX> yes, I definitely plan to go
01:53:14 <shapr> yay
01:53:28 <ChilliX> (although work will be less happy with me going without a presentation...)
01:54:23 <shapr> My boss is okay with me going to ICFP.
01:54:41 <ChilliX> Cool!
01:54:58 <ChilliX> but from what you said your company is not specifically into FP, tight?
01:55:03 <ChilliX> tight=right
01:55:33 <shapr> Well, yes. My company is mostly into Zope, Python, and Java. But I did sneak in some Haskell XML processing recently.
01:56:21 <shapr> Since my company is me and my fiancee, I think I'll be able to fit in more Haskell.
01:57:15 <ChilliX> so your fiancee is your boss?
01:57:23 <shapr> Yes, sort of.
01:57:50 <shapr> She talks to clients, organizes things. She speaks four languages fluently, and two more decently.
01:57:52 <ChilliX> nori is planning to come, too
01:58:10 <ChilliX> That impressive (6 languages)!!
01:58:15 <ChilliX> That=That's
01:58:21 <shapr> Bea was interested, but she heard the entrance fee would be 400 euro or so.
01:58:48 <ChilliX> So, which languages does she speak?
01:59:36 <shapr> German and French natively, English and Dutch fluently, and decent amounts of Finnish and Swedish.
02:00:07 <shapr> She's from Saarbrucken originally.
02:00:22 <shapr> S‰‰rbrucken?
02:00:34 <ChilliX> ok, that explains the Germany/French combination
02:00:59 <shapr> Yes, her parents were from those countries.
02:01:59 <shapr> Do you think the 400 euro entrance fee is accurate?
02:02:22 <shapr> I heard that's what it was last year, the entrance page for this year doesn't seem to be up yet.
02:04:22 <ChilliX> Sweden might be a bit cheaper than the US
02:04:44 <ChilliX> but the fees need to cover room bookings, meals, and banquette
02:05:17 <shapr> yah, conferences are expensive to organize.
02:07:04 <ChilliX> but you should be able to tax deduce it
02:07:29 <kosmikus> I think the ACM even dictates the prices, if it is to be an official ACM conference ...
02:07:41 <ChilliX> kosmikus: true
02:08:27 <kosmikus> they could at least design a decent TeX style file for that amount of money ;)
02:09:04 <shapr> I would like to know when the pages are going online.
02:11:00 <ChilliX> kosmikus: very true! :-)
02:11:07 <ChilliX> ok, I am off now
02:11:09 <ChilliX> cu
02:11:10 <shapr> cya
02:11:24 * shapr finds some amusing quotes on http://www.haskell.org/hawiki/HaskellIrcChannel
02:11:35 <shapr>  black belt, 3rd dan - can read a ?RalfHinze paper in one sitting without feeling the need to consume alcohol
02:11:59 <Heffalump> oh, I thought you wrote that :-)
02:12:03 <shapr>  black belt, 6th dan - hacked on GHC's ?EvilMangler (which implies an understanding of how it works)
02:12:14 <shapr> I don't think so.
02:12:30 <shapr> I would have said Mark P. Jones ;-)
02:23:12 <shapr> SyntaxPolice: looks like FundamentalConcepts and CategoryGlossary overlap
02:24:48 <jlouis> Ok, what is the evil mangler?
02:25:00 <shapr> It is the ultimate evil.
02:25:08 <o3> re
02:25:17 <jlouis> define...
02:25:38 <o3> jlouis: it's a perl script which looks at ghc's assembler output, and does various things to the assembler to optimise it
02:25:41 <shapr> From what I've heard, it's a perl script with a bunch of regexps that operate on the asm that comes out of gcc 2.95 to 3.2
02:26:08 <o3> shapr: what was the problem with runtimeloader on ghc 6?
02:26:10 <o3> i'll start looking at it now
02:26:29 <shapr> yay!
02:26:34 <shapr> I don't know if it had a problem.
02:26:40 <o3> ?!
02:26:48 <jlouis> shapr: sounds sinisterly evil ;)
02:29:12 <shapr> o3: for some reason I was convinced Runtime Loader would need to be altered to work with ghc6
02:29:15 <shapr> is that true?
02:29:38 <o3> well, probably is, although i presumed you've tried it :)
02:30:04 <shapr> jlouis: yes, it's scary. ChilliX told me that gcc from 3.3 is beginning to do the same sort of optimizations, so the Mangler will slowly dwindle.
02:30:12 <shapr> o3: no, I haven't tried it.
02:30:29 <shapr> though now that you mention it, it would have been a sensible thing to try.
02:30:35 <jlouis> ok, it is assembleroptimizations done from perl?
02:30:44 <shapr> yup
02:30:51 <jlouis> are those Haskell people totally insane (the answer is probably yes ;)
02:31:02 <shapr> I think so :-)
02:31:33 <shapr> ChilliX also said that some useful knowledge is in the Mangler, but that it's hard to get it out into Haskell code.
02:32:16 <jlouis> hmmm
02:33:00 <o3> hopefully the mangler can go away when gcc will learn how to do the optimisations itself
02:33:33 <shapr> yes, I hope so too.
02:35:32 <o3> shapr: well, i'll have a look at runtimeloader, but i don't know when i'll finish updating it for ghc 6
02:35:45 <o3> i still have plenty due in the next week :(
02:35:51 <shapr> no worries
02:36:28 <shapr> I'll try buildings runtime loader and hws-wp with ghc6 when I get a chance.
02:37:12 * shapr wanders off to do swedish stuff
02:47:34 <jlouis> ok, question.... can I build GHC 6 on a P133 with 32 Mb ram?
02:51:01 <kosmikus> I would doubt it ... definitely not with "split-objs".
02:51:36 <kosmikus> can't you use a pre-built version?
02:52:27 <seth__> jlouis: you _can_, but I would suggest starting it before you go to sleep one evening.
03:01:01 <jlouis> ;P
03:01:13 <jlouis> I can perfectly use a prebuilt version
03:01:22 <jlouis> or hugs (which I am using now :)
03:02:21 <o3> shapr: incoming DCC
03:02:53 <o3> shapr: (if you /dcc get and it doesn't work, let me know -- my server's been rather dodgey)
03:18:20 <o3> interesting
03:18:36 <o3> is there an equivalent of fromInt for the Show class?
03:22:05 <kosmikus> o3: read?
03:23:52 <o3> kosmikus: oh, that's clever :)  thanks
03:30:37 <o3> ah, interesting
03:31:12 <o3> shapr: looks like the runtime loader may be able to have load data types which being to type classes
03:31:20 <Heffalump> sorry?
03:31:25 * o3 really should be working on other stuff :)
03:31:29 <Heffalump> DYM "belong to"
03:31:30 <Heffalump> ?
03:31:41 <o3> are instances of
03:31:58 <o3> oh
03:32:16 <o3> sorry, yes, belong to.  i always typo the most important words :)
03:32:56 <Heffalump> so a module could declare a data type to be an instance of a type class defined in the main module, and the main module could load up that data type and use the class operations on it?
03:33:16 <o3> i'm double-checking that now, but it might be the case, yes
03:33:26 <o3> which means that you actually have serious extensibility ...
03:33:59 <Heffalump> so the dictionary would have to be passed back?
03:38:58 <o3> i'm not sure
03:39:00 <o3> let's see if this works first
03:45:57 <o3> grr, silly monomorphism restriction
04:12:11 <o3> Heffalump: i'm trying to get around an ambiguous type variable problem in the main module
04:13:17 <o3> you get an ambigious type variable if you try to _use_ any of the class functions
04:32:37 <Heffalump> hmm
04:32:49 <Heffalump> can't you just give an explicit type at the use site?
04:33:08 <o3> but you don't know what the explicit type is
04:33:30 <o3> the plugin creates the explicit type
04:33:36 <o3> data type, rather
04:34:10 <Heffalump> hmm
06:17:41 <SyntaxPolice> hi shapr. do you really think that FundamentalConcepts overlaps w/ CategoryGlossery? There should be some things in a Glossery that aren't fundamental, right?
06:19:31 <Igloo> If it's really called that it should be renamed Glossary
06:19:46 <Heffalump> heh
06:21:51 <SyntaxPolice> wow, lots of good changes to the wiki
06:22:32 <SyntaxPolice> Igloo: don't worry, I didn't make the page so its probably spelled right.
06:22:40 <Igloo> :-)
06:24:33 <SyntaxPolice> I don't consider my spelling "wrong", I consider it "brave" and "fresh" ;)
06:27:42 <shapr> heh
06:28:15 <cleverdra> maybe brave, Syntax, but I think that we apply a specific adjective to people who exhibit unintentional bravery.
06:28:24 <Heffalump> :-)
06:29:20 <shapr> yay, TextFilter 1.4
06:30:06 <shapr> o3: many thanks!
06:34:49 <shapr> SyntaxPolice: hey, when is your homepage coming back?
06:36:15 <shapr> hey, when is your homepage coming back?
06:36:20 <shapr> Mr Jones
06:36:42 <SyntaxPolice> shapr: I could probably put it up on that temp. server
06:36:48 <shapr> I was just curious
06:37:20 <SyntaxPolice> we're trying to figure out whats wrong w/ that server, but its finals week so the guy who's doing that (colin walters) is busy until tomorrow
06:37:35 <shapr> ah
06:38:09 <shapr> do you know how if HaWiki can do page redirection?
06:38:31 <shapr> that's sucky grammar. Swedish is confusing me.
06:40:34 * shapr bounces happily
06:40:48 <shapr> the wiki is getting more activity! yay!
06:40:59 <SyntaxPolice> I don't know; is this related to the other question? :)
06:41:17 <SyntaxPolice> alastair is doing a lot on the wiki
06:41:30 <shapr> er, huh? oh. no, I'm not trying to redirect your wikipage to your homepage or something :-)
06:41:44 * shapr gris
06:41:45 <shapr> grins
06:42:08 <Smerdyakov> Ask in #moin, not here. :)
06:42:23 <shapr> an unsuccessful unicycle flight has damaged my typing ability slightly.
06:42:43 <shapr> I could just read the directions I guess.
06:42:59 <SyntaxPolice> OK, some people are doing loud, annoying construction about 10 feet from me.
06:43:14 <shapr> that sounds conducive to programming ;-)
06:43:17 <SyntaxPolice> did you fall off your bike?
06:43:39 <shapr> yes, flight + uni = pain
06:44:07 <shapr> it's really fun to ride a unicycle.
06:45:33 <SyntaxPolice> I'm reading up on arrows today :)
06:45:50 <o3> shapr: does it work?
06:46:09 <shapr> o3: haven't tried it yet, I have to do some work first.
06:46:31 <shapr> in any case, thanks for taking time to work on it :-)
06:46:51 <shapr> SyntaxPolice: tell me if you understand them...
06:47:06 <SyntaxPolice> actually, I"m focusing on AFRP
06:47:13 <shapr> good idea
06:47:38 <shapr> I think that may be the killer app for Haskell/FP
06:48:07 <wli> AFRP?
06:48:15 <shapr> arrowized functional reactive programming
06:48:19 <shapr> @fact afrp
06:48:19 <lambdabot> arrowized functional reactive programming
06:48:26 <shapr> smart bot
06:48:40 <shapr> http://haskell.cs.yale.edu/afrp/
06:48:50 <shapr> @fact afrp http://haskell.cs.yale.edu/afrp/
06:48:50 <lambdabot> set afrp to http://haskell.cs.yale.edu/afrp/
06:49:43 <shapr> @fact afrp AFRP is now Yampa, at http://www.haskell.org/yampa/
06:49:43 <lambdabot> set afrp to AFRP is now Yampa, at http://www.haskell.org/yampa/
06:59:06 <SyntaxPolice> are you guys picturing the hammering that is going on behind me... actually the worst thing is that they are blocking me from reaching my coffee
06:59:22 <SyntaxPolice> shapr: your questino reminded me that the docs for Control.Monad.State are now officially online :)
06:59:24 <shapr> that's intolerable!
06:59:26 <shapr> yay!
07:00:47 <wli> hm
07:01:18 <shapr> wli: what do you think?
07:03:26 * Igloo crosses fingers, runs dpkg-buildpackage and waits a couple of hours for a typo to cause the build to fail
07:05:22 <wli> shapr: of?
07:06:22 <Heffalump> he might want to know everything you're thinking
07:07:45 <shapr> wli: of AFRP?
07:07:57 <shapr> Heffalump: truly, but no one has ever told me that sort of thing :-)
07:09:19 <Igloo> Does the human brain think in serial or parallel?
07:09:28 <shapr> I'm parallel, what about you?
07:09:45 <wli> don't kow what to think yet
07:09:52 <wli> Haven't tried to use it.
07:10:15 <Igloo> Are you sure you're parallel rather than just multitasking with very small timeslices?
07:10:42 <cleverdra> Igloo - ask a neuroscientist
07:11:01 <shapr> Igloo: yes, I'm parallel
07:11:31 <Igloo> cleverdra: I'm afraid you lot are the best I have  :-)
07:11:39 * shapr snickers
07:12:42 <Igloo> http://www.eetimes.com/story/OEG19990908S0001 seems to disagree with you, shapr
07:12:53 <Igloo> Oh, no it doesn't
07:13:25 <shapr> well, my hardware is different anyway.
07:13:53 <Igloo> Sounds like it is built of a number of serial time-division multiplexing co-processors working in parallel
07:14:16 <shapr> that makes sense
07:43:23 <shapr> y0 sjj 
07:43:34 <sjj> howdy.
07:43:57 <shapr> wassup?
07:44:14 <sjj> not much, having a few connectivity problems .. they seem to be settling down now.
07:44:14 <shapr> philiKON and I are implement ++a for Python
07:44:16 <sjj> you?
07:45:39 <shapr> hacking on python believe it or not
07:45:44 <sjj> wooo ;)
07:45:53 <sjj> what sorta stuff?
07:46:30 <shapr> philiKON and I were just implementing ++a
07:46:50 <shapr> >>> a = myint(3)
07:46:51 <shapr> >>> ++a
07:46:51 <shapr> 4
07:46:55 <sjj> exarkun has done that ;)
07:47:07 <shapr> I thought it was either him or dash
07:47:14 <sjj> http://intarweb.us:8080/evil/increment.py
07:47:16 <shapr> I suggested it on #python and someone immediately did it
07:47:20 <shapr> but I had forgotten who
07:48:43 <sjj> shapr: have you played with metaclasses in python yet?-)
07:48:50 <shapr> yah, long time back
07:49:05 <sjj> I mean the new-style clas metaclasses
07:49:09 <shapr> I tried to figure out how to make it behave like Self.
07:49:17 <shapr> how do the new-style metaclasses work?
07:49:26 <sjj> __metaclass__ = metaclass
07:49:28 <shapr> which version has them?
07:49:31 <shapr> oh, never heard of those.
07:49:35 <sjj> 2.2 onwards
07:49:45 <shapr> nope, haven't played with them.
07:49:50 <sjj> shapr: you can do some weird stuff ;)
07:50:00 <sjj> sort of ad-hoc macros
07:50:19 <shapr> Haskell seems more flexible to me.
07:50:26 <sjj> hehe.
07:50:30 <shapr> completely alter reality with monads
08:01:02 <tic> ++ == __pos__ in Python; what does __pos__ do on other classes?
08:01:24 <tic> (from the increment.py source)
08:01:29 <shapr> __pos__ is the unary plus
08:01:46 <shapr> for example -1 is one less than zero
08:01:51 <shapr> that's a unary minus
08:01:52 <tic> gotcha
08:01:56 <tic> so how does ++ work?
08:02:02 <tic> (or --, or **, ....)
08:02:13 <tic> doesn't that apply the unary operator twice?
08:02:16 <shapr> it's -(-(1))
08:02:17 <shapr> yes
08:02:22 <shapr> it's a cheezy idea I thought of
08:02:49 <tic> hrm
08:02:53 <tic> I don't get it
08:03:09 <tic> ahh
08:03:13 <tic> the state stuff
08:03:14 <tic> hack ;D
08:03:25 <tic> it only increment every other time
08:03:25 <shapr> I know :-)
08:03:31 <tic> still, pretty cool
08:03:47 <shapr> philiKON and I did it with a subclass of int
08:03:50 <shapr> since that's cleaner
08:03:59 <tic> it only increments, even. bleh, what's happen with my english.
08:04:02 <tic> ah
08:04:14 <tic> how do you subclass int? haven't looked into any of the new-style classes in 2.2+
08:04:26 <shapr> class myint(int): pass
08:04:47 <tic> sweet
08:04:50 <tic> can you do:
08:04:54 <tic> class myint(int): pass
08:04:55 <tic> int = myint
08:04:55 <tic> ?
08:04:59 * tic tests
08:05:21 <tic> wee
08:05:29 <tic> supah-cool, now everyone can use ++ in Python. ;D
08:05:40 <shapr> Guido will break your keecaps ;-)
08:05:40 <tic> only works for ++a though.
08:05:43 <tic> hehehe :D
08:05:44 <tic> yeah
08:05:52 <shapr> er "kneecaps"
08:06:05 <shapr> geez, I'm being assimilated.
08:08:54 <tic> hmm
08:09:07 <tic> how do you tell Python to always use myInt instead of int when doing a=3
08:09:07 <tic> ?
08:09:24 <shapr> I don't know.
08:09:38 <tic> oh well.
08:09:41 <tic> off to the store
08:09:43 <tic> f00d
08:09:46 <shapr> mat
08:10:14 <tic> jess
08:10:19 <tic> linssoppa
08:10:34 <d-bug> In Ruby, you could add functionality to Int rather than subclass it
08:10:34 <shapr> en bit stark ost...
08:11:04 <shapr> d-bug: yes, but it doesn't have significant whitespace, so it adds complexity in other ways.
08:12:38 <d-bug> perhaps, i think it's a matter of taste, and Ruby doesn't try to be a purist's language choice like I get the impression from Python-followers that Python is
08:13:28 <tic> well
08:13:30 <tic> it's pretty clean
08:13:30 <shapr> I think most things are a matter of choice.
08:13:35 <tic> but it's not really that pure, now is it?
08:13:43 <tic> I think Ruby has a pretty hard-to-follow syntax
08:13:50 <shapr> I do sometimes wish Python were closer to Self
08:13:53 <tic> the lambda-thingy
08:14:03 <shapr> but I like them both.
08:14:14 <tic> shapr, isn't it enough with the keyword? :) How's Self like?
08:14:24 <shapr> http://gliebe.de/self/screenshot.html
08:15:12 <tic> shapr, ick, what was that?
08:15:17 <shapr> That's Self
08:15:29 <shapr> it's extremely cool.
08:15:33 <d-bug> tic: perhaps some parts of Ruby's syntax could be better, but most of the time i'm amazed that my guesses about how the name of a certain method should be named, is correct
08:16:06 <d-bug> tic: Ruby's mix-in concept is really nice too
08:16:09 <shapr> tic: http://research.sun.com/research/ics/pics/overview.GIF
08:16:35 <shapr> I want that for Haskell :-)
08:16:49 <tic> d-bug, dunno really; you can use mixins with Python too, basically.
08:17:04 <d-bug> "basically"?
08:17:08 <tic> well
08:17:09 <tic> subclassing. :)
08:17:19 <tic> shapr, don't you write code in Self?
08:17:19 <d-bug> that's quite different...
08:17:29 <tic> heh
08:17:31 <sjj> shapr: intrinsics ;)
08:17:37 <shapr> sjj: eh?
08:17:38 <tic> a search for self on google yields a zillion Python websites
08:17:54 <d-bug> tried Squeak?
08:18:07 <shapr> d-bug: multiple inheritance can do mixins and more
08:18:25 <shapr> sjj: what's that?
08:18:39 <shapr> tic: sure, you write code in Self.
08:18:54 <d-bug> shapr: i know, but it is still not quite the same thing
08:19:03 <sjj> shapr: exarkun hacked up an evil extension module to allow you to get that desired behaviour ;) .. x = 1 using your own object
08:19:14 <shapr> nifty
08:19:18 <shapr> d-bug: how so?
08:19:23 <sjj> he presented a talk on it at PyCon
08:19:36 <shapr> I probably shouldn't ask about the difference between Python and Ruby on #haskell
08:19:47 <shapr> I want a shared graphical desktop for Haskell.
08:19:51 <sjj> hehe
08:20:05 <Igloo> Have you looked at smalltalk OOI, shapr?
08:20:11 <shapr> Igloo: yah, a little bit.
08:20:34 <d-bug> shapr: :-) it depends on who you ask, some swear that mi is evil, and the purists would say that with inheritance, your class would then be a subclass of the mixin
08:20:52 <sjj> shapr: i'm trying to get a link but advogato is extremely slow
08:20:58 * Igloo infers you prefer Haskell then
08:21:02 <d-bug> try www.squeak.org for a free nice smalltalk system
08:21:06 <shapr> Haskell is my favorite language.
08:22:26 <shapr> I wonder if I could use Binary.hs to do network transport of stuff on a shared desktop.
08:23:54 <shapr> this is connected to runtime loading and upgrading I think.
08:24:41 <cale> http://www.algorithm.com.au/wiki/hacking/haskell.ghc_runtime_loading
08:24:51 <shapr> yah, that's o3's runtime loader
08:24:52 <d-bug> shapr: it's so cool when you continue to develop a Morph in Squeak, and the changes happen to that live object as well
08:25:05 <shapr> d-bug: yes, but Smalltalk has an Image problem.
08:25:11 <sjj> shapr: http://intarweb.us:8080/PyCon/intrinsics-lightning-0.xhtml
08:25:44 <d-bug> shapr: i agree, but they are working on making Squeak mure more modular. The guy working on it has a 64kb image right now
08:26:21 <shapr> Maybe I'll go back and check out Squeak again someday.
08:27:11 <d-bug> shapr: try idling in #squeak :)
08:27:11 <shapr> not till I'm fluent in FP and Logic
08:27:11 <shapr> but thanks for the offer
08:27:29 <d-bug> np
08:31:19 <shapr> anyone know of SQL parsers for Haskell?
08:31:21 <shapr> hi hal!
08:31:27 <hdaume> damn.  hi shae
08:31:30 <shapr> heh
08:31:33 * shapr grins evilly
08:31:47 <kosmikus> I've just added the preliminary status of Gentoo Haskell packages to the Wiki page
08:32:03 <kosmikus> anyone who might have priorities as to what to add next can contact me :)
08:33:18 <shapr> to add to Gentoo? or the Wiki page?
08:33:41 <kosmikus> to add to Gentoo
08:34:24 <shapr> genericHaskell packages? :-)
08:35:12 <shapr> I don't know what some of those are...
08:35:16 <shapr> what's HPL?
08:36:58 <kosmikus> so far I am reluctant to add anything that needs a library to be built because of the problem with rebuilding -- don't know how/if FreeBSD handles this
08:38:43 <kosmikus> HPL = Haskell Ports Library?
08:38:58 <SyntaxPolice> we need to get the LibraryInfrastructure done fast :)
08:39:49 <Igloo> We? ISTR *you*'re in charge of it  :-)
08:39:59 * shapr grins
08:40:41 <SyntaxPolice> Igloo: that was "we" exclusive ;) there are others working on it besides me, fortunitely, and there's been a lot of emails going back & forth wrt a make system (why this was not done on the list, I don't know)
08:40:52 <shapr> google doesn't turn up any Haskell SQL Parsers.
08:41:07 <Igloo> Oh, cool, I thought it had died out bar occasionally wikiing
08:41:21 <kosmikus> SyntaxPolice: agreed :)
08:41:33 <SyntaxPolice> nope. we're deep in discussion between the fptools system and the one being built at Yale
08:41:38 * Igloo is waiting for the summary as I wasn't having time to read even the threads that were on list
08:41:50 <shapr> I've seen fptools, how do I get hold of Yale?
08:43:02 <SyntaxPolice> idono, I have a tarball that Nilsson sent me. I guess its pretty good, works w/ multiple implementations, but there are some problems w/ Windows ATM.
08:43:46 <shapr> are you allowed to redistribute the tarball?
08:45:07 <SyntaxPolice> Idono; if I were you, I'd just follow up to his post on that thread to ask him for it. maybe its on their web page somewhere?
08:45:40 <shapr> ok, I'll look.
08:52:04 <shapr> hmm
09:03:46 <Igloo> Bah, I was right
09:03:49 <shapr> I wonder if Template Haskell would make BNFConv more useful.
09:03:50 <shapr> how so?
09:04:18 <Igloo> It took almost exactly 2 hours and then broke
09:06:02 <Igloo> And it was the standard make typo ($ not $$)
09:30:42 <CowGirl> what are the 2 most common recursive errors?
09:31:00 <hdaume> CowGirl: what
09:31:23 <CowGirl> is a question in a past exam on haskell
09:31:35 <CowGirl> 2 of the most common recursive errors
09:31:43 <hdaume> ...oh....i thought it was a lead-in to a joke
09:31:43 <CowGirl> not defining a base case?
09:31:53 <sjj> another .au'ian on #haskell ;)
09:31:54 <Igloo> lol
09:31:57 <CowGirl> lol....would love to know the punch line
09:32:21 <hdaume> i was guessing it would be something where the second error was a recursive usage of itself or something
09:32:26 <CowGirl> is not defining the base case on error?
09:32:41 <sjj> CowGirl: yes, it results in infinite recursion.
09:32:48 <Igloo> Which isn't necessarily an error
09:32:52 <sjj> true.
09:33:07 <hdaume> i'd say not having a base case and having the inductive case not inductive....i.e., fact n = n * fact n or something
09:33:23 <sjj> Igloo: speaking of which, does ghc implement TCO?
09:33:43 <sjj> CowGirl: you in sydney?
09:33:49 <Igloo> No idea
09:34:07 * Igloo only vaguely recognises the acronym
09:34:18 <sjj> tail-call optimization
09:34:20 <CowGirl> yeah
09:34:36 <Igloo> Oh, not what I thought then. Yes, it does.
09:34:50 <sjj> ahhh.
09:35:06 <sjj> CowGirl: cool ;) i'm in Brisbane.
09:35:40 <CowGirl> how is it up there?
09:35:51 <sjj> cold and late ;(
09:36:22 <CowGirl> same here!
09:37:37 * sjj thinks it's cool that most AU unis teach Haskell
09:38:05 <CowGirl> i think its nuts!
09:38:14 * andersca bounces
09:39:41 <cale> CowGirl: what's nuts about it?
09:40:27 <CowGirl> i just dont think it helps to explain programming in general
09:41:37 <CowGirl> i've done other languages, and i just dont find this one helpful
09:41:45 <CowGirl> nothing wrong with the langauge in general
09:41:54 <CowGirl> i dont mean that
09:42:00 <CowGirl> just dont find it useful
09:42:14 <cale> Hmm... I think a lot of algorithms come out very nicely in Haskell. I could never remember quicksort until I saw it done in Haskell.
09:43:01 <Igloo> quicksort doesn't really make sense in Haskell, though
09:43:28 <Igloo> But mergesort is nice in Haskell
09:44:07 <sjj> hrm, howcome you think QS dosen't make sense?
09:44:26 <Igloo> Because it's not in place
09:44:31 <wli> proxmapsort is one that hurts
09:44:35 <wli> well
09:44:41 <Igloo> And you can't have a random choice of pivot, or even pivot about the middle nicely
09:44:42 <wli> ghc at least has O(1) arrays
09:44:53 <wli> Igloo: you can
09:44:54 <Igloo> For reading only
09:44:56 <wli> Igloo: you just need arrays
09:45:33 <Igloo> And algorithms tend to be described in lists for simplicity
09:46:38 <cale> I was just impressed by how clear and concise it was to say qsort (x:xs) = qsort (filter (<x) xs) ++ [x] ++ qsort (filter (>=x) xs)
09:47:04 <Igloo> Hmm, I guess
09:47:19 <Igloo> That should probably be calledd partition sort or something though
09:51:42 <CowGirl> how would i write a function....   takes as input a list and returns a list of all its sublists??  e.g...
09:52:34 <CowGirl> subLists "Sub"         > ["","b","u","ub","S","Sb","Su","Sub"]
09:52:59 <andersca> it's pretty easy, think about it recursively :)
09:53:03 <Igloo> First crack at GHC 6.0 debs: http://people.debian.org/~igloo/  Let me know of any problems please (igloo@earth.li)
09:57:37 <Igloo> @topic-snoc "GHC 6.0 pre-debs: http://people.debian.org/~igloo/"
09:57:48 <Igloo> Oh well
09:57:56 <cale> CowGirl: manage to get it?
10:04:22 <BlitzNL> I was looking at the haskell syntax and I noticed the one for datatypes looks like 'data cs => S tv1 .. tvn = etc'. I don't understand the `cs =>` part.. what about it?
10:04:32 <Igloo> OK, the string "hrelslack.xbm" doesn't appear in any file in the GHC source, so what is it for?
10:04:32 <hdaume> BlitzNL: it's useless
10:04:50 <BlitzNL> hdaume: It must have some use ;)
10:04:59 <hdaume> BlitzNL: you can write, for instance: 'data Num a => Foo a = Foo a'
10:05:10 <hdaume> and then you can only construct 'Foo a' when a is an instance of Num
10:05:27 <hdaume> i say it's useles because functions which use Foos cannot make use of the class constraint
10:05:28 * Igloo tries without the extension
10:05:36 <Igloo> and vanishes to get some food
10:05:40 <hdaume> for instance, you cannot write 'addOneFoo (Foo a) = Foo (a+1)'
10:05:52 <hdaume> because addOneFoo doesn't "know" that 'a' is an instance of Num
10:05:53 <BlitzNL> hdaume: mm ok thnx
10:05:58 <hdaume> it's completely and utterly useless.
10:06:21 <hdaume> if you look through the mailing list, you'll find some emails from SPJ saying he wishes they had gotten rid of it
10:10:56 <Darius> hdaume: One situation in which it's convenient is if you have function types in the data structure.
10:13:51 <hdaume> Darius: how so?
10:20:58 <Darius> Actually I think you're right, Haskell would just infer the proper types whenever you used them.
10:23:30 <hdaume> BlitzNL: John Hughes tried to make them useful in his restricted datatypes paper (excellent paper!) but he and I started working on implementing it and it turns out that the lazy context reduction discussed in the paper doesn't really work as it should and we couldn't figure out a way around it (though we didn't put too much time into it)
10:57:22 * Igloo starts another 2 hour run and crosses his fingers
11:54:39 <Marvin--> heh
11:58:20 <SyntaxPolice> Igloo: bless you for the ghc debs
12:00:06 <Heffalump> did he sneeze them out?
12:00:28 <andersca> that is how debs are made
12:05:37 <Marvin--> yup, dpkg-buildachoo
12:06:28 <Marvin--> Koen advertises hws-wp for me on g-h-u :)
12:06:37 <Marvin--> too bad dum.chalmers.se is broken :(
12:06:46 <andersca> what's g-h-u?
12:06:50 <Marvin--> glasgow-haskell-users
12:07:54 <andersca> ah, cool
12:10:07 <andersca> hmm, how does FFI work with inout pointers?
12:10:15 <Marvin--> inout pointers?
12:10:18 <Marvin--> are there another kind?
12:10:42 <andersca> ok, how does FFI work with pointers :)
12:10:53 <andersca> like, void foo (void *b);
12:11:10 <Marvin--> foreign import ccall foo :: Ptr () -> IO ()
12:11:13 <Marvin--> or something like that
12:11:20 <andersca> ah, interesting
12:11:35 <Marvin--> or Ptr SomeOtherType  I guess
12:13:00 <andersca> don't I need to return anything? like the new value of my pointer
12:13:52 <Marvin--> stick an 'unsafe' something in there
12:13:56 <Marvin--> no
12:14:03 <Marvin--> pointers are pointers, you can peek and poke them in the IO monad
12:14:43 <Marvin--> typically you do something like  foreign import ccall unsafe "static stdlib.h mkstemp" c_mkstemp :: CString -> IO Int
12:14:53 <Marvin--> and then write a haskell wrapper called (in this case) mkstemp
12:15:23 <andersca> oh right
12:15:24 <Marvin--> mkstemp str = withCString str $ \cstr -> do { fd <- c_mkstemp cstr ; ... }
12:15:49 <Marvin--> in my mkstemp function, I do peekCString to get the actual file name
12:17:11 <Marvin--> the ffi is really neat
12:18:08 <andersca> do I need to turn on the ffi in ghc?
12:18:59 <Darius> yes, with -fffi (or -ffi and I believe -fglasgow-exts does it too)
12:19:05 <andersca> ah -fglasgow-exts did it
12:25:37 <andersca> woohoo
12:25:40 <andersca> my ioctl works
12:26:01 <andersca> foreign import ccall unsafe "ioctl" c_ioctl :: Int32 -> Int32 -> Ptr Word8 -> IO Int32
12:32:24 <andersca> but I didn't like the way I had to convert an Fd to an Int32
12:32:29 <andersca> ejectCD :: Fd -> IO ()
12:32:30 <andersca> ejectCD fd = do c_ioctl (toEnum (fromEnum fd) :: Int32) 0x5309 nullPtr 
12:32:30 <andersca> 		return ()
12:33:43 <Marvin--> ugh
12:33:53 <Marvin--> can't you use an FD instead, or something? or Handle?
12:34:07 <Marvin--> I don't remember those APIs
12:34:12 <andersca> yep
12:34:34 <andersca> I'm using the new ghc6 posix api
12:36:03 <Marvin--> is there no way to get a fileno from a Handle?
12:36:45 <andersca> oh wait
12:36:50 <andersca> FD is an Int
12:36:57 <andersca> so I just need to convert from an Int to an Int32
12:37:29 <Marvin--> you shouldn't even have to do that
12:37:52 <Marvin--> you could probably do  c_ioctl :: Int -> Int -> Ptr Word8 -> IO Int
12:45:03 <andersca> hmm, I was wrong
12:45:07 <andersca> Fd is not an Int
12:47:46 <Marvin--> FD is an Int, Fd is not
12:47:48 <Marvin--> IIRC
12:50:48 <andersca> yeah
12:51:17 <Marvin--> yay, I found m&m sweets in the shop down on the corner
12:51:31 * andersca zips some tea
12:51:33 <andersca> doh, sips
12:51:53 <Riastradh> zipWith andersca water teaLeaves
12:52:25 <Marvin--> hohoho
13:03:39 <jlouis> Haskell syntax jokes, how neat
13:05:40 <Riastradh> It wasn't a syntax joke.
13:05:59 <Heffalump> t'was semantic
13:06:06 <Riastradh> 'Twas, you must mean.
13:06:20 <Heffalump> possibly.
13:06:32 <Heffalump> Well yes, if you apply the rules about apostrophes carefully.
13:06:52 <Riastradh> Or if you just use apostrophes in the right place.
13:07:31 <Heffalump> I doubt you'll find "twas" in any dictionary.
13:08:15 <jlouis> Heffalump: damn, you are right
13:08:28 <jlouis> thought semantics, wrote syntax. heh
13:08:36 * Riastradh calls Heffalump on this and looks it up.
13:09:23 <Marvin--> heh
13:09:45 * Heffalump remembers "The Night before Christmas"
13:09:52 * Heffalump suspects he'll be proved wrong :-)
13:11:16 <Riastradh> It -is- in the OED!
13:11:17 <Riastradh> Hah!
13:11:25 <Heffalump> bah :-)
13:12:01 <Marvin--> hmm, wasn't there an SC map based on that...
13:12:15 <Heffalump> SC?
13:12:20 <Riastradh> StarCraft, presumably.
13:12:23 <Marvin--> StarCraft
13:12:25 <Heffalump> ah.
13:12:32 * Marvin-- is a Blizzard geek
13:13:35 <Marvin--> it's pretty much the only reason I dual boot my computer
13:15:39 <ludde> you can run linux in vmware
13:15:53 <ludde> ;)
13:19:25 * Heffalump does that
13:19:35 * andersca only runs linux
13:19:48 <jlouis> linux ptah!
13:20:00 <jlouis> OpenBSD iowen.home 3.3 GENERIC#56 sparc64
13:20:02 <jlouis> ;P
13:20:24 <jlouis> andersca: man 2 sendto
13:20:27 <jlouis> ENOBUFS
13:20:34 <jlouis> note comment in ()
13:20:36 <jlouis> ;P
13:21:19 <andersca> is that why you use openbsd?
13:21:30 <andersca> because when you use sendto in linux and the buffers are full, you won't get an error?
13:22:10 <jlouis> You are completely right... No it is subjective preference ;P
13:22:41 <jlouis> I just like OpenBSD better than linux. At the university I am finely running on a RedHat box
13:23:59 * shapr only runs linux
13:24:08 * andersca gaboings
13:24:12 <andersca> did you see my ioctl shapr
13:24:22 * Riastradh runs OS X.
13:24:59 <shapr> andersca: no, where did you leave it?
13:25:14 <andersca> foreign import ccall unsafe "ioctl" c_ioctl :: Int -> Int -> Ptr Word8 -> IO Int
13:25:14 <andersca> ejectCD :: Fd -> IO ()
13:25:14 <andersca> ejectCD fd = do c_ioctl (fromEnum fd) 0x5309 nullPtr 
13:25:14 <andersca> 		return ()
13:25:28 <shapr> heh, cute :-)
13:25:43 <shapr> can I send messages to ALSAplayer that way?
13:26:00 <andersca> not unless alsaplayer is a kernel module :)
13:26:03 <shapr> I think it uses Unix sockets for communication
13:26:18 <andersca> just open a socket and write to it
13:26:21 <andersca> just like to a file
13:26:24 <shapr> oh
13:26:26 <shapr> that's easy enough
13:28:50 <shapr> @topic-snoc #haskell GHC 6.0 pre-debs: http://people.debian.org/~igloo/
13:28:50 <lambdabot> topic doesn't parse
13:28:52 <Marvin--> ludde: I guess I could run windows in vmware, but I haven't been bothered to configure it
13:28:56 * shapr whaps lambdabot 
13:28:57 <Marvin--> ludde: and I can't afford a license
13:29:06 <andersca> Marvin--: you prolly can't run *craft 
13:29:07 --- topic: set to '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 6.0 Released -http://www.haskell.org/ghc/","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/"]' by shapr
13:29:11 <shapr> @topic-snoc #haskell GHC 6.0 pre-debs: http://people.debian.org/~igloo/
13:29:12 --- topic: set to '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 6.0 Released -http://www.haskell.org/ghc/","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/","GHC 6.0 pre-debs: http://people.debian.org/~igloo/"]' by lambdabot
13:29:13 <Marvin--> andersca: probably not
13:29:21 <Marvin--> andersca: though I heard it's possible to run them in WineX
13:29:31 <andersca> yeah
13:29:31 <shapr> yes, they work well in WineX
13:29:42 <Marvin--> well, SC I have run in WineX, War3 I haven't
13:30:11 <shapr> it does work
13:30:12 <Marvin--> (4)12 Days of SC.scx  :-)
13:30:22 <Marvin--> fun map ;)
13:30:33 <jlouis> topic-snoc? snoc as in the lazy cons sense?
13:30:43 <jlouis> hrmf, queue sense
13:30:51 <shapr> I think it's the reverse of cons, put it on the end
13:30:59 <jlouis> yup, queue sense :)
13:31:07 <shapr> Igloo: can I just add that as an apt-get source?
13:31:14 <Marvin--> "On the first day of christmas, my dearest gave to me: a brand new SCV"
13:31:44 <Heffalump> I think he's not here.
13:31:50 <jlouis> 2 lists and your queue will be fast (amortized, non-persistently)
13:32:25 <Darius> asymptotically
13:32:40 <Marvin--> jlouis: yes, and my degree project program can find bugs in it! :-)
13:32:52 <Heffalump> hehe
13:32:54 <Marvin--> it's one of my test cases :)
13:33:23 <Heffalump> so how does your degree project differ from QC?
13:33:55 <Marvin--> it uses a FOL prover to prove the existance of a counter example
13:34:58 <jlouis> Marvin--: nice. FOL is enough to attack that? No need for HOL?
13:35:00 <Marvin--> now let's see if I can compile winex
13:35:16 <Heffalump> so can it also prove the non-existence of one?
13:35:25 <Marvin--> jlouis: it's more on an order of "HOL is too complicated, let's see what we *can* do with FOL"
13:35:27 <Marvin--> Heffalump: no :)
13:35:39 <jlouis> Marvin--: ah, hehe, fair nuff'
13:35:39 <Heffalump> even given a precise QC-like spec?
13:35:40 <Marvin--> I blame it all on semi-decidability
13:35:41 <Heffalump> pity :-)
13:35:48 <jlouis> hi Smerdyakov 
13:36:10 <shapr> Marvin--: winex is easy to compile, takes nearly no time.
13:36:23 <shapr> and it runs like lightning on SMP :-)
13:36:33 <Marvin--> shapr: yeah I've had it compiled before, but lost it somehow
13:36:47 <Marvin--> Heffalump: Koen and I are working under the assumption that bugs are common :-)
13:36:57 * Darius will try ar'ing libHSbase.a again soon.
13:37:00 <andersca> bugs _are_ common
13:37:17 <shapr> I still wish SlowProve hadn't been a bad name.
13:37:31 <shapr> or that I could come up with something equally nifty but better for advertising.
13:37:47 <Darius> andersca: unfortunately, specifications are no exception
13:38:35 <Marvin--> damn, cvs.sf.net isn't happy with me right now
13:38:49 <andersca> Marvin--: keep trying
13:38:53 <Riastradh> cvs.sf.net is pretty unhappy most of the time.
13:39:18 <shapr> yup
13:39:20 <shapr> it sucks
13:39:35 <shapr> Marvin--: I can tar up my winex checkout from a week or two ago if you want
13:39:35 <Riastradh> Most people are pretty unhappy of cvs.sf.net most of the time, too.
13:39:38 <Marvin--> cvs [checkout aborted]: end of file from server (consult above messages if any)
13:39:45 <shapr> that's one reason I want to switch to darcs on haskell.org
13:39:45 <Marvin--> shapr: sure, thanks
13:39:52 <Marvin--> Riastradh: indeed :/
13:40:09 <shapr> hm, make clean first...
13:40:17 <shapr> will that be enough?
13:40:39 <Marvin--> probably
13:40:42 <shapr> ok
13:41:28 * Marvin-- is cheerfully eating colourful m&m sweets :-P
13:41:45 <Marvin--> yum
13:42:01 <Darius> I don't remember the last time I've had M&Ms.
13:42:16 <Marvin--> me neither
13:42:22 <shapr> I had some two years ago.
13:42:28 <Marvin--> probably something like ten years ago
13:42:53 <Marvin--> when we were on vacation in denmark, I always bought m&ms on the ferry :)
13:44:20 <Marvin--> AHA, now it replies on ping, maybe I can check out!
13:44:24 * Marvin-- sighs
13:44:24 <Marvin--> nope
13:44:36 <shapr> does PyOpenSSL require Twisted?
13:44:49 <Marvin--> no
13:44:52 <shapr> ok
13:44:59 <Marvin--> ah wait, cvs.sf.net worked, cvs.sourceforge.net didn't
13:45:03 <Riastradh> Bah, Python being discussed in #haskell!?
13:45:12 <shapr> Riastradh: sorry, someone's asking me on another channel.
13:45:24 <shapr> they want to do SSL stuff in Python. 
13:45:27 <steveh> good afternoon all
13:45:41 <shapr> last I heard, Marvin-- wrote PyOpenSSL
13:45:44 <Marvin--> Riastradh: because I'm not on #python :)
13:45:53 <Riastradh> Bah.
13:45:54 <shapr> Marvin--: where do I put it?
13:45:56 <steveh> or good whatever-time-it-is, wherever-you-are
13:46:01 <shapr> good evening steveh 
13:46:04 <Marvin--> shapr: ?
13:46:10 <shapr> the 10mb tbz?
13:46:18 <Marvin--> anywhere I can download it
13:46:21 <shapr> ok
13:46:39 <Riastradh> Evening?  Isn't it really early in the morning for you, shapr?  (i.e., earlier than when you awaken)
13:46:46 <shapr> two mins, it'll be in on kungens
13:47:13 <Marvin--> ok
13:47:22 <shapr> http://kungens.kemi.fi/~shae/winexy.tar.bz2
13:47:31 <shapr> um, four mins
13:47:37 <shapr> some sort of slowdown
13:48:06 <shapr> Riastradh: if someone wanted to ask me a deep scheme question, I would ask you, right? :-)
13:48:16 <Riastradh> shapr, probably.
13:48:30 <Riastradh> But you could at least join #scheme temporarily.
13:48:58 <Marvin--> Riastradh: so shapr should say "hey Marvin, join #python so I can ask you a question"
13:48:59 <shapr> ime, most channels aren't helpful right away, the guys who actually know the answers are usually doing something that teaches them more stuff.
13:49:00 <Marvin--> ?
13:49:16 <Riastradh> Or you could just PRIVMSG the person.
13:49:22 <shapr> hm, that's true.
13:49:24 <Marvin--> bah :)
13:49:46 <Marvin--> shapr: anyway, to further taunt Riastradh, twisted uses pyOpenSSL, not the other way around
13:49:51 <shapr> heh, ok
13:50:05 <shapr> someone on #zope wants to know, but doesn't want to hear *anything* about Twisted
13:50:11 <Riastradh> ((call/cc call/cc) (call/cc call/cc))
13:50:12 <Marvin--> hahaha
13:50:14 <Riastradh> Take that!
13:50:15 * shapr grins
13:50:17 <Marvin--> heh
13:50:24 <shapr> sadly, Twisted is taking over #python
13:50:28 <CrashChaos_> how do I get the length of a list?
13:50:34 <andersca> length 
13:50:55 <shapr> Marvin--: ok, it's up
13:50:56 <andersca> or foldr (+) 0
13:51:10 <shapr> Marvin--: hey, is Moshez going to visit you in a bit?
13:51:26 <Riastradh> foldr (+) 0 will give you the sum of the elements in a list.
13:51:34 <andersca> sorry
13:51:40 <Marvin--> shapr: I don't know if he's coming by Gˆtebog on his way to Oslo
13:51:46 <shapr> I heard he will.
13:51:54 <Marvin--> foldl' (const (+1)) 0
13:51:59 <shapr> Bea is considering that we go down there and hang out for a day.
13:52:04 <Marvin--> coo'
13:52:20 <Riastradh> shapr, watch out that he doesn't squish you, though.
13:52:24 <shapr> then I'll get to find out if my hair really is longer than yours.
13:52:33 <jlouis> Riastradh: what does that one end up with? (\x.x x) (\x.x x) and then the trying of a beta-red?
13:52:42 <Riastradh> jlouis, what does what one end up with?
13:52:47 <andersca> shapr: when?
13:52:47 <Riastradh> ((call/cc call/cc) (call/cc call/cc))?
13:52:52 <jlouis> yeah
13:52:58 <shapr> andersca: just before debconf I think
13:53:03 <Riastradh> Well, (call/cc call/cc) grabs the current continuation.
13:53:04 <andersca> when is debconf?
13:53:10 <shapr> I dunno
13:53:14 <shapr> Marvin--: when is..
13:53:18 <Marvin--> andersca: July 12-20
13:53:21 <andersca> I'm going to dublin on friday!
13:53:25 <shapr> oh well 
13:53:28 <Riastradh> Apply (cc1 cc2), where cc1 is a continuation to itself, and cc2 goes into the place of cc2.
13:53:32 <Riastradh> Er, into the place of cc1.
13:53:38 <shapr> andersca: I won't be able to buy you a beer this time it seems.
13:53:52 <Riastradh> Then that turns into:  (cc2 cc2)  and cc2 goes into the place of the original cc2.
13:54:00 <andersca> shapr: there's always Enum.succ
13:54:00 <Riastradh> That turns it back into (cc1 cc2) and the process repeats again.
13:54:11 <shapr> truly
13:54:12 <jlouis> Riastradh: ah, yes... I see that now
13:54:31 <shapr> Marvin--: are you getting it?
13:54:54 <Marvin--> shapr: sorry for hassling you, cvs.sf.net woke up just before you'd uploaded it :-(
13:55:01 <shapr> heh, no worries
13:56:39 <Marvin--> actually,  foldl (flip (const (1+))) 0  or  foldr (const (1+)) 0
13:56:44 * Marvin-- has finished geek:ing now
13:57:36 <Riastradh> Why (flip (const (1+))?  Why not (const (+1))?
13:58:08 <Riastradh> Oh, duh.
13:58:14 <Riastradh> Er, wait.
13:58:14 <Marvin--> exactly :)
13:58:15 <jlouis> speed issue
13:58:25 <jlouis> ?
13:58:37 <Marvin--> foldl (const (1+)) 0  will only add 1 to the last element of the list
13:59:31 <jlouis> const is the K combinator?
13:59:56 <shapr> I think so
14:00:05 <andersca> const x is \_ -> x
14:00:12 <andersca> I think
14:00:17 <norpan> andersca is right
14:00:21 <andersca> norpan: as always
14:02:02 <norpan> and that is the K combinator of course
14:03:19 <shapr> midsummers day is nearly here.
14:03:31 <Marvin--> indeed, and then it'll only get darker and darker
14:03:48 <Marvin--> (saying that at home earns me a grumble and much anguish from my mother)
14:03:48 <shapr> Yes, but I'm planning on spending all of my waking hours outside for the next few days
14:03:58 <shapr> I better print out more papers.
14:04:42 <Marvin--> ugh, now I've eaten too much m&ms
14:04:55 <shapr> :-)
14:05:40 <CrashChaos_> hm.. wasn't 'in' supposed to deliver the count of same elements in a list? or did I get something wrong there?
14:06:24 <Darius> 'in' is a keyword
14:06:53 <CrashChaos_> let me rephrase that.. is there a predefined method that counts how often x appears in xs ?
14:07:06 <Riastradh> Set.count . foldl (\s e -> Set.insert e s) Set.empty
14:07:22 <Riastradh> I think.
14:07:43 <Riastradh> Better yet:   Set.count . foldl (flip Set.insert) Set.empty
14:07:58 <Darius> uh, if you are going to do it round-about, then length [a | a <- xs, a == x] would be simpler
14:08:15 <Riastradh> Oh, whoops.
14:08:17 <Marvin--> I managed to confuse the English guy at work with my Swedish locale settings :-P
14:08:27 * Riastradh misread CrashChaos.
14:08:41 <CrashChaos_> thx
14:10:15 <Marvin--> and I was surprised how hard it was to understand him before I got used to his british english, I'm way too used to american
14:12:15 <Darius> Crazy Brits with their 'aluminium'.
14:12:29 <Marvin--> heh
14:13:37 <Riastradh> Crazy Americans who had to butcher their language in a failed and impossible attempt to make English simpler.
14:14:01 <emu> simpler?!
14:14:17 <Darius> Americans (in general) didn't try to make English simpler.  My English book in 11th grade described Webster as a crackpot.
14:14:28 <Riastradh> Good.
14:14:31 <Marvin--> heh
14:14:34 <Riastradh> (the latter sentence, that is)
14:16:29 <Riastradh> Hi.
14:16:40 <shapr> hi Riastradh 
14:17:11 <Riastradh> Er.
14:17:15 <Riastradh> I was greeting datk, shapr.
14:17:18 <Marvin--> Fr.
14:17:44 <Riastradh> Gr.
14:19:46 <Darius> Hr.
14:20:17 <shapr> Wr.
14:20:30 <Marvin--> talk about jumping to conclusions
14:21:07 <Riastradh> He didn't conclude yet.
14:21:08 <Riastradh> Zr.
14:22:30 <Marvin--> zipWith (:) ['E'..'Z'] (repeat "r")
14:22:31 <Marvin--> or something
14:22:39 <Riastradh> E?  No, we began late.
14:22:48 <Riastradh> zipWith (:) ['A'..'Z'] (repeat "r")
14:22:53 <Marvin--> oh
14:23:03 <shapr> zipWith (tape) Riastradh mouth
14:23:04 <shapr> ;-0
14:23:08 <shapr> oops ;-)
14:23:12 <Marvin--> :)
14:23:24 <Marvin--> I'm off to bed
14:23:26 <shapr> me too
14:23:27 <Riastradh> And you forgot the period.
14:23:29 <Darius> Yeah, that doesn't typecheck, neither Riastradh or mouth is a list.
14:23:34 * shapr laughs
14:23:49 <Marvin--> Riastradh: true
14:24:46 <Darius> zipWith tape (unsafeCoerce Riastradh) (unsafeCoerce mouth)
14:24:52 * shapr snickers
14:25:27 <Heffalump> isn't that dangerous for Riastradh?
14:25:54 <shapr> I guess unsafely coercing someone involves at least the threat of violence.
14:26:26 * Riastradh refuses to be coerced.
14:26:46 * Riastradh whips out two MP5-10s.
14:26:52 <Riastradh> THREATEN THIS!
14:27:04 * shapr whips out a bunch of Monads and Arrows
14:27:06 * Heffalump shoots Riastradh with a convenient Supersoaker
14:27:27 * shapr quickly generalizes one of the Arrows into a Local Thermonuclear War
14:27:33 <steveh> guns don't kill people, coercive type casting  kills people?
14:27:36 * shapr laughs
14:28:04 * Riastradh shoots three rounds at shapr and Heffalump each.
14:28:51 * shapr quickly specifies instance MP5Round Arrow where ...
14:29:55 <Riastradh> What?
14:30:05 <Riastradh> Don't you mean 'instance Arrow MP5_10Round where ...'?
14:30:22 <Marvin--> hmm, British/American dictionary, sounds like something I would need
14:30:44 * Riastradh in the meantime loads a conveniently located .45 Magnum with hollow-tip bullets.
14:30:51 <Riastradh> Add an instance of arrow to THIS!
14:31:01 <shapr> Riastradh: oh right
14:31:03 * Riastradh blasts huge holes in random people therewith.
14:32:11 <Darius> Riastradh: Another Fine Example of American Youth
14:32:12 <shapr> btw, the IMI .50 Action Express is more impressive.
14:32:45 <Riastradh> Darius, er, but I'm definitely not a typical American, and how do you know whether I'm a youth or not?
14:33:07 <shapr> Hey, I'm still a youth.
14:33:26 <Riastradh> Perhaps, but how is that relevant? -- maybe I'm 50 years old.
14:35:01 <shapr> culturally speaking, I suspect you're not older than 23
14:35:21 <Riastradh> *cryptic grin*
14:35:36 <Marvin--> hey I take offense at that, I turned 23 yesterday
14:35:54 <Marvin--> (I haven't figure out exactly how I take offense to it, but one way or another...)
14:36:44 <shapr> Marvin--: I was making a US specific comment :-P
14:36:49 <Marvin--> oohh
14:36:54 * Heffalump returns from failing to find out anything useful about Riastradh from google
14:37:01 <Riastradh> *cryptic grin*
14:37:17 * Heffalump shines a bright light on Riastradh instead
14:37:25 * shapr grins
14:37:36 <Marvin--> I wonder what wine is doing, it's been sitting there doing god-knows-what, taking 95% CPU and I still haven't seen it start the war3 install
14:38:08 <shapr> Marvin--: it's building font metrics
14:40:17 <wli>  /last #osdev 999
14:40:20 <wli> ergh
14:40:35 * Heffalump finally finds Riastradh's (probable) real name but still can't get an age :_)
14:40:38 <Heffalump> s/_/-/
14:40:53 <wli> well, why do you care?
14:41:20 <Heffalump> only because he's making cryptic grins :-)
14:41:26 <shapr> gee, I try to advertise all my details, and most people never google for me ;-)
14:41:38 <shapr> or at least I never hear about it.
14:41:43 <shapr> I must be boring ;-)
14:41:44 <Heffalump> shapr: well, where's the challenge in that?
14:41:49 <shapr> hm, good point.
14:43:13 * Heffalump is quite pleased that stuff I've written completely dominates the google results for my name, because it buries some results I'd rather people not find that easily :-)
14:45:02 <Darius> Now people are curios Heffalump
14:45:50 <Heffalump> well, if you want to read through all 100 google results for my name, you might just find what I'm referring to :-p
14:47:08 <shapr> is it all the .NET stuff?
14:47:14 <Heffalump> no
14:47:30 <shapr> I got 827 hits on your name.
14:47:56 <shapr> is it the stuff about threating small stuffed animals?
14:48:02 <shapr> "threatening" ?
14:48:24 <Marvin--> shapr: well, starting starcraft from d:\games\... is really quick and works perfectly
14:48:34 <shapr> yay
14:49:12 <shapr> the collection of earth.li people is impressive.
14:49:33 <Heffalump> shapr: nope
14:49:37 <Heffalump> (where? :-)
14:49:44 <shapr> Heffalump: your other name ;-)
14:50:17 <shapr> Heffalumps as a class threaten small stuffed animals, yes?
14:50:29 <Marvin--> likewise, g:\install.exe with the SC CD in the drive is fast
14:50:36 <Heffalump> my other name?
14:50:41 <Heffalump> oh.
14:50:42 <Marvin--> fixme:msvcrt:__CxxFrameHandler (0x40643884,0x408519d0,0x40643520,0x406434b0):stub? <- I get zillions of these
14:50:47 <Heffalump> errm, I guess :-)
14:50:57 <shapr> hi inkedmn, wassup?
14:51:07 <shapr> Heffalump: too obvious, eh?
14:51:23 * Heffalump gets bored of looking through the google results
14:51:47 <Marvin--> googlefight forever
14:51:50 <inkedmn> shapr: not much, you?
14:52:42 <Marvin--> http://www.googlefight.com/cgi-bin/compare.pl?q1=Heffalump&q2=Ganesh+Sittampalam&B1=Make+a+fight%21&compare=1&langue=us :P
14:53:08 <shapr> inkedmn: happily Haskelling
14:53:56 <inkedmn> heh
14:54:19 <Marvin--> now I'm really really off to bed
14:54:26 <shapr> g'night Marvin-- 
14:54:32 <Marvin--> (well, not really, gotta hop into the shower first, but then I'm really really really off to bed :P)
14:54:37 <shapr> heh
14:54:43 <shapr> I getting sleeeepy.
15:00:09 * shapr goes to sleep
15:35:14 <Darius> "We need magical Eq because VanillaRegs come in multiple flavors."
15:35:25 <Riastradh> VanillaRegs?
15:40:50 <Darius> GHC internals
16:16:09 <Riastradh> Hi.
16:19:51 <Smerdyakov> You'll scare more of them off, Riastradh!
16:20:43 <Riastradh> HI!
16:20:45 <Riastradh> HI!
16:20:51 <Riastradh> Muwahahahaaa!
16:21:00 * mgoetze frowns at Riastradh 
16:21:08 * Riastradh throws a Go piece at mgoetze.
16:21:33 <mgoetze> it's called goishi, man. get it straight.
16:22:31 * Riastradh throws another Go piece at mgoetze.
16:52:39 * Igloo mutters at GHC compiles breaking
16:54:32 <Igloo> Oh! It's broken now I have GHC 6 installed. Well that can't be good.
16:56:39 <Heffalump> do your ghc6 debs coexist with ghc5?
16:57:12 <Pseudonym> GHC6 debs?  Where?  Where?!
16:57:43 <Igloo> Yes
16:57:52 <Igloo> http://people.debian.org/~igloo/
17:00:32 <Pseudonym> Oh.  They're for unstable?
17:00:39 <Igloo> Yes
17:00:45 <Pseudonym> Damn.
17:00:48 <Pseudonym> Oh well. :-)
17:01:15 <Igloo> The sources should recompile for stable easily enough when they work
17:01:22 <Pseudonym> I suppose I couldn't prevail upon you for a copy of the .mk files you used?
17:05:01 <Igloo> http://people.debian.org/~igloo/ghc6-source-only-2003-06-11-02/
17:05:15 <Pseudonym> Cool, thanks.
17:13:16 * Igloo wonders if this is actually intended to work without the -prof libraries available
17:14:14 <Pseudonym> OK, I'm a dunce.
17:14:23 <Igloo> ?
17:14:24 <Pseudonym> patch doesn't like the .diff file
17:14:43 <Pseudonym> I'm clearly missing something here.
17:14:44 <Igloo> dpkg-source -x *.dsc should apply it for you
17:14:48 <Pseudonym> Ah.
17:14:50 <Igloo> You might be missing -p1
17:14:58 <Igloo> (with patch)
17:16:25 <Pseudonym> Possibly.
17:16:41 <Pseudonym> Thanks.  Compiling like a charm now.
17:17:52 <Igloo> Presumably you have ghc5-prof installed?
17:18:57 <Pseudonym> No, I have a version I compiled some time ago in /usr/local/bin
17:19:40 <Igloo> Oh, including profiling libraries?
17:20:25 <Pseudonym> I believe so.
17:20:34 <Igloo> OK
17:36:29 <steveh> phew
17:36:43 * steveh finally got xemacs to do sane font-lock coloration in tty mode
21:39:32 * shapr yawns
21:40:06 <Pseudonym> G'day.
21:40:18 <shapr> g'day Pseudonym 
21:43:48 <Pseudonym> So, has SPJ offered to be a judge?
21:46:52 <shapr> nah, I decided I didn't want to send him an email till I had a better idea of the relevant dates.
21:50:32 <shapr> how long do you think the next contest should run?
21:51:36 <shapr> hi sjj 
21:52:07 <Pseudonym> How long did we have last time?
21:52:26 <shapr> I think it was only two weeks last time
21:52:39 <shapr> something very short since it was just a prototype
21:53:39 <Pseudonym> The IOCCC has two months.
21:54:10 <Pseudonym> I think we should have one month, but we'll announce that it's coming up early.
21:54:25 <Pseudonym> The one month is because it's so much quicker to program in Haskell than C.
21:54:32 <shapr> heh
21:54:36 <shapr> good idea
21:54:57 <Pseudonym> So what I'd do is get out an announcement ASAP, and say it runs from 1 July to 1 August.
21:55:11 <Pseudonym> For example.
21:57:49 <shapr> I think that's a great idea.
22:16:14 --- topic: set to '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 6.0 Released -http://www.haskell.org/ghc/","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/","GHC 6.0 pre-debs: http://people.debian.org/~igloo/","ghc-6.0 rpms: haskell.org/~pe' by juhp
22:16:56 <juhp> arg, -ETOPICTOOLONG
22:17:15 <shapr> you could cut out the GHC 6 announcement?
22:17:39 <Pseudonym> We could cut "mo' nads than you".
22:17:45 <shapr> that too :-)
22:17:49 <juhp> ok :)
22:18:09 <Pseudonym> Could also cut the hardcopy announcement.
22:18:18 <Pseudonym> That's not really news any more.
22:18:47 <Pseudonym> I'd keep GHC 6 for a week or so more.
22:19:27 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/","GHC 6.0 pre-debs: http://people.debian.org/~igloo/","ghc-6.0 rpms: http://haskell.org/~petersen/rpms/ghc/"]' by juhp
22:19:32 <juhp> done
22:19:38 <juhp> how's that?
22:19:50 <shapr> looks good to me.
22:19:54 <Pseudonym> Cool.
22:20:38 <juhp> (the rpms are still evolving, but it would be nice if people tested them :)
22:21:10 <juhp> i added ghc5.04.3 packages this morning, allowing parallel install with ghc-6.0
22:21:56 * cleverdra wishes that there were an ARM ghc package.
22:30:05 <Pseudonym> The ARM shouldn't be too hard to target.
22:31:49 <cleverdra> Not a target that I'm capable of making, though, and my little Z definitely can't handle a ghc compile (and I'd cry if, like every single time I tried to compile ghc on my desktop, the compile eventually failed for inexplicable haskell-code reasons).
22:32:15 <Pseudonym> Can you run hugs?
22:32:53 <cleverdra> Yes, though I haven't tried it yet.
22:42:22 <shapr> anyone seen a SQL parser for Haskell?
22:46:43 <Pseudonym> gr
22:46:45 <Pseudonym> Sorry.
22:46:50 <Pseudonym> No, but I have one in yacc format.
22:47:28 <Pseudonym> That should be straightforward enough to translate into happy or parsec.
22:48:26 <shapr> good point
22:49:04 <Pseudonym> Damn, the ftp site is down.
22:49:09 <Pseudonym> It's in ftp://ftp.iecc.com/pub/file
22:51:47 <Pseudonym> Oh, here it is.
22:51:48 <Pseudonym> http://examples.oreilly.de/english_examples/nutshell/lexyacc/
22:51:52 <Pseudonym> It's progs.tar.gz
22:52:10 <Pseudonym> It's from the O'Reilly lex & yacc book.  (Which was money well spent when I spent it 10 odd years ago.)
23:16:32 <Darius> GHC folk are probably tired of getting that same bug report over and over again.
23:16:57 <Pseudonym> Which one?
23:18:29 <Darius> The one that panics about GHCziErr.
23:18:43 <Pseudonym> Oh, yes.
23:30:54 <Pseudonym> Can anyone think of a succinct definition of a redex?
23:31:01 <Pseudonym> This is for the wiki.
23:31:10 <Pseudonym> At the moment I have: A ReducibleExpression (RedEx for short) is an expression which takes work to evaluate.
23:31:14 <Pseudonym> I'm not entirely happy with that.
23:31:57 <Pseudonym> I briefly considered "an expression which is not in WHNF", but that's not entirely true either.
23:32:11 <Pseudonym> Oh, hang on.
23:32:14 <Pseudonym> @foldoc redex
23:32:16 <lambdabot> *** "redex" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
23:32:16 <lambdabot> redex
23:32:16 <lambdabot>    Reducible Expression.  An expression matching the left hand
23:32:16 <lambdabot>    side of a {reduction rule} or definition.
23:32:20 <Pseudonym> Perfect.
23:34:09 * Darius pats lambdabot on the head and gives it a treat.
23:35:30 <Darius> the bloody thing is amazingly convenient
23:37:01 <Pseudonym> http://haskell.cs.yale.edu/hawiki/ReducibleExpression
23:37:06 <Pseudonym> How does that read?
23:41:53 <shapr> oh, WHNF would be good for the FundamentalConcepts page
23:42:04 <Darius> What's an expression that requires work to be done that isn't a value?
23:42:18 * andersca wabooms
23:42:22 * shapr yawns
23:42:37 <Pseudonym> Darius: showsPrec 5
23:42:41 <shapr> kids upstairs had a loud wake-up party at 6am 
23:42:46 <Pseudonym> That's not a value, but it's not a redex either.
23:42:59 <Darius> Functions are values too.
23:43:00 <Pseudonym> Or (+) 3
23:43:27 <Pseudonym> So is anything that is in WHNF a "value"?
23:44:30 <Pseudonym> You might be right.  Lambda calculus doesn't have the concept of a "value".
23:44:49 <Pseudonym> So I'm unclear what it is.
23:45:12 <Pseudonym> shapr: Who parties at 6am?  (Unless it's a carry-over from the previous night, of course.)
23:45:51 <shapr> several small children cheerfully going to school
23:46:03 <shapr> and they bang on the floor with some sort of hard something.
23:46:33 * Pseudonym added WHNF to the concepts page
23:48:08 <shapr> maybe LambdaLift is an intermediate concept?
23:48:16 <Pseudonym> I think of it as a refactoring.
23:48:35 <Pseudonym> I mean once it was an implementation technique, but now that's more of a curiosity IMO.
23:49:37 * shapr googles for eta expansion
23:50:06 <Pseudonym> @foldoc eta conversion
23:50:08 <lambdabot> No match for "eta".
23:50:08 <lambdabot> No match for "conversion".
23:50:11 <Pseudonym> Hmmm.
23:50:19 <Pseudonym> Really should be able to search for phrases.
23:50:38 * shapr googles for "eta expansion"
23:50:41 <shapr> er
23:50:51 <shapr> @foldoc "eta conversion"
23:50:52 <lambdabot> *** "eta conversion" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
23:50:52 <lambdabot> eta conversion
23:50:52 <lambdabot>    <theory> In {lambda-calculus}, the eta conversion rule states
23:50:55 <lambdabot>    	\ x . f x  <-->  f
23:50:57 <Pseudonym> Ah, it works.
23:50:59 <lambdabot>    provided x does not occur as a {free variable} in f and f is a
23:51:01 <lambdabot> [there's @more]
23:51:56 <shapr> @foldoc "beta conversion"
23:51:57 <lambdabot> *** "beta conversion" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
23:51:57 <lambdabot> beta conversion
23:51:57 <lambdabot>    <theory> A term from {lambda-calculus} for {beta reduction} or
23:51:58 <lambdabot>    {beta abstraction}.
23:52:02 <lambdabot>    (1999-01-15)
23:52:33 <Pseudonym> I wish foldoc were more consistent.
23:52:38 <Darius> Typically 'conversion' is only used for alpha conversion
23:52:52 <Pseudonym> I wish foldoc were more consistent about this.
23:56:51 <Pseudonym> I added Variable to the concept thing.
23:57:15 <Pseudonym> Should also add ParametricPolymorphism, I guess.
23:57:34 <Pseudonym> Oh, and Monad.
23:58:48 <Darius> Yeah, I was just thinking that polymorphism should be there, and rethinking monad.
23:59:18 <Pseudonym> Maybe Polymorphism, and ParametricPolymorphism, and perhaps AdHocPolymorphism.
23:59:40 <shapr> @foldoc category
23:59:42 <lambdabot> *** "category" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
23:59:42 <lambdabot> category
23:59:42 <lambdabot>    <theory> A category K is a collection of objects, obj(K), and
23:59:43 <lambdabot>    a collection of {morphisms} (or "{arrows}"), mor(K) such that
23:59:47 <lambdabot>    1. Each morphism f has a "typing" on a pair of objects A, B
23:59:49 <lambdabot>    written f:A->B.  This is read 'f is a morphism from A to B'.
23:59:51 <lambdabot> [there's @more]
