00:01:06 <Pseudonym> Still here.
00:01:19 <shapr> whee
00:01:51 <Pseudonym> Whoosh.
00:02:02 <shapr> I read that Daan used nested tuples instead of TREX for development of HaskellDB
00:02:41 <shapr> and Liang, Hudak, and Jones use nested tuples for their summand/union data structure in the monad transformers for modular interpreters papers
00:03:15 <Pseudonym> Well that paper predated TREX I'm pretty sure.
00:04:35 <shapr> could I make an abstract datatype that could be parameterized with any type, but still be nested with any combination of parameterized types?
00:04:43 <Darius> Liang, Hudak, and Jones used nested Eithers (Either a b would typically be represented as A+B in domain theory, products as AxB)
00:06:46 <shapr> can you nest Eithers of heterogenous type?
00:07:52 <shapr> has anyone here tried to build hircules?
00:07:59 <shapr> or succeeded?
00:10:39 <shapr> can classes be parameterised on classes?
00:11:21 * shapr tries
00:12:52 <Darius> What would the class declaration look like for that?
00:13:41 <shapr> class Collection c cxt where
00:13:41 <shapr>     empty :: cxt a => c a 
00:13:43 <shapr>     singleton :: cxt a => a -> c a
00:13:43 <shapr>     union :: cxt a => c a -> c a -> c a
00:13:43 <shapr>     member :: cxt a => a -> c a -> Bool
00:13:59 <shapr> instance Collection Set Eq where ...
00:14:22 <shapr> that's from Hughes' paper "Restricted Data Types in Haskell"
00:18:14 <shapr> so many research papers to read :-)
00:18:40 <Darius> I need to organize my collection.
00:18:51 <shapr> yes, then I can leech parts of it ;-)
00:19:19 <shapr> I would like to find some way to attach a paper to a wiki page and allow annotations
00:20:14 <shapr> I think it could be done with MoinMoin
00:20:19 <shapr> but not today...
00:20:20 <cale> shapr: like have png's of the pages inserted into a wiki page?
00:20:39 <shapr> cale: that would work, but would be bandwidth intensive
00:20:52 <shapr> I was thinking of turning PDFs and PSs into text,
00:21:09 <shapr> and then annotations could be anchored into the pages
00:21:30 <cale> There's a lot that doesn't go easily though - equations etc would have to be pulled out and made into images.
00:21:34 <shapr> that's true
00:21:40 <shapr> the PNG idea is better for that.
00:21:58 <shapr> on the other hand, some wikis already support turning inline LaTeX into images
00:22:16 <shapr> and if MoinMoin doesn't, it could easily be done.
00:22:35 <cale> http://vx.hn.org/wiki.pl <- my wiki
00:22:59 <cale> (It's currently tiny, since I just made it a while back, and hardly anyone knows about it)
00:23:20 <cale> It's more a convenient way for me to maintain my website.
00:23:41 <cale> It supports LaTeX and go diagrams (I coded the go diagram part myself.)
00:24:00 <cale> It's based off OddMuse.
00:24:03 <shapr> cool
00:24:19 <shapr> kensanata is the OddMuse guy, isn't he?
00:24:31 * shapr checks
00:26:02 <shapr> in any case, if papers could be loaded into wiki, even without annotations, useful connections could be recorderd
00:26:05 <shapr> recorded
00:27:02 <Pseudonym> shapr: Did that work, BTW?
00:27:05 * Pseudonym suspects not
00:27:10 <shapr> did what work?
00:27:16 <Pseudonym> Parameterising on classes.
00:27:17 <cale> Have you seen http://www.planetmath.org/ ? It's fairly interesting. It stores all the articles in LaTeX and converts them to html/png and autolinks them.
00:27:21 <shapr> no, it didn't work.
00:27:24 * Pseudonym nods
00:27:49 <Pseudonym> Much more likely: instance (Eq k) => Collection UnorderedList where { .. }
00:27:58 <Pseudonym> Much more likely: instance (Ord k) => Collection OrderedList where { .. }
00:27:59 <shapr> cale: wow, that's nifty, now I want planetlambda :-)
00:29:21 <shapr> heh, LoganH is one of the top users of planetmath
00:29:43 * shapr is unsurprised
00:30:16 <cale> he's userid 6, too :)
00:32:26 <Darius> shapr: Know about arXiv.org?
00:32:30 <shapr> I could spend many hours learning stuff from PlanetMath
00:32:44 <shapr> Darius: yes, but haven't seen it in a long time...
00:32:50 * shapr looks
00:33:35 <cale> arXiv is cool.
00:34:56 <cale> I usually use http://front.math.ucdavis.edu/ to access it though.
00:35:01 <Darius> unfortunately it's even harder to browse that citeseer is.
00:35:07 <shapr> I'd like a wiki better because I can attach code, notes, arguments, etc to the article entry
00:35:26 <Darius> cale: cool
00:35:34 <shapr> for example, Pseudonym once said he implemented the comonads stuff, and doesn't think OI is workable.
00:36:02 <Pseudonym> I thought it broke referential transparency.
00:36:04 <Darius> cale: is there a CS front too
00:36:10 <Pseudonym> Although I have some thoughts on that.
00:36:21 <cale> I'm not sure - I could have a look.
00:36:21 <shapr> Pseudonym: have you heard anything further on that? Didn't you email the author?
00:36:29 <Pseudonym> I did and got no reply.
00:36:37 <Pseudonym> Though I think I see the problem now.
00:36:40 <shapr> ?
00:36:49 <Pseudonym> I think that getChar isn't really a "projection" function.
00:37:04 <Pseudonym> Because it returns a different value every time you call it.
00:37:14 <shapr> I'd like to read those kind of notes about lots of papers.
00:37:15 <Pseudonym> Not like, say, "head".
00:37:23 <Pseudonym> I'm not sure though.
00:37:24 <Darius> There was some talk on haskell@haskell.org about it, the response (eventually) is that getChar (and I believe generally most OI foo -> ()) aren't right.
00:37:46 <Pseudonym> Yeah, that was me. :-)
00:41:28 <shapr> so, any comments on a journalwiki?
00:41:37 <shapr> see any unmentioned good or bad points?
00:41:46 <shapr> cale: I can't get to your wiki
00:42:03 <cale> hm? any message?
00:42:22 <shapr> just connection timed out, I'll traceroute
00:42:52 <cale> Might be my NAT box acting up again.
00:43:08 <shapr> looks like it
00:43:31 <cale> or possibly even name resolution, since my address is technically dynamic, though it hasn't changed in a while.
00:43:42 <shapr> yah, I have that problem too
00:43:45 <shapr> I want a static ip
00:43:54 <cale> try 65.95.17.248
00:44:17 <shapr> yah, that works
00:44:22 <cale> hrm
00:44:46 <shapr> hoi kosmikus 
00:44:52 <shapr> heh, strongbad's email :-)
00:45:16 <cale> yeah, I've been watching that every week since #11 or so.
00:45:22 <cale> :)
00:45:36 <shapr> I started doodling trogdor in class now
00:45:39 <shapr> I've been memed.
00:45:44 <kosmikus> goedemorgen
00:45:56 <shapr> hoe gaat?
00:46:24 <shapr> j'ai besoin de travailler maintenant
00:46:38 * shapr doesn't know how to say that in either dutch or german
00:47:26 <shapr> Pseudonym: your modified quine entry to IOHCC is very cool, are there other quines like that?
00:48:34 <Pseudonym> That's a deep definitional question.
00:48:48 <Pseudonym> Do you mean are there others waiting to be discovered?
00:48:57 <Pseudonym> Or have I written any others?
00:49:02 <shapr> have you written any others?
00:49:06 <Pseudonym> No.
00:49:22 <shapr> I was very impressed by that :-)
00:49:33 <shapr> I would never have considered doing that.
00:49:40 <Pseudonym> I can't remember if I wrote this one or not:
00:49:42 <Pseudonym> main=putStr(unlines[q 'r' r]);q n s=s++n:'=':show s;x=1;o=2;
00:49:42 <Pseudonym> r="main=putStr(unlines[q 'r' r]);q n s=s++n:'=':show s;x=1;o=2;\n"
00:50:00 <Pseudonym> Maybe I did.
00:50:31 <shapr> I haven't seen it before
00:50:43 <Pseudonym> Oh, there's x=1 and o=2 in there.  I must have.
00:50:51 <Pseudonym> Delete those and you have a slightly more minimal one.
00:51:29 <Pseudonym> That must have been an early attempt at getting it right.
00:51:43 <Pseudonym> The hard part, though, was for the entry, I had to duplicate the code _three_ times, not just two.
00:53:02 <Pseudonym> Two for the quine and once in the actual board.
00:53:17 <shapr> I think we should run another IOHCC soon
00:53:30 <shapr> SPJ wanted to see all the entries
00:54:20 <shapr> I told him the non-prize-winning entries were allowed to enter again
00:54:41 * Pseudonym nods
00:55:07 <shapr> hej Marvin-- 
00:55:33 <Marvin--> morgon
00:55:56 <shapr> det är tid för att arbeta
00:55:57 <Pseudonym> Did he give an opinion on the entries?
00:56:08 <shapr> no, he didn't say anything else. Want me to ask him?
00:56:22 <Pseudonym> No, only the judges' opinions matter.
00:56:26 <Pseudonym> :-)
00:56:31 <shapr> We could ask him to be a judge next time :-)
00:56:34 <Pseudonym> True!
00:56:39 <Marvin--> who?
00:56:42 <shapr> SPJ
00:57:07 <Marvin--> he asked about the IOHCC?
00:57:10 <Pseudonym> Besides, if there's going to be a "best abuse of the type system" entry, we need someone who can understand it.
00:57:18 <Marvin--> Pseudonym: yes :)
00:57:18 * shapr laughs!
00:57:32 <shapr> we should ask malcolm wallace as well
00:57:44 <Pseudonym> Or Mark Jones.
00:57:50 <shapr> and Lennart Augustsson, though I doubt he'd have time.
00:58:30 <Marvin--> heh, yeah, Lennart is one busy man
00:58:37 <shapr> I think the IOHCC is near and dear to the Haskell community, I got email from Augustsson and SPJ about it.
00:58:45 <Marvin--> shapr: cool!
00:58:50 <Darius> Pseudonym: I wanted to get some unsafeCoerce (via unsafePerformIO) action to get some really twisted stuff.
00:58:51 <Marvin--> what'd they say?
00:59:16 <Pseudonym> Darius: By all means enter your code next contest.
00:59:29 <Pseudonym> Abusing unsafeCoerce seems fair game to me.
00:59:29 <shapr> SPJ wanted to see all of the entries, I said the non-prize-winning entries were allowed to enter again, so we couldn't. and Augustsson just wanted to say this wasn't the first IOHCC, even though we didn't claim that.
00:59:48 <Darius> Pseudonym: It probably wouldn't be too portable ;)
01:00:04 <Pseudonym> If you consult the rules, you will note that it doesn't have to be.
01:00:05 <shapr> the rules are any latest release of a compiler
01:00:08 <shapr> or interpreter
01:00:23 <Pseudonym> Though the unsafeCoerce behaviour may actually depend on the platform.
01:00:28 <Pseudonym> In which case it might be ruled invalid.
01:00:34 <shapr> I still wish some of the other entries had won prizes, I really liked them.
01:00:39 <Pseudonym> Or possibly "worst abuse of the rules" if you can find a loophole.
01:00:40 <Marvin--> shapr: :)
01:01:26 <shapr> maybe next time :-)
01:01:49 <shapr> Pseudonym: when do you think we should have the 0.5th IOHCC?
01:02:19 <shapr> I'll have more spare time in the summer.
01:02:39 <shapr> tomorrow is my last swedish class till august
01:02:44 <cale> import fork and kill and get some use out of kernel race conditions too :)
01:03:07 <Darius> Hmm, I have a kind of twisted idea.
01:03:17 * shapr is scared :-)
01:03:51 <Darius> It's only a little twisted at this point, I'll work on twisting it more.
01:03:59 <Pseudonym> Should this be the 0.5th or the 1st?
01:04:04 <Pseudonym> Perhaps the 1%2th
01:05:23 <Pseudonym> Or the Succ Zero IOHCC
01:05:23 <shapr> well, Lennart Augustsson said the 1st IOHCC was many years ago
01:05:28 <shapr> oh, that's good :-)
01:05:53 <Pseudonym> Or you could use Church numerals.
01:06:17 <shapr> I always thought =>+ looks like a church on its side.
01:06:21 <Pseudonym> Damn, too many ideas for entries.
01:06:25 <Marvin--> shapr: *groan*
01:06:31 <Pseudonym> And I'm not allowed to next time, either.
01:06:51 <shapr> Pseudonym: if you would rather enter instead of be a juror...
01:06:54 <Marvin--> Pseudonym: we could switch seats, I don't have any ideas at all :P
01:06:55 <Pseudonym> Nah.
01:06:57 * Pseudonym had his fun
01:06:59 <shapr> I'd like for you to be a juror though :-)
01:07:16 <Pseudonym> It's actually a program I always wanted to write, so I got an excuse.
01:08:06 <shapr> "Suck Zero" sounds like a war cry from the Mathematical Justice League
01:08:20 * shapr imagines a math superhero shouting "SUCK ZERO"
01:08:34 <cale> hahaha
01:08:45 <Pseudonym> I won't tell you what it sounds like to me.
01:08:51 <Marvin--> Pseudonym: good
01:08:54 <Pseudonym> Needless to say, Justice Leagues don't enter into it.
01:09:16 <shapr> after seeing your IOHCC entry, I'm not brave enough to ask.
01:09:59 <Pseudonym> The saving grace for self-replicating program writers everywhere is the "show" function.
01:10:14 <Pseudonym> That makes it so much easier.  It even marks up special charactersa.
01:10:28 <Marvin--> I wonder if I could write a game of life program that operates on its own source code
01:10:29 <shapr> mm, more work in the inbox
01:10:36 <shapr> Marvin--: that would be nifty
01:11:05 <Pseudonym> Or you could amend the tic-tac-toe program so that it learns how to play better.
01:11:14 <Marvin--> I never got it to work
01:11:41 <Pseudonym> Really?  Which implementation did you use?
01:11:48 <cale> Marvin--: how about a game of like program that operates on its own source code, and after a number of iterations manages to get another valid haskell source file.
01:11:50 <shapr> I should have attached the instructions on the winners page I guess
01:11:51 <Marvin--> hugs and ghci I think
01:11:57 <Marvin--> cale: yes, that'd be the idea :P
01:12:01 * Pseudonym tested it under both
01:12:10 <Marvin--> well, lack of instructions is probably the problem :)
01:12:26 <Pseudonym> I think we need a comments file like the IOCCC does.
01:12:40 <Pseudonym> How to run, authors' comments, judges' comments.
01:12:42 <shapr> Yes, I agree.
01:13:09 <shapr> the "how to run" was required for entries, but I didn't attach it for Jón's file, or for yours.
01:13:17 <shapr> next time I will.
01:13:50 <shapr> I would like judges' comments next time.
01:14:08 * shapr sends email to SPJ offering a juror seat so he can see all the entries ;-)
01:14:24 <Marvin--> heh
01:14:27 <Marvin--> evil
01:14:29 * Pseudonym grins
01:14:32 <Marvin--> I want to see his entries :)
01:14:40 <Pseudonym> I don't.
01:14:45 <Marvin--> well, that too
01:14:45 <shapr> I'd be scared.
01:15:02 <Pseudonym> If only people "below" SPJ enter, I have a fighting chance of understanding the entries.
01:15:09 <Pseudonym> This way I look smarter than I really am.
01:15:28 <shapr> yah, what if he abuses some STG-specific feature? how will we ever notice?
01:15:31 <Marvin--> so, tell me, how do I run this thing?
01:15:40 <Pseudonym> runhugs Pseudonym.hs
01:15:55 <Pseudonym> Pipe the output to a file, say, Pseudonym2.hs
01:16:03 <Marvin--> aha
01:16:14 <Pseudonym> Then edit that, and re-runhugs it.
01:16:21 <shapr> Pseudonym: any suggestions for dates for Succ Zero IOHCC ?
01:16:49 <Pseudonym> I dunno.  How about start on 1 July?
01:16:56 <shapr> sounds good to me
01:17:02 <shapr> that's enough time to get together jurors
01:17:16 <shapr> we never did write up anything for HW either.
01:17:18 <Pseudonym> Are there any good conferences that we could present the results at?
01:17:28 <shapr> sure, I'll be at ICFP/HW
01:17:51 <shapr> You should come too ;-)
01:18:04 <shapr> then I can show off my unicycle and contact juggling skillz.
01:19:07 <shapr> I guess it's a bit cheaper for current .se residents to go to ICFP though.
01:19:09 <Marvin--> grmbl, I'm in Norway 12-20 July working my ass off on d-i, so I won't have much time to contribute an entry
01:19:28 <Pseudonym> Unfortunately, it's a bit of a hike from here.
01:19:31 <Pseudonym> 19 hours to be precise
01:19:37 <Pseudonym> And a few thousand dollars.
01:19:42 <shapr> :-(
01:20:03 <shapr> I'm choosing to go to ICFP instead of upgrading my computer.
01:20:51 <Marvin--> evil of you to give the computer player the first move
01:21:04 <Pseudonym> Well you can edit the file first.
01:21:15 <Pseudonym> It's extensible that way.
01:21:17 * shapr wants to get his copy of "Generalizing Monads to Arrows" autographed ;-)
01:21:30 <Pseudonym> shapr is a man of few ambitions
01:21:37 <shapr> I'm such a fan-boy ;-)
01:21:44 <Marvin--> ah, true
01:23:41 <Marvin--> I just don't see the point of continuing playing after having  o-o-x  on a diagonal :)
01:24:33 <Pseudonym> Oh, the AI isn't very smart at all.
01:24:43 <Pseudonym> See if you can work out how the "AI" works.
01:25:28 <Pseudonym> Gotta go.
01:25:34 <Pseudonym> Night everyone.
01:25:43 <shapr> cya
01:25:45 <Marvin--> well, I mean, it started in the middle, I took a corner, it took the opposite corner, from there on the game is a draw
01:25:55 <Marvin--> it fell in a simple trap when I started thoguh
01:26:05 <shapr> I gotta go do work.
01:26:09 <Marvin--> sucker :P
01:26:17 <shapr> lots of stuff to do today.
01:26:17 * Marvin-- is going to Strakt this afternoon to discuss times
01:26:23 <shapr> cool!
01:26:28 <Darius> Marvin--: you could always just erase it's moves or put in all of yours at once.
01:26:33 <Marvin--> Darius: :P
01:26:41 <shapr> I want to check out zope3 soon
01:26:49 <shapr> do you know if it still works with twisted?
01:26:55 <Marvin--> no idea, we don't use zope
01:44:50 <shapr> Marvin--: hey, can you send me the unit tests Uwe Schmidt sent you?
01:45:06 <Marvin--> shapr: sure, to what address?
01:45:19 <shapr> shae at Scanned In Avian dot com
01:50:41 <jlouis> unit testing, me interested in seeing some code of that
01:50:59 <shapr> of unit testing? of or HXmlToolbox unit testing?
01:51:09 <jlouis> whatever
01:51:16 <jlouis> something in Haskell preferably
01:51:37 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Test_Hxml.hs
01:51:51 <shapr> note that Unit Testing and QuickCheck's random testing aren't the same thing.
01:52:02 <shapr> http://kungens.kemi.fi/~shae/src/haskell/ProtoQuickCheck.hs
01:52:05 <Marvin--> grmbl, my friends are so cheerful
01:52:17 <shapr> Marvin--: thanks, just got it.
01:52:29 <Marvin--> "Only seven years until you're an old man, congratulations"
01:52:30 <Marvin--> grmbl
01:52:42 <shapr> heh
01:52:42 <Darius> EvalModule also has some unit tests
01:52:46 <shapr> are you 23 now?
01:52:54 <Marvin--> yeah, as of today
01:53:01 <shapr> happy birthday!
01:53:11 <shapr> I'm Succ Old
01:53:18 <Marvin--> I got volume two of TAoCP :-)
01:53:18 <cale> happy birthday
01:53:23 <shapr> cool!
01:53:59 <shapr> on the thread of expensive programming info... maybe an E-Zine of Functional Programming would be popular. 
01:54:03 <Marvin--> shapr: actually, since it was in Swedish, what he said was "gubbe", not "old man"
01:54:08 <shapr> :-)
01:55:08 <shapr> heh, cool, these HUnit test are still pretty close to what I sent him.
01:55:24 <shapr> notice all the /home/shae crap at the bottom :-)
01:55:31 <Marvin--> yeah, I did
01:56:17 <shapr> oh, this is much better
01:57:04 <Marvin--> still didn't help me one bit though
01:57:26 <Marvin--> but I don't think the others in the d-i team will let me write the reduction script in haskell anyway
01:57:34 <Marvin--> "write it in a language we can understand too!" they cried
01:57:42 <shapr> no surprise there
01:59:06 <Marvin--> not really
01:59:11 <Marvin--> I guess I'll write it in Python instead
01:59:41 <Marvin--> I ponder being evil and implement something similar to the HXmlToolbox stuff in python :P
01:59:47 <shapr> heh
02:00:00 <shapr> use the xoltar toolkit
02:01:13 <Marvin--> "Being a retired professor is a lot like being an ordinary professor, except that you don't have to write research proposals, administer grants, or sit in committee meetings. Also, you don't get paid."
02:01:15 <Marvin--> (Knuth)
02:01:24 <shapr> heh
02:01:30 <shapr> that would be nifty
02:02:07 <Marvin--> how many volumes of TAoCP are out anyway? I know that volumes 1-3 are already on the 3rd edition...
02:03:19 <Marvin--> "I'm proud of the 28 students for whom I was a dissertation advisor (see vita); and I know that 28 is a perfect number. So I won't be advising any more students."
02:03:19 <Marvin--> Knuth is no nerd, oh no
02:09:24 <shapr> y0 Arnia 
02:09:48 <Arnia> Heya, hows things?
02:09:57 <shapr> doing Zope worky stuff
02:10:11 <Arnia> Having fun then :)
02:10:24 <shapr> well, wish it were Haskell
02:11:05 <Arnia> Python is one of the nicest OO languages though... not as nice as Smalltalk ;)
02:11:14 <shapr> have you tried Self?
02:11:50 <Arnia> No... what's that?
02:12:02 * shapr grins evilly
02:12:13 <shapr> you use Linux, yes?
02:12:54 <shapr> http://gliebe.de/self/index.html
02:13:25 <Arnia> Errm... ok
02:13:44 <shapr> Self is like Smalltalk, but better.
02:14:04 <Arnia> :)
02:14:55 <shapr> the collaborative development environment of Self is highly addictive
02:15:01 <Arnia> I think Haskell should take the smalltalk idea of having its own desktop...
02:15:02 <cale> would this be referring to the same thing? http://research.sun.com/research/self/papers/self-power.html
02:15:09 <shapr> cale: yes!
02:15:14 <shapr> but there was never a Linux port
02:15:26 <shapr> Self made heavy use of SPARC asm
02:15:57 <shapr> Dave Unger hacked up a less asm dependent release that ran on Sparc and MacOS X
02:15:57 * seth is away: I'm busy
02:17:04 <shapr> Self's collaborative dev environment was called Kansas. Squeak copied it with Nebraska, though I don't know how that went.
02:19:51 <shapr> Arnia: I think Sven Panne's HOpenGL could do the graphical desktop thing for Haskell
02:20:31 <Darius> hmm, I have a semi-flexible append.
02:20:46 <Marvin--> I didn't like squeak at all
02:20:54 <shapr> Marvin--: Self is better.
02:21:06 <shapr> I really like the instance/slot model of Self.
02:21:19 <shapr> delegation r0xx0rs
02:21:44 <Marvin--> I don't mind the smalltalk language, but I loathed the squeak ide
02:21:45 <shapr> even so, both Self and Smalltalk have an Image problem.
02:22:19 <shapr> I would like some way to edit Smalltalk code from inside (X)Emacs, but maybe I'm being inflexible
02:22:54 <Marvin--> yes, there's the image problem, how on earth are you going to get it to cooperate with code in other languages when it uses an image?
02:23:26 <shapr> I don't know. Jan Skibinski of Numeric Quest did use Squeak and Haskell together though.
02:23:43 <Marvin--> and I don't like languages that imposes editor restrictions on me
02:24:26 <shapr> the most impressive parts of Self were the optimizations
02:24:44 <shapr> afaiu, poly-inline caching is now used in the HotSpot JVM
02:25:13 <shapr> it's sort of like TransMeta tech
02:29:03 <shapr> Screenshot of Kansas, the Self collaborative dev environment: http://research.sun.com/research/ics/pics/overview.GIF
02:29:38 <shapr> Arnia: I want that for Haskell :-)
02:30:18 <shapr> for example, I'd like to write up a Haskell module, and be able to drag and drop it onto another irc nick where it would be offered up for immediate transfer.
02:31:39 <shapr> I think runtime loading/upgrading of code is essential for that sort of environment to work.
02:32:36 <Arnia> A sea of objects... that's cool. But how can I import code on the fly?
02:33:00 <cale> heh, it could be called group-hugs :)
02:33:04 <shapr> hah!
02:33:06 <shapr> great name
02:33:48 <shapr> I think erlang has the best solution to runtime import/upgrade
02:33:57 <shapr> though I don't know any details.
02:33:58 <Marvin--> well, it was designed for it :)
02:34:02 <Arnia> :)
02:36:19 <shapr> hi crash__ 
02:36:24 <crash__> lo shapr
02:36:37 <shapr> how's code?
02:36:45 <crash__> quick question: is there a way to use the prelude's curry on a function of type (Int, Int, Int) -> Int ?
02:37:18 <cale> @prelude curry
02:37:22 <lambdabot> *** "curry" prelude "Haskell Standard Prelude Dictionary": text follows
02:37:22 <lambdabot> curry
02:37:22 <lambdabot>   curry ::  ((a,b) -> c) -> (a -> b -> c)
02:37:22 <lambdabot>   curry f x y     = f (x,y)
02:38:03 <Marvin--> crash__: no
02:38:13 * crash__ just wants to make sure he's saying the right thing when he defines a curry3 :: ((a, b, c) -> d) -> a -> b -> c -> d
02:38:30 <Marvin--> crash__: :)
02:39:19 <Arnia> crash__: Use Template Haskell and define curry all the way up to 20 ;)
02:40:12 <crash__> no thanks.. 3 is the highest I can count :)
02:41:17 <cale> all this curry is making me hungry :)
02:41:52 <Marvin--> Arnia: hmm, how'd that look? How'd you define $(curry f)?
02:42:06 <crash__> exactly my point.. as that curry3 is correct I've earned my food for today :) thanks for the help
02:45:34 <Marvin--> I don't see how this'd work
02:47:42 <Marvin--> or do you mean you'd have  $(curry n)  for an integer n?
02:51:43 <Arnia> Do a splice... splice (makeCurry 20)
02:51:48 <emu> curray curray
02:51:56 <emu> splice a curry for breakfast
02:52:32 <cale> mmm.... breakfast. It's getting about time for that (6 am here)
02:52:56 <Marvin--> Arnia: yes, but that's ugly, it'd be much prettier if you could just say $(curry f)
02:52:59 <emu> yah here too
02:53:01 <Marvin--> where f is the function
02:53:22 <Arnia> Marvin--: RTTI?
02:53:29 <emu> could use a vindaloo
02:53:57 <cale> "Generalizing Curry to Vindaloo"
02:54:12 <Marvin--> Arnia: ?
02:54:30 <cale> That's not actually generalizing, but what the heck.
02:54:45 <Marvin--> cale: "Generalizing Vindaloo to Curry", you mean
02:54:55 <Arnia> Run Time Type Information
02:54:56 <emu> vindalooing is a great technique
02:54:59 <cale> yes, that's more correct
02:55:09 <Marvin--> or maybe Vindaloo is a type-specialization of Curry?
02:55:20 <emu> vindaloo is a subtype of curry
02:56:11 <Arnia> To vindaloo: An FP technique involving type-based transformations of functions :)
02:56:27 <Darius> @foldoc vindaloo
02:56:29 <lambdabot> No match for "vindaloo".
02:56:59 <cale> I'm actually a bit surprised that term hasn't shown up yet.
02:57:43 <Arnia> Currying is a type of vindalooing which is a type of templating?
02:57:53 <Marvin--> don't give Meijer the idea!
02:58:38 <Marvin--> or we're dooooomed!
02:58:48 <Marvin--> </voice:hollow>
02:59:24 <Arnia> Malformed XML in </voice:hollow>
02:59:37 <Marvin--> so sue me
03:01:22 * Arnia vindaloos Marvin-- to an arrowloop
03:01:29 <cale> Tandoori-Oriented Programming
03:02:40 <Marvin--> oh bugger, conflict of interest
03:02:54 <Marvin--> the ICFP contest coincides with the Iron Maiden concert in Stockholm :-(
03:03:22 <Marvin--> not that I know if there are still tickets available
03:03:34 <Marvin--> but it means that one of the members of my team chickens out
03:04:17 <Marvin--> nope, no tickets
03:04:18 <Marvin--> oh well
03:04:29 <cale> Maybe... we can bring the two *together*. Iron Monad!
03:04:36 <Marvin--> cale: *groan*
03:04:40 <Rafterman> Iron Maiden need to come out to Australia :-(
03:04:46 <Arnia> Sounds like a medical term
03:05:22 <cale> I'm a bit sleepy and starting to make puns uncontrollably.
03:05:33 <Marvin--> I haven't seen them live, and I'm not that big of a fan, really
03:07:36 <Marvin--> http://www.ubersoft.net/comics/hd20030609.png  heh
03:08:49 <cale> heh, that's decent
03:14:35 <Darius> *sigh* the LP way works, I can't seem to get the FLP way to work
03:22:10 <shapr> ?
03:22:35 <Heffalump> Marvin--: have dates been announced, then?
03:22:41 * Heffalump couldn't find any when I looked a few days ago
03:23:15 <Darius> I can get a flexible append(xs,ys,out), but not out <- append xs ys
03:23:35 <shapr> do you have the code online?
03:23:49 <Darius> No
03:25:05 <shapr> can I get a copy of it? :-)
03:25:10 * shapr hoards source code
03:25:49 <Marvin--> Heffalump: http://www.dtek.chalmers.se/groups/icfpcontest/
03:26:26 <Heffalump> oh, *this* month.
03:26:34 <Marvin--> for some reason, cs.chalmers is organizing the icfp contest
03:26:40 <shapr> cool, Hughes, Claessen, Svenningsson
03:26:43 <Heffalump> John Hughes is, that's why
03:26:59 <Marvin--> yeah, well, you'd think the Uppsala people would organize it
03:27:03 <shapr> we have to get some teams organized!
03:27:51 <Heffalump> it was OGI people last year despite ICFP being in Pittsburgh
03:27:55 <Marvin--> raphael and I are forming a team, we'd need Christoffer too, but he's got tickets to Iron Maiden, hmm, wonder who else we could bring on board
03:27:58 <Heffalump> I doubt I'll be able to take part :(
03:28:16 --- topic: set to '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 6.0 Released - http://www.haskell.org/ghc/","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/"]' by shapr
03:29:20 <shapr> who wants to join the #haskell team?
03:30:23 <shapr> ok, it'll be me and lambdabot then ;-)
03:31:39 <shapr> hm, I think Igloo was planning an oxford team
03:32:28 <Heffalump> If I can take part, then an Oxford team will take precedence
03:32:30 <Arnia> What's involved?
03:32:37 <Marvin--> I'll talk to Raphael, if we don't get a third local team member, we might join the #haskell team
03:32:58 * Arnia lives near Oxford when not at uni
03:32:58 <shapr> Arnia: write code for three days straight with very little sleep
03:33:20 <Arnia> Sounds fun
03:33:23 <shapr> it is
03:33:56 <shapr> almost too much fun.
03:34:06 <kosmikus> shapr: for me the same -- if I don't succeed to convince any Utrecht people, then I might join the #haskell team.
03:34:09 <Arnia> Have to go and design things. I'll speak to you later
03:34:10 <shapr> yay!
03:34:16 <shapr> ok
03:34:21 * shapr should be working too
03:34:57 <Marvin--> Raphael and Christoffer are my "worst" Haskell freak friends, I'll see if I can dig up some others :P
03:37:51 <jlouis> hehe
03:38:04 <jlouis> I'll need to take a look at a DIKU team
03:39:10 <shapr> maybe we should create an ICFP team status page? :-)
03:40:20 <jlouis> probably, though I will not be the one that should code the monadic parts of the stuff for sure
03:40:31 <jlouis> (and the DIKU team would choose SML of course :)
03:40:44 <shapr> heh
03:40:45 <shapr> of course
03:44:22 <Marvin--> brr
03:44:31 <Marvin--> I knew you Danes are crazy, but SML...sheesh
03:45:00 <shapr> how do you really spell onomonopoetic?
03:45:07 <Marvin--> onomatopoetic I think
03:45:19 <Marvin--> if we're talking about the same thing
03:45:19 <Heffalump> no
03:45:30 <shapr> oeno?
03:45:33 <Heffalump> onomatopoeic is closer, but possibly not right
03:45:39 <Heffalump> there's no t after the p
03:45:55 <shapr> @web1913 onomatopoetic
03:45:56 <lambdabot> *** "Onomatopoetic" web1913 "Webster's Revised Unabridged Dictionary (1913)"
03:45:56 <lambdabot> Onomatopoetic \On`o*mat`o*po*et"ic\, a.
03:45:56 <lambdabot>    Of or pertaining to onomatop[oe]ia; characterized by
03:45:56 <lambdabot>    onomatop[oe]ia; imitative; as, an onomatopoetic writer or
03:45:56 <lambdabot>    word. --Earle.
03:45:59 <shapr> yay
03:46:17 <Heffalump> oh
03:46:23 <Marvin--> in Swedish we say "onomatopoetisk"
03:46:44 <Heffalump> I didn't realise it had the alternative spelling.
03:47:16 <shapr> now you know.
03:47:21 * shapr didn't either
03:47:25 <Heffalump> Indeed.
03:50:17 <shapr> g'day CowGirl 
03:50:40 <CowGirl> hey
03:50:51 <shapr> wassup?
03:51:12 <CowGirl> not much, just studying
03:51:35 <shapr> on irc? :)
03:52:16 <shapr> of course, I'm working... on irc.
03:52:54 <Marvin--> sure you're working :)
03:53:07 <shapr> shhh
03:53:21 <CowGirl> i got to study comp, so if i need help, its easier to get it her
03:53:21 <CowGirl> e
03:53:38 <shapr> bah, #haskell is too interesting
03:53:38 <shapr> bbl
03:58:13 <cale> http://www.ubersoft.net/d/19991110.html
04:42:42 <peti> Is anyone aware of a good way to simulate inheritance in Haskell?
04:42:49 <peti> Uh, oops. Wrong channel.
04:43:29 <Heffalump> wrong channel why?
04:43:39 <Heffalump> type classes can do it, but only statically
04:43:48 <peti> Sorry, correct channel, actually. :-)
04:43:51 * peti is confused ...
04:44:16 <Heffalump> oh, and it's not entirely inheritance, since you can't override things
04:44:39 <peti> The problem is this: I have a bunch of data types I have to translate to Haskell, and most of them inherit functions from each other. For instance: A "file" can do "read", "write", etc. So can a "socket".
04:45:19 <peti> I modeled this using classes and data types. So I have a class, say, HasFDAPI, which defines "read" and "write", and both data File and data Socket are instances of it.
04:45:36 <peti> But the problem is that I have to specify sets of these, which must contain _both_ File and Socket.
04:45:49 <peti> But I cannot do that when both are distinct data types.
04:46:17 <Heffalump> ah, I believe you can use existential types to do this
04:46:21 <peti> [File, Socket] is a type error, even though both are "(HasFDAPI a) => [a]"
04:46:28 <Heffalump> but I'm not entirely sure of the details (and it's not Haskell 98)
04:47:05 <Heffalump> if you statically know what types need to go in your list, you can just make a sum type that encompasses them all
04:47:14 <Heffalump> so data FD = File File | Socket Socket
04:47:25 <Heffalump> and then the obvious instance FDApi FD where ...
04:47:53 <Heffalump> if you really need the set of types to be extensible, you'll need existential types
04:47:59 <peti> Heffalump: Yeah, but then the use of the "actions" won't be validated at compile-time any longer. :-(
04:48:28 <peti> Heffalump: Do you know a place where I can read more about "existential data types"? 
04:49:54 * peti just discovered <http://haskell.org/hawiki/ExistentialTypes>.
04:50:17 <Heffalump> wdym by validated at compile-time?
04:50:29 <Heffalump> what precisely needs to be checked?
04:51:57 <peti> Heffalump: I mean that [ File, Dir ] <:> [ read, write ] (the <:> composes a set of "read File, read Dir, write File, write Dir") should be alright, but [ Socket, File ] <:> [ setattr ] should not, since "File" does not support "setattr".
04:52:17 <peti> The compiler should verify that actions are used only on the data types that support them.
04:53:39 <Heffalump> oh, but you can't expect that to happen, because your list might be built up dynamically
04:53:48 <Heffalump> you can't have it both ways
04:54:03 <peti> Unfortunately not. :-)
04:54:07 <Heffalump> i.e. have both the flexibility of variable length/member lists and the safety of static type checking
04:54:24 <Heffalump> the type checker would have to work out exactly what your program did to be able to check it
04:54:58 * peti just wonders whether this whole class/type-defining is worthwhile at all. If the compiler cannot type-check it anyway, I can as wel stick to "String" all the time. :-|
04:56:29 <o3> peti: you can do that with existentials
04:56:46 <Heffalump> o3: no he can't, he wants to be able to use an operation that is only sometimes defined
04:57:08 <Heffalump> peti: the compiler can type-check your use of things that are always defined, like read, write.
04:57:24 <o3> ah, sorry, yeah
04:57:28 <Heffalump> It just can't statically determine the make-up of an arbitrary list you might construct, so can't check on setattr.
04:57:29 <o3> if File doesn't support setattr, then ... doh
04:57:41 <o3> what's the type of setattr?  can you just make a dummy function for file which does nothing?
04:58:12 <Darius> Depending on what you want to do, it may just be that you can't put a File into a [HAS_SETATTR]
04:59:16 <peti> Darius: That's what I do (sort of) right now, but that leaves me with the problem of what [File, Dir] is supposed to mean in this context.
04:59:55 <peti> Like Heffalump said, it probably comes down to a comfortable syntax (and no compile-time type-checking) or an uncomfortable syntax and (type-checking).
05:00:12 <peti> But that sucks. I want to have both. :-)
05:00:35 <o3> i guess you can't use tuples instead of lists
05:01:26 <peti> o3: No, unfortunately not. I need lists. (I'm designing a domain-specific language for a given data model, so I'm stuck with the way it's defined in real application.)
05:02:27 <peti> Well, I guess I'll just live with no compile-time verification. This will make my data model much simpler, and that's worth something as well.
05:04:53 <Heffalump> You /can't/ get type-checking of your use of getattr in a list that might also contain File
05:05:07 <Heffalump> no compiler with a terminating type system could type-check that
05:05:30 <Heffalump> you could possibly find one that tried to make a conservative guess
05:05:35 <Darius> If the list contains a File, then you should already have a type-error
05:05:50 <Heffalump> even if you'll never call getattr on it
05:06:27 <peti> OK, I think I know what I'll do. Thanks for the feedback guys!
06:35:00 * Igloo bounces
06:35:23 <Heffalump> hmm?
06:35:34 <Igloo> pre-ICFP excitement  :-)
06:35:39 <Heffalump> ah.
06:35:39 * Darius tries to get Hinze's backtracking monad to work.
06:35:42 <Heffalump> when is HW notification?
06:35:49 <Igloo> 23rd IIRC
06:41:40 <Igloo> Yay, fix in CVS for 3.3 building problems
06:42:05 <Heffalump> what was breaking?
06:43:12 <Marvin--> Evil Mangler stuff, wasn't it?
06:44:23 <Igloo> No, object splitting
06:44:42 <Igloo> Some of the bits of split objects were making local symbols that ld -x was removing when linking
06:45:32 <Igloo> But I suspect it's all perl assembly fiddling  :-)
06:46:08 <Igloo> Ah, looking at the commit it was the mangler not mangling something that was causing the problem
06:47:13 <Marvin--> told you :)
06:47:18 <Marvin--> it IS evil
06:49:20 <Igloo> :-)
06:51:38 <Marvin--> hmm. does ghc -fvia-C respect $CC?
06:52:22 <Igloo> Not sure, but you can override it with a flag I think
06:53:16 <Marvin--> yeah, there's -pgmc or something, but it'd be neat if it took CC directly
06:53:41 <Marvin--> gcc 3.x has other problems, optimizations bugs that causes eprover to segfault *shiver*
06:55:17 <Igloo> Overfiend seems to be having great fun with 3.3
06:55:58 <Marvin--> oh?
06:56:12 <Heffalump> wossat?
06:56:21 <Igloo> The X maintainer
06:56:29 <Heffalump> ah, yes
06:56:31 <Heffalump> Branden Robinson
06:56:40 <Igloo> I'm not sure exactly what's going on, but on a set of arches not limited to PPC some stuff breaks with -O2
06:56:59 <Igloo> I'd have given his name but I'd have got the second vowel wrong  :-)
06:57:22 <Heffalump> I think it's -en
06:57:55 * Igloo has no idea, but him and a Brandon are always spelt wrong
06:58:58 <Marvin--> Brandon Robonson also called :P
06:59:26 <Marvin--> but yes, it's Branden
07:02:54 <Marvin--> hmm, now how do I go about converting docbook-xml stuff to something I can read
07:28:50 <steveh> Marvin--: you will need something like Jade
07:36:02 <Marvin--> steveh: I think I figured that out, but I don't seem to have any style sheets for this... oh well
07:36:06 <Marvin--> I'm off to drink beer anyway :-)
07:46:14 <SyntaxPolice> good morning
07:46:22 <Igloo> Hello
07:46:27 <mgoetze> hi SyntaxPolice 
07:46:35 * Igloo wonders if the ICFP contest picture is a clue or just random
07:46:54 <SyntaxPolice> mgoetze: I went to a go playing club on sunday, had a good game :)
07:47:23 <mgoetze> SyntaxPolice: heh, we just had a tournament here sa-mo :)
07:47:28 * mgoetze won 4, lost 2
07:48:35 <SyntaxPolice> mgoetze: good record
07:48:45 <SyntaxPolice> what is your rating?
07:49:37 <steveh> Hi SyntaxPolice
07:51:13 <SyntaxPolice> hiya ste
07:51:15 <Heffalump> igloo: I was wondering that too
07:51:25 <mgoetze> SyntaxPolice: that was as a 12kyu
07:51:53 <mgoetze> SyntaxPolice: suppose i could calculate my new EGF rating but i think i'll wait till it's out next month :)
07:52:00 <steveh> chess is more my speed :-/ of course I've only played a half-dozen go games in my life
07:52:12 <Heffalump> but it might just indicate a race
07:52:14 <Igloo> I'm not convinced by the line that car is taking either
07:52:36 <mgoetze> steveh: yeah, i'll show you speed... wanna play blitz chess against my computer? :P
07:52:52 <steveh> hehehe
07:53:20 * steveh never felt intensely competitive with a computer :)
07:54:17 <mgoetze> no need to if you play go... computers are really crap at it anyway :)
07:54:46 <Smerdyakov> Fun English lesson! "crappy," not "crap" :-)
07:55:08 <opet> I prefer crap
07:55:49 <Smerdyakov> Ah. That's an interesting thing to prefer.
07:55:52 <steveh> hm
07:55:59 <steveh> it can be construed another way
07:56:16 <Heffalump> "crap" is more correct, IMO
07:56:20 <steveh> i.e. the computer-as-go-machine is crap.
07:56:26 <Heffalump> (as correct as colloquialisms can get, anyway)
07:56:44 <Smerdyakov> I'm not sure if I am arguing for an Americanism.
07:56:56 <Heffalump> I was about to claim authority as a native English speaker :-)
07:57:31 <SyntaxPolice> This is a job for the Syntax Police!
07:57:33 * steveh verbalises a different flavour
07:57:36 <SyntaxPolice> ahem...
07:57:38 <Smerdyakov> I'm a native English speaker. :P
07:57:48 <Heffalump> aren't you a native US English speaker?
07:59:32 <opet> in my experience crappy is more an americanism, and crap a britishism
07:59:36 <Smerdyakov> Yes, and that's English!
07:59:51 <Heffalump> no, it's US English...
08:00:01 * mgoetze agrees with opet
08:00:10 <Heffalump> a different but very similar language
08:00:16 <Heffalump> to proper English
08:00:23 * Heffalump gd&r
08:00:27 * esap does quite well mix americanism and britishism, no idea what is what.
08:00:38 <steveh> me fail english?
08:00:38 <opet> I don't know where australians/canadians/etc stand on the matter :)
08:00:41 <steveh> that's unpossible!
08:00:49 <Igloo> I think everyone should speak Cockney English
08:01:07 <steveh> Igloo: I think that should be relegated to Audrey Hepburn :)
08:01:16 <opet> Igloo: show Eastenders to everybody in school?
08:01:26 <mgoetze> Igloo: i think everyone should walk as suggested by the ministry of silly walks
08:01:52 <Igloo> Not the accent, the rhyming slang. It's quite close to hacker slang, too
08:02:42 <steveh> except with0u7 th3 lee7 numb3rz
08:02:58 <Igloo> Wrong sort of hacker there, steve...
08:03:01 <steveh> ;)
08:03:46 <steveh> in my experience a given hacker only uses a few phrases from "hacker slang," ESR notwithstanding
08:04:42 <Igloo> Local dialects tend to be more dilute
08:04:53 * Igloo suspects more would be used if hacker concentration was higher
08:04:55 <steveh> hmm
08:07:07 <SyntaxPolice> any londoners here?
08:07:23 * Heffalump was born there
08:07:29 <Heffalump> but not in the East End :-)
08:07:34 * ludde has been in london
08:07:38 <steveh> SyntaxPolice: where's Mark from?
08:07:48 <SyntaxPolice> mark's from cambridge
08:07:53 <SyntaxPolice> roughly
08:08:00 <steveh> aaah
08:08:11 <Igloo> I was born in Watford
08:08:14 <SyntaxPolice> I'm wanting to pick people's brains about what to see in a week-long trip to London
08:08:34 <Heffalump> what kind of stuff do you care about?
08:08:45 <Heffalump> Mark anyone we should have heard of?
08:08:52 <Heffalump> s/should/might/
08:09:12 <SyntaxPolice> Mark Carroll, he posts to Haskell lists here & there.
08:09:21 <Heffalump> ah, yes
08:09:29 <SyntaxPolice> and works with me :)
08:12:30 <SyntaxPolice> Heffalump: hm. thats a good question; I like cheap but good restaurants & pubs, not too into clubbing, like art, but would like to see some not-too-touristy like londonish stuff, if such a thing is possible
08:12:57 <SyntaxPolice> umm, I like nature, but I 'spect that won't be for the London trip.
08:13:24 <Igloo> If you're here you'd probably like the Science Museum
08:13:47 <Igloo> National Gallery is the obvious place for Art
08:14:24 <Igloo> I think that's where the cool picture that has the skull in if you look from the side is, but most of the rest was just boring painting IMO  :-)
08:14:49 <Heffalump> I don't really know London well.
08:14:58 <Heffalump> when exactly are you coming?
08:15:06 <steveh> no 50-pound notes nailed to a board?
08:15:09 <SyntaxPolice> on or around august 7
08:15:10 <steveh> :)
08:15:25 <SyntaxPolice> Igloo: the science museum might be good...
08:15:34 <SyntaxPolice> I think I've been to the national gallery
08:15:44 <Heffalump> there's also the Natural History museum
08:15:50 <Heffalump> the London Dungeon is quite cool.
08:16:14 <Heffalump> Camden Market is quite famous, though I've never been there.
08:18:58 <steveh> arg
08:19:04 * steveh is way behind on his mailing lists
08:24:50 <tootalltimmy> help
08:26:25 * SyntaxPolice fails to think of a "timmy fell down the well?!" joke
08:29:48 <CrashChaos_> anyone knows a good site where I can read up on closures?
08:32:53 <esap> crash: citeseer?
08:34:29 <CrashChaos_> esap: no documents match boolean query for "closures haskell"
08:35:06 <esap> crash: try "closure and haskell"
08:35:16 <SyntaxPolice> hm. this makes me remember: I've been thinking we need a section in the Haskell wiki for info on general concepts to point people to when they wonder, "What is pattern matching" or "what is currying" . CommonHaskellIdioms doesn't quite match correctly
08:35:42 <esap> syntaxpolice: that is a good idea.
08:38:08 <CrashChaos_> esap: those hits all use closures very well.. but I'm rather looking for a definition of what a closure is?
08:38:40 <Smerdyakov> It's a first class function value that combines code and an environment.
08:39:44 <CrashChaos_> I'm not supposed to understand that right now am I? :)
08:40:42 <Smerdyakov> Have you ever used first-class functions in a programming language?
08:40:43 <SyntaxPolice> CrashChaos_: its a method for encapsulating "environment" and passing around code to be executed in that environment.
08:41:05 <Smerdyakov> I have a page that tries to give a quick explanation with examples in ML: http://www.hprog.org/fhp/MlLanguage
08:43:10 <CrashChaos_> if I understand it correctly 'closure' is just another term for a partially applied function?
08:43:20 <Smerdyakov> No
08:43:34 <Smerdyakov> Unless you consider the environment to be an extra curried parameter.
08:44:01 <Smerdyakov> Did you read my page (the section on first-class functions)?
08:44:08 <CrashChaos_> Smerdyakov: in your example you say that the resulting function like myTwoAdder is a closure?
08:44:16 <Smerdyakov> Yes
08:44:42 <CrashChaos_> then why is it wrong if I say this (partially applied) function is a closure?
08:44:55 <Smerdyakov> Because (fn x => x) is also a closure.
08:44:59 <Smerdyakov> No partial application there.
08:45:02 <esap> crash: because there are other ways of constructing closures than partial appliaction.
08:45:17 <Smerdyakov> Or Haskell (\x -> x) :-)
08:45:20 <CrashChaos_> ah ok.. so partial application is a special case of a closure.. right?
08:45:31 <Smerdyakov> Partial application is a way to create a closure, yes.
08:45:42 <esap> crash: no, closure is the _value_ returned from partial application.
08:46:18 <CrashChaos_> esap: value as in the returned function?
08:46:48 <esap> crash: "returned function"?
08:47:30 <esap> crash: the myTwoAdder in the example is a name for the closure (value).
08:47:59 <CrashChaos_> example: f :: Int -> Int -> Int ; f x y = x+y then g :: Int -> Int ; g = f 1.. what is the closure here exactly? is it g?
08:48:02 <SyntaxPolice> how 'bout a wiki page called BasicConcepts?
08:48:22 <CrashChaos_> SyntaxPolice: I vote yes :)
08:48:27 <esap> crash: it's the value referred to by g.
08:48:52 <CrashChaos_> "f 1" being that value ?
08:49:06 <esap> crash: also 'f' itself refers to a closure. As well as "f 1".
08:49:32 <SyntaxPolice> can anyone think of anything it would be redundant with?
08:49:44 <Smerdyakov> SyntaxPolice, I can, but it's something I haven't made yet. ;-)
08:50:16 <esap> crash: "f 1" is not a value, it's an expression that, when evaluated, will produce that value.
08:51:19 <SyntaxPolice> Smerdyakov: hm. I think existence is a precondition of redundancy (as depressing as that sounds ;)
08:51:23 <CrashChaos_> esap: I don't quite get that.. so would "f 1 2" be a closure? as it is the value 3?
08:51:53 <Smerdyakov> CrashChaos_, no. Closures have function type.
08:51:57 <esap> crashchaos: well 3 is a value. A closure is a value that denotes a function.
08:52:30 <CrashChaos_> esap: so h :: Int -> Int would make h a closure?
08:53:07 <SyntaxPolice> maybe CategoryBasicConcept
08:54:39 <esap> crash: There is a difference between closure and a name referring to it. h :: Int -> Int declares that h (the name) refers to a value that has function type. h = \x -> x would make h refer to a closure \x -> x.
08:56:37 <CrashChaos_> so the \x -> x part itself is actually called the closure?
08:57:14 <esap> crash: the result of that expression is a closure, yes.
08:58:09 <CrashChaos_> isn't that result again a function of type a -> a?
08:58:20 <esap> crash: yes.
08:59:01 <esap> crash: closures are basically a representation for functions [containing two things, an environment and a "function pointer"]
09:02:24 <CrashChaos_> esap: is there a difference between h x = x and h = \x -> x ? or are both making h refer to \x -> x?
09:02:55 <esap> crash: those are very close to the same thing. For all practical purposes, they are the same.
09:03:25 <esap> crash: there is a very minor technical difference, but I don't think it's relevant for this discussion.
09:04:06 <esap> crash: but yes, both make h refer to \x -> x.
09:04:07 <CrashChaos_> ok.. then in my original example that makes g (= f 1) refer to the closure \x -> f 1 x ?
09:05:46 <esap> crash: yes, you can think it like that.
09:06:24 * CrashChaos_ is starting to grasp something here ;)
09:09:44 <CrashChaos_> then f is refering to the closure \x -> \y -> x+y ?
09:10:24 <esap> crash: right.
09:11:11 <esap> crash: note that the environment of that closure contains the '+' operation [which is used from the enclosing scope].
09:12:17 <CrashChaos_> so environment here refers to x+y?
09:12:59 <esap> crash: no it refers to values of all symbols that are defined outside the scope of the closure.
09:13:40 <CrashChaos_> hey shapr
09:13:45 <shapr> hi CrashChaos_ 
09:14:07 <shapr> funktor: nice nickname :-)
09:15:08 <funktor> shapr: thanks!
09:15:09 <shapr> did I miss anything?
09:15:16 <shapr> funktor: are you learning Haskell?
09:15:22 <funktor> yes
09:15:32 <shapr> do you have any questions?
09:15:48 <funktor> not at this moment.  Just lurking.  ;)  Thanks!
09:16:00 <shapr> ok, feel free to ask anything.
09:16:06 * shapr reads logs
09:17:11 <SyntaxPolice> shapr: I'm starting on a FundamentalConcepts page :)
09:17:30 <SyntaxPolice> it looks like this right now:
09:17:32 <SyntaxPolice>  * TypeConstructor & DataConstructor
09:17:32 <SyntaxPolice>  * CaseExpression & PatternMatching
09:17:32 <SyntaxPolice>  * ["Closure"] & ["Currying"]
09:17:32 <SyntaxPolice>  * TypeClass
09:17:42 <shapr> oh, nifty
09:18:13 <shapr> I want to read the entry on functional dependencies
09:18:21 <shapr> hm, maybe they're not Fundamental
09:20:02 <SyntaxPolice> I think there could be "Advanced fundamental" and "Basic fundamental" as long as it doesn't overlap too much w/ HaskellIdioms
09:20:21 <shapr> yah
09:20:51 * esap thinks there should be a whole range of different grades of fundamental. Some people think operads are fundamental :-)
09:21:23 <shapr> is that advertisement for operations?
09:21:32 <shapr> OperAds, buy one today!
09:21:50 <esap> no, n-categories, see one of John Baez's articles.
09:23:45 <esap> "An introduction to n-categories" is the name of the paper. Not easy to read, I'd say.
09:23:56 <SyntaxPolice> OK, go nuts: http://www.haskell.org/hawiki/FundamentalConcepts
09:28:12 <shapr> there's a few
09:28:44 <shapr> That's just off the top of my head.
09:28:52 <shapr> Any suggestions?
09:28:57 <esap> concrete data type?
09:31:09 <shapr> isn't that an abstract data type that's been filled in? or just a boring type?
09:31:20 <SyntaxPolice> we could break stuff out into "Intermediate Concepts" too, nothing magic about Basic & Advanced.
09:32:29 <esap> shapr: well I think concrete data type is something quite close to the solution domain, as opposed to abstract data types that are reusable.
09:33:25 <esap> shapr: like a 'tree' is abstract data type, but "parse tree for langyage X" is probably concrete.
09:33:31 <shapr> esap: I would like to hear more about that, so I'll add the link and hopefully you'll have time to fill it in :-)
09:33:34 <shapr> oh
09:37:36 <shapr> any more suggestions?
09:38:31 <esap> "type", "expression", "value"
09:38:49 <shapr> good point
09:38:50 <esap> or are those too basic? :-)
09:38:55 <shapr> no, I think they're great
09:39:23 <SyntaxPolice> "function"?
09:39:28 <shapr> heh
09:39:53 <SyntaxPolice> (are we getting too basic yet)? I think "type" "expression" and "value" are good though
09:40:34 <esap> "data", "control", "decomposition", "composition", "control operation" (advanced)
09:42:09 <shapr> de/composition is important, I agree
09:42:12 <shapr> I don't know about the others.
09:44:50 <shapr> esap: if you think they're worth adding, go for it :-)
09:45:17 <shapr> I am now wandering off to play warcraft 3, but I promise I'll fill in some of those question marks in the next few days.
09:45:24 <esap> Actually, I'm not sure what would be a good title for data vs. control flow.
09:45:41 <shapr> oh, graph reduction is related to that
09:45:44 <shapr> and related to STG
09:45:59 <shapr> and push/eval/apply is related to STG
09:46:10 <shapr> wow, Haskell is more complicated than I thought :-)
09:46:58 <SyntaxPolice> hehe
09:46:58 <Heffalump> there's a paper evaluating the differences between push/eval and apply/enter
09:47:05 <Heffalump> or maybe I've got those paired wrong :-)
09:47:22 <shapr> I can never remember either
09:47:22 <Heffalump> push/enter , eval/apply
09:47:23 <Heffalump> ahem.
09:48:13 <shapr> ok, I'm really wandering off now.
09:48:14 <Darius> Pattern matching isn't unique to functional languages.  Logic languages take it a lot further, and languages like Icon and SNOBOL go a LOT further.
09:48:19 <esap> How about "exception handling", "Concurrency", "parallelism", "covariance vs. contravariance" etc?
09:50:49 <SyntaxPolice> Darius: cool, wanna correct the wiki? :)
09:54:11 <Igloo> Bah, still got _module_registered errors
09:55:06 <Darius> *grumble* *grumble* damn open content
09:55:08 <Darius> ;)
09:55:47 * SyntaxPolice should be nicer or people will let me go on being ignorant ;)
09:59:13 * esap just wrote description for ConcreteDataType.
10:34:18 * Igloo looks blankly at assembly diffs
10:34:40 * Darius looks blankly.
10:35:23 <Heffalump> BAH.
10:35:36 * Heffalump realises that lazy streams and CPS don't go together very well
10:35:59 <Igloo> I'd probably have slightly more hope of fixing this if I knew exactly what the keywords meant
10:36:36 <Darius> Igloo: assembly keywords or preprocessor stuff?
10:36:37 <Igloo> Heff: You mean you're trying to put a stream into a strictly evaluated IO widget?
10:36:53 <Darius> Heffalump: Usually CPS replaces lazy streams.
10:37:03 <Igloo> Darius: assembly keywords
10:37:22 <Darius> Wht processor?
10:37:37 <Heffalump> I don't quite see how it can in this case.
10:38:05 <Igloo> I can see the _module_registered stuff is different in the gcc3.3 output compared to earlier output, and I can see that this is causing the 3.3 end result to not define _module_registered, but it's not obvious to me what to do about it as I'm not clear on what the differences mean  :-)
10:38:07 <Heffalump> I have a bunch of functions of type a -> Stream a
10:38:10 <Igloo> x86
10:38:41 <Heffalump> I'm trying to make them instead be a -> (Stream a -> b) -> b
10:39:19 <Heffalump> but to do this I need to rewrite the compose operation of type (a -> Stream a) -> (a -> Stream a) -> (a -> Stream a) to the equivalent CPS type
10:39:35 <Igloo> Darius: Do you know what .type, .size, .local and .comm mean?
10:39:35 <Heffalump> where compose f g takes all the results from f and applies g to each
10:40:00 <Darius> Can you just use a Cont monad to handle all the CPS details?
10:40:16 <Heffalump> well, it'd have to be a monad transformer
10:40:21 <Heffalump> (wouldn't it?)
10:40:26 <Darius> There's a ContT 
10:40:34 <Heffalump> does it work on any monad?
10:41:11 <Darius> If you don't use callCC sure ;), but more or less yes... ish.
10:42:01 <Heffalump> hmm. If this can be done with monads, it can be done with non-monadic code too.
10:42:15 <Heffalump> and I don't actually see how it's possible to write something that does what I want
10:43:00 <Darius> Igloo: I'm not too familiar with GAS directives, I could probably infer there meaning if I needed too.
10:43:00 <Heffalump> specifically, the compose operation is going to need to take Stream a and produce Stream (Stream a) without actually enumerating the input stream
10:44:03 <Heffalump> in fact, just doing a map on a lazy stream in CPS seems like a problem to me
10:45:59 <Igloo> *nod*
10:47:05 <Darius> Unless you are manipulating the continuation (i.e. doing tricky things) the code for CPS is fairly regular.
10:47:44 <Heffalump> so how do I write map :: (a -> (b -> c) -> c) -> Stream a -> (Stream b -> c) -> c
10:47:59 <Heffalump> without looking at the length of Stream a
10:55:09 * Heffalump reads the code for ContT
10:55:20 <Heffalump> what kind of monad transformer doesn't use the operations of the underlying monad?
11:03:57 <Darius> It does for callCC, but it doesn't need to for the others, it purely decides what/when is going to be called, it doesn't change how.
11:04:36 <Darius> Anyways, are you applying a CPS function to every value of the stream(s) or just manipulating streams in CPS code.
11:04:43 <Heffalump> the former
11:07:38 <Darius> Yeah, duplicating the continuation an arbitrary amount of times would be doing something tricky, nevertheless: are the streams streams of pure values?
11:08:39 <Heffalump> yes
11:08:57 <Heffalump> well, I can't duplicate the continuation, if I did that then doing the CPS transformation wouldn't have the effect I want
11:09:14 <Heffalump> so I might as well not bother (and in fact I'm not bothering, unless you can convince me it's actually possible :-)
11:09:40 <Darius> I imagine, anyways these are abortive continuations unless you do tricky stuff so that would be meaningless.
11:10:21 <Darius> However you are mapping a function that takes a value from a stream and returns a CPS computation? therefore getting a stream of CPS computations?
11:10:47 <Heffalump> yeah
11:11:24 <Heffalump> but what I actually need as a result is a CPS computation that takes a stream as parameter
11:15:48 <Darius> Hmm, it sounds like you either want to treat streams as atomic objects or you don't want CPS at all
11:16:07 <Heffalump> well, I do want CPS, I just can't have it :-)
11:16:47 <Heffalump> in particular I want to be able to wrap up the current computation state and put it aside temporarily
11:18:52 <Darius> But is each element of the stream going to be function to do that, or do you just want that for functions operating on streams?
11:19:30 <Heffalump> I'm using streams for backtracking
11:21:11 <Darius> (one of those situations where CPS usually takes the place of streams ;)
11:21:31 <Heffalump> yeah, I guess :-)
11:21:55 <Heffalump> hmm, so actually I guess the answer is that I really do want to copy the continuation, hmm
11:31:32 <Darius> Hmm, typically copying continuations allows you to return multiple results from a "function".
11:32:14 <Darius> You need at least level 2 continuations or else all you have is abortive continuations that can return only once (unless you throw in some mutable state or maybe without it)
11:41:07 <Darius> Anyways the SE solution is that Ralf Hinze's backtracking monad transformer may be able to replace most of your infrastructure in a (more or less) prepackaged solution.
11:42:46 <Heffalump> actually, it won't, cos this is all SML code :-)
11:43:10 <Darius> So it's less prepackaged.
11:43:16 <Heffalump> but there's no intrinsic difference between Haskell and SML in this case so I was just recasting it as a Haskell discussion
11:43:19 <Heffalump> yeah.
11:43:46 <Heffalump> if I decide to fork the continuation, there's no problem and I can just do it
11:43:56 <Heffalump> if not, it's impossible anyway :-)
11:44:50 <Darius> If you are talking about SML's call/cc then it's abortive (I'm pretty sure), but that's okay because you have mutable references.
11:46:08 <Darius> And either way you can use monadic code in any language with higher order functions (and probably without with some chicanery)
11:47:24 <Heffalump> sure.
11:47:33 <Heffalump> no, I'm not talking about SML's call/cc
11:49:36 <CrashChaos_> what is wrong with: main :: IO () \n main = do c <- getChar \n  putChar c ?
11:51:04 <Heffalump> nothing, per se; what goes wrong?
11:51:27 <CrashChaos_> it says: The last statement in a 'do' construct must be an expression
11:51:50 <CrashChaos_> (using ghci 5.04 if it matters)
11:51:53 <Heffalump> is your indentation wrong?
11:52:08 <CrashChaos_> anything I have to care about with the indentation?
11:52:09 <Heffalump> the p of putChar should line up with the c on the line above
11:52:33 <Heffalump> yes, a line is treated as a continuation line if it is more indented than the line above, very roughly
11:53:20 <CrashChaos_> ah ok.. that works better now. thanks
12:07:48 * Igloo wonders why http://www.haskell.org/hawiki/LibraryInfrastructure thinks OneFrom should be a page
12:07:59 <Heffalump> because OneFrom is a wiki word?
12:08:18 <Igloo> A what?
12:08:21 <Heffalump> a wiki word
12:08:27 <Heffalump> FooBar automatically makes a wiki link
12:08:34 <Heffalump> it's probably a typo
12:08:40 <Heffalump> (in this case)
12:09:31 <Igloo> Oh, I understand the technical reason why, it was the reason behind it I was wondering about
12:09:55 <Darius> Why did they write the regexp that way you mean?
12:10:19 <Igloo> No
12:10:39 <Igloo> Oh, what do they look like when you write them?
12:11:16 <Heffalump> just like that
12:11:27 <Heffalump> anything that looks like that in free text gets turned into a wiki link
12:11:35 <Heffalump> you have to do special magic to avoid this
12:12:01 <Igloo> I don't understand. I'm looking at a webpage, not the wiki editting page
12:12:42 <Igloo> Unless you mean anything with capitals in the middle of the word, but I hope you don't
12:12:46 <Heffalump> I do.
12:12:56 <Igloo> Oh dear.
12:13:42 <Igloo> Even worse it's decided that pickOneFrom is a wiki word despite the fact it isn't preceeded by whitespace
12:13:57 <Igloo> IM that OneFrom as part of pickOneFrom is a wiki word
12:14:00 <Heffalump> it hasn't, it's decided that OneFrom is a wiki word
12:14:02 <Heffalump> OIC
12:14:45 * Igloo goes euch euch euch euch euch and gets back to reading
12:15:46 * Heffalump fails to work out how to override this behaviour, though I'm sure it's possible
12:16:06 <Igloo> Look at FreeBSD on that page
12:16:48 <Heffalump> that doesn't have any special markup
12:17:07 <Igloo> Mmm, lovely
12:21:49 * CrashChaos_ doesn't seem to get that indentation thing
12:21:52 <CrashChaos_> do h <- openFile "file" ReadMode
12:21:52 <CrashChaos_>    c <- getContents h
12:22:07 <CrashChaos_> what's the problem with that?
12:22:18 <Heffalump> the problem this time is that you do need to end a do statement with some expression
12:22:27 <Heffalump> i.e. the last line can't be a generator (foo <- bar is a generator)
12:23:20 <CrashChaos_> but a return () doesn't work?
12:23:43 <Heffalump> no, that should
12:23:51 <Heffalump> show me your code with return ()
12:24:11 <SyntaxPolice> Igloo: the WikiWord problem can be solved, if I remember correctly by typing Wiki'''Word
12:24:15 <CrashChaos_> the same as above with the 'r' of return aligned to the h and c
12:24:16 <Heffalump> oh yes, that's right
12:24:29 <Heffalump> CrashChaos_: and you get the error about the last thing being an expression?
12:24:37 <CrashChaos_> no
12:24:49 <CrashChaos_> oh.. hm.. maybe I should create that file first?
12:25:00 <CrashChaos_> nope.. that wasn't it either
12:25:13 <CrashChaos_> I get: Couldn't match `IO String` against `t -> t1`
12:25:20 <SyntaxPolice> hm. thats not quite right...
12:25:29 <Heffalump> SyntaxPolice: nope :-)
12:25:36 <cale> It's Wiki''''''Word
12:25:37 * Heffalump will leave SyntaxPolice to fix the page
12:25:39 <CrashChaos_> and Probable cause: 'getContents' is applied to too many arguments in the call
12:25:47 <Heffalump> ah, the Wiki equivalent of ^B^B in IRC
12:25:49 <cale> i.e. an empty bold section
12:26:12 <cale> if it's code it should probably be backticked anyway
12:26:15 <Heffalump> CrashChaos_: umm, are you sure that's your code?
12:26:57 <CrashChaos_> Heffalump: unless a daemon has taken possession of my mind for the last few minutes: yes.. I wrote that
12:27:08 <cale> i.e. `pickOneFrom` shouldn't be wiki-linked.
12:27:29 <SyntaxPolice> ah, Wiki``Name is the solution.
12:27:49 <Heffalump> CrashChaos_: oh, looks like getContents is just of type IO String
12:27:52 * Heffalump wonders what it does...
12:27:57 <cale> that's probably the shortest way.
12:28:00 <Heffalump> oh, duh
12:28:03 <Heffalump> you want hGetContents
12:28:10 <Heffalump> getContents must work on stdin or something
12:28:37 <SyntaxPolice> (page fixed)
12:28:40 <CrashChaos_> ah yeah.. forgot about that. thanks again
12:28:42 * Heffalump disappears
12:28:50 * Igloo looks back here, splutters and counts the 's
12:30:23 <cale> Igloo - it was 6, 3 to turn bold on, and 3 to turn it off. 2 bakticks should work nicely too, though.
12:30:31 <cale> backticks
12:30:41 * Igloo will stick to HTML  :-)
12:31:16 <Heffalump> I think Wiki's do a good job of simplifying HTML enough to make a consistent look-and-feel
12:31:23 <Heffalump> s/Wiki's/Wikis/
12:31:26 <SyntaxPolice> Igloo: another way to do wiki page names, by the way is like this: ["page"] which allows some more natural page names, but is harder to type :)
12:31:36 <Heffalump> though the whole FooBar thing is a bit ick, I admit
12:31:47 <SyntaxPolice> For stuff like sticking a link to PatternMatching anywhere on the wiki, the FooBar thing is kinda nice.
12:32:10 <Darius> Yeah, you don't have to have HuGs
12:32:17 <Heffalump> I don't really like the concept of WikiNames at all
12:32:36 <SyntaxPolice> HuGs is annoying.  I've been thinking of changing it to ["Hugs"] but I don't feel like breaking anything
12:32:36 * Darius prefers explicit link making markup
12:32:37 <Heffalump> it seems to take on a life of its own, in a sense
12:32:51 <SyntaxPolice> Heffalump: how do you mean?
12:33:08 <Heffalump> in that people start using that capitalisation outside the wiki too
12:33:30 <SyntaxPolice> hehe I suspect that predates wikis
12:33:56 <Igloo> I think the way links work is my 3rd reason for disliking wikis. I always assumed it was something simple like <LinkToHere> with entities for uncommon cases
12:35:07 * SyntaxPolice agrees w/ Heffalump that wikis do a good job of simplifying html.
12:35:25 <SyntaxPolice> The syntax has stopped bothering me, though I haven't stopped making typos like pickOneFrom
12:35:35 <SyntaxPolice> Igloo: what are your other reasons?
12:35:36 <Igloo> I also like "This is IsaacJones's proposal [...] Feel free to alter"
12:36:32 <Darius> Yep, but if you have '-- DerekAElkins' then I believe the rules won't make that into (a/any) WikiName.
12:36:49 <Igloo> Syn: The main one is that if someone fixes a typo while you spend an hour rewriting a whole page you have to start again. Not being able to use a nice editor is the second (admittedly that is the fault of my browser, not wikis themselves)
12:37:34 * Darius when I did large wiki editting I just did it locally with vim then copied and pasted.
12:38:28 <SyntaxPolice> yeah, I do that a lot in emacs.
12:38:37 <Darius> I may still have the originals to the x86ASM_FAQ on CodePedia on my harddrive.
12:39:15 <SyntaxPolice> Igloo: I don't know how they'd fix the race condition problem except by making it more CVS like which would be rather difficult.
12:39:18 <Darius> CodePedia has full history too, which is nice.
12:39:39 <Darius> I don't consider the race condition a problem if I'm editting locally.
12:39:40 <SyntaxPolice> (difficult from a user interface perspective)
12:40:01 <Igloo> Syn: Because they're trying to do it in a web browser, yes. It's fundamentally flawed...
12:40:16 <Darius> If they make a minor change then I diff, merge then paste and if it's a major change then you'll have problems no matter what.
12:40:22 <SyntaxPolice> I think a nice xmlrpc (or something) interface might solve some of the problems. you could write tools to edit locally.
12:41:11 <SyntaxPolice> the nice thing about the web interface, though, is the low cost of a lot of people adding small bits.
12:41:26 <SyntaxPolice> which is pretty fundamental to the wiki nature, if I'm not mistaken.
12:41:37 <Darius> yes, that's the reason for all the craziness.
12:41:58 <CrashChaos_> why can't I do a t <- id c after the c <- hGetContents h ?
12:42:03 <esap> I think all good things require the ability to do small changes.
12:42:27 <Darius> id c is c c is a string not a IO computation
12:42:39 <Darius> (though there is a list monad)
12:42:56 <Darius> You can do let t = c though
12:43:20 <CrashChaos_> uhm.. may I ask why I have to do it this way?
12:44:09 <Darius> You don't, let t = c is rather meaningless, just use c.  But it's the difference between IO computations and functions.
12:45:09 <Darius> Anyways, what are you trying to accomplish with 't <- id c'?
12:45:28 <CrashChaos_> nothing.. I'm actually trying to do something like tuple = function_that_splits_string_at_space c
12:49:34 <cale> use let?
12:50:06 <CrashChaos_> yeah.. just did that.. don't really understand why I have to though
12:50:38 <Riastradh> do x <- y; more ...   is just like   x >>= \y -> do more ...
12:50:47 <Riastradh> Not 'let x = y in do more ...'.
12:50:50 <Darius> (not -just-)
12:51:18 <Riastradh> Er.
12:51:22 <Riastradh> y >>= \x -> do more ...
12:52:28 <Darius> and 
12:52:30 <Riastradh> You can't do:   splitOn space string >>= \x -> do more ...    with the IO monad, because splitOn (hypothetically, of course) doesn't return an IO monad -- it returns a tuple.
12:52:34 <Darius> @type (>>=)
12:52:35 <lambdabot> (>>=) :: Monad a => a b -> (b -> a c) -> a c
12:53:20 <Riastradh> Right, if you tried to return a list in 'do more ...' in that case, it would work until you got to an outer (>>=), because then it would want an IO monad, not a list; and if you returned an IO monad in 'do more ...', then that wouldn't work, because you need a list in that place.
12:54:09 * CrashChaos_ tries to let that sink into his brain somehow
12:54:35 <Darius> (Gratuitous confusion: you could do splitOn space string >>= ... if tuples (or pairs rather) were a monad, and they are! (though not in the report)  They are the Writer monad.)
12:55:07 <Darius> (of course, the type would have to match the surronding code)
12:55:19 <Darius> Which it wouldn't in this case.
13:00:18 <Darius> The actual translation of p <- m;stmts is let ok p = do stmts;ok _ = fail "<implementation defined>" in m >>= ok, which means there is one and maybe another benefit of do notation.
13:00:42 <Darius> (assuming ok is free)
13:01:28 * Heffalump thinks confusing people just starting out with monadic code with the underlying plumbing is not a good idea :-)
13:02:22 <Darius> I more or less stopped directing my comments at CrashChaos_ starting with '(Gratuitous confusion...'
13:03:46 <Heffalump> :-)
13:08:40 * shapr yawns
13:22:52 * Marvin-- yawns
14:04:20 * Igloo wonders if Syn has considered "\lambda ibraries" (with a cat-lambda if possible)
14:06:47 <Riastradh> Syn?  cat-lambda?
14:07:01 <jlouis> hmmm, monads can be represented in operational semantics it seems...
14:07:02 * Marvin-- notes that yep, OF is busy with gcc 3.3
14:07:32 <Igloo> SyntaxPolice
14:07:40 <Igloo> http://www.haskell.org/hawiki/LibraryInfrastructure section 3.6
14:09:23 * Igloo has sent Simon as much info as I can on the _module_registered problem, so maybe I'll be able to built GHC6.0 debs with 3.3 and libarry splitting tomorrow
14:10:00 * Igloo will hopefully be able to finish off the rest of the packaging tonight
14:10:25 <Marvin--> yay
14:11:47 <Heffalump> does the ghc tree have a debian/ directory?
14:13:25 <Igloo> No
14:30:40 <ska-fan_> How cool is Haskell?
14:31:01 <jlouis> 10
14:31:08 <dennisb> or even 12
14:34:09 <ska-fan_> 12 of 10. Ð¾ÑÐµÐ½Ñ ÐºÑÑÑÐ¾
14:37:54 <Marvin--> eh..how nice
14:38:19 <hdaume> hi all
14:38:56 * Darius adds @shapr to TODO list.
14:39:55 <kip> if all top level declarations were required to be typed, would it make mutually recursive modules trivial to implement?
14:40:09 <Igloo> To make it bounce?
14:40:15 <kip> explicitly typed by the user
14:40:28 <Darius> Igloo: among other things
14:40:32 <Heffalump> all exported declarations, you mean?
14:40:36 <kip> yes, sorry
14:40:48 <Heffalump> I believe so.
14:42:22 <Igloo> I think Makefiles for building a file at a time might be slightly tricky
14:44:20 <kip> I see what you mean.  Maybe the ghc *.hi system isn't so bad
14:44:45 <Heffalump> ghc --make could work
14:45:16 <Igloo> With ghc --make it's easy to do it without giving explicit types
14:46:12 <kip> I see
14:46:49 <Heffalump> igloo: how?
14:47:34 <Igloo> Because you can load all teh files at once and infer types as you normally do inside a single module
14:48:47 <kip> I take it this method does not force recompilation of every file?
14:50:54 <Heffalump> oh, true
14:51:03 <Heffalump> kip: it almost certainly does
14:51:12 <Heffalump> you want that anyway, because the inliner works across modules to make efficient code
14:51:37 <kip> But it does dependency analysis, no?
14:52:28 <Heffalump> oh, not /every/ file
14:52:41 <Heffalump> but every file in the mutually recursive set
14:53:17 <kip> Yup
18:49:50 <Riastradh> Has anyone ordered an HM t-shirt yet to find if the text works?
18:50:33 * syntax-laptop is waiting to see if the text works first (and to understand HM)
18:50:35 <syntax-laptop> ;)
18:51:23 <Riastradh> Bah.
18:51:42 <Riastradh> No one is adventurous?
19:11:34 <Pseudonym> Is anyone else having trouble with ghc's cvs repository?
19:11:38 <Pseudonym> Or is nobody else trying?
19:12:01 <Pseudonym> Oh, it works now.
19:12:04 <Pseudonym> Never mind!
19:12:27 <Pseudonym> Actually, I do have a question.  Who knows lots about the internals of GHC?
19:13:43 * Riastradh knows that it's really gross and cpp is overused.
19:13:48 * Pseudonym nods
19:14:00 <Pseudonym> I was curious if single-method typeclasses are boxed or unboxed.
19:14:22 <Pseudonym> It seems to be that if a typeclass a) doesn't have a superclass and b) has only one method, it could just be represented as a function.
19:14:23 <Riastradh> ATFML.
19:14:43 * Pseudonym will check the source
19:14:58 <Pseudonym> Possibly a rash thing.
21:11:36 <Pseudonym> Cool, it does.
21:12:01 <Pseudonym> That's excellent.
21:54:57 <juhp> hmmm, ghc-6.0 doesn't seem to build ghc-5.04.3....
