03:48:57 * shapr sjunger
03:49:09 <shapr> gooood morning #haskell!
03:49:23 <shapr> Riastradh: hey, I want a T-Shirt like that too, did you find a good HM pic?
03:49:55 <Lilith> g'day shapr
03:49:56 <shapr> how is everyone this fine morning?
03:49:59 <shapr> hiii Lilith!
03:50:11 <shapr> Lilith: should I put a picture of my unicycle online too? ;-)
03:50:24 <Lilith> shapr: uhm. sure!
03:50:39 <shapr> ok, later today hopefully
03:51:01 <shapr> how's the thesis treating you?
03:51:12 <Lilith> not working on it now
03:51:20 <Lilith> i've got more pressing issues ;>
03:51:25 * shapr wonders
03:52:40 <shapr> SyntaxPolice: hey, any word on ghc6 debs?
03:52:51 <shapr> Lilith: secret issues?
03:53:01 * wli is looking to apt-get dist-upgrade himself
03:53:22 <shapr> wli: me too! 
03:53:43 <shapr> I want to apt-get -uf install academic-papers-haskell-*
03:53:50 * wli boggles
03:55:41 <shapr> Darius: hey, could the "lightweight implementation of generics and dynamics" get rid of using Dynamic in lambdabot ?
04:10:47 <shapr> hi Strike 
04:11:07 * shapr reads mailing lists
04:13:54 * shapr boings
04:14:38 <shapr> hi d-burp
04:14:39 <shapr> wassup?
04:15:02 <d-burp> tjenis, det är bra, själv då?
04:15:31 <shapr> bara bra också. Jag vill lärar mig mer Haskell!
04:15:44 <d-burp> s/rar/ra/ 
04:15:46 <d-burp> :)
04:15:59 <d-burp> sharp: just practice more
04:16:18 <shapr> tack för hjälp, jag mäste gå till tvättstuga nu
04:16:23 <d-burp> shapr: i learn best by having an actual task to solve, and by being paid to do it :)
04:16:30 <d-burp> måste
04:16:32 <d-burp> :)
04:16:56 <shapr> d-burp: I used to say that, but I've decided having a task is like having homework, and that I can probably do it just as well by myself.
04:17:02 <shapr> I haven't tried that yet though, so I could be wrong.
04:17:26 <shapr> I challenge you to assign yourself some Haskell 'homework' and see if that idea works for you ;-)
04:17:26 <d-burp> being paid and having a deadline is good :)
04:17:34 * shapr runs to the washroom
04:18:13 * d-burp looks forward to receiving money from shapr :^)
04:18:25 <wli> d-burp: sad
04:18:38 <wli> and also uninteresting
04:21:47 <d-burp> it depends on the task
04:22:20 <wli> d-burp: are you being paid to be on #haskell?
04:22:29 <d-burp> nope wli
04:22:56 <wli> d-burp: why are you here?
04:23:19 <d-burp> i find functional programming very interesting, why are you here?
04:23:36 <wli> b/c I like programming in Haskell
04:25:16 <d-burp> i don't know that much Haskell, we used SML in school, but I realize the advantages of lazy evaluating and a better type system than SML
04:35:12 <aleitner> anybody knows what omega-regular means wrt fintie autmata ? (sorry a little OT)
04:37:47 <clausen> from google, it looks like it's a superset of the regular languages
04:38:23 <clausen> (i.e. a superset of the set of all languages that can be matched by regexps)
04:39:29 <shapr> g'day clausen 
04:39:41 <clausen> gday shapr
04:39:42 <shapr> clausen: have you expanded your FP filesystem writings?
04:39:47 <clausen> shapr: no
04:39:51 <clausen> shapr: been working on other things
04:39:59 <shapr> working on nifty stuff?
04:40:04 <clausen> my research project is on reputation metrics
04:40:13 <aleitner> clausen: thanks, what hit did you look at in google?
04:40:15 <shapr> that is nifty
04:40:25 <clausen> I've also been doing coursework on algebra, compression, and databases
04:40:27 <shapr> pgp/advogato/etc ?
04:40:33 <clausen> compression has been particulary fun
04:40:36 <clausen> shapr: more advogato than pgp
04:40:40 <clausen> and ebay
04:41:16 <shapr> what's new in the world of compression? anything cooler than burroughs-wheeler?
04:41:38 <clausen> burrows :)
04:41:48 <shapr> bah, close enough ;-)
04:41:52 <clausen> hmmm, well I came up with yet another entropy-code approximation algorithm
04:42:01 <clausen> (not sure if this one's been done before...)
04:42:36 <shapr> I think there's a database of algorithms at AT&T somewhere
04:42:47 <shapr> near their database of sequences
04:42:51 <clausen> aleitner: I looked for '"omega regular" dfa'
04:43:15 <clausen> shapr: wouldn't it be undecideable to determine if two algorithms are the same? :p
04:43:51 <shapr> not in all cases
04:44:19 <shapr> I wonder how far you could take the bananas and lenses approach
04:44:45 <aleitner> clausen: thanks alot!
04:44:59 <shapr> Meijer et al pulls different types of recursion out into separate combinators 
04:45:25 <shapr> aleitner: hello, are you learning Haskell?
04:46:11 <aleitner> shapr: well, not really. i used to program in haskell a little. i adore the language though (;
04:46:27 <shapr> me too
04:46:51 <shapr> There's an active community here and on the mailing lists, feel free to jump in :-)
04:47:21 <aleitner> yeah, it doesn indeed look very active
04:47:50 <shapr> one of the #haskell hobbies lately has been lambdabot
04:48:09 <shapr> many people have written a plugin or two, one person even turned lambdabot into an irc client
04:48:32 <aleitner> (;
04:48:37 <aleitner> written in haskell?
04:49:08 <shapr> yes!
04:49:10 <shapr> @fact source
04:49:12 <lambdabot> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
04:49:22 <shapr> @listmodules
04:49:23 <lambdabot> I have the following modules installed: ["chess","dict","eval","fact","hello","karma","more","quote","state","system","topic","type"]
04:50:09 <shapr> @listcommands chess
04:50:09 <lambdabot> Module chess provides the following commands: ["ply","reset-chess","validmoves","board","flip-board"]
04:50:57 <aleitner> nice
04:51:01 <shapr> hm, I haven't checked the refactored QuoteModule into the cvs tree
04:51:07 <aleitner> its compiled with ghc, right?
04:51:07 <shapr> @yow
04:51:09 <lambdabot> My Aunt MAUREEN was a military advisor to IKE & TINA TURNER!!
04:51:15 <aleitner> (;
04:51:20 <shapr> yes, ghc5 at the moment.
04:51:37 <aleitner> can ghc load modules at runtime?
04:51:38 <shapr> it should build with ghc6 after some minor modifications.
04:52:05 <shapr> o3 wrote a runtime loader
04:52:15 <shapr> but it only works for ghc5.04.2 right now.
04:52:19 <aleitner> thats interesting
04:52:29 <shapr> He's promised to update it for ghc6 any day now
04:52:31 * shapr pokes o3
04:52:36 <aleitner> how does it work? i mean since haskell uses compile time overloading (iirc)
04:52:49 <shapr> Have you used GHCi ?
04:53:03 <aleitner> doesnt that mean that if one module loads all others need to be recompiled to make sure
04:53:19 <aleitner> all function applications bind to the correct function?
04:53:43 <shapr> at the moment it uses dlopen() and friends
04:53:47 <aleitner> no, not used GHCi (i only used hugs for the small samples i wrote)
04:54:17 <shapr> I would like to have a platform-independent hot loader like erlang has, but that hasn't happened yet.
04:54:38 <aleitner> are there no problems, where an additional module could modify bindings outside of the module?
04:54:40 <shapr> oh, the irc client that's based on lambdabot is at http://www.haskell.org/hircules/
04:54:56 <shapr> There are some problems with type-safety, but I don't know all the details.
04:55:15 <aleitner> i see
04:55:26 <aleitner> if there werent, i would love to know how it worked (;
04:55:27 <shapr> Some people have proposed solutions to the runtime type safety problem, using Dynamic for example, but I don't know myself.
04:56:19 <shapr> http://www.algorithm.com.au/wiki/hacking/haskell.ghc_runtime_loading
04:56:20 <aleitner> i see
04:57:12 <shapr> The plan for lambdabot is to turn its modules into runtime loaded modules once the ghc6 loader is finished.
04:57:30 <shapr> Then I'll be able to tell you more about it.
04:57:47 <aleitner> cool
04:58:30 <shapr> Did you learn Haskell in university?
04:59:40 <shapr> I've actually been paid to write Haskell once, I hope to make it a regular occurence. ;-)
05:01:17 <aleitner> no
05:01:30 <aleitner> i come from the eiffel camp, and there are a lot of haskell fans there
05:01:36 <shapr> Oh, I see.
05:02:00 <shapr> I've been thinking about Eiffel lately, have you seen QuickCheck?
05:02:02 <shapr> @fact quickcheck
05:02:03 <lambdabot> Nothing
05:02:04 <shapr> hm
05:02:12 <aleitner> nope
05:02:17 <shapr> @fact quickcheck http://www.math.chalmers.se/~rjmh/QuickCheck/
05:02:18 <lambdabot> set quickcheck to http://www.math.chalmers.se/~rjmh/QuickCheck/
05:02:57 <shapr> In the second QuickCheck paper, it looks like most of DbC can be tested by QuickCheck
05:03:19 <aleitner> downloading ... (;
05:03:45 <shapr> Of course, it doesn't happen at runtime, only at test time, and it's not as transparent 
05:04:20 <shapr> I'm a great fan of unit testing, especially unit-test-first
05:04:34 <shapr> I'd like to find some way of doing quick-check-first
05:04:48 <aleitner> i see
05:05:17 <aleitner> i came to love DbC, not only because of testing, but because of its expressiveness while designing
05:05:40 <aleitner> it helps me a lot to find out what a given function really should do (;
05:05:56 <shapr> Yes, I agree.
05:06:33 <shapr> I haven't used DbC directly, as in Eiffel. I've read about it and tried to understand the contracts that my code should be following.
05:07:24 <aleitner> paper looks interesting, thanks
05:07:51 <shapr> I've written up the demo tests for both the first and second papers, I have the code online if you're interested.
05:08:16 <aleitner> thanks, but i think i really should go back to study my paper i have to read (;
05:08:27 <shapr> heh, ok :-)
05:08:28 <aleitner> so far, i understood nada 
05:08:57 <shapr> Yes, I shouldn't distract you from what you're doing...
05:09:17 <shapr> I should do my own work instead.
05:09:28 <aleitner> but it sure was interesting chatting, cu
05:15:30 <Lilith> woot!
05:42:15 * shapr boings
06:17:44 <SyntaxPolice> hi
06:28:21 <mgoetze> hi SyntaxPolice :)
06:30:19 <SyntaxPolice> shapr: no word on ghc6 in debian
06:30:26 <SyntaxPolice> mgoetze: how's it going?
06:30:38 <mgoetze> SyntaxPolice: too damn hot
06:31:03 <SyntaxPolice> heh its real nice here
06:31:42 * andersca gaboings
06:35:59 <steveh> Hi :)
06:36:14 <mgoetze> fortunately, i have some malzbier in the fridge
06:37:21 <steveh> is that one of those beers we don't get in the states?
06:39:57 <mgoetze> it's a particular kind of non-alcoholic drink :)
06:43:45 <steveh> aaah
06:43:49 <steveh> I just saw "bier" :)
06:44:21 <mgoetze> well, there are some similarities :)
06:50:48 * Riastradh prods shapr.
06:52:21 <SyntaxPolice> Riastradh: you were asking about go clients; mgoetze is the guy to ask.
06:52:32 * SyntaxPolice pokes shapr
06:52:38 <Riastradh> SyntaxPolice, er, I found Goban, which works nicely.
06:52:43 <SyntaxPolice> OK
06:58:38 <shapr> y0
06:59:01 <shapr> Riastradh: hey, did you find a pic of HM?
06:59:44 <Riastradh> Yes, but I'm not sure it will work on a t-shirt, due to some of the small symbols.
06:59:56 <shapr> can you point me to the pic?
07:03:09 <Riastradh> http://www.bloodandcoffee.net/campbell/images/HM-t-shirt.png
07:03:51 <shapr> hmm
07:04:05 <shapr> those symbols must be *really* small, I can't see anything!
07:04:35 <Riastradh> Er, that's odd.
07:07:04 <shapr> I could go for an 11x14 pic if that would let the symbols fit in there better.
07:09:02 <shapr> Riastradh: are you working from a GIMP file?
07:09:21 <Riastradh> No.
07:09:25 * Riastradh is using GraphicConverter.
07:09:27 <shapr> oh
07:10:23 <shapr> I wanna see the algorithm
07:10:27 * shapr boings impatiently
07:11:59 <Igloo> :-)
07:12:03 <shapr> hi Igloo!
07:12:13 <Igloo> Yo, shapr
07:12:19 <shapr> wassup?
07:12:30 <Igloo> metafont
07:12:42 <shapr> Riastradh: I'll have to buy an HM t-shirt for Ashley Yakeley as a gift, since he came up with the idea ;-)
07:12:49 <shapr> Functional Metafont?
07:12:56 * Igloo is attempting to make a dashed outline of a lambda
07:13:00 <shapr> oh!
07:13:03 <Igloo> Nah, plain old metafont
07:13:10 <Riastradh> Huh?  I did some stuff to it and now only the algorithm shows.
07:13:11 <shapr> gimp lets you make dashed lambda pretty easily
07:13:21 <Igloo> Oh?
07:13:22 <shapr> Riastradh: yay! I can seeeee it!
07:13:36 <Igloo> I was hopinh getting a big lambda from CMR would be a good first step
07:13:39 <Riastradh> But now you can't see the 'WHAT PART OF ' ... ' DON'T YOU UNDERSTAND?'
07:14:17 <shapr> how did you get the algorithm? from a .ps or something?
07:14:21 <ChilliX> Riastradh: :-)
07:14:23 * Igloo thinks Riastradh should use (functional) metapost :-)
07:14:31 <ChilliX> Riastradh: but the def of generalize is missing
07:14:35 <shapr> I have some minor GIMP skillz
07:14:43 <Igloo> shapr: How would you make a dashed lambda?
07:14:45 <shapr> though I'd have to change window managers
07:15:06 <shapr> Igloo: I think there's a dashed stroke
07:15:34 <shapr> at worst, I'd make a mask and drop a black&white tiles pattern on top of it.
07:16:59 <shapr> well, I'll look at it after work...
07:17:16 <shapr> Riastradh: yay! it works!
07:17:55 <Igloo> Well, I'll need the shape first anyway. I was putting off worrying about the dashedness until then  :-)
07:18:14 <shapr> I'd use a lambda from one of the greek fonts I have installed.
07:18:17 <Igloo> (although actually I should be able to get metafont to do it - that would be convenient)
07:18:28 <shapr> apt-cache search xfonts-greek
07:23:59 <kunphuzil> To all: Sorry for all the joins and quits, my ISP is having problems.. Yesterday it was completely out.
07:33:20 <shapr> hi Smerdyakov
07:33:22 <shapr> wassup?
07:33:57 <Smerdyakov> Well, yes!
07:39:47 --- topic: '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 6.0 Released - http://www.haskell.org/ghc/"]'
07:39:47 --- topic: set by lambdabot on [Thu May 29 16:31:07 2003]
07:39:47 --- names: list (clog Smerdyakov kunphuzil Dark-Star ChilliX steveh tic Lilith xkb d-burp kosmikus galority norpan lambdabot mattam themus wax cale Darius Strike lowks Riastradh Fractal opet buggs|afk smklsmkl keverets Segora gdsx tmoertel shapr mgoetze stepcut seth_ ludde andersca emu kloo sjj jak wli alanl_ Igloo polli dennisb jlouis Chilli nbd RadekH Logan el_diego thornber Rafterman SyntaxPolice)
07:58:17 <cale> Hey, that looks pretty good!
07:58:39 <shapr> Riastradh: is that the final version?
07:58:57 <shapr> Riastradh: can we stick it onto cafepress now?
08:00:15 <shapr> hm, what about a short descriptive blurb on the back? or maybe just a citeseer url?
08:00:45 <Riastradh> A descriptive blurb!?
08:00:59 <Riastradh> DESCRIPTIVE!?
08:01:05 * shapr ducks
08:01:10 <cale> How about the implementation by Nikita in perl?
08:01:18 <shapr> @yow
08:01:19 <lambdabot> On the other hand, life can be an endless parade of TRANSSEXUAL
08:01:19 <lambdabot>  QUILTING BEES aboard a cruise ship to DISNEYWORLD
08:01:19 <lambdabot>  if only we let it!!
08:02:08 <Riastradh> cale, what about it?
08:02:34 <cale> for the back of the shirt :)
08:02:42 <Riastradh> Nah, they're entirely separate.
08:02:50 <Darius> Without a definition of generalize there's a quite reasonable answer to the posed question.
08:02:54 <Riastradh> Besides, the Hindley-Milner stuff wouldn't make sense to a Perl programmer anyways.
08:02:59 <Riastradh> Curses.
08:04:43 --- topic: '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 6.0 Released - http://www.haskell.org/ghc/"]'
08:04:43 --- topic: set by lambdabot on [Thu May 29 16:31:07 2003]
08:04:43 --- names: list (clog Smerdyakov kunphuzil Dark-Star ChilliX steveh tic Lilith xkb d-burp kosmikus galority norpan lambdabot mattam themus wax cale Darius Strike lowks Riastradh Fractal opet buggs|afk smklsmkl keverets Segora gdsx tmoertel shapr mgoetze|away stepcut seth_ ludde andersca emu kloo sjj jak SyntaxPolice Rafterman thornber el_diego Logan RadekH nbd Chilli jlouis dennisb wli alanl_ Igloo polli)
08:04:58 <Riastradh> Argh, I can't find one.
08:05:31 <Darius> It's in that same paper.
08:06:39 <Riastradh> How do you know what paper I'm looking at?
08:07:17 <Riastradh> Oh, hey, it is!
08:07:24 <Darius> Cale posted the link yesterday.
08:07:28 <Smerdyakov> Riastradh, where is the image?
08:07:59 <Riastradh> But it depends on freevars.
08:08:14 <Riastradh> Smerdyakov - http://www.bloodandcoffee.net/campbell/images/HM-t-shirt.png
08:14:18 <cale> freevars(\tau) = \tau, freevars(\fa \vec\alpha. \tau) = freevars(\tau) - \vec\alpha
08:15:07 <cale> That is, freevars \Gamma is just the set of free variables in \Gamma.
08:24:18 <Riastradh> Curses, I forgot the definition of freevars, now.
08:24:26 <shapr> which paper?
08:24:42 <shapr> cale: do you still have the link to the paper?
08:24:54 <cale> http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2002/2002-031.pdf
08:25:12 <Darius> archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2002/2002-031.pdf
08:25:17 <cale> it's one of the first links if you google for "hindley milner"
08:25:37 <shapr> cool, thanks
08:26:17 <Riastradh> Grr.  GraphicConverter keeps borking...
08:26:25 <shapr> oh, you added generalize
08:26:35 <Riastradh> And whatever that upside-down L is.
08:26:46 <shapr> capital lambda?
08:26:57 <andersca> hey
08:26:59 <shapr> hi
08:27:16 <cale> "upside-down L" is Gamma.
08:27:25 <shapr> oh
08:27:29 <shapr> it's all greek to me.
08:27:33 <cale> heh
08:27:42 * shapr uses that old joke for the zillionth time
08:29:59 * shapr snickers at IDG
08:30:10 <shapr> We should sell these guys some monads: --> http://www.idg.net/go.cgi?id=802763
08:31:37 <cale> Based on what I got from the paper, it represents the type environment we're using - that is, a mapping from variables to type schemes. Gamma\x, (Gamma with x removed from its domain) is almost standard mathematical notation.
08:33:56 <cale> maybe line up the =_{def} signs for Gamma\x and generalize?
08:34:41 <shapr> yah, that would fit the academic paper look
08:34:43 * Riastradh gags at the sea of buzzwords.
08:35:47 <cale> The problem with being in math is you start to lose your handle on what English is. :)
08:36:06 <shapr> I think you just get a wider definition of English.
08:36:27 <xkb> english++ (evil pun)
08:36:29 <cale> One that totally overwrites commonly used English words :)
08:36:31 <Riastradh> But it's not English -- it's Greek!
08:36:35 <shapr> hi xkb 
08:36:38 <xkb> hi
08:36:46 <shapr> xkb: wassup?
08:37:08 <xkb> hmm.. not much.. just looking for a job (again)
08:37:23 <shapr> No time for Haskell then, eh?
08:37:25 <xkb> Ph.D. position hopefully
08:37:29 <xkb> not much atm
08:37:47 <xkb> Still finishing disertation
08:37:51 <Riastradh> OK, now I think the image is getting maybe a little too big for a t-shirt.
08:38:07 <shapr> nah, I think it's great.
08:38:09 <xkb> but funding stopped.. so I have to work besides
08:38:18 <shapr> xkb: that sucks
08:38:43 * Riastradh included freevars...but isn't sure he did it right -- should there be a 'def' under the = for freevars?
08:38:44 <xkb> shapr : yeah
08:38:54 <cale> just drop the definition of freevars and Gamma\x if you don't want them - they can be inferred by context :)
08:39:10 <cale> sure - there could be
08:39:28 <Riastradh> There -could- be or there -should- be?
08:39:40 <cale> 'def' is just a reminder that we're making a definition
08:40:01 <Riastradh> But won't it look kind of odd to use it in some places but not in others?
08:40:05 <cale> there probably should be style-wise.
08:40:57 <shapr> hi Arnia!
08:41:39 <Arnia> Heya :)
08:41:46 <cale> if you're doing this in LaTeX or something, you can probably shorten 'freevars' to FV, as that's a pretty standard thing to do.
08:42:05 * Riastradh is doing this in GraphicConverter.
08:43:28 <cale> alright.
08:43:48 <xkb> yeah.. see oa the book by Pierce, Types in Programming languages
08:44:35 <Arnia> shapr: Had any more insights into the App arrow?
08:44:51 <shapr> nope, haven't even looked at it since :-/
08:45:09 * shapr looks
08:45:16 <Riastradh> To whom should I give 'referral credit' on Cafepress?
08:45:25 <shapr> huh?
08:45:35 <shapr> oh
08:45:45 * Riastradh is registering an account so he can put the t-shirt on it.
08:45:51 * shapr dunno
08:46:44 <Riastradh> Eh, I'll leave it blank.
08:47:37 <shapr> Arnia: you could even do runtime loading of modules with the ApplicationArrow
08:48:30 <Arnia> shapr: Yeah... and thread creation and IPC
08:48:40 <shapr> yah, I've been wondering about thread creation
08:48:59 <Riastradh> What should the shop name be?
08:49:28 <steveh> hum
08:50:19 <steveh> I've got a challenge for you all ... what's a fast version of a function that will take [1,2,3] and return [1,2,3,2,1] ?
08:50:42 <steveh> I don't like my idea because it involves ++
08:50:42 <shapr> Riastradh: hmtshirt ?
08:51:00 <Arnia> shapr: I'm feeling like making it all nice and unified and abstract
08:51:01 <Riastradh> steveh, you won't be able to avoid (++).
08:51:07 <steveh> another example [a,b,c,d] [a,b,c,d,c,b,a]
08:51:19 <steveh> Riastradh: well, I guess that makes me feel better then :)
08:51:23 <cale> ++ isn't so bad
08:51:24 <Riastradh> shapr, but that would restrict it to only having that one t-shirt.
08:51:32 <shapr> Arnia: do the AAs have some idea of sequence? Can you dump a lot of calls and have them automatically spawn new threads?
08:51:36 <steveh> I guess it's only one ++ so you're right
08:51:46 <shapr> Riastradh: oh, what about CurriedClothes ?
08:51:55 <Riastradh> But it has nothing to do with currying.
08:52:05 <shapr> Hasklothing?
08:52:22 <Riastradh> But it was first used in ML, not Haskell.
08:52:33 <shapr> NotMyType ?
08:52:45 * Riastradh ughs at the terrible pun.
08:52:46 <Arnia> shapr: Well, at each timestep, the reactimater takes the output events from the app arrow and responds... so its all very sequential.
08:52:49 <cale> heh, these are all good
08:53:11 <shapr> MetakLothing?
08:53:17 <xkb> lol
08:53:44 <Riastradh> Hmm.  Do you think this t-shirt is safe for children under the age of 13?
08:54:04 <shapr> it might explode their brains.
08:54:08 <Igloo> It could free their minds, which seems to be a crime these days
08:54:08 <Riastradh> Yeah...
08:54:12 <cale> no, but let's say yes anyway
08:54:33 <shapr> Infurrence?
08:54:34 <shapr> hm
08:55:02 <shapr> Igloo: heh
08:55:05 <Riastradh> I'd like to name it something general involving obfuscated functional stuff.
08:55:10 <cale> "Ye Olde Hindley Milner Clothing Shoppe"
08:55:13 <shapr> hah
08:55:29 <Riastradh> You forgot to add an 'e' at the end of 'Hindley,' 'Milner,' and 'Clothing.'
08:55:44 <shapr> WoolCalculus? ( lamb-da? )
08:55:45 <cale>  "Ye Olde Hindley-Milner Shoppe of Fine Garments"
08:56:02 * Riastradh gags at the pun.
08:56:19 <cale> shapr: that's an incredible pun
08:56:31 <shapr> Hindley, Milner, and Infer. ?
08:56:39 <shapr> like Bob, Joe, and Co. ?
08:56:55 <shapr> cale: watch my ego swell ;-)
08:57:40 <shapr> lambda://clothing/ ?
08:58:05 <shapr> monadsthanyou ?
08:58:21 <xkb> application of clothing on human?
08:58:36 * shapr laughs at thoughts of partial application
08:58:40 <xkb> LOL
08:59:31 <shapr> Riastradh: any further direction?
09:00:14 <shapr> SKI clothing? (the combinators)
09:00:20 <cale> yeah
09:00:35 <shapr> that would be both general and deceptive
09:00:58 <Riastradh> What should the shop ID be, then?
09:01:36 <shapr> ski if it's free
09:01:47 <xkb> Oh btw.. are there any reasonably short papers on SKI?
09:01:52 <Riastradh> I doubt it'll be free.
09:02:02 <Riastradh> xkb - You mean you need a whole -paper- to talk about the SKI-Calculus??
09:02:24 <Riastradh> It's -REALLY- simple:  S f g x = (f x) (g x); K x y = x; I x = x
09:02:37 <cale> xkb - there are some sites on the net I could point you at, but I still want more information. :)
09:02:57 <Riastradh> Transformation:
09:03:04 <Riastradh> Trans[\x.f g] = S Trans[\x.f] Trans[\x.g]
09:03:08 <xkb> Its more for a lecture
09:03:19 <xkb> just curious on how other people explain it
09:03:30 <Riastradh> Trans[\x.y] when x does not occur free in y = K Trans[y]
09:03:40 <cale> http://tunes.org/~iepos/introduction-to-logic/chap00/
09:03:41 <Riastradh> Trans[\x.x] = I
09:03:46 <xkb> tu :D
09:04:09 <Riastradh> Trans[\x.E] when x occurs free in E = Trans[\x.Trans[E]]
09:04:44 <shapr> @eval I 5
09:04:45 <lambdabot> 5
09:04:52 <shapr> @eval K 1 2
09:04:53 <lambdabot> 1
09:05:48 <cale> @eval ((S((S(K S))K))((S((S(K S))K))((S((S(K S))K))((S((S(K S))K))((S((S(K S))K))((S((S(K S))K))(K((S K)K)))))))) (\x. x+1) 0
09:05:49 <lambdabot> 6
09:05:53 <shapr> yow
09:06:04 <shapr> is that a church numeral?
09:06:07 <cale> yeah
09:06:13 <Riastradh> Of course, you could go even farther and use just X.
09:06:33 <Riastradh> S = X (X X); K = X X X; I = X (X X) (X X X) (X X X)
09:06:34 <cale> I'm going to have to start doing that. :)
09:09:31 <cale> with that, I could reduce the number of primitives in my SK calculator. I'm already having strange problems with the head normal form reduction though...
09:12:59 <shapr> anyone know of an NNTP module for Haskell?
09:16:06 <Arnia> shapr: As part of the creation of our framework, what would you say to the use of XUL as a GUI description system?
09:18:54 <xkb> Are there any haskell-libglade bindings?
09:19:17 <cale> xkb - let me know if you find some :)
09:19:21 <xkb> :D
09:19:24 <shapr> I think there is something
09:19:34 <shapr> in either the gtk+hs or gtk2hs binding
09:19:46 <xkb> Would be cool to develop UI's for multiple programming languages
09:19:48 <shapr> Arnia: I know nothing about XUL
09:20:00 <shapr> is it cool?
09:20:11 <xkb> libglade is nice.. 
09:20:22 <xkb> I use it for python mostly
09:20:32 <xkb> for=with
09:20:43 <xkb> this is not a good day to type
09:20:56 <shapr> everday is a good day to type
09:21:04 <shapr> didn't the navajo say that?
09:21:28 * shapr gets irritated at python code he has written
09:21:35 <shapr> I want NNTP.hs !!
09:21:46 * shapr reads RFC
09:21:48 <Arnia> shapr: XUL is very cool... an XML for user interfaces. If we build a box model interpreter for haskell, we'll be away ;)
09:22:01 * Igloo wonders where to find a tiny picture of scissors like you get on things you are meant to cut it
09:22:08 <xkb> Isnt XUL comming from Mozilla?
09:22:28 <shapr> Arnia: sure, sounds good.
09:23:23 <Arnia> xkb: Yes, along with XBL and other cool stuff. I'm just trying to eliminate the tedious wiring that needs to be done at the moment
09:23:28 <Darius> 8<
09:25:12 <xkb> :)
09:26:10 <cale> Igloo: http://www.marvosym.de/marvosym.e.html
09:27:04 <Igloo> Ooo, ta, *hunts for licence*
09:27:21 <Igloo> Actually, there's probably one in symbols.ps if it's not nice
09:28:38 <Riastradh> Argh.  The image on the t-shirt is tiny.
09:28:55 <shapr> do they allow 11x14 ?
09:28:55 <cale> there's a postscript version at http://www.dante.de/CTAN/fonts/psfonts/marvosym/
09:29:00 <shapr> hej Marvin-- 
09:29:12 <shapr> Riastradh: what image sizes do they allow?
09:30:00 <Riastradh> I've got it as large as I can make it, I think.
09:30:06 <Marvin--> heyho
09:30:07 <cale> (marvosym is a standard teTeX package)
09:30:15 * Marvin-- has been helping a friend move all day *phew*
09:30:22 <shapr> Riastradh: what's the url to the shop?
09:31:35 <Riastradh> Er, should the image go on the back or the front?
09:32:02 <Riastradh> Maybe the front should just be a lambda with a tau subscript.
09:32:33 <Riastradh> ...on the pocket.
09:34:39 <Marvin--> topped it off with the first dip of the year in a nearby lake
09:35:15 <shapr> Riastradh: that sounds nice
09:36:51 <shapr> something sort of warm so I can wear it at ICFP :-)
09:37:15 <shapr> Marvin--: http://www.bloodandcoffee.net/campbell/images/HM-t-shirt.png
09:38:02 <shapr> wow, gnus can delay sending an article. nifty
09:38:33 <Marvin--> heh, someone took that joke literally? :)
09:39:25 * Riastradh did.
09:40:00 <Riastradh> http://www.bloodandcoffee.net/campbell/images/lambda-subtau.png
09:40:30 <Marvin--> is that the #haskell logo? :)
09:40:39 <Riastradh> Er.
09:40:41 <Riastradh> Whoops.
09:40:47 * Riastradh kicks GraphicConverter.
09:40:58 <Lilith> part of the lambda looks missing
09:41:14 <Marvin--> indeed
09:41:26 <Riastradh> It got better.
09:42:30 <Marvin--> me like
09:42:30 <shapr> oh, nice
09:42:31 * Marvin-- wants a shirt
09:42:35 <shapr> I must have one for ICFP!
09:43:13 <shapr> Marvin--: how do you say "what part of x don't you understand?" in swedish?
09:43:30 <Smerdyakov> There is no Swedish translation of x. :-(
09:43:38 * Riastradh kicks GraphicConverter again!
09:43:39 <shapr> Smerdyakov: yes there is, they use the å
09:43:49 <Smerdyakov> Who wants to come see a functional programming toy? http://www.hprog.org/applet.html
09:43:51 <shapr> the so-called a-ring
09:44:05 <shapr> I see a small empty box.
09:44:26 <Marvin--> shapr: "vilken del av x förstår du inte?"
09:44:27 <Lilith> oh
09:44:37 <Lilith> that's supposed to have the java plugin?
09:44:48 <shapr> I think so.
09:44:50 <Smerdyakov> Lilith, whatever runs Java 1.3+ applets.
09:44:53 <Darius> It's Zen-Buddhist FP shapr.
09:45:04 <shapr> hah!
09:45:16 <shapr> what is the sound of one lambda clapping?
09:45:16 <Lilith> Smerdyakov: it's written in haskell?
09:45:25 <Marvin--> argh, suddenly my scroll wheel doesn't work!=
09:45:25 <Marvin--> ?
09:45:54 <Marvin--> grmbl, I have a 1.4.1 x-java-vm, why doesn't it work?
09:46:01 <shapr> stepcutHM: should I infer you're reading about the HM algorithm?
09:46:04 * shapr snickers
09:46:40 <Smerdyakov> Lilith, ha! No.
09:46:53 <Smerdyakov> Lilith, isn't it your job to make it so that it could be? ;)
09:47:32 <Lilith> oh
09:47:36 <hdaume> hi all
09:47:40 <Lilith> sorry, i misparsed that
09:47:59 <Lilith> my brain insists that hprog == haskell programs
09:48:18 <Lilith> hi hal
09:48:34 <hdaume> hi Lilith
09:48:44 <stepcutHM> shapr: no, it just means that I am at HoMe and and about to go to work (and use the HM algorithm)
09:48:45 <Lilith> Smerdyakov: indeed it is :p
09:52:01 * Lilith laughs
09:52:05 <Smerdyakov> stepcutHM, your favorite toy is up again. ;-)
09:52:24 <Lilith> you never know what you find in caches around the world
09:52:48 <Riastradh> http://www.cafepress.com/skicalc
09:53:52 <Riastradh> Err.
09:53:57 <Riastradh> http://www.cafeshops.com/skicalc
09:55:24 <shapr> hi hal, support the HSU, buy a t-shirt!
09:56:06 <stepcutHM> Riastradh: do you have a .ps of the back image?
09:56:26 <hdaume> HSU?
09:56:35 <shapr> the Haskell Secret Underground
09:56:43 <shapr> it doesn't exist of course.
09:56:50 <hdaume> ah
09:56:51 <Riastradh> stepcutHM, a .ps?  No.
09:57:10 <Riastradh> shapr, you must mean 'don't support the nonexistent HSU.'
09:57:19 <stepcutHM> Riastradh: just the .png?
09:57:26 <Riastradh> Right.
09:57:42 <shapr> Riastradh: I think you should include an url to http://www.haskell.org/hawiki/QuotesPage
09:58:41 <shapr> Riastradh: heyyyy, can I be the one who has the honor to send the url in an email to ashley yakeley?
10:00:25 <Riastradh> Go ahead.
10:00:44 <Riastradh> Although I would wait until someone has discovered if it's legible or not.
10:14:29 <shapr> it's gonna take 'em forever to send to sweden I think.
10:15:12 <Riastradh> Whence are they sent?
10:15:32 <shapr> their office hours are PST
10:15:52 <Riastradh> Does anyone here live in that region?
10:15:54 <shapr> so they're probably Seattle/SF
10:16:04 <Riastradh> Or just somewhere in California in general.
10:16:13 <shapr> yup
10:19:47 <Marvin--> it'd be awesome if someone could pick up a bunch of shirts and bring to HW
10:20:01 <hdaume> whence are what sent?
10:20:07 <hdaume> ah, the shirts :)
10:20:10 <Riastradh> CafePress stuff.
10:22:06 * shapr bounces happily
10:22:35 <shapr> hm, how large am I?
10:23:49 * Riastradh makes vague gestures with his hands.
10:23:51 <Riastradh> That large.
10:24:41 * shapr grins
10:24:56 * shapr reads the http://www.haskell.org/hawiki/QuotesPage
10:26:25 * shapr bounces happily
10:27:59 * Igloo bounces having finished the logo for http://www.haskell.org/th/
10:28:10 <shapr> Riastradh: if the pic is legible, I can write a short blurb and mention it on haskell@haskell.org
10:28:56 <Igloo> $14 sounds quite cheap given they have no idea how many they will sell and it's probably a small number
10:29:17 <shapr> I suspect they do print-on-demand
10:29:32 <Igloo> But doing tiny numbers is expensive
10:30:08 <shapr> maybe if you have a business focussed on doing tiny numbers?
10:30:10 <Igloo> You should try to organise for someone from the US going to ICFP to take orders  :-)
10:30:23 <Riastradh> $13.99 is the 'base price.'  I really hate things being .99 cents and stuff and so I changed it to $14.
10:30:23 <shapr> heh, Bea wants one also
10:30:36 <shapr> Riastradh: you're gonna be rich! rich I tell you!
10:30:50 <Igloo> shapr: A lot of the cost is making the thing that prints the design on the clothing
10:31:12 * Igloo isn't sure the writing isn't too small either  :-/
10:31:15 <shapr> if it's using a printer, it would only require software.
10:31:25 <shapr> hey, did I tell you guys the local bakery has a sugar printer?
10:31:55 <shapr> they can print full color on an A4 sized sheet of sugar.
10:32:00 * shapr was amazed
10:32:11 <Igloo> Cool
10:32:42 <shapr> the color bleeds a bit when the sugar gets warm.. I guess I shouldn't be surprised by that.
10:33:20 <Marvin--> no you shouldn't :)
10:33:38 <Marvin--> Riastradh: hear, hear
10:34:31 <shapr> b-fast: are you d-bugd?
10:34:44 <Marvin--> Has Simon Marlow learned how to configure outlook, or does he have a new version or something? Looks like threading isn't as broken on the haskell mailing lists any more
10:35:17 <shapr> hey the new Template Haskell logo is great!
10:36:14 <shapr> very amusing --> http://www.haskell.org/th/th.png
10:43:43 <|Fo|Ns> hi
10:43:43 <|Fo|Ns> can anyone have a look at:
10:43:43 <|Fo|Ns> http://www.fons.arrakis.es/Tuplas6.hs
10:43:43 <|Fo|Ns> and tell me why I get:
10:43:43 <|Fo|Ns> Tuplas6> (1,2,3,4,5,6)
10:43:43 <|Fo|Ns>  
10:43:43 <|Fo|Ns> ERROR - Control stack overflow
10:43:43 <Igloo> Sounds like a bug
10:43:57 <Igloo> Possibly related to the fact that 6-tuples can't be shown by hugs anyway
10:44:16 <|Fo|Ns> uhm, are you sure about that?
10:44:27 <Igloo> About what?
10:44:40 <|Fo|Ns> that hugs cant show tuples of 6 elements
10:44:58 <Igloo> Not unless you write a Show instance
10:45:07 <Riastradh> Prelude> (1,2,3,4,5,6)
10:45:07 <Riastradh> ERROR - Cannot find "show" function for:
10:45:07 <Riastradh> *** Expression : (1,2,3,4,5,6)
10:45:07 <Riastradh> *** Of type    : (Integer,Integer,Integer,Integer,Integer,Integer)
10:45:10 <Igloo> Oh, I see, that's what your code does
10:45:16 <|Fo|Ns> :)
10:45:39 <hdaume> the showsPrec needs to be indented
10:45:43 <|Fo|Ns> my code must be wrong but I dont know where ...
10:45:53 <hdaume> instance (Show tv1, Show tv2, Show tv3, Show tv4, Show tv5 , Show tv6) =>
10:45:53 <hdaume>   Show (tv1,tv2,tv3,tv4,tv5,tv6) where
10:45:53 <hdaume>     showsPrec p (v1,v2,v3,v4,v5,v6) = 
10:45:54 <hdaume> ...
10:45:57 <hdaume> works for me
10:46:05 <|Fo|Ns> ok
10:46:13 <|Fo|Ns> stupid ...
10:46:23 <|Fo|Ns> Im not used to derive manually ...
10:46:29 <hdaume> i'm not sure exactly why this is looping though
10:46:30 <hdaume> weird
10:46:31 <|Fo|Ns> deriving is my friend 
10:47:09 <|Fo|Ns> shouldnt it tell me it cant instance the type class ...
10:47:11 <|Fo|Ns> ?
10:47:28 <|Fo|Ns> cuase I didnt define the proper functions?
10:47:46 <hdaume> it should warn you
10:47:54 <Riastradh> Has anyone ordered a 'WHAT PART OF _ DON'T YOU UNDERSTAND?' t-shirt yet?
10:48:01 <|Fo|Ns> hugs bug?
10:48:25 <hdaume> i don't think it's a *bug*
10:48:29 <hdaume> maybe a feature request :)
10:49:11 <Igloo> hdaume: It'll have a default method cycle I suspect
10:50:07 <hdaume> yeah, presumably
10:50:13 <hdaume> but ghc has an option to warn about that, i believe
10:50:23 <hdaume> not about the cycle, but about missing declarations
10:52:48 <Igloo> It can warn about the shadowing too
10:53:49 <|Fo|Ns> the standard says you can instance a type class without providing the proper functions?
10:54:35 <Darius> Yes
10:54:45 <Darius> Even without defaults
10:54:58 <Darius> instance Num Foo is a legal (useless) instance.
10:54:59 <|Fo|Ns> ok, then its just a feature request
10:57:25 <|Fo|Ns> but I dont understand why the standard accepts that ...
10:57:37 <Igloo> Because you can have default implementations of methods
10:58:37 <|Fo|Ns> uhm, and why does the program break wothout the indentation?
10:59:27 <Igloo> Because then showsPrec defines a top-level function, not the showsPrec for the instance
11:00:22 <|Fo|Ns> yes, but I dont understand why that should cause an infinite loop ...
11:01:47 <Igloo> Grrr, why is BiBTeX putting random %s in my reference?
11:02:28 <Igloo> Look at the default methods in http://www.haskell.org/onlinereport/standard-prelude.html#$tShow
11:05:35 <hdaume> Igloo: why don't you get a complaint about multiply defined functions?
11:07:21 <Igloo> hdaume: Because it's just shadowing it
11:14:13 <Marvin--> hrrm, x-chat died on me
11:14:18 <shapr> suckage
11:14:25 <Riastradh> Is -anyone- here brave enough to buy a copy of the t-shirt whose text may be too small?
11:14:25 <shapr> did you see the new template haskell logo?
11:14:43 <shapr> Riastradh: you're in the US, yes?
11:15:14 <shapr> oh, but you're not coming to ICFP :-/
11:15:25 <Riastradh> Unless something drastic occurs soon.
11:15:55 <shapr> any US residents here coming to ICFP?
11:15:58 <Marvin--> heh, "a copy"
11:16:26 <shapr> yah, the new TH logo rocks
11:16:29 <shapr> @fact th
11:16:29 <lambdabot> Nothing
11:16:39 <Riastradh> @fact template
11:16:40 <lambdabot> Nothing
11:16:43 <Riastradh> @fact template-haskell
11:16:44 <lambdabot> Nothing
11:16:45 <shapr> @fact th http://www.haskell.org/th/
11:16:45 <lambdabot> set th to http://www.haskell.org/th/
11:25:26 * shapr boings
11:27:43 * Igloo bounces at my first citation
11:27:53 <shapr> yay, who cited you?
11:27:57 * Riastradh explorbs and implorbs simultaneously.
11:28:17 * shapr simply plorbs
11:28:17 <Marvin--> Igloo: congratulations :)
11:28:24 <Riastradh> Splorbs, you must mean.
11:29:27 <Igloo> Andr\/e Pang
11:29:56 <Marvin--> ah, o3 :)
11:35:52 <shapr> anyone here played with HaskellDB?
11:36:59 <shapr> seth_: have you used HaskellDB?
11:38:49 <stepcut> shapr: sorta
11:38:54 <stepcut> I read the doc
11:39:48 <seth_> shapr: no, I haven't gotten it up and running yet.  I will be shortly.
11:39:56 <shapr> seth_: on linux?
11:40:14 <seth_> I'll be testing on linux and hopefully on OSX and windows.
11:40:43 <shapr> with GHC?
11:40:59 <seth_> shapr: yes.  I just built the V6 release.
11:41:20 <shapr> HaskellDB normally requires Hugs and win32
11:41:30 <seth_> shapr: can't be used with ghc?
11:41:38 <shapr> http://www.haskell.org/pipermail/libraries/2003-February/000770.html
11:41:46 <shapr> not at the moment.
11:41:47 <stepcut> seth_: it needs extensible records, which ghc does not have :(
11:42:10 <seth_> I guess I'll have to use the interface I've been building.
11:42:31 <shapr> I'm checking to see if anyone has already tried the nested tuples or fundeps approach.
11:42:40 <stepcut> seth: you have been working on a mysql interface for ghc ?
11:43:02 <seth_> stepcut: no, an interface to my database engine.  It is partially working.
11:43:46 <seth_> stepcut:  should be adaptable to any moderately conformant sql engine.  unfortunately mysql is not even  moderately conformant.
11:44:38 <shapr> GHC can talk to PostgreSQL and MySQL via HToolkit 
11:44:44 <shapr> that's how lambdabot's @fact works
11:45:03 <seth_> shapr: then I should enhance that to use my engine also.
11:45:28 <shapr> I want to use HaskellDB on top of HToolkit
11:45:52 <shapr> but before I start coding, I want to see if anyone else is already doing that.
11:46:06 <seth_> shapr: I'll have to look at haskelldb more closely.  I don't usually bother with things that only run in windows.
11:46:34 <stepcut> shapr: I am working on 'porting' haskellDB to ghc, but so far I only have like 20 lines of code :)
11:47:17 <shapr> stepcut: how are you doing it?
11:47:46 <stepcut> shapr: well, first I am learning the haskell FFI, and next I am going to worry about the lack of TREX for ghc
11:48:21 <shapr> I think you can skip the first step if you use HToolkit
11:49:02 <stepcut> well, I wanted to learn the FFI anyway
11:49:12 <stepcut> but I am definately going to look at HToolkit
11:49:31 <shapr> ok
12:07:59 <shapr> I don't see how extensible records could be nested tuples instead
12:08:21 <shapr> oh, maybe I do
12:08:36 <Riastradh> Extensible records?
12:08:52 * Marvin-- reads Twisted.Quotes and grins
12:09:22 <shapr> Riastradh: http://www.cs.uu.nl/people/daan/papers/dsec.html and http://www.haskell.org/pipermail/libraries/2003-February/000770.html
12:10:03 <shapr> Daan wrote HaskellDB. He said he used nested tuples instead of TREX during the development of HaskellDB.
12:11:19 <shapr> I would guess he used ("tablename", ("fieldname",value),("fieldname2",value2))
12:11:30 <shapr> would that make sense?
12:12:00 <Riastradh> That makes perfect sense.
12:12:10 <Riastradh> It's how you do records in Erlang, too.
12:12:43 <shapr> now, can I hack that back into HaskellDB so it'll work on GHC/Linux/HToolkit?
12:12:44 <Marvin--> well, except that you can use atoms instead of strings
12:13:05 <Riastradh> Well, yes.
12:13:08 <shapr> eh?
12:13:23 * Riastradh was responding to Marvin.
12:13:34 <shapr> atoms?
12:13:41 <Riastradh> Like symbols in Lisp.
12:13:44 <shapr> oh
12:14:25 <shapr> However, during the  implementation of haskellDB, I also used a technique where records are nested tuples. Labels can than be modelled as overloaded functions in multiple parameter type classes. Unfortunately, this lead to a lot of  'unresolved overloading' messages. 
12:14:45 <shapr> Can someone explain the part about Labels?
12:15:28 <Marvin--> well I'm not following :)
12:17:31 <shapr> I don't know what he means by labels.
12:17:31 * Marvin-- still thinks that the War3:FT position on tradition.se's top list is silly
12:19:04 <Marvin--> shapr: with just preorders, War3:FT is the number two most sold item on Tradition during the last month
12:19:14 <Marvin--> insanity, I say, insanity!
12:19:25 <shapr> yah, bizarre
12:19:38 <shapr> though I admit, I want a copy the instant it's released :-)
12:20:07 <Marvin--> *cough* me too :)
12:21:59 <Darius> Perhaps, class Rec1 r x y z | r -> x,y,z where fldx :: r -> x;fldy :: r -> y, etc. instance Rec1 (x,y,z) x y z where fldx (x,_,_) = x; instance Rec1 (x,y,z,w) x y z where fldx (x,_,_,_) = x
12:22:55 <Darius> hold on.
12:22:58 * shapr stares suspiciously
12:23:09 * shapr google for an MPTC tutorial
12:24:39 <Darius> instance (x,(y,(z,w)))) x y z where fldx = fst; fldy = fst . snd;fldz = fst . snd . snd
12:26:16 <Darius> then type Rec2 = (x,(y,(z,(a,(b,c))))) should be an instance automagically... assuming that's legal Haskell.
12:27:15 <Marvin--> no, you'd need type Rec2 x y z a b c = (...)
12:28:18 <Marvin--> Darius: but how would you access the a, b or c if you only know that it's a Rec1 a => a?
12:29:21 <Darius> Each record type has a class.
12:29:21 <shapr> ok, where do I read about MPTC?
12:29:45 <Darius> Rec1 a => a would say all you want are the Rec1 parts
12:29:51 <Darius> So you could still pass a Rec2 and be fine
12:31:22 <Darius> I'd have to reread some TREX documentation and play with it more to figure it out.
12:34:22 <shapr> well, I'd be grateful :-)
12:35:15 <shapr> I want to a) get HaskellDB working with Linux/GHC and b) bug Daan to put an LGPL or BSD licens on HaskellDB, after which I can c) propose HaskellDB as the standard database API for Haskell.
12:35:38 <Marvin--> why would b be hard?
12:36:17 <shapr> because I've heard no response from the last email I sent some months ago
12:36:21 <Marvin--> oh :/
12:36:39 <Marvin--> what kind of license does it have now?
12:36:48 <shapr> I can't find any.
12:37:00 <shapr> just a copyright notice
12:39:17 * d-bug just put a computer in the closet
12:39:18 <SyntaxPolice> shapr: we have to get people to put licenses on things!  maybe  wiki page for information about licensing libraries is in order
12:39:41 <shapr> would be useful
12:39:56 <d-bug> the lisp folks have a lisp library gpl, i wonder why
12:40:01 <d-bug> llgpl
12:40:50 <d-bug> fsf's rethoric regarding derivation is odd IMHO
12:40:57 <shapr> I prefer lgpl for libraries, that way I can write closed-source binaries for my clients who want it.
12:41:02 <d-bug> and linking
12:42:13 <Marvin--> I haven't understood it either, but IANAL
12:42:32 <d-bug> shapr: lgpl is preferred over gpl, imho of course
12:44:25 <shapr> I like the way Igloo said "lGPL for libraries, GPL for apps"
12:45:57 * SyntaxPolice seconds shapr's commnet
12:47:32 <Marvin--> shapr: that's what I say too
12:50:36 <shapr> oh, the "class Quux foo bar | foo -> bar" is MPTC with fundeps, yah?
12:50:47 <Marvin--> yes
12:55:38 <shapr> What's the first fundeps paper?
12:55:59 <Darius> There's a link/reference to it in the GHC User Guide.
12:56:34 <shapr> ok, thanks
12:59:30 <shapr> this is nifty stuff
13:06:39 * wli hrms
13:06:51 * wli looks for ghc6 debs some more
13:08:51 <shapr> unless you have some contact with michaelw, I think you'll have to make your own.
13:11:32 <shapr> I suspect quantum field theory is simple and obvious compared to some of Mark P. Jones ideas.
13:21:04 <SyntaxPolice> wli: maybe we can raise a collection for ghc6 debs :) 
13:21:15 <SyntaxPolice> or maybe I should open a paypal account and let youall raise a collection :)
13:44:01 * Igloo might make some at some point if MiW doesn't plan to
13:44:34 <Igloo> He hasn't replied about them at all, right?
13:47:56 <Marvin--> Michael? Not to me... he doesn't seem all that active in general
14:07:48 <Marvin--> man, I'm tired
14:07:55 <Riastradh> Sleep, foo.
14:08:17 <Marvin--> but...I want to watch Futurama
14:37:05 <peti> Good evening everybody!
14:37:30 <Riastradh> Hi.
14:39:27 <kosmikus> peti: I'm already here :)
14:39:43 <peti> kosmikus: Didn't realize that, sorry. :-)
14:43:21 <kosmikus> peti: I've just sent you a mail containing the ebuild.
14:44:07 <peti> kosmikus: Thanks. I'll give it a try ASAP. With any look, my machine will be up and running by tommorrow.
14:44:12 <kosmikus> Actually, I still have to catch up with all the library infrastructure mails. Will do that now ...
14:50:50 <shapr> w00, peti 
14:51:38 <shapr> hi grem 
14:51:41 <peti> shapr: Hi! :-)
14:51:46 <shapr> hiiiii peti!!
14:51:49 <grem> Hello shapr
14:51:58 <Riastradh> @yow !
14:51:58 <lambdabot> Yow!  Are we wet yet?
14:52:04 <Riastradh> Aww, come on!
14:52:08 <Riastradh> @yow , give me a better one!
14:52:08 <grem> shapr: have you dealt with sockets at all?
14:52:08 <lambdabot> ..  My pants just went on a wild rampage through
14:52:08 <lambdabot>  a Long Island Bowling Alley!!
14:52:11 <peti> shapr: Sorry I didn't answer any e-mail yet; I'm re-installing my machine and didn't really have the nerve to do anything else until it's working again.
14:52:12 <Riastradh> Much better.
14:52:14 <shapr> grem: yes, a bit
14:52:19 <shapr> peti: no worries
14:52:57 <grem> shapr: when calling a recv from a socket what is the length to read in.... bytes?
14:54:35 <shapr> umm
14:54:54 <shapr> grem: Are you talking about sockets in Haskell?
14:55:27 <grem> shapr: yes, when calling a recv on a socket it takes an argument of a number, is that the number of bytes to recieve?
14:57:05 <shapr> that would seem sensible, but I don't know.
14:57:55 <grem> k
14:58:39 <grem> where would i look it up for sure?
14:59:22 <shapr> easiest is to write a test program.
14:59:42 <shapr> something like "recvFrom mySocket 4"
14:59:56 <shapr> and send that an eight character string.
15:00:04 <shapr> I think you'll only get back the first four characters.
15:00:46 <shapr> I've always used code like this: http://kungens.kemi.fi/~shae/src/haskell/Echo2.hs
15:00:50 <grem> i will just have to test it later then.  How come the docs don't say?
15:02:27 <shapr> No one has written them?
15:02:33 <shapr> or maybe it mimics a very similar C function?
15:05:33 <shapr> grem: are you learning Haskell?
15:06:59 * shapr bounces happily
15:10:16 <shapr> hi tootalltimmy 
15:11:03 <kosmikus> actually, after reading everything that has been written about the library infrastructure stuff again, it finally seems to make sense to me :) Good work, SyntaxPolice. The Wiki page already seems really useful in at least identifying the problems and different viewpoints that everyone has.
15:11:34 <shapr> yay
15:11:46 <tootalltimmy> shpr: hi!
15:11:56 <shapr> tootalltimmy: are you learning Haskell?
15:12:41 <tootalltimmy> Looking into Haskell and Ocaml after reading: http://www.lib.uchicago.edu/keith/crisis/
15:13:15 <shapr> oh, that looks cool!
15:14:02 <tootalltimmy> Haskell and Ocaml got the author's highest ratings.
15:14:42 <shapr> I'm totally addicted to Haskell, so I can understand that.
15:15:04 <tootalltimmy> I hate to ask, but can you actually get a job using Haskell?
15:15:25 <shapr> There are several people on this channel who get paid to write Haskell.
15:15:41 <tootalltimmy> That's reassuring.  Cool!
15:15:49 <shapr> I got paid to write Haskell two weeks ago :-)
15:16:26 <tootalltimmy> Is your productivity higher in Haskell?
15:16:33 <shapr> Yes, definitely.
15:16:49 <shapr> I was writing some Python today, but it irritates me, I could do it faster/better in Haskell.
15:16:52 <peti> tootalltimmy: Not only that, the code is much more stable than it used to be when I wrote C++ as well.
15:17:07 <tootalltimmy> I'll have to check it out.  I downloaded GHC and Hugs.
15:17:35 <Riastradh> Hey, that guy marked Haskell down for lack of continuations -- which you can -implement- in Haskell
15:17:39 <Riastradh> .
15:17:49 <shapr> Riastradh: argue with him
15:17:55 <Riastradh> Where is he?
15:18:40 <shapr> Chicago
15:18:42 <tootalltimmy> Riastradh: http://www.lib.uchicago.edu/keith/mail.html (don't know if it's still a valid email account)
15:19:20 <tootalltimmy> shapr,peti,Riastradh: Thanks for your input.  You might have made a convert out of me yet!
15:19:33 <shapr> @fact learning
15:19:34 <lambdabot> http://www.haskell.org/learning.html
15:19:50 <shapr> tootalltimmy: I'd suggest you check that url, and ask questions here on #haskell
15:20:04 <kosmikus> peti: nice automated mail system you have ;)
15:20:27 <tootalltimmy> shapr,lambdabot : just bookmarked it.  Thanks!
15:20:51 <peti> kosmikus: Are you referring to the spam filter? :-{
15:20:55 <shapr> tootalltimmy: lambdabot isn't much of a conversationalist, he's an irc 'bot written in Haskell.
15:20:57 <shapr> @fact source
15:20:58 <lambdabot> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
15:21:05 <peti> I meant a ':-)', though.
15:21:20 <tootalltimmy> shapr : So am I.  ;)
15:21:33 <shapr> you're an irc 'bot?
15:21:37 <shapr> written in Haskell?
15:21:56 <tootalltimmy> no, it's after 4PM  so I get a bit goofy.
15:22:12 <shapr> you'll fit right in here :-)
15:22:22 <tootalltimmy> :)
15:22:25 <shapr> I'm goofy after 4PM also. and before 4PM!
15:23:36 <kosmikus> peti: yes
15:25:22 <shapr> peti: you think darcs is good enough to use for haskell-libs ?
15:25:31 <Riastradh> Hey, that guy claims there's no lambda in Perl -- while it's not -called- lambda, there definitely is an anonymous subroutine construct!
15:25:50 <kosmikus> peti: also didnt't realize that you're German ...
15:25:51 <wli> actually there isn't
15:26:00 <wli> there are anonymous code blocks
15:26:10 <wli> argument handling is *ahem* sketchy
15:26:34 <Riastradh> But you can definitely create anonymous subroutines just like with lambda.
15:26:46 <Riastradh> Argument handling is sketchy -everywhere- in Perl, anyways.
15:26:50 <wli> no, not "just like with lambda"
15:27:07 <Riastradh> The only difference is that it doesn't work as a binding construct.
15:27:10 <wli> "vaguely like lambda, but screwed up"
15:27:15 <wli> right
15:27:20 <wli> which is massively screwed up
15:27:37 <Riastradh> It's better than not having anonymous functions at all.
15:28:07 <Riastradh> And it shouldn't be considered 'lack of lambda' -- it should at the very worst be considered 'lambda with some sketchiness.'
15:29:11 <shapr> heh, Forth gets something like 300 points
15:29:31 <peti> kosmikus: Yup, I am. It's probably hard to guess from the 'to' domain. :-)
15:29:55 <peti> shapr: I think darcs is not yet ready for a project like this. It lacks some essential features, such as _any_ support for binary files.
15:30:01 <kosmikus> peti: where do you live?
15:30:13 <peti> shapr: Also, the repository format itself is still subject of change ...
15:30:34 <peti> kosmikus: I live in Berlin. What about you? You're in the Netherlands I suppose? 
15:30:55 <wli> not really. It's not usable for generating fresh data structures, only altering preexisting ones in place.
15:31:24 <shapr> Riastradh: notice that this Chicago guy used the hbc Haskell compiler.
15:31:34 <wli> which is massively screwed up
15:31:56 <kosmikus> peti: yes, most of the time, I am in Utrecht. I'm not that often in Berlin, though ...
15:32:24 * peti always wanted to live in Amsterdam, actually.
15:32:33 <peti> I've been there a few times and I _loved_ the city.
15:32:42 <peti> Berlin is quite nice, too, though. :-)
15:33:45 <kosmikus> I like Berlin better than Amsterdam, but both cities are a bit too big for me.
15:34:37 <shapr> I miss having instant access to unusual music CDs
15:35:09 <shapr> Riastradh: I think we should send this guy an update on the State of Haskell
15:35:11 <peti> kosmikus: The nice thing in Berlin is that you don't really notice it's so big, because all the different parts of the town are somewhat independent. If you're in, say, Neukoelln, there hardly ever is a reason to leave the district. But I agree, it's huge.
15:35:46 <peti> kosmikus: I liked Amsterdam for the Graachten mostly (is that spelled right?). I like water very much. Grew up next to the Rhein ... ;-)
15:37:30 <kosmikus> NL: grachten, so you just have to de-captialize the `g', no double a. Yes, they're amazing in Amsterdam, although water is a constant throughout the Netherlands. In Utrecht you have beautiful canals, too.
15:38:59 <peti> kosmikus: I guess there are more beautiful places like that, I just don't know them. :-| A friend already told me that other cities had all the benefits of Amsterdam without the crime ... 
15:39:35 <peti> kosmikus: Unfortunately, I'm sort of stuck in Germany for the moment. Always wanted to live abroad some time. But cannot afford it at the moment.
15:39:47 <shapr> living abroad is spiffy
15:40:22 <peti> shapr: Sure, and it also does wonders for your language skills. :-)
15:40:23 <kosmikus> You should. I'm not even sure I want to return to Germany ;)
15:40:40 <peti> kosmikus: You're german, too? 
15:40:44 <kosmikus> yes :)
15:41:08 <Riastradh> wli - http://www.bloodandcoffee.net/campbell/code/point.pl
15:41:13 <peti> kosmikus: I guess  I can reply to your e-mail in German then. *grin*
15:41:52 <kosmikus> peti: no problem.
15:42:39 <peti> kosmikus: If I every make it to another country, I just hope the weather is good. :-) Spain seems nice a nice option -- also, because I don't know any Spanish at all, and I think Spanish would be more useful than Dutch ...
15:43:17 <peti> Besides, I have been told that it's impossible to learn Dutch anyway, because all dutch people speak English / German anyway, so they'll just speak to you in your native language all the time. :-)
15:44:07 <kosmikus> The weather is definitely better in Spain. However, I am continuously surprised how many people in CS are Dutch. In all the time before, I had never noticed that.
15:44:49 <peti> Utrecht seems to be quite active in Haskell, too. There're lots of interesting libraries written by dutch people, I noticed.
15:45:03 <shapr> yah!
15:45:15 <peti> kosmikus: What brought you there, then? The job? 
15:45:19 <kosmikus> peti: Most Dutch can speak or at least understand German, but they don't like to speak it. So its more likely that they'll try to speak English with you. Anyway, I have managed to learn it. Isn't too hard.
15:46:05 <kosmikus> peti: yes, the job. I noticed the same thing you just did, and so I came here ;)
15:47:33 <peti> kosmikus: I guess I'll look out for post-doc positions in Utrecht then, once I get my degree! In uh, ... about 4 years. ;-)
15:47:37 <kosmikus> shapr: I wanna go on vacation in Sweden for two weeks or so before ICFP. What should I do?
15:47:52 <Darius> "How could you improve on Lisp? Scheme is how"
15:48:19 <shapr> kosmikus: well, I'd offer to let you hang out here, but this part of Sweden is very far from ICFP, and probably not as interesting as the south.
15:48:33 <kosmikus> peti: are you at on of the universities in Berlin?
15:49:04 <shapr> kosmikus: also, I've only lived here for seven months, so you may want to ask one of the Swedish citizens.
15:49:28 <peti> kosmikus: I study at the Feruni Hagen. Just started this semester. I worked the last few years and got fed up in the industry, so I decided to finally pursue my diploma.
15:49:48 <kosmikus> shapr: thanks for the offer, but, yes, I'd probably like to stay in the south this time ...
15:49:57 <peti> kosmikus: Theoretically, I could study pretty much anywhere I wanted, but the advantage in Berlin is that the life is so cheap.
15:50:31 <kosmikus> so you study fulltime in Hagen?
15:51:08 <kosmikus> I always wanted to get a second degree part-time, but I guess I am doing too many other things right now.
15:51:18 <peti> kosmikus: Yes. I'm 29 already, so I can't afford to take too long to finish. :-)
15:51:26 <shapr> I want a degree too!
15:51:43 <shapr> Happily, school is free in Sweden.
15:52:00 <Riastradh> Are there any schools like MIT in Sweden?
15:52:05 <peti> shapr: Microsoft is offering lots of highly-regarded degrees which you could obtain. *grin*
15:52:10 <shapr> heh, eww
15:52:15 <shapr> I almost had one of those once.
15:52:24 <kosmikus> School is still free in Germany as well. Let's hope it stays that way for a few more years ...
15:52:57 <shapr> Riastradh: there's KTH, which is something like "king's technical college"
15:53:19 <peti> shapr: That's the guys giving out the Nobel prizes, right?
15:53:27 <shapr> I've also heard that Chalmers and Göteborg are excellent schools.
15:53:39 <shapr> I don't know.
15:54:12 * peti seems to recall that the "King's College" was involved in that. But I could be wrong.
15:54:37 * shapr looks at nobel.se
15:55:40 <peti> Well, thanks to the detailed description of Richard Feynman, we know at least that the swedish king is pretty cool. :-)
15:56:33 <shapr> I haven't read any of Feynman's books.
15:56:52 <shapr> I did find out that he did personal unit tests also.
15:57:01 <peti> shapr: You should. "Surely you're joking Mr. Feynman" is hilarious. It's really worth the read.
15:57:21 <shapr> I'll put it on my list.
15:57:30 <peti> shapr: There is another one, with a similar title, which is as good, but I don't know the name anymore.
15:57:47 <peti> shapr: Something like "What do you care what other people think".
15:57:53 <shapr> I like that idea.
15:58:37 <peti> shapr: The books are really funny. They're sort of biographies -- not technical.
15:59:52 <shapr> http://c2.com/cgi-bin/wiki?PersonalLoopbackTests
16:01:14 <shapr> Feynman is popular on TheWiki
16:01:37 <shapr> peti: are you coming to ICFP?
16:01:44 <peti> shapr: Feynman tried to observe whether he could do things simultaneously, like counting and moving his arms, etc. It's described in the books. I don't recall what exactly he was doing, though, but it sounded like a wast of time to me. :-) 
16:01:59 <shapr> I think that's fascinating stuff.
16:02:18 <peti> shapr: I most probably cannot afford to go. :-|
16:02:29 <shapr> that sucks :-/
16:02:48 <shapr> Well, you'll be gaining education, that's good.
16:02:53 <peti> Yup, it does. But it's still better than having a job. *grin*
16:03:15 <shapr> heh, you might like being self-employed.
16:03:52 <shapr> I have the option of working or sitting around learning stuff. Of course, only one of those pays the bills.
16:04:09 <peti> shapr: I worked as a free-lance software developer a two years ago and I liked it very much! But these days, it's hard to earn money that way; everybody is very stingy now.
16:04:56 <peti> shapr: I suppose the market is still more lively in Sweden then? 
16:04:59 <kosmikus> how does darcs compare to subversion?
16:05:10 <shapr> I don't know, I get paid by .de and .gr :-)
16:05:24 <shapr> I'm slowly breaking into the local market here.
16:05:40 <peti> kosmikus: I don't know subversion, sorry. I know darcs pretty well, though, and like it very much.
16:06:06 <shapr> I like the theory of patches.
16:06:20 <peti> shapr: When the "new economy" collapsed in Germany, the market for free-lance work was pretty much done with, at least in Munich, where I lived at the time.
16:07:00 <Igloo> The impression I have is that subversion will be better than CVS and here sooner, but darcs or arch have the better fundamental design
16:07:27 <shapr> I'm also convinced that darcs could be integrated with a refactoring browser so you could track code as it was refactored across modules, classes, etc
16:07:32 <kosmikus> shapr: looks nice
16:08:17 <kosmikus> Igloo: thanks, that matches my first impression from the darcs web page
16:08:27 <peti> Another good thing is than Davin Roundy (the author of Darcs) is _very_ supportive of Darcs.
16:08:37 <shapr> yes, he is very supportive.
16:09:00 <peti> I wish it would support binary files soon, then I could start using it for real projects.
16:09:55 <kosmikus> peti: there's no Gentoo ebuild?
16:10:18 <shapr> peti: do you think darcs would be ready faster if it were used for haskell-libs anyway? :-)
16:10:34 <peti> I'll make one ASAP. I have been busy working on the build system the last few weeks, and I didn't want to make an ebuild until that was set in stone.
16:12:00 <kosmikus> peti: okay. I'll wait until then ...
16:14:18 <peti> kosmikus: By the way, the impression seems to be mounting that nhc98 might not be that important after all. So far, virtually anything I saw needed ghc. Maybe one could just ignore nhc98 altogether for the purpose of building Gentoo packages? Has anyone ever used the nhc98 USE flag?
16:15:32 * peti is hooked on meta-programming in Haskell already, so there's little chance I'll be using nhc98 myself either.
16:15:43 <kosmikus> I'm not sure if anyone has used it. I don't get automatic statistics about each ebuild, unfortunately ;) However, some things _can_ be compiled with nhc98, and if the package supports it, I see no reason to disallow it.
16:16:07 <shapr> hey have you guys seen the new Template Haskell logo?
16:16:16 <kosmikus> no, where
16:16:18 <peti> kosmikus: Yes, for binaries that's no problem. But there's still no real solution for libraries, or is there?
16:16:20 <shapr> @fact th
16:16:20 <lambdabot> http://www.haskell.org/th/
16:16:54 <peti> Nice. ;-)
16:17:11 <kosmikus> unfortunately, the problem becomes only marginally simpler by restricting oneself to ghc as the only compiler
16:17:29 <kosmikus> I hope that the infrastructure discussion will lead to a solution that I can use :)
16:17:43 <kosmikus> yes, very nice
16:17:44 <peti> kosmikus: OK. I probably don't understand enough of the Portage-internals to say anything about this anyway. ;-)
16:17:55 <Igloo> If it doesn't then it has failed
16:18:15 <shapr> the TH logo entertains me greatly.
16:18:19 <kosmikus> Igloo: yes, I would say so ;)
16:19:07 <Igloo> shapr  :-)
16:19:08 <kosmikus> peti: one thing that would help independently and that certainly will be added to portage in the future (but who knows when ...) are reverse dependencies.
16:20:03 <peti> kosmikus: I just hope that the whole Portage thing doesn't spin out of control in terms of complexity. It looks pretty darn complex to me already ...
16:20:10 <kosmikus> then one could automatically reinstall all library packages upon upgrade of a compiler
16:20:45 <kosmikus> peti: yes, they should write it in a statically typed language; but I'm not saying which :)
16:21:00 <peti> kosmikus: Coincidently, I agree. :-)
16:21:43 * peti does in fact think a monadic combinator library should replace "make" for the Haskell community. 
16:22:08 <Riastradh> What do monads have to do with it?
16:22:14 <peti> The problem is just designing one. My first attempts really led nowhere.
16:22:17 <kosmikus> I think that portage, although a very cool program, is not sufficiently documented and not very transparently developed. This is unfortunate, but it can also be that my impression is wrong.
16:22:54 <peti> Riastradh: I'd guess the IO monad would have some role to play in such a system.
16:23:02 <kosmikus> a PhD student here in Utrecht is developing "maak", a replacement for make using a functional language.
16:23:24 <peti> Riastradh: Also, the whole building the dependency tree is IMHO yelling for a state or reader monad.
16:23:55 <kosmikus> He also says there have been attempts of designing make-like combinator libraries in Haskell already, but I couldn't find a paper on the internet.
16:23:59 <peti> kosmikus: Do you have an e-mail address where I could reach him? I have been playing with this myself, too, and would like to exchange some ideas, because I'm kind of stuck.
16:24:12 * Igloo put writing a make-a-like back on his TODO list a few days ago
16:24:39 <Igloo> I got slightly closer to realising what I want when trying to rewrite something using make
16:25:21 <Igloo> Rules need to be able to return a list of dependencies (which aren't used in making the decision of which rule to use for a given target but add dependencies to it once it is chosen)
16:25:21 <kosmikus> http://www.cs.uu.nl/~eelco/maak/
16:25:35 <Igloo> Now I just need to make the syntax right and implement it  :-)
16:26:25 <peti> kosmikus: Thanks!
16:27:35 * shapr yawns
16:27:48 * shapr is tired of daylight.
16:28:32 <kosmikus> ?
16:28:36 <shapr> !
16:28:46 <kosmikus> is it already so much summer in Sweden that there's still daylight?
16:28:59 <shapr> yes, for weeks
16:29:05 <kosmikus> cool.
16:29:11 <kosmikus> how far north are you
16:29:13 <shapr> unless you like sleeping ;-)
16:29:24 <Igloo> Eeek, remind me not to move to Sweden
16:29:27 <shapr> Boden 65.50N, 21.44E
16:29:36 * kosmikus gets a map
16:29:36 * Riastradh thinks he would like to move to Sweden in the winter, but not in the summer.
16:30:15 <shapr> 110km south of the arctic circle.
16:30:26 <shapr> http://broschyr.interact.se/html/uk/boden/map/
16:30:27 <Igloo> Any idea how far South I am?
16:30:45 <Riastradh> How cold is it in the winter in Sweden?
16:30:48 <kosmikus> found it
16:30:51 <Riastradh> Er, summer.
16:30:53 <wli> that could be cold
16:31:04 * shapr googles
16:31:14 <kosmikus> but if it's south of the polar circle, doesn't that mean that it still gets dark for a short period of time?
16:31:36 <shapr> Riastradh: winters get down to -45° C, summers get up to body temperature for a week or so.
16:32:15 <Riastradh> Just about a week?
16:32:33 <shapr> not exactly dark, more like early evening twilight
16:32:46 <shapr> you can't see the sun, but it's just barely below the horizon
16:33:00 * Riastradh might like to be in Sweden during the summer, too, then.
16:33:09 <kosmikus> Igloo: maybe something like Stratego would be a good language to replace make: have a declarative description of the dependency tree, plus a strategy how to optimize/reduce the tree, i.e. build the software
16:33:40 <wli> well, you have to go above the arctic circle for the sun not to come out at all
16:34:22 <shapr> kosmikus: that would be nifty
16:43:22 <shapr> well, so far google has told me that the longitude/latitude system was mostly developed in London and Oxford, but that wasn't what I was looking for...
16:46:41 <kosmikus> good night everyone ...
16:46:48 <shapr> good night kosmikus 
16:51:04 <shapr> finally, some sort of info... LONDON-HEATHROW, Longitude 0.45 E, Latitude 51.48
16:51:49 <shapr> Igloo: Heathrow is 19° south of me
17:28:10 <steveh> Hello...
17:28:25 <steveh> ping
17:29:12 <Smerdyakov> Hi steveh!!
17:30:04 <steveh> Zdravstvuite!
17:30:27 <steveh> Kak dela?
17:30:29 <Smerdyakov> OK steveh.
17:30:33 <Smerdyakov> I don't speak Russian.
17:30:36 <steveh> :)
17:30:49 <Smerdyakov> Surely you know the literary character Smerdyakov?
17:31:09 <steveh> He spoke Russian...
17:31:38 <steveh> What's new?
17:31:53 <Smerdyakov> Yes, but I think the chance of someone speaking a language based on the nationality of his nickname is reduced if the name is from a novel translated into many languages. :-)
17:32:04 <steveh> Good point.
17:32:30 <Smerdyakov> What's new? Now too much.... the new is on the horizon, since I'm about to move across the country.
17:32:41 <steveh> where to?
17:32:43 <shapr> yay, newness!
17:33:09 <Smerdyakov> Berkeley, CA, to start a PhD in CS.
17:33:32 <steveh> Excellent
17:33:45 <steveh> I am taking stock of my academic & professional life right about now
17:33:51 <shapr> me too!
17:33:54 <shapr> but I bought on margin :-/
17:33:59 <steveh> heheh
17:34:01 <syntax-laptop> Smerdyakov: what novel?
17:34:05 <steveh> those will bite you in the ass :)
17:34:10 * shapr grins
17:34:19 <syntax-laptop> steveh: ya govoryoo po ruskij!
17:34:24 <Smerdyakov> syntax-laptop, The Brothers Karamazov (Fyodor Mikhailovich Dostoyevsky)
17:34:34 <steveh> Ochen horosho!
17:34:54 <syntax-laptop> Smerdyakov: was he that smarmy evil guy?
17:35:01 <steveh> Ya govoryu po-ruskii tozhe
17:35:05 <Smerdyakov> syntax-laptop, he was the illegitimate son.
17:35:15 <shapr> makkarani paistettu saunassa!
17:35:20 <Smerdyakov> syntax-laptop, probably the one you mean :-)
17:35:25 <syntax-laptop> I thought it was Smedragayov, shows how much I know :)
17:35:43 <Smerdyakov> *shrug* Transliterations are funny like that.
17:35:52 <syntax-laptop> (or how carefully I read names. thats always been a weakness for me)
17:36:03 <Smerdyakov> steveh, so what stock are you taking? :-)
17:36:10 <shapr> and how much is it worth?
17:36:10 <syntax-laptop> I liked that book a lot. maybe one of my favorites, though I admit thats the last guy I would have picked for a nick.
17:36:12 <steveh> aah, it's no big deal, sin-taxlapdance
17:36:20 <syntax-laptop> my buddy is zosima on here, and owns zosima.org :)
17:36:55 <steveh> Smerdyakov: I am trying to decide if I should apply to one dozen or two dozen grad schools by this winter :-P
17:36:56 <Smerdyakov> syntax-laptop, but everyone agrees with a guy nick'd "The Stinker" in another language!
17:37:09 <syntax-laptop> hehe
17:37:24 <Smerdyakov> steveh, why so many?
17:37:50 <steveh> Smerdyakov: I call it "the shotgun shell strategy."
17:37:59 <steveh> but of course I am engaging in a bit of hyperbole
17:38:15 <steveh> that many schools with their respective application fees could get quite pricey
17:38:41 * Pseudonym finds this bizarre
17:38:46 <Pseudonym> Universities with application fees.
17:38:51 <Smerdyakov> steveh, I am wishing I just applied to the top 4. I would have with a little foreknowledge of the results. :-)
17:38:57 <shapr> hi Pseudonym!
17:39:01 <Pseudonym> G'day!
17:39:19 * Pseudonym found a use for his new idiom
17:39:25 <steveh> Smerdyakov: naturally! congratulations by the way :)
17:39:26 * Pseudonym woohoos and stuff
17:39:35 <Pseudonym> Should code it up.
17:39:44 <syntax-laptop> steveh: sinTax-lapdance... good nick...
17:40:03 <steveh> my copy of "purely functional data structures" has been shipped
17:40:11 <steveh> so I have reason to celebrate as well :)
17:40:14 <shapr> yay
17:40:20 <steveh> syntax-laptop: best I could come up with under time pressure...
17:40:26 <Pseudonym> Woohoo.
17:40:34 <Pseudonym> steveh: If you implement any of them, let me know.
17:40:38 <Pseudonym> I'll put 'em in Edison.
17:40:50 <steveh> we shall see!
17:40:56 <steveh> i expect it to be quite enlightening
17:41:01 <Pseudonym> Yes.
17:41:14 <Pseudonym> Well, if you want checkin rights on te new version of Edison, let me know.
17:41:15 <syntax-laptop> OT: how do I execute an external program in python?
17:41:19 <Smerdyakov> Hm. Right now I'm reading _Walden_. I bet it beats data structures. :P
17:41:30 <shapr> Smerdyakov: you're just jealous I bet
17:41:37 <Pseudonym> Yeah, I'm still working my way through "The Hero with a Thousand Faces".
17:41:42 <syntax-laptop> Pseudonym: doesn't that book have haskell implemntations of everything?
17:41:48 <shapr> Smerdyakov: we know you want to read about Tries, not Trees
17:41:50 <Pseudonym> syntax-laptop: Dunno.
17:41:55 <Pseudonym> Some of them might be ML.
17:42:02 <Pseudonym> Never read it.
17:42:04 <steveh> syntax-laptop: you mean execute say "ps" or some other type of program?
17:42:10 <Smerdyakov> shapr, nuh uh. I know Chris Okasaki's advisor. :P
17:42:16 <Smerdyakov> (ex-advisor)
17:43:26 <syntax-laptop> steveh: yeah
17:43:47 <syntax-laptop> Pseudonym: yeah, I think the book is in ML, but there is an appendix where everything is implemented in haskell.
17:43:58 <syntax-laptop> if its the same book I have :)
17:44:15 <Pseudonym> OK, cool.
17:44:17 <steveh> os.system(commandline) is what you want
17:44:19 <Pseudonym> Well then.
17:44:25 <steveh> where commandline is a string
17:44:58 <syntax-laptop> steveh: cool, thanks!
17:45:16 <steveh> there are also os.execXX() commands
17:45:23 <steveh> I like Python :)
17:45:43 <steveh> http://www.python.org/doc/current/lib/os-process.html gives the gory details
17:46:13 <syntax-laptop> thanks.
17:46:22 <steveh> anytim
17:46:25 <steveh> +e
17:47:48 * steveh tried to figure out how to do diagonalisation a la Cantor in Haskell today...
17:47:54 <steveh> my brain still hurts a little
17:48:54 <steveh> and it's so cute how "diagonalisation haskell" is more informative than "diagonalization haskell" on google groups :)
17:50:11 <Smerdyakov> steveh, what exactly is it that you are figuring out how to do?
17:50:19 <steveh> well
17:50:58 <steveh> the initial concept was a cartesian product of [0..] and [0..] that would actually cover the whole set given infinite time
17:51:12 <Smerdyakov> Sets and time?
17:51:15 <steveh> as opposed to [(0,0),(0,1),(0,2) .... ] never hitting (1,0)
17:51:16 <Smerdyakov> I don't get it.
17:51:24 <steveh> well
17:51:41 <Smerdyakov> I'm familiar with basic set theory, but I don't understand what you're saying.
17:51:53 <tez> You want a function that will produce NxN, but is gaurateed to eventually produce all values?
17:51:57 <steveh> are you familiar with cantor's diagonalization technique?
17:52:01 <tez> guaranteed
17:52:12 * shapr looks for diagonalization alley
17:52:19 <Smerdyakov> Yup.
17:52:21 * Riastradh smacks shapr.
17:52:32 * shapr snickers
17:52:39 <ChilliX> Moin
17:52:54 <Smerdyakov> You are trying to produce a function whose existence shows the countability of N X N?
17:52:54 <shapr> hi ChilliX!
17:52:56 <Pseudonym> Miranda had diagonalisation comprehensions.
17:52:59 <steveh> Smerdyakov: well I was trying to conceive of an algorithm for finding the cartesian product of (for example) the naturals that would reflect this diagonalization technique
17:53:07 <Pseudonym> You could say [ (x,y) // x <- [0..], y <- [0..] ]
17:53:09 <steveh> Pseudonym: I saw that on a google thread: http://groups.google.com/groups?hl=en&lr=&ie=UTF-8&safe=off&threadm=fa.gntijhv.e2unie%40ifi.uio.no&rnum=3&prev=/groups%3Fq%3Ddiagonalisation%2Bhaskell%26hl%3Den%26lr%3D%26ie%3DUTF-8%26safe%3Doff%26selm%3Dfa.gntijhv.e2unie%2540ifi.uio.no%26rnum%3D3
17:53:10 <Pseudonym> Or the equivalent.
17:53:15 <steveh> sorry for the url spam, hope it works
17:53:21 <Smerdyakov> steveh, I think you are not using the usual meaning of diagonalization.
17:53:25 <Pseudonym> I believe you.  I used to hack Miranda. :-)
17:53:57 <Smerdyakov> steveh, it's a technique for nonconstructive proofs by contradiction; you seem to be discussing a constructive combinator for constructing countable sets for others.
17:53:58 <steveh> Smerdyakov: hmm, how to put this.
17:54:01 <Pseudonym> I think what you want is a basis function diagonalise :: [a] -> [b] -> [(a,b)]
17:54:06 <steveh> Pseudonym: Yes.
17:54:16 <Pseudonym> That seems pretty straightforward.
17:54:50 <Igloo> It's a standard undergraduate question
17:54:59 <steveh> there were several posted on google
17:55:22 <steveh> a few that I am having difficulty understanding how to apply in the case of a cartesian product
17:55:23 <Smerdyakov> steveh, just realize that this is NOT "Cantor's diagonalization method" that you are talking about....
17:55:28 <steveh> Igloo: heh, I wish I were in school :)
17:55:34 <steveh> Smerdyakov: no, it's not, and I know that.
17:55:42 <Igloo> I'm not sure what you mean above, but that with // replaced by | is the standard wrong answer
17:55:57 <Smerdyakov> stepcut, well, you mentioned it and confused me. :P
17:56:00 <steveh> Smerdyakov: but the pattern of traversal is not reflected in a simple cross product of infinite lists in haskell
17:56:30 <Igloo> (sorry, you being Pseudonym)
17:56:33 <Smerdyakov> Yeah, yeah, it's a trivial pattern. Go write it. :P
17:56:46 <steveh> Smerdyakov: that's what I was struggling with :)
17:57:18 <Smerdyakov> steveh, have you seen the usual diagram illustrating the pattern for N X N?
17:57:27 <steveh> yes
17:57:52 <steveh> I just thought this up when considering that haskell lets me have [0..] be meaningful
17:58:02 <steveh> as opposed to every other programming language that I know of
17:58:31 <steveh> but then [(a,b) | a <- [0..], b <- [0..]]  did the "wrong" thing
17:59:12 * Igloo doesn't really know how to give a hint for this without giving it away. You are right that you want 2 generators, but clearly the second one can't be infinite
17:59:57 <steveh> Igloo: oh, it's already been given away, I'm just trying to compare and contrast all the solutions in this google thread :)
18:00:08 <Igloo> Oh, right, OK
18:00:15 <Igloo> Have you got a URL for the thread OOI?
18:00:25 <steveh> I posted it above, and I hope it works
18:00:43 <steveh> it's entitled "Deriving Enum"
18:00:55 <Igloo> Oh, sorry, so you did
18:01:15 <steveh> I am looking at Wolfram Kahl's vs. Mark Jones vs. Tom Pledger's
18:01:39 <steveh> I am trying to figure out how to coax Mark Jones's to actually output [(0,0),(0,1),(1,0
18:01:43 <steveh> oops
18:01:45 <Pseudonym> I can think of about half a dozen inefficient implementations.
18:01:52 <Pseudonym> Would you like one?
18:02:39 <steveh> there are a bunch here :) I got caught in the tangent of looking for a pattern of the A column, and one in the B column, and then zipping the result
18:03:03 <steveh> here is mark jones'
18:03:05 <steveh> > diag :: [[a]] -> [a]
18:03:05 <steveh> > diag  = concat . foldr skew [] . map (map (\x -> [x]))
18:03:05 <steveh> >         where skew []     ys = ys
18:03:05 <steveh> >               skew (x:xs) ys = x : comb (++) xs y 
18:03:24 <steveh> > comb                :: (a -> a -> a) -> [a] -> [a] -> [a]
18:03:24 <steveh> > comb f (x:xs) (y:ys) = f x y : comb f xs ys
18:03:24 <steveh> > comb f []     ys     = ys
18:03:25 <steveh> > comb f xs     []     = xs 
18:03:37 <Pseudonym> Mine is much shorter, but less efficient.
18:03:42 <steveh> but that doesn't quite do what I initially conceived!
18:03:44 <Pseudonym> http://www.haskell.org/hawiki/HaskellIrcPastePage
18:04:06 <steveh> hey, nice paste page :)
18:04:18 <Pseudonym> There should probably be an empty list case for the case of finite lists too.
18:04:23 <Pseudonym> diagonalise' n [] = []
18:05:17 <steveh> aaah
18:05:27 <steveh> there's another issue I was having
18:05:35 <Pseudonym> I think that's the most obvious solution.
18:05:36 <steveh> I had a different diagonalization pattern in mind
18:05:44 <Pseudonym> Oh?
18:05:49 <steveh> this one makes much more sense in code
18:06:04 <steveh> ow
18:06:10 <steveh> and also only works on infinite sets? :)
18:06:15 <Pseudonym> Yes. :-)
18:06:27 <Pseudonym> Hang on, I'll fix it.
18:06:50 <Pseudonym> OK, works on finite lists now.
18:06:54 <steveh> :)
18:07:51 <Smerdyakov> Finite lists are boring in set theory :-(
18:08:02 <Pseudonym> Not in group theory, though.
18:08:07 <Pseudonym> They're really interesting there.
18:08:47 <steveh> diagonalise [0..4] [0..4] still breaks on me
18:09:16 <shapr> hey Pseudonym, any idea how this would work: http://www.haskell.org/pipermail/libraries/2003-February/000770.html ?
18:09:38 <shapr> Daan used nested tuples to replace hugs' TREX while developing HaskellDB
18:09:58 <steveh> no big deal
18:10:05 <steveh> I was more curious about mark jones's
18:10:12 <steveh> since it doesn't quite solve the problem
18:10:19 <steveh> but it has the pattern encoded
18:12:43 <steveh> I put it on the paste page
18:12:45 <steveh> go me :)
18:20:57 <Pseudonym> The problem with my implementation, BTW, is that it relies on integers.
18:21:37 <Smerdyakov> I hope your implementation can't pay its bills and dies in the gutter, clutching an empty bottle of Kool-Aid.
18:21:38 <Pseudonym> Oh, duh.
18:21:49 <Pseudonym> Yes, I see the problem with mine.
18:21:52 <Pseudonym> Hmmm.
18:22:10 <steveh> Smerdyakov: phew!
18:22:17 <Pseudonym> Oh, I see the answer.
18:22:53 <Smerdyakov> Wesley Willis says that Jesus is the answer.
18:22:59 <steveh> anyway, this little brainteaser has shown me I need a bit more practice in FP
18:23:24 <steveh> I got that I needed a finite "accumulator" of some sort, a la pledger's
18:24:32 <steveh> except you don't, really, if I can be convinced that Jones' version can be coaxed into giving me what I want :)
18:24:56 <steveh> but the more I think about it the more I think it can't be
18:25:35 <Pseudonym> I fixed mine.  Works fine with finite lists now.
18:25:45 <Pseudonym> Don't hit reload yet, though.
18:25:46 <steveh> Huzzah :)
18:26:33 <Pseudonym> OK, fixed.
18:27:12 <Pseudonym> Now what's the problem with Mark Jones' version?
18:27:30 <steveh> it doesn't do the cartesian product
18:27:43 <Smerdyakov> It doesn't have an OSI-approved license.
18:27:45 <steveh> it actually runs through the elements of each list in "diagonal" order
18:27:45 <Pseudonym> Oh, because it doesn't work on differing types?
18:28:32 <steveh> try it out on something and see, it's entirely different yet seductively related
18:28:48 <Pseudonym> Mine, incidentally, doesn't quite get the order right in this case:
18:28:56 <Pseudonym> diagonalise [0..] [1..3]
18:29:10 <Pseudonym> But I don't think that's a problem so long as it covers everything once.
18:29:24 <Pseudonym> Oh, I see.
18:29:28 <Pseudonym> Yes, that is different.
18:29:45 <Pseudonym> But that's okay.  You can get the behaviour you want using this:
18:30:04 <Pseudonym> diagonalise xs ys = diag [ [ (x,y) | y <- ys ] | x <- xs ]
18:30:29 <Pseudonym> It's equivalent, in some sense.
18:32:15 <steveh> beautiful
18:32:25 <steveh> that's awesome Pseudonym :)
18:32:55 <Pseudonym> Incidentally, "diag" is really a sophisticated "concat".
18:33:09 <steveh> @prelude concat
18:33:11 <lambdabot> *** "concat" prelude "Haskell Standard Prelude Dictionary": text follows
18:33:11 <lambdabot> concat
18:33:11 <lambdabot>   concat ::  [[a]] -> [a]
18:33:11 <lambdabot>   concat            = foldr (++) []
18:33:19 <steveh> yes
18:33:24 <Pseudonym> In fact, [ (x,y) | x <- xs, y <- ys ] is exactly the same as concat [ [ (x,y) | y <- ys ] | x <- xs ]
18:34:12 <steveh> is that how you saw how to use Mark Jones's version?
18:34:33 <Pseudonym> No, I realised this afterwards.
18:34:41 <steveh> coool
18:35:13 <Pseudonym> So I guess diag is the same as diagonalise' 1
18:35:30 <Pseudonym> I guess I like Mark Jones' version better, only it's showing its age a bit.
18:35:39 <steveh> How's that?
18:36:02 <Pseudonym> Programmers tend to avoid an unlimited amount of (++) nowadays.
18:36:24 <Pseudonym> Even though (++) takes amortised constant time to execute, people seem to prefer using function composition.
18:37:08 <Darius> compose (++)'s
18:41:13 <Pseudonym> steveh: http://www.haskell.org/hawiki/IterationPattern
18:41:20 <Pseudonym> Compare the two versions of toList.
18:41:28 <Pseudonym> That's what I meant by "showing its age".
18:42:50 <steveh> that does make more sense, given what I know about append aka ++
18:42:51 <steveh> :)
18:44:20 <Pseudonym> I dunno though.  (++) might actually be more efficient in this case.
18:44:42 <Darius> foldl1 (++)  bad, foldr1 (++) good (or less bad), (.) is associative.
18:45:29 <Pseudonym> foldr1 (++) good, so long as you actually have a list of things
18:45:45 <steveh> Pseudonym: you mean in the case of toList?
18:45:50 <Pseudonym> Yes.
18:46:02 <Pseudonym> In toList you want (.) because the tree might be skew.
18:46:15 <Darius> CPS is just an accumulating parameter in disguise.
18:46:18 <Pseudonym> In which case you might trigger the worst case of (++).
18:46:29 <Pseudonym> Darius: It is if it's used recursively.
18:46:46 * steveh can think in terms of accumulating parameters.
18:47:02 <steveh> CPS / "points-free" don't jive with me yet
18:47:24 <Darius> I like point-free when it doesn't contort code too much.
18:47:24 <Pseudonym> http://www.haskell.org/hawiki/ContinuationPassingStyle
18:47:26 <Pseudonym> FWIW
18:48:35 <Darius> Point-free is nice for program manipulation/calculation.
18:48:39 <steveh> I can look at a function and say "oh, they're doing continuation passing style" and I can figure out what' s going on
18:48:45 <steveh> but I don't think in those terms
18:48:55 <Pseudonym> Most programmers don't.
18:49:13 <Pseudonym> Generally if I need CPS these days I use MonadCont.
18:51:06 <Darius> ($ foo) is useful for CPS
18:51:38 <steveh> How in-depth does the Hudak "Multimedia" book get?
18:51:49 <steveh> I have it on reserve from the library and am waiting to pick it up
18:54:00 * Pseudonym waits for purecoverage to do its thing
19:03:09 <cale> Maybe there should be a typeclass for things which have a "map" function, i.e. all datatypes with one type variable. I wonder how easy/hard just deriving map from the structure in that case would be?
19:03:20 <Pseudonym> You mean Functor?
19:03:31 <cale> ah, there is then?
19:03:48 <Pseudonym> Yes.
19:03:51 <Darius> @prelude Functor
19:03:53 <lambdabot> *** "Functor" prelude "Haskell Standard Prelude Dictionary": text follows
19:03:53 <lambdabot> Functor
19:03:53 <lambdabot>   class Functor f where
19:03:53 <lambdabot>       fmap :: (a -> b) -> (f a -> f b)
19:04:17 <cale> cool
19:05:00 <steveh> that went over my head :-/
19:05:28 <cale> Why haven't I seen it used more often then?
19:05:49 <cale> It seems natural to put things like binary trees, etc in this class.
19:07:22 <Pseudonym> I don't rightly know.
19:07:38 <dennisb> and lists, as far as I know the only reason map only works on lists is because it gives better error messages if something goes wrong (good for the beginner)
19:07:54 <Pseudonym> One reason can be that it doesn't preserve structural invariants.
19:08:08 <cale> It doesn't appear to be a derivable class, though I think that for types having only one parameter, the derivation would be obvious.
19:08:12 <Pseudonym> For example, if your binary tree is a binary _search_ tree, then f may not preserve ordering.
19:08:21 <steveh> my information is that [] is in functor?
19:08:24 <cale> hmm...
19:08:34 <cale> [] is most likely in functor.
19:08:40 <Pseudonym> It is.
19:08:43 <Darius> @prelude fmap
19:08:44 <Pseudonym> Any monad is a functor.
19:08:45 <lambdabot> *** "fmap" prelude "Haskell Standard Prelude Dictionary": text follows
19:08:45 <lambdabot> fmap
19:08:45 <lambdabot>   instance (Ix a) => Functor (Array a) where
19:08:45 <lambdabot>     fmap = primAmap
19:08:46 <lambdabot>   class Functor f where
19:08:48 <lambdabot>     fmap ::  (a -> b) -> (f a -> f b)
19:08:50 <lambdabot>   instance Functor Maybe where
19:08:52 <lambdabot>     fmap f Nothing  = Nothing
19:08:54 <lambdabot> [there's @more]
19:09:12 <Darius> @more
19:09:12 <lambdabot>     fmap f (Just x) = Just (f x)
19:09:12 <lambdabot>   instance Functor [] where
19:09:12 <lambdabot>     fmap = map
19:09:12 <lambdabot>   instance Functor IO where
19:09:12 <lambdabot>     fmap f x = x >>= (return . f)
19:09:51 <Darius> Unfortunately, instance Monad a => Functor a where fmap f x = x >>= (return . f) is not legal Haskell.
19:10:06 <Darius> However,
19:10:12 <Darius> @prelude liftM
19:10:15 <lambdabot> *** "liftM" prelude "Haskell Standard Prelude Dictionary": text follows
19:10:15 <lambdabot> liftM
19:10:15 <lambdabot>   liftM ::  (Monad m) => (a -> b) -> (m a -> m b)
19:10:15 <lambdabot>   liftM f           = \a -> do { a' <- a; return (f a') }
19:10:45 <Pseudonym> Which just confuses things further.
19:11:51 <Pseudonym> Functor used to be a superclass of Monad, from memory.
19:12:00 <Pseudonym> Somewhere in the dim distant past.  Probably Gofer.
19:12:14 <Darius> In Gofer I think it was.
19:12:27 <Pseudonym> Gofer did a lot of things better. :-)
19:12:29 <Darius> Also map was the method of Functor
19:13:22 <cale> why is instance Monad a => Functor a where fmap f x = x >>= (return . f) not valid?
19:13:55 <Darius> It needs to be Functor (SomeConstructor a)
19:14:08 <cale> ah
19:14:19 <Darius> Pathological instance, instance Functor a => Functor a
19:14:21 <Pseudonym> I think it works if you -fglasgow-exts
19:14:26 <steveh> what is the status of "Haskell 2?"
19:14:31 <Pseudonym> Or -fallow-overlapping-instances
19:14:32 <Pseudonym> Or something.
19:14:57 <Pseudonym> steveh: We just got H98 put to bed.
19:15:04 <Darius> -fallow-undecidable-instances would almost certainly do it.
19:15:17 <Pseudonym> Probably.
19:15:39 <Pseudonym> steveh: Basically, "Haskell 2" is some combination of Haskell 98 plus the current Glasgow extensions.
19:15:52 <Pseudonym> But nobody's really sat down and looked at it yet.
19:16:07 <Pseudonym> Personally, I also think the standard libraries need a bit of a rework.
19:16:17 * steveh isn't up to speed on Haskell 1.2 let alone the Glasgow extensions :)
19:16:30 <Pseudonym> Oh, leave Haskell 1.2 alone.
19:16:35 <Pseudonym> It's OLD.
19:16:40 <Pseudonym> Lots of it is deprecated.
19:16:42 <steveh> Pseudonym: Qualified names instead of xxxxM, etc.?
19:16:43 * Darius isn't up to speed on Haskell 1.2
19:16:46 <steveh> I know, I know :)
19:16:52 <steveh> it's this damn book I have
19:16:57 <Pseudonym> Oh. :-)
19:16:58 <steveh> which is why I got Hudak's on order
19:17:05 <steveh> actually I think it might be 1.1
19:17:15 <Pseudonym> steveh: Not just qualified names.
19:17:26 <steveh> implementations too?
19:17:32 <steveh> or more style things?
19:17:38 <Pseudonym> More style things.
19:17:43 <Darius> content
19:17:45 <Pseudonym> The Num class, for example, needs looking at.
19:18:06 <Darius> The whole numeric hierarchy needs looking at.
19:18:09 <Pseudonym> People really want to do something like C++-style operator overloading sometimes.
19:18:20 <Pseudonym> I really want to do (*) :: Tensor -> Matrix -> Matrix
19:18:28 <Pseudonym> Darius: Right.
19:18:45 <Pseudonym> Also, I think IO and ST need to be looked at in terms of the Monad Template Library.
19:18:51 <Pseudonym> There might be some opportunities for refactoring there.
19:20:00 <Pseudonym> I kinda liked MonadPlus from Gofer, too.
19:20:09 <Pseudonym> Sorry, MonadZero.
19:20:19 * Pseudonym isn't sure why H98 doesn't have that
19:20:51 <Pseudonym> Possibly because contemporary Haskell compilers (i.e. GHC) didn't optimise stuff like that well.
19:22:22 <Pseudonym> Lunch.
19:22:24 <Pseudonym> BBIAB
19:22:37 <cale> There should be a distinction between different kinds of products. We need more product symbols though. :) Bring back the space-cadet keyboards.
19:22:40 <Darius> What time is it there?
19:22:54 <Pseudonym> It's 12:22pm.
19:23:00 <Pseudonym> Make that 12:23.
19:23:16 <Darius> 10:22pm here.
19:25:42 <steveh> well there are a lot of cool symbols...
19:25:46 <steveh> 
19:26:16 <steveh> 
19:26:20 <steveh> etc
19:26:39 <Darius> box, box, ...
19:26:47 * Darius needs a different IRC client.
19:26:48 <steveh> heh, sorry :)
19:26:59 <steveh> that was "approximately" and "Sigma"
19:27:29 * cale needs better fonts
19:27:46 * steveh is using the Bitstream Vera fonts right now
19:27:56 <steveh> They work OK in OS X
19:28:24 <steveh> I like the monospace version better than just about any other monospace font I've seen
19:28:25 <cale> hrm, I just set it to BS Vera Sans...
19:29:08 <steveh> they are of the "anti-aliasing == good" variety though
19:31:10 <cale> The hinting in most of the fonts I see is terrible. I've also been having problems with fonts being too small on the web lately - ending up with anti-aliased/subpixelled to death blurriness.
19:31:33 <steveh> I hate that
19:31:51 <steveh> Obviously a conspiracy to get us to buy LCD displays :)
19:32:43 <cale> :) I have a nice LCD display, but at 7 pt, it just doesn't matter that you have 3 times the horizontal resolution.
19:33:57 <cale> Hmm... even Bitstream Cyberbit doesn't have the chars that you put above.
19:34:29 <cale> and my Japanese fonts apparently don't either. Is there a complete "unicode reference" font or something?
19:35:22 <steveh> weird
19:35:31 <steveh> I don't know of any offhand
19:35:43 <steveh> does © work?
19:35:49 <cale> yep
19:35:56 <steveh> ¥ ?
19:36:04 <cale> Yen symbol.
19:36:11 <steveh> weird
19:36:20 <steveh> µ is mu?
19:36:32 <cale> yes
19:36:51 <steveh> then I can't tell what's up with  and 
19:37:02 <steveh> I'm not going out of my way to produce them...
19:37:20 <cale> what sort of keyboard do you have?
19:37:29 <steveh> standard keyboard
19:37:41 <cale> ah, then you have nice bindings?
19:37:47 <steveh> on a mac all one has to do is type "option-[char]" to get nice characters :)
19:37:55 <cale> ah
19:37:58 <steveh> option-Y is yen symbol
19:38:01 <steveh> etc
19:38:23 <steveh> even works with accents, option-e , then e gives you é
19:38:24 <cale> the two broken chars show up as boxes with 0089 and 0085 in them.
19:38:51 <steveh> possibly the mac grabs those symbols from another font to be consistent?
19:38:58 <cale> maybe
19:39:22 <steveh> I guess the only way to see if that's the case is to bust out symbol :)
19:40:26 <Riastradh> Has anyone here ordered a Hindley-Milner type algorithm t-shirt yet?
19:40:47 <steveh> link? :)
19:40:55 <Riastradh> http://www.cafeshops.com/skicalc
19:40:57 <steveh> ¿link?
19:40:58 <steveh> :)
19:41:40 <cale> Riastradh: I might, but I don't have a credit card, so I'll need to get my dad to do it or something.
19:42:02 <steveh> wear that one in front of perl aficionados :)
19:42:04 <Riastradh> It'd be best if only one person ordered one for now, to see if the text is too small.
19:42:34 <steveh> it uses CM fonts
19:42:37 <steveh> those are kind of spindly
19:42:41 <Riastradh> CM fonts?
19:42:46 <steveh> computer modern
19:42:51 <steveh> Knuth's font for TeX
19:42:54 <Riastradh> ...?
19:43:02 <Riastradh> Oh.
19:43:11 * Riastradh just copied it from a PDF.
19:43:42 <cale> I like the computer modern roman font. It's probably the most readable roman font I've seen.
19:44:13 <cale> although, the fact that TeX is doing the typesetting might have something to do with it :)
19:44:21 <steveh> I like wider fonts
19:44:30 <steveh> Lucida is the best one I've seen for TeX output
19:44:40 <steveh> though I think it costs $$$ to get the real versions
19:44:46 <steveh> sorry, Lucida Bright
19:44:59 <steveh> It's what the AMS uses I believe
19:46:02 <steveh> http://www.yandy.com/download/chironlb.pdf is a sample
19:46:35 <steveh> kind of cluttered layout but at least you can see what the font looks like :)
19:47:56 * steveh wouldn't mind a job in mathematical typography
19:48:00 <steveh> seems like it'd be fun :)
19:48:32 <steveh> I was very happy to find that someone had written a TeX package for haskell
19:48:34 <steveh> :)
19:48:42 <steveh> typesets .lhs very wel
19:50:21 <cale> nice demo :)
19:50:46 <cale> It even gets that crossed L into the works :)
19:51:16 <steveh> I actually think Microsoft's Georgia is about as close as you can get to the general idea of Lucida Bright without paying for it...
19:51:29 <cale> Georgia is quite nice.
19:51:53 <cale> It's a nice replacement for Times which is far overused.
19:52:25 <cale> Verdana is also much nicer than Helvetica/Arial.
19:52:47 <steveh> heh
19:52:55 * steveh is pondering web2hs
19:53:12 <Riastradh> What would that do?
19:53:34 <cale> web as in Knuth's favourite programming language?
19:53:39 <steveh> what web2c does, except to haskell 
19:53:42 <steveh> cale: yeah :)
19:53:48 <steveh> TeX is written in it...
19:54:23 <steveh> I actually don't know anything about it except "literate programming"
19:55:10 <Riastradh> What does web2c do?
19:55:27 <steveh> converts this WEB literate programming language to C
19:55:35 <steveh> so mere mortals can compile TeX on their machine :)
19:55:37 <Riastradh> WEB?
19:56:38 <steveh> http://www.literateprogramming.com/
19:57:31 <steveh> since haskell already has support for literate programming I guess it'd be redundant
19:59:38 <steveh> I had good luck with http://www.cse.unsw.edu.au/~chak/haskell/haskell-style.html for typesetting haskell.
20:00:02 <steveh> so if manuel chakravarty is here, thank you :)
20:08:36 <cale> What is the thing with tuples? It seems strange that there would be an arbitrary bound on them. Why aren't they and their derived instances handled implicitly by the language spec?
20:10:42 <cale> actually, all one really needs to define is the 2-tuple and let (a,b,c) be syntactic sugar for (a,(b,c)).
20:13:10 <Darius> So, should show (a,b,c) show "(a,b,c)" or "(a,(b,c))"?
20:14:58 <cale> Probably (a,b,c) as it's visually cleaner and equivalent. Would there be a problem getting it to do that?
20:15:32 <cale> Couldn't you just pattern match against the second element of the tuple to tell if it's another tuple?
20:15:54 <cale> well, pair :)
20:18:18 <Darius> Yes, it could, but what if I meant (a,(b,c))
20:18:36 <cale> the two things would be the same.
20:18:51 <cale> You just wouldn't have tuples of length greater than 2. :)
20:19:23 <cale> You'd just use syntactic sugar to get bigger tuples.
20:20:39 <cale> I suppose if you wanted it to display (a, (b,c)) then you'd need to write another printer for the tuple type, that's not hard.
20:21:09 <cale> (one could even be included, like explicitShow or something)
20:21:45 <Fractal> Well in haskell (a, b, c) *is* different from (a, (b, c)) I think... Consider the pattern match   blah (a, b) = ...
20:22:27 <Fractal> If blah was passed (q, (r, s)) then b would match to (r, s)...
20:23:31 <Darius> It'd also make read instances more complicated.
20:24:20 <Fractal> I personally don't have any problems with imposed limits on tuples... Any tuples larger than 7 and you should seriously consider using data types. :)
20:24:49 <cale> Fractal: good point - what would the type signature of blah look like?
20:24:57 <cale> Yes, I suppose that's true :)
20:25:59 <Fractal> Well in that case prossibly  blah :: (Int, (Int, Int)) -> Int
20:26:01 <Fractal> Or something
20:27:32 <cale> and if you wanted the last two to be grouped, then you could pattern match like blah (a, b) and that would work and put the last 2 ints into a pair called b. But if you only passed something like (2,3) it wouldn't typecheck.
20:28:00 <cale> otoh, you could say blah (a,b,c) and get all three ints in separate vars.
20:30:25 <Fractal> OK, what about ((a, b), (c, d)) and you want to pattern match with (q, (r, s)) which is under this scheme equivalent to (q, r, s) ?
20:31:05 <Fractal> It could match either way...
20:31:20 <cale> (a,b)->q ; (c,d)->(r,s)
20:31:38 <cale> what other way?
20:32:18 <Fractal> Well if (q, (r, s)) is the same as ((q, r), s)
20:32:28 <cale> oh, no, it certainly isn't
20:32:33 <Fractal> Well say you simply matched (q, r, s) ?
20:32:52 <cale> we'd have to decide on associativity of tuples.
20:33:12 <cale> I think right associativity is better for this purpose.
20:33:43 <cale> (makes them similar to lists)
20:33:54 <Darius> Indeed, it IS how Lisp lists are coded.
20:34:00 <Darius> (a,(b,(c,())))
20:34:18 <Darius> And with your syntactic sugar it would be (a,b,c,())
20:34:19 <Fractal> Er, no, I'm talking about pattern matching tuples...
20:35:06 <cale> (a,b,c,d) would always map to (a,(b,(c,d)))
20:35:19 <cale> so there wouldn't be any ambiguity in pattern matching.
20:36:19 <Fractal> Oh, I see... You're considering limiting the flexibility of the pattern match. Fair enough, I suppose that would work.
20:45:33 <Darius> Hmm, you wouldn't be able to write an instance that was different for any pair of tuples.
20:45:50 <Darius> polymorphic tuple types rather.
20:46:03 <cale> Hm?
20:46:54 <Darius> As such, show MUST show "(a,(b,c))".  You want this so that defining an instance for a pair inductively defines it for all tuples.
20:47:09 <Darius> You'll have overlapping instances if you give two different types.
20:47:29 <Fractal> I agree... There would be a lot of problems with throwing out the grouping information of tuples...
20:47:36 <Darius> (a,(b,c)) is an instance of (a,b)
20:48:22 <Darius> (the show instance above, is the only reasonable one as well)
20:50:34 <cale> It doesn't just choose the most specific instance?
20:51:08 <Darius> No
20:51:33 <cale> Why not?
20:52:11 <Darius> That'd be subtyping (or lead to it) which is a seems to create massive difficulties typechecking.
20:52:27 <cale> hmm...
20:53:15 <Darius> GHC allows things like this with -fallow-overlapping-instances, but what instance you get might not be the one you want.
20:54:25 <cale> There perhaps should be a way then to specify exclusions from the set you're defining to be an instance.
20:56:24 <cale> or perhaps just cases required to cover the type.
21:05:09 <cale> wait a minute - so instance (Show a, Show b) => Show (a, b) where { showsPrec p (x,(y,z)) = ... ; showsPrec p (x,y) = ... } would be disallowed?
21:05:50 <cale> (or not desirable)
21:06:47 <cale> Would that not typecheck?
21:08:16 <Darius> no, b isn't necessarily (y,z) and there are no alternatives (products are not sums)
21:13:18 <Pseudonym> (a,(b,c)) is different from (a,b,c) in one other very important way.
21:13:30 <Pseudonym> Hint: (a,undefined)
21:13:54 <cale> ah, that's true
21:15:32 <cale> but couldn't you have (a,(b,_|_)) or (a,(_|_, b)) still?
21:15:46 <Pseudonym> Sure.
23:55:38 <d-burp> morning
23:56:31 <Pseudonym> G'day.
