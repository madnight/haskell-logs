00:47:03 * andersca bounces
01:03:20 <Marvin--> hmm, I wonder if there's an mmap implementation for haskell
01:12:23 <andersca> man
01:12:27 <andersca> talk is in 1 hour
01:12:45 <Marvin--> heh
01:12:48 <Marvin--> luck
01:13:14 <andersca> and I'm sure both Alan Cox and Jim Gettys are gonna be there
01:13:21 <andersca> asking tricky questions, just like they always do
01:13:38 <Marvin--> what are you talking about?
01:13:52 <andersca> D-BUS
01:14:00 <Marvin--> ah, got the talk online somewhere?
01:15:45 <andersca> not yet
01:15:51 <andersca> or do you mean the slides?
01:16:22 <Marvin--> anything :)
01:16:31 <andersca> there will be oggs up later I think
01:18:35 <Marvin--> oh, maybe I should go back to worrying about mmap in python then
01:20:52 <andersca> mmap exists in python, right?
01:22:08 <Marvin--> yes
01:22:26 <Marvin--> but you get a file-like object back, so it's not really any different from working against the file :-/
01:22:33 <Marvin--> (except that it's probably faster)
01:23:03 <andersca> ah
01:23:24 <Marvin--> but that doesn't help me implementing binary search over sorted text files :-/
01:39:29 <d-bug> Marvin--: Perhaps something like Boyer-Moore would be appropiate?
01:41:40 <Marvin--> d-bug: uh, but that doesn't take advantage of that the file is sorted, does it?
01:42:44 <d-bug> Marvin--: No, not without some modifications. Perhaps there already exists such a modification?
01:44:38 <Marvin--> B-M is more about pattern matching than efficient lookup...
01:44:58 <Marvin--> I'm implementing text indexing so the text file is basically a huge dictionary with ordered keys
02:16:22 <Heffalump> you can't seek in python?
02:18:58 <Marvin--> well yeah, but it's much handier to work like in C, where you get a pointer to a memory region that can act as an array for you
02:45:51 * shapr awakens
02:46:01 <jlouis> though it sucks performancewise to use pointers
02:47:36 <Marvin--> pointer arithmetic into a mmap:ed file is slow?
02:50:29 <jlouis> ah, an mmap'ed
02:50:40 <jlouis> then it is going to be quite ok
02:52:12 <Marvin--> yes, I was whining about python's mmap not letting me do pointer fiddling :)
02:52:32 <Marvin--> but I assume that seek:ing on an mmap object is speedier than on a file object
02:54:02 <Marvin--> I wonder if someone will hit me if I import some __future__ stuff
02:57:28 * shapr hits Marvin-- with a foam sledgehammer
02:58:48 <Marvin--> but me want generators :-/
02:59:26 <vegai> Marvin--: it's not the future anymore
02:59:36 <vegai> except if you're living in the past =)
02:59:57 <Marvin--> we're using python 2.2
03:00:07 <Heffalump> Marvin--: I played with the different namesupply ideas I mentioned last night: http://urchin.earth.li/~ganesh/namesupply.hs
03:00:24 <Marvin--> Heffalump: cool!
03:00:32 <Heffalump> In particular the idea of using arrows to try to get a static prediction of how many names will be needed
03:00:58 <Heffalump> unfortunately, moving from monads to arrows introduces so many extra "bind"s (or rather their equivalent) that the benefit is lost :-)
03:01:17 <Marvin--> heh
03:02:48 <Marvin--> I'll look at it in more detail when I get home tonight
03:02:56 <Heffalump> 'lo
03:03:05 <ChilliX> Hi :-)
03:03:24 * Marvin-- wonders if Chilli can be convinced to move to Göteborg ;)
03:05:12 <ChilliX> G?
03:05:22 <Marvin--> er, Goteborg then
03:05:49 <ChilliX> ah, sorry, for some weird reason my current xchat cannot do Latin-1
03:06:01 <ChilliX> I must somehow have screwed up the fonts
03:06:07 <ChilliX> very annoying
03:06:26 <Marvin--> my fault for trying to use irc for something it really doesn't handle :-)
03:06:47 <ChilliX> usually irc works fine with Latin-1
03:07:16 <ChilliX> it's only since I updated to my current version of xchat (or maybe X plus associated fonts) that it doesn't work anymore
03:07:19 <Marvin--> yes and no, there's no concept of charsets in irc at all
03:07:35 <Marvin--> meaning as soon as you leave ascii, you're screwed
03:07:39 <ChilliX> why should I move to Goetborg?
03:07:54 <Marvin--> oh I'm just pushing the CoVer postdoc position a bit :-)
03:08:41 <ChilliX> ah, ic
03:09:28 <ChilliX> I have a permanent position here; so, moving to a fixed term position wouldn't make much sense
03:09:55 <Marvin--> no, I guess not :)
03:10:35 <Marvin--> in Sweden, I'm pretty sure you have the right to get a limited time off to try a new job (I don't remember how long though)
03:10:39 <ChilliX> but if anybody is interested in fixed term (2-3 years) postdoc positions or PhD scholarships in Sydney in the area of functional programming, let me know
03:10:57 <Marvin--> I'll need to get on the PhD program first :-/
03:11:40 <Marvin--> let me get back to you in five or six years or so :-)
03:12:08 <ChilliX> when do you want to start a PhD?
03:12:43 <Marvin--> I wanted to start a PhD this fall, but I only applied here at Chalmers and I didn't get a position
03:12:56 <Marvin--> (and now I'm not finished with my "master" yet)
03:13:18 <ChilliX> ah, ic
03:13:50 <Marvin--> when are you guys accepting PhD positions?
03:15:23 <Marvin--> I mean, next time 'round I'll be applying at more places
03:16:09 <Marvin--> I guess I should make a list of deadlines to meet :)
03:16:40 <ChilliX> the next round is for the semester starting August this year, I guess that's too early for you
03:17:12 <ChilliX> the deadline for first semester 2004 is in December
03:17:27 <Marvin--> eep, that deadline isn't passed yet? At Chalmers the deadline for the 2003 positions were some time in April or so
03:17:48 <ChilliX> there are two sorts of deadlines
03:18:00 <ChilliX> those for PhD enrollment, they are fairly flexible
03:18:06 <ChilliX> and those for PhD scholarships
03:18:28 <ChilliX> I have grant money that I can use for PhD scholarships and that again is very flexible
03:18:37 <ChilliX> so, it is not too late yet
03:18:39 <Marvin--> cool
03:18:49 <Marvin--> well, finishing my degree project is too late for August :)
03:19:20 <ChilliX> when do you finish?
03:19:53 <Marvin--> when I get around to it, I guess.. right now I'm taking a break from it
03:20:20 <Marvin--> we haven't decided on a fixed time deadline, but I guess it's about time to make some decisions for how much to do and not to do
03:20:24 <Marvin--> (oh, and get started on that report...)
03:21:00 <Heffalump> is your grant money for a specific project?
03:21:31 <ChilliX> yes, actually two projects:
03:21:34 <ChilliX> (1) http://www.cse.unsw.edu.au/~chak/project/haskell+ndp/
03:21:47 <ChilliX> (2) http://www.cse.unsw.edu.au/~chak/project/sec/
03:21:56 <shapr> yay ndp
03:22:01 * shapr gets out the pom-poms
03:22:29 <ChilliX> second one spans three research groups at UNSW
03:23:40 <ChilliX> we (= PLS) are focusing on lambda-calculus based intermediate languages as well as type-preserving and certifing compilation
03:24:57 <Marvin--> I'm off to find some lunch
03:25:03 <ChilliX> especially in the second project, we are still looking for PhD students and postdocs
03:26:07 <shapr> I sometimes wish to be a PhD student.
03:26:22 <Heffalump> working in Sydney would be cool
03:27:40 <ChilliX> Heffalump: are you seriously interested?
03:28:06 <Heffalump> no, sorry :-)
03:28:34 <ChilliX> unfortunate...
03:28:39 <Heffalump> I have another year and half to go here
03:29:21 <ChilliX> there is also http://nicta.com.au/
03:29:42 <ChilliX> good chance that there'll be open positions at NICTA in 1.5 years
03:30:09 <ChilliX> the largest research node is co-located with UNSW and intersects strongly with our School
03:30:22 <Heffalump> so it's a research-only institution?
03:32:00 <ChilliX> yes, national research institute
03:32:22 <ChilliX> but as it is co-located with us, NICTA people can do some teaching if they like (eg, to attract PhD students)
03:33:40 <ChilliX> ok, dinner time
03:33:47 <Heffalump> cya
03:48:58 * shapr boings
03:49:01 <shapr> andersca: how was it?
03:53:25 <andersca> good
04:02:02 <shapr> did you get any tricky questions?
04:02:03 <Marvin--> andersca: so give us the slides, dammit :)
04:08:17 <ChilliX> re
04:09:35 <Igloo> Hello all
04:10:34 * shapr boings
04:13:31 <Marvin--> andersca: bah!
04:14:19 <shapr> yes, that's what I was thinking.
04:17:15 <cale> @yow
04:17:16 <lambdabot> Yow!
04:17:28 <shapr> @fortune
04:17:29 <lambdabot> Psychoanalysis is that mental illness for which it regards itself a therapy.
04:17:29 <lambdabot> 		-- Karl Kraus
04:17:35 <cale> Okay :)
04:17:38 <shapr> @yow
04:17:38 <lambdabot> YOW!!  Now I understand advanced MICROBIOLOGY
04:17:38 <lambdabot>  and th' new TAX REFORM laws!!
04:17:59 <shapr> yow is very therapeutical.
04:18:01 <shapr> @yow
04:18:02 <lambdabot> Th' PINK SOCK... soaking... soaking... soaking...
04:18:02 <lambdabot>  Th' PINK SOCK... washing... washing... washing...
04:18:02 <lambdabot>  Th' PINK SOCK... rinsing... rinsing... rinsing...
04:18:21 <shapr> lambdabot: you are a very weird bot.
04:18:22 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
04:20:55 <shapr> @listmodules
04:20:55 <lambdabot> I have the following modules installed: ["chess","dict","eval","fact","hello","karma","more","quote","state","system","topic","type"]
04:21:10 <shapr> oh, I have a haskell question!
04:21:28 <Marvin--> shapr: go away! ;)
04:21:36 <shapr> is there some way that lambdabot could have an @info command such that it would know what version of GHC was used to compile it?
04:21:48 <shapr> can a running program ask the runtime system that kind of question?
04:22:11 <shapr> oh, polli is doing some nifty new development with lambdabot 
04:22:24 <Heffalump> you could just embed the appropriate macro into the source, couldn't you?
04:22:32 <shapr> that's true, I could.
04:22:46 * Heffalump has no idea what that macro would be, but I'm sure it must exist :-)
04:23:03 <Marvin--> sed powah ;)
04:23:15 <Heffalump> hmm :-)
04:23:23 <shapr> he gawked at what I sed.
04:23:34 <Marvin--> shapr: *groan*
04:25:01 * Marvin-- sends the men with white coats after a friend
04:25:12 <Marvin--> (he's pondering doing some php consulting work)
04:26:46 <Marvin--> shapr: the same friend just contributed "once there was two geeks, one sed more, the other talkd less
04:28:24 <shapr> heh, cute
04:28:32 <shapr> did you see the proglang poem from last night?
04:28:39 <Marvin--> no
04:29:06 <shapr> http://www.livejournal.com/users/darius/
04:34:59 <Marvin--> I particularly liked "Y is recursion so self-referential?" :-)
04:35:10 <Marvin--> cool, moshez's coming to Sweden at the end of JUne
04:35:12 <Marvin--> June even
04:35:41 <Marvin--> "I am One of One"  hahahaha
04:35:44 * Marvin-- is reading Dr Fun
04:35:49 <Marvin--> http://www.ibiblio.org/Dave/Dr-Fun/df200205/df20020522.jpg
04:37:12 <tic_> hehe
04:40:17 <shapr> time to work, bbl
05:00:57 <Marvin--> damn, I'm beginning to regret a card trade I did
05:07:15 <Heffalump> card trade
05:07:15 <Heffalump> ?
05:08:18 <Marvin--> oh, I'm one of them silly CCG players
05:16:33 <jlouis> CCG?
05:16:36 <jlouis> g9
05:18:11 <Marvin--> collectible card game, in my specific case, www.agameofthrones.com
05:29:05 * cale attempts to write the wiki description of CoMonad.
05:33:44 <Heffalump> there's a discussion on haskell-cafe about them starting 27 Dec 2002, which ends with an unanswered question
05:34:02 <Heffalump> providing an answer to it would be great :-)
05:45:40 <Marvin--> "Snatcher was designed for Japanese, and is short on internationalization now. Documents and log messages are only in Japanese."  riiight, this is one search engine I'm not going to be looking closer at
06:06:49 <cale> @prelude seq
06:06:50 <lambdabot> *** "seq" prelude "Haskell Standard Prelude Dictionary": text follows
06:06:50 <lambdabot> seq
06:06:50 <lambdabot>   infixr 0 `seq`
06:11:45 <jlouis> core definition?
06:12:39 <jlouis> at least primitive in hugs
06:13:29 <Heffalump> well, it has to be primitive
06:13:43 <jlouis> I do not even know what it does
06:14:04 <Heffalump> a `seq` b evaluates a to head-normal form and returns b
06:14:11 <SyntaxPolice> morning :)
06:14:15 <cale> Oh, I was just trying to get its type, as I don't use it often - it's a -> b -> b. It forces evaluation of its first argument and returns its second.
06:14:44 <jlouis> ah, so the memo-slot in the thunk ''a'' gets filled?
06:15:44 <Heffalump> I imagine that's what most implementations do, yes
06:15:57 <Heffalump> the language spec has no notion of that
06:17:47 <jlouis> ok
06:17:58 <jlouis> the spec only states head-normal-form then?
06:18:43 <jlouis> Hmm, sequence seems nice
06:20:17 <Marvin--> oh dear, apparently we're going *bowling* before drinking release beer
06:20:50 <Heffalump> jlouis: I can't remember quite what it states, it may not even mention head-normal form
06:20:56 <Heffalump> I probably mean weak-head-normal-form, too
06:20:57 <jlouis> ok
06:22:14 <Heffalump> it's just defined by it's bottom-recognising properties
06:22:24 <Heffalump> seq _|_ b = _|_
06:22:34 <jlouis> ah, yes
06:22:38 <Heffalump> seq a b = b, if a /= _|_
06:22:48 <jlouis> that makes perfect sense
06:25:07 <Marvin--> there seems to be very few open source full text search engines with decent support for diacritics
06:25:11 <Marvin--> sigh
06:26:34 <jlouis> catMaybes ms = [ m | Just m <- ms ], oh I have missed that one in ML
06:27:19 <Heffalump> I thought there was something like that.
06:27:40 <jlouis> You can do it yourself, but I have never found it in the Standard Library
06:28:08 <Heffalump> well, mapPartial is close
06:28:15 <jlouis> yes
07:10:17 <cale> There, I added an article about comonads to the wiki. It's mostly just a summary of some of the material from the paper that I linked there (Codata and comonads in Haskell).
07:14:54 * SyntaxPolice cheers for cale
07:15:13 <cale> :)
07:16:59 * Marvin-- cheers too but doesn't understand a whole lot
07:17:40 <cale> It probably needs work, but that's what a wiki is all about :)
07:21:13 <SyntaxPolice> so when would you use a comonad instead of a monad?
07:21:43 <Marvin--> beer time
07:23:03 <cale> I suppose whenever it's more natural to get at the context than to describe an action, but bascially any time you use a monad you can use a comonad to the same effect.
07:24:02 <cale> I suppose it's more a matter of style or taste.
07:26:17 <SyntaxPolice> hm. so I might use a State monad to carry and query some context, in which case I might want to use a  comonad instead? but if I'm updating the state, then its more natural to be a monad?
07:27:08 <SyntaxPolice> it seems like you're usually going to pair "getting at the context" with an action of altering that context
07:34:50 <Heffalump> x .>> y = seq x y  - how?
07:34:52 <Heffalump> the types don't work
07:40:21 <cale> hmm... got that from the paper - that's right though.
07:41:03 <cale> perhaps its type should be w a -> w b -> w b
07:42:05 <cale> I think it probably should.
07:42:07 <Heffalump> that's the same as the type of monadic >>, which seems a little fishy
07:45:01 <cale> well it is called .>>
07:45:13 <Heffalump> true
07:47:51 <cale> yeah, I think I'm going to change it. It's not actually used in that paper - so I'm not sure how the author had intended it to be.
07:49:30 <cale> Also, given its description, its having type w a -> w b -> w b seems to fit.
07:58:44 <cale> hello CowGirl
07:58:52 <CowGirl> hey
07:58:56 <CowGirl> how are u?
07:59:20 <cale> I'm alright. How is studying going?
07:59:37 <sjj> hello ;)
07:59:55 <CowGirl> ok, got a bit to do though, been so tired lately....sleeping off this term!!  but will do a bit tonight
08:00:04 <CowGirl> study better late a night....just taking a break now
08:00:13 <cale> cool :)
08:06:41 <CowGirl> lilith
08:10:31 <jlouis> heh, me have Some compiler exam in 2 days
08:13:53 <Smerdyakov> you have Some yeah!!!!!1
08:14:09 <jlouis> heh
08:14:19 <jlouis> Some being in the later chapters of Appels book
08:15:25 <sjj> is it just me, or is the code used in http://www.abercrombiegroup.co.uk/~noel/research/monads.html formatted in such a way that makes it difficult to read?
08:16:38 <Riastradh> It looks fine to me.
08:17:02 <CowGirl> whats the command to leave a room?
08:17:09 <Smerdyakov> No problems for me.
08:17:11 <cale> CowGirl: /part
08:17:20 <CowGirl> thank u :)
08:17:31 <cale> no problem :)
08:17:44 * sjj shrugs. I just prefer it spaced out more I guess.
08:20:21 <jlouis> how do you compile .lhs files mangled with TeX?
08:21:03 <Igloo> Compile the code or the documentation?
08:22:10 <thornber> does anyone have time to answer a stupid question ?
08:22:18 <jlouis> the doc
08:22:22 <jlouis> the code is easy :)
08:22:40 <Igloo> That depends on what whoever wrote it intended, really
08:23:10 <Igloo> There are some tools on haskell.org for dealing with literate code
08:23:14 <jlouis> ok
08:23:25 <jlouis> I'll go look at them then
08:23:45 <thornber> http://people.sistina.com/~thornber/haskell/parser.hs
08:24:10 <thornber> can I nest 'do' like this ? and still refer to variables bound in higher level do's ?
08:24:31 <Smerdyakov> Try it and see?
08:24:46 <cale> thornber: I think that's what mdo is for - it's a recent extension.
08:24:48 <Igloo> Yes
08:25:01 <cale> (maybe)
08:25:16 <Igloo> Wow, small world - I just applied your dm patch  :-)
08:25:56 <Igloo> Oh, your <|> isn't aligned right, though
08:26:23 <Igloo> One more space does what I think you mean
08:27:53 <thornber> Igloo: I want the <|> to be an alternative to the second do, so I think it's in the right place
08:28:44 <Igloo> thornber: Does it work?
08:29:03 <thornber> with the extra space ? no
08:29:10 <Igloo> Without it?
08:29:16 <thornber> patch.hs:76: Variable not in scope: `n1'
08:29:41 <thornber> (I'm writing a tool to manipulate my large patchsets in case you were wondering)
08:30:09 <Heffalump> manipulate in what way, OOI?
08:30:33 <Igloo> Eww, nasty tabs
08:30:49 <thornber> factor out independent subsets, merge patches into a larger one etc.
08:31:54 <Igloo> thornber: Put the extra space in and put "read" before the n2
08:32:06 <thornber> cale: how recent is mdo ?  I can't find it in the haskell 98 report
08:32:31 <Heffalump> it's a recent extension that's only in GHC 6, IIRC
08:32:40 <Igloo> With the <|> aligned with the "n1 <-" it is treated as a separate statement from teh nested do
08:33:00 <thornber> Igloo: k, it loaded, but will it work ?
08:33:02 <Igloo> Whereas you actually want the statement (do ... <|> ...)
08:33:04 <Heffalump> from the conversation above, I don't think you need it, though
08:33:06 * Heffalump --> read the code
08:33:14 <Igloo> You don't need mdo
08:33:31 <cale> Perhaps I should have a look at what you're actually trying to do though :)
08:33:37 <Heffalump> no, you don't
08:33:48 <Heffalump> mdo is for when you want to refer to a variable bound *lower down*
08:33:57 <thornber> ah
08:34:04 <Igloo> And for sanity's sake change your tabs to spaces  :-)
08:34:11 <Heffalump> i.e. your monadic computation is recursive on a monadicly bound value
08:34:33 <thornber> I'm trying to parse either:
08:34:48 <thornber> <num>,<num>
08:34:52 <thornber> <num>
08:34:52 <Igloo> It works for me
08:35:14 <cale> yeah, what you have looks alright.
08:35:31 <thornber> y, I think I've hit another bug now (98000 lines into Marcellos last patch :)
08:35:54 <Igloo> cale: Well, it's wrong  :-)
08:35:56 <thornber> I still don't understand why I needed the extra space
08:36:13 <thornber> I tried to write:
08:36:32 <Igloo> thornber: Once you have a do not followed by a { you start implicit layout
08:36:41 <cale> Spacing drives me insane with parsec - I tend to just explicitly put in the braces and semicolons.
08:36:54 <Igloo> Statements are deemed to be starting in the same column as the next token, the first occurence of n1
08:37:03 <thornber> do {n1 <- num; do { n2 <- num; return (read n1, read n2)} <|> return (read n1, 0)}
08:37:32 <Igloo> So an implicit semicolon is inserted before any line starting with a token at that indentation
08:37:48 <Igloo> Including the <|> line
08:38:33 <Igloo> Indenting it one further puts it into the same statement as the nested do
08:39:25 <Igloo> Did that make sense?
08:39:39 <thornber> not quite, I'll have to think a while
08:39:48 <thornber> do char 'c'
08:39:55 <cale> Igloo: yeah, that helps me a bit. :)
08:39:58 <thornber>    <|> char 'b'
08:40:05 <thornber> works though ?
08:40:09 <Igloo> No
08:40:49 <Igloo> Oh, hmm
08:41:06 <thornber> http://people.sistina.com/~thornber/haskell/patch.hs
08:41:15 <thornber> see the lineType function
08:41:19 <thornber> (which works)
08:42:47 <Igloo> Oh, it's because of the parse failure rule - that is disgusting
08:43:05 <Igloo> I'm fairly sure it's being parsed as    do {char 'c'} <|> char 'b'
08:43:51 <thornber> oh
08:44:33 <Igloo> Yeah, from ghc -ddump-parsed parser.hs:
08:44:35 <Igloo> foo = (do char 'c') <|> (char 'b')
08:45:04 <thornber> k, I'll try switching to explicit braces
08:45:05 <thornber> thanks
08:45:15 <Igloo> I was wondering why you were getting an unbound variable rather than a parse error earlier, that explains it
08:49:15 <Igloo> That could probably be patched quite nicely by not allowing parse errors to close layouts where a semi-colon would otherwise be inserted. I don't think that would affect the circumstances in which it is useful
08:50:08 <thornber> oh, I understand, doh
08:50:15 <Igloo> Cool
08:51:05 * Igloo will give this some thought and might post the above suggestion to the list if I still think it makes sense
09:10:14 <thornber> it took ~1:30 to parse the 660 thousand line 2.4.21 patch :)
09:10:58 <thornber> which is pretty impressive IMO
09:12:33 <Heffalump> what kind of detail are you parsing it into?
09:15:58 <thornber> files,hunks,lines
09:16:04 <thornber> and storing them all in memory
09:16:19 <thornber> I think my pretty printer is probably takin gup a large amount of that time
09:16:28 <thornber> need to avoid lots of ++s ?
09:17:42 <Heffalump> you should avoid left-associated ++s
09:17:53 <Heffalump> ((x++y)++z)++.....
09:17:54 <Heffalump> is bad
09:18:01 <Heffalump> x++(y++(z++...)) is fine
09:18:20 <Heffalump> i.e. in general aim to add on to the beginning of a list, not the end
09:18:38 <Heffalump> if you find yourself adding to the end a lot, then add an accumulating parameter
09:18:40 <thornber> y, I'm using a lot of foldl1 calls ATM
09:18:49 <Heffalump> y?
09:19:15 <cale> y -> yes
09:19:20 <Heffalump> ah
09:20:45 <thornber> http://people.sistina.com/~thornber/haskell/patch.hs
09:20:55 <thornber> would you write showPatch differently ?
09:22:34 <Heffalump> how big can the strings produced by show o1, show o2, show n1, show n2 get?
09:22:59 <thornber> a few chars
09:23:07 <Heffalump> I think it's fine then
09:23:21 <thornber> cool, thanks
09:23:34 <Heffalump> note the "think", if you really care then profile it
09:23:42 <Heffalump> and check it's not quadratic in the size of the output
09:23:46 <thornber> y, I need to learn how to do that
09:27:10 <thornber> how do I get at the command line arguments ?
09:29:01 <Heffalump> getArgs
09:29:20 <thornber> thx
09:29:20 <Heffalump> there's a GetOpt module too
09:31:55 <thornber> which module is getArgs in ?
09:32:06 <Heffalump> System?
09:32:33 <Heffalump> not sure if that's still true in hierarchical module land
09:33:35 <thornber> I think that's right
09:35:07 <thornber> y, that works, thanks
11:21:48 <Vincenz> Hi!
11:21:59 <Riastradh> Hi!
11:22:03 * Vincenz grins
11:22:23 <mattam> hehe
11:22:29 <Riastradh> Hi, vgru732!
11:22:36 <Riastradh> Have you a Haskell question?
11:22:56 <Riastradh> (no, I'm not a bot, by the way)
11:23:05 * jlouis laughs
11:23:12 * Riastradh is just randomly enthusiastic.
11:23:15 * Riastradh bounces.
11:23:55 <keverets> a lot of haskell developers seem to be quite bouncy.
11:24:29 <Riastradh> Indeed.
11:24:31 * Riastradh sprounces.
11:24:48 * Riastradh sproings.
11:24:57 <Riastradh> My enthusiasm repels!
11:25:09 * Riastradh repels Vincenz to a corner of the channel.
11:25:10 <SyntaxPolice> hehe
11:25:25 * Vincenz frowns
11:25:39 * Riastradh explorbs and implorbs simultaneously.
11:25:48 * SyntaxPolice bounces out of the way
11:32:31 <CowGirl> whats the command to change my name?
11:32:46 <Riastradh> /nick
11:32:48 <Strike>  /nick
11:33:03 <Strike> or "hocus pocus"
11:33:13 <Strike> said out loud, of course
11:33:23 <CowGirl> not nick,  name,  after my isp info
11:33:43 <Riastradh> You mean the user bit in nick!user@host?
11:34:04 <Strike> there's no command for that that I know of (at least not in most IRC clients), you just have to set it in the IRC client settings
11:34:09 <CowGirl> yeah, that to.....but i mean the name at the end of the first line when u do whois
11:34:22 <Strike> ditto to what I just said for that too :)
11:35:03 <CowGirl> mine is something like XxXxXxXx now....im on mirc at the moment, but i also have bitchx, and i cant find the command for it
11:35:06 <Riastradh> You can't do that when connected to the server.
11:35:16 <Strike> yeah, that's set when you negotiate the connection
11:35:41 * Strike knows zilch about mIRC except that he didn't really like it for the little bit of time that he used it
11:36:01 <CowGirl> when i use bitchx it has my real full name, and i dont want it there
11:36:30 <Strike> well, either (a) don't use bitchx (irssi is better anyway), (b) look up the bitchx docs, or (c) leave it that way   :)
11:36:57 <Strike> eek, gotta go
11:36:58 * Strike is away: I'm busy
11:37:05 <CowGirl> i have no choice, i use it through university
11:37:31 <Riastradh> /set realname foo
11:37:33 <Riastradh> ...I think.
11:51:05 <Cowgirl2> how do i change the name before ....@host??
12:34:09 <SyntaxPolice> does anyone know why this isn't allowed:
12:34:11 <SyntaxPolice> f :: a -> [a] -> [a]
12:34:11 <SyntaxPolice> f x [] = []
12:34:11 <SyntaxPolice> f x = (:) x
12:34:24 <SyntaxPolice> both of the given functions have the same type, but different arities
13:05:03 <dennisb> SyntaxPolice: I would guess that it's hard to handle the pattern matching if you have such function definitions.
13:06:58 <SyntaxPolice> yeah
13:07:02 <SyntaxPolice> hm
13:09:55 <dennisb> also it looks ugly which is enough for me .-)
13:12:57 <SyntaxPolice> that case is pretty ugly, I agree. I don't know if it would always be ugly, though.
13:33:49 <dennisb> I can't think of any other reason then that it's ugly and that people don't want to write code like that. At least it can give you better error messages. My first thought about pattern matching obviously is not correct, it's not harder at all
13:46:58 <hdaume> hi all
13:47:09 <BlitzNL> hi hdaume
13:51:01 <BlitzNL> I am looking into polymorphic kinds. I implemented the kind inferencer and this works great on types that contain nothing but userdefined types and simple types like Int, Bool, etc which have kind * and [] which has kind (k -> *), but now I want to add arrow types to this and I was wondering what the kind of it should be. I first thought well this must be (* -> * -> *) but then I started doubting, maybe it should contain polymorphic kind variables to
14:02:19 <thornber> another silly question: I've imported Regex, yet I get errors like:
14:02:24 <thornber> patch.hs:182: Variable not in scope: `matchRegex'
14:03:19 <hdaume> you need to import Text.Regex or RegexString, I believe
14:03:45 <thornber> so I do, thankyou
15:59:58 * esap just noticed I've run into P=NP.
16:00:24 <Igloo> Hmm?
16:01:00 <esap> I've been thinking about how to build functions without lambda abstraction.
16:01:20 <Heffalump> S and K?
16:01:41 <esap> heffalump: heh, right, but those include lambda abstraction.
16:02:06 <Igloo> So where have you gone and how does this relate to the relationship between P and NP?
16:03:44 <esap> Well, the thing is, when I've thought about functions, the first idea was that I should just avoid variables and make several primitives that build very simple functions.
16:04:05 <esap> Then, combining those, you get the necessary power to compute.
16:04:42 <Igloo> That sounds like S and K to me
16:05:00 <Igloo> (as black boxes)
16:05:26 <esap> igloo: but the problem is, I want to restrict the power.
16:05:48 <esap> So that each primitive would have different expressive power.
16:06:35 <esap> And that you could then choose the one to use for each situation. So I've been looking at weak primitives.
16:07:14 <esap> Of course, you can look at complexity theory, and you should be able to find one primitive for each category of complexity.
16:08:17 <esap> Which would characterize the class, and prove exactly that much power.
16:08:28 <esap> s/prove/provide/
16:08:31 <Igloo> But if you give one as an argument to another then you could make something with higher complexity, no?
16:09:38 <esap> igloo: well it depends on how the argument was computed.
16:10:24 <esap> But you should also be able to restrict that. So typing must distinguish all different complexity classes from each other.
16:11:04 <esap> That would be what would be needed if I wanted to include lambda abstraction.
16:11:18 <esap> So I'm not doing that.
16:11:37 <Heffalump> you know about the work on implicit computational complexity?
16:11:45 <esap> I'm trying to find primitives for common classes of complexity, and understand which primtives match which complexity.
16:12:37 * Igloo wonders if not having done the complexity theory course is hindering my understanding
16:12:54 <esap> heffalump: I think someone mentioned it sometimes, but I don't now remember any details.
16:13:14 <Heffalump> I think the important paper is by Bellantoni and Cook from the early 90s
16:14:54 <esap> heffalump: "A new recursion-theoretic characterization of the polytime functions"? 
16:15:03 <Heffalump> sounds right
16:15:23 <esap> http://www.cs.toronto.edu/~sacook/homepage/ptime.pdf
16:22:05 <esap> Anyway, the reason I talked about P=NP is that I realized that once you introduce variables and lambda abstraction, you are basically providing everything that nondeterministic complexity classes offer (except that the user must make the "guessing", and it's not made automatically). and NP means that everything _but_ computing the argument happens in polynomial time.
16:24:38 <esap> no, I mean, you must be able to compute both the argument and the function in polytime. In P, only the function needs to be computed.
16:25:22 * esap is expressing things very badly right now :-(
16:27:06 <esap> Of course, this is essentially what everyone has been saying for a long time (NP relates very closely to oracles).
16:33:04 <esap> But it also means that I've been trying to solve the P=NP problem for a long time :-) No success so far :-)
17:05:46 * Strike is back (gone 05:28:48)
18:19:35 <Igloo> "http://icfpcontest.org for details -- and the tiniest little hint of this year's problem." </John Hughes>
18:19:50 <Igloo> With a "Rules of the Game" update
18:20:02 <Riastradh> What's the hint?  The image?
18:20:11 <Igloo> Not sure if it's in that or the update
18:20:34 <Igloo> Heh, if we do well I might win another copy of FoP  :-)
18:21:07 <Riastradh> Heh.
18:22:19 <Igloo> "This year you will run your entry on your own computer"
18:22:48 <Igloo> I'm sure that must be it
18:23:47 <Riastradh> That's kind of unfair -- what if, say, the #scheme team hasn't uberfast computers, while a Perl team does?
18:24:02 <Igloo> I imagine that's unimportant
18:24:30 <Igloo> It doesn't specify you need to be able to run it on a 'net connected computer, but that might be implied
18:29:09 <Riastradh> BOUNCE!
18:29:15 <Riastradh> Update your programming poem, shapr.
18:29:17 * shapr flops
18:29:24 <shapr> oh, the real deal is on demoncrat's journal.
18:29:34 <Riastradh> Oh.
18:29:36 <Riastradh> Where?
18:29:40 <Igloo> Seen John Hughes' ICFP mail, shapr?
18:29:42 <demoncrat> update how?
18:29:44 <shapr> http://darius.livejournal.com/
18:29:53 <shapr> Igloo: yes, that's much of why I showed up :-)
18:29:57 <Igloo> Heh
18:30:03 * shapr puts on his recruiting hat.
18:30:13 <Riastradh> Hmm.
18:30:13 <shapr> Ahem. who's up for the #haskell ICFP team?
18:30:23 * Igloo is puzzling over whether the own-computer thing is the hint and what it means
18:30:25 <shapr> demoncrat: are you already committed?
18:30:27 <demoncrat> maybe me.  maybe not
18:30:27 <Riastradh> Competetiveness will spring up here, I expect.
18:30:29 <Igloo> I'm already taken, I'm afraid  :-(
18:30:31 <demoncrat> shapr - no
18:30:33 * Riastradh is recruiting for a #scheme team right now.
18:30:36 <shapr> demoncrat: interested?
18:30:49 * shapr puts demoncrat on the maybe list
18:30:55 <Igloo> Riastradh: Boo, hiss
18:30:58 <shapr> tmoertel: hey, you awake?
18:30:59 <demoncrat> i answered joelle_van_dyne's call for a berkeley local haskell team
18:31:04 <shapr> oh!
18:31:05 <shapr> nifty
18:31:19 <demoncrat> dunno if i'll have time for this at all, though
18:31:20 <shapr> Binkely, aka Kirsten Chevalier
18:31:28 <demoncrat> binkely on irc?
18:31:32 <shapr> she got the first Riastradh tshirt too.
18:32:10 <Riastradh> Does it look good?
18:32:16 <shapr> I don't know.
18:32:21 <Riastradh> Damn.
18:32:37 <shapr> I assume it does, she didn't say anything.
18:32:42 <Riastradh> Ask her!
18:32:52 <shapr> ok
18:33:06 <shapr> so, who's up for a #haskell icfp team?
18:33:10 <shapr> I should put it into the topic.
18:33:16 <Riastradh> If it is, then I'll have to buy my own copy of it, and then someone can buy twenty of them (or more; I dunno how many will be there) for HW.
18:33:20 <Strike> when is the icfp anyway?
18:33:33 <demoncrat> way too soon.  couldn't they put it off a month or something? :)
18:33:35 * Strike is too lazy to look for it himself :p
18:34:03 <shapr> it's in 1.5 weeks.
18:34:10 <shapr> 28,29,30
18:34:37 <shapr> that's the contest at least.
18:34:37 <Strike> yipe
18:34:41 <Strike> well yeah
18:34:44 <shapr> not ICFP itself.
18:34:47 <Strike> that's what I was getting at :)
18:35:05 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/","GHC 6.0 pre-debs: http://people.debian.org/~igloo/","ghc rpms: http://haskell.org/~petersen/rpms/ghc/","looking for #haskell ICFP contest team members"]' by shapr
18:35:15 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","ICFP Contest http://www.dtek.chalmers.se/groups/icfpcontest/","GHC 6.0 pre-debs: http://people.debian.org/~igloo/","ghc rpms: http://haskell.org/~petersen/rpms/ghc/","contact shapr for #haskell ICFP contest team members"]' by shapr
18:35:21 <Strike> yeah I wouldn't be much use so count me out ;)
18:35:35 <shapr> well, I'm not so much use either, but how else do you get better? :-)
18:35:49 <shapr> I learned very much about Haskell during the last contest.
18:35:57 <Strike> well I'm not saying I won't poke about, but I'd hardly say that I'd be a "valuable team member"
18:36:10 <shapr> basically, Igloo and Heffalump did all the work and I was a cheerleader in the background ;-)
18:36:32 <Strike> yeah, I'm not even that good at cheerleading
18:36:33 <Strike> ;)
18:36:41 <shapr> I have very nice pom-poms.
18:37:00 <demoncrat> never heard them called that before
18:37:14 <shapr> My sister was a gymnast and cheerleader.
18:37:29 * shapr knows an embarassing array of cheerleader moves.
18:37:46 <shapr> oy, it nears 4am
18:37:48 <demoncrat> you ever do any cheerleader routines with 'sted?
18:38:08 <shapr> not anything preplanned.
18:38:29 <shapr> We did some cheerleading occasionally though.
18:39:02 * shapr sighs
18:39:50 <Strike> shapr: give me an S, give me an I, give me a G H S !!  what's that spell?
18:40:17 <shapr> SIGs ?
18:40:17 <demoncrat> glasgow haskell something
18:40:23 <Strike> hehe
18:40:46 <shapr> SuperCombinator Integrated Glasgow Haskell Something.
18:40:59 <demoncrat> supercalifragilistic
18:43:40 * Heffalump is taken for ICFP too, sorry
18:43:44 <shapr> ok, time to sleep. I'll be back to recruit more tomorrow.
18:43:58 <demoncrat> night shapr
18:46:19 <Riastradh> PFHOOM.
18:48:07 <Pseudonym> Is that an acronym?
18:50:19 <Riastradh> No, it's onomatopoeia.
18:50:44 <Pseudonym> Ah, OK.
18:50:56 <Riastradh> (damn ASCII for not having OE-ligatures)
18:51:54 <Heffalump> errm, doesn't it have to be a word to be onomatopoeia?
18:52:06 <Heffalump> just making up a random sound and typing it out isn't enough :-)
18:53:11 <Strike> well, most onomatopoeia words are just words that sound like what they describe anyway :)  the only thing that makes them more "official" is widespread use
18:53:15 <Igloo> Is "whoosh" not onomatopoeiac if you repeat some of the letters then?
18:55:04 <Pseudonym> Strike is correct.  What consitutes what is an English word and what isn't is consensus.
18:55:18 <Pseudonym> If enough people think "pfhoom" is a word, it is.
18:55:25 <Pseudonym> Personally I've never seen it used before.
18:55:29 * Heffalump neither :-
18:55:30 <Heffalump> )
18:55:47 * Heffalump has no particular desire to see it used again, either ;-)
18:56:30 <Pseudonym> Unless we can think of a good use for it.
18:57:00 <Pseudonym> I personally like the usage of the onomatopoeic word "plonk" to refer to the sound of someone being dropped in a killfile.
18:57:15 <Heffalump> yes.
18:57:22 <Pseudonym> Perhaps "pfhoom" could refer to the sound of an email being forwarded to a spam reporting agency.
18:57:27 <Pseudonym> Or something.
18:57:53 <Strike> hehe, I like that one
18:57:58 <Strike> or bounced back to the sender
18:58:03 <Pseudonym> Yes, perhaps.
18:58:23 <Pseudonym> If it's a word, it's desperately searching for a denotation. :-)
19:15:39 <Riastradh> No, it's the sound of a Pfhor exploding.
19:21:06 <steveh> Colony Ship For Sale, Cheap!
19:21:12 <steveh> Never Burn Money
19:21:31 <steveh> If I Had A Rocket Launcher I'd Make Someone Pay
19:22:05 <steveh> thanks for that trip down memory lane Riastradh
19:22:16 <steveh> and "pfhoom" is pretty accurate IIRC
19:22:26 <steveh> when hit with a grenade anyway
19:23:59 <lament> Pfhoom is the sound of a Macintosh being thrown out of the window.
19:24:28 <lament> followed by a loud JBINKLE!
19:24:44 <steveh> lament: there's no pfhoom for that.
19:24:51 <steveh> though the jbinkle is dead one
19:24:52 <steveh> er
19:24:54 <steveh> dead on
19:25:28 <steveh> "polycarbonate plastic is tough, eh?"
19:25:42 <steveh> "is it FOUR STORIES TOUGH? NO, HUH??"
19:26:22 <lament> "is it FOUR STORIES TOUGH? *pfhoom* .... *JBINKLE!* NO, HUH??"
19:26:46 <steveh> just the jbinkle
19:26:52 <steveh> it was an eerie quiet before impact
19:28:18 <Pseudonym> Like the soundsless syllable surrounding "AUM".
19:29:32 <lament> like the 'k' in 'know'!
19:31:51 <Riastradh> Ghoti!
19:48:19 <lament> Siouxeyesight!
19:48:35 <lament> Siouxeyesighed!
