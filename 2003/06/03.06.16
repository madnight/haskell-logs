01:19:44 <Marvin--> damn it seems hard to find much info on language-dependent text indexing *grmbl*
03:49:41 * seth is away: Off to the glue factory
04:06:55 * shapr boings
04:09:29 * cale pings
04:09:33 * shapr pongs
04:19:51 * Marvin-- grumbles
04:20:26 <shapr> oh, I think I really understood monads yesterday
04:20:39 <Marvin--> what do you mean "understood"?
04:20:42 <shapr> I want to try writing a network encoding monad today.
04:21:10 <shapr> as in, now I think I can design my own monads with very little trouble.
04:21:28 <Marvin--> I'm really annoyed by spending all that time on getting War3 to run in WineX just to find that it's really pretty, fast and everything - and crashes after three minutes
04:21:29 <Marvin--> aha
04:21:31 <shapr> I think I can finish TwistedHaskell now.
04:21:48 <shapr> Marvin--: that sucks :-( have you strace'd it to see why it's crashing?
04:21:54 <cale> shapr: what is TwistedHaskell?
04:21:57 <Marvin--> no, and it's not crashing, it's freezing
04:22:21 <shapr> cale: it's a plugin for Twisted, the server framework written in Python.
04:22:27 <shapr> I started it a looong time ago.
04:22:40 <Marvin--> so I have enough time to start a custom game, get my hero to level two and then it freezes :P
04:23:01 <Marvin--> (or start a campaign and start watching the cinematics)
04:23:29 <shapr> that sucks
04:23:50 <Marvin--> I'm impressed that I got that far, last time I used wine I couldn't do *anything*
04:24:00 <Marvin--> (granted, that was something like three years ago...)
04:25:02 <Marvin--> and right *now* I'm annoyed because I'm having difficulties finding out more about full-text indexing and querying
04:25:38 <kosmikus> shapr: what did you do yesterday that made you understand?
04:25:53 <shapr> kosmikus: I went through steve atkin's monadic interpreters
04:25:57 <shapr> in extreme detail
04:26:00 <cale> I should probably try winex - I can't get wine to do anything for me right now. I can't even run starcraft at a decent framerate. At one point I remember getting wolfenstein working alright - then the linux client came out for it so I didn't need it anymore.
04:26:32 <Marvin--> cale: WineX is what I used, compiled from cvs, SC runs just fine but I had some problems with sound effects
04:27:01 <Marvin--> War3 ran a lot better, but as I said, froze after about three minutes :-/
04:27:08 <cale> WineX isn't freely available though is it?
04:27:17 <Marvin--> the cvs version is
04:27:30 <cale> oh, cool - I'll have to check it out then.
04:27:42 <Marvin--> cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/winex co wine
04:28:00 <Marvin--> the biggest problem is that sf.net have serious hardware and/or bandwidth problems
04:28:19 <shapr> truly
04:28:30 <Marvin--> at one point I think I did something like    while ! cvs ... co wine; do sleep 1; done   and went for coffee
04:28:32 <shapr> that's one reason I want to try running darcs on haskell.org for haskell-libs
04:28:44 <shapr> Marvin--: hehe!
04:29:12 <steveh> we require more minerals
04:29:28 <Marvin--> steveh: dang, too few peons
04:29:43 <shapr> What is Nature's Call?
04:29:46 <cale> heh - looks like I might have to do that - strange too, as I've never had that problem with sf cvs - is this a new problem?
04:29:48 <shapr> Let me face the peril!
04:29:56 * shapr gives up on war3 quotes.
04:30:05 <Marvin--> the Dryad is by far the best :-)
04:30:19 <shapr> yah, she's great
04:30:23 <Marvin--> "I will now attract their attention with my human call: I'm so wasted, I'm so *wasted*!"
04:30:33 <shapr> oh, I haven't heard that 
04:30:36 * shapr laughs
04:30:38 <Marvin--> I think it's the last thing she says
04:30:41 <Marvin--> fire up worldedit
04:30:48 <Marvin--> and use the sound module :)
04:30:52 <Marvin--> (for us lazy bums)
04:31:05 <Marvin--> "Feel the Fearsome Fury of the Forest Faun!"
04:31:47 <Marvin--> the dreadlord is pretty good too
04:32:09 <Marvin--> "Oh hello Darkness...The Demonhunter called? No, I'm sorry, I don't have his number..."
04:32:16 <shapr> I like Tauren Chieftan, "hey, puff puff, pass pass"
04:32:31 <Marvin--> I never understood that one
04:32:43 <shapr> it's about smoking marijuana
04:33:19 <shapr> "I can see my ancestors!" <-- too much peace pipe
04:33:19 <Marvin--> oh
04:33:24 <Marvin--> yeah
04:33:44 <Marvin--> "This is not a dress! It's the standard Dread lord uniform!"
04:33:49 <shapr> heh
04:33:54 <shapr> "Dress to Kill"
04:34:01 <Marvin--> "For the last time, I'm a *Dread* lord, not a *drug* lord!"
04:34:21 <cale> one of the things that bothers me slightly about cvs is how it shows what it just downloaded, and not what it's currently downloading.
04:34:33 <Marvin--> hmm, I'm off for an errand, be back in half an hour or so
04:35:11 <cale> I suppose it makes sense, but it's nice to know whether the download is halted or if you're just getting something big.
04:35:25 <shapr> let's all switch to darcs
04:36:01 <cale> shapr: that's another versioning system?
04:36:08 <shapr> yup
04:36:17 <shapr> @fact darcs
04:36:17 <lambdabot> http://www.abridgegame.org/darcs/
04:36:54 <cale> sounds cool
04:37:13 <shapr> it is 
04:39:07 <cale> I love how the documentation contains theorems.
04:39:25 <cale> As a mathematician, I'd like to see more of that. :)
04:39:26 <shapr> patch theory is nifty
04:55:23 * cale just realised that patches very likely form a ring where multiplication is composition and addition is defined formally (can represent merger).
04:55:41 <shapr> ah, you're reading patch theory?
04:55:51 <shapr> I'm still convinced that in-repository refactoring would be spiffy
04:56:01 <cale> Just the stuff in the darcs documentation.
05:02:17 * Heffalump thinks darcs has the right idea about this
05:02:29 <Heffalump> I suspect a category is a more appropriate formalism, though
05:02:39 <Marvin--> the right idea about what? versioning or refactoring, or what?
05:02:40 <Heffalump> cos then patches are arrows and source are objects
05:02:47 <Heffalump> theory of patches
05:02:51 <shapr> Heffalump: you should tell that to David
05:03:02 <shapr> maybe he'll refactor everything to arrows
05:03:05 <shapr> that would be spiffy.
05:03:05 <Heffalump> that I think he has the right idea, or that it's a category?
05:03:13 <Heffalump> not Hughes arrows, Category Theory arrows
05:03:15 <shapr> oh
05:03:18 <shapr> I don't know the difference.
05:03:29 <shapr> though I read the discussion you and cale had.
05:03:45 <cale> Category theory arrows do seem more complicated.
05:03:46 <cale> less
05:03:57 <cale> er, depending on how you look at it
05:04:04 <Heffalump> less complicated, more general :-)
05:04:11 <cale> yeah
05:05:30 <cale> though I'm still not exactly sure what Hughes arrows are.
05:05:42 <cale> (In terms of category theoretic arrows)
05:08:06 <Marvin--> how annoying, aptitude and apt-get don't agree on the darcs debian repository
05:10:09 <Marvin--> @ Martin: the manual has things like "Theory of Patches"
05:10:09 <lambdabot> Sorry, I don't know the command "", try "lambdabot: @listcommands"
05:10:09 <Marvin--> @ Fredrik: Hmm. I'm not sure I want a manual to incorporate papers on patch theory :)
05:10:09 <Marvin--> @ Martin: I do :D
05:10:09 <lambdabot> Sorry, I don't know the command "", try "lambdabot: @listcommands"
05:10:09 <lambdabot> Sorry, I don't know the command "", try "lambdabot: @listcommands"
05:10:13 <Marvin--> argh
05:10:15 * Marvin-- kicks lambdabot
05:10:33 <Heffalump> why is Marvin talking with @s?
05:10:45 <Marvin--> lambdabot: haven't you ever been on the wizline of an LP mud, silly?
05:10:46 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
05:10:51 <cale> Because he pasted.
05:10:52 <Marvin--> Heffalump: because I'm quoting from our wizline
05:11:05 <Heffalump> ah
05:11:15 <shapr> hm, need to add "@ " command as ignore
05:11:51 <Marvin--> "The proofs and theorems given here are what I would call ``physicist'' proofs and theorems" heh
05:12:22 <Heffalump> it'd be interesting, but perhaps not hugely useful, to formalise it all
05:13:07 <Marvin--> I wonder how close patch algebra is to matrix algebra
05:13:19 <cale> Marvin--: It's pretty close.
05:13:53 <Heffalump> patches are partial functions.
05:14:06 <cale> It seems that patches form a ring where multiplication is composition and addition is branching.
05:14:23 <Heffalump> what useful information does this tell you?
05:14:56 <Marvin--> cool, there are bash-completion files for darcs
05:15:09 <shapr> I want emacs vc-minor-mode support
05:16:05 <Igloo> vc == version control?
05:16:09 <shapr> yup
05:16:22 <cale> Heffalump: I don't suppose that things like distributivity are that impressive, but I suppose they could be useful.
05:16:39 <shapr> lets me do C-x v = for diff from last version, C-x v v for checkin, etc etc
05:16:48 <shapr> cale: I think they rock for #haskell
05:16:59 <shapr> oh you mean associativity vs distributivity
05:17:11 <shapr> I was thinking of a non-centralized cvs for #haskell
05:18:00 <shapr> distributed cvs
05:18:00 <shapr> mmm
05:18:06 * shapr fights moshez
05:18:14 <cale> shapr: cool. yes I was talking about a(b+c) = ab + ac..
05:18:35 <cale> shapr: in #math?
05:18:43 <shapr> nay, in #twisted
05:21:02 <Marvin--> wow, darcs is only about 9k loc
05:21:08 <shapr> yes, want want!
05:24:19 <Marvin--> the patch system seems really nifty
05:24:26 <shapr> yes yes!
05:24:34 <Marvin--> "An example of this is the token replace patch. This feature make it possible to create a patch, for example, which changes every instance of the variable ``stupidly_named_var'' with ``better_var_name'', while leaving ``other_stupidly_named_var'' untouched. When this patch is merged with any other patch involving the ``stupidly_named_var'', that instance will also be modified to ``better_var_name''."
05:28:55 <shapr> see, I think that should be extended to full refactoring.
05:28:58 <shapr> hej andersca 
05:29:02 <andersca> hej hej
05:29:07 <shapr> vad gör du?
05:29:15 <andersca> jag sitter vid datorn
05:29:21 <shapr> det är bra
05:29:25 <shapr> jag också
05:29:27 <andersca> ja
05:29:31 <andersca> alan Ã¤r hÃ¤r
05:29:45 <shapr> vem är Alan?
05:30:06 <andersca> cox
05:30:10 <shapr> oh
05:30:14 <shapr> that alan.
05:30:20 <shapr> is he looking over your shoulder? :-)
05:30:31 <andersca> no, he's talking to some people
05:30:33 <shapr> whew
05:31:14 <cale> Considering the shape of the letter, j really does make more sense for "consonantal-i" than y does.
05:31:27 <shapr> yup
05:31:44 <shapr> but then you get into phonetics, and letters just suck at that anyway.
05:31:59 <shapr> Tolkien's system is better than latin-1
05:32:41 <cale> shapr: I agree, though it's not ideal for English, though it can be mapped fairly well.
05:32:47 <shapr> if the shape of the letter systematically corresponded to the mouth/tongue/lip/voiced parts of the sound
05:34:04 <shapr> cale: have you seen lojban?
05:34:58 <cale> The only real problem I had with the quenya/sindarin letters is the similarity of form tends to make them hard to read, though that might just be lack of familiarity. I remember seeing lojban on one of your pages iirc.
05:35:24 <shapr> I think you may be right about that actually.
05:35:46 <shapr> strong difference make letters easier to perceive separately.
05:36:34 <shapr> some of my experiments --> http://kungens.kemi.fi/~shae/emacstengwar.jpg
05:37:02 <cale> Yeah, you don't generally look at each letter to read a word, you just look at the shape of the word as a whole. sindarin tends to end up looking like a mass of bows and stems.
05:37:21 <shapr> speed reading is about looking at the shape of a line of text
05:37:56 <shapr> my eyes usually touch down twice on a line of text in a paperback book.
05:38:46 <shapr> on the other hand, lisp was much harder for me to read in the beginning than tengwar
05:38:52 <shapr> so maybe it is just practice, as you said.
05:39:58 <cale> heh, yeah, lisp ends up looking like a mass of parentheses :)
05:40:22 <shapr> I had trouble with lisp early on
05:40:27 <shapr> nowadays it's not so hard.
05:40:33 <shapr> I've written some elisp.
05:41:22 <shapr> I'd like to be able to write tengwar on my palm III
05:42:02 * shapr googles
05:42:36 <cale> I can't get used to emacs' keys enough to be able to stand using it. viper makes things a little better, but still not perfect. I like the concept of emacs, though.
05:46:13 <shapr> it has good points, I agree.
05:46:28 <shapr> imho, the only bad points are implementation specific.
05:46:57 <shapr> mainly, lack of multithreading and elisp suckage, as well as total spaghetti code in the implementation
05:46:57 <Marvin--> cale: that's what the acronym stands for
05:47:46 <shapr> other things I wish for in emacs, bind defuns to any input event (I can't bind to joystick buttons that I know of)
05:47:57 <cale> Marvin--: which acronym?
05:47:59 <shapr> oh, I had another thing I wanted. crap.
05:48:03 * shapr wonders what it was.
05:48:07 <Marvin--> cale: LISP, Lots of Irritating Silly Parentheses
05:48:29 <cale> heh
05:48:30 <shapr> so, let's write an emacs clone in Haskell that doesn't suck :-)
05:48:33 * Igloo yawns
05:48:38 <shapr> good morning Igloo!
05:48:46 <cale> shapr: that was my idea a couple months ago.
05:48:52 <Igloo> Wrong, wrong, right  :-)
05:48:59 * shapr grins
05:49:18 <shapr> oh, the other thing is that I can't use any key as a modifier
05:49:25 <cale> I haven't gotten very far with it, though I've been collecting ideas.
05:49:47 <shapr> for example, I can't say that pressing c and d at the same time is a specific key combo.
05:50:07 <shapr> I dunno if that's because of X though
05:50:23 <cale> It's also your keyboard.
05:50:26 <shapr> I wish I had hyper, super, and alt in the console also.
05:50:30 <shapr> it is?
05:50:37 <Igloo> Does anyone know what court secretaries use OOI?
05:50:58 <Igloo> They always look like some sort of chording keyboard on TV
05:51:04 <cale> Well, most keyboards are bad at recognising more than one key in a lot of conditions.
05:51:16 <shapr> I have a kinesis keyboard
05:51:29 <cale> (obviously modifier keys are kept orthogonal)
05:51:43 <shapr> http://www.kinesis-ergo.com/images/133-sml.jpg
05:51:49 <cale> You can configure X to give you meta hyper and super everywhere though.
05:51:53 <Igloo> I thought things tended to break down at 3-5 keys
05:52:12 <shapr> yup, I've remapped home and pgup to Super, and end and pgdn to Hyper
05:52:23 <cale> There's a couple of contidions where just two keys won't work, IIRC.
05:52:36 <shapr> and I've swapped shift_l and del
05:53:09 <shapr> means I can hit M-S-H-Sh-BS with one finger.
05:53:32 <cale> shapr: that's an interesting keyboard - by the looks of it, it's probably designed so that keys are orthogonal.
05:54:18 <shapr> my current theory is that humans are not koalas, so we should be using our thumbs for all modifier keys.
05:54:31 <cale> of course, the keyboard I want is http://screenshots.sourceforge.net/misc/SpaceCadet.html
05:54:52 <shapr> neat
05:55:01 <cale> That has to be the coolest keyboard of all time.
05:55:12 <shapr> I dunno, datahand is hard to beat
05:55:21 <shapr> but it's also a thousand bucks a hand
05:55:40 <shapr> kinesis is only three hundred or so
05:55:41 <cale> That's the keyboard Control, Meta, Hyper, and Super come from.
05:56:05 <shapr> datahand --> http://www.officeorganix.com/Data1.htm
05:56:18 <cale> It was used on the LispMs
05:56:43 <shapr> bah, I should be working.
05:56:48 <shapr> #haskell is too interesting.
05:57:19 <cale> #haskell - we need to actively try in order to not be interesting.
05:57:30 * shapr laughs
05:57:34 <shapr> truly
05:57:54 <mgoetze> cale: or we could just move the interesting bits to #go
05:57:56 <Igloo> I still love the idea of a paren-closing footpedal for LISP machines  :-)
05:58:12 <shapr> that's the case where whitespace is really hand
05:58:13 <shapr> y
06:00:41 <cale> What I want is a pointing device that's hooked into my brain. They've managed to actually get that to work - a gold probe was placed directly into someone's brain, and over some time period they managed to train it to control a mouse pointer.
06:01:46 <Igloo> How much can you do with a camera pointong at your eye and head position/orientation sensors?
06:01:49 <d-bug> cale: an extra eye or two would be nice
06:01:52 <Igloo> How precise, that is
06:01:57 <d-bug> "inner eye"
06:02:14 <d-bug> good for status screens :)
06:03:13 <cale> I'm not sure. The problem with eye-movement is that you don't necessarily want eye/head-movement to trigger motion. Though in some cases it's suitable.
06:03:45 <cale> I also really like the idea of two mouse user interfaces, which have met with some success in testing.
06:04:14 <cale> generally mouse+trackball, actually.
06:05:07 <cale> If you think about it, the class of actions that you can perform with 2 hands is generally much wider than the class of actions you can perform with only one.
06:05:58 <Igloo> Bah, making nice clean parsers that do what you want is tricky
06:06:19 <cale> Igloo: what are you using to make them.
06:06:20 <cale> ?
06:06:38 <Igloo> parsec
06:06:50 <cale> Oh, I was going to recommend it :)
06:07:04 <cale> I had a lot of fun with parsec.
06:07:44 <cale> Then again, I was doing fairly simple stuff with it.
06:09:37 <cale> Here's an idea - combine Perl with Haskell :) Use perl regular expressions for pattern matching :)
06:09:49 <Igloo> It's things like "A | B | A foo B" where A and B are complex. I think I'm going to end up with tupling what A and B return to pass them around
06:13:21 <cale> Igloo: make sure you're only trying A.
06:15:07 <Igloo> They are mutually exclusive
06:15:57 <Igloo> Ewww, ugly ugly ugly
06:16:31 <cale> Hm? It's a bit harsh if A is large.
06:16:44 <Igloo> But A starts with a keyword
06:17:03 <cale> But you have both A and A foo B in the same or.
06:17:24 <cale> It's only looking ahead 1 char if you don't use try.
06:17:33 <Igloo> Oh, what I wrote above is what you might have in a BNF-type specification. The actual code is far uglier
06:17:57 <Igloo> Using try I could make it prettier but inefficient
06:24:02 <andersca_> dennisb: ziigo ziigo
06:25:45 <cale> Heh, it appears that some lexer in the winex source not only doesn't compile due to "/ *" (with the space) appearing in a comment, but when this is removed and it compiles, the generated C contains some garbage characters that have to be removed by hand.
06:51:27 * Igloo gets a can't happen error. I swear it can't happen...
06:54:09 <Smerdyakov> I guess the compiler can't even understand English!
07:03:41 <Igloo> Oh, Parsec uses the initial state even if you never look at it or change it
07:05:51 <Igloo> That'll be because it's strict. Grr.
07:07:31 <Heffalump> does it use seq?
07:07:54 <Igloo> It uses ! in the datatype it stores it in
07:08:16 <Heffalump> ah
07:35:27 * Igloo gets confused by parsec errors
07:35:39 <Igloo> Which is annoying given I chose it because I thought it would make good error reporting easy
07:36:31 <Heffalump> I've heard Parsek is better
07:36:38 <Heffalump> what's this for, OOI?
07:36:45 <Igloo> Oh? I've never heard of that
07:36:53 <Igloo> A make-a-like
07:37:08 <Marvin--> Koen wrote Parsek 'cause he didn't understand the 'try' combinator ;)
07:37:10 <Heffalump> Koen Claessen wrote something like Parsek but improved slightly.
07:37:17 <Heffalump> IM like Parsec
07:37:19 <Igloo> lol
07:37:41 <Igloo> Where does it live?
07:38:04 <Igloo> Hmmm, not being in the hierarchial libraries would be slightly annoying
07:39:10 <Marvin--> I know we used it in the semantics course, gimme a sec
07:39:42 <Marvin--> http://www.cs.chalmers.se/Cs/Grundutb/Kurser/nasem/labfiles/haskell/
07:42:40 <Marvin--> he's written a funcpearl paper on "Parallel Parsing Processes" too
07:46:29 <Marvin--> well, I'm sure *Koen* understands the try combinator, but it seems he found it cumbersome, and I'm sure happy he implemented Parsek because *I* don't understand try ;)
07:47:18 <Heffalump> Igloo is an evil evil man.
07:47:45 <Igloo> Ta, Marvin
07:48:52 <Igloo> Does the parallel parsing do something like assume ;s separate decs and parse each one individually? Or parse all alternatives in parallel? Or what?
07:50:20 <Marvin--> I think it refers to +++ being unbiased
07:50:38 <Marvin--> but I don't know, it's been a while since I read it
07:50:51 <Igloo> +++?
07:51:00 <Marvin--> the parallel composition combinator
07:51:23 <Igloo> Of the parser or the parallel system?
07:51:58 <Marvin--> maybe it wasn't +++... In Parse[ck] maybe it's called <|>
07:52:18 <Igloo> Ah, right
07:52:21 <cale> If only parallel parsing was on the driver's test. :)
08:17:40 <steveh> hum
08:17:53 <steveh> wiki doesn't have a very big default dictionary :)
08:20:05 <Igloo> ?
08:21:22 <steveh> 932 words in it according to "Check Spelling"
08:21:31 <steveh> now 1021 after I added the ones I used
08:22:14 <steveh> heh, half the words (or more) in the dictionary are german anyway...
08:26:17 <Marvin--> hrm. How would I do a binary search over lines in a text file?
08:27:17 <Heffalump> sort it first, otherwise there's no point?
08:27:25 <Heffalump> or is it already sorted?
08:27:51 <Marvin--> well, obviously it would be sorted, and one word per line, but they are of varying length
08:28:23 <Marvin--> and seek only deals with byte offsets...
08:28:43 <Heffalump> just do the binary search on the byte offsets, and seek ahead to the nearest line break
08:28:45 <Igloo> You could make an index
08:29:10 <Marvin--> Igloo: this is *for* indexing ;)
08:29:18 <Marvin--> Heffalump: true, that'd probably be good enough
08:29:28 <steveh> that's the way to do it
08:32:45 <Heffalump> just be careful that you don't keep seeking to the same place when you get near the end
08:32:57 <Marvin--> hrrm
08:33:20 <SyntaxPolice> good morning
08:34:57 <Marvin--> oh look at the time, it's going-home time
09:04:42 * esap blinks.
09:05:01 <Igloo> If I want a set of children communicating witha single master thread, is GHC.Conc what I want?
09:07:15 <kosmikus> what about Control.Concurrent?
09:08:05 <Igloo> Ah, didn't spot that, ta
09:08:15 <esap> looks to me that GHC.Conc has basically the same things than Control.Concurrent, just differently divided to packages.
09:09:23 <esap> oh not so. GHC.Conc doesn't have Chan.
09:19:59 * esap just spent a lot of time playing with xfractint.
10:33:27 <Vincenz> holy cow, the ICFP is in a week or so
10:33:33 <Vincenz> I thought it was at the end of august
10:33:37 <Vincenz> :(
10:33:54 <Heffalump> yeah, s'a bit of a pain
10:34:32 <Vincenz> 30th is not a vacation day :(
10:34:34 <Vincenz> and I don't have a team
10:47:03 <SyntaxPolice> Vincenz: ? ICFP is at the end of august
10:47:12 <Heffalump> he means the contest
10:47:13 <SyntaxPolice> oh, the contest you mean
10:47:22 <SyntaxPolice> :)
10:47:34 <Vincenz> yeah
12:26:57 * Igloo looks unconvinced this can be done without blocking
12:29:22 <mgoetze> Igloo: non-blocking irc? nope, can't implement that on humans :)
12:29:45 <Riastradh> Vincenz, want to join the #scheme team?
12:29:55 <Igloo> mgoetze:  :-)
12:29:55 <Vincenz> hmm
12:30:01 <Vincenz> Riastradh: I would if I knew scheme :/
12:30:08 <Riastradh> Darn.
12:30:19 <Vincenz> I know that it's (func arguments)
12:30:19 <Igloo> mgoetze: Running processes as children which afterwards communicate with the parent
12:30:24 <Vincenz> and (lambda (arguments) body)
12:30:29 <Vincenz> that's about as far as my knowledge goes
12:30:38 <Vincenz> (well and cdr, car... and how to make structures)
12:31:26 <Igloo> i.e. if I make 2 children that use System.system or System.Cmd.rawSystem to sleep then the program takes the sum of the sleep times to finish
12:31:54 <Marvin--> ehhh
12:32:38 <Igloo> Marvin?
12:33:10 <Marvin--> Igloo: it just sounds strange that you'd have to wait for the sleep:s sequentially
12:33:59 <Igloo> I imagine the problem is that all the Haskell threads are in one Linux thread that blocks while other things are run
12:34:21 <Igloo> Oh, there might be some more useful stuff in the FFI spec thinking about it, I should look in there
13:13:43 <jlouis> 1-many threading model
13:23:10 <jlouis> hmmm, 1 question for haskell. How do you make a counter, that is a closure: inc :: unit -> int, with a side-effect that it increases its internal value. I assume that isnt possible, but how do you do it then?
13:23:11 <jlouis> I wonder how you make incrementing labels for compilers and the like easily
13:23:11 <Riastradh> It would have to be:   inc :: Num n => State n n
13:23:11 <jlouis> mmm, where State is a monad?
13:23:11 <Riastradh> And then:    inc = get >>= put . (+1)
13:23:12 <Heffalump> yeah, pretty much any monad with mutable references of some form
13:23:12 <jlouis> ah, good... so you have something that can capture state. That was one thing in order to begin coding haskell
13:23:12 <Riastradh> Mutable references?
13:23:12 <jlouis> I need to play with it. Too much SML programmer in me. I am becoming more and more interested though
13:23:12 <Riastradh> jlouis, gah, you needed to be able to mutate to write Haskell?!
13:23:12 <Heffalump> heh
13:23:38 <jlouis> Riastradh: nope, but passing counters around as arguments is in fact harder than the state capture IMO
13:24:00 <jlouis> Exceptions goes the same way? Monad capturing it?
13:24:05 <Heffalump> yep.
13:24:13 <jlouis> not that I fancy exceptions though
13:24:31 <Heffalump> either write your own monad that uses them, or use the IO exceptions that allow you to throw them in arbitrary functional code but only catch them in the IO monad
13:24:48 <jlouis> beautiful
13:27:48 <jlouis> is GHC still based on the STG-machine?
13:27:48 <Riastradh> jlouis, what code are you writing that requires mutable state?
13:27:49 <jlouis> Riastradh: new_label () = "label" ++ (show $ inc ())
13:27:49 <jlouis> or something like that
13:27:49 <Heffalump> ah, a namesuppl
13:27:49 <Heffalump> y
13:27:49 <Heffalump> standard problem with Haskell
13:27:49 <jlouis> yep
13:27:49 <jlouis> that is why I ask for a nice solution
13:27:49 <Heffalump> there is no nice solution, sadly
13:27:49 <jlouis> awww
13:27:49 <Heffalump> various options: use a monad that threads it around
13:27:49 <jlouis> yes, and?
13:27:49 <Heffalump> use a name supply that you can fork so that you don't force one particular order of evaluation just because of the way it's threaded around
13:27:49 <Heffalump> use unsafePerformIO (with great care)
13:27:49 <Riastradh> jlouis, for what do you need this label generator?
13:28:18 <jlouis> Riastradh: I was toying with writing a compiler for a small toy-lang as the first task in order to learn the stuff
13:28:42 <jlouis> handwritten lexer
13:28:49 <jlouis> some combinatorparser
13:29:08 <Riastradh> OK, so what's wrong with using monads for this?
13:29:14 <jlouis> oh, nothing
13:29:28 <jlouis> it is in fact the nicest solution I can see
13:29:57 <jlouis> unless you wish to pass the whole environment around...
13:30:28 <jlouis> the fun thing will be to write the register-allocator and stuff like that
13:30:28 <Heffalump> riastradh: the main problem is that it forces your computation to be sequentialised in a particular way
13:31:26 <Heffalump> e.g. if you want to walk over a tree with the name supply, you have to decide whether to do the left branch or the right branch first each time
13:31:28 <Heffalump> despite the fact that you don't really care which bit gets what names, as long as they're unique
13:31:31 <Heffalump> it also hurts laziness, because something might get evaluated *just to find out what the rest of the namesupply is*
13:31:52 <Marvin--> okay, now I'm interested, I use these namesupply monads all the time, keep talking ;)
13:32:31 <Heffalump> Marvin--: well, there's alternatives, but none of them pretty
13:32:40 <Marvin--> Heffalump: :/
13:32:41 <Heffalump> (the ones I mentioned above, basically)
13:32:50 <Marvin--> yeah, but I didn't understand the fork thingy
13:33:07 <Heffalump> ok, make a namesupply that's a lazy list of all possible identifiers, excluding ones that already occur in your program
13:33:18 <Heffalump> feed that down the tree you're rewriting
13:33:44 <Heffalump> if you get to two children (say), then fork the namesupply by splitting it in two, and give one half to each child
13:33:47 <Marvin--> and when I recurse, split the list by alternating?
13:33:50 <Heffalump> indeed.
13:33:54 <Marvin--> smart
13:34:03 <Marvin--> but I don't see how to encapsulate it in a monad though :-/
13:34:04 <Heffalump> at the bottom, just throw it away
13:34:14 <Marvin--> gotta love lazy lists
13:34:25 <Heffalump> look at how random number generators get encapsulated, that might give a hint
13:34:34 <Marvin--> okay, thanks
13:34:48 <Heffalump> you can't encapsulate it in one monad per se, because monads inherently impose some kind of sequencing
13:34:51 <jlouis> ah, now... this is interesting
13:34:53 <Heffalump> oh, hmm, maybe that's not true
13:34:55 * Heffalump thinks about it
13:35:33 <Marvin--> I guess we need commutative monads
13:35:37 <Marvin--> but "commutative state monad" is something of a contradiction .)
13:35:49 <jlouis> heh ;)
13:35:49 <Heffalump> it's not a state monad, though
13:35:54 <Heffalump> or at least, it doesn't have to be
13:35:55 <Marvin--> no, I know, but that's what you usually use
13:36:16 <Heffalump> I guess you could write a monad where >>= did a fork
13:36:28 <Heffalump> the problem with forking is that you really waste a _lot_ of names
13:36:35 <Heffalump> so you end up with insanely long ones very fast
13:36:35 <Marvin--> that could give me seriously sparse naming
13:37:02 <Heffalump> well, a final threaded renaming pass starting from scratch is possible to clean up afterwards
13:37:03 <Marvin--> it's an interesting problem
13:37:53 <Heffalump> and don't automatically rule out the unsafePerformIO route, it's actually a reasonable option if used carefully
13:38:01 <Marvin--> I know
13:38:21 <Marvin--> but I don't know enough about it to use it comfortably
13:38:24 <Heffalump> though it does seriously violate referential transparency, even if you say "I don't care what the identifiers are as long as they're different"
13:41:01 <jlouis> the worst problem is that a namesupply is needed in all phases of a compiler all over the place. You cannot just fire the cannon once
13:41:39 <Heffalump> sometimes you end up with an uber-monad that does lots of other stuff for the compiler too (e.g. type checking)
13:43:17 <Marvin--> that's when monad transformers come in handy
13:45:22 <Marvin--> the forking thing is what rng monads do, right? 'cause then the inflation doesn't matter
13:45:50 <Heffalump> I think so, I forget quite how it works.
13:46:28 <Marvin--> ah, yep, that's how quickcheck does
13:47:02 <Marvin-->   Gen m >>= k = Gen (\n r0 -> let (r1,r2) = split r0
13:47:02 <Marvin-->                                   Gen m'  = k (m n r1)
13:47:02 <Marvin-->                                in m' n r2)
13:47:23 <Heffalump> right
13:47:38 <Marvin--> (where n is the size parameter, it doesn't have anything to do with the rng)
13:48:06 <Heffalump> doing that with a namesupply would have the rather ironic effect that even just asking for a fresh name would cause a split supply to be created and then thrown away for the purpose of generating that name
13:48:19 <Marvin--> yep :-)
13:48:53 <Heffalump> I wonder if one could use Arrows to provide a static estimate of how many names would be needed
13:49:15 <Marvin--> now you're way out of my league
13:49:29 <Marvin--> I should get into arrows One Of These Days
13:49:38 <Marvin--> heck I even have a paper copy of John's paper on it
13:49:52 <Heffalump> heh
13:50:24 <Marvin--> I found it lying around at the institution and thought "wow, what a cool title" (this was way back when I had a very fuzzy concept of monads)
13:50:47 <Marvin--> I told him that at the PhD position interview when he asked if I could name any particular papers that had made an impact on me
13:50:54 <Marvin--> we had quite a laugh about that
13:56:57 <jlouis> Marvin--: John Hughes is your advisor?
14:07:24 <Marvin--> jlouis: no, I didn't get a PhD position :-/
14:07:44 <Marvin--> so, uh, nobody here's going to apply for the CoVer postdoc position?
14:08:16 <Heffalump> if I needed a job, I'd be tempted
14:08:28 <Marvin--> heh
14:08:36 <Heffalump> what are rents like in Goteborg, OOI?
14:08:50 <Marvin--> I can't tell, really, I'm living in a student flat
14:09:46 <Heffalump> I wasn't that impressed by the salary, even if it is tax free, but I guess it all depends on rent
14:12:51 <Marvin--> for a two rooms flat, anything between 300 eur and 500 eur for a decent appartment I guess
14:13:08 <Heffalump> ah, a lot cheaper than here then :-)
14:13:18 <Marvin--> but don't trust me ;)
14:13:36 <Heffalump> well, I don't actually care since there's many other reasons I'm not applying :-)
14:13:44 <Marvin--> right :)
14:13:47 <Heffalump> I was just trying to get a rough feel for the difference
14:14:03 <Heffalump> I think with that rent difference and the tax-freeness the salary is about equivalent to what I get now
14:14:28 <Marvin--> well, the flats I'm looking at right now are probably pretty far out, something more central will cost more
14:14:42 <Heffalump> well, I cycle about 4 miles to work atm
14:14:58 <Heffalump> though central is better when you don't know anyone
14:15:13 * Marvin-- lazily starts 'units'
14:15:23 <Heffalump> 6km
14:15:31 <Marvin--> yeah :)
14:15:54 * Marvin-- tries to get a feel for what 6km means för Göteborg
14:17:06 <Marvin--> right, I guess it's not that much of a distance really, but it sure feels more here since there's a looot of uphill
14:17:23 <Heffalump> heh
14:17:41 <Marvin--> I have about 3km to my summer job, and something like half that to the institution, but it takes roughly the same time
14:18:54 <Marvin--> and for what it's worth, the PhD student salaries are 18k SEK before taxes :-/
14:19:11 <Heffalump> per year?
14:19:24 <Igloo> How many SEK are a UKP?
14:19:26 * Heffalump decides that's not possible
14:19:38 <Marvin--> er, per month
14:19:38 <Heffalump> about 13, I think
14:19:49 <Heffalump> how much is that after tax?
14:19:51 <Marvin--> 100 SEK is about 11 eur
14:20:03 <Marvin--> I don't know since I didn't get a position ;)
14:20:10 <Igloo> Mmm, that's 50% more than me then  :-/
14:20:14 <Igloo> But mine is untaxed
14:20:21 <Marvin--> but I'm guessing something like 8k will go to taxes
14:20:31 <Heffalump> ouch!
14:20:38 <Heffalump> that's a ridiculous amount of tax
14:20:39 <Igloo> Wow, that would make it the same as mine
14:20:39 <Marvin--> socialist country and all
14:20:56 <Marvin--> what I mean is that 16k SEK after tax is quite a lot
14:21:17 <tic_> yeah
14:21:55 <Heffalump> well, currently I get 24k UKP/year before tax (roughly 27k including the extra teaching I do)
14:21:59 <Marvin--> as John put it, you can live "quite comfortably" on it ;)
14:22:22 * Heffalump has this saving up to buy a house issue too, though
14:22:30 * tic_ has 6772 sek/month to live on.. *grmbl*
14:22:44 <Marvin--> tic_: so do I
14:22:45 <Igloo> What are you, tic?
14:22:54 <Marvin--> a student, I'm guessing ;)
14:23:01 <Igloo> UG, though?
14:23:02 <tic_> Igloo, student at chalmers university of technology
14:23:07 <tic_> Igloo, yeah
14:23:15 <tic_> Igloo, this is 2k from the gov't and 4k loan
14:23:17 <Marvin--> but that's 6k7 tax-free
14:23:21 <tic_> yup
14:23:26 <Marvin--> and the best damn loan you'll ever ever ever get
14:23:41 <Marvin--> I prefer to see it as an investment
14:23:46 <Igloo> I think I had a loan of about 3k SEK/month when I was an UG
14:23:56 <tic_> yeah
14:23:56 <tic_> I don't really care about the loan
14:23:58 <Igloo> Oh, no, more like 8k/month
14:24:09 <tic_> as I can't do anything to not loan
14:24:22 <tic_> Igloo, the loan, or the gov't money?
14:24:37 <Igloo> tic: Nothing was given to me, just an 8k loan
14:24:38 <tic_> Igloo, or don't you get any gov't money?
14:24:44 <tic_> jikes. tough.
14:24:54 <tic_> Igloo, plus you pay for the education itself?
14:24:54 <jlouis> mine is about 8k5,9k
14:25:10 <jlouis> not govt money though, work half the time
14:25:21 <Heffalump> fees are about 13K SEK/year - only about 1/6th of the real cost
14:25:27 <Igloo> Paid about 10k SEK per year tuition fees (or rather my parents did)
14:25:55 <Igloo> Oh, maybe it was more than I remember
14:26:06 <Heffalump> well, > 1K UKP/year
14:26:06 <Marvin--> education's free in Sweden, you only have to pay for course material
14:26:23 <Marvin--> (not that good books are cheap...)
14:26:32 <tic_> yeah, but still better.
14:26:36 * Igloo is on about 11k SEK / month now, I think
14:27:03 <Heffalump> sounds like you make up for it in taxes, though :-)
14:27:04 <Marvin--> tic_: helluva lot better :) plus, at maths and compsci we're a lot cheaper off than at other institutions
14:27:17 <Marvin--> *shrug* it's the Swedish Way I guess, I don't mind it at all
14:27:24 <tic_> me neither
14:27:24 <Marvin--> the tax money is spent on Good Things
14:27:31 <tic_> yeah, often anyhow.
14:28:07 <Marvin--> yeah, there's the defence wasting money and things like that, but otherwise...
14:29:10 <Marvin--> I mean, they've got ranking officers with stars and stripes and stuff who make decisions about things they don't have a *clue* about, *of course* it's a waste of money
14:40:25 <Marvin--> yay, Futurama
15:26:48 <kosmikus> good evening, everyone
15:29:48 <Heffalump> hi
15:29:57 * Heffalump plays with Arrows syntax
15:32:45 <kosmikus> nice
15:33:44 <kosmikus> I'd like to do that, too, but I haven't found the convincing motivation to use arrows yet ...
15:34:02 <Heffalump> we were just discussing name supplies
15:34:33 <Heffalump> I talked about having a name supply monad that forks the name supply on every >>=, and mentioned how wasteful of names that would be
15:35:13 <kosmikus> aren't there enough names? ;)
15:35:14 <Heffalump> then it occurred to me that an arrows implementation could try to keep a static count of how many names an arrow needed (0,1,2,3,more) or something
15:36:22 <kosmikus> yes, might be possible
15:36:28 <kosmikus> did you succeed?
15:36:59 <Heffalump> just doing it now
15:37:09 <Heffalump> I think it's easy enough, I just need to learn how to write an arrow :-)
15:40:34 * Vincenz waves sleepily
16:26:29 <shapr> ahem. we will now sing the national anthem.
16:26:47 <Riastradh> Of what nation?
16:26:49 <shapr> o/~ referential transparency, oh how we love thee o/~
16:27:28 <shapr> I probably should think up lyrics beforehand.
16:27:35 <Igloo> Have you got a tune then?
16:27:44 <shapr> no, that was completely spontaneous.
16:27:56 <Igloo> We'll need some music combinators, of course
16:28:00 <shapr> but we could easily write something with Haskore =)
16:28:06 <shapr> we already have music combinators!
16:28:11 <Igloo> Excellent!
16:28:13 <shapr> Haskore is easy and simple to use.
16:28:27 <Riastradh> Do we have monadic music combinators?
16:28:32 <shapr> no, not really.
16:28:44 <shapr> Haskore is pure as the wind-driven snow.
16:28:58 <Riastradh> Monads aren't pure?
16:29:00 <Riastradh> !?
16:29:00 <kosmikus> why does everything have to be monadic?
16:29:01 <Riastradh> ?!
16:29:05 <shapr> ok, monads are pure.
16:29:15 <shapr> but in their heart, monads are dirty little critters.
16:29:21 <Igloo> kosmikus: To confuse the non-elite
16:29:27 <esap> kosmikus: not everything. Just anything that requires putting two things in sequence.
16:29:30 <shapr> right, monads are our claim to eliteness.
16:29:34 <kosmikus> that's possible without monads ;)
16:29:49 <Igloo> Otherwise we'd have perl programmers going around understanding Haskell code, and that would never do
16:29:50 <shapr> monadic tribes roaming the internet...
16:30:00 <shapr> right, exactly
16:30:05 <shapr> it's no fun if everyone can do it.
16:30:15 <shapr> actually, that's not true.
16:30:21 <shapr> sex is an excellent counter example.
16:30:29 <kosmikus> well, use rank-n polymorphic / extistential types then ...
16:30:47 <shapr> my types barely rank as privates.
16:31:08 <shapr> do existential types contemplate their navel for long periods?
16:36:10 <shapr> hm, any programming languages start with M ?
16:36:37 <cale> Also, we should only give those people this definition of monad: http://planetmath.org/encyclopedia/Monad.html
16:37:03 <polli> shapr: ML
16:37:06 <shapr> oh, right
16:37:14 <shapr> though I've been thinking about MLISP instead...
16:37:16 <shapr> hmm
16:37:45 <shapr> now I have to come up with something for N
16:37:50 <esap> how about this definition: http://www.newadvent.org/cathen/10447b.htm ? :-)
16:39:05 <cale> heh - give them both as "examples of what we mean"
16:39:41 <kosmikus> M: Modula
16:39:53 <Riastradh> shapr, Miranda, foo.
16:39:56 <shapr> oh right!
16:39:58 <Riastradh> N...hmm...
16:40:02 * shapr cackles happily
16:40:10 <shapr> I'm down to T now.
16:40:20 <cale> tcl
16:40:23 <kosmikus> TeX
16:40:25 <Riastradh> Yuck, no.
16:40:26 <shapr> oh, thanks :-)
16:40:27 <Riastradh> Yeah, use TeX.
16:40:47 <Riastradh> Another M -- Malbolge.
16:40:50 <esap> shapr: what are you writing?
16:40:54 <shapr> how do you say Knuth anyway, "nuth" ?
16:41:03 <polli> http://99-bottles-of-beer.ls-la.net/
16:41:04 <shapr> esap: someone sent me the beginnings of a poem about programming languages
16:41:11 * Riastradh has always said 'k'nooth.'
16:41:12 <shapr> and I've gone out of control :-)
16:41:19 <shapr> kuh-nuth ?
16:41:39 <Riastradh> Very little emphasis on the sound after the 'k.,'
16:41:43 <Riastradh> s/,//1
16:41:45 <kosmikus> shapr: http://www2.latech.edu/~acm/HelloWorld.shtml
16:41:48 <shapr> a small glottal stop, eh?
16:41:59 * Riastradh 's typing has been getting worse and worse lately...hmm...
16:42:00 <shapr> kosmikus: nice, thanks
16:42:01 <Riastradh> Maybe it's my keyboard.
16:42:05 <shapr> get a kinesis!
16:42:19 <shapr> I think "O is for Oberon, whatever that's Wirth" is relatively cute.
16:42:20 <Igloo> :-)
16:43:00 <shapr> how do you rhyme with emblems?
16:43:05 <Riastradh> You don't.
16:43:06 <shapr> get another word? :-)
16:43:10 <Strike> with slant rhyme
16:43:30 <Igloo> http://directory.google.com/Top/Computers/Programming/Languages/ has a reasonable list
16:44:00 <Riastradh> WHAT!?!?!?!?  THEY PUT XML THERE!?!!
16:44:04 * Riastradh explodes.
16:44:09 <Igloo> I was thinking that  :-)
16:44:25 <Igloo> Just pretend they meant XMLscript or somesuch
16:44:30 * Riastradh explodes again and again.
16:44:32 <Riastradh> GAH!!!
16:44:33 <Riastradh> HTML TOO!
16:44:37 <shapr> there really is an XML programming language.
16:44:42 <shapr> I know the guy who wrote it.
16:44:51 <shapr> just an acquantance mind you
16:44:55 <shapr> I try to stay away from him.
16:45:00 <Strike> Postscript is a turing-complete language too
16:45:07 <Riastradh> Sure, languages with an XML syntax, but XML IS NOT A PROGRAMMING LANGUAGE!
16:45:08 <shapr> yah, I've seen the raytracer.
16:45:12 <Igloo> A company near here develop XML script
16:45:36 * Riastradh implodes.
16:45:41 <cale> XSLT is sort of like a functional language that supports none of the functional programming idioms.
16:45:44 * shapr XMLPLORBS
16:46:00 <shapr> cale: right, but it's not nearly as cool as you describe ;-)
16:46:09 * kosmikus cataplorbs
16:46:10 <shapr> actually the functional toolkit for XSLT makes it mor efun.
16:46:20 * shapr anaplorbs
16:46:29 <cale> heh - I wasn't trying to make it sound cool, but whatever :)
16:46:36 * kosmikus hyloplorbs
16:46:58 * cale endoprorbs
16:46:59 <shapr> gee, you win the plorbing contest.
16:47:06 * shapr has run out of greek prefixes.
16:47:09 <cale> s/pro/plo/
16:47:18 * kosmikus homeoplorbs
16:47:18 <cale> I can think of some others.
16:47:43 * cale isoplorbs
16:47:50 * kosmikus epiplorbs
16:49:27 * cale monoplorbs
16:49:34 <shapr> wow, there was a proglang named vulcan
16:49:42 <shapr> logical concurrent objects.
16:49:47 * kosmikus paraplorbs
16:49:56 * shapr metaplorbs
16:50:42 * esap cataplorbs
16:50:57 * shapr hyperplorbs
16:51:23 <kosmikus> cata has been used already ;)
16:51:25 * Strike polyplorbs
16:51:31 * kosmikus diffeoplorbs
16:52:01 <shapr> what's that one?
16:52:02 * Strike autoplorbs
16:52:46 <shapr> hm, what proglang starts with Y ?
16:53:30 <Strike> http://directory.google.com/Top/Computers/Programming/Languages/YAFL/   YAFL?
16:53:35 * shapr decides it stands for a combinator
16:54:03 <kosmikus> diffeomorphism: huh, its a map between differentiable manifolds that is bijective; additionally, the map and its inverse both have to be differentiable ...
16:54:22 <kosmikus> I remembered the word, but I just looked up the definition again
16:54:37 <shapr> what's bijective? it sounds like people sharing needles ;-)
16:55:01 <kosmikus> bijective is both one-to-one and onto
16:55:09 <Strike> bijective == both injective and surjective, iirc
16:55:15 <kosmikus> that's the same
16:55:19 <Strike> just don't ask me what either of those mean
16:55:23 <Strike> :)
16:55:27 <shapr> heh
16:55:47 <kosmikus> injective: f(x) == f(y) ==> x == y
16:56:36 <kosmikus> surjective: if f :: A -> B and b `elem` B, then there exists an a `elem` A with f(a) == b
16:57:06 <kosmikus> i.e. all points in the target type are actually in the image of the function
16:57:07 <shapr> that sounds relatively easy to satisfy.
16:57:24 <cale> shapr: yes, many functions do these things
16:57:27 <kosmikus> yes -- for many structure bijective is equivalent to isomorphic
16:57:36 <kosmikus> s/structure/structures
17:00:45 <shapr> this poem needs help.
17:02:57 <Igloo> What's the word for how "foo.*" matches foobar better than "f.*"?
17:03:03 <Igloo> Something like more precise, but different
17:03:21 <shapr> any comments? --> http://kungens.kemi.fi/~shae/progpoem.txt
17:03:28 <shapr> greedy matching
17:03:58 <shapr> largest match rule?
17:04:06 <Igloo> Nah, I want to say "foo.*" matches more somethingly
17:04:32 <shapr> tightly? :-)
17:04:43 <Igloo> Gnu isn't a language is it?
17:04:47 <shapr> no, not really.
17:04:56 <shapr> but look at the speed with which they produce kernels.
17:05:05 * Igloo looks confused at J and K
17:05:18 <shapr> they're array op languages
17:05:24 <shapr> very dense and concise
17:05:32 <shapr> I didn't really enjoy them though.
17:05:38 <Igloo> Oh, I see what you mean
17:05:57 * Riastradh impluboplorbs.
17:06:17 * shapr exoparametaplorbs!
17:06:23 <Riastradh> HEY!
17:06:27 <Igloo> Get rid of "for" in the Y line
17:06:36 <Riastradh> Dylan is neither totally dead nor closed source!
17:06:54 <shapr> hey demoncrat!
17:07:03 <demoncrat> hey there
17:07:04 <shapr> what did you think of the bits I added?
17:07:15 <demoncrat> some of them were great :)
17:07:17 <Riastradh> Hi.
17:07:26 <demoncrat> howdy
17:07:53 <shapr> which parts do you like?
17:08:12 <demoncrat> mlisp which nobody uses
17:08:18 <shapr> :-)
17:08:34 <shapr> reference to the m-expressions of course
17:08:38 <demoncrat> right
17:08:40 <demoncrat> i'll post all that to my blog if you don't mind
17:08:43 <kosmikus> bye
17:08:45 <shapr> I don't actually know what they look like, or how they work
17:08:50 <shapr> sure, yeah
17:08:51 <Riastradh> Boy, those m-expressions really took off!
17:08:54 <demoncrat> heh
17:09:14 <demoncrat> especially since i invented another thing called mlisp that nobody uses either
17:09:16 <shapr> I should post to my blog.
17:10:09 * Riastradh is reminded of an Edward Gorey poem.
17:10:22 <demoncrat> b is for boris, who fell down some stairs :)
17:10:27 <demoncrat> or something
17:10:42 <demoncrat> a is for amy, actually
17:10:45 <shapr> boris?
17:10:59 <demoncrat> b is for b----, captured by bears
17:11:14 <Riastradh> B is for Basil, assaulted by bears.
17:11:24 <Riastradh> C is for Clara, who wasted away.
17:11:25 <demoncrat> shapr - um... the gashleighcrumb tinies
17:11:37 <Riastradh> D is for Desmond, thrown out of a sleigh.
17:11:42 <Riastradh> E is for Ernest, who choked on a peach.
17:11:48 <Riastradh> F is for Fanny, sucked dry by a leech.
17:11:51 <demoncrat> you have it all memorized?
17:12:04 <shapr> oh, I've heard of those.
17:12:06 <Riastradh> No, I have it right in front of me.
17:12:12 <shapr> Riastradh was talking about them recently.
17:12:19 <Riastradh> I had the Doubtful Guest memorized, but that's it.
17:12:21 <shapr> sounds sort of like writing intercal for fun.
17:12:33 <demoncrat> the curious sofa is a good one
17:12:47 <shapr> demoncrat: are you distributing your images for download?
17:12:49 <Riastradh> But Edward Gorey's works don't work without the pictures.
17:12:56 <demoncrat> riastradh - yeah
17:12:58 <shapr> I could host a tbz if you want.
17:13:01 <Riastradh> What's the RPG line about?
17:13:14 <shapr> you know about RPG the reporting language?
17:13:17 <Riastradh> No.
17:13:18 <demoncrat> shapr - i'd like to sell high-res prints, actually
17:13:27 <shapr> yah, hires prints would be great.
17:13:35 <shapr> Riastradh: you're so lucky.
17:13:40 <demoncrat> rias - ignorance is bliss, in this case
17:13:42 <Igloo> shapr: You can have functionally equivalent functions built from S and K which are structurally different
17:14:00 <Riastradh> Has anyone received an HM t-shirt yet?
17:14:01 <shapr> I was exposed to RPG soon after I learned BASIC on a Sinclair.
17:14:26 <demoncrat> i had a coworker who brought me an rpg listing from a previous job
17:14:31 <demoncrat> it was pretty amazing
17:14:36 <shapr> It seemed strange to me that putting certain chars in certain columns made such a huge difference.
17:14:55 <demoncrat> hm, I wanted to use P is for Perl's postmodern perversity
17:15:00 <demoncrat> but don't see a rhyme
17:15:20 <shapr> monstrosity
17:15:28 <shapr> no
17:15:29 <shapr> that sucks
17:15:35 <shapr> tersity ? :-)
17:15:39 <demoncrat> oh, good idea
17:15:55 <shapr> fancy buckle is great.
17:16:01 <demoncrat> thanks
17:16:40 <demoncrat> how much do you think prints should cost?  i could get my brother to make some on high-quality paper
17:17:29 * Riastradh doesn't like the Haskell one.
17:17:41 <shapr> I don't know.
17:17:50 <shapr> I price things in Kronor nowadays
17:18:00 <demoncrat> G is your feeling on learning new lingos;
17:18:00 <demoncrat> H is for Haskell, a lingo for gringos.
17:18:04 <demoncrat> :)
17:18:41 <shapr> I know I would want the entire series of prints.
17:19:04 <demoncrat> oh, cool.  i wish now that i hadn't made them all square.
17:19:48 <Riastradh> G should have Goedel!
17:20:06 <esap> wasn't there some language in GEB that started with G?
17:20:08 <demoncrat> G is for Godel on which there's a book
17:20:18 <Riastradh> H is for Haskell...er...um...something...ook.
17:20:29 <Riastradh> esap, yes, Goedel.
17:20:34 <Riastradh> It's another logic language.
17:20:37 <demoncrat> floop, bloop, something
17:20:39 <shapr> H is for Haskell and effects we forsook
17:20:50 <demoncrat> yeah, i used to have the book on it.  never heard of anyone actually using it, though.
17:21:05 <Riastradh> Nah...
17:21:31 <Riastradh> G is for Goedel, completely ignored; H is for Haskell, whose monads many bored.
17:21:39 * shapr cackles happily --> http://www.accesscom.com/~darius/gallery/
17:21:48 <demoncrat> yup
17:22:06 <shapr> the sybase logo is pretty cool.
17:22:27 <demoncrat> how horrible that that's the first thing to leap to mind to call it
17:22:40 * shapr grins evilly
17:22:52 <shapr> well, they stole the golden curve, or whatever it's called.
17:23:00 <Riastradh> G is for Goedel, a language of logic; H is for Haskell, something of foo blahjic.
17:23:35 <demoncrat> http://www.rhymezone.com/
17:23:43 <Riastradh> J should be:  J in which arrays are so easily done.
17:24:06 <demoncrat> I have:
17:24:12 <demoncrat> I is for Intercal, as we have learnt.
17:24:13 <demoncrat> J is for Java.  I just wish it weren't.
17:24:26 <demoncrat> K is like APL sans its strange faces.
17:24:26 <demoncrat> Lambda is Lisp and its fond round embraces.
17:24:40 <Riastradh> Yuck, horrible pun!
17:24:55 <demoncrat> hooray
17:25:14 <Riastradh> And it should be '<lambda char> is for Lisp and its fond round embraces,' not 'Lambda is Lisp.'
17:25:26 <demoncrat> yeah, that'd work outside ascii
17:25:40 <Riastradh> Well, screw ASCII!
17:25:43 <Riastradh> Haskell uses Unicode, anyways.
17:25:47 <shapr> or claims to
17:25:52 <demoncrat> i'll do that when i post it
17:25:58 <Igloo> No, Haskell is
17:26:15 <Igloo> (or does, rather)
17:26:16 <Riastradh> Haskell is...?
17:26:30 <shapr> is Unicode
17:26:33 <demoncrat> haskell should be lambda?
17:26:42 <Riastradh> ?
17:26:44 <esap> G is for Goedel, a language of logic; H is for Haskell, an expression of magic
17:26:57 <Riastradh> And you have to pronounce it 'mahgic.'
17:26:57 <demoncrat> not bad
17:27:02 <Riastradh> Not 'maaagic.'
17:27:48 <Riastradh> D, N, and T need to be changed.
17:28:07 <Riastradh> Update it, quick, shapr!
17:28:13 <demoncrat> S is for Smalltalk and corporate spending.
17:28:17 <demoncrat> T is for types and big flamewars unending.
17:28:39 <shapr> that's good
17:28:41 <Riastradh> E, too.
17:28:48 <demoncrat> E is for Erlang, which processes many.
17:28:48 <demoncrat> F is for FORTRAN, the eldest of any.
17:28:50 <shapr> E is for erights 
17:29:02 <demoncrat> i still don't like that, but it's an improvement, i think
17:30:27 <Riastradh> E is for Erlang, processing threads by the many -- perhaps?
17:30:46 <Igloo> Fortran isn't the oldest language though, is it? The oldest of those mentioned probably, but still...
17:31:05 <Riastradh> FORTRAN was the first programming language; assembly languages don't count, nor does the Lambda-Calculus.
17:31:12 <demoncrat> knuth had an article on really early stuff, but nothing compelling that was actually implemented
17:31:18 <whee> they usually call them processes in erlang, not threads
17:31:40 <Riastradh> Er...but threads aren't processes and processes aren't threads.
17:32:04 <whee> well, that's what erlang calls them :)
17:32:20 <Riastradh> Well, screw Erlang users!
17:32:31 * Riastradh ought to learn Erlang at some point.
17:32:42 <demoncrat> heh
17:33:28 <Riastradh> What does a big V notation mean?
17:33:28 <esap> M is for MIX, a figment of imagination; N is for Nroff, a pigment of lamination. Ugh :-)
17:33:35 <demoncrat> heheh
17:34:04 <Riastradh> P needs to be changed.
17:34:34 <demoncrat> what's html for the lambda character?
17:34:46 * Riastradh pokes some of the more mathematical people around here -- what does a V operator mean?
17:34:49 <Riastradh> Probably &lambda;.
17:35:22 <Heffalump> in what context?
17:35:32 <shapr> dangit, mediaarts.net wants flash.
17:35:41 <Riastradh> &lambda; for lowercase, &Lambda; for uppercase.
17:35:45 <Heffalump> probably disjunction, though
17:36:08 <shapr> yes, P sucks
17:36:24 <demoncrat> shapr - you mean mediaartsgroup.net?
17:37:31 <shapr> yup
17:37:58 <demoncrat> i complained about that to my brother
17:38:44 <shapr> I could start galeon I guess.
17:38:59 <demoncrat> http://www.livejournal.com/users/darius/
17:41:27 <demoncrat> i'll edit the #haskell version as desired
17:43:23 <shapr> actually, I'm shae on livejournal.
17:43:38 <shapr> not that I've posted in forever.
17:43:41 <demoncrat> oops
17:44:00 <demoncrat> fixed
17:47:04 <shapr> g'day Pseudonym 
17:47:24 <shapr> crap, ljupdate is broken.
17:47:41 <Pseudonym> G'day.
18:11:35 <Igloo> Is demoncrat Darius?
18:12:56 <shapr> hi Darius 
18:13:03 <Darius> heyA
18:13:07 <shapr> what's up?
18:13:19 <Darius> I'm reading mostly
18:13:32 <Igloo> Is demoncrat Darius?
18:13:38 <Darius> no
18:13:50 <shapr> Darius /= demoncrat 
18:13:52 <Igloo> Are you his brother?
18:13:59 <Darius> No /whois Darius
18:14:15 <shapr> though it does confuse Bea when I talk about Darius and demoncrat in the same sentence :-)
18:14:49 <Igloo> OK, it's just the universe trying to confuse me then
18:15:19 * Heffalump gets confused by some arrows code
18:16:13 * Pseudonym is perfectly able to confuse himself without help
18:16:16 <Igloo> Ewww, galeon has done something horrid for lambda
18:27:22 * shapr runs from the overwhelming sunlight
18:27:44 <shapr> time for sleep
18:27:46 <shapr> g'night
18:28:36 <Pseudonym> Night.
18:29:31 * Pseudonym attempts to compute pi to 100 billion decimal places
18:29:39 <Pseudonym> I think this is going to take a while.
18:50:16 <flippo> @yow
18:50:16 <lambdabot> YUGGA-HUGGA-BUGGA-TUGGA!!  HEY-HEY!!  A TRAIN STATION!!  No, a POST
18:50:16 <lambdabot>  OFFICE!!  An OCEAN LINER!!  No, I think it's a CAFETERIA!!!
