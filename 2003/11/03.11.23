02:34:02 * shapr bounces
02:34:08 <shapr> exarkun: hi!
02:37:16 * shapr goes to search for breakfast
02:59:37 <TripleDES> morning
03:03:48 <scharob> jo shapr 
03:15:09 <shapr> y0 scharob 
03:15:10 <shapr> wassup?
03:15:14 <shapr> g'mornin TripleDES 
03:16:59 <scharob> Well nothing special concerning myself :-)
03:17:24 <scharob> how was breakfast? Had mine yet, too *g*
03:18:31 <andersca> hey hey
03:18:45 <scharob> hey andersca 
03:21:30 <shapr> breakfast was nice, we had pyttipana
03:21:43 <andersca> gott
03:22:03 <shapr> god morgon andersca 
03:22:37 <scharob> shapr: WTF is pyttipana?
03:26:10 <norpan> pyttipanna is hash
03:26:44 <norpan> fried meat and potato pieces
03:27:30 <andersca> yes, it's hash
03:27:33 <andersca> O(1) in eating
03:30:17 <shapr> heh
03:30:44 <shapr> it's a food that seems unique to northern scandinavia
03:31:17 <scharob> uh
03:31:22 <scharob> Never heard of that
03:31:31 <shapr> it's very tasty, worth trying
03:31:38 <scharob> hmmmmmmmmm
03:31:53 <scharob> Mine was rather continental :]
03:40:13 <shapr> scharob: which city do you live in?
03:41:02 <scharob> Near Cologne
03:46:37 <shapr> aww
03:52:03 <shapr> re scharob 
03:52:23 <scharob> tnx shapr 
03:53:06 <shapr> how's life treating you?
03:53:41 <scharob> Oh...linear algebra really fucks me up
03:54:01 <shapr> I know nothing about linear algebra
03:54:32 <scharob> Well it's a kind of magic :-)
03:54:47 <scharob> I know nearly nothing about haskell, still :-)
03:54:52 <shapr> heh
03:54:59 <shapr> I know something about Haskell
03:55:40 <shapr> @yow
03:55:41 <lambdabot> NOW do I get to blow out the CANDLES??
03:56:00 <scharob> hehe
03:57:39 <scharob> and what about your life? where are you from again shapr ?
04:04:18 <shapr> scharob: originally from southeast USA, now living in north Sweden
04:04:42 <scharob> Oh...good idea to move over to Europe.....
04:05:02 <scharob> to the free lands of middle earth *g*
04:05:03 <shapr> yah, lots more taxes here ;-)
04:05:28 <scharob> But not that many shit manipulation of ppl :)
04:05:51 <shapr> I think it's all a tradeoff
04:06:09 <shapr> things are generally equal when you add them all, you just try to pick the balance that you prefer
04:06:54 <shapr> higher taxes here, which pays for more public health care, unemployment, etc
04:08:38 <scharob> education :-)
04:09:30 <shapr> that too
04:17:50 <phubuh> I wish I had someone forcing me to do this amazingly dull stuff
04:17:58 <shapr> which dull stuff?
04:18:10 <phubuh> a Huffman decoder in O'Caml
04:18:38 <shapr> oh, that sounds like fun actually
04:18:40 <phubuh> it's annoying, because the project can't get anywhere without it
04:18:44 <phubuh> well, the encoder was pretty fun
04:19:09 <shapr> you could upgrade your interest by trying to make one a fold, and the other an unfold of the same code :-)
04:19:18 <phubuh> haha, yes, I was thinking of that
04:21:10 <phubuh> Huffman coding is remarkably simple: http://www.phubuh.org/~phubuh/stout/huffmanEncoder.ml.html
04:22:09 <shapr> are you using htmlize-buffer for this html?
04:22:17 <phubuh> htmlfontify-buffer, actually
04:22:25 <shapr> looks like resolve's color-theme
04:22:33 <phubuh> it's dark-blue2
04:22:51 <phubuh> some of the HTML files are color-theme-phubuh, though
04:23:21 <phubuh> err, no, I actually managed to keep myself from obsessively switching color themes while htmlfontifying
04:23:30 <shapr> shocking
04:23:36 <phubuh> indeed
04:24:07 <phubuh> the direct connect protocol is horrible, by the way
04:24:58 <phubuh> it uses UDP for search results, has gross misspellings in command names, uses a shockingly retarded syntax ($CommandName arguments|), forces you to send redundant information such as your nickname in many commands, etc
04:25:00 <phubuh> ugh.
04:25:27 <shapr> that sucks
04:25:36 <phubuh> since | is the command terminator, you can't send pipe characters in the chat
04:25:57 <phubuh> and I think you can't have them in file names, or pretty much anything else
04:26:58 <shapr> that's pretty sad
04:27:19 <phubuh> yeah.  the original client and server are written in VB, which might explain some things :-)
04:29:25 <Marvin--> haha
05:05:50 <_joey> is anyone using emacs's indentation and syntax hilighting?
05:05:55 <phubuh> yup
05:05:59 <phubuh> most of us, I'd guess
05:08:33 <_joey> do you have to install the mode first?
05:08:38 <_joey> I am pretty new to emacs
05:08:42 <phubuh> yeah
05:08:53 <phubuh> if you use Debian or Gentoo, haskell-mode is in the package system
05:09:04 <_joey> neither
05:09:52 <phubuh> you'll have to dig it up with Google, then :-)
05:11:11 <_joey> so how does it work?
05:11:29 <_joey> you install the mode and loaded when you are in emacs
05:11:43 <_joey> and hilighting with indenting will magically appear
05:14:06 <phubuh> pretty much
05:14:28 <phubuh> you might have to put some magical incantations in your ~/.emacs to get it to load automatically when you edit a .hs file
05:22:47 <_joey> phubuh: could you paste that line out of your .emacs please?
05:26:33 <phubuh> I installed haskell-mode with Gentoo, which probably put that line in some obscure init file, but there are detailed install instructions on the site
05:26:41 <phubuh> google for haskell-mode, it's the first hit :-)
05:29:16 <_joey> oh man
05:29:31 <_joey> could you tell how to swtich the mode either in emacs or .emacs:)
05:29:43 <_joey> you've been using you should know:)
05:29:46 <_joey> it8
05:49:01 <_joey> phubuh: are you around?
05:49:42 <_joey> does indenting work for you in emacs, I loaded a bunch of turn-on-haskell* files
05:49:58 <_joey> it's hilighting but not indenting
06:02:25 <phubuh> _joey: you probably have to hit tab to make it indent
06:02:43 <_joey> hahah
06:02:50 <_joey> what kind of indenting is that?
06:02:59 <phubuh> no, try it!
06:03:05 <_joey> I could hit tab in any editor
06:03:16 <phubuh> you can hit tab anywhere on the line -- it doesn't insert a tab character, but reindents the line to its proper position
06:03:27 <phubuh> if there are more than one proper positions, tab will cycle between them
06:03:28 <_joey> the whole idea of having indent script so it does it automatically for you
06:03:36 <phubuh> I don't agree
06:03:46 <_joey> with what?
06:04:18 <phubuh> that the whole idea of having an indent script depends on that it indents without user interaction
06:04:34 <_joey> that's how it works for c/java/perl to name a few
06:05:13 <phubuh> it shouldn't, by default
06:05:34 <phubuh> if you want to enable automatic indentation for all modes, you can do (global-set-key (kbd "RET") 'newline-and-indent)
06:05:58 <_joey> shouldn't?
06:06:01 <_joey> what would you know?
06:06:14 <_joey> do you understand what indent is?
06:06:24 <phubuh> yes, I am very familiar with the idea of indentation
06:06:33 <_joey> doesn't look like it
06:06:54 <_joey> this is how it works in C, 
06:06:59 <_joey> while(1) {
06:07:09 <_joey>          statement;
06:07:24 <_joey> it advances automatically without you needing to hit tab
06:08:08 <phubuh> yes, you told me that.  however, Emacs doesn't do that by default, so there is probably some Emacs Lisp code in one of your initialization files that rebinds RET to newline-and-indent for C mode.
06:09:04 <_joey> you see it doesn't advance everyuwhere, only where it needs to
06:09:38 <_joey> if it's closing bracket it would go back to match the first columnt of the keyword while , for example
06:10:30 <_joey> as I said , hitting tabs manualy you could on any editor
06:10:39 <phubuh> yes, but it wouldn't have the same effect.
06:11:11 <_joey> why?
06:11:20 <phubuh> I could type M-x haskell-mode in Notepad, certainly, but it wouldn't give me syntax coloring
06:11:37 <phubuh> most text editors would simply insert a tab character after point
06:11:37 <_joey> we are not talking about syntax hilighting
06:11:49 <_joey> we're talking about indenting
06:12:15 <_joey> and what character does emacs insert when you hit tab?
06:12:18 <phubuh> I know what we're talking about, but you see, some times I find analogies help make my point clear
06:12:35 <_joey> it's not clear, you just getting confused
06:12:46 <phubuh> it doesn't necessarily insert any character.  if the line is incorrectly indented, it will insert as much whitespace at the beginning of the line as it needs to make it properly indented.
06:12:57 <_joey> what?
06:13:39 <_joey> anyway, I am going to get rid of emacs
06:13:58 <dennisb> _joey: when you hit tab in haskell mode it reindents the line you are at
06:14:02 <_joey> I'd rip every single byte out of emacs directory:))
06:14:14 <dennisb> pressing tab several times indentes the line in different ways
06:14:56 <phubuh> by all means, do it.  the Emacs community would benefit greatly.
06:15:42 <_joey> phubuh: Eemacs community has to be proud of having users like you, don't they?:)
06:16:18 <dennisb> I see in the backlog that phubuh have already said most there is to say
06:16:58 <_joey> someone who's been using it for a long time and wouldn't know how to add hooks in .emacs and understand how indenting works
06:17:14 <dennisb> _joey: there are many editors, find one that works for you, it's as simple as that
06:18:07 <phubuh> I've written Emacs major modes that indent code. I know how indenting works in Emacs -- you don't.
06:18:30 <_joey> dennisb: I chose emacs because it supports both indenting and syntax hilighting but now it looks like I have manualy tohit tab to indent, although I wouldn't trust taht proud Emacs user on this just yet:))
06:18:59 <phubuh> had you been paying attention, you would have noticed that I already told you how to make Emacs indent lines automatically.
06:20:42 <_joey> was it you not sure about installing *el file, configuring .emacs and sendinding me to google?
06:20:54 <_joey> listen dude, I think you are talking out of your sphincter
06:21:30 <phubuh> that is correct.  please, don't heed any of my advice.
06:22:27 <phubuh> I am in fact entirely ignorant of the mechanisms Emacs uses to indent code, and I certainly have no clue of its default behavior.  you would do best to ignore me and install a quality editor, such as Vim.
06:22:38 <_joey> correct in my very lst statement? sure I was:))
06:22:46 <phubuh> indeed.
06:23:39 <Jad> is it possible to save an opengl frame as an image ?
06:23:53 <phubuh> with HOpenGL, you mean?
06:24:02 <Jad> ya
06:24:12 <Jad> or with OpenGL under C
06:27:17 <Jad> phubuh: got it, think i should use glReadPixels
07:11:02 <ca> any ideas on how to generalise this: cartesianProduct xs ys = [(x, y) | x <- xs, y <- ys] 
07:11:03 <ca> cartesianProduct xs ys zs = [(x, y, z) | x <- xs, y <- ys, z <- zs]
07:14:07 <Igloo> You couldn't type a general one with tuples
07:18:31 <ca> so you are saying its not possible?
07:19:54 <Igloo> Not for all size tuples, no
07:20:21 <ca> er.. but thats what cross product is .. hmm
07:20:26 <ca> so what should i do, use a list instead?
07:20:56 <Igloo> That would work, yes
07:20:57 <Marvin--> or TH?
07:20:57 <Smerdyakov> You can do a general one if you nest the tuples.
07:21:02 <Smerdyakov> Such as (x, (y, z)), etc..
07:21:07 <Smerdyakov> And then you can use type classes.
07:21:26 <ca> Smerdyakov: nice, thats how tuples are defined using sets 
07:21:50 <Marvin--> yeah, but note that (x,y,z) != (x,(y,z))
07:22:10 <Smerdyakov> Marvin--, not a problem if you stick to one convention.
07:22:12 <ca> Marvin--: what is this TH?
07:22:18 <phubuh> Template Haskell
07:22:22 <ca> ok
07:22:30 <phubuh> lets you do fancy compile time computation and code generation
07:24:04 <ca> smerdy, how do i write the general nested tuple?
07:25:29 <Smerdyakov> I guess you use (x, (y, (z, ()))), make up a tuple type class, and write instances of it for (a, b) and ().
07:26:12 <ca> alright, i'll give that a shot .. thanks guys :)
07:29:45 <Marvin--> I don't quite follow, what'd you put in the type class?
07:31:26 <Smerdyakov> A cartesionProduct function.
07:31:46 <Marvin--> yeah, but what would its type be?
07:33:09 <Smerdyakov> Tuple a b c => [a] -> [b] -> [c]
07:33:17 <Smerdyakov> It doesn't quite work with with types for (). :-)
07:34:12 <Marvin--> looks more like a pair than a tuple to me
07:34:16 * Marvin-- must be slow today
07:35:07 <Smerdyakov> Yeah, b has to be a Tuple itself.
07:35:26 <Smerdyakov> For it to be defined.
07:37:17 <Marvin--> I think this will be tricksy
07:37:39 <Smerdyakov> Yes, but it seems like it ought to work. :)
07:38:18 <Marvin--> my first instinct is to have  class Tuple t a b | t -> a b where ...  but that would make Tuple () ? ? impossible
07:38:58 <Smerdyakov> Unless it's Tuple () Void Void. :)
07:39:19 <Smerdyakov> But then you couldn't do much with any Tuple. :D
07:51:08 <Marvin--> I don't get the recursive step either
07:51:36 <Marvin--> you'd have Tuple t a b => Tuple (c,t) c t where ... what?
07:58:54 <Smerdyakov> I don't know.
08:13:09 <ca> hm, another question. What would be the best way to represent a mathematical set in haskell? 
08:13:50 <ca> just want something i can check againt for membership and not allow duplicates
08:17:05 <phubuh> binary tree, perhaps?
08:17:32 <ca> phubuh: okay
08:17:35 <Marvin--> there's FiniteMap
08:18:01 <Marvin--> requires that the elements are Ord of course
08:18:14 <Marvin--> god I hate libtool
08:18:21 <ca> i dont seem to have FiniteMap.hs here
08:18:26 <Marvin--> libtool: link: cannot find the library `'
08:18:29 <phubuh> I hate every single component of the GNU toolchain
08:19:08 <Marvin--> ca: it's not in haskell98, so you may have to do some trickery, what implementation are you using?
08:19:45 <ca> hugs98
08:20:36 <Marvin--> it should be in some extension directory IIRC
08:21:08 <ca> ah. found it, cheers 
08:21:25 <Marvin--> of course, with newer versions of hugs
08:21:34 <Marvin--> you can use the hierarchial libs
08:21:38 <Marvin--> Data.FiniteMap
08:27:28 <ca> i need to find an API listing of these extensions
08:29:10 <Marvin--> the ghc documentation is pretty good
08:29:13 <Marvin--> (but then, I use ghc)
08:57:45 <Leimy> Hello
08:57:57 <Leimy> damn... asmodai hangs out on every channel :)
08:59:03 <Leimy> how does one read this? "Square :: Num a => a -> a"
08:59:12 * Leimy is a newbie
09:00:36 <ca> square is the map that maps from type a to a where a is the Num class 
09:00:40 <ca> i could be wrong too :p
09:01:58 <phubuh> that's strange -- Square is a type name (since its first letter is capital), but it is used in a function definition
09:02:07 <Leimy> hehe not my example :)
09:02:15 <phubuh> square :: Num a => a -> a reads "square is a function from any Num to the same Num"
09:02:54 <phubuh> so if the argument is an Int (which is a kind of Num), it returns Int
09:03:04 <Leimy> and by that is a definition "square x = x * x" compliant?
09:03:17 <phubuh> yup
09:03:39 <Leimy> I see... so the first line with the :: and the => and -> are defining the "type flow"
09:03:45 <Leimy> not the actual function behavior
09:04:05 <Leimy> Int go in... so Int comes out
09:04:13 <Leimy> not Int goes in Double comes out
09:04:22 <Smerdyakov> You only just realized that :: gives a variable's type? :D
09:04:39 <Leimy> No... I was confused how to read that notation
09:05:15 <Leimy> things like ":t 9" in ghci made sense
09:06:00 * Leimy isn't very keen on what exactly => vs -> means I guess
09:06:42 <ca> rewriting this to use use .  properSubset xs xss = subset xs xss && not (equal xs xss) why doesnt (not.equal) xs xss work?
09:07:41 <dennisb> ca: because equal takes 2 arguments
09:08:08 <dennisb> (not.equal) xs xss  == (not (equal xs)) xss
09:08:26 <ca> ah
09:08:42 <ca> so i tried enclosing xs and xss in ()'s that didnt work either
09:11:35 <Leimy> I think I get it now.
09:11:43 <Leimy> head :: [a] -> a
09:11:53 <Leimy> fst :: (a,b) -> a
09:12:06 <Leimy> snd :: (a,b) -> b
09:12:17 <Leimy> this allows you to make lists of tuples
09:12:34 <Leimy> and store different types
09:12:47 <Leimy> as far as head knows you have a list of tuples right?
09:13:35 <Smerdyakov> ca, you just can't use . well with functions that are really binary operators.
09:14:03 <Smerdyakov> Leimy, yes.
09:14:07 <Leimy> hmmm but that has limitations I see... "tuple" isn't what it knows... it gets (a,b) so that all elements have to be (a,b)
09:14:25 <Leimy> head [(1,"tom"),(3.0,"something")] is valid
09:14:30 <Smerdyakov> No.
09:14:37 <Leimy> sure it is
09:14:40 <Leimy> 1 and 3.0 are Num
09:14:45 <Smerdyakov> So?
09:14:51 <Smerdyakov> All elements of a list must have the same type.
09:14:52 <Leimy> head [(1,"tom"),(3.0,'c')] is not valid
09:15:07 <Leimy> I thought "Tuple" was a type
09:15:12 <Leimy> not Tuple of (a,b)
09:15:20 <Smerdyakov> Oh, I guess the helpful compiler automatically treats the 1 as 1.0.
09:15:24 <Smerdyakov> That's really a special case.
09:15:29 <Smerdyakov> You can't generally do things like that.
09:15:30 <Leimy> oh... so its not Num?
09:15:34 <Leimy> its Int?
09:15:35 <Smerdyakov> Num is not a type.
09:15:37 <Smerdyakov> It's a type class.
09:15:40 <Leimy> Num is a type variable
09:15:44 <Leimy> oh
09:15:45 <Smerdyakov> No.
09:15:45 <Leimy> hmmm
09:15:48 <Leimy> hehe
09:15:51 <Leimy> still learning :)
09:16:49 <Leimy> Prelude> :t (1, "cool")
09:16:50 <Leimy> (1, "cool") :: forall t. (Num t) => (t, [Char])
09:16:53 <Leimy> what's that then?
09:17:00 <Leimy> Num t
09:17:52 <Smerdyakov> You don't want to know if you are just starting to learn Haskell.
09:17:59 <dennisb> Leimy: types that contain a => looks like this:   constraints => type    to the right is the actual type, and if the type contains some type variable (like a, b, c) then there can be a constraint to the left for a variable. For exampel Num a says that a can be any type as long as it's a number
09:18:37 <Leimy> so is Fractional a Num?
09:18:58 <dennisb> Num t means that t can be any type as long as it is a number type (technically it means that t must be in the Num class, but that one can ignore in the beginning)
09:19:32 <ca> Smerdyakov: ok, cheers
09:20:01 <Leimy> ok... so why wouldn't [(1, "something"), (2.0, "something else)] be valid?
09:20:08 <Leimy> isn't 2.0 of class Num
09:20:09 <Leimy> ?
09:20:44 <dennisb> it is valid
09:20:53 <Leimy> Smerdyakov said its not
09:20:59 <dennisb> I might not have seen your whole discussion above
09:21:07 <Leimy> he said it should be (Int, [Char])
09:21:14 <Leimy> I said it should be (Num, [Char])
09:21:20 <Leimy> but I am new
09:21:21 <Leimy> :)
09:21:21 <Marvin--> Num isn't a type
09:21:57 <dennisb> try: :t [(1, "something"), (2.0, "something else")]
09:22:38 <Leimy> hmm
09:22:44 <Leimy> its calling 1 and 2 Fractional
09:22:49 <Leimy> er 1 and 2.0
09:22:58 <dennisb> the type is Fractional a => [(a,[Char])] which means that the type of the first component in the tuple can be anything as long as it's a fractional type
09:23:11 <Leimy> so num is a class
09:23:15 <Leimy> types can be of a class
09:23:20 <Leimy> but data must be of a type
09:23:21 <dennisb> Num is a class, Fractional is a class
09:23:28 <dennisb> types can be instances of classes
09:23:38 <Leimy> Then what does Marvin- mean by saying Num isn't a type?
09:23:46 <dennisb> Num is not a type, it's a class
09:23:56 <Leimy> ok... so why does that matter? :)
09:24:14 <Leimy> I am apparently missing on the relationship between types and classes
09:24:18 <dennisb> yes
09:24:19 <Igloo> x :: Num a => a    means that x can have type a as long as a is in the class Num. Does that help?
09:24:27 <Igloo> The bit on the right of the => is the type
09:24:32 <Igloo> The left is just a list of constraints
09:24:44 <Leimy> Igloo: a loose type restriction?
09:24:46 <dennisb> you can not have a value of type Num, values always have one specific type like Int or Float
09:25:04 <Igloo> I don't understand what you mean by that, Leimy
09:25:21 <Leimy> ok... pretend I come from another language
09:25:29 <Leimy> where class/type are often used interchangable
09:25:34 <Leimy> now you should see where I am coming from
09:25:35 <Leimy> :)
09:25:37 <Smerdyakov> No.
09:25:43 <Smerdyakov> That is a different meaning of "class."
09:25:46 <dennisb> the above says that the type of x is not really known yet, but what we do know is that the type is one of the number types, like Int or Float
09:25:48 <Smerdyakov> Not analogous to Haskell type classes at all.
09:25:55 <Leimy> Ok.
09:26:08 <Leimy> but its saying you will be able to do only Num like things
09:26:11 <Igloo> Think of a class as being a set of types if you like
09:26:13 <Leimy> like addition and such
09:26:24 * Leimy is thinking of it like an interface
09:26:27 <Igloo> And "Num a =>" as meaning "\ is in the set Num"
09:26:29 <Leimy> like an abstract class
09:26:46 <Igloo> "a is ..." rather
09:27:20 <dennisb> "the type a is in the set Num" to make it even more explicit
09:28:18 <Leimy> So Fractional is not a type either
09:28:42 <Igloo> No
09:28:55 <Leimy> its another class
09:28:58 <dennisb> if you have a function like this: f :: Num a => a -> String   that means that you can send in a value of any num type, you can pass in an Int or a Float, because they are Num types, but you can not pass in a String
09:29:02 <Igloo> Yup
09:29:15 <opet> Netsplit orwell.freenode.net <-> irc.freenode.net quits: lilo
09:29:16 <dennisb> and you can not pass in a list, and so on
09:29:27 <Leimy> dennisb: but its going to give back a String?
09:29:28 <opet> there's something ironic there, but I'm not sure what it is :)
09:29:34 <Leimy> is that like "show"?
09:29:37 <dennisb> Leimy: yes
09:29:55 <dennisb> if the type was   a -> String, then you could use it for any kind of value
09:30:03 <dennisb> notice, no restiction on the type a
09:30:11 <dennisb> restriction even
09:30:17 <Leimy> I see
09:30:40 <Leimy> so... show takes types of class Show and gives a String back
09:30:49 <dennisb> and why the restriction, well, the function f probably performs some addition inside that only makes sence for numbers
09:30:57 <Leimy> right
09:31:04 <Leimy> which is why I thought of a class more like an interface
09:31:23 <dennisb> well, it is like an interface
09:32:02 <Leimy> I am doing my best not to think of it like "implements Runnable" in Java for threads ... but still keep the interface idea
09:32:11 <dennisb> but what we can agree on is that it's not a type, Num is used as a restriction of a type variable
09:32:13 <Leimy> I don't want to pollute my Haskell thinking any more than I already have :)
09:33:02 <dennisb> yea, the classes in haskell and classes in other languages are not exactly the same (but there are similarities of course)
09:33:26 <Leimy> yeah... I have been messing with Objective-C and C++ and now Haskell
09:33:39 <Leimy> the other two are actually more closely related :)
09:33:46 <dennisb> yes
09:33:52 <Leimy> Objective-C protocols are more like Java interfaces
09:34:00 <Leimy> which is kind of like an Abstract base class
09:34:06 <Leimy> in C++
09:35:00 <dennisb> the haskell classes are like an interface for a type, a type is an instance of the class Num if it has the operation + defined for that type (not just plus, but anyway)
09:35:19 <Leimy> gotcha
09:35:45 <Leimy> So ... if I wanted to define my own Num conformant type I would have to implement the whole Num interface?
09:35:56 <dennisb> yes
09:35:59 <Leimy> good :)
09:36:25 <dennisb> you create a type Foo then you do, instance Num Foo where ... definition of the operations like + for type Foo ...
09:38:07 <Leimy> hmm.. its really not all that complicated is it... just a little different
09:38:19 <dennisb> I agree
09:38:43 <Leimy> thanks again guys... 
09:38:47 <Leimy> that helps a great deal
09:40:43 <Leimy> so infix operators have types as well... Like (+) will only work on things that are of class Num
09:40:52 <Leimy> man... that's actually quite powerful type checking
09:40:54 <dennisb> write :t (+)
09:41:02 <Riastradh> Infix operators are no different from functions.
09:41:23 <dennisb> > :t (+)
09:41:24 <dennisb> (+) :: Num a => a -> a -> a
09:41:39 <Leimy> says it takes two a's... yields an a?
09:41:49 <Leimy> or... hmm
09:41:50 <Riastradh> As long as there is an instance of Num for that type a.
09:41:53 <dennisb> yes, and a is some type in the num class, like Int or Double
09:42:22 <Leimy> so is Fractional's relationship to Num a "subclass"?
09:42:22 <dennisb> and you can not add an Int and a Double, both inputs must have the same type
09:42:39 <Leimy> dennisb: that's the part that's not terribly clear :)
09:42:45 <Leimy> that they have to be the same type
09:42:59 <Riastradh> Leimy, it's like id<Num> in Objective-C, except that you use that type twice and want to ensure that it's the same class (id will just say 'it's an object' and provides no guarantees that it's the same class).
09:43:00 <Leimy> is it that they are both "a's"
09:43:17 <Leimy> not Num a and Num b
09:43:22 <dennisb> Leimy: you have to plug in one type for a
09:43:23 <dennisb> yes
09:43:37 * Leimy must drill into his skull that he is looking at a type flow :)
09:43:38 <dennisb> (Num a, Num b, Num c) => a -> b -> c
09:43:42 <Leimy> not data/variables :)
09:44:04 <Leimy> Riastradh: neat.
09:44:16 <Leimy> dennisb: those are 3 different nums.
09:44:19 <dennisb> yes, Fractional is a subclass
09:44:36 <Leimy> in this case though are we saying that + yields an a that yields an a?
09:44:42 <dennisb> Leimy: yes, so you can pass in different kinds of numbers. Writing a function with that type can however be hard
09:44:52 <Leimy> sure
09:45:07 <dennisb> in what case do we say that?
09:45:13 <Leimy> so far fst and snd are the two functions I have really seen that take stuff of different types.
09:45:26 <Leimy> dennisb: :t (+) 
09:45:33 <Leimy> (+) :: forall a. (Num a) => a -> a -> a
09:45:54 <Leimy> its like  f(g(x))  vs f(x,y) ?
09:46:01 <dennisb> the classes in haskell is really about overloading which you probably know about?
09:46:24 <dennisb> so there is one function + of type Int -> Int -> Int and another function + of type Float -> Float -> Float
09:46:38 <Leimy> sure
09:46:42 <Leimy> C++ has this.
09:46:47 <dennisb> yes
09:47:58 <dennisb> so when you write 2.0 + 4.0 the haskell system will select a + that fits in depending on the types of 2.0 and 4.0
09:48:23 <Leimy> yeah... its parameter matching is pretty cool.
09:48:53 <Leimy> makes writing recursive functions pretty easy
09:49:00 <Leimy> and very modular
09:49:33 <Leimy> I am actually surprised they don't teach functional programming in more colleges
09:49:47 <dennisb> I didn't understand your comment about f(g(x))  vs f(x,y)
09:50:01 <Leimy> dennisb: (+) :: forall a. (Num a) => a -> a -> a
09:50:19 <Leimy> that looks like something yielding something that yields something else of type a which is of class Num
09:50:38 <Leimy> not that something takes two somethings of a that is of class Num
09:50:59 * shapr throws hylomorphisms at exarkun 
09:51:41 <shapr> good evening, how's functionality?
09:52:04 <dennisb> => is just a delimiter, could just as well be | or ##. There is always at most one => and the "real" type is to the right of the =>
09:52:26 <shapr> hiya TripleDES 
09:52:35 <TripleDES> hey :)
09:52:40 <shapr> how's code?
09:52:59 <TripleDES> stopped :(
09:53:02 <Leimy> dennisb: well the part that concerned me was a -> a -> a
09:53:05 <dennisb> so, + has the type a -> a -> a   (the two inputs has the same type and the output as well)
09:53:08 <TripleDES> today is time for Computer & ethics
09:53:22 <Leimy> dennisb: I can't easily parse that as 2 inputs though
09:53:40 <dennisb> Leimy: well, there is a long story behind that as well :-)
09:53:51 <Leimy> I figured it had to do with lambda expressions
09:53:52 <dennisb> it really isn't a function of two arguments
09:54:05 <Leimy> and that traditionally lambda expressions take 1 argument
09:54:16 <dennisb> -> is right associative, that is the type is  a -> (a -> a)
09:54:19 <TripleDES> shapr: tomorrow afternoon I'll be coding again
09:54:31 <shapr> that's good
09:54:41 <dennisb> Leimy: you give it one argument and you get a function back
09:54:56 <Leimy> which I took to be g(x)
09:55:02 <Leimy> or whatever
09:55:07 <Leimy> perhaps my math is flawed :)
09:55:15 * shapr wonders who created the PipeliningFunctionsssssssssssssssssss page on HaWiki
09:55:47 <dennisb> Leimy: yes, now your comment makes more sense to me
09:55:59 <Leimy> dennisb: is there a way to test that?  like assign the out put of (+) with one argument
09:56:12 <dennisb> sure, you can do that
09:56:13 <TripleDES> shapr: how's your ipv6 support for haskell ?? :))
09:56:21 <shapr> haven't even looked at it
09:56:27 <dennisb> Leimy: let f = (+) 4 in f 3 + f 6
09:56:29 <shapr> I'm poking lambdabot at the moment, something's wrong with him
09:57:20 <Leimy> dennisb: neato.
09:57:23 * TripleDES slaps lambdabot to fix it
09:57:26 <TripleDES> hehe
09:57:43 <Leimy> so it seems like functions with more than one argument is a convenience
09:57:45 <dennisb> Leimy: yep, I like it a lot. You create functions on the fly very easy in haskell
09:57:57 <Leimy> but not really what's going on :)
09:58:09 <dennisb> Leimy: yes, it's not at all what is going on
09:58:31 <dennisb> it's the difference of    f (x,y) = x+y   and    f x y = x+y
09:59:09 <Leimy> I think the only reason you can do it is that functions are types
09:59:20 <dennisb> the first is a function taking one argument, a type, the second is a function that takes a number and returns a function (which takes the next number)
09:59:36 <dennisb> s/a type/a tuple/
09:59:44 <Leimy> not types... functions are values
09:59:51 <dennisb> yes
10:00:01 <dennisb> functions are first class values
10:00:31 <Leimy> I've already written a version of the "Guess a number" program that passes a function to a function as an argument.
10:00:38 <Leimy> cuz I had trouble with syntax :)
10:00:44 <Leimy> so I made it simpler by doing that
10:00:45 <dennisb> well, it was fun. Now I'll let someone else take over the haskell lesson of today, good luck with haskll
10:00:46 <dennisb> cool
10:00:51 <Leimy> hee hee :)
10:00:52 <Leimy> thanks 
10:02:02 <Leimy> any really good Haskell books I can purchase?
10:02:14 * Leimy has seen decent ones on Scheme and such
10:02:57 <dennisb> I have one more comment I was planing to give. f x y = x + y is just nice syntax for f = \x -> (\y -> x+y)
10:03:11 <dennisb> There is a books section on the haskell.org page
10:03:39 <Leimy> dennisb: that explains my question about the a -> a -> a thing perfectly thanks :)
10:04:15 <ibid> dennisb: a little more than a nice syntax, but not very much
10:05:03 <dennisb> yea, but that is just details, when he needs to understand that he already knows more then enough to see the difference
10:05:05 <dennisb> :-)
10:05:59 <dennisb> which is not to say that the above is wrong
10:07:02 <ibid> :))
10:07:04 <ibid> :)
10:07:27 <Leimy> out of the list of books on Haskell.org anyone have a favorite?
10:07:33 <Leimy> I don't have the budget to get em all :)
10:08:10 <Lor> Personally, I don't think that a book is at all a prerequisite for learning haskell.
10:08:40 <Leimy> same with any programming language right?
10:08:46 <shapr> I learned from Thompson's Craft of Functional Programming book
10:08:48 <Lor> Yes.
10:08:51 <Leimy> There are some techniques I need to learn though
10:08:57 <Leimy> like Dynamic Programming
10:09:06 <Leimy> and what the heck these Monads are :)
10:09:07 <Lor> I think the only programming languages I really learned from a book were C++ and Java.
10:09:08 <shapr> if you know and like math and 'graphics', you may prefer Hudak's School of Expression
10:09:18 <Leimy> Lor: more for the libraries I bet
10:09:48 <ibid> thompson is probably my favourite
10:09:53 <Lor> Languages really don't differ all that much. Once you know a couple of them, you learn new ones pretty quickly.
10:10:10 <shapr> Manuel Chakravarty prefers Hudak, and he teaches hundreds of students a year...
10:10:22 <Lor> Then again, I have the problem that I'm keenly aware how much _every_ language sucks, so I don't find real motivation for learning more of them any more...
10:10:22 <Leimy> its the functional programming in general I'd like to learn mor about then I suppose... using Haskell as a vehicle
10:10:30 <shapr> even though I prefer Thompson, Manuel definitely knows something ....
10:10:35 <Leimy> I am pretty decent with Generic, OOP and Procedural/Imperative
10:10:46 <Leimy> but Functional isn't in my vocabulary as of yet
10:10:49 <Lor> "Generic" as in?
10:10:50 <Leimy> which is why I bother :)
10:10:58 <Leimy> Generic as in Generative
10:11:10 <Leimy> its mainly related to using the C++ template engine
10:11:12 <ibid> Leimy: generic and generative are two totally different things
10:11:25 <Leimy> ibid: depends to whom you speak :)
10:11:33 <ibid> (though the C++ templates can be used for both)
10:11:50 <Leimy> right... and often the camp is grouped together though Iwill admit the approaches are different
10:11:56 <ibid> Leimy: i haven't heard anyone beside you lumping them together
10:12:08 <Leimy> ok... then I am the person it will depend on :)
10:12:11 <ibid> :)
10:12:28 <Leimy> Generic programming is when the algorithms are pre-written  regardless of types .
10:12:31 <shapr> andersca: ok, I figured out what's wrong with lambdabot, stupid mistake on my part
10:12:39 <Leimy> though there are inherent type restrictions
10:12:46 <ibid> Leimy: if you haven't used genericity in any other language, or generativity using other techniques, they may seem similar
10:13:05 <andersca> shapr: oh, what was it?
10:13:18 <Leimy> I haven't really used Ada generics if that's what you mean... or probably even really used anything generic about Haskell yet
10:13:37 <Leimy> templates were pretty much force fed to us in college
10:13:50 <Leimy> and now I actually work with them day to day a bit
10:13:52 <shapr> I gave you a new Makefile that didn't build FactModule.hs (since database support is troublesome) but I forgot that you need to comment out "fact" in getStartupModules in BotConfig.hs
10:13:58 <ibid> Leimy: genericity as OO people use it is basically just another name for parametric polymorphism
10:13:59 <Lor> What you call generics is known as parametric polymorphism hereabouts.
10:14:24 <Leimy> ibid: yes.  I will agree.. people are doing static parametric polymorphism with it :)
10:14:29 <shapr> andersca: if you change getStartupModules to get rid of "fact" it should immediately work
10:15:12 <Leimy> And its interesting... depending on how you build the application using those templates... you can generate a whole new app
10:15:20 <ibid> the core of generative programming, however, is the idea of writing programs that write programs
10:15:21 <Leimy> not unlike programming an FPGA
10:15:36 <ibid> Leimy: templates are much more than just generics (or PP)
10:15:37 <Leimy> ibid: but the two can be combined pretty easily in C++
10:15:40 <Lor> ibid, had a look at meta(oca)ml?
10:16:14 <ibid> Leimy: yes, and that is exactly why someone who knows only C++ generics/generativity might confuse them
10:16:16 * ayrnieu finally catches up.
10:16:18 <ibid> Lor: no
10:16:33 <ayrnieu> Lor - aside: the only programming book I've ever learned a language from was the first edition of Learning Perl.
10:16:34 <ibid> i should learn ml one of these days
10:16:47 <ayrnieu> Lor - that is, one that I had as a physical book.
10:17:10 <Leimy> ibid: well I am beginning to learn more about generics... I hate being shoe-horned
10:17:29 <Leimy> ibid: its why I never took that y2k COBOL update position out of college :)
10:17:30 <ibid> Leimy: both generics and generativity are cool
10:17:58 <ibid> but i need to get some food
10:18:00 <ibid> bbl
10:18:02 <Leimy> later
10:20:35 * shapr fights with GHCiModule
10:20:58 <shapr> hei dark 
10:21:12 <dark> hallo :)
10:21:15 <shapr> Lunar^: you around?
10:21:51 <shapr> dark: what's up?
10:22:00 <shapr> cool, we've reached the high water mark again.
10:22:06 <dark> Not much.
10:23:20 <dark> I've found that simply sorting my inbox by size is an excellent spam filter.
10:23:31 <shapr> that's interesting
10:24:01 <dark> I guess it's the way the spams tend to use HTML.  And of course the sobig worms are all 150k or so.
10:24:23 <shapr> hi whee 
10:24:28 <shapr> neat, 73
10:24:43 <dark> Oh I thought you meant actual water :)
10:25:00 <shapr> oh, I've been playing "A Tale in the Desert" it's fun
10:25:07 <whee> hi shapr~~~~
10:25:20 <shapr> I should write a comprehensive review of available linux games.
10:25:23 <tomasso_> can anyone help me figure out some hugs errors?
10:25:33 <shapr> tomasso_: ask and ye probably will receive
10:25:33 <tomasso_> i cant solve them :(
10:25:40 <tomasso_> thank you
10:26:16 <shapr> Lunar^: hey, did you have link problems with Shell.hs in lambdabot?
10:26:31 <shapr> oh, I bet it's the dynamic stuff being pissy
10:27:02 <tomasso_> the problem is in http://168.226.148.78/trabajo/TeamB.hs
10:27:17 <shapr> tomasso_: what's the error?
10:27:32 <tomasso_> ERROR "C:\trabajo\TeamB.hs":52 - Syntax error in input (unexpected comma)
10:27:33 * Leimy is away: lunch
10:27:51 <shapr> tomasso_: have you tried to comment out half the file to see which half contains the error?
10:28:07 * shapr calls that brainary search
10:29:31 <tomasso_> shapr: yes i tried commenting some things
10:29:46 <tomasso_> but the error always appears in the same line, even if it is commented
10:30:18 <ayrnieu> tomasso - by your error, the problem is in the esquivar function -- also, even if it is commented?  That's interesting.
10:31:09 * shapr realizes lambdabot is becoming unreasonably complicated
10:31:11 <Tomasso> ayrnieu: yes, even if it is commented, and before, that function exists the same error was in the goto function
10:31:48 <ayrnieu> Tomasso - also, you need to find a better name than 'in' in that function.  Hugs sees 'in' as a keyword.
10:32:32 <Tomasso> hehehe le me check
10:32:36 <ayrnieu> I saw that first in Emacs highlighting, but hugs gives a better error: ERROR "TeamB.hs":40 - Syntax error in module definition (unexpected keyword "in")
10:33:39 <shapr> that looks like a problem
10:33:44 <shapr> possibly even the problem
10:33:59 <dark> shapr: I've been thinking of writing game reviews too.
10:34:10 <Tomasso> ayrnieu: thats not the error hugs gave me?
10:34:11 <dark> shapr: I guess it's the urge to get something useful out of the time I spend on them :)
10:34:12 * Riastradh hugs S-expressions.
10:34:17 <shapr> dark: yah, same here
10:34:22 <shapr> once I've played a game into the ground...
10:34:40 <shapr> hi jao
10:34:55 <ayrnieu> tomasso - why ask me?  You should know what error hugs gave you.  If we get different answers, we may be loading the file through different means or using different versions of hugs
10:34:59 <jao> hey shapr
10:35:10 <ayrnieu> tomasso - I had to edit TeamB.hs just to load it, since you didn't give me the Types module
10:35:25 <shapr> jao: what's up?
10:35:30 <ayrnieu> (my clever hacking: delete the 'import Types' line)
10:35:54 <Tomasso> hmhm
10:36:04 <jao> shapr, nothing haskellish, i'm afraid. these days i've been coding/reading mostly on scheme...
10:36:08 <Tomasso> what version of hugs are you running?
10:36:17 <Tomasso> it gave you a more specific error
10:36:26 <shapr> as long as you enjoy it
10:36:57 <jao> shapr, sure i do. btw, how's your antispam thing going?
10:36:59 <ayrnieu> tomasso - Hugs only tells me that it is "Version: December 2001"
10:37:34 <Tomasso> im using that hugs gui winhugs
10:38:00 <ayrnieu> OpenBSD ports built mine for me.
10:38:03 <shapr> jao: I've gotten distracted into fixing lambdabot (just finished) but if you have ideas or thoughts, I'd love to hear them.
10:38:48 <jao> shapr, not right now. but as long as you've got some code, i'd love to take a look at it.
10:39:11 <jao> (i still want to grok haskell :)
10:39:30 <shapr> no code at the moment
10:39:36 <shapr> I'm about rip off some of dark's code though...
10:39:36 <ayrnieu> jao - drink of the Haskell to fullness.
10:39:50 <shapr> specifically, his FTP code
10:40:05 <jao> ayrnieu, thank you, i'll do
10:40:06 <shapr> dark: hey, do you have any other Haskell code I can rip off and play with?
10:40:28 <shapr> crap, I found a bug in wiwiwi
10:41:43 <Tomasso> haha why does it say: ERROR "C:\trabajo\TeamB.hs":41 - Syntax error in expression (unexpected symbol "
10:41:43 <Tomasso> ==") 
10:42:07 <Tomasso> i need the == there... its a comparison..
10:42:23 <ayrnieu> tomasso - what do you expect that to do?
10:42:37 <shapr> you need to change the occurences of "in" to another variable name
10:42:43 <shapr> hoi blitznl 
10:42:56 <blitznl> hoi shapr
10:42:56 <shapr> goto ((x,y),iD, s, k) ((z,w),in,B)  <-- get rid of this "in"
10:43:16 <shapr> yay, 75
10:43:29 <Tomasso> shapr: there are not in ocurrences 
10:43:37 <ayrnieu> tomasso - oh, sorry, your bizarre 'wrapping' of the error confused me.  I read   ==")  as a snippet from your code
10:43:41 <shapr> Tomasso: ok
10:44:04 <ayrnieu> tomasso - please show us what code TeamB.hs has on line 41
10:44:11 <Tomasso> Ok
10:44:33 <Tomasso> 						(w == y) && (x < z) -> E
10:44:46 <Tomasso> (click on update in your browser)
10:45:55 <Marvin--> you are completely misunderstanding the case expression
10:46:15 <Tomasso> Marvin--: why do you say that?
10:46:42 <Marvin--> Tomasso: case <expression> of <pattern> -> <expression> ...
10:46:55 <Marvin--> Tomasso:  (w == y) && (x < z)  is an expression, not a pattern
10:47:23 <Marvin--> Tomasso: you should look up guards
10:47:43 <ayrnieu> tomasso - indeed, your case expression makes little sense.
10:47:48 <Tomasso> mhhm
10:47:52 <shapr> Lunar^: hey, I think I'm missing a -lsomething when linking Shell.o, can you tell me what's missing?
10:48:08 <shapr> I realized the Makefile needs -fffi with GHCiModule involved
10:48:12 <Tomasso> and what about the second one in the esquivar function?
10:49:26 <ayrnieu> The other parentheses serve no function, but I don't want to understand the complex expression within them right now.
10:49:32 <ayrnieu> also, the outer parentheses.
10:49:36 <harsha> Hello shapr ! 
10:49:40 <shapr> hello harsha 
10:49:47 <Tomasso> you are right, im going to use guards
10:50:41 <shapr> dang, where's prologic?
10:50:45 <shapr> does someone have his email address?
10:50:48 <harsha> i was reading "Structure and Interpretation of Computer Programs", quite amazing 
10:50:49 <Marvin--> Tomasso: the case expression in esquivar is fine, constructors are patterns
10:50:50 <shapr> hello code_mutant 
10:51:02 <code_mutant> hy
10:51:09 <shapr> harsha: yes, it's a wonderful mind expanding book.
10:51:36 <shapr> harsha: if you like it, you can also download the associated lectures
10:51:44 <shapr> code_mutant: learning Haskell?
10:52:12 <harsha> shapr hmm.. Ok 
10:52:20 <code_mutant> well.. i'll give it a try.. "everything has a first time.. if not a next time"
10:52:39 <harsha> shapr this is a *very good* way to learn haskell too
10:52:40 <shapr> code_mutant: ok, best place to start is http://www.haskell.org/learning.html
10:52:46 <code_mutant> harsha..
10:52:48 <shapr> harsha: which way?
10:52:53 <code_mutant> where u frm?
10:53:15 <ayrnieu> code - who do you speak to?
10:53:20 <harsha> shapr work problems from that book, what do aya say ?
10:53:30 <code_mutant> harsha
10:53:30 <code_mutant> ...
10:53:37 <code_mutant> where u frm?
10:53:43 <harsha> code_mutant india 
10:54:30 <code_mutant> i had a frnd with ur name.. she is in INDIA.
10:55:01 <harsha> omg, hehehe. yes i heard that a few women also have harsha as a name.. 
10:55:10 <code_mutant> lolz
10:55:25 <code_mutant> me 2 am india
10:55:39 <harsha> neat, :)
10:55:42 <harsha> where from?
10:56:17 <Tomasso> it returns the same error ERROR "C:\trabajo\TeamB.hs":41 - Syntax error in expression (unexpected symbol "
10:56:17 <code_mutant> hy smerdykov... u here?
10:56:17 <Tomasso> ==") even if i use guards
10:56:25 * shapr swears at SMTP
10:56:53 <shapr> Tomasso: sometimes, if an error is impossible to track down, it's best to rewrite that function/class/etc again, one small piece at a time.
10:56:54 <harsha> code_mutant  do you live in India?  i mean right now?
10:57:01 <code_mutant> yeap
10:57:12 <Tomasso> hhm
10:57:22 <ayrnieu> tomasso - I don't parse your code either.
10:57:28 <shapr> harsha: oh, that's a good idea
10:57:28 <harsha> code_mutant where ? :)  am curious too
10:57:40 <shapr> harsha: I wonder if someone has already tried to port SICP to Haskell.
10:57:55 <Riastradh> Bah!  Just use Scheme!
10:57:56 <harsha> shapr ok , but am gonna try this 
10:58:00 <ayrnieu> tomasso - aside: you should probably give the Bool in your pattern match a better name than 'B' -- possibly a workable name such as 'b'
10:58:09 <harsha> shapr cause am learning too ... 
10:58:20 <code_mutant> harsh..
10:58:26 <harsha> yes, code_mutant :)
10:58:28 <shapr> harsha: scheme is good to learn
10:58:33 <code_mutant> in south india.. u where?
10:58:33 <Tomasso> hmh let me check
10:58:35 <harsha> common, where do ya live ? hehe
10:58:54 <Riastradh> ((call/cc call/cc) (call/cc call/cc))!
10:58:57 <harsha> code_mutant BLR 
10:59:06 <harsha> code_mutant and you ?
11:00:06 * harsha listening to REM,  "Shiny Happy People"
11:00:41 * shapr listening to The Distillers - City of Angels
11:01:03 <ayrnieu> tomasso - hugs again gives me a different error: ERROR "TeamB.hs":52 - Syntax error in module definition (unexpected symbol "f")
11:01:09 <harsha> code_mutant you around?
11:01:13 * jao listening to Silvio Rodrigues, Cita con angeles
11:01:49 <code_mutant> yeap
11:02:05 <harsha> code_mutant where ya from?
11:02:06 <code_mutant> just had a few urgent calls in hprog and ypn
11:02:34 <Marvin--> ghci doesn't complain until line 52 either
11:02:43 <Marvin--> and it's because of the "e f"
11:02:43 <code_mutant> frm cochin.. does  BLR mean the same as i think it means?
11:03:15 <harsha> code_mutant can it be *something* different ? 
11:03:20 <Tomasso> ayrnieu: it gives a diferent error to me
11:03:20 <Tomasso> hahaha it cant be posible
11:03:20 <Tomasso> same inputs diferent outputs, this is not functional
11:03:40 <harsha> code_mutant bangalore :)
11:03:50 <code_mutant> is it bang ?
11:03:57 <code_mutant> oh.. kwel
11:04:09 <harsha> code_mutant coming sometime? hehe
11:04:16 <code_mutant> lolz
11:04:25 <Marvin--> Tomasso: are you sure you haven't fscked up something? Line 42 comes through clean for me in both hugs and ghci
11:04:32 <code_mutant> yeah.. may b in jan or in april
11:04:37 <harsha> shapr do you know Bangalore has the best Pubs in india ..
11:04:50 <code_mutant> cme with frnds for party time
11:04:50 <ayrnieu> tomasso - possibly different versions of hugs, as I said, and Marvin and I probably both load your file without the Types module
11:04:50 <harsha> code_mutant not coming for Linux-Banglore 2003?
11:04:55 <shapr> harsha: I was not aware of that. I haven't spent much time in pubs in India.
11:04:59 <code_mutant> nope
11:05:08 <code_mutant> mumbai has better pubs
11:05:12 <Marvin--> ayrnieu: actually, no, I downloaded Types too :)
11:05:14 <harsha> shapr :) that was trivia..
11:05:24 <Tomasso> Marvin--: cant i do a pattern matching using e f for constructors like HaciaObjetivo (Jugador -> Casilla -> Cmd)
11:05:24 <Tomasso> where f should match a function of type (Jugador -> Casilla -> Cmd)
11:05:31 <Marvin--> Tomasso: no
11:05:50 <harsha> code_mutant hey, am talkin in terms of music, and not paraphernalia :)
11:06:11 <harsha> code_mutant so whats up in cochin?
11:06:33 <Marvin--> Tomasso: basically, a pattern is either a variable, or a constructor applied to zero or more patterns
11:06:40 <Marvin--> (not the whole truth, but close to it)
11:08:08 <Marvin--> Tomasso: I can't read the comments ;) so I don't know the reason for the type
11:08:17 <Tomasso> hmhm and how do i take the function after the constructor?
11:09:02 <Marvin--> Tomasso: since they all have the same type, you could write an "unEstado" function, that would have type Estado -> (Jugador -> Casilla -> Cmd)
11:09:35 <Tomasso> Marvin--: the data type Estado, its the Status of a player, and acording the status the function that is stored in each one is runned
11:09:40 <Marvin--> "un" being English, I have no idea what I just said ;)
11:10:17 <Tomasso> haha Ok, im going to translate comments :D
11:10:33 <Marvin--> Tomasso: I'm not following, you want to encapsulate both a state and a function that does what?
11:10:50 <Marvin--> is there a reason why you can't have a pair of (state,func) instead?
11:11:12 <code_mutant> in cochin.. well im in kothamangalam now.. ilive in cochin.. but my college is in kothamangalam
11:11:21 <Marvin--> Tomasso: you could also have a look at records
11:11:41 <Tomasso> Marvin--: im going to define those functions latter
11:11:45 <harsha> code_mutant Ok..you at college?
11:11:56 <Tomasso> arent records tuples?
11:12:33 <Marvin--> no, records are similar to data types, but they have "named" members
11:12:54 <harsha> The Entertainer, Billy Joel, playing now
11:13:08 <Marvin--> you can have  data Foo = C1 { x :: t1, y :: t2 } | C2 { z :: t3 }
11:13:31 <Marvin--> and you can pattern match over, say (C{ x = something, y = somethingelse })
11:14:05 <Marvin--> Tomasso: the labels also work as selector functions, so  x :: Foo -> t1
11:14:57 <ayrnieu> see http://www.haskell.org/tutorial/ 's descriptions of types
11:15:03 <Marvin--> Tomasso: the nifty thing is that you can have the same label in all branches:  data Foo = C1 { foo :: Int, bar :: Char } | C2 { foo :: Int, ugh :: String }
11:15:19 <Marvin--> (you can only do this if the label has the same type in all branches)
11:15:24 <code_mutant> yeap
11:15:28 <code_mutant> in mace
11:15:31 <code_mutant> u ?
11:16:03 <harsha> code_mutant work for a small linux firm at blr
11:16:17 <code_mutant> wow.. u work!!
11:16:21 <Tomasso> click on update
11:16:35 <harsha> code_mutant :) 
11:16:42 <code_mutant> me waiting 4 4 yrs.. then s.m. in us.. and then may b work..
11:16:51 * ayrnieu asks wget to find this 'update key'
11:17:24 <harsha> code_mutant mind being more clear? 
11:17:34 <Marvin--> Tomasso: sorry, that didn't make it clearer, what do you mean "used to dont ask in what state is each player"?
11:17:39 <harsha> code_mutant  "then s.m. in us.."
11:18:50 <ayrnieu> tomasso - I don't understand what you mean to do with the 'e f' pattern
11:18:52 <harsha> code_mutant sorry, didnt get ya
11:18:53 <ayrnieu> -match
11:18:59 <Tomasso> Marvin--: it means that to run a function, i would ask what state is the player in, but having the function attached with the state, it doesnt happen because the function is just ran without having to ask..
11:19:08 <Marvin--> ayrnieu: pattern match over both the constructor and the function inside the type
11:20:00 <ayrnieu> interesting.
11:20:07 <Tomasso> why isnt it posible to pattern match over the constructor and the function inside the type?
11:20:29 <Marvin--> Tomasso: because it only works in the very specific case when all the constructors in the datatype have the same type
11:20:41 <shapr> this may be a silly question, but does this look suspicious to you? "Nov 23 06:25:01 raven su(pam_unix)[23204]: session opened for user www-data by (uid=0)"
11:21:18 <Marvin--> root su:ing into www-data?
11:21:19 <Tomasso> Marvin--: dont all the constructors have the same type ?
11:21:54 <shapr> Marvin--: oh, duh
11:22:14 <shapr> ok, next question, how come chkrootkit says I have ps-hidden processes? it's never done that before...
11:22:23 * shapr panics!
11:22:27 <Tomasso> its a Constructor (a -> b), its always like that...
11:22:35 <Igloo> Are they the Linux kernel PID 0 ones?
11:22:45 <Marvin--> Tomasso: yes, in this case they do, but it's very rare for them to be, and your code can be rewritten to have  data Something = HaciaObjetivo | Libre | ... ; data Estado = Estado Something (yourfunctiontypehere)
11:22:49 <shapr> Igloo: yes, I think so.
11:22:52 <Marvin--> shapr: known bug
11:22:53 <Igloo> NPTL kernels are known to cause that
11:22:56 <shapr> whew
11:23:00 * shapr unpanics
11:23:03 <shapr> what's NPTL?
11:23:16 <Tomasso> hmhm Ill be here in a few hours
11:23:20 <Marvin--> shapr: any Debian developer can tell you about this after the compromise because we're all paranoid right now ;)
11:23:27 <shapr> heh
11:23:27 <shapr> ok
11:23:36 <shapr> I'm paranoid myself
11:23:45 <Igloo> Native POSIX Thread Library or something
11:23:51 <shapr> I need to brush up on unix security
11:24:04 <Marvin--> Tomasso: basically, if you have data Type = C1 T | C2 T | C3 T  (where T is some type), you might as well write it as data Type = C1 | C2 | C3 and use (Type, T) instead
11:24:06 <Lor> Will nptl be supported by 2.6?
11:24:51 <andersca> Lor: yes
11:24:55 <Tomasso> hmhm Marvin-- : you say to use a tuple?
11:25:08 <ayrnieu> marvin - after 'the compromise'?
11:25:10 <Marvin--> Tomasso: or data AnotherType = Constructor Type T  it doesn't really matter
11:25:20 <Marvin--> ayrnieu: a few debian servers have been compromised
11:25:48 <Marvin--> ayrnieu: http://www.debian.org/News/2003/20031121
11:26:17 <code_mutant> harsha..
11:26:18 <ayrnieu> tomasso - aside: you can more simply define your esquivar function as {esquivar jug@(_,_, e f, _) cas = case f jug cas of} -- though you'll still get the same error, probably.
11:26:22 <code_mutant> see... 
11:26:39 <code_mutant> i meant M.S. in us they call it  S.M.
11:26:40 <Marvin--> Tomasso: what I mean is, instead of repeating the type four times, you can separate it into two types, where one type has just the constructors
11:26:49 <Tomasso> ayrnieu: you say because of the e f ?
11:26:56 <Igloo> http://www.wiggy.net/debian/ has more info
11:27:04 <harsha> code_mutant oh, ok you wanna do your MS ?
11:27:10 <code_mutant> yeap
11:27:20 <ayrnieu> tomasso - I have no comment on 'e f' at this time.
11:27:24 <harsha> hmm, me got a visa reject :((
11:27:26 <Tomasso> Marvin--: i see
11:27:27 <Marvin--> Tomasso: you won't be able to say e f, but if you make it a tuple you can say (e,f) instead
11:27:33 <code_mutant> y?
11:27:49 <code_mutant> i hav a visiting visa
11:27:59 <harsha> code_mutant fuck, god knows why, they think i am a potential immigrant
11:28:15 <Tomasso> Marvin--: whats the approach if i do that?
11:28:23 <harsha> code_mutant hmm thats a big advantage.. which Univs are you lookin at?
11:28:40 <Tomasso> is it clearer?
11:28:57 <code_mutant> IVV leage..
11:29:01 <ayrnieu> harsha - India doesn't want to go because you might not return or the US doesn't want to go because you might stay?
11:29:10 <Marvin--> Tomasso: I think so, yes
11:29:12 <code_mutant> i always aim for the big fish
11:29:26 <Tomasso> Ok
11:29:34 <ayrnieu> also, 'you to go'.  Bizarre.
11:29:53 <harsha> code_mutant :) berkeley, i guess..
11:30:18 <Tomasso> Ohh if you want you can look a my pdf doc that has state diagrams, its in spanish but it may show the way i thought the game... 
11:30:21 <Tomasso> http://168.226.148.78/trabajo/doc/haskellstein.pdf
11:30:22 <code_mutant> nope MIT is my first choice.. after that anything thing will do
11:30:29 <Tomasso> ill be here in a few hours
11:30:46 <harsha> code_mutant hehe, neat.. which year are you in?
11:30:51 <Smerdyakov> MIT is a pretty lame place programming language choice wise. :)
11:31:01 <code_mutant> y?
11:31:10 <harsha> i knew Smerdyakov had something to say to this hehe
11:31:11 <Smerdyakov> No one likes statically typed functional languages!
11:31:27 <Smerdyakov> harsha, why me in particular?
11:31:29 <code_mutant> i didnt get u
11:31:31 <Riastradh> Smerdyakov, that's because they suck!  Oooo!
11:32:00 <Smerdyakov> code_mutant, MIT has a culture that prefers programming languages I don't like.
11:32:00 <harsha> Smerdyakov cause we have been throuh this before,thats if you remember!
11:32:08 <Smerdyakov> harsha, OK. I don't. :)
11:32:09 <ayrnieu> code - if you actually know how to speak nonhyperreductionist English, please do so.  Your 'y'/'u' and such annoy the hell out of me.
11:32:34 * Marvin-- agrees with ayrnieu
11:32:52 <code_mutant> srry
11:32:56 <code_mutant> pun unintended
11:33:07 <Marvin--> code_mutant: BURN IN HELL!!! :)
11:33:14 * shapr grins
11:33:15 <code_mutant> but i still dont get the M<IT problem
11:33:37 <Riastradh> code_mutant, Smerdyakov is bitter because they use Scheme instead of SML.
11:33:41 <harsha> code_mutant talk to Smerdyakov , he'll tell it ya :)
11:33:58 * shapr grins
11:33:58 <Riastradh> Scheme doesn't have a built-in, fascistly strict type system, while SML does.
11:34:09 <shapr> ah, but SML submits to impurity...
11:34:20 <harsha> code_mutant which year are you in?
11:34:31 <harsha> code_mutant  at school?
11:34:33 <code_mutant> im a fresher
11:34:41 <Riastradh> code_mutant, 'I'm.'
11:34:50 <code_mutant> srry
11:34:56 <harsha> code_mutant Engineering? 
11:34:58 <shapr> a fresher?
11:35:04 <code_mutant> yeap
11:35:12 <code_mutant> www.mace.ac.in
11:35:31 * ayrnieu remains a bit puzzles as to why a random programmer would use SML over O'Caml.
11:35:50 <Lor> It's prettier.
11:36:12 <Marvin--> ayrnieu: "The trouble with randomness is that you can never be sure" to quote a Dilbert strip that our algorithms lecturer always brings up ;)
11:36:15 <harsha> code_mutant actully,never heard of this college :)
11:36:56 <harsha> code_mutant seems good though
11:37:07 <ayrnieu> Lor - prettier?  Perhaps my initial exposure to O'Caml biases me.
11:37:17 <Lor> ocaml is horrendously ugly.
11:37:25 <harsha> code_mutant looks like a typical  .edu site
11:37:27 <Lor> Well, I exaggerate. But it's not pretty.
11:37:47 <Lor> It would benefit greatly from a sequential let-construct.
11:37:56 <Lor> Or actually a haskell-style do-syntax would be better.
11:38:08 <Lor> Dang, I gotta finish my haskell-style preprocessor for ocaml some day.
11:39:04 <code_mutant> it has god a1 accrediation
11:39:18 <code_mutant> 21st in all india ranking
11:39:24 <harsha> code_mutant ok..
11:39:30 <ayrnieu> Indeed, there exist alternate O'Caml syntaxes; I don't know how well these have caught on.
11:39:52 <code_mutant> but i still dont get the MIT problem
11:39:53 <Lor> For some reason indian students seem to spam educational institutions with CVs.
11:40:06 <code_mutant> well..
11:40:08 <code_mutant> lor
11:40:22 <harsha> Lor why do you think so?
11:40:22 <code_mutant> its the IV league that forces me
11:40:25 <Smerdyakov> code_mutant, at Berkeley, they don't admit any Indian students who don't meet one of the following requirements:
11:40:26 <Lor> Every now and then I receive mails that have been addressed to tens of random people at our department.
11:40:34 <Smerdyakov> 1) They go to IIT.
11:40:46 <Smerdyakov> 2) They have recommendations from very well known people in their fields.
11:41:07 <Smerdyakov> The one non-IIT student who got into CS here that I know had a recommendation from an alumnus. That might be necessary.
11:41:09 <harsha> Smerdyakov well,said. hehehe
11:41:22 <Lor> What's IIT?
11:41:27 <ca> Smerdyakov: why the IIT restriction?
11:41:29 <code_mutant> i agree with harsha
11:41:40 <harsha> Indian Institutes of Technology
11:41:46 <Smerdyakov> The only Indian university that is known to produce good students, from the American viewpoint.
11:42:16 <harsha> Smerdyakov not necessarily actually, yes i agree to the american view point
11:42:21 <code_mutant> but then.. trust me..
11:42:33 <Smerdyakov> Or it might be an issue of lack of comparability of grades and such. But, for whatever reason, it is next to impossible (according to what I've heard) to evaluate the abilities of non-IIT Indian students.
11:42:55 <code_mutant> even.. linus tolvars woudlnt get through IIT-JEE
11:43:04 <ca> iam sure there are standardised tests, what about that GRE thing?
11:43:07 <Smerdyakov> code_mutant, what does that mean? What is IIT-JEE?
11:43:11 <Lor> No one has ever claimed that Linus was a particularly good student.
11:43:17 <harsha> code_mutant stop that comparison
11:43:20 <Lor> (And I'm from where he studied.)
11:43:47 <Smerdyakov> ca, well, if you have no idea how well students have done in challenging classes, you take a risk by relying only on the EASY GRE exams.
11:44:23 <Smerdyakov> This is especially difficult for masters applicants, I'd imagine.
11:44:25 <ca> Smerdyakov: ah, so the GRE's are easy? I heard some friends complaining about how difficult the maths/physics tests were. 
11:44:35 <Smerdyakov> Almsot all PhD applicants have research experience, and you can evaluate them on that.
11:45:07 <code_mutant_> but then
11:45:09 <Smerdyakov> If you only have classes and GRE scores to work with, how could you possibly compare across the gazillion Indian universities that apparently have academic standards below those of the top tier of American universities?
11:45:24 <code_mutant_> i hate ppl comparing talent with grades
11:45:37 <shapr> yah, truly
11:45:37 <Lor> Smerdyakov, entrance tests?
11:45:44 <Smerdyakov> How else do you suggest someone on another contient who has never met you to gauge your talent?
11:45:58 <shapr> look at the software I've written?
11:46:06 <Smerdyakov> You are free to submit additional materials with your application.
11:46:21 <Smerdyakov> But the LEGIONS of Indian applicants tend to just submit lists of classes and awards, I'd guess.
11:46:23 <code_mutant_> well.. u dont know how.. hard is it to even "mentally" prepare onself to face the IIT-JEE
11:46:27 <Smerdyakov> So they have NO OTHER WAY of telling how good you are!
11:46:49 <shapr> hi scarface 
11:46:52 <ca> comeon .. its only CS  :)
11:46:52 <shapr> wow, 77
11:46:58 <Smerdyakov> code_mutant, well, if you can't prepare for it, then you probably aren't someone MIT would want to admit.
11:46:59 <harsha> chill code_mutant Smerdyakov  does not know what is IIT-JEE 
11:47:12 <harsha> i guess, do you Smerdyakov ?
11:47:25 <Smerdyakov> harsha, I don't, and I asked what it is, and have received no direct answer.
11:47:33 <Smerdyakov> harsha, I think someone said it was an entrance exam, though. :)
11:47:34 <shapr> oh no, not this again
11:47:38 <code_mutant_> i can understand harsha.. but still.. thought.. it wasnt fair.. to give "undue" advantage to an iitian
11:47:40 <scarface> shapr: hi
11:47:51 <harsha> hey scarface whats up man ?
11:47:57 <scarface> harsha:hi
11:48:03 <Smerdyakov> code_mutant_, stop talking about _fairness_. Put yourself in the shoes of a department deciding whether or not to admit you.
11:48:05 <harsha> scarface whats new?
11:48:20 <code_mutant_> hmm.. i can see..
11:48:21 <Smerdyakov> code_mutant_, HOW can they decide whether to favor you over an American student from MIT if all they have are your grades and test scores?
11:48:22 <scarface> harsha: the same old stuff
11:48:29 <harsha> scarface hmm..
11:48:31 <code_mutant_> u r also rite.. smer
11:48:35 <Lor> Some IITers have for some reason sent internship applications to _me_. And presumably to thousands of other people as well...
11:48:39 <shapr> If I try to enter a graduate department, I hope to have written software in the accompanying area already.
11:48:48 <Smerdyakov> code_mutant_, it's well accepted here that the classes everywhere but IIT are orders of magnitude easier than at MIT, or something like taht.
11:49:06 <Smerdyakov> code_mutant_, but your grades can't show that difference. If you get an A+, it could just be because the classes are easy!
11:49:20 <shapr> on the other hand, the people on this channel collectively know lots about Computer Science, so you're improving your chances if you learn stuff here
11:49:25 <code_mutant_> i can understand
11:49:37 <Smerdyakov> shapr, realistically, he's already lost by not trying to get into IIT.
11:49:39 <harsha> hey, can we *freeze* on this? 
11:49:59 <Lor> Never say never.
11:50:02 <shapr> yah, get over it, kill the subject
11:50:11 <shapr> I don't think anyone's 'lost' anything.
11:50:18 <code_mutant_> but then.. the reason for me studying in this particular college under this particular university ..was that it was well recogonised by iv league
11:50:28 <Smerdyakov> He's lost a chance of getting into a top American university, since he gives them no way to evaluate him fairly.
11:50:35 <harsha> Smerdyakov am just curious, do they *consider* post grads( from IIT) for research? 
11:50:36 <shapr> Smerdyakov: get over it
11:50:46 <shapr> feel free to take this discussion to another channel
11:50:49 <Smerdyakov> shapr, you're the one who said "kill the subject" and then continued....
11:50:53 * Lor hacks and slices the subject to bloody pulp.
11:51:01 <shapr> Smerdyakov: I apologize, I shall not continue.
11:51:04 <code_mutant_> Smer
11:51:08 <shapr> now, please take it to another channel.
11:51:17 <Smerdyakov> harsha, post grads?
11:51:26 <Smerdyakov> harsha, you mean like hiring someone who already has a PhD?
11:51:37 <harsha> Smerdyakov  can i Pm you hehhe ?
11:51:41 <Smerdyakov> Yup.
11:51:43 <code_mutant_> can u tell me if there is anyway 4 me to know whether my univ. and my coll is recognised by iv league?
11:51:46 <harsha> dont want to continue this here..
11:51:54 <Smerdyakov> harsha, can you join #hprog?
11:51:55 <shapr> functional programming is getting more interest on TheOriginalWiki
11:52:05 <harsha> Smerdyakov : sure
11:52:22 <harsha> scarface give me a min ,  i' ll be with you
11:53:04 <scarface> shapr: how you doin?
11:53:06 <shapr> lambdabot's dynamic loading code would be much simpler if the module representation code from LIP were available.
11:53:13 <shapr> scarface: doin okay, hacking along, how are you?
11:54:06 <shapr> hei ksandstr 
11:54:14 <shapr> learning Haskell?
11:54:24 <scarface> shapr: doing ok to..
11:54:32 <ksandstr> yeah, from time to time
11:54:57 <shapr> ksandstr: have any questions? want intro information?
11:56:39 <Lor> Be warned, though, you need to understand stuff like http://iki.fi/la/ss.png to grok haskell.
11:56:45 <Lor> (Just kidding)
11:57:26 <shapr> yow
11:57:35 <jameson> BTW, I read a paper on type classes for more than one type a while ago (allowing stuff like "Foo a, b => a -> b"). Is something like that included in Haskell98? Or in ghc?
11:57:45 <Riastradh> And you have to wear the shirt at http://www.cafeshops.com/skicalc
11:57:58 <shapr> jameson: yes, typeclasses are standard now.
11:58:12 <ksandstr> shapr: not in particular, no. i'm mostly trying to wrap my brain around the way that happy uses a lexer monad
11:58:22 <Riastradh> shapr, he was asking about multiparametre typeclasses, I think.
11:58:31 <jameson> Riastradh: Yes, exactly.
11:58:43 <shapr> oh
11:58:48 <Riastradh> Which are not in Haskell 98.
11:58:49 <shapr> those are in GHC, yes.
11:59:02 <jameson> Ah, OK. Thanks!
11:59:12 * shapr tries to debug wiwiwi
11:59:41 <Lor> I still think System F would have been prettier than HM.
11:59:53 <Lor> (re: the shirt)
12:00:16 <Riastradh> System F?
12:00:22 <Marvin--> oh, right
12:00:26 <Marvin--> andersca: were you going to order shirts?
12:00:29 <Lor> polymorphic lambda calculus.
12:00:32 <shapr> Lor: well, crank one up
12:00:36 <andersca> Marvin--: yes, just need to get money from CSN first
12:00:38 <andersca> so tuesday
12:00:50 <Marvin--> andersca: right, I want a HM t-shirt
12:01:06 <Marvin--> I wonder if I should have a L or XL
12:01:09 <shapr> or alternatively, submit System F t-shirt designs to Riastradh for inclusion
12:02:34 <Marvin--> shapr: you know American sizes, should I have an L or XL t-shirt?
12:02:42 <Riastradh> Boy, I'm really raking in the dough with those shirts!  I've made a whole SIX CENTS so far!
12:02:48 <Marvin--> Riastradh: woot!
12:04:16 <Riastradh> The people who have bought one so far are: Steven Schafer, Christian Plesner Hansen, Robert Sanders, Michael Vanier, Geoffrey Washburn, Ashley Yakely, and Kirsten Chevalier.
12:04:35 <Marvin--> shouldn't you have made seven cents then?
12:04:40 <Riastradh> Hmmm.  Good point.
12:04:54 <Riastradh> CAFEPRESS HAS EXTORTED A CENT OUT OF ME!
12:05:08 <ayrnieu> ANNIHILATE THEM
12:05:08 <Riastradh> Oh.  Er.
12:05:19 <Riastradh> I apparently read it wrong.
12:05:20 <Marvin--> maybe they take the first cent for administrative reasons? :)
12:10:53 <phubuh> hmm.  my family is gone.
12:15:03 <shapr> Marvin--: I don't know
12:15:08 <shapr> phubuh: did they leave you behind?
12:15:43 <Marvin--> shapr: dang
12:16:09 <shapr> Marvin--: sorry
12:16:25 <Marvin--> andersca: go for L for me, then :)
12:16:32 <shapr> Marvin--: I usually require an XXL, so I'd suggest an XL
12:16:36 <phubuh> shapr: I was at the cinema, so I guess so
12:16:38 <shapr> but YMMV
12:16:54 <Marvin--> shapr: hm, okay
12:16:58 <Marvin--> andersca: make that XL then ;)
12:17:07 <andersca> yeah, I usually get XL
12:21:00 <shapr> Lunar^: hey, you awake?
12:46:43 <shapr> hi amor 
12:46:58 <amor> hi shapr
12:47:14 <amor> im Tomasso in my friend's house :D
12:47:18 <amor> haha
12:48:29 <shapr> hello Tomasso!
12:50:59 <amor> Hello!
12:50:59 <amor> haha
12:51:07 <amor> im still connected in my house
12:51:10 <amor> :D
12:51:13 <shapr> Are you teaching your friend about Haskell?
12:51:33 <amor> he gave up the course
12:51:36 <shapr> aww
12:51:43 <amor> is optative
12:51:50 <shapr> he can still learn Haskell here on this channel.
12:51:57 <shapr> we're happy to help.
12:52:01 <amor> sure he can
12:52:04 <amor> hehe
12:52:09 <amor> me too
12:52:35 <shapr> yes, Haskell is good for you.
12:52:41 <shapr> (if you want to be a better programmer)
12:53:35 <opet> otherwise just go use VB ;)
12:53:45 <amor> uggh
12:54:07 <amor> or ada as they do..
12:54:30 <amor> he changed functional programming for an unuseful ada course hahahaha
12:54:39 <shapr> yikes
13:01:19 <ayrnieu> bizarre.
13:08:13 <shapr> oh, prologic is probably not coming back :-(
13:21:38 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/","Any user who would like to request any unwritten tutorial please msg shapr", "peakUsers=73"]' by Jad
13:25:35 <shapr> actually, peakUsers is at least 76
13:25:41 <shapr> unless you count bots ...
13:38:27 <Jad> sorry
13:38:33 <shapr> no worries
13:38:39 <Jad> but i remember last time it was 72
13:38:43 <shapr> I think so
13:39:31 <Jad> fuck turtle graphics
13:40:08 <ayrnieu> jad - hm?
13:40:53 <Jad> nothing
13:40:54 <andersca> hmm, is it possible in ghci to see what a different constructors a data type has?
13:41:05 <Jad> am doing Polyspirals
13:41:06 <ddarius> :info maybe
13:41:10 <Jad> an auto generator
13:41:40 <Jad> it was working, suddenly after some code addition
13:41:44 <Jad> it broke up
13:49:40 <ayrnieu> a 5d turtle would be interesting, where the extra dimensions are rgb or that other color-describing system.
13:52:06 <Jad> yep
13:52:11 <Jad> good idea
13:53:59 * Leimy is back (gone 03:26:25)
14:16:56 * shapr finds the bug
14:17:45 <ddarius> which? and in what?
14:18:47 <ayrnieu> In the wiki, I suppose.
14:19:49 <shapr> er yes, in wiwiwi
14:33:57 <ayrnieu> after reading http://www.ps.uni-sb.de/~rossberg/SMLvsOcaml.html I don't agree that SML looks prettier than O'Caml.
14:36:36 <Smerdyakov> I don't think there's any significant difference in "prettyness."
14:36:55 <Lor> The essential difference is in the let bindings.
14:37:00 <Riastradh> They're both horrendous in terms of 'prettiness.'
14:37:15 <Lor> ocaml's let foo = ... in let bar = ... in let baz = ... in expr is pretty horrendous.
14:38:01 <Lor> You often get a big expression on one line, and then an extraneous "in" at the end, and without syntax highlighting you wouldn't notice that it's a keyword and not part of the expression.
14:38:13 <exarkun> Omitted from that comparison seems to OCaml's class syntax (which can't be compared to SML's, I guess)
14:38:23 <ayrnieu> Lor - that page has quite a bit more than let forms, but OK.
14:38:28 <Lor> What would it be compared against?
14:39:09 --- mode: ChanServ set +o Lor
14:39:11 <exarkun> Yes.  Precisely.  But it is a major factor contributing to the uglyness of much OCaml.
14:39:17 <Lor> Haskell is definitely much prettier, yes.
14:39:26 <Lor> Huh? Why did it do that?
14:39:37 * shapr spreads confusion
14:40:03 <Lor> I didn't know that there _were_ ops on FreeNode. :)
14:40:44 <shapr> we have ops, and we're not afraid to use them!
14:40:49 <shapr> just rarely need to
14:41:46 * Lor feels like he's been given a sword an now expects an order to confront a dragon...
14:41:49 <ayrnieu> very aside: pity that there seem to exist no free or open-source APLs.  Even if I could have accepted binary-only usage on linux, I certainly won't accept having to use linux_compat on OpenBSD.
14:41:53 * shapr points at lambdabot 
14:41:58 <exarkun> ayrnieu: A+
14:42:14 <shapr> I think lambdabot is the standard whipping boy around here.
14:42:21 <Smerdyakov> APL's?
14:42:21 <shapr> he gets all the abuse.
14:42:38 <ayrnieu> exar - hm.  I'd heard of that as a predecessor of K, somehow, but I'll look at it.  Thanks.
14:42:56 <Smerdyakov> Hooray. I just verified a Scheme program compiled to Typed Assembly Language. :D
14:43:05 <Lor> Wow.
14:43:14 <Lor> That's, like, substantial.
14:43:35 <Smerdyakov> The Talc Scheme compiler uses one type to represent dynamically typed Scheme objects.
14:44:01 <Smerdyakov> It manages to use recursive, sum, product, universal, and exisential types all in that one type. :)
14:44:27 <Lor> Hm, what does it need existentials and universals for?
14:44:41 <Lor> Closure conversion?
14:44:57 <Smerdyakov> Existentials for closures. (Really only an optimization of records instead of lists for environments)
14:45:11 <Smerdyakov> Universals for abstraction over stack types.
14:45:24 <Lor> Ah, it's _so_ low-level.
14:45:39 <Lor> In TAL, functions really mean rigid pieces of code?
14:46:19 * Lor has printed "From F to TAL" but hasn't yet read it very thoroughly.
14:46:28 <Smerdyakov> Rigid? O_o
14:47:01 <Lor> Anything that's not a closure is rigid. :)
14:47:02 <Smerdyakov> The only function-related type is "pointer to code that works when the registers have the following types"
14:47:11 <Lor> Right, that's what I meant.
14:47:43 <Lor> (Presumably it also says something about the types of the registers after the code returns)
14:47:51 <Smerdyakov> Nope.
14:48:08 <Smerdyakov> Why constrain code to return to anything?
14:48:09 <Lor> They have to stay the same?
14:48:24 <Lor> How do you define the return type in practice, then?
14:48:24 <Smerdyakov> *ahem* continuation passing style *cough* ;)
14:48:32 <Lor> Hm. Right.
14:48:38 <Lor> Makes sense.
14:48:52 <Lor> I'm not used to _so_ low-level thinking. :)
14:48:57 <Smerdyakov> Especially since it involves the same runtime data layout as is used in practice.
14:48:58 <Lor> Even in C-- there's the concept of "returning"...
14:49:11 <Riastradh> CPS is not 'low-level.'
14:49:18 <Smerdyakov> CPS in TAL is. :)
14:49:22 <Lor> Riastradh, it is when viewed at assembly level.
14:49:29 <Lor> The return address in the stack is a continuation.
14:49:29 <Riastradh> Oh.
14:49:56 <Lor> I must say, that's an utterly cool way of viewing it.
14:50:29 <Lor> No more will I say that CPS is an "unrealistic" or "inefficient" way of implementing programs. :)
14:50:38 <Smerdyakov> I'm working on this as part of a project developing techniques for allowing untrusted verifiers for particular safety mechanisms.
14:50:46 <Riastradh> So what's this 'Talc Scheme' thing?
14:50:59 <Smerdyakov> I have to formalize why TAL is safe in first-order logic proofs to feed to the trusted core.
14:51:23 <Smerdyakov> Riastradh, Cornell Talc comes with a Scheme-to-x86-TAL compiler.
14:51:41 <Riastradh> Bah, x86!
14:52:02 <Lor> Bah, no debian package.
14:53:12 * Lor feels uncomfortable.
14:53:16 --- mode: Lor set -o Lor
14:53:20 <Lor> That's better. :)
14:54:36 * shapr grins
14:54:51 <dark> It's all a matter of where you wear the o.
14:55:40 <Riastradh> Wearing it on your eyes to make you look like a scurvy pirate with far too much power is certainly uncomfortable.
14:55:50 <Riastradh> s/eyes/eye as a patch/1
14:56:05 <shapr> @arr
14:56:05 <lambdabot> Ahoy mateys
14:57:09 <Smerdyakov> @arr
14:57:10 <lambdabot> Aye Aye Cap'n
15:00:40 <shapr> g'day Pseudonym 
15:00:48 <Pseudonym> G'day.
15:01:28 <shapr> what's up?
15:01:32 <shapr> still doing RH?
15:01:40 <Pseudonym> RH?
15:01:46 <Pseudonym> Red hat?
15:01:49 <shapr> release hell?
15:02:01 <Pseudonym> Ah, no, that's over for me, finally.
15:02:35 <Pseudonym> Been thinking about a physics problem.
15:02:44 <shapr> ?
15:03:11 <Pseudonym> My grandfather does a lot of woodworking, and he's constructed a top, based on an old Japanese design.
15:03:27 <Pseudonym> The odd thing is that if you spin it hard enough, the top flips over.
15:04:12 <shapr> do you have a picture of the top?
15:04:22 <Pseudonym> No, but I will take one.
15:04:25 <shapr> ok
15:04:47 <Pseudonym> Unlike a Western top, this doesn't have a single point on which it spins.
15:04:50 <shapr> I suspect coriolis forces
15:05:28 <Pseudonym> Consider, for example, a half-sphere with a handle along its axis of rotation.
15:05:43 <Pseudonym> This could actually rotate on _any_ point of the half-sphere.
15:06:00 <Pseudonym> It's not actually a half-sphere plus handle, but this is a good way of thinking about it.
15:06:00 <shapr> in that case, the point of contact would always be offset to the axis of spin
15:06:05 <shapr> I think that would explain the turning over
15:06:05 <Pseudonym> Yes.
15:06:11 <Pseudonym> Not quite.
15:06:51 <Pseudonym> One of the things I discovered first (and I'm using the half-sphere as a mathematical model to see how far I get first) is that its moment of inertia is the same along all axes.
15:06:57 <Pseudonym> That's interesting.  I didn't expect that.
15:07:16 * shapr googles for moment of inertia
15:07:23 <Pseudonym> Secondly, and I think this is the most important feature, the centre of mass is on the other side of the pivot compared with a Western top.
15:07:33 <shapr> hi sparkersi 
15:07:47 <sparkersi> hi all, im really new to the haskell programming language...
15:07:48 <shapr> are you new here?
15:07:52 <shapr> ah, good answer
15:07:53 <sparkersi> yup
15:07:56 <sparkersi> hehe
15:08:07 <sparkersi> what does the following line of code do?  [ x | x <- xs, p x ] 
15:08:13 <shapr> best place to start learning is http://www.haskell.org/learning.html
15:08:23 <shapr> sparkersi: that's a list comprehension
15:08:26 <sparkersi> i'm having a little trouble understand what it does....ok, ill check that out
15:08:29 <shapr> the p is a predicate
15:08:39 <sparkersi> right, i know scheme pretty well
15:08:45 <sparkersi> which is similar to haskell i think
15:08:46 <shapr> and x <- xs assigns each item in xs to x in turn
15:08:54 <Riastradh> It says: construct a list of, for every x in the list xs, such that p x evaluates to True, x.
15:09:19 <sparkersi> ahh, so it walks the list pretty much, rather than doing it in a recusrive fasion, it does it iteratively?
15:09:24 <shapr> so, for [ x | x <- [1,2,3,4], (> 2) x] you get back [3,4]
15:09:24 <ddarius> It's another way of writing filter p xs
15:09:26 <Riastradh> It's like (filter p xs) in Scheme.
15:10:18 <sparkersi> ahh, so the <- func takes two args...a list and a predicate?
15:10:25 <Riastradh> <- isn't a function.
15:10:38 <Riastradh> The clause 'x <- xs' says 'for every element x of the list xs...'
15:10:45 <sparkersi> ok, i see now
15:10:49 <sparkersi> what about the pipe
15:10:54 <sparkersi> x | ...
15:11:07 <Riastradh> The clause 'p x' says 'and only use the body (the part left of the pipe) if "p x" evaluates to True.'
15:11:18 <Riastradh> The stuff left of the pipe is the body, the stuff that actually generates the element.
15:11:26 <ddarius> List comprehensions are just syntactic sugar for concats, maps, and filters.
15:11:27 <sparkersi> ahh, i see
15:11:56 <sparkersi> great, thanks for all your help! im going to bookmark that link and get reading ; = p
15:13:05 * ayrnieu finds it bizarre that sparkersi thinks of list comprehensions as walking the list 'iteratively' rather than 'recursively.
15:13:49 <Pseudonym> Especially odd for a scheme programmer.
15:14:07 <Lor> Um. In scheme lingo, tail recursion is also called iteration.
15:14:24 <Riastradh> No, in Scheme lingo, tail recursion is tail recursion.
15:14:33 <pimpbot5000> hehe
15:14:35 <pimpbot5000> true
15:15:20 <sparkersi> sorry, don't know what i was thinking when i wrote that. my bad!
15:15:24 <Riastradh> Iterative _processes_ as described by SICP happen to need to be tail-recursive, but functions that contain only tail calls for recursion are just called 'tail-recursive.'
15:15:44 <Lor> All right, I was just about to dump a reference to sicp. :)
15:16:45 <Pseudonym> Oh, now that's interesting.
15:16:57 <emu> tail recursion sends heads in loops
15:17:04 <Pseudonym> The reason a boomerang returns is gyroscopic precession.
15:17:18 <sparkersi> so what would be another way to write the filter function in haskell? the one i pasted is straight out of the prelude
15:17:32 <emu> boomerangs don't return, they embed themselves into animals, people
15:17:35 <Pseudonym> filter p [] = []
15:17:39 <ayrnieu> sparkersi - what function definition did you paste?
15:17:49 <Pseudonym> filter p (x:xs) = if p x then x : filter p xs else filter p xs
15:17:59 <Pseudonym> That's not what I'd write, but it works.
15:18:03 <sparkersi> [ x | x <- xs, p x ] 
15:18:07 <Riastradh> Pseudonym, what would you write?
15:18:20 <ayrnieu> sparkersi - I don't see a filter definition, there.  I see a list comprehension.
15:18:31 <Pseudonym> I'd share the definition of filter p xs, and probably use a guard.
15:18:35 <sparkersi> open up the prelude
15:19:03 <Pseudonym> filter p (x:xs) = (if p x then (x:) else id) $ filter p xs
15:19:22 <Pseudonym> I probably wouldn't write that either. :-)
15:19:27 <sparkersi> heh
15:19:56 <dark> let xs' = filter p xs in if p x then x : xs' else xs'
15:19:57 <Riastradh> @prelude filter
15:19:57 <lambdabot> ERROR: does not exist
15:19:57 <lambdabot> Action: connect
15:19:58 <lambdabot> Reason: Connection refused
15:20:17 <Pseudonym> Eel.
15:20:22 <dark> I keep wanting to use the name "tail" for things xs'
15:20:27 <Pseudonym> Eek, too.
15:20:33 <shapr> tmoertel's server is down
15:20:41 <dark> lambabot doesn't like you.
15:20:45 <Pseudonym> Ah.
15:20:46 <Riastradh> Tell him to fix it, damnit!
15:20:59 <shapr> I'll send him an email and see if I can host it on raven
15:21:10 <Pseudonym> It's interesting that the error message appeared both in /msg to me and also to the channel.
15:21:13 <Riastradh> All he has to do is apply it to its resutls!
15:21:14 <ddarius> dark: then use it
15:21:16 <Riastradh> Results, even.
15:21:17 <dark> I think GHC's prelude defines filter with that odd "build" function.
15:21:30 <shapr> Pseudonym: that is weird
15:21:30 <Pseudonym> Ah, yes.
15:21:38 <dark> ddarius: I'd get a warning from ghc.  And it would be right :-)  It's going to be massively confusing to people who don't think like me.
15:21:38 <shapr> @prelude filter
15:21:38 <lambdabot> ERROR: does not exist
15:21:38 <lambdabot> Action: connect
15:21:38 <lambdabot> Reason: Connection refused
15:21:45 <shapr> hm, didn't happen to me.
15:21:47 <Pseudonym> filter p (x:xs) | p x = build x (filter p xs)
15:21:49 <ayrnieu> IIRC the Tour of the Haskell Prelude defines filter.
15:21:49 <ddarius> dark: Well, yes.
15:21:54 <Pseudonym> Or something.
15:21:56 <ayrnieu> Also, the report.
15:22:22 <Pseudonym> shapr: Try asking it in /msg.
15:22:29 <sparkersi> so i take it you guys dont use hugs then?
15:22:35 <ddarius> dark: I use 'rest' at times.
15:22:51 <dark> ddarius: Hmm, that's a good name.
15:22:57 <Pseudonym> sparkersi: We use anything.  So long as it's Haskell.
15:22:59 <ddarius> sparkersi: ? How did you get that form what was said?
15:23:07 <ddarius> s/form/from
15:23:11 <ayrnieu> sparkersi - I use hugs when I want to use GHCi, because OpenBSD ports doesn't build GHCi and I have trouble building GHC at all.
15:23:12 <shapr> seems correct
15:23:17 <sparkersi> no, i was just wondering, you said you couldnt find filter in the prelude
15:23:26 <sparkersi> its in the hugs prelude, and it doesnt use build
15:23:27 <ayrnieu> sparkersi - who said that?
15:25:54 <ayrnieu> (sparkersi - you might also find http://www.willamette.edu/~fruehr/haskell/evolution.html interesting)
15:27:16 <sparkersi> heh
15:46:42 <juhp> shapr: hello!
15:46:59 <shapr> hi juhp!
15:47:04 <shapr> ohio gozymous
15:47:09 <juhp> :)
15:47:15 <juhp> morning
15:47:33 <juhp> how's it going
15:47:39 <juhp> oh, the phone
15:48:01 <Pseudonym> Phone.
15:48:24 <Pseudonym> Oh, yeah, I remember the phone.  It's like VoIP only you can hold it in your hand.
15:49:43 <Pseudonym> Phones are made out of bakelite and have a dial on the front, right?
15:50:30 <ayrnieu> Pseudonym - yes.  The best kinds can work without electricity, needing only a phoneline connection.
15:50:42 <Pseudonym> Gee, that's clever.
15:50:47 <Pseudonym> No batteries?
15:50:53 <ayrnieu> No batteries!
15:50:57 <Pseudonym> Wow.
15:52:04 <ayrnieu> More 'modern' phones with answering machines and such (but no VoIP) tend to not work at all without additional electricy.
15:52:09 <ayrnieu> also, electricity.
15:54:36 <Pseudonym> The more I think about it, the more I realise that Edison needs to be redesigned again.
15:54:37 * Pseudonym sighs
15:54:54 <shapr> how so?
15:55:04 <Pseudonym> A lot of the "interesting" data structures are defined in state monads.
15:55:05 <shapr> the single faceted monads you were talking about recently?
15:55:47 <Pseudonym> I think the Right Thing(tm) is to define them in terms of Iavor's new-look monad template library.
15:56:09 <Pseudonym> Rather than MonadIO, his defines HasBase, which lifts to the "base" monad in a stack of transformers.
15:56:23 <Pseudonym> For example:
15:56:30 <Pseudonym> class HasBase base m | m -> base where
15:56:38 <Pseudonym>     liftToBase :: base a -> m a
15:56:47 <Pseudonym> Given that, I think this is the right interface:
15:57:06 <Pseudonym> class Collection c base a | c -> a, c -> base where
15:57:09 <Pseudonym>     {- etc -}
15:57:20 <Pseudonym> where "base" might be the identity monad.
15:57:42 <Pseudonym> Hmm.
15:58:03 <Pseudonym> Are any interesting data structures more accurately defined in a monad transformer, rather than a base monad like IO or ST?
15:58:24 * shapr watches all this go over his head ;-)
15:58:38 <Pseudonym> The nice thing about this approach is that this makes the left-fold operation quite natural.
15:58:39 <ddarius> Pseudonym: What do you mean by "more accurately"?
15:58:56 <Pseudonym> I mean more accurately than a base monad.
15:59:01 <Pseudonym> Uhm...
15:59:04 <Pseudonym> How about "more generally"?
15:59:17 * ayrnieu wonders if the copyright on Bach's music has run out, yet, to allow him to download an mp3 of Tocatta and Fugue in D-Minor.
15:59:28 <Pseudonym> ayrnieu: Yes and no.
15:59:29 <mattam> yep
15:59:32 <dark> ayrnieu: I think the performance has its own copyright.
15:59:43 <Pseudonym> The copyright on the original music has.  The performance may not.  The published edition may not.
15:59:57 <ayrnieu> 'published edition'?
16:00:02 <Pseudonym> Oh, yes.
16:00:21 <mattam> you can ignore it, you would d/l any performance likewise wouldn't you ?
16:00:22 <shapr> each edition of the scores have their own copyright
16:00:30 <Pseudonym> Right.
16:00:48 <Pseudonym> And if the edition is still under copyright, then in some jurisdictions, you need to pay royalties to the publisher to perform it.
16:01:03 <Pseudonym> In Australia, it's referred to as "exercise of the grand right".
16:01:08 <ayrnieu> Somebody has been producing new and improved editions of Bach's music so recently that copyright law might still apply to it?
16:01:09 <mattam> hahaha
16:01:15 <Pseudonym> Which sounds very noble and uplifting, but it's actually extortion.
16:01:18 <shapr> ayrnieu: sure, lots
16:01:29 <ayrnieu> bizarre.
16:01:39 <Lor> Yes, it's outrageous.
16:01:43 <Pseudonym> It only applies to works intended to be performed onstage, though.
16:01:44 <shapr> copyright law is mostly about extortion, imho
16:01:56 <shapr> same for patents, dmca, riaa, mpaa, etc
16:01:59 <Pseudonym> You think we geeks have a problem with copyright.  Talk to a music teacher some time.
16:02:21 <Pseudonym> Or the director of a community orchestra/choir/theatre troupe.
16:02:28 <shapr> Pseudonym: there is a solution, sort of...
16:02:32 <shapr> for music teachers, that is
16:02:37 <ddarius> I think we may have a problem with patents that music teachers don't.
16:02:50 <Pseudonym> ddarius: Yes, I'm specifically talking about copyright.
16:02:53 <mattam> which one ddarius ?
16:03:03 <Pseudonym> Music teachers have a problem with public performance that geeks don't.
16:03:14 <ayrnieu> also, I've just discovered the name of the music that randomly comes back to me from Gyruss -- a nintendo game that I used to play a great deal.  I suppose that somebody holds a copyright for this published edition.
16:03:16 <ddarius> mattam: I don't think anyone has, you know, a patent on say the pentatonic scale.
16:03:24 <mattam> oh, you mean there are no patents on music :)
16:03:29 <dark> Pseudonym: there have been attempts to categorize web applications as public performance of code.
16:03:36 <Pseudonym> You can patent an instrument, I suppose.
16:03:43 <mattam> yeah, sure. Maybe some instruments will have though
16:03:58 <mattam> thinking in parallel by example
16:04:01 <Pseudonym> dark: Yes, I know.  Which just goes to show that there are big problems with using 19th century law to describe 21st century situations.
16:04:05 <dark> You can probably patent certain guitar modifications.
16:04:25 <shapr> http://denemo.sourceforge.net/
16:04:55 <shapr> now I ask my genie in the lamp to integrate lilypond, denemo, and haskore
16:05:23 * ayrnieu finds somebody's own rendition of Tocatta and Fugue in D-Minor that they've made an mp3 of.
16:06:07 <Smerdyakov> OK, pumpkin face.
16:06:18 * shapr leers like a pumpkin
16:06:39 <mattam> do you know of any distributed algorithms simulation framework in haskell ?
16:09:39 <shapr> I think one of the parallel haskell implementations has that sort of thing
16:11:16 <ayrnieu> shapr - what solution do music teachers have for copyright problems?
16:11:32 <shapr> denemo and lilypond
16:12:39 <shapr> hi pep 
16:12:54 <pep> hi shapr :)
16:13:04 <shapr> how's code?
16:13:11 <pep> heh
16:13:22 <Pseudonym> You know, there are no good music publishing systems for open source systems.
16:13:27 <Pseudonym> Lilypond is crap.
16:13:34 * pep doesn't coded anything special since early 2002 :)
16:13:41 <shapr> lilypond output sure looks nice
16:13:42 <ayrnieu> pep - why not?
16:13:57 <pep> eh
16:13:59 <Pseudonym> Yeah, but I want to play it in on my MIDI input device.
16:14:01 <pep> too much to say
16:14:09 <shapr> Pseudonym: use denemo, it does that
16:14:45 <Pseudonym> Does denemo handle pieces with multiple movements?
16:14:52 <Pseudonym> Part extraction?
16:15:04 <shapr> I don't know.
16:15:14 <shapr> but it can't be worse than what Bea's choir is using now.
16:15:46 <pep> okay fellows, g'night :)
16:15:51 <shapr> g'night pep
16:15:52 * pep is off
16:15:58 <Pseudonym> Night.
16:16:04 <mattam> shapr: do you mean concurrent haskell or do I missed some haskell impl on the site ?
16:16:05 <Pseudonym> Too late.
16:16:32 <shapr> mattam: no, I mean GuM or one of those
16:16:46 <shapr> GpH, GuM, ?
16:16:50 <ddarius> GdH
16:16:54 <shapr> ah, thanks
16:17:12 <shapr> iirc, there's an MPI version, a PVM version, and something else.
16:17:39 <shapr> oh hey, have you guys seen the nearest neighbor networks?
16:17:56 <mattam> ?
16:18:15 <shapr> for heavy duty beowulf clusters
16:18:53 <shapr> it's a very cool trick, if you can't afford a fibre channel backbone, only a bunch of 100BaseT hubs...
16:19:25 <shapr> you can get better performance from the several hubs than the fibre channel...
16:19:26 * shapr looks for the url
16:21:33 <mattam> the simulator's called GranSim, it looks very nice :)
16:27:25 <shapr> I'm relatively sure I didn't imagine this FNN thingy
16:27:30 <shapr> something nearest neighbor
16:29:50 <shapr> dang, I give up. I wonder if I dreamed it.
16:30:07 <Igloo> I've become quite a fan of the ABC format (abcplus.sf.net). One thing I would like is the ability to specify volumes for when converting to midi
16:30:15 <Igloo> </belated>
16:30:46 * Leimy is away: haskelling
16:31:01 <shapr> Igloo: did you ever release the Haskore combinators you wrote?
16:31:10 <shapr> I'd like to get hold of the latest copy before they disappear...
16:33:46 <Igloo> No - there's only really a few lines of combinator there. The rest are just guitar fingerings as a Haskell datatype
16:34:13 * Igloo doubts I have anything more than what I've given you. Just a few different strumming patterns.
16:35:10 <shapr> ok
16:35:19 <Pseudonym> OK, question.  Someone who played guitar once told me that there is no such thing as a "guitarist".  It's a "guitar player".  True or false?
16:35:31 <shapr> what's going on at ox? I haven't seen Heffalump in a while.
16:35:42 <Riastradh> Pseudonym: mu.  They're a dork if they're that pedantic.
16:35:42 <shapr> Heffalump is idle for 161:03.39
16:36:01 <Igloo> Just busyness, I think
16:36:13 <Pseudonym> The guy was 15 years old at the time.
16:36:22 <Pseudonym> (So was I, which is possibly why I believed him.)
16:36:27 <shapr> heh
16:36:37 <Igloo> In my case there's no such thing as either - there's just "timidity"  :-)
16:36:48 <Pseudonym> :-)
16:37:07 <Riastradh> OK, there is a difference between a guitar player/guitarist and a guitar god.
16:37:30 <Riastradh> (Guitar gods include Hendrix, Clapton, Fripp, Beck, et cetera.)
16:37:47 <Riastradh> (It's very polytheistic.)
16:37:50 * Pseudonym nods
16:38:20 <Pseudonym> Are there guitar demigods?
16:38:22 <shapr> Satriani, Van Halen?
16:38:35 <Pseudonym> shapr: Did you miss the "et cetera"?
16:38:47 <shapr> no, but I really really love Satriani.
16:38:53 <Pseudonym> :-)
16:38:53 <Riastradh> Maybe George Harrison.
16:38:57 <shapr> so I had to promiscuisly wave his name around.
16:39:02 <Pseudonym> Fripp was on the list, so I'm happy with the list as is.
16:39:19 <Pseudonym> Maybe Steve Hackett, Steve Howe, Brian May... could be demigods.
16:39:35 <Pseudonym> The problem with Harrison is he couldn't write for shit.
16:39:59 <shapr> speaking of guitar demigods, I found this Scott Landers guy recently
16:40:08 <shapr> he has cerebral palsy, but man he's great
16:40:20 <Riastradh> Scott Landers?  Hmmm...did he play on PHC recently?
16:40:32 <shapr> PHC?
16:40:37 <Riastradh> Never mind.
16:40:53 <Riastradh> (it's a radio show if you're still curious)
16:41:03 <shapr> anyways, I really like the "Good Friends" track from here: http://artists.mp3s.com/artists/503/scott_landers.html
16:41:18 <shapr> since mp3.com is getting flushed, might as well get it while you can
16:41:54 <ayrnieu> shapr - flushed?
16:41:56 <Pseudonym> Let's see... I'd add B.B. King to the "gods" list.
16:42:05 <shapr> ayrnieu: see slashdot.org for further information
16:42:05 <Pseudonym> How abour Carlos Santana?  God or demigod?
16:42:12 <shapr> hard to say
16:42:13 <Riastradh> God, of course.
16:42:15 <shapr> santana is great
16:42:31 <Pseudonym> Stevie Ray Vaughan?
16:42:32 <shapr> what about Steve Vai? or Yngwie Malmstein?
16:42:49 <Pseudonym> Vai is a demigod at best.
16:42:54 <Pseudonym> He plays well, for sure.
16:43:03 <Pseudonym> But not influential enough for god status, IMO.
16:43:19 <shapr> mostly because he's nowhere close to a team player
16:43:30 <Pseudonym> True, but then, neither is Fripp. :-)
16:43:40 <Pseudonym> Unless it's the right team, I suppose.
16:43:44 <shapr> I thought fripp has been in several bands?
16:43:46 * shapr googles
16:43:47 <Pseudonym> Jimmy Page?
16:43:56 <Pseudonym> Yes.  King Crimson, most notably.
16:43:58 <shapr> for some reason I'm convinced Fripp was in king crimson.. is that true?
16:44:01 <shapr> ah, whew
16:44:21 <Pseudonym> Still is, in fact.
16:44:24 <shapr> I think Steve Vai is totally unable to be in a band where he's no the boss.
16:44:42 <Riastradh> King Crimson still exists?
16:44:47 <Pseudonym> Sure.
16:44:55 * Pseudonym has an album from them dated 1996
16:44:56 <shapr> I think they recently released a new album.
16:45:04 <shapr> friend of mine is a big fan of theirs.
16:45:06 <Riastradh> Yow.
16:45:07 <Pseudonym> And they're still recrding.
16:45:12 <Riastradh> Are they still as good as they were forty years ago?
16:45:14 <Pseudonym> I think they basically own DGM.
16:45:23 <Pseudonym> Riastradh: They're very different.
16:45:25 <Riastradh> (or thirty, or however long ago it was)
16:45:42 <Pseudonym> They released one album about 5 years ago which is completely improv.
16:45:48 <Pseudonym> It's very odd to listen to.
16:45:58 <Riastradh> Does the current King Crimson have anything at all to do with the League of Crafty Guitarists?
16:46:13 <Pseudonym> I believe they're both DGM groups.
16:46:15 <shapr> Fripp designed "The Stick" didn't he?
16:46:18 <Riastradh> DGM?
16:46:20 <shapr> some sort of custom instrument?
16:46:26 <Pseudonym> Discipline Global Mobile
16:46:43 <Pseudonym> http://www.disciplineglobalmobile.com/
17:10:52 * mattam read a paper while you were talking about guitar gods and would say there's only one true, and that he being the first cited in Pseudonym's list conforts him in his belief
17:11:28 <Pseudonym> Amen, brother matam.
17:11:47 <mattam> :)
17:12:24 <mattam> who's Fripp ?
17:12:47 <Pseudonym> Persecute!  Kill the heretic!
17:13:40 <mattam> maybe...
17:14:12 <mattam> what's the best songs from King Crimsom ?
17:14:31 <Pseudonym> Uhm... sorry, "songs"?
17:14:32 <mattam> what are... ?
17:14:48 <Pseudonym> Surely you mean "suites".
17:14:53 <mattam> work pieces ?
17:15:07 <Pseudonym> Or did you mean "concept albums"?
17:15:36 <mattam> whatever i can feed a search engine with
17:16:19 <mattam> is it new-wave or psychedelic rock ?
17:16:29 <Pseudonym> It's old-school progressive.
17:16:56 <ayrnieu> shapr - odd.  I don't understand how selling a domain leads to selling the archive of music.
17:17:09 <mattam> won't you give me any name ?
17:17:13 <mattam> please!
17:17:25 <Pseudonym> I can name albums, but I can't name a song, sorry.
17:17:58 <mattam> ok
17:18:09 <mattam> an album title then
17:19:00 <Pseudonym> OK, let's think.  "In the Court of the Crimson King", "Lark's Tongues in Aspic", "In The Wake of Poseidon", "Red", "Thrak", "Discipline"...
17:19:22 <Pseudonym> "THRaKaTTaK" I suggest you don't listen to any time soon.
17:20:10 <Pseudonym> You might also be interested in Fripp and Eno (i.e. Brian Eno).
17:20:47 <mattam> oh, at which time did they work together ?
17:20:53 <Pseudonym> 80s, I think.
17:21:18 <Pseudonym> A lot of this British prog music is very incestuous.
17:21:38 <Pseudonym> Bill Bruford, for example, has worked with most of them.
17:22:54 <Pseudonym> Adrian Belew has worked with King Crimson, David Bowie, Jean-Michel Jarre, Paul Simon, Talking Heads, Frank Zappa...
17:23:07 <Pseudonym> (Not all of which counts as "prog", but still.)
17:23:18 <Pseudonym> (Or as "British", for that matter.)
17:24:32 <mattam> Jean-Michel Jarre... ha
17:25:03 <Pseudonym> Yes is the oddest one of all.  They actually swallowed up another band.
17:25:21 <mattam> 'swallowing up' ?
17:25:51 <Pseudonym> Yup.  They lost a few members, so they managed to persuade both members of The Buggles to join them.
17:26:53 <Pseudonym> Like I said.  Incestuous.
17:27:06 <mattam> yeah
18:36:54 <SyntaxLaptop> Igloo: alive?
18:37:50 <Igloo> Certainly am
18:38:09 <ayrnieu> Igloo - are you a bot?
18:38:38 <Igloo> All sources point to yes
18:38:44 <SyntaxLaptop> heh
18:38:45 <ayrnieu> Igloo - are you a bot?
18:39:08 <SyntaxLaptop> Igloo: so you have --add-trigger, and you have --add-compiler
18:39:11 <Igloo> Is it because of your mother you think I am a bot?
18:39:15 <SyntaxLaptop> but could --add-compiler really be --invoke-trigger?
18:39:30 <SyntaxLaptop> Igloo: are you a turing machine?!?!!
18:39:55 <Igloo> Am I a TM? Now, there's an interesting question
18:39:59 <ayrnieu> syntax - try asking with just one question mark -- you may confuse him otherwise.
18:40:10 <Igloo> It might cause a trigger to be invoked at a later point
18:40:22 <Igloo> e.g. install ghc6, wait a bit, then install hmake. The hmake trigger will be run for ghc6.
18:40:25 <Lor> Phew.
18:40:42 * Lor mailed Andreas Rossberg on some issues with generative types...
18:41:17 <SyntaxLaptop> hm. if you install ghc, couldn't it be calling --add-trigger instaed of --add-compiler?
18:42:26 <dark> It's easy to tell if you're a turing machine.  Do you have an infinite tape?
18:42:55 <Igloo> hmake adds triggers, ghc6 adds compilers
18:43:03 <Igloo> I don't really understand your question given that
18:43:17 <Igloo> Oh, ghc6 might also add triggers for ghc-pkg in the future, but that's different
18:43:19 <SyntaxLaptop> who invokes the trigger?
18:43:54 <Pseudonym> Does anyone here understand left-fold enumerators?
18:44:11 <Pseudonym> I know how to use them and what they're for, but I'm having an awful time writing one.
18:44:35 <SyntaxLaptop> Igloo: I just feel like there's something more general going on :)
18:44:53 <Pseudonym> Who triggers the triggerer?
18:45:19 <Lor> Who evaluates the evaluator?
18:45:33 <ayrnieu> Lor - the evaluator!  The evaluator evaluates the evaluator!
18:45:38 <Igloo> The trigger is invoked when a compiler is added and the trigger is laready there, or when the trigger is added and there are one or more compilers already there that would trigger it
18:45:47 <ayrnieu> Lor - didn't your mother teach you not to say such things without subscripts?
18:46:20 <Pseudonym> I think my mental stack just overflowed.
18:46:38 <Pseudonym> I certainly appear to be throwing an exception.
18:46:46 <Lor> You mean I should have said "who evaluates_0 the evaluator_0?"
18:46:48 <SyntaxLaptop> Igloo:  on the phone... one sec :)
18:48:29 <ayrnieu> Lor - the evaluator1 evaluates the evaluator0
18:48:44 <Lor> Golly, what a surprise.
18:49:02 <Pseudonym> It's turtles all the way down.
18:49:45 <Lor> That pile of turtles is called "the reflective tower".
18:50:06 <Lor> They must have metallic shells or something.
18:51:59 <ayrnieu> I suppose that you could fit all those turtiles in the reflective tower, so long as there were as many towers standing on each other as turtles -- otherwise you'd run into ground, eventually, and the turtles would escape through the soil.
19:15:48 * Igloo goes to bed
19:19:21 <SyntaxLaptop> 'night Igloo
19:41:50 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/","Any user who would like to request any unwritten tutorial please msg shapr", "peakUsers=73"]'
19:41:50 --- topic: set by Jad on [Sun Nov 23 13:21:38 2003]
19:41:50 --- names: list (clog galority kain SyntaxLaptop anduril1 sparkersi Pseudonym ksandstr whee ayrnieu Tomasso lambdabot jameson isomer maihem _joey mattam ddarius exarkun Cale cm SyntaxPolice_ ludde_ axolotl keverets_ kosmikus1away Flarelocke tic shapr phubuh polli Lunar^ skylan Riastradh musasabi ejt diminished el_diego jrosdahl Igloo neniu mgoetze ibid Lor jasonw xkb earthy juhp rubix shrimpx drlion det emu blackdog Segora dennisb ozone Smerdyakov keir)
19:41:50 --- names: list (norpan crass smkl gdsx wagle__ asmodai)
19:43:39 <ayrnieu> Hah!  The world shall never know what great things we have just finished speaking of, for the logger has only just now returned!
19:43:58 <ayrnieu> Well, I shall give it no recap.
22:00:34 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/","Any user who would like to request any unwritten tutorial please msg shapr", "peakUsers=73"]'
22:00:34 --- topic: set by Jad on [Sun Nov 23 13:21:38 2003]
22:00:34 --- names: list (clog ayrnieu galority neniu kain sparkersi Pseudonym ksandstr whee Tomasso lambdabot jameson isomer maihem _joey mattam ddarius exarkun Cale cm SyntaxPolice_ ludde_ axolotl keverets_ kosmikus1away Flarelocke tic shapr phubuh polli Lunar^ skylan Riastradh musasabi ejt diminished el_diego jrosdahl Igloo mgoetze ibid Lor jasonw xkb earthy juhp rubix asmodai wagle__ gdsx smkl crass norpan shrimpx drlion det emu keir Smerdyakov ozone dennisb)
22:00:34 --- names: list (Segora blackdog)
22:57:36 <RibenaBoy2> hi
22:57:53 <RibenaBoy2> when importing a data type
22:58:07 <RibenaBoy2> import x ( y (..))
22:58:11 <RibenaBoy2> what does (..) mean?
23:00:15 <ayrnieu> data Foo = Bar Int | Baz Int
23:00:42 <ayrnieu> import x (Foo(..)) -- don't want an opaque Foo type
23:01:35 <RibenaBoy2> wats opaque?
23:02:50 <ayrnieu> If your module exports just Foo and a number of functions that deal with it, no other modules can peek into Foo to know that it can break into Bar Int and Baz Int and such -- such modules have to use the functions you export.
23:03:22 <ayrnieu> Those modules still need Foo for typechecking, but they can't do anything with Foo other than pass it to your functions, have it returned from your functions, etc.
23:07:18 <skew> Huh? The .. in the import list means you want to import all the constructors of Foo.
23:07:39 <skew> Or all the methods of a class
23:08:17 <ayrnieu> skew - indeed.  Without them you can't pattern match on them and you have an opaque type.
23:08:35 <RibenaBoy2> ok thanks
23:08:50 <skew> ayrenieu: yeah. looked like RibenaBoy2 had an outstanding question about what a (..) in an import list meant
23:09:34 <RibenaBoy2> so most of the time when importing data types, there'll be (..) next to it right?
23:10:49 <RibenaBoy2> and if only want 1 particular constructoer, we enter the contructor name instead of the .. 
23:11:22 <ayrnieu> ribena - yes.
23:11:51 <RibenaBoy2> ok i get it now thnx
23:50:41 <RibenaBoy2> anyone know how to determine work complexity?
