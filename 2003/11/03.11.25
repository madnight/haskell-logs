01:17:41 <shurik> I need a book on Haskell and I don't want to buy it
01:18:09 <shurik> this tutorial is a bit too much for me
01:34:22 <TripleDES> morning
01:40:27 <Marvin--> morn'
02:28:08 <Marvin--> gah
03:30:03 <shapr> @yow
03:30:03 <lambdabot> When you said ``HEAVILY FORESTED'' it reminded me of an overdue
03:30:03 <lambdabot>  CLEANING BILL..  Don't you SEE?  O'Grogan SWALLOWED a VALUABLE
03:30:03 <lambdabot>  COIN COLLECTION and HAD to murder the ONLY MAN who KNEW!!
03:34:54 <Marvin--> is it just me or are these yow thingys incredibly not funny?
03:37:07 <shapr> I think they're great fun.
03:38:16 <shapr> Marvin--: in that case, I think you should write a plugin that pulls random quotes from your collection of quotes.
03:38:57 <shapr> I commit to calling that plugin at least as often as I call @yow
03:40:18 <Marvin--> nah, I think too many of my quotes are too "internal"
03:40:25 <Marvin--> @fortune
03:40:25 <lambdabot> P-K4
03:40:31 <Marvin--> um
03:40:37 <Marvin--> riight
03:40:41 <Marvin--> @fortune
03:40:41 <lambdabot> Vulcans worship peace above all.
03:40:41 <lambdabot> 		-- McCoy, "Return to Tomorrow", stardate 4768.3
03:40:49 <Marvin--> whopee
03:40:52 <Marvin--> fun fun fun
03:41:10 * Marvin-- mails Stephan Schulz about his problems
03:44:41 <shapr> who?
03:45:37 <Marvin--> the guy who wrote Eprover
03:50:49 <Marvin--> "HPUX with gcc - someone please hurt an HP employee for me!"
03:56:45 <mgoetze> Marvin--: hm, the only problem i've had is that i couldn't compile perl....
04:05:39 <Marvin--> well, I'm off to the institution
04:06:27 <shapr> finally Marvin-- has been committed ;-)
04:09:54 <Marvin--> yes!
04:10:05 <Marvin--> it took some convincing, but finally!
04:16:23 <earthy> @fortune
04:16:23 <lambdabot> Woman on Street:	Sir, you are drunk; very, very drunk.
04:16:23 <lambdabot> Winston Churchill:	Madame, you are ugly; very, very ugly.
04:16:23 <lambdabot> 			I shall be sober in the morning.
04:16:28 <earthy> ;)
04:16:49 <shapr> heh
04:16:59 <shapr> @fortune
04:16:59 <lambdabot> <doogie> netgod:  8:42pm is not late.
04:16:59 <lambdabot> <netgod> doogie: its 2:42am in Joeyland
04:16:59 <lambdabot> 	-- #Debian
04:19:12 <shapr> @arr
04:19:13 <lambdabot> Aye
04:19:15 <shapr> @fortune
04:19:16 <lambdabot> Two percent of zero is almost nothing.
04:24:43 <earthy> joy, cleaning up 70M of diskspace just to have `room to breathe'
04:25:04 <earthy> I love old universityprovided workstations
04:25:09 * shapr deleted 20GB of FLACs recently to make space
04:25:22 <shapr> earthy: nfs mount!
04:25:24 <shapr> or SFS
04:26:55 <earthy> shapr: ah, but I don't have write access to larger swathes of disk.
04:27:14 <earthy> (but for on my laptop, but that has the significant problem of a dead powersupply)
04:27:47 <earthy> `you'll have 370M and damn well *like* it'
04:28:17 <shapr> yikes
04:29:49 <earthy> (oh well, I could requisition a newer machine with more disk if I really wanted to... but I want to postpone that by roughly another year :))
04:31:21 <Marvin--> our student accounts have a 50M quota :-(
04:31:35 <shapr> have you guys come up with the mail yourself files thing?
04:31:36 <Marvin--> (no I haven't left yet, I realized I forgot to shave)
04:32:21 <earthy> shapr: yes. and abandoned it again
04:32:22 <Marvin--> eh, since I'm on a permanent, speedy connection here at home, I mostly work from home anyway
04:34:39 <Marvin--> now I'm really really off :)
04:49:12 <shapr> wow, cool! http://www.cs.utah.edu/flux/knit/cmi.html
04:50:02 <Lor> Well, um.
04:50:20 <shapr> so uh.. can I use this on the Linux kernel?
04:50:43 <Lor> It brings the same horde of problems that ghc's inter-module inlining does: changing the implementation of a module may require recompiling other modules.
04:50:59 <Lor> But still, yes, cool.
04:51:13 <shapr> oh, and Chameleon now compiles to Haskell
04:51:19 <shapr> http://www.comp.nus.edu.sg/~sulzmann/chameleon/
05:01:39 <Jad> shapr hello
05:02:14 <shapr> hello Jad, what's up?
05:03:05 <Jad> fine
05:03:19 <Jad> i got about 150 students
05:03:20 <Jad> :)
05:03:24 <Jad> for devlopment
05:03:31 <Jad> guys what does the phrase my 0.02$ 
05:04:16 <earthy> roughly the same as `in my opinion'
05:05:02 <Jad> ah okay
05:30:14 <emu> it's a tax on opinions
05:45:41 <SyntaxPolice> heh
06:00:46 <Lunar^> shapr: Do you plain to go there : http://esslli2004.loria.fr/ ?
06:32:56 <shapr> Lunar^: no, would be nice though.
06:33:53 <Lunar^> shapr: yes.. I could to try to get there... depends how expensive it will be
07:00:02 <earthy> gawd, I should go home
08:28:17 <steveh> anything new in #haskell-land?
08:30:17 <TAndrad> hi steveh
08:38:56 <shapr> very cool unicycle club logo --> http://www.scannedinavian.org/~shae/aus.jpg
08:39:03 * shapr channels /dev/urandom
08:40:12 <Igloo> Hmmm, ghc 6.2 ANNOUNCE commit
08:40:26 <shapr> yay!
08:40:39 * Igloo ponders asking aj whether it's too late for sarge
08:46:40 <Lunar^> Yeahhh :)
08:51:43 <shapr> hi tims 
08:51:52 <shapr> what can we do for you?
08:52:39 <shapr> guten abend linuxfreck 
08:52:47 <shapr> learning Haskell?
08:52:54 <linuxfreck> hallo shapr
08:53:22 <shapr> looking for introductory Haskell info? or looking for other users?
08:53:35 <linuxfreck> not really, I used to do that one year ago, meanwhile I'm trying to not forget everything again :)
08:54:04 <shapr> good idea
08:54:38 <shapr> have any questions?
08:54:51 * shapr is taking a short break from work
08:56:19 <shapr> hiya dark 
08:56:22 <dark> Hello :)
08:56:25 <shapr> how's the game?
08:56:47 <dark> Progressing... slowly... :)
08:56:49 <linuxfreck> not really, I thought I learn something from other people's questions :)
08:57:57 <shapr> linuxfreck: the most used resources here are the Wiki at http://www.haskell.org/hawiki/, the bot named lambdabot, and the channel logs listed in the topic.
08:58:21 <shapr> anyways, that's the short intro speech, now I'll leave you alone if you want to lurk :-)
08:58:24 <dark> I'm still trying to figure out how to avoid using hideusly complicated SQL statements.
08:58:44 <shapr> dark: what about HaskellDB?
08:59:06 <dark> Hmm, haven't seen that yet.
09:01:39 <shapr> Daan Leijen wrote HaskellDB for win32 and ODBC
09:02:12 <shapr> someone at galois hacked it to use MySQL, but hasn't released the code for htat.
09:02:38 <shapr> anyways, it generates SQL, lets you do set theory ops instead
09:03:33 <shapr> Daan told me he'll release it under a BSD license real soon now, but that I could assume it already had that.
09:06:23 * shapr throws lambdas at exarkun
09:07:58 <shapr> anyways, back to work...
09:09:02 <dark> It's downloadable but doesn't seem to have a licesne.
09:12:23 <Smerdyakov> Heh. Google Adwords says that the average number of clicks per day on ads from searches for "functional programming" is 2.7.
09:12:28 <Smerdyakov> Compared to 1000 for "programming." :D
09:14:02 <emu> they may have to drop the "functional programming" search soon; it isn't profitable enough
09:14:49 <Smerdyakov> Well, the less popular ones cost less.
09:14:55 <Smerdyakov> To the advertiser.
09:15:25 <emu> right; let us go click on an ad for an unpopular brand so that they have to pay more money
09:15:37 <emu> muhaha, we will put them out of business
09:16:11 <TAndrad> :)))
09:17:58 <Smerdyakov> I mean the less popular keywords.
09:18:10 <TAndrad> like?
09:18:11 <Smerdyakov> Though less popular ads are also cheaper. :)
09:18:33 <Smerdyakov> TAndrad, let me tell you what the Adwords site tells me now for the estimated cost per day to advertise for different keywords:
09:18:45 <Smerdyakov> functional programming: $.16
09:18:55 <Smerdyakov> game programming: $2.31
09:19:05 <Smerdyakov> programming: $2.66
09:19:26 <TAndrad> per day?
09:19:30 <TAndrad> but this is not that much
09:19:39 <Smerdyakov> Oops, I confused me.
09:19:50 <Smerdyakov> Programming is $60.45 a day.
09:20:01 <TAndrad> ah..
09:20:08 <Smerdyakov> The $2.66 is "learn programming."
09:20:20 <TAndrad> there is a large difference between .16 and 60.45...
09:20:24 <Smerdyakov> Yes.
09:20:50 <TAndrad> who the hell searches "learn programming"???
09:21:32 <Smerdyakov> Enough people that an advertiser for those keywords can expect 2.5 clicks a day, according to Google. :)
09:21:38 <TAndrad> :))
09:21:50 <TAndrad> Smerdyakov where can i get a free ps2pdf?
09:22:08 <Smerdyakov> I don't know. Look at which one Debian uses.
09:23:07 <TAndrad> i'm using windows
09:23:16 <TAndrad> and i'm generating ps with the printer driver
09:23:28 <Smerdyakov> I don't think I've ever used a ps2pdf on Windows.
09:23:31 <Smerdyakov> Why are you using Windows?
09:24:08 <TAndrad> that's my target os (app developer)
09:25:01 <Smerdyakov> Sick. Why not use cross-platform libraries?
09:25:02 <TAndrad> i'm also using linux
09:25:06 <TAndrad> but just for my personal use
09:25:08 <shapr> hello _Aether 
09:25:12 <shapr> looking for Haskell info?
09:25:35 * shapr always picks on the newbies
09:25:42 <TAndrad> Smerdyakov i'm planning to go for kylix
09:25:58 <TAndrad> shapr pick on me too :). i'm a newbie for functional languages in general :)
09:26:14 <shapr> TAndrad: hello TAndrad! would you like an introductory pamphlet? ;-)
09:26:41 <shapr> have you seen http://www.haskell.org/learning.html ?
09:26:52 <TAndrad> no
09:27:00 <TAndrad> i've dowloaded a tutorial
09:27:03 <shapr> it's a good place to start learning about Haskell.
09:27:05 <TAndrad> but
09:27:06 <shapr> which tutorial
09:27:08 <shapr> ?
09:27:16 <TAndrad> i don't uderstand
09:27:24 <_Aether> I just came here for the free food
09:27:26 <TAndrad> why it uses patterns in that way
09:27:39 <TAndrad> why not something like
09:27:43 <_Aether> I heard you had those little sausages
09:28:05 <shapr> _Aether: they're higher order sausages.
09:28:19 <shapr> but I can show you how to partially apply them...
09:28:32 <TAndrad> are you speaking to me shapr?
09:28:41 <Smerdyakov> You want to apply your sausage to _Aether?
09:28:52 <shapr> Smerdyakov: you have a sick mind.
09:29:07 <shapr> TAndrad: what sort of pattern usage are you talking about?
09:29:18 <shapr> _Aether: we have curried lambdas here too.
09:30:08 <TAndrad> shapr i don't speak about a particular one. i can't understand why haskell creators have a such twisted mind
09:30:20 <_Aether> Neat, O(n*log n) cheese?
09:30:34 <shapr> you found the cheese log already?
09:30:34 <TAndrad> shapr i would preffer something that let's you code boolean expressions insteand of those patterns
09:30:47 <shapr> TAndrad: instead of what patterns?
09:30:56 <shapr> can you show me what you mean?
09:31:03 <TAndrad> switch (x)
09:31:04 <TAndrad> {
09:31:13 <TAndrad>     x = 0 : 4;
09:31:22 <shapr> oh
09:31:25 <TAndrad>     square(x)<64 : 5;
09:31:28 <shapr> you can use guards to do that.
09:31:34 <TAndrad>     else : asd(x);
09:31:35 <TAndrad> };
09:31:53 <TAndrad> but guars just guard.. don't?
09:31:55 <Smerdyakov> I think I am about to become the only advertiser for the keywords "functional programming" on Google. :D
09:32:01 <TAndrad> :))
09:32:21 <TAndrad> for what product do you advertise?
09:32:31 <shapr> here's my short demo of Haskell syntax - http://purl.org/net/shapr/src/haskell/Demo.hs
09:32:42 <shapr> hm, I didn't put any guards in there...
09:32:59 <Lor> The only advertisement I see when searching for FP is "work at google".
09:33:15 <Cale> http://www.cs.uu.nl/~afie/haskell/tourofsyntax.html might also be useful
09:33:28 <Smerdyakov> Lor, yeah, and I think that's a "programming" match, not "functional programming."
09:33:43 <TAndrad> :)
09:35:02 <shapr> guard x | x == 0     = 4
09:35:03 <shapr>         | (x*x) < 64 = 5
09:35:03 <shapr>         | otherwise  = 6
09:35:15 <shapr> TAndrad: how's that?
09:36:03 <TAndrad> hmm
09:36:04 <TAndrad> good
09:36:16 <TAndrad> but it is able to check for case overlap?
09:36:34 <TAndrad> or to check for cases not being at full extent? (missing cases)
09:36:45 <_Aether> So... when would someone find it advantageous to pick Haskell over say.... Ruby or Python?
09:36:48 <shapr> the otherwise is the fall through case
09:37:16 <Smerdyakov> _Aether, when one is trying to create software that one wants to work. :D
09:37:33 <shapr> _Aether: in my opinion, Haskell is worth learning whether you plan on using it professionally or not.
09:37:53 <Smerdyakov> No one said anything about "professionally," shapr.
09:37:57 <shapr> I've found that learning very different ways of programming positively affects all the programming I do.
09:38:02 <_Aether> Smerdyakov: I write a lot of software with Python that works well :)
09:38:20 <Smerdyakov> _Aether, if it's reasonably complicated, I bet it would take you less time to write in Haskell.
09:38:31 <TAndrad> ups.. first pdf created by me :)))))
09:38:35 <Lor> shapr, I, on the other hand, find programming in, say, C, nowadays much more excruciating than when I was blissfully ignorant of better alternatives.
09:39:04 <shapr> Lor: well, I was talking about code quality more than enjoyment, but you have a good point.
09:39:09 <TAndrad> basically depends on what kind of app you want to write
09:39:10 <shapr> ignorance is bliss
09:39:18 <TAndrad> if you want to program a D3D game use C
09:39:21 <Lor> I immediately see the right way to implement something, but then I realize that it's impossible or horribly complicated in C.
09:39:33 <TAndrad> if you want to program a nuclear power plant controller
09:39:36 <TAndrad> use hakell :))
09:39:40 <shapr> TAndrad: Haskell has an OpenGL binding, and a Foreign Function Interface
09:39:46 <Lor> Um. C shouldn't be used for _any_ applications.
09:39:54 * shapr agrees with Lor
09:39:58 <_Aether> Smerdyakov: Ok, example, XML processing, using a generator and a dictionary to represent a finite state machine, I can write an app that'll parse XML and do stuff with it in about 2 hours (for the initial developement of the "parsing" and "putting into a data structure" part)
09:40:00 <Lor> It should only be used for low-level libraries, and the kernel.
09:40:06 <TAndrad> Lor i use it for a kernel. i can't imagine writing an os kernel in haskell
09:40:22 <Lor> I don't count a kernel as an application. :)
09:40:22 <shapr> _Aether: I can show you some XML processing code I've written in Haskell.
09:40:35 <Cale> mmm.... parsec :)
09:40:43 <shapr> TAndrad: actually, there are two Haskell-on-raw-hardware projects that I know of
09:40:45 <Lor> mmm... uu_parsing, rather. :)
09:40:53 <Smerdyakov> _Aether, any time you write an XML parser, you are doing something wrong. There are tons of them already existing.
09:40:53 <shapr> TAndrad: specifically for the 'nuclear power plant' sort of reasons.
09:41:16 <_Aether> Smerdyakov: sorry, s/parsing/validating/
09:41:49 <_Aether> Smerdyakov: not actually writing a parser, but using the ones in python's standard lib
09:41:51 <shapr> there are two major XML toolkits for Haskell, HaXML and HXmlToolkit
09:42:12 <Lor> With HaXML you can validate xml and transform it into Haskell data structures automagically.
09:42:12 <shapr> I've used both of them for different tasks.
09:42:21 * TAndrad changing irc client
09:42:57 <shapr> HaXML uses algebraic datatypes to directly represent an XML tag
09:43:20 <shapr> HXmlToolkit uses a generic tree type, and does validation in a separate step, via a regexp library
09:44:07 <_Aether> syntaticly correct XML and "valid" XML are somewhat different, what does the regexp library do?
09:44:08 <shapr> they're both quite spiffy.
09:44:54 <shapr> I don't know how it works, but I think it's documented.
09:45:28 <shapr> oh, it's really called HXMLToolbox
09:45:30 <shapr> http://www.fh-wedel.de/~si/HXmlToolbox/
09:45:34 <shapr> I always get that confused.
09:47:24 <shapr> anyways, I've used HXMLToolbox to do real paying work with Haskell
09:47:26 * shapr cheers
10:04:13 <shapr> @yow
10:04:14 <lambdabot> RELATIVES!!
10:04:26 <shapr> _Aether: so, any further questions?
10:04:49 <TAndrad> shapr are  you professor? :)
10:05:25 <shapr> heh, no. My formal computer education consists of one CS101 course taken eleven or so years ago.
10:05:41 <TAndrad> :)
10:05:55 <TAndrad> i'm a student but not cs student :)
10:06:08 <shapr> I think programming is the most fun you can have by yourself.
10:06:12 <shapr> it's magic
10:06:13 <shapr> hi harsha 
10:06:20 <harsha> hello shapr 
10:06:24 <TAndrad> :)
10:06:26 <harsha> how are you ?
10:06:27 <shapr> what's up?
10:06:37 <harsha> shapr some bash scripts.. 
10:06:41 <TAndrad> i've learned basic by myself when i was 8 years old :)
10:06:43 <harsha> shapr and you?
10:06:53 <shapr> I'm good! I've gotten some work done today, and I plan on getting more done.
10:07:00 <shapr> probably won't have time to try out my new tire today :-(
10:07:18 <harsha> shapr tire? 
10:07:20 <shapr> TAndrad: cool! I learned it when I was ... eleven I think.
10:07:28 <shapr> harsha: yah, my new unicycle tire.
10:07:49 <shapr> mmmm --> http://www.nokiantyres.com/bike/images/ragahit.jpg
10:08:03 <shapr> should be good for both snow and mountain unicycling.
10:08:17 <TAndrad> shapr :) when i was eleven i was triyng to hack some machine code for a game that was unable to load properly from tape :))) (old sinclair z80 computer)
10:08:30 <harsha> shapr hey, i forgot that you are unicycle user :) i remmeber now
10:08:38 <shapr> TAndrad: whoa, how old are you?
10:08:46 <shapr> I learned Basic on a timex sinclair
10:08:55 <TAndrad> shapr 21 :)
10:09:01 <shapr> wow.
10:09:53 <TAndrad> shapr i was really impressed when i saw the first 286 and observed that you don't have to wait 10 minutes for a program to load :))  (and nice graphics too)
10:10:41 <shapr> yah the first VGA displays were very impressive
10:11:04 <TAndrad> yes if compared with 255x178 resolution :)
10:11:49 <harsha> shapr ever tried stilts?
10:11:57 <shapr> no, is it fun?
10:12:21 <harsha> shapr yes.. fun. :) 
10:12:29 <harsha> but be preparted for some bruises..
10:12:46 <harsha> at the beginning atleast
10:14:09 <shapr> ok, I'll try it next chance I get.
10:14:54 <harsha> yes u should.. :) how difficult is unicycle?
10:15:31 <shapr> it took me several hours of practicing to ride without holding a wall
10:15:43 <harsha> Ok
10:15:57 <shapr> and lots of little kids staring at me :-)
10:16:10 <harsha> hehehehe..
10:16:12 <TAndrad> :))
10:17:17 <shapr> I still can't get on without holding a wall, but I'm practicing that.
10:17:34 <harsha> :) 
10:18:25 <SyntaxPolice> shapr: any pics of you on your uni?
10:18:34 <Igloo> Oh, cool, the new hugs release is out too
10:18:37 <SyntaxPolice> shapr: btw, I found out we have an employee I didn't know about; a little brown mouse!
10:18:37 <harsha> hello SyntaxPolice 
10:18:40 <SyntaxPolice> Igloo: whoa!!
10:18:46 <Igloo> Good timing there  :-)
10:18:53 <TAndrad> hi SyntaxPolice
10:19:13 <SyntaxPolice> hi harsha, TAndrad
10:19:21 <SyntaxPolice> Igloo: that rules. I know what I'm going to package tonight :) :)
10:19:36 <Igloo> Been out more than an hour, must be time to start filing wishlist bugs against SP  :-)
10:19:46 <SyntaxPolice> Igloo: i'll beat you down
10:19:51 <Igloo> heh
10:19:51 <shapr> SyntaxPolice: this is the only one: http://www.scannedinavian.org/~shae/foto/unicycle.jpeg
10:20:07 <SyntaxPolice> cool
10:20:22 <SyntaxPolice> Igloo: I _knew_ I shouldn't have been out to lunch!@
10:20:56 <Igloo> :-)
10:21:28 <harsha> shapr kinda looks really smalll :-)
10:21:58 <TAndrad> :)
10:22:00 <shapr> might be because I'm about 100 kilos
10:22:07 <TAndrad> :))))
10:23:01 <harsha> hehehe :)
10:36:44 <shapr> is it a race? whether the new Hugs or the new GHC is packaged first?
10:36:49 * shapr waits desperately
10:41:34 <Igloo> My money's on hugs  :-)
10:41:44 * shapr grins
10:41:55 <Igloo> ghc needs a haddock update first, then a reasonably large .diff merge
10:42:44 <Igloo> haddock builds for all arches will probably take a while as a week's worth of packages are uploaded at once, too
10:43:59 * steveh ponders the mysterious origins of the "d" and the "k" in "haddock"
10:44:21 <emu> ducks
10:44:35 <emu> a duck conspiracy
10:44:52 <shapr> or maybe someone in denmark?
10:45:10 <emu> duckland
10:45:15 <shapr> oh
10:45:43 <emu> or maybe just donkey kong
10:49:35 <maihem> shapr, looking at your syntax demo. Is (not . isVowel) equivalent to (\x -> not (isVowel x))?
10:49:44 <steveh> y
10:49:50 <steveh> is a vowel sometimes
10:49:52 <steveh> and sometimes not
10:50:21 * steveh likes to ate ... likes to ate ... likes to ate ate ape-les and banaynays
10:50:54 <steveh> sorry, perl is making me regress
10:50:59 <steveh> I hate it when that happens
10:51:15 <emu> have a banana
10:51:22 <maihem> and is (fn . binaryfn) equivalent to (\x y -> not (binaryfn x y))?
10:51:40 <maihem> and extends to n-ary functions in general?
10:51:41 <dark> I'd say the same for u. Does "university" start with a vowel?
10:52:09 <emu> there are no n-ary functions
10:52:19 <emu> functions only take one argument
10:52:34 <dark> maihem: I'll assume you didn't mean the "not" in that second one.
10:52:35 <emu> everything else is currying, tuples, and syntactic sugar
10:52:58 <dark> And no, (f . g) x y is (f (g x)) y
10:53:25 <TAndrad> bye@all
10:53:37 <TAndrad> bye shapr
11:16:53 <maihem> thx dark and emu
11:17:27 <SyntaxPolice> #haskell... I love you... ... ...
11:17:34 <SyntaxPolice> you're my favorite beta testers...
11:18:23 <SyntaxPolice> hugs Nov-2003 on haskell-experimental debian archive :)
11:18:27 <SyntaxPolice> (http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html)
11:18:55 <maihem> from shapr's demo, is (Person "maihem" 24) an object of datatype People?
11:19:01 <SyntaxPolice> be sure to read the changelog :)
11:21:36 <shapr> maihem: try it
11:21:45 <shapr> load Demo.hs into GHCi or Hugs
11:21:59 <shapr> then do :t (Person "maihem" 24)
11:22:01 <maihem> heh, sorry :) shouldv'e done first
11:23:15 <maihem> yay! It is!
11:23:43 <SyntaxPolice> but now you have to wonder... does it work with Hugs-Nov-2003? ;)
11:23:53 * shapr grins
11:24:03 <maihem> I've already got apt.sources open for writing ;)
11:24:23 <SyntaxPolice> maihem: fair warning: its only there for unstable
11:24:23 <maihem> or /etc/apt/sources.list
11:24:26 * shapr goes off to do swedish homework
11:24:57 <maihem> I'm running experimental. I ain't scared >-`
11:25:00 <SyntaxPolice> :)
11:47:23 <Igloo> Syn: Am I missing something? Nothig particularly intresting lookin gto me in the changelog?
11:48:01 <SyntaxPolice> just warnings about what not to email me about.
11:48:19 <SyntaxPolice> and the note that you'll have to remove -1 by hand.
11:48:39 <Igloo> Which -1?
11:48:42 * Igloo looks confused
11:48:48 <SyntaxPolice> I know you know this:
11:49:01 <Igloo> Is 98.200311-1 the latest version?
11:49:07 <SyntaxPolice> if you install hugs98.200311-1 from HE
11:49:12 <SyntaxPolice> then I put it on the debian archive
11:49:15 <Igloo> Oh, ISWYM
11:49:15 <SyntaxPolice> (but it's actually different)
11:49:35 <SyntaxPolice> then it won't get updated unless you remove the one from HE
11:49:50 <Igloo> I thought there was something in the changelog about removing -1  :-)
11:50:02 <SyntaxPolice> nah
11:50:30 <SyntaxPolice> the changelog will match the upstream summary I'd expect.  I can't remember what the outcome of that flamewar on debian-devel about the upstream changelog vs debian changelog and bugs blah blah blah
11:50:40 <Igloo> You could have used 0.1 for the Debian version to avoid that problem (except in the unlikely event of it being NMUed)
11:51:08 <SyntaxPolice> ahh
11:51:14 <SyntaxPolice> I'll remember that next time.
12:00:46 <scarface> shapr: hi
12:44:12 <Tomasso> can i pattern match over a list in the following way?  f ([a,b,c]) = c ???
12:44:36 <Tomasso> if the list had 3 elements...
12:44:54 <SyntaxPolice> f(a:b:c:[]) = c
12:45:23 <SyntaxPolice> don't know offhand if what you wrote would work.
12:45:46 <Tomasso> hmmh
12:47:10 <Igloo> Either should work
12:47:43 <Igloo> But it's a fairly odd thing to want to do - you might want a tuple instead of a list
12:48:23 <Tomasso> (yeah it works :D)
12:49:33 <Tomasso> hehehe
12:49:46 <Tomasso> a tuple :D
12:49:51 <Tomasso> whata mess.... :D heheheh
12:50:58 <Igloo> Oh, cool, because crest wasn't doing anything else due to no-one being able to log in and it not being able to talk to auric it's finished building the ghc6 packages  :-)
12:54:31 <SyntaxPolice> Tomasso: your function will fail in an ugly way if someone calls it on a list with anything but 3 elements.
12:54:31 <SyntaxPolice> the nice thing about a tuple is that its type-safe. the compiler will catch such problems at compile-time.
12:54:47 <SyntaxNinja> heh
12:54:49 <SyntaxNinja> so how does that hugs package look?
12:54:50 * Igloo raises an eyebrow
12:54:51 * SyntaxNinja is excited about the release
12:55:10 <Igloo> It gave the right answer for 4+5, which is always a good sign
12:55:36 <SyntaxNinja> hehe
12:55:45 <SyntaxNinja> I think there is something like /lib/hugs/examples
12:56:08 <Igloo> Does it have a testsuite? I can't remember if it can use a subset of the GHC one, if it has its own or nothing
12:56:29 <SyntaxNinja> i don't remember.
12:57:31 <Igloo> I should do something with the GHC one. I'm not quite sure what, though
12:57:51 <shapr> w00, SyntaxNinja 
12:58:50 <SyntaxNinja> shapr: ph34r
13:04:34 <Lor> SyntaxNinja, do you have Real Ultimate Power?
13:05:30 --- mode: ChanServ set +o SyntaxNinja
13:05:52 <Lor> w00...
13:06:48 <Riastradh> Yikes!  I hope SyntaxNinja doesn't flip out and kill me because I returned!
13:07:01 * Riastradh accidentally drops a spoon.
13:07:45 * SyntaxNinja is the quiet, meditating kind of Ninja... Until he runs into a syntax error that is not enlightened...
13:08:12 <Lor> "Facts: 1. Ninjas are mammals. 2. Ninjas fight ALL the time. 3. The purpose of the ninja is to flip out and kill people."
13:10:06 * Lor goes open the window.
13:12:22 <dark> What does mammalitude have to do with it?
13:12:42 <Riastradh> dark, watch out: if you dispute ninjas, they'll flip out and kill you!
13:13:31 <Lor> Just like other mammals, ninjas can be mean OR totally awesome.
13:16:36 * SyntaxNinja does a series of backflips, resulting in the spoon being returned to its rightful place.
13:39:19 --- mode: SyntaxNinja set -o SyntaxNinja
13:39:21 * SyntaxNinja wonders who opped him anyway
14:03:33 <blackdog> shapr: do you have your .emacs online somewhere? I'm trying to grasp the tao of elisp.
14:04:30 <SyntaxNinja> blackdog: I recommend looking at some elisp programs rather than a configuration file.
14:04:47 <adept> blackdog: I can share mine ;)
14:06:33 <blackdog> Normally, I would agree, but I'm trying to do something in particular that I think shapr's done... I'm trying to bind a button to trigger a compile, wait till the compile's done, then go to the first error. I tried the obvious way, but it calls 'next-error before the compile's done, which is no good. Shapr's bound a key to do compile+unit-testing, so I assume he's beaten this particular dragon.
14:07:18 <blackdog> also, last time i asked for elisp help here, smerdyakov put me in a box, and it took forever to climb out. :)
14:07:54 <adept> blackdog: find out which process is started during compile and hook in ... well .. a completion hook
14:10:11 <adept> blackdog: i mean "process" in emacs terms, as in create-process-... There should be something like process-for-buffer or comething like that
14:11:17 <blackdog> <feeling stupid> what's a process in emacs terms?
14:21:36 <raver> hi
14:22:02 <dark> blackdog: Hmm, I bet you could look at the code that currently implements M-`
14:22:09 <adept> blackdog: C-h f create-process ?
14:22:23 <dark> Oh, hmm, that doesn't wait.
14:22:39 <dark> raver: Greetings!
14:24:00 <blackdog> M-` is next-error. The problem's more how to get it to wait until the compile's finished. I tried mode-compile-after-compile-hook, but that didn't seem to help.
14:24:15 <raver> cheers mate ;-)
14:25:39 <blackdog> i don't seem to have create-process... i'm using xemacs, though. perhaps my installation is broken...?
14:26:29 <adept> blackdog: me bad. call-process.
14:27:06 <blackdog> ah, "synchronously", the magic word. Cheers adept.
14:30:21 <adept> blackdog: and then, you could go to #emacs ...
14:33:14 <blackdog> adept: yeah, I know. I'm not terribly comfortable on IRC, truth be told: only reason I'm here is because I've had overpriced Swedish beer with some of the people on #haskell...
14:37:20 <Marvin--> heh
14:41:07 <TripleDES> hi _
14:41:35 <dark> blackdog: Just wait till you've had homemade Swedish booze with them :)
14:42:16 <dark> TripleDES: Greetings!
14:44:55 <TripleDES> :)
14:46:28 <dark> Does anyone know what the phrase "without fear and without remorse" alludes to?
14:47:30 <mattam> a western hero's moto i'll say
14:51:08 <shapr> blackdog: http://purl.org/net/shapr/src/elisp/
14:52:19 <shapr> blackdog: I haven't beaten that particular dragon, but now that you've come up with that spiffy idea, I think I know how to do it.
14:55:52 <adept> dark: Tom Cancy books? :))
14:56:15 <shapr> you're probably right
14:56:38 <shapr> Tom Clancy, isn't it?
14:56:44 <dark> My girlfriend found the phrase in some speech from just before the american civil war, but it wasn't by anybody famous.
14:57:31 <shapr> if you can point me to the chunk of text, I may be able to tell you what it means.
15:01:04 <dark> Here's a link.  The phrase is at the end.  http://docsouth.unc.edu/browna/browna.html
15:02:02 <dark> Hmm, late 1863, this was during the war.
15:02:30 <shapr> g'day Pseudonym 
15:02:34 <Pseudonym> G'day.
15:02:46 <Pseudonym> Well, I'm stumped.
15:03:03 <Riastradh> Really?  Who cut you down?
15:03:26 <Pseudonym> I mean I have a more solid foundation.
15:03:33 <dark> shapr: Or do you mean the modern use I'm trying to understand?  It's the title of Eben Moglen's article, "SCO: Without Fear and Without Research".
15:03:44 <dark> shapr: People on Groklaw are chuckling about the title but not explaining it :(
15:04:35 <shapr> I'd guess the joke is about the resemblance to "State of the Union" speech given once a year by the US President
15:06:09 <Pseudonym> Did he use a phrase similar to that?
15:06:35 <shapr> anyways, that phrase in the speech means "if the ghosts of dead confederate soldiers came back and accused us of failing them, I would not be afraid of the soldiers, nor would I have any regret or remorse, I would know I did the best I could"
15:06:59 <shapr> he's saying that everyone is scared of the North, and it's pissing him off.
15:07:27 <shapr> I do think I've heard "without fear and without remorse" somewhere else in US politics though.
15:07:46 <shapr> dark: does that help any? or just stuff you already knew?
15:08:59 <dark> shapr: No it's all new to me :)
15:09:14 <Pseudonym> Google might know.
15:09:21 <dark> shapr: The State of the Union speech I found doesn't seem to have any such phrase, though.
15:09:36 <shapr> I think the reference on groklaw is probably "the confederates were screwed, the speech was the last blustering breath of a dying 'country', notice how similar this is to SCO"
15:09:54 <shapr> dark: the State of the Union speech is given once a year.
15:10:05 <dark> shapr: Doesn't that get boring? *grin*
15:10:16 <shapr> heh
15:10:24 <Pseudonym> The phrase "without fear and without remorse" is actually quite old.
15:10:42 <shapr> groklaw is saying that SCO has all the chance of winning as the confederate states.
15:10:50 <shapr> I think
15:11:26 <dark> Pseudonym: Should I be googling in Latin? :)
15:11:32 <Pseudonym> French, I think.
15:11:36 <Pseudonym> Baudelaire.
15:12:00 <phubuh> sans peur et sans souci!
15:12:04 <Pseudonym> Right.
15:12:15 <blackdog> shapr: well, let me know. I thought it'd be a simple job and am presently greatly dismayed... i didn't expect to be doing concurrent programming in elisp. :)
15:12:41 <Pseudonym> OK, it was used by a speech in the Confederate Senate, 1863.
15:12:59 <shapr> blackdog: oh, I thought you'd already fixed it...
15:13:14 <dark> Here's a site that shows it in 1662: http://www.staff.brad.ac.uk/gshoobri/FAMILYLN.HTM
15:13:15 <phubuh> blackdog: luke gorrie wrote an elisp package to do erlang-style concurrency, iirc
15:13:21 <Pseudonym> I should work now.
15:13:23 <shapr> luke is da man
15:13:36 <shapr> Luke is amazing.
15:13:38 <Pseudonym> dark: There you go.
15:14:09 <blackdog> shapr: no. just licking my wounds.
15:14:13 <shapr> heh
15:14:31 <Pseudonym> Sans Peur et Sans Reproche  Pierre du Terrail, Chevalier de Bayard, was called Le chevalier sans peur et sans reproche. (1476-1524.)
15:14:34 <Pseudonym> I can beat 1662.
15:14:34 <blackdog> that's almost as scary as Pat's haskell parser written entirely in TeX...
15:14:36 <shapr> what did you try? did you stuff a call to M-` into the compilation-finish-function ?
15:15:00 <shapr> Luke wrote part of an Emacs clone in Erlang, it's called ErMacs
15:15:04 <Pseudonym> There's also a place called Sans Souci near Potsdam.
15:15:19 <blackdog> didn't know about that: I was playing with mode-compile-after-compile-hook, which didn't help much. i'll try your one.
15:15:22 <shapr> in Luke's first experience with JavaScript, he wrote a scheme interpreter, and the SchemeWiki was born.
15:15:24 <phubuh> yeah, that was cool
15:15:42 <dark> shapr: Writing scheme interpreters is reflexive for some people?
15:15:51 <blackdog> brainstem function. :)
15:15:53 <shapr> SchemeWiki had moire graphics on the front page written in Scheme
15:16:07 <shapr> dark: Luke is an impressive guy.
15:16:23 <Riastradh> dark, it's reflexive for anyone who has ever taken a CS course that used Scheme.
15:16:57 <shapr> Luke got good enough at Erlang that a Stockholm firmed hired him from Brisbane
15:17:10 <adept> ppl, anyone here with xemacs >= 21.4.13, mule, and 5 minutes of spare time to help me?
15:17:10 <Pseudonym> Impressive.
15:17:19 <shapr> I keep claiming I'll get down to Stockholm and buy him a beer.
15:17:25 <shapr> adept: what do you need?
15:17:34 <Pseudonym> shapr: See if you can find him some XXXX.
15:17:40 <Pseudonym> Taste of home. :-)
15:17:44 * shapr grins
15:18:11 <blackdog> c'mon, give the poor guy a break... he moves halfway around the world, and _still_ can't get away from the Official Worst Beer Ever?
15:18:19 <Pseudonym> :-)
15:18:30 <Pseudonym> No, US beer is the worst ever.
15:18:43 <Pseudonym> Pukey Mountain Dog Water
15:18:50 <dark> "Mort aux Vaches" is probably not french for "dead cows".
15:18:51 <blackdog> I've only tried Sam Adams, and that tasted ok...
15:19:00 <Pseudonym> Sam Adams is the one exception.
15:19:13 <Riastradh> Pseudonym, no, there are more.  But _most_ American beers suck.
15:19:23 <Pseudonym> Riastradh: OK, you're probably right.
15:19:31 <Riastradh> And the situation has greatly improved in the past couple decades.
15:20:18 <Pseudonym> I've tasted one or two US beers, and they reminded me of a dead skunk.
15:20:40 <Pseudonym> (Not that I've ever tasted a dead skunk, but I'm guessing that's what they'd taste like.)
15:25:29 * TripleDES take first contact with emacs...
15:27:41 <shapr> yay emacs!
15:27:51 <shapr> it sucks less!
15:27:56 <shapr> blackdog: what do you think of emacs so far?
15:28:18 <Pseudonym> shapr: So far, he thinks it looks like a window with a status line down the bottom.
15:28:29 <TripleDES> shapr, what do you use to code ?
15:28:30 <shapr> he must be using my config files.
15:28:39 <shapr> I use emacs for irc, much less code :-)
15:29:16 <TripleDES> I've always used vim, but I want to get a chance to emacs now
15:29:18 <TripleDES> :)
15:29:19 <shapr> I use emacs to play music, for my primary command line shell, read mail, read news, um...
15:29:34 <TripleDES> wow
15:29:47 <TripleDES> is it an editor ? ;)
15:29:54 <Pseudonym> shapr has also written a Haskell compiler in Emacs lisp.
15:30:19 <shapr> oh, it's a great calculator, it's my timeclock, it's my calendar
15:30:37 <shapr> I use a local wiki written in elisp... the list goes on
15:31:01 <Pseudonym> It's not as good a calculator as ghci or hugs.
15:31:02 <shapr> actually, I'm not terribly clueful with elisp, just enough to write some basic code.
15:31:11 <shapr> Pseudonym: oh yeah? wanna bet? ;-)
15:31:16 <Pseudonym> Yeah. :_)
15:31:36 <Pseudonym> Does yours have arbitrary-precision rationals?
15:31:43 <shapr> I think it does
15:31:48 <Pseudonym> How about arbitrary-precision reals?
15:31:54 <shapr> I dunno about that.
15:31:59 <TripleDES> is there any good news group about Haskell anywhere ?
15:32:10 <Pseudonym> I have a set of standard Haskell functions which I use as my "calculator" environment.
15:32:16 <shapr> it does do derivations, can gnuplot most anything
15:32:19 <Pseudonym> It includes stuff like polynomials.
15:32:29 * shapr checks the emacs calculator manual
15:32:56 <Pseudonym> The only thing it's missing is an integrator.  I have to use http://integrals.wolfram.com/ for that.
15:33:56 <shapr> log, trig, hyperbolic, what's a branch cut?
15:34:25 <blackdog> shapr: i'm slowly learning the keybindings... i think the nicest thing about it so far is that it's a lot easier to start customising stuff. I'm sure you can do a lot of this sort of thing in vim, but no-one ever does except major wizards.
15:34:40 <Pseudonym> Branch cut something from complex analysis.
15:34:50 <shapr> probability, combinatorial functions, various euler thingies, gamma, beta, etc
15:34:51 <Pseudonym> Hang on, mathworld will know.
15:34:55 <Pseudonym> http://mathworld.wolfram.com/BranchCut.html
15:35:06 <shapr> oh
15:35:34 <shapr> vector and matrix operations, set operations, statistics,
15:35:48 <shapr> oh, it does polynomials
15:35:54 <Pseudonym> Ah, OK.
15:36:34 <shapr> curve fitting, summations, logical ops, the list goes on...
15:36:36 <shapr> you should try it.
15:36:44 <blackdog> shapr: how do i find out about 'compilation-finish-function'? C-h C-c compilation-finish-function doesn't find it
15:37:12 <shapr> blackdog: have you tried the one I put onto HaWiki:HaskellMode ?
15:37:24 <shapr> I have it handy if don't feel like surfing over there.
15:37:47 <shapr> Pseudonym: admittedly, I once spent several hours trying to find out how to do something basic with this calculator ...
15:37:52 <Pseudonym> :-)
15:38:08 <Pseudonym> I guess that's the difference.  With my ghci environment, it's got exactly what I need and nothing more.
15:39:21 <shapr> my favorite calc feature is the 'embedded' mode, you can write a detailed calculation, and then hit a key to have the calculation replaced by the solution
15:39:47 <shapr> it's handy for emails, txt docs, etc
15:41:34 <blackdog> shapr: cool, found it. Out of curiousity: where does compilation-finish-function get picked up?
15:41:53 <shapr> blackdog: compile calls it
15:42:42 <shapr> I would suggest you put a call to M-` in the ELSE branch of that if
15:42:46 <shapr> and that will probably do it.
15:42:56 <blackdog> i'm going to have to get out of the static-typing mindset, I see. The idea of a program calling a function only if it's defined still weirds me out.
15:44:17 <shapr> think of it like .. is there an mconcatMaybe?
15:44:21 * shapr checks docs
15:45:25 <blackdog> shapr: you are my living emacs god. Thank you.
15:45:36 <shapr> did that fix it?
15:45:40 <blackdog> Yep.
15:45:44 * shapr feels his ego swell!
15:46:14 <blackdog> So how would I have found out that compilation-finish-function needed to be defined? Where's my breadcrumb trail? :)
15:46:17 <shapr> blackdog: ok, what are the things that you miss from vim? what are the downsides of emacs that you see?
15:47:15 <blackdog> it's a bit slow starting up, and resource usage is still a problem for me: ghc6 seems more hungry than past releases.
15:47:36 <shapr> blackdog: my heuristic is, 1. look on emacswiki.org 2. ask on #emacs 3.1 C-h a (some patterns) 3.2 browse the source of found elisp modules 4. search info docs
15:48:07 <shapr> sometimes I reach 5. fgrep -r on my elisp sources directories
15:48:25 <shapr> have you read EmacsNiftyTricks on emacswiki.org?
15:48:57 <shapr> oh, subscribe to gnu.emacs.sources and rip off useful modules there
15:50:10 <shapr> I get bored easily, so I randomly browse through source I have but am not familiar with, I find many neat emacs tricks when browser elisp sources.
15:52:55 <blackdog> shapr: cheers. checking out nifty tricks now...
15:53:15 <shapr> could I use mconcat to do Data.Maybe.catMaybes ?
15:55:35 <shapr> anyways, couldn't you use something like sequence_ and concatMaybe to get the same elisp behaviour? only call a function if it's defined?
15:57:29 <shapr> blackdog: emacs has a neat trick where you can delay loading of modules until you actually use them the first time. that could improve your emacs startup speed
15:57:53 <blackdog> I don't think so... you'd need some reflective ability in order to ask (at run-time, presumably) whether a particular string had a meaning....
15:58:26 <blackdog> shapr: that's pretty cool.
15:58:43 <shapr> if only Template Haskell could recursively call itself
16:01:24 <shapr> blackdog: so, you comfortable with dabbrev-expand? maybe even hippie-expand?
16:01:27 <Lor> Hahaa, reflection.
16:01:31 * Lor has Ideas about it.
16:01:48 <Lor> Not directly applicable to haskell, though. (Sorry.)
16:01:49 <blackdog> shapr: i haven't reached that level of enlightenment yet.
16:02:06 <shapr> blackdog: have you tried M-/ ?
16:02:29 <blackdog> according to the screaming hordes of cll, reflection and any kind of static typing is impossible anyway.
16:02:52 <Lor> It's not. It just hasn't been done.
16:03:09 <Lor> Yet.
16:03:21 <shapr> Lor: any papers on the subject? or should I continue reading your wiki?
16:03:45 <Pseudonym> Does anyone know why nobody has proposed first-class continuations for Haskell?
16:03:49 <blackdog> shapr: i have now. that's pretty weird. is it just doing dictionary lookups?
16:03:50 <Pseudonym> Is it something to do with lazy evaluation?
16:04:09 <Lor> Hee, I haven't managed to add anything there lately. Correspondence with Andreas Rossberg has taken some time.
16:04:20 <shapr> blackdog: any word in any open buffer, type the first few chars, hit M-/ each next time you hit it chooses the next completion.
16:04:27 <Lor> pseudonym, referential transparency.
16:04:38 <Lor> Continuations would require a specified evaluation order.
16:04:49 <shapr> blackdog: that's the most basic autocompletion in emacs, hippie-expand is a meta-completion that lets you use all the completers at once.
16:05:06 <Lor> Even exceptions are only possible because you can capture them only in IO, and then it's "random", which of possibly many exceptions you really get.
16:05:37 <Pseudonym> Well, the don't really break referential transparency.
16:05:48 <Pseudonym> But I take your point about evaluation order.
16:06:54 <shapr> wow, gnus does rss now. I can get realtime slashdot headlines straight to my modeline.
16:07:48 <isomer> shapr: http://www.malevole.com/mv/misc/killerquiz/
16:09:44 <shapr> isomer: 8/10
16:09:50 <isomer> 7/10 for me
16:10:00 <isomer> i actually recognized meyer and sussman :)
16:10:00 <shapr> I actually met one of them recently :-)
16:10:07 <isomer> oh, you're geekier than me
16:10:11 <shapr> but he turned me down for lunch :-(
16:10:33 <Pseudonym> Everyone knows Wadler.
16:10:39 <Pseudonym> He's got one of THOSE faces.
16:11:02 <isomer> hehe
16:11:26 <shapr> Pseudonym: you should come to an ICFP, preferably when I'm going too :-)
16:11:47 <Riastradh> Even Schemers know of Wadler.
16:11:48 <phubuh> 6/10 :-(
16:11:55 <phubuh> the only face I recognized was Wadler
16:12:56 <Pseudonym> shapr: I should, but a) It's 20 hours worth of flight away, and b) I can't afford it.
16:13:10 <shapr> get a better paying job so you can!
16:13:23 <Pseudonym> Preferrably one involved with FP so they'll pay.
16:13:28 <shapr> right!
16:14:03 <Pseudonym> I wouldn't mind working for GC, actually, except that it's in the US.
16:14:12 <Pseudonym> I did honours with Mark Shields.
16:14:24 <isomer> GC?
16:14:29 <Pseudonym> Galois Connections
16:14:30 <isomer> gregor?
16:14:32 <isomer> oh
16:15:01 <Pseudonym> (If I can't afford to go to ICFP, I certainly can't afford an international move.)
16:50:27 <phubuh> I think I like Erlang
16:50:55 <Pseudonym> Come back when you're certain.
16:51:13 <phubuh> if I were certain, what would I be doing here? :-)
16:51:38 <ayrnieu> phubuh - much to like in Erlang.
16:52:25 <Lor> I've never found the erlang docs very accessible.
16:53:17 <ayrnieu> Indeed?  I find them very accessible.
16:54:15 <ayrnieu> You probably also want to look at the Erlang spec -- the www.erlang.org 'documentation' page plays it down horribly, but I found it critical to learning the language.  Also, for knowing what bloody operators Erlang had.
16:54:58 <Lor> It's confusing that these huge frameworks are bundled together with the core language.
16:56:52 <ayrnieu> I've found that I can ignore them until I grow into them -- I ignored gen_server and such for a long time, writing my own keep-alive servers (that I programmed from very little functionality to a great deal of functionality without ever stopping the server -- just reloading modules and letting the processes make the transition)
17:29:59 <exarkun> is there a repl for haskell?
17:30:13 <ayrnieu> exarkun - hugs and GHCi
17:30:30 <exarkun> thanks
17:39:19 <exarkun> is there some statement / expression distinction I'm missing?  I can enter simple arithmetic expressions in hugs and lambdas, but everything else is a syntax error
17:39:48 <exarkun> unexpected `='
17:40:16 <phubuh> exarkun... hmm, whence do I know that name?
17:40:44 <exarkun> #ocaml maybe, I did a brief stint there some months ago
17:40:55 <ayrnieu> exardun - please show us the whole expression.  Also, you probably want `div` for integer division.
17:41:18 <phubuh> you can't normally define functions in hugs or ghci
17:41:43 <phubuh> function definitions aren't expressions any way
17:41:46 <ayrnieu> phubuh - your assertion holds so long as it only applies to hugs.
17:41:54 <phubuh> oh!
17:42:09 <exarkun> Defining functions is what I'm attempting
17:42:26 <ayrnieu> ghci has 'let x = foo' and 'x <- foo' at the toplevel
17:42:42 <phubuh> ah, yes, but you can't do it -normally- :-)
17:42:57 <ayrnieu> exar - sorry, neither hugs nor ghci really work as a 'repl'
17:42:58 * exarkun installs ghci
17:43:16 <exarkun> hmmm
17:43:36 <ayrnieu> exar - ghci has some hackery, but both generally only evaluate expressions interactively.  Better to write modules and compile them.
17:43:38 <exarkun> I guess I should set up emacs mode, then
17:44:40 <exarkun> ayrnieu: Better for actual apps, certainly.. but kind of a drag for messing around
17:44:42 <ayrnieu> You should somewhere on haskell.org a link to a major mode.  I've always used its 'complex' indentation.
17:45:07 <ayrnieu> exarkun - ghci suffices for much of 'messing around'
17:45:18 <phubuh> exarkun: you didn't write a web frontend for a bittorrent tracker in PHP, did you? :-)
17:45:44 <ayrnieu> exar - yeeagh, you wrote PHP after writing Python?
17:45:45 <exarkun> phubuh: hngn
17:45:47 <exarkun> no
17:45:52 <exarkun> that is a very different exarkun
17:45:55 <phubuh> wrong exarkun, then
17:46:33 <exarkun> annoying how often I get asked that :) my own fault for having a stupid nick, but still
17:46:42 <phubuh> haha, sorry :-)
17:47:04 <Riastradh> exarkun, what, you don't blame the PHP dolt for copying you even if it isn't true?
17:47:52 <ayrnieu> I seem to recall the exarkun breaks down into exar-kun which somebody in the Star Wars universe has as a name.
17:48:06 <exarkun> yea, Lucas stole it from me too
17:48:12 <exarkun> people are such jerks!
17:48:17 <Riastradh> That's a much better attitude!
17:48:23 <exarkun> :)
17:49:17 <ayrnieu> (I've played with O'Caml some, more recently, but already miss Concurrent Haskell.)
17:54:44 * ayrnieu hunts for gustable things.
18:03:36 <TripleDES> g'night _
19:39:20 <SyntaxLaptop> did anyone see any problems w/ the hugs nov-2003 package?
21:44:20 * isomer is away: zozo
21:49:19 <juhp> SyntaxLaptop: deb?
22:02:45 * juhp finishes packing the rpm
22:55:48 * shapr yawns
22:57:13 <Marvin--> morning
22:57:46 <shapr> y0
23:00:30 <rubix> @yow
23:00:30 <lambdabot> Yow!  It's a hole all the way to downtown Burbank!
23:00:54 * Marvin-- sighs at galeon
23:28:23 * Marvin-- laughs at a D&D thread with some *really bad* jokes
