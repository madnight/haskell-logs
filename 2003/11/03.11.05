00:00:36 <shapr> good morning #haskell!
00:00:56 <shapr> from the delta to the DMZ, it's cold out there campers!
00:06:41 <shapr> good morning kosmikus 
00:23:15 <Lunar^> shapr: Python is not my type, it seems
00:23:25 <shapr> how so?
00:24:02 <Lunar^> Things that don't work and makes you read again 500 loc because of a typo...
00:24:35 <shapr> oh
00:28:41 <Lunar^> And editing code in a browser is really chocking
00:28:44 <Lunar^> -s
00:30:34 <shapr> are you talking about Zope?
00:30:43 <Lunar^> yes
00:30:54 <shapr> I use emacs and ange-ftp
00:31:09 <shapr> I also think that editing in a browser is impossible
00:32:42 <Darius> Emacs isn't your browser?!
00:34:16 <shapr> well
00:34:16 <shapr> I never got around to learning w3m well enough
00:34:16 <shapr> it's on my list of things to do
00:34:57 <shapr> Lunar^: do you use emacs?
00:35:15 <shapr> I can tell you ways of editing Zope files from inside emacs
00:36:08 <Lunar^> Boss says that it's not possible with the old version I'm working on
00:36:21 <shapr> what version do you have?
00:36:24 <Lunar^> dunno
00:36:34 <Lunar^> I really don't know if I'm going to stay here
00:37:11 <shapr> I don't believe it's not possible
00:37:26 <shapr> Zope runs on the medusa async server, which has had ftp access for many years
00:37:27 <Lunar^> For two months now, I'm really getting pleasure again from programming
00:37:53 <shapr> so I bet it only requires turning on a command-line switch for the ftp server
00:38:40 <Lunar^> Haskell by the way it quite ensures "safe" programming is really a part of this pleasure
00:39:19 <shapr> the higher order parts of Haskell really thrill me
00:39:20 <Lunar^> I don't want to be frustrated again by one of the most important component of my life
00:41:32 <shapr> I've believed for years that this sort of higher level abstraction is possible, I'm so glad I found it!
00:42:40 <shapr> hi Darius
00:43:00 <ddarius> Second time my computer just froze completely arbitrarily.
00:43:52 <shapr> ain't software great
00:44:11 <ddarius> Actually, I'm thinking it might be a hardware issue.
00:44:13 <shapr> architects, programmers, woodpecker...
01:04:05 <phubuh`> Hello!
01:15:19 <shapr> hi phubuh`
01:15:21 <shapr> hoi blitznl 
01:16:27 <blitznl> hoi shapr
01:17:03 <phubuh`> Hey shapr :-)
01:59:33 <blackdog> shapr: how do i get xemacs to re-evaluate my .emacs from the keyboard? I'm sick of using the mouse.
02:05:21 <phubuh`> Open it and do M-x eval-buffer.
02:06:10 <blackdog> cool. thanks.
04:26:12 <semfred> hello all, has anyone seen an example of an "animal guessing game" written in Haskell?
04:36:30 <ski> what do you mean by "animal guessing game" ?   like 20 questions ??
04:38:49 <vegai> if someone thinks functional programming to be easy, perhaps this will be more challenging: http://www.sampou.org/haskell/article/whyfp.html
04:39:29 <vegai> as for me, I recognize that the title is a question, but not much more =)
04:40:36 <ski> seems like some sort of kanji (and kana ?)..  is it japanese ?
04:55:33 <norpan> japanese yes
04:56:22 <norpan> i didn't know john hughes spoke japanese though
04:57:34 <andersca> hello there norpan
04:57:42 <andersca> you old old man
05:06:37 <norpan> yes i'm very old
05:19:36 <SubAtomic> this is a fast hack and wont get you a good mark on your ASSIGNMENT because the function prototypes have not been set and i have deliberately used char arrays as opposed to strings and the code is very convoluted and inefficient ... but it will give you a start
05:19:56 <SubAtomic> main = do {
05:19:57 <SubAtomic>        putStr "\nGuessing game \n";
05:19:57 <SubAtomic>        putStr "Enter a number from 1 to 10: ";
05:19:57 <SubAtomic>        guess <- getLine;
05:19:57 <SubAtomic>        evaluate guess;
05:19:57 <SubAtomic>        return ()}
05:19:59 <SubAtomic> evaluate x =
05:20:01 <SubAtomic> 	   if isInGroup x ["cow","horse","chicken"] == [x]
05:20:03 <SubAtomic> 	   then putStr "\nyou win\n"
05:20:05 <SubAtomic> 	   else putStr "\nyou lose\n"
05:20:07 <SubAtomic> isInGroup _ [] = [] 
05:20:09 <SubAtomic> isInGroup x (y:ys) = do {
05:20:11 <SubAtomic> 		   if (x/=y) 
05:20:13 <SubAtomic>                    then isInGroup x ys
05:20:15 <SubAtomic>                    else y:isInGroup x ys;
05:20:17 <SubAtomic> 		   return x}
05:22:38 <SubAtomic> whoops putStr "Enter the name of an animal ";  .....
05:22:45 <ski> SubAtomic : char arrays ?
05:22:55 <SubAtomic> char lists
05:24:06 <ski> and why the do in isInGroup ?  (it is type error, no ?)
05:24:45 <SubAtomic> no
05:25:13 <SubAtomic> it will give a type error because i have used the ; operator in that loop
05:25:22 <SubAtomic> syntax sorry
05:25:55 <earthy> that do is using the list as a monad, right? :)
05:25:58 <ski> ??
05:26:19 <SubAtomic> no
05:26:37 <earthy> http://www.nomaware.com/monads/html/listmonad.html
05:27:06 <SubAtomic> oh well i mean i havent imported monad to write that code
05:27:14 <earthy> ah, right. ;)
05:27:51 <SubAtomic> i saw the question and thought it would occupy me for a couple of mins ;)
05:28:47 <earthy> the code *is* rather convoluted, yes. ;)
05:29:03 <SubAtomic> hehe, you cant give assignment answers
05:29:21 <ski> hmm, if we're in list monad land : wouldn't the base case be equivalent to an mzero, and thusly isInGroup always return an empty list ?
05:29:46 <SubAtomic> it will return a [char]
05:30:50 <SubAtomic> actually it will return an untyped list ...
05:31:03 <SubAtomic> isInGroup :: Eq a => a -> [a] -> [a]
05:31:23 <SubAtomic> well the same type as you test against anyway
05:31:38 <ski> but "isInGroup _ [] = []" (the base case) gives an empty list (i.e. mzero), and the >>= hiding inside the do in the other case will do a concatMap on that list, no ?   resulting in another empty list, no ?
05:32:01 <SubAtomic> ?
05:32:32 <ski> i'll guess i'll have to put it in a file and test it ...   :)
05:33:00 <SubAtomic> yes
05:33:43 <ski> (instead of blathering)
05:37:09 <SubAtomic> wonder if semfred has even noticed?
05:37:18 <ski> heh
05:38:32 <SubAtomic> he quit before i coded it!
05:39:06 <ski> oh, sorry, i see where i though wrong. you are of course right :)
05:39:10 <ski> thought
05:39:28 <shapr> @yow
05:39:29 <lambdabot> This ASEXUAL PIG really BOILS my BLOOD...  He's so..so.....URGENT!!
05:41:41 <ski> SubAtomic : (the point i was missing was "y:isInGroup x ys". possibly because i usually don't use the list monad so transparently, hmm. i dunno)
05:42:22 <earthy> ;)
05:43:13 <ibid> anybody here know alex?
05:43:18 <shapr> no, who's he?
05:43:20 * shapr snickers
05:44:08 <ibid> shapr: bah :)
05:44:19 <ibid> shapr: alex the lexer generator
05:44:22 <shapr> yah, I know :-)
05:44:38 <shapr> I know that SyntaxPolice is hosting the latest version
05:44:43 <shapr> and I think I've heard Igloo work on it some.
05:47:51 <andersca> time to go to luleÃ¥
05:48:17 <shapr> yay
05:48:21 <shapr> are you serious?
05:48:38 <ibid> alexScan is giving me problems
05:48:39 <shapr> andersca: when will you be in Luleå? where can I be to buy you a beer?
05:49:27 <ibid> Inferred type: AlexReturn a
05:49:31 <ibid> Expected type: Maybe ((String, Char), Int, t -> ParserM Token)
05:49:53 <ibid> expected type is what the docs say
05:50:03 <ibid> inferred type is what it actually returns
06:29:20 <shapr> argh
06:30:01 <SyntaxPolice> ibid: I know a bit about alex
06:30:09 <SyntaxPolice> actually, I'm hosting the old version, not the latest version
06:31:11 <Igloo> Syn: Did you mail about c2hs BTW?
06:32:01 <Igloo> I don't think I've done anything with alex
06:32:23 <Igloo> Well, except package it and test it on the example given
06:33:04 <ibid> SyntaxPolice: the 2.0 docs do not agree with what it actually does, see above :)
06:39:13 <SyntaxPolice> Igloo: I didn't mail about c2hs
06:39:28 <steveh> good morning
06:39:34 <shapr> hi steveh 
06:39:37 <shapr> wassup?
06:40:06 <SyntaxPolice> ibid: yeah, I haven't really looked at 2 yet. Email simonMar :)
06:42:03 <ibid> SyntaxPolice: nah. i just looked at the code and went on :)
06:42:46 * steveh is procrastinating from writing more Perl/.
06:43:10 <steveh> #haskell is a welcome respite from the insanity of such a language :)
06:43:19 <SyntaxPolice> hehe
06:51:04 <shapr> @yow
06:51:04 <lambdabot> While I'm in LEVITTOWN I thought I'd like to see the NUCLEAR FAMILY!!
06:51:45 <Tomasso> any function to truncate a float number?
06:51:55 <Tomasso> to get only the integer part
06:52:12 <shapr> floor or ceil ?
06:52:13 <shapr> @type floor
06:52:14 <lambdabot> floor :: (RealFrac a, Integral b) => a -> b
06:52:17 <shapr> @type ceil
06:52:18 <shapr> @type ceiling
06:52:18 <lambdabot> ceiling :: (RealFrac a, Integral b) => a -> b
06:52:22 <Tomasso> let me check
06:52:47 <Tomasso> hmmh dont see how to use it
06:53:05 <Tomasso> what information does it get, what is integral?
06:53:07 <shapr> @type ceiling (1.5 :: Float)
06:53:07 <lambdabot> ceiling 1.5 :: Integral a => a
06:53:28 <shapr> @type floor (1.5 :: Float)
06:53:28 <lambdabot> floor 1.5 :: Integral a => a
06:54:17 <shapr> personally, I'm waiting for Hal to finish his typing complexity thoughts and find a simple @type call that does a DoS attack on my server :-)
06:54:59 <shapr> gutenabend Segora 
06:55:04 <Segora> re shapr
06:55:19 <blackdog> good morning all, it's time for bed i believe
06:55:45 <shapr> it's 4pm
06:55:50 <shapr> I want to sleep.
06:56:29 <blackdog> that's some screwed-up biorhythms.
06:56:40 <shapr> just lack of sleep
07:12:00 <shapr> so, anything interesting going on?
07:16:50 <norpan> @type undefined
07:16:50 <lambdabot> undefined :: a
07:17:07 <norpan> @eval undefined
07:17:12 <lambdabot> out of fuel - use @resume to continue
07:17:24 <shapr> :-P
07:17:29 <norpan> @resume
07:17:33 <lambdabot> out of fuel - use @resume to continue
07:17:55 <norpan> is this some kind of turing test?
07:18:22 <shapr> hehe
07:19:01 <SyntaxPolice> @yow
07:19:01 <lambdabot> Yow!  I'm out of work...I could go into shock absorbers...or SCUBA
07:19:01 <lambdabot>  GEAR!!
07:39:23 <Tomasso> @type power
07:39:39 <Tomasso> @type sqr
07:39:47 <Tomasso> @type sqrt
07:39:48 <lambdabot> sqrt :: Floating a => a -> a
07:39:59 <Tomasso> grgr sqr does not exist
07:42:01 <Tomasso> do i have to write it myself..?
07:42:11 <Segora> sqr x = x *x
07:42:17 <steveh> hehe
07:42:42 <Tomasso> yeah, but dont like puting that thing in my clear code
07:43:00 <Segora> xsqr :: forall a. (Num a) => a -> a
07:43:12 <Segora> -x
07:43:42 <Tomasso> xsqr is not defined.
07:43:42 <Segora> Tomasso: what about 'Missing_stuff_or_what_should_be_in_Haskell_too.hs' ?
07:44:04 <Tomasso> hahaha do i have to write it myself?
07:44:06 <shapr> hoi blitznl 
07:44:09 <Tomasso> or its available for download
07:44:27 <shapr> @type (**)
07:44:28 <lambdabot> (**) :: Floating a => a -> a -> a
07:44:31 <shapr> @type (^)
07:44:32 <lambdabot> (^) :: (Num a, Integral b) => a -> b -> a
07:46:25 <elmex> shapr: what abou the self-describing fileformat?
07:47:08 <Segora> Tomasso: Missing_stuff_or_what_should_be_in_Haskell_too.hs
07:47:11 <Segora> erm
07:47:18 <Segora> Tomasso: http://nxdomain.org/Missing_stuff_or_what_should_be_in_Haskell_too.hs
07:47:24 <Segora> *g*
07:56:27 <blitznl> hi shapr
08:00:01 <Tomasso> haha
08:02:13 * shapr grins
08:03:27 <Segora> maybe this would be something for haskell-libs, the catch-all module for stuff people miss but can't really categorize / misc stuff
08:03:35 <Segora> ;)
08:08:17 <shapr> heh, good idea
08:08:47 <elmex> shapr: what about the thoughts of the self-describing fileformat?
08:08:54 <shapr> elmex: what about them?
08:09:10 <elmex> any progress solutuion?
08:09:11 <shapr> elmex: how do you use fibonacci to encode information?
08:09:19 <elmex> dunno?
08:09:51 <shapr> elmex: nah, I've been working so much I haven't had time to sleep, much less hack on autoformat
08:10:16 <elmex> working on what?
08:10:53 * esap has lots of things that should be in some commonly-used library. Like adjunctions.
08:10:53 <shapr> setting up a server and website for a client
08:11:01 <shapr> esap: do you put your code into hlibs?
08:11:12 <elmex> shapr: thats not hard? debian + apache => 5 hours 
08:11:31 * esap normally doesn't, I have a separate CVS repository for code.
08:11:37 <shapr> nah, this server needs user login, user content submission, etc etc
08:11:43 <shapr> so I'm using Python/Zope/Plone
08:11:52 <elmex> hm
08:12:04 <elmex> shapr: don't play with snakes
08:12:06 <shapr> :-P
08:12:09 <shapr> I like Python.
08:12:26 <elmex> i like Perl ... perls are much nicer to play with.. and much more valuable
08:12:47 <elmex> snakes are just dangerous ;)
08:12:59 <emu> perls lie at the bottom of the ocean
08:13:28 <Igloo> I hear some langiage called Haskell or something is quite good
08:13:30 <elmex> Igloo: hmm
08:13:32 <shapr> yah, I heard that too.
08:13:39 <emu> what? did you say Pascal?
08:13:49 <shapr> esap: is your code publically available?
08:13:54 <Igloo> You get that too, eh?
08:13:55 <elmex> Igloo: thats not an interpreted language... and how to embed it into other programs?
08:13:59 <emu> its horrible
08:14:16 <emu> and then they quickly rant on how old and bad pascal is, while I say 'no no'
08:14:17 <shapr> yah, people say, oh I know Pascal
08:14:29 <emu> HASKELL
08:14:33 <Igloo> elmex: You seem to have found an opportunity!
08:14:48 <esap> shapr: well I could put it available. I actually had pserver public access some time ago, but I have no idea if it still works.
08:14:59 <elmex> Igloo: what opportunity!?
08:15:26 <Igloo> Adapting hugs/ghci/something else so Haskell is easily embeddable
08:15:38 <shapr> esap: or you could put stuff in hlibs if you want
08:15:59 <elmex> Igloo: is that possible?
08:16:27 <Igloo> Anything's possible if you put your mind to it  :-)
08:16:42 <shapr> especially headaches
08:16:43 <Igloo> Well, except solving the halting problem etc
08:16:45 <elmex> Igloo:...
08:16:51 <shapr> Igloo: bah, I'm sure that one is solvable too.
08:16:54 <elmex> halting?
08:17:11 <elmex> what halting problem?
08:17:23 <emu> the problem is not halting
08:17:30 <Igloo> Given a program in a TC language, determine whether it is guaranteed to terminate or not
08:17:49 <elmex> TC?
08:17:53 <Igloo> Turing-complete
08:17:57 <elmex> ah, ok
08:18:03 <emu> in the general case
08:18:08 <elmex> Igloo: the halting problem is easy ;)
08:18:24 <shapr> right, just pull the plug out of the wall, I promise the program will halt.
08:18:36 <elmex> lim (x -> oo) (halting(x) = true)
08:18:46 <elmex> shapr: lol :)
08:18:51 <emu> wha.. a program could be going good and strong at infinity
08:19:11 * Igloo doesn't follow what x is
08:19:15 * emu neither
08:19:38 <elmex> Igloo: hmm... never mind ;) i'm not good in math
08:20:05 * esap would like to have a "halts(x)" primitive in Haskell as a primitive type [of course, to have values of that type, you'd have to prove something to halt].
08:20:44 <Igloo> You mean 5 :: halts(Int) and 5 :: Int but undefined :: Int only?
08:21:09 <Igloo> If so I'm not convinced of the use when you consider things like [1..]
08:21:17 * elmex sees some light in the quantum computing science ;)
08:21:36 <Igloo> Hmm, I guess that would be [halts(Int)], maybe it would work out
08:22:10 <Igloo> Except that wouldn't guarantee you you'd be able to get any given number of elements
08:24:09 <esap> igloo: hmm.. ok maybe something like a strictness annotation-like thing would be more useful. That you could apply to arguments of functions to declare that some function, when evaluated, will eventually demand the specified argument.
08:25:03 * esap is not sure about the exact semantics though.
08:27:54 * esap is toying with various alternatives :-) None seems good.
08:29:39 <esap> igloo: but yes, I meant the curry-howard isomorphism-like "prove this halts" thing.
08:37:25 <shapr> hi adeem 
08:37:34 <adeem> hi shapr
08:37:48 <shapr> adeem: all the channels you're on start with H, is that significant?
08:38:07 <adeem> :p
08:38:13 <adeem> i like h :D
08:38:26 <adeem> w u think
08:38:46 <adeem> but i m mostly on hp ...
08:40:42 <shapr> have you tried Haskell?
08:41:43 <adeem> not yet
08:41:53 <adeem> i come 1st time in this channel
08:43:43 <adeem> w u think ... haskell ... is good channel .. ??
08:43:53 <adeem> shapr
08:44:04 <shapr> I think the language is a good language.
08:44:34 <shrimpx> heh
08:45:26 <adeem> hmm
08:45:33 <shapr> adeem: I'm biased as to whether this is a good channel or not. I started this channel.
08:45:44 * harsha123 has scrwed up his disk :(
08:46:52 <adeem> ohh :d
08:47:02 <harsha123> hi shapr :)
08:47:11 <shapr> hi harsha123 
08:47:24 <harsha123> i think this is a great channel.. thats what gets me back again and again :)
08:47:46 <shapr> yah, I get help from knowledgable people here. I like it here.
08:48:15 <shapr> adeem: have you tried functional programming?
08:48:16 <harsha123> yep, and don't forget yourself ;)
08:48:21 <shapr> yes, I'm helpful too!
08:48:27 <shapr> and modest! (ok, maybe not)
08:48:31 <harsha123> hehehe ..
08:48:40 <adeem> no
08:48:51 <shapr> adeem: would you like to try it?
08:49:05 <harsha123> i've lost all my data, my disk that runs reiserfs has crashed :( damn
08:49:21 <shapr> that sucks :-(
08:49:27 <shapr> do you have backups?
08:49:39 <adeem> yeah ofcouse
08:49:49 <harsha123> sux badly..  trying some recovery .. but.. 
08:49:54 <adeem> that not good harsha123
08:49:55 <shapr> adeem: that's great, I'd suggest you start with http://www.haskell.org/learning.html
08:50:22 <shapr> adeem: if you have any questions about Haskell, feel free to ask me, I'll answer when I can.
08:50:36 <adeem> ok thanks for the link... im going to check it 
08:50:36 <harsha123> adeem: thats shapr being a good haskeller :)
08:51:05 <tic> shapr, this is vaguely related to haskell; d'you know if there's a Python with haskell-style pattern matching? :)
08:51:12 <adeem> ohhh ... < harsha123 >
08:51:24 <adeem> that gr8 then harsha123  :d
08:51:27 <shapr> tic: have you checked xoltar.org ? Bryn Keller has written a heavy duty FP toolkit for Python.
08:51:53 <tic> shapr, I actually looked at that once, but didn't think about the pattern matching part. Will do. Thanks!
08:51:59 <shapr> tic: also, IBM's developerWorks has a series of tutorials on using Python for functional programming, and it uses the xoltar toolkit.
08:52:14 <shapr> tic: I don't know if it does pattern matching, but it's your best bet from what I've heard.
08:52:17 <tic> sweet.
08:52:36 <harsha123> shapr: did you hear? Novell is buying off Suse..
08:52:48 <shapr> yah, I heard, I don't know what to think.
08:53:09 <harsha123> i was reading it off slashdot
08:53:19 <shapr> I've heard SuSE is the second largest commercial Linux company.
08:53:26 <shrimpx> python has list comprehensions... that's about it
08:53:39 <harsha123> i guess they are gonna capture a $500m market share
08:53:54 <shapr> shrimpx: and reduce, lambda, filter, map
08:53:57 <harsha123> in Linux ofcourse
08:54:13 <harsha123> rather *commercial* Linux
08:54:27 <Lunar^> shapr: But it doesn't have any type checking :(
08:54:28 <tic> and zip!
08:54:41 <Lunar^> shapr: And there's implicit type conversion everywhere :(
08:54:44 <tic> but still, pattern matching Haskell-style would make Python totally rule.
08:54:45 <shapr> Lunar^: that's true, but I do like using Python.
08:55:19 <shrimpx> shapr: but so do the other scripting languages out there.. 
08:56:33 <shapr> I like Python. I've tried Ruby, but I prefer significant whitespace. I've tried Perl, I didn't like it at all. I've tried Lua, it's too minimal for me. I tried Joy, I love it but it's still a toy.
08:56:36 <shapr> what else?
08:56:57 <shapr> I haven't learned Smalltalk, hopefully one day isomer will have time to teach me some stuff :-)
08:57:18 <shrimpx> you prefer significant whitespace?
08:57:20 <shrimpx> wow
08:57:36 <elmex> shapr: i played with many languages too ;)
08:57:41 <shrimpx> shapr: perl has map and grep, which is a more powerful filter
08:57:43 <harsha123> shapr: have you tried a netinstall for debain?  now that i have to go for a reinstall i would rater do it off the net
08:57:45 <elmex> i still stick with perl and c
08:59:36 <shrimpx> when i started learning haskell i realized how much of a haskell-wannabe python is
08:59:53 <shrimpx> but haskell is a good language to immitate :)
09:01:41 <harsha123> has anyone tried a netinstall for debain?
09:02:37 <Tomasso> is there any way to walk trough a tuple???
09:02:52 <Tomasso> as if it were like a list for example
09:03:09 <shrimpx> why would you want to?
09:03:10 <Tomasso> for example (x,y,z,w,g,f,d,s)
09:03:43 <Tomasso> if the 5 is passed to the function, i want g to be modified
09:03:52 <Tomasso> or smth like that
09:04:17 <shrimpx> but since a tuple is a product, how do you handle all the different types transparently?
09:04:32 <shrimpx> you'd need separate cases for each element anyway
09:04:34 <shrimpx> methinks
09:04:51 <Tomasso> hmmhh ok
09:05:25 <shrimpx> i.e. (1,'4',"foo"). if i pass 3, you have to look at it as a string anyway. 
09:05:34 <shrimpx> if they're all the same type, lists would be more appropriate
09:06:19 * shrimpx -> coffee
09:31:06 <Tomasso> diferent is /= or \= ????
09:40:38 * shapr boings
09:41:22 <shapr> whee
10:08:00 <JustinP> What would be the simpilst function to grab all the unique numbers from a list?
10:11:32 <ibid> nub . sort?
10:11:41 <ibid> depending on what you mean by "simplest"
10:15:37 <JustinP> nub . sort?
10:16:01 <JustinP> I need to write a function: unique :: [Int] -> [Int] that returns a list of unique numbers in the first one
10:16:20 <JustinP> I keep trying a recursive thing with (x:xs) type of thing, but then I can't check the beginning of the list
10:18:07 <ibid> nub . sort is probably the shortest possible definition of that function :)
10:18:12 <ibid> but this sounds like homework
10:18:24 <JustinP> homework? nah, I would never ask for help on homework :)
10:18:28 <ibid> ok :)
10:18:40 <ibid> nub and sort are both in the List library module
10:18:50 <JustinP> are they in Prelude?
10:18:54 <ibid> 20:18  <ibid> nub and sort are both in the List library module
10:19:03 <ibid> no, they are not in the Prelude
10:19:09 <ibid> but in the library module List
10:19:10 <JustinP> I can only use Prelude :(
10:19:14 <ibid> oh?
10:19:21 <ibid> well, write your own sort and nub ;)
10:19:24 <JustinP> yeah, it is uhhh a special project for uhh work :P
10:19:42 <ibid> why can you not use the library modules?
10:20:06 <JustinP> because in the specifications it specificaly said only prelude
10:21:08 <ibid> you sure this is not homework? ;)
10:21:52 <ibid> i'd use the nub . sort definition if order preservation is not important
10:21:59 <ibid> (they are fairly simple to define)
10:26:58 <Tomasso> http://168.226.148.36/trabajo/doc/TeamB-0.2.html
10:27:16 <JustinP> I can't seem to find the definiton of nub
10:27:57 <Tomasso> (can anyone tell me why hugs returns unexpected ; posibly due to bad layout... on line 73 ????
10:28:41 <Tomasso> line 73 is one line after the end of the function estaEnRangoVision
10:31:46 <ibid> JustinP: report section 17.6
10:32:21 <isomer> * stupid newbie question alert *
10:32:33 <isomer> is there a notion of abstract types in haskell?
10:32:50 <Tomasso> yes modules
10:33:39 <ibid> modules with export lists :)
10:33:55 <isomer> ...in the sense that i can make an abstract type, with several concrete types beneath it, and say that a function takes the abstract type, and then pass in a concrete type?
10:39:27 <isomer> ...and i suppose more specifically, can the compiler curry such a function?
10:47:56 <ibid> isomer: not sure if fully generally that's possible, but type classes give you at least part of that
10:48:37 <isomer> can the compiler curry them?
10:49:09 <isomer> ...i suppose is must be able to
10:49:13 <ibid> like any other function
10:49:25 <isomer> cool -- thanks for your help, ibid
10:49:47 <ibid> isomer: btw, okasaki's data structure book contains examples of this
10:51:05 <isomer> will look for it. thanks
11:01:08 <Tomasso> how does the case work???
11:01:52 <ibid> "the case"?
11:02:24 <vegai> case foo in 1 -> true
11:02:43 <ibid> true = ...? :)
11:02:48 <vegai> hmm...
11:03:03 <phubuh> You mean True. :-)
11:03:19 <vegai> ah yes
11:03:25 <ibid> true = True? :)
11:03:27 <vegai> haskell knows the Truth
11:03:30 <Tomasso> mhnhm
11:03:56 <Tomasso> foo is a boolean expresion?
11:04:08 <Tomasso> what does in 1 mean?
11:04:33 <vegai> you could read that "if foo == 1 then True" (pseudocode)
11:04:43 <Smerdyakov> Tomasso, I can tell you have not read a tutorial or textbook on Haskell.
11:04:52 <Smerdyakov> Tomasso, you should do that instead of asking what language constructs mean.
11:05:11 <Tomasso> ok
11:08:30 <isomer> Smerdyakov: can you recommend him a good one?
11:09:01 <Tomasso> haha yeah
11:10:25 <Smerdyakov> I think www.haskell.org can.
11:11:29 <ibid> should i ask that they add a link to my lecture notes there? ;)
11:14:22 <vegai> should they be translated?
11:15:43 <vegai> also, have they been translated...?
11:17:28 <ibid> not necessarily and no
12:17:15 <basti_> hi all
12:17:39 <shapr> hi basti_ 
12:18:00 <basti_> im now reworking my regex parser...
12:18:17 <shapr> how's it look?
12:18:20 <basti_> i stumbled across the fact that ListT gives a monadic List type
12:18:26 <basti_> it needs reworking ;)
12:18:56 <basti_> but I have to put a Monadic Type inside it. Now my Question: may a String be a Monad? resp. is it predefined as?
12:19:48 <ibid> String is a monad, since lists are monads
12:20:25 <basti_> oh.
12:20:28 <basti_> yes.
12:20:50 <ibid> of course, the list monad semantics may not make sense for strings :)
12:21:12 <basti_> ah.
12:21:13 <basti_> :)
12:28:25 <Jad> shapr: hello
12:31:12 <Jad> guys any one know a reliable free hosting, with no adds ?
12:36:28 <Smerdyakov> Why do you require it to be free?
12:36:42 <Smerdyakov> You can avoid ads by paying the $1 a month that the free hosts are trying to make from your sites to stay afloat.
12:38:37 <Jad> i dont have a credit card Smerdyakov
12:38:53 <Jad> any way found one, portland.co.uk
12:42:44 <Smerdyakov> I would imagine you can pay by non-credit card methods.
12:42:56 <Jad> Smerdyakov: i live in lebanon
12:43:06 * Smerdyakov thinks.
12:43:07 <Jad> not a single site delivers to lebanon
12:43:17 <Jad> thats the same case inversly
12:43:18 <Smerdyakov> OK, that's rough.
12:43:50 <Smerdyakov> Get a US bank account with a few dollars in it. ;)
12:43:54 <keverets> shapr: 8 wheeled unicycles: http://velorution.blogspot.com/8wheels.jpg
12:44:53 <Jad> Smerdyakov: hack it ?
12:45:06 <Smerdyakov> No, convert your currency once.
12:46:12 <Jad> Smerdyakov: any way problem solved
12:46:35 <Jad> i got  a hosting account from  a friend
12:47:25 <shapr> keverets: cool pic
12:48:02 <Smerdyakov> I could have probably given you one, too, for very small usage.
12:55:05 <Jad> thanks alot Smerdyakov
12:55:32 <Tomasso> hmhm functional paradigm has small code but not so readable...
12:56:17 <Riastradh> Tomasso, what are you having difficulty reading?
12:56:56 <Tomasso> hmh writing...
12:57:54 <Riastradh> ?
12:58:27 <Tomasso> hahaha...
12:58:36 <Riastradh> ?
13:00:51 <Tomasso> http://168.226.148.36/trabajo/doc/TeamB-0.2.html
13:03:04 <Smerdyakov> What is the purpose of giving that URL?
13:04:22 <Tomasso> nice highlighting :D
13:04:43 <Smerdyakov> As far as I can tell, you haven't asked anyone for any help related to it.
13:04:50 <Smerdyakov> Did you intend to imply that you are looking for help?
13:05:19 <Tomasso> Smerdyakov: no, i have to do it alone
13:05:31 <Smerdyakov> OK, then I don't know why you pasted it here...
13:07:45 <Tomasso> Smerdyakov: grgr hugs returns error on line 73
13:07:57 <Tomasso> and cant figure out why
13:08:05 <Smerdyakov> I thought you were asking for help. :D
13:08:21 <Tomasso> unexpected ; due to bad layout
13:08:39 <Smerdyakov> You've put the wrong number of spaces somewhere.
13:08:52 <Tomasso> mhmh
13:09:01 <Tomasso> there is  nothing on line 73..
13:09:51 <Tomasso> line 73 is after: (Just _) -> (distance==1)
14:13:33 * SyntaxPolice politly informs java how nuts it is
14:15:05 <isomer> write them a ticket, SyntaxPolice
14:15:20 <dark> shapr is giving out free tutorials?
14:15:42 <isomer> and donuts, from what i understand
14:16:16 <isomer> actually, it sounds more like he's offering to write new ones, if there is an expressed need
14:18:40 <dark> If I feel evil I might ask for one on Template Haskell :-)
14:21:39 <figment> can anyone take a look at a program and tell me where im going wrong here?
14:44:42 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","new monads tutorial http://www.nomaware.com/monads/html/","Any user who would like to request any unwritten tutorial please msg shapr", "peakUsers = 72"]'
14:44:42 --- topic: set by Jad on [Tue Nov 04 12:03:06 2003]
14:53:31 * dark didn't.
14:55:36 * mattam won't
14:55:51 * isomer can't
14:56:19 <isomer> oh, the movie. i thought help with the code :)
14:59:05 <SyntaxPolice> #haskell has a definite anti-matrix tinge to it. Is this related to the slight anti-US tinge?
15:00:24 <kosmikus> is there an anti-US tinge?
15:01:00 <isomer> functional programming seems to be basically a european phenomenon...
15:01:54 <kosmikus> and this is because the matrix has been designed that way? ;)
15:02:02 <isomer> apparently...
15:02:13 <kosmikus> then I see the connection
15:02:14 <esap> I thought someone who wrote Matrix had to have read about Haskell :-) There were too many references to all the good stuff!
15:03:15 <shrimpx> well the writers say that it has a lot to do with higher order math :)
15:04:04 <mattam> SyntaxPolice: i think matrix is a separate phenomenon by itself (and europeans like Luc Besson could have done something in the same style).
15:04:19 <esap> I think it has lot to do with category theory. It had adjunctions, coproducts, choice, monads. Basically everything.
15:04:31 <shrimpx> esap: matrix revolutions?
15:04:36 * esap nods.
15:04:39 <shrimpx> weird
15:04:42 <shrimpx> i must see it now
15:04:49 <shrimpx> i wasn't going to ...
15:05:18 <esap> oh and coalgebras and oracles (obviously)
15:06:06 <mattam> i simply do not like this neo-style of peplum (no pun intended) with a tiny philosophy attached to it.
15:06:27 <isomer> uh oh... matrix spoiler coming. i can feel it
15:06:31 * isomer averts his eyes
15:07:01 <mattam> and i didn't see the math that was involved in the first 2 movies ... maybe it's related
15:09:07 <esap> The movie didn't really mention those category theory concepts directly, but if you look at all three movies....
15:09:13 <SyntaxPolice> hmm. 
15:09:18 <SyntaxPolice> this is getting pretty deep
15:09:33 * esap sees category theory everywhere :-)
15:09:43 <mattam> i think so esap :)
15:09:47 <SyntaxPolice> esap: everything is a category!
15:16:00 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","new monads tutorial http://www.nomaware.com/monads/html/","Any user who would like to request any unwritten tutorial please msg shapr", "peakUsers = 72"]'
15:16:00 --- topic: set by Jad on [Tue Nov 04 12:03:06 2003]
15:39:03 <harsha123> shapr: U there? :)
15:51:11 <const> is this channel also for help in haskell ?
15:51:45 <Pseudonym> No, you're thinking of #the-other-haskell-channel.
15:52:46 <Riastradh> We're divided into two channels: one that redirects people to the other, and one where everyone talks in an incomprehensible mathematical lingo about subjects so irrelevant that a snail would laugh if it knew what the word 'relevant' meant.
15:53:07 <Pseudonym> Why a snail?
15:53:12 * Pseudonym has to ask
15:53:26 <Riastradh> Because their brains are the size of a mung bean.
15:53:47 <Pseudonym> Ah, OK.
15:54:02 <Pseudonym> Damn, I missed the discussion on functional programming and The Matrix.
15:54:14 <Pseudonym> Surely with a name like The Matrix, the writers were inspired by APL.
15:54:48 <Pseudonym> If it were written by functional programmers, it would have been called The Universal Algebra.
15:54:49 <esap> No, it's about concepts, not syntax, so APL doesn't count.
15:55:14 <Pseudonym> OK, where do monads fit in?
15:55:18 * Pseudonym didn't spot that
15:55:28 <esap> beginning and the end.
15:56:01 <Pseudonym> The beginning and the end of the movie, you mean?
15:56:30 <esap> no, the thing that was repeated many times. Everything has a beginning and an end. It is clearly about sequentiality.
15:56:46 <esap> That is, monads.
15:56:46 <Pseudonym> Uh, OK.
15:56:56 <Riastradh> Ah, but monads are never destroyed: that's unsafe.  Therefore, it is _not_ about monads.
15:57:29 <esap> riastradh: but that part was about adjunctions.
15:57:48 <Riastradh> (see this incomprehensible mathematical lingo, const?)
15:57:52 <Pseudonym> Surely The Matrix is a very _un_natural construction?
15:58:06 <Pseudonym> And therefore not about adjunctions.
15:58:15 <esap> pseudonym: but the Matrix was just one category.
15:58:31 <Pseudonym> OK, what about coproducts.
15:59:35 <esap> pseudonym: Choice and how it was used.
16:00:22 <esap> pseudonym: there was the adjunction and copying and choice, all in one scene.
16:00:35 <Pseudonym> esap: You should read Joseph Campbell's "The hero with a thousand faces".
16:00:45 <Pseudonym> You'd probably see category theory in Freudian psychoanalysis.
16:01:23 <esap> pseudonym: I have to look that up.
16:01:47 <Pseudonym> You'll see a lot of "THe Matrix" in that book.  Actually, you'll see a lot of movies in that book.
16:01:57 * esap was a bit hoping to find a tower of djinni's like in GEB, but I didn't see that one.
16:02:01 <Pseudonym> It's pretty dense reading, though.
16:13:59 <esap> riastradh: oh actually, I think I misunderstood your comment about destruction of monads. I think that scene referred to function application.
16:18:58 * esap means the one with both the oracle and Mr Smith.
16:19:07 * Riastradh hasn't seen it yet.
16:19:27 <Pseudonym> Function application?
16:19:53 <esap> yes.
16:20:55 <Pseudonym> I think this confirms a long-held suspicion that people see what they are used to seeing.
16:21:06 <Pseudonym> Why are there so many movies about making movies?
16:21:08 * esap doesn't want to spoil too much. But the scene with oracle, the cookies and Mr Smith.
16:22:01 <Pseudonym> This reminds me of the gynecologist who looked at Stonehenge and saw female reproductive organs.  Well, he would, wouldn't he.
16:22:44 <Pseudonym> OK, admittedly, I saw The Matrix movies (first two, anyway) and I saw computer graphics, but I think that's a little more understandable.
16:23:00 <Pseudonym> Especially since I actually wrote some software used on the second two.
16:23:23 <esap> Well I only usually look at the plot of movies, the graphics and effects are not important.
16:23:27 <Pseudonym> It was just a paser, but still.
16:23:30 <Pseudonym> parser
16:23:43 <Riastradh> esap, the second two had _plot_??
16:23:57 <Pseudonym> esap: You'll definitely like the Joseph Campbell book, then.
16:23:57 <esap> riastradh: yes.
16:24:09 <Pseudonym> Have you seen my screenplay articles on k5?
16:24:16 * Riastradh didn't see much in the second one.
16:26:05 <esap> riastradh: The plot in the second movie was really about the keymaker, how the keymaker and the other pieces of "software" interacted. And of course, the way Neo's abilities were transferred to real world.
16:26:29 <Riastradh> That's not 'plot'...that's 'background' or something.
16:27:16 <Pseudonym> Plot is story.  Story is drama.  Drama is conflict.
16:27:34 <Pseudonym> There was a lot of plot in it, just not a huge amount of talking.
16:27:46 <esap> riastradh: but that's part of the big picture. Those are essential for the story. Like the black cat in the first movie.
16:29:34 <esap> Or the choice between the pills in the first movie.
16:30:22 <Pseudonym> Well te choice between pills was the first act turning point.
16:30:59 <Pseudonym> Also known as the "point of no return" or in Campbell speak, "the crossing of the threshold".
16:31:31 <Pseudonym> Oddly enough, it wasn't actually a "choice" in the true sense, though.
16:32:42 <Pseudonym> Gee, let me think.  I could go back to the life which it's already been established I hate, or I could get answers to all the questions which have been bugging the hell out of me.
16:32:53 <Pseudonym> That's not a choice.
16:33:10 * Pseudonym laughs
16:33:18 <Pseudonym> dark apparently hasn't seen the first one either.
16:33:59 <Pseudonym> That's like James Bond thinking "well, I could take the mission, or I could go home and have a martini".
16:34:19 <Riastradh> Ah, but if James Bond goes on the mission, he can _still_ have a martini.
16:34:26 <esap> The first movie actually used this kind of turning point many times. And then explained it by putting in the plot.
16:34:29 <Pseudonym> Quite.  See, Bond is clever like that.
16:34:45 <Pseudonym> esap: Now the second act turning point.  That's a _real_ choice.
16:35:04 <Pseudonym> Do I save my life, or do I save Morpheus and die (according to the Oracle)?
16:35:17 <Pseudonym> That's a dilemma between multiple evils.  That's a true choice.
16:36:26 <Pseudonym> Sorry, but this bugs me a bit.  A choice between good and bad isn't a choice.
16:36:34 <Pseudonym> Irreconcilable goods or multiple evils.  That's a choice.
16:37:14 <esap> But in a sense, it was a choice between safety and knowledge.
16:38:04 <Pseudonym> Hardly.  The writers had just spent several scenes showing how unsafe he was in his old life.
16:39:09 <esap> Yes, but the promise for the other pill was that everything would go as they were.
16:39:33 <Pseudonym> Meaning, presumably, that he'd still get arrested by agents and stuff.
16:39:52 <Pseudonym> And that he'd still get nervous around women in PVC at industrial dance parties.
16:40:03 <Pseudonym> And that he'd still get chewed out by his boss at work.
16:40:50 <esap> But I view that all the foreshadowing about the how unsafe the world became was just to contrast it with the safety that the other pill would provide.
16:41:20 <esap> So that the importance of the choice would be obvious.
16:41:21 <Pseudonym> Ah, no.  That's not quite how it works.
16:41:51 <Pseudonym> The crossing of the threshold is almost always never a choice for the hero.
16:42:22 <Pseudonym> Luke Skywalker didn't really have a choice in going with Obi Wan.  His family were all dead, and there was nothing left for him.
16:42:45 <Pseudonym> James Bond doesn't have a choice in going on the mission.  It wouldn't even occur to him not to.
16:44:26 <esap> you might be right, but from conceptual point of view, the pill was a choice, not from plot point of view. Luke Skywalker actually could have chosen to stay, but would probably have suffered the consequences.
16:44:46 <Pseudonym> Right.  And this is something that Campbell notices in his book.
16:45:08 <Pseudonym> In fact, Neo _did_ refuse the call at first, and he suffered the consequences.  He was arrested by the agents.
16:45:51 <Pseudonym> One of the consequences of refusing the call to adventure is becoming "spellbound".
16:46:33 <Pseudonym> Lot's Wife, Sleeping Beauty and so on all had this done to them.
16:46:38 <esap> Right. I think the choice of the pill and the thresholds are somehow inverse. The threshold is very smooth and easy, but the choice is presented, to describe the alternative.
16:47:28 <esap> and the choice would, when taken out of context, be very different.
16:47:43 <esap> but the context makes it easy.
16:48:00 <Pseudonym> That's one of the essences of drama, though.  You feel for the protagonist when he really has no choice.
16:48:41 <Pseudonym> In fact, the plot of the movie is about him becoming more "active" during the course of his adventure.
16:49:02 <Pseudonym> You'll probably tell me this is about state or something now. :-)
16:50:01 <esap> Well maybe about limits, "top" would be the threshold and "bottom" would be the (empty) choice.
16:51:52 <esap> Clearly, the pill allowed Neo to use a functor from one category to another.
16:54:18 <esap> so I the whole scene told how limits, functors and categories relate.
16:55:14 <esap> That is, a limit is a "role" of a category when a functor connects two categories.
16:57:26 <esap> That is also why the phone booths and the chairs were needed. Those are just ways of connecting those two worlds.
17:02:34 <esap> And the choice was the reason for why Smith could copy itself [copying is right adjoint to coproduct]
19:36:35 <figment> Is there anyone here that can help me with this error message  Program error: {main_v1538 []}
19:41:11 <Darius> Maybe, there are probably even more people that could help you if you provided more information.
19:42:27 <figment> What other type of information would you need?
19:43:49 <Smerdyakov> What gave you the error message.....
19:44:19 <Darius> the code, the implementation, the operating system, any weird things you might be doing
19:44:25 <figment> I was correcting someone elses code, when running the code in Hugs98, it gave me that error
19:45:35 <figment> The code opens a text file, searches the text file for any strings that match a specific pattern, then exports the matching strings to another text file.
19:45:53 <figment> Running winhugs on win2k3
19:47:17 <figment> Since I am not that familiar with Haskell, I assume its something I have done.
19:48:23 <figment> I was hoping to find some information on what type of error is is so that I could maybe retrace my steps to find what is causing it.
19:49:16 <Darius> You get it at runtime?
19:49:20 <figment> yes
19:49:44 <figment> If you would like to take a look at my code, I could send it.
19:52:09 <Darius> How much code is it?
19:52:40 <figment> 2k
19:53:03 <figment> Or I could PM and paste it in
19:55:46 <Darius> ugh, it looks like it may be what I was thinking
19:55:50 <Darius> http://www.cs.kent.ac.uk/people/staff/sjt/craft2e/errors/allErrors.html
19:56:24 <figment> Thank you
19:56:27 <Darius> Anyways, I'm thinking that that's Hugs user-friendly way of reporting an exception or pattern match failure.
19:57:01 <figment> Thank you very much
22:25:38 * isomer is away: zozo
