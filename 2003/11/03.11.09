02:07:16 <_rubix> @yow
02:07:16 <lambdabot> Why am I in this ROOM in DOWNTOWN PHILADELPHIA?
02:11:23 <Jad> !seen shapr
03:57:23 <z0d> hello. does any of the Haskell implementations support Gofer ?
04:08:39 <Darius> That's akin to asking if any Common Lisp implementation supports Scheme.  Gofer was a dialect of Haskell.  However, most of Gopher's features have since been added to Haskell or are widely used extensions.
04:09:52 <z0d> well, I'm reading a book, which uses Gofer, and I was unable to find a Gofer interpreter. Though I've found one, but it's from '94 and it doesn't compile
04:15:06 <z0d> so you're saying that theoretically a Haskell interpreter can handle a Gofer program?
04:15:53 <Darius> Well, I don't think that Gofer ever really went beyond Haskell 1.2 which is antiquated now.
04:16:11 <Darius> However, it shouldn't require too drastic changes.
04:16:22 <ibid> z0d: read a newer book
04:19:27 <dennisb> z0d: yes, use a haskell compilera, some programs will not work but it's going to be very small changes
04:20:29 <z0d> ok. thanks
04:36:23 <shapr> hi jao
04:37:08 * shapr hops
04:38:14 <jao> hi shapr
04:44:07 <shapr> hi TripleDES 
04:44:09 <TripleDES> hi
04:44:13 <shapr> feeling secure?
04:44:33 <shapr> looking for info on Haskell?
04:44:44 <TripleDES> yeah
04:44:49 <TripleDES> I'm newbie
04:45:02 <shapr> have you seen http://www.haskell.org/learning.html ?
04:45:06 <TripleDES> good topic
04:45:29 <shapr> I'd also recommend the Haskell Wiki at http://www.haskell.org/hawiki/
04:45:50 <TripleDES> oks thanks
04:45:58 <TripleDES> I'll take a look now
04:46:02 <shapr> and there's the ever popular lambdabot, an irc bot written in Haskell
04:46:03 <shapr> @yow
04:46:04 <lambdabot> The Osmonds!  You are all Osmonds!!  Throwing up on a freeway at dawn!!!
04:48:59 <Jad> shapr: did you add lambdabot do freshmeat ?
04:51:19 <shapr> Jad: no, I didn't
04:58:00 <shapr> hi opet 
05:02:29 <opet> heya :)
05:04:59 <shapr> any comments on must-write code before a lambdabot 2.0 release?
05:05:19 <opet> there's going to be a 2.0 release?
05:05:36 <shapr> yup
05:08:59 <Darius> @listcommands
05:08:59 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","foo","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude
05:10:26 <opet> coo
05:10:38 <opet> no last "?
05:10:50 <Darius> No last several characters.
05:11:08 <shapr> that's a good thing to write before a 2.0 release
05:11:48 <shapr> any other suggestions or ideas for 2.0?
05:12:02 <Darius> Getting it to work at all is fairly easy, making it aesthetic is a little more interesting.
05:12:16 <shapr> Darius: suggestions along those lines?
05:12:22 <shapr> I agree the internals could be prettier code-wise
05:12:29 <shapr> maybe this is a good chance to try HaRe for real.
05:12:46 <Darius> Can HaRe hack most of the extensions?
05:13:05 <shapr> I don't know
05:14:09 <Darius> But the aesthetic part refers to the output.  Ideally, you don't want to break in the middle of a word or line if not necessary.  This isn't too hard, but if you prematurely optimize it gets more interesting.
05:15:11 <shapr> hm
05:17:21 <Darius> Breaking into lines (as is already done) then checking the line length to see if it's over some threshold in which case break into words and takeWhile not over the length threshold, then in the case of a very long word break the word.
05:17:51 <Darius> I'm unsure what to do about the reading side as I'm not sure where the problem is.
05:43:13 <isomer> morning
05:45:29 <shapr> yay, new hardware, brb
07:03:50 <pancake> wop
09:33:01 <maihem> I want to implement the Mallet (wavelet) Transform in Haskell, but I'm stuck on how to do it neatly.
09:35:41 <maihem> I think I'll have to use a monadic style
09:36:47 <maihem> I want to take an array -- the original 2d signal (ie, an image), treat each row as a 1d signal, and transform that to produce to half width images
09:37:34 <maihem> then take each column of the two results as if they were one image joined together and do the same
09:37:56 <Vardamir> I'm definitely not a Haskell expert but you will definitely have to use I/O, in other words monads
09:39:47 <maihem> How do I "neatly" create an Array with the resulting data without storing all the data in a list of associations.
09:40:39 <maihem> I had hoped to just create a whole array each time and the runtime would realise that the monadic nature allows for it to just update the original
09:40:51 <maihem> But in ghc5 it still uses a "ton" of memory
09:41:13 <maihem> I'm just about to try ghc6, but from the release notes that hasn't changed
09:41:44 <Vardamir> sorry I'm just a beginner ... looks like you know more than me...
09:46:02 <Smerdyakov> I don't think ghc allocates new memory for the cells of an array for each update.
09:46:02 <Smerdyakov> You may be allocating memory for boxed values that you assign into it, though.
09:46:02 <Smerdyakov> But these should go away after garbage collection, if most of them are really unreachable after being replaced.
09:46:42 <maihem> I'm using Rational
09:46:49 <maihem> thats boxed
09:47:00 <Smerdyakov> You're using a monadic array thing that doesn't return a new value per update, right?
09:47:31 <maihem> Umm, yeah
09:48:22 <maihem> Though I didn't use the nice syntax... Hang on.
09:48:34 <Smerdyakov> Unless you have some kind of nefarious leak, then I bet you can limit the memory usage arbitrarily by fiddling with GC thresholds.
09:49:31 <maihem> Is it monadic if I apply a function array -> array to an array, then never use the original again?
09:49:35 <maihem> It's not is it?
09:49:43 <maihem> silly me.
09:51:01 <maihem> I can fix that
09:52:29 <maihem> Smerdyakov: What type can look like an array, but get it's data from another without allocating memory for each cell?
09:53:07 <maihem> I want to make two arrays, each m by n, look like one 2*m by n
09:53:07 <Smerdyakov> IOArray, I think.
09:54:48 <Smerdyakov> Oh.
09:54:48 <Smerdyakov> Don't know about that one.
09:54:49 <Smerdyakov> You _are_ doing this inside the IO monad, right?
09:55:22 <Smerdyakov> This "merging arrays" doesn't sound very critical, though.
09:55:23 <Smerdyakov> You can probably make due with a single one.
09:55:27 <Smerdyakov> And now I have to leave.
09:57:18 <maihem> Better description: Start with one array m by n, transform to create one m/2 by n, treat that like one m by n to create two m by n/2, which I shall treat as four m/2 by n/2 or (in another part of my code) as two m/2 by n again (but of course different values.
10:35:43 <afikee> hi !
11:00:48 <crass> anyone know which version of gtk ghc needsd to compile?
11:43:45 <maihem> How would I define a data type that looks like an array of arrays, but is stored as a simple array and a mapping from each cell in the array of arrays? I want to perform an operation that creates another such object with a different arrangement of "virtual" arrays and some different cell values. There will be a 1:1 mapping of cells in the facade and the "real" array.
11:45:07 <maihem> I can grasp the lazy functional concepts of Haskell, and I've been studying the Monad for the last hour or so and I think I just about get it, but I can't find a reference on complex types like this that I can understand :(
11:45:42 <Lor> You want multidimensional array splices?
11:47:18 <maihem> or one dimension in the simple case.
11:47:29 <maihem> I want to be able to transform like this:
11:47:50 <maihem> orig: 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
11:49:04 <maihem> trns: 11 13 15  2  4  6  8 10 12 14 16
11:49:10 <maihem> oops.
11:50:40 <Lor> And you want to do this somehow without creating a new array?
11:50:42 <maihem> trns: 1  9  5  13  3  7 11 15  2  4  6  8 10 12 14 16
11:51:19 <maihem> I do want to create a few, for serveral stages
11:52:17 <maihem> but instead of "moving" cells around as I calculate their values, I want to make them look as if I;ve moved them around so I can get an array where they haven't moved... just changed
11:52:42 <maihem> In my transformation, the actual values would be altered too.
11:53:33 <maihem> So as I move the cells to get "trns", I will change them at each stage. I want to be able to get the single array that has them in the same place as the first one, just with the different values
11:54:12 <Lor> So you do want to have imperative mutable cells?
11:54:20 <Lor> Then operate with arrays of STRefs.
11:54:42 <Lor> You can permutate the STRefs around the array, and change each one's value individually.
11:55:32 <maihem> No, I can cope with out mutable arrays, but I want to make an array look like an array of arrays so I can use different mappings from one stage to the next, but get at the unmapped version at anytime.
11:55:51 <maihem> I need to move the cells around to perform the transform easily
11:56:19 <maihem> so a facade that makes it "look" like they've moved around would be ideal
11:56:41 <maihem> But I'm happy to create a whole to object at every stage, and don't need it to be mutable.
11:57:17 <maihem> s/to/new
11:57:19 <Lor> I don't really understand what you're after.
11:57:23 <Lor> What's this for?
11:57:44 <maihem> uhh, do you know the mallet transform (for discrete wavelet stuff)
11:58:51 <Lor> Uh, no, sorry.
11:59:05 <maihem> In the mallet transform you do a low pass filter on a signal and a hig pass. then concatenate the lowpass with the high pass:
11:59:33 <maihem> you get a lowres version, immediately followed by a high res version
12:00:06 <maihem> I want to keep the lowpass separate from the high pass, but because I want to do this in a second dimension as well...
12:00:15 <maihem> I want to get at the original data.
12:00:27 <maihem> And then I want to recurse on the low pass...
12:00:30 <maihem> in each dimension...
12:01:03 <maihem> and you see it gets hairy and expensive with non-mutable arrays... but I *want* non-mutable arrays because they are cool
12:01:35 <Lor> Um, so you want to do some kind of two-dimensional concatenation?
12:02:12 <maihem> So I want to make a facade that makes the "real" array "look" like this array of arrays, so when I come to the other dimension I can transform it easily by working on the "backing store".
12:02:48 <Lor> I still don't get it. Array of arrays? What do the individual arrays represent?
12:02:51 <maihem> I'd really like to make a mapping object that behaves like an array (updates create a new one)
12:04:39 <maihem> at the end of the transform, each cell at (x,y) of the result is an x by y array
12:05:06 <maihem> but from above...
12:05:07 <maihem> orig: 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
12:05:18 <maihem> trns: 1  9  5 13  3  7 11 15  2  4  6  8 10 12 14 16
12:06:18 <maihem> arry: |  |     |           |                       |
12:06:44 <maihem> so the numbers in trns above are the cells in the backing store "real" array
12:07:06 <maihem> Then I can use the facade to calculate the values, but get at them from the backing store
12:07:26 <maihem> It would all be non-mutable, because there would be a new backing store at every stage
12:07:41 <maihem> I'd like to encapsulate it all into one object
12:07:45 <Lor> How would you refer to the values in the facade?
12:09:26 <maihem> ((facade!3)//[3,19]) should turn the "7" in trns to a 19, and thus I should be able to get to (store!7) = 19
12:10:02 <maihem> Of course creating a new object, so I would access the "store" of the new one to get the 19
12:10:45 <maihem> although arry above should actually be:
12:11:13 <maihem> arry: arry:|  |  |     |           |                       |
12:11:20 <maihem> oops:
12:11:25 <maihem> orig: 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
12:11:29 <maihem> trns: 1  9  5 13  3  7 11 15  2  4  6  8 10 12 14 16
12:11:33 <maihem> arry:|  |  |     |           |                       |
12:12:06 <maihem> so the first is 1 alone, second 9 alone, third 5 and 13, fourth 3,7,11,15
12:12:51 <maihem> then new_object = ((old_facade!4)//[3,19]) should make (new_store!7) = 19
12:15:32 <Lor> I still don't get it.
12:16:30 <maihem> the first stage of the transform gives 1,3,5,7,9,11,13,15|2,4,6,8,10,12,14,16
12:16:53 <maihem> second stage gets 1,5,9,13,3,5,9,13,2,4,6,8,10,12,14,16
12:17:13 <maihem> but when doing 2d I want to do the first stage in one dimension
12:17:21 <maihem> then in the second
12:17:36 <Lor> Ah, with [3,19] you mean [(3,19)]
12:17:46 <maihem> yes, sorry
12:18:07 <Lor> For a moment I thought you meant \\[3,19] for lists...
12:18:18 <maihem> I dont even know what that does
12:18:20 <maihem> :)
12:19:15 <Lor> It sounds like you really want some sort of mutability, or at least simulation thereof.
12:19:34 <maihem> I can actually do this in C really really fast (An old 33MHz 486 can do it in about 3 seconds on 1024x512), but It's hard to do adhoc processing and statistics in C
12:20:28 <Lor> You want some "changes" in the facade to be reflected automagically in the store.
12:20:31 <maihem> well, I don't really need that if I can take the backing store after stage one in dimension X, then use that as the backing store in dimension Y, and take the mapping from one stage as input to the next
12:21:39 <maihem> I want a new store at each comma in stage1-dim1,stage1-dim2,stage2-dim1,stage2-dim2 to pass to the following one, but I want to take the mapping to the next but one.
12:21:52 <Lor> What you could do is have wrappers to the update operation so that instead of giving a physical index, you give the facade indices and the new value, and then get a new store.
12:22:38 <maihem> I had hoped something like that, but how do I make an object with a mapping and a store that looks like those arrays?
12:23:00 <Lor> Is it that important that the interface is exactly array-like?
12:23:27 <maihem> No, just mostly array like, I need !, //, and elems
12:23:43 <Lor> You can name them the same, of course.
12:25:24 <maihem> so do I do something like: mallet ((xres,stagenum),(yres,stagenum)) (store :: array blah...)
12:25:37 <Lor> If I understand correctly what you want, wouldn't it be enough if your data type just had a flat array (the real store), and an array of arrays of indices to that store?
12:26:38 <maihem> I need^H^H^H^Hwant to be able to use the facade as if it were an array, so I can use the same code to test processes on contrived array examples as I do one the transformed data
12:27:10 <Lor> That's a teensy bit difficult, since the basic array is not a class, but a concrete type.
12:28:08 <maihem> I can wrap an Array in a trivial ArrayClass then, and use MalletClass for the transform
12:28:23 <Lor> Yes.
12:29:11 <Lor> In GHC, there is actually such a class already.
12:29:12 <maihem> I need to study Classes in Haskell more, but can I make ArrayClass "look" just like an Array. How does a class appear different from a basic datatype like array (which has methodlike things such as elems
12:29:22 <Lor> IArray, that is.
12:30:05 <maihem> ah somebody mentioned something like that earlier, but thought it was IOArray, I couldn't find any documentation on it.
12:30:37 <maihem> heh, thanks for the tips!
12:32:09 <Lor> No prob.
12:34:57 <crass> I think I may have found a bug in the haskell source (compilation error)
12:35:08 <crass> err, ghc source
12:35:27 <crass> has anyone compiled ObjectIO with gtk?
14:03:10 <maihem> In the wiki on haskell.org in the FAQ under ListMutation it says that (lst ++ [4]) actually copies the list. Is this true or just a simplification. I thought it would just provide the elements of the list as you recursed along it untill it got to the end, then start providing the appended list.
14:04:00 <ibid> it will copy
14:04:00 <maihem> or does this get hairy when you do [1]++[2]++[3]++[4]++[5]++[6]++... etc
14:04:17 <ibid> but the copy will be delayed until you request each member
14:04:43 <maihem> so it does what I thought, but "caches" the result?
14:05:22 <ibid> caches in what sense?
14:06:13 <maihem> well if it copies it, but throws away the copy as soon as you're done using it, it would be horribly slow if you try to use it many times?
14:06:41 <ibid> one ++ will copy at most once
14:06:51 <ibid> (each element, that is)
14:07:20 <maihem> what happens under "take 3 ([1,2,3]++[4])"?
14:07:35 <ibid> it will make a copy of [1,2,3]
14:07:41 <ibid> and return that
14:09:05 <ibid> (of course, i'm simplifying: lazy evaluation will delay the copy of each element until it is forced)
14:10:10 <maihem> if I do "main = do let l = [1,2,3]; let l2 = l ++ [4]; print l2" will it not bother copying?
14:12:15 <ibid> it will copy
14:12:40 <ibid> unless some optimization realizes it's unnecessary
14:14:01 <steveh> maihem: in my experience it's generally worthwhile thinking backwards 
14:14:26 <steveh> using a cons is much less expensive than append
14:14:52 <maihem> I'm wondering if there are any implementations that do that optimisation, and also for "main = do let a = listArray (1,5) [1,2,3,4,5];let b = a//[(3,10)]; print b" avoid copying the array realising that it can be done in place since a is never again referred to?
14:15:57 <Smerdyakov> This is all very fishy.
14:16:06 <Smerdyakov> If you want arrays, why not use real arrays instead of listArrays?
14:16:07 * maihem checks armpits
14:17:25 <maihem> ok, Are there any implementations that do the optimistation for "main = do let a = array (1,5) [(1,1),(2,2),(3,3),(4,4),(5,5)];let b = a//[(3,10)]; print b"?
14:18:47 <maihem> I realise that an implementation is technically allowed to optimise this to "main = do print array (1,5)... etc", but assuming it can only determine that a will not be used later...
14:24:17 <Smerdyakov> That's not going to happen.
14:24:26 <Smerdyakov> That's a very specific optimization....
14:24:40 <Smerdyakov> Is // array concatenation?
14:24:47 <maihem> I think I've found what I may be looking for, the ST monad
14:25:13 <maihem> / is "copy with changes" isn't it?
14:25:20 <maihem> s/\//\/\/
14:25:44 <maihem> oops... s/\//\/\// that's better :)
15:46:14 <maihem> I'm trying to make an instance of IArray that is constructed with a function that maps indexes in itself to those where the cell value can be found in a "real" IArray, but my head hurts now.
15:47:01 <maihem> I've started like this, but I can't see how to parameterise MArray with the index type of the real IArray:
15:47:17 <maihem> newtype MArray a e = (HasBounds a) => MArray {mapping :: i -> i, store :: IArray a e}
15:47:35 <maihem> I need Ix i => in there or something
15:47:59 <maihem> but can I do (HasBounds (a i e)) to get it?
15:49:16 <maihem> I mean (HasBounds a@(a_ctor i elem_type)), I think
15:51:28 <maihem> and then what is the e in "IArray a e" if "a@(a_ctor i elem_type)"?
16:03:53 <maihem> no, I'm a bit off the mark
16:04:17 <maihem> newtype MArray a ix e = (HasBounds a) =>
16:04:25 <maihem>         MArray {mapping :: ix -> ix, store :: IArray a e}
16:04:31 <maihem>   where Ix ix => (HasBounds a).bounds :: Ix ix => (ix,ix) -> [(ix,e)] -> a ix e
16:04:35 <maihem> perhaps?
23:06:06 <isomer> @arr
23:06:07 <lambdabot> Aye
23:06:13 <isomer> @arr
23:06:13 <lambdabot> Smartly me lass
23:06:16 <isomer> @arr
23:06:16 <lambdabot> Get out of me way, yeh landlubber
23:08:03 * isomer is away: zozo
