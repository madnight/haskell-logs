03:12:27 <shapr> oy
03:14:03 <aleator>  /quote away
03:14:16 <shapr> wheee
03:14:21 <aleator> ohops..
03:16:56 <aleator> Anyone played the old Omega game(by Stuart Marks?). I'm trying to make a something similar in haskell as an exercise..
03:58:23 <shapr> I haven't
03:58:25 <shapr> what's the game like?
03:59:23 <vegai> corewars is a better known version of that, I think
03:59:37 <shapr> ah
03:59:53 <vegai> or perhaps realtimebattle
04:03:48 <shapr> hi Arnia22
04:03:59 <shapr> corewars had three instructions
04:09:41 <earthy> had, maybe. it's at 17 nowadays
04:10:16 <aleator> Omega was turn based game of player programmed robots roaming a square grid.. With a very basic like language.
04:10:19 <aleator> Fun though.
04:11:27 <aleator> Easier than most modern variants, such as realtimebattle, where you have to deal with accelerations and such.
05:51:46 <harsha123> hello everyone.. :)
05:51:50 <harsha123> hie! shapr 
06:02:39 <harsha123> anyone alive here?
06:25:07 <harsha123> Vardamir you know any channel that discusses networking stuff?, any idea?
06:26:38 <Vardamir> related to haskell??
06:27:01 <Vardamir> or just networking in general
06:27:32 <Vardamir> harshal123, i would say look on EFNET
06:28:36 <harsha123> Vardamir networking in General
06:29:01 <Vardamir> i don't know off hand, but i'd say there are some channels on EFNET
06:29:36 <harsha123> hmm Ok.. thank you..  was having a pretty bad time asking ppl who would have not helped me at all.. thx
06:29:48 <Vardamir> can anyone help me out with a list comprehension that is giving me some trouble?
06:30:40 <harsha123> Vardamir any idea what exactly is the server name to connect to ? efnet >
06:32:31 <Vardamir> i think any of the efnet servers would do
06:32:33 <Cale> harsha123: there are lots of them, and they're not named in any consistent way. Try irc.prison.net
06:33:02 <Cale> Vardamir: what's the list comprehension problem?
06:33:03 <harsha123> hmm Ok Cale.
06:34:11 <Vardamir> well, if i use an explicit generator, i don't have a compilation problem, however if my list generator is a range, say [n..m], it's a no go
06:34:36 <Cale> what's the error?
06:34:55 <Vardamir> line 17.40: Unexpected token `<-'
06:35:33 <Vardamir> if it would help i can paste a few lines of the code
06:35:36 <Cale> interesting, could you give the line that's causing the problem?
06:35:36 <Lunar^> Vardamir: What's your line exactly ?
06:36:25 <Vardamir> adj_list :: Int -> (Int,Int,a) -> (Int,[(Int,a)])
06:36:25 <Vardamir> adj_list a es =(a, [(x,w) | (v,x,w) <- es, a==v])
06:36:25 <Vardamir> mkGraph :: (Int,Int) -> [(Int,Int,a)] -> Array [(Int,a)]
06:36:25 <Vardamir> mkGraph (n,m) es = array (n,m) adj_lists
06:36:26 <Vardamir>   where adj_lists = [adj_list i es | i <- [n..m]]
06:36:44 <Vardamir> the line is the last line i pasted
06:37:13 <Lunar^>  strange
06:37:26 <Vardamir> i know that algorithm isn't efficient, i just wanted to get something working
06:37:40 <Vardamir> hmm maybee its the compiler i'm using
06:37:44 <Cale> that looks syntactically correct to me
06:37:47 <Vardamir> i'll try ghc
06:37:49 <Cale> what compiler?
06:38:12 <Vardamir> Muenster Curry, so technically not Haskell but that should definitely work in Curry
06:39:01 <Vardamir> since the report states that ranges such as those work for list comprehensions
06:40:01 <Cale> you could do something silly, like rangenm = [n..m], then use that in the definition of adj_lists, but that would get rather annoying after a while.
06:40:21 <Vardamir> hmm it is worth a shot
07:23:24 <shapr> @yow
07:23:25 <lambdabot> MMM-MM!!  So THIS is BIO-NEBULATION!
07:45:43 * shapr sings cheerfully
07:45:59 <shapr> hi pesco, haven't seen you around much lately. Is life keeping you busy?
07:46:17 * shapr boings
07:52:33 * isomer boings in unison with shapr
07:55:42 <pesco> shapr: Hey shapr!
07:56:03 <pesco> shapr: Yes, I've much work to do... :?
07:57:37 <shapr> hoi blitznl 
07:57:44 <shapr> pesco: what sort of work are you doing?
07:57:55 <blitznl> hoi shapr
07:58:08 <shapr> hey anth, how's life?
07:58:13 <pesco> shapr: Learning. I need to catch up on calculus. It's boring.
07:58:13 * shapr bounces cheerfully
07:58:20 <shapr> oh, I can understand that.
07:59:03 <pesco> I need to get it into my head though, in order to get to the fun stuff later.
07:59:09 <shapr> yes, that's true
07:59:19 <shapr> I'm just learning about de Bruijn indices lately.
07:59:28 <shapr> lambda cal is cool stuff
07:59:43 <pesco> Never heard of de Bruijn indices?
08:00:03 <pesco> er s/?/./
08:00:29 <shapr> it's a way to make sure none of the arguments collide in a big spaghetti bunch of lambda calculus
08:01:02 <pesco> Ok, I've never done lambda calculus, really.
08:01:07 <shapr> it's easy, you number each of the arguments uniquely, and then you always have a universal description.
08:01:20 <shapr> big words for a small concept :-)
08:01:23 <pesco> I was almost suspecting that.
08:01:32 <pesco> *g*
08:01:35 <shapr> yah, it's pretty straightforward
08:02:09 <shapr> this "Types and Programming Languages" book is fun
08:02:18 <blitznl> shapr: now i remember, nameless representation of terms. 
08:02:26 <blitznl> shapr: ahh Pierce's book. I read that
08:02:42 <shapr> yah, that's it
08:02:54 <shapr> blitznl: did you enjoy it?
08:03:09 <pesco> I just bought a book on graph theory. I'm looking forward to reading that.
08:03:18 <shapr> that sounds cool, which book?
08:03:47 <pesco> "Graph Theory" by R. Diestel.
08:03:49 <blitznl> shapr: mwaoh, not really it's kinda 'dry' ;)
08:04:11 <shapr> huh, I'm having a blast
08:04:18 <shapr> it explains lots of stuff I've wondered about.
08:05:16 <pesco> shapr: The author is a professor at my University and the book is really good, in contrast to so many other german math books.
08:06:44 <kosmikus> pesco: where are you? Hamburg?
08:06:53 <pesco> kosmikus: Yes.
08:06:55 <shapr> hoi kosmikus
08:06:58 <kosmikus> hoi shapr
08:07:02 <shapr> hoe gaat? :-)
08:07:08 <kosmikus> goed, en met je?
08:07:11 <shapr> goed
08:07:17 * shapr bounces happily
08:07:18 <kosmikus> pesco: is HH good in CS?
08:07:29 <kosmikus> or are you doing math only?
08:07:59 <pesco> kosmikus: I'm doing both. CS is okay I guess.
08:08:08 <kosmikus> any FP people there?
08:08:18 <pesco> kosmikus: Not that I know of, unfortunately.
08:08:35 <pesco> kosmikus: The AI dep. is cool, though.
08:08:43 <kosmikus> but you've learnt about Haskell during your curriculum there?
08:09:23 <pesco> kosmikus: No, I started learning Haskell on my own shortly before I went to Uni.
08:09:34 <kosmikus> ah, good idea :)
08:09:47 <pesco> :) No regret.
08:10:12 <kosmikus> I've noticed your great work on the ghc ebuilds in Gentoo; but you're not using that anymore, are you?
08:10:31 <kosmikus> so which programming languages are taught in HH?
08:10:35 <pesco> kosmikus: Yes I am, but I have no time.
08:10:49 <pesco> kosmikus: I think someone else took over. I'm very thankful for that.
08:10:58 <kosmikus> pesco: that's me :)
08:11:06 <pesco> kosmikus: Oooh. Cool. :)
08:11:49 <pesco> kosmikus: I think they came out really good.
08:12:30 <pesco> As for programming languages at UHH: First year: Prolog+Scheme, then Java.
08:12:33 <kosmikus> I've not enough time, too -- otherwise dev-haskell would be full of packages.
08:12:42 <pesco> :)
08:12:55 <shapr> pesco: do you think you'll be able to learn Java, or is it too difficult? ;-)
08:13:05 <phubuh> I made a really ugly ebuild for greencard
08:13:14 <pesco> shapr: I'm already through with that, luckily. :)
08:13:51 <phubuh> it does seem to work on my box, though :-)
08:13:59 <kosmikus> why ugly?
08:14:00 <pesco> shapr: You must know, my second fav. language is C++, so.
08:14:04 <shapr> oh no!
08:14:17 <phubuh> well, it's named greencard-3.0.1, but it fetches greencard-latest.tar.gz
08:14:22 <phubuh> but I suppose that's easily fixed
08:14:41 <pesco> shapr: What's wrong about C++?
08:15:01 <shapr> I'm just teasing :-)
08:15:01 <phubuh> there's a can of worms if I've ever seen one
08:15:25 <pesco> shapr: Ok. :)
08:15:26 <shapr> pesco: I think each person finds the language(s) that work best for them.
08:15:29 <kosmikus> phubuh: submit it to bugs.gentoo.org, assign it to kosmikus@gentoo.org -- I will have a look at it, then
08:15:48 <emu> i think it's safe to say, however, that C++ is mostly a disaster :-P
08:15:53 <phubuh> I will when I finish my Spanish homework :~(
08:16:08 <pesco> emu: Let's not get into the argument right here. ;)
08:17:11 * shapr stamps on the flamewars while it's still just smoking embers
08:17:19 <pesco> Hihi.
08:18:28 <pesco> Anyway, kosmikus: Why were you asking, are you thinking of moving here or something?
08:20:52 <kosmikus> pesco: not directly, but I am from HL originally and like HH as a city, and my father is working at the RRZ HH, and so I am generally interested in what's going on at that university ...
08:21:08 <pesco> oic.
08:22:31 <pesco> Something else: Is Gentoo rsync unreachable?
08:22:44 <pesco> Can you try emerge sync and see if it works for you, maybe?
08:23:55 <phubuh> when emerge sync isn't working or is really slow, I usually just restart it to get a better mirror
08:23:59 <phubuh> it does work for me
08:24:06 <kosmikus> pesco: works for me
08:24:13 <pesco> Oh, now it does for me, too.
08:24:32 <pesco> Just a minute ago, rsync.gentoo.org would close connection on me, right after handshake.
08:25:05 <kosmikus> pesco: try using rsync.europe.gentoo.org, BTW ...
08:25:16 <pesco> Ok.
08:26:29 <phubuh> oh how I love refactoring
08:27:19 <shapr> yay refactoring!
08:29:50 <kosmikus> shapr: are you going to take over the HC&AR now, or who is?
08:30:17 <rage> :O
08:30:24 <rage> VÄLKOMMEN TOMAS
08:30:25 <shapr> hej rage
08:30:32 <rage> hej shapr 
08:30:45 <phubuh> alla här är fan svenskar
08:30:51 <rage> :o finns #sml? :)
08:31:01 <shapr> mojligt
08:31:07 <rage> shapr: vem är du?
08:31:16 <shapr> hej, jag heter Shae Erisson, jag bor i Boden
08:31:19 <shapr> vem Ã¤r du?
08:31:27 <Tomas_> boden ? det är la kallt
08:31:36 <shapr> ja, lite
08:31:44 <Tomas_> snö nu?
08:31:51 <shapr> kanske ni vill prova #haskell.se ?
08:31:57 <rage> jag heter emil holmström och bor i uppsala
08:32:13 <shapr> hej emil :-)
08:32:17 <rage> jag känner två pojkar från boden, jens och fredrik 20 år gammla
08:32:34 <kosmikus> hey, not that it's really difficult, but I understand everything so far ;)
08:32:42 <shapr> heh
08:32:46 <rage> :)
08:32:57 <shapr> well, I'm having trouble since I've set my encoding to utf-8 rather than latin-1
08:33:01 * shapr switches back
08:33:32 <shapr> ok, can you say that again? :-)
08:33:37 <rage> :(
08:33:43 <shapr> sorry, my swedish isn't very good
08:33:53 <rage> the world is not ready for utf-8, yet.
08:34:00 <shapr> possibly so
08:34:16 <shapr> I'm 32 years old, and I've lived here for almost a year.
08:34:21 <shapr> but I'm originally from Alabama.
08:34:42 <rage> :o
08:34:44 <rage> why boden?
08:36:13 <shapr> well, I met this woman on ICQ (fifty thousand words omitted) and here I am.
08:36:49 <shapr> are you learning Haskell?
08:38:13 <rage> :)
08:38:23 <rage> nopp.. but sml
08:38:44 <phubuh> hey rage, you don't happen to know someone who goes by the handle "Milkyn", do you?
08:39:01 <phubuh> he's at uu, and somewhat of an SML weenie, I think :-)
08:39:45 <rage> hum.. i don't think so :)
08:39:55 <phubuh> oh well
08:40:02 <rage> går han på dvp?
08:40:25 <phubuh> ingen aning. han pysslade med några robotar eller något har jag för mig.
08:40:37 <phubuh> och någon knasig webcam-robot som jagade pepsiburkar
08:40:41 <rage> :o
08:40:45 <blitznl> rage: Are all those 'special' a character actually on your keyboard ?
08:40:49 <rage> men det gör man nog sen
08:40:57 <phubuh> yup, all three of 'em :-)
08:41:04 <blitznl> cool ;)
08:41:09 <rage> :)
08:41:19 <phubuh> they moved all the useful metacharacters sixty feet away to make room for them
08:41:39 <rage> blitznl: try AltGraph + a
08:41:46 * blitznl is away: I'm busy
08:41:52 <phubuh> so obviously useless keys like /, [], {}, etc, are pretty much impossible to type
08:41:59 <rage> :)'
08:42:07 <rage> not with sv_dvorak :D
08:42:15 <blitznl> mm look what happened ;) some 
08:42:30 <blitznl> i'm away me-message keybinding or something
08:42:30 <phubuh> I've been meaning to try that... I'm getting comfortable with international Dvorak
08:42:35 <rage> didn't you get any å?
08:43:06 <rage> phubuh: k
08:43:08 <blitznl> rage: nope
08:43:14 <rage> blitznl: :(
08:43:27 * esap has never even tried to slow down my typing with dvorak.
08:47:17 <Jad> Hello guys..
08:47:49 <Jad> Ambiguous type variable `b' in these top-level constraints:
08:47:50 <Jad>   `Integral b' arising from use of `sinSum' at <interactive>:1
08:47:50 <Jad>   `Fractional b' arising from use of `sinSum' at <interactive>:1
08:48:04 <Jad> sinSum a 1 = a
08:48:04 <Jad> sinSum a n = (((-1)^n) * (a^((2 * n) + 1)) / factorial ((2 * n) +1 )) + sinSum a (n-1)
08:48:13 <Jad> that is the function, if any one could help..
08:49:27 <shapr> hi Jad, what's up?
08:50:22 <Jad> hello shapr
08:50:32 <Jad> got what i pasted ?
08:50:43 <shapr> phubuh: I'm perfectly happy with two-hand us dvorak and emacs x-symbol
08:50:54 <shapr> yes, I see it.
08:51:25 <shapr> have you tried using :t in ghci with only half of the line to see where the type error is?
08:51:49 <Jad> *Main> :t sinSum
08:51:49 <Jad> sinSum :: forall b. (Fractional b, Integral b) => b -> b -> b
08:52:08 <shapr> oh, so it does work
08:52:43 <Jad> ya
08:52:52 <Jad> but when i call it for example sinSum 0.3 5
08:53:02 <Jad> i get the error Ambiguous type variable `b' in these top-level constraints:
08:53:03 <Jad> <Jad>   `Integral b' arising from use of `sinSum' at <interactive>:1
08:53:03 <Jad> <Jad>   `Fractional b' arising from use of `sinSum' at <interactive>:1
08:53:17 <shapr> hm
08:53:30 <Jad> this is the whole function sinSum a 1 = a
08:53:31 <Jad> sinSum a k = (((-1)^k) * (a^((2 * k) + 1)) / factorial ((2 * k) +1 )) + sinSum a (k - 1)
08:53:38 <esap> Jad: You should specify some type for 'b'.
08:53:45 <Jad> esap: how
08:53:53 <Jad> been 2 days with haskell
08:54:28 <esap> Jad: sinSum 0.3 5 :: Float  or something
08:54:41 <Jad> ah okay
08:54:50 <emu> can't you just say "it's a damn number, already"
08:55:16 <Jad> *Main> sinSum 0.3 4 :: Float
08:55:17 <Jad> <interactive>:1:
08:55:17 <Jad>     No instance for (Integral Float)
08:55:17 <Jad>       arising from use of `sinSum' at <interactive>:1
08:55:45 <Jad> the whole function is 2 lines
08:55:48 <Jad> and i cant locate the error
08:56:05 <kosmikus> the problem is the use of (^)
08:56:52 <pesco> @type (^)
08:56:53 <lambdabot> (^) :: (Num a, Integral b) => a -> b -> a
08:56:59 <pesco> @type (^^)
08:57:00 <lambdabot> (^^) :: (Fractional a, Integral b) => a -> b -> a
08:57:05 <emu> tsk
08:57:20 <emu> 2^(1/2) is defined
08:57:55 <Jad> kosmikus: how should i use the ^ ?
08:58:06 <Jad> should i define function power ?
08:58:25 <pesco> emu: How do you mean?
08:58:35 <kosmikus> no, maybe I was wrong
08:58:50 <Jad> kosmikus: got any idea wer the error is ?
08:58:58 <pesco> @type (**)
08:58:58 <lambdabot> (**) :: Floating a => a -> a -> a
08:59:01 <kosmikus> what's the type of your factorial
08:59:15 <emu> type in 2^(1/2)
08:59:16 <kosmikus> ah no, I see
08:59:21 <emu> you get a similar error
08:59:28 <emu> but I think that should be accepted
08:59:42 <emu> fractional exponents are perfectly legal arithmetic
09:00:31 <kosmikus> emu: you can use (**) for that
09:01:06 <emu> that's not quite right either
09:01:14 <emu> Prelude> 4**(1/2)
09:01:14 <emu> 2.0
09:01:23 <emu> 4 is a perfect square
09:01:41 <kosmikus> emu: where's the problem?
09:01:51 <emu> 2.0 is not exact
09:02:09 <kosmikus> there's no datatype for values containing roots that is exact
09:02:24 <Jad> and the problem is ?
09:02:37 <emu> ah, i suppose its not that big a deal
09:02:45 <kosmikus> emu: which type would you want to have for (^)?
09:03:15 <emu> it would be nice if it could figure out that the result of 4**(1/2) is, however, exact, and return an Integer
09:03:26 <shapr> there's a rational arithmetic library in hlibs, I think
09:03:31 <shapr> it's always exacty
09:03:38 <kosmikus> Jad: try to write "fromIntegral (factorial ((2 * k) + 1))"
09:03:48 <emu> and it is not possible, then it returns a floating point approximation
09:03:59 <emu> and if it is
09:04:40 <Jad> k
09:04:59 <kosmikus> emu: I see, that would be possible
09:07:23 <Jad> it worked!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
09:07:44 <Jad> kosmikus: tnx
09:07:48 <shapr> wow, that's a lot of excitement tecker
09:07:52 <Jad> but can you please explain what is fromIntegral
09:08:02 <kosmikus> @type fromIntegral
09:08:03 <lambdabot> fromIntegral :: (Integral a, Num b) => a -> b
09:08:12 <kosmikus> it turns an integer-like number into any number
09:08:26 <kosmikus> the problem in your def was that the use of (/) ...
09:08:29 <kosmikus> @type (/)
09:08:30 <lambdabot> (/) :: Fractional a => a -> a -> a
09:08:41 <kosmikus> ... requires that both operands have the same type
09:08:51 <Jad> ah okay..
09:08:52 <kosmikus> and are Fractional
09:09:11 <Jad> now i got another problem
09:09:14 <Jad> precision :S
09:09:28 <kosmikus> this ultimately leads to the conclusion that k is Fractional, too, and that conflicts with the type of (^)
09:09:37 <Jad> tnx alot kosmikus
09:09:50 <Jad> *Main> sinSum 0.3 100
09:09:51 <Jad> 0.30002020666133955
09:09:51 <Jad> *Main> sinSum 0.3 1000
09:09:51 <Jad> 0.30002020666133955
09:16:10 <Jad> i love haskell :)\
09:17:19 <andersca> Jad: don't we all
09:17:30 <Jad> :-)
09:17:52 <Jad> shapr: how to compile lambdabot ?
09:18:03 <Jad> to copmile with the net package ?
09:27:09 <Jad> how to compile a program which uses a socket..
09:34:07 <kosmikus> -package net ?
09:41:03 <Smerdyakov> Jad, the correct English question would be "How do I compile a program which uses a socket?"
09:44:56 <Jad> ya
09:45:00 <Jad> thats the question
09:51:19 <Jad> shapr: when i compile lambdabot
09:51:21 <Jad> am getting
09:51:27 <Jad> test@Saki:~/tmp/tmp$ ghc -package net --make Main.hs -o lambdabot
09:51:29 <Jad> Chasing modules from: Main.hs
09:51:31 <Jad> Compiling IRC              ( IRC.hs, ./IRC.o )
09:51:33 <Jad> IRC.hs:246: Not a constructor: `forall
09:51:51 <Smerdyakov> Sounds like you haven't enabled some ghc specific features.
09:51:54 <shapr> oh, you need to turn on the glasgow exts
09:52:02 <shapr> Jad: can you use the included Makefile?
09:52:14 <shapr> hei dark 
09:52:51 <shapr> Jad: are you using the lambdabot 1.0 release? or the cvs version?
09:53:06 <shapr> I could finally make the feeping creaturitis release
09:56:13 <dark> hi shapr :)
09:56:18 <shapr> what's up?
09:56:20 <shapr> how's the cgi stuff going?
09:56:32 <dark> Pretty well, it's the DB stuff that gives me headaches :)
09:56:45 <shapr> how so?
09:56:51 <shapr> are you using HToolkit's db bindings?
09:57:30 <dark> No... I didn't know of those :)
09:57:31 <Jad> ya
09:57:54 <Jad> shapr: the one am using is from your site i guess
09:57:58 <Jad> no makefile included
09:58:09 <Jad> no even documentation on how to compile it
09:58:12 <shapr> oh
09:58:18 <shapr> yes, I need to make another release...
09:58:27 <dark> I have the DB interface _working_, but I'm looking for a nice way to deal with the output of monster queries.
09:58:35 <Jad> wer can i get the newest version..
09:59:28 <shapr> Jad: the very latest version requires is on the darcs server on www.ScannedInAvian.org, but I can make you a tarball if you like
10:02:18 <Jad> http://www.scannedinavian.org/repos/hlibs/lambdabot/
10:02:21 <shapr> yup
10:02:26 <Jad> no need for tar shapr
10:02:41 <shapr> if you use darcs you can slurp it down in a nice and friendly manner
10:02:52 <Jad> k
10:02:56 <Jad> or wget -m
10:03:09 <shapr> in fact, if you get the urge to write a plugin for lambdabot, I can give you commit priveleges
10:03:38 <Jad> am planing to do so
10:03:41 <Jad> but not now
10:03:46 <shapr> okay
10:03:48 <Jad> am still new to haskell syntax
10:03:55 <shapr> it's a cool language, I think you'll enjoy it.
10:04:01 <dark> shapr: To be honest I've been spending more time at parties than coding :)  But some people at the parties wanted to play the game when it's working...
10:04:02 <Jad> i am
10:04:11 <Jad> more relaxing than C and ASM
10:04:29 <dark> How can anything be more relaxing than ASM?
10:04:43 <shapr> how can ASM be relaxing?
10:04:49 <shapr> I thought it was mind-numbingly boring
10:04:53 <Jad> ya how can ASM be relaxing
10:05:04 <shapr> and painful for that matter
10:05:09 <shapr> though I've only ever written i386 asm
10:05:13 <Jad> dark: just try debuging your large assembly code
10:05:19 <dark> shapr: Slow pace of change makes it relaxing :)  Instead of having to use brain power on figuring out obscure expressions, you can just browse through all the pop, push, add 1, etc instructions and get the big picture from 1000 lines of code.
10:05:35 <Jad> naa
10:05:45 <shapr> dark: aieee
10:05:57 <Jad> you must be high to enjoy ASM
10:06:01 <dark> Well...
10:07:26 <Jad> shapr: Not Found
10:07:27 <Jad> The requested URL /repos/hlibs/EvalModule.hs was not found on this server.
10:07:27 <Jad> Apache/1.3.28 Server at localhost Port 80
10:07:31 <Jad> + many other files..
10:08:10 <shapr> that's because they're under repos/hlibs/lambdabot/
10:08:51 <Jad> ?
10:09:05 <shapr> it might be easier if you used darcs to grab 'em :-)
10:09:09 <shapr> or I can make a tarball
10:09:21 <dark> Hmm, I think I like my interface better than HToolkit's :)
10:09:26 <shapr> http://www.abridgegame.org/darcs/
10:09:33 <Jad> :27--  http://www.scannedinavian.org/repos/hlibs/Main.hs
10:09:33 <Jad>            => `Main.hs.1'
10:09:33 <Jad> Connecting to 192.168.8.1:8080... connected.
10:09:33 <Jad> Proxy request sent, awaiting response... 404 Not Found
10:09:33 <Jad> 22:07:27 ERROR 404: Not Found.
10:09:33 <shapr> dark: cool, publish the code
10:09:57 <shapr> Jad: it's in /repos/hlibs/lambdabot/
10:10:09 <Jad> ah
10:10:13 <Jad> sorry
10:10:14 <Jad> its wrong links then on the site
10:10:19 <shapr> on what site?
10:10:25 <Jad> http://www.scannedinavian.org/repos/hlibs/lambdabot
10:10:27 <Jad> lol
10:10:40 <Jad> Main.hs links to http://www.scannedinavian.org/repos/hlibs/Main.hs
10:10:46 <shapr> works fine here
10:10:53 <dark> They get points for using "BOOLOID", though.
10:11:00 <shapr> you're using http://www.scannedinavian.org/repos/hlibs/lambdabot/ right?
10:11:13 <Jad> ya
10:11:23 <Jad> and The Main.hs links http://www.scannedinavian.org/repos/hlibs/Main.hs
10:11:33 <shapr> not for me
10:11:37 <shapr> I get the correct url
10:11:55 <Jad> i am using mozilla, although i dont think its a client side error
10:13:59 <shapr> I don't know. I can send you a tarball if you want.
10:14:48 <Jad> nope
10:14:54 <Jad> i just added darcs to my sources.list
10:14:58 <Jad> and will apt-get darcs
10:15:11 <shapr> spiffy
10:15:24 <shapr> then you can put your own code in hlibs if you'd like to
10:15:38 <Jad> ya
10:15:38 <shapr> dark: hey, did you try darcs?
10:16:00 <Jad> since darcs is a replacment of CVS
10:16:12 <shapr> and hlibs is a community collection of code
10:16:23 <shapr> something like the great java tree, but for Haskell.
10:16:52 <shapr> dark: if so, what do you think?
10:17:14 <Jad> i guess what haskell needs is little more howtos on specific stuff
10:17:28 <shapr> yah, that's a good idea
10:17:36 <Jad> like tldp.org
10:17:37 <shapr> what sort of HOWTOs would you suggest?
10:17:42 <Jad> but thdp
10:17:44 <shapr> heh
10:17:46 <shapr> yah, I like it.
10:17:52 <Jad> the haskell documentation project
10:18:00 <shapr> I can create thdp.ScannedInAvian.org
10:18:22 <Jad> thats good for a start
10:18:37 <shapr> I could put a wiki there
10:18:40 <shapr> actually
10:18:51 <shapr> we could write these HOWTOs on the Haskell Wiki
10:18:53 <Jad> i would suggest o Socket tutorial
10:18:55 <shapr> ok
10:18:56 <Jad> i would suggest a Socket tutorial
10:19:09 <Jad> another is String manipulation
10:19:43 <shapr> what sort of questions do you have about String manipulation?
10:19:55 <shapr> in my opinion, it's the same as List manipulation
10:19:56 <Jad> nothing
10:19:57 <Jad> i know nothing about them
10:19:58 <shapr> mostly
10:20:13 <Jad> then no need for the String one..
10:20:19 <Jad> how about sockets ?
10:20:26 <shapr> sure
10:20:32 <Jad> btw is it possible to use RAW sockets in haskell ?
10:21:46 <shapr> I think so, but I have to do laundry right now, I'll be back later.. :-)
10:22:03 <Jad> i have to do a lecture in 30 minutes, am OFF too....
10:24:55 <dark> shapr: Yeah I've been using darcs.  Not very much, though.  In the very early stages of a project I prefer to just take tarball snapshots.
11:02:45 <Slashdog> hello
11:02:54 <Slashdog> I just tried defining:
11:02:59 <Slashdog> > g :: [forall a]-> Int  
11:02:59 <Slashdog> > g x = 3 
11:03:04 <Slashdog> this works :)
11:03:14 <Slashdog> but what can I possibly do with such a function?
11:03:23 <Slashdog> I can apply it to the empty list...
11:03:47 <Slashdog> but as soon as I try with an non-empty list I'll get a type error...
11:04:04 <Slashdog> (can't match forall against (type))
11:13:04 <Smerdyakov> I would expect a type more like g :: [forall a. a] -> Int
11:13:25 <Smerdyakov> But I'm not familiar with how this is done in Haskell.
11:13:34 <Smerdyakov> I think what you've used is a ghc extension and not standard Haskell, though.
11:14:48 <Slashdog> Smerdyakov: that's what I was tring to write...
11:15:06 <Slashdog> Smerdyakov: but ghc doesn't accept [forall a. a]
11:15:18 <vegai> hmm, what are you trying?
11:15:42 <vegai> something that makes g::[a]->Int not suit your purpose?=)
11:15:44 <Slashdog> vegai I was trying to use quantifires with functions and datatypes
11:15:48 <Slashdog> for instance
11:16:06 <Slashdog> if I have:  f a -> Int 
11:16:14 <Slashdog> and I want to use it like
11:16:25 <Slashdog> (f 'a', f 3)
11:16:41 <Slashdog> it needs to be quantified on it's domain
11:16:58 <Slashdog> or you get a type error when applying it to 2 different types in the same scope
11:17:01 <Slashdog> right?
11:17:31 <Slashdog> so how do you declare such a function?
11:17:52 <vegai> g::a -> Int
11:17:55 <vegai> g x = 3
11:17:59 <Slashdog> ok
11:17:59 <vegai> (g 'a', g 3) 
11:18:01 <vegai> (3,3)
11:18:44 <Slashdog> but isn't there similar declaration that doesn't work?
11:19:15 <Slashdog> that binds  a to Char in g when you apply it to 'a'?
11:19:16 <ibid> infinitely many, in fact :)
11:19:27 <Slashdog> eh :)
11:20:00 <Slashdog> you know what I mean, isn't there a different declaration for g that doesn't allow you to apply it do different types in the same scope?
11:20:15 <Slashdog> I thought you could have both:
11:20:16 <Smerdyakov> You mean g :: Int -> Int ?
11:20:27 <Slashdog> forall a . (a -> b)
11:20:28 <Slashdog> and
11:20:36 <Slashdog> (forall a. a) -> b
11:20:42 <Slashdog> these are different right?
11:20:45 <Smerdyakov> The second one is nutty.
11:20:53 <Smerdyakov> They sure are different.
11:20:59 <Smerdyakov> Do you understand the difference?
11:21:10 <Slashdog> I thought I did... :)
11:21:48 <Slashdog> I thought that in a certain scope you could only bind a to one type (the 1st case)
11:22:05 <Smerdyakov> No.
11:22:08 <Slashdog> so I'd expect (g 'a', g 3) not to work
11:22:18 <Slashdog> so what is the diference?
11:22:20 <Smerdyakov> Can youexplain what it means for something to have a type (forall a. T)?
11:22:38 <Smerdyakov> (where T is a type that may contain a)
11:22:57 <Slashdog> Since I'm wrong in the 1st one I think I cannot :-/
11:23:16 <Slashdog> I though that you could bind it to multiple a's in the same scope...
11:23:29 <Smerdyakov> When something has type (forall a. T), it may be used as any type that you get by substituting a type for a in T.
11:23:43 <ibid> Slashdog: the scope of the a is the definition of the function. your claim is similar to a claim that (g 1, g 2) is not possible because it binds x to two different values
11:23:59 <Smerdyakov> Though Haskell doesn't show it, it's like values of that type are functions that take types as parameters.
11:24:02 <ibid> Slashdog: in fact, a and x have the same scope
11:24:42 <Smerdyakov> Just like you can call the same function with different value parameters (as ibid is explaining), you can call a forall'd function with different type parameters "in the same scope."
11:24:49 * Slashdog is thinking...
11:27:16 <Smerdyakov> Now, it's also important that you see the difference between forall a . (a -> b) and (forall a. a) -> b, once you understand this.
11:27:54 <ibid> but that's beyond haskell 98 ;)
11:27:54 <Slashdog> trying to...
11:28:10 <Slashdog> so what does (forall a. a)->b means?
11:28:13 <Slashdog> ibid: I know :)
11:28:26 <Slashdog> ibid: and you were right about the scope, I understand...
11:28:56 <ibid> Slashdog: glad to be of assistance :)
11:29:00 <Smerdyakov> It characterizes values with this property:
11:29:17 <Smerdyakov> They are functions. They work with any argument that can have any type.
11:29:26 <Smerdyakov> There are no such values in Haskell.
11:29:36 <Smerdyakov> Therefore, these functions will never actually be called in well-typed programs. :)
11:29:55 <Slashdog> ok got it :)
11:30:18 <Slashdog> I'll need to check my notes to understand what I was thinking about...
11:30:26 <Slashdog> thank you for your help
11:30:27 <Slashdog> bbl
11:47:24 <Jad|OFF>  /nick Jad
11:47:28 <Jad|OFF> oops
11:47:34 * Jad is Back
11:52:13 <dark> Hmm was Slashdog thinking of the monomorphism restriction?
11:52:29 <dark> (just got back and caught up with the channel)
12:25:19 <Jad> can any one gimme a link to a text about haskell running in parallel 
12:37:57 <Jad> can any one gimme a link to a text about haskell running in parallel 
12:39:13 <ibid> guess
12:54:01 <rubix> I'd say www.google.com/search?q=haskell+concurrent or something like that :)
13:03:33 <shapr> @yow
13:03:33 <lambdabot> What a COINCIDENCE!  I'm an authorized ``SNOOTS OF THE STARS'' dealer!!
13:03:39 <shapr> EXCITEMENT!
13:04:21 <Jad> wb shapr
13:59:52 <kosmikus> shapr: have you seen my 17:30 question?
14:04:01 <keverets> which time zone?
14:10:37 <kosmikus> shapr's ;)
14:14:57 <Jad> @listcommands
14:14:57 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","foo","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude
14:15:17 <Jad> @all-dicst
14:15:18 <lambdabot> Sorry, I don't know the command "all-dicst", try "lambdabot: @listcommands"
14:15:21 <Jad> @all-dicts
14:16:08 <Jad> @foo
14:16:09 <lambdabot> bar
14:16:09 <lodewijk> wohoo, i think i used a monad just now.
14:17:25 <kosmikus> you "think" you did?
14:18:15 <lodewijk> kosmikus: yes, well, I got it through the typechecker, now I find out it doesn't do what I want.
14:18:49 <lodewijk> so I wrote one down and got it to compile. which is a step up from just reading tutorials and looking puzzled.
14:18:50 <Jad> good night
14:19:08 <kosmikus> good night, Jad
14:19:18 <kosmikus> lodewijk: what kind of monad did you try to write?
14:21:14 <lodewijk> kosmikus: I'm trying to parse a graph and kept getting stuck with the tying it together. so I'm using a state monad to accumulate the graph now, but it still can't find some nodes.
14:23:11 <kosmikus> are you learning Haskell?
14:24:02 <lodewijk> kosmikus: as I go, yes. although I've been trying to learn for a while now. the stupid thing is, I've already got most of the code that actually has to do stuff with the graph, and now I'm stuck on the input side.
14:25:41 <kosmikus> what are you using to write the parser?
14:26:26 <lodewijk> kosmikus: break, take and drop :) the string handling isn't the problem, nodes refering to eachother is.
14:26:37 <lodewijk> oh, and 'words'.
14:27:42 <kosmikus> usually, separation of problems is a good way to tackle things
14:28:03 <kosmikus> i.e. try to represent the abstract syntax of your input language as a Haskell datatype (or multiple types)
14:28:19 <kosmikus> then write a function that translates a value of the abstract syntax type to a real graph
14:31:38 <lodewijk> hmm. that doesn't address the heart of the problem. take for example
14:31:42 <lodewijk> data Node = Node String Node
14:31:47 <lodewijk> with 
14:31:55 <lodewijk> test = ['foo:bar', 'bar:foo']
14:32:06 <lodewijk> then I'd need a function of type [(String,String)] -> Node
14:32:52 <lodewijk> with the result being one of the built nodes. the haskell WiKi addresses this with the TyingTheKnot pattern, but my situation is more complicated than that.
14:33:36 <lodewijk> I'll keep at it with the state monad for a while longer.
14:33:41 <Smerdyakov> I don't think "WiKi" is a correct capitalization.
14:33:48 <Smerdyakov> No reason to treat it unlike any other word.
14:34:13 <Cale> Except that WiKi will link and Wiki won't :)
14:34:28 <Smerdyakov> Then you use WikiWiki, which is the full name anyway! ;D
14:34:33 <dark> lodewijk: Looks like you're leaving out some []s there?
14:34:35 <lodewijk> Smerdyakov: sorry, I was doing WiFi stuff in another terminal :)
14:34:59 <lodewijk> dark: yes, Node String [Node] would be a step more interesting still, but the example shows the core of the problem
14:36:22 <lodewijk> and in my specific case it's even Node String [Interfaces] with Interface = Interface Node [Interfaces]
14:36:34 <kosmikus> lodewijk: so you want to represent graphs that contain cycles as an infinite data structure?
14:36:36 <lodewijk> so it's all nice and complicated and hairy.
14:36:36 <dark> lodewijk: But making it [Node] could solve your problem.  That allows step-by-step adding of links between nodes, because you can start with Node "foo" [] and Node "bar" [], then have a function :: Node -> Node -> (Node, Node) that turns them into linked nodes.
14:36:40 <lodewijk> kosmikus: yes.
14:36:59 <dark> Hmm I'm not sure this would scale to more than one node :)
14:37:03 <dark> Er, two.
14:37:49 <lodewijk> dark: not sure either :)
14:37:51 <dark> You'd have to give the function all of your nodes, and update all references to the old versions.
14:38:00 <dark> It's starting to smell imperative that way :)
14:38:35 <dark> But you'd have a type like (Node, Node) -> [Node] -> [Node] which would transform a graph into another graph that has an extra link.
14:39:08 <lodewijk> dark: hmm, that is a new line of thought..
14:40:11 <lodewijk> dark: the current attempt was to stick a [Node] in a state monad and keep adding to it and hoping the lazyness would defer lookup by name until after the Node got stuck in the list. but it doesn't seem to work, and my head hurts.
14:42:24 <kosmikus> I think it is not hard to write a function toNode :: [(String,String)] -> String -> Node, with data Node = Node String [Node], where "toNode list root" will compute the graph, starting from "root", by looking everything up in the list.
14:42:33 <kosmikus> Would not be very efficient, though.
14:43:29 <lodewijk> kosmikus: I was kindof counting on being able to replace [Node] with some (SuperFastHashMap Node) if that became a concern.
14:45:04 <dark> lodewijk: GHC provides Data.FiniteMap for such things.  You can get enormous memory usage if you index with lazy strings, though.
14:45:37 <lodewijk> dark: hmm.. I'm on hugs now because it tells me I'm wrong much quicker than ghc does :)
14:45:43 <dark> Are all the nodes connected?
14:46:05 <lodewijk> dark: all nodes are connected to at least two other nodes.
14:46:06 <dark> lodewijk: I think hugs uses the same libraries.  At least I've seen some hugs-related comments in them :)
14:46:33 <kosmikus> lodewijk: toNode list root = Node root [ toNode list y | (x,y) <- list, x == root ]
14:46:35 <dark> lodewijk: Yeah but if you start at one node will you find all the others eventually?
14:47:13 <kosmikus> does not work if the graph is not connected, though
14:47:16 <lodewijk> dark: yes.
14:51:27 <lodewijk> kosmikus: wow. it works. thank you very much, now I just have to understand & adapt it :)
14:53:12 <lodewijk> okay, I think I understand, although I wouldn't have thought it up myself in a couple of years.
14:54:35 <lodewijk> I'm off to explore this further.. thank you all.
15:01:15 <kosmikus> what's the canonical IRC client for OS X?
15:01:19 <kosmikus> if there's one ...
15:04:15 <Riastradh> There isn't one.
15:04:25 <Riastradh> Last I checked, all the Cocoa ones sucked.
15:04:35 <Riastradh> X-Chat Aqua is rumoured to be decent.  I just use irssi.
15:06:00 <kosmikus> irssi is fine, I use it myself, but I am afraid that the person I think about is more likely to be convinced with a graphical client
15:06:47 <Riastradh> Well, I've heard decent things about iRC too (though the name needs to be taken out and shot), but it's shareware or something like that.
15:07:34 <kosmikus> okay, I'll check -- thanks
15:19:52 <Cale> Lots of people use X-Chat
15:21:45 <steveh> I'm using ERC Version 3.0 $Revision: 1.328 $ with Emacs 21.3.1!
15:21:51 <steveh> ;)
15:22:14 <steveh> xchat is your safest bet for pro-GUI users
15:22:38 <kosmikus> I'll recommend X-Chat, then. Thanks and good night!
15:23:02 <tomas> steveh are you one of those who use emacs for everything?
15:23:16 <steveh> tomas: I am slowly moving that way, yes.
15:23:32 <steveh> tomas: I just migrated from mozilla-mail to VM in emacs
15:23:53 <tomas> I don't get emacs...
15:24:01 <steveh> it is an acquired taste
15:24:08 <steveh> but it makes you more productive
15:24:10 <steveh> like coffee!
15:24:12 <tomas> :)
15:24:15 <steveh> emacs is the coffee of editors!
15:24:18 <tomas> I use vim
15:24:30 <steveh> well, if you like it, use it
15:24:34 <tomas> yep
15:24:45 <tomas> I tried emacs for a while though
15:24:49 <steveh> Emacs's online help is much nicer for me to use
15:25:16 <steveh> and the basic navigation commands do represent a learning curve
15:25:23 <tomas> k, how does tab work in emacs? I press tab and tab again and it jumps back.. 
15:25:28 <steveh> heheh
15:25:38 <steveh> tab indents your code the way it is supposed to be indented
15:25:49 <steveh> I assume you wanted bigger tabs?
15:25:53 <tomas> no
15:25:58 <tomas> hmm
15:25:58 <steveh> I think the emacs default is lame 2-space tabs
15:26:00 <steveh> which is lame
15:26:10 <tomas> it was 8 I think...
15:26:18 <steveh> maybe in fundamental mode
15:26:31 <steveh> that should just behave like tab behaves in pico though
15:26:45 <steveh> if you are editing a .c file or similar, it will default to 2 I think
15:26:49 <tomas> well I was programming haskell and needed to put my guards nice and it didnt want to
15:26:52 <steveh> oh!
15:27:00 <steveh> you probably didn't have haskell-mode installed?
15:27:05 <tomas> maybe not
15:27:10 <steveh> that doesn't come with emacs
15:27:31 <steveh> so you probably saw 8
15:27:35 <steveh> sorry :/
15:28:05 <steveh> with haskell-mode installed emacs treats haskell code pretty nicely
15:28:25 <tomas> ok
15:28:39 <steveh> I think there are links to it from the haskell wiki
15:28:52 <tomas> k
15:34:29 <steveh> tomas: for what it's worth, I don't generally browse the web in emacs :)
15:34:35 <steveh> except when reading coding documentation
19:09:01 <syntax-laptop> hi all.
19:09:20 <syntax-laptop> anyone know of a parsec date parser? I want something that's pretty clever, could parse dates in a variety of formats
19:09:22 <Smerdyakov> Why do you use different capitalization in your two nicks?
19:09:38 <syntax-laptop> Smerdyakov: no reason
19:09:59 <Smerdyakov> Then you must be destroyed.
19:10:51 <syntax-laptop> oh my
19:11:00 <Riastradh> That would be a terrible inconvenience.
19:11:08 <syntax-laptop> so what do you think it should be? SyntaxLaptop, Syntax-Laptop, Syntax|Laptop ?
19:12:05 <Smerdyakov> SyntaxLaptop!
19:12:21 <SyntaxLaptop-sme> d'oh
19:12:31 <SyntaxLaptop> now you must write my parser
19:12:41 <Smerdyakov> my parser
19:12:57 <Igloo> Haven't we got to fight about what 01/02/2000 means first?
19:13:00 <SyntaxLaptop> hm.
19:13:11 <SyntaxLaptop> Smerdyakov: fair enough
19:13:24 <SyntaxLaptop> Igloo: yes. we should fight about that and then make it parameterizable.
19:13:35 <SyntaxLaptop> I think yyyy-mm-dd is the only way to go!!
19:13:35 <Riastradh> Igloo, it means 2000Feb01, of course.
19:13:44 <Riastradh> Yes, exactly!
19:13:45 <Igloo> Wouldn't that be like admitting Americans could possibly be right under some circumstances?
19:14:03 <Riastradh> Igloo, no, because Americans use MM/DD/YYYY.
19:14:05 <Igloo> Syn: Well in that case the parser will be easy to write  :-)
19:14:17 <SyntaxLaptop> Igloo: but i was thinkin gmaybe it could do words too :)
19:14:45 <SyntaxLaptop> February 1, 2003, 1 February 2003, 1 Feb. '03, etc
19:14:51 <SyntaxLaptop> but I don't actually need that.
19:14:59 <SyntaxLaptop> but it would be cool anyway
19:15:09 <SyntaxLaptop> and it's OK because Smerdyakov is going to write it :)
19:15:19 <Smerdyakov> I already did.
19:15:21 <Smerdyakov> See my last line.
19:15:39 * SyntaxLaptop parsers Smerdyakov with a pike
19:15:42 <Smerdyakov> I bet you could call 'date' to do the dirty work. :D
19:18:11 <SyntaxLaptop> but that's so dirty
19:21:44 <SyntaxLaptop> @yow
19:21:44 <lambdabot> Those aren't WINOS--that's my JUGGLER, my AERIALIST,
19:21:44 <lambdabot>  my SWORD SWALLOWER, and my LATEX NOVELTY SUPPLIER!!
21:37:58 * isomer is away: zozo
23:48:12 <shapr> yeehaa
23:48:56 <pesco> oi
23:49:03 <shapr> gutentag pesco 
23:49:05 <shapr> wie geht es?
23:49:17 <pesco> Geht.
23:49:21 <shapr> that bad? :-)
23:49:28 <shapr> c'mon, calculus can be fun!
23:50:01 <pesco> :) The problem is more my computer keeping me busy with stupendous admin tasks.
23:50:05 <shapr> oh
23:50:41 <pesco> How do I tell my xterm to display UTF-8-encoded text correctly?
23:50:48 <pesco> Or gnome-terminal even?
23:50:52 <Darius> firmly
23:51:13 <shapr> hi Darius 
23:51:15 <shapr> wassup?
23:51:23 <pesco> I can't remember how to form the locale name...
23:52:05 <shapr> hrm
23:52:20 <Darius> looking through Ashley Yakeley's HScheme sources
23:52:28 <harsha123> hello shapr :)
23:52:28 <shapr> Darius: oh, that's cool stuff
23:52:36 <shapr> Ashley has redesigned the Prelude nearly
23:52:55 <shapr> pesco: de_DE@UTF-8
23:53:05 <pesco> Are you sure?
23:53:06 <shapr> that's a handy example I see in dpkg-reconfigure localepurge
23:53:13 <pesco> ok, cool.
23:54:21 <shapr> Darius: found anything noteworthy?
23:55:34 <Darius> Someone who doesn't use layout at all, even for modules and someone who uses type classes to the extreme.
23:55:54 <shapr> yah, he hates the significant whitespace idea
23:58:25 <phubuh> haskell doesn't have a function to check for physical equality, does it?
23:58:50 <shapr> pointer equality?
23:58:59 <phubuh> yeah
