00:04:37 * ayrnieu shapr yawns too.
00:04:56 <ayrnieu> hm.  Perhaps I *should* go to sleep.
00:14:13 <_joey> ayrnieu: I am compiling Haskell and getting this problem
00:16:19 <ayrnieu> Oh, I thought you were compiling gcc 3.2.2
00:16:46 <_joey> no
00:16:55 <_joey> compiling Haskell using gcc 3.3.2
00:44:26 <shapr> @yow
00:44:26 <lambdabot> SANTA CLAUS comes down a FIRE ESCAPE wearing bright
00:44:26 <lambdabot>  blue LEG WARMERS..  He scrubs the POPE with a mild
00:44:26 <lambdabot>  soap or detergent for 15 minutes, starring JANE FONDA!!
01:03:05 <shapr> hi debug, ltns
01:03:13 <debug> hi
01:03:19 <debug> how are things going?
01:03:25 <shapr> code is good
01:03:30 <debug> nice to hear
01:03:38 <shapr> how are you?
01:03:54 <debug> fine, but stressed out. school stuff takes away precious time from coding :(
01:05:12 <debug> how did that bot go?
01:15:36 <shapr> oh, lambdabot ?
01:15:41 <shapr> he's doing okay
01:15:51 <shapr> @listmodules
01:15:51 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
01:16:50 <rubix> @karma rubix
01:16:51 <lambdabot> You have a karma of 0
01:17:07 <debug> hm
01:17:15 <shapr> karma still doesn't stick across bot invocations
01:17:29 <shapr> I think the @type and @eval commands are the most popular
01:17:39 <ski> @yow
01:17:39 <lambdabot> YOW!!  I'm in a very clever and adorable INSANE ASYLUM!!
01:17:50 <shapr> and the @yow and @fortune commands too :-)
01:17:53 <ski> @arr
01:17:54 <lambdabot> Drink up, me hearties
01:17:55 <debug> :)
01:18:01 <rubix> btw, what's this @yow thing about ?
01:18:18 <shapr> rubix: it's from emacs, who got it from a cartoon strip named Zippy the Pinhead
01:18:19 <ski> @yow
01:18:20 <lambdabot> .. If I cover this entire WALL with MAZOLA, wdo I have to give my
01:18:20 <lambdabot>  AGENT ten per cent??
01:18:27 <shrimpx> for when the channel's quiet and you feel lonely :)
01:18:37 <shapr> shrimpx: yes, I think that's extremely accurate.
01:18:48 <rubix> but does it have a fun, hidden meaning ?
01:19:14 <shapr> well, I stole the idea from fsbot on #emacs
01:19:24 <shrimpx> its meaning can only be spoken in pure lambda calculus
01:19:33 <shapr> I think the quotes are funny and silly.
01:20:01 <rubix> also why not implement a M-x doctor module ?
01:20:11 <shapr> good idea!
01:20:19 <shapr> rubix: want to write it?
01:20:44 <rubix> I like the idea, that would sure help to increase my knowledge of haskell
01:20:53 <shapr> sure! go for it!
01:21:14 <rubix> but I still does not have much time to spare those days
01:21:25 <rubix> maybe in december
01:21:32 <shapr> any amount of playing with Haskell is good ;-)
01:21:36 * shrimpx is on a 20 minute break between work and sleep
01:21:38 <shapr> @fortune
01:21:39 <lambdabot> "In corporate life, I think there are three important areas which contracts
01:21:39 <lambdabot> can't deal with, the area of conflict, the area of change and area of reaching
01:21:39 <lambdabot> potential.  To me a covenant is a relationship that is based on such things
01:21:39 <lambdabot> as shared ideals and shared value systems and shared ideas and shared
01:21:39 <lambdabot> agreement as to the processes we are going to use for working together.  In
01:21:41 <lambdabot> many cases they develop into real love relationships."
01:21:43 <lambdabot> -- Max DePree, chairman and CEO of Herman Miller Inc., "Herman Miller's 
01:21:44 <lambdabot>    Secrets of Corporate Creativity", The Wall Street Journal, May 3, 1988
01:22:36 <shapr> @arr
01:22:36 <rubix> yesterday I wrote a pi-approximating program in haskell :)
01:22:36 <lambdabot> Ahoy mateys
01:22:41 <shapr> rubix: cool!
01:22:57 <shapr> my most recent pi-approximating program claimed pi was 3
01:23:18 <rubix> the fun is that I spent the most time searching how to convert an int into a double though :)
01:23:26 <shapr> fromIntegral?
01:23:30 <rubix> yep
01:23:40 <shapr> yah, that's a tricky part if you don't already know about it.
01:24:08 <ski> not 4, then ?   (seem to recall it was up for a possible law in some US state..  or is this a fairy tale ?)
01:25:03 <shapr> I heard that too
01:25:35 <shapr> I want to say "Alla äldersgrupper är storare med nej, men 45 till 59 år har" has grown most
01:25:40 <shapr> can I use växa there?
01:25:46 <shapr> maybe I should ask this on #haskell.se
01:26:15 <ski> ".. med nej .." ??
01:26:25 <shapr> is that bad?
01:26:37 <ski> i don't know what it means :)
01:26:51 <shapr> I'm talking about the EMU folkomröstningen
01:27:23 <ski> how would you formulate that in english
01:27:48 <shapr> All age groups have grown, but the 45 to 59 year olds group has grown fastest
01:28:52 <dennisb> Alla grupper har Ã¶kat, men gruppen 45- till 59-Ã¥ringar har Ã¶kat snabbast
01:29:38 <shapr> ah, tack
01:29:54 <dennisb> or even "alla Ã¥ldersgrupper har Ã¶kat"
01:30:09 <ski> "Andelen nej har vuxit i alla åldersgrupper, men i gruppen från 45 till 59 år har andelen vuxit mest"  perhaps
01:30:26 <dennisb> also good
01:30:54 <dennisb> it depends on what he wants to say of course :-)
01:30:54 <shapr> hm, neat
01:31:06 <ham[let]> moin
01:33:07 <shapr> hi ham[let] 
02:33:13 <shapr> @yow
02:33:14 <lambdabot> If I am elected no one will ever have to do their laundry again!
03:20:45 <Lor> I would so much like to have polymorphic variants in haskell...
03:21:09 <Lor> But that would require, *gasp*, subtyping.
04:09:20 <Lor> Bah. Unfoldr doesn't return the final failing seed.
06:25:59 <shapr> hmm
06:26:21 * SyntaxPolice pokes sh
06:26:24 <SyntaxPolice> shapr :)
06:26:30 <shapr> y0 SyntaxPolice 
06:26:33 <shapr> wazzup?
06:26:34 <shapr> @yow
06:26:34 <lambdabot> YOW!!  I am having FUN!!
06:26:43 <shapr> @fortune
06:26:43 <lambdabot> The mosquito is the state bird of New Jersey.
06:26:43 <lambdabot> 		-- Andy Warhol
06:26:48 <shapr> @fortune
06:26:49 <lambdabot> Now is the time for drinking; now the time to beat the earth with
06:26:49 <lambdabot> unfettered foot.
06:26:49 <lambdabot> 		-- Quintus Horatius Flaccus (Horace)
06:26:49 <mgoetze> someone needs to delete that yow feature
06:26:54 <shapr> mgoetze: aww, why?
06:27:30 <emu> I got famous for painting lots of soup cans, haha what suckers -- Andy Warhol
06:27:33 <mgoetze> it's annoying :)
06:28:04 <shapr> mgoetze: you could always write a cooler plugin for lambdabot, then everyone would use that instead.
06:29:00 <emu> YOW!! I am having FUN!!
06:29:21 <shapr> Well, I'm on the right planet---everyone looks like me!!!
06:29:32 <shapr> After this, I'm going to BURN some RUBBER!!
06:30:15 <SyntaxPolice> shapr: not much; how you doin?
06:30:47 <shapr> just got back from Swedish class
06:31:16 <shapr> we're doing 'TV news' one person per week, this was my week.
06:31:32 <shapr> ski, phubuh, tic, and dennisb helped me lots, and it was a great success!
06:31:37 * shapr cheers
06:32:55 <SyntaxPolice> shapr: are you going to present news on free software?!
06:33:00 <shapr> I did actually
06:33:17 <shapr> I talked about China buying 1 million licenses of Sun's Desktop software.
06:33:49 <shapr> we have a heavy duty kazaa user in class, I asked him if he wanted to try Linux, he asked me if it was available via Direct Connect =)
06:34:07 <shapr> I'm having trouble convincing him that Linux is really, seriously, free
06:35:00 <Segora> :)
06:35:33 <Segora> strange things happen to people who have been exposed too long to proprietary radiation
06:35:39 <shapr> truly
06:37:07 <Segora> some people get as confused as to say that the world actually needs intellectual property (what an expression - I thought thoughts were free).
06:37:36 <shapr> have you seen my .sig ?
06:37:46 <shapr> If anyone lets loose with the secret that hearing a request doesn't force one
06:37:47 <shapr> to obey it, sue 'em under the DMCA. After that, anyone who doesn't obey you is
06:37:47 <shapr> obviously using a circumvention device (their brain), which you can have
06:37:47 <shapr> confiscated by the authorities.  -- Baron_Yam on slashdot.org
06:38:28 <emu> my thoughts are mine
06:38:47 <shapr> I wish the EU hadn't given in to any form of the DMCA
06:38:57 <emu> they don't want to pick up any diseases from your 'free' hippie thoughts
06:42:22 <shapr> I wonder if someone has already registered å.com
06:42:34 <emu> not legal name
06:42:40 <shapr> yes it is
06:43:03 <shapr> since a month or so
06:43:10 <emu> oh really
06:44:26 <harsha> hi all
06:44:38 <shapr> hi harsha 
06:44:51 <harsha> hello shapr 
06:44:51 <harsha> hi SyntaxPolice 
06:45:04 * emu wonders how many bind servers have broke
06:46:28 <shapr> namaste harsha 
06:46:55 <SyntaxPolice> hey harsha
06:46:59 * SyntaxPolice sends bug report to yampa-users list
06:47:04 <SyntaxPolice> it might be a bug in arrowp, though
06:47:09 <SyntaxPolice> that's what I think :)
06:47:11 <shapr> I really like that greeting, "namaste"
06:47:22 <shapr> it's given from a student to a guru, as I understand it.
06:47:42 <SyntaxPolice> shapr: that's funny (about the kazza student)
06:47:57 <shapr> happily, I have his email address.
06:48:01 * SyntaxPolice has the feeling it is any greeting of respect
06:48:47 <shapr> the kazaa guy was asking me how he could change his IP address without his ISP knowing, because they've warned him about downloading too many movies via P2P systems. They said if they catch him again they'll cut him off.
06:49:03 <SyntaxPolice> what a lamer
06:49:08 <emu> luser
06:49:24 <emu> he is not leet enough to use linux
06:49:38 <SyntaxPolice> he needs to use linux :)
06:49:43 <shapr> I can hope he will learn the linux spirit
06:50:05 <SyntaxPolice> I wish that p2p would have become vital before becoming viral :)
06:50:24 <SyntaxPolice> (so it wouldn't be easy to outlaw)
06:50:32 <shapr> in some ways it's brilliant, but I'm curious why there are so few bittorrent Linux downloads
06:51:52 <shapr> for example, why can't I get debs via bittorrent?
06:52:42 <SyntaxPolice> shapr: that would be a fun thing to add to apt :) Wouldn't be too hard, I think.
06:53:01 <SyntaxPolice> the "methods" code is pretty clearly separated from the rest of apt; it spawns processes to do the "get"
06:53:19 <SyntaxPolice> there's actually a "gpg" method in apt-secure to do the sig checking
06:53:26 <shapr> w00!
06:53:38 <shapr> how does that work?
06:54:29 <shapr> hi cm 
06:54:29 <SyntaxPolice> well, umm... there are several methods, like http, ftp, cd, file, gpg
06:54:58 <SyntaxPolice> and you just write code which given the uri, plus a method, performs the method on the uri and puts the file in a particular place
06:55:53 <SyntaxPolice> the method to use is defined by the uri in your sources.list
06:56:03 <shapr> I've spoken to several people on irc who want gpg sigs in apt
06:56:14 <shapr> enough that they would switch to Debian if I could tell them how to do it.
06:56:38 <SyntaxPolice> google apt-secure
06:56:45 <shapr> cool, thanks
06:56:47 <SyntaxPolice> and email the current apt maintainers telling them that you want it!
06:57:00 <SyntaxPolice> it's still not integrated :( :(
06:57:14 <shapr> that sucks
06:58:08 <SyntaxPolice> I'm not even sure if the version on our site works in unstable anymore. I should try it out
07:09:35 <harsha> namaste shapr :)
07:09:43 <harsha> i was with the other machine. sorry
07:10:42 <harsha> not necessarily from a student to a guru... 
07:11:19 <harsha> but a *very* polite and respectful way of greeting a person
07:14:27 <harsha> scarface hi 
07:14:47 * SyntaxPolice saw that movie on the big screen the other day
07:15:09 <harsha> scarface sup man?
07:22:57 <harsha> hmmm what kinda?
07:23:24 <harsha> reg????? doze???????????????????
07:30:06 <scarface> harsha you there?
08:10:18 <shapr> @yow
08:10:19 <lambdabot> PUNK ROCK!!  DISCO DUCK!!  BIRTH CONTROL!!
08:20:36 <ham[let]_> lambdabot: help
08:20:36 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
08:21:40 <mgoetze> @playgo 9x9
08:21:40 <lambdabot> Sorry, I don't know the command "playgo", try "lambdabot: @listcommands"
08:22:44 <ham[let]_> hey mgoetze :)
08:22:44 <mgoetze> damn, lambdabot can't even play go... what a stupid bot :)
08:22:44 <shapr> mgoetze: write a go plugin
08:22:50 <ham[let]_> shapr: is it your bot?
08:23:32 <shapr> not really mine
08:23:40 <shapr> I do host the bot and the source though
08:23:42 <ham[let]_> :)
08:23:49 <ham[let]_> whos bot is it?
08:23:55 <shapr> the bot was originally written by Pseudonym
08:24:05 <shapr> but many people from #haskell have committed code to it
08:24:14 <shapr> Darius wrote @eval
08:24:15 <ham[let]_>  ah
08:24:18 <shapr> pesco wrote @type
08:24:21 <shapr> @listmodules
08:24:22 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
08:24:26 <shapr> I wrote @quote
08:24:27 <ham[let]_> cause i have written a bot in lisp 
08:24:41 <shapr> polli rewrote the event handling system in the bot
08:24:42 <ham[let]_> and a small article which might be interesting for the bot
08:24:47 <ham[let]_> lambda semantics
08:24:53 <SyntaxPolice> hi mgoetze :)
08:24:55 <shapr> Heffalump wrote the dynamic loading
08:24:59 <shapr> I wrote quote
08:25:08 <shapr> Riastradh wrote karma
08:25:12 <ham[let]_> eval?
08:25:17 <shapr> Darius wrote eval
08:25:22 <ham[let]_> btw is there a dynamic haskell?
08:25:28 <shapr> what do you mean?
08:25:45 <shapr> dynamic loading of modules?
08:26:00 <ham[let]_> nope like in lisp
08:26:11 <shapr> do you mean macros?
08:26:11 <ham[let]_> where you can write new code while the prog runs
08:26:15 <shapr> sure
08:26:18 <shapr> lambdabot has that.
08:26:24 <ham[let]_> http://ai-depot.com/Articles/49/Semantics.html
08:26:37 <mgoetze> hi SyntaxPolice 
08:26:45 <ham[let]_> then that article might be of some interest
08:27:03 <shapr> ozone hacked the RuntimeLoader out of GHCi, Heffalump hacked that into lambdabot.
08:27:22 <shapr> *many* people on #haskell have contributed to lambdabot, so even though I run the bot on my server, and I host the source, it's not *my* bot.
08:27:36 <ham[let]_> yeah i see
08:28:01 <ham[let]_> so runtime loading can be done in haskell?
08:28:05 <ham[let]_> wich haskell code?
08:28:06 <shapr> sure
08:28:11 <shapr> look at the runtime loader
08:28:14 <ham[let]_> k
08:28:23 <shapr> it still has some problems, but it's spiffy
08:28:26 <ham[let]_> so that part isnt written in c?
08:28:31 <shapr> nope
08:28:56 <ham[let]_> cool
08:29:29 <ham[let]_> shapr: have a quick look at the article please maybe ill rewrite that for lambdabot once i am into haskell
08:29:52 <ham[let]_> btw my own bot that does that is named llamabo ;)
08:31:12 <emu> runtime loading can be done in c
08:31:17 <emu> its just painful =)
08:32:45 <ham[let]_> yeah i just asked cause i dont wanna see c code anymore
08:33:00 <shapr> me neither
08:33:08 <ham[let]_> its such a mess
08:33:19 <isomer> llamabo...is that the Welsh version :)
08:33:24 <ham[let]_> heh
08:33:47 <ham[let]_> i thought it was more funny that way
08:34:10 <ham[let]_> all my stuff is named something like llama ;)
08:34:20 <shapr> neat
08:34:20 <ham[let]_> http://codemages.sf.net
08:34:45 <shapr> is that a picture of you top left?
08:35:06 <ham[let]_> yep :)
08:35:18 <shapr> nice haircut
08:35:37 <ham[let]_> i want a ascii pic of that to make it accessable in links ;)
08:35:43 <shapr> heh, good idea
08:35:50 <shapr> aalib should do that for you
08:36:25 <ham[let]_> i tried to do that with gimp but it didnt link to aalib somehow
08:41:00 <ham[let]_> shapr: whats wrong with the haircut?
08:49:03 <Smerdyakov> ham[let]_, don't you know that Lisp is BAD!!
08:49:17 <ham[let]_> heh ;)
08:49:42 <ham[let]_> Smerdyakov: why? i now will lean haskell
08:49:42 <ham[let]_> learn
08:49:42 <Smerdyakov> ham[let]_, good. Then you can not use Lisp again.
08:49:51 <ham[let]_> why?
08:50:04 <Smerdyakov> Because it makes you spend more time developing code before it works.
08:50:23 <ham[let]_> in lisp?
08:50:24 <Lor> Aagh, not this war here, too.
08:50:35 <ham[let]_> :) i use both ;)
08:50:45 <andersca> C ROCKS LOL!!!!!
08:50:49 <ham[let]_> heh
08:50:53 <andersca> erhm
08:50:53 <andersca> hello
08:51:14 <Smerdyakov> ham[let]_, there's not much reason to use Lisp for AI programming when you have Haskell!
08:52:37 <ham[let]_> Smerdyakov: why? i need facts i am willing to get sublimated :)
08:53:42 <Smerdyakov> ham[let]_, many of the same reasons from http://www.hprog.org/fhp/MlLanguage
08:53:44 <ham[let]_> i really like haskell alot because its mathematically well founded
08:54:05 <emu> hey, its smerdy
08:54:27 <Smerdyakov> emu, I don't know why you're "hey"ing me when I think you're the one who rarely says anything. ;)
08:54:45 <emu> soo
08:54:52 <emu> how's ca
08:55:00 <Smerdyakov> Fiiine.
08:56:55 <emu> i don't trust mathematicians
08:57:04 <emu> shady fellows
08:57:04 <ham[let]_> emu: why?
08:57:06 <det> Smerdyakov: you certainly are in an ornery mood today :)
08:57:08 <ham[let]_> :)
08:57:13 <emu> cause i'm a logician, or something
08:57:33 <ham[let]_> emu: isnt that a subset of mathematicians ;)?
08:57:38 <emu> see!
08:58:12 <emu> its the other way around
08:58:20 <ham[let]_> emu: and why aint you in #prolog then ;)?
08:58:54 <emu> i never said it was a wonderful basis for a general purpose programming language =)
08:59:02 <ham[let]_> :)
09:01:15 <ham[let]_> is that book good? http://www.amazon.com/exec/obidos/tg/detail/-/0201342758/qid=1069347640/sr=1-1/ref=sr_1_1/102-4455391-2022554?v=glance&s=books
09:01:24 <Smerdyakov> emu, so you're graduating in Logic & Computation?
09:02:06 <emu> supposedly =)
09:02:20 <emu> i think it will happen
09:03:25 <Smerdyakov> Any idea what comes after you graduate?
09:03:59 <emu> nope, i'm playing it as it comes
09:07:35 <emu> the trouble with me is, if i'm doing one thing, i'd rather be doing the other thing
09:07:52 <emu> so if i'm in school, i'd rather go work
09:07:59 <emu> and if i'm at work, i'd rather go to school
09:48:24 <TripleDES> hi
10:09:57 <sex|more> hi ppl
10:10:12 <sex|more> can someone recommend me a good haskell book?
10:11:20 <andersca> the craft of functional programming
10:11:59 <sex|more> the thomson book?
10:12:28 <andersca> yeah
10:12:38 <sex|more> the "thin" one?
10:12:50 <TripleDES> I have Introduction to Functional Programming using Haskell
10:15:18 <sex|more> andersca:http://tinyurl.com/vv0s
10:15:27 <sex|more> I've seen this one today
10:15:34 <sex|more> completely disliked it!
10:16:05 <sex|more> TripleDES: this one? http://tinyurl.com/vv0z
10:18:29 <TripleDES> yep
10:18:51 <sex|more> is it good?
10:18:54 <ham[let]_> and what about this one?
10:18:56 <ham[let]_> http://www.amazon.com/exec/obidos/tg/detail/-/0201342758/qid=1069347640/sr=1-1/ref=sr_1_1/102-4455391-2022554?v=glance&s=books
10:19:01 <TripleDES> It was recommended by my functional programming teacher
10:19:05 <sex|more> does some one know this one? http://tinyurl.com/vv1e
10:19:20 <sex|more> woudl you recommend it?
10:19:26 <TripleDES> I don't see any other but it's helping me
10:19:41 <sex|more> ham[let]_: I did take a look in
10:19:50 <ham[let]_> sex|more: and?
10:19:50 <sex|more> not very useful in my eyes
10:19:50 <Lor> How much additional value do the books have over all the tutorials in the net?
10:19:57 <ham[let]_> sex|more: why?
10:20:03 <sex|more> maybe I was looking to brief!
10:20:10 * Lor has usually found all the online stuff quite sufficient.
10:20:23 <sex|more> Lor: have some good resourceS?
10:20:37 <Lor> Um. Just the usual stuff.
10:21:03 <Lor> See haskell.org/learning.html
10:21:24 <sex|more> k
10:21:24 <sex|more> k
11:10:51 * isomer is away: class time
11:46:25 <harsha> @fortune
11:46:25 <lambdabot> 	Reporters like Bill Greider from the Washington Post and Him
11:46:25 <lambdabot> Naughton of the New York Times, for instance, had to file long, detailed,
11:46:25 <lambdabot> and relatively complex stories every day -- while my own deadline fell
11:46:25 <lambdabot> every two weeks -- but neither of them ever seemed in a hurry about
11:46:25 <lambdabot> getting their work done, and from time to time they would try to console
11:46:26 <lambdabot> me about the terrible pressure I always seemed to be laboring under.
11:46:28 <lambdabot> 	Any $100-an-hour psychiatrist could probably explain this problem
11:46:30 <lambdabot> to me, in thirteen or fourteen sessions, but I don't have time for that.
11:46:33 <lambdabot> No doubt it has something to do with a deep-seated personality defect, or
11:46:34 <lambdabot> [5 @more lines]
11:46:55 <harsha> @fortune
11:46:55 <lambdabot> Welcome to Lake Wobegon, where all the men are strong, the women are pretty,
11:46:55 <lambdabot> and the children are above-average.
11:46:55 <lambdabot> 		-- Garrison Keillor
11:47:30 <harsha> who? you?
11:47:41 <harsha> or me?
11:48:01 <harsha> nope
11:48:31 <harsha> am here.. couldnt find dinner.. so asked a guy to prepare some dal-roti and kinda became 11 :(
11:48:57 <harsha> no, whom did you go with?
11:49:14 <SyntaxPolice> harsha: are you talking to yourself?
11:49:56 <harsha> SyntaxPolice no , hehehe
11:50:11 <scarface> syntaxpolice: harsha has the habit of talking to himself 
11:50:26 <SyntaxPolice> hehe
11:50:32 <harsha> scarface you know whom i was talking to.. 
11:56:57 <scarface> shapr: hi
13:36:09 <raver> hi
13:58:02 <dark> Hello!
13:58:34 <Jad> hello dar
13:58:34 <Jad> dark
13:58:49 <Lor> Hi, dark.
13:58:59 <Jad> shapr: hello
14:22:37 <Lor> Bah. No one has answered my query on c.l.f.
15:25:52 <TripleDES> hi
15:26:36 <Lor> 'lo
15:36:25 <Igloo> Any SML people know why I'm getting "Error: unbound structure: Control in path Compiler.Control.Print.printLength" when setting things like Compiler.Control.Print.printLength?
15:36:51 <Lor> Trying to run metaml?
15:43:02 <Igloo> Yup
15:43:54 <Lor> I got the same error. Probably just bit rot.
15:44:07 <Lor> metaocaml is much better maintained. :)
15:44:16 <Igloo> Is that the same language?
15:44:27 <Lor> It's a modified ocaml.
15:44:46 <Lor> I'm not exactly sure about their differences in expressive power.
15:45:23 <Lor> At least in the AIM paper folks argued that they devised a better system than metaml, I'm not sure if metaocaml is a manifestation of AIM or what...
15:45:25 <Igloo> But does it also use <_>, <_,_>, ~, run, lift?
15:45:34 <Lor> No, its syntax is different.
15:45:42 <Lor> (But so is ocaml's from sml's)
15:46:57 * Igloo decides just not to mention examples I'm not sure of having read the paper
15:48:01 <Lor> Apparently, metaocaml has just three operators, the quotation, the escape, ad run.
15:48:30 <Lor> No lift. And what's that bracketed comma thingy?
15:50:29 <Igloo> <4> has type <int,'a>, the latter being any constraints on the environment that are imposed
15:51:09 <Lor> Ah, right.
15:51:29 <Lor> Hm, metaml can move open expressions freely around?
15:52:46 <Lor> In my msc thesis I'll probably talk something about metaml and explain why it's not the thing I want.
15:53:01 <Igloo> I guess so. I haven't really read the paper so I'm not entirely clear on it
19:22:52 * ayrnieu reads about the GNU Free Documentation License
19:24:05 <pimpbot5000> hi, is anyone aware of an easy way to guarantee a function's strictness in GHC?
19:27:17 <ayrnieu> pimp - no.  Why do you want to do that?
19:28:35 <Darius> pimpbot5000: Find out whether a function is strict or make sure that it is strictL
19:28:36 <Darius> ?
19:38:23 <Pseudonym> pimpbot5000: You could always use seq or $!.  Then it'd definitely be strict.
19:38:59 * Darius still wonders why Haskell doesn't have Clean style strictness annotations.
19:39:29 <ayrnieu> Darius - why would Haskell want them?
19:39:48 <Pseudonym> Actually, Haskell could do with a little more in the way of strictness annotations, I agree with that.
19:39:55 <Darius> Because it's a damn site more convenient than seq or $! for most things.
19:39:56 <Pseudonym> At the moment, we do have them on data constructors.
19:40:15 <Darius> Yeah, I think that Clean didn't, but I may have just not noticed.
19:41:18 <Pseudonym> I think part of the reason is that Haskell doesn't really have function arguments.
19:41:28 <Pseudonym> Not in the same way that CLean does.
19:41:53 <Darius> Pseudonym: What problem does that cause?
19:43:46 <Pseudonym> It makes it non-obvious who should evaluate arguments.
19:44:10 <Pseudonym> Personally, I think it's fairly straightforward.
19:44:43 <Darius> With GHC (except for supporting the syntax) it should just be an annotation that would make GHC's strictness analyzer think that it's strict.
19:45:04 <Darius> I'd think that part of it would actually be trivial to implement.
19:45:20 <Pseudonym> Not quite.
19:45:34 <Pseudonym> Uhm...
19:45:35 * Pseudonym thinks
19:45:37 <Pseudonym> OK, maybe.
19:54:58 * Darius also wants O'Haskell style subtyping or similar.
19:55:15 <Riastradh> Subtyping?  No, it has _super_typing, not subtyping!
19:55:21 <Smerdyakov> I bought a jar and put all the subtyping in the jar.
19:55:28 <Smerdyakov> Then I put the jar in a lion and sent it away.
19:55:42 <Darius> The jar or the lion?
19:55:59 <Smerdyakov> The jar is in the lion.
19:56:11 <Smerdyakov> You have to send both or neither away.
20:02:40 <dark> Have you ever tried putting the lion in the jar?
20:02:59 <Smerdyakov> I don't think you have much experiences with lions to suggest that.
20:08:24 <Darius> I've found an Erlang program that could use Buddha style debugging.
20:09:32 <Darius> "handle_call({lookup, crash}, From, Dict) -> 1/0; %% <- deliberate error :-)"
20:14:58 <ayrnieu> There are much nicer ways to do that.  What kind of program is this?
20:15:47 <Darius> A demonstration program.
20:20:41 <Smerdyakov> I only use languages that have good support for deliberate errors.
20:24:04 <Pseudonym> I'm trying to envisage "Buddha-style debugging".
20:24:06 <Pseudonym> All bugs are one.
20:25:04 <Darius> http://www.haskell.org/pipermail/haskell/2003-October/012891.html
20:25:48 <Pseudonym> I know what Buddha is. :-)
20:26:08 <Darius> Pseudonym: I know.
20:26:39 <ozone> Darius: i prefer this one - http://www.haskell.org/pipermail/haskell/2003-October/012894.html
20:29:10 <Darius> "We start with a few definitions: Event - something which happens."
20:29:13 <Pseudonym> The bug that is not explicitly marked is not the true bug.
20:29:52 <Smerdyakov> Meet me at the dock at midnight with a briefcase full of small, unmarked bugs
20:57:36 <ayrnieu> yay!
21:00:45 <ayrnieu> Moving to Network.Socket's send/recv helped wonderfully (I don't suppose that Network will really be all that good until it has a buffermode that supports packetized IO) -- I still use Network for listenOn and such, but I use Network.Socket's 'accept' instead -- which, for INET, only differs in that it lacks one convenience-feature and that it doesn't call socketToHandle
21:02:36 <ayrnieu> aside: hSetBufferMode (PacketBuffering 4096) -- would be nice; this would have the handle call 'recv socket 4096' internally.  Writing wouldn't be affected.  You could use hGetContents to suck up to 4096 from the socket at a time.
21:02:47 <ayrnieu> 4096 bytes.
21:19:44 <ayrnieu> @fortune
21:19:45 <lambdabot> The ideas of economists and political philosophers, both when they
21:19:45 <lambdabot> are right and when they are wrong, are more powerful than is generally
21:19:45 <lambdabot> understood.  Indeed, the world is ruled by little else.
21:19:45 <lambdabot> 		-- John Maynard Keyes
21:29:03 <det> lambdabot: @eval are you sick of reading fortunes
21:29:03 <lambdabot> True
21:37:58 <ayrnieu> Is there a prelude function of type  b a -> b  ?  for exception-handling, I'd like to ignore the exception passed.  ignoreException f _ = f -- catchJust ioErrors doSomething (ignoreException abortMission) -- rather than such as: catchJust ioErrors doSomething (\_ -> abortMission)
21:45:11 <ozone> ayrnieu: const
21:45:44 <ayrnieu> ah, thanks =)
22:02:17 <Darius> Yes, Pseudonym tell us "The Right Thing" :P
22:31:49 <Pseudonym> :-)
22:32:13 <Pseudonym> I'm going to add the "magically does what you want it to" feature to the next release, okay?
22:32:58 <Pseudonym> Particularly the "magically conforms to your ideal interface" feature, which many users have been asking for.
22:35:22 <Pseudonym> Though I like the left-fold operator.
22:35:26 * Pseudonym might put that in Edison
22:44:07 <ayrnieu> Simply getting sockets instead of handles is becoming more and more complex, as I suck more and more of Network.hs into my helper-functions-cum-library
22:44:29 <ayrnieu> For instance, I've just noticed that Network.hs doesn't export PortNumber(..)
22:45:12 <ayrnieu> Now I will have to abandon a connectTO-lookalike
22:49:49 <Pseudonym> Must go home.
22:49:51 <Pseudonym> Nytol
23:34:51 <harsha123> shapr you there?
23:41:06 <harsha123> SyntaxPolice have you use squid?
