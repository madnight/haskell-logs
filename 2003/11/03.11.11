03:07:54 <TripleDES> morning
04:32:21 <shapr> hi TripleDES 
04:32:34 <shapr> good morning #haskell!
04:32:42 <shapr> I just got back from swedish class
04:32:46 <shapr> what's up with you guys?
04:38:03 <TripleDES> doing some annoying tax papers :\
04:52:57 <shapr> hoi blitznl 
04:53:30 <shapr> man, blitznl is bouncing today.
04:53:49 <shapr> hei Lor, wassup?
04:54:32 <shapr> blitznl: hellooo
04:56:27 <Lor> Nothing much. For the last week I've been doing a compressor as a string matching course project.
04:56:47 <Lor> I got a bit carried away.
04:57:10 <shapr> can you compress very large strings now? :-)
04:57:31 <earthy> shapr: that's easy.
04:57:41 <earthy> the hard part comes when you want to compress *well*. :)
04:57:43 <shapr> earthy: depends on your definiton of large
04:57:53 <Lor> Well, I beat gzip, but not bzip2.
04:58:05 <shapr> Lor: heard of 7zip ?
04:58:09 <earthy> lor: that's pretty good
04:58:25 <Lor> I just do a modified LZW followed by a modified huffman.
04:58:34 <earthy> ;)
04:58:41 <shapr> Lor: add burroughs wheeler!
04:59:02 <Lor> burroghs-wheeler was already taken as a project subject. :)
04:59:02 <earthy> shapr: that won't necessarily gain him much
04:59:17 <shapr> earthy: but it's fun, and you can make naked lunch jokes for awhile.
04:59:23 <Lor> I could add RLE before LZW, but I don't bother at this stage, really.
04:59:31 <Lor> I've already invested far more effort on this than this is worth.
04:59:44 <earthy> naked lunch jokes?
04:59:45 <shapr> what language did you write it in?
05:00:00 <shapr> earthy: google for burroughs naked lunch ;-)
05:00:12 <Lor> C. The teachers aren't very fluent in functional languages.
05:00:34 <shapr> oh, too badd.
05:00:36 <Lor> It was educational. I managed to refresh my memory about why imperative approach is _bad_.
05:00:49 <shapr> why is that?
05:00:51 <Lor> I've spent huge amounts of time debugging, since the internal state is _soo_ tricky to manage.
05:01:11 <Lor> I added assertions just about everywhere, which is good, since almost all of them have failed at some point or the other.
05:01:56 <Lor> On the other hand, only in C could I use such tricks as I do to save space.
05:02:35 <shapr> I really like having all the state in one place.
05:02:37 <Lor> My dictionary size is 64k entries, and I almost manage to keep memory usage below 2MB.
05:03:07 <Lor> Let me tell you, a huffman tree with 132k nodes is no fun.
05:03:15 <Lor> 128. Sheesh.
05:03:35 <earthy> that naked lunch doesn't sound like my style of book
05:04:31 <Lor> All my code could have been much neater, if only I could have used inner functions (don't even need to capture the environment, just stay alive as long as we are in the outer frame) and multiple return values.
05:07:30 <shapr> heh
05:15:27 <shapr> y0 SyntaxLaptop
05:18:32 <shapr> wazzup?
06:32:53 <SyntaxPolice> @arr
06:32:54 <lambdabot> Get out of me way, yeh landlubber
07:03:08 <aleator> Anyone mind helping a newbie for a bit with multiparameter type classes?
07:24:23 <aleator> Never, mind. Google was enough :)
07:24:30 <Lor> It often is. :)
07:36:30 <earthy> hawiki! hawiki!
08:21:00 <harsha123> hi all!
08:21:08 <SyntaxPolice> hey harsha123
08:21:17 <harsha123> hi SyntaxPolice 
08:26:44 <isomer> morning
08:28:28 <harsha123> isomer morning
08:28:44 <isomer> how goes?
08:28:53 <harsha123> any CVS gurus here? :)
08:29:13 <Riastradh> Bah! CVS!  We use darcs here!
08:29:18 <Riastradh> (well, ok, I don't, but some people do)
08:30:04 <isomer> well, functionally literate with cvs anyway, Riastradh
08:30:05 * esap has a project whose last commit was a year ago [and I don't intend to put another version before the thing compiles :-)]
08:31:11 <isomer> what's your question, Riastradh?
08:31:38 * esap mostly just uses cvs update and cvs commit, so if that's enough, I can answer the question :-)
08:31:42 * Riastradh doesn't have a question.
08:32:33 <isomer> err.....my bad :)
08:32:39 <isomer> harsha123: your question?
08:32:49 * isomer gulps coffee
08:32:52 <harsha123> esap :) i am trying to run a cvs server with each repository running on a different IP and each of that IP aliased to a single IP
08:33:09 <harsha123> isomer read above!
08:33:34 <isomer> harsha123: have you read http://cvsbook.red-bean.com/cvsbook.html ?
08:33:46 <harsha123> isomer hmm.. yep.. i have..
08:33:51 <isomer> oh :(
08:34:01 <harsha123> isomer :)
08:34:57 <harsha123> anyone knows of a channel that discusses such issues ? ;-)
08:35:10 <esap> harsha123: So it doesn't work to just run each server in a separate port?
08:35:35 <harsha123> esap exactly :)
08:36:32 <harsha123> i was trying to accept tcp requests to the cvs server over djb's tcpserver.. but damn am not sure of the syntax of tcpserver
08:37:17 <isomer> harsha123: i'm afraid this is beyond my scope. sorry, man
08:37:23 <earthy> IP aliased to a single IP?!
08:37:35 <harsha123> isomer nevermind.:)
08:37:45 <harsha123> earthy hmmm.. why not?
08:37:57 <earthy> euhm... I really don't grok your setup currently.
08:38:38 <earthy> you have a number of machines, a, b, and c say. these run CVS repositories and have IP addresses aa.aa.aa.aa, bb.bb.bb.bb and cc.cc.cc.cc respectively
08:38:42 <earthy> this I grok.
08:39:07 <harsha123> earthy hmm.. no.. that that way!
08:39:23 <earthy> now, you have a fourth IP address dd.dd.dd.dd and you're multiplexing connections to aa.aa.aa.aa, bb.bb.bb.bb and cc.cc.cc.cc?
08:39:34 <earthy> connections to dd.dd.dd.dd to ...
08:39:38 <earthy> or what? :)
08:40:27 <harsha123> i have just one cvs server , with many repositories... and i want to access each of these repositorires using a different IP
08:40:52 <earthy> *ah*! that's not what you said though.
08:41:21 <earthy> 'kay, this is pretty easy: configure all the IP addresses on the networkinterface (using linux that's done with ip addr add <address> dev <interface>)
08:41:37 <harsha123> so i want to alias this single IP into many IP's so that accesing a repository on the client's side is done by changing the CVSROOT to a different IP :)
08:41:53 <earthy> then have the pservers bind not to 0.0.0.0 but to one of the different IP addresses.
08:42:04 <harsha123> earthy ok 
08:42:08 <Smerdyakov> harsha123, why do you want to do that?
08:42:30 <esap> harsha123: why not distinguish based on the path part of the CVSROOT?
08:42:52 <harsha123> Smerdyakov basically 'cause the client does not have too much resources and wants to manage his repositories this way!
08:43:24 <earthy> look at eg http://www.sugoi.org/bits/index.php?bit_id=32
08:43:37 <earthy> and ath the env= and bind= lines in the example
08:43:38 <harsha123> esap : not a bad idea though!
08:43:48 <harsha123> earthy ok
08:44:01 <earthy> (that is, if you want to do it that way ;))
08:44:59 <harsha123> earthy I am looking into that link
08:45:09 <shapr> oh YEAH?
08:45:46 <harsha123> hello shapr 
08:46:23 <shapr> hi harsha123 
08:46:36 <harsha123> sup shapr 
08:46:48 <shapr> not much
08:47:14 <shapr> hi jpapl 
08:47:29 <jpapl> hi
08:47:37 <shapr> looking for Haskell info?
08:47:56 <jpapl> just looking around
08:47:58 <jpapl> :)
08:48:06 <shapr> want to learn Haskell?
08:48:35 <Smerdyakov> shapr, you are too forward.
08:48:43 <shapr> Smerdyakov: hah, you are too backward
08:48:56 <jpapl> :)
08:49:38 <harsha123> shapr guess you are crossed with me, cause i make #haskell a *general* channel :)
08:49:44 <harsha123> :)
08:50:09 <isomer> yo shapr!
08:50:57 <shapr> crossed?
08:51:01 <shapr> y0 isomer, wazzup?
08:51:08 <SyntaxPolice> #haskell is the best place for help with Debian, Java, IRC, and um. haskell
08:51:17 <SyntaxPolice> oh, and the game of Go
08:51:49 <shapr> and I can help with Python, Zope, Plone, JavaScript, elisp, and many others
08:51:49 <esap> oh and category theory
08:51:49 <shapr> right, category theory
08:51:49 <shapr> and functional programming in general
08:52:26 <isomer> and smalltalk
08:52:34 <shapr> jpapl: do you have questions in any of those areas?
08:52:42 <isomer> oh, and compilers, garbage collectors...that sort of thing too
08:52:48 <shapr> yes, that too
08:53:34 <isomer> how about gnuserv/gnuclient?
08:53:46 <shapr> I have some clue about that also
08:53:49 <jpapl> not at the time, but thks anyway :) shapr
08:53:57 * esap has no glue.
08:54:04 <shapr> :-P
08:54:04 * isomer has a gnuserv/gnuclient question
08:54:26 * SyntaxPolice used to use gnuserv
08:54:33 * shapr has an answer, unformed, nebulous, waiting to be sprung upon an unsuspecting world
08:54:45 <isomer> i will try to phrase a question, in that case
08:55:07 <isomer> so i have a distant machine running xemacs and gnuserv... i set up GNU_SECURE to have my machine name in it...
08:56:17 <isomer> but when I try to connect using $gnuclient -h myhost, i get "gnuclient: Connection refused" and "gnuclient: unable to connect to remote"
08:56:19 <isomer> any ideas?
08:56:39 <isomer> (and no warnings or anything in the remote xemacs)
08:57:15 * isomer hears the chirping of crickets
08:57:58 * isomer hears the unmistakable sound of programmers scurrying in all directions
08:58:10 <shapr> er, what?
08:58:22 <shapr> oh
08:58:37 <isomer> :)
08:58:40 <shapr> I've never used gnuserv across tcp/ip
08:58:45 * SyntaxPolice didn't even know about -h :)
08:58:49 * shapr checks
08:58:52 <isomer> oh...
08:59:16 <shapr> oh, that's cool
08:59:27 <shapr> happily, I have access to several machines around the world
08:59:36 <shapr> this looks like a useful feature
08:59:46 <isomer> ...if only it worked
08:59:57 <isomer> yes, it would be tremendously useful
09:00:27 <anduril1> I'm a beginning CS student, and after my lecture on some sorting techniques in imperative (the class is in java) languages, I was wondering what the effiency is for quicksort in Haskell?
09:00:44 <shapr> hello anduril1, and welcome to world of magic :-)
09:00:54 <anduril1> ooh, I love magic
09:01:01 <shapr> programming is magic
09:01:22 <shapr> and Haskell is more magic in a smaller cost of brain cells ;-)
09:01:53 <SyntaxPolice> anduril1: have you seen quicksort in haskell? :)
09:01:57 <isomer> anduril1: Omega(n log n), and O(n^2), of course
09:03:03 <anduril1> yeah, I know the quicksort in Haskell
09:03:03 <anduril1> so its comparable to selection sort?
09:03:09 * esap points out http://info.astrian.net/jargon/Hacker_Folklore/A_Story_About_Magic.html
09:03:20 <anduril1> isomer: what do you mean by "omega"
09:03:26 <anduril1> is that best case?
09:03:28 <isomer> anduril1: average running time
09:03:43 * jpapl is away: school!!!
09:04:25 <anduril1> isomer: is O worst case?
09:04:32 <isomer> yes
09:05:32 <kosmikus> no
09:06:54 <anduril1> so are there any better algorithms that lend themselves to functional programming?
09:07:40 <shapr> sure, Chris Okasaki found out that some things can be put off forever
09:08:07 <shapr> basically, amortized algorithms can take advantage of laziness in such a way that they can sometimes be more efficient than any strict implementation.
09:08:17 <isomer> in some special cases, you can use radix sort which runs in linear time...
09:08:51 <shapr> anduril1: alternatively, read Rabhi and LaPalme's book on purely functional algorithms, from my viewpoint nearly everything lends itself to FP more than imperative, since it's more elegant to read/write.
09:09:00 <shapr> note that I am possibly biased towards FP ;-)
09:09:16 <shapr> quadruple bucky cokebottle!
09:09:45 <anduril1> shapr: yeah, I really like the functional way of doing things too, but take heap sort for example, that requires a mutable array, how do I do that in Haskell?
09:10:04 * shapr looks at his algorithms book
09:10:08 <kosmikus> the notions O(.) and \Omega(.) are orthogonal to worst/average/best-case
09:10:22 <Smerdyakov> anduril1, well, you never NEED anything mutable. It just might be a helpful optimization.
09:10:52 <musasabi> now if only haskell would support linear types...
09:11:04 <shapr> what? are you h baker?
09:11:24 <musasabi> baker?
09:11:33 <shapr> the linear types guy
09:11:54 <Smerdyakov> Linear type systems aren't exactly a niche interest these days....
09:11:56 <anduril1> smerdyakov:  I guess you don't have to use mutable arrays, but I can't think of a way to express any of the sorts w/out them
09:12:03 <Smerdyakov> anduril1, lists.
09:12:09 <musasabi> nope. /whois tells. They are just very usefull.
09:12:24 <anduril1> smerdyakov: you can't update a list in place
09:12:26 <shapr> http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html
09:12:30 <shapr> anduril1: you don't have to
09:12:32 <Smerdyakov> anduril1, so?
09:12:34 * esap has interest in linear type systems.
09:13:00 <Smerdyakov> anduril1, you track "state changes" manually with funtion parameters, like usual.
09:13:16 <shapr> length [] = 0
09:13:24 <shapr> length (x:xs) = 1 + length xs
09:13:44 <shapr> in that case, nothing is mutated, you just call another copy of yourself with a new value.
09:15:18 <anduril1> shapr: I understand those, but that wasn't exactly what I was talking about
09:15:42 <shapr> show me?
09:15:44 <Smerdyakov> shapr is not very good with explanations. ;)
09:16:03 <Smerdyakov> anduril1, I'll use pairs instead of lists to make it easy to see.
09:16:11 <Smerdyakov> anduril1, you want to sort the pair (2, 1) "in place."
09:16:21 <Smerdyakov> anduril1, you think of assigning values to make it (1, 2).
09:16:31 <Smerdyakov> anduril1, I think of returning a NEW pair (1, 2).
09:16:43 <shapr> Smerdyakov: hah, I am very good with explanations.
09:16:50 <Smerdyakov> anduril1, later iterations of an algorithm work with the new pair, not the original.
09:16:53 <shapr> Smerdyakov: just because you rarely understand what I'm saying is no excuse ;-)
09:17:30 <esap> It's all about "copying" vs. "updating". Copying is what functional programming is all about. Updating is what imperative programming bases on.
09:17:46 <anduril1> yeah
09:18:08 <anduril1> I think I need to try and hack out what I'm trying to say, and come back with specific problems
09:18:08 <esap> Or, "values" vs. "locations.
09:18:37 <shapr> anduril1: alternatively, check for the book that I mentioned in your local library.
09:18:49 <shapr> I own that book, and I find their implementations very elegant.
09:23:03 <shapr> hi opet, wassup?
09:31:38 <shapr> anduril1: lambdabot is written in Haskell, and is a fun toy.
09:46:48 <shapr> http://xgoogle.com/details?channel=%23haskell&network=163
09:46:55 <shapr> cool, there's #haskell on quakenet and efnet
09:48:51 <Riastradh> No, that's not cool: we must assimilate!
09:49:07 <shapr> I'm afraid to ask about #haskell on QuakeNet
09:50:02 <Riastradh> There's a #scheme on EFnet, too...
09:50:26 <Igloo> What would the Haskell quake mod be?
09:50:37 <Igloo> Would you fire monads at Wadlers?
09:50:37 <shapr> stateless ;-)
09:50:46 <shapr> or dual with comonads?
09:51:24 <Riastradh> You'd have frags and cofrags!  One would kill someone and the other would resurrect them; only your teammates can cofrag, and only your opponents can frag.
09:52:32 <Riastradh> I can imagine landscapes and colandscapes in Haskell Quake, as if drawn by Escher!
09:52:39 <andersca_> how do I negate a number?
09:52:44 <andersca_> just use 0 - n?
09:52:53 <Igloo> (-n)
09:52:59 <andersca_> doh
09:53:00 <andersca_> of course
09:53:09 <Riastradh> Igloo, wouldn't that be equivalent to '\x -> x - n'?
09:53:12 <Igloo> Parens sometime optional
09:53:21 <Igloo> No, special case
09:53:31 * Riastradh hates special cases.
09:53:53 <Igloo> Yeah, that one's really annoying given how often you want (+1) and (-1) near each other
09:54:03 <Riastradh> Death to special cases!
09:54:18 <Igloo> I quite like SML's ~ for negation
09:54:20 <Riastradh> Actually, death to infix crap.  Either use real algebraic syntax (which is nearly impossible in ASCII) or prefix!
09:55:21 <Riastradh> s/ASCII/text/1
10:03:10 * shapr snickers at the yampa mailing list
10:03:20 <shapr> Ashley Yakeley and Henrik Nilsson are being pissy at each other.
10:06:27 <andersca_> Riastradh: so I'd like a "do nothing" operation
10:06:43 <Riastradh> andersca_, what would it return, though?
10:07:10 <Igloo> Monad.when
10:07:13 <Igloo> And Monad.unless
10:07:23 <andersca_> Riastradh: ()?
10:07:44 <Riastradh> Erm, of what use is the whole expression, then, if it always returns ()?
10:07:55 <Igloo> < andersca_> i'm in a monad
10:08:01 <andersca_> ah, perhaps you didn't see that
10:08:03 <Riastradh> Oh.
10:08:04 <Igloo> (so m () really)
10:08:13 <Riastradh> Then yeah, Monad.{when,unless} will do the trick.
10:09:27 <andersca_> ugh, except that the operation does return a value
10:09:30 <andersca_> but I'm not interested in it
10:10:48 <Igloo> I can't think of anything like ignore x = do x; return () in Prelude/Monad
10:11:01 <Igloo> Apart from sequence_ [x], but that's just silly
10:11:32 <Riastradh> (>>=(const $ return ()))
10:11:36 <Lor> (>> return ())
10:11:43 <Riastradh> Bah!
10:11:46 <andersca_> :)
10:12:10 <Igloo> I guess that's not too bad
10:13:59 <Lor> liftM (const ())
10:52:57 <SyntaxPolice> shapr: yeah, I'm about to post to the yampa list. I just started looking at it again
10:53:02 <SyntaxPolice> it= yampa
10:53:14 <SyntaxPolice> I had forgotten that there _was_ a yampa mailing list and that I had subscribed, until that little flame war
10:54:16 <Tomasso> i hate hugs errors...
10:54:29 <Tomasso> they are diferent from one day to another
10:54:37 <SyntaxPolice> heh
10:54:53 <Tomasso> yesterday it returned a diferent error and i didnt modified the file
10:54:53 <SyntaxPolice> sometimes I think they change while I'm reading them.
10:55:14 <SyntaxPolice> at ICFP someone pointed out that advanced users don't even bother to read the error messages, because its usually faster to just look at the code to find out what's wrong
10:55:15 <Tomasso> so this is not functional, same input diferent output
10:55:25 <Tomasso> its not the function definition grgrgr
10:55:47 <shapr> there are two classes of errors "oh" and "wtf?"
10:55:47 <SyntaxPolice> and I've noticed myself doing so, (though I'm not "advanced")
10:56:31 <Tomasso> its always sintax errors...
10:59:55 * SyntaxPolice sends a message to yampa-users which will probably demonstrate how non-advanced he is
11:00:09 <SyntaxPolice> at least I know better than to participate in flame wars, though :)
11:02:30 <shapr> smart man
11:03:19 <SyntaxPolice> shapr: SHUT UP YOUR RONG!!
11:03:28 <SyntaxPolice> oh, wait. sorry.
11:03:41 <shapr> er, uh...
11:03:48 * shapr tries to remember how to flame
11:04:08 <shapr> um, NO WAY YOU SUK
11:04:36 <SyntaxPolice> @flame
11:04:36 <lambdabot> Sorry, I don't know the command "flame", try "lambdabot: @listcommands"
11:04:39 <SyntaxPolice> darn
11:09:31 <keverets> looks like an easy modification to lamdabot... it would require a parameter: the person to flame... perhaps if omitted it flames the caller?
11:10:25 <SyntaxPolice> hehe
11:10:32 <SyntaxPolice> we could pick someone to flame by default
11:10:49 <steveh> pick me!
11:10:52 <steveh> pick me!
11:10:56 <SyntaxPolice> we should also implement @troll
11:11:02 <SyntaxPolice> this will automate things greatly
11:11:03 <SyntaxPolice> @troll
11:11:04 <lambdabot> Sorry, I don't know the command "troll", try "lambdabot: @listcommands"
11:11:04 <SyntaxPolice> @flame
11:11:05 <lambdabot> Sorry, I don't know the command "flame", try "lambdabot: @listcommands"
11:11:10 <SyntaxPolice> you could just flame the last person who trolled
11:11:29 <keverets> as long as that person is still in the channel.
11:11:37 <SyntaxPolice> hm
11:11:39 <Igloo> I think it should flame a random element of ["ML", "C", "imperative programming"] by default
11:11:45 <SyntaxPolice> if not, then if flames steveh
11:11:53 <SyntaxPolice> Igloo: hehe
11:11:57 <steveh> :)
11:12:14 <keverets> or make the default user configurable, in case someone wants to be flamed more than steveh.
11:12:15 <SyntaxPolice> Igloo: btw, you should package ghc-cvs so people can use the new TH :)
11:12:28 <Igloo> Package or update?
11:12:55 * Igloo will be updating when I have some time, but it's already packaged
11:13:34 <SyntaxPolice> ah cool
11:13:37 <Igloo> Probably after I've had time to fix reported bugs, though
11:17:17 <Riastradh> keverets, nah, it should stay steveh.
11:17:36 <Riastradh> Then if someone else uses lambdabot, it will be entertaining if a different steveh is present.
11:18:37 <steveh> :)
11:18:54 <steveh> i will be a legend in lambdabot's mind
11:23:00 <Tomasso> can i do a pattern matching like this in a four element list?
11:23:03 <Tomasso> (x:y:z:w)
11:23:15 <Tomasso> w is the fourth element
11:23:28 <dennisb> nope, w is the tail of the list
11:23:39 <dennisb> try: x:y:z:w:[]
11:23:47 <Tomasso> ok, but in this case is the last element
11:23:54 <Tomasso> dennisb: let me try
11:24:14 <dennisb> that is 4 elemenst and then end of the list, yours are 3 elements and then w is the rest of the list
11:24:29 <Tomasso> i see
11:24:54 <Tomasso> grgr it returns: ERROR "C:\trabajo\TeamB.hs":100 - Syntax error in input (unexpected comma)
11:25:03 <Tomasso> and there is nothing written on line 100
11:25:17 <Tomasso> i cant figure out whats wrong..
11:25:22 <dennisb> well, some rows before then..
11:25:50 <dennisb> the usual trick is to comment out stuff until it works again, and then add things until it breaks
11:26:38 <Tomasso> hmhm i see
11:27:04 <dennisb> and the best with the method is that it works for all languages!
11:40:26 <Tomasso> why hugs errors always dont say the line number and the problem properly???
11:41:44 <Lor> Why? Because it's not a perfect program.
11:41:46 <Lor> (Doh.)
11:42:04 <Lor> By the way, multiple question marks are rather annoying.
11:42:06 <Tomasso> yeah,.. but is very imperfect... haha
11:42:18 <Lor> So use ghci.
11:42:23 <SyntaxPolice> Tomasso: if you are struggling with haskell and error messages too much, you mgiht simplify things by using Helium.
11:42:25 <Tomasso> ill do only one since now :D
11:42:41 <Tomasso> i must use hugs...
11:42:49 <Tomasso> but let me check Helium
11:42:57 <SyntaxPolice> btw, Tomasso, there were a number of talks at the recent International Confernece on functional Programming on ways to improve error messages in interpreters / compilers.  It is not an easy problem.
11:43:38 <Tomasso> hhm crazy.. and i see that there are not good debuggers yet
11:43:47 <Lor> I think it's partly a symptom that shows that Haskell's type system is too hairy.
11:44:16 <Lor> Most of the problems come from classes.
11:44:42 <Lor> That non-principality thingy among others.
11:50:41 <dennisb> Tomasso: syntax errors are hard for all compilers to handle, and in languages like haskell it's even harder since the syntax is so free
11:51:59 <Smerdyakov> Free as in beach?
11:56:03 <shapr> son of a beach?
11:59:01 <dennisb> son of _the_ beach, Notch Johnson is my favorit hero
13:47:10 * Cale attempts to implement general power series in noncommuting indeterminates over a field as a Haskell datatype
13:52:02 * SyntaxPolice notes that his "stupid" question to yampa-users wasn't that stupid after all
14:15:30 <jemfinch> in Haskell, there's a folding function that is basically this:
14:15:48 <jemfinch> <foldingfunction> f (x:xs) = foldl f x xs
14:16:11 <SyntaxPolice> foldl1
14:16:14 * SyntaxPolice thinks
14:16:24 <jemfinch> that's what I thought it was.
14:16:30 <SyntaxPolice> @type foldl1
14:16:31 <lambdabot> foldl1 :: (a -> a -> a) -> [a] -> a
14:17:05 <SyntaxPolice> @type foldl
14:17:06 <lambdabot> foldl :: (a -> b -> a) -> a -> [b] -> a
14:19:00 <jemfinch> yeah, that's right.
14:22:10 <jemfinch> hmm.
14:36:39 <jpapl> #k1ck looking for a 6on6 ET Now!!!
14:37:08 <Riastradh> ...?
14:37:42 <jpapl> did amsg on another network :( sorry
14:38:07 <SyntaxPolice> heh
14:38:20 <Riastradh> We'll have to behead you for this.
14:38:31 * SyntaxPolice has seen some _far more_ embarassing accidents with /msg
14:38:39 <Riastradh> If I were you, I'd start running.
14:38:47 <jpapl> :)
15:32:14 <shapr> TripleDES: back so soon?
15:32:29 <TripleDES> yep
15:32:34 <TripleDES> changing client only
15:32:37 <TripleDES> :)
15:33:53 <shapr> have any Haskell questions?
15:34:29 * shapr is being forward again
15:34:51 <TripleDES> Im not trying anything at this moment, cause I have some homework to do
15:35:01 <shapr> that's a good reason
15:35:05 <shapr> I haven't done my homework yet.
15:36:34 <TripleDES> I have to analyze an "ethical case" every week
15:36:55 <shapr> sounds like fun
15:37:00 <TripleDES> sometimes
15:37:21 <TripleDES> hi raver 
15:37:23 <TripleDES> :P
15:37:31 <raver> hi TripleDES
15:37:33 <raver> :-)
15:37:34 <shapr> hi raver, learning Haskell?
15:37:42 <raver> trying it..
15:37:45 <raver> :-)
15:37:47 <TripleDES> shapr: he's my housemate
15:37:49 <TripleDES> :)
15:38:05 <raver> it's funny, but also quite hard
15:42:01 <shapr> ah cool
15:42:10 <raver> yeah
15:42:42 <raver> i have some problems to pass a list of parameters to a program
15:42:46 <shapr> raver: have you used other programming languages before?
15:43:06 <raver> but i am searching at tutaorials an google
15:43:07 <raver> ,-)
15:43:09 <raver> well
15:43:26 <raver> C
15:43:36 <shapr> hey, that's a good start
15:43:49 <raver> and not many more...
15:43:55 <raver> I am not a programmer
15:43:58 <raver> ;-)
15:44:07 <shapr> well, if you've used C, and you're learing Haskell, you will be one soon.
15:44:34 <raver> i hope so
15:46:46 <shapr> if you want to pass program args in Haskell, check out System.GetOpt in GHC
15:48:19 <kosmikus> maybe the System.Environment.getArgs function is already sufficient for your purposes?
15:48:52 <raver> mmm...
15:49:18 <raver> i was looking them before
15:49:26 <shapr> hoi kosmikus
15:49:44 <raver> but now i am trying to implement a proper function to get the parameters
15:49:51 <raver> maybe it's not a right way
15:49:54 <raver> ;-)
15:50:05 <raver> thx kosmikus and shapr
15:53:24 <Lor> GetOpt is pretty nifty.
15:53:39 <Lor> It's the Right Interface for command line parsing.
15:55:01 <TripleDES> has GetOpt something like argc and argv ?
15:55:15 <Lor> Well, actually, I think one could do something really freaky with arrows for an even niftier interface.
15:55:25 <shapr> Lor: like what?
15:55:28 <Lor> tripledes, no, you pass those to it.
15:55:59 <TripleDES> aha, we need to know at least argc
15:56:02 <Lor> shapr, essentially, make an arrow program that looks like it reads arbitrary options as side effects.
15:56:09 <TripleDES> We'll try
15:56:10 <TripleDES> :)
15:56:20 <Lor> You get those with System.Environment.getArgs
15:56:31 <TripleDES> I saw them at System.hs
15:56:46 <Lor> I recommend using the hierarchical library structure, if you're using GHC.
15:57:02 <kosmikus> that's the same function
15:57:15 <Lor> shapr, I did a really freaky arrow thing with XML ages ago.
15:57:30 <TripleDES> I have a lot to read yet
15:57:32 <TripleDES> :))
15:57:34 <Lor> You wrote an XML parser using arrows, and the thing automatically generated a DTD from it.
15:59:57 <shapr> that sounds really cool
15:59:59 <shapr> did you publish the source?
16:00:09 <Riastradh> Lor, whoa.  Does this mean you actually understand arrows?
16:02:05 <Lor> I don't claim to grok the categorical theory behind them, but I do understand how one can make use of them.
16:02:21 <Riastradh> How?  How?!
16:02:39 <Riastradh> Oh.  I guess I could look at the source code to that thing.
16:06:15 <Lor> Um, sorry, I remembered wrong.
16:06:20 <Lor> I didn't use arrows there.
16:06:36 <Lor> An arrow interface could be added, but I probably decided that it wasn't convenient.
16:07:36 <Lor> Oops, wrong again, I did make one.
16:08:26 <Lor> I should try to clean it up. It's a nifty idea, really.
16:16:02 <TripleDES> n8
17:43:19 <raver> good night ;-)
19:18:08 <det> @yow
19:18:09 <lambdabot> Now that we're in LOVE, you can BUY this GOLDFISH for a 48% DISCOUNT.
20:08:16 <det> @yow
20:08:16 <lambdabot> If I am elected no one will ever have to do their laundry again!
20:08:22 <det> @yow
20:08:22 <lambdabot> WHOA!!  Ken and Barbie are having TOO MUCH FUN!!  It must
20:08:22 <lambdabot>  be the NEGATIVE IONS!!
20:08:28 <det> @yow
20:08:29 <lambdabot> You mean you don't want to watch WRESTLING from ATLANTA?
20:08:34 <det> @yow
20:08:34 <lambdabot> My Aunt MAUREEN was a military advisor to IKE & TINA TURNER!!
20:09:38 <lambdabot> I'm getting a bit sick of saying these yows, you know.
20:15:45 <det> *lambdabot* not enough privileges (~lambdabot@213-242-136-207.interact.se)
20:15:46 <det> :)
20:27:11 <SyntaxLaptop> Igloo: H.E. working for ya?
20:37:54 <det> @yow
20:38:01 <det> I think I killed lambdabot
20:38:12 <lambdabot> This PORCUPINE knows his ZIPCODE..  And he has ``VISA''!!
20:38:21 <det> he recovers!
20:38:26 <det> *lambdabot* out of fuel - use @resume to continue (~lambdabot@213-242-136-207.interact.se) 
20:39:12 <det> @eval sum (enumFrom 10)
20:39:50 <lambdabot> out of fuel - use @resume to continue
20:45:46 <det> @eval sum (enumFromTo 0 10000)
20:46:19 <lambdabot> out of fuel - use @resume to continue
20:46:25 <det> @eval sum (enumFromTo 0 10)
20:46:25 <lambdabot> 55
20:47:15 <det> @eval product (enumFromTo 0 100)
20:47:16 <lambdabot> 0
20:55:10 <lament> heh
23:27:14 <CowGirl> can someone help me for a moment?
23:32:06 <Cale> CowGirl: perhaps
23:32:17 <Cale> It's getting a bit late for me though
23:32:23 <Cale> what's up?
23:32:28 <CowGirl> just found the error, thanx anyway :)
23:32:47 <Cale> okay - I'm off to bed then - it's 2:31
