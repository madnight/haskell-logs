03:04:10 <shapr> @yow
03:04:11 <lambdabot> Leona, I want to CONFESS things to you..
03:04:11 <lambdabot>  I want to WRAP you in a SCARLET ROBE trimmed with POLYVINYL CHLORIDE..
03:04:11 <lambdabot>  I want to EMPTY your ASHTRAYS...
03:07:11 * aleator 's brain stalls on concurrency monad..
03:08:26 <aleator> Funny how haskell seemed so simple at first..
03:10:51 <aleator> Could anyone familiar with Claessens concurrency paper explain me how to get a value out of the 'Continuation' monad?
09:17:23 <steele> hi
09:20:31 <shapr> hi steele 
09:20:38 <shapr> how's code?
09:21:28 * shapr runs off to play computer games
09:22:46 <sophist> Wow, full channel.
09:22:55 <sophist> Last time I was here, there was almost no one on.
09:23:48 <Smerdyakov> That must have been a while ago.
09:23:51 <dennisb> that just shows that Haskell is the fastest growing language at the moment
09:24:03 <dennisb> (one could hope at least :-)
09:24:13 <sophist> hahah
09:24:32 <sophist> I wish there was a way of defining new functions at the hugs interpreter.
09:24:38 <sophist> Kind of sucks :)
09:24:53 <dennisb> then use ghci
09:25:29 <sophist> Whats that?
09:25:34 <Smerdyakov> Your complaint is really about making definitions, I think, not anything specific to functions.
09:26:05 <dennisb> ghci is nice, but hugs is leaner and meaner
09:26:09 <Smerdyakov> And all definitions are (potentially) mutually recursive in a Haskell program, so it's not entirely trivial to give you what you want.
09:26:20 <dennisb> sophist: an interpreter that comes with the compiler ghc
09:26:33 <sophist> oh
09:27:00 <sophist> Smerdyakov: I don't know, I'm just messing around.
09:27:27 <sophist> Its not that bad though, :edit helps.
09:28:05 <dennisb> sophist: I tend to keep one hugs window and one editor window open and just do :r when I have changed something
09:28:20 <dennisb> other run hugs inside emacs and are happy with that
09:29:33 <sophist> Thanks, :r is better.
09:45:22 <TonyC> lo
09:45:54 <sophist> hi
09:46:57 <TonyC> Cool - here are living people? Hi sophist. I'm learning hugs right now. Just wondered, if there are people on the net, that share the same suffer. :)
09:47:09 <sophist> Actually, thats me :)
09:47:15 <sophist> I just installed it last night.
09:47:57 <TonyC> great
10:02:37 <sophist> How is a the type for head?
10:03:09 <sophist> The article says "For example, the principal type of head is [a]->a; [b]->a, a->a, or even a are correct types, but too general..."
10:04:37 <Smerdyakov> Because a can be any type.
10:04:56 <sophist> But its a function.
10:06:32 <sophist> So is there anything that isn't of type a?
10:13:01 <aleator> () ?
10:15:00 <sophist> Hmm.
10:15:17 <dark> sophist: Yes... for example, IO () is not of type a.  It's of type m a.
10:15:59 <dark> Actually I might be wrong there :)  It's IO that's not of type a.
10:16:21 * dark tries to work the "kind" distinction into this.
10:17:30 <sophist> Okay, thanks.
10:36:01 <TonyC> Can somebody tell me, what i'm doin' wrong, please? Have just started. But can't find the mistake. Tried for nearls half an hour:
10:36:01 <TonyC> power 	:: Int -> Int -> Int
10:36:02 <TonyC> power m n | n == 1    = m
10:36:02 <TonyC>           | otherwise = power (m (n-1)) * m
10:38:14 <Riastradh> TonyC, what's with that outermost set of parentheses?
10:40:01 <TonyC> Riastradh: You mean: ->(m (n-1))<- ? Why?
10:40:36 <Riastradh> TonyC, do you know what those parentheses make the expression inside them mean?
10:41:25 <TonyC> No, actually not, sorry. *Hoping not to be very foolish*
10:41:42 <Riastradh> It means 'apply the function m to whatever n-1 returns.'
10:41:47 <Riastradh> But m is not a function: it's a number.
10:42:24 <TonyC> Thank you - But just (m n-1) didn't not work either.
10:43:22 <Riastradh> You removed the _innermost_ set of parentheses.
10:43:26 <Riastradh> I was talking about the _outermost_ set.
10:43:37 <sophist> How about: otherwise = (power m n-1) * m
10:44:11 <TonyC> guess i better get to know Simon Thompson bevore i ask again. mmh. i'll try it sophist. Still i have the feeling, Riastradh want's me to find out by myself. :)
10:44:13 <dennisb> sophist: that would be parsedas (power m n) - 1
10:44:27 <Riastradh> You still need the parentheses around n-1, though, because due to operator precedence and the fact that function application has the highest precedence, that would be like '(power m n) - 1'.
10:44:31 * Riastradh bahs at dennisb.
10:44:48 <dennisb> BHAAAA
10:44:54 <sophist> sheep
10:44:58 <sophist> :0
10:45:09 <rubix> TonyC, parentheses do not mean "function call". Parentheses means priority.
10:45:31 <TonyC> rubix: Thanks - how do you know i've learnt Java bevore? :)
10:45:39 <dennisb> yes, evaluate the thing inside parentheses first
10:45:51 <Riastradh> (yes, if you want to be pedantic, that (m (n-1)) means that whatever 'm (n-1)' is gets evaluated before the arguments, and that happens to be an application of m to n-1)
10:46:14 <andersca> hey dennisb
10:46:43 <dennisb> and you would probably get some error saying that m is not a function (usually written it is not of type a->b)
10:46:49 <TonyC> mmh, but (power m n) - 1 wouldn't do the job as well <- for me it seems pretty much like rubish.
10:46:55 <dennisb> andersca: hey hey with the ...
10:46:58 <TonyC> dennisb: right.
10:47:05 <Riastradh> TonyC, that's why you need parentheses around the n-1.
10:47:06 <TonyC> does not match ...
10:47:48 <Riastradh> 'power m n-1' parses as '(power m n) - 1'; 'power m (n-1) * m' parses as '(power m (n-1)) * m'.
10:47:54 <sophist> I just tried it---works for me now.
10:48:33 <TonyC> Riastradh: Cool, that does the trick - and i do know why now too. Thanks.
10:48:58 * Riastradh uses this as an opportunity to advocate s-expressions.
10:49:47 <TonyC> Mmh, what are s-expressions?
10:50:09 <dark> A perversity mainly indulged by lispers.
10:50:19 <Riastradh> 'Symbolic expressions.'  They're what Lisp uses as its syntax.
10:50:49 <Riastradh> Everything is parenthesized anyways, so you never have to deal with operator precedence or junk like that.
10:51:01 <TonyC> ohh, wow, you are talking in a way, that i get the feeling like i just had my first english lesson yesterday.
10:51:08 <dark> They're like XML with simpler syntax.
10:51:16 <dennisb> Riastradh: yea, we all love parentheses... why not use XML...
10:51:18 * dark grins evilly at Riastradh.
10:51:21 <sophist> TonyC: I suspect we're speaking with college professors :)
10:51:25 <Riastradh> No, XML is like s-expressions but with excessive verbosity and lots more buzzwords.
10:51:34 <Smerdyakov> No, Riastradh is 16 years old and lives by the creek.
10:51:39 <TonyC> sophist: Are you a professor?
10:51:44 <dennisb> dark: you ruined my use xml speach I was going to give :-)
10:51:51 <sophist> nope :)
10:51:54 <sophist> Smerdyakov: heheh
10:51:57 * sophist bad
10:52:06 <Smerdyakov> I'm a professor-in-training!
10:52:10 <Smerdyakov> But I wasn't in the conversation. ;)
10:52:18 <dark> XML also distinguishes between attributes and content, which s-expressions don't do.  Duels to the death have been observed about whether or not this is a feature.
10:52:23 <Riastradh> sophist, Smerdyakov's imagination just likes running wild.
10:52:31 <cm> http://blogs.gotdotnet.com/emeijer/PermaLink.aspx/f0bdf5c8-ec34-4dbb-b51e-6982a93be2e5 :)
10:52:36 <Riastradh> He's imagining me naked right now, typing at a computer next to a creek.
10:52:49 <Smerdyakov> Am I naked or am I imagining naked Riastradh?
10:53:03 * dennisb have just gone blind after seeing some disturbing pictures...
10:53:05 <Riastradh> Both, probably.
10:53:13 <dark> dennisb: Sorry, I just had to mention it :)
10:53:16 <Smerdyakov> What if I'm attacked by beavers?
10:53:28 <dark> Smerdyakov: They'd dam you.
10:53:53 <TonyC> However, i would like to do a little back-check. Just, if i would write power n-1 m (and would change the methode-head as well) i could get along without the parenthesis, right? 'cause 'power n-1 m' would be parsed to 'power (n-1) m' , wouldn't it?
10:53:57 * Riastradh knocks dark down with a loud moan.
10:54:17 <dark> TonyC: No, it would get parsed as (power n) - (1 m)
10:54:28 <dark> TonyC: Function application binds VERY tightly in haskell.
10:54:33 <Riastradh> Function application _always_ has the highest precedence.
10:54:54 <Riastradh> (see, you'd never have any silly problems with trying to remember precedence if you just used s-expressions!)
10:55:11 <dennisb> unless you use $ which is function application with the lowest precedence
10:55:12 <Smerdyakov> Quick. Someone say something technical. My mom is IM'ing me about her hair style. :(
10:55:13 <TonyC> But that can't be, because power would need two arguments - hugs should know that.
10:55:30 <Riastradh> So, how 'bout those comonadic arrow duals?
10:55:37 <dark> Aha, TonyC has invoked the currying lecture :)
10:55:43 <dark> This goes well with Smerdyakov's hairstyle.
10:55:59 <Riastradh> TonyC, the parser doesn't know that.
10:56:10 <dennisb> TonyC: that is checked during type inference, the number of argument stuff is part of the syntax
10:56:32 <TonyC> Riastradh: mmh - oh, i see dennisb, thanks. Mmh. Gotta remeber somehow.
10:56:44 <dark> TonyC: All functions in Haskell take arguments one at a time.
10:57:04 <TonyC> dark: I have invoked what? I hope it's nothing like the thing down in the mines, you know, 'speak friend ...'.
10:57:24 <dennisb> dark: hmm, yes, that's of course the right way to talk about it (/me is silence for a whole)
10:57:31 <dark> TonyC: I think an example like "add" is easier than power.  Suppose you have add :: Int -> Int -> Int and add x y = x + y
10:57:43 <TonyC> Smerdyakov: Well, however, nice to meet an prof. as well.
10:57:56 <sophist> power (-) n 1 m would work, I think
10:58:05 <Smerdyakov> TonyC, you see, I was saying that I am a graduate student. Not a professor. :)
10:58:14 <dennisb> sophist: nope
10:58:30 <Smerdyakov> I know we do have at least some lecturers here, though.
10:58:36 <dennisb> sophist: that is power given 4 arguments
10:58:59 * sophist stays quiet for a while.
10:59:02 <dennisb> sophist: power ((-) n 1) m would work
10:59:20 <dennisb> sophist: I tried that, didn't work.
10:59:32 <dennisb> staying quiet I mean
10:59:50 <sophist> I thought that the function (-) would bind more tighty to n and 1, than power binding to its arguments.
10:59:53 <TonyC> dennisb: Well thanks, still that wouldn't not be of any additional use, so i stick to my momentary solution.
11:00:13 <dark> TonyC: When you write (add 3 4), then because function application is left-associative, it's parsed as ((add 3) 4).  (add 3) returns a function that adds 3 to its argument.  Then you apply that to 4.
11:00:30 <dennisb> TonyC: yes, it wasn't intended to be a solution for you. I agree that (n-1) is nicer then ((-) n 1)
11:00:34 <dark> TonyC: You never really apply two arguments at once in Haskell, though of course the compiler usually optimizes it that way.
11:00:55 <dennisb> sophist: it's nothing strange to pass in functions as arguments to other functions (as you did with (-))
11:01:18 <dark> TonyC: Thus, (power n) is a function that raises its argument to the nth power.
11:01:21 <sophist> Okay :)
11:01:27 <dark> TonyC: Which is why the parser won't complain.
11:01:37 <dennisb> then you would of course get som error saying that power did not expect a function as the first argument
11:02:33 <TonyC> oki, another question, layout is important in haskell, isn't it? So, is there any difference, if i use space orr <tab>? Or does the interpreter sees it the same way i do? Like it is displayed on the screen?
11:02:56 <dark> TonyC: I think GHC will count tabs as 8 spaces.  But it's best to avoid them.
11:03:09 <TonyC> uih
11:03:16 <dark> I do, which is why I don't really know how it counts tabs :)
11:03:45 <dark> uih?  I guess that means you use some heretic setting for tab length :)
11:04:36 <sophist> heheh
11:04:47 <Riastradh> Tabs are evil.
11:04:53 <TonyC> well, i just means that i like tab pretty much, it is <in my opinion> the most effective way to arrany code the nice way.
11:05:09 <jasonw> sb goto -5
11:05:11 <jasonw> sb goto -5
11:05:12 <jasonw> sb goto -5
11:05:17 <jasonw> whoops, sorry.
11:05:29 <sophist> TonyC: THere are only like three compilers for haskell, if it works for your version then why not? :)
11:06:06 <sophist> I think some editors just put in spaces when you hit tab.
11:06:11 <TonyC> Well, doesn't look like i get any assistance on calling tabs a good thing, at least not in here. :) sophist: Right, i just give it a try.
11:06:36 <TonyC> sophist: Could question, hard and soft tabs. I probably could adjust that some where in uedit.
11:06:59 <sophist> I like tabs, but the tab character code does different things in different programs.
11:07:00 <Smerdyakov> TonyC, "could question"
11:07:00 <Smerdyakov> ?
11:07:31 <TonyC> aehm, i wanted to express: good question ;)
11:07:44 <dark> TonyC: Tabs are fine, but if you indent with tabs then you should only use tabs for indentation.  It goes wrong when you mix tabs and spaces, and don't use the one true tab length.
11:08:11 <dark> Ah, Haskell98 defines tab stops as 8 spaces.
11:09:30 <sophist> Whats the one true tab length? :)
11:13:12 * dark stares at sophist uncomprehendingly.
11:14:34 <sophist> heh
11:16:20 <sophist> I usually prefer 4 spaces for a tab.
11:16:24 <sophist> Sometimes 2
11:17:56 <Riastradh> Death to tabs!
11:18:16 <sophist> Don't tell me you program without tabs :)
11:18:40 <Riastradh> (progn (setq indent-tabs-mode nil) (untabify))!  (progn (setq indent-tabs-mode nil) (untabify))!
11:18:43 <sophist> Thats just---I don't know---nuts!
11:19:25 <sophist> You should launch war against the enter key while you're at it :)
11:20:53 <dark> sophist: He wasn't talking about the tab KEY :)
11:21:11 <dark> The tab key should indent to whatever your layout style dictates for the next line.
11:21:23 <Riastradh> And it should indent with spaces!
11:21:26 <dark> That could be 23 spaces or whatever.
11:21:32 <Riastradh> Death to tabs!
11:21:43 <sophist> We all know emacs is nice ;)
11:21:56 * dark uses nvi.
11:22:02 <Riastradh> Burn him!
11:22:06 <Igloo> I seem to have walked in on a multi-holy war
11:22:22 <dark> Igloo: We've had sexps vs. XML already.  Working on tabs now.  So that's only two.
11:22:22 * Riastradh takes out the holy hand grenade.
11:22:25 <dark> Oh, right, editors.
11:22:43 <sophist> hahah
11:22:51 <dark> I always forget that editors are a point of contention.  I never understood why people would want something other than nvi :)
11:23:11 <sophist> I could never get used to vi.
11:23:22 <dark> Except when editing partition tables, of course.  emacs is nice for that because it has hexl-mode.
11:24:00 <Riastradh> Scheme48 is very nice in Emacs.
11:24:11 <Igloo> What have you got against vim? Size?
11:24:39 <dark> Igloo: Yeah it's slower to load, and it does weird stuff with selections.
11:24:52 <Igloo> weird stuff?
11:25:20 <dark> If I search for something in vim, it seems to automatically go into a kind of "selected" mode that screws up the next command.
11:25:44 <dark> My experience with vim is limited to the times I wrestled with it on someone else's machine, of course :)
11:25:50 <Igloo> Ermmm, if highlight search is on it might /look/ selected, but shouldn't affect the next command
11:26:02 <Igloo> Perhaps they had some strange option enabled
11:26:02 <sophist> I have vim installed, but I use notepad for now.
11:31:15 <Cale> mmm... vim...
11:31:24 <TonyC> Well, another question. The Haskell Source-Code can be downloaded, or can't it? So, how would you compile it then?
11:32:22 <Cale> TonyC: you mean the source code for ghc or hugs?
11:32:40 <pimpbot5001> hi, does anyone know how to let C functions return values with -O turned on?
11:32:42 <TonyC> i think hugs.
11:33:02 <pimpbot5001> foreign import ccall readC :: Addr -> CInt -> CDouble
11:33:11 <pimpbot5001> that's my function, it works without -O
11:33:23 <Igloo> You want to include the header in the import spec
11:33:25 <Cale> iirc, hugs is written in C
11:33:33 <pimpbot5001> aha thanks!
11:33:44 * Igloo can't remember the syntax exactly
11:34:01 <Cale> you would unpack it and run make
11:34:08 <TonyC> Cale: Mmh, i would like to use it under BeOS. Wonder if that could be done without exact knowledge of the system. (mean, deep knowledge).
11:35:10 <Igloo> hugs should be easy enough, GHC would be rather more fun to get working
11:35:42 <Cale> if you grab http://cvs.haskell.org/Hugs/downloads/Nov2002/hugs98-Nov2002.tar.gz  and follow the instructions in Install, you should get a working hugs.
11:36:37 <TonyC> Cale: You mean in general or pointed to the BeOS?
11:36:38 <Cale> (provided that Be is posix-compliant enough)
11:37:11 <TonyC> well, that it what is said about it, that it is posix-compliant. And http://www.mail-archive.com/hugs-users@haskell.org/msg00113.html does look good, doesn't it?
11:37:52 <Cale> yep
12:14:01 <TonyC> coool, thanks Cale, a friend of mine just told me that it works fine under the BeOS
12:14:55 <Cale> I used to run BeOS -- is any work being done on it anymore?
12:16:40 <TonyC> Cale: Right. It is redone from the scratch. I was at begeistert and had a look at it. I was realy sceptic, but it is very interesting what has be done. Still there is that none-big-applications problem.
12:18:48 <TonyC> They did stupid things as well, they made the system nearly unusable by adding lot's of things so that the boot time was accutaly over 30s! But they've fixed that.
12:19:19 <Cale> The trick is to get someone to port GTK, then at least you'd get a large chunk of the linux apps.
12:19:41 <Cale> (if not expressed in the native UI)
12:26:50 <TonyC> mmh, don't know enough about the gtk
12:27:26 <TonyC> Cale: We shall do it a more complicate way. So, i tried. But i get a compile error. Do you have any clue why, no?
12:27:27 <TonyC> power	:: Int -> Int -> Int
12:27:27 <TonyC> power m	n 	| n == 0	= 1
12:27:27 <TonyC> 		| n == 1	= m
12:27:27 <TonyC> 		| mod m 2 == 0 	= power (power m (div n 2) 2)
12:28:02 <TonyC> <- that last line is not the way it should be, with the div that does not work, somehow.
12:29:03 <Igloo> It looks like you just have the last ) in the wrong place
12:29:15 <Igloo> The inner power has 3 arguments and the outer one only 1
12:29:16 <Cale> yeah
12:29:29 <Cale> power is of type Int -> Int -> Int
12:29:41 <dark> power m n = product (replicate m n)
12:32:38 <Cale> How does one get ghci to not care when main is not defined?
12:32:39 <TonyC> mmh, thank you that was the point. Still i don't get the righy result. Better think again about the code.
13:05:01 <TonyC> mmh, someone familiar to unix? I got the opinion to use the unix-commands under windows, like wget etc. Does anybody know, which company sells this programms for windows, no?
13:06:13 <jasonw> TonyC: have you looked into CygWin?
13:07:23 <TonyC> mmh, no, i just know that here at the university there is a folder called /unix with all programms inside wget.exe etc. And there is kind of a softlink to it (don't know the english word for systemvariable) But there is no link which company / group is responsible for those programms.
13:07:27 <dark> Many unix programs can be compiled for windows.
13:08:27 <dark> Ahh... most of them are free software.  I don't know of any company specificaly supporting their use under windows.  There used to be Cygnus, but it got bought by Red Hat, and was mainly focused on corporate customers anyway.
13:10:19 <TonyC> mmh, thanks, i will give http://www.cygwin.com/ a try, although i'm not sure it is the same - it will do the trick
13:11:16 <dark> And consider upgrading to unix :)
13:12:03 <dark> I hear that Knoppix is a good introduction.  I haven't tried it myself.
13:12:05 <TonyC> *g* no, if, then zeta i think
13:15:17 <TonyC> Mmh, i got a friend i a querry, he is involved in the new BeOS Version. He is complaining that hugs is much to old. It's from Nov. 2002 he keeps complaining. You don't have any good response for me to offer, have you?
13:17:00 <dark> How about "that's only one year old, stop complaining"?
13:17:08 <Cale> What's the problem with it being from Nov 2002?
13:17:29 <dark> "The new features added in 2003 would be too complicated for you anyway"
13:17:36 <Cale> heh
13:17:45 <TonyC> Can't tell - dark: That's a good one.
13:17:54 <cm> tell him to use ghc :p
13:18:03 <dark> Ah, but ghc5 or ghc6?
13:18:21 <TonyC> well, not sure if that compiles under BeOS
13:18:23 <Cale> If he's so obsessed with things being new, he'll want 6.
13:18:45 <TonyC> Mmh, can you tell me one good thing to use haskell for?
13:19:32 <dark> Other than bending the mind into new shapes?
13:19:37 <Cale> Writing programs? :)
13:19:42 <TonyC> Well, he is trying to compile it now, thank you :) Guss the one from dark did the trick ;)
13:20:13 <Smerdyakov> TonyC, think of something you'd use [Java,C++,whatever you like] for. Haskell is probably a better choice if you don't care if the program runs very fast.
13:22:16 <Cale> GHC compiled code runs rather fast though. Not C fast mind you, but it seems faster than Java.
13:23:13 <TonyC> Oh, i'm surprised, i thought haskell would be the fastest language available.
13:23:38 <Cale> It's faster to get things written in Haskell.
13:23:47 <Cale> (Or at least, I think so)
13:23:59 <TonyC> oki, i see
13:24:27 <dark> The things I like most about Haskell are: it's easy to change the design of a program you've already written, and it usually actually works once it compiles.
13:49:26 <sophist> Hey, is anyone awake?
13:49:41 <Riastradh> Yes.
13:49:53 <sophist> I have a question, if you don't mind.
13:49:59 <Riastradh> Ask away.
13:50:15 <sophist> data Point a = Pt a a
13:50:28 <sophist> Thats what I have in my source file.
13:50:46 <sophist> Main> :type Pt 2.0 3.0
13:50:47 <sophist> Pt 2.0 3.0 :: Fractional a => Point a 
13:50:57 <sophist> Thats what I type---where does the Fractional come from?
13:51:14 <Riastradh> 2.0 has the type 'Fractional a => a'.
13:51:21 <Riastradh> Same with 3.0.
13:51:24 <sophist> Whats => mean?
13:51:34 <Riastradh> It specifies the context.
13:52:03 <sophist> What does specifying the context mean?
13:52:03 <Riastradh> 'Fractional a => a' says that 'for all types a such that there is an instance of Fractional for a, the type a.'
13:52:28 <sophist> Okay.
13:55:40 <sophist> Main> :type Pt 2.0 3.0
13:55:41 <sophist> Pt 2.0 3.0 :: Fractional a => Point a 
13:55:41 <sophist> err
13:55:41 <sophist> Main> :type "Hello"
13:55:41 <sophist> "Hello" :: String 
13:55:52 <sophist> How come there is no => for a String?
13:56:05 <dark> The interpreter doesn't know whether 2.0 and 3.0 are supposed to be Float or Double or whatever, but it does know it has to be some sort of Fractional type.
13:56:10 <Igloo> It's left out if empty
13:56:35 <sophist> dark: I guess that makes sense.
13:56:40 <sophist> Empty, Igloo?
13:56:47 <Igloo> There is no context needed
13:56:59 <sophist> Why not?
13:57:13 <sophist> If I do :type 2.0, I get a context thingy.
13:57:21 <Igloo> Because there is nothing that can be any instance of a class
13:57:23 <sophist> But not :type "Hello"
13:57:24 <dark> Fractional isn't a type but a type class.
13:57:48 <dark> If you check Pt 2 3 you will probably get Integral a => Point a
13:58:14 <sophist> Main> :type "Hello"
13:58:14 <sophist> "Hello" :: String 
13:58:16 <sophist> grr
13:58:28 <sophist> Pt 2 3 :: Num a => Point a
13:59:09 <TonyC> Mmh, what ist wrong with: >> power (power m (div n 2) 2) << - the parenthesis again? Can't be.
13:59:39 <Darius> Why not?  That's what you had before.
13:59:58 <dark> sophist: This is more an issue of Haskell lexing than about the type system :)  The standard specifies that a token like 2 is some Integral type, a token like 2.0 is some Fractional type, and a token like "Hello" is exactly String, which is an alias for [Char].
14:00:18 <TonyC> well, it will do div n 2
14:00:34 <TonyC> then power m + <result of div n 2>
14:00:41 <Darius> sophist: what other languages are you familiar with?
14:00:49 <TonyC> then power <result of ex.> + 2 - no?
14:01:01 <Riastradh> TonyC, how many arguments are you curriedly applying the inner 'power' to?
14:01:22 <sophist> Darius: Hmm, BASIC, C, bits and pieces of other stuff.
14:01:32 <dark> sophist: If you ask the type of [2] it will say (Integral a) => [a], and if you ask the type of ['a'] it will say String.
14:02:06 <dark> I don't think I know how to explain it any further than "it's defined that way" :)
14:02:15 <Darius> It will say [Char]
14:02:24 <sophist> dark: I just don't see the essential difference yet.
14:02:47 <Darius> sophist:  Are you familiar with object-oriented programming?
14:02:49 <TonyC> Riastradh: oki, thanks, i got it - power (power m (bla)) 2 - otherwise it will be one argument to much.
14:02:50 <dark> Interesting, and it says Num instead of Integral for [2]
14:03:01 <sophist> Darius: Not really.
14:03:12 <dark> sophist: Do you know the types Int and Integer?
14:03:46 <Darius> Okay, well then it's hard to make an analogy.  Perhaps you should try Helium for now until you are more comfortable with Haskell or just ignore the type that Haskell infers.
14:04:02 <sophist> Dark: One is for machine integers?
14:07:20 <sophist> Okay, I think I know what the => means now.
14:12:28 <TonyC> mmh, i du not get it. I thought power >> m (div n 2) * power m (div n 2) << would be the same like >> power (power m (div n 2)) 2 << but it's not. For some reason.
14:25:31 <sophist> Wish I knew what that meant :)
14:26:21 <TonyC> well, thanks, the problem accutal <i just saw it now> one line above *ouch*
14:29:11 <TonyC> thanks a lot all of you - i konw got it finished :)
14:30:30 <dark> TonyC: You're being confusing because >> is a standard operator in Haskell :)
14:31:05 <TonyC> dark: lol, oki, i didn't know that ;)
14:31:13 <dark> sophist: Int is for integers in basically a 30-bit range (GHC makes it 32-bit), and Integer is for arbitrary-size integers.
14:31:59 <TonyC> so, i go home now, enjoy your weekend and cu.
14:32:08 <sophist> Bye TonyC.
14:33:36 <dark> sophist: Sometimes you have to give the compiler a bit of a nudge to make clear which one you mean :)
14:34:30 <Igloo> I thought the report only guarantees 29 bits
14:35:13 <sophist> dark: Okay :)
14:35:28 <dark> Igloo: 29 bits in each direction :)  I'm counting the sign bit.
14:35:47 <Igloo> Ah, good point  :-)
14:37:44 <dark> Hmm.  I just realized that my total food intake today was some yoghurt and two bars of chocolate.  I might have to do something about it before I go to sleep :)
14:38:04 <Igloo> Yeah, not enough chocolate
14:42:29 <dark> I could fry some garlic in garlic oil and add garlic.
14:49:49 <Smerdyakov> dark, TOFU!
14:54:34 <dark> Today is some sort of holiday here, all the stores are closed and I have to make do with what I can scrounge from the cupboards :)
14:55:21 <Smerdyakov> Nov 1! Nov 1! Nov 1!
14:56:55 * Igloo looks blank
17:53:33 <jasonw> Evening shrimpx.
17:54:49 <keverets> @yow
17:54:50 <lambdabot> Jesus is my POSTMASTER GENERAL..
18:23:52 <shrimpx> hi
18:24:12 <shrimpx> let's hope this freenode server doesn't suck
18:24:46 <dark> Famous last words.  I've been hearing a lot of those today.
