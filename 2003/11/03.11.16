01:45:33 <jjshanks> morning
01:46:01 <midas> anybody alive in here?
01:46:39 <ibid> no
01:46:46 <andersca> not at all
01:46:49 <midas> hehj
01:54:31 <ayrnieu> midas - why do you ask?
01:54:38 <ayrnieu> midas - also, o/~ brains o/~
01:58:20 <midas> oh i was just wondering
01:58:44 <midas> i am just learning haskell so i wanted to see if anyone was awake at this hour in case i had a question
01:58:59 <ayrnieu> midas - I'd make the sound that the aliens made in Invasion of the Body Snatchers, to point out the lone living creature in this channel, but I don't know how to render it in ASCII.
01:59:01 <ibid> midas: at this hour? it's noon :)
01:59:10 <midas> ah well its 4am here
01:59:33 <ibid> never assume everybody on irc lives in the same or in similar timezone than you :)
01:59:58 <midas> oh i figured some of you don't
02:00:31 <ibid> i'd assume many of us don't :»
02:00:44 <midas> heh probably
02:01:37 <ibid> (well, i very often am asleep at noon on sundays:)
02:01:46 <midas> so actually i do have a question
02:02:05 <ayrnieu> midas - you only get one a day, and you just used it.
02:02:18 <midas> heh
02:03:03 <midas> i am just trying to write a simple list function but it keeps giving me an error with empty list input, "cannot find show function for:" probably very simple but i cant figure it out
02:03:27 <ibid> you have to show us the source (if its longer than a couple of lines, url please)
02:03:36 <ibid> and the error message in full
02:03:54 <midas> func1 :: [a] -> [a] func1 [] = [] func1 (x:xs) = [x]
02:03:57 <ibid> (sometimes even the error message alone is sufficient, if it's copied verbatim)
02:04:00 <ayrnieu> midas - clever, the way you asked a question without asking a question.
02:04:10 <midas> ERROR - Cannot find "show" function for: *** Expression : func1 [] *** Of type    : [a]
02:04:25 <ibid> midas: and what did you do to get that error?
02:04:28 <midas> ayrnieu : ;)
02:04:36 <midas> func1 []
02:04:52 <Lor> It doesn't know what kind of a list you want as a result.
02:04:58 <ayrnieu> func1 (x:xs) = [x]
02:04:59 <ibid> ah yes
02:05:02 <ayrnieu> func1 [] = []
02:05:05 <ozone> midas: that's not a problem with your code
02:05:10 <Lor> Most empty lists are rendered as [], but if it was a list of characters, it'd be shown as "".
02:05:19 <Lor> So you have to tell it what it is.
02:05:21 <ozone> midas: hugs is having trouble working out what the type of list [] is
02:05:40 <ozone> midas: so it doesn't know how to "show" it (print it out on the screen)
02:06:06 <midas> hmm ok makes sense, but how do i fix it?
02:06:10 <ayrnieu> How is this not a bug in his code?  Is (x:xs) supposed to handle [] ?
02:06:10 <ozone> midas: if you use that code in another function, it will work OK
02:06:29 <ibid> ayrnieu: he has a separate case for [], read your irc :)
02:06:37 <ayrnieu> Oh.  Code-formatting error.
02:06:46 <Lor> midas, what is there to fix? 
02:07:11 <Lor> If you want it to show you a definite empty list, give it a type: func1 [] :: [Int]
02:07:12 <ibid> midas: for now, use func1 ([] :: [Int]), for example
02:07:20 * ayrnieu suggests at least a semicolon to help parsing.
02:08:07 <ayrnieu> midas - note that Lor and ibid's examples define the type for different things, but inference works them out similarly to your benefit.
02:08:39 <midas> hmmm ok
02:11:06 <ayrnieu> also, after never managing to compile GHC on Linux, I've just compiled it through /usr/ports on OpenBSD.  yay!
02:27:51 <TripleDES> morning
02:43:20 <Jad> good morning
02:43:28 <Jad> TripleDES wer did you get your ipv6 from ?
02:43:48 <Jad> freenet ?
02:46:37 <TripleDES> ops
02:46:39 <TripleDES> :)
03:03:19 <shapr> yeehaa
03:03:28 <maihem> happy?
03:05:10 <shapr> maihem: of course!
03:05:14 <shapr> I have CODE!
03:05:19 <ibid> happy is a fine tool :)
03:05:25 <shapr> ibid: haha!
03:05:31 <ibid> but it is
03:05:36 <shapr> very punny
03:05:59 <shapr> ayrnieu: mr cleverdra sir, what's been going on?
03:06:19 <shapr> hrm...
03:06:23 <shapr> do I write code or watch DS9?
03:06:41 <maihem> DS9!!!
03:07:06 <shapr> ok, I agree...
03:07:09 * shapr disappears
03:07:14 <maihem> what country, and if UK, which channel? Oh wait, I don't have a TV
03:08:05 * maihem sobs quitely onto his keyboard
03:09:55 <ibid> i believe shapr is in sweden nowadays
04:22:26 <shapr> yeehaa
04:22:33 <Heffalump> hmm?
04:22:38 <shapr> just being bouncy
04:22:41 <shapr> hello Heffalump! ltns!
04:22:46 <shapr> what's going on?
04:23:00 <Heffalump> stuff :-)
04:23:16 <shapr> anything nifty?
04:23:22 <Heffalump> naah
04:25:35 <shapr> hoi blitznl 
04:25:41 <blitznl> goddag shapr
04:25:58 <shapr> what's goin on?
04:26:06 <blitznl> just cruisin'
04:26:41 * shapr cruzs
04:29:53 <blitznl> shapr: I have to give a small talk on functional programming using the C++ FC++ library. And I am planning to do some programming with it today..
04:50:30 <shapr> hi Arnia 
04:50:39 <shapr> does anyone have a basic demo of Control.Concurrent?
04:50:47 <shapr> I'm looking for something that would fit into a tutorial...
04:52:28 <shapr> hej Marvin-- 
04:52:38 <Marvin--> hejhej
04:52:44 <shapr> would you happen to have any really basic code demos of Control.Concurrent for tutorial purposes?
04:57:50 <Marvin--> can't say I do
04:58:12 <phubuh> is there a sleep somewhere in GHC?
04:58:12 <Marvin--> I have Data.Generics stuff though, which I'm fiercely proud of ;)
04:58:20 <Lunar^> shapr: A simple timeout is nice I think
04:58:24 <Lunar^> phubuh: threadDelay
04:58:27 <phubuh> ah
04:58:44 <Lunar^> phubuh: Int -> IO () if I remember well... in microseconds
04:59:14 <Marvin--> isn't threadDelay that *horrible* function that... no, wait, that's threadWaitRead/Write
04:59:15 <Marvin--> never mind me
04:59:44 <shapr> Marvin--: quick, write a tutorial, I have no clue about Data.Generics
04:59:46 <shapr> :-)
04:59:53 <andersca> what is Data.Generics?
05:00:17 <Marvin--> andersca: have you read the Scrap Your Boilerplate paper?
05:00:42 <Lunar^> Marvin--: where is it ?
05:00:50 <Marvin--> google, I guess ;)
05:01:01 <Marvin--> you expect me to remember such things when there's google? :)
05:01:47 <shapr> Lunar^: a simple timeout?
05:02:04 <Marvin--> basically, Data.Generics uses type-safe casts to implement generic datatype traversal
05:02:35 <Marvin--> and since there's TH, the 'Typeable' and 'Data' classes can be derived for your types automagically and everything is good with the world
05:03:39 <Marvin--> I use it to do funky stuff to ASTs in my project
05:03:51 <andersca> aah
05:03:53 <andersca> yeah I've read that
05:04:01 <Lunar^> shapr: do mainId <- myThreadId ; killerId <- forkIO (do thereadDelay 100000 ; killThread mainId) ; actionWhichNeedsTimeout ; killThread killerId
05:04:12 <Marvin--> Data.Generics is based on that paper but uses slightly different names
05:06:35 <andersca> is there a function that takes a list and returs it but without the last element?
05:06:43 <shapr> init
05:06:48 <andersca> thanks
05:10:14 <Lunar^> Marvin--: In what case are you using Generics ?
05:11:46 <Marvin--> Lunar^: for lots of simple transformations, I have types for declarations, patterns, expressions et.c. all recursively cross-linked of course, so 'everywhere' is a godsend
05:12:17 <Lunar^> Marvin--: language implementation ?
05:12:52 <Marvin--> Lunar^: encoding haskell programs in first order logic :)
05:13:57 <Lunar^> Marvin--: nice
05:14:09 <Marvin--> Lunar^: bleedin' complicated more like :/
05:16:12 <phubuh> shapr, how about http://www.phubuh.org/~phubuh/concurrent.hs?
05:18:52 <Lunar^> phubuh: nice
05:19:08 <Lunar^> phubuh: ... return . (+) 1 ?
05:20:58 <Lunar^> phubuh: using "id" confuses Kate syntax highlighting... maybe it would be the same for readers ?
05:21:14 <phubuh> Ooh, doh!
05:22:27 <shapr> phubuh: that's spiffy
05:23:22 <shapr> is there already a section on HaWiki for tutorials?
05:24:05 <phubuh> shapr, refresh it :-)
05:25:44 <phubuh> It being concurrent.hs, not the tutorial section
05:26:49 <shapr> nifty
05:27:20 <shapr> man, I gotta ask for enscript highlighting, it would make this easier
05:27:32 <shapr> then we stick this code inline into the page and it would have pretty colors
05:27:33 <phubuh> Thanks for making me learn Control.Concurrent! :-)
05:27:35 <Marvin--> I wonder if there are five-player "chess clocks"
05:27:48 <shapr> heh
05:27:54 <shapr> phubuh: that's all the time it took you to learn it?
05:28:08 <Marvin--> we played a game of GoT the board game yesterday and after four hours we had to abort - halfway through
05:32:26 <phubuh> shapr, well, I just learned the stuff I needed to make that example :)
05:33:08 <shapr> heh
05:33:14 <shapr> got any more examples? :_)
05:33:20 * shapr boings
05:33:26 * shapr reads the Concurrent paper
05:34:19 <phubuh> writeList2Chan :: Chan a -> [a] -> IO ()
05:34:25 <phubuh> That name makes me cringe :(
05:35:12 <shapr> ?
05:35:24 <phubuh> Why not writeListToChan?
05:35:35 <Marvin--> gotta be l33t
05:36:53 <ham[zzz]_> shapr: have you had a look at that casl thingy?
05:37:36 <shapr> er, no?
05:37:53 <shapr> I got distracted by Haskell again...
05:38:13 <ham[zzz]_> shapr: hehe :)
05:38:58 <shapr> looks like a logic language at first glance
05:40:22 <ham[zzz]_> shapr: as far as i have understood it you can do nearly anything with it its like flex or so though a bit more mathlike
05:41:17 <shapr> have you tried to write something with it?
05:42:05 <ham[zzz]_> shapr: just got home :) i havent seen any good editor also yet so ill have to try ouyt some stuff
05:44:13 <shapr> http://www.haskell.org/hawiki/ConcurrentTutorial
05:44:20 <shapr> microscopic so far...
05:46:19 <phubuh> Neat :-)
05:49:11 <shapr> feel free to write stuff into that page
05:49:17 <phubuh> I am!
05:49:27 <shapr> heh, ok
05:49:36 <shapr> I just did an edit, so you may have to reload
05:49:42 <phubuh> oh, oops
05:49:51 <shapr> nothing big, you can overwrite it
05:50:20 <shapr> how to approach this? write Haskell analogues of semaphore, lock, etc that people normally use in imperative langs?
05:50:41 <phubuh> Control.Concurrent.QSem[N] already has semaphores :-)
05:51:20 <shapr> so, it'll be easy to write short demos then
05:53:10 <shapr> the one second delay thingy is nice, it lets you put a human into the loop
05:58:00 <shapr> phubuh: what about showing the mvar being overflowed by pushing a number in once a second?
05:58:10 <shapr> and then use a cvar to buffer instead
05:58:15 <shapr> does that seem like a logical progression?
05:58:54 * shapr tries it
05:59:19 <phubuh> cvar?
05:59:49 <shapr> er, Chan :-)
06:00:13 <shapr> a CVar is a single value Chan
06:00:22 <phubuh> oh, ah!
06:12:15 <shapr> whoops
06:12:23 <shapr> It took you [1,1,1Interrupted.
06:12:38 <phubuh> hmm :)
06:12:39 <shapr> that's what I get from trying to naively hack in channel showing...
06:14:12 <shapr> I need to recurse on readChan and isEmptyChan I think
06:14:24 <shapr> hej igen
06:14:33 <Marvin--> huh
06:14:35 <Marvin--> xchat must've died
06:14:37 <Marvin--> odd
06:14:44 <shapr> blame lambdabot 
06:16:46 <Marvin--> lambdabot: It's all your fault!
06:16:47 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
06:16:54 <Marvin--> that'd teach 'em
06:16:57 * shapr snickeers
06:17:04 <andersca> @blame lambdabot
06:17:04 <lambdabot> Sorry, I don't know the command "blame", try "lambdabot: @listcommands"
06:20:56 <Marvin--> we had a 'blame' emote on our mud
06:22:19 <phubuh> is there a CPS if/else in the standard library?
06:22:33 <phubuh> err, why do I want that
06:22:49 <phubuh> I don't!
06:26:04 * Marvin-- boggles at his code
06:26:10 <Marvin--> now I must've done something really stupid
06:26:22 <shapr> I'm thinking the same thing about my own code
06:26:28 <shapr> getAllChan chan = do status <- isEmptyChan chan
06:26:28 <shapr>                      if status then readChan chan : getAllChan chan else return []
06:26:36 <shapr> I know this should be obvious...
06:26:51 <Marvin--> I have this function that ends with   foo (e1 :=== e2) = ... ; foo e = error (show e)
06:27:03 <Marvin--> and I get an error with an expression with a :=== at top level...
06:27:17 <phubuh> shapr, think about what status hold :-)
06:27:33 <phubuh> holds*
06:27:41 <shapr> it holds a Bool...
06:27:51 <Marvin--> yeah, but when is it True and when is it False?
06:28:10 <shapr> oh
06:28:11 <shapr> duh
06:28:13 <shapr> :-)
06:28:14 <phubuh> hee hee
06:28:21 <Marvin--> now fix my problem :/
06:28:36 <shapr> um
06:30:09 <Marvin--> argh, never mind
06:30:18 * Marvin-- echoes that 'duh'
06:30:38 <Marvin--> never use the same error message in several files
06:30:42 <shapr> aha
06:30:48 <Marvin--> repeat after me children, never use the same error message in several files
06:30:54 <shapr> never use the...
06:31:48 * Marvin-- greps for "Dang" in his files
06:32:02 <Marvin--> there, uniqified error messages ;)
06:32:26 * shapr grins
06:33:57 <Marvin--> ++equal(nm1,app(app(data_Tuple2,app(data_Succ,data_Zero)),app(data_Succ,app(data_Succ,data_Zero))))
06:34:02 <Marvin--> good thing this ain't verbose
06:34:25 <shapr> looks scary to me
06:34:27 <shapr> hi isomer 
06:34:49 <Marvin--> it says nm1 = (1, 2) ;)
06:46:00 <esap> Hmm.. what happens, if you take fixed point of a contravariant functor?
06:46:18 <isomer> hey shapr
06:46:22 <isomer> what's shakin?
06:46:46 <isomer> er...tell me in a sec. gotta restart
06:49:15 * Marvin-- boggles again
06:49:43 <isomer> he again
06:49:46 <isomer> hi again
06:51:33 * Lor summons kosmikus.
06:59:23 <Lor> Is there some other environment besides verbatim, where newlines would be treated as linebreaks?
06:59:32 <Lor> In latex, that is.
07:03:14 <Marvin--> wow, that was a nasty li'l bug
07:04:19 <andersca> bugs in haskell programs? do they exist?
07:04:28 <Marvin--> oh yes
07:05:30 <ibid> Lor: you could make eol active, perhaps :)
07:06:36 <Lor> Eh?
07:06:51 * Lor doesn't really understand latex very deeply.
07:07:20 <ibid> yeah, that's a deep hack :)
07:07:50 <ibid> "make a character active" means making that character to stand alone as a command name
07:07:53 <ibid> stand by itself
07:09:40 <Lor> Anyone wouldn't happen to have an example of a two-player game whose mixed nash equilibria are non-trivial to find?
07:10:30 <Lor> I just implemented (in Haskell) an algorithm for finding approximate solutions, and I need to test it on something.
07:11:06 <esap> what is a mixed nash equilibria :-)
07:11:12 <esap> ?
07:11:31 <Lor> It's something they do in game theory.
07:11:48 <Lor> Essentially, a balance point where no one can gain more by choosing otherwise.
07:12:24 <esap> hmm.. how about Go?
07:12:52 <Lor> Err. It is pretty hard to estimate the reward of a single move in Go.
07:13:22 <esap> yes :-)
07:16:13 * esap doesn't know much about game theory, so don't believe anything I say about it.
07:16:35 <Lor> I don't know either. If I did, I'd also know some good example games.
07:17:29 <rubix> othello ?
07:18:31 <Lor> Nonono, those are altogether different kinds of games.
07:18:57 <Lor> In game theory, at the simplest level, a "game" consists of just one move by each player.
07:19:17 <Lor> Then for each combination of moves there is a defined payoff for each player.
07:19:36 <Lor> For instance, rock-paper-scissors is a game in this sense.
07:20:04 <rubix> I see. Each player does not know tha other player's move
07:20:17 <Lor> Well, it depends.
07:20:54 <Lor> Each player can usually suspect that the other player is going to choose the most beneficial strategy to him.
07:21:10 <Lor> Of course, each player knows thath the other players know this.
07:21:29 <rubix> but they cannot know anything better that that...
07:22:53 <rubix> so, if you need example games, why don't you just pick some random values for the payoff function ?
07:23:09 <Lor> It's not cool. :)
07:24:01 <Lor> I'd like something that has a nice intuitive interpretation.
07:39:08 <esap> hmm.. what was the name of the 'unsafe' version of pointer equality testing?
07:39:33 <esap> ... in GHC?
07:43:30 <Lor> reallyUnsafePtrEquality#, apparently.
07:44:08 <Lor> Why?
07:44:41 <esap> oh, that's why it wasn't in the index at 'u'. Well I'm wondering how I could write equality tests for coalgebraic data types.
07:45:18 <ibid> what's a coalgebraic data type?
07:46:11 <esap> well like [1..] is one. A data type that loops indefinitely.
07:46:25 <ibid> hmm
07:46:31 <Lor> [1..] is a term, not a type.
07:46:59 <ibid> i had an idea for that, but i'll need to investigate it further before talking about it
07:47:35 <esap> no I mean if list type were limited to such coalgebraic types [which it's not], then [1..] would be an instance of such type.
07:47:52 <esap> I think basically it's a type whose every projection function always succeeds.
07:50:17 <esap> Here'a another example: data Seq a = Seq a (Seq a)
07:51:33 <Lor> Right, an infinite stream.
07:51:58 <esap> yes. You can define much of OO as coalgebraic data types.
07:53:08 <Lor> How should the haskell report be referred to? Anyone have a bibtex entry?
07:53:46 <esap> try citeseer.
07:54:14 <Heffalump> @proceedings{haskell98report,
07:54:14 <Heffalump> title = "The {Haskell 98} Report",
07:54:14 <Heffalump> note = "Available from URL: \url{http://www.haskell.org/definition/}",
07:54:14 <Heffalump> editor = "Peyton Jones, S. L. and Hughes, J.",
07:54:14 <Heffalump> year = 1999}
07:54:14 <lambdabot> Sorry, I don't know the command "proceedings{haskell98report,", try "lambdabot: @listcommands"
07:54:26 <Heffalump> is what I used, but now it's out as a book it could be done better
07:58:32 <Lor> Guess I could refer to the JFP issue since I actually have that.
08:00:50 <Lor> Hm, wonder why they didn't use lhs2tex in the print version. All code is printed in boring typewriter.
08:02:03 <Heffalump> cos that'd have taken a lot of time to tweak, I suspect
08:03:20 <ibid> Lor: i'd refer either to the issue or the book
08:04:21 <ibid> or to both
08:04:58 <Lor> If they make a hardback print version that costs £35, it's _worth_ some tweaking.
08:06:25 <Igloo> You think they'd sell enough extra copies to cover the costs of doing so?
08:06:57 <Igloo> It would be a bit strange to have typewriter and pretty-printed stuff in the same book, anyway, and you ened the former for at least the syntax stuff
08:07:05 <ibid> i used this for my master diss: http://www.kaijanaho.info/tmp/foo
08:07:12 <Lor> Not really, but what's the point of printing it if you don't make full use of the print media?
08:08:10 <Igloo> It's no less useful, just a little less pretty
08:10:14 <Lor> ibid, did you have some nasty evil hack to make newlines render as newlines?
08:10:38 <ibid> Lor: not readily available
08:13:37 <Lor> When I refer to some bunch of folks as "Stetson et al", should "et al" be italicized or not?
08:13:59 <phubuh> italicized.
08:14:01 <ibid> if you italicize everything in latin, then yes :)
08:14:23 <ibid> and you probably need a period after al, it's short for alia
08:14:25 <phubuh> I suppose if your paper is in Latin, it shouldn't be :-)
08:14:27 <ibid> (iirc)
08:14:41 <ibid> some people do not italicize latin words in english
08:15:17 <ibid> Lor: what's your subject, and where are you submitting? :) (or is this a dissertation?)
08:15:18 <Lor> So, "Stetson {\em et al.}'s algorithm" ?
08:15:27 <Darius> esap: A datatype where every projection succeeds may be a good way to describe coalgebraic datatypes, but it doesn't require it to be infinite.
08:15:34 <ibid> Stetson \emph{et al.} or \emph{et alia}
08:15:49 <Lor> Nah, just a tiny school project.
08:15:57 <ibid> ah
08:16:04 <ibid> Lor: hmm?
08:16:27 <Lor> I went on a game theory course and don't understand anything about it, really.
08:16:32 <ibid> heh
08:16:41 <ibid> that's a good reason
08:17:34 <Lor> We have to do a five- to ten-page paper on something related to the subject, and I decided to implement an algorithm in Haskell.
08:19:59 <ibid> course projects are good
08:20:49 <ibid> i should, however, not abstain from holding a closing seminar even if some people claim they will not attend my course if it has a closing seminar
08:20:49 <Lor> Well yeah, but they just take so much time... I wanna work on my thesis!
08:21:16 <Lor> What's a closing seminar?
08:21:54 <ibid> a day where everybody presents their work to others
08:22:12 <Lor> Ah, right.
08:23:01 <ibid> i had one in my popl course last year
08:54:10 <Lor> Gaah. Done.
09:00:24 <shapr> @yow
09:00:25 <lambdabot> ..  someone in DAYTON, Ohio is selling USED CARPETS to a SERBO-CROATIAN
09:00:52 <shapr> hi dak
09:01:00 <shapr> how's code?
09:01:02 <dak> halo~
09:01:07 <shapr> vrfy dak
09:02:12 <shapr> dak: learning Haskell?
09:04:26 <dak> shapr: ^^; no~
09:04:33 <dak> shapr: i learning sml
09:05:17 <dak> shapr: but I interested in Haskell
09:31:36 <shapr> Haskell is neat
09:31:39 <shapr> so is SML
09:34:45 <shapr> hi elmex 
09:35:18 <elmex> hu
09:35:27 <shapr> wassup?
09:35:52 <Heffalump> Haskell is neater :-)
09:36:09 <shapr> I agree
09:44:34 <shapr> andrew!
09:44:41 <shapr> nice to meet you in real time.
09:45:00 <shapr> hi, I'm Shae Erisson.
09:45:14 <andrewc> ah - hi!
09:45:33 <andrewc> i'm trying this thing out to see if i learn something.
09:45:39 <shapr> IRC?
09:45:56 <shapr> you could learn how to waste time at amazing speeds.
09:46:14 <shapr> actually, smart stuff is often discussed on this channel.
09:46:46 <shapr> what have you been working on lately?
09:46:47 <andrewc> yes.  did you enjoy the conference (didn't we swap emails about the icfp?)
09:46:54 <shapr> yes, we did swap emails about that.
09:47:09 <shapr> I had lots of fun at the conference, I got to meet many people from this channel.
09:47:10 <Slashdog> hello
09:47:14 <shapr> hi Slashdog 
09:47:18 <Slashdog> hi shapr
09:47:29 <Slashdog> is there any simple way to control the way you print doubles
09:47:31 <andrewc> i've been starting a new job, so doing very little interesting.  you?
09:47:37 <shapr> I got to meet Igloo, Heffalump, Lor, SyntaxPolice, blackdog, and several others
09:47:55 <andrewc> looks like i chose a boring name!
09:48:03 <shapr> well, if it's a name you like...
09:48:30 <shapr> Slashdog: you could make a custom showDouble function
09:48:46 <Slashdog> yes I know, I'm asking if there is one already ;)
09:49:04 <shapr> I'm relatively sure that Doubles are an instance of Show
09:49:06 <Slashdog> something that works for fractionals, takes an argument (format) and outputs a string
09:49:09 <Heffalump> I don't know of one
09:49:28 <Heffalump> Double will certainly be an instance of Show, but that's not customisable
09:49:31 <Slashdog> shapr: yeap but show doesn't take formating arguments
09:49:33 <shapr> andrewc: I'm idly working on a Control.Concurrent tutorial, mostly because I don't know Concurrent that well.
09:49:41 <Slashdog> Heffalump: exactly :-/
09:49:44 <Darius> Slashdog: Look in the Numeric module
09:49:49 <Slashdog> k Darius
09:50:09 <Slashdog> I can make my own but I would like to reeinvent the whell
09:50:14 <Slashdog> wheel
09:50:15 <Lor> Hm, isn't there a printf for haskell?
09:50:19 <andrewc> main :: IO ()
09:50:19 <andrewc> main = do putStrLn "starting...";
09:50:19 <andrewc>           print brightstats;
09:50:19 <andrewc>           print (nbr br1, nbr br2, nbr $ br3 * 0.99, nbr $ br3 * 1.01)
09:50:19 <andrewc>           print depthstats;
09:50:19 <andrewc>           print (ndp dp1, ndp dp2, ndp $ dp3 * 0.99, ndp $ dp3 * 1.01)
09:50:21 <andrewc>           print n;
09:50:23 <andrewc>           ppm frame (nx, nx) "rs-out.ppm" img
09:50:26 <Lor> The typing mechanism for doing that is already well-known from ML.
09:50:26 <andrewc> --          ppmAlias frame (nx, nx) "rs-out.ppm" img
09:50:27 <andrewc> http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Printf/ ?
09:50:41 <andrewc> oops.  only meant to paste the link.  not used to this!
09:50:44 <shapr> andrewc: I'm sure you're immune to my sales pitch, since you've written Pancito, but maybe lambdabot is new to you
09:51:11 <shapr> @yow
09:51:12 <Lor> Ah, TH-based.
09:51:12 <lambdabot> I'm ZIPPY!!  Are we having FUN yet??
09:51:17 <andrewc> pancito isn't very advanced - i'm currently sitting here trying to tidy it up.
09:51:19 <Lor> It can be done even without.
09:51:28 <Slashdog> brb
09:51:29 <andrewc> it doesn't have any polymorphic code even!
09:51:41 <shapr> I think both Igloo and seafood were working on Pan derivatives recently.
09:52:11 <shapr> so, what prompted you to check out IRC?
09:52:18 <andrewc> the communities report mentioned something that looks intreesting too (maybe that's them)
09:52:34 <andrewc> i saw the link on hawiki.
09:52:45 <shapr> oh, neat
09:52:49 <andrewc> how do i find out what lambdabot can do?
09:52:58 <shapr> @listmodules
09:52:59 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
09:53:06 <shapr> @listcommands dynamic
09:53:06 <lambdabot> Module dynamic provides the following commands: ["dynamic-load","dynamic-unload","dynamic-reload"]
09:53:14 <shapr> lambdabot still needs lots of work
09:53:25 <andrewc> is there a way to do that "in private" without appearing on everyone's sceen?
09:53:25 <andersca> shapr: dude!
09:53:35 <andersca> shapr: can't you add a pizza queuer now that you know how forkIO works :)
09:53:35 <shapr> andersca: ja?
09:53:40 <shapr> andrewc: sure, /msg works too
09:53:44 <shapr> andersca: oh right! good idea!
09:53:59 <Riastradh> Whoa.  Does this mean I'll be able to order pizza through lambdabot?
09:54:11 <Lor> andrewc, what irc cliend do you use?
09:54:20 <shapr> andrewc: most irc clients have /query which allows you open a separate window/buffer/whatever that is a series of private messages
09:54:34 <shapr> nah, just means lambdabot will have a timer 
09:54:47 <andrewc> err,  virc at the moment (i'm using my laptop, and linux is only half installed..)
09:54:55 <shapr> andersca once asked for a pizza timer so he could chat on irc without having to worry about burnt pizza
09:55:03 <Lor> Hm, a funny typo, that. On my keyboard, d is two keys away from t, so it couldn't have been a motoric error.
09:55:16 <Lor> So presumably the error happened somewhere at a linguistic level.
09:55:27 <shapr> suomeksi! yay!
09:56:10 <shapr> I wonder if there is a global pizza ordering service
09:57:17 <shapr> andrewc: the latest sources for lambdabot are available in the darcs repo at http://www.ScannedInAvian.org/repos/hlibs/
09:58:52 <andrewc> you know that link doesn't work from the wiki?
09:58:59 <shapr> it doesn't?
09:59:02 <shapr> what link?
09:59:19 <andrewc> hang on and i'll find it.  i was trying to follow it yesterday
09:59:26 <shapr> ok
09:59:57 <shapr> oh I see
10:00:02 <shapr> that's very strange
10:00:11 <andrewc> http://www.haskell.org/hawiki/LambdaBot
10:00:23 <andrewc> ah - yes.  was sending me to localhost at one point.
10:00:31 <shapr> huh, I wonder what happened
10:00:45 <shapr> I broke the box recently, I must have missed something
10:02:35 * andrewc tries out /me function
10:03:09 <andersca> shapr: I could try writing a pizza plugin if you'd like
10:03:30 <shapr> aha
10:03:31 <shapr> I found it
10:03:33 <shapr> andersca: sure!
10:03:58 <shapr> I bet it's a bug in the latest darcs
10:04:06 <shapr> it should work now
10:04:14 <Darius> shapr: you need to make some like CGI system so people can hack up and dynamically load modules.  Sure, it would be a massive security hole but it would be convenient.
10:04:28 * shapr grins
10:04:36 <shapr> I could just install Lunar^'s GHCI module
10:04:51 <shapr> just a small security hole, as you said.
10:05:31 <shapr> I'm tempted to install the GHCI module and limit it to admin privs, how long do you think my box would remain uncracked?
10:08:25 <Lor> This is exactly the reason why dynamic loading in typed languages needs more studying.
10:08:34 <andrewc> is anyone working on capabilities in haskell?
10:08:59 <Lor> In an untyped language it would be so easy: just construct an environment with no unsafe functions, and evaluate user code in that.
10:09:00 <Darius> Lor: ?  The security hole would be just as big in an untyped language.
10:09:24 <Darius> Lor: How do types prevent that?
10:09:55 <Lor> It's pretty hard to construct typed environments dynamically.
10:10:00 <Lor> Not impossible, no.
10:10:08 <Lor> But there's just no direct support for it in most languages.
10:11:38 <shapr> hi Jad
10:13:03 <Jad> hello
10:13:04 <Jad> :0
10:13:06 <Jad> long time no see
10:13:10 <shapr> yah, ltns
10:13:25 <Jad> brb 10 minutes, food....
10:13:26 <shapr> I started a tutorial page on HaWiki
10:13:26 <Lor> And, judging from that c.l.f thread, the lack of eval seems to be one of the main arguments against static typing.
10:14:02 <shapr> andrewc: I haven't heard of any capabilities work in Haskell, but I haven't looked either.
10:20:06 <Lor> That would be pretty easy if you had subtyping in monads.
10:20:25 * shapr bounces randomly
10:21:49 <Jad> back
10:22:05 <Jad> shapr: can you gimme link please ?
10:22:33 <shapr> http://www.haskell.org/hawiki/HaskellTutorials
10:22:36 <shapr> not much there so far
10:22:46 <shapr> I started writing on the Concurrent tutorial earlier today
10:22:54 <Jad> good 
10:23:08 <shapr> phubuh put in the most content for the Concurrent tutorial, nice bit of demo code
10:23:08 <Jad> sockets is another good subject i think
10:23:38 <shapr> yup, I agree.
10:24:16 <shapr> hello again andrewc
10:24:37 * isomer bounces in 
10:24:54 <isomer> hi shae
10:25:00 <shapr> hi isomer, what's up?
10:25:33 <andrewc_> hi.  seem to have flakey conxn.
10:25:42 <isomer> being daring today -- i'm going to shrink an NTFS partition to make room for a backup of my home dir
10:25:58 <isomer> i never use XP anymore anyway, so.... even if it gets b0rked it's no great loss
10:26:15 <shapr> I'm not very fond of windows.
10:26:52 <isomer> me neither
10:27:13 <isomer> but i AM a big fan of having 2 hard drives so that i can make a backup every night
10:27:29 <shapr> that's sensible
10:28:00 * isomer is a paranoid little fellow
10:28:14 <andrewc_> what you using?  partition magic kept nt on this laptop - worked fine.
10:28:41 <Darius> isomer: You could sign your irc messages to make sure no one can fake you.
10:28:56 * shapr grins
10:29:16 <Jad> shapr: do you know the language brainfuck ?
10:29:26 <shapr> Jad: not as well as I'd like to ;-)
10:29:40 <shapr> Jad: have you seen the brainfuck interpreter in hlibs?
10:29:46 <isomer> not that paranoid, Darius
10:30:04 <shapr> dark wrote the bf interpreter.
10:30:05 <isomer> andrewc_: yeah, i'm going to hit it with partition magic and hope for the best
10:30:16 * shapr bounces
10:30:21 <Jad> yep
10:30:36 <Jad> it is a true brainfuck
10:30:46 <shapr> the language? or the interpreter?
10:30:51 <Jad> i like the cvs-wiki
10:30:53 <Jad> the language
10:31:15 <shapr> yah, hlibs has lots of fun stuff. do you want write privs so you can put Haskell code in there also?
10:31:29 <shapr> the only requirement is that all of the code you keep there is released under an OSS compatible license.
10:32:19 <andrewc_> isomer:  good luck.  another time it lost me a disk :o)
10:32:27 <isomer> eep!
10:32:32 <shapr> yikes!
10:32:36 <Lor> shapr, you mean OSD?
10:32:46 <Jad> okay
10:32:52 <Jad> i will post some soon
10:32:54 * isomer fires up his emergency backup laptop to maintain irc connectivity
10:32:55 <Heffalump> OSS = Open Source Software
10:33:03 <shapr> what's OSD?
10:33:07 <Lor> http://www.opensource.org/docs/definition.php
10:33:38 <Lor> Saying that something is "open source compatible" doesn't really mean anything. It works with open source programs? Gee, cool.
10:33:54 <shapr> :-P
10:34:07 <shapr> Lor: ok, I charge you to carry the proofs for our code ;-)
10:34:07 <Jad> any way GPL is the best
10:34:17 <Lor> Oh god.
10:34:19 * shapr laughs
10:34:24 <keverets> GPL is a decent default, anyway.
10:34:25 <shapr> we'll just call you atlas.
10:34:58 <Lor> It's a Bad Idea to incite license wars.
10:35:27 <shapr> you're having an unlicensed war, we'll have to arrest you.
10:35:42 <isomer> make him pay a licensing fee, shapr!
10:35:46 <shapr> yes!
10:36:10 * isomer resists the urge to by stocks in shapr, inc.
10:36:20 <shapr> last time I was in stocks... er, wait..
10:36:35 <isomer> quote page!
10:36:54 <shapr> hey, andrewc_ is on the quotes page already
10:40:09 <andrewc_> kinda preachy, though
10:40:35 <shapr> I was happy to see Thaddeus get smacked.
10:41:00 <shapr> he's the only person I've banned from #haskell
10:47:54 * shapr boings
10:48:18 <shapr> Lor: ok, I shall henceforth require an OSD compatible license.
10:48:22 <shapr> thanks for pointing that out.
10:50:13 <isomer`> shapr: do you run reiserfs?
10:50:40 <shapr> nah, ext3
10:50:50 <isomer`> hmm
10:51:23 <isomer`> i copied a couple of gig of new data onto my reiser drive, and it's taking like...10 minutes and still not unmounted. am i supposed to be worried yet?
10:51:42 <Heffalump> you're using reiser? I'd be worried already :-)
10:51:54 <isomer`> i'm being serious
10:52:01 <shapr> I trust T'so...
10:52:32 <ayrnieu> isomer - I've never copied a whole gig of data at once to my (former) reiser drive, but I've never had problems with normal use.
10:52:43 <shapr> hi mr cleverdra, wassup?
10:52:45 <isomer`> hmmm...
10:52:57 <isomer`> i guess i'll just leave it for a while longer before panicking
10:53:01 <ayrnieu> shapr - breakfast, very soon =)  Hello.
10:53:16 <shapr> how're the armed forces treating you?
10:53:29 <ayrnieu> isomer - I guess that you could strace the copying process (can you do that?  Or use gdb) to see what it's doing.
10:53:39 <shapr> @fortune
10:53:40 <lambdabot> Say "twenty-three-skiddoo" to logout.
10:53:49 <isomer`> ayrnieu: it's in the middle of a shutdown....don't know how
10:54:15 <shapr> twenty-three-skiddoo
10:54:17 <shapr> hah, doesn't work.
10:54:31 <keverets> bad fortune.
10:54:36 <Riastradh> @fortune
10:54:37 <lambdabot> You know it's going to be a bad day when you want to put on the clothes
10:54:37 <lambdabot> you wore home from the party and there aren't any.
10:55:56 <shapr> @arr
10:55:56 <lambdabot> Drink up, me hearties
10:56:42 * isomer` drinks
10:56:55 * shapr gets a drink
10:58:09 <shapr> what's up with mergeIO?
11:02:26 <shapr> hi anduril1, thought of any more definite questions?
11:02:40 <anduril1> nope
11:02:47 <shapr> aw, too bad
11:02:50 <isomer`> ok....this is not cool
11:02:54 * isomer` starts panicking a bit
11:03:16 <shapr> isomer`: is the drive doing anything?
11:03:40 <shapr> do you have headphones? can you listen to your CPU via the interference?
11:03:49 <isomer`> yes, the drive light is on
11:03:56 * isomer` panics none the less
11:04:13 * shapr gets a towel for isomer` 
11:04:16 <shapr> don't panic!
11:04:38 <Jad[0fF]> got some nasty calculus to do, any one know free software that does integrals ?
11:04:54 <shapr> emacs!
11:05:03 <Cale> go to #math and use mathbot
11:05:16 <Cale> or integrals.wolfram.com
11:05:37 <ibid> maxima?
11:05:37 <shapr> science news had an article on wolfram recently
11:06:24 <isomer`> thanks for the towel, shapr
11:06:39 <Jad> Cale: how to call the mathbot ?
11:06:39 <Jad> for example for an integral ?
11:07:06 <isomer`> that's it....
11:07:16 * isomer` swears off free software because there is no support number to call!
11:07:19 <shapr> nooo!
11:07:25 * isomer` ducks the barage of rocks
11:07:27 <isomer`> :)
11:07:42 <anduril1> what kind of problem are you having?
11:08:19 <isomer`> anduril1: i copied a couple of gig of data onto my reiserfs drive, and...it's been unmounting for like 20 minutes
11:08:30 <isomer`> i'm getting a bit...panicky
11:08:33 <andrewc_> i used mupad a long time ago (www.mupad.de)
11:09:01 <anduril1> isomer`: that is pretty scary
11:09:11 <andrewc_> isomer: anything in the sys logs?
11:09:15 <isomer`> i think i need a hug
11:09:32 <isomer`> andrewc_: it's in the middle of shutdown... i can't really do anything
11:10:41 <andrewc_> has it already shutdown other daemons like sshd?  alt-f2?
11:11:01 <isomer`> yeah, everything else is gone... i can't switch to a different term :(
11:11:38 <andrewc_> probably now's the time to give up atheism...
11:11:55 * isomer` decided to hit the big red switch and pray
11:12:10 <isomer`> praying...
11:12:18 * isomer` prays harder
11:13:24 <isomer`> whoah
11:13:32 * isomer` decided to become a quaker
11:13:48 <isomer`> what's the tool to check a reiser filesystem?
11:14:09 <anduril1> reiserfsck
11:14:29 <isomer`> thanks
11:15:49 <anduril1> I had a major mistake one time, and reiserfsck --rebuild-tree did it for me, but I don't know what you need to do
11:15:59 <Jad> mathbot written in haskell ?:
11:16:01 <isomer`> i'm just going to run --check and see
11:16:35 <Cale> no, actually it's just a few quick shellscripts
11:17:25 <Jad> ah okay
11:17:33 <Jad> mathmatica available for linux ?
11:17:36 <Cale> Yeah
11:18:30 <Jad> not for free :S
11:18:38 <phubuh> maxima might do the trick
11:18:54 <isomer`> or octave, maybe?
11:19:28 <anduril1> I've used maxima before, and it worked pretty well
11:20:22 <phubuh> maxima even has a nifty emacs interface -- http://www.phubuh.org/imaxima.png
11:21:30 <ibid> octave is numerics, maxima is symbolics
11:21:37 <isomer`> oh
11:23:02 <isomer`> i suppose you can tell i just use my brain, or my trusty HP42s for this sort of thing, huh?
11:23:04 <isomer`> :)
11:23:59 <Jad> phubuh: maxima does integrals /
11:24:01 <Jad> ?
11:24:28 * isomer` joins the quakers!
11:24:41 <isomer`> reiserfsck says all's well.
11:24:59 <isomer`> did i just witness a miracle?
11:25:30 <Smerdyakov> No. It's the wrong time of day.
11:25:50 <isomer`> oh
11:26:23 <isomer`> i'm just going to make a CD backup now in case...
11:26:38 <anduril1> is GHC hard to compile from source?
11:26:54 <phubuh> Jad, yup!
11:27:00 <isomer`> just takes forever, anduril1
11:27:24 <anduril1> I might have to try that, gentoo's ghc is pretty far behind the newest release
11:27:52 <isomer`> is there no ghc-cvs ebuild?
11:28:04 <Lor> Yeah, ghc compilation is quite a job when compared to, say, ocaml.
11:28:37 <anduril1> just ghc and ghc-bin
11:28:46 <anduril1> they're both 5.04.3
11:29:14 <isomer`> you could try just making a local ebuild with the latest version number and see if it works...
11:29:21 <anduril1> yeah
11:29:35 <anduril1> they offer 6.01, but its masked
11:29:42 <anduril1> though I'm not really sure why
11:30:04 <isomer`> *shrug*
11:30:24 <isomer`> USE="~x86" emerge ghc-6.01 ... or whatever :)
11:30:32 <anduril1> I'll just try compiling it, it might be fun
11:31:09 <phubuh> I use ghc 6 on Gentoo with no problem
11:31:30 <anduril1> phubuh: do you know why the ebuild is masked?
11:31:54 <phubuh> it's not tested enough to be in the stable branch yet
11:32:21 <anduril1> really?
11:32:31 <phubuh> but it's the same ghc 6 you'll get by compiling it manually
11:33:03 <anduril1> it seems like many other packages get unmasked more quickly
11:33:23 <phubuh> ghc isn't very widely used :-)
11:33:46 <anduril1> phubuh: well . . . . it should be
11:33:51 <phubuh> indeed!
11:34:22 <anduril1> I might just see if I can find the maintainer and write him an email, maybe he just forgot or something
11:34:55 <phubuh> hmm, I'm not sure where the responsibility is to move things into stable
12:22:26 <andrewc_> is there a std function with type [a->b] -> a -> [b] ?  thanks.
12:22:55 <phubuh> like the opposite of map?
12:23:10 <phubuh> I don't think so
12:23:15 <andrewc_> not sure it's exactly opposite, but yes.
12:23:35 <phubuh> pam fs x = map (\f -> f x) fs :-)
12:23:43 <Lor> f l x = map ($ x) l
12:23:43 <Darius> I don't think so either, but \l a -> map ($ a) l
12:24:08 <Lor> It'd be even neater if they were ordered the other way.
12:24:53 <andrewc_> \me rushes off to see what $ means in this context
12:24:54 <Darius> @type flip (map . ($))
12:24:54 <lambdabot> flip (map . ($)) :: [a] -> (a -> b) -> [b]
12:25:09 <Darius> @type flip (map . flip ($))
12:25:09 <lambdabot> flip (map . flip ($)) :: [a -> b] -> a -> [b]
12:25:36 <andrewc_> owww.  be careful - i'm having my evening glass of wine.
12:25:42 <andrewc_> thx :o)
12:25:42 <Lor> Why do people have this obsession about point-free style?
12:26:08 <andrewc_> because it's sweet!  maybe i still have a newbie crush on it, but point free
12:26:25 <andrewc_> style is like when you finally grok objects...
12:26:57 <Lor> It's neat but it's not very legible, except when it's just pure composition pipes.
12:26:57 <Darius> Lor: I don't usually write code that takes pains to be point-free (i.e. I don't have a fork operator defined)
12:27:12 <phubuh> fork operator?
12:27:15 * ayrnieu thinks about 'finally grok objects'.  Residue from a poor OOP language?
12:27:31 <Lor> OTOH, I do think that arrow code is fairly legible even without the special proc notation.
12:28:00 <andersca> ha!
12:28:07 <andersca> I was looking for a function earlier today
12:28:17 <andersca> turns out that it was ($) I wanted
12:28:36 <Darius> phubuh: fork f (a,b) = (f a,f b) or one of those.  I also don't like uncurrying and recurrying.
12:29:36 <Riastradh> Point-free style is point-less.
12:30:47 <phubuh> it's pointy in some circumstances -- it's certainly more pointless to type "f xs = map (+ 1) xs" than it is to type "f = map (+ 1)"
12:33:13 <phubuh> oh.
12:34:58 <isomer`> anyone know of some software that can resize 
12:35:05 <isomer`> NTFS partitions from within linux?
12:35:15 <phubuh> I don't think you're going to have any luck doing that
12:35:22 <isomer`> hmm
12:35:32 <phubuh> NTFS is really poorly documented :~(
12:35:32 <ayrnieu> isomer - linux is very leery about NTFS -- I think only the 2.6 kernels even let you write to it safely.
12:35:37 <andrewc_> it shows the flow, rather than the values.
12:35:57 <andrewc_> if you can do it, then it doesn't matter if you don't.
12:35:57 <isomer`> the version of partition magic i have is too old to work with ntfs 5 paritions.... anyone know any other options?
12:35:58 <andrewc_> but if you can't, then you need to learn.
12:36:02 <andrewc_> imho (as someone learning)
12:36:19 <phubuh> and even then, 2.6 can only alter bytes -- inserting or deleting is a big no-no
12:36:19 <ayrnieu> The wiki on points-free style isn't very interesting -- it doesn't explain the motivation for it, or why someone would tend to write a 'fork' operator.  It seems like something fairly obvious (from the wiki) -- I started doing it as soon as I noticed that I could.
12:37:27 <phubuh> feel free to improve it :-)
12:38:13 <ayrnieu> The best solution is to annihilate the evil NTFS partition -- or 'resize' it onto a seperate disk.
12:38:35 <isomer`> hmm... that will kill everything that's installed, though
12:38:43 <ayrnieu> Well, not the seperate-disk idea.
12:46:31 <andrewc_> i was going to add earlier that my bad experience with PM was when i tried to
12:46:46 <andrewc_> do many things at once. it's always worked in small steps for me.
12:47:00 <andrewc_> and it was a long time ago!
12:47:40 <ayrnieu> PM?
12:47:51 <andrewc_> sorry, partition magic.
12:47:51 <ayrnieu> oh.
12:53:44 <phubuh> hmm.  I want to read from a TCP socket, but I don't know how much.  in the O'Caml version of this program, I just use non-blocking I/O and some arbitrary buffer size to read -- is this what I should do in Haskell as well?
12:53:48 <ayrnieu> mmm, PalmOS nhc98
12:54:14 <ayrnieu> phubuh - that is, indeed, what I've done.
12:54:27 <phubuh> ok :-)
12:55:50 <phubuh> should I use Network.Socket or the higher level API?
12:56:26 <phubuh> I don't see a way to use non-blocking I/O with the latter, but I'm just making sure
13:05:25 <phubuh> is GHC's Network.Socket documention not up-to-date?  I see a reference to Network.Socket.setFdNonBlocking, but it's not in the documentation.
13:06:25 <andersca> phubuh: afp?
13:06:32 <phubuh> afp?
13:06:52 <Smerdyakov> Adaptive Funny People.
13:07:14 <Riastradh> Smerdyakov is not one.
13:17:01 <Jad> --- Ping reply from Jad : 513.49 second(s)
13:17:01 <Jad> btw maxima rocks
13:17:10 <phubuh> indeed!
13:31:37 <Lunar^> phubuh: You should look straight at the source
13:31:41 * isomer` prays again
13:32:05 <phubuh> Lunar^, ok :-)
13:32:08 <Lunar^> phubuh: In case of Parsec, there's a lot of function that do not appear in haddock
13:36:13 <Lunar^> phubuh: btw, did you already look at the GHC commentary ?
13:36:30 <phubuh> what do you mean?
13:37:02 <Lunar^> phubuh: There's a collection of notes describing GHC's internal
13:37:10 <phubuh> I see
13:37:16 <phubuh> no, I don't think I've looked at that
13:37:28 <Lunar^> phubuh: It's worth reading, and it's quite fun actually
13:37:40 <phubuh> cool :-) where is it?
13:39:01 * shapr boings
13:39:23 <Lunar^> phubuh: ....mhh... ghc/doc I think
13:39:26 <phubuh> alright
13:39:29 <phubuh> thanks!
13:42:48 <isomer`> yAy!
13:43:16 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/","Any user who would like to request any unwritten tutorial please msg shapr"]' by Jad
13:52:23 <esap> whoa, I got an internal error from ghci.
13:53:46 <andrewc_> i got some of thoe from ghc a couple of weeks ago.  turned out a fan on mobo had died.
13:53:58 <esap> hehe :-)
14:01:27 <TripleDES> hi
14:02:10 <phubuh> hi!
14:24:29 <phubuh> bah, there are like a zillion types for IO handles
14:24:37 <phubuh> Handle, Fd, FD, etc :)
14:31:53 <Marvin--> and *Int*
14:36:37 <Lunar^> phubuh: Unix consequence.... grr
14:37:53 <phubuh> I'm using the POSIX and Network packages, but I get these unresolved symbols when linking:
14:37:58 <phubuh> /usr/lib/ghc-6.0.1/libHSrts.a(Main.o)(.text+0xd): In function `main':
14:37:58 <phubuh> : undefined reference to `__stginit_Main'
14:37:58 <phubuh> /usr/lib/ghc-6.0.1/libHSrts.a(Main.o)(.text+0x2e): In function `main':
14:37:58 <phubuh> : undefined reference to `Main_zdmain_closure'
14:39:11 <Lunar^> What's the name of your module ?
14:39:21 <phubuh> Oh.  Not Main. :-)
14:39:37 <Lunar^> had it in front of my student last tuesday ;)
14:39:40 <phubuh> doh!  that was indeed the problem.
14:41:18 <Pseudonym> @arr
14:41:19 <lambdabot> Arrr!
14:41:26 <phubuh> @yow
14:41:26 <lambdabot> Yow!  I forgot my PAIL!!
15:15:20 <Lor> Do I take it that darcs doesn't grok binary?
15:53:32 <TripleDES> n8
16:10:29 <shapr> Lor: it does
16:11:34 <Lor> Does it do binary deltas?
16:11:57 <shapr> I doubt it, binary support is recently added. it's possible though, david writes nifty code.
16:12:11 <Lor> Can it handle huge files without reading them into memory in entirety?
16:12:16 <Lor> (This is where CVS fails)
16:12:27 <shapr> binary has been the subject of many of the recent messages on the mailing list, so it should be easy to find out.
16:12:42 <shapr> alternatively, david usually repsonds to questions on the mailing list in less than 24 hours
16:12:55 <Lor> "huge" here meaning, say, a 50 meg mailbox.
16:12:57 <Pseudonym> The standard diff algorithm doesn't perform well on binary files.
16:13:04 <Lor> Yeah, xdelta is cool.
16:13:13 <Pseudonym> It depends on noticing lines which are unique to one of the files.
16:13:23 <Pseudonym> For binaries, that assumption fails.
16:13:29 <Lor> The standard diff algorithm doesn't perform well even on text files.
16:13:47 <Pseudonym> Well I think it does. :-)
16:13:57 <shapr> hiya Pseudonym 
16:13:59 <Lor> If you use fixed-width paragraphs and add a couple of words, the changes cascade many lines further.
16:14:16 <Lor> It's silly to make a "line" the unit of change.
16:14:22 <shapr> I agree
16:14:27 <shapr> but then, computers are silly...
16:14:27 <Pseudonym> G'day. :_)
16:14:46 <Lor> I'd use a general-purpose xdelta algorithm on all files, if it were convenient.
16:14:53 <Pseudonym> Ah, but you see, diff is designed for source code (config files, program text etc) rather than English.
16:15:06 <Lor> Even so.
16:15:14 <shapr> darcs is fun to argue about because david takes people seriously, and is really trying to create a good program.
16:15:24 <shapr> so if you have a good idea, he'll use it
16:15:24 <Lor> Run it through indent, and again the entire file changes.
16:18:20 <Pseudonym> Hmmm.  Not sure that's a huge concern, though.
16:18:39 <Pseudonym> Surely you should stick to your project's coding standard (or your own) consistently?
16:18:44 <Pseudonym> I don't think I've ever used indent. :-)
16:18:54 <phubuh> indent is despicably uselses
16:18:57 <phubuh> useless*
16:19:19 <Lor> My point is that a line-based approach to diffs seriously limits their applicability.
16:19:43 <Pseudonym> OK, yes, I agree with that.
16:19:43 <Lor> So now we have it that they are really usable only on source code with fixed coding standards.
16:19:53 <Pseudonym> Though I'm not sure that it's "severe".
16:20:10 <Lor> It is in the sense that diffs get bigger than they need to be.
16:20:17 <Lor> The only real advantage is the legibility of the diffs.
16:20:18 <Pseudonym> How often do you re-indent your code?
16:20:23 <ayrnieu> I suspect that, nowadays, diffs are mostly useful at interacting with patch(1).
16:20:38 <Lor> Nono, I mean that I want to diff _other_ things besides source code.
16:20:46 <Pseudonym> ayrnieu: True.  (Oh, and to run behind the scenes in source code control systems.)
16:21:05 <Lor> I use diffs often to see how a file has been changed.
16:21:13 <ayrnieu> I never do, but OK =)
16:21:19 <Lor> I have a previous version, and a new version, and I'm interested in what's new.
16:21:38 <Lor> That's what diff is good for.
16:21:42 <Lor> Not for patches.
16:21:52 <Pseudonym> Yes.  It's an important tool for code reviews, for example.
16:21:52 <Lor> Well, sorry, yes they are, for source patches.
16:22:10 <ayrnieu> I think that everyone agrees that diffs are better for patches than for comparing different versions of arbitrary files.
16:22:19 <Lor> Because they make merging easier. It's enough just to find the right context, even if it's not at the place where it's supposed to be.
16:22:37 <Lunar^> ayrnieu: I agree. Especially without any color highlighting
16:22:40 <Lor> Arbitrary line-based text files.
16:22:59 <Lor> Color highlighting? What do you need that for?
16:23:08 <ayrnieu> Lor - the only 'line-based text file' is a configuration file with one-line commands.
16:23:21 <Lunar^> Lor: knowing what has changed in a given file
16:23:31 <Lor> Um. And you cannot read diff's output?
16:23:40 <shapr> wtf
16:23:49 <ayrnieu> Lor - most code certainly isn't 'line based'; neither is English.  If you want to compare code or English in a meaningful way you need to understand the formats of either, reduce either to an equivalent internal format, and then reformat them in such a way as to show real differences.
16:23:50 <Lor> I just run diff -U and it shows me the context, and how lines have changed.
16:24:06 <shapr> why would lambdabot give me "Exception: Prelude.head: empty list"
16:24:07 <Lor> ayrnieu, and that's exactly the reason why diff isn't good for patching, either.
16:24:10 <shapr> when first executed?
16:24:21 <Lunar^> Lor: It's less readable that the way NeXTSTeP graphical diff presents it
16:24:35 <Lor> Sure, there are other tools.
16:24:36 <Darius> Compile with profiling and add a -xc switch and find out.
16:24:51 <shapr> Pseudonym: can you think of anything obvious that would give that error message from lambdabot?
16:24:56 <Pseudonym> shapr: At a guess, I think it might be trying to evaluate the head of an empty list.
16:24:59 <ayrnieu> Lor - no, diff is great for patching -- so long as you don't try send in a patch that reformats everything (but why would you do that?)
16:25:02 <Pseudonym> On startup.
16:25:03 <shapr> no way ;-)
16:25:10 <shapr> shock me
16:25:12 * shapr laughs
16:25:24 <Pseudonym> I wonder how many places it uses head.
16:25:36 <Pseudonym> Now, now.
16:25:36 <shapr> 22
16:25:48 <Lor> ayrnieu, how come the line-basedness is such a big problem for using diff manually, but not a problem at all when making patches?
16:26:08 <Lor> The result is the same in each case: you get extraneous crud.
16:26:21 <Lunar^> Darius: Mhh.. just looked at GHC's user guide, that's exactly the example exception for this switch :)
16:26:25 * Pseudonym does a cvs update
16:26:48 <shapr> hlibs darcs repo has the latest code...
16:26:53 <shapr> though I doubt it's much different.
16:27:06 <Lunar^> Darius: didn't know that one by the way, that's a nice option
16:27:58 <Pseudonym> shapr: At a guess, I'd think it's the one in systemModuleName.
16:28:32 <Pseudonym> You might be missing an entry in package.conf.
16:28:45 <Pseudonym> At the very least, it's probably worth putting a better error message in that code.
16:29:03 <shapr> ah
16:29:33 <Pseudonym> This is just a guess, mind.  It could also be getting a message down the wire which isn't formed quite like it thinks it should be.
16:31:14 <shapr> Pseudonym: thanks
16:31:45 <Pseudonym> The IRC decoding stuff has changed a bit since I last saw i.
16:32:21 <Pseudonym> There are a few used in decoding specific triggers in BaseModule.hs.
16:33:21 <phubuh> ugh, I just realized how stunningly inefficient substrings are when strings are [Char]
16:33:41 <shapr> I think it's most likely the SystemModuleNaming.hs stuff
16:34:38 <phubuh> does Haskell provide some data type for packed strings?
16:34:44 <shapr> yup
16:34:48 <phubuh> oh, neat
16:35:37 <Pseudonym> Well, Haskell doesn't.  GHC does.
16:35:38 <ayrnieu> Well, compiling GHC again since OpenBSD's build disables it (some problems, apparently -- but we'll see).
16:36:03 <Pseudonym> phubuh: I agree.  I actuall think that String == [Char] is a mistake.
16:36:25 <phubuh> well, caring about cross-compiler portability for a network application is futile anyway
16:36:30 <Pseudonym> It's great for doing undergrad homework, but not so useful for real work stuff.
16:36:41 <Pseudonym> Very true.
16:36:56 <Pseudonym> Though GHC and hugs are compatible enough for that kind of thing.
16:37:11 <Pseudonym> Lambdabot was developed on both hugs and ghc.
16:37:33 <Pseudonym> Dunno if it still supports hugs or not.
16:37:40 * ayrnieu continues to wait for PalmOS Haskell, through nhc98.
16:37:48 <phubuh> I'm sending huge chunks of data over a non-blocking socket, and I need to requeue the possible part of the string that didn't get written
16:37:57 <Pseudonym> Right.
16:38:00 <phubuh> using [Char] for that gives me the creeps :-)
16:38:14 <Pseudonym> So either PackedString or perhaps a UArray.
16:38:26 <Pseudonym> UArray of Word8 might do the trick.
16:38:40 <phubuh> ah, cool
16:39:05 <ayrnieu> How well does GHC interact with Unicode?
16:39:10 <Darius> lambdabot isn't even portable GHC now, though if the dynamic loading stuff is removed it probably wouldn't be too hard to get it to work with Hugs.
16:39:37 <shapr> the dynamic loading stuff is fragile, though very cool
16:40:08 <shapr> the part about not passing data between static and dynamic land sort of sucks too.
16:40:25 <Darius> Isn't only Dynamics.
16:40:36 <shapr> ?
16:40:43 <phubuh> good night, haskellers
16:40:43 <phubuh> @yow
16:40:44 <lambdabot> My nose feels like a bad Ronald Reagan movie...
16:40:47 <shapr> g'night phubuh 
16:40:52 <shapr> I have to sleep soon myself
16:41:37 <Darius> The problem is that there are two hashtables hashing things to type representations.
16:41:58 <Pseudonym> ayrnieu: DOn't go there.  Trust me.  Unicode and Haskell implementations... very hot topic.
16:41:59 <Lunar^> shapr: Clean way of doing this is so much better :(
16:42:14 <ayrnieu> eh, OK.
21:03:40 <pimpbot5001> hi anyone here?
