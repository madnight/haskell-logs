00:46:56 <Lilith> hmm
00:47:19 <Pseudonym> Hmm?
00:48:00 <Lilith> just checking out this new channel i stumble on :)
00:48:13 <Pseudonym> It's not that new!
00:48:57 <Lilith> but it's a channel i just discovered. therefore it's new to me :)
00:48:58 <Pseudonym> Are you a haskeller?
00:50:20 <Lilith> i'm doing a thesis on haskell. does that count? :)
00:50:26 <Pseudonym> Certainly!
00:50:35 <Pseudonym> What's your topic?
00:50:45 <Lilith> Haskell-> Java
00:51:00 <Pseudonym> Don't tell me... John Shepherd, right?
00:51:11 * Lilith blinks
00:51:20 <Pseudonym> He's not your supervisor?
00:51:25 <Lilith> nope
00:51:30 <Pseudonym> Ah.  Oh well.
00:51:39 <Lilith> Manuel Chakravaty
00:51:43 <Pseudonym> Ah!
00:51:48 <Pseudonym> One of our locals.
00:51:58 <delYsid> Chilli! :)
00:52:05 <Pseudonym> Yup!
00:52:15 <Lilith> yep
00:52:29 <Pseudonym> Cool.  So how far have you gotten?
00:52:42 <Pseudonym> Are you going from GHC core, or are you using some other technique?
00:53:16 <Lilith> either improving the JVM
00:53:39 <Lilith> or do something else to make it run better on the JVM
00:53:47 <Lilith> oh
00:53:50 <Lilith> it's late
00:53:54 <Pseudonym> Yes. :-)
00:53:54 * Lilith rushes off
00:54:02 <Pseudonym> Have fun.  Please do drop in again.
00:54:16 * Pseudonym is curiouser and curiouser
00:58:24 <Pseudonym> Late for me too, but I got in to work late today.
03:07:08 <seth_> Hey, all, I'm getting a "last statement in a 'do' construct must be an expression".  I've fixed these everywhere in my code except one place.  Can someone tell me exactly what the message means?
03:11:47 <Riastradh> seth, no, not unless we can see your code.
03:12:07 <Riastradh> Most likely it probably means that the last expression in that 'do' uses the '<-' syntax.
03:14:02 <Marvin--> or that you have an indentation bug
03:14:19 <dennisb> seth_: it means that you have to end a do-block with an expression. you can not end with for example x <- foo
03:14:36 <dennisb> Marvin--: seth_ uses explicit {;}
03:14:41 <Marvin--> oh, right
03:15:19 <Marvin--> 99% of the times I get "last statement must be an expression" it's because I've missed a space somewhere
03:15:48 <dennisb> remember that the do is translated to >>=, so if you end witg x <- foo it would translate to foo >>= (\x -> ... what, no expression ... )
03:15:52 <dennisb> Marvin--: me too
03:16:37 <seth_> dennisb: Marvin-- et. al.  I have seen it with the indentation problem, but I checked that thoroughly and put in the { ;; } to be sure.  In this case...
03:16:44 <Marvin--> damn this fucking level
03:16:54 * Marvin-- is playing a boulder dash clone and can't get past level 3
03:17:10 <seth_> The final "thing" in the do is an if/then/else, but all the paths end with returnIO something
03:17:24 <Marvin--> I hate games where the hard part of a level is to figure out how the C64 keyboard works
03:18:09 <seth_> actually it is a nested  if then else if then else if ....
03:18:44 <seth_> is this indentation correct for if/then/else?
03:18:50 <seth_> if  something
03:18:54 <seth_>    then something
03:18:59 <seth_>    else something
03:19:00 <seth_> ?
03:19:23 <dennisb> if-then-else don't care about indentation, use () if you want to be sure
03:19:35 <seth_> dennisb: OK, I'll try that.
03:19:56 <seth_> dennisb: how does one code an if/then/else without the else?  just leave it off?
03:20:04 <dennisb> you can't
03:20:16 <dennisb> it's an expression, same as ?: in C
03:20:19 <seth_> dennisb: so if I don't need an else, could I use ()?
03:20:27 <seth_> else ()
03:20:33 <dennisb> both branches has to have the same type
03:20:44 <dennisb> it's an expression, it has to have a value
03:20:53 <seth_> ah, ok, so I have to restructure so there are no places where else doesn't apply.
03:21:48 <seth_> maybe use case, instead?
03:22:14 <dennisb> if only one part of the if-then-else can occur that why have it?
03:22:35 <seth_> dennisb: because I want it _not_ to do something if the if predicate fails.
03:22:46 <dennisb> if the then-part is a IO-command all you have to do is to put an empty command in the else-part
03:22:49 <dennisb> say, return ()
03:23:23 <seth_> dennisb: I can have, say, IO String in the then part, and IO () in the else?
03:23:27 <Marvin--> no
03:23:36 <dennisb> no, must have the same type
03:23:38 <seth_> didn't think so.
03:23:55 <seth_> ok, I guess I shouldn't be using if/then/else here at all.
03:24:12 <dennisb> someone is might want to look at the return value, how would that work if it's sometimes a string and sometimes a ()
03:24:35 <seth_> it wouldn't.  I was responding to your comment that I could put return () in the else
03:24:38 <dennisb> if you never want to look at the returned string, then maybe change both branches to IO ()
03:24:57 <seth_> dennisb: no, I was just trying to understand what you said about return ()
03:25:05 <dennisb> ok
03:26:34 <dennisb> since if-then-else is an expression it works like this. In C it's solved by having two if-then-else, the statement (if) where you don't need an else branch, and the expression (?:) where you must have both parts
03:26:50 <Marvin--> hmm, div and quot are only different if one of their arguments are negative, right?
03:27:24 <seth_> dennisb: but the if/then (no else) isn't available in haskell.
03:27:27 <seth_> correct?
03:27:38 <dennisb> there is a when-combinator that is similar
03:27:46 <dennisb> in module Monad
03:27:53 <Marvin--> the type of when enforces  m ()  though
03:27:59 <dennisb> but it's not exactly what you want
03:28:01 <dennisb> yes
03:28:02 <seth_> dennisb: thanks, I'll look at that.
03:28:14 <Marvin--> when :: (Monad m) => Bool -> m () -> m ()
03:28:20 <Marvin--> there's also  unless  which is the opposite
03:28:26 <seth_> Marvin--: I'm not sure I get the implication of it enforcing m ()
03:28:40 <Marvin--> seth_: you can't say  when True (return "foo")
03:28:56 <Marvin--> seth_: because String /= ()
03:29:07 <dennisb> it makes it easy to do things like do { x <- foo; when (x > 5) (print "Ooh, it was big"); print "the end" }
03:29:11 <seth_> Marvin--: the _only_ return type available is m ()
03:29:32 <Marvin--> dennisb: nice example ;)
03:30:33 <seth_> what's the difference between monad and monoid?
03:30:54 <Marvin--> a monoid is just a mathematical group, isn't it?
03:31:25 <seth_> ok.
03:32:02 <Marvin--> don't take my word for it though
03:32:24 <seth_> at has mappend and mconcat
03:32:31 <kosmikus> Marvin--: a monoid is slightly less than a group, it doesn't need an inverse
03:32:32 <seth_> should have looked before I asked.  :)
03:32:42 <Marvin--> kosmikus: ah, right
03:32:59 <seth_> I haven't looked at group theory for about 25 years.  :)
03:33:05 <Marvin--> explains why [a] can be a monoid :-)
03:54:28 <Marvin--> andersca: 
03:54:30 <Marvin--> er
03:54:40 <Marvin--> that colon wasn't meant to be there
03:55:24 <andersca> I just found a workaround for my kernel problems
03:56:13 <Marvin--> what kernel problems?
03:56:21 <andersca> got an oops in the idle task at bootup
03:56:35 <andersca> looks like a race condition when setting the idle function callback
03:58:39 <Marvin--> ouch
04:02:36 <andersca> although if you specify idle=poll at the kernel command line it'll use a different idle callback
04:35:22 <ibid> is there a limit (either in the language or imposed by some of the implementations) for the number of alternatives in a (union) type?
05:02:33 <Janni> hi!
05:12:07 <mgoetze> Janni: hi, how were your exams?
05:31:24 * shapr boings
05:31:38 <mgoetze> hullo shapr
05:31:47 <shapr> 'ello mgoetze 
05:31:53 * shapr goes off to have breakfast before working
05:32:09 <mgoetze> ah yes, just the time for breakfast now :)
05:35:59 <Marvin--> good god this is ugly
05:37:48 <Marvin--> whoa, it turned out pretty simple though
05:39:01 <Igloo> 'ello
05:40:05 <Marvin--> lots of HsApp here
05:40:22 <Marvin--> fixComp (HsApp (HsApp (HsApp (HsVar (UnQual (HsSymbol "."))) e1) e2) e3) = fixComp (HsApp e1 (HsApp e2 e3))
05:40:23 <Marvin--> pretty eh? :)
05:42:38 <Marvin--> by the way, people, I got a question from a friend that I didn't quite know how to answer... He was writing a haskell program that repeatedly read from a file, processed it, did other things, then read from the file, processed it et.c. and I think he experienced that the file handles were never closed
05:42:55 <Marvin--> I don't know if he got some problem running out of memory or if he got something like "too many open files"
05:43:08 <Igloo> They should be closed when you get an EOF
05:43:09 <Marvin--> how does one fix this?
05:43:39 <Igloo> Assuming you were using readFile
05:43:57 <Marvin--> hrrm... so if I use readFile, and only process the first half of it (say I'm looking for something) the other half will never be dereferenced?
05:44:08 <Igloo> Exactly
05:44:17 <Marvin--> dang... how do I get around this?
05:45:01 <Marvin--> in his case the file wasn't unrealistically large and didn't change during the program was running so I suggested he read it once and put it in an IORef, but that's really a workaround
05:45:04 <Igloo> You could use the h* functions and hClose or I suspect that if you do   last ('x':file_contents) `seq` whatever you want    that'd do it
05:45:45 <Marvin--> right
05:45:58 <Marvin--> it feels like lazy file reading causes more problems than it solves
05:52:30 * dennisb totaly agrees
05:53:00 <dennisb> I've been bitten by that problem many times, over and over again. It must be a sign that it is bad!
05:55:35 <shapr> oy
05:56:26 <shapr> Marvin--: someone reported a bug about file handles not being closed on ghc-users
06:02:20 <shapr> to the point where the box couldn't open any more files after several hours with a long running process 
06:03:58 <Marvin--> heh
06:05:44 <shapr> Simon PJ is pushing the separately distributed libraries idea
06:06:52 <Marvin--> oh dear, what do you end up with when one French person tries to correct the English of another French person?
06:07:04 <shapr> sth mal
06:07:22 <shapr> of course, you should see Bea and I correct each others swedish...
06:07:50 <Marvin--> heh
06:32:36 * shapr bounces happily
06:32:39 <shapr> gooood morning #Haskell!
06:33:19 <mgoetze> how was breakfast?
06:33:29 <shapr> it was excellent
06:33:35 <shapr> parisian bread and brie
06:33:45 <shapr> and Battery
06:33:47 <shapr> mmm
06:33:53 <shapr> what did you have for breakfast?
06:34:21 <mgoetze> hm, well, the term breakfast becomes kinda meaningless when you wake up at 7 pm and have some noodles :)
06:34:32 <shapr> I woke at 2:30pm
06:35:43 <mgoetze> what was the first thing i ate this sleep/wake cycle? oh, yeah, gyrospfanne
06:35:57 <shapr> is that greek food?
06:36:07 <mgoetze> yeah, pretty much
06:36:11 <mgoetze> with rice and stuff
06:36:12 <shapr> nifty
06:37:29 <mgoetze> my mom had it for dinner, so i had the rest for breakfast :)
06:38:08 <Marvin--> mmm, gyros
06:38:40 <shapr> hi sambucawhite99 
06:39:00 <sambucawhite99> hello
06:39:07 <shapr> interesting nickname, what does it mean?
06:39:22 <Marvin--> sounds like a drink
06:39:24 <sambucawhite99> nothing actually....just u know the drink sambuca
06:39:34 <sambucawhite99> yeah, and u can get sambuca black, and white
06:39:43 <shapr> haven't heard of it
06:39:59 * Marvin-- is kinda impressed that sambucawhite and sambucawhite1-98 were busy though ;)
06:40:10 <sambucawhite99> lol
06:40:15 <sambucawhite99> its in a really tall bottle
06:40:32 <sambucawhite99> like about 1.5 ft tall i guess
06:40:51 <shapr> is it alcoholic?
06:41:04 <opet> it's pretty disgusting, from what I remember :)
06:41:04 <sambucawhite99> yeah, smells like licorice
06:41:15 <sambucawhite99> i dont drink, work in a bar
06:41:40 <Marvin--> yeah I've never been fond of sambuca
06:53:27 <shapr> y0h0 y0h0 a pirate's wife for me
06:53:34 <archie_sihir> what is the best way to do web haskell ?
06:54:44 <shapr> archie_sihir: hws-wp plus WASH
06:57:28 <shapr> that's my suggestion
06:57:29 <archie_sihir> shapr: WASH has three seperate packages
06:57:38 <archie_sihir> looking at hws-wp
06:57:48 * tmoertel requires tea
06:58:23 <mgoetze> is the WASHed stuff xml-clean? :)
06:58:24 <shapr> import Tea ( EarlGrey )
06:58:34 <shapr> mgoetze: I don't know
07:00:08 <shapr> irc crap?
07:00:09 <shapr> bah
07:01:03 <SyntaxPolice_> good morning
07:01:11 <mgoetze> hi SyntaxPolice_ 
07:01:18 <mgoetze> welcome to internet relay crap! :)
07:02:37 <SyntaxPolice_> crap indeed... does anyone have some nice little Haskell scripts that do junk with files and regular expressions? it would be nice to add soem examples to the wiki.
07:08:35 <archie_sihir> shapr: sorry what was the other app besides WASH ?
07:08:42 <shapr> hws-wp
07:09:03 <shapr> archie_sihir: of course, it really depends on what you mean by "web haskell"
07:09:08 <shapr> any specific goals?
07:09:24 <archie_sihir> shapr: to do what php / asp is doing ?
07:09:47 <shapr> ah, ok
07:10:12 <shapr> if you specifically want to work on windows and microsoft IIS, there's HaskellScript, a Haskell plugin to Windows Scripting Host
07:10:33 <shapr> If you want to run as an apache plugin there's mod_haskell, which uses hugs
07:10:42 <archie_sihir> oh great
07:10:50 <shapr> WASH can do both HTML generation and CGI
07:10:56 <shapr> as well as email and some other useful stuff
07:11:13 <shapr> hws-wp is an entire web server written in haskell that supports plugins written in haskell
07:11:32 <shapr> the hws-wp plugins work like apache modules
07:11:53 <archie_sihir> shapr: could you gimme a url for hws-wp ?
07:12:08 <archie_sihir> can't google it ... the connection that i found was refused
07:12:15 * Igloo bounces having sent draft paper URL to various people
07:13:18 <shapr> I know it's in the CVS tree of http://sf.net/projects/haskell-libs/
07:14:04 <archie_sihir> ok
07:14:40 <shapr> also, I don't think the runtime loader part of hws-wp works with ghc 5.04.3 yet
07:15:11 <shapr> can I tell ghc5.05 to install alongside my debian packages after building it?
07:15:25 <shapr> or do I need to specify that in the configuration before building it?
07:15:51 <archie_sihir> i only got nhc and hugs here
07:16:17 <shapr> hey SyntaxPolice, seen the contrib discussion on libraries?
07:17:53 <shapr> Igloo: can other people read the draft also?
07:18:05 <shapr> or is it shrouded in secrecy until HW?
07:21:18 <Janni> re
07:21:22 <shapr> re re
07:26:17 <opet> remoo
07:26:29 <Janni> I'm trying to use c2hs in a _very_ simple case, but it doesn't work. I have two files test.c and test.h with the contents
07:26:29 <Janni> char cCharID(char c) { return c; }
07:26:29 <Janni> char cCharID(char );
07:27:01 <Janni> and the file Muh.chs with
07:27:06 <Janni> module Muh where
07:27:08 <Janni> import CTypes
07:27:11 <Janni> charID :: Char -> Char
07:27:12 <Janni> charID = {#call fun cCharID#}
07:28:01 <Janni> Then I do a "c2hs test.h Muh.chs". But when I run "hugs Muh" I get:
07:28:04 <Janni> [...]
07:28:04 <Janni> Reading file "Muh.hs":
07:28:05 <Janni> ERROR "Muh.hs" - Error while importing DLL "/usr/home/jan/test/Muh.so":
07:28:05 <Janni> Cannot open "/usr/home/jan/test/Muh.so"
07:28:32 <Janni> Can you tell me what I'm doing wrong?
07:30:53 <shapr> I've only seen c2hs used with GHC
07:31:02 <shapr> have you looked at a program that uses c2hs with Hugs?
07:31:07 <shapr> maybe check the Makefile?
07:31:46 <Janni> ghc doesn't work either. But I realised that I don't need c2hs for C-interfacing...
07:31:53 <shapr> you can use the FFI?
07:32:23 <Janni> Not yet, I'm just starting with that stuff...
07:33:14 <Janni> I only have to import a function with a quite easy type (String -> String / char* x(char *y))
07:34:06 <shapr> has anyone written any nntp code in Haskell?
07:34:37 <shapr> I'm considering NNTP.hs, I'd like to start with working code from someone else if possible
07:41:21 <shapr> Janni: if you figure out how to do it, could you write a short summary on HaWiki?
07:41:24 <shapr> I'd like to know too :-)
07:49:34 <Janni> OK. But let's first see if I'll figure it out at all...
08:27:03 <shapr> has posix moved in ghc 5.05 ?
09:06:54 <opet> latex doesn't seem to like me using the ^ character, and it doesn't like \^ either
09:06:58 <opet> any ideas?
09:08:54 <Janni> Nothing better than \verb!^!...
09:09:08 <opet> \textasciicircum{} did it :)
09:09:14 <Janni> I'm realising, btw, that FFI neat and quite easy...
09:09:58 <Janni> ... is being :P
09:26:32 <Marvin--> Janni: you want CString -> CString btw
09:26:43 <Marvin--> Janni: or if it's unpure, CString -> IO CString
09:27:44 * shapr boings
09:30:00 * shapr splats
09:30:37 <opet> didn't notice the cliff, huh?
09:32:25 * Marvin-- puts up a sign "Boing at yer own risk"
09:34:15 * kawfee bounces
09:41:30 * Marvin-- goes to microwave some left-over nasi goreng
09:52:25 <Janni> How can I get a Ptr Word8 (C-"Array") from... let's say a String? (Just a hint, please)
09:53:00 <Janni> It's no problem for me to transform the String into a [Word8]...
09:57:27 <Janni> Oh, I just see that the paper I'm reading, covers that topic...
10:33:17 * shapr sings happily
10:33:28 <andersca> yo shapr!
10:33:33 <shapr> y0 andersca!
10:34:12 <Marvin--> Janni: are you sure you don't want a Ptr CChar ?
10:35:55 * shapr boings cheerfuly
10:44:28 <Janni> Marvin--: I would like to use CChar, but GHC doesn't have CTypes, or does it?
10:44:42 <Janni> Errr.... no
10:45:26 <Janni> Ptr Word8 is what I want. It's *byte in C (#define unsigned int byte)
10:45:43 <Janni> s/int/char
10:46:55 <Janni> I don't know, if I should use Word8 or Char, since it's a Hash algorithm that can be used on binary data as well as on strings...
10:49:10 <Marvin--> ah
10:49:18 <Marvin--> probably Ptr Word8 then
10:49:55 <Janni> Yeah, that's what I have now...
10:52:00 * Grum waves a bit
10:53:44 <Janni> What's the difference between [peek/poke]Array and [peek/poke]Array0? Does [peek/poke]Array0 correspond to null(/whatever)-terminated strings(/"arrays")?
10:55:16 <Marvin--> I don't recall
10:55:21 <Janni> Ah, just found it. I was right...
10:55:29 <Marvin--> but that'd be my guess
10:55:31 <Marvin--> ah, good
10:57:39 <Janni> It's OK to use "Ptr Word8 -> Ptr Word8" without an IO monad for a hashing algorithm, isn't it?
10:58:06 <Janni> Err.. foreign ccall, btw...
11:02:03 <tmoertel> shapr: at one point nget was written in Haskell:  NNTP.hs, I'd like to start with working code from
11:02:03 <tmoertel>         someone else if possible
11:02:03 <tmoertel> *** smklsmkl (~sami@glubimox.yok.utu.fi) has joined channel #haskell
11:02:03 <tmoertel> *** Radek_MOB (~radek@ilja.moraviapress.cz) has quit: Read error: 110
11:02:03 <tmoertel>     (Connection timed out)
11:02:04 <tmoertel> <shapr> Janni: if you figure out how to do it, could you write a short summary
11:03:04 <Marvin--> Janni: yes, hopefully the hashing function is pure :-)
11:03:58 <tmoertel> Oops.  Copy-and-paste error.
11:04:48 <tmoertel> shapr: http://nget.sourceforge.net/ was written in Haskell at one point.  You may be able to find the sources somewhere.
11:05:33 <Marvin--> why rewrite it in something as awful as C++?
11:06:56 <tmoertel> user acceptance ?
11:09:13 <Marvin--> :(
11:12:31 <Grum> hm, how can I get at a default method in a typeclass I wonder?
11:13:09 <Grum> (expecting the answer: you can't.)
11:13:48 <opet> just define it in the "class Foo a where .. " block
11:14:50 <Grum> for sure
11:15:16 <opet> "get at" .. sorry, I didn't read that right
11:15:28 <Grum> but if I want to partially override the default method, in an instantiation, but let certain cases fall-through to the default...?
11:16:08 <opet> I don't know :/
11:16:14 <Grum> shame
11:16:40 <tmoertel> what are you trying to do?
11:16:44 <Grum> I do keep bashing me head against little things like this
11:16:57 <tmoertel> type classes are not the same as subclassing
11:17:34 <tmoertel> default implementations are not meant to be called during "inheritance" via the equivalent of Java's super().
11:18:00 <tmoertel> are you using type classes as OO-style subclassing ?
11:18:07 <Grum> what a pity, it would seem quite useful
11:18:33 <tmoertel> can you give me an example ?
11:18:54 <Grum> I suppose I am just being too OO-style about it though
11:42:41 <shapr> tmoertel: I've tried to find the source, it doesn't seem to be in their cvs tree
11:43:09 <shapr> oh, just in case anyone was wondering, I'm a crap unicyclist
11:43:18 <shapr> :-)
11:57:30 <Marvin--> shapr: I'd guess most people are :)
11:57:37 <shapr> I'm getting better!
11:58:09 <shapr> I can get on the unicycle and pedal twice before falling over
12:01:07 <Marvin--> :)
13:12:21 <Janni> Hmm. I have a module X that exports some functions a, b, c. It uses a function from foreign.c, but foreign.c has also other functions that aren't needed for the Haskell program. But when I compile X, I can find foreign.c's unused function names in X's binary...
13:13:33 <Janni> Furtermore foreign.c has a main-function, so GHC gives me an executable binary of this file, but I only want to have an interface with a, b and c compilated...
13:24:44 <Darius> Janni: well there is always conditional compilation, and you shouldn't need the .c for import/export just the .h
13:28:18 <Darius> I don't think you'll be able to get rid of the unused functions from the binary except by conditional compilation.  They'll be in the .c's .o object which will be linked to the final executable.
13:29:16 <Darius> Declaring them static might keep them from being exported though
13:31:23 <ham[let]> hiho
13:32:14 <Janni> Can I link foreign.c's functions "into" X.o somehow? So, that I don't need foreign.o for using X.hi/X.o with another program
13:34:51 <Darius> You could make a library.
13:37:20 <Janni> I'm reading the GHC documentation, but I'm not finding the solution how to do that...
13:37:55 <Janni> Do you mean a package?
13:40:06 <Darius> A library with ar, see man ar or info ar.
13:41:29 <Darius> I'm not sure if that works with the .hi, but I'd think it would.
13:44:36 <Janni> This is my problem: I'm working on a project A in ~/A with a subproject in ~/A/B. B holds a module that is needed by A and I'd like to compile them seperate. I thought that after I compiled B I'd get a B.hi and a B.o that could be copies into ~/A and then used by A, but it seems that I need all the x.o y.o z.o from the x.c y.c z.c used by B. That's not nice...
13:45:21 <witten> hmake rocks!
13:45:35 <Janni> It does? OK, I'll have a look...
13:58:51 <Darius> doing ar rcs libB.a x.o y.o z.o B.o then building A with -lB works for me.
13:59:24 <witten> I just got my first web page written in haskell working
13:59:27 <witten> yay
13:59:44 <Darius> where is itL
13:59:53 <witten> in long beach
14:04:26 <Janni> Darius: Yay, fine!
14:04:45 <Janni> It seems, that hmake isn't able to handle FFI
14:06:07 <Janni> Darius: Argh! When I run the program now, it's the result of the main function from one of the .c files!
14:08:21 <Darius> You are going to have to comment it out, either with a comment or conditional compilation.  Declaring the 'main' static may work too, but it may keep the unnecessary code around.
14:08:23 <Marvin--> Janni: yeah, you can't have more than one main
14:55:46 <ham[let]> bye
15:33:19 <Dark-Star> Can someone give me a quick introductory help on Haskell/Hugs?
15:34:03 <Dark-Star> I have a module which defines a new type "Picture"
15:34:28 <Dark-Star> I start hugs and do ":load Pictures.hs"
15:35:02 <Dark-Star> then I do ":load myFile.hs" which tries to use the type "Picture", however I get "Undefined Type Constructor: Picture"
15:35:27 <mgoetze> sounds like a syntax error
15:36:05 <Dark-Star> yeah, thought so too but I'm sure I typed "Picture" correct :-)
15:36:13 <Dark-Star> (i.e. with a capital P)
15:36:20 <Dark-Star> (as in the library)
15:36:25 <Dark-Star> s/library/module
15:36:38 <Igloo> Types aren't the same as constructors
15:37:13 <Igloo> Oh, not sure what hugs means by "type constructor"
15:37:21 <Dark-Star> hmmm...
15:37:33 <Igloo> Oh, wait, when you load a new file you'll unload the old one I think
15:37:50 <Dark-Star> that might explain it...
15:37:51 <Igloo> Put "import Pictures" in the myFile.hs and just load that
15:39:18 <Dark-Star> thanks, that did it!
15:43:51 <Dark-Star> how do I check for even number in haskell? is there something like "even?" or do I use (x % 2 == 0)?
15:44:21 <Smerdyakov> Why would there be any "even" when you can check like you said?
15:44:47 <Igloo> There is one, though...
15:44:50 <Dark-Star> well, in scheme there is ...
15:45:20 <Dark-Star> btw, I don't even know if "%" is the modulo operator in haskell ;-)
15:46:12 <Riastradh> It's the 'mod' function, I think.
16:14:27 <seth_> you've also got divMod, which returns the integer division result and the remainder as a tuple (n,m)
16:28:03 <witten> did anyone else notice that the guy in the newest matrix trailer who jumps and lands on the car looks like fairly bad CG?
16:28:33 <Smerdyakov> Did anyone notice that _The_Matrix_ is fairly bad?
16:28:42 <witten> nope
16:40:18 <tetryl> is haskell-libs-developers list now live?
16:46:56 <tetryl> i've sent an email 20 days ago, but it doesn't appear in sourceforge archive.
17:11:27 <tmoertel> lambdabot: @dict-help 
17:11:27 <lambdabot> I perform dictionary lookups via the following 13 commands:
17:11:27 <lambdabot> @all-dicts .. Query all databases on dict.org
17:11:27 <lambdabot> @devils ..... The Devil's Dictionary
17:11:27 <lambdabot> @easton ..... Easton's 1897 Bible Dictionary
17:11:27 <lambdabot> @elements ... Elements database
17:11:28 <lambdabot> @foldoc ..... The Free On-line Dictionary of Computing
17:11:30 <lambdabot> @gazetteer .. U.S. Gazetteer (1990)
17:11:32 <lambdabot> @hitchcock .. Hitchcock's Bible Names Dictionary (late 1800's)
17:11:34 <lambdabot> @jargon ..... Jargon File
17:11:36 <lambdabot> [there's @more]
17:11:45 <tmoertel> @more
17:11:46 <lambdabot> @prelude .... Haskell Standard Prelude
17:11:46 <lambdabot> @vera ....... V.E.R.A.: Virtual Entity of Relevant Acronyms
17:11:46 <lambdabot> @web1913 .... Webster's Revised Unabridged Dictionary (1913)
17:11:46 <lambdabot> @wn ......... WordNet (r) 1.7
17:11:46 <lambdabot> @world02 .... CIA World Factbook 2002
17:11:48 <Pseudonym> Someone implemented @more?
17:11:48 <lambdabot> [-DONE-]
17:11:53 <Pseudonym> Cool!
17:12:06 <tmoertel> shapr, I think.
17:12:08 <Pseudonym> @prelude foldl'
17:12:12 <lambdabot> *** "foldl'" prelude "Haskell Standard Prelude Dictionary": text follows
17:12:12 <lambdabot> foldl'
17:12:12 <lambdabot>   foldl' ::  (a -> b -> a) -> a -> [b] -> a
17:12:12 <lambdabot>   foldl' f a []     = a
17:12:13 <lambdabot>   foldl' f a (x:xs) = (foldl' f $! f a x) xs
17:12:18 * Pseudonym woohoos
17:12:19 <lambdabot> [-DONE-]
17:12:29 <tmoertel> @dict-help prelude
17:12:29 <lambdabot> @prelude .... Haskell Standard Prelude
17:12:29 <lambdabot> [-DONE-]
17:13:01 * tmoertel builds RPM spec for hmake
17:24:58 <Pseudonym> There's one problem with the new wiki.
17:25:09 <Pseudonym> The system of categories.
17:25:24 <Riastradh> There's another problem: it's written in Python.
17:25:26 <Pseudonym> Someone is going to want to make one of Haskell theory.
17:25:34 <Pseudonym> And the category is goign to have to be called CategoryTheory.
17:28:19 <Pseudonym> Yes, true, it's in Python.
17:28:21 <Pseudonym> That can't be good.
17:29:31 <Darius> lookitit go!
17:29:42 <tmoertel> If we write a Haskell wiki, can we call it Haki?
17:29:51 <tmoertel> ;-)
17:29:58 <Darius> At first, probably
17:30:10 <Pseudonym> Well... the web server is still called "Apache Web Server".
17:30:22 <Igloo> If you can write it in three short lines you can call it haiku
17:30:29 <Pseudonym> I think Haki is just as appropriate.
17:32:24 * tmoertel checks to see if most-recent @more and "[DONE]" code is checked in
17:32:53 <Darius> hmm, is this writing to a file? if not where is it going?
17:33:31 <tmoertel> I guess that depends on what you mean by *this* . . .
17:33:48 <Darius> GHC with the inliner in an infinite loop
17:54:33 --- topic: '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","New Learning Haskell page - http://www.haskell.org/learning.html","GUI Demos - http://repetae.net/john/computer/haskell/gui/","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","New HaWiki - http://www.haskell.org/hawiki/RecentChanges"]'
17:54:33 --- topic: set by shapr on [Wed Apr 16 17:57:14 2003]
17:54:33 --- names: list (clog archie_sihir GreyLensmen Pseudonym Darius Arnia Smerdyakov gdsx andersca jao tic witten tmoertel tetryl kunphuzil tez smkl Radek lambdabot o3 ibid flippo Fractal shapr ludde_ SyntaxPolice_ jak wax sjj opet Chilli dennisb kawfee galority norpan xkb Igloo SyntaxPolice delYsid seth_ Segora Logan Riastradh buggy emu mgoetze polli nbd)
19:28:11 <Pseudonym> I thought he deserved a homepage:
19:28:13 <Pseudonym> http://haskell.org/hawiki/HaskellBrooksCurry
19:28:54 <Smerdyakov> Pseudonym, what's with the weird margins?
19:29:04 <Pseudonym> Possibly a stray space.
19:29:22 <Pseudonym> Should be fixed now.
19:29:34 <Smerdyakov> It's too late. The damage is done.
19:32:26 <Pseudonym> Lunch.
23:25:56 <shapr> @yow
23:26:22 <Pseudonym> Paul Graham annoys me.
23:26:42 <lambdabot> WHOA!!  I'm having a RELIGIOUS EXPERIENCE right NOW!!
23:26:44 <lambdabot> [-DONE-]
23:27:31 <Pseudonym> Indeed.
23:27:34 <Pseudonym> G'day, shapr.
23:27:47 <Pseudonym> During the netsplit, I was ruminating about how much Paul Graham annoys me.
23:27:57 <tmoertel> Hello, all.
23:28:02 <Pseudonym> G'day.
23:28:33 <Pseudonym> He has to include, in every writing, a piece about how much greater Lisp is than everything else, or how restrictive static typing is.
23:28:42 <Pseudonym> Why can't we functional programmers learn to get along?
23:28:56 <Pseudonym> We can take over the world together.
23:29:14 <mgoetze> shapr: up early?
23:30:30 * Darius isn't a great fan of Paul Graham either for about the same reasons.
23:30:48 <Pseudonym> He's a very smart, very eloquent and very insightful chappy.
23:30:56 * tmoertel likes Graham crackers, however.
23:31:09 <Pseudonym> He just has to spoil it.
23:31:52 <seafood> I think Paul Graham's opinion is interesting.
23:32:05 <seafood> You see, I can follow his arguments. He's just not in full possession of the facts.
23:32:08 <Pseudonym> I thought it was interesting the first time.
23:32:20 <seafood> But if he was, he might come around to static typing.
23:32:36 <Pseudonym> I can "scribble" in Haskell.
23:32:50 <Pseudonym> Haskell infers most types for me.
23:32:58 <Pseudonym> So I don't need to supply them, generally.
23:33:17 <Pseudonym> And hacking with "data" declarations is also scribbling.
23:33:31 <delYsid> yah, but then there is monomorphism
23:33:35 <tmoertel> Does he specifically comment on "limitations" of typing in ML or Haskell?
23:33:36 <delYsid> which lisp laughs about :)
23:33:45 <shapr> goood morning!
23:33:49 <Pseudonym> True, but a lot of Haskellers don't like that either.
23:34:08 <seth_> there is this slight problem that without static typing you have no idea if the program really works or not.
23:34:10 <Pseudonym> tmoertel: I think it's more that it places limitations on how he likes to hack.
23:34:22 <Pseudonym> seth_: That's true with static typing, too. :-)
23:34:46 <shapr> personally, I think static/dynamic typing is unimportant....
23:34:53 <seth_> Pseudonym: no, not really.  You don't have 100% confidence, but you have a _lot_ more.
23:34:53 <shapr> I'd prefer 'firm' typing
23:34:54 <Pseudonym> Oddly enough, though, Paul Graham's reasons for disliking static typing are the complete opposite of other Lisp evangelists.
23:35:08 <seth_> shapr: no, because errors caught at run time are a serious problem.
23:35:16 <Pseudonym> Others say you don't need types because you trust the compiler too much.  You should _understand_ your code.
23:35:25 <shapr> seth_: I disagree, I've successfully used Python for years.
23:35:36 <delYsid> seth_: its easy to write haskell programs which produce exceptions
23:35:45 <delYsid> just write recursive functions without a base case
23:35:46 <seth_> shapr: I use python at times also.  But for large programs it makes no sense.
23:35:53 <shapr> I disagree with that too :-)
23:36:11 <Pseudonym> Whereas Paul Graham is the opposite: Static typing is bad because you spend all your time satisfying the compiler's whims.
23:36:22 <seth_> shapr: you can disagree, but I suspect you haven't been involved in projects with 5 million lines of code.
23:36:23 <Pseudonym> It's too strict and it's not strict enough.  You can't win.
23:36:29 <tmoertel> For Java, C, C++, he's got a point.
23:36:37 <shapr> my opinion is that static typing is an internal automated 'proof' machine that you can use as a support for your program, but you are not required to use.
23:36:41 <tmoertel> Haskell strikes the right balance.
23:36:51 <tmoertel> shapr: agreed.
23:36:57 <Pseudonym> seth_: Any project with 5 million lines of code I'm willing to bet has some kind of scripting system built in.
23:37:11 <seth_> Pseudonym: hardly.
23:37:17 <shapr> and probably several languages badly implemented ;-)
23:37:22 <Pseudonym> I disagree with "hardly".
23:37:29 <Pseudonym> I'll concede "sometimes not".
23:37:30 <seth_> Pseudonym: well, I've worked on many.
23:37:36 <shapr> in my opinion, the static and dynamic typing thing is just a distraction from the real point
23:37:38 <shapr> http://c2.com/cgi-bin/wiki?SoftTyping
23:38:14 <Pseudonym> Anyway, my point is that you don't want 5 million lines of Python.  You want 4 million lines of something stronly typed and a bit of python to glue the pieces together.
23:38:25 <Pseudonym> Actually, seth, I can think of a counter-example.
23:38:37 <Pseudonym> There are applications which are a couple of million lines of Erlang.
23:38:43 <shapr> yup
23:38:54 <shapr> I wonder how many lines of code in Zope
23:38:56 <seth_> Pseudonym: you haven't been in commercial environments.  It just doesn't work that way.
23:39:04 <delYsid> well, but I seriously doubt python would work for a 5 mio line project, esp. since its only an interpreted language...
23:39:05 <Pseudonym> I have been in commercial environments.
23:39:08 <delYsid> and byte-code doesnt count!
23:39:12 <Pseudonym> My current project is about 2 million lines of C++.
23:39:13 <shapr> I've been in commercial environments too.
23:39:29 <Pseudonym> Admittedly not 5 million, but still "big".
23:39:34 <shapr> I worked on an app with 65,000 lines of VB
23:39:45 <seth_> shapr: my condolences.  :)
23:39:46 <shapr> that was .... something.
23:39:49 <Pseudonym> And I know it doesn't work that way.
23:39:55 <Pseudonym> But it should. :-)
23:40:01 <Pseudonym> People don't mix languages enough.
23:40:07 <shapr> yah, totally
23:40:08 <seth_> That's true, I agree.
23:40:13 <shapr> there is no one single solution
23:40:31 <seth_> I mostly consider it a victory if I can block people from using Perl.
23:40:34 <shapr> http://c2.com/cgi-bin/wiki?AlternateHardAndSoftLayers
23:41:53 <Pseudonym> Or even: http://www.haskell.org/hawiki/DomainSpecificLanguages
23:41:57 <shapr> yah, that too
23:42:05 * Pseudonym spammed RecentChanges
23:42:40 * shapr looks
23:43:01 <Pseudonym> I mostly added categories.
23:43:25 <Pseudonym> I thought Haskell Curry deserved a home page, though.
23:43:57 <shapr> yah I agree
23:45:27 <tmoertel> shapr: are you going to do your NNTP thing ? 
23:46:41 <shapr> tmoertel: I am, though it'll be a lot faster if I can find the nget sources.
23:47:08 <shapr> oh, I've discovered that much exercise can be had by spending several hours falling off a unicycle
23:47:40 <Pseudonym> When you can juggle on the unicycle, I want to see a video.
23:48:01 <shapr> As soon as I can ride the unicycle, I'll be able to juggle on it
23:48:06 <shapr> probably even contact juggling
23:48:15 * tmoertel gives in to sleepiness
23:48:20 <Pseudonym> Night.
23:48:22 <tmoertel> g'night, all
23:48:24 <shapr> g'nite tmoertel
23:55:17 <shapr> Pseudonym: have you seen any NNTP code for Haskell?
23:55:49 <Pseudonym> Nope.
23:55:53 <Pseudonym> I wrote some for Perl once.
23:56:23 <shapr> I've been struggling with some Python code I wrote years ago, uses python's nntplib
23:56:39 <shapr> it is intolerable.
23:57:18 <shapr> I'd like to rewrite it, but not in Python
23:58:38 <lament> noooo!
23:58:52 <shapr> lament: what?
23:59:00 <lament> in python!
23:59:06 <lament> :)
23:59:17 <shapr> nah
