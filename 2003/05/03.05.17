02:34:33 * seth is away: Off to the glue factory
04:07:43 <alanl> hello
04:49:51 <Marvin--> damn
04:51:26 <Marvin--> how do I get existential types?
04:51:53 <esap> it's spelled forall (in ghc extensions)
04:52:12 <Marvin--> won't that get me a universal type?
04:52:54 <Marvin--> I have this compiler split up in different pluggable phases
04:53:04 <esap> well, if you use it with data, you get existential type.
04:53:12 <Marvin--> hmm
04:54:35 <esap> marvin: see http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#EXISTENTIAL-QUANTIFICATION
04:54:40 <Marvin--> anyway, I want to represent the backend selection as a function  Program -> a  for some showable a, since the backends have different target ASTs
04:55:04 <Marvin--> maybe I'm way out in the deep, maybe existential types isn't what I want
04:55:07 * Marvin-- sucks at type theory
04:56:31 <esap> marvin: let me suggest using "req a -> m b" as the type of the components, where m is a monad, and req is the type of requests you can make to it. Then if you standardize the type of req, you can write multiple backends easily.
04:59:10 <Marvin--> there is only one request, this is a very simple compiler
05:00:52 <esap> marvin: that is ok, actually I would expect there to be around 3 different choices for req and m. The idea is that the frontend 'monad' should be the same as the backend request.
05:01:23 <Marvin--> but maybe  data Backend = forall a. Show a => Backend (Program -> Reader Options a)  would be a good idea
05:02:29 <esap> Sure, you can do that.
05:02:42 <Marvin--> I'd have  data Frontend = Frontend (String -> Reader Options Program)   hmm, yeah, this'd be nice
05:06:55 <esap> Well my idea was more like data Frontend a = FrontEnd (String -> Program a) ; data Backend a = Backend (Reader Options a), then write backend :: FrontEnd a -> Backend a and apply :: (FrontEnd a -> Backend b) -> FrontEnd a -> FrontEnd b
05:08:37 <Marvin--> actually, a backend would probably be  -> String  anyway
05:10:03 <esap> so then you would use 'Backend String'. The idea is that you can compose the backend and frontend with other code, where you might need some other type than String.
05:10:41 <Marvin--> I think I'll pass, I need this to be simple and quickly written rather than being able to perhaps reuse it in another project five years from now
05:10:53 <esap> ok.
05:11:07 <Marvin--> the "compilation" in this project IS string to string translation
05:16:21 <tic_> hey guys
05:16:25 <tic_> I have problem with the CGI module.
05:16:46 <tic_> If I use "hidden" to send along data with a form (gui), it's not sent, for some reason.
05:18:36 <Marvin--> "the" CGI module?
05:21:44 <ludde> why does freebsd suck so much?
05:22:36 <opet> ludde: what's the problem?
05:23:15 <ludde> opet: I get "no buffer space available" when calling socket(), but netstat -m says i have buffers.
05:24:52 <opet> hmm :(
05:27:51 <tic_> heh, okay.
05:27:53 <opet> I think the problem is that error message can be caused by lots of different things
05:27:59 <tic_> Marvin--, well, problem solved anyhow.
05:28:15 <tic_> Marvin--, although, you could help me with info on where to find regexp functions?
05:29:16 <ludde> opet: like?
05:31:27 <Marvin--> tic_: for ghc(i), Text.Regex, for hugs and nhc I don't know
05:31:46 <tic_> Marvin--, thanks. Guess I'll have to use ghc then.
05:36:22 <opet> ludde: actually running out of bufs, hardware/driver problems with the nic..
05:36:58 <opet> ludde: what nic is it?
05:41:41 <opet> ludde: have you tried playing with net.inet.tcp.{sendspace|recvspace} ?
05:58:55 <ludde> opet: de0
05:59:03 <ludde> opet: yeah, i've lowered those to 8192
06:39:37 <Marvin--> heh
06:39:44 * Marvin-- does evil things to get the type correct
06:41:17 <Marvin--> case ... of { ... ; Error e -> do { ... ; exitWith (ExitFailure 1) ; undefined } }
06:46:50 <mattam> hi! can I flood a little ?
06:47:08 <Marvin--> how many lines?
06:47:32 <mattam> some, a paragraph of the Gentle Introduction
06:48:25 <Marvin--> can't you give me an URL and a reference instead?
06:48:34 <mattam> yes, section 12.1
06:48:43 <mattam> http://www.haskell.org/tutorial/pitfalls.html
06:49:04 <Marvin--> okay
06:49:09 <Marvin--> ah, that one :-)
06:49:50 <mattam> I think his example is bad as the ill-typed expression wouldn't work if the g function was defined in a let statement
06:49:57 <mattam> either
06:51:08 <mattam> except, if it was let g x = 1 or something dumb like that
06:52:19 <mattam> or maybe there is a way to make a function such that f g result in ([], 'a') ? 
06:53:20 <Marvin--> isn't the problem rather with f's type? wouldn't it need rank-2 polymorphism? e.g. f :: (forall a. a -> a) -> ([b], Char)
06:54:22 <mattam> yes, it's ill-typed
06:55:20 <Marvin--> I mean, it doesn't matter *where* you define f, that definition won't work without rank-2 polymorphism
06:55:41 <mattam> but the example was here to demonstrate let-bound polymorphism
06:55:53 <Marvin--> yes
06:56:12 <wli> how is rank N defined? I forget...
06:56:39 <Marvin--> wli: I don't know, I'm guessing that the more parentheses you put around the forall, the higher rank you have ;)
06:57:09 <Marvin--> wli: I mean,  f :: a -> a  is really  f :: forall a. a -> a,  which is different from  f :: (forall a. a -> a) -> ...
06:58:41 <mattam> the thing is i don't see what means let-bound polymorphism compared to the ordinary polymorphism I have seen during the previous chapters
06:58:58 <mattam> what is limiting in it ?
06:59:13 <Marvin--> you got me there, I don't know
07:38:07 <tic_> is there an -easy- way to use Regexps?
07:44:21 <Marvin--> no :) not in any language :)
07:57:52 <tic_> I think python's way is pretty easy, though.
07:58:02 <tic_> just have a hard time finding documentation for any regexp modules for any haskell implementation.
08:01:43 <Verbed> http://pleac.sourceforge.net/pleac_haskell/strings.html
08:01:56 <Verbed> It seems to have some examples of regular expressions.
08:04:38 <wli> there's a regex lib somewhere
08:04:45 <Verbed> http://www.dcs.gla.ac.uk/~meurig/regexp/
08:04:50 <Verbed> ( Found at mentioned link )
08:05:20 <wli> GRRR I wish the stuff would work with shlibs like everything else
08:05:42 <Verbed> "It provides polymorphic regular expressions - instead of just searching along strings, we can search along a list of any type over which equality is defined."
08:05:45 <Verbed> Interesting.
08:06:31 <Marvin--> tic_: uh, there's a Text.Regex module in ghc, it's right there in the ghc documentation
08:07:42 <tic_> Marvin--, I only found it in the "(old) haskell libraries" section.
08:08:00 <tic_> Marvin--, thought I wasn't supposed to be using it.  And, it seems very difficult to use. :)
08:10:25 <Marvin--> tic_: it's in the base package
08:10:45 <tic_> m'kay
08:10:54 <Marvin--> http://haskell.org/ghc/docs/latest/html/base/Text.Regex.html
08:10:58 <tic_> danke.
08:11:51 <tic_> matchRegex (mkRegex "blah*") "blahmoo" => Just "blahmoo"
08:11:52 <tic_> ?
08:12:08 <Marvin--> "Returns: Just strs if the match succeeded (and strs is the list of subexpression matches), or Nothing otherwise."
08:12:38 <Marvin--> *Main> matchRegex (mkRegex "[0-9]*") "123"
08:12:38 <Marvin--> Just []
08:12:38 <Marvin--> *Main> matchRegex (mkRegex "([0-9]*)") "123"
08:12:38 <Marvin--> Just ["123"]
08:12:51 <Verbed> New Regular Expression library from Glasgow found here: http://www.dcs.gla.ac.uk/~meurig/regexp/
08:12:52 <Marvin--> can't get much simpler than that, can it? :)
08:14:32 <tic_> ah, yeah.  That was pretty easy. :)
08:15:23 <tic_> Marvin--, can you run it through ghci without compiling?
08:15:28 <tic_> Marvin--, it being the app.
08:15:33 <Marvin--> tic_: yes
08:15:34 <tic_> Marvin--, right now I have a #!/usr/bin/env runhugs
08:15:39 <tic_> Marvin--, could I replace it with ghci?
08:15:48 <Marvin--> tic_: oh, no I don't think so
08:16:04 <Marvin--> tic_: there's no equivalent to runhugs that I know of
08:17:22 <tic_> dang.  okay, no biggie
08:17:31 <tic_> thanks!
08:25:44 <wli> you could do it with an expect script
08:25:53 <wli> at the cost of some overhead
08:28:10 * shapr yawns
08:30:08 <Marvin--> shapr: morning?
08:31:59 <shapr> hi Marvin-- 
08:32:07 <shapr> Marvin--: nah, just tired
08:32:55 * Marvin-- is happily using System.Console.GetOpt
08:34:22 <Marvin--> shapr: you should see my hack in parseOptions
08:34:38 <Marvin--> on second thought, no, maybe you shouldn't
08:37:16 <Marvin--> exitWith (ExitFailure 1) >> error "This shouldn't happen"
08:38:26 <jak> Is there a Haskell compiler that targets .NET ?
08:38:28 <Verbed> Hello Shapr
08:38:33 <shapr> hi Verbed, how are you?
08:38:37 <Akasha> jak: i think so
08:38:50 <shapr> hi Akasha 
08:38:56 <Akasha> jak: or at least a functional language based compiler
08:39:00 <Akasha> hi shapr
08:39:01 <jak> hehe
08:39:06 <Akasha> hmm
08:39:17 <Akasha> i can dig up my references if you're interested
08:39:24 <jak> yes please if you've got it
08:39:42 <Verbed> Shapr, Well.  I was finally able to attain a certain rare CD.
08:39:49 <shapr> Verbed: which CD?
08:40:00 <Verbed> Scott Walker, Climate Of Hunter
08:40:10 <Verbed> I found it in The Netherlands via Ebay.
08:40:16 <Akasha> jak: googling for mondrian and .Net will probably get you similiar references :-)
08:40:22 * Marvin-- notes that yep, he's firmly in the CCG swamp as he started to ask "what's the rarity?"
08:40:34 <Akasha> Marvin--: CCG?
08:40:39 <Marvin--> Akasha: collectible card game
08:40:46 <Marvin--> Akasha: like magic the gathering
08:40:52 <Marvin--> though I'm playing another
08:40:55 <jak> Akasha: thanks
08:40:58 <Akasha> ah! :-)
08:41:10 <Akasha> my brother would love you
08:41:13 <Marvin--> heh, cute, getProgName returns "<interactive>" inside ghci
08:41:19 <Marvin--> Usage: <interactive> [flags...] [in-file [out-file]]
08:42:02 <Marvin--> Lilith: does he play magic?
08:42:13 * shapr grins
08:42:37 <Lilith> Marvin--: he's a rabid gamer. he plays that and pokemon and goodness knows what else
08:42:44 <Marvin--> ick, now I understand why programs like E has a gazillion flags
08:42:50 <Marvin--> Lilith: iik, pokemon
08:43:00 <Marvin--> Lilith: actually, I've played pokemon a few times to check it out, with a borrowed deck
08:43:08 * Marvin-- is guilty as charged
08:44:57 <Verbed> Have you ever played Magic at a tournament level Marvin--?
08:45:06 <Marvin--> iMain ["--backend=otter","/tmp/tmp1"] ... cool, it works
08:45:11 <Lilith> i'm actually trying to channel his computer gaming interests into something more productive
08:45:13 <Lilith> like writing games
08:45:15 <Marvin--> Verbed: nope, I only played Magic a short while
08:45:18 <Lilith> but i've failed so far
08:45:22 <Marvin--> Verbed: <Marvin--> though I'm playing another
08:45:36 <Verbed> Marvin, Yes, I saw that, though, most start with Magic, yes?
08:45:40 <shapr> I played MTG in tournaments for awhile.
08:45:42 <Marvin--> I guess
08:46:02 <Lilith> Verbed: i think that's a generation ago
08:46:09 <Marvin--> I play Game of Thrones, we arranged a small local tournament ourselves a month back or so
08:46:14 <Lilith> kids my brothers age tend to start with pokemon now
08:46:31 <Marvin--> Lilith: yes, but I don't think I'm your brother's age
08:46:47 <Lilith> Marvin--: true. hence my comments about generations ago. :-)
08:46:49 <Lilith> (he's 10)
08:47:21 * Marvin-- grumbles at being accused of belonging to "an older generation"
08:47:59 <Lilith> Marvin--: i don't know how old you are, but i'm pretty sure you're not my brother's age:-)
08:48:30 <Marvin--> I played some Magic in high school, five years ago or so, never really got into it... I enjoy playing the odd game with a borrowed deck, but I never spent money on it or built any decks myself
08:48:48 <Marvin--> can't say that about GoT though, urgh
08:49:08 <saz> should i be scared?
08:49:13 <Igloo> I've never learnt a collectible game. I must try some time to see how it works.
08:49:17 <saz> i found qbasic on my little brothers computer!
08:49:22 <shapr> Igloo: they're crack for geeks, don't do it
08:49:31 <shapr> plus Haskell blows them away
08:49:35 <Verbed> It's only recently that I've played Magic at a tournament level, and only online.
08:49:46 <shapr> I spent far too much money on Magic The Gathering.
08:49:54 <Marvin--> hmm, hPutStr is strict, right? is hGetContents strict?
08:49:55 <Igloo> shapr: I'm just curious as to how they encourage you to buy more without making it richest man wins
08:50:08 <Verbed> Igloo:  Oddly, some of the best cards are commons.
08:50:21 <shapr> Igloo: by having at least two categories, unlimited, and limited to the most recent cards.
08:50:36 <Lilith> shapr: that's where you trade with other folks :-)
08:50:38 <shapr> I still have around five thousand MTG cards in a garage in the USA
08:50:40 <Igloo> What's to stop someone just taking the best cards to make his deck?
08:50:42 <Lilith> saz: not really. 
08:50:51 <Lilith> saz: i started with qbasic at 14 too
08:50:52 <Marvin--> Igloo: which is why I don't really have an interest in playing in big tournaments, we are a gang of nine people, trying to spend roughly the same amount of money on our decks to stay balanced
08:50:55 <Verbed> Igloo: In Magic, there's a maximum of 4 of any particular card per deck.
08:51:02 <saz> Lilith: i guess
08:51:05 <Marvin--> Igloo: because of the deck restrictions
08:51:06 <saz> but it's so.. ick
08:51:14 <Igloo> OK, but there's still a best deck (or maybe a set of best decks)
08:51:16 <Lilith> saz: actually most CS people i know have touched basic of some form at some stage 
08:51:20 <Marvin--> Igloo: and sorry, no matter how good your deck is, there is always a deck that'll beat it :)
08:51:30 * saz started with futureBASIC
08:51:31 <shapr> Verbed: at one point I owned  lotus, moxen, mana drains, timetwister, timewalk, ancestral recall, everything
08:51:31 <Verbed> Igloo: Although 4 rare ( expensive ) cards are sometimes more efficient than uncommon or common compromises, the majority of decks are common/uncommon.
08:51:37 <saz> which was pretty ancient, at the time
08:51:46 <Marvin--> shapr: good god
08:52:05 <shapr> Marvin--: I had one or more of *everything*
08:52:10 * Igloo fails to be convinced by the concept
08:52:11 <Marvin--> shapr: I don't think I know anyone who has a lotus, I know guys with one mox of each colour and stuff like that, but...
08:52:44 <shapr> I had a pretty massive collection.
08:52:49 <shapr> I did okay in the tournaments
08:53:01 <Marvin--> Igloo: 75% of the game is the deck building, you can spend an insane amount of money on cards and still have a crap deck because you just shove expensive cards into it without having them work together
08:53:03 <shapr> my friends and I designed some stupendously bizarre decks.
08:53:55 <Verbed> Igloo: For example, in the current standard tournament environment, two of the better deck 'archetypes' are 'RG Beatdown' and 'Psychatog'.  The first costs around $240 to purchase every single card, while Psychatog is $100 cheaper.  Each deck has its own advantages and weaknesses.  Psychatog is extremely difficult to play correctly.
08:53:57 <shapr> at one point the chains of mephistopheles and millstones were cumulative, I once ran someone out of cards on their third? turn I think
08:54:30 <Marvin--> shapr: :) discard decks are fun :)
08:54:50 <Marvin--> shapr: I particularly like the instant that forces the opponent to discard half his deck, I've forgotten what it's called though
08:55:02 <shapr> Marvin--: must be a new one
08:55:16 <shapr> I'd rather obsess about lambda calculus actually
08:55:31 <Marvin--> shapr: I play a semi-discard deck in GoT right now, but it's a bit harder since you don't lose when you run out of cards in your deck, you just can't draw any cards, and there are cards that move cards from your discard pile to your deck et.c.
08:56:04 <Lilith> shapr: at least lambda caculcus is free?
08:56:08 <Lilith> :-)
08:56:16 <Marvin--> so the discard theme isn't a winning concept, I think, but I play it because it's great psychology :))
08:56:17 <shapr> Lilith: and it has larger borders as well
08:56:30 <Riastradh> Lilith - No, it's totally proprietary and owned by a major corporation you've never heard of.
08:56:32 <Marvin--> "whoops, there you go, you'd have needed those event cards against me, tough luck"
08:56:36 <shapr> part of the reason I stopped playing MTG was that I had explored the problem/solution space too thoroughly, it got boring.
08:56:38 <Lilith> obsessing about math tend to be cheaper than obsessing over games on average
08:56:55 <wli> not really the books are insane
08:57:02 <wli> $150 a pop
08:57:05 <Lilith> hmm
08:57:06 <wli> etc.
08:57:12 <wli> well there's Dover stuff
08:57:14 <Lilith> that's what libraries and universities are for
08:57:15 <shapr> Marvin--: I still have some Alphas if you want 'em
08:57:16 <Lilith> :-)
08:57:19 <wli> but they aren't usually the good ones
08:57:29 <Lilith> wli: so what are the good ones?
08:57:29 <Marvin--> shapr: as I said, I don't play Magic
08:57:37 <shapr> ok, too bad ;-)
08:57:47 <Marvin--> shapr: I have a friend that might be interested though
08:57:51 <shapr> ok
08:57:53 <Marvin--> argh
08:57:58 <Marvin--> damn this stupid resource busy
08:58:08 <Marvin--> you'd think ghci could close the damn files when I reload the modules
08:58:30 <shapr> wouldn't that be part of GC?
08:59:12 <Marvin--> hmm, I get resource busy even when I've restarted ghci, something's fishy here
09:01:04 <Marvin--> d'oh, typo on my part
09:01:04 * Marvin-- swears
09:01:36 <wli> Lilith: Springer-Verlag
09:02:55 <o3> hmm, class declarations in TH isn't working
09:03:11 <tic_> hmm.. Where would the Text.Regex module be located?
09:03:14 <tic_> import Text.Regex?
09:03:22 <shapr> I've been reading the TH paper lately, TH is *very* cool
09:03:24 <tic_> (using ghc --make File.hs)
09:03:36 <Marvin--> tic_: yes
09:03:43 <shapr> Igloo: any idea when we can expect a TH-enabled release?
09:03:59 <Igloo> No
09:04:00 <tic_> Marvin--, ghc...: can't find module `Text.Regex'
09:04:17 <Igloo> That file lies slightly too - [| ... |n] isn't in TH (yet)
09:04:19 <Marvin--> tic_: what version of ghc do you have?
09:04:33 <tic_> 5.022
09:04:35 <tic_> 5.02.2
09:05:43 <Marvin--> hmm, I've got 5.04.2
09:05:50 <Marvin--> maybe it got moved to base recently :/
09:06:30 <tic_> okay, so how would I go about importing it then?
09:06:39 <o3> shapr: will til you start using it 8)
09:06:57 <Marvin--> tic_: then I don't know, maybe import Regex and -package text
09:07:02 <shapr> tic_: tried -package text ?
09:07:18 <tic_> i'll try
09:07:26 <Marvin--> is System.IO.bracke the right function to use for catching IO errors?
09:07:30 <Marvin--> .bracket obviouslyt
09:07:31 <Marvin--> argh
09:07:49 <d-bugd> those of you who programs haskell in windows, which texteditor/ide do you use?
09:08:00 <tic_> yup, worked. thatnks.
09:08:04 <wli> I just vi in an xterm
09:08:12 <shapr> d-bugd: I use xemacs
09:08:27 <d-bugd> i meant Microsoft Windows(TM), not a window in general, wli :)
09:08:32 <Marvin--> I don't use windows
09:08:32 <shapr> hej d-bugd, did you used to go by the nickname debug?
09:08:35 * Riastradh doesn't use Windoze, so hah!
09:08:58 <d-bugd> shapr: no, i always use d-bug+extension
09:09:06 <shapr> d-bugd: ah, so you must be new here.
09:09:07 * Marvin-- thinks feenode is a pretty unixy network
09:09:14 <shapr> d-bugd: welcome to the world of purely functional programming
09:09:31 <Marvin--> Ok, modules loaded: Main2, Otter, TPTP, HeliumFrontend, Types, Pat2, AST.
09:09:32 <Marvin--> yay
09:09:52 <d-bugd> did i say: "those you use who don't use MS Windows, yell out your hate"?
09:10:06 <d-bugd> ;)
09:10:12 <Marvin--> d-bugd: no, and we didn't yell out our hate either
09:10:22 <Lilith> always emacs
09:10:26 <shapr> yay emacs!
09:10:27 <d-bugd> shapr: thanks
09:10:30 <Marvin--> wli: using vi when there is vim is kinda twisted, y'know
09:10:38 <shapr> Lilith: hey, have you seen the HaskellMode page on the HaWiki?
09:10:49 <Lilith> i only use vi over a slow telnet/ssh session
09:10:53 <shapr> d-bugd: are you learning Haskell for school or fun?
09:10:58 <Marvin--> same here, otherwise I use vim
09:11:00 <wli> vim doesn't live up to its name, it's vi degraded in all truth
09:11:02 <Marvin--> or vim-gtk
09:11:03 <shapr> Lilith: you can use emacs to edit remotely with tramp
09:11:04 <Lilith> shapr: yes. :-) 
09:11:09 <Lilith> oh?
09:11:11 <Lilith> hmm
09:11:16 <wli> shapr: wtf???
09:11:23 <Lilith> vim is weird
09:11:27 <shapr> wli: remote editing?
09:11:33 <wli> YTF would anyone gtk-ify vi?
09:11:35 <Lilith> as in, it depends on who installed it and what architecture
09:11:40 <shapr> wli: tramp lets you do remote editing via ssh, telnet, etc
09:11:43 <Lilith> it's mostly glorified vi
09:11:50 <Marvin--> wli: copy&paste improvements for one
09:11:52 <Lilith> shapr: ah cool
09:11:55 <d-bugd> shapr: for fun, we used SML in school
09:12:17 <Marvin--> funny that, I only use SML when beaten with a stick
09:12:21 <shapr> d-bugd: ah, nifty. Have you already seen http://www.haskell.org/learning.html ?
09:12:52 <Marvin--> heeey, damn you bracket
09:12:57 <Marvin--> isn't bracket m f g supposed to execute f before g?
09:13:13 <d-bugd> shapr: i bought school of expression months ago, but didn't have time to read it. I'm fascinated by "odd" languages, like lisp, scheme, ruby, smalltalk
09:13:26 <Riastradh> What's 'odd' about those languages?
09:13:38 <shapr> heh, I agree with Riastradh 
09:13:48 <Marvin--> me too
09:13:50 <shapr> I'm fascinated by programming
09:14:01 <Marvin--> well, lisp is odd in that it doesn't have a concrete syntax, only abstract :-)
09:14:05 <wli> strict, dynamically typed, woops that completely specifies everything but syntax
09:14:05 <shapr> d-bugd: if you haven't already investigated Self and prototype oriented programming, you might like it also.
09:14:24 <d-bugd> they're odd when you're making money at day time on c++ and .net :)
09:14:28 <Lilith> shapr: is that a book? i'm reading books on programming languages
09:14:29 <Riastradh> Marvin--, what's 'odd' about that, though?
09:14:35 <wli> I'm not big on object orientation
09:14:42 <Marvin--> Riastradh: most programming langauges do have concrete syntaxes
09:14:53 <shapr> Lilith: the stuff about Self? Self is a language that's sort of related to Smalltalk
09:14:56 <Riastradh> Well, rather, what do you define as an 'abstract' or 'concrete' syntax?
09:15:05 <Lilith> "Programming Languages: Theory and Practice"
09:15:23 <Lilith> sort of interesting stuff with obvious biases in it
09:15:27 <shapr> the Hotspot Java VM uses nifty tricks developed in the Self VM
09:15:37 <Marvin--> Riastradh: I've read that when McCarthy created lisp, he only created the internal abstract syntax that the interpreter worked with and figured "someone'll come along after me and give it a decent frontend" but nobody did
09:15:38 <shapr> poly-inline caching for example
09:15:50 <shapr> similar to Transmeta workings
09:15:53 <Riastradh> Marvin--, you haven't answered my question.
09:15:56 <d-bugd> i bet the mono vm is much faster than ms' :)
09:16:08 <Marvin--> Riastradh: I agree that it's hard to draw the line
09:16:30 <Riastradh> I didn't ask you to 'draw the line'; I asked you to describe what you meant by 'concrete' and 'abstract.'
09:16:44 <wli> Marvin--: those were supposed to be the "m-expressions" 
09:16:55 <Lilith> shapr: have you had a look at the different JVMs out there?
09:17:05 <wli> Marvin--: no idea if there was ever even a description put out for them...
09:17:11 <shapr> Lilith: yah, a bit... have you heard of JRVM?
09:17:14 <Marvin--> Riastradh: concrete syntax is the friendly syntax you put in a file that the compiler parses, abstract syntax is the computer-friendly stuff used internally inside the compiler
09:18:00 <shapr> Lilith: I'd be much happier with Java if JRVM + GNU Classpath = at least one totally open source JVM
09:18:17 <Marvin--> handle is closed
09:18:18 <Marvin--> dammit
09:18:25 <d-bugd> i used freebsd for years and the lack of java wasn't too fun
09:18:49 <Riastradh> wli - M-expressions died long ago, but d-expressions now exist for Dylan and an experimental procedural macro system for it.
09:18:50 <opet> java support on freebsd is much better now
09:18:50 <d-bugd> my friends who did a lot of java development had to switch to linux for performance reasons
09:19:11 <opet> native 1.4 hotspot etc
09:19:17 <Lilith> shapr: get back to you later. after i deal with ex *sigh*
09:19:26 <shapr> no worries :-)
09:21:08 <Marvin--> time for dinner
09:27:27 <wli> Riastradh: wow
09:28:40 <wli> Lilith: could be worse, like ed
09:46:12 <tic_> hm
09:46:37 <tic_> How do you case-match against a non-empty list?
09:46:41 <tic_> case ... of
09:46:49 <tic_>   Just [] -> []
09:47:02 <tic_>   Just [filled list] -> [blah blah]
09:47:02 <Riastradh>   Just (head : tail) -> ...
09:47:06 <tic_> aha
09:47:10 <tic_> thanks.
10:37:59 <Lilith> yay
10:38:01 <Lilith> finally
10:39:01 <Igloo> Hmm?
10:39:22 <Lilith> long drawn conversation with ex
10:40:47 <Lilith> he gets bitter over the fact that i'm over him and he's not over me
10:40:53 <Igloo> Ah  :-(
10:42:42 <Marvin--> Lilith: such conversations tend to suck, for both parties :/
10:43:02 <Smerdyakov> But everyone likes parties!
10:43:09 <Lilith> heh
10:43:29 <opet> party party party!
10:44:02 <Lilith> i don't want to upset him too much. a person with root is a dangerous thing.
10:44:34 <Marvin--> LOL
10:44:39 <Lilith> plus i prefer to be friends with ex'es
10:44:47 <tic_> heh
10:44:48 <Marvin--> yeah, that's always nice
10:45:11 <tic_> I usually don't want to be friends with ex's the first period of time though.
10:46:21 <Lilith> tic_: hard when you hang out in the same places with mutual friends
10:46:30 <tic_> Lilith, yeah, of course.
10:56:29 <o3> Lilith: i see your sleeping cycle is still out of whack :)
10:57:11 <o3> Lilith: i found two bugs in TH tonight :(  might have to write some perl to get ghc to do what i want it to do
10:57:40 <Lilith> o3: ack. :(
10:57:48 <Lilith> o3: so's yours :-)
10:58:07 <o3> well, thesis is due, i'm working well right now -- gotta take advantage of those periods, you know :)
10:58:37 <Lilith> o3: i'm getting people to force me awake tomorrow so hopefully i'll change my sleep cycle for the better
10:59:13 <Lilith> o3: i have to prepare myself for a possible morning thesis presentation
10:59:39 <Lilith> hopefully chak can wrangle a decent time for us
10:59:43 <o3> ah.  so the schedule isn't out yet?  isn't it week 12 next week?  or am i going mad?
10:59:50 <Lilith> nooo
10:59:56 <Lilith> week 11
11:00:05 <o3> week 11?  oh, sweet! :)
11:00:07 <Lilith> don't scare me. i'm not looking forward to it
11:00:10 <o3> got three more weeks left!  woohoo
11:01:09 <Lilith> o3: we need a deadline bot :-) 
11:01:18 <Marvin--> o3: haha
11:01:25 <o3> @deadline
11:01:26 <lambdabot> Sorry, I don't know the command "deadline", try "lambdabot: @listcommands"
11:01:42 <o3> hmmm
11:01:52 * o3 gets another idea on how to procrastinate doing thesis
11:02:11 <Marvin--> @at tomorrow 7.00 system "play /music/Blind\ Guardian/..."
11:02:13 <lambdabot> Sorry, I don't know the command "at", try "lambdabot: @listcommands"
11:02:14 <Marvin--> ;)
11:03:44 <Lilith> o3: keg guys have a deadline bot. or you could write a module for lambdabot *evil grin*
11:05:17 <o3> Lilith: i'm thinking of the latter
11:05:36 <o3> i just hope simon/simon/ian will be fixing these TH bugs
11:09:46 <Marvin--> what are you guys doing?
11:11:43 <o3> Marvin--: i'm doing an undergrad thesis, supervised by Chilli
11:11:50 <o3> haskell to objective-c binding
11:12:07 <Marvin--> sounds scary
11:12:39 <o3> Marvin--: i plan to evangelise haskell for development on mac os x
11:13:12 * Marvin-- notes that using type destructors seems to be faster than specifying that constructors are injective
11:13:48 <Marvin--> hah, take that Koen ;)
11:14:13 <Marvin--> I guess I should test it in vampire as well
11:15:55 <o3> rightio
11:16:01 <o3> night all
11:16:02 <Marvin--> sorry, talking to myself
11:16:07 <o3> let's see if i can wake up before 3pm today
11:17:22 <Lilith> Marvin--: vampire?
11:17:40 <Lilith> o3: ahahaha. i'll pull in late nights from tomorrow onwards :-)
11:18:04 <Marvin--> Lilith: automatic theorem prover
11:18:09 * Lilith hopes Chilli isn't monitoring the channel right now
11:18:22 <Marvin--> heh
11:18:34 * Marvin-- thanks heaven that Koen doesn't frequent this channel :)
11:19:21 <Lilith> heh
11:19:30 <Lilith> ok. i'd better work on my thesis now
11:19:39 <Marvin--> hrrm, vampire doesn't seem to like this at all
11:20:14 <Marvin--> Schulz - Riazanov & Voronkov  1-0
11:22:50 <Marvin--> good god, vampire uses a LOT of memory
11:55:01 <Marvin--> well, I'm off to the pub
14:03:33 <Igloo> Darius?
14:05:39 * jdrake_ is back after a long day at work
14:56:17 <Janni> g'evening
15:01:36 <jdrake_> bon soir monsieur
15:18:19 <Darius> Igloo?
15:19:10 <Igloo> Ermmm, can't remember. Probably wasn't important.
15:21:16 <Darius> okay
16:31:14 <jdrake_> are there any good, but cheap, books on haskell that can be recommended? (something from an imperative or a non-programmer sort of thing)
20:19:25 <jdrake_> anyone alive?
20:41:18 <Riastradh> I am.
20:43:11 <jdrake_> this channel seems to be spotty for people :-)
20:43:44 <jdrake_> do you know how I can input a function into ghci without it giving me parse errors?
20:44:00 <jdrake_> Prelude> quadruple :: Int -> Int
20:44:00 <jdrake_> <interactive>:1: Variable not in scope: `quadruple'
20:44:06 <wli> w0t?
20:44:20 <Riastradh> let quadruple :: Int -> Int = blah
20:45:20 <jdrake_> i found a set of slides that explains haskell a little bit better
20:46:25 <jdrake_> but one thing I noticed was that there was an operation they were doing that looked like an imperative program
20:46:48 <wli> it might
20:47:14 <Riastradh> Using 'do'?
20:47:22 <jdrake_> i believe so
20:47:51 <wli> care to paste?
20:49:09 <jdrake_> give me a second, it isn't copying very well, i will just retype it
20:49:57 <Riastradh> Paste it to some pasting service, not to IRC, by the way.
20:50:00 <wli> cantor = concat . f where f (x:xs) = [head x] : zipWith (:) (tail x) (f xs)
20:50:50 <wli> that looks handy
20:51:14 <jdrake_> http://darwinports.gene-hacker.net:8080/297
20:51:26 <jdrake_> Riastradh, i do that naturally
20:52:06 <jdrake_> it looks like gibberish
20:52:10 <Riastradh> jdrake, yeah, just making sure.
20:53:04 <wli> I don't like the optional argument stuff
20:53:12 <wli> readM looks handy
20:53:14 <jdrake_> wil, can you kind of deconstruct that thing and explain it a little, there are some syntax things that I am not following
20:54:05 <wli> I'm not feeling well atm
20:54:05 * Riastradh hmms...
20:54:23 <Riastradh> Selecting the question mark characters on that page makes Safari reliably crash.  Peculiar.
20:54:59 <jdrake_> Riastradh, you are right :-)
20:55:17 <jdrake_> probably was how i pasted it
20:55:45 <jdrake_> copying from a pdf file text into a cocoa text box...
20:55:55 <Riastradh> Probably.
20:55:58 <Riastradh> Are they just quote characters?
20:56:24 <jdrake_> i think so
20:56:28 <jdrake_> yes
20:57:06 <Riastradh> OK, well, in that code, it sort of looks imperative because 'do' passes the state implicitly to the functions behind your back.
20:57:24 <jdrake_> i tihnk i will send in a bug report
20:58:12 <wli> it just makes sure that when sequential repeated bindings are done the last binding before a given statement will shadow all those before it
20:58:33 <jdrake_> Riastradh, correction to your crash thing - select anything on that page
20:59:14 <Riastradh> No, just the odd characters.
20:59:41 <jdrake_> now hydra crashes on startup
21:01:06 <wli> zipWithF op f g x = f x `op` g x
21:01:21 <wli> maybe I should call that zipFWith
21:01:58 <wli> I wonder how to do that in the combinatory style
21:02:18 <jdrake_> it looks like the proggie i was trying to download some binaries from newsgroups didn't delete its temp files
21:03:26 <jdrake_> wli, is that 'where f (x:xs) = ...' just like defining a function but doing it locally?
21:03:39 <wli> jdrake: yes
21:04:01 <Riastradh> It's like 'let'.
21:05:14 <jdrake_> what exactly is the concat . f   do, I would think multiplication, but that doesn't seem right
21:05:31 <Riastradh> (.) does function composition.
21:05:38 <jdrake_> which is
21:05:49 <Riastradh> f . g = \x -> f (g x)
21:06:00 <wli> concat . f composes concat with f 
21:06:07 <Riastradh> (head . tail) [1,2] --> 2
21:06:12 <wli> (concat . f) x = concat (f x)
21:07:22 <jdrake_> you guys posted a few too many examples quickly there, each has a thing that I have no idea
21:08:22 <jdrake_> the simplest one looks like wli's last one, so I will ask about that one: why would you do (concat . f) x instead of concat (f x)
21:09:13 <Riastradh> Generally, you wouldn't -- but what if you don't have x yet?
21:09:25 <Riastradh> Instead of writing:  \x -> concat (f x)  you could write just concat . f.
21:09:42 <jdrake_> and what is \x
21:09:49 <Riastradh> Er.
21:10:02 <Riastradh> You don't know about lambda abstractions? -- anonymous functions?
21:10:39 <jdrake_> about the most I have ever used those would be in python in the form of lambda functions but found them pretty useless
21:10:46 <wli> oh
21:10:54 <wli> I need to compose both positions with ($x)
21:12:36 <Riastradh> jdrake, if you don't yet understand lambda abstractions, then you need to go read about the Lambda-Calculus before you come anywhere near any functional languages.
21:13:08 <wli> might be better to produce it mechanically
21:13:38 <jdrake_> nobody seemed to mention that anytime I have been here, nor in any documents anywhere about functional languages
21:14:02 <Riastradh> Either you're reading the wrong documents or you're an idiot.  I'm guessing the former.
21:14:21 <wli> I think I need the dup combinator
21:14:24 <wli> dup f x = f x x
21:14:30 <wli> I wonder how to do that in the combinatory style
21:14:44 <jdrake_> Riastradh, i would challenge you to find one introduction to haskell that mentions it in the first few pages
21:15:25 * Riastradh points at the 'Gentle Introduction to Haskell' -- on haskell.org -> Books and Tutorials.
21:15:29 <wli> dup = flip (\x -> ($x) . ($x))
21:15:58 <wli> that's progress
21:16:34 <wli> so how do I write \x -> ($x) . ($x) in the combinatory style...
21:17:30 <jdrake_> Riastradh, that first mention of that is 3.1 under functions, which is the third 'chapter'
21:17:34 <wli> flip (\x -> (flip ($) x) . (flip ($) x))
21:17:35 <wli> closer
21:17:52 <jdrake_> and certainly doesn't say anything about it being a prereq for understanding anything
21:18:22 <Riastradh> For understanding anything past the most basic concepts in any functional language you need to understand anonymous functions.
21:18:44 <jdrake_> is it likely http://www.wikipedia.org/wiki/Lambda_calculus  would be a good start for reading?
21:19:25 <Riastradh> No, I don't think so.
21:19:57 <Riastradh> I think there's a URI on the c2 wiki for 'LambdaCalculus' to a page that I found a decent read...
21:20:17 <Riastradh> It involves chocolate-covered ants, so you'll know if you're at the same page if you see them talking about it.
21:20:30 <jdrake_> that sounds scary
21:21:03 <wli> (\x -> (.) (flip ($) x) (flip ($) x))
21:21:06 <wli> closer?
21:22:58 <jdrake_> so is \x the equivelent character for lambda?
21:24:04 <Riastradh> \, not \x.
21:24:20 <jdrake_> is x the single parameter?
21:24:27 <Riastradh> Yes.
21:24:42 <Riastradh> \foo -> bar in Haskell is like \foo. bar in the Lambda-Calculus.
21:24:49 <Riastradh> @eval (\x. x) 5
21:24:49 <lambdabot> 5
21:25:07 <o3> if haskell interpreters support unicode, i wonder if you can use the unicode lambda character instead
21:25:16 * Riastradh must depart now.
21:25:17 * o3 stumbles out of bed
21:25:23 <jdrake_> night, merci
21:25:30 <jdrake_> i must depart too, time for sleepy
21:25:42 <o3> *waves*
