00:43:57 <ham[let]> hiho
00:44:06 <mgoetze> hi
01:33:51 <BlitzNL> I use 'map (\c -> [c]) str' to make a [String] out of a [Char], but insn't there a nicer/more preludeish way to do this?
01:35:05 <Marvin--> BlitzNL: I'd say  map (:[]) str  :-)
01:35:29 <BlitzNL> Marvin--: It looks cooler indeed ;)
01:40:54 <seth_> Marvin--: earlier we said that one can write  do { a;b;c;} and let {x;y;z} in {whatever}.  Can you write  if cond then { } else { }?
01:42:35 <Marvin--> I don't know
01:44:01 <seth_> probably not.
01:49:29 <dennisb> No, you cant. You can use {;} after do, let and where
01:52:54 <Marvin--> and case
01:53:15 <dennisb> hmm
01:53:31 <dennisb> in the if on can use () so no need for {;}
01:53:31 <Marvin--> case e of { ... }
01:53:52 <dennisb> yes, sounds right.
01:56:06 <dennisb> I looked in the standard, after the keywords "do let where of" the layout rule comes into play
01:58:01 <dennisb> which means we got all cases!
02:22:03 <shapr> case shapr of ; sleepy -> drinkCoffee
02:22:13 <shapr> awake -> writeCode
02:22:29 <shapr> gooood morning #haskell !
02:22:36 <Marvin--> you do know that the awake branch will never happen there? :)
02:22:49 <shapr> Marvin--: that's the story of my life ;-)
02:22:53 <Marvin--> since both sleepy and awake are variables
02:23:21 <Marvin--> oh dear
02:24:40 <shapr> case shapr of ; Awake -> writeCode ; Asleep -> drinkCoffee
02:25:57 <delYsid> does drinkCoffee work WHILE asleep?
02:26:03 <delYsid> thats a real novelty :)
02:26:27 <shapr> anything before coffee counts as asleep :-)
02:33:07 <delYsid> heh
02:33:36 * delYsid is trying to quit the coffee habit now, its already gotten very unhealthy for my stomach
02:47:37 <shapr> I only started the coffee habit a few years ago
03:11:28 <delYsid> yay!
03:11:42 <delYsid> Colin Runciman just gave me permission to distribute the code I used :-)))
03:12:47 <shapr> cool, what code is it?
03:13:01 <seafood> delYsid: code for what?
03:13:35 <delYsid> I used parts of his chess problem solver he wrote as a test for HAT as a starting point for the chess proggram
03:13:39 <shapr> oh cool!
03:14:11 <delYsid> but, he poses non-free restrictions :-(
03:14:18 <delYsid> so I'll probably have to rewrite all that one day.
03:14:24 <shapr> aw :-(
03:14:33 <delYsid> * you distribute it freely and free of charge, for non-commercial use only;
03:14:49 <delYsid> that is, not DFSG compliant... :(
03:15:47 <shapr> I think I'm going to add that restriction to code in haskell-libs soon
03:16:00 <shapr> DFSG compliance that is
03:16:17 <delYsid> so I'll have to move out then
03:16:26 <shapr> nah, I'll help you rewrite it before then, yah? :-)
03:16:38 <delYsid> k :)
03:19:25 <Igloo> Don't you have to tell SF what licence you are using?
03:21:27 <shapr> yah, the current list is BSD, lGPL, GPL
03:23:19 <shapr> I need to clarify that
03:23:26 <shapr> maybe it's time for a haskell-libs webpage! <gasp>
03:27:36 * shapr boings
03:27:48 * shapr luvs sunny summers
03:27:52 <BlitzNL> I wrote this function, freqlist str = map (\c -> (c, length (filter (==c) str))) (nub str),  to count the frequency of a occuring character. The thing is that it 'traverses over' the list of chars 'nub str' times, isn't there a better way to do this?
03:28:08 <shapr> @fact foo
03:28:09 <lambdabot> SqlError {seState = "C", seNativeError = 1, seErrorMsg = "could not connect to server: Connection refused\n\tIs the server running on host raven and accepting\n\tTCP/IP connections on port 5432?\n"}
03:28:09 <lambdabot> -DONE-
03:28:20 <shapr> @fact foo
03:28:23 <lambdabot> foo\bar
03:28:23 <lambdabot> -DONE-
03:28:32 <shapr> yay, postgresql restarted happily
03:28:58 <shapr> BlitzNL: what about using elemIndices?
03:29:05 <shapr> @prelude elemIndices
03:29:10 <shapr> @type elemIndices
03:29:13 <shapr> @type elem
03:29:15 <lambdabot> *** "elemIndices" prelude "Haskell Standard Prelude Dictionary": text follows
03:29:15 <lambdabot> elemIndices
03:29:15 <lambdabot>   elemIndices ::  Eq a => a -> [a] -> [Int]
03:29:15 <lambdabot>   elemIndices x            = findIndices (x ==)
03:29:19 <lambdabot> -DONE-
03:29:19 <shapr> ah, it was lagging
03:29:21 <lambdabot> elem :: Eq a => a -> [a] -> Bool
03:29:24 <lambdabot> -DONE-
03:29:25 <shapr> @type blah
03:29:32 <shapr> hm
03:29:56 <BlitzNL> shapr: elemIndices it is ;), BTW nice bot! 
03:30:03 <shapr> yah, lambdabot rocks
03:30:19 <shapr> mostly because so many #haskell people have contributed code and plugins
03:30:38 <shapr> tmoertel wrote the DictModule, which has the @prelude command
03:31:04 <shapr> he had the brilliant idea to hack the prelude code into a dict server
03:31:16 <shapr> tmoertel: hey, is all of the h98 report in there somewhere?
03:31:18 <shapr> @dict-help
03:31:19 <lambdabot> I perform dictionary lookups via the following 13 commands:
03:31:19 <lambdabot> @all-dicts .. Query all databases on dict.org
03:31:19 <lambdabot> @devils ..... The Devil's Dictionary
03:31:19 <lambdabot> @easton ..... Easton's 1897 Bible Dictionary
03:31:19 <lambdabot> @elements ... Elements database
03:31:19 <lambdabot> @foldoc ..... The Free On-line Dictionary of Computing
03:31:21 <lambdabot> @gazetteer .. U.S. Gazetteer (1990)
03:31:23 <lambdabot> @hitchcock .. Hitchcock's Bible Names Dictionary (late 1800's)
03:31:25 <lambdabot> @jargon ..... Jargon File
03:31:27 <lambdabot> there's @more
03:31:29 <shapr> @more
03:31:30 <lambdabot> @prelude .... Haskell Standard Prelude
03:31:31 <lambdabot> @vera ....... V.E.R.A.: Virtual Entity of Relevant Acronyms
03:31:33 <lambdabot> @web1913 .... Webster's Revised Unabridged Dictionary (1913)
03:31:35 <lambdabot> @wn ......... WordNet (r) 1.7
03:31:37 <lambdabot> @world02 .... CIA World Factbook 2002
03:31:39 <lambdabot> -DONE-
03:32:27 <shapr> BlitzNL: lambdabot has a zillion commands
03:32:30 <shapr> @listmodules
03:32:30 <lambdabot> I have the following modules installed: ["chess","dict","eval","fact","fortune","hello","karma","more","searchml","state","system","topic","type","yow"]
03:32:30 <lambdabot> -DONE-
03:32:36 <shapr> @listcommands chess
03:32:36 <lambdabot> Module chess provides the following commands: ["ply","reset-chess","validmoves","board","flip-board"]
03:32:36 <lambdabot> -DONE-
03:32:40 <shapr> @listcommands eval
03:32:40 <lambdabot> Module eval provides the following commands: ["eval","define","get-definition","definitions","del-definition","dump","set-fuel","resume"]
03:32:40 <lambdabot> -DONE-
03:33:11 <shapr> delYsid: hey, can I repeatedly flip the board and thereby make lambdabot play itself?
03:33:33 <shapr> delYsid: are there plans to let two human players play via lambdabot?
03:33:42 <shapr> that -DONE- is irritating me...
03:33:53 * shapr thinks of how to fix it
03:35:05 * Igloo suddenly remembers IOHCC
03:35:15 <shapr> oh right
03:35:24 <shapr> I need to post the results!
03:35:47 <opet> you have the results?
03:35:48 <opet> woo
04:14:11 <xkb> are there any bindings for libglade?
05:35:15 <BlitzNL> I have the following type, [(Char, Int)], I want to sort this list using the Int value. Can anyone point me to the best solution? I mean I could form this type into a newtype and instantiate Eq for it, or are there more solutions to the problem>?
05:45:22 <Janni> yay! finished my last test for Abitur today :)
05:58:40 <sjj> BlitzNL: just write a custom sort function, using the quicksort algorithm or something.  It's basically just two list comprehensions
06:01:21 <BlitzNL> sjj: ok i will thnx
06:04:11 <Igloo> Use List.SortBy
06:06:24 <BlitzNL> Igloo: I'll look into it
06:07:08 <Igloo> The compare function will be useful too
06:21:02 <BlitzNL> Igloo: sortBy (\a b -> compare (snd a) (snd b))  it is, nifty !
06:47:01 * tmoertel shambles toward the coffee saying, "Me. Need. Coffee."
06:47:15 <opet> grrar
06:56:56 <tmoertel> coffee cup in hand, I have returned to the land of the living !
06:57:54 * tmoertel thinks that shapr's connection has gone down
07:05:14 <tmoertel> BlitzNL: freqlist =  map (cs@(c:_) -> (c, length cs)) . groups . sort
07:06:40 <BlitzNL> tmoertel: you think this is nicer ?
07:07:17 <tmoertel> BlitzNL: its running time is O(N lg N) if sort is also
07:08:25 <BlitzNL> tmoertel: I was kinda hoping sortBy is O(N log N) too ;)
07:14:44 <tmoertel> BlitzNL: nub is O(N^2), all by itself
07:14:47 <tmoertel> @prelude nub
07:14:59 <tmoertel> d'oh! no lambdabot!
07:23:15 <tmoertel> hi, Radek_MOB!
07:24:05 <Igloo> Does @prelude exist now?
07:24:38 <tmoertel> It exists within lambdabot, which unfortunatly went away when shapr's connection died.
07:24:54 <tmoertel> But I can make a local query and return the results.
07:24:58 <tmoertel> What did you want to look up?
07:25:22 <Igloo> Nothing, I just didn't realise someone had written it  :-)
07:25:45 <tmoertel> It's at http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/DictModule/DictModule.hs?rev=HEAD&content-type=text/vnd.viewcvs-markup
07:26:59 <tmoertel> (Well, at least the dictionary-lookup module is, and it queries a Prelude dictionary.)
07:28:43 <galority> ber dafür gibt's ja slrn
07:29:01 <galority> sorry
07:29:48 <Igloo> Oh, interesting
07:30:03 <Igloo> A purpose made dictionary?
07:30:57 <tmoertel> Yes.  I hacked -- and I do mean *hacked" -- it together from the Prelude and Libraries sources in Hugs.  Courtesy of hackish Perl code.
07:32:50 * tmoertel thinks he ought to rewrite the hs-to-dictionary code in Haskell
07:40:19 <ham> hiho
07:41:58 <tmoertel> hello
07:50:01 <ham[let]> are there ogl bindings for haskell?
07:50:55 <tmoertel> ham[let]: http://www.haskell.org/HOpenGL/
07:51:26 <ham[let]> cool thx
07:51:41 <HunterPre> how can i get xemacs to color code??
07:52:48 <tmoertel> HunterPre: do you have haskell-mode installed ?
07:53:47 <HunterPre> not sure??
07:53:50 <HunterPre> how can i check?
07:54:45 <tmoertel> Enter "M-x haskell-[TAB]" and see if any haskell- functions are defined.
07:55:09 <tmoertel> In particular, "haskell-version"
07:55:35 <tmoertel> If not, see http://www.haskell.org/haskell-mode/
07:56:05 <HunterPre> ok, thanx....cause i tried to syntax highlighting....that didnt really work
07:56:28 <tmoertel> HunterPre: are you running a linux distro that uses RPMs?
07:57:02 <HunterPre> no
07:57:31 <pesco> booh!
07:57:48 <tmoertel> blah!
07:58:23 * HunterPre slaps HunterPre around a bit with a large trout
07:58:41 <ham[let]> what does clear [] ? do (what are the []ts for?)
07:59:00 <Igloo> [] is an empty list
07:59:10 <ham[let]> ah right ok
07:59:16 <ham[let]> so why gets clear a list?
07:59:24 <ham[let]> in HOGL
07:59:35 <Igloo> No idea
07:59:43 <ham[let]> ah i think i got it sry
08:00:25 <pesco> ham: Oh, what are you doing with GLV
08:00:29 <pesco> GL? even
08:00:38 <ham[let]> i what to draw what i program
08:00:50 <ham[let]> and vica verser later on
08:00:58 <ham[let]> -er +a
08:01:19 <pesco> I don't get you. What are you drawing?
08:02:33 <ham[let]> or is there already something to render graphs in haskell?
08:02:44 <pesco> Not that I know of.
08:03:04 <pesco> But let us know when you're done, I want something like that!
08:03:29 <pesco> What kind of layout algorithm will you use? 
08:03:35 <ham[let]> another question i read something in that haskell tut that you can write functions that derive functions
08:03:59 <ham[let]> how can i do such things?
08:04:22 <ham[let]> pesco: :) i think that should be up to the user
08:04:26 <Smerdyakov> If you mean higher order functions, then you should read a tutorial abouit it.
08:04:29 <pesco> It was surely not actual symbolic derivation what was meant, if that's what you're after...
08:04:41 <ham[let]> pesco: yes
08:05:00 <ham[let]> so its just like f(x) - f(x+h) / ... right?
08:05:00 <HunterPre> which is my init file?? trying to install the haskell mode
08:05:12 <pesco> ham[let]: Let me rephrase, "What kind of layout algorithms will you implement?"
08:05:42 <pesco> ham[let]: I'd guess that would be what they meant, but I don't know of course.
08:05:43 <ham[let]> pesco: relaxation i think is the easiest
08:05:50 <ham[let]> plus fixing nodes
08:05:51 <pesco> ham[let]: Oh, how does that work?
08:06:06 <ham[let]> pesco: do you know hookes spring laws?
08:06:17 <pesco> Yes.
08:06:40 <ham[let]> i just will use that to get the whole graph to relax itself
08:06:41 <Smerdyakov> Why would you want to do graph layout in Haskell when you can use GraphViz?
08:06:50 <HunterPre> which is my init file?? trying to install the haskell mode
08:06:55 <ham[let]> Smerdyakov: i want the otherway as well
08:06:58 <pesco> Isn't GraphViz non-free?
08:07:04 <ham[let]> pesco: nah its free
08:07:15 <Smerdyakov> I don't know what license it has in detail, but you can get it for free.
08:07:19 <ham[let]> but i want to be able to use the graph drawing to programm
08:07:20 <HunterPre> someone??  i need color in my life here!
08:07:22 <HunterPre> which is my init file?? trying to install the haskell mode
08:07:24 <pesco> ham[let]: Oh! *googles*
08:07:35 <ham[let]> pesco: www.graphviz.org
08:07:41 <pesco> ta
08:07:47 <ham[let]> apt-get install dotty :)
08:08:19 <pesco> Great!
08:08:38 <ham[let]> pesco: but dotty lacks of a good interactivity
08:08:48 <pesco> Ahm
08:08:53 <HunterPre> TMOERTEL
08:08:55 <HunterPre> where'd u go
08:09:05 <ham[let]> pesco: and its only 2d
08:09:20 <pesco> ham[let]: Oh, you're doing 3d!
08:09:22 <ham[let]> you cant open and close subgraphs etc
08:09:28 * tmoertel was in another window
08:09:30 <ham[let]> pesco: nd would be good
08:09:31 <tmoertel> sorry
08:09:43 <ham[let]> i think that functors could be a 4th dimension
08:09:50 <pesco> ham[let]: Er, help me imagine nD, please...
08:09:54 <ham[let]> or a 3rd
08:09:59 <HunterPre> wheres my init file??
08:10:03 <ham[let]> pesco: projections :)
08:10:09 <tmoertel> HunterPre: it's typically .emacs, usually in your home directory
08:10:09 <HunterPre> d/l the haskell mode file
08:10:12 <ham[let]> you havent got a 3d mon either
08:10:15 <HunterPre> ok
08:10:31 <pesco> ham[let]: Yes, but I have perspective perception.
08:11:08 <ham[let]> pesco: yes what is said was just that you can also have projections with more then 3dims
08:11:13 <ham[let]> anyway
08:11:24 <ham[let]> i want to be able to rotate etc
08:11:29 <ham[let]> and open subprograms
08:11:32 <HunterPre> tmoertel,   i can just open it with notepad right?
08:11:37 <ham[let]> aka subgraphs
08:11:40 <tmoertel> HunterPre: are you on Win32 ?
08:11:45 <HunterPre> yeah
08:11:54 <tmoertel> Then see http://www.gnu.org/software/emacs/windows/faq3.html#what-startup
08:12:42 <ham[let]> ok sry i got to go
08:12:46 <ham[let]> bbl
08:12:49 <pesco> ham[let]: Ok.
08:13:00 <HunterPre> thank u!!  i know i should get linux!
08:16:16 <HunterPre> i installed it, now how do i get the color coding ?
08:16:50 <tmoertel> That's font-lock: http://www.gnu.org/software/emacs/windows/faq4.html#font-lock
08:17:39 <HunterPre> u think this could be anymore confusing!! sheeesh!
08:17:44 <tmoertel> You can also customize global-font-lock, which is probably the easiest way.
08:18:24 <tmoertel> HunterPre: M-x customize-apropos global-font-lock
08:18:56 <tmoertel> Toggle it to "on" and then set the State to "Save for Future Sessions"
08:19:45 <HunterPre> ok....thanx for ur help,  really appreciate it....just makes it a little easier the color coding
08:20:07 <tmoertel> no problem
08:25:09 <Marvin--> yay for Doherty, what a comeback
08:25:28 <Arnia> Who was he playing against *has been out of touch*
08:25:42 <Marvin--> he's playing against Mark Williams
08:25:46 <Igloo> Did you get the fluke footage just now?
08:26:03 <Marvin--> no?
08:26:21 <Marvin--> I just turned on the TV
08:26:24 <Igloo> Ah, I much prefer the BBC to Eurosport then  :-)
08:26:26 <Igloo> Ah, OK
08:26:44 <Igloo> They just played all the flukes of the tournament
08:26:52 <Marvin--> hahaha
08:27:00 <Marvin--> yeah there's been a few cute ones :)
08:27:16 <Marvin--> 7-1 -> 11-5 -> 11-9  cool
08:27:21 <Igloo> I don't think anyone can beat the brown in the middle, though
08:58:19 <SyntaxPolice_> howdy all.
09:02:52 <HunterPre> "howdy"   who are u...??   cotton eye joe :)
09:03:03 <Igloo> Hi Syn
09:03:39 <Igloo> re the MAXPATHLEN thing, I'd err against quick fixes - that bug report you pointed at is 2 years old and has probably been forgotten about
09:06:12 <SyntaxPolice_> Igloo: hrm. I don't see why not have an intermediate solution.
09:06:20 <SyntaxPolice_> HunterPre: we yankees are all the same ;)
09:07:10 <SyntaxPolice_> Igloo: plus as I think Alen Cox once said, there's nothing like proposing a broken solution to get people to implement a better one :)
09:07:33 <Marvin--> 11-10! Go Doherty
09:07:51 <Igloo> I can see that, but actually implementing a broken solution means they won't bother to implement a better one
09:09:24 <Marvin--> if this goes on I'll have to switch to cheering on Williams
09:09:34 <Igloo> :-)
09:09:50 <Igloo> Don't worry, Ken doesn't know how to win by more than 1 frame
09:09:56 <Marvin--> point ;)
09:10:47 <tic> any anime/cartoon fans out there? Spartakus & the Sun Beneath the Sea ("Les Mondes Englitous")
09:10:57 <SyntaxPolice_> Igloo: yeah maybe... I guess we'll leave it up to them. I won't push it. I tagged the bug as upstream so its out of my hands :)
09:13:42 <Marvin--> heh, the Swedish eurosport commentator is talking about Doherty's protective luck gnomes
09:14:19 <HunterPre> syntax...what part of US u in?
09:15:29 <SyntaxPolice_> HunterPre: Ohio - and no, people don't really say "Howdy" here :)
09:15:35 <SyntaxPolice_> not much anyway
09:15:46 <HunterPre> lol
09:16:17 <HunterPre> i was born in IL.....a few howdy doodys there
09:17:01 <HunterPre> moved to florida,  and even more there
09:17:02 <HunterPre> :)
09:17:24 <SyntaxPolice_> yeah... I recon there are.
09:17:39 <HunterPre> its so close to the deep south, theres so much influence
09:17:50 <HunterPre> was IL hit by the tornado??
09:17:57 <HunterPre> im overseas at the moment
09:18:00 <HunterPre> just saw it on tv
09:18:09 <HunterPre> i know kansas was
09:18:11 <SyntaxPolice_> certain parts of Ohio are influenced by the south. I don't know about the tornado.
09:18:55 <HunterPre> the good parts????  too much of the bad parts...cough cough...alabama, arkansas......creep into FL.
09:19:41 <SyntaxPolice_> the farthest south I've been is S. Carolina.  Actually I was bornin FL, but moved away when I was very young.
09:20:03 <HunterPre> the south is nice....but i find its still in living in civil war times
09:20:07 <HunterPre> where from in FL?
09:20:19 <SyntaxPolice_> W. Palm Beach.
09:20:19 <HunterPre> south carolina is nice, have family in charleston
09:20:24 <HunterPre> thats where im from
09:20:29 <HunterPre> Lake Worth Actually!
09:20:34 <HunterPre> small world
09:20:45 <HunterPre> u remember lantana?
09:21:28 <HunterPre> u know of Palm Beach Community College?
09:21:58 <SyntaxPolice_> HunterPre: no, like I said, I was quite young when I moved away. I have very few memories of FL.
09:22:33 <HunterPre> probably the best think actually....i've thought of shock treatment to lose memories of FL
09:22:42 <HunterPre> too many old people
09:23:25 <SyntaxPolice_> hehe
09:23:52 <HunterPre> its gods waiting room that place
09:23:54 <SyntaxPolice_> my parents always complained about the heat and the air conditioning.
09:24:00 <HunterPre> and im too young to die
09:24:41 <HunterPre> thats one factor to....think about it....heat, humidity, torential rain, tornados, hurricances,  old people, bad drivers...
09:25:09 <HunterPre> u wonder why anyone wants to live there
09:25:25 <SyntaxPolice_> hehe. I guess the beaches outweigh all that.
09:26:53 <HunterPre> i guess....but i still escaped while i could :)
09:27:03 <HunterPre> and lucky u did
09:28:00 <SyntaxPolice_> I had a job interview in IL w/ a compiler company that Intel bought in Urbana.
09:28:28 <SyntaxPolice_> did you live anywhere near Chicago?  I always liked that city.
09:29:24 <HunterPre> i wasnt far from urbana
09:29:28 <HunterPre> i was in Decatur
09:29:37 <HunterPre> but about 3 hrs from chicago
09:29:40 <HunterPre> more central IL
09:29:59 <HunterPre> my dad went to University of IL,,  thats in champagne
09:30:44 <HunterPre> U of IL invented Netscape didnt they
09:30:50 <HunterPre> or IE?
09:31:52 <SyntaxPolice_> not sure. looked like a nice school, though. I drove around the campus a bit.
09:32:41 <HunterPre> i'd sure like to go there
09:44:28 <hdaume> anyone familiar with HsSource?
10:50:58 <ludde_> I'm trying to use getProcessStatus to retrieve the exit code of a process. It returns a data type ProcessStatus. What module do I need to include to get that?
10:52:41 <ludde_> hrm, seems Posix was enough
10:55:41 <ludde_> GAH
10:55:52 <ludde_> what is the type of ExitCode ?
10:56:22 <seth_> ludde_: ExitCode _is_ a type, isn't it?
10:56:38 <ludde_> in what file is it defined?
10:56:44 <ludde_> I need to know if a process succeeded or not.
10:56:53 <seth_> hang on...
10:57:50 <seth_> System.Exit
10:57:59 <tmoertel> ludde_: case ecode of { ExitSuccess -> blah ; ExitFailure -> blah }
10:58:31 <ludde_> oh
10:58:36 <tmoertel> see: http://www.haskell.org/ghc/docs/latest/html/base/System.Exit.html
10:58:48 <ludde_> Data constructor not in scope: `ExitSuccess'
10:58:48 <seth_> ExitFailure takes an argument (int), ExitSuccess does not
10:59:15 <tmoertel> import System.Cmd
10:59:21 <tmoertel> import System.Exit
10:59:30 <ludde_> yeah that works
10:59:33 <ludde_> thanks
10:59:39 <tmoertel> main = ecode <- system "date"
10:59:54 <tmoertel>     case ecode of { ExitSuccess -> putStrLn "Success!";
11:00:23 <tmoertel>              ExitFaulure code -> putStrLn ("Failure: " ++ show code) }
11:34:37 <tmoertel> hdaume: what are you doing w/ HsSource ? 
11:38:47 <ham[let]> hiho
11:40:01 <ham[let]> esap are you reading?
11:42:12 <Riastradh> Hi.
11:42:16 <hdaume> tmoertel: more or less just messing around right now
11:44:05 * tmoertel is reading your message on haskell-users
11:44:15 <hdaume> ah.  can you solve my problem?
11:46:44 <Darius> Is that a gmap from Strafunski?
11:56:27 <hdaume> Darius: yeah, pretty much.  from the "scrap your boilerplate" paper
12:07:46 <Darius> Then there should be a way with one of the other Strafunski combinators, i.e. adhoc
12:08:19 <hdaume> yes, there "should" :)
12:08:25 <ham[let]> http://www.cs.unm.edu/~williams/cs257/the_eternal_flame_god_wro.mp3
13:11:35 <shapr> y0
13:11:51 <shapr> anything exciting happening?
13:13:02 <Riastradh> Apparently not.
13:13:30 <witten> I finally learned how currying works
13:13:32 <witten> that was exciting
13:13:51 <shapr> witten: chicken?
13:14:05 <witten> shapr: vegetable
13:14:12 <shapr> I've been swapping around network cards and giving my gateway machine to someone so they can learn/try linux.
13:14:18 * Riastradh is still trying to figure out how to define subtraction or comparison (less/greater than or equal to) with the Lambda-Calculus and Church numerals.
13:14:40 <shapr> still not done, so lambdabot won't be back for a bit longer.
13:15:02 <Smerdyakov> Riastradh, not too tough. Think of peeling off successors from the two numbers until one hits zero.
13:15:19 <Riastradh> 'Peeling off successors?'
13:15:35 <shapr> decrementing
13:15:38 <Smerdyakov> Yes. A natural number is zero or the successor of a natural. Remove the successors with primitive recursion.
13:15:47 <shapr> that's a neat trick
13:16:08 <shapr> Riastradh: you can define equal to?
13:16:36 <shapr> witten: so, can you explain currying to me?
13:16:47 <Riastradh> shapr - I don't know -- I haven't done so yet!
13:17:38 <shapr> oh, I'll need to port the @fact data from the old database
13:20:00 <shapr> Riastradh: hey, a dir with filename as key and contents as value could replace both @fact and @searchml
13:20:03 <shapr> you think that's too cheesy?
13:20:06 <witten> shapr: you already know currying
13:20:32 <Riastradh> shapr, I suppose it would work.
13:20:48 <shapr> is there some better way to keep from loading the whole database into memory at the same time?
13:21:11 <shapr> would also allow multiword keys btw
13:21:26 <SyntaxPolice_> can someone explain the HaskellIrcPastePage?  Is it to post larger code (or something) in a better way than pasting it into irc?
13:21:40 <shapr> yah, I think so
13:21:48 <SyntaxPolice_> thats a pretty good idea.
13:21:54 <shapr> there's a pastebot on some freenode channels
13:22:09 <shapr> I think I could write a lambdabot plugin to do the same thing
13:22:16 <Riastradh> Do so!
13:22:34 <shapr> probably not today, I have to restructure the LAN here, and finish this database.
13:23:33 * shapr tries to remember if hws-wp serves each request in a separate thread
13:25:37 <Marvin--> oh come on, this is the Nth time they show O'Sullivan's 147 break
13:26:15 <opet> but he's vaguely interesting
13:26:29 <opet> they can hardly show mark williams interviews, they'll send everybody to sleep 
13:27:27 <Marvin--> heh
13:27:31 <Igloo> :-)
13:27:57 <Marvin--> it'd be more fun if they showed some of the greatest shots from the tournament
13:28:13 <opet> yes..
13:32:44 <Marvin--> Igloo: are you coming to debconf btw?
13:33:36 <Igloo> No
13:43:55 <Marvin--> hahaha, the Swedish commentator is pulling Irish snooker jokes
14:01:54 <Marvin--> looks like Williams has pulled himself together
14:02:28 <Igloo> Yeah, my money's on 18-14 now
14:03:40 <Marvin--> heh
14:13:43 <Marvin--> Igloo: you were saying? :)
14:13:58 <Igloo> He's doing it just to spite me
14:16:29 <Marvin--> "I'll write 16-15 here, if Williams wins this frame I'll eat my slippers ... damn, Williams goes back to the table"
14:30:41 <Igloo> Eeek. I just type :t instead of type at the command prompt
14:34:30 <Marvin--> haha
14:46:11 <ham[let]> bye
14:58:57 * Darius is mesmerized as data scrolls by with GHC -v9.
15:09:43 <Igloo> I think this is it
15:10:53 <Marvin--> yeahg
15:11:00 <Marvin--> great, now I can go to bed :)
15:11:03 <Igloo> :-)
15:11:34 <Marvin--> bah, let us see some trick shots now instead
15:11:37 <Marvin--> come on :)
15:12:08 <Darius> may wanna call Draw if I want to see anything! :D
15:15:36 <Marvin--> 'night
15:23:04 <shapr> y0
15:23:46 <shapr> wassup?
15:26:36 <Darius> Working more with Kyra.
15:26:44 <shapr> how's it going?
15:28:26 <Darius> Fine so far.  I have a simple test program that shows Kyra's splash screen.  I'm going to make one of the tutorial examples in Haskell now.
15:28:56 <Darius> I'll need to figure out how I'm going to handle events.
15:30:36 <shapr> I'm rereading the first arrows paper, hoping for more understanding.
15:35:28 <SyntaxPolice_> shapr: be sure to share if you find some :)
16:26:58 * Darius has a carpet floating off the screen!!
16:29:21 * Darius watches a rabbit hop through his yard.
16:34:12 <Igloo> Darius: Are you looking at this for RTS or am I off track?
16:36:51 <Darius> Yes and for the hey of it.  I was somewhat interested in Kyra a (long) while back and this is the first FFI thing I've done with Haskell.
16:37:21 <Igloo> Cool
16:58:14 <seafood> Igloo: are you there?
16:58:20 <Igloo> Indeedy
16:58:32 <seafood> hello, I've seen you on the template haskell list from time to time.
16:58:35 <Igloo> I almost sent you an e-mail today, but then I didn't. But I might in a few days time  :-)
16:58:51 <Igloo> You e-mailed me a while back too
19:08:21 * tmoertel just returned from seeing X-Men 2 again 
19:11:17 <shapr> I'd like to see it again.
19:11:42 <tmoertel> it's still good the second time
19:13:32 <tmoertel> I'm thinking of using HsParser to build larger, more-correct dictionaries of Haskell code.
19:13:57 <shapr> what about haddock?
19:14:24 <tmoertel> it doesn't capture internals and implementation code, which I would like to see
19:15:29 <witten> I really enjoyed X2, but I think it relied a bit too heavily on the "on no there is some time-critical something that is going to kill us all if we don't stop it very soon! it is dramatic and tense!" ploy
19:16:43 <tmoertel> witten: certainly, it had "Big Hollywood Picture" written all over it
19:17:25 <shapr> they mixed several different storylines and did serious cut'n'paste on the actual X-Men timeline
19:18:37 <tmoertel> the Hulk movie will be interesing.  I like Ang Lee's directing.
19:49:10 <shapr> hi Pseudonym 
20:23:13 <Pseudonym> G'day.
20:36:39 <kawfee> hi
20:36:43 * kawfee bounces
20:48:17 * Pseudonym is considering hacking up a glossary for the wiki
20:48:37 <Pseudonym> Anyone think of some terms that should be defined?
20:51:35 <shapr> existential quantification
20:51:46 * Pseudonym is starting off with CAF
20:52:02 <shapr> qualification?
20:59:13 <Darius> quantification
21:24:16 <shapr> Darius: thanks
23:29:39 <seth_> Hey, all.  I've asked this once before but I'm not 100% clear on the answer.  Is it legal to say   do x <- func x       and, if so, does it do what I expect (that is, use the value of x in the function call, and then change x to denote the new value)?  x is type X and func is X -> X
23:30:47 <Pseudonym> It's legal, and it creates a new variable x.
23:30:58 <Pseudonym> It's equivalent to: func x >>= \x -> ...
23:31:05 <Pseudonym> The lambda binds a new variable.
23:31:24 <Pseudonym> You can make it the same variable by using the extension mdo syntax.
23:31:38 <seth_> Pseudonym: But I don't need to, do I?
23:31:44 <Pseudonym> No.
23:31:51 <seth_> When would I want to?
23:32:08 <Pseudonym> If you're making a circular data structure, for example.
23:32:20 <Pseudonym> Or you need some value before it's computed for some other reason.
23:32:33 <Pseudonym> I've only ever needed it once.
23:32:43 <seth_> ok.  but as long as I just want x to denote the new value, I'm fine.
23:32:49 <Pseudonym> Right.
23:32:55 <seth_> thanks
23:33:22 <seth_> I'm testing out my new queue module.  so far it is working well but I'll cook it for a while.
23:37:03 <Pseudonym> @yow
23:37:41 <flippo> Is Zippy dead?
23:47:38 <Pseudonym> Possibly pining for the fjords.
