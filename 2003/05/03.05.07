00:01:31 <shapr> Igloo: have you seen dark's haSDL?
00:12:41 <sjj> twisted has nntp support IIRC ;P
00:12:54 <shapr> probably via the python nntplib
00:13:00 <shapr> but I want a haskell nntplib
00:13:06 <shapr> sjj: wanna help me write it? ;-)
00:13:16 <sjj> nah, it wouldn't use python's nntplib.
00:13:37 <sjj> shapr: in haskell? I suck! ;)
00:13:50 <shapr> sjj: soooo, how would you get better??
00:14:43 <sjj> well, currently i'm writing a parser to help me in that regard ;)
00:14:52 <delYsid> twisted, heh, I never understood the hype
00:18:05 <shapr> twisted is spiffy because you it's a framework for building and connecting protocols
00:18:21 <shapr> and it's totally async
00:22:14 <Pseudonym> Gotta go home.  Bye everyone.
00:34:11 <shapr> hi Ph4tB0y_2k 
00:34:14 <shapr> interesting nickname.
00:34:25 <Ph4tB0y_2k> hi
00:34:26 <shapr> are you learning Haskell?
00:34:38 <Ph4tB0y_2k> yes 
00:34:43 <shapr> what do you think of it so far?
00:35:32 <Ph4tB0y_2k> its pretty cool
00:35:51 <shapr> are you learning Haskell for class?
00:36:09 <Ph4tB0y_2k> no 
00:37:00 <shapr> do you have experience with other functional programming languages?
00:38:21 * shapr bounces
00:38:26 <Ph4tB0y_2k> a little with scheme
00:38:45 <Marvin--> morning boys 'n girls
00:39:00 <shapr> gooood morning Marvin-- 
00:39:16 <shapr> I have this sudden craving for an Arby's Bacon and Mushroom burger.
00:40:41 <Marvin--> sounds scary
00:40:48 <shapr> they're quite nice.
00:40:54 <shapr> Ph4tB0y_2k: do you have any questions?
00:42:02 <Ph4tB0y_2k> no 
00:42:15 <shapr> if you think of some, feel free to ask :-)
00:42:23 <dennisb> shapr really wan't to help someone!
00:42:24 <Ph4tB0y_2k> ok 
00:42:29 <dennisb> want
00:43:39 <Marvin--> dennisb: wants ;)
00:44:09 <Marvin--> what's the topic of tomorrow's multi meeting?
00:44:26 <dennisb> eeew, dennis just ate a yoghurt with lots of ugly berries in it
00:44:35 * dennisb hates english
00:44:44 <dennisb> Marvin--: parsing, something
00:46:11 <shapr> I like english
00:46:14 <shapr> I like swedish too
00:46:22 <shapr> jag vill hjälpa flera elev!
00:46:40 <shapr> jag vill att hjälpa många människor!
00:47:00 <mgoetze> what's "flera elev"?
00:47:01 <dennisb> i'm not even sure all of it was berries, **aaarg**
00:47:19 <shapr> mgoetze: several students.. for a moment I had forgotten how to say "people"
00:47:37 <mgoetze> oh. what's "hjaelpa", then?
00:47:45 <dennisb> help
00:48:23 * mgoetze is not getting the content of shapr's message :)
00:49:23 <shapr> "I want to help many people"
00:49:25 <dennisb> he wants to help many people
00:49:32 <shapr> it's probably my lack of swedish as much as anything :-)
00:50:30 <shapr> I'm trying to cut dark's FTP.hs into something closer to a real ftplib
00:51:09 <shapr> anyone here has experience with nntp and interest in working on NNTP.hs ?
00:51:45 <dennisb> isn't nntp almost dead?
00:53:20 <shapr> I don't think so
00:53:35 <shapr> of course, I thought the web was a fad...
00:53:38 <o3> *BSD is dying!
00:54:21 <dennisb> we are talking about news groups, right?
00:54:24 <shapr> yes
00:54:31 <dennisb> just to make sure:-)
00:56:05 <shapr> y0 o3
00:56:33 <shapr> o3: hey what's the projected date for a ghc 5.04.3 runtime_loader ?
00:56:54 <o3> not anytime soon.  my thesis is due in a few weeks :(
00:57:03 <shapr> good luck!
00:57:07 <o3> and i'll be in san francisco after that for a week or two
00:57:12 <o3> and i have work deadlines ...
00:57:41 <o3> so, uhh, not sooner than about two months i think
00:58:54 <shapr> yow
00:59:53 <shapr> @yow
00:59:55 <lambdabot> ..  Like I always say -- nothing can beat the BRATWURST
00:59:55 <lambdabot>  here in DUSSELDORF!!
00:59:55 <lambdabot> [-DONE-]
01:00:47 <sjj> Anyone know what the "No variables defined in lhs pattern" error in hugs indicates?
01:02:03 <shapr> sjj: can you show the line of code that's giving the error?
01:02:27 <sjj> > PLoop = build3 (token "LOOP") pCmdList (token "END") f
01:02:42 <sjj> f is defined as: f _ c _ = Loop c
01:03:02 <shapr> initial capital letters are for types
01:03:07 <sjj> that's pLoop not PLoop
01:03:17 <shapr> oh
01:03:29 <sjj> er right, it wasn't! sorry, small font etc
01:03:32 * sjj hits himself
01:03:39 <shapr> does that fix it?
01:03:52 <sjj> yea ;)
01:04:14 <sjj> I should really use syntax-highlighting in haskell-mode
01:04:54 <shapr> it's handy
01:17:47 <o3> can anyone help me with multi-parameter type classes?
01:18:34 <seth_> o3: I'm struggling with them also.  What are you running into?
01:18:45 <o3> well, i have no idea what they are :)
01:19:09 <o3> research.microsoft.com is down right now, so i can't get to simonpj's papers.  d'oh
01:19:28 <seth_> oh well.  I'll go back to trying to understand the state monad.
03:38:23 * shapr bounces cheerfully
03:38:38 <shapr> hi musasabi 
03:40:17 * Riastradh slumps sleepily in his chair.
03:40:25 <Arnia> shapr: Arrows arrows arrows
03:40:52 <shapr> Arnia: I've been reading, trying to get a handle on those arrows.
03:41:25 <musasabi> hello shapr :)
03:41:34 <shapr> musasabi: are you new to Haskell? or just #haskell?
03:42:42 <musasabi> shapr: quite new to both. Mainly interested in monad theory & how it works in concurrent systems...
03:42:44 <shapr> Arnia: One thing I've noticed about arrows, unlike monads, you get to specify separate input and output types.
03:43:15 <shapr> musasabi: since monads are all about sequencing, you may be even more interested in mdo, parallel monads, and arrows.
03:44:19 <Arnia> shapr: Yep... I firmly believe the universe is an arrow composition :)
03:44:38 <shapr> that's a scary thought... what are the input and output types?
03:44:52 <shapr> I've been wondering if there's any relation between arrows and ... MPTC?
03:45:13 <Arnia> MPTC?
03:45:14 <shapr> I think it's MPTC that says there's a matching output type for each input type given.
03:45:20 <shapr> multiparameter typeclasses
03:45:29 <Arnia> Ah
03:45:56 <shapr> maybe that's fundeps and I'm just confused
03:46:16 <shapr> musasabi: do you have any questions?
03:50:56 <musasabi> shapr: mainly I am reading the docs to get a clearer picture about things.
03:52:21 <Arnia> shapr: Can we begin discussion on this Arrowdic Framework soon? I want to do my dissertation on a simulation framework, but I need a decent app framework to build it on
03:52:34 <shapr> forget discussion, let's write code.
03:52:59 <shapr> I'm not convinced discussion helps software design anyway ;-)
03:53:10 <shapr> not in this case at least.
03:54:16 <shapr> ok, maybe some discussion, do you have a clear idea of what you want the arrowdic framework to do?
03:54:27 <shapr> and how you want to interact with it?
03:54:43 <shapr> could you write a hello world program for this framework?
03:55:11 <Arnia> I want the framework to provide a collection of common services to haskell applications and allow arrowdic libraries (esp AFRP libraries) to communicate.
03:55:51 <Arnia> The core services included should be networks, GUIs, sound, graphics, IPC and file IO
03:58:39 <Arnia> Damn... have to run. I'll speak to you later
03:58:42 <shapr> ok
04:51:36 * shapr yawns
04:55:21 <Igloo> I haven't looked at haSDL, no
05:02:10 <sjj> hrm, can I give a multi-line string in haskell?
05:02:31 <Igloo> Yes, but it isn't pretty
05:02:37 <Igloo> foo\
05:02:39 <Igloo> \bar"
05:02:47 <Igloo> But with a " before foo. Ahem  :-)
05:02:56 <sjj> danke.
05:03:04 <shapr> Igloo: what about three line strings?
05:03:12 <Igloo> "foo\
05:03:14 <Igloo> \bar\
05:03:16 <Igloo> \baz"
05:03:40 <shapr> yow
05:03:50 <Igloo> You can put \whitespace\ anywhere in a string, and newlines are whitespace
05:03:57 <shapr> huh?
05:04:04 <shapr> ohh
05:04:32 <shapr> hey, do you know if I can set the installation location of ghc 5.05 after I've built it?
05:04:38 <Igloo> @type "foo\   \bar"
05:04:39 <lambdabot> "foobar" :: String
05:04:39 <lambdabot> [-DONE-]
05:05:05 <shapr> nifty
05:05:20 <Igloo> Doing ./configure --prefix=/installation/location; make install might work
05:05:30 <shapr> cool, thanks.
05:05:54 <shapr> oh, I'll be able to run lambdabot with threaded-RTS
05:05:57 * shapr bounces excitedly
05:18:20 <shapr> hi jao
05:18:35 <jao> hey shapr
05:18:38 <shapr> what's up?
05:19:36 <jao> nithing terribly thrilling. i've had little time for haskell these last weeks :( what about you?
05:19:55 <shapr> trying to understand arrows
05:20:25 <jao> sounds very interesting (arrows)
05:20:46 <shapr> they are interesting, but difficult to understand (for me)
05:20:59 <shapr> or maybe they're easy to understand, but I'm not sure how to use them.
05:21:04 <jao> don't give up :)
05:21:19 <shapr> I will figure them out, even if it takes me years.
05:21:32 <Igloo> :-)
05:21:38 <jao> heh. i'm sure you will
05:22:54 <shapr> what are you studying in Haskell?
05:23:23 * Igloo bounces
05:23:28 <jao> i'm just beginning the chapter on monads of the gentle introduction
05:24:00 <shapr> good morning Igloo
05:24:12 <shapr> jao: what do you think so far?
05:24:31 <Igloo> You do know I started talking a couple of screens ago, don't you, shapr?
05:24:53 * shapr notices
05:25:00 <shapr> ok, maybe I should have said good morning to myself...
05:25:05 <Igloo> :-)
05:25:24 <jao> shapr: i like what i've seen: laziness and type inference, oh and list comprehension
05:25:43 <jao> (btw, i'm also reading okasaki's book)
05:25:48 <shapr> oh, I want that book.
05:25:59 <shapr> Igloo: is this a general purpose partial evalutor
05:26:00 <shapr> ?
05:26:02 <Igloo> Is that Algorithms: A Functional Approach?
05:26:14 <shapr> nah, Okasaki's is the basis for Edison
05:26:27 <Igloo> shapr: General purpose as long as your purpose is unrolling fixed depth recursion
05:26:35 <shapr> :-)
05:26:37 <Igloo> Well, the Simplify module can be used for other things
05:26:45 <jao> 'Purely functional data structures'
05:27:02 <Igloo> Aha, I haven't read that one
05:27:09 * Igloo telnets to the library
05:27:11 <shapr> nor have I
05:27:14 <shapr> I'd like to..
05:27:14 <jao> it's quite good
05:27:40 <shapr> Pseudonym said that Okasaki's most original finding is that laziness can make some algorithms more efficient in Haskell than in C
05:28:13 <shapr> basically, if you put off everything until you absolutely have to have it, sometimes you don't really need it.
05:28:28 <Igloo> Well, you wouldn't right the C so that that was true if you cared about efficiency
05:28:29 <jao> yup. and of course the implementations are so much clearer
05:28:39 <Igloo> So it would be uglier, but not worse-performing
05:28:55 <Igloo> Eeek, s/right/write/
05:29:25 <shapr> hej rassoodock 
05:29:48 <shapr> hur är det med dig?
05:33:05 <mgoetze> shapr: and how are things with you? :)
05:33:09 <shapr> oh, life is good
05:33:20 <shapr> lots of work on my calendar
05:34:10 <shapr> We're going to buy a new box and colocate it so that we have our own Zope/mail/dns/etc server 
05:34:34 <Igloo> Nice
05:34:38 <Igloo> In which country?
05:35:03 <shapr> we're going to colo just down the street
05:35:18 <shapr> friend of ours owns/runs an ISP
05:35:24 <Igloo> Cool
05:35:38 <shapr> he's also the guy who purchased warcraft III ( and that's why I've been here less lately ;-)
05:35:52 <Igloo> :-)
05:36:43 <shapr> I'm going to try to setup an open source club here in Boden, and maybe a web-based OSS club for businesses.
05:36:53 <mgoetze> shapr: wanna sponsor a freenode server? :)
05:37:03 <shapr> how much traffic?
05:37:37 <mgoetze> well, if it actually gets into main rotation, about 75 GB
05:37:42 <shapr> a month?
05:37:42 <shapr> yow
05:37:52 <mgoetze> though prolly less, since we have so many main rotation servers atm...
05:37:53 * shapr calculates how much that would cost...
05:38:22 <Igloo> Could we keep it as a #haskell-only server?  :-)
05:40:20 <shapr> heh
05:40:36 <Igloo> It would be about £75/month at BCN
05:40:50 * Igloo is curious as to how that would compare
05:42:10 <mgoetze> lol, so #haskell would be unaffected by netsplits or what? :)
05:44:07 * Igloo gives up on shapr and goes to have a bath
05:44:13 <shapr> :-)
05:44:20 <shapr> it's more expensive here
05:45:34 <shapr> hi Marvin-- 
05:45:50 <Marvin--> hello
05:45:52 <Marvin--> fuck
05:45:55 <Marvin--> I forgot *again*
05:46:01 <shapr> forgot what?
05:46:25 <tez> The fusion law between foldl and foldr?
05:46:43 <shapr> the fission law between scanl and scanr?
05:47:21 <Marvin--> no, our mail server is down and I forgot to have a look at it today when I was at the university
05:51:51 <mgoetze> speaking of mailservers...
05:52:02 * mgoetze checks for any recent activity about iohcc
05:52:06 <shapr> err
05:52:10 <shapr> there is recent activity
05:52:16 <shapr> I've created the announcement page
05:52:32 <shapr> I want to hear from another juror though
05:56:15 * shapr sends out a poke
05:56:32 <shapr> hey, anyone here with clue about nntp?
05:56:39 <shapr> I'm trying to loop through all the articles in a newsgroup
06:01:09 <Marvin--> what's the url for the announcements?
06:01:23 <shapr> well, it's not public yet..
06:04:35 <Marvin--> oh
06:07:57 <debug> hm
06:33:13 <shapr> hoi BlitzNL 
06:33:32 <BlitzNL> goedendag shapr
06:33:43 <shapr> how's Haskell treating you?
06:35:11 <BlitzNL> It getting better and better. I recently discovered how nice I can use sortBy and insertBy to sort any type. very nifty
07:23:47 <SyntaxPolice_> hey, anyhone know who's making all those changes to the Wiki, its cool!
07:24:33 <mgoetze> SyntaxPolice_: let's play!
07:25:08 <SyntaxPolice_> mgoetze: er um... tomorrow :)
07:25:30 <mgoetze> SyntaxPolice_: i don't suppose my not being here tomorrow could influence your decision? :)
07:26:30 * SyntaxPolice_ starts to wonder when work will slow down... how 'bout friday?
07:26:41 <SyntaxPolice_> today I got in late and might have to leave early.
07:27:23 <mgoetze> i'll be at the chess cafe on friday, as usual, so it would have to be early
07:27:32 <SyntaxPolice_> whats early for you? is now early?
07:27:39 <mgoetze> yeah
07:27:50 <mgoetze> well, it's not, but i meant early for you
07:28:32 <SyntaxPolice_> mgoetze: OK. lets play friday morning :)
07:32:43 <mgoetze> yay!
07:41:26 <shapr> GHC.Posix seems to have disappeared in 5.05
07:44:45 <shapr> oh, it's moved.
07:50:16 * shapr tries to get lambdabot running in ghc 5.05
07:53:06 * shapr laughs
07:53:20 <shapr> delYsid: ghc5.05 is trying to interpret some of your code as Template Haskell
07:53:51 <Igloo> How'd he manage that? "$("?
07:54:01 <shapr> yah, he missed a space
07:54:11 <Igloo> :-)
07:59:37 <shapr> things have changed quite a bit in 5.05
08:06:30 <Igloo> Oh?
08:06:45 <shapr> posixy stuff 
08:06:52 <shapr> FileStatus is new
08:07:18 <Igloo> Ah, interesting, hand't noticed that happening
08:10:50 <shapr> yay, lambdabot-505 is built with ghc 5.05
08:11:11 <delYsid> what are the improvements in 5.05?
08:11:11 <shapr> and with --enable-threaded-runtime-system
08:11:33 <shapr> template haskell and mdo are the only things that come to mind immediately
08:11:50 <delYsid> TH, interesting
08:11:55 <shapr> TH is powerful stuff
08:12:02 <delYsid> So Haskell got a decent macro system, finally.
08:12:04 <shapr> yup
08:12:42 <SyntaxPolice_> ghc 5.05 has template haskell?
08:12:46 <SyntaxPolice_> ...
08:12:52 <shapr> yes
08:13:09 <shapr> 5.05 is sort of like linux 2.5
08:13:09 <andersca> what's template haskell anyway?
08:13:12 <Igloo> macro? Hmmmm...
08:13:22 <andersca> shapr: ghc 5.05 is a kernel? :)
08:13:23 <shapr> it's a metaprogramming system for Haskell
08:13:26 <shapr> andersca: heh
08:13:48 <shapr> for example, think of "zip3 = zipN 3"
08:13:54 <shapr> you can't do that with 'normal' haskell
08:13:57 <SyntaxPolice_> shaper, got any good pointers?
08:14:04 <shapr> but you can do it with TH
08:14:09 <andersca> hey SyntaxPolice
08:14:20 <Igloo> Syn: For TH?
08:14:24 <shapr> yah, Simon PJs "template metaprogramming in haskell" paper on his homepage
08:14:31 <andersca> didn't know you were a friend of colin walters
08:14:34 * SyntaxPolice_ looks on wiki :)
08:14:46 <Igloo> Oh, I don't have the URL in my .bib
08:14:53 <SyntaxPolice_> andersca: how's it going?
08:14:56 <Igloo> http://research.microsoft.com/Users/simonpj/papers/meta-haskell/
08:15:53 <shapr> it's a nifty paper
08:16:17 <shapr> I wonder if TH would allow any cool lambdabot tricks
08:18:58 <SyntaxPolice_> so is it fair to call TH a macro system?
08:19:11 <shapr> I'd call it that, but I'm not an expert.
08:22:50 <SyntaxPolice_> It seems that htey call it that too :)
08:23:36 <SyntaxPolice_> "The extention can be viewed as both a template system for Haskell (a la C++), as well as a type-safe macro system..."
08:24:15 <shapr> the type-safe macro part is really fascinating
08:24:37 <shapr> one of the problems with any generated Haskell code is type checking
08:24:56 <delYsid> I'm still not convinced that strict typing is really good.
08:25:13 <shapr> I'm convinced that C and Java style static typing is bad.
08:25:15 <delYsid> Since I saw what can happen if Dynamic is used, I really question the "find all errors at compile time" thing
08:25:26 <shapr> type inferencing is much much better.
08:25:53 <shapr> delYsid: we should come up with a better way to same per-module state... I think I'm abusing Dynamic at the moment.
08:26:00 <shapr> otoh, it does work :-)
08:26:07 <delYsid> yah
08:26:18 <delYsid> but its also a nice example of how ugly haskell hacking can get
08:26:36 <shapr> yah, we have to come up with a more elegant solution.
08:27:24 <shapr> any ideas?
08:27:52 <delYsid> well, since the modules are not dynamically loaded...
08:28:13 <delYsid> I never really got why Dynamic was necessary.
08:28:27 <delYsid> Why not just use a tuple to hold all Modules?
08:28:40 <shapr> hm
08:28:50 <shapr> you'd have to know your offset in the tuple.
08:29:16 <shapr> or.. actually..
08:29:18 <delYsid> pass the module data as argument to process?
08:29:32 <shapr> what about a tuple that has an FM as the first item?
08:29:42 <shapr> and that FM holds a map of string -> Integer
08:29:54 <shapr> giving you the offset of the state you're looking for?
08:30:05 <shapr> you'd have to replace the entire tuple for any state update, but that's ok
08:30:18 <delYsid> shapr: IMHO, a module should not need to lookup its own state
08:30:23 <delYsid> thats wasteful duplication...
08:30:25 <Igloo> You could do it with a record
08:30:39 <shapr> oh, you think it should be passed to the module when the process command is called?
08:30:43 <shapr> that's a nice idea
08:30:48 <delYsid> yup
08:30:59 <shapr> Igloo: wouldn't you have to have a new field in the record each time a module was added?
08:31:03 <delYsid> IMHO, 30% of code in ChessModule should actually be done by the module system...
08:31:09 <shapr> I think you're right
08:31:11 <delYsid> since its generic, and useful for all other modules
08:31:15 <shapr> Darius mentioned the same idea
08:31:26 <shapr> but I hadn't thought of a good way of factoring out the code.
08:31:53 <shapr> the other nice thing about that, anytime the per-module state code changes, you only change everything in one place
08:32:00 <Igloo> shapr: Yes
08:32:03 <delYsid> well, if FM werent monomorphic, that would also be cool
08:32:08 <shapr> oh, that's a great idea
08:33:04 <Igloo> You could use TH to build the main module, including imports and building such a record, if it were finished
08:33:06 <delYsid> data Modules = Module a >= FiniteMap Name a
08:33:09 <delYsid> type Name = String
08:33:18 <Igloo> Although handling the transition of saved data when you add a new module would be trickier
08:34:05 <Igloo> How do you actually read it in?
08:34:07 <shapr> any idea when a TH enabled GHC will be released?
08:34:17 <delYsid> anyway, I think in this particular case, everything would be alot easier if Haskell werent strictly typed...
08:34:21 <shapr> right now all saved state uses Show and Read
08:34:26 <shapr> though I'd much prefer Binary
08:35:05 <Igloo> You ought to be able to have type inference do the work for you
08:35:54 <Igloo> initMyModule :: MyModuleState -> M ()    and then you just call initMyModule (read myModuleState)    and then you just have a FiniteMap ModuleName String
08:36:12 <Igloo> I assume you could so similar with Binary
08:36:40 <Igloo> And you'd write out lines like "MyModule: " ++ show myModuleState ++ "\n"
08:36:54 <shapr> yah, we're doing the same sort of thing with Dynamic
08:37:08 <Igloo> So what does Dynamic buy you?
08:37:13 <shapr> nothing really
08:37:18 <Igloo> OK  :-)
08:37:23 <shapr> it just happened to work at the time :-)
08:37:37 <shapr> hi hal
08:37:55 <shapr> is that an accent aigu on the last e?
08:37:57 <hdaume> hi shae
08:38:01 <hdaume> yeah
08:38:03 <shapr> ok
08:38:19 <hdaume> why? (and how did you notice?)
08:39:03 <shapr> why, because I wanted to try MoinMoin's i18n support, and it's in lots of your emails and on your homepage
08:39:11 <shapr> hi Vincenz 
08:39:20 <hdaume> it's in my emails?
08:39:25 <shapr> I thought so...?
08:39:26 <Vincenz> hiya shapr
08:39:28 <Vincenz> talk about speed reactions
08:39:29 <shapr> maybe I'm confused.
08:39:35 <shapr> Vincenz: I'm hyperactive!
08:39:41 <Vincenz> hehe :P
08:39:43 * shapr zooms
08:39:54 <hdaume> meh, oh well
08:49:43 <shapr> http://www.haskell.org/hawiki/HalDaum_e9
08:50:16 <hdaume> whoop!
08:50:24 * shapr grins
08:50:53 <shapr> I had to figure out the i18n stuff
08:51:01 <hdaume> :) i'm impressed
08:51:27 <shapr> moin rocks
08:51:32 <shapr> it's a great wiki system
08:54:52 <shapr> hey, I just realized I could put invariants(?) into a monadic call
08:55:01 <shapr> and I have to make them explicit in imperative languages
08:55:13 <shapr> I think that's right..
08:55:48 <shapr> ex: if I were calling a function that needed to have an existing nntp connection in the monad state, it could check for that in the definition of the monadic call
08:56:02 <shapr> and then I'd never have to be explicit about it... 
08:56:03 <shapr> is that correct?
09:09:04 <shapr> hi usander 
09:09:42 <SyntaxPolice_> is there anything like groupBy but which will work on any elements (not just adjacent)?
09:10:10 <shapr> @prelude groupBy
09:10:14 <lambdabot-505> *** "groupBy" prelude "Haskell Standard Prelude Dictionary": text follows
09:10:14 <lambdabot-505> groupBy
09:10:14 <lambdabot-505>   groupBy ::  (a -> a -> Bool) -> [a] -> [[a]]
09:10:14 <lambdabot-505>   groupBy eq []            = []
09:10:14 <lambdabot> *** "groupBy" prelude "Haskell Standard Prelude Dictionary": text follows
09:10:14 <lambdabot> groupBy
09:10:14 <lambdabot>   groupBy ::  (a -> a -> Bool) -> [a] -> [[a]]
09:10:14 <lambdabot>   groupBy eq []            = []
09:10:14 <lambdabot-505>   groupBy eq (x:xs)        = (x:ys) : groupBy eq zs
09:10:15 <lambdabot>   groupBy eq (x:xs)        = (x:ys) : groupBy eq zs
09:10:16 <lambdabot-505>                              where (ys,zs) = span (eq x) xs
09:10:16 <shapr> argh
09:10:17 <lambdabot>                              where (ys,zs) = span (eq x) xs
09:10:21 <shapr> lambdabot-505: @part #haskell
09:10:22 <lambdabot-505> [-DONE-]
09:10:23 <lambdabot> [-DONE-]
09:10:58 <SyntaxPolice_> shapr: thanks ;)
09:11:19 <opet> lambdabot fight!
09:11:34 * shapr grins
09:12:12 <SyntaxPolice_> what does span do? can't find docs.
09:12:45 <shapr> it does take until the condition is false
09:13:02 <shapr> span (== ' ') "    blah"
09:13:08 <shapr> ("    ","blah")
09:13:10 <SyntaxPolice_> what the wiki needs is 1) Haskell syntax highlighting, and 2) somehow linking directly to hierarchical docs
09:13:15 <SyntaxPolice_> shapr: gotcha
09:13:19 <shapr> 1) we can do with enscript
09:13:30 <shapr> 2) we can probably do with a Moin Macro
09:14:12 <SyntaxPolice_> ooh cool. I envision being able to go to HaWiki/Control.Monad.State and getting crap like whats at MonadState now, plus a link to the docs or just the docs in another frame.
09:14:41 <SyntaxPolice_> then eventually the best stuff from the wiki would be folded into the Haddock
09:15:51 <SyntaxPolice_> then everything linked to the interpreters :)
09:16:17 <SyntaxPolice_> and SimonPJ and SimonMar would hang out on IRC and answer all our questions
09:25:40 <shapr> SyntaxPolice: they visited once
09:25:47 <shapr> both the Simons at once
09:26:10 <andersca> should get koen and john here too :)
09:26:26 <shapr> yah
09:26:32 <shapr> I've invited John
09:26:36 <shapr> you invite Koen
09:27:03 --- mode: mgoetze|away set +g
09:27:29 <shapr> what's g?
09:27:41 <mgoetze|away> anyone can /invite, not just ops
09:27:47 <shapr> oh, neat
09:28:09 <mgoetze|away> anyway, i'm off to play go. bye!
09:29:32 <shapr> cya!
09:31:09 <SyntaxPolice_> shapr: would you say that python's distutils solves the Contrib problem mentioned on libraries@h.o?
09:32:02 <shapr> I think so, yes
09:33:14 <shapr> what do you think haskell dist-utils should do?
09:33:21 <Igloo> Oh, I meant to reply ot that
09:34:11 <SyntaxPolice_> shapr: I think it should provide dependancies, interface with a database of installed packages, help to build packages, help to build debian distributions of packages, etc.
09:34:26 <SyntaxPolice_> I think it would be tightly coupled w/ hmake's list of compilers
09:34:28 <shapr> for pure haskell sources, I would think you would just give the hierarchical module location of each file
09:35:03 <SyntaxPolice_> yeah, pure haskell sources aren't too bad at all I guess.  I"m thinking more about the hard case.
09:35:26 <shapr> hmm
09:37:19 <shapr> from what I've seen of distutils and XEmacs packaging system, they clash with the debian system
09:38:40 <shapr> maybe they don't have to, but I'd suggest starting with a system that can install libraries for compilers that doesn't understand deb/rpm/etc 
09:38:56 <shapr> I would agree that dependencies are necessary
09:39:07 <SyntaxPolice_> shapr: could be... I was thinking of a tool that would sort of build debian source packages from the information provided by distutils
09:39:17 <SyntaxPolice_> or at least a skeliton of the package
09:39:27 <shapr> that would be a very useful tool
09:41:18 <SyntaxPolice_> that might solve the problem of maintaining a bunch of evil binary packages for every single library
09:43:39 <shapr> I think 75% of the libraries that come with GHC should be separate
09:44:53 <shapr> especially stuff like HaXml
09:46:28 <shapr> hi PrairieGeek 
09:47:58 <shapr> PrairieGeek: learning Haskell? or long time user?
09:49:12 <PrairieGeek> hey,  learning
09:49:23 <PrairieGeek> i know very little,  just reading the tutorials
09:49:30 <Janni> pHe4r m33!1
09:49:33 <PrairieGeek> looks like a great language
09:49:40 <shapr> PrairieGeek: it's very spiffy.
09:49:50 <Janni> PrairieGeek: leet speach ;)
09:49:57 <Janni> It's not _that_ great.
09:49:57 <PrairieGeek> looks very mathy.
09:50:04 <PrairieGeek> which is nice
09:51:03 * shapr grins
09:51:05 <Janni> What language are you talking about, btw?
09:51:08 <shapr> Janni: I think he's talking about Haskell ;-)
09:51:44 <PrairieGeek> good guess ;-P
09:52:42 <PrairieGeek> the tutorials have been enough to give me a few headaches actually.
09:53:24 <Janni> PrairieGeek: Yeah, when I began, I had to realise that there is much crappy or too formal documentation...
09:53:31 <shapr> the books are good
09:54:35 <PrairieGeek> books?  any you recommend?
09:55:02 <SyntaxPolice_> PrairieGeek: did you find the wiki: ? http://www.haskell.org/hawiki/FrontPage
09:55:03 <shapr> one by Simon Thompson, "The Craft of Functional Programming"
09:55:08 <Janni> PrairieGeek: Did you have a look at "Two Dozen Short Lessons in Haskell" (http://www.cs.ou.edu/cs1323h/textbook/haskell.shtml)? It's my favourite tutorial...
09:55:32 <PrairieGeek> of those three,  I have only looked at the wiki.  I will look at the others though
09:55:45 <PrairieGeek> shapr:  I have heard of that book
09:56:22 <shapr> if you like math, you'll probably like Paul Hudak's book more
09:56:35 <PrairieGeek> what do you use haskell for?
09:56:39 <PrairieGeek> oh I like math  ;-)
09:56:41 <shapr> everything I can ;-)
09:56:42 <PrairieGeek> heh
09:56:45 <shapr> lambdabot: hell
09:56:45 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
09:56:45 <lambdabot> [-DONE-]
09:56:46 <shapr> o
09:56:52 <shapr> lambdabot is written in Haskell
09:56:58 <shapr> @listmodules
09:56:58 <lambdabot> I have the following modules installed: ["chess","dict","eval","fact","fortune","hello","karma","more","searchml","state","system","topic","type","yow"]
09:56:58 <lambdabot> [-DONE-]
09:57:01 <PrairieGeek> nice
09:57:16 <shapr> I'm a member of the haskell-libs sourceforge project
09:57:23 <shapr> I've written a really crappy bayesian spam filter
09:57:28 <shapr> a mailing list search engine
09:57:52 <PrairieGeek> bayesian spam filter?  a la mozilla mail?
09:57:55 <shapr> yup
09:57:57 <PrairieGeek> slick
09:58:02 <PrairieGeek> in haskell?
09:58:06 <shapr> mine is pretty bad, it only gets 85%
09:58:08 <shapr> yep
09:58:12 <PrairieGeek> this is encouraging
09:58:19 <PrairieGeek> it looks cool,  and possibly useful too.
09:58:20 <shapr> on the good side, it's 127 lines of code, no matter how ugly they are :-)
09:58:46 <shapr> I think it is.
09:59:10 <shapr> I'm self-employed, mostly doing Python and Java, but I'm trying to get Haskell in there, since I think I can do a better job with it
09:59:40 <PrairieGeek> employers look for haskell coders?  (i'm interested in python too,  0 experience though)
10:00:01 <shapr> I only know a few people who get paid to write Haskell
10:00:07 <shapr> I haven't crossed that threshhold yet.
10:00:11 <shapr> but hopefully soon!
10:00:19 <PrairieGeek> gotta go to lunch...bbl.  thanks for input
10:00:21 <shapr> sure
10:00:32 <shapr> yay, my database code is working...
10:00:39 <shapr> time to go play warcraft III
10:00:40 <shapr> w00
10:00:41 * shapr bails
10:07:49 <ham[let]> hiho
10:09:08 <ham[let]> i thought that haskell was side effect free
10:09:10 <ham[let]> http://99-bottles-of-beer.ls-la.net/h.html#Haskell
10:09:27 <ham[let]> but why can i print lines in a function then?
10:11:18 <delYsid> because the type of main is actually IO ()
10:12:04 <ham[let]> ah ok so thats an exeption ?
10:12:20 <SyntaxPolice_> ham[let]: there has to be a way to do IO, right?
10:12:55 <ham[let]> SyntaxPolice yes but thats the only exeption the the sidefx freeness right?
10:13:08 <Igloo> That code doesn't print anything
10:13:12 <Igloo> It just returns a String
10:13:41 <ham[let]> ah ok
10:14:16 <delYsid> ah
10:14:34 <delYsid> so it is not really correct...
10:14:59 <SyntaxPolice_> ham[let]: for a function to perform IO, it must be in the IO monad, but I would agree that IO is a side effect.  fortunitely, thanks to monads, it doesn't break Haskell :)
10:15:14 <SyntaxPolice_> 'it' meaning IO.
10:16:00 <ham[let]> SyntaxPolice so what is that IO monand looking like?
10:16:08 <ham[let]> and what does it do exactly?
10:17:33 <hdaume> ham[let]: i wouldn't say haskell is side-effect free.  a SE-free language would be pretty useless
10:18:02 <ham[let]> i think i read that on a site linked form the haskell tutsite
10:18:49 <SyntaxPolice_> ham[let]: I'm not sure what you mean by 'what does the IO monad look like'.  A function that's in the IO monad has a type that looks like "a -> IO a" or something like that
10:19:15 <delYsid> haskell is side-effect free in the sense that it does not allow variable assignment...
10:19:34 <hdaume> ham[let]: you can think of something of the form 'IO a' as a function of type "RealWorld -> (RealWorld,a)", where the world is modified in the course of executing the action
10:19:41 <ham[let]> SyntaxPolice ok so its just a function that IOs a letter 
10:19:55 <ham[let]> what was the definition of a monand agin?
10:20:04 <ham[let]> a semigroup with a one element right?
10:20:16 <hdaume> no, that's a monoid :)
10:20:35 <ham[let]> so whats a monand then ?
10:21:30 <hdaume> in haskell, at least, it's a class which supports a return function of type 'a -> m a' and a bind function of type 'm a -> (a -> m b) -> m b', where m is the monad
10:21:40 <Marvin--> @fact monadlaws
10:21:43 <Marvin--> hmm
10:21:44 <lambdabot> SqlError {seState = "C", seNativeError = 1, seErrorMsg = "could not connect to server: No route to host\n\tIs the server running on host raven and accepting\n\tTCP/IP connections on port 5432?\n"}
10:21:44 <lambdabot> [-DONE-]
10:21:51 <Marvin--> ouch
10:21:54 <hdaume> so you can sequence a bunch of operations by doing 'op1 `bind` \x -> op2 x `bind` \y -> op3 y ..."
10:22:29 <Marvin--> shapr?
10:22:51 <delYsid> playing some game i think...
10:23:14 <ham[let]> hdaume you define monand with useing monand in the definition ??:)
10:23:21 * Marvin-- tries that stupid epiphany level again
10:23:33 <delYsid> heh, everyone has his habit, some drink, some smoke, others waste time with silly repetitive games :)
10:23:39 <ham[let]> nm ill read it up in the internet
10:24:06 <Marvin--> gahhhhh, why do I even bother
10:24:20 <ham[let]> are there some ai programmers in here?
10:24:51 * hdaume is
10:24:59 <Igloo> Marvin?
10:25:07 <hdaume> ham[let]: no, i'm saying that 'm' is a monad if it supports those operations on those types.
10:26:19 <Marvin--> Igloo: the keyboard input sucks
10:27:04 <Marvin--> you can't change direction without first releasing the other key, which makes it damn hard to dodge falling boulders
10:27:25 <Igloo> What are you playing?
10:28:32 <Marvin--> epiphany, a boulder dash clone
10:28:37 <Marvin--> apt-get install :)
10:28:52 <Igloo> Doh, I thought epiphany was the level name  :-)
10:29:23 <Marvin--> heh
10:29:35 <Marvin--> no, it's level *two* (zero-based, but still)
10:30:09 <Marvin--> and a newer version doesn't appear to be any better *grmbl*
10:31:25 <Igloo> You have the source...  :-)
10:32:34 * Marvin-- mails the author
10:32:43 <Marvin--> meh
10:33:02 <Marvin--> eek, it's written in C++
10:33:18 <Igloo> First rewrite it in Haskell. Then fix the bug.
10:34:38 <Marvin--> :)
10:55:08 <kosmikus> Igloo: ping
10:55:27 <Igloo> pong!
10:55:48 <kosmikus> just read your mail to about the packaging to the mailing list ...
10:55:55 <Igloo> You are the generic Haskell person, right?
10:56:03 <kosmikus> yes
10:56:08 <Igloo> OK
10:56:20 <kosmikus> @fact kosmikus
10:56:22 <Marvin--> for extra amusement, mis-parse that :-)
10:56:23 <lambdabot> SqlError {seState = "C", seNativeError = 1, seErrorMsg = "could not connect to server: No route to host\n\tIs the server running on host raven and accepting\n\tTCP/IP connections on port 5432?\n"}
10:56:23 <lambdabot> [-DONE-]
10:56:29 <kosmikus> huh
10:56:40 * Igloo has to leave in about 3 minutes
10:57:31 <kosmikus> I justed wanted to tell you that I liked the ideas you described. Reminded me of what I tried to suggest in the "libraries infrastructures" thread a while ago. Unfortunately, the reactions weren't very enthusiastic back then ...
10:58:01 <Igloo> OK, cool - I've only been lightly skimming the threads due to lack of time
10:58:02 <kosmikus> I'd really like to see this auto-upgrading of libraries happening whenever I upgrade GHC
10:58:17 <Igloo> Yes, I think that's necessary
10:58:32 <Igloo> Otherwise everything will have dependencies on precise versions of GHC which would be a nightmare
10:59:06 <kosmikus> Yes. Gentoo will probably be extended by "reverse dependencies" soon, so then it should be possible even without support ... but still, it would be nice if there is a normalized way to do it.
10:59:58 <Marvin--> Igloo: I think automatic rebuilding sounds really really scary, it feels like it could go very very wrong
10:59:58 <Igloo> The other alternative I see for Debian is building debs, kind of like happens for kernel modules and kernels. I don't see what advantage that would give, though
11:01:01 <Igloo> Marvin: It's nice and simple to tidy up if a build fails which is the main issue
11:01:10 <kosmikus> Igloo: could you explain?
11:01:24 <kosmikus> how does it work in debian for kernel modules?
11:01:37 <Igloo> No, because I now have to leave in -2 minutes, sorry  :-)
11:01:45 <kosmikus> okay, see you
11:01:59 * Igloo disappears but can try to explain when I get back
11:02:09 <kosmikus> Marvin--: why are you so afraid of automatic rebuilding?
11:03:59 <Marvin--> it's not that I'm afraid of automatic rebuilding, I'm afraid of failed automatic builds
11:05:39 <kosmikus> Well, there's always a risk, of course. But if, after upgrading, say, GHC, your libraries won't work anymore, then you don't have much to lose
11:06:08 <Marvin--> which is why I would actually prefer exact version dependencies
11:07:25 <kosmikus> If you install a package via rpm, apt-get, emerge or whatever, there is always a risk that the installation fails, regardless of whether it tries to rebuild or not
11:08:02 <Marvin--> what do you mean?
11:08:06 <kosmikus> exact version dependencies are nice in theory, but a lot of work to keep consistent and up-to-date
11:08:21 <Marvin--> they also protect the user
11:08:35 <kosmikus> from what?
11:09:19 <Marvin--> from the problem of incompatabilities
11:09:58 <delYsid> Marvin--: for emacsen packages, the auto-rebuild had (IMO) the effect that packages were forced to be more interoperable.
11:10:01 <delYsid> thats a good thing.
11:10:16 <kosmikus> probably the best solution would be to have a choice ...
11:11:26 <kosmikus> I for one wouldn't want to depend on the distro maintainers that, in case of a GHC update, they release new versions of the 100 library packages that may exist, but rather get as much as possible immediately, even if one or two of the builds might fail ...
11:12:00 <kosmikus> someone else might prefer the security of the individual packages having been tested with the new version, I can understand that.
11:19:28 <Marvin--> kosmikus: I think it's a problem that should be solved by developers, of course it needs communication and coordination, but I don't see that as a big problem, we're not that many and it's not that many packages
11:20:18 <Marvin--> kosmikus: and in Debian there's always the option of apt-get source... Heck, we could even write a program that apt-get source:es, and rebuilds, but I don't think it should be the default behaviour
11:39:29 <kosmikus> Marvin--: even with not-so-large numbers of packages the building process for these packages has to become more uniform, _especially_ if version-specific packages need to be generated. Certainly there are problems to be solved, but that's why we're discussing, isn't it? Also, I would hope that the number of separate packages to increase when the infrastructure/package system is more evolved than now, not only because new packages are added, but
11:39:40 <SyntaxPolice_> Marvin-- there aren't a lot of packages now, but there might be eventually, and IMHO, Haskell packages haven't been very well maintained.
11:49:34 * Janni is back from dinner
11:59:20 <Janni> And I'm annoyed by the fact, that Integer is an instance of Bits in GHC's but not in Hugs' Bits-module...
12:00:24 <Janni> What can I do about this, if I want to run the program with both? Preprocessing?
13:22:39 * SyntaxPolice_ feels that the code he's writing now could use arrows
13:36:03 * tmoertel does not *appreciate* IE's handling of style sheets
13:37:17 * Darius doesn't appreciate IE's handling of most things, especially the ones that are supposed to be "helpful"
15:32:55 <hdaume> does anyone know how to get text to appear on top of a light-gray box in latex?  :)
15:33:56 <kosmikus> colorbox?
15:34:11 <kosmikus> but depends on a lot of things, actually
15:35:10 <kosmikus> should it be a few words within a paragraph, or a box that spans several lines over the full page width?
15:36:20 <hdaume> something like \minipage would be best
15:36:33 <hdaume> i.e., multiline
15:37:59 <kosmikus> one way I recently use very often is to use colortbl.sty and put the text in question in a single-column table, the column in paragraph mode, and select an appropriate background color
15:41:13 <hdaume> what if i want to use it in a newenvironment?
15:42:28 <kosmikus> depends on if you need verbatim inside, I guess ...
15:42:33 <hdaume> i do :)
15:43:43 <kosmikus> I think fancyvrb.sty can do that.
15:44:34 <Janni> And back again...
15:46:16 <hdaume> cool  thanks!
15:50:32 <kosmikus> there probably are more possibilities, but with verbatim it's always difficult
15:51:34 <hdaume> yeah
19:14:34 <flippo> @yow
19:14:35 <lambdabot> NOT fucking!! Also not a PACKAGE of LOOSE-LEAF PAPER!!
19:14:35 <lambdabot> [-DONE-]
19:14:50 <flippo> Zippy is feeling rude today
19:15:07 <Pseudonym> Apparently.
22:55:05 <flippo> @yow
22:55:06 <lambdabot> ..  the HIGHWAY is made out of LIME JELLO and my HONDA
22:55:06 <lambdabot>  is a barbequed OYSTER!  Yum!
22:55:06 <lambdabot> [-DONE-]
23:39:15 <Pseudonym> @yow
23:39:15 <lambdabot> Let's go to CHURCH!
23:39:15 <lambdabot> [-DONE-]
