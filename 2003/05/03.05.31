01:44:30 * seth is away: Off to the glue factory
01:47:02 <cale> http://vx.hn.org/autoshare/screenshot.jpg - I have just gone insane (and located a bug!)
01:51:26 <cale> For anyone interested in the problem I was having, it seems that not all of the variables were getting expanded on an expression before putting it in the dictionary for some reason, so it probably has nothing to do with the reduction process at all. Why this is happening, I'm too tired to tell, as it's now 04:51.
02:33:25 <Darius> Riastradh: Swierstra's parser library may be arrowized now.
03:26:32 <ludde> i don't remember how to make a state monad :(
03:42:54 <Darius> ludde: why do you need to remember? Just use State/StateT from Control.Monad.State.
03:44:17 <ludde> okay
03:44:22 <ludde> then i need to know how to use those :)
03:45:09 <Darius> www.haskell.org/hawiki/wiki?MonadState
03:45:23 <ludde> newtype SEF a = SEF ([SoundExpr] -> (a,[SoundExpr]))
03:45:23 <ludde> instance Monad SEF where
03:45:23 <ludde>   (SEF f) >>= k = SEF (\c -> let (r,s)=(f c) in let (SEF b) = k r in b s)
03:45:23 <ludde>   return x = SEF (\c -> (x, c))
03:45:23 <ludde>   fail s = undefined
03:45:49 <ludde> Darius: I learn more from doing it myself also :)
04:17:37 <cale> @eval ((S((S(K S))K))(K((S K)K)))
04:17:38 <lambdabot> <<EM Dynamic -> EM Dynamic>>
04:17:56 <cale> @eval ((S((S(K S))K))(K((S K)K))) x
04:17:56 <lambdabot> <<EM Dynamic -> EM Dynamic>>
04:18:07 <cale> @eval ((S((S(K S))K))(K((S K)K))) (\x -> x) x
04:18:07 <lambdabot> (line 1, column 33):
04:18:07 <lambdabot> unexpected "-"
04:18:07 <lambdabot> expecting identifier or "."
04:18:19 <cale> @eval ((S((S(K S))K))(K((S K)K))) (\x . x) x
04:18:19 <lambdabot> unbound variable: x
04:18:27 <cale> @eval ((S((S(K S))K))(K((S K)K))) (\x . x) 42
04:18:28 <lambdabot> 42
04:18:47 <cale> hrm... that should undergo eta expansion then.
04:18:57 <cale> contraction, rather
04:45:27 <ludde> I have a list of numbers, I want to count the occurences of each number. Is there some fast way to do that
04:47:11 <tic> ludde, output in a list?
04:47:15 <jlouis> There is the obvious way with an array and state, but I would show that the part of the code was the bottleneck before i'd care
04:47:41 * tic decides not to un-help
04:48:01 <ludde> tic: if it is [1,2,2,2,4,4,4,5], then I want something like [(1,1),(2,3),(4,3),(5,1)]
04:48:14 <jlouis> always sorted?
04:48:22 <ludde> jlouis: actually, no.
04:49:18 <jlouis> A whimpy way would be to sort them, yelding O(n lg n)
04:49:32 <ludde> is haskell's sort O(n*logn)
04:49:41 <tic> hm
04:49:54 <tic> it's probably O(log n), but then you need the counting, which is O(n), right?
04:50:09 <jlouis> mergesort on the list is n lg n, implement that and ...
04:50:30 <jlouis> tic: you cannot sort faster than O(n lg n)
04:50:36 <tic> jlouis, okay.
04:50:38 <jlouis> if you base on comparison that is
04:50:54 <tic> jlouis, I'm not very good at that stuff.
04:51:02 <jlouis> I would sort them, and then pass a O(n) pass down over them
04:51:44 <jlouis> accumulating the number.. if a faster implementation is needed I would try thinking about counting sort
04:51:57 <ludde> ok
04:52:23 <wli> f xs = f' xs' xs where { xs' = zip xs [0..] ; f' ys [] = ys ; f' ys (z:zs) = [(x, if x == z then n + 1 else n) | (x,n) <- ys] }
04:52:29 <jlouis> which is O(N) but does not use comparison, is quite imperative and really not the find
04:54:41 <wli> ergh
04:54:58 <wli> f xs = f' xs' xs where { xs' = zip xs [0..] ; f' ys [] = ys ; f' ys (z:zs) = f' [(x, if x == z then n + 1 else n) | (x,n) <- ys] zs }
04:56:04 <ludde> wli: what is the complexity of that
04:57:33 <wli> ludde: O(N**2) I think
04:57:41 <wli> ludde: O(lg(n)) is possible with FiniteMap
04:57:45 <wli> ludde: er
04:57:50 <wli> ludde: O(N*lg(n)) is possible with FiniteMap
04:57:56 <ludde> okay
04:58:01 <wli> ludde: O(N) is possible with mutable arrays + Ix
05:00:44 <wli> properly-sized hashtable whee
05:02:20 <ludde> i don't like to do stuff like this in haskell
05:02:52 <wli> ludde: I think ArrayST should DTRT
05:20:20 <jlouis> è/g 5
05:20:22 <jlouis> bleh
05:48:35 <Marvin--> hmm, interesting, Wadler is one of the designers of the generics in java 1.5
05:48:41 <Marvin--> maybe it won't suck
05:50:19 <tic> Marvin--, vet du var inne i stan man kan köpa inlines billigt?
05:50:46 <jlouis> Marvin--: Wadler has an interest in Java
05:51:08 <Marvin--> tic: nope
05:51:11 <Marvin--> jlouis: so it seems
05:56:41 <jlouis> tic: buy some Roces or something like that ;)
05:57:12 <tic> jlouis, m'kay. I want fitness; are they?
05:57:35 <tic> actually I'd like a pair of all-round inlines, although I don't know if that'd work
05:59:28 <Marvin--> I still don't see how I can express  instance (Ord a, Ord b) => Ord (a,b)  in Java 1.5
06:00:02 <Marvin--> would it be a  class ComparablePair<A implements Comparable, B implements Comparable> extends Pair<A,B> implements Comparable  or something?
06:01:18 <jlouis> Marvin--: stop wondering
06:02:05 <Marvin--> heh
06:12:15 <o3> Marvin--: java's generics are equivalent to parameterised types in haskell, i think
06:12:18 <o3> (ditto for C++ templates)
06:13:39 <Marvin--> right
06:41:03 <Marvin--> "Despite--or maybe because of--the OrbitTouch's similarity to the female anatomy, it's very comfortable to use."  hahaha
06:47:08 <Marvin--> 'ello Smerdyakov
07:09:59 <jlouis> Marvin--: from where/
07:10:00 <jlouis> ?
07:10:07 <jlouis> hi Smerdyakov (hail SML!)
07:12:43 <Smerdyakov> Hi Marvin--. Hi jlouis.
07:13:24 <jlouis> hmmm, why do they implement templates in Java now? It seems like going the wrong way
07:13:35 <jlouis> or does C# have templates?
07:14:30 <o3> C# has generics; i don't know the specifics, though
07:14:48 <jlouis> hmmm\
07:15:06 <Marvin--> jlouis: a review of the OrbitTouch input device
07:15:18 <steveh> generics in java have been in the works for quite some time now IIRC
07:16:03 <Marvin--> I was under the impression that java generics are a bit less complicated than C++ templates, but I'm probably wrong
07:18:19 <jlouis> that depends on if the allow for operator overloading
07:18:37 * jlouis is having fun writing a combinatorial parser
07:18:44 <steveh> the biggest issue with C++ templates for me is debugging
07:19:01 <steveh> the pervasive templates in the STL make it rough
07:22:06 <jlouis> say goodday to 117 lines of errors for that single error
07:22:27 <Marvin--> heh, I get that with ghc's pretty-printed errors too :-)
07:23:07 <jlouis> at least your programs have a lot less errors than C++ ones
07:24:55 <Darius> yes wli's: :t let x0 = ();x1 = (x0,x0);x2 = (x1,x1);x3 = (x2,x2);x4 = (x3,x3);x5 = (x4,x4);x6 = (x5,x5);x7 = (x6,x6);x8 = (x7,x7);x9 = (x8,x8);x10 = (x9,x9) in x10
07:44:44 <Arnia> I wonder how long it will be before GHC includes Arrow syntax as standard
07:59:34 <Riastradh> Grr.  The Haskell Emacs mode gets confused about parentheses in character literals.
09:01:50 <d-bugd> Marvin--: Java Generics would produce new types, List<Person> is still the same type as List
09:02:08 <d-bugd> s/would/wouldn't/ :-)
09:23:57 <jlouis> explicit typing sucks... gimme inference
09:34:23 <sjj> dynamic typing! ;)
09:57:58 <jlouis> hehe, smoked weed?
11:20:54 <Riastradh> Is there a syntactically simple way to copy a record with one modified field?
11:21:21 <wli> yes
11:21:29 <wli> oldrec { field = newval }
12:25:39 <jlouis> mmmm, combinator-parser-library finished
12:26:04 <Riastradh> Arrow combinators?
12:27:45 <jlouis> ||,--, >> and such stuff
12:28:02 <Marvin--> I thought || and -- were busy :)
12:28:12 <jlouis> Marvin--: not in SML :)
12:28:19 <Marvin--> aha
12:28:23 <jlouis> though i'd need to use ||| and --- in haskell
12:28:29 <jlouis> or something like that
12:29:14 <Riastradh> --- probably won't work in Haskell.
12:29:52 <Marvin--> Riastradh: actually, it does
12:29:52 <jlouis> it came to my mind too
12:30:29 <Marvin--> or so I thought
12:31:34 <jlouis> lexer probably has an '--.*' regex
12:31:53 <Marvin--> for some strange reason, --- is impossible, but you can have a --+ operator
12:32:47 <jlouis> ++ would have been more logical
12:32:51 <jlouis> or &&\
12:32:55 <jlouis> && even
12:33:09 <Marvin--> well, I meant in context of the comments
12:33:16 <jlouis> it implements rule ''conjunction'', whereas || implements rule disjunction
12:33:20 <Marvin--> I don't really see why --- is impossible and --+ isn't
12:33:22 <Riastradh> --- probably parses as just the - operator.
12:33:34 <jlouis> might be
12:33:59 <Riastradh> Er, '5 ---' parses for me as 5.
12:35:40 <Marvin--> the grammar of haskell is bloody complicated
12:37:03 * Riastradh hugs s-expressions.
12:42:03 <stepcut> mmmmm. s-expressions
14:55:38 <Marvin--> slow day on #haskell today
14:56:27 <mgoetze> it's not my fault!
15:01:38 <mgoetze> geez, someone tell this idiotic c++ program i found that you need two eyes to live, not one
15:01:38 <flippo> it's all our fault
15:01:43 <mgoetze> gnugo is soo kicking it's ass :)
15:05:19 <Marvin--> Q: What's yellow, normed, and complete?
15:05:19 <Marvin--> A: A Bananach space.
15:05:20 * Marvin-- groans
16:12:22 <cale> Even gnugo is so weak sometimes. It seems to be way too passive most of the time.
16:14:53 <Verbed> cale: How does Gnugo represent the 'difficulty' that it's playing at?
16:17:44 <mgoetze> Verbed: info gnugo
16:17:46 <cale> I'm not sure exactly - I think it's just search depth.
16:17:58 <mgoetze> cale: i think it's getting somewhat better, though
16:18:01 <cale> Oh, as in how do you change the difficulty?
16:18:40 <Verbed> Right :)
16:18:56 <mgoetze> Verbed: start it up with --level 1, --level 15, etc.
16:19:00 <mgoetze> default is 10
16:19:16 <mgoetze> for finer nuances, read the info page
16:19:33 <cale> my copy says up to 10 default 10
16:19:55 <cale> gnugo --help gives a quick list of options
16:23:03 <inkedmn> wtf, why is hugs telling me it can't open files when i'm giving it the full path?
16:23:11 <inkedmn> (and perms isn't the problem)
16:23:26 <cale> heh - still fighting with that problem eh?
16:23:45 <inkedmn> yeah
16:23:52 <cale> maybe submit a bug report
16:23:58 <inkedmn> seriously annoying
16:24:15 <inkedmn> yeah, i think i might
16:24:37 <inkedmn> should i submit it to debian? or is there somewhere else?
16:25:05 <inkedmn> ah, hugs-bugs@haskell.org
16:25:14 <cale> check out http://www.haskell.org/hugs - see if you can find a developer's list there or something.
16:25:26 <inkedmn> ok
16:26:09 <cale> Please send bug reports to hugs-bugs@haskell.org. If you send the bug report to an individual, you run the risk that that person is on vacation, is rushing to meet a deadline or just accidentally deletes yPlease send bug reports to hugs-bugs@haskell.org. If you send the bug report to an individual, you run the risk that that person is on vacation, is rushing to meet a deadline or just accidentally deletes your mail. Sending to the mailing l
16:26:09 <cale> gives us all a chance to reply to your bug report.our mail. Sending to the mailing list gives us all a chance to reply to your bug report.
16:26:46 <cale> man, that paste got messed up somehow.
16:26:55 <cale> oh well, at least it's all there
16:26:56 <inkedmn> ok
16:27:17 <inkedmn> heh
16:35:54 <inkedmn> meh, i figured it out
16:36:03 <inkedmn> it doesn't expand "~" to $HOME
16:37:23 <inkedmn> if i give the WHOLE path, it works
16:37:31 * inkedmn checks for how to do feature requests...
16:40:46 <cale> what shell are you using?
16:41:27 <cale> type "echo ~" and tell me what you get
16:41:35 <inkedmn> zsh
16:41:43 <inkedmn> <|inkedmn@skank|~>% echo ~
16:41:48 <inkedmn> /home/inkedmn
16:41:53 <cale> hmm.
16:42:14 <cale> /bin/echo ~
16:42:20 <cale> (just to be safe)
16:42:40 <inkedmn> <|inkedmn@skank|~>% /bin/echo ~
16:42:42 <inkedmn> /home/inkedmn
16:43:12 <cale> If you don't get an expansion for ~ in some case it's probably an issue with your shell. AFAIK, programs don't have to do that.
16:44:22 <cale> Try using bash and giving hugs the same command line.
16:46:02 <inkedmn> same error in bash
16:46:57 <cale> hrm
16:47:23 <cale> try giving the same command line to /bin/echo
16:47:33 <cale> does the ~ expand?
16:48:44 <inkedmn> inkedmn@skank:~$ echo ~
16:48:45 <inkedmn> /home/inkedmn
16:48:45 <inkedmn> inkedmn@skank:~$ /bin/echo ~
16:48:45 <inkedmn> /home/inkedmn
16:49:11 <cale> no I mean the exact thing you passed to hugs
16:49:50 <inkedmn> oh, no it doesn't
16:50:10 <cale> what exactly is the command like you're passing to hugs?
16:51:15 <inkedmn> :l ~/code/haskell/code/Ch4.hs
16:51:52 <hdaume> inkedmn: i would guess that hugs just doesn't expand ~
16:51:56 <cale> oh, that's inside hugs - yeah
16:52:11 <cale> if you pass it in as a command line it should work
16:52:19 <cale> like hugs ~/code...
16:52:30 <inkedmn> oh, ok
16:52:55 <cale> but yeah, that might be a reasonable feature request
17:07:28 <Smerdyakov> Go to http://www.hprog.org/applet.html for multi-user coding environment!
18:13:45 <cale> Anyone here know how to get java applets to work in Mozilla (debian unstable)? Java works fine, but the plugin doesn't seem to. (it doesn't register application/x-java-vm)
18:42:26 <inkedmn> evening friends
21:01:44 <inkedmn> anybody home?
21:02:51 <inkedmn> learning about creating new datatypes w/ "data", having some trouble understanding what's happening...
21:03:11 <cale> inkedmn: what's up?
21:04:16 <inkedmn> ok, well i created a really basic datatype called Triple and three functions that use it
21:04:23 <cale> alright
21:04:30 <inkedmn> data Triple a b c = Triple a b c
21:04:35 <inkedmn> there's the type
21:04:51 <cale> sure
21:04:58 <inkedmn> tplFst (Triple a b c) = a
21:04:58 <inkedmn> tplSnd (Triple a b c) = b
21:04:58 <inkedmn> tplThd (Triple a b c) = c
21:05:02 <Verbed> There are two climbers in the Scottish highlands, one makes a false step and both fall to their deaths.  As their souls rise through the sky, one points to a pair of eagles and exclaims "Ah, eagles!". The eagles being polite said nothing.
21:05:03 <inkedmn> and the functions
21:05:11 <Verbed> You may ask me a question of the riddle, and I will answer 'yes' or 'no' if applicable.
21:05:42 <Smerdyakov> I think Verbed has strange preoccupations. :-)
21:05:43 <inkedmn> cale: but i'm not sure how i'm supposed to call the functions in hugs
21:06:13 <cale> inkedmn: try something like tplSnd (Triple 1 2 3)
21:06:40 <Verbed> Quick, before the people in #c get it first.
21:06:58 <inkedmn> cale: heh, ok that worked
21:07:00 <inkedmn> Main> tplFst 'a' 1 3.4
21:07:09 <inkedmn> i was trying that and getting errors
21:08:27 <inkedmn> if i write type signatures for these functions, will i have to have "Triple" in there?
21:08:34 <cale> yeah
21:08:38 <inkedmn> hmm, ok
21:09:02 <inkedmn> so any function using a user-defined datatype has to contain the name of the type?
21:09:22 <cale> data NameOfType a b c = TyCon a b c
21:09:45 <cale> the name of the type and the name of the type constructor don't have to be the same.
21:09:50 <inkedmn> oh, ok
21:09:55 <inkedmn> that's right, i read that
21:11:03 <cale> so like, if instead you had Triple a b c = T a b c, you'd type "Triple" in the type signatures, and "T" whenever you wanted to construct a triple.
21:11:31 <inkedmn> ok, i gotcha
21:20:09 <cale> Verbed: was one of them a Haskell programmer?
21:20:38 <Verbed> cale: No
21:21:22 <cale> oh, okay then.
21:21:40 <inkedmn> cale: new question! :)
21:21:45 <inkedmn> same type of thing
21:22:10 <cale> alright
21:22:20 <inkedmn> this time, new data type is 4 values, first 2 are the same type, last 2 are the same type
21:22:46 <inkedmn> data Quadruple a a b b = Quad a a b b
21:23:14 <inkedmn> now, i have to write functions that return the first 2 elements and the last 2 elements
21:23:27 <inkedmn> (in a list)
21:23:28 <inkedmn> qudFst (Quad a a b b) = a:a:[] 
21:23:29 <inkedmn> qudSnd (Quad a a b b) = b:b:[]
21:23:34 <inkedmn> that, obviously, won't work :)
21:23:54 <Smerdyakov> Did your data declaration work?
21:24:00 <cale> quadFst (Quad a b _ _) = [a,b]
21:24:00 <Smerdyakov> I would think it wouldn't compile.
21:24:14 <inkedmn> er, guess not
21:24:23 <inkedmn> Smerdyakov: you'd be correct
21:24:43 <Smerdyakov> Have you read something about polymorphic datatypes?
21:24:54 <Smerdyakov> It looks like you don't understand what the variables before the = in data declarations are.
21:24:57 <inkedmn> not yet, i'm still on the chapter about user-defined datatypes
21:25:05 <inkedmn> you'd be correct
21:25:24 <cale> it'd just be Quadruple a b
21:25:26 <Smerdyakov> Polymorphic datatypes are any that have more than one word between data and =.
21:25:35 <Smerdyakov> Are you sure you aren't reading about them that? =)
21:29:44 <inkedmn> well, i don't think so, but let me check
21:30:21 <Smerdyakov> If that section has data declarations with more than one word between 'data' and '=', then it is discussing polymorphic datatypes.
21:30:22 <inkedmn> nope, no mention of polymorphic datatypes
21:30:29 <inkedmn> nope
21:30:46 <inkedmn> this is just one of the exercises at the end of the section (what i'm trying to write)
21:31:18 <Smerdyakov> If it asks you to implement polymorphic datatypes, then it must have covered them!
21:31:24 <Smerdyakov> What does the exercise tell you to do?
21:32:38 <inkedmn> Write a datatype Quadruple which holds 4 elements, first two elements must be the same type and the last 2 elements must be the same type...
21:32:39 <stepcut> Smerdyakov: is the applet broken?
21:32:52 <Smerdyakov> It only works when I want it to work, stepcut.
21:32:59 <inkedmn> write a function firstTwo which returns a list containing the first two elements
21:33:03 <stepcut> Smerdyakov: :p
21:33:04 <Smerdyakov> And I don't want it to work for a while.
21:33:07 <inkedmn> (same with the second two elements)
21:33:31 <Smerdyakov> inkedmn, then you have missed a discussion of polymorphic datatypes somewhere. Go back and look for it.
21:33:41 <stepcut> Smerdyakov: I was able to write some scheme code that openned a window with some text in it 
21:33:50 <cale> inkedmn: which tutorial are you reading?
21:34:38 <inkedmn> it's called Yet Another Haskell Tutorial
21:35:31 <Smerdyakov> stepcut, good. I'm working on stopping you from doing that. :-)
21:37:46 <cale> inkedmn: 39
21:38:06 <cale> inkedmn: (section 4.2)
21:38:21 <inkedmn> ah, crap
21:38:22 <inkedmn> you're right
21:38:25 <inkedmn> sorry :(
21:38:37 <cale> no problems
21:47:47 <stepcut> Smerdyakov: damn you!!
21:49:08 <Smerdyakov> stepcut, http://sisc.sourceforge.net/ has a link to an applet where you can try it :-)
21:49:24 <cale> @eval ((S((S(K S))K))(K((S K)K))) (\x. x * 2) 21
21:49:25 <lambdabot> 42
21:49:30 <stepcut> :>
21:50:43 <cale> @eval ((S((S(K S))K))(K((S K)K))) 21
21:50:44 <lambdabot> <<EM Dynamic -> EM Dynamic>>
21:53:42 <stepcut> @eval "hello, world!"
21:53:43 <lambdabot> hello, world!
21:53:48 <stepcut> :)
22:15:41 <inkedmn> ddipaolo: care to explain the situation to these nice folks?
22:16:13 <ddipaolo> yeah, give me a minute
22:16:46 <cale> ?
22:17:00 <inkedmn> cale: he and i are working on the problem i've been describing
22:17:09 <cale> ah okay.
22:17:12 <inkedmn> the Quadruple datatype, etc.
22:17:14 <ddipaolo> going through "Yet Another Haskell Tutorial" (also happens to be linked in the "Learning Haskell" link in the topic), running through exercise 15 (pg. 48) - for those of you playing along at home
22:17:30 <ddipaolo> data Quadruple a b c d = Quadruple a a b b
22:17:30 <ddipaolo> this data type def'n and constructor work fine
22:17:43 <cale> er, why the c d?
22:17:56 <ddipaolo> I think it whines if I use "a a b b"
22:17:59 <cale> you're not using them
22:18:14 <cale> data Quadruple a b = Quad a a b b would work
22:18:25 <ddipaolo> oh, okay, not sure I fully understand the type params then
22:18:36 <ddipaolo> just any type that can be used in defining the datatype?
22:18:42 <cale> yeah
22:18:47 <ddipaolo> ah, okay, that helps
22:18:47 <inkedmn> ah, ok
22:19:15 <ddipaolo> aaaaand that makes the other problem go away :)
22:19:26 <cale> you can think of Quadruple a b (though it's actually a type definition) as a function that gives a type contructor for the type.
22:19:39 <ddipaolo> hmm, interesting
22:20:09 <cale> though that's a little strange, maybe it helps to show what the "a" and "b" there are for - there parameters where you plug a type in.
22:20:18 <cale> they're
22:21:22 <cale> and on the other side of the = is given the type constructor that will contruct elements of type Quadruple a b.
22:21:56 <ddipaolo> right, that part I actually got from the start :)
22:30:40 <ddipaolo> oh, and thanks, btw :)
22:30:52 <cale> np
23:08:28 <stepcut> #define sucks
23:13:16 <cale> #define socks
23:14:38 <o3> morning
23:15:12 <stepcut> #define does not support recursion 
23:15:27 <stepcut> :p
23:16:09 <cale> hey - don't knock those #define folks - a few of them are my friends :)
23:16:29 <cale> and shouldn't you be using the Y combinator?
23:17:05 <stepcut> :(
23:17:11 <cale> :)
23:17:18 <cale> heh
23:17:21 <stepcut> I was trying to add S K I to c via #define, but that is futile
23:17:31 <cale> I'm just joking around.
23:17:45 <cale> er, happen to know anything about eta reduction?
23:17:50 <stepcut> no
23:18:13 <cale> I'm having problems with my haskell implementation of SK-calculus
23:18:29 <cale> regarding things not getting eta-reduced
23:19:38 <cale> and C's #define won't support recursion, but you could probably just run the preprocessor over your file until it doesn't change anymore.
23:20:14 <stepcut> recursion isn't really what i want. i think i need partial application
23:20:38 <cale> yeah, that's sort of what I need too.
23:21:05 <cale> I need a way of turning (\x. f x) into f.
23:21:19 <cale> Although not at the lambda calculus level.
23:21:49 <cale> I have a couple of rules here that are supposed to take care of that, but there are still cases where it doesn't seem to be working.
23:22:36 <stepcut> @eval "that sucks"
23:22:37 <lambdabot> that sucks
23:24:21 <stepcut> @eval (S (S (K (\x y. x + y)) I) I 5)
23:24:22 <lambdabot> 10
23:24:43 <cale> @eval ((S((S(K S))K))(K((S K)K))) 42
23:24:44 <lambdabot> <<EM Dynamic -> EM Dynamic>>
23:24:52 <cale> @eval ((S((S(K S))K))(K((S K)K))) (\x .x) 42
23:24:53 <lambdabot> 42
23:25:30 <stepcut> what does that do?
23:25:42 <stepcut> applies a function to a value?
23:25:46 <cale> It's (succ 0)
23:26:03 <cale> in other words, 1.
23:26:19 <cale> but it's only extensionally equivalent to I
23:27:48 <cale> @eval ((S((S(K S))K))(K((S K)K))) (\x . 2 * x) 21
23:27:49 <lambdabot> 42
23:27:55 <cale> (\x . 2 * x) 21
23:28:02 <cale> @eval  (\x . 2 * x) 21
23:28:02 <lambdabot> 42
23:28:56 <cale> it's like (\f x. f x)
23:29:30 <stepcut> that's what I thought
23:30:15 <cale> er, (\x. I x)
23:30:32 <cale> same thing, mostly.
23:33:52 <cale> no, it really is (\x y. I x y)
23:34:24 <cale> @eval (((S((S(K S))K))(K((S K)K))) 42) * 2
23:34:24 <lambdabot> type error
23:34:46 <cale> hrm.
23:34:48 <cale> I dunno.
