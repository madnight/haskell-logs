00:44:20 <kosmikus> hi all
00:45:06 <cfork> hello, kosmikus
01:48:14 <shapr> hi kosmikus 
01:52:07 <kosmikus> hi shapr
01:52:26 <shapr> how's research?
01:53:01 <kosmikus> interesting, as always -- just trying to get a HW paper done, but I am not very optimistic right now
01:58:14 <kosmikus> what are you working on?
01:59:10 <shapr> swedish homework at this instant :-)
01:59:40 <kosmikus> I thought that you're already an expert in that language :)
01:59:51 <shapr> heh, I wish
02:00:07 <kosmikus> how long since you moved to Sweden?
02:00:17 <shapr> We moved here seven months ago.
02:00:22 <shapr> We started classes five months ago.
02:00:44 <shapr> Swedish is a fun language
02:00:53 <kosmikus> so I've heard ...
02:00:53 <shapr> when did you move to .nl ?
02:01:04 <kosmikus> in October 2000
02:01:25 <shapr> have you had the opportunity to learn Dutch?
02:01:56 <kosmikus> yes -- I did not really spend much time on it, though; Dutch is quite easy to learn for a German
02:02:17 <kosmikus> by now I am quite comfortable with the language
02:02:47 <kosmikus> my English is still better, though
02:03:25 <shapr> You sound very comfortable in english, have you spent time in one of the english-speaking countries ?
02:04:10 <kosmikus> no -- but I have moved to the Netherlands without speaking any Dutch at all; therefore, the first time was quite some practice for my English
02:04:46 <shapr> It's nice to have three languages available.
02:05:02 <shapr> My favorite Dutch word is still gezeik. 
02:05:09 <kosmikus> my grammar probably did not improve very much, but at least I don't have to think anymore when I want to express myself in English :)
02:05:15 <shapr> :-)
02:05:41 <shapr> What part of Germany are you from?
02:06:26 <kosmikus> I think we had that before. Born in Luebeck, but the last five years I have lived in Konstanz, at Lake Constance, close to the Swiss border
02:06:39 <shapr> Oh yes, the Swiss border.
02:07:06 <kosmikus> It's very beautiful down there in the south ...
02:07:28 <kosmikus> where in Sweden are you located
02:07:45 <kosmikus> three languages available: yes, I only wish I could speak French as well
02:07:54 <shapr> I live in Boden, about 800km north of Stockholm.
02:08:14 <shapr> The closest big city is Luleå
02:08:40 <kosmikus> that's quite far to the north -- why did you move, because of a job?
02:09:23 <shapr> Not really, We're both self-employed, we do telework for various EU projects.
02:09:38 <ChilliX> shapr: Are you going to PLI this year? (Given that it is in Sweden.)
02:10:00 <shapr> ChilliX: I'm planning to go. Assuming nothing unexpected happens, I'll be there!
02:10:12 <kosmikus> will be there as well
02:10:15 <shapr> I've promised to teach Igloo how to do contact juggling. :-)
02:10:45 <ChilliX> Hehe - we can have a #haskell meeting there, then
02:10:50 <shapr> yah, I hope so.
02:11:07 <shapr> I've been trying to organize evening hacking meetings.
02:11:31 <shapr> something like, "bring a laptop with ethernet or wireless"
02:12:14 <kosmikus> ChilliX: chak@...au --> are you Manuel?
02:12:19 <seth_> shapr: know any wireless adapters that can do 4000 miles?
02:12:22 <ChilliX> kosmikus: yes
02:12:27 <shapr> seth_: heh, not really :-)
02:12:42 <seth_> shapr: oh, well...
02:12:47 <ChilliX> seth_: you surely could make a lot of money if you went one of those...
02:13:00 <kosmikus> ChilliX: hi there :) I am Andres from Utrecht ...
02:13:22 <ChilliX> kosmikus: I guessed this much from your UID ;-)
02:13:26 <seth_> ChilliX: hey, it's easy.  all you need is money.  I built the Iridium system.  It wouldn't take as much, though, $1 billion would do.
02:13:47 <ChilliX> at least, you are the only Andres I know who has a cs.uu.nl address
02:14:05 <kosmikus> yes, I assume I am the only one :)
02:14:24 <ChilliX> seth_: only a billion; then, where is the problem ;-)
02:14:48 <ChilliX> kosmikus: haven't seen you on #haskell before, though
02:15:01 <ChilliX> kosmikus: but haven't been very active here lately
02:15:23 <seth_> ChilliX: no problem, just wire it into my account, and we're ready to begin.
02:15:34 * shapr grins
02:15:50 <ChilliX> hehe
02:22:08 <kosmikus> ChilliX: I only discovered the channel recently
02:22:36 <kosmikus> ... but it's a very nice channel
02:22:42 <shapr> you think we should advertise more?
02:22:44 <ChilliX> :-)
02:23:15 <kosmikus> well, I did not really do irc at all before
02:23:31 <Darius> (me neither)
02:23:41 <kosmikus> ChilliX: do you have a paper at ICFP?
02:24:00 <ChilliX> nope, didn't manage to submit anything
02:25:53 <ChilliX> we were working at a paper, but didn't finish it in time (partially because of having a baby around the same time)
02:26:12 <kosmikus> I was more or less forced to join irc when I became a Gentoo Linux developer; at that time, I remembered that I saw some advertisement for the #haskell channel ...
02:26:36 <kosmikus> ChilliX: cons :)
02:26:50 <ChilliX> :-)
02:27:09 <kosmikus> will he/she learn German?
02:27:15 <ChilliX> sure
02:27:28 <ChilliX> nori (my wife) is German, too
02:27:35 <ChilliX> so, we speak German at home anyway
02:28:06 <ChilliX> so, guess Leon doesn't have much choice ;-)
02:28:11 <ChilliX> guess = I guess
02:28:20 <kosmikus> I see ;)
02:28:46 <Darius> @define guess I guess
02:28:46 <lambdabot> guess defined
02:28:50 <Darius> @get-definition guess
02:28:50 <lambdabot> guess = I guess
02:28:52 <Darius> @eval guess
02:28:56 <lambdabot> out of fuel - use @resume to continue
02:29:00 * shapr grins
02:29:43 <ChilliX> hehehe
02:30:22 <kosmikus> is that an SKI-evaluator or something similar?
02:30:31 <shapr> hi pesco 
02:30:39 <pesco> hey shapr!
02:31:02 <pesco> Pooh, I think IOUArrays (cool sounding name btw) just saved my head.
02:31:12 <shapr> kosmikus: yah, @eval is a lambda calculus interpreter, it's nifty
02:31:37 <shapr> what are you doing with IOUArrays?
02:32:24 <Darius> @eval joy "5 [pop 0 =] [pop pop 1] [[dup 1 -] dip x *] ifte] x"
02:32:26 <lambdabot> head of empty list
02:32:57 <pesco> shapr: I can use them to marshall/unmarshall primitive data types over the net without too much ugliness.
02:33:03 <Darius> @eval joy "5 [[pop 0 =] [pop pop 1] [[dup 1 -] dip x *] ifte] x"
02:33:06 <lambdabot> [120]
02:33:12 <shapr> yay Joy!
02:33:25 <shapr> pesco: how so?
02:33:37 <shapr> pesco: I'd like to see that code
02:33:45 <pesco> shapr: No code yet.
02:33:52 <shapr> ok
02:33:57 <pesco> But the idea is just "the C way"
02:34:00 <Darius> yah, lambdabot needs to merge multiple messages to and from
02:34:44 <shapr> we could do a lambdabot 1.1 release soon
02:35:04 <shapr> the promised feeping creaturitis release
02:35:18 <pesco> shapr: To marshall a float across the net, put it into an IOUArray Int Float, cast to IOUArray Int Word8 and blast it over the net via hPutArray.
02:35:34 <Darius> I'm wondering if the current definitions file should be included, it contains a good chunk of the Haskell prelude
02:36:10 <shapr> Darius: I think so
02:36:31 <shapr> I think definitions should be in CVS somehow
02:37:16 <pesco> shapr: But this still doesn't give me an answer to the question of how to specify a nice way to do the encoding.
02:37:23 <shapr> pesco: can you use that to speak to a C program on the other end?
02:37:33 <pesco> shapr: Of course.
02:37:53 <pesco> The whole point of corba is to speak to other programs written in any language.
02:38:58 <pesco> I'd like to have a class CDR or something which somehow specifies for a given type what it's CDR encoding is.
02:39:16 <shapr> have you looked at http://haskell-corba.sourceforge.net/ for inspiration?
02:39:36 <pesco> No, I'd like to try and figure something out on my own.
02:39:41 <shapr> ok
02:39:59 <pesco> Oh, and haskell-corba is just an FFI wrapper around MICO.
02:40:08 <shapr> oh
02:40:09 <pesco> So it doesn't apply to my current problem anyway.
02:40:53 <cfork> Whats the relationship between Clean and Haskell?
02:41:08 <norpan> They are both lazy functional languages
02:41:08 <shapr> cfork: Clean was proprietary until recently
02:41:38 <shapr> it still has a limiting license from what I've seen
02:41:47 <kosmikus> they're very similar, but Clean uses uniqueness typing for IO, Haskell uses monads
02:42:10 <pesco> What is uniqueness typing?
02:42:15 <shapr> are uniqueness types similar to linear variables?
02:42:18 <kosmikus> huh
02:42:33 <cfork> LGPL
02:42:35 <kosmikus> yes, I think so, but I've never really used it
02:42:45 <cfork> (clean is LGPL, that is)
02:42:57 <shapr> cfork: I thought it was only lgpl for non-commercial applications?
02:43:08 <cfork> hmm yes
02:43:30 <cfork> there is both
02:43:42 <shapr> I want to get paid to write Haskell :-)
02:43:43 <cfork> lgpl, and commercial if you wish to not have to follow the terms of the LGPL
02:43:47 <kosmikus> I think it is called "uniqueness typing" because if you have a unique something, you are guaranteed by the system that you have the only pointer to the something
02:44:00 <shapr> sounds a lot like linear variables
02:44:06 <cfork> hmm probably worth looking at
02:44:29 <shapr> I'll be back after class.
02:44:31 * shapr wanders off
03:09:56 <Kokko> hullo
03:12:50 <seth_> Kokko: hello.  I'm about to wander off to sleep... :)
03:15:28 * Marvin-- grumbles
03:15:41 <Marvin--> definitely time to mail Schulz now
03:44:53 <Marvin--> debug
03:45:35 <debug> it is a wonderful day Marvin--
03:45:50 * debug just realized that he will be unemployed this summer
03:46:50 <Marvin--> and that's wonderful?
03:47:00 <debug> no
03:47:09 <Marvin--> oh, you mean the weather
03:47:12 <debug> yes
03:47:27 <Marvin--> yeah, maybe I should go out and work on my laptop instead
03:47:47 <debug> I'm going to put new brakes on my bike, and reboot ceda's machine
03:48:32 <Marvin--> where's ceda, then?
03:48:36 <debug> his harddisk is about to fail, according to the SMART checks, and it requires someone to press F1
03:48:39 <debug> he's home-home
03:48:42 <Marvin--> oh
03:48:58 <Marvin--> maybe it's a better idea to actually *turn it off* instead :)
03:49:58 <debug> no :)  it's just his boot disk containing the kernel, if I understood him correctly
03:50:13 <debug> it doesn't fit on a floppy anymore
04:00:51 <Marvin--> uh, he boots from floppy? what is he, a masochist?
04:01:17 <debug> we did it like that. he's running mostly diskless
04:01:17 <debug> we didn't get PXE to work, so booting from floppy was the easiest thing to do  (at least, that was the only netboot on PC I was familiar with in linux)
04:01:18 * debug doesn't like PCs
04:01:18 <debug> loadlin + a small linux kernel on a floppy worked fine
04:01:18 <ludde> how do I ensure that hGetContents has read the whole file and closed the file handle/
04:01:18 <ludde> ?
04:01:41 <Darius> @type hGetContents
04:01:55 <ludde> ?
04:02:14 <Darius> The end of the string likely means the file is closed
04:02:33 <pesco> Yes, I'd guess so, too.
04:07:53 <Marvin--> debug: true... I've never set up PXE myself, only uesd it
04:08:23 <debug> it required a special extension to tftp, I think
04:08:29 <debug> otherwise it would have worked
04:08:41 <debug> s/tftp/tftpd/
04:11:18 * Darius shakes his fist at the GHC configure script
04:11:30 * pesco giggles
04:12:54 * d-bug curses the instability of nvidia's drivers
04:25:21 <ChilliX> ludde: you can't
04:26:39 <pesco> Chilli! I've been wanting to ask you about your Haskell<->CORBA work. What's the status of that project?
04:26:52 <ChilliX> pesco: dormant
04:27:15 <ChilliX> = no time to work at it
04:27:27 <pesco> That's too bad. What are you occupied with?
04:28:20 <Marvin--> ludde: use strict reading instead?
04:28:28 <ChilliX> two research projects ((1) fast arrays in Haskell & (2) infrastructure for secure exec of untrusted code), building up a research group, and a stupid lecture
04:28:39 <pesco> lol
04:28:43 <pesco> "stupid lecture"
04:29:12 <pesco> (1) fast arrays are good, I've used them before and am pretty thankful for your work.
04:29:50 <ChilliX> stupid lecture: http://www.cse.unsw.edu.au/~cs9243/
04:30:05 <pesco> (2) I understand the words, but can't have yet to get a clear picture of what's behind them...
04:30:12 <pesco> s/can't//
04:30:23 * o3 resists urge to talk
04:30:27 <ChilliX> (2) http://www.cse.unsw.edu.au/~chak/project/sec/
04:30:38 <pesco> Ah, thanks.
04:30:39 <ChilliX> o3: about the "stupid lecture" or Sec?
04:30:44 <o3> ChilliX: stupid lecture ;)
04:30:57 <ChilliX> hehehe
04:31:27 <ChilliX> pesco: what have you used the arrays for?
04:31:51 <pesco> ChilliX: Let me think. A stupid little toy raytracer.
04:32:04 <pesco> They made the vector type.
04:32:17 <pesco> Actually the raytracer was cool.
04:32:43 <ChilliX> :-)
04:32:49 <pesco> Or is, it still exists. But I stopped hacking on it.
04:33:01 <pesco> I don't know why but I lose interest in things too fast.
04:33:35 <Marvin--> pesco: me too
04:33:36 <pesco> But I rendered some cool light volumes with it.
04:33:46 <Marvin--> (something of a problem when working on my degree project)
04:34:00 * Marvin-- whistles innocently
04:34:06 <pesco> http://www.haquebright.de/Lucifer/screens/2002-08-27_Shell_perturbed.png
04:35:02 <ChilliX> pesco: looks nice :-)
04:35:09 <pesco> You see, there is no geometry, just shooting rays through a scalar field of luminance values. But pretty to look at. :)
04:35:36 <o3> pesco: hey, cool
04:35:53 <o3> not as pretty as another shell i know, but still cool 8)
04:36:03 <pesco> heh
04:36:48 <pesco> I should make an animation some time.
04:37:35 <pesco> But right now I want to figure out how to do CDR encoding in Haskell in a way that is at least close to right.
04:38:33 <pesco> Especially, at this particular moment, I'd like to convert a float into a list of its individual bytes.
04:38:48 <pesco> Is this safe:
04:40:29 <pesco> floatbytes x = unsafePerformIO $ do { float_arr <- newArray (0,0) x; octet_arr <- castIOUArray float_arr; getElems octet_arr }
04:41:26 <ChilliX> pesco: why that? writing your own ORB?
04:41:54 <pesco> Eek, I'd just like to assemble GIOP requests for now.
04:42:04 <ChilliX> ic
04:42:37 <pesco> Saying yes would be like saying I'd like to implement an OMG spec. I wouldn't want to say that just now. ;-)
04:43:16 <pesco> But I just noticed that my definition above nowhere states how many bytes I want.
04:44:01 <pesco> ugh
04:44:11 <ChilliX> and not what type octet_arr should have
04:44:24 <pesco> IOUArray Int Word8
04:44:27 <ChilliX> do you want to get the binary representation of a bunch of floats?
04:44:37 <pesco> Of one float.
04:44:39 <pesco> Yes.
04:45:13 <ChilliX> to be honest, I would do that differently
04:45:20 <ChilliX> I would use the ffi
04:45:47 <ChilliX> good thing about this is that it provides functions that tell you how many octets a float is
04:46:16 <pesco> Ok, what would be the signature of your C function?
04:46:36 <ChilliX> no C function
04:46:46 <ChilliX> use the marshalling functionality of the FFI
04:46:51 <pesco> Oh ok.
04:46:54 <ChilliX> just a sec
04:47:03 <ChilliX> I'll write a small function
04:47:11 <pesco> Hey, thanks!
04:47:51 <Marvin--> where's this marshalling functionality documented?
04:47:56 <Marvin--> (if at all)
04:48:06 <o3> Marvin--: see the ffi spec
04:48:21 <ChilliX> Marvin--: in the standard http://www.cse.unsw.edu.au/~chak/haskell/ffi/
04:48:33 <pesco> Ah, I hate when my thoughts get mixed up by something. Especially when it's the solution to problem B that's mixing up the solution to problem A.
04:48:37 <o3> http://www.cse.unsw.edu.au/~chak/haskell/c2hs/docu/c2hs-4.html to be exact
04:48:43 <o3> (first hit on google, too)
04:48:59 <o3> as in, the marshalling library was the first hit.  odd
04:49:00 <ChilliX> :-)
04:49:31 <o3> err, that's not part of the FFI, that's in c2hs.  just ignore me
04:49:52 <pesco> My original plan was to use the FFI but then tried to think of something else because for the Net IO I don't want to go through lists anyway. Today I found IOUArray and now I find myself trying to use it for the list stuff which it was never supposed to solve!
04:49:59 <o3> c2hs is the first hit when you google for 'haskell ffi'?  sneaky, chilli
04:50:10 <ChilliX> hehehe
04:52:13 <Marvin--> arrrggghhh, haskell allows these stupid 'where' constructions in waaay too many places
04:52:20 * Marvin-- is trying to work with a *simple* AST, dammit
04:52:49 <Marvin--> I guess I could sneakily convert this one to a let though
04:54:53 <Marvin--> no, dammit, I can't
04:54:53 <o3> where has ghc -M been all my life
04:54:56 * Marvin-- growls
04:55:08 <Marvin--> o3: in my Makefiles
04:56:06 <pesco> float_bytes x = unsafePerformIO $ alloca (\p -> poke p x >> peekArray (sizeOf x) (castPtr p))
04:56:11 <pesco> Chilli: Is that what you meant?
04:56:17 <ChilliX> module Main (main)
04:56:17 <ChilliX> where
04:56:17 <ChilliX> import Foreign
04:56:17 <ChilliX> import System.IO.Unsafe (unsafePerformIO)
04:56:17 <ChilliX> floatToWords :: Float -> [Word]
04:56:19 <ChilliX> floatToWords x = unsafePerformIO $
04:56:20 <ChilliX>   withObject x $ \ptrFloat ->
04:56:22 <ChilliX>     let ptrWords = castPtr ptrFloat :: Ptr Word
04:56:27 <ChilliX>     in
04:56:28 <ChilliX>     peekArray (sizeOf (undefined::Float)) ptrWords
04:56:30 <ChilliX> main :: IO ()
04:56:32 <ChilliX> main = print $ floatToWords 1.0
04:56:34 <ChilliX> ah, ok
04:56:36 <ChilliX> yeah
04:56:45 <pesco> Cool. But what's withObject?
04:57:01 <ChilliX> in the FFI spec it's called "with"
04:57:14 <ChilliX> that it's "withObject" in GHC is a problem of GHC
04:57:37 <ChilliX> forget it, just call it with rather than withObject
04:57:42 <pesco> ahm. But why not alloca?
04:57:50 <ChilliX> I was in an old version (where with was abducted by the implicit parameter extension)
04:58:28 <pesco> ewewew I don't know about implicit parameters and can't follow.
04:58:34 <ChilliX> with is alloca and poke combined
04:58:37 <ChilliX> it's nicer
04:58:47 <pesco> Ah, now I see.
04:59:07 <ChilliX> use of alloca and poke together is *very* common
04:59:08 <Marvin--> ChilliX: I guess because 'with' conflicts with implicit parameters
04:59:29 <Marvin--> ChilliX: guh, I should read faster
04:59:35 <ChilliX> so we decided to provide with (I think, it was Marcin's idea actually)
05:00:11 <ChilliX> but GHC should have complained about an obsolete name when I was using withObject
05:00:38 * ChilliX checks the MarshalUtils.hs
05:01:46 <ChilliX> hmm, strange has a DEPRECATED pragma...
05:02:01 <pesco> Cool, thanks for the help!
05:02:13 <ChilliX> no problem
05:02:56 <pesco> I'll send you the first GIOP message I produce. Got an IOR? ;-)
05:04:23 <Igloo> 'ello all
05:05:12 <Marvin--> 'ello Igloo
05:05:33 <ChilliX> Igloo: re - hope you slept well
05:05:56 <o3> hi igloo
05:06:02 <o3> thanks for fixing those TH bugs
05:07:04 <Igloo> Certainly did, Chilli - first proper lie-in for ages  :-)
05:07:19 <Igloo> np, o3. I planned to do it sooner but kept running into other brokenness  :-(
05:08:05 <o3> Igloo: now i'm just waiting for the changes to propagate to anoncvs :)
05:08:24 <cfork> http://research.microsoft.com/~toddpro/papers/law.htm
05:09:12 <Igloo> Ah - do you know when that happens?
05:10:06 <o3> no, but i hope it's soon!
05:10:23 <ChilliX> cfork: this guy makes one mistake
05:10:45 <ChilliX> cfork: he writes it as if it where independent of the programming language, but it isn't
05:11:00 <Marvin--> Igloo: can I bother you with a gmap question again?
05:11:33 <Igloo> o3: If you give me a list of files I can give you a tarball of them
05:11:46 <Igloo> Actually, you probably only need Main.hs and the 3 TH ones
05:11:49 <Igloo> Marvin: Sure
05:11:56 <cfork> I just liked the bit at the end :)
05:12:32 <o3> Igloo: that's ok, i'll just wait for cvs to update.  it should be updated by tomorrow (it's about 10pm here), which is no problem.  i have pleeenty of other stuff to work on in the meantime :)
05:12:33 <Marvin--> Igloo: how would I typically implement sort of a "conditional" recursion? For example, the typical lambda calculus substitute-all-free-ocurrences-of-a-variable operation
05:13:10 <Igloo> Bah, I've just made a tarball of them  :-)  Oh well, if you do want it it's no problem
05:13:18 <ChilliX> cfork: true :-)
05:14:04 <Igloo> Marvin: In the same way as let was handled in the previous example, i.e. you return Nothing from teh functino if you want to recurse but Just whatever if you don't
05:14:34 <Marvin--> Igloo: damn
05:14:41 <Igloo> ?
05:14:48 <Marvin--> Igloo: I was afraid it was that "easy" :)
05:15:01 <Igloo> :-)
05:15:37 <Marvin--> strange that there is no such example in the paper, or maybe I was reading one but didn't understand that that's what it was
05:15:49 <o3> Igloo: oh, erm, thankyou!
05:16:03 <Marvin--> you'd think a lambda calculus free variable substitution is a pretty typical example
05:20:07 <Marvin--> I wonder if Koen would like me to use gmap in the code, when I mentioned I'd been looking at it, he grumbled something about "typing tricks"
05:21:16 <Igloo> Showing him the code with and without might help
05:21:32 <Marvin--> true
05:21:50 <Igloo> And also mentioning that thw with code won't need to be changed if you add some more to the datatype
05:21:51 <Marvin--> I'd aim at understanding the damn thing first though
05:22:47 <Igloo> Heh
05:23:23 * Igloo starts The Great Renaming
05:23:27 <Marvin--> but right now I'm going to rewrite my case expression handling and see if that improves the speed
05:24:03 * Marvin-- fetches pen and paper
05:24:20 <ChilliX> Igloo: Hero!!
05:24:51 <Igloo> Hmmm, AsPat or AspatPat?
05:24:57 * Igloo goes for the former as the latter is silly  :-)
05:25:07 <ChilliX> I agree
05:25:21 <Marvin--> great renaming?
05:25:36 <Igloo> TH datatype renaming
05:27:09 <Marvin--> oh
05:28:01 <Igloo> Chilli: do you agree with leaving "data Match = Match ..." and Clause as they are?
05:29:57 <Marvin--> hmm
05:29:57 <Marvin--> d'oh
05:30:08 <ChilliX> yes, except that RightHandSide is a bit verbose
05:30:33 <ChilliX> ^ -> Igloo
05:30:52 <Igloo> Ah, sure, I just meant the constructor not being somethingMatch
05:31:31 <Marvin--> heck, I think the L.H.S names are verbose
05:31:38 <Marvin--> HsUnGuardedRhs  ugh
05:31:52 <Igloo> That's not a TH name
05:31:56 <Marvin--> I know
05:31:59 <Marvin--> which is why I said L.H.S
05:32:03 <Marvin--> not L.TH.S
05:32:04 <ChilliX> Igloo: yes, that's fine
05:33:18 <Igloo> Euch, FromThenToDotDot is horrific, but I can't think of anything better
05:33:59 <Darius> That's TH Syntax?
05:34:22 <Igloo> It's currently FromThenTo, but under the new scheme it would be FromThenToDotDot
05:34:37 <Marvin--> why is FromThenTo bad?
05:34:49 <Igloo> It's not, FromThenToDotDot is
05:35:11 * Igloo renames Proto to SigDec while I'm there
05:35:13 <Marvin--> all right, let me rephrase, why does the new scheme want FromThenToDotDot instead of FromThenTo?
05:35:26 <Igloo> Because it wan't consistency
05:35:37 <Marvin--> with what?
05:36:10 <ChilliX> Igloo: Part of the problem is that DotDot is a stupid name
05:36:12 <Igloo> The problem is we used to have data Exp = ... | Let [Dec] Exp | ..., but that meant we wanted a variable called let
05:36:33 <Igloo> So let and a few others got an E suffix which is ugly
05:36:40 <ChilliX> Range would be nicer than DotDot and FromThenToRange is long, but makes sense
05:36:46 <Igloo> Also, Var, Pvar and Tvar are a bit strange
05:37:03 <Marvin--> I usually do ELet
05:40:52 <ChilliX> Igloo: new FFI RC is up, including tarball that has a COPYING file, as requested
05:41:06 <Igloo> Excellent, thanks!
05:41:14 <Marvin--> heh, license == good, yes ;)
05:41:19 <ChilliX> :-)
05:41:35 <ChilliX> Marvin--: the license was always in the document, but not in an extra file
05:41:51 <ChilliX> (which is inconvenient for Debian)
05:42:15 <Marvin--> aha
05:42:15 <Igloo> Well, the main issue is it's not clear it applies to other files in the directory
05:42:16 <Marvin--> yes indeed
05:47:36 <Marvin--> gläh
05:47:54 <Marvin--> when you have things like "where rec = changeNamesE pref pats mapp" it's screaming "give me gmap!"
05:51:43 <Marvin--> syntax-error
05:52:53 * Marvin-- tries to get a friend to understand that he may have a design problem when he wants to call one state monadic function from another state monadic function with a different type
05:55:57 * syntax-laptop is no syntax error!
06:03:55 <Marvin--> how'd it go with your AM?
06:25:32 <syntax-laptop> marvin, keep reminding me about doing my NM stuff :)
06:26:28 * shapr bounces happily
06:26:50 <shapr> Marvin--: jag har nästa nog XP för bli svenskspråk level ett!
06:27:52 <Marvin--> shapr: oj, då undrar jag vad nivå ett innebär egentligen :)
06:28:28 <shapr> heh
06:28:39 <shapr> well, I think it means "able to pass the first SFI test"
06:28:51 <shapr> Swedish For Invaders
06:29:05 <shapr> Svenska for Invandrare
06:29:39 <Marvin--> LOL
06:29:44 <Marvin--> Invaders
06:29:45 <Marvin--> LOL
06:29:47 <shapr> :-)
06:29:52 <andersca> haha
06:30:08 <Marvin--> you're SO quotefiled
06:30:14 * shapr laughs
06:31:23 <shapr> the first SFI test is coming up soon
06:31:41 <shapr> hi thornber
06:31:47 <shapr> learning Haskell?
06:31:54 * shapr almost said "learning swedish?"
06:31:59 <thornber> hi
06:32:19 <Marvin--> shapr: actually, that's so sweden, "so, you wanna invade Sweden? Right, here's a course on Swedish"
06:32:20 <thornber> not today, but I thought I'd see what was happening as a break from making patches
06:32:30 <shapr> Is "sistina" related to "sestina" ?
06:32:56 <thornber> I don't know where the name came from
06:33:10 <shapr> heh, Clusterworld :-)
06:33:13 <shapr> that's too silly
06:33:35 * andersca boings
06:33:39 * shapr bounces
06:33:45 <andersca> time to send mail to CSN
06:33:51 <shapr> thornber: so, planning to learn Haskell soon?
06:34:18 <thornber> I'm getting there, I have about 3 tiny programs under my belt so far
06:34:38 <shapr> cool, have any questions?
06:34:44 <thornber> you're welcome to comment on them if you wish
06:34:47 <shapr> sure!
06:34:59 <Marvin--> andersca: about?
06:35:00 * Igloo write -- FOO! on top of them
06:35:04 <shapr> I'm still learning Haskell myself, so I can't promise anything
06:35:09 <shapr> Igloo: hey, that's my line!
06:35:19 * shapr gets a new line
06:35:29 <andersca> Marvin--: more money
06:35:32 <andersca> for the next semester
06:35:42 <shapr> we're going to mooch off of andersca soon, he'll be rich
06:35:56 <Marvin--> hGetLine shapr
06:36:26 <shapr> -- BAR!
06:36:30 <Marvin--> andersca: uh, well, why mail them? you can fill in those forms on the home page, can't you? I don't remember, which is kinda sad, since I'll have to do it myself too :P
06:36:50 <thornber> shapr: 2 very trivial progs in http://people.sistina.com/~thornber/haskell/
06:37:38 <Marvin--> prepare to be haskelldotted!
06:37:44 <Marvin--> (oh, wait)
06:37:44 * shapr snickers
06:38:04 <o3> with a very, very small dot
06:38:14 <thornber> :)
06:38:15 <shapr> o3: dude, you never sleep
06:38:22 <Marvin--> oh, wiat, haskelldotdotted
06:38:27 * Marvin-- taunts Igloo implicitly
06:38:34 * shapr is way lost
06:38:50 <o3> shapr: hey, it's 11:30 over here right now.  not sleep time for at least another 7 hours!
06:38:51 <shapr> thornber: hey, you're doing well, able to read from a file and process input
06:38:53 <Marvin--> shapr: read scrollback
06:39:20 <Marvin--> thornber: and you use [1..]  :-)
06:39:27 <shapr> yah, nice
06:39:41 <shapr> thornber: do you have one of the Haskell books? or are you using online docs?
06:39:45 <thornber> word count is a standard programming test I give people I'm interviewing
06:39:55 <thornber> (in C)
06:40:08 <Igloo> Ah, so length . words won't cut it then  :-)
06:40:12 <thornber> shapr: I started with Thompson, but am using online docs more now
06:40:25 <shapr> ah, I like Thompson
06:40:27 <shapr> that's how I started.
06:40:52 <thornber> Igloo: the program is named badly, it's really a frequency count of words
06:40:59 <thornber> eg, Alice 39
06:41:15 <shapr> what's Alice?
06:41:30 <thornber> I normally test with the text of alice in wonderland
06:41:35 <shapr> oh
06:42:01 <shapr> if it's a straightforward histogram, I'd use something based on addToFM_C (+)
06:42:04 <Igloo> Ah, right
06:42:21 * thornber looks blankly
06:42:24 <shapr> thornber: have you looked at Data.FiniteMap ?
06:42:26 <Igloo> One of my undergrad pracs was doing that no Alice in Wonderland
06:42:41 <shapr> twas brillig and the slithy toves..
06:42:53 <shapr> I won't quote more, since everyone here probably knows it.
06:43:00 <thornber> shapr: nope, I have the okasaki book by my side
06:43:03 <shapr> oh cool!
06:43:13 <shapr> I haven't read that one, but I do have the Rabhi and Lapalme book
06:43:20 <shapr> I really like Rabhi and Lapalme
06:43:24 <thornber> not heard of that ...
06:44:01 * shapr gets url
06:44:01 * thornber looks up amazon
06:44:01 <shapr> http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html
06:44:13 <shapr> thornber: so, what do you do at sistina?
06:44:21 <shapr> if you don't mind me asking
06:44:38 <shapr> I'm a self-employed programmer, learning Haskell to improve my overall understanding of programming.
06:44:51 <shapr> In the process, it's become my favorite language.
06:44:53 <thornber> book looks good
06:45:05 <thornber> shapr: I write Linux kernel stuff
06:45:08 <shapr> oh nifty
06:45:19 <thornber> (LVM2/device-mapper)
06:45:36 <shapr> cool
06:45:57 <shapr> I know very little about C, the kernel, et al.
06:46:14 <thornber> you program in java for your day job ?
06:46:15 <shapr> I did fix the IDE drivers to run on my mobo before it was supported, but that wasn't very hard.
06:46:42 <shapr> Yes, I get paid to do Python and Java, and last weekend Haskell!
06:46:48 * shapr bounces happily
06:47:08 <thornber> they had someone to maintain it once you'd finished ?
06:47:10 <shapr> I was paid to do some XML processing, where no one cared about the code or the binary, just the results.
06:47:23 <shapr> so I wrote it with HXmlToolbox
06:47:54 <shapr> I make most of my money from Zope work
06:48:23 <shapr> but I've done Java/J2EE/J2ME/etc
06:48:56 <shapr> have you tried Java?
06:49:36 <shapr> hi d-bug
06:49:40 <shapr> hur är det med dig?
06:49:46 <thornber> y, for 6 weeks in '97, then I aborted and restarted in C
06:49:58 <shapr> heh
06:50:33 <shapr> Java has good points, but I much prefer Python and Haskell.
06:51:14 <thornber> I always tend to use Perl rather than python
06:52:01 <shapr> If that fits your head, that's good.
06:52:10 <shapr> We all use what we like.
06:52:40 <thornber> http://dada.perl.it/shootout/wordfreq.ghc.html
06:52:54 <thornber> looks like it's trying to solve a similar thing to my prog
06:53:10 <shapr> I did something like that when I wrote a tiny bayesian spam filter in Haskell.
06:53:34 <thornber> I think I'll write a chess prog next
06:53:40 <shapr> @board
06:53:41 <lambdabot>  r n b q k b n r
06:53:41 <lambdabot>  p p p p p p p p
06:53:41 <lambdabot>  - - - - - - - -
06:53:41 <lambdabot>  - - - - - - - -
06:53:41 <lambdabot>  - - - - - - - -
06:53:42 <lambdabot>  - - - - - - - -
06:53:44 <lambdabot>  P P P P P P P P
06:53:46 <lambdabot>  R N B Q K B N R
06:53:54 <shapr> @validmoves
06:53:54 <lambdabot> [Ng1-h3,Ng1-f3,Nb1-c3,Nb1-a3,Ph2-h3,Ph2-h4,Pg2-g3,Pg2-g4,Pf2-f3,Pf2-f4,Pe2-e3,Pe2-e4,Pd2-d3,Pd2-d4,Pc2-c3,Pc2-c4,Pb2-b3,Pb2-b4,Pa2-a3,Pa2-a4]
06:54:01 <thornber> lol
06:54:01 <shapr> hm, where'd the \n come from?
06:54:10 <thornber> where's the code for that ?
06:54:19 <shapr> http://sf.net/projects/haskell-libs/
06:54:20 <shapr> in the cvs tree
06:54:28 <shapr> the Chess plugin isn't in the lambdabot 1.0 release
06:54:35 <shapr> it'll be in the 1.1 release
06:54:41 <shapr> when we get around to making that happen :-)
06:54:49 <norpan> does it play as well?
06:54:57 <shapr> sure
06:55:06 <shapr> it also has per-user and per-channel boards
06:55:16 <thornber> :)
06:55:20 <shapr> so we can all play together on #haskell, while you play privately via /msg
06:55:24 <Darius> @flip-board
06:55:34 <lambdabot> I move: Pe2-e3
06:55:41 <shapr> lambdabot is a fun code-toy
06:55:42 <Darius> @flip-board
06:55:46 <thornber> it had to think about that
06:55:54 <shapr> yah, delYsid wrote the chess playing code
06:55:57 <thornber> what depth is it searching to ?
06:55:58 <lambdabot> I move: Pe7-e6
06:56:07 <shapr> at first it took almost twenty seconds
06:56:17 <shapr> for a depth 4 search
06:56:24 <thornber> it's doing proper alpha-beta pruning ?
06:56:28 <shapr> I think so
06:56:47 <o3> what haskell runtime is it using?  hugs?
06:56:51 <shapr> nah, ghc
06:56:52 <thornber> can you give me the CVSROOT, the sourceforge website is down ?
06:56:56 <shapr> oh, sure
06:57:44 <shapr> anonymous@cvs.haskell-libs.sourceforge.net:/cvsroot/haskell-libs
06:57:48 <shapr> or maybe anon@ ?
06:57:57 <shapr> the top dir is libs
06:57:59 <sjj> shapr: is there any convienent haskell function similar to str.join in python?
06:58:26 <shapr> sjj: there's a cool function to do that in lambdabot's Util module
06:58:48 <sjj> tee-hee
06:58:58 <pesco> What's str.join do?
06:59:17 <shapr> pesco: ",".join("blah","foo","bar")
06:59:22 <shapr> "blah,foo,bar"
06:59:31 <pesco> oic
06:59:45 <thornber> ++
06:59:53 <o3> foldl "" (++ ",") ["blah", "foo", bar"]
06:59:54 <o3> i think
07:00:04 <pesco> concat.intersperse x
07:00:17 <thornber> or foldl1 ++ ["blah" ...]
07:00:18 <o3> ooo, go mr. fancypants! :)
07:00:32 <sjj> danke ;)
07:00:37 <pesco> *g*
07:00:53 <Darius> @get-definition showList
07:00:54 <lambdabot> showList = \se.(\x.'[':(x++"]")) . concat . intersperse ", " . map se
07:01:02 <shapr> @listmodule
07:01:03 <pesco> tehee
07:01:03 <lambdabot> Sorry, I don't know the command "listmodule", try "lambdabot: @listcommands"
07:01:04 <shapr> @listmodules
07:01:04 <lambdabot> I have the following modules installed: ["chess","dict","eval","fortune","hello","karma","more","state","system","topic","type","yow"]
07:01:29 <thornber> @help chess
07:01:30 <lambdabot> Sorry, I don't know the command "help", try "lambdabot: @listcommands"
07:01:35 <thornber> @listcommands
07:01:36 <lambdabot> I react to the following commands: ["all-dicts","board","define","definitions","del-definition","devils","dict","dict-help","dump","easton","echo","elements","eval","flip-board","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","ply","prelude","quit","reset-chess","resume","set-fuel","state","topic-cons
07:02:21 <shapr> not all of the lambdabot plugins are turned on right now, but the most interesting ones are the lambda calculus interpreter in @eval, the @prelude command in Dict, and everyone's favorite, the @yow command
07:02:25 <o3> is there a tutorial somewhere on how to use exceptions in monads?
07:02:51 <o3> specifically the IO monad, although i'm guessing it's generalisable to all monads
07:02:55 <pesco> @yow
07:02:55 <lambdabot> Will the third world war keep ``Bosom Buddies'' off the air?
07:03:00 <shapr> @yow
07:03:01 <lambdabot> What's the MATTER Sid?..  Is your BEVERAGE unsatisfactory?
07:03:08 <pesco> heh
07:03:09 * shapr bounces
07:03:37 <shapr> maybe I should fix the @fact command today...
07:04:23 <shapr> hi Smerdyakov 
07:04:32 <Smerdyakov> Yes
07:04:36 <shapr> wassup?
07:04:46 <Smerdyakov> No
07:04:53 <shapr> Smerdyakov: passed your Turing test today?
07:05:00 <pesco> hah
07:05:05 <o3> shapr: nice one
07:05:42 <shapr> I may not be able to code, but I can make smart-alec remarks with great fervor
07:07:08 <shapr> thornber: if you can't get to sf.net, I can send you a tarball of the sources.
07:08:54 <andersca> Marvin--: not sure if you can apply for it on the web
07:09:09 <o3> the awkward squad document absolutely rules
07:09:28 <shapr> hey, I've been reading Bananas, Lenses, Barbed Wire, etc
07:09:33 <shapr> and I don't understand all the symbols
07:09:45 <Marvin--> shapr: myself, I don't understand the title :-)
07:09:48 <pesco> hey, what are you talking about?
07:09:50 <shapr> what's the difference between the circle with the X inside it, and the circle with the + inside it?
07:09:53 <Darius> ([ ]) [( )] [[ ]] 
07:10:03 <shapr> yah, that one
07:10:16 <Darius> nothing particular, they are just different ops (if it's what I think it is)
07:10:35 <Darius> They are placeholders for whatever
07:10:37 <shapr> are they specific ops?
07:10:39 <shapr> oh
07:10:49 <shapr> sort of like foo :: a -> b versus foo :: a -> a
07:10:51 <shapr> ?
07:11:19 <Darius> yes but more like a 'f' b v. a 'g' b
07:11:28 <Darius> er s/'/`/g
07:11:41 <shapr> ah, ok
07:11:41 <thornber> shapr: I don't think the cvsroot is right, it's expecting a password.  I'll try the website later.
07:12:02 <Darius> Just enterring nothing should work
07:12:03 <pesco> thornber: I think it's anoncvs@
07:12:04 <shapr> thornber: the password is nothing
07:12:10 <pesco> Or that.
07:12:11 <shapr> oh, it's anoncvs?
07:12:12 <shapr> oops
07:12:20 <pesco> Er, I'm not really sure either.
07:12:45 <shapr> thornber: If you want to put your sources in the cvs tree, I can make you a developer
07:13:06 <shapr> haskell-libs is sort of a cvs-wiki
07:13:13 <thornber> shapr: no, I'd rather submit patches
07:13:18 <shapr> ok
07:14:11 <shapr> Marvin--: have you tried hws-wp with 5.04.3 or 5.05 ?
07:14:15 <thornber> hmmm,reti lambdabot% echo $CVSROOT
07:14:15 <thornber> anoncvs@cvs.haskell-libs.sourceforge.net:/cvsroot/haskell-libs
07:14:15 <thornber> reti lambdabot% cvs co libs
07:14:15 <thornber> anoncvs@cvs.haskell-libs.sourceforge.n's password: 
07:14:15 <thornber> Permission denied.
07:14:17 <thornber> cvs [checkout aborted]: end of file from server (consult above messages if any)
07:14:23 <shapr> hrm
07:14:37 <shapr> cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/haskell-libs login
07:14:46 <shapr> cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/haskell-libs co libs
07:14:55 <shapr> just hit enter when the first cvs command asks for a password
07:15:26 <Darius> Igloo: do you know where they've put GHC.Posix for the CVS version?
07:15:40 <shapr> oh, I found it recently...
07:15:42 * shapr looks
07:15:59 <Igloo> I wouldn't have noticed particularly
07:16:08 <thornber> login aborted
07:16:22 <Igloo> There's a System.POSIX now
07:16:26 <shapr> thornber: sounds like sf.net is running out of bandwidth, they cut off anon checkouts when that's happening.
07:16:28 <Igloo> System.Posix rather
07:16:45 <thornber> shapr: k, I'll check later, I really should get back to hacking
07:17:05 <shapr> ok
07:17:22 <Darius> Some hslibs stuff seems to be importing GHC.Posix which isn't there, I imagine System.Posix(.Internal) will fix it
07:17:53 <shapr> hei Esa
07:18:01 <shapr> mittä kuuluu?
07:18:02 <esap> Hi!
07:18:13 * shapr pretends to have a clue about Finnish
07:18:26 <o3> <- otsoni!
07:18:41 <shapr> muutta, minä en puhu suomea
07:18:49 <esap> melkein oikein :-)
07:19:06 <shapr> er, mutta?
07:20:03 <esap> shapr: right, and it's 'mitä', not 'mittä'.
07:20:16 <shapr> kiitos
07:22:01 <pesco> Haha, I love my new record player. The Meteors give a nice background to my Haskell coding.
07:22:53 <Marvin--> hahaha, man this is silly
07:22:57 * Marvin-- can't stop laughing
07:23:41 <esap> marvin: what is silly?
07:24:09 <Smerdyakov> Oh gawd. You haaaaad to encourage him, eh, esap?
07:24:26 * esap runs.
07:24:29 <shapr> we're encouraging people
07:24:36 <Marvin--> oh, just that I've been running eprover with just "eprover --tptp-in foo", and for a particular file it took about 30s to find a proof
07:24:37 * shapr encourages lambdabot to grow up big and strong
07:24:51 <Marvin--> with "eprover --tptp-in -xAuto -tAuto foo" as the author of the program suggested, it takes 5s
07:25:11 <Marvin--> makes you wonder why that isn't the default behaviour
07:25:15 <shapr> so, SlowProve is out..
07:25:21 <shapr> QuickProve ?
07:25:26 <Marvin--> heh
07:25:36 <Marvin--> don't celebrate yet, it still doesn't seem to find some of the other bugs
07:25:48 * shapr postpones the party
07:25:59 <shapr> andersca: hey, where are you staying in Uppsala?
07:26:02 <ChilliX> Igloo: re the SDL interface & c2hs, it's strange; I need to have a look
07:26:13 <shapr> I need to organize travel, rooms, etc
07:26:17 <shapr> hi ChilliX!
07:26:27 <Marvin--> for icfp?
07:26:30 <Igloo> Chilli: I assume it's just building a huge suspension for the size
07:26:30 <shapr> yup
07:26:52 <shapr> Who's going to PLI? and how much of it?
07:27:00 <Marvin--> PLI?
07:27:03 <Igloo> But there are tuples all over the place so making it strict is tricky
07:27:14 <shapr> Marvin--: HW is one part of PLI, yes?
07:27:22 * Igloo is hoping I'll be able to go to at least ICFP+HW
07:27:35 <Marvin--> oh
07:27:47 <shapr> PLI = ICFP+HW+ ... ?
07:27:47 <Darius> ChilliX: what's a good way of avoiding things c2hs can't handle in (system) include files?
07:27:47 <Igloo> But I may not know for >1month
07:27:57 <shapr> Igloo: you must come! I have to teach you contact juggling!
07:28:08 <Igloo> :-)
07:28:08 <Marvin--> and we were going to shoot some pool, were we not? :)
07:28:17 <shapr> no, not pool, snooker
07:28:26 <Darius> back to 59
07:28:29 <Marvin--> yeah, well, I don't think Uppsala has any snooker tables
07:28:37 <Igloo> OK, both of you email oege@comlab and explain to him  :-)
07:28:41 * shapr grins
07:28:43 <Marvin--> heh
07:29:08 <Marvin--> "you see, Igloo has to come to Sweden, 'cause we're going to play pool" "who the heck is Igloo?"
07:29:09 <shapr> Yes, contact juggling will help Igloo write better code.
07:29:13 <ChilliX> Igloo: why do you think it's building a huge suspension?
07:29:13 * shapr laughs
07:29:49 <ChilliX> Igloo: maybe it is just chasing a recursive declaration and loops errornously
07:29:51 <Igloo> Chilli: Because that's the obvious cause IMLE. Unless it's just broken for union type, I didn't check that
07:30:01 <Igloo> Hmm, could be
07:30:17 <ChilliX> Darius: avoid when you write them?  or avoid including them?
07:30:21 <Igloo> Oh, but I could do sizeof on all the unioned bits
07:30:22 <Smerdyakov> IMLE = In My Learned Estimation ?
07:30:30 <shapr> good guess
07:30:31 <Igloo> That and maximum being my workaround  :-)
07:30:37 <Igloo> Limited Experience
07:30:53 <ChilliX> Igloo: union would be must first suspect
07:31:04 <ChilliX> must = my
07:31:21 <Igloo> Marvin: He /ought/ to know who you mean if you say Igloo
07:31:26 * shapr wonders if ChilliX is using M-/ in his irc client
07:31:26 <Marvin--> Igloo: ok :)
07:31:28 * Igloo goes to try that
07:32:00 <ChilliX> shapr: no, I don't use an Emacs IRC client
07:32:04 <shapr> aww
07:32:19 <shapr> I could recommend one, if you like :-)
07:32:30 <ChilliX> (I use Emacs for about everything else, except web browsing)
07:32:31 * shapr gives up on proselytization for the day.
07:32:38 <shapr> oh, emacs is pretty good for wiki editing
07:32:46 <shapr> especially w3m and the latest emacs-wiki
07:33:08 <ChilliX> haven't used w3m in quite a while
07:33:11 <shapr> wiki editing in galeon or any other browser is irritating (imho)
07:33:25 <ChilliX> shapr: it is, I agree
07:33:49 * Igloo looks confused at getting "The symbol `type' does not fit here." in foo.h
07:34:02 <Darius> I got that too.
07:34:16 <ChilliX> syntax error at `type'
07:34:22 <Darius> In {#get SDL_Event->type#}
07:34:32 <ChilliX> ah, that's different
07:34:36 <ChilliX> that's a known bug
07:34:39 <Igloo> Yeah, I know about that one
07:34:39 <ChilliX> :-(
07:34:51 <Igloo> This is just SDL.h with the includes ripped out though
07:35:00 <Darius> oi, there's an example just like it in the docs.
07:35:10 <shapr> oh man, we were at 60 clients for a bit there
07:35:12 * shapr missed it
07:35:41 <Darius> 60 clients, 10 people :P
07:35:43 <shapr> hah
07:35:46 <Igloo> Oh, it doesn't like qype either
07:35:50 <Igloo> Darius: Yeah, it's a bug
07:35:59 <ChilliX> Darius: problem is that "type" is a keyword in binding hooks (for the type hook)
07:36:30 <Igloo> Oh, Uint8 won't be defined any more
07:36:36 <ChilliX> Darius: it needs to be fixed, bit me, too in Gtk+HS
07:36:43 <Darius> ah, that would probably be why.  I think it's in the paper, and I don't think that type hooks were there then (though I could easily be wrong)
07:37:01 * o3 succumbs and prints out the FFI spec
07:37:02 <ChilliX> Igloo: but your ptoblem is different isn't it, that error was in the .h file not .chs
07:37:50 <ChilliX> Darius: I guess, I should have a KNOWN-BUGS file (it is in TODO, though)
07:38:02 <Igloo> Chilli: Yeah, it was because it had "Uint8 type" but Uint8 wasn't defined having stripped out the #includes
07:38:17 <ChilliX> yep, that's a syntax error in C
07:38:27 <ChilliX> blame K&R for that
07:38:37 * shapr blames
07:39:00 <o3> shapr: while you're at it, can you add varargs to that list
07:39:01 <Igloo> Well, c2hs couldn't have done sizeof anyway as it wouldn't know how big a Uint8 is  :-)
07:39:13 * shapr blames K&R more
07:39:13 <Darius> ChilliX: I didn't check for a bug, though I have {#get SDL_Event->foo#}, but I can't remember if that gave me the same error or not.
07:40:53 * o3 hopes cvs fptools repo gets synced soon so he can build GHC before going to bed
07:41:54 <Igloo> Interesting, typedef union { Uint8 type; SDL_ActiveEvent typ2;} SDL_Event; doesn't work, but with 2 Uint8s in the union it does and sizeof of SDL_ActiveEvent does
07:43:37 <ChilliX> so, it's when the union includes a non-primitive?
07:44:40 <shapr> Marvin--: hey, is "nästa nog för" the right way to say "nearly enough for" ?
07:45:02 <Marvin--> shapr: uh, context please?
07:45:39 <shapr> earlier I said I had nearly enough XP to become a first level swedish speaker
07:46:01 <Marvin--> where's the "for" in that? :)
07:46:10 <shapr> för bli
07:46:23 <o3> shapr: 1000XP => level 2, you now have 4 skill points to spend
07:46:26 <shapr> would att bli be easier?
07:46:29 <Igloo> No, if I make a tiny union type and add it to the SDL_Event union then it still works
07:46:53 <ChilliX> so how does SDL_ActiveEvent look like
07:46:54 <Marvin--> shapr: I'd say "nästan tillräckligt mycket XP för att ..."
07:47:30 <shapr> ah, sufficient
07:48:21 <Igloo> It's a struct of 3 Uint8s
07:48:25 * Igloo changes my union to a struct
07:48:56 <Igloo> Yeah, that breaks
07:49:42 <ChilliX> Igloo: "my union"?
07:49:53 <shapr> Marvin--: why do I need "sufficient much" there?
07:50:22 <Igloo> Chilli: I'd changed SDL_Event to be a union of a Uint8 and a union type. Changing that union type to a struct type broke it
07:50:42 <ChilliX> so struct in a union is the bad combo
07:50:50 <Igloo> Looks like it
07:51:24 <Marvin--> shapr: both "nog" and "tillräckligt" are valid translations of "enough", I can't tell you why there's a "mycket" there... I guess because we say "tillräckligt mycket" and "tillräckligt lite" et.c.
07:51:37 <ChilliX> is the struct the first or second field in the union?
07:51:38 <shapr> oh
07:51:40 <shapr> oh I see
07:51:43 <Igloo> Second
07:51:53 <shapr> gutentag Lilith, wie geht es?
07:52:12 <Lilith> shapr: 'tag
07:52:35 <Lilith> shapr: not so good
07:52:40 <shapr> what's up?
07:52:47 <shapr> tail-recursion giving you fits?
07:52:57 <Lilith> hello o3
07:53:14 <Lilith> shapr: not really. i spent my day sleeping. now i make up by staying up at night
07:53:27 <shapr> oh
07:53:38 <Lilith> and my thesis talk is at 9:30 AM!!!
07:53:42 <shapr> yow!
07:54:02 <o3> re lil
07:54:30 <Lilith> at least that will deter lots of people from turning up ;-)
07:54:46 <shapr> Lilith: I'm sure you'll do well. You know your subject, and you've written part (all?) of your presentation already.
07:54:54 <shapr> is the new version of your slides up?
07:55:03 <Lilith> shapr: nope
07:55:22 <Smerdyakov> Only part of presentation written with less than 24 hours back is _bad_, as far as I know. ;)
07:55:22 <ChilliX> Igloo: does it crash if the struct is empty?
07:56:17 <Igloo> Chilli: The symbol `}' does not fit here.
07:56:36 <Igloo> It works for a struct with a single element
07:56:38 <ChilliX> Igloo: I am looking at hipar/c2hs/gen/GenBind.hs:sizeAlignOfStruct and I am a bit puzzled why a struct in a union should be a problem...
07:57:24 <Igloo> I'll try reproducing it with just C types
07:58:55 <Igloo> It breaks with
07:58:55 <Igloo> typedef struct { int type; int typ1; } FT;
07:58:55 <Igloo> typedef union { int type; FT typ1; } SDL_Event;
07:59:00 <Marvin--> hohum, I haven't eaten lunch yet
07:59:04 <Marvin--> that's probably bad
07:59:07 <Igloo> bar = {# sizeof SDL_Event #}
07:59:12 * shapr looks at Marvin--'s bones
08:01:47 <pesco> fromIntegral (-10) :: Word8
08:02:03 <pesco> That gives a runtime error in hugs. Is the behaviour the same with GHC?!
08:02:46 <pesco> "Coercing word types to and from integer types preserves representation, not sign" from the GHC docs seem to imply that it would work.
08:03:33 <Darius> GHCi gives 246
08:03:41 <pesco> goddy, thanks!
08:03:52 <pesco> goody even
08:03:55 <ChilliX> Igloo: definitely produces the error!
08:05:00 <Marvin--> wohoo, I'm saved
08:05:07 <Marvin--> found some nasi goreng in the freezer
08:05:13 <pesco> nazi goreng
08:05:22 <pesco> mmmm.
08:05:42 <Vincenz> yo
08:06:41 <ChilliX> Igloo: this is really weird
08:07:10 <Igloo> Well, I'm glad it wasn't just me being stupid at least  :-)
08:08:28 <shapr> hoi Vincenz 
08:08:39 <Vincenz> :)
08:14:21 <Lilith> hmm
08:14:35 <shapr> Lilith: you have discovered a secret cache of caffeine?
08:14:49 <Lilith> shapr: i always have a cache of caffeine
08:14:55 <Lilith> shapr: it's the whole point of working
08:14:55 <shapr> yay!
08:15:23 <shapr> before I learned to like coffee, I drank a lot of coke/pepsi. My sister said I drank so much, if I got cut, I would fizz.
08:15:52 <Lilith> shapr: yuck
08:16:01 <Lilith> you probably also got a sugar high
08:16:04 <shapr> still do
08:16:24 <Lilith> lucky. i've got sugar high immunity
08:16:27 <shapr> actually, I've discovered that regular exercise gives a better high
08:16:27 <ChilliX> Igloo: need to sleep now, but will track it down tomorrow (it's weird that's sure)
08:16:35 <ChilliX> 'night
08:16:39 <shapr> g'night Chilli
08:16:53 <Igloo> OK, g'night
08:18:39 <o3> night chilli
08:24:04 * Marvin-- extends his pattern matching transformations to case expressions and again ponders gmap
08:27:02 <Marvin--> it worked "out of the box" though, which is nice
08:30:40 <shapr> yay! 60!
08:32:18 <Marvin--> heh
08:32:26 * shapr bounces
08:33:36 <Marvin--> /part
08:35:04 <shapr> no!
08:35:10 <Marvin--> whoops :)
08:35:15 <Marvin--> heh
08:35:16 * shapr grins
08:36:02 <Marvin--> uff, too much sambal, hot hot hot
08:37:05 <Lilith> sambal's great :-)
08:37:28 <Lilith> especially eaten just with steaming freshly cooked rice
08:37:57 * Marvin-- coughs and sputters
08:38:41 * opet backs away from Marvin-- 
08:38:52 <o3> lookout, he's going to turn into trogdor!
08:39:09 <shapr> a what?
08:39:16 <Marvin--> a what?
08:39:19 * Lilith wonders if Chilli is still around
08:39:32 <shapr> I don't think so
08:40:03 <o3> you're kidding, you don't know about trogdor?  http://www.homestarrunner.com/sbemail58.html
08:40:09 <Marvin--> more chilli is the least thing I need right now
08:40:11 <o3> (flash required)
08:40:20 <Marvin--> bleh
08:42:31 <Marvin--> next time, I don't think I'll get sambal directly from the jar, but water it down first
08:42:33 * Marvin-- gasps and coughs
08:42:52 <Lilith> Marvin--: did you eat it with something?
08:43:02 <Marvin--> Lilith: I'm eating leftover nasi goreng
08:43:36 * Lilith wonders what nasi goreng is like over there
08:44:13 <Marvin--> my recipy for nasi goreng is "rice + fried chicken + prawns + omelet + stuff"
08:44:15 <Lilith> the stuff here are generally piss-weak in terms of spiciness
08:44:20 <shapr> o3: d00d, that's twisted.. if you like that, you should listen to the band Tenacious D
08:44:49 <Marvin--> uh-oh, twisted.o3
08:45:02 <Lilith> Marvin--: add coconut milk when you're making the rice
08:45:20 <Marvin--> Lilith: oh? sounds spiffy
08:45:40 <Marvin--> oh dear, I said "spiffy"
08:45:43 <Marvin--> I'm turning into shapr
08:46:17 * Marvin-- carefully applies some more sambal
08:46:39 <Lilith> Marvin--: it tastes better if you're applying sambal to rice
08:47:03 * Marvin-- 's nose is runny
08:47:08 * Darius wishes he had rice, or fried chicken, or prawns, or eggs, or stuff.
08:47:33 <Marvin--> Darius: "stuff" is pretty easy as it's variable
08:47:48 <shapr> Marvin--: hah!
08:47:55 <Darius> Yes, and here it is the null set
08:48:34 <Marvin--> ah, that's kinda boring though
08:49:41 <Darius> That's only because I'm unifying it with the food I actually have.
08:50:10 <Lilith> heh
08:50:13 <Lilith> food would be nice
09:10:43 <Marvin--> heh, nice typo
09:12:48 <Igloo> ?
09:13:18 <shapr> ?
09:14:53 <Marvin--> "Fires and bugs are the worst things that can happen, break-ins and theft of employees are all right"
09:15:04 <Marvin--> I think they meant theft *by* employees :)
09:15:16 <Igloo> :-)
09:15:59 <Marvin--> heh, now Stephan Schulz has gotten the running time of this problem down first from 35s to 5s, and now to ~0.5s
09:18:20 <d-bug> Marvin--: there's always a solution that is fast, elegant and wrong :^)
09:21:54 <Igloo> There are many more slow, ugly and wrong solutions, though
09:22:06 <Marvin--> d-bug: well, I guess he knows how his theorem prover works better than me though
09:22:38 <Igloo> Heh
09:25:03 <shapr> o3: http://www.homestarrunner.com/trogdor.html
09:25:50 <Marvin--> okay, it takes 1s for me, not 0.5, but fair enough
09:25:52 <Marvin--> beats 35s
09:26:43 <Marvin--> eprover --tptp-in -WPSelectNewComplex --destructive-er-aggressive --destructive-er --prefer-initial-clauses --tptp-in -H'(4*SymbolTypeweight(ConstPrio,2,1,3,1,2,2,0.5),1*Defaultweight(ByCreationDate))' -tKBO -Ginvfreq --memory-limit=256 --delete-bad-limit=256000000
09:26:47 <Marvin--> kind of a scary command line though
09:27:02 <Igloo> Hurrah, all tests pass
09:27:19 <Marvin--> main screen turn on
09:28:04 <Marvin--> oh wait, I forgot one of the flags
09:28:05 <Marvin--> now it's on 0.2s :P
09:28:22 <Marvin--> take that quickcheck!
09:29:54 <Marvin--> this is kinda scary
09:31:55 <Marvin--> heh
09:32:02 <Marvin--> "Unless I am braindead, this maintains completeness, although the proof is rather tricky."
09:38:15 <Marvin--> ah, nice, gcc 3.3, wonder if it fixes that optimization bug in 3.2
09:44:20 * shapr boings
09:48:25 * shapr boings more
09:48:34 * Igloo looks nervous
09:49:09 <shapr> ?
09:49:24 <Igloo> Got to find my way to Cambridge tomorrow and talk with Tim and Simon
09:51:21 <shapr> oh
09:59:35 <Marvin--> damn, eproof still breaks with gcc 3.3
10:18:16 <shapr> wow, I think darcs really *can* be used to track refactored code.
10:18:20 <shapr> that's freakin *cool*
10:23:47 <shapr> hm, maybe it already has refactoring features
10:27:38 <shapr> iirc, GHC links in the entire source of a module, even if you only need one function from that module
10:28:12 <shapr> I was wondering whether it would be easier to write a program to turn all the necessary sources into a single source file, or if it would be easier to just fix GHC
10:28:14 <delYsid> links?
10:28:16 <delYsid> the source?
10:28:41 <shapr> darcs is at http://www.abridgegame.org/darcs/
10:28:49 <shapr> it's sort of a CVS written in Haskell
10:29:37 * delYsid hopes that svn is getting somewhere
10:30:11 <shapr> darcs docs say that it tokenizes the source ....
10:30:18 <shapr> it may already have refactoring features
10:30:25 * shapr isn't sure yet
10:30:43 <Igloo> Where a token is just a [^ ]+ or what?
10:30:55 <delYsid> hehehe, Hetris rocks
10:31:08 <delYsid> but it's *HUGE*
10:31:24 <delYsid> Igloo++
10:31:41 <Igloo> Huge?
10:31:42 <shapr> Igloo: I don't know, I would assume it's using hssource, but I may be thinking from a refactoring browser-centric viewpoint
10:32:08 <delYsid> Igloo: 340k isn't exactly small for a text-based tetris clone :)
10:32:25 <Igloo> shapr: Ah, so language specific?
10:32:32 <Igloo> del: Compiled size or source?
10:32:52 <delYsid> Compiled, of course
10:33:08 <shapr> Igloo: good point, probably isn't
10:33:16 <delYsid> but all GHC executables I've seen so far are huge, so :)
10:33:31 <Igloo> Ah, OK, not much I can do about that then  :-)
10:33:52 <delYsid> Igloo: ever thought about bringing the Ncurses module into the public?
10:34:00 <delYsid> I think such a thing would be nice to have
10:34:39 <Igloo> Well, I'd want to make it more complete before doing that
10:44:12 <shapr> I think darcs' theory of patches fits well with the refactoring theory of Opdyke/Brant
10:44:27 <shapr> if it doesn't do in-repository refactoring now, I think it can with very little alteration.
10:45:08 <ham[let]> hiho
10:45:19 <shapr> hi ham[let] 
10:45:26 <shapr> darcs is really really cool
10:51:22 <shapr> hi hal
10:51:25 <shapr> how's code?
10:52:01 <hdaume> blech :)
10:52:14 <shapr> are past feeling ill?
10:52:22 <shapr> have you recovered?
10:52:33 <hdaume> more or less
10:52:50 <wli> whoa
10:52:53 <wli> Hal Daume appears
10:53:07 <hdaume> hi wli
10:53:15 * wli wonders if he's not thinking enough about it or if the valuation ring stuff is actually hard
10:54:12 <shapr> hey hal, have you read the theory of patches stuff in the darcs documentation?
10:54:37 <hdaume> i had not, he says, wondering what darcs is :)
10:54:58 <shapr> it's a source control system written in Haskell by David Roundy
10:55:15 <hdaume> ah.  no, i haven't been following that discussion at all
10:55:30 <shapr> I think darcs' theory of patches is closely related to refactoring, but I'm not quite sure.
10:55:53 <Igloo> It sounds like exactly the thing that would make my GHC work easier...but that requires convincing other people to switch (and it being stable)
10:55:53 <shapr> I would very much like to have a source control system that understands refactoring
10:56:09 <Igloo> I've only read the first couple of paragraphs of the user guide so far though  :-)
10:56:20 <Marvin--> Igloo: I would've thought that "it being stable" would be a prerequisite to getting people to switch
10:56:46 <Igloo> Indeed
10:56:49 <shapr> If I can convince myself that darcs can be easily extended to do in-repository refactoring, I'll email C.Reinke. He and I have discussed refactoring quite a bit via email.
10:58:41 <shapr> what's an LCS algorithm?
10:58:51 <shapr> least something squares?
10:58:59 <shapr> it's for creating an optimal patch
10:59:28 <Marvin--> least common subsequence
10:59:36 <Marvin--> or largest
10:59:42 <Marvin--> probably largest
10:59:45 <shapr> ah, ok
10:59:45 <delYsid> Longest Common Sequence?
10:59:47 <andersca> I thought LCS was MP complete
10:59:52 <shapr> ?
11:00:03 <Marvin--> delYsid: or longest, yeah
11:00:07 <Smerdyakov> Member of Parliament?
11:00:26 <Marvin--> andersca: eh, isn't it just O(|s1||s2|) ?
11:00:29 <andersca> I dunno
11:00:42 <andersca> I saw some problem with Longest Common something that was MP Complete
11:01:09 <Marvin--> I think there's a dynamic programming algorithm that does it in O(|s1||s2|) time and space (the space is probably the problem here :))
11:01:11 <andersca> garh
11:01:14 <andersca> NP of course
11:01:15 <andersca> not MP
11:01:27 <Marvin--> yeah, we got that :)
11:01:29 <delYsid> No Problem :)
11:01:32 <Marvin--> (except Smerdyakov of course)
11:01:43 <shapr> delYsid: heh
11:02:00 <andersca> http://www.nada.kth.se/~viggo/wwwcompendium/node167.html
11:02:10 <andersca> I could be smoking crack though
11:02:59 <Marvin--> maybe the algorithm I'm thinking about is an approximation then
11:03:12 <Marvin--> but I think it was O(nm) in both time and space
11:03:33 <Marvin--> I implemented it at strakt in the object commit optimizer
11:04:30 <Marvin--> great, I've been on the 'cover' mailing list for two days, and all I've seen on it is ranting about the sys admins at MC
11:04:55 <debug> hm
11:04:57 <Marvin--> (cover as in COmbining VERification methods, a research project at cs.chalmers
11:04:59 <Marvin--> )
11:06:36 <shapr> hi debug
11:06:41 <shapr> debug: ltns, wassup?
11:06:42 <Marvin--> Marcin Benke is complaining that the sys admins are useless (I agree) and Lennart Augustsson can't believe that the standards have become so low since he left the institution :P
11:07:39 <Marvin--> "They don't allow ssh2???"
11:07:56 <Igloo> :-(
11:08:49 <Marvin--> not to mention that the student system has been in a perpetual state of brokenness since they started migrating to using DCE
11:09:01 <andersca> yeah
11:09:34 <Marvin--> much of which is because there's a single ss2 or something running as file server, printer server, mail server and everything else too
11:10:17 <Marvin--> "Oh, I can't log into X today, hmm, maybe I can log into the console, I just want to print something... oh wait, same server"
11:10:53 <Marvin--> maybe I should drag my sorry ass over to the supermarket and buy some food so I can eat breakfast tomorrow
11:11:40 <andersca> so apparently SCO's Unix comes with support for ext2
11:11:42 <Igloo> Just don't get up until lunchtime
11:11:54 <andersca> it'd be interesting if that code turned out to be GPLed
11:12:26 <Marvin--> Igloo: today I ate breakfast at nine and lunch at half past five
11:13:37 <Marvin--> *poof*
11:14:06 * Igloo commits The Great Renaming before Simon Marlow has a chance to sneak GHC 6 out
11:14:13 <Marvin--> heh
11:14:36 * shapr grins
11:15:05 <Marvin--> ooh, glassbilen
11:15:14 <shapr> I like bilar
11:15:28 <shapr> though I feel sick if I eat a whole bag too quickly
11:15:37 <Marvin--> no no, the blue van rolling around selling ice cream
11:15:37 <shapr> addictive swedish godies
11:15:39 <shapr> oh
11:15:43 <shapr> go for it!
11:15:53 * Marvin-- runs
11:15:59 <andersca> *vroom*
11:18:53 * delYsid gets increasingly hungry
11:19:18 <shapr> well, I've sent a mail to the author of darcs describing my bizarre idea, if he thinks it's interesting I'll hook him up with the fp-refactor guys.
11:20:06 <delYsid> Hmm, I wouldn't want a repository evolving my code :)
11:20:15 <shapr> I would
11:21:01 <delYsid> imagine!  You'd need to proof-read the whole thing everytime you checkout in case the SCM tries to sneak a trojan into your system :)
11:21:30 <shapr> heh
11:21:36 <shapr> anderscarlsson: yay, full name
11:21:39 <shapr> hmm
11:25:22 * Lilith wonders what happened to jHaskell
11:26:08 <shapr> is that the one that was being developed in Spain?
11:26:24 <Lilith> .nl?
11:26:25 <Lilith> norway?
11:26:32 <shapr> nl = netherlands
11:26:37 <Lilith> oops
11:27:05 <shapr> Lilith: try /country nl
11:27:09 <Lilith> by Rijk-Jan van Haaften
11:27:32 <Lilith> shapr: xchat :p
11:27:36 <shapr> :-)
11:28:58 <Lilith> they're mostly implemented in java
11:29:07 <Lilith> but no released source code!
11:29:16 <shapr> that sucks
11:31:01 <debug> shapr: not much is up
11:31:33 <Riastradh> Grrrr.  There ought to be a federal agency dealing with spammers, full of people who are very experienced in torture.
11:31:51 <delYsid> ha, that would be something fun to watch: The FSF filing a lawsuit against SCO for violating the GPL
11:32:22 <anderscarlsson> yeah
11:32:55 <delYsid> Riastradh: Agreed, oh! look, thats something the US could do!
11:33:19 <Riastradh> They could make some use out of the torturors in Iraq whom they caught!
11:33:28 <Riastradh> s/caught/.../1
11:33:57 <Riastradh> In fact, get rid of the whole 'whom they caught' bit.
11:34:26 <delYsid> They could use the WMD's (they found?) for that too!
11:34:41 <Riastradh> No, they shouldn't let any spammer die.
11:34:51 <Riastradh> The spammers should be tortured, not killed.
11:35:02 <shapr> Ya know the spam king got physically spammed
11:35:10 <Riastradh> Letting them die would be too merciful.
11:35:30 <delYsid> ok, life-long torture then
11:35:35 <Riastradh> Zigackly.
11:35:38 <shapr> a bunch of slashdot users found his snail mail address, and they subscribed him to every hardcopy catalog they could find that was available via the 'net
11:35:51 <Riastradh> Heheh.
11:36:00 <shapr> I read he was getting a hundred kilos of mail per day.
11:36:11 <delYsid> no explosives?
11:36:25 <shapr> and was totally unable to find mail of great interest to him like phone bills
11:37:07 <shapr> I still think we should switch to a pull-only system
11:37:28 <shapr> would be easy enough to build on top of the current system
11:41:16 <delYsid> shapr: so why dont you do it?
11:41:22 <delYsid> using gpg, its easy enough
11:41:26 <shapr> do you think anyone would use it?
11:41:38 <delYsid> just only accept signed mail which you somehow trust the key
11:41:47 <shapr> hm
11:42:03 <shapr> that's still a push system
11:42:12 <delYsid> the problem with poll-only is that it can easily be circumvented by social engineering
11:42:17 <shapr> I think the problem is that emails don't cost the sender anything
11:42:30 <shapr> so I propose to store outgoing email on the sender's server
11:42:33 <delYsid> that is what they already do today with those spams which only have as objective to bring you to a certain site
11:42:42 <Smerdyakov> I think all ISP service type things should be socialized....
11:43:19 <delYsid> shapr: but how do you get the info across then, that some mail is waiting hear to be picked up?
11:43:54 <Marvin--> bah, enough hacking for today
11:44:02 <Marvin--> I'm going to play some War3
11:44:04 <shapr> use the current system, but limit it to notification only
11:44:24 <shapr> if the notification was limited to 80 chars of subject, and a from: address
11:44:25 <delYsid> shapr: and who is preventing people from sending fake notifications, then?
11:44:30 <delYsid> rethink that, its pointless
11:44:36 <shapr> no, it's not pointless
11:45:08 <shapr> it's about the economics of the situation
11:45:19 <delYsid> if we are going for a new system, it needs a lot more flawlessness then that, it will be exploited anyway
11:45:22 <shapr> spammers would be required to own their own servers, ISPs would drop them like a rock
11:45:33 <shapr> servers would become known quickly
11:45:53 <shapr> and the spam servers would have to hold on to the emails just in case someone comes to pick them up
11:46:12 <delYsid> not really, it can dynamically generate them, then :)
11:46:19 <shapr> that's true
11:46:26 <shapr> but the burden is placed on the sender
11:46:28 <shapr> not the receiver
11:46:52 <delYsid> so? should be easy to prototype using procmail.
11:47:02 <shapr> good point!
11:47:49 <delYsid> prototype it, and post it on freshmeat :)
11:47:51 <shapr> procmail, libcurl
11:47:52 <shapr> hmm
11:48:01 <delYsid> no
11:48:03 <delYsid> not via http
11:48:09 <shapr> right of course
11:48:10 <delYsid> that creates firewall difficulties...
11:48:14 <shapr> via pop3
11:48:22 <delYsid> use the existing smtp, just work with some header fields...
11:48:45 <delYsid> and cache outgoing mail to people in the participant list and just send a notification
11:49:16 <delYsid> if they reply with a certain cookie, give them the real mail
11:49:38 <delYsid> hmm, or, as you said, I see now why
11:49:42 <shapr> ?
11:50:00 <delYsid> the retrieving part should be done in one step, so you'll need something to fetch it
11:50:07 <shapr> what about pop3?
11:50:17 <shapr> the notification can include a login and password
11:50:25 <shapr> or just a login, if it's unique
11:50:33 <delYsid> you'll need to write a server then, anyway.
11:50:38 <shapr> that's true
11:50:42 <delYsid> since the retriever should only see his mail
11:50:59 <delYsid> so a simple cgi is probably good enough for beginning
11:51:55 <delYsid> the problem though is, that the system only gets effective if you turn off all other mail :/
11:52:27 <delYsid> otoh, you can take some load of spamassassin since notifications dont need any checking
11:53:02 <delYsid> which brings us to the point that gpg would be effectively the same, since you can filter on unsigned, untrusted mail
11:53:11 <shapr> notifications would need checking
11:53:28 <shapr> the only difference is that you don't check what you have
11:53:33 <shapr> you check whether you want to get something
11:53:55 <delYsid> with gpg, you wouldnt need to check at all
11:54:04 <delYsid> you just need to work on your signatures
11:54:08 <shapr> but you would have to convince your mother to learn GPG
11:54:25 <Lilith> not just the mother
11:54:27 <Lilith> the father too
11:54:28 <Lilith> :p
11:54:45 <delYsid> well, with every new system, you'll have to convince people to use it, so that doesn't really count
11:55:12 <shapr> thing is, you still have to download your messages to check them for GPG signatures
11:55:59 <shapr> I get more than a fifty spam mails a day, they average about 300 lines of text
11:56:13 <shapr> some of them are email worms that can be multiple megabytes
11:56:21 <delYsid> yup
11:56:35 <Lilith> how many of you use spamassassin or something similiar?
11:56:42 <delYsid> I do
11:56:50 <shapr> I wrote my own, it's not that wonderful yet
11:56:56 <delYsid> It costs a hell of CPU time though
11:57:03 <Smerdyakov> I use spamassassin.
11:57:21 <shapr> delYsid: so ,filter notifications, not emails
11:58:09 <Lilith> hrm. the problem i have with it is the number of false positives it filters
11:58:11 <shapr> that would put the cost for bandwidth and storage space on the sender
11:58:28 <shapr> that would also mean that spammers couldn't use open mail servers
11:58:36 <delYsid> I had absolutely no false positive since I use spamassassin
11:59:10 <delYsid> shapr: they already can't, you just need to tell your smtp to discard them
11:59:10 <Smerdyakov> I've had a lot of false negatives lately.
11:59:16 <Smerdyakov> Smart spammers are sending minimalist messages.
11:59:27 <shapr> Smerdyakov: that's why bayesian filtering is better
11:59:30 <Smerdyakov> I get at least one bestiality/incest/rape porn spam message per day.
11:59:38 <Smerdyakov> From the same folks, I think
12:00:00 <Lilith> isn't there a bayesian filter up on sf?
12:00:03 <shapr> yup
12:00:11 <delYsid> Most probably the same folks who forced me off the net with piss.at
12:02:43 <Lilith> heh. most of my porn spam come from specific mail lists i'm on or from my hotmail account
12:03:03 <delYsid> hot mail
12:04:03 <delYsid> Lilith: there are specific mail lists for porn spam? :)
12:04:38 <Lilith> delYsid: yeah. apparently..like some haskell lists..
12:04:41 <delYsid> I think that would be solution anyway, spammers should just create proper mailing lists, and all would be happy
12:05:15 <Lilith> delYsid: see, even so, you'd always be opted in even if you tried to opt out :-)
12:06:57 <Lilith> does anyone here have an old version of ghc?
12:07:01 <shapr> hi tmoertel 
12:07:09 <tmoertel> shapr: howdy !
12:07:16 <shapr> what's up?
12:08:12 <tmoertel> I'm working w/ a friend on a non-noisy XSLT replacement.
12:08:26 <shapr> sounds interesting
12:08:40 <tmoertel> It translates from our easy-on-the-eyes markup to XSLT.
12:09:04 <shapr> what's the easy-on-the-eyes markup look like?
12:09:27 <tmoertel> template /sections
12:09:33 <tmoertel>   for-each subsection
12:09:50 <tmoertel>     sort date -order=descending
12:10:34 <tmoertel>     << <h1> >> apply-templates title << </h1> >>
12:10:41 <tmoertel>     (and so on)
12:10:57 <tmoertel> nesting, like in glorious Haskell, is determined by layout
12:11:15 <tmoertel> << and >> are used to quote literal XML
12:12:38 <tmoertel> common XSLT elements like template, for-each, and sort accept their required parameters as positional arguments or (optionally) as -name=value pairs
12:13:26 <tmoertel> so (for-each subsection) is the same as (for-each -select=subsection), which is equivalent to (<< <xsl:for-each select="subsection> >>)
12:13:52 <tmoertel> (add a closing " on my last example above)
12:14:01 <shapr> have you seem YAML?
12:14:06 <shapr> er "seen" ?
12:14:13 <tmoertel> can u gimme a link /
12:14:22 <shapr> http://www.yaml.org/
12:14:51 <shapr> you may also be interested in the scheme xml syntax
12:15:12 <tmoertel> SXML was deemed too verbose
12:15:31 <shapr> yah, I agree
12:15:35 <shapr> I really prefer layout
12:17:02 <tmoertel> yaml is interesting
12:17:11 <tmoertel> do you know if there is a 1-to-1 mapping to XML ?
12:17:26 <shapr> it's not totally 1-to-1
12:17:37 <shapr> yaml has a bit of typing included
12:19:17 * tmoertel requires green tea
12:22:15 * shapr grins
12:41:20 <jemfinch> shapr: you in?
13:45:48 <esap> Hmm.. is there some kind of general principle in theoretical computer science that loops always contain elements from two distinct sets?
13:50:50 <Smerdyakov> How does a loop "contain" something?
14:21:10 <Smerdyakov> esap, did you get an answer to your question about loops and distinct sets?
14:46:22 <shapr> jemfinch: what?
14:47:19 <jemfinch> shapr: you mentioned before that Monads were a better abstraction than objects.
14:47:23 <jemfinch> I'm curious why.
14:47:42 <Riastradh> 'Objects' in what sense?
14:47:46 <Smerdyakov> This sounds like a dubious statement.
14:47:48 <Smerdyakov> What does it even mean?
14:48:05 <jemfinch> Riastradh: in the Python sense, I suppose...ask shapr to make sure I understood correctly :)
14:48:46 <Smerdyakov> Well, I know I'd rather use a monad than a Python object, if I can.
14:49:49 <shapr> jemfinch: I think that objects are one single abstraction, and monads let you design abstractions
14:50:02 <jemfinch> shapr: can you explain that? :)
14:50:03 <shapr> sure
14:50:13 <shapr> I think
14:50:15 <shapr> :-)
14:50:27 <shapr> jemfinch: have you read anything about combinator programming?
14:51:07 <shapr> monads are an interface that's good for combinator programming
14:51:44 * shapr thinks
14:52:22 <jemfinch> shapr: do you have any links on combinator programming?
14:52:41 <shapr> jemfinch: I'd say read the "generalizing monads to arrows" paper by John Hughes
14:52:55 <jemfinch> ah, shoot, you're the second person today to recommend it to me.
14:52:59 <Riastradh> shapr, but there you're using something other than monads.
14:53:06 <shapr> you may want to start with meijer's monadic parser paper
14:53:34 <shapr> Riastradh: yes, but I think the Arrows paper discusses combinator programming and its strong points in great detail
14:53:53 <shapr> well, some detail
14:55:23 <shapr> jemfinch: it seems to me that objects are a single abstraction, and that monads are an abstraction that you get to define yourself
14:56:01 <shapr> the Maybe monad is about automatic failure handling, you can use it to replace a bunch of if/then/else calls with just <-
14:56:44 <shapr> you can read about the instances of the Monad typeclass
14:57:25 <shapr> jemfinch: who knows, maybe I'm spouting crap :-)
14:58:50 <shapr> jemfinch: look at monad transformers, and the paper about building modular interpreters with monad transformers
14:58:54 <esap> Maybe monad is also great for abstracting pattern matching.
14:59:19 <shapr> esap: I've been thinking about your OO-Arrow
14:59:26 <shapr> that's cool stuff
14:59:32 <esap> shapr: do you think it will work? :-)
14:59:38 <shapr> yah, I think it will
14:59:49 <shapr> I'm curious if you'll be able to fit multimethods in there as well
14:59:51 <shapr> I think you will
15:00:47 <esap> shapr: I don't have all the details yet done for subtyping.
15:01:22 <shapr> esap: I think you've captured the essence of passing messages to objects with the code I saw
15:01:42 <shapr> I suspect you'd be able to get prototype oriented programming out of it as well.
15:02:12 <esap> shapr: hmm.. that's an interesting idea.
15:02:30 <shapr> it's probably simpler as well
15:02:45 <shapr> then you don't have to worry about separate class/instance trees
15:04:05 <shapr> jemfinch: well, tell me what you think about my hypothesis. if you find any flaws or supporting points, I'd like to hear about them.
15:04:36 <jemfinch> shapr: I will :)  I'm going to give a presentation in a few months on Monads for a research group I was just invited into, so I'll be researching it for awhile :)
15:04:53 <jemfinch> anyway, I'm heading home :)
15:05:00 <shapr> what sort of research group did you get invited into?
15:05:22 <jemfinch> shapr: it's the Reusable Software Research Group here at OSU.
15:05:28 <jemfinch> does lambdabot google?
15:05:31 <shapr> not yet
15:05:45 <shapr> I think I can write xmlrpc and soap support with HXmlToolbox though
15:05:47 <jemfinch> http://www.cis.ohio-state.edu/rsrg/
15:05:49 <Riastradh> Write a Google module!
15:06:06 <jemfinch> shapr: once you have soap support, the rest should be pretty easy :)
15:06:15 <jemfinch> anyway, I'm off to home :)  We'll chat later, of course.
15:06:28 <shapr> ok, cya
15:07:48 <esap> shapr: I think I do need more primitives to actually build OO programming. The primitives do not seem to capture tuples properly, for example.
15:08:25 <esap> shapr: this means I need to write too many instance declarations.
15:10:03 <esap> shapr: and some of those are quite hard to write, actually. I tried to write an instance for StrictMonad for a Point class :-) It proved to be quite hard ....
15:10:27 <shapr> has your code changed since the last time I looked at it?
15:11:39 <esap> shapr: yes, a bit. I've changed some names, and tried to make the Point class compile. I still doesn't.
15:13:17 * esap just uploaded the latest version of it to http://www.kotiposti.net/~epulkkin/Functionality.lhs
15:14:25 * shapr grabs
15:14:44 <esap> shapr: that version compiles, so it's possible to try it in ghci. But don't hold your breath on actually doing OO with it yet :-)
15:15:03 <shapr> I'm getting a 404
15:15:17 <shapr> oh
15:15:20 <shapr> no tilde
15:15:30 <esap> oh, sorry.
15:16:19 <shapr> 5.05 is unhappy
15:16:28 <shapr>     Ambiguous constraint `StrictArrow a'
15:16:28 <shapr> 	At least one of the forall'd type variables mentioned by the constraint
15:16:28 <shapr> 	must be reachable from the type after the '=>'
15:16:28 <shapr>     In the instance declaration for `StrictMonad (->) (MonadReq m) m'
15:16:31 <shapr> and
15:16:36 <shapr>     Kind error: `StrictMonad (->) m' is not applied to enough type arguments
15:16:36 <shapr>     When checking kinds in `StrictMonad (->) m'
15:16:36 <shapr>     In the instance declaration for `StrictMonad (->) m'
15:16:56 <esap> hmm.. interesting. on 5.04.2 it works.
15:18:23 <esap> oh hmm.. did you use -fglasgow-exts and -fallow-undecidable-instances?
15:19:28 <shapr> yup
15:20:00 <esap> hmm.. interesting. I can use it with ghci, but ghc proper does not like it :-) Hmm.. got to fix that.
15:20:39 <esap> oh I have also -fallow-overlapping-instances
15:21:25 <shapr> still the same errors
15:21:40 <shapr> is there a -fno-restrictions ? :-)
15:22:53 <esap> shapr: oh, I had an extra "StrictMonad a" constraint on it that 5.04.2 didn't complain about.
15:24:17 <esap> shapr: s/StrictMonad/StrictArrow/
15:27:31 <shapr> that fixes line 70
15:28:30 <esap> line 70?
15:30:38 <esap> hmm. what is that another error referring to? [I don't get that error :-)]
15:31:47 <shapr> I don't get that error either
15:31:53 <esap> ok.
15:32:43 <shapr> oh
15:32:50 <esap> Probably some of the names are quite wrong (compared to semantics :-)
15:33:01 <shapr> in this line "instance (Monad m) => StrictMonad (->) m where"
15:33:10 <shapr> the instance is ( (->) m )
15:33:31 <shapr> in the other instances, it looks like you have three params there
15:33:39 <shapr> for example, "instance (Monad m) => StrictMonad (->) (MonadReq m) m where"
15:34:31 <shapr> right, that's the only place where you give just two
15:34:52 * esap can't see that line.
15:35:18 <shapr> line 75?
15:35:54 * esap has nothing in line 75. hmm.. let me check that the web has the correct version.
15:36:23 <shapr> er, line 74?
15:37:07 <esap> hmm.. line 75 is "      (=<) = obj_self" (which is part of OOArrow instance)
15:37:46 <shapr> something very different here
15:40:36 <esap> is it possible that you are getting the old version from some www cache or something? :-)
15:42:36 <shapr> maybe so
15:43:30 <esap> hmm. does your version have the function "coappS"? and the instance "StrictMonad a m m" commented?
15:43:39 <shapr> yay, it loads!
15:43:50 <shapr> must have been an old version somehow somewhere
15:44:07 * shapr bounces
15:44:12 <esap> ok good.
15:52:42 <esap> one of the things you should try is ":type (new returnS) =< PointRep 10 10 10
15:54:56 <shapr> yow
15:55:20 <Riastradh> @yow
15:55:21 <lambdabot> Well, here I am in AMERICA..  I LIKE it.  I HATE it.  
15:55:21 <lambdabot> I LIKE it.  I HATE it.  I LIKE it.  I HATE it.  I LIKE it.
15:55:21 <lambdabot> I HATE it.  I LIKE..  EMOTIONS are SWEEPING over me!!
15:56:00 <shapr> that's a new one
17:51:25 <_ozone_> morning *
17:52:40 <Riastradh> Hi.
18:59:42 <Pseudonym> I have a licensing problem.
19:00:10 <Riastradh> Lots of people have 'em.
19:00:11 <Pseudonym> I have something which I want to GPL, pretty much, but I want ti make it OK to link with code which is licensed under a BSD-like scheme.
19:00:31 <Pseudonym> I think the path of least resistance is going to be LGPL.
19:00:40 <Riastradh> Pseudonym, what are the exact term which you would like to place upon this code?
19:00:58 <Pseudonym> OK.  I want GPL for my code.
19:01:10 <Riastradh> That's very general.
19:01:15 <Pseudonym> But I want to use BSD-licensed code (i.e. old BSD) as well.
19:01:25 <Riastradh> There are so many terms in the GPL that you would be kicked off the network if you tried to explain them all from the flood.
19:01:38 <Pseudonym> Well, I want copyleft, pretty much.
19:01:59 <Riastradh> Is there a description of this 'copyleft' of which I have heard much and about which I'm very curious?
19:02:06 <Riastradh> ...not in the GPL itself, though.
19:02:16 <Pseudonym> OK, the main thing I want is not to have to write my own licence.
19:02:39 <Pseudonym> I want the GPL-like protection of requiring source distribution.
19:02:54 <Pseudonym> But I also want to remain as compatible as I can with other people.
19:03:04 <Pseudonym> I think LGPL is it, now that I think of it.
19:06:18 <Riastradh> I dislike even the LGPL, though it may not be as restrictive as the GPL, for it contains far too much legalese.
19:06:30 <Pseudonym> Me too, but I think it's what I want.
19:06:58 * Pseudonym is a firm believer in not reinventing the wheel, even if it's a heavy and complex wheel
19:07:18 <_ozone_> Pseudonym: (clarified?) artistic license?
19:07:30 <Pseudonym> Does that require source distribution?
19:07:35 <Riastradh> Writing a licence isn't reïnventing the wheel; it's merely fitting an existing wheel, law, upon your car so it fits better.
19:07:37 <_ozone_> lemmecheck
19:08:36 <Pseudonym> I don't think so.  Any licence sufficiently complex to express a concept like the requirement of source distribution is going to be too complex for me to write.
19:08:45 <Pseudonym> I don't speak fluent legalese.
19:08:58 <Riastradh> It needn't -be- complex.
19:09:01 <_ozone_> no, clarified artistic is quite simple
19:09:07 <_ozone_> http://www.statistica.unimib.it/utenti/dellavedova/software/artistic2.html
19:09:18 <_ozone_> search for 'source' on that page
19:09:24 <_ozone_> i quite like that license
19:09:34 <Riastradh> Licences, agreements upon what we're allowed to do with this code, should be able to be interpreted by the common programmer.
19:09:58 <Riastradh> Legalese should be avoided.
19:11:04 <Riastradh> 'If you change or modify the source in any way and then redistribute it, you must license the redistributed code under this licence.'  How hard is it to say and understand that?
19:11:55 <Pseudonym> Ah, but I don't quite want that.
19:12:04 <Pseudonym> Hmmm.
19:12:04 <Riastradh> Well, that was just an example.
19:12:07 <Riastradh> What is it that you want?
19:12:31 <Pseudonym> What I want, I think, is a GPL which is compatible with the BSD advertising clause.
19:12:42 <Riastradh> No, no, no, don't compare to other licences.
19:12:53 <Riastradh> Say what it is you want people to be able to do with your code.
19:14:20 <Pseudonym> Use it, distribute the source, distribute binaries so long as they also distribute the source, develop plugins under whatever terms they like and incorporate any other sufficiently "open" code into their contributions.
19:14:38 <Pseudonym> Oh, and modify.
19:14:40 <Pseudonym> Of course.
19:15:36 <Pseudonym> I don't like clause 8 of the Artistic2.
19:15:49 <Pseudonym> It's clearly intended for libraries.
19:15:53 <Riastradh> OK, now say it directly to me with a little tiny bit more formality -- 'you may ...'
19:17:08 <_ozone_> so take it out :)
19:22:38 <Riastradh> Pseudonym, would you mind doing what I asked of you seven minutes ago?
19:23:07 <Pseudonym> Yes I would, because I'm still not sure if I have a complete set of permissions.
19:23:10 <Pseudonym> I know where this is going,
19:23:34 <Pseudonym> Like a mathematician, I can see "well that's the proof done then" without going through the last 20 pages of working.
19:26:00 <Riastradh> If you aren't sure what the complete set of permissions should be, how can you have decided on the LGPL already?
19:26:28 <Pseudonym> Because a GPL-like licence definitely has all the restrictions I want.
19:26:45 <Pseudonym> It might have a few more, but it definitely has the ones I want.
19:26:48 <Riastradh> But does it possibly have too many?
19:27:52 <Riastradh> I would hate to license my code under some licence which I haven't fully explored and understood, only to find some restriction that would have repelled me from the licence in the first place had I known of it.
19:29:15 <Pseudonym> Well I know about the restrivtions in the GPL and LGPL.
19:29:21 * Pseudonym has read them both in detail
19:29:33 <Pseudonym> None of those restrictions "repel" me.
19:29:41 <Riastradh> You claimed that you were somewhat shaky with legalese, though.
19:30:01 <Pseudonym> Well I can't write a novel, either, but I can understand what's in them.
19:43:19 <Pseudonym> Gotta go.  Thanks for the suggestions all
21:15:44 <Chilli> Igloo: still around?
21:23:22 <Optikal> Gee Misses Cleaver, you sure do have a lovely programming language today
21:59:05 <flippo> @yow
21:59:05 <lambdabot> Mmmmmm-MMMMMM!!  A plate of STEAMING PIECES of a PIG mixed
21:59:05 <lambdabot>  with the shreds of SEVERAL CHICKENS!!...  Oh BOY!!  I'm
21:59:05 <lambdabot>  about to swallow a TORN-OFF section of a COW'S LEFT LEG
21:59:05 <lambdabot>  soaked in COTTONSEED OIL and SUGAR!!  ..  Let's see..
21:59:06 <lambdabot>  Next, I'll have the GROUND-UP flesh of CUTE, BABY LAMBS
21:59:08 <lambdabot>  fried in the MELTED, FATTY TISSUES from a warm-blooded
21:59:10 <lambdabot>  animal someone once PETTED!!  ...  YUM!!  That was GOOD!!
21:59:12 <lambdabot>  For DESSERT, I'll have a TOFU BURGER with BEAN SPROUTS
22:01:34 <Optikal> MMmmmm
22:19:11 <sethn> I have some questions about typed lambda calculus.... I was wondering if anyone here knew about this stuff and could help me out ;-)
22:19:24 <sethn> I'm trying to figure out how to deduce the type of a lambda expression
22:19:26 <sethn> e.g.
22:20:19 <wli> deduce the type of the result
22:20:24 <wli> deduce the type of the argument
22:20:28 <sethn> How do you do that though in the general case?
22:20:32 <sethn> So we have the type of the argument
22:20:33 <wli> A -> R
22:21:06 <sethn> The thing is that you might not have fully simplified lambda expressions in the result because later you may apply things, right?
22:21:57 <sethn> I'm not sure how to deduce the type of the result
22:27:36 * stepcut gives himself a high five
22:33:38 <stepcut> at this rate I'll have my mysql interface done by 2020
23:42:02 <sjj> Is there a way to 'apply' a list as arguments to a function in Haskell?
23:42:52 <Darius> Write what you want to do, because I'm not sure what you are talking about?
23:43:37 <sjj> Darious: (\x y z -> x ++ y ++ z) `apply` ["foo","bar","baz"] => "foobarbaz"
23:43:51 <sjj> Darius even.
23:44:26 <_ozone_> sjj: foldl "" (++) ["foo","bar","baz"]
23:44:27 <_ozone_> i think
23:44:58 <_ozone_> make that foldl (++) "" ["foo","bar","baz"]
23:45:09 <sjj> _ozone_: well, I don't want the output of that function, I want the demonstrated semantics
23:45:16 <sjj> _ozone_: it was just an example.
23:45:24 <Darius> You could write apply (for a specific case) but for the general case it wouldn't work.
23:45:30 <_ozone_> ah, i see
23:45:35 <sjj> Darius: *nod* thought so.
23:47:18 <Darius> You can just take a list of arguments which is effectively what most languages supporting variable arguments do (or a vector) 
23:47:34 * sjj nods
23:47:35 <Darius> E.g. (\(x:y:z:_) -> x++y++z)
23:48:04 <Darius> Actually, better would be \([x,y,z]) ->...
