01:36:22 <lowks> i am trying to install c2hs from source
01:36:26 <lowks> but i get this error : 
01:36:35 <lowks>  -package-name c2hs  -ic -ichs -igen -istate -itoplevel  c/*.o chs/*.o gen/*.o state/*.o toplevel/*.o
01:36:35 <lowks> /usr/lib/ghc-5.04.3/libHSrts.a(RtsFlags.o): In function `splitRtsFlags':
01:36:35 <lowks> RtsFlags.o(.text+0xd0): undefined reference to `__ctype_b'
01:36:35 <lowks> RtsFlags.o(.text+0xf1): undefined reference to `__ctype_b'
01:36:35 <lowks> collect2: ld returned 1 exit status
01:36:36 <lowks> make[1]: *** [c2hs] Error 1
01:36:38 <lowks> make[1]: Leaving directory `/usr/src/sorcery/c2hs-0.11.3/c2hs'
01:36:40 <lowks> make: *** [c2hs] Error 2
01:36:44 <lowks> can someone help me out here ?
01:36:59 <seth_> lowks: missing a library on the link line.  What o/s?
01:37:06 <lowks> seth_: linux 
01:37:29 <seth_> lowks: I built it on linux, but not for about two months.  Which version of ghc?
01:38:00 <lowks> 5.04.3
01:38:00 <lowks> ]
01:38:09 <seth_> Let me try it here.
01:38:11 <lowks> binary
01:38:48 <seth_> binary?  Oh, 5.04.3 binary
01:38:52 <lowks> i don't need a source for the ghc eh ?
01:38:58 <lowks> seth_: yes
01:39:06 <seth_> generally not.  I always build from source anyway.
01:39:47 <seth_> give me the url from which you downloaded
01:39:52 <seth_> c2hs, that is
01:40:09 <lowks> http://www.cse.unsw.edu.au/~chak/haskell/c2hs/c2hs-0.11.3.tar.gz
01:40:24 <lowks> maybe i am not passing it some arguements i am supposed to
01:41:10 <seth_> I don't recall anything.  But let me build it quickly.
01:41:21 <seth_> You got this on make?  Or make install?
01:41:46 <lowks> make
01:42:27 <seth_> ok.  it is building here.  it is fairly short so it shouldn't take too long
01:42:39 <lowks> wow
01:42:46 <lowks> u can tell how long is it ?
01:43:00 <seth_> it downloaded in about 15 seconds, so it can't be too long
01:43:07 <lowks> oh =)
01:43:30 <lowks> seth_: what distro are you using ?
01:43:48 <seth_> I have debian, slackware, and red hat
01:44:06 <seth_> I didn't get the error.  Which distro are you using?
01:44:14 <seth_> I did this build on debian
01:45:36 <lowks> hmmm
01:45:39 <lowks> on sorcerer
01:45:45 <lowks> gcc --> 3.2.3
01:45:53 <lowks> glibc --> 2.3.2
01:45:54 <seth_> I don't know much about sorcerer.  But I'm using gcc 3.2 also
01:46:06 <lowks> what did you pass to configure
01:46:09 <lowks> ?
01:46:31 <seth_> nothing, just ./configure
01:46:38 <seth_> did you use arguments?
01:46:45 <lowks> uh yes
01:46:57 <seth_> what arguments?
01:46:59 <lowks> --prefix --build --sysconfdir 
01:47:09 <seth_> those shouldn't matter
01:47:12 <seth_> for this error.
01:47:22 <lowks> what is this error about
01:47:23 <seth_> what was the unresolved external again?  I'll see which library it is in
01:47:38 <seth_> It tried to find something in the C library, and didn't find it.
01:47:39 <lowks> /usr/lib/ghc-5.04.3/libHSrts.a(RtsFlags.o): In function `splitRtsFlags':
01:47:39 <lowks> RtsFlags.o(.text+0xd0): undefined reference to `__ctype_b'
01:47:39 <lowks> RtsFlags.o(.text+0xf1): undefined reference to `__ctype_b'
01:47:39 <lowks> collect2: ld returned 1 exit status
01:47:39 <lowks> make[1]: *** [c2hs] Error 1
01:47:40 <lowks> make[1]: Leaving directory `/usr/src/sorcery/c2hs-0.11.3/c2hs'
01:47:41 <lowks> make: *** [c2hs] Error 2
01:47:43 <lowks> !
01:47:48 <seth_> ok, let me check where __ctype_b should be
01:50:38 <seth_> well, it is used in about a dozen libraries.  Still looking for where it is defined.
01:51:20 <lowks> hmmm
01:52:15 <seth_> looks like an internationalization thing.  What language do you use?
01:52:39 <lowks> ?
01:52:48 <seth_> english?  Or a different language?
01:52:51 <lowks> you mean what locale i picked for glibc ?
01:52:54 <lowks> english
01:53:05 <seth_> then that doesn't explain anything.  :)
01:53:58 <seth_> I _think_ that if you build ghc from source this may go away.  But it takes a long time and I can't be sure.
01:54:30 <lowks> it's a pain to build ghc from source
01:54:45 <seth_> not really, not if the binary is installed.  It takes forever but it is all machine time.
01:55:07 <lowks> ok can u tell me how ?
01:55:28 <seth_> just download the archive, extract it, do ./configure, then make, then make install
01:55:31 <seth_> the usual sequence
01:55:52 <lowks> wat happens to da binary then ?
01:56:37 <seth_> it gets covered over by make install.  The reason I say that is that __ctype_b is declared in /usr/include/ctype.h, so building it against the compiler that matches the header files _should_ help.
01:56:50 <seth_> BUT,  I do indeed have exactly the same symbol, and it is defined somewhere.
01:57:39 <seth_> which means you could go through the entire exercise and see exactly the same result.
01:57:54 <seth_> the strange thing is that it doesn't complain about any missing libraries.
01:59:03 <seth_> are you sure there were no earlier errors, maybe further up in the output?
01:59:22 <lowks> why don't i send you the whole compile file ?
01:59:27 <seth_> ok.
01:59:33 <lowks> hang on
02:00:31 <lowks> can i mail it to you ?
02:00:35 <lowks> i am behind a firewall
02:00:45 <seth_> seth@cql.com
02:03:12 <lowks> sent
02:04:07 <seth_> ok, I'll look for it...
02:04:37 <lowks> thanks mate
02:04:52 <lowks> your site http://cql.com look insteresting
02:05:31 <seth_> thanks.  I have the file.
02:05:44 <seth_> I'm building a haskell interface to the database engine.
02:05:56 <lowks> what do you do for a living ?
02:06:54 <seth_> write software.  what else?  :)
02:07:05 <lowks> hehe
02:07:09 <lowks> hi my name is Low
02:07:20 <lowks> actually i am trying to write a spell for sorcerer
02:07:37 <lowks> sorcerer imho is like totally lacking in functional programming language app spells
02:07:47 <seth_> What I would do here is to cut and paste the last command from the file you sent me, and add the flags to print out all the information about what ghc is doing.  That way we can see what libraries it is linking with.
02:07:48 <lowks> sorcerer --> http://www.sorcerer.wox.org
02:07:53 * Marvin-- wonders what the heck he stumbled into here
02:08:05 <lowks> seth_: ok
02:08:08 <seth_> what is sorcerer?  What is different about it compared to other distros?
02:08:20 <lowks> seth_: it's a sourced based distro
02:08:27 <seth_> Marvin--: he is getting undefined externals building c2hs.  I just built the identical versions and didn't see it.
02:08:35 <Marvin--> ah
02:08:52 <seth_> __ctype_b, which appears in about a thousand libraries in /usr/lib
02:09:16 <seth_> it fails on a ghc -o line, so I suggested turning on the flags so we can see the actual link command that is failing
02:09:41 <seth_> But if you have a better idea, speak up.  :)
02:10:18 <seth_> I also suggested building ghc from source.  He installed binaries.  Building from source should force it to be in sync with the compiler and system libraries.
02:10:42 <seth_> ghc in general looks like it works.
02:10:46 <seth_> as far as I can tell
02:11:12 <seth_> all the earlier ghc commands in the build are normal.
02:11:23 <lowks> could it be somethng to do with my CFLAGS 
02:11:25 <lowks> ?
02:11:43 <seth_> I doubt it.  It has to be a missing library, or a symbol missing from a library.
02:11:55 <lowks> export    CFLAGS="-O2 -pipe -march=athlon -funroll-loops"
02:11:55 <lowks> export  CXXFLAGS="-O2 -pipe -march=athlon  -funroll-loops"
02:11:55 <lowks> export   LDFLAGS="-Wl,-s"
02:11:55 <lowks> export      PATH="/opt/gcc/current/bin:$PATH"
02:13:00 <seth_> lowks: have you compiled and linked other haskell programs in this environment?
02:13:07 <lowks> yes
02:13:11 <lowks> ghc
02:13:14 <lowks> hugs
02:13:21 <lowks> nhc failed
02:13:25 <seth_> I mean used ghc to compile and link a haskell program.
02:13:38 <lowks> hmmmm
02:13:42 <lowks> not really
02:14:02 <seth_> try it.  just a short hello,world program to see if you can link anything.
02:14:33 <lowks> hhe could you gimme an example ?
02:14:37 <lowks> sorry
02:14:41 <lowks> i am new at this
02:15:05 <seth_> main = putStrLn "hello, world"
02:15:07 <lowks> i get mixed up with all the rest like erlang ... lisp .. =)
02:15:18 <lowks> seth_: save it as hello.hs ?
02:15:23 <seth_> sure.
02:15:36 <seth_> wait, for the compiler I think you'll need this:
02:15:47 <seth_> module Main where
02:15:54 <seth_> main = putStrLn "hello, world"
02:15:55 <seth_>   
02:16:10 <seth_> ghci will let you get away with not having module Main, but I think the compiler complains.
02:16:50 <lowks> module Main where
02:16:50 <lowks> main = putStrLn "hello, world"
02:16:53 <lowks> this is okay right ?
02:17:02 <lowks> i am gonna save that as hello.hs 
02:17:05 <seth_> yes, assuming I didn't make any mistakes   :)
02:17:17 <seth_> then:   ghc -o hello hello.hs
02:17:32 <lowks> archie_sihir@Sorcerer:~$ ghc -o hello hello.hs
02:17:33 <lowks> shapr: line 1: gcc: command not found
02:17:56 <lowks> ummm in sorcerer the gcc is in /opt/gcc/3.2.3/bin
02:18:08 <seth_> is it in your search path?
02:18:15 <seth_> type "type gcc"
02:18:31 <lowks> nope not in my search path
02:18:42 <seth_> add it to the search path and rerun the ghc command
02:18:42 <lowks> okay 
02:18:46 <lowks> when i add it .
02:18:50 <lowks> this is what i get :
02:18:58 <lowks> archie_sihir@Sorcerer:~$ ghc -o hello hello.hs
02:18:58 <lowks> /usr/lib/ghc-5.04.3/libHSrts.a(RtsFlags.o): In function `splitRtsFlags':
02:18:58 <lowks> RtsFlags.o(.text+0xd0): undefined reference to `__ctype_b'
02:18:58 <lowks> RtsFlags.o(.text+0xf1): undefined reference to `__ctype_b'
02:18:58 <lowks> collect2: ld returned 1 exit status
02:19:10 <seth_> same problem.  that's what I thought.
02:19:22 <lowks> install from source
02:19:28 <lowks> ?
02:19:43 <seth_> I would.  Not guaranteed to work, but a good thing to do anyway.
02:20:37 <lowks> okay =(
02:21:03 <lowks> seth_: what exactly does your company sell ?
02:21:13 <seth_> I'm not going to be here too much longer; it is 2:20 AM here.  Probably another 1/2 hour.
02:21:31 <seth_> Right now I'm working on some internet content filtering software.
02:22:18 <lowks> can you please tell me what is the main difference between erlang and haskell ?
02:22:35 <seth_> I don't know enough about erlang to do that.
02:23:01 <lowks> then what about the diff btwn haskell and scheme ?
02:23:04 <seth_> As far as functional languages I know ocaml and Haskell well.
02:23:08 <seth_> that's easy.
02:23:19 <seth_> scheme is untyped.  haskell is strongly typed at compile time.
02:23:48 <seth_> haskell code is _much_ more readable than scheme code 
02:23:55 <lowks> and can you bootstrap ghc with a binary ghc installed ?
02:24:22 <seth_> yes, that's how I built mine here.  BUT, my binary was capable of linking, so I'm not sure whether that will work for you.
02:25:12 <lowks> seth_: sorry what i meant to ask was ... can it bootstrap ghc *without* a ghc installed ?
02:25:33 <lowks> can hugs98 bootstrap it ?
02:25:36 <seth_> no
02:25:43 <lowks> =(((
02:25:44 <seth_> you can bootstrap v5 with v4
02:26:00 <seth_> which may or may not be useful
02:26:04 <seth_> in this situation
02:26:07 <lowks> :(
02:26:20 <lowks> only ghc can bootstrap ghc ?
02:26:47 <seth_> I've never tried it with another Haskell compiler.  It might work but I suspect it would be _very_ difficult.
02:26:57 <lowks> right
02:27:08 <lowks> can the source bootstrap itself ?
02:27:27 <seth_> no.
02:27:38 <lowks> boot_from_hc=yes ?
02:27:40 <lowks> what is this ?
02:27:47 <lowks> i see this in the gentoo ebuild
02:28:21 <seth_> I'm not sure.  I erased my gentoo machine and loaded slackware on it about three months ago.
02:28:34 <lowks> http://csociety-ftp.ecn.purdue.edu/pub/gentoo-portage/dev-lang/ghc/ghc-5.02.3.ebuild
02:29:43 <seth_> Maybe someone else can interpret that  boot_from_hc  flag.  ?????
02:30:08 <lowks> seems like you and me here ...
02:30:09 <lowks> hehe
02:30:30 <seth_> the Australia folks will be along shortly.
02:30:38 <lowks> ?
02:30:56 <seth_> Several people from Australia are frequently here.
02:31:02 <lowks> ok
02:31:30 <seth_> This is by far the best IRC channel I've seen.  People are both knowledgeable and friendly, which is a rare combination.
02:31:44 <lowks> it's a bit like #sorcerer
02:31:49 <lowks> you are right btw
02:31:58 <lowks> people in #lisp are not like this
02:32:29 <seth_> They just don't want you to know that once you learn all those bizarre function names, their language isn't particularly hard.  :)
02:32:48 <lowks> hehhe
02:33:47 <lowks>  --enable-hc-boot
02:33:48 <lowks>         Boot the Glasgow Haskell Compiler from intermediate .hc files.
02:33:48 <lowks>         (This option is mostly of interest to porters.)
02:34:18 <seth_> I don't know the specifics there, I've never done a port.
02:34:27 <lowks> what is a port anyway ?
02:34:54 <seth_> building the compiler on a new operating system.
02:35:21 <lowks> seth_: what is that you suspect the binary don't work on my systeme ?
02:35:42 <seth_> I think the libraries are in a non-standard location.  Or a library name is different.
02:36:23 <seth_> There might be flags to allow you to correct for that at run time.  I'd have to check the docs, as it isn't something I've done.
02:36:39 <seth_> since the compiler executable is in a different place, the libraries may be also.
02:37:04 <seth_> Or you could just use symbolic links to allow ghc to find the libraries.  Again if you know which ones it is looking for, and where.
02:37:07 <lowks> afaik only the compiler executable is
02:37:18 <seth_> could be.  libraries in /usr/lib?
02:37:29 <lowks> yes
02:37:48 <seth_> I'd run the compiler with strace and snag the link command from it.  Do you know how to do that?
02:37:59 <lowks> no
02:38:06 <lowks> :(
02:38:11 <lowks> not only am a n00b
02:38:17 <lowks> i am a braindead n00b
02:38:24 <seth_> strace -o outputfile -ff -s 1024 ghc -o hello hello.hs
02:38:33 <lowks> wow
02:38:41 <seth_> it just means:
02:38:59 <seth_> -o outputfile   means write the result to files beginning with outputfile
02:39:09 <seth_> -ff means trace child processes and put the results in separate files
02:39:25 <seth_> -s 1024 means keep 1024 characters of any command (most are much shorter, of course)
02:39:34 <seth_> and the rest is just the ghc command from before
02:39:41 <lowks> hang on
02:39:43 <lowks> installing now
02:39:44 <lowks> hehe
02:39:58 <lowks> strace i mean
02:40:09 <seth_> ok.  it is small.
02:41:09 <seth_> Marvin--: (or anyone):  will  ((read str) : Int)  accept a string that is a hex number?
02:52:22 <delYsid> yes
02:52:33 <delYsid> > read "0x13"::Int
02:52:33 <delYsid> 19
02:54:00 <seth_> thanks
04:25:18 <shapr> I think searchml needs work
04:32:12 <Igloo> seafood: Yes
04:32:48 <shapr> seafood: nice nickname
04:34:01 <sjj> o/~ shapr, shapr, internet that flies, $9.90 per month, connect yourself with shapr o/~
04:35:36 <shapr> eh?
04:35:43 <shapr> am I so expensive?
04:35:56 <sjj> !? that's cheap for a months internet!
04:36:25 <shapr> oh, ok
04:36:29 <shapr> wassup sjj?
04:36:49 <sjj> shapr: nada, playing around with python stuff.
04:37:07 <shapr> done any haskell lately?
04:37:33 <sjj> yeah, did some earlier today, still doing that language processing assignment.
04:37:46 <shapr> how's it going?
04:37:52 <sjj> they are using their own set of parser combinators, which are a bit weird, but overall it's pretty easy.
04:49:59 <shapr> I think I'm going to disable searchml till I find some way to cut down on its memory usage
05:35:02 <archie_sihir> seth_: ?
05:43:03 <shapr> you know seth?
05:44:15 * shapr boings happily
05:44:20 <shapr> goood morning #haskell!
05:44:23 <shapr> it's a beautiful day
05:44:53 <opet> it's pissing it down here
05:45:47 <Igloo> :-)
05:48:00 <mgoetze> hi shapr
06:05:03 <shapr> hi mgoetze 
06:05:05 <shapr> hello nerdlor 
06:05:44 * shapr bounces happily
06:11:37 <nerdlor> hey shapr
06:14:40 * delYsid returns from mid-day break
06:14:51 <shapr> nerdlor: how's the code treating you?
06:16:40 * tmoertel requires coffee, strong
06:21:47 <archie_sihir> can i use happy to bootstrap ghc ?
06:37:20 <delYsid> frustraing is, if you are constantly beaten by your own AI
07:01:22 <nerdlor> oh hey shapr
07:01:28 <nerdlor> haven't done too much haskelling lately
07:01:38 <nerdlor> (they're making me work!)
07:27:58 <shapr> nerdlor: well, if they're paying you at the same time :-)
08:29:59 <delYsid> hmm, I just realized that I'm passing two arguments to nearly every important function in chess.  (colour and board).  I'm considering making Colour a member of the Board data type, and only pass one arg, Board, to all those functions.  Are there any implications with doing so I should be aware of?
09:03:51 <ham[let]> hiho
09:04:10 <shapr> hohi
09:04:19 <ham[let]> :)
09:09:38 <SyntaxPolice_> does anyone have a Hurd machine they could test hugs on? (either the debian package or upstream?)
09:10:03 <shapr> doesn't the debian project have a hurd machine you can test on?
09:11:21 <SyntaxPolice_> shapr: I don't think so. I think it used to, but also I'm not an official developer yet and so can't log into the machines :(
09:11:41 <SyntaxPolice_> shapr: at least, Hurd doesn't seem to have tried to autobuild my package.
09:12:03 <shapr> oh
09:24:36 <ham[let]> when i have a vector (f(x),g(y)) = (((f,g)(x))(y) this is be possible in math isnt it?
09:26:42 <shapr> be possible?
09:27:04 <ham[let]> erm :)
09:27:19 <ham[let]> i wanted to say should be :) shouldnt it
09:28:51 <shapr> wouldn't it be = (,) (f x) (g y) ?
09:28:56 <shapr> I don't think I understand your question.
09:29:20 <ham[let]> i still have that list problem
09:29:30 <ham[let]> i have a list with functions in it
09:29:41 <shapr> yah?
09:29:55 <ham[let]> and now i want to transform that to a function
09:30:25 <ham[let]> such that i can ($) the vale to that list and thus to the fn in the list
09:31:20 <Igloo> SyntaxPolice_: Is the MAXPATHLEN problem fixed?
09:46:45 <SyntaxPolice_> Igloo: I don't know. I saw MAXPATHLEN in one file, but its use is surrounded by some #ifs that test whether it exists, so I guess its fixed.
09:47:02 <SyntaxPolice_> but it doesn't test whether it exists explicitly actually :(
09:47:16 <SyntaxPolice_> #if HAVE__FULLPATH
09:47:16 <SyntaxPolice_>     static char path[FILENAME_MAX+1];
09:47:16 <SyntaxPolice_> #elif HAVE_REALPATH
09:47:16 <SyntaxPolice_>     static char path[MAXPATHLEN+1];
09:47:16 <SyntaxPolice_> #else
09:47:17 <SyntaxPolice_>     static char path[FILENAME_MAX+1];
09:47:19 <SyntaxPolice_> #endif
09:47:54 <Igloo> Syn: No, see my recent message to hugs-bugs and Ross' followup
09:50:31 <SyntaxPolice_> Igloo: OK thanks a lot.
11:44:00 <delYsid> hmm, does anyone know of a simple example code using Language.Haskell.Parser and Language.Haskell.Pretty?
12:47:47 <seth_> archie_sihir: you rang?  about five hours ago, I think.
12:50:10 <Segora> delYsid: is this too simple?  let ParseOk po = parseModule "fac 0 = 1; fac n = fac (n-1) * n" in prettyPrint po 
14:35:23 <Igloo> What's the canonical expression involving S, K and I?
14:35:50 <Darius> *blink* *blink* ?
14:35:52 <Riastradh> 'The canonical expression?'
14:36:17 <Igloo> I'm sure there's a standard expression, but I can't remember what it is or does
14:36:26 <Riastradh> A 'standard' expression...?
14:36:35 <Darius> A standard example?
14:36:45 <Igloo> Hmmm, it might be Y, which would be annoying because I don't want that
14:36:57 <Igloo> Oh, actually it wouldn't be that bad
14:38:11 <Riastradh> S U U, where U f x is defined as f (x x).
14:38:34 <Igloo> @commands
14:38:34 <lambdabot> Sorry, I don't know the command "commands", try "lambdabot: @listcommands"
14:38:39 <Igloo> @listcommands
14:38:39 <lambdabot> I react to the following commands: ["all-dicts","board","define","definitions","del-definition","devils","dict","dict-help","dump","easton","echo","elements","eval","fact","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","ply","quit","reset-chess","resume","searchml","set-fuel","showml","state","topic-
14:38:43 <Riastradh> @listmodules
14:38:43 <lambdabot> I have the following modules installed: ["chess","dict","eval","fact","fortune","hello","karma","more","searchml","state","system","topic","type","yow"]
14:38:52 <Igloo> @definitions
14:38:53 <lambdabot> ["B","Branch"]
14:38:53 <lambdabot> ["C","Cons"]
14:38:53 <lambdabot> ["False"]
14:38:53 <lambdabot> ["I"]
14:38:53 <lambdabot> ["Just"]
14:38:53 <lambdabot> ["K"]
14:38:55 <lambdabot> ["Leaf","Left"]
14:38:57 <lambdabot> ["MonadError","MonadParser","MonadReader","MonadState","MonadWriter","MonadWriter_"]
14:38:59 <Darius> @more
14:38:59 <lambdabot> ["Nil","Nothing"]
14:39:01 <lambdabot> ["Pair"]
14:39:03 <lambdabot> ["Right"]
14:39:05 <lambdabot> ["S","StateT","Succ"]
14:39:07 <lambdabot> ["True"]
14:39:09 <lambdabot> ["U"]
14:39:11 <lambdabot> ["X"]
14:39:13 <lambdabot> ["Y","Y''","Y*"]
14:39:15 <lambdabot> ["Zero"]
14:39:17 <lambdabot> ["a","alt","ana","apo","append","ask"]
14:39:22 <Igloo> (oh for a get-definition)
14:39:23 <Darius> @del-definition Y*
14:39:24 <lambdabot> Y* removed
14:39:44 <Riastradh> @del-definition Y''
14:39:51 <Riastradh> ...
14:39:52 <lambdabot> Y'' removed
14:40:05 <Igloo> I'm confused, can I not ask it what the definition of Y is?
14:40:13 <Darius> @get-definition Y
14:40:13 <lambdabot> Y = \f. U (\g. f (U g))
14:40:25 <Darius> @fact eval-example
14:40:26 <lambdabot> (\f.(\x.f(x x))(\x.f(x x)))(\fac acc n.if n == 0 then acc else fac (n*acc) (n-1)) 1 100
14:40:44 <Igloo> Oh, duh, they're ordered alphabetically, it's just coincidence get-definition was next to definitions...
14:41:12 <Darius> @listcommands eval
14:41:12 <lambdabot> Module eval provides the following commands: ["eval","define","get-definition","definitions","del-definition","dump","set-fuel","resume"]
14:41:41 <Riastradh> U in the case of \f. U (\g. f (U g)) is defined as \f. f f.
14:53:47 <Igloo> @eval Y (\q -> 5)
14:53:47 <lambdabot> (line 1, column 7):
14:53:47 <lambdabot> unexpected "-"
14:53:47 <lambdabot> expecting identifier or "."
14:53:52 <Igloo> @eval Y (\q . 5)
14:53:53 <lambdabot> 5
14:54:19 <Darius> @eval take 10 (Y (\a.1:a))
14:54:19 <lambdabot> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
14:54:54 <Igloo> @eval S S K (S (K (S S (S (S S K)))) K) (\y -> 5)
14:54:54 <lambdabot> (line 1, column 39):
14:54:54 <lambdabot> unexpected "-"
14:54:54 <lambdabot> expecting identifier or "."
14:54:58 <Igloo> @eval S S K (S (K (S S (S (S S K)))) K) (\y . 5)
14:54:58 <lambdabot> 5
14:55:41 <Darius> @eval take 10 (S S K (S (K (S S (S (S S K)))) K) (\a.1:a))
14:55:41 <lambdabot> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
14:55:42 <Igloo> Hmmm, I think my evaluation order is wonky
15:06:30 <Igloo> Ah no, just a wrnog argument somewhere
15:19:32 <Igloo> Yay, 58 lines including documentation and comments isn't bad  :-)
15:19:43 <Riastradh> Fifty eight lines of SKI-Calculus?
15:20:02 <Igloo> An evaluator for SKI-LC in 58 lines
15:20:22 <Riastradh> Oh.
15:20:53 <Igloo> Well, 54. The other 4 are examples.
15:22:32 <Riastradh> Are you sure it beta-reduces properly? -- i.e.:  (\f. \g. f g) (f g) -- bad beta-reducers would beta-reduce that to: \g. (f g) g
15:23:59 <Riastradh> Well, ok, that would eta-reduce to 'f g', which is right, so that was a bad example.
15:24:50 <Igloo> If you give it a non-closed expression it will break, and it always does outer-most beta-reduction first, so I don't think I have to worry about variable capture
15:25:00 <Riastradh> (\f. \g. g (f f)) (f g) in bad beta-reducers would beta-reduce to \g. g (f g (f g)), which isn't wrong.
15:25:06 <Riastradh> s/isn't/is/1
15:25:21 <Igloo> (\f. \g. g (f f)) (f g)  isn't valid input so behaviour is undefined
15:25:37 <Riastradh> Er, why isn't that valid input?
15:26:06 <Igloo> Because it has free variables
15:26:24 <Riastradh> Yes, but if it's lazy it shouldn't have to deal with them.
15:26:59 <Igloo> The documentation clearly states "Input goes where indicated by the comment. Must be a closed expression."  :-)
15:28:19 <Darius> Does it manipulate variable names at all or does it just use nested environments?
15:29:29 <Igloo> It doesn't manipulate variables names (other than substituting an expression for a variable) nor use environments
15:30:20 <Igloo> Do you think that isn't safe?
15:33:21 <Igloo> e is closed. If e is a literal we are done. If e is an application then the left and right hand sides are closed expressions. Evaluate the left hand side. If it is a lambda abstraction then beta reduce (stop when you hit another lambda binding the same variable). As the RHS is closed no variable capture can occur. Is there a flaw in that?
15:34:50 * Igloo adds that to the documentation
15:35:28 <Riastradh> OK, in the expression:  (\f. \g. (\f. \g. g (f f)) (f g)) (\x. \y. x) (\x. \y. y)   I don't think it will beta-reduce properly.
15:35:37 <Riastradh> (if you have a bad beta-reducer)
15:35:43 <Darius> (\x.(\x y.y) 5 x) 10
15:36:04 <Riastradh> Darius has a better example.
15:36:23 <Igloo> Riastradh: \g'3 -> g'3 ((\x'4 -> \y'5 -> x'4) (\x'6 -> \y'7 -> y'7) ((\x'4 -> \y'5 -> x'4) (\x'6 -> \y'7 -> y'7)))
15:36:51 <Igloo> Darius: Not closed
15:36:56 <Igloo> Oh yes it is
15:37:09 <Darius> 10 and 5 are free :P
15:37:12 * Igloo puts another \ -> in  :-)
15:37:27 <Igloo> Yeah, but you can't say \x y -> in this
15:37:42 <Igloo> 10
15:38:05 <Riastradh> OK, your beta-reducer seems to work properly.
15:38:29 <Darius> well, it seems ok.  If you are inlining it should be. (\x.(\x y.y) 5 x) 10 => (\x y.y) 5 10
15:39:05 <Igloo> Bah, do proofs of correctness mean nothing to you people?  :-)
15:39:16 <Igloo> OK, admittedly a bit of a hand-wavey proof, but still  :-)
15:39:55 <Darius> You didn't define beta-reduce, which was what was in contention
15:41:25 <Igloo> Oh, good point. Just replace Var v with the expression anywhere in the tree except below a lambda that rebinds v
15:42:20 <Darius> That should (and seems to) work.  Not very efficient... but simple.
15:42:55 <Igloo> The whole thing fits on my screen - simplicity was the main aim  :-)
15:44:12 <Igloo> The only reason it's inefficient is lack of sharing, anyway, and that's tricky in Haskell
15:44:31 <Igloo> The other optimisation would be evaluating the RHS before substituting, which would work but make it non-lazy
16:00:09 <Igloo> Oh, it's even better than that. GHC will even check closedness for me (well, except prelude functions)
16:00:54 <Darius> Is this a DSL or something?
16:01:10 <Darius> er embedded
16:01:27 <Igloo> It's my trying to come up with another use for [| ... |n]  :-)
16:01:40 <Darius> ah
16:05:19 <Igloo> Oh, duh, I can apply eval to the RHS of a subst without losing strictness as it's being done by a lazy language
16:08:09 <Igloo> Oh, no I can't, it breaks my assumptions. Oh well.
16:09:09 * Igloo bounces
16:13:08 <Darius> Well, at least the binding to Kyra links and runs.  Now I have to work on the Haskell side.
16:17:35 <Darius> @eval joy "[dup i] dup i"
16:17:36 <lambdabot> out of fuel
16:32:50 <jao> join ocaml
16:33:19 <jao> oops sorry: missing slash! 
17:10:52 <tmoertel> @dict
17:10:53 <lambdabot> Supported dictionary-lookup commands:
17:10:53 <lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon @vera @web1913 @wn @world02
17:10:53 <lambdabot> Use "@dict-help [cmd...]" for more.
17:12:28 <Darius> @elements Wolfram
17:12:29 <lambdabot> *** "wolfram" elements "Elements database 20001107"
17:12:29 <lambdabot> wolfram
17:12:29 <lambdabot> Original name for {tungsten}.
17:16:57 <tmoertel> shapr: you around?
17:33:30 <tmoertel> @listmodules
17:33:30 <lambdabot> I have the following modules installed: ["chess","dict","eval","fact","fortune","hello","karma","more","searchml","state","system","topic","type","yow"]
17:33:42 <tmoertel> @type mapM
17:33:42 <lament> karma?
17:33:43 <lambdabot> mapM :: Monad a => (b -> a c) -> [b] -> a [c]
17:33:50 <lament> @karma
17:33:50 <lambdabot> I can't find the karma of nobody.
17:33:54 <lament> @karma lambdabot
17:33:55 <Darius> @karma lament
17:33:55 <lambdabot> lambdabot has a karma of 0
17:33:55 <lambdabot> lament has a karma of 0
17:34:08 <Darius> @karma shapr
17:34:08 <lambdabot> shapr has a karma of 0
17:34:21 <lament> weird.
17:34:23 <lament> @fact
17:34:23 <lambdabot> empty factoid, BZZZT, thank you for playing!
17:34:30 <lament> @fortune
17:34:31 <lambdabot> Debian Hint #14: If you would like to follow things happening to a package
17:34:31 <lambdabot> (for example, if you want to see bug reports, release notices, and other
17:34:31 <lambdabot> similar things), consider subscribing to it on the Package Tracking System.
17:34:31 <lambdabot> You can find out more about the PTS at:
17:34:31 <lambdabot> http://www.debian.org/doc/manuals/developers-reference/ch-resources.en.html
17:34:33 <lambdabot> (Section 4.11)
17:34:42 <lament> that's a long fortune.
17:34:53 * Darius sees PTS and thinks Pure Type System.
17:50:56 <seth_> won't fit in a cookie, definitely
17:51:50 <Igloo> Biiiiig cookie, mmmmmm
17:52:31 <dnm> code code code code code
17:52:42 * Igloo bounces
17:52:45 <dnm> So, is there any real advantage to using Hugs these days?
17:52:55 <Igloo> Startup time
17:53:06 <Igloo> Alternative error message may make more sense
17:53:15 <Igloo> Smaller installation size (I'm fairly sure)
17:53:34 <seth_> startup time difference is small
17:53:58 <dnm> Yeah, so far, all of those seem like relatively minor (though valid) advantages.
17:54:51 <Igloo> Well, what are teh real advantages of GHCi? The only major one I can think of is it's faster
17:55:14 <Igloo> It executes code faster, that is
17:55:19 <seth_> if you are installing ghc anyway, you get ghci, and don't need a separate interpreter package
17:55:30 <seth_> code that works with ghci compiles.
17:55:35 <seth_> so its more convenient
17:55:54 <seth_> small differences, but there aren't any large differences, I think
17:55:56 <Igloo> All Haskell 98 code compiles
17:56:30 <seth_> yes, theoretically
17:56:52 <seth_> however no perfect compiler has ever been written
17:57:00 <seth_> for _any_ language
17:57:14 <dnm> Hugs doesn't seem as well "supported" as GHCi does, in that there's more development going on with GHCi.
17:57:50 <Darius> let is why I use GHCi 
17:58:06 <Igloo> If GHC doesn't compile it you report a bug. If you were using GHCi you'd just have been scratching your head wondering why your seeminlgy good code didn't work
17:58:38 <seth_> Igloo: a highly academic approach.  but not much use if you are developing software
17:58:45 <Igloo> dnm: ghci probably has more experimental features, but other than that I disagree
17:58:51 <Igloo> Oh, portability is a major reason for hugs
19:18:47 <lowks_> seth_: yo dude
19:38:06 <mp00> hello
19:38:09 <mp00> anyon here ?
19:38:44 <mp00> some one can tell me what that does  : do char 'k' digit
19:39:38 <mp00> People of earth...
19:39:42 <mp00> need some info here
19:39:45 * Riastradh explorbs.
19:40:04 <mp00> pls
19:40:05 <Riastradh> 'do' is syntactic sugar over >>= and >>.
19:40:33 <Riastradh> do { a <- b; ...} --> b >>= \a -> ...
19:40:42 <Riastradh> do { expr; ... } --> expr >> ...
19:41:00 <Riastradh> Er, rather:
19:41:06 <Riastradh> do { a <- b; ... } --> b >>= \a -> do ...
19:41:16 <Riastradh> do { expr; ... } --> expr >> do ...
19:41:47 <emu> sugar rots your teeth
19:41:57 <Riastradh> Syntax causes cancer of the semicolon.
19:42:04 * Riastradh hugs Lisp.
19:42:10 <mp00> that was nice.. but what : do char 'k' digit  ... what is this doing ?
19:42:22 <mp00> converts 'k' to ascii or somethin ?
19:42:50 <Riastradh> RTFM -- http://www.haskell.org/ -> 'standards + standard libraries, et cetera'
19:43:33 <mp00> know one can just tell me what this expression do.. so I can get lost ? pls
19:44:03 <Riastradh> RTFM to find out what the 'char' function does.
19:44:04 <emu> standards schmandards
19:44:12 <emu> no one should use standards
19:44:16 <emu> we should just write to implementation
19:44:23 <emu> like Larry Wall
19:44:26 <emu> and the Perl Monkers
19:44:48 <emu> with their following of Awk-wards and Sed-imentaries
19:45:18 <emu> or python with sneaky fellows like guido
19:45:41 <emu> standards are bad mm'kay
19:45:52 <emu> you might assure a program works over several versions of the ... uh... interpreter
19:46:32 <mp00> :(.. my boss just gave 300 lines to debug.. and just need this one to keep going !! I'll appreciate your help
19:46:49 <Riastradh> Um, do you know Haskell?
19:46:57 <mp00> I did it in Uni mate.. 
19:47:01 <seth_> lowks_: still here?
19:47:12 <mp00> but forgot it .. the exams.. in about 5 mins
19:47:30 <Riastradh> OK, so you don't know Haskell anymore?
19:47:42 <emu> if you studied in Uni, you don't know it
19:47:47 <mp00> not really , the only thing I know is that I did it in uni
19:48:01 <Riastradh> You could have answered 'yes' to my original question.
19:48:01 <emu> I think this is a good general rule
19:48:08 <mp00> yeap , emu you r right !
19:48:33 <mp00> every language I know is because I learn it by my self
19:48:44 <mp00> uni always confused me !
19:48:52 <mp00> to theoritical for nothin'
19:48:56 <Riastradh> Learn Haskell yourself, then, and you'll be able to debug that code.
19:49:25 <emu> this could also be due to a profuse amount of alcohol consumed during uni studies
19:49:25 <mp00> I dont think that I will forget it if you tell me what the exp I gave you does
19:49:36 <mp00> heh.. you got me there
19:50:55 <mp00> and Imagine that the guy who lectured me haskell was thompson !
19:51:51 <lowks_> seth_: hey
19:52:00 * Riastradh points at the 'Gentle Introduction to Haskell' on the 'Haskell books and tutorials' page of haskell.org for mp00.
19:52:37 <mp00> I read The Haskell 98 Report
19:54:09 <mp00> hm.. 
19:54:19 <mp00> so  : do {char 'k' digit  } 
19:54:31 <mp00> means ... do the exp  char 'k' digit 
19:54:34 <mp00> right ?
19:55:37 <mp00> and do {char 'k' digit  } ==to===> Ascii(k)
19:55:39 <mp00> right ?
19:55:45 <Riastradh> Look it up!
19:56:11 <mp00> you mean test it in hugs ?
19:56:55 <Riastradh> No, I mean look it up in the specification of the Char module.
19:58:04 <Riastradh> Or if it isn't defined there, look in the modules that are imported; or search for 'char ::' and 'char ... =' in the same file.
20:00:03 <GreyLensmen> There is the data type Char and the Int->Char function chr.  char must be user defined.
20:00:31 <Riastradh> Indeed.
20:00:37 <mp00> data Char = ... 'a' | 'b' ... -- Unicode values
20:00:40 <Riastradh> Hence my second suggestion.
20:00:48 <Riastradh> No, that's 'Char', which is entirely different from 'char'.
20:00:53 <Riastradh> Haskell is case-sensitive.
20:00:58 <mp00> oh ok
20:01:20 <lowks_> seth_: got nhc98 working =)
20:03:06 <mp00> char  ->  ' (graphic<' | \> | space | escape<\&>) '  
20:05:09 <mp00> (Int -> Char)  -- digit to char
20:05:09 <mp00>       
20:05:59 <mp00> Riastradh . am I anywhere close ?
20:07:52 <Riastradh> Considering that you pasted seemingly random stuff, I don't know.
20:08:04 <mp00> hehe
20:08:14 <mp00> too tired of searching that mate 
20:08:20 <mp00> but I am still trying 
20:09:40 <mp00> ok , in datatypes.. I can only find Char and not char
20:09:49 <mp00> any clue.. on where I will find char
20:11:11 <lowks_> anyone here use o'haskell ?
20:12:23 <Riastradh> Look for 'char ::' or 'char ... =' in the file you're editing, or in the modules that that file imports.
20:13:03 <mp00> import ParseLib
20:17:10 <Riastradh> OK, now RTF ParseLib M.
20:21:43 <mp00> there is any build in command in hugs to do that or.. I have to find the RTF in Haskell's site ?
20:22:05 <Riastradh> You have to find the M for ParseLib.
20:23:27 <mp00> http://www.cse.ogi.edu/~hallgren/Talks/LHiH/compiler98/pfe.cgi?ParseLib
20:23:31 <mp00> this is what you mean ?
20:26:56 <mp00> my brain is ready to explode :(... to many programming languages in it.. do not allow haskell to enetr 
20:26:59 <mp00> enter
20:30:20 <mp00> hm.. people to borred to just tell me :
20:30:34 <mp00> do char 'k' digit 
20:35:05 <Jerub> whats up?
20:35:28 <mp00> fine ... just trying to make this people answer me a very simple question for them !
20:35:34 <mp00> do char 'k' digit 
20:35:58 <mp00> what this do to 'k' ?
20:36:26 <Jerub> I don't understnad
20:36:58 <mp00> do char 'k' digit 
20:37:05 <mp00> what this function do ?
20:37:29 <Jerub> I'm confused.
20:37:38 <Jerub> thats not a function definition, and its not a function in prelude.
20:37:39 <mp00> y is that ?
20:37:49 <mp00> yes I know
20:37:56 <mp00> I have it in a function
20:38:01 <mp00> trying to debug it
20:38:24 <mp00> dunno know though what it does
20:38:39 <mp00> the module I import is : Parselib
20:38:41 <Jerub> whats the full function definition?
20:39:19 <tmoertel> is "do char 'k' digit" exactly what's in the code ?
20:39:28 <mp00> yeap
20:39:35 <tmoertel> and that's causing an error?
20:39:42 <lowks_> anyone here use ohugs? 
20:39:58 <mp00> no!
20:40:03 <lowks_> hehe
20:40:04 <lowks_> okay
20:40:08 <mp00> I just need to see what it does to continue 
20:42:41 <mp00> ok , noone knows ? or none want to answer ?
20:43:47 <tmoertel> I don't think anyone knows what you're asking.
20:43:48 <mp00> wtf, anyone speaking english !! or I am in Takalu channel ?
20:44:53 <mp00> hm..yeap I guess 
20:45:28 <mp00> Riastradh probably know but he just to cryptic for me :(
23:12:45 <kyagrd> hello everyone
23:12:50 <kyagrd> Got a question
23:13:21 <kyagrd> instance Functor ((->)a) where fmap f g = f . g
23:13:55 <kyagrd> what is this ?
23:26:37 <seth_> what do you mean?  what is which part?
23:26:50 <kyagrd> "(->)a" stuff
23:27:30 <kyagrd> It is not Haskell 98 ... in only runs under hugs or ghc extiensions
23:28:13 <kyagrd> what kind of type does that mean ?
