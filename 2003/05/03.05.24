01:42:00 <Marvin--> Chilli
01:42:37 <ChilliX> Moin Marvin--
01:44:22 <Marvin--> eh, laptops for $450... wonder what kind of hardware they have
01:45:02 <ChilliX> probably crappy hardware (or slow)
01:45:14 <Marvin--> exactly
01:45:21 <Marvin--> but they had linux, not windows! :)
01:45:31 <Marvin--> http://www.infoworld.com/article/03/05/23/HNthailinux_1.html
01:45:43 <ChilliX> ok, that's cool 
01:46:32 * ChilliX spent quite some time to get his Dell work properly with Linux
01:46:55 <Marvin--> I have an Acer, works perfectly
01:47:30 <ChilliX> it was all Intel's fault anyway - not releasing the docs for the graphics chip
01:49:20 <Marvin--> I've got a twister 'k chip in mine, the X driver seems to work pretty nicely
03:52:01 <wli> graphics is a trainwreck
03:54:15 <wli> for some reason it's some kind of minefield of closed standards, closed hardware, and closed drivers
03:55:45 <wli> No idea about userspace.
04:11:41 <Janni> hi
05:01:00 <Vincenz> toc_
05:17:26 <Darius> _cot
05:20:54 <Darius> Dammit, dammit, dammit, dammit, dammit, dammit, dammit!
05:47:51 <shapr> Darius: ?
05:56:37 <Darius> building ghc
05:56:40 <shapr> oh
05:56:53 * shapr emails valium to Darius  ;-)
06:00:10 <Darius> ack! more spam
06:00:31 <Marvin--> heh, cool, Andreas Katsulas in an Enterprise episode
06:00:42 <shapr> Darius: hah
06:01:23 * esap has seen about two episodes of Enterprise.
06:03:27 <Marvin--> I heard it directly on the voice, and then I was confused 'cause I missed his name in the list of guest actors
06:03:49 * Darius was disappointed when the farmer ran out, fired the gun, and it was a laser bolt. They'd be mopping the Klingon up if it were a good 'ole shotgun.
06:04:01 <Marvin--> yeah :-)
06:06:33 * Darius thinks he needs to buy a bass guitar.
06:10:41 * wli bangs out extended nodemasks.
06:10:43 <wli> er
06:10:45 <wli> cpumasks
06:29:58 <o3> re
06:30:30 <Arnia> shapr: Around?
08:59:10 * Marvin-- is watching the we've-run-out-of-ideas-so-let's-throw-in-some-Borg episode of Enterprise
09:03:46 <Marvin--> "good ahead, I'll be fine", heh, Famous Last Words in Star Trek, or what? ;)
09:04:55 <Marvin--> s/good/go/
09:06:35 <fridge> instant death sentance isn't it?
09:07:08 <Marvin--> yeah
09:07:22 <fridge> prefer to keep sci-fi within the realm of books personally
09:08:07 <fridge> its easier to ignore inconsistant states that way
09:37:19 * Marvin-- rolls his eyes towards the ceiling
09:43:44 <mgoetze> Marvin--: ?
09:46:58 <Marvin--> Flocks was infected but made a complete recovery without any side effects at all
10:12:47 * mgoetze is starting to wonder whether it's worthwhile getting the next few enterprise episodes...
10:13:03 <pesco> mgoetze: Hi!
10:13:10 <mgoetze> hi!
10:13:21 <pesco> mgoetze: You have a PC right? Can you do me a favour?
10:13:45 <mgoetze> pesco: hm, i think i have one somewhere around here, burried beneath my workstations... :)
10:13:58 <pesco> mgoetze: Hm, anything little-endian will do.
10:14:04 * Marvin-- only has PCs :(
10:14:22 <pesco> What does the following yield?
10:15:22 <pesco> unsafePerformIO $ with (2000000::Float) $ \p -> peekArray (sizeOf (undefined::Float)) (castPtr p :: Ptr Word8)
10:15:52 <Marvin--> which modules do I need?
10:15:56 <pesco> load modules Foreign and Word8
10:16:00 <mgoetze> with ghc?
10:16:09 * mgoetze will let Marvin-- do this :)
10:16:10 <pesco> or hugs
10:16:41 <pesco> mgoetze: Which architecture are you on?
10:16:41 <Marvin--> I needed GHC.IOBase to get uPIO too
10:16:56 <pesco> Oh, I thought it was also in Foreign?
10:17:01 <pesco> It is in Hugs...
10:17:01 <Marvin--> I wonder which module to "really" import
10:17:43 <Marvin--> [0,36,244,73] in both hugs and ghci
10:17:48 <pesco> YES!
10:17:52 <Marvin--> heh
10:17:54 <mgoetze> pesco: i think all my haskell implementations are on i386, but i have mips, hppa, sun4m and ppc floating around as well
10:18:02 <pesco> Then it's byte-order-independent
10:18:16 <pesco> mgoetze: Oh, hm, only the haskell impls are of interest to me currently.
10:18:48 <pesco> My PowerPC returns the same list, and he's a big-endian.
10:19:05 <Marvin--> hrrm, I guess I have a too old version of hugs at the university
10:19:15 <mgoetze> pesco: you know, when you first contacted me specifically, i thought it had something to do with me being on hansenet as well. then i realized that you don't know that i'm on hansenet. :)
10:19:30 <pesco> mgoetze: Ah, heh.
10:19:31 <Marvin--> ah, there was a newer version
10:20:00 <Marvin--> pesco: uhm, I get  [73,244,36,0]  on sparc/Solaris... is that what you wanted?
10:20:20 <Marvin--> (you may have a different definition of byte-order-independent than me, but...)
10:20:37 <mgoetze> lol
10:20:56 <pesco> Marvin: Bah, no! damn.
10:21:21 <Marvin--> you can't escape the indians, eh, endians :)
10:21:32 <pesco> This is complicating matters significantly!
10:21:36 <elmex> am i a monad?
10:22:02 <pesco> Ook, when did that gruesome haskell.org logo appear?!
10:22:18 <Marvin--> pesco: recently... I don't like it either
10:22:37 <pesco> It looks like a stupid movie poster with the "featuring..." part.
10:23:05 <Marvin--> yes, and colours are just...bad :)
10:23:12 <pesco> "monadic effects" what the hell ist that?!
10:23:32 <Marvin--> it says "yeah, we can do side effects, but we don't like it!"
10:23:41 <pesco> Is the designer on this channel?
10:23:49 <Marvin--> I have no idea who made it
10:23:57 * pesco looks around
10:24:22 <pesco> Anyway, I must say I hate the slogan. It sounds entirely lame.
10:24:30 <pesco> There should be no slogan.
10:24:39 <pesco> Haskell is pure. And thus should be the logo.
10:24:57 <pesco> "A purely functional language" says it all!
10:25:44 <fridge> whee
10:26:07 <shapr> w00
10:26:19 <Marvin--> eep
10:26:22 <pesco> shapr! Did you receive my messages?
10:26:33 <shapr> pesco: yes, but I haven't had time to even look at them yet :-/
10:26:55 <pesco> shapr: Oh, that's no problem, I was just afraid they might have been lost.
10:27:15 <pesco> My mail system has been behaving a bit strange not long ago.
10:27:55 <shapr> I haven't had time to read much of my email lately
10:28:05 <shapr> I'll have some spare time tomorrow
10:28:23 * shapr disappears again
10:32:10 <pesco> Oh, pew, goodie, there are machine-independent float decoding functions in class RealFloat.
10:32:29 <pesco> I must go, byebye
11:23:11 <Igloo> Marvin: Make a better one then  :-)
11:23:16 <Igloo> Or find someone else to
11:23:34 <Marvin--> wasn't the old logo just a lambda? I liked it better :/
11:24:27 <Igloo> At teh risk of offending the author you could bring it up on the lists
11:36:43 <elmex> monads really give me some kind of hard time 
11:38:21 <Riastradh> What have you read to try to understand them?
11:39:07 <elmex> i guess, i do understand them now... but it really took me quite some tutorials and examples and try-and-error-code-hackings
11:57:06 <Marvin--> elmex: rest assured you're not alone in *that* club
11:57:11 <elmex> ;))
12:06:36 <elmex> when using Concurrent functions and States, how do i have synchronize the states over the threads?
12:06:55 <elmex> s/ have//
12:14:28 <elmex> my head hurts.. i need a break 
13:56:28 <elmex> hmm
13:56:43 <elmex> Marvin--: is there some way to sync states over some concurrent functions?
13:57:09 <Marvin--> eh?
13:57:39 <elmex> heh
13:58:32 <Marvin--> what do you mean?
13:58:41 <elmex> hmm
13:59:28 <Marvin--> you want concurrent programming with shared memory to apply to state monads?
13:59:44 <elmex> when i have multiple program threads (done by concurrent functions) and want to change _one_ state from all of them...
14:00:46 <Marvin--> what I mean is that there is no such thing as shared memory in haskell unless you use MVars... (unless you count the ST monad...)
14:00:56 <elmex> hm
14:01:28 <elmex> well, i only need a way to change a state which is accessible from multiple threads
14:02:15 <elmex> btw. what is the Reader and Writer stuff for?
14:02:45 <Marvin--> Reader is a read-only version of State, Writer is sort of a write-only version
14:03:01 <elmex> oh... ok
14:03:27 <Marvin--> the Writer state is a monoid (i.e. it has a neutral element and an associative operator), every time you 'tell' something to the Writer, it will apply the operator to the current state and the new value, the result becomes the new state
14:03:50 <Marvin--> lists are monoids, it's probably the most common case
14:04:35 <elmex> hmm... i'm just curious what the ReaderT is used for in lambdabot
14:05:27 <Marvin--> > snd $ runWriter (tell [3,4] >> tell [1,5] >> tell [7,7])
14:05:27 <Marvin--> [3,4,1,5,7,7]
14:05:42 <elmex> oh...
14:05:43 <elmex> ok
14:06:38 <elmex> is there documentation for Writer and Reader stuff anywhere? i mean more than that poor 'reference' on GHC site
14:06:57 <Marvin--> not that I know of... don't they refer to a paper?
14:07:40 <elmex> hmm... that paper sounds much too 'Functional Programming with Overloading and Higher-Order Polymorphism'
14:08:08 <Marvin--> well, it's probably a good read in any case :)
14:09:04 <elmex> hm...ok
17:15:30 <inkedmn> lament!
17:15:39 <lament> inkedmn!
17:15:54 <inkedmn> so it looks like i'm going to give haskell another go...
17:18:05 <inkedmn> because i REALLY want to learn functional programming (still ;)) and, by and large, haskell seems to be the most highly recommended language
17:20:55 <lament> there aren't many alternatives really
17:21:04 <lament> if you want to do it, you might as well do it the hard way :)
17:21:33 <inkedmn> heh
17:21:44 <inkedmn> well, there are ML dialects, Lisp, Scheme, etc.
17:21:54 <lament> ah, but they all cheat!
17:22:01 <inkedmn> it was basically a toss-up between haskell, lisp, and *ml
17:22:02 <lament> none of them is purely functional.
17:22:18 <lament> Yes they have functions, but then so does Python.
17:22:21 <emu> lisp isn't a functional language :-P
17:22:32 <lament> emu: And ML is?
17:22:36 <emu> sure
17:22:49 * inkedmn didn't intend on sparking a debate...
17:22:51 <lament> hm, why?
17:23:02 <emu> attitude. MLers want to be functional, lispers couldn't care less
17:23:05 <lament> hahaha
17:23:07 <inkedmn> heh
17:23:07 <lament> ok :)
17:23:17 <emu> of course you can program functionally in both
17:23:24 <inkedmn> does haskell have it's own newsgroup yet?
17:23:29 <emu> c.l.haskell i imagine
17:23:35 <emu> if you dare
17:24:10 <inkedmn> it's proposed, but doesn't actually exist yet
17:36:57 <steveh> a lot of haskell stuff goes on at comp.lang.functional
17:37:56 <inkedmn> yeah, so i've read...
17:38:11 * steveh doesn't grok the big deal about purity anyway
17:38:19 <inkedmn> heh
17:38:27 <inkedmn> '1337 cred'
17:38:56 <steveh> maybe I should look into an ML variany
17:39:12 <steveh> all I've done are Lisp and Haskell, and I'm not too good with either of those :)
17:39:34 <steveh> though I daresay programming Haskell will have made me a better Lisper if I go back and use it more
17:40:11 <inkedmn> well, i'm starting CS classes soon, and i'm already pretty comfortable with OO concepts, and functional programming seems intersting to me
17:40:21 <inkedmn> figured it'd be good to at least be familiar with it
17:41:10 <emu> steveh: yeah, you'll feel so free ;)
17:41:15 <emu> I can use LOOP when I want to!
17:42:00 * steveh lacks inspiration
17:42:11 <steveh> all the projects I can think of are either too big or too small
17:46:43 <emu> write an editor
17:47:23 <steveh> in haskell?
17:47:54 <lament> sounds like an extremely painful project
17:48:01 <steveh> hmm
17:48:34 <steveh> maybe an ID3 editor
17:48:39 <emu> hmm
17:48:50 <emu> i meant a code editor =)
17:48:56 <Igloo> A GTK editor should be very simple, but not very interesting
17:48:57 <emu> HEmacs
17:49:06 <steveh> right now I don't care about gui
17:49:14 <emu> neither does emacs
17:49:16 <steveh> guis and me don't get along well
17:49:26 <steveh> aah, a phone call
17:49:27 <steveh> afk
18:00:00 <inkedmn> ok, here's a question for you guys...
18:00:25 <inkedmn> is there a directory that hugs looks in when i try to load a file (without giving the whole path)?
18:00:32 <inkedmn> sorta like a /usr/include, i guess?
18:01:21 <themus> join #redhat
18:01:32 <inkedmn> themus: / :)
18:01:46 <inkedmn> would /usr/lib/hugs/lib/ be it?
18:03:30 <themus> hello inkedmn sorry about that.
18:04:57 <inkedmn> themus: heh, no big deal, i was just messing w/ you :)
18:05:56 <themus> :)
18:24:52 <inkedmn> || == 'or' in haskell, yes?
18:47:08 <saz> yes
18:52:16 <inkedmn> cool
19:14:06 <inkedmn> can somebody translate this into english for me?
19:14:07 <inkedmn> memberOrd :: Ord a => [a] -> a -> Bool
19:14:55 <inkedmn> i'm trying to figure out what Ord does...
19:45:08 <tmoertel> inkedmn: forall types a that can be ordered, given a list of a's and another a value, return a boolean
19:46:18 <inkedmn> so "Ord a" is "an instance of Ord called 'a'"?
19:47:08 <Riastradh> More like 'for all types for which there is an instance of Ord, and which we'll call 'a' in this type signature.'
19:47:28 <inkedmn> hmm...
19:47:42 <inkedmn> ok, i get it
19:48:41 <Riastradh> It's like in mathematics -- forall x, x elt D: x = blah -- where D is the set of all types for which there is an instance of Ord.
19:51:44 <inkedmn> i'm going through this Beginning Haskell thing on ibm developerworks, he uses that as one of his functions
19:51:56 <inkedmn> but doesn't say shit about how it actually works
19:52:16 <inkedmn> so i'm assuming it'll be covered in more detail later or something
20:15:10 <inkedmn> dammit, this guy moves way too fast...
20:15:19 <inkedmn> one page i get it, next page i'm lost
20:19:43 <inkedmn> qsortF :: (a -> a -> Bool) -> [a] -> [a]
20:19:43 <inkedmn> qsortF f [] = []
20:19:43 <inkedmn> qsortF f (x:xs) = qsortF f [y | y<-xs, f y x] ++
20:19:43 <inkedmn>                   [x] ++
20:19:43 <inkedmn>                   qsortF f [y | y<-xs, not (f y x)]
20:20:11 <inkedmn> ok, i don't understand what this "f" business is in the list comprehensions
20:32:26 <tmoertel> inkedmn: f is the partioning predicate; this qsort lets you pass different predicates to it to use different partioning schemes
20:34:02 <inkedmn> i'm sorry, i don't understand what you mean...
20:34:25 <tmoertel> inkedmn: consider f y x = x < y
20:35:08 <inkedmn> so it returns a boolean?
20:35:12 <tmoertel> yes
20:35:20 <inkedmn> hmm, ok
20:35:22 <tmoertel> now, consider  [y | y<-xs, x < y]
20:35:41 <inkedmn> ok
20:35:54 <tmoertel> and putting it all together:
20:36:13 <tmoertel> [y | y<-xs, x < y] ++ [x] ++ [y | y<-xs, not (x < y)]
20:36:53 <tmoertel> let xs = [2,1,1,3] and evaluate the above line
20:38:44 <thelsdj> bah only been using haskell a few hours and i'm already fed up with the error messages hehe
20:38:51 <inkedmn> heh
20:38:54 <tmoertel> (ignoring the recursive calls to qsortF for now)
20:45:45 <thelsdj> i think i'm just messing up syntax here, atleast i think thats all it is, i could be wrong:
20:46:02 <thelsdj> putStrLn "The sum is " ++ show(foldr (+) 0 (map read nums))
20:55:33 <vardhan> hi, anybody else who feels similiarity in haskell and GNU-Make's variables/functions ?
23:11:07 <steveh> [02:06]  <Hullabalo> hi anyone know how i cant start a dead puter up  via another computer?
23:11:15 <steveh> [02:06]  <Hullabalo> i have ethernet cable
