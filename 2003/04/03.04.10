04:17:10 <buggler> clausen!!
04:20:05 <clausen> gday buggler
04:37:57 * Igloo reads the darcs post in h-cafe and has to check it's not by dark
05:08:27 <shapr> whee
05:43:48 <d33p> anyone know how to get hugs to show cost information?
05:43:59 <Igloo> :set +s
05:44:47 <d33p> ahh
05:44:50 <d33p> ty
05:50:13 <d33p> Igloo: hmm, you know how to get the ==> stuff?
05:50:39 <Igloo> I don't even know what you're talking about
05:50:58 <Igloo> If you mean reduction steps I don't think you can
05:51:08 <d33p> oh, yea.. reduction steps
05:51:10 <d33p> ahh
05:54:33 * shapr has a fit of alien reduction
05:54:44 <shapr> y0 kosmikus 
05:54:49 * shapr bounces happily
05:54:56 <shapr> it's morning, or some facsimile thereofe
06:15:31 --- mode: ChanServ set +v Janni
06:15:33 <Janni> hiyah!
06:15:49 <shapr> y0
06:18:26 <Janni> is yO a 1337 word?
06:18:34 <shapr> I guess so
06:18:42 <Janni> err, i mean y0
06:18:52 <shapr> It's just silly.
06:19:05 <shapr> Gutentag Janni.
06:19:07 <shapr> or maybe
06:19:13 <shapr> GruﬂGott
06:19:18 <Janni> Yeah, but I like 1337...
06:21:03 <Janni> Bu7 n07 1n 73h w4Y 1337 p30p13Z 1iK0Rz 1337.
06:21:11 <Janni> Wheew...
06:21:14 <shapr> yow
06:21:18 <shapr> @fortune
06:21:19 <lambdabot> Never offend people with style when you can offend them with substance.
06:21:19 <lambdabot> 		-- Sam Brown, "The Washington Post", January 26, 1977
06:21:36 <Janni> Fitting :)
06:21:41 <shapr> truly
06:22:13 <Janni> lambdabot: It seems like you really 0wnZ artificial intelligence!
06:22:14 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
06:24:31 <Janni> But I'm not so facinated of just replacing the letters but of such _really_ silly constructs like "1iX0Rz". That's like soo cool :)
06:24:57 <shapr> it is entertaining
06:32:30 <d33p> how do i import a module?
06:33:24 <shapr> import Data.List
06:34:44 <shapr> @type import
07:00:43 <d33p> shapr: okay.. i dont understand
07:00:54 <d33p> import Data.List /
07:00:56 <d33p> import Data.List ?
07:05:25 <shapr> d33p: what module do you want to import?
07:05:41 <shapr> d33p: http://kungens.kemi.fi/~shae/src/haskell/Mandelbrot-0.1.hs
07:05:56 <shapr> near the top of that url there are three lines each starting with "import"
07:06:04 <shapr> those are module imports
07:07:49 <SyntaxPolice> shapr: unless you think its dumb, I"m going to complain about the wiki on haskell-cafe.
07:09:51 <shapr> I say go for it.
07:10:03 <Igloo> Is it returning blank pages again?
07:10:06 <shapr> yup
07:11:04 <d33p> shapr: okay, i think i'll take a look at the code
07:11:16 <d33p> thats what i need afaik
07:12:24 <shapr> d33p: haven't I seen you on #python before?
07:12:31 <shapr> or maybe on #java?
07:12:37 <d33p> shapr: yea, #python
07:12:50 <SyntaxPolice> shapr: or is someone in particular in charge of the wiki?
07:13:30 <shapr> Yes, but I'm not sure who right now.
07:13:42 <shapr> I think it was John Meacham at one point.
07:14:08 <SyntaxPolice> OK I'll just post to haskell-cafe
07:15:59 <shapr> I wonder if we could hack together a simple HaskellWiki plugin for HWS-WP
07:16:23 <SyntaxPolice> whats HWS-WP?
07:16:39 <shapr> Haskell Web Server - With Plugins
07:16:48 <shapr> HWS is by Simon Marlow
07:16:55 <shapr> Marvin-- added the plugin stuff
07:16:59 <SyntaxPolice> does moin happen to have an xmlrpc interface?
07:17:12 <shapr> I'm not sure
07:17:15 * shapr looks
07:37:35 <shapr> @searcml wiki
07:37:36 <lambdabot> Sorry, I don't know the command "searcml", try "lambdabot: @listcommands"
07:37:41 <shapr> @searchml wiki
07:37:41 <lambdabot> 1704 1684 1423 1404 1335 1330 1329 1318 1134 607 588 569 540 152 126
07:37:46 <shapr> @showml 1704
07:37:46 <lambdabot> >| On a side note: why not toss up a TH page on the Haskell wiki,
07:37:46 <lambdabot> >especially if
07:37:46 <lambdabot> >| the answer to my second question is no?
07:37:46 <lambdabot> >
07:37:46 <lambdabot> >by all means go ahead.
07:41:28 <Arnia> shapr: You're so proud :)
07:43:37 <shapr> Arnia: truly I am :-)
07:44:06 <shapr> I'm sort of stuck on this bayesian statistics code though
07:46:00 <SyntaxPolice> @showml 1684
07:46:00 <lambdabot> Datatypes can take contexts.  Currently TH dies if you try to reifyDecl a 
07:46:00 <lambdabot> datatype with a context e.g.
07:46:00 <lambdabot> import Language.Haskell.THSyntax (runQ)
07:46:01 <lambdabot> data (Eq a) => Tree a = Leaf a | Branch (Tree a) (Tree a)
07:46:35 <SyntaxPolice> @searchml moin
07:46:46 <shapr> @searchml moinmoin
07:46:46 <lambdabot> 1423
07:46:56 <shapr> @showml 1423
07:46:57 <lambdabot> There have been several suggestions that we switch from the present 
07:46:57 <lambdabot> pywiki, which has proven rather unstable, to something a little more 
07:46:57 <lambdabot> modern and reliable.  IIRC, the suggestions have been
07:46:57 <lambdabot>   MoinMoin  http://moin.sourceforge.net/
07:46:58 <lambdabot>   UseMod    http://www.usemod.com/cgi-bin/wiki.pl?UseModWiki
07:47:09 <SyntaxPolice> @more
07:47:09 <lambdabot> although I'm sure there are many possibilities.
07:47:09 <lambdabot> It looks to me like UseMod would be a reasonable choice, so unless there are any objections I plan to attempt migration in the near future (modulo work demands, of course).
07:47:11 <lambdabot> Any comments?
07:47:34 <SyntaxPolice> shapr: why would it find moinmoin and not moin?
07:48:04 <shapr> I used map toLower $ words on the emails
07:48:15 <shapr> the built a finitemap of keywords
07:48:33 <shapr> it doesn't search for subkeywords
07:48:39 <shapr> you could extend the code if you want :-)
07:48:40 <SyntaxPolice> ahh
07:53:32 <shapr> it would be nice to do a full regex search on subjects though
07:53:57 <shapr> the @searchml command could be turned into a real archive search without too much trouble
08:00:56 <Igloo> Bah, CSE isn't meant to make things slower, dammit!
08:12:25 <Smerdyakov> Haha. I know why it does!! (Hooray for compilers class)
08:13:32 <Igloo> :-)
08:15:06 <Igloo> What reason were you thinking of OOI?
08:16:44 <Smerdyakov> Increasing register pressure by saving more values for longer times.
08:17:54 <Igloo> Oh, probably not in this case - it's probably all in the heap (I'm working on Haskell)
08:19:26 * d33p is away: Zzz
08:20:02 <Smerdyakov> You still have to save a pointer to the re-used heap value....
08:26:04 <Igloo> I'm no expert, but I don't think I can say much about registers
08:28:55 <Smerdyakov> Hm. Not being able to say much about registers is supposed to be surprising given the fact that you're not expert, since you used "but"?
08:29:50 <d33p> yeah, thats redundant
08:32:55 <Igloo> Oh, I mean "I don't think you can say much about registers by looking at what I'm doing to the Haskell", but that prediction may be wrong as I'm not an expert in how compilatino works
08:33:19 * Igloo doesn't mean prediction there either but I can't think of the word I do want
08:36:27 <d33p> hypothesis
08:37:46 <Smerdyakov> Oh, well, if you're breaking the compiler, then anything is possible. ;-)
08:39:13 <Igloo> No, I'm doing the CSE before it gets compiled
08:40:17 <Igloo> And yes, that's the one, ta deep  ;-)
08:40:36 <d33p> np :)
08:41:14 <Smerdyakov> If you are CSE'ing a very simple to compute expression, then the extra register or stack slot needed to store the result is probably adding more overhead than recomputing it does.
08:41:44 <Igloo> Yeah, the problem is it's not easy to codify that
08:46:49 <delYsid> hmm, I'm trying to remember the name of a guy here who helped me tremendously by providing his comp-intro book in text format to me.
08:47:00 <delYsid> his nick was something with -x in it, does anyone remember him?
08:47:34 <d33p> zen-x?
08:47:34 <d33p> he chills in #c
08:47:48 <delYsid> er, chill
08:47:57 <delYsid> wasn't that Chilli-X or something?
08:48:07 <d33p> hmm..
08:48:11 <d33p> dont know a chilli-X
08:48:16 <delYsid> hmm
08:48:21 <delYsid> shapr?
08:48:31 <Igloo> chilli/chillx does hang aroudn here sometimes
08:48:47 <delYsid> ahh yeah, than that was him
08:49:10 <delYsid> do you by any chance know his realname?
08:49:18 <Igloo> Manuel Chakravarty give or take
08:49:23 <delYsid> Manuel M. T. Chakravarty
08:49:29 <delYsid> cool, thanks
08:49:34 <Igloo> Yup, http://www.cse.unsw.edu.au/~chak/
08:49:37 * delYsid needs that for an Acknowledgement section.
08:57:19 <shapr> delYsid: yes?
08:57:29 <delYsid> resolved already.
08:57:32 <shapr> oh ok
08:57:34 <shapr> hi delYsi!
08:57:39 <shapr> wassup?
08:58:01 <delYsid> finalizing my literate haskell program, to publish it on my (soon to be uploaded) revamped delysid.org
08:58:06 <shapr> cool!
08:58:23 <shapr> I'm trying to figure out Bayesian statistics so I can get this Paul Graham style spam filter working...
08:58:28 <delYsid> I've decided to add an acknowledgement section, and so I had to find out who chilli was :)
08:58:59 <shapr> I wanna see it when you get the new version online
08:59:20 <delYsid> runtest.sty was also revamped by a tex-guru friend of mine.
08:59:45 <delYsid> Now I can just say \begin{heval}haskell-expression\end{heval}
08:59:54 <shapr> automatically run unit tests?
08:59:57 <delYsid> yup
09:00:02 <delYsid> not really unit tests...
09:00:02 <shapr> wow cool
09:00:13 <shapr> demonstration output
09:00:14 <delYsid> I can run haskell code from latex, and include the code + output in the resulting file
09:00:19 <shapr> very nifty
09:00:40 <shapr> I've been thinking of some sort of combination of literate code and unit tests
09:00:45 <delYsid> hmm, how do I include a # sign in tex output?
09:00:47 <shapr> and wikis
09:00:59 <shapr> sadly, I know nothing about tex :-(
09:01:14 <delYsid> shapr: Stunden.lhs is just that, without the wiki...
09:01:19 <shapr> Igloo might know
09:01:48 <Igloo> Not OTTOMH - does \# work?
09:02:04 <Igloo> Or try $#$ or $\#$
09:02:21 <shapr> Have you seen Ward Cunningham's FIT at http://fit.c2.com/ ?
09:02:35 <shapr> it's sort of a unit-test wiki for your code
09:02:54 <shapr> I think there's a really big idea hiding in there somewhere.
09:04:34 <shapr> the advantage of unit-test wiki is that you or others can edit/add/improve unit tests and immediately see the results
09:08:16 <delYsid> shapr: http://delYsid.org/Stunden.{ps,pdf,tar.gz}
09:08:37 <shapr> cool, thanks
09:08:54 <delYsid> You need the tar.gz to build it, the ps/pdf should be enough for reading it
09:09:06 <delYsid> (apart from the fact that runtest.sty is not quoted in the ps/pdf version)
09:09:09 <shapr> I'll grab the tgz
09:10:17 <shapr> delYsid: hey, do you have some sort of key combo that dumps out begin and end times?
09:10:29 <shapr> hm
09:10:37 <delYsid> you mean for emacs, for the timesheet?
09:10:38 <delYsid> no...
09:10:48 <shapr> I need a timesheet :-)
09:10:55 <delYsid> well, use mine :)
09:10:57 <shapr> yay!
09:11:38 <shapr> I bet I can dump the start and stop times from timestamp
09:11:38 <delYsid> I'm redoing delysid.org with WML now, that seems to be real fun.
09:11:50 <shapr> wml? for mobile phones?
09:11:54 <delYsid> nah
09:12:01 <delYsid> Web META Language
09:12:03 <shapr> oh
09:12:09 <shapr> what is it?
09:12:26 <delYsid> hard to describe, basicly its a 7-stage preprocessor
09:12:53 <shapr> url?
09:12:57 * shapr googles
09:13:01 <delYsid> probably one of the easiest example to comprehend would be:
09:13:02 <delYsid> <define-tag foldoc>
09:13:02 <delYsid> <A href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=%0">%0</A>
09:13:03 <delYsid> </define-tag>
09:13:06 <delYsid> now you can just say
09:13:10 <delYsid> <foldoc CGI>
09:13:22 <shapr> what's the CGI for?
09:13:46 <delYsid> its the word which should be linked to foldoc :)
09:13:52 <shapr> oh
09:13:54 <shapr> neat
09:14:17 <delYsid> you can also define a kind of template for your pages, and you have a include system, and the ability to execute perl and so on.
09:14:53 <delYsid> anyway, it seems to me the right compromise between pure xml/xslt and static pages...
09:15:24 <shapr> pure xslt is a pain
09:15:26 <delYsid> oh my, I'm heavily OT again, sorry guys.
09:15:30 * shapr shrugs
09:16:43 <shapr> delYsid: hey, haskell-libs.sf.net is hopping
09:17:00 <delYsid> ah yeah, and you can do funky functional stuff like:
09:17:01 <delYsid> <define-tag factorial whitespace=delete>
09:17:01 <delYsid> <ifeq %0 1 1 <multiply %0 "<factorial <substract %0 1 /> />" /> />
09:17:01 <delYsid> </define-tag>
09:17:02 <delYsid> <factorial 6 />
09:17:05 <shapr> Peter Simons contributed an email parser
09:17:12 <shapr> so I wrote a mailing list search plugin for lambdabot 
09:17:25 <shapr> and I'm trying to use the same code for a spam filter
09:17:34 <shapr> you know anything about Bayesian statistics? :-)
09:17:49 <delYsid> nope
09:17:53 <shapr> neither do I
09:18:07 <delYsid> I've only heard that spamassasin does some bayesian stuff these days.
09:18:14 <shapr> the idea is simple
09:18:49 <delYsid> wow!  so many people on freenode use erc, its, amazing!
09:18:51 <shapr> make a map of the words and the number of times they occur in both spam and nonspam dirs
09:18:56 <shapr> hey, ERC rocks
09:19:39 <shapr> then combine those into a third map
09:20:18 <shapr> PG gives some CL code
09:20:22 <shapr> to do the combination
09:20:30 <shapr> but I don't understand *what* it's doing exactly.
09:20:36 <delYsid> ah
09:20:42 <delYsid> no specs for the combination-criteria?
09:21:05 <shapr> it's a standard Bayesian probability thingy
09:21:08 <delYsid> if you give me a pointer to that CL code, I might try my luck at decyphering it
09:21:15 <shapr> (let ((g (* 2 (or (gethash word good) 0))) (b (or (gethash word bad) 0))) (unless (< (+ g b) 5) (max .01 (min .99 (float (/ (min 1 (/ b nbad)) (+ (min 1 (/ g ngood)) (min 1 (/ b nbad)))))))))
09:21:16 <shapr> :-)
09:21:26 <shapr> I think I've ported it to Haskell
09:21:34 <shapr> but the ported code still looks like CL
09:21:41 <delYsid> eeeeek
09:21:47 <delYsid> you need to learn to indent lisp if you past it
09:21:53 <delYsid> in that form, no one can make anything of it
09:22:01 <delYsid> s/past/paste/
09:22:10 <shapr> it's seven lines indented
09:22:13 <shapr> anyone mind if I paste?
09:22:23 * shapr listens
09:22:26 <shapr> guess not
09:22:29 <shapr> (let ((g (* 2 (or (gethash word good) 0)))
09:22:29 <shapr>       (b (or (gethash word bad) 0)))
09:22:29 <shapr>   (unless (< (+ g b) 5)
09:22:29 <shapr>     (max .01 
09:22:29 <shapr>          (min .99 (float (/ (min 1 (/ b nbad))
09:22:29 <shapr>                             (+ (min 1 (/ g ngood))
09:22:31 <shapr>                                (min 1 (/ b nbad)))))))))
09:22:44 <mgoetze> shapr: you're the boss around here, anyway :P
09:22:52 <shapr> mgoetze: not the boss, just the organizer
09:22:56 <shapr> big difference :-)
09:23:51 <delYsid> eek, to many min/max in there....
09:24:03 <shapr> I think I've ported it to Haskell
09:24:11 <delYsid> god, I really should take some practice with some basic programming building blocks...
09:24:43 <shapr> yah, I learned *lots* from the Haskell Algorithms book.
09:24:58 * delYsid doesnt want to hear that now.
09:24:59 <shapr> I think self-taught means you have to put a lot of focus on the basics, otherwise you miss them.
09:25:27 * esap still doesn't undestand even the simplest basic programming building blocks. For example, I don't understand variables.
09:25:27 <delYsid> shapr: yeah, I observe that too.
09:25:39 <shapr> the stuff you learn in the Haskell Algorithms book applies to any language :-)
09:25:55 <delYsid> shapr: good for, someone with, working eyes.
09:25:57 <shapr> I'd like to have a ProgrammingWiki that covered the basics
09:26:02 <shapr> delYsid: yes :-(
09:26:15 <shapr> I could ask the authors if they'd give you an electronic copy
09:26:23 <delYsid> that would be, great!
09:26:34 <delYsid> bird did, btw.
09:26:37 <shapr> I've already sent them some questions/additions/changes to the Book
09:26:39 <shapr> cool!
09:26:47 <shapr> I wonder if ChilliX talked to him :-)
09:27:01 <delYsid> From my mail, I didnt see any indication...
09:27:02 <shapr> did you read Bird's book?
09:27:05 <shapr> I haven't read it.
09:27:19 <delYsid> he ignored my request for about a month, then he asked me to explain it again.
09:27:25 <delYsid> 10 minutes later, I had the pdf.
09:27:28 <shapr> well, at least he got back to you
09:27:29 <shapr> cool :-)
09:28:01 <delYsid> re reading, no, I didn't completely read it.  Just started...
09:28:16 <delYsid> I have to say that I found Chilli's book much more helpful.
09:28:34 <delYsid> but thats probably because Bird uses a much more academic style... (iirc)
09:28:36 <shapr> I can't get a copy of Chilli's book
09:28:42 <shapr> afaik
09:28:45 <shapr> only sold in .au
09:29:57 <delYsid> but you're right, the one thing which is missing in my Digital-intelligence-collection is definitely a book about algorithms.
09:30:24 <shapr> SICP has some stuff about that
09:30:55 <delYsid> erm...
09:30:56 <delYsid> not really.
09:31:24 <delYsid> I've read sicp two times, and listened to the MIT lectures about 3 times.  not much algorithms in there.
09:31:29 <shapr> yah, I guess it's more meta-algorithm
09:31:39 <esap> SICP is about concepts.
09:31:52 * shapr agrees
09:32:30 <esap> Though there is much that is missing. But I guess one book cannot include everything.
09:35:18 <delYsid> I'm still amazed by the chapter/lecture MetaCircular Evaluator, that lecture he did in a very mythic way :)
09:35:35 <shapr> I've only downloaded part of one lecture
09:35:47 <shapr> how much was it to get the whole drive full?
09:35:49 <esap> delysid: I never saw the lecture, but the metacircular evaluator chapter was fun.
09:35:50 <shapr> $80 or so?
09:36:21 <delYsid> http://fzidpc73.tu-graz.ac.at/lectures
09:36:23 <esap> delysid: But I think the best part of SICP are the footnotes.
09:36:31 <delYsid> I think it was 06A.rm, but not sure now
09:36:48 * shapr leeches
09:39:44 <delYsid> er
09:39:48 <delYsid> 07B.rm it is
09:39:53 <shapr> so, I've turned that CL code into six lines of haskell
09:40:03 <shapr> anyone mind if I pasted six lines?
09:40:16 <shapr> ok then
09:40:21 <shapr> calcGB ngood nbad goodFM spamFM wrd = 
09:40:21 <shapr>     let 
09:40:21 <shapr>     g = if elemFM wrd goodFM then fromIntegral $ fromJust $ lookupFM goodFM wrd else (0.0)
09:40:21 <shapr>     b = if elemFM wrd spamFM then fromIntegral $ fromJust $ lookupFM spamFM wrd else (0.0)
09:40:21 <shapr>     in
09:40:22 <shapr>     max 0.01 $ min 0.99 $ (min 1 $ b / nbad) / (min 1 $ b / nbad) + (min 1 $ g / ngood)
09:40:36 <shapr> that looks right...
09:40:46 <shapr> but it's not haskellish
09:43:21 <Igloo> Do you want more brackets there?
09:44:26 <Igloo> And why are the bounds 0.01 and 0.99 and not 0 and 1 (which would be free if you want the brackets I think you do)
09:44:29 <Igloo> ?
09:45:10 <delYsid> 07A.rm actually 
09:45:15 <delYsid> bah, I should take a nap
09:47:33 <Igloo> Eeek, no System.setEnv?
09:49:33 <delYsid> "feeping creaturism"? Muahahaha
09:56:32 <delYsid> yah, prolog is the next thing I want to at least understand as far as being able to write a simple program without copy&paste
10:00:13 <shapr> delYsid: where'd you find feeping creaturism? :-)
10:00:33 <shapr> yah, I'm going for logic programming after I become fluent with Haskell.
10:00:48 <shapr> the next release of lambdabot will be the "feeping creaturism" release.
10:01:20 <shapr> Igloo: I just converted that directly from the common lisp code in paul graham's "plan for spam" article
10:02:00 <Igloo> shapr: Well (min 1 $ b / nbad) / (min 1 $ b / nbad) is 1 unless I'm misreading it
10:02:20 <shapr> oh
10:02:23 <shapr> good point :-)
10:03:05 <shapr> time for exercise, bbl
10:34:34 <cptchaos> hi, does anyone know a haskell module for interfacing  with gnuplot, or something similar?
11:38:18 <Igloo> Oooo
11:38:26 <Igloo> Haskell 1.2 was all different
11:42:17 <Igloo> Grrr, setEnv disappeared between the '92 and '96 releases but the list archives only go back to '97
11:44:36 <Marvin--> heh
11:45:44 * Marvin-- swears at pattern matching
11:52:46 <Marvin--> I really don't know how to attack this :-/
11:54:27 --- mode: ChanServ set +v Marvin--
11:55:03 <Igloo> What's that?
11:55:21 <Marvin--> the overlapping pattern matching
11:55:37 <Igloo> Oh, the whole thing?
11:55:42 <Marvin--> I created a little example for myself with four branches (the fourth being just _ _)
11:55:55 <Marvin--> f1 :: C -> E -> Int
11:55:55 <Marvin--> f1 (C2 (C3 x))    y = 1
11:55:55 <Marvin--> f1 (C2 x)         E2 = 2
11:55:55 <Marvin--> f1 x              E2 = 3
11:55:55 <Marvin--> f1 x              y = 4
11:55:59 <Marvin--> not so complicated, right?
11:56:27 <Marvin--> C ::= C1 | C2 C | C3 D,  D ::= D1 | D2 C,  E ::= E1 | E2 | E3
11:56:28 <Igloo> What are C and E?
11:56:35 <Igloo> OK
11:56:56 <Marvin--> so I tried to expand it manually, and use quickcheck to verify that I'm correct
11:57:04 <Igloo> Give me a sec
11:57:20 <Marvin--> and I think I have 13 branches in the supposedly equivalent f2
11:58:06 <Igloo> So if I understand correctly you want
11:58:06 <Igloo> f1 (C2 (C3 x))    y = 1
11:58:07 <Igloo> f1 (C2 x@(C1 _))  E2 = 2
11:58:07 <Igloo> f1 (C2 x@(C2 _))  E2 = 2
11:58:07 <Igloo> f1 x@(C1 _)       E2 = 3              
11:58:09 <Igloo> f1 x@(C3 _)       E2 = 3
11:58:11 <Igloo> f1 x              y = 4
11:58:14 <Igloo> ?
11:59:06 <Marvin--> yes, but the final  x y  still overlaps with all the others :)
11:59:20 <Igloo> Oh, yes, not thinking  :-)
11:59:38 <Marvin--> and that gives me something like eight more branches
11:59:54 <Igloo> So presumably you want a function that takes a list of things matched by previous patterns, the current pattern and returns a list of new patterns?
12:00:23 <Marvin--> yes, and I sort of want "the most general" patterns
12:00:32 <Marvin--> so it's not expanded too deeply
12:00:42 <Igloo> I was about to say it's not too bad if you do something like expand to deepest depth
12:01:22 <Marvin--> hmm, maybe I can cheat instead
12:01:32 <Marvin--> this is all going to be FOL in the end
12:01:57 <Marvin--> so maybe I can say   x /= C3 y & E2 /= y ->  ...
12:03:24 * Igloo knows not of FOL
12:03:54 <Marvin--> first order logic?
12:04:58 <Marvin--> I could end up with something like...
12:05:00 <Marvin--> f1(c2(c3(x)), y) = 1
12:05:01 <Marvin--> c2(x) /= c2(c3(x')) -> f1(c2(x), e2) = 2
12:05:01 <Marvin--> x /= c2(c3(x')) & x /= c2(x'') -> f1(x,e2) = 3
12:05:01 <Marvin--> x /= c2(c3(x')) & x /= c2(x'') & y /= e2 -> f1(x,y) = 4
12:05:15 <Marvin--> sort of what I do with guards
12:09:18 <Igloo> Oh, right, thought it was a language name  :-)
12:09:42 <Marvin--> heh, no
12:10:11 <Marvin--> well, it IS, it's just not a very common programming language :)
12:10:21 <Marvin--> it's nice, I can take all sorts of shortcuts *cough*
12:10:22 <Igloo> :-)
12:10:55 <Marvin--> like guards... I translate   f | g  = e   to   equal(g,true) -> equal(f,e)
12:17:51 <delYsid> hmm, how do I work with arrays?
12:17:53 <Marvin--> oh, my... it might actually work
12:18:03 <Marvin--> hey delYsid :)
12:18:09 <delYsid> hey Marvin-- 
12:19:45 <delYsid> listArray (0,29999) [0..]
12:21:16 <Marvin--> that'd give you a reasonably-sized array, yes...
12:21:44 <Marvin--> wonder if e.g. hugs can allocate that much memory though
12:25:39 <delYsid> I need a exactly 30000 elements array, what would be best?
12:26:02 <delYsid> listArray, or use a [Int] and manipulate that using lazyness?
12:26:15 <Igloo> Depends what you want to do with it
12:26:38 <delYsid> access and manipulate values of certain indexes
12:26:48 <delYsid> over and over again
12:26:49 <Igloo> You want an array then
12:27:12 <delYsid> ok, now the question :), how the heck do I modify an element of an array?
12:27:27 <Igloo> @type \\
12:27:36 <Igloo> Oh, that'd need List to be in scope
12:28:07 <SyntaxPolice> Hey all.  I'm giving a talk on Haskell on Tuesday.  I usually write my talks myself, but I'm curious if there are any slides out there I could use to avoid duplicating work. any ideas?
12:28:09 * Igloo realises I'm on the wrong track
12:28:29 <Igloo> Ah, //
12:31:13 <delYsid> hmm
12:31:33 <delYsid> oh well, it has been too long already.
12:36:42 <Marvin--> hmm, now to see if I can generalize this a bit
12:37:27 * Marvin-- idly wonders how many debian developers there are on this channel
12:38:22 <SyntaxPolice> we can count off. I'll count you as one and myself as 1.5 since I'm not an official developer yet, but I maintain some packages and I recently sent in a patch to apt :)
12:38:46 <Marvin--> 1.5? :) you don't mean 0.5?
12:39:05 <Igloo> . (1 +)
12:39:44 <Marvin--> dark isn't here... I gueses we could count mgoetze|away as "0.5" too
12:40:04 <SyntaxPolice> Marvin--: no, we're counting off, starting at one.
12:40:13 <Marvin--> oh
12:40:23 <dennisb> I sent a bad patch so count me as -0.5
12:40:32 <Marvin--> hahaha
12:40:42 <SyntaxPolice> dennisb: nah, a bad patch is still definitely positive territory.
12:40:48 <dennisb> Actually, I've not done anything for debian (or against)
12:41:02 <dennisb> I almost installed it once
12:41:03 <SyntaxPolice> Unless it was intentionally bad, I guess.
12:41:05 <Igloo> Bad patches are good? Cool, I'll write me a script to make me GREAT!
12:41:22 <SyntaxPolice> Igloo: HA! Beat you to the punch.
12:41:22 <Igloo> Ah, rats  :-)
12:41:27 <dennisb> But I got into some problem and decided that redhat works fine for me
12:42:27 <dennisb> But I sort of like in principle, that got to count for something
12:43:07 <Marvin--> you like debian in principle?
12:43:55 <dennisb> I would like to be part of the debian family
12:44:11 <Marvin--> oh, you're a "wannabe" :)
12:44:23 <dennisb> yes
12:44:46 <dennisb> Maybe I will even try to install it again this year
12:45:20 <kawfee> Starvin Marvin-- 
12:45:59 * Marvin-- grumbles
12:47:25 <SyntaxPolice> dennisb: I'm sure you can get some help from folks on here.  Actually I think Knoppix is based on Debian
12:47:34 <SyntaxPolice> in case you want to play with that and take a tour.
12:48:18 <dennisb> Well, it's not so much that I couldn't get it to work. It's more that I didn't get it to work in 5 minutes
12:48:35 <SyntaxPolice> hehe
12:49:30 <dennisb> I've also always liked cd-rom installs, I've always felt that debian didn't really want that kind of install to be simple
12:50:51 <Marvin--> working on it :/
12:51:30 <dennisb> SyntaxPolice: what kind of talk will you give?
12:51:37 <dennisb> for what audience
12:56:31 <dennisb> Today I had to tell some young students (17 years) that have learned a bit C/C++ what haskell and functional programming is. It was not very easy..
12:58:42 <ddarius> better a bit of C++ than a bunch
12:58:45 <dennisb> I tried to show simple list functions like sum and product and a little bit of recursion (which they hadn't heard about before). I should have skiped the recursion, it was a big mistake
12:59:23 <Marvin--> ugh :/
12:59:42 <dennisb> Well, I wont do that mistake again
13:01:58 * ddarius doesn't get what beginner's find so threatening about recursion
13:02:44 <Marvin--> the general fright of the unknown?
13:02:48 <SyntaxPolice> dennisb: this will be targeted to CIS students.
13:03:13 <SyntaxPolice> dennisb: I expect them to understand recursion.
13:03:17 <dennisb> I've also realised that young people today don't have the same background like people in my age that learned to program
13:03:58 <ddarius> but they treat recursion as if it were especially hard, and they always make it so much harder than it is
13:04:31 * esap thinks recursion _is_ hard.
13:04:47 <Marvin--> heh, gotta love this jurassic park blooper
13:05:00 <Marvin--> you can side the slider in the quicktime player running on the computer :P
13:05:16 <ddarius> esap: at a shallow, basic use level?
13:06:18 <dennisb> everything is complicated if you think long enough about it
13:07:26 <dennisb> Whay is a CIS-student?
13:07:34 <esap> ddarius, dennisb: right, maybe I've just thought about recursion for too long :-)
13:08:10 <SyntaxPolice> CIS is Computer and Information Science, so the audience is people who major in computers, mostly.
13:08:44 * ddarius really doesn't get ASM programmers problem: "how do I recursively call a function?" "the same way you call any function"
13:09:27 <dennisb> I think it's hard to show haskell and the strength of haskell in a short talk to people who have only experiance of imperative programming. I really would like to know of a good way to do it.
13:10:32 <SyntaxPolice> dennisb: yeah, I agree. I have two talks actually, about 1.5 hours each, but still it'll be hard.
13:10:35 <esap> How about first talk about command pattern, then move on to I/O actions, and then explain monads and then move on to functional programming proper.
13:11:44 <SyntaxPolice> Here's my high-level plan: Talk 1: Introduce the language by showing its neat features, take them through a familiar example (makeing a Queue module), make them write some simple code, give them pointers to more.
13:11:47 <dennisb> The power of haskell as I see it is the expresiveness and the pure functions. One can state that haskell is good, but it's hard to show real examples that they can understand that shows the beauty
13:11:48 <SyntaxPolice> talk 2: probably monads
13:12:00 <Igloo> I wouldn't touch IO or monads in a few hour intro
13:12:04 <SyntaxPolice> (talk two is more for the people I know who know & like haskell in theory but balk at monads)
13:12:38 <esap> igloo: But imperative programmers always first want to know how to do I/O.
13:13:22 <Igloo> It depends if you are training them to use Haskell tomorrow or if you are trying to show why FP is good
13:13:29 <ddarius> the recent c.l.f thread
13:14:08 <dennisb> Also when one show some short and concise haskell code people have a tendency to think that it's just some trick used to make the examples nice
13:14:19 <esap> igloo: I would do neither. I would try to explain the concepts and ideas instead of the language.
13:14:45 <SyntaxPolice> esap: you would do neither what?
13:14:55 <ddarius> not some trick, just a best-case example
13:15:18 <esap> syntaxpolice: neither try to explain to use Haskell tomorrow or try to show why FP is good.
13:15:54 * Igloo may be biased having learnt Haskell on a course that didn't do IO or monads at all, but I don't think either are the really interesting bits about (pure) FP/Haskell
13:18:39 <ddarius> obviously Igloo.  Monads (particularly the IO monad) wouldn't be necessary unless the language was pure, so there must be some reason to use a pure language
13:46:16 <delYsid> hmmm, I dont get this error message from ghc:
13:46:30 <delYsid> No instance for (Num Char)
13:46:55 <dennisb> You try to use a Char as a number
13:47:09 <delYsid> but where?
13:47:24 <dennisb> Char is not an instance of the Num class is what it says
13:47:28 <dennisb> No line number?
13:47:38 <delYsid> well yeah, but I cant see a bug...
13:47:52 <delYsid> execute = exec' 0 (array (0,29999) [(i,0) | i <- [0..29999]]) []
13:47:52 <dennisb> Well, I can't even see the code :-)
13:47:52 <delYsid>  where
13:47:52 <delYsid>    exec' i mem out [] inp = out
13:47:52 <delYsid>    exec' i mem out (c:code) inp =
13:47:52 <delYsid>      case c of
13:47:52 <delYsid>       '>' -> exec' (i+1) mem out code inp
13:47:54 <delYsid>       '<' -> exec' (i-1) mem out code inp
13:47:56 <delYsid>       '-' -> exec' i (mem//[(i,((mem!i)-1))]) out code inp
13:47:58 <delYsid>       '+' -> exec' i (mem//[(i,((mem!i)+1))]) out code inp
13:48:00 <delYsid>       ',' -> exec' i mem ((mem!i):out) code inp
13:48:54 <delYsid> execute :: String -> String -> String
13:50:30 <dennisb> well, I don't see it. If it was my code I would just comment out parts until I find it
13:50:56 <delYsid> hmm
13:51:27 <delYsid> oh!
13:51:32 <Marvin--> delYsid: what do you apply execute on?
13:51:38 <delYsid> I cant just concat a Int to a string like that....
13:51:40 <Smerdyakov> Marvin--, the war criminals!
13:51:48 <Marvin--> Smerdyakov: *rolleyes*
13:51:52 <Marvin--> delYsid: nope, look at show
13:52:05 <delYsid> Marvin--: this is going to be, bf.hs :)
13:52:25 <Marvin--> delYsid: and you can't use + for strings, you have to use ++... + is addition, ++ is concatenation
13:52:30 <Marvin--> delYsid: bf.hs?
13:52:50 <delYsid> Marvin--: brainfuck
13:52:54 <Marvin--> oh
13:52:58 <delYsid> hmm, but show doesnt give me a char, does it?
13:53:16 <Marvin--> show gives you a string, and ++ can concatenate two strings
13:53:23 <Marvin--> and if c is a character, then [c] is a string :)
13:54:01 <delYsid> well, what I want is to get the corresponding char of a int
13:54:07 <delYsid> would that be ord or something?
13:54:12 <Marvin--> aha, yes, that's ord
13:54:16 <Marvin--> er, chr
13:54:21 <delYsid> ah
13:54:24 <Marvin--> ord :: Char -> Int, chr :: Int -> Char
13:54:46 <Marvin--> brainfuck interpreter seems to be a popular application for haskell
13:54:58 <delYsid> well, I've written one in elisp once...
13:55:09 <delYsid> and I thought it could be a nice training example...
13:56:00 <delYsid> bf.hs:15: Variable not in scope: `ord'
13:56:01 <delYsid> bah!
13:57:16 <Marvin--> import Char
13:57:27 <delYsid> *BrainFuck> execute "+++++++++++++++++++++++++++++++++," ""
13:57:27 <delYsid> "!"
13:57:31 <delYsid> wooohooo! :)
13:57:38 <delYsid> It can be so nice, to be brainfucked
13:57:42 <Marvin--> ... good on you
13:57:45 <Marvin--> :)
13:57:49 * Marvin-- doesn't know brainfuck
13:58:04 <delYsid> bf just has 8 instructions
13:58:16 <Marvin--> well, I know what it is, but I don't know the details
13:58:30 <delYsid> I wonder how I'm going to implement the loop construct [....]
13:59:07 <delYsid> hmm, substringing it, yeah...
14:05:00 <Marvin--> Igloo: provided that my approach works out, I now have code that produced it ;)
14:05:34 <Marvin--> produces even
14:10:41 * Marvin-- documents the progress, hurrah!
14:23:45 <delYsid> bah, I keep forgetting what . and $ exactly do.
14:24:14 <Marvin--> in haskell or brainf***?
14:24:24 <delYsid> haskell
14:24:35 <Marvin--> . is function composition, the mathematical "ring" operation
14:24:54 <Marvin--> $ is just function application, but binds with less priority
14:25:08 <Marvin--> so you can say  (f . g . h) x   or   f . g . h $ x
14:25:31 <Igloo> Cool, Marvin  :-)
14:28:39 <delYsid> Marvin--: heh, thanks, I hope I got it this time
14:30:41 <ddarius> $ is also right associative f $ g $ x == f (g x)
14:31:05 <ddarius> as opposed to f g x == (f g) x
15:01:39 --- mode: sterling.freenode.net set +vv shapr Riastradh
15:02:23 --- mode: sterling.freenode.net set +v Marvin--
15:10:17 <Grog`> how do i implement a function rev which takes in a block size and a message and reverses every block of characters in the message. eg Rev3"hello" ="lehol" or Rev4"hello world?" ="llehow o? dlr" in Haskell
15:11:18 <Smerdyakov> You need some spaces in those applications :
15:11:19 <Smerdyakov> :P
15:12:02 <Grog`> i have no idea this is for my girlfriend who is a silly whore doing a course she has no idea how to do at uni
15:12:29 <Grog`> i don't even know why they teach haskell but yes
15:12:31 <Smerdyakov> Then tell her to drop the course, and everyone can be happy!
15:12:33 <mgoetze> you call your girlfriend a whore?
15:12:38 <Grog`> constantly
15:12:45 <Smerdyakov> Well, it makes quite a lot of sense to teach Haskell, since it's a great programming language!
15:12:48 <mgoetze> i'm not helping you then. :P
15:13:27 <Grog`> help her
15:13:30 <Grog`> she might put out
15:13:34 <Grog`> without whinging
15:13:35 <Grog`> http://www.cse.unsw.edu.au/~cs1011/assignment/assign1/index.html
15:13:48 <Smerdyakov> This isn't a homework answer service.
15:13:52 <Grog`> that's the assignment i'm sure it will take you guys 2secs as its the basics
15:14:04 <Grog`> but me myself with my l337 'vb skills' can't do much
15:14:08 <Grog`> is it a kind service
15:14:13 <Smerdyakov> Yeah, the answer is "drop the class if you're too dumb to do that problem," directed to whoever is in the class.
15:14:14 <Grog`> to help a deadshit get through her course
15:15:56 <Grog`> ?:)
15:17:17 <mgoetze> Grog`: i'd probably do her homework for sex, if it were feasible...
15:17:39 <Grog`> she's not very good in bed anyway
15:17:48 <Grog`> oh well at least i can say as the loving boyfriend i tried
15:17:57 <Grog`> but thanks guys now i have to deal with the tears when she crys :)
15:18:17 * mgoetze shakes his head... "australia really is another planet"
15:18:42 <Grog`> it;s true
15:18:47 <Grog`> only i'm not australian i just live here:)
15:24:19 <Igloo> Has its advantages - living in the same timezone as chilli springs to mind  :-)
15:25:11 <Grog`> cold here is 18 degrees celcious
16:40:05 --- mode: ChanServ set +v Pseudonym
17:23:22 --- mode: ChanServ set +v Pseudonym
18:15:04 --- mode: sterling.freenode.net set +v Pseudonym
18:25:38 <Igloo> Bah, the whole world's gone broken
20:10:39 <Darius> @definitions
20:10:41 <lambdabot> ["I","K","K2","S","X","Y","a","append","car","cdr","cons","drop","flip","fold","iterate","map","nil","null","para","replicate","sum","take","undefined","unfold"]
21:13:56 <Pseudonym> @define null
21:13:57 <lambdabot> (line 1, column 1):
21:13:57 <lambdabot> unexpected end of input
21:13:57 <lambdabot> expecting white space or simple term
21:14:02 <Pseudonym> @definition null
21:14:03 <lambdabot> Sorry, I don't know the command "definition", try "lambdabot: @listcommands"
21:14:07 <Pseudonym> @listcommands
21:14:08 <lambdabot> I react to the following commands: ["define","definitions","dump","echo","eval","fact","fortune","get-definition","goodbye","hello","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","quit","searchml","set-fuel","showml","state","topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type"]
21:14:18 <Pseudonym> @get-definition null
21:14:19 <lambdabot>  fold (\x y.False) True
23:57:49 <debug> Good morning.
23:59:35 <Darius> if you want to call 2:45 morning ;)
23:59:39 <Darius> (here)
