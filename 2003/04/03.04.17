01:20:20 <Marvin--> eep
02:05:07 <pesco> Wooooh!!!
02:05:30 * pesco dances around, bouncing in manic celebration.
02:07:09 <Marvin--> ?
02:11:25 <pesco> My PowerBook is back!! And the Kinesis Keyboard works with it!!
02:11:42 <pesco> Quite contrary to the PC's behaviour...
02:13:30 <pesco> But I'd suspect the Kinesis not working on the PC has to do
02:13:52 <pesco> with the Linux UHCI driver not working properly. Windows works.
02:26:26 <shapr> how did you get your powerbook back?
02:26:29 <shapr> someone found it?
02:28:50 <pesco> yes and no
02:29:29 <shapr> ?
02:30:33 <pesco> It was never even stolen. Someone thought my backpack (containing the PB) was lost while I didn't have an eye on it and brought it to the lost+found department.
02:31:19 <shapr> it's great you got it back
02:31:26 <pesco> Yes!
02:31:34 * pesco jumps
02:34:15 <Marvin--> GAH I'm dumb
02:36:32 <Marvin--> side note: cool, Alex' Python in a Nutshell is #79 on Amazon's list of best selling books
02:36:55 <shapr> wow
02:36:57 <shapr> impressive
02:37:18 <shapr> was it accidentally filed under fiction? ;-)
02:37:26 <Marvin--> heh
02:37:31 <Marvin--> don't think so :)
02:37:47 * Marvin-- grumbles about universal and existential quantifiers and skolem functions
02:39:28 <Marvin--> wonder if my idea or Koen's idea for pattern matching works best... *ponders how to implement them both*
02:39:32 <shapr> yay, it's påsklov
02:39:53 * shapr prepares for LAN gaming
02:47:23 <Marvin--> shapr: lucky you, I'm working as usual
02:47:47 <Marvin--> though I think I'll have to cut down on that and start preparing for the storytelling tomorrow
03:00:01 * Marvin-- boggles at a mail to debian-boot
03:08:38 <Marvin--> AARGH, I hate openoffice
04:18:09 <funktor> shapr: http://www.ex.ac.uk/~dregis/DR/notation.txt
04:18:27 <funktor> shapr: I want to do long and short algebraic... descriptive confuses me :)
04:26:18 <funktor> anyone knows Colin Runciman?
04:52:14 <funktor> http://www.freelists.org/archives/oma-loty/01-2003/msg00017.html -- hehehe
04:57:34 <basti_> hi all
05:06:50 <shapr> @yow
05:06:50 <lambdabot> Yow!  Is this sexual intercourse yet??  Is it, huh, is it??
05:06:58 <basti_> *g*
05:07:51 <basti_> hi shapr
05:09:52 <shapr> hi basti_ 
05:09:54 <shapr> what's up?
05:10:02 <basti_> not much :)
05:10:21 <basti_> just visiting because im coding haskell in the other window ;)
05:11:37 <Janni> hi
05:11:42 <basti_> hi Janni
05:12:13 <shapr> basti_: what are you writing?
05:12:34 <basti_> oh only some vt100 helpers.
05:12:39 <shapr> in haskell??
05:12:42 <basti_> yep.
05:12:51 <basti_> so that I can do decent terminal i/o.
05:12:56 <shapr> wow, nifty
05:13:02 <shapr> are you rewriting ncurses in Haskell?
05:13:08 <basti_> hmm not really
05:13:22 <basti_> first the raw control codes
05:13:29 <basti_> maybe ill do some window helpers later
05:13:56 <basti_> cool would be some window monad that allows transparent window io
05:14:10 <shapr> huh?
05:14:16 <basti_> well like...
05:14:28 <basti_> we initialise that vt100 helper
05:14:38 <basti_> and get a function window that returns a monad
05:14:49 <basti_> then you use this monad for io, and magically all the io stays in the window
05:17:16 <shapr> I think I understand that
05:17:34 <basti_> that would be about the same a window class in java does.
05:17:43 <shapr> ah
05:17:45 <shapr> ok
05:17:48 <basti_> ;)
05:18:19 <basti_> how do you explicitely convert a number to a string?
05:18:20 <shapr> that would be nifty
05:18:23 <shapr> read
05:18:27 <basti_> "read"?
05:18:59 <shapr> yah
05:19:02 <pesco> basti:
05:19:03 <shapr> oh, show
05:19:04 <shapr> duh
05:19:06 <pesco> er
05:19:08 <shapr> I'm asleep :-)
05:19:12 <pesco> damn return key
05:19:13 <basti_> oic
05:19:13 <basti_> :(
05:19:14 <basti_> :)
05:19:18 <pesco> re, btw
05:19:27 <basti_> hi pesco
05:20:04 <pesco> what are you doing? GUI stuff? In Haskell?!
05:20:12 <basti_> erm, trying to, at least ;)
05:20:14 <pesco> *g*
05:20:16 <basti_> terminal emulation support
05:29:12 <funktor> re
05:29:17 <basti_> hi funktor
05:40:11 <delYsid> yay!
05:40:21 <basti_> yay!
05:40:29 <basti_> hallucinogene fanatic? ;)
05:40:32 <delYsid> cute, new putty solved all my screen-reader problems here.
05:40:37 <shapr> whee!
05:40:43 <basti_> putty is cool.
05:40:48 <delYsid> basti_ somehow, yeah
05:40:54 <basti_> *g*
05:41:13 <delYsid> basti_ but not many people know the word, so you outed yourself somehow too :)
05:41:24 <basti_> so did i? *g+
05:41:32 <basti_> whoooooops.
05:41:32 <basti_> ;)
05:58:36 <basti_> mmmh.
06:15:08 <delYsid> I dont grok read...
06:16:18 <basti_> I dont too.
06:16:19 <basti_> ;)
06:16:47 <delYsid> ahhh! type info is the magic thing
06:16:52 <delYsid> read "White" -- fails
06:16:55 <basti_> yeah it seems to be variable type
06:16:59 <delYsid> read "White" :: Colour -- works
06:17:02 <basti_> oic.
06:17:03 <basti_> ;)
06:17:14 <basti_> cool thing :)
06:17:36 <delYsid> hmm
06:18:52 <delYsid> hmm, what is the real difference between newtype and data declarations?
06:19:27 <basti_> I think type is only a redeclaration with another name
06:19:45 <basti_> "type synonym"
06:26:13 <basti_> hmm
06:26:37 <basti_> whats the best type for a Terminal like IO "thing"? 
06:26:46 <basti_> IO? Is this a type?
06:26:49 <basti_> or is File better?
06:31:46 <Arnia> newtype declares a data constructor like data however newtype can only be used for types with one alternative on the right and it uses structural isomorphism with an existing type to get better efficiency (effectively reclaiming the internal, native code, machinery for another type)
06:43:20 <Smerdyakov> Why does this goofy compiler need to be told that it can use that optimization?
06:51:45 <delYsid> ah
06:51:59 <delYsid> so newtype is like data, with some limitations, and a better efficiency.
06:53:25 <ibid> i tend to think newtype as an enapsulator, though it's not strictly correct
06:53:42 <ibid> think of too
06:55:38 <Smerdyakov> It seems like a redundant waste to me.
06:59:45 <basti_> im back
07:20:38 <basti_> why does hugs say "illegal type in class constraint" in a line where I write "instance Monad Vt100 where"?
07:21:22 <Igloo_> Does Vt100 take a type argument?
07:21:27 <basti_> yes
07:21:38 <basti_> I think so.
07:22:20 <basti_> but it works in another similar context...: "instance BasicTerminal Vt100"
07:23:25 <Igloo_> Monad needs something with kind * -> *, I suspect BasicTerminal need something with kind *
07:23:33 <basti_> oh.
07:23:36 <Igloo_> What is the definition of Vt100?
07:23:56 <basti_> until now its just a tuple.
07:24:05 <basti_> data Vt100 = Vt100 (Handle, Handle)
07:24:26 <Igloo> It needs to be data Vt100 a = ...
07:24:27 <Smerdyakov> Igloo! I've heard you are an expert! Why does 'newtype' exist?
07:24:32 <basti_> i see.
07:24:51 <basti_> I dont understand why that is, but I see what you mean.
07:25:25 <Igloo> Smer: If you say so, and  newtype Foo = Foo Int   doesn't have a value   Foo bottom
07:25:51 <basti_> would the "a" in your def. be a type variable then?
07:25:54 * Igloo tries to remember if it's different to data Foo = Foo !Int
07:26:00 <Igloo> Yup, basti
07:26:04 <basti_> i see.
07:27:33 <Igloo> basti: Think about the type signatures of things like liftM - they can't be satisfied by Vt100
07:27:46 <basti_> hmm.
07:27:52 <basti_> I dont understand liftM yet.
07:27:59 <Smerdyakov> Igloo, hm.... so type and newtype are different in lazyness of parameters to the one constructor?
07:28:50 <Igloo> Smerdyakov: http://haskell.org/onlinereport/decls.html#sect4.2.3 (there is a difference)
07:29:40 <Igloo> Basically with newtype you could pretend the constructor wasn't there, it's just for type checking purposes
07:30:51 <Smerdyakov> Well, in ML, that distinction is pointless.
07:30:58 <Smerdyakov> It seems the difference does have to do with lazyness.
07:31:40 <morphex> Why doesn't this work:
07:31:40 <morphex> Prelude> increment x = x + 1
07:31:41 <morphex> ERROR - Syntax error in input (unexpected `=')
07:31:41 <morphex> Prelude>
07:31:42 <morphex> ?
07:31:52 <Igloo> Yes
07:32:56 <morphex> guys?
07:33:06 <basti_> man... I can say, Haskell has the honour to be the first language that makes my head hurt.
07:33:09 <basti_> ;)
07:33:20 <basti_> morphex I dont knwo.
07:33:25 <morphex> heh
07:33:35 <Smerdyakov> morphex, you can't do declarations in hugs
07:33:43 <Smerdyakov> morphex, or whatever other interactive env you're using
07:33:55 <morphex> it's a tutorial example
07:33:59 <Smerdyakov> morphex, it's too complicated, since bindings can refer to later declarations =)
07:34:01 <morphex> how can i define a function?
07:34:08 <basti_> in a file
07:34:09 <Smerdyakov> morphex, then the tutorial is for a different environment!
07:34:13 <morphex> ffs
07:34:55 <morphex> it's hugs98
07:35:03 <morphex> how are they done there? :)
07:38:00 <morphex> i can see that the .hs source files use declarations
07:38:46 <morphex> hmm
07:38:56 <basti_> thats the secret.
07:38:58 <basti_> its in files.
07:39:20 <morphex> hmm
07:39:28 <morphex> how odd
07:39:39 <basti_> why?
07:39:39 <basti_> ;)
07:39:45 <morphex> because i'm used to python ;)
07:39:56 <basti_> that might explain things.
07:39:57 <basti_> ;)
07:40:57 <delYsid> morphex: with ghci, you can use let expressions to define functions on the fly
07:41:09 <delYsid> otherwise you'll need to put them into a file, and load that file
07:41:14 <morphex> ok
07:42:27 <delYsid> bah
07:42:35 <delYsid> I need to take a fold course.
07:42:39 <basti_> why?
07:42:43 <basti_> whats so hard about fold?
07:42:44 <morphex> haha, that works
07:42:45 <morphex> :D
07:42:54 <delYsid> foldr, foldl, bah!  I dont grok them
07:43:06 <basti_> hmm
07:43:12 <Smerdyakov> You should, if you've ever used a loop.
07:43:14 <basti_> ever tried calculating faculty by fold?
07:44:31 <delYsid> I'm trying to grok a construct like foldr (\a b -> foldr (\c d -> maybe id (:) ...) ...)
07:44:47 <delYsid> and it confuses m
07:44:48 <basti_> oh i see.
07:44:48 <basti_> ;)
07:45:01 <basti_> well the construction is a little complicated i have to admit
07:45:17 <basti_> but the use is pretty simple.
07:46:19 * delYsid wishes for a tactile functional "visualisation" kit
07:46:46 <basti_> dont laugh... I thought with a friend about 3d visualizing scheme ;)
07:47:04 <basti_> the language I mean.
07:47:08 <delYsid> 3d doesnt help particularily... I cant see
07:47:12 <basti_> not scheme as in "a scheme"...
07:47:26 <Smerdyakov> delYsid, just think of it as a nested loop....
07:47:27 <basti_> oh i see
07:48:26 <basti_> now that would be a merchandise thingie... the officiall rubber-thingies-to-visualize-haskell-functions...
07:48:39 <delYsid> haskell's conciseness is exactly why I love, and hate it... some code is just hard to get into my brain
07:48:48 <basti_> oh yes.
07:48:48 <basti_> ;)
07:49:50 <delYsid> basti_ yeah, I wish for a "machine" which does left and right associative folding, in hardware
07:50:15 <basti_> hmm...
07:50:24 <basti_> actually there were reduction machines...
07:50:54 <basti_> is that what you mean?
07:51:18 <basti_> like in the 60's... the LISP MACHINE was a popular one
07:52:50 <delYsid> yah, but that was probably not really tactile... :)
07:52:54 <basti_> yes ;)
07:53:04 <basti_> but I dont see whats so hard about foldl and foldr...
07:53:30 <basti_> foldl (+) 1 [1,1,1,1] = (((1+1)+1)+1)
07:54:31 <delYsid> hmmm, that is nice...
07:54:50 <basti_> foldr is the same on the other side
07:58:19 <basti_> oops i forgot one 1.
07:58:22 <delYsid> hmm, is there a tool which can expand expressions like that?
07:58:45 <basti_> hm
07:58:50 <basti_> actually there is...
07:59:01 <basti_> its what makes your program run ;)
07:59:08 <delYsid> bah
07:59:09 <basti_> no seriously, go look for a debugger...
07:59:10 <delYsid> :)
08:00:17 <basti_> maybe its also possible to write a lazy version of fold that returns the intermediate expression...
08:00:23 <basti_> without evaluating it
08:00:37 <delYsid> what the heck does maybe id (:) $ ... do in the lambda of a foldr?!
08:00:51 <basti_> ehm.
08:00:55 <basti_> I dont have a clue ;)
08:01:02 <delYsid> me neither
08:01:03 <delYsid> oh well
08:01:28 <basti_> first ill put a slice of pizza in the microwave, I think...
08:01:33 <basti_> thatll help a little maybe.
08:01:33 <basti_> ;)
08:02:22 * delYsid just had a very nice typical green-thursday meal.
08:02:42 <delYsid> i.e., "spinat mit spiegelei und Reis"
08:02:44 <delYsid> yummy!
08:03:11 <basti_> thats typical green thursday meal? I didnt know.
08:03:32 <delYsid> here around it is, yes
08:14:31 * shapr boings
08:14:41 * basti_ pings shapr
08:14:47 * shapr pongs basti_ 
08:15:18 <shapr> delYsid: there is a foldr foldl visualizer
08:15:23 <shapr> I think Erik Meijer wrote it
08:15:37 <shapr> it's a custom instance of Show
08:17:01 <shapr> hi morphex 
08:17:16 <shapr> I think Haskell is a natural next step after Python.
08:18:48 * esap didn't take the python step at all.
08:19:31 * basti_ too
08:20:13 <esap> python's yield feature is nice though.
08:21:04 <shapr> you can do the same thing in Haskell
08:21:11 <esap> how?
08:21:34 * esap guesses it's using continuation passing monad.
08:22:05 <shapr> or use the nifty stuff newly in ghc 5.04.2
08:22:15 <shapr> 'unique supplies' or something like that.
08:22:49 <esap> hmm.. that's an interesting idea.
09:01:52 <shapr> hi hal
09:02:26 <hdaume> sup
09:02:58 <shapr> code
09:04:07 <shapr> what's up with you?
09:05:32 <hdaume> madly scrambling for paper deadlines :)
09:05:50 <hdaume> ACL (our big conference) is in sapporo this year, and as someone who took japanese through all of college, i really want to go :)
09:06:33 <shapr> cool!
09:06:49 <Igloo> I've just blutacked a copy of the HW CFP (with deadline) to my shelves
09:07:05 * Igloo needs to get writing  :-/
09:07:24 <hdaume> :)
09:07:28 <Igloo> On the plus side I've just completed pingus 0.6
09:08:04 <shapr> pingus?
09:08:04 <hdaume> pingus?
09:08:21 <Igloo> http://pingus.seul.org/
09:08:47 <Igloo> They've just released a working version, but you only get to play the tutorial levels
09:08:51 <hdaume> cool
09:09:20 <Igloo> I can't remember how long it took, but I was in a meeting until gone 3 I think and I've already finished  :-)
09:12:06 <Igloo> Has rt_XXX.hs been discussed here?
09:12:43 <Igloo> Is it debug(?)'s raytracer?
09:16:20 <shapr> I think so
09:16:32 <shapr> Pseudonym made a highly improved version of it
09:16:52 <shapr> he added dielectric surface reflection, and several other features.
09:18:14 <shapr> if you mean the rt.hs that was in haskell-libs
09:18:40 <SyntaxPolice> I added some info and questions about Arrows to the wiki (UnderstandingArrows)
09:18:57 <SyntaxPolice> I also added State and StateT examples :-)
09:18:58 <Igloo> It was lieing around my home directory, but I've deleted it as I'm fairly sure it wasn't mine
09:19:48 <shapr> SyntaxPolice: yay!
11:14:19 * Marvin-- has to admit that the current discussion on g-h-u goes way over my head :)
11:15:41 * Vincenz greets the people
11:17:51 * Riastradh flings the most vile and vulgar curses he knows at Verizon.
11:22:21 * hdaume thinks it's largely a silly discussion
11:57:54 <delYsid> g-h-u?
12:13:29 <hdaume> glasgow-haskell-useres mailing list
12:43:21 * delYsid decides that he is still too stupid to grasp how to actually implement alpha-beta, and gives up for today
12:58:12 <SyntaxPolice> does Hugs really stand for "Haskell User's Gopher System"?
12:58:45 <Marvin--> afaik yes
13:01:08 <ludde> I thought it stood for Hughes
14:52:42 <Janni> g'evening
14:53:00 <Riastradh> Hi.
16:20:25 <Janni> I just found a cool page (http://www.gnot.net/). You can enter your favourite musicians there and you get proposals of other artists you could like. It's a self-adapting system and the results are amazing...
16:21:32 <Janni> err.. it's gnod.net
16:38:46 <Darius> Let's see what it does with, "Bad Religion" "Nanase Aikawa" and "Andres Segovia"
16:39:35 <Darius> NOFX? they're ok
16:44:24 <Darius> I don't think it knows Nanase Aikawa or Andres Segovia
16:45:00 <Igloo> I'd need something that worked on pieces of music
16:48:31 <Darius> Let's see what it does with "Fight Club" "Schindler's List" and "Gladiator" (I wonder if it'll spit out "A Beautiful Mind"?)
16:48:51 <Darius> Pulp Fiction
16:51:25 * Igloo decides writing fun code is more fun than writing papers
16:51:31 <Igloo> Especially in this heat
16:52:30 <Janni> Darius: It doesn't give you only _one_ result, does it?
16:53:14 <Janni> Igloo: In which heat?
16:54:22 <Igloo> This heat: http://www.bbc.co.uk/weather/
16:54:49 <Darius> It gives one at a time
16:55:22 <Igloo> (except a little bit hotter for here. Anyway, the point is it's too hot, dammit  :-)  )
16:55:26 <Darius> It gave me Pennywise as the second song for my first search
16:55:53 <Janni> Darius: When you click on "I like it", "I don't like it" or "I don't know it" it will continue with more proposals...
16:56:09 <Darius> I know
16:56:23 <Darius> It'd be nicer if it had a range
16:56:27 <Darius> Like 1 to 5
16:57:37 <Darius> I have no NOFX but I know them and am not a real fan, I have one Pennywise song which I like but it's about the only Pennywise I've listened to
16:58:28 <Darius> People don't know how to spell Heinlein
16:58:55 <Smerdyakov> Oh yeah? Watch this: Heinlein
16:59:06 <Janni> Igloo: Whew, 19 degrees Celsius in the middle of the night. I'm glad I don't live there. I have been a few days in London...
16:59:33 <Darius> Now all you need to do is prove you are People Smerdyakov
16:59:39 <Igloo> That's min/max for the day
17:00:23 <Darius> It was 80 (using backwards American Fahrenheit) yesterday, it's 40 today
17:00:30 <Janni> Oh, and I was wondering about a sunny night :)
17:01:56 <Igloo> :-)
17:12:08 * Janni is readying for sleep
17:12:30 * Igloo goes to collapse in bed too
17:12:35 <Igloo> Night all
17:12:45 <Janni> bye
17:14:54 <Tigren> anyone wanna try the "CRack the Password" game on my friends site? report back to me if you find the pasword. http://www.ceteranet.com/tajo/he/
18:10:23 <Darius> that was too easy
19:24:22 * esap is rereading SICP. I'm completely stunned at how differently I now understand the book.
19:38:47 <Darius> just added experience?
19:41:31 <esap> yes, I guess so. At the first reading, I guess I missed the big picture Abelson&Sussman was trying to explain.
19:42:12 <esap> ... even though it's immediately obvious from the table of contents :-)
19:54:45 <esap> And I didn't realize the whole book is about (function) application.
19:57:16 <Riastradh> About function application?  How so?
19:58:14 <esap> look at the table of contents. You see the word "abstraction" emphasized. Each major section defines a different model of function application.
19:58:29 <esap> to explain the model of computation.
20:01:43 <esap> section 1 uses the "substitution model", section 2 uses "constructor application/projection", section 3 introduces the environment model, and section 4 introduces interpreters.
20:03:54 <esap> section 5 has "explicit-control evaluator"
20:25:57 * Darius is doing strange and disgus^H^H^H^H^H^Hwonderful things with Haskell's type system
20:26:20 <Riastradh> Heh.
20:55:39 <dmakalsky> hi
20:55:49 <dmakalsky> what do you guys think of ML?
21:19:19 <Darius> I think I have some Nanase I've never listened to
21:27:48 --- topic: '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","New Learning Haskell page - http://www.haskell.org/learning.html","GUI Demos - http://repetae.net/john/computer/haskell/gui/","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","New HaWiki - http://www.haskell.org/hawiki/RecentChanges"]'
21:27:48 --- topic: set by shapr on [Wed Apr 16 17:57:14 2003]
21:27:48 --- names: list (clog Earl Logan esap kunphuzil Kuril emu o3 dennis xkb skylan smkl lambdabot Smerdyakov flippo polli galority whee +shapr ibid [g]dsx nbd tWip Igloo kani^^off inkedmn lament Riastradh kawfee Radek tmoertel)
21:40:20 --- mode: leguin.freenode.net set +v shapr
