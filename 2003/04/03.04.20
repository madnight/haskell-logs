03:39:35 <Janni> morning!
05:05:15 * shapr blinks
05:39:40 <shapr> good morning!
05:39:59 <jao> good morning shapr
05:40:05 <shapr> what's happening?
05:40:11 <shapr> y0 dnm 
05:40:20 <shapr> jao: found any questions?
05:40:28 * shapr boings
05:41:18 <jao> shapr: not yet (well, not concrete enough)
05:41:54 <shapr> you can ask unfocussed questions too :-)
05:42:27 <jao> heh. gimme a couple of days! :)
05:42:43 <shapr> ok, I'll be patient :-)
05:43:03 <jao> :)
05:45:48 <shapr> yay, updated lambdabot 
06:01:51 * shapr boings
06:02:07 * Riastradh grumbles at Verizon.
06:02:23 <shapr> hi quality connection?
06:02:31 <Riastradh> Oh yeah, totally.
06:03:26 * shapr slowly remembers how the FactModule works
06:04:08 <shapr> oh, I could clean this up with the new 'cmd' stuff
06:04:40 <shapr> I could also move the host/db/user/pw into cmdline params
06:04:55 <Riastradh> Weren't you going to remove the database stuff?
06:05:11 <shapr> I'd like to make it optional
06:05:51 * Riastradh has a [not quite working] FactModule that writes to files already.
06:05:57 <shapr> yay
06:06:03 <Riastradh> Actually, the 'not quite working' bit is that it -doesn't- write to files.
06:06:05 <shapr> what's not working about it?
06:06:08 <shapr> why not?
06:06:11 <Riastradh> I dunno.
06:06:32 <shapr> how are you doing the write to files bit? what's not working about it?
06:06:45 <Riastradh> It goes in the 'moduleUnload' method, which no one has tested.
06:07:02 <shapr> oh
06:07:05 <shapr> send me the code?
06:07:27 <shapr> maybe I should fix the module unloading first
06:07:29 <Riastradh> Hang on a minute.  I'm going to test to see if the writing code works.
06:07:32 <shapr> ok
06:09:13 <Riastradh> Whoops, I also broke the karma module.
06:09:15 * Riastradh fixes that too.
06:09:40 <shapr> we need unit tests
06:10:49 <shapr> the unload code isn't called anywhere
06:10:59 <shapr> I'm not quite sure where it should be called either
06:11:13 <Riastradh> Probably in 'ircQuit.'
06:11:21 <shapr> yah, probably so
06:11:31 <shapr> that's sort of cheesy though
06:11:44 <Riastradh> Why?
06:12:01 <shapr> because mainloop should have some sort of branch to do that
06:12:15 <shapr> ircQuit is just about sending a quit message to the irc server
06:12:32 <shapr> it should be called as part of the shutdown chunk, it shouldn't actually be the shutdown chunk
06:12:48 <shapr> but for now, it's a great solution :-)
06:13:33 <shapr> you may notice that lambdabot always exits with an exception at the moment
06:13:49 <shapr> that's because it needs an exit branch in mainloop
06:13:53 <shapr> at least, I think that's true
06:14:42 <Darius> not always (at least for me) that was the race condition I was talking about a long while ago
06:14:49 <shapr> Darius: oh tell me more
06:14:59 <shapr> I remember you told me about it, but I don't remember the details
06:15:51 <Darius> There isn't much more to it.  Sometimes it ends with Exit Success and some times it ends with Thread Killed.  I'd have to cause them again to get the messages
06:19:19 <shapr> well
06:19:39 <shapr> Riastradh: for the moment, ircQuit is a good hack of a solution
06:20:15 <shapr> Riastradh: want me to add the ircUnloadModule calls there? or would you like to?
06:20:25 <Riastradh> I already did, but haven't checked anything in yet.
06:20:35 <Riastradh> Er, committed anything.
06:20:43 <Riastradh> Whatever the term is.
06:22:19 * shapr isn't sure either
06:22:47 <shapr> does it work?
06:23:22 <Riastradh> The compiler likes it so far.
06:25:02 <Darius> both check in and commit are correct.  I think cvs even takes either
06:26:32 <shapr> as long as my code gets saved, I'll use whatever magical words are required.
06:27:16 <Riastradh> Even profane ones?
06:27:45 <Riastradh> Or ones like 'hitler_was_a_nice_guy'?
06:28:40 <shapr> I seriously doubt cvs would require that.
06:28:59 <shapr> if it did, I'd fix it.
06:29:05 * shapr basks in the beauty of open source
06:30:09 <tWip> That would make a nice ChangeLog entry... "Removed need for hitler praisal" ;)
06:32:25 <shapr> hi Explodey 
06:32:30 <Darius> @get-definition showNum
06:32:30 <lambdabot> showNum = \n.(\showNum.if n < 0 then B reverse showNum (0-n) else B reverse showNum n) (Y (\showNum n.if n < 10 then [digitToChar n] else digitToChar (mod n 10) : showNum (n/10)))
06:32:33 <Explodey> hello
06:32:49 <shapr> Darius: rewriting the Prelude? :-)
06:32:53 <Darius> variable shadowing to the Extreme
06:35:28 <Riastradh> Well, finally the facts were stored.
06:35:35 <Riastradh> But now it won't load them!  Argh!
06:35:35 <shapr> yay
06:35:38 <shapr> oops
06:36:25 * Riastradh hrms.
06:42:04 <Riastradh> Now it's not reading the facts.
06:42:13 <Riastradh> Oh, wait.
06:42:15 <Riastradh> I said that already.
06:42:23 * Riastradh curses at coding early in the morning.
06:49:22 <Riastradh> Is there a 'trace' mechanism in GHC?
06:50:24 <shapr> yup
06:50:35 <shapr> in IOExts I think
06:50:46 <shapr> I usually use putStrLn
06:52:06 * shapr refactors fortune and yow into a single plugin
06:52:32 <Darius> there's Debug.trace
06:52:54 <Darius> though Observe is (significantly) better 
06:53:09 <Darius> and I'm fairly certain Hat is even better
06:53:09 <shapr> what's that?
06:53:24 <shapr> has anyone tried using Hat on lambdabot ?
06:53:52 <Darius> I can't get Hat to compile (at least that and keep what passes for sanity)
06:53:58 <shapr> heh
06:54:29 <shapr> I have the binary deb
06:54:38 <Riastradh> shapr - Put them and another one into a single 'quote' module -- the 'randquote' or something command takes the name of a quote listing, like 'yow' or 'fortune' or '#haskell' (for silly things that people have said in #haskell).
06:54:50 <shapr> Riastradh: yes, that's exactly what I'm doing.
06:54:54 <Riastradh> Ah, cool.
06:55:00 <Darius> actually I can try it in Linux next time I use linux; if I remember to, and remember to get a Linux GHC
06:55:28 <shapr> I've also noticed that several modules want a pseudo-random generator int seed
06:55:55 <shapr> so I figure they can share an int named "prngint" in the State FM
06:55:58 <Darius> Wow, I think this function will need a rank-2 type
06:58:08 <shapr> Riastradh: the only downside being that @quote, @fortune, and @yow will now be tightly coupled
07:03:27 <Darius> the types in this just get scarier and scarier
07:03:27 <Darius> doOp :: (MonadError String m) => (forall a.Ord a => a -> a -> Bool) -> m Dynamic -> m Dynamic -> m Dynamic
07:04:11 <Darius> anyways (==) now works for characters and booleans as well as ints
07:28:11 <shapr> @eval 'a' == 'b'
07:28:12 <lambdabot> type error
07:28:14 <shapr> @eval 'a' == 'a'
07:28:15 <lambdabot> type error
07:28:22 <shapr> @eval True == False
07:28:23 <lambdabot> type error
07:28:31 <shapr> @eval 1 == 1
07:28:31 <lambdabot> True
07:30:42 <Darius> I had just commited when I made that statement
07:30:50 <shapr> ohh
07:30:53 <shapr> @quit
07:32:29 <ludde> @eval [1] == [1]
07:32:39 <ludde> :(
07:32:47 <shapr> lambdabot will be right back, after these messages.
07:32:53 <shapr> y03
07:45:29 <shapr> hiya Marvin-- 
07:45:38 <Marvin--> ello
07:45:43 <shapr> wassup?
07:46:12 <Marvin--> gothcon is over
07:46:16 <Marvin--> I am tired
07:46:20 <shapr> did you have fun?
07:46:25 <Marvin--> as always :)
07:46:52 <Marvin--> Svenil was a real success, of the 29 groups, only two didn't get to play
07:47:00 <shapr> yay!
07:47:20 <Smerdyakov> Heh. Marvin--, do you know what "gothcon" would be taken to mean in America?
07:47:38 <LantrnJaw> shapr: that looks dangerous.  What if someone says "@eval length (repeat 'x')" or something?
07:47:44 <shapr> LantrnJaw: try it
07:48:01 <explodey> @eval length (repeat 'x')
07:48:01 <lambdabot> unbound variable: repeat
07:48:26 <Marvin--> Smerdyakov: yes :) that's why it's fun
07:48:36 <Marvin--> goth as in gothic and goth as in gothenburg
07:48:36 <shapr> gothcon is an excellent pun
07:48:44 <Darius> @define repeat iterate id
07:48:45 <lambdabot> repeat defined
07:48:57 <shapr> explodey: ok, try it again :-)
07:48:58 <Darius> @eval take 100 (repeat 'a')
07:48:58 <lambdabot> type error
07:49:05 <explodey> @eval length (repeat 'x')
07:49:06 <lambdabot> out of fuel
07:49:17 <Marvin--> @listcommands
07:49:17 <lambdabot> I react to the following commands: ["define","definitions","del-definition","dump","echo","eval","fact","fortune","get-definition","goodbye","hello","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","quit","resume","searchml","set-fuel","showml","state","topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type","yow"]
07:49:22 <Darius> @get-definition take
07:49:22 <lambdabot> take = \n l.if null l || n <= 0 then [] else head l : take (n-1) (tail l)
07:49:37 <explodey> @get-definition iterate
07:49:37 <lambdabot> iterate = \f x.x:iterate f (f x)
07:49:57 <Marvin--> that looks right...
07:50:26 <Marvin--> @eval take 1 (2:3:[9)
07:50:26 <lambdabot> (line 1, column 15):
07:50:26 <lambdabot> unexpected ")"
07:50:26 <lambdabot> expecting digit, operator, simple term, "," or "]"
07:50:28 <Marvin--> @eval take 1 (2:3:[])
07:50:29 <lambdabot> type error
07:50:33 <Marvin--> @eval take 1 ([])
07:50:33 <lambdabot> type error
07:50:47 <Marvin--> parenthesis error in take?
07:53:03 <Darius> no, it seems || is broken now
07:53:48 <Marvin--> @eval (0 == 1) || (0 == 0)
07:53:49 <lambdabot> True
07:53:56 <Marvin--> @eval 0 == 1 || 0 == 0
07:53:56 <lambdabot> True
07:54:09 <Darius> a little
07:54:20 <Darius> @eval null [] || 5 <= 6
07:54:21 <lambdabot> type error
07:54:50 <Marvin--> @get-definition null
07:54:50 <lambdabot> null not defined
07:54:54 <Marvin--> built-in?
07:55:09 <Marvin--> @definitions
07:55:10 <lambdabot> ["B","Branch"]
07:55:10 <lambdabot> ["C","Cons"]
07:55:10 <lambdabot> ["False"]
07:55:10 <lambdabot> ["I"]
07:55:10 <lambdabot> ["Just"]
07:55:10 <lambdabot> ["K"]
07:55:21 <Marvin--> eek
07:55:44 <Marvin--> bah
07:55:47 <Darius> yes it is
07:55:53 <Darius> @more
07:55:54 <lambdabot> ["Leaf","Left"]
07:55:54 <lambdabot> ["MonadError","MonadReader","MonadState","MonadWriter","MonadWriter_"]
07:55:54 <lambdabot> ["Nil","Nothing"]
07:55:54 <lambdabot> ["Pair"]
07:55:54 <lambdabot> ["Right"]
07:55:55 <lambdabot> ["S","Succ"]
07:56:11 <Marvin--> ah
07:56:51 <Marvin--> @eval null []
07:56:52 <lambdabot> True
07:56:54 <Marvin--> @eval nullL []
07:56:55 <lambdabot> type error
07:57:01 <Marvin--> @get-definition nullL
07:57:01 <lambdabot> nullL = list True (K (K False))
07:57:04 <Marvin--> ah
07:59:03 <Marvin--> ugh, the mail piles up when you don't read it for three days
07:59:04 <Darius> actually, it's probably the parser that's wrong I did change it recently
08:03:00 <Janni> re
08:13:38 <Darius> ok it's fixed, it was the parser (and there was another chunk that was out of date too, that hadn't been stumbled over)
08:14:10 <Darius> @eval (\f.f 'a' || True) (\x.True)
08:14:11 <lambdabot> True
08:14:41 <Darius> @eval (\f.f [1,1] || True) (\x.True)
08:14:42 <lambdabot> True
08:18:50 <shapr> er
08:31:06 <explodey> @get-definition list
08:31:06 <lambdabot> list = \c n l.l c n
08:32:59 <explodey> flip foldr ?
08:38:41 <Darius> list follows the convention of using the name of the datatype for the case analysis
08:38:45 <Darius> @get-definition tree
08:38:46 <lambdabot> tree = \l b t.t l b
08:39:45 <Darius> The pure lambda calculus version of the list (and the other datatypes) work using continuations
08:39:57 <Darius> @get-definition Branch
08:39:58 <lambdabot> Branch = \l k r lk bk.bk l k r
09:17:17 <basti_> Hi!
09:23:02 <delYsid> hey!
09:23:37 <delYsid> whats the function to convert a data type to a number?
09:23:50 <basti_> what?
09:23:56 * basti_ doesnt understand that question
09:25:22 <delYsid> instance Kind where
09:25:22 <delYsid>   tonumber Pawn = 1
09:25:22 <delYsid>   ...
09:25:22 <delYsid>   k + k' = (tonumber k) + (tonumber k')
09:25:40 <basti_> hmm
09:25:49 <basti_> *shrug*
09:25:59 <basti_> I dont know if this does make sense
09:26:29 <Marvin--> the Integral class has toInt and toInteger
09:26:50 <Marvin--> but then you also need quot, rem, div, mod and friends (and Real, and Enum, and...)
09:27:10 <basti_> hmmmm
09:27:45 <delYsid> hmm, what I actually want is overload + and - on my data type Kind, so that I can nicely sum up the values of pieces of a colour...
09:27:59 <basti_> hmmh
09:28:21 <Marvin--> I don't think that's what you want
09:28:28 <Marvin--> + and - belong in Num
09:28:43 <delYsid> oh! Now I get it... thats just plain wrong...
09:28:53 <delYsid> I'd need to return a Kind, whatever that would be :)
09:29:05 <delYsid> Pawn+Knight = HalfRook :)
09:29:06 <Marvin--> if it makes sense to instantiate Num, instantiate Num, otherwise use different operators
09:38:06 <basti_> hmmh
09:38:23 <basti_> can anyone tell me how I do realize a "data structure" in Haskell?
09:38:40 <basti_> That is, something that merges several dates of known types to an object
09:39:12 <Janni> Maybe you want to have a look at classes and instances...
09:39:29 <basti_> hmmmm
09:39:31 <Marvin--> basti_: data structures are realized with the 'data' keyword
09:39:34 * basti_ ponders
09:39:42 <basti_> like as a tuple=
09:39:42 <basti_> ?
09:39:46 <Marvin--> data MyType = Constructor t1 t2 ... tn
09:39:55 <basti_> oh
09:39:57 <Marvin--> | OtherConstructor ...
09:40:11 <basti_> yes I see
09:40:19 <basti_> where tn are types?
09:40:37 <Marvin--> yes
09:40:42 <basti_> 'k
09:40:51 <Marvin--> you can have parametric types too,  data Foo a = ...a...a...
09:41:07 <basti_> yes I knew about that
09:56:18 <basti_> mmmh
09:56:24 <basti_> oh
09:56:30 * basti_ is stupid
09:56:33 <basti_> now officially
11:06:04 <basti_> @help
11:06:04 <lambdabot> Sorry, I don't know the command "help", try "lambdabot: @listcommands"
11:06:09 <basti_> @listcommands
11:06:10 <lambdabot> I react to the following commands: ["define","definitions","del-definition","dump","echo","eval","fact","fortune","get-definition","goodbye","hello","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","quit","resume","searchml","set-fuel","showml","state","topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type","yow"]
11:06:36 <basti_> @yow
11:06:37 <lambdabot> Yow!  Maybe I should have asked for my Neutron Bomb in PAISLEY--
11:06:48 <basti_> @yow
11:06:49 <lambdabot> Of course, you UNDERSTAND about the PLAIDS in the SPIN CYCLE --
11:10:52 <debug> hello
11:11:50 <basti_> hi debug
13:53:28 <delYsid> hmmm, this is strange!
13:53:55 <delYsid> without a little add-on to the move-generation list, I have 2.6MB memory use.
13:54:10 <delYsid> If I add ++ (castleMoves c bd)
13:54:14 <basti_> hmm
13:54:28 <delYsid> I have stack overflows, the thing is very slow, and consumes about 70MB ram
13:54:51 <basti_> uh
13:55:31 <delYsid> strange is that this (castleMoves c bd) call yields [] for probably 99% of all moves...
13:57:07 <Igloo> Try adding castleMoves c bd ++ instead
13:57:21 <delYsid> really? heh
13:57:24 <delYsid> I'll try that.
13:57:44 <delYsid> thats the difference?
13:58:36 <delYsid> s/thats/whats/
13:58:42 <Igloo> That way you're forcing it to be evaluated. Also, xs ++ ys is O(length xs)
13:59:01 <delYsid> ah 
13:59:28 <Igloo> I can't immediately think why you would get such huge performance problems though - let me know if that fixes it
14:08:07 <delYsid> it made it worse.
14:08:17 <delYsid> not it almost immediately crashes with stack overflow
14:09:39 <delYsid> s/not/now/
14:09:47 <basti_> sounds like an endless loop
14:10:37 <delYsid> if I use those routines to print available moves, they work. so I doubt that it loops
14:10:44 <basti_> hmmm
14:14:19 <delYsid> hmm, I guess I'll play a bit and come back if I can show code.
14:14:47 <delYsid> s/if/when/
22:07:58 <carol_> anyone alive?
22:08:27 <Riastradh> I am.
22:11:49 <carol_> i was wondering how i should do something like myfloat - floor(myfloat) in haskell since this seems to do bad stuff for types
22:12:26 <carol_> i thought (-) was defined for all Nums
22:12:33 <carol_> not just ints, or floats
22:12:33 <Riastradh> @type (-)
22:12:34 <lambdabot> (-) :: Num a => a -> a -> a
22:12:46 <Riastradh> It is defined for all Nums, apparently.
22:12:53 <carol_> hmm
22:14:22 <carol_> i get long "ambiguous type variables" when i do 73.3 - floor(73.3)
22:14:22 <carol_> in ghci
22:14:37 <carol_> errors, that is
22:18:05 <carol_> ok, this makes sense to me now, but i don't suppose there is anyway to do a cast from integer to float, is there?
22:18:21 <Darius> fromInteger
22:18:39 <Darius> @type fromInteger
22:18:39 <lambdabot> fromInteger :: Num a => Integer -> a
22:19:41 <carol_> great
22:19:45 <Riastradh> 73 - fromInteger $ floor 73.3 -- that ought to work
22:19:55 <Riastradh> s/73 -/73.3 -/1
22:20:11 <Riastradh> Hrm, or maybe it oughtn't.
22:20:29 <carol_> well, i used parentheses which worked
22:21:21 <Darius> 73.3 - fromInteger $ floor 73.3 == (73.3 - fromInteger) (floor 73.3), not what you want Riastradh
22:21:33 <Riastradh> Right, Darius.
22:25:06 <kawfee> what are you trying to do?
22:31:37 <carol_> kawfee, i was playing around and i noticed a formula for computing a^x, where x and a are any real numbers.  Now i'm just trying to write it in haskell.
22:32:26 <kawfee> carol_: sounds easy enough, you may want to use infinite lists and memoization
22:34:16 <carol_> i'm using a list comprehension
22:49:01 <kawfee> as you should
22:49:19 <kawfee> use memoization along with that and you will attain a significant increase in performance
23:03:17 <carol_> what is memoization
23:03:23 <carol_> ?
23:04:27 <Riastradh> A sort of caching.
23:24:18 <Verbophobe> Hello.
23:24:23 <Riastradh> Hi.
23:24:47 <Verbophobe> I had a little question I thought maybe I could have answered here...
23:25:42 <Verbophobe> I'll ask anyway, see what happens.
23:25:53 <Verbophobe> My ghci is doing this:
23:25:55 <Verbophobe> *Parsing> 32.3 - 5.2             
23:25:55 <Verbophobe> 27.099999999999998
23:25:59 <Verbophobe> Any particular reason?
23:27:13 <Verbophobe> And this too:
23:27:15 <Verbophobe> *Parsing> sin(pi)
23:27:15 <Verbophobe> 1.2246063538223773e-16
23:27:29 <Verbophobe> Are there any floating point related bugs?
23:55:31 <Darius> that looks like normal round off error
23:57:32 <Verbophobe> So it's normal and there's nothing to worry about?
23:59:25 <Darius> Yes, it's normal.  It isn't usually a problem for simple things.  If you need high precision there are some alternatives.
