01:28:07 <shapr> goood morning #haskell!
01:30:17 <Marvin--> morning
01:35:20 <shapr> wassup?
01:50:22 <shapr> hi jemfinch 
01:50:44 <jemfinch> howdy shapr.
01:51:30 <shapr> wassup?
01:51:42 <jemfinch> just had to put some files on my website for my girlfriend.
01:51:47 <jemfinch> she has a presentation tomorrow.
01:51:58 <jemfinch> nothing much else is up.
01:52:01 <shapr> what sort of presentation?
01:53:51 <jemfinch> I was putting up some of one of her group member's files.  That group member is apparently presenting on horse slaughter.  Meg (my girlfriend) is presenting on the Premarin (sp?) industry.
01:54:12 <jemfinch> (Premarin is a drug for pregnant women made from the urine of pregnant mares)
01:56:11 <shapr> I want NNTP code for Haskell
01:56:21 <shapr> I have to do this nntp -> database thing again
01:56:43 <jemfinch> so do you actually develop in Haskell faster than you would in Python?
01:59:13 <shapr> In most cases, yes
02:01:35 <jemfinch> that's interesting.
02:01:40 <jemfinch> how do you do database access with Haskell?
02:01:48 * jemfinch will brb.
02:06:22 <shapr> jemfinch: there are several database bindings, but htoolkit is the only binding I've gotten to compile
02:06:29 <shapr> @fact htoolkit
02:06:29 <lambdabot>  http://sf.net/projects/htoolkit,  postgresql mysql and odbc bindings
02:06:44 <shapr> the @fact plugin is using a postgresql backend
02:07:03 * jemfinch just uses sqlite for supybot.
02:07:27 <shapr> tetryl wrote a sqline bindings for Haskell recently
02:07:43 <shapr> er, "sqlite"
02:08:13 <shapr> jemfinch: Haskell doesn't have a DB-API like Python does, but I think HaskellDB may become the DB-API 
02:08:21 <jemfinch> Haskell should get an FFI generator like ml-nlffigen.
02:08:41 <shapr> I want SWIG bindings
02:09:52 <jemfinch> not if you could get an FFI generator like ml-nlffigen, you wouldn't :)
02:10:07 <jemfinch> although admittedly, ml-nlffigen is only one-way.
02:13:09 <shapr> what does ml-nlffigen do?
02:13:39 <jemfinch> takes a .h file and returns a CM package to access it :)
02:14:07 <jemfinch> basically, the only thing you need to provide code for is to dynamically open the .so.
02:16:05 <shapr> sounds nice, quick write one for Haskell
02:16:38 <jemfinch> :)
02:16:59 <jemfinch> with SML it was easier because all the facilities for parsing and manipulating C already existed.
02:17:23 <jemfinch> there's a library for SML, CKit, which was written for static analysis of C code for the y2k "problem."
02:18:35 <jemfinch> so Matthias Blume encoded almost the entire C typesystem in SML types and wrote a program that takes a .h file and outputs SML files using those types, and he was practically done.
02:18:48 <jemfinch> the only part of the C typesystem he couldn't encode was varargs.
02:20:43 <jemfinch> anyway, I'm going to go back to bed, I'm tired :)
02:20:52 <shapr> heh, ok
03:21:37 <delYsid> hmm, is there a document somewhere which describes showSprec?
03:21:54 <delYsid> esp. showParen, I somehow dont grok the example in the report
04:09:06 <andersca> hi guys
05:37:23 <andersca> woo, my first two mails to h-c
06:04:08 <SyntaxPolice> morning all
06:05:01 <debug> hello
06:35:57 <delYsid> @fact iohcc
06:35:58 <lambdabot> Nothing
06:36:14 <delYsid> is there some web-location where one can browse the submissions?
06:49:43 <andersca> hey marvin
06:56:03 <Marvin--> afternoon
06:57:18 <andersca> hmm, I could swear that I saw the sun moments ago
06:57:36 <Smerdyakov> All that proves is that you're a liar!
07:02:19 * Vincenz tsks at andersca "Pretending to have a life and to have seen the sun, huh?!?"
07:03:19 * SyntaxPolice went biking this weekend.
07:03:39 * Vincenz glares at SyntaxPolice 
07:21:56 <delYsid> HOw does one write a memoizing function in Haskell?
07:22:32 <Smerdyakov> It will have to be inside a monad if you don't want to explicitly pass and return the memo pad with each call.
07:23:29 <Marvin--> what about a function that says  let xs = (infinite list of results) !! n  (if it's a function that takes an Int...)?
07:37:08 <delYsid> its a function of two parameters...
07:37:15 <delYsid> so I'd need to memoize both
07:38:09 <delYsid> and I have no idea how I should stick that intoa Monad
07:44:35 <BlitzNL> Does anyone know the name of the big E-like (it looks more like a rotated M) thing used in math?
07:44:49 <opet> sigma?
07:45:21 <Marvin--> it's a large sigma, yes
07:45:30 <Marvin--> er, that is, uppercase
07:45:48 <BlitzNL> thnx opet
07:49:22 <delYsid> hmm, there seems to be a nice paper which describes a generic memo function, but that required changes to Hugs :&
09:42:14 <Janni> hi
10:02:50 <vincenz_> Hello
11:19:40 <Marvin--> evening
11:19:58 <shapr> y0
11:19:59 <shapr> wassup?
11:20:17 <Marvin--> working hard on d-i so we can make a prerelease of sarge
11:20:38 <shapr> yay
11:20:43 <Heffalump> d-i?
11:20:43 <shapr> debian is good
11:20:53 <Marvin--> debian-installer
11:21:05 <shapr> that too
11:21:22 <Marvin--> shapr: it was in response to Heff's question :)
11:21:32 <shapr> :-)
11:22:27 <Heffalump> when does sarge look like releasing then?
11:24:08 * Marvin-- coughs
11:24:38 <Marvin--> I don't really know :)
11:24:51 <Heffalump> oh well :-)
11:24:57 * Heffalump goes back to struggling with SML
11:29:52 <SyntaxPolice> did everyone try out the new hugs package? :-)
11:30:00 * shapr tries
11:30:06 <shapr> seems to work
11:30:40 <shapr> new maintainer, eh? ;-)
11:30:40 <Heffalump> in Debian?
11:30:50 <SyntaxPolice> there's a new one on the way that fixes the manpages, btw.
11:30:55 <SyntaxPolice> Heffalump: yeah.
11:32:02 * Heffalump moves his pin for hugs to unstable and upgrades
11:33:38 <SyntaxPolice> Marvin--: if you want to know a secret, you might harass walters about d-i... he once said that after he saw knoppix, "I myself resolved to make sure Debian's next installer gets this kind of autodetection ability."
11:34:07 <SyntaxPolice> so maybe he'll be interested in hacking.
11:34:47 <Marvin--> SyntaxPolice: we already use discover for hardware detection
11:34:59 <Marvin--> but it's kinda complicated by the other 10 arches...
11:36:32 <SyntaxPolice> Marvin--: I see.  Still, he might be interested in other improvements.
11:37:12 <Marvin--> SyntaxPolice: he's probably quite busy with -desktop
11:37:24 <Marvin--> SyntaxPolice: still, I'm positive he knows he's welcome to lend a hand ;)
11:40:54 <SyntaxPolice> Marvin--: OK :)
11:41:46 <Marvin--> you guys are of course more than welcome to lend some hands too ;)
11:42:09 <shapr> how do we lend hands?
11:42:37 * andersca brings out the axe
11:42:48 <andersca> do you want me to demonstrate on you? 
11:42:48 <andersca> ;)
11:43:01 <shapr> umm
11:43:15 * shapr stops axing silly questions
11:43:15 <Marvin--> http://cvs.debian.org/*checkout*/debian-installer/doc/TODO
11:53:31 <shapr> hi nerdlor 
11:53:33 <shapr> wassup?
11:54:24 <nerdlor> hey shapr
11:54:35 <nerdlor> not much new -- had a peek at the lambdabot sources
11:54:36 <nerdlor> woo!
11:54:43 <shapr> heh
11:54:48 <shapr> new plugin, just got it working this minute
11:54:53 <nerdlor> what's that?
11:55:00 <shapr> chess playing plugin
11:55:12 <nerdlor> wow
11:55:21 <shapr> I didn't write the code, just the plugin
11:55:36 <nerdlor> i see. seeing the lambdabot sources was interesting
11:55:44 <nerdlor> 'cause it's such an imperative problem
11:55:46 <nerdlor> (a bot, i mean)
11:55:47 <shapr> yah, it is
11:55:56 <nerdlor> so it's kinda ugly
11:56:06 <nerdlor> not the pure, beautiful haskell we see in books ;)
11:56:18 <nerdlor> another thing i found really interesting
11:56:28 <nerdlor> was the problem of making a modular system
11:56:31 <nerdlor> (plugins etc)
11:56:36 <nerdlor> in a really strongly-typed language
11:56:39 <shapr> part of the ugly could be blamed on me...
11:56:45 <shapr> I'm not a Haskell expert yet.
11:57:00 <nerdlor> wow, i never felt like such a Haskell newbie
11:57:09 <nerdlor> as when i saw the definition for the 'IRC' type
11:57:16 <shapr> yah, me too :-)
11:57:24 <nerdlor> Monad StateT Reader Writer... aarh!
11:57:24 <shapr> it's a monad transformer
11:57:33 <nerdlor> yep -- lots of lifting
11:57:36 <shapr> @board
11:57:37 <lambdabot-test>  r n b q k b n r
11:57:37 <lambdabot-test>  p p p p p p p p
11:57:37 <lambdabot-test>  - - - - - - - -
11:57:37 <lambdabot-test>  - - - - - - - -
11:57:37 <lambdabot-test>  - - - - - - - -
11:57:37 <lambdabot-test>  - - - - - - - -
11:57:37 <nerdlor> (heavy lifting!)
11:57:39 <lambdabot-test>  P P P P P P P P
11:57:41 <lambdabot-test>  R N B Q K B N R
11:57:45 <nerdlor> coolio!
11:57:48 <shapr> @validmoves
11:57:49 <lambdabot-test> [Ng1-h3,Ng1-f3,Nb1-c3,Nb1-a3,Ph2-h3,Ph2-h4,Pg2-g3,Pg2-g4,Pf2-f3,Pf2-f4,Pe2-e3,Pe2-e4,Pd2-d3,Pd2-d4,Pc2-c3,Pc2-c4,Pb2-b3,Pb2-b4,Pa2-a3,Pa2-a4]
11:57:50 <Marvin--> nerdlor: watch your back :-)
11:57:56 <shapr> @listcommands chess
11:57:57 <lambdabot-test> Module chess provides the following commands: ["ply","reset-chess","validmoves","board"]
11:58:05 <shapr> @ply Ng1-h3
11:58:06 <lambdabot-test> opponent moves: Pe7-e6
11:58:11 <mgoetze> chess sucks :)
11:58:17 <shapr> oops, I forgot to fix the irc-nick
11:58:29 <mgoetze> how about a lambdabot plugin for playing go instead?
11:58:37 <shapr> delYsid: what's a good seach depth to use?
11:58:48 <delYsid> what are you using right now?
11:58:49 <Marvin--> mgoetze: oh I don't know, maybe there are no good computer go players?
11:58:50 <shapr> mgoetze: ok, write a go playing program, and I'll write the plugin
11:58:55 <shapr> delYsid: I think I'm using two
11:59:15 <delYsid> shapr: 4 should be ok
11:59:16 <Darius> nerdlor: Go look at the types in EvalModule, like EvalMonad in LMEngine.hs or phiLambda in LambdaTerm.hs if you want to see scary
11:59:22 <mgoetze> Marvin--: gnugo could kick *your* butt :)
11:59:23 <shapr> delYsid: ok, will do
11:59:32 <Marvin--> mgoetze: *anyone* can kick my butt in go :)
11:59:35 <nerdlor> Darius: yeah, i looked briefly
11:59:49 <Marvin--> reminds me that I have to go buy a board
11:59:51 <nerdlor> i'm still super-newbie, so monads in general still dance around the fringes of my understanding
12:00:07 * Darius wonders if it's a good thing when the types are longer than the code...
12:00:23 <shapr> @quit
12:01:56 <shapr> yow, search depth of four takes forever for it to do a move
12:02:00 <shapr> @validmoves
12:02:00 <lambdabot> [Nh3-g1,Nh3-f4,Nh3-g5,Rh1-g1,Nb1-c3,Nb1-a3,Pg2-g3,Pg2-g4,Pf2-f3,Pf2-f4,Pe2-e3,Pe2-e4,Pd2-d3,Pd2-d4,Pc2-c3,Pc2-c4,Pb2-b3,Pb2-b4,Pa2-a3,Pa2-a4]
12:02:06 <shapr> @ply Nh3-g1
12:02:33 <lambdabot> opponent moves: Qd8-f6
12:02:41 <shapr> @yow
12:02:42 <lambdabot> Yow!  STYROFOAM..
12:02:48 <delYsid> @board
12:02:48 <lambdabot>  r n b - k b n r
12:02:48 <lambdabot>  p p p p - p p p
12:02:48 <lambdabot>  - - - - - q - -
12:02:48 <lambdabot>  - - - - p - - -
12:02:48 <lambdabot>  - - - - - - - -
12:02:49 <lambdabot>  - - - - - - - -
12:02:51 <lambdabot>  P P P P P P P P
12:02:53 <lambdabot>  R N B Q K B N R
12:03:05 <delYsid> @ply e2-e4
12:03:08 <delYsid> @yow
12:03:14 <delYsid> hmm :))))
12:03:18 <shapr> that's insane
12:03:32 <Darius> little problem...
12:03:34 <Heffalump> heh, needs multi-threading :-)
12:03:44 <lambdabot> opponent moves: Qf6-c6
12:03:44 <lambdabot> You mean you don't want to watch WRESTLING from ATLANTA?
12:04:10 <shapr> it's running on a 1533MHz box, and I'm using -O -fvia-C
12:04:29 <Darius> @board
12:04:30 <lambdabot>  r n b - k b n r
12:04:30 <lambdabot>  p p p p - p p p
12:04:30 <lambdabot>  - - q - - - - -
12:04:30 <lambdabot>  - - - - p - - -
12:04:30 <lambdabot>  - - - - P - - -
12:04:31 <lambdabot>  - - - - - - - -
12:04:33 <lambdabot>  P P P P - P P P
12:04:35 <lambdabot>  R N B Q K B N R
12:04:43 <Heffalump> can anyone join in? :-)
12:04:45 <Marvin--> spaaaaam
12:04:59 <shapr> is it my imagination, or did the board just flip around somehow?
12:05:02 <delYsid> @ply Nb1-c3
12:05:08 <Heffalump> it's your imagination
12:05:12 <shapr> ok, whew
12:05:52 <Marvin--> shapr: q is the queen, not the bishop ;)
12:06:03 * shapr pretends he can no longer read
12:06:07 <shapr> :-)
12:06:21 <lambdabot> opponent moves: Bf8-b4
12:07:12 * Marvin-- does evil things to cdebconf
12:07:59 <Marvin--> I saw the movie Stigmata yesterday, it was quite good
12:08:02 <shapr> delYsid: have you tried making Board an array?
12:08:18 <delYsid> not yet
12:08:26 * shapr reads up on arrays
12:08:36 <Marvin--> the ST arrays are fast and evil :-)
12:09:07 <shapr> delYsid's profiling info said that about half the time is spent in pieceAt, which looks up the piece on a certain square
12:09:18 <Heffalump> eek, you really should use an array then :-)
12:09:28 <shapr> Board is three lists
12:10:53 <Heffalump> three?
12:10:58 <shapr> iirc, Haskell arrays are O(1) lookup, yes?
12:11:05 <Darius> of course
12:11:30 <delYsid> Heffalump: White pieces, black pieces, and castling info
12:11:43 <Heffalump> ah.
12:11:49 <Heffalump> no wonder pieceAt is slow :-)
12:11:57 <Heffalump> what about en passant info?
12:12:08 <Heffalump> and 3-move/50-move rule info
12:12:18 <delYsid> yah yah..... :)
12:12:37 <Marvin--> 3-move/50-move?
12:12:47 <delYsid> after three same moves, drawn
12:12:54 <Marvin--> oh, right
12:12:55 <delYsid> after 50 moves without a capture, drawn
12:12:57 <Heffalump> not same move, same position, sorry
12:13:04 <Heffalump> and capture or pawn movement
12:13:10 <delYsid> ah yeah
12:17:28 <delYsid> so, should I just use (array (0,63) [(i,Nothing) | i <- [0..63]]) ?
12:20:00 <Riastradh> Shouldn't you use a two-dimensional array?
12:21:30 <Riastradh> i.e.,  array ((0, 7), (0, 7)) [((i,j), Nothing) | i <- [0..7], j <- [0..7]]
12:21:55 <delYsid> hmm, ok :)
12:24:09 <Heffalump> I suspect the 1D one is more likely to be efficient
12:24:10 <Marvin--> isn't listArray more efficient than array?
12:24:11 <mgoetze> actually, you should use a list with 64 elements
12:24:15 <Heffalump> but the different will probably be negligible
12:24:25 <Heffalump> s/different/difference/
12:24:28 <shapr> mgoetze: why do you say that?
12:24:50 * shapr wonders if strictifying the Board constructor will make any difference
12:24:56 <mgoetze> shapr: because lists are easier to work with, and probably more efficient too
12:25:05 <Heffalump> lists don't have random access
12:25:13 <witten> wash/cgi uses function transformations to wrap elements because lists aren't homogenous.. but couldn't they just wrap all html elements in lists?
12:25:23 <Marvin--> mgoetze: haven't you paid attention? the profiling showed that most of the time was spent looking up elements in lists
12:25:43 <mgoetze> nope, i haven't :)
12:25:50 <Heffalump> that's not entirely true, it showed that most of the time was spent looking up elements in a really unhelpful representation, that just happened to use lists
12:26:05 <Marvin--> well, true
12:26:09 <Heffalump> (since it's not just "find the nth element", but "check all elements to see if they're in this position")
12:26:24 <mgoetze> all modern chess programs use bitboards as far as i'm aware
12:26:52 <delYsid> yah
12:28:22 <mgoetze> then again, i haven't cared about chess programs for quite a while now :)
12:29:30 <shapr> arrays might be fast enough
12:30:29 <shapr> witten: you mean have a single HTML type or something?
12:31:03 <shapr> Heffalump: do you play realtime strategy games at all?
12:32:31 <shapr> oh, the Haskell Communities Report is putting out a call again
12:32:42 <witten> shapr: well, a single Element type or something, and then just have lists of lists to specify the document structure
12:33:06 <witten> what benefit do you get to using function composition, other than a warm fuzzy feeling?
12:33:32 <shapr> heh
12:35:10 <shapr> witten: I vaguely recall that WASH includes type-safe function/element composition checking
12:35:56 <shapr> Thiemann wrote a paper on WASH I think
12:36:07 <shapr> it'll probably have the answers to those questions
12:40:52 <witten> ok
12:41:00 <witten> I've read it
12:41:23 <witten> I wonder if you could do type-safe composition checking with the lists of lists
12:42:19 <witten> hm, I think you could, if you had a function to add to a list that had a type requirement
12:51:20 <shapr> supposedly the arrow preprocessor is supported by hmake
12:51:27 <shapr> anyone know the details of getting it to work?
12:52:28 <witten> not I
12:53:28 <shapr> witten: have you done stuff with wash? any opinions?
12:53:54 <Heffalump> shapr: wdym by realtime?
12:54:26 <shapr> Heffalump: command&conquer, starcraft, dark reign, etc
12:55:06 <Heffalump> ah, I played Red Alert a while back
12:55:22 <Heffalump> where while = before I started uni, so about 6 years
13:05:17 <shapr> hello again
13:44:07 <peti> Uh ... does anyone of you happen to be Shae Matjis? (Sorry, don't know his nick on IRC ...)
13:44:50 <Darius> shapr
13:45:13 <mgoetze> no, shapr is shae erisson
13:45:16 <Riastradh> Shae Matjis?  shapr is Shae Erisson, isn't he?
13:45:28 <peti> According to /whois he is. Thanks!
13:45:29 <Darius> Shae Matjis Erisson
13:45:34 <Riastradh> Oh.
13:46:19 <Heffalump> all very complicated :-)
13:47:02 <Darius> er Matijs
13:49:23 <peti> Oh well, he doesn't seem to be awake anyway. :-)
13:53:51 <Marvin--> mmm...porter
13:54:31 <andersca> porter duff?
13:56:00 <Marvin--> no, Carnegie porter
13:56:15 <andersca>     "Compositing Digital Images", T. Porter, T. Duff, SIGGRAPH '84 Conference Proceedings, Association for Computing Machinery, Volume 18, Number 3, July 1984.
13:59:35 <Marvin--> heh
14:49:32 * shapr returns momentarily
14:49:40 <jemfinch> howdy, shapr.
14:49:44 <shapr> y0 y0
14:49:48 <shapr> cool, peti was here
14:49:55 * jemfinch has a question, maybe you can answer it, maybe someone else can.
14:50:00 <shapr> ask away!
14:50:17 <shapr> heh, I'm Shae Matijs :-)
14:50:19 <shapr> nifty
14:50:22 <jemfinch> why did most (all?) haskell implementations go the way of dynamic lookup of typeclass "methods" instead of static code generation (ala C++ templates)?
14:50:56 <shapr> possibly because typeclasses were a later addition to Haskell?
14:51:04 <shapr> iirc, Simon PJ came up with the idea
14:51:19 <shapr> and they're mostly implemented by passing around a 'dictionary' of some flavor
14:51:42 <jemfinch> it seems for something as fundamental as ==, +, etc. you'd want to go static like C++ templates instead of dynamic like virtual method lookups.
14:52:00 * shapr dunno
14:52:09 <shapr> have you read the various papers that talk about typeclasses?
14:52:27 <jemfinch> no, not really.
14:52:41 <shapr> I suspect you will find more info in those paper than you really wanted :-)
14:53:26 <shapr> one point of interest, in the "Hair Shirt" retrospective Simon PJ says that typeclasses are the most interesting part of Haskell
14:53:33 <shapr> he said that's a surprising outcome
14:53:36 <jemfinch> they are.
14:53:50 <shapr> his retrospective is a PPT
14:54:02 <shapr> but I've converted it to a web presentation with OpenOffice
14:54:05 <jemfinch> I really don't care much about/for the pure functionality or lazy evaluation, but the typeclasses -- man, I wish I had those in SML.
14:54:06 <shapr> it's in my home dir
14:54:12 <jemfinch> link?
14:54:34 <shapr> http://kungens.kemi.fi/~shae/retro/siframes.html
14:56:32 <shapr> the Hair Shirt retrospective is available from his home page as PPT
14:57:02 <shapr> and the PPT looks much better in OpenPresenter (or whatever it's called) than the web presentation it exported.
14:57:05 <jemfinch> I like your HTML version better :)
14:57:37 <Darius> There's a PDF version (and I think a ps too) at the site
14:59:17 <shapr> jemfinch: there's a lot of details missing from the web presentation, you should read the real thing
14:59:30 <jemfinch> shapr: if KPresenter can handle it, I will.
14:59:31 <shapr> I will say that the "hair shirt" is one of my favorite Haskell documents so far.
15:02:55 <shapr> unlike most of the documents Simon PJ is written, this retrospective is less than academic, it's more about what's cool and fun in Haskell.
15:03:11 <shapr> That's what programming should be about imho ;-)
15:03:17 <shapr> Fun of Programming
15:05:03 <Darius> Hey if you google for "Wearing the hair shirt: a retrospective on Haskell", you get shapr's site
15:05:19 <shapr> cool!
15:05:20 * shapr looks
15:05:29 <Riastradh> shapr, not in just your opinion; I and Alan Perlis and many others share this opinion.
15:06:10 <shapr> Riastradh: have you tried PairProgramming?
15:06:22 <shapr> it's highly addictive
15:07:29 <Riastradh> Never heard of it.
15:07:51 <shapr> Riastradh: http://c2.com/cgi-bin/wiki?PairProgramming
15:09:06 <shapr> it's awesome
15:12:47 <Riastradh> @yow
15:12:48 <lambdabot> Yow!  Am I JOGGING yet??
15:12:57 * shapr watches lambdabot jog
15:13:29 <jemfinch> @yow
15:13:29 <lambdabot> Was my SOY LOAF left out in th'RAIN?  It tastes REAL GOOD!!
15:16:12 * shapr tries to have a normal schedule
15:16:15 <shapr> g'nite 
15:16:19 <shapr> @fact zzz
15:16:19 <lambdabot> Nothing
15:16:22 <shapr> @fact g'nite
15:16:22 <lambdabot> zzzz
15:16:23 <shapr> aha
15:16:38 <jemfinch> shapr: you should make failed lookups generate the fact response.
15:16:45 <jemfinch> so @g'night would return zzzz
15:35:00 <Darius> good 'ole gg=G
18:01:55 <ChilliX> Moin
18:02:56 <Igloo> Hey ChilliX! Long time no see
18:03:08 <ChilliX> Hi Igloo
18:03:12 <Igloo> How's life?
18:04:09 <ChilliX> I had a lot of work at uni and since 11 days we have a baby
18:04:18 <ChilliX> which kept us on the toes
18:04:21 <Igloo> Oh, congrats!
18:04:29 <ChilliX> Thanks!
18:05:31 <ChilliX> How about you?
18:06:33 <Igloo> Busy busy, trying to get my first paper to an acceptable (in the "Will be accepted" sense) state
18:07:05 <ChilliX> about your TH-based optimisations?
18:07:49 <Igloo> Either that or a paper about my experiences with TH and problems I've had
18:08:09 <Pseudonym> ChilliX, congrats.
18:08:19 <ChilliX> Pseudonym: thanks
18:08:29 <Pseudonym> Isn't it amazing how interesting a topic of conversation fecal material has become?
18:08:45 <Igloo> Did you get your ICFP submission accepted?
18:09:12 <ChilliX> Pseudonym: well, I still don't find it that interesting...
18:09:30 <Pseudonym> Oh, you will.
18:09:39 <ChilliX> Igloo: me? in the end, we didn't manage to submit :-(
18:09:45 <Igloo> Oh  :-(
18:10:22 <ChilliX> Igloo: a PhD student of mine is also working with TH
18:10:33 <Igloo> I think he might have e-mailed me a while back
18:10:36 <ChilliX> you may have seen him posting, name being Sean Seefried
18:10:47 <Igloo> Rings a bell, yes
18:11:10 <ChilliX> ok, when your paper is done, please send him a copy (or send it to me and I forward it)
18:11:21 <Igloo> Oh, he's the one using unboxed types with it
18:12:13 <Igloo> OK, will do
18:12:22 <ChilliX> thanks :-)
18:12:26 <Igloo> Oh, his original e-mail talked about pan - maybe I should tell him what I've done with that too
18:12:39 <ChilliX> sure, do that
18:14:51 * Igloo will probably be e-mailing around May 23rd  :-)
18:14:58 <ChilliX> :-)
18:15:28 <Igloo> What's he trying to optimise right now OOI?
18:17:02 <ChilliX> he is looking into implementing and optimising EDSLs with TH
18:17:31 <Igloo> Oh, right, cool
18:17:31 <ChilliX> hence, his interest in pan
18:17:43 <Igloo> *nod*
18:24:58 <Igloo> Oh, am I right in thinking 1.0RC8 is the latest FFI spec BTW? The webpage confused me slightly by talking about 1.0?
18:26:39 <ChilliX> yes, RC8 is the latest
18:26:45 <Igloo> Also, would it be possible to put a COPYING in the directory and a tarball on the webpage (at least when 1.0 is released). And would you have any objection to it being packaged for Debian?
18:27:18 <ChilliX> COPYING & tar ball: ok
18:27:30 <ChilliX> Debian: would be great if it'd be packaged for Debian
18:27:36 <Igloo> Cool, thanks  :-)
18:28:17 <ChilliX> Licence is the same as for the Haskell report before it was printed
18:28:39 <Igloo> Which is unchanged, isn't it?
18:29:23 <Igloo> It's in ffi.tex, but moving it out would just make it absolutely clear it covers everything and would give debian-legal no cause for complaint
18:29:28 <ChilliX> not sure whether it was entirely unchanged, but in any case still free
18:29:35 <ChilliX> (as in freedom)
18:29:42 <Igloo> *nod*
18:30:10 * Igloo bounces
18:30:25 <ChilliX> moving it out of ffi.tex surely make sense
18:30:29 <Igloo> Right, I think that's all the stored-up Chilli inquisition I had  :-)
18:31:28 <ChilliX> :-)
18:33:32 <ChilliX> btw, RC8 will not change much
18:33:46 <ChilliX> hence, any code you write against RC8 should work with the final thing
18:34:34 <Igloo> *nod*
18:42:00 <Riastradh> Are there any GUI toolkits for Haskell?
18:42:40 <Igloo> There ar a number linked from the tools and libraries page on haskell.org
18:43:49 <Darius> lambdabot: @topic
18:43:50 <lambdabot> Sorry, I don't know the command "topic", try "lambdabot: @listcommands"
18:43:59 <Darius> @listcommands topic
18:44:00 <lambdabot> Module topic provides the following commands: ["topic-tell","topic-cons","topic-snoc","topic-tail","topic-init"]
18:44:10 <Darius> @topic-tell
18:44:10 <lambdabot> don't know that channel
18:44:19 <Darius> @topic-tell #haskell
18:44:26 <Darius> gah
18:44:28 <Smerdyakov> @topic-tell #haskell
18:44:38 <Igloo> You can probably just do /topic, you know  :-)
18:44:39 <Darius> @listchans
18:44:40 <lambdabot> I am on these channels: ["#haskell","#joy","#widian"]
18:44:55 <Igloo> Or maybe /topic #haskell if that doesn't work
18:47:02 <Riastradh> What GUI toolkit would people here suggest?
18:47:10 <Igloo> For what?
18:47:28 <Riastradh> For, say, an Emacs clone.
18:47:46 <lament> An Emacs clone!!!!!
18:47:48 <Igloo> I thought Chilli's gtk+hs was best for simple windows and buttons and things
18:48:12 <Riastradh> lament, not another heart attack!
18:48:25 * Riastradh didn't say he would actually try to write one, but just as an example.
19:08:42 * Igloo yawns and goes to bed
19:17:07 <ChilliX> 'night Igloo
22:38:43 <jemfinch> shapr: you in?
22:40:03 <mgoetze> jemfinch: i'm sure he's sleeping
22:40:14 * jemfinch doesn't pay attention to what time it is in Europe.
22:40:20 <jemfinch> heck, it never does any good.
22:40:31 <jemfinch> I'm up sometimes at 4-5am, why shouldn't he be? :)
22:44:12 <mgoetze> jemfinch: because he went to sleep well past midnight :)
22:47:25 <Pseudonym> Correction: He's sometimes still up at 4-5am.
22:48:55 <mgoetze> yeah, well, it's almost 8 am, anyway
