00:03:28 <debug> it is a wonderful day
00:16:13 <Pseudonym> It is?
00:16:42 <Marvin--> yes, in Göteborg it is
00:16:45 <Marvin--> wait a second
00:16:55 <Marvin--> debug: what the heck are you doing up this early? :) turned the day around, have we? ;)
00:16:58 <Pseudonym> Mind you, I started my day by getting my 3-year-old to have a blood test.
00:17:08 <Marvin--> Pseudonym: sounds tricky :)
00:17:20 <debug> Marvin--: I got up at midnight
00:17:21 <Pseudonym> Surprisingly straightforward.
00:17:29 <Pseudonym> All was forgiven when she got a chocolate.
00:17:53 <Marvin--> hehe :)
00:17:58 <debug> in sweden we have a 4-year-old-test
00:18:02 <debug> I almost didn't pass it
00:18:19 <Pseudonym> What kind of test?
00:18:31 <debug> you're supposed to draw a picture of a human being, but I only drew cars with lots of exhaust smoke
00:18:34 <Earl> stupid Gtk-Perl 7.0008
00:18:39 * Pseudonym laughs
00:18:40 <Earl> Why is it being so troublesome.
00:18:46 <Pseudonym> This was for a lot of things.
00:18:56 <debug> ok
00:18:58 <Pseudonym> Anaemia, chromosome markup, fragile X, uhm... somethign else.
00:19:20 * debug has Cronical Debuggian Syndrome
00:20:05 <Pseudonym> I have absent-minded geek syndrome.
00:20:16 <Pseudonym> It has a technical term, but I don't know what it is.
00:20:37 <debug> actually, there's something called Cronical Fatigue Syndrome, but I think I
00:20:41 <debug> 'm just lazy
00:20:57 <Pseudonym> Or you don't sleep enough?
00:21:02 <debug> I can do 18 hours of panic coding in school, but then I have to sleep most of the time for a couple of days
00:21:09 <debug> perhaps
00:21:10 * Pseudonym nods
00:21:19 <Pseudonym> My problem is I have no memory for the concrete.
00:21:38 <Pseudonym> Lots of memory for the abstract, though.
00:21:39 <debug> people appear in the morning and say "oh, you're already here", and I go "how do you mean? I never went home"
00:21:45 * Pseudonym laughs
00:21:45 <debug> ok
00:22:02 <debug> my memory got fucked up when I started at university in 98
00:22:10 <Pseudonym> I can derive the fixpoint theorem for you, but I can't remember what I'm supposed to be doing right now.
00:22:17 <debug> :)
00:22:39 <debug> you're probably supposed to go to bed soon (?)
00:22:50 <Pseudonym> Let's see... 17:22.
00:22:55 <debug> ah
00:22:57 <Pseudonym> I'm probably supposed to go home.
00:22:59 <debug> I thought it was 19
00:23:46 <Marvin--> Pseudonym: sounds like me
00:23:53 <Marvin--> high int, low wis
00:24:00 <Marvin--> wait a sec, too much D&D
00:24:03 <debug> :)
00:24:05 * Pseudonym LOL
00:24:07 <Pseudonym> Not quite.
00:24:25 <Pseudonym> It's what causes the stereotypical "absent-minded professor".
00:24:38 <Marvin--> yeah, I know, I've been accused of it too :)
00:24:42 <Pseudonym> There you go.
00:24:43 <Marvin--> not that I'm a professor
00:24:48 <Pseudonym> Me neither.
00:24:57 <Marvin--> PhD position interview on Thursday though *gulp*
00:25:01 <debug> Marvin--: have you seen the new workstations at school?
00:25:09 <Marvin--> debug: no, have they *finally* gotten there?
00:25:12 <debug> yes
00:25:17 <debug> 0.9GHz ultrasparc III
00:25:25 <debug> 1 GB ram in each machine
00:25:29 <Pseudonym> Marvin: Were you ever accused of "not applying yourself" or something like that?
00:25:31 <Marvin--> debug: only delayed...let's see...TWO FUCKING YEARS
00:25:38 <debug> :)
00:25:39 <Marvin--> Pseudonym: no, not really
00:25:42 <Pseudonym> OK.
00:25:42 <debug> better than nothing
00:25:53 <Pseudonym> Just curious.
00:25:54 <Marvin--> yah
00:26:00 <Marvin--> which labs?
00:26:04 <debug> C, I think
00:26:06 <debug> or J
00:26:11 <debug> they renamed them
00:26:15 <debug> close to the jolt room
00:26:16 <Marvin--> yeah, fucking stupid rename
00:26:21 <Marvin--> now nobody knows at all
00:26:28 <debug> jolt room --- sunray client room --- new workstations
00:26:29 <Marvin--> ok, next to the ray room
00:26:32 <debug> yes
00:26:41 <Marvin--> that's what I call C
00:26:44 <debug> ok
00:26:51 <Marvin--> don't know what it's called these days
00:27:02 <debug> I always start at the jolt room, the Nervous Center of the building :) and go from there
00:27:34 <Marvin--> of all stupid ideas... "damn, wrong lab room assignment in the schedule, should we fix the schedule? Nah, we'll just rename the labs"
00:27:35 <Marvin--> !!
00:27:43 <debug> hint: compile C programs with   -fast -xarch=v9  and you'll get good performance on the new machines
00:27:46 <Marvin--> WHAT WERE THEY THINKING
00:28:05 * Marvin-- is entering OF mode
00:28:07 <debug> maybe it was just a summer employee
00:28:23 <debug> who was testing the printers
00:28:35 <debug> and printed "This was lab C, it is J now" for fun
00:28:45 <Marvin--> heh, I'm testing the sound of the loudspeakers in my laptop
00:28:46 <debug> and then someone found the papers and put them up all over school
00:28:48 <Marvin--> Blind Guardian in a tin can
00:28:54 <debug> BG are good
00:28:58 <Marvin--> oh yes
00:29:39 <dennisb> I havn't heard about a renaming of rooms, maybe it was done the 1 april
00:30:00 <Marvin--> no, last semester
00:30:02 <debug> they have been mixed up for many months
00:30:08 <Marvin--> the entire fall
00:30:13 <Marvin--> I'm serious
00:30:52 <Marvin--> I think the story was that they'd assigned maths student with matlab labs to B+C
00:31:03 <Marvin--> how fun do you think it is to run ten instances of matlab on a sun ray?
00:31:26 <Marvin--> so instead of fixing the schedule to move them to I+J instead, they *renamed* B+C to I+J and vice versa
00:32:22 <debug> :)
00:33:12 <dennisb> sounds like a great idea
00:34:08 <debug> Marvin--: what I don't get is why they have such a lousy machine as the sunray host... it's a dual 250MHz I think
00:34:22 <debug> for 8 clients
00:34:52 <Marvin--> debug: yah, it sucks badly
00:35:05 <Marvin--> being alone on it is decent, but...
00:35:09 <debug> just using 1 of the new workstations would make the whole system go several time faster
00:35:10 <jlk> Hello. can someone please tell me how to manage a stateful system in haskell without having to re run function to get the state values?
00:35:31 <Marvin--> jlk: use a state monad I guess
00:36:35 <jlk> k
00:42:58 <debug> if I use monads to implement things such as loops, is it guaranteed that I will not run out of stack space, or is that implementation dependant?
00:44:08 <Marvin--> I don't really know
00:45:04 <debug> so it is not possible to make a program run forever?
00:45:23 <Marvin--> I don't know :)
00:45:29 <debug> ok
00:45:37 <dennisb> if you write tail recursive functions it will work
00:45:45 <Marvin--> try writing a program with a tight loop and monitor the resource usage
00:46:01 <debug> dennisb: but is it guaranteed in haskell, in all interpreters/compilers?
00:46:48 <dennisb> it might not be guranteed by the language definition, but all implementations are carefully constructed to make tail recursive functions to work
00:46:57 <debug> ok
00:47:34 <dennisb> that there actually is not formal semantics for haskell makes it hard to talk about what is guaranteed by haskell
00:47:56 <dennisb> in practice it's no problem
00:48:13 <debug> it would be if you write things like system daemons in haskell
00:48:13 <debug> :)
00:48:21 <dennisb> I've done that, it works
00:49:00 <dennisb> there is a nice web server implemented in haskell, that is an example
00:49:37 <dennisb> I havn't read the code of the webserver, but i'm sure it's nice :-)
00:49:47 <Marvin--> no, it isn't :)
00:49:57 <Marvin--> it's hideous
00:50:00 * debug has it in front of him
00:50:22 <dennisb> Ooh :-)
00:50:29 <Marvin--> I think I cleaned it up somewhat by moving a lot of the functionality into plugins, but it's still a mess
00:50:54 <dennisb> But it's small and not to slow I assume
00:52:00 <Marvin--> in terms of code size? 3kloc
00:52:01 <dennisb> Still, tail recursive functions use no stack, that is guaranteed by the implementations. It would be an disaster otherwise
00:52:35 <jlk> if you say:  instance Functor Tree  what is Functor, Tree, and what gets done, how is it used?
00:53:15 <dennisb> about loops and things like that, haskell programmers usually don't think about loops. We have higher order functions that is easier to use
00:53:25 <dennisb> Functor is the class
00:53:42 <dennisb> Tree is the datatype that you now say is in the class Functor
00:53:44 <jlk> so Functor is set up with 'class'?
00:54:09 <dennisb> somewhere there is a declaration: class Functor a where ....
00:54:39 <dennisb> a defintion that says what it means for the type "a" to be a Functor
00:55:01 <dennisb> in your instance Tree is the a in the class defintion
00:56:33 <dennisb> http://www.haskell.org/onlinelibrary/standard-prelude.html#$tFunctor
00:57:45 <dennisb> so in you example, to make Tree into a member of the Functor class you have to define the function fmap :: (a->b) -> Tree a -> Tree b
00:58:01 <jlk> so for instance Functor Tree g , g is a tpye parameter to data type Tree of class functor?
00:59:24 <dennisb> It should be something like: instance Functor Tree where fmap g tree = ....
01:00:12 <jlk> oh.
01:00:46 <dennisb> and this fmap should have type: (a->b) -> Tree a -> Tree b
01:01:16 <dennisb> if you make List into a functor then fmap should have type:  (a->b) -> [a] -> [b]
01:01:20 <dennisb> and so on
01:07:34 <jlk> so fmap takes (a->b) as argument 1, Tree a as argument 2 and returns Tree b.
01:08:08 <dennisb> yes
01:08:20 <jlk> what is functor ?
01:08:45 <dennisb> It's a class (called Functor in haskell with captial F)
01:09:24 <jlk> What's is ideal purpose?
01:10:08 <jlk> what is the compression of code in haskell in comparison to lisp, java?
01:10:51 <dennisb> if you have a datatype that contians values (like a tree, list, ...) you can use the functor to change the values and it works on all these datastructors
01:11:04 <dennisb> you can use the same function for both trees and lists
01:11:18 <jlk> ah. 
01:11:24 <jlk> that explains that.
01:11:50 <dennisb> f datastructor = fmap (+1) datastructor
01:12:02 <dennisb> that functions takes a datastructor with numbers inside and add 1 to each number
01:12:31 <dennisb> hmm, datastructor is probably not an english word...
01:13:07 <Marvin--> not swedish either!
01:14:07 <dennisb> that I know :-)
01:14:44 <dennisb> data structure was what I wanted to write, but it's just a variable. I'm allowed to call it anything I want to
01:15:02 <Marvin--> heh
01:15:40 <jlk> hehe.
01:15:47 <jlk> k thanks, guys.
01:15:50 <jlk> bye.
01:40:15 <Marvin--> sheesh, wonder how many more times Reiner is going to send out updated schedules for the interviews
01:46:45 <debug> is there a lot of competition?
01:47:58 <Marvin--> don't know, he's sent out a lot of updates because of schedule changes, mainly in the interviewer groups
01:49:32 <debug> I don't feel like I belong at chalmers, and I don't feel too much at home at MC either :-/
01:50:03 <debug> but it would be nice to study for a PhD some day
01:50:41 <Marvin--> that kinda demands that you survive the undergrad studies :)
01:51:48 <debug> we didn't have any student counceler when I started in 2001, so I had to take all the basic courses again
01:52:01 <debug> which wasn't very exciting at all, so I just got G in most of those courses
01:53:00 <debug> at least now I'm allowed to take some interesting courses, now that we have our counceler back
01:53:37 * debug needs a break from the studies
01:53:43 <debug> maybe I should sell hot dogs for a year
01:54:27 <debug> Marvin--: if I'm motivated, I can study
04:10:32 <andersca> Marvin--: tried the new computers at mc?
04:10:38 <Marvin--> nope, not yet
04:10:46 <andersca> they're sweet
04:10:54 <Marvin--> ... and two years later than planned
04:11:12 <andersca> I don't care :)
04:11:13 <mgoetze> mc?
04:11:26 <Marvin--> mathematical centre
04:11:33 <mgoetze> ah
04:11:53 <Marvin--> the building that maths and cs share here (though cs are moving out within a year)
04:12:53 <mgoetze> yeah, get rid of those stupid wanna-be mathematicians so that all the real ones can work properly! lol
04:14:44 <Marvin--> it's more an issue of the building being too expensive
04:14:47 <Marvin--> (and too small)
04:15:27 <mgoetze> but, uhm, it's already been built, right? so what would be so expensive about it? (electricity?)
04:15:37 <Marvin--> the rent
04:15:48 <Marvin--> it's owned by "academic buildings"
04:15:59 <mgoetze> oh, you rent your buildings? well, that sucks :)
04:16:09 <andersca> whose purpose is to have cheap buildings available for the university
04:16:11 <Marvin--> I don't quite understand the system
04:16:16 <Marvin--> exactly
04:16:20 <Marvin--> they fail miserably at times
04:16:56 <Marvin--> maybe I should make sure that my program works before demonstrating it to Koen
04:17:11 <andersca> can you prove it using your program?
04:17:12 <andersca> :)
04:17:29 <Marvin--> not really, no :)
04:23:05 <Marvin--> seems to be working
04:23:29 <Marvin--> fairly well anyway :)
04:29:06 <shapr> hoi
04:29:12 <shapr> hoe gaat?
04:29:16 <mgoetze> gut
04:29:27 * andersca bouces
04:29:30 <dark> alles goed :)
04:29:32 <andersca> soon I'll get my keyboard
04:29:40 <mgoetze> oh, it's goed, is it? :)
04:30:01 <shapr> I got the bill for my kinesis today.
04:30:45 <shapr> Now I want the keyboard :-/
04:30:47 <andersca> shapr: me too
04:30:51 <andersca> 289$
04:30:56 <shapr> yup
04:30:58 <shapr> samma har
04:31:09 <andersca> shipping cost was very expensive though :/
04:31:18 <shapr> yah $40
04:31:24 <shapr> it was free two years ago
04:40:38 <shapr> hej polli 
04:40:45 <polli> shapr: tjena :)
04:40:48 <shapr> hur är det med dig?
04:40:56 <polli> bara bra, själv då?
04:41:18 * shapr looks up själv
04:41:28 <mgoetze> what's a med dig?
04:41:38 <shapr> "with you"
04:41:44 <mgoetze> ah
04:41:57 <shapr> polli: samma, bara bra
04:42:02 <polli> shapr: fint :)
04:42:10 <shapr> polli: kan du skriva Haskell?
04:42:43 <mgoetze> if not, you ought to learn!
04:43:10 <shapr> Pseudonym: yello
04:43:11 <polli> shapr: jodå, jag har kodat lite haskell
04:43:34 <shapr> är din kode online?
04:43:42 <shapr> i web?
04:43:43 <polli> shapr: nope
04:43:45 <mgoetze> is "lite" something like "little"?
04:43:47 <polli> på webben
04:43:55 <shapr> ah, på webben, tack
04:44:00 <shapr> mgoetze: yes, exactly
04:44:06 <shapr> precis 
04:44:12 <mgoetze> and what's tack?
04:44:16 <shapr> thanks
04:44:37 <shapr> actually it's singular
04:44:41 <shapr> tackar is thanks
04:45:13 * mgoetze doesn't quite understand how you would distinguish sing and pl there
04:45:25 <mgoetze> do you say tackar when you're thanking for more than one thing?
04:45:32 <shapr> polli: vill du skriva fler Haskell?
04:45:35 <mgoetze> or when you are saying it to more than one person?
04:45:35 <shapr> mgoetze: I have no idea.
04:45:53 <mgoetze> shapr: well, there ought to be a few people in the channel who know :)\
04:46:00 <shapr> lambdabot: @fact svenska
04:46:00 <lambdabot> Nothing
04:46:04 <shapr> lambdabot: @fact hej
04:46:04 <lambdabot> jag kan inte talar svenska
04:46:10 <shapr> oh, sorry
04:46:34 <shapr> lambdabot: @fact hei
04:46:34 <lambdabot> minä ei puhu suomea
04:46:37 <shapr> hm
04:46:43 <shapr> lambdabot: @fact hoi
04:46:44 <lambdabot> Nothing
04:46:49 <polli> mgoetze: both works
04:46:57 <shapr> lambdabot: @fact hi
04:46:57 <lambdabot> Nothing
04:48:25 <mgoetze> is lambdabot saying that he does or that he does not understand those languages?
04:48:41 <shapr> He's saying he can't speak those languages
04:48:46 <shapr> lambdabot: @fact hi
04:48:47 <lambdabot> Nothing
04:48:56 <shapr> lambdabot: @fact hi I cannot speak english.
04:48:58 <lambdabot> set hi to I cannot speak english.
04:49:15 <mgoetze> lambdabot: @fact hallo Ich kann leider kein Deutsch.
04:49:15 <lambdabot> set hallo to Ich kann leider kein Deutsch.
04:49:22 * shapr grins
04:49:25 <shapr> @fact hallo
04:49:25 <lambdabot> ich spreche nicht deutsch, Ich kann leider kein Deutsch.
04:49:31 <shapr> heh
04:49:39 <shapr> @fact coi
04:49:40 <lambdabot> mi na ka'erta'a fo la lojban
04:49:50 <mgoetze> that first one isn't very good :)
04:49:57 <shapr> lambdabot can't speak lojban either.
04:50:18 <mgoetze> lambdabot: @fact banjour
04:50:18 <lambdabot> Nothing
04:50:21 <mgoetze> lambdabot: @fact bansoir
04:50:21 <lambdabot> Nothing
04:50:23 <mgoetze> er
04:50:27 <mgoetze> lambdabot: @fact bonjour
04:50:28 <lambdabot> je ne parler pas francais
04:50:33 * mgoetze kicks self.
04:50:42 <shapr> we don't either it seems :-)
04:51:03 <mgoetze> that's wrong, parler is the infinitive, it should be "Je ne parle pas francais."
04:51:53 <shapr> well, fix it?
04:52:27 <mgoetze> how?
04:52:31 <mgoetze> oh
04:52:36 <shapr> @fact delete bonjour
04:52:37 <lambdabot> deleted bonjour
04:52:38 <mgoetze> lambdabot: @forget bonjour
04:52:39 <lambdabot> Sorry, I don't know the command "forget", try "lambdabot: @listcommands"
04:52:40 <andersca> does ghc or hugs come with QuickCheck?
04:52:46 <shapr> andersca: yes, GHC does.
04:52:52 <andersca> cool
04:52:59 <mgoetze> lambdabot: @fact bonjour Je ne parle pas francais.
04:53:00 <lambdabot> set bonjour to Je ne parle pas francais.
04:53:34 <shapr> andersca: http://www.haskell.org/ghc/docs/latest/html/base/Debug.QuickCheck.html
04:54:19 <shapr> I got the latest histogram code from Ketil this morning
04:54:37 <shapr> Now I have the needed code to make a spam filter
04:55:33 <shapr> I wonder if QuickCheck tests for a spam filter would have to generate valid spam.
04:57:15 <shapr> andersca: that looks like a fun course
04:58:08 <shapr> they had Ulf Wiger show up and talk about Erlang
04:58:10 <shapr> that's awesome
04:58:50 <shapr> @fact y0
04:58:50 <lambdabot> Nothing
04:59:08 <shapr> @fact y0 1 d0n'7 sp34k l33T
04:59:09 <lambdabot> set y0 to 1 d0n\'7 sp34k l33T
04:59:17 <shapr> @searchml erlang
04:59:18 <lambdabot> 1714 1713 1707 860 852 785 122 121 120 116
05:00:49 <mgoetze> searchwhat?
05:00:57 <shapr> just haskell@ right now
05:01:11 <shapr> @showml 1714
05:01:12 <lambdabot> Hello all,
05:01:12 <lambdabot> The Learning Haskell page has moved to a better place, the official Haskell
05:01:12 <lambdabot> homepage. You can now find it at
05:01:13 <lambdabot> http://www.haskell.org/learning.html
05:01:16 <shapr> @more
05:01:17 <lambdabot> and through a link on the Haskell homepage index.
05:01:21 <lambdabot> Jerzy wrote:
05:01:25 <lambdabot> > I would add some significant papers, such as John Hughes'
05:01:30 <shapr> @more
05:01:30 <lambdabot> > "Why functional programming matters", etc.
05:01:31 <lambdabot> I've added that paper to the introduction. Other suggestions are welcome.
05:01:35 <lambdabot> > and perhaps - for some, a little bit advanced readers - some
05:01:37 <lambdabot> > other papers, introducing type classes, perhaps monads (Wadler)
05:02:04 <shapr> mgoetze: I'll try to finish multiple mailing list searching this evening.
05:02:30 <mgoetze> lambdabot: @searchml obfuscated
05:02:31 <lambdabot> 1885 1736 1729 1718 1715
05:02:51 <mgoetze> lambdabot: @showml 1885
05:02:52 <lambdabot> | > The reason, which is thoroughly explained in Simon Peyton-Jones'
05:02:52 <lambdabot> | > message, is that the given type signature is wrong: it should read
05:02:52 <lambdabot> | > 	f1 :: (exists b. (C Int b) => Int -> b)
05:02:52 <lambdabot> > Can you give an example of its use?
05:03:01 <mgoetze> @more
05:03:02 <lambdabot> Yes, I can.
05:03:02 <lambdabot> > class (Show a, Show b) => C a b | a -> b where
05:03:02 <lambdabot> >     doit:: a -> b -> String
05:03:04 <lambdabot>    
05:03:08 <mgoetze> @more
05:03:08 <lambdabot> > instance C Int Int where
05:03:08 <lambdabot> >    doit a b = (show a)
05:03:12 <lambdabot> > instance C Bool Bool where
05:03:14 <lambdabot> >    doit a b = if a then "everything" else "nothing"
05:03:16 <mgoetze> hm, doesn't look very obfuscated
05:03:42 <shapr> oh, and @commands don't need to have lambdabot: at the beginning anymore
05:03:55 <mgoetze> @fortune
05:03:56 <lambdabot> There was an old Indian belief that by making love on the hide of
05:03:56 <lambdabot> their favorite animal, one could guarantee the health and prosperity
05:03:56 <lambdabot> of the offspring conceived thereupon.  And so it goes that one Indian
05:03:56 <lambdabot> couple made love on a buffalo  hide.  Nine months later, they were
05:03:56 <lambdabot> blessed with a healthy baby son.  Yet another couple huddled together
05:03:57 <lambdabot> on the hide of a deer and they too were blessed with a very healthy
05:04:08 <shapr> the reason lambdabot: @command is still there, is for when there are multiple lambdabots on the same channel
05:04:14 <shapr> then you can speak to them separately
05:04:15 <shapr> @more
05:04:16 <lambdabot> baby son.  But a third couple, whose favorite animal was a hippopotamus,
05:04:16 <lambdabot> were blessed with not one, but TWO very healthy baby sons at the conclusion
05:04:16 <lambdabot> of the nine month interval.  All of which proves the old theorem that:
05:04:16 <lambdabot> The sons of the squaw of the hippopotamus are equal to the sons of
05:04:16 <lambdabot> the squaws of the other two hides.
05:05:18 <shapr> what is that? pythaganon's theorem?
05:05:27 <mgoetze> i think so
05:06:47 <shapr> so, what other plugins does lambdabot need?
05:07:07 <shapr> We need to have a few more plugins before the "feeping creaturitis" release.
05:07:48 <andersca> uptime!
05:07:54 <shapr> oh, good idea
05:09:00 <mgoetze> shapr: texinfo plugin, as in @info hello Concept Index
05:09:27 <mgoetze> then, if you package it for debian, you can say Provides: info-browser
05:09:33 <shapr> whoa!
05:09:37 <shapr> that's an awesome idea!
05:10:09 <andersca> haha
05:10:17 <mgoetze> shapr: just thought of it because you mentioned feature creep, which is discussed in the GNU Hello World documentation :)
05:16:32 <dark> shapr: No application is complete until it can send mail.
05:17:20 <shapr> good point
05:17:32 <shapr> polli_: jag bor i Boden. Var bor du?
05:18:08 <mgoetze> shapr: i think it should only accept some commands from people who are +v
05:18:19 <polli_> shapr: Göteborg
05:18:57 <shapr> jag har inte åkat till Göteborg.
05:19:36 <polli> shapr: jag har inte varit i Boden heller
05:19:39 <shapr> Jag ska åka till Göteborge när ICFP/HW.
05:19:45 <dark> I've heard that Göteborg's main export is music.
05:19:52 <mgoetze> shapr: for instance, @fact delete and @topic
05:20:14 <shapr> mgoetze: do you want to add support for that?
05:20:25 <mgoetze> i, uhm
05:20:31 <shapr> lambdabot doesn't have any code to check user settings
05:20:32 * mgoetze is scared of code which contains monads.
05:20:35 <shapr> but it would be easy code to add
05:21:16 --- mode: mgoetze set +vvv andersca dark dennisb
05:21:30 --- mode: mgoetze set +vvv emu Igloo mgoetze
05:21:46 --- mode: mgoetze set +vvv Pseudonym Riastradh shapr
05:22:03 --- mode: mgoetze set +v SyntaxPolice
05:22:07 * shapr grins
05:22:17 <dark> I bet those aren't permanent, though.
05:22:21 <mgoetze> shapr: well, maybe i'll have a look at it later today :)
05:22:25 <shapr> mgoetze: ok
05:22:32 <mgoetze> dark: you can get ChanServ to autovoice people, though
05:23:46 <dark> In any case, I don't see why lambdabot should have greater access limits than the topic itself.
05:24:53 <mgoetze> dark: hm, you're saying that lambdabot shouldn't be allowed to change the topic if other people can't?
05:25:03 <shapr> well, user mode checking would be useful code in any case
05:25:26 <dark> I'm saying that we've never limited /topic commands before, so why should we start now?
05:26:47 <shapr> the topic doesn't change much
05:26:56 <shapr> so I don't if it's important one way or the other.
05:27:15 <mgoetze> yeah but i think it would be good for things like @fact delete at least
05:27:37 <mgoetze> and other channels might care about @topic access restrictions, if we ever manage to get other people to use lambdabot :)
05:27:52 * dark nudges shapr about the wiki spirit.
05:28:11 <shapr> dark: I agree
05:28:38 <shapr> also, if someone is motivated enough about something to write the code to make it happen, I'm willing to try it their way.
05:29:04 <shapr> dark: what do you think?
05:30:01 <dark> Well, yeah.  It's fine to have the code for it.  I just don't think we should use it :)
05:30:42 <shapr> well, let's see how it goes.
05:31:14 <mgoetze> let's see if someone even writes it :)
05:32:57 <andersca> hmm, quickcheck is really cool
05:40:05 <dark> Every time I get back to uncc I'm completely bewildered about what I was doing with it.
05:40:12 <dark> This may be a bad sign :)
05:40:42 * dark greps for FIXME.
05:41:43 <andersca> I WANT MY KEYBOARD
05:49:00 <wottt> hi can ne1 tell me how i would get the hexadecimal value of a character?
05:54:33 <wottt> ??
05:56:00 <dark> That's two steps.
05:56:14 <dark> First you use ord to get the numerical value of a character.
05:56:29 <wottt> yep
05:56:52 <wottt> then how would i get the hexadecimal value of the number?
05:57:01 <dark> Then you use a function for printing a number in hexadecimal.  There seems to be a showHex in the module Numeric that comes with ghc.
05:58:22 <wottt> i dont think i am able to use that, is there ne other way which i can convert a digit to its hexadecimal value?
05:58:51 <dark> If this is homework, you're probably expected to write one yourself :)
05:59:17 <wottt> yea, your probably right
06:03:23 <shapr> andersca: HAVE KEYBOARD
06:03:36 * shapr installs
06:06:07 <shapr> mmm
06:08:33 <dark> shapr: Now you need to initiate it.
06:08:51 * shapr pours some coffee into his to initiate it
06:08:51 <dark> I suggest a light sprinkling of cookie crumbs, followed by random spatterings of soft drink.
06:08:58 <dark> Well, I guess you can do that too.
06:09:27 <shapr> bea looked at the old one and the new one and said "was the old one white too when you first got it?"
06:09:37 <dark> Heh.
06:09:47 <dark> My girlfriend complains when she has to use my keyboard.
06:09:54 <shapr> why?
06:10:07 <dark> Some of the keys don't work to her satisfaction :)
06:10:11 <shapr> oh
06:10:19 <dark> I guess she's not used to the "pound it harder" method of male keyboard usage.
06:10:27 <shapr> I'm giving this one to bea when the other one gets repaired
06:11:16 <shapr> mmm, feels so nice
06:13:10 <dark> "Dr. O'Shea estimates that a fully grown Mesonychoteuthis would be more than twenty yards long, making it longer than the sperm whales that are believed to be the only predators of the fully grown squids. Most existing calamari recipes are inadequate to cope with a squid of this size."
06:14:27 * shapr quickly writes a sci-fi novel about how the sperm whales threw off the yoke of the enslaving Mesonychoteuthis, and wiped out the species
06:15:03 <dark> shapr: Rename them to aboleths and you have a TSR module :)
06:15:13 <shapr> yah, good idea
06:25:33 * shapr bounces furiously
06:25:39 <shapr> I CAN TYPE AGAIN
06:51:54 <shapr> @hello
06:51:54 <lambdabot> Hello world. 
06:51:59 <shapr> @listcommands
06:52:00 <lambdabot> I react to the following commands: ["define","definitions","echo","eval","fact","fortune","get-definition","goodbye","hello","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","quit","searchml","set-fuel","showml","state","topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type"]
07:33:18 <shapr> ahem
07:33:31 <mgoetze> hm?
07:33:38 * shapr boings
07:33:39 --- mode: mgoetze set +vv Igloo shapr
07:33:49 <mgoetze> shapr: using sarge now, or what?
07:33:54 <shapr> shapr + v = shaprv?
07:33:56 <shapr> er
07:34:12 <shapr> no, sid
07:34:34 <shapr> where does sid fit in nowadays?
07:34:34 <Igloo> Why'd you have ot quit to upgrade, shapr?
07:34:41 <shapr> Igloo: I had to reboot emacs.
07:34:56 <shapr> and I wanted to try some gnome themes =)
07:34:57 <Igloo> Ah
07:36:36 <shapr> I bet we could turn lambdabot into an irc client.....
07:37:34 <Igloo> You'd probably want termcap bindings or something, but that should be easy enough with the FFI
07:37:42 <Igloo> Or a GUI client
07:37:42 <shapr> termcap?
07:37:48 <dark> The various curses modules?
07:37:49 <shapr> yah, I was thinking about gtk
07:38:00 <shapr> dark: we still need a single good one
07:38:15 <shapr> single integrated curses module that is
07:38:25 <dark> shapr: We should probably find three or four that are in actual use, and combine their features.  IMO that's the best way to make a library.
07:38:26 <Igloo> I think that's the one that allows you to do things like "move cursor to (x, y)" via a standard interface. Yeah, true, curses would do it too
07:39:16 <Igloo> What would be really nice is a description of curses it's easy to throw TH at  :-)
07:39:21 <dark> You pretty much need curses to make useful use of termcap.  Otherwise there's so many little exceptions to deal with.  nethack is the only program I know that uses termcap directly.
07:41:07 <shapr> dark: do you know of more than one curses binding for Haskell?
07:41:17 <shapr> Igloo: how could TH help a curses binding?
07:41:54 <Igloo> It means you don't need to write the same stubs and interface bits by hand for each function
07:44:10 <shapr> I'll have to try that.
07:44:19 <dark> shapr: There's mine in Mage, there's the one for tetris, there's Igloo's.
07:44:33 <shapr> ah
07:45:46 <dark> They're all designed for different roles, which is why I think combining their features is the way to go.  Then you'll have a generally useful Curses module.
07:45:48 <Igloo> Curses.hsc in http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Hetris/Hetris-0.1.0-th-1.tar.gz uses TH to make the foreign import declarations (as well as the .c and .h interface files) for acs_block, acs_hline, acs_vline and acs_corner
07:46:28 <shapr> isn't tetris == Igloo's ?
07:46:50 <Igloo> But to be truly great it would be able to be pointed at a copy of the current standard and just produce code to match it
07:47:15 <Igloo> I'm sure there were at least 3 at one point - can't remember who else had one though
07:48:44 <shapr> dark: if you can find the source/author for third binding, we can see what it takes to get it into haskell-libs
07:49:07 <shapr> I'd say we put all three into haskell-libs and then try to refactor them into a single library.
07:49:13 <shapr> what do you guys think?
07:50:40 <dark> Would you want Mage in haskell-libs?  It doesn't do anything yet.  Mage's Curses module is somewhat tied up with its windowing system.
07:51:00 <shapr> sure, if you want to put it in there
07:51:04 <Igloo> Mage exports a layer on top of curses doesn't it?
07:52:06 <Igloo> So only half of it would want to be in the actual curses library I think
07:55:56 <shapr> working with code from other people has taught me a lot about Haskell.
07:56:23 <dark> Most of the world's software problems are due to code from other people, though.  I wouldn't trust it.
07:56:31 * shapr grins
07:56:48 <shapr> what do you name a spam filter written in Haskell?
07:57:04 <shapr> Curried Spam?
07:57:26 <Igloo> Names are the bane of my life. Well, them, quotes and logos
07:58:40 <shapr> spham ?
07:58:44 <SyntaxPolice> shapr: ham?
07:58:55 <shapr> SyntaxPolice: hm!
07:59:11 <SyntaxPolice> fram (functional reactive spam)
07:59:18 * shapr laughs
07:59:31 <shapr> We'd have to use arrow based parsing then
07:59:37 <SyntaxPolice> hehe
08:00:33 <mgoetze> SyntaxPolice: so, when will you be available for... you know ... again?
08:00:41 <shapr> mgoetze: addict
08:01:02 * shapr is addicted to k0d3
08:01:02 <mgoetze> shapr: call me that if i go to the blitz tournament this evening :)
08:01:52 <shapr> SPAM - Spam Parsing And Mutilation
08:02:39 <Vincenz> shapr: that's recursive, aka SPAM
08:02:44 <shapr> yup
08:02:53 <Vincenz> Spam Parsing and Mutilation Parsing and Mutilation Parsing and Mutilation Parsing and Mutilation Parsing and Mutilation...STACK OVERFLOW
08:03:00 * shapr grins
08:03:35 <shapr> I'd love to come up with something using AFR
08:04:04 <shapr> frp... 
08:05:21 <shapr> I'll go with fram
08:05:54 <Vincenz> afr?
08:05:56 <Vincenz> frp?
08:05:59 <Vincenz> fram?
08:06:33 <Igloo> functional reactive programming
08:06:42 <Igloo> fram doesn't exist, shapr's writing it
08:06:54 <shapr> I bet Hal's work on document classification would be useful here.
08:07:07 * Igloo doesn't know or can't remember afr
08:07:16 <shapr> afr is from afrp
08:07:35 <Igloo> Is that adaptive?
08:07:51 * Igloo is getting very confused by trying to work out which bit of Haskell some core comes from
08:08:11 <shapr> I've seen it stand for both adaptive and advanced
08:13:33 <SyntaxPolice> mgoetze: Soon :) maybe this week.
08:47:17 <shapr> the latest news on haskell.org is ....
08:47:22 <shapr> interesting
08:49:18 <Igloo> You've noticed the date on it presumably?
08:49:27 <shapr> yes
08:57:26 <SyntaxPolice> heh. and I thought that was spam.
08:58:35 <shapr> did you read them?
09:02:32 <SyntaxPolice> not really :)
09:02:40 <shapr> they're very funny
09:03:07 <shapr> Some of the are there specifically to halfway compliment and halfway tease some prominent members of the Haskell community.
09:06:10 * Igloo looks confused - which list?
09:06:29 <shapr> haskell@
09:07:04 <Igloo> Ah, is it the thing I gave up reading because it was all caps?
09:07:17 <shapr> possibly so
09:07:21 <shapr> there were several in a row
09:09:11 <SyntaxPolice> shapr: spamassassin actually marked most of them as spam :-)
09:09:16 <shapr> heheh
09:13:51 <shapr> foo
09:15:22 <opet> moo
09:15:24 <opet> ?
09:15:29 <shapr> baa
09:16:24 <opet> I see
09:16:27 <shapr> I can't tell if Hal's Generic Data Clustering code would be good for finding spam or not
09:20:50 <shapr> GDC does some nifty stuff
09:20:55 <shapr> very little of which I understand
09:24:26 * opet laughs
09:24:28 * shapr begins to understand
09:24:39 <opet> sounds like me and a lot haskell out there
09:27:52 <SyntaxPolice> hm. I'm curious.  In xchat, when I have ops, a green dot appears next to my name in the list. Currently a yellow dot appears next to my name in the list, along with several other people's names, and from the "key" i guess that the yellow dot means "10".  So what does 10 mean?
09:28:08 <shapr> actually the yellow dot means +v
09:28:11 <shapr> or "voice"
09:28:25 <shapr> irc channels can be set +m for "moderated"
09:28:43 <shapr> and then only channel operators or voiced users can speak
09:28:51 <SyntaxPolice> hrm. but we're not +m right?
09:28:54 <mgoetze> SyntaxPolice: it's my fault, blame me :)
09:28:59 <mgoetze> no, we're not +m
09:29:08 <SyntaxPolice> mgoetze: I hereby blame you.
09:29:17 <shapr> in some channels, +v is used to mean "that person is a lamer"
09:29:30 <shapr> some people use it the other way around "that person is cool"
09:29:31 <opet> in others it means "that person is cool" :)
09:29:34 <shapr> right
09:29:43 * SyntaxPolice is afraid to ask what it means here.
09:29:48 <mgoetze> on freenode, the more common use is "that person has a clue"
09:29:54 <opet> #freebsd uses it to mark "lamers"
09:30:58 <Vincenz> I want a +v!
09:31:39 <mgoetze> Vincenz: written any good haskell lately? :)
09:31:43 * shapr grins
09:31:56 <Vincenz> haskell...haskell....ocaml...haskell..
09:31:57 <Vincenz> yeah
09:32:01 <shapr> Vincenz: really?
09:32:06 <shapr> I wanna see!
09:32:13 <Vincenz> I meant ocaml :P
09:32:16 <Vincenz> damn, I'm caught
09:32:16 <shapr> oh
09:32:41 <Igloo> Syn: 10 is probably the number of people who are +v
09:32:50 <mgoetze> you could ask for +v in #ocaml :)
09:33:02 <SyntaxPolice> Igloo: Ahh, I see.
09:33:33 <shapr> I've only set a channel key once to test it out.
09:33:49 <mgoetze> channel key? huh?
09:33:59 <shapr> yah, +k
09:34:30 --- mode: ChanServ set +o shapr
09:34:30 <mgoetze> just wondering why you brought it up...
09:34:34 --- mode: shapr set +k haskell
09:34:38 <shapr> neat :-)
09:34:44 --- mode: shapr set -k haskell
09:34:59 --- mode: shapr set +v Vincenz
09:35:06 --- mode: shapr set -o shapr
09:35:13 <shapr> Vincenz: since you asked ;-)
09:35:34 * Igloo looks at the output of the -ddump*C flags and fails to be enlightened
09:35:48 * shapr looks at the Haskell source and is endarkened
09:36:03 <Vincenz> woo!
09:36:44 <Vincenz> I'm a VIP
09:36:47 <Vincenz> +vIP
09:37:10 * mgoetze is +vip, actually... lol
09:38:35 <Vincenz> This is a lol-free zone.
09:38:49 <shapr> yes, lol free zone
09:38:54 <shapr> oh no! I said lol!
09:39:02 --- mode: ChanServ set +o shapr
09:39:08 --- kick: shapr was kicked by shapr (NO LOL)
09:39:19 * shapr meekly returns
09:39:32 <opet> bad shapr
09:39:38 <shapr> I'll won't do it again!
09:39:53 <opet> you'd better not. shapr will get angry
09:40:00 <shapr> right
09:40:01 <shapr> er
09:40:33 <Igloo> You'd best just ban me in that case
09:40:40 <shapr> :-(
09:40:58 <shapr> I think I'll just get over that.
09:41:25 --- topic: set to '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","New Hat 2.02 http://www.haskell.org/hat/","New Learning Haskell page - http://www.haskell.org/learning.html","GUI Demos - http://repetae.net/john/computer/haskell/gui/","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 5.04.3 released!","This is no longer a LOL Free Zone"]' by shapr
09:41:29 <shapr> :-)
09:42:58 * opet blinks
09:43:07 <opet> is it meant to be missing the ']'?
09:43:46 <Igloo> It's not here
09:46:03 <dark> wottt was using "ne1" a while ago.
09:46:17 <dark> Obviously the forces of evil are stronger than we suspected.
09:48:53 * shapr joins the forces of code!
09:50:07 * kawfee bounces
09:50:12 * shapr boings
10:13:51 <shapr> has anyone seen bayesian statistics code in Haskell?
11:01:39 <Vincenz> shapr: bayesian statistics is easay
11:02:11 <shapr> you have some Haskell code that does it?
11:02:12 <mgoetze> Vincenz: so that'll be a good thing for you to practice haskell with.
11:02:20 <Vincenz> I'm learning ocaml
11:02:41 <shapr> I'll read up on it later.
11:03:18 <mgoetze> shapr: do this: /quote cs level #haskell set autovoice 5
11:05:40 <shapr> mgoetze: ok
11:05:41 <Vincenz> doesnt' work
11:05:51 <shapr> Vincenz: what doesn't?
11:06:12 <Vincenz> what mgoetze said
11:06:37 <shapr> It works for me.
11:06:52 <shapr> the command /quote sends a literal message to the irc server
11:06:56 <Marvin--> works for what?
11:07:12 <Vincenz> shapr: of course, you're chan owner of #haskell
11:07:34 <shapr> well I meant sending messages to chanserv with /quote cs :-)
11:08:21 <Vincenz> how do you private message someone ?
11:08:27 <shapr> you can use /msg nickname
11:08:37 <shapr> most irc clients also support /query nickname
11:08:51 <shapr> then you get what looks like a 'channel' that sends private messages to that person
11:09:24 <Vincenz> no no
11:09:27 <Vincenz> using /quote
11:09:28 <shapr> oh
11:09:29 <Vincenz> PRIVMS?
11:09:48 <Vincenz> heh, I know how to do it with my client
11:09:50 <Vincenz> /msg
11:10:06 <Vincenz> I should put a sniffer on my pc
11:10:08 <shapr> aha
11:10:19 <shapr> try /quote PRIVMSG nickname :message
11:10:27 <mgoetze> shapr: if you rejoin the channel, ChanServ will do nasty things to you :)
11:10:32 <shapr> er, how so?
11:10:42 * shapr tries
11:10:48 --- mode: ChanServ set +v shapr
11:10:51 <shapr> hm, neat
11:10:58 <Vincenz> no you're autolosered
11:11:00 <Vincenz> now you're autolosered
11:11:21 <shapr> what's the De Morgan principle?
11:11:49 <dark> It's probably the rules about distributing & over | and vice versa.
11:11:54 <shapr> oh
11:11:54 * mgoetze will put some people on the #haskell access list so ChanServ does nasty things to them, if shapr doesn't mind
11:11:56 <shapr> thanks
11:11:58 <dark> I always wondered how he got that named after him.
11:12:14 <shapr> mgoetze: sure, as long as they don't mind
11:12:45 <mgoetze> dark: ChanServ will do nasty things to you. DO YOU MIND? <evil stare>
11:12:52 <mgoetze> shapr: nope, they don't mind :)
11:12:52 * shapr ducks
11:13:45 <Igloo> Hmmm, I'm only about a factor of 2 off of my C with a very simple image
11:14:03 * Igloo wonders how Conal was 10 times faster on a slower machine
11:14:52 <mgoetze> Igloo: you should register with nickserv.
11:15:04 <mgoetze> Igloo: /quote ns help
11:15:11 <Igloo> If it could recognise me by hostmask I would
11:15:45 --- mode: ChanServ set +v Marvin--
11:15:49 <mgoetze> Igloo: you mean, you don't want to be bothered with entering a password everytime?
11:15:54 <Igloo> Yes
11:16:03 <Marvin--> why do we need stupid voice?
11:16:31 <mgoetze> Marvin--: it will enlarge the size of your penis
11:16:35 <Marvin--> yay!
11:16:38 * shapr grins
11:16:53 <shapr> it's a lambdabot experiment, I think...
11:17:38 <opet> Igloo: most irc clients can be told to do stuff (like send the identify message) whenever you connect to a server
11:17:59 <mgoetze> Igloo: you can have irssi automatically send the password to nickserv when you join the network
11:18:55 <Igloo> That would mean reading the docs
11:19:11 <Igloo> If anyone cares enough to tell me what to put in the rc I'll do it  :-)
11:19:47 <mgoetze> Igloo: /ircnet add -autosendcmd '/quote ns identify password' freenode
11:20:19 <mgoetze> Igloo: /server add -auto -ircnet freenode irc.freenode.net
11:21:05 <shapr> wikipedia is slow today
11:22:50 <Igloo> OK, ta, 'tis done
11:25:03 <mgoetze> right, then you just register with nickserv and you're all set :)
11:28:04 <Igloo> Already done  :-)
11:35:16 * shapr discovers what a fixed point combinator is 
11:35:19 <shapr> hm, neat
11:42:11 <Janni> ellas!
11:42:31 <shapr> y0
11:42:36 <shapr> time for TV
11:43:42 <mgoetze> hm
11:44:01 <mgoetze> Janni: you need to register with nickserv
11:44:44 <Janni> I really need? *checking the website*
11:46:37 <mgoetze> Janni: yes, i will kline your host, *!*@*.t-dialin.net, if you don't :P
11:57:56 * Janni is off for food (food, good!)
12:14:36 --- mode: brunner.freenode.net set +v Pseudonym
13:14:00 <Riastradh> shapr, what does access level 5 do?
13:15:56 <mgoetze> Riastradh: autovoice and allows you to invite people
13:16:18 <Riastradh> Er, oh, ok.
13:16:37 <mgoetze> Riastradh: so, you have a lot of responsibility now.
13:16:49 <mgoetze> Riastradh: we expect you to invite at least 2 new people every month.
13:16:53 <Riastradh> Heh.
13:17:15 <Riastradh> Does it matter what person it is?
13:18:18 <mgoetze> well, ideally, someone who can already program haskell or wants to learn
13:18:30 <mgoetze> go players are ok, too :)
13:21:02 <vardamir> my software engineering prof hasn't heard of haskell; he kept thinking that I was saying Pascal
13:21:48 <vardamir> or FP for that matter
13:22:09 <mgoetze> vardamir: uhm, where are you from?
13:22:14 <vardamir> I guess it wasn't a popular methodology at IBM in his day
13:22:33 <vardamir> United States, why?
13:23:28 <vardamir> oh, many other profs here know of it, just not this particular guy
13:23:32 <mgoetze> vardamir: oh, ok. i already knew that that country sucks. :)
13:24:09 <SyntaxPolice> mgoetze: grrr
13:24:18 <vardamir> well, i'd agree with you in some respects i suppose
13:24:34 <vardamir> but at the  same time, not most of them ;)
13:24:45 * SyntaxPolice puts on darth vadar voice "I find your lack of faith disturbing..."
13:25:16 * mgoetze activates his lightsabre, which emits a radiant blue
13:27:18 * SyntaxPolice activates red-white-and-blue lightsabor, dons darth vadar / saddam hussain / george w. bush mask and asks to see mgoetze's passport...
13:28:09 * SyntaxPolice notes that no one should attempt to derive his political viewpoint from the last comment
13:29:14 <mgoetze> dSP / dPol = ... uhm ...
22:09:04 --- topic: '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","New Hat 2.02 http://www.haskell.org/hat/","New Learning Haskell page - http://www.haskell.org/learning.html","GUI Demos - http://repetae.net/john/computer/haskell/gui/","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 5.04.3 released!","This is no longer a LOL Free Zone"]'
22:09:04 --- topic: set by shapr on [Mon Apr 07 09:41:24 2003]
23:40:03 <SlushP> Wow! Hopefully I'll get some answers, or help, here:)
23:40:05 <SlushP> Hi everyone.
23:40:19 <SlushP> Can someone help me with something I'm trying to do with Haskell?
23:40:32 <Pseudonym> Possibly, possibly not.
23:41:00 <Pseudonym> Hint: Asking meta-questions is almost always a waste of time.
23:41:07 <Pseudonym> Better just to ask your question/
23:41:42 <SlushP> Well, I am wanting to know how I go about separating a string into a list of appointment objects - importance, time, note
23:42:34 <SlushP> importance is signified by the character '!' in the string
23:43:27 <Pseudonym> OK...
23:46:46 <SlushP> Pseudonym, are you able to help?
23:47:04 <Pseudonym> I was waiting for you to continue.
23:47:10 <Pseudonym> :-)
23:47:28 <SlushP> Hmm...well, can I send you the actual question? It's a doc file:)
23:47:31 <SlushP> Please?
23:47:33 <Pseudonym> No.
23:47:48 <Pseudonym> a) This smells like homework.  This means I can help _some_.
23:47:53 <Pseudonym> b) Can't read doc files.
23:48:14 <Pseudonym> c) I want to know how far you've gotten by yourself.
23:48:26 <SlushP> Well how would I do that if I can't send you anything?
23:48:38 <SlushP> Do you want me to send you the lhs file that I've done?
23:48:40 <Pseudonym> Surely you can explain a bit further here?
23:48:46 <Pseudonym> What the problem is.
23:48:53 <Pseudonym> Specifically where you're stuck.
23:49:33 <SlushP> Say you've got a string, namely: "! 10-11 lecture \n 12-13 lunch :(" 
23:49:33 <SlushP> right?
23:49:36 <Pseudonym> OK.
23:50:07 <SlushP> well, we have to represent each string (delimited by the \n) as an appointment object.
23:50:10 <SlushP> thus, a list of appointments.
23:50:23 <Pseudonym> Do you know the "lines" function?
23:50:24 <SlushP> appointment :: (Duration, Note, Important)
23:50:39 <SlushP> Yeah, but I don't know how I'm supposed to be using it. That and words, break etc:(
23:50:53 <SlushP> They're my problems...I know what they do, but I don't know how or where to use them.
23:51:37 <Pseudonym> OK.
23:51:44 <Pseudonym> What does, for example, "lines" do?
23:52:07 <SlushP> Splits a string into substrings - those which are delimited by the newline character.
23:52:14 <Pseudonym> Right.
23:52:22 <Pseudonym> Here's the type:
23:52:30 <Pseudonym> Prelude> :t lines
23:52:30 <Pseudonym> lines :: String -> [String]
23:52:34 <SlushP> String -> [String]
23:52:35 <SlushP> Yeah:)
23:52:36 <SlushP> lol
23:52:37 <Pseudonym> I'm using ghci here.  Are you using GHC or hugs?
23:52:44 <SlushP> Hugs
23:52:44 <Pseudonym> Or something else?
23:52:46 <Pseudonym> OK.
23:53:09 <Pseudonym> So it takes a String.  Try giving it a String.
23:53:22 <Pseudonym> Such as the one you gave me.
23:53:25 <SlushP> I've done that, but it doesn't answer my wquesiton:(
23:53:29 <SlushP> I don't mean to be rude.
23:53:39 <SlushP> :S
23:53:40 <Pseudonym> I understand.  I'm trying to be helpful without being _too_ helpful.
23:53:46 <Pseudonym> If you understand what I mean.
23:54:19 <Pseudonym> It's more helpful for you to understand what's going on.
23:54:23 <SlushP> I've even tried typing into hugs the lines, break, words etc, and I've seen their types but it doesn't help:(
23:54:27 <Pseudonym> That's what I'm trying to do.
23:54:58 <Pseudonym> So in this case:
23:54:59 <Pseudonym> Prelude> lines "! 10-11 lecture \n 12-13 lunch :("
23:54:59 <Pseudonym> ["! 10-11 lecture "," 12-13 lunch :("]
23:55:08 <SlushP> Yeah
23:55:21 <Pseudonym> So we're part of the way there.
23:55:48 <Pseudonym> With the output of lines, you can treat each "appointment" separately.
23:55:58 <SlushP> Yeah, but, the output has got to be [((10,11),"lecture", True),
23:56:12 <SlushP> ((12,13),"lunch:(",False)
23:56:13 <SlushP> ]
23:56:18 <SlushP> Sorry about the formatting.
23:56:24 <SlushP> And that's my problem too:(
23:56:52 <SlushP> I can break a line up into a list of strings, but I don't have a clue how to convert that original string to a list of appointments like what I've just pasted.
