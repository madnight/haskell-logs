00:32:02 <witten> heh
03:26:10 <delYsid> mor-ning
04:13:11 <Janni> pHe4r m33!!1
04:20:41 * Arnia cowers
04:23:06 <delYsid> hmm, how do I use parsec with ghci?
04:23:17 <delYsid> i.e., how to tell emacs (C-c C-l) to use package text?
04:24:10 <Darius> :set -package text
04:24:30 <Darius> er that's GHCi 
04:24:42 * Darius knows nothing of emacs
04:26:28 <Darius> actually (unless you are using an older version) you shouldn't need to load a package but rather a module
04:27:21 <Darius> (if you are using an older version that still may be the case, I have only used GHC 5.04.2+)
04:40:26 <delYsid> ahh, IC, I have debian testing on my laptop, which still has ghc 5.02 or something
05:21:07 * shapr boings
05:22:20 * Arnia hands shapr a large trampoline
05:22:40 * shapr bounces into the clouds
05:24:04 <shapr> goood morning everybody!
05:24:09 <Arnia> Morning :)
05:24:09 <shapr> what's happening today?
05:28:25 <Arnia> Figured out a good design for the new skin system for Plone and solved the problem of world peace :)
05:31:03 * Arnia starts singing Junior Senior's 'Move your feet'
06:06:48 <Janni> ls
06:06:57 <Janni> yay :)
06:35:58 <shapr> @yow
06:35:58 <lambdabot> ..  Now I think I just reached the state of HYPERTENSION that comes
06:35:58 <lambdabot>  JUST BEFORE you see the TOTAL at the SAFEWAY CHECKOUT COUNTER!
06:36:03 <shapr> hi jao
06:49:32 <jao> hi shapr
06:50:10 <shapr> what's up?
06:50:17 <shapr> learning Haskell?
06:50:29 <jao> yup. an absolute beginner
06:50:44 <shapr> have any questions?
06:50:55 <shapr> @fact learning
06:50:56 <lambdabot> http://www.haskell.org/learning.html
06:51:03 <shapr> that's the primary 'learning haskell' page
06:51:10 <jao> hm. not yet. i'm reading the gentle intro
06:51:17 <shapr> ok, ask if you have any
06:51:23 <jao> thanks. i've browsed that url
06:51:45 <jao> i've also ordered the intro to func. prog. book
06:52:19 <shapr> which one?
06:53:30 <jao> bird's
06:54:24 <shapr> oh, I haven't read that one.
06:54:30 <shapr> I have Thompson and Hudak
06:54:46 <jao> i was also considering hudak's and/or thompson's too
06:54:56 <jao> would you recommend them?
06:55:36 <shapr> yes, I've enjoyed both of them.
06:55:52 <shapr> They each have their strong points.
06:56:22 <shapr> Hudak's book requires a stronger math background, but deals with IO early on, unlike most other Pure FP books.
06:56:44 <shapr> Thompson's book works just fine for a Python programmer with no formal CS education (that's me)
06:57:00 <jao> hm. i'm very interested in the formal aspects
06:57:09 <jao> (of haskell)
06:57:16 <shapr> but leaves monadic IO till the last, which many people don't like
06:57:26 <shapr> what facet of the formal aspects?
06:57:27 <shapr> provability?
06:58:24 <jao> yup. and the underlying theory of functional programming in general (lambda calculus, category theory and so on)
06:59:01 <shapr> lambdabot has a lambda calculus interpreter plugin written by Darius
06:59:09 <shapr> @definitions
06:59:10 <lambdabot> ["B","Branch","C","Cons","I","Just","K","Leaf","Left","Nil","Nothing","Pair","Right","S","Succ","U","X","Y","Zero","a","ana","apo","append","car","cata","cdr","chAnd","chFalse","chIf","chNot","chOr","chTrue","const","drop","either","fact","flip","foldl","foldr","fromList","fst","id","iterate","lcFalse","lcIf","lcTrue","list","lookupTree","map","maybe","mod","modifyTree","nat","not","nullL","pair","para","product","replicate","reverse","snd
06:59:16 <shapr> @get-definition Cons
06:59:16 <lambdabot>  \a l n c.c a l
06:59:41 <jao> nice!
06:59:55 <shapr> lambdabot is currently our most popular code-toy :-)
07:00:03 <shapr> @fact source
07:00:03 <lambdabot>  http://sf.net/projects/haskell-libs/, http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
07:00:25 <Darius> I rewrote EvalModule to spit out the definitions in lines so it wouldn't be truncated.
07:00:37 <shapr> Darius: hey, have you @dump'ed everything you want saved?
07:00:44 * jao browses haskell-libs
07:00:55 <shapr> can I cvs up and rebuild lambdabot with the latest?
07:01:01 <Darius> sure
07:01:07 <shapr> yay
07:02:12 <shapr> I want an @uptime plugin...
07:02:15 <shapr> @quit
07:02:16 <Darius> the list strictness was fixed yesterday (by my sleeping pattern), I converted most functions to using (:) and [], though I may have missed some
07:04:27 <shapr> ok, time to switch @fact to using flat files
07:04:42 <shapr> oh, and I could fix @more to deal with long lines
07:05:46 <Darius> so I can switch the code back to just a show
07:05:51 <Darius> @definitions
07:05:52 <lambdabot> ["B","Branch"]
07:05:52 <lambdabot> ["C","Cons"]
07:05:52 <lambdabot> ["False"]
07:05:52 <lambdabot> ["I"]
07:05:52 <lambdabot> ["Just"]
07:05:52 <lambdabot> ["K"]
07:05:55 <Darius> @more
07:05:56 <lambdabot> ["Leaf","Left"]
07:05:56 <lambdabot> ["Nil","Nothing"]
07:05:58 <lambdabot> ["Pair"]
07:06:00 <lambdabot> ["Right"]
07:06:02 <lambdabot> ["S","Succ"]
07:06:04 <lambdabot> ["True"]
07:06:33 <Darius> @eval take 10 (replicate 100 5)
07:06:33 <lambdabot> [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
07:06:51 <Darius> @get-definition foldl
07:06:52 <lambdabot> foldl = \kons knil l. if nullL l then knil else foldl kons (kons (car l) knil) (cdr l)
07:07:17 <Darius> @define foldl \c n l.if null l then n else foldl c [head l] (tail l)
07:07:18 <lambdabot> foldl defined
07:07:38 <Darius> @eval foldl (\x y.x:y) [] [1,2,3,4]
07:07:38 <lambdabot> [4]
07:08:41 <Darius> @define foldl \c n l.if null l then n else foldl c (head l:n) (tail l)
07:08:42 <lambdabot> foldl defined
07:08:43 <Darius> @eval foldl (\x y.x:y) [] [1,2,3,4]
07:08:43 <lambdabot> [4, 3, 2, 1]
07:08:51 <Darius> @dump
07:08:51 <lambdabot> dumped
07:09:44 <shapr> you understand LC far more than I do..
07:10:02 <shapr> oh, I like the new @definitions
07:14:20 <Darius> it'd be nicer if it spit out more, but I just did the easiest thing first (as it hopefully will be temporary)
07:14:47 <shapr> yah; step 1, make it work
07:14:48 <Igloo> Errr, your foldl doesn't use c does it?
07:14:52 <shapr> hi Igloo 
07:14:58 <Igloo> Hey ho
07:15:04 <shapr> I am not a ho!
07:15:05 <shapr> er
07:15:07 * shapr grins
07:15:17 * shapr is in a silly mood today
07:15:21 <Igloo> :-)
07:16:01 <shapr> Darius: is that pattern matching?
07:16:10 <shapr> @get-definition length
07:16:10 <lambdabot> length not defined
07:16:23 <shapr> @eval [1,2,3]
07:16:23 <lambdabot> [1, 2, 3]
07:17:11 <shapr> @define length \x:ys. 1 + (length ys)
07:17:12 <lambdabot> (line 1, column 4):
07:17:12 <lambdabot> unexpected ":"
07:17:12 <lambdabot> expecting letter or digit, identifier or "."
07:17:18 <shapr> @define length (\x:ys) . 1 + (length ys)
07:17:19 <lambdabot> (line 1, column 5):
07:17:19 <lambdabot> unexpected ":"
07:17:19 <lambdabot> expecting letter or digit, identifier or "."
07:17:46 <shapr> oh I see
07:17:57 <shapr> @eval fst [1,2,3]
07:17:57 <lambdabot> type error
07:18:02 <shapr> @eval head [1,2,3]
07:18:02 <lambdabot> 1
07:18:03 <Darius> @define foldl \c n l.if null l then n else foldl c (c head l n) (tail l)
07:18:03 <lambdabot> foldl defined
07:18:07 <Darius> @eval foldl (\x y.x:y) [] [1,2,3,4]
07:18:07 <lambdabot> [4, 3, 2, 1]
07:18:18 <Darius> fst is for pairs
07:18:29 <Darius> @eval fst (Pair 4 5)
07:18:30 <lambdabot> 4
07:18:36 <shapr> @eval take 1 []
07:18:36 <lambdabot> []
07:19:16 <Darius> no pattern matching, but you can get a similar effect e.g.
07:19:29 <Darius> @get-definition modifyTree
07:19:29 <lambdabot> modifyTree = \i f.tree (\x.Leaf (f x)) (\l k r.if i < k then Branch (modifyTree i f l) k r else Branch l k (modifyTree i f r))
07:19:50 <Igloo> Darius: How does that work?
07:20:12 <Igloo> If head l was in parentheses I might understand
07:21:10 <Darius> ah, good point, and that's a problem with the parser.  head,tail, and null are syntax not functions
07:21:18 <Darius> @define foldl \c n l.if null l then n else foldl c (c (head l) n) (tail l)
07:21:18 <lambdabot> foldl defined
07:21:23 <Darius> @eval foldl (\x y.x:y) [] [1,2,3,4]
07:21:24 <lambdabot> [4, 3, 2, 1]
07:21:55 <Darius> So you can't partially apply head, tail or null
07:22:40 <Darius> a simple fix is to have head be a function defined in terms of some special syntax
07:22:58 <Darius> e.g. @define head \l.head# l
07:23:34 <Igloo> *nod*
07:26:16 <Darius> @define length foldl (\x.x+1) 0
07:26:16 <lambdabot> length defined
07:26:26 <Darius> @eval length [1,2,3]
07:26:27 <lambdabot> type error
07:26:40 <Darius> two parameters
07:27:12 <Darius> @define length foldl (\x y.1+y) 0
07:27:13 <lambdabot> length defined
07:27:14 <Darius> @eval length [1,2,3]
07:27:14 <lambdabot> 3
07:30:06 <shapr> I wonder if your LC interpreter and GHC's External Core have any similarities.
07:31:17 <Igloo> @eval [3]:[4]
07:31:17 <lambdabot> [[3], 4]
07:31:27 <Igloo> @eval [3]:4
07:31:27 <lambdabot> type error
07:32:43 <shapr> @eval 3:[4]
07:32:44 <lambdabot> [3, 4]
07:32:51 <shapr> @eval 3:4:[]
07:32:51 <lambdabot> [3, 4]
07:33:05 <Darius> shapr: uh, no probably not
07:33:38 <Darius> @eval [4,True,"hi"]
07:33:38 <lambdabot> [4, True, hi]
07:34:25 <shapr> neat, heterogenous lists
07:34:38 <Darius> It's dynamically typed at this point
07:34:49 <shapr> spiffy
07:34:58 <shapr> are you going to add soft-typing?
07:36:03 <Darius> I wasn't planning on it.  I can't remember if I was planning on adding static typing
07:36:32 <Darius> I should probably make == polymorphic
07:41:19 <Igloo> I wish someone who knew what they were doing would fix the head
07:43:02 <shapr> what's wrong with it?
07:43:41 <Igloo> I think SPJ missed a few things that need updating in his recent changes to the typechecker
07:44:07 <Igloo> Might all be stage 2 actually, which might be why he missed it
08:10:24 * Igloo boucnes
08:11:17 <Igloo> My code shows more improvement than I remembered and it's all ready for when the latest TH stuff hits CVS  :-)
08:37:31 <shapr> yay
08:37:36 <shapr> bah, I can't focus
08:42:25 <delYsid> hmm, castling is complicated.
08:49:18 <delYsid> transform c f = foldr (\a b -> (if (c a) then (:) (f a) else id) b) []
08:49:31 <delYsid> is such a func already in the prelude? (guess not)
08:57:04 <Igloo> You can write (:) (f a) as (f a:)
08:57:29 <Igloo> That looks like map f . filter c to me
08:58:43 <delYsid> hmm, right
09:00:12 <delYsid> tnx!  Thats certainly more concise
09:00:44 <Igloo> np - is that castling? And if so, why do you call it that?
09:01:20 <delYsid> nah, castling is a move/rule in chess...unrelated to that code...
09:01:29 <Igloo> OK  :-)
09:01:33 <Igloo> What are you writing?
09:01:47 <delYsid> chess in Haskell
09:02:12 <Igloo> An AI or something that allows 2 people to play?
09:02:40 <Igloo> Hmmm, 2 pieces moving in one move might be really annoying
09:02:44 <delYsid> an AI
09:02:52 <Igloo> Cool
09:03:00 <delYsid> it already plays...
09:03:09 <delYsid> I just need to get internet access to check it into haskell-libs
09:03:21 <Igloo> Nifty  :-)
09:03:36 <delYsid> and yah, the two-pieces moving sucks...
09:03:37 <Igloo> Would it be a stupid question to ask how you're IRCing without internet access?
09:03:51 <delYsid> hehe :)
09:04:10 <delYsid> My laptop (where the haskell code is) has just RJ45, and no disk drive.
09:04:11 <Igloo> It won't be too bad for playing if you have the board state in a monad actually
09:04:19 <delYsid> The computer of my gf has internet access, but no network card...
09:04:28 <Igloo> But it would be harder to work with for an AI  :-(
09:04:50 <Igloo> Ah, right
09:05:39 <Igloo> Do you have one of those brail displays you put your fingers on? A reader for one of them would be a cool way to copy code
09:05:56 <Igloo> But I can't think why a read would exist  :-(
09:06:46 <delYsid> hehe, yah, I could type it by hand...  but that takes time, and is boring
09:07:28 <delYsid> anyway, no great magic yet, just a very classic Minimax with depth pruning and basic move rules without castling/en passent...
09:07:28 <Igloo> Sure
09:07:54 <Igloo> Oh, en passent is difficult because it requires remembering how long ago the pawn moved?
09:08:09 <Igloo> I guess for castling you also need to remember if the king and rooks have moved
09:08:30 <delYsid> I'll do like FEN/EPD.
09:08:37 <delYsid> the board has castling and en passent info.
09:08:44 <Igloo> FEN/EPD?
09:09:19 <delYsid> for en-passent, I just need a file for each colour. everytime a pawn moves x2-x4, I mark that file... next move unsets that again.
09:10:00 <Igloo> Right, and a flag for can-castle for each colour presumably
09:10:13 <Igloo> Oh, no, need one for each side
09:10:19 <delYsid> [(Colour,Castling)]
09:10:28 <delYsid> data Castling = Kingside | Queenside
09:11:44 <delYsid> data Board = [(Kind,Square)] [(Kind,Square)] [(Colour,Castling)] Maybe Int Maybe Int
09:12:18 <delYsid> or something
09:12:39 <Igloo> What are the Ints?
09:12:50 <delYsid> en-passent for white and black.
09:13:03 <delYsid> so (Maybe Int) actually iirc
09:13:19 <Igloo> Ah, right
09:13:48 <delYsid> I'll have to add some more later, for the 50-move rule and so on...
09:13:55 <delYsid> but I want to have castling and enpassent first...
09:14:04 <Igloo> *nod*
09:16:05 <delYsid> an epd-parser would be nice to, I have about 6000 positions in epd format which all include a "best move".  That could be very nicely used to test the strength of the engine...
09:16:37 <delYsid> just iterate over all of them and output a match percentage...
09:17:11 <Igloo> :-)
09:17:46 <delYsid> 7k/5ppp/R/K w - - bm Ra8+
09:17:54 <delYsid> (for example)
09:23:25 <delYsid> bah! and I need to know the moving colour to interpret "O-O", suckage!
10:04:05 <Janni> and back again...
11:47:10 <Igloo> Boing!
14:00:53 <Janni> re
14:01:48 <Riastradh> Hi.
14:04:28 <Igloo> Greetings!
14:43:32 <Riastradh> @yow
14:43:33 <lambdabot> Is this where people are HOT and NICE and they give you TOAST for
14:43:33 <lambdabot>  FREE??
18:05:55 * clausen wonders if haskell is useful for linear algebra type stuff
18:06:33 <Smerdyakov> What sort of language _wouldn't_be_?
18:06:58 <clausen> C
18:07:02 <clausen> ugly notation
18:07:05 <clausen> lots of bureaucracy
18:07:20 <lament> linear algebra == the matrixy thingies?
18:07:24 <lament> FORTRAN? APL? :)
18:07:52 <clausen> fortran has a Reputation TM
18:08:01 <clausen> I guess I should look at it anyway
18:08:13 <lament> No, you probably shouldn't.
18:08:39 <clausen> http://www.isi.edu/~hdaume/HBlas/ looks horrible
18:08:51 <clausen> everything is monadized, even though they are pure operations
18:09:22 <Smerdyakov> Monads are a pretty swell way to think about a _lot_ of things.
18:09:35 <clausen> but not about computation
18:10:40 <clausen> lament: better ideas?
18:11:09 <lament> Not really.
18:11:23 <lament> Smerdyakov is right though, any language can be used (and has appropriate libs)
18:11:33 <lament> As long as it's not speed-critical
18:11:52 <clausen> obviously
18:11:57 <clausen> I'm talking about user-friendliness
18:12:12 * clausen should have said that up-front
18:12:29 <clausen> most languages are very unfriendly wrt linear algebra
18:13:09 <clausen> > (4) Create a Haskell module which exposes a pure functional interface,
18:13:10 <clausen> > hiding the imperative subsystem from the user.
18:13:10 <clausen> I don't think this will work.  I think you need the imperative interface,
18:13:10 <clausen> otherwise you are going to have to resort to copying of the arrays to
18:13:10 <clausen> maintain purity.  IMO this is the wrong thing to do.
18:13:12 <clausen> interesting
18:13:30 * clausen doesn't see much problem with copying arrays
18:13:58 <Smerdyakov> It's rather slow for large problems....
18:14:47 <clausen> for some operations
18:15:05 <clausen> but, most operations prolly aren't destructive anyway
18:15:14 <clausen> eg, finding eigenvectors
18:15:56 <clausen> (copying is a small cast compared to finding A^n)
18:16:09 <clausen> s/cast/cost/
22:56:22 <Cryptor> let say theres this "type Thing a b = ([a],b)"
22:57:19 <Cryptor> is there any way of doing something like this?
22:57:27 <Cryptor> "(Num a) => type Thing a b = ([a],b)"
23:19:18 <Darius> type Thing a b = Num a => ([a],b)
23:19:31 <Darius> Or some such
23:25:17 <kawfee> what exactly do you want to do?
23:25:34 <kawfee> make a new data type?
23:35:05 <Cryptor> kawfee: I'm trying to do what "type Thing a b = ([a],b)" does, except restrict a's type to numeric, so I don't have to restrict it in the type signatures of all the function I use it in.
23:35:55 <Cryptor> I've also tryed "data Vote a b = (Ix a, Num b) => Vote [[a]] b" which works, but when I make it "deriving show" it gives an error.
23:36:54 <Darius> You can't derive Show because a and b may not be Show'able, so you need to add that condition
23:38:34 <Cryptor> "	data Vote a b = Vote [[a]] b deriving Show" works though.
23:39:23 <Cryptor> adding the "(Ix a, Num b) =>" breaks it.
23:39:28 <Darius> uh, good point.  What error did you get? 
23:40:30 <Cryptor> "No instance for `Show {Num b}', When deriving classes for `Vote'"
23:40:46 <Cryptor> "No instance for `Show {Ix a}', When deriving classes for `Vote'"
23:43:26 <Darius> You can put the context before Vote e.g. data (Ix a, Num b) Vote a b =...  I think in the general case it has a somewhat different meaning (I'll need to check the report or experiment to be sure)
23:43:38 <Darius> (er add =>)
23:46:06 <Cryptor> Darius: ah, that worked, thanks.
23:46:13 <Darius> In fact, I'm not sure if the other is even standard (it is, partially at least, related to existential quantification)
