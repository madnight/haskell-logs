02:02:01 <andersca> Marvin--?
02:02:09 <Marvin--> yeah?
02:02:26 <andersca> could you change my dum e-mail address to andersca@codefactory.se ?
02:02:34 <Marvin--> ok
02:03:00 <Marvin--> are you in the dum group?
02:03:06 <andersca> no, I don't think so
02:03:08 <andersca> d00anca
02:03:23 <Marvin--> then we'll fix that too
02:03:42 <ludde> dum?
02:04:13 <Marvin--> oh for pete's sake
02:04:21 <Marvin--> ctrlgrp doesn't play nice with DCE accounts
02:05:34 * Marvin-- swears
02:05:40 <Marvin--> ludde: datorutskottet MC
02:05:48 <Marvin--> andersca: sorry, can't get it to work right now
02:05:48 <ludde> i see
02:06:12 <andersca> Marvin--: ok, but you still changed the e-mail addy, right
02:06:21 <Marvin--> not yet, but I'm going to now
02:07:16 <andersca> cool
02:07:28 <andersca> looks like enterprise will be aired every day starting may 5th
02:07:29 <Marvin--> changed
02:07:32 <Marvin--> yes
02:07:43 <Marvin--> wait, every day? Last I heard, it was twice a week
02:08:08 <andersca> hmm, you're right
02:08:14 <andersca> thursdays and fridays
02:08:24 <andersca> so it's starting 8th
02:08:26 <Marvin--> not that I haven't seen it before *cough*
02:09:25 <andersca> I saw some episodes at the star treff last year
02:10:52 <Marvin--> IMO it sucks :)
02:54:02 <vincenz> \whois kate
03:06:15 <delYsid> hmm
03:07:05 <delYsid> I want to parse at max 4 chars into a list of things, exception being that - means no-entry.  Any idea how to formulate this in parsec?
03:10:57 <Darius> Don't you think Parsec is a bit of overkill for four characters?
03:12:28 <delYsid> Darius: its only a smaller part of what I try...
03:15:44 <Darius> The oneOf combinator might be helpful.  What's special about -, just have it be represented as a NoEntry thing, or return Maybe Thing
03:21:11 <delYsid> (char '-' >> return ([])) <|> many1 (choice ...)
04:49:47 <shapr> w00h00
04:50:01 <shapr> wow, fifty five
04:50:56 <shapr> gooood morning #haskell!
04:51:03 <debug> hello shapr
04:51:05 <debug> how's stuff?
04:51:19 <shapr> varorna är brå, och du?
04:52:11 <debug> va?
04:52:16 <debug> brå?
04:52:21 <shapr> things are good, and you?
04:52:26 <debug> haha
04:52:43 <debug> you should answer "Lugnt." if someone asks you how things are :)
04:52:46 <shapr> oh
04:53:10 <shapr> ok
04:53:29 <shapr> "varorna är brå" doesn't work?
04:53:31 <debug> it's like we were taught when I studied russian... they don't answer "good" when they're asked how things are, they answer "like normal". because if they say "good" then they have to explain why things are that good
04:53:35 <debug> brå isn't a word
04:53:46 <shapr> er, "bra" ?
04:53:51 <debug> and varorna means 'the merchendise'
04:53:54 <debug> bra = good
04:54:02 <shapr> I thought varorna just meant "the things"
04:54:11 <debug> sak = thing
04:54:20 <debug> but you can't use sak in such a sentence.
04:54:23 <shapr> why not?
04:54:30 <shapr> leksakorna är bra
04:54:35 <debug> haha
04:54:36 <debug> well
04:54:49 <debug> things like greetings and stuff like that are so special
04:55:04 <shapr> I try to stay away from ritual greetings as much as possible.
04:55:17 <shapr> I try to come up with creative and entertaining greetings.
04:55:25 <debug> "How are you?"  "Fine, and you?"  "Yeah, I'm fine too"    ===>    "Läget?"   "Bra, själv?"   "Fint."
04:55:26 <debug> for example
04:55:45 <debug> but "läget" would mean "the position" if you just do a word-by-word translation :)
04:56:19 <debug> well, you'll be entertaining if you walk into a room and say "varorna är bra, och du?"  :)  hehe
04:56:36 * shapr grins
04:56:41 <debug> :)
04:56:54 <debug> otherwise "Yo" seems to work pretty well in sweden nowadays
04:56:57 <shapr> y0
04:57:09 <shapr> I like "tje"
04:57:14 <debug> tjena
04:57:21 <shapr> ah, tjena
04:57:27 <shapr> that seems like swedish for y0
04:57:27 <debug> if you come to gothenburg, you have to say "Hallå eller?"
04:57:33 <debug> yes, perhaps
04:57:48 <shapr> is that like "hello or what?"
04:57:51 <debug> yes
04:58:15 <debug> non-gothenburgians probably thing that gbg-ians add "eller?" to everything we say
04:58:34 <debug> which isn't really true :)
04:58:46 <debug> s/thing/think/
04:59:10 <debug> just as gothenburgians think that all stockholmians pronounce ä as e
05:00:49 <norpan> nämen hej
05:01:02 <shapr> tjena norpan 
05:01:27 <norpan> min hjärna känns som mos
05:03:43 <Igloo> Hiyas
05:04:07 <shapr> y0 Igloo 
05:04:17 <shapr> tjena Igloo, hur är det med dig?
05:04:30 <Igloo> Bonjour
05:05:05 <shapr> comment ça va?
05:05:18 <Igloo> Guten tag
05:05:19 <andersca> yo shapr
05:05:23 <shapr> parlez vous français?
05:05:29 <shapr> Igloo: wie geht es?
05:05:35 <shapr> tjena andersca 
05:05:35 <Igloo> Shalom
05:05:41 <shapr> Igloo: bah humbug ;-)
05:05:42 <debug> hello andersca
05:05:50 <Igloo> Phew!
05:05:53 * Igloo mops his brow
05:06:02 <shapr> I know almost zero Hebrew or Yiddish
05:06:37 * Darius knows zero Hebrew or Yiddish. Well, maybe pe and yod.
05:06:47 * Igloo knows much less Hebrew than I used to, and never knew any Yiddish - well, I could probably get about 3 words if I thought for long enough
05:06:55 <shapr> what about meshugganeh?
05:07:06 <Igloo> Bless you
05:07:12 * shapr laughs
05:07:29 <Jolta> meshuggah is a nice little pop band, I think...
05:07:45 <shapr> hi Jolta 
05:08:04 <Jolta> hello!
05:08:16 <shapr> how ar ya?
05:08:19 <Jolta> or "tjaba leget", as they say i sthlm
05:08:51 <shapr> I don't think I've seen you around here before
05:08:57 <shapr> are you learning Haskell?
05:09:12 <Jolta> well, no, I just happened to find my way here yesterday
05:09:19 <shapr> I think meshuggah is an insulting word in yiddish
05:09:28 <shapr> I've forgotten exactly what it means, I think it's "bastard"
05:09:34 <Jolta> Been using haskell for something like 2.5 years already
05:09:39 <shapr> neat!
05:09:42 <Jolta> "madman", I think
05:10:26 <shapr> nice word
05:10:36 <Igloo> I can't even remember the title of "The xxx's guide to Yiddish"
05:10:38 <shapr> do you have code you've written online?
05:10:59 <Jolta> who, me? no ... I wouldn't dare. =)
05:11:21 <Igloo> Goy, that's the one
05:12:12 <shapr> Jolta: well, if you've written code that does something useful or fun, share it!
05:12:18 <shapr> that's my philosophy at least
05:12:51 <Jolta> a sound principle, surely, but i've mostly done homework in haskell (so far), nothing very interesting
05:13:14 <Jolta> <shameless plug> got something going on though: www.haskellwars.com
05:15:09 <andersca> hey Jolta
05:15:16 <Igloo> Anyone know what "totally Utrecht" means regarding do notation style?
05:16:43 <Jolta> utrecht? in the Netherlands? I've been there, seemed nice...
05:17:06 <Jolta> hi andersca
05:17:16 <shapr> Igloo: meijer
05:17:30 <shapr> erik meijer 
05:18:01 <shapr> I think he wrote the first pretty printing combinators for Haskell
05:18:15 <Igloo> What's the associated do notation style, though?
05:18:24 <shapr> I can't help you there :-)
05:18:34 <shapr> we should feed some do code into his PP stuff
05:20:57 <shapr> or maybe it's Daan Leijen's pretty printers?
05:21:05 <shapr> didn't he write some also?
05:21:31 <shapr> new developer in haskell-libs, yay! Ketil Z. Malde is planning to add his statistics code
05:21:46 <shapr> he probably wants to work on Paskalle also
05:22:06 <shapr> Jolta: there are many opportunities for interesting code happening right now
05:22:58 <Jolta> shapr: yes, but how do I find the time? =)
05:23:06 <shapr> can't help you there :-)
05:24:38 <andersca> it's quite simple...stop having a life
05:24:52 <shapr> I had a life once
05:24:57 <shapr> I wasn't so impressed.
05:25:14 <Jolta> andersca: oh, yes... wonder what the girlfriend will say about that though
05:27:31 <ludde> HI JOLTA
05:27:34 <ludde> oops
05:27:43 <shapr> ludde: much enthusiasm
05:27:51 <ludde> :)
05:27:51 <shapr> or maybe you've been programming in BETA?
05:28:16 <ludde> no, i had caps lock pressed. unfortunately this computer has swapped ctrl / caps lock keys.
05:28:40 <shapr> I no longer have a caps_lock key, that key now runs hippie-expand
05:29:13 <ludde> hippie-expand ?
05:29:25 <shapr> emacs function
05:29:32 <ludde> oh, you IRC through emacs?
05:29:34 <shapr> sure
05:29:35 <shapr> I'm using ERC Version 3.0 $Revision: 1.501 $ with XEmacs 21.4 (patch 12) "Portable Code" XEmacs Lucid!
05:29:42 <ludde> uhuh, ok
05:29:46 <ludde> horrible.
05:29:46 <shapr> it's great actually
05:29:56 <andersca> emacs rocks
05:30:03 <ludde> i hate emacs.
05:30:08 <andersca> shapr: you should see my emacswiki t-shirt
05:30:12 <ludde> textpad rocks
05:30:15 <andersca> (I bet you already have one)
05:30:20 <shapr> ludde: M-TAB lets me autocomplete from any dictionary installed on my system
05:30:31 <shapr> S-f jumps galeon to the closest url
05:30:33 <ludde> that's nice.
05:30:52 <shapr> caps_lock autocompletes words, lines, lists, code, etc
05:31:04 <andersca> hmm, that sounds like a really good use for caps-lock
05:31:08 <andersca> maybe I should macro it
05:31:26 <shapr> yah, I like having hippie-expand on caps_lock
05:31:40 <shapr> ludde: I can spellcheck my irc messages while I'm typing them
05:32:11 <shapr> I can hit C-c d to look up swedish/english/etc word in my local dictionaries
05:32:22 <shapr> f11 translates a region of lojban text into english
05:32:33 <shapr> ludde: this is just the irc related functionality ;-)
05:33:11 <andersca> shapr: that will make norpan happy, he's learning lojban
05:33:21 <ludde> ok :)
05:33:27 <shapr> the irc client I'm using, ERC, also supports playing chess via CTCP
05:33:34 <shapr> so I'm going to integrate that into lambdabot as well
05:33:41 <opet> wow
05:33:46 <shapr> since delYsid is writing chess playing code in Haskell
05:33:52 <opet> what a useful feature.. I've been looking for that for years
05:34:02 <shapr> opet: now you have it!
05:34:19 <shapr> lojban is fun
05:34:21 <opet> shapr: I'd have to install emacs, though
05:34:29 <shapr> opet: it's worth it!
05:34:31 <opet> which isn't going to happen :)
05:35:02 <shapr> I used to be a vim user
05:35:24 <andersca> so how does hippie-expand work
05:36:08 <shapr> andersca: have you used M-/ aka dabbrev-expand ?
05:36:35 <andersca> yes
05:36:39 <andersca> I think I have that mapped to C-tab
05:36:40 <Jolta> Ludde: hi! what's happening today then?
05:36:59 <ludde> Jolta: testing bastu with marqx.
05:37:21 <shapr> andersca: dabbrev-expand is just one of several types of 'expanders', hippie-expand is a 'meta-expander' that tries the multiple expanders in turn until one of them succeeds
05:37:28 <Jolta> ah, so you're in NC? I see. Oh yes, now I remember...
05:37:39 <andersca> shapr: ah, cool
05:37:39 <shapr> hitting it again goes on to the next successful expansion, etc
05:37:50 <Jolta> ludde: is it working yet? =)
05:38:28 <ludde> we're just about to test... the network communication part.
05:38:40 <shapr> andersca: at the bottom of http://kungens.kemi.fi/~shae/src/elisp/shae-other.el is how I've setup my hippie-expand stuff
05:38:41 <ludde> marqx is changing something in the source.
05:40:08 <andersca> shapr: what is icomplete?
05:40:14 <andersca> is it like iswitchb?
05:42:18 <Jolta> ludde: right now I'm writing stuff for the Spexet, but I'm in #haskellwars if anything goes wrong. =)
05:43:44 <Igloo> Spexet?
05:44:11 <shapr> hi nerdlor
05:44:47 * shapr boings happily
05:45:16 <shapr> andersca: icomplete does minibuffer completion, sort of like electric completion
05:45:22 <shapr> it's really handy
05:45:26 <andersca> cool
05:45:57 <shapr> all of my emacs init files are in http://kungens.kemi.fi/~shae/src/elisp/
05:46:06 <Jolta> igloo: it's... something very Swedish. A musical student farce, you might say. But thats not really a good description
05:46:20 <Igloo> Ah, OK
05:46:33 * andersca releases libgnomecanvas
05:46:36 <andersca> 2.2.1 actually
05:46:37 <shapr> andersca: beware, it's over 1200 lines now :-)
05:47:20 <andersca> shapr: so did you add a macro for hippie-expand?
05:48:20 <shapr> nah, I used xkeycaps to set caps_lock to yen, and then bound yen to hippie-expand
05:48:45 <andersca> ah
05:48:47 <andersca> yen...
06:06:04 <delYsid> hmm, how do I split a string in haskell?
06:06:22 <andersca> partition?
06:06:26 <shapr> check out Util.split in lambdabot sources
06:06:27 <delYsid> split :: String -> Char -> [String]
06:06:35 <andersca> delYsid: ah
06:07:19 <delYsid> shapr: you mean there *is* no simple way, like (split-strin g"blah blah" " ") in elisp?
06:07:39 <shapr> there are simple ways
06:07:39 <delYsid> s/g"/"/
06:07:42 <ludde> for that particular example you can use words
06:07:54 <shapr> but I suspect you want split in lambdabot's sources
06:08:12 <ludde> shapr: how do i run a lambdabot command?
06:08:20 <delYsid> yow
06:08:20 <shapr> @yow
06:08:21 <lambdabot> It's the land of DONNY AND MARIE as promised in TV GUIDE!
06:08:35 <shapr> ludde: if it's in @listcommands put an @ sign before the command name
06:08:44 <ludde> can it still evaluate haskell expressions?
06:08:53 <ludde> @listcommands
06:08:54 <lambdabot> I react to the following commands: ["define","definitions","del-definition","dump","echo","eval","fact","fortune","get-definition","goodbye","hello","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","quit","resume","searchml","set-fuel","showml","state","topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type","yow"]
06:09:04 <ludde> @eval 1+2
06:09:05 <lambdabot> 3
06:09:14 <ludde> @eval head [1,2,3]
06:09:14 <lambdabot> 1
06:09:25 <andersca> shapr: http://www.cafeshops.com/emacs.1619481
06:09:27 <delYsid> ludde: words is exactly what I wanted!
06:09:30 <delYsid> tnx
06:09:30 <ludde> @eval [1..]]
06:09:31 <lambdabot> (line 1, column 3):
06:09:31 <lambdabot> unexpected "."
06:09:31 <lambdabot> expecting digit, operator, simple term, "," or "]"
06:09:35 <ludde> @eval [1..]
06:09:36 <lambdabot> (line 1, column 3):
06:09:36 <lambdabot> unexpected "."
06:09:36 <lambdabot> expecting digit, operator, simple term, "," or "]"
06:09:40 <ludde> :(
06:09:50 <ludde> @eval [1..2]
06:09:51 <lambdabot> (line 1, column 3):
06:09:51 <lambdabot> unexpected "."
06:09:51 <lambdabot> expecting digit, operator, simple term, "," or "]"
06:10:02 <ludde> ah, it's not haskell?
06:10:06 <shapr> andersca: nice =)
06:10:23 <andersca> shapr: although mine has "emacswiki.org" on the back
06:10:23 <shapr> the Eval plugin is a lambda calculus interpreter that Darius wrote
06:10:32 <shapr> andersca: I want one!
06:10:45 <andersca> shapr: I think daniel made them
06:11:21 <shapr> he did that logo didn't he?
06:11:32 <andersca> yeah
06:12:02 <ludde> @eval let f a = a in f 6
06:12:03 <lambdabot> (line 1, column 9):
06:12:03 <lambdabot> unexpected "="
06:12:03 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string, "(", operator, simple term or end of input
06:12:23 <ludde> sharp: is it guaranted to terminate?
06:12:27 <ludde> eed
06:12:34 <shapr> I dunno
06:14:21 <ludde> @eval tail []
06:14:22 <lambdabot> tail of empty list
06:15:17 <ludde> shapr: do you have some tutorial for @eval ?
06:15:23 <shapr> the source?
06:15:30 <shapr> or you could look at the existing definitions
06:15:33 <shapr> @definitions
06:15:34 <lambdabot> ["B","Branch"]
06:15:34 <lambdabot> ["C","Cons"]
06:15:34 <lambdabot> ["False"]
06:15:34 <lambdabot> ["I"]
06:15:34 <lambdabot> ["Just"]
06:15:34 <lambdabot> ["K"]
06:15:43 <shapr> @more
06:15:44 <lambdabot> ["Leaf","Left"]
06:15:44 <lambdabot> ["MonadError","MonadReader","MonadState","MonadWriter","MonadWriter_"]
06:15:44 <lambdabot> ["Nil","Nothing"]
06:15:44 <lambdabot> ["Pair"]
06:15:44 <lambdabot> ["Right"]
06:15:46 <lambdabot> ["S","StateT","Succ"]
06:15:47 <shapr> @get-definition Right
06:15:48 <lambdabot> Right = \x l r.r x
06:15:53 <ludde> oh cool.
06:19:26 <ludde> @eval (\x k. x) 1
06:19:26 <lambdabot> <<EM Dynamic -> EM Dynamic>>
06:19:35 <ludde> @eval (\x. x) 1
06:19:36 <lambdabot> 1
06:20:04 <ludde> @eval (\x. x x)(\x. x x)
06:20:05 <lambdabot> out of fuel
06:20:09 <ludde> heh
06:49:39 * shapr advertises
06:50:19 <shapr> y0 Arnia 
06:50:37 <Arnia> Hey shapr
06:50:39 * Arnia bounces
06:51:04 <shapr> wassup?
06:51:55 <Arnia> Just started a blog
06:52:03 <shapr> what's the url?
06:52:20 <Arnia> Currently: http://no-sight.blogspot.com
06:52:41 <Arnia> I'm going to move it to http://www.nosightatnight.co.uk as soon as I've got the skins done :)
06:56:58 <Arnia> Oooh... now this is a political system I can advocate :)
06:57:17 <Riastradh> ?
06:57:46 <delYsid> hmm, is there a elem for a either list?
06:58:20 <delYsid> Something like elem2 :: a -> [Either b a] -> Bool
06:58:20 <delYsid> ?
06:58:42 <Riastradh> Surely it can't be hard to write.
06:58:53 <delYsid> k
07:00:09 <delYsid> hmm
07:00:39 * Riastradh pokes someone here who has a very thorough understanding of arrows...if such a person exists...
07:01:11 <Arnia> http://v-2.org/displayArticle.php?article_cat=4
07:01:32 <Jolta|mat> @fortune
07:01:33 <lambdabot> Why won't you let me kiss you goodnight?  Is it something I said?
07:01:33 <lambdabot> 		-- Tom Ryan
07:01:37 <Riastradh> @yow
07:01:38 <lambdabot> There's a lot of BIG MONEY in MISERY if you have an AGENT!!
07:01:47 <Jolta|mat> @fact
07:01:48 <lambdabot> empty factoid, BZZZT, thank you for playing!
07:01:55 <Jolta|mat> eh?
07:02:02 <Riastradh> @fact zippy
07:02:02 <lambdabot> Nothing
07:02:03 <shapr> Jolta|mat: it's a key -> value database
07:02:08 <Riastradh> @fact Riastradh
07:02:09 <lambdabot> Nothing
07:02:12 <shapr> Riastradh: ross patternson, john hughes
07:02:19 * Riastradh vanishes into obscurity...
07:02:25 <Riastradh> shapr - Preferrably in this channel.
07:02:26 <shapr> @fact Riastradh wrote the karma plugin
07:02:27 <lambdabot> set riastradh to wrote the karma plugin
07:02:34 <delYsid> either
07:02:35 <delYsid> bah
07:02:41 <Jolta> @fact john hughes
07:02:42 <lambdabot> set john to hughes
07:02:45 <Jolta> oops
07:02:53 <Riastradh> @fact delete john
07:02:54 <lambdabot> deleted john
07:02:54 <shapr> Jolta: you can use @fact delete john
07:02:57 <Jolta> that's not what i intended...
07:03:02 <Jolta> @fact delete john
07:03:03 <lambdabot> deleted john
07:03:10 <Riastradh> @fact JohnHughes he who designed arrows
07:03:11 <lambdabot> set johnhughes to he who designed arrows
07:03:25 <shapr> he'll probably claim he just formalized them
07:03:35 <Riastradh> Yes, but he's not here to claim that, is he?
07:03:40 <Jolta> but how do I lookup facts on people?
07:03:45 <Riastradh> @fact JohnHughes
07:03:45 <lambdabot> he who designed arrows
07:03:53 <Darius> he'll probably claim that he just stole them from Category Theory
07:04:07 <shapr> Jolta: @fact is just a postgresql database
07:04:10 <Jolta> darius: I think he did in his paper. =)
07:04:19 <Riastradh> Still?!
07:04:21 <shapr> so whatever has been put in, that's what you can get out
07:04:23 <shapr> Riastradh: yes still!
07:04:28 <Riastradh> Argh!
07:04:34 <shapr> I'll fix it! I will!
07:04:49 <Riastradh> I gave you an almost working version of it!
07:04:50 <Darius> Jolta: That makes it even more likely he'll claim it ;)
07:05:11 <Riastradh> Considering that you're much better at Haskell than I, surely it can't be difficult for you to fix the little errors in it!
07:05:30 <Jolta> @fact Jolta a student at Chalmers, Gothenburgh
07:05:30 <lambdabot> set jolta to a student at Chalmers, Gothenburgh
07:05:35 <shapr> @fact shapr 
07:05:36 <lambdabot> Shae Erisson, wrote the factoid plugin for lambdabot, 31 years old, good for the karma, now dubbed legendary
07:05:40 * shapr snickers
07:05:46 <Darius> @karma shapr
07:05:47 <lambdabot> shapr has a karma of 2
07:05:49 <shapr> wow, nifty
07:05:55 <Darius> @karma Darius
07:05:55 <Jolta> @fact marvin
07:05:56 <lambdabot> You have a karma of 0
07:05:56 <lambdabot> Nothing
07:06:01 <shapr> @fact Marvin-- 
07:06:03 <lambdabot> Martin Sjögren, debian developer, developer of d-i among other pkgs
07:06:10 <Riastradh> d-i?
07:06:10 <Jolta> ah
07:06:17 <shapr> debian-installer diskettes I think
07:06:23 <Jolta> yep
07:08:07 <shapr> at the moment there's no way to do a wildcard search for keys, or get a list of keys in the database
07:08:09 * Riastradh finds an error in John Hughes' arrow paper.
07:08:15 <shapr> Jolta: but you could fix that ;-)
07:08:53 <Jolta> nah. but @fact still beats a whois search for usefulness! =)
07:08:58 <Igloo> Were we in the communities report BTW? If so someone wshould probably send a "Still here!" message
07:09:08 <Jolta> Riasradh: which error is that?
07:09:44 <Riastradh> Jolta - It declares 'arr' as:    arr :: (a -> b) -> a b c
07:10:02 <shapr> should be b -> c
07:10:02 <Riastradh> This can't be true, since 'a' takes two type variables, and c is never declared elsewhere in the type.
07:10:06 <Riastradh> Indeed.
07:10:58 <Jolta> hm. Yes, I guess that would be that "draft" version that's on his webpage?
07:11:08 <ludde> Jolta: vi skulle ha möte nu
07:11:10 <Riastradh> Indeed.
07:11:29 * Riastradh cowers in fear of the Swedish or something that's being said.
07:11:29 <Jolta> ludde: skulle vi? sa vi en tid?
07:11:33 <ludde> 15
07:11:57 <Jolta> ludde: but that's long ago...
07:12:07 <ludde> ja
07:12:19 <ludde> är du där
07:12:21 <ludde> annars gör det inget
07:12:27 <ludde> err, här.
07:12:41 <Jolta> ludde: I'm at home, sadly
07:12:46 <ludde> oki
07:12:53 <ludde> bbl
07:16:03 * Arnia sighs happily at arrows and mutters about people swapping the meaning of combinators
07:16:58 <shapr> yah, the arrow syntax doesn't seem tightly fixed
07:17:38 * Darius is just glad it supports: in >- f -> out now
07:17:57 <shapr> is that with ross patterson's preproc?
07:18:29 <Darius> yes (I guess).  The newer version of arrowp
07:18:45 <Arnia> shapr: Yeah... its a good syntax although people get confused about what in and out really are
07:18:47 <Jolta> darius: cool.
07:21:13 <shapr> latest version of hmake supports arrow preprocessors, doesn't it?
07:21:53 * Darius doesn't use hmake, so he doesn't know.
07:22:02 <Jolta> me neither
07:24:31 <delYsid> eelem c = elem c . map (either id id) .
07:24:31 <delYsid>           filter (either (const False) (const True))
07:24:40 <delYsid> eeeeek, this is not particularily nice.
07:25:35 <shapr> I thought I saw a message yesterday about using ghc to unlit files
07:25:46 <shapr> something like ghc -c Foo.lhs -o Foo.hs
07:25:49 <Darius> isRight
07:25:50 <shapr> but that doesn't seem to work
07:25:54 <Darius> add -E
07:25:58 <Darius> I think
07:26:14 <Darius> if you are talking about the message on haskell@haskell.org
07:26:26 <shapr> oh, nice
07:26:28 <shapr> yah, that one
07:26:47 <shapr> what's -E ?
07:28:00 <shapr> ohh
07:28:11 <shapr> -E          stop after generating preprocessed, de-litted Haskell (used in conjunction with -cpp)
07:28:24 <shapr> I wonder what else happens in the preprocessor
07:29:36 <delYsid> hmm, where is isRight defined?
07:30:00 <Darius> delYsid: eelem c l = elem c [e | Right e <- l]
07:30:07 <Darius> In Data.Either
07:31:04 <delYsid> Darius: tnx!
07:31:08 <delYsid> now even the type-sig is right...
07:31:28 <delYsid> i.e., my version assumed Either b b, which is absolutely not what I wanted
07:31:59 <Darius> map (either undefined id) would've fixed that
07:34:04 <delYsid> woohoo!
07:34:19 <delYsid> Darius: ahh, undefined, good to know that one
07:37:57 <shapr> how are wishlist bugs usually phrased? "ghc 5.04.3 has been released, want want" ?
07:43:54 <Igloo> It's in unstable I think
07:44:09 <Igloo> But the glut docs bug, that I thought had been resolved, is holding it up
07:45:30 <shapr> I'm using unstable
07:45:37 <shapr> it's 5.04.2
07:45:47 <shapr> at least, I think I'm using unstable
07:45:56 <shapr> sid == unstable ?
07:46:13 <o3> nod
07:46:17 <shapr> ok
07:46:18 <Igloo> Oh, I'm wrong
07:46:44 <Igloo> Ah, it's still 5.02.2 in testing, that's why
07:47:07 <shapr> is testing before unstable or after?
07:47:29 <Riastradh> ASCII ought to include the lambda character.
07:47:31 <o3> before
07:47:33 <shapr> ok
07:48:03 <Igloo> "before"? "after"?
07:48:15 <shapr> Igloo: I think the ghc5-opengl package should be completely replaced with the latest thing from sven panne's website
07:48:19 <Darius> Riastradh: Along with alpha, beta, and the rest of the greek alphabet?
07:48:22 <Igloo> stable, testing, unstable, experimental anyway
07:48:31 <shapr> ah, ok
07:48:38 <shapr> I'll stick with unstable
07:49:02 <Riastradh> Darius - No, if you're going to do that, you might as well be using a Greek-specific character set, or Unicode.
07:49:32 * shapr has bunches of ideas for Super Haddock
07:49:39 <shapr> especially the logo
07:49:57 <Igloo> :-)
07:49:58 <Riastradh> Can you name at least three languages which use alpha and beta as a fundamental syntactic and semantic device?
07:50:06 <Riastradh> Programming languages, that is.
07:50:11 <Igloo> Logos are always one of my weaknesses. Along with names.
07:50:12 <Darius> APL
07:50:17 <Riastradh> That's one.
07:50:23 <shapr> matlab
07:50:25 <shapr> ?
07:50:37 <Riastradh> Er, that's two.
07:50:38 <shapr> what about gnu octave, or R or whatever it's called?
07:50:41 <Riastradh> Damn.
07:50:43 * Riastradh is beaten.
07:50:44 <shapr> :-)
07:50:47 * Riastradh goes off to use Unicode.
07:50:51 <Jolta> apl already uses unicode, in some implementations (right?)
07:50:59 <shapr> I'm not sure if octave or matlab actually use alpha or beta
07:51:03 <shapr> just guessing they would
07:51:12 <Riastradh> Oh.
07:51:19 <Riastradh> In that case, I'm not beaten yet!
07:51:19 <Igloo> All Haskell 98 implementations use unicode
07:51:34 <Riastradh> They do?
07:51:39 <Igloo> Yup
07:51:43 <Jolta> that's in the spec?
07:51:51 <o3> intercal?
07:51:52 <Igloo> I don't think there are any Haskell 98 implementations, though
07:52:03 <Jolta> *lol*
07:52:03 <shapr> I thought neither GHC nor Hugs supported unicode source?
07:52:04 <o3> (that should be a valid answer to any "what language ..." question)
07:52:26 <shapr> I can barely wait till they do.. think of the new operators we'll be able to come up with.
07:52:34 <tmoertel> "Haskell uses the Unicode [11] character set. However, source programs are currently biased toward the ASCII character set used in earlier versions of Haskell ." -- Report 2.1
07:52:37 <Darius> The implementations page lists HBC as the only Haskell implementation supporting Unicode
07:52:44 <o3> like a lambda operator :}
07:52:51 <shapr> we can write APL+++ (and that would be four chars)
07:52:54 <Darius> (and even then not all the way)
07:53:06 <Riastradh> But...why doesn't it use the lambda character instead of a backslash?
07:53:24 <Darius> It being Haskell?
07:53:34 <shapr> Riastradh: suggest it for H2
07:53:41 <Riastradh> H2?
07:53:44 <shapr> Haskell Two
07:53:51 <Riastradh> Well, duh.
07:53:53 <Riastradh> But what is it?
07:54:00 <delYsid> White to move: [Right Rc2-c8] Calculated Qf6xQd8+, Failed
07:54:00 <delYsid> White to move: [Right Qd1xBg4+] Calculated Qd1xBg4+, OK
07:54:00 <shapr> the H'05 standard
07:54:00 <delYsid> White to move: [Right Qd1xPd6+] Calculated Bg5xNe7, Failed
07:54:00 <delYsid> White to move: [Right Qd1-e1+] Calculated Qd1-e1+, OK
07:54:00 <delYsid> White to move: [Right Rc1-c8+] Calculated Qg6xPf5, Failed
07:54:00 <delYsid> White to move: [Right Qe3-h6+] Calculated Nd4xPe6+, Failed
07:54:03 <delYsid> cute!!!!!
07:54:47 <Darius> shapr: Is that a set date somewhere or are you picking numbers out of a hat?
07:55:37 <shapr> Hat ;-)
07:56:01 <Darius> Damn :P.  But maybe that means it will be H'03 or '04 !
07:56:14 <shapr> ya!
07:56:19 * Darius writes code targetting Haskell II.
07:56:23 <shapr> heh
07:56:33 <shapr> there's a HaWiki page about HaskellTwo
07:57:25 <shapr> hi bryan|away 
07:57:43 <Igloo> Everyone not writing pure H98 code is probably targetting Haskell II
07:57:50 * shapr raises his hand
07:57:52 <shapr> me me!
07:57:59 <Igloo> Roughly speaking, anyway
07:59:01 <Darius> There are some things that are more out there than others, such as undecidable instances, arrow notation, or views (are there any implementations of views?)
07:59:17 <shapr> what's a view?
07:59:24 <Arnia> darius: GHC has a form of active patterns.
07:59:46 <Darius> Arnia: FGL inspired?
07:59:50 <Igloo> I don't really know what's likely to go into H2; well, I'd be amazed if hierarchial libraries didn't
08:00:20 <Darius> and mulitparameter classes and fundeps
08:00:21 <shapr> I suspect MPTC will make it 
08:00:24 <shapr> yah, those
08:00:34 <shapr> I still don't understand them enough to use them though....
08:00:38 <Jolta> Arrow preprocessing! =)
08:00:39 <Darius> and likely at least rank-2 polymorphism
08:00:43 <Arnia> darius: Yes. It allows mapping functions on the pattern and active guards that do binding themselves
08:00:48 <jemfinch`> shapr: did you write lambdabot from scratch
08:00:49 <jemfinch`> ?
08:00:52 <shapr> @fact author
08:00:53 <lambdabot>  Andrew Bromage aka Pseudonym
08:01:05 <shapr> jemfinch`: no, I just picked it up and added some bits.
08:01:07 <Jolta> @fact arrows
08:01:08 <lambdabot> more abstract than monads
08:01:09 <jemfinch`> ah, ok.
08:01:12 <shapr> quite a few bits actually
08:01:15 <o3> @fact bow
08:01:16 <lambdabot> Nothing
08:01:19 <o3> hmm
08:01:23 <shapr> but the basic structure is still what Pseudonym wrote
08:01:31 <Arnia> @fact seagull
08:01:31 <lambdabot> Nothing
08:01:34 <Arnia> @fact plone
08:01:35 <lambdabot> Nothing
08:01:35 <jemfinch`> shapr: I assume you can send the result of IO computations to the network, right?
08:01:40 <shapr> yah, sure
08:01:50 <jemfinch`> shapr: do you have a good example of how to do so?
08:02:02 <shapr> hm
08:02:11 <Arnia> @fact plone a powerful, commercial quality open-source CMS written for the Zope platform
08:02:11 <lambdabot> set plone to a powerful, commercial quality open-source CMS written for the Zope platform
08:02:12 <shapr> just liftIO the results
08:02:27 <jemfinch`> shapr: liftIO?
08:03:08 <shapr> it turns an IO result into an IRC result (at least, in this case)
08:03:18 <shapr> look at the Yow and Fortune modules
08:03:19 <jemfinch`> ah, interesting.
08:03:27 <jemfinch`> shapr: I'll write the CPUTime module.
08:03:32 <shapr> they get an IO Clocktime
08:03:34 <shapr> nifty!
08:03:37 <jemfinch`> (you could do it in seconds, but I'm curious what it'll look like)
08:03:49 <shapr> yah, I like to save some of the fun for others :-)
08:03:56 <jemfinch`> exactly :)
08:04:03 * jemfinch` does that with Supybot too.
08:04:12 <Marvin--> what's the definition of "commercial quality"?
08:04:27 <Darius> heh
08:04:29 <jemfinch`> Marvin--: good enough for Microsoft.
08:04:30 <Marvin--> or is the grouping "commercial (quality open-source ...)"?
08:04:40 <Marvin--> jemfinch: doesn't say a lot
08:04:43 <Riastradh> Commercial open-source??
08:04:49 <shapr> Riastradh: like winex?
08:04:57 <Riastradh> Winex?
08:05:01 <shapr> transgaming.com
08:05:50 <Arnia> In this case, I'm trying to distance Plone from phpNuke and make us seem cosy with Interwoven *spits* ;)
08:09:54 * delYsid checks in testing-code
08:12:24 <delYsid> 239 moves found, 762 failed.
08:12:27 <delYsid> hehe
08:12:35 <jemfinch`> of what?
08:12:47 <shapr> I want to write @chess this weekend
08:13:19 <jemfinch`> shapr: it's odd that you mentioned that, I was just telling someone that I wanted to write an SML IRC bot that played chess.
08:13:51 <shapr> soon lambdabot will play chess :-)
08:14:10 <Darius> delYsid: you don't have a case for test.hs in the Makefile
08:20:09 <Riastradh> What do the circumflex and the little circle mean in Hughes' paper? -- SP (empty1 ^ empty2) ..., DP (p1 <circle> p2)
08:20:43 <shapr> sounds like set functions
08:23:24 <Darius> conjunction (and, &&) and composition
08:24:19 <Riastradh> Ah, ok.
08:26:41 <delYsid> Darius: ah...
08:26:53 <delYsid> ghc -o test --make test.hs
08:26:56 <delYsid> works fine for now :)
08:27:16 <delYsid> anyone any idea how I can prevent having to pass -package text to EPD.o?
08:28:44 <shapr> if you "import FiniteMap" you need -package data, but "import Data.FiniteMap" does not require -package data
08:29:03 <shapr> that doesn't work for libraries that haven't been moved into the hierarchial structure yet
08:29:18 <delYsid> hmm, so what is the right path for parsec?
08:29:25 <delYsid> or, how do I find that out?
08:29:26 <shapr> it's huge...
08:29:28 * shapr looks
08:29:45 <shapr> import Text.ParserCombinators.Parsec
08:30:03 <shapr> and you'll probably have to import some of the subtrees there also
08:30:27 <shapr> it is nicely descriptive though
08:33:46 <delYsid> ok, done.  test should be compiled if you type make now
08:35:46 <delYsid> and a sample epd file is also checked in now
08:39:04 <shapr> hi esap 
08:39:06 <shapr> wassup?
08:39:46 <esap> Hi, not much is up.
08:40:17 * esap is preparing for a coding session.
08:40:22 <shapr> yay code!
08:40:45 <Igloo> :-)
08:41:09 <delYsid> hmm, if my employer would know how much time I spent with haskell today...
08:41:17 <shapr> yow
08:41:19 <shapr> @yow
08:41:20 <lambdabot> NANCY!!  Why is everything RED?!
08:41:36 <shapr> delYsid: on the other hand, you're improving your programming skills
08:41:44 <shapr> so you could claim on-the-job-training
08:41:57 <delYsid> well, it works sort of that way, yeah...
08:42:00 <shapr> I'm self-employed, and I don't pay myself for the time I spend writing Haskell.
08:42:03 <delYsid> but I dont do much programming at work...
08:42:08 <delYsid> anyway, they tolerate it
08:42:08 <esap> I think my employer would be completely stunned at how much more code I get done during my free time than at work.. .:-)
08:42:49 <shapr> there's this guy on usenet who posts under "Topmind" and the one intelligent thing I've heard him mention is "zealot oriented programming"
08:42:55 * delYsid waits for ./test bwtc.epd 3 to finish
08:43:27 <Darius> what is an epd file anyways?
08:43:28 <delYsid> today: How To Punish Your CPU
08:43:42 * shapr gets a stick
08:43:46 * Darius compiles it with profiling to boot.
08:43:46 <delYsid> Darius: a collection of positions
08:43:47 * shapr beats on his CPU!
08:43:56 <shapr> bad computer!
08:44:05 <shapr> Igloo: RTS pong
08:44:21 <delYsid> Darius: the examples I included contain a "bm" field, which is the "best move" for this position
08:44:38 <delYsid> test does nothing else then look for the best move, and compare with the "bm"
08:44:49 <shapr> that's a good test.
08:44:55 <Igloo> shapr: I realised a C&C cloneish is the basis of it, so we could start by writing that BTW
08:44:57 <Darius> Did you cvs add EPD.hs?
08:45:09 <delYsid> I think so.. wait
08:45:19 <shapr> Igloo: ok
08:45:21 <delYsid> ah, I forgot
08:45:40 <Igloo> Does pong mean I have mail?
08:45:45 <shapr> Igloo: yes
08:45:49 <delYsid> Darius: done
08:45:56 <Igloo> Cool, *prods*  :-)
08:46:11 <shapr> ?
08:46:44 <shapr> prods who?
08:46:55 <shapr> oh, I know something useful I could do this weekend.
08:47:00 <shapr> ANNOUNCE IOHCC RESULTS!
08:47:01 <shapr> w00
08:47:26 <delYsid> IOHCC?
08:47:30 <Jolta> yes, please do! =)
08:47:34 <Jolta> @yow
08:47:35 <lambdabot> Laundry is the fifth dimension!!  ...um...um...  th' washing machine
08:47:35 <lambdabot>  is a black hole and the pink socks are bus drivers who just fell in!!
08:47:37 <Igloo> prods my mail server
08:47:44 <shapr> the International Obfuscated Haskell Code Contest
08:47:47 <shapr> @fact iohcc
08:47:48 <lambdabot> Nothing
08:47:52 <Igloo> Oh, yes, that really should be done
08:48:04 <Jolta> i've waited months... =)
08:48:15 <shapr> heh
08:48:19 <shapr> Jolta: did you enter?
08:48:31 <Jolta> oh no, I just enjoy reading strange code.
08:48:54 <Jolta> just browsing ioccc entries occupied me for weeks
08:48:56 * Igloo suggests writing a webpage somewhere sekrit, giving hte list a day or two to say OK and then send the content to a list and link it from the page
08:49:01 <delYsid> hmm, come to think of it, all my haskell code so far probably qualifies...
08:49:19 <shapr> IOHCC got some nifty code.
08:49:25 <shapr> you'll see...
08:49:34 * esap 's entry was not one of them, I guess :-)
08:50:02 <delYsid> nothing beats that "flag" in C
08:50:11 <delYsid> when I saw that, I broke down laughing
08:50:13 <shapr> esap: your entry qualifies as nifty code, imho
08:50:13 <esap> "flag"?
08:50:22 <esap> oh ok. thanks.
08:50:34 <delYsid> esap: there is a C obfuscated code around on the net somewhere, which "looks" like a flag.
08:50:55 <delYsid> it basicly looks like ascii art, and also can be complied to translate ascii chars into "flag signals"
08:50:59 <shapr> esap: I shrank my font down to something really small and ran it lots of times =)
08:51:23 <delYsid> s/complied/compiled/
08:53:04 <esap> shapr: I was somewhat worried about how much difference in behaviour there would be between different machines. With too much speed, it might not be good enough.
08:59:53 <shapr> esap: how many fps were you expecting?
09:01:28 <esap> shapr: well my machine is quite slow compared to what I'd expect everyone else has. I get about 2-3 fps or so.
09:04:10 <Darius> esap, what's yours? 
09:07:03 * esap 's IOHCC entry has a rotating mandelbrot.
09:07:56 <Darius> er machine
09:08:28 <esap> oh 2*466 dual celeron
09:08:35 <vincenz> Hmm, what's IOHCC?
09:08:51 <Darius> read the backlog a bit
09:09:04 <vincenz> Alright, how do I search in irssi?
09:09:19 <vincenz> AH!
09:09:26 <vincenz> International Obfuscated Haskell Code Contest
09:09:52 <vincenz> can you really obfuscate taht much beyong what seems to be common haskell practice (one-lettered variables....)
09:10:00 <vincenz> s/taht/that/
09:10:01 <Darius> sure
09:10:07 <vincenz> s/beyong/beyond/
09:10:09 <Darius> give misleading names
09:10:12 <vincenz> heh
09:10:17 <vincenz> actually that'd be better
09:10:30 <jadrian> Argh... "Disk space needed: from about 100Mb for a basic GHC build, up to probably 500Mb for a GHC build with everything included (libraries built several different ways, etc.)."
09:10:35 <vincenz> it's easier to remember a name than a one lettered variable that seems to be used in every function
09:10:46 <vincenz> 500 MB FOR HASKELL?!?
09:10:49 <vincenz> One word: Ocaml
09:11:00 <Darius> who said you can't reuse you misleading names?
09:11:11 * jadrian misses SuSE binaries
09:11:17 <Darius> also shadow variables shamelessly
09:11:20 <Igloo> You will probably only want 2 ways
09:11:35 <vincenz> Darius: I don't know, I think with c you can do some major fucked up shit
09:11:52 <esap> and another good technique for obfuscating is to use lots of higher-order functions (concatMap and mapM_ etc are perfect for that!)
09:12:07 <jadrian> Still, I just have about 140Mb free...
09:12:24 <vincenz> esap: it's not obfuscated, just conceptually hard to grasp
09:12:28 <vincenz> I think the two are different
09:12:39 <vincenz> Anyways
09:12:41 <vincenz> I'm going home
09:12:45 <vincenz> it's friday, it's 6pm
09:12:47 <vincenz> time to go home
09:12:49 <Darius> concatMap is much simpler than the code it takes to implement it
09:12:50 <shapr> have fun
09:12:54 * vincenz detaches his screen
09:12:56 <vincenz> later shapr!
09:13:19 <vincenz> I'll catch you online at home, if I'm not too busy playing with my ultra-new gentoo distro
09:13:24 <shapr> :-)
09:13:34 <shapr> hi hal
09:13:37 <hdaume> sup
09:13:41 * vincenz waves and does CTRL+a CTRL+d
09:13:43 <shapr> not much
09:19:32 <Darius> mental note: do NOT do cvs up -dP in fptools
09:19:55 <Igloo> Been there, done that  :-)
09:22:21 <shapr> why not?
09:22:39 <Riastradh> shapr - Do it and find out!
09:22:48 <shapr> it just makes me wish -z3 worked with cvs up
09:22:54 <shapr> or that I could do rsync instead
09:25:13 * shapr tries cvs up -Pd
09:25:26 <shapr> nothing is happening.
09:26:34 <shapr> oy
09:27:17 <Igloo> shapr: You only check out the bits of fptools you are interested in
09:27:28 <Igloo> -d means that when you update you get everything else too
09:27:42 * shapr has always done that
09:28:11 <shapr> on the good side, that means there's lots of fun stuff to look at
09:30:21 <Igloo> :-)
09:38:35 * hdaume misses punnin
09:38:36 <hdaume> g
09:39:18 <delYsid> hmm, does ghc have something like gcov? i.e., can it somehow use trace data for a second optimisation pass?
09:40:34 <shapr> I think it can tell you about unused code anyway
09:40:44 <shapr> try adding -Wall
10:13:09 <hdaume> delYsid: using profiling is somewhat like gcov
10:26:10 * shapr sheboings
10:26:34 <andersca> wham!
10:26:44 <shapr> I wonder....
10:26:52 <shapr> HaskellDB works with ODBC in win32
10:26:59 <shapr> you think it'll work with unixodbc?
10:27:19 <andersca> I like the google logo
10:27:36 <shapr> nifty!
10:29:53 <Darius> shapr: do (have) you read Sluggy Freelance? (Score one for the English language: 'read')
10:30:37 <shapr> no
10:30:53 <shapr> just heard of it
10:31:33 <Darius> Hmm, I think you'd enjoy it.
10:31:45 <Darius> @fact Sluggy www.sluggy.com
10:31:45 <lambdabot> set sluggy to www.sluggy.com
10:31:54 * shapr reads
10:32:11 <Darius> It has a pretty involved plot
10:32:52 <Darius> If you just jump in the middle things typically don't make much sense (but if you want some straightforward humor, read the election day special)
10:32:54 * shapr starts at the beginning
10:33:21 <shapr> oh, I have read some of this long ago
10:36:33 <shapr> on the flip side, I had this urge to start drawing a web comic of my own this morning.
10:36:42 <shapr> I blame it on lack of sleep
10:37:03 <Darius> @fact Sluggy http://www.sluggy.com/daily.php?date=001107
10:37:04 <lambdabot> set sluggy to http://www.sluggy.com/daily.php?date=001107
10:39:09 <Darius> @fact Sluggy
10:39:09 <lambdabot> www.sluggy.com, http://www.sluggy.com/daily.php?date=001107
10:43:56 <shapr> Radek_MOB: are you being mobbed?
10:46:42 * shapr emails Daan Leijen about HaskellDB licensing
11:04:40 <jadrian> [english help!] something you can eat is "eatable", something you can deduce is "dedu?????"
11:04:57 <shapr> actually, something you can eat is edible
11:05:00 <hdaume> deductable
11:05:12 <jadrian> shapr: I was almost sure that was wrong lol
11:05:16 <Darius> deducible
11:05:28 <hdaume> deductible e ven :)
11:05:40 <jadrian> ok so who votes on hal and who votes on Darius!
11:05:41 <Riastradh> Even, even!
11:05:53 <jadrian> :)
11:05:54 <hdaume> :)
11:05:54 <Riastradh> I say look it up in the OED.
11:06:08 <hdaume> or just m-w.com
11:06:21 * jadrian is looking up OED first...
11:06:40 <Riastradh> No, m-w.com is the dictionary of a buffoon who thought that simplifying the English language would improve it.  (hah!  If you want a simple language, you shouldn't be using English in the first place)
11:07:11 <hdaume> nyuh.  i see not what wrong with that is
11:08:24 <jadrian> Riastradh: OED isn't free is it? :-/
11:08:36 <Riastradh> No, it isn't, I'm afraid.
11:08:47 <Riastradh> However, you only need to buy it once.
11:09:13 <Riastradh> After that you'll never need another English dictionary in your life.
11:09:32 <hdaume> right, because language doesn't change :)
11:09:39 <jadrian> :)
11:10:18 <jadrian> I'll stick to m-w.com for now ;)
11:10:20 <Riastradh> Should the language change, then the change would be common knowledge, and therefore you wouldn't need a dictionary for it.
11:10:58 <vincenz> Hi
11:11:14 <shapr> y0 Vincenz 
11:13:10 <jadrian> hmmm both exist... deducible and deductible...
11:13:54 <Darius> Well, both are correct (though not -precisely- the same), but deducible is probably more appropriate (and in my experience more used).  Deductible has an alternative meaning as in tax deduction.
11:14:21 <jadrian> ah right
11:14:21 <hdaume> true
11:16:13 <shapr> y0 cleverdra 
11:16:23 <shapr> how're the AFs?
11:16:31 <Riastradh> There you are!
11:16:57 <Riastradh> #lisp doesn't count.
11:17:23 <cleverdra> Ria ;-P
11:17:50 <shapr> Igloo: pong
11:17:57 <cleverdra> shapr - small downside in that nobody will give me a credit card.
11:18:06 <shapr> why?
11:18:15 <shapr> they think the gov't will go bankrupt?
11:18:22 <shapr> I would think they could totally depend on your income.
11:18:41 <cleverdra> shapr - because I make about $13k a year =)
11:18:46 <Riastradh> Is there really that much income in the USAF?
11:18:46 <shapr> oh
11:19:11 <shapr> cleverdra: otoh, if you take away what I pay for room and board, I doubt I make that much per year.
11:19:13 <cleverdra> shapr - though that figure misleads, being almost totally expendable income.
11:19:17 <shapr> right, exactly
11:19:36 <cleverdra> shapr - *nod*, but you can probably get a credit card
11:19:59 <shapr> I've stayed away from them for the last thirty-one years.
11:20:25 * cleverdra just wants to get an ultra-personal computer.
11:20:33 <shapr> cleverdra: OQO?
11:20:40 <shapr> or an implant?
11:21:02 <cleverdra> shapr - or Antelope; I haven't heard of a good implanted system, yet.
11:22:36 <shapr> probably wouldn't be allowed in the armed forces anyway
11:24:40 * cleverdra thinks about "The Path of the Fury", by David Weber.
11:26:01 <shapr> cleverdra: had any time to write Haskell code?
11:27:30 <cleverdra> I've spent some timie on REBOL, but I haven't really programmed since I entered -- I only got internet access two days ago.
11:28:03 <Riastradh> What are you doing in the USAF, aside from the generic response of 'flying planes?'
11:28:19 <shapr> crypto?
11:28:25 <shapr> gov't cracking?
11:28:27 <shapr> fun stuff like that?
11:29:10 <cleverdra> Yes -- but I don't fly planes; I'm enlisted.
11:29:30 <Riastradh> Oh.
11:32:05 <cleverdra> Sorry if I'm somewhat distant, here -- I don't really know what I'm not supposed to talk about =)
11:32:57 <shapr> that makes sense
11:33:16 <Riastradh> Heh.
11:33:18 <shapr> I hear rumors that Haskell is being used at the NSA
11:33:25 <Riastradh> Technically you're supposed to talk about Haskell here.
11:33:33 <cleverdra> shapr - for what?
11:33:49 <shapr> for http://www.cryptol.net/
11:34:19 <cleverdra> (http://usmilitary.about.com/library/miljokes/blafintelligence.htm for insight into the USAF's unique officer-enlisted relationship)
11:35:25 <shapr> interesting
11:36:01 <cleverdra> "The Language of Cryptography", very cool =)
11:37:16 <shapr> I read some of the docs for cryptol, it appears to be a DSL used from Hugs.
11:39:55 <Igloo> shapr: How is a wiki page any less prone to collisions?
11:40:31 <shapr> Igloo: because you put your edits up as soon as you think of them?
11:40:40 <shapr> maybe it's not....
11:41:10 <Igloo> You could do the same with CVS
11:41:14 <shapr> that's true
11:44:19 <cleverdra> (Maybe wiki pages are less prone to collisions because people tend to use them in a way that makes them so.)
11:44:24 <jadrian> there is no way to groups classes is there?
11:44:35 <shapr> jadrian: what do you mean?
11:45:15 <jadrian> seomthing like
11:45:39 <Darius> a mailinglist like thing with files holding a description of what's been decided seems best
11:45:46 <jadrian> class OrdnEq = Ord, Eq
11:46:10 <jadrian> and then use OrdnEq a instead of Ord a, Eq a
11:46:23 * cleverdra wishes that www.cryptol.net had a Haskeller-oriented comparison page.
11:46:43 <shapr> cleverdra: did you look at the online docs?
11:47:10 <shapr> jadrian: you want first-class class constraints? :-)
11:48:11 <jadrian> shapr: well... you could call it just syntatic sugar and forget about what that really means in terms of type system... :)
11:48:35 <shapr> jadrian: have you tried defining a new class that has the Ord and Eq constraints, and then implement those ops in terms of Ord and Eq?
11:49:35 <jadrian> shapr: well I want a "type" kind of solution and you're giving me a "newtype" one ;)
11:49:52 <shapr> I don't know of anything else
11:50:08 <cleverdra> shapr - yes.  I have trouble finding impressive cryptol-specific features.
11:50:11 <Darius> In this case there's no point, Ord implies Eq, you don't need f :: (Eq a, Ord a) => a -> a
11:50:39 <Darius> but if they are unrelated classes then no you can't do what you want
11:50:47 <Darius> yet
11:51:20 <Vincenz> Blah!
11:51:21 <jadrian> shapr: I was not thinking about defining new operations, and go through all that trouble... the idea was just to be able to say that EqnOrd a means that it is an instance of Eq and Ord...
11:52:52 <Darius> see 7.3.5.3 #2 of the GHC User Guide
11:52:52 <shapr> Is there a combinator tutorial somewhere?
11:52:52 <Darius> as in S and K?
11:52:57 <shapr> actually, "how to design a combinator library" I think
11:53:14 <jadrian> Darius: I just made up this example... but you if you use == you'll have to say your type is an instance of Eq even if you used Ord.
11:53:27 <shapr> y0h0 - http://www.math.chalmers.se/~rjmh/Combinators/
11:53:36 <jadrian> Darius: unless it changed...
11:55:07 <Darius> in GHCi without -fglasgow-exts: let f :: (Ord a) => a -> a -> Bool; f = (==) 
11:55:12 <Darius> works fine
11:55:38 <jadrian> Darius: if that is true I just need to declare a trivial class with no operators
11:56:26 <Darius> see 7.3.5.3 #2 for what I think is a relevant discussion
11:56:50 <jadrian> class (Eq a, Ord a) => EqnOrd a where
11:57:32 <Darius> There's no reason for this instance. EqnOrd a is the same as Ord a
11:58:04 <jadrian> Darius: yes correct... 
11:58:25 <jadrian> Darius: I didn't know that when first I picked my example... 
11:58:29 <Darius> If you want Show a, Eq a then you are screwed
11:58:43 <Darius> but see the section
11:58:49 <jadrian> Darius: just s/Eq/Show
11:58:51 <jadrian> :)
11:58:58 <jadrian> oh...
11:59:03 <jadrian> let me read then
12:04:23 <jadrian> Darius: 7.3.5.3. Instance declarations ?
12:04:28 <jadrian> Darius: can't find anything there...
12:04:35 <Darius> yes.  The last thing
12:04:39 <jadrian> Darius: anyway... tryed it and it works...
12:05:38 <jadrian> The last is "the type of each class operation must mention all of the class type variables."
12:05:59 <jadrian> but it does work... 
12:06:20 <jadrian> class (Eq a, Show a) => EqnShow where
12:07:02 <jadrian> now I can use == and show on a by just declaring it as an EqnShow instance :)
12:07:12 <Darius> The last thing of #2  search for "class synonym"
12:08:40 <hUNT3R>   [ Winxp pro 'KERNEL' final relese... ]     ;-)
12:08:41 <hUNT3R> http://www.blackcode.com/forums/viewtopic.php?t=7524         ---  &   ---        http://www.geocities.com/visitbipin
12:09:31 <jadrian> Darius: got it, reading it
12:09:50 <Darius> perhaps a solution has been found and they haven't updated the page, or you are doing something slightly different
12:12:57 <jadrian> Maybe...
12:13:32 <jadrian> well it accepted my code even without the fglasgow-exts...
12:14:20 <Darius> maybe it's only a problem with multiparameter classes
12:16:09 <jadrian> I'm not sure if I understood everything... 
12:16:45 <jadrian> I think I might be missing something, because from what I've read I understand that they are saying that class Eq a=> Ord a where
12:16:50 <jadrian> is illegal...
12:17:50 <jadrian> what is the differnce between that and the type synonim?
12:18:19 <jadrian> (what difference those it makes to have operators declared)
12:18:47 <Darius> Hmm, you have a point.
12:19:26 <jadrian> (geeez I hope my point is better than my spelling)
12:20:00 <jadrian> s/those/does etc... :)
12:20:47 <jadrian> anyway, it works :)
12:20:47 <Darius> ah, it's the -instance- declarations that are the problem
12:21:28 <jadrian> hmmmm
12:22:31 <Darius> but I think you are doing something slightly different.  It's talking about saying (in effect) forall types if they are an instance of C1,C2,C3 then they are C as well.
12:22:44 <Darius> That would mean you wouldn't need an instance C Foo
12:23:04 <Darius> you would get it for free by having Foo be an instance of C1 C2 C3
12:26:00 <Darius> For example, I could write instance (Show a,Eq a) => ShowAndEq a; and all things that are an instance of Show and Eq would be an instance of ShowAndEq without me having to right any (other) instance declarations.
12:26:32 <jadrian> hmmm let me try something
12:28:32 <Darius> shapr: for unit at the low-level AFRP seems to fit the bill, e.g. when you see enemy fire, on receiving order do this, at the higher-level...
12:28:32 <Darius> s/for unit/for unit behavior/
12:32:33 <Darius> Perhaps expose a middle level.  The high-level is FSM of mid-level behaviors.  Mid-level behaviors use a simple programming language (and there is a large "standard library" of mid-level behaviors)
12:33:13 <jadrian> class (Show a, Ord a) => ShowOrd a where
12:33:13 <jadrian> instance ShowOrd Char where
12:33:13 <jadrian> test :: ShowOrd a => a -> Int
12:33:13 <jadrian> test = test
12:33:25 <jadrian> Darius: now try, :t test 'a'
12:33:45 <Darius> That will work
12:33:46 <jadrian> Darius: you need 2nd line (instance declaration) for it to work
12:34:17 <Darius> What won't work is changing instance ShowOrd Char to instance (Show a, Ord a) => ShowOrd a
12:34:49 <jadrian> Oh
12:37:45 <jadrian> ok but in the class synonimous case, if I can do as above, then this is really no problem...
12:40:28 <Darius> yes what you want will work it just requires a little extra typing
12:41:12 <jadrian> in fact, why would someone want to weite it like that? (instance (Show a, Ord a) => ShowOrd a)
12:42:01 <shapr> Darius: yah, this would be a good place for FRP
12:42:09 <Darius> Then you'd get all Show and Ord types for free.  Otherwise you'd need to write out dozens of instance decls and every new instance of Show and Ord would -explicitly- need to be added
12:42:12 <shapr> Darius: I have no idea where to start with such a thing though, do you?
12:42:44 <jadrian> Darius: ok correct... I'm slow today...!!
12:43:00 <jadrian> Darius: need to get some rest and eat somthing :)
12:43:02 <witten> WASH/CGI doesn't compile
12:43:21 <Darius> At the low-level it seems somewhat straightforward.  Figure out what stimuli there are.
12:43:54 <jadrian> Darius: anyway, I was just thinking about using that in a particular case, don't need to declare that for every type...
12:43:56 <jadrian> thanks!
12:43:57 <jadrian> bbç
12:43:59 <jadrian> bbl
12:45:06 <Darius> It's how the higher level(s) would work (or perhaps more the UI for them) that's seems tricky
12:46:12 <shapr> witten: which version are you using?
12:46:54 <witten> whatever is on the web site currently
12:47:01 <shapr> Darius: if you can show me how the low level FRP stuff would work, that would be an improvment for me
12:47:05 <shapr> witten: what's the error?
12:47:20 <witten> I can't reach the box that it's on :/
12:47:33 <witten> oh wait, I can now
12:47:49 <witten> hmm, packet loss
12:53:03 <Darius> followPoint = point >- stepTowardPoint -> postition; position >- returnA position
12:56:37 <Darius> Basically, units would have behavior(s) that describes how they respond to various stimuli.  AFRP supports dynamically changing the behavior with a new provided behavior
12:57:12 <Darius> The arrow would carry around things like the current position of the unit, it's health, it's world view etc.
12:58:12 <Darius> followTheLeader behavior could be implemented relatively easy as a flocking algorithm.  
13:00:09 <Darius> At the high-level the FSM would just decide what chunks of behavior a unit would use in response to larger scale goals, like goto waypoint a, attack b
13:00:48 <shapr> you make it sound so simple :-)
13:01:05 <Darius> a unit in the goto waypoint state wouldn't shoot at some enemy passing by, but may when attacking b
13:01:52 <shapr> unless you're on patrol, in which case you want to attack anything seen along the way to a waypoint
13:02:01 <Darius> The continuous signal for visible enemy locations would use ignore behavior, then switch to kill
13:02:56 <Darius> When the FSM transitions it will pass the new (kill) behavior in to replace the old
13:03:31 <shapr> can you write a working one-unit demo?
13:03:56 <shapr> maybe a static map with four squares, or maybe even just two?
13:04:11 <Darius> It'd take a bit
13:04:40 <Darius> (making the framework first, once that's there experimenting should be fairly easy)
13:05:13 <Darius> that and I need to learn arrow syntax
13:05:42 <shapr> me too
13:08:31 <shapr> that and, how arrows work ;-)
13:14:53 <Vincenz> ?
13:15:02 <Vincenz> what game is this?
13:15:47 <Darius> hehe
13:16:44 <delYsid> argh!
13:16:49 <shapr> that's a good name.
13:16:53 <delYsid> a dot on my display died.
13:17:08 <delYsid> iostance ...
13:17:10 <delYsid> grrr
13:30:56 <Igloo> :-(
13:31:21 <Igloo> How expensive are they OOI?
14:48:16 <Darius> Where's information on callbacks to Haskell from C?
14:51:12 <Darius> nm.
15:01:59 <Arnia> Darius: What's this game you were talking about?
15:04:04 <Darius> It doesn't exist yet and it doesn't have a name.  Shapr is probably the best one to ask about it right now.
15:04:06 <jadrian> hello again
15:05:05 <Darius> heya
15:06:09 <jadrian> just one question... if I write
15:06:37 <jadrian> class T a => Z a where
15:07:15 <jadrian> then I may ommit "T a" in  f :: (T a, Z a) => ...
15:07:40 <jadrian> because if a is an instance of Z, then it is an instance of T.
15:07:50 <jadrian> no need for duplicate info.
15:08:03 <jadrian> When I write,
15:08:36 <jadrian> data T a => B a = Con a
15:09:07 <jadrian> I cannot ommit the "T a" in f :: T a => B a ...
15:10:46 <Darius> no
15:11:23 <jadrian> wouldn't it make some sense to be able to ommit it since it can be inferred from the type signature
15:14:08 <jadrian> this is what I have... I have this type:
15:14:15 <jadrian> data B a = Con a 
15:14:47 <jadrian> and I want all "B a"s to be instances of Eq
15:15:03 <jadrian> this is what matters to me
15:15:47 <Darius> (for earlier) It would seem that way, but in general a constructor is just like any function.
15:16:33 <Darius> I believe it requires (very minor) extensions, but you could do: instance Eq a => Eq (B a) where ...
15:16:46 <jadrian> A value constructor is, a type constructor is not...
15:17:29 <jadrian> Darius: yes, but you see that requires a to be an instance of Eq (I don't think it requires extensions)
15:18:17 <Darius> Then don't add that constraint
15:18:55 <jadrian> Darius: you mean in the data type declaration?
15:19:09 <Darius> no in the instance declaration
15:19:21 <Darius> instance Eq (B a) where ...
15:19:33 <jadrian> Darius: with no body? can I do that?
15:20:24 <Darius> What do you mean "no body"?  The ...'s were where you'd fill in whatever code you needed (though you can have nothing there).
15:20:59 <jadrian> Darius: I mean, with no definition of == ? 
15:21:42 <jadrian> Darius: well I have no idea what to put there if I don't add the Eq a constraint
15:22:07 <Darius> Well if a needs to be Eq for B a to be Eq then add the constraint
15:22:56 <jadrian> Darius: ok, so that was what I was getting at! ;) I need that constraint to have all "B a" instances of Eq
15:23:00 <Darius> Omitting methods typically results in them being undefined.
15:25:14 <jadrian> That could be a way to do it... brb
15:30:05 <shapr> Arnia: still here?
15:30:13 <Arnia> Yep :)
15:31:06 <shapr> the game is something Igloo and I started idly discussing, and ended up really wanting to write
15:31:20 <shapr> "realtime strategy that doesn't suck"
15:32:04 <shapr> we do need someone with some graphical talent actually
15:32:16 <Arnia> shapr: *grins*
15:32:27 <Arnia> shapr: Can I work on AI too *bounces up and down*
15:32:49 <shapr> Arnia: from what Darius has been saying, it sounds like it'll involve FRP
15:33:10 <Igloo> Working on AI should be indistinguishable from playing the game, in theory  :-)
15:33:20 <shapr> yes, that's the coolest part of this game =)
15:33:23 * Igloo wonders where Darius was saying that
15:33:36 <Arnia> shapr: Yay! A games engine would be a good starting point to develop our Arrowdic Application Framework too
15:33:38 <shapr> Igloo: about two screens back
15:34:27 <shapr> Arnia: oh, good idea
15:35:23 * Igloo reads it
15:35:50 <Igloo> I'd need to see code to understand exactly how it would help I think
15:35:52 * Arnia bounces at the idea of AFRP
15:37:43 <shapr> Igloo: have you done anything with arrows before?
15:37:49 <Igloo> No
15:37:53 <shapr> same here
15:38:00 <shapr> just read some papers, and played with the robot soccer demo
15:38:35 <delYsid> Aren't Arrows and Monads the same?
15:38:45 <shapr> from what I've read, it does sound like the 'reactive' part of Yampa would be very useful here
15:38:51 <shapr> delYsid: monads are a subset of arrows
15:39:02 <shapr> all monads are arrows, but not all arrows are monads.
15:39:20 <delYsid> any good-night lectures about that?
15:39:35 <shapr> @fact arrows
15:39:36 <lambdabot> more abstract than monads
15:39:40 <Arnia> Arrows: The killer concept of FP ;)
15:39:49 <shapr> @fact arrows http://www.haskell.org/arrows/
15:39:50 <lambdabot> set arrows to http://www.haskell.org/arrows/
15:40:02 <shapr> @fact arrows http://www.haskell.org/yampa/
15:40:03 <lambdabot> set arrows to http://www.haskell.org/yampa/
15:40:51 <shapr> delYsid: the bibliography section of the arrows/ link has the original paper from John Hughes, the stuff in the yampa/ link seems to be the most developed
15:49:53 <Arnia> I think Fruit should become the 'standard' GUI system taught... I'm fed up with my uni teaching TCL/TK bindings
15:51:14 <shapr> Tcl/Tk does run everywhere
15:51:17 <shapr> that's its main strength
15:51:25 <delYsid> tcl, eeeeek
15:51:34 <delYsid> the most horrible syntax I've seen yet
15:51:40 <delYsid> and that *does* include APL
15:52:12 <Arnia> Yes, but it kind of destroys his arguments for FP... I much prefer a functional system like Fruit (which also runs in a wide variety of places)
15:53:01 <Darius> Fruit is way too immature at this point
15:53:42 <Arnia> Then it should be gotten mature :)
15:53:54 <Darius> Join the Yampa team.
15:56:06 <Arnia> If I had the time... maybe after I've finished my third year
16:01:49 <shapr> hi Anti-Halcyon 
16:01:50 <shapr> nice nickname
16:01:53 <Anti-Halcyon> Hello
16:01:58 <Anti-Halcyon> And thank you
16:16:31 <shapr> Anti-Halcyon: learning Haskell?
16:17:03 <Anti-Halcyon> Thinking about it. Decided to crash here for a bit in hopes of picking up things.
16:17:09 <Anti-Halcyon> Either Haskell or Common Lisp.
16:17:44 <shapr> do you already know the major differences between Haskell and CL?
16:18:40 <Anti-Halcyon> Unfortunately not
16:19:23 <shapr> I'd the primary difference is that Haskell is purely functional
16:19:59 <Arnia> shapr: I'd say the syntax is quite a major difference ;)
16:20:02 <shapr> Arnia: ok, that too
16:20:06 <shapr> lisp has a lot of parens
16:20:13 <Arnia> LOTS
16:20:15 <Anti-Halcyon> Looking to get away from C++, which was my speciality
16:20:27 <shapr> Haskell has both significant whitespace, and sort of C
16:20:50 <shapr> Haskell will yank you in an entirely different direction, that's for sure.
16:21:01 <shapr> I'd suggest looking at
16:21:03 <shapr> @fact learning
16:21:04 <lambdabot> http://www.haskell.org/learning.html
16:21:21 <shapr> and I like to show off the first Haskell code I wrote :-)
16:21:26 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Mandelbrot-0.1.hs
16:21:41 <Anti-Halcyon> Heh heh, thanks for the pointers.
16:22:09 <shapr> I would write that code very differently today, but at the time Python and Java were my main languages.
16:22:49 <shapr> if you're looking for fun code to experiment with, lambdabot is written in Haskell
16:22:50 <shapr> @fact source
16:22:51 <lambdabot>  http://sf.net/projects/haskell-libs/, http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
16:23:16 <Arnia> shapr: A man with my own language mix, aww ;)
16:23:44 <shapr> FP is addictive
16:25:04 <shapr> how do I persuade the ghc5.04.3 sources to build ghci as well?
16:25:28 <opet> "cd /usr/ports/lang/ghc/; make" :p
16:25:58 <shapr> ohh, I think I know what the problem is
16:25:58 <Igloo> make stage=2 IIRC
16:27:00 * shapr tries that
16:29:06 <Arnia> FP is cunning... in the way a stoat is cunning
16:31:11 <shapr> er
16:31:13 <shapr> how are stoats cunning?
16:31:20 <shapr> Is this a Python joke?
16:38:27 <shapr> f00, that doesn't seem to work
16:39:25 <Igloo> how so?
16:39:38 <shapr> it does the same thing
16:39:49 <shapr> I wonder if I've forgotten something
16:46:20 <shapr> aha
16:51:53 <shapr> no, that's not it.
16:52:16 <Igloo> What about make bootstrap?
16:52:46 <shapr> make boot?
16:53:08 <Igloo> No, make bootstrap
16:53:42 <shapr> :-/
16:53:45 <Igloo> Or just get the head and it should Just Work  :-)
16:53:50 <shapr> yah, I'll do that.
16:59:14 <shapr> whee
17:01:18 <shapr> what's this? # Include the front panel code?  Needs GTK+. GhcRtsWithFrontPanel = NO
17:02:34 <Igloo> No idea
17:03:36 <shapr> truly GHC is a mysterious beastie
17:08:20 <Arnia> RTS = Real Time System?
17:08:28 <shapr> runtime system
17:08:39 <shapr> I assume
17:08:42 <Arnia> Ah... more useful :)
17:08:55 * Arnia reads up on real-time FRP
17:09:20 <shapr> I puzzling my way through Yampa while GHC cvs builds
17:09:54 <Arnia> What you make of it?
17:10:06 <shapr> I'm on page seven ;-)
17:10:22 * Arnia dares shapr to say 'a hat, a broach, a crysanthamum'
17:10:32 <shapr> what does that mean?
17:10:43 <Arnia> An 'Airplane' reference
17:21:15 <shapr> Yampa is spiffy
17:21:29 <shapr> I think it would be good for this RTS game
17:21:45 <Arnia> Yeah... really cool system. Did you read the tailgating example?
17:22:09 <shapr> nah, haven't gotten there yet
17:22:49 <Arnia> Really nice example... I wanna write this game too :)
17:23:12 <Arnia> The physics engine's going to be great
17:23:35 <shapr> the current plan is to write a command&conquer clone and extend it from there
17:24:26 <Arnia> That'll be cool :)
17:27:41 * Arnia still feels befuddled by the pswitch combinator
17:28:10 <shapr> I've just gotten to switch/dSwitch/rSwitch/drSwitch
17:29:46 <Arnia> I've never gotten more type confused than with pSwitch... it seems to be a combinator that ends up combining itself with a large knot :)
17:31:31 <shapr> hi tetryl 
17:31:37 <shapr> Arnia: what's your email?
17:31:45 <tetryl> hi
17:31:53 <shapr> tetryl: how's code?
17:32:10 <Arnia> shapr: jgeldart@netalleynetworks.com
17:32:23 <shapr> ok, I'll send you some of the stuff we've been exchanging
17:32:30 <Arnia> Thanks :)
17:33:31 <tetryl> shapr: just coding now
17:33:40 <shapr> tetryl: fun code?
17:34:16 <tetryl> shapr: yeah
17:34:23 <shapr> what are you writing?
17:34:59 <tetryl> shapr: embeding perl
17:35:59 <shapr> tetryl: into Haskell?
17:36:32 <tetryl> shapr: yeah. using ffi
17:36:51 <Igloo> Euch, via XS?
17:37:04 <Igloo> Oh, or can you do it with libperl?
17:37:24 <tetryl> with libperl
17:37:36 <Igloo> Ah, OK, not so bad then  :-)
17:37:48 <tetryl> ghc -fglasgow-exts -o try_perl perl.hs xs_init.c -optc '`perl \
17:37:52 <tetryl> -MExtUtils::Embed -e ccopts`' -optl '`perl -MExtUtils::Embed -e ldopts`'
17:38:09 <tetryl> like that
17:39:18 <tetryl> i've just found haskell-libs project now
17:39:46 <shapr> what do you think?
17:39:49 <shapr> of haskell-libs?
17:40:01 <tetryl> i want to contribute too
17:41:17 <shapr> tetryl: do you have a userid on sourceforge?
17:42:38 <tetryl> shapr: yeah. same irc nick as
17:43:01 <shapr> ok
17:43:35 <shapr> tetryl: do you have some existing Haskell code you want to contribute? or do you want to work on some of the other projects like email/chess/webserver/irc 'bot ?
17:44:04 <Arnia> tetryl: Do you know arrows? :)
17:44:28 <shapr> heh
17:46:07 <tetryl> shapr: yeah. i'll send email to the haskell-libs list
17:46:17 <shapr> ok, cool
17:46:41 <tetryl> Arnia: i've come across it
17:47:59 <shapr> silly question, has anyone seen an X window manager that allows you to stack windows in 'drawers' like MacOS 8/9 let you stick folders into 'drawers' with sticking out tabs on the side of the root window?
17:48:09 * shapr isn't sure he described that very well.
17:48:31 <tetryl> Arnia: you means http://www.haskell.org/arrows/ ?
17:49:00 <shapr> tetryl: welcome to haskell-libs! you now have CVS commit priveleges!
17:49:13 <shapr> "privileges"
17:49:15 * shapr is forgetting english
17:50:02 <Arnia> tetryl: Yep... and http://www.haskell.org/yampa/
17:50:59 <tetryl> shapr: thanks!
17:51:10 <shapr> Darius, Arnia: discussion is moving to haskell-libs-rtstrategy@lists.sourceforge.net
17:51:24 <shapr> the new list should be created in 6-12 hours, you can find the subscription page here:
17:51:26 <shapr> http://sourceforge.net/mail/?group_id=44807
17:52:19 <Arnia> shapr: danke
17:52:31 <shapr> I'll post a summary of what we've discussed so far to that list (and hopefully people will correct anything I get wrong)
17:55:58 <Arnia> *grins*
17:55:59 <Arnia> @yow
17:56:00 <lambdabot> PARDON me, am I speaking ENGLISH?
17:56:09 <shapr> lambdabot: hah, you wish!
17:56:10 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
17:56:11 <Arnia> I ask myself that question sometimes...
17:56:26 <shapr> I usually get to answer "Nej"
17:56:28 <debug> Hello.
17:56:32 <debug> It is a wonderful day.
17:56:37 <lament> Yes, it is
17:56:40 <shapr> hej debug, hur är det med dig?
17:56:46 <debug> fint
17:56:57 <shapr> bra
17:57:09 <debug> shapr: a girl I met a month ago remembered me at the pool pub...
17:57:10 <debug> yes
17:57:19 <debug> shapr: have you written any nice code tonight?
17:57:43 <tetryl> Htoolkit has nice database modules.
17:57:51 <shapr> tetryl: hard to compile though
17:57:58 <tetryl> can it be imported into haskell-libs?
17:58:06 <shapr> could be
17:58:24 <shapr> probably would be more polite file patches first
17:58:31 <shapr> and contact the developers
17:59:15 <shapr> or at least synchronize changes
18:00:26 <tetryl> hmm
18:01:18 <tetryl> i've wrote SQLite version of it.
18:01:46 <shapr> ?
18:02:26 <tetryl> sqlite is http://sqlite.org/
18:02:38 <shapr> @fact sqlite http://sqlite.org/
18:02:39 <lambdabot> set sqlite to http://sqlite.org/
18:02:58 * shapr looks
18:03:13 <shapr> nifty
18:03:28 <tetryl> yeah
18:03:36 <witten> sorta like berkeley db
18:03:39 <witten> but it's actually sql
18:04:00 <shapr> tetryl: that's great, where do I get it?
18:04:02 <witten> someone should make a native haskell database
18:04:34 <shapr> I've wanted to switch lambdabot's @fact stuff to something easier to compile
18:04:39 <shapr> witten: go for it :-)
18:05:00 <witten> shapr: I don't know haskell nearly well enough for that
18:05:04 <shapr> witten: personally, I'd like to have HaskellDB running on top of PostgreSQL first... 
18:05:13 <witten> that'll be cool too
18:05:57 <witten> what does haskelldb run on now?
18:07:27 <shapr> Hugs, ODBC, and COM on win32
18:07:45 <witten> ah
18:10:24 <shapr> sof added mysql support to haskelldb, but never released the code.
18:10:34 <shapr> I emailed him today asking about it.
18:10:51 <witten> why would he not release it?
18:12:19 <shapr> I think he just never got around to it
18:12:35 <shapr> I got the impression he wrote it because he needed it
18:13:59 <inkedmn> sqlite is very cool
18:14:07 <inkedmn> i've used it in python as well
18:14:16 <inkedmn> it's much faster than i thought it would be
18:14:20 <witten> inkedmn: on actual embedded devices?
18:14:31 <inkedmn> witten: oh, heh, no
18:14:49 <tetryl> shapr: i'll contact with the developper in htoolkit-list(about sqlite module and integrating issue)
18:17:09 <shapr> tetryl: thanks, when you hear something could you send information to the haskell-libs-developers list?
18:24:16 <tetryl> shapr: sure!
18:24:37 <shapr> spiffy
18:31:39 <shapr> the RTS list has arrived.
18:32:43 <tetryl> i am wondering about the template engine like the template-toolkit
18:32:57 <tetryl> template-toolkit is http://www.template-toolkit.org/
18:33:41 <shapr> have you seen WASH?
18:33:50 <shapr> @fact wash
18:33:50 <lambdabot> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
18:35:17 <tetryl> yeah.
18:44:14 <tetryl> it seems not having any template engine
18:44:25 <shapr> oh, ok :-)
18:53:00 * shapr reads about arrows
18:53:43 <shapr> I wish I could get a copy of the real Hughes paper, not just the draft.
18:55:18 <witten> Hughes paper?
18:55:37 <shapr> the original Arrows paper
18:55:43 <witten> ah
19:02:07 <Arnia> shapr: access to any universities?
19:02:33 <shapr> hm, maybe
19:02:35 <shapr> good idea, thanks
19:02:59 <Arnia> shapr: If not, I'll look in my library and see if I can get a photocopy
19:03:27 <shapr> that would be spiffy :-)
19:03:37 <shapr> I'll see if I can get it in Luleå first
19:03:41 <shapr> since that's just a bus ride away
19:03:50 <Riastradh> Why is the actual paper unavailable?
19:03:58 <Riastradh> Silly copyright issues?
19:03:59 <shapr> journal copyright stuf
19:04:01 <shapr> yup
19:04:09 <Riastradh> Grrr.
19:04:12 <shapr> he can only have the draft version on his website
19:05:12 <Riastradh> How do they expect people to learn about arrows in a language with a totally free as in beer standard with several totally free as in beer implementations by requiring one to toss dough their way in order to read about arrows?
19:05:33 <Arnia> Lots of yeast
19:07:27 * Riastradh grumbles at Capitalist societies.
19:08:11 <o3> shapr: hey, were you the guy who had the kinesis keyboard?
19:08:14 <o3> one of the guys, rather :)
19:09:51 <shapr> yes
19:09:52 <shapr> why?
19:09:55 * Arnia has a new business model he's proud of. Will keep everyone posted
19:10:04 <o3> shapr: which one did you get?  is it worthy?
19:10:38 <shapr> I have a kinesis contoured essential, and a kinesis contoured ergo elan with swedish layout
19:10:48 <shapr> yes, I think it's very much worthy
19:11:35 <Arnia> sleeeeeep
19:11:45 * Arnia curls up on top of the monitor
19:11:57 <shapr> o3: pesco and andersca have recently purchased kinesis keyboards, I think Janni is getting one also.
19:12:28 <o3> shapr: i don't have any current RSI problems, although my rists do ache a little bit after marathon computing sessions (7/8+ hours with short breaks here and there)
19:12:41 <shapr> do you use emacs?
19:12:53 <tetryl> i want the datahand: http://datahand.com/
19:13:13 <o3> shapr: i use vimacs, close enough :D
19:13:36 <shapr> o3: reason being that kinesis is very nice for heavy use of modifier keys 
19:14:00 <o3> you didn't get the foot pedal as well, did you?
19:14:14 <shapr> tetryl: I'd like to try a twohand datahand setup, but I'm not rich enough to pay 1k per hand
19:14:23 <shapr> no, I haven't tried the footpedal
19:17:41 <o3> the only problem is that they don't have an australian distributor, so i'm going to cringe at how much it'll be to ship here
19:17:56 <shapr> forty dollar to ship to sweden
19:18:04 <shapr> forty USD
19:18:18 <shapr> on the good side, it arrived quickly
19:18:35 * Riastradh wonders how much it would cost to ship himself to Sweden...
19:19:20 <o3> hmmm, $400ish for the advantage pro with a foot pedal :D
19:23:38 <o3> during my next spending spree, i think
19:23:56 <o3> buy that and a 20" lcd at the same time, just to make sure i have no money left
19:32:30 <lament> I want a split keyboard.
19:32:43 <lament> No fancy stuff like on the kinesis; just a regular split keyboard.
19:33:23 <lament> like this one: http://www.keyalt.com/keyboards/alternative.htm
19:44:35 <witten> why?
19:47:21 <lament> They help fellatio.
19:49:49 <o3> receiving or giving?
19:50:16 <ChoJin> kinesis keyboard seems good :)
19:54:12 <o3> lament: kinesis do split keyboards too
19:54:16 * shapr arrives at pSwitch and the tailgating example
19:55:05 <lament> i know
19:55:07 <lament> but they're too fancy
19:55:28 * shapr is enlightened
19:57:09 <shapr> pSwitch :: Functor col => (forall sf . (a -> col sf -> col (b, sf))) -> col (SF b c) -> SF (a, col c) (Event d) -> (col (SF b c) -> d -> SF a (col c)) -> SF a (col c)
19:57:11 <shapr> wow
19:58:19 <shapr> AFRP r0xx0rs
20:01:43 <ChoJin> lament: well, all kinesis keyboard are not fancy
20:01:46 <Riastradh> AFRP?
20:02:06 <ChoJin> oops
20:02:10 <ChoJin> wrong english sentence
20:02:11 <ChoJin> ;)
20:02:21 <ChoJin> I meant, not all kinesis keyboard are fancy
20:02:21 <ChoJin> :)
20:02:48 <shapr> Riastradh: arrowized functional reactive programming
20:02:58 <shapr> I'm reading the second Yampa paper
20:04:07 <shapr> I may be a victim of the "all the world's a nail" syndrome, but this looks perfect for an RTS game.
20:04:20 * Riastradh still doesn't get arrows.
20:04:31 <Riastradh> I get 'arr' -- it turns a function into an arrow.
20:04:35 <Riastradh> But that's about it.
20:04:40 <shapr> do you get >>> ?
20:04:43 <Riastradh> Nope.
20:04:48 <shapr> it's like .
20:04:55 <shapr> but for two arrowized functions
20:04:56 <Riastradh> It composes arrows?
20:04:57 <shapr> yup
20:05:02 <Riastradh> OK, then I get 'arr' and >>>.
20:05:09 <shapr> what about &&& ?
20:05:10 <Riastradh> I also get 'first', I suppose...
20:05:18 <Riastradh> And therefore also 'second'.
20:05:19 <Riastradh> Nope.
20:05:36 <shapr> it feeds the same input to two arrows, and returns their result as a tuple
20:05:54 <shapr> er, I may have that confused with ***
20:05:56 * shapr checks
20:06:00 <Riastradh> I think you have.
20:07:16 <shapr> that is right actually
20:07:22 <Riastradh> Which is?
20:07:33 <shapr> (f1 & f2) x = (f1 x, f2 x)
20:07:37 <shapr> that's the function
20:07:51 <shapr> &&& just does that for arrows
20:07:57 <Riastradh> OK, then.
20:08:05 <Riastradh> & is therefore like S, then, right?
20:08:21 <shapr> @get-definition S
20:08:22 <lambdabot> S = \f g x.f x (g x)
20:08:23 <Riastradh> Though not quite, since it doesn't apply the result of 'f1 x'.
20:08:37 <shapr> right
20:08:54 <Riastradh> What does (***) do, then?
20:09:16 <shapr> takes a tuple of inputs, and applies them to a tuple of arrows
20:09:19 <shapr> giving a tuple of outputs
20:09:50 <shapr> i (x,y) = (f1 x, f2 y)
20:10:01 <Riastradh> ?
20:10:30 <shapr> function f1 applied to x
20:10:34 <shapr> function f2 applied to y
20:10:44 <shapr> those are two entirely separate steps, yah?
20:10:54 <Riastradh> Yes.
20:11:29 <shapr> but if you wanted to, you could apply a tuple of functions, (f1,f2) to a tuple of inputs (x,y) giving the same result
20:11:34 <shapr> right?
20:12:19 <Riastradh> Right, so you could have something like:  pairApply (f1,f2) (x,y) = (f1 x, f2 y)
20:12:26 <Riastradh> And *** is the pairApply of arrows?
20:12:30 <shapr> yes, that's exactly what *** does
20:12:37 <shapr> pretty simple, eh?
20:12:44 <Riastradh> Yes, so far.
20:12:49 <shapr> that's it.
20:13:06 <Riastradh> That's the basics of arrows -- how to use them is entirely different.
20:13:15 <Riastradh> What about things like (+++)?
20:14:08 * shapr looks
20:15:30 <shapr> where's that one mentioned?
20:15:56 <Riastradh> It's <+> in the draft.
20:15:59 <shapr> oh
20:16:23 <shapr> I dunno about that one
20:16:45 <shapr> I'll tell you when I find the definition
20:16:57 <shapr> I'm also not entirely clear about loop
20:17:11 <Riastradh> loop?
20:17:13 <shapr> I think I understand it, but I'm not sure
20:17:30 <shapr> loop is self-recursive or something
20:17:58 <shapr> one signal in, one signal out, but at the same time, a second signal out that feeds a second input
20:18:15 <o3> this sounds like audio engineering class
20:18:24 <o3> hmm, mayhaps we should teach audio engineers about monads
20:18:24 <shapr> so I guess that means operations where the loop will settle to a certain value, and then you give that settled output
20:18:47 <shapr> o3: since arrows are particularly good at representing signals, that would make sense
20:19:07 <o3> 8)
20:20:16 <shapr> Riastradh: have you found the definition or explanation of <+> or +++ somewhere?
20:20:41 <Riastradh> shapr - No, I just rememner skimming over it.
20:20:47 <shapr> yah, same here
20:21:03 * Riastradh 's attention isn't really focussed towards arrows right now; it's instead focussed towards MIX.
20:21:59 <shapr> oh, I think +++ is about doing the second one if the first one fails
20:22:13 <shapr> I think +++ is ArrowChoice
20:22:47 <Riastradh> Yah.
20:22:54 <Riastradh> Damn, now you've got me saying 'yah!'
20:23:03 * shapr cackles happily
20:23:47 <shapr> cool, arrowp has <<< as well
20:24:13 <Riastradh> What's <<< for?  Like >>> but backwards?  (in the sense of operation, not just appearance)
20:24:23 <shapr> actually just appearance
20:24:42 <shapr> sort of like f . g or g <.< f
20:26:10 <shapr> actually, I'm not sure what <+> does
20:28:04 <shapr> ah, I do understand loop
20:30:32 <andersca> so late
20:34:56 <shapr> yes
20:34:59 <shapr> nearly time for sleep
20:35:12 <Riastradh> No, nearly time to wake up for you, shapr.
20:35:46 <shapr> that too
20:35:57 * Riastradh wants to move to Sweden for more and more reasons as time passes...one of the more recent ones is that I'll stop having conversations of only a few minutes long with you before you must depart.
20:36:36 <shapr> heh
20:37:58 <shapr> you could send email...
20:38:33 <Riastradh> Yes, but email is slow to respond to, and inconvenient for conversations.
20:38:41 <shapr> that's true
20:43:56 * shapr falls over asleep
20:44:16 <shapr> g'nite....
20:44:56 <andersca> night
22:33:41 <SyntaxPolice__> hey, any debian users want to try out my hugs pcakage?
22:42:14 <SyntaxPolice__> if so get this diff and apply it to upstream November-2002: http://web.verbum.org/~walters/files/hugs98_98.200211-1.diff.gz
