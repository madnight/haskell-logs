00:19:53 <debug> it is a wonderful day
00:21:33 <resolve> indeed!
00:22:24 <debug> functional and ... fuggy
00:22:26 <debug> foggy
00:22:34 * debug slowly awakens
03:06:04 --- mode: ChanServ set +v Janni
03:06:14 <Janni> hi there
03:09:24 <ludde>  ll
03:09:34 <ludde> oops
03:31:22 <resolve> back later!
05:37:57 <shapr> yow
05:41:58 <Vincenz> hiya
05:49:08 <Arnia> miaow
06:00:25 <shapr> yeehaa
06:03:51 <Heffalump> 'lo
06:04:02 <Cryptor> hello...
06:04:22 <Cryptor> would you know how I would import 'data' declaration' from a module?
06:04:27 <shapr> hi Heffalump 
06:04:46 <Cryptor> 'import SomeModule' imports all the functions, but not the data types.
06:04:53 <Heffalump> do you want the constructors or just the type itself?
06:05:14 <Cryptor> the constructers, I think.
06:05:58 <Cryptor> like, if 'SomeModule' contains "data Letter = A | B" I want to be able to put 'A' in my main module.
06:06:02 <Heffalump> how is SomeModule declared?
06:06:07 <Cryptor> and have it be interupted as a letter.
06:06:47 <Cryptor> just "module SomeModule ..."
06:07:10 <Heffalump> hmm, I thought that ought to work
06:07:13 * Heffalump --> try it
06:07:19 <Cryptor> "module SomeModule where... data Letter = A | B..."
06:07:31 <dennisb> It should work
06:07:55 <dennisb> I do it all the time
06:07:59 <Heffalump> works for me
06:08:04 <Heffalump> what Haskell system are you using?
06:14:32 <Cryptor> ah, I've found the problem.
06:14:48 <Cryptor> somemodule itself imports the data type in question.
06:14:56 <Cryptor> and doesn't have it itself.
06:15:37 <Cryptor> sorry about the somewhat stupid question, I should of looked into it more myself.
06:15:55 <Heffalump> np
09:46:16 <shapr> y0
09:46:19 <shapr> wassup?
09:48:00 <Arnia> @yow
09:48:01 <lambdabot> Now I can join WEIGHT WATCHERS!
09:48:20 <shapr> @yow
09:48:20 <lambdabot> The PINK SOCKS were ORIGINALLY from 1952!!
09:48:20 <lambdabot>  But they went to MARS around 1953!!
09:48:57 <Arnia> We've had that one...
09:49:10 <shapr> yah, System.Random isn't that random
09:49:11 <shapr> @yow
09:49:11 <lambdabot> Is this the line for the latest whimsical YUGOSLAVIAN drama which also
09:49:11 <lambdabot>  makes you want to CRY and reconsider the VIETNAM WAR?
09:49:22 <shapr> or maybe my code sucks :-)
09:50:08 <Arnia> Who wrote the Yow list?
09:50:17 <shapr> the list comes with emacs
09:50:27 <Arnia> But someone must have written it :)
09:50:29 <shapr> yow.lines
09:50:37 <shapr> oh, it's from Zippy The Pinhead
09:50:46 <shapr> it's a syndicated newspaper cartoon
09:50:54 <shapr> started in the 1970s I think
09:51:02 <Arnia> Ok... sounds scary
09:51:07 <shapr> I read the archives once, it really is scary
09:51:19 <shapr> some people just don't need LSD.
09:51:45 <Arnia> I consider myself fairly random... but these are disturbing
09:51:47 <shapr> if you have emacs installed, you should have yow.lines as well
09:51:52 <shapr> yes, I agree :-)
09:52:52 <Arnia> Mind you... if you were to roll #haskell, #zope, #python and #plone together it would probably come out to much the same
09:53:02 <shapr> could be
09:53:10 <shapr> #python has gone down in quality imho
09:53:22 <shapr> I've not spent any time on #plone, don't know
09:54:07 <Arnia> #plone is at a nice size for insanity... 50 people. #zope has Kosh and YET and so is always going to be loopy
09:54:09 <shapr> I think I've just lost interest in Python, it doesn't stretch my brain anymore.
09:55:16 <Arnia> Haskell is good at that :)
09:58:37 <d33p> LOL
10:03:37 * Arnia wants more papers on arrows and AFRP
10:03:50 <Arnia> Hudak and Hughes, write damn you write :)
10:05:09 <shapr> funktor: nice nickname
10:05:37 <shapr> Arnia: hey, do you understand monad transformers?
10:05:48 <shapr> @yow
10:05:48 <lambdabot> UH-OH!!  We're out of AUTOMOBILE PARTS and RUBBER GOODS!
10:06:02 * shapr goes for food
10:07:50 <Arnia> shapr: Yeah
11:09:26 <shapr> how do most spam filters work?
11:09:46 <shapr> I mean, they're procmail filters, yes?
11:10:00 <ibid> some of them are
11:10:02 <ibid> some are not
11:10:02 <shapr> do they just add a custom "X-Spam:" header or something?
11:10:04 <Heffalump> spamassassin is
11:10:22 <Heffalump> I use the perl interface and Mail::Audit
11:10:47 <shapr> Heffalump: does that mean any procmail usable filter will work for what you're doing?
11:11:10 <Heffalump> not in the same way, since I'm not execing it
11:11:38 <shapr> Heffalump: I have written a rudimentary spam filter in Haskell, now I want to know the best way to plug it into mail processing systems.
11:11:48 <shapr> so I'm looking for suggestions
11:12:45 <shapr> maybe a better question is, how would you guys want to integrate a spam filter?
11:13:52 <Heffalump> I was about to look at WASH::Mail
11:14:06 <Heffalump> but for now, a perl interface
11:15:46 <shapr> btw, is a PackedString just like a polite way of using String# ?
11:16:02 <Heffalump> does String# exist?
11:16:10 <shapr> well, maybe [Char#] :-)
11:16:29 <Heffalump> that's probably not hugely efficient
11:17:11 * shapr checks the PackedString sources
11:19:34 <shapr> Heffalump: how's life?
11:19:54 <shapr> looks like PackedString uses (UArray Int Char)
11:24:03 <Heffalump> not bad
11:24:43 <shapr> still doing lots of SML?
11:24:53 <shapr> do you get to do any Haskell? :-)
11:25:21 <Heffalump> yeah, some
11:25:27 <Heffalump> been hacking on MAG off and on
11:25:46 <shapr> it has a CGI interface, yes?
11:26:27 <shapr> I haven't looked at MAG since I gained some clue about Haskell.
11:26:32 <Heffalump> yeah, it does
11:26:38 <Heffalump> don't think it's running anywhere atm though
11:55:35 * shapr advertises lambdabot on #emacs
11:55:43 <andersca> wooo
11:56:07 <andersca> I have my keyboard
11:56:09 <shapr> yay!
11:56:11 <shapr> what do you think?
11:56:51 <andersca> might be hard to get used to
11:57:14 <shapr> took me three days or so
11:58:08 <shapr> then I was in love =)
12:00:33 <funktor> shapr!
12:00:38 <shapr> funktor!
12:00:46 <funktor> chess/ is growing, Move.hs already works (on my laptop)
12:00:56 <shapr> w00!
12:01:00 <shapr> funktor == delYsid ?
12:01:09 <funktor> I can already generate a list of legalMoves given a board and such
12:01:45 <funktor> shapr: t
12:01:55 <shapr> yay!
12:02:16 <funktor> next is Material.hs, and then I'll try to combine it with MiniMax.hs
12:02:27 <shapr> I dreamed about writing a chess player in Haskell with your code.
12:02:39 <funktor> yup
12:02:50 <funktor> It will play chess, soon
12:03:05 <shapr> yay!
12:03:35 <shapr> with the code you have right now, can it pick random legal moves and play against a human?
12:03:38 <funktor> http://www.xs4all.nl/~dark/haskell/
12:03:45 <shapr> that's what I dreamed about last night.
12:03:54 <funktor> Q: Can anyone tell me if the gameTree function in MiniMax.hs there is lazy or not?
12:04:15 * shapr looks
12:04:33 <funktor> shapr: You could, but Move.hs is on my laptop, and I have no way to send it to you
12:04:55 <shapr> email?
12:05:06 <shapr> scp? :-)
12:05:13 <funktor> nah, laptop has no floppy drive, and machine of my girlfriend has no network card
12:05:16 <funktor> really a dead-end here
12:05:24 <Heffalump> it produces a lazy Game position datastructure, yes
12:05:50 <Heffalump> do you know about alpha-beta pruning?
12:05:58 <andersca> hmm, I'm getting used to this pretty fast
12:06:04 <shapr> andersca: yay!
12:06:24 <funktor> Heffalump: Not yet, my primary plan is to get it working *somehow* first
12:06:37 <Heffalump> 'k :-)
12:06:52 <funktor> how would I write a cutOff function for such a lazy gametree?
12:07:02 <Heffalump> what should cutOff do?
12:07:15 <Heffalump> just limit the depth?
12:07:22 <funktor> cutOff :: Int -> Game position -> Game position
12:07:41 <funktor> i.e., cut the thing at a certain depth
12:08:14 <Heffalump> cutOff 0 (Plays pos _) = Plays pos []
12:08:26 <funktor> oh!
12:08:28 <funktor> tnx
12:08:30 <funktor> already got it
12:08:33 <Heffalump> cutOff (n+1) (Plays pos games) = Plays pos (map (cutOff n) games)
12:08:37 <funktor> I should think more in recursive terms
12:08:40 <Heffalump> yeah :-)
12:08:59 <Heffalump> though depending on your search functions, you may not want to explicitly cut it off
12:09:10 <Heffalump> if you only ever search to depth n, it'll only ever be evaluated to such a depth
12:09:14 <funktor> hmm, minimax I need to cutoff I think
12:09:22 <funktor> otherwise it will never terminate since chess is that complex...
12:09:40 <Heffalump> right, but if you do the cutoff as part of your minimaxing, it'll be easier to modify later to do variable depth searches
12:10:03 <funktor> that works?
12:10:04 <funktor> cool
12:10:09 <funktor> Ill have to think about that too
12:11:32 <Heffalump> well, the minimax procedure would just need a depth paramater
12:11:38 <Heffalump> s/paramater/parameter/
12:12:50 <funktor> wheee /me is so excited
12:13:08 <funktor> I'm basicly dreaming of writing a chess prog since I know programming and Chess
12:19:10 * shapr reads about procmail
12:21:58 <shapr> hi bryan 
12:22:17 <shapr> looking to learn Haskell?
12:29:54 <debug> hm
12:29:59 <shapr> debug: yes?
12:30:36 <debug> hello
12:30:50 <shapr> hi!
12:30:52 <shapr> wassup?
12:31:06 <debug> nothing :(
12:31:11 <debug> how about you?
12:31:26 <shapr> trying to find out how procmail filters should behave
12:31:39 <shapr> now that I have a spamfilter, I want to use it =)
12:31:43 <shapr> @yow
12:31:43 <lambdabot> Mr and Mrs PED, can I borrow 26.7% of the RAYON TEXTILE production
12:31:43 <lambdabot>  of the INDONESIAN archipelago?
12:43:20 * shapr learns slowly
12:43:34 <funktor> shapr:  if we manage to finish chess/, lambdabot will need a chess module :)
12:44:32 <shapr> yay!
12:44:35 <shapr> that would rock =)
12:44:51 <shapr> I'm sure we'll finish chess
12:45:14 <shapr> I'd like to just play against a random move chooser right now
12:45:18 <shapr> how hard would that be?
12:45:28 <Heffalump> is that the only way you can win? :-)
12:45:32 <shapr> probably
12:45:35 <shapr> I suck really much at chess.
12:46:08 <shapr> I spent a lot of my free time from twelve to fourteen learning chess and playing against a friend of mine.
12:46:19 <shapr> after two years, I still sucked a lot.
12:46:33 <funktor> shapr: random should be easy i think... You'd just need Move... :/
12:47:10 <shapr> I'm instant gratification boy ;-)
12:47:24 <shapr> I write something that 'does something' and then incrementally improve it.
12:48:04 <debug> :)
13:07:47 <shapr> ok, I think I know what to do now...
13:49:29 --- mode: ChanServ set +v Janni
13:49:33 <Janni> yoi!
13:50:51 <Heffalump> hi
13:50:56 <Heffalump> right, nearly week-time
13:50:59 <Heffalump> cya all
14:05:33 --- mode: ChanServ set +v shapr
14:10:30 * shapr boings
14:11:07 * andersca bounces
14:11:10 <andersca> yay, it worked
14:11:14 <andersca> writing that that is
14:11:15 <andersca> :)
14:11:20 <shapr> ?
14:11:23 <shapr> you bounced?
14:11:27 * andersca is starting to get the hang of this now
14:11:32 <shapr> hang of what?
14:11:34 <andersca> I typed
14:11:37 <andersca> :)
14:11:43 <shapr> oh!
14:11:44 <shapr> cool!
14:12:25 <andersca> It feels really good
14:12:32 <shapr> yay!
14:12:38 <andersca> much better than my old keyboard
14:12:44 <shapr> yah, I agree
14:12:57 <andersca> I just need to do some remapping action
14:13:04 <shapr> my pinkies went numb after several hours of typing on my IBM clicky
14:13:11 <shapr> that's a bad sign
14:13:28 <shapr> hey! I've done lots of remappings to my kinesis, I have some suggestions!
14:13:37 <shapr> I've remapped caps_lock to hippie-expand
14:13:49 <shapr> and swapped Shift_L and DEL
14:13:58 <shapr> and Shift_R is iswitchb
14:14:24 <andersca> what's iswitchb?
14:14:25 <shapr> and Home and PgUp are super; End and PgDn are Hyper
14:14:33 <shapr> it's buffer switching for emacs
14:14:38 <shapr> do you use emacs?
14:14:43 <andersca> of course I use emacs
14:14:49 <shapr> ah :-)
14:14:56 <shapr> try M-x iswitchb-default-keybindings
14:15:36 <shapr> I've customized my remappings and keybindings to go with my kinesis
14:15:59 <shapr> do you also use gnus?
14:16:11 <andersca> no, I don't
14:16:16 <andersca> I use evolution
14:16:24 <shapr> more info for iswitchb: http://emacswiki.org/cgi-bin/wiki.pl?IswitchBuffers
14:17:09 <shapr> Do you do spam filtering with evolution?
14:17:20 <andersca> no, I use spamassasin for that
14:17:32 <andersca> iswitchb was really nice
14:17:39 <shapr> http://emacswiki.org/cgi-bin/wiki.pl?EmacsNiftyTricks
14:17:50 <shapr> I started that page, and wrote more than half of it
14:19:07 <andersca> cool stuff-1
14:19:15 <andersca> hmm, I meant
14:19:19 <andersca> cool stuff!
14:19:23 <shapr> :-)
14:19:27 <andersca> ah well, sleep now.
14:19:28 <andersca> night
14:19:37 <shapr> g'nite!
14:24:19 * shapr reads about System.Console.GetOpt
15:12:34 <shapr> oh pooh
15:12:59 <shapr> RFC2822 doesn't let you add some headers and then output again.
15:14:03 * shapr fixes
15:28:35 <shapr> hi Darius 
15:28:38 <shapr> wassup?
15:31:33 <shapr> @yow
15:31:33 <lambdabot> Yes, Private DOBERMAN!!
15:33:50 <lament> wow.
15:33:57 <shapr> what?
15:34:15 * shapr fights the type system
15:36:05 <shapr> hi xpto_ 
15:36:14 <shapr> wassup?
15:39:58 <shapr> xpto_: Haskell is a purely functional programming language.
15:40:02 <shapr> @fact learn
15:40:02 <lambdabot> Nothing
15:40:03 <shapr> @fact learning
15:40:04 <lambdabot> http://www.haskell.org/learning.html
15:40:27 <shapr> If you get the urge to learn Haskell, there's lots of info at that url, and helpful people on this channel.
15:40:29 <shapr> (when they're awake)
15:41:39 <shapr> would you like to see some demo code?
15:44:11 <shapr> xpto_: a simple project to start with could be a lambdabot plugin.
15:45:44 <shapr> @hello
15:45:45 <lambdabot> Hello world. 
15:45:47 <shapr> @foruten
15:45:48 <lambdabot> Sorry, I don't know the command "foruten", try "lambdabot: @listcommands"
15:45:49 <shapr> urf
15:45:51 <shapr> @fortune
15:45:51 <lambdabot> Lookie, lookie, here comes cookie...
15:45:51 <lambdabot> 		-- Stephen Sondheim
15:45:54 <shapr> @fact source
15:45:55 <lambdabot>  http://sf.net/projects/haskell-libs/, http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
15:46:05 <shapr> @listcommands
15:46:05 <lambdabot> I react to the following commands: ["define","definitions","del-definition","dump","echo","eval","fact","fortune","get-definition","goodbye","hello","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","more","msg","part","quit","resume","searchml","set-fuel","showml","state","topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type","yow"]
15:47:23 <shapr> xpto_: have you tried any functional programming languages before?
15:55:58 --- topic: set to 'garbage collection' by xpto_
16:00:53 <shapr> xpto_: we keep news in the topic, could you put it back?
16:00:56 <Darius> ...
16:01:01 <shapr> hi Darius 
16:01:03 <shapr> wassup?
16:01:33 <Darius> reading a thing by Paul Graham referred to from c.l.f
16:01:43 <shapr> xpto_: no worries
16:01:52 <shapr> xpto_: I can put it back if you prefer.
16:02:04 <shapr> Darius: which thing? the hundred years?
16:02:31 <Darius> No, something on the popularity of languages
16:02:41 --- topic: set to '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","New Hat 2.02 http://www.haskell.org/hat/","New Learning Haskell page - http://www.haskell.org/learning.html","GUI Demos - http://repetae.net/john/computer/haskell/gui/","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","GHC 5.04.3 released!","This is no longer a LOL Free Zone"]' by shapr
16:03:04 <shapr> most of his articles are worth reading.
16:12:26 <shapr> Darius: what do think? does he have a clue?
16:15:58 <Darius> Paul? It seems that most (all?) of his articles center, unsurprisingly, around promoting Lisp and Lisp-y things.
16:16:24 <shapr> yah, does seem so.
16:17:49 <Darius> Considering his and Lisps disposition toward modifying the language and giving programmers what they want, he should be a fan of soft-typing, not dynamic.
16:24:16 <shapr> is soft-typing type-inferencing?
16:27:27 <Darius> It's type-inference that switches over to dynamic typing when it can't type-check something
16:27:45 <shapr> Are there any languages that do that?
16:29:06 <Darius> http://www.c2.com/cgi/wiki?SoftTyping
16:30:02 <shapr> that's very spiffy
16:33:20 <shapr> ok, now RFC2822 gives you a real message when you show a Message
16:33:22 <shapr> yay
16:33:51 <shapr> now I can just add a spamassassin style X-Bogosity: header with Yes/No and the percentage calculated.
16:36:56 <shapr> wow, cool
16:36:58 <shapr> http://www.c2.com/cgi/wiki?RichardDrakeInterviewsWardCunningham
16:37:12 <shapr> We worked on our colleagues by writing programs they found interesting. The technique was simple. Ideas would come up over coffee. We would implement something before coffee the following day. It was great fun. They were writing project plans while we were writing code.
16:37:21 <shapr> that's my Haskell evangelism plan right there =)
16:37:51 <shapr> ok, Ward is my hero now.
16:42:09 <shapr> y0 Pseudonym
16:42:10 <shapr> wassup?
16:46:03 <Pseudonym> Not much, not much,
16:46:20 <shapr> written any cool code?
16:46:24 <shapr> read any neat papers?
16:46:33 <Pseudonym> Did you see the hashtable thing in haskell-libs?
16:46:46 <shapr> I saw it.
16:46:52 <shapr> I haven't had time to understand it yet
16:47:01 <shapr> but I know it's the implementation of the MVar example you gave me.
16:47:05 * Pseudonym nods
16:47:13 <shapr> my spamfilter is nearly ready
16:47:17 <Pseudonym> Cool.
16:47:25 <Pseudonym> I also wrote an LR(0) table generator.
16:47:30 <shapr> what's that?
16:47:32 <Pseudonym> I know they already exist in Haskell.
16:47:39 <Pseudonym> Oh, parser table generator.
16:47:43 <shapr> oh
16:47:47 <Pseudonym> Kind of like happy without the code generator.
16:47:58 <shapr> :)
16:47:58 <Pseudonym> Except happy is SLR(1) and mine is only LR(0).
16:48:04 <shapr> what's the S ?
16:48:11 <Pseudonym> S = Simple, from memory
16:48:23 <Pseudonym> SLR(1) > LR(0)
16:48:46 <Pseudonym> I actually want to play arould with QLR(k) parsing, but I need this first.
16:48:59 <shapr> ok, what's QLR(k) ?
16:49:13 <shapr> @fact qlr(k)
16:49:13 <lambdabot> Nothing
16:49:21 * shapr googles
16:49:22 <Pseudonym> Q = Quantum
16:49:35 <Pseudonym> It's not for quantum computers.
16:49:49 <Pseudonym> It just happens to use Dirac notation.
16:50:09 <Pseudonym> Let's see...
16:50:12 <Pseudonym> Ah, here we are:
16:50:16 <Pseudonym> http://compilers.iecc.com/comparch/article/96-05-128
16:50:34 <Pseudonym> If you're not up on your parsing theory, you probably won't understand it.
16:50:52 * Smerdyakov puts parsing theory in a meat grinder and turns on the meat grinder.
16:51:28 <shapr> I'm way down on my parsing theory ;-)
16:51:40 <shapr> I'll add that to my list of things to learn.
16:51:49 <shapr> Smerdyakov: ground theory?
16:51:58 <Smerdyakov> Don't learn it. It's lame.
16:52:18 <shapr> I misread that as "It's lean"
16:52:32 <shapr> I guess the meat grinder was still in the forefront of my thoughts.
16:52:36 <Smerdyakov> You misread too much. Watch your back.
16:52:44 <shapr> my back is clean!
16:52:46 <shapr> er, I mean..
16:53:40 <shapr> ok, now to write the code to add an X-Bogosity header...
16:54:04 <Smerdyakov> Guess what, fellas. I told UC Berkeley I'd go there for grad school.
16:54:08 <shapr> cool!
16:54:15 <shapr> you'll get to hang out with Binkely
16:54:33 <Smerdyakov> Maybe. Her advisor might be leaving the school, so I wonder what would happen then!
16:54:45 <shapr> she would get a new advisor?
16:54:56 <Smerdyakov> Probably nothing, since she doesn't work with him, really, he just OK's her stuff =)
16:55:11 <Smerdyakov> A grad student further along might switch schools as well, as part of the advisor's hiring deal.
16:55:25 <shapr> I'm not up on my grad student politics theory either.
16:55:26 <Pseudonym> I have to wonder about a paper called "Static Analysis of PostScript".
16:55:41 <shapr> Pseudonym: it's probably about lightning striking your printer.
16:55:49 <Pseudonym> Could be, true.
16:56:11 <shapr> this is postscript, this is postscript going vooom!
16:58:25 <shapr> I wonder if anyone's tried to write a postscript interpreter/compiler in Haskell.
17:01:01 <Pseudonym> Probably not, probably because of the lack of GUI libraries.
17:01:03 * Pseudonym ducks
17:01:38 <shapr> ?
17:02:45 <shapr> what's a good name for a haskell spam filter?
17:04:10 <shapr> Hask - Hask, a Spam Killer
17:04:15 <shapr> ?
17:04:45 <Smerdyakov> Recursive acronyms make you sound like a creativity-free greasemonkey.
17:04:47 <shapr> Smerdyakov: this means you'll get sunshine instead of snow, right?
17:05:11 <shapr> Smerdyakov: come up with something better?
17:05:16 <Smerdyakov> shapr, yes.
17:05:18 <Smerdyakov> shapr, no.
17:05:21 <Pseudonym> Smerdyakov: If you can do one that actually sounds like a real word, it can be kinda cool.
17:05:31 <shapr> ah, complaint without improved options?
17:05:34 <Pseudonym> shapr: There are a few possibilities.
17:05:36 <shapr> == undefined
17:05:51 <Pseudonym> One is to have an acronym which spells something rude in another language.
17:05:56 <shapr> I actually want one that isn't a real word, because then people can google for it.
17:06:02 <shapr> at least, not an english word.
17:06:08 * Pseudonym seriously suggested this one
17:06:16 <Pseudonym> I wanted to call the Mercury debugger MerDe.
17:06:23 * shapr snickers
17:06:51 <Pseudonym> Another is the ugly StudlyCaps appreviated name.
17:06:58 <Pseudonym> Preferrable with an "i" or "e" prepended.
17:07:08 <shapr> Smerdyakov: One of the tips in The Pragmatic Programmer is "offer options, not excuses." I think the same is true of critical comments.
17:07:11 <Pseudonym> How about iSpam?
17:07:36 <Smerdyakov> shapr, I'm not your indentured servant!
17:07:45 <shapr> I lived in Seattle during the internet boom, so eSomething and iSomething gives me evil flashbacks :-)
17:08:06 <Pseudonym> Another possibility, in the tradition of Haskell itself, is to name it after someone famous who would in reality have had nothing to do with your code.
17:08:16 <shapr> oh! good idea!
17:08:19 * shapr thinks
17:08:29 <shapr> oh hey!
17:08:30 <Pseudonym> How about Cantor?
17:08:35 <shapr> we can combine two of these
17:08:37 <Pseudonym> Sorry, Canter.
17:08:44 <shapr> we can call it Paskal
17:08:45 <Pseudonym> The first green card spammer.
17:08:51 <shapr> since Paska is feces in finnish.
17:08:57 <Pseudonym> Oh, cool.
17:08:59 <Pseudonym> There you go.
17:10:07 * shapr thinks
17:10:10 <shapr> ibid: awake?
17:10:21 <shapr> I think Paskalle means "from shit"
17:10:31 <shapr> or "out of shit"
17:13:07 <shapr> I guess that's fitting for a spam filter.
17:18:59 <shapr> is the .au stereotype of .us people that they're overly sensitive?
17:23:51 <Darius> the slur is seppoes
17:25:53 <shapr> Smerdyakov: unhuffed?
17:35:27 <Smerdyakov> .
17:35:42 <shapr> how do I read from stdin?
17:36:48 <shapr> aha
17:42:49 <Pseudonym> I really shouldn't read slashdot.
17:43:20 <Darius> no, you shouldn't
17:43:30 <Pseudonym> The ignorance there is astounding.
17:43:41 <Pseudonym> "Factually, C++ is the most used programming language there is, but to a first approximation, all of this code is for Windows, and I don't count Windows."
17:45:14 <Pseudonym> I will concede that there's a lot of GTK "hello world" programs in Freshmeat written in languages other than C++.
17:45:33 <Pseudonym> But please.
17:45:37 * Pseudonym sighs
17:45:40 <Pseudonym> I'll stop now.
17:45:49 <shapr> read http://lambda.weblogs.com/ instead
17:45:58 <Pseudonym> Yes, I should do that.
17:46:15 <Pseudonym> People can be bigoted there, but at least it's not completely ignorant.
17:55:46 <Pseudonym> Incidentally, the hashtable thing is only a proof-of-concept.
17:55:57 <Pseudonym> For real concurrency, a thread per hash chain would be kinda cool.
17:56:26 <Pseudonym> That way, you could have multiple threads operating in different parts of the table concurrently.
17:56:35 <shapr> was lambdabot just a proof-of-concept too? :-)
17:56:44 <Pseudonym> Probably.
17:56:52 <shapr> at that point you reach row-level locking in a database
17:56:58 <Pseudonym> Kind of.
17:57:33 <shapr> lambdabot is great toy.
17:57:38 <Pseudonym> More like page-level locking.
17:57:46 <Pseudonym> Oh, it is.
17:57:49 <shapr> that's the sort of code toy I've been looking for
17:57:51 <Pseudonym> I got bored with it, though.
17:57:55 <shapr> @yow
17:57:55 <lambdabot> Oh, I get it!!  ``The BEACH goes on,'' huh, SONNY??
17:58:39 <shapr> I think I'll do one more release of lambdabot
17:59:23 <shapr> after Paskalle I want to write some sort of xmlrpc thing in Haskell.
18:03:39 * shapr bounces happily
18:03:45 <shapr> almost there...
18:06:41 <shapr> gee, I wonder if andrew cooke has ever dropped by here.
18:06:46 * shapr suspects he has...
18:16:47 <shapr> hi lowks 
18:16:58 <shapr> learning Haskell?
18:17:02 <shapr> looking for other users?
18:18:03 <lowks> shapr: actually yes
18:18:12 <shapr> which? :-)
18:18:14 <lowks> shapr: looking for some web interaction
18:18:21 <shapr> of what sort?
18:18:24 <shapr> CGI.hs?
18:18:28 <shapr> HTTP.hs?
18:18:29 <lowks> is there like some way to use haskell for web ?
18:18:38 <lowks> there is ?
18:18:46 <lowks> shapr: is haskell used for AI ?
18:18:52 <Smerdyakov> If you can produce programs that your OS can run, then obviously you can use CGI.
18:19:08 <shapr> I've heard of genetic algorithms written in Haskell.
18:19:32 <shapr> I don't know of any neural networks, but I'm sure there are some.
18:20:10 <lowks> shapr: i know u must have heard this a million times but here i go again what is the difference btwn haskell and clisp ?
18:20:19 <shapr> I've never heard that before :-)
18:20:23 <lowks> right
18:20:24 <lowks> hehe
18:20:37 <shapr> Haskell is a purely functional language.
18:20:50 <lowks> what does that mean ?
18:20:51 <Darius> Static-typing for one, laziness for another, syntax and purity
18:21:10 <shapr> oh, that's a great summary.
18:21:17 <shapr> @fact haskell
18:21:17 <lambdabot>  http://www.haskell.org/
18:21:35 <shapr> @fact haskell <Darius> Static-typing, laziness, syntax, and purity
18:21:36 <lambdabot> set haskell to <Darius> Static-typing, laziness, syntax, and purity
18:21:55 <shapr> lowks: purely functional mean that any call to a function can be replaced by the result of that function
18:22:03 <shapr> it's like an equation.
18:22:12 <Darius> no side-effects
18:22:18 <shapr> all outputs from a function must be described by the inputs to that function.
18:23:24 <shapr> lowks: would you like to see some sample sources?
18:23:37 <lowks> shapr: if you can show me that would be great
18:23:56 <shapr> lowks: first thing I ever wrote in Haskell - http://kungens.kemi.fi/~shae/src/haskell/Mandelbrot-0.1.hs
18:23:59 <lowks> shapr: is haskell easier to maintain / implement compared to python ?
18:24:01 <Pseudonym> lowks: AI is a big area, so it's hard to say "it's used for AI".
18:24:17 <Pseudonym> Haskell is very handy for parsing, including natural-language parsing, for example.
18:24:29 <Pseudonym> But probably not so much for neural network-type things.
18:24:57 <shapr> oy
18:25:04 <shapr> it's 3:30am
18:25:08 <shapr> I have a meeting at 9am
18:25:21 <lowks> oh okay ...
18:25:30 <lowks> shapr: thanks so much anyway
18:25:47 <shapr> sure, glad I could help :-)
18:25:51 <Pseudonym> Go sleep.
18:25:56 <shapr> I guess I won't finish this spam filter today :-(
18:26:00 <shapr> @fact g'nite
18:26:01 <lambdabot> zzzz
18:26:21 <Pseudonym> lowks: Oh, yeah, Haskell is good for writing IRC bots, too.
18:26:24 <lowks> well for those who have used python ... is it easier than python ?
18:26:35 <Pseudonym> It's very different than python.
18:26:49 <lowks> sorry i only know python so that is my point of reference
18:26:54 <Pseudonym> I'd say you can get up-and-running quicker in python.
18:27:02 <Pseudonym> But it's easier to write a lot of complex code in haskell.
18:27:04 <Darius> http://research.microsoft.com/~simonpj/papers/haskell-retrospective/index.htm might be helpful though it's more aimed at experienced Haskellers
18:27:33 <lowks> Pseudonym: is haskell being used for the web ?
18:27:41 <Pseudonym> Not much.
18:27:44 <lowks> Pseudonym: i mean for web programming
18:27:55 <Pseudonym> I mean not much. :-)
18:28:04 <Pseudonym> A few peoples' projects.  Nothing large-scale.
18:28:31 <lowks> it's not really used for the web then ?
18:28:48 <Pseudonym> Not by many people.
18:28:57 <Pseudonym> Haskell is mostly used for symbolic manipulation.
18:29:03 <Pseudonym> A lot of web stuff is text manipulation.
18:29:09 <Pseudonym> Hence perl and python are used a lot there.
18:29:12 <lowks> ok ...
18:29:22 <Pseudonym> That's not to say nobody uses it.
18:29:32 <lowks> hmmm
18:29:33 <lowks> okay 
18:30:01 <Pseudonym> But not many people do web programming in C++ either.
18:30:09 <Pseudonym> Even though C++ is the most-used programming language at the moment.
18:30:32 <lowks> i am planning to write a few spells for haskell implementations for sorcerer --> www.sorcerer.wox.org
18:30:48 <lowks> sorcerer already has one for hugs98
18:30:54 <lowks> i wrote one for nhc98
18:31:12 <lowks> sorcerer is definitely lacking in terms of haskell apps
18:31:15 <lowks> any suggestions
18:31:16 <lowks> ?
18:31:29 <Pseudonym> I don't know what this is.  Reading it now.
18:32:14 <lowks> sorcerer is a source based distro for linux
18:32:17 <lowks> much like gentoo
18:32:22 <Pseudonym> Ah, OK.
18:32:40 <Pseudonym> Well, does it have GHC?
18:32:45 <lowks> no
18:32:52 <lowks> thing is .. i tried with that
18:32:56 <lowks> don't know how to install it
18:33:00 <Pseudonym> Ah. :-)
18:33:03 <Pseudonym> It's complex, yes.
18:33:05 <lowks> hehe
18:33:10 <lowks> yes !
18:33:28 <lowks> and another one i tried was ....
18:33:33 <lowks> ummm what was that name ...
18:34:11 <lowks> oh ya
18:34:13 <Darius> helium or hbc?
18:34:22 <lowks> i remember why i couldn't get ghc to run
18:34:26 <lowks> it needs happy no ?
18:34:34 <Pseudonym> Yes, I think so.
18:34:35 <lowks> Darius: how good is helium ?
18:34:52 <lowks> Pseudonym: problem with that is ... i need a binary of happy
18:35:02 <Pseudonym> Hmmm.
18:35:10 <lowks> Pseudonym: the keeper of cvs of sorcerer won't be too happy with that
18:35:14 * Pseudonym nods
18:35:21 <lowks> usually he doesn't allow anything but source
18:35:31 <Pseudonym> You may be able to get away with C source.
18:35:43 <Pseudonym> Or bootstrap using hugs or something.
18:36:06 <lowks> i can bootstrap it using hugs ?
18:36:13 <Pseudonym> You might,.
18:36:17 <Pseudonym> Not sure.
18:36:17 <lowks> how is nhc98 compared to hugs98 ?
18:36:21 <Pseudonym> Actually...
18:36:29 <lowks> ...
18:36:36 <Pseudonym> Oh, hang on.  You should be able to get happy to produce haskell source.
18:36:39 <Darius> never used it, probably never will.  It aims at teaching Haskell.  Though (once it supports typeclasses) it may be useful for figuring out particularly hairy type errors.
18:36:42 <Pseudonym> Then check that in.
18:36:59 <Pseudonym> Happy is like yacc.
18:37:05 <lowks> yeah 
18:37:06 <Pseudonym> Or bison.
18:37:14 <lowks> i read 'yacc for haskell'
18:37:28 <Pseudonym> The bison source distro comes with the C output that bison produces.
18:37:35 <lowks> the thing is happy needs ghc and ghc needs happy
18:37:35 <Pseudonym> That's because bison needs bison to compile.
18:37:47 <Pseudonym> Yes, but here's my point:
18:37:48 <lowks> chicken and eggg
18:37:53 <lowks> aha ..
18:38:00 <Pseudonym> Happy compiles happy to haskell.
18:38:06 <Pseudonym> You should be able to distribute the haskell.
18:38:11 <Pseudonym> In theory.
18:38:16 <Pseudonym> It's still source code.
18:38:26 <lowks> so ur advice is .... create a spell for happy ?
18:38:50 <Pseudonym> Yes, I think so.
18:38:53 <Pseudonym> Uhm...
18:38:55 <Pseudonym> No.
18:38:57 <Pseudonym> :-
18:38:59 <Pseudonym> :-)
18:39:26 <Pseudonym> In your GHC source package, compile the happy code to haskell before packaging.
18:39:54 <lowks> use the ghc tar.gz to compile happy ?
18:39:59 <lowks> wow
18:40:33 <Pseudonym> You may be able to do that, too.
18:40:47 <lowks> hehe
18:40:59 <lowks> this is gonna be one complex spell :)
18:41:08 <Pseudonym> Sounds like it.
18:41:21 <Pseudonym> You had nothing else planned, right?
18:41:26 <lowks> but u guys here are pretty friendly :)
18:41:43 <lowks> i like this channel :) ...
18:42:07 <Pseudonym> we're pretty polite here.
18:42:27 <lambdabot> YOU ALL SUCK!!!!1!!!!
18:42:33 <Pseudonym> Apart from that bot.
18:42:39 <lowks> haha
18:42:57 <lowks> no Pseudonym what i meant to say was u guys are pretty friendly to n00bs
18:43:41 <Pseudonym> Oh, OK.
18:43:45 <lowks> :)
18:51:30 <Darius> Pseudonym: have you read "Wearing the hair shirt: A retrospective on Haskell?"
18:51:40 <Pseudonym> No.
18:51:42 <Pseudonym> Sounds amusing.
18:51:57 <Darius> it's enjoyable
18:52:56 <Darius> http://research.microsoft.com/~simonpj/papers/haskell-retrospective/index.htm (the link I gave above)
18:54:00 <Darius> it has Haskeller's biggest mistake ;)
18:55:54 <Darius> the typeclasses timeline is great
18:56:08 <lowks> who is the creator of haskell anyway ?
18:57:02 <Smerdyakov> George Washington
18:57:09 <Smerdyakov> It's how he won the Battle of Gettysburg.
18:57:38 <lowks> Smerdyakov: go away chameleon
18:57:59 <Smerdyakov> :-O!
18:58:27 <Pseudonym> Haskell was designed by a committee.
18:58:53 <Pseudonym> Five academics plus about 2,000 monkeys with typewriters.
18:58:59 <lowks> :)
18:59:12 <Pseudonym> The reason for the offside rule is the typewriters didn't have curly braces.
18:59:46 <lowks> Pseudonym: dude i can use hugs98 to bootstrap ghc right ?
18:59:54 <Pseudonym> I don't know.
19:00:00 <Pseudonym> Probably not any more.
19:00:16 <Pseudonym> You should be able to use it to bootstrap happy, though.
19:00:46 <lowks> ok
19:03:18 <lowks> thank goodness for non inclusion of curly braces
19:03:51 <Darius> oh, they're there
19:03:51 <Pseudonym> Well the monkeys had upgraded by the time they got record syntax.
19:06:28 <lowks> scheme is also a functional language right ?
19:07:07 <Pseudonym> Yes.
19:07:21 <Darius> depending on how much you stretch "functional" and how you use Scheme
19:07:41 <Pseudonym> Scheme is functional in the same way that Python is object oriented.
19:07:43 <Darius> but it certainly encourages a functional style
19:12:58 * Pseudonym laughs
19:13:07 <Pseudonym> Just got to the typeclass timeline.
19:39:58 <Darius> hmm, is there ST monad transformer
20:44:11 <ibid> shapr: paskalle is literally "[go] to feces" (actually, paska is more vulgar, closer to sh*t), idiomatically, "[go] take a dump"
20:44:25 <lament> Talking about pascal? :)
20:44:37 <ibid> no, about paskalle
20:44:53 <ibid> (shapr's spam filter it seems, see backlog)
21:03:21 <Pseudonym> Darius: There is no ST monad transformer.
21:03:23 <Pseudonym> There's only StateT.
21:03:44 <Pseudonym> To see why, consider ST piggybacking on top of a monad which does backtracking.
21:04:06 <Pseudonym> It's bad, I know.  To use references, you have to know what monad is underneath.
21:09:22 <Darius> yeah, I figured that, and didn't really think there was a solution
21:11:37 <Pseudonym> THere was some talk some time ago of introducing a MonadRef typeclass.
21:11:49 <Pseudonym> Of which both IO and ST would be instances.
21:12:04 <Pseudonym> The trouble was to do with functional dependencies.
21:12:32 <Pseudonym> Nobody could agree which direction they should go./
21:43:27 <d33p> fight
21:43:50 <Darius> club
21:46:36 <Pseudonym> Some people are forgetting rule 1.
21:47:13 <Darius> The first rule of Fight Club is that you don't talk about Fight Club.
21:47:28 <lowks> what is the second rule ?
21:47:46 <lowks> tyler durden
21:48:23 <Pseudonym> It's the same, from memory.
21:48:50 <lowks> hehe
21:48:53 <lowks> damn good show
