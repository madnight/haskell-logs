00:03:22 * Marvin-- sighs
01:27:11 <Arnia> Are there any installation systems written in Haskell?
01:33:06 <ibid> installation systems in what sense?
01:35:52 <Arnia> Easy to use systems that allow users to quickly install applications
01:37:53 <ibid> Radek: ah, you mean dpkg :-) no, i don't think so
01:39:26 * Arnia is thinking of writing a nicely modular installation system so he can install zopish stuff like Plone
02:06:44 <Janni> moin
02:07:49 <Arnia> hey
03:42:42 <Arnia> @yow
03:42:42 <lambdabot> Yow!  Are we wet yet?
04:16:18 <shapr> w00h00
04:19:49 <shapr> goood morning #haskell!
04:21:41 <Arnia> Heya :)
04:54:00 * shapr boings
04:55:07 * shapr throws shiny bits of code around
04:55:23 <shapr> hiya bryan 
04:55:28 <shapr> y0 Arnia 
04:55:40 <shapr> Arnia: hey, did you see the mailing list post from Peter Simons?
04:55:50 <shapr> seems he's working on arrow-based network daemon
04:57:42 <shapr> hey, my prototype bayesian spam filter is in the cvs tree of haskell-libs
04:57:50 <shapr> it's not very good
04:58:06 <shapr> hopefully it will improve when I've implemented all of the paul graham rules
04:59:26 <shapr> delYsid: I am impatiently awaiting your new chess code.
05:10:55 <Arnia> shapr: oooh... do you have a link to a paper?
05:13:41 <shapr> nah, he just posted to the haskell mailing list
05:14:05 <delYsid> re
05:14:14 <shapr> y0 y0
05:14:21 <shapr> delYsid: can you put your code into CVS?
05:14:24 * shapr bounces excitedly
05:14:25 <delYsid> it can solve checkmate positions now!
05:14:46 <shapr> w00
05:14:48 <delYsid> shapr: I do not know how...
05:15:04 <delYsid> I could retype it all into Notepad... :/
05:15:21 <delYsid> but I cant electronically copy anything onto the internet from where I am right now
05:15:48 <shapr> ok, I'll be patient :-)
05:17:00 <delYsid> hmm, how would I write a read instance for data Square = Sq Int Int ?
05:17:15 <delYsid> "e3" == Sq 5 3
05:17:36 <Arnia> shapr: Are you aware of any installation environments written in haskell
05:17:50 <shapr> Arnia: no, but SyntaxPolice is interested in such a thing
05:17:53 <shapr> so am I
05:18:02 <shapr> delYsid: I've never written a Read instance
05:18:12 <shapr> delYsid: if you have Hugs installed you can look at the Prelude sources
05:20:24 <delYsid> hmmm, I need to write a parser for strings like "Qe2xBc4"
05:20:36 <delYsid> readMove :: String -> Board -> MoveInFull
05:31:07 <SyntaxPolice> morning
05:33:05 <SyntaxPolice> we really need to take a weekend sometime to get the code out of the wayback machine into haskell-libs or something.
05:34:33 <shapr> yah, that's true
05:34:51 <shapr> do you know if Jan's code had an explicit license?
05:36:26 <shapr> I have some stuff already
05:39:25 <shapr> no license that I can find
05:39:28 <shapr> hi Heffalump!
05:39:28 <SyntaxPolice> I remember looking, but I don't remember the answer.
05:39:31 <SyntaxPolice> no license is bad :(
05:39:31 * Heffalump has his camera today
05:39:48 <Heffalump> so..what poses do you want it in?
05:39:55 <SyntaxPolice> the numeric quest code is a good example of exactly what _not_ to do with free software :-)
05:40:11 <shapr> Heffalump: oh, give us a nice marilyn monroe pose
05:40:25 <shapr> you know, the book with some nice code and hardware in the background ;-)
05:40:30 * shapr bounces cheerfully
05:41:11 <shapr> SyntaxPolice: what do you think about an abandonware/ dir in haskell-libs?
05:41:36 <Heffalump> hmm, better be Haskell, hadn't it?
05:41:37 <shapr> maybe with a DISCLAIMER file that says we just ripped it off for personal use, but that others can read it if they want?
05:41:48 <shapr> Heffalump: heh, good idea :-)
05:43:20 <shapr> SyntaxPolice: do you think an abandonware dir might cause trouble in the future?
05:47:49 <Heffalump> letely
05:47:51 <Heffalump> oops.
05:48:00 <Heffalump> arse, C'n'P broken
05:48:13 <Heffalump> http://urchin.earth.li/photopub/range?range=/users/ganesh/banana/2782-2784&titlehash=/users/ganesh/banana/7e1l4BHA4w&style=/down
05:48:20 <Heffalump> (apologies for the horrible URL)
05:49:58 <shapr> Heffalump: oh, it's GORGEOUS =)
05:50:24 <Heffalump> :-)
05:50:35 <shapr> could I mirror those images on my site? or should I just refer to those urls?
05:50:48 <Heffalump> up to you
05:50:57 * shapr bounces happily
05:50:59 * Heffalump hereby places those images in the public domain
05:51:02 <shapr> w00
05:51:15 <shapr> Heffalump: thanks very much for the pictures!
05:51:32 <shapr> it's sooo nice
05:52:01 <shapr> I must buy one!
05:52:28 <shapr> Heffalump: nice poses :-)
05:52:44 <shapr> very marilyn monroe
05:53:08 <shapr> I can't quite read the code in the background, is that emacs and some Haskell?
05:53:56 <Heffalump> yeah
05:54:06 <shapr> spiffy
05:55:24 <shapr> ok everybody, now that you've seen the pictures, you too can own your own copy! go here http://titles.cambridge.org/catalogue.asp?isbn=0521826144 buy a copy!
05:55:51 <shapr> just leave one for me!
06:01:03 <shapr> http://kungens.kemi.fi/~shae/h98/
06:01:08 <shapr> I've mirrored them here
06:01:46 <shapr> Heffalump: thanks for the sexy pix :-)
06:01:48 * shapr bounces happily
06:05:06 <shapr> wow, lots of stuff was at numeric-quest
06:05:51 * Igloo looks at the pictures and grins
06:06:41 <shapr> I heard that the largest crypto organization in the world is using Haskell
06:06:51 <shapr> specifically, http://www.cryptol.net/
06:08:02 <Igloo> I wouldn't be surprised given it's developed by Galois Connections
06:08:21 <shapr> "and makes Cryptol suitable for highly-parallel target environments, such as FPGAs"
06:08:22 <shapr> hmm
06:08:33 <shapr> maybe we'll get a highly parallel Haskell for, um, free
06:08:46 <shapr> from everybody's favorite peeping sam
06:08:48 <shapr> I mean, tom
06:10:53 <Heffalump> has anyone seen Eager Haskell available for download ever?
06:11:25 <shapr> oh, has anyone seen Hinze's FROWN available for download ever?
06:12:16 <shapr> Heffalump: have you emailed jan-willem?
06:12:30 <Heffalump> no, was just wondering whether to
06:12:41 <SyntaxPolice> shapr: what kind of trouble? you mean with the license?
06:14:25 <shapr> SyntaxPolice: yah, exactly
06:21:26 <SyntaxPolice> shapr: one never knows I guess :( we could make an effort to get some license on them first. I believe in the US anyway that "no license" means "fully protected"
06:21:34 <shapr> I'll email jan-willem about some of the libraries he hasn't posted to his site yet
06:21:36 <SyntaxPolice> so really we can't copy them.
06:22:01 <shapr> I wonder if anyone has tried to find the author.
06:39:36 <SyntaxPolice> actually, someone maintaining the web page told me months ago that he was going to mirror it on the haskell page.
07:13:43 * shapr boings
07:14:34 <shapr> so, any cool code lately?
07:19:20 <SyntaxPolice> shapr: for my talk I wrote a little Stack module, then rewrote it with teeeny implementations using as much currying as possible. its not quite "good" enough for the contest, but not bad :-)
07:23:41 <shapr> the IOHCC judging will be finished soon
07:26:51 <Marvin--> yay
07:36:03 <Marvin--> good thing Koen doesn't have any high expectations of me </sarcasm>
07:36:12 <shapr> ?
07:36:39 <Marvin--> I met with him today, and re PhD he said something like "well, you'll have time to have an article published by next year's interviews, maybe two, two would be excellent"
07:37:06 * shapr grins
07:37:16 <shapr> I think you can do it with the master's project you have now.
07:37:49 <Marvin--> yeah, I figure if you take a 50+ pages report and shrink it down to a 10-15-20 pages article it might be decent enough to publish
07:38:53 <shapr> I'd like to write journal articles.
07:39:03 <shapr> I think we need a #haskell wiki
07:39:19 <shapr> since I don't want to deal with usemod =)
07:43:53 <Marvin--> usemod?
07:45:11 <shapr> looks like HaskellWiki is going from PyWiki to usemod
07:49:20 * shapr wishes for hmake clean
08:07:03 <SyntaxPolice> shapr: I emailed the guy and asked him 'why usemod' (more out of curiosity than criticizm of course) but he hasn't replied.
08:19:59 <shapr> hi nerdlor 
08:20:04 <nerdlor> hi shapr
08:20:07 <shapr> what's up?
08:20:18 <nerdlor> not much
08:20:20 <nerdlor> a question for you
08:20:24 <shapr> yes?
08:20:30 <nerdlor> what does it mean to program in the "point free" style?
08:20:52 <shapr> I'm not sure
08:20:55 <nerdlor> hmmm
08:20:57 <shapr> but I think it's related to fixpoint
08:21:14 <shapr> the fixpoint of a function is where the input is equal to the output
08:21:28 <nerdlor> right
08:21:42 <nerdlor> i thought it had something to do with that
08:21:50 <nerdlor> i've seen references to this "style"
08:22:01 <nerdlor> but (not having a lot of math) i couldn't completely grok it
08:22:02 <shapr> http://216.239.39.100/search?q=cache:z32QD6hTfGEC:cs.oregonstate.edu/~erwig/old/cs589.s01/+%22point+free%22+haskell&hl=en&ie=UTF-8
08:22:13 <shapr> Point-free definition
08:22:13 <shapr>     This means that a function definition avoids, as much as possible, variables for objects that are not functions (lists, numbers, ...) and defines new functions by application of higher order functions. In other words, point-free function definitions avoid unnecessary lambda-abstractions and also recursion in the definition
08:22:28 <nerdlor> ah, this is what i thought
08:22:36 <nerdlor> instead of foo x = bar x
08:22:38 <nerdlor> foo = bar
08:22:52 <nerdlor> (eta reduction? beta? it's one of them, i think ;) )
08:22:56 <Marvin--> and instead of  foo x = f (g (h x))  you say  foo = f . g . h
08:23:07 <shapr> oh, that's what that means
08:23:11 <nerdlor> right-o
08:23:15 <shapr> in that case, I'm a fan of point-free programming.
08:23:15 <nerdlor> very good, i was close
08:23:20 <nerdlor> yes, me too
08:23:27 <nerdlor> i always feel clever when i manage to program like that
08:23:31 <nerdlor> (justified or not) l)
08:23:32 <shapr> yah, me too
08:23:32 <nerdlor> ;)
08:24:00 <shapr> I think eta reduction has to do with partial application (?)
08:24:10 <shapr> I've heard of beta reduction, but I don't know what it means.
08:24:26 <shapr> nerdlor: I just really like writing purely functional code, so I try to do that as much as possible.
08:24:31 <Marvin--> the whole problem with function application is that you have to read the program from right to left :-P
08:24:32 <shapr> have you seen the lambdabot sources?
08:24:45 <nerdlor> no, i haven't. haskell, i assume?
08:24:48 <shapr> yup
08:24:49 <shapr> @fact source
08:24:50 <lambdabot>  http://sf.net/projects/haskell-libs/, http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
08:24:53 <nerdlor> very good
08:24:55 <Marvin--> shapr: beta reduction is  (\x.E1[x]) E2  ->  E1[E2]
08:25:05 <nerdlor> i finally broke my head the other day, and in my new state
08:25:10 <nerdlor> i am beginning to understand monads
08:25:14 <shapr> yay!
08:25:17 <nerdlor> they were elusive for some time!
08:25:23 <shapr> Marvin--: I'd just call that function unwrapping or something
08:25:36 <shapr> I'll read further about beta reduction, thanks
08:25:41 <shapr> Marvin--: what's eta expansion?
08:25:46 <shapr> I've heard that Python could do partial application that way
08:25:59 <shapr> does that mean you just save some of the args and then call only when you have all of them?
08:26:40 <shapr> nerdlor: you can test your understanding of monads by writing a lambdabot plugin :-)
08:26:45 <shapr> @yow
08:26:46 <lambdabot> Yow!  I want my nose in lights!
08:26:48 <shapr> @fortune
08:26:48 <lambdabot> Debian Hint #9: If you need to know what version of Debian you're currently
08:26:48 <lambdabot> running, look in /etc/debian_version; if you want to know the codename for
08:26:48 <lambdabot> that version (for example, 3.0 is codenamed 'Woody'), check this URL:
08:26:48 <lambdabot> http://www.debian.org/doc/FAQ/ch-ftparchives.html#s-codenames
08:26:52 <shapr> @listmodules
08:26:53 <nerdlor> very good -- will do
08:26:53 <lambdabot> I have the following modules installed: ["eval","fact","fortune","hello","karma","more","searchml","state","system","topic","type","yow"]
08:27:20 <nerdlor> yes, i've been toying with what's turning out to be a toy PostScript interpreter in haskell
08:27:24 <nerdlor> it doesn't draw anything
08:27:30 <nerdlor> i'm just interested in the program flow bits
08:27:38 <shapr> neat!
08:27:39 <nerdlor> everything is cool, using a monadic style
08:27:42 <shapr> do you hav ethe code online?
08:27:47 <nerdlor> no, not yet
08:27:58 <nerdlor> the hard parts are { exit } from loops etc
08:28:03 <nerdlor> i believe that's a monadplus thing
08:28:05 <Marvin--> shapr: I don't remember from the top of my head...
08:28:22 <nerdlor> or may have to investigate a CPS approach
08:28:25 <nerdlor> so much to learn...
08:28:31 <nerdlor> haskell is a lot of fun, though
08:29:18 <shapr> yah, I think so too
08:29:29 <shapr> I'm slowly getting to the point of using it for my business.
08:29:36 <Marvin--> ah yes,  (\x.M x)  ->  M
08:31:37 <shapr> bonjoir __DL__ 
08:31:58 <shapr> nerdlor: if you want to put your code into the haskell-libs sf.net project, I could add you as a developer.
08:32:34 <nerdlor> wow
08:32:41 <nerdlor> well, it's pretty "newbie-ish"
08:32:48 <nerdlor> but i was thinking that its best value
08:33:00 <nerdlor> might as a sort of "here's how I learned about monadic programming"
08:33:10 <shapr> I created the haskell-libs project as a sort of cvs-wiki, where people can put code they're working on
08:33:11 <nerdlor> because it is something of a journey when you're not used to it
08:33:13 <shapr> or work on code from others
08:33:22 <nerdlor> cool
08:33:48 <shapr> there's various fun stuff in there
08:33:54 <nerdlor> right on
08:34:33 <shapr> do you have a userid on sf.net?
08:35:06 <nerdlor> i do
08:35:13 <nerdlor> i'm just trying to remember my password :(
08:35:18 <nerdlor> hold on a sec..
08:35:31 <shapr> ok
08:35:53 <shapr> __DL__: looking for Haskell people?
08:47:28 <nerdlor> shapr: i'll get back to you sometime soon with a new sf.net login
08:47:32 <nerdlor> time for lunch now!
08:47:35 <nerdlor> talk to ya later
08:47:48 <shapr> ok ttyl
09:00:35 * shapr bounces
09:47:26 * Arnia bounces and thinks about designing a Plone Installer in haskell
09:47:27 <cptchaos> I doubt it, too.
09:49:52 <cptchaos> sorry wrong channel
09:51:04 <Arnia> @yow
09:51:05 <lambdabot> The entire CHINESE WOMEN'S VOLLEYBALL TEAM all share ONE personality --
09:51:05 <lambdabot>  and have since BIRTH!!
09:51:37 <Arnia> Ok... that's quite political for Yow. Glad its keeping up the insanity and worry though :)
10:06:28 <Marvin--> blargh, as expected this turned out more complicated in code than on a whiteboard
10:11:20 * Marvin-- starts to seriously consider implicit parameters
10:13:06 * Marvin-- decides to seriously consider food instead
10:35:57 <mgoetze> Marvin--: have a pizza!
10:45:18 <Janni> helau!
11:11:49 --- mode: sterling.freenode.net set +v shapr
11:13:01 --- mode: sterling.freenode.net set +v dennisb
11:47:39 <Marvin--> FINALLY some damn progress, gawd I can't think today
12:00:56 * shapr boings
12:04:12 <Marvin--> boing boing
12:04:16 <shapr> y0 Marvin-- 
12:04:21 * nerdlor is nerdlor @ sf.net
12:04:25 <shapr> nerdlor: yay!
12:04:34 <shapr> nerdlor: ok, I'll add you
12:04:49 <nerdlor> far out. had a look through the lambdadot sources.
12:04:49 <nerdlor> woo!
12:04:55 <Marvin--> WTF
12:04:59 * Marvin-- boggles
12:05:09 <shapr> nerdlor: what do you think?
12:05:11 <shapr> Marvin--: yes?
12:05:36 <nerdlor> i use hugs primarily. are the ghc libs and haskell libs generally compatible/similar?
12:05:56 <Marvin--> apparently we've almost sold all the copies of the current printing of our RPG (and the first and only expansion)
12:06:09 <shapr> Marvin--: quick! write more!
12:06:13 <nerdlor> sounds like congrats are in order!
12:06:35 <shapr> nerdlor: in my experience, GHC has more of everything except TREX
12:06:36 <Marvin--> shapr: the second expansion is on its way, and then the second edition of the base book
12:06:49 <shapr> Marvin--: should I start calling you Gary Gygax now?
12:06:55 <Marvin--> who? what?
12:07:16 <shapr> the guy who started and owned TSR until he lost it in a divorce.
12:07:32 <shapr> wrote D&D and most of AD&D
12:09:02 <Marvin--> I'm not that involved in the makings of the RPG, I mainly proofread and "DM" at conventions
12:09:05 <shapr> nerdlor: you're in
12:09:31 <shapr> nerdlor: I actually find GHC easier/better for interactive use
12:09:56 <shapr> and because GHC has lots of extra libs that aren't available in other compilers/interpreters.
12:10:09 <shapr> y0 tmoertel 
12:10:27 <tmoertel> hello, shapr 
12:10:29 <shapr> wassup?
12:10:46 <tmoertel> not too much, just running a micro-lightning pfc
12:10:54 <shapr> tmoertel: any interest in a haskell spam filter?
12:11:02 <shapr> pfc?
12:11:10 <tmoertel> programming fun challenge
12:11:11 <tmoertel> http://www.kuro5hin.org/story/2003/4/14/215058/672
12:11:13 <shapr> poly-vinly chlorate?
12:11:15 <shapr> oh, that's pvc
12:11:35 <shapr> oh neat!
12:11:57 <shapr> dinner time, bbl
12:12:08 <tmoertel> k
12:15:24 <Marvin--> damn you, now I won't get anything else done on my master project before I write a program for this :)
12:15:35 <tmoertel> sorry ;-)
12:17:46 <Marvin--> how long do I have?
12:18:47 <nerdlor> shapr: thanks RE ghc
12:35:21 <Marvin--> tmoertel: okay, the 'ight' example takes about two minutes without optimizations in the code or by ghc
12:35:42 <tmoertel> are you using FiniteMap?
12:36:08 <Marvin--> yes :)
12:36:19 <tmoertel> that explains a lot ;-)
12:36:27 <Marvin--> what'd you get?
12:36:35 <Marvin--> (and using what?)
12:36:36 <tmoertel> about half a second
12:36:56 <tmoertel> I have written three reference implementations:
12:37:01 <tmoertel> 2 in Haskell, 1 in Perl
12:37:44 <tmoertel> All use custom data structures, which are actually straightforward.
12:38:21 <Marvin--> I went for elegant and simple for the first program :)
12:38:32 <tmoertel> Yes, but a dictionary-in-memory implementation is expensive.
12:38:51 <tmoertel> At least you now have a reference for testing improved versions.
12:41:20 <Marvin--> dang, no Show instance for finite maps
12:42:02 <Marvin--> as expected, most of the time is used for IO and building the FM
12:51:05 <Marvin--> right, so simply using an ordered list is way faster (1.1s)
13:06:55 <funktor> I'm helpless, again... with the most simplest task...
13:07:03 <funktor> how do I do readStrLn in haskell?
13:07:11 <funktor> I need to prompt the user for a line of text...
13:11:19 <Marvin--> readLn :: Show a -> IO a
13:11:26 <Marvin--> actually
13:11:29 <Marvin--> lambdabot: @type readLn
13:11:30 <lambdabot> readLn :: Read a => IO a
13:11:32 <Marvin--> yay :)
13:12:31 * shapr reboings
13:15:35 * Marvin-- mutters
13:15:41 <Marvin--> using a Trie didn't help
13:15:43 <funktor> ahhh, not getLine?
13:15:57 <funktor> @type getLine
13:15:58 <lambdabot> getLine :: IO String
13:16:06 <Marvin--> oh
13:16:19 <Marvin--> if you just want a string, use getLine, yes
13:16:20 <Marvin--> sorry
13:16:51 <funktor> ugh, readMove is ugly and ugly...
13:16:52 <funktor> bah
13:17:10 <shapr> ?
13:17:11 <funktor> I dont want to use parsec for such a little thing, a string with max-length of 10
13:17:18 <shapr> well, if it works
13:17:24 <shapr> then it doesn't matter how ugly it is
13:17:33 <shapr> just go back and clean it up later
13:17:42 <funktor> Pe2xQe3
13:17:44 <funktor> parse that into
13:18:25 <funktor> MoveInFull piece square (Move square' taking promoting-to) giving-check
13:18:49 <shapr> ?
13:19:15 <Marvin--> funktor: err... what is data and what is markers?
13:19:15 <shapr> I can't read it, or I might ;-0
13:19:17 <funktor> nm, I'll have to cope with it myself, pitty me that I cant check-in right now...
13:19:34 <funktor> shapr: Long-algebraic notation is simple:
13:20:10 <funktor> pieces: P (Pawn), N, B, R, Q, K
13:20:31 <funktor> squares: filerank (where file = char from a-h, rank = num from 1-8)
13:20:38 <funktor> x takes, - moves to
13:20:42 <funktor> Pe2xQe3
13:21:07 <shapr> pawn at e2 takes q at e3 ?
13:21:12 <funktor> yup
13:21:26 <funktor> Pe2-e4 = Pawn e2 moves to empty square at e4
13:22:09 <funktor> Now we have promotion and check too, so you could have Pd7-d8=Q+ meaning Pawn d7 moves to d8 promoting to a Queen and giving check
13:22:12 <Marvin--> so why not just  parse [piece,file,rank,action,...] = ... ?
13:22:29 <Marvin--> ah, you have more fun things too
13:23:06 <shapr> I think it's straightforward
13:23:16 <funktor> I have code for everything except check and promotion, doing it much like you suggested marvin, but I do not like the code
13:23:48 <shapr> parseMove (piece:file:rank:rest)
13:23:59 <shapr> then check the end of rest for a +
13:24:25 <funktor> i have toSquare :: String -> (Square, String)
13:24:28 <funktor> which works nice...
13:24:33 <funktor> but then I have all those
13:24:34 <funktor> where
13:24:36 <funktor> ...
13:24:49 <funktor> (sq,rest2) = toSquare rest
13:24:50 <funktor> blah
13:24:53 <funktor> and thats not so nice
13:25:44 <funktor> well, long algebraic is not that hard, short algebraic will be very confusing
13:26:05 <funktor> "e4" means "move that one piece which can go to e4 to e4"
13:26:06 <funktor> ugh!
13:26:30 <shapr> parseMove (piece:filerank:rest) = let movetype = if (head rest) == 'x' then take 2 rest else take 1 rest
13:26:39 <shapr> er
13:27:05 <shapr> that code should really return a tuple of (movetype,rest)
13:27:46 <funktor> so, if my gf doesnt interfer now, I should have this playGame "loop" going soon.
13:27:52 <funktor> and then, I'll try to beat it!
13:27:58 <shapr> funktor: hope your gf interferes ;-)
13:28:09 <funktor> hehe
13:30:51 <funktor> remaining prob is that I lost the reference for the code I ripped :((((((
13:32:47 <funktor> oh, could anyone please run whyfp.ps through pstotext and send it via mail to me???
13:40:18 * Marvin-- can't stop laughing at Max Knight
13:40:27 <Marvin--> too bad I only caught the last ten minutes
13:56:49 * shapr boings
14:31:50 <Marvin--> bleh
14:31:58 <shapr> ?
14:32:19 <Marvin--> the "I've lost track of what I'm doing and can't be bothered to work it out on paper so I'll just fiddle a bit with the variables" phase of programming isn't very productive :)
14:32:45 <tmoertel> Marvin--: how many lines are you up to ?
14:33:24 <Marvin--> tmoertel: I'm back to working on my master project
14:33:52 <tmoertel> ah
14:35:50 <Marvin--> which in itself has not really reached 1kloc yet
14:36:12 <Marvin--> but I've probably written about 5kloc for it so far ;)
15:03:00 <Janni> re
15:04:57 <shapr> y0
15:07:43 * Marvin-- grumbles
16:27:40 * shapr runs sloccount on the GHC cvs tree
16:33:08 <shapr> cool, sloccount claims my spam filter would take 1.6 months and cost $3,800
16:33:19 <shapr> not bad for a week of coding =)
16:36:21 <Smerdyakov> Eh? "sloccount"? "Slow coconut"?
16:36:36 <shapr> http://www.dwheeler.com/sloccount/
16:38:24 <shapr> g'day Mr Bromage, Sir
16:38:28 <Pseudonym> G'day.
16:39:01 <shapr> wassup?
16:39:27 <Smerdyakov> Pseudonym, I just realized your handle is self-referential. Good idea. =)
16:39:49 <shapr> hey, I ran sloccount on the GHC cvs tree, total cost $15 million USD
16:40:03 <shapr> time to develop, 3 years, some months
16:40:34 <Smerdyakov> Is that accurate, shapr?
16:41:03 <shapr> I dunno
16:41:20 <shapr> it said my spam filter would take 1.6 months and cost $3,800 USD
16:41:38 <shapr> even though it actually took less than a week
16:41:58 <Pseudonym> Smerdyakov: This took you how long to notice?
16:42:05 * shapr grins
16:42:22 <Smerdyakov> A few months. :O
16:42:38 <Pseudonym> I think this assumes a certain quality methodology./
16:43:02 <Smerdyakov> shapr, well, presumably there IS data on how much money was spent supporting GHC development.
16:43:03 <Pseudonym> If you did formal requirements documents, unit testing etc, 1.6 months might be right.
16:43:18 <Pseudonym> Well it took way more than 3 years.
16:43:31 <Riastradh> shapr - What are the ISPs like in Sweden?
17:02:20 <Darius> sloccount on EvalModule (my working copy version) spits out $17,465 and 1.55 months
17:03:35 <shapr> Riastradh: monopolized
17:04:02 <Riastradh> No, not in that sense, but are they reliable?
17:04:03 <Pseudonym> How much would lambdabot cost in total?
17:06:15 <Darius> (my working copy again which doesn't have everything) $47,660 with 4.23 months of effort
17:09:00 <Pseudonym> There you go.
17:09:09 * Pseudonym should try this on our product
17:09:50 <Darius> ah, no wonder my (C++) raytracer came out to 1668 lines
17:35:10 <shapr> Schedule Estimate, Years (Months)                         = 0.37 (4.42)
17:35:16 <shapr> Total Estimated Cost to Develop                           = $ 50,374
17:35:18 <shapr> that's for lambdabot 
17:35:56 <Riastradh> What -is- this thing that calculates very incorrectly these things?
17:36:07 <shapr> http://www.dwheeler.com/sloccount/
17:57:02 <mgoetze> oooh, did someone just send something to iohc-jury? :)
17:58:54 <shapr> several things even
17:59:48 <mgoetze> what is it? a submission?
18:16:56 <shapr> mgoetze: nah, the judging is nearly finished
18:17:59 <Smerdyakov> Ha. You are slow judges.
18:22:45 <shapr> some of us are, it's true.
18:22:53 <shapr> I wasn't very fast myself
18:32:40 <Pseudonym> Well our deadline is actually the workshop, isn't it?
19:16:26 * kawfee bounces
19:28:05 * tmoertel bazoinks
19:31:35 <Pseudonym> Woah.
19:31:56 <Pseudonym> Our product, according to sloccount, would take 224.41 person years to write.
19:32:11 <Pseudonym> Cost to develop: $30 million.
19:32:26 <Pseudonym> Geez.
19:41:06 <Darius> let me guess, you are seriously underpaid.
19:43:33 * Darius is thinking of making UnionTypesAreNotDynamicTypes an c2
20:39:46 * Pseudonym is seriously underpaid, yes
20:39:53 <Pseudonym> Even by Australian standards.
20:41:11 <Pseudonym> Now admittedly, this product took 10 years to develop and has been rewritten completely twice.
20:41:18 <Pseudonym> But 224.41 person years is a bit of a stretch.
20:42:07 <Pseudonym> Oh, and it needs 53 developers.
20:42:12 <Pseudonym> We have 7.
21:52:56 --- mode: sterling.freenode.net set +v dennisb
23:56:09 --- mode: sterling.freenode.net set +vv dennisb shapr
