03:28:22 * Arnia bounces awake
03:45:54 * Marvin-- had a really evil idea
03:49:11 * Arnia is a bit scared
03:49:14 <Arnia> What's the idea?
03:49:47 <Marvin--> oh, relates to pattern matching and my master project
03:50:04 <Marvin--> or rather, overlapping pattern matching
03:51:00 <Arnia> I'm now very interested *likes pattern matching*
03:51:52 <Marvin--> well, haskell has overlapping patterns as you know, and it works because the equations are tried in sequence
03:52:02 <Arnia> Yes...
03:52:16 <Marvin--> now, my master project involves encoding haskell programs in first order logic (with equality), and thus I lose the order of the functions
03:52:32 <Marvin--> it's all just a big set of clauses
03:52:45 <Marvin--> so somehow I have to translate the overlapping patterns to non-overlapping patterns
03:53:11 <Marvin--> and I've been working on that for a week now :)
03:54:06 <Marvin--> first I tried to write code that "filled in the blanks", i.e. insert deep patterns instead of variables or wildcards
03:54:41 <Marvin--> but that was tricky... so then two days ago I had an idea, since I have deep equality built into my logics, why not use implications and stuff
03:55:04 <Marvin--> however, I screwed up the logic of that, so I spent the whole day yesterday fiddling with propositional calculus trying to repair it
03:55:47 <Marvin--> now, the evil idea I just had was, instead of fiddling with lots of clauses in conjunctive normal form (which is what I got), why not stuff all the patterns in tuples and compare over them *cough*
03:58:22 <Marvin--> (okay, I guess that was kinda hard to follow, get back to me in a few months and read my report instead ;)
03:58:28 <Arnia> That's evil :)
03:58:58 <Arnia> Although I do want a definition of 'deep pattern' ;)
03:59:21 <Marvin--> yes, very evil :) the problem I had was that if I have a function f taking two arguments, defined by { f p1 p2 = e1 ; f p3 p4 = e2 }
03:59:39 <Marvin--> my first approach was to have  p3 /= p1 & p4 /= p2  ->  f p3 p4 = e2
03:59:54 <Marvin--> but what I *really* need is  not (p3 = p1 & p4 = p2)  ->  f p3 p4 = e2
04:00:10 <Marvin--> however, that's exactly the same thing as  (p3,p4) /= (p1,p2)  -> f p3 p4 = e2
04:01:05 <Marvin--> Arnia: I don't know if anyone else calls it deep pattern... I call a pattern that's just a variable, or a constructor with variables for arguments for a shallow pattern, everything else is a deep pattern
04:01:35 <Marvin--> so  (x:xs)  is shallow,  ((True,False):xs)  is deep
04:01:51 <Marvin--> Core only allows shallow patterns, I think
04:02:30 <Marvin--> brb, phone
04:05:31 --- mode: ChanServ set +v Janni
04:05:39 <Janni> Guten Morgen (moin)
05:04:50 <Marvin--> aiih, now I have to debug a prolog program
05:04:51 <Marvin--> great
05:09:46 <Arnia> Nyerk
05:09:50 <shapr> klär min stor lägenhet
05:10:24 <Marvin--> shapr: eh?
05:10:30 <shapr> clean my apartment?
05:11:48 <Marvin--> to clean = städa
05:12:01 <shapr> oh
05:12:04 <Marvin--> or rengöra, or göra rent
05:12:32 <Marvin--> depends a bit on the context :) but I'd say "clean my apartment" = "städa min lägenhet"
05:16:22 <shapr> jag maste städer min lägenhet.
05:16:40 <Marvin--> in that case, "städa" :)
05:16:49 <Marvin--> "jag måste städa min lägenhet"
05:16:49 <shapr> oh, maste is a hjälpverb?
05:17:15 <shapr> cool, thanks
05:17:28 * shapr städer
05:19:10 <Marvin--> städar ;)
05:31:19 <Arnia> @yow
05:31:19 <lambdabot> Is it 1974?  What's for SUPPER?  Can I spend my COLLEGE FUND in
05:31:19 <lambdabot>  one wild afternoon??
06:26:29 <resolve> hey folks!
06:26:36 <resolve> i'm finally getting a chance to play with IO in haskell
06:26:38 <resolve> this is fun!
06:28:32 <resolve> main :: IO ()
06:28:32 <resolve> main = do input <- getContents
06:28:32 <resolve>           putStr (unlines (map munge (lines input)))
06:28:32 <resolve> munge :: String -> String
06:28:32 <resolve> munge s = reverse s
06:28:34 <resolve> *grins*
06:28:51 <resolve> can i use return outside of a do statement?
06:29:05 <Janni> yes
06:29:08 <resolve> cool
06:29:13 <delYsid> everytime you are inside a monad...
06:29:20 <delYsid> do is just syntactic sugar
06:29:29 <Janni> munge = reverse (<- this works too (currying) and ich much nicer)
06:29:40 <resolve> so input <- getContents; lines input is equiv to (lines (return getContents))?
06:29:47 <Janni> resolve: you know (>>) and (>>=)?
06:29:56 <resolve> Janni: i know of them, that's about al ;-)
06:29:58 <resolve> all
06:30:07 <Marvin--> resolve: no, return getContents will give you IO (IO String)
06:30:07 <Janni> resolve: nope
06:30:16 <resolve> Janni: ah, munge will actually be more complicated, i was just testing
06:30:18 <Marvin--> resolve: return :: a -> IO a
06:30:39 <resolve> hmm, oops. how would i replicate the two-step do without a do?
06:30:48 <Marvin--> using >>=
06:30:50 <Janni> >>
06:30:51 <delYsid> >>=
06:31:00 <Marvin--> getContents >>= putStr . unlines . map munge . lines
06:31:08 <resolve> aha :) i need to read about them. any good online places, or does thompson's book cover it?
06:31:18 <Marvin--> resolve: welcome to the world of pointless^H^H^H^Hfree programming
06:31:27 <resolve> Marvin?
06:31:48 <delYsid> resolve: do is just sugar for >>=... I actually try to avoid using do :)
06:31:49 <Marvin--> resolve: (over)using . so that you never see the argument variables is called point-free programming
06:31:57 <Marvin--> resolve: some call it pointless programming instead
06:32:25 <delYsid> funny that, that using . is called point-free :)
06:32:31 * debug returns from debug mode
06:32:39 <Marvin--> yes, I don't claim to understand it
06:32:44 <resolve> ah, gotcha :o)
06:32:53 <Marvin--> delYsid: though '.' is meant to be the ring operatore
06:32:56 <Marvin--> operator
06:33:16 <delYsid> Marvin--: I have zero math background, so statements like that, tell me nothing
06:33:21 <resolve> function composition still requires me to 'stop and think' - i can't parse it as fast as i can traditional application
06:33:25 <resolve> but i'll get used to it i guess :)
06:33:37 <Marvin--> delYsid: the ring operator is function composition, which in haskell is called .
06:34:18 <Marvin--> you can also see it as a right-to-left pipeline
06:34:38 <delYsid> hmm, I need some topic.
06:34:53 <delYsid> now that I've seen brainfuck.hs, it is just half the fun to rewrite it...
06:36:24 <delYsid> hmm, dpkg.hs could be fun though
06:37:24 <Marvin--> :)
06:37:39 <Marvin--> Debconf.hs is probably too easy :(
06:37:42 <Marvin--> er, :)
06:39:15 <delYsid> yah! dctrl.hs, that sounds good
06:39:20 <delYsid> another Parsec project though
06:39:46 <Arnia> I like points-free programming... elegent ;)
06:40:03 <Marvin--> delYsid: haskell-libs has an RFC2822 module
06:40:11 <delYsid> grrr
06:40:12 <delYsid> :)
06:41:02 <Marvin--> well, I'm off to visit the ol' folks
06:43:59 <resolve> hmm, i've got a while to go on this yet, though :) could anyone tell me why this doesn't work?
06:44:00 <resolve> main = do input <- getContents
06:44:00 <resolve>           sequence_ (map (show . munge) (lines input))
06:45:01 <resolve> aha - i need to putStr the show?
06:45:02 * delYsid tries to remember what sequence_ does
06:45:29 <resolve> when using map over IO, you need sequence_
06:45:54 <resolve> if you want to evaluate to a single IO operation.. i think?
06:46:34 <delYsid> well, yeah, a putStr is missing imo
06:47:05 <resolve> cool, that worked. *bounces*
06:47:52 <resolve> interesting
06:48:05 <resolve> print behaves like putStr . show
06:48:07 <delYsid> hmm, does anyone have a small FFI example for me to look at?
06:49:12 <shapr> whoa, thought I was on #emacs for a sec =)
06:49:54 <resolve> ;-)
06:49:55 <resolve> hey shapr
06:50:18 <shapr> y0 resolve 
06:50:53 <shapr> I think @type uses FFI
06:50:57 <shapr> @type putStrLn
06:50:58 <lambdabot> putStrLn :: String -> IO ()
06:51:37 <delYsid> I'd like to import some library functions into Haskell...
06:52:01 <shapr> oh, I think it used to use FFI, but now uses popen
06:52:40 <shapr> yes, the 1.1 version does use FFI
06:52:48 <shapr> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/TypeModule.lhs
06:52:58 <shapr> look at the first check in of that file
06:54:05 <shapr> specifically:
06:54:06 <shapr> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/TypeModule.lhs?rev=1.1&content-type=text/vnd.viewcvs-markup
06:56:43 * shapr goes back to städar hans lägenhet
06:56:46 <shapr> @yow
06:56:47 <lambdabot> Were these parsnips CORRECTLY MARINATED in TACO SAUCE?
06:58:29 <resolve> hmm, it's really hard thinking about how to approach things after being stuck in an imperative mindset for so long
06:59:16 <resolve> aha, the lexing stuff might be useful
07:33:35 <delYsid> hmm
07:33:43 <delYsid> why is CPtrdiff called -diff?
07:33:52 <delYsid> and is that for C pointers?
07:34:01 <delYsid> and if yes, how do I get a NULL pointer in haskell?
07:54:51 <delYsid> bah, I dont grok this...
07:56:03 <delYsid> does anyone know a simple .hs file whcih creates bindings for a C library function?
07:59:33 <shapr> I think there are some docs out there somewhere.
07:59:45 <shapr> I haven't used the FFI yet, seems too scary still :-)
08:07:35 <resolve> killLine :: String -> String
08:07:35 <resolve> killLine = tail . dropWhile (/= '\n')
08:07:45 <resolve> is that the best way to write that? both style and method
08:08:20 * Arnia bounces
08:08:34 <Arnia> I have just created modular personal preferences for Plone
08:08:38 * Arnia bounces some more
08:08:50 <delYsid> shapr: yah, it is scary
08:10:01 <delYsid> killLine = tail . dropWhile . /= '\n'
08:10:06 <delYsid> should work too iirc
08:22:12 <delYsid> hmm, why does this not work?
08:22:13 <delYsid> newtype Piece = (Colour,Kind)
08:22:47 <ibid> you need a constructor
08:22:53 <ibid> newtype is like data, not like type
08:23:05 <ibid> (but unlike data, newtype cannot have alternatives)
08:23:09 <delYsid> well, type doesnt work either
08:23:20 <ibid> type should work
08:23:26 <ibid> what's the error message?
08:23:42 <delYsid> ah, nm, it worked
08:23:56 <ibid> type is a type alias, like C's typedef
08:25:05 <resolve> killLine :: String -> String
08:25:05 <resolve> killLine = if rest==[] then ""
08:25:05 <resolve>            else tail rest
08:25:05 <resolve>            where rest = dropWhile (/= '\n')
08:25:13 <resolve> hmm, what am i doing wrong? :)
08:26:06 <Janni> You can't curry like this
08:26:19 <resolve> oh, *bangs head*
08:26:24 <resolve> sorry, that was a silly question
08:26:44 <resolve> (but is there a better way? i'm used to (cdr nil) = nil
08:28:18 <Janni> I guess you're doing some unneccesary stuff in that function.
08:28:46 <resolve> hmm?
08:28:57 <Janni> What should it do? Delete all empty lines on the beginning of a string?
08:29:07 <resolve> i need to return everything after the first \n, or nothing if there's nothing after that
08:29:20 <resolve> without the tail, the \n is left in the string
08:29:38 <shapr> what about using break (/='\n') ?
08:29:43 <Janni> You don't have to distinguish between the two cases.
08:29:52 <shapr> er, break ('\n'==)
08:29:58 <shapr> or span ('\n'==)
08:30:04 <delYsid> data Board = Board
08:30:05 <delYsid>                 [(Kind,Square)] -- white
08:30:05 <delYsid>                 [(Kind,Square)] -- black
08:30:15 <shapr> no, wait span ('\n'/=)
08:30:18 <delYsid> if I try to use the Constructor Board, I always get a not-in-scope...
08:30:19 <delYsid> any ideas?
08:30:55 <shapr> delYsid: what about data Board = Squares ... ?
08:31:03 <Janni> delYsid: Are you accesing the data inside another module?
08:31:13 <delYsid> nope, in the same one
08:31:20 <shapr> y0 NYRias 
08:31:29 <resolve> Janni: how would i do that without distinguishing?
08:31:56 <resolve> shapr: thanks :-) i'm reading prelude.hs a bit - is there a page somewhere with a summary of what they do so i don't need to read the source? :)
08:32:06 <delYsid> zvon
08:32:09 <delYsid> is good...
08:32:10 <Janni> Just "tail rest"
08:32:10 <shapr> yah, there's a tour of the prelude somewhere
08:32:12 <delYsid> or how it was called
08:32:20 <resolve> janni:
08:32:23 <shapr> but I recommend reading the source :-)
08:32:48 <resolve> tail [] = error
08:33:50 <Janni> Err, I mean "tail str" where "str" is the not-yet-existing parameter of the function
08:34:17 <resolve> i don't understand :(
08:35:27 <Janni> resolve: OK, maybe I didn't understand the purpose of the function. Isn't it just "tail str"?
08:35:52 <Janni> Err.. no.
08:36:01 <delYsid> wah? this is strange
08:36:03 <delYsid> xBora = Board [] []
08:36:04 <delYsid> works
08:36:15 <delYsid> some lines later, the same definition with another name fails
08:36:43 <delYsid> are there any special scope rules for .lhs files I should know about?
08:37:36 <resolve> great, killLine = snd . (span (/= '\n')) worked shapr
08:37:37 <resolve> janni: it strips up to the first \n, then returns the rest, excluding \n
08:37:37 <resolve> "rest" might be nothing, in which case the tail of nothing doesn't exist
08:37:37 * resolve is starting to enjoy using '.' :)
08:37:55 <resolve> Janni?
08:38:24 <Janni> Is there always a `\n' in the string?
08:38:39 <resolve> hmm, good question
08:39:12 <resolve> nope, but that doesn't matter
08:39:21 <resolve> if a "--" occurs in the string, it should return all before that
08:39:27 <resolve> up to any possible \n, if it exists
08:39:31 <shapr> delYsid: maybe your type name is shadowing your constructor name?
08:39:43 <Janni> Because then it'd be just "foo str = tail (dropWhile ('\n' /=) str)
08:40:44 <Janni> Or just "test = tail . dropWhile ('\n' /=)"
08:41:14 <delYsid> shapr: I dont think so, tried other constructor names, same error
08:41:22 <delYsid> data Board = Board [(Kind,Square)] -- white
08:41:23 <delYsid>                    [(Kind,Square)] -- black
08:41:24 <delYsid> xBora = Board [] []
08:41:26 <delYsid> works
08:41:35 <delYsid> but after that I do \end{code}
08:41:41 <delYsid> and in the next code-block, it fails
08:42:19 <delYsid> bah, this is frustrating, guess I'll do another 6 month haskell break
08:47:31 <delYsid> aha!
08:47:42 <delYsid> \code{begin} is certainly not right
08:54:09 <resolve> is their a function in the standard library to strip duplicate elements?
08:54:24 <resolve> i just found sort in List (happy :) and so doing it myself wouldn't be hard
08:54:25 <shapr> yup
08:54:25 <shapr> nub
08:54:30 <resolve> ah, cool!
08:54:31 * resolve bounces
08:54:37 <resolve> i'm not hitting many brick walls tonight!
08:55:04 <resolve> wonder why it's called nub :)
09:00:12 <delYsid> hmm
09:00:43 <delYsid> Compiling FEN              ( fen.hs, interpreted )
09:00:43 <delYsid> fen.hs:7: Data constructor not in scope: `Board'
09:00:43 <delYsid> fen.hs:7: Data constructor not in scope: `White'
09:00:44 <delYsid> fen.hs:7: Data constructor not in scope: `King'
09:01:33 <resolve> to define a static 'variable' in the scope of a module?
09:01:44 <resolve> by static, i mean it's an unchanging list
09:02:12 <resolve> oh, it's that easy! i was trying with 'let' :)
09:04:38 <delYsid> why could that be? if I use Board [] [] on ghci prompt, the Board constructor seems to be in scope
09:04:57 <delYsid> but if I put import ChessBoard into fen.hs, it doesnt see the constructor
09:06:10 <dennisb> delYsid: do you export Board in ChessBoard.hs?
09:06:16 <dennisb> or do you export everything?
09:07:24 <delYsid> ahh, tnx
09:07:29 <delYsid> I forgot (..) for Board
09:07:37 <dennisb> exactly
09:07:49 <dennisb> you just exported the type Board
09:10:19 <resolve> is there a way to do a conditional without an else clause?
09:11:49 <dennisb> resolve: not as an expression
09:12:47 <dennisb> what would it mean to have a function like: f x = if x == 5 then 45 
09:12:58 <dennisb> what if you call it with f 6?
09:13:26 <dennisb> you can always do: f x = if x == 5 then 45 else error "Ooooh noooooo!"
09:14:02 <resolve> yeah, it was for asserting the correct # of args were passed on the command line
09:14:14 <resolve> just wanted to do "if args /= foo then error ..."
09:14:27 <dennisb> if you are in the IO-monad then you can use "when"
09:15:22 <dennisb> main = do args <- getArgs; when (null args) (error "No args"); print args
09:15:46 <resolve> haven't encountered the IO monad yet
09:17:13 <resolve> main = do args <- getArgs
09:17:13 <resolve>           file <- head args
09:17:13 <resolve>           hFile <- openFile file ReadMode
09:17:13 <resolve> *scratching my head over this error*:
09:17:13 <resolve>     Couldn't match `IO' against `[]'
09:17:13 <resolve> 	Expected type: IO t
09:17:15 <resolve> 	Inferred type: String
09:17:17 <resolve>     In the application `head args'
09:17:28 <dennisb> haskell if is the same as the expression conditional (?:) in C (if you know C it might mean something to you)
09:17:28 <resolve> cool :-) i like when! /me has a lisp background
09:18:48 <dennisb> the thing to the right of the <- must be of type IO something
09:19:04 <dennisb> (or more general some monad thing, which IO is an example of)
09:19:17 <dennisb> "head args" is of type String
09:19:17 <resolve> ah, when is defined in monad
09:19:21 <dennisb> yes
09:19:51 <dennisb> main = do args <- getArgs
09:19:51 <dennisb>           let file = head args
09:19:51 <dennisb>           hFile <- openFile file ReadMode
09:19:59 <resolve> ah, i'm getting confused. you're right, that's what i wanted
09:20:09 <dennisb> or
09:20:11 <dennisb> main = do args <- getArgs
09:20:11 <dennisb>           file <- return (head args)
09:20:11 <dennisb>           hFile <- openFile file ReadMode
09:20:14 <resolve> much appreciated :-)
09:20:35 <resolve> aha
09:24:30 <resolve> wow, ghc compiled haskell programs really are noticably faster than runhugs :)
09:24:51 <resolve> on the other hand, i ended up with a 500k binary ;-)
09:28:32 <dennisb> well, all programs get a big piece of code attached to it (garbage collector, standard lib stuff and so on). For small programs it's of course not nice, but for bigger programs it's not that important
09:29:53 <resolve> just figured that stuff would be in standard libs instead
09:29:55 <dennisb> if you make your program twice as big it will not be a 1 meg binary
09:30:36 <resolve> *nods*
09:30:42 <resolve> i'm not too concerned about it, just suprised :)
09:30:45 <dennisb> there is no ghc-lib that all programs use, it's put into each program. That's how it is
09:34:07 <delYsid> aux ('1':s) r f bd = aux s r (f+1) bd
09:34:08 <delYsid> aux ('2':s) r f bd = aux s r (f+2) bd
09:34:08 <delYsid> aux ('3':s) r f bd = aux s r (f+3) bd
09:34:09 <delYsid> aux ('4':s) r f bd = aux s r (f+4) bd
09:34:25 <delYsid> hmm, does haskell have a elegant way to do this from 1 to 8?
09:34:40 <resolve> does haskell have an associative array or hash?
09:35:05 <resolve> aux (_:s) w/ a conditional, delysid ;-)
09:39:35 <resolve> i see there's an Array.hs, but .. hmm
09:48:11 <shapr> resolve: FiniteMap is python dictionary
09:55:25 <resolve> mm. it's part of standard haskell?
09:55:33 <shapr> yup, import Data.FiniteMap
09:55:55 <shapr> http://www.haskell.org/ghc/docs/latest/html/base/Data.FiniteMap.html
09:56:40 <resolve> aha, so i'd only be able to do that with ghc, not hugs?
09:56:52 <shapr> try "import FiniteMap" with hugs
09:57:08 <shapr> the latest version of Hugs does have hierarchal lib support
09:58:08 <resolve> ah, it works. i must just have been looking in the wrong place
09:58:12 <resolve> grep -nH -i -e finitemap /usr/share/hugs98/lib/*
09:58:12 <resolve> grep finished with no matches found at Sun Apr 13 02:55:40
09:58:27 <resolve> cool, this helps muchly :)
09:58:55 <Arnia> @yow
09:58:56 <lambdabot> Th' MIND is the Pizza Palace of th' SOUL
09:59:16 <shapr> w00
09:59:25 <resolve> :o)
09:59:29 <shapr> yow rocks
10:00:07 <delYsid> yeah, woohoo!
10:00:08 <shapr> @yow
10:00:09 <lambdabot> Yow!
10:00:11 <delYsid> fen.hs works!!!!!
10:00:15 <shapr> delYsid: yay!
10:00:21 <delYsid> *FEN> initialBoard
10:00:22 <delYsid>  r n b q k b n r
10:00:22 <delYsid>  p p p p p p p p
10:00:22 <delYsid>  - - - - - - - -
10:00:22 <delYsid>  - - - - - - - -
10:00:22 <delYsid>  - - - - - - - -
10:00:24 <delYsid>  - - - - - - - -
10:00:26 <delYsid>  P P P P P P P P
10:00:28 <delYsid>  R N B Q K B N R
10:00:35 <delYsid> initialBoard :: Board
10:00:36 <delYsid> initialBoard = fenToBoard "rnbqkbnr/pppppppp/////PPPPPPPP/RNBQKBNR"
10:00:52 <shapr> neat!
10:00:59 <resolve> delYsid: cool :)
10:01:49 <Darius> shapr: I'm pretty sure FiniteMap isn't Standard Haskell (though it or something very close will probably be Standard Haskell II)
10:01:58 <delYsid> http://delysid.org/fen.hs
10:02:03 <delYsid> I'd love to hear criticism
10:02:09 <shapr> oh, ok
10:03:57 <shapr> what's a fen?
10:04:20 <delYsid> the shortest notation for a complete board
10:04:26 <delYsid> I forgot what the acronym means
10:05:03 <resolve> i fear i've made a stupid mistake again, but i can't figure this one:
10:05:04 <resolve> parseLines :: [String] -> Int -> [(Int, [String])]
10:05:04 <resolve> parseLines (x:xs) c = (c : (userIdentifiers x)) : (parseLines xs : (c+1))
10:05:12 <resolve> error is:
10:05:12 <resolve>     Couldn't match `Int' against `String'
10:05:12 <resolve> 	Expected type: [Int]
10:05:12 <resolve> 	Inferred type: [String]
10:05:12 <resolve>     In the application `userIdentifiers x'
10:05:12 <resolve>     In the second argument of `(:)', namely `(userIdentifiers x)'
10:05:16 <shapr> where's Board.hs ?
10:05:16 <delYsid> you start with rank 8 and file 1, counting from left to right, and top to bottom. piece chars just mean the char, 1-8 means file+1-8, and / means next rank
10:05:30 <delYsid> shapr: Board.lhs is also at delysid.org
10:05:33 <shapr> oh
10:05:45 <shapr> I'd suggest matching module name and filename case
10:05:57 <shapr> so module FEN would be in FEN.hs
10:06:02 <shapr> or module Fen in Fen.hs
10:06:29 <resolve> ah, idon't want to be consing, i want to be tuppling
10:06:44 <Arnia> resolve: shouldn't the (c:...) be (c,...)
10:07:24 <resolve> yep :) silly me. i'm too used to lisp and two element lists (partial excuse; the rest is because i'm silly ;-)
10:08:49 <Arnia> ;)
10:08:59 <Arnia> In these circumstances a
10:09:00 <Arnia> @yow
10:09:01 <lambdabot> ..  My pants just went on a wild rampage through
10:09:01 <lambdabot>  a Long Island Bowling Alley!!
10:09:03 <Arnia> is what's needed
10:09:04 <resolve> ;-)
10:09:25 <Darius> see this for a compact chess representation http://www.gotw.ca/gotw/072.htm
10:12:48 <Darius> but I believe it's targetted at saving all the moves so can use incremental information for some of the smaller representations
10:14:04 * dennisb have written a fen parser in c (a long time ago)
10:14:38 <dennisb> It's not the shortest representation (but it is short)
10:14:56 <delYsid> I ment for ascii/readable strings
10:14:57 <dennisb> and it stands for Forsyth-Edwards Notation I believe
10:15:06 <delYsid> bitboards are certainly alot smaller
10:15:46 <dennisb> it's easy to make a smaller representation, but this is small enough still readable
10:16:20 <delYsid> mmmm, yummy
10:16:27 <delYsid> algebraic will be hard
10:17:01 <archie_sihir> whoo
10:17:02 <shapr> algebraic what?
10:17:08 <archie_sihir> lotsa people in here
10:17:08 <shapr> hi archie_sihir
10:17:08 <delYsid> move notation
10:17:13 <archie_sihir> hi shapr
10:17:26 <archie_sihir> hey shapr aren't u in the python channel too ?
10:17:31 <shapr> archie_sihir: learning Haskell? or looking for other users?
10:17:34 <shapr> archie_sihir: yah, sometimes.
10:17:42 <archie_sihir> what interpreter .... is best for haskell
10:17:42 <shapr> I used to be in #python all the time, but not so much lately.
10:17:51 <delYsid> gh=Q, Bc4, Rfg1, ...
10:17:54 <shapr> I like GHC best, but it's not an interpreter.
10:17:55 <archie_sihir> shapr: i want to write a spell for sorcerer
10:18:02 <shapr> eh?
10:18:18 <archie_sihir> shapr: www.sorcerer.wox.org
10:18:35 <archie_sihir> just finished writing one for hugs98
10:18:44 <archie_sihir> just dunno wether that is good or not
10:18:51 <shapr> delYsid: ok, you're in
10:19:23 <Darius> GHCi is though
10:19:38 <shapr> sort of ...
10:19:47 <shapr> what's sorcerer?
10:20:01 <shapr> nice graphics, no summary
10:20:24 <shapr> ah, a spell is an install script
10:20:27 <Darius> I prefer GHCi to Hugs for the let, but Hugs loads and 'compiles' MUCH faster
10:20:30 * dennisb leaves again - see you later aligator
10:21:30 <shapr> archie_sihir: a spell is an install script?
10:21:50 <archie_sihir> shapr: i just found out that it's already in the grimoire =]
10:21:51 <archie_sihir> hehe
10:23:40 <shapr> delYsid: what do those do?
10:23:50 <archie_sihir> shapr: what intepreter do you use ?
10:23:56 <shapr> I use GHCi
10:24:03 <archie_sihir> shapr: CHCi ?
10:24:05 <archie_sihir> hmm
10:24:08 <delYsid> shapr: Those denote a move
10:24:24 <shapr> delYsid: can you point me to a translator? :-)
10:24:34 <shapr> archie_sihir: Glasgow Haskell Compiler
10:24:49 <resolve> hum. i need to map over a list, updating elements in a finitemap each time. i can visualise how to do it with recursion, passing the finitemap in on each recursion and in the base case, evaluating the the fm
10:24:50 <shapr> the i at the end is the interactive part 
10:24:50 <archie_sihir> ok
10:25:12 <resolve> i'm just wondering if there's a better way, with map or foldr or something. basically to keep a single variable "state" over the duration of the map
10:25:14 <shapr> resolve: what about addListToFM ?
10:25:59 <shapr> resolve: addListToFM_C
10:26:06 <shapr> http://www.haskell.org/ghc/docs/latest/html/base/Data.FiniteMap.html#addListToFM_C
10:28:02 <resolve> hmm, i guess i could munge the output in a map into a suitable format for inputting into addListToFM_C
10:28:34 <resolve> i was thinking of using addToFM_C with something like
10:28:35 <resolve> parseLines' (x:xs) c fm = map (\e -> in case lookupFM fm e of
10:28:35 <resolve>                                (Just x) -> ..add..
10:29:07 <resolve> you're right, addlisttofm_c is a better solution in this case
10:30:03 <resolve> so you're vying for haskell guru status these days, shapr? :-)
10:31:54 <shapr> no way :-)
10:32:17 <shapr> you can call me guru when I can deal with monad transformers and arrows with impunity
10:32:55 <shapr> I think I'm up to Haskell User.
10:33:32 <shapr> many others here know more than I do
10:33:37 <shapr> I'm just really talkative ;-)
10:33:58 <resolve> ahh, well talkative is good especially during the learning stages (for me, i mean, not you! ;-)
10:33:58 <shapr> @fact
10:33:59 <lambdabot> empty factoid, BZZZT, thank you for playing!
10:34:13 <shapr> I learned a lot working on lambdabot 
10:34:57 <Darius> @more needs to handle when it's given one really long line
10:35:10 <shapr> oh, is that what crashed it yesterday?
10:35:19 <Darius> yeah
10:35:47 <shapr> lambdabot has monad transformers, threads, thread safe FIFOs (channels), socket stuff, etc
10:36:10 <Darius> And I was most of the way through a BF interpreter when it did
10:36:23 <shapr> Darius: BF written in @eval ?
10:36:41 <Darius> yeah
10:37:00 <shapr> lambdabot also has a simple plugin API, so you can start really simple and go to really complex
10:37:17 <debug> hm
10:37:34 * Arnia can't resist
10:37:35 <Arnia> @yow
10:37:36 <lambdabot> What's the MATTER Sid?..  Is your BEVERAGE unsatisfactory?
10:37:40 <shapr> Darius: thanks for the bug report, I'll fix that soon.
10:38:04 <debug> @miau
10:38:04 <lambdabot> Sorry, I don't know the command "miau", try "lambdabot: @listcommands"
10:41:50 <resolve> *bounces extremely happy*
10:41:59 <resolve> parseLines' [] c fm = fm
10:41:59 <resolve> parseLines' (x:xs) c fm =
10:41:59 <resolve>     parseLines' xs (c+1) (addListToFM_C (++) fm
10:41:59 <resolve>                           (zip l (replicate (length l) [c])))
10:41:59 <resolve>     where l = (userIdentifiers x)
10:42:01 <resolve> that's so cool :-)
10:42:59 <resolve> not sure if my use of zip with uneven list elements is the most efficient way to handle it, but still, it works! :o)
10:45:57 <delYsid> bah!
10:46:09 <delYsid> why cant I define show for a type synonym?
10:46:24 <Darius> you shouldn't need to
10:46:38 <delYsid> type Square = (Int,Int)
10:46:49 <delYsid> now I want to show that as "a3" or "b8"
10:47:23 <Darius> Then you'll need a newtype or data (Int,Int) already has an instance of show
10:48:17 <delYsid> will just changing it to newtype work?
10:48:57 <Darius> no you'll need to add and remove the constructor and there'll not be much point in it being a tuple anymore
10:49:07 <delYsid> bah
10:49:20 <delYsid> so I need to change it into data, and add constructors everywhere...
10:50:00 <Darius> more or less
10:50:12 <archie_sleepzz> writing a spell for nhc98
10:50:33 <Darius> or you could make a different show function
10:50:51 <Darius> showPosition :: (Int,Int) -> String
10:51:13 <resolve> instance Show (FiniteMap (Show => a) (Show => b)) where
10:51:13 <resolve>     showsPrec _ x s = x ++ s
10:51:18 <resolve> hmm, i'm way off this time :)
10:51:24 <delYsid> hmm, this defeats the whole point of show in ghci :)
10:53:59 <Darius> resolve: what's with all the ()'s in parseLines', at least one pair is completely superfluous and (though this is a personal style issue) you can get rid of more with $
10:54:36 <resolve> Darius: oh, just completly not knowing what i'm doing ;-)
10:56:15 <Darius> parseLines' (x:xs) can be written = parseLines' xs (c+1) $ addListToFM (++) fm $ zip l $ replicate (length l) [c]
10:59:57 <resolve> what's $ do?
11:00:22 <resolve> just partition areas of evaluation?
11:00:42 <resolve> i've been using lisp more than anything recently, so my haskell code often ends up looking a bit like lisp ;-)
11:00:44 <Darius> it's just function application, but with low-precedence and right-assosiative
11:01:01 <Darius> f $ x = f x
11:01:05 <archie_sleepzz> resolve: what do you use lisp for anyway ?
11:01:46 <resolve> emacs, mainly. most of the "apps" i use are in emacs
11:01:48 <resolve> I'm using ERC Version 3.0 $Revision: 1.509 $ with Emacs 21.3.50.1!
11:03:21 <Darius> you can avoid calculating the length (and save some memory) with repeat [c] instead of replicate. zip stops at the shorter list.
11:03:35 <resolve> is there an easy way to pad strings up to certain lengths? (format specifiers would be even cooler!)
11:03:39 <resolve> ah, neat!
11:03:48 <resolve> i'm really enjoying the concept of lazy programming
11:04:19 <resolve> .. and not just because i'm lazy ;-)
11:04:33 <Darius> it increases modularity and simplicity
11:13:34 <resolve> -- clean show - delimit results with just spaces
11:13:35 <resolve> cshow :: Show => [a] -> String
11:13:40 <resolve> ERROR "xref.hs":99 - Haskell 98 does not support tag classes
11:13:42 <resolve> interesting :)
11:14:10 <Darius> haven't seen that one, but you need Show a
11:14:19 <resolve> ahh!
11:15:41 <resolve> *bounces*
11:16:21 <resolve> thanks everyone for their input, it's been a great help
11:17:34 <resolve> http://repose.cx/dump/xref.hs
11:17:48 <resolve> that's nearing completion now. heh, but cool - i tried it on the standard prelude and i get:
11:17:53 <resolve> ERROR - Garbage collection fails to reclaim sufficient space
11:19:18 <resolve> compiled with ghc it works fine
11:29:12 <Vincenz> http://www.expressen.nu/html/tema/katt/godkills.jpg
11:29:16 <Vincenz> I love that pic
11:40:10 * Darius concludes that GHCi is no good for analyzing space usage.
15:01:42 --- mode: ChanServ set +v Heffalump
15:22:08 <shapr> oy
15:22:20 <delYsid> hey shapr 
15:22:52 <delYsid> *FEN> pieceAt initialBoard $ Sq 2 1
15:22:52 <delYsid> Just (White,Knight)
15:22:56 <delYsid> whee :)
15:23:11 <delYsid> *FEN> kingSquare Black initialBoard
15:23:12 <delYsid> e8
15:23:52 <shapr> jag har mycket drickat alkohol
15:24:00 <shapr> yay haskell!
15:55:34 <shapr> @yow
15:55:35 <lambdabot> My mind is a potato field...
15:55:38 <shapr> @yow
15:55:39 <lambdabot> PIZZA!!
15:55:40 <shapr> @yow
15:55:41 <lambdabot> Well, I'm a classic ANAL RETENTIVE!!  And I'm looking for a way to
15:55:41 <lambdabot>  VICARIOUSLY experience some reason to LIVE!!
16:37:42 <Arnia> @yow
16:37:43 <lambdabot> My face is new, my license is expired, and I'm under a doctor's care!!!!
16:38:50 <shapr> @yow
16:38:51 <lambdabot> I'm working under the direct orders of WAYNE NEWTON to deport
16:38:51 <lambdabot>  consenting adults!
16:38:55 <shapr> @yow
16:38:56 <lambdabot> If I pull this SWITCH I'll be RITA HAYWORTH!!  Or a SCIENTOLOGIST!
16:40:03 * Arnia hides from Yow
16:40:20 * shapr yows away
16:40:54 * Arnia bounces shapr into the net
16:46:49 * shapr drifts away into the packets
16:50:36 * Arnia forges an ACK
16:54:16 <shapr> time for sleep
16:54:40 * Arnia puts shapr into a basket made out of lambda abstractions
16:57:07 --- mode: ChanServ set +v Janni
16:57:13 <Janni> good night.
16:57:54 <Janni> s/night/evening (night is when I'm sleeping, right?)
16:58:26 * Arnia bings in agreement
20:10:04 <resolve> morning everyone! :-)
20:10:48 <resolve> something i've been wondering about - i've been trying to parse bits of a tiny language (so far all i've done is comment characters, basically) - to do that, i had a test like:
20:11:05 <resolve> killToCC' ('{':'-':xs) c = killToCC' xs (c+1)
20:12:21 <resolve> obviously for strings of more than two characters that could get quite unweildy. is there a better way? i've just come across another problem (i'd like to write a predicate which returns true if the string ends in another string - .. hmm, maybe i could take a substring of the list and compare it to something. is there a sublist routine?
20:12:43 <resolve> splitAt is the best bet?
20:15:19 <resolve> isLiterate :: String -> Bool
20:15:19 <resolve> isLiterate s = snd (splitAt ((length s) - 4) s) == ".lhs"
20:15:20 <resolve> ?
20:39:58 <flippo> what is the name of a haskell implementation that easily calls java classes?
20:40:34 <flippo> perhaps one implemented with the java VM
21:34:11 * inkedmn is away: crawp
23:30:24 <shapr> flippo: Have you seen http://sourceforge.net/projects/jvm-bridge/ ?
23:31:17 <flippo> shapr: I ran across that but wasn't sure if it was more than a demo
23:31:56 <shapr> jvm-bridge just had the 0.2 release last week.
23:32:15 <shapr> the feature list sounds interesting
23:35:07 <shapr> lambdabot: @quit
