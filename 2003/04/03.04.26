01:50:54 <andersca> morning Jolta
01:51:07 <Jolta> and a good moring to you, too!
01:51:27 <Jolta> hm, my fingers are obviously still sleeping
03:00:45 <BlitzNL> Does any of you use an AG system? Which one?
03:34:20 <delYsid> *EPD> Nothing >>= \k -> return (k,1)
03:34:20 <delYsid> Ambiguous type variable(s) `a' in the constraint `Show a'
03:34:20 <delYsid> arising from use of `print' at <No locn>
03:34:20 <delYsid> In a 'do' expression pattern binding: print it
03:34:21 <delYsid> *EPD>
03:34:33 <delYsid> hmm, can anyone explain to me, why ghci doesn't want to execute this?
03:37:06 <esap> try specifying a type for 'k'.
04:05:51 <delYsid> :: (a -> Bool) -> Maybe a
04:05:55 <delYsid> does such a function exist?
04:06:49 <ibid> do you have some reason not to write it yourself? sounds trivial
04:07:20 <delYsid> I just saw the pattern, and was wondering if I could use some predefined func...
04:09:55 <esap> f g = Nothing  is one implementation of that, probably not the one you're looking for though.
04:11:24 <ibid> um, delYsid, you probably want :: (a -> Bool) -> a -> Maybe a?
04:11:41 <delYsid> hum
04:11:48 <ibid> as in, foo f x = case f x of { True -> Just x; False -> Nothing }
04:12:05 <delYsid> ah yeah
04:12:08 <delYsid> that 
04:15:06 <esap> Would it be more useful to use the bind operation of a Maybe monad (and 'guard'?)
04:15:59 <delYsid> ?
04:16:46 <esap> f g x = do { guard (g x) ; return x }
04:17:17 <delYsid> @type guard
04:18:27 <esap> guard :: MonadPlus m => Bool -> m ()   
04:18:39 <Vincenz_afk> Neat!
04:18:45 <Vincenz_afk> I've got a background iimage in my consoles
04:18:48 <Vincenz_afk> :)
04:18:52 <Vincenz_afk> it looks -pro-
04:22:30 * cleverdra carefully records the new word: 'pro'
04:25:46 <delYsid> hmm
04:26:22 <delYsid> validMove s c bd =
04:26:22 <delYsid>     parseMove s bd >>=
04:26:22 <delYsid>     (ifMaybe (`elem` (legalMovesFor c bd)))
04:26:23 <delYsid> --  \m -> if m `elem` (legalMovesFor c bd) then Just m else Nothing
04:26:48 <delYsid> I guess this cant be written using guard without \m in it...
04:28:56 <andersca> pro...
04:29:57 <esap> validMove s c bd = do { m <- parseMove s bd ; guard (m `elem` legalMovesFor c bd) ; return m }
04:30:09 <esap> not even hard.
04:32:34 <esap> The most important thing is to understand that Maybe will act as a monad. This has many good uses [like pattern matching].
04:35:01 <delYsid> justIf f g = guard (f g) >> return g
04:35:16 <delYsid> hmm, I still think it would be useful if a function like that were already defined anywhere
04:40:00 * esap usually avoids using bools anyway, Maybe works so much better with pattern matching.
04:40:18 <delYsid> ?
04:42:36 <esap> You can use objects of type a -> Maybe b as a way to abstract pattern matching to functions.
04:43:21 <esap> then use it with f x | Just(y) <- x = ...
04:43:43 <esap> no I mean, f x | Just(y) <- pat x = ...
04:44:52 <delYsid> oh
04:44:54 <delYsid> interesting
04:46:01 <esap> and the monadic combinators work very well for composing patterns.
04:52:16 <esap> for example: matchthird x = do { (_,_,c) <- return x ; return c } is a pattern for matching the third element of a three-element tuple  [with type: (a,b,c) -> Maybe c ]
04:53:18 <esap> and you can then use it with: f x | Just(y) <- matchthird x = y + 1
04:55:35 <esap> of course, it's even better than this. These functions work in other monads than Maybe as well.
04:56:19 <shapr> oy
04:56:26 <Vincenz> yo
04:56:44 <esap> hi Shae!
04:56:51 <andersca> morning shapr
04:57:18 <shapr> goood morning!!
04:57:22 * shapr boings furiously
04:57:35 <shapr> andersca: geez, when do you sleep?
04:58:06 <andersca> shapr: I woke up at 0530
04:58:16 <andersca> shapr: fell asleep in front of CSI Miami
04:58:18 <Vincenz> Heh, I went to sleep around that time 
04:58:49 <shapr> me too
04:59:11 * shapr boings happily
04:59:28 <shapr> yay, I think I know enough about arrows to do some small things with them
04:59:38 <Jolta> arrows? yay!
04:59:51 <esap> arrows really do need the sugar though.
05:00:05 <shapr> the point and feathers stuff?
05:00:11 <shapr> yah, I agree
05:00:26 <Jolta> though I still don't see how they are useful except in the case where monads lead to space leaks (frp)
05:00:40 <Jolta> perhaps in some parsers?
05:01:08 <shapr> you could still say that the parsers are a case where monads could lead to space leaks
05:01:34 <Jolta> ok
05:01:42 <esap> jolta: with monads, it's quite hard to do introspection. Arrows make that a bit easier.
05:01:50 <Jolta> introspection?
05:02:03 <esap> jolta: inspecting the structure of the program.
05:02:07 <shapr> you can read properties of an arrow without executing that arrow
05:02:21 <andersca> hmm, looks like it's raining
05:02:34 <Jolta> okay, I see what introspection means. how is that easier with arrows?
05:02:36 <shapr> that's what makes the swierstra arrow parser combinators nice
05:02:54 <shapr> because you can't tell anything about a monad until you execute it by feeding it input
05:02:59 <esap> jolta: the lambda abstraction needed with monads hides information. This hiding does not happen with arrows.
05:03:14 <shapr> but the arrow combinators have static properties 'exported' ahead of time
05:03:17 <Jolta> ok. oops, got to pick up my laundry. brb.
05:03:26 <shapr> tvattstuga! yay!
05:03:29 <andersca> :)
05:03:29 <Jolta> jepp
05:03:52 <shapr> esap: I like describing that as instrospection, that's nifty
05:05:10 <esap> shapr: I thought that was the standard terminology.
05:05:33 <shapr> maybe so
05:05:54 <shapr> I hadn't thought of it like that :-)
05:06:26 <esap> ok, there is actually another concept that is also called introspection, related to "always" operator from modal logic. But I guess I shouldn't go that far off topic.
05:07:04 <shapr> %-)
05:07:20 <esap> ... even if modal logic is closely related to monads.
05:12:17 <Jolta> back
05:20:48 * shapr bounces happily
05:23:34 * Jolta is confused
05:23:41 <shapr> ?
05:24:13 <shapr> what's confusing?
05:24:28 <Jolta> eveything
05:24:43 <shapr> arrows?
05:24:43 <shapr> monads?
05:24:46 <Jolta> ever listened to te "chainsaw mazurka"?
05:24:50 <shapr> er, no?
05:25:06 <Jolta> http://www.dtek.chalmers.se/~d00jolta/motorsag.mp3
05:25:19 <Jolta> it's small, don't worry. =)
05:27:27 <Jolta> Micke B. Tretow runs amok with the sound effects.
05:42:05 <shapr> Jolta: ok, in response, you have to hear "mother russia" from http://www.mp3.com/orchard/
05:42:19 <shapr> it's a very cool hip-hop polka or something
05:42:54 <shapr> with a tiny bit of rap thrown in there, and it's good
05:43:36 <Jolta> sounds ... interesting. =)
05:43:37 <andersca> I assume you've all seen mchawking.com
05:43:45 <andersca> and plif.com too of course
05:43:51 <shapr> nah, what're those?
05:44:04 <shapr> whoa
05:44:12 <Jolta> plif isn't music, right?
05:44:19 <andersca> plif isn't music
05:44:52 <shapr> have you heard http://frontalot.com/ ?
05:45:04 <shapr> nerdcore/hiphop
05:45:06 <shapr> very funny stuff
05:45:19 <shapr> awesome lyrics
05:47:09 <Jolta> shapr: "mother russia" look nice, but i really can't be bothered to get an mp3.com account. =)
05:47:12 <opet> I saw some frontalot stuff on somesongs
05:48:15 <andersca> http://www.plif.com/archive/wc036.gif
05:48:54 <opet> andersca: lol
05:49:00 * shapr laughs
05:51:40 <shapr> http://plif.com/archive/wc056.gif
05:52:26 <andersca> and that's not the weirdest one by far :)
05:52:37 <andersca> http://www.plif.com/archive/wc094.gif for example
06:04:31 <andersca> hi Marvin--
06:07:06 <Marvin--> 'ello
06:11:18 <shapr> y0
06:14:09 <debug> hello
06:14:15 <shapr> hej
06:16:03 * shapr makes it from 1993 - 1999 with plif
06:16:07 * shapr explodes
06:16:53 * shapr boings
06:17:21 <shapr> hm,
06:17:29 <shapr> GHC cvs isn't compiling
06:17:44 <shapr> Convert.lhs in TH is unhappy
06:18:08 <delYsid> @fact TH
06:18:10 <lambdabot> Template Haskell
06:31:20 <Marvin--> meh, the tournament went straight to hell
06:31:32 <andersca> what tournament?
06:32:22 <Marvin--> oh, in a card game I play, we had a mini-tournament at cardcollector
06:34:04 <Marvin--> I ended up sixth out of ten (eight really, there were two newbies playing, they got places 9 and 10)
06:34:22 <andersca> oh
06:35:07 <Marvin--> I had three really sucky setups, one okay setup and one good setup (and I didn't need that one, since the guy I was playing had a bad setup that time)
06:35:36 * Marvin-- sighs
06:54:04 <delYsid> ugh, -Wall gives me quite some warnings...
07:03:35 <shapr> oh Marvin--, I found something that might apply to your master's project, but I've forgotten what it was
07:03:48 <shapr> hrm
07:04:46 <Marvin--> oh?
07:04:58 <shapr> I'll probably remember it...
07:05:16 <shapr> I think I read it in one of the arrow papers, but I'm not sure.
07:16:32 <Marvin--> ugh, now that pattern matching works, I'll have to tackle the issues of importing modules, HOF inlining and stuff
07:17:07 <shapr> sounds like fun
07:17:37 <Marvin--> not "stuff", "stuff" is among other things ensuring unique names :-/
07:17:47 <shapr> you can do that with ghc5
07:17:54 <shapr> there are the new 'unique name supplies'
07:18:06 <Marvin--> where?
07:18:15 <shapr> new in ghc5.04.2 I think
07:18:23 * shapr looks
07:18:34 <Marvin--> well, that's what we have in Debian, but what's the module called and where is it?
07:18:40 <shapr> checking :-)
07:19:13 <Marvin--> Data.Unique?
07:19:33 <shapr> might be
07:19:36 <shapr> that sounds right
07:19:56 <Marvin--> that's in IO, so I might as well stick to my state monad
07:20:16 <Marvin--> the problem isn't *generating* unique names, the problem is that they can't clash with stuff defined in the source files
07:20:39 <Vincenz_> Yow 
07:20:42 <Vincenz_> Hello Vincenz
07:20:44 <Marvin--> I could take the cowardly way and say that anything defined in the haskell source will have a h_ prefix though
07:20:48 <Vincenz_> Give me my nick back!
07:22:26 <Marvin--> shapr: data Name = Name String | Gen Int | Prefix String Name   might be nice to work with
07:22:54 * shapr is confused
07:23:01 <shapr> there are two Vincenzs?
07:23:57 <shapr> Vincenz: who are you?
07:24:43 <Marvin--> Vincenz_: ylu had me confused there, I first read cabal.telenet.be
07:24:49 <Marvin--> er, s/ylu/you/
07:24:54 <Marvin--> but, then, there is no cabal, so...
07:24:57 <shapr> I can't find the new unique supplies mentioned...
07:24:58 <shapr> hmm
07:25:36 <shapr> Marvin--: are you writing all this as GHC rewrite rules?
07:27:12 <Marvin--> shapr: no
07:27:27 <Marvin--> It's a plain ol' haskell program
07:27:47 <shapr> ok
07:28:02 <shapr> I've never seen programmer specified rewrite rules, just seen them mentioned in the GHC docs
07:29:47 <Darius> go wander the GHC sources
07:29:51 <shapr> yah, good idea
07:29:54 <shapr> hi Darius 
07:30:25 <shapr> I'm halfway through the second Yampa paper, looks like AFRP would be perfect for this RTS game
07:31:21 <Darius> I'm trying to figure out how to marshall a C union type into Haskell with or without GreenCard
07:31:39 <shapr> are you wrapping the sprite engine?
07:31:57 * shapr hasn't done any FFI stuff
07:32:15 <shapr> I think Igloo and hdaume have both done FFI stuff.
07:32:35 <Darius> yes
07:32:41 <shapr> Chilli is a good person to ask when he's here, I think he wrote the FFI interface.
07:32:49 <shapr> Darius: spiffy!
07:32:50 * shapr bounces happily
07:33:18 <sjj> shapr: howdy
07:33:44 <shapr> y0 sjj, wassup? how's the fuel-oxidizer treating you?
07:33:55 <sjj> :D hehehe.
07:34:14 <sjj> shapr: not much, got home from a 1-night holiday tonight ;)
07:35:00 <shapr> holidays... that's when you write fun code, yah?
07:35:23 <sjj> shapr: well there were no computers here .. oh, actually there was a laptop but I didn't really use it ;)
07:35:29 <Jolta|away> shapr: afrp for RST games looks like a good idea
07:35:32 <sjj> s/here/there/
07:36:00 <sjj> shapr: that's what I do on normal days ;P
07:36:07 <shapr> hm, me too
07:36:14 <shapr> Jolta|away: yah!
07:36:21 <shapr> Jolta|away: have you read the Yampa papers?
07:36:36 <Jolta> Yes, haskellwars is based on Yampa
07:36:42 <shapr> oh, spiffy
07:36:56 <shapr> do you guys have any code we could look at?
07:37:00 <sjj> shapr: so, have you enrolled in school yet?
07:37:05 <shapr> sjj: nah, not yet :-/
07:37:16 <Jolta> my friend Nibro mentioned the same idea about RTS to Henrik Nilsson the other day, and he looked confused. =)
07:37:19 <sjj> picked a course?
07:37:28 <shapr> Jolta: heh!
07:37:50 <Jolta> shapr: no public code yet, but it actually ran yesterday! it'll be public in a few weeks
07:37:50 <shapr> didn't he write the AFRP Space Invaders demo recently?
07:37:51 * shapr looks
07:37:55 <shapr> Jolta: yay!
07:38:10 <shapr> sjj: no, not that either, but I do know I want half math half CS
07:38:38 <sjj> shapr: do a double-degree ;)
07:38:52 <shapr> I'd be happy with just some book learnin
07:39:00 * sjj nods
07:39:48 <shapr> hm, where did that AFRP space invaders demo go?
07:39:57 <Jolta> never heard of it, sounds fun
07:40:23 <Jolta> i've only seen the soccer examples
07:40:41 <shapr> robot soccer is cool
07:42:57 <Jolta> a google search for "yampa space invaders" turns up a few results, but nohting about Henrik Nilsson
07:43:02 <shapr> the extraspiffy thing about AFRP is the reactive switching
07:43:36 <Jolta> http://mailman.cs.yale.edu/pipermail/yampa-users/2003-February.txt
07:43:37 <shapr> sorry, it was Antony Courtney
07:43:44 <Jolta> ^conatins the source code
07:43:48 <Jolta> contains, even
07:44:31 <Jolta> looks cool
07:45:34 <Igloo> Darius: Have you tried looking at c2hs?
07:46:57 <shapr> Igloo: haskell-libs-rtstrategy list is up on haskell-libs
07:47:10 <Igloo> Cool
07:48:38 * Igloo subscribes to developers while I'm there
07:49:03 <shapr> yah, I'd suggest all members of haskell-libs to subscribe to haskell-libs-developers
07:49:09 <shapr> (not that much has happened on that list so far)
07:49:29 <Igloo> I didn't know it existed  :-)
07:49:38 <shapr> it hasn't been very busy
07:49:49 <shapr> 6 messages in ... two years?
07:49:50 <Igloo> I haven't been active on it either, although I have helped fix bugs in some of the libraries on here
07:50:33 <shapr> you're mentioned several times in code I've committed
07:50:44 <Igloo> Oh, cool  :-)
07:51:59 * Igloo googles for Lynagh haskell-libs and get's Heff's thesis
07:52:04 <shapr> heh
07:52:19 <shapr> try igloo
07:52:27 <Darius> not yet
07:52:58 <Igloo> That got nothing - I wonder if google ignores sf.net
07:53:12 <shapr> I wonder if it's useful to index source code
07:53:51 <Igloo> Oh, no, it's just that the developers page doesn't have the project name on
07:54:01 <ibid> User-agent: Mediapartners-Google*
07:54:01 <ibid> Disallow:
07:54:12 <ibid> (from sf.net/robots.txt)
07:54:40 <Igloo> Well, it finds the project page if you google for haskell-libs
07:54:40 <ibid> (what is mediapartners-google?)
07:54:52 <opet> does google obey robots.txt?
07:55:00 <Darius> I'd hope!
07:55:18 <ibid> opet: probably, since otherwise there'd be a lot of bad feelings about it
07:57:41 <opet> yes, good point
08:06:49 <shapr> Igloo: Power Lines could be an interesting name
08:45:49 <Vincenz_> shapr: What do I do about Vincenz?
08:45:52 <Vincenz_> He stole my nick!!!
08:45:53 <Vincenz_> :(
08:46:19 <Vincenz_> Vincenz: ANSWER shapr!!! Who are you!?!
08:50:35 <Vincenz_> Anyone good at 3dimensional matrix calculations?
09:08:03 <shapr> boing
09:11:45 <Vincenz_> ping
09:11:49 <shapr> pong
09:19:40 <Vincenz_> grr
09:19:43 <shapr> ?
09:19:55 <Vincenz_> no 3d convolution function in matlab
09:20:36 <shapr> delYsid: hey, I added Read to the derived typeclasses for Castle, Square, and Kind
09:23:49 <shapr> hej dennisb 
09:24:01 * shapr bounces cheerfully
09:24:39 <shapr> ohh, so that's what the either function does
09:24:42 <shapr> wow, that's useful
09:27:44 <shapr> delYsid: that's a cool way to structure the main loop in play
09:28:28 <Marvin--> tax forms, oh what fun
09:28:37 <shapr> happily I can send mine back empty
09:28:46 <Marvin--> me too, it seems
09:28:58 <Marvin--> all the pre-entered data seems to be correct
09:29:35 <Marvin--> meaning I'll be getting back the gigantic amount of money ... 16 SEK
09:29:44 <shapr> wow
09:29:45 <shapr> that's huge
09:30:20 * shapr wonders if Board is an instance of Typeable
09:30:51 <shapr> can I do deriving Typeable?
09:30:54 * shapr tries
09:30:58 <Marvin--> actually, since my parents pay my real-estate tax, I'll get 353 SEK back ;)
09:31:06 <shapr> bzzt, I don't think so
09:31:15 <shapr> Typeable is not derivable
09:31:20 <Igloo> shapr: For the RTS or chess?
09:31:28 <shapr> for chess
09:31:55 * shapr semi-tasks happily
09:31:55 <Igloo> Oh, I see, you're trying to make lambdabot able to save chess state/
09:31:55 <shapr> right
09:32:01 <shapr> semitasking is doing several things badly
09:32:01 <Igloo> OK, *deconfuses*  :-)
09:32:07 <shapr> windows being the primary example of such
09:32:25 <Igloo> :-)
09:32:42 <shapr> y0 jeremy
09:36:02 <jemfinch> howdy, shapr.
09:36:16 <shapr> wassup?
09:36:26 <jemfinch> nothing much.
09:36:26 <jemfinch> just wrote a regexp engine in SML to prove a point.
09:36:36 <shapr> cool
09:37:30 <jemfinch> I need to write SMLUnit or something.
09:37:35 <shapr> good idea
09:37:41 <shapr> rewrite QuickCheck in SML
09:38:01 <shapr> you should be able to use HUnit as a good starting point for SMLUnit
09:38:25 <jemfinch> yeah, I was looking at that some.
09:38:25 <shapr> HUnit is nice
09:38:34 <shapr> QuickCheck is the coolest testing tool I've seen yet
09:38:41 <shapr> I strongly suspect there's some way to merge them
09:38:55 <shapr> Darius: you around?
09:38:59 <jemfinch> QuickCheck is pretty cool, but using an SML would be a bit more work, because QuickCheck uses some compiler output to determine what random generators to use.
09:40:23 <jemfinch> shapr: couldn't you just write a few test fixtures that used quickcheck, and reported their errors in hunit?
09:40:32 <shapr> interesting idea
09:40:32 <jemfinch> but yeah, I agree that quickcheck is quite cool.
09:40:33 * shapr writes that down for perusal at a later date
09:40:42 <shapr> I should make my emacs-wiki stuff public 
09:40:44 <shapr> there's some bizarre stuff in there
09:40:58 <jemfinch> somehow SF.net lost the statistics for my project.
09:41:09 <jemfinch> CVS statistics, that is.
09:41:10 <shapr> jemfinch: HUnit, QuickCheck, and Haddock should be merged with http://fit.c2.com/ to make a real testing and documentation framework
09:42:37 <shapr> can someone tell me how to make an instance of Typeable?
09:42:53 * shapr is confused
09:43:39 <Darius> shapr: uh now
09:43:54 <jemfinch> what's Typeable do?
09:44:09 <shapr> jemfinch: at the moment, lets me throw things into an IORef
09:44:20 <jemfinch> what's an IORef?
09:44:23 <jemfinch> @uptime
09:44:27 <lambdabot> Sorry, I don't know the command "uptime", try "lambdabot: @listcommands"
09:44:33 <shapr> jemfinch: it's the evil from outer space
09:44:34 <shapr> it's a variable
09:45:51 <shapr> jemfinch: shhh, don't tell anyone I'm using it.
09:45:51 <jemfinch> oh, it's evil imperative stuff, isn't it? :)
09:45:51 <shapr> shhhh!
10:01:22 --- topic: '["mo' nads than you","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","New Learning Haskell page - http://www.haskell.org/learning.html","GUI Demos - http://repetae.net/john/computer/haskell/gui/","Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144","New HaWiki - http://www.haskell.org/hawiki/RecentChanges"]'
10:01:22 --- topic: set by shapr on [Wed Apr 16 17:57:14 2003]
10:01:22 --- names: list (clog Radek esap tic wax jemfinch dennisb kani^^off Smerdyakov carol_ Vincenz_ Marvin-- cleverdra vardamir kunphuzil tetryl andersca shapr o3 mgoetze|away [g]dsx nbd galority ibid polli debug Fractal delYsid norpan Vincenz Darius buggy flippo sjj smkl lambdabot tmoertel Riastradh Logan Igloo jak opet skylan xkb SyntaxPolice_ tWip)
10:02:32 <shapr> yay, it compiles
10:08:39 * shapr does the rape'n'paste from KarmaModule to ChessModule
10:39:45 <shapr> oy
10:40:33 <debug> hm
10:40:49 <shapr> @yow
10:40:51 <lambdabot> Imagine--a WORLD without POODLES...
10:41:26 <shapr> wow
10:43:56 <shapr> @yow
10:43:57 <lambdabot> The entire CHINESE WOMEN'S VOLLEYBALL TEAM all share ONE personality --
10:43:57 <lambdabot>  and have since BIRTH!!
10:47:24 <debug> hehe
10:48:42 <shapr> @fortune
10:48:43 <lambdabot> Well, that's more-or-less what I was saying, though obviously addition
10:48:43 <lambdabot> is a little more cosmic than the bitwise operators.
10:48:43 <lambdabot>              -- Larry Wall in <199709051808.LAA01780@wall.org>
10:49:09 <esap> addition is really hard, I agree.
10:51:07 <esap> subtraction is easier, I guess :-)
10:58:25 * Darius listens to the soft susurration of GHC thrashing.
10:58:47 * shapr grins
11:06:51 * debug starts hacking on some haskell code
11:07:01 <shapr> debug: whatcha writing?
11:09:29 <funktor> hmm, ghc 5.02 doesn't know Text.Regex
11:09:37 <funktor> Whats the name for that there?
11:13:51 <debug> shapr: I'm going to search for better formulas for multiplication, I found a way to break O(n^(2log 3)) _if_ I can find a specific formula   (n = the size of the numbers being multiplicated)
11:14:08 <debug> it's just too much work to do by hand
11:15:34 <shapr> I've seen some discussion about that on kragen's lists
11:29:16 <debug> oh?
11:29:38 * debug just got the idea from his Algorithmics book, where they showed how to get from n^2 to n^(2log 3)
12:23:50 <shapr> how does Data.Maybe.maybe work?
12:25:21 <shapr> oh
12:25:58 <Riastradh> Isn't it just like 'maybe' from the Prelude?
12:26:11 <shapr> I think I just figured out how it works
12:26:43 <Riastradh> maybe f x Nothing = x; maybe f x (Just y) = f y
12:26:47 <Riastradh> Isn't that how it works?
12:27:00 <shapr> yup
12:32:30 <Darius> actually: maybe n j Nothing = n;maybe n j (Just y) = j y.  The parameters are switched.  Maybe, Either, and other functions like them are just folds over the data structure.
12:38:32 * shapr grumbles
12:38:59 <andersca> so
12:39:06 <andersca> I subscribed to haskell-cafe today
12:39:08 <shapr> yay
12:39:28 <shapr> I cannot seem to figure out how to stuff the new Board back into the IORef
12:40:19 <Riastradh> Um, 'writeIORef?'
12:40:28 <shapr> yah sure
12:40:31 <shapr> that sounds easy...
12:48:30 <shapr> ChessModule is in CVS, but it doesn't quite work...
12:48:41 * shapr goes off to play games for a bit
12:48:55 <Riastradh> It should print out the board, too!
12:49:00 <shapr> so fix it :-P
12:49:06 * Riastradh doesn't know how...
12:49:15 <shapr> I'll fix it when I get back
12:50:27 * Marvin-- sobs
12:50:38 <andersca> hey Marvin--
12:50:44 <andersca> still upset about the card game
12:51:33 <Marvin--> no no
12:51:47 <Marvin--> still disappointed though
12:51:55 <Marvin--> but right now I'm cursing over let floating and function renaming
12:52:35 <andersca> oh
12:52:59 <Vincenz_> GRR
12:55:36 <Darius> This binding code is going to be so so ugly.
12:56:02 <Marvin--> maybe I should just take the seriously dumb version and give each and every variable in the program a unique Integer identification
13:43:58 <delYsid> hmm, I choose Int as data type for rank and file.  they can only hold values between 1 and 8...
13:44:16 <delYsid> is there a more efficient representation, where the compiler could do optimisations?
13:45:22 <Riastradh> Premature optimisation is the root of all evil.
13:45:44 <Riastradh> Don't worry about it until you find that you need optimisation in that area.
13:47:07 <delYsid> hmm, right now I dont really know where to start to optimize...
13:53:17 <Riastradh> Profiling is where optimisation should start.
13:53:58 <delYsid> well, profiling shows that the single most used function consumes 50% time and alloc...
13:54:14 <Riastradh> What is that single most used function?
13:54:28 <delYsid> and that is one I cant really optimize and further
13:54:36 <delYsid> pieceAt
13:55:15 <Riastradh> OK, and you've profiled that function and found nothing that looks rather slow in it?
13:55:31 <Marvin--> hmm, maybe I can enumerate the functions based on their let-depth
13:58:28 <delYsid> Riastradh: The function is a three liner...
13:59:14 <Riastradh> What are those three lines?
14:02:39 <delYsid> pieceAt (Board wkss bkss _) sq = pieceAtWith White (pieceAtWith Black Nothing bkss) wkss
14:02:39 <delYsid>   where
14:02:39 <delYsid>   pieceAtWith c n [] = n
14:02:39 <delYsid>   pieceAtWith c n ((k,s):xs) | s==sq = Just (c,k)
14:02:40 <delYsid>                              | otherwise = pieceAtWith c n xs
14:07:12 <delYsid> ohh, come to think of it, this function traverses both wkss and bkss, even if it found the square in one list.
14:12:21 <delYsid>   pieceAtWith _ (Just n) _ = n
14:12:25 <delYsid> should help, right?
14:13:07 <Riastradh> I dunno, maybe.
14:13:10 <Igloo> Except you mean Just n on the right
14:13:22 <delYsid> ah, yeah
14:13:38 <delYsid> hmm, this should really be better now
14:25:23 * debug gives up for now
14:28:50 <Igloo> On what?
14:33:25 <debug> finding equations that will beat the karatsuba algorithm for multiplication of large integers
14:33:58 <debug> hugs kinda run out of memory :-/
14:34:40 <delYsid> hmm, still using 50% of time and alloc.
14:36:09 <kenikov> What's the best Haskell compiler for Mac?
14:36:45 * Riastradh uses GHC.
14:38:00 <kenikov> I'm at their site right now
14:38:23 <delYsid> hmm, I really thought that this should have made the situation better...
14:39:32 <kenikov> Riastradh - What release are you using?
14:39:49 <Igloo> Most of the time no piece will be found
14:39:55 <Igloo> So it'll go over both lists anyway
14:40:08 <Riastradh> 5.something.3 or something.
14:40:19 <Igloo> 04, probably
14:40:20 <Riastradh> 5.04.3
14:41:21 <kenikov> It looks like all the OS's have to download the same one.  I expected a specially made one for Mac OS X :(
14:41:54 <kenikov> Oh wait I see it...
14:49:46 <kenikov> Well, haskell is installed into my iBook right next to my Python 222 package.
14:52:00 <kenikov> or not.  
14:54:20 <kenikov> The package can not be opened...
15:09:19 <Marvin--> damn it's complicated with bound variables in haskell
15:11:53 <Darius> Use Joy
15:13:04 <Marvin--> Joy?
15:13:32 <Darius> http://www.latrobe.edu.au/philosophy/phimvt/joy.html
15:15:07 <Marvin--> pointless programming? oh what fun... but you see, my problem is that I have haskell as source language, and I'm transforming it to something else
16:33:45 <delYsid> yay! from 473 to 462 seconds execution time.
17:41:20 <delYsid> night all
