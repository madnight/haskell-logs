02:53:30 <Cryptor> is there any built in haskell function which is an efficient version of (\a b n -> (a ^ b) `mod` n)
06:26:59 <ludde> Is there some simple way to run a monad program N times and return a list of all outputs with N elements?
06:28:20 <ludde> I guess I could do: mapM (const f) [1..n]
06:28:26 <ludde> but is there some nicer way
06:30:18 <Marvin--> sequence (replicate n f)  perhaps
06:30:44 <andersca_> hi Marvin--, ludde
06:31:09 <Marvin--> hey andersca
06:31:59 <ludde> hi
06:32:02 <ludde> thanks
06:42:05 <Janni> hi
06:46:23 <Marvin--> hooray, I'm hacking myself around a hack
06:46:28 <Marvin--> is that a meta-hack?
06:49:55 <ludde> can I simply "getList n f = sequence (replicate n f)" in some way ?
06:50:05 <ludde> getList n = sequence . replicate n
06:50:15 <ludde> anything more
06:51:29 <Marvin--> what do you mean?
06:52:40 <ludde> like
06:53:03 <ludde> Can I simplify: \n -> sequence . replicate n
06:53:22 <Marvin--> not that I know
06:53:33 <ludde> ok
07:36:43 <liiwi> squish
08:15:28 <Igloo> ludde: That should be sequence . replicate I think
08:17:47 <Marvin--> Igloo: but replicate takes two arguments...
08:18:43 <Igloo> Oh, yes, I am making a schoolboy error  :-)
08:19:04 * Marvin-- grins evilly
08:27:22 <Marvin--> shapr
08:27:58 <shapr> hiya Marvin-- 
08:28:09 <shapr> had to pull one of my CPUs...
08:28:11 <shapr> :-/
08:28:15 <Marvin--> ick
08:28:25 <shapr> the fan died and everything overheated
08:28:31 <Marvin--> ouch
08:28:37 <Marvin--> it doesn't throttle?
08:28:51 <shapr> not enough it seems
08:29:08 <Marvin--> :/
08:35:24 <shapr> ok, it's march 2nd
08:35:41 <shapr> the IOHCC is OVER
08:38:18 <Marvin--> I've been way too busy to submit anything :(
08:38:45 <Marvin--> how many submissions were there?
08:41:05 <shapr> I think seven...
08:51:43 <shapr> good morning #haskell!
08:52:17 <Riastradh> Good day, good sir!
08:55:12 <shapr> hiya Riastradh, what's up?
08:55:33 <shapr> I have random broadcast advice for today... try this: http://c2.com/cgi-bin/wiki?SandglassProgramming
08:55:57 <shapr> seen deego
08:56:01 <shapr> , seen deego
08:56:11 <shapr> oops, wrong channel
09:02:18 <jlouis> shapr: interesting
09:03:09 <Smerdyakov> I often wonder if these bizarre techniques are only meant for people who don't speak programming natively. =)
09:03:26 <jlouis> hehe
09:03:30 <jlouis> I dont know
09:03:56 <jlouis> bizarre might be the correct term
09:04:38 <jlouis> I think they are trying to reinvent paper. In 5 years they will know that was what they missed
09:05:07 <Smerdyakov> What do you mean?
09:05:51 <jlouis> I program on paper first
09:06:06 <shapr> sandglass programming works nicely for me
09:06:14 <jlouis> anyway, that is not important\
09:06:23 <shapr> especially when combined with test driven development
09:06:41 <Smerdyakov> I program by programming, jlouis :P
09:07:50 <shapr> I like to try new ways of doing things, see how it compares with what I've done in the past.
09:08:02 <shapr> lots of neat stuff out there
09:09:06 <shapr> Smerdyakov: have you ever been in the flow of programming and noticed what the cycle is like?
09:09:47 <Smerdyakov> Yes, it's like this.
09:09:59 <Smerdyakov> I code for so long without eating that I can't get up anymore.
09:10:02 <Smerdyakov> Works quite well!
09:10:11 <shapr> anymore detail than that?
09:10:33 <shapr> do you write code that doesn't work just to get a general idea, and then test it until it work?
09:10:49 <shapr> do you write a test and then code until it works?
09:10:58 <shapr> do you just write code for days and come back and debug later?
09:11:47 <shapr> the point of SandglassProgramming and related pages is metacognition about programming, many times these bizarre techniques teach you more about how you do things
09:11:55 <shapr> and maybe give you insight into improving how you do things.
09:13:21 <shapr> in my opinion, this kind of stuff is good to know for effective programming
09:13:44 <shapr> Smerdyakov: what do you think?
09:14:31 <Smerdyakov> Oh, I definitely write code that doesn't work and hack at it until it does.
09:14:48 <Smerdyakov> I find it much more effective than natural language, visual schematic, or any other kind of programming.
09:14:52 <Smerdyakov> er, kind of planning
09:15:24 <shapr> I prefer writing a test, and then coding till that test works
09:15:36 <shapr> jlouis: how do you do it?
09:18:00 <shapr> anyone else want to chime in with their process?
09:19:08 <Marvin--> I tend to curse a lot
09:19:38 <Marvin--> mainly cursing over not having a decent test environment
09:19:42 <shapr> heh
09:19:46 <Marvin--> (especially when working on d-i)
09:19:49 <opet> I write things out on paper, mainly
09:20:09 <Marvin--> code, rebuild floppy, reboot vmware, curse, code, rebuild floppy, reboot vmware, curse, code, ... et.c.
09:20:12 <shapr> Marvin--: do you test things in haskell? hunit or qc?
09:20:20 * shapr laughs
09:21:29 <Marvin--> when doing haskell, I usually start by designing some data types, then start hacking, and just do some manual unit testing in ghci to convince myself I'm on the right track, until I've accumulated something that's big enough to do some acceptance testing on
09:22:16 <Marvin--> not very structured, but it works well enough
09:22:58 <shapr> opet: what sort of stuff do you write down?
09:23:31 <shapr> Marvin--: you make a difference between unit testing and acceptance testing, that's far more structured than most programmers I've seen.
09:24:11 <Marvin--> well, seeing as I don't do any unit testing in a structured way...
09:25:14 <shapr> most people don't
09:25:38 <shapr> I do unit-test-first, but I know of only one other person on irc who does
09:28:36 <Marvin--> shapr: do you have your Arbitrary instances for Core online somewhere?
09:29:02 <opet> shapr: everything :)
09:29:35 <opet> brain-storming type ideas firstly, general approaches
09:29:57 <opet> then data types and functions to deal with them in pig-code
09:30:07 <opet> as much as I can, basically
09:30:12 <shapr> Marvin--: sure, just a moment...
09:30:21 <Smerdyakov> I think I write down types and functions to implement my "brainstorming ideas" as I think of them.
09:30:23 <opet> so I end up with bits of paper blue-tacked all over the room
09:30:26 <Marvin--> oh heck, I need well-typed expressions too
09:30:32 <Smerdyakov> I don't know why you'd want an extra step with paper.
09:31:27 <shapr> Marvin--: http://kungens.kemi.fi/~shae/src/haskell/TestCore.hs
09:31:59 <shapr> computers do require that input be wellformed in a lot of different ways
09:32:09 <shapr> I like to draw pictures that describe relationships
09:32:20 <shapr> scribble thick underlines or scratch out parts that suck
09:32:36 <shapr> it's a lot more fun than typing into a buffer
09:33:07 <opet> Smerdyakov: I prefer paper for the same reason that it's easier to proof read a report on paper
09:33:33 <opet> it's easier to work without getting bogged down with computer stuff
09:33:37 <Smerdyakov> opet, OK. Maybe your memory doesn't work how mine works. I generally remember the complete layouts of programs for a few years after I write them. =)
09:33:43 <shapr> Marvin--: I realized that those Arbitrary instances are just the beginning of decent Core testing utilities.
09:33:53 <opet> Smerdyakov: you have a *much* better memory than me, then :)
09:34:52 <Marvin--> I think that it'll take more time to create generators for well-typed expressions in my language than it's worth for testing the few things I can think of
09:35:38 <shapr> I've been reading the core docs trying to figure out how to create well-typed expressions as well
09:35:46 <Marvin--> this isn't core, but still
09:36:11 <Marvin--> this is where generic programming is useful, Koen should do the dirty work so I can just write  deriving Arbitrary ;)
09:36:20 <shapr> heh
09:37:05 <shapr> speaking of which, do you know where John and Koen are going with QuickCheck?
09:38:55 <Marvin--> I've seen some of the stuff from QC2, like The Amazing Shrink Functoin
09:39:01 <Marvin--> s/oin/ion/
09:39:37 <Marvin--> but other than that, not really
09:39:39 <shapr> I still don't have a handle on the monadic stuff from QCm
09:40:26 <Marvin--> the "why" stuff might be QC2 too, I don't recall
09:42:07 <Marvin--> I think they've worked on making QC and HAT cooperate to do nifty things
09:43:59 <shapr> that would be very cool
09:49:29 <shapr> opet: what's pig-code?
09:49:37 <shapr> is that pseudo-code?
09:52:26 <opet> uhm yeah
09:52:28 <opet> sorry
09:52:35 <opet> like pig-english, but not :)
09:52:38 <shapr> heh, ok
09:56:15 <shapr> dnm: hiii
10:06:04 <shapr> any news in the #haskell world?
10:10:09 <ludde> I have a string. I want to keep everything up to the first 0. Is there some function for that?
10:10:18 <shapr> take while?
10:10:20 <shapr> drop while?
10:10:25 <shapr> drop until maybe?
10:10:30 <ludde> what is that?
10:10:47 <ludde> ah
10:10:47 <ludde> takeWhile
10:16:48 <ludde> bleh,
10:16:55 <opet> bleh indeed
10:16:59 <ludde> ghc crashes for me (it suddenly exits), how can I find out what's wrong?
10:17:17 <ludde> (it's probably my program that's buggy)
10:26:05 <shapr> does it do that repeatedly?
10:29:58 <ludde> yeah
10:42:03 <shapr> if you're using the latest version of GHC, you should send that an email and that program to ghc-users
10:46:12 <ludde> :( it's a pretty complex program, it's > 1500 lines
10:46:53 <ludde> how can I force evaluation of a String?
10:47:11 <shapr> what do you mean?
10:47:43 <ludde> I have this: mapM_ (\pkt -> putStrLn $ "C->S: " ++ (show pkt)) $ mkPackets s
10:48:10 <ludde> s is data from a socket (i'm using hGetContents)
10:48:28 <ludde> but I don't want it to enter putStrLn until mkPacket has read a whole packet
10:48:44 <ludde> mkPackets divides the input string into packets
10:49:03 <ludde> mkPackets :: String -> [String]
10:49:18 <ludde> do you understand what Im ean?
10:49:28 <ludde> I mean
10:53:46 --- topic: '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "New HTk release http://www.informatik.uni-bremen.de/htk/", "New DSP libs - http://users.snip.net/~donadio/haskell/", "IOHCC - http://iohcc.mgoetze.net/", "Gtk+HS 0.15.2 released"]'
10:53:46 --- topic: set by shapr on [Wed Feb 19 07:58:21 2003]
10:54:10 <Smerdyakov> I think that code will already do what you want, ludde.
10:55:43 <ludde> oh, really?
10:56:14 <Smerdyakov> Yes. What bad behaviour do you fear?
11:02:58 <ludde> I didn't want it to start printing "C->S:" before the whole packet was received.
11:09:01 <Smerdyakov> Whole packet is the whole string list or first string in the list?
11:11:00 <ludde> each string in the list is a packet
11:11:23 <ludde> what if only a partial part of a packet has been received.
11:11:36 <ludde> for example the first 20 bytes of a 30-byte packet
11:11:56 <ludde> won't haskell's laziness give those 20 bytes to anyone that requests them?
11:12:16 <ludde> and then block when it wants the 21:th byte
11:12:29 <ludde> 21:st
11:12:40 <Smerdyakov> Oooo, I see. That depends on how show works.
11:12:48 <Smerdyakov> If it needs the whole string, then there will be no problems.
11:13:05 <ludde> but what about putStrLn ?
11:13:21 <ludde> will it print "C->S" as soon as it realizes that there is an item in the list?
11:13:46 <ludde> what I really want to do is to put some "gate" in mkPackets, so it never returns incomplete packets
11:13:57 <Smerdyakov> Oh. Gotcha. I see that in general I don't know what I'm talking about.
11:14:03 <ludde> it should wait before the whole packet has been received before it starts outputting stuff
11:41:25 <ludde> main = do
11:41:25 <ludde> 	list <- listenOn $ PortNumber 1235
11:41:25 <ludde> 	(cli,_,_) <- accept list
11:41:25 <ludde> 	str <- hGetContents cli
11:41:25 <ludde> 	let ln = map force $ words $ filter (\a -> a /= '\r' && a /= '\n') str
11:41:26 <ludde> 	mapM_ (\a -> do putStrLn "{"; putStrLn $ "C->S: " ++ show a; putStrLn "}") ln
11:41:44 <ludde> err, forget about that map force $ part
11:41:47 <ludde> but.
11:42:11 <ludde> this program is supposed to split up the input into words.
11:42:25 <ludde> for each word, it prints "{ C->S: the word }"
11:42:48 <ludde> but I don't want it to start printing { C->S: until at least a whole word has been received.
11:43:37 <ludde> any clues on how to accomplish this?
11:49:43 <ludde> I guess I could do this:
11:49:43 <ludde> forceListElems :: Eq a => [a] -> [a]
11:49:43 <ludde> forceListElems (a:as) = if a==a then (a : forceListElems as) else (a : forceListElems as)
11:49:43 <ludde> forceListElems [] = []
11:49:59 <ludde> but it really feels like a hack
11:50:03 <ludde> and it requires Eq a
11:50:13 <Marvin--> if you want seq, why don't you use seq?
11:51:50 <ludde> how would I use seq?
11:51:55 <ludde> I don't understand how to use it.
11:52:10 <andersca_> seq is really easy
11:52:25 <ludde> how would I implement forceListElems with seq?
11:53:39 <andersca_> http://www.zvon.org/other/haskell/Outputprelude/seq_f.html
11:55:08 <ludde> forceListElems (a:as) = (a `seq` a) : forceListElems as
11:55:13 <ludde> forceListElems [] = []
11:55:14 <ludde> would that work?
11:55:50 <ludde> no it wouldn't, or would it :(
11:56:06 <ludde> hmm
11:56:16 <ludde> a `seq` (forceListElems as)
11:56:20 <ludde> err
11:56:21 <ludde> a `seq` (a : forceListElems as)
11:56:26 <ludde> maybe that would work
11:57:26 <ludde> hrm
11:57:26 <ludde> WARNING: ignoring polymorphic case in interpreted mode.
11:57:26 <ludde>    Possibly due to strict polymorphic/functional constructor args.
11:57:26 <ludde>    Your program may leak space unexpectedly.
11:59:21 <Igloo> It's just alerting you to a ghci known bug
12:24:33 <ludde> i've disabled buffering
12:24:42 <ludde> when I use hPutStr to put something to the socket
12:24:47 <ludde> it sends two TCP packets
12:24:56 <ludde> the first packet contains only the first byte of the data that i'm sending
12:25:03 <ludde> the second packet contains the remaining data
12:27:04 <Igloo> And?
12:31:15 <ludde> well, it's pretty silly to split it up into many packets, isn't it?
12:32:29 <ludde> funny, it seems like it's ok to enable buffering, last time i tested it wouldn't work properly
12:51:16 <Igloo> It's probably due to laziness
12:51:38 <Igloo> You can see similar things if you strace programs that print output - particularly h* commands IIRC
14:31:49 <Janni> re
14:42:43 <shapr> yow
14:47:02 <shapr> hiya Pseudonym 
14:47:55 <Pseudonym> G'day.
14:47:59 <shapr> wasssup?
14:48:53 <Pseudonym> Nothing much.
14:48:57 <Pseudonym> Thankfully.
14:49:09 <shapr> slow day after last week?
14:49:15 <Pseudonym> So far, yes.
14:52:37 * Pseudonym did too
14:53:05 <Pseudonym> Release has been shippec.
14:53:13 <Pseudonym> So I feel much better.
14:54:13 <shapr> so what do you do today? sit around, do nothing? :-)
14:54:29 <Pseudonym> Now I do the stuff I want to do.
14:54:34 <Pseudonym> Rahter than the stuff I had to do.
14:54:39 <shapr> aha
14:55:00 <Pseudonym> Our product has a scripting engine in it.  I get to coverage test it.
14:55:13 <Pseudonym> Which is good.  I like hacking compilers.
14:56:14 <Smerdyakov> Hooray. The Man lets you do something fun!
14:56:36 <shapr> I am the man... (I'm self-employed)
14:56:43 <shapr> I'm self-employed twice over
14:57:09 <Pseudonym> You are The Man?!
14:57:15 <Pseudonym> Rage Against Shapr!
14:58:07 * shapr laughs
15:13:11 <jlouis> how is it that fixed point iteration reaches the least fixed point and always does? I am on the hunt for a proof here
15:13:28 <jlouis> (or the greatest, if you iterate the other way)
15:13:45 <jlouis> assuming the function is monotone of courcse
15:14:19 <Pseudonym> Let me see if I remember the proof.
15:15:26 <jlouis> g9
15:15:28 <Pseudonym> Basically, you prove that the fixed point at the end of the ascending Kleene chain is less than any other fixed point.
15:15:45 <Pseudonym> You also need to prove that the least fixed point is unique.
15:15:51 <jlouis> yes, I can agree on that
15:16:25 <Pseudonym> Incidentally, there is no "greatest fixed point" in general.
15:16:51 <Pseudonym> There is a fixed point which is the greatest lower bound of all of the locally maximal fixed points.
15:17:00 <Pseudonym> Was that what you meant?
15:17:52 <jlouis> nope, when you iterate a set equation you have to begin with the complete set and remove elements, reaching the ''greater'' fixed point
15:18:01 <jlouis> or Appel does not know what he is talking about
15:18:12 <Pseudonym> I think it depends on the program.
15:18:19 <Pseudonym> In _general_ there is no greatest fixed point.
15:18:35 <jlouis> ok
15:18:44 <Smerdyakov> I think jlouis is just being terribly sloppy with stating the question.
15:18:47 <Pseudonym> And even if there is, it can take a transfinite number of steps to find it.
15:18:55 <Pseudonym> Oh, OK.
15:19:14 <Smerdyakov> I think jlouis is talking about compiler dataflow analysis iterative algorithms, from Appel's textbook.
15:19:19 <Smerdyakov> They operate on finite lattices.
15:19:22 <Pseudonym> Oh...
15:19:24 <Pseudonym> I see.
15:19:27 <Smerdyakov> So there's not really any mystery about how it works.
15:19:27 <Pseudonym> That makes sense.
15:19:31 * Pseudonym nods
15:19:36 <Smerdyakov> Making jlouis's question confusing.
15:20:00 <Pseudonym> I thought you were talking about the general theory of program interpretation.
15:20:37 <jlouis> Smerdyakov: well, you are right.
15:20:40 <jlouis> ah, semantics has them too yes. Sorry
15:20:40 <Pseudonym> Oh, I remember.
15:20:56 <Pseudonym> You need to show that all fixed points are greater than every step on the AKC.
15:21:10 <jlouis> I still dont get it how you can ensure that the least fixed point exists, is uniqu.
15:21:13 <Pseudonym> Hence they are also greater than the top of the chain.
15:21:13 <jlouis> AKC?
15:21:19 <Pseudonym> ascending kleene chain
15:21:21 <jlouis> Kleene Chain?
15:21:26 <jlouis> yes
15:21:39 <Pseudonym> Let's have a think...
15:22:36 <jlouis> assuming a monotonically increasing function you can get part of the way
15:22:40 <Pseudonym> Sure.
15:23:15 <jlouis> since we have X subset Y => F(X) subset F(Y)
15:23:35 <jlouis> and S = F(S) for same fixed point S
15:24:11 <Pseudonym> It's obvious that 0 subset S for any fixed point S.
15:24:17 <Pseudonym> Ah, of course.
15:24:21 <Pseudonym> Then F(0) subset F(S)
15:24:31 <Pseudonym> And so on.
15:24:37 <jlouis> taking the empty set 0, we can derive 0 subset S => F(0) subset F(S) = S
15:24:40 <jlouis> yes
15:24:45 <Pseudonym> That's it.
15:24:54 <jlouis> F(0) subset S then
15:25:06 <jlouis> so we have the ascending kleene chain
15:25:11 <Pseudonym> And then you apply continuity.
15:25:24 <jlouis> do tell
15:25:25 <Pseudonym> Because lfp F = lub { 0, F(0), F(F(0)), ... }
15:25:43 <Pseudonym> So you need the continuity property.
15:25:47 <Pseudonym> In general
15:25:48 <jlouis> lub = lowest upper bound?
15:25:55 <Pseudonym> Yes.
15:26:10 <jlouis> ah, magic
15:26:12 <Smerdyakov> We're talking about functions with finite domains and ranges, Pseudonym.
15:26:17 <Pseudonym> Oh, OK.
15:26:26 <Smerdyakov> Again, this is all in the context of compiler dataflow analyses.
15:26:30 <Pseudonym> Sure.
15:26:36 <Smerdyakov> The sets in question are sets of live variables, etc.
15:26:42 <Pseudonym> Although, some analyses make sense over non-finite domains.
15:26:52 <Smerdyakov> They're not in Appel's book, though. =)
15:26:54 <Pseudonym> Interval analysis, for example.
15:26:59 <Pseudonym> Or conditional constant propagation.
15:27:08 <jlouis> hehe, evil
15:28:02 <Pseudonym> The analyses are still finite.
15:28:07 <jlouis> even if it is finite, I think it is close to solved
15:28:18 <Pseudonym> Because you can alwayss stop at a conservative approximation.
15:29:10 <jlouis> ok, I really wish I had more knowledge with the math behind it. It is much easier to comprehend that way
15:29:30 <jlouis> I cannot deduce parts of what he is trying to say sometimes (Appel)
15:29:49 <Smerdyakov> I don't remember their being any complex, general purpose mathematical result about solutions to dataflow equations in the book....
15:29:54 <Smerdyakov> Maybe you're thinking about it too hard =)
15:30:00 <Smerdyakov> s/their/there
15:30:44 <Pseudonym> Ah, I love homework questions.
15:30:45 <Smerdyakov> Speaking of Appel, I'm meeting with him a week from tomorrow when I visit Princeton. =)
15:30:50 <Pseudonym> Oooh, cool. :_)
15:31:06 <Pseudonym> Is this the Tiger book you're reading, BTW?
15:31:13 <Smerdyakov> I don't know if I should consider going there because of the low prestige level of the CS department, though.
15:31:15 <Smerdyakov> Yes
15:31:23 <Pseudonym> Good book.
15:31:29 <Pseudonym> The second edition is, anyway.
15:31:36 * Pseudonym thought the first didn't contribute much
15:31:37 <jlouis> the homework questions are done. Now it is understanding of the mathematical concepts...
15:31:51 <Pseudonym> No, I'm referring to this on the mailing list:
15:31:55 <Pseudonym> > Is identity function the only meaningful function one can write
15:31:55 <Pseudonym> > without constraining the type variable using a typeclass? If not,
15:31:55 <Pseudonym> > could you please give a counter-example?
15:32:09 <Pseudonym> Not you.  Your questions are good. :-)
15:32:43 <Smerdyakov> That sounds like... a stupid question. Is it?
15:32:48 <Pseudonym> Yes.
15:32:57 <jlouis> hehe
15:33:00 * Pseudonym will suggest he reads "Theorems for Free!"
15:33:44 <jlouis> hmmm, given a finite set, we cannot take lub on the AKC, but will the result then be a conservative approximation?
15:34:04 <Pseudonym> Given a finite set, the AKC will finitely terminate.
15:34:13 <Pseudonym> You'll come to a point where no more can be added.
15:34:14 <jlouis> yes, that is easy to prove
15:34:32 <Smerdyakov> All of the dataflow analyses in that book give conservative approximations, jlouis.
15:34:56 <Smerdyakov> Finding exact answers is undecidable....
15:35:02 <Smerdyakov> Is this the source of your confusion?
15:35:13 <jlouis> probably
15:35:19 <Smerdyakov> OK.
15:35:43 <Pseudonym> Basically, you set up the problem so that any fixed point is conservative.
15:35:53 <Pseudonym> Sorry, so that the least fixed point is conservative.
15:36:05 <jlouis> ah, ok
15:36:09 <Pseudonym> Any point on the AKC is conservative, in fact.
15:36:13 <Pseudonym> I think.
15:36:15 <Pseudonym> No.
15:36:18 <Pseudonym> Sorry.
15:36:25 <Pseudonym> Anything above the least fixed point is conservative.
15:36:33 <jlouis> yes
15:36:34 <Pseudonym> Caffeine hasn't kicked in yet.
15:36:39 <jlouis> hehe
15:37:10 <jlouis> I tried to show that the fixed point were unique. I think I need more assumptions though
15:37:22 <Pseudonym> I don't think they are.
15:37:31 <jlouis> ah, might explain
15:38:13 <Pseudonym> Over infinite lattices, you get some cool results.
15:38:23 <Pseudonym> Like, finding the greatest fixed point can require transfinite induction.
15:38:26 <Pseudonym> Very trippy.
15:39:15 <Pseudonym> First you go an infinite number of steps, then you go an infinite number of more steps, then one more step and you're done.
15:39:30 <jlouis> but will we always reach the least fixed point by the above F(F(F...
15:39:35 <Pseudonym> Yes.
15:40:11 <jlouis> since if S is not the least fixed point, we will stop sooner on the ''AKC'' and that set S', must then be the least fixed point?
15:40:33 <jlouis> still S is a set
15:40:45 <jlouis> a finite set indeed
15:41:20 <Pseudonym> Yes, the proof depends on S being finite.
15:41:28 <Pseudonym> Though it can be extended to the infinite case.
15:41:49 <jlouis> with the lub?
15:41:54 <Pseudonym> Right.
15:42:00 <jlouis> bingo
15:42:19 <Pseudonym> An example of where it's important is if you work over real numbers.
15:42:30 <jlouis> indeed
15:42:51 <Pseudonym> The Newton-Raphson method for finding square roots always maps rationals to rationals.
15:43:01 <Pseudonym> But the least fixed point is irrational.
15:43:05 <Pseudonym> In general.
15:43:15 <jlouis> that explains
15:43:16 <jlouis> thanks
15:43:19 <jlouis> I see the point
15:43:32 <Pseudonym> As it turns out, IEEE floats are all rational.
15:43:36 <Pseudonym> So the point is moot.
15:43:56 <jlouis> but a bit interesting still, hehe ;)
15:44:16 <Pseudonym> Sure.  And if you're using Haskell Rationals, the analysis holds.
15:44:35 <jlouis> Oh, I am an SML guy ;)
15:44:39 * jlouis hides
15:44:42 <Pseudonym> That's okay.
15:44:49 <Pseudonym> I reckon all declarative programmers are welcome here.
15:44:59 <jlouis> But I know what Haskell rationals are though
15:45:03 <Pseudonym> Sure.
15:46:11 <jlouis> since if S is not the least fixed point, we will stop sooner on the ''AKC'' and that set S', must then be the least fixed point <--- is that the reason why it must the least one?
15:46:18 <jlouis> I didnt get it, sorry..
15:47:38 <Pseudonym> Uhm...
15:47:52 <Pseudonym> I thought we just proved that.
15:48:00 <Pseudonym> Let S be a fixed point.
15:48:06 <Pseudonym> Then 0 <= S
15:48:11 <Pseudonym> Then F(0) <= F(S)
15:48:16 <Pseudonym> Which implies that F(0) <= S
15:48:20 <Pseudonym> And so on.
15:48:29 <Pseudonym> Therefore every point on the AKC is <= S.
15:48:39 <Pseudonym> And hence the top of the chain is <= S too.
15:49:04 <Pseudonym> Since S was an arbitrary fixed point, and the top of the chain is a fixed point, the top of the chain must be the least fixed point.
15:51:57 <jlouis> But if L is the least fixed point, we cannot have the top of the chain as: ... L <= S' <= S?
15:52:08 <jlouis> where S is another fixed point?
15:52:31 <Pseudonym> Where S' is the top of the chain?
15:52:37 <jlouis> I went your way, but got stuck when thinking about that problem
15:52:39 <jlouis> Pseudonym: yes
15:52:42 <Pseudonym> Hmmm.
15:52:59 <Pseudonym> The proof that the top of the chain is the least fixed point goes like this:
15:53:02 <Pseudonym> First, it's a fixed point.
15:53:11 <jlouis> yes
15:53:16 <Pseudonym> Second, it's less than or equal to an arbitrarily chosen other fixed point.
15:53:21 <jlouis> yes
15:53:25 <jlouis> ah
15:53:25 <jlouis> hehe
15:53:34 <Pseudonym> Hence it's the lfp.
15:53:42 <jlouis> bingo
15:53:45 <Pseudonym> Right.
15:54:26 <jlouis> I got enlightenment suddenly. Now it makes sense. I just needed that argument to hammer the nail to the board
17:35:03 <shapr> must sleeep...
20:59:44 <inkedmn> evening friends
21:00:42 <inkedmn> ok, i wrote this haskell module FOREVER ago...
21:00:44 <inkedmn> http://www.codeexamples.org/cgi-bin/c2h/hl.cgi?filename=ISBN.hs&type=HTML-detail-nc
21:00:57 <inkedmn> and i can't for the life of me remember how to run it once i've loaded it into hugs
21:01:20 <flippo> evaluate an expression?
21:01:32 <inkedmn> yeah
21:01:50 <flippo> you can type in the expression to evaluate, after loading
21:03:28 <inkedmn> ok, so my prompt in haskell says "ISBN>"
21:03:46 <inkedmn> and the expression that actually takes the argument and evaluates it is "main"
21:04:00 <inkedmn> but when i do "main <some isbn number>", i get an error
21:04:05 <inkedmn> and this code worked before
21:04:45 <inkedmn> ok, so i'm a retard
21:04:52 <inkedmn> apparently the argument needs to be in quotes
21:04:57 <inkedmn> now it works :)
21:06:28 <flippo> checkISBM "somecrud"
21:07:31 <inkedmn> pretty much, yeah
21:24:50 <inkedmn> man, i can never think of anything to write...
22:17:49 * inkedmn is away: GONE
23:12:26 <kawfee> is there a haskell plugin for vi ?
23:37:47 <kawfee> hi Marvin-- 
23:37:54 <Marvin--> morning
23:43:30 <kawfee> parsing spaces around ( ) is a pain
23:44:18 <Marvin--> why so?
23:45:35 <kawfee> well I have code that I think should work but everytime I think I have it indented correctly the evaluator spits out errors, if I could get that to work I still would like to have the parser fail if it doesn't encounter a () which it doesn't
23:46:36 <kawfee> may I paste?
23:49:31 <kawfee> maybe I just don't know what I am doing
23:49:38 <kawfee> I thought that the +++ lined up under one another
23:51:15 <kawfee> I've got it working for most spaces
23:55:29 <Marvin--> if it's not too much, go ahead and paste
23:55:44 <Marvin--> I thought there was some kind of 'spaces' parser that matched zero or more space characters
23:56:37 <Marvin--> what parser lib are you using?
23:58:22 <Marvin--> brb, gotta go fetch my laundry
