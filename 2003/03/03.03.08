00:09:53 <shapr> whee
01:07:11 <shapr> whee
01:07:20 * shapr reads about implicit parallelization
01:38:45 * shapr puts a bit of fire into the pragmatic programmers list
04:45:45 <Arnia> Hey all
05:41:59 <Janni> hi
05:44:33 <Arnia> Hey
05:45:10 <Janni> Arnia: new here or not very active?
05:45:46 <Arnia> Not very active... have lots of work to do mostly :(
05:49:32 <Arnia> I'm a big FP fan though and am doing my third year project in haskell
06:00:11 <andersca> hello
06:09:38 <Arnia> Wow, arrows are my friend
06:10:07 <Arnia> I wonder how long it will be before arrows are included in GHC
07:15:58 <Janni> re
07:40:19 <Janni> I'm having problems with I/O. How can I for example get lines until the input consists of a single "."?
09:00:44 <Janni> re
09:28:17 <Janni> I've got two IO Strings. How can I concatenate the Strings yielding an IO String
09:28:20 <Janni> +?
09:28:56 <Janni> ahh, I think I got it. wait...
09:29:09 <esap> janni: just evaluate them and concatenate the results.
09:29:41 <esap> janni: IO String is a type for "I/O actions returning String".
11:02:30 <shapr> whee
11:03:19 <opet> whee!
11:11:51 <shapr> hiya
12:28:41 <shapr> wow
12:28:44 <shapr> this is very cool
12:28:46 <shapr> http://www.cs.chalmers.se/Cs/Research/Language-technology/morphology.html
12:29:20 <shapr> what's a xerox finite state transducer?
12:29:59 <shapr> it already does swedish morphology checking, w00
12:30:32 * shapr tries
12:30:47 <shapr> checking my swedish homework with a haskell program would peg my niftyness meter.
12:31:50 <shapr> hey, I had a strange thought today
12:32:07 <shapr> Template Haskell can hook me up with "deriving XML"
12:32:58 <shapr> so I was thinking about how compilers and parsers work.. is it too crazy to think of "deriving i386" or "deriving PPC" ?
12:33:20 <Smerdyakov> Yes
12:33:33 <shapr> could I write compilers and parsers as something like implementations of Read and Show for datatypes?
12:33:43 <shapr> Smerdyakov: why?
12:34:04 <Smerdyakov> Because I said so
12:34:11 <shapr> ah, excellent reason of course..
12:34:21 <shapr> any other opinions?
12:34:52 <Smerdyakov> Yeah. I think your crazy idea wouldn't bring any new utility.
12:34:56 <buggs> shapr, finite state transducer is the main component of an algorithm for morphologcal parsing based on finite state automata
12:35:08 <shapr> buggs: ok, thanks
12:43:24 <shapr> Smerdyakov: any reason you think that?
12:43:55 <Smerdyakov> Any reason you think otherwise?
12:44:14 <shapr> what are the good or bad points of a typeclass implementation of a compiler or parser?
12:44:55 <Smerdyakov> Good points just look like amusing some fans of formal logical acrobatics
12:45:27 <shapr> have you worked with haskell typeclasses much?
12:46:03 <Janni> "And now I rub my eyes, for he has returned."
12:46:05 <shapr> who?
12:46:10 <Janni> me :)
12:46:24 <shapr> hi Janni!
12:46:27 <Smerdyakov> No
12:46:31 <Janni> Lyric of a song, which is actually playing
12:47:30 * Janni is discovering the power of monads
12:47:34 <shapr> yay monads!
12:48:38 <jlouis> uniqueness typing!
12:50:02 <Janni> i'll post the code of a function which gets a string from a server. every message has a preceding "abc " where abc is an error code. if b is 0, the message is complete, if b is 1 another line is following.
12:50:22 <Janni> i want you to see the code and see if it's ok, or if I'm not getting the point.
12:50:26 <Janni> cGetResponse :: Handle -> IO String
12:50:26 <Janni> cGetResponse server = do
12:50:26 <Janni>         line <- hGetLine server
12:50:26 <Janni>         case line !! 1 of
12:50:26 <Janni>                 '0' -> return $ drop 4 line
12:50:27 <Janni>                 '1' -> do
12:50:29 <Janni>                         response <- cGetResponse server
12:50:31 <Janni>                         return $ drop 4 (line ++ response)
12:51:34 <Janni> I'm especially not sure if I need the do-statements...
12:53:59 <Janni> I mean, it works, but can it be don't more elegant, somehow?
12:54:05 <Janni> s/don't/done
12:56:06 <shapr> Smerdyakov: what's a better way?
12:56:24 <Smerdyakov> shapr, the way it's done now?
12:56:46 <shapr> nah, I don't think so.
12:58:00 <Janni> s/elegant/elegantly (or elegant way)
12:58:06 * Janni is working on his English
13:00:03 <Janni> and I'm thinking about how I could use "interact" on this function chat :: Handle -> String -> IO String
13:00:03 <Janni> chat server str = hPutStrLn server str >> cGetResponse server
13:00:25 <Janni> (no, I'm not writing an IRC client or s.th.)
13:04:15 <shapr> so, the way I understand unified types should be written is data Cows = Hereford | Angus | Hindu
13:04:38 <shapr> something like "data Type = Instance1 | Instance2 | Instance3"
13:04:41 <shapr> does that seem right?
13:05:49 <Janni> shapr: yes. just like "data Bool = True | False"
13:06:09 <shapr> right, I thought so.. thanks 
13:10:49 <Janni> err, I'm not so sure if it's right what I (and you) wrote
13:11:53 <Janni> AFAIRead (right now) a unified type system is based on one unified superclass
13:12:15 <Janni> and googling for Haskell + unified type doesn't really yield many results
13:13:05 <shapr> well, you answered my question
13:14:47 <Janni> good. but for completion: I guess in Haskell this could be called "non-abstract data type", but maybe there's another (shorter) expression
13:17:36 <shapr> I thought unified type meant something like "data Values = Char | Int"
13:17:46 <shapr> where you stuck two or more types together to make an ubertype
13:19:09 <shapr> ok, I think I found my question...
13:19:10 <Janni> nope, thats wrong. but maybe you heard s.th. of abstract data types like
13:19:16 <shapr> data MetaSyntacticVariable = Foo | Bar | Baz | Quux
13:19:18 <Janni> data Maybe a = Just a | Nothing
13:19:20 <shapr> data Variables = MetaSyntacticVariable | Actual
13:19:30 <shapr> y :: Variables
13:19:30 <shapr> y = Foo
13:19:33 <shapr> that fails.
13:20:14 <shapr> what's up with that?
13:20:14 <Janni> yeah, but now you understood why (didn't you?)
13:20:19 <shapr> no :-)
13:20:21 <shapr> maybe
13:20:26 <Smerdyakov> More like data Variables = MetaSyntacticVariable of MetaSyntacticVariable | Actual of Actual
13:20:45 <Smerdyakov> y = MetaSyntacticVariable Foo
13:20:57 <shapr> eh?
13:21:06 <Smerdyakov> The of's probably shouldn't be there.
13:21:17 <Janni> shapr: it fails becaus on the right side of non-abstract data types there are constructors, not types
13:21:45 * shapr looks at that
13:21:53 <Janni> shapr: think of "data Bool = True | False". True and False are constructors. there is no type True
13:22:18 <Janni> Smerdyakov: don't confuse him with abstract data types yet
13:22:20 <shapr> ok, lemme try that with characters then...
13:22:33 <Janni> Smerdyakov: I'd like to do that :)
13:23:56 <Janni> shapr: forget involving types behind the '=' in the data-statement until you understand the non-abstract data types
13:24:10 <shapr> I thought I did
13:24:13 <palomer> constructors are simply a way to differentiate when matching
13:24:14 <shapr> obviously not :-)
13:24:35 <shapr> I'm trying to construct a type tree for my rfc822 parser
13:24:43 <shapr> and at some point it said that I had declared stuff twice
13:24:44 <Janni> shapr: then you should understand "Maybe a = Just a | Nothing"
13:25:01 <shapr> that's when I realized I didn't understand this stuff as well as I thought
13:25:05 <Janni> or "Maybe Int = Just Int | Nothing"
13:25:56 <Janni> (these are abstract data types, btw.)
13:26:02 <shapr> ok, I think I understand that.
13:26:18 <Janni> shapr: oh. then you undersand everything :)
13:26:49 <Janni> shapr: there's nothing more than that but using more constructors and data type parameters
13:27:00 * shapr considers that
13:27:10 <Janni> like: data Point a = Point a a
13:27:30 <Janni> (notice, that the data type and the constructor have the same names (that's allowed))
13:27:32 <shapr> I understand that
13:28:14 <Janni> shapr: then you finally only have to distinct between using data types or values as parameters
13:29:26 <shapr> hm
13:29:29 <Janni> but it's simple too. for any existing "a"s or "b"s (abstract types (like in my Point-example)) always use type names in type signatures otherwise use values
13:29:36 <shapr> right, I see
13:29:46 <shapr> myPoint :: Point Int
13:30:11 <Janni> but "f = Point 5 5", right
13:30:49 <Janni> shapr: and you know how to use pattern matching on ADTs (abstract data types) too...
13:30:50 <shapr> yes
13:31:14 <Janni> f (Point 5 5) = "this points is on 5 5"
13:31:19 <Janni> f _ = "this point not"
13:31:35 <Smerdyakov> Janni, you're calling Point an abstract data type?
13:31:49 <Janni> Smerdyakov: yes
13:32:03 <Smerdyakov> I wouldn't say it's abstract when you have access to the constructor.
13:32:07 <Janni> it's an data type with a type parameter -> ADT (or am i not right?)
13:32:21 <Smerdyakov> Not in ML terminology. I don't know if Haskell is different.
13:32:30 <Janni> _
13:32:45 <Smerdyakov> A abstract type is usually a type whose existence you know, but you know nothing about its representation.
13:32:54 <shapr> data Point a = Point a a deriving Show
13:32:54 <shapr> myPoint :: Point Int
13:32:54 <shapr> myPoint = Point 1 1
13:32:54 <shapr> addPoints                             :: Num a => Point a -> Point a -> Point a
13:32:54 <shapr> addPoints (Point x1 y1) (Point x2 y2) = Point (x1+x2) (y1+y2)
13:32:55 <shapr> -- addPoints myPoint myPoint
13:32:59 <Janni> Smerdyakov: I guess, it is. It's like "f :: a -> b -> (a, b)", which is an abstract function
13:33:03 <shapr> I just wrote that to see if I really do understand it :-)
13:33:18 <shapr> and *ProtoUnifiedType> addPoints myPoint myPoint
13:33:18 <shapr> Point 2 2
13:33:26 <Janni> yay! :)
13:33:53 <Smerdyakov> Janni, I've never heard anything called an "abstract function" before....
13:34:43 <shapr> hi palomer, how's Haskell treating you?
13:35:24 <palomer> I received my midterms back, it was a sign I should lay back on the learning new languages
13:35:24 <jlouis> Smerdyakov: me neither
13:35:25 <Janni> Smerdyakov: there are concrete functions/{data types} and there are abstract ones. concrete means that the type is known and abstract means that the type is variable. that's what my idea of it, but I might be wrong
13:35:28 <palomer> and start learning some school
13:35:44 <palomer> god I hate databases/operating systems
13:35:49 <jlouis> Janni: polymorphic
13:35:57 <shapr> ok, so...
13:35:57 <palomer> once school is done I'll get back to my thirst of languages
13:36:00 <Janni> jlouis: oh... yeah
13:36:05 <Smerdyakov> Janni, I think you are wrong =)
13:36:05 <shapr> my actual question is like this:
13:36:12 <shapr> data Line a = Line (Point a) (Point a)
13:36:13 <shapr> data GeometryStuff a = Line a | Point a
13:36:20 <palomer> though I really really liked the [ x | x < y] notation
13:36:31 <palomer> it's gorgeous
13:36:31 <shapr> the second line explodes
13:36:39 <shapr> palomer: list comprehensions
13:36:43 <shapr> they're way sexy
13:36:51 <shapr> so sexy that Python added them
13:36:55 <Janni> shapr: of course. you may not use the same constructor names for different types
13:37:03 <jlouis> Janni: exactly
13:37:16 <shapr> how should I deal with that?
13:37:20 <jlouis> list comprehensions is nothing but syntactic sugar for filter and map
13:37:33 <shapr> jlouis: yes, but they're sweet like candy
13:37:40 <Janni> shapr: you could put a "T" behind type names (though I don't like that solution)
13:37:45 <shapr> is there a better solution?
13:37:49 <jlouis> shapr: not for the SML inclined ;)
13:37:54 <shapr> heh, ok
13:38:04 <shapr> list comps are elegant
13:38:33 <Smerdyakov> I'm wary of people who mention "elegance" too much.
13:38:42 <Janni> shapr: classes, instances
13:38:53 <Janni> shapr: but I don't think you are familiar with that stuff
13:38:55 <shapr> Smerdyakov: you've been wary of me since you arrived, what's different? ;-)
13:39:01 <shapr> Janni: I am...
13:39:26 <Janni> shapr: I think, that's what you want, then
13:39:42 <shapr> can you point me in the right direction?
13:39:58 <shapr> for example, how would I use it for the Line/Point stuff?
13:40:10 <Janni> shapr: ask yourself, why you are using this "GeometryStuff" type
13:40:31 <shapr> because I want to ensure that only a certain set of types are ever passed to a function.
13:40:34 <Janni> shapr: because you want to define s.th. that concludes geometry stuff like lines and points
13:40:52 <shapr> so you think I should build an empty typeclass called GeometryStuff?
13:41:00 <Janni> shapr: why empty?
13:41:17 <Janni> shapr: there are functions which are appliable to geometric stuff
13:41:40 <Janni> shapr: your class will hold these functions
13:42:25 * shapr thinks about that.
13:42:45 <Janni> shapr: could you tell me the name of the concerning function?
13:43:11 <Janni> forget it. i'll invent an example
13:43:17 <shapr> I can't think of anything...
13:47:58 <shapr> Janni: I'm trying to make significant types for my RFC822 module
13:48:15 <shapr> http://kungens.kemi.fi/~shae/src/haskell/RFC822.hs
13:48:32 <shapr> if you load that into ghci, it complains about types being defined twice.
13:48:53 <shapr> so that's the actual question, I've simplified it down to the Line | Point example above.
13:49:20 <Janni> i'll get it
13:50:24 <Janni> shapr: yes, same error as before. you are using the same constructor twice.
13:50:41 <Janni> data AddrSpec = AddrSpec LocalPart Domain deriving Eq
13:50:42 <Janni> data Mailbox =  AddrSpec | Phrase RouteAddr deriving ( Eq, Show )
13:50:45 <shapr> right
13:50:49 <shapr> question is...
13:51:03 <shapr> should I be using Typeclasses here?
13:51:09 <Janni> nope
13:51:09 <shapr> just as for the earlier example?
13:52:15 <shapr> what do you suggest?
13:52:53 <Janni> shapr: i think the best thing would be not to use "data AddrSpec = AddrSpec..." but invent something else
13:53:07 <Janni> like "data Adress = AddrSpec..."
13:53:14 <Janni> that makes more sense anyway
13:53:45 <Janni> does it really? :)
13:53:54 <shapr> hmm
13:53:57 <Janni> but it would work (*thinking of s.th. better*)
13:53:58 <shapr> I think it does make more sense.
13:54:34 <shapr> even so, I'd want to use the same constructor and type name there
13:56:24 <Janni> shapr: ah, your Mailbox definition is broken anyway
13:57:03 <Janni> shapr: i guess you'd like to use s.th. like "data Mailbox = <constructor> AddrSpec | ..."
13:58:26 <shapr> yes, that's true
13:59:40 <shapr> but, a Mailbox type can be either type Mailbox = AddrSpec or type Mailbox = Phrase RouteAddr
13:59:42 <Janni> shapr: I didn't completely realize the problem at first. You didn't use the same constructor in two data types, but you simply forgot one constructor. so you can leave the rest
14:00:47 <shapr> I'll use the comments for constructors
14:00:53 <shapr> SimpleAddress and NameAndSpec
14:06:11 <shapr> Janni: thanks
14:07:09 <Janni> shapr: happy for being able to help
14:08:14 * Janni needs a curry operator!
14:10:11 <Janni> how do I handle two or more cases at once in a case-statement? like:
14:10:15 <Janni> case x of
14:10:24 <Janni>     1, 2, 3 -> yay
14:10:35 <Janni>       4, 5 -> hooray
14:11:03 <Janni> ahh fuckit. why am I not just RTFM?
14:12:47 <buggs> Janni, now that is a hard one ;)
14:13:19 <Janni> buggs: there isn't a possibilty, is it?
14:14:11 <palomer> is it a hard one?
14:14:28 <buggs> why am I not just RTFM? <-- it is
14:14:51 <palomer> in ocaml it's fun a b -> match (a,b) with...
14:15:19 <palomer> matchings are fun!
14:16:10 <Janni> palomer: sounds like guards to me
14:21:22 <Janni> hell, I really can't find it!
14:27:36 <shapr> Janni: what about guards?
14:29:00 <Janni> shapr: yeah, I mostly prefer guards (and patterm matching), but it doesn't work here because I'm inside of a "do" and I'd have to define another function then.
14:29:10 <Janni> but it's not _that_ important
14:29:20 <shapr> ok
14:31:52 <jlouis> SML-NJ has an SML extension that lets you do that Janni
14:57:50 * shapr fights the type systm
14:58:23 <Smerdyakov> Has shapr been replaced with someone else? O_O
14:58:30 <shapr> what do you mean?
14:59:57 <Smerdyakov> First you don't know how to use datatypes, now you're complaining about the type system!!
15:00:16 <jlouis> what next?
15:00:18 <shapr> I'm not a fanatic. I'm not obsessed.
15:00:25 <jlouis> complaining about monads?
15:00:32 <shapr> monads suck.
15:00:37 <shapr> arrows are far better.
15:00:54 <shapr> monads are still better than uniqueness types
15:00:56 * shapr ewws
15:00:59 <shapr> ;-)
15:01:41 <shapr> Smerdyakov: I still have much to learn about many things, Haskell is one of them.
15:12:38 <palomer> :o
15:17:02 <Janni> hmm. I want to write a function that requests s.th. from the server. but that request only has to be once even if the function is called multiple times (yielding the same result). but the function might never be used, so there doesn't have to be recieved any data from the server. how can I achieve that?
15:17:21 <Janni> s/done\ /&once
15:17:42 <Smerdyakov> IO monads make that explicit.
15:17:53 <Smerdyakov> If you don't use the IO return value for anything, no IO is ever performed.
15:18:11 <Smerdyakov> If you do IO twice, then hide some state in the IO that says "don't fetch the data again"
17:00:07 <shapr> so, anything interesting in the world of Haskell lately?
17:01:27 <andersca> hey shapr
17:01:32 <shapr> Smerdyakov: how have your Haskell studies been going lately?
17:01:34 <shapr> hi andersca 
17:01:47 * andersca is enjoying a glass of cognac
17:01:54 * shapr is enjoying code
17:04:59 <Smerdyakov> shapr, I'm not studying Haskell outside of watching and participating here./
17:05:13 <shapr> why not?
17:05:30 <Smerdyakov> Because I have lots of other things to do.
17:05:36 <shapr> bah, that's not a good reason.
17:05:45 <shapr> look at all that spare time you waste on doing fun things..
17:05:50 <shapr> you could be writing Haskell code!
17:06:15 <shapr> it's good for you!
17:06:16 <andersca> I wish I could write haskell code
17:06:33 <shapr> what have you been writing lately?
17:06:44 <andersca> D-BUS
17:06:47 <shapr> ah
17:06:49 <shapr> can you write that in Haskell?
17:06:58 <andersca> I could write a client library in haskell :)
17:07:09 <shapr> sounds like fun
17:07:25 <andersca> I did write the lab assignment in haskell
17:07:34 <shapr> what sort of assignment?
17:08:21 <andersca> http://www.cs.chalmers.se/Cs/Grundutb/Kurser/ndg/Del1/lab2.html
17:09:04 <shapr> cool!
17:10:49 <shapr> I wish I could write some for-pay code in Haskell
17:10:56 <shapr> Haskell needs more libraries.
17:12:09 <shapr> Smerdyakov: oh, one reason to fight the type system... always practice above your level
17:16:12 <shapr> any parsec users here?
17:21:07 <shapr> any idea how to thread useful datatypes through Parsec choice?
17:22:58 <Riastradh> Parsec?
17:23:43 <shapr> it's a library of parsing combinators that comes with GHC
17:23:49 <shapr> written by Daan Leijen
17:23:52 <shapr> it's spiffy stuff
17:24:44 <shapr> andersca: chalmers connection being flaky?
17:24:59 <andersca> shapr: no, just my machine
17:25:03 <andersca> I've got it under control now :)
17:25:59 <shapr> Riastradh: want more details?
17:26:50 <Riastradh> No, I had just remembered it to be a multiplayer 3D space game.
17:27:01 <Riastradh> Undoubtedly I was thinking of something else of the same name.
17:27:13 <shapr> probably so
18:01:12 * shapr sighs
18:53:08 <shapr> yow
23:47:41 <o3> llo
