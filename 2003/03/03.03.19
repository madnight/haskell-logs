00:44:42 <Marvin--> now I'm confused
04:35:37 <Janni> ph34r m33!!1
04:37:58 <opet> indeed
05:59:36 <debug> quick newbie question: how do I convert a numeric value (integer or double or anything) into a char?
06:00:06 <dbg> into a char or into a string?
06:00:22 <debug> in hugs,   :t 5 + \0   works, but not the expression   5 + \0  itself
06:00:25 <debug> a char
06:00:39 <debug> s/\0/'\0'/g
06:01:18 <dbg> chr converts to char, show converts to string
06:01:27 <debug> thanks
06:02:18 <debug> but ghc didn't like that
06:02:25 <debug> rt.hs:45: Variable not in scope: `chr'
06:02:53 <dbg> import Char
06:11:50 <debug> our ghc installation can't find it...
06:12:02 <debug> hm
06:32:10 <shapr> debug: :m Char
06:32:18 <shapr> debug: chr 92
06:34:49 <shapr> debug: it's easier to import modules in the file that you're loading into ghc
06:34:57 <shapr> debug: are you using emacs haskell-mode ?
06:36:45 <debug> shapr: it was our compiler at school that was fucked up. GHCROOT set incorrectly
06:40:06 <debug> it works now
06:45:09 <debug> http://www.mdstud.chalmers.se/~md1gavan/z/rt.hs
06:45:14 <debug> my first raytracer in haskell
06:45:18 <debug> but now: time to go
06:45:20 <debug> have a nice day
06:45:25 <shapr> you too
06:45:30 <shapr> come back and see us
06:48:12 <debug> oops. there was a spelling error. rt.hs is now corrected
06:48:16 * debug disappears again
06:48:29 * shapr reloads
06:48:46 <debug> in the antialiasing part...
06:52:56 <shapr> debug: what's the output of this program?
06:53:24 <debug> .ppm
06:53:29 <debug> pixmap
06:53:52 <shapr> should I pipe it into a file?
06:54:06 <shapr> ./rt > foo.ppm 
06:54:06 <shapr> ?
06:54:12 <debug> yes
06:54:15 <shapr> ok
06:54:25 <debug> ./rt > file.ppm; xv file.ppm       or simply  ./rt | xv -
06:54:44 <shapr> how large is the ppm file going to get?
06:55:02 <shapr> it's just gone over 2mb
06:55:23 <shapr> aha
06:55:41 <shapr> wow, NICE!
07:08:28 <palomer> :o
07:22:49 <palomer> time for a scavenger hunt!
07:23:01 * palomer goes and looks inside my sister's CD collection
07:28:45 <shapr> I haven't seen my sister's CD collection in ten years
07:30:58 <palomer> shapr!
07:31:13 <shapr> what?
07:31:25 <palomer> how's it going?
07:33:08 <shapr> it's going well
07:33:14 <shapr> I've discovered I can almost type with my feet
07:33:19 <shapr> but my big toes are too large
07:38:36 <palomer> that's good
07:52:43 <shapr> palomer: have you ever tried to type with your feet?
07:55:22 * SyntaxPolice thinks he's going to buy a Haskell shirt at cafepress
07:55:31 <shapr> url?
07:56:12 <SyntaxPolice> http://www.haskell.org/merchandise.html
08:04:12 <Igloo> Don't suppose there are any HTML gurus lurking about here?
08:04:24 <shapr> depends on what you want to know
08:04:57 <Igloo> I want to know why validator.w3.org says 'character "#" is not allowed in the value of attribute "usemap"' when the examples in the spec seem to use it
08:05:49 <shapr> I don't know
08:06:13 <shapr> is there an entity ref for # ?
08:07:17 <Igloo> Dunno, but <a href="#foo">...</a> I'm fairly sure validates and is the same thing
08:07:48 <shapr> are the legal attribute values defined in the DTD?
08:08:36 <Igloo> It's a %URI; as is href in the a tag
08:10:21 <shapr> Igloo: I don't have any other ideas, sorry
08:10:35 <Igloo> OK, ta
08:10:38 <shapr> Igloo: if you have the file handy, I can run it through my local copy of onsgmls
08:10:52 <shapr> with full error checking, maybe that will turn up something?
08:13:35 <Igloo> It's http://users.ox.ac.uk/~diplo/ (I'm checking as XHTML 1.1 but haven't put the declaration in yet)
08:15:12 <shapr> hm, what's the declaration look like for xhmtl?
08:15:38 <Igloo> I'll put it in, hang on
08:16:14 <shapr> ok
08:16:56 <Igloo> OK, it has the 1.0 one now (which has the same problem)
08:18:52 <shapr> want me to /msg the interesting bits of the validation?
08:19:11 <Igloo> I'm only interested in the usemap bit ATM
08:19:36 <shapr> ok
08:20:22 <shapr> it says that for <map> "required attribute "id" not specified"
08:25:30 <Igloo> Oh, it fixed itself when I fixed the rest of the page. Very strange.
08:25:42 <Igloo> Thanks for your help
08:36:42 <shapr> Igloo: yay
08:36:44 <hdaume> sup yall
08:36:44 <shapr> hi hal
09:52:18 * tmoertel needs coffee . . .
09:58:25 * hdaume too
10:00:00 <shapr> me too
10:00:04 <shapr> I have coffee
10:00:05 <shapr> yay!
10:00:26 <shapr> tmoertel: hey, your quickcheck script from icfp2001 has ended up being the canonically correct one
10:00:28 <tmoertel> I just brewed a cup from homeroasted beans...
10:00:45 <shapr> with some minor edits
10:00:54 <tmoertel> shapr: you mean using ghci?
10:01:00 <shapr> yup
10:01:08 <shapr> though I really need to fix that
10:01:22 <shapr> http://www.math.chalmers.se/~rjmh/QuickCheck/quickcheck
10:03:12 <shapr> tmoertel: any other improvements you've made to your quickcheck script lately?
10:03:25 <tmoertel> shapr: nope
10:03:39 <shapr> ok
10:03:50 <tmoertel> the only other bit o' magic occurs in the makefile
10:03:57 * shapr looks for magic
10:04:25 <tmoertel> it creates a local ./ghci script that invokes ghci w/ the same options used to compile w/ ghc
10:04:31 <shapr> ah
10:04:41 <shapr> I wondered where that script came from originally
10:05:54 <shapr> have you seen the new monadic quickcheck?
10:06:02 <shapr> hi Marvin-- 
10:06:11 <shapr> hur är det med dig?
10:06:22 <tmoertel> shapr: I have seen it, but I haven't used its monadic features
10:06:33 <Marvin--> shapr: bara bra, tack
10:06:42 <shapr> idag, jag har studerat plural obestamd form
10:06:54 <Marvin--> heh, that was swenglish :-)
10:06:56 <shapr> uh oh
10:07:09 <Marvin--> "idag har jag" is the correct order in Swedish
10:07:13 <shapr> ohh
10:07:19 <shapr> tack
10:07:36 <Marvin--> I'm amazed how quickly you're learning though
10:07:49 * shapr watches his ego swell
10:07:52 <shapr> :-)
10:08:08 * Marvin-- threatens with a needle
10:08:10 <shapr> jag har en jättebra lärare
10:08:49 <shapr> Läraren är pigg och roligt.
10:09:17 <shapr> swedish is a fun language
10:09:25 <shapr> It's a lot easier than I expected.
10:10:16 <shapr> Marvin--: also, remember I promised that I would have conversation swedish by ICFP ;-)
10:10:20 <Marvin--> heh
10:10:22 <shapr> er "conversational"
10:10:57 * Marvin-- tries to figure out why he can't get onto icq
10:12:33 <shapr> I still haven't tried the swedish morphology checker written in Haskell.
10:13:24 <Marvin--> Aarne?
10:13:28 <shapr> yup
10:13:33 * Marvin-- is not surprised :)
10:13:34 <shapr> http://tournesol.cs.chalmers.se/aarne/GF/resource/morpho.Swe.html
10:14:44 <Marvin--> he's a linguist
10:15:10 <Marvin--> nice, none of the frontends for licq seem to work
10:15:49 <shapr> have you heard of bitlbee?
10:16:00 <Marvin--> no?
10:16:18 <shapr> http://freshmeat.net/projects/bitlbee/?topic_id=22%2C26%2C23%2C24
10:16:32 <shapr> you run a local 'irc server' that connects you to icq, msn, etc
10:17:02 * Marvin-- shrugs
10:17:04 <Marvin--> I'm happy with Gabber
10:17:06 <shapr> ok
10:17:13 <Marvin--> but I can't seem to get out on icq, so I thought I'd try with licq
10:17:24 <Marvin--> but licq is a p.o.s.
10:19:13 <Marvin--> licq with another gtk plugin actually got out, though
10:19:33 <Marvin--> gabber is getting plenty of Internal Timeouts
10:22:28 <Marvin--> aiiih, the message window has the same window identifier as the main window
10:22:53 <Marvin--> no wonder the message window didn't take focus and was omnipresent
10:47:35 * shapr boings
10:53:30 * tmoertel bings
10:59:41 <shapr> bah, I want to write Haskell, not Java.
11:14:36 <shapr> hi Vincenz 
11:14:47 <Vincenz> hiya shapr :)
11:14:53 <shapr> have any Haskell questions?
11:14:57 <Vincenz> hehe :P
11:14:59 <Vincenz> not at the moment no
11:15:00 <shapr> :-)
11:15:05 <Vincenz> tho: Haskell or OCaml?
11:15:12 <shapr> hm?
11:15:12 <Vincenz> I'm stuck with taht question
11:15:26 <shapr> depends on what you want really
11:15:35 <Vincenz> hmm, something useful
11:15:35 <shapr> Haskell is purely functinal
11:15:38 <shapr> functional
11:15:40 <Vincenz> I know it's vague
11:15:44 <shapr> OCaml isn't pure
11:15:48 <Vincenz> hmm
11:15:51 <Vincenz> I heard it was
11:16:01 <shapr> maybe I'm wrong, I thought it wasn't
11:16:08 <Vincenz> it's not lazy
11:16:11 <shapr> that's true.
11:16:21 <Riastradh> OCaml isn't purely functional.
11:16:28 <Riastradh> let x = ref 2;;
11:16:29 <Riastradh> x;;
11:16:33 <Riastradh> (* prints: 2 *)
11:16:36 <Riastradh> x := 3;;
11:16:38 <Riastradh> x;;
11:16:41 <Riastradh> (* prints: 3 *)
11:16:51 <Vincenz> oh
11:17:15 <Vincenz> I think that's useful tho
11:17:18 <shapr> if you're out to learn about functional programming specifically, I would say Haskell is best for that.
11:17:26 <Vincenz> the reasno I'm most attracted to FP is higherorder and such
11:17:34 <Vincenz> and being able to map functions to structures
11:18:08 <shapr> you can also get that in Python, Scheme, Lisp, Erlang, and a bunch of other languages that aren't very functional
11:18:19 <Vincenz> I know but I'd also like to learn something new
11:18:26 <Vincenz> and why'd you include scheme and lisp/
11:18:30 <Vincenz> They're both FP, no?
11:18:50 <shapr> Scheme and Lisp are halfway between FP and Procedural imho
11:19:21 <Riastradh> They have imperative stuff in them, but most Scheme programmers prefer to stick with the functional aspects and avoid the imperative aspects.
11:19:25 <shapr> Of course, I'm thinking of Haskell as being the 'most functional' language.
11:19:33 <shapr> so I'm probably biased.
11:24:13 <Vincenz> because it's lazy
11:25:06 <shapr> no, because it's referentially transparent
11:25:17 <shapr> no side-effects
11:25:19 <Vincenz> ah
11:25:27 <shapr> laziness is fun, but not necessary
11:25:40 <Vincenz> laziness makes you not sure about the runtime aspects of code
11:25:46 <Vincenz> I like the strong typing system a lot :)
11:25:54 <Vincenz> inferred types and such
11:26:12 <shapr> me too
11:26:17 <shapr> type inferencing is great 
11:26:31 <Vincenz> I know, typing like java (sortof), without the hassle of typing it
11:26:47 <Vincenz> no pun intended
11:29:52 <shapr> heh
12:07:00 <shapr> tmoertel: any more thoughts on an application container?
12:07:22 <tmoertel> shapr: no, I've been bogged down w/ work :-(
12:34:41 <debug> hm
12:45:44 <shapr> eh?
12:45:57 <shapr> debug: cool output, I don't really understand the code.
12:46:17 <debug> it's straight forward Q.H.
12:46:22 <debug> Quick Hack
12:46:22 <debug> =]
12:46:25 <shapr> oh
12:46:43 <debug> you know, each pixel = trace a ray. let the ray bounce and so on
12:46:56 <debug> hitobj returns true or false depending on if a ray hit a sphere or not
12:47:02 <debug> something like that
12:47:06 <shapr> ah, that's what you mean by standard backwards raytracing
12:47:09 <debug> pretty straight forward, but a bit obfuscated
12:47:12 <debug> yes
12:47:27 <shapr> I didn't know that's how raytracing worked
12:47:30 <debug> straight forward backward raytracing :)
12:47:33 <debug> ok
12:47:44 <shapr> I always thought it was forward raytracing
12:47:52 <debug> hehehe
12:47:55 <shapr> thinking of porting your forward raytracer to Haskell? ;-)
12:48:10 <debug> no
12:48:13 <shapr> oh well
12:48:15 <debug> it uses optimized C
12:48:25 <andersca> hey debug :)
12:48:27 <debug> and it takes weeks
12:48:29 <debug> yo andersca
12:48:34 <debug> what on earth are you doing here?
12:48:38 <shapr> he lives here.
12:48:45 <debug> weird
12:49:32 <shapr> lots of cool people here :-)
12:49:38 <Vincenz> thank you
12:49:48 * shapr grins
13:31:13 <debug> shapr: x.png in same dir as before
13:51:11 <Marvin--> hey debug
14:42:51 <shapr> debug: nice
15:27:38 <shapr> w00
15:27:44 <shapr> it's time for fun code!
15:27:56 <shapr> hm, what should I write...
15:30:21 <shapr> hi Arnia 
15:30:23 <shapr> what's up?
15:30:48 <Arnia> Just recovered after getting wasted this afternoon for my birthday
15:31:01 <shapr> yay
15:32:06 <Arnia> 11 35ml shots of JD with a double absinth
15:33:33 <Arnia> I wasn't feeling too good
15:37:27 <shapr> at least you can remember how you felt
15:37:28 <shapr> that's good
15:38:27 <Arnia> True... I was close to not doing so though. Not as bad as a friend of mine who's celebrating his birthday too today... he didn't make it into the evening
15:41:56 <shapr> hi Pseudonym 
15:45:20 <debug> yo marvin--
15:45:23 <debug> hm
15:45:29 <debug> marvin the early quitter...
15:46:01 <shapr> he's a disciplined person
15:46:05 <shapr> at least, it seems so
15:46:58 <debug> I was supposed to go to med at 22
15:46:59 <debug> :)
15:47:11 <debug> have a good evening
15:47:12 <shapr> du mäste sover nu!
15:47:18 <shapr> göd natt
15:47:21 <shapr> or something like that
15:47:25 * debug falls into debug mode
15:47:26 <debug> yes
15:47:28 <debug> godnatt :)
15:47:43 <Pseudonym> Bonan matenon
15:48:32 * shapr grumbles at his keyboard
15:48:39 <shapr> I really need to buy another one
15:48:48 <Pseudonym> And your keyboard has such nice things to say about you.
15:48:50 <debug> http://www.mdstud.chalmers.se/~md1gavan/z/y.png   but that's final
15:48:58 * debug afk
15:49:09 <shapr> nice
15:49:12 <Pseudonym> Kinda cute.
15:49:27 <Pseudonym> Now factor in Fresnel reflectance.
15:49:27 <shapr> and 100% haskell
15:49:56 <shapr> http://www.mdstud.chalmers.se/~md1gavan/z/rt.hs
15:50:05 <shapr> I assume he's kept his source upated
15:50:07 <Pseudonym> Cool.
15:52:11 * shapr wonders what to work on
15:52:53 <Pseudonym> I can think of a few suggestions for this raytracer.
15:52:55 <Pseudonym> If you want.
15:53:00 <shapr> not mine
15:53:04 <Pseudonym> :-)
15:53:06 <shapr> written by debug 
15:53:17 <shapr> I know nearly zero about raytracers
15:57:56 * Arnia hands shapr a request for a computational algebra system in haskell ;)
15:58:03 <shapr> erf
15:58:12 <shapr> I was thinking of XmlRpc
15:58:37 <shapr> or maybe trying to add ABNF support to the BNF converter
15:58:49 <Arnia> Actually... an interface between Zope and Haskell ;)
15:59:52 <shapr> that I'd like to have
15:59:56 <Pseudonym> Why not work on lambdabot?
16:00:04 <shapr> hm, good idea
16:00:07 <Pseudonym> Arnia, actually I tried implementing the Risch algorithm in Haskell once.
16:00:16 <Pseudonym> That was a BAD idea.
16:00:24 <shapr> what is that algorithm?
16:00:29 <Pseudonym> Symbolic integration.
16:00:52 <Arnia> Yerk, why so bad?
16:01:01 <Pseudonym> It ain't pretty.
16:01:38 <Arnia> Write your own algorithm
16:01:45 * Pseudonym laughs
16:01:56 <Arnia> Start from scratch and write a functional equivalent
16:01:59 <Pseudonym> The benefit of the Risch algorithm is that it's complete.
16:02:08 <Pseudonym> Oh, it can be done in a functional way.
16:02:10 <Pseudonym> No problem there.
16:02:14 <Pseudonym> It's just bloody complex.
16:02:49 <Arnia> Most things are :)
16:02:59 <Pseudonym> I mean it's really, REALLY complex.
16:02:59 <Arnia> Where are there papers or sites on that algorithm?
16:03:07 <Pseudonym> There's a book on it.
16:03:21 <Arnia> Oooh
16:03:36 <Pseudonym> Hang on.
16:03:51 <Pseudonym> Actually it's a several book series.
16:03:56 <Pseudonym> All on the one algorithm.
16:04:04 <Arnia> Shit
16:04:19 <Pseudonym> Bronstein, M., "Symbolic Integration I - Transcendental Functions", Springer Verlag, 1996.
16:04:26 <Pseudonym> That's the transcendental case.
16:04:40 <Pseudonym> So it handles polynomials and transcendentals.
16:04:47 <Pseudonym> exp, sin, cos, tan etc.
16:04:49 <Arnia> Oh my... is there no way to modularise it?
16:04:56 <Pseudonym> Yes, there is.
16:05:04 <Pseudonym> Sort of.
16:05:14 <Pseudonym> Part 2 is on the algebraic case.
16:05:19 <Pseudonym> Which is very, very hard.
16:05:33 <Pseudonym> Doing exp, sin, cos, tan etc is just hard. :-)
16:05:58 <Arnia> :)
16:06:15 <Pseudonym> Actually, in principle it's quite simple.
16:06:34 <Pseudonym> It's an extension of integration by partial fractions.
16:06:36 <Arnia> Integration is a bitch... and I want to know why even in maths its so much more difficult to go against entropy (such as with integration)
16:06:51 <Pseudonym> Partial fractions handles rational polynomials.
16:07:01 <Pseudonym> Polynomials in x where Dx = 1
16:07:09 <Pseudonym> (capital D is the differentiation operator)
16:07:34 <Pseudonym> To extend it to, say, exponentials, you also need to handle polynomials over t where Dt = t
16:07:51 <Pseudonym> And to extend it to tangent, you need to handle polynomials over t where Dt = 1 + t^2
16:08:20 <Pseudonym> In general, it extends the method of partial fractions to any function over a monomial t where Dt can be expressed as a polynonial in t.
16:08:44 <Pseudonym> That's actually fairly mechanical.
16:08:54 <Pseudonym> The hard part is working out what is a valid field extension and what isn't.
16:09:07 <Pseudonym> Now the algebraic case is much, much harder.
16:09:09 <Arnia> Hmm... tried using the Monad Transformer idea? Sounds like it may help...
16:09:14 * Pseudonym laughs
16:09:28 <Pseudonym> Yes, that was handy for handling state.
16:09:32 <Pseudonym> It's still a bitch to implement.
16:10:51 <Pseudonym> My brain still hurts when I even look at the cover of that book.
16:10:53 <Arnia> No, I mean use monad transformers more than once... treat maths as a programming language
16:11:08 <Pseudonym> At some point you need to do symbolic manipulation.
16:11:17 <Pseudonym> The first thing I did was implement a polynomial class.
16:11:23 <Pseudonym> Sorry.
16:11:30 <Pseudonym> An Euler typeclass.
16:11:45 <Pseudonym> Which is derived from Num.
16:12:02 <Pseudonym> Euler objects are numbers which also have division with remainder.
16:12:15 <Pseudonym> Integers and polynomials are two such objects.
16:12:18 <Arnia> I think I may fiddle with the idea though... like all mathematical thought, it is still worthwhile even it doesn't work in the end
16:12:23 <Pseudonym> Sure.
16:12:26 <Pseudonym> And I learned a lot.
16:15:50 * Arnia goes and fiddles
16:18:20 <Arnia> Hmm... Shapr, have you thought about building a framework around Fruit?
16:28:43 <creature> Hey guys. Quick question: How can I convert an int to a float? 
16:35:53 <hdaume> creature: fromIntegral
16:36:03 * hdaume is gone
16:36:07 <creature> Cheers.
16:36:13 <creature> I was using fromInteger. Well, trying to.
18:21:15 * shapr bounces happily
18:21:32 <shapr> I have learned a new thing.
18:21:58 <shapr> simply, don't have several modules named Util.hs in your library path.
18:22:12 <shapr> it can be very confusing.
18:22:36 <shapr> does ghci have a verbose mode that tells exactly what file is being loaded for each module?
18:22:44 <shapr> python has -v that gives you that sort of info
18:37:58 <shapr> hi demoncrat
18:38:07 <demoncrat> hullo
18:38:13 <shapr> what's up?
18:38:24 <demoncrat> still sick
18:38:28 <shapr> :-(
18:39:26 <shapr> doing fun codey stuff?
18:39:39 <demoncrat> can't say i am
18:39:50 <shapr> non-fun codey stuff?
18:39:58 <demoncrat> heh
18:40:21 <shapr> I'm trying to decipher code written by Andrew Bromage
18:40:30 <demoncrat> don't know the fellow
18:40:35 * shapr points to Pseudonym 
18:40:42 <demoncrat> what does it do?
18:41:45 <shapr> it looks like it hides plugin modules for an irc bot in two layers o' monads
18:43:32 <shapr> demoncrat: you dig monads?
18:43:41 <demoncrat> certainly
18:43:51 <shapr> wow, cool
18:43:54 <shapr> what about arrows?
18:44:09 <demoncrat> i don't even dig bows, sorry
18:44:16 * shapr snickers
18:44:48 * Riastradh uses bows and arrows regularly, but he doesn't dig with them.
18:45:41 <demoncrat> legolas is your man
18:46:34 <shapr> isn't he an elf?
18:46:36 <Riastradh> No, he sucks at archery.
18:46:42 <Riastradh> He hardly even knows how to pull the string.
18:46:57 <demoncrat> shapr - quibbler
18:47:11 <Riastradh> It's only with the help of those silly wires that hold up everything else anyways that make him look spectacular.
18:47:37 <demoncrat> tolkien didn't say anything about wires
18:47:48 <shapr> http://www.math.chalmers.se/~rjmh/Papers/arrows.ps
18:47:52 <shapr> that's the arrows paper
18:47:57 <shapr> http://www.haskell.org/arrows/
18:48:01 <Riastradh> Right, but I've never seen the real Legolas using his bow, so I refer to the first LotR movie.
18:48:15 <shapr> arrows are nifty
18:48:24 <shapr> at least, from what little I understand of them
18:48:45 <Riastradh> What's the general idea around them?
18:49:07 <Riastradh> I'd read those URIs you showed me, but I have to leave in about negative ten minutes, so it would help me to be brief.
18:49:11 <demoncrat> they're pointy and they fly
18:49:17 <shapr> yah, what he said ;-)
18:49:28 <shapr> arrows are like monads, but more general :-)
18:49:28 <Riastradh> Eh, not all of them.
18:49:41 <Riastradh> A lot of them go *kersploing* and hit the clock that's to your left.
18:49:51 <demoncrat> ok - except when they don't
18:49:53 <Riastradh> Others flip over and *whack* the ground.
18:50:10 <shapr> in the paper, arrows are used to write parsers that include static type info
18:50:19 <shapr> 'I can only accept these types'
18:50:32 <shapr> so you get rid of a lot of space leaks that you would have with uncalled monads
18:50:58 <shapr> you can't optimize or check a call to a monad, you can just call the monad
18:52:04 <shapr> hm, other irc channels says the bombing has started :-(
18:52:11 <Riastradh> Indeed.
18:52:47 <demoncrat> i've decided to learn some french
18:53:31 <shapr> c'est chouette
18:53:31 <Riastradh> 'Votre mere etait un hamster et votre pere senti des baies de sureau!' -- the most useful French sentence you'll ever know.
18:53:42 <demoncrat> heh
18:53:53 <shapr> you mother was a hamster, and your father smelt of elderberries?
18:54:03 <Riastradh> Naturally.
18:54:13 <demoncrat> you're way ahead of me
18:54:21 <Riastradh> No, I hardly know any French at all.
18:54:22 <shapr> demoncrat: I've learned a lot of swedish in the last three months
18:54:29 <demoncrat> excellent
18:54:33 <shapr> swedish is fun
18:54:56 <demoncrat> du gamlya, du friya, du fyallhogo Nord!
18:54:57 * shapr tries to remember french
18:54:58 <demoncrat> or something
18:55:12 <shapr> du gamla == you old
18:55:19 <shapr> du frija ? no idea
18:55:42 <shapr> I dunno
18:55:53 <demoncrat> thought that was the swedish anthem
18:56:10 <shapr> oh, might be
18:56:14 <shapr> I don't know the swedish anthen
18:56:23 * shapr googles
18:57:14 <Pseudonym> Two layers o'monads, yup.
18:57:31 <shapr> demoncrat: ah, you're right
18:57:42 <Pseudonym> One layer of read-only data and one layer of read-write data.
18:57:58 <Pseudonym> It'd probably be easier to make it all read-only data and make some of said read-only data IORefs.
18:58:27 * Pseudonym made some changes to the raytracer
18:58:42 <shapr> Pseudonym: do you have the new version of the raytracer online somewhere?
18:58:46 <shapr> I wanna see :-)
18:58:57 <Pseudonym> Rendering slowly.
18:59:10 <shapr> Pseudonym: I have a fast box, can I get the source?
18:59:27 <Pseudonym> Is yours much faster than 2GHz?
18:59:51 <shapr> no
18:59:57 <shapr> slower in fact
19:00:02 <Pseudonym> Then probably it's faster for me to do it, then.
19:00:08 <Pseudonym> I'll send the source anyway.
19:00:09 <shapr> bah humbug :-)
19:00:12 <Pseudonym> I'll put it in hslibs or something.
19:00:18 <shapr> ok
19:00:40 <Pseudonym> I changed the reflectance model a bit to make the reflections more credible.
19:00:50 <Pseudonym> Then I used a decent pixel filter.
19:01:29 <Pseudonym> The spheres are a bit darker, but I think they look better.
19:02:15 <Pseudonym> Ugh.  This newspaper needs to check their metaphors.
19:02:21 <Pseudonym> "A handful of explosions rocked Baghdad [...]"
19:02:25 <Pseudonym> That'd be painful.
19:05:04 <shapr> bah, it's 4am again
19:05:12 <shapr> @166
19:05:17 <shapr> I must sleep
19:05:35 <shapr> g'night fokes
19:05:55 <Pseudonym> Night.
19:06:27 <demoncrat> night
20:40:42 <Pseudonym> It seems very quiet after shapr leaves.
20:42:49 <Smerdyakov> Refreshing =)
22:33:14 <Pseudonym> exit
22:33:20 <Pseudonym> Sorry.
22:33:22 <Pseudonym> Bye everyone.
23:18:10 <danols> i'm am more than puzzled on how to do this:
23:18:30 <danols> simply convert a string that has spaces i.e. "Test hello" into ["test","hello"]
23:18:51 <danols> i'm trying to create a type Sentence = [String]
23:19:06 <danols> any ideas on how to get this thing of the ground ? i've been on it for the past hour
23:19:09 <dennisb> simplest is to use a predefined function, like words
23:19:17 <danols> huh ?
23:19:26 <kawfee> what do you mean?
23:19:27 <danols> shit
23:19:33 <danols> i didn't know they had WORDS in it
23:19:35 <danols> damn it
23:19:43 <dennisb> but it's not that hard to write it yourself
23:19:44 <danols> i'm so tired i'm not making sense right ? lol
23:19:50 <danols> dennish how would you ?
23:19:57 <danols> i really can't seem to got something that simple
23:20:04 <kawfee> use a parser
23:20:11 <danols> parser ?
23:20:13 <kawfee> yeah
23:20:18 <kawfee> parse the words out
23:20:25 <danols> such as ?
23:20:31 <kawfee> such as ?
23:20:32 <dennisb> http://www.haskell.org/onlinereport/standard-prelude.html#$vwords
23:21:40 <dennisb> but there are many ways to do it, some are more friendly to the beginner then the prelude one
23:21:51 <danols> kawfee i'm am either so tired that I just am to dull to understand cause i don't quiet see what you mean by parser
23:22:21 <kawfee> danols: know anything about Parser.lib ?
23:22:31 <danols> nope
23:22:34 <kawfee> Parser Lib
23:22:37 <kawfee> ok, nm then
23:22:42 <danols> i see
23:22:46 <danols> well thanks dennisb 
23:31:06 <danols> hmmm question
23:32:26 <danols> hel = h:e:l:[] right ? what about this ["test","test"] ? does it equal "test":"test":[] or "test":"test":[[]]
23:32:38 <dennisb> look at the types
23:32:51 <dennisb> what is the type of : (cons)
23:32:58 <danols> no my question is what is at the end of the list ? [] 
23:33:05 <dennisb> ooh, sorry
23:33:13 <dennisb> I misread the code also
23:33:35 <danols> caues I have a list of touples is at the end of the list an [] or an ([],[]) ?
23:33:39 <dennisb> it's easy to see what is equal to what
23:33:48 <dennisb> just try it out in hugs (or what you use)
23:34:08 <danols> [] didn't work ([],[]) did, i would like to know why not []
23:34:33 <dash> hey, does anyone know of a lisp interpreter written in haskell?
23:34:47 <dash> i'm trying to get into denotational semantics
23:35:03 <dennisb> danols: the "end" of the list is always, always []
23:35:15 <dennisb> the last element can be a pair or something else
23:36:25 <dennisb> a list can be only one of two things. It can be one element followed by a list (the cons : operator) or it can be an empty list, which is []
23:36:31 <dennisb> all finite lists end with []
23:37:46 <danols> i see
23:37:54 <danols> sod a list of touples would end in []
23:38:15 <dennisb> yes, for example (3,4):(2,3):(2,1):[]
23:38:22 <danols> ok bummer
23:38:23 <danols> hmmm
23:38:40 <dennisb> it is sometimes written [(3,4),(2,3),(2,1)]
23:38:52 <dennisb> but this is just a shorthand of the "real" representation above
23:39:13 <danols> i understand that i'm confused about the strange error i'm getting 
23:39:44 <danols> is this possible dic == [] testing against an empty list ?
23:40:14 <danols> hmmm i realized my error
23:40:45 <dennisb> yes, dic == [] returns True if dic is the emtpy list
23:41:46 <dennisb> if dic is a cons value then it returns False
23:43:06 <danols> what I believe my error was I was trying to catch [] list after i've passed (String,String) and it would say it was not matched against [[a]], so I added a guard for somefunction [] = do this, i think that was my problem
23:43:24 <danols> hmmm that dosen't make sense
23:43:51 <danols> what i meant i was trying to catch [] after i've passed it [] which was expecting a (String,String) in the patern matching
23:44:53 <dennisb> the key thing to write haskell (or really any) programs is to know the type of everything
23:45:40 <danols> true , it is also the hardest i mean blah -> blah -> blah means blah -> (blah -> blah) right ?
23:45:47 <dennisb> yes
23:46:29 <dennisb> types in haskell are a bit more advanced then in most other languages (and less advanced then some)
23:47:01 <danols> explain this for example somefunction x y has a type somefunction type -> x type -> y type
23:47:03 <dennisb> but it's just because it's a higher level language then most others
23:47:12 <danols> why is x type maped onto y type first ?
23:47:33 <dennisb> I can't read that type
23:47:43 <danols> hmmmm hold on
23:48:03 <danols> ahh nm i'm to tired now
23:48:07 <dennisb> show me a real example and I'll (try to) help you
23:48:21 <danols> well curing right ?
23:48:41 <danols> let's say we have a function add x y = x + y
23:48:43 <danols> it's type is
23:48:54 <danols> int -> int -> int right ?
23:49:16 <dennisb> if we restrict our self to Int, yes
23:49:31 <dennisb> + works on more number types then Int, but that is not important here
23:49:33 <danols> that means x -> y first ? i don't get that
23:49:47 <dennisb> this should be read as Int -> (Int -> Int)
23:49:47 <danols> and than add is aplied to it
23:49:52 <danols> true 
23:49:54 <danols> how is that so ?
23:50:10 <dennisb> thus it is a function saying that give me an Int and you get back a function of type Int -> Int
23:50:40 <danols> ohhh and that function is applied to y ?
23:50:48 <dennisb> So to use the function you can write add 6, this will return a new function that you can call with an Int
23:50:56 <dennisb> (add 6) 5
23:51:00 <dennisb> yes
23:51:17 <danols> hmmm hmmm hold
23:51:21 <dennisb> so you can do things like: let f = add 5 in f 4 + f 6
23:51:28 <danols> on i understood curing but this type definition wasn't sinking in
23:51:54 <dennisb> currying
23:52:19 <danols> but dosen't add 6 5 than return a function that will want to add 11 to something ? when does it know when to terminate the function cration ?
23:52:50 <danols> ((add 6) 5) = int 11+ 
23:52:51 <dennisb> add 6 5 should be read (add 6) 5
23:53:10 <dennisb> just like 4+5*6 should be read 4+(5*6)
23:53:15 <danols> ohhh hold on
23:53:42 <dennisb> add is not a function that takes to arguments, it just looks like it
23:53:56 <danols> how does it know when to terminate ?
23:54:20 <dennisb> and people usually talks about it like a function that takes 2 arguments, but the real truth is that it takes on argument and returns a function that takes the next
23:54:26 <danols> if we had add x = x+ it would not terminate right ? so it would be ((add 6) 5)
23:54:27 <dennisb> the types
23:54:51 <dennisb> "add x = x+" is a syntax error
23:54:58 <danols> see so what the hell ?
23:55:11 <danols> how does it know when to terminate?
23:55:35 <dennisb> danols: how does a c compiler know what it should terminate.
23:55:53 <dennisb> the question is a bit strange actually
23:55:55 <danols> what wont it try to add 6 5 create a function that want's to add 11 to something
23:56:09 <dennisb> ok
23:56:15 <danols> am I making sense ?
23:56:21 <dennisb> I'll show you what a function really is
23:56:39 <dennisb> a function is something that takes a value as input and returns a value as a result
23:56:47 <danols> yeah
23:56:53 <dennisb> functions don't have to have names
23:57:09 <dennisb> this is a function:    \x -> x*2
23:57:17 <danols> lamada notation ok
23:57:19 <dennisb> the function that takes an input and returns 2*that input
23:57:21 <dennisb> yes
23:57:31 <danols> yes 
23:57:40 <dennisb> add x y = x+y is shorthand for add = \x -> (\y -> x+y)
23:57:55 <danols> ok
23:58:08 <dennisb> and you see that add is a function that you give it an x and it returns a new function
23:58:27 <dennisb> add 5 returns (\y -> 5+y)
23:58:37 <danols> ok
23:59:05 <dennisb> sicne (add 5) = (\y -> 5+y) then (add 5) 6 returns 5+6 (which is evaluated)
23:59:17 <danols> yes 
23:59:25 <danols> what about add 5 6 1
23:59:30 <dennisb> had the inner expression been yet another function then you would...
23:59:47 <dennisb> then you need something like  add = \x -> (\y -> (\z -> x+y+z))
