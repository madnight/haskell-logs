00:08:00 <tic> ---
00:08:01 <tic>  readAllFiles :: [String] -> IO [String]
00:08:02 <tic>  readAllFiles [] = []
00:08:02 <tic>  readAllFiles (x:xs) = do
00:08:03 <tic>  							y<-readFile x
00:08:04 <tic>  							bleh <- readAllFiles xs
00:08:04 <tic>  							return (y:bleh))
00:08:05 <tic> ---
00:08:07 <tic> there
00:52:36 <Marvin--> what? BeOS Has A Spoon?
00:52:41 <Marvin--> I thought there was no spoon
02:56:07 <shapr> whee
02:56:24 <mgoetze> hi shapr
02:56:34 <shapr> hiya mgoetze 
02:56:34 <shapr> wassup?
02:57:06 <mgoetze> trying to get an ipv6-connection
02:58:47 <shapr> I should try that at some point
02:58:49 <shapr> not today though
02:59:41 <andersca> ipv6 eh
03:00:43 <andersca> nah, didn't work ;)
03:05:00 <shapr> isn't there ipv6.freenode.net as an irc server?
03:05:21 <mgoetze> irc.ipv6.freenode.net
03:08:57 <shapr> hi det
03:09:29 <shapr> lambdabot: @fact lambdabot 
03:09:29 <lambdabot> the coolest (only) irc 'bot written in Haskell., is rude
03:09:34 <shapr> lambdabot: @fact @fact
03:09:34 <lambdabot> 'lambdabot: @fact <term> <description>' -- sets the definition for '<term>' to be '<description>'; 'lambdabot: @fact <term>' -- looks up the '<description>' someone gave for '<term>' and says it.
03:10:42 <shapr> say goodnight lambdabot 
03:10:53 <lambdabot> goodnight
03:11:09 <mgoetze> @goodnight
03:11:18 <mgoetze> @say goodnight
03:11:29 <shapr> I cheated ;-)
03:11:36 <mgoetze> obviously :)
03:11:40 * shapr grins
03:11:46 <shapr> mgoetze: you could write a @say plugin
03:12:02 <shapr> I sort of already ddid
03:12:27 <shapr> lambdabot: @hello We Are Receiving you.
03:12:27 <lambdabot> Hello world. We Are Receiving you.
03:13:27 <shapr> I made some small changes to the hello plugin
03:18:41 <andersca> woo
03:19:54 <mgoetze> hello, andersca@3ffe::etc
03:20:27 <shapr> yay!
03:34:25 <shapr> hm, I wonder why ipv6 isn't working for me
05:22:39 <Riastradh> shapr, did you commit your changes of the Hello, World! module?
05:35:13 * Riastradh is kind of confused as to what the point of '$' is.
05:35:36 <Igloo> Fewer parentheses
05:35:50 <Igloo> Also you can use it as a higher order function, e.g. zipWith ($)
05:36:17 * Riastradh hrumphs at people who dislike parentheses, and he also notices that shapr left.
05:37:54 <opet> shapr left? wow
05:38:01 <Riastradh> Indeed.
05:38:34 <Riastradh> It's taking quite some time for him to be 'rebooting emacs,' as his quit message suggests.
05:39:24 <Igloo> That's just asking for a slur  :-)
05:39:31 <opet> well
05:39:32 <opet> it /is/ emacs :)
05:39:51 * mgoetze huggles vim
05:39:59 * Igloo gives you 2 out of 10 for that one  :-)
05:40:08 * Riastradh stabs mgoetze.
05:40:32 <Igloo> Need something more imaginative, like "Empires rise and fall faster than emacs starts"  :-)
05:40:57 <opet> yeah, sorry
05:40:58 <opet> my heart wasn't really in it
05:41:02 * Igloo decides that's enough emacs flaming for one day and goes back to thinking about DAGs
05:45:26 <Igloo> Oh, FoP time
05:45:28 * Igloo vanishes
06:50:27 <SyntaxPolice> greetings all.
06:50:40 <Riastradh> Hi.
06:53:20 <mgoetze> hi SyntaxPolice - game today?
07:14:58 <SyntaxPolice> mgoetze: 'fraid not. but soon! I got to a good milestone on my project :)
07:15:12 <SyntaxPolice> mgoetze: I played at a go club on sunday. it was fun.
07:15:46 <mgoetze> SyntaxPolice: yay :)
07:37:59 <SyntaxPolice> with -O2, ghc produces significantly faster code.
08:03:21 * Igloo returns
08:03:32 <Igloo> Quiet day
08:12:23 <Riastradh> Indeed.
08:15:36 <opet> that's because shapr's not here
08:15:55 * Igloo was resisting saying that  :-)
08:17:08 <opet> well, it's true :)
08:25:33 <Igloo> Can anyone confirm that let foo () = ... in ... foo () ... foo () ... won't have problems with the monomorphism restriction OTTOTH?
08:26:44 <Igloo> Hmmm, I'm going to have problems with functions like read anyway
08:44:27 <hdaume> morning all :)
08:45:09 <Igloo> Hiya
08:45:20 <jak_> hi
09:29:27 <tic> hey
09:30:06 <tic> I have a little function that returns the exact string sent in as a parameter. But I don't know how to write it:
09:30:12 <tic>  boing :: String -> IO String
09:30:12 <tic>  boing "" = return ""
09:30:12 <tic>  boing (x:xs) = do	blah <- x:(boing xs)
09:30:12 <tic>  					return blah
09:30:23 <tic> Which is wrong, but I just can't find the proper syntax anywhere  :-/
09:33:37 <SyntaxPolice> tic: I don't quite understand.  Why is the return type in the IO monad?
09:33:57 <tic> SyntaxPolice, I actually do blah <- readFile x
09:34:09 <tic> so maybe I should've written that.
09:34:16 <tic> hrm.
09:34:19 <tic> it should be:
09:34:28 <tic> readStuff :: [String] -> [String]
09:34:46 <tic> readStuff (x:xs) = do stuff <- readFile x
09:35:01 <tic>             return (readStuff xs)
09:35:07 <tic> but that's the part where I'm not sure about the syntax
09:35:09 <tic> :-/
09:35:37 <SyntaxPolice> for one, you know that return needs to be lined up w/ stuff. (I can't tell from the copy-paste if it is)
09:35:59 <tic> oh, i t is.
09:36:04 <SyntaxPolice> the type needs to be in the IO monad since readfile is in the IO monad.
09:36:17 <tic> readStuff :: [String] -> IO [String]    ?
09:36:21 <SyntaxPolice> yes.
09:36:34 <SyntaxPolice> are you throwing away the value that you store in "stuff"?
09:36:57 <tic> oh. my bad; it should read:
09:37:05 <SyntaxPolice> also, assuming that this is all the code, you'd need a case for the empty list also.
09:37:11 <tic>                    return stuff:(readStuff xs)      and a base case for the empty list
09:37:12 <tic> yeah :)
09:37:25 <tic> readStuff [] = [] ?
09:37:40 <SyntaxPolice> I think you need return (stuff:(readSTuff xs))
09:37:53 <SyntaxPolice> or return $ stuff:(readStuff xs) might work
09:37:57 <hdaume> and readStuff [] = return []
09:38:08 <SyntaxPolice> but "readStuff [] = []" isn't in the IO monad.
09:38:12 <tic> what does the operator $ do?
09:38:51 <SyntaxPolice> it makes it so you don't need some parens sometimes by changing the way the expressions are parsed.  It just applies the left hand side (the function) to the right side (arguments)
09:39:21 <tic> aha
09:39:22 <Igloo> i.e.   f $ x = f x
09:39:26 <tic> thanks.
09:39:33 <tic> So, now I have this one, but it still complains:
09:39:34 <tic>  readStuff :: [String] -> IO [String]
09:39:35 <tic>  readStuff [] = return []
09:39:35 <tic>  readStuff (x:xs) = do	ys <- readFile x
09:39:36 <tic>  						return (ys:(readStuff xs))
09:39:46 <tic> (return being aligned with ys <- readFile x)
09:39:54 <Igloo> Ewww, bad use of tabs
09:40:09 <SyntaxPolice> well, your call to "readStuff xs" isn't monadic :)
09:40:25 <SyntaxPolice> since readStuff is now in the IO monad.
09:40:27 <Igloo> Do they really line up with tabstop 8?
09:40:28 <tic> SyntaxPolice, what makes a call to something monadic?
09:40:34 <tic> Igloo, tab stop 4
09:40:45 <tic> Igloo, but it seems my IRC client changes them into spaces somehow .-/
09:40:46 <Igloo> It's not valid Haskell then
09:40:56 <tic> Igloo, well, works here :)
09:41:03 <SyntaxPolice> in this case, you could make it look like the call to readFile.
09:41:13 <Igloo> (well, it is, but doesn't do what you mean)
09:41:27 <Igloo> tic: Haskell uses tabstops of 8 to work out what lines up with what
09:41:51 <tic> Igloo, ahh, that's why it complains about "last blah blah must be an expression".  Can I use { }?
09:42:05 <Igloo> Oh, yes, it isn't actually valid
09:42:08 <Igloo> And yes, you can
09:42:10 <Igloo> And ;
09:42:12 <SyntaxPolice> return expects a value in this case of [String], but you're giving it a value of "IO [String]"
09:42:16 <Igloo> Or you could just use spaces
09:42:28 <SyntaxPolice> (almost)
09:43:06 <tic> Igloo, neat. changed that. Thanks!
09:43:29 <tic> SyntaxPolice, hrm.  how would I give it a value of [String] ?
09:43:45 <tic> or should I change IO String to String, for the return type?
09:44:01 <SyntaxPolice> you can think of a call like "do ys <- readFile x" as "perform a computation, readFile x, and stick the return value in ys", where the computation is expressed in the IO monad.
09:44:04 <SyntaxPolice> no, I think the type is right.
09:44:40 * Igloo starts to wonder if what I want my DAG to do (spot 2 lambda abstractions are defined in the same way) is possible
09:44:40 <SyntaxPolice> you can think of "do <-" as stripping out the monad and giving you back the [String].
09:45:08 <tic> SyntaxPolice, so I should write return $ do <- (ys:(readStuff xs)), or .... ?
09:45:29 <SyntaxPolice> nope...
09:45:30 <tic> or no, that's for adding removing the monad
09:45:33 <Segora> readStuff = mapM_ readFile
09:45:36 <tic> s/adding//
09:45:45 <Igloo> What are the types of ys, (:) and readStuff xs tic?
09:45:56 <SyntaxPolice> Segora: that won't help him figure out how to use do notation ;)
09:46:12 <Segora> SyntaxPolice: ah. misread the problem.
09:46:15 <tic> Igloo, ys is a String, (:) just adds the string to the vector, readStuff xs is IO String
09:46:30 <tic> (if I haven't misunderstood how the cons operator works)
09:46:37 <Igloo> vector?
09:46:40 <tic> array
09:46:45 <Igloo> Do you know about :t in hugs/ghci?
09:46:48 <tic> mhm
09:46:52 <tic> now I do. :)
09:46:57 * Igloo whispers "list"  :-)
09:47:08 <tic> a -> [a] -> [a]
09:47:11 <tic> hehe, okay :)
09:47:14 <Igloo> Right, yes
09:47:31 <tic> but, what do I want to do then? :-/
09:47:43 <SyntaxPolice> Igloo: thats funny, I read ":t" as "cons with a tail named 't'" :)
09:47:43 <Igloo> So (:) needs its arguments to be of type a and [a] and it returns [a]
09:47:52 <Igloo> Syn  :-)
09:47:59 <tic> Igloo, yup.
09:48:06 <tic> Igloo, ys is a String, right?
09:48:11 <tic> Igloo, or is it a IO String?
09:48:24 <Igloo> ys is a string
09:48:35 <tic> and I then add it together with (readStuff xs)
09:48:42 <Igloo> readStuff xs is IO [String] though (your type sig says so)
09:48:48 <tic> yeah
09:48:57 <Igloo> So readStuff xs isn't in the form [a]
09:49:07 <Igloo> So there's no way it can be the second argument of (:)
09:49:10 <tic> aha
09:49:20 <tic> so, how is this task done, generally?
09:49:28 <tic> read in all files in the argument to a list of strings?
09:49:43 <tic> preferably using the do-notation
09:49:45 <Igloo> Well, you have a way to get at the value inside a monad, right?
09:49:50 <SyntaxPolice> tic: you're very close.
09:49:56 <tic> let ?
09:50:17 <tic> like, let blah = readStuff xs?
09:50:21 <tic> and then ys:blah ?
09:50:23 <Igloo> No, that just binds a pattern to a variable
09:50:31 <tic> okay. not that then.
09:50:32 <Igloo> so blah :: IO [String] too
09:51:00 <Igloo> Think about what ys <- readFile x does
09:51:13 <SyntaxPolice> there is a strong similarity between let and the left-arrow thing in do notation.  one of them "gets to the value in the monad" and one of them just names an expression.
09:51:22 <tic> m'kay
09:51:30 <tic> ah, k.
09:51:39 <Igloo> In particular the types of readFile x and ys
09:51:40 <tic> so I should do zs <- readStuff xs
09:51:46 <tic> and then return ys:zs?
09:51:49 <Igloo> Right
09:51:52 <tic> wee :)
09:51:54 * tic tests
09:51:56 <Igloo> You'll need parentheses or $
09:52:48 * SyntaxPolice will be back soonish.
09:53:48 <tic> I changed the code into do { ys<-readFile x;  zs<-readStuff xs; return (ys:zs)}, but it wouldn't return anything on a list of file names
09:53:56 <tic> or maybe it isn't supposed to?
09:54:14 <Igloo> It returns an IO action
09:54:16 <tic> (tried in hugs)
09:54:19 <tic> yeah
09:54:30 <Igloo> If you actually want to see it you'll have to print it with putStr or something
09:54:32 <tic> ah
09:55:00 <tic> is there no way of "extracting" the string from the IO monad so I can see it directly at the console
09:55:01 <tic> ?
09:55:45 <Igloo> do res <- readStuff files; mapM_ putStrLn res    is probably what you want
09:55:47 <tic> print $ readStuff ["Main.lhs", "Test.hs"] -- prints out "<< IO action >>" on the console.
09:56:03 <tic> m'kay
09:56:12 <tic> thanks.
09:56:23 <tic> so
09:56:27 <tic> thanks for all the help!
09:56:53 <tic> good to know I must use 8-spaced tab stops or {}
09:57:05 * tic will stop annoying you guys for a while
09:57:06 <tic> :)
09:57:15 <Igloo> Or spaces!
09:58:33 <Segora> .. and another wonderful time spent with Haskell.
09:58:34 <Segora> :)
09:59:44 <tic> yap
10:00:15 <tic> even Python isn't that anal about correct indentation, actually, as long as you're consistent.
10:02:08 <tic> can I really use as many (or little) white spaces I want when I use do {...; ...} ?
10:02:25 <tic> hugs seems to be complaining about not recognizing my let... statement
10:03:43 <Segora> tic: {;} has the same meaning as indentation
10:04:11 <Segora> hugs does not support let as a toplevel expression. ghci does.
10:05:29 <Segora> silly me. i confused things again...
10:05:47 <Janni> h*!
10:05:59 <Segora> tic: what was the exact statement with let?
10:06:10 * Janni hates "let"
10:06:28 <tic> hmm
10:06:40 * Janni loves "where"
10:06:49 <tic> Segora, it seemed to have solved itself when I changed the do {....; ...} into a single tab
10:07:21 <tic> err
10:07:34 <tic> "last generator in do {...} must be an expression"
10:07:49 <Segora> makes sense ;)
10:07:56 <tic> yeah
10:08:01 <tic> here comes some code (beware!)
10:08:02 <tic> --
10:08:04 <tic>  readAllFiles :: [String] -> IO [String]
10:08:04 <tic>  readAllFiles [] = return []
10:08:05 <tic>  readAllFiles (x:xs) = do
10:08:05 <tic>          y <- readFile x
10:08:06 <tic>          z <- readAllFiles xs
10:08:07 <tic>          return $ y:z
10:08:08 <tic> --
10:09:20 <hdaume> uhm, is there something wrong with 'mapM readFile'?
10:09:24 <Segora> nice. btw did you see that?    readAllFiles = mapM_ readFile
10:09:47 <tic> yeah, I just wanted to to know how to do it using a do notation.
10:09:49 <tic> thanks though.
10:10:13 <Segora> mapM of course
10:10:26 <tic> but I get an error on that line, the one about "last generator in do... must be an expression"
10:10:28 <tic> why would I get that?
10:10:52 <tic> s/would/do
10:10:57 <Segora> hmm
10:11:40 <Segora> whitespace problem in the last line?
10:12:06 <tic> don't think so.. But you don't see any syntax errors?
10:12:11 <Segora> no
10:13:23 <Segora> ghci ate your code without a problem
10:13:26 <tic> what's the difference between mapM and mapM_B ?
10:13:27 <tic> okay
10:13:29 <tic> s/B/
10:13:31 <tic> s/B//
10:13:47 <Segora> the return type
10:13:48 <Janni> tic: look at the type signature (":t mapM")
10:14:07 <Janni> tic: always do that. you often can understand functions by their name + type signature
10:14:14 <tic> okay. Thanks.
10:24:27 * Riastradh is a bit confused about the 'newtype' declaration.
10:25:38 <hdaume> Riastradh: newtype is like a cross between type and data.  think of it just like a type synonym, but you get this extra constructor
10:26:03 <Riastradh> I get the idea of:  newtype Natural = MakeNatural Integer
10:26:36 <Riastradh> But I don't get what:  newtype Continuation r a = Continuation { runContinuation :: (a -> r) -> r }  means.
10:26:53 <hdaume> do you understand what that means if newtype were replaced by 'data'?
10:27:21 <Riastradh> You wouldn't be able to use naturals in integer contexts if you used 'data,' but you would if you used 'newtype,' right?
10:27:30 <hdaume> no, you wouldn't
10:27:38 <hdaume> that's the purpose of newtype...basically making it abstract
10:27:44 <hdaume> (or at least one purpose)
10:27:54 <hdaume> (Natural 5) + (5::Integer)   is a type error
10:28:13 <hdaume> regardless of whether it's a datatype or a newtype
10:28:26 <Riastradh> OK, then I'm still confused.
10:28:57 <hdaume> think of newtype as basically the same as data, except you can only have one constructor and only one argument to the constructor
10:29:37 <Riastradh> So it's just one layer of...stuff...to go on top of the original type?
10:29:46 <hdaume> yup
10:29:53 <Riastradh> OK, then I understand that.
10:29:59 <Riastradh> But what about the continuation example?
10:30:10 <mgoetze> yeah, just a layer of incompatibility. it's like a new windows version ;)
10:30:16 <Riastradh> (I'm a Schemer, so I must know about how continuations can be used in Haskell)
10:31:53 <hdaume> newtype Cont r a = Cont { runCont :: (a -> r) -> r} is the same as saying 'newtype Cont r a = Cont ((a -> r) -> r) ....... runCont (Cont r) = r'
10:32:08 <Riastradh> Ah, ok.
10:32:22 <hdaume> so it just makes an "extractor" function definition for you for free
10:46:54 * Riastradh is no longer confused about what that newtype declaration did, but is now confused about how the continuations described in the MonadicContinuationPassingStyle Wiki page works.
10:48:16 <Riastradh> Are there any other Schemers here who know how it works?
10:52:52 <Igloo> What's the URL?
10:53:26 <Riastradh> http://haskell.org/wiki/wiki?MonadicContinuationPassingStyle
10:55:38 <Igloo> Would it help if I said do x <- y; z is equivalent to y >>= \x -> z?
10:56:04 * Igloo is in the middle of something else so can't think about it properly right now (and I've never done anything with continuations either)
10:56:32 * Riastradh already knows that do x <- y; z is equivalent to y >>= \x -> z.
11:02:47 <smkl> well you just use callcc inside the continuation moned. it'll work like callcc in scheme
11:03:23 <Marvin--> Riastradh: what's the problem?
11:04:05 <Riastradh> Marvin-- - I'm rather confused about how continuations work and how to manipulate them based on that Wiki page.
11:04:26 <Marvin--> Riastradh: well, if you don't ask a question, I don't know what to answer :)
11:04:50 <Marvin--> (mind you, I'm not a continuation guru, but I've fiddled with it some)
11:05:18 <Riastradh> Marvin-- - OK, I can change that into a question: how do those continuations work and how can I use them?
11:05:58 <Marvin--> "how do they work" is kinda general :/
11:06:06 <Marvin--> you use them as any other monad
11:06:54 <Riastradh> Hmm...
11:08:11 <Marvin--> do you know what's even cuter than monadic continuation passing style? :)
11:08:30 <Marvin--> you can write a *monad transformer* that turns any monad into a CPS monad :-)
11:08:45 <Riastradh> Cool.
11:09:05 <Marvin--> http://www.cs.chalmers.se/Cs/Grundutb/Kurser/afp/MonadTrans.hs  look for ContT
11:09:14 <Riastradh> Do you know a little Scheme?
11:09:21 <Marvin--> no, unfortunately not
11:10:04 <Riastradh> OK, then let me explain a bit: functions -- (lambda parameter-list body), just like in Haskell, but functions actually take multiple arguments -- there's no currying; (call/cc f) -- calls f with the current continuation -- the place where that expression returns.
11:10:08 <Riastradh> Make sense?
11:10:10 <Janni> Riastradh: btw: "y >>= \x -> z" is also equivalent to "y >> z".
11:10:23 <Riastradh> Janni - Unless z uses x somewhere.
11:10:42 <Janni> ah yes, of course...
11:12:29 * Riastradh pokes Marvin--.
11:12:40 <Marvin--> Riastradh: no, not really
11:12:48 <Marvin--> (sorry, I went to the kitchen for a glass of water)
11:12:54 <Riastradh> Argh.
11:12:56 <smkl> i know enough scheme
11:13:26 <Riastradh> smkl - Ah, ok, then tell me how I would translate this to Haskell:  (call/cc (lambda (k) (k 42)))
11:14:17 <SyntaxPolice> tic: everything working?
11:14:18 <smkl> callcc (\k -> k 42) ?
11:14:54 <Marvin--> where does "the current continuation" come from?
11:15:04 <Riastradh> Marvin-- - It's the place where the call to call/cc returns.
11:15:13 <Riastradh> (f (call/cc g))
11:15:19 <Riastradh>    ^^^^^^^^^^^
11:15:31 <Riastradh> When you call k, the value you call it with will be put into that point.
11:15:33 <tic> SyntaxPolice, yap
11:15:39 <tic> SyntaxPolice, thanks for the help. :)
11:16:17 <Riastradh> smkl - No, that returns a continuation.
11:16:18 <Riastradh> Oh!
11:16:21 <Riastradh> Hmm.
11:16:25 <SyntaxPolice> tic: cool :)
11:16:40 <Riastradh> runCont (callcc (\k -> k 42)) id
11:16:43 <Riastradh> will return 42.
11:17:27 <smkl> yes. first you make your program using the monad and then run it with runCont
11:34:13 <ludde> with GHC, how do I compile a file if it depends on modules that are located in a different directory?
11:34:44 <Marvin--> -i?
11:35:40 <ludde> do I need one -i per module?
11:36:03 <Marvin--> no, it's a colon-separated list of directories to search
11:36:25 <ludde> ghc -o compiled/m -i compiled/ compiled/m_hmu.hs 
11:36:25 <ludde> ghc-5.04.1: file `compiled/' does not exist
11:37:21 <Marvin--> -icompiled
11:37:33 <ludde> cool thanks
12:26:48 <debug> where is shapr?
13:32:35 <Janni> AOL is just crazy! I can't send email to an AOL email account, because my host is not registered as a non-free-to-relay mail server at AOL
13:33:56 <Janni> sorry, if this is something, nobody is interested in or everybody knows but I just had to tell _anyone_...
13:34:07 <ludde> AOL sucks :(
13:34:47 <Janni> ludde: I knew that they suck but I just realised that they suck with their asshole
13:35:33 <ludde> did they add that restriction recently?
13:35:50 * Janni is sorry for rude language but now he can be calm again
13:46:58 <Janni> ludde: Don't know, but I also realised that the problem isn't that I have an open relay but because I have a dynamic IP
13:47:42 <Janni> +address. So I have to relay my mail to a server with static IP adress.
13:48:21 <ludde> ok
13:52:53 <Explodey> Its not just AOL.  Hundreds of ISP's do that
14:22:41 <Riastradh> That's odd.  shapr is connected, but not here.
14:29:36 <hdaume_lunch> how *dare* he
14:29:40 <hdaume_lunch> oops
15:16:03 <whee> helo shapr!
15:16:14 <shapr> vrfy whee
15:16:30 <whee> okay, usually noone picks up on that. nice :P
15:17:30 <shapr> um, ok :-)
15:17:48 <shapr> I should have said ehlo whee
15:17:52 <Marvin--> ehlo
15:18:01 <Marvin--> d'oh, you beat me to it :/
15:18:05 * shapr grins
15:18:17 <shapr> whee: see we're all deep magic people
15:18:21 <Janni> shapr, Marvin: man pop3
15:18:29 <Janni> aww fuckit
15:18:33 <Janni> pop3 is user
15:18:41 * opet blinks
15:18:49 * opet is disturbed
15:18:49 <Janni> but there's some mail protocol with "helo" also
15:19:27 <shapr> I strongly suspect we're talking about SMTP :-)
15:19:31 * Janni canceles his last 4 statements
15:19:44 <shapr> close though
15:20:02 <Janni> shapr: s/about//
15:20:07 * Marvin-- blinks at Janni
15:20:14 <Igloo> Just don't start using IMAP for the sake fo my sanity
15:21:10 * Marvin-- uses IMAP
15:21:41 <Igloo> Silly protocol, not allowing "HELP" as a command
15:25:14 * Pseudonym yawns
15:35:37 <shapr> hi Pseudonym 
15:36:35 <shapr> well, today I want to find out what sort of internal structure Haddock uses
15:36:44 <Riastradh> shapr, commit your changes to the hello module.
15:36:49 <shapr> er, sure
15:36:55 <shapr> how did you know I have changes?
15:37:56 <Riastradh> 06:13 < shapr> I made some small changes to the hello plugin
15:38:01 <shapr> oh :-)
15:39:09 * Riastradh curses at SourceForge for having ads.
15:39:33 <whee> what's there to change in a hello module? :P
15:39:55 <shapr> Riastradh: are you committing changes to the Hello module also?
15:40:04 <Riastradh> 06:12 < shapr> lambdabot: @hello We Are Receiving you.
15:40:13 <Riastradh> 06:12 < lambdabot> Hello world. We Are Receiving you.
15:40:17 <shapr> yes :-)
15:40:18 <whee> haha
15:40:28 <Riastradh> shapr - Er, no.
15:40:39 * shapr wakes up lambdabot
15:42:07 <Riastradh> lambdabot: @hello  All your base are belong to us.
15:42:07 <lambdabot> Hello world. All your base are belong to us.
15:42:14 * shapr grins
15:42:45 <shapr> lambdabot: @fact shapr
15:42:45 <lambdabot> SqlError {seState = "C", seNativeError = 1, seErrorMsg = "FATAL:  Password authentication failed for user \"shae\"\n\n"}
15:42:47 <shapr> whoops
15:42:58 <Janni> I just discovered the newsgroup alt.comp.lang.haskell. Is it new or have I just been blind?
15:43:17 <shapr> Janni: it's very recent
15:43:28 <shapr> I can't find a public server that has access to it :-(
15:43:40 <shapr> hi Smerdyakov
15:43:41 <Riastradh> Not even Google?
15:43:54 <shapr> oh, I could use google.
15:44:06 <shapr> lambdabot: @fact shapr
15:44:07 <lambdabot> Shae Erisson, wrote the factoid plugin for lambdabot
15:44:37 <mgoetze> hm, nope, not on my nntp server
15:49:17 <Janni> shapr: I'm using news.t-online.de but it's a German ISP. have a look at http://www.newzbot.com/search.php?q=alt.comp.lang.haskell
15:49:56 * shapr looks
15:50:59 * mgoetze likes news.fu-berlin.de, generally
15:51:36 * Janni likes a small amount of hops
15:55:02 * mgoetze wouldn't like news.t-online.de being a small amount of hops. ;)
16:02:41 <shapr> I wonder if a madlibs plugin would be amusing
16:03:25 <Smerdyakov> For what and to whom?
16:03:35 <shapr> for lambdabot 
16:04:20 <shapr> lambdabot: @fact lambdabot 
16:04:20 <lambdabot> the coolest (only) irc 'bot written in Haskell., is rude
16:04:43 <Smerdyakov> lambdabot: @fact lambdabot
16:04:44 <lambdabot> the coolest (only) irc 'bot written in Haskell., is rude
16:04:53 <shapr> uses postgresql :-)
16:04:57 <Janni> lambdabot: @fact shapr
16:04:57 <lambdabot> Shae Erisson, wrote the factoid plugin for lambdabot
16:04:59 <Janni> yay!
16:05:00 <Smerdyakov> lambdabot: @fact postgresql
16:05:00 <lambdabot> Nothing
16:05:18 <Smerdyakov> lambdabot: @fact Describe the inside of shapr's head.
16:05:19 <lambdabot> set Describe to the inside of shapr\'s head.
16:05:24 <Smerdyakov> AWwww
16:05:30 <shapr> lambdabot: @fact Describe
16:05:31 <lambdabot> the inside of shapr's head.
16:05:40 <Smerdyakov> =(
16:05:45 <shapr> I should make it case insensitive maybe
16:05:50 <shapr> lambdabot: @fact delete Describe
16:05:50 <lambdabot> deleted Describe
16:06:10 <Janni> lambdabot: @fact list
16:06:11 <lambdabot> Nothing
16:06:15 <shapr> oh, good idea
16:06:16 <Janni> (just guessing)
16:06:29 <shapr> that should return all the keys, right?
16:06:59 <shapr> Smerdyakov: if you want to put that factoid back in, you can... I was just showing off deletion :-)
16:07:11 <shapr> lambdabot: @fact source
16:07:11 <lambdabot>  http://sf.net/projects/haskell-libs/
16:07:14 <debug> hm
16:07:44 <Riastradh> lambdabot should have documentation for all the functions in the Standard Prelude and the various standard libraries.
16:07:51 <shapr> Riastradh: working on that right now
16:07:57 <shapr> Riastradh: by virtue of a Haddock plugin
16:07:58 <Riastradh> Oooh, good.
16:08:03 <Riastradh> 'Haddock' plugin?
16:08:07 <Smerdyakov> And the Encyclopedia Brittanica.
16:08:20 <shapr> http://www.haskell.org/haddock/
16:08:21 <Riastradh> Ectoplasm!  Bashi-bazouk!
16:08:25 <shapr> Smerdyakov: that's your job ;-)
16:08:54 * shapr nominates Smerdyakov to write the lambdapedia plugin
16:09:21 * Smerdyakov nominates shapr for the Bourgeous of the Week Award.
16:09:25 <Smerdyakov> ^ +i
16:10:01 <shapr> yes, I am burgeoning with brilliance
16:11:23 <shapr> Riastradh: http://www.haskell.org/haddock/#Examples
16:12:16 <shapr> After a short look, it seems that Haddock uses a simple top-level data structure, a list of (Module, Interface) tuples
16:14:33 <shapr> lambdabot: @fact htoolkit
16:14:33 <lambdabot>  http://sf.net/projects/htoolkit,  postgresql mysql and odbc bindings
16:14:58 <shapr> lambdabot: @fact postgresql used in the @fact plugin, http://www.postgresql.org/
16:14:58 <lambdabot> set postgresql to used in the @fact plugin, http://www.postgresql.org/
16:22:12 <Pseudonym> lambdabot: @fact recursion see recursion
16:22:13 <lambdabot> set recursion to see recursion
16:22:44 * shapr grins
16:22:47 <shapr> good morning Pseudonym 
16:23:13 <Pseudonym> Morning.
16:23:18 <shapr> wassup?
16:23:21 * Pseudonym has to pair program with someone in a couple of minutes
16:23:24 <Pseudonym> Can't stay long.
16:23:26 <shapr> yay!
16:23:31 <shapr> pair programming is great fun.
16:23:35 <Pseudonym> Indeed.
16:23:38 <Pseudonym> Not this code, though.
16:24:21 <shapr> well, pair programming at all is nifty
16:24:40 <Pseudonym> This is true.
16:24:47 <Pseudonym> It's not fun code, though, by necessesity.
16:24:48 <kunphuzil> Never buy a linksys WAP.. They really suck.
16:24:48 <shapr> I get to be in the same room with another programmer about twice a month :-)
16:25:09 <Pseudonym> We have some ASN.1 structures.  We want people to be able to make modifications.  We need to work out what modifications make sense.
16:25:10 <shapr> andersca_: you sure you don't want to visit Boden? :-)
16:25:20 <Pseudonym> And which ones are easy to do.
16:25:24 <Pseudonym> The code isn't fun.
16:25:26 <shapr> modifications to the structures? or to the content?
16:25:30 <Pseudonym> To the content.
16:25:37 <Pseudonym> Like, rename this thing.
16:25:38 <shapr> do you get to use Haskell?
16:25:41 <Pseudonym> No.
16:25:42 <shapr> oh.
16:25:50 <shapr> that sucks.
16:25:50 <Pseudonym> C++, unfortunately.
16:26:06 <shapr> you could do some neat tricks with Haskell.
16:26:29 <Pseudonym> What we effectively has is a simple theorem prove.
16:26:31 <Pseudonym> prover
16:26:43 <Pseudonym> Very, very, very simple.
16:26:46 <Smerdyakov> There is a lot of stuff out there that is dumb.
16:27:17 <Pseudonym> OK, gotta hack.
16:27:20 <shapr> cya
16:27:35 * shapr yawns
17:13:58 <Pseudonym> Back.
17:14:40 <shapr> ghc-5.04.2: panic! (the `impossible' happened, GHC version 5.04.2):
17:14:40 <shapr> 	ByteCodeGen.schemeE StgByteArray
17:14:41 <shapr> yay
17:18:48 <shapr> that sucks
17:18:59 <shapr> I guess I'll go to sleep instead.
17:21:07 <Pseudonym> Night.
17:24:03 <kunphuzil> If I put the following in a file, how do I load it as a module in hugs? isPalidrome phrase = (phrase == reverse phrase)
17:24:44 <Pseudonym> Say you put it in Stuff.hs.
17:24:51 <Pseudonym> You can load it from Hugs using: :load Stuff.hs
17:25:04 <Pseudonym> Or as a command-line argument: hugs Stuff.hs
17:35:34 <Riastradh> Or you can use C-c C-l from Emacs.
19:16:53 <kunphuzil> Pseudonym: Ok, thanks. (late)
