06:42:52 <shapr> lambdabot: @fact shapr 
06:42:52 <lambdabot> Shae Erisson, wrote the factoid plugin for lambdabot
06:43:38 <Marvin--> lambdabot: @fact lambdabot
06:43:52 <shapr> Marvin--: quick, add something :-)
06:43:57 <Marvin--> lambdabot: fine, be that way
06:43:58 <lambdabot> Sorry, I'm not a very smart bot yet.
06:44:10 <shapr> lambdabot: @fact lambdabot coolest irc bot written in Haskell
06:44:10 <lambdabot> set lambdabot to coolest irc bot written in Haskell
06:46:01 <Marvin--> lambdabot: @fact lambdabot
06:46:01 <lambdabot> coolest irc bot written in Haskell
06:46:09 <Marvin--> s/coolest/only/ :)
06:46:21 <shapr> lambdabot: @fact lambdabot als the only irc bot written in Haskell
06:46:21 <lambdabot> set lambdabot to als the only irc bot written in Haskell
06:46:24 <shapr> lambdabot: @fact lambdabot 
06:46:24 <lambdabot> coolest irc bot written in Haskell, als the only irc bot written in Haskell
06:49:30 <shapr> lambdabot: @fact delete lambdabot 
06:49:30 <lambdabot> deleted lambdabot
06:49:44 <shapr> lambdabot: @fact lambdabot the coolest (only) irc 'bot written in Haskell.
06:49:44 <lambdabot> set lambdabot to the coolest (only) irc \'bot written in Haskell.
06:50:08 <shapr> hm, I should unescape ticks on output
06:50:09 <Marvin--> no way to partially delete facts?
06:50:15 <Marvin--> hehe, cute
06:50:17 <shapr> not at the moment
06:50:27 <shapr> Marvin--: wanna fix it? ;-)
06:51:09 <shapr> Marvin--: actually, if you tell me how it should work I'll hack it in.
06:52:10 * shapr thinks
06:58:45 <shapr> hi pesco!
06:58:48 <shapr> ltns, what's up?
06:58:59 <pesco> Hey shapr, what's going on?
06:59:10 <shapr> I wrote a plugin for lambdabot over the weekend, yay!
06:59:15 <shapr> what's going on with you?
06:59:23 <pesco> What's lambdabot?!
06:59:33 <shapr> lambdabot: @fact lambdabot 
06:59:33 <lambdabot> the coolest (only) irc 'bot written in Haskell.
06:59:43 <shapr> lambdabot: @fact source
06:59:44 <lambdabot>  http://sf.net/projects/haskell-libs/
06:59:46 <pesco> Yeah!
06:59:52 <pesco> Since when does lambdabot exist?
07:00:00 <shapr> I dunno
07:00:02 <shapr> lambdabot: @fact author
07:00:02 <lambdabot>  Andrew Bromage aka Pseudonym
07:00:04 <pesco> labdabot: @fact birthday
07:00:15 <pesco> lambdabot: @fact birthday
07:00:27 <shapr> right now it doesn't return anything when there's no entry
07:00:29 <pesco> Ooh, ooh, can I implement that?
07:00:36 <shapr> I've fixed that already
07:00:41 <shapr> but I haven't restarted lambdabot 
07:01:02 <pesco> Oh, you can tell it about arbitrary facts?
07:01:06 <shapr> sure
07:01:11 <shapr> lambdabot: @fact birthday today!
07:01:11 <lambdabot> set birthday to today!
07:01:17 <shapr> lambdabot: @fact birthday
07:01:17 <lambdabot> today!
07:01:22 <pesco> Wonderful!
07:01:26 <shapr> lambdabot: @fact birthday or maybe yesterday
07:01:26 <lambdabot> set birthday to or maybe yesterday
07:01:29 <shapr> lambdabot: @fact birthday
07:01:29 <lambdabot> today!, or maybe yesterday
07:01:39 <shapr> lambdabot: @fact delete birthday
07:01:40 <lambdabot> deleted birthday
07:02:17 <shapr> pesco: even more fun, it uses PostgreSQL =)
07:02:24 <pesco> Yay!
07:02:43 <shapr> so it's a good working example of the pg bindings in HToolkit
07:02:47 <shapr> lambdabot: @fact htoolkit
07:02:48 <lambdabot>  http://sf.net/projects/htoolkit,  postgresql mysql and odbc bindings
07:03:10 <pesco> Man, what is HToolkit?
07:03:17 <shapr> you got the url ;-)
07:03:20 <pesco> Rather, by whoom.
07:03:44 <pesco> Ok, *browse*
07:06:40 <Marvin--> good grief, I'm getting spam with news from the war in iraq
07:08:06 <pesco> shapr: Do you know how a B-Tree works?
07:08:18 <pesco> shapr: I need to learn for a programming exam this Friday.
07:09:18 <shapr> erm, not off the top of my head, no
07:09:24 <shapr> hi BlitzNL 
07:10:33 <palomer> :o
07:10:37 <palomer> shapr!
07:10:46 <shapr> yes?
07:10:53 <shapr> how may I assist you?
07:11:10 <BlitzNL> hi shapr
07:12:12 <shapr> wassup?
07:45:41 <Marvin--> whoops
07:45:48 * Marvin-- accidentally gets a left-associative cons
08:43:28 <opet> are there library functions for playing with degrees/radians?
08:52:36 <Janni> hy
11:07:17 <Janni> I'm having problems with construct a PortNumber from Int
11:07:48 <Janni> newtype PortNumber = PortNum Word16 deriving ( Eq, Ord )
11:08:12 <Janni> ahh! I know my problem!
11:08:20 <Janni> concat: head <-> table
11:08:32 <Janni> s/concat/contact
11:09:05 <Janni> s/contact/repeated contact
11:10:16 <Igloo> I'm gald you know your problem because you aren't making much sense to me  :-)
13:14:24 <Igloo> Oh, looks like hat might work with recent GHC now
13:18:57 <shapr> yay!
13:19:34 <Igloo> Separated from nhc CVS too; I wonder if it'll work with GHC HEAD
13:20:25 <Janni> is there a doNothing :: IO () function?
13:20:50 <Igloo> return ()
13:21:35 <Janni> thx
13:22:59 <tic> hey guys
13:23:02 <Riastradh> Hi.
13:23:03 <tic> I have a problem
13:23:06 <tic> :)
13:23:09 <tic> I would need some help
13:23:13 <tic> it's three lines of code
13:23:16 <tic> maybe you could help me?
13:23:21 <tic> (if I could paste it in the channel*)
13:23:29 <Riastradh> Maybe.  Tell us your question and we'll see.
13:23:34 <Riastradh> s/Tell/Ask/1
13:23:38 <mgoetze> three lines is fine
13:23:46 <tic>  updateTree :: Int -> [String] -> Tree a b -> Tree a b
13:23:47 <tic>  updateTree n [] (Join left k v right) = (Join left k v right)
13:23:47 <tic>  updateTree n (x:xs) (Join left k v right) = updateTree n xs (insertWord x n (Join left k v right))
13:23:56 <Riastradh> Up to about eight is fine, I'd say.
13:24:11 <tic> insertWord :: .... -> Tree a [b]
13:24:29 <tic> error :  Inferred type is not general enough
13:24:37 <Janni> tic: maybe you should give us the definition of your tree data-type
13:24:42 <tic> sec
13:24:56 <tic> data Tree a b = Join (Tree a b) a b (Tree a b) | Empty
13:25:11 <andersca> tic: data structures course? :)
13:25:17 <Igloo> You probably want Tree a [b] in your type signature, but it's hard to tell from that
13:25:33 <Janni> Igloo: should be a binary tree, I guess
13:25:35 <tic> andersca, lab2, ptc :)
13:25:46 <tic> Igloo, "type signature" == ?
13:25:50 <tic> It's a binary three, yup
13:25:53 <tic> tree, even
13:25:56 <Igloo> The updateTree :: line
13:25:57 <andersca> ptc?
13:26:04 <andersca> oh right
13:26:05 <andersca> chalmers stuff
13:26:08 <tic> andersca, right :)
13:26:24 <tic> m'kay..
13:26:26 <tic> testing.
13:26:31 <Igloo> If that's not right then show what the error message says
13:26:42 <tic> Inferred type is not general enough
13:26:47 <tic>  *** Expected type : Int -> [String] -> Tree a [b] -> Tree a [b]
13:26:48 <tic>  *** Inferred type : Int -> [String] -> Tree [Char] [Int] -> Tree [Char] [Int]  
13:27:09 <Igloo> Oh, right, well it kinda means what it says  :-)
13:27:22 <Igloo> It#'s inferred that it has the second type while you are telling it it has the former
13:27:32 <tic> err
13:27:52 <tic> it has the former type but I'm giving it the latter, you mean?
13:28:08 <tic> So how would I solve this?
13:28:37 <Igloo> Change the type to the second one if it is right, or if it's wrong work out why it is infering it as such
13:28:52 <Igloo> And no, I meant what I said
13:28:55 <tic> oka
13:28:55 <tic> okåay
13:28:56 <tic> oay
13:28:58 <tic> argh.
13:29:03 <tic> Okay, thanks for the help
13:29:06 <tic> I'm going to debug the rest of my app now. :)
13:29:21 <Igloo> When you say foo :: a -> b you are saying that it works for any a and b, whereas it has inferred the type and found it only works for Char -> Int
13:29:28 <tic> eah
13:29:29 <tic> yeah
13:29:32 <Igloo> (simplifying the types rather)
13:29:38 <tic> *nod*
13:30:19 <Janni> I'm experiencing some strange behaviour with ghc. I have the program "main = putStr "gimme some> " >> getLine >>= putStrLn" but the "gimme some> " is only printed _after_ getLine is performed...
13:30:47 <Igloo> hSetBuffering stdout NoBuffering or similar
13:31:46 <Janni> Igloo: tested, works, yay, thx
13:32:14 <tic> hrm
13:32:23 <tic> how to convert an IO String into String?
13:32:48 <Janni> tic: you should learn about Monads
13:32:54 <Igloo> Read an IO tutorial  :-)
13:33:08 <tic> well
13:33:16 <tic> do I need to put _everything_ in a monad if I read from a file?
13:33:50 <Janni> tic: _everything_? no. your head for example: you don't have to put it into a monad
13:33:51 <tic> I'd like to use ``lines'' on readFile "blah"
13:34:00 <tic> Janni, :)
13:34:02 <hdaume> foo = do
13:34:06 * Janni wants to give a hint to specify "everything"
13:34:06 <hdaume>   x <- readFile bar
13:34:11 <hdaume>   let z = lines x
13:34:12 <hdaume>   ...
13:34:19 <tic> hrm
13:34:33 <hdaume> or, 'let z = some_pure_function_on x'
13:34:41 <tic> aha
13:34:49 <hdaume> then, perhaps, 'print z'
13:34:50 <tic> ahh
13:34:51 <tic> right
13:34:52 <tic> gotcha
13:34:54 <Janni> tic: the "x <- ..." only works in a "do" environment
13:34:57 <tic> silly, totally forgot about that
13:34:58 <tic> yeah
13:35:01 <tic> now i remember.
13:35:02 <tic> thanks guys
13:35:06 <Janni> tic: or "readFile >>= ..."
13:35:50 <Janni> tic: my example should confuse you and show you the need to learn about I/O
13:36:03 <tic> Janni, yup.
13:36:23 <Janni> (I forgot the arguments to readFile, of course)
13:36:34 <tic> readFile FilePath :: IO String
13:36:38 <pesco> The file name :)
13:37:12 <tic> this is a case where the purity is a real pain:
13:37:17 <tic> (pasting three lines again)
13:37:22 <tic>  addFilesToTree (x:xs) tree = addFilesToTree xs newTree
13:37:23 <tic>  	where
13:37:23 <tic>  		newTree = addLinesToTree (lines (readFile x)) tree
13:37:30 <pesco> Janni: Oh ok, you meant the actual arguments, I guess...
13:37:40 <tic> this is obviously invalid
13:37:59 <tic> but could I use what I got from "lines" to addLinestoTree?
13:38:07 <debug> hm
13:38:16 <hdaume> tic: take a look at foldM
13:38:26 <tic> thanks.
13:41:58 <tic> can't find any info on foldM that's relevant. :(
13:42:44 <hdaume> tic: You want something like 'foldM (\fn tree -> do x <- readFile fn; return (addLinesToTree tree (lines x))) emptyTree list_of_files'
13:43:20 <tic> a-ha.
13:43:31 <hdaume> foldM is like foldr/foldl, but the funciton becomes an action
13:43:39 <hdaume> in this case, we read the file and then add the lines to our accumulated tree
13:44:01 <tic> the type I had originally will be wrong now, right?
13:44:10 <hdaume> probably :)
13:44:19 <tic> will it be something IO-ish?
13:44:34 <hdaume> yup
13:44:41 <tic> hm. well, that doesn't matter
13:44:51 <tic> as long as addLinesToTree doesn't have to be IO-ish
13:44:52 <hdaume> another alternative would be to first read in all the files, then concat the results
13:44:58 <tic> yup
13:45:34 <hdaume> something like 'do files <- mapM readFile file_list; return (addLinesToTree (concat (map lines files)) emptyTree)'
13:45:46 <hdaume> which might be cleaner, but requires a bit more memory since it processes them all at once
13:45:51 <tic> hrm
13:45:56 <tic> I don't want to concatenate all lines
13:46:15 <tic> as this depends on addLinesToTree being called once for every file
13:46:27 <hdaume> ok
13:46:33 <tic> so the first one seems nice.
13:46:35 <tic> thanks!
13:46:37 <hdaume> then you could get rid of the concat and make it a foldr
13:46:52 <tic> what's map lines files do?
13:47:04 <hdaume> applies 'lines' to each input text
13:47:05 <tic> do a [(line, file)] ?
13:47:10 <tic> err
13:47:13 <tic> right. :)
13:47:16 <tic> lines is a function.
13:47:29 <tic> ahh
13:47:31 <Riastradh> map, not zip.
13:47:37 <tic> nowI understand it. :)
13:49:44 <tic> and now, sleep
13:49:48 <tic> thanks for the help!
13:49:54 <Riastradh> Sleep is good.
13:51:46 <tic> mhm
13:54:51 <Igloo> Nah, it's not pure
13:56:02 <pesco> If sleep is not pure, then what is?
13:56:14 <Riastradh> The Lambda-Calculus, duh.
13:57:11 <pesco> s/then what/then what out of the alternatives to sleep/
14:01:27 <Riastradh> Oh.
14:01:34 * Riastradh knows not.
14:02:05 <Igloo> It's inherently impure functionality
14:02:36 <Igloo> Disgusting habit
14:03:02 <pesco> What do you mean by impure functionality?
14:04:19 <Igloo> Well, in the same way that reading from a file is impure (you realise I'm not being serious, right?)
14:05:43 <pesco> Hm, ok (yes.)
14:09:07 <Igloo> Bah, hmake and hat both some to have broken compilation stuff
14:09:11 * Igloo decides I don't care enough
14:10:50 <debug> hm
14:11:13 <shapr> wha?
14:11:43 * shapr boings
14:14:02 <mgoetze> shapr: watch your head, low ceiling in here :)
14:15:02 * shapr boings carefully
14:23:18 <debug> yo
14:23:23 <shapr> y0 y0
14:23:27 <debug> Ok.
14:23:34 <shapr> .kO
14:23:45 * shapr reads up on Haddock
14:23:46 * debug has been doing Traveling Salesman stuff all evening
14:23:54 <shapr> debug: are you tired of traveling?
14:25:24 <shapr> pesco: you working on a module for lambdabot ?
14:25:43 <pesco> No. :)
14:25:50 <shapr> ok, just checking
14:26:06 <pesco> Unless we have a use for B-Trees in it somewhere. ;)
14:26:16 * shapr dunno
14:26:56 <pesco> What was the module you wrote last weekend?
14:27:05 <shapr> FactModule
14:27:32 <shapr> I have an idea for another module, investigating difficulty right now
14:29:08 <Igloo> What's that, shapr?
14:29:23 <shapr> Igloo: a haddock plugin
14:29:53 <Igloo> Ah
14:30:05 <shapr> Igloo: do you think that would be useful?
14:30:16 <debug> shapr: TSP... school stuff :)  I'm not really traveling
14:30:19 <shapr> something where you can put in the name of a type or function and see the docs?
14:30:22 <shapr> debug: aww
14:30:34 <shapr> debug: I traveled to Haparanda and back today.
14:30:37 <shapr> but I wasn't selling anything.
14:30:52 <Igloo> Maybe - depends partly how big they are
14:30:54 <andersca> shapr: I'm travelling to umeå tomorrow
14:31:02 <shapr> yay! come see me!
14:31:15 <shapr> actually umeå is like three hours ride from here isn't it?
14:31:21 <shapr> say hi to danl from me :-)
14:31:22 <Igloo> :-)
14:31:31 <debug> hm
14:31:46 <debug> andersca: for drug trade
14:31:46 <debug> ?
14:31:49 * Igloo thinks you all should have come to FoP so I don't have to worry about getting to ICFP/HW  :-)
14:31:55 <shapr> heh
14:32:56 <shapr> Igloo: can you think of a more useful plugin?
14:33:22 <shapr> search one of google, citeseer, haskell-wiki, H98 report maybe?
14:34:11 <Igloo> I think somethign that tells you the type of a prelude/standard library function would be most useful
14:34:26 <shapr> ok
14:34:30 <pesco> yes
14:35:04 <Igloo> And whatever generic infobots do if you're looking for random functionality to add
14:40:54 <Explodey>  Igloo: were you at FoP?
14:43:29 <Igloo> Yup
14:45:22 <pesco> shapr: Teach lambdabot to perform the POEE Baptismal Rite.
14:45:46 <shapr> heh
14:46:01 <shapr> tada! you're a Pope!
14:46:14 * pesco grins broadly
14:46:52 <shapr> Explodey: do I know you?
14:47:33 <Explodey> shapr: No
14:49:15 <shapr> Explodey: welcome to the #haskell channel. How may we assist you? :-)
14:50:29 <shapr> Paratheoanametamystihood of Eris Esoteric... one of my favorite disOrganizations.
14:54:37 <shapr> Explodey: I'd guess you're Finn Wilcox.
14:54:56 <Explodey> yes
14:55:02 <shapr> Hi, I'm Shae Erisson.
14:55:12 <Marvin--> my head aches from rolling my eyes too much (been watching Buffy)
14:55:16 * shapr grins
14:55:31 <shapr> Marvin--: the intellectual humor is getting the better of you?
14:55:39 <andersca> Marvin--: nice episode, wasn't it? :)
14:55:42 <Marvin--> I'm not sure "intellectual" is the proper word
14:55:46 * shapr laughs
14:56:08 <debug> Marvin--: you shouldn't watch buffy
14:56:15 <Marvin--> andersca: let me put it this way, it wasn't worse than any other I've seen
14:56:41 <Marvin--> debug: I heard that it got better after season one or two or something, so I decided to watch some episodes
14:56:51 <Marvin--> now I'll happily conclude that it still sucks
14:57:05 <Marvin--> it's almost as bad as Enterprise
14:57:09 <Marvin--> and Voyager
14:57:12 <Explodey> marvin: if you don't like season 3 you probably wont like any of it
14:57:21 <shapr> I watch Enterprise and Voyager
14:57:22 <Marvin--> Explodey: I don't know which season this was
14:57:29 <shapr> must have my Star Trek fix
14:57:36 <pesco> I like Knight Rider and The A-Team.
14:57:41 <Marvin--> this was the season finale, where the mayor turned into a big slimey snakey monster
14:57:44 <Marvin--> that they killed
14:57:50 <Explodey> I've only seen the 1st episode of Enterprise but I like it so far
14:57:54 <andersca> pesco: and Batman The Original Series
14:58:01 <Explodey> yes thats season 3
14:58:16 <shapr> the theme music of Enterprise makes me break out in a rash
14:58:18 <pesco> andersca: Oh, of course, nothing beats the Commissioner.
14:58:21 <Marvin--> then I think I've seen about the second half of season three
14:58:36 <debug> hm
14:58:44 <Marvin--> and by god it's bad
14:58:47 <andersca> pesco: gordon? :)
14:58:55 <shapr> Bea and I just started watching all the movies in the top 250 of imdb.com
14:58:56 <Marvin--> it's all clever dialog and fighting
14:59:00 <andersca> shapr: it's not so bad once you get used to it
14:59:12 <shapr> andersca: I've tried, we own six tapes of Enterprise or so
14:59:21 <pesco> andersca: Yes!
14:59:21 <Explodey> shapr: did you recognise my email address from somewhere?
14:59:23 <andersca> shapr: then you're weird :)
14:59:33 <shapr> andersca: I still start screaming till someone fast forwards past the theme music.
14:59:52 <shapr> Explodey: I searched for 'finnw haskell' on google ;-)
15:00:05 * shapr gives away the secret to all his tricks
15:00:20 <shapr> I effectively gained 50 IQ points when I found google.
15:00:29 <pesco> Haha
15:00:47 <Explodey> I don't know of any pages containing both words :-)
15:01:29 <shapr> http://www.google.com/search?hl=xx-hacker&ie=ISO-8859-1&q=finnw+haskell&btnG=Google+534R%28H
15:01:38 <shapr> enjoy my nifty language settings ;-)
15:02:01 <shapr> from those results, I assume you not just starting with Haskell.
15:02:01 * Marvin-- looks at the top 250 and is embarassed that he hasn't seen The Godfather
15:02:06 <pesco> haha, good old pipermail got ya
15:02:19 <Marvin--> nor have I seen Citizen Kane
15:02:34 <shapr> I just borrowed the three Godfather and we started watching them tonite
15:02:42 <shapr> we got halfway through the first one and Bea fell asleep.
15:03:03 <Marvin--> heh
15:03:24 <pesco> earch?hl=xx-hacker&ie=ISO-8859-1&q=finnw+haskell&btnG=Google+534R%28H
15:03:25 <pesco> 00:01 < shapr> enjoy my nifty language settings ;-)
15:03:35 <pesco> Er, oops sorry.
15:03:35 <shapr> is it midnight already?
15:03:41 <Marvin--> kinda sad that FotR is #4 and that the star wars movies are that high up
15:03:53 <Marvin--> I guess you get a kinda geeky top 250
15:03:54 <shapr> I think the star wars movies are great.
15:04:44 <Marvin--> they're good, but I don't find them comparable to e.g. Schindler's List
15:05:07 <Marvin--> Dark City isn't even in the list :-(
15:05:16 <shapr> we got the Shawshank Redemption on DVD for 59 kronor at Domus
15:05:31 <Explodey> what top 250 are you looking at?
15:05:39 <Marvin--> I've never heard of the movie, but I'll see if I can get it :)
15:05:40 <shapr> http://us.imdb.com/top_250_films
15:05:52 <Marvin--> Fight Club on #39?! It deserves better than that :/
15:06:02 <shapr> I've never seen Fight Club
15:06:21 <pesco> Why do I always disconnect?
15:06:31 <shapr> pesco: we bore you?
15:06:39 <Marvin--> shapr: see it
15:06:44 <shapr> ok, I will.
15:06:58 <shapr> I saw Casablanca for the first time a month or so ago
15:07:13 <andersca> we have prepared some nice films for the hackathon
15:07:20 <Riastradh> I did too, shapr.
15:07:37 <Igloo> To make a DAG imperatively am I right in thinking you have a hash table that takes the expressino you have and returns the address of the node if it exists, and you make a new one and add it to the table if it doesn't?
15:07:50 <Marvin--> I'm not sure I think Alien is good enough for #62 :)
15:07:54 <Marvin--> Igloo: hush, that sounds on topic :-)
15:08:06 <Igloo> Nah, it's imperative  :-)
15:08:10 <Marvin--> ah, go on then
15:08:13 <andersca> shapr: plan 9 from outer space
15:08:20 <andersca> shapr: creature from the black lagoon
15:08:27 * shapr laughs
15:08:30 <andersca> ed wood
15:08:32 <andersca> nosferatu
15:08:35 <Marvin--> Clockwork Orange deserves much better than #68!
15:08:46 <Explodey> not many british films there
15:08:57 <andersca> is dr strangelove in the list
15:09:00 <andersca> now that's a good movie
15:09:04 <Explodey> The Matrix is too high as usual
15:09:05 <pesco> What about Brazil?
15:09:06 <Explodey> yes it is
15:09:08 <Marvin--> andersca: #11
15:09:11 <andersca> Marvin--: cool
15:09:15 <shapr> pesco: Brazil is very strange
15:09:15 <Riastradh> WHAT!?  A Clockwork Orange isn't at least in the top 20?
15:09:23 <Marvin--> Riastradh: sad, isn't it?
15:09:33 <shapr> I haven't seen Dr. Strangelove
15:09:38 <Riastradh> You ought to see it.
15:09:45 <Explodey> no brazil, no time bandits, not even Life of Brian
15:09:48 <shapr> lots of these I haven't seen.. I spend all my time at my keyboard
15:09:54 <Marvin--> *Jaws* was rated over *Blade Runner*?
15:09:59 <shapr> brazil is in there
15:10:01 <pesco> shapr: Brazil is my favourite movie.
15:10:02 <Riastradh> No Time Bandits?  Argh!
15:10:09 <shapr> time bandits is coool
15:10:14 <Riastradh> What about Mr Smith Goes to Washington?
15:10:19 <shapr> never heard of it
15:10:33 <Riastradh> It's one of those other great movies made in 1939.
15:10:38 <shapr> quick someone write a movie rating plugin for lambdabot 
15:10:42 <Marvin--> heh, The Princess Bride is #88
15:10:43 <shapr> lambdabot: @listmodules
15:10:43 <lambdabot> I have the following modules installed: ["fact","hello"]
15:10:45 <Explodey> Oh so it is
15:10:57 <Marvin--> Riastradh: #64
15:11:04 <Riastradh> Argh!
15:11:07 <Riastradh> What are some of the higher ones?
15:11:12 <Riastradh> Like, what's #1?
15:11:19 <shapr> godfather
15:11:20 <Marvin--> The Godfather
15:11:36 <Riastradh> How about #2?
15:11:38 <Marvin--> #2 is The Shawshank Redemption
15:11:42 <Marvin--> #3 is Godfather II :-P
15:11:43 <Riastradh> That's a good movie.
15:11:45 <Riastradh> Heh.
15:11:49 <Marvin--> #4 is FotR
15:11:50 <shapr> Riastradh: d00d, don't you have a webbrowser?
15:11:53 <shapr> http://us.imdb.com/top_250_films
15:11:58 <Riastradh> shapr - Heh, I was just about to ask what you were looking at.
15:12:11 <Marvin--> Det Sjunde Inseglet is #106 :-)
15:12:15 <Marvin--> rated just below Shrek, heh
15:12:21 <shapr> lambdabot: @fact imdb http://us.imdb.com/top_250_films
15:12:22 <lambdabot> set imdb to http://us.imdb.com/top_250_films
15:12:37 <shapr> lambdabot: @fact Explodey Finn Wilcox
15:12:38 <lambdabot> set Explodey to Finn Wilcox
15:12:43 <shapr> lambdabot: @shapr
15:12:43 <lambdabot> Sorry, I don't know that command.
15:12:48 <shapr> lambdabot: @fact shapr
15:12:48 <lambdabot> Shae Erisson, wrote the factoid plugin for lambdabot
15:12:50 <shapr> yay!
15:13:03 <Explodey> At least Lock Stock & 2 Smoking Barrels is there (#205)
15:13:15 <shapr> I haven't heard of that movie.
15:13:28 * shapr wonders whether umlauts will make lambdabot explode
15:13:34 * Riastradh curses at the fools that wrote this list.
15:13:41 <shapr> lambdabot: @fact Marvin-- Martin Sjögren
15:13:41 <lambdabot> set Marvin-- to Martin Sjögren
15:13:44 <shapr> wow
15:13:45 <shapr> it worked.
15:14:12 <Marvin--> The Untouchables is #211
15:14:49 <Riastradh> Fantasia ought to be much farther up.
15:15:09 <Marvin--> niiice, The Usual Suspects is #16
15:15:13 <shapr> lots of these I've never heard of
15:15:29 <Riastradh> shapr, have you seen Fantasia?
15:15:40 <shapr> hey, have you guys seen "For the Birds" short that comes on the DVD with Monsters, Inc. ?
15:15:42 <shapr> Riastradh: nope
15:15:48 <Riastradh> You ought to.
15:15:53 <Marvin--> I haven't, I really want to see it
15:15:58 <Marvin--> I have only seen excerpts from it
15:16:06 <Riastradh> I think we need to compile a list of the movies shapr needs to see.
15:16:09 <Marvin--> Fantasia that is
15:16:15 <Riastradh> He'll be busy for a long while.
15:16:17 <Marvin--> hey, I need that kind of list too
15:16:19 <shapr> Marvin--: well, grab a ride with andersca and I'll loan you the DVD ;-)
15:16:28 <Marvin--> shapr: I meant Fantasia
15:16:29 <shapr> Riastradh: quick, write a plugin for lambdabot!
15:16:33 <shapr> oh
15:16:33 <Riastradh> Ewww, what's Minority Report doing up there!?
15:16:43 <Marvin--> Riastradh: I'm wondering that too
15:16:47 <shapr> doesn't that have Mr. Scientology in it?
15:17:09 <Marvin--> ?
15:17:12 <Riastradh> And Spartacus is behind Gladiator?!
15:17:16 <shapr> er, what's his name...
15:17:19 <shapr> the mission impossible guy
15:17:27 <shapr> chuck? curt?
15:17:31 <Riastradh> Gack, T2 is before T1!
15:17:32 <Marvin--> Riastradh: haven't seen Spartacus (it's on my list), Gladiator sucked
15:17:39 <Marvin--> Riastradh: that sucks too
15:17:41 <shapr> I like Gladiator
15:17:44 <shapr> I bought it on DVD
15:17:59 <Riastradh> T2 had cooler special effects; T1 was a much better movie in general.
15:18:02 <Marvin--> it was simply another mindless action movie IMO
15:18:11 <shapr> yah, I like that kind of thing :-)
15:18:18 <shapr> well done mindless action movies.
15:18:36 <shapr> after reading about multi-paramater typeclasses for awhile
15:18:37 <Marvin--> I guess it's nice for a tired evening, but it's not *good movie*
15:18:45 <Riastradh> Gah, what's 2001 doing past 50?
15:18:48 <shapr> I don't want to have a thinking movie
15:18:53 <Marvin--> wht, MPC isn't enough action? :-)
15:18:58 * Riastradh would have put it up at 2 or 3.
15:19:02 <shapr> Riastradh: hey, at least it's not eponymic
15:19:08 <Riastradh> Eponymic?
15:19:10 <Marvin--> epo-what?
15:19:14 * shapr laugsh
15:19:27 <shapr> eponym = described by the name
15:19:28 <Marvin--> lambdabot: @fact eponymic
15:19:39 <shapr> lambdabot: @fact eponym described by the name
15:19:39 <lambdabot> set eponym to described by the name
15:19:40 <Marvin--> hey, we need a dict plugin
15:19:48 <shapr> Marvin--: quick write one ;-)
15:19:49 <Riastradh> So -that's- what oasa's game means...
15:19:54 <shapr> I'll add that to the list.
15:19:55 <andersca> shapr: or rather
15:19:56 <andersca> quick check one
15:19:57 <andersca> ;)
15:20:01 <shapr> huh?
15:20:04 <Marvin--> andersca: duhhh
15:20:17 <Janni> can I check if an environment variable is checked somehow?
15:20:21 <andersca> Marvin--: so is quickcheck cool? 
15:20:22 <Janni> s/checked/set
15:20:27 <shapr> quickcheck is *very* cool
15:20:40 <Marvin--> andersca: quickcheck is cool, but requires more manual work than you're led to believe
15:21:11 <Marvin--> you have to be Smart in your properties
15:21:26 <pesco> And the random Gen part is not really very random.
15:21:27 <shapr> I think it's worth combining both HUnit and QC 
15:21:36 <shapr> pesco: that's what coarbitrary stuff is for
15:21:38 <Marvin--> pesco: well, that's where the Smartness comes in
15:21:42 <shapr> hi Pseudonym!
15:21:45 <Pseudonym> G'day,.
15:21:49 <Riastradh> shapr - Hmm, how does one go about writing lambdabot modules?  Is there documentation on it?
15:21:50 <Marvin--> I haven't understood coarbitrary, what does it do?
15:22:00 <pesco> shapr: What is the coarbitrary stuff (remind me)
15:22:02 <shapr> Riastradh: sure, look at the HelloModule
15:22:17 <shapr> pesco: coarbitrary is the slider control
15:22:17 <Marvin--> lambdabot: @fact lambdabot
15:22:17 <lambdabot> the coolest (only) irc 'bot written in Haskell., is rude
15:22:23 <Marvin--> hrrm
15:22:28 <Marvin--> I was hoping for a url
15:22:31 <shapr> so you can dial up or down the randomness/complexity
15:22:35 <shapr> lambdabot: @fact source
15:22:36 <lambdabot>  http://sf.net/projects/haskell-libs/
15:22:39 <Marvin--> oh
15:22:40 <shapr> lambdabot: @fact author
15:22:41 <lambdabot>  Andrew Bromage aka Pseudonym
15:22:51 <Riastradh> lambdabot: @fact haskell-libs
15:22:58 <Riastradh> ...
15:23:05 <shapr> I've fixed it to return "Nothing" now
15:23:07 <pesco> shapr, Marvin--: Nah, I think there was actually something with its use of the RNG internally.
15:23:11 <shapr> but I haven't restarted it
15:23:18 <Riastradh> lambdabot: @fact haskell-libs http://sourceforge.net/projects/haskell-libs/
15:23:21 <lambdabot> set haskell-libs to http://sourceforge.net/projects/haskell-libs/
15:23:21 <whee> you have to restart it? yuck
15:23:22 <whee> :PP
15:23:27 <pesco> I can't remember it right now though.
15:23:33 <Marvin--> hmm, I thought I had the sources checked out somewhere
15:23:40 <shapr> whee: quick, port the plugin system to use the runtime_loader
15:23:53 <shapr> then we won't have that problem
15:23:57 <Pseudonym> http://mds.rmit.edu.au/~ajb/rt.png
15:23:59 <Pseudonym> We have motion blur.
15:24:01 <shapr> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/FactModule.hs?rev=1.3&content-type=text/vnd.viewcvs-markup
15:24:06 <whee> :P
15:24:25 <shapr> Pseudonym: nifty!
15:25:03 <Pseudonym> Took hours to render, though.
15:25:46 <shapr> Riastradh: modules are really simple, you just implement the "process" typeclass method
15:26:21 <Riastradh> How do you implement different commands?
15:26:52 <shapr> at the moment, a module is a command, sort of
15:26:56 <shapr> lambdabot: @listmodules
15:26:57 <lambdabot> I have the following modules installed: ["fact","hello"]
15:27:04 <shapr> so that means you have:
15:27:06 <shapr> lambdabot: @hello
15:27:06 <lambdabot> Hello world. 
15:27:08 <shapr> lambdabot: @fact
15:27:11 <Riastradh> Haha.
15:27:11 <whee> aahjhahah
15:27:12 <shapr> oops
15:27:14 <shapr> hm
15:27:19 * Pseudonym laughs
15:27:46 * shapr blushes
15:27:47 <whee> shapr: couldn't QuickCheck get that one? :)
15:27:56 <andersca> haha
15:27:59 <shapr> whee: sure, if I had done the disciplined thing and actually written tests for it ;-)
15:28:00 <Pseudonym> You might want to catch exceptions at the top-level or something.
15:28:08 <Pseudonym> Print them out for all to see.
15:28:18 <shapr> I'm catching and printing SqlErrors
15:28:21 <shapr> but that's all
15:28:36 * shapr fixes that bug 
15:28:41 <Pseudonym> <lambdabot> Caught error: Bad password 'lovepumpkin' for username 'shapr'.
15:28:51 <pesco> hehe
15:28:52 <shapr> eh?
15:28:59 * shapr grins
15:29:32 <pesco> "Hey, where'd you know my pas... erm whatever!"
15:30:29 <shapr> I think access control could be useful for @quit and @join at least
15:30:40 * Pseudonym nods
15:30:49 <Pseudonym> I think they should be modularised, BTW.
15:30:54 <shapr> yah, I agree.
15:31:02 <Igloo> Password authentication gives you a reason to write persistent stuff too
15:34:33 <shapr> lambdabot: @fact
15:34:34 <lambdabot> empty factoid, BZZZT, thank you for playing!
15:34:38 * shapr grins
15:34:55 <shapr> lambdabot: @fact foo
15:34:55 <lambdabot> SqlError {seState = "C", seNativeError = 1, seErrorMsg = "FATAL:  Password authentication failed for user \"shae\"\n\n"}
15:34:59 <shapr> um
15:35:06 <shapr> Pseudonym: did you change my password??
15:35:14 * Pseudonym laughs
15:35:18 * shapr grins
15:35:19 <Pseudonym> I didn't know I could.
15:35:45 <Marvin--> lol
15:35:48 <Pseudonym> lambdabot: @passwd shae wanklerotaryengine
15:35:48 <lambdabot> Sorry, I don't know that command.
15:35:51 <Pseudonym> Damn.
15:35:54 <shapr> heh
15:36:00 <shapr> lambdabot: @fact
15:36:00 <lambdabot> empty factoid, BZZZT, thank you for playing!
15:36:02 <shapr> lambdabot: @fact imdb
15:36:03 <lambdabot> http://us.imdb.com/top_250_films
15:36:07 <Riastradh> lambdabot: @fact haskell-libs
15:36:08 <lambdabot> http://sourceforge.net/projects/haskell-libs/
15:36:08 <shapr> lambdabot: @fact lambdabot
15:36:08 <lambdabot> the coolest (only) irc 'bot written in Haskell., is rude
15:36:19 <Marvin--> lambdabot: @fact @fact
15:36:20 <lambdabot> Nothing
15:36:26 <shapr> uh oh
15:36:42 <whee> heh
15:36:57 <Pseudonym> Now here's a challenge for someone.
15:37:04 <Pseudonym> A lambdabot <-> haddock binding.
15:37:13 <shapr> hey, I was just working on that :-)
15:37:15 <Pseudonym> lambdabot: @type foldr
15:37:16 <lambdabot> Sorry, I don't know that command.
15:37:21 * Pseudonym laughs
15:37:35 <Riastradh> lambdabot: @fact @fact 'lambdabot: @fact <term> <description>' -- sets the definition for '<term>' to be '<description>'; 'lambdabot: @fact <term>' -- looks up the '<description>' someone gave for '<term>' and says it.
15:37:36 <lambdabot> set @fact to \'lambdabot: @fact <term> <description>\' -- sets the definition for \'<term>\' to be \'<description>\'; \'lambdabot: @fact <term>\' -- looks up the \'<description>\' someone gave for \'<term>\' and says it.
15:37:43 <Riastradh> lambdabot: @fact @fact
15:37:43 <lambdabot> 'lambdabot: @fact <term> <description>' -- sets the definition for '<term>' to be '<description>'; 'lambdabot: @fact <term>' -- looks up the '<description>' someone gave for '<term>' and says it.
15:37:45 <whee> pfft, you can at lesat run ghci like I did shapr :p
15:37:51 <shapr> that's true
15:38:07 <shapr> but that won't give anything more than the type signature
15:38:10 <Marvin--> Pseudonym: that'd be nice, go hack :)
15:38:20 <whee> still could be useful
15:38:42 <shapr> a haddock plugin would give that and more
15:38:57 <shapr> I've just been reading the HaddockHtml output stuff
15:39:45 <Riastradh> What does 'moduleSticky' indicate?
15:39:57 <shapr> whether a module can be unloaded
15:40:10 <shapr> hey, there's something I could easily write for lambdabot ....
15:40:12 <Riastradh> The Hello, World! module, then, can't be unloaded?
15:40:14 <shapr> documentation
15:40:21 <Riastradh> No, wait.
15:40:33 <Riastradh> Rather, it -can- be unloaded, right?
15:40:35 <shapr> the module unloading is commented out anyway, heck if I know.
15:40:42 <shapr> lambdabot: @fact author
15:40:43 <lambdabot>  Andrew Bromage aka Pseudonym
15:40:43 <Riastradh> Heh.
15:40:58 * Pseudonym can't remember
15:41:10 <Pseudonym> I didn't think too hard about stickiness.
15:41:21 <Pseudonym> Maybe I wanted to implement dynamic loading or something.
15:41:25 <Pseudonym> Who knows.
15:42:06 <shapr> well, they work.
15:42:17 <shapr> plugins, that is.
15:43:34 <pesco> Dynamic loading would be cool, though.
15:43:39 <shapr> it would
15:43:55 <Marvin--> lambdabot: @load rootexploit.so
15:43:56 <shapr> we'd have to persuade the runtime_loader author to update it for ghc5.04.3
15:43:57 <lambdabot> Sorry, I don't know that command.
15:43:57 <pesco> But first modules would have to be data instead of types.
15:44:00 <shapr> o3: psst, hey
15:44:37 <Pseudonym> lambdabot: @eval let omega = omega + 1 in omega
15:44:37 <lambdabot> Sorry, I don't know that command.
15:44:48 <shapr> thankfully
15:45:18 <Pseudonym> pesco: Well that's easy.
15:45:25 <pesco> Yes.
15:45:26 <Pseudonym> At the moment they're instances of type classes.
15:45:27 <shapr> Pseudonym: I thought about changing the command parsing so that it's "subject" "verb" "object"
15:45:28 <Riastradh> Scott G. Miller's Scheme bot has a useful crash-catching saftey device gizmo whereby it limits the amount of time of evaluating something.
15:45:37 <Pseudonym> shapr: Do what you want.
15:45:48 <Pseudonym> An it hurt none.
15:45:55 <shapr> Pseudonym: ah, but I want input from the original architect :-)
15:46:08 <Pseudonym> By "input" do you mean "blessing" or "code"?
15:46:13 <shapr> heh
15:46:18 <shapr> good point.
15:46:25 <shapr> I just got a)
15:46:25 <Marvin--> shapr: going linguist, are we?
15:46:53 <shapr> Marvin--: I was just thinging of changing factoids to "key" "is" "value" 
15:47:12 <shapr> I was wondering if all commands could be split that way
15:48:33 <shapr> so maybe a general command pattern would be key command-name value
15:48:56 <Marvin--> what does "general" mean in this context?
15:49:15 <Marvin--> For a dict plugin I don't see there being a subject
15:49:32 <Marvin--> it'd just be @dict <word>
15:50:07 <shapr> could I generalize the command parser to split at the first occurence of the command word and assume everything before the command word is the 'key' and everything after is the 'value' ?
15:50:22 <shapr> subject verb (optional) object
15:50:29 <pesco> Why is it @dict and not !dict?
15:50:31 <Marvin--> I think that's very very very plugin dependent
15:50:40 <shapr> yah, probably is dependent
15:50:50 <Pseudonym> I think it makes sense for each module to parse its own arguments.
15:51:05 <shapr> yes, that's true.
15:51:09 <Marvin--> it's not as if we don't have any parser tools for haskell :-)
15:51:12 <shapr> heh
15:51:17 <shapr> just one or two
15:51:27 <Marvin--> or 500
15:51:31 <pesco> It would even make sense for each module to parse for its own trigger.
15:52:03 * Marvin-- is listening to Timo Tolkki straying from power metal
15:52:12 <pesco> But that gets too complicated for me. :)
15:52:30 <Marvin--> that's what hws-wp does
15:52:44 <Marvin--> every plugin is asked in turn "is this one yours?"
15:52:51 <pesco> What's hws-wp?
15:53:06 <Marvin--> a project of mine, haskell web server with plugins
15:53:25 <Marvin--> I extended Simon Marlow's HWS with dynamic loading
15:53:31 <pesco> Ahum, but it doesn't deal with natural language, does it?
15:53:45 <Marvin--> no :)
15:53:52 <Pseudonym> Damn, I am clever.  lambdabot plugins are already types.
15:54:01 <Marvin--> but I assumed you meant @<stuff> with triggers
15:55:08 <pesco> Hm, then the only gain you get from modules parsing their triggers would be support for multiple modules reacting to the same trigger.
15:55:31 <shapr> or modules having multiple commands
15:55:50 <Marvin--> hws-wp allows plugins to transform requests and passing them on
15:55:56 <pesco> shapr: Oh, I thought that would be best done through programmatic structure.
15:56:47 <pesco> shapr: I.e. let a module be a set of handlers, each of which reacts to a command.
15:57:06 <shapr> well, I say we argue with code :-)
15:57:09 <shapr> write it, make it work
15:57:16 <pesco> haha
15:58:01 <Pseudonym> If anyone wants a simple job on lambdabot...
15:58:09 <Pseudonym> The topic on this channel is valid Haskell.
15:58:20 <Pseudonym> Write a plugin to add or delete an entry.
15:58:27 <Marvin--> heh
15:59:06 <shapr> hm, neat!
15:59:37 <Marvin--> lambdabot: @topic ("foo":)
15:59:38 <lambdabot> Sorry, I don't know that command.
16:00:38 <Marvin--> lambdabot: @topic (["a","b"]++) . init
16:00:40 <lambdabot> Sorry, I don't know that command.
16:00:54 * Marvin-- coughs
16:01:05 <Marvin--> hey look at the time, I really should get some sleep
16:01:32 <Marvin--> hahaha
16:02:02 <Marvin--> China has sent a map over Baghdad to US, point out where the Chinese embassy is
16:02:12 * Pseudonym lol
16:02:45 <Marvin--> can't blame outdated maps this time
16:03:10 <Marvin--> well, I'm off to bed
16:03:23 <Pseudonym> Night.
16:03:56 <shapr> hm, code or sleep...
16:04:03 <Riastradh> Code.  Definitely.
16:04:20 <pesco> shapr: Have you seen /usr/lib/hugs/lib/Prelude.hs
16:04:28 <pesco> Er, I'm sure you have.
16:04:41 <pesco> Sorry my cut-and-paste skillz seem to have deteriorated.
16:05:19 <pesco> shapr: http://perso.wanadoo.fr/pascal.brisset/visu-ml/visu.html
16:05:28 * Riastradh is -very- confused about monads.
16:05:38 <Riastradh> (I just came back to trying to learn Haskell again)
16:10:58 <shapr> pesco: yes, I've seen those, they look very cool
16:11:59 <pesco> Something like that should be made for some haskell system.
16:12:22 <pesco> Maybe hugs would be a good start?
16:12:48 <pesco> It's written in C, runs on my PowerBook and isn't such a behemoth as GHC.
16:14:14 <shapr> I don't know
16:14:22 <whee> mmm, powerbooks
16:14:31 <pesco> shapr: What don't you know?
16:14:56 <shapr> I don't know whether hugs or ghc would be better
16:15:09 <shapr> I considered writing something like that for a split-second
16:15:24 <shapr> but I think Haskell needs more basic libraries first
16:15:37 <shapr> on the other hand, do whatever you think is fun
16:16:39 <pesco> shapr: G-Wiz flashy blinkenlights like that are never wrong.
16:18:27 <pesco> I just don't have the guts to take a nose-dive into the depths of a Haskell runtime system as I just don't know how it works.
16:18:55 <shapr> you could look at buddha or hat
16:19:09 <pesco> What's buddha?
16:19:39 <shapr> lambdabot: @fact buddha declarative debugger for Haskell 98 http://www.cs.mu.oz.au/~bjpop/buddha/
16:19:39 <lambdabot> set buddha to declarative debugger for Haskell 98 http://www.cs.mu.oz.au/~bjpop/buddha/
16:19:51 <shapr> hat is a rewriting system
16:20:04 <shapr> it wraps debugging code around all the 'real' code
16:20:13 <pesco> Oh.
16:20:18 <shapr> you could do that same thing to visualize the Haskell runtime stuff
16:20:31 <shapr> maybe :-)
16:23:09 <pesco> Hm, I hadn't thought about actually transforming the code to display itself.
16:32:23 <shapr> bah, I'm going to give in to sleep
16:32:25 <shapr> g'nite all
16:32:29 <Pseudonym> Night.
16:32:47 <pesco> Night.
17:06:45 <Riastradh> Hmm.
17:06:55 <Riastradh> Is the >>= infix function just a way to do CPS?
17:07:55 <whee> I thought it was for monads and binding or some such (which is theory I completely ignored)
17:09:05 <Pseudonym> >>= is monad bind
17:09:15 <Riastradh> a >>= \b -> c   -- that looks to me like the expression a is evaluated, and sends the result on to \b -> c, binding b to the result.  Is that not correct?
17:09:16 <Pseudonym> CPS is one such monad, but it works for anything.
17:09:18 <Pseudonym> IO, for example.
17:09:49 <Pseudonym> do { x <- foo ; bar } is a shorthand for foo >>= \x -> bar
17:10:10 <Riastradh> Yes, I know.
17:10:37 <Pseudonym> You've got the general idea, but CPS is only one monad.
17:11:09 <Riastradh> But at least I've got the basic idea -- that's the most important thing.
17:11:15 <Pseudonym> Sure/
17:18:35 <Riastradh> What does '$' do?
17:20:12 <whee> I don't know any of the technical details, but I use it where you'd otherwise use parenthesis. like, putStrLn $ somefunction some arguments and things
17:20:24 <whee> that'd end up being like putStrLn (somefunction some arguments and things)
17:20:47 <whee> I think it's like . but associates differently, with different precedence
17:22:11 <Riastradh> Oh.
17:22:14 <Riastradh> f $ x = f x
17:27:48 <kunphuzil> Helium looks cool (I am a beginner). Is it also an interpreter? 
17:40:15 <Riastradh> What do 'infixl someNumber someSymbol' and 'infixr someNumber someSymbol' mean?
17:41:01 <Pseudonym> It declares the operator.
17:41:14 <Pseudonym> Left associative is infixl, right associative is infixr.
17:41:18 <Pseudonym> The number is the precedence.
17:41:21 <Pseudonym> The symbol is the operator.
17:43:33 <Riastradh> What does the precedence level mean?
18:27:41 <Pseudonym> How tightly the operator binds.
18:27:50 <Pseudonym> Consider, for example: 1 + 2 * 3
18:29:22 <Riastradh> (*) would obviously have a higher precedence than (+), but how do you determine what number you should exactly use?
18:32:05 <Pseudonym> (*) binds its arguments more tightly 
18:32:11 <Pseudonym> Well, it's relative.
18:32:32 <Pseudonym> All that's important is which number is greater or lesser.
18:33:03 <Pseudonym> Greater numbers bind more tightly.
18:40:08 <kunphuzil> How long til I master haskell? ;)
18:40:44 <Pseudonym> THere are two issues here.
18:41:02 <Pseudonym> IMO the most important one is that it's a moving target.
18:41:17 <Pseudonym> You think you know everything, then someone adds fundeps or something.
18:41:34 <Pseudonym> The other is that I don't think that anyone has truly mastered haskell yet.
18:41:41 <Pseudonym> Not even the people who wrote the spec.
18:41:56 <Pseudonym> Not for the reasons you might think, though.
18:42:22 <Pseudonym> Nobody mastered C++ until it had been seriously used in real applications for quite a few years.
18:42:49 <Pseudonym> I think that's going to be true of Haskell, too.
18:42:59 <Pseudonym> IMO, of course.
18:43:28 <Pseudonym> That's why it's so much fun!
18:43:33 <Pseudonym> You get to invent stuff as you go.
18:44:38 <Riastradh> Whee.
18:44:49 <kunphuzil> What do you guys think of Helium?
18:45:04 <Pseudonym> Never tried it.
18:45:06 * Riastradh has never used it, nor does he know anything about it.
18:45:14 * Riastradh is still playing about with monads.
18:46:45 <kunphuzil> Ok. It says it is good with beginners.. I am giong to try it.
23:47:22 <tic> anyone alive?
23:48:06 <mgoetze> nope
23:49:34 <tic> damnit. :)
23:49:39 <tic> I wish to do something like this:
23:49:47 <tic> readStuff :: [String] -> [String]
23:49:50 <tic> readStuff [] = []
23:50:04 <tic> readStuff (x:xs) = (readFile x):(readStuff xs)
23:50:15 <tic> but as readFile is of type IO, I cannot do that
23:50:19 <tic> so I thought I'd do something like:
23:50:43 <tic> readStuff = do { y<-readFile x; return y:(readStuff xs) }
23:50:48 <tic> but that won't work either :-/
23:50:51 <tic> how do I do that?
23:56:03 <tic> anyone?
23:56:06 <tic> *sob*
