01:16:06 <bubba1034> Can anyone help me compile ghc? I keep getting an error when it hits HaskTags.hs.
04:13:00 <Janni> morning
04:23:53 * shapr bounces
04:24:12 <shapr> good morning #haskell!
04:28:03 <opet> afternoon :)
04:41:28 <el_diego> anoyone had problems compiling nhc with gcc ver >= 3.2?
04:42:08 <shapr> I've never tried to compile nhc.
04:42:23 <shapr> hej el_diego, vad gör du?
04:45:57 <shapr> el_diego: do you require nhc?
04:47:10 <shapr> el_diego: what sort of error are you getting with nhc and gcc >= 3.2 ?
04:48:22 <el_diego> I'm using the Gentoo Linux ebuild. Basically gcc segfaults during compilation :(
04:48:50 <andersca> sounds like the usual optimization issues with gentoo
04:50:41 <shapr> andersca: any idea how to fix it?
04:52:21 <andersca> no :/
04:53:35 <el_diego> I'll try to unset CFLAGS and get rid of optimization. If that does not work maybe an older (< ver 3) of gcc is required
04:54:38 <shapr> el_diego: have you been here before?
04:54:57 <el_diego> no, first-timer :)
04:55:03 <shapr> welcome!
04:55:07 <el_diego> thanks
04:55:16 <shapr> are you studying Haskell?
04:55:47 <shapr> using it for professional purposes? 
04:55:49 <shapr> that would be nice.
04:55:58 <el_diego> sort of, I read about the language and got fascinated.
04:56:10 <shapr> yah, same for me.
04:56:33 <shapr> my woman bought me haskell books for my birthday and I was even more hooked.
04:57:02 <el_diego> That's my kind of woman!! ;)
04:57:10 * shapr grins
04:57:55 <shapr> do you program in other functional languages?
04:58:26 <shapr> hi pseiko 
04:58:40 <shapr> hey I'm going to munich for a few days in the summer.
05:00:44 <shapr> it's a good day to code.
05:01:10 <shapr> el_diego: you'll probably have less trouble getting hugs or ghc to work
05:01:32 <shapr> they're more popular in terms of users, so I would expect them to work out-of-the-box
05:06:53 <el_diego> shapr: i have gotten hugs to work. ghc ebuild (compile) failed too under Gentoo if I remeber correctly...
05:15:05 <pseiko> ghc runs on my gentoo system
05:15:12 <pseiko> hi all :-)
05:15:12 <opet> el_diego: I'm compiling nhc with gcc3.2 -- no problems yet
05:18:48 <el_diego> pseiko: ok, thanks!
05:20:24 <pseiko> no problem, as i remember there are two ports, one which suggests to build ghc from the source and a precompiled one, which performs the job
05:21:01 <el_diego> ok, i'll try them both again and see what happens
05:26:22 <pseiko> i have to go, goodbye
05:27:00 * shapr bounces
05:28:17 <el_diego> opet: how did it go?
05:29:05 <opet> it's still going :)
05:29:30 <opet> this machine's only a k7-650
05:29:57 <el_diego> ok, i have a T-bird 1200 ;)
05:35:21 <shapr> I had to pull my second athlon mp 1800 yesterday when the cpu fan stopped working
05:35:36 <shapr> happily, there was no smoke.
05:36:22 <el_diego> it's amazing how fast these processors will fry if you run them without cooling...
05:36:28 <shapr> truly it is
05:36:40 <buggs> like 3 seconds
05:36:58 <shapr> my motherboard was too hot to touch in a very small amount of time
05:39:57 <shapr> it still booted and checked out okay, but I won't know if it's been affected till I buy a new fan and run it for a bit
05:40:11 <shapr> moral: don't buy CPUs that can overheat easily
05:41:02 <opet> el_diego: just finished. built fine with gcc3.2 on freebsd
05:41:47 <el_diego> opet: thanks, good to know...
05:42:07 <andersca> how do I use the @ notation again?
05:42:10 <andersca> (x:xs)@list ?
05:42:13 <andersca> (for example)
05:42:17 <Igloo> Other way round
05:42:22 <shapr> hi Igloo!
05:42:26 <Igloo> Hello
05:42:48 <shapr> what's up?
05:43:16 <Igloo> Too much - I've just been volunteered to give a talk on Monday and someone wants me to do an extra 2 hours demonstrating this week
05:44:07 <shapr> what's involved in demonstrating? political or programming?
05:44:30 <andersca> Igloo: thanks dude
05:44:31 <Igloo> Programming - it basically means answering questions people have in practicals, signing them off etc
05:45:33 * Igloo wishes the demonstrating actually clashed with something so I could refuse it without feeling guilty
05:52:19 <shapr> Igloo: how's code lately?
05:59:31 <shapr> swedish question: what does pilska mean?
06:02:41 <andersca> uhm
06:02:46 <andersca> "horny"
06:03:19 <Heffalump> how's the obfuscated contest going?
06:03:27 <shapr> it's over!
06:03:36 <Heffalump> how many entries, I really meant :-)
06:03:39 <shapr> we've had somewhere between seven to ten submissions
06:03:44 <Heffalump> cool
06:03:53 <andersca> I could send in my AVL lab assignment
06:03:54 <andersca> ;)
06:15:26 <Igloo> shapr: Hmmm, a couple of technical issues to overcome
06:15:52 <shapr> for IOHCC?
06:17:01 <Igloo> For code
06:17:08 <shapr> oh
06:17:25 <shapr> you're TH'ing Pan, yes?
06:17:42 <Igloo> Yeah
06:18:54 <shapr> cool
06:19:09 <shapr> anyone happen to remember how many lines of code in GHC right now?
06:20:08 <Igloo> SM gave rough numbers on a list a few days/weeks ago
06:21:57 <shapr> do you remember which list?
06:22:21 <Igloo> It was in the thread where someone was asking for large Haskell programs
06:22:38 * shapr looks
06:22:54 <Igloo> I'd check haskell, haskell-cafe, ghc-users, cvs-ghc in that order
06:23:00 <shapr> ok, thanks
06:35:30 <shapr> ~78k lines of code, ~63k lines of comments in the compiler itself.  The
06:35:30 <shapr> runtime has a further ~50k lines of C.
06:35:31 <shapr> aha
06:36:15 <Janni> re
06:51:49 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "New HTk release http://www.informatik.uni-bremen.de/htk/", "Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144", "Gtk+HS 0.15.2 released"]' by shapr
06:52:18 <shapr> order your own hardcopy of the H98 Report - http://titles.cambridge.org/catalogue.asp?isbn=0521826144
06:53:58 <andersca> cool stuff
06:54:56 <Heffalump> is it actually out yet?
06:55:07 <Heffalump> ah, no
06:55:14 * Heffalump is going to buy it when it does come out
06:55:22 <shapr> Simon PJ said he's holding the first copy in his hands as he wrote the email
06:55:27 <shapr> must have been hard to type like that ;-)
06:55:44 <shapr> yes, I'm buying a copy also.
06:55:58 * shapr bounces happily
06:56:08 <shapr> Heffalump: have you been consumed with SML lately? haven't seen you much.
06:56:23 <Heffalump> I waste too much time when I idle on here cos I read it
06:56:28 <Heffalump> so I've mostly stopped
06:57:30 <shapr> heh, good point
06:57:35 <shapr> we're far too interesting ;-)
06:57:44 <shapr> I have that same problem sometimes
06:58:08 <shapr> well, lots of times
06:59:01 <shapr> on the good side, I get answers to work questions from various irc channels
08:52:44 <shapr> yow
08:55:17 <mgoetze> mhm
09:02:20 <shapr> yeehaa
09:11:04 <shapr> hi redcrosse 
09:11:07 <shapr> what's up?
09:11:23 <redcrosse> hello. nothing at all.
09:11:32 <redcrosse> what're you up to?
09:11:43 <shapr> hacking on java + xslt right now...
09:11:57 <shapr> doing my IOHCC judging after that
09:12:14 <redcrosse> ah
09:12:32 <shapr> did you reach understanding of fundeps?
09:13:15 <redcrosse> kinda sorta
09:13:22 <shapr> feel like explaining? ;-)
09:13:28 <redcrosse> heh
09:48:46 <bubba1034> Who do I suggest a change to the ghc documentation to?
10:12:17 <shapr> if it's ghc specifically, probably ghc-users@haskell.org
11:14:01 <andersca> hey Marvin--
11:15:28 <Marvin--> evening
11:15:54 <Marvin--> today I've been writing obscure haskell code for transforming haskell in something obscure
11:16:03 <andersca> I've been hacking on d-bus
11:16:15 <ludde> hello
11:48:01 * shapr bounces
11:48:05 <shapr> yow, it's exciting
11:48:19 <shapr> hello ludde 
11:48:29 <shapr> Marvin--: what sort of obscure thing are you hacking on?
11:54:17 <mgoetze> yay@obscure haskell!
11:54:27 * shapr cackles happily
11:54:32 <shapr> oh look at this:
11:54:37 <shapr> http://www.math.chalmers.se/~rjmh/QuickCheck/quickcheck
11:54:52 <shapr> see the RCS headers at the top? and the comments? :-)
11:55:18 * shapr feels very cool
11:55:18 <Marvin--> shapr: transforming the AST from Language.Haskell.Syntax to something simpler
11:55:27 <shapr> I'm so cool I need shades.
11:55:39 <shapr> Marvin--: oh, interesting
11:55:40 <Marvin--> shapr: eh?
11:55:56 <shapr> Marvin--: you have to look at the RCS headers and comments in that url above
11:55:58 <Marvin--> shapr: oh, the script
11:56:02 <shapr> yes yes
11:56:30 <shapr> remember I added bird style .lhs support to the quickCheck script?
11:56:33 <Marvin--> I have a more 1337 unlit function ;)
11:56:36 <Marvin--> yeah
11:56:40 <shapr> oh show me
11:56:58 <shapr> if you have something better, hack it in and send him an updated copy
11:57:19 <Marvin--> http://193.11.232.159:8080/unlit.hs
11:57:23 <Marvin--> yeah that might be an idea
11:57:32 <shapr> oh wow
11:57:42 <shapr> that even fixes the TODO item 
11:57:50 <shapr> fix it! send him an update!
11:57:54 <Marvin--> yes, that's what I meant about 1337:er
11:58:02 <Marvin--> yeah yeah yeah, can I finish my dinner first? :)
11:58:08 <shapr> well...
11:58:13 <shapr> ok, but only if you're fast
11:58:15 * shapr is joking ;-)
11:58:22 * shapr bounces happily
11:58:25 <Marvin--> .oO(should I mail him in Swedish or English?)
11:58:34 <shapr> both!
11:58:49 <shapr> actually, I'm not sure
11:59:01 <Marvin--> from what I recall, he spoke good Swedish two years ago
11:59:12 <shapr> hasn't he been there for years and years?
11:59:22 <shapr> he's probably fluent by now
11:59:34 <Marvin--> probably yeah
11:59:40 <Marvin--> Koen's got amazing Swedish too
12:00:42 <shapr> I've started using swedish instead of english in normal spoken conversations by accident.
12:01:11 <Marvin--> heh, that's cool :)
12:01:17 <shapr> it's a weird feeling.
12:01:38 <Marvin--> I think that the course Koen's teaching now, he's lecturing in Swedish
12:01:45 <shapr> I've been accidentally typing the swedish words instead of the english words in irc too
12:01:57 <Marvin--> I mean, it's one thing to speak Swedish to someone, but I think it's totally different to give lectures in another language
12:02:01 <shapr> yah, really
12:02:07 <shapr> if you can teach in another language, you rock
12:02:17 <shapr> maybe I will, one day :-)
12:02:27 * Marvin-- held exercises in English in a course
12:02:35 <shapr> Marvin--: you rock =)
12:02:35 <Marvin--> yay, I rock ;)
12:02:39 * shapr laughs
12:02:55 * shapr gives shades to Marvin-- also
12:04:23 <shapr> oo¬
12:04:44 <shapr> hi jlouis 
12:04:53 <jlouis> hello
12:04:59 <shapr> wassup?
12:05:05 <jlouis> more data copying
12:05:12 <shapr> is that good?
12:05:26 <jlouis> indeed, it is a large backup so I can install OpenBSD again
12:05:39 <shapr> oh, nifty
12:05:54 <jlouis> Only moved 11GB so far, hehe
12:06:02 <Marvin--> is there really no function similar to my splitWhen in the standard library?
12:06:40 <jlouis> I do not know what your function does
12:07:15 <Marvin--> shapr: maybe I should give him the code on a printed paper when I see him at the meeting tomorrow ;)
12:07:26 <shapr> heh, maybe so
12:07:38 <Marvin--> not that I have a printer :/
12:07:45 <shapr> Marvin--: that would be particularly cool, but he might have a harder time putting it online
12:07:49 <Marvin--> yeah ;)
12:07:59 <Marvin--> jlouis:  http://193.11.232.159:8080/unlit.hs
12:08:04 <shapr> truly I think that QuickCheck is the tip of an iceberg
12:08:24 <jlouis> Marvin--: thanks
12:08:27 <shapr> HelloWorld GUI demos in many Haskell toolkits: http://repetae.net/john/computer/haskell/gui/ 
12:09:01 <jlouis> Marvin--: splits as long as a predicate is true?
12:09:17 <Marvin--> jlouis: no, splits at the point where the predicate is true the first time
12:09:22 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "GUI Demos - http://repetae.net/john/computer/haskell/gui/", "Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144", "Gtk+HS 0.15.2 released"]' by shapr
12:10:02 <jlouis> Marvin--: have you looked at scan?
12:10:10 <jlouis> from the Prelude/
12:10:13 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "New Learning Haskell page - http://www.haskell/learning.html", "GUI Demos - http://repetae.net/john/computer/haskell/gui/", "Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144", "Gtk+HS 0.15.2 released"]' by shapr
12:10:31 <Marvin--> <interactive>:1: Variable not in scope: `scan'
12:10:35 <jlouis> hrm
12:10:38 <shapr> might be in Data.List
12:10:44 <jlouis> possibly
12:10:46 <Marvin--> <interactive>:1: Variable not in scope: `Data.List.scan'
12:10:58 <shapr> hmm
12:11:21 <jlouis> span, hehe
12:11:27 <jlouis> friggin names ;)
12:11:31 <shapr> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html#break
12:11:45 <shapr> span and break are opposites I think
12:11:50 <jlouis> yup
12:11:56 <jlouis> your code looks very much like it
12:12:01 <shapr> ya know, we *desperately* need a set of examples for each function in the Prelude
12:12:04 <Marvin--> hmm, yeah
12:12:15 <shapr> and they need to be included in the haddocks
12:12:24 <Marvin--> only difference is that I drop the matching separator too, but I can live with that change actually
12:12:42 <shapr> I don't know what half the prelude does, and I've been using Haskell for nearly 1.5 years
12:12:50 <jlouis> hehe
12:13:03 <jlouis> I do not even code Haskell ;)
12:13:14 <shapr> it's a lot of trouble to go look at the Prelude sources in my Hugs installation for each function in the Prelude docs
12:13:40 * Marvin-- idly wonders why there's a lol.hs in his haskell directory
12:13:50 <shapr> oh I want to see it!
12:14:00 <Marvin--> me too
12:14:08 <shapr> probably says "10 PRINT "LOL" 20 GOTO 10"
12:15:46 <jlouis> lol = "lol" : lol
12:15:50 <jlouis> or something ;)
12:15:52 <Marvin--> jlouis: more likely :)
12:15:53 * shapr snickers
12:15:58 <Marvin--> lol = lol
12:16:04 * Marvin-- is guessing too ;)
12:16:17 <Marvin--> or maybe it's from when I found hugs' definition of undefined :-)
12:16:27 <shapr> that is worthy of laughter
12:17:29 * shapr decides to add a line to his .signature
12:17:31 <shapr> 10 PRINT "HELLO" 20 GOTO 10 ; hello = "hello" : hello
12:18:17 <jlouis> hehe
12:18:22 <shapr> mapM_ putStrLn hello = "hello" : hello
12:18:32 <shapr> I think that's better actually
12:18:33 <jlouis> lazy evaluation is okie
12:18:34 <shapr> hmm
12:18:43 <shapr> maybe not...
12:18:50 <shapr> bah, I'll fix it later...
12:18:53 <jlouis> hehe
12:19:19 <shapr> speaking of lazy evaluation ;-)
12:19:58 <Marvin--> shapr: let hello = "hello" : hello in putStr (unlines hello)
12:22:14 <Marvin--> I think I'll put that in my sig :-)
12:22:46 <shapr> me too
12:23:07 <Marvin--> damn, that's fifth line, that's not good
12:23:15 <shapr> it'll be my third line
12:23:31 <shapr> I could put my JoyLanguage approxEqual function in there instead
12:23:39 <shapr> DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .
12:24:21 <Marvin--> name + mail + phone + gpg key == four lines, damn
12:24:26 <shapr> oh, good point
12:24:38 <Marvin--> I'll remove phone
12:24:42 <shapr> why would I put my mail and phone in my .sig?
12:24:56 <Smerdyakov> So people could call you?
12:25:04 <shapr> what a weird thought.
12:25:10 <shapr> Smerdyakov: you're strange, you know that?
12:25:20 <Marvin--> I'm not the least paranoid about handing out my phone numbers
12:25:23 <Smerdyakov> I've been calling a lot of people who've e-mailed me lately.
12:25:34 <shapr> Smerdyakov: see! I told you so!
12:25:35 <Marvin--> but I guess it's the thing that's most likely to go
12:25:37 * shapr grins
12:25:49 * shapr emails Smerdyakov with phone number attached
12:26:02 <Marvin--> and I guess I can remove the mail address too, kinda silly to have it there anyway
12:26:11 <shapr> lesse, I've gotten... three phone calls on this phone number so far.
12:26:12 <Smerdyakov> Hm. If you're not offering to pay for something, then it's not the right kind of e-mail to get a response. =)
12:26:19 <shapr> Smerdyakov: bah humbug
12:26:23 <Marvin--> no wait, that's where I have to put all my mail addresses to boast ;)
12:28:55 <Smerdyakov> Ha. I can tell Marvin-- is not Way Cool if he can fit all his mail addresses in a signature file. =D
12:30:37 <Marvin--> that's the problem, I can't
12:30:56 <Smerdyakov> How many do you have?
12:31:36 <Marvin--> I've lost count
12:31:42 <shapr> that's a lot
12:31:45 <Marvin--> there's four I mainly use
12:32:14 <Marvin--> md9ms@mdstud.chalmers.se (uni address), marvin@dum.chalmers.se (computer club address), sjogren@debian.org (Debian address (duh)), martin@strakt.com ("work" address)
12:32:29 <Marvin--> there are others, and probably some I've forgotten :-)
12:32:35 <Marvin--> I wonder if marvin@hoopyfroods.org still works
12:32:51 <jlouis> jlouis@mongers.org, jlouis@diku.dk
12:32:51 <Smerdyakov> I have more than would fit on my hard drive :P
12:32:53 <jlouis> heh
12:32:58 <Smerdyakov> I'm the default recipient for three domains.
12:33:04 <shapr> Marvin--: what about @twistedmatrix.com ?
12:33:10 <Marvin--> Smerdyakov: that doesn't count
12:33:11 <shapr> I have three domains also
12:33:18 <Marvin--> shapr: uh, I'm not a twisted developer
12:33:19 <Smerdyakov> Marvin--, does soooo
12:33:23 <shapr> ScannedInAvian.*
12:33:25 <jlouis> I do not even have a domain
12:33:33 <Marvin--> Smerdyakov: I'll allow you to count one per domain
12:33:57 <jlouis> Smerdyakov: \aleph_3 ?
12:34:06 <Marvin--> hey cool, the hoopyfrood address worked
12:34:16 <Marvin--> wonder if I can fit that into the sig too
12:34:17 <shapr> happy 3/3/3
12:34:23 <Smerdyakov> Hm... well, I have e-mail addresses at least 8 domains.
12:34:35 <shapr> Smerdyakov: c'mon this is #haskell, let's see your Haskell code
12:34:40 <shapr> :-P
12:34:46 <Smerdyakov> OK, here it comes.
12:34:47 <Smerdyakov> 8
12:34:50 <shapr> wow
12:34:57 <Marvin--> eep
12:34:58 <shapr> impressive.
12:35:07 * shapr grins
12:35:11 <Marvin--> it's so...brilliant
12:35:14 <shapr> truly
12:35:19 <shapr> the elegance, the simplicity ;-)
12:35:27 * shapr laughs
12:35:40 <shapr> I know, I'm being mean, picking on the SML addicts ;-)
12:36:05 * jlouis teams up with Smerdyakov 
12:36:09 <shapr> oh no!
12:36:13 <shapr> he's got backup!
12:36:26 <jlouis> SML, we are the strict ones ;)
12:36:32 <shapr> I'm lazy.
12:36:51 <jlouis> well throw the acid rain theorem after him!
12:36:59 <shapr> lazy evaluation is the primary problem with haskell shareware.
12:37:50 <jlouis> why?
12:38:10 <shapr> no one ever evaluates Haskell shareware unless they're forced to.
12:38:25 * jlouis smiles
12:38:59 <Marvin--> siiiiiiiigh
12:39:02 <shapr> ok, I'll stop being silly and go back to everyone's favorite functional language, XSLT!
12:39:16 <shapr> Marvin--: hey, you gonna fix up that quickCheck script?
12:39:21 <Marvin--> shapr: I guess you read that article on kuro5hin?
12:39:26 <shapr> no, which article?
12:39:29 <Marvin--> shapr: yeah, just cleaning it up a bit
12:40:02 <Marvin--> maybe it was you who posted it? :P It was some time ago, an article that bashed xslt and liked haskell
12:40:06 <shapr> oh, that article
12:40:11 <shapr> yah, tmoertel wrote that
12:40:35 <shapr> truly, using xslt is like trying to dig a big hole with a small spoon.
12:41:06 <shapr> happily, recursion is possible, so at least I can recursively dig small holes.
12:41:08 <Marvin--> I thought it was more like killing mosquitos with cruise missiles?
12:41:12 <jlouis> nothing new there. The C people does that all the time
12:41:27 <shapr> jlouis: yes, but I've never been paid to write C before (and hope it never happens)
12:41:28 <Marvin--> jlouis: C doesn't come anywhere near The Horror That Is XSLT
12:42:03 <jlouis> okie, I've never had the ''pleasure'' to look at it
12:42:05 <Marvin--> "XML is good, so we created an XML-based programming language" HELLO, there's a reason only lisp people code directly in ASTs!
12:42:09 <shapr> so I wanted to say "the name attribute for this tag is either the name attribute of the tag we're processing, or it's the string 'anonymous'"
12:42:26 <shapr> the correct way to do this is:
12:42:37 <shapr>   <xsl:variable name="Name">
12:42:37 <shapr>     <xsl:choose>
12:42:37 <shapr>       <xsl:when test="boolean(@Name)"><xsl:value-of select="@Name"/></xsl:when>
12:42:37 <shapr>       <xsl:otherwise>anonymous</xsl:otherwise>
12:42:37 <shapr>     </xsl:choose>
12:42:38 <shapr>   </xsl:variable>
12:42:50 <shapr> and then, I have to call that subroutine separately... like this:
12:43:04 <shapr>   <xsl:template match="Section">
12:43:04 <shapr>     <xsl:element name="text:section">
12:43:04 <shapr>       <xsl:attribute name="text:name"><xsl:value-of select="$Name"/></xsl:attribute>
12:43:04 <shapr>       <xsl:apply-templates/>
12:43:04 <shapr>     </xsl:element>
12:43:04 <shapr>   </xsl:template>
12:43:09 * shapr stops spamming
12:43:12 <jlouis> *sigh*
12:43:33 <shapr> jlouis: whaddya think, is C more succint or what?
12:43:40 <jlouis> indeed
12:43:42 <jlouis> C is better
12:44:11 <shapr> I'm taking cheesy shortcuts there also, the foo part of foo:bar should really be done separately
12:44:18 <shapr> it's the namespace assignment stuff
12:44:24 <jlouis> I think that xslt stuff is meant to be coded in some kind of wysiwyg tool
12:44:25 <shapr> it should be a separate attribute actually
12:44:33 <jlouis> which is utterly bad
12:44:42 <jlouis> lets kill wysiwyg and reapply LaTeX
12:44:55 <shapr> truly
12:45:03 <jlouis> wysippooalrtwyg
12:45:14 <shapr> but for now, I get paid to turn one flavor of XML into another via XSLT
12:45:20 <jlouis> What you see is probably part of, or at least related to what you get ... ;)
12:45:47 <Marvin--> jlouis: use LyX :) wygiwym :)
12:45:55 <shapr> or TeXmacs
12:45:57 <Marvin--> what you get is what you mean
12:46:23 <shapr> or microsoft word, wygisnwypf
12:46:32 <shapr> what you get is not what you've paid for
12:46:40 <Igloo> Has http://titles.cambridge.org/catalogue.asp?isbn=0521826144 been mentioned here?
12:46:41 <jlouis> hehe
12:46:58 <jlouis> nah, give me a vim editor and i'll TeX to Hades
12:46:59 <shapr> Igloo: it's in the channel topic
12:47:08 <Igloo> Ah  :-)
12:47:15 <shapr> Igloo: and worth mentioning several more times
12:47:22 <shapr> at least once a day
12:47:38 * Marvin-- smacks Igloo for not reading topic
12:47:48 <shapr> now your hands are cold and icy
12:47:57 * Igloo thinks Oege should buy 30 copies to match the number of C# and .NET books that appeared on our bookshelves today
12:48:05 <shapr> Igloo: oh good idea!
12:48:30 * Marvin-- yields to the temptation and mails John
12:48:35 <shapr> Marvin--: yes! do it!
12:48:37 <Igloo> Might be hard to convince him of it, though  :-)
12:48:51 <shapr> lemme guess, the C# and .NET books were ms funded?
12:48:57 <Marvin--> 30 books on C#?! what are you, masochists?
12:48:58 <Igloo> Yeah
12:49:10 <shapr> sadly, Simon PJ isn't as rich as Bill
12:49:19 <Marvin--> .oO(I could've had one of those books if I hadn't misspelled my mail address on the form)
12:49:30 <shapr> otherwise we'd already have high paying jobs at Glasgow Research
12:49:41 <shapr> Marvin--: doh!
12:50:14 <jlouis> Marvin--: you did it on purpose of course ;)
12:50:16 <Marvin--> one of the guest lectures in our course on object orientation and design was held by a microsoft guy, and we'd get free copies of the C# book
12:50:29 <Marvin--> just to taunt them, I wrote down my sourceforge mailing address - and of course misspelled it
12:50:33 <shapr> heh
12:50:36 <Igloo> "the"? There's more than one of them - trust me, I know
12:50:52 <Marvin--> well, yeah, I meant "the C# book he was holding in his hand while he said it"
12:50:59 <Marvin--> I don't remember what it was called
12:51:02 <Igloo> :-)
12:51:13 <Marvin--> I know there are several, there are probably more books about C# than about Haskell
12:51:57 <shapr> yes, there are
12:52:10 <shapr> sadly
12:52:12 <jlouis> I have the SML report. Isnt that good enough?
12:52:17 <shapr> I went looking for Haskell books recently
12:52:20 <shapr> I think there are five
12:52:24 <Marvin--> shapr: um, why is there   "> prop_" `isPrefixOf` x || "prop_" `isPrefixOf` x   as filter function?
12:52:46 <Riastradh> Gah, only -five-!?
12:52:55 <shapr> Riastradh: yah, sad, isn't it?
12:52:59 <Riastradh> Indeed.
12:53:10 <shapr> of course, the number of research papers about haskell generally is amazing
12:53:20 <shapr> I wonder how it compares to other languages...
12:53:22 * Riastradh hasn't a clue about writing a book about Haskell, though, so he can't be much help there.
12:53:29 <shapr> Marvin--: good question
12:53:38 <shapr> Marvin--: probably just ugly hacking around till it worked :-)
12:53:44 <shapr> Marvin--: please repair it!
12:53:46 <Marvin--> shapr: especially since it doesn't bloody work because of the way lex works
12:54:10 * shapr looks
12:54:16 * Marvin-- rewrites that to a left section instead
12:54:32 <shapr> yay!
12:54:41 <Marvin--> and it's kinda silly too, since it's already been unlit:ed!
12:54:47 <shapr> I just realized that
12:54:53 <shapr> just this second
12:55:08 <shapr> one of those large "oh DUH" moments
12:55:24 <Marvin--> :)
12:55:25 <jlouis> hehe
12:55:36 <jlouis> so much for TimeGlassProgramming, eh?
12:55:49 <shapr> Marvin--: oh oh, you realize that quickCheck script should really have a prop_quickcheck to test itself right? =)
12:55:53 <shapr> jlouis: heh, truly
12:56:23 <Marvin--> shapr: sh'dup
12:56:28 * shapr snickers
12:56:40 * shapr bounces happily
12:56:49 <Marvin--> prop_self = unsafePerformIO $ do ... :P
12:56:55 <Marvin--> I don't remember the ST stuff
12:57:10 <Marvin--> hmm, there's no way to do io2st anyway
12:57:12 <shapr> that would be amusingly recursive
12:57:31 <Marvin--> not that the bloody script works at bloody all for me
12:57:40 <shapr> really? it works for me....
12:57:54 <Marvin--> there are no import lines in the hugsin file, it uses ./ghci...
12:57:56 <shapr> I hope I didn't send broken code :-(
12:57:59 <shapr> oh right
12:58:10 <shapr> good point, yikes
12:58:12 <Marvin--> what did it use to be?
12:58:16 <shapr> I don't remember...
12:58:21 <Marvin--> heh
12:58:38 <shapr> I can post ./ghci though, if you want
12:58:49 <Marvin--> ?
12:58:51 <Marvin--> oh, yeah
12:59:05 <Marvin--> I misinterpreted that as "I can post ./ghci though, if you want to do it"
12:59:12 <Marvin--> which struck me as kinda odd :)
12:59:20 <shapr> heh
12:59:22 <Marvin--> damn ambigous natural languages
12:59:46 <shapr> #!/bin/bash
12:59:47 <shapr> exec ghci -package text -package util -package data -package net -fglasgow-exts "$@"
12:59:52 <shapr> that's the ghci script
13:00:02 <Marvin--> don't forget to mention the lack of import statements too...
13:00:38 <shapr> ?
13:00:40 <Marvin--> I'll just mail him the unlit function, not the usage of it
13:00:59 <shapr> or you could send it to me, and I'll stick it all together and mail him a new version
13:01:05 <Marvin--> uh, never mind
13:01:14 <Marvin--> I didn't see the :l
13:01:25 <shapr> does the script work for you?
13:01:38 <Marvin--> after some symlinking of ghci and QuickCheck.hs, yes
13:01:56 <Marvin--> but I guess I shouldn't need the symlink to QuickCheck.hs
13:02:06 <Marvin--> hmm, actually I did
13:02:17 <shapr> strange
13:02:20 <shapr> are you using hugs?
13:02:37 <shapr> oh, duh
13:02:53 <Marvin--> do I need the -package util or something?
13:03:03 <shapr> I think so
13:03:12 <shapr> it's the one that contains all of the testing modules
13:03:54 <shapr> or you can just import Debug.QuickCheck
13:04:02 <Marvin--> yeah that worked
13:04:07 <shapr> cool
13:04:20 <Marvin--> -package util that is
13:04:43 <Marvin--> why don't you mail him and get this sorted out, and I can mail him after things work again? ;)
13:05:15 <Marvin--> or I can rat to him tomorrow and tell him your code is broken ;)
13:05:50 <shapr> well, now is as good a time to fix stuff as any time....
13:06:38 <Marvin--> I think it'll be confusing if he gets lots of code from both of us, and I do prefer to mail him myself
13:06:53 <shapr> I agree.
13:07:09 <shapr> do you have time for it right now?
13:07:29 <shapr> how can I help? :-)
13:08:11 <Marvin--> I think you should just mail him and say that what you sent him is broken because of the ./ghci, and when that's corrected I can feel good about mailing my improved 1337 unlit function
13:09:06 <shapr> I can't find a copy of the quickcheck script that does not require ./ghci
13:09:10 <shapr> do you have one?
13:10:05 <shapr> has it always been this way? what did it have before?
13:10:07 <Marvin--> I don't have one!
13:10:09 <Marvin--> I don't know
13:10:15 <Marvin--> I thought you added the ./ghci stuff
13:10:25 <shapr> no, I didn't
13:10:30 <Marvin--> hmm
13:10:43 <Marvin--> that's odd then
13:10:53 <shapr> it looks like this version of the quickcheck script originally came from tom moertel's icfp2001 submission
13:11:13 <shapr> from there it went into #haskell's icfp 2002 submission,
13:11:19 <shapr> and then I hacked .lhs support into it
13:11:22 <shapr> so I really don't know :-)
13:12:33 <shapr> does anyone else here have a copy of the quickcheck script?
13:12:41 <jlouis> you do participate in icfp?
13:12:55 <jlouis> We have thought about it at DIKU for some time
13:13:09 <shapr> jlouis: do it!
13:13:12 <shapr> it's great fun
13:13:36 <shapr> we may have enough people this year for two separate #haskell teams
13:14:06 <shapr> it seems that three to four people is good, and six is the absolute maximum, maybe even too many.
13:14:19 <Marvin--> three to four sounds optimal... I've never participated :(
13:14:32 <shapr> Marvin--: want to?
13:14:48 <Marvin--> I think I'll try to crank up a team here instead, I think it's easier to be in the same room and speak (shout) the same language fluently
13:14:51 <shapr> last year was *great* fun
13:14:58 <shapr> Marvin--: that's true
13:15:00 <Marvin--> and I do have haskell crazy friends here
13:15:04 <shapr> excellent!
13:15:23 <Marvin--> we just never got around to it
13:15:36 <Marvin--> it's usually some time during June or July, isn't it?
13:15:43 <shapr> jlouis: if your fav is SML, you and Smerdyakov could start a team.
13:16:36 <Marvin--> sick sick people ,)
13:17:37 <Marvin--> hahaha, the tv guide people have translated "prince of darkness" into "Prinsen av mörkret"
13:17:57 <Marvin--> "mörkrets furste" is more...traditional :)
13:18:37 <shapr> darkness father?
13:18:51 <shapr> oh, sovereign/prince
13:19:08 <shapr> the swedish way of saying that is spiffier
13:19:51 <Marvin--> yeah, "mörkrets furste" sounds cool :-)
13:20:07 <Marvin--> "Ozzy Osbourne, the prince of **** darkness"
13:20:14 <jlouis> m0rkets fyrste in danish
13:20:22 <Marvin--> ø?
13:20:32 <jlouis> yeah, I do not have it on my keyboard
13:20:40 <jlouis> at least not in a place I know of
13:20:46 <jlouis> dvorak rules, but of course
13:21:32 * Marvin-- is better at typing Danish letters than jlouis :P
13:21:36 <shapr> you can use the X compose key, or x-symbol if you're in emacs
13:21:50 <shapr> I'm always in emacs of course...
13:21:51 <shapr> I'm using ERC Version 3.0 $Revision: 1.494 $ with XEmacs 21.4 (patch 12) "Portable Code" XEmacs Lucid!
13:21:53 <Marvin--> or altgr + ö on my Swedish layout :-)
13:22:15 <Marvin--> æÆøØ
13:22:24 <Marvin--> damn crammed :)
13:23:30 * Marvin-- wanders out to the kitchen in search for a sandwich
13:23:44 <Marvin--> .oO(and a beer)
13:24:17 <andersca> mmmm, beer
13:29:29 <Marvin--> alas, not guinness
13:29:37 <jlouis> shapr: we all know emacs is the devils application. I use vi but of course
13:29:45 <shapr> I use vi also.
13:29:51 * ibid uses both
13:29:56 <shapr> yah, me too!
13:29:56 * Marvin-- doesn't use vi
13:29:57 <shapr> hi ibid!
13:29:58 * Marvin-- uses vim
13:30:12 <ibid> btw, we founded Toys today :-)
13:30:27 <shapr> cool, what's that?
13:30:43 <ibid> the thing i've been asking help with on its name
13:30:51 <shapr> you started a new company?
13:30:54 <ibid> no
13:30:55 <liiwi> ibid: cool
13:31:06 <ibid> liiwi: #toys@ircnet
13:31:12 <ibid> jos kiinnostaa
13:31:26 <Marvin--> .oO(ooh look, line noise)
13:31:28 <shapr> heh
13:31:39 <shapr> Marvin--: you realize that's what swedish looks like to most humans?
13:31:55 <Marvin--> bork bork bork
13:32:33 <Marvin--> <zarq> is there a list for swedish developers?
13:32:34 <Marvin--> <willy> yep, debian-bork-bork-bork
13:32:35 <ibid> sällskap av konstnärlig programmerings vänner Toys
13:32:39 <Marvin--> ooh
13:32:57 <ibid> (toys is formed from the finnish name of course)=
13:33:06 <ibid> taiteellisen ohjelmoinnin ystävien seura Toys
13:33:37 <Marvin--> it's not recursive? I'm disappointed
13:33:44 <ibid> no :)
13:33:52 <ibid> sorry
13:34:07 <ibid> Marvin--: figure out a recursive swedish expansion for it ;-)
13:34:54 <Marvin--> I thought we agreed on "sällskapet konstnärlig programmerings vänner" by the way
13:35:18 <ibid> did we?
13:35:29 <ibid> anyway, it was abandoned long time ago
13:35:36 <ibid> the finnish name changed
13:35:44 <Marvin--> "sällskap av" sounds just weird
13:35:45 <ibid> and liw approved the swedish name ;-)
13:35:58 <ibid> anyway, it's now fairly late to change it
13:36:21 <ibid> we would need a supermajority vote...
13:36:22 <Marvin--> bad Swedish name, sucks to be you
13:36:40 <Marvin--> on meetings in two consecutive years?
13:36:58 <ibid> and btw, when i came here to discuss the last name change, no swedes were to be found'
13:37:02 <ibid> no :_)
13:37:02 <Marvin--> kinda silly to have both double voting and supermajority though
13:37:06 <shapr> I was here!
13:37:13 <Marvin--> you're just a Swede-wanna-be
13:37:15 <ibid> shapr: you don't count
13:37:16 <shapr> but I'm a bad excuse for european to begin with ;-)
13:37:35 * Marvin-- watches Ozzy on TV
13:39:46 <jlouis> hehe
13:41:05 <shapr> hi liw!!
13:41:09 <shapr> ltns!
13:41:24 <liw> humble greetings and salutations
13:41:32 <ibid> liw came here to defend his honour? ;-)
13:41:50 <shapr> liw: are you learning Haskell?
13:41:51 <liw> I irc before you to confess that my Swedish is lousy
13:41:57 * shapr grins
13:42:07 <liiwi> not lousier than mine
13:42:14 <shapr> my swedish is lousy too
13:42:49 <liw> shapr, I intend to have a go at it - I'm considering switching from Python to something else, for my high level language needs, and Haskell, O'Caml, and Scheme seem to be the alternatives for me
13:42:56 <liiwi> shapr: propably better than mine by now :)
13:43:15 <shapr> liw: the same thing happened to me... I decided to switch when Guido rejected Stackless for core Python
13:43:29 <shapr> I realized I really want to play with first class continuations, and Python wasn't going in that direction.
13:43:52 <liw> I'm happy enough with Python, but it's been too long since I learned a new language (not counting the lisp-like thing I'm implementing at work)
13:43:58 <Smerdyakov> You didn't list SML!
13:44:15 <Marvin--> liw: hear hear (re your Swedish :)
13:44:21 <shapr> liw: Haskell is the most purely functional, OCaml is the fastest for binary execution (but not pure FP), you probably already know about Scheme
13:44:37 <shapr> liw: so it depends on your priorities
13:44:55 <liiwi> from what I've heard, Haskell is not exactly slow either
13:45:03 <shapr> that's true
13:45:10 <jlouis> SML is fast too.
13:45:17 <ibid> languages are not slow (nor fast). implementations are
13:45:23 <jlouis> Clean should employ a good compiler
13:45:34 <shapr> though the way I've heard the comparisons, OCaml and SML are between as fast to half as fast as C
13:45:42 <ibid> languages do affect on how easy it is to make a fast implementation...
13:45:43 <shapr> and Haskell is about five to seven times slower than C
13:45:45 <liw> I'll ask for more advice when I actually have time to study those three languages (I intend to write the same smallish but real program in each of them)
13:45:54 <jlouis> ibid: to some extent. It is possible to design languages which bogs down each and every implementation
13:45:59 <ibid> liw: artistically? ;-)
13:46:06 <shapr> in my opinion, Haskell is the most expressive of those
13:46:12 <ibid> jlouis: as i said, 23:45  <ibid> languages do affect on how easy it is to make a fast implementation...
13:46:15 <ibid> :-)
13:46:26 <jlouis> ibid: okie ;)
13:46:35 <jlouis> we agree
13:46:39 <ibid> yep
13:46:49 <shapr> of course, I'm biased, I'm the founder of #haskell and I think it's just marvelously cool =)
13:46:55 <liw> ibid, probably not, but I'll have to remind myself what that means, again :)
13:47:03 <ibid> but i do get a little angry when people compare languages when they are in reality comparing implementations
13:47:10 <shapr> ibid: yah, good point
13:47:14 <ibid> liw: referring to what?
13:47:21 <ibid> ah, yeah
13:47:26 <liw> ibid, what artistic programming is, that is
13:47:28 <ibid> yeah
13:47:35 <liw> I've read the definition, but I keep forgetting it
13:47:44 <ibid> there is a definition?
13:47:47 <ibid> (:-)
13:52:53 <shapr> yow
13:52:55 <shapr> , yow
13:56:08 * shapr is publically biased
13:56:22 <Marvin--> "where do you live?" "two stories below you" "you bastards"
13:56:26 <shapr> ???
13:56:41 <shapr> oh, Ozzy
13:56:48 <Marvin--> yeah
14:36:16 <shapr> hi Pseudonym!
14:37:24 <Pseudonym> G'day.
14:37:29 <shapr> what's up?
14:37:56 <Pseudonym> Oh, not much.
14:37:59 <Pseudonym> Have to vote today.
14:38:10 <Pseudonym> It's a postal ballot, so it's not so onerous.
14:38:19 <shapr> yay voting
14:38:23 <Pseudonym> And it's only a local council election, so it's not like it matters.
14:38:28 <Pseudonym> Yay _compulsory_ voting.
14:38:41 <Marvin--> compulsory voting?
14:38:54 * Pseudonym nods
14:39:13 <Marvin--> doesn't sound too democratic
14:39:45 <Pseudonym> Well it is, in principle.
14:40:04 <Pseudonym> Here, the "I like bumper stickers and I vote" threat carries no weight.
14:40:37 <Pseudonym> Everybody votes, so in theory, nobody can stack the result by mobilising people to vote.
14:40:38 <Marvin--> uh?
14:40:42 <Pseudonym> They get lost in the crowd.
14:44:41 <Pseudonym> Besides, you aren't required to actually vote.
14:44:47 <Pseudonym> Just to turn up and get your name ticked off.
15:17:08 * shapr reads up on reloading of modules in Erlang
15:18:37 <shapr> Pseudonym: have you read Andre Pang's runtime loader for GHC?
15:19:09 <shapr> I'm wondering how hard it would be to hack Erlang style reloading into runtime_loader
15:19:34 <whee> have fun :p
15:19:45 <Pseudonym> No, I haven't.
15:19:48 <shapr> whee: have you looked at the runtime_loader?
15:19:58 <whee> nope
15:20:41 <Pseudonym> Part of the thing with true hot reloading, though, is you need a way to specify the difference between "I definitely want to call the same version of this" and "calling a new version if it exists is okay".
15:20:55 <whee> I don't know how well it'd work if it depends on the OS's loading tools
15:21:05 <Pseudonym> In Erlang, you do this with module qualification.
15:21:49 <whee> Pseudonym: and there's some standard conventions for migrating data structures over
15:21:58 <shapr> it seems that in Erlang you plug in the current version of a module into your 'scope' or whatever when you start calling functions from that module
15:22:16 <Pseudonym> whee: In Erlang, data structures are untyped.
15:22:32 <Pseudonym> So migrating data structures are straightforward as they have a single run-time representation.
15:22:48 <whee> Pseudonym: yes, but it still needs to be done at a certain time
15:23:37 <Pseudonym> I don't see how this would be particularly hard.
15:23:52 <Pseudonym> In Erlang, you generally upgrade a server thread at a time.
15:24:02 <Pseudonym> Server threads are of the form:
15:24:13 <Pseudonym> serverThread :: State -> ()
15:24:28 <Pseudonym> (Where Erlang is impure, so I/O happens behind the scenes.)
15:24:56 <Pseudonym> To support upgrading of old data structures, you simply case-switch on the state.
15:25:13 <Pseudonym> serverThread (StateVersion1 state) = serverThread (upgradeState state)
15:25:21 <Pseudonym> serverThread (StateVersion2 state) = ...
15:25:36 <Pseudonym> Where the ... tail-calls serverThread when it's done a request-response pair.
15:26:36 <Pseudonym> This is probably an artifact of the way Erlang programs are written.
15:40:41 <shapr> Pseudonym: how would you do it in GHC?
15:42:25 <shapr> http://www.algorithm.com.au/wiki/hacking/haskell.ghc_runtime_loading
15:42:57 <Pseudonym> I don't know.
15:43:06 <Pseudonym> This is much easier if it's part of the VM. :-)
15:43:12 <shapr> truly
15:43:31 <Pseudonym> The easiest way is if a hot-loadable module isn't allowed to know its internal state.
15:43:38 <shapr> even so, if it could be done simply in GHC, maybe it would make it into H'05
15:43:52 * Pseudonym hmmms
15:44:07 <Pseudonym> I think that hot code replacement is not necessarily something that Haskell wants to do.
15:44:25 <Pseudonym> C++ has gotten along quite well without it.
15:45:10 <shapr> hm, ok
15:45:47 <Pseudonym> Unless we want to corner the telephone exchange market, it doesn't seem useful.
15:45:59 <Pseudonym> People in the real world are used to scheduling downtime.
15:46:03 <shapr> that's true.
15:46:24 <Pseudonym> Of course, this could be famous last words.
15:46:57 <shapr> I think hot loading would be worth trying
15:48:18 <Pseudonym> Loading dynamic objects is important, I agree with you on this.
15:50:45 <whee> heh
15:50:52 <whee> hot loading is great with any daemons
15:51:30 <whee> which is something erlang does very well; so it works well there
16:31:32 * shapr bounces happily
16:49:34 <shapr> yow
17:55:15 <shapr> hi Chilli 
17:55:40 <Chilli> Moin shapr!
17:55:44 <Chilli> What's on?
17:55:58 <shapr> reading lambda.weblogs.com at the moment
17:56:01 <shapr> what's up with you?
17:56:20 <shapr> Chilli: do you understand what oleg posted to the main haskell mailing list today?
17:56:23 <Chilli> doing email and stuff
17:56:24 <shapr> I have no clue what he's talking about.
17:56:59 <Chilli> when?  in the last couple of hours?
17:57:01 <shapr> yes
17:58:05 <Chilli> Have to check
18:03:04 <Chilli> shapr: he has two posts
18:03:09 <Chilli> which one do you mean?
18:03:19 <shapr> the first class types stuff
18:03:31 <Chilli> ok, let me readit
18:03:51 <shapr> if you're busy, it's no big deal, I can figure it out at some point :-)
18:06:26 <Chilli> ok
18:06:35 <Chilli> interesting post
18:06:41 <Chilli> but not really a new idea
18:06:58 <Chilli> but the way he uses it is kind of new
18:07:48 <Chilli> basically, what he does is to use existential types to implement a form of dynamics
18:08:26 <Chilli> that this can be done has been known for quite a while
18:09:15 <Chilli> that you can define dynamics in that way using Haskell type classes has been demonstrated (in a more general setting) by James Cheney and Ralf Hinze in a paper at last year's haskell workshop
18:09:57 <shapr> hm
18:10:05 <shapr> thanks for your explanation :-)
18:10:22 <shapr> one more small question, do you think erlang style hot code reloading would be useful for Haskell?
18:10:26 <Chilli> http://www.informatik.uni-bonn.de/~ralf/publications/HW02.ps.gz
18:10:36 <Chilli> yes, very useful!
18:10:45 <shapr> ok, thanks
18:11:18 <Chilli> that's a good paper
18:12:01 <shapr> I'll read it, thanks.
18:12:27 <Chilli> and have a look at this, too: http://www.cis.upenn.edu/~sweirich/papers/cast/cast.ps
18:12:50 <Chilli> paper by Stephanie Weirich at ICFP 2000, which uses similar techniques
18:13:07 <Chilli> in fact, it is probably closer to Oleg's proposal
18:13:21 <Chilli> than Cheney/Hinze's paper
18:13:43 <Chilli> Why did you ask re the hot code reloading?
18:14:06 <shapr> well, there's a big thread on comp.lang.functional about it
18:14:14 <shapr> and it seems like a neat feature...
18:14:23 <Chilli> don't read comp.lang.functional anymore, actually
18:14:33 <shapr> yah, there's rarely haskell stuff in there.
18:14:34 <Chilli> surely is neat!
18:15:11 <shapr> it looks like andre pang's loader could be a hot code reloader
18:15:19 <shapr> but I don't think that would work on windows
18:15:25 <Chilli> (not that c.l.f. wouldn't be interesting, but there are so many things to read...)
18:15:37 <shapr> yah, too much to read
18:15:45 <shapr> lambda.weblogs.org is addictive
18:15:51 <Chilli> :-)
18:16:26 <shapr> I still think Arrows have huge potential
18:16:37 <Chilli> maybe the code loader could be extended in that direction, but you have to reset stuff and that's going to be hard
18:16:44 <shapr> yah, I agree.
18:17:12 <shapr> I read an overview of the erlang reloading setup, and Pseudonym gave a more detailed explanation.
18:17:20 <shapr> it's rough stuff
18:20:55 <shapr> time for sleep...
20:01:52 * Pseudonym loves the wiki
21:40:32 <kawfee> is there a folding function that takes two lists, one a list of operators and the other a list of operands
21:48:24 <Pseudonym> Operators are a syntax thing.
21:48:27 <Pseudonym> Did you mean functions?
22:06:58 <dennisb> kawfee: you can use zipWith 
22:07:29 <Pseudonym> zipWith ($) in particular
22:08:06 <Pseudonym> Gotta go.
22:24:02 <kawfee> $
22:24:07 <kawfee> what does that do?
22:27:42 <dennisb> look at the type
