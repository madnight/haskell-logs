03:15:04 <Janni> hi guys!
03:16:29 <Arnia> Hey
03:19:42 <Janni> yay, installing XFree86-4.3.0 :)
04:51:12 <Segora> hi
05:43:33 <Igloo> Am I right in thinking that foo# is an unboxed foo and is therefore strict?
05:49:59 <Janni> Igloo: did I miss s.th.? what is "foo#"?
06:08:20 <Igloo> A GHC unboxed expression
06:43:15 <bubba1034> is thee a hash tabke library for haskell?
06:44:08 <Igloo> There are FiniteMap implementations hanging around
06:48:38 <Smerdyakov> They use hash tables?
06:50:08 <Igloo> No, balanced trees
06:50:56 <Smerdyakov> He said haaaash table!
08:55:56 <zeno_> I get the following error in hugs98: "Last generator in do {...} must be an expression" 
08:56:00 <zeno_> what does that mean?
08:56:25 <Smerdyakov> You ended your do block with a binding? Something like a <- e
08:56:26 <hdaume> it means that the last line in a do block must just be an expression, not a let, not a "x <- foo"
08:56:52 <zeno_> i have a 'let' in my expression
08:57:09 <hdaume> what is the last line of the do block?
08:57:25 <zeno_> it goes like this: (sorry for pasting)
08:57:36 <zeno_> on :: Show a => Parser Char a -> [Char] -> IO ()
08:57:40 <zeno_> on p inp -- run parser p on input inp
08:57:44 <zeno_> 	= do let (res, msgs) = parse p inp
08:57:48 <zeno_> 			putStr (if null msgs then "" else "Errors:\n" ++ show msgs)
08:57:51 <zeno_> 			putStr ("Result:\n" ++ show res ++ "\n")
08:57:53 <zeno_> that's it
08:58:02 <hdaume> you have a layout error, i think
08:58:15 <hdaume> not to start a war, but you might consider not using tabs
08:58:40 <zeno_> i think something went wrong with copy-pasting
08:58:55 <hdaume> do the putstrs line up with the 'l' in let?
08:59:00 <zeno_> i have sts=2 in vim
08:59:11 <zeno_> no they don't
08:59:16 <hdaume> they need to :)
08:59:44 <zeno_> ok i've got them lined up now but still get the same error
09:00:08 <hdaume> i believe haskell requires tab stops to be either 4 or 8.  you sure you do't want to use spaces? :)
09:00:30 <zeno_> i believe i *am* using spaces :)
09:00:42 <Igloo> Haskell treats tabs as aligning to the next 8 character tabstop
09:00:54 <hdaume> Igloo: thanks...i wasn't sure :)
09:01:01 <Igloo> What you pasted there had tabs in
09:01:08 <zeno_> anybody like to share some good tab settings for editing haskell in vim :D
09:01:19 * hdaume is an emacs person
09:01:22 <Igloo> And that is indeed your problem
09:01:33 <Igloo> set expandtabs is a good start  :-)
09:01:42 <Igloo> expandtab rather
09:04:58 <emu> tabs are harmful :-P
09:05:58 <zeno_> Igloo: that dit it :)
09:06:01 <zeno_> thank :)
09:06:03 <zeno_> s
13:15:52 <ganimedes> hello there! does any of you have experience working with alex ("Lex for Haskell Programmers")? 
13:19:07 <ganimedes> hello there! does any of you have experience working with alex ("Lex for Haskell Programmers")? 
13:19:30 <Marvin--> no
13:19:30 <Marvin--> no
13:19:31 <Marvin--> :)
13:19:44 <andersca> didn't SyntaxPolice write it? :)
13:19:52 <andersca> or at least he's hosting the web page
13:19:57 <ganimedes> yep 
13:20:04 <Marvin--> I think he took over the maintainence
13:20:29 <ganimedes> i just need some documentation a bit richer on examples 
13:22:43 <Marvin--> ...bye?
13:29:17 * SyntaxPolice pops up, looks around, pops back down
13:39:50 <Marvin--> heh
13:42:21 <danols> i'm confused
13:42:28 <danols> why is this not working ?
13:42:38 <danols> makeList n 	| n == 0 	= []
13:42:38 <danols> 	   	| otherwise   	= 	 
13:42:38 <danols> 			do putStrLn "Enter number 0 end"
13:42:38 <danols> 			num <- getLine
13:42:38 <danols> 			n : makelist (read num)
13:42:39 <danols> 		
13:42:56 <danols> it says syntax error "unexpected num"
13:43:07 <Marvin--> you have to align num with putStrLn
13:43:08 <hdaume> odn't use tabs.  the 'n' in num needs to be lined up vertically with the p in putstr
13:44:05 <danols> ohh , what edit program should I use ? one that changes tabs into spaces
13:44:18 <hdaume> what do you use currently?
13:44:23 <danols> notepad
13:44:43 <hdaume> you can use notepad if you want, but you should probably format it more like:
13:44:47 <hdaume> makeList n
13:44:50 <hdaume>    | n == 0 = []
13:44:55 <hdaume>    | otherwise = do
13:44:59 <hdaume>     putStrLn ...
13:45:02 <danols> tabs or no tabs ?
13:45:03 <hdaume>     num <- ...
13:45:06 <hdaume> using tabs
13:45:19 <hdaume> just don't put the first expression from 'do' on the same line as 'do' istelf
13:45:25 <hdaume> it makes it easier to ensure that they line up
13:45:37 <hdaume> though i would suggest changing to emacs or vim or bedit or some other "real" editor
13:45:44 <hdaume> you could even use the port of jcreator if you wanted
13:45:55 <danols> i know , i gave up linux though, not good as a desktop env.
13:46:08 <danols> listen, it still gives me an error
13:46:23 <hdaume> a different one, though, right?
13:46:23 <danols> type [b] does nto match IO a
13:46:26 <danols> yes
13:46:31 <hdaume> yeah, you have a type error
13:46:37 <danols> is my reasoning correct at lest ?
13:46:42 <danols> i'm studing/learning for a midterm
13:46:45 <hdaume> there are versions of emacs and vim for windows
13:47:05 <danols> i know, i might switch later on, that is not my concern now
13:47:08 <hdaume> well, you say 'n : makelist ...' at the end.  first of all, x : y is not a monadic operation, thus you need a 'return' before it
13:47:24 <danols> hmmm
13:47:42 <hdaume> secondly, 'n' is an Int (or something) and 'makelist (read num)' has type IO something.  you can't cons (:) an Int to an IO something.
13:47:52 <danols> shiat, hmm
13:47:56 <hdaume> you should do something like ' rest <- makelist (read num)  \n   return (n:rest)'
13:47:57 <danols> i'm confused
13:48:06 <danols> ohhh 
13:48:16 <danols> hmm
13:48:26 <danols> fuck 
13:48:56 <danols> is there any way to return a [Int] or once it is 'monadic' you have to stay monadic ?
13:49:12 <hdaume> you have to stay monadic
13:49:13 <Marvin--> hm, is there a way to write a function that returns a lazy infinite list of ints, read from stdin?
13:49:16 <hdaume> at least if you're in IO
13:49:18 <Marvin--> do I have to use unsafeInterleaveIO?
13:49:30 <danols> i'm simply trying to create an Int array 
13:49:42 <danols> by having the user input the numbers
13:49:51 <Marvin--> I guess some sort of continuation-style passing would work
13:50:24 <hdaume> danols: yes, i can see that :)
13:51:02 <danols> is haskell worth it than ? seems it's like imperative or only functional and can't combine it ?
13:51:32 <hdaume> danols: why do you say that?
13:52:01 <danols> i don't know cause I don't have a bigger picture of what haskell can do for me ?
13:52:06 <danols> it sounds interesting
13:52:29 <hdaume> danols: if you want to read in a list of ints, then this is pretty my exclusively something that happens in the IO monad.  once you want to process the ints, that can be purely functional
13:52:45 <danols> ahhh that was kind of what I was wondering
13:53:07 <danols> so how would I read in the list, one thing that enoys me is the cryptic error msgs lol
13:53:17 <hdaume> danols: yes, they can be confusing
13:53:23 <hdaume> so you're on the right track with what you had
13:53:34 <danols> return is used for monadic functions ?
13:53:50 <hdaume> yes.  'return :: a -> IO a', for instnace.
13:53:59 <hdaume> it turns a "normal" value into an IO action
13:54:18 <danols> hmmm
13:54:22 <danols> so how does it help me ?
13:54:48 <hdaume> the problem you have is that 'n' is an Int.  'makelist (read num)' has type 'IO [Int]'.  you can't write 'n : makelist (read num)' because (:) :: a -> [a] -> [a].  there is a type mismatch here.
13:54:59 <danols> Monad a => b -> a b ...show is the type of the return
13:55:12 <danols> it seems to me it returns a normal value from a monad value ?
13:55:23 <hdaume> what you want to do is "run" the makelist action.  thus you do something like "rest <- makelist (read num)".  then rest will have type [Int]
13:55:29 <hdaume> then you can return (n:rest)
13:56:34 <danols> i'm sorry i don't follow
13:56:34 <hdaume> danols: yeah, i'm assuming that 'a' in that expression is IO
13:57:18 <hdaume> okay, if you have an action "foo" of type 'IO a', you can "get out" the 'a' by doing "val <- foo".  then val will have type 'a' and will be the result of the action 
13:57:21 <hdaume> right?
13:57:33 <danols> ok
13:57:37 <hdaume> this is what you have for "num <- getLine"
13:57:43 <danols> yes
13:57:47 <hdaume> getLine is of type IO String and you want num to be of type String.
13:58:08 <hdaume> okay, now, overall your makelist function will have type 'Int -> IO [Int]', right?
13:58:38 <danols> hmm ok
13:58:59 <hdaume> because you give it the int n, which tells it whether to stop or not, and then it returns a list (in the IO monad) of ints
13:59:12 <danols> correct
13:59:28 <hdaume> okay.  so once you've gotten 'num', you need to recurse on makelist
13:59:42 <hdaume> the problem is that makelist is an IO action and really what you want to do is "run" makelist and get the value out
13:59:44 <hdaume> so you say:
13:59:47 <hdaume>    num <- getLine
13:59:53 <hdaume>    rest <- makelist (read num)
14:00:04 <hdaume> this will run the action "makelist (read num)" and give you the results
14:00:14 <hdaume> thus, the type of "rest" will be [Int]
14:00:46 <hdaume> now, 'n' represents the current value and 'rest' represents the rest of the list.  you want your action to have value 'n:rest', thus you say "return (n:rest)"
14:01:03 <hdaume> since 'n:rest' is of type [Int] and you want to have something of type 'IO [Int]', you need to use "return"
14:02:03 <hdaume> really, you don't need to think too much about types.  just think about what is an action and what isn't.
14:02:16 <hdaume> if it's an action, you need to get the value out using "<-"
14:04:19 <danols> ok, but i just don't see how I would program that
14:05:26 <hdaume> can you formulate a question?
14:06:00 <danols> i think it would help if you gave me an example, i want a function makelist :: Int -> [Int IO] -> [Int]
14:06:44 <hdaume> that type doesn't make sense :)
14:07:32 <danols> that i'm not getting it
14:07:34 <danols> lol
14:08:41 <danols> ok what i need is then arry <- makeList , make list will return [Int IO] then <- will make arry be [Int] ?
14:09:20 <hdaume> if you want that, you want makelist to have type 'IO [Int]' (i.e., it's an IO action which when run returns a list of Ints).
14:09:58 <danols> how would you go about this than ?
14:11:34 <danols> makeList n
14:11:34 <danols> 	| n == 0 	= 0
14:11:34 <danols>  	| otherwise   	= do	 
14:11:34 <danols> 	putStrLn "Enter number 0 end"
14:11:34 <danols> 	num <- getLine
14:11:34 <danols> 	return n:makeList (read num)
14:11:40 <hdaume> i would look at pages 37-39 of http://www.isi.edu/~hdaume/htut
14:12:29 <danols> hahah that's what i'm using to learn haskell
14:12:40 <hdaume> hehe
14:13:00 <danols> it confuses me
14:13:07 <danols> i did all the other excercises no problem
14:13:08 <hdaume> let me give you a different idea for how to write this function
14:13:12 <danols> ok
14:13:26 <hdaume> start with 'makeList = do ...'.  i.e., makeList doesn't take an argument.
14:13:32 <hdaume> first, use getLine to read the line
14:13:40 <hdaume> at that point, check to see if the number read is zero
14:13:45 <hdaume> if it is, immediately return the empty list
14:13:53 <danols> if it does not return an INT
14:14:10 <danols> nevermind go on
14:14:21 <hdaume> otherwise, call the action makeList again, and return the newly-read number consed onto the value returned by the recursive call
14:15:38 <danols> makeList = do
14:15:38 <danols> 	putStrLn "Enter number 0 end"
14:15:38 <danols> 	num <- getLine
14:15:38 <danols> 	if (read num == 0)	
14:15:38 <danols> 	  return []
14:15:39 <danols> 	else do return n:makeList 
14:15:41 <danols> 	
14:16:48 <hdaume> two things: (1) if requires 'then'.  (2) you still can't cons n onto makeList.  you need to "run" makeList and then cons n on to the result of that action
14:18:43 <danols> n: (rest <- makeList) ?
14:18:58 <Smerdyakov> You have to do it in order in the do
14:19:18 <hdaume> do rest <- makeList
14:19:22 <hdaume>     return (n : rest)
14:19:23 <hdaume> should work :)
14:20:46 <hdaume> erm, and that 'n' should be "read num" :)
14:21:20 <danols> hmm have layout problems
14:21:29 <danols> makeList = 
14:21:30 <danols>       do putStrLn "Enter number 0 end"
14:21:30 <danols> 	 num <- getLine
14:21:30 <danols> 	 if (read num == 0) then
14:21:30 <danols> 	 do return []
14:21:30 <danols> 	    else 
14:21:32 <danols> 	 do rest <- makeList 
14:21:34 <danols> 	    return ((read num) : rest))
14:21:44 <danols> does the second do must be aligned with else ?
14:22:22 <hdaume> i believe it must be indented more.  try
14:22:25 <hdaume>     else do
14:22:28 <hdaume>         rest <- makeList
14:22:33 <hdaume>           return ((read num) : rest)
14:22:39 <hdaume> (those last two should be lined up)
14:23:00 <danols> should I start do on new line or have then on the last line ? like then do insteand then than do
14:23:50 <danols> how do you format you code ?
14:24:43 <hdaume> i usually do one of
14:24:45 <hdaume> makeList = do
14:24:45 <hdaume>   num <- getLine
14:24:46 <hdaume>   if read num == 0
14:24:46 <hdaume>     then return []
14:24:47 <hdaume>     else do rest <- makeList
14:24:47 <hdaume>             return (read num : rest)
14:24:49 <hdaume> makeList = do
14:24:51 <hdaume>   num <- getLine
14:24:53 <hdaume>   if read num == 0
14:24:55 <hdaume>     then return []
14:24:57 <hdaume>     else do 
14:24:59 <hdaume>       rest <- makeList
14:25:01 <hdaume>       return (read num : rest)
14:25:03 <hdaume> but it's largely personal preference
14:26:37 <danols> isn't it then do instead of then ?
14:26:51 <hdaume> when there's only one expression you don't need the do
14:27:00 <hdaume> but 'then do' would also work
14:27:23 <danols> i see
14:27:23 <danols> fuck
14:29:03 <danols> ERROR "D:\Backups\schoolWork\Cisc260\Test.hs":29 - Unresolved top-level overload
14:29:05 <danols> ing
14:29:05 <danols> *** Binding             : makeList
14:29:05 <danols> *** Outstanding context : Read b
14:29:19 <Marvin--> ah, the DMR :)
14:29:27 <danols> Dmr ?
14:29:52 <Marvin--> it stands for the "Dreaded Monomorphism Restriction"
14:30:13 <Marvin--> the monomorphism restriction says that you have to give explicit types of overloaded top-level functions or something like that
14:30:14 <danols> ohhh, now that you put it that way it all makes sense lol
14:31:08 <danols> so how do I fix this ?
14:31:16 <Marvin--> add a type signature
14:31:28 <Marvin--> makeList :: IO [Int]   <- if you just want ints
14:31:42 <Marvin--> makeList :: (Read a) => IO [a]  <- if you want the most general type
14:31:54 <Marvin--> no wait, you need  (Read a, Num a) => IO [a]
14:32:12 <danols> what does Num stand for ?
14:32:18 <danols> can you explain that latter one to me
14:32:49 <Marvin--> Num stands for numerical
14:32:59 <danols> Read ?
14:32:59 <Marvin--> like Int, Float, Double...
14:33:12 <Marvin--> Read is the type class that has the read function
14:33:32 <danols> (Read a, Num a) means it's of Read and Num class ?
14:33:36 <Marvin--> yes
14:33:38 <esap> Both Num and Read are names of _interfaces_.
14:33:51 <esap> a.k.a. type classes.
14:38:48 <danols> IO [Int] means it's Ints of type IO ?
14:40:05 <esap> danols: no, it means "I/O action returning a list of integers".
14:40:26 <danols> is it acctuall [Int] ? 
14:42:07 <danols> ok i'm a bit puzzled how come my makeList doesn't seem to return [Int]
14:42:12 <danols> it's not shown
14:43:35 <esap> the colon ':' stands for creating a list from its head (first element) and tail (rest of the list).
14:43:51 <danols> i understand that
14:44:15 <danols> however when I run makeList enter some values it should return a [Int] , aren't normally [Int] showable ?
14:44:38 <hdaume> yes, but 'IO [Int]' is not
14:45:10 <hdaume> you can't "show makeList" any more than it makes sense to "show getLine"
14:45:15 <danols> ahhh hdaume than how do I get makeList to return [Int] ? some <- makeList ?
14:46:18 <hdaume> danols: yes, that's basically want you want.  thought that's not "getting it to return [Int]".  that's "running the action and getting the values out"
14:46:25 <esap> danols: var <- makeList  means "execute 'makeList', and bind the result to 'var' (which is a fresh variable).
14:46:35 <danols> i see hm 
14:47:36 <danols> usless
14:47:40 <danols> damn it
14:49:40 <danols> i don't see it
14:49:49 <danols> i must be so anoying now right ? lol
14:50:25 <hdaume> nah
14:50:59 <hdaume> if you want to show what they did, you could do something like:
14:51:03 <hdaume> main = do
14:51:06 <hdaume>   l <- makeList
14:51:07 <hdaume>   print l
14:51:12 <hdaume> then run main
14:52:01 <danols> hdaume see but it's still imperative 
14:52:15 <Marvin--> danols: I/O is tricky in Haskell, so it's not really the best thing to start with
14:52:16 <danols> we have do there
14:52:29 <Marvin--> main = makeList >>= print   better? :)
14:52:31 <hdaume> yeah so what?  when your program is reading in and printing out numbers exclusively, of course it's going to be imperative
14:52:35 <hdaume> main = do
14:52:38 <hdaume>   l <- makeList
14:52:43 <hdaume>   print (some_really_complicated_funciton l)
14:53:11 <hdaume> now, some_really_complicated_function is a purely functional function which operates on the list
14:53:22 <hdaume> it can be 1 million lines of code, none of it imperative
14:53:51 <danols> ok i see
14:54:15 <hdaume> your I/O is always going to be imperative.  it's what you do between the input and the output that's functional.
14:54:41 <danols> ok
14:54:47 <hdaume> and besides, some have called haskell the world's finest imperative language, so if you want to do everything imperatively, more power to you :)
14:54:58 <danols> what do you use it for ?
14:57:56 <hdaume> statistical natural language processing...i use a combo of perl, haskell and ocaml
14:58:46 <hdaume> though i must admit, alsmot all of my code has a very imperative flavor
14:58:58 * esap writes a compiler.
14:59:09 <danols> you guys are really up there
14:59:14 <danols> hmm why not c ?
14:59:43 <hdaume> danols: because it takes 100 lines to do 4 lines of work if you use C
14:59:47 <esap> danols: would take ages to do what I'm doing in C or C++. I actually started with C++, then noticed it was too hard and switched.
14:59:57 <Pseudonym> I write a compiler in Haskell too.
15:00:08 <danols> what kindo f compiler ?
15:00:15 * hdaume thinks he's the only guy who uses Haskell to do something other than write compilers
15:00:16 * Marvin-- just wrote a compiler in Haskell
15:00:16 <Pseudonym> RenderMan shading language compiler.
15:00:25 <Pseudonym> For visual effects.
15:00:39 <Marvin--> hdaume: don't forget shapr who uses it for everything :)
15:00:41 <Pseudonym> Kind of like nVidia's Cg compiler.
15:00:42 <danols> serious stuff here
15:00:44 <hdaume> true :)
15:01:04 * esap is implementing a general-purpose programming language.
15:01:07 <hdaume> of course, i'll be at microsoft for the summer where i'll probably have to use C# or something
15:01:15 <hdaume> blech
15:01:22 <Marvin--> I tend to use Haskell for a lot of various things too, among others prototyping (!)
15:01:29 <Marvin--> hdaume: iiivil
15:01:33 <hdaume> yes, prototyping is very good in haskell
15:01:44 <hdaume> Marvin--: is that swedish?  :)
15:01:52 <Marvin--> unfortunately, the main project I'm working on now is Haskell really unsuitable for
15:02:09 <Marvin--> hdaume: Swenglish
15:02:21 <Marvin--> hdaume: 'i' is pronounced like the English 'e'
15:02:32 <Marvin--> well, the long wovel 'e' anyway
15:02:46 <hdaume> yeah, i figured :)
15:03:05 <danols> main = do 
15:03:05 <danols> 	list <- makeList
15:03:05 <danols> 	sum list
15:03:10 <danols> why won't that work ?
15:03:19 <hdaume> return (sum list) should work :)
15:03:38 <Marvin--> it would? I thought the type of main was  IO ()
15:03:47 <hdaume> because 'sum list' has type Int, but the last guy in a do block needs to have type IO something
15:03:50 <Pseudonym> I also use Haskell to prototype most things.
15:03:54 <danols> why did print list work ?
15:04:19 <hdaume> because the type of 'print list' is IO ()
15:04:22 <Marvin--> danols: because print has the type  (Show a) => a -> IO ()
15:04:27 <hdaume> the type of sum list is Int
15:04:36 <hdaume> you could do 'print (sum list)'
15:04:38 * Marvin-- is off to sleep
15:04:51 <hdaume> sum is a plain old function; print is an action.  you need to end do blocks with actions.
15:05:12 <danols> return covnerts IO [Int] to [Int] right ?
15:05:28 <hdaume> other way around :)
15:05:37 <hdaume> return :: a -> IO a
15:05:59 <hdaume> return takes a value and creates an action which, when run, returns that value
15:06:02 <danols> gosh, this is gonna take a bit to get used to 
15:06:39 <hdaume> in C, you wouldn't write "int foo() { int x = 5; x }"    :)
15:06:59 <danols> true
15:07:19 <hdaume> this is sort of similar (but not quite)
15:07:47 <Pseudonym> Well it kind of is.
15:07:51 <Pseudonym> "return" is an action
15:07:53 <Pseudonym> Not a value.
15:08:21 <Pseudonym> The non-similarity is that C confuses values with actions.
15:09:01 <Pseudonym> The C statement "x+y;" is an action which computes the value of x+y then throws it away.
15:20:16 <hdaume> i actually got tripped up by that in C a little while ago.  if i had 'int bar(int x)' i would try to write 'int foo() { bar(5); }' and expect it to return the value properly :)
15:20:29 * Pseudonym laughs
15:20:45 <Pseudonym> foo = do { x <- bar ; return x }
15:20:47 <Pseudonym> Hope this helps.
15:20:52 <hdaume> ; )
17:48:15 <kawfee> hello
22:23:04 * inkedmn is away: stuff
23:27:20 * inkedmn is back (gone 01:04:15)
