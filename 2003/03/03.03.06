00:00:12 <bubba1034> Thanks.
02:40:37 <Marvin--> does anyone know if there's a haskell function that creates tempfiles?
02:40:45 <Marvin--> mktemp, mkstemp, tmpfile or whatever
03:10:04 <opet> I couldn't find one
03:10:08 <opet> was looking the other week
03:49:24 <shapr> would be handy
04:08:55 * shapr bounces
05:29:09 <buggs> hoi
06:00:22 <SyntaxPolice> morning
06:02:29 <mgoetze> hi SyntaxPolice 
06:02:34 <mgoetze> how's the project?
06:06:39 * shapr bounces
06:06:59 <shapr> SyntaxPolice: ye who have experience using Haskell in the commercial world, what do think?
06:07:04 <shapr> any comparisons?
06:09:19 <SyntaxPolice> mgoetze: the project is going well. I wish I knew monads from the beginning because some of the bugs wouldn't be there I think.
06:09:22 * SyntaxPolice is testing & debugging
06:09:30 <SyntaxPolice> shapr: comparisons to other languages?
06:14:43 <SyntaxPolice> I don't really see any serious barrier to commercial use except library support.
06:16:29 <shapr> any particular up or down sides compared to other languages?
06:16:46 <shapr> I agree with library support.
06:16:59 <shapr> we need more
06:18:54 <SyntaxPolice> debugging support too. I'd like to use Hat, but it doesnt' have multi param T.C. yet.
06:19:23 <shapr> I've never really learned how to use debuggers, unit tests seem to cover the same stuff for me..
06:19:31 <SyntaxPolice> also, learn monads before writing a big project, or you'll be sorry when you come to debug it.
06:19:52 <shapr> debuggers does seem to be the second most common thing wanted for Haskell users
06:20:00 <SyntaxPolice> well, for big projects, unit tests can't replace integration testing, IMHO, so debugging is still important.
06:20:25 <shapr> what do you mean by integration testing?
06:20:57 <shapr> I think we had this discussion before, but I can't remember how it went.
06:21:01 <SyntaxPolice> once you have put many pieces together, you have to test them together.
06:21:06 <SyntaxPolice> no, I don't think we talked about this before.
06:21:49 <SyntaxPolice> for instance, some of the data structures in my system were getting too large to make up test cases on my own, so when I finished the parser, I integrated the parser into the testing so I could get larger data structures.
06:22:10 <shapr> hm, interesting
06:23:32 <shapr> I usually start with one high-level test and break it down from there
06:23:46 <SyntaxPolice> how do you write a high level test in the middle of development?
06:23:57 <shapr> I do it at the beginning of development
06:24:04 <shapr> before any code is written
06:24:08 <Arnia> Wow, I try and avoid Software Engineering in my practical by coming onto #haskell and now I find it here too :)
06:24:14 <Arnia> Hey all ;)
06:24:14 <shapr> Arnia: :-P
06:24:17 <shapr> hi Arnia 
06:24:39 <Arnia> Sorry, I don't really enjoy SE :)
06:24:39 <shapr> I like test driven development, write a test, then treat that as a question, and the code is the answer.
06:25:09 <shapr> it's often a recursive question, my top level test usually fails for days on end
06:25:45 <SyntaxPolice> shapr: I see.
06:25:57 <SyntaxPolice> Arnia: but if you generalize your tests to arrows ...
06:26:02 <SyntaxPolice> (how was that?)
06:26:05 <shapr> mmm, nice
06:27:44 <Arnia> SyntaxPolice: I'm thinking about new and novel uses for FRP and tying all the different FRP systems together
06:27:50 * Arnia gives a manic laugh
06:28:23 <SyntaxPolice> Arnia: I really wanted to use FRP for my project, but I didn't have enough time to think about it :(
06:31:32 <Arnia> SyntaxPolice: I'm beginning to think of FRP as being the 'killer application' for functional languages
06:32:45 <SyntaxPolice> why's that?
06:34:02 <Arnia> FRP provides a fantastic way to model the real world and some set of processes within it.
06:34:41 <SyntaxPolice> you should write my boss a letter about how I should have used FRP on my current project :)
06:34:46 <SyntaxPolice> then maybe I Can start over ;)
06:35:06 <Arnia> The real world isn't defined by discrete objects but by continuously varying processes that may or may not be smooth
06:36:01 <SyntaxPolice> Arnia: I'm working on the modeler, which simulates things over time: http://www.aetion.com/technology.html
06:39:11 <Arnia> Aha. Thats cool. I think FRP and Arrows should be made into part of the core of Haskell. FRP is to Haskell what MVC is to Smalltalk
06:42:10 * SyntaxPolice still wishes he understood arrows better.
06:43:41 <Arnia> An arrow can be thought to represent a process in a type world as far as I can gather
06:45:36 <SyntaxPolice> I see.
06:52:39 <Arnia> So given a type world that assigns all types a structure M, an arrow of a function f :: a -> b has type M a -> M b
06:52:44 <Arnia> (I think)
06:55:35 <shapr> Arnia: I agree with you, I think FRP and other Arrow based stuff is the killer app of FP
06:56:01 <shapr> imho, arrows are more intuitive than monads
06:57:09 <shapr> SyntaxPolice: hey, will you have demo binaries of your Haskell apps we can play with?
07:00:19 <Arnia> shapr: Wait till you see the kinds of things I have in mind (damn scientists for being unscrupulous)
07:00:25 <shapr> ?
07:01:48 <Arnia> Well, I get no academic recognition for my work until I have a doctorate. I won't have a doctorate for at least 4 years.
07:02:42 <SyntaxPolice> shapr: no, there probably won't be demo binaries, but I'm not sure of that.
07:03:13 <shapr> ok
07:05:16 <norpan> hi all!
07:05:20 <norpan> what's going on
07:05:30 <andersca> hi mr norbäck
07:05:41 <norpan> anderspanders
07:08:45 <shapr> hi norpan 
07:17:54 <SyntaxPolice> any comments on my State.hs documentation are welcome: http://www.syntaxpolice.org/~ijones/tmp/Control.Monad.State.html
07:18:08 <SyntaxPolice> (compare to http://www.haskell.org/ghc/docs/latest/html/base/Control.Monad.State.html)
07:32:21 <norpan> well, it certainly beats no documentation at all :)
07:37:15 <SyntaxPolice> you could tell that without looking :)
07:40:16 <norpan> are you documenting a lot of modules or is it just this one?
07:41:21 <SyntaxPolice> norpan: at least just starting w/ this one. I was toying w/ the idea of copying stuff from the Haskell Libraries report into the ghc haddock code.
07:42:50 <norpan> that's good
07:43:37 <norpan> the Control.Monad stuff needs some introduction to monad lifting as well i think
07:44:17 <SyntaxPolice> yeah. I'd agree with that.
07:44:53 <norpan> perhaps in the state module, because that's what's most often lifted i think
07:45:23 <norpan> or you can read the paper of course :)
07:45:40 <SyntaxPolice> hehe
07:46:04 <SyntaxPolice> that arrows paper I site has a good example of monad lifting using the Maybe monad that could go well in Control.MOnad documentation
07:47:20 <norpan> maybe so
07:47:25 <norpan> haven't read that
07:47:57 <norpan> actually, i have now that i think about it
07:51:20 <norpan> darn, now i will be stuck in citeseer again...i promised myself not to :)
07:52:11 <SyntaxPolice> norpan: any opinion on referring to the /a/ in "State s a" as a "return value"? I'm not sure how better to describe it.
07:52:45 <norpan> return value _type_ perhaps?
07:52:53 <norpan> or return type
07:54:42 <SyntaxPolice> thats a good point. but then call the /a/ in evalState the return value.
07:54:57 <norpan> well, yes, i call those return values
07:56:31 <norpan> but a is the name of the type still, but maybe you shouldn't care in documentation
07:56:47 <norpan> since you have no name for the actual value
07:57:09 <norpan> just call it return value, everyone will get it
08:34:53 <hdaume> morning folks
08:36:36 <jak_> hi hdaume
08:38:15 <shapr> hi hal
08:51:36 <shapr> bah, metal-grid hasn't registered his nickname
08:51:39 <shapr> so I can't send him a memo.
08:51:50 <shapr> I wanted to give him the url to http://www-fp.dcs.st-and.ac.uk/~kh/papers/pasco94/pasco94.html
08:52:37 <shapr> hey, I'm still looking for Haskell code to output JVM bytecode, does it exist?
08:59:59 <shapr> hm, neat thing for irc channel pasting: http://www.hellaweb.com:8888/
09:14:40 <shapr> is nfs the best way to mount directories between linux boxen?
09:15:31 <LoganH> I think the general consensus is no.
09:15:42 <shapr> LoganH: what's better?
09:15:53 <shapr> btw, hi LoganH, ltns.. how's life treating you?
09:16:12 <LoganH> But then again all I ever see is NFS in labs on campus.
09:16:21 <LoganH> I think AFS may be better, I'm not sure.
09:16:38 <hdaume> AFS is much better, IMO :)
09:16:41 <shapr> I want to r/w to a dir from both a mandrake and debian box
09:16:50 <LoganH> I don't know which is easier to setup.
09:16:58 <shapr> hdaume: is afs easy to setup on mandrake?
09:17:00 <LoganH> By all accounts NFS is slow and poorly designed.
09:17:12 <LoganH> shapr: And life's treating me better than it has been. :P
09:17:24 <shapr> LoganH: finished your irc quotes site?
09:17:33 <shapr> LoganH: ready for more Haskell? ;-)
09:17:45 <LoganH> There's a lot of work on that site I need to do, just haevn't gotten around to it.
09:17:54 <LoganH> It needs a lot more quotes.
09:17:58 <LoganH> Heh, maybe.
09:18:07 <LoganH> I might get paid to design a language this summer.
09:18:17 <shapr> neato
09:18:22 <shapr> what kind of language?
09:18:36 <shapr> going to implement it as a domain specific lang in Haskell? :-)
09:18:39 * shapr gets all subversive
09:19:28 * shapr waits for openafs to download
09:20:27 <LoganH> Some sort of computer telephony control language.
09:20:39 <LoganH> What's out there now is really crude and simple.
09:20:45 <shapr> hdaume: hey that retitle the home defense signs url has gone very far, to everyone I know
09:21:00 <LoganH> I was thinking a python module might be appropriate.
09:21:02 <shapr> LoganH: arrows! FRPhone!
09:21:09 <shapr> yampa!
09:21:29 <LoganH> FRPhone?
09:23:39 <liiwi> shapr: tried sfs?
09:23:53 <shapr> liiwi: no, is easy to setup on mandrake?
09:24:26 <liiwi> iirc there are readymade packages. see fs.net for more.
09:24:39 <LoganH> There are Debian packages.
09:25:11 <liiwi> maintained by guess who :P
09:25:16 <LoganH> Wow, strange things going on outside regarding air pressure.
09:25:36 <LoganH> Some fool named Jaako.
09:27:35 <liiwi> you're seventh person today who has managed to mistype my second name :)
09:28:07 <shapr> Jakko? ;-)
09:28:15 <shapr> eight!
09:28:28 <liiwi> zig!
09:28:35 <LoganH> Oops, Jaakko.
09:29:13 <shapr> otoh, I did it on purpose, so that may not count
09:29:21 * LoganH plays some bridge.
09:29:36 * shapr plays some highway
09:29:54 <shapr> I'll see your bridge and raise you a town hall.
09:30:26 * shapr goes back to XSLT, the toothpick of doom
09:30:39 <LoganH> I want to write a language that compiles to XSLT.
09:30:41 <liiwi> brctl br0 down
09:31:12 <shapr> LoganH: http://fxsl.sf.net/ is your friend
09:32:42 <LoganH> My partner just opened 3S with only 11 pts.  How strange.
09:33:08 <LoganH> shapr: All I want is a better syntax for XSLT than XML.
09:35:46 <shapr> StrategoLanguage
09:36:22 <shapr> if you want to do tree transformation, use a real tool ;-)
09:36:40 <LoganH> I want to do XSLT, I just don't want to maintain XML documents.
09:36:49 <LoganH> Because it's such a pain to do by hand.
09:37:53 <mgoetze> LoganH: XSLT is an XML document... ;)
09:42:02 <LoganH> mgoetze: That's what makes it such a pain in the ass to maintain.
09:44:11 * Marvin-- sighs
09:45:12 <mgoetze> hi Marvin-- 
09:47:12 * Marvin-- is still struggling with the damn compiler
09:59:36 <shapr> w00h00
09:59:48 <shapr> Marvin--: d00d, I want your jvm bytecode generating source!
10:00:04 <shapr> I want to write a Joy -> jvm bytecode compiler in Haskell.
10:03:16 <Marvin--> as long as you properly mangle my code so it's unusable to the next year's course students, no problemo
10:03:51 <Marvin--> This has taken more time than I expected because of silly things I simply didn't know
10:04:11 <Marvin--> like, the local variables for doubles aren't twice the size, they *use two consecutive local variables*
10:04:29 <LoganH> In the JVM?
10:04:29 <Marvin--> so if local variable 0 is a double, you can't use local variable 1 for anything, you have to use 2+
10:04:32 <Marvin--> yes, in the JVM
10:04:44 <LoganH> You should've read a good JVM reference. :P
10:05:14 <Marvin--> yes, but I couldn't afford *both* an expensive book on compiler construction *and* an expensive book on the JVM
10:05:44 <LoganH> Marvin--: I think there's a book on the JVM online.
10:06:09 <Marvin--> well we use Jasmin, so I've been to the bytecode reference page, but it says nothing about local variables, really
10:06:47 <LoganH> http://java.sun.com/docs/books/vmspec/
10:09:18 <Marvin--> urrgh, specification
10:09:39 <LoganH> A value of type long or type double occupies two consecutive local variables. Such a value may only be addressed using the lesser index. For example, a value of type double stored in the local variable array at index n actually occupies the local variables with indices n and n +1; however, the local variable at index n +1 cannot be loaded from. It can be stored into. However, doing so invalidates the contents of local variable n.
10:10:23 <LoganH> It's funny how non-innovative Java's really been. :P
10:11:00 <Marvin--> :)
10:12:31 <shapr> java ... the technology of twenty years ago, today!
10:13:08 <esap> java... a restricted subset of twenty-year old technology, today!
10:13:35 <LoganH> A language designed for inadequate programmers.
10:13:49 <LoganH> By inadequate programmers!
10:19:42 <Janni> hi, everybody
10:19:56 <mgoetze> nabend
10:20:47 <Janni> 'n' A'm'd. <- correct German
10:22:01 <mgoetze> sorry, ich hab leider pentiums ersteigert :(
10:22:15 <Janni> Ich vergebe dir, mein Sohn
10:22:16 <mgoetze> aber dafuer gleich zwei stueck auf einem board...
10:22:38 <Janni> *whisper* he's talking on the wrong channel, but he doesn't know ;)
10:23:00 <mgoetze> Janni: go ahead and join #freenode.de if you want :)
10:24:24 <Marvin--> iik, deutsch
10:24:53 <mgoetze> Marvin--: ick koenner keen svenske
10:25:25 <Marvin--> heh
10:25:29 <Janni> Marvin--: what is "iik"? an abbrevation or an exclamation?
10:25:37 <Marvin--> Janni: exclamation
10:26:05 * mgoetze wonders just how incorrect his last sentence was
10:26:55 <Marvin--> mgoetze: I don't even have a clue what you were trying to say!
10:27:41 <mgoetze> Marvin--: well, but you know "svenske", right? :)
10:28:37 <Marvin--> mgoetze: if you mean "svenska", then yes ;)
10:28:44 <mgoetze> ah, yeah, something like that
10:28:57 <mgoetze> well, i was trying to say that i can't speak it :)
10:31:22 <Marvin--> well I got THAT part ,)
10:31:46 <Marvin--> and "ick" is closer to the Dutch "ik"
10:31:50 <Marvin--> in Swedish, it's "jag" :)(
10:32:28 <Marvin--> "jag kan inte svenska" is the correct answer, thanks for playing!
10:38:50 <mgoetze> oh yeah, "jag"
10:39:03 <mgoetze> i've heard that before, but can't associate it with anything else
11:12:52 <shapr> wheee
11:14:17 <Marvin--> finally home
11:14:22 <Marvin--> now I just have to whip up some docs
11:15:50 <shapr> yay dox!
11:16:05 <shapr> from #javapro:
11:16:05 <shapr> <shapr> emacs crashed :-(
11:16:05 <shapr> <bit-poet> i'm not surprised.  shapr's emacs installation makes your typical oracle cluster look like a "hello, world".
11:16:09 * shapr cackles
11:16:42 <mgoetze> yeah, emacs is kinda like oracle
11:16:47 <mgoetze> vim is more like postgresql :)
11:22:41 <Marvin--> wtf
11:22:43 <Marvin--> wtf wtf wtf
11:23:23 <Marvin--> $ jasmin examples/good/recfac.j
11:23:24 <Marvin--> stty: invalid integer argument `'
11:23:24 <Marvin--> Try `stty --help' for more information.
11:24:13 * Marvin-- hopes it works better on another computer
11:25:54 <Marvin--> this is horrible
11:29:38 <shapr> ?
11:29:50 <shapr> what's going on?
11:31:25 <Marvin--> how do I, in my .cshrc, check whether the prompt variable is set or not?
11:31:55 <Marvin--> in my .cshrc, I exec bash since I hate csh but can't change the login shell, but that really really really breaks #!/bin/csh scripts
11:32:27 <shapr> can't you look at $PS1 ?
11:32:38 <Marvin--> I thought it was something like   if ( ${?prompt} ) ...
11:32:43 <Marvin--> no, it's called $prompt in csh
11:32:56 <Marvin--> and csh doesn't let you use undefined variables
11:32:59 <shapr> oh, suckage
11:33:24 <Marvin--> oh wait, it *was' ${?prompt}
11:33:31 <Marvin--> I'd forgotten to remove the 'echo $prompt' I had above it
11:33:36 <Marvin--> now it works *phew*
11:34:04 <Marvin--> $ ./javalettec examples/good/recfac.jl OK
11:34:04 <Marvin--> Generated: recfac.class
11:34:04 <Marvin--> $ echo 5 | java recfac
11:34:04 <Marvin--> 5! = 120
11:34:19 <Marvin--> er, the OK should be on its own line
11:38:13 <shapr> sounds like it's working, yay
11:38:25 <Marvin--> yup :-)
11:40:10 <Marvin--> can you think of a realistic C program that just uses ints, doubles, bools and strings (and no extremely fancy constructs) that I can implement and test?
11:41:49 <shapr> fac?
11:42:27 <Marvin--> I have implemented recursive faculty, and loop faculty
11:43:22 <mgoetze> Marvin--: is an array considered "extremely fancy"? :)
11:43:28 <mgoetze> Marvin--: you no doubt mean factorial
11:43:33 <shapr> yah, fac
11:43:39 <Marvin--> uh, yes
11:43:55 <Marvin--> mgoetze: yes, arrays are "extremely fancy"
11:44:54 <SyntaxPolice> Marvin--: a currency converter or a change making machine are time-honored litte programs. what do you mean by realistic?
11:46:17 <mgoetze> realistic means something a prof might demand of his students, perhaps? :)
11:50:03 <Marvin--> no, I just want to test several features of the compiler
11:52:24 <Marvin--> good god, sj.se sucks
11:54:11 <Marvin--> come on, seriously, how many poeple in Sweden can realistically try to book a train trip simultaneously, even if it's Thursday evening?
11:54:23 <Marvin--> the population isn't even 9 million, damn it
11:54:45 * shapr stops trying to book a train
11:54:46 <kawfee> what does that have to do with it?
11:54:47 <shapr> ;-)
11:55:15 <kawfee> can't people from outside of Sweden book a train?
11:55:33 <kawfee> runtime error
11:55:38 <shapr> walktime error
11:55:42 <shapr> I'm busy sitting on my butt.
11:55:55 <Marvin--> interesting
11:55:55 <kawfee> oh wait, that was a microsoft redirect
11:56:11 <Marvin--> the "PC seats" aren't more expensive than normal seats
11:56:25 <kawfee> how much does it snow in Sweden?
11:57:14 <Marvin--> right now? not at all :)
11:57:18 <Marvin--> well, not in Göteborg anyway ;)
11:57:41 <kawfee> I thought it snowed there a lot
11:57:58 <kawfee> a lot considering it snows in Texas about once every few years
11:58:06 <kawfee> and it isn't really snow, it's ice
11:58:59 <Marvin--> well, in northern Sweden, there's usually a lot of snow
11:59:11 <Marvin--> in southern Sweden, we usually get some snow in december and some in january-february
11:59:14 <Marvin--> this year's been pretty good
11:59:40 <jlouis> southern Sweden belongs to Denmark but of course ;)
11:59:52 <Marvin--> not THAT far south
11:59:58 <jlouis> hehe :)
12:00:00 <Marvin--> I'm not talking about Skåne
12:00:07 <Marvin--> ("Skaune")
12:00:08 <mgoetze> "what's the most exciting thing to see in malmoe?" "copenhagen!"
12:00:25 <jlouis> haha
12:01:01 <Marvin--> mgoetze: I can't say I know anything about Malmö, haven't been there more than once or twice, but I'm sure there are things to see htere too :)
12:01:34 <mgoetze> i thought it was a nice little town. quiet and peaceful. :)
12:01:40 * mgoetze isn't the sightseeing type anyway.
12:02:04 <Marvin--> me neither
12:02:23 <Marvin--> good god I hate SJ's page
12:02:35 <Marvin--> "couldn't connect to your bank"
12:02:50 <Marvin--> is there a "try again" button? noooo, there's an "abort" button and a "change payment method" button
12:04:02 <Marvin--> maybe I should just give up on buying in advance and go for buying a ticket when I get to the station instead
12:04:23 <mgoetze> Marvin--: off to visit the old folks at home? :)
12:07:22 <Marvin--> yup
12:07:28 <Marvin--> and my brother
12:15:48 * Marvin-- gives up
12:21:27 * jlouis hacks SMLnj to get it to work under OpenBSD
12:25:40 <shapr> Marvin--: where's home for you?
12:26:05 <Marvin--> shapr: hard to say, I guess Skövde will always be home, but Göteborg is home too
12:29:21 * Janni is going to eat (yay :)
12:36:42 <shapr> hoi dark
12:36:46 <shapr> hoe gaat?
12:44:34 <Marvin--> pindasaus
12:46:29 <shapr> ?
12:47:31 <Marvin--> never mind :)
12:47:55 <Marvin--> hmm, if x is -0x80000000, then -x is *also* -0x80000000 due to the nature of 2-complement, right?
12:48:29 <Marvin--> cute that  x == -x  iff x == 0 or x == "minint"
12:48:34 <mgoetze> Marvin--: i think so, yes, except that one of them is of course out of range...
12:48:41 <Marvin--> yes
12:48:55 <Marvin--> well, if you've got a signed 32-bit integer that ignores overflow
12:51:31 <buggs> jlouis, what's the problem ?
12:53:34 <dark> shapr, hello :)
12:54:23 <dark> Marvin: If you have a 32-bit integer that ignores overflow, then it's not clear whether it is signed or not :)
12:54:30 <Marvin--> dark: true
12:54:45 <Marvin--> Prelude> let x = -2147483648 :: Int
12:54:49 <Marvin--> Prelude> x == (-x)
12:54:49 <Marvin--> True
12:55:04 <dark> Haskell98 allows Int to be 30-bit, though.
12:55:14 <Marvin--> cute
12:55:59 <Marvin--> after working on this compiler, I've come to the conclusion that it's probably easier to write jasmin code instead of Java code
12:59:54 <Marvin--> interesting that the java interpreter *demanded* that I removed dead code
13:00:07 <Marvin--> at least the dead code after goto and return opcodes
13:01:41 <dark> Marvin: Yeah, checking for dead code is in the Java language spec.  A compiler isn't even allowed to be smarter than the algorithm in the spec.
13:01:56 <dark> Oh, wait, you're talking about bytecode?
13:02:33 <Marvin--> yes
13:06:31 <Marvin--> all the java.lang.VerifyErrors were amusing
13:08:27 <Marvin--> my favourite was probably "Falling off the end of the code"
13:08:54 <Marvin--> which, in English, means "This method doesn't have a return opcode"
13:23:05 * shapr grins
13:32:54 <shapr> hi Smerdyakov, wassup?
13:33:04 <Marvin--> http://fun.drno.de/pics/english/bart.gif
13:33:17 * shapr cackles happily
13:33:20 <shapr> Marvin--: AWESOME
13:33:29 <Smerdyakov> goggles
13:35:42 <Marvin--> http://fun.drno.de/pics/english/Cyber_Smoking.gif  heh, cute
13:50:42 <shapr> I get all my best humor links from #haskell
14:00:17 <shapr> http://fun.drno.de/pics/english/yes_its_a_woman.jpg
14:00:23 <shapr> ow
14:13:18 <shapr> hi jewel 
14:13:39 <jewel> howdy
14:13:44 <jewel> how ya all doin?
14:13:55 <jewel> lots of people here!
14:15:03 <dark> More or less here :)
14:15:42 <dark> I made the unwise move of subscribing to linux-kernel last week.  Now I'm reading mail all day.
14:17:09 <shapr> yow
14:17:13 <shapr> I'm not surprised
14:17:18 <shapr> I tried that once several years ago
14:17:27 <shapr> dark: do you use gnus and adaptive scoring?
14:17:55 <dark> shapr: No, mutt threading.
14:17:57 <shapr> oh
14:18:04 <shapr> haven't used mutt
14:18:08 <dark> I tend to skip threads where no-one I've heard of participates :)
14:18:38 <shapr> jewel: hey, me and bit-poet are talking about writing a Joy -> JVM bytecode compiler in Haskell
14:18:39 <dark> I'm trying to get an idea of how kernel work goes, before I start playing (in public) with phase-tree filesystems.
14:20:46 <opet> I think the highest volume list I'm on is freebsd cvs-all
14:21:05 <opet> but it doesn't take much to follow most it
14:22:29 * Neu[Mann] thanks the topic for answering all his questions :)
14:27:10 <dark> When I see the threads that focus on fixing spelling errors in the comments, I figure this must mean linux is pretty much done.  Then I see other threads about restructuring process scheduling, memory management, and the filesystem interface :)
14:30:41 <shapr> yow
14:31:05 * shapr look at the topic with wonder
14:31:20 <shapr> hm, is it really that cool?
14:38:24 * shapr boings
14:38:31 <creature> Can I just point out, doing it as a list is a nice touch.
14:40:40 <shapr> I don't know who did that...
14:40:55 <shapr> it is cool, I agree.
14:41:29 <creature> Well, "cool" implies I could use it as a nice anecdote sitting around in the pub. Which, depending on the company I'm in, probably won't happen. :)
14:42:08 <shapr> hi Pseudonym 
14:42:12 <Pseudonym> G'day.
14:42:27 <shapr> is there 'program by example' intefaces?
14:42:53 <shapr> I had the idea that I'd like something where I can give input and output, and see the source code that would make that happen
14:43:01 <shapr> specifically, I'm fighting XSLT right now
14:48:49 <buggs> print output
14:50:02 <jlouis> hmm, what is the easiest way to generate a SIGFPE?
14:50:04 <buggs> i guess you had to specify a lot of input, output pairs to get something more useful
14:50:11 <jlouis> Divide by zero just produces Inf
14:50:12 <jlouis> grr
14:52:31 <buggs> jlouis, isn't that the wrong direction anyways 
14:54:04 <jlouis> 0.0/0.0 should give NaN
14:54:25 <jlouis> and it does
14:54:26 <Pseudonym> Depending on the mode, it should either give NaN or throw an exception.
14:54:49 <Pseudonym> How do you set the mode, though?
14:55:50 <Marvin--> buggs: ah, information theory :) "what's the smallest program that produces output X?" :)
14:56:33 <jlouis> Pseudonym: exactly
14:56:42 <jlouis> I dont know how to set the mode
14:56:48 * Pseudonym nods
14:56:53 <Pseudonym> import IEEE754
14:56:56 <Pseudonym> :-)
14:57:04 <jlouis> well, this is C, hehe
14:57:20 <Pseudonym> What OS?
14:57:24 <jlouis> I think my kernel (OpenBSD) might have a bug there, since NetBSD had it
14:57:42 <jlouis> Porting compiler
14:57:44 <jlouis> hehe
14:58:54 <Pseudonym> Ah.
14:59:16 <jlouis> I need to be sure it is fixed if I should divert from what NetBSD does
14:59:46 <Pseudonym> Under FreeBSD there's ieeefp.h
15:00:16 <Pseudonym> With the functions fpgetmask() and fpsetmask().
15:00:55 <jlouis> ah, might help... thanks
15:01:41 <Pseudonym> In particular, you want FP_X_DZ.
15:01:43 <shapr> actually, there's some IEEE 754 stuff in Num somewhere..
15:01:59 <jlouis> heh, same on OpenBSD
15:02:02 <Pseudonym> Yes, but I think that's to deconstruct and reconstruct a float.
15:02:10 <Pseudonym> Not to set the FPU modes.
15:02:16 <jlouis> shapr: well, I have hugs. I think i'll port GHC and SMLNJ first though ;)
15:02:16 <shapr> that's true
15:02:35 <Pseudonym> An interval arithmetic library would be bloody useful.
15:04:09 <jlouis> sarah$ ./test
15:04:12 <jlouis> Floating point exception (core dumped)
15:04:21 <jlouis> nice, it does it like I expected it to :)
15:04:26 <Pseudonym> Kewl.
15:04:35 <jlouis> SIGFPE raised
15:04:37 <Pseudonym> Now try sqrt(-1f)
15:05:04 <buggs> hey Pseudonym care to join #mercury for a question ?
15:05:18 <Pseudonym> OK
15:08:15 <jlouis> hmm, now it is -lm for math library right (I need the symbol for the linker it seems)
15:13:02 <Pseudonym> Reason to smile: Every 7 minutes of every day, someone in an aerobics class pulls a hamstring.
15:13:40 <Marvin--> Pseudonym: heh
15:16:23 * shapr grins
15:16:59 <jlouis> haha
15:20:45 <Marvin--> Reason to smile: Every second of every day, some dumbfuck on IRC says something stupid
15:21:06 * Pseudonym nods and smiles
15:58:14 * shapr boings
16:16:26 <Janni> hell, I'm really high on music right now
16:17:58 <Pseudonym> Which music?
16:18:08 * Pseudonym wants to know whether to ridicule it or not
16:22:37 <Janni> Pseudonym: mainly Pearl Jam and affiliates (Brad, Mother Love Bone), Tortoise and some older classical stuff (Led Zeppelin, Pink Floyd)
16:22:51 <Pseudonym> OK, I can buy that.
16:23:20 <Pseudonym> Just making sure it wasn't late Fleetwood Mac or post-Gabriel Genesis.
16:23:58 <Janni> are these band names? (don't really know many bands)
16:24:07 <Pseudonym> Yes.
16:24:25 <Janni> what about those bands? just bad music? specific genre?
16:24:59 <Pseudonym> Kind of.  The examples I picked were decent bands that went downhill at one point.
16:25:28 <Pseudonym> In the case of Genesis, Peter Gabriel left, then Steve Hackett left, then they kept making albums on and off for 15 more years.
16:25:35 <Pseudonym> Despite the fact that they were crap.
16:25:57 <Pseudonym> For example.
16:26:11 <Pseudonym> Think Pink Floyd after Roger Waters left.
16:27:59 <Janni> if anybody has recommendations (according to my taste of music), I'm always happy to hear them
16:28:29 <Pseudonym> You might like Silverchair's latest album.
16:28:39 <Pseudonym> They're sounding less like a garage band and more like a prog band all the time.
16:29:31 <Janni> never heard of them. *checking on the web*
16:31:18 <Pseudonym> I know I'm not old when I still like new music.
16:32:44 <Janni> I like music from 300 years old to brand new, there's so much good stuff (i still have to get to know)
16:32:52 <Pseudonym> That's true.
16:34:16 <Janni> I always wonder how it comes that there can be so much new and doesn't (inevitably) repeat.
16:34:29 <Pseudonym> Well music does repeat, kind of.
16:34:39 <Pseudonym> If you step back and look at it abstractly.
16:35:00 <Janni> yeah, of course, but there is s.th. new, also
16:35:00 <Pseudonym> Right now, what's being repeated is the early 70s.
16:35:36 <Pseudonym> And some late 60s.
16:35:37 <Janni> Pseudonym: are you referring to mainstream?
16:35:42 <Pseudonym> Not just.
16:35:57 <Pseudonym> Modern techno, for example, is very reminiscent of 60s psychedelia.
16:36:05 <Pseudonym> I can hear late Beatles in the Chemical Brothers.
16:36:19 <Janni> ughhh. techno... can't bear it
16:36:25 * Pseudonym laughs
16:36:34 <Pseudonym> There is some good techno (IMO).
16:36:43 <Pseudonym> I quite like Enigma and Deep Forest, for example.
16:36:55 <Pseudonym> That could just be me, though.
16:37:00 <Janni> Pseudonym: there is good electronic music, but techno? didn't get to know some, yet
16:37:10 <Pseudonym> Well there's techno and techno.
16:37:20 <Pseudonym> Moby and Kraftwerk are very different.
16:37:27 <Janni> Pseudonym: ah, are you talking of techno or techno then?
16:37:35 <Pseudonym> I'm speaking of techno.
16:37:40 <Pseudonym> Hope this helps.
16:37:41 <Janni> ok.
16:38:17 <Janni> if you mean techno, I can agree. I like some stuff of Aphex Twin (and some stuff really _not)
16:38:34 * Pseudonym hasn't heard any Aphex Twin
16:38:40 <Janni> and Tortoise does really cool electronic stuff too
16:38:44 * Pseudonym nods
16:39:05 <Janni> Pseudonym: you know Tortoise? _are_ they known?
16:39:10 <Pseudonym> Nope.
16:39:16 <Pseudonym> I've heard of them, though.
16:39:31 <Pseudonym> Even techno repeats, of cours.4e
16:39:34 <Janni> Pseudonym: Aphex Twin does _very_ experimental stuff
16:39:40 <Pseudonym> I can hear Debussy in Tangerine Dream.
16:39:58 <Pseudonym> Not sure if Tangerine Dream counts as techno.  Ambient, perhaps.
16:40:16 <Janni> Pseudonym: if you mean techno, yes, it repeats all the time. if you mean techno, on the other and it reapeats too, but not as techno does
16:40:25 <Pseudonym> Yes, good point.
16:41:50 <Janni> Pseudonym: i could give you an Aphex Twin sample if you want (somehow I can't stop promoting my music, it's strange)
16:48:07 <Janni> RichiH: and think of the IP packets that have been brutally fragmented
16:48:41 <Janni> and quite a poor lifetime (< 300 ms)
16:52:14 <shapr> ?
16:53:40 <Janni> shapr: not generally, but is often right, isn't it? (I'm talking of TTL)
16:54:19 <shapr> I don't know
16:54:23 <Janni> ahhh, I'm wrong
16:54:46 <Janni> TTL is the number of routers a packet may pass, not the lifetime in msecs
16:59:34 <kawfee> Janni: you're thinking of hops
17:00:04 <kawfee> it's the number of hops that a packet may take, usually 30
17:02:27 <Janni> "The TCP/IP specification states that the TTL field for TCP packets should be set to 60, but many systems use smaller values (4.3BSD uses 30, 4.2BSD used 15)." <- from the BSD ping man page (at least one thing I can do without errors, quoting)
17:03:11 <Janni> "The TTL value of an IP packet represents the maximum number of IP routers that the packet can go through before being thrown away."
17:03:22 <Janni> yay (wtf am I doing?)
17:05:37 <shapr> writing a tcp/ip stack?
17:11:42 <Janni> i'm gonna sleep a little earlier tonight. I have to adjust my sleep/awake-rythm to reasonable times. vacances are ending soon...
17:12:48 <Janni> is there a nice english expression for the german "Tagesrythmus" (verbally translated "rythm of the day")
17:12:52 <Janni> +?
17:15:00 <dark> "daily routine" perhaps?
17:16:48 <Janni> not bad, but it doesn't contain enough weight on sleeping/awaking...
17:16:56 <Janni> s/contain/put
17:17:20 <shapr> I just say "out of phase"
17:17:27 <shapr> but that's a computer geek kind of thing to say
17:18:27 <kawfee> circadian rhythm?
17:18:37 <kawfee> or maybe it's ultradian
17:19:42 <Janni> the eternal cycle of life
17:20:31 <buggs> nite
17:20:48 <shapr> g'nite buggs 
17:20:53 <Janni> no pun everything together: My eternal circadian rythm of daily life is out of phase
17:20:58 <Pseudonym> Night.
17:21:11 <Pseudonym> I know one very famous geek who lives a six-day week.
17:21:15 <Janni> buggs: close the circle and find yourself
17:21:31 <Pseudonym> The conventional seven-day week is split into six equal parts.
17:22:52 <Janni> Pseudonym: cool. I've always kept the plan to slow down the rotation of the earth to extend the day to 30 hours. 24 are just too short. i want to sleep longer than I do and I want to stay up longer
17:23:13 <dark> Janni: It's happening already, just wait a few million years.
17:23:29 <Janni> but first I have to achieve world domination. first things first...
17:23:42 <Janni> dark: how comes that?
17:25:38 <dark> Janni: The tidal force from the moon causes some friction that gradually slows down the earth's rotation.  At the same time, it slows down the moon's orbit so that the moon moves further away.
17:27:09 <Janni> is it because of the deformation of the earth because of tidal forces?
17:27:25 <Janni> I can't imagine how the mood could cause friction otherwise.
17:27:31 <dark> Yes, I think so.
17:27:50 <Janni> ok, gonna think about it...
17:27:52 <dark> Deformation of the moon, too :)
17:28:29 <dark> So if you want a longer day in a hurry, you could speed up this process by embedding a titanium support structure in the earth's crust.
17:30:25 <Janni> dark: nope, since I will have achieved world domination till then, I won't need the people anymore. so i can slow down the earth by letting drop meteroids on the earth in the correct angle (and by the way destroying mankind)
17:30:44 <Janni> +thereby
17:31:52 <dark> Janni: What's the point of world dominations if you have no people on which to impose your every whim?
17:32:32 <Janni> dark: errr... err.. I... uhh.... shut you mouth, little worm!
17:34:46 <Janni> this is leading nowhere. I'm now going to speed up the rotation of my daily cycle. night
17:35:02 <dark> The problem with world domination is that it's a shitty job if you actually care about the people.  So most of the candidates for it don't.
17:35:23 <Janni> dark: you know "Pinky and Brain" :)
17:35:35 <dark> Yeah I've seen a few episodes.
17:36:03 <Janni> Saw one or two, also. The idea of... i don't know.. just world domination is cool :)
17:36:17 <dark> I'm confused, though.  Their idea of world domination doesn't seem to involve nudity at any stage.  What's the point?
17:37:33 <Janni> maybe at the final stage (which has never been achieved, so we can't know)
20:15:21 <Pseudonym> Question.  "Programmers are bad at finding where performance problems lie."
20:15:29 <Pseudonym> This is an oft-quoted maxim.
20:15:39 <Pseudonym> The corollary being "use a profiler".
20:15:47 <Pseudonym> Has anyone ever tested this?
20:45:07 <danols> anyone alive ?
20:45:20 <Pseudonym> Probably someone is.
20:45:25 <danols> i can't wrap my head arround this, and it's due tomorrow
20:45:26 <Pseudonym> Not necessarily on this channel, though.
20:45:28 <danols> it hurts my head
20:46:03 <danols> so i'm basically here for newbie help
20:46:11 <danols> i think i just lack the syntax
20:46:26 <Pseudonym> Go for it.  The worst that can happen is nobody will answer.
20:48:40 <danols> ok wheew lets go over what I think i got it's really 5-10 line code that needs to be made and that's all diff functions
20:49:12 <danols> here is an example of what ought to be 
20:49:13 <danols> marklist :: [Studrec]
20:49:13 <danols>     marklist  = [Stud "Doe Jane" 1234567 [4,4,3,34],
20:49:13 <danols>                 Stud "Deere Jim" 2345678 [2,3,2,25],
20:49:13 <danols>                 ...]
20:49:22 <danols> type Name = [Char]
20:49:22 <danols> type Snumber = Int
20:49:22 <danols> type Marks = [Int]
20:49:22 <danols> type Stud = (Name,Snumber,Marks)
20:49:22 <danols> data Studrec = Stud Name Snumber Marks
20:49:29 <danols> is this right ?
20:49:59 * danols is really neede help, and propably a case of beer
20:50:30 <Pseudonym> Ah, student or personnel records.  The example of last resort.
20:50:42 <danols> ?
20:50:46 <danols> it's for a class
20:50:51 <Pseudonym> I know.
20:51:02 <Pseudonym> Whenever anyone needs a sample "thing", it's student or personnel records.
20:51:02 <danols> ok 
20:51:17 <danols> i see
20:51:23 <Pseudonym> Is this right?  I don't know.  It's consistent, anyway.
20:51:25 <danols> like an example code ?
20:51:28 <danols> yes
20:51:32 <Pseudonym> Not having read your spec.
20:51:43 <Pseudonym> Can I ask why Stud and Studrec are doubled up?
20:51:49 <danols> in a way i have to really just instance of Eq, Ord , Show
20:51:50 <Pseudonym> They appear to record the same information.
20:51:57 <danols> hmmm
20:52:04 <danols> maybe i miss understood it
20:52:07 <danols> hold on
20:52:11 <danols> http://www.cs.queensu.ca/home/cisc260/asg.3.html
20:52:14 <danols> part b
20:52:23 <Pseudonym> Sorry, don't have time to read that.
20:52:29 <danols> ok hmm
20:52:36 <Pseudonym> Can you explain what you're having trouble with?
20:52:38 <danols> so Stud shouldn't be in there
20:52:50 <Pseudonym> Is it an error?  Or code isn't returning the right value?
20:52:52 <danols> well grasping my head arround i can't seem to get to the Name for example
20:53:04 <danols> so maybe the Stud shouldn't be doubled up?
20:53:17 <danols> yeah
20:53:19 <Pseudonym> I don't think it should no.
20:53:21 <danols> Stud is a constructor
20:53:25 * Pseudonym nods
20:53:27 <danols> on so i'm doubling up on it
20:53:28 <danols> hmmm
20:53:56 <danols> marklist == [Stud <blah] calls the function Stud and puts in into [Studrec] ?
20:54:06 <danols> the result of the function ?
20:54:23 <Pseudonym> Uh... reading between the lines, I think you get the idea, yes.
20:54:32 <shapr> Pseudonym: people who use profilers test it every day ;-)
20:54:34 <Pseudonym> Stud is a function which constructs a Studrec object.
20:54:37 <danols> ok hmmm wow you don't understand how much that clarifies the code
20:54:41 <Pseudonym> shapr: That's not quite what I mean.
20:54:41 <danols> hmmm
20:54:47 * shapr grins
20:55:06 <Pseudonym> I phrased the question better here: http://c2.com/cgi/wiki?ThirdRuleOfOptimization
20:55:12 <shapr> oboy, wiki!
20:55:38 <shapr> I put in some fun stuff earlier
20:56:15 * Pseudonym checks out RecentChanges
20:57:36 <danols> can I access objects in touples the same way as in lists ? i.e. getName (x:xs) for example ? doing the normal pattern matching ?
20:58:39 <shapr> Pseudonym: ParadigmPissingMatch has entertained me regularly :-)
20:58:57 <shapr> people want to piss about whether it's a pissing match or not.. too funny
20:59:08 * Pseudonym thinks so too
20:59:17 <Pseudonym> danols: Sure.
20:59:25 <Pseudonym> getName (Stud name _ _) = name
20:59:43 <danols> Pseudonym hmmm now back to square one, looks like I have to fix Stud constructor so it is parametric
20:59:50 <danols> type Stud = (Name,Snumber,Marks)
21:00:19 <Pseudonym> What do you need to parameterise on?
21:00:29 <Pseudonym> And are you allowed to change the definition of Studrec instead?
21:00:37 <shapr> do you mean "has anyone ever tested whether programmers as a general rule are bad at profiling" ?
21:00:56 <Pseudonym> Right.
21:01:03 <shapr> good question
21:01:10 <danols> data Studrec = Stud ?
21:01:10 <Pseudonym> I don't believe they have.
21:01:15 <shapr> I bet it's more exciting to do profiling in lazily evaluated languages
21:01:19 <danols> hmm hold on
21:01:23 <danols> Studrec = [Stud] ?
21:01:24 <Pseudonym> danols: Yes and no.  They are the same abstract thing.
21:01:29 <Pseudonym> They're just expressed differently.
21:01:45 <danols> this is so recursive , takes time to shift paradigmes damn it
21:02:04 <Pseudonym> shapr, I've always thought it was odd that we've never had a rocket as powerful as the Saturn V.
21:02:42 <shapr> I stood in the jets of a Saturn V once
21:02:59 <shapr> they have one in Huntsville Alabama
21:03:03 <Pseudonym> I assume it wasn't firing at the time.
21:03:14 <shapr> I'm still here ;-)
21:03:25 <Pseudonym> That's why I figured it was a safe assumption.
21:03:43 <shapr> when you come out of the space center you see this massive rocket, and you thing "that's ENORMOUS"
21:04:01 <shapr> then you walk around the corner and realize you're only looking at the smallest stage of three
21:04:26 <shapr> the biggest stage is like a large building or something
21:04:27 <Pseudonym> danols, what do you have to parameterise on?
21:04:37 <Pseudonym> Wow.
21:06:45 <danols> Pseudonym i'm at sqare one I have to make a proper Studrec data type
21:06:50 <danols> is this ok ?
21:06:54 <danols> type Name = [Char]
21:06:54 <danols> type Snumber = Int
21:06:54 <danols> type Marks = [Int]
21:06:54 <danols> type Stud = (Name,Snumber,Marks)
21:06:54 <danols> data Studrec = [Stud]
21:07:13 <danols> cause it throws a wierd error
21:07:34 <danols> unexpected } possibly due to bad layout
21:07:35 <Pseudonym> It's not okay, no.
21:07:46 <danols> where is the flaw in my logic
21:07:49 <Pseudonym> What is Studrec for?  A single record?
21:07:58 <Pseudonym> The flaw in the syntax is this line:
21:08:00 <danols> many student records
21:08:04 <Pseudonym> data Studrec = [Stud]
21:08:14 <Pseudonym> It says "data" but it looks like a type synonym.
21:08:14 <danols> which are of Stud
21:08:25 <danols> hmmm
21:09:58 <danols> data hmmm type Stud = [(Name,Snumber,Marks)]
21:09:58 <danols> data Studrec = [Stud]
21:10:04 <danols> oops I mean 
21:10:15 <danols> type Stud = [(Name,Snumber,Marks)]
21:10:15 <danols> data Studrec = Stud
21:10:51 <danols> acctually no
21:10:53 <danols> brb
21:12:05 <danols> i really appoligize if this is seriously anoying...
21:12:18 <Pseudonym> That's OK.  This is mostly syntax stuff.
21:12:19 <shapr> Pseudonym: the Saturn V is only 111 m tall ... it sure felt a lot larger when I was standing next to it.
21:12:21 <shapr> http://www.hrw.com/science/si-science/earth/spacetravel/spacerace/SpaceRace/sec300/img/382l1p1d.jpg
21:12:21 <danols> this is what i have now but 
21:12:22 <danols> type Name = [Char]
21:12:22 <danols> type Snumber = Int
21:12:22 <danols> type Marks = [Int]
21:12:22 <danols> type Stud = (Name,Snumber,Marks)
21:12:22 <danols> data Studrec = Stud
21:12:26 <danols> now I get an error here
21:12:33 <danols> marklist :: 	[Studrec]
21:12:33 <danols> marklist = 	[Stud "Doe Jane" 1234567 [4,4,3,34],
21:12:33 <danols> 		Stud "Deere Jim" 2345678 [2,3,2,25]]
21:12:33 <Pseudonym> Yes, you would.
21:12:41 <danols> ahhh Pseudonym ?
21:12:51 <Pseudonym> Well, Studrec used to define the constructor Stud.
21:13:08 <Pseudonym> Which took three arguments (a Name, a Snumber and a Marks).
21:13:11 <Pseudonym> Now it takes none.
21:13:19 <danols> hmmm 
21:13:23 <Pseudonym> Want some advice?
21:13:25 <danols> so I need to give Stud parameters ?
21:13:27 <danols> yes PLEASE
21:13:35 <Pseudonym> Put the old Studrec back and delete Stud.
21:13:42 <shapr> ParadigmPissingMatch has gone downhill quickly in the last few minutes ;-)
21:13:44 <Pseudonym> If you need a list of them, use [Studrec].
21:13:52 <Pseudonym> Yes, I pushed it quite a bit.
21:13:59 * shapr laughs
21:14:04 <danols> but part of the requirements is the marklist = 	[Stud "Doe Jane" 1234567 [4,4,3,34],
21:14:07 * Pseudonym considers having an argument with humself
21:14:26 <Pseudonym> Yes, so?
21:14:35 <shapr> ok, now I'm really going to sleep...
21:14:40 <Pseudonym> That's why you need the old definition of Studrec there.
21:14:51 <Pseudonym> So that Stud takes the right number and types of arguments.
21:14:52 <Pseudonym> Night shapr.
21:15:09 <shapr> g'night, thanks for the wiki entertainment :-)
21:15:19 <Pseudonym> No problem.
21:15:35 <danols> Pseudonym i'm lost man
21:16:04 <Pseudonym> If you need marklist to look like it does now, put the original Studrec back in and drop Stud.
21:16:26 <Pseudonym> If you need a list of student records, use [Studrec]
21:16:34 <Pseudonym> It's going to confuse you less in the long run.
21:16:56 <danols> type Stud = (Name,Snumber,Marks)
21:16:56 <danols> data Studrec = Name Snumber Marks
21:17:40 <Pseudonym> No.
21:17:53 <danols> ok ?
21:18:00 <Pseudonym> data Studrec = Stud Name Snumber Marks
21:18:08 <Pseudonym> Drop the "type Stud" line.
21:18:14 <danols> ok...
21:18:40 <danols> what does that mean in plain english ?
21:18:42 <Pseudonym> OK.
21:18:55 <danols> that Studrec contains touples of (Stud, Name Snumber Marks) ?
21:19:00 <Pseudonym> COnsider the line: data Studrec = Name Snumber Marks
21:19:02 <danols> with the commans
21:19:04 <danols> ok
21:19:04 <Pseudonym> That defines a new function.
21:19:06 <Pseudonym> Sorry.
21:19:06 <Pseudonym> The line should read: data Studrec = Stud Name Snumber Marks
21:19:12 <Pseudonym> The function it defines is:
21:19:13 <Pseudonym> Stud :: Name -> Snumber -> Marks -> Studrec
21:19:15 <danols> ok
21:19:16 <Pseudonym> The first thing after the = sign is the name of the function.
21:19:18 <Pseudonym> It takes three arguments and returns something of type Studrec.
21:19:23 <danols> ok
21:19:25 <Pseudonym> That's on the left hand side.
21:19:28 <Pseudonym> With me?
21:19:35 <danols> now this kind of triggers what i've been reading yeah i'm with you
21:19:39 <Pseudonym> Right.
21:19:51 <Pseudonym> So when you type: Stud "Doe Jane" 1234567 [4,4,3,34]
21:20:02 <Pseudonym> WHat you're doing is applying three arguments to the Stud function.
21:20:07 <Pseudonym> And thus constructing a Studrec.
21:20:10 <danols> curring
21:20:29 <danols> ok so on left side that's data constructor ? on right type constructor ?
21:20:30 <Pseudonym> Understand?
21:20:51 <Pseudonym> Erm...
21:20:58 <Pseudonym> type constructor, data constructor, same thing.
21:21:01 <Pseudonym> I'm pretty sure.
21:21:07 <danols> ok hmm
21:21:07 <Pseudonym> On the left hand side is the name of a type.
21:21:23 <danols> on the right are the 'atoms' ?
21:21:24 <Pseudonym> The new function is called a constructor.
21:21:34 <Pseudonym> Because it constructs an object of the new type.
21:22:10 <Pseudonym> I don't know how your lecturer/book/whatever is using the term "atoms" here.
21:22:22 <Pseudonym> It's not atomic. You can break it apart.
21:22:30 <danols> i see sorry, i rather get a better understanding than some superficial
21:22:36 <danols> good point
21:22:37 <Pseudonym> Sure.
21:22:52 <Pseudonym> You can consider a type like this as creating atoms:
21:22:56 <Pseudonym> data Bool = False | True
21:23:13 <Pseudonym> It makes two constructors (which take _no_ arguments) which are indivisible.
21:23:14 <danols> but it's funny Stud was never really decleared that's what confuses me now
21:23:31 <Pseudonym> Right.  The "data" declaration declares the Stud function.
21:23:41 <Smerdyakov> I am your Stud function.
21:23:48 <danols> lol
21:24:00 * Pseudonym laugs
21:24:10 <danols> all your studs are belong to us
21:24:25 <Pseudonym> In SOVIET RUSSIA, Stud functions declare YOU!
21:24:46 <Pseudonym> 1. Declare Stud function.  2. ???  3. Profit!
21:24:58 <Pseudonym> Damn, it must be 4:30 on Friday afternoon.
21:25:00 <danols> hmmm how long u used Haskell ?
21:25:09 <Pseudonym> Er... let's see...
21:25:10 <Smerdyakov> No man
21:25:13 <Smerdyakov> It's 12:25 AM
21:25:18 <Smerdyakov> Welcome to SATURDAY
21:25:22 <danols> yeah Smerdyakov
21:25:35 <Pseudonym> I used Gofer around 1993.
21:25:41 <Pseudonym> That's kinda like Haskell.
21:25:52 <Pseudonym> Used Orwell and Miranda before that, around 1992.
21:26:03 <Smerdyakov> Orwell! Why that name for a PL?
21:26:10 <danols> Pseudonym haskell I can see it's power but it's another paridigm shif like I had with java (object)
21:26:18 <Pseudonym> Oh, that's a subtle reference.
21:26:49 <danols> Pseudonym ok now I want to define a Show function , that's that with instance Show Studrec where how should I understand that in plain english ?
21:26:51 <Pseudonym> Miranda was the character in "The Tempest" who uttered the phrase "brave new world".  Hence, Orwell.
21:27:14 <Smerdyakov> Pseudonym, because of the usual sick and ill-considered comparison between BNW and 1984?
21:27:36 <Pseudonym> Actually, I like your explanation better, even though mine is historically correct.
21:27:41 <Pseudonym> danols: Sorry, I digress.
21:27:53 <Pseudonym> What do you want the show function to actually show?
21:27:54 <danols> it's ok, trying again get a deeper meaning 
21:28:09 <danols> hmmm so quick qustion to clarify things
21:28:13 <Pseudonym> OK.
21:28:15 <Smerdyakov> Pseudonym, your explanation didn't tell me what "Orwell" has to do with it....
21:28:25 <Pseudonym> Orwell wrote "Brave New World".
21:28:30 <Smerdyakov> No
21:28:34 <Smerdyakov> Aldous Huxley did.
21:28:46 <Pseudonym> Damn, you're right.
21:28:50 <danols> is it a [Studrec] or Stud just is only used when creating Studrec, so it's not a [Stud]
21:28:51 <Smerdyakov> George Orwell was a hip socialist who wouldn't write such trash =)
21:28:52 <Pseudonym> Hmmm.
21:29:23 <Pseudonym> Stud is a function.  Studrec is a type.
21:29:38 <Smerdyakov> And, baby, I'm just your type of Stud.
21:29:43 <danols> haha
21:30:35 <danols> Studrec is a type of Stud Name Snumber Marks or Name Snumber Marks ?
21:31:45 <Pseudonym> If you apply the Stud function to three arguments of appropriate types, you get a Studrec.
21:32:01 <Pseudonym> Effectively, it's a tuple type.
21:32:11 <danols> ok ok
21:32:24 <Pseudonym> In fact, (a,b,c) is actually shorthand for (,,) a b c
21:32:36 <Pseudonym> Where (,,) is a constructor function.
21:32:36 <Pseudonym> data (,,) a b c = (,,) a b c
21:32:49 <danols> which takes 3 parameters
21:32:54 <danols> and makes a touple ?
21:32:57 <Pseudonym> Yes.
21:33:10 <danols> so a -> b -> c -> (,,) ?
21:33:11 <Pseudonym> Compare that with:
21:33:17 <Pseudonym> Not quite.
21:34:23 <Pseudonym> (,,) :: a -> b -> c -> (,,) a b c
21:35:07 <danols> or (a,b,c) ?
21:35:15 <Pseudonym> Or, alternatively:
21:35:15 <Pseudonym> (,,) :: a -> b -> c -> (a,b,c)
21:35:15 <Pseudonym> So I guess Phil Wadler was wrong.
21:35:15 <Pseudonym> Orwell was misnamed.
21:35:21 <Pseudonym> (a,b,c) is shorthand for (,,) a b c
21:35:44 <danols> ok i have this for my show fucntion
21:35:50 <danols> instance Show Studrec where
21:35:50 <danols> 	showStudent :: [Studrec] -> Name -> Snumber -> Marks -> String
21:35:50 <danols> 	showStudent (n:s:m) = 
21:36:20 <Pseudonym> Question.
21:36:23 <danols> yes ?
21:36:31 <Pseudonym> You type showStudent markslist
21:36:35 <Pseudonym> What output do you want?
21:36:43 <danols> to screen
21:36:45 <danols> tabulated ?
21:36:54 <Pseudonym> What should it look like?
21:37:19 <danols> oops well it should be Snumber     Marks      
21:38:01 <danols> so [Studrec] -> (Snumber -> Marks) -> String ?
21:38:06 <Pseudonym> Er...
21:38:14 <Pseudonym> I think you're confusing yourself here.
21:38:21 <Pseudonym> How many arguments should showStudent take?
21:38:22 <danols> i think i've been since morning
21:39:01 <danols> just Studrec
21:39:26 <Pseudonym> Just a single Studrec?
21:39:26 <danols> so so Studrec -> String ?
21:39:32 <Pseudonym> That sounds better.
21:39:38 <danols> yes at least i think so :)
21:39:48 <Pseudonym> It really helps to write the type declaration first.
21:40:10 <danols> could I just use show ?
21:40:16 <danols> instead of showStudent ?
21:40:42 <Pseudonym> If you type: show (Stud "foo" 3 [4,5]) you'll get the string "Stud \"foo\" 3 [4,5]"
21:41:07 <danols> i see so I rather add my own showStudent
21:41:19 <Pseudonym> If you want something different, yes.
21:41:28 <danols> ok
21:41:44 <danols> you said I need to declare it first outside of instance Show Studrec ?
21:41:58 <Pseudonym> I suggest not using the Show class.
21:42:19 <danols> hmmm they are asking to make Studrec instance of Eq, Ord, Show
21:42:46 <Pseudonym> DO you know about showsPrec?
21:42:59 <Pseudonym> Have you seen that function name before?
21:43:04 <danols> i seen the name, 
21:43:05 <danols> yes
21:43:17 <Pseudonym> In class?
21:43:20 <danols> book
21:43:23 <Pseudonym> OK.
21:43:27 <Pseudonym> Then just use "deriving".
21:43:50 <Pseudonym> data Studrec = Stud {- stuff -} deriving (Eq, Ord, Show)
21:43:57 <danols> explain dervie vs instence ?
21:44:19 <Pseudonym> Some type classes have sensible defaults.
21:44:24 <Pseudonym> Eq is one of them.
21:44:37 <Pseudonym> It's like declaring an instance:
21:44:57 <Pseudonym>   (Stud a b c) == (Stud a' b' c') = a == a' && b == b' && c == c'
21:45:07 <Pseudonym> Termwise equality.
21:45:19 <Pseudonym> Sometimes you want something more sophisticated than that.
21:45:27 <Pseudonym> In this case, I don't think you do.
21:46:58 <danols> the eq class must compare according to Name and student number only so I think i need instance
21:47:15 <Pseudonym> Oh, OK.
21:47:23 <Pseudonym> Same with Ord, I assume.
21:47:29 <danols> yes
21:47:39 <danols> i read about those things so i have a general idea
21:48:09 <danols> so i have to overload show ?
21:50:02 <Pseudonym> I guess if you're using nonstandard Eqs and Ords, using nonstandard Shows makes sense too.
21:50:29 <danols> yes so how would i start i have this so far
21:50:33 <danols> instance Show Studrec where
21:50:34 <danols> --	show :: Studrec -> String
21:50:34 <danols> 	show x = 
21:51:50 <Pseudonym> Yes, you can do that.
21:52:37 <danols> now I need to grab Snumber and Marks
21:52:44 <danols> show (x:x) etc don't work
21:53:02 <danols> should I make a helper function ?
21:55:25 <Pseudonym> You can grab them this way:
21:55:27 <Pseudonym> show (Stud name number marks) = ...
21:55:33 <Pseudonym> Pattern matching.
21:56:08 <danols> gosh why (x:y:z) wouldn't work ?
21:56:18 <Pseudonym> : is a list constructor
21:56:31 <Pseudonym> Studrec isn't a list.
21:56:36 <danols> but is alos a patern matcher
21:56:38 <danols> hmm
21:58:12 <danols> what's the diff between => and -> ?
21:58:22 <Pseudonym> LONG story.
21:58:40 <Pseudonym> Basically, type class constraints go before the => and types go before the ->
21:58:48 <danols> why is it Stud name number marks not (Studrec)
21:58:49 <danols> k
21:58:55 <danols> Studrec
21:59:12 <Pseudonym> When you get deep into the theory, it turns out that => is a kind of function type, but we won't go into that.
21:59:26 <Pseudonym> Because Studrec is a type name.
21:59:33 <Pseudonym> You want to pull stuff out of the constructor.
22:00:02 <Pseudonym> What this actually does is binds the variables name, number and marks with actual values.
22:00:07 <Pseudonym> Try this, for example:
22:00:12 <danols> i did it worked
22:00:16 <danols> but i'm fuzzy
22:00:18 <Pseudonym> show (Studrec name number marks) = name
22:00:28 <Pseudonym> It's actually bound the variable "name".
22:01:01 <danols> so what does [Studrec] store then ? a list od Stud constructors ?
22:03:53 <Pseudonym> No, not a list.
22:03:55 <danols> never mind that how do I convert an interger to string i'm looking for some function but there seem to be a matching one
22:03:58 <Pseudonym> Oh, hang on.
22:04:03 <danols> Pseudonym ok
22:04:06 <Pseudonym> Well, there's "show".
22:04:19 <Pseudonym> Int and Integer are both instances of "show".
22:04:43 <danols> ahhh yes she does work
22:04:49 <danols> hold on
22:05:01 <danols> back to my original question can you try to clarify it for me ?
22:05:12 <danols> and why do we try to catch Stud name etc etc
22:05:15 <danols> with show
22:05:17 <Pseudonym> [Studrec] holds a list of Studrec.  Each Studrec basically is made of Stud constructors with arguments attached, yes.
22:05:23 <Pseudonym> Sorry, "catch"?
22:05:27 <danols> not just Studrec
22:05:32 <danols> show Stud etc etc
22:06:02 <danols> Studrec = Stud Name Number Marks ?
22:06:17 <danols> it's a type of Stud Name Number Marks ?
22:06:32 <Pseudonym> You've lost me.
22:06:38 <danols> i loose me lol 
22:06:48 <danols> Studrec is basically made of Stud constructors ?
22:06:53 <Pseudonym> Kind of.
22:07:00 <danols> so Studrec is a type of Stud Name Number Marks ?
22:07:03 <Pseudonym> Your terminology is off, but I get what you mean.
22:07:25 <Pseudonym> Studrec is actually an abstract "thing".
22:07:33 <Pseudonym> Which you happen to be able to pattern match on.
22:07:45 <danols> ok, 
22:08:08 <danols> what's the adventage of complicating / using Stud Name Number Marks over (name,number,marks) ?
22:08:29 <Pseudonym> Well, for a start, your error messages are more concise.
22:08:47 <Pseudonym> When you make a type error (that's "when", not "if") you get to see meaningful names in it like Studrec.
22:08:58 <Pseudonym> As opposed to ([Char],Int,[Int]) which could mean anything.
22:09:11 <danols> do we need Stud ?
22:09:23 <danols> could we also have simplified it Studrec = Name Number Marks ?
22:09:24 <Pseudonym> Stud is the name of the constructor function.
22:09:31 <Pseudonym> Er... no.
22:09:37 <Pseudonym> Haskell syntax doesn't work that way.
22:09:45 <Pseudonym> You need a constructor function name.
22:09:58 <danols> hmmm
22:10:24 <Pseudonym> Haskell is a functional language.  You need functions.
22:10:24 <danols> ok
22:10:27 <danols> that kind is of like java
22:10:34 <Pseudonym> Sort of, yes.
22:10:39 <Pseudonym> Java doesn't have type synonyms.
22:10:49 <Pseudonym> There's a certain cleanliness to that.
22:10:51 <Pseudonym> Types are what they are.
22:10:56 <Pseudonym> They're not other things in disguise.
22:11:08 <Pseudonym> Occasionally that gets in the way.
22:11:32 <danols> so we construced Studrec using a Stud constructors that takes Name Number Marks or [Char] Int [Int] ?
22:11:39 <danols> and it's not a list or touple
22:11:42 <Pseudonym> Right.
22:11:49 <danols> it's an abstract thing that holds all of those subunits
22:11:54 <Pseudonym> It's kind of the same thing as a tuple.
22:11:59 <Pseudonym> As in, it does the same job.
22:12:15 <danols> hmm but not matchable with : that works for touples and lists
22:12:34 <danols> and it's better this way cause it makes it cleaner ?
22:12:39 <Pseudonym> : doesn't work for tuples
22:12:41 <Pseudonym> Only lists.
22:12:47 <Pseudonym> Yes, it makes things cleaner.
22:12:47 <danols> i see
22:12:48 <Pseudonym> Sometimes.
22:12:52 <danols> what works for touples ?
22:13:07 <Pseudonym> foo :: (Int,String) -> String
22:13:09 <Pseudonym> foo (a,b) = b
22:13:23 <danols> ohhh yeah, shit my mind must be shoot
22:13:26 <Pseudonym> What is cleaner depends on the context.
22:13:40 <danols> hold on
22:13:42 <Pseudonym> You're in the realm of judgement calls there.
22:13:56 <danols> Stud Name Number Marks is a curry function ? kind of ?
22:14:08 <danols> curring
22:14:10 <Pseudonym> Yeah, I guess.
22:14:22 <danols> hmmm i think i kind of understood that concept today
22:14:26 * Pseudonym nods
22:14:39 <danols> ok brb
22:14:41 <Pseudonym> In reality, there's no distinction in Haskell between "curry functions" and any other kind of function.
22:14:59 <Pseudonym> An "uncurried function" is just a function which takes a tuple.
22:15:04 <danols> i.e. div 3 2 is = 3 `div 2
22:15:16 <danols> that is div 3 creates a function that divdes something by 3 ?
22:15:31 <Pseudonym> Yes.
22:15:34 <Pseudonym> Actually (div 3)
22:15:39 <Pseudonym> Sorry, (`div` 3)
22:15:46 <danols> ok
22:15:52 <danols> cool i think it's kind of making sense
22:15:52 <danols> brb
22:15:57 <Pseudonym> THe backquotes and parentheses are important.
22:16:14 <danols> hmmm ok
22:18:40 <danols> what's the diff between Int and Integer ?
22:19:16 <Pseudonym> Int is like a Java int.
22:19:21 <Pseudonym> Integer is arbitrary precision.
22:19:45 <Pseudonym> Java int has a range of something like +/- 2 billion.
22:19:49 <Pseudonym> Integer is unlimited.
22:20:03 <danols> i see
22:20:05 <danols> hmm
22:20:20 <Pseudonym> Gotta go soon, BTW.
22:20:33 <danols> shait hmmm
22:21:09 <danols> marks = [Int] how do I get elements out of it in show ?
22:21:23 <Pseudonym> What do you want it to look like?
22:21:27 <danols> cause they have to be seperated /t 
22:21:35 <danols> 3    3    3 etc
22:21:44 <danols> I need this to look like this
22:21:58 <danols> StudentNumber                    3       3          3      3    
22:22:47 <danols> i'm trying to use putStr but it gives me that type don't match
22:22:52 <Pseudonym> Of course.
22:22:56 <Pseudonym> putStr operates on IO.
22:23:03 <Pseudonym> You want something which just gives a String.
22:23:04 <danols> i need to use that btw
22:23:17 <danols> hmmm
22:23:35 <danols> anyway to cast it back to String ?
22:23:38 <Pseudonym> No.
22:23:43 <danols> or an alternative ?
22:23:50 <Pseudonym> Well, you could traverse the list.
22:23:57 <Pseudonym> showMarksList [] = ""
22:24:09 <Pseudonym> showMarksList (m:ms) = '\t' : show m ++ showMarksList ms
22:24:14 <Pseudonym> That puts a leading tab in.
22:24:20 <Pseudonym> So it might not be quite what you want.
22:24:38 <danols> hmmmm
22:24:43 <Pseudonym> http://haskell.org/onlinereport/standard-prelude.html
22:24:46 <Pseudonym> Go down to showList.
22:24:50 <Pseudonym> That might help.
22:24:51 <danols> i am on something like that
22:25:18 <danols> and then i would call showMarksList with showMarksList marks ?
22:26:01 <Pseudonym> Yeah, something like that.
22:26:15 <danols> ++ appends a list ?
22:26:41 <Pseudonym> Yes.
22:27:17 <danols> why wouldn't that work in your example ?
22:27:27 <Pseudonym> Hmm?
22:27:31 <Pseudonym> It doesn't work?
22:27:34 <danols> hold on
22:27:54 <Pseudonym> The only thing is it might put in one more leading tab than you wanted.
22:28:18 <danols> ohhhh it says you can only append [Char] not Char
22:28:20 <danols> cool
22:28:32 <danols> i'll figure it out :)
22:28:37 <danols> do you have an im ?
22:28:38 <danols> icq ?
22:28:39 <danols> etc ?
22:29:07 <Pseudonym> Nope.
22:29:24 <Pseudonym> But I probably won't be online tomorrow anyway, being Saturday here.
22:30:58 <danols> i see, i really appriciate your help, you don't understand how many things are less fuzy thank you very much i owe you a beer lol
22:31:05 * Pseudonym laughs
22:31:12 <Pseudonym> You'll be disappointed to know that I don't drink.
22:31:24 <danols> well damn i'll drink it lol
22:31:35 <danols> i don't wann keep you waiting, i hope I can crunch through the rest of it
22:31:40 <Pseudonym> Good luck.
22:31:47 <Pseudonym> Bye everyone.
