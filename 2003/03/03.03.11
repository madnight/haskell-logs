01:59:32 <mlk89> Hi is anyone available to help me ?
02:00:01 <mlk89> I'm stuck on the apparantly favourite assignment, since no help  can be found
02:00:22 <mlk89> I am trying to implement a priority queue
02:02:04 <smkl> ?
02:05:46 <mlk89> I'm stuck on the insertQ....this is what I have in my module
02:06:25 <mlk89> insertQ (y,p) (PQ (x:xs))
02:06:26 <mlk89>  | fst (x) == fst (y,p) && snd (x) > snd (y,p) = insertQ (y,p) (PQ (xs))
02:06:26 <mlk89>  | fst (x) == fst (y,p) && snd (x) <= snd (y,p) = (PQ (x:xs))
02:06:26 <mlk89>  | otherwise = PQ ((insertQ (y,p) (PQ (xs))):x
02:06:59 <mlk89> ooops forgot this line above that :
02:07:11 <mlk89> insertQ (y,p) (PQ []) = PQ ([(y,p)])
02:07:44 <mlk89> but it simply won't accept the otherwise line....and yes I am a Haskell newbie
02:11:37 <smkl> why don't you just use a list without PQ constructor?
02:11:50 <smkl> | otherwise = let PQ r = insertQ (y,p) (PQ xs) in PQ (x:r) should work
02:14:36 <mlk89> it is an assignment where where I have to use a priority queue to implement dijkstra
02:15:15 <mlk89> all in Haskell....and thx it worked....now I only have to figure out what it does :)
02:15:27 <mlk89> the test was a success
02:15:33 <smkl> just have type PQ a b = [(a,b)]
02:15:44 <smkl> or something
02:17:55 <mlk89> we were given a specific module interface to follow
02:18:21 <Arnia> You don't need all those fst and snd though?
02:19:24 <mlk89> ok...I am a newbie....this works tho :)
02:34:21 <Arnia> :) Use pattern matching more. For example PQ (x,q):xs
02:35:04 <Arnia> Makes code much clearer. I got called up on that a lot by my tutor... I still use more brackets than I need though although I try :)
02:39:17 <Arnia> Congrats to all involved on Hellium btw
03:33:24 <mgoetze> so, why isn't haskellwiki on the tourbus?
03:42:24 * Marvin-- goes "D'oh" at forgetting to specify true != false
05:00:46 <shapr> mgoetze: tourbus?
05:09:29 <shapr> We've compiled Helium with Oxygen (ghc -O2) and this makes the compiler twice as fast. Great work, GHC people!
05:09:30 * shapr laughs
05:09:49 <shapr> Water = Helium compiled with Oxygen
05:11:11 <norpan> shapr: errr...that's hydrogen :)
05:11:57 <shapr> oh yah
05:12:01 * shapr drinks coffee quickly
05:12:15 * shapr blames it on lack of caffeine
05:12:42 <shapr> hi Fractal 
05:12:51 <shapr> norpan: have you tried Helium?
05:12:59 <norpan> shapr: yeah, makes you talk funny
05:13:04 * shapr snickers
05:13:17 <norpan> but the haskell helium i have not tried
05:14:05 <mgoetze> shapr: originalwiki://TourBusStop
05:14:22 * shapr looks
05:14:34 <shapr> oh, I've heard of this
05:14:46 <mgoetze> yes, well, HaskellWiki should be on it!
05:14:54 <mgoetze> at least on the software developer's tour
05:15:33 <shapr> where's the Haskell Tour?
05:15:56 <mgoetze> i dunno, are there several haskell wikis?
05:16:10 <shapr> no
05:16:16 <shapr> I see
05:19:01 <shapr> mgoetze: well, add it!
05:48:19 <mgoetze> shapr: well, i have no clue about these wiki things, really :)
06:07:40 <Segora> hi
06:07:47 <shapr> hi Segora
06:07:54 <shapr> mgoetze: now is a good time to start :-)
06:07:57 <Segora> hi shapr, long time no see
06:08:12 <shapr> how's life?
06:08:22 <Segora> passed an exam this morning
06:08:31 <shapr> cool, what exam?
06:09:04 <Segora> it's called '2. Vertiefungsfach' which roughly translates to 'second special subject' or somehting like that
06:09:15 <Marvin--> shapr: "as they say in temporal mechanics, there's no time like the present"? :)
06:09:23 * shapr grins
06:09:29 <shapr> Marvin--: good saying
06:09:36 <Marvin--> shapr: I stole it from Star Trek :)
06:09:39 <Segora> in my case, it was 'Telematik'. I'm not really sure if the direct translation telematics is very well known.
06:09:55 <shapr> Segora: teleworking?
06:09:57 <Segora> Marvin--: Janeway, End Game.
06:10:02 <Segora> right?
06:10:02 <Marvin--> Segora: yup
06:10:06 <Segora> :)
06:10:34 <Segora> shapr: no. More far-reaching, a general connection between computer science and telecommunication.
06:10:41 <shapr> 95% of my paying work right now is for uni-erlangen
06:11:30 <Segora> But in the end, the name is mere marketing talk. It was mostly about ISO/OSI reference model, networking hardware, protocols etc.
06:12:16 <mgoetze> Segora: was studierste?
06:12:28 <Segora> Informatik
06:12:46 <mgoetze> wo?
06:12:50 <Segora> Uni Karlsruhe
06:12:56 <mgoetze> ah ja :)
06:13:15 <Segora> Been there, done that? ;)
06:13:17 <shapr> isoosi
06:13:38 <shapr> Segora: do you know about SCTP and SIP?
06:13:50 <Segora> shapr: yeah. there are two fundamental truths: ISO/ISO is progress and the earth is a disk.
06:13:59 * shapr laughs
06:14:09 <Segora> *g*
06:14:24 <Segora> shapr: SCTP/SIP: not too much.
06:14:28 <shapr> I'm looking forward to IPv6
06:14:59 <Segora> it may come, true. >:]
06:15:30 <shapr> the linked list of headers in IPv6 is a great way to get around the problems with ignored flags of IPv4
06:16:44 <Segora> sure
06:17:16 <shapr> I've been thinking about game, irc, and other multiuser protocols  that will be dramatically changed by real multicasting in IPv6
06:17:19 <Segora> but there have been huge investments in ipv4 infrastructure and as long as there is no significant demand for ipv6, progress will still be slow.
06:17:33 <shapr> for example, an IPv6 native version of bit-torrent would rock
06:17:57 <Segora> hmm
06:20:35 <Segora> you could have a lot of that with ipv4 multicast, too. What hinders both is that ISPs are naturally hesitant to make fundamental changes in their infrastructure.
06:21:13 <Segora> btw. has anybody already implemented TCP/IP in Haskell? ;)
06:22:12 <shapr> I don't think so, that would be cool
06:22:48 <mgoetze> Segora: no, i'm at tu hamburg-harburg, but there seem to be quite a lot of you karlsruhe types around here :)
06:23:29 <Segora> mgoetze: no wonder. last term, the freshmen were once again taught Haskell. ;)
06:34:36 <mgoetze> Segora: well, that's good. but i didn't just mean here, also e.g. #zsh
06:36:15 * Marvin-- tries to piece together a new deck *sigh*
07:40:45 <SyntaxPolice> anybody played with helium yet?
07:41:32 <mgoetze> SyntaxPolice: how strong is he? 10kyu?
07:41:42 <mgoetze> SyntaxPolice: btw, #go
07:42:07 <SyntaxPolice> mgoetze: Helium is a language / environment for learning haskell :)
07:42:21 <mgoetze> SyntaxPolice: i knew that, was just kidding :P
07:42:49 <SyntaxPolice> mgoetze: OK.  You were more clever than I give you credit for... I thought you were just obsessing ;)
07:43:14 <mgoetze> hehe
07:43:29 <SyntaxPolice> I played some good Go this weekend. I have a problem that I think I'm better than my friend, but I don't want to suggest that he take an advantage.
07:43:57 <SyntaxPolice> I need to find someone IRL that can kick my ass, but there are no good go players around.
07:44:06 <mgoetze> well, are you beating him consistently with black?
07:44:54 * mgoetze could use a few less people who can kick his ass irl... :)
07:46:57 <Marvin--> SyntaxPolice: yes I've played with helium
07:48:20 <SyntaxPolice> Marvin--: any thoughts? I'm giving a two-part talk on Haskell to newbies and am thinking of learning / using Helium. Also thinking of packaging it.
07:48:51 <Marvin--> SyntaxPolice: the lack of overloading makes it much more obvious to use, unfortunately the drawbacks is that you don't have overloading on e.g. == :P
07:49:43 <Marvin--> SyntaxPolice: my master project will parse and do things with a subset of Haskell, and I think that subset will be Helium for simplicity reasons
07:50:39 <SyntaxPolice> sounds neat.
07:50:49 <SyntaxPolice> so do you reommend it.
07:50:50 <SyntaxPolice> ?
07:52:24 <SyntaxPolice> would you like to see it packaged for Debian?
07:53:46 <emu> was mgoetze looking for an ass-kicking?
07:53:51 <mgoetze> emu: #go
07:54:05 <emu> iku?
07:54:09 <Marvin--> SyntaxPolice: I have no idea how well it works in teaching, so I don't want to recommend it off-hand...
07:54:16 <Marvin--> I was toying with packaging it myself, but didn't have time
07:57:22 <opet> I've been using helium source to hack together a haskell subset parser for my third year project
07:57:59 <SyntaxPolice> Marvin--: I certainly won't get in your way if you want to package it :)
07:59:15 <Marvin--> SyntaxPolice: It's not a question of want, I want to see it packaged, and if I have time to do it, I can volunteer to do it, but I won't lose sleep over someone else packaging it
07:59:43 <Marvin--> (unless they make a sucky job of it, then I will track them down and kill them painfully)
08:00:01 <Marvin--> SyntaxPolice: when it comes to Debian, I think I have my hands full with d-i and would be glad to let others package things I want to use ;)
08:01:39 <SyntaxPolice> Marvin--: yeah. I'm wary of taking on more projects at the moment :(
08:05:48 <Marvin--> SyntaxPolice: *cough*helpuswithd-i*cough*
08:06:27 * SyntaxPolice idly wonders what d-i is and if anyone needs help with it.
08:06:49 <Marvin--> debian-installer
08:07:17 * SyntaxPolice is working on the apt gpg sig checking
08:07:18 <Marvin--> and yes, we need manpower
08:07:57 <SyntaxPolice> so when I finish that maybe.
08:08:15 <Marvin--> and right now I need inspiration
08:09:28 <SyntaxPolice> I will be happy when d-i does better, thats for sure. Its hard to talk people into debian without doing the install myself.
08:10:41 <Marvin--> well, the main design point of d-i isn't to solve the usability problem, but to solve the development problems in b-f
08:11:05 <SyntaxPolice> I see.
08:11:11 <Marvin--> by doing something modular instead, but there's a lot of us interested in making it user-friendly (and it will be user-friendly if nothing else then because we use discover for hardware detection)
08:11:21 <Marvin--> er, user-friendlier
08:11:35 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "New nhc98-1.16 - http://www.haskell.org/nhc98", "New Learning Haskell page - http://www.haskell/learning.html", "GUI Demos - http://repetae.net/john/computer/haskell/gui/", "Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144", "GHC 5.04.3 released!"]' by shapr
08:11:48 <shapr> http://www.haskell.org/ghc/docs/latest/html/users_guide/release-5-04.html
08:11:51 <shapr> yay 5.04.3 !
08:11:56 <SyntaxPolice> the thing is that I promised myself that I wouldn't buy a laptop until I finish the gpg stuff.
08:12:03 <shapr> oh, carrot and stick
08:12:05 <shapr> SyntaxPolice: smart move
08:12:18 * SyntaxPolice wonders if his pet bug is fixed in 5.04.3, and is sad that he missed the latest release to get Monad documentation in.
08:12:27 <Marvin--> SyntaxPolice: heh
08:12:29 <SyntaxPolice> shapr: exactly.
08:12:39 <SyntaxPolice> but I'm getting close to saying, "next paycheck" instead.
08:12:46 <SyntaxPolice> I"ve been holding out.
08:12:48 <shapr> heh
08:12:58 <shapr> carrot and stick is extremely motivational for me
08:13:18 <shapr> though I prefer hour long cycles 
08:13:28 <SyntaxPolice> heh
08:13:39 <SyntaxPolice> btw, anyone ever written partitionM (like filterM)?
08:13:44 <shapr> I won't check my email until X is done.
08:15:01 <shapr> is there a list of changes in 5.04.3 vs 5.04.2 ?
08:15:07 <Marvin--> shapr: wow, you're going to fix X?
08:15:13 <shapr> Marvin--: NOOO
08:15:15 <shapr> Marvin--: evil person
08:15:19 <SyntaxPolice> yay shapr!
08:15:23 * shapr runs!
08:15:34 * SyntaxPolice hoists shapr on sholders
08:15:43 * shapr calls for helicopter extraction
08:17:13 <andersca> hi shapr
08:17:24 <shapr> hi andersca 
08:17:35 <shapr> how's hD-BUS?
08:17:36 <shapr> ;-)
08:17:40 <andersca> it's ok
08:19:36 <shapr> is there an implementation of SOAP for Haskell?
08:20:33 <Marvin--> shapr: evil person
08:21:17 <shapr> Marvin--: hey, I'm trying to make Haskell attractive for the Java programmers I know
08:21:20 <shapr> they want web app stuff
08:21:41 <Marvin--> micros~1 whores
08:21:44 <shapr> http://haskell.org/wiki/wiki?HaskellWebApplications
08:22:06 <whee> new ghc? woo
08:22:16 <shapr> whee: might have TH stuff built-in
08:22:26 <Marvin--> "Hey I know, most firewalls don't block port 80, so why don't we do everything over port 80!" <- the most brilliant design I've ever seen...NOT
08:22:33 <whee> I'm checking now
08:22:36 <shapr> Marvin--: truly
08:22:41 <shapr> very silly
08:22:49 <whee> I don't see it mentioned at all shapr
08:22:52 <esap> google found this about SOAP: http://www.dur.ac.uk/computer.science/postgrad/taught_handbook/Project-Implementing_SOAP.html
08:23:08 <Marvin--> and from their marketing they seem to want people to belive that by doing everything over port 80 they avoid the security problem of having ports open... HELLO!
08:23:19 <whee> although it supposedly now 'supports OS X', whatever that may mean.
08:23:24 <whee> hopefully that also means 5.05 works now
08:24:00 <shapr> esap: yah, I found that too, but that looks like a possible project
08:24:14 <shapr> esap: I cruised around that for a bit, but couldn't tell if someone had already done it.
08:24:15 <whee> cvs server doesn't work, though :\
08:24:30 <esap> shapr: right, looks just a proposal for a project.
08:24:58 <shapr> whee: actually, Clause Reinke responded to the announcement specifically with (paraphrased) "could you tell us what fixes/changes happened?"
08:25:11 <whee> shapr: but it's right on the ghc site
08:25:15 * SyntaxPolice looked for a haskell SOAP or xmlrpc the other day and found nothing.
08:25:54 <whee> .. I think :\
08:26:49 <whee> I'll have to wait for cvs to work and hope that compiles
08:27:40 <Marvin--> whee: fun fun fun
08:28:04 <shapr> SyntaxPolice: I found an xmlrpc DTD once, and got it to mostly 'compile' in DtdToHaskell
08:28:10 <shapr> except for one error I couldn't figure out
08:28:30 <shapr> or maybe that was SOAP
08:29:26 * shapr looks
08:29:27 <whee> shapr: forget the lather step? :)
08:31:01 * shapr ties down whee in carwash and presses the "rinse tractor trailor trucks" button
08:32:10 <shapr> SyntaxPolice: http://kungens.kemi.fi/~shae/src/haskell/xml-rpc.dtd and http://kungens.kemi.fi/~shae/src/haskell/XmlRpc.hs
08:33:16 <SyntaxPolice> shapr: but it doesn't quite work?
08:33:30 <shapr> I don't know if I ever tried it.
08:33:40 <shapr> I got distracted, as usual :-)
08:34:04 <shapr> hi hal
08:34:15 <hdaume> that was fast :)
08:34:37 <shapr> I'm hyperactive.
08:34:47 <hdaume> ah
08:34:47 <shapr> maybe even hyperreactive ;-)
08:35:01 <shapr> or maybe just a smartass...
08:35:03 * shapr shrugs
08:35:16 * shapr bounces happily
08:35:21 <shapr> my xslt is working, yay!
08:35:31 <shapr> hal: how's the code going?
08:36:56 <shapr> SyntaxPolice: here's the dtd I found: http://www.ontosys.com/xml-rpc/xml-rpc.dtd
08:38:11 <hdaume> shae: blech.  stupid mpi keeps crashing on me (ocamlmpi)
08:38:25 <shapr> that sucks
08:39:03 <hdaume> it's not that it crashes, actually; it's just that sometimes it decides that it doesn't want to send a packet...then the server and one of the clients get out of synch and the program gets deadlocked.  very frustrating.
08:39:27 <shapr> bug in mpi or the ocaml binding?
08:39:39 <hdaume> got me :)
08:40:10 <hdaume> i'm guess ocaml binding because it seems to only happen when sending arrays or strings, not ints or floats
08:40:14 <hdaume> s/guess/guessing
09:39:31 <Janni> ellas!
09:53:20 <shapr> y0
09:56:49 <shapr> Marvin--: check this out: http://www.statskontoret.se/pressrum/press/2003/press030207.htm
09:56:59 <shapr> is that common knowledge already?
09:58:50 <Marvin--> shapr: I think I saw something about it a while back, but what exactly do you mean with "common knowledge"?
09:59:04 <Marvin--> among anybody, or among free software developers/users in Sweden?
09:59:30 <shapr> oss people
09:59:37 <Marvin--> I don't know
10:00:05 <shapr> do you know if the forum about OSS in IT has already been enstablished?
10:00:25 <Marvin--> no idea
10:00:30 <Marvin--> I haven't been following this
10:01:52 <shapr> I wonder if codefactory.se does anything with Haskell.
10:04:34 <shapr> whee: the list of fixes just hit ghc-users
10:04:54 <shapr> whee: "- MacOS X fixes for GHCi"
10:04:57 <shapr> dunno what that means :-)
10:14:56 <whee> shapr: neat
10:15:08 <whee> if I could only get the cvs server to work :\
10:18:36 <whee> unless of course 5.04.3 supports TH?
10:19:29 <whee> looks like it doesnt ;\
10:20:06 <whee> haha
10:20:22 <whee> cvs [checkout aborted]: unrecognized auth response from glass.cse.ogi.edu: cvs: error in loading shared libraries: libz.so.1: cannot open shared object file:   No such file or directory
10:20:32 <whee> server looks like it's in great shape :)
10:24:22 <shapr> yow
10:46:26 <bubba1034> Problem with some code ( 4 lines ).
10:46:40 <bubba1034> monadify_list [] = []
10:46:41 <bubba1034> monadify_list (h:t) = ( return h ):monadify_list( t )
10:46:57 <bubba1034> --
10:47:00 <bubba1034> m_split:: (Monad m) => m [a] -> [ m a ]
10:47:01 <bubba1034> m_split m = m >>= ( \x -> monadify_list(x))
10:48:13 <bubba1034> monadify_list type is (Monad m) => [a]-> [ m a]
10:49:20 <bubba1034> m_split type is ( but is not supposed to be  ) [ [a ]]-> [m a]
10:49:27 <bubba1034> What's wrong?
10:51:48 * emu is confusaid
10:52:10 <bubba1034> emu: Why?
10:52:40 <emu> cause i dunno haskell
10:57:37 <mgoetze> emu: if you just came here for the go, you can leave in favour of #go now :)
10:58:05 <esap> bubba: It's not that easy to provide implementation for your m_split. The only function I can figure out that has that type is of the form: m_split m = [m >>= (return . head)]
11:02:03 <emu> Haskellgo
11:02:23 <bubba1034> esap: I'm sorry. Do you mean the type [[a]]->[m a] or m [a]-> [m a]? Your type is m [a]-> m a.
11:03:52 <emu> haskellgo ni kimashita
11:04:44 <esap> bubba: m [a] -> [m a] is hard to implement, the above m_split should have that type, I think.
11:04:50 <bubba1034> ( BTW the type of monadify_list is [a]-> [ m a] )
11:04:51 <emu> hasukerego ni kimashita
11:05:06 * emu wonders how you would say "Haskell" in Nihongo
11:06:06 <bubba1034> esap: Yeah. I wonder if it is a bug in GHC? 
11:06:23 <esap> bubba: no I don't think so.
11:06:42 <esap> bubba: GHC doesn't have obvious bugs.
11:08:07 <esap> bubba: unless you are using the version released within the last week [And I'd still doubt it]
11:08:34 <bubba1034> Yeah. Hugs is complaining too. It seems like it wants to treat the monad as [].
11:09:31 <esap> bubba: it doesn't, actually. Sometimes the error messages seem that way, since the error message might have some types already unified with another type.
11:10:12 <Marvin--> [] is a monad :)
11:11:59 <bubba1034> Marvin: Yeah it looks like Haskell is treating the argument m as [] instead of a generic monad.
11:14:04 <emu> everyone is a monad
11:14:48 <shapr> I'm an Arrow.
11:15:07 <Marvin--> bubba1034: so monadify_list is sort of the inverse of sequence?
11:15:28 <emu> monads reflect the entire universe within themselves
11:15:48 <bubba1034> I'm sorry. I don't remember what sequence does.
11:15:52 <Janni> re
11:16:02 <Marvin--> sequence takes a list of monadic actions and performs them sequentially
11:16:33 <Marvin--> sequence $ monadify_list [1,2,3,4] :: Maybe [Int]
11:16:34 <Marvin--> Just [1,2,3,4]
11:16:44 <Janni> bubba1034: you can understand many function by their name and their type signature
11:17:21 <emu> frob_ints :: [Int] -> Int
11:17:27 <emu> whatsitdo?
11:17:54 <Marvin--> bubba1034: oh wait... obviously the argument to m_split must be the list monad, since you're in the list monad in the function
11:18:03 <Janni> bubba1034: ... if the programmer isn't stupid and choose stupid function names.
11:18:26 <emu> frob is a wonderful name
11:18:36 <shapr> but not very informative
11:18:40 <bubba1034> Ok. I see. No m_split is supposed to be the inverse of sequence.
11:18:41 <Marvin--> bubba1034: think about it, your return type is [m a], and you use a do expression, that means the do expression (Monad m) is unified with [] which is the return type
11:18:44 <emu> it means to frib
11:18:47 <emu> frob
11:18:56 <emu> frobnitz
11:19:07 <bubba1034> monadify_list is a preliminary step.
11:19:35 <Marvin--> bubba1034: maybe you want  m_split :: Monad m => m [a] -> m [m a]  and say  m_split m = m >>= \x -> return (monadify_list x)  instead
11:20:06 <Marvin--> bubba1034: if you just have m [a] -> [m a],  m will be unified with [] since you perform the parameter monad in the do expression
11:20:12 <Janni> emu: ok, then it's clear. this function just performes the frobbish-operation on every integer and returns a fribbed version of their sum...
11:20:37 <emu> sum?
11:20:50 <emu> how do you know it's not a frobtorial?
11:21:26 <Janni> hmm. didn't think about that... maybe one has to look at the code and not just the type signature, you're right...
11:21:29 <Marvin--> bubba1034: it all comes down to how the monads *work*
11:21:30 <emu> maybe it's gonna frob the planet and you need to give it the combination
11:21:44 <Marvin--> emu: you forget that Haskell is side-effect free :-)
11:21:51 <emu> monads!
11:21:57 <bubba1034> Hmm. I haven't seen any mention of this "Unification" before. Do you have a reference?
11:21:58 <Marvin--> so if you've got a function to frob the planet, it better be monadic
11:21:58 <emu> it'll give you a new planet
11:22:10 <emu> every planet reflects the universe
11:22:17 <Marvin--> ah, explicit universe passing :)
11:22:44 <emu> pass 3 times
11:22:47 <emu> and the universe is over
11:22:50 <Marvin--> bubba1034: well, it's both simple and hard ;) you know how you can just ignore putting type signatures on haskell functions and let haskell figure them out itself?
11:23:07 <emu> mostly
11:23:12 <bubba1034> Yes. I prefer to do things that way.
11:23:13 <Marvin--> mostly, there's the DRM
11:23:41 <emu> Digital Rights Management
11:23:49 <Janni> apropos drm
11:24:11 <Marvin--> bubba1034: it's all because of unification. What's the type of foldr (+) ? Well, we have to look at the types of foldr ((a -> b -> b) -> b -> [a] -> b) and + ((Num a) => a -> a -> a)
11:24:16 <Marvin--> emu: er, I meant DMR
11:24:24 <Janni> whatis dmr
11:24:36 <Marvin--> Janni: Dreaded Monomorphism Restriction
11:25:18 <Marvin--> bubba1034: so when you pass (+) as the first argument of foldr, it has to *unify* the types  (a -> b -> b)  and  ((Num a) => a -> a -> a), in other words find the most general type that satisfy both types
11:26:11 <Marvin--> bubba1034: the most general type in this case is  (Num a) => a -> a -> a, so b is unified with a and the type of  foldr (+)  is  (Num a) => a -> [a] -> a
11:26:11 <Marvin--> bubba1034: too fast?
11:26:45 <bubba1034> No. So [] is actually implemented as a monad. 
11:27:03 <bubba1034> Which unifies it with "Monad m".
11:28:03 <bubba1034> But I thought monads were generic types. 
11:30:49 <Marvin--> no, Monad is just a type class, it's overloading
11:31:04 <Marvin--> [] instantiates it, so does Maybe, IO and a whole slew of other things
11:31:27 <Marvin--> instance Monad [] where { return x = [x]; ... }
11:32:02 <Marvin--> the fact that [] is a monad is the only reason monadify_list can be type correct at all
11:32:09 <bubba1034> Sorry. I had a thought that I wanted to try out. Also sorry I don't know all the lingo yet.
11:32:16 <Marvin--> no worries :)
11:32:55 <Marvin--> the point is that if you have a function  f m = do { x <- m; ... }  then the type of f *must* be on the form  f :: m a -> m b
11:33:02 <Marvin--> you enter the monad, you don't get out
11:33:07 <bubba1034> My point was that there doesn't seem to be anything that forces the monad to be instantiated. So that it can't be unified to [].
11:33:48 <Marvin--> you say   m >>= \x -> ...  that is the same as   do { x <- m ; ... }
11:34:10 <Marvin--> after all, the type of (>>=) is  m a -> (a -> m b) -> m b
11:34:30 <Marvin--> so if m :: m a, then  m >>= ...  :: m b  for some type b
11:34:35 <Marvin--> this is all very equational
11:34:43 <bubba1034> Sctually SDPJ and Wadler would say that that is backwards. do is the same as >>= ...
11:35:06 <Marvin--> yes, yes, same same but different
11:35:17 <Marvin--> == is symmetrical ;)
11:36:00 * bubba1034 and SPJ and Wadler mean that >>= is the more primitive construct.
11:36:09 <Marvin--> of course it is, do is just syntactic sugar
11:36:13 <Marvin--> but I find it easier to read
11:38:02 <bubba1034> I see monadify_list os the wrong signature. So GHC forces monadify_list to the right signature by unifying m and [].
11:38:11 <Marvin--> exactly
11:38:30 <Marvin--> well, m_split has the wrong type
11:38:32 <Marvin--> not monadify_list
11:38:59 <Marvin--> if you say   return (monadify_list x)  instead of  monadify_list x  in m_split, you get the type   Monad m => m [a] -> m [m a]
11:39:09 <bubba1034> monadify_list has the wrong type as an argument to >>=
11:40:10 <bubba1034> I guess that technically [m a] is not in the monad. So there is no way to produce a function with type m [ a ] -> [ m a ]
11:41:16 <Marvin--> yes, since it would most likely need to know the implementation of the monad
11:46:13 <bubba1034> Onto a slightly related topic. In a paper on his cgi library, Meijer gives a set of functions which he describes as "combinators". Is there a reference describing the implementation/use of combinators?
11:51:35 <Marvin--> well, combinator is, iirc, just another name for higher-order functions
11:51:49 <Marvin--> they are functions that you combine to do something
11:51:56 <Marvin--> >>= can be seen as a combinator too
11:54:06 <bubba1034> Yeah. But I get the feeling it's something that is sort of hiding in the background, and the more serious people have some structure to. Some place
11:54:18 <bubba1034> a theory of combinators is written down.
11:55:26 <Marvin--> nothing I've read that I can recall
12:25:52 <bubba1034> Narvin Thanks a lot. g2g. Bye.
15:01:14 <esap> hmm... actually, I guess there is a way to implement a function with type Monad m => m [a] -> [m a].
15:08:10 <Smerdyakov> But it would be boring =)
15:08:58 <esap> Well I don't know. consider this, it has nice use of recursion: m_split m = (m >>= (return . head')) : m_split (m >>= (return . tail'))
15:10:35 <Smerdyakov> Yet, it's boring because you just have return'd values.
15:11:08 <esap> smerdyakov: right. Although that's actually what the type signature says that function has to do :-)
15:11:24 <Smerdyakov> That's why I said it would be boring without seeing your implementation....,
15:11:59 <Pseudonym> esap: Not necessarily
15:13:05 <Pseudonym> fun m = [m >>= \xs -> return (head xs)]
15:13:13 <Pseudonym> That also has the same type.
15:13:34 <esap> pseudonym: yes, that's what I thought smerdyakov meant by "boring" :-)
15:13:38 * Pseudonym laughs
15:13:51 <Pseudonym> True.
15:14:26 <Pseudonym> Actually, "undefined" can take that type too.
15:15:12 <esap> pseudonym: But I think undefined should actually not exist at all, so I usually ignore it.
15:15:13 <Marvin--> undefined is never boring! ;)
15:15:29 <Pseudonym> You probably don't like error, either.
15:15:38 <esap> no I don't.
15:15:43 <Pseudonym> undefined = undefined
15:15:45 <Pseudonym> So ther.
15:15:54 <Pseudonym> Or, undefined = y id where y f = f (y f)
15:15:55 <Marvin--> undefined | False = undefined
15:17:37 <Marvin--> esap: with your code, won't you repeatedly run the monad m?
15:17:49 <Marvin--> esap: I mean, twice for the second element, three times for the third,et.c.
15:18:40 <Marvin--> and what about base case? :)
15:21:45 <esap> marvin: well, if the user uses all elements, then yes. But I couldn't see any way of avoiding that.
15:21:45 <esap> marvin: that's why I used head' and tail', which I didn't show that had handling for the base case (using 'error' :-)
15:21:56 <Marvin--> heh
15:22:23 <Marvin--> well, unfortunately  foo <- sequence (m_split (Just [1..4]))  doesn't seem to be terminating :)
15:22:48 <Marvin--> which isn't all that strange
15:24:46 <Marvin--> infinite lists and monads don't mix that well
15:25:25 <Marvin--> I should hit the sack, I've got an oral exam tomorrow
15:30:35 <Pseudonym> That could mean a few things.
15:30:52 <Pseudonym> I saw it and I first thought "oh, you're visiting the dentist?"
15:31:43 <Marvin--> heh
15:32:11 <Marvin--> no, meeting with the lecturer of the compiler construction course
15:33:18 <Pseudonym> Cool.
15:33:23 <Pseudonym> Go sleep.
15:39:54 <esap> Talking about infinite data structures and recursion, there is a great paper on both: http://citeseer.nj.nec.com/hasegawa97recursion.html. If I understand the paper correctly, it says that recursion is the inverse of 'swap'.
17:53:19 --- topic: '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "New nhc98-1.16 - http://www.haskell.org/nhc98", "New Learning Haskell page - http://www.haskell/learning.html", "GUI Demos - http://repetae.net/john/computer/haskell/gui/", "Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144", "GHC 5.04.3 released!"]'
17:53:19 --- topic: set by shapr on [Tue Mar 11 08:11:35 2003]
17:53:19 --- names: list (clog listener det Radek eivuokko LoganH dark Pseudonym engstad mgoetze|away hdaume shapr Fractal jak_ Smerdyakov ChilliX liiwi smkl andersca skylan ludde o3 whee galority emu Igloo jlouis flippo SyntaxPolice Riastradh xkb gdsx opet norpan dennisb creature kawfee)
20:11:34 --- topic: '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "New nhc98-1.16 - http://www.haskell.org/nhc98", "New Learning Haskell page - http://www.haskell/learning.html", "GUI Demos - http://repetae.net/john/computer/haskell/gui/", "Order Haskell 98 Report in Hardcopy - http://titles.cambridge.org/catalogue.asp?isbn=0521826144", "GHC 5.04.3 released!"]'
20:11:34 --- topic: set by shapr on [Tue Mar 11 08:11:35 2003]
20:11:34 --- names: list (clog palomer lament inkedmn Radek eivuokko LoganH Pseudonym engstad mgoetze|away hdaume shapr Fractal jak_ Smerdyakov ChilliX liiwi smkl andersca skylan ludde o3 whee galority emu creature kawfee dennisb norpan opet gdsx xkb Riastradh SyntaxPolice flippo jlouis Igloo)
