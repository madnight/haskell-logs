03:27:56 <Janni> salvete.
03:52:50 <ludde> "length f <= n", will this evaluate the whole string, or just the first n letters of it
03:56:45 <ibid> the whole string
03:57:34 <ludde> ok
03:58:51 <ibid> making it evaluate only the first n would require the coompiler to know that length is monotonic and that Int is strictly ordered
03:59:09 <ludde> i figured out that I could use splitAt instead.
03:59:17 <ludde> splitAt n s in if (length a <= n) then ... else ...
03:59:27 <ludde> err
03:59:33 <ludde> let (a,b) = splitAt n s in if (length a <= n) then ... else ...
03:59:58 <ibid> huh?
04:00:13 <ludde> hmm
04:00:35 <ibid> yeah, that would require special-casing length
04:00:37 <ludde> i think i did something wrong
04:00:46 <ludde> length a == n works
04:01:06 <ibid> works meanign?
04:01:09 <ibid> meaning?
04:01:22 <ludde> let x = splitAt n s in if (length $ fst a == n) then Just x else Nothing
04:01:26 <ludde> hmm
04:01:34 <ludde> getStr n s = let x = splitAt n s in if (length (fst a) == n) then Just x else Nothing
04:01:52 <ludde> that gives me the n first characters of s
04:02:05 <ludde> or returns Nothing if the string doesn't have n characters
04:02:14 <ludde> (it also gives me the remainder in the first case)
04:05:10 <ludde> err, it should say fst x, not fst a
04:21:16 <Marvin--> ludde: you could also use take n s
04:21:20 <Marvin--> instead of splitAt that is
04:21:43 <ludde> ok, probably..
04:21:57 <ludde> but i need both of the splitted parts anyway
04:22:17 <ludde> is there some way to write this in a more compact way: (\(m,p) -> ReqAddUser m p)
04:22:33 <ludde> can I use curry ?
04:23:14 <ludde> uncurry perhaps?
04:23:20 <ludde> uncurry ReqAddUser
04:24:58 <Marvin--> uncurry yes
04:25:26 <Marvin--> uncurry :: (a -> b -> c) -> (a,b) -> c
05:08:22 <ludde> there is hGetContents :: Handle -> IO String, is there a corresponding hPutContents :: String -> IO (), that evaluates string lazily and writes it.
05:08:35 <ludde> hPutContents :: Handle -> String -> IO ()
05:08:52 <ludde> there is hPutStr
05:09:01 <ludde> does it work properly when the input is a lazy string
07:45:13 <Janni> i have a program on ftp://rochel.dyndns.org/pub/nikolaus.hs, which calculates a way to draw a 3-dimensional "Haus des Nikolaus". The program documentation explains, what it is. the problem is, that the algorithm is so complex that i don't get a result in acceptable time. maybe you could give me hints how to optimize.
07:46:26 <Janni> my first idea is, that i could give the function "continue" a list of possible paths instead of letting it calculate them each time, but i don't know if it would help much
07:55:45 <Janni> btw: with "complex", i don't mean, that it's hard to understand, but expensive
09:19:04 <Janni> although, nobody seems to be interested: i updated it and it's way faster now, but it's still so slow, that i haven't got a solution after 30 minutes calculating.
09:31:56 <ludde> Can I made anonymous types?
09:32:05 <ludde> i.e. a data without giving the contents of the data?
09:33:00 <Janni> ludde: you know constructors?
09:33:12 <ludde> yes
09:33:16 <Janni> maybe that's what you want, but you could specify your problem a bit more
09:33:26 <ludde> well, i have something like:
09:33:26 <ludde> data MatchData = MD {
09:33:26 <ludde> 	mdName				 :: MatchName,
09:33:26 <ludde> 	mdOwner				 :: UserID,
09:33:38 <ludde> but this is the internal representation of MatchData.
09:33:43 <ludde> I don't want to give that out to everyone
09:33:59 <ludde> but I still want to export functions that operate on MatchData:s
09:34:27 <Janni> ludde: you can specify what to show to the outside the world and what to keep inside the module
09:34:52 <Janni> that's exactly what you want, but, errr... wait
09:35:23 <Marvin--> ludde: export 'MatchData', not 'MatchData(..)' or 'MatchData(MD)'
09:35:30 <ludde> hmm
09:35:33 <ludde> can I write that?
09:35:35 <Marvin--> yes
09:35:40 <Marvin--> well
09:35:49 <ludde> ah
09:35:49 <Marvin--> module Foo (MatchData, function1, function2, ..) where
09:35:57 <ludde> okay
09:35:59 <Janni> yea, that was it...
09:36:07 <Marvin--> instead of  module Foo (MatchData(MD), ...) where  which exports the constructors too
09:47:25 <Janni> isn't there a predefined Prelude function applying f on x n times like that?
09:47:25 <Janni> apply :: Integral b => (a -> a) -> b -> a -> a
09:47:25 <Janni> apply f 0 x = x
09:47:25 <Janni> apply f n x = apply f (abs n - 1) (f x)
09:48:15 <Janni> i know, apply isn't very good name, but i haven't found a more suitable one
09:51:31 <dennisb> Janni: iterate is similar
10:02:28 <kawfee> what does that do?
10:02:38 <kawfee> what's the purpose of the ( ) ?
10:02:50 <kawfee> I see it in function definitions
10:06:23 <Janni> kawfee: what do you mean? look at the definition of iterate in Prelude.hs to understand
10:06:40 <Janni> kawfee: don't you know, what the (a -> a) means?
10:08:27 <kawfee> no
10:08:29 <kawfee> I don't
10:09:34 <Janni> iterate :: (a -> a) -> a -> [a] means, that iterate takes as first argument a function which itself has the type a -> a
10:12:32 <shapr> yow
10:12:36 <andersca> hey shapr
10:12:40 <shapr> hi andersca, wassup?
10:12:49 <andersca> not much, pretty tired
10:13:10 <shapr> I'm having an evening of food and munchkin
10:13:17 <shapr> (and I had a beer!!)
10:13:24 <andersca> munchkin!
10:13:26 <andersca> you mean the game?
10:13:34 <shapr> yah!
10:13:39 <andersca> that game rocks
10:13:49 <shapr> yes it does
10:13:57 <shapr> I'll be playing with my woman for the first time
10:14:09 <shapr> she's been running her own business for years, I'm worried ;-)
10:15:45 <kawfee> oh
10:16:12 <kawfee> munchkin?
10:20:06 <shapr> kawfee: http://www.sjgames.com/munchkin/game/
10:23:23 <kawfee> bad link
10:23:36 <shapr> it usually works
10:23:49 <kawfee> usually, but not now 
10:24:06 <shapr> it's a card game by steve jackson games. feel free to google for it.
10:24:13 <kawfee> no way!
10:24:32 <shapr> ok
10:44:37 <Janni> isn't there a predefined isSublistOf function?
11:16:24 <shapr> Janni: yes, but I've forgotten the name of it
11:17:44 <shapr> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html
11:18:24 <shapr> for some reason I think it's the \\ operator
11:28:19 <Janni> shapr: no. \\ is `without`...
11:38:00 <Janni> i know, that nobody is interested, but i'll tell you anyway: i didn't have to optimize my litte program, but just do it right. a fast, working version can now be found on ftp://rochel.dyndns.org/pub/Nikolaus.hs
11:38:21 <Janni> ah, forget it. i removed the English documentation, so just let it be
11:50:55 <shapr> :-)
12:23:36 <kawfee> anyone here familiar with EBNF grammar?
12:23:58 <kawfee> I'm trying to define a parser for: 
12:24:02 * ibid
12:24:06 <kawfee> Expr   ::= Term{(+|-) Term}
12:24:06 <kawfee> Term   ::= Factor {(*|/)Factor}
12:24:07 <kawfee> Factor ::= '('Expr')' | Num
12:24:17 <kawfee> I have the parsers for +,-,*,and /
12:24:19 <ibid> though you should specify *which* EBNF :-)
12:24:27 <kawfee> the one above
12:24:31 <ibid> that's not Standard EBNF :-)
12:25:01 <kawfee> () is used for grouping
12:25:08 <kawfee> alternatived are seperated by |
12:25:09 <ibid> yeah, i think i can read it
12:25:17 <kawfee> ok
12:25:35 <kawfee> I'm having trouble combining all my small parsers to make the large one
13:29:24 <andersca> time for some haskell hacking
15:48:10 <palomer> :o
23:04:16 <bubba1034> Anyone here?
23:27:34 <clausen> yep
23:54:32 <bubba1034> Anyone know good hackell techniques for multi-session cgi? Meaning for example, that you serve up a web page with a frame, and the browser asks for the window in the frame, how you can tell which person's request you are processing?
