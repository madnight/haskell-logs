01:06:53 <Janni> morning.
01:23:17 <Vincenz> hiya shap
01:23:18 <Vincenz> hiya shapr
01:37:31 <debug> hello Marvin--
01:42:08 <Marvin--> morning
01:42:41 * debug was just thinking about a generic thing to calculate Ordo for functions, but it is probably equivalent to the halting problem
01:43:19 <debug> like if you have a function that does recursion in some weird way, it is probably not possible to calculate O for the function in some straight forward way :-/
04:36:07 <Vincenz> lo Riastradh
04:55:54 <shapr> ahem
04:55:58 <shapr> goooood morning!
04:56:09 <shapr> Vincenz: wasssup?
04:56:21 <Vincenz> I'm stuck on a java problem
04:56:32 <shapr> what's the problem?
04:56:41 <Vincenz> a javabug and JAI :(
04:56:56 <Vincenz> I have this AWT component which renders images and fonts and I need to be able to zoom in and out on it
04:57:01 <shapr> what's jai?
04:57:08 <Vincenz> Java Advanced Imaging
04:57:10 <shapr> oh
04:58:05 <Vincenz> I got closer tho, I know it's an official javabug
04:58:06 <Vincenz> :(
05:04:00 <Vincenz> stupid java
08:02:37 <palomer> any really good books on parsing?
08:04:01 <Igloo> The dragon book is the canonical reference for compiler-related things, but it's not Haskell-based and is more general
08:04:34 <palomer> which dragon book?
08:04:57 <creature> It must be an O'Reilley thing with a name like that. 
08:05:10 <Igloo> No, it predates them
08:05:21 <Igloo> Aho, Ullman and R someone write it I think
08:05:31 <Igloo> Compiler tools and techniques or similar
08:05:42 <palomer> this ullman dude is everywhere
08:05:57 <palomer> this thing is from 1986!
08:06:08 <palomer> hasn't the field evolved since then?
08:06:29 <Igloo> Parsing is parsing is parsing...
08:06:50 <Igloo> It doesn't discuss things like parser combinators which you tend to find in functional language parsers, though
08:07:04 <palomer> parser combinators look like fun
08:07:12 <Igloo> Look for parsec or the UU parser combinator docs for that I guess
08:07:22 <palomer> :o
08:07:28 <Igloo> I think the canonical reference for them is a paper on monadic parser combinators
08:07:35 <palomer> I'm debating whether to write my compiler in ml or haskell
08:07:46 <palomer> any suggestions?
08:07:53 <palomer> I really really like the haskell syntax
08:07:53 <Igloo> Haskell.
08:08:01 <Igloo> But if you ask in 'haskell what do you expect?  :-)
08:08:16 <palomer> but isn't some stuff more easily done in the imperative paradigm?
08:08:25 <palomer> for compiler design I mean
08:08:43 <Igloo> Yeah, but it's not as much fun  :-)
08:09:19 <palomer> and isn't some stuff really really hard to do in the functional paradigm?
08:09:21 <palomer> like dfs
08:09:39 <Igloo> There's an ocamllex (and yacc I think) which you might find useful
08:09:50 <Igloo> But of course Haskell has happy, alex etc now too
08:10:30 <palomer> I want to do everything from the bottom up
08:10:47 <Igloo> Do you mean DFAs? I don't think using them should be a problem. I'd have to think about whether you could build them efficiently
08:11:08 <palomer> DFAs are no biggy
08:11:17 <palomer> and minimization of DFA's is quite easy
08:11:26 <palomer> as for context free grammars
08:11:34 <Igloo> What did you mean by dfs then
08:11:34 <Igloo> ?
08:11:35 <palomer> you can reduce them to chomsky normal form
08:11:49 <palomer> depth first search
08:12:08 <Igloo> I don't see why that should be hard
08:12:20 <palomer> erm, I mean breadth first search
08:12:22 <Igloo> Oh, uynless you mean in a graph
08:12:29 <Igloo> Ah
08:12:38 <palomer> in a graph, yes
08:12:51 <palomer> because you have to keep track of all the vertices visited
08:12:55 <palomer> so you don't backtrack
08:13:09 <Igloo> Right, yeah
08:13:44 <palomer> I don't see how you can easily do that with haskell
08:14:19 <Igloo> Well, you need something you can update efficiently and to pass it around (possibly with the aid of a monad)
08:15:00 <dennisb> Haskell do imperative programming just fine, monads are the solution
08:15:24 <palomer> and doesn't it get annoying that you have to create a new function everytime you want to simulate a loop?
08:15:34 <palomer> or is there another way around it?
08:15:55 <dennisb> simulate a loop? why would you want to?
08:16:09 <palomer> let's say you want to add all the numbers from 1 to n
08:16:21 <Igloo> You don't, you use higher order functions
08:16:24 <dennisb> sum [1..n]
08:16:58 <Igloo> Or foldr (+) 0 [1..n] for a more general pattern
08:17:00 <palomer> ok, let's say you want to add the all the elements of an array multiplied by the elements of another
08:17:27 <dennisb> palomer: all these things you can do with higher order functions
08:17:30 <Igloo> You'll have to explain that more precisely
08:17:54 <palomer> let a be a vector, b be a vector, return c where c[i] = a[i] * b[i]
08:18:03 <hdaume> i think he means something like 'sumA . zipWith (*)'
08:18:08 <hdaume> sorry, zipWithA
08:18:13 <palomer> hrm
08:18:26 <palomer> I'm sure there are some things you can't do with higher order functions
08:18:33 <palomer> multiply 2 matrices?
08:18:56 <Igloo> A list comprehension will do that
08:19:08 <palomer> the matrices are arrays, let's say
08:19:09 <dennisb> and I'm sure we can always create new higher order functions when/if needed
08:19:37 <palomer> and is there a way to group these functions?
08:19:46 <dennisb> group?
08:19:46 <Igloo> group?
08:19:52 <palomer> or you just scatter them around your code
08:19:59 <dennisb> use the module system
08:20:13 <dennisb> or create a class
08:21:02 <palomer> ahh, you have classes
08:21:22 <Igloo> We might do, depending on what you mean by classes
08:21:26 <dennisb> not exactly like the classes you are probably used to, but still classes
08:22:16 <palomer> is there a good free book on haskell?
08:22:54 <hdaume> http://www.haskell.org/learning.html
08:24:46 <palomer> and what's the favourite book in the field:o?
08:25:45 <dennisb> This one is good (they say) http://www.cs.ukc.ac.uk/people/staff/sjt/craft2e/
08:26:06 <dennisb> but i've not read it so I don't know (I've just looked through it a bit)
08:26:13 <dennisb> looked nice
08:26:49 <Igloo> We used IFB, but that may be because we were lectured by its author
08:26:53 <Igloo> IFP even
08:29:33 <palomer> IFP?
08:29:53 <Igloo> Introduction to Functional Programming
08:30:12 <Igloo> (2nd ed)
08:30:52 <palomer> any good?
08:31:33 <Igloo> Yeah, seemed fine, but I have nothing to compare it to
08:31:52 <palomer> by Davie?
08:32:37 <Igloo> No, Richard Bird
08:32:37 <palomer> noone has reviewed it
08:33:05 <palomer> The Haskell School of Expression: Learning Functional Programming through Multimedia got the best reviews
08:33:05 * Igloo almost falls off his chair at that page
08:33:13 <Igloo> That's certainly changed
08:33:55 <palomer> eh?
08:34:50 <Igloo> http://www.haskell.org/learning.html was completely different when I last looked
08:37:39 <palomer> im eyeing the algorithms book
08:37:42 <palomer> that looks like fun
08:41:17 <palomer> Algorithms - a Functional Programming Approach
08:41:27 <palomer> anyone heard anything about it?
08:44:41 <palomer> I can take the course with the author:o
08:44:57 * Igloo is half way through that
08:45:22 <Igloo> Haven't got to much new stuff though, but I think there will be some later in it
08:45:46 * shapr awakens
08:45:57 <palomer> hey shapr
08:46:04 <shapr> palomer: I luv that book.
08:46:09 <palomer> really?
08:46:13 <shapr> by lapalme and rabhi
08:46:44 <shapr> I sent them a new errata 
08:46:58 <shapr> a very silly errata I might add :-)
08:48:10 <shapr> palomer: http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html
08:48:14 <shapr> that's the book you mean, yes?
08:48:58 <palomer> yup
08:49:05 <shapr> yah, much fun.
08:49:27 <shapr> I just wish there were a similar book for all the Control.Monad stuff
08:49:41 <palomer> what algorithms does it cover?
08:49:56 <shapr> http://www.iro.umontreal.ca/~lapalme/AlgoFP/contents.html
08:51:18 <shapr> palomer: that book might be more impressive to me than to you, you may have had lots of algorithms classes before.
08:51:48 <palomer> yes
08:51:53 <palomer> I live in algorithms
08:52:46 <palomer> I've covered all the algorithms in that book
08:52:59 <palomer> but I'm wondering if the functional presentation is any different
08:53:14 <shapr> I think it is
08:53:15 <shapr> http://www.iro.umontreal.ca/~lapalme/AlgoFP/code.html
08:54:17 <shapr> I've read bits and pieces of algorithms books before
08:54:29 <shapr> the pure FP approach was a lot easier for me to understand
08:54:38 <shapr> also, I enjoyed the writing style.
08:55:50 <palomer> let's hope umontreal has the book
08:55:55 <palomer> noooo
08:56:12 <palomer> that sucks
08:56:13 <shapr> I ordered it from amazon
08:56:23 <shapr> speaking of which, I want to buy Okasaki's book next.
08:56:29 <palomer> I don't feel like using my credit card
08:56:36 <palomer> data structures?
08:57:32 <shapr> I think I'm going to write a web browser that autocompletes urls from the domain up
08:57:50 <shapr> it's very silly to complete from the host
08:58:07 <palomer> hrm?
08:58:13 <palomer> works fine fro me
08:58:53 <shapr> I'd like to hit au.edu.<tab>
08:59:07 <shapr> and see what hosts I've surfed to that are in *.edu.au
08:59:27 <palomer> I don't think of my webpages in terms of domains
08:59:55 <palomer> arrgh, noone is selling lapalme's book
09:00:00 <palomer> bah:/
09:03:29 <palomer> I think I'll get that multimedia book:o
09:03:37 <palomer> but now time for some php:o
09:04:23 <shapr> palomer: the Hudak book?
09:21:37 <shapr> Igloo: hey, does ++ work lazily?
09:22:31 <Igloo> It's lazy in its second argument
09:23:25 <Igloo> You can see it working with "where fix x = x (fix x)"  :-)
09:25:58 <shapr> oh, I see
09:26:03 * shapr changes his .signature
09:26:16 <hdaume> shapr: to what?
09:26:29 <shapr> so far Marvin--, Volker Stolz, and Igloo have suggested changes to my .signatue
09:26:55 <shapr> 10 PRINT "HELLO" 20 GOTO 10 ; putStr $ fix ("hello\n"++)
09:28:41 <shapr> hdaume: you going to suggest improvements also? ;-)
09:30:06 <Igloo> Eventually someone will suggest an improvement to a previous version  :-)
09:30:12 <shapr> heh, probably so
09:30:18 <shapr> at which point I'll know it's finished
09:30:19 <Igloo> s/to/back to/
09:31:44 <dennisb> I'll give it a shot and see if I can finish it then
09:31:50 <dennisb> putStr $ unlines $ repeat "hello"
09:32:00 <shapr> yah, that was the first one :-)
09:32:11 <shapr> that's what Marvin-- came up with
09:32:44 <hdaume> mfix (return . ("hello\n"++)) >= putStr
09:32:49 <hdaume> using monads for no real reason :)
09:33:23 * shapr creates a wiki page to hold the variations
09:34:50 <dennisb> here is another one: mapM putStrLn $ repeat "hello"
09:35:23 * Igloo whispers mapM_
09:36:29 * dennisb agrees
09:36:37 <andersca> hey dennis
09:36:39 <Igloo> And there's always System.system "yes hello"  :-)
09:38:55 <dennisb> and why not: putStrLn `mapM_` repeat "hello"
09:39:26 <dennisb> 34 more to go
09:39:39 <shapr> 34?
09:39:57 <dennisb> people in the channel
09:40:43 <shapr> http://haskell.org/wiki/wiki?SillySignatures
09:40:45 <shapr> ok :-)
09:40:56 <dennisb> It's hard to come up with more versions now
09:41:17 <shapr> yah, now I have to think of more things that people do when they first start programming
09:41:46 <hdaume> let x = putStrLn "hello" >> x in x
09:41:46 <hdaume> ?
09:41:59 * shapr adds
09:42:08 <dennisb> nice
09:42:28 <shapr> hi jewel_ 
09:43:01 <jewel_> hey shae
09:43:18 <hdaume> mapM_ putStrLn $ unfoldr (\_ -> Just ("hello",())) ()
09:43:20 <hdaume> this is fun :)
09:43:31 <SyntaxPolice> do they have to pass ghc's loop detection ability? ;)
09:43:36 <shapr> we've been generating variations on 10 PRINT "HELLO" 20 GOTO 10
09:43:39 <shapr> http://haskell.org/wiki/wiki?SillySignatures
09:47:17 <dennisb> I found a function in the prelude i've never used! cycle
09:47:24 <dennisb> putStr $ cycle "hello\n"
09:47:34 <dennisb> but it's just as bad as previous ones
09:47:48 * Igloo wonders why it's HELLO in mine
09:47:53 <andersca> cycle (x:xs) = x:cycle xs?
09:48:05 <andersca> hmm no
09:48:15 <dennisb> cycle xs         =  xs' where xs' = xs ++ xs'
09:48:22 <shapr> Igloo: oh, I wanted to change all of them to HELLO for consistency with the original BASIC program
09:48:35 <Igloo> Ah
09:49:52 <andersca> dennisb: tell us about zigo!
09:49:58 <shapr> what's zigo?
09:50:10 * shapr changes all the "hello" to "HELLO"
09:55:39 <shapr> what other programs did you write when you first started programming
09:55:41 <shapr> ?
09:55:54 <shapr> that "HELLO" program was the first thing I ever wrote.
09:56:01 <andersca> the basic one?
09:56:14 <shapr> yah
09:56:27 <palomer> print hello
09:59:29 <shapr> anything else?
10:05:39 <dennisb> I also wrote that hello program as the first program ever
10:06:08 <dennisb> on a vic 20
10:17:47 <ludde> in what module is "trace"?
10:18:08 <shapr> ludde: IOExts maybe?
10:18:32 <ludde> thanks
10:19:35 <dennisb> In hugs it the module Trace
10:19:56 <hdaume> in the hier libs, it's in Debug.Trace i believe
10:20:23 <dennisb> what about nhc?
10:20:37 <ludde> well
10:20:40 <ludde> it's enough :)
11:54:07 <debug> hm
11:54:18 <hdaume> does anyone (Ian?) know whether 5.04.3 includes the change to external core that simplifies the appaearance of constructors?
12:25:42 <Igloo> I don't I'm afraid
12:32:17 <debug> Marvin--: have you taken the Operating Systems course?
13:08:03 <palomer> :o
13:16:51 <Marvin--> debug: yes
13:17:31 <Marvin--> debug: the labs were quite interesting (you helped me with one, remember? :), but the lectures were a real disappointment
13:21:36 <debug> yes
13:21:37 <debug> ok
13:21:49 <debug> I was hoping for good explanations about the bleading edge in scheduling
13:21:53 <debug> and stuff like that
13:21:59 <Marvin--> not really no
13:22:00 <debug> bandwidth scheduling for busses etc
13:22:11 <Marvin--> no, it's a very basic course
13:23:47 <debug> ok
13:24:27 <debug> algorithms, then?
13:24:47 <Marvin--> Algorithms is a very good course
13:24:51 * debug wrote some TSP stuff this evening
13:25:12 <Marvin--> in Haskell I hope? .-)
13:25:15 <debug> nope :)
13:25:21 * debug doesn't use haskell for everyday stuff
13:26:03 <debug> there are no difficult data structures used, so C is ok
13:27:34 <Igloo> There's no point teaching bleeding edge stuff, it will just be out of date by the time 99.9% of people come to use it
13:33:47 <debug> :)
13:34:14 <Marvin--> very good point
13:34:23 * debug would like to play around with heterogenous clusters
13:34:42 <debug> maybe a lot of the research today is still of 'empirical' nature
13:36:59 <debug> Marvin--: if we would implement the Algorithm labs in haskell, it would be harder for us to calculate O-complexity and so on
13:37:27 <debug> we'd have to study the implementation of all the prelude functions we'd use on lists
13:37:30 <Marvin--> we had no problems with that
13:37:50 <debug> in C, we would write everything from scratch and hence have noone elses code to analyse
13:38:04 <debug> no, but you were probably fluent in haskell before the algorithm course :)
13:38:43 * Marvin-- coughs
13:39:42 <debug> :)
13:40:07 * debug likes C
13:40:24 <debug> the solaris C compiler produces pretty fast code
13:41:40 <debug> Marvin--: so, have you written anything fun in haskell lately?
13:42:15 <Marvin--> does my master project count?
13:42:28 <debug> I haven't heard about it.
13:42:29 * andersca is gonna write a multithreaded file manager in haskell
13:42:33 <Marvin--> well, we wrote our javalette compiler in haskell
13:42:47 <debug> Marvin--: I and Magnus did too
13:42:59 <debug> I wrote the stuff that didn't use monads :)
13:43:03 <Marvin--> heh
13:43:38 <debug> actually, I can use monads, but not define the basic state-modifying functions
13:44:00 <debug> did you get any actual assembly backend to work?
13:44:10 <Marvin--> no, we didn't have the time
13:44:33 <Marvin--> we had a semi-functioning register allocator, but our quadruples backend didn't work 100%
13:44:49 <debug> we had problems remapping quadruples to the SPARC's register set
13:45:04 <Marvin--> but had we had one more week, I think we could've generated some sort of risc code
13:45:06 <debug> quadruples doesn't have a native stackpointer, but SPARCs have
13:45:25 <Marvin--> we had some problems with mutual recursion, I think it was
13:45:35 <debug> we got as far as generating sparc code as long as it didn't include function calls :)
13:45:58 <debug> at least an iterative factorial function worked
13:46:25 <Marvin--> hehe
13:47:08 <debug> then, we thought that the mail we got was supposed to contain a preliminary score, not just preliminary comments
13:47:17 <debug> so when we got "33." we were really stunned
13:47:44 <debug> 33 would have been barely 'G'
13:48:07 <debug> (it later turned out that 33 was our group number :)
13:48:30 <Marvin--> hahaha
13:48:48 <Marvin--> we didn't get VG since we didn't get quadruples to quite work
13:49:31 <debug> sorry about that.
13:49:55 <debug> I think that most people who take such a course are actually interested
13:50:10 <debug> it's not like some introduction math course
13:51:03 <debug> Marvin--: I tried to write a small raytracer in haskell, and it turned out that the code in haskell was actually longer than an almost equivalent program in C.
13:51:59 <Marvin--> ouch
13:52:00 * debug though that functional programming would make such programs short
13:52:28 <debug> perhaps if I'd use single-letter variable names in the haskell version it would be just as short
13:52:31 <jlouis> debug: I do not understand that
13:52:39 <jlouis> take a look at ICFP
13:52:58 <jlouis> some years back they had a raytracer contest, where an Ocaml entry won
13:53:04 <debug> ok
13:53:17 <debug> I have an entry for IOCCC, but I'll not release that code yet
13:53:27 <debug> slightly less than 2KB
13:54:52 * debug would like to find a language with a compact like haskell, but still imperative like C
13:55:09 <Igloo> Have you looked at ML?
13:55:21 <debug> not really
13:56:42 * debug looks through some ICFP info
13:57:03 <Marvin--> the famous "fast or pretty"?
13:57:17 <andersca> hmm
13:57:23 <andersca> it'd be fun to write something for .NET
13:57:41 * Igloo rubs his eyes and tries reading that again  :-)
13:58:07 <Igloo> There's been some hugs .NET stuff committed recently if that's of interest to you
13:58:59 <andersca> oh really?
13:59:01 <andersca> what's it do?
13:59:18 <andersca> I think it's cool that the .NET classes contains functions for emitting bytecode
13:59:19 <Igloo> I have no idea
13:59:27 <andersca> and then you can just say "ok, now take this and produce an executable"
13:59:31 <Igloo> Look at the cvs-hugs archives for clues
14:05:40 <debug> hm
14:17:16 <debug> which one of hbc and ghc produces fastest code?
14:18:16 <jlouis> ghc probably
14:28:52 <debug> binary sizes after strip:  with hbc = 1.1MB, with ghc = 0.7MB,  time to complete an image:  with hbc = 133 seconds,  with ghc = 242 seconds
14:29:47 <debug> jlouis: so it was the other way around
14:30:30 <hdaume> debug: what program is this?
14:31:01 <debug> a tiny testprogram that creates a ppm image as output
14:31:06 <hdaume> ah
14:32:02 <Igloo> Is that your raytracer?
14:32:03 <jlouis> debug: hmm, and you enabled optimizations?
14:32:28 <hdaume> debug: what about nhc?  :)
14:33:04 <debug> I have no idea what optimizations are available, and I've never heard of nhc :)
14:33:15 <jlouis> -O and friends
14:33:17 <debug> Igloo: the quick-hack thingy, yes
14:33:41 <debug> the ghc version crashed and wanted me to use -RTS, so I did that
14:34:02 <jlouis> hmm, I am not coding in Haskell at a daily basis
14:34:07 <Igloo> It's the bit inside +RTS and -RTS that is important
14:34:16 <debug> +RTS perhaps
14:34:16 <debug> :)
14:34:23 <debug> hm
14:34:32 <Igloo> If hbc is faster with -O too then can I have a copy please?
14:34:55 <Igloo> +RTS doesn't actually do anything, it just says that what follows are runtime system options
14:35:16 * hdaume too
14:38:03 <debug> ok :)
14:38:17 * hdaume is off to a talk
14:38:30 <Igloo> Enjoy!
14:38:43 <debug> have a nice day hdaume
14:41:13 <debug> Igloo: is there -O2 and so on as well?
14:41:33 <Igloo> Yeah, -O2 is almost the same as -O and I think that's it
14:41:46 * debug will try all 3
14:42:59 <debug> -O2 didn't work
14:43:30 <Igloo> Huh?
14:44:23 <debug> the linker complained
14:44:32 <debug> solaris ld
14:45:02 <jlouis> x86 or sun4u?
14:45:24 <debug> sun4u
14:45:38 <jlouis> interesting
14:47:17 <debug> now:  hbc=30 seconds, hbc-O=17.5 seconds, ghc=53.4 seconds
14:48:23 <Igloo> Can you let me have a copy so I can try?
14:49:01 <debug> in a second
14:49:08 <Igloo> Ta
14:49:28 <Igloo> Oh bother, that won't help without me installing hbc
14:50:01 <debug> :)
14:52:06 <debug> http://www.mdstud.chalmers.se/~md1gavan/z/rt_XXX.hs
16:11:56 <hdaume> hbc only compiles haskell 1.4?!
16:12:57 <Marvin--> it's pretty un-maintained :)
16:15:24 <hdaume> i noticed :)
16:18:37 <Igloo> It does have unicode support, though  :-)
16:39:13 <Vincenz> shapr?
16:54:12 <hdaume> anyone know where i can find a HCL for debian?
17:01:33 <hdaume> nm
18:22:54 <Janni> hi
18:26:45 <Janni> I'm trying to implement a specification which describes a program that among (many) other things has to collect data from the user interactively. but it has "library character" anyway. My problem is, that I want to keep it modular, so the UI can be exchanged, but can I do that best? I thought of importing the UI as a module, but that would be quite strange.
18:27:11 <Janni> s/data/input
18:28:20 <esap> janni: modules work fine. You should define the interface [to the rest of the program].
18:31:54 <Janni> ok. i thought it wasn't common <i know there is a fixed expression "common ...">
18:33:39 <esap> janni: well it's actually just one solution. I think you should consider how much flexibility you need. It's possible to make it very flexible (i.e. you could change the UI at run-time) or less so.
18:34:41 <esap> janni: more flexibility usually translates as "harder to use"
18:35:37 <Janni> no, I don't need that. I only want to faciliate the developement of different UIs while all using the same implementation of the backend.
18:35:50 <Janni> s/while//
18:38:22 <esap> janni: Modules are a good solution then. You can use module aliases for encapsulating the decision what UI to use.
18:42:07 <Janni> ok. thx!
18:55:08 <Janni> hmm. following that specification it would be really practical if I could delcare the constructors of a data type... err... independently, like:
18:55:20 <Janni> data Foo = Bar 1
18:55:23 <Janni> <some code>
18:55:27 <Janni> data Foo = | Bar2
18:55:33 <Janni> s/Bar 1/Bar1
18:56:35 <Janni> thinking about it classes seem to be a better solution...
18:58:33 <esap> janni: constructors are anyway quite dependent on the data type. Use a separate function that you expose. In the manner described in section 5.8 "abstract datatypes" of the H98 report.
18:58:50 <esap> janni: you can use a type class to make splitting the data type easier.
18:59:27 <esap> janni: assuming you can find a good common interface for your types.
19:02:46 <Janni> esap: can you give me a hint on "module aliases". googling for "haskell module-aliases" didn't really give good results
19:03:17 <esap> janni: import qualified A as B
19:03:23 <Janni> thx
19:04:02 <esap> janni: see section 5.3.3 of the report.
20:15:33 * inkedmn is away: drugs
20:27:34 * inkedmn is back (gone 00:12:00)
20:27:47 <mgoetze> wow, that was quick
20:42:57 <inkedmn> heh, just went to the pharmacy to pick up stop-smoking meds for my wife and i
