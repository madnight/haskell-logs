00:24:45 <Marvin--> does anybody know anything about the status of unicode in haskell?
00:26:00 <Pseudonym> Marvin: Haskell supports unicode? :-)
00:26:45 <Pseudonym> I jest.  Chars are bigger than 8 bits long.  That's unicode support, isn't it?
00:26:48 <Pseudonym> :-)
00:27:25 <Marvin--> no :)
00:27:41 <Marvin--> unicode support would at least involve converting to and from utf-8 please :-/
00:29:13 <dennisb> nope
00:29:34 <dennisb> but i've seen some conversion functions written in haskell
00:30:41 <Marvin--> with what types? String -> String? [Word8] -> String?
00:30:54 <dennisb> In one of Tomas Hallgrens projects he had some functions for it, there where some discussion on the haskell mailinglist a year ago and that's where I saw those functions
00:31:03 <dennisb> (not that it would be hard to write yourself)
00:31:32 * dennisb memory is not good enough to remember what projects, but the code was on the web
00:33:01 <dennisb> Marvin--: and you expect me to remember that from just seeing them a year ago but never having used it myself, yea, right :-)
00:33:50 <Marvin--> :P
00:35:53 <Marvin--> putStr could become very complicated with all the unicode involved... If writing to a terminal, convert to terminal charset, if writing to a file...do what, exactly? mod 256?
00:36:20 * Marvin-- goes back to worrying over indexing instead
00:36:25 <earthy> marvin--: that would be extremely stupid.
00:36:47 <Marvin--> earthy: yes
00:36:57 <Marvin--> http://www.haskell.org/hawiki/UnicodePrelude talks about it though
00:37:21 <Marvin--> I think it makes more sense for the application to encode String -> [Word8] and output
00:37:41 <earthy> files would obviously be Unicode in one of the Unicode encodings by default, but have a `field' in the handle to set up different encoding
00:38:21 <Marvin--> I'm not so sure
00:38:26 <earthy> and UTF-8 would be a very sane choice for default encoding
00:38:42 <Marvin--> tell that to traditionalists :P
00:38:56 <Marvin--> I use only UTF-8 these days, but many are stuck on Latin1
00:39:12 <earthy> yes? UTF-8 is more-or-less a direct superset of latin1. ;)
00:39:17 <Marvin--> earthy: do you mean you should pass an argument to openFile or something? Or that it should try to guess the encoding?
00:39:28 <dennisb> Marvin--: alfa can save files in utf-8, there might be some code to steal
00:39:36 <Marvin--> dennisb: nice
00:39:54 <dennisb> (or he just filter it through iconv, but I guess not)
00:39:58 <earthy> marvin--: well, have functions that set up a different encoding on the Handle
00:40:13 <earthy> or maybe have openFileEncoded or something
00:40:19 <Marvin--> dennisb: *shrug* iconv good, iconv is your friend
00:49:40 <Marvin--> how the...
00:49:54 <Marvin--> this is one of the most intricate cases of file corruption that I've seen
00:50:30 <Marvin--> about half of the files on this CD image have had their contents changed to only of NULs, while perfectly keeping the rest of the file system, file names, file sizes, paths, everything...
00:51:27 <andersca> iconv good
00:51:29 <andersca> napster bad
00:52:10 <Marvin--> napster baaaaaaaad
01:03:43 <earthy> marvin--: that is not odd.
01:04:04 <earthy> everything you named but the data in the file is somewhere else on the CD
01:04:56 <earthy> so if everything after say half of the CD is NUL's, you still have a full filesystem with all the metadata
01:04:59 <Marvin--> well, sure, but I looked at the image file with xxd, and the zeroes are in patches here and there
01:05:19 <earthy> owh, that *is* odd. ;)
01:05:36 <Marvin--> yeah, strangest case of file corruption I've seen
01:05:56 <earthy> well, it's obviously corruption at the level of dealing with that image as a filesystem
01:06:24 <Marvin--> which is strange, because it worked for a the guy who made the image, and then he uploaded it to a web server so I could grab it
01:06:51 <earthy> ah. he probably only checked the metadata.
01:08:07 <earthy> (note: there's a reason for md5sum lists on Linux distribution CD's as wel as for the entire image)
01:09:21 <Marvin--> as in, he booted from the CD in vmware and did a test install, and then uploaded it... I still don't see how parts of the file can get corrupted into zeroes while uploading it
01:11:47 <earthy> `interesting'
01:12:07 <earthy> is there a chance he didn't touch the files that were corrupted?
01:13:05 <Pseudonym> Gotta go home.  Bye all.
01:13:23 <Marvin--> earthy: while doing the test install? No chance at all, basically all the most important files were zeroes
01:26:38 <earthy> oddddd.
01:27:09 <Marvin--> very
01:27:18 <Marvin--> but he uploaded a new version that works
04:44:06 <alanl> hello
04:46:35 <earthy> morning alan
04:47:01 <alanl> its more like evening here
04:47:55 <earthy> it's always morning somewhere, so `morning' has become a bit of a standard default greeting for me, no matter what the time of day. ;)
04:53:55 <Marvin--> well, there's always the "g'maen" greeting...
04:54:09 <Marvin--> (good morning-afternoon-evening-night)
04:54:41 <alanl> oh.....
04:55:00 <alanl> are there any ground breaking new features in ghc6?
04:55:11 <Arnia> In cas you don't catch us later?
07:39:35 <hdaume> hi all
07:40:02 <Marvin--> hi hal
07:40:40 <Marvin--> I don't quite understand why you'd try to pass an int* to a function taking a FILE*
07:42:50 <hdaume> Marvin--: cuz i was being stupid :)
07:44:21 <Marvin--> hdaume: oh :)
08:07:08 <Igloo> Marvin, you live in Sweden, right?
08:08:02 <Marvin--> Igloo: aye
08:08:35 <Igloo> How much would you guess someone without cooking facilities would spend on food over 5 days?
08:10:34 <Marvin--> er, that depends wildly on what you want to eat...
08:11:18 <Marvin--> I mean, do you expect to eat at restaurants for lunch and dinner every day? Or do you expect to do simpler things some times?
08:11:40 <Igloo> Oh, I'll just put down £65
08:12:46 <Marvin--> so you've made arrangements for icfp? where are you staying?
08:13:01 <Igloo> I'm just applying for money ATM
08:13:04 <Marvin--> ah
08:13:27 <Marvin--> lunch at restaurant = 50-60 SEK, dinner at restaurant = harder to estimate, but 100+ I guess... depending on how fancy it is
08:13:57 <Marvin--> well, pizza places and the like aren't that much more for dinner than for lunch
08:14:37 <Igloo> Ooops, you get a much smaller number if you specify SEK rather than USD
08:14:48 * Marvin-- is still trying to decide if he should go or not...
08:14:52 <Marvin--> Igloo: ehh?
08:14:59 <Igloo> Looks like £65 is a slight overestimate if anything, so I'll just go with that as I'll have to be converting money anyawy
08:15:26 <Marvin--> nod
08:15:30 <Igloo> Marvin: I was using http://www.xe.com/ucc/ but I still had USD as the from currency from getting the conference prices
08:15:57 <Marvin--> I'm not following...
08:16:02 <Igloo> I had a "WTF?" second as it told me I'd spend £460 on food
08:16:08 <Marvin--> oh, heh
08:16:27 <Heffalump> I'd imagine the conference will provide lunch.
08:16:32 <Heffalump> Though the website may make this clear
08:17:07 <Marvin--> I still haven't understood what website to look at, there seem to be several, and neither of them containing all that much interesting info
08:17:50 <Igloo> What sort of info do you want?
08:17:57 <Igloo> http://www.it.uu.se/pli03/ is the one for accomodation, travel etc
08:21:05 <Marvin--> oh dear, $270 for icfp + hw
08:21:33 <Marvin--> and that's if I can get an acm student membership before July 30
08:22:09 <Smerdyakov> Oh my. I should get an ACM membership, too.
08:22:21 <Smerdyakov> I'm not officially a student until August, though.
08:23:26 <Marvin--> I wonder how to prove to them that I'm a student
08:25:55 * Igloo e-mails to see whether you need to be a member of ACM for the student prices
08:27:12 <Marvin--> er, seeing as you have to give them a "student id" I guess you have to
08:27:24 <Marvin--> I can't think of any other "universal" student id to put in that box, can you? :)
08:27:47 <Igloo> Best to check, anyway  :-)
08:28:21 <Marvin--> argh, they have four different "options" too, I hope they are all equivalent in terms of conference discounts
08:28:51 <Marvin--> hmm, maybe I should talk to Koen about this
08:29:32 <Igloo> options?
08:29:37 <Igloo> Oh, for being a student member?
08:29:54 <Marvin--> yeah
08:30:25 <Igloo> URL?
08:30:26 <Marvin--> "Student Portal Package", "Student Print Package", "Student Portal and Print Package", "Student Lite Package"
08:30:34 <Marvin--> https://campus.acm.org/public/quickjoin/qj_control.cfm?form_type=Student
08:31:03 <Marvin--> agh
08:31:18 <Marvin--> I'll look at this later tonight, right now it's time to go home
08:31:53 <Marvin--> travel + conference fee + lodging + food = expensive, maybe too expensive for me :-/
08:32:21 <Marvin--> catch you guys later
08:32:23 <Igloo> Hmm, "Discounted rates to attend ACM conferences" is listed as a reason to join
08:32:55 * Heffalump decides to go to ICFP
08:34:29 <kosmikus> good idea :)
08:35:00 <Igloo> Cool
08:38:09 <kosmikus> Igloo: but you did write a mail to clarify the student question?
08:38:58 <Igloo> Yeah, but I think Marvin is right now
08:42:53 <kosmikus> I'm not so sure, I seem to remember that I passed as a student two years ago in Florence, but I can't find any evidence right now
08:43:13 <kosmikus> but I certainly never have been an ACM member
08:43:20 <Igloo> https://campus.acm.org/public/quickjoin/why_join_stu.cfm is what lists it as an advantage
08:43:26 <kosmikus> yeah
08:43:52 <kosmikus> but OTOH the registration page says:
08:43:54 <kosmikus> ACM or SIGPLAN members must provide their membership numbers below. Students must provide their student ID numbers.
08:44:10 <kosmikus> Which somehow sounds as if Students would be something different from members.
08:44:20 <Igloo> Yeah, it's all rather strange
08:45:37 <Heffalump> I've always had the impression that Students didn't need to be members.
08:46:41 <kosmikus> do US students, by chance, have a "global" student ID?
08:47:32 <hdaume> kosmikus:no
08:47:46 <Heffalump> even after the Patriot Act? ;-)
08:48:00 <hdaume> :)
09:07:52 <Marvin--> I think I spend too much time and/or money at cardcollector :) I was walking past the entrance to the shop and met one of the clerks, and he said "damn, I was just going out for a smoke, can I help you with anything?"
09:08:01 <Marvin--> so I said "er, thanks, but I was just passing by..."
09:08:36 <Igloo> :-)
09:08:49 <Igloo> A whole shop just for CCs?
09:08:53 <Marvin--> (which I was!)
09:08:58 <Marvin--> yeah
09:09:22 <Igloo> Is it really really tiny or does it have billions of cards?
09:09:29 <Marvin--> both :)
09:09:37 <Igloo> :-)
09:09:44 <Marvin--> no, it's not that tiny, it's room enough to squeeze in four tables filled with card gamers or so
09:10:12 <Marvin--> the guy who runs the shop is a typical collector
09:10:23 <Igloo> All you'd need is one of those phone-box size newspaper selling places
09:10:29 <Marvin--> heh
09:11:07 <Marvin--> fat chance, the counter is something like five meters long, and the entire wall behind it has shelves filled with cards
09:11:36 <Marvin--> and it's not just local, he ship cards abroad too
10:29:45 <hdaume> can someone answer a perl question: i want to run a command (as in `do something`) and treat the output as a file, something like "open F, `do something`; while (<F>) { ... }"...is something like this possible?
10:31:04 * Riastradh hiccups.
10:37:36 <jlouis> hdaume: man perlopentut, you want pipes?
10:38:04 <jlouis> open F "blah |"; while (<F>)
10:38:09 <jlouis> ?
10:39:59 <hdaume> yup, that's it :)
10:46:43 <SyntaxPolice> wow. no one trashed perl...
10:46:50 <jlouis> np, after all you wrote that good Haskell tutorial which had me teared away from SML
10:47:13 <dark> And you repay this by teaching him perl??
10:47:24 * dark bows to SyntaxPolice.
10:47:28 <jlouis> I think Haskell is a nicer language to write programs in. Though cant you have serious space leaks when it is lazy?
10:48:06 <dark> jlouis: The fd leaks tend to overshadow the space leaks :-)
10:48:28 <jlouis> dark: fd == filedescriptor?
10:48:32 <dark> Yeah.
10:48:34 <jlouis> how?
10:48:42 <SyntaxPolice> thanks dark :)
10:49:31 <dark> jlouis: The standard file-reading functions are lazy.  If you do something that scans a bunch of files, you have to make sure you eat the whole file before going on to the next, otherwise it doesn't get closed.
10:49:44 <jlouis> ah, yes
10:49:47 <jlouis> that explains
10:49:52 <dark> Throwing their contents into a FiniteMap does not work, for example.
10:50:27 <jlouis> you need to explicitly force it to eat the whole file first then, yeah
10:50:31 <dark> What I like most about Haskell is its type system.  The lazyness is sometimes a cause of frustration, but the type system never is :)
10:50:49 <jlouis> Hindley-Milner type inference is nice, yes
10:51:02 <Riastradh> With -fglasgow-exts, or the ordinary Haskell 98 type system?
10:51:12 <hdaume> the moral: don't use the lazy IO functions :)
10:51:21 <dark> hdaume: But they're _standard_ :)
10:51:24 <jlouis> hdaume: heh ;)
10:51:30 <hdaume> dark: which is terrible!
10:51:38 <hdaume> :)
10:51:41 <dark> Riastradh: Haskell98, mostly.
10:51:54 <dark> I tend not to do dodgy things with type classes.
10:52:03 <jlouis> -fglasgow-exts adds existential types, multi parameter type classes (and?)
10:52:06 <Riastradh> But then you don't get rank-n polymorphism, multi-parametre type classes, or fundeps.
10:52:47 <jlouis> rank-n... hmmm is there a paper for that one?
10:52:53 <jlouis> same for fundeps..
10:53:04 <jlouis> the type systems I know does not have such things
10:53:08 <Riastradh> Er, maybe I'm thinking of existential types.  Whatever letting you put 'forall' wherever you like is called.
10:53:08 <dark> And it's not just the type inference, I also like the simple and flexible way of defining types.  It's a breath of fresh air after having to fit your types into the "everything is a pointer" or "everything is a dictionary" models :)
10:53:31 <hdaume> jlouis: yeah, there's Practical type inference for arbitrary rank types
10:53:37 <hdaume> by SPJ and Mark Shields
10:53:44 <hdaume> there's probably a shorter one, too
10:54:25 <Riastradh> Fundeps (functional dependencies) lets you state that in a multi-parametre type class, one of the parametres can be determined from the others, so that the parametre determined by the others can, for example, be the return value and none of the arguments of one of the methods.
10:54:30 <Riastradh> e.g.:
10:54:45 <Riastradh> class Mul a b c | a b -> c where -- c is determined from a and b
10:54:53 <Riastradh>     (*) :: a -> b -> c
10:55:06 <Riastradh> I think that's the right syntax.
10:55:20 <dark> Hmm, but _how_ is c determined?
10:55:50 <jlouis> I think the hawiki has a good example in which they use that for vectors
10:56:02 <Riastradh> instance Mul Matrix Matrix Vector where -- if foo :: Matrix and bar :: Matrix, then (foo * bar) :: Vector.
10:56:26 <dark> Riastradh: Aha, so you just declare it there.
10:57:01 * SyntaxPolice pasts Riastradh's explanation into HaWiki
10:57:05 <dark> Riastradh: And the difference is that the compiler now knows there cannot be any other Matrix Matrix c instance?
10:57:27 <Riastradh> Yes -- you can't later define:  instance Matrix Matrix Matrix where   or something.
10:58:28 <Riastradh> SyntaxPolice, er, the FunDeps Wiki page is where I figured it out from, and where I got the example from.
10:59:25 <hdaume> is anyone familiar enough with Lang.H.Syntax to tell me what the arguments to 'HsImportDecl SrcLoc Module Bool (Maybe Module) (Maybe (Bool, [HsImportSpec]))' are ?
10:59:34 <SyntaxPolice> Riastradh: but the page was lacking a little explanation at the top
11:46:20 <SyntaxPolice> OK arrow question...
11:46:30 <SyntaxPolice> I have two different versions of Eval (from Hughes paper)
11:46:35 <SyntaxPolice> evalM :: (Monad m) => Exp -> Env -> m Val
11:46:35 <SyntaxPolice> evalM (Var s) env = return $ (unsafeLookupFM s env)
11:46:35 <SyntaxPolice> evalM (Add e1 e2) env = liftM2 add (evalM e1 env) (evalM e2 env)
11:46:35 <SyntaxPolice> evalA :: (Arrow a) => Exp -> a Env Val
11:46:39 <SyntaxPolice> evalA (Var s) = arr $ unsafeLookupFM s
11:46:42 <SyntaxPolice> evalA (Add e1 e2) = liftA2 add (evalA e1) (evalA e2)
11:46:45 <SyntaxPolice> now for evalM, I can write a main like so:
11:46:47 <SyntaxPolice> main :: IO ()
11:46:52 <SyntaxPolice> main = do v <- evalM (Var "foo") toyEnv
11:46:52 <SyntaxPolice> 	  putStrLn $ show v
11:47:03 <SyntaxPolice> but how do I "get the answer" from an arrow? how do I write main for evalA?
11:47:19 <SyntaxPolice> (answer can use arrowp too :)
12:04:40 <Igloo> Has anyone got e-mail addresses for Marvin and Kosmikus handy?
12:06:02 <SyntaxPolice> sorry igloo, I left half my brain at home (my laptop)
12:06:43 <Igloo> :-)
12:07:01 <Igloo> Oh, and if anyone else wants a copy of the reply about student rate for PLI, let me know
12:13:46 <Heffalump> what was the reply?
12:13:51 <SyntaxPolice> monk (www.syntaxpolice.org) has been up & down, there might be some interruption in haskell-experimental service (I hope not!) we're replacing more hardware.
12:14:50 <SyntaxPolice> for some reason, there are a lot of russians sending spam to syntaxpolice.org with random dictionary words as the username
12:15:20 <Igloo> "If you are a full time student, you may register at the student rate." is the first line and the gist of it
12:15:25 <Heffalump> cool.
12:23:57 <SyntaxPolice> answer to my question: mainA = let (Num v) = evalA (Var "foo") toyEnv
12:23:58 <SyntaxPolice> 	    in putStrLn $ show v
12:40:03 <jlouis> Mark P. Jones had a nice paper about FunDeps. Now I know how they work and I must say it is good stuff. I have a couple of times missed exactly that in the type system when having multi-parameter type classes (which you have when you are creating data structures)
14:01:04 <tims> Does anyone know of a good reference for learning how to design large systems in a functional programming language?
14:04:01 <tims> I'm especially interested in the organization and management of large/complex data structures (e.g. modelling a large domain).
14:08:51 <jlouis> tims: on a meta-level of abstraction or on a direct level of abstraction?
14:09:44 <tims> jlouis: Sorry.  I don't understand those terms.
14:13:46 <tims> Assumption: A function that sets a Person's name has to create a new Person with the old person's attributes but with the new name.  If that assumption is correct, does that method of changing data scale up to complex/large data structures?
14:15:41 <tims> For example, in a system that models a company, do I have to create a new Company value just to change the janitor's mailing address?
14:16:36 <dark> tims: Yes.
14:17:05 <dark> tims: The "create" part is pretty much invisible, though, and ghc can often figure out that it can update in place.
14:17:36 <tims> dark: ahhh.  thanks!
14:18:40 <dark> Even when it can't, though, it's not much overhead.  Haskell records tend not to be huge, because they get unwieldy if they have lots of fields.  So you split them up, which means not much copying is needed to reach the root.
14:19:18 <dark> And because the copying is lazy, you can usually arrange it so that only one copy is made when you change lots of addresses.
14:20:09 <tims> dark: Do you know of a reference where I can learn more about what you're talking about?
14:20:29 <tims> dark: You've been very helpful.  Thanks.
14:22:02 <dark> tims: I don't have anything that addresses your topic directly, but try following the Christ Okasaki link ("Purely Functional Data Structures") from http://members.optusnet.com.au/clausen/books.html
14:23:13 <dark> tims: That's all about how to get the most out of lazy data structures.  It's fairly low level (lists and trees), but the concepts should apply generally.
14:23:18 <tims> dark: thanks!
14:23:41 <dark> tims: Glad to help :)
14:28:26 <Igloo> Any HOpenGL folk around?
14:37:10 <Igloo> Ah, never mind
14:59:02 * jlouis is having fun with Parsec
15:50:31 <guilhas> hey there! does anyone here own a apple mac? I'm having trouble finding hskll libs that work with mac os x; including graphic libraries. Is there any site that talks about mac os/haskell?
15:50:59 <Riastradh> There's 'HOC,' an Objective-C binding for Haskell, which lets you use Cocoa.
15:51:02 <Igloo> Woohoo! Rotatey Haskell OpenGL cube!
15:51:15 <Riastradh> It runs on GHC, which has a binary for OS X.
15:51:39 <hdaume> does anyone know where a testsuite for weird import/export rules hides (perhaps on cvs?)
15:51:59 <Igloo> Have you tried looking in GHC's test-suite?
15:52:08 <guilhas> that is good knews, Riastradh! Have you tried it yet?
15:52:12 <hdaume> Igloo: i'm looking, but can't find anything specifically for that
15:52:33 * Igloo doesn't know if such a thing actually exists, sorry
15:53:00 <Heffalump> DYM as in bits of Haskell that do weird things with module import and exports?
15:53:18 * Riastradh has never tried HOC, but he does run both GHC and Hugs on his iMac.
15:53:24 <hdaume> just complicated uses of the import export rules
15:54:00 <Heffalump> you could try looking at thingummy's work. Guy at OGI. Formally specified the module system.
15:54:50 <hdaume> ah, i found a bunch :)   fptools/testsuite/tests/ghc-regress/module :)
15:55:22 <Igloo> Wow, my rotatey cube uses less CPU time than my bash processes that aren't doing anything. Haskell must be super-efficient  :-)
15:55:28 <Heffalump> Diatchki.
15:56:59 <phubuh> Igloo: I'll bet your puny ps(1) doesn't measure GPU time :-)
15:57:38 <Igloo> :-)
15:58:01 <phubuh> That would make an interesting patch.
18:32:11 <Texass> hey
18:33:59 <Texass> erm... anybody in here that's not sleeping?
18:34:01 <Texass> ;)
18:34:07 <Heffalump> me, but I should be.
18:34:12 <Texass> lol
18:34:16 <Texass> i know the feeling
18:34:31 <Texass> i need some help
18:34:38 <Heffalump> I'll try if it's quick
18:34:47 <Texass> it might not b quick
18:34:53 <Texass> i'm still a very newb at haskell
18:35:17 <Texass> thanx anyway
18:35:19 <Riastradh> Just ask your question.
18:35:20 <Heffalump> well, ask the question and then we'll see :-)
18:35:28 <Texass> woah, more life
18:35:29 <Riastradh> Don't ask if you can or if anyone will respond.
18:35:51 <Texass> ok, sorry
18:35:54 <Texass> myu question
18:36:10 <Texass> i have this code that checks a string
18:36:24 <Texass> now, i have an external text file with lot's of lines of strings
18:37:02 <Texass> i want to be able to read a line of text, run it through the rest of the program, and if it comes back with a certain result, i want it to continue with the next line from the text file
18:37:20 <Texass> i managed to get the app to read the first line of text from the file
18:37:37 <Texass> but i can't seem to figure out how to pass that value to a certain part of the code
18:37:49 <Riastradh> Paste your code to some pasting service (e.g., do '/whois darwinpaste' and paste to the URI shown).
18:37:50 <Heffalump> http://www.haskell.org/hawiki/ThatAnnoyingIoType might help
18:37:57 <Texass> i must warn thought hat i only started with haskell a week ago and is very much a newbie
18:38:09 <Riastradh> OK, if you just started, I warn you not to try to do IO.
18:38:13 <Strike> heh
18:38:18 * Strike agrees
18:38:34 <Texass> heh, i know
18:38:47 <Riastradh> Don't do IO until you understand monads.  Many here will argue that you don't need to understand monads to do IO, which is true, but nevertheless your Haskell IO life will be much easier with a good understanding of monads.
18:38:51 <Texass> haskell is a very different way of thinking than what i'm used to
18:39:01 <Riastradh> Before you even try to understand monads, make sure you understand the more basic concepts in Haskell.
18:40:03 <Texass> i'm working through a couple of tuts, the last being one called "yet another haskell tutorial" by hal daume III
18:40:13 <Texass> i must say it helped me a lot
18:40:24 <Riastradh> @fact monads
18:40:32 * Riastradh curses at the absent lambdabot.
18:40:33 <Strike> Texass: yeah, that's a good tutorial
18:40:40 <Strike> the author also hangs out in here sometimes :)
18:40:55 <Riastradh> Google for 'What the Hell are Monads?' if you find that hdaume's tutorial doesn't explain them well enough.
18:41:07 <Texass> kewl
18:41:14 <Texass> thanx
18:42:00 <Texass> i'm starting with the interactivity bit and do-notations and it's been going pretty ok until now
18:42:05 <Texass> but i know i have along road ahead
18:42:15 <Texass> thanx for the link
18:42:18 <Texass> it looks promising
18:43:07 <Texass> now i've got lots of reading to do so i'm gonna be off. i'll definitely pop in again if i have a question
18:43:09 <Riastradh> Come back here if you have any questions at all.
18:43:12 <Texass> u guys r very helpful
18:43:13 <Riastradh> Heh.
18:43:20 <Texass> thanx Riastradh
18:43:29 <Texass> cheers
