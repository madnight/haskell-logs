06:50:57 <jlouis> is there a sign function in the libraries?
06:51:16 <jlouis> or should I define it myself (it is trivially a guard and nothing more)
06:52:29 <Igloo> signum
06:52:36 <jlouis> ah, thanks
09:02:10 * syntax-laptop dances around
09:02:22 <Arnia> Happy?
09:02:47 <syntax-laptop> usually :()
09:02:51 <syntax-laptop> er :)
09:56:51 <jlouis> Is there any logical and function of type Bool -> Bool -> Bool?
09:56:58 <jlouis> or operator
09:57:37 <Heffalump> &&
09:58:38 <jlouis> thanks
09:59:06 <jlouis> I stared at and, but that is [Bool] -> Bool
09:59:40 <Heffalump> yes, that's foldr (&&) True
10:05:28 <jlouis> makes perfoct sense
10:05:41 <jlouis> Trying to learn Haskell
10:05:50 <jlouis> having fun with writing a RayTracer
10:07:33 <syntax-laptop> or foldr1 (&&), right?
10:07:45 <Rafterman> jlouis: http://www.cse.unsw.edu.au/~cgray/banky/
10:07:52 <Rafterman> something a friend of mine did
10:08:00 <Igloo> No - consider the case where the argument is []
10:08:14 <Rafterman> I have nfi what status it's currently at, but it's a ray tracer in haskell :)
10:09:17 <syntax-laptop> Igloo: ah, I see
10:15:12 <ddarius> The raytracer that the Galois Connections team wrote for one of the ICFP contests is in the nofib testsuite in fptools.
10:30:38 <ddarius> any reason why Rational isn't an instance of Typeable
10:38:17 <Smerdyakov> Yes; if the compiler could decide whether or not something is rational, then it could discover how to escape from your computer and terrorize the villagers.
10:47:00 <Heffalump> :-)
11:29:42 <syntax-laptop> template haskell question:
11:29:57 <syntax-laptop> I can use arch to bring gener1 or gener2 into scope
11:30:03 <syntax-laptop> but I can't figure out how to use arch' the same way:
11:30:12 <syntax-laptop> hasMain = True
11:30:12 <syntax-laptop> arch :: Q [Dec]
11:30:12 <syntax-laptop> arch = returnQ [ if not hasMain
11:30:12 <syntax-laptop>                  then Fun "gener1'" [Clause [] (Normal (Lit $ Integer 4) ) []]
11:30:13 <syntax-laptop> 		 else Fun "gener2" [Clause [] (Normal (Lit $ Integer 5) ) []] ]
11:30:17 <syntax-laptop> arch' :: DecQ
11:30:19 <syntax-laptop> arch' = if not hasMain
11:30:21 <syntax-laptop>         then fun "gener3" [clause [] (normal [| putStrLn "Hello World" |]) []]
11:30:23 <syntax-laptop> 	else fun "gener4" [clause [] (normal [| \x -> x + 1 |]) []]
11:30:38 <syntax-laptop> I want to use the quasi-quote syntax, which is why I want to use the arch' style
11:31:00 <syntax-laptop> any suggestions?
11:34:21 <Igloo> What goes wrong?
11:34:40 <Igloo> And are gener[12] in scope of arch?
11:34:56 <syntax-laptop> if I use $(arch') in Main (or wherever) I get this type error: 
11:34:56 <syntax-laptop>     Couldn't match
11:34:56 <syntax-laptop> 	`[Language.Haskell.THSyntax.Dec]'
11:34:56 <syntax-laptop> 	against
11:34:56 <syntax-laptop> 	`Language.Haskell.THSyntax.Dec'
11:34:57 <syntax-laptop> 	Expected type: Language.Haskell.THSyntax.Q
11:34:59 <syntax-laptop> 			   [Language.Haskell.THSyntax.Dec]
11:35:01 <syntax-laptop> 	Inferred type: Language.Haskell.THSyntax.DecQ
11:35:22 <syntax-laptop> I don't understand your question about gener[1,2]
11:35:37 <syntax-laptop> oh, no, they are in a different scope
11:35:39 <Igloo> Oh, you just need to put it into a list
11:35:46 <Igloo> liftM (\x -> [x])
11:36:45 <syntax-laptop> what needs to go into a list?  To clarify: arch and arch' compile fine, its when I try to use them that the problem happens
11:36:52 <Igloo> Actually, my question didn't make sense - can't you do arch = if not hasMain then [d| gener1 = 4 |] else [d| gener1 = 5 |]?
11:37:17 <Igloo> fun takes whatever it takes and gives yo a Q Dec whereas you need a Q [Dec]
11:40:23 <syntax-laptop> hm. your version of arch does seem to do what I want; but that makes me wonder when do you ever want the DecQ typed functions?
11:40:42 <syntax-laptop> btw, are oyu maintaining the www.h.o/th web page?
11:40:47 <Igloo> For one thing they are used internally by the compiler
11:40:52 <Igloo> Yes
11:41:25 <Igloo> There are also cases where you can't use quasi-quotes, although hopefully the number of cases will drop over time
11:41:26 <syntax-laptop> I've been poking at the wiki page while I've been learning in case you want to use anything there:
11:41:29 <syntax-laptop> http://www.haskell.org/hawiki/TemplateHaskell
11:41:55 <Igloo> Ah, OK, ta
11:42:17 <Igloo> I'll add a link back when I next attack it...mmm, circularity  :-)
11:42:47 <syntax-laptop> hopefully th users can solve the halting problem...
11:42:48 <Igloo> How's the Haskell Debian repository going, BTW?
11:43:08 <syntax-laptop> hm. that would be a good thing to work on today if I ever get done messing with th
11:43:16 <Igloo> :-)
11:44:12 * Igloo has done some good bug squashing this weekend  :-)
11:44:37 <syntax-laptop> I picture the documentation + ghc + th web page + wiki page will eventually become self-aware and email itself to my cell phone...
11:45:30 <syntax-laptop> what did you squash bugs in?
11:45:58 * Heffalump doesn't think changing a build-dep on flex to one on old-flex is a good bug squash.
11:46:22 <Heffalump> Nice quick hacky fix, yes. Good, no. :-)
11:46:42 <syntax-laptop> so is there a way in TH to ask "is function "main" in scope?"
11:46:42 <Igloo> Tonight I'll be uploading a bug-free haskell98-report with FFI+HM docs, uploaded ghc5 which probably has working hopengl (and other bugs fixed) and ghc6 with the same will be uploaded when I'm convinced it's got into testing
11:47:07 <syntax-laptop> ah, I see why you're asking about the haskell-experamental repo :)
11:48:15 <Igloo> Heff: No pressing need to patch it to work with the latest flex
11:48:26 <Heffalump> surely they intend to remove old-flex, though?
11:48:27 <Igloo> syn: No
11:48:59 <Igloo> Not in the near future, possibly not ever. I can't remember the discussions exactly
11:49:24 <Igloo> But I think the change is away from the lex standard
11:49:28 <Heffalump> ah.
11:49:34 <Heffalump> ok, then :-)
12:29:42 * syntax-laptop drinks tea
12:34:00 <Riastradh> It's too hot.
