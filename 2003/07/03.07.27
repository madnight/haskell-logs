02:59:10 <acinom> hi
03:00:47 <acinom> How could I get an Integer from a CInt type ? or Where can I get information to do that type conversion ?
03:55:56 <pesco> acinom: fromIntegral
06:54:02 <elmex> cool, programming a wildcard matching algo with haskell is easy...
06:59:26 <reffie> why?
06:59:59 <elmex> i would never thought i would get that... i never wrote any, thought of it as an hard task... but somehow i solved it ;)
07:00:44 <reffie> how?
07:05:52 <elmex> duno, just thought about it and played around 
07:56:16 <lilith> window 9
07:56:25 <lilith> opps
08:20:07 <reffie> :)
09:17:42 * Arnia boings
09:36:24 <Heffalump> hmm, no shapr all day
09:38:48 <Arnia> I should boing for him then
09:45:32 <reffie> boing?
09:45:42 * phubuh bounces around
09:45:44 * esap blinks.
09:46:18 * Arnia boings many times
09:46:35 * esap blinks furiously.
09:48:39 <Arnia> Just built a new skin for my business site in under three hours.
09:48:42 <Arnia> I'm celebrating :)
09:50:48 <Smerdyakov> You should be anti-celebrating because you are in the business world. :P
09:51:17 <esap> Business world is not that bad if you just look it from a distance.
09:51:52 <Smerdyakov> If Arnia manages to do that while having a business site, then I am impressed.
09:52:22 <Arnia> Hey, I'm a socialist. I'm just living within a capitalist society and so there is no point pretending I'm not. The internals of the business are very socialist.
09:52:39 <reffie> heh.
09:54:22 <Arnia> I'm a utilitarianist. I choose the system that works best in the circumstances ;)
09:55:00 <Smerdyakov> What's the business?
09:55:27 * esap is a book-realist. I choose the system that is closest to being mathematically correct. 
09:57:24 <Arnia> Capitalism inevitably loses money (it doesn't conserve it), communism is impossible due to money flocking and socialism could work, if people stopped being so self-centred. The nett effect, no system works ;)
09:57:30 <Arnia> www.netalleynetworks.com
09:57:49 <Arnia> At least no system works on a global scale... *shrugs*
09:58:58 <Smerdyakov> norpan, it's easy for people not to be "self-centered" in a way that makes socialism impossible if these people are raised properly.
09:59:13 <Smerdyakov> Hm, it nick-completed "No," to "norpan," :D
10:01:37 <Arnia> Self-centredness is human. Its effects can be minimised however if the communities are kept small (so that self-centred interests are still close to the community interests) I disagree with large systems of millions of people.
10:02:34 <Smerdyakov> I think enlightened people see that behaving in a "self-centered" way naturally leads to supporting the wellfare of communities to which you belong, all the way up to the largest scale.
10:03:25 <Smerdyakov> "Because two heads are better than one"
10:03:29 <Arnia> In which case you'll still have to face the problem that most people won't be 'enlightened' at all times and so the system will still fail.
10:03:42 <Smerdyakov> I think people can be raised to be enlightened.
10:03:54 <Arnia> Its no good planning a system on an ideal circumstance, when that circumstance will be near impossible to achieve or maintain
10:04:13 <Smerdyakov> I claim that this state of enlightenment is natural for people, and it is just the lingering influence of cultural trends that turns them away from it.
10:05:36 <stratocaster> Hi. Is there a way to force the evaluation of a non IO type function in main? For profiling a couple functions I wrote. I know I can do it with print (func args), but then the printing obscures the profiling info.
10:05:44 <Arnia> No... humans are a competitative species that has a naturally hierarchial social structure involving powerplays to get to the top. That's very selfish, but its what we have to work with.
10:05:49 <pesco> lol
10:06:08 <pesco> stratocaster: There you have it. Forget it. :)
10:06:26 <Arnia> Functional Programming meets Socio-political argument ;)
10:06:29 <pesco> stratocaster: (Try seq)
10:07:01 <stratocaster> yea, I've tried it, must not be using it right, because I get type errors
10:07:50 <Heffalump> you probably actually want deepSeq, anyway
10:08:09 <Heffalump> http://www.haskell.org/pipermail/haskell/2001-August/007712.html
10:09:18 <stratocaster> that looks good. Is there somehow I can "wrap" the function in IO? Won't the compiler complain otherwise?
10:09:42 <Heffalump> possibly using liftM, depending on what you want to do
10:12:23 <Smerdyakov> Arnia, I think that humans at a low level of consciousness may behave that way, but not people at higher levels. I also think that simple educational practices can help all children reach that higher level.
10:14:18 <Heffalump> oh, can you use guards in case expressions?
10:14:56 * Smerdyakov trots away.
10:15:47 <Igloo> Yes
10:17:32 <Heffalump> cool.
10:18:32 <esap> That must be among the least used facilities of Haskell, though [After default declarations, I guess]
10:19:53 <esap> Oh and n+k patterns, of course.
10:20:02 <Heffalump> I quite often use n+k patterns.
10:20:14 * esap has never found use for n+k patterns.
10:22:28 <esap> Well I also rarely use integers for anything though, so that might explain it.
10:32:41 <jlouis> I dont like n+k patters
10:34:22 <esap> well apparently not many people like them. I've understood they were originally intended for teaching purposes (helping people understand recursion). But I'd say they just point to a misleading (lack of) generality.
10:36:10 <reffie> wht not, jlouis?
10:51:28 <jlouis> reffie: because they are seldomly used it seems and it puts more strain on the compiler since it has to do some substitution. Furthermore it will be limited to at most pressburger arithmetic (I'd think) if someone wanted to elaborate it to include -, *, /, etc
10:51:50 <reffie> i see
10:52:21 <jlouis> Anyway, I do not agree with most of the design choices of Haskell. Yet the language is a darn pretty one for the few implementations of it there exist
10:52:54 <Heffalump> what other design choices do you disagree with, OOI?
10:53:51 <esap> I'd say to be useful, a generalization of n+k patterns should allow any function application to be used as a pattern.
10:55:04 * esap disagrees with how Haskell handles recursion. Not easy to fix though, so understandable.
10:55:14 <Heffalump> that only works for invertible functions
10:56:05 <esap> heffalump: of course. The correct restriction for it is that the function should be invertible.
10:57:19 <esap> heffalump: and of course it requires some mechanism for the compiler to be able to distinguish invertible functions from other functions. But Haskell does have a type system, so why not just extend it to cover that.
10:57:37 <jlouis> Heffalump: indentation specifies scope is another one I'd leave out of the language if it were me
10:58:11 <jlouis> though all languages have problems
10:59:38 * esap is designing a language where everything is invertible, including I/O.
10:59:43 <dark> jlouis: That's not really a design problem... you can program with { and ; if you prefer, and then indentation won't matter.
11:01:19 <jlouis> dark: yes, or you could make a more rigid grammar. I think the view of the language in that respect was: In fact we _can_ lex and parse a complex grammar. Lets hope that give added readability for the code
11:01:29 <dark> esap: I'd like to see you invert const x _ = x  :)
11:01:53 <Heffalump> :-)
11:01:56 <pesco> jlouis: What's your point?
11:02:14 <dark> jlouis: Hmm I don't see any change in rigidity.  The effects of indentation are exactly mappable to use of { and ;, and vice versa.
11:02:23 <esap> dark: the inverse of that is: id_and_bottom x = (x,undefined)
11:03:06 <jlouis> dark: What I am saying is that I like simpler grammars. Haskell does not sport a simple grammar.
11:03:12 <esap> dark: although I think it would need some cocurrying added, but I ignored that as insignificant.
11:03:31 <dark> In fact it wouldn't surprise me if ghc's lexer maps indentation that way before feeding it to the parser :-)
11:03:53 <jlouis> dark: very probable
11:17:41 * esap goes to get a snack.
12:00:12 <Marvin--> hmm, I don't think it's a good sign that evolution and gpg take 49% CPU each
12:13:24 <seth_> Marvin--: that's a fair statement.  :)
12:13:52 <seth_> Marvin--: but the cpu usage in linux is sometimes misleading
12:14:05 <Marvin--> gpg: key 9C04F456: "Martin Sj√∂gren <sjogren@debian.org>" 35 new signatures
12:14:06 <Marvin--> eep
12:14:10 <seth_> some programs eat up cpu but only if nothing else is running.
12:14:12 <Marvin--> seth_: yeah, it calmed down after a minute (!)
12:46:10 <kunphuzil> how do i read this:
12:46:10 <kunphuzil> *** Of type    : (a -> b -> b) -> b -> [a] -> b
12:46:19 <kunphuzil> (that is foldr) 
12:46:49 <hdaume> it's a function which takes three arguments.  the first is a function which takes an element and a value and produces a new value.  the second is an initial value.  the third is a list of elements.  it returns the final value.
12:48:15 <kunphuzil> ah
12:48:32 <hdaume> does that makes sense?  i'm calling 'a's "elements" and 'b's "values"
12:48:45 <kunphuzil> oh ok. you just answered what i was going to ask ;)
12:49:06 <hdaume> i did this because the 'a's are coming from a list and things in a list are often called 'elements' :)
12:52:36 * Marvin-- wonders if his bread is done soon
13:02:41 <kunphuzil> if i wanted to look at how things like foldr were coded, would i look in the prelude?
13:02:50 <hdaume> @prelude foldr
13:02:59 <hdaume> oh, the bot's not here
13:03:01 <hdaume> yes, you would
13:03:15 <kunphuzil> ok
13:03:47 <hdaume> but it's basically:
13:03:51 <hdaume> foldr f z [] = z
13:04:02 <hdaume> foldr f z (x:xs) = x `f` foldr f z xs
13:04:56 <kunphuzil> hmm
13:05:02 <hdaume> basically, it looks at a list as a sequence of conses with an empty list at the end: "a : b : c : []".  it then replaces the "[]" with "z" and the conses (":") with "f").  so foldr f z (a:b:c:[]) ==> (a `f` b `f` c `f` z)
13:05:22 <hdaume> that last line can also be written: f x (foldr f z xs), but i think that makes the correspondence i just wrote less obvious
13:07:11 <Strike> hdaume: that's a cool way to look at it, thanks :)
13:07:17 * Strike goes back into lurk mode
13:10:20 <kunphuzil> how might i write something that does the same as foldr (+) 0 [list] ?
13:10:30 <hdaume> "sum"  :)
13:10:40 <kunphuzil> ah
13:10:44 <kunphuzil> heh
13:11:06 <hdaume> in that case, it replaces the empty list with 0 and the :s with +s.  so you get (a:b:c:[]) ==> a+b+c+0
13:11:41 <kunphuzil> ah
13:11:47 <kunphuzil> heh, def. of sum:
13:11:48 <kunphuzil> sum               = foldl' (+) 0
13:12:07 <hdaume> yeah, that's more efficient in this case
13:12:11 <kunphuzil> hmm, that is much easier than trying to write a whole new function. 
13:12:30 <kunphuzil> i remember reading about that, to create very general functions so you can keep on using them
13:13:05 <hdaume> yup :)
13:26:22 <Igloo> hal, do you have a built sparc/solaris tree? (Or am I confusing you with someone else?)
13:26:29 <Igloo> s/tree/GHC tree/
13:27:00 <hdaume> i do
13:27:22 <Igloo> What does 'grep SIZEOF_VOID_P mk/config.h' say?
13:27:58 <hdaume> 4
13:28:05 <Igloo> Aha, ta
13:28:08 <hdaume> np
13:28:29 <Igloo> Do you understand the machine-specific assembly stuff OOI?
13:28:46 <hdaume> for sparc?
13:29:02 <Igloo> Oh, and can anyone confirm that recent macs are also 32 bit?
13:29:07 <Igloo> Yup
13:29:32 <pesco> All macs up to and including G4 are 32 bit machines.
13:29:48 <pesco> Except for the old 16bitters of course... ;)
13:29:53 <pesco> And 8bitters.
13:29:53 * Igloo is mainly wondering if I'm right in thinking that anything on Linux will be pretty much the same except some have some extra whatsits as described by the as infopages
13:29:55 <hdaume> sparc: eh, sort of...my undergrad compilers class targetted sparc, so i'm vaguely familiar with it...i probably couldn't *write* code by hand tho
13:29:56 <Igloo> Ta, pesco
13:30:24 <Smerdyakov> hdaume, who did you have for the class? :)
13:30:27 <pesco> Igloo: G5 is 64bit as you might know.
13:30:30 <hdaume> Smerdyakov: seth
13:30:38 <Smerdyakov> hdaume, ah. I had Peter Lee.
13:30:44 <hdaume> seth was awesome :)
13:30:52 <Igloo> Ah, hmm
13:30:59 <Smerdyakov> hdaume, were you allowed to write your code in ML?
13:31:05 <hdaume> alas, no :)
13:31:15 <Smerdyakov> Then that voids any advantage, I'd say. :P
13:31:25 <hdaume> but seth gave us almost all of the boilerplate code, so it wasn't bad
13:32:39 <pesco> Igloo: What are you doing OOI? Building GHC 6 on ppc-linux by any chance?
13:33:49 <Igloo> pesco: Right now I'm wondering how it built on anything that isn't either IA 64 or 32-bit, but the answer seems to be that it doesn't  :-)
13:34:24 <Igloo> I'm seeing how far an IA 64 build gets right now, but I hope to get to ppc-linux soon
13:35:56 <pesco> Good, are you aware that I built it 5.04 for ppc-linux?
13:37:12 <pesco> Igloo: I didn't get the runtime linker to work (which is why I wish they'd use dlopen/dlsym) because I appearently didn't understand the docs on how to do PPC relocations right.
13:37:21 <hdaume> in my .cshrc file, i have a line that says "if ($SHLVL > 1) goto SubShell"...sometimes SHLVL isn't defined though, in which case i don't want to go there...how do i check if an env var is defined?
13:38:02 <Igloo> pesco: Did you have to make any changes to the source?
13:38:14 <pesco> Yes.
13:38:23 <Igloo> Hmm, by runtime linker do you mean for ghci?
13:38:28 <pesco> Yes.
13:38:36 <Igloo> Ah - any chance you could send me a diff?
13:38:43 <Igloo> Or did it get merged back in?
13:39:01 * Igloo assumed from the build guide that anything ELF would Just Work
13:39:09 <pesco> No, I did not get to merge it. I was supposed to get CVS access, but the process got stuck somehow and my PowerBook broke.
13:39:23 <Igloo> Ah  :-(
13:39:24 <pesco> Igloo: Oh no. Oh no.
13:39:28 <Igloo> :-)
13:40:04 <pesco> That's why I am seriously interested in the reason why THE HELL they had to do runtime loading themselves.
13:40:29 <pesco> I'm sorry. I'm sure they had reasons. *grumble*
13:41:07 <pesco> Anyway, the problem is that relocations are a major part of the linking process.
13:41:49 <pesco> A relocation is the process of changing a branch instruction in the code somewhere to point to the correct address, once the address becomes known.
13:42:02 <pesco> That is you have to modify the code, thus it's totally platform-dependent.
13:42:14 * Marvin-- sighs at Yet Another case on debian-testing where people use broken inofficial sarge CDs that JUST DON'T WORK DON'T BLAME IT ON ME DAMNIT
13:42:14 <pesco> Or processor-dependent at least.
13:42:26 <Marvin--> (sorry 'bout that)
13:43:01 <pesco> hdaume: re cshrc, here's an ex: if ($?MANPATH == 0) setenv MANPATH
13:44:36 <hdaume> thanks
13:44:57 <Marvin--> csh - the shell with the most broken syntax wins!
13:45:02 <hdaume> :)
13:46:44 <pesco> Igloo: I have sources and binaries for ghc 5.04.3 and a diff, unregisterised hc files for 4.08.2 and a build of those for ppc-linux.
13:47:11 <pesco> the unreg 4.08.2 files and the 5.04.3 ppc-linux binaries are available from the GHC download pages.
13:48:12 <pesco> Oh, and I have a diary of pretty much anything I did to make it run. Including stuff I could have done easier had I known how, but hey.
13:48:23 <pesco> Igloo: Take your order?
13:48:36 <Marvin--> the bread I just made turned out quite okay, hooray :)
13:48:50 <pesco> Homemade bread is tasty.
13:49:06 <Marvin--> well, this was the first time for several years, so :)
13:49:15 <Igloo> pesco: If you could give me the diff and the diary then that would be great - I'm not interested in getting it working so much as making it easy from the sources
13:49:35 <pesco> Ok. Email?
13:49:49 <Igloo> igloo@earth.li
13:49:53 <Igloo> Thanks!
13:49:53 <pesco> Ah, right.
13:50:17 * jao is back (gone for 00:21.43)
13:54:31 <pesco> Igloo: Mail sent. Good luck.
13:55:53 <Igloo> Thanks  :-)
14:11:52 * Igloo watches bazillions of integer constant too large warnings
14:29:46 * Heffalump appears
15:51:22 * Igloo gets the distinct impression that GHC suffers from bitrot on the unusual arches
15:56:49 <Heffalump> strange that...
15:57:04 <Heffalump> it needs something like the Debian auto-builders hammering away at it
15:57:31 <dark> It could, if someone bootstraps the Debian ghc packages for other arches :)
15:57:47 <Igloo> That's exactly what I'm trying to do  :-)
15:58:08 * syntax-laptop cheers for Igloo
15:58:09 <Igloo> I'm rather more tempted by putting ghc-cvs into Debian now
15:58:17 <Igloo> syn: Wait until I have something working  :-)
15:58:21 <Heffalump> into Debian itself? Is that generally done?
15:58:29 <Igloo> It's not unknown
15:58:44 <Heffalump> wouldn't that keep the autobuilders very busy just on GHC?
15:58:51 <dark> There's mozilla-snapshot packages, for example.
15:59:01 <Heffalump> do they ever get into stable?
15:59:02 <Igloo> Good use of resources  :-)
15:59:14 <Igloo> Not sure OTTOMH
15:59:24 <dark> Heffalump: The idea is not to let them get into stable, by filing fake RC bugs on them.  We probably need a better system for that :)
15:59:40 <Igloo> That would stop them getting into testing
15:59:52 <Igloo> For stable it would probably be done manually
16:00:12 <dark> Igloo: testing is supposed to be the staging ground for the next stable.  Anything that shouldn't go into stable shouldn't go into testing.
16:00:26 <Igloo> Hmm, true
17:30:47 <Heffalump> 'lo
17:37:20 <hdaume> anyone have experience with Sockets on Win32?  (i.e., does anyone know whether they work?)
17:37:38 <Heffalump> are you using withSocketsDo?
17:37:53 <hdaume> i haven't actually written anything yet -- i want to make sure they work
17:38:11 <Heffalump> I've not used them, sorry.
17:38:26 <Heffalump> you could see if lambdabot works in Cygwin :-)
17:38:45 <hdaume> okay :)
17:38:54 <hdaume> i'll try something simpler first ;)
17:44:53 <Pseudonym> G'day.
17:46:07 <inkedmn> evenin' :)
