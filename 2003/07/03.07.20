05:38:46 <Heffalump> has anyone made lambdabot work with GHC6?
05:40:12 <Igloo> I thought that's what it is using
05:40:19 <Igloo> But some modules don't work with it
05:47:30 * Heffalump comments out lots of stuff
05:48:21 <esap> Hmm... what is the simplest way to identify a piece of code? That is, I would want to have a data type with an embedded function but which would implement Eq such that no two difference pieces of code would compare equal.
05:48:57 <Heffalump> define the code along with a unique identifier?
05:49:56 <Heffalump> if you want to parametrise the code, then in general it'll be undecidable, though
05:50:04 <esap> Well I considered using Data.Unique, but the piece of data that enables comparison should be serializable.
05:51:03 <esap> OTOH, using newIORef etc. seems a bit overkill.
05:52:41 <esap> Maybe the solution is to first write a version of Data.Unique that supports serialization and then use that.
05:52:45 <Heffalump> I don't see how an IORef would help you.
05:53:25 <Heffalump> aren't these bits of code syntactically mentioned in your source?
05:53:52 <Heffalump> @topic-tell #haskell
05:53:55 <Heffalump> silly bot.
05:54:57 <esap> Hmm.. the context is that I want to fix the code in http://haskell.org/hawiki/ControlOperation. To do this, I need to identify a "target of jump" that can then be passed along and tested when the jump occurs. But I can only pass strings [i.e. everything has to be serializable].
05:57:35 <esap> The idea is that the value put in an object of type Neg a needs to be a piece of code that can identify a single target jump location]
05:58:21 <esap> Currently, I just pass \msg -> CE.throw . CE.IOException . userError $ msg, but this is insufficient, it also needs to identify a specific control operation where to jump.
06:00:29 <Heffalump> hat URL gave me a headache the last time I looked at it :-)
06:00:37 <esap> Hehe :-)
06:02:21 <esap> Tell me if there is something I can do to make it easier to understand.
06:10:45 * Heffalump lol at lambdabot
06:10:54 <Heffalump> (my own copy thereof)
06:11:11 <Heffalump> [14:10] <Heffalump> @topic-tail #haskell
06:11:11 <Heffalump> [14:10] -!- lambdabot changed the topic of #haskell to: []
06:11:20 <Heffalump> 14:10] <Heffalump> @topic-tail #haskell
06:11:32 <Heffalump> [14:10] -!- lambdabot [lambdabot@musketeer.comlab.ox.ac.uk] has quit (Read error to lambdabot[musketeer.comlab.ox.ac.uk]: EOF from client)
06:19:23 <xkb> We want lambdabot back
06:19:55 <Heffalump> oh, *that*'s why he hasn't been responding when I tell him to mess around with the toic :-)
06:31:22 <Igloo> lol
08:26:20 <elmex> Mah Na Mah Na!
08:26:24 <unknownlambda> Dup Di Dup Di Di
10:45:32 <jemfinch> is there a Haskell function that returns a 2-tuple of (quotient, remainder) for a division?
10:46:17 <Heffalump> divMod IIRC
10:46:17 <Strike> divmod
10:46:37 <Strike> with a capital 'm' ;)
10:48:43 * Smerdyakov has discovered CoderForums and seen jemfinch and Strike there. Are you the same people? :)
10:48:52 <Strike> yup
10:48:55 <jemfinch> yeah, we are.
10:49:00 <Strike> hence my just joining #hprog
10:49:09 * Strike just read your intro post
10:49:11 <jemfinch> but I /etc/hosted coderforums to 127.0.0.blah because I don't want to visit there :)
10:49:23 <Strike> yeah, I'm kind of shying away from there as well
10:49:33 <Strike> not a big fan of the owner/admin now
10:50:03 <haskell> Hello.
10:50:09 <Smerdyakov> Oh. It all comes together.
10:50:20 <Heffalump> is that a Mr H.B. Curry? :-)
10:50:30 <haskell> I need some help in debuggin a program
10:51:04 <jemfinch> Smerdyakov: not that the old owner was better.
10:51:12 <jemfinch> I actually got banned for a month or so before he gave up on it.
10:51:15 <Strike> heh
10:51:38 <jemfinch> Smerdyakov: but in its heydey, it wasn't bad.
10:51:44 <Smerdyakov> CoderForums seems to be the best collection of forums for programmers that I've found yet.
10:52:19 <jemfinch> Smerdyakov: have you seen Lambda the Ultimate?
10:52:30 <Strike> a lot of the older posts on there are pretty useful, but not a lot recently has been
10:52:34 <Smerdyakov> jemfinch, yes. Are there fora there?
10:52:56 <jemfinch> Smerdyakov: it's more of a story-oriented place, that's true.
10:53:19 <jemfinch> I guess it's not so much a place to ask questions, but I'll bet we could convince the administrator to add a forum.
10:54:01 <Smerdyakov> jemfinch, though I'm a fan of Good programming languages, I think it's desirable to have a blanket programming forums site that includes Heathen languages as well. :)
10:54:16 <Smerdyakov> jemfinch, and the audience of lambda would certainly lead to restriction to Good languages.
10:55:21 <jemfinch> yeah, that's true.
10:55:34 <jemfinch> the problem with allowing heaten languages is that it allows heaten programmers.
10:55:43 <jemfinch> and heathen programmers ask Stupid Questions.
10:55:52 <jemfinch> :)
10:56:03 <jemfinch> not that Good Programmers don't, but at least they're interesting stupid questions.
10:58:12 <Heffalump> why is Exception not an instance of Error?
10:59:35 <Smerdyakov> Strike, I was browsing some CF archives, and I was surprised to see the site owner mention "business venue."
10:59:46 <Strike> yeah, that struck a chord with me
11:00:19 <Smerdyakov> Of course, I prefer wikis to fora, so any nasty change in a forum doesn't bother me too much. :-)
11:00:37 <Luke_> what's CoderForums got over usenet?
11:01:14 <jemfinch> it's web-based.
11:01:30 <Strike> and hence, more easily accessible from anywhere (generally speaking)
11:01:57 <jemfinch> why can't I access unfoldr?  I thought it was in the Prelude...
11:02:56 <jemfinch> no, it's in List, but not Prelude.
11:02:59 <jemfinch> so how do I import List?
11:03:04 <Riastradh> 'import List'
11:03:17 <jemfinch> but I can't do that at the top level.
11:03:22 <Riastradh> :m +List
11:03:48 <jemfinch> this is for hugs..
11:03:54 <Strike> :l List
11:05:11 <jemfinch> what the heck?
11:05:13 <Strike> or :also List
11:05:20 <Riastradh> :q <ret> ghci <ret> :m +List
11:05:23 <Strike> heh
11:05:30 <jemfinch> I'm using Hugs.
11:05:39 <jemfinch> but anyway, how come when I load List it unloads my previous loads?
11:05:50 <Strike> because you are in a new module
11:06:06 <Strike> so :m ModuleName to switch and then List.unfoldr should be available (I should have said :also List first)
11:07:06 <jemfinch> ok.
11:07:06 <jemfinch> I start hugs.
11:07:21 <jemfinch> I :also List.
11:07:29 <jemfinch> I :l test (I'm loading ./test.hs)
11:07:35 <jemfinch> and then I don't have List.unfoldr
11:07:48 <phubuh> Heffalump: an exception is not necessarily an error
11:08:09 <Strike> jemfinch: it may just be unfoldr
11:08:23 <jemfinch> nope, that doesn't work either.
11:08:29 <Heffalump> phubuh: well, an IOException is
11:08:30 * Strike shrugs
11:08:42 * Riastradh notes his solution will work...
11:08:51 <Smerdyakov> Exceptions can be helpful nonlocal control flow tools.
11:09:09 <jemfinch> Riastradh: ok, that works.
11:09:18 <Smerdyakov> (continuing with phubuh said)
11:10:22 <phubuh> i would say all errors are exceptions, on the other hand
11:11:03 <jemfinch> Riastradh: now how do I load a file of definitions?
11:11:05 <jemfinch> geezle peats.
11:11:09 <jemfinch> this is way too freaking hard.
11:11:17 <phubuh> by the way, unfoldr does exist for me after :also List
11:11:17 <jlouis> Smerdyakov: continuing what you said: Yes, they can be used for implementing the 8th queens problem for instance
11:11:29 <jemfinch> Anyway, strike...
11:11:32 <jemfinch> finished (0, r) = Nothing
11:11:32 <jemfinch> finished (q, r) = Just (r, q)
11:11:32 <jemfinch> divMod16 i = divMod i 16
11:11:51 <Riastradh> :l Foo.hs
11:11:56 <jemfinch> try (if you can get it to work) unfoldr (finished . divMod16) <some number>
11:12:00 <jemfinch> Riastradh: that's what I did, it didn't work.
11:12:18 <Riastradh> You have to do the ':m +List' after the ':l Foo.hs'.
11:12:31 <jemfinch> unless I messed up (and I may have, I didn't get to test it, obviously) it should give the same results as that Scheme code I gave to jamessan.
11:12:51 <jemfinch> Riastradh: I thought Haskell was applicative, shouldn't it be the case that order doesn't matter? ;)
11:12:56 <Strike> that unfoldr ... should be your "aux" ?
11:13:01 <jemfinch> Strike: yeah.
11:13:11 <jemfinch> aux uses the same pattern as unfoldr.
11:13:15 <Strike> ah
11:13:23 <Strike> I'm not so great with list folding yet :)
11:13:25 <jemfinch> Haskell is the only FPL I know that provides unfoldr in the library.
11:13:30 <jemfinch> get used to it, it's great :)
11:13:34 * Riastradh points at SRFI 1.
11:13:46 <Strike> aux = List.unfoldr (finished . divMod16)
11:13:46 <Strike> ^^ so that's the def'n you were looking for?
11:14:07 <Strike> wait .. no, divMod16 is applied to the arg of aux, right
11:14:08 <Strike> ?
11:15:56 <jlouis> not as far as I can see
11:16:33 <Strike> oh, okay
11:17:02 <Strike> *Foo> unfoldr (finished . divMod16) 65536
11:17:03 <Strike> [0,0,0,0]
11:17:45 <jlouis> try 65535 instead
11:18:07 <Strike> *Foo> unfoldr (finished . divMod16) 65535
11:18:07 <Strike> [15,15,15]
11:18:24 <jlouis> works as expected?
11:18:34 <Strike> I think it's leaving something off
11:18:39 <Strike> > (aux 65536 0)
11:18:39 <Strike> (1 0 0 0 0 . 0)
11:18:39 <Strike> > (aux 65535 0)
11:18:39 <Strike> (15 15 15 15 . 0)
11:18:52 <Strike> that's from mzscheme and his original aux function
11:19:08 <Strike> so I think I should be getting [1,0,0,0,0] and [15,15,15,15] instead
11:19:27 <jlouis> yup, could be your finished function does bad things
11:45:43 <jlouis> this is not funny. HSX11-1.00 misses the XChangeWindowAttributes call. I am doomed it seems
11:45:47 * Heffalump looks around for someone that understands lambdabot
11:50:25 * Riastradh might understand lambdabot, but it's been a while since he hacked it.
11:52:33 <Heffalump> I'm trying to catch exceptions in the modules
11:52:53 <Heffalump> if you do @topic-tail when the topic is [], the bot dies, for example
11:53:05 <Riastradh> OK, I haven't a clue, then.
11:53:06 <Heffalump> but I'm obviously misunderstanding something about how it works
11:53:31 <Heffalump> (where it = the main event loop)
12:05:57 <jlouis> can you `catch` an IO IO () from IO () ?
12:06:09 <Heffalump> do what?
12:06:48 <jlouis> if you have an exception, from where can you catch it?
12:06:49 <Heffalump> remember that IO IO () can be made into IO ()
12:07:04 <Heffalump> you can throw exceptions anywhere, but only catch them in IO
12:07:07 <jlouis> yes, I can liftIO, right?
12:07:18 <Heffalump> I think it'll be called join
12:07:23 <Heffalump> or you can write it yourself :
12:07:23 <jlouis> ok
12:07:27 <Heffalump> join c = do c' <- c
12:07:37 <jlouis> heh, but of course
12:07:39 <Heffalump>             c'
12:07:59 <Heffalump> the "category theoretic" formulation of monads has join as one of the primitives instead of bind
12:08:24 <jlouis> liftIO lifts a regular function inside the monad, right?
12:09:07 <Heffalump> nafaicr
12:09:22 <Heffalump> certainly in the code I'm looking at the moment, it lifts from IO a to m a where m is an instance of MonadIO
12:19:24 <jlouis> sarah$ wtf nafaicr
12:19:24 <jlouis> Gee...  I don't know what nafaicr means...
12:19:45 <jlouis> You are not using the general Acronyms I see ;)
12:23:50 <Heffalump> "not as far as I can recall"
12:28:05 <jlouis> ah ;)
13:59:22 <jemfinch> how do I index a string in Haskell?
14:00:05 <Igloo> !!
14:00:16 <Igloo> Like any other sort of list
14:00:23 <jemfinch> yeah, that's what I thought.
14:00:26 <jemfinch> but I got a type error.
14:00:42 <jemfinch> mind if I paste the code?
14:00:51 <jemfinch> it's 3 lines.
14:00:51 <Igloo> Not if it's noly a few lines
14:00:54 <Igloo> Go for it
14:00:54 <jemfinch> toHexChar i = i !! hexchars
14:00:55 <jemfinch>   where
14:00:55 <jemfinch>     hexchars = "0123456789ABCDEF"
14:01:02 <Igloo> Wrong way round
14:01:06 <Igloo> hexchars !! i
14:01:12 <jemfinch> oh, ok.
14:01:20 <Igloo> Prelude> :t (!!)
14:01:20 <Igloo> (!!) :: [a] -> Int -> a
14:01:22 <jemfinch> I suppose that would make more sense :)
14:03:44 * Marvin-- is home, finally
14:04:52 <jlouis> hexchars !! i looks like hexchars[i].. can be used to remember it
14:12:54 <Marvin--> http://ragnarok.marlow.dk/debconf3/
14:13:19 <Marvin--> be jealous of me ;-)
14:13:34 <Marvin--> or something
14:14:46 <Heffalump> which one are you?
14:15:15 <Marvin--> it's a picturemap thingy, find me yourself! ;)
14:15:38 <Heffalump> oh, there's Colin Watson, I didn't recognise him when I was looking through it
14:15:45 <Marvin--> I'm the red-haired guy with an extraordinary silly smile
14:16:03 <Marvin--> you know Colin?
14:16:17 <Heffalump> only vaguely
14:17:06 <Marvin--> he's a nice guy, freely offers whisky for example *g*
14:17:31 <Heffalump> :-)
14:17:50 <dennisb> Heffalump: he is the one with the debian shirt
14:18:01 <jemfinch> Why does the Prelude have unfoldr and not unfoldl?
14:18:13 <dennisb> (or maybe not, i'm not sure what it is on his shirt)
14:18:14 <Marvin--> er, no, I'm not wearing a Debian short on that picture, a lot of others are, though
14:18:20 <jemfinch> unfoldl is even tail recursive, and unfoldr isn't.
14:18:22 <dennisb> Marvin--: what was the joke :-)
14:18:31 <Heffalump> :-)
14:18:33 <Marvin--> dennisb: I know, I'm tired
14:18:33 * Heffalump found him
14:18:35 <dennisb> 50% of the people hade debian shirts
14:19:26 <Marvin--> that many?
14:19:48 <Marvin--> I know that everybody has worn one at some point during the conference, seeing as we were given one ;) but I don't recall that many wearing one today
14:20:05 <dennisb> it looks like a lot of fun
14:20:27 <Marvin--> it was, the conference was fun, but even more fun was debcamp during the whole week
14:21:16 <jemfinch> I've got three functions I want to compose.  Is there any pretty way to do that without parentheses?
14:21:35 <jemfinch> i.e., I need to compose right-associatively.
14:21:41 <jemfinch> f1 . (f2 . f3)
14:22:15 <Heffalump> . is associative
14:22:21 <Smerdyakov> Define your own operator that is left-associative.
14:22:24 <Heffalump> so you shouldn't need any at all
14:22:27 <Smerdyakov> Er right-
14:22:35 <Igloo> Is bdale 12foot tall?
14:22:35 <Smerdyakov> Whichever associativity you need :-)
14:22:48 <Heffalump> but you don't need any for . !
14:22:50 <jemfinch> Heffalump: . is left-associative; without parens f1 . f2 . f3 == (f1 . f2) . f3
14:22:54 <Marvin--> Igloo: heh, no, but he is pretty big :)
14:23:01 <Heffalump> jemfinch: sure, but they're semantically equal
14:23:07 <jemfinch> oh, wait, maybe the type error was coming from something else...
14:23:12 <Heffalump> are you trying to affect operational behaviour?
14:23:40 * Marvin-- met dark yesterday :)
14:23:43 <Igloo> I think I always imagined overfiend as large too, but he looks small there
14:23:55 <Marvin--> Igloo: he's got a ... big ... personality :)
14:23:56 <Heffalump> ((f1 . f2) . f3) x = (f1.f2) (f3 x) = f1 (f2 (f3 x)) = f1 ((f2.f3) x) = (f1 . (f2 . f3)) x
14:28:28 <jemfinch> no one answered my question -- why does the Prelude have unfoldr but not unfoldl?
14:28:58 * Marvin-- is in Debian mode and almost answered "because nobody has bothered to implement it"
14:29:55 <jemfinch> where, I implemented it.
14:30:12 <jemfinch> it's surprising to include the non-tail-recursive version but not the tail-revursive version in a library function.
14:30:35 <jemfinch> especially when foldl is usually so much more useful than foldr.
14:31:17 <Riastradh> unfoldr is the inverse of foldl.
14:31:21 <Heffalump> remember laziness
14:31:35 <Heffalump> you have to make foldl strict for it really to be lazy
14:31:41 <Heffalump> s/lazy/tail-recursive/
14:33:06 <jemfinch> Heffalump: eh, I've pretty much given up on Haskell myself, I was just using some unfolds to show someone else a pattern.
14:33:17 <jemfinch> I still think unfoldl should be there, since I just had to write it.
14:33:53 <Riastradh> Given kons, kar, kdr, kons, knull, and knil, satisfying: 'kons (kar x) (kdr x) = x' and 'knull knil = True', then: 'foldl kons knil (unfoldr knull kar kdr x) = x' and 'unfoldr knull kar kdr (foldl kons knil x) = x'
14:36:00 <Marvin--> Riastradh: would those be the KDE versions of some common list operations I've seen elsewhere?  .-)
14:36:24 <Riastradh> What, from all the K's?
14:37:41 <Marvin--> yeah, don't you know of their silly habit of starting the name of all their applications with K?
14:37:55 <Marvin--> Konqueror, Kmail, Kandalf, Kbabel, ...
14:38:39 * Riastradh has never used KDE.
14:39:10 * haskell loves KDE :D
14:39:42 * Riastradh finds Apple's X11 quite enough for X11 stuff.
14:49:20 * Marvin-- boggles at http://haskell.org/pipermail/glasgow-haskell-users/2003-July/005479.html
14:49:35 <Marvin--> too bad it only got 2.7 in my SpamAssassin config
14:51:05 <jlouis> Marvin--: screams ''We need this working tomorrow and havent looked at the assignment we got yet''
14:52:02 <Marvin--> it screams in general :)
14:54:14 <Igloo> . o O (homeworkassassin?)
14:55:02 <Marvin--> heh
14:55:07 <Marvin--> "An assassin ate my homework!"
14:55:55 <jlouis> one of the better, really. Or ''I had to fight an assassin so I couldnt make homework''
15:22:21 <syntax-laptop> So immagine that you had a Haskell Module which provided functions like "dependancies:: Module -> [Module]" and "installedModules::[Module] -> IO ()" and "defaultCompiler::Compiler -> IO ()" along with related functions. what kind of tools might you build on top of these?
15:22:46 <syntax-laptop> I thought you could build some functionality for an IDE, debuggers could use this information, obviously a build and install system
15:22:56 <Smerdyakov> A spell-checker, so the next version could have dependencies :: Module -> [Module].
15:23:09 <syntax-laptop> happy might use some of this stuff
15:23:20 <Igloo> Smer  :-)
15:23:29 <syntax-laptop> non-haskell programs which want to use haskell tools
15:23:48 <syntax-laptop> a revision control system might want this kind of information... maybe :)
15:24:16 <syntax-laptop> Fortunitely, we have spellCheck:: Smerdyakov -> Word -> SnydeRemark ;)
15:24:36 <Igloo> The problem with IDEs to my mind is getting an editor that feels just like $your_favourite_editor with the additional functionality an IDE should provide
15:25:00 <syntax-laptop> yeah. I agree.  I sorta include emacs under the IDE umbrella
15:25:08 <Riastradh> Igloo, I don't think that would be that hard -- it should be possible to use any editor you want with CORBA or whatever you like bindings.
15:25:49 <Igloo> Riastradh: Bu you need to be able to put little icons in the editor's region, colour the text etc
15:26:25 <syntax-laptop> I was also thinking it would be nice to have a module in haskell which is like the install program in unix, you could use that for a variety of things
15:26:28 <Riastradh> Syntax colouring should be the editors job, and I don't know what you mean by 'little icons in the editor's region.'
15:27:18 <syntax-laptop> in thinking of a haskell-based build & install system, I want to isolate generally useful modules
15:27:59 <Igloo> But my IDE should be able to mark where breakpoints are (OK, doesn't reapply apply to Haskell), highlight syntax errors, have completion for variable names I type (maybe using dropdown lists)
15:28:53 <syntax-laptop> a tags-type program might want to read /etc/haskell/installedHaskellModules.conf 
15:29:32 <Igloo> I guess the way to do it would be to start from an editor, make the keybindings hugely configurable, make it easy to script in any language of your choice and work up from there. But it also has to be fast.
15:31:42 <Igloo> Does anyone know where Chris Okasaki's webpage is?
15:32:04 <Riastradh> Igloo - http://www.google.com/search?q="Chris+Okasaki"
15:32:10 <Smerdyakov> Some US military place
15:32:46 <Smerdyakov> Naval Academy or something
15:33:10 <Igloo> Riastradh: I tried that...
15:33:21 <Smerdyakov> Here's his mailing address, I think: http://www.eecs.usma.edu/Personnel/okasaki/
15:33:36 <Smerdyakov> That might just be all he has for a web site now.
15:34:28 * Igloo can't connect to that
15:34:49 <Igloo> Oh, I can from comlab
15:36:50 <Smerdyakov> Oh, he actually has some more stuff there.
15:37:04 <Smerdyakov> It's just made accessible through tiny buttons at the far right of the screen.
15:40:30 <Igloo> w3m made the links easier to spot  :-)
15:40:31 <Igloo> ta
16:04:14 <phubuh> why is it illegal to use type synonyms in instance declarations?
16:04:37 <phubuh> as in `type Foo = Integer; instance Eq Foo where ...'
16:07:08 <Smerdyakov> Because then you have to decide what to do if there is an instance Eq Integer also.
16:07:10 <Smerdyakov> Which do you use?
16:08:07 <Heffalump> Haskell 98 type synonyms are designed to be translated away almost immediately - almost like C #define
16:09:24 <phubuh> i would expect an instance Eq Integer to be exactly equivalent to an instance Eq Foo
16:09:40 <phubuh> (and created `automatically')
16:09:54 <Smerdyakov> phubuh, hm.. I see your point.
16:21:25 <Igloo> I think it's basically so mistakes are obvious
16:26:44 * syntax-laptop notes that Ross Paterson is the best upstream author ever... he sent me a patch for debian/rules for the newer hugs stuff :)
16:26:59 <syntax-laptop> he reads the bug lists and marks things as fixed in upstream, etc.
16:27:07 <Igloo> Cool
16:42:30 <Heffalump> he's putting a licence on arrowp shortly.
17:02:50 <Igloo> Can someone convert this into Haskell for me please?
17:02:52 <Igloo>     type Rank = int
17:02:52 <Igloo>     datatype Tree = Node of Elem.T * Rank * Tree list
17:02:52 <Igloo>     datatype T = Empty | NonEmpty of Tree
17:03:19 <Riastradh> type Rank = Integer
17:03:34 <Riastradh> data Tree = Node Elem.T Rank [Tree]
17:03:40 <Riastradh> data T = Empty | NonEmpty Tree
17:03:55 <Igloo> What does Elem.T mean?
17:04:03 <Riastradh> It's a qualified name.
17:04:10 <Riastradh> It's the T type in the Elem module.
17:04:24 <Riastradh> This, I presume, is designed for SML's functors.
17:04:30 <Riastradh> Elem would be an argument to a functor.
17:05:06 <Igloo> Oh, I'd forgotten about the header stuff, that might explain it, ta
17:05:15 * Igloo looks at it again
17:05:21 <Igloo> (yes, it is)
17:06:01 <Riastradh> If you like, I could translate the whole thing into Haskell using typeclasses instead of functors -- though you'd need to give me the module stuff, too.
17:06:09 <Igloo> So are the two Ts completely unrelated?
17:06:19 <Riastradh> Yes.
17:06:45 <Igloo> Oh, duh, the reason T doesn't appear elsewhere is that there are no type sigs
17:06:46 <Heffalump> Elem won't necessarily be a functor argument
17:06:49 <Heffalump> it could be any structure
17:06:56 <Riastradh> Heffalump, right, but I'm presuming it is.
17:07:20 <Heffalump> and the absolutely accurate translation would use a tuple not currying for the Node constructor - but SML doesn't have curried constructors so you can't know what would have been written if it did
17:07:32 * Igloo had translated it as data Tree a = Node (Maybe a) Rank [Tree a] and was getting very confused  :-)
17:07:41 <jemfinch> SML doesn't have curried constructors?
17:07:45 <Riastradh> Nope.
17:07:53 * jemfinch thought it did.
17:08:18 <Heffalump> aren't SML's ints the same as Haskell's Ints, roughly?
17:08:32 <Heffalump> i.e. ~32 bits of representation, rather than arbitrary precision
17:08:40 <Smerdyakov> Yes.
17:08:58 * Igloo isn't worried about details (but feel free to discuss them anyway, of course)
17:14:37 <Heffalump> bah, you put us off :-)
17:15:36 <Igloo> :-)
17:16:02 <Igloo> Saved you from discussing Other Languages, you mean  :-)
19:00:12 * Igloo looks blankly at SML stuff and wonders if I used to know how to do this or if ocaml was simpler
19:04:30 <Riastradh> What SML stuff is confusing you?
19:05:28 * Pseudonym doesn't like having to declare mutually recursive functions together
19:05:36 <Pseudonym> SML makes me have to topologically sort my program.
19:05:48 * Riastradh _still_ doesn't understand what topological sorting is.
19:06:00 <Pseudonym> Oh, that's fairly simple.
19:06:15 <Pseudonym> Consider, for the moment, an acyclic graph.
19:06:20 <Riastradh> What's that?
19:06:22 <Pseudonym> i.e. a tree or DAG
19:06:26 <Pseudonym> Oh.
19:06:27 <LoganH> An acyclic directed graph.
19:06:31 <Pseudonym> You know what a graph is?
19:06:32 <Igloo> I want to be able to do something hugs-like (or compiled, I'm not fussy) with final.sml on http://www.eecs.usma.edu/Personnel/okasaki/jfp96/index.html essentially
19:06:37 <Pseudonym> Mathematically speaking?
19:06:51 <Riastradh> Probably not.
19:07:02 <Igloo> I imagine I need to make another .sml with an implementation for ints or something, then it looks like it should be easy enough with mosml
19:07:07 <Pseudonym> Ah.
19:07:09 <LoganH> Riastradh: If you have a system of courses and prerequisites for each course, and no cycles, then a topological sorting is any ordering where no class appears before any of its prerequisites (or its prerequisites' prerequisites and so forth).
19:07:44 <Riastradh> Oh, ok.
19:07:57 <Pseudonym> Riastradh: In the case of SML, what it means is that you have to give the implementation of a function _before_ you use it in a script.
19:07:57 <Riastradh> Igloo, which part of that don't you understand?
19:08:25 <Pseudonym> That's the _implementation_, not just a "forward reference" like in C.
19:08:26 <LoganH> Riastradh: Basically, you find all courses that have no prerequisites, append them to your list (which is empty at first), then remove them, leading to a new set of courses with no prerequisites.
19:08:42 <Pseudonym> And if you have mutually recursive functions, you have to declare them together using a special construct.
19:08:44 <Igloo> Riastradh: I have forgotten all the syntax and don't know exactly what needs to be done  :-)
19:08:46 <LoganH> Er, them remove them from the graph, I mean.
19:08:59 <Igloo> Maybe I'll put it off until I can skim through the users guide
19:09:01 <Riastradh> Igloo, you can't give me any specific things in it you don't understand?
19:09:47 <Pseudonym> Actually, here's an example.
19:09:51 <Pseudonym> http://www.eecs.usma.edu/Personnel/okasaki/jfp96/bootstrap.sml
19:09:58 <Igloo> Riastradh: the functor line and the functino of the signature blocks in the .sig (if that is in fact relevant)
19:10:06 <Pseudonym> If you look down to "insert", you'll see that you have to implement "insert" and "meld" together.
19:10:15 <Igloo> All the actual code I believe I can translate to Haskell easily enough
19:11:01 <Riastradh> Igloo, 'functor Foo (Bar : BAZ) : QUUX = ...' in SML is like 'module Foo (Bar : BAZ) : QUUX = functor ... end' in OCaml
19:11:06 * Igloo thought that bootstrap used one queue to make another one, so wouldn't be useful with making an actual concrete queue
19:11:38 <Pseudonym> Igloo: A lot of this code is already in Edison.
19:11:50 * Igloo is reasonably sure we were never told about functors, so I'll look for a chapter on that in the usersguide when I get a chance
19:12:02 <Riastradh> Instead of doing 'functor Foo (Bar : BAZ) : QUUX', in Haskell, do:  instance Baz bar => Foo bar where ...
19:12:18 <Igloo> Pseud: I don't recall seeing any priority queues in there
19:12:20 <Riastradh> And instead of doing 'signature Quux', do 'class Quux where ...'
19:12:55 <Pseudonym> Actually, I tell a lie.  There is priority queue code in there, but not this.
19:13:43 <Pseudonym> Igloo: There's MinHeap, SkewHeap, LeftistHeap and so on.
19:14:06 <Igloo> Ah, OK
19:14:12 <Igloo> Riastradh: Ah, right, ta
19:14:29 <Pseudonym> Still, if you do translate this to Haskell, please give me a copy.
19:14:34 <Pseudonym> I'll put it in Edison for you. :-)
19:14:55 <Igloo> I believe I have translated it. Now I'm trying to work out why it sometimes doesn't work  :-)
19:15:01 <Pseudonym> Ah. :-)
19:15:22 <Riastradh> Can you show us the Haskell translation?
19:15:38 <Pseudonym> Well if you have a QuickCheck script, I'd like a copy of that too.
19:15:40 <Pseudonym> Unit tests == good
19:15:44 <Pseudonym> :-)
19:15:59 <Igloo> I do
19:16:10 <Pseudonym> So did that give you a repeatable test case?
19:16:23 <Igloo> Riastradh: Errr, OK, hang on a tick - what do you expect to see in it OOI?
19:16:30 <Riastradh> 'OOI?'
19:17:00 <Pseudonym> Igloo: Given enough eyes, all bugs are shallow.  Never pass up an offer from someone else to debug your code.
19:17:28 <Igloo> Pseudonym: Yes, but getting a specification from the paper isn't easy so I want to see if it differs to teh SML first
19:18:07 <Pseudonym> It seems to me that seeing where it fails the normal specification of a priority queue will help.
19:18:23 <Igloo> http://urchin.earth.li/~ian/Foo.hs
19:18:34 <Igloo> Oh, and the failing case is at the top
19:18:49 <Igloo> Oh, no, it's an unhandled case error
19:18:57 <Pseudonym> This is the bootstrapped queue?
19:19:05 <Igloo> It's final.sml
19:19:25 <Riastradh> You should have a PriorityQueue class of which this is an instance.
19:19:58 <Igloo> That's a detail that can be handled later
19:20:05 <Pseudonym> Riastradh: Possibly, possibly not.
19:20:24 <Pseudonym> Edison's approach is to make everything like this an instance of "Collection".
19:20:40 <Pseudonym> Sets, bags and priority queues are all "collections".
19:21:40 <Igloo> mosml quitting before I hit enter is most disconcerting
19:21:59 <Riastradh> Pseudonym, can I acquire a copy of Edison somewhere?
19:22:22 <Pseudonym> Igloo: What goes in that missing case?
19:22:36 <Igloo> Pseudonym: Huh?
19:22:39 <Pseudonym> Is it just this?
19:22:50 <Pseudonym> split (1,zs,ts,[]) = (zs,ts,[])
19:23:23 <Igloo> Before I alter the code I first want to check it's not a translation error
19:23:33 <Pseudonym> Riastradh: An old copy comes with GHC.
19:23:45 <Riastradh> How about a recent copy?
19:24:12 <Pseudonym> Only place to get it at the moment is http://sourceforge.net/projects/hfl
19:24:36 <Pseudonym> I'm actually waiting on the new packaging infrastructure before it's released on the world.
19:25:45 * Riastradh points out SRFI 44 (http://srfi.schemers.org/srfi-44/srfi-44.html) just as something that may be somewhat relevant to Edison.
19:26:05 <Pseudonym> Interesting.
19:26:19 <Pseudonym> Edison's philosophy is a bit like that.
19:26:36 <Pseudonym> Edison has three main abstractions: Collection, Sequence and Association.
19:26:52 <Pseudonym> The idea, though, is that every Collection, for example, has the _same_ functionality.
19:27:10 <Pseudonym> You can, for example, remove the largest element from a min-ordered priority queue.  It's just very inefficient.
19:27:27 <Riastradh> I don't see how sets and bags could work like that, though -- have you seen Oleg's argument against sets being a subtype of bags?
19:27:47 <Pseudonym> No, I haven't.  But Sets are not a subtype of Bags in Edison.
19:27:51 <Pseudonym> They're both subtypes of Collection.
19:28:15 <Riastradh> Well, it's a similar sort of thing...I didn't mean to refer to bags and sets in specific.
19:28:50 <Pseudonym> Sure.
19:29:01 <Riastradh> I'd explain more stuff further but I must depart now...grumble.
19:29:08 <Pseudonym> Bye. :-)
19:30:37 <Pseudonym> Igloo, as a suggestion, I'd use trace-style debugging to see if you can work out where split is being called from.
19:30:49 <Pseudonym> split is called from two places: deleteMin and recursively from split.
19:31:21 <Pseudonym> If you wrap split with a function which does a call to Debug.Trace then calls split proper, that might help.
19:31:28 <Pseudonym> I'd do it myself, but it's lunch time.
19:31:48 * Pseudonym will give it a go when he gets back if you haven't worked it out by then
19:35:43 <Igloo> Pseudonym: I could work out what the Haskell is doing, but that is unlikely to help me understand the problem
19:56:38 <Igloo> Aha
19:56:41 <Igloo> - f(PQ.empty, xs);! Uncaught exception: 
19:56:41 <Igloo> ! Match
19:56:47 <Igloo> Which I think means it broke in the same way
19:57:55 <Igloo> Yup, seems to break in the same place
19:58:11 <Igloo> Which might explain why I couldn't seem to easily spot an invariant in the paper that the code was maintaining  :-)
19:58:56 <Igloo> Right, I should go to bed now. I'll take a look at what's going on and/or e-mail Chris tomorrow I think
20:00:01 <Igloo> (Bah, I *knew* if I mentioned it here I'd end up prodding it until 4am  :-)  )
21:02:49 <Pseudonym> Aha.
21:03:06 <Pseudonym> Igloo's solution is clearly to read the damn paper.
23:32:17 <haskell> Is anyone alive?
23:57:37 * Pseudonym is alive
23:57:58 <Pseudonym> Uhm.
23:58:53 <haskell> Pseudonym, may I pvt you ?
23:58:59 <Pseudonym> OK
23:59:20 <Pseudonym> Sounds kinky.
