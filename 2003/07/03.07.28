01:17:37 <reffie_> does hugs have a lib to do sockets?
01:23:57 <reffie_> i guess not.
01:26:13 <earthy> isn't hugs compatible with the GHC ffi stuff?
01:30:00 <reffie_> ffi?
01:41:00 <Heffalump> the latest version satisfies the FFI spec
01:41:30 <Heffalump> where "latest" may be CVS only
01:42:36 <reffie_> also, isn't it possible to use something like select() on a list of handles?
01:43:17 <reffie_> so that we don't need to use a reader and a write thread?
01:43:53 <reffie_> [in ghc]
01:47:50 <Heffalump> not that I can spot, no
01:48:29 <reffie_> that sucks
01:50:10 <Heffalump> oh, hangon
01:51:33 <Heffalump> module Select in the util package
01:51:42 <Heffalump> it appears not to have moved to the hierarchical libraries yet
01:59:32 <reffie_> mmm
04:29:38 * shapr boings
04:29:47 <shapr> good morning #haskell!
04:30:19 <Heffalump> hiya
04:30:33 <shapr> what's happening?
04:30:42 <Heffalump> I reckon I can check in dynamic loading today.
04:30:50 <shapr> YAY
04:31:07 <Heffalump> polli redid SeenModule
04:31:10 <shapr> spiffy!
04:35:13 <shapr> hi pesco 
04:35:21 <pesco> hi shapr
04:40:54 <shapr> hi AndrewM 
04:45:16 <Heffalump> is that bot up-to-date with CVS?
04:45:47 <shapr> no, but it will be in a moment :-)
04:50:53 <shapr> @yow
04:50:53 <lambdabot> My mind is making ashtrays in Dayton....
04:51:59 <pesco> Hah, sick at home.
04:53:17 <reffie_> @board
04:53:18 <lambdabot> Sorry, I don't know the command "board", try "lambdabot: @listcommands"
04:53:23 <reffie_> mm
04:53:29 <reffie_> @listcommands
04:53:30 <lambdabot> I react to the following commands: ["all-dicts","define","definitions","del-definition","devils","dict","dict-help","dump","easton","echo","elements","eval","fact","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude","quit","reconnect","resume","seen","set-fuel","state","topic-cons","top
04:53:45 <reffie_> too many commands.
04:54:06 <shapr> @listmodules
04:54:07 <lambdabot> I have the following modules installed: ["base","dict","eval","fact","hello","karma","more","quote","seen","state","system","topic","type"]
04:54:08 <reffie_> you should have it split the list
04:54:11 <shapr> @listcommands eval
04:54:11 <lambdabot> Module eval provides the following commands: ["eval","define","get-definition","definitions","del-definition","dump","set-fuel","resume"]
04:54:30 <shapr> reffie: would you like to submit a patch?
04:54:39 <pesco> @listcommands lojban
04:54:39 <lambdabot> No module "lojban" loaded
04:54:41 <reffie> i'd love to
04:54:46 <shapr> yay
04:54:48 <Heffalump> I think lambdabot is getting a bit noisy.
04:54:48 <pesco> er
04:54:49 <shapr> @fact source
04:54:51 <lambdabot> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
04:54:51 <reffie> but i'm still learning haskell :P
04:54:58 <shapr> Heffalump: how so?
04:55:04 <Heffalump> I've found with bots in other places that you need to keep the chatter on public channels to a minimum.
04:55:12 <reffie> yeah
04:55:25 <Heffalump> "I react to the following commands" produces far too much output.
04:55:48 <shapr> you think it should reply privately?
04:56:11 <Heffalump> I think it should say "I respond to 56 commands, please message me this command for the full list", or similar.
04:56:44 <shapr> sounds good to me
05:15:59 <shapr> I think System and Base modules should be merged
05:16:13 <shapr> or at least switch names
05:24:46 <shapr> hej Marvin-- 
05:24:49 <shapr> hur är det med dig?
05:24:50 <Marvin--> hej
05:24:57 <Marvin--> letar efter transliteration-lib...
05:25:11 <shapr> transliteration?
05:25:19 <shapr> för unicode?
05:28:24 <Marvin--> ja
05:28:31 <Marvin--> unicode -> ascii
05:28:34 <shapr> jaså
05:28:45 <shapr> har du provat recode eller transcode i debian?
05:29:15 <shapr> er, inte transcode, det är för DVD
05:45:37 * shapr boings
05:49:44 <shapr> so, anything exciting going on today?
05:54:22 <phubuh> i'm writing an emacsesque operating system for x86 :-)
05:54:27 <shapr> cool!
05:54:37 <shapr> have you heard of vapour OS and miasma?
05:54:45 <phubuh> hmm, nope
05:55:04 <shapr> http://www.accesscom.com/~darius/software/miasma/index.html
05:55:16 <shapr> that may interest you
05:55:52 <phubuh> interesting, thanks!
05:56:58 <phubuh> vapour is very interesting
05:57:32 <phubuh> Vapour-design list run by Zhivago@users.sourceforge.net
05:57:38 <phubuh> i wonder if that's the zhivago from efnet
05:58:00 <shapr> probably so
05:58:12 <shapr> hi syntax-laptop!
05:58:39 <earthy> hm. that vapour stuff is scary.
05:59:01 <earthy> but maybe I'm too paranoid when it comes to running code
05:59:55 <phubuh> yeah, security from evil people, unless something very clever is going on, would be bad
06:00:21 <phubuh> since you can binarily modify the compiled program and make it trash everything
06:00:28 <phubuh> (i assume)
06:00:40 <earthy> my problem with vapour exactly.
06:00:58 <Igloo> shapr, did you want me for anything in particular?
06:01:13 <earthy> phubuh: have you ever seen Jonathan Rees' PhD thesis on a scheme-based `OS'?
06:01:21 <o3_> is vapour a form of proof-carrying code?
06:01:55 <shapr> Igloo: I was trying to figure out where to put --dump-interface=foo so I could get the Binary dumps of the Haddock docs
06:02:08 <phubuh> earthy: i recall reading about the thesis, but i've never read the actual thing. i should!
06:02:44 <shapr> Igloo: I figured a searchable Haddock plugin for lambdabot could be useful
06:03:34 <Igloo> Ah, right. Just on the haddock commandline AFAICS, but I've never tried it.
06:04:16 <shapr> many of the libraries don't parse until after -cpp do you know how to run that part first?
06:05:26 <Igloo> Do those libraries have haddock documentation?
06:06:17 <Igloo> I'd try making a parallel tree with ghc -cpp -E anyway
06:06:22 <Igloo> (a library at a time)
06:06:49 <shapr> I thought the easiest soluton might be to insert --dump-interface=dumpfile into the Haddock docs command for fptools
06:07:06 <Marvin--> shapr: varken recode eller iconv verkar göra vad jag vill
06:07:32 <shapr> tyvarr
06:07:34 <earthy> o3_: not even. it simply is designed to only run code in the HLL accompanying it
06:07:52 <earthy> and the HLL is supposed to disallow unsafe shit
06:08:09 <o3_> earthy: got a URL?
06:08:16 <phubuh> perl -e 'use utf8; use Text::Unidecode; print unidecode ("\x{5317}\x{4EB0}\n")'
06:08:16 <phubuh> :-)
06:08:51 <Marvin--> phubuh: yeah, I know about it
06:09:16 <shapr> Marvin--: varken/heller/eller confuse me, when do I use varken, and when heller?
06:09:44 <Marvin--> shapr: ... another time, I gotta work :)
06:09:47 <shapr> ok
06:10:04 <Igloo> shapr: There already seems to be a "--dump-interface=$(PACKAGE).haddock" in the Makefiles
06:10:33 <Marvin--> phubuh: the trick is to sometimes translate 'ä' to 'ä' and somtimes to 'a', depending on where in our system we are :-/
06:10:42 <shapr> Igloo: where?
06:10:57 <Igloo> mk/package.mk
06:11:11 <shapr> !
06:11:24 <phubuh> i see
06:12:12 <Igloo> Which I think is what gets installed as /usr/share/doc/ghc6-doc/html/base/base.haddock.gz
06:13:35 <shapr> Igloo: yay, many thanks
06:14:07 <Igloo> What format is it supposed to be?
06:14:19 <shapr> the Binary.hs that comes with Haddock I assume
06:14:25 <Igloo> Ah, right
06:14:41 <shapr> I assume it's a collection of Interface saved in that format
06:14:51 <shapr> which is exactly what I want
06:15:13 <shapr> since that would allow searching by type signature, function name, module name, etc
06:15:23 <Igloo> Cool
06:15:41 <shapr> though I need to find some better way of searching than I used in SearchML
06:15:58 <shapr> I should try what Pseudonym suggested
06:26:41 <earthy> o3_: vapour.sf.net
06:28:41 <o3_> earthy: sounds a lot like the mungi project at our uni
06:29:25 <o3_> earthy: http://www.cse.unsw.edu.au/~disy/Mungi/
06:29:50 <phubuh> <phubuh> because i was wondering if there's anything preventing some evil user from compiling a safe program, modifying the binary output to trash the memory, and then running it
06:29:50 <phubuh> <Zhivago> phu: yes, the inabilit to modify the binary output
06:30:16 <phubuh> <Zhivago> phu: there are no interfaces to binary code objects available to users which permit their mutation
06:31:27 <Heffalump> o3_: am I right in saying that if you dynamically load an object file that was also part of your original program, you effectively end up with two copies of the same code?
06:32:06 <o3_> Heffalump: i believe so
06:33:20 <Heffalump> good thing for referential transparency then, otherwise all hell could break loose :-)
06:33:35 <o3_> :)
06:36:08 <earthy> o3_: not quite the same though: Mungi seems to allow arbitrary code to run and enforces secure access to memory
06:36:31 <o3_> earthy: yeah, which is imho a more sane approach
06:36:39 <earthy> whereas vapour seems to only allow code generated from the HLL to run
06:36:45 <earthy> o3_: I agree.
06:37:09 <earthy> Vapour, to me, seems totally inapplicable in a networked world.
06:37:19 <Smerdyakov> earthy, how not?
06:37:44 <earthy> smerdyakov: either 1. it forces all programs to travel over the network in the HLL or 2. it is insecure
06:38:07 <Smerdyakov> Oh, yeah, that's a problem. :-)
06:38:20 <Smerdyakov> Which is why I plan to create a similar OS based on proof-carrying code.
06:38:27 <earthy> (for I *will* fiddle with the bits >:))
06:38:52 <earthy> smerdyakov: admirable! :)
06:39:09 <o3_> Smerdyakov: has Chilli been spreading his propaganda to you again? :)
06:39:43 <Smerdyakov> o3_, no, but I'm planning to do my PhD work under George Necula, starting this fall. :P
06:39:55 * earthy smiles
06:40:02 <earthy> that's going to be your PhD work then?
06:40:06 <Smerdyakov> I don't know.
06:40:07 * earthy is somewhat envious. ;)
06:40:12 <Smerdyakov> It sounds like it might work.
06:40:35 <earthy> it doesn't *seem* impossible, no. ;)
06:40:50 <Smerdyakov> If not (or maybe even if it would), I will do it as a private citizen to avoid sticking all-caps disclaimer notices from the Regents of the University of California in all the code. ;D
06:40:56 <o3_> Smerdyakov: oh, if you don't know, Chilli is working on the SEC project at our uni, which heavily involves PCC
06:41:19 <Smerdyakov> earthy, why do you say it like that?
06:41:58 <SyntaxPolice> mornin'
06:42:17 <earthy> smerdyakov: because it might well turn out to be.
06:42:21 <earthy> `it's not been done before'
06:42:41 <Smerdyakov> earthy, I don't understand. How could it turn out to be impossible?
06:42:44 * Igloo notices the existence of http://www.haskell.org/ghc/download_ghc_601.html and a tarball
06:42:53 <SyntaxPolice> hi shapr!
06:43:24 <o3_> damn, i really really need to fix my build scripts so that i can compile that thing on mac os x again
06:43:41 <Smerdyakov> earthy, maybe it wouldn't meet your standards of quality, but it's pretty clear how to implement it.
06:43:56 <Heffalump> are there any release notes vs 6.0 ?
06:44:00 <earthy> smerdyakov: if you find out that the proofchecker is trivially DoSsed, e.g., the OS is quite unstable, and there is no practical solution that I directly see
06:44:29 <Igloo> No
06:44:55 <earthy> but for a few well-known bugs fixed
06:45:02 <earthy> (see the haskell mailinglist)
06:45:21 <Igloo> But there aren't really many changes that should be noted there
06:45:35 <Smerdyakov> earthy, that is not something that could make it impossible.
06:45:49 <Smerdyakov> earthy, that is a fixable implementation problem you could find and fix along the way.
06:45:59 <earthy> smerdyakov: is it?
06:46:10 <Smerdyakov> earthy, yes.
06:46:23 <earthy> truly fixing Denial of Service problems is *tough*
06:46:51 <Smerdyakov> I've never heard of the term "DoS" applied to "attacks" against a non-networked static analysis tool before.
06:47:09 <Igloo> Hmm, but the tarball was last modified on Friday and I think there have been stable commits since
06:47:32 <Smerdyakov> So, earthy, can you give me some inkling of what you're talking about?
06:48:30 <earthy> smerdyakov: suppose I craft a very small little applet with a pseudo-proof to accompany it that then sends the checker into wild loops trying to see if the two fit together
06:48:56 <earthy> this *will* entail considerable usage of resources, just for checkign
06:49:12 <earthy> and therefore denial of those resources to the stuff that ought to be running
06:49:26 <Smerdyakov> earthy, yes, but you have not made a convincing argument that any proof checker will behave like that on some input.
06:49:34 <earthy> no, I have not.
06:49:46 <earthy> it is one of the problems that might crop up.
06:49:58 <Smerdyakov> Proof checkers tend to be on the order of complexity as type checkers.
06:50:06 <Smerdyakov> One-linear-pass kind of thing, ideally.
06:50:15 <Smerdyakov> Loops shouldn't be involved, as far as proofs can specify.
06:51:06 * earthy remembers a little program flying by on one of the haskell mailing lists due to Ralf Hinze
06:51:18 <earthy> it sent the GHC type checker into orbit
06:51:34 <earthy> due to the combinatorial explosion specified
06:51:59 <Smerdyakov> OK. Is this something relevant to a low-level type system with no type inference?
06:52:26 <earthy> I'd need to chec
06:52:27 <earthy> +k
06:52:35 <earthy> probably not. :)
06:53:01 <Smerdyakov> You have to think of proof-checkers as doing the minimal amount of work possible.
06:53:23 <Smerdyakov> Whenever something would be computationally expensive (i.e., unbounded iteration), the proof has an annotation that lets us skip that part.
06:54:39 <earthy> interesting...
06:54:53 <earthy> and there's no possibility for unsafe stuff to slip by using such annotations?
06:55:12 <Smerdyakov> Not if you implement it correctly, and you chose a reasonable proof language to begin with.
07:00:03 <earthy> well, then it should be possible. ;)
07:01:27 <Marvin--> the dangers of having a test suite is that you only fix bugs until the tests run
07:01:36 <shapr> Marvin--: how so?
07:01:53 <earthy> marvin--: true enough, unless you have someone to actively maintain the test suite.
07:02:18 <shapr> writing tests shows me how my code could be refactored into less code
07:02:38 <shapr> I tend to write my unit tests before I write my code
07:02:57 <shapr> so, step zero, refactor with the new non-existent code in mind
07:03:02 <shapr> step one, write the test
07:03:10 <shapr> step two, write the code that gets the test to pass
07:03:29 <shapr> then refactor again
07:05:26 <earthy> shapr: now, extrapolate that process to a team with a release-schedule...
07:05:36 <dark> shapr: How do you deal with cases where figuring out what the output should be is most of the work?  Then your test is just as likely to be wrong as your code :)
07:05:53 <dark> earthy: That extrapolation is called Extreme Programming :)
07:06:00 <shapr> yes, that's what it's called.
07:06:19 <shapr> dark: depends on the case
07:06:29 <phubuh> just write a unit test for the unit test
07:06:33 <shapr> most of the time I've had access to another program that could be used to prove my output was correct
07:06:36 <phubuh> i made a unit test for my unit test framework once
07:06:54 <dark> Currently I'm working on an online game.  The parts I'm really worried about are: is the code robust against abuse (cheating, spamming)?  Does the output look okay on the average browser?
07:07:01 <dark> I see no way to write test suites for that :)
07:07:04 <earthy> dark: that's only part of it.
07:07:22 <earthy> dark: robustness against abuse can be proven...
07:07:31 <earthy> the looks... you'll have to verify.
07:07:36 <shapr> sometimes it comes down to twenty minutes and a piece of scratch paper to check one or two outputs for correctness, then I stick those outputs in as tests.
07:07:40 <dark> Also, most of the development is simply tweaking the output, and fiddling with the database.  I'd end up just pasting code from the test scripts into the running code.
07:08:04 <shapr> sounds like a case for abstraction
07:08:23 <shapr> anytime I see code duplicated three times, I try to abstract it out
07:08:54 <earthy> why 3?
07:09:17 <shapr> because, I think the full Extreme Programming with no deadline treatment gives you Smalltalk, with fifty zillion three line menthods you have to memorize
07:09:17 <dark> "Once is an accident.  Twice is coincidence.  Three times is enemy action."
07:09:18 <phubuh> http://c2.com/wiki?ThreeStrikes iirc :)
07:09:50 <shapr> deadline with no XP gives you lots of rape'n'paste code
07:10:01 <dark> But yeah... if code hasn't been reused in enough places, then trying to abstract it out gets you a too narrow interface, in my experience.
07:10:06 <shapr> but XP + deadline has more balance
07:10:12 <shapr> yes, exactly
07:10:36 <shapr> so the magic number for me has always been three times
07:12:03 <dark> phubuh: That link doesn't point anywhere useful, and the wiki seems highly resistant to looking up pages by name :)  I'm giving up.
07:12:15 <shapr> wiki does have search by title
07:12:29 <phubuh> http://www.c2.com/cgi/wiki?ThreeStrikesAndYouRefactor
07:13:57 <shapr> personally, I think I would be happiest with the zillion small methods, Smalltalk style 
07:14:21 <shapr> but, in my experience, my coworkers don't have as much stack depth as I do
07:14:43 <shapr> or whatever you call the ability to remember all those zillion names and functions at the same time
07:15:01 <phubuh> i'm terribly cautious with function names
07:15:10 <phubuh> even when i'm pretty certain what the name of one is, i have to look it up
07:15:32 <phubuh> that's why i dig names like "strcpy"
07:15:33 <shapr> so the three times rule makes for larger chunks with more functionality, which is easier to remember
07:15:54 <phubuh> they don't really convey less information than the verboser variants, but they're *very* idiomatic
07:16:11 <shapr> I prefer objectGet 
07:16:26 <phubuh> i guess i find actual names easier to remember than descriptions :-)
07:16:56 <shapr> I prefer nounVerb best so far, though I think there must be something better
07:17:20 <phubuh> yeah, strCpy wouldn't be worse, except for aesthetical reasons :-)
07:19:19 <dark> Hmm... my code duplication tends to start small.  First I have a function being called from a number of places.  Then about half of the places end up calling another function right after it.  Then it turns out that I need a bridge between those functions so most of them get a line of glue code.  Pretty soon there's going to be a chunk of 4-5 lines that occurs with slight variations in a lot of files.
07:20:05 <dark> Then when I abstract that out, I usually need about two lines per caller (to take care of the variations), and the process starts again :)
07:21:52 <dark> This seems to be peculiar to user interfaces, though.
07:22:28 <dark> I guess it's because humans are hard to please :-)
07:23:01 <shapr> I like partial application for cases like that
07:39:27 <Marvin--> hooray, for an 18M postgres database, our index is just 67M
07:39:43 <Marvin--> (where we only index parts of the database...)
07:39:49 <shapr> why is it so large?
07:39:58 <Marvin--> well, we haven't done anything intelligent yet :)
07:40:05 <Marvin--> no compression, no smart storage
07:40:14 <shapr> oh
07:40:26 <Marvin--> oh, and we store everything eight times since we have four search modes, and we need to search both forward and backwards
07:40:43 <shapr> man, I have to borrow the bat book from my friend
07:41:09 <Marvin--> plus, for every object in the database, we store the string for each of the superclasses as well as the leaf class
07:41:20 <shapr> now that I have a colo box, I want to do DNS and MX for ScannedInAvian
07:41:41 <shapr> what kind of database are you making?
07:41:52 <shapr> sounds like a weird Smalltalk image
07:42:45 <shapr> are you building something like GemStone ?
07:44:35 <dark> http://c2.com/cgi/wiki/wiki?DevelopersAreMasochists is fun.
07:46:34 <Marvin--> shapr: it's the CAPS IFC
07:46:47 <shapr> ?
07:47:02 <shapr> I've forgotten what that stands for
07:47:40 <Marvin--> Infinite Filing Cabinet
07:48:00 <shapr> oh
07:48:14 <Marvin--> basically, an object-oriented layer on top of a relational database, where removes == deprecation
07:48:46 <shapr> depending on the feature set, that could be much like GemStone
07:50:00 <Marvin--> http://www.strakt.com/docs/IFC200304.pdf
07:50:08 <Marvin--> I think that's the one
07:50:30 <dark> shapr, do you manage to pair-code?  I get the impression you work on most of your projects alone.
07:50:58 <shapr> no, I don't manage to do PairProgramming most of the time.
07:51:17 <Marvin--> today, Björn and I realized that pair programming isn't much use if you're both equally tired ;-)
07:51:28 <shapr> which is why I don't claim to do full scale Extreme Programming
07:51:34 <shapr> there are some other bits I'm not able to do also
07:52:15 <shapr> on the good side, Beatrice qualifies as a domain expert for 95% of what we do, so when I have trouble understanding client needs, we sit together and work on stuff
07:52:56 <shapr> dark: speaking of which, SyntaxPolice is coming to visit me for awhile, so I'll get to do my first Haskell PairProgramming soon
07:53:10 <shapr> I'm looking forward to that.
07:54:21 <shapr> sadly, PairProgramming and heavily remapped keyboards don't mix so well
07:54:39 <earthy> why would you heavily remap your keyboard?
07:54:52 <shapr> because it's more efficient than the standard mapping
07:55:12 <earthy> owh?
07:55:49 <phubuh> lambdabot: hello!
07:55:50 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
07:55:57 <phubuh> i've heard so much about you!
07:55:57 <Igloo> I have a friend who made stats for how much he used each key for a while and then started from scratch based on that
07:56:14 <earthy> yeah. that's pretty sick.
07:56:15 <shapr> sure, get a kinesis, move all the modifier keys to your thumbs, write some special purpose keys following ideas from "The Humane Interface"
07:56:36 <shapr> @listmodules
07:56:36 <lambdabot> I have the following modules installed: ["base","dict","dynamic","eval","fact","hello","karma","more","quote","seen","state","system","topic","type"]
07:56:37 <earthy> seriously, you loose all ability to effectively move from system to system
07:56:44 <shapr> @listcommands dynamic
07:56:44 <lambdabot> Module dynamic provides the following commands: ["dynamic-load","dynamic-unload"]
07:56:57 <shapr> @dynamic-load dummy
07:56:58 <lambdabot> couldn't load module DummyModule.o
07:56:58 <phubuh> me and my brother tend to pair program ad hoc a lot
07:57:06 <Heffalump> did you build DummyModule.o ?
07:57:12 <shapr> guess not :-)
07:57:16 <Igloo> I discovered that I can type faster and more accurately on a qwerty-mapped keyboard while looking at it than while looking at the screen regardless of what the keys are actually labelled with
07:57:31 <shapr> @dynamic-load dummy
07:57:31 <lambdabot> module loaded
07:57:37 <shapr> @listcommands dummy
07:57:38 <lambdabot> Module dummy provides the following commands: ["dummy"]
07:57:39 <earthy> igloo: optical feedback for the keys, then. :)
07:57:41 <shapr> @dummy
07:57:41 <lambdabot> dummy
07:57:47 * shapr cheers wildly
07:57:52 <earthy> as in, optical feedback on the ways your fingers move.
07:58:15 <Marvin--> shapr: cute
07:59:03 <earthy> neat.
07:59:08 <earthy> ah well, time to go home
07:59:18 <Marvin--> "This is also the first year that Muslim students from the Al-Jannah Islamic school have been invited to participate; two of their students presented a project on human anatomy entitled "Allah (SWT) Created Me" which, while it was found ineligible for a prize due to a number of Biblical inconsistencies, did win a special Interfaith Outreach ribbon."
08:10:38 <shapr> @dynamic-unload dummy
08:10:39 <lambdabot> module unloaded
08:11:05 <Marvin--> @dynamic-unload dynamic
08:11:05 <lambdabot> not enough privileges
08:11:08 <Marvin--> dang
08:11:12 <shapr> @dynamic-load dummy
08:11:12 <lambdabot> module loaded
08:11:13 <Heffalump> @dynamic-unload dummy
08:11:13 <lambdabot> module unloaded
08:11:15 <Heffalump> @dynamic-unload dummy
08:11:16 <lambdabot> module not loaded
08:11:43 <shapr> @dynamic-load dummy
08:11:43 <lambdabot> module loaded
08:11:46 <shapr> @listcommands dummy
08:11:46 <lambdabot> Module dummy provides the following commands: ["dummy","example"]
08:11:50 * shapr cheers
08:11:51 <shapr> @example
08:11:51 <lambdabot> example
08:12:01 <shapr> see, new commands added while the bot was running :-)
08:12:12 <Marvin--> tsk, you should have dynamic-reload
08:12:19 <Heffalump> oh, I meant to do that, but forgot.
08:12:22 <Heffalump> thanks for reminding me
08:12:48 <shapr> we have runtime upgrading of lambdabot! yay!
08:12:54 * shapr moshes ecstatically
08:13:20 <Marvin--> except for the dynamic module? :-P
08:13:34 <o3_> nice one
08:13:35 <Heffalump> yes, except for that :-p
08:13:38 <Marvin--> @dynamic-unload hello
08:13:39 <lambdabot> not enough privileges
08:13:41 <shapr> well, I'm sure we allow you to unload that module
08:13:42 <Marvin--> :-(
08:13:46 * o3_ amazed to see his crap actually gets used
08:13:50 <shapr> but then you're in trouble
08:13:53 <Heffalump> no, you can't unload anything that wasn't loaded dynamically.
08:13:55 <shapr> o3_: it's cool!
08:14:00 <shapr> hey Esa
08:14:07 <esap> Hey shapr!
08:14:15 <Marvin--> @dynamic-load hello
08:14:16 <lambdabot> not enough privileges
08:14:17 <Heffalump> @dynamic-unload hello
08:14:18 <lambdabot> DynamicModule.hs:62: Irrefutable pattern failed for pattern Data.Maybe.Just object
08:14:23 <esap> shapr: What's up?
08:14:24 <Heffalump> see, that upsets it :-)
08:14:27 <Marvin--> yeah
08:14:35 <Marvin--> but...why can't I do anything at all? I'm not kool enough?
08:14:37 <Heffalump> I didn't put in a huge amount of error checking.
08:14:38 <shapr> esap: runtime reloading of modules in lambdabot 
08:14:49 <o3_> Marvin--: i believe the proper word is '1337'
08:14:49 <shapr> Marvin--: for the moment, module loading is limited to admins
08:15:01 <Heffalump> Marvin--: 'fraid so. I'll stick you in the admins list on my next checkin, if noone else minds.
08:15:07 <shapr> if you contribute some code to lambdabot, you get admin status
08:15:15 <Heffalump> oh, ok then :-)
08:15:38 * shapr grins
08:15:52 <Marvin--> o3_: right
08:16:04 <o3_> echo '-- (C) 2003 Andre Pang' >> Main.hs
08:16:06 <o3_> <- admin!
08:16:12 <shapr> heh
08:16:24 <Marvin--> cvs ci -m "Reindent"
08:16:30 <Marvin--> <- admin!
08:16:31 <o3_> haha
08:16:38 * Heffalump thinks o3 has already contributed some code :-)
08:16:45 <shapr> yes, you wrote the runtime loader
08:16:48 <Heffalump> but neither a copyright comment nor a reindentaion is code :-)
08:17:22 <dark> Heffalump: This is Haskell, of course reindentation is code :)
08:17:26 <o3_> and thus Marvin-- has also contributed some code, since he contributed bits of that
08:17:44 <Marvin--> ha!
08:17:50 * Marvin-- is almost as 1337 as o3
08:17:54 <shapr> that reasoning works for me
08:17:57 <Igloo> I think good reindentation is more deserving than bad code
08:18:23 * shapr adds o3 and Marvin-- as admins
08:18:31 * esap thought cvs didn't have checkin, only update and commit :-)
08:18:32 <o3_> Marvin--: schweet.  we rox0r
08:18:48 <Heffalump> the admin checking is entirely nick based, isn't it?
08:18:53 <shapr> sure
08:19:01 <Heffalump> ok, just checking I wasn't misunderstanding.
08:19:04 <shapr> hostmask wouldn't be hard though
08:19:18 <shapr> it's one of those things I keep meaning to get to
08:19:21 <Heffalump> oh, and I added Igloo when I added myself cos he's good at breaking things.
08:19:31 <shapr> I heard he wrote the Makefile
08:19:38 <Marvin--> esap: ci == commit
08:19:39 <Heffalump> oh yes, that too.
08:19:47 <Igloo> You get the hostmask on all messages don't you?
08:19:53 <shapr> yes
08:19:58 <Igloo> So why's it hard?
08:20:01 <shapr> it isn't :-)
08:20:10 <Marvin--> Igloo: "wouldN'T"
08:20:13 <Igloo> Oh, misread it  :-)
08:20:21 <Marvin--> ECAFFEINE
08:20:21 <shapr> I just haven't done it.
08:21:53 <esap> marvin: oh hmm. ok. Never used those synonyms for it.
08:22:50 <Marvin--> esap: I'm just lazy
08:23:06 <Marvin--> length "ci" < length "commit"
08:23:42 <shapr> @quit
08:23:57 <shapr> hi hal
08:24:00 <hdaume> hey
08:24:35 <shapr> how's code?
08:24:39 <Heffalump> there's a neat trick irssi uses to rerun itself from a new binary without disconnecting. I wonder how it works.
08:24:53 <Marvin--> Heffalump: exec keeps file descriptors open
08:24:58 <esap> marvin: heh, I commit too infrequently for the length to matter :-) [e.g. I've done changes without committing for about a year now :-) ]
08:25:08 <Heffalump> ah, ok.
08:25:13 <Marvin--> Heffalump: I implemented soft restarting and segv handling in our mud :-)
08:25:23 <Marvin--> "*** The mud has crashed. Please stand by."
08:25:33 <Heffalump> how on earth do you handle segv?
08:25:51 <Marvin--> fork a child to dump the core, and then soft restart
08:25:55 <Marvin--> (i.e. exec)
08:26:03 <Marvin--> while doing some sanity checks on the data
08:26:03 <Heffalump> I didn't know SEGV can be trapped at all.
08:26:10 <Marvin--> of course it can :)
08:26:11 <shapr> gee, we could write a GHC segfault reporter with that
08:26:22 <shapr> hdaume: oh, check out the cool new lambdabot feature
08:26:38 <shapr> @dynamic-load dummy
08:26:39 <lambdabot> module loaded
08:26:43 <shapr> @listcommands dummy
08:26:44 <lambdabot> Module dummy provides the following commands: ["dummy","example"]
08:26:54 <reffie> nice
08:26:59 <esap> segv handlers are very good at hiding bugs.
08:27:04 <Marvin--> yup
08:27:13 <shapr> @dynamic-reload dummy
08:27:13 <lambdabot> module reloaded
08:27:17 <shapr> @listcommands dummy
08:27:18 <lambdabot> Module dummy provides the following commands: ["dummy","example","other"]
08:27:18 <Marvin--> which is why I went to great lengths to raise all hell in the logs and to actually dump a core file
08:27:22 <o3_> Heffalump: Chilli set an assignment for us where we had to implement distributed shared memory using SEGV
08:27:26 <o3_> lots of fun
08:27:34 <Heffalump> using SEGV???
08:27:37 <o3_> yeah
08:27:42 <o3_> mprotect() a region
08:27:42 <shapr> it does make some sense
08:27:49 <Heffalump> ah.
08:27:50 <shapr> that's how virtual memory works
08:27:51 <Heffalump> gotcha.
08:27:55 <Heffalump> errm.
08:27:59 <Heffalump> virtual memory uses page faults
08:28:05 <shapr> page faulting and segfaulting aren't so far away, are they?
08:28:09 <Heffalump> hmm.
08:28:12 <Heffalump> well..
08:28:14 <o3_> read on memory -> SEGV -> do DSM magic -> mprotect() again and enable reading -> re-exec code
08:28:18 <Heffalump> apart from the levels at which they work.
08:28:47 <shapr> segfaulting is more about violating the contract you have with the OS
08:29:21 <Heffalump> oh, so you can trap it, cool
08:29:32 <shapr> DSM?
08:29:35 <shapr> @fact dsm
08:29:37 <lambdabot> Nothing
08:29:39 <shapr> @jargon dsm
08:29:41 <lambdabot> No match for "dsm".
08:29:44 <shapr> oh, distributed shared memory
08:30:11 <Heffalump> someone should go through the list of signals caught in IRC.hs and make it more comprehensive
08:30:18 <shapr> how so?
08:30:46 <Heffalump> well, I just picked a few obvious ones at random when I wrote the code.
08:31:00 <Heffalump> Someone should go through all the POSIX signals and decide whether they should be caught or not.
08:31:11 <shapr> ah, I see
08:31:49 <Marvin--> well, I'm going home
08:31:57 <Marvin--> see you guys later, I guess :P
08:32:06 <o3_> later marvin
08:33:30 <esap> Is there a shared memory library for Haskell? [apart from FFI, I mean]
09:07:06 <Heffalump> does anyone know if it's possible to pass a value of an arbitrary type across the FFI (assuming that it's just used opaquely on the other side)?
09:07:43 <Igloo> I think you'd need to make a pointer of some sort to it
09:07:58 <Heffalump> hmm.
09:08:15 <Heffalump> yeah, that's ok
09:08:30 <Heffalump> now, could I safely do this with a Dynamic and hand it over to more Haskell code on the other side?
09:10:06 <Igloo> I imagine so
09:10:57 <Heffalump> hmm.
09:20:07 <hdaume> Heffalump: you're never touching the value in Haskell?
09:20:23 <hdaume> (other than to send it back and forth to C?)
09:24:02 <Heffalump> no, I'm never touching it in C, I want to touch it in Haskell
09:24:34 <Heffalump> I'm wondering if dynamic loading "the right way" is possible.
09:24:45 <hdaume> oh
09:24:48 <hdaume> i dunno then :)
09:24:58 <shapr> what's "the right way" ?
09:25:10 <dark> I don't think Dynamic from one context will work in another.  It keeps a runtime registry of types.
09:25:48 <Heffalump> well, using standard dynamic linking mechanisms
09:26:00 <Heffalump> dark: ah :(
09:26:24 <Heffalump> maybe standard dynamic linking mechanisms aren't actually the right thing to do, given how C-based they are
09:26:35 <dark> I wonder if you can force it to use the same registry.
09:30:36 <shapr> hi Arnia
09:34:01 * shapr girds his loins to argue the advantages of FPLs over OOP with Ron Jeffries, author of several XP books
10:07:38 <shapr> oy
10:07:45 <Riastradh> Oy?
10:08:31 <shapr> I'm exclaiming at the excrement that arrives on the pragprog list
10:08:54 <Riastradh> Pragprog?
10:09:14 <shapr> it's the yahoo mailing list for people who want to discuss a book called "The Pragmatic Programmer"
10:09:24 <shapr> it attracts an interesting group of people
10:26:18 <reffie> i've been following that mailing list since yesterday
10:26:32 <shapr> what do you think?
10:28:24 <shapr> there's currently a traffic explosion since a bunch of people chose to make their own language for the Language of the Year this yar
10:28:28 <shapr> this year
10:29:50 <shapr> I've just told Ron Jeffries that I think OOP gets in the way compared to FPLs when it comes to parsing
10:30:07 <reffie> i dont know what to think yet..
10:33:27 <dark> When I think OOP I always have visions of oodles of silly get and set functions :)
10:34:18 <dark> AFAIK python is the only language that fixed this.  You can start out with an attribute, and later replace it with get and set methods, without changing the callers.
10:35:57 <Riastradh> dark, have you ever used CLOS?
10:36:14 <Heffalump> but python is an interpreted language
10:36:30 <Heffalump> so there's no real issue with changing the object code
10:37:04 <dark> Riastradh: No.
10:37:10 <Heffalump> in C# you don't have to change the source code of callers but you do have to recompile (IIRC)
10:37:15 <dark> Heffalump: If you can recompile the code then it's even less of a problem :)
10:38:01 <Riastradh> dark, there are no 'oodles of silly get and set functions' in CLOS unless you use special slot accessors and mutators with virtual slots.
10:40:36 <Riastradh> Well, there _are_ getters and setters, but you don't have to write them yourself.
10:46:25 <shapr> hi zetabug 
10:46:29 <zetabug> hi shapr
10:46:39 <shapr> have you been here before?
10:46:42 <zetabug> nope
10:46:51 <shapr> would you like the intro talk? :-)
10:46:58 <zetabug> oh why not :)
10:47:25 <shapr> ok, are you here to learn Haskell? or looking for other users?
10:47:42 <zetabug> I am here cause I once saw MJD talking about Haskell
10:47:50 <shapr> who's MJD?
10:47:56 <zetabug> and then went looking for a different channel today and saw this one
10:48:07 <zetabug> Mark Jason(?) Dominus
10:48:21 <Heffalump> what'd he say about it?
10:48:33 <shapr> should I know him?
10:48:36 <Heffalump> (yes, Jason, a Perl bloke, for the benefit of shapr and others that don't know the name)
10:48:44 <zetabug> I think it was him, he gave a talk on 'why strong typing doesn't have to suck'
10:49:14 <shapr> google says he's an interesting guy
10:49:29 <zetabug> http://perl.plover.com/yak/typing/
10:50:28 <zetabug> which is older? Haskell or ML?
10:50:37 <shapr> ML
10:51:20 <shapr> the first functional language along the lines of ML and Haskell was Backus' FP I think
10:51:27 <shapr> and the next one was ML, I think
10:52:30 <shapr> right, in 1978 Milner proposed ML. It was intended to be the metalanguage of the LCF proof assistant.
10:52:56 <shapr> so, I'm only seven years older than ML.
10:53:06 <zetabug> what does LCF stand for?
10:53:11 <shapr> heck if I know :-)
10:53:21 <zetabug> :)
10:53:52 <shapr> so, the rest of the intro talk for #haskell generally involves http://www.haskell.org/learning.html
10:54:03 <zetabug> aha, I'm already there
10:54:06 <shapr> and some useful examples of spiffy Haskell features if you're interested.
10:54:34 <Igloo> Logic for Computable Functions
10:54:41 <zetabug> I've seen lambda mentioned at an Alife talk too I think
10:54:55 <Igloo> Is the Lambdabots dieing an indication of something earlier having deadlocked them?
10:55:30 <shapr> no, it means the SMP-unfriendly binary-only NVidia drivers crapped out again on my system.
10:55:30 <zetabug> Igloo: as opposed to logic for non-computable functions?  
10:55:45 * shapr wants a graphics card with open source drivers
10:56:00 <Heffalump> igloo: yes, shapr's computer deadlocked them :-)
10:56:20 <shapr> truly, the nvidia drivers have some sort of SMP deadlock problem.
10:56:23 <Igloo> If it didn't take out the whole system then running them in screen would have fixed it
10:56:26 <Heffalump> I don't think I do anything to catch the computer dying from underneath.
10:56:30 <shapr> heh
10:56:38 <shapr> whoops, forgot to change the nickname
10:56:49 <shapr> lambdabot-test: @quit
10:57:40 <shapr> zetabug: so, do you have any experience with lisp/scheme programming?
10:57:41 <Heffalump> \m -> catchJust computerCrashed m (\() -> ircQuit "killed by crashing computer")
10:57:45 <shapr> heh
10:58:09 <shapr> sadly, the nvidia drivers are a kernel module, so when they die, everything's dead dead dead
10:59:46 <shapr> @listmodules
10:59:46 <lambdabot> I have the following modules installed: ["base","dict","dynamic","eval","fact","more","quote","system"]
10:59:57 <shapr> @dynamic-load seen
10:59:57 <lambdabot> couldn't load module SeenModule.o
11:00:00 <shapr> fooey
11:00:01 <zetabug> shapr: minimal
11:00:03 <phubuh> @eval 1 + 1
11:00:03 <lambdabot> 2
11:00:06 <phubuh> whee, cool
11:00:30 <phubuh> i need to grab lambdabot and check it out, i haven't read any real haskell code at all
11:01:10 <reffie> the code is surprisingly very readable
11:01:18 <reffie> and easy to understand
11:01:31 <shapr> @dynamic-load seen
11:01:32 <lambdabot> module loaded
11:01:35 <shapr> ah that's better
11:01:47 <shapr> zetabug: do you have hugs or ghc installed?
11:02:01 <zetabug> no
11:02:02 <shapr> I could show you some nifty examples you can type into an interpreter
11:02:29 <Heffalump> reffie: why were you surprised? :-)
11:02:47 <reffie> i don't know :P
11:02:53 <shapr> @yow
11:02:54 <lambdabot> When I met th'POPE back in '58, I scrubbed him with a MILD SOAP
11:02:54 <lambdabot>  or DETERGENT for 15 minutes.  He seemed to enjoy it..
11:03:36 <zetabug> shapr: ok, hugs installed
11:03:42 <shapr> yay
11:04:08 <zetabug> I see a directory of examples
11:04:08 <shapr> lessee, where do I start...
11:04:16 <shapr> zetabug: do you know about higher order functions?
11:04:23 <shapr> what languages have you used before?
11:04:23 <zetabug> hmmm
11:04:38 <zetabug> perl, pascal with TV, C, assembly, ..etc.
11:04:55 <shapr> this could be a mind expanding experience then...
11:05:05 <zetabug> woot:)
11:05:15 <shapr> first of all, Haskell is purely functional
11:05:26 <zetabug> so no classes?
11:05:29 <shapr> that means that functions in Haskell work like they would in a mathematical equation
11:05:38 <zetabug> aha
11:05:49 <shapr> you sort of do have classes, but that's for a later lesson
11:06:01 <shapr> so a function must be described by its inputs
11:06:02 <hdaume> (they're not OO-style classes though)
11:06:09 <zetabug> I've been glancing at some classical mechanics 'equations' and not grasping them. Missing some of the pre-reqs I think
11:06:14 <shapr> any call to a function can be replaced by the result of that call
11:06:42 <shapr> have you used anonymous functions before?
11:07:04 <zetabug> sort of
11:07:14 <shapr> ok, in haskell they look like (\x -> x + 1)
11:07:19 <zetabug> kind of like in C, but then it becomes C++ doesn't it?
11:07:29 <zetabug> where you pass around a reference to a function
11:07:46 <shapr> there are some similarities, but I don't think it's identical
11:07:51 <zetabug> "lambda calculus"
11:07:57 <shapr> yah, good stuff
11:07:59 <zetabug> I've studied it once, long ago
11:08:15 <zetabug> let me get you a link you might enjoy
11:08:20 <shapr> I haven't studied it before, but I do like lambda cal
11:08:26 <Igloo> [19:07] <lilo> the session has to be past a certain age or else we just reflect 
11:08:29 <Igloo>           "Client Quit"
11:08:31 <Igloo> [19:08] <lilo> or something of the sort
11:08:34 <Igloo> [19:08] <lilo> tends to reduce spam
11:08:43 <shapr> Igloo: yup, Heffalump found that in the dancerd source
11:09:09 <zetabug> http://ls11-www.cs.uni-dortmund.de/achem/links.html 
11:09:49 <shapr> that is interesting
11:09:50 <zetabug> Ikegami labs is interesting stuff
11:10:16 <Igloo> <lilo> eventually we may limit user quit messages to +e users
11:10:26 <shapr> Igloo: I'd like that
11:10:47 <Heffalump> where is Igloo hearing this?
11:10:54 * shapr is curious also
11:10:56 <Heffalump> +e would be better than the time limit
11:11:02 <Heffalump> assuming +e = registered with NickServ
11:11:31 <shapr> zetabug: so, in hugs try "map (\x -> x + 1) [1,2,3]"
11:12:30 <zetabug> ok
11:12:33 <zetabug> I see
11:12:56 <shapr> the map function takes two values as input, a function, and a list of things to run that function on
11:13:05 <reffie> fuck lilo
11:13:18 <shapr> the anonymous function (\x -> x + 1) just adds one to its argument
11:13:21 <zetabug> I saw Peter Dittrich give a discussion of lambda-calculus and "strings" - artificial chemistry - hypercycyles, like catalytic networks of enzymes
11:13:38 <Igloo> I msged him
11:13:48 <zetabug> shapr: list, or set?
11:14:02 <shapr> list
11:14:26 <shapr> you could also do "map (\x -> x + 1) [2,1,3]"
11:14:35 <shapr> or "map (\x -> x + 1) [1,2,3,1,1]"
11:14:36 <zetabug> http://ls11-www.cs.uni-dortmund.de/people/dittrich/p/DZ98gwal3.ps.gz # see reference re Fontana
11:15:56 <shapr> zetabug: another nifty Haskell feature is that it's lazily evaluated by default
11:15:59 <pesco> What's a good book to learn "The Theory" from, i.e. lambda calculus + Hindley-Milner?
11:16:11 <zetabug> shapr can you do it with matrices as well?
11:16:25 <shapr> sure, you can define how to map over a datatype
11:16:31 <zetabug> shapr: 'lazily evaluated' ?
11:16:46 <shapr> that means something is evaluated only when you use it
11:17:04 <shapr> for example, [1..9] is the numbers 1 to 9, but [1..] is all Integers starting with 1
11:17:08 <zetabug> hmm
11:17:23 <shapr> obviously, you don't want to map over all numbers starting with 1, but you could filter that list without exploding your computer
11:17:36 <shapr> for example: "filter (\x -> x > 5) [1..]"
11:17:48 <dark> filter is_prime [1..]
11:17:50 <Heffalump> that's not a good example :-)
11:17:53 <Heffalump> (shapr's)
11:18:02 <shapr> ahem
11:18:03 <Heffalump> filter (\x -> x < 5) [1..]
11:18:09 <shapr> yes, I mystyped there :-)
11:18:10 <shapr> oops
11:18:32 * shapr hopes zetabug doesn't time out suddenly now
11:18:36 <zetabug> heh
11:19:04 <shapr> sorry, lemme try that againn
11:19:13 <shapr> for example: "head (filter (\x -> x > 5) [1..])"
11:19:18 <shapr> head takes the first item of a list
11:19:32 <shapr> filter only returns items from a list that satisfy a certain condition
11:19:44 <shapr> in a strict language, you can't easily play with infinite lists
11:20:32 <dark> In a strict language, you would write that as "6" :-)
11:20:40 <zetabug> :)
11:20:41 <phubuh> haha
11:20:44 <shapr> with Haskell, only the items [1,2,3,4,5,6] are pulled out of the infinite list [1..]
11:21:19 <zetabug> it works in hugs..
11:21:21 <phubuh> you still have > instead of < though :)
11:21:26 <zetabug> oops
11:21:39 <shapr> phubuh: with head it's okay
11:21:42 <zetabug> and I left off the head :)
11:21:52 <phubuh> so the filter call would yield [6..], and the head call would yield 6
11:21:52 <Marvin--> shapr: bah, be macho and use sections
11:21:57 <shapr> Marvin--: sections?
11:22:06 <Marvin--> filter (>5) [1..]
11:22:11 <phubuh> shapr: that's what they call partially evaluated operators
11:22:14 <shapr> ah
11:22:25 <shapr> but I haven't told zetabug about partial application yet
11:22:36 <Heffalump> actually, there's another rather major problem with that filter.
11:22:41 * zetabug scurries of to make popcorn and returns asap
11:22:42 <shapr> what?
11:22:44 <phubuh> that's another interesting property of haskell (and the MLs): all functions take exactly one argument
11:22:47 <Heffalump> well, try it :-)
11:22:57 <shapr> I did
11:23:05 <phubuh> works just fine here
11:23:07 <Heffalump> interactively?
11:23:12 <shapr> yes, interactively
11:23:13 <phubuh> yup, in hugs
11:23:14 <Marvin--> Heffalump: I left out the head
11:23:14 <Heffalump> IM the (<5) filter.
11:23:23 <zetabug> someone took the stove:(
11:23:27 <Heffalump> oh, you're all using head, ok.
11:23:28 <shapr> zetabug: are you in a dorm?
11:23:36 <dark> Heffalump: There wasn't a (<5) filter, pay attention :)
11:23:37 <Heffalump> filter (<5) [1..] will print out a finite list and then fail to terminate.
11:23:40 <zetabug> heh, no:) just have a lot of roommates
11:23:47 <shapr> ah ok
11:23:50 <Heffalump> there was, I said one.
11:23:52 <Heffalump> so :-p
11:23:55 * shapr grins
11:23:59 <Marvin--> Heffalump: there, there *pats head*
11:24:10 <Heffalump> oh, and you're all ugly and smell. Especially dark and Marvin--.
11:24:23 * Heffalump retreats into his own quiet little corner.
11:24:47 <Marvin--> do you have to announce it to the whole world like that? :-/
11:24:50 <dark> I can't help it, it's just hot in here.
11:24:54 * shapr snickers
11:25:19 <phubuh> zetabug: try this expression in hugs: ((1 +) 5)
11:25:24 <dark> I almost said "I'm sweating like a pig", but I have no actual knowledge about how pigs sweat.  I wonder what that phrase refers to.
11:25:39 <Marvin--> good question, I'm pretty sure pigs don't sweat
11:25:47 <shapr> oh oh, I want to tell him about partial application
11:25:48 <Marvin--> (which is why they do the whole roll-in-the-mud thing)
11:26:09 <phubuh> alright, you can have it, shapr :-)
11:26:15 <shapr> thanks :-)
11:26:20 <shapr> then you can tell him more stuff
11:26:28 <shapr> zetabug: ok, ready for partial application?
11:26:28 <zetabug> phubuh: ok. 
11:26:36 <Marvin--> taking turns force-feeding the poor guy's brain?
11:26:39 <shapr> heh
11:26:41 <o3_> grumble.  i hate compressing text
11:26:47 <shapr> we're, um, teaching...
11:26:49 <shapr> sure, that's it.
11:27:01 <shapr> expressing the spiffiness of Haskell.
11:27:17 <Marvin--> WE ARE HASKELL OF BORG, YOU WILL LEARN LAZY EVALUATION, STRICTNESS IS FUTILE
11:27:20 <zetabug> Heffalump: is the failure to terminate a bug or feature?
11:27:25 <phubuh> o3_: sed 's/[aoeuiy]//g' file.txt
11:27:31 <shapr> zetabug: just as phubuh said, in Haskell, all functions take one argument and return one argument
11:27:32 <zetabug> shapr: ok
11:27:42 <shapr> even functions like add x y = x + y
11:27:59 <phubuh> zetabug: it's not smart enough to know that [1..] contains integers in increasing order, so it still has to check every single natural number
11:28:01 <Heffalump> zetabug: neither really, just an inherent limitation of laziness
11:28:03 <shapr> if you look at the type signature for such a function, it would be something like add :: Int -> Int -> Int
11:28:08 <Heffalump> it's neat, but not magical
11:28:14 <zetabug> ah, so every thing can be broken down to a function with one argument?
11:28:14 <o3_> phubuh: don't think paper reviewers will appreciate that, unfortunately
11:28:19 <shapr> the -> operator is right associative
11:28:30 <shapr> so it really means add :: Int -> ( Int -> Int )
11:28:41 <zetabug> phubuh I see
11:28:51 <shapr> add takes one Int, and returns a new function
11:28:56 <shapr> that new function takes an Int and returns an Int
11:28:57 <Marvin--> I'm going to reboot to windoze and play some WC3
11:29:04 <shapr> mmm, WC3
11:29:12 <phubuh> WC3 works in WineX, IIRC
11:29:13 <shapr> I may have to cut this lesson short to play WC3 myself..
11:29:22 <Marvin--> phubuh: I tried it
11:29:35 <Marvin--> phubuh: took ages to get it to work, and then it froze after two minutes of playing
11:29:40 <phubuh> :/
11:29:44 <shapr> zetabug: sooo, even though you can call add with both arguments at once
11:29:45 <dark> Marvin: But did you twiddle the resolution and pixel depth just right? :)
11:29:49 <shapr> you don't have to do it that way
11:30:12 <shapr> zetabug: you could instead give one of the arguments to a function, and then use it like it is.
11:30:12 <dark> Last time I tried, wine ran a number of games just fine, but crashed on anything network-related.
11:30:32 <Marvin--> dark: as in, "did I try every possible resolution and pixel depth"? No.
11:30:40 <Marvin--> dark: and I didn't get on the network
11:30:46 <phubuh> zetabug: function application is also right associative, so "add 1 2" really means "((add 1) 2)"
11:30:47 <shapr> zetabug: since operators in Haskell are just functions with funny names, (+ 1) is the same as add 1
11:30:52 <dark> Marvin: some games probe the network when they start and that's enough to crash it :)
11:31:13 <Marvin--> dark: but...two minutes into a game?
11:31:25 <dark> shapr: actually it's the same as (\x -> add x 1) :)
11:31:27 <phubuh> i know people that run Diablo 2 on battle.net with WineX
11:31:27 <shapr> Marvin--: it was trying to report back to blizzard, I'm sure of it.
11:31:31 <shapr> dark: ok, fair enough
11:31:49 <Marvin--> shapr: heh, "ATTENTION; cracker running a game on Linux, send the deathsquad!"
11:32:02 <shapr> zetabug: so, partial application lets you do "map (+ 1) [1,2,3]" 
11:32:08 <Marvin--> s/deathsquad/Vivendi lawyer drones/
11:32:17 <phubuh> "add x y = x + y" could be implemented as "add x = \y -> x + y", and then be used in the exact same way
11:32:18 <dark> Marvin: Not much of a death squad is it?
11:32:29 <Marvin--> dark: worked against the freecraft project
11:32:31 <phubuh> or even "add = \x -> \y -> x + y"
11:32:39 <shapr> true enough, blizzard shut down freecraft
11:32:43 <hdaume> phubuh: you'll hit the MR there :)
11:32:52 <shapr> MR?
11:32:55 <phubuh> MR?
11:32:57 <hdaume> monomorphism restriction
11:32:59 <shapr> ah
11:33:09 <Marvin--> and bnetd development is pretty much halted thanks to that lawsuit
11:33:20 * phubuh googles :-)
11:33:36 <Marvin--> hdaume: I like to call it the DMR
11:33:43 <hdaume> damned?  :)
11:33:46 <Marvin--> (D for Dreaded)
11:33:48 <hdaume> oh
11:34:21 <phubuh> ooh!
11:34:40 <shapr> lambdabot: @quit "new features"
11:35:00 <Heffalump> the IRC server puts in the ""s
11:35:15 <shapr> ah
11:35:42 * Marvin-- reboots
11:35:46 <zetabug> yowzers.  let me finish reading one of the tutorials then
11:36:08 <o3_> that is the coolest quit message i've ever seen
11:36:23 <d33p> mean it 
11:36:23 <Riastradh> What does it mean?  Client quit?
11:36:31 <shapr> yup
11:36:35 <pesco> Can someone point me to a nice book about HM-Typesystems? Please, I can't find any!
11:36:38 <phubuh> it's swedish for "The client exits", which sounds weird -- it does in swedish as well
11:36:40 <shapr> "the client stopped"
11:36:41 <o3_> it even has the word "slut" in it, and it's still the coolest quit message ever
11:36:52 <shapr> sluta means to stop
11:37:06 <pesco> What does the av in front do to it?
11:37:09 <shapr> zetabug: ok, read fast, then we can feed you lots more fun info tomorrow
11:37:14 <shapr> usually av means of
11:37:21 <o3_> well, it means "stop talking to me" in english if you say it to a girl
11:37:24 <shapr> but it's not quite the same
11:37:49 * o3_ drags mind out of gutter and continues writing paper
11:38:07 <shapr> the av means "action combinator" in my head :-)
11:38:16 <pesco> Gotcha.
11:38:21 <shapr> sort of like "ge" often means "action" in german
11:38:31 <shapr> gekipt(?) == leaned over
11:38:32 <shapr> right?
11:38:49 <pesco> Almost. gekippt.
11:38:51 <phubuh> the "av" prefix is often used like the "de" prefix in english
11:39:13 <phubuh> it's not now though, so ignore me, i'm dumb
11:39:52 <shapr> hm, I see what you mean
11:40:38 <phubuh> it's also sometimes used to indicate that an action made something go into two or more pieces
11:41:03 <shapr> that's an unusual language combinatro
11:42:51 <phubuh> like, "ett sÃ¥gat bord" means "a sawed table", and "ett avsÃ¥gat bord" means "a table sawed in two", essentially
11:43:27 <shapr> ok, time for WC3
11:43:33 <phubuh> have fun
11:44:47 <dark> phubuh: Hmm, it works the same way (as "af") in dutch :)
11:45:24 <phubuh> swedish used to use f in many places where we use v now
11:45:25 <dark> Hmm, no, dutch "afgezaagd" means sawed-off, that's probably a different construction.  It refers to one of the pieces, not the combined result.
11:45:39 <phubuh> how about "afzaagd"?
11:46:08 <dark> Doesn't exist :)
11:46:14 <phubuh> i figured :)
11:46:20 <dark> My favourite dutch combinator is the "ver-" prefix.
11:46:47 <dark> Examples: "slikken" -> to swallow, "verslikken" -> to choke
11:47:06 <dark> "rekken" -> to stretch, "verrekken" -> to sprain (and as slang, to die)
11:47:14 <hdaume> that's cool
11:47:17 <dark> "gebruiken" -> to use, "verbruiken" -> to consume
11:47:28 <phubuh> not abuse? :)
11:47:37 <dark> "ver-" can go in front of almost anything :)  But aside from giving examples I find it very hard to explain what it does.
11:47:45 <phubuh> that's kind of like swedish' "miss-" prefix
11:47:52 <dark> phubuh: that's "misbruiken" :)  Perhaps "verbruiken" already had the consume meaning and it collided.
11:47:57 <phubuh> oh :)
11:48:19 <phubuh> yeah, swedish for abuse is "missbruka"
11:48:26 <dark> With some of them I don't really know what the difference is... for example "delen" (to share, to divide) and "verdelen" (to share, to divide)
11:49:02 <phubuh> i verdeled my brain!
11:49:14 <dark> "delen" would be to share your own stuff with others, "verdelen" to share something among yourself and others (or in some cases, to share something out among others, like with government handouts :)
11:49:33 <phubuh> interesting
11:49:36 <dark> "slaan" -> to hit, "verlaan" -> to defeat
11:50:00 <dark> There's endless variations on what "ver-" can do to a word, and they all seem related in a way I can't quite describe :)
11:50:35 <phubuh> it all seems related to inappropriateness
11:50:49 <o3_> dark: to do to an extreme?
11:50:52 <tic> or oven-use
11:50:55 <tic> s/oven/over
11:51:02 <dark> oh, that was "verslaan", not "verlaan"
11:53:05 <dark> o3: Some of them, yes :)  Though for example "schieten" is what you do with a gun, "verschieten" is what happens to the ammo.
11:53:22 <dark> It seems to have to do with introducing a "third party", like with the "verdelen" example.
11:53:40 <o3_> cool
11:53:52 <o3_> i just like it how that's a prefix
11:53:58 <dark> There's also "plaatsen" -> to put, or set (something), and "verplaatsen" -> to move (something)
11:54:19 <tic> "dela" <-> "fördela"
11:54:33 <phubuh> destructive update also seems to be a recurring theme with "ver-"
11:54:34 <phubuh> evil!
11:54:42 <dark> Heh :)
11:55:07 <phubuh> tic: ah, the "fÃ¶r-" prefix is interesting, and kind of similar to "ver-", it seems
11:55:27 <tic> phubuh, yup.
11:55:40 <tic> phubuh, although you can't prefix all words with it.
11:56:14 <dark> Also, "storen" and "verstoren" both mean "to disturb", but the latter emphasizes the more permanent effects, such as annoyance or increased chaos.  (For example, birds are "verstoord" if they keep making noise for a while)
11:56:26 <dark> This collides a bit with the slang "gestoord" which means crazy :)
11:56:59 <phubuh> stÃ¶ra is swedish for disturb
11:57:04 <phubuh> fÃ¶rstÃ¶ra is destroy
11:58:04 <dark> tic: Hmm, that's actually an interesting angle... if I try to prefix random dutch nouns with "ver-", they all become unofficial but comprehensible words that means to change something into the named noun.  There's even an dictionary word like that, "verstenen" means to turn to stone.
11:58:18 <dark> So the destructive update concept seems to be valid :)
11:58:44 <dark> phubuh: Interesting, that looks like the hit / conquer difference :)
12:00:13 <tic> Heh. :]
12:00:16 <tic> cool thing.
12:00:27 <phubuh> sten is rock, stena is "to throw rocks at", and fÃ¶rstena is "turn to stone"
12:00:39 <dark> If I prefix it to random verbs, they all become transitive (or reflexive?) and tend to refer to overuse  ("verslapen" -> to oversleep (oneself)), "vertrappen" -> to trample something (instead of just to kick)
12:00:49 <tic> in sweden you can verbify any noun by postfixing it with "a"
12:00:55 <tic> (or almost any noun)
12:01:20 <tic> reflexive.. I remember that from my maths class.
12:01:26 <phubuh> dark: heh, "fÃ¶rsova" is oversleep in swedish as well :)
12:01:40 <tic> aRb ^ bRc => aRc
12:02:43 <dark> phubuh: These prefixes seem to be related :)
12:03:04 <phubuh> indeed
12:03:17 <dark> Oh, an exception :)  "staan" is to stand, and "verstaan" is to understand (usually of spoken words)
12:03:30 <dark> Interesting that both words contain "stand" in english as well.
12:03:44 <phubuh> hmm!
12:04:04 <phubuh> using the fÃ¶r prefix instead of ver and stÃ¥ instead of staan, that's how it is in swedish too
12:04:04 <Heffalump> hmm, and it doesn't derive from the Latin, that I can think of
12:07:21 * dark notices that he's become able to read utf-8 in latin-1 :-)
12:10:35 <dark> phubuh: By the way, I have some swedish friends who were able to read dutch fairly well when they visited, without ever learning it.
12:10:58 <phubuh> yeah, i think i can too
12:11:03 <dark> One of them was confused by a sign which said "Kinderen f8, Studenten f10, Anders f16"
12:11:24 <dark> But that was because of his name :-)
12:11:29 <Heffalump> hehe
12:11:48 <phubuh> i can see that
13:45:57 <hdaume> Igloo: iirc, you were looking for a sleeping function?  see http://www.haskell.org/pipermail/glasgow-haskell-users/2001-April/001816.html
13:46:41 <dark> hmmm, sleeping.
13:48:40 <Igloo> Hmmm, no, but someone was - Heff maybe?
13:48:49 <hdaume> maybe :)
14:01:21 <kosmikus> yes, Heffalump, I think ...
14:02:13 <Heffalump> I found one in the end
14:02:23 <Heffalump> but thanks
14:02:29 <hdaume> ah okay
14:02:59 <Heffalump> ouch, complicated!
14:03:14 <Heffalump> I think threadDelay may not have existed then
14:03:16 <hdaume> it's not so bad if you edit it to not use crazy layout :)
14:03:20 <hdaume> ah
14:04:26 <hdaume> it seems to be there in Control.Concurrent for me
14:07:36 <kosmikus> wow -- since when do I have to register to download your tutorial, hdaume ?
14:07:55 <hdaume> kosmikus: few weeks ago
14:09:20 <hdaume> brb, windows is making me restart
14:09:24 <kosmikus> so be it, then :)
14:32:15 <kosmikus> hdaume: is the optical impression of your tutorial your preferred style? ;)
15:07:19 <shapr> whee
15:07:36 <kosmikus> whee what?
15:07:48 <shapr> just general happiness
15:07:53 <kosmikus> ah
15:07:57 <shapr> kosmikus: have you seen the dynamic module loading in lambdabot ?
15:08:04 <kosmikus> no
15:08:10 <shapr> @hello 
15:08:11 <lambdabot> Hello world. 
15:08:16 <shapr> @dynamic-unload hello
15:08:16 <lambdabot> module unloaded
15:08:19 <shapr> @hello
15:08:19 <lambdabot> Sorry, I don't know the command "hello", try "lambdabot: @listcommands"
15:08:25 <shapr> @dynamic-load hello
15:08:25 <lambdabot> module loaded
15:08:36 <kosmikus> @hello
15:08:36 <lambdabot> Hello world. 
15:08:36 <shapr> @hello
15:08:37 <lambdabot> Hello world. 
15:08:40 <kosmikus> cool
15:08:47 <kosmikus> of course, it'd be easy to fake ;)
15:08:55 <shapr> ok, just a moment ;-)
15:08:57 <shapr> @listmodules
15:08:57 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","fact","hello","karma","more","quote","seen","state","system","topic","type"]
15:09:01 <shapr> @listcommands dummy
15:09:01 <lambdabot> Module dummy provides the following commands: ["dummy","example","other"]
15:09:13 <shapr> @dummy
15:09:14 <lambdabot> dummy
15:09:49 <shapr> @dynamic-reload dummy
15:09:50 <lambdabot> module reloaded
15:09:53 <shapr> @listcommands dummy
15:09:53 <lambdabot> Module dummy provides the following commands: ["dummy","example","other","kosmikus"]
15:09:58 <shapr> @kosmikus
15:09:58 <lambdabot> gutentag
15:10:05 <kosmikus> I'm convinced :)
15:10:07 * shapr grins
15:10:21 <kosmikus> really nice -- how do you do it?
15:10:36 <shapr> it uses o3's Runtime loader
15:10:46 <kosmikus> so that's working with 6.0 now?
15:10:53 <shapr> Heffalump got the ghc6 version of the runtime loader and stuffed it into lambdabot 
15:10:56 <shapr> yes, it does
15:11:10 <kosmikus> spiffy, as you'd say ...
15:11:13 <shapr> heh
15:11:17 <shapr> yes, it's spiffy :-)
15:12:03 <kosmikus> how do you go to PLI, btw?
15:12:21 <shapr> by train?
15:12:25 <kosmikus> when?
15:12:27 <shapr> um
15:12:39 <shapr> I don't have exact plans
15:12:50 <shapr> are you going to be there early?
15:12:51 <kosmikus> saturday, sunday, or monday ;) ?
15:13:12 <shapr> I don't remember...
15:13:14 <kosmikus> I'll go on Saturday from Oestersund by train
15:13:28 <shapr> hi jao 
15:13:37 <jao> hi shapr
15:13:40 <shapr> kosmikus: I think we should organize a #haskell meet
15:13:56 <shapr> I'll create a HaWiki page
15:15:07 <kosmikus> definitely -- I just thought that if you go on Saturday, wouldn't you actually go via Ostersund as well?
15:15:30 <shapr> where's Ostersund?
15:15:51 <shapr> I think I may be the only ICFP attendee who lives a significant distance north of the conference.
15:17:01 * shapr looks at his map of sweden
15:17:03 <kosmikus> no, I've just looked at the map again -- you'll probably pass east of Ostersund
15:18:03 * Riastradh mumbles incomprehensibly about his location in relation to Sweden.
15:18:58 <shapr> yes, I think we'll go down the east coast of Sweden
15:19:33 <kosmikus> Riastradh: where are you from?
15:19:38 <shapr> are you visiting friends in Ostersund?
15:20:00 <Heffalump> yes, we definitely should have a #haskell meet
15:20:01 <kosmikus> no, I'm spending the second of my two weeks of vacation close to Ostersund in a house
15:20:06 * Heffalump and Igloo are currently worried about BA going on strike
15:20:31 <Riastradh> kosmikus, somewhere in the northeastern US.
15:20:34 <shapr> british airlines?
15:20:38 <Heffalump> airways
15:20:41 <Riastradh> i.e. nowhere near Sweden.
15:20:42 <shapr> ah
15:21:03 <kosmikus> well, next year you'll probably be lucky again w.r.t. PLI ...
15:21:23 <Heffalump> http://news.bbc.co.uk/1/hi/business/3089221.stm
15:21:32 <Riastradh> kosmikus, ?
15:22:40 <kosmikus> Heff: ah, good to see that the BBC is still operational ;)
15:22:45 <kosmikus> Riastradh, ?
15:23:09 <Igloo> Ah, a 3 week warning would be handy
15:23:33 <Riastradh> 18:21 < kosmikus> well, next year you'll probably be lucky again w.r.t. PLI ...
15:23:35 <Riastradh> ?
15:23:35 <Igloo> Although I suppose that's only 2 weeks from when we /leave/
15:23:36 <Heffalump> igloo: yeah.
15:23:43 <shapr> ok, I put my name and days of presence on the bottom of http://www.haskell.org/hawiki/HaskellIrcChannel
15:23:44 <Heffalump> sorry?
15:24:30 <Igloo> We need them to not be striking for the return flight too
15:24:34 <kosmikus> Riastradh: PLI usually alternates between Europe and US
15:24:36 <Heffalump> I don't care about that.
15:24:40 <Heffalump> They'll have to get us home somehow.
15:24:51 <Heffalump> I just don't want to miss half of PLI.
15:25:14 <Igloo> But it could end up taking a day or two, no?
15:25:25 <Heffalump> shapr: the Haskell workshop is on the 28th, when you say 28,29 in Stockholm do you just mean the evenings?
15:25:29 <Heffalump> igloo: yeah, but I still don't care
15:25:33 <shapr> yes, just the evenings
15:25:44 <Igloo> Fair enough  :-)
15:25:45 <kosmikus> Igloo: yeah, I wouldn't worry about that -- it is a good excuse for visiting the cities ;)
15:26:10 <Igloo> The half day after ICFP might be a good time for a meet
15:26:16 * Igloo thinks it should involve pizza
15:26:37 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","HToolkit 1.0 - http://htoolkit.sf.net/","wxHaskell 0.1 - http://wxHaskell.sf.net/","#haskell meetup @ ICFP, HaskellIrcChannel on the wiki"]' by shapr
15:26:43 <kosmikus> hmm, will there be an excursion?
15:26:45 <shapr> yes, pizza
15:26:51 <Heffalump> igloo: we could just go to HIM instead of going home :-)
15:27:00 <shapr> yes!
15:27:05 <Igloo> Oh, that would be convenient
15:27:10 <Heffalump> unless HIM is private, which I'm not sure since I haven't seen it publicised anywhere.
15:27:33 <shapr> I don't think so
15:27:42 <Igloo> I think we'd be pretty lucky to get a strike starting in the right window, though
15:27:50 <shapr> I think you guys should show up at HIM
15:27:57 <Igloo> Especially as they would be unlikely to start in the middle of the week
15:28:00 <Heffalump> yeah.
15:28:07 <Heffalump> and actually we'd probably have to wait at the airport.
15:28:13 <shapr> I think we should release lambdabot 2.0 before ICFP
15:28:38 <kosmikus> HIM is invitation only, but I don't think it's hard to get one -- otherwise I wouldn't be there ;)
15:29:00 <shapr> the only downside of a lambdabot 2.0 release is that I have to write documentation.
15:29:01 <Heffalump> I'd have thought working on Generic Haskell would count as quite a good qualification...
15:29:25 <kosmikus> Generic Haskell is not very active implementation-wise :(
15:29:27 <Heffalump> I'd actually have expected Igloo to be invited too, on similar grounds, though.
15:29:39 <Heffalump> what are you all up to instead, then?
15:29:55 <kosmikus> yes, I'm surprised that Igloo isn't invited -- in fact, I always just assumed he would be
15:29:57 <Heffalump> igloo: I added both of us to the bottom of the page, btw
15:30:03 * Riastradh will be able to go to the Scheme Workshop, but not the Haskell Workshop...oh well.
15:30:05 <shapr> ok, everyone going to PLI/ICFP put your name, nick, and days present on http://www.haskell.org/hawiki/HaskellIrcChannel ***
15:30:17 <Igloo> OK
15:30:37 <Heffalump> shapr: yes, some Haddock documentation for IRC.hs would be nice.
15:30:40 <shapr> then we'll know what time is best for the #haskell meetup
15:30:50 <shapr> oh good point
15:30:53 <Heffalump> I agree with Igloo's suggestion of the afternoon that ICFP finishes.
15:30:57 <Igloo> Already 3 different notations used for day ranges  :-)
15:31:00 <shapr> with Haddocks, I wouldn't have to write up text stuff
15:31:02 <Heffalump> Depending on what other random talks I want to go to, though
15:31:21 <Heffalump> oh, and I mispelt Uppsala
15:32:12 <shapr> oh SyntaxPolice and I have the same schedule I think
15:32:14 <Heffalump> it'd also be interesting to see if any significant part of lambdabot is susceptible to QuickCheckery
15:32:22 <shapr> Heffalump: yes, I very much agree
15:32:34 <shapr> I've tried to start some QuickCheckM tests, but life got in the way
15:32:53 <Heffalump> I'm not entirely sure it actually would be.
15:32:57 <Heffalump> But it'd be interesting to find out.
15:33:00 <shapr> it would
15:33:10 <shapr> John Hughes would be interested to hear a negative I think
15:33:15 <shapr> if we had good explanations to go with it
15:33:48 <shapr> oh, new Haddock release today
15:35:13 <kosmikus> I've added myself to the page
15:35:19 <shapr> I wonder if I should wear a nametag saying "shapr" so everyone recognizes me
15:35:20 <kosmikus> interesting page, btw, didn't see it yet
15:35:26 <Heffalump> before IRC.hs has documentation written, it needs an explicit export list written
15:35:31 <kosmikus> the Ralf Hinze papers are totally overrated ;)
15:35:39 <shapr> heh
15:35:47 <shapr> hi clausen 
15:36:12 <clausen> gday shapr
15:36:16 <Heffalump> kosmikus: the ones on GH?
15:37:00 <kosmikus> all of them -- personally, I always think that Ralf really tries to write his papers in a quite understandable way
15:37:08 <kosmikus> but of course I'm biased
15:37:13 <shapr> how so?
15:37:35 <kosmikus> how so? -> how I'm biased?
15:37:37 <shapr> yes
15:38:48 <shapr> why do you think you're biased about understing Ralf Hinze's papers?
15:38:56 <kosmikus> well, Ralf writes about things that are very close to my own work ...
15:38:59 <shapr> oh
15:39:03 * Heffalump looks confused, you're saying (a) that they're overrated and (b) that they're understandable
15:39:10 <Heffalump> ahhh.
15:39:17 <Heffalump> with respect to that page.
15:39:20 <shapr> right
15:39:25 <kosmikus> overrated as black, 3rd dan
15:39:28 <Heffalump> yeah :-)
15:39:34 <shapr>  black belt, 3rd dan - can read a ?RalfHinze paper in one sitting without feeling the need to consume alcohol
15:40:07 * Igloo observes I've hacked (FSVO hacked) the EM without understanding it  :-)
15:40:35 <shapr> Igloo: see, you should *really* come to HIM if you've worked with the EM and a) you're still sane and b) the EM still works
15:41:18 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","Haddock 0.5 - http://www.haskell.org/haddock/","wxHaskell 0.1 - http://wxHaskell.sf.net/","#haskell meetup @ ICFP, HaskellIrcChannel on the wiki"]' by shapr
15:41:19 <kosmikus> I agree with shapr
15:41:37 <Igloo> That would probably have taken me over the amount I can spend on the conference, and it's too late now I've booked flights
15:41:52 <shapr> maybe next year
15:41:55 * Heffalump is (a) brown belt [and everything underneath] and (b) black belt 3rd and 4th dan [but nothing inbetween]
15:42:40 * Igloo isn't sure exactly what black means, but apparently I can do it
15:42:42 <shapr> heh
15:42:49 <shapr> maybe we should refactor the belt system
15:43:02 <Heffalump> I lose out on black cos I don't know how to use the FFI really.
15:43:18 <shapr> I'm still not convinced I can do brown
15:43:28 <Igloo> I think being linear is a fundamental issue once you reach a certain level
15:43:34 <Heffalump> oh, and MonadTransformers definitely want to go in there.
15:43:42 <Igloo> About green, probably
15:43:42 <shapr> Igloo: how to make it linear?
15:43:49 <Igloo> Or maybe brown
15:43:56 * kosmikus feels the same as Heffalump about the grades
15:43:57 <Heffalump> I think brown.
15:44:01 <shapr> quick, fix it!
15:44:11 <Heffalump> but still, it is just a bit of fun :-)
15:44:16 <shapr> yes
15:44:16 <Igloo> shapr: No, I mean that it suddenly goes from being roughly linear to being only about 2 levels deeper in a massively branched tree
15:44:25 <Heffalump> and I was partly responsible for choosing them in the first place
15:44:45 <Heffalump> what are ClassMethodTypes?
15:44:47 <Igloo> The EM and type system extensions are completely unrelated, for example
15:44:49 <shapr> Igloo: how to make a ranking system then? merit badges? :-)
15:44:54 <shapr> actually merit badges might work
15:45:02 <Igloo> (weighted) purity test  :-)
15:45:04 <shapr> heh
15:45:07 <shapr> I like that plan
15:45:09 <Heffalump> ooh, yes.
15:45:13 <Heffalump> definitely.
15:45:21 * esap wonders where in the ranking system is "proficiency in category theory"...
15:45:30 <shapr> esap: we haven't gotten that far ;-)
15:45:38 * Igloo makes a note to get on the Weighted Haskell Purity Test Committee so I can bias it towards myself as much as possible  :-)
15:45:45 * shapr grins
15:46:13 <shapr> that test would require an entry like "Your name is Simon Peyton-Jones - +50 points"
15:46:20 <Heffalump> esap: that's a minus point, people proficient in category theory can't possibly be real programmers :-)
15:46:24 * Heffalump gd&r
15:46:27 * shapr grins
15:46:28 <Igloo> Because Simon won't be top already?
15:46:43 <esap> heffalump: I would say they are _no longer_ real programmers :-)
15:46:46 <Heffalump> we could have a Haskell code instead.
15:46:50 <Heffalump> (like the Geek code)
15:46:57 <shapr> STG+++
15:47:05 <shapr> LVM+
15:47:09 <shapr> MPTC--
15:47:11 <Igloo> We could have primitive capabilities and combinators...
15:47:16 <Heffalump> lol
15:47:22 <kosmikus> that'd be really fun
15:47:48 * shapr is still laughing
15:48:02 <esap> Yea, the gradings should be organized based on levels of detail, not on layers.
15:49:05 * esap would suggest both though.
15:49:22 <kosmikus> shapr: another thing about my Ralf Hinze bias: he's probably the author I've read the most Haskell papers of ... except SPJ, maybe, but I'd have to count
15:51:05 <Igloo> An n-dimensional graph, or maybe 2d slices thereof, of people's proficiency in the various skill as the axes, could be interesting to look at
15:53:10 <Heffalump> hmm, yes, but how would you rate proficiency that accurately?
15:53:18 <Heffalump> s/accurately/precisely/
15:53:25 <shapr> a purity test would be simplest
15:56:31 <shapr> Heffalump: what would the Haskell Code look like?
15:57:33 <Igloo> Hmm, yeah, i guess you need finer graining than people could easily guess
15:58:12 <Heffalump> the sort of thing you said above, really
15:58:18 <Heffalump> igloo: well, unless we wrote a test or something.
15:58:28 <Heffalump> (where we = the people with the most expertise in any given field)
15:58:35 <kosmikus> what if everyone gets to choose her/his favourite three styles to write factorial from the famous listing (with the possibility to add a style of his own, of course)?
16:02:01 <Heffalump> shapr: btw, who wrote the state storing code in lambdabot?
16:03:14 <shapr> which part of it?
16:03:31 <shapr> I asked Pseudonym for some good way to store the state
16:03:34 <shapr> he suggested IORef
16:03:43 <shapr> so I did it
16:03:45 <Heffalump> the IORef bit, mainly :-)
16:03:50 <shapr> Darius helped me with the Dynamic bits
16:04:08 <shapr> if there's a better way, please fix it :-)
16:04:08 <Heffalump> I don't really understand why an IORef is needed, mainly.
16:04:45 <shapr> iirc, the other option is to replace the IRCRWState each time
16:04:58 <shapr> which seemed prohibitively expensive when we were talking about it
16:05:13 <Igloo> Hmmm, it's bad when you're getting an error from gcc that only gets one google hit
16:06:07 <Heffalump> shapr: why would it be prohibitively expensive?
16:06:36 <shapr> I don't remember....
16:06:55 <Heffalump> update time logarithmic in the number of modules, I'd have thought
16:07:21 <kosmikus> btw, haddock 0.5 is available as a Gentoo ebuild -- everyone who's using Gentoo, please test :)
16:07:28 <shapr> wow, that's instant :-)
16:07:55 <kosmikus> it's one of the unproblematic packages ;)
16:08:07 <Heffalump> I should try gentoo.
16:08:18 <shapr> I should try making debs
16:08:21 <Heffalump> does it have a debootstrap-a-like?
16:08:25 <kosmikus> Heffalump: what are you using?
16:08:29 <Heffalump> debian
16:08:38 <kosmikus> what's debootstrap?
16:08:44 <Heffalump> well, moving over from redhat to debian atm, really
16:09:01 <Heffalump> it installs debian inside a chroot for you
16:09:31 <kosmikus> I don't see the point -- what do you use it for?
16:09:38 <Heffalump> making chroots :-)
16:09:54 <Heffalump> e.g. I have a stable and an unstable chroot for building packages for haskell-experimental in
16:10:06 <Heffalump> and I could make one to play with if I needed it
16:10:19 <Heffalump> likewise that'd be a nice simple way to play with gentoo
16:11:42 * kosmikus 's keybrd is broken ... one moment
16:12:21 <kosmikus> seems to work again :)
16:12:24 <Heffalump> igloo: you still around?
16:12:29 <Igloo> Yup
16:12:44 <Heffalump> your ghc6 packages changelogs mention the link ghci6 and the manpage ghc6i
16:13:26 <Igloo> Ah, ta
16:13:36 <kosmikus> well, the usual Gentoo installation process involves using a chroot -- maybe one can modifiy this so that it remains in the chroot for all time ...
16:13:56 <Heffalump> and you also appear to have created a symlink from ghci6.1.gz to ghc6.1.gz, but there's no ghc6.1.gz
16:14:09 <Heffalump> indeed:
16:14:10 <Heffalump> man: warning: /usr/share/man/man1/ghc.1.gz is a dangling symlink
16:14:32 <Heffalump> all the manpages seem to be dangling.
16:14:37 <Heffalump> (have a look on musketeer if you want)
16:14:41 <kosmikus> but generally, why would you need special functionality to be able to install a distro within a chroot environment?
16:15:05 <Heffalump> kosmikus: well, normally distro install stuff wants to start on a clean bootup, partition your system, find out about your hardware, etc
16:15:10 <Igloo> Is that the -5 debs?
16:15:14 <Heffalump> igloo: yes
16:15:29 <Heffalump> kosmikus: the main advantage of debootstrap is that it skips all that and just installs it for you
16:17:34 <Igloo> strange, "dpkg -L ghc6" thinks /usr/share/man/man1/ghc6.1.gz exists
16:18:44 <Heffalump> hmm, so it does
16:18:49 <Heffalump> I didn't see any errors on install.
16:19:39 <Igloo> Mind if I try reinstalling?
16:19:51 <Igloo> It's possible an old broken prerm broke it
16:20:10 <Heffalump> sure.
16:20:20 <Heffalump> it seems I was upgrading from -2
16:20:33 <Heffalump> (since the changelog I got emailed starts from -3)
16:20:57 <Igloo> Ah, I see you've installed sudo at last. Bah.  :-)
16:21:31 <Igloo> Well, that fixed it anyway
16:22:00 <kosmikus> Heffalump: the main disadvantage of Gentoo is that it does not have anything like a menu-based install, so you have to do everything yourself anyway, the upside being that you have very much influence on what's happening
16:23:09 <hdaume> anyone know the name of the xwin util that you can click mouse buttons on and it tells you which buttno was clicked?
16:23:18 <hdaume> (it also does keypresses,e tc...)
16:23:49 <shapr> sounds a little bit like xkeycaps or editres, but that's probably not them
16:24:38 <Heffalump> igloo: "at last"? I don't recall installing it recently.
16:25:41 <shapr> speaking of Xwin settings, any idea how I can make my mouse speed slower to get better resolution?
16:25:43 <Igloo> Well, since I last wanted to do something as root anyway. Or maybe I used to be able to remember that sudo wasn't there so I'd have to su. I certainly don't remember it sending e-mails off before
16:26:04 <Heffalump> no, I don't either
16:27:22 <kosmikus> shapr: some things can be set via xset
16:27:32 <shapr> thanks, I'll pursue that
16:27:50 <hdaume> ah, xev :)
16:33:26 <Igloo> kos: What arches do gentoo support OOI? And do they provide binaries for any of them?
16:35:07 <Heffalump> ooh, cool, looks like it should be nice and easy to install it in a chroot
16:35:25 <Heffalump> cos the installation procedure consists of "get a shell, run these commands" :-)
16:36:14 <Igloo> :-)
16:37:15 <shapr> Riastradh: psst hey
16:37:19 <kosmikus> Igloo: Gentoo is a source distribution, so it does not really provide binaries, although ...
16:37:43 <Heffalump> what does it do for gcc, ghc, etc?
16:37:49 <kosmikus> ... the GRP is in creation atm, meaning that a set of frequently used packages will be provided as binaries in common configurations
16:38:24 <Igloo> OK, I thought that until I saw somethign mentioning the packaging system handling them somewhere
16:38:28 <kosmikus> it supports the following architectures right now, albeit in different state: 
16:39:26 <kosmikus> x86, sparc, ppc, hppa, arm
16:40:29 <kosmikus> the installation process consists of booting from a LiveCD and doing a full bootstrap (in the ideal case); one can refuse to do the full bootstrap and install a precompiled set of binary packages and install additional packages from there
16:41:29 <kosmikus> currently, ghc is only supported on x86 (and sparc, I think); it bootstraps from a binary version initially, then recompiles itself
16:41:44 <kosmikus> I'd be more happy if complete bootstrapping from .hc files would work with gcc3
16:42:16 * Heffalump emerge syncs
16:42:31 <Igloo> Are there any ghc patches applied?
16:42:34 <kosmikus> wow -- you're fast?
16:42:52 <kosmikus> Igloo: such as?
16:43:07 <Igloo> Anything
16:43:12 <Heffalump> kosmikus: well, I could start from step 8 (untarring the stage tarball)
16:43:31 <Heffalump> (well, apart from actually finding and downloading it)
16:44:00 <kosmikus> no, but suggest something and I'll do it
16:44:23 <kosmikus> I'm Gentoo developer mainly out of egoism, not out of competence ;)
16:44:35 <Heffalump> hehe
16:45:27 <kosmikus> which patches are included in the debs right now?
16:45:29 * Igloo doesn't think GHC 6.0(.1) will compile itself with gcc 3.3, BICBW
16:45:53 <Igloo> Oh, but you can't be using 6.0 without patches with gcc 3.3 as that doesn't work on x86 either
16:45:58 <Riastradh> shapr, yes?
16:46:44 <Igloo> gcc 3.3 fixes and HOpenGL fixes are all I think, plus in the HE repository there are threaded RTS variants
16:46:51 <kosmikus> Igloo: that's true, but Gentoo hasn't made gcc3.3 stable yet
16:46:57 <kosmikus> gcc3.2.3 is current
16:47:07 <Igloo> Ah, OK - is that before the cpp changes?
16:47:19 <kosmikus> I think so, it still seems to work ;)
16:47:27 <Igloo> :-)
16:47:31 <kosmikus> I've discovered the CPP problems already, because I tried it once
16:47:36 <Igloo> How did you get the first sparc binary OOI?
16:47:41 <kosmikus> did you submit patches already?
16:47:52 <Igloo> It's fixed in the HEAD, yeah
16:47:58 <kosmikus> cool
16:48:08 <Igloo> (but not by me)
16:48:27 <kosmikus> sparc: problematic; I'm really looking for someone who can help me there, as I have no machines availble
16:49:01 <Igloo> Ah, OK, I thought it being supported meant you'd got it working
16:49:26 <Igloo> If I get debs built you could extract the binaries from them, anyway
16:49:27 * Riastradh whacks shapr awake.
16:50:08 <kosmikus> it was an I think -- it was called supported before I became a developer, and I basically did not care so far -- I always waited for the first bug report, but there have been none so far, which is *very* surprising
16:50:45 <Riastradh> *whack*whack*
16:51:00 <kosmikus> I guess one can get a working sparc binary by using gcc2.95 to bootstrap from .hc ...
16:51:33 <kosmikus> does anyone here have a sparc machine and wants to pass root right to me ;) ?
16:51:52 <Igloo> Oh, does gentoo try to build frmo hc too then?
16:52:27 <kosmikus> no, not right now.
16:52:49 <kosmikus> the supported scheme for x86 is to download a binary version and compile the sources with that one.
16:53:13 <kosmikus> however, in pre-gcc3 days it *did* bootstrap from .hc, and I'd like to return to that.
16:53:41 <kosmikus> Gentoo supports installing multiple versions of gcc, but I don't like to require that from any person who wants to install ghc.
16:54:01 <Igloo> Which versino of ghc was that?
16:54:15 <kosmikus> 5.04.2, I think ...
16:54:15 <shapr> Riastradh: eh?
16:54:22 <Heffalump> why did bootstrap.sh just beep at me lots?
16:54:43 <kosmikus> well, it did download 4.08 or something and then compiled 5.04.2 with that one
16:54:59 <kosmikus> Heffalump: that's too unspecific ;)
16:55:07 <Heffalump> hmm, a disadvantage of gentoo is that it causes packages source sites to be hammered more, and the resources available there might be rather variable
16:55:16 <Heffalump> kosmikus: something about replacing make.global
16:55:28 <Heffalump> it told me to do it, but I'm not sure why since I'd have expected a package to do it
16:55:36 <Heffalump> but it paused and beeped at me several times and then continued
16:56:00 <kosmikus> hmm, sounds strange from the little info I've got
16:56:12 <kosmikus> but Gentoo doesn't overwrite files in /etc automatically
16:56:19 <kosmikus> it's called config protection
16:56:41 <Heffalump> so what do you do when you want it to overwrite them?
16:56:57 <Heffalump> and if make.global isn't supposed to be changed locally anyway, why is it in /etc ?
16:56:58 <kosmikus> usually, you call etc-update
16:57:58 <kosmikus> I think /etc is the best place for make.global. It should, however, be possible, to define the config-protection more fine-grained than on a per-directory basis, though.
16:58:35 <Heffalump> I wonder if I should have kept a log of this bootstrap process.
16:58:37 <Heffalump> oh well.
16:58:40 * Heffalump goes to bed
16:58:43 <kosmikus> source locations: yes, that's true -- it requires some discipline by the package authors
16:59:22 <kosmikus> but at least the validity of tarballs is verified by means of MD5 checksums ...
16:59:27 <kosmikus> Heffalump: good night
17:00:16 <Heffalump> it seems that the common stuff comes from a gentoo site.
17:00:21 <Heffalump> which is a nice compromise
17:00:31 <kosmikus> Heffalump: you can keep a log of the process by setting and creating PORT_LOGDIR
17:00:40 <Heffalump> oh well, too late :-)
17:01:19 <kosmikus> the most frequently downloaded sources are automatically mirrored on the Gentoo sites
17:01:46 * Heffalump thinks an ideal distro would use RPM for source packaging, .deb type stuff (e.g. configuration file management) for binary packaging, and gentoo-style customisation
17:02:15 <Heffalump> they should use bittorrent for everything :-)
17:03:21 <kosmikus> you'll have to explain to me why RPM is better for source packaging ...
17:03:36 <Heffalump> do you know how deb source packaging works?
17:03:55 <Igloo> Hopefully if dpkg v2 ever becomes non-vapourware it'll be to your liking  :-)
17:04:11 <kosmikus> no
17:04:25 <kosmikus> bittorrent: I think they're working on something like that ...
17:04:27 <Heffalump> hmm. I'm too sleepy to go into how both work and then get into a discussion about it, I think :-)
17:04:36 <Heffalump> I need to write my rant-management system.
17:04:41 * shapr grins
17:04:44 <kosmikus> I was talking about the indefintie future ;)
17:04:44 <Heffalump> then I could write the rant and put it online.
17:04:49 * shapr plays with Squeak
17:04:56 <shapr> any other squeak users here?
17:04:58 <shapr> I want to try Nebraska
17:05:20 <Heffalump> hmm, this bootstrap should parallelise downloading and building.
17:05:26 <Heffalump> i.e. be building one thing while the next thing downloads
17:05:49 <Igloo> Anyway, I think Debian already has a BT-a-like for downloading packages  :-)
17:05:56 <kosmikus> there are about a thousand things I'd like to see improved about portage
17:06:01 <kosmikus> don't try to make me defend it
17:06:17 <kosmikus> still -- it's quite a good distro, I'm not convinced that debian is better
17:06:34 <shapr> I think different distros for different styles
17:06:45 <shapr> I'm a programmer who used to be a sysadmin
17:06:54 <Heffalump> Debian is far less hassle to install.
17:07:00 <kosmikus> shapr: of course; if I say "better", I mean "better for me" ...
17:07:07 <Heffalump> inevitably, given that it actually provides binary packages and expects people to use them
17:07:09 <shapr> kosmikus: yes, I understand
17:07:13 <hdaume> why can't we make patterns with tuples?  i.e., why do we have to write "((,) False)" instead of just "(False,)" ?
17:07:33 <shapr> hdaume: huh?
17:07:40 <shapr> oh, size one tuples
17:07:41 <shapr> I want that oo
17:07:42 * Heffalump doesn't understand either.
17:07:42 <shapr> too
17:07:42 <hdaume> erm, i meant sections
17:07:50 <Heffalump> ahh
17:07:50 <shapr> ?
17:07:55 <hdaume> well no
17:08:00 <hdaume> i don't know what they're called
17:08:02 <Heffalump> presumably (,) can only work on 2-tuples?
17:08:12 <hdaume> Heffalump: true
17:08:43 <hdaume> my point is we can write (1+) for ((+) 1), but cannot write (False,) for ((,) False)
17:09:23 <kosmikus> hdaume: what does that have to do with patterns?
17:09:29 <Heffalump> I think there'd be too much scope for confusing error messages.
17:09:30 <hdaume> i misspoke :)
17:09:35 <kosmikus> okau
17:09:38 <kosmikus> s/u/y
17:09:42 <Heffalump> people accidentally leave out a tuple element and get a type error instead of a syntax error
17:10:00 <kosmikus> still, I'd like it -- I've missed that many times
17:10:12 <Heffalump> it'd be very cool if (x,_,y,_) was a function of type a -> b -> (x,a,y,b)
17:10:24 <hdaume> presumably that would just be (x,,y,)
17:10:29 <Heffalump> or that, yeah
17:10:51 <Heffalump> but the placeholder _ notation could be useful in almost anything
17:10:52 <kosmikus> one could have a general symbol for "anonymous abstraction"
17:11:05 * hdaume contemplates creating http://www.isi.edu/~hdaume/Making_Haskell_More_Like_Line_Noise_Than_Perl.html
17:11:11 <Heffalump> I guess a quick lambda really isn't all that painful, though.
17:11:21 <hdaume> yeah
17:12:04 <Heffalump> right, really bed.
17:12:08 <hdaume> g'night
17:13:00 <kosmikus> night
17:14:09 <Strike> hdaume: the masochistic part of me would kind of like to see your proposed webpage :)
17:14:19 <hdaume> :)
17:14:21 <kosmikus> hdaume: I really did not want to criticize the contents; I think your tutorial is quite ambitious work; but I still wonder why you chose the style you have; it seems ugly to me, at least ...
17:14:46 <hdaume> kosmikus: not much effort has gone into the style :)...how so though?
17:15:05 <kosmikus> well, a couple of things
17:15:36 <kosmikus> inconsistent usage of fonts in a few places ...
17:15:53 <hdaume> kosmikus: inconsistent font usage is a "bug" :)
17:15:54 <kosmikus> the "Exercises" and "Solutions" thingies look very strange
17:16:09 <kosmikus> similarly, the "NOTE" thingies ...
17:16:13 <hdaume> kosmikus: yeah, i'm using some crappy package i found...i don't like it very much
17:17:21 <kosmikus> OTOH, having the capability to split the colored frames for user interaction or code examples across pages indicates very advances LaTeX knowledge, so I assumed that you did everything intentionally ...
17:17:44 <hdaume> kosmikus: ah, no, i just used some advanced verbatim package :)
17:17:52 <hdaume> kosmikus: i'm really not at all a latex expert
17:18:46 <kosmikus> well, you as the author should like your own tutorial, but I'd really be much happier for it to get a different look
17:19:11 <kosmikus> would you mind to send me the sources and let me try to make it look different?
17:20:51 <hdaume> kosmikus: /msg me your email addr
17:44:35 <clausen> gday Pseudonym
17:45:56 <Pseudonym> G'day.
17:46:11 * Pseudonym has a headache
17:46:15 <Pseudonym> Thought I'd share.
17:48:11 * Riastradh mumbles incomprehensibly about the ICFP and his location.
17:49:42 <kosmikus> Riastradh: will you be going to ICFP?
17:50:20 <Riastradh> No, that's why I'm mumbling incomprehensibly about it and my location.
18:01:18 <shapr`> hi Pseudonym 
18:02:44 <shapr> Pseudonym: hey, lambdabot has dynamic module loading now!
18:04:50 <Pseudonym> Oooh.
18:04:51 <Pseudonym> Cool.
18:05:30 <shapr> Heffalump did it, he gets the credit.
18:05:53 <Pseudonym> I'm still waiting for someone to port the higher-rank type inference engine to lambdabot. :-)
18:06:07 <Pseudonym> @listcommands
18:06:08 <lambdabot> I react to the following commands: ["all-dicts","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","example","fact","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","kosmikus","leave","listchans","listcommands","listmodules","lojban","more","msg","other","p
18:06:16 <shapr> @listmodules
18:06:17 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","fact","hello","karma","more","quote","seen","state","system","topic","type"]
18:06:21 <shapr> @listcommands dummy
18:06:21 <lambdabot> Module dummy provides the following commands: ["dummy","example","other","kosmikus"]
18:06:24 <shapr> urf
18:06:26 <shapr> wrong version
18:06:26 <Pseudonym> @dummy
18:06:27 <lambdabot> dummy
18:06:31 <shapr> @dynamic-reload dummy
18:06:32 <lambdabot> module reloaded
18:06:35 <shapr> @listcommands dummy
18:06:36 <lambdabot> Module dummy provides the following commands: ["dummy","example","other","kosmikus"]
18:06:39 <Pseudonym> Woohoo.
18:06:48 <shapr> hmm
18:06:51 <Pseudonym> @karma+ Heffalump
18:06:52 <lambdabot> Heffalump's karma has been incremented.
18:06:57 <shapr> oh
18:07:13 <shapr> @dynamic-reload dummy
18:07:14 <lambdabot> module reloaded
18:07:16 <shapr> @listcommands dummy
18:07:16 <lambdabot> Module dummy provides the following commands: ["dummy"]
18:07:19 <shapr> ah there we go
18:07:21 <kosmikus> @kosmikus
18:07:21 <lambdabot> Sorry, I don't know the command "kosmikus", try "lambdabot: @listcommands"
18:07:30 <shapr> whoops, lemme put it back :-)
18:07:44 <shapr> @dynamic-reload dummy
18:07:44 <lambdabot> module reloaded
18:07:46 <kosmikus> hmm, I'm no longer available with my personal command ...
18:07:47 <shapr> @listcommands dummy
18:07:47 <lambdabot> Module dummy provides the following commands: ["dummy"]
18:07:50 <shapr> oh
18:07:59 <shapr> @dynamic-reload dummy
18:07:59 <lambdabot> module reloaded
18:08:01 <shapr> @listcommands dummy
18:08:01 <lambdabot> Module dummy provides the following commands: ["dummy","kosmikus"]
18:08:01 <kosmikus> @shapr
18:08:02 <lambdabot> Sorry, I don't know the command "shapr", try "lambdabot: @listcommands"
18:08:03 <shapr> ah, there we go
18:08:07 <shapr> @kosmikus
18:08:07 <lambdabot> gutentag
18:08:16 <kosmikus> nice
18:08:34 <shapr> @dynamic-reload dummy
18:08:34 <lambdabot> module reloaded
18:08:37 <shapr> @listcommands dummy
18:08:38 <lambdabot> Module dummy provides the following commands: ["dummy","kosmikus","pseudonym"]
18:08:45 <kosmikus> @pseudonym
18:08:58 <shapr> oops
18:08:58 <Pseudonym> @jargon "creeping featurism"
18:09:00 <lambdabot> *** "creeping featurism" jargon "Jargon File (4.3.0, 30 APR 2001)"
18:09:00 <lambdabot> creeping featurism /kree'ping fee'chr-izm/ n. [common] 1. Describes a
18:09:00 <lambdabot>    systematic tendency to load more {chrome} and {feature}s onto systems at
18:09:00 <lambdabot>    the expense of whatever elegance they may have possessed when originally
18:09:01 <lambdabot>    designed. See also {feeping creaturism}. "You know, the main problem
18:09:03 <lambdabot>    with {BSD} Unix has always been creeping featurism." 2. More generally,
18:09:04 <Pseudonym> :-)
18:09:05 <lambdabot>    the tendency for anything complicated to become even more complicated
18:09:07 <lambdabot>    because people keep saying "Gee, it would be even better if it had this
18:09:10 <lambdabot> [14 @more lines]
18:09:14 <shapr> @dynamic-reload dummy
18:09:14 <lambdabot> module reloaded
18:09:17 <shapr> @pseudonym
18:09:17 <lambdabot> g'day
18:09:40 <shapr> actually, more than half the modules are runtime loaded now
18:09:50 <Pseudonym> Cool.
18:09:55 <shapr> yah, it's spiffy stuff
18:10:01 <Pseudonym> You know, in Perl, the dynamic loader module is dynamically loaded.
18:10:05 <Pseudonym> I still don't know how they do it.
18:10:10 * Pseudonym isn't sure anyone does
18:10:40 <shapr> I think the runtime loading stuff should be part of GHC now
18:10:55 <Pseudonym> Oh, has lambdabot been ported to GHC 6?
18:10:59 <shapr> sure
18:11:08 <Pseudonym> Cool.  There was some question of this last week.
18:11:21 <shapr> I think the module loading is going to become TH dependent pretty soon
18:11:21 <Riastradh> I think most of Perl is unknown by people how it's done.
18:14:03 * Heffalump appears
18:14:12 <Pseudonym> Greetings.
18:14:15 <Heffalump> 'lo
18:14:42 <Heffalump> do you know why the module state stuff uses IORefs?
18:15:06 <Pseudonym> Let me look.
18:15:28 <Heffalump> btw, I see no inherent reason why the dynamic loader couldn't load itself
18:15:39 <Heffalump> there'd have to be one copy compiled in statically, of course
18:15:45 <Pseudonym> True.
18:17:49 <kosmikus> Heffalump: wow, I wish I'd need as little sleep as you do ;)
18:18:02 <Heffalump> :-)
18:18:03 <shapr> speaking of which, I should go sleep now
18:18:07 <Pseudonym> Hmmm.  Can't update my copy.
18:18:17 <shapr> cvs.sf.net sucks :-(
18:18:21 <Heffalump> I started reading "for a bit" and then decided to come and see if my bootstrap wanted a second stage starting.
18:19:28 <kosmikus> Heff: and?
18:19:28 <Heffalump> Pseudonym: to summarise the code, the RW state in the StateT contains a FiniteMap from module names to IORef ModuleState (an existential constructor thingy)
18:19:47 <Heffalump> it doesn't (still doing glibc), but I made the fatal mistake of reading #haskell
18:20:06 <kosmikus> :-)
18:20:37 <Heffalump> Pseudonym: and I'm wondering why bother with the IORef, and if there is a good reason for it, then why not just put it in the module value itself rather than bothering with a separate state map
18:21:05 * shapr 's brain blows out
18:21:10 * shapr falls over asleep
18:21:54 * arguile is thinking it's a bit more permanent than 'asleep' with a blown out brain
18:22:34 <Pseudonym> I'm not sure why I wrote that.
18:22:52 <Pseudonym> I think I was actually intending to get rid of the RWState entirely at one point.
18:22:58 <Pseudonym> Replacing it with a read-only state of IORefs.
18:23:09 <Heffalump> right, I was going to say it makes sense to go the whole hog one way or the other, not have a half-way house :-)
18:23:22 <Pseudonym> WHat you probably see is a work-in-progress.
18:23:52 <Heffalump> do you think there's a big win to be had from going to entirely IORefs?
18:24:01 <Pseudonym> It depends.
18:24:10 <Pseudonym> If you're heavily modifying the RWState, then there is.
18:24:20 <Pseudonym> Because you're not repacking the state tuple all the time.
18:24:36 <Pseudonym> But lambdabot spends most of its time idle.
18:25:13 <Pseudonym> @vera idle
18:25:15 <lambdabot> *** "IDLE" vera "V.E.R.A. -- Virtual Entity of Relevant Acronyms December 2001"
18:25:15 <lambdabot> IDLE
18:25:15 <lambdabot>         International Date Line, East [+1200] (TZ)
18:25:15 <lambdabot>        
