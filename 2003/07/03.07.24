00:05:05 <reffie> is there a regexp thing for haskell?
00:07:36 <phubuh> http://www.haskell.org/ghc/docs/latest/html/base/Text.Regex.html
00:10:36 <reffie> oh cool
00:10:37 <reffie> thanks
00:11:17 <reffie> but i'm not sure haskell is really adapted for this kind of things
00:16:20 <d33p> sure it is, why wouldnt it be?
00:18:22 <Pseudonym> What kind of thing?
00:20:34 <reffie> stuff perl is good for..
00:20:44 <reffie> [or ruby]
00:20:59 <phubuh> a lot of I/O and text processing? i'd stick with perl [or ruby]
00:21:02 <reffie> yeah
00:21:07 <phubuh> but then again, i'm no haskell wizard
00:21:12 <reffie> me neither
00:24:51 <Strike> or python ;)
00:28:35 <reffie> eww
00:28:55 <reffie> actually, i still haven't tried python.
00:28:59 <Strike> ha
00:29:00 <reffie> i'll try it, one day.
00:29:12 <Strike> you say "eww" and yet ... never tried it
00:29:30 <reffie> the "eww" was a joke :P
00:30:26 <Pseudonym> Well Haskell's string performance isn't exactly stunning.
00:31:20 <Pseudonym> type String = [Char] has its benefits for undergraduate lab exercises, but I'm not sure it helps in real code.
00:33:19 <phubuh> i was writing a scrabble cheating program for my mom (don't ask :-)) in OCaml, and i found myself exploding the strings and imploding them when i was done with them, simply lists are a *lot* more convenient to work with than strings
00:33:46 <Pseudonym> It depends what you're doing with them.
00:34:00 <phubuh> yeah, i suppose
00:34:23 <o3_> yeah, String should just be Ptr Chars ;)
00:34:29 <o3_> Ptr Char, even
00:35:00 <Pseudonym> If you're not trolling over a string a char at a time, the performance isn't great.
00:35:48 <Heffalump> what other kind of thing do you want to do with them?
00:36:23 <Pseudonym> Take, for example, a compiler symbol table.  All you want to do is match them and print them out.
00:36:45 <Pseudonym> So long as your String satisfies Ord and probably Show, you don't need anything else.
00:37:22 <phubuh> isn't Eq enough? :-)
00:41:31 <Heffalump> but in that case, your strings will be passed around as pointers
00:41:34 <Heffalump> I guess they'll waste space
00:41:49 <Heffalump> phubuh: not if you want efficient lookup :-)
00:42:10 <Heffalump> if you have Ord, you can get a logarithmic time lookup operation - without it, it'll take linear time
00:42:52 <phubuh> ah
00:43:40 <Pseudonym> Not only do strings-as-lists waste space, they're also very cache inefficient.
00:43:49 <Pseudonym> inefficient
00:43:56 <Pseudonym> That's what I wrote, right.
00:43:58 <Heffalump> but if you're not going to process them, they'll never get into your cache
00:44:09 <Heffalump> oh, they will when you do comparisons, duh
00:44:10 <Pseudonym> But you need to compare them.
00:44:13 <Pseudonym> Right. :-)
00:44:29 <Heffalump> but most of the time you'll just look at one or two characters
00:45:09 <Pseudonym> Another thing is that if you are extracting substrings (e.g. with regexes), you can share bits of the string if you used a representation like UArray Char instead.
00:45:31 <Pseudonym> With [Char], you can only share suffixes.  (Oh, and the actual Chars.)
00:46:18 <Pseudonym> (But Chars can be implemented as flyweights anyway.)
00:48:28 <Pseudonym> This is, of course, my personal prejudice that strings should be opaque types.
00:48:44 <Pseudonym> Like PackedString.
00:50:14 <Pseudonym> Anyway, time for me to go home.  Nytol.
01:00:47 <reffie> is ocaml any good?
02:40:38 <earthy> back to doing taxes
02:42:42 <Heffalump> good for the soul.
02:52:23 <reffie> heh.
04:13:03 <shapr> @yow
04:13:04 <lambdabot> QUIET!!  I'm being CREATIVE!!  Is it GREAT yet?  It's s'posed to
04:13:04 <lambdabot>  SMOKEY THE BEAR...
04:13:21 <shapr> gooood morning #haskell!
04:15:12 <ibid> what does "gooood morning #haskell!" mean?
04:15:42 * andersca bounces
04:16:16 <ibid> :-)
04:16:25 <ibid> (somebody say it!)
04:16:27 * Igloo awakens
04:16:59 * shapr boings
04:17:03 <Igloo> I'm confused - are you wanting a quote from the film whose name eludes me?
04:17:10 <ibid> (yes)
04:17:15 <shapr> Igloo: like good morning vietnam?
04:17:31 <Igloo> I was thinking it can't be that easy  :-)
04:17:48 <ibid> bah :-)
04:18:04 * Igloo can't remember what the reply was, but something like "It means, I dunno, good morning #haskell I guess" I think
04:18:05 <shapr> what can I say, higher order jokes are beyond me
04:18:11 <ibid> Igloo: right :-)
04:18:54 <Igloo> Then again, I think the question was worded more like "'good morning #haskell'? What's that even supposed to mean, anyway?"
04:19:54 <Igloo> Bah, ghc6 6.0-3 still hasn't gone into unstable - I think the HE repo must be broken
04:20:15 <ibid> Igloo: yeah, well, i would have answered "i think it means 'good morning #haskell'" had i not taken the role of the (lieutenant/sgt major; whihchever)
04:20:22 <Igloo> shapr: If you take the packages from http://www.syntaxpolice.org/haskell-experimental/mini-dinstall/incoming/ then you should be able to use ghc6-threaded to compile with the threaded RTS
04:20:51 <shapr> Igloo: yay!
04:22:18 <reffie> yay!
04:32:48 <shapr> wow, someone who registered for one of my EU Project websites is named Bonomo Wawa
04:33:52 * andersca wawas
04:34:43 <ibid> mobutu sese seko
04:34:48 <shapr> that's a cool name too
04:34:56 <ibid> yeah
04:35:24 <ibid> considering that "seko" is slang finnish for 'insane' :-)
04:35:44 <shapr> hopefully he's not studying in .fi
04:35:59 <Igloo> shapr: See http://haskell.org/pipermail/glasgow-haskell-users/2003-July/005491.html for a program to test that the threaded RTS is being used incidentally
04:36:03 <ibid> you remember what he was?
04:36:12 <shapr> no?
04:36:16 <shapr> Igloo: thanks!
04:36:23 <ibid> he was a dictator somewhere in africa, iirc
04:36:47 <ibid> i remember hearing that name in news when i was smaller
04:37:00 <Heffalump> I forget which country.
04:37:07 <Heffalump> Congo?
04:37:14 <ibid> me too
04:37:16 <Heffalump> he was fairly notorious
04:37:23 <ibid> apt name, then :-)
04:37:57 <ibid> wasn't congo called zaire then, or am i mixing up things
04:38:35 <Heffalump> yeah
04:39:07 <ibid> some of the past un general secretaries have had fun names too
04:39:13 <ibid> if i could remember them...
04:39:17 <ibid> u thant, i think
04:39:25 <shapr> I'm a fan of fun names, having chosen one myself.
04:39:45 <ibid> boutros boutros ghali
04:39:52 <Heffalump> U Thant
04:39:59 <ibid> as i said :-)
04:40:55 <Heffalump> oh, sorry, you did.
04:40:58 <Heffalump> I completely missed that :-)
04:41:00 <ibid> :-)
04:41:30 <Heffalump> Javier Perez de Cuellar and Kofi Annan are positively simple by comparison.
04:41:34 <ibid> yes
04:42:01 <shapr> I always thought Xuxa was a neat name
04:42:04 <shapr> though a scary person
04:42:30 <ibid> who's xuxa?
04:42:51 <shapr> she's a six foot tall blonde wide-shouldered brazilian porn start turned kids show hostess
04:43:47 <reffie> porn start!
04:44:07 <shapr> all irc users are required to type/read fluent typo
04:44:15 <shapr> lessons can be found in any irc channel
04:44:23 <shapr> hoi dark, hoe gaat het met jou?
04:44:33 <dark> Het gaat zijn gangetje :)
04:44:42 * shapr goes to look up that word
04:45:00 <ibid> puhutaan nyt sitä suomea!
04:45:00 <reffie> ik hou van jou!
04:45:17 <reffie> vittu
04:45:20 <reffie> kikkeli..
04:45:22 <shapr> makkarani paistettua saunassa
04:45:22 <reffie> etc
04:45:31 <dark> Typo is ok, but ppl w/spk as if their keyboard is broken should be shot.
04:45:33 <ibid> you're missing a verb there :-)
04:45:44 <shapr> paistettu ?
04:45:53 <dark> roasted, or something :)
04:45:59 <shapr> I've forgotten the passive form of roasted
04:45:59 <ibid> i mean a predicate, paistettu is nominal form
04:46:13 <ibid> paistetaan
04:46:18 <shapr> ah, kiitos
04:46:19 <ibid> paistettiin
04:46:34 <shapr> makkarani paistetettiin saunassa
04:46:45 * shapr snickers
04:46:49 <dark> Food words are important.
04:46:53 <shapr> my sausage roasts in the sauna!
04:47:05 <ibid> was roasted, actually
04:47:13 <shapr> close enough
04:47:21 <ibid> paistuu is "roasts"
04:47:27 <shapr> that's about as far as I got in my finnish lessons
04:47:33 <ibid> heh
04:47:38 <shapr> but I'm going to take more finnish lessons after I've learned swedish
04:47:55 <ibid> hö-öns förtjusande mö
04:47:55 <reffie> k
04:48:07 <ibid> (somerthing my father likes to say;-)
04:48:07 <shapr> minä tarvitsen puhu suomea
04:48:25 <ibid> you are missing something there :-)
04:48:30 <shapr> I usually am :-)
04:48:35 <shapr> my finnish sucks
04:48:47 <ibid> if you add a comma, "minä tarvitsen, puhu suomea", it's 'i need; talk finnish'
04:49:21 <shapr> well, I was trying to say "I want to speak finnish" but I couldn't remember want
04:49:29 <ibid> haluan puhua suomea
04:49:32 <shapr> oh right
04:49:35 <shapr> halua
04:49:40 <ibid> haluta :-)
04:49:44 <shapr> bah :-)
04:49:47 <ibid> (dictionary form)
04:49:59 <shapr> minä en puhu suomea!!
04:50:05 <ibid> halua is a form of "halu", 'desire'
04:50:10 <ibid> shapr: correct!
04:50:14 * shapr laughs
04:50:23 <shapr> the only thing I can say correctly is that I don't speak finnish
04:50:41 <Igloo> ka-plach!
04:50:46 <shapr> victory!
04:51:04 <Igloo> Oh, is that what it means? I was worried I was being insulting
04:51:10 * shapr checks kli.org
04:51:18 <ibid> Qapla'
04:51:34 <Igloo> You're probably right
04:51:42 <ibid> (i have a klingon expert helping me;-)
04:51:47 <shapr> http://kli.org/tlh/phrases.html
04:52:20 * Igloo found out the other day that the glyphs used in Klingong fonts have dubious legal status, so we should write our Haskell programs in a Tolkien language instead when the implementations suppport it  :-)
04:52:49 <reffie> k
04:53:11 <ibid> strange as it may sound, there is no 'official' way to write klingon in the klingon script
04:53:28 <shapr> as soon as Haskell supports tengwar, I'm ready to use it: http://kungens.kemi.fi/~shae/emacstengwar.jpg
04:53:31 <Igloo> shapr: Is it on there?
04:53:31 <ibid> the only official form is that american translitteration
04:54:11 <shapr> Igloo: no, though I expected it there
04:54:14 <Igloo> Viewing Hebrew with gvim was simple, so I anticipate no problems there
04:54:40 <shapr> tengwar is more difficult than hebrew I suspect
04:55:00 <shapr> since vowels go on top of the previous or following consonant, depending on style
04:55:25 <shapr> the TTF tengwar fonts implement that with massive kerning offsets, which upsets nearly any editor
04:55:38 <Igloo> Ih, I expect that if I can get anything to work it will all work
04:55:49 <o3_> Igloo: are you going to HIM?
04:55:53 <Igloo> No
04:55:57 <shapr> aww, why not?
04:55:59 <o3_> :(
04:56:03 <shapr> you know much more about GHC than I do
04:56:14 <o3_> Igloo: you can join sean and myself in dissecting TH
04:56:19 <shapr> yes yes, please come to HIM
04:56:21 <Igloo> Because it would cost about £100 for one thing  :-)
04:56:36 <Igloo> Where was it advertised OOI?
04:56:36 <shapr> bah, we should have a TH 
04:56:38 <shapr> fund
04:56:43 <shapr> I don't think it was advertised.
04:56:56 <ibid> (his infernal majesty?)
04:57:10 <shapr> Haskell Implementors Meeting
04:57:12 <shapr> or something like that
04:57:14 <ibid> ah :-)
04:57:50 <shapr> I'm going as part of the LIP
04:57:58 <shapr> (Library Infrastructure Project)
05:00:21 <adept> people, does anybody worked with StrategyLib?
05:00:38 * adept . o O (Damn. My English sucks :(
05:01:39 <shapr> adept: that's okay, my russian sucks
05:02:10 <adept> less than your finnish? ;)
05:02:27 <shapr> yes, I have less russian than I have finnish
05:02:58 <adept> shapr: how about StrategyLib? ;)
05:03:05 <shapr> is that from strafunski?
05:03:10 <adept> shapr: yep
05:03:26 <shapr> I haven't used it
05:03:33 <shapr> but I think some people here have used it
05:04:08 <adept> shapr: google has only announcements of new versions :(. Can you give me some names?
05:06:20 <shapr> I think SyntaxPolice and Igloo have used it, but I'm not sure about that.
05:06:41 <Igloo> I helped Marvin do something with it
05:07:07 <Igloo> I can't remember if StrategyLib was involved
05:07:17 <adept> Igloo: ayt?
05:07:23 <adept> SyntaxPolice: ayt?
05:08:24 <shapr> what's ayt?
05:08:31 <adept> are you there?
05:08:38 <shapr> oh
05:08:54 <shapr> adept: what are you trying to do with StrategyLib?
05:09:00 <shapr> I didn't really understand your description yesterday
05:09:15 <adept> shapr: description of what?
05:09:42 <shapr> you want to do the HaXML thing with ASN.1, right?
05:09:48 <shapr> hi atom-z, what's up?
05:09:59 <atom-z> nothing really
05:10:13 <shapr> found any new Haskell questions?
05:10:38 <atom-z> not yet. the tutorials (ocaml and haskell) seem to explain most things so far
05:10:45 <adept> shapr: more-or-less so, yes. I've already had a good start with Strafunski, but some of the stratefies just escape me :(
05:11:00 <atom-z> but one thing i would like to know is how to convert strings->ints and vice-versa
05:11:01 <shapr> adept: have you read this paper: http://www.haskell.org/hawiki/DesignPatternsForFunctionalStrategicProgramming
05:11:02 <shapr>  ?
05:11:34 <adept> shapr: yes, have it open right now :) 
05:12:01 <adept> shapr: but, for example, "select" strategy gives me fits :(
05:13:26 <shapr> @type chr
05:13:27 <lambdabot> chr :: Int -> Char
05:13:42 <shapr> @type asc
05:13:49 <Igloo> @type ord
05:13:50 <lambdabot> ord :: Char -> Int
05:13:52 <shapr> thanks :-)
05:14:02 <adept> hmm ...
05:14:05 <adept> @type select
05:14:20 <shapr> adept: it only works for Prelude functions
05:14:29 <adept> @type filter
05:14:30 <lambdabot> filter :: (a -> Bool) -> [a] -> [a]
05:15:20 <shapr> adept: what problem are you having with select?
05:16:30 <shapr> select appears to be much like the HaXML/HXmlToolbox node selectors
05:17:17 <adept> shapr: i'll try one baby step at a time. 1)I have parsed ASN.1 module ang got load of data. Now I want to select one of so-called "TypeAssignment"s (they are the top-level "TypName ::= [PRIVATE 42] IMPLICIT SEQUENCE OF {...}" things) and produce Haskell data type for the right side of expression. Clear so far?
05:17:54 <shapr> ok
05:18:32 <reffie> HaX0rML. great name for a haskell xml thing.
05:18:35 <reffie> or something.
05:19:12 <shapr> reffie: sounds like a cross between Haskell and ML
05:19:22 <reffie> i know :(
05:19:23 <shapr> for script kiddies
05:19:27 <reffie> heh
05:19:44 <shapr> adept: that sounds correct
05:20:00 <adept> shapr: Ok. But this right side could have references to the other types like "SEQUENCE OF TimeStamp". I want to look up definition for that type an substiture it for this type reference so it will be "SEQUENCE OF [PRIVATE 74] IMPLICIT OCTET STRING", for example. Still with me?
05:20:38 <shapr> yes, I undertand
05:20:42 <shapr> understand even
05:20:45 <adept> reffie: Haskell XOR ML = HaX0rML :)
05:22:28 <adept> shapr: So i have " resolveAssignedType :: Term t => String -> t -> TypeAssignment" which looks this way:" resolveAssignedType typeName module = let ta = findTypeAssignmentByName typeName mmodule in replaceBoundDefinedTypes ta module"
05:23:03 <reffie> heh
05:24:17 <shapr> ok, I vaguely understand that.
05:24:40 <adept> shapr: "replaceBoundDefinedTypes module" is a strategy (idTP `adhocTP` (return . resolveDefined module)), "resolveDefined" is simply substitutes DefinedTypeRefs with ... Well, with appropriate thing :) So, here comes the problem ...
05:26:38 <shapr> ?
05:27:16 <adept> shapr: I want resolveAssignedType to be a strategy. For that i should be able to select TypeAssignment by name and then work with it with replaceBoundDefinedTypes strategy. I tried "applyTP $ select matchTypeAssignment `passTU` \term -> resolveBound..." but it blows with ... wait a sec ...
05:31:35 <shapr> I don't completely understand what your Bound and Defined mean for the ASN.1 types
05:32:29 <shapr> as I understand it, you want to replace one type with another, preserving the types attached to it
05:33:18 <shapr> is the AssignedType the new one to be inserted in place of the original one?
05:33:26 <shapr> hi Leimy 
05:33:31 <Leimy> howdyt
05:33:38 <shapr> learning Haskell?
05:33:42 <Leimy> yeah
05:33:47 <shapr> have any questions?
05:33:50 <Leimy> playing with max and foldr :)
05:33:55 <Leimy> and list manipulation
05:33:56 <shapr> yah, fun stuff
05:33:58 <Leimy> not really :)
05:34:05 <Leimy> It just reminds me of my lisp days :)
05:34:10 <shapr> have you seen http://www.haskell.org/learning.html already?
05:34:21 <Leimy> I am doing a tutorial from PDF
05:34:25 <Leimy> I think that I got it from there :)
05:34:31 <Leimy> the excercises aren't bad :)
05:34:33 <shapr> cool
05:34:35 <adept> shapr: Let TimeStamp and FooBar be types. For TimeStamp i have definition (TimeStamp ::= ....), for FooBar - not. Both TimeStamp and FooBar are mentioned in definition of CoolType. They both are Defined Types mentioned in CoolType, but only TimeStamp is bound (to some definition). I feel that my terminology sucks :(
05:35:59 <shapr> Leimy: if you want Haskell code toys, there's lambdabot, and lots of other stuff in the cvs tree of sf.net/projects/haskell-libs/
05:36:04 <shapr> or I can show you various demo code
05:36:11 <shapr> in any case, feel free to ask questions when you find them
05:36:18 <Leimy> ok
05:36:22 <Leimy> thanks
05:36:37 <shapr> @fact source
05:36:38 <lambdabot> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
05:38:22 <shapr> adept: why don't you have a definition for FooBar? I think I don't understand some parts of your problem.
05:38:37 <Leimy> ah... Haskell *can* compile to native binary?
05:38:39 <shapr> btw, if you have a Haskell ASN.1 spec parser, I'd enjoy playing with it.
05:38:51 <shapr> Leimy: sure, binary or interpreted, your choice.
05:39:06 <Leimy> how is the speed of generated Haskell binary code compared to C?
05:39:27 <adept> shapr: I can send it to you. I'd like some CVS rep more, but i dont have any world-accessible boxes now :(
05:39:45 <shapr> adept: if it's your own code, you could put it into haskell-libs
05:39:59 <adept> shapr: how can I get access?
05:40:14 <shapr> Leimy: execution speed is several times slower, but development speed is several times faster :-)
05:40:30 <shapr> adept: I'll add you as a developer, do you already have an account on sf.net ?
05:40:51 <adept> shapr: yes
05:40:55 <adept> shapr: "astapov"
05:40:58 <shapr> ok
05:41:08 <adept> shapr: but i dont own any projects
05:41:12 <shapr> that's ok
05:41:25 <shapr> is this code under some sort of OSS compatible license? or is it commercial code?
05:41:40 <adept> shapr: i'll make it GPL
05:41:44 <shapr> excellent
05:42:01 <shapr> anything like lGPL, GPL, BSD, MIT, etc is fine
05:43:32 <shapr> adept: ok, you now have CVS write access
05:43:56 <steveh> leimy: http://www.bagley.org/~doug/shootout/
05:44:03 <steveh> Leimy: haskell results are "ghc"
05:44:13 <shapr> steveh: isn't that with ghc5.0 though?
05:44:14 <Riastradh> Leimy, as Haskell has a safe and static type system and garbage collection, type errors are all caught at compile-time, and you never have to worry about memory problems.
05:44:39 <steveh> shapr: blah blah, it might be with gcc 2.x too :)
05:45:03 <steveh> nope! guess not.
05:45:06 <shapr> adept: you can put your code in a new top-level, or under libs/ or under Unstable/<personal name of your choice>
05:45:19 <Leimy> Riastradh: that's awful nice
05:45:22 <shapr> well, since GHC 6.0 is out, I want a rematch in the shootout :-)
05:45:41 <Leimy> so perhaps... the correct question is how does compiled Haskell code  compare to Java :)
05:45:58 <shapr> far less tortuous
05:46:06 <Leimy> in terms of speed :)
05:46:07 <adept> shapr: where can I find correct cvs root spec? i tried searching on www.haskell.org ...
05:46:11 <Riastradh> shapr, Doug Bagley doesn't seem to want to change his shootout at all -- for example, Bruce Hoult sent in some Dylan code and asked him to put Dylan onto the list with GwydionDylan, but he refused.
05:46:22 <shapr> adept: https://sourceforge.net/cvs/?group_id=44807
05:46:34 <Leimy> Riastradh: sounds like its time to have a new shootout :)
05:46:39 <Riastradh> Indeed.
05:46:42 <atom-z> probably
05:46:48 <shapr> adept: the haskell-libs sourceforge project is not officially connected with haskell.org, but it might be sometime soon
05:46:54 * Leimy just wrote a factorial function :)
05:46:59 <Leimy> in a test.hs file
05:47:01 <Leimy> not too bad
05:47:04 <steveh> Leimy: which one did you write? :)
05:47:05 * Leimy kind of likes this
05:47:08 <Leimy> HAH
05:47:13 <Leimy> one with if and else
05:47:15 <atom-z> shapr: can you help me with something?
05:47:19 <Riastradh> We've got a list of Haskell factorial functions.
05:47:19 <shapr> atom-z: I'll try
05:47:20 <Riastradh> It's pretty big.
05:47:26 <steveh> http://www.willamette.edu/~fruehr/haskell/evolution.html
05:47:27 <steveh> ;)
05:47:30 <reffie> hehe
05:47:36 <Leimy> factorial x =
05:47:37 <Leimy>         if x < 1
05:47:37 <Leimy>                 then 1
05:47:37 <Leimy>                 else x * factorial (x - 1)
05:47:39 <Leimy> that one :)
05:47:43 <reffie> freshman.
05:47:58 <shapr> atom-z: what is it?
05:48:00 * Leimy goes on to fibonnaci
05:48:07 <atom-z> shapr: what is the "->"?
05:48:14 <shapr> atom-z: it's the function symbol
05:48:19 <atom-z> ic
05:48:32 <ibid> function type constructor, no?
05:48:34 <atom-z> so it can be used to declare functions?
05:48:46 <reffie> to declare the type
05:48:51 <reffie> i think.
05:48:53 <shapr> it can be used to declace types, or to declare anonymous functions
05:48:57 <reffie> [of a function]
05:49:06 <steveh> i follow the ones on the "evolution" page until about combinatory or so
05:49:09 <shapr> so addOne :: Int -> Int
05:49:16 <shapr> says one Int in, one Int out
05:49:22 <reffie> i thought '\' was used to declare anonymous funcitons..
05:49:24 <reffie> functions
05:49:24 <steveh> i can grok what a couple of the others are doing of course
05:49:33 <shapr> reffie: (\x -> x + 1)
05:49:43 <atom-z> shapr: ah ok
05:50:09 <shapr> I dunno if you'd call that declaring an anonymous function...
05:50:19 <reffie> oh right
05:50:39 <shapr> atom-z: have you used map in Python?
05:50:48 <steveh> Leimy: fibonacci's got a really nifty one in haskell
05:51:03 <adept> shapr: how can I contribute public key and not go through this 'enter password' any more? ;)
05:51:19 * reffie enters password
05:51:44 <shapr> adept: there's a link at the bottom of the url I pasted
05:51:45 <adept> shapr: should I put to libs or to Unstable?
05:52:05 <shapr> adept: your choice
05:52:17 <atom-z> shapr: not really, no
05:52:31 <shapr> if you put it under Unstable, you want to make something like Unstable/Adept or Unstable/Astapov or whatever kind of personal name you want
05:52:53 <atom-z> shapr: where is it in the python docs?
05:52:54 <shapr> if you put it under libs/ I'd suggest a representative project name
05:53:11 <shapr> atom-z: I think it's in the tutorial, but I'm not sure of that
05:53:22 <shapr> atom-z: in any case, map works pretty much the same in both Haskell and Python
05:53:37 <shapr> map (\x -> x + 1) [1,2,3] is Haskell
05:53:50 <shapr> map(lambda x:x+1,[1,2,3]) is Python
05:54:18 <Leimy> fib x =
05:54:18 <Leimy>         if x <= 2
05:54:18 <Leimy>                 then 1
05:54:18 <Leimy>                 else (fib (x - 1)) + (fib (x - 2))
05:54:28 <Leimy> I am sure there is a better way for fib than that :)
05:54:32 <adept> shapr: heh. I'm thinking about a name but only something unpronounceable comes to mind. Ideas?
05:54:46 <steveh> leimy: yeah, but don't feel bad you didn't get it
05:54:51 <reffie> what's the point of these lambda things?
05:54:58 <steveh> Leimy: I can't think well enough haskell to get it either
05:55:04 <shapr> adept: what's the idea of the project? a general purpose ASN.1 library?
05:55:09 * Leimy thinks ... there might be a way to put fib in a foldr or foldl?
05:55:20 <adept> reffie: you save on function names ;)
05:55:27 <reffie> other than that.
05:55:29 <steveh> Leimy: not only that, there's a way to write it so it memoizes
05:55:37 <steveh> Leimy: making performance much better
05:55:40 <adept> shapr: yes. that, and a BER encoder/decoder
05:55:44 * Leimy doesn't know what memoizes is :)
05:55:56 <adept> shapr: like snacc for C++/tcl or erlag stuff for ASN.1
05:56:05 <steveh> leimy: !
05:56:13 <Leimy> ?
05:56:22 <shapr> adept: well, you could put into an asn1 directory
05:56:27 <steveh> Leimy: well, the issue with many recursive fibonacci functions is that it recomputes a lot of the same values
05:56:34 <Leimy> oh
05:56:36 <Leimy> memorizes?
05:56:42 <Leimy> or dynamic programming?
05:56:49 <steveh> Leimy: "memoizes" just means it saves those values so it doesn't have to be recomputed
05:56:50 <steveh> yes
05:56:51 <Leimy> where you try not to recompute the same value twice?
05:56:53 <steveh> dynamic programming
05:56:53 <Leimy> ok! :)
05:56:53 <Heffalump> dynamic programming requires some form of memo table
05:56:54 <steveh> same deal
05:57:01 <Leimy> terminology  issue
05:57:07 * Leimy doesn't do dynamic programming
05:57:09 <Heffalump> but memoisation is more general (isn't it?)
05:57:27 <steveh> Heffalump: memoization is one common technique in dynamic programming iirc
05:57:28 <shapr> atom-z: map is called a 'higher order function' because one of the values it takes is another function
05:57:37 <shapr> atom-z: then it uses that function like using a hammer on a row of nails
05:58:09 * Leimy never really studied dynamic programming
05:58:10 <steveh> Leimy: this is the fibonacci I've seen that broke my brain the first time I saw it:
05:58:15 * shapr never really studied
05:58:17 <Leimy> shoot
05:58:24 <steveh> fibs = 0 : 1 : (zipWith (+) fibs (tail fibs)) 
05:58:27 <shapr> yay, my favorite
05:58:32 <steveh> fib n = fibs !! n 
05:58:33 <Leimy> what's zipWith?
05:58:33 <reffie> uh
05:59:22 <shapr> the lazy list version is way cool
06:00:01 <steveh> zipwith takes two lists
06:00:04 <steveh> and a function
06:00:04 <Igloo> Joins a pair of lists using the function given on each element
06:00:08 <shapr> @type zipWith
06:00:08 <Igloo> @type zipWith
06:00:08 <lambdabot> zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
06:00:08 <lambdabot> zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
06:00:11 <steveh> or should I say, a function and two lists
06:00:12 <shapr> in stereo :-)
06:00:17 <Igloo> vooob voooob  :-)
06:00:21 <shapr> booov boov!
06:00:33 <andersca> ziigo ziigo
06:00:35 <andersca> right dennisb?
06:00:37 <steveh> and it outputs the list that results when you apply the function to corresponding elements of the list
06:00:42 <steveh> e.g.
06:01:14 <Leimy> so its a "reduce"
06:01:25 <reffie> it makes my head hurt.
06:01:33 <Leimy> wel... is that right?
06:01:33 <Leimy> hmmm
06:01:34 <steveh> Prelude> zipWith (+) [1,2,3] [2,4,6]
06:01:34 <steveh> [3,6,9]
06:01:47 * Leimy deals with MPI all day
06:01:55 <Igloo> I don't know what you mean by a reduce
06:02:02 <reffie> MPI?
06:02:12 <steveh> so what fibs does is create a list whose first two values are 0 and 1
06:02:26 <Leimy> well... can't I do zipWIth (max) [1,2,3] [4,5,6]
06:03:04 <steveh> don't capitalize the I?
06:03:08 <Leimy> it just compares the two lists
06:03:12 <steveh> sorry I misread that
06:03:12 <Leimy> sorry... typeo
06:03:20 <Heffalump> for an associative operator, reduce is foldr1 / foldl1
06:03:23 <steveh> looked like "I can't" for some reason :)
06:03:26 <Leimy> ah
06:03:28 <shapr> Leimy: cool, you get to play with MPI
06:03:35 <Heffalump> I don't think zipWith is a reduce, as I understand it
06:03:39 * Leimy doesn't play... he implements
06:03:44 <shapr> Leimy: does that mean you have a beowulf cluster handy?
06:03:47 * Leimy works for MPI-SOfttech
06:03:54 <Leimy> I have ASCI Blue "handy"
06:03:56 <Leimy> :)
06:03:59 <shapr> what's that?
06:04:07 <steveh> SWEET
06:04:09 <Leimy> was #1 supercomputer in the world
06:04:16 <Leimy> on the top 500 list
06:04:17 <steveh> we are not worthy
06:04:20 <Leimy> we wrote an MPI for it
06:04:22 <shapr> oh, cool
06:04:28 * steveh would like to work with some big iron
06:04:30 <Leimy> I can get to ASCI snow and baby as well
06:04:32 <Leimy> and Pink
06:04:34 <Leimy> and Cadillac
06:04:38 <Leimy> and Grendels
06:04:41 <reffie> MPI?
06:04:43 <Leimy> and... CPlant
06:04:44 <Leimy> :)
06:04:49 <Leimy> Message Passing Interface
06:04:54 <reffie> k
06:04:55 <shapr> @fact MPI Message Passing Interface
06:04:56 <lambdabot> set mpi to Message Passing Interface
06:04:57 <Leimy> a way of distributing complex computation on a cluster
06:05:06 <reffie> i see
06:05:16 <Leimy> so...you can "fan out" data in a "scatter"
06:05:21 <Leimy> and then crunch on it
06:05:23 <Leimy> and gather it back
06:05:25 <shapr> there's some neat Haskell research into Nested Data Parallelism
06:05:36 <Leimy> things like Povray are neat on clusters... :)
06:05:45 <Leimy> MPI-Povray exists
06:06:32 <shapr> Manuel Chakravarty has an array parallelizing library that will use MPI at some point: http://www.cse.unsw.edu.au/~chak/nepal/
06:06:42 <shapr> I'm looking forward to that
06:07:15 <shapr> Leimy: that's a nice job to have
06:07:46 <reffie> yeah?
06:08:29 <Leimy> shapr: it has its ups and downs
06:08:34 <Leimy> its not bad for the first job out of college :)
06:08:40 <Leimy> been here 3 years
06:09:12 <Leimy> time to go to said job :)
06:09:13 <Leimy> ttyl
06:11:03 <shapr> I should do some work too
06:14:23 <shapr> I think NDP is the best way I've seen to use a bunch of CPUs from Haskell
06:16:35 <shapr> @fortune
06:16:37 <lambdabot> A "goto" in Perl falls into the category of hard things that should be
06:16:37 <lambdabot> possible, not easy things that should be easy.
06:16:37 <lambdabot>              -- Larry Wall in <199709041935.MAA27136@wall.org>
06:16:41 <shapr> @fortune
06:16:43 <lambdabot> <Culus> aIIIIIIIIIII!!!!!!!!!!!!!!!11
06:16:43 <lambdabot> <Culus> MY LIGHT JUST DIED
06:16:43 <lambdabot> <Culus> I AM SO SAD
06:16:43 <lambdabot> <Culus> I'm blind! I'm blind!
06:16:43 <lambdabot> <dark> Light?
06:16:45 <lambdabot> <dark> Turn all your xterms to black-on-white :)  Plenty of light that way.
06:16:47 <lambdabot> 	-- Seen on #Debian
06:17:02 <shapr> dark: cool, you've been lambdabot'd
06:19:02 <adept> shapr: hmm. I added -O2 to ghc options and my code is compiled almost 2 mins on iPIV 2.2mHz...
06:19:48 <Igloo> Is that a PDA-size thing?
06:21:10 <adept> notebook :)
06:21:22 <reffie> slow notebook
06:22:05 <adept> damn. 2.2 GHz
06:25:25 <Igloo> Ah, right
06:25:55 <Igloo> That is a touch slow, but I guess the generics stuff can get big
06:26:23 <shapr> I wonder if Jerzy will be at ICFP/HW
06:26:39 <shapr> I hope so
06:27:12 <shapr> re Leimy 
06:27:12 * Leimy is at work
06:27:17 <Leimy> the funk in funktion?
06:27:20 * Leimy missed that earlier
06:27:38 <Leimy> anyway... I was thinking Haskell could be parallelized
06:27:50 <shapr> well, "mo' 'nads than you" wasn't very refined
06:28:01 <Leimy> I see
06:28:04 * shapr grins
06:28:35 <shapr> Leimy: I agree, it could be parallelized
06:29:20 <Heffalump> I think he has a paper at ICFP.
06:29:47 <shapr> the Nepal project is about flattening array operations, after which they could be distributed via MPI
06:30:07 <shapr> I'd like that, since I have an SMP machine and several weenie boxen here.
06:30:14 <Leimy> sure
06:30:22 <reffie> #@@!# boxen
06:30:27 <reffie> boxes. not boxen!
06:30:31 <shapr> I think it's a cute word :-)
06:30:37 <Leimy> oxen
06:30:43 <reffie> but it's oh so incorrect
06:30:46 <Leimy> indeed
06:30:55 <shapr> but I like it.
06:30:57 <Igloo> It's a technical term  :-)
06:30:57 <Leimy> anyway... MPI 1.x is pretty fun
06:31:02 <reffie> heh
06:31:04 <Leimy> MPI2 is nightmare :)... Actually its just big
06:31:18 <shapr> I've heard MPI is technically superior to PVM
06:31:23 <Leimy> and has things like Dynamic Processes... you can spawn a new process and add it to a job
06:31:28 <Leimy> PVM has some interesting features
06:31:51 <Leimy> but MPI can work on loosely coupled homogenous machines
06:32:02 <Leimy> you don't need to specifically create a "cluster"
06:32:19 <Leimy> you just need some way to start a job and forming a TCP / Myrinet or Infiniband connection or whatever
06:32:34 <Leimy> starting a job often means ssh/rsh
06:33:09 <Leimy> but some environments have load schedulers like LSF or POE if you are Lawrence Livermore National Labs
06:33:25 <Leimy> or YOD/YOD2 [which is a PBS based tool] on CPlant clusters
06:33:28 <shapr> sadly, I'm just a guy with a hub
06:33:41 <Leimy> then you get into lots of neat message passing libs ... lower level ones like LAPI and Portals
06:33:49 <Leimy> and you can do neat things like RDMA
06:34:05 <shapr> I just want a 4-way Opteron
06:34:22 <Leimy> we have an 8 CPU Opteron cluster here :)
06:34:27 <Leimy> built by Racksaver
06:34:42 <shapr> see, dual CPU boxeS are like a stepping stone drug...
06:34:42 * Leimy notes we are Racksaver resellers  :)
06:34:53 <Leimy> how so?
06:34:59 <Leimy> oh... an "entry" drug? :)
06:35:00 <shapr> soon you want 4 CPUs
06:35:09 <reffie> then 8?
06:35:10 <Igloo> :-)
06:35:12 <Leimy> but really... We find that on a cluster... 4CPUs is worse than 2
06:35:13 <shapr> yes, then 8
06:35:16 <shapr> really?
06:35:22 <Leimy> you want maybe at most 2 way boxen
06:35:25 <shapr> hm
06:35:27 <Leimy> yeah... because of resource contention
06:35:37 <reffie> 4 cpus, one bus
06:35:39 <reffie> or something
06:35:45 <shapr> one bus to rule them all...
06:35:53 <shapr> reffie: how many boxeS do you have? ;-)
06:35:57 <Leimy> there is always something to share
06:36:08 <reffie> i have one :P
06:36:11 <reffie> why?
06:36:12 * Igloo looks dreamily at merkel ia64 4IA64@800MHz 48GB RAM again  :-)
06:36:14 <Leimy> and it hurts performance compared to if you had maybe a high speed network
06:36:23 <Leimy> there is that law of diminishing returns :0
06:36:37 <Leimy> its the same thing with CPU clock speed
06:36:43 <Leimy> it means nothing in the grand scheme
06:36:48 <shapr> I have a 100BT switch, and two 100BT full-duplex cards, everything else is 10BT and mostly half-duplex
06:36:52 <Leimy> I could have a 3Ghz CPU on a 100Mhz FSB
06:36:56 <Leimy> and it would be stupid
06:37:07 <Leimy> a 500 Mhz CPU on 250Mhz FSB would probably outperform it
06:37:13 <reffie> no way
06:37:22 <Leimy> depens on the computation
06:37:26 <shapr> I wish they still made Alphas
06:37:39 * Leimy didn't make this stuff up
06:37:50 <Leimy> there are real theories out there
06:37:54 * reffie thinks Leimy made this stuff up
06:37:55 <shapr> Alphas were the best CPU yet
06:37:55 <Leimy> ok :)
06:38:02 <Leimy> Alphas were amazing
06:38:07 <Leimy> Opteron borrowed quite a bit
06:38:13 <shapr> that's sensible
06:38:21 <Leimy> Itanium did too
06:38:29 <Leimy> I think..  even the PPC970 got some ideas
06:38:33 <shapr> I liked EPIC
06:38:38 <Leimy> really?!
06:38:41 <Leimy> ugh
06:38:45 <reffie> ugh
06:38:51 <shapr> it seems like a cool idea to me
06:38:58 <Leimy> All I have to say is that most 4 way opteron boxes I have seen do way better than 4 way Itaniums
06:39:04 <shapr> let the compiler specify parallelism
06:39:08 <Leimy> probably due to integrated MMUs on the CPUs for Opterons
06:39:29 <Leimy> shapr: that is actually a good idea... its just that its associated with the Itanium... guilty by connotation :)
06:39:42 <shapr> hi Arnia, they've been asking about you on #zope
06:39:44 <Leimy> or should I say "Unobtainium"
06:39:52 <shapr> I've heard it called the Itanic
06:39:53 <Leimy> we have a few
06:39:55 <Leimy> like 6
06:40:05 <Leimy> but some are loaners from Intel
06:40:08 <Leimy> actually... 
06:40:10 * Leimy thinks
06:40:13 <Leimy> they all are :)
06:40:22 <Leimy> we haven't bought one yet
06:40:31 <shapr> I wanted to get a dual Itanium box before I saw the prices
06:40:36 <shapr> so I got dual Athlon MP instead
06:40:37 <Arnia> shapr: Oh?
06:40:57 <Leimy> 18000 dollars for a two way Itanium workstation from HP
06:41:05 <Leimy> may as well go with Sun :)
06:41:07 <shapr> truly
06:41:10 <Leimy> and get a real Unix :)
06:41:17 <shapr> I'm an open source addict
06:41:20 <Leimy> ah...
06:41:24 <Leimy> that's cool me too
06:41:31 <Leimy> I used Linux all through college
06:41:31 <shapr> I do like Sun hardware though
06:41:36 <Leimy> but I always appreciated Solaris
06:41:39 <Leimy> good threading
06:41:42 <Leimy> excellent scalability
06:41:46 <shapr> yup, far more than Intel
06:41:47 <Leimy> and a neat as hell kernel
06:41:57 <shapr> I just wish it weren't so expensive
06:42:06 <Leimy> they have 8 CPU cores on one die soon... each with 4 hardware threads
06:42:13 <Leimy> 32threads/CPU
06:42:14 <Leimy> amazing
06:42:27 * Leimy thinks Fujitsu makes the Ultra Sparcs
06:42:42 <Leimy> get a 4 way sun box
06:42:44 <shapr> in any case, it's cheaper to buy a bunch of single CPU boxeS and stick 'em on a network
06:42:47 <reffie> FreeBSD, baby!
06:42:47 <Leimy> 128 simultaneous threads
06:42:52 <Leimy> its a beatiful thing
06:43:01 * Leimy runs FBSD at home... no linux
06:43:06 <reffie> good.
06:43:14 <Leimy> and I have been following DragonFlyBSD closely
06:43:14 <shapr> I almost got a dual Sun machine, but that wasn't much cheaper than the Itanic
06:43:18 <Leimy> not that I can run it yet :)
06:43:27 <Leimy> shapr: no kidding
06:43:30 <Leimy> Ebay baybe
06:43:41 <Leimy> my boss got a 4 way Ultra SParc server for like 1600 bucks
06:43:43 <shapr> wow
06:43:46 <Leimy> yeah
06:43:52 <o3_> ok, i have to point out the power mac g5 right now.  i'll be quiet for the rest of the night
06:43:53 <Leimy> its like a small beverage refridgerator
06:43:57 <shapr> o3_: dual?
06:44:02 <reffie> heh
06:44:05 <Leimy> god knows I want one :)
06:44:06 <o3_> shapr: why not? :)
06:44:10 * Leimy has OS X at home too
06:44:16 <shapr> there is a dual g5?
06:44:19 * shapr looks
06:44:20 <Leimy> yeah
06:44:23 <Leimy> its like 3000 bucks
06:44:29 <reffie> heh.
06:44:31 * Igloo goes downstairs to read on the "a watched compiler never releases" theory  :-)
06:44:31 <Leimy> and if you are an ADC member its 2400
06:44:32 <Leimy> :)
06:44:35 <o3_> shapr: yes, 2ghz.  fantastic machine
06:44:35 * Leimy is an ADC member
06:44:48 <Leimy> quite
06:44:54 <shapr> my dual Athlon MP was ~$2500 at the time
06:44:57 <Leimy> it can actually feed the altivec unit fast enough
06:45:02 <Leimy> with that 1Ghz FSB
06:45:23 <Leimy> soeone made a C++ Valarray implementation that is vectorized
06:45:34 <Leimy> s/soeone/someone/
06:45:40 <o3_> shapr: and ghc on mac os x is pretty nice
06:45:40 <atom-z> Leimy: what do you do? heavy graphics work or something?
06:45:43 <o3_> shapr: are you going to HIM?
06:46:01 <Leimy> atom-z: nope... which is why I don't need the G5 yet :)
06:46:06 <Leimy> I just want one :)
06:46:11 <atom-z> ic
06:46:13 * Leimy is fine with a 933Mhz G4
06:46:25 * Leimy has a small G4 cluster on his desk actually
06:46:30 <Leimy> two dual 867s
06:46:32 * atom-z just has a 1.1Ghz TBird. 1.2GB ram though
06:46:38 <Leimy> connected via firewire
06:46:48 <Leimy> getting about 30Mb/sec peak throughput
06:46:49 <atom-z> Leimy: hehe
06:46:50 <reffie> you must be rich.
06:46:57 <Leimy> nah... I work at www.mpi-softtech.com
06:47:06 <Leimy> this is my job "workstation cluster" :)
06:47:11 * Leimy ported MPI/Pro to Mac OS X
06:47:12 <reffie> heh
06:47:24 <Leimy> and I do a lot of work on Linux too
06:47:29 <Leimy> mostly Linux in fact
06:47:34 <o3_> Leimy: you're interested in parallel haskell stuff?
06:47:49 <Leimy> I am just learning haskell to start... parallel haskell could be neat though :)
06:48:04 * Leimy takes baby-steps
06:48:05 <Leimy> :)
06:48:33 <o3_> well, if you're interested in parallel computing, parallel haskell is ... cool
06:48:40 <o3_> but i guess that'll come later :)
06:49:09 <shapr> yah, you should start by writing a lambdabot plugin ;-)
06:49:32 <shapr> o3_: if I were to buy Mac hardware, I'd still run Debian
06:50:02 * atom-z ponders why the latest ICC is so big. 60MB
06:50:13 <shapr> o3_: yes, I'll be at HIM
06:50:26 <o3_> shapr: sure, i know a few people who do that.  (i think they're nuts, but hey, everybody has their passions)
06:50:34 <shapr> I'm hoping to find some good unicycling terrain in Uppsala
06:50:42 <steveh> shapr: [shudder]
06:50:49 <o3_> shapr: well, i might be doing a demo at HIM.  it might convince you to get a mac (and use mac os x :)
06:51:12 <steveh> running debian on a mac is like driving a ferrari in 2nd gear
06:51:15 <shapr> if mac os X goes open source, I'll try it.
06:51:20 <steveh> sounds impressive but not all it's cracked up to be
06:51:20 <steveh> ;)
06:51:40 <shapr> steveh: I'd like to try Darwin
06:51:52 <o3_> shapr: it never will (although obviously some parts of it are open-source, e.g. darwin)
06:52:04 <steveh> shapr: easiest way to do that is with a copy of OS X :)
06:52:20 <shapr> in any case, I'll used closed source games, but I wish for open source in any other case
06:52:38 <Leimy> debian on the Mac is really cool
06:52:54 <Leimy> shapr: www.opendarwin.org
06:53:03 * Leimy is also leimy@opendarwin.org
06:53:11 <shapr> the price on the dual g5 is nice
06:53:21 <Leimy> yeah... the OS isn't 64bit.. but oh well :)
06:53:30 <Leimy> I think SuSE linux will have the best 64bit linux support
06:53:37 <Leimy> it rocks on the Opteron
06:53:43 <shapr> I want Debian on Opteron
06:53:44 <Leimy> you can build 32bit and 64bit binaries
06:53:44 <shapr> mmm
06:53:58 <Leimy> and I think SuSE works with IBM on power4 linux
06:54:00 <o3_> Leimy: you know that's not a problem ("non-64bit OS")
06:54:05 <Leimy> so... PPC970 SuSE shoudl be nice
06:54:14 <Leimy> o3_: I know... you can still run 64 bit binaries
06:54:25 <Arnia> I thought OSX worked in 64bit as well...
06:54:25 <Leimy> but... It would "feel good" to be pure 64bit :)
06:54:35 <shapr> yes, pure64 bit
06:54:35 <shapr> mmm
06:54:52 <o3_> i don't see the point
06:55:01 <Leimy> actually... for a desktop ... neither do I
06:55:04 <o3_> apart from warm'n'fuzzy feeling, that is :)
06:55:06 <Leimy> but for a server... I see the point
06:55:15 <Leimy> like... Filesystems that are huge
06:55:16 <Leimy> etc
06:55:27 <Leimy> especially with their fibre-channel RAID options
06:55:46 * Leimy deals with Cluster filesystems too
06:55:47 <Leimy> they are big
06:55:56 <shapr> hoi xkb, did you find more sponsors?
06:55:57 <Leimy> but for Grandma... she don't care about 64bit at all :)
06:56:25 <xkb> shapr: no.. sadly... 
06:56:30 <xkb> so perhaps next year
06:56:47 <xkb> Hopefully I can start as a PhD student next year also
06:56:53 <shapr> andersca: is there some way I can rebind pageup/pagedn per app in gnome/gtk/etc?
06:57:31 <shapr> xkb: aw, too bad
06:57:53 * steveh has to decide what he wants to research in school too
06:57:53 <xkb> shapr : well.. Ill read the lecture notes
06:57:58 <steveh> so many interesting things
06:58:26 <xkb> steveh : type systems?
06:58:47 <shapr> I never understood people who can't find interesting things to do.
06:59:33 <steveh> my issue is i flit from one interesting thing to another
07:00:18 <andersca> shapr: could be in gnome
07:01:07 <shapr> steveh: so you have to find something that unifies your interests?
07:01:55 <steveh> shapr: that would be it
07:02:00 <steveh> as far as computers go
07:02:59 <steveh> I am interested in artificial intelligence, compilers, functional programming, text processing, typesetting, hmm those are the biggies
07:03:20 <steveh> somewhat interested in embedded systems as well
07:06:06 <steveh> and that doesn't begin to touch my interests in politics, philosophy, and history ;)
07:07:39 <shapr> I'd suggest spending a week looking into each of your interests, and then ranking them after your survey
07:07:50 <steveh> :)
07:08:03 <steveh> guess I will be living at the university library then
07:08:09 <shapr> what better place? :-)
07:08:17 <steveh> well
07:08:20 * adept keeps beating his head against the wall ... cvs adding for 10 minutes already ...
07:08:27 <steveh> the library at my alma mater is much better than the one in this city
07:08:28 <xkb> You own aircoed room with wall to wall bookshelf
07:08:31 <shapr> I wonder if Luleå library has JFP
07:08:37 <shapr> adept: need help?
07:08:44 <steveh> which is surprising
07:08:51 <Heffalump> a public library, or a uni one?
07:08:56 <adept> shapr: seems like SF cvs server stalled already ..
07:08:58 <steveh> since the university here has about 10 times the student body
07:09:04 <steveh> at a minimum
07:09:11 <adept> shapr: no traffic, no responce, no anything ...
07:09:11 <steveh> I am comparing uni library to uni library
07:09:13 <shapr> adept: oh, that might be true
07:09:22 <shapr> sf.net CVS servers are having trouble lately :-(
07:09:52 <steveh> also since I'm not a student now I can't check books out and whatnot :-/
07:11:34 <shapr> but you can read in the library
07:11:46 <steveh> true true
07:11:48 * Leimy always forgets about libraries
07:11:52 <steveh> this is where the relative quality comes in
07:11:58 <steveh> i am spoiled
07:12:05 * Leimy likes new books 
07:12:07 <steveh> nice open library with good seats vs. dank dungeon
07:12:25 <adept> shapr: cvs up libs ;)
07:12:26 <Leimy> good point
07:12:30 <shapr> yay
07:12:39 <steveh> but that's a good suggestion shapr
07:12:46 <steveh> perhaps I'll start on that this weekend
07:13:20 <shapr> it's my standard heuristic, when something seems difficult, get more info
07:13:21 <shapr> hi dl-hurley 
07:13:27 <dl-hurley> shapr: hello
07:13:31 <steveh> speaking of the uni in this town
07:13:43 <steveh> dl-hurley: you like CIS at OSU?
07:13:46 <shapr> dl-hurley: learning Haskell?
07:13:55 * adept left to defeat C++/glibc combo on some distant host
07:13:57 <dl-hurley> shapr: that's the plan, yes
07:14:10 <dl-hurley> steveh: meh, could be better, could be worse :)
07:14:14 <shapr> @fact learning
07:14:15 <steveh> :)
07:14:15 <lambdabot> http://www.haskell.org/learning.html
07:14:21 <steveh> <- CWRU grad
07:14:37 * steveh is looking for a place to do graduate studies
07:14:49 <SyntaxPolice> dl-hurley: lambdabot is written in haskell
07:14:52 <steveh> it'd help if I knew what I wanted to study, of course :)
07:15:10 <steveh> hiya SyntaxPolice
07:15:12 <dl-hurley> SyntaxPolice: kewl :)
07:15:18 <shapr> g'mornin SyntaxPolice 
07:15:18 <steveh> it's a Columbus day apparently.
07:15:24 <SyntaxPolice> dl-hurley: you can also refer to my comments down here: http://www.haskell.org/hawiki/LearningHaskell
07:15:34 <SyntaxPolice> hey shapr, steveh
07:15:41 <shapr> @fact learning http://www.haskell.org/hawiki/LearningHaskell
07:15:42 <lambdabot> set learning to http://www.haskell.org/hawiki/LearningHaskell
07:15:54 <SyntaxPolice> @fact learning
07:15:55 <lambdabot> http://www.haskell.org/learning.html, http://www.haskell.org/hawiki/LearningHaskell
07:16:03 <SyntaxPolice> 1337
07:16:40 <SyntaxPolice> I've harassed dl-hurley enough so he finally came over here.  Yesterday we had a "conversation" about various languages, and haskell was the only one immune to criticism (since I was the only one who knew it :)
07:17:01 <steveh> SyntaxPolice: Security through obscurity!
07:17:11 <SyntaxPolice> yupyup
07:17:15 <dl-hurley> hehe
07:17:26 <steveh> dl-hurley: what's your favorite language?
07:18:07 <dl-hurley> steveh: all depends on what i'm doing, but i'm getting much more into functional and semi-functional languages, like lisp (and, of course, haskell)
07:19:18 <steveh> dl-hurley: I have an affinity for languages with smaller syntax like lisp
07:19:25 <SyntaxPolice> there's a cool guy at ohio state, cmcurtin on here, who teaches and advocates Lisp to the Highest Degree :)
07:21:39 <shapr> I think the best solution is to learn a whole bunch of languages
07:21:43 <shapr> starting with Haskell of course ;-)
07:21:49 <o3_> swedish people are cool
07:22:02 <shapr> yes they are
07:22:08 <o3_> i just booked a hotel in uppsala, and the quote i got back said "total prize: 1100 SEK per night" (instead of price)
07:22:12 <shapr> heh
07:22:21 <o3_> i win 1100 SEK per night for staying there, sweet!
07:22:23 <shapr> you too can become a swedish person, after just five years.
07:22:55 <SyntaxPolice> o3_: actually, SEK means "Negative Sweedish Monies" in swedish
07:23:23 <arguile> Those dirty sweeds, always paying with SEKs
07:23:29 <o3_> SyntaxPolice: oh.  clever swedes.  so that's why their currency's always so strong
07:23:30 <arguile> =P
07:24:14 <SyntaxPolice> heh
07:24:32 <steveh> damn
07:24:39 <steveh> a job interview!
07:24:52 <SyntaxPolice> steveh: good luck!
07:24:52 * steveh had been used to dead silence from people he sent resumes to :)
07:25:00 * SyntaxPolice looks around
07:25:06 <shapr> adept: this is cool stuff
07:25:19 <Smerdyakov> steveh, do you have Haskell on your resume? :)
07:25:43 <shapr> I have Haskell on my resume, it looked so good I hired myself.
07:25:57 <steveh> heheh
07:26:01 <steveh> no, no haskell
07:26:03 <steveh> LISP though
07:26:03 <steveh> :)
07:26:37 * Leimy installs ghc5.04 on FBSD
07:26:38 <steveh> these guys want oracle, java, unix, C, dhtml
07:26:49 <shapr> what's dhtml?
07:26:54 <shapr> oh, MSIE stuff?
07:26:57 <steveh> i hope they didn't think that because I worked for an oracle consulting firm that I knew anything about PL/SQL
07:26:59 <steveh> :)
07:27:06 <Smerdyakov> steveh, soo... why are you applying there? ;)
07:27:06 <SyntaxPolice> "Persons with knowledge of anything else need not apply"
07:27:23 <steveh> Smerdyakov: ramen gets old
07:27:24 <Leimy> what do you guys think of eiffel?
07:27:28 <steveh> ;)
07:27:38 <Smerdyakov> steveh, do you have a graduate degree?
07:27:46 * steveh actually has an almost-done offer somewhere else, but has yet to hear back
07:27:49 <Smerdyakov> Leimy, gimped out, imperative version of ML. :-)
07:27:57 <shapr> Leimy: DbC is nifty, but I think it could be done with QuickCheck just as well
07:27:59 <steveh> Smerdyakov: no, I am planning on working on one though
07:28:08 <shapr> well, except for the contracts being checked at runtime stuff
07:28:15 <Smerdyakov> steveh, so do that first and skip the profane jobs. :D
07:28:18 <shapr> I wonder if a contract monad is possible... hmm
07:28:18 <Leimy> well that's an analysis I haven't heard :)
07:28:35 <steveh> dhtml isn't really IE stuff
07:28:45 * Leimy finds that compilng ghc on FBSD yields a lot of on-screen assembly code
07:28:46 <steveh> it's just the combination of CSS and javascript mostly
07:28:55 <Leimy> and that it doesn't build with gcc-3.3 :P
07:29:05 <shapr> Leimy: the evil mangler doesn't like gcc3
07:29:09 <shapr> try 2.95 or so
07:29:09 <Smerdyakov> Leimy, do you know both Eiffel and ML?
07:29:37 <steveh> Smerdyakov: see, I think the issue is everyone else is doing that too, so I was in a pool of 1800 grad school applicants (pick 80)
07:29:54 <Smerdyakov> steveh, oh, so you didn't get in anywhere you applied? :(
07:30:24 <steveh> Smerdyakov: no, but like a bozo I only applied three places... it was more important to be near my SO right now, really
07:30:29 <shapr> javascript is not a well-defined term
07:30:49 <Smerdyakov> steveh, how selective were these places?
07:30:58 <steveh> Smerdyakov: too selective
07:31:09 <Leimy> smerdyakov: nope... Neither... Played with OCAML a bit...  messed with Eiffel for about 30 minutes :)
07:31:11 <steveh> also my gre analytic score was low, since I hadn't prepared
07:31:17 <Smerdyakov> steveh, mm... I think we talked back when you were applying.
07:31:19 <steveh> I just retook it last week
07:31:22 <Leimy> so far haskell has outlasted them in my interest category
07:31:32 <steveh> now analytic is based on an essay
07:31:34 <Smerdyakov> steveh, my GRE analytic score was a nasty 710, but no one seemed to care.
07:31:37 <steveh> I should probably own that :)
07:31:38 <shapr> browser independent javascript is difficult
07:31:52 * Leimy installs the binary package of ghc on FBSD
07:31:58 <Leimy> portinstall -P ghc
07:31:59 <Leimy> :)
07:32:00 <steveh> steveh: mine was much nastier, like 670 or something
07:32:02 * steveh forgets even
07:32:15 <Smerdyakov> Leimy, OK. I hope you would agree with further experience that OCaml defeats Eiffel on every front, obsoleting it.
07:32:19 <steveh> My longstanding issue with timed tests is that I am too deliberate
07:32:23 <steveh> so I run out of time
07:32:30 <Leimy> smerdyakov: ok... :)
07:32:39 <Leimy> I would have to do my own analysis...
07:32:46 <Smerdyakov> steveh, if that's "much nastier," then small score differences must mean a lot!
07:32:50 <steveh> my advanced undergrad CS classes were all "Homework -- As, Tests -- High C, low B"
07:33:13 <steveh> Smerdyakov: well, at least in math the percentile drops precipitously
07:33:17 <shapr> I'm the other way around, I can't do homework to save my life
07:33:23 <steveh> Smerdyakov: at a 750 you're only 80th I think
07:33:32 <Smerdyakov> steveh, at 800 you're 97%. :D
07:33:39 <steveh> Smerdyakov: exactly :)
07:34:01 <Smerdyakov> steveh, the classes bit is pretty damning, though.
07:34:02 <steveh> shapr: well, this was only the case in the hard math CS courses
07:34:28 <steveh> shapr: I slacked in the easier ones, but I got As on tests so it didn't matter
07:34:41 <steveh> theoretical CS, analysis of algorithms, databases to an extent
07:34:47 <steveh> those were the ones where tests nailed me
07:34:52 <shapr> bah, I've never had any CS classes.
07:35:15 <shapr> one day, if I'm lucky
07:35:25 <Smerdyakov> I don't remember where you applied, but the average GPA of admitted PhD students at CMU is 3.8/4.0.
07:35:31 <dark> I had some but I only enjoyed half of them.
07:35:36 <shapr> dark: which half?
07:35:42 <steveh> my GPA is fine
07:35:51 <steveh> but CMU was one of the places ;)
07:36:09 <steveh> i am going to spread the love much more this time
07:36:17 <shapr> I like to learn stuff that I can apply to my work or play, but test taking skills doesn't fit into either of those ;-)
07:36:25 <steveh> since my GF will be starting her residency a year into my schooling if I start next fall
07:36:25 <Smerdyakov> But you got sub-A grades in these advanced CS classes you mention?
07:36:44 <dark> shapr: hmm there was no clear separation by topic.  I didn't like the practical courses, though.  I did enough programming on my own :)
07:36:47 <steveh> Smerdyakov: those three were Bs, the rest of CS was As
07:37:15 <steveh> and my philosophy degree was straight As
07:37:37 <Smerdyakov> Philosophy? Irrelevant. ;)
07:37:51 <steveh> heheh
07:37:54 <steveh> it was great fun though
07:38:10 <Smerdyakov> What does "advanced classes" mean here? "For juniors and seniors"?
07:38:27 <steveh> Smerdyakov: algorithms was a combined undergrad/grad class
07:38:37 <steveh> Smerdyakov: the other two were just senior-level
07:38:48 * shapr sings the functional programmer song
07:38:48 <steveh> I meant the math on tests is nontrivial
07:38:59 <steveh> since that's what hurts my grade
07:39:10 <steveh> working on one and doublechecking to the detriment of others
07:39:16 <adept> shapr: so, you tested it?
07:39:35 <steveh> and perhaps I shouldn't say "math" per se
07:39:40 <steveh> symbol manipulation or something
07:39:41 <Smerdyakov> Did you apply for masters or PhD?
07:39:48 <shapr> o/~ oh give me a /home where no side-effects roam! o/~
07:39:52 <shapr> adept: no, but it looks spiffy :-)
07:39:59 <steveh> masters, I think that was another thing that hurt me
07:40:10 <steveh> this fall things will be quite different
07:40:12 <steveh> I learn from mistakes
07:40:29 <shapr> adept: I'll check it out after work
07:40:34 <Smerdyakov> That _hurt_ you? How? Masters programs are generally easier to get into.
07:40:41 <adept> shapr: "spiffy /spi'fee/ adj. 1. Said of programs having a pretty, clever, or exceptionally well-designed interface"
07:40:44 * adept grins
07:40:51 <Smerdyakov> I guess they have more applicants, but it evens out if you're good.
07:40:51 <steveh> Smerdyakov: except in years like 2001-2002!
07:40:54 <shapr> adept: where'd you find that?
07:41:03 <shapr> @foldoc spiffy
07:41:05 <steveh> Smerdyakov: only if you apply to enough schools :)
07:41:06 <lambdabot> *** "spiffy" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
07:41:06 <lambdabot> spiffy
07:41:06 <lambdabot>    /spi'fee/ 1. Said of programs having a pretty, clever, or
07:41:06 <lambdabot>    exceptionally well-designed interface. "Have you seen the
07:41:08 <shapr> aha
07:41:08 <lambdabot>    spiffy {X} version of {empire} yet?"  This was common
07:41:10 <lambdabot>    mainstream slang during the 1940s.
07:41:14 <lambdabot> [8 @more lines]
07:41:29 <shapr> adept: yes, my definition is "something that has pleasing amounts of quality"
07:41:37 <adept> shapr: jargon file
07:41:42 <shapr> @jargon spiffy
07:41:44 <lambdabot> *** "spiffy" jargon "Jargon File (4.3.0, 30 APR 2001)"
07:41:44 <lambdabot> spiffy /spi'fee/ adj. 1. Said of programs having a pretty, clever, or
07:41:44 <lambdabot>    exceptionally well-designed interface. "Have you seen the spiffy {X}
07:41:44 <lambdabot>    version of {empire} yet?" 2. Said sarcastically of a program that is
07:41:44 <lambdabot>    perceived to have little more than a flashy interface going for it.
07:41:46 <lambdabot>    Which meaning should be drawn depends delicately on tone of voice and
07:41:48 <lambdabot>    context. This word was common mainstream slang during the 1940s, in a
07:41:50 <lambdabot>    sense close to 1.
07:41:52 <lambdabot> [2 @more lines]
07:41:57 <shapr> bot spam
07:41:58 <shapr> whee
07:41:58 <Smerdyakov> I doubt anyone with B's in all senior+ level CS classes got into any of the top CS graduate programs this year.
07:42:14 <Smerdyakov> I've heard that they got so many applicants this year that they could be very choosy.
07:42:17 <Leimy> for good reason
07:42:22 <Leimy> econo-suck
07:42:40 <shapr> sometimes I wish I had access to a CS teacher, but most of the time I think I learn better outside of school.
07:42:41 <adept> Smerdyakov: your nick looks like russian surname. is it?
07:42:43 <steveh> Smerdyakov: good point
07:42:57 * steveh got an A in programming languages :-P
07:43:01 <Smerdyakov> adept, it's a humorous Russian nickname from a novel.
07:43:18 <steveh> oh yes, and graduate AI courses
07:43:29 <adept> Smerdyakov: humorous? hmm ...
07:43:33 <reffie> steveh nerd
07:43:57 <steveh> but the Bs in algorithms and theoretical comp sci were tough to swallow
07:43:57 <Smerdyakov> steveh, did you take 4 years to finish your undergrad degree?
07:44:02 <steveh> theoretical was really close too
07:44:10 <steveh> Smerdyakov: yes
07:44:36 <Smerdyakov> steveh, then you are a slacker, with all these grad courses! You should have finishes the undergrad classes and graduated!
07:44:41 <steveh> since I double majored that was 18 hours+ each semester
07:44:45 <steveh> double major
07:44:46 <steveh> :)
07:45:01 <reffie> that's what i'm doing
07:45:17 <reffie> double major with 18-19 hours each semester
07:45:46 <Smerdyakov> How much is a semester hour? Do they count all hours in and out of class, approximately?
07:46:02 <steveh> so my Java comments at the IT equivalent of McDonald's will include brief thoughts on Rorty's conception of pragmatism...
07:46:08 <steveh> :-P
07:46:09 <reffie> they only count the hours in class
07:46:19 <steveh> yeah
07:46:25 <steveh> which is ridiculous as far as labs are concerned
07:46:30 <Smerdyakov> reffie, so then most of the classes you take are 3 or 4 s-hours?
07:46:36 <steveh> you can spend 6 hours a week on them for 1 credit
07:46:40 <reffie> yes, Smerdyakov 
07:46:44 <reffie> indeed steveh 
07:46:47 <steveh> though they make up for that by being fun
07:46:52 <Smerdyakov> reffie, ah. This is a lot of classes.
07:46:53 * steveh liked the digital logic lab.
07:46:59 <reffie> yes, Smerdyakov :P
07:47:11 <steveh> and the robotics lab
07:47:14 <steveh> that was great too
07:47:30 <Smerdyakov> reffie, I graduated with one degree in 3 years at about 13 semester hour equivalents each semester.
07:47:41 <reffie> heh lucky you :)
07:48:29 <Smerdyakov> And I could have done it in 2 years if I had planned ahead better ;)
07:48:39 <reffie> heh.
07:48:55 <reffie> what degree?
07:49:10 <Smerdyakov> Bachelor of Science, Computer Science, minor in Math
07:49:10 <reffie> and where?
07:49:14 <Smerdyakov> Carnegie Mellon
07:49:39 <reffie> you must have had a lot of AP credit or something
07:49:43 <steveh> heh
07:49:44 <Smerdyakov> Yup
07:49:49 <reffie> i didn't have any
07:49:53 <Smerdyakov> And CMU gives credit for all AP tests.
07:49:53 * steveh got a better deal assistance-wise
07:49:59 <steveh> if I had gone to CMU I would be in debt
07:50:03 <reffie> because i came from a non-american school system.
07:50:10 <steveh> considerably
07:50:27 <shapr> I like the euro thing about free school
07:50:39 <reffie> which totally sucks, because they made me redo stuff i did two years before, in high school
07:50:40 <adept> shapr: indeed
07:50:47 <Smerdyakov> I got about 30-some semester hours of credit from AP tests.
07:50:52 <shapr> especially since I went to college in the US
07:51:00 <steveh> my HS didn't really do many AP tests
07:51:04 <steveh> what they offered, I took
07:51:22 <steveh> the thing is I enjoyed the intro-level courses I didn't AP out of
07:51:46 <steveh> for example the English class was all about intellectual property and the construction of authorship
07:52:15 <reffie> ah, if only they had given me credit for the stuff i did in high school, i'd have a lot less classes to take.
07:52:24 <reffie> i'd have to take a lot less classes
07:52:37 <Smerdyakov> reffie, there was no process to show them that you knew the material?
07:52:38 <steveh> well buh
07:52:50 <steveh> I have to go to the public library and find a book on PL/SQL I guess
07:52:52 <Leimy> so what does map do again? :()
07:52:54 <reffie> Smerdyakov no
07:53:00 <Smerdyakov> reffie, then you picked a bad school.
07:53:06 <shapr> Leimy: map (+ 1) [1,2,3]
07:53:10 <Leimy> toUpper only works on char
07:53:11 <reffie> actually, i got credit for one thing.
07:53:16 <reffie> english.
07:53:20 <steveh> Leimy: takes a function and a list, returns the list generated by applying the function to each of the list's elements
07:53:22 <shapr> Leimy: map toUpper "foobar"
07:53:23 <reffie> ironically enough.
07:53:25 <Leimy> but map forces the operation to loop over everything... and then builds a list for the result ?
07:53:30 <shapr> @type map
07:53:31 <reffie> [since i had never studied in english before]
07:53:32 <lambdabot> map :: (a -> b) -> [a] -> [b]
07:53:34 <Smerdyakov> reffie, do you go to a school that gets lots of "overachieving" students?
07:53:43 * Leimy can't read lambdabot stuff :)
07:53:44 <adept> people, what is the best way to get pretty-printing for a lot of datatypes?
07:53:44 <reffie> Smerdyakov college?
07:53:54 <Leimy> I don't know what -> means
07:53:56 <Smerdyakov> reffie, how does that answer my question?
07:53:58 <reffie> Smerdyakov i go to virginia tech..
07:53:59 <dark> adept: Depends on how pretty :)  I just derive Show.
07:54:01 <shapr> Leimy: it's the function symbol
07:54:06 <Leimy> it is?
07:54:07 <Leimy> ok :)
07:54:17 <reffie> Smerdyakov i was asking for clarifications on your questions..
07:54:23 <reffie> question.
07:54:31 <adept> dark: then putStrLn $show topmostContainer gives you one line :-\
07:54:32 <shapr> Leimy: addOne x = x + 1 could be of type addOne :: Int -> Int
07:54:32 <Smerdyakov> reffie, hm. That's somewhat surprising, then. You should have probed the administration harder. :)
07:54:44 <reffie> Smerdyakov i guess
07:54:45 <shapr> Leimy: meaning it takes in one Int, and returns one Int
07:54:59 <Smerdyakov> Leimy, meaning go read a Haskell tutorial....
07:55:10 <adept> quake3
07:55:11 <dark> adept: Ah, if you want indenting... it gets difficult :)  I don't think it can be done properly without carrying along a lot of context, in order to break structures at the best places.
07:55:13 * Leimy can't at work... i just wanted to try something quickly
07:55:15 <reffie> Smerdyakov anyway, i think it's ok, since i didn't know how to say a lot of things in english
07:55:17 <adept> damn. wrong window ;)
07:55:26 <Leimy> and now I must get back to work work ... which has nothing to do with Haskell :)
07:55:27 <shapr> I don't mind answering questions
07:55:34 * Leimy has a good tutorial at home anyway
07:55:36 <Leimy> thanks...
07:55:38 <dark> adept: For best effect you'd need something as smart as the TeX paragraph formatting algorithms, but optimized for indented structures :)
07:55:43 <Smerdyakov> shapr, he's the one who loses by depending on you.
07:55:45 <reffie> Smerdyakov for example, i didnt know to say "derivative" :P
07:55:51 <Smerdyakov> reffie, where are you from originally?
07:55:55 <reffie> italy
07:56:01 <reffie> but i went to a french school
07:56:04 <reffie> [in italy]
07:56:07 <adept> dark: i'd settle with newline after each datatype member :)
07:56:08 <Leimy> Smerdyakov is right... its best to not ask a stream of questions... and to fail a lot until I learn :)
07:56:09 <shapr> Smerdyakov: that's a point
07:56:14 <Smerdyakov> reffie, why did you come to the US for school?
07:56:27 <reffie> Smerdyakov because i want to become rich :P
07:56:35 <reffie> or something
07:56:36 <Smerdyakov> reffie, why?
07:56:41 <shapr> I thought school in the US makes you poor?
07:56:44 <shapr> worked for me at least
07:56:45 <Leimy> rich is worthless
07:56:49 <Leimy> happy is everything
07:56:53 <shapr> yah, I agree with Leimy 
07:56:53 <reffie> actually, i didnt want to go to france
07:57:02 <shapr> otherwise I'd be writing C++ for microsoft
07:57:04 <reffie> because france sucks
07:57:07 <Leimy> HAH
07:57:17 <Leimy> hah @ shapr
07:57:21 <Leimy> not at france sucks :)
07:57:24 <reffie> so, i deceided to come to usa.
07:57:37 * Leimy never been to france... can't make such judgements
07:57:39 <Smerdyakov> Does Italy have some outstanding universities?
07:57:47 <Smerdyakov> I mean, doesn't
07:57:48 <reffie> i cannot study in italy
07:57:54 <shapr> well, they have Moggio
07:57:57 <reffie> i dont have an italian high school diploma
07:57:58 <shapr> the monads guy
07:58:07 <reffie> i only have a french one
07:58:23 <Heffalump> Moggi, innit?
07:58:27 <Heffalump> Eugenio Moggi.
07:58:29 <shapr> probably so
07:58:37 <Smerdyakov> I guess that clarifies things.
07:58:56 <reffie> Moggi! he's the "direttore sportivo" of Juventus, a soccer team
07:59:13 <shapr> the monads Moggi?
07:59:18 <reffie> i doubt it
07:59:24 <reffie> another Moggi :P
07:59:35 <shapr> we have a cat named Moggie :-P
07:59:44 <reffie> hehe
08:00:09 <Heffalump> oh dear, 280-0...
08:00:16 <shapr> ?
08:00:18 <reffie> ?
08:00:20 <Heffalump> oops, wrong channel.
08:00:21 <Heffalump> sorry.
08:00:23 <Smerdyakov> AAAGAGAG!
08:00:38 <Heffalump> (it's a cricket score, England v South Africa, bit of a disaster for England)
08:00:41 <shapr> oh
08:00:47 <shapr> Smerdyakov: your DNA?
08:01:18 <shapr> or is that the Cryptonomicon code?
08:03:19 <reffie> well
08:03:21 <reffie> it's 5PM
08:03:24 <reffie> time to go h0me :D
08:03:26 <shapr> time to start work
08:03:27 <shapr> oh
08:03:39 <reffie> DFUCK WORK!
08:03:44 <reffie> [or something]
08:11:50 * hdaume needs to do a better job of remembering to disconnect from IRC before he goes home
08:12:03 <shapr> good morning hdaume 
08:12:16 <hdaume> how's life?
08:12:35 <shapr> very warm
08:12:41 <shapr> how's yours?
08:12:56 <hdaume> can't complain
08:52:07 <reffie> hihihi
08:52:10 <reffie> i'm home
08:53:46 <shapr> me too!
09:05:17 <reffie> :D
09:39:33 <adept> Need help with type classes. I have uglyPrintAny :: (Show t, Term t) => t -> IO (). Definition: uglyPrintAny x = do { putStrLn $ show x }. While compiling I get error:  Ambiguous type variable `t' in these top-level constraints: `Term t' arising from use of `adhocTU' at " constTU () `adhocTU` (uglyPrintAny)". Type of adhocTU is adhocTU :: forall m a t. (Term t, Monad m) => TU a m -> (t -> m a) -> TU a m
09:41:04 <adept> Same thing is shown for 'Show t'. What should i put into signature to satisfy compiler?
09:41:49 <Heffalump> what is the type of constTU () ?
09:42:02 <adept> constTU :: forall m a. (Monad m) => a -> TU a m
09:42:24 <Heffalump> ok, so how is the compiler supposed to know which instance of Term you want?
09:43:05 <adept> Heffalump: should I use forall here?
09:43:20 <adept> Heffalump: acrually, I want to be able to use any of the,
09:43:39 <Heffalump> but what's the type of constTU () `adhocTU` uglyPrintAny ?
09:44:04 <adept>  TU () IO
09:44:46 <Heffalump> ok, so it uses some instance of Term inside it, but it can't work out which from the context. How is it supposed to decide which to use?
09:45:32 <adept> Heffalump: trick is that it is supposed to work with any instance of Term. And I dont refer to some specific instance of Term in code, if you mean it.
09:46:00 <Heffalump> but you've just given me an expression that doesn't have any mention of the type variable t in its type
09:46:13 <Heffalump> How do you intend to decide which Term t should become when you run it?
09:47:45 <adept> well, by applying function to some argument. Thing is: something similar forks for me, but inside List monad. And I somehow unable to do the same thing in IO :(
09:47:59 <adept> ooop. Not in List, but in Identity
09:49:09 <Heffalump> which function?
09:49:25 <Heffalump> the problem is with your expression constTU () `adhocTU` uglyPrintAny
09:49:32 <adept> findReferencedDefinedTypes :: Term t => t -> [TypeReference]
09:49:32 <adept> findReferencedDefinedTypes = runIdentity . applyTU (full_tdTU refDefined)
09:49:32 <adept>   where
09:49:32 <adept>   refDefined :: TU [TypeReference] Identity
09:49:32 <adept>   refDefined = constTU [] `adhocTU` 
09:49:33 <adept>                (Identity . 
09:49:35 <adept>                 (\term -> case term of
09:49:35 <Heffalump> the type inference system has no way of telling what Term you want in it
09:49:37 <adept>                                (Defined _ tr) -> [tr]
09:49:39 <adept>                                _              -> []
09:49:41 <adept>                  ))
09:50:25 <adept> Heffalump: well, i cant help it - i want to print out all of them ;)
09:50:50 <Heffalump> there's no problem with uglyPrintAny
09:51:22 <Heffalump> the problem actually seems to be with adhocTU
09:51:49 <Heffalump> it takes a function of type t -> m a, but what does it do with it?
09:52:08 <adept> Look, this code compiles:
09:52:18 <adept> uglyPrint :: (Show t, Term t) => t -> IO ()
09:52:18 <adept> uglyPrint = applyTU (full_tdTU uglyPrintStep)
09:52:18 <adept>   where
09:52:18 <adept>   uglyPrintStep :: TU () IO
09:52:18 <adept>   uglyPrintStep = constTU () `adhocTU` (uglyPrintAny)
09:52:18 <adept>   uglyPrintAny x = do { putStrLn x }
09:52:23 <adept> *Main> :t uglyPrint
09:52:24 <adept> uglyPrint :: forall t. (Term t, Show t) => t -> IO ()
09:52:44 <adept> but it prints out Strings (which are instances of Term) only
09:53:23 <Heffalump> I'm losing track of what's actually going on with your problem. Here's the rule:
09:54:02 <Heffalump> in a type like (Foo a,Bar b,...) => type
09:54:13 <Heffalump> all the type variables a,b etc in the constraints must appear in the type
09:54:35 <adept> They do with (Term t, Show t) => t -> IO ()
09:54:46 <Heffalump> but they don't with the thing you were getting an error for
09:55:12 <adept> I forgot to say that I do this under "-fglasgow-exts -fallow-overlapping-instances -fallow-undecidable-instances"
09:55:18 <Heffalump> that shouldn't matter
09:55:39 <Heffalump> this isn't really a type system problem, it's a "you're not giving the compiler enough information to actually generate code" problem
09:58:32 <adept> Well, I see that from "putStrLn x" in the code above compiler deduces something about type of x and, therefore, type of uglyPrint. Ok, i could write "uglyPrintAny (SomeTermInstance1 x y) = putStrLn $ show x ++ show y; uglyPrintAny (SomeTermInstance2 x y) = putStrLn $ show x ++ show y;  uglyPrintAny x = do { putStrLn x }" and that will compile fine! Three instances of Term, and it compiles. Why doesn't it want to accept generic def?
10:01:26 <Heffalump> I don't understand your point.
10:01:42 <Heffalump> You're showing me dense pieces of code that I can't read very easily
10:02:20 <Heffalump> are you still getting the same error message you were getting above?
10:02:23 <hdaume> adept: but there you are showing it explicitly which show dictionary to use (because you're showing it a constructor, you're showing it the data type, and so your showing it the dictionary)
10:03:03 <adept> hdaume: damn. Now I'm starting getting it ...
10:07:34 <adept> hdaume: Now I see .... OK, no generic print for me this time :(
10:07:45 <hdaume> :)
10:08:07 <adept> and I was starting to get really sold on generic traversals ...
10:08:19 <hdaume> adept: they're awesome, imo :)
10:08:27 <hdaume> adept: but there are some problems, like the one you've stumbled on
10:08:42 <adept> hdaume: are you by any chance familiar with StrategyLib?
10:08:55 <hdaume> the one that originated with GPH?
10:09:13 <adept> hdaume: from Strafunski
10:09:15 <Heffalump> you can have a generic print, you just need to be careful to use it correctly
10:09:23 <adept> Heffalump: HOW?
10:09:28 <hdaume> adept: perhaps...what does it do?  :)
10:10:07 <adept> hdaume: well, it provides you with generic traversals over Term's and tools to generate instances of class Term via DrIFT
10:10:08 <Heffalump> if t is the type of your Term, you can write generic code whose interface mentions the type t
10:10:44 <adept> Heffalump: Term is a class. How should i mention this explicitly in the code?
10:10:44 <hdaume> then yes, i am :)
10:10:47 <Heffalump> it's at the point where your interface no longer mentions that type that you have to make a decision
10:11:08 <Heffalump> you don't need to mention it explicitly, the type inference system figures it out for you
10:11:19 <adept> Heffalump: i'm hopeless - i dont have such point IMO :(
10:11:23 * Marvin-- mutters about hdaume's name/email download form
10:11:28 <Heffalump> adept: huh?
10:11:36 <hdaume> Marvin--: stop that muttering
10:11:39 <Marvin--> wonder if I can circumvent it somehow *ponder*
10:11:46 <adept> hdaume: i'll second Marvin -- :)
10:11:49 <hdaume> Marvin--: it's not brain science :)
10:11:53 <hdaume> or brain surgery
10:11:57 <hdaume> or rocket science
10:11:58 <Heffalump> read logs of here for the download URL :-)
10:12:08 <adept> Marvin--: you could just bookmark the final URL ;)
10:12:42 <Marvin--> rocket surgery?
10:12:49 <hdaume> ;0
10:13:12 <adept> Heffalump: point is that I dont want to mention any instance. I know that all instances of Term that i will use will be instance of Show as well. I want to be able to print such instances. And I cant :(
10:13:35 <Marvin--> argh, stupid xchat doesn't use the clipboard
10:14:02 <adept> Marvin--: ? mine do
10:14:05 <adept> Marvin--: ? mine does
10:14:35 <Heffalump> but you can
10:14:43 <Heffalump> your uglyPrint thingy is perfectly well typed
10:14:58 <Heffalump> it was just when you tried to use it that things went wrong
10:15:22 <Marvin--> adept: there's no "Edit" menu anywhere, so the only thing I can do is select the text, and that shouldn't touch CLIPBOARD, only PRIMARY
10:15:48 <adept> Marvin--: but it groks Ctrl-C/Ctrl-V, no?
10:16:05 <adept> Heffalump: I dont want them to go wrong :)
10:16:44 <Heffalump> well, fix them so that you specify the type of Term you want at that point
10:16:55 <Heffalump> or change them so they have an interface that exposes the type variable t
10:17:03 <Marvin--> adept: if it does, then galeon's broken instead... damn
10:17:26 <Marvin--> hmm, nope, I must've just screwed up as usual
10:17:30 <Marvin--> oh well
10:19:30 <adept> uglyPrint = applyTU (full_tdTU uglyPrintStep)
10:19:30 <adept> uglyPrintStep = constTU () `adhocTU` (uglyPrintAny)
10:19:30 <adept> uglyPrintAny (Module x y z) = putStrLn $ show x
10:19:30 <adept> uglyPrintAny x = do { putStrLn $ show x }
10:19:50 <adept> damn. it shouldn't be here. sorry.
10:21:11 <adept> Heffalump: I dont get this: " change them so they have an interface that exposes the type variable t"
10:21:30 <adept> Heffalump: you mean "write type declarations yourself"?
10:21:45 <Heffalump> no
10:22:10 <Heffalump> IM don't write things of type Term t => Int -> Int (for example)
10:25:06 <adept> Now i have " Inferred type is less polymorphic than expected" :)
10:25:11 <adept> some progress ...
10:25:16 <Heffalump> ok, let's see the code
10:25:21 <Heffalump> just the fragment that breaks
10:25:28 <adept> uglyPrint :: (Term t, Show t) => t -> [(t,String)]
10:25:28 <adept> uglyPrint = runIdentity . applyTU (full_tdTU uglyPrintStep)
10:25:28 <adept> uglyPrintStep = constTU [] `adhocTU` (return . uglyPrintAny)
10:25:28 <adept> uglyPrintAny x = [(x,show x)]
10:25:47 <adept> 	Quantified type variable `t' escapes
10:25:47 <adept> 	It is mentioned in the environment:
10:25:47 <adept> 	  uglyPrintStep :: TU [(t, String)] Identity
10:26:03 <adept>  When trying to generalise the type inferred for `uglyPrint'
10:26:04 <adept> 	Signature type:     forall t.
10:26:04 <adept> 			    (Term t, Show t) =>
10:26:04 <adept> 			    t -> [(t, String)]
10:26:04 <adept> 	Type to generalise: t -> [(t, String)]
10:26:05 <adept>     When checking the type signature for `uglyPrint'
10:26:07 <adept>     When generalising the type(s) for `uglyPrint'
10:26:29 <Heffalump> umm
10:26:34 <Heffalump> do you need -fglasgow-exts etc?
10:26:48 <adept> Guess so, can try without them
10:27:00 <Heffalump> it might make the error message easier to understand
10:27:27 <adept> No luck, everything else breaks this instant ...
10:27:44 <Heffalump> ok, never mind then
10:29:00 <Heffalump> sorry, I can't figure out what's going on there.
10:30:23 <hdaume> do you have type sigs on uglyPrintStep and uglyPrintAny?  what happens when you add them?
10:30:36 <adept> with this code:
10:30:38 <adept> uglyPrint :: (Term t, Show t) => t -> [(String)]
10:30:38 <adept> uglyPrint = (map snd) . runIdentity . applyTU (full_tdTU uglyPrintStep)
10:30:38 <adept> uglyPrintStep :: (Show t, Term t) => TU [(t, String)] Identity
10:30:38 <adept> uglyPrintStep = constTU [] `adhocTU` (return . uglyPrintAny)
10:30:39 <adept> uglyPrintAny x = [(x,show x)]
10:30:54 <adept> i get:    Ambiguous type variable `t' in these top-level constraints:
10:30:55 <adept>       `Term t'
10:30:55 <adept> 	arising from use of `uglyPrintStep'
10:31:01 <adept>       `Show t'
10:31:01 <adept> 	arising from use of `uglyPrintStep'
10:31:25 <adept> That's were I started asking questions ...
10:32:19 <hdaume> i don't think it's possible to write the code you want
10:32:36 <hdaume> though i would suggest posting to h@h.o for advice; there are people who know this stuff infinitely better than me
10:32:40 <Heffalump> I'm confused about which function has ambiguous type variables
10:32:56 <adept> Heffalump: join the club ;) me too ...
10:32:56 <hdaume> i think the error message is misleading
10:33:23 <Heffalump> can you put your code online somewhere?
10:33:52 <shapr> isn't it in haskell-libs ?
10:34:16 <hdaume> the problem is what if i have 'data Foo a = Foo a ; data Bar = Bar' and there's 'instance Show (Foo a) where show (Foo _) = "Foo"' but no instance 'Show Bar'.  if you try to generically traverse a 'Foo Bar', you're going to get that the whole thing is an instance of Show (more)
10:34:19 <adept> shapr: yep it is. just replace uglyPrint definition with what i put here.
10:34:30 <hdaume> but when you try to traverse into the Bar, Bar itself isn't an instance of show, so it can't do anything
10:35:05 <adept> hdaume: so there should be something like ShowableTerm with instances for it and support for traversal?
10:35:25 <hdaume> i think this is basically what the error message is saying: it doesn't apriori know that 't' is, so it can't know that everything structurally below 't' is an instance of show
10:35:36 <hdaume> adept: i don't think that would even help
10:35:44 <hdaume> adept: erm, well yeah, i guess it would
10:36:10 <hdaume> adept: but your instance wouldn't be allowed to traverse into the 'a' in the instance for Foo above
10:36:23 <hdaume> adept: which sort of limits its applicability
10:37:02 <adept> hdaume: i feel like child cheated of candy
10:37:11 <hdaume> adept: hehe
10:38:19 <adept> hdaume: but... but... all i want is a better printout that (show topMostContainer) does ... Isn;t there a way?
10:38:24 <hdaume> i don't think having class contraints in generic traversals is possible, in general
10:39:06 <hdaume> adept: you might look at how Hat implements the observable class...they do interesting things...maybe there's something in there you can steal
10:39:59 <adept> hdaume: thanks, i'll do. Don't you know btw of any pretty-printing library which might be so king as to provide support for DrIFT? ;)
10:40:08 <adept> i'm still trying to find easy ways ;)
10:40:27 <hdaume> adept: no clue
10:44:25 <hdaume> presumably the drift pages would mention it though :)
10:44:54 * adept plans to kick Term hard enough untill it agrees that it could be show'n
10:44:55 * Heffalump would have thought ShowableTerm was the way to go.
10:45:20 <Heffalump> presumably instances of Term are built up recursively?
10:45:33 <adept> Heffalump: yep. With DrIFT.
10:45:45 <Heffalump> you could probably build up instances of ShowableTerm in the same way, then
10:46:04 <adept> No :(
10:46:24 <Heffalump> why not?
10:46:56 <adept> Hmm. Would (instance Show t, Term t => ShowableTerm t where show t = ... well ... show t ;) do the trick? ;)
10:47:26 <adept> Heffalump: DrIFT has to be taught to build ShowableTerm instances first
10:47:36 <Heffalump> is that a problem?
10:47:47 <Heffalump> anyway, I think you could write ShowableTerm using the operations of Term
10:47:51 <Heffalump> oh, maybe not.
10:48:09 * Heffalump decides it's too complicated and that he should be doing other things :-)
10:51:07 <adept> hdaume: I have notes regarding the tutorial, but they are still on my PDA ... will send them shortly though.
10:53:14 <hdaume> adept: cool, thanks
10:53:24 <hdaume> adept: no, it wouldn't :)
10:54:40 <adept> hdaume: i guess that "show x = show x" looks cool but would not compile :)
10:54:56 <Heffalump> it would compile fine
10:55:05 <Heffalump> it would even run fine
10:55:10 <Heffalump> it just wouldn't terminate :-)
10:55:18 <adept> Heffalump: ;))))))
10:57:55 * adept . o O (Terminator 4 - Terminating "bot")
10:58:10 * adept . o O (Terminator 4 - Terminating "x = x")
10:58:45 <Igloo> It probably would with ghc  :-)
10:59:38 <Heffalump> x=x would
10:59:42 <Heffalump> show x = show x wouldn't
10:59:50 <Heffalump> (AIUI)
11:00:44 <Igloo> Ah, OK
11:00:58 <hdaume> correct :)
11:04:45 <steveh> . o O ( wow haven't seen thought bubbles since the heyday of MOO )
11:11:22 <adept> well, thank you all, i'm going home...
11:11:24 <adept> bb
13:43:16 <atom-z> whats the equiv of scanf in haskell?
13:43:57 <jlouis> read
13:44:10 <jlouis> dont abuse it though, it is painfully slow
13:45:54 <Igloo> And you want reads if you want to be able to cope with failed reads
13:46:43 <atom-z> jlouis: what about sscanf?
13:47:07 <phubuh> read(s?) is the equivalent of sscanf, you'll have to get input yourself
13:57:08 <Marvin--> hdaume?
14:00:15 <Marvin--> is there a *license* to the HAllInOne code? :-/
14:00:27 <atom-z> how can i split a string? (like sscanf(str,"%s %s %s",one,two,three);)
14:00:33 <Marvin--> words
14:00:38 <hdaume3> no :)
14:00:49 <Marvin--> damn, so I can't even use it
14:00:54 <hdaume3> or at least, nothing of mine
14:00:56 <hdaume3> Marvin--: why not?
14:01:14 <Marvin--> if there is no license, how do I know if I can use it or not?
14:01:31 <Marvin--> I'm dead serious
14:01:54 <hdaume> ah...that's not what i meant.  officially the license is: this uses code from other things.  whatever their licenses say applies to this (if necessary).  i impose no additional restrictions"
14:02:46 * hdaume , in general, thinks licenses are stupid (but please don't start a war over this :P)
14:03:05 <Marvin--> sorry, that's not how it works
14:03:11 <Marvin--> unless you explicitly give me rights, I have none
14:03:42 <dark> At least, until the people rise up and overthrow their corporate masters.
14:04:05 <Marvin--> I also note that there doesn't seem to be a license on gmap :-/
14:04:06 <hdaume> how about this: you have the right to do whatever you want with this code so long as this doesn't go against anything specified in the (perhaps non-existant) liceneses of code this depends on.
14:05:07 <Marvin--> what I *mean* is that you should ship this with the source and binary distributions
14:05:23 <Marvin--> As long as you don't, we're on iffy legal grounds
14:05:27 <hdaume> my whole point is: i don't give a hoot what people do with my code, but i don't want to break the law and redistribute stuff i can't.  i also don't want to get into the "what happens if you merge GPL with some other license" crap.
14:06:16 <hdaume> okay, i'll put LICENSE files in the tar bundles :)
14:06:20 <Heffalump> well, you have to check the legal situation with stuff you make available for download
14:06:21 <jlouis> hdaume: place it in the Public Domain explicitly then
14:06:34 * Marvin-- grumbles as he replies to a gazillion of "key exchange formalities" mails
14:06:43 <jlouis> or the BSD-style license. It has become very simple these last years (after 1999 I think it was)
14:06:56 <Marvin--> jlouis: PD is iffy, especially since he redistributes GMap
14:07:08 <jlouis> ah, yes
14:07:12 <jlouis> that is a problem
14:07:23 <Marvin--> especially since there's no license info for GMap!
14:07:45 <Marvin--> hdaume: you're actually doing something illegal when you redistribute GMap :-/
14:07:55 <Marvin--> unless there's a sekhrut license to GMap that I haven't found
14:07:55 <hdaume> meh :)
14:08:30 <hdaume> if someone sues me or asks me to withdraw it, i humbly shall :)
14:09:17 * Marvin-- shrugs
14:09:37 <Marvin--> maybe I'm overly picky, comes with the territory of being a debian developer, I guess
14:09:44 <Igloo> How similar is gmap to what went into GHC?
14:09:49 <hdaume> i know i'm probably underly picky :)
14:09:52 <hdaume> Igloo: pretty much the same
14:10:07 <Igloo> So it's probably covered by GHC's BSD licence then
14:10:33 * Igloo keeps meaning to ask Chris Okasaki about licences
14:10:37 <Marvin--> probably, yes, but then there should be a copy of GHC's BSD license file in the GMap directory of hdaume's source distribution
14:10:50 <Marvin--> all I'm sayin'
14:10:58 <Heffalump> SyntaxPolice and I are illegally distributing binary arrowp packages :-)
14:11:02 <hdaume> :-)
14:11:17 <Igloo> Oh, I agree, Marvin, but at least it has actually been given a licence
14:11:17 <Heffalump> although I do have an email from Ross that implies we have permission to do so
14:11:45 <Igloo> What does the mail say? That he'll put a licence in the next release or something?
14:11:49 <Heffalump> yeah
14:11:51 <syntax-laptop> Heffalump: you never told me that :-)
14:12:16 <Heffalump> and doesn't object to the bit in my email to him where I acknowledge that I technically don't have any right to be doing so and hope he doesn't mind
14:12:35 <Igloo> Oh, looks like Ross applied your hack (or something like it) BTW, Syn
14:12:47 <Marvin--> what hack, to what?
14:12:59 <Igloo> MAXPATHLEN, hugs
14:13:10 <Heffalump> syntax-laptop: yeah, sorry, it's all part of my plot to get you to join my criminal fraternity
14:13:15 <Igloo> The hack being to #define it to $bignum
14:13:15 <Marvin--> hah
14:14:09 * esap thinks #define is not a good way to implement syntactic sugar.
14:14:38 <Heffalump> well, hugs is written in C, what else could they do?
14:15:23 <syntax-laptop> Heffalump:  so ross can't decide on a license yet?
14:15:55 * Marvin-- feels good
14:16:06 <Marvin--> we spent half of the day at work today on writing test cases :-)
14:16:19 <Igloo> I suspect he's just putting off the effort of finding the text of the BSD 3 clause licence, BICBW  :-)
14:16:37 * Igloo feels good, but for the less virtuous reason of eating chips
14:17:02 <Heffalump> syntax-laptop: no, it'll be GPL with an exception for the output
14:17:13 <syntax-laptop> ahh interesting
14:17:17 <Igloo> Ah, cool
14:17:18 <Heffalump> he said he'll do a release in the next couple of weeks and put it in that
14:17:28 <Heffalump> at least I think he said GPL, I can't quite remember
14:20:02 <Marvin--> GPL for what?
14:20:08 <Igloo> arrowp
14:20:41 <Marvin--> ah
14:21:07 <Marvin--> with the recent discussion of Java and LGPL, I'm becoming sceptical to licensing Haskell code under LGPL
14:21:26 <atom-z> what discussion?
14:21:28 <Igloo> Because it links with the RTS?
14:21:37 <atom-z> how can i split a string? (like sscanf(str,"%s %s %s",one,two,three);) (sorry for repeating)
14:21:39 <Marvin--> because of linking unclarity in general
14:21:40 <Igloo> But even so, linking BSD+GPL is fine?
14:21:41 <Marvin--> atom-z: words
14:21:46 <Marvin--> atom-z: already told you once :)
14:21:58 <atom-z> Marvin--: ah that was directed at me :)
14:22:02 <Riastradh> words "foo bar baz" -- returns: ["foo", "bar", "baz"]
14:22:03 <atom-z> Marvin--: heh ok
14:22:22 <Marvin--> Igloo: yes, but the virtue of LGPL is that you can link proprietary code with it, but for All Other Purposes, it's like GPL
14:22:34 <atom-z> Marvin--: thanks
14:22:45 <Marvin--> Igloo: which I kinda like... but when the linking is unclear (like with Java, and Python now that I think of it...damn, gotta look over the pyopenssl licensing)
14:23:47 <Marvin--> atom-z: yes, sorry for not making that clear :/
14:23:48 <Igloo> Oh, I read LGPL as GPL above
14:25:39 <Igloo> I don't see why it makes you sceptical, though. If you meant the cross-module inlining when compiling a program with GPL and proprietary modules then the solution would be to switch to use LGPL; I don't see how using the LGPL is ever more dangerous?
14:26:27 <Marvin--> I'm just wary, and IANAL
14:27:22 <dark> The LGPL and Java discussion was caused solely by typical slashdot misreporting, IIRC.
14:27:29 <atom-z> ok i have: line <- hGetLine fp\nlineSplit <- words line... Couldn't match `IO' against `[]'
14:27:49 <hdaume> 'let lineSplit = words line'
14:28:08 <hdaume> words isn't an IO action
14:28:12 <hdaume> so you don't use '<-'
14:29:24 <atom-z> ok
14:29:33 <atom-z> why are there different assignment operators?
14:29:39 <Marvin--> dark: okay?
14:29:54 <dark> atom-z: Because = is not an assignment operator :)
14:30:01 <hdaume> well said :)
14:30:01 <Marvin--> atom-z: the short answer is that none of them are assignment operators ;)
14:30:30 <hdaume> but "x <- y" is very semantically different from "let x = y".  the former means "run y and put the result in x" while the later means "make x a name for y"
14:30:45 <atom-z> ic
14:30:57 <Marvin--> 'Update: 07/18 02:44 GMT by CN: The FSF's Executive Director, Brad Kuhn adds "LGPL's S. 6 allows you to make new works that link with the LGPL'ed code, and license them any way you see fit. Only the LGPL'ed code itself must remain Free. Such 'client code' can even be proprietary; it need not be LGPL'ed."'
14:30:57 * Igloo isn't convinced = isn't an assignment operator
14:30:58 <Marvin--> er
14:31:07 <dark> Marvin: Don't mind me, I think the LGPL should be exterminated for being too long :)
14:31:08 <Marvin--> so basically the slashdot story was totally pointless?
14:31:36 <Marvin--> dark: I think LGPL is a decent compromise
14:31:38 <dark> Marvin: They never bothered to read section 6 and reported it as the exact opposite of what it meant.
14:31:57 * Marvin-- rolls his eyes
14:32:03 <dark> Typical for slashdot.  This one was better than average -- usually the editors don't even read the submission itself.
14:32:04 <Marvin--> dark: so by their reading, it wouldn't work for C either
14:33:46 * Marvin-- borrowed Microserfs from a friend
14:33:52 * Marvin-- winks at hdaume
14:34:12 <dark> I think licenses should be simple enough to be used and applied by programmers without getting lawyers involved.  I think it's clear from the endless confusion and misinterpretation that the GPL is not simple enough.
14:34:25 <hdaume> dark: word.
14:34:27 <Marvin--> oh, definitely
14:34:49 <shapr> word up
14:34:53 <Marvin--> the GPL is complicated since it uses copyright law to grant rights instead of taking them away :)
14:34:54 <dark> Even on linux-kernel, where people supposedly apply the GPL to their code every day, I see the most weird misstatements of the GPL asserted with great vigour.
14:35:01 <atom-z> is list[index] the correct way to get something out of a list?
14:35:08 <hdaume> atom-z: no
14:35:15 <hdaume> you can use 'list !! position'
14:35:26 <atom-z> uc
14:35:28 <atom-z> err
14:35:29 <atom-z> ic
14:35:29 <hdaume> but keep in mind that that's an O(n) operation
14:35:30 <atom-z> thanks
14:35:30 <shapr> but then, any democracy where less than 50% of the voters understand the rules isn't really a democracy, is it?
14:35:32 <hdaume> not O(1)
14:36:01 <hdaume> in general, if you're using (!!) a lot, you're probably doing something wrong :)
14:36:04 <Marvin--> shapr: we spent half the day today writing test cases for our search engine prototype :-)
14:36:12 <shapr> Marvin--: yay!
14:36:21 <Marvin--> and then we found a bug
14:36:24 <shapr> yay!!
14:36:28 <Marvin--> so we wrote a test case for the bug, and fixed it ;)
14:36:29 <dark> shapr: Maybe it's a confusocracy.
14:36:46 <shapr> dark: I must steal that word and write a livejournal entry on this subject
14:37:06 <Marvin--> "Bill (Bill!) sent Michael this totally wicked flame-mail from hell on the e-mail system--and he just wailed on a chunk of code Michael had written."
14:37:23 <Marvin--> bah, everybody know it's a corpocracy
14:37:25 <shapr> truly
14:37:48 <atom-z> Marvin--: no, thats not true at all. most people have no idea
14:37:53 <dark> shapr: I constructed it from Scott Adams's "confusopoly", which refers to industries with such complicated rules that they're effectively monopolies because no-one understands the pricing (e.g. insurance policies, airlines)
14:38:40 <Marvin--> "Actually, nobody on our floor has ever been flamed by Bill personally. The episode was tinged with glamour and we were somewhat jealous. I tried to tell Michael this, but he was crushed."
14:38:55 <shapr> Marvin--: where are you getting this?
14:39:03 <Marvin--> shapr: Microserfs
14:39:13 <Marvin--> borrowed it from a friend
14:39:24 <shapr> wow, that's spiffy
14:39:56 <phubuh> i think i remember those quotes from the amazon sample pages
14:40:09 <Marvin--> "They mow the lawn every ten minutes at Microsoft. It looks like green Lego pads."
14:40:32 <Marvin--> heh, he used the word "galumphed"
14:40:41 <shapr> that's a good word
14:41:01 <Marvin--> sure is
14:43:56 <Marvin--> "I am danielu@microsoft.com. ... I am a tester--a bug checker in Building Seven. I worked myself up the ladder from Product Support Services (PSS) where I spent six months in phone purgatory in 1991 helping little old ladies format their Christmas mailing lists on Microsoft Works."
14:46:44 <Heffalump> Microserfs was quite cool
14:47:03 <Heffalump> Though it gets very surreal towards the end, unless I'm confusing it with a different surreal book that I read at about the same time
14:47:15 <Marvin--> heh
14:47:23 <Heffalump> ISTR building 7 is the one that doesn't exist, too
14:47:55 <Heffalump> (it took so long to complete that 8 was ready before it was, so it ended up being called 9, or something)
14:49:37 <Marvin--> "The stock closed up $1.75 on Friday. Bill has 78,000,000 shares, so that means he's now $136.5 million richer. I have almost no stock, and this means I am a loser."
14:50:53 * Heffalump returns from failing to find his copy
14:51:03 <Heffalump> it was Girlfriend in a Coma that got really surreal, anyway
14:51:15 <Marvin--> I feel sorry for all the people sitting there with shares, sitting there checking the status of the stock several times a day
14:51:44 <Heffalump> heh
14:52:01 <Marvin--> haha: "The driveway contains six cars: ..., and two Tauri (nerd plural for Taurus)."
14:53:45 <Marvin--> yay, they have IKEA mugs
14:55:29 <Marvin--> "Our mail is in little piles by the front door: bills, Star Trek junk mail, ..."
15:26:16 <Heffalump> ghc -fglasgow-exts can derive any instance on a newtype from the underlying type, right?
15:28:07 <Igloo> Yup
15:32:05 <Heffalump> oh, does that work with MPTCs?
15:33:15 <Heffalump> hehe
15:33:20 <Heffalump> IRC.hs:160:
15:33:20 <Heffalump>     Can't make a derived instance of `MonadState LB'
15:33:20 <Heffalump>     (even with cunning newtype deriving:
15:33:20 <Heffalump>      `MonadState' does not have arity 1)
15:33:20 <Heffalump>     When deriving instances for type `LB'
15:33:40 <Heffalump> oh wow, it worked cos of the parameter ordering
15:40:34 <Igloo> Euch, the nhc tarball seems to include the .hi files
15:49:33 <earthy> igloo: but the nhc .hi files are text
15:49:45 <earthy> so not quite as platform-dependent as the ghc .hi files
15:49:50 <earthy> anyway, bedtime
15:51:15 <Igloo> They can't be simple text or dpkg wouldn't be complaining about them having changed
15:51:41 <Heffalump> you mean the tarball from York, or the one in the Debian package?
15:51:50 <Igloo> In fact script/Main.hi looks pretty binary to me
15:51:54 <Igloo> York
15:58:22 <Igloo> Does anyone know if nhc can build without either nhc or ghc being installed?
15:59:39 <Igloo> Oh, euch, it can
16:00:11 <Igloo> In fact that even seems to be prefered to building with nhc
16:03:27 <Heffalump> YM it uses hugs?
16:03:57 <Igloo> "If you don't have hbc or ghc for your machine, then don't worry, nhc98 will build quite happily using just a C compiler. (The basic build is much faster, but the resulting compiler will be slower.) You can also build nhc98 using an earlier version of nhc98 if you want, but we don't do that by default because the build time can be slow."
16:29:28 <Heffalump> how's that work, do they distribute .c files too?
16:29:56 <Heffalump> anyone know how to sleep in Haskell?
16:30:36 <hdaume> Heffalump: i use timediff and just loop until a certain time is reached...it's a good way to eat up cycles, too :) (though, in practice, it doesn't seem to do this)
16:30:55 <Heffalump> ick :-)
16:30:59 <hdaume> :)
16:31:00 <Igloo> I'd try IO, IO stuff in the hier modules, Posix, using the FFI in that order depending on what sort of portability you want
16:31:13 <Heffalump> I've looked through all the IO stuff
16:31:16 <Heffalump> didn't think of Posix
16:31:33 <Igloo> And yeah, there are .c, .hc and various other files
16:32:05 <Igloo> In the worst case CPUtime is probably nicer than timediffs  :-)
16:32:30 <Heffalump> System.Posix.Unistd
16:33:57 <Igloo> Oh, the .hi file dpkg-buildpackage was complaining about was one ghc made, the ones that come with nhc are actually plain text
16:34:33 <hdaume> Win32Process has sleep :)
16:35:17 * Igloo pats hdaume on the head
16:35:24 <Igloo> :-P
16:35:25 <hdaume> awww, thanks
16:36:00 <Heffalump> GRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!
16:36:06 <Igloo> ?
16:36:11 <Heffalump> quit nicely, you damn bot
16:36:20 <Igloo> lol
16:36:38 <Heffalump> you can watch on #haskell on OxIRC if you want a laugh
16:38:22 * Igloo makes a note not to try to use threads in the ICFP next year if it's this much work just to make it stop  :-)
16:38:43 <Heffalump> it's something to do with what happens after you send QUIT to the server
16:38:55 <Heffalump> I can't figure out the way to let the connection get torn down gracefully
16:38:56 <Igloo> Does quit actually get sent?
16:39:06 <Heffalump> well, nothing else should be closing the connection
16:39:12 <Igloo> The writer thread will have to be what signals when it's safe to quit
16:39:52 <Igloo> And the server should respond and close the connection anyway, so you could wait for that at the risk of having to kill it if the server screws up
16:40:16 * Igloo can't remember if clients tend to show you your quit message or not
16:40:17 <hdaume> Igloo: there was a post from SM on one of the mailing lists a while back about how to create a thread that lasted only a certain amount of time
16:44:16 * Igloo notices Heff's last line and points out the program quitting will close the connection, although I can't remember what quit message you get in that case
16:44:36 <Igloo> But I'd believe it's "EOF from client"  :-)
17:20:47 <Igloo> I'm confused - there's an nhc patch to cope with GHC's numbering change with version 6, but AFAICT it won't build with ghc6
17:35:01 * Igloo comes to the conclusion that nhc is in a bit of a mess
17:36:31 <Igloo> ./configure; make clean seems to remove the .hc files so building with gcc doesn't work any more
17:39:31 <Fractal> Usually "Read error: 54 (Connection reset by peer)" or some such
17:43:32 <Igloo> Oh, euch, and it has failed dependencies on hmake on a number of arches too
19:11:50 * Igloo gives up on nhc - I haven't used it for ages anyway
19:12:38 <Pseudonym> I don't think I've ever used it.
19:12:51 <Pseudonym> Does it have any nice non-H98 features?
19:13:41 <Igloo> It's main selling point is portability. It also spawned hmake and hat
19:14:14 <Igloo> But I think it will be less effort to get GHC to compile on all of Debian's arches than to get nhc to compile on x86 - and don't talk to me about hat  :-)
19:14:44 <Pseudonym> Woah.
19:14:56 <Pseudonym> You used "get GHC to compile" and "less effort" in the same sentence.
19:15:33 <Igloo> Heh, GHC isn't too bad where it's supported
19:15:41 <Pseudonym> True.
19:15:53 <Igloo> And SM has been working on the porting script these last couple of days, so I'm hopeful...
19:16:43 <Igloo> Although once alpha and IA64 are done I start hacking perl scripts I'm unfamiliar with that operate on assembly languages I don't know and hope for the best  :-)
19:17:00 <Pseudonym> Yeah, that's part of it.
19:17:23 <Pseudonym> Mercury used some Perl to boostrap the compiler, but we got rid of it within six months of the initial bootstrap.
19:18:17 <Igloo> Anyway, bed time
19:18:48 <Pseudonym> Night.
19:18:59 <Igloo> g'night
19:19:42 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","HToolkit 1.0 - http://htoolkit.sf.net/","wxHaskell 0.1 - http://wxHaskell.sf.net/"]'
19:19:42 --- topic: set by shapr on [Wed Jul 23 06:18:13 2003]
19:19:42 --- names: list (clog phubuh flippo Pseudonym clausen buggs|afk Arnia kosmikus|away mattam esap norpan_ xkb pesco Heffalump smklsmkl polli sjj Strike Smerdyakov andersca Fractal ibid seth reffie lambdabot shapr el_diego earthy juhp galority mgoetze|away dalor tic saz Segora opet keverets arguile o3_ dennisb skylan whee vegai Riastradh jlouis steveh lilith d33p emu cale tez Igloo tmoertel LoganH wax cm)
19:20:40 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","HToolkit 1.0 - http://htoolkit.sf.net/","wxHaskell 0.1 - http://wxHaskell.sf.net/"]'
19:20:40 --- topic: set by shapr on [Wed Jul 23 06:18:13 2003]
19:20:40 --- names: list (clog phubuh flippo Pseudonym clausen buggs|afk Arnia kosmikus|away mattam esap norpan_ xkb pesco Heffalump smklsmkl polli sjj Strike Smerdyakov andersca Fractal ibid seth reffie lambdabot shapr el_diego earthy juhp galority mgoetze|away dalor tic saz Segora opet cm wax LoganH keverets arguile o3_ dennisb skylan whee vegai Riastradh jlouis steveh lilith d33p emu cale tez Igloo tmoertel)
19:24:03 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","HToolkit 1.0 - http://htoolkit.sf.net/","wxHaskell 0.1 - http://wxHaskell.sf.net/"]'
19:24:03 --- topic: set by shapr on [Wed Jul 23 06:18:13 2003]
19:24:03 --- names: list (clog phubuh flippo Pseudonym clausen buggs|afk Arnia kosmikus|away mattam esap norpan_ xkb pesco Heffalump smklsmkl polli sjj Strike Smerdyakov andersca Fractal ibid seth reffie lambdabot shapr el_diego earthy juhp galority mgoetze|away dalor tic saz Segora opet cm wax LoganH tmoertel Igloo tez cale emu d33p lilith steveh jlouis Riastradh vegai whee skylan keverets arguile o3_ dennisb)
23:19:25 <adept> hi
23:22:48 <phubuh> emu: Problem parsing dependency Depends
23:22:48 <phubuh> emu: Error occured while processing ghc6-doc (NewVersion1)
23:22:48 <phubuh> emu: Problem with MergeList /var/lib/apt/lists/www.syntaxpolice.org_haskell-experimental_unstable_Packages
23:22:48 <phubuh> emu: The package lists or status file could not be parsed or opened.
