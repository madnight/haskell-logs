00:32:25 * Marvin-- yawns
00:32:36 <Pseudonym> Slow IRC day.
00:33:09 <Marvin--> eh, it usually is pretty quiet around this time
00:33:36 * Marvin-- just printed out ten pages worth of gpg fingerprints
00:33:45 <Pseudonym> Dare I ask why?
00:33:59 <Marvin--> keysigning party at debconf
00:34:05 <Pseudonym> Ah, OK.
00:34:17 <Marvin--> meaning I'll get ~100 new signatures, yay
00:35:41 <Pseudonym> Can never have too many signatures, I always say.
00:36:38 <Marvin--> indeed
01:04:01 <Marvin--> ugh
01:04:15 * Marvin-- digs around in a zillion lines of python code to figure out where to plug in the indexing engine
01:08:15 <Marvin--> actually, the ifc is only 9ksloc, I'll find it in no-time!
01:10:08 <Marvin--> google is so not feeling well
01:15:52 <Pseudonym> Night all.
01:45:33 <Marvin--> morning Arnia
01:58:52 <Arnia> Morning :)
01:59:00 * Arnia is dreaming of real ale
02:00:49 <Marvin--> mm, real ale
02:01:58 <Arnia> Going to sit in the pub all afternoon
02:02:06 <Arnia> Now I'm back home, I'm a local :)
02:02:22 <Marvin--> heh
02:02:48 <Marvin--> I always felt that drinking real ale in a pub is something of a lottery, most of the time it's really good, but sometimes it's really bad
02:02:50 * Arnia has visions of League of Gentlemen
02:03:04 <Arnia> Oh of course... but the experiment is fun
02:03:22 <Arnia> As long as you avoid schlock like Theakstons you're fine ;)
02:03:28 <Marvin--> heh
02:05:12 <Arnia> Old Speckled Hen is quite nice
02:07:00 <Marvin--> is that a real ale? I thought it was a "plain" ale :) but maybe there are both kinds?
02:07:57 <Arnia> Its a real ale... it is cask rather than keg and is still brewing when it gets to the pub so its real
02:08:30 <Marvin--> okay, I've only had it on bottle
02:09:09 <Arnia> I spend too much time sitting in pubs :)
02:09:58 <Marvin--> my favourite pub here in Göteborg normally has two real ales, and keep switching around
02:10:01 <Marvin--> very nice
02:10:15 <Marvin--> of course, it means that sometimes you get crap :)
02:10:50 <Arnia> Yeah... but if you like trying stuff like I do, then you're in heaven :)
02:19:05 <Marvin--> some day I really have to go to the UK and Ireland and drink lots and lots of ale
02:21:50 <Arnia> We're not ALL alcoholics ;)
02:28:55 <Marvin--> no, no, no, but you have good ale
02:29:11 <Marvin--> Sweden has some nice lagers, but only a very few arcane ales
02:30:14 <Arnia> I think its an anglo/celtic thing :)
02:30:29 <Arnia> Like how solid our food is
02:30:30 <Marvin--> " Thanks to Per Samuelsson and a visit to the Stockholm Beer, Whiskey and Cider Festival, I have been able to get a really good representative sample of Swedish microbrews. Although I am assured that there are plenty of crappy beers in Sweden, I have only suffered through a couple of them in the name of beer-tasting."  heh
02:30:35 <Marvin--> http://members.attcanada.ca/~jdoakes/se.html
03:24:01 <earthy> that Oakes guy is scary
04:28:26 * Marvin-- growls
04:28:44 <o3> growl?
04:30:13 <Marvin--> http://lists.debian.org/debian-testing/2003/debian-testing-200307/msg00014.html
04:30:46 <Marvin--> I just love it when someone tells me "You know, this thing you've been working on for free for a year or so now, I don't like it, you should do <radically different thing> instead"
04:31:25 <andersca> yeah
04:31:27 <andersca> gotta love that
04:32:00 <Marvin--> I'd better not reply to that mail for a few hours, I'm too worked up now
04:32:34 <Marvin--> I mean, writing such a guide is a great idea, you could base it off gentoo's installation guides, he should get started right away
04:32:44 <Marvin--> just don't bloody criticize me for *not* doing it
05:01:38 <earthy> `sigh'
05:35:01 <bohdan> hello
05:35:26 <bohdan> i wonder how can I trace my haskell program withing hugs
05:40:45 <bohdan> HOOD page gives me 404 :(
05:41:32 <phubuh> If the function you want to trace is not very complex, you could litter it with calls to Trace::trace.
05:42:11 <Marvin--> ::? This is Haskell, not C++ :)
05:42:15 <bohdan> phubuh: it's quite simple. could you suggest an example i'm total newbie
05:43:16 <phubuh> length [] = trace "trace ([]) = 0" 0
05:45:45 <phubuh> err, the trace in the string should be length, of course
05:45:57 <bohdan> thanks, i get it
05:47:29 <bohdan> i use this: 'figure_fac num start = trace ("figure_fac "++show num ++" " ++show start++"\n") figure_fac (div num (start+1)) (start+1)', is it correct trace usage? can i use it to autoshow params?
05:48:36 <Marvin--> bohdan: if you put parentheses around the recursive call, yes
05:49:14 <bohdan> Marvin--: like (figure_fac (div .... )) ?
05:49:55 <phubuh> no, it can not automatically show your parameters. that would require very black magic and be very confusing.
05:50:01 <bohdan> Marvin--: it clutters the syntax can I get rid of all those ()s ?
05:50:09 <bohdan> phubuh: ok
05:50:31 <bohdan> "hat" isn't in debian/woody, is it present in unstable?
05:50:48 <Igloo> Brackets around the second argument to trace aren't necessary I don't think
05:50:56 <phubuh> yep, it's in unstable
05:51:07 <Igloo> 2.02 is, bohdan
05:51:09 <phubuh> (if this is what you mean: hat - The nhc98 HAT source-level tracer)
05:51:15 <bohdan> thanks
05:52:16 <bohdan> am I *obliged* to use "getInteger :: IO Integer; getInteger = readLn" or is there something predefined just for the case?
05:58:08 <Marvin--> yay, another Debian user :)
05:58:21 <Marvin--> bohdan: there's the $ operator too
05:58:52 <bohdan> Marvin--: onlinereport reference, please
05:59:03 <Marvin--> @prelude ($)
05:59:05 <lambdabot> *** "($)" prelude "Haskell Standard Prelude Dictionary": text follows
05:59:05 <lambdabot> ($)
05:59:05 <lambdabot>   infixr 0 $
05:59:05 <lambdabot>   ($) ::  (a -> b) -> a -> b
05:59:13 <bohdan> oh
05:59:37 <Marvin--> er, I wonder why it didn't show the definition
05:59:42 <Marvin--> f $ x = f x  anyway
06:00:31 * bohdan blinks
06:00:59 <Marvin--> it's the function application operator :)
06:01:47 <bohdan> Marvin--: you mean it helps toget rid of (), or what?
06:02:47 <o3> bohdan: instead of writing something like "putStrLn (show (2 + 2))", you can write putStrLn $ show (2 + 2)".  everything on the right of the $ is treated as if it has ()s around it
06:07:33 <Igloo> But for the case of trace, trace s f x y z == (trace s f) x y z and trace s f is ~equivalent to f so neither () nor $ should be necessary
06:08:25 <bohdan> Igloo: :) i get the point
06:08:47 <bohdan> btw is there something like *TK bindings for haskell?
06:09:51 <Igloo> Yes, see HTk on http://www.haskell.org/libraries/
06:10:07 <Igloo> (never used it myself)
06:20:09 <bohdan> "HUGS has build-in graphics library" -- what does it reffer to?
06:28:10 <Marvin--> heh, Laura is crazy, she just ran into my office, giggling hysterically and then ran out again
06:36:23 <SyntaxPolice> mornin
06:51:11 <SyntaxPolice> Igloo: can you email me an id_{d,r}sa (ssh key) signed with your debian key?
06:52:11 <SyntaxPolice> anyone else who wants access to the haskell-experimental debian archive too :-)
06:53:22 <Marvin--> yay
06:53:49 <Marvin--> ijones@syntaxpolice.org?
06:55:50 <SyntaxPolice> ja
06:57:08 <Marvin--> did we ever remotely agree on what to do with haskell libraries in Debian?
07:00:01 <SyntaxPolice> Marvin--: hahahahahahahaha!
07:00:10 <SyntaxPolice> Marvin--: I think the answer is the Library Infrastructure project :)
07:00:25 <SyntaxPolice> I posted to debian-devel too and I keep meaning to summarize that converation on the wiki
07:01:03 <phubuh> What exactly is the haskell-experimental Debian archive?
07:01:24 <Marvin--> the Library Infrastructure project is sort of orthogonal to what we do in Debian, isn't it?
07:01:41 <SyntaxPolice> Marvin--: it'll make whatever we decide to do much easier, I hope
07:01:57 <Marvin--> well, yes...
07:02:05 <SyntaxPolice> Marvin--: btw, the consensus on -devel was compile-at-install-time, but I'm not married to that idea (yet) :)
07:02:22 <SyntaxPolice> phubuh: I'm setting up an apt source for experimental haskell packages like the one in the topic
07:02:23 <Marvin--> I dislike compile-at-install-time
07:02:31 <SyntaxPolice> Marvin--: I know :)
07:02:33 <Marvin--> it takes too much of my valuable time
07:02:36 <phubuh> Ah, cool.
07:02:50 <SyntaxPolice> Marvin--: you should follow up to the conversation on -devel to argue against it
07:03:03 <Marvin--> SyntaxPolice: yeah, I guess, if I was subscribed :-P
07:03:55 <Marvin--> SyntaxPolice: and the discussion wasn't that lengthy, was it?
07:04:33 <SyntaxPolice> you miss all the good stuff if you're not subscribed! http://lists.debian.org/debian-devel/2003/debian-devel-200306/msg01373.html
07:04:42 <SyntaxPolice> no, it wasn't lengthy
07:04:55 <Marvin--> damn it, some day I'm going to try to reproduce this windowmaker bug under controlled circumstances and track it down
07:05:12 <SyntaxPolice> and for the humor value: http://lists.debian.org/debian-devel/2003/debian-devel-200307/msg00421.html
07:05:27 <Marvin--> SyntaxPolice: well, actually, I am subscribed, but it goes directly into a procmail filter that sorts it by week and then bzip2:s the files
07:05:50 <Marvin--> SyntaxPolice: yeah, there was one of those on -boot too
07:06:03 <SyntaxPolice> heh
07:06:21 <Marvin--> http://lists.debian.org/debian-boot/2003/debian-boot-200307/msg00071.html
07:07:11 <Igloo> Syn: Cool, ta, I'll try to remember when I go home
07:07:31 <Marvin--> I have read the discussion before, but I didn't feel that anything interesting came out of it
07:07:42 <SyntaxPolice> I like the followup "heh you idiot" (to juridical prosecution)
07:07:47 <Marvin--> yeah
07:07:51 <SyntaxPolice> narL I know :(
07:07:53 <SyntaxPolice> whoa
07:07:53 <Igloo> Syn: Will (Does?) it have stable/testing/unstable/experimental sections?
07:07:57 <SyntaxPolice> narL = Mar:
07:08:09 <SyntaxPolice> Igloo: I think so yeah
07:08:19 <Igloo> Excellent
07:08:25 <SyntaxPolice> its not ready quite yet, but it should be today
07:08:46 <Marvin--> I don't know how complicated it is to compile Common Lisp, but "compiling" Python is really simplistic, the comparison to Haskell isn't useful
07:09:01 <SyntaxPolice> so you should post that on -devel :)
07:09:10 <Marvin--> bah
07:09:18 <SyntaxPolice> I don't like posting follow-ups like, "this guy Marvin-- thinks that..."
07:09:24 <earthy> is there a standardised name-mangling for haskell already?
07:09:26 <SyntaxPolice> ;)
07:09:28 <Marvin--> :)
07:09:52 <earthy> (as in: look at what happened to C++ libs when gcc 3 came out)
07:10:19 <Marvin--> http://lists.debian.org/debian-testing/2003/debian-testing-200307/msg00014.html  now *this* is a useful report, especially the 'general comment' at the end!
07:10:29 <earthy> yeah. :)
07:10:34 * earthy consoles marvin--
07:10:54 * Marvin-- bitches and moans some more
07:11:48 * earthy gives marvin-- some hide-thickening solution
07:12:09 <Marvin--> I can't decide whether I should flame him back or just ignore him
07:12:20 <SyntaxPolice> thats a great idea! A command-line installation program!
07:12:52 <Marvin--> the fact that he thought the broken boot image from March was from yesterday makes me lean towards ignoring him
07:13:44 <earthy> marvin--: ignore him.
07:13:49 <earthy> it's easiest.
07:14:22 <earthy> syntax: welll... don't we have that already? isn't it call apt? :)
07:14:24 <earthy> +ed
07:14:39 <earthy> but this isn't #debian, IIRC, or is it?
07:14:57 <SyntaxPolice> SyntaxPolice: huh? what I'm talking about uses apt and is Haskell related :)
07:15:22 <SyntaxPolice> it is a server you can put in your /etc/apt/sources.list file to tell apt to download experimental haskell packages
07:15:39 <Marvin--> earthy: you can't partition your hard drive with apt
07:15:41 <earthy> now, just for a quick haskell question: how efficient are lists as compared to arrays?
07:15:48 <Igloo> And stable backports
07:16:08 <Igloo> At least, I think that would be a good use for it  :-)
07:16:10 <Marvin--> gawd, don't talk about stable backports, I read this rant on advogato...
07:16:23 <SyntaxPolice> oh sorry earthy, I thought you were talking about my previous reply :)
07:16:23 <earthy> marvin--: that's true. but you *can* with a linux bootfloppy, ash and sfdisk...
07:16:39 <Marvin--> earthy: which is what he wanted, because he dislikes menus
07:16:51 <Marvin--> earthy: so maybe I'll just reply "WTFM"
07:16:56 <earthy> ;)
07:16:58 <phubuh> earthy: it's not really a useful comparison with that little context.
07:17:05 <Igloo> Marvin: Which rant?
07:17:08 * shapr yawns
07:17:09 <earthy> phubuh: I'm coming to that.
07:17:15 <phubuh> lists are inherently inefficient for random-access data
07:17:28 <phubuh> (assuming list is a linked list)
07:17:29 <shapr> goood moorning #haskell!
07:17:32 * earthy wants to deal with a two-dimensional random-access datastructure.
07:17:36 <phubuh> hey shapr :)
07:17:37 <Igloo> Yo shapr
07:17:39 <Marvin--> http://advogato.org/person/MichaelCrawford/diary.html?start=113
07:17:45 <SyntaxPolice> shapr: 
07:17:45 * shapr boings happily
07:17:47 <SyntaxPolice> !
07:17:53 <Igloo> shapr: TTBOMK ghc5 and ghc6 should work fine with opengl and glut now - please yell if not!
07:17:53 <shapr> Igloo: that bug was open for years!
07:17:56 <phubuh> earthy: you should definitely use arrays then
07:18:00 <earthy> in C i'd define it as  int field[FIELDSIZE][FIELDSIZE];
07:18:03 <shapr> yay, I'll upgrade now.
07:18:04 <SyntaxPolice> hey shapr: its too bad I don't hae a signed key for you
07:18:22 <shapr> SyntaxPolice: sadly, no one does
07:18:27 <earthy> phubuh: okay. now, lists I know how to use in haskell. Where do I find example code dealing with arrays? :)
07:18:31 <shapr> that's part of the reason I'm not a debian developer
07:18:36 <SyntaxPolice> send me an id_rsa/dsa ssh key for haskell-experimental and sign it with a key 
07:18:49 <shapr> haskell-experimental?
07:18:52 <SyntaxPolice> do you have a key on a web page somewhere?
07:18:58 <phubuh> http://www.haskell.org/tutorial/arrays.html
07:18:58 <SyntaxPolice> shapr: yes!
07:19:03 <Marvin--> shapr: come to debconf! I'd sign your key even if it's too late to participate in the key signing party
07:19:03 <Igloo> Pah, t'was less than a year. Now if you want to see bugs open for years Debian's got a fair few of them  :-)
07:19:16 * Heffalump looks confused
07:19:29 <shapr> SyntaxPolice: is haskell-experimental mentioned in my email somewhere?
07:19:40 <Marvin--> I printed out ten pages worth of gpg fingerprints this morning
07:19:40 <earthy> ah, I was reading the wrong set of docs. thanks!
07:19:40 <Igloo> shapr: 6.0-2 and 5.04.3-3 I think
07:19:50 <SyntaxPolice> shapr: no, its not up yet, but I want to get it set up, then I'll have you guys play with it, then I'll announce it
07:19:55 <SyntaxPolice> shapr: but its almost ready
07:20:01 <shapr> what is it?
07:20:14 <SyntaxPolice> I think it'll be at www.syntaxpolice.org/haskell-experimental
07:20:19 <SyntaxPolice> (its an apt source)
07:20:23 <shapr> ohh, nifty
07:21:06 * Igloo decides to give up on ghc4 as it's not wanting to play nice
07:21:15 <shapr> hi phubuh 
07:21:43 <Igloo> Heff: Confused?
07:21:48 <shapr> cool, I'm looking forward to working Hopengl
07:22:16 * Igloo has been inspired to relearn about NURBS, too
07:22:26 <Heffalump> about why syntaxpolice wants an ssh key from shapr
07:22:27 <Marvin--> SyntaxPolice: the only good thing to come out of the compiling haskell discussion on d-d was the "You are thinking about Perl.  Random Python code is likely to fail to compile." comment ;)
07:22:29 <Heffalump> NURBS?
07:22:45 <phubuh> haha
07:22:51 <Igloo> non-uniform rational B-splines
07:23:02 <Heffalump> would they have helped our ICFP entry?
07:23:11 <Marvin--> yes, and cured cancer
07:23:11 <Igloo> Don't think so
07:23:42 <shapr> bezier surfaces?
07:23:58 <Igloo> Oh, possibly with constant acceleration - I can't actually remember what makes them special so I'm not sure  :-)
07:24:07 <Igloo> Yeah, and curves
07:24:58 <Marvin--> man, what a flame war the europython mailing list has turned into
07:25:06 <shapr> how'd that happen?
07:26:01 <shapr> I'd guess Tom D and Marc AL rubbed each other the wrong way?
07:26:12 <Marvin--> because Denis announced, not even a week after the conference, that "yes, we'll hold it next year too!"
07:26:33 <shapr> oh
07:26:49 <shapr> does he mean it will be in Charleroi?
07:26:57 <Marvin--> a lot of people want it somewhere else because Charleroi sucks :)
07:27:07 <shapr> yes, Charleroi is a depressing place.
07:27:20 <shapr> we could have it in Göteborg
07:27:34 <Marvin--> that's what Dario (at chalmers), Jacob and Laura have proposed
07:28:08 <shapr> I think that's a good idea
07:30:09 <phubuh> I wonder if there is any lower age bound for the registration and attendance of ICFP
07:31:17 <Heffalump> they probably assume everyone is 18
07:31:26 <shapr> yah, able to pay your own bills kind of thing.
07:31:34 <Heffalump> but without thinking about it, so if you're not they'd be unlikely to actually check or notice
07:32:31 <phubuh> I'm 14, and I look it :/
07:33:00 <shapr> you'd probably have to bring a legal guardian then
07:33:38 <phubuh> Oh hey, my brother turns 18 a couple of days before the conference, and I'm sure he'd love to go as well
07:33:49 * Igloo notices Heff's answer - so he can upload to the experimental Haskell apt repository
07:34:29 <earthy> sigh. now I feel old.
07:34:40 <shapr> earthy: how old are you?
07:34:42 <Heffalump> phubuh: can you afford the prices?
07:34:46 <earthy> a mere 27.
07:34:55 <shapr> I'm older than you.
07:34:56 <Marvin--> is there a homepage for icfp2003?
07:35:09 * Heffalump is definitely getting old.
07:35:19 <earthy> yeah, but phubuh dumping his age on me like that after helping me so extremely succinctly...
07:35:22 <earthy> *snif*
07:35:37 <Marvin--> earthy: heck, that made me feel old too, and I'm 23
07:36:27 <earthy> ah heck. I get paid to play with haskell and prooftools
07:36:54 <earthy> he probably won't for another couple of years :)
07:37:20 <phubuh> Heffalump: If I qualify as a student, I do. I'm not sure if I'd spend it though. I live in bus-range of the conference, so that's not an issue.
07:38:36 <Heffalump> spend what?
07:38:45 <Heffalump> the registration fee is usually non-trivial
07:39:22 <Igloo> There are numbers up now
07:39:39 <phubuh> I mean, I'm not sure if I'm willing to spend $200 or thereabouts on the conference
07:40:04 <earthy> http://www-users.cs.york.ac.uk/~colin/icfp2003.html
07:40:06 <shapr> I think it's more than that
07:40:18 <Igloo> It's about that for ICFP as a student I think
07:40:23 <Igloo> $100 for HW
07:41:01 <phubuh> The on-line registration says $170 for a student's attendance at the ICFP only
07:42:41 <Heffalump> I'd suggest contacting the local arrangements chair explaining your situation.
07:43:05 <earthy> plus another $100 for the askell workshop
07:43:17 <earthy> plus $80 for the guest banquet. ouch. ;)
07:48:33 <SyntaxPolice> Heffalump: I want a key from shapr in case he wants to use the haskell apt-source I'm making
08:11:03 <hdaume> morning all
08:14:12 <SyntaxPolice> hi hdaume
08:16:11 <hdaume> that GHC on Win32 bug is hilarious
08:17:00 <Marvin--> sure is
08:17:16 <Marvin--> I fail to understand how such a bug appeared
08:17:25 <hdaume> seriously
08:25:17 <Igloo> Cool, Oege thinks I should be able to go to ICFP
08:25:37 <Riastradh> What's the bug?
08:25:38 <Marvin--> good for you, I can probably not afford it, even though it's in Sweden
08:25:58 <hdaume> Igloo: awesome :)
08:26:00 <Marvin--> or rather, I don't really feel like spending that amount of money on it
08:26:21 <hdaume> Riastradh: on Win32, if you have an error in your code and say "ghci Foo\Bar.hs" (note the backslash), it will delete the source file :)
08:26:29 <Igloo> The problem was that when filenames get normalised to / rather than \ or vice versa GHC doesn't realise they still refer to source files, so deletes them as temporary files IIRC
08:26:53 <hdaume> ah
08:27:03 <Riastradh> Eek.
08:27:08 * Riastradh is glad he doesn't use Windows.
08:27:15 <Riastradh> ...for many other reasons, too, of course.
08:27:25 <Igloo> The bug report containing "why, it's cruel" made me chuckle though  :-)
08:27:55 <Marvin--> $170 for ICFP + $100 for HW + travel + acommodation...
08:28:59 <Marvin--> and what student id is that they're talking about?
08:29:17 <Igloo> I wondered that
08:30:46 <Marvin--> oh for the love of ****, galeon crashed on the acm site
08:31:45 <Igloo> Worked for me (fairly old version I think)
08:31:55 <SyntaxPolice> Marvin--: check yr mail :)
08:35:42 <Marvin--> SyntaxPolice: wha...then evolution must be lying to me, since it says the mail is signed, and it's in the keyring, but maybe not updated since I added the 'sjogren' uid, look for marvin@dum.chalmers.se
08:36:02 <Marvin--> SyntaxPolice: in fact, search for 'Martin Sj' since there's non-ascii involved :-P
08:36:38 <Marvin--> hmm, acm student membership costs $42, I guess that's the id they're asking for
08:38:06 <Marvin--> time to head home
09:05:04 <bohdan> hmm
09:05:39 <bohdan> if i use function in form expr `foo` expr, why do I have to ()-se the expressions?
09:05:43 <Igloo> Is 1000SEK/night about normal for hotels in Sweden?
09:05:58 <hdaume> bohdan: you don't
09:06:19 <bohdan> hdaume: my example shows the opposite
09:06:24 <hdaume> hdaume: unless they also contain infix functions
09:06:29 <bohdan> figure_fac num start = (div num (start+1)) `figure_fac` (start+1)
09:06:29 <Heffalump> you may need to make the appropriate infix declarations
09:06:46 <bohdan> Heffalump: ahh probably
09:06:47 <hdaume> it's the "start+1" that's screwing you up
09:07:00 <Heffalump> make `figure_fac` a lower priority than +
09:07:11 <bohdan> thanks
09:07:38 <bohdan> any chance to have something line "online judge" with haskell support?
09:07:50 <hdaume> what is online judge?
09:08:13 <bohdan> hdaume: you have to solve programming tasks to score
09:08:24 <hdaume> ah
09:08:26 <bohdan> bohdan: like acm.uva.es (doesn't work ATM)
09:08:28 <hdaume> i don't think so
09:09:02 <bohdan> too bad. it's interesting resource
09:11:34 <bohdan> is there any auto-identation solution for vim+haskell? emacs??
09:11:51 <phubuh> haskell-mode is very capable of indenting
09:12:06 <phubuh> i've never liked vim's approach to indenting, but there might be something that does what you want
09:12:07 <ibid> but not perfectly so
09:12:15 <phubuh> oh, really? :/
09:13:17 <bohdan> yes sometimes i regret i've read vim tutorial before emacs tutorial :(
09:18:18 <ibid> phubuh: its .lhs file handling is bad, it gets screwed by keywords in literal strings etc
11:20:53 <elmex> yes...vim isn't very perfect... i sometimes would like to like emacs, but i feel very fine with vim... and imho everyone should use the tool thats best for himself
12:57:43 <shapr> oy
12:57:54 <shapr> hi scharob 
13:02:51 <scharob> heya shapr
13:03:02 <shapr> how's code?
13:03:17 <scharob> Well doin bad dude
13:03:38 <shapr> Why is that?
13:03:50 <scharob> Why do you ask? I am just a beginner...
13:04:33 <scharob> We have introduced lists and some stuff of types and type classes recently
13:04:59 <scharob> Some simple examples..
13:05:05 <shapr> I asked because I might be able to help you with some questions.
13:05:14 <shapr> Do you have any questions?
13:06:01 <scharob> Uh, that might come handy, but at the moment I am fed up :-)
13:06:28 <scharob> But really nice of you willing to help me
13:07:45 <shapr> sure, ask me if you have some questions
13:08:03 <shapr> I get lots of help with Haskell here, so I figure it's nice to give back.
13:10:28 <scharob> shapr: I got one of those textbooks by Paul Hudak: " The school of expression"...but I was rather surprised it deals about graphics and multimedia....a bit confusing the order of topics..what about the books from Bird and Thompson? 
13:10:58 * SyntaxPolice likes the book from Thompson and the book from Hudak.
13:12:02 <shapr> I have the Thompson and Hudak books. I think the Hudak book is better if you know about math already, but the Thompson book is better if you don't know about math.
13:13:33 <scharob> Well what math...I think I got the idea of recursion, but I really sometimes have to think about a function a long time before I understand them in detail even with the easy ones :-/
13:13:54 <shapr> that happens to me too
13:14:11 <shapr> I recently spent half an hour with a pillow over my head thinking about one function I was trying to write.
13:15:11 <scharob> And the most difficult thing is not just to read and understand some function....no it's to write, to produce a function by myself urg..
13:15:16 <shapr> yes, I understand.
13:15:47 <scharob> And that really makes me wandering close to break downs :-)
13:15:51 <shapr> heh
13:16:05 <shapr> but, each time you stretch yourself to produce a function by yourself, it gets easier to do it next time.
13:16:25 <andersca> hey hey shapr
13:16:32 <shapr> hej andersca, vad gör du?
13:17:14 <shapr> scharob: and all that brain stretching pays off also when you go to write a program in any other language
13:17:37 <scharob> shapr Well that raises my hope to do well in some weeks
13:17:48 <andersca> shapr: jag kodar X
13:17:50 <shapr> I get paid to write Python code, and my Python code is much better since I learned Haskell.
13:17:53 <SyntaxPolice> scharob: have you read the Gentle Introduction to Haskell?
13:18:19 <SyntaxPolice> Yet Another Haskell Tutorial might be good too, but I haven't looked at it :)
13:18:29 <shapr> scharob: in my experience, many things worth learning require this same brain stretching. But afterwards people thing you're a genius instead of just a hard worker.
13:18:58 * SyntaxPolice wonders if shapr is trying to get us to believe that he's not a genius
13:19:07 <shapr> well, it's easy to believe that ;-)
13:19:15 <scharob> SyntaxPolice I started some Months ago, but then I stopped and did some other things....I lost appetite that days..but know it came back
13:19:37 <scharob> shapr :-)
13:20:23 <shapr> scharob: have you seen foldr ?
13:21:08 <scharob> shapr I read about this ericson studie that increased programmers ability about 20 times if I remember correctly...unbelieveable
13:21:34 <SyntaxPolice> scharob: do you have a pointer to that study?
13:21:35 <andersca> I write much better imperative code these days
13:21:48 <andersca> Study study;
13:21:50 <shapr> If it's an ericsson study, they were talking about Erlang. I think learning Haskell will give you many of the same benefits.
13:21:52 * andersca hands SyntaxPolice &study
13:21:56 <shapr> haha
13:22:07 <shapr> quick, dereference it!
13:22:13 <scharob> shapr foldr isn't this a higher order function? Or was that map?
13:22:18 <shapr> yes, they both are
13:22:57 <scharob> But I did not get it with those functions yet
13:22:59 <shapr> @eval map (\x . x + 1) [1,2,3]
13:22:59 <lambdabot> [2, 3, 4]
13:23:01 * SyntaxPolice drops his pointer to study without deleting it
13:23:21 <scharob> What is \
13:23:54 <scharob> SyntaxPolice What do you mean with pointer?
13:23:59 <shapr> this --> (\x -> x + 1) is an anonymous function
13:24:20 <andersca> (+ 1) too
13:24:22 <andersca> right? :)
13:24:22 <shapr> it means "take one argument, add one to that argument, return the result"
13:24:35 <shapr> yes, but I can't remember how to do partial application in @eval
13:24:42 <shapr> @eval (+ 1) 1
13:24:42 <lambdabot> (line 1, column 2):
13:24:42 <lambdabot> unexpected "+"
13:24:42 <lambdabot> expecting simple term
13:24:50 <scharob> hrhr
13:24:52 <shapr> @eval (+1) 1
13:24:52 <lambdabot> (line 1, column 2):
13:24:52 <lambdabot> unexpected "+"
13:24:52 <lambdabot> expecting simple term
13:24:56 <shapr> @eval (1+) 1
13:24:57 <lambdabot> (line 1, column 4):
13:24:57 <lambdabot> unexpected ")"
13:24:57 <lambdabot> expecting "+", white space or simple term
13:24:59 * shapr shrugs
13:25:26 <scharob> @eval (1) 1
13:25:27 <lambdabot> type error
13:25:35 <shapr> @eval (+) 1 1
13:25:36 <lambdabot> (line 1, column 2):
13:25:36 <lambdabot> unexpected "+"
13:25:36 <lambdabot> expecting simple term
13:25:37 <SyntaxPolice> scharob: I was wondering if you can give me a reference (in english) to that ericsson study
13:26:07 <Strike> @eval foldr1 (+) [1,2,3]
13:26:07 <lambdabot> (line 1, column 9):
13:26:07 <lambdabot> unexpected "+"
13:26:07 <lambdabot> expecting simple term
13:26:31 <Strike> @eval map toUpper "abcdef"
13:26:32 <lambdabot> unbound variable: toUpper
13:26:42 <shapr> hm
13:26:56 <scharob> http://www.haskell.org/aboutHaskell.html
13:27:07 <scharob> Substantially increased programmer productivity (Ericsson measured an improvement factor of between 9 and 25 in one set of experiments on telephony software). 
13:27:31 <scharob> That was the thing I read
13:27:54 <SyntaxPolice> I see
13:28:24 * SyntaxPolice dereferences pointer willy-nilly (hope no one deleted it!)
13:28:59 <shapr> I have sometimes wondered if the expression willy-nilly and the singer's name willy nelson were related in some way.
13:29:18 <scharob> shapr Now I have a question :-)
13:29:20 <shapr> oh, I have also won prizes in the long jump to conclusions, btw.
13:29:27 <shapr> scharob: yes?
13:29:31 <scharob> shapr Why does currifieing work
13:29:37 <shapr> why? or how?
13:29:44 <Strike> shapr: was that on a jump to conclusions mat?
13:29:45 <scharob> Well why 
13:30:29 <shapr> @jargon curry
13:30:30 <lambdabot> No match for "curry".
13:30:32 <shapr> hm
13:30:35 <Strike> @jargon foo
13:30:37 <lambdabot> *** "foo" jargon "Jargon File (4.3.0, 30 APR 2001)"
13:30:37 <lambdabot> foo /foo/ 1. interj. Term of disgust. 2. [very common] Used very
13:30:37 <lambdabot>    generally as a sample name for absolutely anything, esp. programs and
13:30:37 <lambdabot>    files (esp. scratch files). 3. First on the standard list of
13:30:38 <lambdabot>    {metasyntactic variable}s used in syntax examples. See also {bar},
13:30:40 <lambdabot>    {baz}, {qux}, {quux}, {corge}, {grault}, {garply}, {waldo}, {fred},
13:30:42 <lambdabot>    {plugh}, {xyzzy}, {thud}.
13:30:46 <shapr> @foldoc curry
13:30:46 <lambdabot> [there's @more]
13:30:48 <Strike> eek, forgot it was that long, sorry :)
13:30:50 <lambdabot> No match for "curry".
13:30:51 <shapr> huh
13:31:00 <Strike> @help more
13:31:01 <lambdabot> Sorry, I don't know the command "help", try "lambdabot: @listcommands"
13:31:04 <Strike> bah
13:31:07 <Strike> @listcommands
13:31:07 <lambdabot> I react to the following commands: ["all-dicts","board","define","definitions","del-definition","devils","dict","dict-help","dump","easton","echo","elements","eval","fact","flip-board","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","ply","prelude","quit","reset-chess","resume","set-fuel","st
13:31:12 <Strike> @more
13:31:39 <scharob> Functions can be all monadic and do not need to be polyadic I think that is?
13:31:43 <shapr> currying isn't defined on the HaWiki FundamentalConcepts page.
13:31:55 <shapr> what does polyadic mean?
13:32:04 <scharob> well..
13:32:08 <scharob> eh
13:32:18 <arguile> @foldoc "curried function"
13:32:20 <lambdabot> *** "curried function" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
13:32:20 <lambdabot> curried function
13:32:20 <lambdabot>    <mathematics, programming> A {function} of N {arguments} can
13:32:20 <lambdabot>    be considered as a function of one argument which returns
13:32:22 <lambdabot>    another function of N-1 arguments.  E.g. in {Haskell} we can
13:32:24 <lambdabot>    define:
13:32:28 <lambdabot> [there's @more]
13:32:36 <shapr> @more
13:32:37 <lambdabot>    	average :: Int -> (Int -> Int)
13:32:37 <lambdabot>    (The parentheses are optional).  A {partial application} of
13:32:37 <lambdabot>    average, e.g. (average 4), is a function of type (Int -> Int)
13:32:38 <lambdabot>    which averages its argument with 4.  In uncurried languages a
13:32:40 <lambdabot>    function must always be applied to all its arguments but a
13:32:42 <lambdabot>    {partial application} can be represented using a {lambda
13:32:44 <lambdabot>    abstraction}:
13:32:48 <lambdabot> [there's @more]
13:32:59 <scharob> @more
13:33:00 <lambdabot>    	\ x -> average(4,x)
13:33:00 <lambdabot>    Currying is necessary if {full laziness} is to be applied to
13:33:00 <lambdabot>    functional sub-expressions.
13:33:00 <lambdabot>    It was named after the logician {Haskell Curry} but the
13:33:02 <lambdabot>    19th-century formalist {Frege} was the first to propose it and
13:33:04 <lambdabot>    it was first referred to in ["Uber die Bausteine der
13:33:06 <lambdabot>    mathematischen Logik", M. Schoenfinkel, Mathematische
13:33:08 <lambdabot> [there's @more]
13:33:27 <shapr> I've also heard it called Schoenfinkelling
13:33:35 <scharob> @more
13:33:35 <lambdabot>    Annalen. Vol 92 (1924)].
13:33:35 <lambdabot>    {David Turner} said he got the term from {Christopher
13:33:36 <lambdabot>    Strachey} who invented the term "currying" and used it in his
13:33:36 <lambdabot>    lecture notes on programming languages written circa 1967.
13:33:36 <lambdabot>    Strachey also remarked that it ought really to be called
13:33:37 <shapr> by mathematicians
13:33:38 <lambdabot>    "Schoenfinkeling".
13:33:42 <lambdabot>    Stefan Kahrs <smk@dcs.ed.ac.uk> reported hearing somebody in
13:33:44 <lambdabot> [there's @more]
13:33:44 <SyntaxPolice> hm. lambdabot is getting smart; does it do @hawiki yet? :)
13:33:53 <shapr> nah, not yet.
13:33:59 <scharob> @more
13:33:59 <lambdabot>    Germany trying to introduce "scho"nen" for currying and
13:33:59 <lambdabot>    "finkeln" for "uncurrying".  The verb "scho"nen" means "to
13:33:59 <lambdabot>    beautify"; "finkeln" isn't a German word, but it suggests "to
13:33:59 <lambdabot>    fiddle".
13:34:00 <lambdabot>    ["Some philosophical aspects of combinatory logic",
13:34:02 <lambdabot>    H. B. Curry, The Kleene Symposium, Eds. J. Barwise,
13:34:04 <lambdabot>    J. Keisler, K. Kunen, North Holland, 1980, pp. 85-101]
13:34:08 <lambdabot> [there's @more]
13:34:11 <shapr> heh, that's cute
13:34:13 <SyntaxPolice> scharob: are you getting all this?
13:34:20 <shapr> schönen and finkeln
13:34:24 <scharob> no
13:34:30 <scharob> scho"nem
13:34:34 <scharob> scho"nen
13:34:40 <scharob> no ö
13:34:41 <Strike> Finkle and Einhorn .. Finkle and Einhorn ...  </obscure(?) joke>
13:34:56 <scharob> heh?
13:35:05 <scharob> @
13:35:05 <lambdabot> Sorry, I don't know the command "", try "lambdabot: @listcommands"
13:35:09 <scharob> @more
13:35:21 <Strike> (the joke was from the movie "Ace Ventura")
13:35:27 <Strike> well, the reference
13:35:31 <SyntaxPolice> scharob: basically, it works because a function Int -> Int -> Int can be rewritten to be a function that takes a function and returns an integer
13:35:49 <SyntaxPolice> (right?)
13:36:21 <scharob> So I can do a Integer -> Integer -> Integer instead to take a pair of arguments (Integer,Integer) -> Integer?
13:36:24 * SyntaxPolice quickly decides that he's not the right one to explain this
13:36:33 <SyntaxPolice> no, that isnot the same in Haskell
13:36:47 <SyntaxPolice> (Integer,Integer) is a single argument, which is a tuple
13:36:56 <shapr> @type curry
13:36:57 <lambdabot> curry :: ((a,b) -> c) -> a -> b -> c
13:37:00 <shapr> @type uncurry
13:37:01 <lambdabot> uncurry :: (a -> b -> c) -> (a,b) -> c
13:37:12 <shapr> @type uncurry (+)
13:37:12 <lambdabot> uncurry (+) :: Num a => (a,a) -> a
13:37:29 <scharob> Well curry does the thing I wrote?
13:38:06 <shapr> I think so
13:38:16 <scharob> But why does this work?
13:38:20 <shapr> I'm not the best one to describe this either
13:38:35 * SyntaxPolice fails to make the connection between the function curry and the act of currying
13:38:49 <shapr> in lambda calculus, every function only takes one argument, and returns one result
13:39:07 <shapr> at least, this is what I understand, if I'm wrong, I hope someone corrects me.
13:39:09 * scharob thinks this is the basic idea why all this works
13:39:18 <shapr> so, the type of plus is
13:39:20 <shapr> @type (+)
13:39:21 <lambdabot> (+) :: Num a => a -> a -> a
13:39:32 <SyntaxPolice> scharob: so Int -> Int -> Int is the same as Int -> (Int -> Int),
13:39:36 <SyntaxPolice> in haskell
13:39:40 <shapr> but that actually means a -> something and that something is (a -> a)
13:39:50 <shapr> right, what he said
13:39:58 <scharob> So it is just one parameter
13:40:13 <shapr> but you can call it with two
13:40:19 <scharob> or more
13:40:26 <shapr> yes, assuming it can take them
13:40:35 <SyntaxPolice> immagine that Haskell converts a call like f a b into (f a) $ b
13:40:44 <shapr> that gives you cool tricks like partial application
13:40:45 <SyntaxPolice> and f a b c into ((f a) b) c
13:40:55 <shapr> @get-definition myadd
13:40:55 <lambdabot> myadd not defined
13:41:06 <SyntaxPolice> which maybe you have to write like this(not sure) ((f a) $ b) $ c
13:41:12 <scharob> everything nested hm?
13:41:26 <SyntaxPolice> so "f a" returns a function!
13:41:31 <SyntaxPolice> which you can apply to b
13:42:03 <shapr> so in Hugs or in GHCi, you can do map (1+) [1,2,3]
13:42:04 <SyntaxPolice> just so you know, its not necessary to understand this in order to understand Haskell :)
13:42:30 <shapr> @type (1+)
13:42:31 <lambdabot> (1 +) :: Num a => a -> a
13:42:31 * SyntaxPolice curries shapr and applies him to lambdabot
13:42:34 <shapr> heh
13:42:43 <scharob> hehe
13:42:46 <shapr> the other input is lots of caffeine ;-)
13:42:58 <shapr> shapr :: Task -> Caffeine -> Results
13:43:03 <SyntaxPolice> hehe; so lambdabot drinks coffee, 'eh?
13:43:12 <SyntaxPolice> shapr: I would flip that
13:43:17 <SyntaxPolice> shapr :: Caffeine -> Task -> Result
13:43:21 <shapr> good point
13:43:22 <Strike> yeah
13:43:26 <SyntaxPolice> that way you can pass coffee to yourself to curry
13:43:35 <Strike> shaprWorks = shapr (Caffeine coffee)
13:43:39 * shapr grins
13:43:47 <scharob> scharob :: tired -> sleep -> continuesTomorrow
13:43:53 <shapr> heh
13:44:05 <SyntaxPolice> (shapr coffee) has type Task -> Result, which is good for when he's working :)
13:44:06 <shapr> schlaaf schoen :-)
13:44:13 <scharob> huch?
13:44:14 <scharob> Danke
13:44:23 <shapr> sorry, my german spelling is terrible
13:44:23 <SyntaxPolice> 'night scharob
13:44:27 <scharob> shapr Where are u from?
13:44:31 <shapr> I'm from Alabama!
13:44:35 <scharob> Huch?
13:44:35 <shapr> where are you from?
13:44:38 <scharob> :-)
13:44:41 <scharob> Germany
13:44:58 <shapr> I liked Munich while I was there.
13:45:00 <scharob> Northrhein-Westphalia *g*
13:45:10 <scharob> Well Bavaria...urg
13:45:26 * SyntaxPolice attacked Munich in a game of Diplomacy on saturday :)
13:45:30 <scharob> Clocks go another way there :-)
13:45:34 <shapr> hah
13:45:51 <Strike> Westphalia eh?  nice treaty
13:45:52 <shapr> I'm from the most relaxed part of the USA, so southern Germany seems okay to me.
13:46:04 <scharob> Strike ?
13:46:25 <Strike> scharob: never heard of the Treaty of Westphalia?
13:46:33 <shapr> I visited a nifty castle in Nurenberg
13:46:35 <scharob> Ah...well of course
13:46:42 <scharob> 30 years of war
13:46:48 <Strike> :)
13:46:51 <scharob> 1648
13:46:57 <SyntaxPolice> btw, Diplomacy is not a game you should play with people you really like and want to get along with.
13:47:04 <shapr> the pieces of the castle towers were marked like a jigsaw puzzle
13:47:16 <scharob> But now I am out
13:47:17 <scharob> Cu
13:47:20 <shapr> so I wondered if the architect built them on the ground, then had workers reassemble them
13:47:21 <Strike> shapr: you sure you're not thinking of the Tower of Hanoi?  ;)
13:47:22 <shapr> cya scharob 
13:47:40 <Strike> hmm ... there's something I could write in Haskell for self-enlightenment
13:47:45 <shapr> Strike: no, that was in Viet Nam wasn't it? or Koala Lumpy?
13:47:51 <Strike> hooray for me for coming up with something
13:47:56 <Strike> Hanoi is the capital of Vietnam
13:48:03 <shapr> hi stratocaster 
13:48:07 <shapr> looking for Haskell info?
13:48:13 <Strike> no, not info
13:48:16 <Strike> just ideas of what to use it for
13:48:23 <shapr> Strike: I admit, terrible jokes from me.
13:48:25 <Strike> not quite comfy enough to start designing my own monads :)
13:48:26 <stratocaster> Hi. Nothing in particular, was just going to idle a little.
13:48:36 <Strike> oh, not me ... /me shuts up
13:48:39 <shapr> Strike: what are you going to write?
13:48:41 <seth_> Sorry to repeat (for those who were here a couple of days ago).  Has anyone tried to interface Haskell to Java?
13:48:46 <Strike> shapr: Tower of Hanoi solver
13:48:56 <shapr> seth_: yes, there are at least two such things
13:49:04 <shapr> maybe three
13:49:17 <shapr> Ashley Yakeley has written one that uses JNI
13:49:21 * shapr gets urls
13:49:43 <seth_> shapr: thanks much, waiting for the URLs.
13:49:58 <seth_> that will save me from having to write the entire app in java.
13:50:32 <shapr> GCJNI - http://haskell.cs.yale.edu/gcjni/ 
13:50:37 <SyntaxPolice> seth_: http://www.haskell.org/hawiki/InterProcess
13:50:39 <shapr> I've heard of that one, but haven't tried to make it work.
13:51:15 <seth_> thanks VERY much, shapr and SyntaxPolice
13:51:16 <shapr> http://www.semantic.org/
13:51:33 <shapr> JVM-Bridge is Ashley Yakeley's software
13:51:39 <shapr> it seems the most actively developed.
13:51:52 <shapr> There are some people at unsw.edu.au who are working on compiling Haskell to the JVM
13:51:57 <shapr> though that won't help you today :-)
13:52:14 <SyntaxPolice> shapr: wow, I didn't kow that. cool!
13:52:32 <seth_> shapr: true, but an interesting concept.  haskell anywhere I have java.
13:52:39 <shapr> I'm looking forward to it very much, since many people want to hire me to write Java.
13:52:48 <shapr> I've used Jython extensively in the past.
13:52:49 <SyntaxPolice> shapr: you can trick them!
13:53:11 <shapr> I have a screenshot of Jython running on a Nokia 9210 emulator on my desktop =)
13:53:29 <Strike> nice
13:53:30 <shapr> well, at least interoperate with them.
13:53:57 <SyntaxPolice> heh
13:53:58 <shapr> that's why I want xml-rpc and soap libs for Haskell
13:54:02 <phubuh> Strike: coderforums ring a bell?
13:54:20 <shapr> then we could interface Haskell with all the 'web services'
13:54:31 <shapr> and lambdabot could do google =)
13:54:41 <Strike> phubuh: yeah, hi :)
13:54:50 <Strike> I saw you in here yesterday, wondering the same thing
13:55:33 <shapr> seth_: there's also some sort of Haskell GUI toolkit that's written in Java
13:55:38 <phubuh> ah, i figured :-)
13:55:41 <shapr> I vaguely recall it's named Hawk?
13:56:21 * shapr searches
13:56:38 <seth_> shapr: does that mean I can write a GUI in haskell that uses Java widgets, etc.?
13:57:01 <Strike> phubuh: I don't go there anymore though, the new management is lame and I had my falling out so I'm banning myself from there before someone else does
13:57:15 <shapr> seth_: yes, I think so.
13:57:34 <phubuh> Strike: oh, that sucks. i've glanced at the new forums a couple of times, so i really don't have any idea of the new management or anything
13:58:38 <Strike> phubuh: needs more hippie community feel and less cold impersonal feel, and I expressed such views and was chastised, so eff it, I'm on forums.sourcereview.net now :)
13:59:11 <shapr> seth_: alternatively, a java applet that renders the new java-gui-xml into widgets from a network connections and returns the inputs might be spiffy
13:59:39 <seth_> shapr: yes, it would.
13:59:47 <Strike> so now all that's at CF are crappy VB and Access questions going unanswered except from the occasional moderator trying a google search on the question and posting the results that seem relevant
13:59:54 <seth_> shapr: I already have the xml and java part done.
14:00:04 <shapr> really? how so?
14:00:32 <seth_> shapr: I drive my GUIs from an XML file format that I've created.  Working quite nicely.
14:00:39 <seth_> shapr: although not 100% finished.
14:00:57 <shapr> doesn't java 1.4 or 1.5 do the same?
14:01:08 <shapr> as in, allow a pure XML gui description?
14:01:25 <seth_> shapr: well, yes and no.  I don't like the way they did it.
14:02:23 <shapr> can you point me to some details on the java-gui-xml standard?
14:02:59 <shapr> does it have a separate name?
14:03:00 <seth_> shapr: I'll see if I can find what they've got.  Somewhere on java.sun.com.
14:03:07 <shapr> ok, I can look myself :-)
14:07:07 <shapr> seth_: do know if the gui-xml has any specific name?
14:07:19 <shapr> java.sun.com has expanded since the last time I browsed there.
14:07:39 <seth_> shapr: There is a page for JAVA/XML.
14:07:47 <seth_> shapr: I'll see if I have a bookmark.
14:07:53 <shapr> it's java.sun.com/xml/
14:08:22 <seth_> shapr: right.  there should be links there, I think.
14:14:03 <shapr> is it the RPC or the XML serialization that people use for xml guis?
14:14:51 <shapr> yow
14:15:00 <shapr> I'll think I'll just write some Haskell instead.
14:18:20 * Igloo reappears and goes "Yay" at the last line  :-)
14:18:39 <shapr> yay!
14:18:40 <shapr> hi Igloo!
14:18:47 <Igloo> Hey shapr
14:18:51 <shapr> oh I have a debian packages question
14:18:56 <Igloo> Go on?
14:19:03 <shapr> is there some way to support both threaded-runtime and HOpenGL?
14:19:07 <Strike> mmm... debian
14:19:39 <Igloo> Ermmm, I could do a make clean and then recompile in the build process if nothing else
14:19:44 <Strike> mm, new ghc6 debs today
14:19:57 <Igloo> Or actually, making two lndirs from the start would be cleaner
14:20:16 <Strike> heh, I once rewrote lndir in python because I didn't know it existed ..
14:20:17 <Igloo> What benefit does it give OOI?
14:20:35 <shapr> means I can use both my CPUs in any threaded Haskell app
14:20:45 <Igloo> I wrote it with find etc because the admins of the machine in question didn't want xutils installed (stupid place for it anyway)
14:20:53 <Igloo> Oh!
14:20:57 <Igloo> Oh oh oh!
14:20:58 <Strike> yeah, lndir should be in fileutils
14:20:59 <SyntaxPolice> Igloo: did you sign that email you sent me?
14:21:07 <Igloo> What sort of performance increase does that give in practise?
14:21:13 <shapr> but also means that HOpenGL can't be used with a multi- *OS* -threaded app
14:21:16 <Igloo> Syn: I intended to e-mail you a signed file
14:21:18 * SyntaxPolice notes that gnus is being completely stupid about signed emails
14:21:28 <shapr> SyntaxPolice: it works for me
14:21:42 <shapr> I was able to check the signature on tmoertel's signed email
14:21:44 <Igloo> Oh, I attached foo rather than foo.asc
14:22:01 <Igloo> Is a signed e-mail rather than signed file significantly easier for you?
14:22:24 <SyntaxPolice> Igloo: no, either way
14:22:32 <SyntaxPolice> actually signed file is aparently better for now
14:22:45 <SyntaxPolice> shapr: yeah, it usually works for me, Marvin attached a sig but gnus is hiding it from me :(
14:23:12 * Igloo resends the right file
14:23:27 <SyntaxPolice> plus well now gpg says its a bad sig, but since none of the mail is marked as being signed, I'm not sure what part is supposed to be signed
14:23:30 <Igloo> At least I managed to escape the first round where you send a message saying "I've attached the file" and then forget to do so  :-)
14:23:44 <SyntaxPolice> and evolution handles it better, but claims that its a bad sig :(
14:23:58 <SyntaxPolice> Igloo: yes, I've never done that. please see the attached file
14:23:58 <SyntaxPolice> ...
14:24:05 <Igloo> shapr: What sort of percentage speed increase would you expect with threaded RTS on 2 CPUs? Or don't you know?
14:24:06 <shapr> SyntaxPolice: if you hit "o" the saved file will include the sig
14:24:14 <shapr> Igloo: I would expect 195% or so
14:24:39 <Igloo> And you've actually seen that happen in practise?
14:24:43 <shapr> no, I haven't
14:24:46 <Igloo> Ah, OK
14:24:57 <shapr> how would I test it?
14:25:24 <SyntaxPolice> shapr: o that helps, however, do you know hwo to talk mailcrypt into doing the right thing?
14:25:26 * Igloo wonders how best to do it...I think as a first step I should introduce /usr/bin/ghc{5,6} and then add /usr/bin/ghc{5,6}t or something
14:25:41 <Igloo> Ermmm, compile a program that does something with and without and time it
14:25:41 <shapr> SyntaxPolice: gnus has something like M-x gnus-summary-check-pgp-sig or so
14:26:01 <Strike> Igloo: and then maybe an /etc/alternatives link?
14:26:20 <Strike> actually, wait, I think you do that already, so nevermind about reminding you of that
14:26:30 <Igloo> /usr/bin/ghc is already handled by alternatives, but to pick a particular one you currently have to delve into /usr/lib/ghc-foo/bin/ghc-foo
14:26:33 <Strike> yes, you do :) 
14:26:54 <shapr> SyntaxPolice: W p in the summary
14:26:55 <Strike> well you could do /usr/bin/ghc-threaded or something
14:26:57 * Igloo wonders how much of a standard install it can share
14:27:00 <shapr> is gnus-article-verify-x-pgp-sig
14:27:35 <shapr> Igloo: if you put all of the ghc binaries into the alternatives, then we just need to change the priority, right?
14:27:41 <shapr> afair, you already do that
14:28:02 <shapr> SyntaxPolice: though for me, it just puts a P or something to the left of the message in summary view if it's valid
14:28:04 <SyntaxPolice> shapr: strangely that does precious little
14:28:04 <Igloo> shapr: Yeah, but it would be nice to be able to more easily get at the non-defaults
14:28:12 <shapr> admittedly, I haven't tried it with an invalid sig
14:28:25 <shapr> Igloo: maybe a post-install that asks you?
14:28:52 <shapr> "you have ghc5 ghc6 and ghc6-threaded installed, which would you like to have as default?"
14:29:04 <Igloo> shapr: I think you're misunderstanding - if the admin installs both ghc6 and ghc6-threaded then presumably different usres, or even the same user, want to be able to use both at the same time
14:29:09 <shapr> oh
14:29:11 <shapr> I see
14:29:19 <Igloo> Otherwise you may as well uninstall the other  :-)
14:29:27 <shapr> I hadn't thought of that.
14:29:34 <SyntaxPolice> shapr: thanks for the tips, I'll poke at gnus awhile
14:29:43 <shapr> SyntaxPolice: that's all I know, so if you learn something, tell me :-)
14:29:46 <Igloo> Hmm, it's not in the usersguide frontpage
14:29:48 * shapr goes off to be social for a bit
14:29:54 <Igloo> Enjoy
14:33:48 <Strike> Igloo: if you want to be really hackish, you could make /usr/bin/ghc a wrapper script that checks for ~/.ghc/config or something and in that file, have them specify which they want (one-time cost for each user, but still annoying as hell and probably against debian policy)
14:34:05 <Strike> and, of course, if that config files doesn't exist, prompt them and create the file based on their choice
14:35:18 <Strike> in fact, the number of users you'll annoy with that would almost certainly outweigh the number of users you'd please by offering the choice
14:46:49 <shapr> anyone has recommendations for hotels for ICFP 2003?
14:47:06 <shapr> I'm a self-employed programmer (aka poor)
14:48:39 <Igloo> I imagine I'll be going through the list on the webpage roughly cheapest first
14:49:11 <Igloo> You saw http://www.it.uu.se/pli03/sleeping.shtml, right?
14:49:36 * shapr looks
14:50:11 <Igloo> Oh, shapr, do you know if you can do +RTS mumble -RTS to run without the threaded RTS if you have done --enable-threaded-rts?
14:50:38 <shapr> no, I don't know.
14:50:43 <shapr> if so, that would be very spiffy
14:50:44 <Igloo> OK
14:50:54 <Igloo> Well, it would certainly make my job a lot easier  :-)
14:51:28 <shapr> truly
14:51:51 <SyntaxPolice> Igloo: wanna try uploading something?
14:52:47 <Igloo> Oh, err, it would take me a couple of hours to build something after setting up a chroot
14:52:56 <SyntaxPolice> scp whatever haskelluser@www.syntaxpolice.org:incoming
14:53:00 * Igloo will probably do an upload tomorrow
14:53:24 <Igloo> OK, *makes a note*
14:54:08 <Igloo> Oh, I'm an idiot, I should have given you a different SSH key.
14:54:46 <Igloo> In fact, I really should have given you one generated inside the chroot I don't have yet. I'll sort it out tomorrow  :-)
14:54:55 <SyntaxPolice> hm. I'm not convinced that the setup works, btw, and you shouldn't be ablet o log in.
14:55:03 <SyntaxPolice> just FYI
14:55:14 <SyntaxPolice> all you should be able to do is scp files to that directory
14:55:22 <SyntaxPolice> the computer is a 1337 SELinux thingy
14:55:28 <SyntaxPolice> butyou could copy your ssh key to your chroot :)
14:56:05 * Igloo confirms non-loginability
14:56:37 <Igloo> The keys aren't from the computer I'll be creating the chroot on, though. I just wasn't thinking and gave you the file I stick on machines when I get an account on them.
14:57:36 <SyntaxPolice> could you just try scping a random file to that directory?
14:57:46 <SyntaxPolice> a good vegitarian recipie will do ;)
14:57:48 <Igloo> Oh, sure
14:57:58 <Igloo> But not a recipe, unless you send it to me first  :-)
14:58:44 <Igloo> That seemed to work
14:59:42 * Strike made the mistake of trying to SELinux-ize a Debian woody box and then try un-SELinux-izing it when it didn't work so he could dist-upgrade to sid and SELinux-ize with a different repository
15:00:11 <SyntaxPolice> Igloo: cool, thanks.
15:00:18 <shapr> Strike: did you get smoke?
15:00:30 <Strike> shapr: heh, thankfully no
15:00:34 <Strike> not yet anyway
15:00:53 <Strike> the un-SELinux-ize process left apt in a bad way, methinks
15:04:04 <shapr> hi Arnia
15:04:13 <shapr> Adrian_: are you the same as jadrian?
15:04:21 <Arnia> shapr: Heya
15:11:25 * shapr bounces cheerfully
15:14:08 * Arnia gives shapr some caffeine
15:14:17 * shapr droops
15:14:36 * SyntaxPolice gives the curried (shapr caffeine) some Task...
15:15:03 * shapr chooses the lesser of two evals
15:17:16 * Arnia groans
15:21:42 <Adrian_> no, i'm not jadrian
15:21:56 <shapr> hi Adrian_, are you new here on #haskell?
15:22:26 <Adrian_> yes, i'm trying to create a pacman with hopengl
15:22:31 <shapr> oh, nifty
15:22:35 <shapr> have you had any success?
15:26:53 <shapr> Adrian_: do you have your code online somewhere?
15:27:14 <shapr> I'd like to see it.
15:28:06 <Adrian_> yes, i had the code by it run in linux
15:29:44 <shapr> Adrian_: could I see your code?
15:29:48 <Adrian_> know can i create random number in haskell ?
15:29:57 <shapr> you can use the Random library
15:30:10 <Igloo> You'll need to be in IO, but if you're doing OpenGL stuff you probably are anyway
15:30:45 <Adrian_> yes, with getStdRandom (randomR (1,6)) , i get a IO Int, but i dont know how can i get only the int
15:32:37 <Arnia> Adrian_: Just bind it to a name... eg n <- getStdRandom (randomR (1,6)) will bind the int to the name n
15:33:31 <Adrian_> Arnia: yes, but i'm not in IO in this function
15:34:12 <Igloo> Pass it down as an argument
15:34:23 <shapr> in that case, maybe pass the Int into the function as an argument, and then call the function from another function that is inside of IO ?
15:40:21 <Adrian_> shapr how can i do it ?  Are you thinking in IORef parameter ?
15:50:13 <shapr> Adrian_: no, I was thinking that you could add another argument to the function that needs the random Int
15:50:31 <shapr> and then you could pass in the Int from the function that calls it, if that function is in IO
15:51:30 <Igloo> Adrian: change a line "... (foo x y z) ..." in a functino of type IO a to the pair of lines "n <- getStdRandom (randomR (1,6))" and "... (foo x y z n) ..."
15:51:42 <Igloo> Where foo is the functino you want the random number in
15:51:54 <Igloo> You might actually need to pass it along a chain of functinos if you don't call it directly
15:52:48 * Igloo starts a pair of ghc6 compiles going so I can compare the difference and wonders why I'm not using the dual-CPU machine
15:53:55 <Strike> heh, I have to wonder if all the "functino" spellings were deliberate
15:54:19 <shapr> Igloo: er, why aren't you using the dual-cpu machine?
15:54:42 <shapr> Strike: sounds like a baby function, doesn't it? maybe that's what a combinator is?
15:54:46 <shapr> a function bambino?
15:55:08 <Igloo> Because I haven't got aroudn to putting an unstable chroot on it really. Don't know what its disk space situation is like either OTTOMH, but I imagine it's good
15:55:43 <Strike> shapr: sounds like a subatomic particle
15:55:49 <shapr> functino
15:55:52 <shapr> that's a cool word
15:55:55 <Strike> heh
15:56:03 <Strike> well, there are functors ... why not functinos?
15:56:04 <shapr> I'll have to come up with some software that's cool enough to bear that name.
15:56:11 <shapr> yah, I totally agree.
15:56:17 <Strike> we got the funct, gotta have that funct
15:56:28 <shapr> We put the Funk in Funktion!
15:56:45 <Igloo> Strike: No, my fingers do it themselves automatically. It's like word's autocorrect.
15:57:46 <Strike> Igloo: ah, yeah I find myself holding shift too long whenever I type "State" and I end up with "STate" like 80% of the time ... no idea why
15:59:13 <hdaume> Adrian_: you could also just pass the RandomGen around
16:04:18 * shapr boings happily
16:05:06 <Igloo> Anything new and exciting up, shapr?
16:05:48 <shapr> just cheerful
16:05:59 <shapr> I saw that you will be coming to ICFP, right?
16:06:28 <Igloo> Hopefully. I will be writing begging e-mails to everyone in sight tomorrow
16:07:20 <shapr> I hope you get there
16:07:23 <shapr> that would be spiffy
16:07:45 <Igloo> Oege seemed confident, but also suggested I should get pledges of the money before registering...
16:09:31 <Igloo> Oh, that can't be good - both the builds failed for different reasons
16:13:51 <shapr> yikes
16:15:36 <shapr> @fact source
16:15:36 <lambdabot> http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/haskell-libs/libs/lambdabot/
16:48:53 <shapr> g'day Pseudonym 
16:48:59 <Pseudonym> G'day.
16:50:17 <shapr> have I already asked you what 'stone the crows' means?
16:50:42 <Pseudonym> I don't believe so.
16:50:54 <shapr> do you know what it means?
16:51:18 <Pseudonym> It's a random exclamation, pretty much.
16:51:21 <Pseudonym> Like "strewth".
16:51:23 <shapr> oh
16:51:38 <shapr> I thought strewth was an actual name?
16:51:40 <Pseudonym> It has a connotation of surprise, though.
16:51:52 <shapr> interesting idioms
16:51:55 * Pseudonym nods
16:52:09 <Pseudonym> "Strewth" is short for "god's truth".
16:52:14 <Pseudonym> Used as an exclamation.
16:52:27 <shapr> nifty
16:53:10 <Pseudonym> My favourite Australianism, though, is "don't come the raw prawn".
16:53:30 <shapr> what does that mean?
16:54:04 <Pseudonym> It means "don't try to fool me".
16:54:13 <shapr> any idea how it got that way?
16:54:21 <Pseudonym> No clue.
16:54:42 <shapr> I've realized that 'berries' actually comes from "to bear" the verb
16:54:58 <shapr> in swedish they really are 'bearies' as in "to bear fruit"
16:55:11 <Pseudonym> Interesting.
16:55:26 <shapr> lots of interesting words I've connected while learning Swedish
16:55:32 <Pseudonym> Did you know that the word "lady" comes from the Old English "laef digh", which means "baker of loaves"?
16:55:46 <shapr> no, that's nifty
16:56:04 <Pseudonym> And even more interestingly, the English word "bear" is actually not the animal's real name.
16:56:09 <shapr> supposedly cravat is a croatian word. the Croats claim they came up with ties in the first place.
16:56:28 <Pseudonym> It's actually from an Old English phrase which means "eater of bees".
16:56:33 <Pseudonym> The real name of the bear was taboo.
16:56:38 <shapr> wow, bizarre
16:56:48 * Pseudonym can't remember what it was now
16:58:08 <Pseudonym> See what you learn on #haskell?  I didn't know "cravat" was Croatian!
16:58:32 <Pseudonym> "bearies"
16:58:34 * Pseudonym hmms
16:58:48 <Pseudonym> So in Sweden it's actually called Absolut Beary?
16:59:13 <shapr> ?
16:59:27 <Pseudonym> The berry-flavoured vodka.
16:59:35 <Pseudonym> Well, it's actually current flavour.
16:59:36 <shapr> well, I'm pretty sure Absolut comes from Sweden
16:59:39 <Pseudonym> Kurant
16:59:44 <shapr> currant?
16:59:50 <Pseudonym> Yes, currant.
16:59:54 <shapr> interesting
16:59:54 * Pseudonym send current, didn't he
17:00:14 <Pseudonym> It's electromagnetism-flavoured vodka!
17:00:44 * shapr zaps a few characters
17:33:54 <shapr> @fact monads
17:33:54 <lambdabot> http://www.abercrombiegroup.co.uk/~noel/research/monads.html http://www.cs.fit.edu/~satkin/monads.html
17:36:44 <Pseudonym> Should add those to UsingMonads on the wiki.
17:36:54 <shapr> good idea
17:52:39 <Pseudonym> Does this make sense?
17:52:43 <Pseudonym> http://haskell.org/hawiki/IndirectComposite
17:55:00 <Heffalump> yes
17:55:13 <Pseudonym> I'm just wondering if I need to flesh it out.
17:56:45 <Pseudonym> I also don't know if "indirect composite" is a good name.
17:56:51 <phubuh> i haven't written anything in haskell, and i understand it
17:59:12 <Pseudonym> Cool.  I'll link it in, then.
18:00:11 <dalor> Hello.
18:00:16 <Pseudonym> G'day.
18:00:52 <dalor> In SOE chapter 13, he uses the timeGetTime from a Win32Misc module.  Is there a linux/posix equivalent?
18:01:19 <Pseudonym> Which haskell are you using?
18:01:31 <dalor> Hugs
18:02:20 <Pseudonym> There's System.CPUTime.getCPUTime
18:02:25 <Pseudonym> Oh, han gon.
18:02:34 <Pseudonym> That only gives you the time your program has been running.
18:02:46 <Pseudonym> System.Time.getClockTime
18:02:52 <Pseudonym> I think that's what you want.
18:03:11 <dalor> Thanks. :)
18:03:17 <Pseudonym> No problem.
18:03:32 <Heffalump> I don't think it is a good name, but I can't think of a better one.
18:03:39 * Pseudonym nods
18:03:53 <Pseudonym> IndirectlyRecursiveAlgebraicDataTypes doesn't have the same ring.
18:15:51 * shapr yawns
18:16:20 * Pseudonym should come up with some example code for HashConsing
18:19:24 <ddarius> A slight generalization of that is also common, newtype Fix f = f (Fix f), type Expr = Fix Expr' and has some usefulness.  By having a single Fix constructor we can make generic recursive functions.
18:19:43 <Riastradh> 'newtype'?
18:20:00 <Pseudonym> Yes.
18:20:03 <ddarius> Er add a data constructor
18:20:03 * Pseudonym thought of that
18:20:51 * Strike moos at the channel
18:21:30 * Riastradh nis at Strike.
18:21:44 * Strike throws a shrubbery at Riastradh
18:22:21 <Riastradh> Ecky-ecky-ecky-ecky-pikang-zoop-boing-goodem-zoo-owli-zhiv!
18:24:37 <shapr> yay, I'm in the debian fortune files
18:24:39 * shapr cheers
18:24:42 <shapr> @fortune
18:24:43 <lambdabot> The way I understand it, the Russians are sort of a combination of evil and
18:24:43 <lambdabot> incompetence... sort of like the Post Office with tanks.
18:24:43 <lambdabot> 		-- Emo Philips
18:24:46 <shapr> fooey
18:25:12 <Strike> bleh, Emo Philips
18:25:17 <shapr> @fortune
18:25:17 <lambdabot> SEMPER UBI SUB UBI!!!!
18:25:17 <lambdabot> [ Always wear underwater ]
18:25:24 <shapr> ?
18:25:29 <Riastradh> @yow
18:25:29 <lambdabot> If this was a SWEDISH MOVIE, I'd take off your GO-GO BOOTS!!
18:25:34 <shapr> @fortune
18:25:34 <lambdabot> Despite the best efforts of a quantum bigfoot drive (yes I know everyone
18:25:34 <lambdabot> told me they suck, now I know they were right) 2.1.109ac1 is now available
18:25:34 <lambdabot> 	-- Alan Cox announcing Linux 2.1.109ac1
18:25:40 * Riastradh wants a Chefalized Zippy quote generator!!
18:25:42 <Strike> heh
18:25:56 <Strike> I should port my bot's "debianize" module to lambdabot
18:26:07 <shapr> what does debianize do?
18:26:19 <Strike> uses some web script to come up with a debian package name based on the input string
18:26:22 <shapr> oh, it does apt-cache sort of stuff?
18:26:26 <Strike> examples using your name are forthcoming
18:26:29 <Strike> no, this is just for fun
18:26:30 <shapr> uh oh
18:26:40 <shapr> shapr-source-2.1 ?
18:26:46 <Strike> <Strike> ~debianize shapr
18:26:46 <Strike> <moobot> Your debian package name is: libcgishapr2-dev
18:26:53 <shapr> oh, cool
18:27:03 <Strike> I'll find the script it calls and link you
18:27:53 <Strike> http://www.pigdog.org/cgi_bin/dpn.html
18:28:07 <Strike> doh, 404
18:28:38 <Strike> http://www.pigdog.org/cgi_bin/dpn.phtml?name=foo
18:29:50 <Igloo> shapr: What quote?
18:29:52 <Strike> http://pigdog.org/features/dpn.html  was what I should have pasted for the first link
18:29:59 <shapr> Igloo: you have to install twisted-quotes first
18:30:08 <Igloo> Ah, right
18:30:17 <shapr> then there are many
18:37:31 <shapr> Strike: that's a fun link
18:37:57 <Strike> shapr: yeah, it's fun to come up with crude things and see it get lib<crude-thing>-perl attached ;)
18:38:09 <Strike> and/or your other least favorite language
19:23:25 <Strike> lambdabot, nooooo
19:40:27 <cale> How will we @yow, lambdabot?! How could you do this to us?!
22:28:21 <alanl> hello
22:28:43 <alanl> I'm trying to recover from 3 days of automarking hell
22:34:00 <Pseudonym> Have you considered doing something else?
22:35:39 <alanl> you mean like go out? the weather outside looks awfully like a melbourne day
22:35:46 <alanl> so going outside is not an option
22:35:58 <Pseudonym> It's actually not too bad in Melbourne today.
22:36:51 <alanl> plus theres some haskell talk thing here at cse in a hour
22:37:12 <Pseudonym> Well that sounds good.
22:37:24 <Pseudonym> Probably won't be, but it sounds good.
22:38:25 <alanl> LOL.....check this out btw
22:38:27 <alanl> http://www.cse.unsw.edu.au/~cs1711/project/photos/P7030056.JPG
22:39:13 <Pseudonym> Damn I went to the wrong uni.
22:39:39 <alanl> and this was all controlled by a haskell program...who said haskell can't do real time io!
23:50:50 <Pseudonym> Question.
23:51:13 <inkedmn> if you're asking, i SERIOUSLY doubt i'll be able to help :)
23:51:14 <Pseudonym> Suppose your employer asked you to carry a phone on some weekends, to do support for some customer.
23:51:23 <inkedmn> oh, that kind of question :)
23:51:29 * inkedmn listens
23:51:43 <Pseudonym> How much would you expect to be paid for the inconvenience of having to answer it at a moments' notice?
23:52:43 <alanl> well of the people I know that do this, they are essentially paid "standby rates"
23:52:51 <alanl> for the time that they are expected to answer the phone
23:53:10 <Pseudonym> Oh, and for the inconvenience of having to come into work within an hour.
23:53:34 <Pseudonym> What are going "standy rates" as a proportion of normal hourly rate?
23:53:42 <alanl> then its absolutely standby rates for the whole time you're expected to do this, even if not a single soul calls
23:53:50 * Pseudonym nods
23:53:57 <inkedmn> Pseudonym: do you get overtime for going in on your days off?
23:54:02 <alanl> the actually amount depends on on how indepensible you are
23:54:04 <Pseudonym> You would, yes.
23:54:13 <Pseudonym> Double time, or double time and a half on public holidays.
23:54:21 <Pseudonym> For actually doing work.
23:54:25 <Pseudonym> Like answering the phone or going in.
23:54:33 <inkedmn> i'd take that
23:54:41 <Pseudonym> Yes, that's not the question.
23:54:47 <inkedmn> how much?
23:54:51 <Pseudonym> How much for just having the phone on you.
23:54:53 <Pseudonym> ?
23:55:09 <Pseudonym> For the inconvenience of disrupting your weekend, pretty much.
23:55:10 <inkedmn> that depends how much you're getting paid for your normal work
23:55:22 <Pseudonym> As I said: As a proportion of the normal hourly rate.
23:55:23 <alanl> I'd guess try asking for maybe 10 per hour for holding the fone, and a HUGE fee for having to go to 
23:55:25 <alanl> go to work
23:55:57 <inkedmn> if that was explained to you as part of the job when you started and you're getting paid for it, then double-time sounds good to me
23:56:12 * alanl nods
23:56:17 <inkedmn> if you're asking for a specific amount, i'd have to know more about what you're actually doing
23:56:35 <Pseudonym> Hang on, let me explain.
23:56:43 <Pseudonym> Actually doing work isn't an issue.
23:56:49 <Pseudonym> It's the standby rates I'm interested in.
23:56:59 <Pseudonym> What proportion of your normal hourly rates would you expect?
23:57:52 <inkedmn> for just carrying the phone? nothing
23:57:57 <Pseudonym> Nothing?
23:58:06 <inkedmn> i might ask that i be allowed to use the phone for personal calls, that'd be it
23:58:11 <Pseudonym> :-)
23:58:24 <Pseudonym> See, in my case, I'm already working here, and weekend work is not in my contract.
23:58:34 * Pseudonym is required to put in 7.2 hours per working day and that's i
23:58:39 <inkedmn> then tell them to make you an offer :)
23:58:41 <Pseudonym> it
23:58:54 <inkedmn> ok, let me ask you this
23:58:57 <Pseudonym> That's the thing.  They did float around some numbers and nobody is very enthused.
23:59:00 <inkedmn> how much do you get paid for those hours?
23:59:07 <inkedmn> the 7.2
23:59:08 <alanl> well then probably about 1/2-1/3 of your normal wage 
23:59:37 <Pseudonym> The amount they suggested is actually about 40%.
23:59:51 <inkedmn> i think that any time you take a work related call, you get (at least) an hour's pay
23:59:53 <Pseudonym> However, when you add it up, it's not a great amount after tax.
23:59:58 <Pseudonym> Oh, yes, of course.
