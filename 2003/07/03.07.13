00:00:20 * clausen worried about academic Issues
00:00:34 * clausen just finished a proof of something that a friend was probably planning to prove
00:00:48 <clausen> (friend, in the loose sense of the word)
00:00:59 <clausen> I didn't realize it until after I wrote it
00:01:18 <Gaucho> a proof?are you in math?
00:01:31 <clausen> well, it's a proof about the security of google
00:01:36 <clausen> I'm in computer science
00:02:35 <saz> clausen: youre scared that said friend will pass off your work as theirs?
00:02:42 <clausen> no
00:02:46 <clausen> I'm scared I stole their turf
00:02:51 <clausen> anyway, he just said he's happy :)
00:02:53 <saz> oh
00:03:07 <saz> heh
00:03:12 <Gaucho> happy about what?
00:03:26 <clausen> he's happy that I proved it
00:06:26 <ibid> mainly it's an issue of who gets to be authors on the paper :-)
00:13:23 <clausen> yep... he only wants me to cite his motivating conjecture
00:13:31 <clausen> very generous of him :)
00:13:48 <clausen> (that said, it was a non-trivial proof... about 3 pages)
00:15:18 <saz> ah
00:15:20 <saz> hmm
00:16:50 <clausen> (I was planning to cite it anyway... I just didn't realize it was as relevant as it was)
00:17:33 <saz> *mutter* hungry *mutter*
02:20:58 <juhp> oops
02:23:23 <juhp> lamdabot seems to have DoS issues ;)
02:25:09 <Marvin--> surprised? :)
04:39:34 <d33p> hey clausen
04:39:38 <clausen> gday
05:37:29 <jlouis> ehlo
06:57:33 <pesco> Hi, has anyone here ever used IOUArrays?
06:57:49 <pesco> (IOUArray is a fun name)
08:45:28 <jlouis> gosh, C is hard to write in again when you have written things in functional programming languages for ages
08:45:48 <jlouis> there is so much redundant typing at the keyboard which gets you absolutely nowhere
08:46:05 * Riastradh solves that problem by never writing C any more.
08:46:30 <jlouis> Riastradh: I need this window-manager so ready it can get its guile bindings :)
08:46:46 <Riastradh> Eww, why are you using guile?
08:47:05 <jlouis> Do you have a better idea?
08:47:17 * Riastradh points at the numerous other, better Schemes.
08:48:11 <jlouis> yeah, I know, but do they link that easily with a program?
08:48:20 <Riastradh> Sure.
08:48:31 <Riastradh> http://www.schemers.org/Documents/FAQ/#id2832882
08:48:32 <jlouis> interesting
08:48:43 <Riastradh> I am certain you can find a better one in that list there.
08:49:04 <Riastradh> (-DON'T- use SIOD, though)
08:50:52 <phubuh> there are many functional languages with X11 bindings
08:51:04 <jlouis> yes
08:51:47 <jlouis> it is the Callback FFI there's the important thing
08:58:54 * Riastradh suggests Scheme48.
09:41:35 <shapr> juhp: how did you get that lambdabot error?
09:55:54 <Marvin--> yay
09:55:57 <shapr> hej Marvin-- 
09:59:45 <jlouis> /bin/sh: bash: not found <--- shame on greencard
10:09:07 <jlouis> and greencard assumes ar has gnu-options...
10:09:11 <jlouis> more shame on greencard
10:10:56 <phubuh> shame on you for not having bash :P
11:22:15 <jlouis> phubuh: you cannot assume bash being installed on a POSIX system. You can assume POSIX sh being there though
11:49:31 <hdaume> Heffalump: did you ever figure out how to determine what the path separator was?
12:09:58 <Gaucho> hello, i'm using winhugs and i think there was some url in the topic pointing to a better haskell interpreter...
12:10:47 <jlouis> HRMF, it is hard to get GreenCard to work
12:11:01 <Riastradh> What's wrong with Hugs?
12:11:35 <Gaucho> Riastradh:it gives me an error and i can't find it in the line it says, it's like gcc, points to line 112 when the error it's on 821
12:11:44 <Gaucho> (dramatization)
12:12:11 <Riastradh> GHCi does that, too.
12:12:17 <Gaucho> damn
12:14:07 <Riastradh> What's this error?
12:15:58 <Gaucho> having problems with types doesn't match
12:16:07 <Riastradh> How long is the error?
12:16:44 <Gaucho> i know the meaning of the error but i cannot find it... heh
12:17:01 <Gaucho> aparently there's a [Char] ->[Char] instead of ([Char],[a])
12:17:21 <Riastradh> Do you have any type annotations in your file?
12:17:40 <Gaucho> yes of course
12:17:52 <Riastradh> Do you have ([Char],[a]) anywhere?
12:17:56 <Riastradh> (or (String,[a]))
12:18:01 <Gaucho> the problem it's that it's all in spanish and i know how you guys hates that in a program:)
12:18:24 * Riastradh doesn't care.
12:18:45 <Gaucho> nop, don't have any ([Char],[a])
12:18:56 <Gaucho> not that i know of... i'm still searching, pretty weird
12:18:56 <Riastradh> How about [Char] -> [Char] or String -> String?
12:18:57 <Smerdyakov> What about ([Char],[b]) ?
12:19:24 <Gaucho> the error it's near this:mayor::Ord a=>(a->a)->[a]->a
12:19:24 <Gaucho> mayor _ [] = error "no puede estar vacia"
12:19:24 <Gaucho> mayor f [x] = x
12:19:24 <Gaucho> mayor f (x:xs) | (f x) >= (f (mayor f xs)) = x
12:19:24 <Gaucho> 		| otherwise = mayor f xs
12:19:26 <Gaucho> ouch
12:19:45 <Gaucho> sorry that wasn't the intention nor idea, indeed that's not the code, must been an old copy
12:19:50 <Smerdyakov> Wow! The mayor uses type classes! I will definitely be re-electing him.
12:19:51 <Gaucho> i apologize
12:20:39 <Gaucho> the line is this one aparently: actualizaMultiValores::[Char]->[Char]->[(Char,Int)]->([Char]->[Char])
12:20:44 <Gaucho> can i do that can i?
12:21:03 <Riastradh> How are you callling actualizaMultiValores?
12:21:13 <Gaucho> i'm starting to use functions and compositions and i have the feeling i'm doing weird stuff but anyway i have to learn some way
12:21:40 <Gaucho> like this:mailing xs ((js,ys):zs) = ((reemplazaTupla.actualizaMultiValores) xs (js,ys)):(mailing xs zs)
12:22:17 <hdaume> you're not applying enough params then
12:22:29 <jlouis> Anybody tried using GreenCard on OpenBSD? It fails miserably for me with Gc 3.01
12:22:30 <Gaucho> oh damn
12:22:35 <hdaume> there should be two strings before the pair, but you're only applying one
12:23:04 <hdaume> also, you should probably have (reemplazaTupla $ actualiza MultiValores xs __something__ (js,ys))
12:23:07 <hdaume> instead of using (.)
12:23:29 <Riastradh> foo $ bar baz quux    is the same as    foo (bar baz quux)
12:23:56 <Gaucho> never seen that $, what's the meaning?
12:24:06 <Riastradh> @prelude ($)
12:24:13 <lambdabot> *** "($)" prelude "Haskell Standard Prelude Dictionary": text follows
12:24:13 <lambdabot> ($)
12:24:13 <lambdabot>   infixr 0 $
12:24:13 <lambdabot>   ($) ::  (a -> b) -> a -> b
12:24:29 <Riastradh> Methinks lambdabot is lagged.
12:24:35 <Riastradh> f $ x = f x
12:24:46 <Riastradh> It associates _really_ low, so:
12:24:49 <Riastradh> foo bar $ baz quux
12:24:52 <Riastradh> parses as:
12:24:54 <Riastradh> (foo bar) $ (baz quux)
12:25:09 <Riastradh> Well, that's a bad example -- function application has the highest precedence anyways.
12:25:16 <Riastradh> foo + bar $ baz - quux
12:25:18 <Riastradh> parses as:
12:25:21 <Riastradh> (foo + bar) $ (baz - quux)
12:25:45 <Riastradh> (OK, ok, so that was a somewhat bad example, too, because (+) doesn't return a function...but you get the idea)
12:25:46 <Gaucho> and how's that different from using () ?
12:25:52 <Riastradh> It isn't.
12:25:58 <Riastradh> Some people prefer parentheses, some people prefer ($).
12:26:03 <Gaucho> oh, just comfort
12:26:19 <Riastradh> I generally only use $ after many compositions or as arguments to a function.
12:26:26 <hdaume> it's also useful in higherorder functions: for instance, foldl ($)
12:26:33 <hdaume> instead of foldl (\f x -> f x)
12:26:45 <Riastradh> foo . bar . baz . quux $ zot
12:26:47 <Riastradh> ==>
12:26:52 <Riastradh> foo (bar (baz (quux zot)))
12:26:53 <hdaume> anyway, lunch time for me...talk to you guys later
12:27:31 <Gaucho> later hdaume
12:27:49 <Gaucho> can i paste this code somewhere?psmunix?
12:32:08 <Riastradh> Wherever you like.
12:32:14 <Riastradh> Well, just not here.
12:32:21 <Riastradh> (unless it's fewer than ten lines)
12:33:54 <Gaucho> the error appears in actualizaMultiValores (if i decomment) 
12:34:15 <Gaucho> is this wrong:actualizaMultiValores [] xs ys = (xs,[])?
12:34:34 <Gaucho> remembering that actualizaMultiValores goes like this:actualizaMultiValores::[Char]->[Char]->[(Char,Int)]->([Char]->[Char]
12:39:10 <Gaucho> the code it's in here, would you take a look?
12:39:14 <Gaucho> http://paste.msunix.org/index.php?view=945
12:48:51 <Gaucho> anybody?
12:48:54 <Gaucho> am i still connected?
12:49:15 <hdaume> yeah
12:49:36 <hdaume> that's wrong :)
12:50:29 <Gaucho> huhu
12:50:37 <Gaucho> sob:P
12:51:13 <hdaume> the [] is of type [Char], the xs of [Char] and theys of [(Char,Int)].  it expects you to return a function of type [Char] -> [Char], but you're returning something of type ([Char],[a])
12:51:27 <Gaucho> eureka
12:51:33 <Gaucho> yes
12:51:38 <Gaucho> that's right, thanks
12:52:00 <hdaume> np
12:52:03 <Gaucho> i've finded recently i assume it was rather telepathy meanwhile you were typing rather than figured myself
12:52:07 <Gaucho> :)
12:52:57 <hdaume> :)
13:01:53 <Gaucho> if this works great:reemplazaTupla (actualizaMultiValores "Que haces xxxx como anda lo tuyo #
13:01:53 <Gaucho> 9 bien?" "Pepe Puto" [('#',9)]) 
13:02:07 <Gaucho> why reemplazaTupla.actualizaMultiValores isn't?
13:04:23 <ibid> isn't?
13:05:22 <Gaucho> nop, i'm trying to figure it out if is there another error that can be bothering
13:14:58 <jlouis> heh, after a bit of hard hitting on GreenCard did it compile.
13:20:45 <jlouis> and the evil-mangler does its stuff
13:22:56 <Gaucho> if this works mailing xs ((js,ys):zs) = reemplazaTupla (actualizaMultiValores xs js ys):(mailing xs zs)
13:23:29 <Gaucho> why this doesn't:mailing xs ((js,ys):zs) = ((reemplazaTupla.actualizaMultiValores) xs js ys):(mailing xs zs)?
13:30:24 <hdaume> because of the type of (.)
13:30:34 <hdaume> @prelude (.)
13:30:36 <lambdabot> *** "(.)" prelude "Haskell Standard Prelude Dictionary": text follows
13:30:36 <lambdabot> (.)
13:30:36 <lambdabot>   infixr 9 .
13:30:36 <lambdabot>   (.) ::  (b -> c) -> (a -> b) -> (a -> c)
13:30:37 <lambdabot>   (f . g) x       = f (g x)
13:31:08 <hdaume> this would work: (reemplazaTupla.actualizaMultiValores xs js) ys
13:31:18 <hdaume> but you can only "leave out" one argument with (.)
13:31:30 <jlouis> heh, now this seems to be a proof-of-concept
13:31:34 <jlouis> Window manager in Haskell
13:32:12 <hdaume> so, for instance: "printAfterMap f l = print (map f l)" is the same as "printAfterMap f = print . map f" but you cannot write "printAfterMap = print . map" because then you're leaving out to arguments, not one
13:32:18 <jlouis> A. Reid have the HSX11 library. Lets see if we can put that one to something
13:32:18 <jlouis> ;)
13:32:24 <hdaume> hehe
13:37:49 <jlouis> Took some time to get the s..... to understand OpenBSD but what the heck
13:54:46 <Gaucho> hdaume:that worked but i don't fully understand the explanation
13:55:21 <Gaucho> cause i'm leaving one parameter outside the call
13:55:51 <Gaucho> oh i get it, i'm doing g(x) being x the parameter outside and the 2 other inside are taken as already in the function?
13:55:54 <Gaucho> something like that?
14:23:07 <Gaucho> thanks hdaume
14:51:34 <jlouis> hmm, how can you specify packages on GHC's commandline? -pkg?
14:52:21 <Igloo> -package
14:52:47 <jlouis> ah, thanks
16:21:24 <Arnia> shapr: Around?
17:02:35 <hdaume> hi folks
17:25:30 <juhp> shapr: with "@ply e2 e4"
17:26:44 <juhp> I think you should add "catchError" or something around the "process" calls to catch exceptions
17:26:58 <juhp> in lambdabot
18:24:07 <juhp> i did that in hircules over the weekend  (will check it in soon to cvs)
19:38:17 * Arnia bounces around the channel screaming something joyful about 'AppArrow'
19:58:22 * tmoertel wanders back into #haskell
