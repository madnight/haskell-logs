02:58:19 <stratocaster> Hi. I'm a beginner, writing a module (for learning purposes) dealing with binary ops.
02:58:52 <stratocaster> Right now, I've got "data Bit = B0 | B1", to represent bits. I can also do "data Bit = Bit Bool"
02:59:07 <stratocaster> Is there a way, instead, that I could say "a Bit is a 0 or a 1"?
03:03:51 <stratocaster> The idea being, that the compiler would see a 0 given to a function that takes a Bit as argument, and accept it, the way it might accept 5 for a function that takes a Fractional
03:05:13 <jlouis> Using type classes you could hove your B0 and B1 be accepted into the same lot as Fractionals, yet I do not think it is a good idea
03:07:00 <stratocaster> My hope is that I can ditch the B0 and B1 constructors, and just use "0" and "1" somehow
03:07:15 <stratocaster> But have any other "numeric literals" not be seen as Bits
03:07:40 <stratocaster> Or is "B0" and "B1" the right way to do it?
03:08:29 <stratocaster> Ideally, I'd like to be able to say "data Bit = 0 | 1", but that's not allowed
03:09:32 <jlouis> I am not much into the type system of Haskell (yet), so I might be wrong here.
03:10:27 <jlouis> regular numbers are ''overloaded'' in the sense that 4 can be represented as Int or Integer or Double. Yet I do not think that you can add another datatype to that overloading
03:11:08 <stratocaster> Yea. That's the impression I'm getting, too.
03:11:14 <jlouis> The bit datatype is isomorphic to Bool, so why dont you just stick with that one?
03:12:04 <stratocaster> I could. That'd be cleaner than "Bit Bool", for sure, but a little more typing that "B0", heh
03:13:02 <stratocaster> Although being able to work with plain Bools would probably make the actual functions cleaner.
03:16:58 <jlouis> b0 = Bit False
03:17:00 <jlouis> b1 = Bit True
03:17:03 <jlouis> there
03:18:38 <stratocaster> yea, that's back where I started
03:19:18 <jlouis> though that is not good either, since you cannot pattern-match upon them
03:19:30 <jlouis> i'd stick with B0, B1 then
03:20:04 <stratocaster> My question really arose from seeing the overloading you mentioned where 4 or is an Int or Fractional, etc, depending upon the function's type.
03:20:54 <jlouis> you know about type classes?
03:20:55 <stratocaster> And if I can't extend that overloading, then so be it.
03:21:31 <stratocaster> A little. "Num" where the instance types have an "+", and such
03:22:52 <jlouis> stratocaster: hmmm, you will have to wait until some of the more experienced into Haskell arrives in the Channel.
03:24:27 <stratocaster> Nah, I think you've already answered my question.
03:26:54 <ddarius> You -could- overload integers to return B0,B1 for 0 and 1 and cause an error otherwise, but that would be rather disgusting.
03:29:06 <stratocaster> Yea. I sort've wanted to do the reverse, have the compiler do it's "magic" when it sees a 0 given to a function of type Bit -> Bit
03:29:19 <stratocaster> err "its"
03:29:33 <ddarius> That's what it would do.
03:30:51 <stratocaster> If it involves overloading all integers, then the magic is gone, though, isn't it? My hypothetical want is to be able to say "data Bit = 0 | 1"
03:32:20 <ddarius> You could do data Bit = B0 | B1 as you do now, you'd still have to pattern match on B0/1 but you could pass 0/1/anything to a function taking Bit and it would automatically be converted to B0/1.
03:33:08 <ddarius> Of course, in that case, you more or less may as well use integers (or rather Ints) directly.
03:33:48 <stratocaster> Yea, I could just use Integers and have each function error if it was given anything other than 0 or 1
03:34:13 <stratocaster> But how would I accomplish this overloading of all integers? Something to do with the Bit constructor, I guess?
03:34:42 <ddarius> *sigh* where is that bot?
03:35:33 <ddarius> instance Num Bit where fromInteger 0 = B0; fromInteger 1 = B1
03:35:55 <stratocaster> ahhhhh
03:36:00 <ddarius> You could also actually make meaningful instantiations for *, +, 
03:36:03 <ddarius> and negate
03:37:14 <stratocaster> well, that seems interesting.
03:38:21 <stratocaster> well, I'm going to read up on some of this stuff a little more. thanks guys for the help
04:04:44 <ddarius> Hmm, the LVM seems to use a push/enter model...
04:06:09 <jlouis> LVM?
04:08:12 <ddarius> Lazy Virtual Machine
04:09:08 <jlouis> ah
14:12:36 --- topic: set to '["We put the Funk in Funktion","See logs @ http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers"]' by Heffalump
14:12:50 <Heffalump> oops.
14:13:10 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers"]' by Heffalump
14:53:53 <Gaucho> hey
14:53:55 <Gaucho> nobody talks
14:54:01 <Riastradh> Hi.
14:54:06 <Riastradh> What would you like to talk about?
14:54:46 <Gaucho> perhaps some cool problem or something in haskell?
14:54:54 <Gaucho> something usefull and funny for a change?:)
14:55:27 * Riastradh is busy hacking twisted-scheme right now...
14:55:47 <Gaucho> everybody it's on twisted
14:56:08 <Heffalump> we talk sometimes
14:56:24 * Heffalump prefers doing, however.
14:57:34 <Smerdyakov> Gaucho, what does "everybody it's on twisted" mean?
14:58:27 <Gaucho> well rias like to use the word twisted instead of heroin
14:58:36 <Gaucho> he's busy consuming heroin
14:58:39 <Riastradh> I do?
14:58:43 <Gaucho> of course
14:58:46 <Gaucho> :P
14:59:03 <Riastradh> But...but...I prefer LSD!
14:59:04 <Gaucho> heroin + haskell = recursive ideas
14:59:15 <Gaucho> well, you're loaded then
14:59:22 <Gaucho> we don't have much money
15:42:24 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://haskell.org/~petersen/rpms/","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers"]'
15:42:24 --- topic: set by Heffalump on [Sat Jul 19 14:13:10 2003]
15:42:24 --- names: list (clog clausen jao SyntaxPolice sild cale_ arguile whee kunphuzil buggs dalor Segora Igloo opet wax thornber Strike Fractal Riastradh jlouis esap mgoetze|away kosmikus|away ibid mattam galority keverets skylan Smerdyakov dennisb polli_ cm o3_ norpan tez Heffalump el_diego gdsx vegai earthy lilith m[kel[ emu juhp)
16:23:36 * syntax-laptop sees a new version of arrowp :)
16:25:23 <Heffalump> :-)
16:25:51 <Heffalump> only change is fixed Build-deps (apart from being explicitly built against the correct libraries in a chroot, now)
16:26:20 * Heffalump considers having a play with LambdaBot
16:26:59 <syntax-laptop> cool beans
16:27:19 <Heffalump> oh, I ought to write a manpage for arrow and hsprep.
16:33:36 <syntax-laptop> so what is the favorite opensource tool for creating presentations?
16:33:44 <Strike> latex ;)
16:33:56 <syntax-laptop> Strike --;
16:33:59 <syntax-laptop> ;)
16:34:03 <Strike> bah
16:34:40 <syntax-laptop> latex isn't a bad answer really; especially since I understand there's a tricky way to make it a pdf that is pretty portable which increases my chances of actually getting to use the presentation :)
16:35:14 <Strike> it's not tricky to make a PDF
16:35:25 <Strike> just run latex to get the dvi and then use dvipdfm to get a PDF
16:36:06 <syntax-laptop> isn't there something special you have to do to let acrobat or whatever think about it like a presentation?
16:36:11 <Igloo> I have used prosper(.sf.net) most recently
16:36:46 <Strike> syntax-laptop: unless there's something special about acrobat and presentations I don't know about (other than orientation = landscape/seascape), nope
16:37:21 <syntax-laptop> hm. perhaps the situation is better than my impression
16:37:26 <Igloo> You can also use xpdf -fullscreen </OS-advocacy>  :-)
16:37:31 <Strike> :)
16:38:01 <Strike> there are even slide environments for LaTeX out there that make it relatively simple
16:38:11 <syntax-laptop> I'm not sure what kind of environment I'll have on the receiving end, so I want to maximize my options :)
16:38:39 <Igloo> That's essentially what prosper is
16:38:41 * syntax-laptop apt-get installs prosper
16:38:56 <Igloo> I use the style like the powerpoint yellow/red/blue squares in teh top left
16:39:13 <Igloo> (which ISTR doesn't come with it, or maybe isn't included in the packaged version)
16:39:28 <syntax-laptop> man. I've got this hacked up version of apt thats outputting all this debugging crap
16:39:32 <Strike> I have a sample slides.tex file if you want to see it
16:39:50 <syntax-laptop> Strike: sure! does it use prosper?  Igloo, do you have a sample for me?
16:39:58 <Strike> nope, just straight latex
16:40:36 <Strike> one sec, gotta generate the PDF output so you can see
16:40:43 * syntax-laptop dances around
16:41:15 <Strike> heh, I have too much stuff hooked into apt .. it takes a while to even get started/finished with apt now
16:41:40 <Strike> too much stuff being apt-listbugs and apt-listchanges
16:41:40 <Igloo> http://urchin.earth.li/~ian/tar.tar.gz
16:43:20 <Heffalump> I think those are good things to have.
16:45:31 <syntax-laptop> Igloo: ! Undefined control sequence.
16:45:31 <syntax-laptop> \@fontTitleColor ...8pt}{20pt}\selectfont \ctitle
16:45:31 <syntax-laptop>                                                    
16:45:31 <syntax-laptop> l.27 \maketitle
16:45:46 <Heffalump> Igloo is an undefined control sequence?
16:46:02 <syntax-laptop> has anyone told his family?
16:46:04 <Strike> heh
16:46:20 <Strike> Heffalump: no, he's not (!) an undefined control sequence
16:46:39 <Heffalump> I'm even more worried by the prospect of him being a defined control sequence.
16:46:46 <Igloo> syn: When doing what?
16:46:58 <syntax-laptop> talk.pdf is pretty
16:47:00 <Heffalump> so I hope the bracketing is (! undefined control sequence) rather than (! undefined) control sequence
16:47:15 <syntax-laptop> hm. I've never gotten the hang of reading latex error messages
16:47:27 <syntax-laptop> but just 'make' :)
16:48:19 <Igloo> Oh, I might have taken prosper from unstable to get around the above problem
16:48:26 <Igloo> I have 1.00.4+cvs.2002.11.03-1
16:48:43 <Igloo> If that doesn't fix it then I have no idea based on the above
16:48:48 <Strike> sorry this is taking so long, tetex-bin takes a while to install :)
16:49:15 <syntax-laptop> does more tell you more:
16:49:17 <syntax-laptop> *hyperref using driver hdvips*
16:49:18 <syntax-laptop> (/usr/share/texmf/tex/latex/hyperref/hdvips.def
16:49:18 <syntax-laptop> (/usr/share/texmf/tex/latex/hyperref/pdfmark.def))
16:49:18 <syntax-laptop> (/usr/share/texmf/tex/latex/prosper/PPRblends.sty
16:49:18 <syntax-laptop> 'Blends' style for Prosper ---
16:49:18 <syntax-laptop> (c) 2001 Andrew Arnt
16:49:20 <syntax-laptop> (/usr/share/texmf/tex/latex/pstricks/pst-grad.sty
16:49:22 <syntax-laptop> (/usr/share/texmf/tex/generic/pstricks/pst-grad.tex  v97 patch 1, 1997/04/28))
16:49:24 <syntax-laptop> (/usr/share/texmf/tex/latex/seminar/semhelv.sty
16:49:26 <syntax-laptop> Style Option: `semhelv' for the `seminar' doc style 1.4 <2000/05/08> (tvz)
16:49:28 <syntax-laptop> Modified by Stefan (see source for details)
16:49:30 <syntax-laptop> ))) (/usr/share/texmf/tex/latex/fancyvrb/fancyvrb.sty
16:49:32 <syntax-laptop> Style option: `fancyvrb' v2.7, with DG/SPQR fixes <2000/03/21> (tvz))
16:49:34 <syntax-laptop> (/usr/share/texmf/tex/latex/tools/verbatim.sty) (./talk.aux)
16:49:36 <syntax-laptop> (/usr/share/texmf/tex/latex/hyperref/nameref.sty) (./talk.out) (./talk.out)
16:49:38 <syntax-laptop> (/usr/share/texmf/tex/latex/psnfss/t1phv.fd)
16:49:40 <syntax-laptop> ! Undefined control sequence.
16:49:42 <syntax-laptop> \@fontTitleColor ...8pt}{20pt}\selectfont \ctitle
16:50:15 <Igloo> Not really, sorry
16:50:42 <syntax-laptop> thats OK. I'll mess w/ it. thanks.
16:52:47 <Strike> hmm, gnome-gv doesn't seem to understand the paper-size/orientation of the PDF ..
16:52:53 * Strike messes with dvipdfm
16:53:54 <Strike> ah, that was it
16:53:54 <Igloo> dvips -Ppdf -G0 $< -o $@    is my make rule FWIW
16:54:24 <Strike> oh I use dvipdfm to make the PDF, I can't remember why I didn't use dvips ... didn't like the output or something
16:56:07 * Strike tries above dvips line
17:01:42 <Strike>  dvips -Ppdf -G0 slides.dvi -o slides.pdf
17:01:42 <Strike> ^^ that produces empty slides for me ... ^^
17:02:12 <Strike> anyway, the PS slides look good :)  but the PDF ones have some weird vertical offset issues for some reason
17:14:01 <syntax-laptop> anyone know where I can find the old lowercase blue lambda that was the haskell symbol for so long?
17:30:01 <Igloo> The one from the website?
17:31:02 <Igloo> There is http://www.haskell.org/HaskellGleam.jpg and http://www.haskell.org/small-lambda.gif
17:31:57 <syntax-laptop> ah, that is good
18:02:41 <Heffalump> @topic-tell
22:45:58 <lilith> hey mark :)
