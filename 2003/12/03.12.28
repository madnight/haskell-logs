01:15:37 <ejt> morning folks, more stupid questions I'm afraid ...
01:16:10 <ejt> I'm using a State monad, how do I extract both the state and the value ?
01:16:27 <ejt> at the moment I'm extracting just the value using evalState
01:28:37 <mbossa> is runState what you're looking for?
01:28:44 <ejt> y, just found it
01:28:50 <mbossa> sweet
01:28:55 <ejt> I was getting confused by the field selector syntax
01:29:05 <ejt> (which I don't use often myself)
01:29:07 <ejt> thx
01:30:01 <mbossa> hehe, yeah, i was just looking for it myself, but it took ages, just cos it doesn't appear in the export list
01:30:44 <ejt> heh
01:32:48 <ejt> now I just need a simple way to print a trace of the state for debug
01:34:17 * ejt finds Debug.Trace :)
14:55:17 <SyntaxLaptop> any zsh fans alive?
14:55:34 * Riastradh
14:57:08 <SyntaxLaptop> the man pages suggest that there's a (builtin?) program called "prompt" that I can use to load prompt themes, but I don't find it. 
14:57:08 * Igloo is a fan, but probably can't be much help
14:57:22 <SyntaxLaptop> I'm just trying it out for the first time
14:57:25 <Igloo> But Ria's presence has reminded me - what is "G+" as a guitar chord?
14:57:48 <Igloo> You might need to do autoload prompt or something first
14:58:05 <Darius> +?
14:58:16 <Igloo> Exactly
14:58:31 <Igloo> I was guessing it means suspended or something?
15:00:04 <SyntaxLaptop> hm. I've seen that before, but can't recall
15:00:11 <Igloo> SyntaxLaptop: http://adamspiers.org/computing/zsh/ might help
15:00:18 <Cale> augmented?
15:00:22 <Igloo> Oh, I'm building hat debs BTW
15:01:14 <Cale> yeah, G+ is G augmented
15:01:56 <Igloo> Ta (so that's G B D#, right?)
15:02:30 <Cale> right
15:02:40 <Cale> http://www.ezfolk.com/guitar/chords/G_Major/Gaug/gaug.html
15:04:04 <SyntaxLaptop> autoload is helping :)
15:04:45 <SyntaxLaptop> hm. I was thinking augmented, but couldn't remember what an augmented major chord is.  I know what an augmented interval is, though
15:05:20 <Cale> The augmented chord has nice symmetry.
15:05:54 * Igloo hasn't got chord names down yet, but I can just about do intervals now
15:18:44 <esap> Hmm.. here's very strange expression: \f -> let x = f ($! x) in x. What is this? A fixed point? [It has kind of strange type for that]
15:22:39 <Darius> f is written in continuation passing style ($! x) is a continuation.
15:23:16 <Darius> @type \f -> let x = f ($! x) in x
15:23:17 <lambdabot> \\f -> let {x ($0 (0 (f (flip ($!) x))) $0) $0 $0} in x :: (((a -> b) -> b) -> a) -> a
15:23:41 <Darius> It may be (effectively) mfix for the CPS monad
15:24:42 <esap> hmm.. very interesting. If you apply it with (\p -> 'a' : p ('b':)), you get an alternating list of 'a' and 'b'. Hmm..
15:41:03 <Darius> Actually, it seems like a rather pointless funtion.
15:44:20 <Darius> The strict $ is pointless and let x = f x in x is more convenient to use without losing anything.
15:46:39 <esap> yea perhaps. I was a bit surprised about the type though, I didn't think its type would look so much like callCC's type :-)
15:46:50 <Riastradh> @type callCC
15:46:58 <Riastradh> @type Control.Monad.Cont.callCC
15:47:02 <Riastradh> Bah!
15:49:43 <Darius> @type \f k -> f (\a k' -> k a) k
15:49:44 <lambdabot> \\f k -> f (\\a k' -> k a) k :: ((a -> b -> c) -> (a -> c) -> d) -> (a -> c) -> d
16:00:58 <Lunar^> Darius: you're impressive
16:07:21 <Darius> not really.  My first analysis was mostly wrong.
16:08:37 <Lunar^> If you say so, but this kinds of types makes only me stare at my screen for the moment...
16:08:41 <Lunar^> ;)
16:11:53 <Darius> @type \f -> let x = f . ($ x) in x
16:12:59 <Darius> @type \f k -> let x = f ($ x) in x k
16:12:59 <lambdabot> \\f k -> let {x ($0 (0 (f (flip ($) x))) $0) $0 $0} in x k :: ((((a -> b) -> c) -> c) -> a -> b) -> a -> b
16:13:58 <Cale> btw, what does $0 represent there?
16:14:10 <Darius> Some Hugs gibber-gabber.
16:16:35 <Darius> @type \f k -> let x = f x in x k
16:16:35 <lambdabot> \\f k -> let {x ($0 (0 (f x)) $0) $0 $0} in x k :: ((a -> b) -> a -> b) -> a -> b
16:19:56 <Darius> @type let x = 1; y = 2 in x
16:19:57 <lambdabot> let {x ($0 (0 1) $0) $0 (y ($0 (0 2) $0) $0 $0)} in x :: (Num a, Num b) => a
16:24:01 <Darius> @type let x a = a in x
16:24:01 <lambdabot> let {x (a $0 (0 a) $0) $0 $0} in x :: a -> a
16:26:22 <esap> Hmm.. maybe this is useful: fix_cont = fmap Cont (Cont (\f -> let x = f ($ x) in x)) :: forall r r1. Cont r1 (Cont r r1)
16:53:28 <`John> can anyone tell me the problem in: false :: Word8
16:53:29 <`John> false =
16:53:31 <`John>   unsafePerformIO(
16:53:33 <`John>     _casm_ ``do {unsigned int res1;
16:53:34 <`John>                  do {res1=GL_FALSE;
16:53:36 <`John>                      %r = (unsigned int)(res1);} while(0);} while(0);''
16:53:38 <`John>     >>= \  res1  ->
16:53:39 <`John>     let gc_res1 = ( (fromIntegral :: Word32 -> Word8 )  (res1)) in
16:53:41 <`John>     (return (gc_res1))) .. It appears to be choking on >>=.
16:54:05 <Cale> `` doesn't seem to make much sense
16:54:23 <Cale> though it's in that _casm_ thing, and I don't know what that is.
16:55:46 <`John> well ghc appears to be the compiler for it.: "/usr/local/bin/ghc" -package lang -package-name HOpenGL -i../GLUT -I../GLUT/include -cpp -DCALLCONV=ccall -split-objs -odir GL_BasicTypes_split -fglasgow-exts    -I/usr/X11R6/include "-#include <GL/glut.h>" -O   -c GL_BasicTypes.hs -o GL_BasicTypes.o -ohi GL_BasicTypes.hi
16:55:48 <`John> GL_BasicTypes.hs:60: parse error on input ``'
16:55:49 <`John> make[1]: *** [GL_BasicTypes.o] Error 1
16:55:51 <`John> make: *** [all] Error 1
16:56:30 <Cale> GL_BasicTypes.hs:60: parse error on input ``'
16:57:45 <`John> if I take out '' , i get: GL_BasicTypes.hs:60: parse error on input `do'
16:59:00 <Darius> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/ghc/compiler/prelude/PrelRules.lhs?rev=1.38&content-type=text/x-cvsweb-markup
16:59:23 <Cale> hrm
16:59:42 <Cale> then how does one compile HOpenGL for ghc6.2?
17:04:41 <`John> primop_rule WordGtOp	= one_rule (relop (>))
17:04:43 <`John>     primop_rule WordGeOp	= one_rule (relop (>=))
17:04:44 <`John>     primop_rule WordLeOp	= one_rule (relop (<=))
17:04:46 <`John>     primop_rule WordLtOp	= one_rule (relop (<))   is sorta redundant typing, surely haskell allows for some sort of function substiute for all of that extra typing.
17:07:33 <`John> that I know is a problem in c where if (b) f(x,y,z) else f(a,b,c,x,y,z) can't easily be downgraded to g=x,y,z (ifb) f(g) else (a,b,g);
17:10:13 <Cale> one could possibly make a function equal to the composition of one_rule and relop, but that otherwise looks fairly concise to me
17:10:44 <Darius> `John, if the type Word*Op belongs to is an instance of Eq you could use a lookup table, but no matter what you still have to match each with it's operation, there isn't any real big savings there.
17:12:03 <Darius> The best would probably be, primop_rule w = one_rule $ relop $ case w of WordGeOp -> (>); Word...
17:12:03 <`John> the prelude is the only reference to all haskell functions? what's the big secret for looking up things like _casm_? Do the authors intentionally want to screw with newbies or what? Gentle Introduction *is Not* the definitive when it comes to a manual reference lookups.
17:12:07 <Darius> But that's pretty ugly.
17:12:28 <phubuh> _casm_ isn't a Haskell thing
17:12:40 <Darius> _casm_ isn't a standard thing, as you may have noticed it's not even supported anymore.
17:12:44 <phubuh> it's some strange esoteric GHC internal thing for inlining C
17:13:21 <`John> oh
17:14:00 <`John> the prelude of the actualy compiler is the bible for haskellers?
17:14:09 <Darius> No, the Report is.
17:14:15 <Cale> and the rest of the report and standard libraries
17:14:19 <Cale> yeah
17:15:25 <Darius> Anyways, there isn't a 'the compiler'.  There are at least two major compilers and a major interpreter and there may be twice as many implementations by 2005.
17:17:05 <Darius> There is also an FFI addendum to the Report that standardizes the FF.
17:21:15 <`John> ok that clear a few things up.
17:22:50 <`John> I would definitely like to program my interface using haskell/hopengl. but i guess I either have to a)foundf out how to simulatre asm to hopengl or wait for a new release of hopenl is hopengl still active?
17:23:31 <ayrnieu> I don't understand "foundf out how to simulatre asm to hopengl", sorry.
17:28:32 <`John> s/a)found/ a) find , s/wait/(b)wait
17:29:04 <`John> sorry thats my pig latin kicking in. :P
17:48:12 <shapr> good morning #haskell!
17:48:20 <ayrnieu> good morning, shapr.
17:48:26 <shapr> did I miss anything?
17:48:41 <SyntaxLaptop> hey shapr!
17:48:43 <ayrnieu> fsbot talked about you, but you didn't miss much in this channel.
17:48:53 <SyntaxLaptop> "apt-secure" is in experimental!!!
17:48:57 <shapr> SyntaxLaptop: yay!
17:49:06 <shapr> ayrnieu: what did fsbot say about me?
17:49:09 <phubuh> oh hey shapr!
17:49:15 <shapr> hej phubuh!
17:49:35 <shapr> I've spoken lots of french and some dutch the last few days, it felt so nice to hear swedish on the plane
17:49:41 <ayrnieu> shapr - it quoted you, something like: "I should finish things more often." "like code, not juice cartons"
17:49:49 <shapr> heh, ok :-)
17:50:02 <shapr> truth in advertising and all that
17:50:56 <andrewc> hi, anyone around?
17:51:00 <SyntaxLaptop> hi andrewc
17:51:01 <andrewc> i have a question....
17:51:03 <shapr> hello mr cooke
17:51:11 <andrewc> hi.  thanks.
17:51:23 <andrewc> is there a workaround for
17:52:23 <andrewc> data Dict = 
17:52:23 <andrewc>   forall a . Show a => Node {char  :: Char,
17:52:23 <andrewc>                              value :: Maybe a,
17:52:23 <andrewc>                              left  :: Dict, 
17:52:23 <andrewc>                              match :: Dict, 
17:52:50 <shapr> I think that requires the paste page
17:53:00 <shapr> andrewc: try the paste page on the wiki
17:53:20 <shapr> http://www.haskell.org/hawiki/HaskellIrcPastePage
17:53:51 <andrewc> sorry about that
17:54:19 * ayrnieu remembers the first time he flooded himself off an EFnet server.
17:55:54 <andrewc> ah.  is that what i did?
17:56:08 <andrewc> sorry again.  the code is now on the wiki page.
17:56:08 <ayrnieu> Indeed.  We only saw five lines of your paste.
17:56:37 <andrewc> good - it's only 7 or so, but i managed to paste it 3 or 4 times, i think.
17:56:50 <SyntaxLaptop> heh
17:57:02 <andrewc> anyway, my question is (1) why doesn't ghc allow this and
17:57:16 <andrewc> (2) what's the cleanest workaround.
17:57:28 <andrewc> (the problem is combining existential qualification and named fields)
17:58:25 <shapr> I have no idea.
17:58:32 <andrewc> rats!
17:58:42 <shapr> can you declare the record as a separate type?
17:58:57 <andrewc> it seems an odd restriction to me.  i hought there might be an interesting "deep" explanation.
17:59:07 <shapr> maybe someone knows the deep explanation
17:59:32 <andrewc> declare Node as a polymorphic type and then stick it in Dict?
17:59:51 <andrewc> it would mae the macthing a little messier, i guess, but i;ll try...
18:00:16 <ayrnieu> andrew - it doesn't look as if your Dict datatype ever bottoms out.
18:00:18 <shapr> Graham Klyne's Learning-Haskell-Notes page is interesting
18:00:26 <ayrnieu> well, maybe I should look at the paste.
18:01:07 <andrewc> that was the line you didn't get ;o)
18:04:18 <andrewc> ok, that seems to work (it compiels, at least), but
18:04:28 <andrewc> now i realise that i have another problem.
18:04:33 <Darius> andrewc: I believe the problem has to do with the semantics of existentials.
18:05:18 <andrewc> in what way?
18:05:38 <andrewc> data Dict = forall a . Show a => Node a
18:05:39 <andrewc>           | Empty
18:06:28 <Darius> andrewc: An existential hides an inner type, when you "open" it, you can only use that type in that scope.
18:06:49 <andrewc> ah.  i think this is related to my other problem, then.
18:07:13 <Darius> GHC likely uses the scope of the pattern for the implicit "open" statement with a named field there is no way to express value's type.
18:07:14 <andrewc> because now i want to constrain that type, but it doesnt appear in the type itself.
18:08:28 <andrewc> maybe i don't understand - are you saying that there's an implicit syntax that doesn't work?
18:08:48 <andrewc> like an intermediate transformation of the code?
18:08:49 <Darius> I'm saying there is no explicit syntax
18:09:47 <andrewc> there's no way for the type to leak out each time i use the name as an accessor?
18:10:04 <Darius> What is the type of 'value'?
18:10:28 <Cale> hmm.
18:10:45 <Cale> `John: I have ghc 6.2 and hopengl installed somehow.
18:11:01 <Darius> It would need to be: Node -> (exists a. Showable a => Maybe a).
18:11:03 <andrewc> so why doesn't the syntax allow the "a" to appear in the type?
18:11:04 <Cale> I just used the packages that came with debian though
18:11:48 <andrewc> ah.  ok.
18:12:21 <andrewc> hmm.  still won't let me constrain it.
18:12:50 <andrewc> ok, maybe it's better to ask how i can do what i want to do.
18:13:19 <andrewc> which is have a tree type that implements show but is otherwise polymorphic.
18:13:25 <Cale> Igloo: if you're around, how did you get hopengl to compile under ghc6.2? `John can't seem to do so, and I get the same results when trying it from source.
18:13:37 <andrewc> so that i can then use it to construct more complex types which will also implement show.
18:14:30 <Darius> andrewc: I would use a Showable class, but there is little reason to have something that only Show methods can be applied on you might as well just have it be a String.
18:14:50 <Darius> Also, you should be bothering with this in the tree type, just have it be parameterised.
18:15:00 <Darius> s/should/shouldn't/
18:15:21 <andrewc> but if i don't bother with it there, then each time i use the tree type as part of something
18:15:46 <Darius> (sorry Showable data type with an local existential)
18:16:14 <andrewc> [cancel what i was typing]
18:17:22 <andrewc> ok, so i define the type, write a show-like function, but don't tie the two together.
18:18:23 <andrewc> hmmm.  i think i'll sleep on that.  cheers.
18:18:26 <Darius> You can simply derive or instantiate Show.  There's no reason for the tree data type to care whether it can show it's elements or not.
18:20:06 <andrewc> ah.  the constraint is in the instance declaration!
18:20:18 <andrewc> of course.  duh.  that's what i was missing.
18:20:29 <andrewc> ok, that's fine. :o)
18:20:35 <Darius> Yes.  It's not the tree that needs it's parameter showable it's the show function.
18:20:51 <andrewc> cheers.  happy now.  all makes sense....
18:21:14 <andrewc> happy holidays y'all.
18:21:27 <andrewc> \quit
18:21:31 <andrewc> arrgh!
18:22:35 <Cale> http://lists.debian.org/debian-hurd/2003/debian-hurd-200312/msg00037.html
18:23:52 <Cale> bizarre post
19:21:49 <`John> Cale, i think all that ist required is to convert the 50 or so embedded C statements into haskell. or if there is a new _casm_ to replace it in that format.
19:33:24 <`John> that looks like 'foreign import ccall'.
19:37:35 <`John> Chapter 8. Foreign function interface (FFI)#
19:37:37 <`John> Syntactic forms and library functions proposed in earlier versions of the FFI are still supported for backwards compatibility. <--what a crock that is.
19:41:02 <Cale> I don't think that _casm_ was ever proposed though - I may be wrong. I think it was just a GHC thing.
19:43:58 <`John> Cale, that quote was taken from the 6.2 specific manual.
19:44:26 <Cale> *shrug* I don't know then.
20:00:36 <Darius> `John: FFI in that phrase refers to the FFI Addendum, it makes no mention about preserving backwards compatibility for GHC specific FFI functions.
20:02:44 <`John> well it's not clear.
20:13:34 <Darius> How is "GHC diverges from the Addendum in the following ways:" not clear?  Furthermore, the latest mention of _casm_ in the GHC User Guide seems to be in 4.06.
20:14:35 <`John> thats clear.
20:14:49 <`John> which url did you find that in?
20:15:29 <`John> nevermind. :(
20:19:55 <Cale> hmm...
20:22:09 <Cale> `John: is hopengl perhaps included with the ghc 6.2 source distribution?
20:27:14 <Cale> yeah, `John - look at the ghc source tree - ghc-6.2/libraries/OpenGL
20:27:19 <Cale> try compiling that
20:28:18 <Cale> you may have already done so if you've installed ghc 6.2
20:29:08 <`John> #
20:29:09 <`John> Graphics/Rendering/OpenGL.hs:28:
20:29:10 <`John>     Failed to load interface for `Graphics.Rendering.OpenGL.GL':
20:29:27 <`John> -//
20:29:30 <`John> -//Graphics/Rendering/OpenGL.hs:28:
20:29:32 <`John>     Failed to load interface for `Graphics.Rendering.OpenGL.GL':
20:30:36 <Cale> when you ./configure to compile ghc-6.2 - there's a nice looking option --enable-hopengl
20:30:39 <`John> it won't compile and the only documentation is a LICENSE file.
20:31:29 <Cale> have you tried that?
20:31:59 <`John> that for configure?
20:32:03 <`John> not yet.
20:32:03 <Cale> yeah
20:32:11 <Cale> I think that'll do it
20:32:39 <Cale> I'm just configuring/building right now to see if that's what it is.
20:33:15 <Cale> it looks rather promising, as configure went and detected a bunch of stuff wrt opengl
20:37:58 <`John> ok
20:51:34 <`John> on /usr/local/bin/ghc ... stage1/utils/Panic.hi: ./HsVersions.h:82:
20:51:36 <`John>     Failed to load interface for `FastString':
20:51:37 <`John>         Bad interface file: stage1/utils/FastString.hi
20:51:39 <`John>             mismatched interface file versions: expected 6020, found 5041
20:52:18 <Darius> It looks like you need to make clean and rebuild.
20:53:02 <`John> also utils/Panic.lhs:26: same error
20:53:37 <`John> i take note of that , thanks Darius.
21:55:00 <Cale> `John: it certainly does build the OpenGL stuff :)
21:55:39 <`John> great.
21:56:06 <`John> still compiling.
21:56:58 <Cale> I had trouble with free memory linking the base libraries, but managed to clear that up by stopping a couple of servers I was running.
22:05:20 <`John> jesh
22:05:42 <ayrnieu> jesh?
22:05:55 <ayrnieu> Oh, indeed.
22:06:21 <`John> Cale, can you compile native exe's with the need for libraries in ghc on windows and linux?
22:06:50 <`John> Cale, btw are you searching for aliens?
22:06:54 <`John> :P
22:07:06 <`John> s/with/without
22:07:09 <ayrnieu> I've only ever done Haskell program on windows with hugs, for COM programming.
22:07:22 <ayrnieu> also, Haskell programming on windows.
22:08:35 <Cale> what do you mean aliens?
22:09:12 <`John> Cale, ala SETI.
22:09:13 <Cale> you can probably use -static to compile without the need for extra libs
22:09:15 <Cale> ah
22:09:27 <Cale> no, I run folding@home. It seems more practical.
22:09:33 <`John> 'ie multilple serverse'.
22:09:47 <Cale> SETI@home already has more cpu time than they have data.
22:10:19 <Cale> I was running a webserver and a web proxy.
22:10:35 <`John> oh
22:10:36 <`John> i see
22:19:30 <Darius> Wow. They've really (visually) spruced up the arrows page since I was last there.
