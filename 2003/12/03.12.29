02:27:19 * Igloo reads scrollback and concludes John+cale worked it out - I can try to help if not
02:37:34 <Cale> yeah - I hadn't realised that HOpenGL was included with the GHC source package
02:38:14 <Cale> It would probably be good to take those changes and merge them back into the stuff on the HOpenGL page.
02:38:32 <Cale> (since that stuff won't compile anymore)
02:38:41 <Igloo> The tarballs on the HOpenGL page are deprecated AIUI
02:39:00 <Igloo> You should use what ships with GHC/hugs(/nhc98?)
02:39:05 <Cale> right
03:35:27 <ejt> does anyone know who wrote the chess code in haskell-libs ?
04:03:21 <Lunar^> shapr: here?
04:03:59 <andersca> oh shapr is back?
04:09:40 <Lunar^> I don't think so
04:34:08 * shapr bounces
04:34:41 <Lunar^> shapr: hi :)
04:35:06 <shapr> hi Lunar^!
04:35:17 <Lunar^> shapr: Where are you then ?
04:35:26 <shapr> I've returned to Sweden
04:35:38 <Lunar^> Had a nice trip ?
04:35:55 <shapr> I was sick for most of the trip, but the rest was fun!
04:36:00 <Lunar^> :(
04:36:08 <Lunar^> Lille is a cold city
04:37:01 <shapr> I got to compare Lille and Brussels as seen through car windows.
04:37:04 <shapr> and train windows.
04:37:33 <Lunar^> Any news for you darcs repos' ?
04:37:52 <shapr> it's still not up, hopefully this week
04:38:02 <Lunar^> got some new box ?
04:38:07 <shapr> yes, I have the hardware
04:38:25 <Lunar^> What kind ?
04:38:26 <shapr> and it works, just need to install it and move it to the ISP
04:38:40 <shapr> it's Bea's old hardware, it's a Pentium 600
04:38:52 <shapr> but it's much more reliable than the other box I was using
04:39:00 <Lunar^> hope so :)
04:39:00 <shapr> how was your christmas
04:39:02 <shapr> ?
04:39:10 <Lunar^> Not as bad as it could have be
04:39:21 <Lunar^> I really dislike xmas
04:39:21 <shapr> un Joyeux Noël?
04:39:27 <shapr> why is that?
04:39:48 <shapr> I got to try fois gras again, I still don't like it :-)
04:39:50 <Lunar^> Seeing family member that don't know/understand me
04:40:55 <Lunar^> Feeling obliged to give something
04:40:59 <shapr> I got five email addresses from Bea's family who have computers and want to try Linux, so I shall use my small amount of french to tell them more about Mandrake.
04:41:07 <shapr> yah, feeling obliged sucks
04:41:17 <Lunar^> And anyway, I don't like to be told to party
04:41:43 <shapr> it's hard to party without the right peopel
04:42:03 <Lunar^> shapr: The company I'm working for offered me an USB key
04:42:08 <shapr> cool!
04:42:10 <Lunar^> I'm going to put a Flonix on it to make some propaganda
04:42:17 <shapr> heh, neat!
04:42:41 <shapr> are there PCs that can boot from USB now?
04:42:48 <Lunar^> Yes, quite a lot
04:43:11 <Lunar^> I think that all motherboard for 2 years are able to do it
04:43:37 <shapr> how big is the usb key?
04:43:51 <Lunar^> 128 Mb
04:44:17 <Lunar^> That's enough to fit KDE, K3b, Mplayer at least
04:44:38 * shapr looks at flonix docs
04:45:13 <shapr> oh, it has 'webinstall' so you can sort of apt-get new stuff
04:46:07 <shapr> looks great
04:46:21 <Lunar^> yes
04:46:38 <Lunar^> Oh.. I made The Incredible Machine working again :)
04:46:55 <Lunar^> I would love to write a clone in Haskell (or maybe in Clean, games API is nice)
04:47:28 <shapr> I've never played it, though I've seen the box.
04:47:44 <Lunar^> You should, that's a real geek game
04:49:14 <shapr> I have mindrover for linux, that's fun
04:49:14 <Lunar^> dunno that one
04:49:23 <shapr> you get to select a chassis with hover/treads/wheels then add components and then wire them together 
04:49:34 <shapr> and you try to accomplish a certain task that way
04:49:54 <shapr> such as, fastest around the racetrack, or destroy the other vehicles with rockets
04:49:56 <Lunar^> Seems fun
04:50:22 <shapr> it gets a bit tiring to do so much wiring after awhile, I wished for higher order wires :-)
04:50:51 <Lunar^> lol
04:51:07 <Lunar^> It's not free software ?
04:51:13 <shapr> no, it's not
04:51:19 <shapr> Loki sold it
04:51:31 <Lunar^> ok
04:53:09 <Lunar^> shapr: I've just contacted the french guy that made Haskell on the cover 
04:53:18 <shapr> oh cool
04:53:19 <Lunar^> of his newspaper
04:53:31 <shapr> are you starting a Haskell User's Group? :-) 
04:53:43 <shapr> I'd like to start one in Luleå
04:53:57 <Lunar^> He seems interested in what I've done, hope we could meet soon
04:55:08 <Lunar^> shapr: Quite like, because earlier this month I've also met the author of this article : http://developpeur.journaldunet.com/tutoriel/theo/030905theo_langfonction1a.shtml
04:55:48 <shapr> mmm, un programme déclaritif
04:55:57 <shapr> err déclaratif
04:57:07 <shapr> I'll send this url to Beatrice, I'm sure she'll enjoy it
04:57:26 <Lunar^> There's some mistakes
04:57:37 <Lunar^> And it has not enough precise examples
04:58:07 <Lunar^> I tried to convince him to show some practical examples like Parsec or WxHaskell before talking about concepts
04:58:18 <Lunar^> Parsec is really convincing
04:58:32 <shapr> Monades ;-)
04:58:35 * shapr snickers
04:59:05 <shapr> I think of Lemonades, which has the side effects of tasting good.
04:59:14 <Lunar^> lol
04:59:38 <shapr> yes, Parsec is convincing
04:59:39 * ayrnieu feels the 'monad <-> lemonade' associate take rapid hold.
05:00:36 <shapr> I haven't seen Parsec used for parsing binary file formats, I wonder if that would be more convincing.
05:00:50 <Lunar^> urg
05:01:06 <shapr> ayrnieu: how was your Christmas?
05:01:33 <Lunar^> I think something like Parsec would be nice to load binary file, but using Parsec... mhhh... I don't feel it weel
05:01:34 <shapr> Lunar^: I see one mistake, Erlang isn't pure.
05:01:42 <ayrnieu> shapr - boring.  I didn't do anything special or talk to anyone special.  I had 12-hour workdays the night before and the day after.
05:01:42 <Lunar^> yes
05:02:23 <ayrnieu> shapr - how did your go?
05:02:35 <ayrnieu> also, yours.  Sorry, I really should have gone to sleep five hours ago.
05:03:01 <shapr> I went to brussels, then to france, then I got sick and I slept for most of the next three(?) days.
05:03:39 <ayrnieu> oh, sick with what?
05:03:40 <shapr> but I had a lot of fun staring at stone gargoyles and decorative ironwork on buildings.
05:03:47 <shapr> I don't know, some sort of flu I assume.
05:04:13 <shapr> the far north of Sweden is underpopulated and very cold, so flus don't do well here
05:04:44 <shapr> when you leave this frozen cocoon and drop into the wet, drizzly, capital of the European Union...
05:05:18 <shapr> then the germs have their revenge
05:05:41 <ayrnieu> ah.
05:06:31 <shapr> Lunar^: it's good to see that les langages fonctionelles are getting more attention.
05:07:35 <shapr> we need some news on haskell.org
05:07:49 <shapr> like the ghc 6.2 release maybe
05:08:27 <shapr> Lunar^: you feel a better way to parse a binary file?
05:11:29 <ejt> parsec sounds like a good way to me
05:15:55 <Lunar^> Could we say "parse" for binary file ?
05:16:36 <ejt> y, we don't normally because the structure of binary files is so simple
05:16:59 <ejt> s/so/often so/
05:17:23 <Lunar^> Anyway, hope the new IO lib will come quickly
05:17:53 <Lunar^> doing : writeFile filename $ map chr words makes my nervous
05:18:25 <ejt> but parsec can parse any type
05:18:42 <ejt> so you would use words all the way through
05:18:55 <Lunar^> true
05:27:36 <ejt> shapr: I got somewhere with the haskell-libs/chess program over xmas ...
05:27:49 <shapr> cool!
05:27:53 <ejt> http://people.sistina.com/~thornber/haskell/hChess/
05:28:11 <ejt> still v. ugly, but it does search about 2 ply deeper in the same time :)
05:28:24 <ejt> lots more improvements possible
05:29:12 <shapr> when I get the darcs repo back, I'll have to resync everything
05:29:55 <shapr> ejt: so, you decided whether you want cvs commit privs?
05:30:00 <Lunar^> ejt: Next step is an HOpenGL display :)
05:30:08 <shapr> that would be cool!
05:30:31 <shapr> I wonder if there are already open source 3D chess piece models
05:30:46 <Igloo> I'd have thought you could find PD ones
05:31:25 <shapr> hi Igloo! how was Christmas?
05:31:35 <ejt> I was going to get it to work with xboard and fics
05:31:44 <Igloo> Good, all things considered
05:32:34 <ejt> shapr: I think I ought to talk to the original author before I take over cvs, do you have his email addr ?
05:32:54 <shapr> ejt: sure, but I can probably ask him right now, just a moment...
05:34:22 <shapr> <shapr> ejt wants to continue development of your chess code in haskell-libs, but wants to check with you before making any changes..
05:34:22 <shapr> <delYsid> cool, tell him he can go ahead
05:34:40 <ejt> cool, do you use ssh to access cvs ?
05:34:51 <shapr> usually I use darcs, but...
05:35:16 <shapr> yes, sourceforge requires ssh to access cvs
05:35:39 <ejt> so you'll want a public key ?
05:36:04 <shapr> not me, you fill it into a form field on one of the pages
05:36:05 * shapr looks
05:36:15 <shapr> hi delYsid!
05:36:17 <ejt> oh, ok
05:36:19 <Lunar^> http://www.angelfire.com/weird/kingshine/
05:36:26 <delYsid> hi all
05:36:29 <ejt> hi delYsid 
05:36:55 <delYsid> ejt: You're interested in cleanup the mess that is Chess.hs? :)
05:37:11 <Lunar^> http://samba.org/KnightCap/
05:37:22 <shapr> bah, sf.net is down for maintenance
05:37:26 <ejt> delYsid: y, see http://people.sistina.com/~thornber/haskell/hChess/patches
05:38:01 <harsha123> shapr: welcome!
05:38:10 <shapr> hey harsha123 
05:38:18 <harsha123> shapr: how was your france trip? :)
05:38:57 <shapr> just a moment, I gotta do some tech support, I'll bbiab
05:39:02 <delYsid> ejt: THe original code was written by, erm, forgot the name, but I have a mail on file...
05:39:08 <delYsid> Its the author of HAT iirc.
05:39:17 <ejt> !
05:39:18 <delYsid> Anyway, he sent me a BSDish license for the code he wrote.
05:39:54 <delYsid> It was a puzzle-solver used to test HAT.
05:40:06 <delYsid> I made it into a playable game, and added castling
05:40:17 <ejt> k
05:40:27 <ejt> it's running somewhat faster now
05:40:56 <ejt> I'm mainly concentrating on the 'test' program, which I've renamed to 'solve'
05:41:11 <delYsid> ah, the EPD thingy?
05:41:15 <ejt> y
05:41:19 <delYsid> oh, btw, I wrot the EPD code too
05:41:42 <ejt> v. good idea, I wish I'd thought of it when writing C chess progs in the past
05:42:00 <delYsid> there are a hell of a lot of .epd files on the net.
05:42:08 <delYsid> I've got about 6000 positions to test it with...
05:42:18 <delYsid> still, the main problem of the code is that it is so slow.
05:42:20 <ejt> y, I found the one you're using 'brilliant ways to check mate'
05:42:38 <ejt> I'm working on that
05:42:51 <delYsid> oh, more background info, the ABEval.hs was written by me, although somewhat stolen from the "Why FUnctional Programming" paper
05:42:51 <ejt> the main problem was that the alphabeta search was v. broken
05:43:07 <ejt> alphabeta.hs that is
05:43:23 <ejt> which looks like it came from somewhere else
05:43:54 <ejt> I put a new one into ABEval.hs
05:46:50 <delYsid> oh sorry, right, ment alphabeta.hs
05:47:00 <delYsid> I basically stripped that code out of the paper mentioned above
05:47:06 <delYsid> It was written in Gofer there I think
05:47:21 <delYsid> and I changed it such that minimize/maximize can overload...
05:47:34 <ejt> y, I think the problem was that it just relied on the Ord properties of the position
05:47:56 <ejt> and was for some reason evaluating far too many positions
05:48:10 <ejt> I got suspicious when move ordering didn't help
05:48:39 <delYsid> ah, cool if you found a bug...
05:48:53 <delYsid> well, I was (and am still) quite a Haskell newbie...
05:49:22 <ejt> I think you're ahead of me ... alphabeta.hs was nicely abstracted
05:49:48 <delYsid> yeah, but mainly because I wanted to have it reuseable for other two-player games.
05:50:04 <delYsid> YOu just need a scoring and player function, and can write new game engines...
05:50:11 <ejt> I'd like to support other chess variants like omega chess
05:50:26 <ejt> so I'll need to do something similar
05:50:58 <ejt> the next big speed improvement will come when the transposition table is added to the state monad in the ab search
05:51:13 <ejt> but I have no idea how to write an efficient cache in haskell
05:52:12 <delYsid> where will you maintain your tree?
05:52:52 <ejt> on that website, and I'll sync cvs at suitable points
05:53:19 <delYsid> cool, when can I expect the first sync? :)
05:54:17 <ejt> sometime this week, depends how busy work is
05:55:10 <delYsid> cool, I am looking forward to it 
05:55:40 <delYsid> thanks for polishing this up, I sort of lost motivation after I tried several optimisations and nothing worked.
05:56:02 <ejt> it's a fun problem :)  help would be appreciated ;)
05:56:28 <delYsid> as soon as your code is in CVS, I'll try and play around a bit again...
05:56:38 <ejt> k, thx
05:57:31 <Lunar^> Maybe I could find the time to check if I could add some HOpenGL in this
05:58:11 <delYsid> yeah, as long as the pure text-mode interface stays, would be cool...
05:58:22 * delYsid is text-mode dependent.
05:59:58 <ejt> make the text interface match with the xboard protocol would be the fastest way to get a gui
06:00:09 <ejt> and it would let different versions play each other
06:00:49 <shapr> any pointers to mounting USB sticks in Linux? I'm getting a generic scsi device but I can't figure out how to actually mount it?
06:01:12 <Lunar^> shapr: modprobe sd_*
06:01:34 <Lunar^> shapr: Then you get an sda
06:03:04 <delYsid> right, xboard protocol compatibility would rock
06:03:40 <Lunar^> ejt: Yes.. but trying to use HOpenGL is cool
06:04:21 <ejt> true, so write an xboard clone ;)
06:06:14 <Lunar^> Why not ? :)
06:06:19 <delYsid> anyway, you cant imagine the satisfactory feeling I had when I first played a full game against that thing, and, lost! :)
06:07:11 <Lunar^> hehe
06:08:19 <ejt> delYsid: y, it's good when your creation beats you
06:08:39 <delYsid> yeah :)
06:08:51 <delYsid> but it was mostly human error, I was underestimating its strength
06:09:01 <delYsid> these days, its very simple to beat it :)
06:09:11 <delYsid> since the move-depth is really too small to be useful
06:09:20 <delYsid> s/move/search/
06:09:20 <ejt> I play with depth 6 now
06:09:39 <delYsid> oh, so three full moves, cool!
06:10:15 <ejt> I reckon we can get that up to 8-10
06:10:33 <delYsid> that would be more than I ever hoped
06:11:42 <delYsid> for real performance, we'd need to move away from symbolic boards, but then, the code wouldnt be so nice to read...
06:12:13 <ejt> but could we compile a symbolic rep. to a more compact one ?
06:12:33 <delYsid> hmm,probably
06:12:39 <delYsid> I had code for a bitboard once.
06:12:54 <delYsid> but I think I threw it aay, since I could have really written it in C at that point
06:12:58 <ejt> at this point it's the algs. that are holding us back, not the eval speed
06:13:16 <Igloo> You could have an abstract interface and a pair of modules, one nice and the other fast
06:13:17 <delYsid> not really
06:13:18 <ejt> I think it's doing ~40,000 nodes/second ATM
06:13:23 <delYsid> all the good algs depend on bit boards
06:13:40 <delYsid> and then, you loose nice notation...
06:13:50 <ejt> no, what we should concentrate on at the moment is searching fewer positions
06:14:18 <ejt> ie. transposition table, iterative deepening, move ordering, MTD search
06:14:21 <delYsid> I am not sure
06:14:55 <delYsid> hmm, sounds as if you know more than I researched back then.
06:15:04 <ejt> pretend you're developing on 10 year old hardware, those old programs are a lot stronger than hChess
06:15:07 <delYsid> anyway, gotta jump in that hot bath now, before it cools down
06:15:12 <ejt> k, bye
06:38:34 <TripleDES> hi
06:40:04 <ejt> hello
06:44:04 <shapr> ahem
06:50:15 <shapr> wow, I can opt-in to receive donations from other sf.net users.
06:50:56 <ejt> that doesn't mean you'll get them
06:51:57 <shapr> I know :-)
06:52:20 <shapr> wow, haskell-libs is nearly two years old
06:58:45 <delYsid> re
06:58:51 <shapr> y0
06:59:36 <Lunar^> @hello
06:59:36 <lambdabot> Hello world. 
07:06:41 <delYsid> ejt: heh, I did find out myself that #15 is a no go months ago...
07:52:24 <shapr> hi lummox 
07:52:27 <lummox> hi
07:53:17 <shapr> looking for Haskell info?
07:53:28 <lummox> not atm =)
07:54:03 <shapr> ok
07:54:44 <lummox> now i have to learn english vocabulary for is school is mor eimportant ^^
07:55:01 <lummox> -is
07:55:14 <lummox> for school which is more important
07:55:59 <lummox> english makes me crazy
07:56:14 <shapr> other languages make me crazy
08:16:43 <andersca> hej shapr
08:17:18 <shapr> hej andersca 
08:27:37 * harsha123 is back
09:37:39 <ham[mel]> hiho
09:38:03 <ham[mel]> anyone familiar with process algebra?
10:34:31 <ham[mel]> bk
12:36:59 <ejt> anyone around ?
12:37:43 <tic> ney
12:38:25 <ejt> I'm using a state monad in a function that recurses over a tree, and I'm finding that the stack is consuming the world
12:38:39 <ejt> is this a tail recusion problem, or a more general prob ?
14:08:50 <`John> hello. I did a make install on ghc's hopengl. now if I try run a hs by typing 'ghc Lines.hs' i get:Lines.hs:12:
14:08:52 <`John>     Failed to load interface for `GL':
14:10:12 <Igloo> Try Graphics.Rendering.OpenGL.GL
14:12:00 <`John> in ghci I get :Prelude> Graphics.Rendering.OpenGL.GL
14:12:02 <`John> <interactive>:1:
14:12:03 <`John>     Data constructor not in scope: `Graphics.Rendering.OpenGL.GL'
14:12:37 <Igloo> I mean change the import GL to import that
14:12:51 <`John> oh
14:13:44 <`John> ok now it only pukes on GLU.
14:14:29 <`John> if I do the same to GLU I get: Lines.hs:17: Variable not in scope: `beginEnd'
14:15:00 <Igloo> It sounds like Lines.hs is designed for an old version
14:16:34 <Igloo> If you just want an example that should work, try http://urchin.earth.li/~ian/cube/
14:17:45 <`John> with that I get : Cube.o: In function `__stginit_Main_':
14:17:47 <`John> Cube.o(.text+0x2f): undefined reference to `__stginit_GraphicsziUIziGLUT_'
14:17:49 <`John> Cube.o(.text+0x39): undefined reference to `__stginit_GraphicsziRenderingziOpenGLziGLziCapability_'
14:18:05 <`John> what's the way to tell if I have glut installed?
14:18:09 <Cale> it's not getting linked correctly
14:18:50 <Igloo> Try adding "-package GLUT" to the command line
14:19:10 <Cale> I was about to look for that :)
14:19:36 <Igloo> I'm fairly sure it shouldn't be needed to be given explicitly, though
14:19:42 <`John> only thing I get with that is: compilation IS NOT required.
14:21:28 <Igloo> It didn't link it?
14:22:02 <`John> hehe. oh I have to recompile ghc?
14:22:18 <`John> ghc/hopengl
14:22:31 <Igloo> You've lost me
14:22:39 <Igloo> What did you type and what did it say?
14:23:08 <Cale> `John: you recompiled ghc with the --enable-hopengl switch right?
14:23:24 <`John> if I type:"ghc -package GLUT Cube.hs" i get 'compilation IS NOT required'
14:23:29 <`John> Cale, correct.
14:24:02 <Igloo> I'm sure it should say "Linking...". Anyway, has it made an executable?
14:24:17 <Igloo> (may be called a.out (what OS are you using?))
14:24:57 <`John> oh hey that works.
14:25:02 <`John> spinning cube.
14:25:12 <`John> thank you.
14:26:12 <`John> though it look like the persepctive transform isn't proper.
14:26:15 <`John> sorta wavey.
14:26:36 <Igloo> It's orthonormal not perspective
14:26:47 <`John> ah
14:27:18 <Igloo> If you develop from there you probably also need to put the matrix mode back to modelview - I'll fix it up in the next few days probably
14:29:38 <`John> that's weird no begin or end?
14:30:05 <Igloo> Look at preservingMatrix (or similar)
14:30:20 <Igloo> Oh, sorry, I'm getting confused
14:31:17 <Igloo> I don't think you need being/end if you can just pass something a value of type IO ()
14:32:23 <`John> i ask because the the demonstrations have it.
14:32:36 <Igloo> Which demonstrations?
14:33:32 <`John> probably an earlier version of hopengl. i recall seeing it in haskell code somewhere.
14:34:04 <`John> what files does that final a.out need for distribution?
14:34:52 <Igloo> Just whatever OpenGL libraries are needed for whatever OS it is
14:35:17 <`John> that's it, just glut and GL?
14:35:47 <Igloo> AFAIK, yes
14:36:11 <`John> that's good.
14:37:16 <`John> hehe no wonder 860k for a cube.
14:37:31 <`John> that's still better then dependency hell though.
14:38:31 <Igloo> strip might make it smaller
14:38:52 <Igloo> Hello world is pretty big with today's Haskell compilers, though
14:40:28 <ayrnieu> You'll get something smaller with nhc98, if you really want to bother.
14:49:10 <`John> which version does ghc come with? I still get Lines.hs:20: Variable not in scope: `beginEnd' with HOpenGL1.0.5 examples.
14:49:48 <Cale> `John: I think it's a newer release than what's on the HOpenGL pages
14:50:21 <Cale> I wonder if there are GHC-supplied docs for HOpenGL
14:53:11 <sex|more> Somebody here?
14:53:33 <Cale> http://www.tfh-berlin.de/~panitz/hopengl/examples/klassen.html -- these are apparently for the new version
14:54:03 <sex|more> Cale: do you already use hugs 2003?
14:54:16 <Cale> I don't really use hugs. I use ghci
14:54:28 <sex|more> Any difference?
14:54:47 <Cale> Nicer error messages and better libraries, I find.
14:55:22 <Cale> though I'll have to have a look at the new hugs to see if it's better than the old one
14:55:27 <sex|more> I see
14:55:38 <sex|more> I tryed new 2003
14:55:46 <sex|more> Ord and chr aren't there anymore
14:56:20 <Cale> are you sure?
14:56:23 <Cale> import Char
14:56:39 <Cale> ord and chr are in the Report
14:56:44 <sex|more> They aren't anymore in the Prelude.hs
14:57:01 <Cale> I don't think they're supposed to be.
14:57:19 <sex|more> I never imported any other library and it worked
14:57:53 <Cale> right, but if you look at the report, it defines ord and chr to be in module Char, and not in the prelude.
14:58:06 <Igloo> The libraries are mostly shared now
14:58:20 <Cale> that's good
14:58:43 <sex|more> Running hugs 2002 with standard prelude no libraries more it works perfectly
14:59:10 <Cale> just put import Char at the top of the module and it will work fine :)
14:59:28 <sex|more> Well, well, I'll try, thx
15:00:11 <`John> still problems with that new link Cale it want's an interface called stateutil.
15:00:25 <Cale> what's the error?
15:01:10 <`John> Tux.hs:4:
15:01:11 <`John>     Failed to load interface for `OrbitPointOfView':
15:01:12 <Cale> oh, one of the examples wants StateUtil?
15:01:13 <`John>         Could not find interface file for `OrbitPointOfView'
15:01:14 <`John>         (use -v to see a list of the files searched for)
15:01:16 <`John> Tux.hs:5:
15:01:17 <`John>     Failed to load interface for `StateUtil':
15:01:19 <`John>         Could not find interface file for `StateUtil'
15:01:20 <`John>         (use -v to see a list of the files searched for)
15:01:53 <Cale> you can download StateUtil.hs from that link
15:02:09 <Cale> as well as OrbitPointOfView
15:02:17 <Cale> the examples go together
15:16:07 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/", "ghc 6.2 is out", "ghc rpms: http://haskell.org/~petersen/rpms/ghc/","HOpenGL tutorial - http://www.tfh-berlin.de/~panitz/hopengl/"]'
15:16:07 --- topic: set by shapr on [Sun Dec 21 10:36:55 2003]
15:52:28 <Cale> `John: yeah, I seem to be having that trouble as well
18:24:07 <Cale> `John: try calling flush after the drawing commands - that seems to work :)
18:31:08 <`John> ah
18:31:10 <`John> danke
18:39:18 <`John> Cale, where exactly did you place it? i still get it even though it's after displayCallBack
18:39:39 <Cale> right after renderPrimitive
18:40:20 <Cale> calling it after setting the displayCallback will make it only occur once.
18:40:30 <Cale> (and too soon)
18:43:40 <`John> yeh
18:43:43 <`John> it works. :)
18:44:03 <`John> i actually had it there before but accidently indented it.
18:45:45 <`John> hehe, now all I have to do is teach myself haskell. :P
18:51:50 <Cale> Yeah, it might be better to start off with simple functions, and then figure out IO and OpenGL
18:52:13 <Cale> there are some nice tutorials
19:33:43 <Cale> "You probably need very often the shape of a teapot. Since this is so elementary a library function is provided for this."
19:34:57 <emu> so you can perform a CG tea ceremony, naturally
19:36:03 <`John> ;)
19:49:10 <`John> The PointsForRendering dependency is killing the compilation of the tutorial provided. hc -package GLUT tig.hs
19:49:12 <`John> tig.o: In function `__stginit_Main_':
19:49:13 <`John> tig.o(.text+0x1b): undefined reference to `__stginit_PointsForRendering_'
19:49:14 <`John> tig.o: In function `Main_main_srt':
19:57:04 <`John> Does HOpengl work on windows?
19:59:19 <Cale> hmake -package GLUT tig.hs
19:59:22 <Cale> ?
20:01:23 <`John> thats not found.
20:03:28 <Cale> then ghc -package GLUT PointsForRendering.hs tig.hs
20:05:06 <`John> compilation IS NOT required
20:05:08 <`John> /usr/local/lib/ghc-6.2/libHSrts.a(Main.o): In function `main':
20:05:09 <`John> Main.o(.text+0xe): undefined reference to `__stginit_ZCMain'
20:06:31 <Cale> hm, try rm *.o *.hi
20:06:35 <Cale> then that again
20:07:58 <`John> compilation IS NOT required
20:07:59 <`John> /usr/local/lib/ghc-6.2/libHSrts.a(Main.o): In function `main':
20:08:01 <`John> Main.o(.text+0xe): undefined reference to `__stginit_ZCMain'
20:11:06 <Cale> are you defining a value for main in one of those files?
20:12:44 <`John> no those are libraries from the examples page. I just ghc'd like you said. however is it a dependency of tig.hs (from the tutorial page).
