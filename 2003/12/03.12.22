01:39:17 <basti_> hi all
04:58:18 <jameson> Darius: Is that what I get with the --enable-hc-boot option to './configure'
04:58:19 <jameson> ?
04:59:53 <Darius> I don't know.  When GHC builds itself, it first builds a stage 1 compiler, then builds itself again producing a stage 2 compiler.
05:00:14 <Darius> You always build a stage 1 compiler.
05:02:42 <jameson> Even when bootstrapping with an existing ghc?
05:02:56 <Darius> Yes.
05:02:59 <jameson> Hmm... that's not really bootstrapping, I guess...
05:03:29 <ayrnieu> that qualifies -- especially when you use linux_compat to have a linux GHC binary compile your OpenBSD GHC for you =)
05:03:41 <jameson> OK, but when I built the compiler (just the 'ghc' subdir) and made 'install', the resulting ghci didn't work.
05:05:59 <Lunar^> jameson: Processor king ?
05:06:03 <Lunar^> s/king/kind
05:06:51 <jameson> Lunar^: DEC Alpha, EV67.
05:07:12 <Lunar^> That could be one of the reason
05:07:24 <Lunar^> s
05:07:31 <jameson> Lunar^: IIRC ghci is broken ATM, but I wanted to see if I could get it to work. Last time I checked, ghci started up but died with a fatal error.
05:07:43 <jameson> (6.0.1)
05:08:12 <jameson> Did they add a check for that somewhere? (I couldn't find one, but, then again, the code base is pretty huge...)
05:10:16 <Lunar^> dunno
05:10:33 <Lunar^> You search through cvs mailling-list archive
05:13:39 <Lunar^> You could search sorry
06:52:49 <Igloo> SyntaxNinja?
08:14:49 <TripleDES> hi
08:16:11 <shapr> y0
08:39:26 <shapr> whee!
08:39:58 <harsha123> shapr: hello 
08:56:31 <shapr> hello harsha123 
09:23:25 <harsha123> shapr: am not able to get vm.. workin dunno why. all i did was what the tutorial advised.. :-(
09:29:47 <harsha123> xb
10:20:15 <shapr> @arr
10:20:15 <lambdabot> Ahoy mateys
10:20:22 <shapr> @arr
10:20:22 <lambdabot> This is the END for you, you gutter-crawling cur!
10:20:45 <shapr> @arr
10:20:45 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
10:21:23 <Igloo> How's it going, Shae?
10:22:00 <shapr> Igloo: preparing for our flight tomorrow morning
10:22:36 <Igloo> Oh? To the US?
10:22:52 <Igloo> Or, err, Finland?
10:22:53 <shapr> nah, Belgium and France
10:22:58 <shapr> and then back again
10:23:07 <shapr> I can nearly walk to Finland :-)
10:23:10 <Igloo> Hmm, not visiting either home then? OAIC?
10:23:25 <shapr> Bea's father's home
10:23:41 <Igloo> Did you meet her in Finland?
10:24:06 <shapr> I met Bea on ICQ
10:24:43 <shapr> I was living in Seattle, she was living in Finland
10:25:01 <Igloo> That's OK then  :-)
10:26:35 <shapr> Bea's father is in Lille
10:40:55 <shapr> We have some flight layovers, so I'll have my TaPL book handy.
10:41:18 <shapr> I think I'll take Analysis Patterns also, I've learned some neat stuff from that one.
10:41:34 <shapr> I'm tempted to bring the Category Theory book that SyntaxNinja is reading, but I can't seem to get started on it.
10:43:17 <SyntaxNinja> shapr: why not?
10:43:48 <shapr> I don't see how to apply it.
10:43:58 <SyntaxNinja> ahh. well, that remains to be seen.
10:44:16 <shapr> TaPL is great because I *know* I'm working up to HM,System F,System E
10:44:25 <shapr> I even see the beginnings of that very early in the book.
10:49:58 <shapr> @arr
10:49:58 <lambdabot> Yeh scurvy dog...
10:51:27 <tero> hi. I was wondering if any 'serious' applications using database have been developed with Haskell.. as I might consider using Haskell in one particular project
10:51:42 <shapr> what do you consider serious?
10:51:54 <shapr> lambdabot was using a postgresql lib for @fact for awhile
10:52:00 <shapr> though it's not using it right now
10:52:39 <tero> a serious application is developed by a company for example 
10:53:07 <shapr> oh
10:53:24 <shapr> I think Seth Kurtzberg(sp?) may have done that
10:53:45 <shapr> I think his company wrote their own database backend, and I know he switched to Haskell for some things.
10:54:03 <tero> dang.. I suppose their backend is quite proprietary
10:54:19 <shapr> no, it's GPL
10:54:21 <shapr> http://www.cql.com/
10:54:37 <tero> whoa. thanks, I'll check it out
10:55:04 <shapr> I don't know if he switched any of the database itself to Haskell
10:55:28 <shapr> anyways, HToolkit.sf.net has bindings for postgresql, mysql, and odbc
10:55:40 <shapr> but it's a straight up imperative wrapper
10:56:00 <shapr> HaskellDB by Daan Leijen is very spiffy, it uses set theory operations, but it currently requires Hugs and ODBC and Win32
10:56:33 <shapr> I've heard talk about wxDatabase bindings, but I don't whether they're real or vaporware
10:56:47 <shapr> you can probably find out by looking around on wxHaskell.sf.net
10:57:50 <shapr> I've seen a database binding that used QForeign(?) or something close, but I could never get it to build
10:58:28 <shapr> for my personal experience, I've only used the postgresql bindings in the HToolkit cvs tree, and then only on debian/unstable
10:58:30 <tero> mysql-hs, HaSQL and libpq binding do not seem to be ready for production
11:01:05 <shapr> anyways, I'm off to france for eight days, if you have more questions before then, other people here can probably help you.
11:01:18 <tero> shapr: okay, thanks and have a nice trip
11:01:27 <shapr> thanks :-)
11:01:40 * shapr forsvinner
11:19:43 <harsha123> good journey shapr 
11:19:49 <harsha123> happy holidays too
11:21:56 <harsha123> bye all
11:22:08 * harsha123 needs some sleep
11:29:13 <tero> hsql seems to work but I would really have use for some example code :) "Fail: Unknown exception"
11:41:04 <tero> figured it out...
13:10:57 <maihem> Is there a type that acts a bit like an array but has infinite bounds given a function to construct each new element? I intend to have a continuum of IORef to act like an infinite tape memory as in a turing machine.
13:11:31 <Smerdyakov> Does acting like an array include constant time subscripting?
13:11:57 <maihem> yes, but the elements will never be "updated", I will use modifyIORef
13:12:29 <Smerdyakov> Beats me, then.
13:13:10 <maihem> heh, I will think about how to implement it. perhaps a double ended list... now how to do that... <thinks>
13:13:39 <maihem> oh, wait, no constant time subscripting.
13:13:48 <maihem> no, I don't need that after all :)
13:16:59 <maihem> no, I ony need it to act like a doubly linked list :) nowhere near constant time subscripting. I just need constant time "next" and "previous". But how to acheive that in haskell :(
13:17:53 <Smerdyakov> This should be pretty clear how to do.
13:18:02 <Smerdyakov> Lists can be used easily.
13:18:24 <maihem> umm, let me think (I still have a somewhat imperitive mind). Clunk, Clunk, Clunk
13:18:55 <Smerdyakov> You aren't forced to use just a single list to get what you want. :-)
13:20:10 <maihem> ah-ha! thanks, I can have two [a], and an a. to move to prev I take the head of one and use : to put it on the head of the other :)
13:20:11 <maihem> thx
13:20:26 <maihem> easy
13:21:02 <maihem> haskell is so strange to my pre-conceived notions of information processing
13:23:13 <maihem> data Mem a = Mem [a] a [a]
13:23:30 <maihem> previouses, current, nexts
13:23:45 <Smerdyakov> "Previouses." Nice new word.
13:23:50 <maihem> heh
13:56:58 <Smerdyakov> opet, I have read that book, and it was pretty good.
13:58:00 <opet> hey
13:58:02 <opet> cool :)
17:26:53 <`John> hello. how is opengl for haskell?
17:27:06 <ayrnieu> take a look at HOpenGL
17:32:10 <`John> great thanks. 
20:02:18 <`John> anyone else having trouble compiling ghc? : ./utils/genprimopcode/genprimopcode --data-decl          < prelude/primops.txt > primop-data-decl.hs-incl
20:02:20 <`John> make[2]: *** [primop-data-decl.hs-incl] Error 139
20:04:04 <SyntaxLaptop> `John: no clue.  are you sure you need to compile it?
20:04:41 <ayrnieu> John - I've always had trouble compiling GHC.  I advise that you not try to compile it directly, and instead let a scripted system like Gentoo portage or BSD ports (or NetBSD pkgsrc) handle it.
20:04:54 <SyntaxLaptop> or debuild!!
20:05:15 <ayrnieu> Syntax - oh, has Debian caught up with the times?
20:05:37 <SyntaxLaptop> ayrnieu: well, it's not a source distro, but you can always build a package like this:
20:05:43 <SyntaxLaptop> apt-get source packagename
20:05:52 <SyntaxLaptop> apt-get build-dep packagename #downloads and installs build depends
20:05:55 <SyntaxLaptop> cd package-verison
20:05:56 <SyntaxLaptop> debuild
20:06:11 <ayrnieu> Nifty.
20:06:25 <SyntaxLaptop> that's why Debian can have auto-builders that create binaries for various platforms
20:06:36 <ayrnieu> If I didn't like OpenBSD so much, I might've gone over to Debian.
20:06:37 <SyntaxLaptop> so I upload a source packages and the auto-builders create the binaries
20:08:11 <SyntaxLaptop> I like it.  I was using OpenBSD for a while, but none of my friends knew how to use it, so I switched to Debian.  I really wanted to learn one system well, so I stick with it.
20:08:22 <SyntaxLaptop> anyway, I gotta go to bed. 'night all
20:22:40 <`John> where can I get glibc2.3 for my distibution?? :)  /usr/local/lib/ghc-6.2/ghc-6.2: /lib/i686/libc.so.6: version `GLIBC_2.3' not found (required by /usr/local/lib/ghc-6.2/ghc-6.2)
20:23:28 <ayrnieu> John - what distribution do you use?
20:23:51 <`John> suse
20:25:15 <ayrnieu> I wouldn't know.
21:04:42 <`John> great
