00:52:41 <Lunar^> shapr: I've written a POP3 client myself
00:52:55 <Lunar^> shapr: That's not exactly an hard protocol
02:33:58 <lambdabot> Lunar^: aren't you a smarty pants!
02:37:39 <TripleDES> morning
02:39:56 <lambdabot> g'mornin' TripleDES
03:29:52 <earthy> !yawn
04:12:15 <ham[home]> hiho
04:12:22 <ham[home]> shapr are you there?
04:24:29 * shapr awakens
04:24:35 <shapr> good morning #haskell!
04:24:37 <ham[home]> :)
04:24:44 <ham[home]> good morning shapr ;)
04:24:53 <ham[home]> shapr have you got a bit time?
04:24:58 <shapr> Lunar^: you have the source for your pop3 client handy?
04:25:07 <shapr> ham[home]: I can spare a few minutes
04:25:09 <kaninchen> good afternoon :)
04:25:32 <ham[home]> shapr i told you about that graep thing that graph thing of mine do you remember?
04:25:44 <shapr> yes
04:25:52 <ham[home]> i try to construct a stack with it
04:26:16 <ham[home]> and i now wonder how i should do that
04:26:32 <ham[home]> i thoght that i could habe a channel where i hold all stacks in the graph
04:26:45 <ham[home]> that is each stack is a listener in that channel
04:27:01 <Lunar^> shapr: It's very rough
04:27:09 <shapr> Lunar^: is it in Haskell?
04:27:16 <Lunar^> shapr: yes
04:27:20 <Lunar^> shapr: I'm sending it by mail
04:27:23 <shapr> Lunar^: yay!
04:27:50 <ham[home]> and if i want to push/pop then i use something like pop: stackID and push: stackID element
04:28:17 <ham[home]> but if i want to construct a new stack i would have to do something of which i dont know if its ok in categories
04:28:26 <ham[home]> namely adding an arrow
04:29:20 <ham[home]> that is i implement stacks as endomorphisms over that channel 
04:29:22 <shapr> if you want to talk category theory, you need to ask someone else :-)
04:29:52 <ham[home]> shapr how would you implement a stack?
04:30:04 <ham[home]> with monads?
04:30:52 <shapr> use a state monad?
04:31:22 <ham[home]> hmm then i will have to see how i can integrate that into my thingy
04:31:40 <shapr> where is the rest of your graep thing?
04:32:03 <ham[home]> my linux machine crashed i cant upload what i did so far
04:32:08 <shapr> I've looked at codemages, but it's not listed on the page
04:32:10 <shapr> oh, that sucks
04:32:28 <ham[home]> but the basic thing isnt that hard
04:32:53 <ham[home]> i want to include automats
04:32:55 <ham[home]> +a
04:33:05 <ham[home]> neural nets, petri nets
04:33:19 <ham[home]> and the basics like a stack and such
04:33:32 <Lunar^> shapr: sent
04:33:39 <shapr> Lunar^: thanks
04:33:54 <ham[home]> i thought that a stack could be implemented as a function over the graph itself by adding a new listener
04:34:38 <Lunar^> It works for what I need, anyway
04:35:36 <shapr> ham[home]: I'll think about that, but I don't completely understand what your describing. it makes sense that a stack is a graph, if you think of a stack as a doubly linked list for example
04:35:52 <shapr> arg "you're"
04:35:57 <shapr> my english is leaving me.
04:36:03 <ham[home]> shapr i want a stack to be a function
04:36:52 <ham[home]> pop(f({1,...,n})) -> n
04:37:18 <shapr> ok
04:37:28 <ham[home]> push(f({1,...,n-1}, elem) -> f({1,...,n})
04:37:42 <shapr> that sounds a bit like a state monad
04:38:12 <ham[home]> ah ok then i will try to iinclude monads directly and get rid of all that stuff ;)
04:39:53 <shapr> Lunar^: this is spiffy! did you write the mail+fax app for commercial purposes?
04:40:07 <Lunar^> shapr: sure :)
04:40:27 <shapr> is the sourcecode owned by the company you wrote it for?
04:40:39 <Lunar^> shapr: PDFlib's binding is part of the same project
04:40:44 <shapr> yah, I see
04:40:47 <shapr> very nifty
04:40:53 <Lunar^> recofax.com
04:41:20 <Lunar^> It's still under dev. for the front-end, but the back-end is finished now
04:41:28 <shapr> nice backend
04:41:34 <shapr> how long did it take you to write this?
04:41:44 <Lunar^> shapr: That's only a small part of the whole thing
04:41:50 <shapr> yah, I see the other imports
04:41:56 <Lunar^> shapr: dunno... 1 month of work I think
04:42:10 <Lunar^> shapr: Maybe more... it was not at full time
04:42:32 <shapr> did you use Tomasz' HsDNS library for this also?
04:42:46 <shapr> or did you write your own DNS?
04:42:56 <Lunar^> nope HsDNS rules :)
04:43:02 <shapr> yah, I agree
04:43:15 <Lunar^> It's really hard to handle, but it works perfectly
05:09:22 <shapr> hi `john 
05:19:11 <phubuh> hey shapr
05:20:35 <shapr> hi phubuh, what's up?
05:22:14 <phubuh> not much.  I just came back from bowling in phys ed.  my wrist hurts
05:45:52 <`john> hello shapr.
05:57:03 <shapr> hiya
06:49:03 <shapr> shapr :: Music -> Coffee -> Code
06:50:06 <phubuh> phubuh :: Coke -> Maybe Code
06:50:17 * shapr laughs
06:50:41 <shapr> when it comes to Caffeine, I have a dysfunctional dependency.
06:51:13 <norpan>     Couldn't match `Inspiration' against `Disturbance'
06:51:13 <norpan>         Expected type: Inspiration
06:51:13 <norpan>         Inferred type: Disturbance
06:51:19 * shapr snickers
06:51:36 <shapr> this sounds like a worthy addition to the QuotesPage
06:51:41 <shapr> silly types and error messages
06:53:31 <Darius> hmm, wonders if it should be shapr :: Music -> Coffee -> IO Code, or does providing shapr with the same Music and Coffee produce the same Code.
06:53:45 <vegai> I wondered about that too
06:54:20 <vegai> but you might argue that two Coffees is never alike
06:54:23 <vegai> s/is/are/
06:54:55 <phubuh> and you could interpret Music as the emotional reactions instead of the sound waves
06:55:13 <vegai> it all boils down to "is shapr pure?"
06:55:56 <ham[home]> bk
06:58:14 <shapr> vegai: probably not
07:01:41 <Darius> oh well, zipWithM shapr (repeat (Music "Jimmy Eat World" "Praise Chorus")) (iterate brewCoffee initCoffee)
07:01:46 <shapr> yay!
07:02:08 <shapr> though today it's The Distillers on repeate
07:11:53 <aleator> Anyone happened to write dxf reader in haskell?
07:12:08 * aleator is in lazy mood.
07:15:15 <phubuh> bach's second violin concerto in A minor is so wonderful
07:15:55 <shapr> today is a punk rock day for me.
07:16:04 <shapr> there's no way bach!
07:20:07 <phubuh> i'm in a Bach -> Ataxx -> IO () kind of mood today
07:20:43 <Darius> Ack! phubuh is dynamically typed
07:21:02 <shapr> if I had time to play, I'd work on that pop3/smtp server.
07:21:10 <phubuh> no way, I just recompile myself from time to time
07:35:40 * SamB doesn't get jokes that are written in Haskell easily
08:09:23 * shapr receives his +2 Throwing Lambda Of Doom
08:09:51 <shapr> I apply it to get head abnormal form, of course.
08:24:41 <Igloo> Ooo, looks like Wolfgang is adding registerised PPC support to GHC
08:29:12 <shapr> yay
08:29:24 <shapr> what's the difference?
08:30:44 <Igloo> Between registerised an unregisterised? A factor of 2 in speed IIRC
08:30:58 <Igloo> Oh, I should have said PPC/Linux
08:43:19 * SamB wonders if there are any dynamic optimizers for Haskell, even though that seems silly in the context of such strict typing
08:44:33 <Igloo> optimistic evaluation sort of does that
08:44:55 <Lor> How is dynamic optimization relevant to typing?
08:46:22 <SamB> Lor: well, at first thought you might think it was only relevant with dynamic typing
08:46:40 <Lor> Er?
08:46:48 <SamB> might, mind you.
08:47:04 <Lor> I don't see how it is at all related to typing issues. Provided we are talking about the same thing.
08:47:07 <Smerdyakov> I don't think anyone who understands the basic concepts would think that. :)
08:47:35 <Lor> (I'm talking about run-time profiling and adjusting some performance characteristics accordingly, perhaps even recompiling stuff on the fly)
08:47:44 <SamB> I don't think its really all that related either
08:49:49 <SamB> I'm talking about not compiling the general case until its needed. something like psyco in python (only of course in Haskell it wouldn't break code ever)
08:55:11 <shapr> Self does that
08:55:38 <shapr> it would be useful in Haskell if you're typeclasses
08:55:39 <Lor> samb, you mean what HotSpot does?
08:55:55 <shapr> where you could compile type-specific instances of a function
08:56:47 <Smerdyakov> Compiling versions of functions for unboxed types of different sizes can be useful.
08:57:06 <Lor> Run-time specialization, hmm...
08:57:18 <SamB> Lor: more like Self's Polymorphic Inline Cache
08:58:04 * SamB wishes he could download stuff without getting totally lagged
08:59:50 <shapr> er, what are the two flavors of unix startup? AT&T sysV, and BSD, yes?
09:00:19 <SamB> shapr: you mean init?
09:00:24 <shapr> yah
09:00:35 <shapr> one uses /etc/init.d/ and /etc/rcN.d/
09:00:43 <shapr> I think that's AT&T sysV init?
09:01:05 * shapr wonders if he's confused
09:01:10 <SamB> thats sysv style, yeah
09:01:29 <SamB> or so says my init manpage
09:01:36 <shapr> oh, too easy
09:01:41 <phubuh> a zygomorphism is anamorphism . catamorphism, yes?
09:03:18 <phubuh> is there a name for a catamorphism . anamorphism?
09:04:06 <Darius> Both anamorphism . catamorphism and catamorphism . anamorphism are hylomorphisms
09:04:36 <phubuh> ah, right.  I suspected that.
09:05:55 <Smerdyakov> cataninetails
09:09:54 <malik> hi
09:10:04 <malik> Darius: you helped me a lot, thanks again :)
09:13:59 <cm> hiho
09:15:30 <Darius> phubuh: A zygomorphism is like a paramorphism but you have an extra function that preprocesses the "extra" value.
09:21:12 <ham[home]> bye
09:21:18 <phubuh> I'll probably get Pierce's _Basic Category Theory for Computer Scientists_ for Christmas :-)
09:22:10 <shapr> any thoughts on writing unit tests for network protocols in Haskell?
09:24:20 <SyntaxNinja> phubuh: have you seen "Conceptual Mathematics, a first introduction to categories" by Lawvere and Schanuel?
09:24:42 <phubuh> nope
09:25:00 <Darius> shapr: It should be pretty straightforward.  You build some packets by hand and make sure that your function produces the right packets given certain packets.
09:25:06 <SyntaxNinja> phubuh: I'm enjoying that book, though I may be a math wimp, I like the way it takes everything from first principals. If Pierce's book is the one I think it is, I found it rather dense.
09:25:13 * SyntaxNinja can't remember who recommended this book,t hough.
09:25:26 <phubuh> it's this one: http://www.amazon.co.uk/exec/obidos/ASIN/0262660717/ref=wl_s_3/ref=cm_mp_wli_/202-1237272-8255855
09:25:29 <Darius> shapr: A more indepth and simpler to use (but not to build) would be to make a network simulator.
09:25:45 <shapr> jao recommended the 'other' category theory book to me
09:26:11 <phubuh> that does have better reviews on amazon.co.uk
09:26:16 <phubuh> well, pierce's doesn't even have any
09:26:21 <SyntaxNinja> yeah, I've seen that one
09:26:37 <phubuh> well, it's not too late to change my wishlist :-)
09:26:38 <SyntaxNinja> I found it too dense for me, but like I said, I'm a bit of a wimp
09:26:53 <SyntaxNinja> phubuh: can you get it out of the library to check it out/ that's what I did.
09:27:13 <phubuh> the libraries here don't carry anything interesting
09:27:17 <SyntaxNinja> l4m3
09:27:23 <shapr> Darius: if I ensure that I can manufacture any protocol state, that's sort of the same thing
09:27:25 <shapr> I think
09:27:28 <SyntaxNinja> I'm off to lunch. ttyol
09:27:49 <phubuh> bye!  thanks for the recommendation
09:27:55 <SyntaxNinja> no problem.
09:27:56 * SyntaxNinja &
09:28:09 <Darius> I'd be interested in someone's opinions on the book by Barr and Wells.
09:28:47 <shapr> oh, I have the same one that SyntaxNinja has
09:28:56 <shapr> but I've only read the first few pages
09:32:51 <Darius> ah, the joy of American Jesus
09:35:15 <shapr> I wonder if there's something that's higher order than a state machine for describing a protocol
09:35:59 <Lor> State machine? Yick.
09:36:10 <shapr> Lor: you know of something better?
09:37:15 <Lor> I didn't say so. That "yick" was just a primitive reaction. :)
09:37:18 <shapr> a protocol spec is similar to a standard parser, if A is input, then B can be input.
09:39:17 <Darius> Deterministic monadic parser combinators in an IO monad.
09:40:30 <shapr> yah
09:49:14 * Darius will have to buy a bass guitar one day.
09:49:43 <shapr> I'd like to make music
09:50:36 <shapr> but I'd be happy with protocols for the moment :-)
09:53:15 * Darius goes back to his current timesink.
09:53:24 <shapr> what's that?
09:53:51 <SamB> how do you do apparantly mutating interlinked structures? like, say, GUIs?
09:56:02 <shapr> for what definition of "do" ?
09:56:22 <Darius> SamB: recursive values or recursive monadic computations or by mutating interlinked structures.
09:56:56 <SamB> Darius: I thought mutating structures was impossible
09:57:30 <shapr> hiya anduril1, thought up some questions?
09:57:42 <Darius> shapr: I'm working on a LVM interpreter which I have been meaning to do for a long time for function marshalling, dynamic loading, and image-based developement purposes.
09:57:56 <shapr> oh, nice!
09:58:08 <shapr> I'm very interested in those same subjects.
09:58:43 <Darius> SamB: I widely used, guaranteed to be accepted in Haskell 2 extension, IO/STRefs gives you mutable refs similar to the ones in the MLs.
09:59:05 <phubuh> LVM?
09:59:20 <Darius> (With the FFI effectively standard, you could roll-your-own refs in Haskell 98 as well)
09:59:23 <shapr> Darius: do you think either yours or Daan's implementation would be a good basis for a HEmacs?
10:00:22 <Darius> As good as any, though obviously Daan's is better in just about all respects at this point.
10:00:32 <SamB> effectively standard FFI? cool. how many other languages with more then one implementation with FFI have that?
10:01:51 <shapr> phubuh: lazy virtual machine, designed by Daan Leijen
10:02:04 <phubuh> aha
10:02:05 <shapr> Helium runs on the LVM
10:02:18 <shapr> amusingly, I think the LVM is a modified OCaml runtime
10:02:37 <phubuh> hee hee
10:02:38 * SamB thinks he forgot to mention the term lazy compilation when talking about dynamic optimization
10:03:32 <Darius> shapr: Daan's implementation is.
10:15:48 <shapr> right
10:32:05 <harsha123> shapr hi
10:32:46 <harsha123> shapr doesn't global-font-lock-mode work for .hs files?
10:33:52 <phubuh> install haskell-mode
10:33:57 * SamB has working haskell font lock with no effort beyond telling apt to install the elisp
10:34:09 <phubuh> likewise, but with emerge :-)
10:34:21 <harsha123> phubuh how do i go about? 
10:34:37 <ibid> haskell-mode has certain deficiencies, though :/
10:34:39 <SamB> harsha123: what dist are you using?
10:34:48 <ibid> (unless they have been recently fixed)
10:34:57 <harsha123> am no debian unstable
10:35:08 <SamB> ibid: yes, its not magical enough ;-)
10:35:17 <harsha123> i use debian-unstable
10:35:40 <phubuh> apt-get install haskell-mode
10:35:49 <harsha123> l :p
10:35:53 <harsha123> Ok 
10:35:55 <SamB> harsha123: apt-get install haskell-mode
10:35:59 <phubuh> :P
10:37:00 <ibid> SamB: it's buggy mainly.  like, a layout keyword in a string literal messes up tabbing
10:37:19 <harsha123> phubuh are you on erc?
10:37:55 <phubuh> I'm in xchat now, actually, but I'm usually in erc
10:41:52 <harsha123> phubuh i just installed erc... how do i start using it? 
10:42:22 <phubuh> M-x erc-select
10:42:23 * Darius watches a squirrel dig for nuts in the snow.
10:42:34 <harsha123> k
10:43:12 <Smerdyakov> harsha123, you could have found that rather easily in the documentation....
10:44:45 <harsha123> Smerdyakov :) Yep, i am reading the documentation.. sorry for that *very* silly question
10:45:43 * cm awaits the snow
10:45:59 <harsha123> Smerdyakov whats up?
10:46:13 <Smerdyakov> Oh yeah!
10:46:46 <harsha123> hmm.. did that sound bad?
10:50:41 <Smerdyakov> No
10:54:48 <harsha123> Smerdyakov anygood ERC tutorial that you know?
10:55:17 <Darius> @define cata \c n l.if null l then n else c (head l) (cata c n (tail l))
10:55:17 <lambdabot> cata defined
10:56:47 <Darius> @define zygo \f c n l.if null l then c (head l) (f (tail l)) (zygo f c n (tail l))
10:56:47 <lambdabot> (line 1, column 71):
10:56:47 <lambdabot> unexpected end of input
10:56:47 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string, "(", operator, simple term or "else"
10:57:07 <Darius> @define zygo \f c n l.if null l then n else c (head l) (f (tail l)) (zygo f c n (tail l))
10:57:07 <lambdabot> zygo defined
10:57:15 <Darius> @define para zygo id
10:57:15 <lambdabot> para defined
10:57:19 <Darius> @define id \x.x
10:57:19 <lambdabot> id defined
12:56:36 <shapr> @yow
12:56:37 <lambdabot> While my BRAINPAN is being refused service in BURGER KING,
12:56:37 <lambdabot>  Jesuit priests are DATING CAREER DIPLOMATS!!
13:02:11 <shapr> hi CrewdenX
13:02:16 <shapr> what's up?
13:02:32 <CrewdenX> shapr: script?
13:03:36 <shapr> you're scripting something?
13:04:32 <shapr> or are you asking if I'm a script?
13:04:46 <CrewdenX> shapr: heh, asking if you were a script.
13:05:02 <CrewdenX> shapr: your name sounds familiar, but i'm not sure that we've spoken.
13:06:24 <shapr> I think it's unlikely that I'm a script, though I get that question regularly.
13:06:53 <shapr> it's entirely possible that we've spoken before.
13:06:53 <Darius> shapr would easily win the "Most Accused for being a Bot" award for #haskell... and probably for freenode.
13:07:16 <shapr> haha
13:07:35 <shapr> all too true, this is not the only channel that accuses me of being a bot
13:09:03 <CrewdenX> shapr: hi =)
13:10:35 <shapr> finally :-)
13:11:09 <shapr> is there an easy way to cast Left to Nothing?
13:12:06 <Darius> either (const Nothing) Just
13:12:07 <shapr> l2n Left = Nothing
13:12:16 <shapr> l2n Right a = Just a
13:12:38 <shapr> Darius: oh, that's much better
13:49:56 <Darius> cool. Pseudonym on space leaks.
13:55:26 <SyntaxNinja> does structural subtyping mean just that if element B is composed of items that are of subset of those which compose A then A is a subtype of B?
14:00:09 <Joachim> Anyone alive here ?
14:00:29 <phubuh> I hope so
14:00:44 <Joachim> Good evening phubuh
14:01:07 <phubuh> you too!
14:01:09 <Joachim> Could you maybe help me with a question about haskell ?
14:01:42 <phubuh> that depends on whether I know the answer
14:01:48 <Joachim> grins
14:02:05 <Joachim> Well I have this small permutation haskell function
14:02:14 <Joachim> functionality is ok 
14:03:50 <Joachim> And I use the function to print some permutations to stdout
14:04:21 <Joachim> The problem is the executable takes quite a lot of memory to compute
14:04:40 <Joachim> And I want to know how to minimise this memory footprint
14:05:10 <phubuh> I suppose your permutation function recurses deeply?
14:05:24 <Joachim> hmm
14:05:27 <Joachim> I hope not 
14:05:53 <phubuh> I mean without considering tail-recursion optimization
14:06:15 <Joachim> max recursion depth sould be (length permutateMeList)
14:06:33 <phubuh> oh.  yeah, that makes sense.  hmm, could you put the code somewhere?
14:06:48 <Joachim> certainly
14:07:02 <Joachim> permutate [] = [[]]
14:07:07 <Joachim> permutate l  = concat $ map permutate' l
14:07:13 <Joachim>   where permutate' e = map (e:) $ permutate $ delete e l
14:07:23 <Joachim> main = (mapM putStrLn) . permutate . (delete '\n') =<< getContents
14:07:36 <Cale> permute, not permutate :)
14:08:39 <Joachim> grins
14:09:07 <phubuh> have you profiled?
14:09:27 <Joachim> well . I only have used trace
14:09:41 <Joachim> permutate l | trace ("permutate " ++ (show l)) False = [[]]
14:10:02 <phubuh> if you're using ghc, compile it with -prof -auto-all, and look at the .prof file execution generates
14:10:06 <SyntaxNinja> btw, there's a function concatMap
14:10:25 <Darius> phubuh: That would just say permutate was taking all the cost
14:10:26 <phubuh> and Monad List (>>=) :-)
14:10:40 <phubuh> Darius, oh :/
14:10:48 <isomer> what's that really neat haskell debugger, again?
14:10:51 <isomer> forgetful....
14:10:53 <phubuh> there are several
14:10:54 <Darius> There are several
14:10:56 <SyntaxNinja> hat, buddah
14:11:02 <Darius> HsDebug, HOOD
14:11:09 <isomer> buddah, that was the one i was thinking of. thanks
14:11:12 <phubuh> GHOOD
14:11:31 <SyntaxNinja> Joachim: I would guess that your 'delete' is rather expensive
14:12:04 <Joachim> any other suggestions
14:12:19 <phubuh> could he liberally sprinkle cost centre annotations all over the place to get better output from -prof?
14:12:20 <SyntaxNinja> oh, memory is your complaint?
14:12:47 <Joachim> yes
14:13:02 <Joachim> I am just wondering where its using all up the stuff
14:13:04 <Darius> phubuh: Technically, but there isn't too much question where the problem is.
14:13:27 <phubuh> Darius, indeed -- I was mostly curious
14:14:23 <phubuh> wow, haskell's FFI is a refreshing change from objective caml's
14:16:46 <traulitada> hey there! I'm having this error message with a "hello world network/ghc program @ mac os x 10.3
14:16:48 <traulitada> Fail: does not exist
14:16:54 <traulitada> oops
14:17:03 <traulitada> Action: getServiceByName
14:17:08 <traulitada> Reason: no such service entry
14:17:15 <traulitada> any clues?
14:18:23 <phubuh> the service name you passed to getServiceByName isn't bound in /etc/services
14:18:59 <Darius> Joachim: The reason it takes so much memory is that it needs almost all the permutations done before it can print the first.
14:19:05 <traulitada> thank you phubuh. 
14:20:06 <Joachim> umm no
14:20:11 <Joachim> I checked with trace
14:20:23 <Joachim> let me recheck
14:21:06 <Darius> What's trace supposed to do?  You are building the list of permutations column by column but forcing them row by row.
14:23:12 <rt> is there some obvious place to find a reasonable amount of haskell programs to read over and to develop some idea of proper Haskell style?
14:23:51 <phubuh> most of http://www.haskell.org/libraries/ is written in Haskell
14:24:13 <phubuh> as well as GHC
14:24:42 * rt is at long last trying to write real programs in Haskell rather than just reading about Haskell.
14:25:08 <phubuh> and http://www.haskell.org/practice.html, of course
14:26:20 <phubuh> and lambdabot, but scannedinavian.org seems rather down at the moment
14:32:47 <Joachim> Darius: I do not understand your comment
14:33:15 <Joachim> I have reenabled trace and I get a nice interleaved output with computation tracing and IO
14:33:31 <Joachim> echo "123" | ./main-permute
14:33:37 <Joachim> permute "123"
14:33:41 <Joachim> permute "23"
14:33:46 <Joachim> permute "3"
14:33:50 <Joachim> permute ""
14:33:50 <Joachim> 123
14:33:55 <Joachim> permute "2"
14:33:55 <Joachim> permute ""
14:34:03 <Joachim> 132
14:34:03 <Joachim> permute "13"
14:34:13 <Joachim> permute "3"
14:34:14 <Joachim> permute ""
14:34:14 <Joachim> 213
14:34:19 <Joachim> permute "1"
14:34:19 <Joachim> permute ""
14:34:19 <Joachim> 231
14:34:25 <Joachim> permute "12"
14:34:25 <Joachim> permute "2"
14:34:25 <Joachim> permute ""
14:34:40 <Joachim> 312
14:34:40 <Joachim> permute "1"
14:34:40 <Joachim> permute ""
14:34:43 <Joachim> 321
14:34:50 <Joachim> .
14:34:52 <Joachim> EOF
14:37:50 <Darius> trace affects the order of operation.  At any rate, the algorithm as written will require at least N^2 space, as you hold onto the original list until the last batch of permutations, then onto (delete e l), then onto (delete e' (delete e l)), etc.
14:55:45 * isomer is away: nap time
15:02:32 <Joachim> Darius: how about this ?
15:02:41 <Joachim> permute' p l | length l == length p = [p]
15:02:48 <Joachim>              | otherwise            = concat $ map permute'' l
15:02:48 <Joachim>   where permute'' e | e `elem` p = []
15:02:57 <Joachim>                     | otherwise  = permute' (e:p) l
15:02:57 <Joachim> permute l = permute' [] l
15:04:47 <phubuh> Forbidden
15:04:48 <phubuh> You don't have permission to access /greencard/downloads/greencard-latest.ps.gz on this server.
15:04:48 <phubuh> Additionally, a 403 Forbidden error was encountered while trying to use an ErrorDocument to handle the request.
15:04:49 <phubuh> Apache/2.0.40 Server at haskell.org Port 80
15:04:51 <phubuh> oops!
15:05:10 <Joachim> grinsel
15:05:15 <Darius> Joachim: How much memory was it taking on what size input?
15:05:21 <Joachim> Well someone too strict with the permissions
15:05:54 <Darius> (and on a side note, an obvious easy optimization is that the first permutation of l is l)
15:06:13 * SamB wonders if there are facilities to do file input without monads, then realizes that other programs could be doing things to files...
15:07:06 <Joachim> Darius: echo "123456789" | ./main-permute   > /dev/null
15:07:06 <Joachim> Stack space overflow: current size 1048576 bytes.
15:07:06 <Joachim> Use `+RTS -Ksize' to increase it.
15:07:47 <Joachim> I think the compiler is simply not smart enough to discard the generated permutations after printing them
15:07:51 <Darius> Joachim: A stack overflow is something different from running out of memory.
15:08:42 <Darius> That was the error you got with your original program?
15:09:10 <Joachim> Well the Stack limit has been reached, I could increase it but wats the point It shouldn't require more then 1MB Stack 
15:09:23 <Joachim> Same error yes 
15:15:09 <shapr> rt: there's also HaskellStyle on the wiki
15:19:19 <Darius> Joachim: How long did it take to overflow?
15:22:02 <Joachim> 20 sec and the generated output is 866kb
15:22:40 <Joachim> main = (mapM putStrLn) . permute . (delete '\n') =<< getContents
15:24:21 <Darius> does it overflow on "12345678"?
15:25:26 <Joachim> nop
15:25:30 <Joachim> nopr
15:26:01 <Joachim> no it doesn't overflow on "12345678"
15:27:34 <Darius> Joachim: Then I guess I'll just have to wait.
15:32:14 <Darius> Do you know what number it stopped on?
15:36:21 <Joachim> 168795423
15:37:00 <Joachim> beware msb is the rightmost number
15:37:03 <Darius> You compiled it with optimizations?
15:37:10 <Joachim> Umm no
15:37:19 <Joachim> How do I do it
15:37:35 <phubuh> pass -O to GHC
15:38:23 <Darius> How much memory and what processor do you have? (out of curiosity)
15:38:58 <Darius> (though, it's probably because I'm running it in GHCi uncompiled or optimized, but still...)
15:39:05 <Joachim> [joachim@debian-server haskell-stuff]$ ghc -O -c Permutation.hs
15:39:05 <Joachim> [joachim@debian-server haskell-stuff]$ ghc -O main-permute.hs  Permutation.hs -o main-permute
15:39:30 <Joachim> cat /proc/cpuinfo
15:39:30 <Joachim> processor       : 0
15:39:30 <Joachim> vendor_id       : AuthenticAMD
15:39:30 <Joachim> cpu family      : 5
15:39:30 <Joachim> model           : 8
15:39:30 <Joachim> model name      : AMD-K6(tm) 3D processor
15:39:38 <Joachim> stepping        : 12
15:39:38 <Joachim> cpu MHz         : 400.915
15:39:38 <Joachim> cache size      : 64 KB
15:40:28 <Darius> Ah, I know what it probably is.
15:40:34 <Lor> Whee. I have the same, overclocked to 450.
15:40:56 <Darius> AMD K-6 400 here too.
15:41:27 <Darius> It doesn't like being overclocked because it's on a fairly ancient motherboard.
15:41:29 <Lor> How much do you have memory?
15:41:49 <Joachim> 64MB
15:41:53 <Darius> Same
15:42:01 <Lor> (Ancient? I have an Asus P55T2P4. The manual claims that the highest supported processor is a P150. :)
15:42:15 <Joachim> Same
15:42:29 <Lor> All right, I have 96.
15:42:32 <Darius> (Lor: My K6 is using an adapter.  The motherboard only goes up to 200Mhz if I'm not mistaken)
15:43:00 <shapr> my spare machine is a 600 :-)
15:43:01 <Lor> I just heard it claimed that just about no one uses machines this old any more. Nice to see evidence to the contrary. :)
15:43:27 <Darius> Anyways, I just typed permute into GHCi and then permute "123456789", the overhead is probably text IO.
15:43:38 <shapr> the person who lives with me is trying to persuade me to throw out anything less than 300MHz
15:43:42 <Darius> Though the GC is -very- noticeable.
15:43:47 <shapr> throw away working hardware!
15:43:52 <shapr> blasphemy!
15:44:04 * Darius pulls out his C64 or ancient Mac.
15:44:05 <shapr> g'day Pseudonym 
15:44:18 <Pseudonym> G'day.
15:44:23 <keverets> I keep an 8088 around that I just can't bring myself to get rid of.
15:44:26 <Pseudonym> Darius: Oh, you porrting GHC?
15:44:36 <Joachim> Yeah I have a C64 in the store room to 
15:44:40 <Joachim> too
15:44:53 <Pseudonym> I have a COMX-35.  Now that's obscure.
15:45:31 <keverets> rca 1802 processor... interesting.
15:45:36 <Pseudonym> Yup.
15:45:37 <Joachim> Begann assembler programming on C64 and after that got streight to and x486 talk about performance jump
15:45:37 <shapr> truly, I've never heard of COMX-35
15:45:44 <Pseudonym> One of these days I might build a space probe with it.
15:46:03 <Pseudonym> http://www.old-computers.com/museum/computer.asp?st=1&c=110
15:47:03 <phubuh> I've never done any serious assembly programming, and I always feel inferior for it!
15:47:45 <Darius> phubuh: You are!
15:47:54 <phubuh> ;___;
15:48:14 <phubuh> I did have a C64, but I just wrote -- yech! -- BASIC on it
15:48:21 <Darius> Pseudonym: Waterproof keyboard! Lucky bastard.  I broke one of the keyboards to the Mac with a snowcone.
15:48:26 <Pseudonym> :-)
15:49:00 <Pseudonym> The COMX-35 was complete crap as micros went, but it did have 16 bit operations and a RISC CPU.
15:49:06 <Pseudonym> And the CPU was radiation-hardened.
15:49:28 * Pseudonym never programmed assembler for it, though
15:50:11 <shapr> phubuh: assembly isn't as thrilling as you might hope.
15:50:19 <shapr> it's a lot like writing C
15:50:32 <Darius> If you program at a high-level it's C with push and pop.
15:50:41 <shapr> I'm trying to think of differences between asm and C
15:50:42 <Darius> But, you can do some crazy fun stuff too.
15:50:56 <shapr> right, asm doesn't have a call stack
15:51:06 <shapr> so it's a lot easier to do continuation based programming
15:51:11 <shapr> well, for some definition of easier
15:51:20 <phubuh> I thought that was the purpose of stack frames
15:52:46 <Pseudonym> C is an abstraction layer on top of PDP-11 assembler.
15:53:01 <Pseudonym> As opposed to BCPL, which is an abstraction layer on top of PDP-7 assembler.
15:53:30 <Lor> Nice to have that cleared out.
15:53:45 <Pseudonym> shapr: Interesting you mention that.  I just read a Mercury paper where they translated Mercury to CPS high-level X.
15:53:49 <Pseudonym> s/X/C/
15:55:16 <Pseudonym> For commit operations, they had to use setjmp()/longjmp().
15:55:21 <Joachim> Ok bedtime for me.
15:55:39 <Joachim> Its 1 o'clock here 
15:56:52 <Joachim> O yeah thanks for all the help
15:56:59 <Darius> It's still going...
15:57:08 <Joachim> bye Darius
15:57:17 <Joachim> maybe tomorrow
15:58:57 <Darius> assembly level implementation of iterators (in 16-bit x86 asm) http://webster.cs.ucr.edu/Page_asm/ArtofAssembly/ch12/CH12-6.html#HEADING6-1
15:59:14 <Darius> though layout is messed up in Firebird.
16:26:29 <Darius> look at that garbage collector go!
18:37:01 <nokm> hi anybody knows what kind of recursivity is that?
18:37:20 <shapr> huh?
18:37:33 <nokm> someFunc::a->a
18:37:47 <shapr> I don't understand
18:38:03 <nokm> sorry just 1 min
18:38:19 <nokm> im getting into deadlock :P
18:38:45 <nokm> well just that
18:38:53 <nokm> func1::a->a
18:39:05 <nokm> func1 x= func2 x
18:39:12 <nokm> func2::a->a
18:39:19 <nokm> func2 a = func1 a
18:41:45 <nokm> got it?
18:42:20 <shapr> no, I don't understand your question.
18:42:57 <nokm> I mean
18:43:19 <nokm> there is not an explicit recursion as far I can see
18:43:39 <nokm> anyways there is recursion
18:43:41 <shapr> isn't that called mutual recursion?
18:43:48 <nokm> but not a classic recursion 
18:44:03 <nokm> oh perhaps
18:46:28 <nokm> yep you're right ;) thanks 
18:52:27 <Darius> nokm: In Haskell, you can always use equational reasoning laws.  func1 x = func2 x;func2 a = func1 a =(substitute func2 with it's definition)=> func1 x = func1 x
18:58:41 <nokm> mmm yep you mean transivity
18:59:12 <nokm> transitivity 
18:59:38 <nokm> but that's not the point here
19:01:57 <Darius> Then I don't understand what you're asking.  There's a clear denotational and operational reading of the above.
19:05:12 <nokm> I just wrote an useless example just for see waht kind of recursivity was appling
19:05:22 <nokm> just wondering about that
21:27:07 * Pseudonym puts the hawiki front page back... AGAIN
21:28:29 * Pseudonym briefly considers leaving a note to the clever person who "ownz"ed it, but declines
21:28:47 <harsha123> hello Pseudonym !
21:29:01 <Pseudonym> G'day./
21:29:05 <harsha123> its been a long time.. 
21:29:08 <Pseudonym> Indeed.
21:29:17 <Pseudonym> How's things?
21:29:36 <harsha123> pretty good..  and how is everything with you?
21:29:47 <harsha123> whats up?
21:29:48 <Pseudonym> Oh, a bit stressful.
21:29:57 <Pseudonym> W*rking on sorting code.
21:29:59 <harsha123> hmm.. busy hacking?
21:30:00 <Smerdyakov> I tell you.
21:30:05 <Smerdyakov> You kids in The Real World have it easy.
21:30:12 <Smerdyakov> You have no idea how things are out here in Academia.
21:30:19 <Smerdyakov> ;)
21:30:19 <Pseudonym> Yeah, I can imagine.
21:31:10 <Smerdyakov> I mean, here I am proving that such-and-such a theory admits elimination of quantifiers in the strict sense. And I bet you're, what, moving some boxes between piles or something.
21:31:14 <harsha123> Smerdyakov: Well, you made a *choice*!
21:31:16 <harsha123> ;)
21:34:48 <Pseudonym> I really don't get these "Mexican hackers".  What's the point of "ownzing" a wiki page?
21:35:17 <clausen> can you chat to them?
21:35:18 <Pseudonym> It's not like it's hard.
21:35:29 <Pseudonym> They did leave an email address.
21:35:39 <clausen> I used to chat to brazillian script kiddies for fun
21:35:51 <clausen> (good way to learn brazillian slang :)
21:36:19 <Pseudonym> So tell us some Brazilian slang.
21:36:42 <clausen> "puta que pariua" (prostitute that gave birth)
21:36:50 <clausen> (the most offensive thing you can say in pt_BR)
21:36:55 <Pseudonym> Interesting.
21:37:00 <clausen> I like "piranha"
21:37:03 <clausen> and comer
21:37:08 <clausen> comer == have sex
21:37:15 * Pseudonym makes a note
21:37:19 <clausen> (oops... comer means "eat")
21:37:25 <clausen> and is slang for ("have sex")
21:37:35 <clausen> piranha is a fish that eats people...
21:37:41 <clausen> and is also slang for prostitute
21:37:46 <clausen> got to love the imagery :)
21:40:05 <Smerdyakov> Not as much as I love you
21:40:29 <clausen> Smerdyakov: I'm flattered :p
21:40:38 <clausen> Pseudonym: I'm trying to find the economics homepage at rmit
21:40:56 <Pseudonym> clausen: Do they teach economics at RMIT?
21:41:10 * Smerdyakov calls clausen "prostitute that gave blood."
21:41:40 * Pseudonym calls Smerdyakov "fish that eats imagery"
21:41:44 <clausen> Pseudonym: dunno
21:41:59 <harsha123> hey, what are you guys upto?
21:43:10 <clausen> Pseudonym: http://www.bf.rmit.edu.au/Ecofin/workingpapers.html
21:43:23 <clausen> Pseudonym: seems to be some evidence of its existence...
21:43:26 <Pseudonym> OK, guess they do.
21:43:50 <Pseudonym> http://www.rmit.edu.au/browse?SIMID=kfnj8hsobn36z
21:44:45 <harsha123> has anyone programmed elisp?
21:48:07 <Pseudonym> Someone must have.  There's a lot of it around.
21:50:37 <clausen> OMG!
21:50:49 <clausen> The RMIT Economics department doesn't have any subjects in microeconomics
21:51:45 <clausen> (oops, "Prices and Markets" looks like micro)
21:53:11 <Pseudonym> Are you thinking of studing economics somewhere?
21:53:57 <clausen> my research is related to economics
21:54:01 <clausen> I'm hunting for supervisors in economics
21:54:09 <Pseudonym> Ah, OK.
21:54:25 <harsha123> clausen: what kind of research are you doing?
21:54:34 <clausen> harsha123: online reputation systems
21:54:38 <Smerdyakov> Economics is for grunting wannabe alpha males. :D
21:54:53 <clausen> harsha123: http://members.optusnet.com.au/clausen/reputation/rep-cost-attack.pdf
21:55:17 <clausen> Smerdyakov: would you describe Von Neumann as an alpha male? :p
21:55:40 <clausen> (I'm interested in the game theory end of eco...)
21:56:11 <Smerdyakov> I don't know. I've never met him.
21:56:17 <Smerdyakov> And I said _wannabe_ alpha males.
21:56:49 <clausen> ah, good point
21:56:52 <clausen> well, computer science is also
21:57:10 <Smerdyakov> I agree, but it's not so to such an extent.
21:57:41 <clausen> anyway, researchers are all pretty much the same, hehe
21:58:07 <Smerdyakov> Oh, yeah, true, true, I'm all walking down the hall, trading clothes with people, we all wear the same size, etc..
21:58:44 <harsha123> clausen: hmm sounds interesting!
21:59:17 <clausen> Smerdyakov: exactly :p
21:59:26 <Smerdyakov> And then I broke the bank.
21:59:26 <clausen> harsha123: thanks :)
21:59:49 <harsha123> do you sleep Markov chains? :p
22:00:45 <Smerdyakov> Do you produce meaningful English sentences?
22:01:05 <harsha123> Well, what was wrong with that?
22:01:24 <Pseudonym> "Sleep" is now a transitive verb.
22:01:25 <Smerdyakov> "Sleep" does not take a direct objec.
22:01:27 <Smerdyakov> t
22:01:46 <clausen> harsha123: yes, I do
22:01:52 <clausen> Smerdyakov: of course it does
22:01:54 <harsha123> hmm.... Ok
22:02:10 <clausen> "sleep it off"
22:02:12 <harsha123> it was a typo ;)
22:02:27 <Pseudonym> clausen: Actually, that's a compound verb.
22:02:28 <Smerdyakov> clausen, an idiom that breaks the rule
22:02:31 <Pseudonym> "to sleep off"
22:02:52 <Pseudonym> Which is not the same as "to sleep".
22:02:53 <clausen> Smerdyakov: prescriptive linguistics is a wank
22:03:04 <Smerdyakov> I wrote a new automated theorem prover that uses "Pseudonym said it" as an axiom.
22:03:18 <Pseudonym> That's true, because I said everything.
22:03:18 <Smerdyakov> Has 9000% efficiency in key ontologies.
22:03:44 <Pseudonym> I said both A and (not A), though, which makes me an inconsistent system.
22:03:54 <Smerdyakov> clausen, what's prescriptive about this? People doing use "sleep" by itself with a direct object.
22:03:59 <Smerdyakov> s/doing/don't
22:04:17 <clausen> Smerdyakov: hmmm, perhaps "dream" is correct 
22:04:22 <Pseudonym> Aha!  The rule is proven.
22:04:23 <Smerdyakov> Pseudonym, the wise man does not argue with 9000% efficiency.
22:04:31 <Pseudonym> Every grammar flame includes a grammatical mistake.
22:04:43 <clausen> Pseudonym: hehe
22:04:59 <Smerdyakov> Oh puh-lease. I'm not talking about grammar. I'm talking about the ways native English speakers combine words.
22:05:05 <Pseudonym> Smerdyakov: I'm not a wise man, thankfully.
22:05:21 <Pseudonym> harsha123: ARE you a native English speaker?
22:05:29 <harsha123> NOPE!
22:05:32 <Pseudonym> There you go, then.
22:05:42 <harsha123> hehe
22:05:43 <Smerdyakov> harsha123 is as much a native English speaker as I live under the sea and carry my home on my back.
22:06:15 <Pseudonym> So the answer to your original question is: No, he does not produce meaningful English sentences all the time, nor should he be expected to.
22:06:20 <Pseudonym> Pseudonym said it, so there.
22:07:03 <Smerdyakov> Now you're prescribing what I should expect.
22:07:18 <Smerdyakov> The next step will be pogroms and discounts on plastic products.
22:09:09 <Pseudonym> What you (actively) expect is neither here nor there.  This is a question of harshal23's (passive) expectability.
22:09:15 * Pseudonym coins a new word
22:11:03 <Pseudonym> And I'm not sure that "should" counts as a prescription.
22:11:22 <Pseudonym> It certainly isn't in RFC 2119.
22:12:19 <Maddas> Smerdyakov: does that mean you are a snail?
22:12:21 * Maddas blinks
22:12:34 <Pseudonym> Maddas: He didn't say that.
22:13:35 <Pseudonym> He only said that he lives under the sea and carries his home on his back.
22:13:44 <Maddas> Hrm. Okay.
22:13:44 <Pseudonym> All of which is consistent with being human.
22:13:55 <Maddas> Well..
22:14:10 <Pseudonym> Presumably he goes inside to change oxygen cylinders every so often.
22:14:16 <Maddas> if you count The Man From Atlantis as human, sure
22:14:24 <andersca> morning
22:14:25 <Pseudonym> Man == homan
22:14:28 <Pseudonym> human
22:14:31 <Pseudonym> G'day.
22:14:37 <Maddas> Ok.
22:14:56 <Maddas> Smerdyakov: Sorry for thinking you are a snail, then.
22:15:42 <Pseudonym> Unless he is.
22:15:50 <Pseudonym> He didn't rule it out either.
22:18:09 <Maddas> Smerdyakov: If you are a snail, sorry for thinking you are human, if you are human, sorry for thinking you are a snail.
22:18:21 <Maddas> Pseudonym: Now you need to tell me that maybe, being a snail is a complement.
22:18:41 <Pseudonym> Snails don't appear to mind it.
22:18:50 <Pseudonym> I've never met one who complained, anyway.
22:19:08 <Maddas> Pseudonym: You could ask Smerdyakov.
22:19:39 <Pseudonym> Smerdyakov: Regardless of whether or are or are not a snail, do you mind being called a snail?
22:20:49 <Smerdyakov> I've worn a thousand hats.
22:21:03 <Maddas> That makes perfect sense.
22:21:23 <Pseudonym> Do you carry them all on your back?
22:23:08 <Pseudonym> It's turtles all the way down, I tell you.
22:23:29 <Maddas> Pseudonym: Let's not get silly.
22:27:06 * Arnia feels he didn't drink enough at the ball to cope with this conversation
22:27:25 * Pseudonym is perfectly sober
22:27:25 * Arnia gets himself a bottle of vodka
22:27:29 <Pseudonym> That's what's frightening.
22:28:27 <Arnia> Oh my
22:29:58 <Darius> @eval 1012-768
22:30:09 <Pseudonym> lambdabot not here
22:30:15 * Darius shakes fist in rage.
22:35:25 <harsha123> Ok guys..hmm whats wrong with this "Do you play football? "
22:36:56 <Arnia> harsha123: It means something different depending who you ask?
22:37:18 <Arnia> Pseudonym: Does lambdabot have an RDF module?
22:37:47 <harsha123> Arnia: am talking about the grammar
22:38:37 <Arnia> harsha123: Nothing wrong with the grammar to my home-counties british ears
22:38:45 * harsha123 is wondering if he should start this *crap* all over!
22:39:10 <harsha123> Arnia: what about .... "do you sleep math?"
22:39:31 <Arnia> harsha123: Semantic error, not syntactic
22:39:58 <harsha123> Arnia: whats the correct sentence?
22:40:06 <Arnia> harsha123: Actually, when doing glosses and examples in linguistics papers you indicate the two sorts of error by a different flag
22:40:47 <Arnia> harsha123: There is no correct sentence. You can't sleep maths... the action described by sleeping is intransitive for a start :)
22:41:35 <Arnia> You can't apply sleep to a direct object (although you can use a preposition, its in the form of a subordinate clause)
22:42:14 <Pseudonym> Arnia: No idea.
22:42:20 <harsha123> :) 
22:42:42 <Arnia> harsha123: Do I want to know why you're asking this?
22:42:43 <Pseudonym> According to Webster, "play" is both transitive and intransitive.
22:42:59 <Pseudonym> Actually it's two different words.
22:43:09 * Arnia trusts dictionaries less far than he can lob them with a breeze towards himself
22:43:14 <Pseudonym> Unfortunately, I can't ask Oxford at the moment, so Webster will have to do.
22:43:39 <harsha123> Arnia: hmm 'cuase there was a previous discussion on this.. 
22:43:46 <Arnia> I find people put too much store in the veracity of dictionaries :)
22:43:54 <Pseudonym>  First Peace and Silence all disputes control, Then
22:43:55 <Pseudonym>             Order plays the soul.                 --Herbert.
22:44:18 <Pseudonym> Arnia: A well-written dictionary's veracity is unimpeachable.
22:44:29 <Pseudonym> Because dictionaries are compiled from usage.
22:44:39 <Pseudonym> Unless they lie about usage, I suppose.
22:45:14 <Arnia> Pseudonym: Which changes from moment to moment... they are stamp-collecting language rather than setting it in stone like most people believe
22:45:50 <Pseudonym> If dictionaries were setting language in stone, they wouldn't keep publishing the damn things.
22:45:58 <Arnia> Pseudonym: I have issues with the perception of dictionaries as somehow 'the law'.. a perception I feel they try and encourage in order to boost sales
22:46:10 <Pseudonym> No true linguist would ever claim that.
22:46:24 <Pseudonym> And yes, I mean that prescriptively. :-)
22:46:31 <Arnia> Pseudonym: Linguists don't, the populace do.
22:46:47 <Pseudonym> Linguists write dictionaries.  They don't _publish_ them, of course.
22:46:59 <Arnia> Pseudonym: I've had plenty of arguments with friends where they use a dictionary as a religious text almost.
22:47:27 <Pseudonym> Oh, they might have been using the Holy Dictionary.
22:48:10 <Arnia> Pseudonym: Such as one person saying that words can only be categorised according to the OED (he refused to acknowledge determiners as a class of word)
22:48:35 <Pseudonym> I acknowledged determiners as a class of word.
22:48:45 <Pseudonym> It's someone else who wouldn't acknowledge articles.
22:49:39 <Arnia> Pseudonym: I acknowledge them, I just didn't (and don't) see the point in distinguishing them
22:50:05 <Pseudonym> Ah, well, there you go.  If you go around asking what's the point... that's philosophy.
22:50:35 <Pseudonym> Here be dragons.
22:51:15 <Arnia> Pseudonym: But this certain gentleman in Durham had a very classics influenced idea of linguistics that was at odds with my psychologically influenced idea.
22:51:32 <Arnia> Pseudonym: Here be intransitive verbs... much the same thing really
22:52:01 <Arnia> Sorry... tired... Here be ditransitive verbs, much the same thing really
22:52:16 <Pseudonym> Actualy, I do believe that I was disagreeing with Smerdyakov's characterisation of a certain utterance as not being "meaningful English".
22:52:24 <Pseudonym> I suspect that meaning is in the intent.
22:52:46 <Pseudonym> But once again, "meaning" is philosophy.
22:54:19 <Arnia> 'Here be dragons' is meaningful because my brain can take the phrase and extract the conceptual structure. That's all meaningfulness is about really... taking of input media (be that in the form of grunts, text or what have you) and ellucidating the conceptual and spatial structures.
22:55:03 <Pseudonym> That, I suppose, is because we have both subscribed to the social contract that we agree to try to understand each other.
22:55:38 <Pseudonym> When I utter "here be dragons", you agree to try to understand what I mean by that.
22:56:31 <Arnia> Pseudonym: Its an idiom (I believe we've covered this ground many times) and so has a meaning attatched at a level higher than the individual word.
22:57:16 <Pseudonym> Yes, I think I'm sold on that now.  It's a stereotype.
22:57:17 <Arnia> Of course, being Jackendovian, I'm talking 'functional meaning' rather than intentionalist ;)
23:00:00 <Arnia> I think one of the greatest advances in linguistics in the past decade has been the realisation that syntactocentric (or any particular layer-centric) grammar is flawed. Syntactocentricism basically forces meaning to be attached at the word level. Always distrust a model that ignores performance for ivory tower competance ;)
23:01:17 <Arnia> What a wonderfully long and hard to parse word is 'syntactocentricism' ;)
23:15:25 <Arnia> Wow... scared him off
23:16:43 <Arnia> harsha123: That was quick ;)
23:18:36 <harsha123> Arnia: hehe yeah, it was
23:19:20 * Arnia bemoans users and their bug reports
23:19:26 <harsha123> Arnia: am kinda learning how to use ERC... so trying things
23:20:06 <Arnia> :)
23:20:14 * harsha123 thinks the emacswiki is not good for beginners..
23:20:53 <Arnia> Heh... UNIX editor and usability are not concepts that sit easily together
23:21:29 <andersca> :)
23:21:41 <harsha123> yeah. i agree
23:22:06 <harsha123> how do i open another window in erc?
23:22:46 <Pseudonym> Sorry, I'm at w*rk.
23:22:59 <Pseudonym> That's the problem.  I disappear for certain time intervals.
23:23:09 <Arnia> To be honest though, editors are hard to make usable. I currently like the concept of 'micro-editors' where each editor only deals with one sort of content (rather than the current 'all text formats under the sun' idea)
23:23:25 <Arnia> Pseudonym: I thought it was using words like 'syntactocentricism' ;)
23:24:19 <Pseudonym> Personally, I see language as stereotyping.
23:24:27 <Pseudonym> You understand it because you've seen it before.
23:24:34 <Pseudonym> Or something close enough to it.
23:24:49 <Pseudonym> Very Roger Schank.
23:25:00 <Arnia> Kinda disagree ;)
23:25:15 <Pseudonym> Schanck.
23:25:18 <Pseudonym> Not Schank.
23:25:39 * Arnia isn't compus mentis enough to discuss this right now ;)
23:26:19 <Pseudonym> I think the strongest evidence for this is the human's ability to skim.
23:27:21 <Arnia> I will say that I think that definition underdefines language however. It says only the obvious (language is a mapping) and glosses over the functional and neurological modelling of the system.
23:27:36 <Pseudonym> That's true enough.
23:28:50 * Arnia considers #haskell an outpost of linguistic research and discussion ;)
23:29:39 * harsha123 thinks people in #haskell can talk anything under the sun!
23:30:24 <Pseudonym> But not over the sun, or the sun itself.  They're both completely off-limits.
23:30:45 <harsha123> hehehe
23:31:21 <harsha123> limits? don't you guys talk about limits.. you surpass all!
23:31:33 <Pseudonym> There are theoretical limits.
23:31:46 <harsha123> like?
23:32:01 <Pseudonym> Computability, for example.
23:32:21 <harsha123> lets not be materialsitc for sometime
23:32:38 * Arnia takes harsha123 to the limit at infinity
23:32:42 <Arnia> Oooh... he sums to e
23:32:53 <harsha123> :)
23:36:47 <harsha123> Pseudonym: do you remember we talked about Mecca the other day? 
23:37:39 <Pseudonym> Yes.
23:38:06 <harsha123> It was on the National Geogrphic Channel
23:38:16 <Pseudonym> OK
23:38:34 <Pseudonym> So, are we allowed in or not?
23:38:44 <harsha123> it was an amazing documentary.....they even filmed everything inside..
23:38:50 <harsha123> no we are not.. :)
23:39:18 <harsha123> they even got a close up of the Kaba
23:41:28 <Pseudonym> Interesting.
23:42:41 <harsha123> Yes, it was more like a story. 3 families going to the Haj. Their experiences etc etc..
23:47:37 <harsha123> brb.. lunch time
23:47:49 <Pseudonym> Must go home anyway.  Nytol.
