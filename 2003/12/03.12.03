00:25:02 <magr> ahoi
00:42:09 <Lunar^> shapr needs to read this : http://www.newsforge.com/programming/03/12/02/1256211.shtml?tid=25
01:58:50 <earthy> lunar^: now you've gone and depressed me
01:59:01 <Lunar^> earthy: ?
02:09:57 <earthy> that URL you said shapr should read
02:11:54 <Lunar^> earthy: What do you think about it ?
02:12:32 <earthy> it's depressing
02:12:50 <earthy> and somewhat incorrect
02:13:19 <earthy> as software has much *more* of an impact on our daily lives than art does
02:14:02 <earthy> the right analogy would probably be with draughtsmen.
02:14:08 <earthy> and architects.
02:14:57 <earthy> (an architect does the basic design of the houses in a new block, his apprentices do the tweaking for this-here-street and that-there-street)
02:34:03 <Lunar^> Yes
02:34:13 <Lunar^> But I like to say that I'm an artist-programmer
02:34:29 <Lunar^> Programming in Haskell puts a real emphasis on "elegance"
04:03:16 <earthy> true. but good architecture is elegant as well...
05:17:40 <steveh> good morning
06:01:31 <shapr> fooey
06:02:57 <shapr> Lunar^: hey, how do I get GHCiModule to build?
06:02:59 <Lunar^> 09:42 < Lunar^> shapr needs to read this : 
06:02:59 <Lunar^> http://www.newsforge.com/programming/03/12/02/1256211.shtml?tid=25
06:03:08 <shapr> I saw that in the logs, I read the article
06:03:17 <Lunar^> What do you think ?
06:03:24 <shapr> most of the people who replied are clueless, the article is spiffy
06:03:57 <Lunar^> "spiffy" ?
06:04:27 <shapr> it shows quality, and it pleases me
06:04:44 <Lunar^> I really feel that we both fall in this category
06:04:48 <shapr> I don't care if I'm a star programmer or not, I just like it.
06:05:31 <shapr> though lately, I tend to do more sysadmin stuff for fun
06:05:41 <shapr> though I can't now that raven is dead :-/
06:05:55 <Lunar^> shapr: What's your problem with GHCiModule ?
06:06:05 <SyntaxNinja> hey shapr!
06:06:15 <shapr> g'day Ninja Jones!
06:06:28 <shapr> SyntaxNinja: you missed gforge! I had it up and running, and then raven died.
06:06:36 <Lunar^> arg :(
06:07:13 <shapr> Lunar^: I can't get GHCiModule to compile
06:07:26 <shapr> what compile args do you have to give?
06:07:34 <shapr> I added -fffi
06:07:41 <SyntaxNinja> shapr:  :(
06:08:13 <shapr> if all goes well, I'll get another box colo'd this week.
06:09:14 <Lunar^> shapr: strange.. I thought I did send the Makefile
06:09:16 <SyntaxNinja> sucks. what happened to Raven? (I used to have a computer with that name!)
06:09:27 <shapr> seems the drive was corrupted somehow
06:11:00 <Lunar^> GHCiModule.o: GHCiModule.hs Shell.o        ghc $(GHCFLAGS) -c $< -ishell-haskell Shell.o: shell_stub.o Shell.hs        ghc $(GHCFLAGS) -fffi -c Shell.hs shell_stub.o 
06:14:00 <steveh> that article is interesting
06:14:22 <steveh> i remember the ars symposium debate over the GPL and some of that came out
07:03:39 <SyntaxNinja> any gurus have the "Lawvere & Schanuel" category theory book handy for a question?
07:03:59 <shapr> I think I have the other one
07:04:07 <shapr> plus I'm not a guru :-)
07:04:15 <SyntaxNinja> :)
07:04:42 * shaprNinja flips out and kills lambdabot
07:05:05 <SyntaxNinja> I'm trying to figure out how to prove transitivity for isomorphism of mappings. not sure if the question is just for finite sets or for maps in general
07:05:36 <SyntaxNinja> I see you are a ninja too!
07:05:39 * SyntaxNinja flips out and kills
07:05:58 * shaprNinja snickers
07:09:23 * shaprNinja finds old Python code that he actually admires
07:09:54 <andersca> hej ShaprNinja!
07:10:02 * ShaprNinja flips out and kills category theory
07:10:05 <ShaprNinja> hej andersca 
07:11:17 <Darius> SyntaxNinja: The transitivity of isomorphisms?
07:12:30 <SyntaxNinja> Darius: yes
07:14:18 <Darius> I doubt the question is just for finite sets as it's pretty simple to handle using only the laws of isomorphisms.
07:15:06 <Lor> What a fun tool sloccount is. It just told me that my school project is worth $55177.
07:15:33 <Darius> SyntaxNinja: If I'm not mistaken, I think this is the shoe-sock theorem.
07:15:43 <SyntaxNinja> Darius: laws of isomorphism? The only laws we know at this point are reflexive & symmetric.  the exercise says that it comes directly from the associativity and identity laws for ocmposition of maps... i think I might get it in a minute, though.
07:16:36 <Darius> SyntaxNinja: An isomorphism is a pair of morphisms such that, f;g = g;f = id
07:17:18 <SyntaxNinja> Darius: sssh. I think I'm getting it...
07:17:20 <SyntaxNinja> ;)
07:17:43 <Darius> Just think of why it's called the shoe-sock theorem.
07:18:01 <Smerdyakov> Because the inventor was drunk?
07:18:19 <SyntaxNinja> Darius: OK :)
07:18:38 <SyntaxNinja> Darius: the definitino of an isomorphism is called that?
07:18:50 <ShaprNinja> interesting stuff: http://aspn.activestate.com/ASPN/Mail/Message/679408
07:19:39 <Darius> SyntaxNinja: No the transitivity, if I'm not thinking of something else (the name would still fit though).
07:21:24 <ShaprNinja> I want a bookmark extension that grabs the whole page for saving
07:21:59 <Darius> You could save the page and bookmark the local copy.
07:23:18 <ShaprNinja> good idea
07:27:18 <ham[home]> hiho
07:30:49 <Lunar^> shapr: that ninja suit didn't fit you well anyway
07:30:50 <Lunar^> ;)
07:31:05 <shapr> gee, I always thought I looked good in black...
07:31:20 * shapr grins
07:31:33 <Lunar^> hehe
07:39:45 <shapr> I've noticed that first-person shooter nicknames are usually destructive; ravage, savage, doom, killer, etc
07:43:11 * SyntaxNinja meeting &
07:43:19 <TripleDES> hi
07:43:23 <shapr> hiya
08:07:04 <ibid> Lor: ayh?
08:09:43 <Lor> http://www.dwheeler.com/sloccount/sloccount.html
08:10:07 <ibid> sloccount is cool
08:10:20 <shapr> I think it said lambdabot was worth $75k
08:10:34 * shapr tries again
08:10:58 <shapr> oh, it's up to $100k
08:10:59 <ibid> Lor: do you know of a latex package for typesetting formal system fragments ala abadi/cardelli and pierce?
08:11:18 <Lor> pierce has one on his homepage.
08:11:30 <ibid> ahh
08:11:30 <Lor> bcprules.sty
08:11:31 * jameson is confused
08:11:33 <ibid> cool
08:11:43 <shapr> hello confused, I'm shapr :-)
08:11:58 <Lor> For actual type derivations I've experimented with several proof typesetting packages.
08:11:59 <jameson> "let mymap f l = if l == [] then [] else (f $ head l):(mymap f (tail l)) in mymap" : Eq a => (a -> b) -> [a] -> [b]
08:12:03 <jameson> ;-)
08:12:34 <jameson> Good morning shapr! You can call me 'astonished', too, if that helps you relax :-)
08:12:41 * shapr relaxes
08:12:48 * shapr falls out of his chair, snoring quietly
08:12:49 <jameson> Why do ghci and hugs infer this type for the function as defined above?
08:13:03 * jameson pours a bucket of cold coffee over shapr
08:13:10 <Lor> Because it's the right type to infer.
08:13:13 <jameson> You don't need to relax _that_ much ;-)
08:13:13 * shapr bounces off the ceiling!
08:13:18 <kosmikus|away> jameson: what would you expect?
08:13:21 <shapr> yow! I have coffee!
08:13:23 <shapr> but it's cold :-/
08:13:31 * shapr goes off to make warm coffee
08:13:44 <ibid> Lor: that's for the inference rules; how about the two-column floats he uses?
08:13:46 <jameson> I wouldn't expect the 'Eq' requirement on 'a'. I'm never comparing a list element with anything, after all...
08:13:58 <Darius> You use == you need Eq.
08:14:09 <kosmikus> use null then
08:14:11 <Lor> ibid, don't know about those.
08:14:20 <ibid> Lor: ok
08:14:21 <Lor> They're pretty neat, though.
08:14:22 <Darius> or better yet pattern matching
08:14:24 <jameson> Yes, but that's only a requirement for the list.
08:14:28 <Lor> You might mail him and ask if he's willing to make them available.
08:14:38 <ibid> Lor: i might :)
08:14:56 <jameson> Darius: If I actually wanted to implement the function, I would use pattern matching-- I was just exploring a problem with SML, which does the very same thing here.
08:15:11 <jameson> s/problem/interesting fact/
08:15:13 <ibid> (or, for that matter, for the grammar fragments)
08:15:14 <kosmikus> jameson: as I said, you can use "null" to check if a list is empty
08:15:37 <jameson> kosmikus: That does give me the type I expected, yes.
08:15:46 <Lor> ibid, you can see what I've used at http://www.cs.helsinki.fi/u/lealanko/ttjok/
08:15:46 <kosmikus> if you write the program like you do, Haskell only sees that you are comparing two lists with (==), and it does not care if they are empty or not ...
08:16:07 <jameson> But I'm confused as to how a requirement that lists by themselves should be able to satisfy without referring to the type they are parameterised by is propagated to the parameter type...
08:16:39 <earthy> jameson: it isn't.
08:16:40 <jameson> kosmikus: So it falls back to the most general case, which presumably compares lists by making per-element comparisons.
08:16:43 <ibid> Lor: thanks
08:16:56 <kosmikus> yes, that's how equality on lists is defined
08:17:11 <kosmikus> element-wise
08:17:44 <jameson> kosmikus: OK. It makes sense, in a way, as it doesn't really treat algebraic datatypes as "sum" types.
08:17:57 <kosmikus> "instance Eq a => Eq [a] where ..."
08:18:15 <jameson> Thanks for the explanation! :-)
08:18:45 <earthy> but, jameson, what do you consider `requirement that lists by themselves should be able to satisfy'?
08:21:33 <Smerdyakov> jameson, what Haskell does is the ONLY rational thing to do, if we don't want to create a separate type "empty lists."
08:22:30 <ibid> Lor: do you know cyclone? :)
08:22:34 <Lor> Yes.
08:22:37 <ibid> ok
08:22:54 <ibid> just wondering, based on 8.3 final paragraph :)
08:22:55 <Lor> IIRC, it does much more run-time checks than it really ought to.
08:23:14 <Lor> Ah, good point. 
08:23:18 <Smerdyakov> I don't think the language itself imposes any runtime checks.
08:23:25 <Smerdyakov> It's up to the compiler to choose where they need to be.
08:25:31 <Lor> Aagh. "tulevaisuudessa imperatiivisten ohjelmoijien tekijöillä on käytettävissään..."
08:25:38 <Lor> I hadn't noticed that before. :)
08:25:39 <jameson> Smerdyakov, earthy: It makes perfect sense if you compute the types of everything and do the inference by hand. I just didn't see it.
08:31:47 <ibid> Lor: nice :)
08:42:02 <earthy> jameson: ah, you've seen the light. :)
08:43:50 <ibid> Lor: have you tried http://www.tug.org/tex-archive/macros/latex/contrib/semantic/?
08:45:23 <Lor> Hm, looks nice.
08:51:17 <Lor> Looks very nice indeed.
09:17:43 <ben3> hi.  i wonder if "where" can be nested, whether there is a end-like syntax?
09:17:49 <ben3> an
09:18:43 <ibid> sure it can be nested
09:19:55 <ben3> positions xs a = positions_start 1 xs a where positions_start n (x:xs) a = if x==a then n : tail else positions_start tail where tail = (n+1) xs y (NOTE: i want to end the where here, so to put positions_start _ [] _ = [] below the second while block)
09:20:13 <ben3> ah, hard to digest that... i'll use some paste website
09:20:16 <ibid> you should either use layout or { ... ; ... }
09:20:24 <ben3> ah, cheers :-)
09:21:24 <ben3> what you meant by layout? just the curly brackets?
09:22:06 <ibid> indentation
09:22:21 <ibid> layout is one of the first things people are taught about haskell usually
09:23:06 <ben3> very true, suppose i jumped in right at the middle :-)
09:25:16 <ibid> layout: of, where and in start a new block; the indentation of the next token is the indentation of that block; indent less and you close the block
09:25:31 <ben3> neat, indentation's worked well.
09:25:58 <ibid> the indents of nested blocks are remembered in a stack-like fashion
09:26:25 <ben3> coming from c, it would help if we didn't have to ident as well as putting the curly brackets
09:26:37 <ben3> :-)
09:26:48 <ibid> you don't
09:27:04 <ibid> you either put the curly brackets or you indent
09:27:17 <ben3> i meant when programming in c :-)
09:27:21 <ibid> ahh
09:27:37 <ben3> imagine :-)
09:37:23 <shapr> mmm, coffee
09:38:48 <jameson> Is there a way to define functions or types within ghci/hugs outside of 'let' blocks?
09:39:04 <shapr> sure, load a file
09:39:05 <jameson> (except for loading an external file, that is)
09:39:08 <jameson> ;-)
09:39:17 <jameson> (what's a non-external file, anyway?)
09:39:24 <shapr> a string?
09:39:38 <jameson> Good question... what is the definition of a file?
09:39:50 <shapr> [Char] ?
09:40:25 <jameson> That's the definition of a file type in Haskell?
09:40:35 <shapr> no, not really.
09:40:49 <shapr> I think there is a File type
09:41:32 <jameson> Ah, so you were defining an internal file as the contents of the file.
09:41:59 <shapr> sure
09:42:04 <jameson> Er, whatever. I think I got side-tracked 8-)
09:42:47 <ibid> in ghci you can do let f x = x + 1 [RET]
09:43:16 <ibid> that's not exactly a "let block" :)
09:44:19 <jameson> Ah, nice! Thanks :-)
10:37:41 <ham[home]> n8
11:40:24 <cm> hiho
11:40:27 <cm> shaproid :)
11:40:27 <shapr> y0
11:40:35 <shapr> hi cm, what's up?
11:41:01 <cm> not much, toying around with haskell and parsers ;)
11:41:03 <cm> how about you?
11:41:12 <shapr> workin on Zope atm
11:41:28 <cm> (trying happy&parsec)
11:41:35 <shapr> ah, parsec is nifty
11:41:39 <shapr> I haven't used happy
11:41:46 <cm> oh, are you a zope developer? or do you "have to" work with it?
11:42:04 <shapr> most of my income is from building zope sites.
11:42:05 <cm> happy is like yacc for haskell, i think :)
11:42:19 <cm> ah
11:42:37 <cm> never really got to try zope
11:42:41 <shapr> it's nice
11:43:03 <cm> (the company i work for prefers PHP over python..)
11:43:17 <shapr> I would disagree.
11:43:35 <shapr> I'd rather use Haskell, but I haven't gotten around to learning WASH :-/
11:43:47 <cm> oh, zope has a "new" page :)
11:44:07 <cm> read some wash papers, seems like the guy who did it lives about 60 km away from me ;)
11:44:18 <shapr> you know Peter Thiemann?
11:44:18 <cm> (he was from the university of freiburg, IIRC)
11:44:28 <shapr> I don't remember which uni
11:44:29 <cm> no, just living close to freiburg
11:44:37 <shapr> oh
11:45:22 <cm> wash as an apache module seems interesting, so that you don't have the "CGI overhead"
11:45:52 <shapr> I'd like to combine WASH with hws-wp
11:46:30 <cm> i think i remember that someone already has done that, can't point you to an url, though. think it was in one of the papers.
11:46:43 <shapr> I didn't know that.
11:46:48 <shapr> that would be very spiffy.
11:48:13 <cm> maybe thiemann himself
11:48:44 <shapr> cool, I'll check that out after work.
11:50:41 <cm> would also like to do some web stuff with common lisp :)
11:52:14 <shapr> I've been put off by my experiences with the CL user community.
11:52:37 <shapr> but I hope to get around to CL someday.
11:54:21 <cm> the guys in #lisp seem pretty friendly, IMO :) although i'm mostly listening, same as in here
12:14:40 * ayrnieu notes that he constitutes a member of the CL user community.
12:14:52 <Riastradh> BURN HIM!
12:15:17 <shrimpx> haha
12:15:29 <ayrnieu> Ah, you'll have to catch me before I get back to school =)
12:15:49 * Riastradh rushes towards ayrnieu with pitch forks and torches.
12:15:57 <shapr> hi positron 
12:16:40 <shapr> learning Haskell? looking for other users?
12:16:56 <shrimpx> i need a "Stringly Typed" t-shirt
12:17:02 <shrimpx> also Strongly
12:17:12 <Riastradh> http://www.cafeshops.com/skicalc
12:17:20 <shapr> right, get Riastradh's design.
12:17:24 <shrimpx> hah
12:17:31 <Riastradh> (look at the back)
12:18:01 <shrimpx> haha
12:18:03 <shrimpx> awesome
12:18:39 <shapr> I've heard that Lor is doing the System F design
12:18:47 <shapr> and that Lunar^ is doing the System E design with help from sebc
12:19:55 <Lor> Um. I've only moaned about the lack of one, never volunteered to make one. :)
12:20:16 <shapr> I'm doing the Firm Typing design, it includes a stern looking teacher.
12:20:20 * shapr grins
12:20:57 <shapr> personally, I want a Template Haskell t-shirt
12:21:21 <shapr> it has one of the spiffiest logos I've seen in open sourec.
12:21:25 <shapr> er source
12:21:30 <shapr> hello positron, are you awake?
12:22:02 <positron> yes, I am awake
12:22:09 <positron> sorry
12:22:30 <shapr> hi!
12:22:32 <shapr> how are you?
12:22:37 <positron> No, I am just lurking around; I know some Haskell
12:22:49 <positron> fine, thanks
12:23:38 <shapr> Is epsilon self-hosting?
12:23:56 <shapr> hi ben4
12:24:44 <positron> how do you know of epsilon? I'm happy that you are informed, of course :-)
12:25:03 <positron> It's not yet self-hosting, but it will be soon, as soon as I finish epsilonyacc
12:25:07 <shapr> actually, I did /whois positron, read what it said, and have since read some of the epsilon docs.
12:26:19 <shapr> have you read SPJ's papers on implementation of functional languages?
12:26:24 <positron> Of course espilon is still immature in respect to Haskell, Caml or Lisp; in my dreams it should be somewhere in the middle among those three languages
12:26:57 <positron> No; have you got a pointer?
12:27:08 <shapr> um, lemme find one
12:27:23 <shapr> Simon Peyton-Jones is one of the head guys behind the Glasgow Haskell Compiler
12:27:24 <ben4> hi.  "map (3 :) [[1], [2]] ==> [[3,1], [3,2]]" ... i wonder how to do it such that the result would be [[1,3], [2,3]] where 3 is put at the end, rather than front, of each element? i guess that i'd need to define a new function 'put_at_end x xs', but is there a shorter way of doing it?
12:27:36 <positron> I have read several papers, attended some courses, and I am now watching the SICP video lectures; they are relatively basic, but the presentation is wonderful.
12:27:45 <shapr> yah, SICP is nifty.
12:27:53 <ben4> hi shapr
12:27:59 <shapr> http://research.microsoft.com/Users/simonpj/Papers/papers.html
12:28:41 <shapr> ben4: what about (++ [3]) ?
12:29:01 <positron> I surely have skimmed something written by him, but now I don't remember any single paper... Maybe something about GC?
12:29:11 <positron> Bookmarked, thanks.
12:29:19 <shapr> SPJ has written *lots* about implementing FPLs
12:29:30 <ben4> ah, so it can be either end? good... thanks :-) by the way, you've got an ipv6 address, right? ;-)
12:29:40 <shapr> yes, I do.
12:29:48 <shapr> I'm cool. (or something ;-)
12:30:12 <ben4> i don't get the dotted format, it's really cryptic...
12:30:21 <shapr> if you have a public IPv4, you can make ipv6 connections to freenode as well.
12:30:30 <shapr> er, what dotted format? IPv6?
12:30:48 <ben4> [shapr] (~user@3ffe:bc0:8000:0:8000:0:d9d3:cd91)
12:31:10 <positron> Sorry, I need to go now. I will return; goodbye.
12:31:11 <shapr> well, it's my ip address. it's just like 192.168.0.1 except... there are more octets.
12:31:16 <shapr> positron: nice to meet you, cya.
12:31:34 <ben4> oh... :-) anyway, thanks again
12:31:43 <positron> bye shapr
12:33:49 <shapr> ben4: if you're using debian and you have a public IPv4, and ipv6 support is in your kernel, you can do 'apt-get -uf install freenet6' and it should just work.
12:35:38 <ben4> nice... on my list for my next summer's vacation :-)
12:43:24 <shapr> hej phubuh 
12:43:30 <shapr> hej ribbon
12:43:33 <shapr> er..
12:43:34 <shapr> hi ribbon 
12:43:40 <ribbon> hello shapr
12:43:47 <shapr> lemme guess, you're not swedish?
12:43:54 <ribbon> nope
12:44:01 <shapr> figures :-)
12:44:05 <shapr> so, you learning Haskell?
12:44:31 <ribbon> nah - used it pretty seriously a couple of years ago
12:44:41 <shapr> oh, wrote something nifty?
12:44:48 <ribbon> just seeing what happening in the community
12:44:58 <ribbon> wrote a prolog interpreter :)
12:45:03 <shapr> spiffy
12:45:07 <shapr> still have the source online?
12:45:29 <ribbon> I never put it online - I could do, but it's not much to look at
12:47:26 <ribbon> I take it then that you are just starting out?
12:47:43 <jasonw> 204 navi.cs.pdx.edu> which xchat
12:47:43 <jasonw> /pkgs/uns/bin/xchat
12:48:18 <shapr> no, I've been doing Haskell for awhile
12:48:23 <shapr> but I wouldn't call myself an expert.
12:48:33 <shapr> I am interested in collecting Haskell sources for archiving though.
12:48:50 <ribbon> good stuff - wrote anything interesting?
12:49:11 <shapr> I've contributed to an irc 'bot named lambdabot
12:49:32 <shapr> have you seen http://sf.net/projects/haskell-libs/ ?
12:49:39 <shapr> it's sort of a cvs-wiki for #haskell
12:50:04 <ribbon> I'll go take a look now...
12:50:55 <shapr> foo, I've lost a database.
12:51:45 <ribbon> I remember the haskell.org site being very good -- why not contribute to that?
12:52:15 <shapr> contribute what to haskell.org?
12:52:58 <ribbon> Your haskell source collection?
12:54:12 <shapr> oh
12:54:16 <shapr> that's been suggested recently.
12:54:48 <shapr> my only point against it is that I can easily add more members to the sourceforge project
12:55:13 <shapr> so if you wanted to contribute your prolog interpreter, I could add you and you could stick it into cvs
12:55:22 <shapr> or fix something that's already in CVS but wants patching
12:55:55 <shapr> SyntaxNinja had a great idea, install something like sourceforge on haskell.org, then you get the best of both worlds
12:56:58 <shapr> so, I agree with you, and if all goes well, that'll happen soon.
12:57:18 <shapr> anyways, what do you do nowadays? still writing code?
12:58:34 <ribbon> I write C code for a living :(
12:58:41 <shapr> yow.
12:58:46 * ribbon nods
12:58:49 <shapr> Can you use Haskell to generate C-- ? ;-)
12:59:21 <ribbon> Unfortunately there was an existing code base :P
12:59:29 <shapr> hah, that's not excuse!
12:59:33 * shapr gets out the Haskell fanatic costume
12:59:44 <shapr> well, I write Python for a living... so...
13:00:02 <ribbon> Um, my target architecture has piddling amounts of ram and cpu power?
13:00:15 <shapr> less than PalmOS?
13:00:40 <shapr> someone has a working but unreleased nhc98 runtime on PalmOS
13:00:47 <ribbon> It's an 8MB PalmOS device...
13:01:06 <shapr> oh, cool.
13:01:10 <shapr> I have one of those.
13:01:17 <shapr> attached to me at this instant even.
13:01:48 <ribbon> They even come in phones these days :)
13:01:54 <shapr> yah, I've heard that.
13:01:57 <shapr> I think SyntaxNinja has one of those.
13:02:13 <shapr> so what sort of PalmOS app do you work on? or is it NDA'd?
13:02:21 <tic> PalmOS is neat.
13:02:33 <ribbon> sections suck.
13:02:34 <shapr> I use my Python powers to be a webmonkey.
13:02:35 <tic> PalmOS, Python. Wow.
13:02:45 <shapr> I have Pippy installed on my Palm IIIc
13:03:00 <tic> Pippy doesn't really work on my Zire. :/
13:03:01 <ribbon> It's probably NDA, but the short of it is that it involves barcode scanners and GPRS.
13:03:05 <shapr> speaking of which, I should bug those guys, they said they'd release their nhc98 runtime soon.
13:03:15 <shapr> oh, that does sound interesting.
13:03:34 <shapr> I wish Pippy would work with my spiffy keyboard
13:03:45 <ribbon> It becomes less interesting after you work on it awhile ;)
13:03:50 <tic> ribbon, I take it's not comsumer-ish?
13:04:07 <tic> shapr, what keyboard have you got?
13:04:15 <shapr> the foldy one... um...
13:04:19 <tic> I'd really like a high-resolution PalmOS device and a keyboard. Would be super-sweet.
13:04:26 <ribbon> tic: We target a particular industry.
13:04:31 <shapr> the keyboard is immensely cool.
13:04:41 <shapr> I had it at ICFP, lots of people were looking and asking.
13:05:06 <tic> sweet.
13:05:14 <tic> and you have a IIIc, you say.
13:05:18 <shapr> yup
13:05:20 <tic> not too fast though, eh?
13:05:30 <SyntaxNinja> shapr: sadly, they don't make those keyboards for the trio
13:05:43 <shapr> tic: fast enough for typing
13:06:12 <tic> shapr, say, can you change the keymap on 'em?
13:06:20 <shapr> of course! I have dvorak on mine.
13:06:23 <tic> yay!
13:06:29 <tic> because I use svorak .:)
13:06:31 <shapr> I dunno if they svorak though
13:06:36 <tic> well
13:06:37 <andersca> the keyboard is very nice
13:06:43 <shapr> andersca: you have one also?
13:06:45 <tic> andersca, which one do you have?
13:06:50 <andersca> shapr: kinesis ergo elan
13:07:11 <shapr> oh, I have two of those :-)
13:07:15 <shapr> but only one Palm keyboard
13:07:42 * shapr googles for svorak palmos
13:09:21 <tic> andersca, where did you buy yours?
13:09:25 <Lor> quikwriting is nifty.
13:09:30 <tic> shapr, can't you manually create layouts?
13:09:33 <andersca> tic: the internet
13:09:47 <shapr> tic: not that I know of
13:10:02 <shapr> Lor: I scritched the crap out of my graffiti area, so I can't quikwrite :-(
13:10:28 <shapr> here's the keyboard: http://www.thinkoutside.com/
13:11:42 <shapr> oh they have a wireless version!
13:12:31 <tic> andersca, doesn't have åäö on it though, does it?
13:12:45 <andersca> oh sorry, you're talking about palm keyboards
13:12:48 <andersca> tic: my kinesis has Ã¥Ã¤Ã¶
13:13:21 <tic> that came out as UTF-8 here, but I assume that's åäö :)
13:13:27 <tic> andersca, URL for the Kinesis?
13:13:35 <andersca> www.kinesis-ergo.com
13:14:16 <shapr> my kinesis have äåö, but I've remapped it to dvorak anyway.
13:14:19 <tic> but that's  not for Palm, right?
13:14:34 <shapr> oh, you can still type those letters on the palm keyboard
13:14:45 <Cale> Ä
13:14:57 <shapr> they're all alt-something though
13:15:00 <shapr> not terribly convenient
13:15:25 <tic> Dang.
13:15:44 <tic> I want a palm keyboard that has åäö in the correct locations so I can re-map it correctly to Svorak
13:16:43 <shapr> well, I bet we could hexedit it :-)
13:16:49 <tic> yeah, sure.
13:16:59 <tic> but the physical keyboard need to have the correct keys as well.
13:17:06 <tic> :/
13:17:09 <shapr> why?
13:17:22 <tic> shapr, the svorak layout is based on a swedish keyboard.
13:17:40 <tic> http://www.shiar.org/happy/txts/svorakkb.gif
13:17:45 <shapr> I touchtype, so even though my keyboard appears to be qwerty, it's actually dvorak
13:18:02 <shapr> plus, I remap keys on my kinesis on a regular basis, always looking for a better layout.
13:18:06 <tic> hm?
13:18:15 <tic> I touch type as well.
13:18:34 <tic> But as you can see, the keys on the keyboard need to be in specific positions.
13:18:57 <tic> like the < key -- there's no such key on english keyboards.
13:19:09 <Smerdyakov> Is so
13:22:59 <ben4> i wonder what was the best way of learning all about how curried functions work, did you find?
13:24:52 <ben4> ah, google's returned some good ones
13:42:13 <ben4> x : insert n xs ... am i right in assuming that the function application has a higher precedence (sp?) than : ?
13:43:10 <keverets> (:) is a function.
13:43:12 <ben4> that's spelt right :-)
13:43:32 <ben4> ah, um... i thought function application is right associative?
13:44:19 <Darius> prefix function application has highest precedence period
13:44:30 <Smerdyakov> Function application is left associative.
13:44:45 <ben4> sorry, i meant left...
13:44:57 <ben4> Darius: cheers for that
13:45:40 <ben4> so infix application is lower than prefix, right.. thanks
13:48:14 <ben4> is there a table of precedence ordering anywhere? i'm wondering where if/then/else is (pretty low i guess)
13:49:32 <Darius> if then else is syntax and the Report has such a table 
13:55:15 <ben4> a table of precedence levels?
14:00:34 <Darius> Yes
15:39:00 <ribbon> bye, bye
16:32:15 <palomer> hello, does haskell have eval?
16:37:40 <Cale> eval?
16:39:18 <Riastradh> Cale, in Scheme, (eval EXPR ENV) evaluates an S-expression representing Scheme source in the environment ENV.
16:39:28 <Riastradh> (er, and other Lisps)
16:39:57 <Cale> okay
16:40:09 <Riastradh> Haskell doesn't have an eval, as far as I know.
16:40:36 <Riastradh> And it would be a _lot_ harder to implement than in Scheme, with the intrusion of the type system.
16:45:53 <Pseudonym> I suspect that there's less call for it due to Haskell's purity.
16:46:13 <Riastradh> What does purity have to do with it?
16:46:25 <Pseudonym> What's an "environment"?
16:46:31 <emu> if you do not sin, you will remain pure
16:46:59 <Riastradh> A lexical environment representing a mapping from symbols to values.
16:47:07 <emu> ie. not engaging in any questionable side-effect behavior
16:47:24 <Pseudonym> That's what I figured.
16:47:37 <Riastradh> Now, what does purity have to do with it?
16:47:58 <Pseudonym> Because the symbol -> value mapping is fixed at compile time.
16:48:04 <Pseudonym> OK, the actual values might not be.
16:48:12 <Riastradh> ?
16:48:31 <emu> lexical environment values at runtime do pose a challenge to compiler writers
16:48:44 <Pseudonym> Hang on, let me think how to word this.
16:48:44 <Riastradh> I don't understand what that has to do with purity.
16:49:10 <Pseudonym> It's because symbols are write-once.
16:49:15 <Pseudonym> In a pure language.
16:49:19 <Riastradh> So?
16:49:23 * Pseudonym thinks some more
16:49:43 <emu> Eval could be implemented in Haskell
16:49:52 <Riastradh> ENV needn't be mutable.
16:49:55 <Pseudonym> OK, not being a Schemer: Under what circumstances would you use eval?
16:50:21 * emu being a CLer: almost never
16:50:24 <Riastradh> Pseudonym, very rarely.
16:50:55 <Riastradh> The rare circumstances when you would want to use it are when you're actually getting user code to evaluate, which isn't very common.
16:51:02 <Pseudonym> Ah, OK.
16:51:05 <Pseudonym> Gotcha.
16:51:14 <emu> of course, if you're writing an editor, and you want to have your users extend it by writing code...
16:51:24 <Pseudonym> Then no, the Haskell runtime doesn't come with a Haskell interpreter/compiler./
16:51:39 <Pseudonym> That's the right answer, I assume. :-)
16:52:12 <Pseudonym> See, I was thinking that eval was for those situations where you have code already compiled but just want to change its environment.
16:52:27 <Riastradh> ??  What situations would those be?
16:52:38 <Pseudonym> No idea.  That's why I asked.
16:52:38 <palomer> sounds like dynamic scoping to me
16:52:46 <emu> eval accepts an s-expression, not compiled code
16:52:56 <Pseudonym> Right.  That explains everything.
16:53:35 <Riastradh> And I said 'S-expression representing Scheme source' pretty explicitly.
16:53:42 <Riastradh> You're just WRONG!  Oooo!
16:53:54 <palomer> do any haskell interpreters let you evaluate code in your program?
16:53:56 <emu> dynamically bound variables get their values from the runtime environment, not the lexical environment
16:54:22 <palomer> I mean, user code
16:54:39 * palomer is trying to find the easiest way to implement a computer algebra system
16:54:55 <emu> yacas, yet another cas?
16:55:12 <palomer> sounds like a good name
16:55:27 <Riastradh> Just provide a module and tell them to use hugs, because your interactive environment will probably suck a lot more than hugs.
16:56:17 <palomer> me wonders if haskell would be a good user level computer algebra language
16:58:59 <Pseudonym> It seems, intuitively, like it should be.
16:59:23 <Pseudonym> However, LISP and relatives (e.g. Mathematica's built-in language) have had more success there so far thanks to its impure features.
16:59:37 <Pseudonym> getprop and putprop, for example, have been found to be very useful in implementing these things.
17:03:18 <palomer>  erm, you guys are sounding like religious zealots
17:03:54 <palomer> is haskell the one pure language?
17:05:23 <Riastradh> What makes us sound like religious zealots?
17:05:38 <palomer> not you, since you haven't mentioned purity
17:05:55 <palomer> now I feel like an infidel:/
17:06:33 * Arnia is lazy too
17:06:54 <Riastradh> Pseudonym was referring to the fact that mutating a lexical environment is impure, i.e. not purely functional.  I still don't understand why EVAL with the semantics he mentioned would be impure, though.
17:08:30 * Riastradh FORCEs Arnia.
17:11:55 * Riastradh FORCEs his way through the entire Arnia stream infinitely and causes massive memory leaks.
17:11:58 <Riastradh> Take that!
17:12:55 <Arnia> Arrrgh... I'm a simple behaviour, you can't do that to me
17:13:16 <Riastradh> I just did.
17:14:11 * emu notes that Lisp's semantics for mathematics still make it a friendlier language for toplevel arithmetic
17:14:19 <emu> s/mathematics/arithmetics
17:22:01 <ben4> sorry, got disconnected... if someone replied to my inquiry, please could you kindly repeat it.
17:25:13 * Arnia grumbles and applies an error Arrow Transformer on Riastradh
17:29:52 * Riastradh points out that Arnia's heap is so overflowing and his garbage collector is thrashing so badly that he can't allocate anything.
17:32:40 * Arnia maps himself to bottom
17:40:51 <`john> what the word on that paris hilton video? :)
18:10:38 <ayrnieu> palomer - belated, what question do you have about Haskell?
20:36:36 <AliceIcon> hello
20:38:03 <AliceIcon> Is anyone experienced with the ghc network library?
20:38:56 <AliceIcon> I'm looking for some pointers to get my handle operations working right.
22:27:34 <ayrnieu> alice - OK.  What question do you have with it?
22:27:56 <ayrnieu> alice - hint: you'll never get efficient networking with socketToHandle, as the library currently stands.
22:30:01 <ayrnieu> alice - also, find 'exarkun' on this network and ask if you can and ask him to send you the small set of Haskell examples that I sent him.  Or you could ask your question.
22:36:39 <ayrnieu> eh, hello.  Please don't message me -- I tend not to notice it.
22:36:55 <AliceIcon> hello
22:37:43 <AliceIcon> ok so I've got a timer driven recieve function that checks an open handle to a socket for incoming data, parsing it back up if so
22:37:48 <AliceIcon> that works fine
22:37:58 <ayrnieu> Smerdy - yes.
22:38:10 <ayrnieu> OK.
22:38:39 <AliceIcon> the problem is my send function
22:38:57 <AliceIcon> I'm using hPutStr
22:39:04 <ayrnieu> OK.
22:39:14 <AliceIcon> and it works if I am sending data to a socket on my own machine
22:39:17 <ayrnieu> Also, as I said, socketToHandle does not lend itself to efficient networking.
22:39:23 <AliceIcon> but when I try it across the network, nothing gets there
22:39:37 <AliceIcon> hmm
22:39:55 <AliceIcon> does sendTo work better?
22:40:00 <ayrnieu> I don't really understand your question, sorry.
22:40:14 <ayrnieu> eh, IIRC sendTo deals in UDP
22:40:23 <AliceIcon> that's what I was guessing
22:40:35 <AliceIcon> and I'd rather not use UDP
22:40:48 <ayrnieu> The functions that work on Socket perform better than functions that work on Handle -- because Handles do not support socket-friendly buffering.
22:40:49 <AliceIcon> so what works besides socketToHandle
22:41:12 <ayrnieu> Alice - well, ask exarkun for that Haskell-examples tarball I sent him.
22:41:21 <AliceIcon> ok I'll do that. Thank you
22:41:25 <Smerdyakov> ayrnieu, why can't you send it now?
22:43:17 <ayrnieu> Smerdy - code has not historically lead a happy life on my harddrive, I say with sadness.
22:43:54 <ayrnieu> But I've reached the peak of stability with this system, I think.  Also, I don't have that code anymore.  Find exarkun.
22:45:06 <AliceIcon> he hasn't responded yet. So what you're saying is that I need to use the socket library
22:46:24 <ayrnieu> The Socket library, yes, but you may find that you want Network interfaces, minus the extranneous socketToHandle -- exarkun has a NetUtil that implements these.
22:46:38 <AliceIcon> oh that would be great
22:46:47 <ayrnieu> but please don't take this as my answer to your question -- I don't understand your question, yet.
22:46:56 <AliceIcon> I queryed him - is there a better way to find him?
22:47:36 <ayrnieu> Last I knew, he lived actively on #Python
22:49:07 <AliceIcon> thank you. I think your answer helped me - knowing that socketToHandle is a bad method will allow me to rewrite using socket operations, even if I can't get in contact with exarkun
22:53:18 <ayrnieu> I mainly had problems with buffering for Handles.  NoBuffering works like (BlockBuffering 1) -- meaning that a hPutStr of "foo" does a 'send' on the Socket twice, once for "f" and once for "oo".  (BlockBuffering n) where n>1 gives you blocking (eww) sockets.  LineBuffering, your only other option, clearly doesn't work in the general case.
22:54:15 <ayrnieu> For fast networking, you ideally want to build your strings and then send them all at once.  Handle buffering doesn't give you enough flexibility, I find -- though I guess that you could use (BlockBuffering None) and hFlush the Handle.
22:55:06 <ayrnieu> well, not just fast networking, but fast IO in general.
23:47:54 <AliceIcon> 12«11ayrnieu12» do you know a way of getting around the timeout on accept?
23:48:21 <ayrnieu> alice - please don't ever do that again.  Also, what timeout?
23:48:42 <AliceIcon> sorry, I won't
23:49:07 <ayrnieu> Actually, it looks pretty cute over here -- maybe not so pretty for everyone.
23:49:27 <ayrnieu> but I just like cyan.
23:49:32 <AliceIcon> I'm calling accept on a socket that may or may not have someone connecting to it
23:49:36 <AliceIcon> :-)
23:49:50 <ayrnieu> Yes.  So what?
23:50:00 <AliceIcon> and if someone else tries to connect to it within a few seconds, everything works. But beyond that, it just locks the program
23:50:20 <AliceIcon> so I assume there must be some sort of timeout on accept, but I can't find documentation about the specifics of accept
23:50:22 <ayrnieu> What do you mean, locks the program?  Obviously your programs waits for the connection to happen.
23:50:45 <ayrnieu> Or do you mean that after a few seconds your program won't respond to a connection?
23:50:55 <AliceIcon> yes
23:51:35 <ayrnieu> I've never encountered that, sorry.
23:51:53 <ayrnieu> Sounds like a bug.
23:52:09 <AliceIcon> so theoretically, accept should wait forever until a connection is made
23:52:14 <ayrnieu> Yes.
23:52:43 <AliceIcon> I see
23:52:46 <AliceIcon> thank you
23:53:13 <ayrnieu> Take a look at 'man 2 accept'
23:53:55 <AliceIcon> oh that makes sense.
23:58:00 <ayrnieu> Also, it seems that I actually do have that file.  Also, yahoo thinks of my own message to exarkun as spam.  Interesting.
23:58:26 <ayrnieu> Would you like it, then?
