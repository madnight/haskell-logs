02:42:05 <esap> Hmm.. can you refer to a type variable bound in an class declaration within a constraint in the interface of that class? Or do you a new variable for that? class X h b where { f :: (Monad h) => h b -> h Integer }, what does the 'h' refer to? Is there two of them or just one?
02:45:31 <Lor> Two, I think.
02:45:55 <Lor> Not sure, though.
02:46:47 <esap> Hmm.. for that example, I actually get "All of the type variables in the constraint 'Monad h' are already in scope'. Hmm.. I've never got that kind of error before ;-)
02:48:28 <esap> I guess it means the correct answer is 'one'.
02:50:31 <Lor> Seems like you'd be better off putting f into a subclass with the Monah h constraint.
02:52:07 <esap> The actual situation actually the constraint has two arguments: class Alternatives f s where { split :: (Adjunction s p) => s (f a) -> s (Rec f, p a) } I think this is valid interface, but it was not clear to me what it means.
02:53:15 <esap> In particular, since I bind s and p together with functional dependencies.
04:02:57 <blacksheep> hey! anyone interested in some simple OpenGL bindings: http://rpmcruz.planetaclix.pt/haskell-gl/
04:05:55 <blacksheep> do you guys know that kdevelop 3 will support haskell?
04:25:55 * esap just implemented a function with type:  (Nat b -> c) -> (a -> Maybe b) -> Sequence a -> Sequence c
05:21:58 <blacksheep> hey! anyone interested in some simple OpenGL bindings: http://rpmcruz.planetaclix.pt/haskell-gl/
06:44:56 <esap> Is there some good reason why you can't partially apply a type constructor defined with a type synonym?
06:46:19 <Lor> Yes.
06:46:30 <Lor> Then you would essentially have lambda for types.
06:46:45 <Lor> After that deciding type equivalence becomes rather tricky.
06:47:20 <esap> ok.
06:47:57 <esap> Sounds like a good reason. Is it possible to restrict that lambda somehow to make it work?
06:48:08 <Lor> Yes.
06:48:25 <Lor> I think the problem is that you can have freely recursive types.
06:48:47 <Lor> So a type reduction might never terminate in a normal form.
06:48:50 <Lor> Or something. Beats me.
06:49:03 <Lor> There are many calculi with type lambda and decidable type equivalence.
06:49:14 <Lor> The type language is then a normalizing calculus, eg. system f.
06:51:51 * esap tried to use Rec F, where F was a type synonym :-)
06:53:06 <Lor> Just use newtypes. The manual wrapping and unwrapping that you have to do provides the compiler with the necassary hints to decide type equalities.
06:54:13 <esap> yea, I am. But I would not like to have both newtype and ordinary type version of many types. And for some cases, it's actually more convenient to use a type synonym (e.g. type Nat = Rec Maybe)
06:55:44 <esap> and type NatWithElem a = Rec (Either a)
06:56:40 <esap> But then I lose some useful properties, like being able to use Rec on the type :-)
06:56:41 <Lor> Uh. Isn't that equivalent to Either a Nat?
06:57:19 <esap> lor: no, it's equivalent to (a,Nat) I think.
06:58:09 <esap> lor: because In (Right (In (Right (In (Left "foo"))))) :: Rec (Either a), which represents ("foo",2)
06:58:23 <esap> I mean, Rec (Either String)
06:58:29 <Lor> Yes, sorry, that's what I meant.
07:07:37 <esap> Is there some theory on fixed points of abstract coalgebraic data types?
07:09:20 * esap means: data Sequence e = Sequence bot (Sequence bot) ; type SeqSpace = Rec Sequence
07:09:36 <esap> s/bot/e/g
07:16:31 <Lor> Err. That's one weird type.
07:16:49 <esap> yes :-)
07:17:12 <Lor> The mind boggles. Just full of sequences of itself.
07:18:52 <Lor> But as a general intuition, whenever you have "co-" something, and you're talking about fixed points, you're probably interested in the greatest fixed point, not the least.
07:19:30 <esap> Right, good point.
07:22:17 <esap> What I'm thinking about it is that it's some kind of infinite-dimensional space with no elements. You can just browse through it with many different ways... And you can build loops from elements of the sequence to the sequence itself. Very weird.
07:22:47 <Lor> Yep.
07:24:19 <Lor> A simpler question: what's mu X . X ?
07:24:39 <Lor> That is, Rec Id.
07:25:09 <esap> _|_?
07:25:45 <esap> or actually, is it top hmm..
07:25:47 <Lor> I take it you mean void?
07:26:31 <Lor> That's how void is formulated in haskell, btw: newtype Void = Void Void
07:26:52 <esap> oh right that one, I had forgot about Void :-)
07:26:52 <Lor> If it weren't for bottom, there wouldn't be any terms with that type.
07:27:28 <Lor> nowadays ghc supports just data Void
07:27:46 <esap> I've never used it.
07:28:03 <Lor> I think it's mostly handy as a tag for phantom types in eg. FFIs.
07:34:00 <esap> another nice one is Rec ((->) a)
07:35:06 <Lor> The infinite sink.
07:36:05 <esap> no I didn't actually mean that [you're right], I actually mean, newtype X a b = X (b->a); Rec (X a)
07:36:06 <Lor> # let rec f x = f;;
07:36:06 <Lor> val f : 'b -> 'a as 'a = <fun>
07:38:06 * esap is not actually sure if my second try was what I meant either :-)
07:47:43 <esap> Oh here's another strange type: Rec IO
07:48:33 <Lor> Hm, that's like a state machine or something.
07:48:54 <esap> state machine?
07:49:16 <Lor> Not really, no.
07:49:25 <Lor> It's just a sequence of commands.
07:49:38 <Lor> Each following command may depend on input and output.
08:09:43 <blacksheep> hey! if anyone is interested in some OpenGL bindings, visit my website: http://rpmcruz.planetaclix.pt/haskell-gl/
08:13:13 <andersca> blacksheep: please stop saying that every time
08:13:25 <andersca> blacksheep: and we already have hopengl :)
08:14:29 <blacksheep> andersca: well, just a bit of propaganda :P
08:14:51 <blacksheep> really, maybe someone could be interested in helping me improving it...
08:15:27 <andersca> blacksheep: http://www.haskell.org/HOpenGL/
08:15:27 <Igloo> You have to at least explain why it's better than HOpenGL first
08:15:39 <andersca> hey Igloo!
08:16:01 <Igloo> Hi andersca  :-)
08:16:49 <blacksheep> Igloo: of course, its not better than HOpenGL. I don't really want to create bindings to opengl, i just wanna to do some kinda of library to allow drawing stuff and maybe writting text in the future...
08:17:47 <Igloo> I'm not sure I understand. If you mean a higher level library is it built upon HOpenGL?
08:18:19 <blacksheep> Igloo: nope, i haven't even looked at hopengl code...
08:20:28 <blacksheep> well, i'll come back in a hour to annoy you again :P
08:20:38 <blacksheep> kidding, bye
08:25:05 <vegai> ñ
08:26:11 <Lor> ç
08:38:59 <Marvin--> afternoon
08:49:11 <TripleDES> hi
08:53:08 <Marvin--> ello
08:54:22 <esap> lor: oh btw, would that Rec IO thing be useful as a type for processes?
08:55:28 * Marvin-- curses himself for not remembering all the nifty first order logic stuff he should remember
08:55:37 <phubuh> damn
08:55:46 <phubuh> I think I somehow acquired coccydynia
08:56:53 <Marvin--> if I have   forall x . P(x) | exists y . Q(x,y)   can I just skolemize that to  forall x . P(x) | Q(x, c(x)) ?
10:03:40 * Smerdyakov wonders how to properly cite a URL with bibtex.
10:04:03 <phubuh> Has anyone here read Appel's _Compiling with Continuations_?  I'd like to know if it targets people who know how to write compilers already, or if it's a "beginner's guide", so to speak.
11:49:40 <Heffalump> hmm, you're clearly all dead
11:49:57 <phubuh> I am shocked and appalled
11:51:12 <cm> i'm alive-ish
11:55:00 <opet> I blame the government
11:56:11 <Smerdyakov> opet, are you the one who said Wuthering Heights was worth reading?
11:57:12 <opet> yes. why did I feel guilty when you said that? :)
11:57:43 <Smerdyakov> Nah, I haven't read it yet. I just want to be sure I know who's reputation score to adjust after I read it. :D
11:58:02 <opet> :p
11:58:11 <Smerdyakov> Do you have a personal web site?
11:58:21 <opet> nope
11:58:35 <Smerdyakov> Too bad. I like to link to people's home pages with the recommendations they give me. :)
11:58:51 <opet> my web precence is minimal
11:59:35 <opet> from a blog, do you mean?
11:59:38 <Smerdyakov> But I did check the book out of the library, and it's next on my list.
11:59:50 <Smerdyakov> From http://www.schizomaniac.net/books.html
12:00:02 <Smerdyakov> Notice the quick turnaround for clausen's rec. :)
12:00:32 <opet> heh
12:01:27 <opet> I was thinking of reading war and peace.. would you recommend it?
12:01:52 <Marvin--> I read way too little russian in general
12:02:02 <Smerdyakov> Yeah. Supposedly I recommend everything in the "Favorites" section of that page.
12:02:18 <opet> oh yes, of course. I didn't see that heading
12:02:22 <Smerdyakov> Except the ones that are outside bullet points and have derogatory text with them. :)
12:02:58 <Marvin--> Anybody read anything by Bulgakov? I have a book by him here that I haven't gotten around to read yet
12:03:30 <Smerdyakov> Marvin--, oh, thanks. I should add him to my "Not-so-favorities" section. I didn't like "The Master and Margarita." :D
12:03:48 <Marvin--> Smerdyakov: D'OH! That's the one I have here :)
12:06:27 <Smerdyakov> You say you read too little Russian in general. What have you read already?
12:07:28 <Marvin--> as in, so long ago that I don't remember what it was :(
12:08:01 <Smerdyakov> Good. Then that means you must have piles of Dostoyevsky left to read for the first time. I envy you, sir.
12:08:54 <Marvin--> yeah, there is that :)
12:09:10 <Smerdyakov> Any reason you think Bulgakov would be a better choice?
12:09:35 <Marvin--> no
12:09:48 <Marvin--> a friend of mine bought be a big pile of books when I was in the hospital and this was one of them
12:09:52 <Marvin--> er, brought
12:09:57 <Marvin--> and me, not be
12:09:58 <Marvin--> sheesh
12:10:07 <Smerdyakov> Do you and your friend have similar literary tastes?
12:11:54 <Smerdyakov> I can imagine your stereotypical sci-fi-fan geek getting into Master&Margarita. I didn't like, it, though, for the same reasons I don't like sci-fi: The story was all about zany things happening and not about characterization.
12:18:07 <Marvin--> I read pretty much anything and I'm pretty sure she does too... we both enjoy fantasy though
12:20:51 <Marvin--> I don't think I'm stereotypical though :)
12:21:35 <Smerdyakov> That's what all of you people say. ;)
12:30:07 <Marvin--> yeah :(
12:30:45 <Smerdyakov> Do you avoid anything branded as "classic literature"?
12:31:16 <Marvin--> hell no
12:31:25 <Marvin--> I've read a lot of Swedish classics
12:32:28 <andersca> I've started reading much more since I got rid of the tv
12:32:51 <Smerdyakov> Hm. How do the Swedish classics stack up to world classics? :)
12:32:58 <Marvin--> dunno :)
12:33:20 <Smerdyakov> You should give the rest of the world a chance. ;)
12:35:35 * Darius thinks he's read -less- after deciding TV was a complete waste of time.
12:38:47 <Darius> Well... less "entertainment" reading.
12:45:25 <Smerdyakov> Darius, are you sure this doesn't corresponding with taking on more work to do? :)
12:48:55 <Darius> Yes
13:55:12 <stepcut> whee!
14:04:37 <shapr> hey, that's my line!
14:04:45 <shapr> y0 Heffalump, ltns
14:04:48 * phubuh bounces
14:04:49 <phubuh> :-P
14:04:52 * shapr boings
14:05:04 <shapr> Heffalump: how's the Heffalocity project?
14:08:05 <Heffalump> the what?
14:11:12 <shapr> the project to increase the airborne velocity of Heffalumps worldwide?
14:12:02 <Heffalump> ah
14:13:41 <stepcut> I want to write a function that takes any record and prints out the field labels and data types (similar to what show does), am I correct in thinking that I need to use template haskell to do this?
14:14:10 <Heffalump> or DrIFT or something
14:14:40 <Heffalump> assuming that you can't just post-process the output of show
14:15:05 <shapr> Heffalump: actually, it seems like you're very busy lately, 'at high speed' even. So the question was really "What's going on in your life?"
14:15:18 <stepcut> I think I want to use template haskell -- in part, because I want to learn more about using template haskell
14:15:38 <Heffalump> got a paper rejected by CC :-)
14:15:58 <shapr> what's CC?
14:16:02 <Heffalump> Compiler Construction
14:16:05 <shapr> oh
14:16:12 <Heffalump> we might send it to ICFP instead
14:16:19 <Riastradh> What paper?
14:16:29 <stepcut> any idea if record and record constructions in relation to template haskell are documented anywhere?
14:16:39 <Heffalump> about lazy incremental computing
14:16:43 <shapr> I got the first (and second) version of quickcheck.lisp in my inbox today.
14:16:45 <Heffalump> and attribute grammars
14:17:06 <Heffalump> the one listed as "submitted to CC '04" on http://web.comlab.ox.ac.uk/oucl/work/ganesh.sittampalam/
14:17:17 <Heffalump> (I should fix that, but "rejected by CC '04" doesn't sound too good...)
14:17:36 <stepcut> shapr: is that a new virus?
14:17:44 <shapr> heh, possibly
14:17:53 <Heffalump> did John Hughes write it?
14:18:01 <shapr> I've been trying to persuade people world-wide to read and use QuickCheck
14:18:13 <shapr> nah, Darius Bacon, aka demoncrat, wrote it.
14:18:44 <Heffalump> ah
14:18:55 <Heffalump> I noticed there's a QuickCheck for Erlang now.
14:19:10 <shapr> yes, written by Luke Gorrie I suspect.
14:19:20 <andersca> wow, neat
14:19:26 <Heffalump> I think it was John Hughes and someone.
14:19:35 <shapr> oh, really?
14:19:55 <Heffalump> Thomas Arts
14:19:59 <shapr> wow, nifty!
14:21:12 <stepcut> anyone played with the -dtypes in ocaml 3.07 yet?
14:21:28 <Heffalump> dependent types?
14:21:49 <stepcut> i am not sure what the d stands for -- detailed maybe...
14:22:01 <Heffalump> what do they do?
14:22:53 <stepcut> when you compile with -dtypes, it dumps all the inferred type information to a file .annot. There is an emacs module that lets you then look at any subexpressions in the file and see what type the compiler assigned it
14:23:11 <shapr> that's neat
14:23:20 <Heffalump> ah
14:23:40 <stepcut> seems like a really useful feature for tracking down type errors -- especial if people don't declare any of the types explicitly
14:25:08 <shapr> I heard about a low-tech related strategy from Manuel Chakravarty, he said you could write code with no type declarations and then come back and add explicit type signatures to see if you realy understood the code.
14:26:07 <Heffalump> it'd be pretty unlikely to typecheck if you didn't
14:28:00 <shapr> I'd like to see something like Myer for Haskell. http://www.nongnu.org/myer/README.html
14:31:48 <stepcut> I would like to see savannah fully restored :)
14:33:11 <Marvin--> stepcut: <aol/>
14:34:28 <stepcut> hopefully people will start using capabilities when linux 2.6 becomes widespread
14:35:05 <andersca> capabilities?
14:35:49 <Heffalump> isn't it a tool support issue really?
14:35:59 <Heffalump> what will 2.6 do better than previous kernels?
14:36:53 <stepcut> the selinux patches will be in 2.6 instead of third party
14:37:01 <stepcut> and will (hopefully) support reiserfs
14:37:54 <stepcut> whats missing from selinux isn't tools per say, but config files
14:37:59 <Heffalump> those aren't specifically capability related, though, are they?
14:38:26 <stepcut> what aren't?
14:39:23 <Heffalump> selinux
14:40:37 <stepcut> SE linux is all about capabilities
14:41:06 <isomer> shapr.....?
14:42:03 <stepcut> or atleast that is my understanding
14:48:12 <shapr> eh?
14:49:03 <andersca> hmm, what is the correct term for "casting" a value to a certain type
14:49:06 <andersca> :: Float for example
14:49:22 <shapr> I think that is the correct term.
14:49:23 <Riastradh> Informing the type system of its incorrectness.
14:49:33 <shapr> "I'll just cast this to a Float"
14:49:38 <isomer> shapr: time for a quick debian question?
14:49:42 <shapr> isomer: sure
14:50:16 <Riastradh> 'Mr T. System, you are incorrect in thinking that this is not a Float; I hereby declare that this value is a value of type Float, overriding your stupid opinion.'
14:50:28 <isomer> with jigdo, how many of the cd images to i need to dl and burn? there seem to be 8 woody ones over at http://us.cdimage.debian.org/jigdo-area/3.0_r1/jigdo/i386/ .... do i need them all to do a fresh install?
14:51:08 <shapr> isomer: no, you need almost nothing to do a fresh install, the netinst is just enough to start downloading everything else
14:51:37 <shapr> I've installed from both the netinst image and from the first woody iso 
14:51:45 <Darius> andersca: annotating, restricting, not casting
14:51:50 <Marvin--> "Mr T. System", heh
14:51:58 <isomer> shapr: ok...so now i'm confused. i need to get the netinst image then, and forget about getting woody from jigdo?
14:52:05 <andersca> thanks
14:52:31 <Darius> of course, it's only restricting if the type would otherwise be more general
14:52:35 <shapr> isomer: if it's simpler, try installing from the first woody iso
14:53:04 <shapr> hi ben2 
14:53:15 <isomer> shapr: okey. thanks. i'm installing deb on my toaster, btw :)
14:53:17 <ben7> hi shapr
14:53:29 <isomer> @arr !!!
14:53:29 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
14:53:36 <ben7> could someone please name a site where i could paste some haskell code
14:53:38 <isomer> oh man... 
14:53:44 <ben7> for people here to look at
14:53:44 <shapr> where'd that one come from?
14:53:56 <isomer> ben7: pastebin.org i think
14:53:59 <shapr> I don't remember typing that one in...
14:54:05 <shapr> there's also HaskellIrcPastePage on HaWiki
14:54:06 <Darius> www.haskell.org/hawiki/HaskellIrcPastePage
14:54:19 <Marvin--> pastebin.com works
14:54:21 <ben7> thanks all
14:54:32 <Marvin--> though it has syntax hilighting for php
14:55:06 <Darius> hawiki has syntax highlighting for Python, I don't see how either is relevant.  Hawiki could get Haskell highlighting.
14:55:15 <shapr> yes, without too much trouble
14:55:29 <shapr> install enscript, find the moinmoin extension to use its haskell mode
14:57:08 <Darius> shapr: Weren't you going to (or didn't you) try that out locally so you could tell John what to do to set it up?
14:57:16 <shapr> er, yes :-)
14:57:19 <Riastradh> HaWiki could get...written in Haskell!
14:57:28 <shapr> but I never got around to doing it.
14:57:33 <Darius> By Riastradh no less!
14:57:41 <shapr> yes!
14:57:46 <Riastradh> No, if anything, I'll be writing schwiki.
14:57:47 <shapr> I'm quick to volunteer someone else :-)
14:58:14 <stepcut> well, if you want haskell syntax highlighting, maybe HaWiki should be written in elisp...
14:58:15 <det> sounds jewish
14:58:33 <Riastradh> Schwiki sounds Jewish?
14:58:39 <det> yeah
14:58:54 <Riastradh> How do you pronounce it?
14:59:01 <det> and hawaiin
14:59:24 <det> Shh-wik-E
14:59:41 <ben7> http://www.pastebin.org/index.php?page=show&id=5340&key=yz55zfj6e ... i'd appreciate it if someone could have a look at it, i think i don't understand the laziness feature of haskell properly.
14:59:49 <Riastradh> Stress on the last syllable?
15:01:32 <shapr> wiki wiki is hawaiian for "quick"
15:02:23 <Cale> ben7: what should the first element of the sequence be?
15:03:08 <ben7> 1... but the ordering doesn't matter
15:03:43 <ben7> i can see what you mean... let me think
15:07:33 <lambdabot> I'm GLAD I remembered to XEROX all my UNDERSHIRTS!!
15:08:48 <shapr> det: dude, what are you doing to the bot?
15:10:08 <Darius> shapr: You could just modify it to spit out all communications to stdout.
15:10:13 <shapr> that's true
15:10:34 <shapr> but I'd me much happier if whoever figured out some way around the rules would tell me about it.
15:11:22 <Darius> There are rules?
15:11:40 <shapr> well, I sure don't know how to get it to talk to #haskell without visible input :-)
15:13:21 <Darius> Change dot in function abstraction in LMParser to (dot <|> symbol "->") while you're at it ;)
15:13:35 * Marvin-- boggles at the curling
15:13:50 * Darius curls at the boggling
15:14:14 * andersca coggles at the burling
15:16:32 <ben7> my second attempt with laziness can be seen on: http://www.pastebin.org/index.php?page=show&id=5341&key=wx7xwysyuy
15:16:37 * isomer ogles the building
15:19:12 <Darius> ben7: So what's the problem?
15:20:13 <ben7> Darius: you don't see any problem with it? i get runtime errors - "Program error: {merge instOrd_v32...." with hugs
15:20:41 <ben7> when doing a "hamming 5"
15:20:57 <Cale> ben7: that usually means you missed a case
15:21:07 <Cale> try ghci, it has better error handling
15:21:28 <Darius> Dammit Cale, you messed up my joke.
15:21:34 <Cale> heh
15:22:10 <Darius> You're supposed to say (either originally or afterwards with "also" prepended) "that usually means you need to use GHC"
15:24:01 <Cale> ben7: the idea that you have to merge lists is good
15:24:01 <andersca> hmm
15:24:06 <andersca> what's the Integral type class?
15:24:26 <Darius> ... a type class, for integral things.
15:24:48 <Cale> ben7: think about this - what is the list H of hamming numbers in terms of 2H 3H and 5H?
15:24:55 <Darius> :i Integral
15:25:17 <shapr> I have much Integralty, like most politicians.
15:26:04 <ben7> sorry, something's happened and i have to go. all your help's been noted down, thanks. most appreciated :-)
15:26:37 <Cale> ben7: you're welcome
15:26:57 <andersca> foo :: Int -> Float -> Float
15:26:57 <andersca> foo x y = x * y
15:27:01 <andersca> how would I make this type chekc correctly?
15:27:25 <Heffalump> foo x y = fromIntegral x * y
15:27:50 <Heffalump> at a guess
15:30:02 <andersca> yeah, that worked
15:30:18 <andersca> hmm, now I'd like to add a `mod` 360, but that will give a type error
15:31:37 <Heffalump> I think you'll have to define mod yourself if you want it for floats.
15:32:18 <andersca> Heffalump: oh wait
15:32:21 <Cale> you could make Float an instance of integral
15:32:28 <Heffalump> ICK!
15:32:32 <Cale> heh
15:32:32 <Darius> Or you'll need to use floor/ceiling/round to get an Int again
15:32:35 <andersca> or I could just round or truncate the result
15:32:36 <andersca> yeah
15:32:48 <Heffalump> if you don't care about the fractional part, yeah...
15:32:55 * Heffalump was assuming from your result type that you did
15:35:09 <andersca> I don't really, but it has to return float
15:35:16 <andersca> Instances of (RealFrac Int, Integral Float) required for definition of foo
15:35:17 <andersca> grr
15:35:53 <Darius> Yes, after converting you have an Int, you need fromIntegral to convert to a Float
15:36:15 <Darius> fromIntegral (truncate (fromIntegral x * y) `mod` 360)
15:37:07 <andersca> whee, thanks
15:37:10 <andersca> you guys rock
15:37:53 <Darius> (I think the defaulting mechanism will kick in and give you a Double between the truncate and multiplication though)
15:37:53 <Darius> No the y determines
15:38:00 <Darius> it
16:00:24 <gatecrasher_> where can i find a self installer for java applications?
16:00:31 <gatecrasher_> no google answers
16:00:58 <Smerdyakov> How about "do you know what channel you're in?" answers?
16:03:01 * mgoetze cheers Smerdyakov on
16:04:07 <Marvin--> Your search - "do you know what channel you're in?" - did not match any documents.
16:04:12 <Marvin--> :(
16:04:39 <Cale> gatecrasher_: thought about using jws? Also, this is #Haskell.
16:05:58 <gatecrasher_> sorry
16:07:33 <Cale> gatecrasher_: it's okay
16:23:50 <ben7> hi. Cale, you were correct in that i missed a case. it's now working :-)
16:24:01 <Cale> ben7: great
16:26:00 <Cale> ben7: http://vx.hn.org/wiki.pl?RandomPastes
16:26:14 <Cale> that's how I did it.
16:28:15 <ben7> that's quite similar to a solution i've got here. just a second.
16:32:36 <ben7> http://www.pastebin.org/index.php?page=show&id=5343&key=h05kinr1pv
16:33:09 <ben7> there's a solution, similar to your i think, of which i don't know how is executed... it'd be great if someone could explain how i can work this out
16:33:26 <ben7> see the url above
16:36:11 <Cale> that's even prettier, I like it
16:41:40 <ben7> :-) ... i can't quite work out how either your or this solution work, how is infinite avoided (laziness i know, but how exactly)
16:42:08 <Cale> well, have a look at how it might get the first element of the list, or the second.
16:43:14 <guibar> hey there! does anyone know if (a) it's possible to extract content from ps and/or pdf files. (b) there is any haskell tool that does it.
16:43:31 <Cale> One thing to realise is that if you have two infinite lists, you can always merge them without getting bottom, as you just have to look at the start of the lists and recurse.
16:43:43 <Darius> ben7: There isn't much of a trick to it. Just don't do more than you need to.
16:43:46 <Cale> you'll get elements of the merge right away
16:44:21 <Cale> also, if you map (*n) on an infinite list, you won't get bottom, since calculating any one element is okay
16:44:43 <Darius> guibar: a) you could use ghostscript (at least for ps) and b) maybe for PDF, I don't know for PS.
16:45:48 <Cale> also, it's important to have something to start the list off - that's why that 1: is there, giving the recursion a place to start.
16:46:03 <ben7> i can see how to get the first two elements with "h 2" but then it gets more complicated when i have to perform merge as well as h 2, h 3 and h 5
16:46:33 <guibar> Darius: how could I send the information to haskell? via ascii? ffi? (not familiar w/ ghostscript)
16:46:40 <Cale> ben7: yeah, the pattern of recursion is a bit more complicated than usual stuff.
16:46:57 <Cale> Maybe simplify it to just two lists.
16:47:07 <ben7> cate, i wonder how do you work out that you won't get the insufficient memory error?
16:47:35 <Cale> ben7: you only have to do a small amount of work
16:47:40 <ben7> ensure that there's something to start off with, like 1 with our solutions, right?
16:47:44 <Cale> yeah
16:47:49 <Darius> guibar: It depends on what you want to do.
16:47:54 <Cale> and don't get into an infinite loop.
16:48:01 <Cale> Hugs tends to do poorly on those.
16:48:03 <Cale> :)
16:48:19 <ben7> hamming is already an infinite list, right?  so, what is an infinite loop like?
16:48:26 <Darius> Hugs tends to do poorly at a lot of things, except for loading quickly (no offence to Alastair)
16:48:34 <Darius> let f = f
16:48:44 <ben7> :-)
16:49:15 <Cale> in one of your previous pastes, you had list_hamming calling list_hamming before even a single element of the list would be returned
16:49:25 <Cale> that's a problem
16:49:54 <Cale> (well, it's a problem if it just keeps doing that)
16:49:56 <ben7> powerset (x:xs) = powerset xs ++ map (x:) powerset xs
16:50:29 <Cale> yeah, but eventually the recursion bottoms out and something gets returned.
16:50:43 <Cale> powerset xs is less of a problem than powerset x:xs
16:50:46 <ben7> ah, of course. right... it's getting together in my head!
16:51:09 <Cale> er, powerset (x:xs)
16:51:18 <blacksheep> hey there! anyone interested in some OpenGL bindings: http://rpmcruz.planetaclix.pt/haskell-gl/ :)
16:51:42 <shapr> blackdog: dude, stop that.
16:51:48 <shapr> er blacksheep: stop it
16:52:28 <blacksheep> shawn: all righty! :)
16:52:42 <Darius> Cale: The trick is not to call the function with the exact same arguments.
16:52:43 <ben7> Cale: you would say that practice helps in all that? is there any good exercise i should try? or something to read?
16:52:49 <Cale> yeah
16:53:01 <shapr> advertising once is fine, twice is bearable, but more times gets bothersome
16:53:13 <Cale> Darius: it could also be bad if you call the function with arguments that are just a larger problem to solve
16:53:14 <Darius> www.haskell.org/hawiki/TyingTheKnot (hand-written URL)
16:53:32 <Cale> Darius: like f n = f (n+1)
16:53:49 <Darius> Cale: yes
16:54:19 <ben7> Darius: was that url for me?
16:54:42 <Darius> yes
17:02:12 <ben7> a bit too advanced for my liking, but am determined to work it out!
17:03:11 <shapr> hoi Vincenz 
17:07:15 <Vincenz> Hiya shapr
17:07:25 <shapr> how's your journey in FP?
17:07:52 <Vincenz> Lately?
17:07:53 <Vincenz> slow...
17:07:57 <Vincenz> been doing different things
17:08:16 <Vincenz> Experimenting with Coldc, experimented a TINY bit with Zope
17:08:22 <Vincenz> Hey good news!!!!
17:08:24 <shapr> what?
17:08:31 <Vincenz> In january I can go on an interview for a doctorate
17:08:53 <Vincenz> I'm really stressed about it
17:08:53 <shapr> well, you know lots of good stuff.
17:09:03 <Vincenz> I hope they'll take me
17:09:06 <Vincenz> I know I'm good for the position
17:09:10 <Vincenz> Just a bit stressed is all
17:09:31 <Heffalump> whereabouts?
17:10:10 <Smerdyakov> It's kind of funny how Europe has interviews and the USA generally has no non-electronic/postal mail contact for doctoral student applications.
17:10:29 <Vincenz> Well I've been working for a year
17:10:33 <Vincenz> I had mailed before but ther was no budget
17:10:39 <Vincenz> but their budget for next year is plannedn ow
17:10:42 <Vincenz> and they might have an opening
17:10:47 <Vincenz> It's not a university
17:10:49 <Vincenz> It's a spinoff
17:11:05 <Smerdyakov> Non-universities grant degrees in your neck of the woods?
17:11:21 <Heffalump> funding is probably the real issue
17:11:31 <Heffalump> it usually is
17:11:38 <Vincenz> It works very closely with the university
17:11:45 <Vincenz> Many of my professors whom I used to have work there
17:11:45 <Heffalump> Smerdyakov: the USA has a much stronger centralised series of tests though, right?
17:11:46 <Vincenz> IMEC
17:12:10 <Smerdyakov> Heffalump, well, we have standard tests for graduate applications, but the top schools don't weight them much in the admissions process.
17:12:41 <Smerdyakov> Vincenz, do you need letters of recommendation to apply for this?
17:12:49 <Vincenz> No
17:13:12 <Vincenz> But the professor whom I'm going to has taught me in college
17:13:16 <Smerdyakov> Ah. I think this is the trade-off. USA doctoral applications require at least 3 letters of recommendation.
17:13:25 <Vincenz> Mostly...
17:13:27 <Vincenz> Usually
17:13:30 <Heffalump> you'd expect that in Europe too
17:13:31 <Smerdyakov> I guess a lot more Europeans get doctoral degrees close to where they got their undergrad degrees.
17:13:39 <Vincenz> You have done your thesis in that degree, and thus a doctorate is a natural flow from your thesis
17:13:41 <Heffalump> but if you're already known in that school, then it doesn't really matter that much
17:14:08 <Smerdyakov> Like I remember someone talking about his Swedish university, where maybe 75% of the applicants are Swedish.
17:14:20 <Vincenz> But I'm not applying to a University
17:14:34 <Heffalump> surely 75% of the applicants in the US are American?
17:14:37 <Smerdyakov> Vincenz, does this spinoff offer classes?
17:14:50 <Vincenz> Nop
17:14:50 <Smerdyakov> Heffalump, probably, but the USA is much larger than Sweden.
17:14:57 <Vincenz> But some of the graduate students help in the college
17:14:58 <Vincenz> Like I sai
17:15:04 <Smerdyakov> Heffalump, certainly it's not the case that 75% of applicants to Berkeley and Stanford are Californina.
17:15:07 <Smerdyakov> Californian...
17:15:08 <Vincenz> Close cooperation with the electronics departement of my univ
17:15:25 <`John> j-x: for example:  if(len < _buffersize - _position) {
17:15:26 <`John>       SDL_MixAudio(data, _buffer + _position, len, volume);
17:15:28 <`John>       _position += len;
17:15:29 <`John>     } else {
17:15:31 <`John>       SDL_MixAudio(data, _buffer + _position, _buffersize - _position,
17:15:33 <`John>                    volume);
17:15:34 <`John>       len -= _buffersize - _position; ...}
17:15:35 <Smerdyakov> Vincenz, so you'd take classes from your uni for the degree?
17:15:50 <Heffalump> the cultural distinction between different states in the US is tiny compared to the distinction between different European countries
17:16:03 <Vincenz> No
17:16:08 <Vincenz> You don't take classes for a doctorate
17:16:15 <Smerdyakov> Nonsense! You all drink beer nonstop!
17:16:20 <Smerdyakov> What other connection do you need? :D
17:16:32 <Smerdyakov> Vincenz, in the USA, you do.
17:16:53 <Smerdyakov> Vincenz, but... our undergrad degrees are calibrated to take 4 years to get.
17:17:01 <Vincenz> IMEC (Interuniversity MicroElectronics Center) is Europe's leading independent research center in the field of microelectronics, nanotechnology, enabling design methods and technologies for ICT systems. 
17:17:02 <Smerdyakov> Vincenz, yours take 5, right?
17:17:07 <Vincenz> It depends
17:17:51 <Vincenz> Oh undergrad?
17:17:53 <Vincenz> yes 5
17:17:55 <Vincenz> But we get a Master
17:18:04 <Vincenz> For engineering that is
17:18:13 <Smerdyakov> I've started a doctorate after only 3 years of higher education.
17:18:19 <Smerdyakov> And I'm taking classes for about 2 years.
17:18:24 <Smerdyakov> So it all works out evenly. :)
17:20:38 * Vincenz smiles
17:20:45 <Vincenz> I've been working for a year and a half now though
17:20:53 <Vincenz> Consultancy
17:22:45 <Heffalump> in the UK it's not particularly hard to do 3 years UG, 3 years PG and end up with a doctorate
17:25:03 <Vincenz> What's your doctorate on Smerdyakov?
17:27:22 <Smerdyakov> Programming languages
17:27:27 <Vincenz> FP?
17:27:31 <Smerdyakov> No
17:27:35 <Vincenz> OOP?
17:27:48 <Vincenz> Logic?
17:27:49 <Smerdyakov> No. I just started, but I can tell you it won't be in either of those categories. :D
17:27:55 <Smerdyakov> Definitely logic related, though.
17:28:01 <isomer> prolog?
17:28:04 * isomer hides
17:28:07 <Smerdyakov> Though that's arguably involved in everything under "programming languages." :D
17:30:08 <Vincenz> Assembly, huh?
17:30:21 <Lor> Vincenz, ever heard of TAL?
17:30:24 <Vincenz> TAL?
17:30:30 <Vincenz> as in Tandem?
17:30:36 <Vincenz> Oh no that's TACL
17:30:56 <Vincenz> I haven't
17:31:02 <Vincenz> But my major was electronics, not cs
17:35:35 <ben7> wow, just managed to use laziness to define primes... a function to infinitely list all the prime numbers.  :-)
17:36:19 <ben7> 6 digits prime numbers now...
17:36:21 <ben7> fun!
17:36:26 * Vincenz uses laziness for everything
17:36:29 * Vincenz is lazy :P
17:36:32 <Heffalump> that's one of our tutorial exercises :-)
17:37:16 * Vincenz never quite got the point of laziness
17:37:58 <ben7> it's very important to me, coming from a c/java background
17:38:02 <Vincenz> I don't know
17:38:07 <Vincenz> From an ee perspective it's really bad
17:38:14 <Vincenz> You don't know when something will happen
17:38:25 <shapr> what about clockless logic?
17:38:56 <ben7> cale and darius just gave me some tips as to how to avoid loops, and it's worked :-)
17:45:57 <Darius> ben7: The tips are the same tips you'd use in a strict language (and the same ones in C/Java though it's less obvious in those cases)
17:51:17 <Vincenz> Anyone know anything about html?
17:54:33 <Darius> I imagine.
17:54:36 <ben7> Darius, very true... but it was quite hard for me to understand seeing as c/java aren't lazy.  i, for example, can't use nats = 1 : map (+1) nats
18:14:04 <andersca> hmm
18:14:11 <andersca> if I have a type synonym in a module
18:14:29 <andersca> and I export it, will the definition be exported then
18:14:32 <andersca> or just the name?
18:47:35 <ben7> i've been trying to google for a description of "redex" - a new word to me
18:47:51 <ben7> but to no avail, anyone know where there's some?
18:49:24 <keverets> if you're in doubt, google for "redex definition"
18:49:42 <keverets> reducible expression, in this case.
18:54:04 <ben7> ok, nevermind... i'm not good with math, can't quite understand the definitions i've found
18:54:57 <Smerdyakov> If you're not good with math, you might not want to bother with Haskell. :D
18:55:06 <phubuh> pfft.
18:58:14 <ben7> alright then... i'd appreciate it if you math people can you explain what the M and N in http://www.lambda-bound.de/book/lambdacalc/node14.html are?
18:58:36 <ben7> s/can you/can/
18:59:24 <ski> M and N just stands for any expression
19:00:04 <ben7> hmm
19:00:44 <ski> see http://www.lambda-bound.de/book/lambdacalc/node3.html
19:01:29 <ski> ok ?
19:02:45 <ben7> thanks, just remembered now
19:04:05 <ski> nice site you found there :)
19:04:31 <Smerdyakov> I think ski is making fun of you.
19:04:34 <ski> "lambda stands for the Logos by whom everything was made according to the New Testament of the Bible"
19:04:43 <ski> Smerdyakov : no, actually not
19:06:29 <ben7> sorry, Smerdyakov?
19:06:35 <ben7> the site looks good
19:08:31 <Smerdyakov> A++, a minimal programming language with interpreter for basic training enforcing rigorous confrontation with the essentials of programming;
19:08:41 * Smerdyakov literally LOL's.
19:08:52 <Smerdyakov> Rigorous confrontation with the essentials of programming!!!
19:08:56 <Smerdyakov> I might get some bruises.
19:15:00 <mgoetze> Smerdyakov: it refuses to work if less than 50% of the input is comments?
19:16:13 <ski> (hmm : seems there is a bug in the ebnf of A++ at node42.html ...)
19:16:33 <Smerdyakov> Beats me. This is what's on the front page of the site that has this tutorial that is being bandied around now.
19:17:15 <ski> (more specifically : the lambda expressions seems to have no body)
19:17:17 <ski> ok
19:17:26 <ski> gotta go now
19:17:28 <ski> bye
19:49:22 * stepcut beats haskellDB into submission
19:50:44 <Smerdyakov> Man, it's all BLOODY now. ROLLBACK WORK... oh, now it's all better!
19:51:56 <stepcut> Smerdyakov: was it you that wrote some mysql haskell bindings?
19:52:24 <Smerdyakov> No. I wrote some PostgreSQL SML/NJ bindings. :)
19:52:30 <stepcut> hrm
