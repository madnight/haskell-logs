00:03:46 <shapr> yow
00:03:49 <shapr> good morning!
00:05:06 <sjj> hello ;)
00:06:46 <shapr> hey sjj, wassup?
00:07:10 <sjj> Not much, fighting with GTK+. You?
00:07:44 <andersca> what's your problem with gtk+?
00:07:51 <shapr> fighting with an ms access database
00:08:07 <sjj> andersca: i'm trying to find a resource describing the facilities provided by GtkTreeView for drag'n'drop.
00:08:11 <sjj> shapr: :(
00:08:19 <andersca> sjj: that's somewhat tricky :/
00:09:06 <shapr> I bought The Distillers CD, this lead singer chick is awesome.
00:09:07 <sjj> All of the TreeView tutorials I can find have omitted it
00:11:12 <shapr> hello Beechen
00:11:18 <Beechen`busy> moinsen :)
00:11:39 <Beechen`busy> has somebody a few minutes for me, i have a small prob :/
00:12:00 <shapr> what's the problem?
00:12:15 <Beechen`busy> its about al two line function - very small but some casting - prob i think
00:12:54 <Beechen`busy> t1 1 = 1 
00:12:54 <Beechen`busy> t1 n = 3 * t1(floor(n/2)) + (n * (log n))
00:13:18 <Beechen`busy> i cannot find the problem
00:13:43 <shapr> are you using GHC or Hugs?
00:13:45 <Beechen`busy> hugs loads it properly but shows an error when i try st. like t1 3
00:13:49 <Beechen`busy> hugs
00:13:52 <shapr> what's the error?
00:13:56 <Beechen`busy> wait...
00:14:17 <Beechen`busy> Main> t1 1
00:14:17 <Beechen`busy> ERROR - Unresolved overloading
00:14:17 <Beechen`busy> *** Type       : (RealFrac a, Integral a, Floating a) => a
00:14:17 <Beechen`busy> *** Expression : t1 1   
00:14:30 <Beechen`busy> i hate these messages :)
00:14:51 <shapr> have you checked the type of subsets of the entire chunk of code?
00:15:05 <ayrnieu> GHC may give you better errors.
00:15:46 <shapr> y0 ayrnieu, wassup?
00:16:05 <Beechen`busy> is there some way to cast types in haskel?
00:16:09 <shapr> sure
00:16:54 <Beechen`busy> i've already tryd to do some ugly stuff like:
00:16:55 <Beechen`busy> t1 1 = 1 
00:16:55 <Beechen`busy> t1 n = (3 :: Double) * (rek :: Double)  + (nlogn :: Double)
00:16:55 <Beechen`busy>    where
00:16:55 <Beechen`busy>       rek   = t1(floor( toRational(n :: Integer)/2) )
00:16:55 <Beechen`busy>       nlogn = fromRational(toRational(n :: Integer) * (log toRational(n :: Integer))) :: Double
00:17:14 <Beechen`busy> (didnd work *g)
00:17:38 <shapr> if you check the types of subsets of that code, you may be able to figure out where the mismatch is
00:18:17 <Beechen`busy> hmm let me think about it...
00:21:16 <dennisb> what type do you expect the function t1 to have 
00:21:30 <Beechen`busy> from Int -> Double
00:22:09 <dennisb> but you do log n, and log does not work on Int
00:22:22 <Beechen`busy> ahaaa
00:22:31 <Beechen`busy> can i cast that somehow?
00:23:55 <dennisb> try fromIntegreal
00:23:58 <Beechen`busy> my main problem is shurely that casting-thing, since i used to code in java for years 
00:24:02 <Beechen`busy> :)
00:24:04 <dennisb> fromIntegral even
00:25:05 <dennisb> I always forget about what conversion functions there are and I have to look them up
00:25:26 <dennisb> probably because most my programs don't do much float math
00:25:49 <Beechen`busy> yeah but i cant find a way to code this funktion in a different way
00:26:16 <Beechen`busy> in germam we call it a "folge" its like a funktion but fom |N -> |R
00:26:26 <dennisb> I also recommend that you declare the types of the functions, sometimes one get better error messages when one do that (not now perhaps)
00:26:36 <dennisb> so, say t1 :: Int -> Double is good
00:27:30 <Beechen`busy> ok i have that but now i have st linke:
00:27:38 <Beechen`busy> t1 :: Int -> Double
00:27:38 <Beechen`busy> t1 1 = 1 
00:27:38 <Beechen`busy> t1 n = 3  * rek   + nlogn 
00:27:38 <Beechen`busy>    where
00:27:38 <Beechen`busy>       rek   = t1(floor(n/2))
00:27:38 <Beechen`busy>       nlogn = n * (log fromIntegral(n))
00:27:42 <Beechen`busy> with the error
00:27:50 <Beechen`busy> ERROR "D:\Eigene Dateien\Uni\Sem 5\EAA\uebung6\aufgabe4.hs":3 - Type error in ap
00:27:50 <Beechen`busy> plication
00:27:50 <Beechen`busy> *** Expression     : 3 * rek + nlogn
00:27:50 <Beechen`busy> *** Term           : 3 * rek
00:27:50 <Beechen`busy> *** Type           : Double
00:27:52 <Beechen`busy> *** Does not match : Int   
00:28:25 <dennisb> hmm, this is difficult. I think I need to put it into hugs to really get it to work
00:28:32 <shapr> Beechen`busy: try ":t log" at the hugs or ghci prompt
00:28:54 <Beechen`busy> it says floating a -> a
00:29:52 <Beechen`busy> its so damn difficult, that hugs isnt able to interpret an int as a float or sth.
00:30:15 <shapr> :t log (fromIntegral (1 :: Int))
00:31:32 <Beechen`busy> hmm the same like :t log
00:31:56 <dennisb> since n is Int, then n * something is Int, this means that nlogn is Int
00:32:14 <dennisb> you want nlogn to be a double
00:32:29 <dennisb> I suggest that you add where n' = fromIntegral n
00:32:30 <Beechen`busy> jepp i didnt know that int * double = int
00:32:33 <dennisb> then you use n√§ instead
00:32:38 <Beechen`busy> sounds strange to me :)
00:32:39 <dennisb> Beechen`busy: it's not
00:33:05 <dennisb> but * is a overloaded function of type Num a => a -> a -> a
00:33:17 <Beechen`busy> let me test that..
00:33:18 <dennisb> that is, the two inputs and the result must have the same type
00:33:28 <dennisb> you can not mix it with different types, like Int and Double
00:33:46 <dennisb> either the Int must be converted to a Double or the other way around
00:34:35 <dennisb> you use n as a double in all cases (in log, in division by 2, in mult by a double), yet your n is a Int
00:34:53 <Beechen`busy> Yeeeha
00:34:55 <Beechen`busy> ;)))
00:35:03 <Beechen`busy> thanks, thanks, thanks
00:35:06 <Beechen`busy> :****
00:35:19 <dennisb> t1 n = 3 * t1(floor(n'/2)) + (n' * (log n')) where n' = fromIntegeral n
00:35:20 <Beechen`busy> this works fine:
00:35:21 <Beechen`busy> t1 :: Int -> Double
00:35:21 <Beechen`busy> t1 1 = 1 
00:35:21 <Beechen`busy> t1 n = 3.0  * rek   + nlogn 
00:35:21 <Beechen`busy>    where
00:35:21 <Beechen`busy>       n' = fromIntegral n
00:35:22 <Beechen`busy>       rek   = t1(floor(n'/2))
00:35:24 <Beechen`busy>       nlogn = n' * (log n')
00:35:39 <dennisb> now you don't even need the t1 :: Int -> Double anymore
00:35:40 <Beechen`busy> 3 * ... is a problem to
00:35:46 <Beechen`busy> o
00:35:56 <Beechen`busy> i have to do 3.0 * ...
00:35:57 <dennisb> since your function actually works with Float instead of Double and so on
00:36:05 <andersca> hey dennisb
00:36:12 <dennisb> hey hey with the ..
00:37:23 <dennisb> but I always gets into trouble with these things as well, luckily it's not that hard to solve in most cases when one asks hugs what the type of different things are
00:37:59 <Beechen`busy> got to learn st. about types in haskel i think
00:38:17 <Beechen`busy> i've coded in haskel a few years ago in my fist semester
00:38:20 <dennisb> and putting in a lot of annotations telling the compiler what you think the type should be and then he can complain when they are not
00:38:34 <Beechen`busy> we coded an turing-mashine and a lambda-interpreter
00:38:59 <Beechen`busy> but today a few years of java after - i cant do such simple funktions anymore :)
00:39:00 <dennisb> not a lot of different kinds of numbers in those
00:39:11 <shapr> dang, the distillers never came to sweden.
00:40:27 <dennisb> well, I still prefer to do the conversions by hand. Automatic type conversion always comes back and bites my in the ...
00:40:47 <Beechen`busy> ok guys thanks for your help an merry cristmas :)
00:40:47 <Beechen`busy> bye
00:40:47 <dennisb> np
00:40:52 <dennisb> bye
00:41:27 <shapr> is it really close to christmas?
00:41:29 * shapr checks the calendar
00:41:34 <shapr> oh
00:41:43 <shapr> dang, I better grab some julklappar
00:41:56 <andersca> :)
00:42:02 * dennisb don't do christmas gifts any more (almost at least)
00:42:30 <dennisb> christmas food and christmas get-togethers are fun though
00:44:20 * shapr buys dennisb a combinator paperweight
00:44:55 <dennisb> that's a gift for ski
00:45:00 <shapr> heh
00:55:09 <norpan> was that a combinator joke?
00:59:02 <shapr> norpan: I was trying.
00:59:10 <blackdog> very trying
00:59:16 <shapr> hey blackdog, wassup?
00:59:32 <blackdog> da sky, da boidies...
00:59:39 <shapr> have you heard The Distillers?
00:59:49 <shapr> hoi bas
00:59:56 <blackdog> No... quick inaccurate precis?
01:00:14 <shapr> blackdog: Melbourne punk chick makes it big in LA.
01:01:02 <shapr> bas: are you the same Bas Kok at tudelft?
01:01:11 <blackdog> shapr: hm. Perhaps I'll check them out.
01:01:19 <bas> shapr, no definitely not :)
01:01:32 <shapr> oh, ok :-)
01:01:49 <shapr> blackdog: The lead singer chick is flat-out salacious.
01:02:40 <bas> shapr, i hate to see his homepage though when i google for my own name
01:02:49 <shapr> where's your homepage?
01:03:54 <bas> shapr, dont have one
01:03:59 <shapr> anyone know of decent linux tools for working with MS Access databases?
01:04:02 <shapr> oh
01:04:29 <bas> shapr, export the crap as csv and use perl ;)
01:04:35 <sjj> shapr: ugh, I have looked long and hard for free tools to do that ;)
01:04:43 <shapr> I don't have windows, at all.
01:04:50 <sjj> shapr: they often make us use access at uni, which means I have to use the lab computers with XP on them to do work.
01:05:16 <shapr> actually, I have an old laptop with windows installed, but I don't have MS Access
01:05:31 <shapr> the mdbtools in debian are very flaky
01:05:38 <shapr> sjj: so do you have a copy of MS Access handy? :-)
01:06:06 <sjj> sorry, no ;(. I just used the version they had at uni.
01:06:24 <sjj> and I use openoffice.
01:06:36 <shapr> does OOo have any MS Access tools?
01:07:24 * shapr tries
01:10:22 <Darius> bas: I have a Christian songwriter/guitarist stealing my name...
01:10:35 * Darius wonders if we'll have 5 feet of snow again...
01:11:09 <bas> Darius, *eeks* that's definitely worse..
01:11:12 <shapr> you have snow?
01:11:16 <shapr> I want some!
01:13:19 <skew> I want snow too!
01:14:07 <shapr> I wish Haskell worked with SWIG 
01:14:11 <skew> Caltech doesn't get much snow, except for Inuit Freedom Day, where some people bring snow down from the mountains and we have a big snowball fight
01:14:31 <earthy> snow? what's snow?
01:14:50 <earthy> that white stuff that melts away within half a day? :)
01:15:03 <skew> shapr: Would swig really be useful?
01:15:06 <shapr> earthy: isn't one of the technical terms for the Netherlands "Low German" because parts of the country are below sea level?
01:15:37 <shapr> skew: well, it'd mean I could hack up a binding for libmdb faster
01:15:59 <skew> shapr: If you just want to get things as raw Ptr and so on the ffi is pretty good
01:16:03 <shapr> I think the Netherlands are warmer because they're closer to the molten center of the earth.
01:17:54 * shapr reads Lunar^'s FFI tutorial.
01:18:19 <Darius> The FFI Addendum is readable.
01:20:49 <bas> ahhh... the netherlands....
01:20:56 <bas> i miss my home ;_(
01:22:04 <det> shapr: I demand lambdabot's return!
01:22:57 <shapr> um, ok.
01:23:16 <shapr> bas: where are you now?
01:35:20 <bas> shapr, osaka - japan
01:36:22 <shapr> oh, neat
01:36:27 <shapr> do you know juhp?
01:36:54 <shapr> Jens Petersen?
01:39:37 <Darius> Wow.  There's a memorymanagement.org.
01:39:54 <earthy> shapr: not because some parts are below sea level
01:40:18 <earthy> because almost everything is at roughly the same level and lower than virtually all of mainland europe
01:40:39 <earthy> (the parts that are truely below sea level are basically reclaimed land)
01:43:33 <skew> How many people here would have a use for the JVM bridge?
01:44:25 <skew> I just got some reflection code up and running, and it looks like I will be able to overload names
01:44:37 <shapr> have you seen the two existing JVM bridges?
01:44:48 <shapr> Yakeley and ... um.
01:44:52 <shapr> someone else :-)
01:44:55 <skew> There are two? I'm thinking of Ashley Yakeley
01:45:06 <skew> There's also Lambada, which was a bit more limited
01:45:16 <shapr> there was something else that I've forgotten.
01:45:51 <skew> I've been working a little bit generating an interface that uses overloading instead of mangled names
01:46:01 <shapr> ah
01:46:16 <skew> The nice part of Java is the libraries
01:50:44 <shapr> that's true
01:56:38 <skew> For writing nice declarative internet stuff it helps a lot to build on an existing (imperative) library that handles all the grungy details
01:56:58 <skew> That's what I did this summer (using Jython)
01:57:11 <shapr> yah, no arguments there.
01:57:29 <shapr> I've done a bunch of stuff with Jython, it's nice.
01:58:44 <skew> I would like to see more people writing Haskell
01:59:08 <skew> It seems like a lot of people write very elegant things, but nobody wants to write grungy infrastructure code
01:59:46 <shapr> yah, I agree.
01:59:57 <shapr> that was one of the original ideas behind haskell-libs, write infrastructure code.
02:00:43 <skew> Or we just don't have enough people wanting to use nice elegant interfaces that some of them handle the annoying code, (like XML, DOM, and Javascript for web stuff)
02:01:01 <skew> Does anybody know how python got started?
02:01:34 <Darius> Presumably, Guido van Rossum knows.
02:03:04 <skew> That is, how the language spread
02:03:26 <shapr> yah, Tim Peters and a bunch of other people started writing libraries
02:03:52 <skew> Who started using it when, and why, when the libraries were written and how much interest it took to start writing them/how many people they attracted, etc
02:04:04 <shapr> that I don't know 
02:05:42 <skew> Of the languages I know, Haskell seems to support the nicest abstractions.
02:06:32 <skew> I would like to be able to write code with that power, using libraries with similarly nice interfaces
02:06:53 <skew> But I don't want to reinvent the wheel for all the low level stuff
02:07:22 <shapr> which libraries do you want?
02:07:23 <skew> I guess I wasn't thinking quite clearly about that, because while lots of that code has been written for C, Java, etc, we don't have it for Haskell
02:07:49 <skew> So maybe the thing to do is everybody writes the support code they need, and turn it into libraries
02:08:06 <shapr> yah, that probably is the best solution
02:08:44 <skew> shapr: I'm thinking of writing something for verifying web applications
02:09:15 <skew> shapr: I wrote something over the summer in Jython at a job, but I've lost the source, and the upper layers would be nice in Haskell
02:09:24 <shapr> what sort of verification?
02:10:09 <skew> shapr: It would need libraries for HTTP to fetch the pages, an HTML parser, and something that can simulate the effects of button presses and so on (including Javascript). The Javascript is really the hard part
02:10:33 <shapr> HTTP.hs exists
02:10:39 <shapr> HTML parsers exist
02:10:40 <skew> shapr: HttpUnit for Java already does all this, so I'll probably use that plus JVM-bridge
02:10:59 <skew> shapr: Yeah, but simulating user actions hasn't
02:12:48 <shapr> that's true
02:13:36 <skew> The system has a collection of page descriptions, which specifies the overall shape of the page, names buttons and bits of meaningful text (using xpath, mostly), and for each of the buttons information on possible places you should end up, and what values entered on this page should show up on the next page
02:14:03 <skew> Then you write test scripts that identify starting pages, fields to set, buttons to click, etc by using nice names from the page descriptions
02:14:26 <skew> And you get all the checks for page structure and correct destinations on actions for free, in addition to any checks explicitly in the script
02:14:38 <skew> At least, that's where it was at the end of summer
02:15:41 <skew> have you used that lexer for anything?
02:15:53 <shapr> the html parser?
02:16:02 <skew> No, the thing I sent you
02:16:06 <shapr> no, I haven't yet.
02:16:10 <shapr> too much work sadly.
02:16:48 <skew> what sort of things do you tend to write?
02:17:51 <shapr> lately, email tools 
02:18:46 <skew> probably not much call for a lexer unless you are doing something more like an interpreter, or maybe a spam filter.
02:18:50 <skew> Are you writing them in Haskell?
02:19:14 <shapr> I am doing a spam filter actually
02:19:21 <shapr> and in Haskell, yes.
02:24:58 <shapr> cya skew
02:25:23 <shapr> I really want to get the Haskell infrastructure grunge moving.
02:25:30 <shapr> not sure how to do that though.
03:09:41 <shapr> hello AliceIcon 
03:10:31 <AliceIcon> hello
03:10:35 <AliceIcon> how are things today?
03:10:49 <shapr> life is good, how are you?
03:11:13 <AliceIcon> good also
03:27:07 <TripleDES> hiya
03:27:11 <shapr> hi TripleDES 
03:34:24 <danb> anyone able to field a (forkIO (system "..." >> return ())) question?
03:35:10 <shapr> I'm still learning Concurrent
03:35:15 <danb> when i call it, it manages to block the parent thread
03:35:36 <danb> which defeats the whole purpose of concurrency
03:35:37 <shapr> I think that's normal, unless you're using threaded-rts
03:35:57 <danb> what's threaded-rts?
03:36:12 <shapr> it's one of the GHC runtime system build options.
03:36:36 <danb> so i would need to rebuild ghc to use it?
03:36:41 <shapr> if you're using debian, there are two ghc6 packages, ghc6-threaded-rts is one of them.
03:36:50 <danb> nah, i'm on gentoo
03:36:54 * danb checks out the ebuild...
03:37:19 <danb> this thing took quite a while to build
03:37:20 <shapr> threaded-rts has the downside that thread-local state gets clobbered.
03:37:27 <shapr> yah, GHC builds slowly.
03:37:34 <danb> how do you mean?
03:38:09 <shapr> I mean, it takes some time to build GHC.
03:38:13 <danb> hehe
03:38:20 <danb> no, i mean about clobbering the local thread state
03:38:23 <shapr> oh
03:39:02 <shapr> Concurrent uses a pool of anonymous threads, any thread can take any task
03:39:15 <shapr> threaded-rts extends that with OS threads
03:39:45 <ham[home]> johoho
03:39:46 <shapr> GLUT and some other bits of software rely on the same thread always calling them
03:39:51 <shapr> since part of the state is thread-local.
03:40:18 <shapr> Wolfgang Thaller has added a new call for TLS, it was forkOS last I heard.
03:40:24 <shapr> hi ham[home] 
03:40:41 <danb> ah... i remember seeing forkOS
03:40:49 <ham[home]> shapr: i think ill put something on graep down today
03:40:55 <shapr> ok
03:42:57 <danb> shapr: where might i find forkOS?
03:43:18 <danb> do i need the threaded rts to use it?
03:43:35 <danb> or does threaded-rts alter the behavior of forkIO?
03:44:33 <danb> hmm, seems so
03:45:02 <ham[home]> where can i read about the net support of haskell?
03:46:10 <danb> ham[home]: http://www.haskell.org/ghc/docs/latest/html/network/index.html might be a good start
03:46:40 <ham[home]> thx
03:46:43 <danb> np
03:47:57 <shapr> danb: if you're not using a system call that requires thread local state, it shouldn't be a problem
03:48:23 <shapr> I think forkOS will be available in ghc6.2, which I know is close to release, but I don't know how close.
03:49:04 <danb> my deadline is far sooner than "soon" ;)
03:49:16 <danb> what do you mean by TLS?
03:49:29 <danb> i don't think i need it...
03:51:35 <shapr> TLS == thread local state
03:51:43 <danb> yeah
03:51:45 <shapr> for GLUT, and a few other bits of software.
03:51:47 <danb> what do you mean by thread local state
03:52:55 <shapr> in Linux, an OS thread can have its own state.
03:53:01 <shapr> I don't know if that's also true on win32
03:53:21 <danb> ok
03:53:40 <danb> i'm a linux person, if that pertains to the problem at hand
03:53:48 <magr> shapr: it is.  actually, it was possible before it was possible under Linux (IIRC)
03:54:06 <shapr> magr: good to know, thanks.
03:54:20 <danb> hmm... rather
03:54:57 <danb> more specifically, i'm wanting to do something like: forkIO (system "mpg123 some_file.mp3" >> return ())
03:55:27 <danb> but the parent thread ends up blocked with the child
03:55:58 <danb> do you see why that might be?
03:59:10 <shapr> I don't know enough about Concurrent to say whether threaded-rts fixes that or not.
03:59:12 <shapr> on the other hand
03:59:21 <shapr> if you have a small chunk of test code
03:59:26 <shapr> I have threaded-rts installed
03:59:40 <danb> ok, let me give you a link
04:02:32 <danb> shapr: http://danb.homelinux.org:81/cgi-bin/viewcvs.cgi/hplayer/core.hs?rev=1.4&content-type=text/vnd.viewcvs-markup
04:04:46 <danb> it's not small, per se, but you should be able to just dl and run it
04:08:01 <danb> err, let me update the system args...
04:08:13 <danb> http://danb.homelinux.org:81/cgi-bin/viewcvs.cgi/hplayer/core.hs?rev=1.5&content-type=text/vnd.viewcvs-markup
04:12:17 <danb> echo -e "add one\nplay" | ...
04:13:39 <danb> after the play command is given, the ("echo "++song++"; sleep 2") is sent through system (after a forkIO), but then blocks the parent thread
04:13:48 <danb> defeating the whole purpose of the forkIO
04:14:20 <danb> and my ghc ebuild seems to have compiled with --enable-threaded-rts, but please try on yours as well, if you want
04:14:46 <shapr> sorry, I was distracted by a phone call, I'm back now.
04:14:50 <danb> no problem
04:19:55 <shapr> er, how can I tell if it's working?
04:20:48 <danb> hehe
04:20:56 <shapr> what output should I see?
04:21:18 <danb> every command given to the program will result in 0 or more lines of output followed by an output line of either /OK or /ERROR
04:21:31 <danb> when you see /OK, that means the last command you gave just finished
04:22:04 <danb> a simple session might look like:
04:22:12 <danb>  -> add one
04:22:16 <danb>  <- /OK
04:22:18 <danb>  -> add two
04:22:20 <danb>  <- /OK
04:22:22 <danb>  -> play
04:22:33 <danb>  <- one
04:22:35 <danb>  <- two
04:22:38 <danb>  <- /OK
04:23:01 <danb> the fact that the /OK after play came after the one and two outputs is the problem
04:23:42 <danb> if you run that session, you should also notice the "sleep 2" delay before the output of one and the output of two
04:24:09 <danb> if the parent thread didn't block when system invoked, the last 4 lines there would be:
04:24:12 <danb>  -> play
04:24:13 <danb>  <- /OK
04:24:16 <shapr> works for me
04:24:16 <danb>  <- one
04:24:19 <danb>  <- two
04:24:39 <shapr> in both threaded and unthreaded
04:24:49 <danb> you got the /OK back before one and two?
04:24:55 <shapr> yup
04:25:02 <danb> interesting...
04:25:04 <danb> version of ghc?
04:25:20 <shapr> The Glorious Glasgow Haskell Compilation System, version 6.0.1
04:25:32 <danb> likewise
04:25:50 <danb> did you disable threaded-rts with a switch or something?
04:25:54 <shapr> shall I send you my binaries so you can stare at them in mystification? :-)
04:26:00 <danb> hehe
04:26:12 <danb> that sounds kind of silly :P
04:26:17 <danb> wait...
04:26:19 <shapr> no, I built core.hs with both standard and threaded rts, and they both work correctly.
04:26:26 <danb> so i'm running this in ghci
04:26:32 <danb> would that make a difference
04:26:34 <shapr> it might
04:26:42 <danb> in my state of no-sleep i didn't think to build with the real thing...
04:26:53 <danb> let me try that before i smash my ghc install
04:26:57 <shapr> yah, good idea
04:27:34 <danb> oh the side, do you know of a good way to get rid of that overlapping pattern warning? ;)
04:27:39 <danb> i can't think of anything reasonable
04:27:57 <danb> holy mother of god
04:28:17 <danb> stupid ghci
04:28:30 <danb> i mean, stupid me for not testing different options
04:29:01 <danb> thank you sir/madam
04:29:16 <danb> i will stop flooding your channel now ;)
04:30:39 <shapr> heh
04:30:55 <shapr> I'm a male, as evidenced by my pictures.
04:31:07 <shapr> anyways, I'm always glad to have on-topic discussion here.
04:31:19 <Darius> seems so rare these days...
04:31:30 <danb> heh
04:31:37 <danb> that's no good
04:31:54 <shapr> christmas is coming up, many of my clients are pushing deadlines forward so they can extend their holidays.
04:34:08 <danb> hmm. it seems to be blocking the input still
04:34:24 * danb tries something else...
04:35:26 <danb> shapr: you said you built with both standard and threaded rts. are you using the two separate deb packages to do this?
04:35:53 <danb> and could you send me those bins? ;)
04:36:00 <shapr> sure
04:36:19 <danb> thanks
04:36:21 <shapr> and I used 'ghc6 --make core' and 'ghc6-threaded --make core'
04:36:44 <danb> got it... yeah
04:38:01 <shapr> danb: http://shapr.homelinux.net/~shae/
04:38:14 <shapr> core and core-t (threaded)
04:38:21 <danb> k, let me try them out
04:40:14 <shapr> works?
04:40:19 <danb> trying...
04:41:05 <danb> hmm, both did the same thing, which is different from what mine does
04:41:10 <shapr> yup
04:41:39 <danb> the /OK waited until after the output of the playlist
04:41:40 <danb> boo
04:41:47 <shapr> ?
04:41:47 <danb> a set of useless things
04:42:04 <danb> allow me to illustrate:
04:42:49 <danb> um...
04:42:50 <danb> hmm
04:43:26 <shapr> basically, you want to call an audio player, and keep doing stuff while it's playing, right?
04:43:35 <danb> yep
04:43:36 <shapr> you don't want to wait till the player is done.
04:43:43 <danb> correct
04:44:09 <danb> and i need to keep track of the process/thread that is actually playing, so that i can kill it (for stop and next/prev)
04:44:27 <danb> and when the player finishes, it needs to continue on to the next song in the list
04:45:04 <danb> it's really a pretty minimal set of desired control, but still seemingly difficult
04:45:14 <shapr> in that case, have you tried juhp's Popen lib?
04:45:25 <danb> nope
04:45:28 <danb> link?
04:45:31 * shapr looks
04:45:46 <shapr> http://www.haskell.org/pipermail/libraries/2003-May/000944.html
04:46:42 <shapr> looks like shell-haskell might do it.
04:46:47 <danb> hmm
04:46:53 <danb> i will look into those
04:47:10 <shapr> http://www.electronconsulting.com/shell-haskell/
04:48:05 <danb> yeah, grabbing the source tarball
04:49:43 <danb> intersting. let me try it out
04:53:56 <danb> hmm
04:54:24 <danb> any idea where GHC.Posix.RegaulrFile might have gone from v5 -> v6?
04:54:32 <danb> or the whole GHC.Posix module, for that matter
04:54:46 <danb> System.Posix exists, but System.Posix.RegularFile does not
04:54:52 * danb investigates further
04:57:45 <danb> meh... i don't need the file handles
04:58:00 <danb> i'll just replace that business with Nothing. that's pretty well support in 6.0
04:58:59 <danb> ..crap. class in 2 hrs
04:59:13 <danb> still need to do some hw for them
05:03:14 <shapr> er, yes, I think I did find RegularFile...
05:03:44 <shapr> it's isRegularFile now
05:04:11 <danb> ah
05:04:28 <danb> well, Nothing is working alright for the time being, but i will keep that in mind if i feel like patching it back up ;)
05:04:47 <shapr> does shell-haskell fix your problem?
05:05:40 <danb> about to find out
05:05:50 <danb> had a little trouble linking it in, but i fixed that
05:08:29 <danb> hmm
05:08:31 <danb> can't tell yet
05:09:36 <danb> sweeeeeeeeeeeeet
05:09:36 <danb> yep
05:09:38 <danb> got it
05:09:47 <danb> thanks again :D
05:11:14 <danb> well, i think it's working
05:11:15 <danb> it did once
05:12:49 <shapr> didn't work a second time?
05:13:09 <danb> eh, it was something weird with the handles
05:13:23 <danb> it's flakey, but i can fix that later
05:13:43 <danb> one problem is that it's [not] daemonizing the process it launches
05:14:02 <shapr> ?
05:14:06 <danb> um...
05:14:35 <danb> so the executable is called core, and it's using launch to run mpg123
05:14:48 <danb> my process listing shows three core processes and one mpg123 process
05:15:07 <danb> when i quit, all three core processes go away, but the mpg123 process is still around
05:15:21 <danb> (this also breaks the stop command)
05:16:01 <danb> i should be able to hack the C and fix that... just gotta figure out what to do with it
05:18:09 <danb> meh, i'll mess with it all later
05:19:00 <danb> this code makes the spawned process *too* separate from the haskell process
05:19:40 <danb> i can mess with it and converge on the degree of separation that fits best
05:19:46 <danb> shapr: thanks for your help
05:19:49 * danb leaves
07:37:08 <deadbeef> moin excuseme, does haskell support large numbers ?
07:37:35 <Lor> Yes.
07:38:02 <norpan> deadbeef: the type Integer is infinitely large
07:38:06 <deadbeef> Lor: can i apply stuff like the little fermat theorem to check primality on numbers like 2^512 without problems ?
07:38:10 <deadbeef> norpan: amazing
07:38:30 <Lor> If you don't consider efficiency a problem... :)
07:38:59 <norpan> ghci uses the mp library for Integer
07:39:25 <norpan> gmp that is
07:40:02 <deadbeef> thanks
07:40:30 <deadbeef> Lor: why efficiency ? doesnt the haskell compiler mind to optimizations itself ?
07:40:56 <norpan> Prelude> 2^512 :: Integer
07:40:57 <norpan> 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096
07:41:07 <Lor> Just because a compiler is optimizing, it doesn't mean that everything is magically efficient.
07:41:34 <Lor> For non-trivial things, doing things quickly requires that you have a good algorithm.
07:41:42 <deadbeef> can i dinamically chose how much memory to allocate for an Integer ?
07:41:52 <Lor> No. Why would you want to?
07:42:11 <Lor> It allocates just enough memory to represent the integer that it represents.
07:42:17 <deadbeef> okay
07:42:18 <deadbeef> thanks
07:42:42 <deadbeef> gtg learn haskell so
10:29:08 <cm> hello
10:30:16 <Marvin--> evenin'
16:37:59 <Vincenz> HELLO
16:42:05 <Riastradh> 500 Syntax error, command unrecognized
16:45:28 <Vincenz> (set! Riastradh False)
16:45:48 <Vincenz> Hey Riastradh we got the best timing on one of the tracks!
16:46:09 <Vincenz> Can't remember if it was 4 or 5
16:46:15 <det> ICFP2003 ?
16:46:19 * Vincenz nods
16:46:30 <det> you are *just* finding this out? :)
16:46:34 <Vincenz> no
16:46:42 <Vincenz> but I *just* talked to Riastradh
16:46:54 <det> how did you guys do overall ?
16:46:57 <Vincenz> hmm
16:46:59 <Vincenz> not so well
16:47:01 <det> who was part of your team ?
16:47:05 <det> was it haskell ?
16:47:09 <Vincenz> but that's because we didn't have time to finish the tracks in the end
16:47:13 <Vincenz> It was Riastradh, lambda and I
16:47:17 <Vincenz> but I think lambda changed nick
16:48:26 <Vincenz> and ...it was in scheme
16:48:44 <Vincenz> We even made a pretty neat gui
16:49:35 <Vincenz> next year another language
16:50:21 <det> ahh
16:55:54 <Vincenz> Did you compete?
