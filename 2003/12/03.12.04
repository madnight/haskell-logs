00:05:53 <AliceIcon> oh my, yes I would like it
00:08:34 <ayrnieu> I just need an email address, then.  also, don't expect too much -- IIRC it contains a tree of small Haskell programs that I wrote to re-familarize myself with the language.  It also happens to have simple networking servers and clients, and stubs for more complex clients that never happened.  And NetUtil.
00:09:06 <AliceIcon> may I send you a private message with my email?
00:09:21 <ayrnieu> Go ahead.
00:11:29 <ayrnieu> Sent.
00:11:47 <AliceIcon> thank you
00:12:41 <ayrnieu> Please tell me if it helps at all.
00:13:51 <ayrnieu> Really, I should sit down and write some friendly example-infested texinfo for GHC's poorly-documented libraries.  Maybe over the break.
00:39:11 <AliceIcon> it would have been nice to have such an example infested document for the project I'm working on
01:11:51 <basti_> hi
01:12:07 <basti_> anyone who knows about coq here?
01:13:35 <ayrnieu> coq?  I've heard of a person named coq.  I don't know what you mean by it.
01:14:25 <Cale> Perhaps he is referring to: http://www.inria.fr/recherche/equipes/coq.en.html
01:14:39 <ecraven> basti_: i played for some hours with it several months ago.. 
01:15:00 <basti_> ayrnieu probably not him
01:15:07 <basti_> ecraven im currently trying the same...
01:15:17 <basti_> ecraven how do I "expand" definitions
01:15:47 <basti_> like in (even 0)
01:15:58 <ecraven> basti_: sorry, i don't really know anything useful about it ;-(
01:16:04 <basti_> I defined that this is true but I can't get coq to acknowledge this
01:16:07 <basti_> ecraven okay
01:16:28 <ecraven> but i remember there were some nice tutorials and manuals somewhere on the net
01:16:39 <basti_> I have them on my drive and I'm looking at them
01:16:55 <basti_> but they are erroneous or at least for another subversion.
01:17:25 * basti_ .oO° ( or I typed 0 where i should type O )
01:18:16 <basti_> hmmm.
05:45:21 <rubix> Is there a way in haskell to parametrize type by values, like with the C++ code "template <Int N> class Foo" ?
05:46:32 <TripleDES> hi
05:46:44 <Jad> hi
05:59:31 <Darius> rubix: Not really, you can use singleton types but it's somewhat cumbersome.
06:01:04 <rubix> that's too bad
06:02:39 <rubix> it is not really convenient to define MyIntBetween13And42 when I want an Int between those values, and MyOtherIntBetween13And43, and...
06:04:47 <Darius> That's not necessary.
06:13:47 <Darius> SyntaxNinja: You need to update your quit message.
06:14:07 <Darius> Or were you making a statement ;)
06:14:49 <SyntaxNinja> hm... what did it say?
06:15:05 <SyntaxNinja> (I just switched clients, so whatever it said, it's definitely going to change)
06:17:00 <Darius> "(\x -> exit x) $ SyntaxPolice)"
06:17:11 <Darius> uh, minus the last paren
06:17:38 <SyntaxNinja> ahh
06:17:41 <SyntaxNinja> yeah, a little redundant
06:17:59 <Darius> SyntaxNinja: So do you know why it's called the shoe-sock theorem (or was it a lemma?) now?
06:18:46 <SyntaxNinja> Darius: no, I got pulled away to a meeting and never game back :( let me work on it RIGHT NOW
06:18:51 <SyntaxNinja> ...
06:18:57 <SyntaxNinja> but I'm eager to find out...
07:02:09 <SyntaxNinja> Darius: I can't solve it :(
07:02:51 <Darius> The question is prove that if A is isomorphic to B and B is isomorphic to C then A is isomorphic to C ?
07:02:58 <SyntaxNinja> yeah
07:03:03 <SyntaxNinja> using the laws of composition of maps
07:03:08 <SyntaxNinja> and identity laws for maps
07:03:21 <skew> Huh?
07:03:29 <skew> What do you have isomorphisms between?
07:05:20 <SyntaxNinja> I know there exists B --f'--> A | f' . f = IA and f.f' = 1B      and    C --k'-->B | k' . k = 1B and k . k' = 1C
07:05:37 <SyntaxNinja> so I assuem the answer is f' . k' :)
07:05:57 <SyntaxNinja> we're trying to prove there exists C --g'--> A | g' . (k . f) = 1A and (k . f) . g' = 1C
07:06:16 <skew> Yeah. Are these just bijections, or something more complicated like homomorphisms?
07:06:32 <Darius> Well, another way of phrasing the above question, is that given two isomorphisms f and g, then f;g is an isomorphism.
07:06:45 <SyntaxNinja> Darius: right
07:06:53 <Darius> f;g = g . f (btw)
07:07:06 <SyntaxNinja> that's actually the way they phrase the question
07:07:13 <skew> In any case, the composition works
07:07:58 <SyntaxNinja> Darius: any hints?
07:07:59 <skew> f;g;g^-1;f^-1 = f;1B;f^-1 = 1A
07:07:59 <Darius> This is called the Shoe-sock lemma because it's like putting on and taking off your socks and shoes.
07:08:16 <SyntaxNinja> ok...
07:08:39 <Darius> You first put on your socks then put on your shoes, then to take them off you first take off your -shoes- then take off your -socks-.
07:08:56 * SyntaxNinja thinks about it
07:09:09 <Darius> Writing what skew wrote with different names, put-on-socks;put-on-shoes;take-off-shoes;take-off-socks
07:11:20 <SyntaxNinja> is g = k;f?
07:11:38 <skew> What sort of area are you working in? groups? categories? topological spaces?
07:11:49 <SyntaxNinja> categories
07:11:50 <skew> No, g = k, probably
07:12:04 <skew> It's just supposed to be some isomorphism that composes with f
07:12:29 <skew> So all you require is that your things be maps with an inverse
07:12:43 <skew> f is a map with an inverse, k is a map with an inverse
07:12:48 <skew> the composition of f and k is a map
07:12:51 <SyntaxNinja> yeah
07:12:54 <skew> You just need to find an inverse
07:12:57 <SyntaxNinja> right
07:13:00 <SyntaxNinja> an inverse for k . f
07:13:04 <SyntaxNinja> which I'm calling g'
07:13:47 <skew> Well, (I'll talk in terms of elements here) f took you to something in B, and you know k compose k inverse is the identity on B
07:14:02 <skew> And you can compose k inverse onto f;k
07:14:12 <skew> And composition is associative
07:15:28 <skew> Not that I'm really deep into category theory. Does anybody here understand the _statement_ of the Yoneda lemma?
07:16:40 <Darius> Morphisms in a category are the same as natural transformations into Set.
07:17:04 <skew> in what sense?
07:22:58 <Darius> Natural transformations between set-valued functors (particularly the hom-functor) determines a morphism.
07:30:48 * SyntaxNinja figured it out :)
07:30:51 <TripleDES> hi
07:31:11 <SyntaxNinja> its true that 1B ;1B = 1B, right?
07:31:32 <SyntaxNinja> hi TripleDES
07:31:53 <Darius> 1B;x = x no matter what x is.
07:33:03 <SyntaxNinja> right
07:33:04 <SyntaxNinja> OK :)
08:24:59 <shapr> hiya!
08:25:04 <skew> Does anyone know of a library for basic text processing, like python's string methods? I'm looking for simple stuff like splitting a string on some substring
08:26:06 <shapr> skew: break
08:26:18 <dennisb> skew: yes, the normal list functions can do a lot
08:26:20 <shapr> there are also some spiffy functions in the lambdabot sources
08:26:30 <dennisb> or some parser library
08:26:37 <Darius> or a regex library
08:26:54 <dennisb> Darius: that would have been my next thing to say
08:26:57 <skew> shapr: That only works for single characters, and only breaks once
08:27:13 <skew> I just want to do simple things like splitting a string at whitespace
08:27:20 <dennisb> words
08:27:27 <shapr> skew: http://shapr.homelinux.net/~shae/Util.hs
08:28:09 <shapr> you'll probably like join and split from that module
08:28:23 <skew> dennisb: Of course. That works for what I'm doing here, but not so nice for comma delimited fields or whatever
08:28:39 <skew> shapr: Yeah. I wrote split myself, but I hoped somebody had already done it
08:28:39 <shapr> there are some CSV modules out there.
08:29:37 <dennisb> skew: parserlibs like parsec makes it very easy to parse strings
08:29:59 <skew> dennisb: Yeah, but it's overkill for many simple things
08:30:39 <skew> It's certainly nice for interpreters and so on, but sometimes I just want to hack apart a string.
08:30:40 <dennisb> maybe, it comes with the compiler so it's easy to use. Most of my programs don't depend that much on the parse speed anyway
08:31:45 <dennisb> and I'm not comvinced that anything else is much faster, strings are slow in haskell anyway
08:32:21 <skew> I'm not worried about speed. I just was some basic functionality like the string methods in python to bridge the gap between pattern matching and regular expressions in the power vs. complexity tradeoff
08:32:29 <dennisb> ok
08:32:51 <dennisb> I guess I'm just used to parsec so the gap is small enough
08:33:09 <skew> Would you use it for something like splitting a string around a colon in the middle?
08:34:31 <dennisb> skew: I don't know what the python lib offers
08:35:00 <skew> http://www.python.org/doc/current/lib/string-methods.html
08:35:15 <skew> simple stuff like finding substrings
08:36:11 <dennisb> skew: I've used regexps to do simple things like splitting on a colon
08:36:16 <skew> At least, that's what I'm mostly interested in. padding a string to a fixed width, stripping whitespace, etc.
08:36:23 <dennisb> ok
08:36:40 <dennisb> I have no such lib ready for you. I agree that it is useful
08:38:20 <skew> So it's not already done. Okay, it goes on my list of things that I will get around to doing sometime after the heat death of the universe.
08:39:24 <dennisb> I guess most people write it when they need it. Most of these things are small and simple. I've written these things many times myself :-)
08:39:32 * Smerdyakov frowns.
08:39:49 <Smerdyakov> I don't think libraries are very useful after the heat death of the universe. :-(
08:39:51 <skew> I'm morally opposed to code duplication
08:40:08 <dennisb> skew: that's why I put in the :-) at the end
08:41:13 <shapr> well, let's get some code together and create Data.String
08:41:26 * esap knows some people who prefer code duplication over managing libraries.
08:41:32 <skew> shapr: Maybe Text.Utils
08:41:33 <dennisb> it's a tradeoff, introducing a lot of names for very simple things maybe is not the best either
08:41:39 <shapr> skew: that's far too sensible.
08:41:58 * shapr gives in to sensibility.
08:42:07 <shapr> I'm insensed!
08:42:09 <skew> dennisb: well, that's what the higherarchial module space is for.
08:42:20 <shapr> hierarchical?
08:42:34 <shapr> higherarchial is punny :-)
08:43:09 <shapr> if you take it to be a political comment on the library structure of GHC, then it's very punny.
08:43:10 <skew> dennisb: I'd prefer to have a module with lots of little stuff in it to writing the little stuff
08:43:37 <skew> not many functions have a definition shorter than import Module.For.Doing.Some.Incredibly.Obscure.Taks
08:44:17 <dennisb> for example, one could create a lot of functions like: eatWhite = dropWhile isSpace   at some point it stop being useful and just introduce noice. That said, there are functions missing that ought to be written
08:44:25 <shapr> this Brody Armstrong chick from The Distillers is a gorgeous punk chix0r
08:45:16 <skew> I think a vaugely Huffman approach is good for things like that
08:45:31 <shapr> solve it in class? :-)
08:46:06 <skew> If most of your code is dropWhile isSpace, defining eatSpace (or lstrip) is a good idea
08:47:14 <shapr> subset of Python 2.3.2 string methods: 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'replace', 'rfind', 'rindex', 'rjust', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'
08:47:42 <shapr> I got that from dir(''.__class__)
08:51:04 <skew> How usefull is the capitalization? Other than that, I'd say everything that's actually a string method would probably be useful. It's useful enough they put them in python, anyway
08:51:49 <dennisb> I don't know the python functions, but let me guess:  isalnum = all isAlphaNum  (same for all isxxxx) upper = map toUpper  lower = map toLower  startswith = isPrefixOf   join x = concat . intersperse x
08:53:03 <dennisb> padding is something I would like to have, and some printf-like function but simpler
08:53:04 <skew> Yeah. Python doesn't have a separate character type, so some of those are really character methods (we've got them in Data.Char)
08:53:22 <skew> Yeah, there's not really a good alternative to Printf for formatted output
08:54:13 <dennisb> on the other hand, the pretty printer libraries are a favorite of mine. Really cool and I've not seen anything as good in any other language
08:54:25 <dennisb> maybe I've just not looked enough
08:54:46 <Darius> skew: Read Functional Unparsing?
08:54:52 <skew> Yeah, they're great for code-like or tree-like stuff, but I haven't seen a pretty printer library that would do nice tables
08:56:18 <skew> reading
08:56:46 <dennisb> tables would be nice to have, yes
08:58:27 <Darius> actually, dennisb might be more interested in it.
08:59:24 <skew> It looks very nice. I'm surprised we don't have it already?
09:00:07 <dennisb> Darius: I've read that. And it's not a solution to the problem
09:01:48 <skew> dennisb: which problem?
09:02:18 <skew> sure, it seems mostly to be reorganizing use of basic text processing functions
09:02:46 <skew> Actually, that's more the problem. We have Show, but no functions like "print this float with two digits precision"
09:03:16 <skew> Well, that's the problem if you are trying to print tables of numbers with specified precisions and so on, which printf is nice for.
09:03:23 <dennisb> there is one more aspect of strings that we have not talked about yet, and that is that all strings in a program should be translated and format strings is the only way to do that in a sensible way as I know of if
09:03:56 <dennisb> we need printf just so we can use something like gettext
09:05:31 <Darius> Numeric.showFFloat (Just 2) pi ""
09:06:13 <skew> Hey, how did I miss that?
09:06:17 <skew> thanks
09:08:35 <dennisb> I would be happy just with something simple: printf (_ "Foo %d Bar %s") [Int 23, Str "Dennis"] and then the translator can work on the string "Foo %d Bar %s". (Norpan hacked together gettext in haskell using a unsafe _ a year ago or so)
10:41:46 <palomerway> say I wanted to create a list from another list like this: choose any three elements from the starting list, and add them to get a single element in the new list, such that the new list will have nC3 elements, how would 
10:41:49 <palomerway> I do that?
10:42:09 <skew> a list comprehension, probably
10:42:24 <skew> or you could use do notation
10:42:36 <palomerway> oh, there's no elegant haskell way to do this?
10:42:46 <skew> I just gave two, I thought
10:42:59 <palomerway> how would I do it with a list comprehension?
10:43:38 <SyntaxNinja> [(a,b,c) | a <- l, b <- l, c <- l]
10:44:16 <palomerway> don't you mean [a+b+c|a <-l, b <-l,c <-l]?
10:45:00 <palomerway> and wouldn't that give you a+a+a, for some a in l?
10:45:23 <SyntaxNinja> well, I wasn't sure what you mean by "add"
10:45:51 <SyntaxNinja> ah yeahj
10:47:32 <palomerway> oh, I meant add 3 distinct elements
10:48:35 <skew> add a /= b, a /= c, b /= c to the end of the comprehension
10:49:04 <SyntaxNinja> but that would mess up a list w/ duplicates
10:49:11 <palomerway> but that'll give me duplicates, namely a + b + c, c + b + a, for some a,b,c in l
10:49:41 <SyntaxNinja> palomerway: and owuldn't work for [1,1]
10:49:49 <skew> Hmm transpose = sequence
10:50:12 <palomerway> SyntaxNinja: not working for [1,1] is ok
10:50:45 <SyntaxNinja> palomerway: your list doesn't have duplicates?
10:50:46 <palomerway> it'll actually give me sextuplets 
10:51:20 <palomerway> SyntaxNinja: my new list chooses 3 elements from the old list, and adds them, then chooses another 3 elements...
10:51:39 <skew> removing the elements?
10:51:53 <palomerway> skew: removing elements?
10:53:07 <skew> Do you mean a number is never used again, or any particular three elements are added only once?
10:54:54 <palomerway> any 3 are only added once
10:55:56 <skew> Okay. I think you want a paramorphism, but I don't remember if Haskell has a standard list paramorphism
10:56:05 <skew> just a minute, I'll write some code
10:56:09 <harsha> Hello all!
10:56:20 <harsha> hey shapr 
10:56:51 <SyntaxNinja> hey shapr
10:56:56 <harsha> hi SyntaxNinja 
10:57:07 <SyntaxNinja> heh hey harsha
10:57:34 <harsha> :) attended a three day linux conference
10:57:41 <harsha> had a lot of fun!
10:58:10 <SyntaxNinja> cool!
10:58:12 <harsha> migeul de Icaza, Nat friedman, Garbee all were there!
10:58:34 <harsha> rasmus was also here...
10:58:38 <andersca> oh, the bangalore one
10:58:46 <harsha> andersca yeah :)
10:58:59 <harsha> it was kinda.. good.. 
10:59:01 <andersca> miguel and nat are nice
10:59:30 <harsha> but the slashdot reviews were pretty bad.. dunno why people had to go so far to comment
10:59:47 <andersca> harsha: slashdotters are idiots
10:59:51 <andersca> that's a well-known fact
10:59:55 <harsha> andersca , i got some pictures with them too :)
10:59:59 <harsha> hehehe :) 
11:00:52 <harsha> andersca yeah, spoke to them for a while.. really cool guys!
11:01:19 <andersca> I remember meeting them at the first gnome conference three and a half years ago
11:01:38 <harsha> what could be their age?  i guess they are pretty young.. :)
11:02:18 <harsha> basically it was a lot of fun, trust me it was :)
11:02:24 <andersca> yeah
11:02:24 <skew> palomerway: Hmm, I guess it's not a simple paramorphism after all. Oh well, I'm off to lunch at a new Thai place. Ask somebody else if you need help
11:02:39 * palomerway is shocked!
11:02:51 <palomerway> does haskell have lists and list comprehensions?
11:03:34 <harsha> banglored als
11:04:55 <SyntaxNinja> palomerway: yes
11:05:00 <SyntaxNinja> what are you shocked about?
11:05:08 <harsha> marcello cming next year 
11:06:43 <harsha> Ok guys, have fun meet you all tomorrow!
11:06:47 <andersca> later
11:06:48 <harsha> bye andersca :)
11:06:56 <harsha> bye SyntaxNinja 
11:10:43 <palomerway> I mean set and set comprehensions
11:13:03 <keverets> is there a nice way of outputting an Int as hex?
11:13:17 <keverets> Prelude has readHex, but no showHex
11:13:22 <SyntaxNinja> palomerway: no, no set comprehensions
11:13:36 <SyntaxNinja> and no built-in sets
11:14:26 <SyntaxNinja> showHex is in the Numeric module
11:14:31 <keverets> ah, thanks.
11:14:52 <SyntaxNinja> keverets: have you seen the library report: http://www.haskell.org/onlinelibrary/
11:14:58 * palomerway thinks we should be able to extend the list comprehension syntax to include arbitrary data structures
11:15:25 <SyntaxNinja> palomerway: well, I believe that list comprehensions just get expanded into maps and filters
11:15:51 <SyntaxNinja> so you could make a typeclass that has map and filter and write a preprocessor with those types
11:15:55 <Darius> palomerway: List comprehensions used to be monad comprehensions.
11:15:57 <keverets> SyntaxNinja: hadn't yet.  Thanks.
11:16:06 <SyntaxNinja> keverets: no problem.
11:17:40 <palomerway> so I could extend the list comprehensions to include sets?
11:17:52 <Darius> No
11:18:51 <whee> you could probably use something like ghc's template haskell and implement something like it
11:19:42 <palomerway> template's are not in haskell? only in ghc?
11:20:14 <SyntaxNinja> palomerway: template haskell is an extention to haskell, and not complete, let alone standard.
11:20:29 <Darius> whee: If you did that (unless you threw in some domain specific compile-time optimizations) you might as well use bindSet/returnSet/guardSet functions.
11:20:30 <palomerway> it's for generic programming, right?
11:21:14 <Darius> It's for compile-time metaprogramming.
11:22:57 <palomerway> isn't meta programming for performance?
11:23:11 <Darius> .. no particularly
11:23:16 <Darius> no==not
11:23:50 <Darius> You're probably thinking of template metaprogramming in C++, but even there it isn't particularly about performance either.
11:24:33 * palomer is off to read about it
11:24:45 <Darius> And for just metaprogramming (as opposed to compile-time metaprogramming) there'd likely be a rather large performance cost.
11:25:07 <Darius> in the run-time case.
12:11:37 <esap> Hmmm.. is it possible to divide an unit of adjunction into two inverse parts? [what about the counit?]
12:12:38 <ham[home]> hiho
12:12:49 <ham[home]> is there any good image manipulation libary for haskell?
12:13:24 * esap suggests using FFI.
12:13:44 <ham[home]> so wrapping it myself?
12:14:30 <esap> well that's one possibility, then you get what you want [you can choose any of the gazillion different libraries to wrap]
12:15:04 <ham[home]> true but if there was one ready to use one i would be more happy :)
12:16:23 * esap is not aware of any image manipulation libraries.
15:56:55 <ecraven> anyone here know anything about sequent calculus?
15:57:18 <Smerdyakov> Yes.
15:57:27 <Smerdyakov> Not very much, though!
15:57:37 <Lor> Something, yes.
15:58:20 <ecraven> hm.. what can i do if i get   \Phi,\psi_1 \vdash \Psi\psi_1 .. i.e. \psi_1 on both sides.. can i somehow eliminate it on one side?
15:59:13 * Smerdyakov tries to process what that means.
15:59:19 <Lor> Yes, it's the axiom.
15:59:34 <ecraven> how does the axiom go?
15:59:40 <ecraven> sorry for the LaTeX..
15:59:45 <Lor> A => A
16:00:08 <Lor> In sequent calculus, I think => is used more than |-
16:00:50 <Lor> Well, there are many sequent calculi.
16:00:50 <ecraven> our prof. is using |- ;-) so can i proceed from A,a |- B,a to A,a |- B ??
16:01:02 <ecraven> i.e. just drop the a to the right?
16:01:08 <Lor> Certainly not.
16:01:39 <ecraven> ok.. 'cause that's what our professor did in one of his proofs.. so i assume this is an error he made. ;-) thanks a lot!
16:02:09 <Lor> Waitasec, I'll check.
16:02:15 <Lor> As I said, there are many sequent calculi.
16:02:38 <Lor> You're obviously using one of the classical (not intuitionistic) versions, but there are even then many variations with different proof-theoretic properties.
16:03:14 <Lor> Right. In (one) classical version, the axiom is A,a => b,B
16:03:28 <Lor> No. Duh.
16:03:30 <ecraven> ;-) anyway, i'll need to read some more on those.. 
16:03:32 <Lor> A,a => a,B
16:03:33 <Lor> of course.
16:03:44 <ecraven> but i still can't drop the a?
16:04:13 <Lor> If A=>B were an axiom for arbitrary A and B, it wouldn't be much of a logic, now would it? :)
16:05:02 <ecraven> i meant can i drop the a on the right side
16:05:12 <Lor> No.
16:05:16 <Lor> Think about what it would mean.
16:05:57 <ecraven> i just assumed it was my fault it seemed wrong..
16:06:27 <Lor> Uh. Look. It's hard for me to advice you without knowing the exact formal system you're dealing with.
16:06:41 <Smerdyakov> Lor, "advise"
16:06:45 <Lor> Ah, right.
16:07:56 <ecraven> well, thanks for the help anyway, i'll ask tomorrow whether it's an error or not ;-)
16:08:02 <ecraven> good night 
16:09:46 <Lor> Right. Night.
16:19:47 <Pseudonym> I send you this proof in order to have your advice.
17:00:36 <amb> Heya :-)
17:01:04 <amb> I know this is absolutely the wrong place to ask, but hey, no risk no fun...
17:01:18 <amb> so, can you help me with a short prolog problem?
17:01:22 <Pseudonym> So you won't mind when we mock you, then?
17:01:30 <amb> np *g*
17:01:35 <Riastradh> *mock*mock*mock*
17:01:39 <Pseudonym> Eeeuuw.  Depends how short.
17:02:07 <amb> lol, thanks :-)
17:02:08 <Pseudonym> Don't use Prolog.  Problem solved.
17:02:10 <Riastradh> Like <---------> this short, or <---------------------------------------> this short?
17:02:16 <amb> it is pretty short
17:02:17 <Riastradh> The second one is too long.
17:02:38 <Pseudonym> More than a millifurlong is too long.
17:02:53 <amb> *g*
17:03:08 <amb> Do you mind if I post 4 lines?
17:03:11 <amb> hi ski
17:03:14 <Riastradh> Just hurry up and ask it.  I've only got <--------------------> that much time.
17:03:18 <amb> ok
17:03:19 <amb> verwandt(X, Y):-
17:03:19 <amb>   nahverwandt(X,Y).
17:03:19 <amb> verwandt(X,Y):-
17:03:19 <amb>   verwandt(X,Z), nahverwandt(Z,Y).
17:03:36 <Pseudonym> verwandt is your language for "path", isn't it.
17:03:48 <amb> well, kind of
17:03:54 <amb> it means it is related to :-)
17:03:55 <ski> amb : hi
17:03:57 * Pseudonym can tell these things
17:04:01 <Pseudonym> Anyway, go on.
17:04:03 <amb> *g*
17:04:16 <Pseudonym> Or shall I tell you the answer before you ask?
17:04:26 <Pseudonym> 'Cause I know what you rprolem is.
17:04:27 <amb> well, just answer then :-)
17:04:40 <Pseudonym> Second clause.  Make it tail recursive instead.
17:04:59 <Pseudonym> verwandt(X,Y) :- nahverwandt(X,Z), verwandt(Z,Y).
17:05:13 <amb> wow, thanks :-)
17:05:13 <ski> heh
17:05:39 <ski> that was fast
17:05:42 <Pseudonym> Do you see why?
17:06:17 <amb> not really :-/
17:06:18 <ski> Pseudonym : depends though on the mode ..  (in Prolog)
17:07:16 <Pseudonym> ski: True.  An (in,in) mode will work using that code, probably.
17:07:22 <Pseudonym> Any other mode won't.
17:07:44 <Pseudonym> Ah, no.  That won't work either, because of the recursive call.
17:07:51 <Pseudonym> A bottom-up evaluation rule will work.
17:07:56 <Pseudonym> But that's not Prolog.
17:07:57 <ski> amb : you are probably calling verwandt like :  ?- wervandt(some_node_or_whatever,Variable).  , right ?
17:08:18 <ski> Pseudonym : but an (out,in) mode ...   :)
17:08:36 <Pseudonym> Or (out,out).
17:09:06 <amb> I think so...
17:09:14 <Riastradh> Wow.  This sounds even more arcanely confusing than overloadedly monadic termomorphisms.
17:09:27 <ski> but then there isn't probably much to gain from swapping  (can't tell without looking at the graph, at least)
17:09:32 <Pseudonym> Riastradh: Oh, it gets WAY more awful than that.
17:09:46 <Riastradh> COOL!  Quick, where's a good Prolog tutorial?
17:09:50 <Pseudonym> There are about 50 million papers from the 1990s each giving a semantics for the cut operation.
17:10:13 <Riastradh> So what does it do?  Fifty million different things?
17:10:20 <Riastradh> If so, then it sounds very useful.  Will it do my dishes?
17:10:50 <Pseudonym> One of the possible semantics might indeed do that.
17:10:59 <ski> amb : so, given the left-to-right search of prolog, it will first try verwandt(X,Z), with both X and Z uninstantiated. this is bad, see why ?
17:11:20 <amb> oh, I see
17:11:28 <Pseudonym> Here's a good example.
17:11:30 <Pseudonym> http://citeseer.nj.nec.com/lin95situation.html
17:11:34 * amb hits his head on the desk
17:11:41 <ski> Riastradh : cut is EVIL !   find mercury instead (no cut available :)
17:11:51 <Pseudonym> Mercury does have soft cut.
17:12:10 <Riastradh> Is cut just one of those silly control operators that CALL/CC can generalize in the blink of an eye?
17:12:16 <ski> Pseudonym : if-then-else, yes, not evil
17:12:39 <Pseudonym> Oh, if you want a completely unimpenetrable paper, try Mark Shields' honours theis.
17:12:42 <Pseudonym> thesis
17:13:08 <ski> Riastradh : cut is (somewhat) similar to return in C, in that it interacts with the current predicate it is located in :(
17:13:43 <Riastradh> ski, OK, so it sounds like Yet Another Silly Control Operators That CALL/CC Can Generalize In the Blink of an Eye.
17:13:50 <ski> amb : so, first your X is instantiated to some node (perhaps an atom), and Y is no instantiated, right ?
17:13:52 <Riastradh> (CASCOTCCCCGIBE)
17:14:02 <Riastradh> (er, YA..., not CA...)
17:14:25 <amb> I believe so ski :-/
17:14:38 * amb is actually pretty lost
17:15:07 <Pseudonym> Actually, cut means something operational in the WAM.
17:15:13 <Pseudonym> It doesn't have a good meaning.
17:15:43 <Pseudonym> http://www.cs.mu.oz.au/~lee/papers/prune/ <- good overview
17:16:09 <ski> Riastradh : the (err, an !) evil thing about it is that it is context-dependent about what predicate it is in. think about lifting out a block of code in C to a new function, you have to fix any returns in that block. cut is similar in this respect, but worse. also there are logical problems (and reversabiliy ones ...)
17:16:35 * amb will just start reading
17:16:39 <amb> thanks a lot :-)
17:16:47 <Pseudonym> The other problem is that it interacts horribly with modes.
17:16:50 <Riastradh> So why doesn't Prolog just have CALL/CC?  Do Prolog weirdos just want an excuse to write PhD theses?
17:17:02 <Pseudonym> Riastradh: Because Prolog doesn't even have call.
17:17:10 <Riastradh> Well, bah.
17:17:21 <Riastradh> Fine, it could have SHIFT/RESET.
17:17:35 <Riastradh> Or just CALL/CC as a syntax.
17:17:41 <Pseudonym> Actually, it has assert and retract, which are far, far more evil.
17:17:48 <ski> Riastradh : call/cc can't magically tell you what function you are lexically using it from (never mind that transforming let's to application of lambdas can change that under the hood)
17:19:21 <ski> Pseudonym : agreed
17:19:39 <Pseudonym> Prolog is basically completely evil.
17:20:12 <Pseudonym> Riastradh, imagine you had no Common Lisp, had no Scheme... all you had was Maclisp and your only control structures were call, eval and prog.
17:20:16 <ski> not the basic idea, just the restrictions and non-declarativeness
17:20:19 <ayrnieu> Riastradh - mercury seemed to have interesting points.  Too bad that the project has died AFAICT.
17:20:19 <Pseudonym> That's kinda like Prolog.
17:20:52 <ski> Pseudonym : whaddya mean, 'eval' ?   ('is' ?)
17:21:07 <Pseudonym> eval is kind of like assert
17:21:10 <Pseudonym> Kind of.
17:21:21 <Pseudonym> OK, scrap eval.  You don't have that either.
17:21:25 <Riastradh> Pseudonym, well, then I can just use CPS!
17:21:26 <ski> umm, don't think so
17:22:01 <Pseudonym> Oh, and I forgot.  You also have a garbage collector which only works half the time.  That's important.
17:22:21 <Riastradh> Yikes.
17:22:54 <Pseudonym> That's part of the Prolog experience.  Unless you sprinkle your code with cuts and get your arguments in the right order, you get a lot of memory leakage.
17:23:56 <ski> ayrnieu : dead ?  25 Sep 2003 is the latest news on the page so it must have died quite recently ...
17:24:31 <ski> Pseudonym : elaborate, "half the time",  you mean deallocate on fail ?
17:25:01 <ayrnieu> ski - eh, indeed?  I saw a 2002 as latest last I looked.  What date do you see on the latest release?
17:25:06 <Pseudonym> ski: Fergus just left Mercury.
17:25:13 <Pseudonym> He's gone to work at Galois Connections.
17:25:24 <Pseudonym> As for "half the time", I'm referring to choicepoints.
17:25:26 <ski> he did, that's news to me ..
17:25:33 <Smerdyakov> Oh my. What an awful name for a company. :D
17:25:37 <Pseudonym> Yes, I just found this out earlier this week.
17:26:14 <ski> ayrnieu : i meant news item directly on the main page
17:26:33 <ayrnieu> ski - I can't read the page right now to understand what kind of news it has, and I understood what you said, but OK.
17:28:02 <ski> ayrnieu : well e.g. "mercury-rotd-2003-11-28.i386-pc-solaris2.8.tar.gz" ..
17:28:04 <Smerdyakov> Bleh. Galois Connections. Using formal methods is cool. Using them solely to help government agencies in "national security" is not.
17:28:07 <Pseudonym> The most shocking part, though, was that Tyson left to work at Microsoft.
17:28:21 <Pseudonym> This is the guy who was the university's first Debian distributor.
17:28:44 <Pseudonym> ski: That's automatically generated.
17:28:45 <Smerdyakov> MSR or vanilla MS?
17:28:51 <Pseudonym> Vanilla MS.
17:29:17 <Pseudonym> He's a .NET evangelist or something.
17:31:27 <Smerdyakov> Does anyone else get a bad feeling from seeing a company web site that only has info on the management and none on the developers?
17:33:26 <ski> Pseudonym : where did you hear it ?  (pers. comm. ? ... ?)
17:33:41 <Pseudonym> Personal communication, yes.
17:34:27 <ski> Pseudonym : (ok, didn't think of that, haven't actually installed mercury myself :( )
17:34:40 <Pseudonym> Don't blame you. :-)
17:34:48 <Pseudonym> lunch
17:36:57 <ski> Pseudonym : still there ?
17:44:29 <isomer> Smerdyakov: not if they're a management consulting company, no... :)
18:28:09 <Pseudonym> Back.
18:30:02 <ski> Pseudonym : (just wondered when you heard it. what day ?)
18:35:44 <Pseudonym> Monday.
18:36:26 <Pseudonym> From someone who was at a party with Fergus over the weekend.
18:45:16 <ski> (ok, i see a msg on mercury-developers from him at wednesday ..)
19:19:00 <Tomasso> can anyone tell me where to find some information on program sinthesys?
19:19:11 <Tomasso> how to find the eureka, etc..
19:23:54 <ski> Tomasso : hmm, what do you mean ?   (btw : "synthesis")
19:24:09 <ski> Tomasso : meta-programming ?
19:24:39 <Pseudonym> Or do you mean code generation for high-level languages?
19:44:59 <Tomasso> hmmh
19:51:16 <ski> or staged programming ?  :)
20:29:05 <amb> bye
20:31:58 <Smerdyakov> I miss amb already. :-(
20:35:11 <blackdog> what #haskell needs is 24 hour grief counsellors.
20:40:40 <ski> heh
20:41:24 <ski> (i just spent some time helping amb out with his prolog problems ..)
20:44:18 <blackdog> to paraphrase the unix-haters handbook: "Some people, when faced with a problem, think "I know, I'll used prolog!"
20:44:24 <blackdog> Now they have two problems."
20:44:33 <blackdog> s/used/useg
20:44:34 <blackdog> s/used/use/g
20:46:56 <ski> well, i still think prolog (or better, logic programming) still has it's uses
20:47:58 <blackdog> Perhaps. I haven't seen a really compelling case for it, but I have to admit I haven't looked that hard.
20:48:11 <ski> some things can get pretty annoying, but the basic idea i think is good
20:49:02 <blackdog> to me, it seems that if you happen to want a depth first search, prolog's just dandy, but requires ugliness like cut for doing other things.
20:49:10 <ski> the "reversability" feature is nice, even though in practice 'cut' and 'is' destroy it :(, reason to hate them
20:49:26 <ski> (and assert/retract, of course)
20:50:17 <blackdog> at least in Haskell, the ugly bits have big long ugly names like unsafePerformIO. In prolog, you've got a shorthand for cheating!
20:50:30 <ski> that's what i found so promising about mercury :)    it hasn't any cut or 'is' or assert :)
20:50:47 <blackdog> nice
20:51:33 <ski> and much better reversability than prolog due to automatic (static, internal) reordering of body calls to match the data dependencies
20:52:10 <ski> also it has no *side*-effects, all I/O is declarative (mostly similar to how Clean does it)
20:52:24 <ski> that's another big plus :)
20:52:55 <blackdog> how does the reordering work? Does that mean it doesn't do things in a strictly depth-first style any more?
20:53:30 <ski> well, still depth-first (at least current implementation)
20:54:58 <ski> think of, e.g.   append_3(As,Bs,Cs,AsBsCs) :- append(As,BsCs,AsBsCs),append(Bs,Cs,BsCs).
20:55:52 <ski> if we call this in prolog, with AsBsCs bound to some list, it will yield all splittings of that list in three pieces
20:57:20 <ski> but if we call it with As,Bs,Cs bound to three lists, we really want it to first try the second body call first. Mercury will do this for us, automatically !
20:57:52 <ski> so the reordering i was talking about is (mostly) reordering of conjunctions
20:58:35 <blackdog> Ah, I see. Yes, that's clever.
20:58:52 <ski> they can do this automatically, because it is much easier if we ban the evil side-effects
20:59:09 <blackdog> is it just reordering by most bound variables, or something smarter?
21:01:23 <ski> well, IIRC, first it reorders it so it is an allowable (sequential) ordering at all. then they can micro-fix things like moving an independent predicate that might fail so it gets executed before ones that can't fail, thus getting an earlier failure (which is good)
21:02:54 <ski> you see, in addition to declaring the types of the predicate's args, one also specify the the allowable 'modes' of the predicate   (each mode gets compiled to it's own machine-code snippet)
21:03:09 <ski> so for append/3 we might get
21:03:21 <ski> :- pred append(list(A),list(A),list(A)).
21:03:34 <ski> :- mode append(in,in,out) is det.
21:03:54 <ski> :- mode append(out,out,in) is multi.
21:04:01 <ski> and perhaps some more
21:04:31 <ski> (det = deterministic (one solution), multi = multideterministic (1 or more solutions))
21:05:14 <ski> then the compiler checks that each mode is possibly under some ordering, and compiles that ordering separately
21:05:59 <ski> ok
21:06:06 <ski> any comment ?
21:06:26 <blackdog> No, that all seems in order. :)
21:08:07 <ski> for I/O the world (or a token representing it) is passed around as an unique/linear object. the DCG notation can nicely hide this in way somewhat similar to the do-notation in haskell
21:09:00 <ski> (there also is a thing corresponding to the ST monad in haskell)
21:10:43 <ski> well, it seems that mercury tries quite hard to remove the irritating and annoying problems with cut, 'is', unnessecary choice-points, non-declarativeness, etc .. in prolog
21:11:45 <ski> hello sjj
21:11:56 <sjj> 'lo
21:12:03 <Pseudonym> Sorry, w*rking for a while.
21:12:10 <ski> sjj : are you at melbourne university ??
21:12:18 <sjj> nope, QUT
21:12:23 <ski> Pseudonym : no prob
21:13:01 <Pseudonym> One thing that I liked a lot about true declarative programming in a logic language was multiple return values.
21:13:09 <Pseudonym> No wrapping them up in tuples.
21:13:10 <ski> which stands for ?   (melbourne is the only one i know (the name) of in australia)
21:13:23 <Pseudonym> QUT = Queensland University of Technology
21:13:25 <Pseudonym> It's in Brisbane.
21:13:29 <sjj> ahh. Queensland University of Technology
21:13:36 <Pseudonym> Right near Parliament House in Brisbane,.
21:13:41 <sjj> yep
21:14:17 <Pseudonym> It's odd.  You're standing in the grounds of Parliament house, go for a short walk, then with no ceremony, you're in the university.
21:14:22 <ski> Pseudonym : yes, in a way one could say that logic programming predicates generalizes  in/out modes of procedures in e.g. Ada, but in a declarative way
21:14:30 * Pseudonym is still unsure where the boundary is
21:14:47 <sjj> I think there's a somewhat casual fence
21:14:53 <Pseudonym> ski: Yes.
21:15:06 <Pseudonym> The trouble is that logic programming's strength is also its weakness.
21:15:11 <Pseudonym> Functions have very well-defined data flow.
21:15:25 <ski> Pseudonym : boundary of what ?   university / parliament ?   declarativeness of Prolog vs Ada ?
21:15:42 <Pseudonym> Which means they're easier to grok for both the programmer and the compiler.
21:15:51 <Pseudonym> Now the programmer usually doesn't have any trouble.
21:16:11 <ski> that where explicit modes help
21:16:24 <ski> s/that/that's/
21:16:25 <Pseudonym> No.  Hang on, w*rk.  Will elaborate in a moment.
21:16:30 <ski> sure
21:17:27 <ski> sjj : so, you're studying haskell at QUT ?  :)
21:17:46 <sjj> not currently, although I did.
21:17:51 <ski> ok
21:18:06 <sjj> They only have the one haskell course which is a cross between haskell and compilers
21:18:14 <ski> ah
21:18:43 <ski> so did you got to learn it some, or not much at all ?
21:18:54 <sjj> in fact, I think every Australian University has a haskell course somewhere...
21:19:03 <ski> perhaps
21:19:13 <blackdog> Sydney Uni doesn't any more, I think.
21:20:55 <sjj> hrm, some ;) about as much as the Simon Thompson book teaches
21:22:27 <ski> ok
21:23:23 <sjj> I haven't used it in quite a while however.
21:44:11 <ski> well, i'll have to go now ..
21:44:15 <ski> bye
21:52:47 <Pseudonym> Oh wekk,  He doesn't get an explanation.
21:52:57 <Pseudonym> s/k/l/g
22:04:32 <Darius> Prolog-bashing? Yay!
22:05:50 <Pseudonym> Absolutely.
22:06:02 <Pseudonym> We almost got to the Mercury bashing.
22:06:13 <Pseudonym> Alas, it was not to be.
22:38:26 <Pseudonym> Nytol
