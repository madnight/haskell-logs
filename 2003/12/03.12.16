01:04:09 <kosmikus> Darius: do you (or does anyone else) know why that is (i.e. which parts of the moon appear lit)?
01:23:10 <det> surely the entire moon isnt facing the sun at once!
01:31:27 <kosmikus> det: so far it's clear; i'd be interested to know on what it depends if you see the half moon horizontally or vertically or something in between, because the angle obiously changes over time ...
01:52:40 <Cale> kosmikus: the moon goes around the earth, and both go around the sun.
01:53:04 <Cale> also, the earth is rotating
01:53:49 <Cale> the biggest factor would be the position of the moon relative to the earth
01:54:49 <Cale> (factoring out the rotation of the earth)
02:22:39 <earthy> it's more complex than that.
02:23:01 <earthy> the moon rotates around its own axis in exactly the same period that it does revolve around the earth
02:23:11 <earthy> so, seen from earth you always see the same side of the moon
02:23:59 <earthy> and the axes of rotation for the earth/moon-complex around the sun and the rotation of the moon around the earth are not parallel
02:24:42 <earthy> nor is the rotational-axis of the earth itself parallel to either of those
02:25:44 <TripleDES> morning
03:36:55 <Lunar^> shapr: I misunderstood.. sebc will be here on friday
03:56:30 <shapr> GOOD MORNING #HASKELL
04:05:21 <shapr> so, anything exciting going on today?
04:05:25 <phubuh> HELLO SHAPR!
04:05:30 * shapr snickers
04:05:40 <phubuh> my coccodynia is getting better, I think
04:06:17 <shapr> Igloo: that code does something, but I can't tell what, might be having problems with the forced fullscreen of ion
04:06:47 <shapr> gim|570: what does the 570 mean? CS-570 or so?
04:06:57 <shapr> @fortune
04:06:58 <lambdabot> Or you or I must yield up his life to Ahrimanes.  I would rather it were you.
04:06:58 <lambdabot> I should have no hesitation in sacrificing my own life to spare yours, but
04:06:58 <lambdabot> we take stock next week, and it would not be fair on the company.
04:06:58 <lambdabot> 		-- J. Wellington Wells
04:07:42 <phubuh> shapr: if you have a new version of ion, you can create a workspace callled WFloatWS:something, and you'll get a workspace in which windows are floating
04:08:22 <shapr> I used ion-devel for awhile, but I grew tired of the incompatible upgrades
04:08:32 <shapr> so I switched back to 0ld sk00l ion
04:09:19 <phubuh> I use ratpoison
04:09:53 <shapr> I tried ratpoison, but it seemed a bit too ascetic to me
04:10:50 <shapr> SPJ mentioned an interesting url on the libraries list, http://www.edite-de-paris.com.fr/~fpons/Caml/Ressources/dsInCaml.html
04:10:55 <phubuh> it's terrible with many windows, which helps me maintain an uncluttered desktop :-)
04:11:16 <shapr> someone is auditing mostly ML and a few Haskell apps to see which data structures are most used
04:13:01 <phubuh> wow, CCured looks nifty
04:20:13 <shapr> hiya, interesting nickname
04:20:28 <dam_ned> are you talking to .. me?
04:20:32 <shapr> yup
04:20:40 <shapr> learning Haskell? looking for other users?
04:21:05 <dam_ned> learning haskell
04:21:12 <dam_ned> and having a problem :(
04:21:34 <shapr> well, if it's not homework, we can help
04:21:49 <shapr> if it is homework, it would be unethical for us to help you directly
04:22:04 <dam_ned> hehe no homework, don't worry :)
04:22:14 <dam_ned> Cannot build superclass instance
04:22:28 <shapr> superclass?
04:22:31 <dam_ned> i know the problem, but I can't seem to fix it
04:23:17 <dam_ned> i am trying to implement the example from a gentle introduction to haskell98
04:23:20 <shapr> ah
04:23:30 <dam_ned> so I have
04:23:49 <dam_ned> data R a = R (Resource -> (Resource, Either a (R a)))
04:23:49 <dam_ned> instance Monad R where
04:23:50 <dam_ned> ...
04:23:52 <dam_ned> and
04:23:54 <shapr> I haven't gone back and read the gentle intro since I complained bitterly about it, I wonder what it shall be like in hindsight.
04:24:05 <dam_ned> instance Num a => Num (R a) where
04:24:06 <dam_ned> ...
04:24:36 <shapr> I'll be in brussels for Christmas...
04:24:48 <dam_ned> and the problem is, that I need an Eq (R a) to be able to implement Num (R a) :(
04:24:52 <dam_ned> aha nice :)
04:25:08 <shapr> so, can't you define R a as an instance of Eq ?
04:25:37 <dam_ned> tried that a 100 times, but I'm missing something I suppose
04:25:52 <shapr> did you get an error?
04:26:25 <dam_ned> when I add simply those lines ( i know it doesn't work)
04:26:27 <dam_ned> instance Show a => Show (R a) where
04:26:27 <dam_ned> instance Eq (R a) where
04:26:37 <dam_ned> i get a segfault when trying to use it :p
04:26:51 <shapr> a segfault!
04:27:05 <shapr> have you tried this with both GHC and Hugs?
04:27:08 <kosmikus> ah, the wonders of static typing :)
04:27:15 <dam_ned> only hugs
04:27:28 <shapr> hoi kosmikus, hoe gaat het met jou?
04:27:32 <dam_ned> so the hugs evaluator crashes (C stack overflow)
04:27:34 <kosmikus> goed, en met jou?
04:27:45 <shapr> bara bra :-)
04:27:45 <dam_ned> met mij ook ;)
04:27:53 <dam_ned> buiten die crash :)
04:28:12 <shapr> dam_ned: sadly, that's nearly all the dutch I know
04:28:26 <shapr> I'm better with swedish and french.
04:28:29 <dam_ned> shapr: ah ok ;)
04:28:51 <dam_ned> I should know french here in brussels, but english is simpler :)
04:29:25 <shapr> For Christmas, I'm spending a few days in Leuven, and a few days in Lille.
04:29:27 <dam_ned> installing ghc :)
04:29:58 <shapr> This will be my first time visiting more than airports in either country.
04:30:05 * shapr bounces excitedly
04:30:26 <shapr> It's European adventure time! yay!
04:31:07 <shapr> Actually, I started living in Europe about four years ago, and it still feels like a surprise adventure.
04:31:08 <dam_ned> lol
04:31:16 <shapr> anyways, back to the topic
04:32:07 <shapr> what os and editor do you use? I can give tips on Linux and Emacs.
04:32:09 <dam_ned> I think leuven is much more enjoyable than brussels ;)
04:32:19 <dam_ned> i do use them ;)
04:32:33 <phubuh> it's even easier to give tips on non-Emacs editors
04:33:07 <shapr> if you use haskell-mode in emacs, M-x turn-on-haskell-ghci will enable C-c C-l to dump the current .hs or .lhs buffer into ghci
04:33:24 <shapr> that assumes you have haskell-mode loaded.
04:33:39 <shapr> phubuh: what's the tip? switch to emacs?
04:33:52 <phubuh> indeed
04:34:03 <shapr> actually, I use vi, emacs, and nano depending on the situation.
04:34:16 <dam_ned> and mcedit ! ;)
04:34:21 <phubuh> I used Lisp and SLIME this weekend, and the development environment slightly spoiled me :(
04:34:34 <phubuh> yeah, I use nano occasionally
04:34:40 <shapr> hey phubuh, can you explain varenda, vartenda, and varje? I can't quite figure out how they fit...
04:34:59 <shapr> obviously it en, ett, mÂnga; but I don't really understand what they refer to...
04:35:52 <dam_ned> I just do
04:35:57 <dam_ned> :load filename :p
04:37:14 <phubuh> they're all more or less equivalent with 'every'
04:38:02 <dam_ned> grr
04:38:04 <shapr> I don't think I explained that well. in "mikael och daniel gÂr till sin lagenhet" is it sin because lagenhet is singular? or should it be sina for the plural subject?
04:38:14 <dam_ned> anyone wants to try my .hs file? :)
04:38:21 <shapr> dam_ned: sure, you have it online?
04:38:26 <dam_ned> and see whether it crashes :p
04:38:33 <dam_ned> site or dcc?
04:38:37 <shapr> site
04:38:40 <shapr> or sendfile
04:39:10 <shapr> in english, the possessive matters with the subject "they go to their apartment" "he goes to his apartment"
04:40:03 <shapr> is that true of swedish? or is it the object of the possessive that determines whether the possessive is plural or singular?
04:40:12 <phubuh> I'd say "mikael g√•r till sin l√§genhet", but "mikael och daniel g√•r till deras l√§genhet"
04:40:35 <shapr> ok, thanks!
04:40:45 <phubuh> and "mikael g√•r till sina l√§genheter"
04:41:25 * shapr goes to check that with his homework
04:41:58 <dam_ned> shapr should accept my dcc :p
04:42:01 <phubuh> but nationalencyklopedin says sin works for both, actually
04:44:07 <phubuh> deras might be regional
04:48:41 <dam_ned> shapr: http://134.184.43.5/~adpeeter/test2.hs :)
04:59:04 <dam_ned> hmm, no one interested in trying to run it? ;)
04:59:06 <shapr> phubuh: I figured it out, "de gÂr till deras lagenhet" and "de gÂr till sin lagenhet" are both "they go till their apartment" in english, even though they have different meanings.
04:59:11 <dam_ned> err. load it
05:01:16 <shapr> hmm
05:01:44 <shapr> dam_ned: yah, I get the same error
05:02:34 <dam_ned> instance Show a => Show (R a) where 
05:02:34 <dam_ned> instance Eq (R a) where
05:02:50 <dam_ned> try to add those two lines, does it crash too when you try for example
05:02:52 <dam_ned> inc 1
05:02:53 <dam_ned> ?
05:03:25 <shapr> well, you haven't given any method defs
05:04:06 <shapr> it loads
05:04:13 <shapr> stack overflow
05:04:31 <dam_ned> the same...
05:05:01 <dam_ned> I know I have no methods, I tried all sorts of methods, but they don't seem to work :(
05:06:04 <shapr> I don't know what the problem is in this file
05:06:42 <shapr> but two possible solutions are a) ask someone like Igloo, Heffalump, dennisb, or other clueful person and b) look at the monad definitions in the Prelude.hs for Hugs.
05:34:39 <shapr> @type //
05:34:45 <shapr> @type (//)
05:35:00 <andersca> @type (.)
05:35:00 <lambdabot> (.) :: (a -> b) -> (c -> a) -> c -> b
05:37:18 <dam_ned> thx shapr, I worked around the problem :)
05:37:29 <shapr> what was it?
05:37:54 <dam_ned> I don't need the implementations of Show and Eq, so I left them empty
05:38:10 <dam_ned> although when I would use them, the thing would crash :p
05:38:14 <shapr> strange
05:38:55 <dam_ned> I really don't like the segfault anyway
05:39:23 <shapr> if you're using the latest version of hugs, you should report the bug
05:39:33 <shapr> did you try it with GHC?
05:40:35 <shapr> I haven't used Hugs much since I started with GHC. GHC is slower and larger though, so best for recent hardware.
05:40:43 <dam_ned> yeah, I will report it
05:41:05 <dam_ned> no, I did't try that, I must figure out the 'main' stuff first :)
05:41:11 <dam_ned> didn't
05:41:22 <shapr> oh, that's easy
05:41:36 <shapr> put this as the first line "module Main where"
05:42:13 <Smerdyakov> Haskell module system is lame.
05:42:18 <shapr> in fact, GHC will do some extra optimizations if you tell it which functions you will export
05:42:23 <shapr> Smerdyakov: feel free to fix it.
05:42:34 <shapr> it's open source
05:42:36 <Smerdyakov> No, because ML has a good module system. :-)
05:42:47 <shapr> if you don't want to fix it, don't complain.
05:43:05 <dam_ned> ghehe
05:43:08 <Smerdyakov> I don't exactly follow your reasoning.
05:43:31 <dam_ned> OW this is scary, I click on a link 'ghc' and I end up on a microsoft site :(
05:43:44 <shapr> complaints are useful and constructive when used to improve
05:44:03 <Smerdyakov> Who said I was trying to be useful or constructive?
05:44:29 <shapr> I think that's a safe assumption, given the culture of this channel.
05:45:09 <shapr> otherwise I get all fascist, and no one likes that.
05:46:12 <shapr> hello gim|570, I still wonder what the 570 means
05:47:50 <gim> shapr: 570 is my PC's nickname.
05:48:41 <shapr> oh, I see.
05:48:57 <shapr> are you learning Haskell too?
05:53:02 <SyntaxNinja> y0
05:53:09 <SyntaxNinja> hey shapr. thanks for the mail.
06:06:01 <SyntaxNinja> shapr: speaking of unconstructive, did you see this? http://haskell.org/pipermail/hugs-bugs/2003-December/001430.html
06:06:04 <SyntaxNinja> It's pretty funny :)
06:08:19 <shapr> yah, did you see the reply?
06:08:36 <andersca> hugs-bugs
06:08:37 <SyntaxNinja> yeah
06:08:38 <andersca> I like that name
06:10:18 <shapr> SyntaxNinja: If the english weren't so leet, I'd think it was a practical joke.
06:10:26 <SyntaxNinja> hehe
06:19:51 <SyntaxNinja> the lyrics fort his song are so intense.  the first few times I heard it, I kept thinking, "Did I really just hear that?" http://www.lyricsfreak.com/s/simon-and-garfunkel/124766.html
06:20:07 <SyntaxNinja> (Simon & Garfunkle)
06:20:30 <andersca> @type curry
06:20:30 <lambdabot> curry :: ((a,b) -> c) -> a -> b -> c
06:21:02 <phubuh> I just went outside for the first time since Friday :o
06:21:36 <SyntaxNinja> phubuh: did the sun burn you?
06:21:53 <phubuh> nope, the cold did though
06:22:38 <phubuh> hahaha, that hugs-bugs post is gold
06:26:56 <earthy> ah, goody. an announce of GHC 6.2
06:27:12 <shapr> yay!
06:27:33 <andersca> woo
06:28:16 <shapr> oh man, -e will allow for all sorts of evil tricks
06:28:26 <phubuh> what's it do?
06:28:56 <earthy> evaluate an expression onthe commandline
06:29:10 <phubuh> ooh
06:29:11 <shapr> think perl -e
06:30:16 <shapr> hm, where's the release notes?
06:30:17 <shapr> url is broken
06:30:53 <shapr> oh, now it's up
06:31:47 <shapr> -main-is will be very handy for unit testing
06:32:08 <phubuh> oh, I've been wanting that!
06:32:28 <SyntaxNinja> yes!
06:32:47 <shapr> mmm, System.posix.Temp
06:32:55 <SyntaxNinja> it'll be handy for having more than one main function.
06:33:43 <andersca> ham
06:33:44 <shapr> they've removed MD5 in -package util, and would like a replacement
06:33:45 <andersca> doh
06:33:45 <andersca> man
06:33:53 * shapr looks at Igloo 
06:33:54 <andersca> you can really write all functions like foldr :)O
06:34:24 <phubuh> hey andersca, I want to write GNOME applications in Haskell :-)
06:34:35 <andersca> phubuh: then go ahead
06:34:35 <andersca> :)
06:34:41 <andersca> phubuh: seriously, check out gtk2hs.sf.net
06:34:45 <andersca> phubuh: what distro are you on?
06:34:50 <phubuh> debian
06:35:20 <shapr> are the new *_GE  functions it Data.FiniteMap actually useful?
06:35:22 <andersca> ok
06:35:37 <shapr> w00, initial x86-64 support!
06:36:24 <phubuh> a bonobo binding to use along gtk2hs would be perfect
06:36:32 <phubuh> I wonder how that'd play with the type system, though
06:37:03 <andersca> phubuh: we don't really use bonobo anymore
06:37:09 <phubuh> oh
06:41:34 <gim> shapr: I'd tried to learn Haskell myself. My favorite language is C++ and nml(dialect of ML). Haskell and Clean are interesting but I need some study.
06:42:41 <Igloo> 6.2? Eeek
06:43:17 <gim> In fact, I'm interested in Clean 2.0.2's Dynamics and corresponding Haskell issue(i.e. concurrent Haskell).
06:43:55 * SyntaxNinja starts Igloo's package timer
06:44:02 <SyntaxNinja> hey while you're at it, package evolution 1.5 :)
06:46:20 <phubuh> bah, the new ratpoison doesn't have C-t e for starting emacs
06:46:29 <phubuh> maybe the developer switched to vim
06:47:11 <phubuh> it has tab completion though, whee
06:49:31 * Igloo passes Syn #101506 and #119263 to keep him quiet for a bit  :-P
06:51:52 <phubuh> hmm, openDisplay :: String -> IO Display in HSX11, I wonder if I can somehow make it pass a null pointer to get the default display
06:54:27 <shapr> hei aleator 
06:54:35 <aleator> Hi shapr!
06:55:32 <shapr> gim: concurrent is the preemptive threading part of Haskell, is that called Dynamics in Clean?
06:56:55 <shapr> andersca: hey, who do you need to ask about getting an IPv6 address if you're at chalmers?
06:57:28 <andersca> shapr: dunno if you're at chalmers
06:57:47 <shapr> oh, I thought it was you who said something about getting IPv6 addresses at chalmers
06:57:51 <shapr> I must be confused
06:58:07 <gim> In clean, previous version has concurrent lasguage feature, but from 2.0.0, is got rid of.
06:58:21 <shapr> gim: why?
06:58:50 <gim> In order to, some library called Dynamics is added. I don't know about its detail.
06:58:59 <shapr> interesting
07:00:07 <gim> S.P. Jones commented about it:
07:00:21 <gim> http://www.haskell.org/pipermail/glasgow-haskell-users/ 2002-January/002778.html
07:01:31 <shapr> oh, I think that's something different
07:01:57 <shapr> Dynamics allow you to turn a typed value into a bunch of bits, and back again.
07:02:22 <gim> Yes, it seems ``here be dragon'' it type world.
07:02:28 <gim> but interesting
07:02:30 <gim> :-)
07:02:49 <shapr> yes, it is one of the dragons
07:03:13 <shapr> it's hard to save a typed value to a file unless it's one of the most basic types
07:03:44 <gim> event it's one of the most basic types. :-(
07:03:49 <gim> even 
07:05:20 <shapr> the most basic types can use Read and Show
07:05:24 <shapr> but higher stuff gets harder
07:05:38 <gim> Ah... Read and Show class!
07:07:04 <kosmikus> you can still use read and show
07:09:47 <shapr> but, only if you have the type in the type table already
07:10:09 <shapr> I don't think you can load the type representation and the value from the drive
07:10:31 <shapr> or from a string, or whatever
07:11:03 <kosmikus> I understand what you mean now
07:11:24 <shapr> can ML or Clean do that?
07:11:33 <shapr> or other Haskelly language?
07:12:08 <kosmikus> Clean might be able to, but I'm not entirely sure
07:12:14 <gim> humm. type table, you mean?
07:12:47 <gim> Clean might be... but no idea in ML family.
07:12:49 <earthy> Clean is able to.
07:13:06 <earthy> it stores the graph-representation to disk
07:13:15 <shapr> I mean, if I want to save a value 'Winter' that's define this way: data Seasons = Winter | Summer | Spring | Fall
07:13:52 <shapr> then if I want to load that value later, the type must be defined already, unless the type description somehow comes with the value
07:14:02 <earthy> ah, not quite. :)
07:14:21 <shapr> ?
07:15:15 <shapr> earthy: not quite what?
07:15:21 <earthy> you could store a *tuple* of type (Seasons, Seasons -> Int) as a Dynamic
07:15:57 <earthy> then match that Dynamic to (d,f) :: (a, a->Int)
07:16:00 <earthy> and then use f d
07:16:26 <earthy> Clean's Dynamic types allow you to do that
07:16:36 <earthy> very cool
07:17:12 <gim> earthy: are you familier in Clean?
07:17:28 <earthy> gim: reasonably. it was the programming language I learned functional programming in.
07:17:34 <earthy> back in 1994. :)
07:17:39 <gim> wow.
07:17:49 <earthy> so Clean 2.0 is somewhat of a different beast and there's stuff I don't know about
07:17:53 <gim> almost time of foundation of Clean
07:18:05 <earthy> nah... Clean is from 'round 1987
07:18:19 <earthy> 1994 was Clean 1.0 already
07:18:42 <earthy> you wouldn't have wanted to deal with 0.5 or 0.8, really
07:19:08 <earthy> Concurrent Clean was cool though. pity that's died.
07:19:15 <gim> :-)
07:20:18 <earthy> but, anyway, the Dynamic typing system in Clean actually carries the typechecker into the runtype system
07:20:24 <earthy> s/runtype/runtime/
07:20:28 <earthy> including the type inferencer
07:20:49 <shapr> I sometimes wish that GHC did that also.
07:20:57 <shapr> though Lor described that as cheezy
07:21:12 <earthy> yes and no
07:21:16 <shapr> on the good side, I'd be able to dynload stuff easily
07:21:39 <earthy> the problem is that the implementation lives off a somewhat closed-world assumption
07:22:22 <earthy> but having the type-engine at runtime is useful
07:23:03 <earthy> maybe Marco Pil should *finally* finish his PhD thesis
07:23:23 <gim> in Clean team?
07:23:26 <earthy> (he did virtually all the Dynamic stuff)
07:59:03 * Igloo gets to comlab to find I haven't set up OpenGL for the new graphics card. *sigh*.
08:16:30 <Igloo> Ooops, slight off-by-a-factor-of-100 issue
08:16:58 <shapr> is that why I could only see part of the picture?
08:17:44 <Igloo> It's still not right, but if you change the "y_frac = ... / 100" to "y_frac = ... / 10000" it'll be slightly better
08:18:06 <Igloo> My OpenGL is too rusty to know how to egt words to appear where I want them unfortunately
08:18:39 * phubuh awaits midnight
08:24:40 <Smerdyakov> phubuh, why?
08:24:46 <kosmikus> shapr: is your darcs repo down?
08:25:12 <phubuh> Smerdyakov: that's when I'm going to see ROTK
08:25:51 <shapr> kosmikus: yes, sadly. I can send you a tgz if you need something.
08:26:19 <shapr> at this point I'm hoping the darcs repo will be back sometime this week. I have the new box put together, but I haven't installed debian on it yet.
08:27:24 <kosmikus> no, I don't need anything -- still have it -- I was just worried that the compilation of darcs 0.9.15 had somehow failed badly
08:39:08 <Smerdyakov> Sweet. I just got notification of my first published paper.
08:39:31 <phubuh> whee, what's the paper about?
08:39:56 <shapr> kosmikus: have you seen the discussion about in-repository refactoring on the darcs-users mailing list?
08:41:43 <kosmikus> shapr: no, didn't really follow the list closely -- where, why?
08:42:53 <shapr> it starts here: http://www.abridgegame.org/pipermail/darcs-users/2003/000920.html
08:43:18 <shapr> it's interesting stuff, I'd like to have a source control system where I can track code across refactorings
08:43:23 <Smerdyakov> phubuh, automated generation of test cases for C programs.
08:45:33 <kosmikus> yes, it sounds interesting
08:46:32 <shapr> imho, the Right Way(tm) would be to have enough darcs patch types to implement refactorings in terms of darcs patches rather than the other way around.
08:46:47 <Igloo> OK, http://urchin.earth.li/~ian/kb/ now works about as well as I intended
08:47:32 <phubuh> interesting that debian has quake 2, but not quake 3
08:47:57 <Smerdyakov> phubuh, to me, that is not very interesting. :)
08:48:27 <Igloo> It either needs better placement of words or, preferably, designed levels though
08:53:10 <shapr> Igloo: very spiffy :-)
08:53:43 <shapr> where do it show my score? :-)
08:53:51 <Igloo> Well, I've done the first bit. Must be your go now  :-)
08:53:54 <Igloo> :-)
08:55:31 <ejt> does anyone here use (o)caml ?  if so how does it compare with Haskell ?  Is it worth knowing both ?
08:55:58 <ejt> (I guess it's strict, so they can have side effects without monads)
08:56:45 <phubuh> I use it, I think it's worth knowing
08:57:14 <ejt> k
08:58:30 <Igloo> Anyone know what OpenAL is?
08:58:31 <Smerdyakov> I prefer Standard ML.
08:58:36 <Smerdyakov> Igloo, open audio library
08:58:49 <Igloo> Ta
08:58:52 <Smerdyakov> Igloo, 3D audio OpenGL alike
08:58:52 <phubuh> it does 3D sound and stuff
09:04:57 <shapr> Igloo: heh, fair enough
09:05:09 <shapr> Igloo: I wonder if I should whip out dark's SDL binding now.
09:05:34 <Igloo> I suspect SDL is the way to go, certainly in the long term
09:06:27 <Igloo> If anyone does feel motivated, working towards a 3D level with bad guys in predesignated places (i.e. like the arcade games with a physical gun) would be cool
09:07:55 * shapr dreams of comp.lang.haskell.sources
09:24:20 <shapr> hello naren 
09:24:30 <shapr> learning Haskell?
09:24:54 <naren> hi shapr .... harsha told me about it... 
09:25:12 <shapr> cool, have you checked out the language?
09:25:23 <naren> well I had some time on hand .. so seeing if I could learn something and contribute...
09:25:28 <shapr> Darius: hey, interesting in-repository refactoring thread on darcs-users
09:25:50 <Darius> shapr: I'll check it out
09:26:11 <naren> shapr: not yet .. I am reading docs on functional programming
09:26:22 <shapr> that's a good place to start
09:27:09 <naren> shapr: I am reading the Chamlers paper.
09:27:29 <shapr> the "Why FP" paper by John Hughes?
09:27:43 <naren> shapr: yes...
09:28:21 <shapr> yup
09:29:25 <naren> shapr: I will trouble u people when I have some problem ... Hope you dont mind.
09:29:36 <shapr> sure, that's what we're here for
09:29:53 <naren> shapr: thanks.
09:32:22 * Igloo shrinks the Debian diff massively. Woo!
09:33:04 <shapr> how'd you do that?
09:34:03 <harsha123> naren: hello mate!
09:34:21 <harsha123> hiya shapr!
09:34:28 <Igloo> A lot of it is either fixes I pushed back to CVS or stuff that came from the CVS development branch (IA64 support was a lot of that)
09:36:10 <shapr> ah
09:36:12 <shapr> hey harsha123 
09:36:55 <naren> shapr: r u on a IPv6 backbone?
09:38:34 <shapr> nope, I'm using the freenet6 debian package to connect to freenet6.net
09:39:02 <naren> shapr: ohhh .. ok.
09:39:24 <harsha123> naren: how is #haskell ? ;)
09:39:48 <naren> harsha123: I am still in #WHY_FP
09:40:00 <harsha123> naren: Ok..
09:40:23 <harsha123> naren: tried ERC? 
09:40:41 <naren> harsha123: Whats ERC?
09:41:48 <harsha123> IRC client for emacs
09:42:28 <naren> ohh no ... 
09:43:05 <naren> did u think of any domain name?
09:43:15 <harsha123> naren: hmm .. have an idea?
09:43:34 <harsha123> naren: something short and simple would be great..!
09:43:45 <naren> xterminal.org
09:44:05 <harsha123> naren: that looks like the website for xterminal...:) 
09:44:12 <naren> fundas.org OR slowrun.org fastwalk.org ...
09:44:23 <harsha123> hmmm fundas.org
09:44:50 <harsha123> where are you getting these from?
09:44:56 <naren> I was checking out some free domains.... well I was in the training room ..(had a lot a time)
09:45:05 <naren> net4domain.com
09:45:11 <harsha123> lemme see
09:46:26 <naren> I was checking the scorecard during the training.
09:46:51 <harsha123> naren: what are you getting trained on?
09:47:03 <naren> IOS.
09:47:06 <harsha123> ok
09:47:12 <naren> its boring...
09:47:45 <harsha123> hehehe.. net4domain.com is net4india's stuff?
09:48:01 <naren> yeah...
09:48:36 <naren> but check out the hosting rates!!! They seem little expensive.
09:48:54 <harsha123> naren: 495 per year.. 
09:49:13 <Smerdyakov> Hosting what?
09:49:22 <harsha123> Smerdyakov: a web server
09:49:30 <naren> hosting website...
09:49:30 <harsha123> Smerdyakov: in India.. :)
09:49:33 <Smerdyakov> http://hcoop.net/
09:49:36 <naren> also a mail...
09:49:37 <naren> yeah
09:50:00 <Smerdyakov> Hang on now, do you mean a dedicated machine, or just that you want a web site and e-mail accounts somewhere?
09:50:31 <naren> just a website and email!
09:50:55 <naren> and ofcourse some cgi or php should be allowed.
09:50:59 <Smerdyakov> That is so painfully cheap that it hurts.
09:51:10 <Smerdyakov> Why do you need it to be in India?
09:51:36 <harsha123> Smerdyakov: firstly we live in india.. and any problems we can call them and set things right..!
09:52:01 <Smerdyakov> Bah.
09:52:10 <Smerdyakov> Online support is quite enough!
09:52:20 <naren> And the trasaction could be simpler...(Rs.)
09:52:44 <Smerdyakov> OK. Did you look at the page whose URL I posted above?
09:52:58 <harsha123> Smerdyakov: i am lookin into it
09:53:38 <harsha123> Smerdyakov: where is www.schizomaniac.net hosted? ;)
09:53:55 <Smerdyakov> Same
09:54:15 <naren> Smerdyakov: Its more expensive than the data centers n India.
09:54:33 <Smerdyakov> naren, it's also much more service.
09:54:43 <Smerdyakov> naren, what rates for what services are you looking at in India?
09:54:48 <Smerdyakov> (In US$ if possible)
09:54:57 <harsha123> naren: tell Smerdyakov  in USD
09:55:06 <naren> Smerdyakov: yeah thats true... services are more.
09:55:09 <naren> wait
09:55:24 <Smerdyakov> I don't believe that it's _much_ more expensive, though.
09:55:28 <Smerdyakov> The price is already very low.
09:55:56 <Smerdyakov> In fact, I'd be surprised if you found a CGI/PHP supporting provider with a lower price.
09:57:22 <naren> the rates vary from 15 to 90 USD.
09:57:35 <Smerdyakov> A month?
09:57:38 <naren> all with CGI support
09:57:44 <naren> a year.
09:58:18 <Smerdyakov> And anything silly like limiting the number of domains you can have without paying extra?
09:58:32 <naren> but there are contrains!!! like number of mailboxes and size 
09:59:03 <Smerdyakov> The lowest price from that list is no more than 3 times as much as we would need.
09:59:15 <naren> And worst part they run RedHat.
10:00:28 <naren> Smerdyakov: but there is not limit on the number of bytes trans..
10:00:28 <harsha123> naren: hmm.. what do you think about hosting it in amogh? we can pay abhas! i guess he will be considerate on the prices..
10:00:59 <naren> harsha123: yeah thats an option.
10:01:03 <Smerdyakov> naren, we'll have the same thing in a few months, I expect.
10:01:59 <naren> Smerdyakov: if u excced the bandwidth used... they do u have a mechanizm to bill indivuals differently...
10:02:21 <Smerdyakov> The mechanism is that people see how much they use and pledge extra that month.
10:02:33 <Smerdyakov> And, like I said, we'll be going to a non-bandwidth-metered setup soon.
10:02:57 <naren> Smerdyakov: Ohhh ... cool..
10:04:28 <harsha123> naren: in local data centers do we have bandwidth limitations?
10:05:06 <naren> harsha123: no... not for our kind of requriment.
10:05:20 <Smerdyakov> naren, what does that mean?
10:06:28 <naren> Smerdyakov: When we are not keeping our machines there in the data centre .. we are not billed for the bandwisth used(there is no limit)
10:07:02 <harsha123> naren: hmm..i dont think i works that way, does it?
10:07:36 <naren> harsha123: wait I will give u the link.
10:08:40 <naren> harsha123 http://www.net4domains.com/perl/info/info.cgi?frm=hstusrlinux
10:10:28 <harsha123> naren: why do these guys limit the number of mail accounts you wanna have? 
10:11:35 <naren> harsha123: no idea...
10:12:08 <harsha123> naren: anyways.. hmm.. do you have a deadline in mind?
10:13:08 <naren> harsha123: sooner the better,
10:13:12 * Igloo crosses fingers, starts the build and gets ready to leave
10:15:24 <naren> 495 or 500 Rs/ yr
10:16:49 <naren> yeah...
10:21:35 <Smerdyakov> naren, you need less than 2 MB for your web stuff?
10:22:01 <harsha123> Smerdyakov: we dont need much
10:22:18 <Smerdyakov> 2 MB is several times smaller than the usual minimum amount provided.
10:22:26 <naren> Smerdyakov: not sure ... I think is I dont need so much
10:23:25 <naren> Smerdyakov: But No of mailboxes is a constraint we have with the data center.
10:23:56 <harsha123> naren: anyone else you think will be interested?
10:24:12 <Smerdyakov> My image collection alone for my personal web site is larger than the amount the 15 USD/yr account fits.
10:24:55 <harsha123> Smerdyakov: do you also have mail ?
10:25:18 <Smerdyakov> Yes
10:25:38 <Smerdyakov> _Everything_
10:25:46 <Smerdyakov> As much as you could have if you ran your own machine.
10:26:03 <harsha123> Smerdyakov: ok
10:26:09 <naren> Smerdyakov: Yes ... but its not a part of 2MB its separate (again limmited)
10:26:26 <Smerdyakov> naren, what?
10:26:35 <naren> Smerdyakov: mail
10:26:39 <Smerdyakov> I know.
10:27:35 <Smerdyakov> From the prices at that data center near you, I think there is no reason to choose it over hcoop based on price.
10:29:53 <harsha123> Smerdyakov: :-)
10:29:53 <naren> hcoop price is fine ... but the initial price(fee) is too high for us.
10:30:12 <Smerdyakov> That's strange. Do you have any income at all?
10:31:44 <naren> Smerdyakov: anyway.. how will it come to?
10:31:52 <naren> Smerdyakov: anyway.. how much will it come to?
10:31:54 <harsha123> Smerdyakov: that could cost us nearly 51637Rs..:)
10:32:08 <Smerdyakov> naren, the web page tells you that.
10:32:34 <Smerdyakov> harsha123, since I have no idea what a rupy buys, that means nothing to me.
10:32:36 <naren> Smerdyakov: it tells a each new user has to pay a share of that 
10:33:01 <Smerdyakov> naren, it gives you the precise information you need. However, it requires reading instead of waiting for the answer to magically appear from the sky.
10:33:43 <naren> Smerdyakov: Quoting from the page "Each new user pays an even share of the US$1147.21 we've spent on hardware costs to date"
10:34:18 <Smerdyakov> naren, read further down.
10:34:27 <Smerdyakov> naren, there's even boldfaced text to indicate where.
10:35:25 <naren> Smerdyakov: sorry I had not read the further portion
10:40:20 <naren> Smerdyakov: whats the mail agent u are using? qmail i guess?
10:40:22 <harsha123> naren: it kinda works out cheap! 
10:40:46 <naren> harsha123: which one?
10:40:53 <harsha123>  hcoop!
10:40:55 <naren> hcoop one?
10:40:58 <naren> yeah ...
10:41:50 <naren> Smerdyakov: how do u plan to make the payments?
10:41:50 <harsha123> unlimited email accounts. and.. no bandwidth limitation.. and  also only around 100Rs per month..
10:41:57 <Smerdyakov> naren, you'll find the mail agent named on the page.
10:42:06 <Smerdyakov> naren, it's exim.
10:42:27 <Smerdyakov> naren, that's left up to each individual member. I just need to receive it in USD.
10:42:35 <naren> Smerdyakov: Ohh.. 
10:43:55 <naren> harsha123: What do u think?
10:44:14 <harsha123> harsha123: hmm.. how do we make payments?
10:45:02 <naren> harsha123: some kind of account transfers?
10:45:18 <harsha123> naren: dunno!
10:45:38 <naren> harsha123: its not a huge amount .. so should not be an issue...
10:46:49 <naren> Smerdyakov: Any suggestions on the payments?
10:46:58 <harsha123> naren:  i just caluculated.. around 3200 (the initial payment), and around 100-200 per month!
10:47:08 <naren> Smerdyakov: rather how to do it?
10:47:29 <Smerdyakov> naren, no. I know nothing about the situation in India.
10:47:52 <harsha123> Smerdyakov: lets put it this way.. how do you pay? :)
10:48:02 <Smerdyakov> harsha123, what? I'm the one people pay.
10:48:27 <harsha123> Smerdyakov: ah ok..
10:48:41 <harsha123> ok how do you accept payments?
10:49:01 <Smerdyakov> Any way.
10:49:10 <Smerdyakov> Anything that causes me to receive USD.
10:49:53 <naren> Smerdyakov: Do have any bank accounts in any multinational banks?
10:50:12 <Smerdyakov> No
10:50:27 <naren> Smerdyakov: Ohh... 
10:51:56 <Smerdyakov> I think it is bad to use this channel for this discussion. Best to ask anything further in #hcoop.
10:52:19 <naren> Smerdyakov: yeah.
10:58:44 <naren> Anyway how whats the status of your Haskell reading?
10:59:09 <harsha123> naren: reading a bit.. need to program more!
10:59:25 <harsha123> naren: things are pretty slow... 
10:59:59 <naren> harsha123: ok.
11:00:31 <harsha123> i was reading about the bayesian filter the other day!
11:00:41 <naren> spam stuff?
11:01:04 <harsha123> yeah
11:01:49 <naren> have u been thru "Why FP" paper
11:02:00 <harsha123> there is a guy at #emacs, Khmar from Cisco ...
11:03:27 <harsha123> naren: yes i have read it
11:04:15 <naren> harsha123:  I am reading that now ... I will be back when I am done with it.
11:05:01 <harsha123> naren: i got to go.. not doin anything here..
11:05:11 <harsha123> naren: feeling sleepy too!
11:05:22 <naren> harsha123: ok bye
11:11:04 <shapr> Ward Cunningham is a really smart guy.
11:31:03 <emu> "Why FP?" "Because computers are too fast" :-P
11:32:49 <Smerdyakov> If computers are too fast, then why does it take 15 seconds for Hello World OS to boot up?
11:36:07 <shapr> it's checking your drive for copy-protected materials.
11:37:27 <Smerdyakov> I like how old books end with notes about who designed the fonts they use.
11:37:44 <Smerdyakov> Computers should have similar notes for the ways they represent bits.
11:39:06 <shapr> who designed EBCDIC?
11:40:16 <shapr> Smerdyakov: the early Macs had the creators' signatures printed on the inside of the case, everything before the Mac II, I think.
11:43:37 <Smerdyakov> That's not analogous.
11:47:29 <shapr> Smerdyakov: written any Haskell lately?
11:47:39 <Smerdyakov> No. I've written less than 100 lines in my life, I think.
11:48:43 <shapr> why do you spend so much time here?
11:48:58 <Smerdyakov> I like Haskell.
11:49:45 <shapr> do you plan on writing more Haskell?
11:49:54 <TripleDES> hi
11:50:40 <Smerdyakov> I don't know.
11:54:31 <ben2> i know that "map f xs = map g xs" is equivalent to "map f = map g" but i wonder if "map f = map g" is equivalent to "f = g"?
11:54:33 <emu> it's his secret retreat from the fast-paced world of standard ML
11:55:19 <ben2> intuitively i say yes, but have i missed anything?
11:55:21 <Smerdyakov> ben2, it is not.
11:55:43 <ben2> right... 100% positive?
11:55:50 <Smerdyakov> ben2, the first thing isn't true either, if it's Haskell code you're talking about.
11:55:56 <Smerdyakov> ben2, are you using '=' in a meta sense?
11:56:22 <ben2> meta? well... that they do the same thing
11:56:53 <Smerdyakov> The same not very interesting thing.
11:57:01 <Smerdyakov> f is ignored, and g must be defined elsewhere.
11:57:32 <ben2> i've seen documentation saying that i can drop xs from "map f xs = map g xs" and write it as "map f = map g" which is the same
11:57:34 <Smerdyakov> So I amend my statement to say that I don't think that what you typed means what you mean for it to mean. :)
11:57:47 <Smerdyakov> Yes, but no one would write code like that.
11:57:52 <Smerdyakov> Especially since map is a predefined function.
11:58:12 <Smerdyakov> That code defines map to be a function that never returns when called.
11:58:30 <ben2> of course, so... what about "map f = map g" into "f = g"?
11:58:30 <Smerdyakov> Assuming g is defined earlier.
11:58:50 <Smerdyakov> Putting "f = g" in your code defines a variable f.
11:59:00 <Smerdyakov> "map f = map g" defines a variable map.
11:59:14 <Smerdyakov> So they're clearly not equivalent.
11:59:24 <ben2> my_copied_map = map
11:59:32 <Smerdyakov> Eh?
11:59:46 <Smerdyakov> What does that have to do with it
11:59:46 <ben2> it's useless i know
12:00:12 <ben2> you mentioned that "f = g" defines a variable f, so is my_copied_map a variable?
12:00:25 <Smerdyakov> Yes. I might not be using the "official" term, but it works for me.
12:00:27 <SyntaxNinja> @type map
12:00:27 <lambdabot> map :: (a -> b) -> [a] -> [b]
12:00:37 <Smerdyakov> SyntaxNinja, I don't believe that is the issue at all.
12:01:07 <SyntaxNinja> ben2: so if you say my_copied_map = map, my_copied_map will have the same type, and do the same thing, as the function map
12:01:10 <SyntaxNinja> Smerdyakov: issue?
12:01:32 <ben2> so, are you saying that "map f = map g" does _not_ imply "f = g"?  just wanted to confirm :-)
12:01:37 <Smerdyakov> SyntaxNinja, I don't think the type is responsible for his confusion, or mine, or that of whoever else is confused here.
12:01:44 <Smerdyakov> ben2, the use of the word "imply" is faulty.
12:02:02 <Smerdyakov> ben2, that's like saying "this C source file implies this other C source file."
12:02:15 <phubuh> I think we're all confused as to if you're using '=' as definition or as assertion of equality.
12:03:05 <ben2> phubuh: whatever = means in haskell
12:03:19 <Smerdyakov> = in Haskell is like a function definition in C.
12:03:25 <Smerdyakov> There is no clear meaning of "imply" related to it.
12:03:30 <Smerdyakov> What meaning of "imply" do you mean?
12:04:37 <ben2> ok... if i say that "map f" gives the same outputs as "map g" would with any inputs... then can i therefore say that f would give the same outputs as g would with any inputs
12:04:53 <ben2> sorry, let me restructure that question... just a second
12:05:25 <Smerdyakov> I think you can say that, yes. However, = does not have that meaning in Haskell.
12:05:54 <ddarius> ben2: You're later questions but last would be "Does list<t> map(f,xs) { map (g,xs) } imply t f(x) { g (x) }"
12:06:08 * Riastradh is trying to think of how 'do' might be better named, and has come up so far with nothing.
12:06:27 <ddarius> Riastradh: begin
12:06:39 <Riastradh> ddarius, that is just as bad as 'do.'
12:06:50 <Smerdyakov> 'do' is already good.
12:07:10 <ben2> Smerdyakov: thanks.  i should have explained what i meant by =.  thanks for being so patient with me, all!
12:07:12 <Riastradh> Smerdyakov, it doesn't say anything at all about what it does (no pun intended), not even in a bizarre mathematical lingo.
12:07:53 <Darius> Neither does 'then', it's a syntactical marker.
12:08:07 <Smerdyakov> Riastradh, what do you mean? Haskell is mostly effectless, and 'do' lets you _do_ things.
12:08:32 <Riastradh> Smerdyakov, this isn't necessarily in the context of Haskell.
12:09:11 <Smerdyakov> ben2, why are you interested in this question?
12:09:22 <Darius> 'do' doesn't say anything at all about what it does because it doesn't do anything.
12:09:40 <Smerdyakov> Darius, the way I think about it, it is the only way to do things.
12:09:49 <Riastradh> Darius, yes it does: it is syntactic sugar over a sequence of binds.
12:10:21 <Darius> No it's a marker delimiting a sequence of binds.  It's like { in languages with C syntax.
12:10:46 <SyntaxNinja> Smerdyakov: Not sure why you object to @type.  It was useful to explain what that line does.
12:11:00 <Darius> Nevertheless, here's a more self-describing name: 'statement-starter' 
12:11:11 <Smerdyakov> SyntaxNinja, I don't think it was.
12:11:51 <ben2> Smerdyakov: trying to understand how to do the art of transformation - from burstall and darlington's "A Transformation System for Developing Recursive Programs" paper
12:12:45 <SyntaxNinja> Smerdyakov: if you say so.
12:12:53 <ben2> in particular, the promotion technique. i guess you guys know quite a bit about it.
12:14:12 * Riastradh mumbles incomprehensibly at Darius and decides to use 'frob.'
12:16:42 <ben2> hmm... can't find any mention of that paper or its techniques on haskell.org
12:17:06 <Smerdyakov> Never heard of it myself.
12:17:53 <shapr> B&D rock out
12:17:56 <shapr> er, um
12:18:01 <shapr> Burstall & Darlington
12:19:01 <shapr> ben2: the basic B&D principles are given in the rabhi&lapalme algorithms book.
12:19:06 <shapr> I really enjoyed that book.
12:19:57 <ben2> Smerdyakov: a copy of the paper's on this page... http://portal.acm.org/citation.cfm?doid=321992.321996
12:20:24 <ben2> shapr: will look for that book in the library tomorrow
12:21:13 <ben2> what you meant by rock out?
12:21:18 <shapr> I haven't read the B&D system paper, but I learned a lot from seeing Rabhi & Lapalme apply the B&D principles to the algorithms in the book.
12:22:14 <shapr> in the early parts of that book, they say "for each algorithm, first we'll write a straightforward, easily understood implementation, then we'll apply B&D to get a faster, but possibly difficult to read algorithm"
12:23:13 <shapr> I wish they'd write something about monadic algorithms next.
12:24:27 <shapr> ben2: I was quickly able to see how I could apply the Bustall & Darlington transforms to Python, JavaScript, etc. That's why I think they rock out.
12:25:12 <ben2> sorry, not sure what "rock out" means :-) ... that book sounds like what i'd like to read, is it this one: http://www.aw-bc.com/catalog/academic/product/0,4096,0201596040-PRE,00.html
12:26:02 <shapr> rock out is probably 80s slang, guess when I went through my deformative years...
12:26:18 <shapr> yah, that's it.
12:26:34 <shapr> I found a typo, but they didn't send me a check for $2.56
12:26:46 <ben2> thanks :-)
12:27:21 <shapr> ben2: what's your goal? learn FP? learn algorithms?
12:29:33 <ben2> nothing in particular, intended to learn fp but i can now see how skills learnt can be transferred over to c, java, etc
12:30:05 <emu> mostly you learn how to get frustrated at c, java
12:30:08 <shapr> heh, yes
12:33:07 <ben2> yes, but i've never seen a job posting for haskell
12:33:12 <ben2> :-)
12:34:04 <shapr> I've seen several.
12:34:17 <shapr> I've even been paid to write Haskell.
12:34:32 <ben2> in what context?
12:35:39 <shapr> A German university wanted some XML converted from one flavor to another, as quickly as possible. So I wrote the converter with HXmlToolbox
12:36:08 <shapr> They didn't want the binaries or the source, just the output.
12:36:39 <ben2> sounds like a perl job, really... no? :-)
12:37:20 <Cale> sounds like a job for any language with an xml library, and given that Haskell has one... :)
12:37:23 <shapr> right
12:37:50 <shapr> I've done XML processing in four languages. I'd rather do it in Haskell.
12:39:47 <ben2> i'd better get off irc, quite distracting.. see you later :-)
12:40:12 <shapr> smart guy
12:47:45 <phubuh> wow, I wish I could do that
12:48:13 <phubuh> shapr, are you going to see ROTK tonight?
12:48:35 <shapr> what's that?
12:48:41 <phubuh> Return of the King!
12:48:44 <shapr> oh
12:48:46 <shapr> tomorrow night
12:52:11 <maihem> Can I just say that Jeff Newbern is great. I'm just beginning to understand monads a little: http://www.nomaware.com/monads/html/index.html
12:52:24 <Smerdyakov> Let's throw a party in his honor.
12:52:34 <maihem> w00t!
12:54:11 <phubuh> I wonder if teaching CPS before monads would make them easier to understand.
12:54:55 <Smerdyakov> Nothing could make monads easier to understand. They're already INFINITELY easy!
12:57:24 <phubuh> I struggled quite a bit to understand them.  In hindsight, I realize that there's not really much to understand, but it's been repeatedly shown that they are hard for newbies to comprehend.
13:00:50 <yazirian> what always bugged me was specifically as it relates to "I wrote this keen function... how the hell do I get input from IO out of 'IO Mode' so I can TALK TO MY OWN DAMN CODE??!" :)
13:01:27 <Smerdyakov> yazirian, well, that can be explained easily with examples.
13:01:34 <maihem> Isn't main in the IO monad?
13:01:48 <phubuh> main is an IO (), yes
13:01:49 <maihem> so you whole program is anyway?
13:02:12 <maihem> so it doesn't matter as long as you write your functions to work with any monad?
13:02:33 <Smerdyakov> That's lame, though.
13:02:41 <maihem> oh...
13:02:42 <Lor> If your function works with _any_ monad, it could as well be pure.
13:02:42 <Smerdyakov> Kind of defeats the purpose of functional programming to begin with. :)
13:02:58 <yazirian> Smerdyakov: I eventually discovered that, but it took a distressing amount of effort for me to *find* such examples. 
13:03:09 <phubuh> It's certainly possible to write everything as an IO action, but it'd be pointless.
13:03:39 <yazirian> they tend to be in the later chapters of... whatever source you're looking at
13:04:07 <Smerdyakov> Well, IO isn't very important to learning Haskell.
13:04:25 <Smerdyakov> It's not that the text was poorly organized; it's that your expectations of the process of learning a non-imperative language were.
13:04:27 <yazirian> I think I have to disagree there.
13:05:10 <yazirian> A program that takes no input can only address a rather small range of problems.
13:05:39 <Smerdyakov> Are you ignoring interactive environments?
13:05:39 <yazirian> I could compute pi just fine, for example, but if I wanted to implement hanoi, I'd have to hardcode how many discs there were.
13:06:38 <yazirian> No, but... well, let's say I wanted to implement a simple CGI script. A "hello world" in haskell that does what 'printenv' that comes with Apache does.
13:06:46 <shapr> I think that one day, either someone will figure out a simpler way of doing pure IO, or someone will realize a simpler way of explaining monads, such that they'llbe in the earlier chapters
13:07:19 <yazirian> The curve there is very steep, for what is required to understand those operations in haskell builds on considerably more prior knowledge OF haskell than many other tools require.
13:07:21 <Smerdyakov> yazirian, implementing CGI scripts to learn Haskell is ill-advised, in my opinion.
13:08:05 <yazirian> anyone who is learning haskell to USE it, as opposed to a purely intellectual exercise, is going to have some specific problem they want to address
13:08:13 <SyntaxNinja> actually, one of the first programs I wrote in Haskell was a CGI script,a nd it was quite useful.
13:08:16 <yazirian> if that happens to be a CGI application, your statement is utterly unhelpful
13:08:20 <SyntaxNinja> (the experience, that is)
13:08:53 <rt> the problem with most haskell books is that they don't ever actually have any examples of programs that people typically write.
13:08:58 <yazirian> exactly!
13:08:59 <SyntaxNinja> in fact, I think CGI is nice because there's a clear input phase and a clear output phase, nothing in between needs to be in the IO monad.
13:09:00 <Smerdyakov> If _what_ happens to be a CGI application?
13:09:13 <rt> they love to explain how lazy evaluation works, but present no idea why you might want to use it....
13:09:15 <shapr> SyntaxNinja: that's a good point.
13:09:28 <yazirian> if the program that the learner ultimately intends to use haskell to write happens to be
13:09:40 <Smerdyakov> Too bad for the learner. He needs to learn how to learn. :)
13:10:00 <shapr> I found monads difficult to figure out myself, I'm still not sure I really understand them.
13:10:04 <Smerdyakov> Maybe something along the lines of a wrapper for the types of code SyntaxNinja suggests would be nice.
13:10:05 <yazirian> Then I think I'm glad you're not my professor for a class on Haskell. :)
13:10:06 <shapr> somedays I do
13:10:19 <Smerdyakov> But wanting to write monadic code for your first Haskell program is a bad idea.
13:10:27 <Riastradh> _Arrows_ are hard to comprehend, and I think only about four people on earth at one given moment can possibly understand them.
13:10:33 <yazirian> hehehe
13:10:40 <rt> most real programs use io to interact with the user, at least in some trivial fashion
13:10:45 <shapr> somehow, arrows seem more intuitive to me
13:10:45 <maihem> if my program needs to operate on information from I/O then I just give my pure functions "IO a"'s and if a is an instance of the class that the function maps from then so is "IO a"? And the function just works?
13:10:48 <yazirian> again, rt has my wavelength exactly
13:10:48 <rt> pretending otherwise is seldom helpful either.
13:10:57 <Smerdyakov> rt, but most real programming concepts have nothing to do with that kind of IO.
13:11:14 <rt> gee, I wonder if I haven't been doing real programming.
13:11:25 <yazirian> a program that cannot do IO cannot do anything useful aside from purely instructing the programmer
13:11:33 <SyntaxNinja> maihem: that isn't the right idea :)
13:11:38 <maihem> oh...
13:11:41 <yazirian> more to the point, nobody will ever pay you to write code that cannot do IO
13:11:43 <SyntaxNinja> maihem: you can use pure functions inside IO functions
13:11:44 <Smerdyakov> rt, you think IO is difficult to learn how to do?
13:11:51 <SyntaxNinja> but you can't use IO functions inside pure functions
13:11:58 <shapr> maybe if early programs had the monadic code written for you, and you wrote pure functions to operate on different formats of the input?
13:12:06 <rt> well, in haskell it is a tad unorthodox, and presents some special challenges.
13:12:18 <Smerdyakov> rt, I mean in imperative languages.
13:12:21 <rt> But it would be better to just deal with them than save it for chapter 10 of a book.
13:12:35 <Smerdyakov> rt, I think IO is very insignificant in the space of "things to know to be a good programmer."
13:12:51 <SyntaxNinja> maihem: so for instance, "length" is a pure function, and "getLine" is a non-pure function (that I think exists)
13:12:54 <Darius> @type interact
13:12:55 <lambdabot> interact :: (String -> String) -> IO ()
13:12:55 <SyntaxNinja> main = do 
13:12:56 <rt> i'm not surprised that haskell programmers have that attitude. :-)
13:12:59 <SyntaxNinja>  oops
13:13:04 <Smerdyakov> rt, you don't agree with that?
13:13:11 <yazirian> I certainly don't.
13:13:16 <SyntaxNinja> main = do l <- getLine; putStrLn (length l)
13:13:26 <SyntaxNinja> maihem: what do you think of that?
13:13:38 <Smerdyakov> OK, so rt or yazirian, what is it about IO that makes it worthy of being the focus of a programming student's studies?
13:13:56 <rt> without it, you can't really write programs that are interesting/useful?
13:13:59 <yazirian> You're making a straw man of this. 
13:14:00 <SyntaxNinja> rt: Smerdyakov isn't a haskell programmer :P
13:14:02 <Riastradh> IO is necessary to tie a program in to the real world.  But it should _not_ be the focus of most programs; it is only the duct tape between a program, which may be pure and still very useful, and the rest of the world.
13:14:02 <rt> I'm a pragmatist.
13:14:07 <yazirian> It isn't that it should be "The One True Focus"
13:14:08 <Smerdyakov> rt, really? You've never used hugs?
13:14:28 <yazirian> But it MUST be addressed, and soon, or you can't write anything that's not a toy.
13:14:37 <rt> Of course I've used hugs.  I just find most of the documentation for haskell to be written by people who don't seem to write real programs.
13:14:46 <Smerdyakov> rt, hugs provides all the IO you need, in the form of parsing of Haskell expressions and pretty-printing of Haskell values.
13:14:53 <Riastradh> yazirian, yes!  It must be addressed!  But that does _NOT_ mean it should be _ANY_ sort of focus; it's duct tape.
13:14:56 <maihem> SyntaxNinja: lets me work out what that looks like without the "do-notation-to-make-monads-easy-for-maihem-to-use-without-him-understanding-them-one-bit". won't be a moment.
13:15:07 <yazirian> If I can't use something outside of hugs, then it's not going to do me any good outside of hugs.
13:15:32 <Riastradh> Sure, there are ductagomists, and there are probably Haskell programmers who use IO all over the place.  But it needn't be the _focus_ of useful programs.
13:15:36 <yazirian> Which is why when I need something to be USEful to me, I don't write it in Haskell. :)
13:15:48 * rt sighs.
13:15:59 <shapr> have you guys read the nomaware monad tutorial?
13:16:05 <shapr> it's received rave reviews
13:16:07 <Smerdyakov> yazirian, why does it matter if it does you any good outside of hugs
13:16:07 <yazirian> I have it loaded in my browser.
13:16:17 <maihem> and a "w00t!" from me
13:16:18 <shapr> cool
13:16:22 <Smerdyakov> yazirian, this isn't about producing software. It's about learning the techniques you'll use to produce software later.
13:16:24 <shapr> yes, rave reviews :-)
13:16:35 <shapr> Smerdyakov: I would disagree, I want to write Haskell for money.
13:16:45 <Smerdyakov> shapr, how does that make you disagree?
13:16:54 <shapr> because it is about producing software
13:16:57 <yazirian> if I never learn the techniques I need to produce the software I need to produce, then I've learned plenty about Haskell and none of it useful to me
13:16:57 <SyntaxNinja> Smerdyakov: I think the point he's making is that he, among others, find that the best way to learn a programming language is to use it to "scratch an itch".
13:17:21 <SyntaxNinja> that means writing a program that is useful
13:17:22 <yazirian> what shapr said, basically
13:17:26 <rt> it's hard to imagine how you can learn to program without actually doing it.
13:17:32 <yazirian> nobody is going to pay me to write software that doesn't do any IO
13:17:34 <Smerdyakov> SyntaxNinja, and I say that that fails when there is as basic a conceptual leap as is needed to start doing IO programming in Haskell.
13:17:36 <Riastradh> shapr, the argument is not against using IO at all.  IO is of course necessary in any useful programs.
13:17:46 <Smerdyakov> yazirian, where have I said you shouldn't learn how to do IO?
13:17:55 <shapr> ok, what is the argument then?
13:17:59 <Riastradh> s/useful programs/programs that interact with the rest of the world/1
13:17:59 <maihem> SyntaxNinja: main = getline >>= (\l -> putStrln (length l)) ???
13:18:01 <Smerdyakov> yazirian, I've said that the 20th chapter in a book is the right place to learn that, not the 1st!
13:18:02 <yazirian> where have *I* said that IO should be the One And Only Focus of learning?
13:18:16 <yazirian> and I've disagreed, and said I'd like to see it earlier
13:18:19 <yazirian> that's all
13:18:20 <shapr> oh
13:18:20 <SyntaxNinja> Smerdyakov: actually, I think that it makes perfect sense to introduce the basics of IO, without understanding Monads, so that learners can get started doing interesting things.
13:18:28 <shapr> there are Haskell books for both viewpoints.
13:18:31 <Riastradh> shapr, that IO is duct tape and shouldn't get focus.
13:18:35 <shapr> the Hudak book introduces IO very early
13:18:40 <shapr> and the Thompson book introduces it very late
13:18:46 <SyntaxNinja> maihem: are you trying to avoid the "do" notation?
13:18:49 <yazirian> Hudak's on my xmas list this year :)
13:18:57 <Smerdyakov> yazirian, and I think you are wrong, from the point of view of learning to be an effective Haskell programmer.
13:19:17 <shapr> and Hudak just does IO for awhile, without directly addressing monads.
13:19:20 <yazirian> you may even be right
13:19:23 <maihem> yes, just so I can see what is happening in a functional form without thinking about it imperatively
13:19:29 <rt> given the relative scarcity of haskell programs of any complexity, it's not clear that many ever reach "effective haskell programmer" status.
13:19:40 <Smerdyakov> The functional programming course I took as an undergrad never covered a single bit of IO beyond "print" for debugging.
13:19:40 <shapr> lambdabot is reaching complexity :-)
13:19:50 * emu points out that even Haskell compilers tend to have a toplevel from which you can invoke functions, you don't need to create your own command line
13:19:55 <Smerdyakov> We would have had to skip actual _interesting_ stuff to cover the obvious details of IO.
13:19:59 <yazirian> however, it's not going to help the tool's acceptance if most people drop it, because after studying it for (what they perceive as) a long time, they still can't write a program that does anything useful
13:20:24 <shapr> I agree with yazirian, I want to do useful stuff.
13:20:26 <Smerdyakov> yazirian, it might help the average ability level of the tool's users, though.
13:20:42 <rt> wheras languages which are truly ugly (such as perl) often get accepted precisely because people _can_ do useful things with them relatively quickly.
13:20:43 <Smerdyakov> yazirian, I have no problem with "scaring off" incompetent potential users.
13:20:44 <emu> i think that people coming from the C world don't realize that you don't have to run everything from your unix shell
13:20:45 <phubuh> hmm, Xlib.fetchBytes is raising a null ptr
13:20:55 <SyntaxNinja> maihem: yes, basically. but some details:
13:21:02 <SyntaxNinja>  getLine >>= (\l -> putStrLn (show (length l)))
13:21:03 <emu> certainly when you are a beginner, it can be very useful to have a toplevel, and even when not
13:21:14 <SyntaxNinja> you have to use "show" since you can't putStrLn an int
13:21:20 <yazirian> you're assuming that if they want to write useful programmers sooner than you personally believe they should, they must be incompetent
13:21:21 <SyntaxNinja> show converts an int (in this case) to a string.
13:21:25 <yazirian> I don't think that conclusion follows at all.
13:21:26 <Darius> getLine >>= \l -> print (length l)
13:21:37 <phubuh> but the equivalent C program works
13:21:44 <Smerdyakov> yazirian, and I think it does, if they have been programming imperatively for X years and now want to switch to functional programming.
13:22:10 <yazirian> so essentially it's a prejudice against people who use imperative languages?
13:22:37 <Smerdyakov> A _prejudice_? More like a presentation order/style that helps avoid misconceptions and shortens the learning period.
13:22:39 <yazirian> they need to "do their time" to gain your respect as a functional programmer, before they are *permitted* to write something useful?
13:22:48 <emu> no its a prejudice against people who don't realize you can call functions directly  without creating a command-line-arguments interface or whatnot for them ;)
13:23:12 <maihem> SyntaxNinja: so >>= is going to be different for each monad, so that decides what monad l is in (and whether the next statement even does anything)?
13:23:32 <yazirian> Wait, back up.
13:23:37 <SyntaxNinja> @type (>>=)
13:23:37 <lambdabot> (>>=) :: Monad a => a b -> (b -> a c) -> a c
13:23:37 <maihem> so a monad could cause the next statement to be done in a different monad?
13:23:38 <phubuh> how would I debug a call to "fail"?
13:23:39 <shapr> Smerdyakov: you've said yourself that you've written less than 100 lines of Haskell, where do you get this?
13:23:55 <Smerdyakov> shapr, from being an instructor for an ML course.
13:23:56 <Darius> phubuh: It raises an exception?
13:23:56 <SyntaxNinja> maihem: hmm.... no, each statement within a single function has to be in the same monad
13:23:58 <yazirian> If IO is so unimportant, and so easy, why would it jeopardize the shortened learning period>?
13:24:03 <shapr> Smerdyakov: but ML is imperative
13:24:04 <yazirian> you've made both of those statements
13:24:25 <Smerdyakov> shapr, not in this class. The imperative stuff is covered a little bit near the end and handled separately.
13:24:53 <phubuh> Darius: I don't know.  I'm clueless about Haskell's errors and exceptions and whatnot.
13:25:03 <Smerdyakov> yazirian, it's not easy in Haskell. It _is_ unimportant in Haskell.
13:25:29 <Darius> phubuh: How do you know that it is calling fail?
13:25:44 <yazirian> 15:52 < ~Smerdyakov> yazirian, well, that can be explained easily with examples.
13:25:50 <yazirian> which is it? :)
13:25:54 <phubuh> I might be mistaken, it says
13:25:57 <phubuh> Fail: user error
13:25:58 <phubuh> Reason: Error null ptr raised in function XFetchBytes
13:26:07 <Smerdyakov> yazirian, some common partterns are easy to show by examples. Understanding what's going on is harder.
13:26:19 <Smerdyakov> yazirian, those common patterns are not very useful.
13:26:27 <Smerdyakov> yazirian, using them makes testing code harder, I'd say.
13:26:36 <yazirian> Which, I believe, is the fundamental point upon which we fail to meet.
13:26:52 <emu> where do your lattices fail to meet
13:26:55 <phpkid> hey i have to make a funtion: 
13:26:55 <phpkid> isOrderedBy :: (a -> a -> Bool) -> [a] -> Bool 
13:26:55 <phpkid> so it will work on a list like: 
13:26:55 <phpkid> isOrderedBy (<)  [1,2,3,4]  ==>  True 
13:26:55 <phpkid> isOrderedBy (<)  [1,1,2,3]  ==>  False 
13:26:55 <phpkid> isOrderedBy (<=) [1,1,2,3]  ==>  True
13:26:55 <phubuh> Tjey
13:26:57 <phpkid> isOrderedBy p xs = what do i have to put here to make this work, should I use foldr1 somehow, how?
13:27:05 <emu> top or bottom
13:27:12 <Smerdyakov> phpkid, are you asking us to do your homework for you?
13:27:17 <phpkid> yes
13:27:22 <Smerdyakov> phpkid, then please leave.
13:27:23 <Riastradh> Hahaha.
13:27:25 <phpkid> i dont have much clue here
13:27:37 <phpkid> i mean i need some hints
13:27:45 <Smerdyakov> Good. I hope you either 1) fail or 2) are inspired to learn what you're supposed to learn or 3) drop the class.
13:28:00 <phubuh> If state and I/O weren't fundamentally evil, Haskell would be impure. :-)
13:28:10 <Smerdyakov> phpkid, why not ask your instructor?
13:28:18 <yazirian> Looks like somebody has a case of the Mondays. On Tuesday no less! :)
13:28:31 <shapr> Smerdyakov: be nice, it's polite to explain things
13:28:35 <SyntaxNinja> phpkid: the rest of us don't hope you fail :)
13:28:45 <Smerdyakov> phpkid, I think any kind of "hints" on verbatim assigned problems are unethical, especially since you can keep asking for more and more hints until we solve the whole problem for you, oracle style.
13:28:56 <Smerdyakov> SyntaxNinja, you left out 2 disjuncts.
13:29:13 <SyntaxNinja> phpkid: we know what you really meant ;)
13:29:14 <SyntaxNinja> oops
13:29:17 <SyntaxNinja> that was for Smerdyakov
13:29:20 <Darius> phubuh: That's an exception.  Anyways, recompiling with -prof -auto-all and adding +RTS -xc -RTS to the commandline (for GHC) will give you a stack trace assuming that'll help you.
13:29:29 <SyntaxNinja> has phpkid been in here before and asked tons of questions?
13:29:41 <phpkid> nope, first time
13:29:53 <phubuh> $ ghc -package X11 -prof -auto-all xpaste.hs -o xpaste
13:29:53 <phubuh> /usr/bin/ld: cannot find -lHSgreencard_p
13:29:53 <phubuh> collect2: ld returned 1 exit status
13:29:56 <phubuh> Hmm...
13:30:11 <Smerdyakov> phpkid, why are you asking here instead of asking an instructor of the class?
13:30:17 <yazirian> Believe me, *I* am learning a lesson about how I shouldn't expect any help in here, and I don't even have a question.
13:30:23 <shapr> :-/
13:30:45 <phpkid> well we have no classes, we have to find everything out ourselves
13:30:49 <SyntaxNinja> yazirian: don't let Smerdyakov give you a bad impression of the rest of us.
13:30:57 <Lor> You can expect "any" help, you just cannot expect direct answers to homework.
13:31:01 <Smerdyakov> OK, yazirian, you seem to be on a different wavelength here. He's not asking for help on learning Haskell. He's asking for help on an exact problem he will be graded on.
13:31:11 <Lor> phpkid, ask for _help_, not answers, and you'll get it.
13:31:16 <phpkid> fine
13:31:46 <maihem> should phpkid use a monad?
13:31:47 <yazirian> SyntaxNinja: I'm not :)
13:31:50 <maihem> :)
13:31:56 <yazirian> SyntaxNinja: you seem pretty cool so far ;)
13:31:57 <SyntaxNinja> maihem: nope
13:31:58 <Smerdyakov> phpkid, do you have a professor, an advisor, anyone related to this class?
13:32:03 <SyntaxNinja> yazirian: :)
13:32:07 <phubuh> Of course he's cool, he's a ninja!
13:32:13 * SyntaxNinja sneaks around
13:32:16 <Riastradh> He's got REAL ULTIMATE POWER!
13:32:19 <phubuh> Ninjas are cool and totally awesome, by definition.
13:32:23 <yazirian> And ninjas are awesome! And by awesome I mean totally sweet!
13:32:27 <phpkid> yes, but can ask him now
13:32:30 <Riastradh> And they flip out and kill people ALL THE TIME.
13:32:33 <Darius> phubuh: Yeah, I figured that would be an issue. It's looking for a profiling version of the library.  I'm not sure off the top of my head how to compile only part of a program for compiling.
13:32:38 <Smerdyakov> phpkid, so why not ask later?
13:32:54 <Darius> You could rebuild the greencard library if you are looking for what's causing the exception in it's code.
13:32:57 <phpkid> no time left, got a test tomorrow
13:33:16 <phubuh> Darius: Oh, I see.  I should try to compile HSX11 with -prof -auto-all, right?
13:33:28 <Smerdyakov> phpkid, I assume you have plenty of time before to complete this assignment, but you waited too long, right?
13:33:58 <phpkid> you must be my instructor?
13:34:04 <Smerdyakov> I'm his secret spy.
13:34:07 <Smerdyakov> He's on the video phone.
13:34:09 <Cale> phpkid: well, you want to check that the list is ordered by the given relation, i.e. that the first parameter of isOrderedBy returns true for each adjacent pair of elements in the list.
13:34:37 --- mode: ChanServ set +o SyntaxNinja
13:34:38 <Darius> phubuh: That (and any other necessary libraries) should work.
13:34:41 --- mode: SyntaxNinja set +v Smerdyakov
13:34:54 <Smerdyakov> phpkid, so I was right?
13:35:05 <phpkid> Cale: so foldr1 should do the comparing of list elements here?
13:35:10 --- mode: SyntaxNinja set -o SyntaxNinja
13:35:19 <shapr> Smerdyakov: dude, let it go
13:35:54 <Smerdyakov> shapr, I don't think it's appropriate to let it go. People at schools like the one I went to get failing grades in classes for doing things like phpkid seems to be doing now, and that's not without a good reason.
13:36:54 <Cale> phpkid: there's probably a way to fold the list to get what you want, but it might be easier to think about how you might just turn the list into a list of boolean values, indicating whether or not each test passes or fails
13:37:08 <Smerdyakov> The simple fact is that you don't know how to code in a language if you only know how to code in it when experts give you hints for every step of the process.
13:37:20 <Smerdyakov> That's a fine way to do it for some initial exercises, but not on the night before the test!!
13:37:27 <shapr> Smerdyakov: I think that once you have made your opinion clear, it's not your job to make other people follow your recommendations.
13:37:34 <Lor> OTOH, experts giving hints _can_ help one actually learn the language. Eventually.
13:37:45 <Smerdyakov> Lor, yes. Did you catch the "night before the test" part?
13:37:57 <shapr> Smerdyakov: drop it, chill out
13:37:58 * emu has a case of the weekdays
13:38:10 <Smerdyakov> shapr, chill in!
13:38:17 <Cale> The important thing is that people learn, not when or how they learn.
13:38:21 <Lor> Nope. Crosstalk, sorry.
13:38:22 * emu could use a case of beer
13:38:31 <yazirian> who couldn't? :)
13:39:00 <emu> i bought a handle of nigori sake instead
13:39:07 <phpkid> i have got 10 hours left, so I will try to learn as much as possible here
13:39:07 <Smerdyakov> Cale, so you don't care if he gets a grade that certifies that he knows what he doesn't really know, and someone else who studies honestly gets a lower one but comes closer to mastering the material?
13:39:37 <maihem> hint from non-expert: \cmp l -> [cmp a b | (a,b) <- zip l (drop 1 l)] -- any good?
13:39:41 <Lor> phpkid, so ask away.
13:39:52 --- mode: ChanServ set +o shapr
13:40:05 <shapr> Smerdyakov: let it go
13:40:14 <Smerdyakov> phpkid, I'm been operating under an assumption that I think you verified earlier, and I just want to ask it explicitly again: Correct or incorrect? The primary reason you are asking this is _not_ to learn Haskell, but rather because you have to hand in a solution to this problem and you will be graded on it.
13:40:39 <Smerdyakov> If that's _not_ the real situation, then I apologize.
13:40:40 <Cale> Smerdyakov: this isn't a test question
13:40:43 --- kick: Smerdyakov was kicked by shapr (hello? Kicked by shapr)
13:41:18 <phpkid> Smer: no the excersise I asked here is for me only, I will not send it to anybody, I just want to be able to solve this kind of problems
13:41:39 <Smerdyakov> phpkid, then why did you answer "yes" when I asked if you were asking us to do your homework for you
13:42:16 <phpkid> it can be taken as my "home work"
13:43:52 <Cale> anyway, phpkid, you might try first constructing a list of the pairs of elements that you need to compare.
13:43:56 <Lor> phpkid, I think you wouldn't have gotten such an interrogation, if instead of "what is the answer to this problem" you'd have asked "how should I go about solving this problem"
13:44:17 <phpkid> ok ill be more careful nexttime
13:45:04 <phpkid> Cale: ok ill dig in some docs on how to do this
13:45:08 <Lor> phpkid, no doubt you have _some_ idea about how to approach the problem. Tell how far you have gotten and what exactly is the showstopper to prevent you from completing it.
13:45:15 <yazirian> with a nick like 'phpkid' do you imply familiarity with php?
13:45:55 <maihem> pre-handin-panic-kid
13:45:58 <phpkid> yaz: yes, so far i have done everything in php, for years
13:46:00 <maihem> heh :)
13:46:05 <phubuh> maihem: hee hee
13:46:16 <Cale> phpkid: you should be able to do it without ant special calls - just the plain maps, folds, zips and whatnot.
13:46:23 <Cale> any*
13:46:37 <phpkid> okay
13:46:40 <Lor> Well, even all of those are optional.
13:46:42 <yazirian> it looks fold-ish to me
13:46:56 <yazirian> then again, I'm not much further along, so don't listen to me :)
13:48:25 <phpkid> mapping just acts on one list element per time, so im thinking folding
13:48:34 <maihem> hmm, fn (truth_of_last_test, previous_number) next_number = (truth_of_this_test, this_number)
13:49:04 <maihem> perhaps?
13:49:25 <Cale> or you could do it with an if and simple recursion
13:49:38 <SyntaxNinja> or pattern match and recursion :)
13:49:51 <Lor> Yep. If is ugly.
13:49:53 <SyntaxNinja> phpkid: I would suggest, personally, trying it with just recursion, then trying to alter it to use a fold.
13:50:08 * Lor often prefers case ... of True -> ... ; False -> ... instead of if
13:50:10 <Cale> well, I was thinking pattern match with an if
13:50:51 <Lor> A guard might be more sensible in this case, though.
13:53:57 <phpkid> I have the "Two Dozen Short Lessons in Haskell" printed out
13:54:10 * Darius pats higher-order functions on the head.
13:55:01 * yazirian grins. Amen.
13:55:08 <yazirian> That's what I never understood about Ruby.
13:55:42 <Cale> yazirian: what?
13:55:52 <yazirian> How the hell do you make EVERYTHING a function, and allow people to pass blocks of code LIKE a function, that even take ARGS like a function... and not have higher-order (objectified) functions? :)
13:56:04 <yazirian> err
13:56:08 <yazirian> everything an object
13:56:23 <yazirian> <--- functions on the brain today
13:57:05 <Darius> shapr: Do you have the lambdabot definitions file somewhere other than on the dead harddrive?
13:57:08 <rt> well, i'm irritated that python doesn't do tail call optimizations. 
13:57:25 <rt> we all have our problems.
13:57:40 <shapr> yes
13:57:49 <shapr> I grabbed a copy of the latest, just before it finally died
13:58:08 <Darius> whew
13:58:30 <emu> python has a number of ways of throwing fp ppl off guard
13:58:49 <yazirian> heh, yeah
13:58:52 <shapr> Darius: http://shapr.homelinux.net/~shae/definitions
13:59:01 <yazirian> it's got juuuuuuust enough fp ability to lull you
13:59:06 <rt> it's too bad, because in most respects it is quite a bit better than most of the alternatives.
13:59:10 <yazirian> I love python :)
13:59:14 <shapr> me too
13:59:29 <rt> it's enormously useful, and less ugly than perl. :-)
13:59:50 <yazirian> I'm finding that it can also replace shell scripts in nearly all cases.
13:59:53 <yazirian> And that makes me really happy.
13:59:55 <rt> if I ever have to prefix variables with $ or @ again, it will be too soon.
13:59:59 <emu> i think everyone must do: for x in sort(l):
14:00:08 <emu> and wonder what is wrong
14:00:13 <shapr> sort = lambda x: (lambda x=x[:]: x.sort() or x)()
14:00:18 <shapr> reverse  = lambda x: x.reverse() or x
14:00:51 <yazirian> oh yeah, the list methods that modify in-place, but don't return a reference to themselves
14:00:55 <emu> or whatever the silly "OO" syntax is
14:00:59 <yazirian> I have been yelling about that for years now :)
14:01:03 <emu> x.sort () nonsense
14:01:34 <emu> how about the len(x) vs x.sort() distinction? =)
14:01:47 <emu> c'mon, generic functions or message passing? what is it?
14:02:44 <phubuh> I dig CLOS' generic functions.
14:03:41 <sex|more> 14HFB0D0DeF71A1AlF22626lEE3333oEA4040 E64D4DGE25A5AeDD6666nD97373tD58080lD18D8DeCD9A9AmC8A6A6eC4B3B3n15
14:03:53 <yazirian> I believe it's all backwards compatibility stuff.
14:04:01 <shapr> sex|more: what's that?
14:04:02 <yazirian> the methods are newer
14:04:05 * emu wonders what language sex|more speaks
14:04:19 <yazirian> #haskell is from mars, sex|more is from venus?
14:04:28 <emu> yazirian: there's no reason why len () couldn't be a method of a generic function called len
14:04:31 <Darius> Is someone taking my suggesting to sign their IRC communications?
14:04:35 <shapr> heh
14:04:43 <shapr> gpg sig on every line
14:05:00 <yazirian> emu: true, also len() could be a method on the class of containers for which len() is a definable method
14:05:00 <emu> when did gpg sigs involve flashing colors and attributes
14:05:15 <shapr> I didn't see any of that
14:06:23 <sex|more> what's what`?
14:06:34 <emu> on the metaclass?
14:06:39 <sex|more> didn't you see the colored helloe gentlemen?
14:06:42 <emu> or the superclass?
14:06:43 <sex|more> -e
14:06:56 <yazirian> it was mostly hex codes on my screen
14:06:58 <shapr> sex|more: nah, looks like line noise to me
14:06:58 <yazirian> in technicolor
14:07:03 <Cale> I saw a bunch of garbage characters
14:07:16 <sex|more> maybe yor client is crap
14:07:21 <shapr> I wrote part of my client.
14:07:28 <emu> or maybe your client doesn't respect the IRC standard
14:07:29 <shapr> I don't think it's crap.
14:07:30 <yazirian> emu: having only thought about it in the time since you mentioned it, I'm not really sure which would be more appropriate yet :)
14:07:30 <sex|more> my client supports 24 bit colors
14:07:33 <emu> now go play on mircx.org
14:07:34 <sex|more> does yours?
14:07:36 <phubuh> I'm using the best client in the world, and it shows up as complete garbage.
14:07:41 <phubuh> No, thank god.
14:07:44 <Cale> I'm running X-Chat with unicode support.
14:07:59 <emu> sex|more: normal people don't use color on IRC, only kiddies
14:08:09 <sex|more> colors are cool
14:08:11 <phubuh> I'm using ERC Version 4.0 $Revision: 1.577 $ with Emacs 21.3.1!
14:08:14 <sex|more> I use Klient
14:08:17 <yazirian> I'm running irssi through screen in an aterm
14:08:23 <shapr> sex|more: on this channel, it's considered impolite to use color codes
14:08:26 <phubuh> Bah, I think I'm starting to remembed why I installed Gentoo over Debian.
14:08:28 <yazirian> and color definitely works, I see yellow when people say my nick, for example
14:08:31 <sex|more> shapr: Y?
14:08:39 <shapr> because most people don't like it.
14:08:43 <sex|more> shapr: Y?
14:08:53 <shapr> I think it's the preponderance of text clients
14:08:55 <phubuh> sex|more: Because they're obnoxious, and they show up as complete junk in many of our clients.
14:09:16 <yazirian> hehehehe
14:09:16 <sex|more> well, wrong client then
14:09:17 <emu> sex|more: i suggest you read the IRC RFC. notice the distinct lack of support for color
14:09:20 <yazirian> well, if bluntly, put :)
14:09:32 <sex|more> emu: link?
14:09:37 <Lor> Yeah, if text should be richer, there are far more important markups than color.
14:09:39 <shapr> sex|more: there are other channels where people enjoy playing with color codes
14:09:46 <Cale> also, it seems that your client isn't even doing colour the same way other clients do
14:09:51 <Lor> I mean, you'd hardly consider color to be the most essential thing that eg. html offers...
14:09:53 <yazirian> Like html emails. Which I consider proof that the human race is on the decline. :)
14:09:58 <shapr> <blink> maybe
14:10:01 <shapr> but not color
14:10:18 <Lor> There's nothing inherently wrong with using html for emails.
14:10:30 <Lor> There are just many many contingent issues which make it a bad idea at the moment.
14:10:34 <yazirian> if any clients obeyed any standards for it, sure
14:10:44 <Cale> I do however think that using http for e-mails is silly.
14:10:45 <sex|more> but color rulez
14:10:48 <yazirian> that'd make it so any email client could view them well
14:10:49 <phubuh> I send LaTeX e-mails.
14:10:54 <Lor> I'm all for adding structural information to text.
14:10:56 <shapr> phubuh: can you really do that?
14:11:06 <phubuh> Sure, it's easy.
14:11:10 <yazirian> further... there's usually no need for it, and it usually increases the message size by 5x at the minimum
14:11:11 <emu> http://www.irchelp.org/irchelp/rfc/rfc.html
14:11:11 <Cale> shapr: sure, LaTeX is text
14:11:19 <shapr> does it show up nicely rendered in gnus?
14:11:20 <yazirian> if bandwidth is free, then who cares I guess
14:11:46 <Darius> yazirian: Indeed, I think the only HTML emails I've seen that aren't identical to plain-text are spam emails.
14:11:56 <emu> html emails are evil.  too many ways to exploit them.
14:12:11 <phubuh> shapr: Not yet. :-(
14:12:16 <yazirian> Darius: right... usually it's a manager who wants to send me one sentence like "please look at this, we have a meeting at ten" -- with a pretty sky-with-clouds background :)
14:12:36 <shapr> phubuh: probly be easy to write with preview-latex
14:12:40 <phubuh> shapr: That'd be nifty, though. :-)
14:12:42 <phubuh> Yup
14:12:53 <shapr> I'll ask kensanata or johnw
14:13:56 <yazirian> eek, I'm late to go home
14:14:00 <yazirian> looking at houses, yay!!!
14:14:04 <shapr> whee
14:14:14 <shapr> I'm late to go to sleep.
14:14:39 * rt will be late going to sleep tonight.  
14:14:57 <rt> back to back showing of "fellowship" and "two towers", extended editions this evening.
14:15:15 <phubuh> rt: Heh, followed by ROTK?
14:15:22 <rt> tomorrow, rotk.
14:15:36 <phubuh> Ah.  Watching them all in one sitting in a cinema would be cool.
14:15:41 <rt> one of the bennies of working for a movie studio.
14:16:07 <rt> except our theater's seats murder your backside after about two hours.
14:16:25 <phubuh> I can hardly sit down on anything, I've got this annoying thing called "coccodynia".
14:16:33 * rt prays for an intermission.
14:16:37 <phubuh> Yet I'm going to see ROTK in about 45 minutes.  Oh well.
14:17:00 <shapr> take a cushion
14:17:07 <emu> 45 minutes?
14:17:07 * rt probably won't see rotk till this weekend, when I can bring the wife.
14:17:10 <emu> where are you
14:17:13 <phubuh> Sweden!
14:17:21 <emu> ah, geez, always in the future there
14:17:24 <phubuh> shapr: Yeah, maybe that'll help.
14:18:42 <phubuh> Bah, I want HSX11's fetchBytes to work so I can brag about the Haskell version of this program being like four lines, compared to the 131 line C version. :-)
14:18:54 <emu> h4sk3ll is l33t
14:18:58 <phubuh> 4 rl
14:19:43 * rt should rewrite his weblog software in Haskell. :-)
14:20:34 <shapr> there are a coupla weblogs in Haskell, but if you want to write your own, I can suggest some CGI libs
14:21:12 <phubuh> We need a mod_haskell or a conveniently extendable web server.
14:21:19 * rt eventually wants to stop using movable type and use his own software.  
14:21:26 <shapr> hws is extendable, dunno about convenient
14:21:41 <phubuh> Oh, I'll check that out.
14:22:28 <shapr> Marvin-- used ozone's RuntimeLoader to add reloadable modules to Simon Marlow's HWS (haskell webserver)
14:22:38 <shapr> that's the hws-wp in haskell-libs
14:22:46 <phubuh> Ooh!
14:24:55 <phubuh> This looks nifty.
14:29:09 <phubuh> Okay, I'm heading off to the movie now.  Bye!
14:50:55 <phpkid> cant figure it out, anyway this is probably not the right way:   isOrderedBy p xs = foldr1 p xs
14:54:11 <Darius> @type let isOrderedBy p xs = foldr1 p xs in isOrderedBy
14:54:12 <lambdabot> let {isOrderedBy (p (xs $0) (0 (foldr1 p xs)) $0) $0 $0} in isOrderedBy :: (a -> a -> a) -> [a] -> a
14:55:12 <Darius> Does that match the type you originally provided?
14:55:54 <phpkid> *** Type           : (a -> a -> Bool) -> [a] -> (b -> b -> b) -> [b] -> b
14:55:55 <phpkid> *** Does not match : (a -> a -> Bool) -> [a] -> Bool  
14:57:49 <Darius> Anyways, don't bother with foldr just make an explicitly recursive version.
14:58:32 <phpkid> can you give me a sample of a recursion
14:58:55 <Darius> let length [] = 0;length (x:xs) = 1 + length xs
15:01:38 <phpkid> ok so it says that the length of an empty list is always 0 and otherwise it takes one element off from the start of the list and adds one at the same time
15:02:39 <phpkid> recursively adds until there are no elements left
15:03:54 <Darius> roughly
15:04:05 <phpkid> so i should do something similar: let isOrdererBy p [] = 0   for starters
15:04:17 <phpkid> i mean True
15:04:42 <phpkid> let isOrderedBy p [] = True
15:05:52 <Darius> phpkid: let is only for local definitions, for top-level definitions you just have: f args = ...
15:07:44 <phpkid> ahh ok, then i will make 2 function definitions and it will know which to use by the type
15:08:08 <phpkid> then the firstone should be: isOrderedBy p [] = True
15:10:08 <phpkid> i have the isOrderBy function arguments: p and xs, now how do i use this xs as you did (x:xs)
15:10:42 <phpkid> im probably asking stupid things
15:11:48 <Darius> http://www.haskell.org/tutorial/patterns.html
15:18:52 <phpkid> if i want to get the first 2 list elements, i should use (x:y:xs) ?
15:19:22 <Darius> Yes.
15:20:15 <phpkid> ok, but i need to leave the y part with the xs part, can i do that?
15:21:23 <Darius> You can cons it back on or use an as-pattern.
15:25:52 <rt> you could just use (y:xs) in the rhs.
15:26:28 <phpkid> rhs?
15:26:46 <rt> right hand side
15:28:19 <phpkid> i have to use the p arg from lhs, with 2 list elements on the rhs
15:33:22 <phpkid> is this something close: isOrderedBy p (x:y:xs) = x p y && isOrderedBy p xs
15:33:45 <Darius> Does it typecheck? Does it work?
15:34:18 <phpkid> well no
15:36:01 <phpkid> the idea is correct? im not very good with the sytax yet
15:37:23 <Darius> Go through some hand evaluations and see if it gets the right answer.
15:40:27 <rt> p probably shouldn't be infix.
15:41:35 <phpkid> *** Expression     : x p y
15:41:35 <phpkid> *** Term           : y
15:41:35 <phpkid> *** Type           : b -> a -> c
15:41:35 <phpkid> *** Does not match : a
15:41:35 <phpkid> *** Because        : unification would give infinite type
15:42:32 <phpkid> i dont get it
15:43:02 <phpkid> infix, let me check what infix is exactly
15:44:02 <rt> instead of writing 3 + 4 (infix) you write + 3 4 (prefix)
15:44:22 <Cale> you could use x `p` y
15:44:37 <Cale> to write a function p of two parameters as an infix operator
15:44:57 <phpkid> aha yes now i get it
15:46:26 <phpkid> now it works ok, but it evaluates  isOrderedBy (<) [1,2,1,2]  as True
15:46:47 <Cale> what is the code that you have?
15:47:05 <phpkid> isOrderedBy :: (a -> a -> Bool) -> [a] -> Bool
15:47:05 <phpkid> isOrderedBy p [] = True
15:47:05 <phpkid> isOrderedBy p (x:y:xs) = x `p` y && isOrderedBy p xs
15:48:25 <Cale> you'll skip elements
15:48:29 <phpkid> i know
15:48:39 <phpkid> i need to go one by one somehow
15:49:00 <Cale> you want isOrderedBy p (y:xs)
15:49:34 <phpkid> do i have x on the rhs then?
15:49:53 <Cale> isOrderedBy p (x:y:xs) = x `p` y && isOrderedBy p (y:xs)
15:50:16 <phpkid> yes ofcourse :)
15:50:28 <phpkid> y will be put back to the list
15:51:37 <rt> your code will also fail if there is an odd number of items in the list.
15:52:39 <phpkid> it goes to some kind of a loop now
15:53:46 <Cale> phpkid: did you get all the base cases?
15:54:19 <phpkid> base cases?
15:54:32 <Cale> well, you're recursing - it has to stop somewhere
15:56:13 <phpkid> so i have to add a stop rule when only one element is left?
15:56:27 <Cale> (x:y:xs) only matches lists with 2 or more elements
15:56:33 <Cale> right
15:56:42 <Cale> or if it's the empty list
15:59:03 <phpkid> i have the rule on line 2 that says true on an empty list
15:59:28 <phpkid> but it will not stop the recursion obviously
16:01:46 <Cale> you also need to say true for a list with 1 element
16:02:03 <phpkid> right
16:02:55 <phpkid> isOrderedBy p [a] = True
16:03:20 <phpkid> that should do it?
16:03:24 <Cale> yeah
16:04:18 <phpkid> well, it works perfect now, thanks everybody
16:27:21 <phpkid> there are prefix and infix, is there a suffix?
16:28:00 <Cale> there could be, but there isn't.
16:28:32 <Cale> usually they're called postfix operators
16:29:25 <Cale> See the language forth if you're interested in postfix.
16:30:07 <phpkid> if i have an operator p with a possible value (<5), is it an operator at all any more?
16:30:21 <Darius> OBJ3 parsers must be fun to write.
16:30:45 <Darius> phpkid: It was never an operator (in one sense) to begin with.
16:30:56 <phpkid> ok
16:32:22 <phpkid> i need to make a function like this:
16:32:24 <phpkid> countDropWhile (>5) [9,7,6,4,14,2,1]  ==>  ([4,14,2,1],3)
16:32:48 <phpkid> do i need to explicidly explode the (>5) there?
16:33:07 <Cale> I don't know what you mean.
16:33:16 * rt fancies a curry.
16:33:25 <Cale> (>5) is just a function that takes a number and checks if it's greater than 5
16:34:19 <Cale> think about the type of countDropWhile
16:34:23 <Cale> what will it be?
16:34:40 <phpkid> countDropWhile :: (a -> Bool) -> [a] -> ([a],Int)
16:35:25 <rt> hmm.... isn't it odd that...
16:35:40 <rt> Prelude> (>5) 1
16:35:40 <rt> False
16:36:03 <ski> no
16:36:13 <Cale> that's perfectly normal
16:36:49 <ski> as opposed to "(5>) 1"
16:37:20 <rt> i find it strange that (> 5) 1 is different than 5 > 1
16:37:33 <Cale> (> 5) 1 is the same as 1 > 5
16:38:24 <ski> f = (> 5)  is the same as  f x = x > 5
16:38:35 <Darius> rt: it's not ((>) 5)
16:39:30 * rt ponders.
16:40:01 <Darius> Just think of it as a fill in the blank thing, (+5), (_+5)
16:40:30 <rt> some aspects of haskell syntax still seem unobvious to me.
16:40:34 * rt needs more practice.
16:40:43 <Darius> Anyways, it reads well. filter (>5) xs, filter the values greater than 5 from xs.
16:41:24 <rt> i agree.  it reads much more naturally, it's just hard to understand how it works in terms of partial applications.
16:41:48 <Darius> Don't think of it in terms of partial applications, think of it as a snippet of code.
16:42:07 <Cale> (>5) = flip (>) 5 
16:42:09 <Cale> iirc
16:42:18 <Darius> @type (>5)
16:42:19 <lambdabot> flip (>) 5 :: (Num a, Ord a) => a -> Bool
16:45:14 * Darius really needs to write the damn compiler. *sigh*
16:45:35 <Smerdyakov> Darius, which compiler?
16:46:42 <Darius> A compiler to LVM bytecodes.  I'd just scrape them from Helium's output, but it will need to be written anyways and it looks like that would be a pain.
18:36:14 * phubuh returns from the movie theater!
18:39:24 <diminished> phubuh: http://cgi.ebay.com/ws/eBayISAPI.dll?ViewItem&item=2947231410&category=47127
18:46:44 <ski> huh ?
18:54:27 <Darius> ski: When something like this happens it's best not to ask questions or make questioning grunts.
22:18:40 <Pseudonym> Who knows about Template Haskell?
22:18:48 <Pseudonym> Here, I mean.
22:53:14 <harsha123> does haskell provide hooks to postgreSQL or MySQL?
22:57:28 <andersca> hey juhp
22:58:34 <dennisb> harsha123: shapr uses postgresql from haskell
22:58:49 <andersca> morning dennisb
22:59:10 <dennisb> doesn't lambdabot contain code for it?
22:59:17 <dennisb> andersca: god morgon
22:59:24 <harsha123> Pseudonym: hmm I think Igloo knows about Template Haskell.. 
22:59:32 <dennisb> and see, you scared jhup away :-)
22:59:45 <andersca> dennisb: got an oral afp exam in an hour
22:59:57 <dennisb> ok
23:01:05 <Pseudonym> I was curious how good its support for generating algebraic data types was.
