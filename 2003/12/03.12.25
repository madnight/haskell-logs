02:44:54 <ejt> is fromMaybe a new function ?  I'm importing Maybe, yet the compiler (ghc 6.0.1) can't find it
02:45:56 <dennisb> ejt: maybe you want fromJust ?
02:46:05 <ejt> no
02:46:17 <dennisb> what does fromMaybe do? I don't think i've seen that
02:46:20 <ejt> fromMaybe takes a default to return in the case of Nothing
02:46:39 <dennisb> there is also the maybe function
02:46:48 <ejt> y, I'll use that with (id)
02:47:14 <dennisb> Yea, I see fromMaybe in the standard
02:47:27 <dennisb> it's just that I've not used it
02:48:42 <dennisb> ejt: I have ghc 6.0.1 and fromMaybe is there
02:49:34 <ejt> hmmm
02:49:51 <ejt> just importing Maybe ?
02:49:54 <dennisb> yes
02:50:15 <dennisb> try it in ghci, :m Maybe
02:50:17 <ejt> k, found it, me being stupid, thx
07:24:09 <Cale> l
08:08:21 <harsha123> hi Smerdyakov 
08:10:15 <Smerdyakov> Hi
08:11:12 <harsha123> I just wanted to know if you referred any book available in the market.. for your Subject Math Test
08:11:33 * harsha123 was wondering if there was a need to buy any such book!
08:13:09 <Smerdyakov> What Subject Math Test?
08:13:49 <harsha123> Subject GRE (Math)
08:13:56 <Smerdyakov> Hey, cool. Never took that one.
08:14:15 <harsha123> I thought you told me you took one! 
08:14:45 <Smerdyakov> I took the CS Subject Test.
08:15:10 <harsha123> ahh Ok.. i got you wrong .. 
08:15:43 <Smerdyakov> You looking at math grad school?
08:16:13 <harsha123> hmm.. basically CS but with a mathematical perspective..
08:16:17 <harsha123> what do you say?
08:16:38 <Smerdyakov> Are you asking if I approve of your plans? :)
08:16:58 <harsha123> :) i dont mind. it.. you have been there and done that!
08:17:46 <Smerdyakov> The math test should be fine.
08:18:09 <Smerdyakov> Are you doing a math degree now?
08:18:10 <harsha123> Ok..:)
08:18:22 <harsha123> No am doing a CS degree..
08:18:40 <Smerdyakov> But you feel you know the math test material better?
08:18:44 <harsha123> actually i finished. it a few months back!
08:19:14 <harsha123> Yeah I think so..
08:19:35 <Smerdyakov> OK.
08:19:42 <Smerdyakov> Where are you applying?
08:20:40 <harsha123> how is Brown? any idea?
08:22:48 <Smerdyakov> Icky, I think.
08:23:04 <harsha123> Icky? Sorry, I didnt get you.
08:23:18 <Smerdyakov> Not prestigious in CS.
08:23:27 <harsha123> ahh Ok.. 
08:23:42 <Smerdyakov> http://www-2.cs.cmu.edu/~harchol/gradschooltalk.pdf has a bootleg copy of USNews CS PhD rankings, so you can see for yourself.
08:23:52 <harsha123> hmm.. you suggest anything? 
08:23:58 <harsha123> ok lemme see that
08:24:22 <Smerdyakov> I can't suggest much, since I don't know how attractive an applicant you're going to make yourself.
08:24:35 <Smerdyakov> And I think we should stop monopolizing this channel now!
08:24:37 <Smerdyakov> :D
08:25:56 <harsha123> sure.. :) i understand.. 
08:26:27 <harsha123> if you still dont mind talking about to me about this.. i can join #hcoop! :p
08:27:13 <Smerdyakov> I sent you a private message, which seems appropriate, because we're the only ones talking.
08:45:04 * Cale considers writing a wiki page to have short example programs with detailed explanations
08:50:20 <Darius> Go for it.
08:52:38 <ayrnieu> indeed, you should start it.
08:52:54 <Cale> Will do :)
08:53:57 <Cale> I'd just written a small program to find copalindromes in a file (i.e. stressed/desserts), and thought it might make a nice short example.
08:54:21 <Cale> http://haskell.org/hawiki/ShortExamples has the code - I'm just about to annotate it
09:58:18 <Cale> http://haskell.org/hawiki/ShortExamples -- the first example
09:58:29 <Cale> I have to go now :)
10:43:31 <maihem> is $ an operator, or a syntactic transform. It seems to put an opening parenthesis where it occurs, and a matching renthesis as far to the right as it can. Is this the correct way to think about it?
10:43:47 <andersca> maihem: that's how I think about it
10:45:14 <maihem> thx
10:45:19 <Riastradh> $ is just an operator with the lowest precedence.
10:46:32 <maihem> $ = \a b -> a b ?
10:46:49 <maihem> I mean '$' = \...
10:46:56 <andersca> ($) :)
10:47:04 <maihem> heh :)
11:12:07 <phubuh> you can say a $ b = a b
11:12:31 <maihem> ok
11:44:02 <stepcut> any template haskell users in the house?
15:24:05 <maihem> I have a naive implementation of the fibonacci sequence that fibs !! 100000 runs out of memory, I'm wondering what the caus of that is. I don't know if it is the size of the number representation or something else...
15:24:12 <maihem> let fibs = [0,1] ++ [a+b | (a,b) <- zip fibs $ tail fibs]
15:24:39 <maihem> any hints?
15:31:12 <stepcut> hrm
15:32:48 <stepcut> i think its not tail recursive
15:33:02 <maihem> oh?
15:33:14 <maihem> it should be
15:33:18 <Darius> maihem: runs out of heap, or runs out of stack?
15:34:02 <maihem> fibs !! 100000 got OOM killed and took the xterm with it :) fibs !! 65000 ish ran out of heap
15:35:35 <Darius> I think the problem is that you are indexing with !!.  This doesn't touch any of the elements of the list so instead of getting a list of numbers you get a list of (growing? thunks) until you finally try to print fibs!!100000 and it can't garbage collect because there is a top level reference to fibs.
15:35:58 <maihem> thunks?
15:36:59 <stepcut> thunks == calculations to do in the future
15:37:12 <Darius> delayed evaluations.  If you write [1+2,3+4] (module basic optimizations) it would be stored a pointer to an updateable closure that will do the addition.
15:37:16 <maihem> just did !! 65000, merely nearly out of swap this time :)
15:38:27 <Darius> Writing 'let fibs = ... in fibs!!100000' may run better because it will be able to garbage collect as it goes, alternatively you could touch the list elements as you go.
15:38:47 <Darius> Which should also work if I'm right.
15:39:01 <maihem> how would I "touch" them?
15:39:04 <stepcut> maihem: I can't articulate why, but that function is just asking for trouble. It is totally the type of function that will cause a heap overflow. Haskell is lazy -- meaning it doesn't actually do calculations until it really has too. That function will create many 'thunks' that will be stored in the heap
15:40:19 <Darius> You can use seq.  So you might make a touchingNth 0 (x:_) = x;touchingNth n (x:xs) = x `seq` touchingNth (n-1) xs
15:40:21 <maihem> I thought haskell was better described simply as non-strict meaning if it knows it will have to do them, it can go ahead and do them?
15:40:39 <maihem> Am I mistaken?
15:41:01 <Darius> Of course, simply compiling it would probably also make a difference (though that may be in part because GHC has a different policy for CAFs in compiled and interpreted code)
15:41:19 <maihem> oh, I didn't think of that.
15:41:47 <stepcut> maihem: that is true -- the compiler can do strictness analysis and go ahead and do them
15:41:55 <Darius> maihem: Non-strict doesn't require that though, and in general it's undecidable whether you are 'going to need' something
15:42:16 <stepcut> maihem: but I don't know if this is a case the compiler will detect
15:42:56 <stepcut> maihem: fibs is an infinate list so you probably don't want it to be evaluated strictly
15:42:57 <maihem> true, especially in the interpreter, where my next evaluation could be fibs !! 99000 ;)
15:43:54 <maihem> which must be why the let fibs = ... in fibs !! 100000 will do the trick. But I don't understand how the touchingNth works :(
15:45:43 <Darius> The touchingNth function just forces each element of the list as it goes.  This will make sure you don't have a 99999 long list of thunks and instead have a 99999 long list of Integers.
15:47:17 <Darius> On a side note, module deforesting which likely isn't being applied in the interpreter, you are creating an extraneous intermediate list.
15:47:42 <Darius> The typical wap of writing fibs like that is 'fibs = 0:1:zipWith (+) fibs (tail fibs)'
15:48:11 <maihem> seq is a hint to the haskell implementation that the calculation should be done early?
15:48:46 <Darius> It's not a hint. It forces strict evaluation.  (1/0) `seq` 5 always throws an exception.
15:49:04 <maihem> cool feature. I must remember that
15:49:36 <Darius> seq is a strict (in it's first argument) version of the function \forceThis returnThis -> returnThis
15:50:41 <maihem> how does you fibs above (using zipWith) avoid the same problem?
15:54:58 <maihem> but this was fast and used almost no memory : let fibs = 0:1:zipWith (+) fibs (tail fibs) in fibs !! 100000
15:55:03 <Darius> It avoids the problem of intermediate lists, I don't know if it avoids the other problem (I don't see why it would though it would mitigate it some).
15:58:26 <Darius> You're program is equivalent to fibs = [0,1] ++ map (\(a,b) -> a+b) (zip fibs (tail fibs)), the list between zip and map is unnecessary.
15:59:46 <Darius> On a yet more side note, I'm suspicious about the (++), you may want to try your original program with (0:1:) instead of ([0,1]++) though it that version should only copy the first two elements once.
16:00:21 <maihem> but if I do fibs !! 100000 then even the interpreter doesn't *have* to create a list, only a description "given that I've just processed this element, where do I get the next", and that rule is the same for all elements, so there isn't really a list there... is there?
16:01:27 <Darius> and if you follow that up with 'fibs' it should print the list without reevaluating it so it needs to save it somewhere and as long as it's reachable it can't be garbage collected.
16:02:46 <maihem> if it has to loop to print, and all it has to do to get each element is +, printing it from memory is as compute intensive as recalculating as it goes isn't it?
16:03:27 <maihem> So I would have thought it depended on what you had to do to calculate it?
16:03:31 <Darius> Probably even more so in this case, but it's not optimizing, it doesn't try to figure this out.
16:03:39 <maihem> oh, I get it.
16:03:52 <maihem> sorry :)
16:04:24 <maihem> thanks for your tips to force performance on a non-optimising implementation then :) Looks like I'm going to need them :)
16:04:57 <Darius> (Actually with Integer addition (v. Int addition) it could technically take arbitrarily long so it is possible for it to take longer.
16:07:25 <maihem> ah yes. especially if I were multiplying :)
16:14:28 <`John> hello. is there a complete idiot's guide to haskell? one that isn't technical gives good examples and is a magnitude easier than a Gentle Introduction?
16:15:30 <Smerdyakov> Yes
16:15:47 <Smerdyakov> http://www.cs.ou.edu/cs1323h/textbook/haskell.shtml
16:25:50 * Darius imagines a LISPer using lists as arrays talking to another LISPer, "Now you take the cadidididididididididididididididider"
16:44:37 <`John> Smerdyakov: thanks I guess I'll have to tak a look at that.
16:44:50 <`John> Darius, what's the equivilant of car cdr in haskell?
16:49:42 <maihem> I think its "head $ tail mylist"
16:54:31 <Darius> In one sense there isn't an equivalent (except for maybe fst, snd :: (Dynamic,Dynamic) -> Dynamic), but for most uses it's head and tail (well, pattern matching is much more common than using those functions).
17:44:32 <`John> ah makes sense. :P
17:46:55 <ayrnieu> What does?
17:49:32 <`John> the absense of head and tail.
17:49:52 <`John> or rather , the over useage of it, like in lisp. :P
17:53:23 <ayrnieu> I don't follow, but OK.
17:55:24 <`John> :)
20:16:33 <`John> ayrnieu, didn't realize you walked into a conversion.
20:16:52 <`John> `John	Darius, what's the equivilant of car cdr in haskell?
20:16:59 <`John> maihem	I think its "head $ tail mylist"
20:17:06 <`John> Darius	In one sense there isn't an equivalent (except for maybe fst, snd :: (Dynamic,Dynamic) -> Dynamic), but for most uses it's head and tail (well, pattern matching is much more common than using those functions).
20:18:27 <ayrnieu> indeed.  let _:x:_ = [1..] in x
21:20:54 <`John> question: why does x = "msg" fail in a hugs interpreter?
21:21:32 <Cale> because you aren't editing the haskell script, you're providing expressions to be evaluated.
21:22:03 <Cale> ghci lets you do   let x = "msg"   though
21:24:08 <`John> i can't see why the implementor won't allow to evaulate expressions, unless there is no 'state machine' in haskell. shouldn't x="msg" create a graph of variables to constants then reduce the expression to a show command?
21:25:24 <Darius> You can evaluate expressions.  x = "msg" is not an expression.
21:26:03 <Cale> you can do something like let x = "msg" in reverse x
21:26:50 <Darius> @type let x = "msg" in reverse x
21:26:58 <`John> hey that works. great. thanks cale.
21:27:11 <lambdabot> let {x ($0 (0 "msg") $0) $0 $0} in reverse x :: [Char]
21:28:20 * ayrnieu thinks about a hugs hack which, given an input of "let x = [1..]\n", will prepend further inputs with "let x [1..] in "
21:28:37 <ayrnieu> also "let x = [1..] in "
21:28:55 <Darius> ayrnieu: Why not just do the same thing GHCi does?
21:29:05 <ayrnieu> Darius - what does GHCi do?
21:29:29 <Darius> ayrnieu: It acts sort of like you are in a do block.
21:30:01 <Darius> So, let x = [1..] scopes over the rest of the expressions as in do let x = [1..]; ...
21:31:33 <Darius> The only trick is that if the type of the expression is not of the form IO a for some a, then it needs to translate to print <expr>
21:46:16 <`John> where is a reference manual for haskell? (like let form, etc)
21:46:48 <ayrnieu> john - you probably actually want the "Gentle Introduction to Haskell", but the haskell98 standard describes such things.
21:47:56 <`John> thats a reference? hehe. ok thanks aynieu.
21:48:11 <ayrnieu> What did you expect as a 'reference'?
21:50:54 <`John> a set of functions, statement operators with syntax and semantic notations, nothing more, nothing less.
21:51:51 <ayrnieu> I don't understand 'statement operators', sorry.  But OK.
21:53:07 <`John> sorry, statement, operators. :P
21:53:46 * ayrnieu guessas the John refers to such as "import Module" as statements.
21:54:00 <`John> appears as though I have a foggy copy of Gentl. there a clearer typefont version?
21:54:38 <ayrnieu> of the "Gentle Introduction to Haskell"?  HTML formats exist.
21:55:03 <`John> alright.
21:55:44 <dennisb> John: http://www.haskell.org/tutorial/
21:57:32 <`John> client init (resp:resps) = init : client (next resp) resps
21:57:34 <`John> server      (req:reqs)   = process req : server reqs <--not a very good example for a firt time haskeller.
21:57:43 <`John> first even. :P
21:59:09 <dennisb> what about it? and where did you get it?
21:59:32 <`John> from gentle 
21:59:33 <dennisb> it's a bit complicated as a first example
22:00:11 <dennisb> John: are you sure that is the first?
22:00:18 <dennisb> I don't remember that
22:00:22 <ayrnieu> It takes a certain kind of learning to handle, I suppose.
22:01:00 <dennisb> this is the first example in Gentle:
22:01:03 <dennisb> inc n          = n+1
22:01:11 <dennisb> first function example I should say
22:01:38 <`John> no never said it was the first one.
22:01:55 <Riastradh> He said 'first-time Haskeller,' not 'first example.'
22:02:00 <dennisb> I see that now
22:56:59 <`John> what's the function to convert a int to a string. what's a good way other than looking at Gentle to find such functions?
22:57:56 <Darius> show
22:57:58 <Darius> @type show
22:57:59 <lambdabot> show :: Show a => a -> String
23:01:07 <`John> than
23:04:03 <`John> @type in
23:04:23 <`John> @type []
23:04:24 <lambdabot> [] :: [a]
23:04:45 <`John> @type [1..]
23:04:46 <lambdabot> enumFrom 1 :: (Enum a, Num a) => [a]
23:05:03 <`John> @type [1..0]
23:05:03 <lambdabot> enumFromTo 1 0 :: (Enum a, Num a) => [a]
