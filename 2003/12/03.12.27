00:42:29 * DeezNuts is away: "searching for the key to my code..."
03:34:36 <TripleDES> hi
04:30:45 <esap> Hmm.. what do you think about an idea that 'seq' and 'par' and 'const' have side effects?
05:02:16 <Darius> esap: I think you'll need to be more specific and define 'side-effect'
05:03:09 <esap> darius: well I mean, const ignores its argument, that's a side effect. seq evaluates its first argument, that's also a side effect, and par will start some threads (also a side effect).
05:05:22 <Darius> That's the first half of an answer.
05:07:03 <esap> darius: A side effect, to me, is something that is done to the environment, but which isn't (really) visible in the semantic constraints [e.g. typing].
05:08:32 <esap> darius: like memory deallocation is a side effect of garbage collection.
05:11:08 <Darius> Ok.  Then so are all the "real" side-effects occuring all the time, e.g. bumping IP, storing into memory, etc.
05:11:46 <esap> Yes.
05:12:59 <esap> The point, I guess, is that Haskell doesn't really represent side effects in the semantics [except for I/O monad]. But there are some operations that clearly have side effects [seq, par, const etc.]
05:13:40 <Darius> All operations clearly have side-effects otherwise they'd be utterly pointless.
05:14:27 <esap> Heh, well not necessarily, consider 'curry' or 'uncurry'. What is the side effect of those operations?
05:15:00 <Darius> The closures they allocate, the machine state they mutate.
05:15:24 <esap> You can write 'pure functions' that only rearrange data. I don't consider such things as side effects.
05:16:06 <esap> As long as it doesn't obtain some information out of thin air, or ignore/lose some information.
05:16:33 <Darius> That's a different definition of side-effect.
05:17:57 <esap> Yea, in Haskell, most operations at least copy the value, and copying is clearly a side effect.
05:21:00 <esap> One interesting case is the 'memoize' thing, because to external world, it seems it doesn't have any side effects, but internally, it seems to have side effects [allocating memory and storing temporary results].
05:22:52 <esap> You might say it doesn't have any 'unsafe' side effects [those that the run-time system doesn't perform anyway].
05:23:25 <esap> But I guess it's not that clear how I should define it in that case.
05:30:44 <shamen> hello :)
06:26:49 <sex|more> hello
06:27:28 <sex|more> Someone's using hugs 2003?
08:28:41 * Darius wonders about GHC hackers and animal sounds.
09:01:27 <maihem> I don't understand something about the ST monad (it is explained in the paper "State in Haskell" - Launchbury/Peyton-Jones)
09:02:04 <maihem> how do they stop a reference from being used for another state, how could you do it if they didn't. Why does it matter?
09:04:37 <Darius> let aref = runST (newSTRef 5);f ref x = runST (x' <- readSTRef ref;writeSTRef x) in (f 1,f 1)
09:05:07 <Darius> f ref x = runST (do x' <- readSTRef;writeSTRef x;return x')
09:06:08 <Darius> (f aref 1,f aref 1)
09:06:40 <Darius> let me try this all over again
09:07:06 <Darius> let aref = runST (newSTRef 5); f x = runST (x' <- readSTRef aref;writeSTRef x;return x') in (f 1, f 1)
09:09:44 <Darius> well forgot the do again, but you get the idea (or at least can read the code).
09:13:56 <maihem> so f does an exchange?
09:14:31 <maihem> Hang on, I'll try to put that into a module...
09:14:45 <Darius> It won't work
09:15:12 <Darius> f reads aref and returns that value, and writes it's argument into aref.
09:15:13 <maihem> yeah, I wan't to see what the code means, and what diagnostic the compiler gives.
09:15:46 <Darius> Well, the code only answers the second two of you're questions.
09:18:07 <maihem> I understand runST creates an empty state, then applies the transformer (newSTRef 5) to create a mutable variable within that state that can be refered to with 5. yes? does runSt return the output value of the transformer (which for newSTRef is a reference of some sort)?
09:19:15 <maihem> so it is meaningless to return a reference to a state variable, since the state it refers to is no longer "alive"
09:19:44 <maihem> but I don't understand how it is prevented statically, at compile time
09:22:09 <maihem> From the paper, it seems to be that the reference type is parameterised not by the type of the state, but by exactly which runST defined it?
09:22:13 <Darius> maihem: newSTRef 5 returns a reference initialized to 5 not refered to with 5.
09:22:25 <maihem> oh, sorry :)
09:23:16 <Darius> Also the problem isn't really that the state isn't alive, but that that pattern of usage would break purity as becomes evident if you (mentally) evaluate the above code.
09:23:39 <maihem> so runST (newSTRef >>= \aref -> readSTRef aref >>= \x' ... etc is the way to use it
09:24:17 <Darius> Yes.  The ST monad is for implementing pure computations that internally use state.
09:24:36 <Darius> Once you 'runST' you are saying you are done with the state.
09:26:54 <Darius> Anyways, if the above code were legal, what would be the result (i.e. what pair is returned)? (there are two answers) and why are both wrong?
09:27:34 <Smerdyakov> That was a meta statement, Darius, since you referred to an object introduced inside parentheses from outside those parentheses. :)
09:27:50 <maihem> so ST really stands for State Transformer. I build a state transformer from the primitive ones using >>=, >> and return. then runST applies that state transformer to the empty state
09:29:26 <Darius> Smerdyakov: I was thinking about unparenthesizing it, but meh.  (Or perhaps I'm trying to upset lurking lispers))
09:30:55 <Darius> maihem: More or less.
09:31:43 <maihem> so what exactly does that mean: runST :: (forall s . ST s a) -> a
09:33:19 <maihem> there are a different set of s for each a ?
09:34:24 <Darius> Well, exactly it means: given an ST s a value that will work for all 's's runST will produce an a.
09:34:29 <Darius> (forall a)
09:39:00 <maihem> so how does it stop me from doing let aref = runST (newSTRef 5) in runST (readSTRef aref) -- which is utterly meaningless
09:40:03 <Darius> It's not utterly meaningless, it's simply impure.
09:42:04 <maihem> the readSTRef in the second runST tries to read a value from the pristine empty state, and there isn't one. the library somehow makes this fail at compiletime
09:42:43 <Darius> If it weren't impure, there would be no reason to make it fail.
09:44:10 <maihem> it's is pure, its just _|_. But *How* does it fail to compile instead of evaluating to bottom at runtime?
09:45:59 <maihem> readSTRef aref when processed within the ST monad gets the value of the thing within that state that is refered to by aref. if aref doesn't refer to something in that state it must be bottom
09:47:09 <maihem> but if aref :: STRef s a, and readSTRef :: STRef s a -> ST s a, why does it fail. how are the two separate empty states of different type?
09:48:11 <Darius> Most of the magic is in runST.  In fact, the thing that makes (the typing) all work is the rank-2 universal quantification.
09:48:57 <Darius> The nitty-gritty is that the s in (forall s. ST s a) can only be used inside those parentheses, it's unbound outside of them.  To return a reference created in a computation you'd have to have a value of type ST s (STRef s a) or something of the form ST s (f s).
09:49:02 <maihem> then that must be the bit I don't understand :) Is the type of each state dependent on the the previous state and the transformer applied to get the new one?
09:50:12 <Darius> So if, x has type ST s (STRef s Int) then runST x would have type STRef s Int, but then the 's' escapes.
09:51:11 <Darius> I.e. the 'instance' of runST that would be used would be runST :: (forall s. ST s (STRef s Int)) -> STRef s Int, but the third s isn't bound.
09:54:25 <maihem> if I did: let aref = runST (newSTRef 5) in runST (newSTRef 5 >> readSTRef aref) -- it won't let me do that either of course, but is it meaningful and well defined (aref is the result of applying newSTRef 5 to the empty state, and that is defined in the second runST exactly the same, causing the same state to exist.
09:55:06 <maihem> Just to emphasise, I know I can't do that.
09:58:32 <Darius> Even in those terms, it's still not meaningful.  There are a couple of ways to think about it in those terms.  One is newSTRef makes 'names' (pointers) that are local to the state and so aref = state1.ref1 and the readSTRef will only have state2.ref1 in it's state.
10:02:35 <maihem> That's certainly an optimisation the compiler can make, knowing that my program doesn't try the above. Which is probably why the method used to specify the runST prevents me from doing it. It means it doesn't have to check everything and make the result _|_ if need be - Which would be slow :)
10:02:54 <maihem> thanks, I think I understand it now
10:06:56 <Darius> The reason I emphasized 'in those terms' and the fact that it isn't meaningless, is because the idealization of runST creating an "empty state" is so that runST will be pure, trying to say that it's meaningless because the state is "empty" is an instance of wagging the dog.
10:07:59 <maihem> wagging the dog?
10:11:43 <maihem> does that refer to the fact that dogs wag themselves and don't need me to try to do it for them?
10:13:30 <Darius> Actually I'm somewhat abusing that phrase, more simply it's an instance of circular logic. (It refers to the fact that a dog wags it's tail, the tail doesn't wag the dog)
10:15:15 <maihem> you mean the state that runST connects to the start of the given transformer is only empty because if it wasn't then things like the above could be meaningful?
10:16:09 <Darius> Yes.
10:16:15 <maihem> I can see that it is a good reason for making the choice, but doesn't a pure functional language exist in the mathematical domain, where it is correct both ways?
10:16:51 <maihem> the state was chosen to be empty to allow the optimisation. The optimisation can be done because we made the state empty
10:17:17 <Darius> Which optimization?
10:17:51 <maihem> where the state can be "updated" in place, in real memory
10:18:05 <Darius> That could be done without having the state be empty.
10:18:44 <maihem> true
10:18:48 <maihem> very true
10:18:52 <maihem> I'm a fool
10:20:08 <Darius> If the state is "empty" at each runST then naturally looking up a reference from an old runST invocation would be undefined, but why do we want that?
10:26:45 <maihem> I think I've figured out what I meant: Since a reference is a function, it is applied to a state to get what it refers to. applying a reference to a state that it was not taken from is either meaningless (_|_), disallowed (does not comile), or refers to the thing in the new state that was created in the same fashion as the thing in the old state. For two states created in the same way, the same reference applied to each s
10:26:45 <maihem> tate should have the same result (Since they are actually the same state). That is a difficult thing to do when the states are updated in place in the implementation :) So disallowing it is a good solution. Is this a good way for me to think about it?
10:32:45 <Darius> Why bother with multiple states?  Why not just have each STRef be a reference into some global (as it is actually implemented and as IORefs conceptually and actually do)
10:34:06 <maihem> I haven't used globals since I was a little girl.
10:34:37 <maihem> NB, I was never a little girl :)
10:35:25 <Darius> Global variables are not global state and (for certain definitions of variable) you've used them all the time in every program you've ever written.
10:35:27 <maihem> I've been making exceptions in haskell, but a "golbal" definition is really an ultimate truth, so I think its okay :)
10:37:12 <maihem> where globals are an inevitable feature of the device used to interprete a language, one must make do, but try to encapsulate their use, and never rely on them to remain how one leaves them if anything else had a chance to run
10:39:51 <maihem> okay, for some things, I'll define a global variable or too, but only if I want the code that uses them to be non-reentrant, and process only one data-set at a time - or is used to process multiple datasets using the global in a safe, encapsulated manner (as above). The global is then defined for my purposes as a user of it as a feature of the device and treated with the same caution.
10:41:53 <Darius> Let me rephrase, global variables are not the same as having a single global state.
10:44:38 <maihem> Oh, you mean, if I'm going to have one peice of code use two state transformer threads, in a way that requires using references for one with the other, why not use just one state? I agree. I've just been trying to understand the steps necessary to make performance good by restricting what is well defined, and what is simply not allowed.
10:46:23 <maihem> I've just read back some of the stuff I've written, if I've sounded like I'm stubbornly refusing to accept how haskell is designed, I didn't mean it that way. I'm just trying to go through what ifs and whys so I can better understand functional programming techniques.
10:49:31 <Darius> No what I'm harping on is why is that abstraction chosen (of each runST creating an empty state) rather than having (the more realistic) global state which would make the earlier examples meaningful.  It's not done for performance reasons (well, in one respect it could be thought of that way) but (more directly) for correctness reasons.  I'm just driving home why the abstraction makes those examples meaningless.
10:52:33 <Darius> The reason I did this, is earlier I said the example wasn't meaningless only impure, and you responded that it is meaningless because of the conceptual idea of runST, so the question being begged is why is the conceptual idea of runST such that those examples are meaningless.
10:55:52 <maihem> I thought I said it was meaningful ? Because if two states are the same, then the reference from one should give the same result with the other?
10:56:45 <maihem> wait... I said "is it meaningful" :)
10:59:06 <maihem> but that would also be pure
11:11:55 <Darius> What I'm refering to is this exchange: <maihem> so how does it stop me from doing let aref = runST (newSTRef 5) in runST (readSTRef aref) -- which is utterly meaningless
11:11:55 <Darius> <Darius> It's not utterly meaningless, it's simply impure.
11:11:55 <Darius> <maihem> the readSTRef in the second runST tries to read a value from the pristine empty state, and there isn't one. the library somehow makes this fail at compiletime
11:11:55 <Darius> <Darius> If it weren't impure, there would be no reason to make it fail.
11:13:36 <maihem> I don't understand how it is meaningful to read something from an empty state :/
11:15:04 <Darius> The point is, that the only reason we think of runST as creating an "empty" state is because it -makes- that example meaningless.  There are perfectly reasonable (in fact, -more- reasonable) ways of thinking of runST's operation that would make those operations meaningful, so why not choose those?
11:15:27 <Darius> (i.e. why don't we want that to be meaningful?)
11:17:02 <maihem> by meaningless, I mean bottom. if you try to read a variable from something that doesn't have that variable, it is bottom. surely. and isn't that pure?
11:18:10 <Darius> Yes it is.  But why have it be bottom?
11:18:21 <Darius> That's the question.
11:20:48 <maihem> I suppose you could have the dereference operation return Maybe a instead?
11:21:22 <Darius> You could have the dereference operation return the value allocated earlier, that would be reasonable.
11:23:39 <maihem> if the eventual dereferencing function doesn't have the state as an argument, then yes. But it does doesn't it? The Monad is implemented in order to take care of that for us, isn't it?
11:28:52 <Darius> Did you invert some words there?
11:29:49 <maihem> I don't think so
11:39:36 <Darius> Then what you are saying doesn't really make sense, however, there is a good argument along the lines that the ST monad holds the state and runST eliminates ST and a purely functional (but untypeable in Haskell) implementation would have this behavior.
11:43:00 <maihem> That's how I was thinking about it. Why would it be untypable? Untypeable, like haskell can't describe the type, or that such a program can't be typed on the keyboard?
11:43:44 <Darius> Untypeable as in type systems.
11:45:25 <maihem> oh, I don'tknow enough haskell to understand that. do you know a good paper at citeseer or something?
11:49:40 <Smerdyakov> A good paper on what?
11:52:42 <maihem> why the type system of haskell can't describe the single threaded state stuff as an instance of Monad.
11:53:48 <Smerdyakov> But.... doesn't the state monad do just that?
11:54:01 <maihem> maybe I misundstand what Darius just said
11:54:56 <Darius> The problem isn't the single threaded part.  The problem is the various types of references. 
11:55:27 <Darius> The issue was discussed some months back on the mailinglist starting at http://haskell.org/pipermail/haskell/2003-May/011922.html
11:56:29 <Darius> then this thread http://haskell.org/pipermail/haskell/2003-June/011939.html
11:57:00 <maihem> is that haskell-general, I'll read it via gmane in a newsreader (nicer interface IMHO)
11:58:14 <Darius> And the specific issue is brought out with http://haskell.org/pipermail/haskell/2003-June/012000.html
13:43:27 <maihem> An interesting read indeed.
13:45:36 <maihem> One post got almost there, but it required the type of the monad to change (which can't happen): m a -> (a -> m' b) -> m' b
13:50:45 <maihem> Hm, That particular problem looks like the Visitor pattern from OOP? What if Monad were actually subclass of Visitor that does something like this? Is it possible to define an instance of a class for one function application?
13:51:27 <maihem> I suppose not, as it would mean everything that depended on that would have a different set of instances to everything that didn't. It doesn't make any sense :(
15:13:42 <maihem> Regarding fundeps: class Mult a b c | a b -> c where { (*) :: a -> b -> c }
15:14:50 <maihem> how does the compiler determine what type c is? The first instance it finds? Or it craps out if their is any conflict?
15:14:59 <maihem> s/their/there/
15:15:20 <esap> It will prevent the existence of two instance declarations that conflict.
15:15:48 <maihem> so importing an instance, and defining another is a compile time error?
15:16:04 <esap> yup.
15:16:11 <maihem> thx esap!
15:17:35 <Darius> esap: You may find this site interesting if you haven't already seen it, and also other pages on this site, http://www-staff.it.uts.edu.au/~cbj/Publications/patterns.html
15:18:15 <esap> I don't remember seeing that.
15:18:19 <esap> Thanks for the link.
15:19:57 <esap> Hmm.. about the reference discussion, could you do references by first expressing layering with fundeps and/or destructors that would store the destructed state somewhere?
15:20:57 * esap read backlog :-)
15:25:45 <esap> darius: about the pattern calculus, I think subtraction types are a solution to that as well. In particular A\\B represents the context of a case branch.
17:18:44 <`John> has anyone tried to compile HOpenGL? I get ghc-6.2: unrecognised flags: -fno-prune-tydecls when I attempt to compile greencard on ghc 6.2.
17:29:17 <`John> did they remove it?
17:57:08 <`John> next onto HOpenGL: GL.hs:73:
17:57:10 <`John>     Failed to load interface for `GL_BasicTypes':
17:57:11 <`John>         Could not find interface file for `GL_BasicTypes'
17:57:13 <`John>         (use -v to see a list of the files searched for)
18:08:04 <`John> appears to be a gc file instead of a hs.
18:22:44 <`John> hello. i got an actual haskell question. I am trying to compile HOpenGL through a make all and it errors on GL_BasicTypes giving: false :: Word8
18:22:45 <`John> false =
18:22:47 <`John>   unsafePerformIO(
18:22:49 <`John>     _casm_ ``do {unsigned int res1;
18:22:51 <`John>                  do {res1=GL_FALSE;
18:22:53 <`John>                      %r = (unsigned int)(res1);} while(0);} while(0);''
18:22:55 <`John>     >>= \  res1  ->
18:22:57 <`John>     let gc_res1 = ( (fromIntegral :: Word32 -> Word8 )  (res1)) in
18:22:59 <`John>     (return (gc_res1)))
18:23:16 <`John> the problem line appear at >>= \
20:14:29 <carlossch> hi there
20:14:37 <ayrnieu> hello carlos.
20:15:35 <carlossch> has anyone experienced weird things with type classes and type inferencing in ghc-6.2?
20:16:05 <ayrnieu> I have experienced 'type classes' and 'type inferencing' in ghc-6.2, but I wouldn't call them 'wierd'.
20:16:23 <carlossch> I'm not sure if this is the expected behavior, but what is happening is that the type inferencer seems to be inferencing a less general type than what is possible
20:16:33 <carlossch> and I'm not using rank-2 polymorphisms or stuff like that
20:17:45 <carlossch> Specifically, I have a function that should have the type (Num a, Num b) => String -> a -> b -> PSCommand (just a simple datatype). I'm sure this is right because if I state the type explicitly the checker does not complain
20:18:01 <carlossch> However, if I remove the type annotation, I get a type String -> Integer -> Integer -> PSCommand
20:18:26 <ayrnieu> OK.
20:19:00 <Cale> @type 10
20:19:01 <lambdabot> 10 :: Num a => a
20:19:11 <Smerdyakov> @type 214215
20:19:12 <lambdabot> 214215 :: Num a => a
20:19:53 <carlossch> Now, the code is a bit tricky, it uses the technique described in Oliver Danvy's "Functional Unparsing"
20:20:38 <carlossch> I wouldn't mind the annotations, but some types are quite big... it gets clumsy
20:23:13 <Cale> hmm...
20:23:38 <Cale> ah
20:24:22 <Cale> yeah, I made a file with "a = 10" in it, and loaded it in ghci, and it inferred a type of Integer
20:25:06 <carlossch> same behaviour here
20:25:57 <Cale> If you then add b = a/2, a will become type Double
20:26:19 <carlossch> weird.. ? is this intended?
20:26:32 <Cale> I think I recall something about this
20:28:11 <Cale> An integer literal represents the application of the function fromInteger to the appropriate value of type Integer.
20:30:22 <carlossch> Ok, but my code has no literals..
20:30:45 <Cale> hmm, that's interesting
20:30:51 <carlossch> I've put it in http://www.haskell.org/hawiki/HaskellIrcPastePage
20:33:36 <carlossch> huh, interesting. This code, when run alone, fails to typecheck. With the rest of the library, it works. Let me double-check
20:34:27 <Cale> it typechecks for me after adding a definition for noPS
20:34:41 <carlossch> yeah, I forgot it: noPS = MkPS ""
20:34:46 <carlossch> (I just fixed the wiki)
20:34:51 <carlossch> sorry
20:35:01 <carlossch> try removing the annotation, though
20:37:38 <Cale> hehe
20:37:43 <Cale> try:
20:37:46 <Cale> numNumCommand s a b = command (takeNum . takeNum) s a b
20:37:51 <Cale> translate a b = numNumCommand "translate" a b
20:38:32 <Cale> it's the monomorphism restriction
20:38:44 <carlossch> ooh, it figures
20:39:26 <carlossch> why does it exist, in the first place? :) I'm sure it has a reason, but it's maybe the tenth time I got bit by it
20:40:52 <Cale> http://haskell.org/hawiki/MonomorphismRestriction
20:41:09 <Cale> ghci -fno-monomorphism-restriction
20:41:16 <Cale> might be helpful
20:42:16 <carlossch> that's what I was looking for just now! thanks
20:44:19 <Cale> Rule 2.
20:44:20 <Cale> Any monomorphic type variables that remain when type inference for an entire module is complete, are considered ambiguous, and are resolved to particular types using the defaulting rules (Section 4.3.4).
20:45:01 <carlossch> Jeez, I was just typing the question which you just answered. :)
20:45:29 <carlossch> thank you very much. I suppose this is the Haskell report you quoted
20:45:33 <Cale> yeah
20:45:40 <Cale> http://haskell.org/onlinereport/decls.html#sect4.5.5
20:50:38 <carlossch> well, back to hacking my postscript library :)
22:55:02 <kokank> hi all 
22:56:01 <ayrnieu> hello kokank.
22:57:15 <kokank> Hi ayrnieu
22:58:34 <kokank> ayrnieu: are doing any research on AI. 
22:58:47 <ayrnieu> No, I haven't done any AI research.
22:59:59 <kokank> ayrnieu: I ctaully came here to get some guidance on research on AI. 
23:00:25 <ayrnieu> kokank - OK.
23:01:26 <kokank> ayrnieu: You know anyone who could help me 
23:01:40 <ayrnieu> kokank - at the moment I seem to operate within an a question-driven state, with a bit of relaxation given to this particular channel, so please don't expect me to answer your questions before you ask them.
23:02:10 <kokank> ayrnieu: no problem 
23:02:12 <ayrnieu> kokank - people on #Lisp, very likely.  Possibly also people here that do not currently pay attention.
23:02:49 <kokank> ayrnieu:Thanks 
23:06:22 <ayrnieu> of course, you can always just ask your question.
