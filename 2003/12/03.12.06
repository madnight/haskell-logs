00:07:24 <harsha123> Hello all! :) whats up?
00:07:55 <harsha123> Smerdyakov hello :)
00:08:12 <harsha123> andersca hi
01:08:50 <ddarius> oy
09:36:10 <TripleDES> hi
09:56:45 <raver> y0!
09:57:34 <SyntaxLaptop> hey raver
09:57:57 <raver> hi SyntaxLaptop
09:57:59 <raver> :)
10:03:04 <Smerdyakov> Does anyone have any pointers to information on algorithms to calculate the best path to use in a network for sending a given amount of data, given transmission rates between nodes?
10:08:40 <mattam> a flow that cannot be divided ?
10:09:20 <Smerdyakov> Yes
10:09:47 <mattam> oh yeah, i never saw anything about that :)
10:10:04 <Smerdyakov> And I want to figure out the expected completion time for sending the data over the best path.
10:11:04 <mattam> doesn't a standard longest path (with weight being rates) work ?
10:11:23 <mattam> weights even
10:11:52 <Smerdyakov> I don't know.
10:12:49 <mattam> hmmm, i'll think about it while in the shower, brb with a solid answer
10:16:33 <Lor> Yeah, shower's the best place for thinking.
10:16:50 <Lor> Running, too.
10:22:37 <mattam> hehe
10:28:29 <amb> heya
12:58:17 <_rubix> I'm having trouble finding a good tutorial about the difference between newtype, type, and data... could someone point me to a good explaination ?
12:59:14 <ibid> do you have any specific questions?
12:59:27 <Lor> rubix, do you know C?
12:59:38 <_rubix> Lor, I do
12:59:45 <Lor> "data" is like struct or union. "type" is like typedef.
13:00:01 <Lor> "newtype" is, well, like a struct with a single member.
13:00:21 <ibid> newtype is a special case of data mainly for efficiency reasons
13:00:27 <_rubix> ok, then, what is the difference between newtype and data for a struct with a single member ?
13:00:34 <Lor> Strictness.
13:01:15 <_rubix> ok, so if I don't care about efficiency, I will never need newtype.
13:01:29 <Lor> Essentially, yes.
13:01:40 <Lunar^> newtype T = C Int <=> data T = C !Int ?
13:02:04 <Lor> lunar, pretty much like that, I'd think.
13:02:21 <ibid> data T = A Int | B Bool translates roughly to struct T { enum { A, B } tag; union { int A; bool B; } data; }, ignoring laziness
13:02:39 <_rubix> then, why do the compiler doesn't transform all "data" with only one member into newtype ?
13:02:51 <Lor> rubix, because there is a semantic difference between them.
13:02:59 <ibid> _rubix: the strictness is a semantic difference
13:03:20 <_rubix> so it's not only about efficiency
13:03:32 <ibid> no
13:03:41 <ibid> it's mainly about efficiency
13:03:49 <Lor> Yes. It's a subtle issue. Lazy languages have lots of those. :)
13:03:56 <_rubix> this definitely needs a tutorial :)
13:03:57 <ibid> there are some cases where you want to distinguish between bottom and Constructor bottom
13:04:15 <ibid> but they are, i think, not so common
13:05:02 <ibid> hmm, what does it tell us that i nowadays routinely add strictness flags to my data types? :)
13:05:29 <Lor> That what you really want is ML with haskell syntax? :)
13:05:41 <Lor> That's what _I_ really want, anyway. :)
13:06:12 <ibid> :)
13:06:27 <ibid> no, i want a strict haskell :)
13:06:35 <ibid> i don't want impurity
13:06:45 <Darius> ibid: How 'bout a boundedly eager one?
13:06:58 <ibid> Darius: depends on what that means :)
13:07:24 <Darius> It's eager evaluation, but if it takes too long or an exception comes up, it creates a thunk.
13:07:40 <ibid> sounds nice
13:07:43 <ibid> perhaps :)
13:07:57 <Darius> This (seemingly) still has the problem that a boxed representation is needed.
13:08:01 <Lunar^> Darius: could it be memory bound ?
13:08:45 <Darius> Lunar^: I believe so.  The current implementations may even be so.
13:09:36 <Lunar^> Darius: I think that was sebc's problem in implementing a memory manager using Haskell : lazyness leads to unpredictable memory usage
13:10:05 <Lunar^> Thus requiring a memory manager....
13:11:33 <Darius> Lunar^: Yes, I'd like a subset of Haskell that has a direct correspondence with it's memory use.
13:11:41 <Darius> (that's poorly worded)
13:12:10 <Lunar^> Darius: I understand... work for a paper here
13:12:44 <Darius> Arguably, though, an boundedly eager Haskell would exasperate space problems, by making it even more unpredictable or breaking only under large loads.
13:12:46 <Marvin--> evening fellas
13:13:05 <Lor> I've been thinking that the concept of unboxed types could be extended.
13:13:28 <Lor> In the type system, they have a different kind. That seems like a sensible way to distinguish them from ordinary lazy data structures.
13:14:11 <Lor> They cannot be used polymorphically, so they don't need tags.
13:14:59 <SyntaxLaptop> hey Marvin--
15:36:51 <Tomasso> guys i have a mistery!!!
15:45:53 <Cale> a mystery, eh?
15:46:14 <Marvin--> a mistress?
15:46:28 <blackdog> no, a mistery's the male form of a mistress.
16:30:01 <emu> mistressy
16:56:50 <Tomasso> guys yes!! a big mistery!!
16:57:28 <Tomasso> im using a program called winhugs that is a windows gui to hugs with a windows vm called win4lin from linux
16:58:05 <Tomasso> the problem is that hugs gets stuck returning errors that dont exist
16:58:34 <Tomasso> and when i restart windows and load the SAME file it does return any error
16:58:54 <Tomasso> is this really functional?? same input diferent output?
16:59:21 <SyntaxLaptop> sounds odd to me!
16:59:57 <Tomasso> but restarting the windows vm fixes everything
17:00:38 <SyntaxLaptop> are they haskell errors that you're getting? about your code? or other kinds of errors?
17:00:49 <SyntaxLaptop> liek not being able to load a file or something?
17:00:57 <Tomasso> about my code
17:01:13 <Tomasso> errors like unexpected '(' or comma
17:01:35 <SyntaxLaptop> with line numbers and stuff?
17:01:46 <Tomasso> yes 
17:02:22 <SyntaxLaptop> quite strange.  so this happens when you :load a file? or when you :reload one?
17:03:39 <Tomasso> load
17:03:45 <Tomasso> :l file.hs
17:05:10 <SyntaxLaptop> so you only get the error after the second time you load the file?
22:57:29 <labt> hey all
22:57:52 <labt> mmmmm
22:57:56 <labt> anybody alive???
23:49:42 * saba glee!
