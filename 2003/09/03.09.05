00:31:45 <earthy> pseudonym: there are good reasons
00:32:56 <earthy> but *only* on backbones, not all the way to colocated machines
00:56:39 <Pseudonym> Right.
00:57:06 <Pseudonym> But even on backbones, there's no reason to let ARP traffic leak across a router boundary.
00:57:22 <Pseudonym> ARP is meant to resolve addresses on a single "wire".
00:59:20 <Pseudonym> Only if you're trying to emulate a single logical wire do you want to do that.
00:59:36 <Pseudonym> i.e. if it's a bridge rather than a router
01:32:39 <Darius> Pseudonym: What was it that you wanted done with Hinze's Web functional pearl?
01:32:57 <Pseudonym> Get it implemented in some kind of generic library-like thing.
01:39:18 <Pseudonym> Gotta go home.  Have a good weekend all!
02:03:02 <harsha123> i have a question.. why is always the size of a virtual page in the memory in 2^n ?
02:04:33 <adept> harsha123: which OS?
02:04:40 <harsha123> Yes CS
02:04:45 <harsha123> sorry OS
02:04:54 <adept> yes, which os?
02:05:24 <harsha123> Hmmm.. any OS i think.. Ok lets talk about a Unix/Linux OS
02:05:53 <adept> harsha123: read this: http://www.csn.ul.ie/~mel/projects/vm/
02:05:59 <adept> it has everything
02:06:05 <harsha123> Ok I will :) Thx
02:06:24 <adept> in short: 2^n sizes allows constant-time bit-based hashing/offset calculation
02:07:23 <harsha123> <<<< is reading the link
02:08:57 <Verbed> @yow
02:08:58 <lambdabot> Is it 1974?  What's for SUPPER?  Can I spend my COLLEGE FUND in
02:08:58 <lambdabot>  one wild afternoon??
02:09:16 <harsha123> adept: ty, its an amazing link
02:21:47 <adept> harsha123: yep. i spent three evening reading it and do not regret :)
02:29:48 <harsha123> :) i just love the doc.. just downloaded the pdf already ;)
02:33:38 <harsha123> adept: are you from russia?
03:45:24 <ski> anyone knows of a good intro (article/paper/web page) to curry-howard ?
03:45:57 <harsha123> if i can ask?? whats curry-howard? sorry i am ignorant about it
03:45:58 <ski> the intended victim is a logic teacher ...
03:46:12 <ski> the curry-howard isomorphism
03:46:30 <harsha123> hmm. relating to?
03:46:36 <harsha123> Comp Sc?
03:47:15 <ski> a sort of similarity between, on the one hand expressions and their types, and on the other hand proofs, and the theorems that are proved
03:47:22 <ski> Comp Sci, yes
03:47:41 <harsha123> omg.. sorry no idea.. 
03:47:47 <Heffalump> "intended victim"?
03:47:52 <ski> hehe
03:48:06 <ski> he didn't know about it
03:48:18 * adept . o O (indented victim?)
03:49:35 <ski> i wanted to show him that link between logic and comp. sci.
03:49:48 <harsha123> can anyone help me in finite automate? (guys, who have read this before , plz spare me)
03:50:06 <prologic> hi all :)
03:50:11 <ski> prologic : hi
03:50:12 <adept> harsha123: what about them?
03:50:17 <harsha123> prologic: hi
03:50:37 <prologic> can you get infinite floating point precision in Haskell ? just as you can with Integer ...
03:50:39 <harsha123> adept: just relearning the subject
03:50:53 <adept> harsha123: shoot :)
03:51:03 <harsha123> adept: you good at it?
03:51:50 <adept> harsha123: i hope i have not forget anything (have had FSM theory three times in different subjects at uni)
03:52:21 <harsha123> adept: Turing machines? 
03:53:00 <adept> harsha123: yep. simple, universal, multi-string, R-transformers, just about anything :)
03:53:26 <harsha123> adept: can I catch you here? , always? ;)
03:54:14 <adept> if "here" == #haskell then "not always, but often" :)
03:54:39 <ski> prologic : no built-in inf. precision reals in Haskell i think.
03:54:52 <harsha123> adept: got ya ;)
03:54:53 <adept> ski: google for "Curry-Howard-Isomorphism-98-14.ps.gz" and "Categories, Types and Structures for working programmer"
03:54:54 <prologic> how hard would it be to build my own ?
03:55:35 <ibid> prologic: hard
03:55:36 <prologic> there is the Rational data type, but I'm not sure how that's used except in: g :: Rational; g = 0.33333333333333
03:55:57 <ibid> well, if Rational is all you need, then that does exist
03:56:01 <ibid> read the docs :)
03:56:08 <prologic> k
03:56:33 <ibid> but true reals are theoretically impossible and practically very hard
03:56:57 <prologic> why ? :)
03:57:51 <ski> adept : ftp://ftp.diku.dk/diku/semantics/papers/D-368.ps.gz ??
03:58:06 <ibid> prologic: because there are unspeakable reals :)
03:58:26 <prologic> hrmm
03:58:56 <adept> ski: i got failure in name resolution :(
03:59:01 <prologic> so it's not possible to write functions that calculate pi for instance to x number of decimal places ?
03:59:13 <ibid> that is of course possible
03:59:34 <prologic> and every other problem like it ?
03:59:47 <prologic> how would you write such a function ? Double is too limited
03:59:49 <ski> prologic : it's not possible in general though
04:00:04 <prologic> no of course not, you have to have a limit eventually :P
04:00:07 <ski> prologic : for all reals
04:00:13 <prologic> true
04:00:48 <Darius> There's an exact reals library in Haskell libs
04:01:09 <ibid> Darius: then it's misnamed :)
04:01:19 <prologic> heh
04:01:57 <shapr> @yow
04:01:57 <lambdabot> It's the RINSE CYCLE!!  They've ALL IGNORED the RINSE CYCLE!!
04:02:06 <shapr> @fortune
04:02:06 <lambdabot> And we can always supply them with a program that makes identical files
04:02:06 <lambdabot> into links to a single file.
04:02:06 <lambdabot>              -- Larry Wall in <199709292012.NAA09616@wall.org>
04:02:28 <Lunar^> shapr: sebc rules ! :)
04:02:37 <ibid> Darius: url?
04:02:53 <Darius> sourceforge.net/projects/haskell-libs
04:02:58 <Lunar^> Igloo: found I nice page explaning differences between OS X assembly and Linux assembly
04:02:59 <ski> adept : sorry, didn't find it on citeseer either :(
04:03:10 <Lunar^> Igloo: I'm trying to adapt MachRegs.h
04:03:19 <prologic> ta Darius
04:04:53 <Igloo> Good luck
04:05:20 <ibid> it's not exact reals, just a subset of reals exactly maintained :)
04:05:35 <Igloo> I'm fairly sure there are bits elsewhere too - grep the sources (case insensitively) for darwin and powerpc
04:06:28 <Igloo> Am I missing something or is that a crap fortune?
04:06:41 <shapr> Lunar^: eh?
04:06:46 <shapr> Lunar^: what happened?
04:07:16 <shapr> @foruten
04:07:16 <lambdabot> Sorry, I don't know the command "foruten", try "lambdabot: @listcommands"
04:07:21 <shapr> @fortune
04:07:21 <lambdabot> By the standards of the novice / intermediate developer accustomed to
04:07:21 <lambdabot> VB/VS/VC/VJ, these tools are incredibly primitive.
04:07:21 <lambdabot>                 -- M$ about unix development tools like GCC
04:07:25 * earthy ponders
04:07:40 <shapr> on the good side, GCC actually works.
04:08:00 <earthy> at times.
04:08:05 <earthy> more times than VC, but still
04:08:08 <shapr> more times than VC
04:08:09 <shapr> right
04:08:45 <Igloo> I bet VC never produces broken sparc binaries  :-)
04:09:19 <shapr> or broken MIPS, PPC, ARM, HC6811, m68k, ... binaries
04:09:50 <shapr> though it did at one point produce Alpha binaries.
04:10:19 <Lunar^> shapr: generalisation of block and bracket over every MonadIO using a rank-2 function
04:11:37 * shapr blinks
04:11:40 * Heffalump thought he did something like that in lambdabot
04:12:33 * Jerub gets back to work.
04:12:54 <shapr> y0 Jerub 
04:12:54 <Heffalump> wdym "using a rank-2 function"?
04:13:06 <Heffalump> can't you just make appropriately lifted operations in each monad transformer?
04:13:30 <Lunar^> block :: IO a -> IO a
04:13:30 <Igloo> The point is to have a one-function-fits-all
04:13:50 <Heffalump> but if you change the type to MonadIO m => m a -> m a
04:14:05 <Lunar^> actually you can't
04:14:12 <Heffalump> why not?
04:14:21 <Lunar^> blockAsyncException# prim relies on the stack frame state
04:14:34 <Lunar^> Thus it would be really complicated to generalize over every MonadIO
04:14:43 <Heffalump> aren't all instances of MonadIO just some stack of transformers applied to IO?
04:15:04 <Igloo> Oh, interesting commit from Simon M: "Add powerpc-unknown-linux."
04:15:26 <Igloo> Or is he just adding what you had in Lunar's report?
04:15:54 <Igloo> Eeek, post-editting gone wrong
04:16:11 <Lunar^> Heffalump: yes they are
04:16:44 <Heffalump> so can't you just lift the block operation in the transformer?
04:17:58 <Lunar^> Heffalump: so he came with the idea of liftIO' :: (forall a. IO a -> IO a) -> m a -> m a
04:18:19 <Lunar^> Heffalump: basic liftIO :: IO a -> m a
04:18:29 <Lunar^> Heffalump: block :: IO a -> IO a
04:18:31 <Heffalump> with a MonadIO m => in the type, presumably?
04:18:45 <Heffalump>   blockM (StateT c) = StateT $ \s -> blockM (c s)
04:18:45 <Heffalump>   unblockM (StateT c) = StateT $ \s -> unblockM (c s)
04:18:50 <Heffalump> is how I seem to do it for StateT
04:18:59 <Heffalump> (blockM = block with a different name for obvious reasons)
04:19:04 <Heffalump> is that incorrect?
04:19:05 <Lunar^> Heffalump: in fact only liftIO was defined in MonadIO class, he added liftIO' and liftIO'' (for bracket)
04:19:27 <Heffalump> ok, I guess liftIO' is more general
04:19:42 <Heffalump> and means less work for each MonadIO instance
04:20:00 <Lunar^> exactly
04:20:30 <Lunar^> You need the rank-2 types because, for example, "MonadReader r m"
04:21:06 <Lunar^> (I was happy understanding that point, sorry if I'm pendantic)
04:21:58 <Heffalump> yeah, you'd need it for most transformers
04:53:01 * shapr boings happily
04:53:28 <shapr> does rank 2 types just mean how much it's parameterized?
04:53:43 <Heffalump> shapr: it means there's an inner forall
04:53:56 <Heffalump> (forall a . IO a -> IO a) -> m a -> m a is rank-2
04:54:08 <Heffalump> forall a . (IO a -> IO a) -> m a -> m a is rank-1
04:54:41 <Heffalump> (the former type actually has an implicit forall a round the outside too
04:55:49 <shapr> hm, ok
04:56:36 <ski> forall a. (forall b. IO b -> IO b) -> m a -> m a  IOW
04:57:09 <Cale> ahh...
04:57:10 <ski> or  (forall b. IO b -> IO b) -> (forall a. m a -> m a)
04:57:29 <ski> (though GHC hoists the forall a. to the front anyway)
04:57:41 <Cale> I was about to ask how specifying that something holds for all a multiple times would change its meaning :)
05:00:44 <Heffalump> cale: different binders, so different 'a's.
05:00:51 <Heffalump> as is made clear by ski's renaming of one of them to 'b'
05:00:55 <Cale> yeah
05:01:00 * shapr puts on some binders so he can focus on work
05:01:12 <Cale> ski's comment made that clear :)
05:03:39 <Cale> Forgot that variables were bound by quantifiers from the inside first somehow. Must finish coffee... :)
05:04:07 <ski> similar binding as with lambda
05:04:42 <Heffalump> or indeed anything
05:04:42 <Cale> Or the quantifiers in first order logic.
05:05:06 <ski> i.e. forall as above, no ?
05:07:13 <Cale> I hadn't been thinking of types as statements in propositional logic, but that seems like a perfectly logical thing to do, now that I consider it.
05:07:54 <ski> thats what curry-howard correspondance/isomorphism is (at least partly) about
05:08:12 <Heffalump> how does one interpret type constructors when applying the CH isomorphism?
05:09:00 <ski> depends on the type constructor, i guess :)
05:09:26 <Heffalump> ok, interpret the type of map in propositional logic
05:09:42 <ski> the "of course" type constructor in linear logic is a modal operator e.g.
05:10:09 <ski> @type map
05:10:09 <lambdabot> map :: (a -> b) -> [a] -> [b]
05:10:14 <shapr> I wonder if we'll see Wolfgang Thaller here sometime soon.
05:11:09 <Jerub> bwahahaha
05:11:12 <Jerub> I've been here the entire time.
05:11:13 <shapr> ?
05:11:15 <Jerub> ;)
05:11:21 <shapr> huh?
05:11:35 <Heffalump> with an IRC name of "Stephen Thorne"? :-)
05:11:48 <shapr> Jerub: you're not Wolfgang Thaller
05:11:54 <Jerub> awww.
05:11:56 <Jerub> but I wanna.
05:12:01 <Cale> heheh
05:12:20 <shapr> Wolfgang is a fun guy to talk to, it's true.
05:12:27 <shapr> he has a lot of neat ideas.
05:12:32 <ski> Heffalump : i don't know but i suspect that monads are modal, or perhaps (possibility-like) modal ops. is monads ..
05:13:22 <shapr> Jerub: are you coming to an ICFP one of these days?
05:13:29 <shapr> I wish they'd have one in .au
05:13:35 <Heffalump> is shapr planning to go to next year's ICFP?
05:13:42 <shapr> if I'm right enough
05:13:45 <shapr> er "rich"
05:13:46 <ski> Heffalump : in some modal systems we have such things as  :    a -> P a   P (P a) -> P a    (a -> b) -> (P a -> P b)
05:13:52 <Jerub> shapr: when's the next .au ICFP ?
05:13:59 <shapr> Jerub: no idea
05:14:10 <shapr> you could organize the ACFP :-)
05:14:26 <shapr> I'm sure you'd get seafood and BlackDog there, maybe even Chilli
05:14:39 <Igloo> "maybe"?
05:14:48 <Jerub> I'd probably have to learn a bit about functional programming first.
05:14:50 <Jerub> ;)
05:14:53 <Heffalump> ICFP is never in Australia.
05:14:57 <shapr> Jerub: oh, good idea, want some pointers?
05:15:15 <Jerub> shapr: give me a month, I'm in high gear organising this computer camp.
05:15:22 <shapr> fair enough
05:15:26 * shapr makes a note
05:15:36 <earthy> Heffalump: that is `ICFP has never been in Australia'
05:15:37 <shapr> speaking of which, is there some way to schedule sending email to myself?
05:15:54 <Igloo> man at
05:15:58 <Jerub> shapr: I use 'at' and 'mail'
05:16:00 <earthy> at foo \n mail -s subject own-emailadress < mailfile
05:16:03 <shapr> fair enough
05:16:13 <earthy> (teatime is a good time :))
05:16:23 <shapr> I only have tea once a week.
05:16:45 <Jerub> shapr: I use that to remind myself to do time sensitive things. like ringing schoolteachers at 3:20pm
05:16:59 <Heffalump> I doubt it ever will be.
05:18:11 <Jerub> shapr: If I had a parser written in haskell, and I wanted to build an AST I could walk in python, how would I do that?
05:18:21 <Jerub> I'm tempted to emit sexprs and read them using python.
05:19:18 <Jerub> but I feel like there must be a better method.
05:19:45 <Cale> Or a python initialiser.
05:20:08 <whee> you might be able to get away with outputting straight python
05:20:21 <Cale> yeah
05:20:24 <Jerub> whee: there's an idea, then I could just 'import' it.
05:20:30 <Darius> Constructors are propositions.
05:21:02 <Cale> Darius: that's sort of what I was initially thinking
05:21:03 <ski> Darius : isnt a type (of kind 
05:21:17 <ski> Darius : * i.e) a proposition
05:21:17 <Cale> so a -> b would become F(a,b)
05:22:04 * ski says "idiotic key placement on my keyboard"
05:22:21 <Cale> or [a] => L(a)
05:22:28 <ski> yes
05:22:32 <Jerub> I should go to bed.
05:22:56 <ski> but (->)  (of kind * -> * -> *)  is not a proposition, no ?
05:22:58 <Jerub> thanks for the ideas.
05:23:27 <Cale> Jerub is stealing our ideas! Get him!
05:23:28 <Jerub> emiting python code seems to be the best idea.
05:23:30 <shapr> Jerub: I'd suggest the ATerm library
05:25:08 <shapr> Jerub: Haskell ATerm - http://www.cwi.nl/projects/MetaEnv/haterm/, then SWIG the C Aterm - http://www.cwi.nl/projects/MetaEnv/aterm/
05:26:25 <shapr> hrm, abridgegame.org seems to be down.
05:32:14 <shapr> bonjour mattam_
05:34:00 <shapr> haha, apt-listbugs is a victim of its own success.
05:34:25 <Heffalump> well, it was stupid of them to not discuss with the BTS people to begin with
05:34:41 <shapr> yah, that's true.
05:34:49 <shapr> it's a wonderful tool though
05:34:57 <shapr> I'd like to continue using it.
05:35:22 <shapr> I really like the 'pin all with bugs' feature, even though I'd prefer to pin them individually
05:35:33 <Heffalump> but you can pin them individually
05:37:48 <shapr> oh I see
05:37:49 <shapr> nifty
05:44:39 <shapr> hi elmex 
05:47:22 <Lunar^> Damnm... does anyone knows where I could find a list of predefined macros in the C Pre-Processor ?
05:50:04 <Lunar^> __linux seems to do the trick
05:59:38 <elmex> ho
05:59:53 <shapr> am not
06:00:59 <Lunar^> This this too hot for me
06:01:11 <shapr> how hot is it?
06:01:33 <Lunar^> adapting Wolfgang code looking at this page http://math-atlas.sourceforge.net/devel/atlas_contrib/node89.html
06:01:43 <reffie> 2 hot 4 u
06:22:18 <SyntaxPolice> good morning!
06:22:29 <shapr> goood morning SyntaxPolice!
06:22:57 <ski> g'd afternoon
06:24:03 <SyntaxPolice> its always morning on IRC ;)
06:30:21 <harsha123> Cale: morning
06:31:21 <harsha123> Cale: you arent on #math? :0
06:31:31 <Cale> yes I am
06:32:03 <Cale> At least, it looks to me like I am :)
07:01:37 <Igloo> Lunar: If this is for GHC then you want to be using the ones it defines
07:02:51 <Igloo> linux_HOST_OS (or TARGET or BUILD depending)
07:07:25 <Lunar^> Igloo: thanks
07:07:52 <Lunar^> But anyway, I'm really not able to go forward in adapting Wolfgang's code
07:16:32 * shapr boings
07:18:46 <Lunar^> shapr: for what ?
07:18:53 <shapr> for friday afternoon
07:19:43 <Lunar^> uh.. my week-ends look so much like the week for me, I always forget that
07:19:57 <shapr> I get to write fun code on weekends.
07:20:15 <Smerdyakov> I get to manhandle positrons on weekends.
07:20:18 <Lunar^> :)
07:20:33 <shapr> lucky you
07:28:15 <SyntaxPolice> shapr: o/t, do you ever use jedit?
07:28:59 <SyntaxPolice> I met someone who highly recommends it, but I'm not sure he realizes that emacs is like crack for some of us, so I'm going through severe withdrawl :)
07:31:47 <Lunar^> SyntaxPolice: jedit to edit Haskell ?!
07:33:43 <SyntaxPolice> Lunar^: nah, doing java.  thats why I said o/t (off topic)
07:33:54 <SyntaxPolice> but in my experience, this is the best place on IRC to get java help ;)
07:34:01 <Heffalump> hehe
07:38:49 <Lunar^> SyntaxPolice: hehe
08:03:43 <andersca> hey hdaume
08:05:25 <hdaume> hey
08:06:02 <andersca> last day today eh
08:06:06 <hdaume> yup
08:06:14 <andersca> did you get cake? :)
08:07:09 <Heffalump> some budget paid for the team to go out to lunch each time I left
08:07:27 <hdaume> yeah, i think we're going to lunch today
08:16:26 <hdaume> today is the "copy everything to my university account" day
08:16:34 <andersca> :)
11:12:30 * scharob moans
13:00:48 <kosmikus> can you help me with my homework?
13:06:21 <Heffalump> kosmikus: well, what have you tried so far? :-)
13:08:18 <kosmikus> I'm trying to break UHC ;)
13:09:30 <kosmikus> UHC claims to have rank-n polymorphism (both foralls and existentials) plus impredicativity
13:09:42 <kosmikus> sometimes you need type annotations, though
13:09:59 <kosmikus> I would like to find examples for the type system being unsound
13:10:31 <kosmikus> so far I have found one example program, but maybe some people around here know programs that are somehow "likely" to cause problems in such a setting
13:11:28 <Heffalump> UHC?
13:11:29 <kosmikus> I admit though -- it is only homework in the sense that I am doing this "at home" right now
13:11:42 <kosmikus> UHC = Utrecht Haskell Compiler
13:11:44 * Heffalump isn't experienced with this sort of tihng, though
13:11:54 <kosmikus> just be creative :)
13:11:56 <Heffalump> is that a full Haskell 98 implementation?
13:12:02 <kosmikus> no
13:12:09 <kosmikus> it isn't even a full compiler
13:12:11 <Heffalump> well, I should be packing really :-) (got to move house :-( )
13:12:18 <kosmikus> it is mainly a type checker right now
13:12:33 <Heffalump> so is rank-n plus impredicativity known to be unsound?
13:12:36 <kosmikus> but it parses and typechecks almost all of Haskell, and much more
13:12:57 <kosmikus> Heffalump: no, not necessarily, but I somehow think that this implementation is probably unsound
13:13:05 <SyntaxPolice> kosmikus: if you change your name to a girl's name, you'd be more likely to get help on your homework ;)
13:13:10 <Heffalump> :-)
13:13:17 <SyntaxPolice> heh
13:13:31 <kosmika> can you help me with my homework?
13:13:41 <SyntaxPolice> kosmika: anything!
13:14:11 <kosmika> great, I need an implementation of Dependency-style GH until tomorrow ...
13:14:26 <Heffalump> ITYM "by tomorrow"
13:14:35 <Heffalump> unless you want it now but to disappear tomorrow
13:14:37 <kosmika> oh, yes
13:15:05 <kosmika> sorry, I'm still learning English, and I don't have much time left for it since my teachers want me to study Haskell all the time
13:15:27 <SyntaxPolice> I was sitting here working on this one thing, and I kept thinking to myself, "I should really be working on this other thing, but I'm almost done..." then when I got done, I remembered that the reason I was doing it in the first place was because I _had to_ in order to solve the other problem.
13:15:29 <SyntaxPolice> did that make sense?
13:15:50 <SyntaxPolice> kosmika: yes, I'll give it to you by tomorrow until tomorrow
13:16:04 * kosmika is confused now :)
13:16:16 <Heffalump> it didn't make much sense to me either :-)
13:16:30 <Heffalump> I think he was trying to say that he'll give you something tomorrow that by then has already expired
13:16:31 <SyntaxPolice> kosmika: the solution will exist in the infinitely small amount of time between today and tomorrow
13:16:46 <Heffalump> a Dirac delta solution!
13:17:14 <SyntaxPolice> Heffalump: whoa, really? I didn't know I was so smart
13:17:47 <kosmika> yes -- actually, I did get that, but I tried to continue playing my role, but it's not much fun being a clueless student again(?), so ...
13:18:27 <Heffalump> oh, ok, it didn't sound luserish enough for a clueless student :-)
13:18:52 <SyntaxPolice> yeah. you have to work on the sense of, "I don't know what you're talking about, can you just give me the answer"
13:19:10 <kosmikus> SyntaxPolice: I will memorize that sentence.
13:19:56 <kosmikus> Doaitse already lectured me yesterday on answering stupid, aggressive questions after conference talks: "That is a lot of noise for such a small observation."
13:20:37 <Heffalump> he told you to say that?
13:20:43 <kosmikus> Heffalump: yes
13:20:52 <Heffalump> right...
13:21:02 <Heffalump> oh, he didn't phone up Oege about AFP, btw :-)
13:21:08 <kosmikus> hmm
13:21:22 <SyntaxPolice> I was noticing that people often phrase things as questions when they should really be phrasing them as suggestions or comments
13:21:23 <Heffalump> but I don't think Oege wanted to do an AFP anyway, just something else
13:21:30 <kosmikus> I already was afraid of that
13:21:46 <Heffalump> well, hopefully *someone* has applied
13:22:08 <kosmikus> I talked to Johan today and he said that there have been some applications, but he didn't mention Doaitse, and I'm sure he would have ...
13:22:53 <kosmikus> SyntaxPolice: yeah, I remember someone at ICFP ending phrasing his question as "It would be interesting to analyze if ..."
13:23:03 <kosmikus> s/ending//
13:23:05 <Heffalump> need to think of something else that would be cool to have in Aamalot (sp?)
13:23:18 <kosmikus> DYM Ameland?
13:23:22 <Heffalump> probably.
13:23:30 <kosmikus> the island?
13:23:37 <Heffalump> I have difficulty working out how things Oege says that I've never heard of are spelt.
13:23:45 <Heffalump> Yes, where Doaitse has some property or something.
13:23:53 <kosmikus> yes, that's Ameland.
13:24:02 <kosmikus> well, Doaitse has property almost everywhere ;)
13:24:11 <Heffalump> :-)
13:24:12 <kosmikus> in NL, that is
13:24:51 <kosmikus> why do you have to move? have you been smoking too much?
13:25:28 <Heffalump> well, I've smoked 10 times as much this year as I did last year
13:25:39 <Heffalump> but I don't think this has any bearing on my having to move
13:27:21 <kosmikus> just guessing ;)
13:27:36 <Heffalump> (I've also smoked 10 times less this year than last)
13:28:04 <Heffalump> no, my girlfriend is moving to Exeter (about 150 miles from here) and so I'm moving into a houseshare instead
13:28:07 <kosmika> huh -- how is this possible? something with complex numbers? can I use C for this?
13:29:58 <kosmikus> and you have been living together? that must be hard, then ...
13:46:00 <Heffalump> yeah
13:46:28 <Heffalump> well, she's already half moved away (job has been in Bracknell, about 50 miles away, since April, so just weekends in Oxford)
14:00:13 <scharob> do I always need to start any haskell programm with I/O actions with a module main?
14:00:44 <Igloo> Yes
14:01:00 <Igloo> After all, a program that doesn't do any IO isn't very useful
14:01:19 <scharob> So every program has "module Main where"?
14:01:40 <Igloo> Yes, but it may be implicit
14:01:58 <scharob> Igloo Okay, thank you
14:01:58 <Igloo> (this doesn't apply if you are using it interactively)
14:28:34 <Philippa> I seem to've shot myself in the foot with the do syntax and Parsec's <|> combinator, and I'm wondering if the results I was getting are what should've happened...
14:29:57 <Philippa> the offending code reads do {blah; e <- something; return blah} <|> do {blah; e <- somethingelse; return blah}
14:30:35 <Heffalump> do you really mean return blah?
14:30:38 <Heffalump> rather than return e
14:30:55 <Heffalump> cos presumably blah is of type m a, for some monad m and value type a, so return blah will be m (m a)
14:30:57 <Philippa> blah is some expression which may or may not contain e - doesn't really matter, something and/or somethingelse is failing
14:31:05 <Igloo> If both blah's are the same then the second will never be used
14:31:08 <Philippa> they're not the same blah
14:31:22 <Heffalump> igloo: surely it might if something fails?
14:31:31 <Heffalump> oh, different blahs, anyway, duh
14:31:55 <Igloo> Not with parsec - as soon as one symbol is consumed it commits to a branch of <|>
14:32:05 <Heffalump> oh, right
14:32:12 <Philippa> doesn't matter, the first symbol decides adequately
14:32:15 <Philippa> it was failing the lot
14:32:28 <Philippa> renaming the second e to e2 fixed it...
14:32:31 <Igloo> I haven't followed what the problem is, though
14:32:50 <Igloo> The es are in different scopes, that shouldn't make a difference
14:32:56 <Philippa> that's what I thought
14:33:02 <Philippa> seems GHCi thinks differently...
14:33:05 <Igloo> You aren't shadowing an e bound outside?
14:33:19 <Philippa> nope
14:33:28 <Igloo> Can you give an actual small example then?
14:35:10 <Philippa> do {i <- identifier; do {char '='; e <- expression; return Ass(i e)} <|> do {char '{'; e <- letstatement; char '}'; return Ass (i e)}}
14:35:41 <Philippa> not my actual code, I've stripped out a few other statements in-between, but should be enough
14:36:46 <Igloo> I mean a complete example
14:37:05 <Igloo> But preferably just a line or so I can paste into ghci
14:37:08 <Philippa> shove funcname = in front of that and you have one
14:37:21 <Philippa> or at least, one you can plug into Parsec's parse func
14:37:21 <Igloo> letstatement is a parsec builtin?
14:37:29 <Philippa> oops, fair enough
14:37:35 <Philippa> fill 'em in with char 'somethingspecific' then
14:38:22 <Philippa> do {i <- char 'a'; do {char '='; e <- char 'e'; return Ass (i e)} <|> do {char '{'; e <- char 'b'; char '}'; return Ass (ie)}}
14:38:55 <Philippa> 'musing ghc 6.0.1, FWIW
14:40:00 <Igloo> Isn't i going to have type Char in that?
14:40:37 <Igloo> Do you mean the Ass to be inside the parens?
14:40:42 <Philippa> oops, also
14:41:11 <Philippa> tbh, the Ass part you can replace with True and False for all it matters here
14:41:19 <Joopdod> Is there some way to turn GHC 6.0 compiled binaries into GHC 6.0.1 binaries? Probably not...But I hate to downgrade...
14:41:43 <Philippa> Joopdod: not AFAIK. I got to build wxhaskell from scratch as a result
14:41:49 <Igloo> I'm getting lost. What exactly would I type in ghci, what does it say and what do you expect it to say?
14:42:08 <Philippa> gimme a mo...
14:42:26 <Joopdod> How do you know I use wxHaskell?
14:42:43 <Philippa> Joopdod: I didn't. I did, however, have the same experience about five days ago
14:42:50 <Joopdod> lol
14:43:04 <Philippa> grab MinGW and MSYS, build the lot from scratch
14:43:08 <Philippa> it's not too hard
14:43:27 <Philippa> at least, unless you already have a DJGPP install for MinGW to clash with like I did :-)
14:43:27 <Joopdod> No, but "there is just no space"
14:43:56 <Joopdod> My harddisk is kind of...uhhmm.. full
14:45:07 <Joopdod> Does wxHaskell work easy? 
14:45:20 <Philippa> once built, yeah
14:45:28 <Riastradh> Joopdod, solution to a full hard drive: delete stuff.
14:45:43 <Joopdod> Good one... lol
14:46:50 <Philippa> Igloo: OK, gimme a while - my little example above, once retrofitted, works OK - time to go hunting for silly tyops I guess
14:48:15 <Riastradh> WOW!!!  I've made a WHOPPING FIVE CENTS of profit on http://www.cafeshops.com/skicalc !!
14:48:41 <Cale> excellent!
14:48:48 * Philippa blinks
14:48:50 <Verbed> You'll have a semitone soon!
14:49:06 <Philippa> damn, heisenbug. I undid the s/e2/e and it's still working
14:49:06 <Cale> Someone bought a shirt? I wonder if it came out okay?
14:49:26 <Riastradh> Cale, FIVE people bought them!
14:49:33 <Riastradh> Er, no, SIX!
14:49:36 <Cale> heh
14:49:37 <Riastradh> ...which means...
14:49:39 <Riastradh> ...OMG...
14:49:47 <Riastradh> ...CAFEPRESS EXTORTED A CENT OF MY PROFIT!
14:50:30 <Cale> That's 16.7%
14:54:48 <scharob> How can I get this thing executed by Hugs? > do writeFile "testFile.txt" "Hello File System"
14:56:11 <Igloo> Type it at the hugs prompt (without the "> ")
14:57:55 <scharob> hm...and if I want to perform this action in a .lhs File?
14:58:23 <Joopdod> Then you add a / or a \
14:58:31 <Joopdod> before the code
14:58:49 <Joopdod> I am not sure which one
14:58:59 <hdaume> it's a >
14:59:07 <hdaume> but what do you mean "perform the action in an .lhs file"?
14:59:20 <scharob> Well but hugs complains with a syntax error
14:59:23 <hdaume> nothing in the .(l)hs file gets run automatically when you load it
14:59:26 <kosmikus> scharob: you probably want:
14:59:33 <kosmikus> > main = do writeFile ...
14:59:35 <hdaume> foo = do writeFile "foo" "bar"
14:59:37 <hdaume> then you can run foo
14:59:46 <scharob> this is my file
14:59:47 <scharob> > do 	writeFile "testFile.txt" "Hello File System"
14:59:47 <scharob> >	putStr "Hello World\n"
14:59:47 <scharob> > writeFile :: FilePath -> String -> IO()
14:59:47 <scharob> > type FilePath = String
15:00:01 <hdaume> you need to give a function name
15:00:12 <scharob> hm
15:00:13 * Igloo advises against the use of tabs
15:00:14 <scharob> mom
15:00:28 <scharob> why no tabs?
15:00:37 <kosmikus> yes, and you must remove the type signature for writeFile and the type definition for FilePath, because they collide with predefined names
15:00:57 <Igloo> They make life difficult
15:01:38 <Philippa> does the standard guarantee how many spaces they're interpreted as for layout purposes?
15:01:44 <kosmikus> scharob: no tabs is just a strong suggestion, not a requirement; because Haskell is layout-sensitive, you're usually better off with using spaces; it is less likely to cause obscure layout errors then
15:01:45 <Igloo> Yes
15:02:08 <Igloo> But people's editors often don't use the same number
15:02:20 <kosmikus> the standard requires 8
15:02:47 <scharob> Okay...
15:03:34 <scharob> but where is my testFile.txt now?
15:03:40 <scharob> urg
15:03:43 <kosmikus> in the current directory?
15:04:12 <scharob> doesn't look like it is there
15:04:21 <kosmikus> did you actually execute the program?
15:04:38 <scharob> yes
15:04:43 <scharob> sucessfully
15:04:57 <kosmikus> how?
15:04:57 <scharob> > main = do 	writeFile "testFile.txt" "Hello File System"
15:04:58 <scharob> >		putStr "Hello World\n"
15:05:01 <scharob> main
15:05:03 <scharob> simply
15:05:25 <kosmikus> and you've seen the "Hello World" appear on screen?
15:05:28 <scharob> yes
15:05:53 <kosmikus> strange
15:06:04 <kosmikus> which OS?
15:06:19 <scharob> Windows XP
15:06:29 <kosmikus> can you search the disk for "testFile.txt"?
15:06:46 <Igloo> There's probably a function in Directory that will tell you what the current directory is
15:07:29 <kosmikus> yes, "getCurrentDirectory"
15:07:52 <scharob> Oh I got it
15:07:56 <scharob> finally :-)
15:08:02 <scharob> It's there...cool
15:08:05 <kosmikus> good
15:08:46 <Joopdod> The Haskell Believe is growing :-)
15:12:29 <hdaume> or :!pwd should be fine
15:13:43 <kosmikus> is "pwd" a valid command in Windows XP?
15:13:56 <Cale> I somehow doubt it.
15:15:55 <scharob> wow really cool....I read a file and printed it out :-O))
15:20:06 <scharob> hey this copys a file :-)
15:20:06 <scharob> > copy = do 	s <- getLine
15:20:07 <scharob> >		s <- readFile s
15:20:07 <scharob> >		r <- getLine
15:20:07 <scharob> >		writeFile r s
15:20:34 <hdaume> oh, with cygwin :)
15:20:46 <kosmikus> hdaume: :)
15:20:49 * scharob likes actions now hehe
15:21:17 <scharob> cygwin?
15:21:34 <scharob> not with unix?
15:22:13 <kosmikus> cygwin is a collection of tools that create a unix-like environment under Windows (bash, gcc, make, ...)
15:23:16 <scharob> Hm...well and this code would not copy a file with real unix?
15:23:55 <hdaume> sure it would
15:23:57 <Smerdyakov> scharob, hdaume was not talking to you.
15:23:58 <hdaume> i was referring to pwd
15:24:08 <scharob> Oh
15:24:09 <scharob> sorry
15:26:16 <hdaume> scharob: one minor comment: you probably should use "s" twice like that; it's confusing :)
15:27:14 <kosmikus> s/should/should not/ ?
15:27:20 <hdaume> hehe
15:27:22 <hdaume> should not :)
15:27:23 <scharob> so ony s?
15:27:36 <hdaume> i meant you should use something else
15:28:14 <scharob> okay
15:28:46 * kosmikus uses this kind of shadowing quite often, but agrees that it is bad ...
15:29:12 <hdaume> in some cases i think its fine, but here the two 's's are completely different things
15:29:18 <kosmikus> yes, you're right
15:29:55 <scharob> but my copy works only properly with strings....a .wav e.g. is destroyed
15:30:01 <hdaume> yes
15:30:05 <scharob> :-/
15:30:16 <scharob> 548MB reduced to 68kb
15:30:38 <hdaume> it's because readFile treats a character 0 as end of file
15:30:52 <hdaume> readFile is only intended to be used on text files
15:30:57 <scharob> oh
15:30:58 <hdaume> or maybe osme other character
15:31:00 <hdaume> i can't remember :)
15:31:23 <scharob> So is there a more general function to read a file?
15:31:23 <kosmikus> I seem to remember that this was something that only happens on Windows ...
15:31:27 <Riastradh> That's, er, silly.
15:31:27 <hdaume> i think so :)
15:31:34 <hdaume> windows is, er, silly :)
15:31:38 <Riastradh> Point.
15:31:54 <scharob> oh...so I need to switch the OS first before I continue..
15:32:04 <kosmikus> but anyway, hdaume is right, don't use readFile on binary files
15:32:07 <hdaume> no, you just need to not use readFile on binary data :)
15:32:17 <kosmikus> there are other functions for that
15:32:24 <scharob> What functions?
15:32:32 <kosmikus> look at the IO module
15:32:37 <Riastradh> scharob, no, no, no, don't listen to them; please do switch your OS.
15:32:40 <scharob> ok
15:32:55 <scharob> Riastradh I will think over that
15:33:25 <kosmikus> I agree with Riastradh on the OS issue, of course
15:33:57 <kosmikus> there is "openFile" and "hGetContents", for instance
15:35:02 * hdaume smacks kosmikus
15:35:10 <hdaume> hGetContents is the bane of my existence :)
15:35:24 <kosmikus> ouch
15:36:01 <scharob> hdaume Why that?
15:36:17 <kosmikus> the lazy IO trap ...
15:36:24 <kosmikus> but I don't want to explain it :)
15:36:27 <scharob> ok
15:36:54 <kosmikus> hdaume certainly can do that better than I can
15:40:29 <hdaume> scharob: the basic problem is that hGetContents reads the file on demand....so if you hGetContents something, then close the file, then try to use the contents, it will be empty because nothing has been read yet
15:40:37 <hdaume> it's a real snag for beginners
15:41:44 <scharob> I do not ever see how to use hGetContents :-)
15:42:26 <Riastradh> Do you have to use seq or something?
15:42:42 <scharob> seq?
15:42:57 <scharob> I just tried to copy a binary file
15:43:00 <Riastradh> The bane of laziness.
15:43:19 <kosmikus> Riastradh: you either can use strict IO functions, or make sure that you do everything with the input before closing the file, or use seq, I guess.
15:43:28 <scharob> and changed my readFile to hGetContents
15:43:48 <scharob> hm
15:44:02 <scharob> strict IO functions...
15:44:18 <scharob> sounds difficult
15:44:51 <kosmikus> hGetLine does, as far as I know, *immediately* read one line from the file
15:46:38 <kosmikus> have to go now; good night everyone, or a pleasant rest of Friday to the western continents ...
15:47:22 <hdaume> yup, you're right
15:48:03 <hdaume> i'm off...goodbye microsoft :)
16:45:52 <timbod> I'm trying to compile the MySQL module from Htoolkit: It's called HSQL.hsc. I've got c2hs installed, but it expects .chs. Suggestions?
16:48:54 <Igloo> You want hsc2hs, part of GHC
16:49:35 <timbod> Thanks - I've got it - what does it do?
16:50:00 <Igloo> Similar sort of thing to c2hs
16:54:10 <timbod> Thanks again, mysql now compiles fine!
16:55:06 <Igloo> Cool
16:55:08 * Igloo -> bed
18:24:27 <Verbed> @yow
18:24:27 <lambdabot> Two with FLUFFO, hold th' BEETS..side of SOYETTES!
20:45:54 <Lor> Anyone alive?
20:46:07 <clausen> yep
20:47:33 <Lor> All right, here's a question, in case anyone has an idea: is there a way of implementing the type applications of F2 using environments instead of direct substitutions?
20:49:35 <clausen> dunno
20:50:28 <Lor> It _is_ possible at term level, in any case.
21:17:33 <Verbed> @wn neologism
21:17:34 <lambdabot> *** "neologism" wn "WordNet (r) 1.7"
21:17:34 <lambdabot> neologism
21:17:34 <lambdabot>      n 1: a newly invented word or phrase [syn: {neology}, {coinage}]
21:17:34 <lambdabot>      2: the act of inventing a word or phrase [syn: {neology}, {coinage}]
21:20:20 <Verbed> @wn portmanteau
21:20:21 <lambdabot> *** "portmanteau" wn "WordNet (r) 1.7"
21:20:21 <lambdabot> portmanteau
21:20:21 <lambdabot>      n 1: a word formed by joining two others (e.g., `smog' is a blend
21:20:21 <lambdabot>           of `smoke' and `fog') [syn: {blend}, {portmanteau word}]
21:20:21 <lambdabot>      2: a large travelling bag made of stiff leather [syn: {Gladstone},
21:20:23 <lambdabot>          {Gladstone bag}, {gladstone}, {gladstone bag}]
21:20:47 <Lor> verbed, why the interest?
21:21:22 <Verbed> Finnegans Wake
21:21:29 <Lor> Augh. :)
21:21:34 <Verbed> :)
21:22:02 <Lor> One day, one day I will get to page 2 of FW. :)
21:22:24 <Verbed> You may simply wish to open it to a random page and begin reading.
21:22:43 <Verbed> Certain sections are more cohesive than others.
21:23:08 <Lor> Yeah, it's not like any place is more of a beginning or end than any other.
21:24:01 <Verbed> ALP is a relatively easy segment.
21:26:07 <Verbed> Anna Livia Plurabelle, Book I, Chapter VIII
23:13:27 <RibRib> hi al
23:13:29 <RibRib> all
23:30:30 <Verbed> @yow
23:30:30 <lambdabot> ...Um...Um...
23:30:32 <Verbed> @yow
23:30:32 <lambdabot> My pants just went to high school in the Carlsbad Caverns!!!
