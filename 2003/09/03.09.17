00:00:17 <Pseudonym> phubuh: Agnosticism is actually, I think, the only purely intellectually defensible position.
00:00:22 * harsha123 thinks its universal like the fire,water and sky
00:00:27 <phubuh> i agree
00:00:31 <Pseudonym> But that's the last remnants of modernism in me talking.
00:00:59 <Pseudonym> The post-modernist in me says that absolute truth is but one valid way of looking at the world.
00:01:16 <phubuh> at least, it is the only one defensible without resorting to matters of faith
00:01:31 <Pseudonym> Not just faith, though.
00:01:35 <Pseudonym> Narrative is also important.
00:01:45 <Pseudonym> Culture, too.
00:01:58 <Pseudonym> If you adopt a culture, it can be culturally significant to adopt its religion.
00:02:07 <Pseudonym> Faith or no faith, religion can be culture.
00:02:36 <Pseudonym> Narrative is good, too.  If you like a religion, you can adopt it, faith or no faith.
00:02:44 <Pseudonym> Wicca is a narrative religion, IMO.
00:02:54 <Pseudonym> So is Discordianism, for that matter.
00:03:10 <Pseudonym> Subgenius is just good clean (?) fun.
00:03:36 <Pseudonym> Though, of course, "faith" doesn't mean what most people think it means.
00:03:40 <Pseudonym> But that's another topic.
00:04:02 * harsha123 thinks Pseudonym is a cut above the rest :)
00:04:13 <Pseudonym> Nah, you're just on one of my pet topics.
00:04:18 <Pseudonym> Talk economics and I'll tune out.
00:04:25 <harsha123> hehehe
00:04:45 <Pseudonym> This reminds me of one of the Aesop fables.
00:04:56 <harsha123> which one?
00:05:07 <Pseudonym> A dog and an ass are walking along the road, and the ass finds a scroll.
00:05:26 <Pseudonym> He picks it up and starts reading.  "Hmmm... secret to the universe... location of buried gold..."
00:05:49 <Pseudonym> The dog says "Is there anything about bones or meat in there?"  The ass says "nope".  The dog says "then throw it away; it's useless!"
00:05:58 * Pseudonym paraphrasing, obviously
00:06:33 <harsha123> :)
00:06:44 <Pseudonym> One of my favourites, that one.
00:06:56 <harsha123> ok..
00:09:26 <harsha123> Pseudonym: where are ya from?
00:09:47 * harsha123 is lil bit curious
00:10:34 <Pseudonym> Melbourne, Australia
00:10:53 <harsha123> :) Ok
00:11:27 <Pseudonym> Yourself?
00:12:13 <harsha123> India, Bangalore
00:12:24 <Pseudonym> Ah, cool.
00:12:34 <harsha123> heheh.. whats so cool? :)
00:13:01 <Pseudonym> Well first of all, it explains the Hinduism. :-)
00:13:24 <harsha123> got me..
00:14:07 <Pseudonym> Secondly, I did some work on an Indian geographic project many many years ago for my holiday job when I was at schoo..
00:14:12 <Pseudonym> Early days of CD ROMS.
00:14:22 <Pseudonym> It was something for the government of Haryana.
00:14:52 <Pseudonym> Very important area for Hinduism.
00:15:12 <harsha123> were you in India?
00:15:15 <Pseudonym> No.
00:15:25 <Pseudonym> I was still in Melbourne.
00:15:35 <harsha123> Ok..just making a CDROM?
00:15:44 <Pseudonym> Sort of.  I was actually digitising maps.
00:15:54 <Pseudonym> For the CD ROM.
00:16:04 <Pseudonym> This was in... uhm... probably 1987.
00:16:24 <Pseudonym> Maybe 1988.
00:16:24 <harsha123> ah Ok... Haryana  was where the great Battle of Mahabharth was fought.. 
00:16:39 <harsha123> Kurukshetra..
00:16:41 <harsha123> :)
00:16:43 * Pseudonym nods
00:16:57 <harsha123> :)) .. any plans of coming to india?
00:17:03 <Pseudonym> Also where the Bhagavad Gita was preached.
00:17:09 <Pseudonym> Uhm... no time soon, that's for sure.
00:17:23 <Pseudonym> I have a young family.  I really don't want to take a 1 year old on an international flight.
00:17:38 <Pseudonym> Nothing against India. :-)
00:17:48 <harsha123> hehehe.. i understand
00:20:03 <Pseudonym> What I'd like to do is do a tour of the most sacred places in the world.
00:20:18 <phubuh> yay, new openssh in debian (finally!)
00:20:19 <Pseudonym> Unfortunately, I wouldn't be allowed into Mecca.
00:20:31 <harsha123> Pseudonym: why not?????
00:20:36 <Pseudonym> I'm not Muslim.
00:20:45 <harsha123> Pseudonym:  so what??
00:20:59 <harsha123> Pseudonym: you can still go to Mecca
00:22:47 <harsha123> Pseudonym: but i dont think you can worship... and do prayers
00:23:09 <Pseudonym> I don't think you're allowed into the Ka'ba Sharif.
00:23:21 <Pseudonym> Which is the "sacred place".
00:23:50 <harsha123> maybe. am not sure. about that
00:24:17 <Pseudonym> But, for example, it'd be nice to see the Holy Cave.
00:24:47 <harsha123> Yeah..
00:24:52 <Pseudonym> That sort of thing.
00:24:56 <Pseudonym> Lourdes, that's another one.
00:25:22 <Pseudonym> Borobudur, in Indonesia.
00:25:38 <harsha123> India has a lot of Sacred Places.. :) too many to even count
00:25:41 * Pseudonym nods
00:26:07 <Pseudonym> The Hagia Sophia.  I'd love to see that.
00:26:35 <harsha123> where and what is that?
00:26:50 <Pseudonym> It's in Istanbul, not Constantinople.
00:27:02 <harsha123> Ok..
00:27:15 <Pseudonym> It used to be a Christian basilica.
00:27:21 <Pseudonym> I think it's a museum now.
00:27:26 <harsha123> Hmm i see..
00:27:45 <Pseudonym> But the interesting part is that the Moors left it as a Christian place of worship when they took over the Byzantine Empire.
00:27:49 <harsha123> Pseudonym: i guess you like travelling!
00:27:53 <Pseudonym> Oh, yes.
00:27:58 <Pseudonym> I've been everywhere in Australia.
00:28:02 <Pseudonym> Almost literally everywhere.
00:28:08 <harsha123> hehehe
00:28:19 <Pseudonym> There's a lot of empty desert I haven't seen, obviously.
00:28:26 <harsha123> :)
00:28:37 <harsha123> Pseudonym: are you a cricket fan?
00:29:30 <Pseudonym> I wouldn't say "fan".
00:29:33 <Pseudonym> I do like the game.
00:29:39 <Pseudonym> But I wouldn't say I "follow" it.
00:29:48 <harsha123> Ok
00:29:48 <phubuh> instanbul was constantinople, but now it's instanbul, not constantinople
00:30:01 <Pseudonym> Been a long time gone, Constantinople.
00:30:09 <harsha123> Yes.. 
00:30:12 <phubuh> why did constantinople get the works?
00:30:21 <Pseudonym> That's nobody's business but the Turks.
00:31:29 <phubuh> i was going through my they might be giants mp3 collection to pick out the really exceptionally great songs the other day, and i ended up adding about 75% of it
00:31:43 * shapr deciphers multi-hop tramp connections
00:31:52 * Pseudonym laughs
00:33:59 <Pseudonym> You know, I always that song dated from the 30s.
00:34:04 <Pseudonym> it's actually from the 50s.
00:34:35 <Pseudonym> Recorded by "The Four Lads", went to #10 in 1953.  There you go.  Trivia for the day.
00:34:55 <phubuh> interesting
00:35:16 <harsha123> is that the question Pseudonym
00:35:19 <harsha123> ?
00:35:26 <Pseudonym> Hmmm?
00:35:41 <harsha123> trivia question?
00:35:47 <Pseudonym> No, it's the trivia answer.
00:35:54 <Pseudonym> There was no question, though.
00:36:03 <harsha123> hehehe Ok
00:53:20 <Pseudonym> So, what about Haskell, then.  Jolly good languge if you ask me.
00:53:35 * Pseudonym feebly retries to return to topic
00:58:44 <Pseudonym> Who am I kidding.  Night everyone!
00:58:58 <shapr> night!
01:20:03 <harsha123> @fortune
01:20:04 <lambdabot> Modern art is what happens when painters stop looking at girls and persuade
01:20:04 <lambdabot> themselves that they have a better idea.
01:20:04 <lambdabot> 		-- John Ciardi
01:20:15 <harsha123> @fortune
01:20:15 <lambdabot> Q:	Why did the WASP cross the road?
01:20:15 <lambdabot> A:	To get to the middle.
01:20:24 <harsha123> @fortune
01:20:25 <lambdabot> 	In "King Henry VI, Part II," Shakespeare has Dick Butcher suggest to
01:20:25 <lambdabot> his fellow anti-establishment rabble-rousers, "The first thing we do, let's
01:20:25 <lambdabot> kill all the lawyers."  That action may be extreme but a similar sentiment
01:20:25 <lambdabot> was expressed by Thomas K. Connellan, president of The Management Group, Inc.
01:20:25 <lambdabot> Speaking to business executives in Chicago and quoted in Automotive News,
01:20:26 <lambdabot> Connellan attributed a measure of America's falling productivity to an excess
01:20:28 <lambdabot> of attorneys and accountants, and a dearth of production experts.  Lawyers
01:20:30 <lambdabot> and accountants "do not make the economic pie any bigger; they only figure
01:20:32 <lambdabot> out how the pie gets divided.  Neither profession provides any added value
01:20:34 <lambdabot> [7 @more lines]
01:20:44 <harsha123> @help
01:20:44 <lambdabot> Sorry, I don't know the command "help", try "lambdabot: @listcommands"
01:20:51 <harsha123> @listcommands
01:20:51 <lambdabot> I react to the following commands: ["all-dicts","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude","quit","reconnect","
01:21:00 <harsha123> @dict
01:21:00 <lambdabot> Supported dictionary-lookup commands:
01:21:00 <lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon @lojban @prelude @vera @web1913 @wn @world02
01:21:00 <lambdabot> Use "@dict-help [cmd...]" for more.
01:36:45 <shapr> @yow
01:36:46 <lambdabot> YOW!!  I am having FUN!!
01:37:02 <shapr> @more
01:37:14 <shapr> @yow
01:37:15 <lambdabot> KARL MALDEN'S NOSE just won an ACADEMY AWARD!!
01:51:41 <shapr> banzai!
01:52:21 <shapr> yesterday my mother told me I may be bored by graduate school.
01:54:19 <shapr> bcpierce is a cool guy
01:55:01 <shapr> I wonder if Sulzmann has considered using TinkerType as the specification of Chameleon
01:56:13 <shapr> hi mattam 
02:09:50 <shapr> hej ski
02:09:59 <ski> hej !
02:30:54 * shapr bounces
02:31:33 * ski eats candy
02:31:40 * shapr hacks on Zope
02:32:33 <ski> is it a drink ?
02:33:29 <shapr> nah, it's a web application server
02:33:39 <ski> ah
04:21:44 <Igloo> Wooo, hppa and s390 (unreg) GHC in incoming - go me!
04:59:46 <harsha123> adept: hey..
05:00:03 <harsha123> err.. Hi...
05:00:11 <adept> harsha123: hi
06:20:28 * shapr bounces cheerfull
06:20:39 <shapr> Igloo: hurrah!
06:31:12 * isomer springs into action
06:31:24 <isomer> morning
06:33:25 <shapr> y0
06:33:54 <isomer> s'up homey?
06:37:51 <shapr> just chillin in ma crib
06:39:10 <shapr> I found a twilight zone pinball game today! it's only two blocks from me!
06:39:10 * shapr bounces excitedly
06:39:28 <shapr> I think I may purchase that game from him.
06:40:29 <SyntaxPolice> hi shapr!
06:40:40 <shapr> good morning Agent Jones.
06:40:52 <shapr> tomorrow is my 100,000th birthday!
06:40:55 <shapr> yay!
06:41:12 <shapr> @yow
06:41:12 <lambdabot> YUGGA-HUGGA-BUGGA-TUGGA!!  HEY-HEY!!  A TRAIN STATION!!  No, a POST
06:41:12 <lambdabot>  OFFICE!!  An OCEAN LINER!!  No, I think it's a CAFETERIA!!!
06:41:30 <shapr> lambdabot: you are a strange bot
06:41:30 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
06:42:29 <SyntaxPolice> shapr: congrats!!
06:42:46 <isomer> happy birthday, shapr
06:43:01 <SyntaxPolice> shapr: did I tell you that when our CIS dept turned 32, we had a Binary Birthday party where john levine spoke?
06:44:08 <shapr> no, that's cool!
06:44:43 <shapr> Bea is going to buy me two Benjamin Pierce books for my birthday :-) "Types and Programming Languages" and "Basic Category Theory for Computer Scientists"
06:44:57 <shapr> two years ago she bought me two Haskell books, and look what happened....
06:45:04 <isomer> uh oh
06:45:15 * isomer hopes bea doesn't buy shapr any alcohol!
06:45:15 * shapr laughs
06:47:44 <SyntaxPolice> shapr: hey, I was goign to buy those books!
06:48:12 <shapr> part of being smart is recognizing and stealing others good ideas.
06:48:15 <shapr> ;-)
06:52:43 <shapr> yay, we have a new client
06:53:09 <isomer> :)
06:53:33 <shapr> amazingly, this one is actually in the same country.
06:53:42 <shapr> that's a first for us.
06:53:45 <jao> shapr: if you don't mind my intervening, "Conceptual mathematics" is a far better about cat. theo. than the above (i own both)
06:54:00 <shapr> jao: cool, lemme change my wishlist
06:54:05 <shapr> jao: who's the author?
06:54:17 <jao> hm, just 1 sec please
06:54:21 <shapr> btw, I probably count as a clueless newbie when it comes to mathematics
06:54:53 <jao> F. William Lawvere, Stephen Hoel Schanuel. Conceptual Mathematics: A First Introduction to Categories. 1997. Cambridge University Press.
06:55:01 * isomer is clueless about far more than just mathematics
06:55:04 <jao> shapr: then it's a perfect book for you
06:55:08 <shapr> yah, me too
06:55:13 <shapr> yay!
06:58:26 <shapr> jao: any other recommendations?
06:58:45 <jao> shapr: about category theory?
06:59:01 <shapr> or anything else
06:59:39 <isomer> man, why am i so friggin useless in the morning?
06:59:50 <jao> oh well, the usual acronyms : SICP, GEB, TAOCP, EOPL... :) 
06:59:59 * Igloo wants to learn category theory but Oxford don't have a course on it
07:00:11 <shapr> Igloo: get a book :-)
07:00:23 <shapr> I have SICP, GEB, but not TAOCP, what's EOPL?
07:00:49 <jao> Elements of programming languages
07:01:08 <jao> a book about CPS, basically, and interpreters
07:01:08 <adept> Evil Of Programming Languages :)
07:01:21 * jao grins
07:01:31 <adept> TAOCP = Knuth's book
07:01:48 <adept> The Art Of Computer Programming
07:01:51 <isomer> shapr: "algorithms on strings, trees and sequences" by gusfield. truly great book, if you get a stiffy from that sort of thing
07:02:26 <jao> ah. also okasaki's book on functional data structures is good
07:02:32 <shapr> I got a stiffy from rabhi and lapalme's Functional Algorithms books
07:03:38 <isomer> glad i'm in good company here :)
07:04:15 <jao> :) would you recommend rabhi´s book... i was considering buying it...
07:04:49 <shapr> I would recoommend it
07:04:56 <jao> good
07:05:01 <shapr> I had great fun reading it, since I've only used most of those algorithms in procedural languages.
07:05:21 <shapr> actually, I think the pure FP descriptions were much better than all the others I've seen.
07:05:24 <jao> then you'd like okasaki's one :)
07:05:30 * adept wants amazon.ua ...
07:05:41 <shapr> yes, okasaki's book is on my wishlist also.
07:06:01 <shapr> but the writing style I've seen in okasaki's book is much more difficult to read imho
07:06:13 <shapr> rabhi&lapalme were a relaxing fun read
07:07:06 <jao> yeah, it's not an easy reading
07:07:19 <jao> but it's really worth the effort
07:16:02 <SyntaxPolice> shapr: I got the space-invaders program to run, and I altered it so that the aliens shoot back.
07:16:08 <SyntaxPolice> its much harder now :)
07:16:11 <shapr> SyntaxPolice: awesome!
07:16:28 <SyntaxPolice> its actually a pretty addictive game
07:18:28 <Igloo> Heh
07:18:39 <shapr> SyntaxPolice: debs in HE? :-)
07:18:42 * Igloo whispers Debian package  :-)
07:18:48 <Igloo> Pah, Debian proper  :-)
07:18:51 <shapr> fair enough
07:19:44 <SyntaxPolice> can't package yampa, you know that :)
07:19:55 <Igloo> For licence reasons?
07:20:04 <SyntaxPolice> ja
07:20:10 <Igloo> :-(
07:20:16 <shapr> I should complain again...
07:20:16 <SyntaxPolice> they haven't decided on a license yet
07:20:25 <Igloo> Bah
07:20:25 <shapr> or at least ask politely the first time
07:20:28 <SyntaxPolice> shapr: they told met hat it would most likely be under a BSD license
07:20:36 <shapr> yes, Daan told me the same thing about HaskellDB
07:20:39 <SyntaxPolice> but they didn't really say when.
07:20:42 <shapr> but until they actually apply that license....
07:20:51 <SyntaxPolice> mark said that I can offer to package it if they offer to put it under BSD :)
07:20:59 <shapr> yay
07:21:08 <Igloo> If they are deciding between two free licences then ask if you can have it under the more restrictive for now maybe?
07:21:28 <shapr> yah!
07:21:55 <Igloo> Oh, and tell them I'm dying to try this game and yampa programming myself but unfortunately the lack of licence means I can't
07:22:47 <SyntaxPolice> Igloo: you tell them, they like to hear that stuff.
07:23:05 <SyntaxPolice> I think one problem w/ the haskell community is that everyone knows whats going on
07:23:19 <SyntaxPolice> so they don't bother to email eachother saying, 'hey, when are you going to release this, I like it!', etc
07:24:02 <Igloo> Speaking of stuff going on, is anything new with LIP?
07:25:00 <SyntaxPolice> Igloo: yeah, there's a draft document at www.syntaxpolice.org/tmp/libraryInfrastructure.ps or something
07:25:00 <shapr> I've realized the sumo tarball will be called Fat LIP.
07:25:09 <SyntaxPolice> heh
07:25:32 <SyntaxPolice> Igloo: every time I post something about it, no one understands wtf I'm talking about, so this document is 'everything you need to know'
07:25:35 <shapr> yay
07:26:03 <Igloo> Sounds great
07:26:20 <SyntaxPolice> its 10 pages long already
07:26:37 <SyntaxPolice> and I"m reallly honestly not going for length
07:26:51 <SyntaxPolice> I guess thats why its hard to understand all of the issues, when I go to write it it turns out to be 10 - 15 pages
07:26:54 <Igloo> Good, because conciseness is much better  :-)
07:27:15 <SyntaxPolice> maybe I can edit it down, or make another appendix
07:27:20 <SyntaxPolice> (btw, anyone who wants to write missing bits of the appendix is welcome)
07:27:41 * Igloo should be writing my transfer dissertation unfortunately
07:28:29 <Igloo> Any reason for using ragged-right OOI?
07:28:55 <shapr> hey Arnia 
07:29:07 <shapr> Arnia: have you seen wiwiwi?
07:32:45 <shapr> whee
07:34:47 * SyntaxPolice double-checks slef
07:34:47 <SyntaxPolice> self
07:34:56 <shapr> Self is a nice language.
07:35:28 <Igloo> Syn: Does build also build dependencies?
07:36:21 <SyntaxPolice> build deps are in there seperately (I assume your'e talking about the Package datatype?)
07:36:24 <SyntaxPolice> oh
07:36:27 <SyntaxPolice> the the build module?
07:36:38 <SyntaxPolice> idono, maybe. probably not automatically. I think layered tools for that.
07:36:41 <Igloo> Sorry, I mean ./Setup.lhs build
07:37:07 <shapr> Lunar^: do you have the latest sources for wiwiwi?
07:37:13 <SyntaxPolice> no, I think something higher level should build deps.
07:37:24 <shapr> SyntaxPolice: what's your homepage addy again?
07:37:33 <Igloo> I'm really wondering what should happen if you have all the deps for GHC installed, half installed for NHC (but the others exist) and hugs doesn't have some of the deps at all and you do ./Setup.lhs build all
07:38:38 <SyntaxPolice> shapr: www.syntaxpolice.org
07:38:44 <Igloo> I'm not convinced bdist_deb etc should be in the standard Setup.lhs either - I think a separate Debian package should use Setup.lhs to make debs
07:38:53 <Igloo> (or just have calls in debian/rules)
07:39:05 <shapr> SyntaxPolice: wow, hard one.
07:39:05 <SyntaxPolice> Igloo: could be.  what would you think of sending me an email with your suggestions?
07:39:10 <SyntaxPolice> shapr:  :)
07:39:22 <SyntaxPolice> Igloo: right now, it uses CDBS, making debian/rules ONE LINE LONG :) :)
07:39:28 <Igloo> :-)
07:40:11 <SyntaxPolice> Igloo: I guess build all would have to fail in that case, but should it install for ghc first?
07:40:34 <Igloo> Oh, you might want to subscribe to the nhc98 PTS if the Uploaders: line hasn't done the right thing BWT
07:41:15 <SyntaxPolice> ok, will do.
07:42:00 <Igloo> Well I think build all should just successfully build for GHC in that case, but there should be a show_missing_deps which would say "GHC:\nNHC: foo (>= 4), bar\nhugs missing baz >=5, wibble\n"
07:43:25 <Igloo> There should be a show_all_deps too, but I can't tell if --info is for that
07:43:50 <SyntaxPolice> --info would dump everything in the Package datastructure
07:45:16 <Igloo> You don't seem to have a way to uninstall either?
07:45:51 <SyntaxPolice> er, there will be, its just missing.
07:45:57 <Igloo> :-)
07:46:11 <SyntaxPolice> do send me an email :)
07:46:17 <Igloo> How will it work? Setup.lhs is in the source, right?
07:46:52 <SyntaxPolice> yeah
07:47:43 <Igloo> Hmm
07:48:08 <Igloo> I think ./Setup.lhs install should be a separate program
07:48:51 <SyntaxPolice> what do you mean separate?
07:48:56 <Igloo> How do install and register differ?
07:49:16 <SyntaxPolice> install moves the sources into place, register calls something like ghc-pkg
07:49:31 <SyntaxPolice> typicall register would be done in postinst, and they want to be able to not do it
07:49:31 <Igloo> I mean there should be a /usr/bin/install-haskell in the haskell-utils Debian package that is called by the postinst. It handles install and removal.
07:49:56 <SyntaxPolice> why?
07:50:11 <Igloo> Ah, OK, so it actually handles register and removal
07:50:28 <Igloo> Because you want to be able to remove the library after you've rm -rfed the source tree
07:51:00 <Igloo> You could copy Setup.lhs to /usr/lib/$package I guess, but that seems ickier
07:51:56 * Igloo tries to remember if registers will happen in dependency order on Debian (assuming non-circular depends)
07:51:58 <SyntaxPolice> haskell-pkg should be able to remove the package, I think.
07:53:00 <Igloo> Oh, is haskell-pkg also used when users install things themselves?
07:53:19 <Igloo> That's probably what I'm talking about then. Excellent!
07:53:36 * Igloo does some work - I'll look at logs and mail you tonight
07:53:50 <SyntaxPolice> well, the reason the script wants ot install things is that we need to give ppl a way to wrap other systems like 'make install'
07:53:56 <SyntaxPolice> without using any of haskell-pkg, etc.
07:55:03 <SyntaxPolice> OK thanks :) :)
07:55:22 <SyntaxPolice> yes, now (or soon) is the time to have an effect on this project :)
08:07:42 <cm> hiho
08:07:58 <shapr> hi cm
08:08:08 <cm> hey shapr :)
08:08:08 * shapr boings
08:11:15 * isomer offers shapr some of his chocolate covered espresso beans
08:11:49 <shapr> I think I have enough stimulants for the moment
08:11:57 <shapr> even though my methylphenidate supply is nearly empty
08:12:13 <isomer> eep!
08:12:19 <shapr> btw, does anyone know why darcs isn't a real Debian package?
08:12:41 * Igloo was wondering that
08:12:52 <shapr> yah, the difficulty of acquiring methylphenidate prescriptions in ScannedInAvia makes for occasional forced vacations.
08:13:15 <isomer> i don't follow
08:14:20 <shapr> getting a Ritalin prescription here requires a *lot* of bureaucracy, it's in the same class as amphetamines for some reason.
08:14:40 <shapr> doesn't make much sense, but whatever...
08:14:46 <isomer> oh my
08:14:53 <isomer> trip back to the states?
08:15:19 <shapr> no, I just have a forced vacation until the paperwork clears.
08:15:35 <isomer> oh, as in: can't concentrate on anything
08:15:38 <shapr> right
08:16:18 <isomer> ouch
08:16:27 * shapr shrugs
08:16:38 <shapr> I'm a lot more entertaining without Vitamin R
08:16:49 <shapr> but not very productive.
08:19:24 <isomer> know the feeling
08:23:26 <ludde> how can i measure the time it takes to run a haskell function
08:23:57 * isomer hands ludde a stopwatch
08:23:57 <shapr> use profiling?
08:24:12 <ludde> is there some built in feature i can use?
08:24:17 <ludde> that gives me an exact value
08:24:34 <shapr> you can use time in the shell, or GHC's profiling libs
08:25:02 <ludde> hmm
08:25:05 <ludde> :set +s did something
08:25:22 <ludde> (41532 reductions, 75437 cells)
08:25:28 <ludde> that seems to be a measure of complexity
08:28:16 <Igloo> Profiling won't tell you how long it will take to run unprofiled, though
08:30:41 <ludde> actually i just need a number that tells me how fast it is.
08:30:47 <ludde> so i can know if my optimizations have any effect
08:34:32 <Igloo> I just do time ./foo in the shell
09:00:19 <shapr> has Debian considered using bittorrent or some other peer mirroring system?
09:01:12 <shapr> hi Flarelocke 
09:01:19 <Flarelocke> hi
09:01:32 <shapr> are you learning Haskell?
09:01:52 <Flarelocke> yep
09:02:32 <shapr> are you learning Haskell for school or for personal edification?
09:02:39 <Flarelocke> personal edification
09:03:01 <shapr> cool, do you have any questions so far?
09:03:03 <Flarelocke> Although it could possibly be helpful in school, as well
09:03:09 <shapr> have you already started reading tutorials?
09:03:45 <Flarelocke> I've already read every tutorial I've read so far, but there seems to be a dearth of material just after tutorials
09:04:26 <shapr> have you already seen http://www.haskell.org/learning.html ?
09:04:32 <Flarelocke> Basically, I can't really make the jump from coding to engineering to solve problems
09:05:01 <shapr> have you tried writing small but useful apps?
09:05:18 <shapr> what sort of problems do you want to solve?
09:05:48 <Flarelocke> I don't have anything particular in mind (just learning the language)
09:06:01 <shapr> I often suggest writing a lambdabot plugin
09:06:03 <shapr> @listmodules
09:06:03 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
09:06:03 <Flarelocke> I'm trying to build experience programming in a functional style
09:06:12 <shapr> @fortune
09:06:13 <lambdabot> It's appositival, if it's there.  And it doesn't have to be there.
09:06:13 <lambdabot> And it's really obvious that it's there when it's there.
09:06:13 <lambdabot>              -- Larry Wall in <199709032332.QAA21669@wall.org>
09:06:40 <Flarelocke> cool
09:06:48 <shapr> for example, writing an @uptime plugin would be pretty simple
09:07:00 <shapr> or a @help plugin
09:08:18 <shapr> the sources for lambdabot (and various other stuff) are in a darcs repository at http://www.ScannedInAvian.org/repos/hlibs
09:08:54 <Flarelocke> I found the sourceforge page for it
09:09:08 <shapr> the sourceforge cvs is not as current as the darcs repo
09:09:25 <shapr> mostly because I'm trying to see if darcs is production quality
09:09:37 <shapr> and because darcs is written in Haskell, so it's a community building thing.
09:11:48 <isomer> lambdabot: botsnack!
09:11:49 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
09:11:58 <isomer> guess he's not hungry :(
09:12:16 <lambdabot> I'm not hungry!
09:13:22 <isomer> :)
09:18:08 <isomer> bah...dave's total insanity isn't hot enough
09:19:09 <shapr> hi hal
09:19:14 <shapr> new hostname today, eh?
09:19:26 <shapr> isomer: who's dave?
09:19:41 <hdaume> shapr: yeah, not on my laptop
09:20:47 <isomer> http://www.firegirl.com/hs1246.html
09:21:04 <shapr> scary
09:22:21 <isomer> i think this one is next on my list: http://www.firegirl.com/hs1500.html
09:23:16 <shapr> yeesh
09:23:22 <shapr> masochist!
09:24:13 <isomer> i stopped eating salt, so i had to replace it with something ;)
09:24:32 <d33p> i eat salt too :)
09:25:04 * isomer misses salt sometimes
09:25:22 <d33p> why dont you eat salt?
09:26:50 <isomer> it looked like i had high blood pressure, so i stopped eating it. turned out in the end that the blood pressure meter was b0rked.
09:27:08 <isomer> but once i'd changed my diet for 6 months, i decided to keep it. i feel lots better because of it
09:27:22 <d33p> really?.. hmm 
09:28:16 <isomer> serious
11:02:53 <ski> is there a function for timing io-actions in Haskell98 or GHC ?
11:03:02 <ski> where ? what name ?
11:04:05 <ski> with type like  IO a -> IO (a,SomeTimeDiffType)
11:09:32 <ludde> timing the lab in algorithms? :)
11:09:42 <ski> yes
11:09:48 <ski> :)
11:09:57 <ludde> i found :set +s in hugs, it isn't time, but it gives you some measurement of complexity
11:10:07 <ludde> alternatively you can compile it with ghc and use unix time
11:10:15 <ski> i know
11:10:24 <ski> i (we) have to compile it
11:10:38 <ludde> make the strings command line parameters, and it should work fine
11:10:44 <ski> so we have to use unix time or internal time functions
11:11:13 <ski> in CPUTime i found getCPUTime :: IO Integer
11:11:30 <ski> where is getArgs in ghc ?  :)
11:13:23 <ludde> System
11:33:13 <Igloo> shapr: Yes, re bittorrent (well, something bittorrent-like). I think there was even code, but I don't know what happened to it
11:54:30 <keverets> @yow
11:54:30 <lambdabot> .. If I cover this entire WALL with MAZOLA, wdo I have to give my
11:54:30 <lambdabot>  AGENT ten per cent??
11:55:02 <ski> @fortune
11:55:03 <lambdabot> Velilind's Laws of Experimentation:
11:55:03 <lambdabot> 	(1) If reproducibility may be a problem, conduct the test only once.
11:55:03 <lambdabot> 	(2) If a straight line fit is required, obtain only two data points.
11:55:30 <Xcalibor> hiyas
11:55:35 <ski> hi
11:55:42 <keverets> greetings
11:55:48 <Xcalibor> hi all :-)
11:55:59 <ski> hi again :)
11:56:02 <keverets> rehi
11:56:13 <ski> doubled hi
11:57:34 <Xcalibor> okay... question, cause it's failing and I don't understand why
11:57:40 <ski> mm
11:58:50 <ski> just start asking :)
11:59:24 <Xcalibor> the problem is simple and easy, I was just trying to find an elegant solution. The theorem says that for every natural number p that is a palindrome (ie reads equal left to right than right to left) there are other two natural numbers n and t so that n + nreverse n applied t times is equal to p
12:00:03 <keverets> anyone know why the Debian hugs package depends on autoconf?
12:00:10 <Xcalibor> the problem is writing the function palindrome so that given n finds p
12:00:20 <Igloo> depends or build-depends?
12:00:29 <keverets> just depends, unfortunately.
12:01:06 <Igloo> That does sound odd - are you here, SyntaxPolice?
12:01:13 <Xcalibor> ie: p = palindrome n ... with the cut condition that if your n gets bigger than 1e7 you should return -1 (algorithm converging too slowly)
12:01:35 <ski> Xcalibor : hmm
12:01:49 <Xcalibor> so: nreverse n = read . reverse . show $ n
12:01:49 <keverets> ah, Pre-Depends ... should probably be changed to build-depends
12:02:14 <Xcalibor> and is_pal = if n == nreverse n then True else False
12:02:20 <keverets> if it's reasonable, then I'll ignore it.  Otherwise I'll file a bug.
12:03:25 <Xcalibor> so instead of going the recursive way of defining palindrome (it works pretty well)
12:03:37 <ski> Xcalibor : the theorem is proven, then ?  you just want to compute a p from an n .. ?
12:03:42 <Xcalibor> i defined foo n = n + (nreverse n)
12:03:50 <Xcalibor> ski: yes... but in an elegant way... :-)
12:04:33 <Xcalibor> then I can say palindrome n = head (filter is_pal (iterate foo n))
12:05:08 <Xcalibor> that's very nice, but it doesn't contain the cut condition for very big n.. how can I add that policy as a function in there?
12:05:30 <Xcalibor> takeWhile (\x -> x <= 10000000) (filter is_pal (iterate foo 196) -- doesn't work
12:06:04 <ski> Xcalibor : aha, you want to add a number to its reversed number, until you get a palindrome, yes ?  I initially thought that you wanted to get the base number from the palindrome ..
12:06:08 <Xcalibor> any ideas?
12:06:42 <Xcalibor> ski: yes, I want to find the palindrome doing that sum again and again... but i must stop if n gets bigger than 1e7
12:07:33 <ski> so the theorem does not guarantee that the search will stop for all base numbers, is that correct ?
12:09:30 <Xcalibor> ski: the theorem says the numbers exist, but the algorithm converges very slowly for some numbers... for example, 196 goes with an 'n' of more than 20,000 digits and still nothing...
12:09:31 <ski> filter is_pal . takeWhile (<= 10000000) . iterate foo   ?
12:09:44 <ski> ok
12:10:06 <Xcalibor> ski: that doesn't type match... :-
12:12:20 <ski> (your above phrasing of the theorem seems to only imply that for all palindome numbers, there are a base number n, which eventually yields the palindrome in the interation. I.e. not nessecarily that for all n the iteration converges to a palindrome p, no ?)
12:12:27 <Xcalibor> ski: i was thinking on writing that as a list comprehension, but considering there's a relationship between list comprehensions and map , scan, etc... i am playing with some substitutions right now...
12:12:56 <ski> @type let (is_pal,foo) = undefined in filter is_pal . takeWhile (<= 10000000) . iterate foo
12:12:56 <Xcalibor> well... palindromes are dense in N
12:12:56 <lambdabot> let {is_pal (foo $0) ((is_pal,foo) (0 undefined)) $0 $0} in filter is_pal . takeWhile (flip (<=) 10000000) . iterate foo :: (Ord a, Num a) => a -> [a]
12:13:12 <Xcalibor> there are as many palindromes as even, or odd numbers, or natural numbers... 
12:13:39 <ski> and as many as primes ;)
12:13:55 <ski> or factorials
12:14:12 <Xcalibor> ski: exactly... that guarantees the sufficiency in the if and only if... the theorem just proves the necessity
12:14:47 <ski> lambdabot seems to think that it is type-correct ..
12:14:58 <Xcalibor> or any other monotonically growing succesion... :-)
12:15:08 <Xcalibor> Main> filter is_pal . takeWhile (<= 10000000) . iterate foo 28
12:15:08 <Xcalibor> ERROR - Type error in application
12:15:08 <Xcalibor> *** Expression     : takeWhile (flip (<=) 10000000) . iterate foo 28
12:15:08 <Xcalibor> *** Term           : iterate foo 28
12:15:08 <Xcalibor> *** Type           : [c]
12:15:09 <Xcalibor> *** Does not match : a -> b
12:15:31 <Xcalibor> maybe i need a couple of ()'s in there?
12:15:34 <ski> try "filter is_pal . takeWhile (<= 10000000) . iterate foo $ 28"
12:15:42 <ski> or "(filter is_pal . takeWhile (<= 10000000) . iterate foo) 28"
12:15:47 <ski> yes
12:17:00 <Xcalibor> ski: okay, it *almost* works!!
12:17:08 <ski> almost ?
12:17:27 <Xcalibor> nice thinking. if I give the takeWhile to the filter... :)
12:17:53 <Xcalibor> ski: yup... as it cuts when it gets bigger than 1e7:
12:17:55 <Xcalibor>  head (filter is_pal . takeWhile (<= 10000000) . iterate foo $ 28)
12:17:56 <Xcalibor> 121
12:18:04 <Xcalibor> but:  head (filter is_pal . takeWhile (<= 10000000) . iterate foo $ 196)
12:18:04 <Xcalibor> Program error: {head []}
12:18:09 <Xcalibor> it should return -1
12:19:01 <ski> you'll want to 'case' on that (instead of using head), though, to return -1 if the list is empty
12:19:03 <ski> yes
12:19:29 <Xcalibor> to case? I tried to make a: valid_head (x:xs) = if x > 10000000 then (-1) else x
12:19:41 <Xcalibor> but that didn't work on my solution, let me try with yours
12:20:01 <ski> that works as well (pattern-matching is syntactic sugar for case-expressions)
12:20:07 <Xcalibor> nope :-/
12:20:29 <Xcalibor> mmm => Program error: {valid_head instOrd_v27 instNum_v30 []}
12:20:32 <ski> valid_head [] = -1
12:20:38 <ski> valid_head (x:xs) = x
12:20:59 <ski> baz = valid_head . bar
12:21:07 <ski> bar = filter is_pal . takeWhile (<= 10000000) . iterate foo
12:21:19 <ski> does that work ?
12:21:33 <ski> if so, you can try "baz 28"
12:21:45 <Xcalibor> sure it does... moving the condition to the takeWhile makes it simpler, indeed :-)
12:21:49 <ski> hmm
12:21:52 <ski> make that
12:22:03 <ski> bar = valid_head . filter is_pal . takeWhile (<= 10000000) . iterate foo
12:22:09 <ski> and remove the baz
12:23:09 <Xcalibor> like a charm :-)
12:23:19 <ski> you can (IMHO should) make valid_head into a local function belonging to baz  (at least if you aren't going to use it anywhere else)
12:23:27 <Xcalibor> thanks, I knew I was in the right direction, but was awfully stuck :-)
12:23:51 <ski> no prob
12:23:55 <ski> :)
12:24:26 <Xcalibor> Haskell is really nice for solving this kind of problem... :)
12:25:04 <ski> hmm, you could of course find a better name (more descriptive) for valid_head
12:25:08 <ski> yes :)
12:25:46 <ski> the name valid_head doesn't tell you that it is returning the palindrome (or -1)
12:26:03 <ski> it sound like it is returning a Bool, which it isn't
12:26:28 <Xcalibor> yes, it was a shoot in the dark... it doesn't do that anymore...
12:26:42 <ski> ?
12:26:53 <ski> what is "it" ?
12:26:56 <Xcalibor> i'd now call it... mmm... cut
12:27:10 <ski> ok, ah
12:27:25 <ski> yes, that is better than valid_head
12:27:32 <Xcalibor> that function was a shoot in the dark, i was prototyping different ways to apply the cut condition... the name is not very good (but then so isn't 'foo' :-)
12:28:36 <ski> foo is better than a misleading name, IMHO
12:28:52 <Xcalibor> ok, more playing: this now protests and I know it must be a silly thing: [ n | n <- x + (nreverse x), x < 10000000, x <- [10..] ]
12:29:36 <ski> i very often call local help-functions (often accumulating ones) 'loop'  (even ones that is not tail-recursive)
12:29:59 <ski> ERROR - Undefined variable "x"
12:30:28 <ski> ERROR - Illegal Haskell 98 class constraint in inferred type
12:30:28 <ski> *** Expression : let {...} in [ n | n<-x + nreverse x, x < 10000000, x<-enumFrom 10 ]
12:30:31 <ski> *** Type       : (Num [a], Enum b, Num b, Ord c, Num c) => [a]
12:30:35 <ski> that one ?
12:30:56 <Xcalibor> yup... but how can I tell haskell that the numbers should go from 10 and on?
12:31:22 <Xcalibor> (btw, hugs gives less detailed error messages!!)
12:31:54 <ski> i used hugs (February 2001) for this !
12:32:09 <Igloo> You mean [n | x <- [10..9999999], let n = x + (nreverse x)]
12:32:10 <Xcalibor> oops... not in the emacs mode
12:32:33 <ski> Igloo : just what i was going to say ;)
12:32:34 <Igloo> If I understand correctly, anyway
12:32:52 <Xcalibor> ah, okay, that was it :)
12:32:53 <ski> (or something like that, at least)
12:33:08 <Igloo> Variables have to be defined to the left of where they are used in list comprehensions
12:33:39 <ski> Xcalibor : you have to bind x in the list.compr. before you use it (except all variables are usable in the part before | , of course)
12:34:09 <Xcalibor> i see... of course, silly me...
12:34:29 <Xcalibor> i was thinking we can use this to solve the problem as well...
12:34:31 <ski> and x + (nreverse x)  is not a list so you want to use  let n = ...  instead of n <- ...
12:35:06 <ski> but this doesn't iterate the  \x -> x + (nreverse x)  thing
12:35:21 <Xcalibor> of course... well, i've been reading in Bird's for too long today, my head's boiling :-)
12:36:01 <ski> heh
12:36:59 <Xcalibor> where would you put the condition that to be a palindrome x == nreverse x?
12:37:21 <Xcalibor> [n | x <- [10..9999999], let n = x + (nreverse x), x == (nreverse x)]   ?
12:37:28 <ski> first we have to iterate foo, no ?
12:37:35 <ski> no
12:38:12 <Xcalibor> yes :-)
12:38:18 <ski> good
12:38:35 <Xcalibor> thus, palindrome3 n = [n | x <- [10..9999999], let n = x + (nreverse x), x == (nreverse x)] !! n
12:39:05 <Xcalibor> oops... (n -1)
12:39:13 <ski> [n | x <- [10..9999999], let n = x + (nreverse x)] is equivalent to map foo [10..9999999]
12:39:57 <ski> so this applies foo, *once*, for each number in the range from 10 to 9999999
12:40:10 <Xcalibor> yes, it doesn't iterate, you are right...
12:40:37 <ski> you really want to iterate foo over every number until you get a palindrome from it
12:40:42 <Xcalibor> this way we get all the numbers, the right ones and the intermediate ones...
12:40:50 <Xcalibor> yup...
12:41:34 <ski> try "map foo [10..20]"
12:41:59 <ski> not all numbers is palindromes now, no ?
12:42:46 <ski> hmm
12:43:14 <ski> i'm not sure if a list comprehension could really help here at all ..
12:43:30 <Xcalibor> neither i am :-)
12:43:47 <Xcalibor> it was just plying with the language...
12:44:05 <ski> i suppose one could define a lazy list of all palindromes
12:44:09 <ski> hmm
12:44:32 <Xcalibor> after reading the 'evolution of a haskell programmer' with the factorial function, i think there must be some two dozens of good solutions to every problem in haskell... :-)
12:46:39 <ski> palindromes = [ if is_pal n then n else palindromes !! (n + nreverse n) | n <- [0..] ]
12:46:47 <ski> does that work ?
12:46:55 <vegai> Xcalibor: I agree on everything except the part about "good"
12:47:00 <ski> try "take 40 palindromes"
12:47:48 <Xcalibor> mmm got an error in palindromes
12:47:53 <Xcalibor> ERROR - Syntax error in input (unexpected `=')
12:48:04 <ski> Xcalibor : at least there are a couple of good idioms to learn. e.g. from 'evolution of a haskell programmer'
12:48:19 <ski> put it in a file and :l it
12:48:39 <ski> or try   let palindromes = .... in take 40 palindromes
12:48:45 <ludde> ski: did you finish the lab?
12:48:55 <ski> ludde : not yet :)
12:49:02 <Xcalibor> ski: ok, it returns the first 40 palindromes, cool :-)
12:49:09 <ludde> ski: do you know how to "explain that the algorithm is correct"?
12:49:30 <ski> ludde : i have a mixed bad/somewhat-good solution
12:49:45 <ludde> ski: you use branch and bound?
12:49:50 <ski> ludde : no documentation or explanation yet :(
12:50:05 <ski> ludde : and the cmd line interface is not finished
12:50:44 <ski> ludde : yes, i build a lazy search tree, and then scan it with branch-and-bound
12:50:59 <ludde> okay
12:51:09 <ski> Xcalibor : but probably it is quite inefficient
12:51:21 <ludde> i use branch and bound too, but i don't build a lazy search tree
12:51:45 <Xcalibor> ski: but nice anyway :-)
12:51:55 <ski> Xcalibor : because to get from n to foo n it has to index the list from the beginning a long way in, every time :(
12:52:18 <ski> Xcalibor : but it is not so bad-*looking*, IMHO
12:53:33 <ski> ludde : the (probably) bad part is that i generate a list of all sublists of the text, and then just pass that and the pattern to an align function (which is smarter)
12:53:33 <Xcalibor> ski: it is nice, indeed...
12:53:35 <Xcalibor> :)
12:53:42 <Xcalibor> thanks for the insights and help!
12:53:48 <ski> no problem :)
12:53:52 <ski> yes
12:53:55 <ludde> ski: how fast does your one execute?
12:55:25 <ski> ludde : i haven't tested with timing much yet, but text "HEAR!-THEY-ARE-THERE" and pattern "THEMA" takes about 30 seconds
12:55:34 <ludde> hmm ok
12:55:44 <ludde> is that in hugs?
12:55:50 <ski> is that really bad, or just bad ?  ;)
12:55:53 <ski> no
12:56:00 <ludde> compiled with ghc?
12:56:05 <ski> it is compiled  ;/
12:56:09 <ski> yes
12:56:09 <ludde> did you use -O2 ?
12:56:12 <ski> no
12:56:16 <ludde> cause..
12:56:19 <ski> can try that
12:56:20 <ludde> mine runs in like 0.00 seconds
12:56:27 <ludde> i think
12:56:28 <ludde> wait
12:56:29 <ludde> i'll try
12:56:45 <ludde> but i accidentally overwrote the lab file with an older version, so i need to reimplement a thing.
12:57:21 <ski> oh :(
12:57:30 <ludde> easy to fix
12:58:00 <ludde> hm
12:58:02 <ski> about 20 seconds
12:58:08 <ski> :)
12:58:11 <ludde> i'm unable to run this
12:58:12 <ludde> ./lab1 "HEAR!-THEY-ARE-THERE" "THEMA"
12:58:16 <ludde> my shell complains
12:58:26 <ludde> maybe the ! is in the way
12:58:26 <ski> use a \ before the !
12:58:29 <ski> i think
12:58:29 <ludde> ok
12:58:40 <ludde> (2,("THE**","THEMA"))
12:58:43 <Lor> ! is such a useless annoyance in modern shells.
12:58:54 <ludde> user    0m0.001s
12:59:32 <yazirian> it boggles my mind that the ! gets parsed even inside quotes
12:59:38 <yazirian> silliness
12:59:54 <yazirian> $ makes sense, but ! does not
13:00:17 <Igloo> Use '' then
13:00:44 <yazirian> to quote office space: "Why should *I* change? *He's* the one who sucks."
13:00:47 <yazirian> :)
13:00:57 <keverets> If $ makes sense, then ! would also make sense
13:00:59 <Igloo> :-)
13:02:53 <ski> ludde : 2019.0 , ("THE",("THEMA","THE**",2))
13:03:14 <ski> ludde : the time unit is cpuTimePrecision :)
13:03:25 <ludde> ok
13:04:07 <ski> i guess it's hundreds of seconds
13:04:09 <ludde> you made a tree with 'data' ?
13:04:12 <ski> yes
13:04:40 <ludde> hm ok
13:04:47 <ski> stored a lowerBoundScore in every node
13:05:18 <ludde> maybe it runs out of cpu cache or something and runs slowly because of that?
13:05:26 <ludde> if this tree is big in memory.
13:05:31 <ski> hmm
13:06:01 <ski> i don't think the gc should retain the whole tree in memory ..
13:06:13 <ski> hopefully only a small part at a time
13:06:26 <ludde> yeah who knows though
13:06:34 <ludde> :)
13:06:49 <ski> i presume my "sub <- sublists text" is the worst thing ..
13:07:05 <ski> (in list.compr.)
13:08:50 <ludde> if you input "abcd" it gives you "a", "ab", "abc", "abcd", "b", "c", "d", "bcd", "bc", "cd" etc ?
13:09:34 <ski> Main> sublists "abcd"
13:09:34 <ski> ["","d","c","cd","b","bc","bcd","a","ab","abc","abcd"]
13:09:39 <ski> yes
13:09:47 <ludde> hm okay.
13:10:00 <ludde> i do that too, but i just use tails
13:10:12 <ludde> so my such list is much smaller
13:10:27 <ski> i began by making a bad exhaustive search with no pruning, and then improved some on that
13:10:30 <ludde> then i have a base case that covers when the pattern is empty but the text is not
13:10:41 <ludde> in the pattern finding code
13:11:02 <ski> i haven't really thought much over the sublist-generating part
13:11:27 <ski> perhaps it is much better to just use the tails
13:12:03 <ski> its the align :: String -> String -> (Alignment,Score) i've worked on
13:12:16 <ludde> hm okay
13:12:25 <ludde> i didn't really approach the problem that way at all
13:12:42 <ludde> I just have a recursion that recurses 3 times, once for letter/letter, once for letter/pad and once for pad/letter
13:12:44 <ski> align doesn't which of its arguments are the pattern and which is the substring
13:12:46 <ludde> then it remembers the best one
13:12:51 <ludde> when it reaches a leaf
13:13:14 <ski> i have the 3-choice structure as well (inside align)
13:13:59 <ski> but i though that, at least initially, it would be easier with symmetric arguments to align
13:16:35 <SyntaxPolice> Igloo: hey
13:17:09 <SyntaxPolice> keverets: hm. sounds wrong. should build depend, I think.
13:19:17 <SyntaxPolice> is this causing a problem?
13:19:31 <Igloo> Shouldn't even build-dep if debian-devel is to be believed  :-)
13:21:18 <SyntaxPolice> what do you mean?
13:21:28 * SyntaxPolice thinks that this was not his fault
13:21:38 <SyntaxPolice> I don't remember ever adding this, but maybe I did...
13:25:06 <keverets> not really a problem, but requires installing more build stuff than necessary on a workstation.
13:25:56 <SyntaxPolice> right. Just wondering the priority of it.
13:26:21 <SyntaxPolice> there are some low-priority bugs that are fixed in hugs-cvs and I'm waiting a bit to see if there's going to be a release soon.
13:26:29 <SyntaxPolice> keverets: care to file a bug so I don't forget? :)
13:26:40 <keverets> SyntaxPolice: no problem.
13:26:44 <SyntaxPolice> thanks.
13:51:42 <ski> hmm
13:52:19 <ski> shouldn't  (`notElem` ["-t","-tf"])  be the same as (\s -> s `notElem` ["-t","-tf"])  ?
13:53:00 <ski> oh, nevermind
13:53:07 <ski> i forgot to save :)
13:54:01 <ludde> ski: making an advanced command line parser eh?
13:54:53 <ski> somewhat advanced, yeah
16:11:58 <Xcalibor> time for bed
16:12:02 <Xcalibor> thanks for the helkp!
16:12:05 <ski> mm
16:12:07 <ski> soon
17:14:50 <ski> @prelude foldl'
17:15:25 <ski> doh
17:15:37 <Smerdyakov> @prelude doh
17:15:56 <ski> @fortune
17:16:21 <ski> has lambdabot hung or something ?
17:16:27 <ski> @yow
17:16:35 <ski> @hello
17:16:56 <ski> @seen lambdabot
17:17:03 <Smerdyakov> @prelude map
17:22:59 <lambdabot> ERROR: timeout
17:22:59 <lambdabot> Action: connect
17:22:59 <lambdabot> Reason: Connection timed out
17:26:08 <lambdabot> ERROR: timeout
17:26:08 <lambdabot> Action: connect
17:26:08 <lambdabot> Reason: Connection timed out
17:26:08 <lambdabot> PENGUINICITY!!
17:26:09 <lambdabot> Toes, knees, NIPPLES.  Toes, knees, nipples, KNUCKLES...
17:26:11 <lambdabot>  Nipples, dimples, knuckles, NICKLES, wrinkles, pimples!!
17:26:13 <lambdabot>  I don't like FRANK SINATRA or his CHILDREN.
17:26:15 <lambdabot> Hello world. 
17:26:17 <lambdabot> Yes, I'm here
17:26:29 <Riastradh> Heh.
17:26:49 <ski> lambdabot : yes now you are here
17:27:00 <ski> @hello
17:27:51 * ski thinks lambdabot take a long time to think out what to answer
17:28:07 <Darius> @prelude is part of the Dict module
17:28:30 <Darius> tmoertel I believe has the Haskell prelude in Dict form and is serving
17:28:36 <Darius> it
17:28:36 <ski> so ?  is it temporarily disabled/removed ?
17:29:02 <Darius> The problem is probably tmoertel's site is down
17:29:11 <ski> hmm, ok
17:29:17 <lambdabot> ERROR: timeout
17:29:17 <lambdabot> Action: connect
17:29:17 <lambdabot> Reason: Connection timed out
17:29:17 <lambdabot> Hello world. 
17:30:04 <Darius> dict.moertel.com port 2628
17:30:20 <ski> does lambdabot have direct access to the Dict module, or does it have to connect over the net to access it ?
17:31:28 <keverets> @yow
17:32:17 <Darius> It has access to the module, the dictionaries are accessed over the internet, most from dict.org.
17:32:25 <ski> aha,ok
17:33:20 <ski> but it seemed to lag when answering @seen lambdabot  also, was thay because it was trying to connect to the dict server ?
17:33:53 <Darius> lambdabot is for the most part single-threaded.
17:34:09 <ski> i guessed so
17:34:44 <Darius> No one's bothered changing it yet, though it has been thought of.
17:35:07 <ski> mhm
17:38:53 <Darius> It wouldn't be too hard to make it more concurrent.  Also since the modules output through IO rather than returning a string to send, each module can fork threads itself.
17:39:53 <Darius> ircPrivmsg might need to be altered to be atomic though, if it isn't already.
17:41:04 <ski> mm
17:48:11 <lambdabot> ERROR: timeout
17:48:11 <lambdabot> Action: connect
17:48:11 <lambdabot> Reason: Connection timed outERROR: timeout
17:48:11 <lambdabot> Action: connect
17:48:11 <lambdabot> Reason: Connection timed outERROR: timeout
17:48:12 <lambdabot> Action: connect
17:48:14 <lambdabot> Reason: Connection timed outERROR: timeout
17:48:16 <lambdabot> Action: connect
17:48:18 <lambdabot> Reason: Connection timed outERROR: timeout
17:48:20 <lambdabot> [4 @more lines]
17:48:24 <lambdabot> ...PENGUINS are floating by...
17:48:30 * Pseudonym woohoos
17:48:38 <Pseudonym> Lambdabot is having fun.
17:49:16 * ski lol
17:52:23 <keverets> does lambdabot keep retrying?
17:52:34 <Pseudonym> I think it was having problems with its database.
17:52:39 <Pseudonym> @yow
17:52:41 <lambdabot> Why is it that when you DIE, you can't take your
17:52:41 <lambdabot>  HOME ENTERTAINMENT CENTER with you??
17:52:44 <Pseudonym> All better now.
17:52:53 <ski> @prelude foldl'
17:53:16 <ski> this still seems to lag ..
17:53:25 <Pseudonym> Hmmmm... OK
17:53:36 <Pseudonym> Probably yow isn't served out of the database.
17:56:03 <lambdabot> ERROR: timeout
17:56:03 <lambdabot> Action: connect
17:56:03 <lambdabot> Reason: Connection timed out
17:56:32 <ski> or perhaps not the same database, at least
17:56:34 <Darius> @listcommands system
17:56:34 <lambdabot> Module system provides the following commands: ["listchans","listmodules","listcommands","join","leave","part","msg","quit","reconnect","echo"]
17:57:54 <Darius>  @yow uses emacs I think, and @fortune the fortune command, @fact does use a local database, and any of the commands in @dict ask dict servers.
17:58:00 <Darius> @listchans
17:58:01 <lambdabot> I am on these channels: ["#Haskell","#Zope","#haskell","#haskell.se","#joy","#webwitches","#widian"]
17:59:06 <Igloo> Uses emacs?!
18:00:33 <Darius> Looking at the source it gets the lines itself
18:01:13 <Pseudonym> Well it doesn't call emacs exactly.
18:01:32 <Darius> It might have asked emacs originally way back when.
18:01:48 <Pseudonym> Seems more trouble that it's potentially worth.
18:09:50 <Darius> Well, looking at the initial versions of Fortune and Yow, they parse it, so I must have imagined that.
18:36:33 <Smerdyakov> Does anyone know how to get bold math symbols in LaTeX?
18:37:52 <Pseudonym> \boldmath
18:38:09 <Pseudonym> It's tricky to use, though.
18:38:27 <Pseudonym> \(x + \mbox{\boldmath $\nabla f$} = 0\)
18:39:06 <Pseudonym> It can also generate spurious warnings.
18:39:19 <Pseudonym> Do you have a copy of Lamport?
18:40:22 <Smerdyakov> No.
18:40:33 * Pseudonym nods
18:40:36 <Pseudonym> I'll quote it then:
18:41:12 <Pseudonym> The \boldmath command generates a warning if any font (size and style of type) that you _might_ use in a formula isn't available.
18:41:44 <Smerdyakov> Tehe.
18:41:47 <Pseudonym> For example, it might issue a warning that LaTeX does not have the font needed to produce a bold sans serif subsubscript, even though you never dreamed of producing such a subsubscript.
18:42:00 <Pseudonym> You should examine your output to make sure that the fonts you do use are the right ones.
18:42:02 <Smerdyakov> Well, at least it doesn't try to pry into my dreams.
18:42:08 * Pseudonym laughs
18:42:10 <Pseudonym> Actually, it can.
18:43:24 <Pseudonym> This reminds me of a Woody Allen joke about when he was caught cheating on his metaphysics exam.  He was caught looking into the soul of the person next to him.
18:44:20 <Smerdyakov> Wow. A bold equals sign. This makes me so hot/
18:53:26 <Smerdyakov> Noooow... how can I draw a character on a higher baseline within a line?
18:53:50 <Pseudonym> Any particular character?
18:53:51 <Smerdyakov> I'm trying to make an obscene kind of special bracket.
18:54:36 <Pseudonym> And superscript isn't appropriate?
18:54:54 <Smerdyakov> I want it to be touching a \langle
18:54:59 <Smerdyakov> A - touch it, that is.
18:55:03 <Smerdyakov> Elevated a bit.
18:55:37 <Smerdyakov> Argh... "TeX capacity exceeded" :D
18:57:06 <Smerdyakov> Oh. That was something else.
18:59:36 <Pseudonym> \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX}
18:59:41 <Pseudonym> That might help you.
19:00:32 <Smerdyakov> What does that define? :\
19:00:38 <Pseudonym> The \TeX command.
19:00:47 <Pseudonym> Note the \lower
19:01:11 <Smerdyakov> Oh
19:01:25 <Pseudonym> Oh, actually, there's \raisebox too.
19:01:28 <Smerdyakov> Well, I have something ugly using superscript and \hspace.
19:01:33 <Pseudonym> \raisebox{.6ex}{foo}
19:01:34 <Smerdyakov> I think it's good enough. :-)
19:02:11 <Pseudonym> You should really get a copy of Lamport.
19:02:19 <Pseudonym> And the LaTeX Companion while you're at it.
19:06:47 <Smerdyakov> I have "A Guide to LaTeX."
19:42:00 <reffie> http://douglas.min.net/ha-ha-isabel-guy.jpg
19:42:03 <reffie> :D
