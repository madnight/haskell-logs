03:53:15 <harsha123> shapr: hi
05:20:43 <shapr> y0
05:21:54 <meep_> hi shapr
05:22:14 <shapr> hi meep_ 
05:22:17 <shapr> how's life?
05:22:24 <harsha123> shapr: hi
05:22:46 <meep_> it's ok, i'm starting uni in a week :D
05:23:21 <shapr> hi harsha123 
05:23:30 <harsha123> shapr: hi.
05:23:38 <shapr> meep_: uni is fun
05:23:53 <meep_> glad to hear it ;)
05:23:53 <harsha123> shapr: i was wondering  if i can write a email filter with haskell..
05:24:00 <harsha123> shapr: howz the idea?
05:24:08 <shapr> sure, email filter isn't too hard
05:24:32 <harsha123> shapr: atleast a good start..
05:24:47 <harsha123> shapr: what do ya say ? :)
05:25:01 <shapr> yah, I'd suggest you use the RFC2822 libraries in the Unstable module of the haskell-libs cvs tree
05:25:28 <harsha123> shapr: was that for me?
05:25:53 <shapr> yes
05:26:15 <harsha123> shapr:  i stialled ghc 5.0 is that fine?
05:26:21 <shapr> I'd suggest 6.0
05:26:38 <harsha123> shapr: but that what i got on a apt-get
05:26:50 <harsha123> i did apt-get ghc
05:26:56 <harsha123> i did apt-get install ghc
05:26:58 <shapr> are you using debian stable?
05:27:07 <harsha123> hmm unstable
05:27:22 <shapr> try apt-get install ghc6
05:27:40 <harsha123> unstable main to be precise ..
05:27:47 <harsha123> ok ill try that.. brb
05:28:27 <harsha123> shapr: omg it requires 60MB
05:28:51 <shapr> happily, it has some useful features :-)
05:29:16 <harsha123> shapr: yes, if you say.. :)
05:29:21 <shapr> heh
05:34:20 <harsha123> shapr: have you checked out the apt bot in the #debian channel
05:35:47 <shapr> yes, I've seen it.
05:36:03 <shapr> do you think it has some features that would be good in lambdabot?
05:36:12 <harsha123> shapr: :))
05:36:22 <harsha123> shapr:  i was waiting for that question..
05:37:11 <harsha123> shapr: maybe i can observe it more.. and tell ya
05:38:13 <harsha123> brb guys..
05:41:12 <shapr> ok
05:49:50 * shapr goes off to ride his unicycle
06:13:54 * harsha123 is back
11:59:24 <RibRib> hi
11:59:41 <RibRib> how do i define data type Product?
12:00:52 <Smerdyakov> type Product = Int
12:03:22 <RibRib> what if they are Book: the title and author 
12:03:22 <RibRib> Video: the title 
12:03:22 <RibRib> CD: the title, artist, and number of tracks 
12:04:24 <RibRib> would it be type product = Book Video CD
12:04:53 <RibRib> then make other date types for book, video and CD
12:04:57 <RibRib> ?
12:06:02 <smkl> RibRib: no ... why do you need this?
12:06:47 <Cale> data Product = Book String String | Video String | CD String String Int
12:07:13 <Cale> Is that what you mean?
12:07:52 <RibRib> im going through my Lab exercises for uni
12:11:19 <whee> you could handle it a lot of different ways
12:11:33 <whee> that would be one way
12:19:51 <RibRib> The module List is part of the Haskell standard libraries and you can import it without having to define the module. Apply nub to lists like [1,2,1,1] to see what it does, before using it. 
12:20:26 <RibRib> so do i just type nub [1,2,1,1] on ghci?
12:34:48 <Vincenz> Are lists multityped in Haskell?
12:37:00 <Cale> what do you mean by multityped?
12:43:11 <Vincenz> can you have more than one type in one list
12:44:23 <Smerdyakov> The way you write a list type should be a big hint..
12:44:42 <Riastradh> Lists are homogenous.
12:50:22 * Vincenz nod
12:50:28 * Vincenz nods, "Thank you"
13:08:21 <isomer> hehe... Enterprise Fava Beans.  Cheaper and better for you.  (And don't forget Enterprise Aubergines).
13:11:17 * Vincenz grins
