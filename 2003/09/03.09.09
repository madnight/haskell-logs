00:46:52 <Pseudonym> \/quit
03:20:38 <shapr> hrm
03:26:04 <kosmikus> mrh
03:37:00 * Heffalump appears
04:47:55 <ski> RibRib : hi
04:48:38 <RibRib> hello
04:48:48 <RibRib> hows it goin
04:48:53 <ski> fine
06:10:01 * shapr bounces
06:10:05 <shapr> I passed!
06:10:07 <shapr> yay!
06:14:09 <andersca> wooo
06:14:11 <andersca> bra shapr!
06:14:22 * shapr hoppar mycket
06:16:49 <ski> shapr : you passed what ?
06:17:05 <shapr> SFI examen!
06:17:10 <shapr> Swedish for Invaders
06:17:29 <shapr> Svenska för Invandråre
06:18:02 <Igloo> Congrats  :-)
06:18:10 * shapr dances happily
06:20:16 <ski> aha
06:20:27 <ski> gratulerar !
06:23:17 <ludde> it's "Invandrare" though :)
06:25:25 <Lor> Kanske vi borde skriva svenska här om shapr behöver mer övning? :)
06:25:39 <andersca> Lor: vi har haskell.se annars
06:25:39 <ibid> nej tack :)
06:25:39 <ski> inget problem
06:25:43 <andersca> Lor: vi har #haskell.se annars
06:26:37 <Lor> Hm, a #haskell.fi would probably only have three residents... bah.
06:27:28 <ibid> Lor: #tie328@ircnet ;)
06:27:56 <Lor> Ah, your course?
06:28:00 <ibid> yes
06:28:04 <ibid> key fo2003
06:28:15 <ibid> (finnish only there, please:)
06:30:31 <isomer> congrats, shapr!
06:37:13 <SyntaxPolice> go shapr!
06:37:32 * Igloo tries to remember where I've seen papers about bolting type checking onto LISP/scheme
06:37:44 <Igloo> Oh, Syn, did you speak to Brent about nhc et al?
06:39:01 <SyntaxPolice> Igloo: no. I'm starting to think that I won't have time for it :( I really want to get Library Infrastructure and Apt-Secure out the door.  I could maybe do it in a month, apt secure should be mostly done by then.
06:39:10 <Darius> The paper on Complete Type Inferencing adds a type system to Scheme and there's MrSpidey
06:39:26 <Igloo> Ah, OK
06:39:27 <SyntaxPolice> Igloo: what would you think of taking them over for a month, then I'll take them over ?
06:39:36 <SyntaxPolice> just a temporary thing
06:40:29 <Igloo> If I have some time I'll see if I can get nhc to build; that seems like a good first step  :-)
06:42:04 <SyntaxPolice> yeah :)
06:42:33 <SyntaxPolice> thing is, I really want to take over these packages. I just have too many free software things to do ATM :(
06:45:05 <Igloo> IKWYM
06:47:07 <SyntaxPolice> so we'll see; if nothing happens, I'll take it over in a month. If you get it, I'll be glad to take it off your hands in a month.
07:38:31 * earthy thinks... 16+12==04am
08:19:49 <ski> hmm, does someone know of a link to the possible problem (unsafeness IIRC) with comonads in haskell ?
08:22:12 <Heffalump> it was on the mailing list ages ago
08:22:31 <ski> k
08:24:07 <ski> found it
08:24:23 * esap is also interested.
08:24:36 <ski> esap : http://www.mail-archive.com/haskell-cafe@haskell.org/msg02401.html
08:25:14 <ski> esap : also http://haskell.org/hawiki/CoMonad
08:26:00 <esap> ok, I now remember it [I actually commented on the wiki Comonad page]
08:26:27 <esap> I think what you should do is OI Handle -> IO Char
08:26:30 <SyntaxPolice> CineEu: so can you explain your problem again?
08:27:10 <CineEu> the source.. validate the "layout" of the codes...
08:27:24 <CineEu> but the source is modified...
08:27:28 <ski> i think i see that state-in-context is dual to the state monad, but how do one access the state, e.g. read and write ?
08:27:37 <CineEu> in order to find out the mistakes in it
08:27:52 <CineEu> so i found de mistake about the lengh check...
08:28:03 <hdaume> morning all
08:28:08 <andersca> hey hal
08:28:11 <andersca> haskell-hal
08:28:20 <hdaume> ?
08:28:22 <CineEu> then i know the lenght... so i filtered all with the lenght
08:28:28 <SyntaxPolice> CineEu: have you updated the source you're working on?
08:28:37 <SyntaxPolice> have you been able to get it to compile?
08:29:11 <ski> esap : also i'm suspicious about the (.>>) operator, i don't see how it is dual to any monad operation ..
08:29:56 <CineEu> no.. coze there must be another mistake in the source... i used another program that made by me .. based on the rules that i deducted from the source
08:29:59 <esap> ski: true. I think what needs to be understood is the connection between OI, 'ordinary values' and IO.
08:30:27 <ski> esap : i suspect that the paper writer thought it was dual to (>>) for monads, but IMO it is not
08:30:42 <esap> ski: yes, .>> is not dual to >>.
08:30:51 <ski> esap : >>. ?
08:31:01 <SyntaxPolice> CineEu: did that other program work, and you want a haskell version?
08:31:46 <esap> ski: oh, I mean (>>).
08:31:46 <CineEu> not necessary a haskell.. i did it with delphi
08:31:55 <ski> esap : ok
08:32:03 <CineEu> important for me is to discover the mistakes from the source
08:32:20 <CineEu> and based on a corected source to get the good code
08:32:32 <CineEu> but there in the code3 :: parser
08:32:35 <SyntaxPolice> CineEu: I see.  It would help greatly to know where the source came from, and what library its supposed to be using.
08:32:42 <SyntaxPolice> do you know if it uses parsec?
08:32:55 <esap> ski: anything that is dual to (>>) has to have _|_ in its type.
08:33:06 <ski> esap : i assume a dual to >> would have a type something like  w a -> Cont (w a) -> w b  where Cont a is a continuation accepting a
08:33:20 <ski> esap : that's what i thought
08:33:34 <CineEu> no... that was that is all i have... coze there is a contest..
08:34:23 <Darius> It looks like ParseLib or perhaps some homegrown parsing library.  Parsec uses <|> not +++
08:34:34 <SyntaxPolice> does anyone know if (+++) is part of another parsing library
08:34:35 <ski> esap : andrew bromage's prog used .>> , perhaps the problems go away if we just remove .>> ...
08:34:35 <SyntaxPolice> yeah
08:34:42 <CineEu> that was all i get.. but some friends succed .. 
08:34:55 <CineEu> maybe that +++ is a intentionaly mistake
08:35:22 <SyntaxPolice> CineEu: so are you going to share your winnings with the channel ;)
08:35:28 <CineEu> what i still know is that it must return the "success"
08:36:04 <CineEu> i'll point and credit the channel :)
08:36:15 <esap> ski: maybe. Another thought is that in monads, you usually use things like readChar :: Handle -> IO Char. A dual to "a -> m b" should also dualize '->', which is an interesting problem.
08:37:31 <ski> esap : hmm, return :: a -> m a is dualised to coreturn :: w a -> a  right ?  here the -> is not dualised, no ?
08:38:43 <esap> ski: well it depends on how you interpret the -> in a -> m a. You could think it's a category-theory arrow (so duality will just switch its direction). Or you could think of it as something created by currying (which is an "object" in category theory sense).
08:39:05 <ski> esap : then we get co-exponentials, right ?
08:39:11 <esap> ski: right.
08:40:00 <ski> esap : i used that to (sort of, handwavingly) see that state-in-context is dual to state monad, quite easy ..
08:40:43 <esap> ski: yes. But that is only due to the dualization of 'state', which is kind of interesting in itself.
08:41:05 <ski> esap : i don't understand
08:41:22 <esap> ski: what is the dual of a reference to a stateful object?
08:41:53 <ski> esap : you talking ST monad-like references ?
08:42:08 <esap> ski: yes.
08:42:16 <ski> esap : i was thinking of the single monolithic state monad
08:42:19 <ski> esap : ok
08:42:55 <ski> esap : well, then i don't know (havent thought on it)
08:43:58 <ski> esap : do you know of any paper that talks more about state-in-context and its primitive ops ?
08:45:04 <esap> ski: no, but I have a theory about how state should work generally.
08:45:12 <esap> ski: including the duality.
08:45:37 <ski> esap : and i can't use this dualising in the same way for other monads for some reason ??
08:46:06 <esap> ski: of course you can use it for other monads as well.
08:46:39 <ski> esap : i thought so, but some monads give hard-to-understand comonad types :(
08:47:25 <esap> ski: The point is, you divide the system into "layers", ordered from up to down, such that upper monads _depend_ on the capabilities of lower monads (and IO monad would be the lowest in this scheme).
08:47:30 <SyntaxPolice> yeah, its parselib
08:47:45 <ski> esap : hmm
08:47:51 <esap> ski: The dependency relation is the ordering between those layers.
08:48:21 <ski> esap : mhm
08:49:17 <esap> ski: Then, in the same thing, you have functions whose go from left-to-right, with inputs being in left and outputs in right, and data flows from left to right.
08:49:30 <ski> esap : k
08:50:09 <esap> ski: Then duality is the symmetry between left-to-right and up-to-down.
08:50:47 <ski> esap : is this "diagram" a such from category theory ?
08:51:25 <esap> ski: yes.
08:51:26 <ski> esap : like a commuting diagram ?
08:51:30 <ski> esap : ok
08:52:07 <esap> ski: the 'return' operation gives a way to turn values from "value monad" to whatever monad you use.
08:52:27 <esap> ski: that is, it's the primitive up-to-down arrow in that picture.
08:52:33 <ski> esap : i was thinking along lines of  (a type constructor of 1 arg) m is dual to w  if  not (m a) = w (not a)  and  not (w a) = m (not a)
08:52:53 <esap> ski: dual of not is not not.
08:52:59 <ski> esap : yes
08:53:52 <esap> ski: I've thought it from the point of view of  "dual of A -> B" is "B \\ A", where \\ is subtraction.
08:54:23 <ski> esap : some have called it "context"
08:54:45 <esap> ski: hmm..
08:54:47 <ski> esap : can be written as  B >- A
08:55:15 <Darius> esap: have you seen this paper http://www.cs.uu.nl/research/techreps/UU-CS-2002-030.html ?  It seems (very roughly) related.
08:55:27 <ski> esap : that symbol looks nice and symmetric in a sequent deduction system
08:55:32 <esap> ski: But that one satisfies the rule: Ctx \\ A |- B   ==>   Ctx |- A \/ B
08:55:45 <Darius> well, less "related" than "on-topic"
08:56:05 <ski> esap : no i haven't seen it
08:56:28 <esap> ski: that's from 'Crolard: Subtractive logic'.
08:56:46 <ski> Darius & esap : sorry, i mixed you up
08:57:43 <Darius> esap: what's the nuts and bolts description of 'B \\ A' for a computer program?
08:58:17 <ski> Darius : a value of type B and a continuation of type A  (i think)
08:58:46 <ski> Darius : perhaps it depends if the lang is cbv or cbn
08:59:53 <esap> darius: B \\ A is a context like B but where if given a value of type A, you can 'exit'.
09:00:15 <Lor> How's that different from B, A->_|_ ?
09:00:44 <ski> esap : but (at least in a linear logic variant) you must use both, no ?
09:01:27 <esap> ski: yes, I guess so.
09:02:39 <Darius> ski & esap: okay, I was making sure it was the same (or similar) thing as the SLC's coexponential types (notated A <- B)
09:03:00 <esap> lor: I think the difference is that B\\A means that somewhere 'in enclosing scope' there must be some target point where the jump will go to. In A -> _|_, the target need not be in the enclosing scope.
09:03:01 <ski> Darius : yes it is
09:03:32 <esap> lor: it's not easy to build 'first-class' B\\A objects.
09:03:52 <Lor> So it's kind of like a local continuation?
09:03:53 <ski> esap : in SLC, it is quite easy
09:04:19 <ski> esap : (IIRC i.e.)
09:05:30 <esap> lor: B\\A is usually part of the context, because the rule to build that is:   ctx |- f : A\/B  ==> ctx \\ x:A |- control x.f : B
09:06:24 <esap> lor: oh sorry, got it backwards. That is the control application, not control operation.
09:06:46 <esap> lor: ctx |- f : A\/B  ==> ctx \\ x:A |- [x]f : B
09:07:10 <esap> lor: ctx \\ x : A |- y : B  ==> ctx |- control x.y : A \/ B
09:07:21 <Lor> That looks very much like call/cc.
09:07:37 <esap> lor: it is very close. But the typing is different.
09:07:57 <ski> esap : is \/ object or meta disjunction ?
09:08:54 <esap> ski: object.   A\/B is a type  (basically Either A B).
09:09:06 <ski> esap : ans is "ctx \\ x : A" set difference ?  or is \\ an object connective here ??
09:09:41 <esap> ski: set difference with x bound. B\\(x:A) binds x.
09:09:56 <Lor> control x . y == let/cc k . let x = Right · k in Left y  ?
09:10:16 <Lor> Uh, k · Right, not Right · k.
09:10:29 <Darius> With my reimplementation of SLC in Haskell, call/cc (as I define it) has type [[A->0]->A]->A whereas control has type [[A->0]->0]->A
09:10:35 <ski> esap : in hugo herbelins "the duality of computation" he uses meta-disjuction there, and >- (he writes - ) is a object connective
09:11:11 <ski> Darius : control is double-negation-elimination sort of then
09:11:57 <Darius> indeed
09:13:09 <ski> esap : so it seems not to be exactly similar systems ..
09:14:05 <Darius> Griffin '90 "Formulae as Types Notion of Control"
09:14:09 <esap> ski: it's possible to turn the above system into double-negation thing by setting B = _|_ in control operator's rule.
09:15:19 <ski> esap : do you have any paper referenc for this system using \\ , sortof hard to read it in plain ascii on one line ..
09:16:05 <ski> esap : also hugo herbelins "the duality of computation" can be found at http://coq.inria.fr/~herbelin/publis-eng.html in case you haven't seen it before ..
09:16:30 <esap> ski: yes, http://www.kotiposti.net/epulkkin/summary.dvi  [but please be careful, might have errors]
09:17:13 <ski> esap : thanks
09:19:07 <esap> ski: the whole thing is based on a supposed adjunction _ \\ A -| A \/ _
09:19:35 <esap> ski: which would be the symmetric counterpart to _ /\ A -| A => _
09:19:43 <ski> esap : unfortunately, i dont know what an adjunction is :(
09:20:32 <esap> ski: see Fokkinga,Meertens:Adjunctions.
09:20:44 <ski> esap : book ? paper ?
09:21:00 <esap> ski: paper (citeseer has it)
09:21:21 <ski> esap : thanks
09:21:28 <esap> ski: http://citeseer.nj.nec.com/fokkinga93adjunction.html
09:23:27 <ski> esap : i'm not used to inferences with several judgements on the bottom, is it just a shorthand ?
09:23:50 <ski> esap : like and-E (in the dvi i.e)
09:24:43 <esap> ski: yes. It's basically a shorthand [and it also nicely shows the symmetry :-)]
09:24:55 <SyntaxPolice> I was able to compile CineEu's code and run it on his example file.  He did mention to me that it is for a contest within a class, and I gave him some good advice about how to proceed.  Has he asked from help from others besides Darius and hdaume?
09:25:27 <ski> esap : also, the \/ to the left of |- in the upper part of or-I, is it object or meta ?
09:26:52 <esap> ski: the \/ and /\ are always operators on types in that. that is, if A,B are types, then A\/B is a type.
09:27:08 <ski> esap : also, i'm not sure how to interpret or-E ...
09:27:29 <ski> esap : ok, so gamma and delta are types then, and not environments
09:28:14 <ski> esap : if so, then or-E is obvious
09:28:15 <esap> ski: well in category theory based things, types and environments are almost the same thing.
09:28:44 <esap> ski: In a sense, a type is a collection of values. A context is a collection of bindings of variables (with values).
09:28:54 <ski> esap : i know they seem to objectify :) envs
09:29:12 <esap> ski: I've used the same convention.
09:29:25 <esap> maybe my notation is non-standard :-)
09:30:44 <ski> esap : i don't know. i really haven't learned anything about type-systems and category theory in fomal courses, just trying to absorb the meaning of cool-looking papers :)
09:31:25 <esap> ski: heh, that's how I learned it.
09:31:42 <ski> esap : then i'm in good company :)
09:32:00 <Darius> esap: have you read "Declarative Continuations and Categorical Duality"?
09:32:08 <ski> esap : now if only i could figure out how to make Xdvi to print it :(
09:32:23 <ski> Darius : by Hayo Thielecke ??
09:32:24 <esap> darius: yes, that was where I got the motivation to duality in any case.
09:32:38 <esap> ski: by Filinski.
09:32:44 <Darius> Filinski
09:33:18 <ski> i read a paper by Hayo which introduced SLC and SCL, IIRC
09:33:38 <ski> not sure if i have read filinskis above paper
09:34:19 <esap> ski: it's Filinski's Master's thesis [very good at that, I'd say!]
09:34:32 <Darius> ?  I wasn't aware of SLC or SCL even being mentioned in anything other than the above paper.
09:35:07 <ski> Darius : sorry, i mixed them up :) this of course means i have read it yes :)
09:37:14 <ski> i was thinking of "Categorical Structure of Continuation Passing Style" by Hayo Thielecke at e.g. http://www.lfcs.informatics.ed.ac.uk/reports/97/ECS-LFCS-97-376/
09:39:04 <ski> well, i'll have to go now
09:39:14 <ski> bye
09:39:16 <esap> see you later.
09:39:21 <ski> yes
10:36:59 <shapr> oy
10:37:23 <SyntaxPolice> hi shapr
10:38:24 * whee sgniob
10:38:50 * shapr secnuob
11:00:16 <Xcalibor> hi
11:02:24 <SyntaxPolice> hi Xcalibor
11:13:49 <Xcalibor> hi there :)
11:29:55 <whee> awesome, got a job :))
11:32:36 <SyntaxPolice> whee: cool!
11:41:19 <Xcalibor> whee: cool... how is it?
11:44:40 <whee> Xcalibor: it's doing C++ development with multiband radios (running QNX), it should be fun
11:44:44 <whee> I start monday
11:45:07 <Xcalibor> whee: sounds like fun, indeed :)
11:45:52 <Xcalibor> whee: well, congratulations :)   is it a fixed-time job or you are employed for an undefined period of time?
11:46:05 <Xcalibor> most jobs in spain are of the temporary kind
12:00:38 <Xcalibor> according to /. today's 1st computer bug anniversary... :)
12:03:10 <whee> Xcalibor: it's just a three month internship
12:03:58 <Xcalibor> whee: oh... well, with a bit of luck they will extend a new offer after this time... :)
12:04:52 <whee> we have blocks in three month quarters here, so after this internship I take courses for three months, then another internship, then courses and so on until I have enough credits
12:05:03 <whee> if I get lucky I'll be able to get another job with the company, yes
12:05:17 <Xcalibor> ah, curious system...
12:06:07 <whee> I think this works out pretty well, because I'll have some job experience after I graduate
12:06:15 <whee> it won't just be running around trying to find a job with just a degree
12:08:25 <whee> now I don't know what to do with myself until monday :)
12:12:21 <Xcalibor> whee: mmm... go and get Functional C++ now :-)
12:12:51 <Xcalibor> if you are lucky enough, you'll have a modern C++ compiler with STL support, and FC++ will make your life a lot easier and funnier...
12:13:23 <whee> I don't think I'll be using that on these types of systems :P
12:13:35 <Xcalibor> it gives you lots of interesting features and most of the Haskell Prelude
12:13:42 <whee> surely those things have higher memory and cpu requirements
12:13:46 <Xcalibor> whee: well, you never know ... 
12:21:24 <Xcalibor> well, the STL has big requirements on the compilation machine, you you'll surely be doing crosscompilings, so it shouldn't be a problem... as for memory, the STL is pretty good on memory requirements, fast and clean
12:21:40 <Xcalibor> but you'll know soon enough... go to the cinema in the meantime :-)
12:22:10 <whee> heh
12:22:25 <whee> I just don't want to write some code using FC++ and have it unmaintainable by them when I leave
12:22:36 <whee> since I doubt they'd be used to using it
12:24:47 <Xcalibor> that's a very good attitude, but if everybody thinks like that, there won't be innovation anymore
12:25:11 <whee> well, it's just not my job to do that sort of thing; it's just an internship :P
12:26:05 <whee> if this were a long term project of mine, then I'd consider it, but it's already fairly late in this product's development cycle and I don't think anything really new would integrate well
12:34:09 <Xcalibor> in those conditions, you are probably right...
12:35:43 <yazirian> maintainability is the single most important consideration in software development for any project which serves a purpose beyond prototyping
12:36:06 <yazirian> which, naturally, makes me wonder why they would choose C++ :)
12:36:07 <Joopdod> Is there anyone that has popupwindow.h from wxWindows for me?
15:16:15 <Tomasso> does anyone know smth about formal languages and automata theory?
15:17:09 <isomer> a bit, yes
15:17:45 <Tomasso> hmmh can a type 3 grammar be generated by type 2 productions?
15:18:26 <Tomasso> sorry, a type 3 language
15:19:00 <isomer> let me think for a second...
15:19:11 <isomer> you mean chomsky type 2 or 3?
15:19:13 <Tomasso> ok
15:19:18 <Tomasso> right :D
15:20:05 <isomer> i think yes, because a type 2 grammar is a subset of a type 3 grammar. so you will generate a very boring type 3 language
15:20:32 <kosmikus> ??
15:20:43 <Tomasso> your justification seems to be right
15:20:59 <kosmikus> type 3 is a subset of type 2, right?
15:21:04 <isomer> i'm digging this out of my memory from a long time ago, so you should probably check it
15:21:15 <Tomasso> hmhm yeah, type 3 is subset of type 2
15:21:48 <kosmikus> so yes is indeed the right answer
15:22:02 <Tomasso> then if i have type 2 productions i cannot assure that it generates a type 2 language
15:22:02 <kosmikus> type 3 are just regexps
15:22:07 <kosmikus> type 2 are context-free
15:22:27 <Tomasso> types 3 and 2 are context-free 
15:22:53 <kosmikus> yes, because "type 3 `subset` type 2" :)
15:23:19 <Tomasso> then i should use the pumping lemma to show that the language generated is not type 3
15:23:31 <kosmikus> I don't understand your remark about ensuring that you generate a type 2 language
15:23:58 <kosmikus> every context-free grammar generates a context-free, i.e. type 2 language
15:24:08 <kosmikus> it might be type 3, but what's the problem?
15:24:25 <Tomasso> hhm
15:25:03 <Tomasso> then if it is not type 3 and all productions are context free, it is type 2
15:25:22 <kosmikus> it is type 2 in any case
15:25:24 <Tomasso> (i like this subject) its powerful ehheehhehe
15:25:51 <kosmikus> *all* type 3 languages are *also* type 2 languages
15:26:05 <Tomasso> YES
15:26:17 <Tomasso> Thank yOU! :D
15:26:33 <kosmikus> you're welcome
15:26:38 <kosmikus> what are you trying to do?
15:26:59 <Tomasso> its an exam i had, and i did it wrong
15:27:12 <isomer> shitty
15:27:17 <Tomasso> so the next date, tomorrow ill do it well
15:27:38 <isomer> compiler construction course, or math course?
15:27:41 <Tomasso> i used the pumping lemma to show that a language is regular
15:27:46 <Tomasso> hahahahha
15:27:49 <Tomasso> what a mistake
15:28:26 <Tomasso> isomer: formal languages and automata theory (just sintax checkers for now)
15:28:57 <Tomasso> and functional languages are useful to implement this stuff right?
15:28:59 <isomer> enjoying it?
15:29:14 * isomer did lots of work building parser constructors in a previous life
15:29:17 <Tomasso> im currently studying functional programming in my faculty
15:29:26 <kosmikus> Tomasso: yes, functional languages are useful for such things
15:29:30 <Tomasso> hahahah reencarnation :D
15:29:47 <Tomasso> im learning curryfication now
15:29:49 <kosmikus> at our university, we use Haskell in the "Grammars and Parsing" course ...
15:29:59 <Tomasso> hahah didnt know :D
15:30:01 <isomer> kosmikus: cool
15:30:07 <Tomasso> we use it in functional programming
15:30:37 <kosmikus> yes, "Functional Programming" is a prerequisite for "Grammars and Parsing"
15:30:53 <Tomasso> as i coursed formal languages before functional programming they didnt tell nothing about implementation
15:31:10 <kosmikus> it would be difficult to teach formal languages and FP at the same time
15:31:15 <Tomasso> they just said that an automata can be implemented using a graph or adjacency matrix
15:31:34 <Tomasso> kosmikus: my teacher does it HAHAHAH
15:31:42 <Tomasso> its the same guy
15:31:51 <Tomasso> he has a 300 people course
15:31:56 <Tomasso> on functional programming
15:32:15 <Tomasso> only 20 coursed formal l
15:32:28 <Tomasso> im one of them :D
15:32:41 <kosmikus> Tomasso: at which univeristy are you?
15:32:57 <Tomasso> im in the UNLP, in Argentina
15:33:06 <yazirian> must be nice to even have it offered, my school had a 8 week section of 1 course that intro'd to lisp, and that was the only FP in the whole curriculum
15:33:20 <Tomasso> its a public free and for everybody university
15:33:42 <kosmikus> 300 people in an FP course is not bad ...
15:34:10 <Tomasso> hahaha how many people you have in your university at the formal l course?
15:34:11 * isomer programs with molecules these days
15:34:21 <Tomasso> hehe
15:34:25 * kosmikus checks
15:35:32 <Tomasso> more or less :D
15:36:06 <Tomasso> go to bath
15:36:07 <Tomasso> :D
15:37:52 <kosmikus> should have been around 80 last time
20:49:00 <Verbed> @wn bricolage
20:49:02 <lambdabot> No match for "bricolage".
20:49:09 <Verbed> @dict bricolage
20:49:10 <lambdabot> Supported dictionary-lookup commands:
20:49:10 <lambdabot>   @all-dicts @devils @easton @elements @foldoc @gazetteer @hitchcock @jargon @lojban @prelude @vera @web1913 @wn @world02
20:49:10 <lambdabot> Use "@dict-help [cmd...]" for more.
20:49:16 <Verbed> @all-dicts bricolage
20:49:16 <lambdabot> No match for "bricolage".
21:03:19 <Verbed> @all-dicts hynogogia
21:03:20 <lambdabot> No match for "hynogogia".
21:04:02 <Verbed> @all-dicts hynagogia
21:04:04 <lambdabot> No match for "hynagogia".
21:04:07 <Verbed> @all-dicts hypnagogia
21:04:08 <lambdabot> No match for "hypnagogia".
21:21:26 <Darius> Pseudonym: I don't get your second sentence in you reply in the future of haskell thread.
21:22:26 <Verbed> Darius: Are you referring to a forum?
21:22:46 <Darius> Verbed: The mailinglist
21:23:58 <Verbed> Darius: Thanks, I've found it.
21:31:51 <Pseudonym> Darius: It's only half serious.
21:33:02 <Pseudonym> It's kind of amusing Haskell is, at least to its practicioners, entrenched.
21:38:16 <Darius> meh, close enoough to what I was thinking.  Anyways, what are your thoughts about the records issue?
22:12:55 <Pseudonym> I don't think we should worry about keeping the current implementation.
22:13:24 <Pseudonym> I also think that the biggest wart in the current implementation is that field names have to be unique.  If we could overcome that one limitation, I'd be fairly happy.
22:13:29 <Pseudonym> Mind you, I've never tried trex.
22:18:52 <Binkley> @yow
22:18:53 <lambdabot> Send your questions to ``ASK ZIPPY'', Box 40474,
22:18:53 <lambdabot>  San Francisco, CA 94140, USA
22:25:16 * Darius is about to say, screw c.l.l.
23:42:39 <shapr> y0
23:44:21 * shapr bounces cheerfully
23:44:25 <shapr> gooood morning #Haskell!
