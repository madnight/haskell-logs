00:02:32 <shapr> goood morning #haskell!
00:04:02 <Lor> Morning.
00:04:05 <Verbed> Hello.
00:04:18 <shapr> did I miss anything?
00:04:36 * shapr checks the log
00:06:21 <shapr> @yow
00:06:21 <lambdabot> ..Wait 'til those  ITALIAN TEENAGERS get back to their HONDAS &
00:06:21 <lambdabot>  discover them to be FILLED to the BRIM with MAZOLA!!
00:06:55 <shapr> Heffalump: oh, I just found your livejournal yesterday
00:07:09 <Lor> Why does lambdabot break it into two lines?
00:07:20 <shapr> it's two line in the file I think
00:07:39 <Lor> Hm. Wastes screen space.
00:07:58 * Lor always tries to remove newlines when pasting quotes in irc.
00:08:11 <el_diego> what would be a good way of checking if a certain string could be parsed as an integer or a floating-point number?
00:08:25 <Lor> In Haskell?
00:08:32 <el_diego> yes
00:08:51 <Lor> Um. Just try to read it, and if it fails, say that it cannot be read. :)
00:09:27 <shapr> Lor: it's a stylistic thing, it's from M-x yow, which is from the Zippy the Pinhead cartoon written by a guy in San Francisco, starting in the seventies I think.
00:09:29 <el_diego> what kind of error do you get?
00:09:55 * shapr checks
00:10:34 <shapr> *FiveByFive> read "5" :: Char
00:10:34 <shapr> *** Exception: Prelude.read: no parse
00:11:00 <Lor> Ah, but catching exceptions requires IO. No good.
00:11:05 <shapr> hyv‰‰ huomenta Lor!
00:11:14 <shapr> better than not catching them :-)
00:11:40 <shapr> iirc, SPJ wrote a paper about the semantics of inexact exceptions
00:11:44 <shapr> and why it requires the IO monad
00:11:47 <Lor> I guess this is yet another of the deficiencies of Haskell's text handling framework.
00:12:06 <shapr> everything has deficiencies, Haskell just has the least number of those in my experience.
00:12:12 <Lor> Yes. Exceptions in GHC are very smart.
00:12:13 <shapr> same for emacs :-)
00:12:22 <Lor> I especially love the asynchronous inter-thread exceptions.
00:12:25 <el_diego> ok, i'll try it thanks!
00:12:29 <Lor> Would like to have those in other languages, too.
00:12:56 <shapr> emacs has some massive firmly-stuck-in-place warts, but it's still the best thing going imho.
00:13:10 <Lor> Ah, sorry.
00:13:23 <Lor> reads will do the trick.
00:13:33 <Lor> If it returns [], then it didn't parse.
00:13:43 <shapr> oh that's handy
00:14:03 <shapr> is there a generic way I can turn an exception throwing function into an Either or Maybe?
00:14:15 <Lor> No, since catching exceptions requires IO.
00:14:21 <shapr> hm
00:14:38 <Lor> (For good reason)
00:14:54 <shapr> is there a set of functions that throw more than one error?
00:15:23 <shapr> for the set of functions that only throw one error, I would prefer an Either/Maybe type with an optional Exception throwing wrapper.
00:15:37 <shapr> then I get to choose.
00:15:52 <Lor> exceptionToMaybe (error "eek", let x = x in x) <-- should this return Nothing or should it loop indefinitely?
00:17:12 <Lor> That's the problem with the exceptions being "imprecise"...
00:18:12 <Heffalump> it won't do either, will it?
00:18:30 <Heffalump> since the value of neither component is demanded inside the exceptionToMaybe
00:18:46 <Lor> What will it return, then?
00:18:56 <Heffalump> hangon, how is exceptionToMaybe defined?
00:19:11 <Lor> Well, my point here is exactly that it _cannot_ be defined. :)
00:19:15 <Heffalump> OIC :-)
00:19:16 <Heffalump> yeah.
00:19:35 <shapr> hoi kosmikus!
00:19:43 <kosmikus> hej shapr
00:20:17 <Heffalump> morning everyone
00:20:26 <shapr> good morning Heffalump!
00:20:48 * shapr boings cheerfully
00:33:15 <shapr> I think monads are related to aspect weavers
00:33:28 <Heffalump> you think monads are related to everything
00:33:58 * shapr wonders about that
00:34:04 <shapr> hey, did you hear about ICFP bingo?
00:34:18 <Heffalump> no?
00:34:36 <shapr> the aussies were doing it
00:34:36 <Heffalump> (actually, in the case of aspect weavers, there's an argument that monad transformers are like aspects)
00:34:46 <shapr> see, I wasn't so far off ;-)
00:34:53 <Lor> monad transformers aren't very easy to plug together.
00:34:56 <Heffalump> you usually are though :-)
00:34:58 <shapr> I had one entry "shae says 'nifty'"
00:35:03 <shapr> Heffalump: bah, maybe so...
00:35:10 <Heffalump> lor: in what way?
00:35:17 <shapr> Phil Wadler had several entries
00:35:19 <Heffalump> once you define one, they're easy to plug together
00:35:26 <Heffalump> "This is really cool"?
00:35:35 <shapr> heh, I've forgotten :-)
00:35:36 <Lor> Yes, but then you have to have N different lifts to access each level.
00:35:44 <Lor> And the order of the transformers matters.
00:35:54 <shapr> personally, I think they missed a big one "Swierstra says 'and then you tuple it'"
00:36:13 <shapr> He said that about eight times to various people during presentations or questions.
00:36:23 <Heffalump> lor: true
00:36:31 <shapr> I asked him later if he was very fond of tuples, he said he had to be :-)
00:36:43 <Heffalump> though if you use type classes for your base monad and the transformers you can do without the lifts
00:38:07 <Lor> Yes, but that's an awful hack.
00:38:15 <Lor> And it makes your type signatures really horrible.
00:38:19 <Heffalump> not for the transformers
00:38:23 <Heffalump> maybe for the base class
00:39:28 <Lor> The "base monad" should be Id, of course.
00:39:35 <shapr> work time...
00:39:57 <Heffalump> not if you're using IO...
00:40:08 <Lor> Just add an IO transformer. :)
00:40:24 <Heffalump> which is defined how? :-)
00:40:34 <Darius> Uh, if it hasn't been mentioned, you can just use 'reads'
00:40:38 <Lor> newtype IOT m a = IOT (IO (m a))... or perhaps IOT (m (IO a))
00:40:51 <Lor> And these two are of course completely different.
00:41:07 <Lor> (unless m is Id)
00:41:28 <Heffalump> is that a valid transformer?
00:41:30 <Heffalump> darius: reads?
00:41:38 <Lor> darius, yeah, I mentioned it.
00:41:53 <Heffalump> you did?
00:41:56 * Heffalump looks confused.
00:42:19 <Lor> [10:13:20] <Lor> reads will do the trick.
00:42:22 <Heffalump> oh, not in the context of monad transformers, right.
00:42:26 * Heffalump becomes unconfused
00:43:43 <Heffalump> if you can define an IO monad transformer as above, you'll be able to turn any monad into a monad transformer
00:44:13 <Heffalump> unless you manage to use something in IO other than return or >>= to define the return and >>= of the combined monad
00:44:25 <Lor> Do you have some special additional requirements for a monad transformer, then?
00:44:38 <Heffalump> no, but you have to be able to define >>= for it
00:44:44 <Heffalump> (and return, but that's usually easy)
00:44:47 <Heffalump> and still satisfy the monad laws
00:45:02 <Heffalump> not all monads can be made into transformers, AFAIK
00:45:37 <Darius> quite true
00:53:06 <norpan> i suppose you have studied the transformers in Control.Monad.*
00:53:13 <norpan> they are quite easy to put together
00:54:29 <norpan> because each monad type is a haskell class, and there are default instances of all the combinations
01:31:12 <Joe_> hello
01:31:40 <Joe_> OK, you're right, I should go to sleep anyway.  Goodnight.
01:31:46 <adept> Joe_: :)
01:31:59 <Joe_> adept, you're not helping.
01:32:00 * adept has 11:28 on his clock ...
01:32:22 <adept> Joe_: hmm... maybe I could. Whats your problem?
01:32:30 <Joe_> It's a pride issue: I want to figure this out before going to bed, irrational as it is.
01:32:33 <Joe_> Here's the deal:
01:32:37 <Joe_> I'm a newbie.
01:32:50 <Joe_> I'm trying to create a bounded Int type to represent an area code
01:32:58 <Joe_> so I want the upper bound to be 999 and the lower bound to be 0
01:33:11 <Joe_> ok so far?
01:33:17 <adept> ok
01:33:31 <Joe_> Here's what I tried: newtype AreaCode = AreaCode Int
01:33:44 <Joe_> instance Bounded AreaCode where minBound = 0; maxBound = 999
01:33:54 <Joe_> It doesn't work.
01:34:16 <adept> please elaborate on "It doesn't work:
01:34:26 <Joe_> I get "*** Missing context : Num AreaCode"
01:34:55 <Joe_> "ERROR Main.lhs:18 - Implementation of minBound requires extra context"
01:34:57 <Darius> you need to wrap the numbers
01:35:02 <Joe_> "*** Expected type   : Bounded AreaCode => AreaCode"
01:35:11 <Joe_> This isn't at all important, but I'd love the answer if you got it.
01:35:26 <Darius> or alternatively and more inline with what you want to do, is define fromIntegral
01:35:54 <Darius> However, there isn't any reasonable way to get Haskell to check the bounds for you statically.
01:36:26 <Joe_> So you're saying I can't/shouldn't use Bounded?
01:37:16 <Darius> Making an instance of Bounded won't really -do- anything, but an instance of Bounded would be appropriate.
01:37:34 <Joe_> OK.  Thanks for your help, tomorrow I'll read up on wrapping numbers & fromIntegral.
01:38:35 <Darius> By 'wrap the numbers' I just meant apply the data constructor to them.
01:39:11 <Joe_> Hey!  That fixed the compile error!
01:39:20 <Joe_> cool
01:40:14 <Joe_> but you're right, it provides no help with the limits.
01:40:40 <Joe_> Thanks for explaining "wrap the numbers".  That's what I was banging my head against for an hour.
01:41:10 <adept> Joe_: maybe, you could get away with newtype AreaCode = AreaCode Int
01:41:31 <adept> mkAreaCode i | i >= 0 && i <= 999 = (AreaCode i)
01:41:42 <adept>       | otherwise = error "Out of limits"
01:42:03 <adept> then put it all into module and export just AreaCode (not "AreaCode(...)") and mkAreaCode ...
01:42:40 <Joe_> Yeah, adept, I like that solution.
01:42:45 <Darius> That would be the way to do it.  Making an instance of Integral just avoids needing to type out the mkAreaCode.
01:44:16 <Darius> Er, Num not Integral.
01:44:25 <Joe_> You had me scratching my head there.
01:44:42 <Darius> Unfortunately, the other methods of Num don't make much sense for AreaCodes.
01:46:39 <norpan> you can just make areacode an instance of num, mkAreaCode will then be just fromInteger
01:47:03 <Joe_> cool, I'll try that right now.
01:48:04 <norpan> and make all other operations errors
01:48:43 <norpan> and then you can write for instance 304 in your program whenever you need to write a constant areacode, because that actually means (fromInteger 304)
01:50:08 <Joe_> yeah, I'm with you.  That makes sense.  Handy, because my program has a list of 39 area code constants (the "unused area codes").  I wrote it to generate invalid, random telephone numbers for use with pushy web forms.  :-)
02:30:13 <Joe_> Thanks for your help, guys, and goodnight.
02:30:30 <Joe_> :quit
02:51:26 <semaj> hi to you all :)
02:54:29 <adept> “’ƒƒ›
02:54:31 <adept> hello
02:54:39 <semaj> hi
02:59:01 <semaj> any news, or maybe any more problems to solve like the "one million" problem :)
02:59:14 <semaj> i liked that one ... :)
03:02:33 <Darius> Since Pseudonym isn't here, I'll suggest something for him.  He wants an implementation (or something?) of the Web: http://citeseer.nj.nec.com/hinze01web.html
03:17:55 <Verbed> @yow
03:17:55 <lambdabot> My face is new, my license is expired, and I'm under a doctor's care!!!!
04:06:03 <Heffalump> semiaway?
04:06:10 <Heffalump> which half of you is still here, then?
04:07:35 <pesco> random pieces uniformly distributed, maybe
04:08:09 <Heffalump> maybe it's a heisenkosmikus
04:08:39 <pesco> "Sorry, I'm partially desintegrated right now, please leave a message"
04:33:43 <Igloo> Should ghc-cvs have higher or lower priority than ghc6?
04:34:26 <ibid> lower, i should say, so that you have to choose to use the "unstable" version
04:34:27 <earthy> lower, as it is less stable. (I'm assuming you're talking packaging and debian here)
04:34:36 <Heffalump> what does priority do?
04:34:44 <Igloo> What about ghc5 then?
04:34:54 <Igloo> Determines which is made /usr/bin/ghc by default
04:35:11 <earthy> igloo: identical, as both are considered stable, and it is up to the user to choose
04:35:21 <ibid> ... if both are installed
04:35:29 <Heffalump> ghc-cvs, IMO
04:35:51 <Heffalump> oh, will it clobber the alternative every time it gets reinstalled?
04:35:57 <ibid> ghc-cvs < ghc5 < ghc6
04:36:03 <ibid> Heffalump: not if it is manually set
04:36:07 <ibid> imho
04:36:13 <Heffalump> I think ghc5 < ghc6 < ghc-cvs, as long as manual changes stay the way they are set
04:36:23 <Heffalump> (but that depends on how the update-alternatives mechanism works)
04:36:51 <ibid> (i use "<" to mean "will be by default overridden by")
04:37:05 <Heffalump> yes, so do I
04:37:08 <earthy> heffalump: why prefer ghc-cvs?
04:37:13 <Heffalump> because it's more recent
04:37:33 <earthy> and therefore more buggy...
04:37:36 <Heffalump> I don't really feel strongly either way
04:37:40 <Heffalump> or maybe less buggy...
04:37:41 <ibid> Heffalump: the alternatives system has two states, manual and automatic.  it will detect manual config and set itself to manual state by default
04:37:56 <Heffalump> ibid: right
04:38:14 <ibid> s/by default/automatically/
04:38:20 <Heffalump> one of Igloo's packages managed to override a manual setting I'd made (IIRC), but that could have been a mistake by him
04:38:22 <ibid> by default it is in automatic states
04:38:37 <ibid> well, that's the theory. practice is practice :)
04:38:53 <ibid> i rate the cvs version lowest mainly because it's a moving target
04:39:00 <Igloo> I think it changed manual to auto when it saw the manual setting didn't exist
04:39:40 <Heffalump> well, who here actually installs or intends to install ghc-cvs packages?
04:39:57 <ibid> not me :)
04:40:37 * Heffalump probably doesn't, but might do
04:40:38 <ibid> but my reasoning is that if one compiles a package (debian or otherwise), it should by default happen using a stable compiler
04:40:58 <Heffalump> true
04:41:01 <earthy> very true
04:41:29 <Heffalump> has anyone made helium packages for Debian?
04:41:34 <ibid> ... regardless of whether there is a cvs version installed
04:41:48 <Igloo> I e-mailed them asking them what they thought of them being made
04:41:52 <Igloo> No response yet
04:43:02 * earthy thinks the `no repsonse yet' is due to something akin to an absence of the main maintainer
04:43:22 <earthy> i.e.: Arjan van Ijzendoorn is on a holiday. :)
04:44:13 <Heffalump> igloo: so you're going to make some?
04:44:55 <Igloo> Yeah
04:45:30 <earthy> oh, no, he's ill, not on a holiday
04:46:06 <Igloo> earthy: I got a reply to a fix I sent them a few mins earlier, but not to the second e-mail giving another fix and mentioning packaging
04:46:41 <earthy> igloo: yeah, consistent with Arjan being ill...
04:47:02 <earthy> He'd have to consult with people `do we want this' which is slightly trickier when you're not at the office
04:48:53 <Heffalump> presumably they wouldn't have GPLed it if they objected to that kind of thing in principle
04:49:37 <earthy> oh, very much so.
04:49:47 <earthy> and I know for a fact no-one here is packaging it
04:50:02 <earthy> but there might be some `this isn't really ready for prime time yet' sentiments
04:50:13 <Igloo> Some people get arsey if you try packaging there stuff before it's "ready", though
04:50:23 <Igloo> Are you one of them then, earthy?
04:50:24 <earthy> especially given some of the work that's gone into it recently
04:50:45 <earthy> Igloo: Arjan van Ijzendoorn's office is across the hall from mine
04:50:53 <Heffalump> I'd have thought it belonged in haskell-experimental, not main Debian, for now
04:51:06 <Igloo> Ah, right
04:51:19 <Igloo> Why, Heff?
04:52:24 <Heffalump> because I had the impression it's in a state of flux
04:53:37 <earthy> it very much is, still, yes.
04:54:09 <earthy> but for the fact that the courses using Helium have started again, and I think they have a somewhat fixed version for tahta
04:54:11 <earthy> that
04:55:00 <Heffalump> given that a Debian release is happening soon, it'd be best for a fairly stable version to go into Debian proper
04:55:49 * earthy nods (and thinks byjolly, 11 cd's *is* a lot)
04:56:17 <Heffalump> hehe
04:56:35 <Heffalump> does Debian have a good system for making the first CDs the more important stuff?
04:57:08 <adept> popularity-contest?
04:57:19 <Igloo> I can't remember how it worked last time, but package priorities will probably be the first things looked at
04:57:52 <Igloo> And it would make sense to look at getting the most common task-foo packages on a small number of CDs
04:57:57 <Heffalump> isn't it possible to make CDs at any point you like, too?
04:58:08 <Igloo> No idea
04:58:20 <adept> Heffalump: jigdo
04:58:25 <Igloo> Well, I doubt it as the installer probably won't work
04:58:31 <Heffalump> how does that decide what goes on what CD?
04:59:19 <adept> apt-cache search CD debian  :)
05:00:47 <adept> and then apt-cache show on everything it finds
06:37:40 <Igloo> Yay, m68k build seems to be working
06:37:51 <Igloo> Hopefully only mangler tweaking left now
06:38:21 <Heffalump> what happened to the sparc build?
06:38:41 <Igloo> sparc's been in the archive for a couple of weeks now
06:39:13 <Igloo> I've been battling the buildd guys to try to get to the point where it should autobuild
06:40:14 <Heffalump> battling why?
06:40:44 <Igloo> They tend to be bad at replying to e-mails, and everything had been marked as i386 only
06:41:10 <Igloo> happy's now built, but haddock is sitting waiting to be looked at because it tried to build before happy was in the archive so failed
06:41:15 <Lunar^> Igloo: cool :)
06:41:30 <Lunar^> Igloo: currently trying Debian/PowerPC once again
06:41:48 <Igloo> Let me know how you get on
06:42:35 <Meep> i'm using Gentoo/PPC at the moment
06:42:48 <Lunar^> Igloo: ok :) I think I will post something on glasgow-haskell-users
06:42:56 <Igloo> Oh, has that got GHC binaries, Meep?
06:43:00 <Meep> no :(
06:43:04 <Igloo> Ah, OK
06:43:15 <Meep> it's not just a matter of compiling ghc for Linux
06:43:35 <Meep> i think some low level stuff to do with registers has to be sorted out
06:43:53 <Meep> of course, there is the Mac OS X version
06:44:05 <Lunar^> Igloo: If I've got a working compiler I'm going to try to port the Debian packages for ghc6
06:44:36 <Lunar^> Meep: unregisterised version should work normally
06:44:53 <Meep> ok, maybe i should try building it like that
06:45:08 <Meep> from a binary release of ghc 5, would that work?
06:45:20 <Lunar^> Building unregisterised-hcs on Mac OS X seems broken, btw
06:48:40 <Igloo> sparc and x86 are different endiannesses aren't they?
06:49:20 <Meep> Igloo: how much work would be involved in porting the registered version to Linux? 
06:49:53 <Lunar^> Igloo: mhhhhh
06:50:36 <Meep> or Lunar^ even, i think i got the wrong person :S
06:51:27 <Igloo> Meep: I had a quick prod at it a week or two back and it seemed to me that quite a bit of assembly and ifdefs scattered through the sources would need to be changed I think
06:51:58 <Igloo> Wolfgang might have a better idea on what exactly would need to be done, but possibly not if he's OS X-only
06:52:00 <Lunar^> Meep: I want to get an unregisterised build working first... maybe I could go through the source code afterward
06:52:14 <Lunar^> But I don't know much of assembly
06:52:19 <Meep> me neither
06:52:30 <Lunar^> Is OS X assembly different from Linux (or GNU ?) assembly ?
06:52:54 <Meep> kind of (i think)
06:53:07 <Meep> the conventions about which registers get saved on the stack may be different
06:53:59 <Lunar^> The OS X linker seems something scarry also
06:54:40 <Lunar^> But I would be very amazed if working on a port for a supported OS on a supported arch is something difficult
06:54:47 <Lunar^> s/arch/proc/
06:55:10 <Meep> yeah, i'm sure it's just a matter of finding someone who really knows the ghc internals to do it
06:55:36 <Heffalump> the important thing is that once it's bootstrapped on different arches, to keep it that way
06:55:40 <Lunar^> Maybe it's just a good opportunity to learn :)
06:56:01 <Lunar^> Heffalump: could you explain a bit more ?
06:56:05 <Meep> the sources are a bit insane...i spent a few hours poking around in them trying to get ghc6 to build
06:56:18 <Igloo> But then the porting method bitrots and porting to a new arch is difficult  :-)
06:56:44 <Heffalump> but the "porting method" is just fixing the code so it can build for new arches, right?
06:56:58 <Meep> bbut it also needs to be bootstrappped
06:57:06 <Igloo> Only if cross-compilation worked
06:57:30 <Heffalump> igloo: can't you always go via .hc files, if GHC will in the end generate valid code for the platform?
06:57:48 <Lunar^> It seems to be really better for GHC 6 by reading Don's and Simon's last mails on ghc-users
06:57:50 <Heffalump> Lunar^: just that having gone to all this effort to port GHC, people should make sure that it stays ported
06:58:00 <Lunar^> Heffalump: uh ok
06:58:25 <Meep> well there is already a Linux/PPC ghc5 build, so couldn't ghc6 be built using that, instead of from ..hc files?
06:58:27 <Igloo> Yes, but there are various niggles that have to be done to make things work
06:59:02 <Lunar^> Meep: where ?!
06:59:13 <Meep> www.haskell.org/ghc/disst
06:59:24 <Igloo> Things like needing to compile genapply to make an x86 binary that will output an Apply.hc for what you are porting to
07:00:11 <Lunar^> Meep: thanks ! I didn't see that !
07:00:21 <Meep> Lunar^: http://haskell.cs.yale.edu/ghc/dist/5.04.3/ghc-5.04.3-powerpc-unknown-linux.tar.bz2 to be precise
07:00:49 <Meep> gchi doesn't work, but it seems alright
07:01:08 * Igloo conjectures that that will not build a working ghc6, but please prove me wrong  :-)
07:01:19 <Meep> i didn't manage to build ghhc6 using it
07:01:31 <Meep> but i think i was trying for a registered build
07:01:36 <Lunar^> Anyway, I think trying to build with cross-compiling and stuff is worthy with the current efforts
07:02:23 <Lunar^> But if this try fails, I will try doing an unregisterised version using this one
07:03:17 <Meep> so how does cross-compiling ghc work, do you need to have a cross-compiling gcc?
07:03:41 <Lunar^> good point
07:04:06 <Igloo> No
07:04:15 <Igloo> Although for m68k it might have been worth trying  :-)
07:06:13 * Igloo goes shopping
08:27:09 <Heffalump> ahah, he's collapsed
08:30:27 <kosmikus|away> oh, I'm still here :)
08:31:49 <Heffalump> careless of you
08:37:17 <Igloo> So when you're semi-away you don't talk, but when you're away you do?
08:38:05 <Darius> God forbid he were actually here.
08:38:11 <Lunar^> Finished building of unregisterised hcs
08:38:31 <Lunar^> gcc will have to work next :)
08:54:02 <Lunar^> G3 are so slow :(
09:07:59 <Smerdyakov> Urgh... why does Debian have an _older_ flex in testing than stable??
09:08:11 <shapr> both are available
09:08:15 <shapr> iirc
09:09:02 <Smerdyakov> Oh. I guess a doesn't count as a digit here. :D
09:16:10 <Heffalump> I think the version changed completely, too
09:16:18 <Heffalump> there's now a flex-old which will correspond to that in stable
09:16:57 <Smerdyakov> I want the new one.
09:17:14 <Smerdyakov> How do I get it if I have testing as my default?
09:18:38 <Heffalump> the one in unstable?
09:18:49 <Smerdyakov> No, the one in stable.
09:19:15 <Heffalump> huh? How can you get the new one in stable, when it's the old one in stable?
09:19:47 <Smerdyakov> So 31 is newer than 4a?
09:20:44 <Heffalump> I should imagine so, yes
09:21:30 <Heffalump> yes, it is
09:21:37 * shapr bounces cheerfully
09:22:43 <Heffalump> shapr: did you get that key signature from me?
09:23:14 <shapr> yes!
09:27:02 <Igloo> Yes, as   dpkg --compare-versions 31 \> 4a && echo yes   confirms
09:44:34 <keverets> is anyone thinking of itp'ing helium for Debian?
09:47:56 <shapr> programming is hard because its closest two traditional jobs would be mathematics and philosophy - except that unlike philosophers programmers need to produce something, and unlike mathematicians programmers have no proof of anything.
09:48:01 <shapr> attributed to Martin Fowler
09:50:01 <Heffalump> keverets: Igloo is
09:50:31 <keverets> Igloo: have a preliminary package available? ;)
09:50:50 <Heffalump> I think he's waiting to see what the Helium developers say in response to his question about it
09:50:56 <keverets> ah.
09:53:17 <Igloo> Why all the interest all of a sudden? ICFP?
10:11:11 <Smerdyakov> Programmers have proofs of lots of things!
10:11:20 <Smerdyakov> Like memory safety!
10:11:52 <ibid> do they, really?
10:12:58 <Smerdyakov> Yeah.
10:13:35 <ibid> really?
10:13:43 <Heffalump> really truly?
10:13:54 <ibid> how many compilers are proven correct?
10:14:01 <ibid> how many runtime systems?
10:14:11 <ibid> how many processors?
10:14:26 <Heffalump> I can produce a correct compiler given a correct interpreter and a correct partial evaluator.
10:14:56 <ibid> partial evaluator?
10:15:25 <Heffalump> yes, something that takes a program, and some of the input to that program, and specialises the program with respect to that partial input.
10:15:33 <ibid> ahh
10:15:36 <dennisb> ibid: who said that you have to do it on an computer, most people settle for an abstract machine
10:15:56 <ibid> dennisb: those people are theoreticians, not programmers :)
10:16:01 <ibid> (at least by hat:)
10:16:01 <Heffalump> (look up the Futamura Projections to understand why I said what I did)
10:16:30 <ibid> well, you will have problems finding the correct interpreter and the correct partial evaluator :)
10:16:43 <Heffalump> minor details :-)
10:16:46 <ibid> :)
10:17:04 <ibid> dennisb: (note that *i* am a part-time theoretician:)
10:18:41 <dennisb> ibid: no problems, I don't have anything against religious people
10:18:51 <ibid> hmm
10:18:57 <ibid> religious, in what sense?
10:19:38 <dennisb> I though you had to beleive in something to be a theoretician
10:19:49 <dennisb> some axion, may it be god or something else
10:19:54 <ibid> huh?
10:20:09 <ibid> i did not speak of metaphysics :)
10:20:31 <dennisb> don't worry, it's just my twisted mind that is trying to make jokes. sometimes it works, sometimes not :-)
10:20:52 <ibid> i see the jokes, but i wasn't sure whether you were joking :)
10:22:17 <ibid> actually, one has to believe a lot more to be a practicioner :)
10:22:24 <ibid> like, the existence of the world
10:23:47 <Igloo> Cool, John Hughes has an "automated plagiarism detector"  :-)
10:24:04 <ibid> a theoretician needs only to believe in rational thought
10:24:33 <ibid> Igloo: people at tut have had one for years (for checking first-year programming projects)
10:24:45 <Igloo> Cool
10:24:49 <Igloo> How does it work?
10:24:51 <Heffalump> I think most places have those these days.
10:24:53 <ibid> not sure
10:25:11 <Heffalump> we don't because we have not many students
10:25:13 <ibid> i've only heard stories about it
10:25:25 <ibid> and we don't, but not for lack of students
10:25:39 <ibid> because most cases are easy to spot with some ingenuity :)
10:27:19 <ibid> one course, for example, has the same weekly exercises every year (yeah, lazy lecturer:), and making a tiny change in some of them will expose a lot of copiers :)
10:36:14 <ibid> hmm, the tut program appears to be this one: http://www.cs.nott.ac.uk/~ceilidh/
11:02:38 <keverets> ok, so I'm dumb: what's the most efficient way to filter several different chars out of a string?  I could filter (/= 'a') . filter (/= 'b') but I've seen a better way in the past.
11:05:01 <hdaume> filter (\c -> c /= 'a' && c /= 'b')?   or filter (not . (`elem` "ab"))
11:05:36 <keverets> ah, the later would be preferred as I might add quite a few chars to the filter.  Cheers.
11:59:14 <Lunar^> The build on Debian failed
11:59:37 <Lunar^> going to post to glasgow-haskell-users
12:04:29 <Xcalibor> hello :)
12:44:38 <Verbed> @yow
12:44:38 <lambdabot> If I pull this SWITCH I'll be RITA HAYWORTH!!  Or a SCIENTOLOGIST!
13:30:04 <Xcalibor> lambdabot?
13:31:26 <Cale> @yow
13:31:27 <lambdabot> Where's the Coke machine?  Tell me a joke!!
13:31:39 <Cale> @prelude fmap
13:31:41 <lambdabot> *** "fmap" prelude "Haskell Standard Prelude Dictionary": text follows
13:31:41 <lambdabot> fmap
13:31:41 <lambdabot>   instance (Ix a) => Functor (Array a) where
13:31:41 <lambdabot>     fmap = primAmap
13:31:42 <lambdabot>   class Functor f where
13:31:44 <lambdabot>     fmap ::  (a -> b) -> (f a -> f b)
13:31:46 <lambdabot>   instance Functor Maybe where
13:31:48 <lambdabot>     fmap f Nothing  = Nothing
13:31:50 <lambdabot> [7 @more lines]
13:32:35 <Xcalibor> ?? nice
13:32:37 <Xcalibor> :)
13:33:14 <Cale> @listcommands
13:33:15 <lambdabot> I react to the following commands: ["all-dicts","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude","quit","reconnect","
13:33:39 <Cale> It really needs to learn to split messages that are too long.
13:33:41 <Verbed> @wn cantankerous
13:33:43 <lambdabot> *** "cantankerous" wn "WordNet (r) 1.7"
13:33:43 <lambdabot> cantankerous
13:33:43 <lambdabot>      adj 1: (British) stubbornly obstructive and unwilling to cooperate;
13:33:43 <lambdabot>             "unions...have never been as bloody-minded about
13:33:44 <lambdabot>             demarcation as the shipbuilders"- Spectator [syn: {bloody-minded}]
13:33:46 <lambdabot>      2: having a difficult and contrary disposition; "a cantankerous
13:33:48 <lambdabot>         and venomous-tongued old lady"- Dorothy Sayers [syn: {crotchety},
13:33:50 <lambdabot>          {ornery}]
13:34:38 <Cale> #hitchcock
13:34:41 <Cale> @hitchcock
13:35:29 <Cale> @jargon space-cadet keyboard
13:35:30 <lambdabot> No match for "space-cadet".
13:35:30 <lambdabot> No match for "keyboard".
13:35:34 <Cale> @jargon space
13:35:35 <lambdabot> No match for "space".
13:35:44 <Cale> @jargon monomorphism
13:35:44 <lambdabot> No match for "monomorphism".
13:35:50 <Verbed> @jargon ASCII
13:35:51 <lambdabot> *** "ASCII" jargon "Jargon File (4.3.0, 30 APR 2001)"
13:35:51 <lambdabot> ASCII /as'kee/ n. [originally an acronym (American Standard Code for
13:35:51 <lambdabot>    Information Interchange) but now merely conventional] The predominant
13:35:51 <lambdabot>    character set encoding of present-day computers. The standard version
13:35:52 <lambdabot>    uses 7 bits for each character, whereas most earlier codes (including
13:35:54 <lambdabot>    early drafts of ASCII prior to June 1961) used fewer. This change
13:35:56 <lambdabot>    allowed the inclusion of lowercase letters -- a major {win} -- but it
13:35:58 <lambdabot>    did not provide for accented letters or any other letterforms not used
13:36:00 <lambdabot> [200 @more lines]
13:36:23 <Verbed> @jargon reflection
13:36:24 <lambdabot> No match for "reflection".
13:36:32 <Cale> so it is the jargon file. Thought there was an entry for space-cadet keyboard
13:36:43 <Verbed> @jargon 42
13:36:44 <lambdabot> *** "4.2" jargon "Jargon File (4.3.0, 30 APR 2001)"
13:36:44 <lambdabot> 4.2 /for' poynt too'/ n. Without a prefix, this almost invariably
13:36:44 <lambdabot>    refers to {BSD} Unix release 4.2. Note that it is an indication of
13:36:44 <lambdabot>    cluelessness to say "version 4.2", and "release 4.2" is rare; the number
13:36:45 <lambdabot>    stands on its own, or is used in the more explicit forms 4.2BSD or (less
13:36:47 <lambdabot>    commonly) BSD 4.2. Similar remarks apply to "4.3", "4.4" and to earlier,
13:36:49 <lambdabot>    less-widespread releases 4.1 and 2.9.
13:37:20 <Verbed> @jargon recursive
13:37:21 <lambdabot> No match for "recursive".
13:37:25 <Cale> @jargon hhgttg
13:37:26 <lambdabot> No match for "hhgttg".
13:37:29 <Xcalibor> @jargon heisenbug
13:37:30 <lambdabot> *** "heisenbug" jargon "Jargon File (4.3.0, 30 APR 2001)"
13:37:30 <lambdabot> heisenbug /hi:'zen-buhg/ n. [from Heisenberg's Uncertainty Principle in
13:37:30 <lambdabot>    quantum physics] A bug that disappears or alters its behavior when one
13:37:30 <lambdabot>    attempts to probe or isolate it. (This usage is not even particularly
13:37:30 <lambdabot>    fanciful; the use of a debugger sometimes alters a program's operating
13:37:32 <lambdabot>    environment significantly enough that buggy code, such as that which
13:37:33 <Verbed> @jargon vorgon
13:37:34 <lambdabot>    relies on the values of uninitialized memory, behaves quite
13:37:36 <lambdabot>    differently.) Antonym of {Bohr bug}; see also {mandelbug},
13:37:38 <lambdabot> [6 @more lines]
13:37:40 <lambdabot> No match for "vorgon".
13:37:55 <Cale> @jargon ogg
13:37:55 <Verbed> @jargon quark
13:37:56 <lambdabot> *** "ogg" jargon "Jargon File (4.3.0, 30 APR 2001)"
13:37:56 <lambdabot> ogg /og/ v. [CMU] 1. In the multi-player space combat game Netrek, to
13:37:56 <lambdabot>    execute kamikaze attacks against enemy ships which are carrying armies
13:37:56 <lambdabot>    or occupying strategic positions. Named during a game in which one of
13:37:57 <lambdabot>    the players repeatedly used the tactic while playing Orion ship G,
13:37:59 <lambdabot>    showing up in the player list as "Og". This trick has been roundly
13:38:01 <lambdabot>    denounced by those who would return to the good old days when the tactic
13:38:03 <lambdabot>    of dogfighting was dominant, but as Sun Tzu wrote, "What is of supreme
13:38:05 <lambdabot> [12 @more lines]
13:38:07 <lambdabot> No match for "quark".
13:38:44 <Xcalibor> @more
13:38:45 <lambdabot> wrong type (<<[] Char>>) in ModuleState
13:38:50 <Cale> oops :)
13:38:52 <Xcalibor> @more lines
13:39:00 <Cale> @jargon ogg
13:39:01 <lambdabot> *** "ogg" jargon "Jargon File (4.3.0, 30 APR 2001)"
13:39:01 <lambdabot> ogg /og/ v. [CMU] 1. In the multi-player space combat game Netrek, to
13:39:01 <lambdabot>    execute kamikaze attacks against enemy ships which are carrying armies
13:39:01 <lambdabot>    or occupying strategic positions. Named during a game in which one of
13:39:02 <lambdabot>    the players repeatedly used the tactic while playing Orion ship G,
13:39:04 <lambdabot>    showing up in the player list as "Og". This trick has been roundly
13:39:06 <lambdabot>    denounced by those who would return to the good old days when the tactic
13:39:06 <Xcalibor> mmmm... well, it was worth a try :-)
13:39:08 <lambdabot>    of dogfighting was dominant, but as Sun Tzu wrote, "What is of supreme
13:39:10 <lambdabot> [12 @more lines]
13:39:11 <Cale> @more
13:39:12 <lambdabot> wrong type (<<[] Char>>) in ModuleState
13:39:18 <Cale> hmm...
13:39:24 <Cale> that used to work
13:39:33 <Xcalibor> it's a heisenbug ;-)
13:39:51 <Xcalibor> btw... anyone that can explain the usefulness of the Y combinator?
13:42:01 <Smerdyakov> Creating recursive functions.
13:42:29 <Smerdyakov> It's not actually useful for real programming.
13:42:44 <Heffalump> @more
13:42:51 <Heffalump> hmm.
13:43:49 <Lunar^> Xcalibor: You can transform any recursive function to be non recursive using Y
13:46:19 <Xcalibor> recursive -> non-recursive (iterative?)  ? interesting...
13:46:49 <Lunar^> let fact' f n = if n == 0 then 1 else n * f (n - 1)
13:47:03 <Lunar^> in fix fact'
13:47:09 <Xcalibor> including tail recirsive functions? i wonder, many functional languages do tail optimization, so recursion is actually the Good Thing to do...
13:47:25 <Lunar^> It's just fix who do the recursion
13:47:31 <Lunar^> fix f = f (fix f)
13:47:32 <Xcalibor> ah
13:47:50 <Xcalibor> mmm... interesting...
13:48:05 <Lunar^> Look at Control.Monad.Fix
13:48:16 <Cale> http://www.wikipedia.org/wiki/Fixed_point_combinator
13:48:27 <Lunar^> before the "do rec" notation, you had to use mfix
13:48:46 <Smerdyakov> Xcalibor, your comment about tail recursion and optimization is not really relevant here. The Y combinator is used only in theory, where optimization is not even a sensible notion.
13:48:56 <Xcalibor> actually i was asking cause i read a factorial written in a combinatorial way today, apparently the fastest factorial in Haskell, and I was pretty curious about it
13:49:25 <Xcalibor> Smerdyakov: well, i'm just a programmer, optimization sometimes does play an important role :-)
13:49:40 <Smerdyakov> Xcalibor, if you're "just a programmer," then you shouldn't care about the Y combinator.
13:50:25 <Xcalibor> mmm... why not? that way of writing the factorial was the fastest one... I may be interested in getting that effect in a real life program
13:50:45 <Smerdyakov> What was that way?
13:50:54 <Xcalibor> hang on a sec
13:50:57 <Lunar^> I read something about the Y combinator in real programming example
13:51:29 <Lunar^> that was on lambda the ultimate
13:51:46 <Xcalibor> http://www.willamette.edu/~fruehr/haskell/evolution.html#combinatory
13:52:24 <Xcalibor> there are an incredible number of ways to write the factorial of a number in that page, really fun and illustrative... lots of things to learn as well...
13:53:19 <Smerdyakov> Xcalibor, what do you mean by "the fastest"?
13:54:16 <Xcalibor> Smerdyakov: at the botton of the page the author comments that it's the faster version of them all
13:54:24 <Lunar^> http://www.scms.rgu.ac.uk/staff/bjm/doc/#fics2001
13:54:32 <Xcalibor> I guess it's the one that takes less time in calculating fact 155
13:54:38 <Lunar^> "Y in practical programs"
13:55:50 <Smerdyakov> Xcalibor, hm. That's very dependent on the compiler used.
13:56:28 <Xcalibor> Smerdyakov: may be... but the technique is pretty interesting... it looked similar to unlambda language :-)
13:56:41 <Lunar^> Xcalibor: lol
13:57:25 <Lunar^> Xcalibor: actually it should be pretty straightword to transform into unlambda, because there's no lambda in this expression :)(
13:57:39 <Xcalibor> Lunar^: :)  curiously, though unlambda isn't that hard to understand... it's very laborious, but I find it as easy as lambda calculus (or easier)
13:58:02 <Xcalibor> Lunar^: I had thought there's a lambda in the Y combinator?
13:58:36 <Lunar^> That's why unlambda defines Y as a primitive
13:59:13 <Xcalibor> mmm... i hadn't thought about that
14:29:24 <Xcalibor> Lunar^: interesting reading about the Y, but i'm afraid i've missed half the point :-P
22:10:21 <Pseudonym> Oh boy.
22:10:44 <Pseudonym> By all that is sacred and profane, I am truly in the presence of geniuses.
22:15:07 <mattam> thanks
22:16:28 <Strike> oops, I must be in the wrong place then
22:16:45 <Pseudonym> Not here, it's the people who are hosting my colocated box.
22:17:06 <Pseudonym> Here's the thing: We've been getting a free ride for two years.
22:17:42 <Pseudonym> However, someone noted that in their estimate we're using AUD$20,000 a year in bandwidth (this is for six boxen).
22:17:51 <Pseudonym> We have no idea where they got that figure from.
22:17:57 <Pseudonym> I just worked it out.
22:18:10 <Pseudonym> And it's truly mind boggling.
22:18:18 <Pseudonym> We're supposedly on our own router port.
22:18:40 <Pseudonym> I started monitoring, and noticed that 70% of incoming data was not IP traffic.
22:18:54 <Pseudonym> This place doesn't use IPX or NetBEUI or anything like that.
22:19:10 <Pseudonym> A few seconds with tcpdump reveals that it's all ARP traffic.
22:19:54 <Strike> nice
22:20:03 <Pseudonym> For some reason, we're privvy to every address translation going on in this place.
22:20:28 <Pseudonym> Who on earth lets ARP through a router?
