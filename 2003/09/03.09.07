00:44:13 * shapr boings
03:16:35 <Jerub> @yow
03:16:35 <lambdabot> There's enough money here to buy 5000 cans of Noodle-Roni!
06:29:30 <d33p> @yow
06:29:31 <lambdabot> PIZZA!!
06:29:46 <Jerub> there's hours of fun in that thing.
06:30:01 <d33p> :)
09:00:59 <Lor> esap!
09:01:13 * esap is.
09:02:14 <esap> what's up?
09:02:26 <Lor> I was at icfp.
09:02:36 <Lor> Quite possibly the first Finn ever. :)
09:02:45 <esap> heheh :-)
09:02:57 <esap> I wish I was able to attend
09:03:20 <Lor> I've been intending to write a report once I get a spare moment.
09:07:03 <esap> saw any good talks there?
09:07:27 <Lor> Harry Mairson's was rather entertaining, as well as interesting.
09:07:46 <Lor> Wadler begun his talk with a little mini-play with Shivers.
09:08:12 <esap> lor: I heard about the wadler's duality stuff (And already read that paper)
09:08:15 <Lor> Oh yeah, and SPJ's one-minute talk at Haskell Workshop was just amazing.
09:09:01 <Lor> Yeah, it was really neat result.
09:10:09 * esap has been thinking about duality a lot, so wasn't that impressed about the paper. But maybe I misunderstood it :-)
09:11:03 <Lor> It's just, well, pretty, to see that cbv and cbn can be written in such a symmetric fashion.
09:11:13 <Lor> Not sure if it has any profound implications, though.
09:16:37 <esap> The profound implication is that it divides terms into constructors and destructors, and that you can build everything from them.
09:16:53 <Lor> That's not very profound.
09:17:12 <Lor> When I first learned classical sequent calculus, the first thing I tried to do was devise a term representation for the proofs.
09:18:05 <Lor> Once I figured out that the right context represents continuations, it was pretty straightforward to see that constructors and destructors can be expressed in exactly the same way.
09:19:27 <esap> There was actually one detail that was different than what I thought it should be: the dual of lambda abstraction was kind of interesting.
09:21:47 <Lor> Here's something I scribbled two years ago or so: http://iki.fi/la/g3cp.txt
09:22:13 <Lor> I've always wondered why logicians want to use verbose and cumbersome proof tree notation when they could just use something akin to lambda terms. Much less redundancy there.
09:23:55 <Lor> Gah, it's horribly unfinished.
09:25:16 <esap> lor: see http://www.kotiposti.net/epulkkin/summary.dvi [I did that some time ago, it's also in very bad shape :-)]
09:27:51 <Lor> What's that?
09:28:12 <Lor> It seems somehow familiar, but I cannot place it.
09:28:37 <esap> It's somehow based on Crolard's subtractive logic, as well as some category theory stuff.
09:28:52 <Lor> What does it give you?
09:29:52 <esap> Well it has control operation, which is seen as dual to lambda abstraction.
09:31:42 <Lor> Oh yeah, the thing that I was reminded of was probably Lambek calculus. Maybe because of those backslashes.
09:33:18 <esap> lor: yes, those backslashes are the type subtraction [Crolard uses just '-' but I thought it wouldn't be good in a programming language]
09:33:42 <esap> lor: Wadler did comment on that approach that he didn't think subtraction would be very intuitive....
09:34:03 <esap> lor: but I disagree.
09:34:26 <Lor> Reminds me of the discussion at the workshop on the intuitiveness of "lacks"-predicates in a record type.
09:34:48 <Lor> (Ie. what TRex does)
09:35:09 <esap> what do those do?
09:35:49 <Lor> In that record system, you have predicates saying that a record type _doesn't_ have certain rows.
09:36:55 <Lor> SPJ wondered if this would be too unintuitive for people who are used to having predicates just asserting _positive_ properties of a type (ie. belonging to a certain class) in Haskell.
09:38:26 * esap should also remove all references to univ and exist quantification from that, they're very wrong.
09:40:16 <Lor> Terokin.
09:40:19 <Lor> Long time no see.
09:40:44 <_Codex> I just had to come listen this.
09:46:16 <esap> lor: but also, I think there is a way to make the double-negation interpretataion of control operation dual to lambda abstraction.
09:47:17 <Lor> Hm, right.
09:47:28 <esap> lor: but then you cannot refer to variables in enclosing scope.
09:48:24 <esap> lor: And you have to introduce some additional mechanism for that.
09:48:59 <Lor> Okay. I haven't really looked into it so much that I could comment on that.
09:50:34 <esap> lor: it's obvious from my rules  =>-I, if you replace context with 'Top', then the dual of that (\\-I) has to set B = _|_, and that is the double-negation stuff basically.
09:53:55 <esap> lor: the only difference after that is the distinction between "A \\ B" and "A -> _|_", which is basically what subtractive logic requires.
09:54:16 <esap> lor: I mean, Top \\ A and A -> _|_.
09:54:59 <esap> lor: if you equate those, you get something based on classical logic.
09:55:39 <Lor> Why are the turnstiles reversed in the axioms?
09:56:22 <esap> what do you mean "reversed"?
09:56:47 <Lor> They look like -| instead of |-.
09:56:59 <esap> lor: oh, that stands for adjunction
09:58:41 <esap> lor: from category theory. There is a paper "Fokkinga, Meertens: Adjunctions", which explain it.
09:59:43 <Lor> Right. Have to look into it.
10:00:26 <esap> lor: It's basically a generalization of a Galois connection, if you're familiar with that.
10:01:04 <Lor> Only vaguely.
10:01:29 <_Codex> esap: I thought its just _|_->Top -path.
10:04:41 <esap> I actually had a principle that I would try to define every operation in the language solely based on adjunctions. It's almost possible :-)
10:05:51 <richardt> hello, I'm hoping someone can help me with haskell classes.  I'm having trouble defining a class that acts different for instances against Data.Complex than with some other Num type
10:07:14 <Lor> Why would you want such a thing?
10:07:24 <richardt> I started out with just data Vector a = Vect [a].  I made an instance of Num for it, and made some additional functions with it.  The problem came when I got to the dot product.
10:08:02 <richardt> A dot product of vectors in C^n needs to have 'conjugate' called on some of the entries
10:08:09 <Lor> It can be done with overlapping instances, I think.
10:08:37 <richardt> If I left the call to 'conjugate' in the function, it worked but I got complex numbers for all my vectors then.  I want to leave the real vectors in real space.
10:09:06 <Lor> All right. What you might want to do is create a new class, with a conjugate member.
10:09:20 <richardt> However, no matter how many ways I've tried to define a class Vector that allows that to happen, I can't make it work.
10:09:23 <Lor> Have a special instance for Complex, and have conjugate = id for the rest.
10:10:10 <Lor> Is the conjugation a really standard part of multiplying complex vectors, or is it just something that physicists do?
10:11:21 <richardt> It's just the way it is done.  x `dot' y = sum (x_i*(conjugate y_i))  
10:11:35 <Lor> Yep.
10:11:49 <richardt> for real numbers it reduces down to x 'dot' y = sum (x_i*y_i)
10:11:54 <Lor> I think the auxiliary class would be best.
10:12:07 <Lor> So you can overload conjugation for complex numbers and the other numeric types.
10:12:45 <richardt> Why would a class Vector that has a dot operation be a bad approach?  I would like to understand why I can't make that work.
10:13:12 <richardt> There must be something about the type system I don't understand yet
10:13:57 <Lor> Maybe a better name for such a class would be "Linear".
10:14:21 <richardt> I tried:  class VectClass v where dot :: (Vector v) -> (Vector v) -> v  , but then when I use the instances in any real program, it makes me explicitly give the types of my vectors (claims too much ambiguity)
10:15:12 <richardt> (also forces instances for Integer, Double, ad nauseum.. couldn't make an instance like  (Num a) => VectClass a )
10:15:15 <Lor> Do you _need_ to overload the entire dotproduct, or only the bit about conjugation?
10:15:35 <Lor> Do you intend to have other kinds of instances for "dot" besides those that just sum the products of elements?
10:15:37 <Smerdyakov> richardt, why couldn't you make that instance?
10:16:03 <Lor> You need overlapping instances enabled.
10:17:14 <richardt> Smerdyakov, I get 'Illegal instance declaration...must be of form (T a b c)..."
10:17:30 <Lor> -fglasgow-exts
10:17:44 <Lor> Or in hugs, -98.
10:22:47 <richardt> ok, with  ghc -fglasgow-exts -fallow-undecidable-instances -fallow-overlapping-instance  I get the instances I want, but it still complains at the point of usage that it can't figure out what type of vector I have.  I'm back to saying  l2Norm ((Vect [1,1])::(Vector Double))
10:23:16 <Lor> What's the error message when you omit the type annotation?
10:23:48 <richardt>   Ambiguous type variable(s) `a' in the constraint `CVector a'     arising from use of `l2Norm' at matrix.hs:85
10:24:07 <richardt>   Ambiguous type variable(s) `a' in the constraint `Floating a'     arising from use of `l2Norm' at matrix.hs:85
10:24:39 <richardt> So, I have to annotate it with a type that is compatible with whatever operations are _inside_ the functions I'm calling.  Not very convenient.
10:24:41 <Lor> Probably because of the defaulting.
10:24:43 <Lor> Or lack thereof.
10:25:16 <Lor> Since numeric literals are also overloaded.
10:25:32 <richardt> This whole exercise feels a lot harder than it should be.  Am I taking an entirely wrong approach?
10:25:42 <Lor> Quite possibly.
10:26:27 <richardt> So far my experience with haskell has been a mixture of pure joy and pure hell.  While things are going well, it is great.  The bumps in the road seem to be enormous, though.
10:27:53 <esap> Universally quantified variables sometimes cause trouble if you're not careful. You need to remember that every universally quantified variable must eventually be instantiated to some concrete type.
10:27:55 <Lor> The type classes can be a bit of pain, yes.
10:28:13 <richardt> For instance, I wrote an IRC chat client in just a few hours, and it was a tiny piece of code.  I was amazed.  This vector stuff is like 2 pages, and was fun to write, but now I just want polymorphism on vector types (easy as cake in c++) and have spent 4 hours on it so far.
10:28:43 <Lor> I still think you should just overload conjugation.
10:29:48 <esap> richardt: I would say in C++ using templates is much harder than anything you might try in Haskell.
10:30:21 <richardt> ok, so class Conjugateable a where conj :: a -> a  with instances for (Num a) and (Complex a) is basically what you are suggesting, right?
10:30:52 <Lor> Essentially, yes.
10:31:22 <richardt> ok, I had thought of that, but didn't want to give up on my original approach until I figured out why it didn't work.
10:31:23 <Lor> instance Num a => Conjugateable a where conj = id; instance Conjugateable (Complex a) where conj = conjugate
10:31:47 <Lor> Because that's really the only bit you need to overload. The rest of the dot product is uniform for all types.
10:33:25 <Lor> (Unless you want to generalize to all linear spaces, that is.)
10:33:39 <richardt> esap, well, I've been using template metaprogramming for years now, so it feels easier than haskell at the moment.  I've really enjoyed it so far, though.
10:35:31 <esap> richardt: well template metaprogramming was the reason why I switched to Haskell
10:36:06 <esap> richardt: it was just too kludgy for my taste in C++.
10:36:58 <esap> richardt: in particular, the sizeof operator wreaks havoc in C++ with template metaprogramming.
10:38:15 <richardt> I'm hoping C++0x will take the common kludges and make them language constructs, but haven't seen much of that happening.  It's definetly using a language feature for things it wasn't intended to be used for.
10:42:11 <esap> lor: I put in a corrected version of the http://www.kotiposti.net/epulkkin/summary.dvi [removed all the wrong ones]
10:44:08 <richardt> Lor, I have been playing with it... had to make the second one: instance (RealFloat a) => Conjugateable (Complex a) where
10:44:17 <richardt> due to use of conjugate.
10:44:29 <richardt> I still get the ambiguity error at the usage points, though!
10:44:35 <richardt> so, no progress.
10:46:56 <richardt> even without the vector stuff, an expression like:  map conj ([1,2,4]::[Integer]) is a necessary annotation
10:48:25 <esap> richardt: it's necessary only if you don't use those integers for anything that requires them to be Integer (or put in a type annotation)
10:50:04 <esap> richardt: Usually the problem is some function with type a -> String or a -> Integer or something like that, if you use in conjunction with conversions or something that return universally quantified objects (e.g. fromIntegral)
10:51:47 <esap> richardt: default declarations may help.
10:53:00 <esap> richardt: see http://www.haskell.org/onlinereport/decls.html section 4.3.4.
11:00:05 * esap thinks that 'default' is a kludge. We should really have first-class universally-quantified objects.
11:03:33 <richardt> well, 4.3.4 says that if no default is given, it will be set to (Integer, Double)  I think that's a fine setting for 'conj 1', where defaulting to Integer would be fine.  Anyway, I tried 'default (Integer)' but no luck
11:05:14 <richardt> If the only instance is (Floating a) => Conjugateable a, then  (conj (sqrt 2)) will evaluate.  If I add the instance for Complex a, it is ambiguous again.
11:07:52 <esap> ok, then probably it's just best to define an instance for each concrete type you want (you could use default implementation for the conj to make it easier)
11:08:41 <esap> but I think some of the problem may be in what context do you use the expression 'conj (sqrt 2)'
11:09:01 <esap> because none of those actually fix the type of the expression, they only constrain it.
11:10:14 <richardt> well,  'conjugate (sqrt 2)' works, and its signature is RealFloat a => Complex a -> Complex a.  That's not a concrete type.
11:10:31 <richardt> just constrained to RealFloat, right?
11:11:01 <richardt> I'm trying to understand what Data.Complex has done that I am not doing, which would allow such a thing to happen
11:13:00 <esap> richardt: conjugate has an explicit type annotation. That helps a bit.
11:13:36 <richardt> esap, can you elaborate?
11:15:23 <esap> richardt: 2 :: forall t. (Num t) => t   sqrt :: forall a. (Floating a) => a -> a.  conjugate :: (RealFloat a) => Complex a -> Complex a
11:18:41 <esap> richardt: the type system does require an instantiation for each type variable, but you can also define a type annotation (at top level) to defer that later.
11:19:21 <esap> richardt: there are some cases where specifying a more strict type annotation will cause the type system to resolve those problems automatically.
11:20:50 <richardt> I think the real problem is:  conjugate is only defined for Complex, and it works on '2' and '2.0' via creating Complex types out of them implicitly.  I am trying to make a conj function that does different things on '2' and '2 :+ 3', which is a different setup altogether
11:21:52 <richardt> it doesn't seem to want me to do this, probably because of that implicit conversion mechanism it has keeps it from seeing what to do.
11:22:44 <richardt> now, am I right that it is an implicit mechanism, or is it an explicit mechanism that I can control somehow?  (I certainly don't type anything...I think this is the work of fromInteger, no?)
11:24:35 <esap> richardt: you can control it when you use the conj operation, at least.
11:25:04 <richardt> 2 ==> fromInteger ==> 2 :+ 0 ==> conjugate ==> 2 :+ 0  .  I want 2 ==> conj ==> id ==> 2, but also 2 :+ 0 ==> conj ==> conjugate ==> 2 :+ 0
11:25:50 <richardt> or maybe I have convinced myself I understand what it's doing, but am incorrect about it.
11:27:41 <Igloo> I haven't been following, but do you mean you want conj to do different things depending on the program text but when the type is always inferred as Complex?
11:29:07 <richardt> Igloo, (attempting to be brief)  I have some code that needs to use 'conjugate' on complex types.  I didn't like how that converted even my non-complex invocations to complex, so I wanted to define an operation that was basically 'id' for non-complex, but 'conjugate' for complex.
11:29:47 <richardt> so 2.0 ==> 2.0, but 2 :+ 3 ==> 2.0 :+ (-3.0)
11:32:10 <Igloo> If 2.0 doesn't have type Complex then you just need a type class
11:32:29 <richardt> But every way I've tried to do this, haskell tells me I've made the types ambiguous, and makes me annotate the inputs to the functions.
11:32:51 <esap> richardt: I just quickly implemented your problem: class Conj a where { conj :: a -> a ; conj = id } instance (RealFloat a) => Conj (Complex a) where { conj (x :+ y) = x :+ (-y)   instance Conj Integer   instance Conj Float    instance Conj Double.  This works.
11:32:53 <Igloo> I'd need to see the code
11:33:23 <Igloo> That'll work as long as 2.0 isn't inferred to be of type Complex, yes
11:35:02 <esap> richardt: but it will cause that if you write 'conj 2.0' in the ghci prompt, you get ambiguous type var (as you should), you need to write conj 2.0 :: Double.
11:35:56 <richardt> esap, that's exactly what I've been trying to avoid.  Is there no way to make it 'just work'?
11:36:58 <Igloo> If you put a Num a constraint on it it will be defaulted
11:37:10 <Igloo> It will probably just work anyway in a program rather than out of context on the prompt
11:42:16 <esap> richardt: hmm.. I think the problem is that numeric literals are also overloaded. I think it would not be a good solution to define your own constants with explicit type annotations that make the type more specific? :-)
11:43:21 <esap> richardt: 2.0 has type forall t. (Fractional t) => t, and not Double. If it had type Double, everything would work fine.
11:44:09 <esap> richardt: if you define two = 2.0  two :: Double   then 'conj two' works fine.
11:44:23 <esap> but I guess that's not a good solution.
11:46:43 <richardt> you wouldn't want to put that solution in the haskell brochure anyway
11:48:14 <esap> another thing is if you use the 'conj two' in some context that requires it to be of some specific type. For example, you could define 'print_double :: Double -> String', then 'print_double (conj 2.0)' would work fine.
11:49:58 <esap> but 'show (conj 2.0)' will not work.
11:51:06 <esap> because show :: forall a. (Show a) => a -> String, which is too general to work there.
11:51:39 <richardt> ..and of course show is what my main has been doing all this time. hmm
11:58:58 <richardt> ok, so at least that's a little cleaner..if my top-level functions have explicit type annotations then so far everything below it has no ambiguity.
12:01:10 <richardt> and, I'm back to compiling without any -fxxx extensions, which was bothering me anyway.
14:16:07 <palomer> hello, im trying to do something in functional programming
14:16:16 <palomer> and im finding a hard time how to do it elegantly
14:16:35 <palomer> I have a string, I want to extract the first part of the string, and then the second
14:16:47 <palomer> however, I will only know the length of the first part when im extracting it
14:17:03 <palomer> would I have to write a second function to return the length of the first part?
14:17:56 <Smerdyakov> I don't know of any general notion of "parts of strings" that makes what you just said understandable.
14:18:36 <palomer> ok
14:18:51 <palomer> image a string abcdefgbbbbbbb
14:19:03 <palomer> now the first part ends when I reach an f, inclusive
14:19:09 <palomer> so the second part is gbbbbbbb
14:19:22 <hdaume> you can use elemIndex and splitAt to do that
14:19:27 <palomer> so I would have a function, say first_part, which returns abcdef
14:19:33 <andersca> hey hal
14:19:39 <hdaume> hey andersca
14:20:36 <palomer> my example is simplistic
14:20:49 <palomer> I won't be splitting at a single character
14:20:57 <palomer> I'll be splitting once a predicate has been satisfied
14:21:19 <palomer> actually, the predicate is that the character has its most significant bit turned off
14:22:09 <hdaume> then use findIndex
23:28:36 <shapr> whee
23:34:06 * shapr boings
23:34:37 <shapr> good morning #Haskell!
23:34:45 <Pseudonym> G'day.
23:34:50 <shapr> y0 Pseudonym 
23:34:51 <shapr> wassup?
23:34:59 <Pseudonym> In the coding zone.
23:35:08 <shapr> ooh, nice
23:35:40 <shapr> I have swedish class in a bit
23:36:18 <shapr> I have the SFI test coming up soon, I may graduate out of the class before it's formally over.
