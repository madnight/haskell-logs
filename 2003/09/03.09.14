01:20:04 <shapr> wheee
01:20:08 <shapr> good morning #haskell!
01:21:01 <esap> good morning!
01:21:12 <shapr> hyvää huomenta Esa!
01:21:24 <shapr> what's going on this morning?
01:21:37 <esap> just woke up, so no idea :-)
01:21:44 <shapr> yah, I just woke up too
01:21:57 <shapr> I'm investigating Haskell database connectivity
01:22:07 <shapr> I may be able to use Haskell in my daily web development work
01:23:08 * esap is happy for shapr. I wish I could use Haskell in my work, would make many things easier.
01:23:15 <shapr> what do you do for work?
01:23:28 <esap> Telecommunications networks
01:23:34 <shapr> oh, nifty
01:23:46 <shapr> why can't you use Haskell?
01:23:56 <shapr> does your company have a rule that a certain language must be used?
01:24:30 <esap> well no, but there isn't any libraries [that I know] for the protocols that we have to use.
01:24:42 <shapr> what protocols?
01:24:46 <shapr> SNMP?
01:24:48 <shapr> BGP?
01:24:52 <shapr> ARP?
01:24:56 <esap> well SIP, Diameter, etc.
01:25:24 <shapr> I don't know Diameter
01:25:26 * shapr googles
01:25:55 <shapr> oh
01:27:51 <shapr> wow, diameter is spiffy
01:28:06 <shapr> looks much better than radius to me
01:28:43 <esap> well perhaps, I never had to do anything with radius, so I wouldn't know.
01:29:44 <shapr> what sort of tools would you want/need?
01:30:08 <shapr> I know sip is used for VoIP
01:33:01 <esap> Well I think there are quite many that you would need. Like some means for doing asynchronous communication efficiently.
01:34:08 <esap> The only functional language that comes close to doing anything like that is Erlang, and it would not be sufficient.
01:34:37 <shapr> yes, Erlang has some cool stuff
01:34:48 <shapr> I'd like to steal many of its features for Haskell.
01:37:29 <shapr> the distributed/parallel haskell projects have recently come up with a 'grid computing' version
01:37:42 <shapr> I wonder if they have a nice way of doing async communication
01:38:34 <esap> I'm not familiar with grid computing. What is that?
01:38:55 <shapr> like seti@home or distributed.net
01:39:05 <shapr> it's a way to distribute a program to many computers
01:39:23 <shapr> and those computers can join or leave at any time and the system should handle it all correctly
01:39:53 <shapr> most distributed systems like MPI or PVM require that everything is started synchronously, and that none of the nodes die or disappear
01:40:30 <shapr> well, not totally synchronously, but nowhere close to the grid computing idea
01:40:51 <esap> hmm.. I guess I should look into this grid computing thing.
01:41:34 <shapr> it's nifty stuff
01:41:41 <shapr> but not very complicated
01:45:08 <esap> Hmm.. google could only find a set of workshop invitations for grid computing :-(
02:07:14 <shapr> maybe there's another name for it?
02:10:08 <shapr> at HIM in Stockholm, one of the GdH/GpH guys showed up to give a summary of their current work
02:10:35 <shapr> I asked him if it was possible to use distributed/paralell haskell without changing my current code, he said it requires annotations
02:11:02 <shapr> on the other hand, I know Manuel Chakravarty's data parellel stuff does not require annotations
02:11:09 <shapr> so I'd like to see a translation layer
02:12:40 <esap> You wouldn't expect to be able to use distributed things without annotations.
02:13:06 <shapr> data parallel can
02:13:13 <shapr> so I want a translation
02:13:42 <shapr> http://www.cse.unsw.edu.au/~chak/nepal/
02:15:58 <esap> Well I consider the data parallel stuff also an "annotation" :-) It requires you to solve your problem in a specific way.
02:16:17 <shapr> that's true
02:17:04 <shapr> Lunar^: hey, sebc's box must be down, I can't get to the hOp website.
02:17:37 <shapr> I'd be more willing to express my problems as arrays than to explicitly parallelize them
02:18:50 <esap> Sure. But what you really would like to do is to be able to split your functionality into very small parts based on its functionality, and then parallelize that. [which would be like data parallelism but for functionality]
02:19:18 <shapr> hi Arnia 
02:19:31 <shapr> esap: yes, that would be the best option
02:19:44 <shapr> maybe unsequenced monads would be good for that?
02:19:57 <shapr> undependent monads?
02:20:01 <shapr> what's the real name for those?
02:20:13 <esap> "unsequenced monads"? I thought the idea behind monads was that they sequence things.
02:20:27 <shapr> yes, but SPJ has mentioned that monads sometimes oversequence stuff
02:20:28 <andersca_> hej shapr
02:20:31 <shapr> hej andersca_
02:20:37 <shapr> vad händer?
02:21:12 <esap> shapr: oh you mean like a monad that would only partially order the computation?
02:21:54 <shapr> SPJ mentioned two monads that need to happen between other things, but don't need to be ordered with respect to each other
02:22:55 <shapr> he wants to find a nice syntax for that
02:23:04 <shapr> I wonder if Python's tuple unpacking would fit there
02:23:35 <shapr> (a,b,c) <- (x,y,z)
02:24:28 <shapr> I still don't quite understand how mdo works
02:24:45 <shapr> I think too procedurally
02:25:49 <esap> The fixed point is the real beef there.
02:27:05 * esap is going to get something to eat. bbl
02:28:58 * shapr cleans out his home dir
02:31:54 <shapr> hej tic
02:33:04 <shapr> esap: ah, they're callled commutative monads
02:33:15 <shapr> http://kungens.kemi.fi/~shae/retro/img37.html
02:36:57 <shapr> actually, I'm about to delete that page...
02:39:59 <tic> hejsan shapr
02:40:46 <shapr> vad händer?
02:41:18 <tic> inget särskilt. tänkte rösta, men hittar inte vallokalen. :)  du?
02:41:43 <tic> Ska städa lägenheten, släkten kommer över på kalas kl 14.00
02:43:08 <shapr> det är bra
02:43:21 <shapr> jag maste studera för skolan
02:43:39 <shapr> och koder lite för arbetet
02:43:44 <shapr> jobbet?
02:47:25 <shapr> can Template Haskell be used at runtime?
02:48:00 <shapr> while reading the HaskellDB docs, I realized I'd like to generate 'type safe' queries if possible.
02:48:07 <shapr> and Template Haskell seems the best approach there
02:48:18 <shapr> but I don't know if it can be used at runtime like that.
02:48:22 <shapr> Igloo: ayh?
02:53:11 * shapr bounces cheerfully
03:21:47 <basti_> hi
03:23:08 <Igloo> Hi
03:23:33 <Igloo> It can't, no
03:23:54 <Igloo> But if the schema is available at compile time you could maybe check then
03:29:43 <seafood> hi all
03:37:45 * mgoetze pretends to be all
03:37:47 <mgoetze> hi seafood 
06:29:21 <shapr> hey o3, wassup?
06:29:53 <o3> hihi
06:29:59 <o3> <- back in sydney
06:30:05 <shapr> you guys were at IFL, right?
06:30:25 <o3> yep.  sean and mark are heading to london for a few days now
06:30:31 <shapr> how was IFL?
06:30:50 <o3> quite good!  some very very cool papers there
06:31:28 * shapr looks for the proceedings online
06:31:43 <o3> i don't think they're online yet; the papers are all drafts
06:31:54 <shapr> aww
06:32:31 <o3> some great ones though, especially by the clean folks
06:32:55 <shapr> oh, the nhc98 runtime for PalmOS was presented there?
06:33:27 <o3> yep, although they didn't give a demo, just a bit of a talk about how they did it
06:33:35 <shapr> bah, I want to play with it.
06:33:41 <o3> the hume stuff was also very impressive (functional language for embedded/real-time)
06:34:23 <shapr> looks like a fun conference
06:35:22 <o3> it was much smaller than ICFP :)  maybe ~30 people
06:35:51 <shapr> I've heard IFL is just as important as ICFP in the academic world.
06:38:11 <o3> no idea :)
06:38:15 <o3> it was quite fun though
06:38:25 <o3> although i still zoned out for a few talks about those type system things
06:38:49 <shapr> I'm trying to figure out that type system theory stuff
06:51:38 <shapr> hi pesco 
06:51:53 <Lunar^> shapr: sebc is currently in Italy
06:52:33 <Lunar^> shapr: He will move to a new home after he's return, so currently, hOp's homepage is in a box
06:53:02 <shapr> oh, I see
06:53:09 <shapr> is he moving back to france?
06:54:28 <Lunar^> No, he stays at Edinburgh, just changing appartment
06:54:32 <shapr> ah, ok
06:55:38 <Lunar^> Damn.. I need to work
06:55:44 <shapr> what are you working on?
06:55:51 <Lunar^> Still the same project
06:56:08 <shapr> I should be working too, but I'm writing fun code instead.
06:56:29 <Lunar^> You fax us something with your e-mail on the cover page, we do OCR, you got your RTF
06:56:39 <shapr> sounds like fun
06:57:13 <Lunar^> But 2 weeks ago, I hit Haskell standard libs limit
06:57:24 <shapr> you have to write your own libraries now?
06:57:35 <Lunar^> No, sebc helped me to hack GHC libs
06:57:37 <shapr> ah
06:57:42 <Lunar^> That was a thread on ghc-users
06:57:54 <Lunar^> Anyway, last week I was ill
06:58:00 <shapr> I vaguely recall reading that thread...
06:58:01 <Lunar^> And I'm sooooo late now
06:58:10 <Lunar^> block :: IO a -> IO a
06:58:12 <shapr> are you doing this for school?
06:58:26 <shapr> oh yes, I remember that
06:58:26 <Lunar^> No, the fax line is taxed, we got money that way
07:12:41 * shapr hacks on a lambda cal interpreter
07:13:27 <Igloo> Oh?
07:13:50 <shapr> first I'm trying the totally naive approach with Parsec
07:14:06 <Igloo> What's this for OOI?
07:14:30 <shapr> teaching myself type theory. I hope to fully understand System F and the Odersky and Laufer stuff after this process.
07:14:41 <Igloo> *nod*
07:15:37 <shapr> have you written a lambda cal interpreter?
07:16:23 <Igloo> I think I sent you a tiny one using TH(ish) for the parser
07:16:31 <shapr> oh yah!
07:16:40 <shapr> hei Hipo 
07:16:42 <Lunar^> shapr: why is Parsec "naive" ?
07:16:44 <shapr> mitta kuuluu?
07:17:16 <shapr> Lunar^: because I'm sure there are better approaches, but I want to try it what I know, rather than searching for a better approach as I normally would.
07:17:58 <shapr> my standard heuristic is "problem -> google -> read about many different approaches -> use best/cheapest approach"
07:18:27 <Lunar^> Parsec is quite nice IMHO
07:18:28 <Hipo> Hej shapr. :) Jag försöker studera o'caml.
07:18:50 <shapr> Hipo: heretic!
07:18:55 * shapr is joking
07:19:35 <shapr> it seems that much of the #ocaml activity happens here :-)
07:20:51 <shapr> Igloo: do you understand the Odersky and Laufer extensions to System F?
07:20:59 <shapr> actually, do you understand System F? :-)
07:21:36 <shapr> I'm considering asking Fritz Ruehr to whip up some 'merit badges' for #haskell
07:23:08 <Igloo> I don't know much type theory
07:23:33 <Igloo> I have Pierce's book to read though, but I'm currently trying to finish GEB
07:28:00 <shapr> ah
07:28:01 <shapr> good idea
07:28:04 <shapr> GEB is a spiffy book
07:28:08 <shapr> hej Marvin-- 
07:28:28 <Lunar^> shapr: Is system F an extension to HM ?
07:28:37 <shapr> @foldoc "System F"
07:28:39 <lambdabot> *** "System F" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
07:28:39 <lambdabot> System F
07:28:39 <lambdabot>    A {type system} by J-Y. Girard.  Also known as Lambda-2 or the
07:28:40 <lambdabot>    {polymorphic lambda-calculus}.
07:28:44 <lambdabot>    ["Proofs and Types", J-Y. Girard, Cambridge U Press 1989].
07:28:48 <lambdabot> [3 @more lines]
07:29:19 <shapr> at ICFP I got the impression that System F is the 'standard' type system
07:29:28 <shapr> the one that everyone else compares themselves to
07:30:10 <shapr> g'day clausen 
07:34:04 <Lunar^> shapr: The standard type system actually is Hindley-Minler I think. It's the most used at least
07:34:21 <Lunar^> What is Clean type system based on ?
07:34:29 <shapr> I think it's HM also
07:40:25 <Marvin--> ello
07:40:37 <Marvin--> GEB is a really good book
07:41:16 <Marvin--> shapr: are you talking about the paper the guys from inria wrote?
07:41:33 <Marvin--> the MLF stuff
07:41:59 <shapr> nah, I'm talking about SPJ's presentation at HIM
07:42:03 <Marvin--> oh
07:42:16 <shapr> he was saying something about two way type generalization or something
07:42:20 <Marvin--> JÃ¶rgen was talking about the MLF talk at the multi meeting last Thursday
07:42:32 <shapr> it was based on something by Odersky and Laufer, but it was waaay over my head.
07:42:56 <Lunar^> What's GEB ?
07:44:43 <Marvin--> GÃ¶del Escher Bach
07:44:46 <Marvin--> Douglas Hofstadter
07:44:53 <Marvin--> (the Eternal Golden Braid is the subtitle)
07:45:06 <Marvin--> Douglas Hofstadter is a fun guy
07:51:59 * Marvin-- is writing a short report on how he cracked the crypto assignment
07:55:49 <Verbed> 'Dark needles quaver, a clustered skymap permeates the cold facets of autumn.' -- Does this seem trite?
07:56:07 <Lunar^> mapFM :: (key -> elt1 -> elt2) -> FiniteMap key elt1 -> FiniteMap key elt2
07:56:34 <Lunar^> Is there something like :: (key -> elt -> a) -> FiniteMap key elt -> [a] ?
07:58:36 <Lunar^> mapFM' f = foldFM (\ k v xs -> f k v : xs) [] <-- this will do it
10:37:16 * shapr boings
10:43:38 <Igloo> Looks like the lists are screwed again/still
10:44:35 <shapr> silly question, what's the brazilian portuguese locale name?
10:44:41 <shapr> PT_br ?
10:45:55 <Igloo> /usr/share/i18n/locales/pt_BR exists
10:46:16 <shapr> aha, thanks :-)
11:18:02 <shapr> whee excitement
11:22:22 <whee> excitement in the mouth
11:43:22 <shapr> wheee
11:48:40 <yazirian> ohmygod iranoutintothestreet andididntgethitbyacar andiwaslike WEEEEEEE
12:07:21 <shapr> hey syntax-laptop 
12:07:32 <shapr> hey yazirian, too much amphetamines? :-)
12:08:37 <yazirian> I AM CORNHOLIO
12:08:44 * shapr snickers
12:08:45 <yazirian> hahaha
12:08:47 <shapr> too much coffe man
12:08:55 <yazirian> coke
12:09:04 <yazirian> I'll let you guess which kid
12:09:05 <yazirian> kind
12:09:12 <shapr> diet coke?
12:09:17 <shapr> sugar-free coke?
12:09:19 <yazirian> eww
12:09:28 <yazirian> If you're going to spaz out, I say go all the way
12:09:28 <shapr> DIET SUGAR-FREE COKE??
12:09:32 <shapr> wow
12:09:33 <shapr> scary
12:09:38 <yazirian> but not vanilla
12:09:43 <shapr> that's good to hear
12:09:44 <syntax-laptop> hi shapr
12:10:01 <shapr> y0 syntax-laptop 
12:16:04 <shapr> yay, kernel-source-2.4.22 is in unstable
12:23:08 <syntax-laptop> hey shapr: can you take a fresh look at the main wiki page for LIP and try to spot things I should elaborate on?
12:23:11 <syntax-laptop> how are you, btw?
12:24:06 <syntax-laptop> one thing I'm particularly interested in is whether the overloaded word "package" is ever confusing.
12:25:06 <shapr> sure, I'll check it out
12:25:09 <syntax-laptop> Would you say that the following is representative of packaging systems:
12:25:14 <syntax-laptop> RPM / Debian (really rather similar)
12:25:16 <syntax-laptop> FreeBSD
12:25:18 <syntax-laptop> Python
12:25:29 <syntax-laptop> (Don't know much about Perl's system, however)
12:25:38 <syntax-laptop> (and I might want to elaborate on XEmacs' system)
12:32:39 <syntax-laptop> hey seafood
12:32:45 <seafood> hey syntax.
12:33:14 <seafood> syntax-laptop: almost home. I'll be back in Oz andreleasing PanTHeon real soon.
12:33:32 <seafood> syntax-laptop: My talk on it at IFL went pretty well.
12:33:44 <syntax-laptop> seafood: cool, I saw your blog. congrats :)
12:33:44 <shapr> hey seafood 
12:35:26 <seafood> shapr: Long time no hear.
12:35:51 <seafood> syntax-laptop: sorry the stuff about PanTHeon still has broken links.
12:37:15 <syntax-laptop> I'll look forward to it.
12:37:39 <syntax-laptop> seafood: sorry if I'm repeating myself, but there are one or two pictures of you on my site:
12:37:55 <syntax-laptop> http://www.syntaxpolice.org/pics/londonSweden/
12:37:59 <syntax-laptop> (under ICFP)
13:49:29 <Igloo> No-one has anything from any of the lists in the last day, right?
14:10:25 * esap didn't receive any mails from the lists in the last day, I think.
14:12:21 <syntax-laptop> man IContestFP linked on slashdot, asking where are the results
15:06:23 * steveh unidles.
15:06:46 <steveh> heh, not much activity in 2 hours
15:06:47 <steveh> :)
15:07:03 <syntax-laptop> hi steveh
15:25:43 <steveh> oops
15:25:50 <steveh> guess I lied about unidling
15:25:55 <steveh> actually I was #elsewhere
15:25:57 <steveh> what's new syntax-laptop?
15:29:33 <syntax-laptop> not much; working on this Library Infrastructure Document
15:30:03 * Marvin-- sighs at the general Swedish population
15:30:15 <steveh> oh yeah, how is that progressing anyway?
15:30:21 <syntax-laptop> do you happen to know alot about any of the following: distutils, Xemacs' packaging system, freebsd, cpan, boost, or gentwo
15:30:34 <Marvin--> the Swedish people voted no to the euro, with a *wide* margin
15:30:35 <steveh> I do happen to know quite a bit about freebsd
15:30:37 <steveh> :)
15:30:40 <Marvin--> 56-42 or something like that
15:30:43 <syntax-laptop> steveh: well, every time I post about it, no one seems to know what I'm talking about, so I've been asked to write a comprehensive document.
15:31:02 <steveh> i am familiar with cpan and gentoo
15:31:11 <Marvin--> syntax-laptop: I know distutils
15:31:13 <syntax-laptop> gentoo, excuse me.
15:31:25 <syntax-laptop> ooh ooh
15:31:38 <steveh> ... but only as a user
15:31:39 <steveh> :)
15:31:48 <syntax-laptop> I know gentoo is a source distro, is there any fundamental diff between gentoo and freeBSD as far as the packaging system goes?
15:32:52 <syntax-laptop> do either of you feel like doing little writeups about those systems for this document? just a few paragraphs sayign whats good / bad about them, and maybe comparing them to eachother a bit?
15:33:22 <steveh> i can do a writeup about freebsd perhaps
15:33:36 <isomer> syntax-laptop: http://forums.gentoo.org/viewtopic.php?t=83736&highlight=bsd+ports+portage
15:33:36 <steveh> as far as portage vs ports goes, there's not a huge difference
15:33:44 <isomer> a comparison of ports and portage...
15:34:35 <syntax-laptop> cool
15:35:07 <steveh> i don't know that the design is the best idea for a haskell library archive
15:36:22 <steveh> well, the abstract design is the same idea everywhere, install libraries and keep track of dependencies
15:36:37 <syntax-laptop> here's my writeup for the Debian system: http://monk.debian.net/MonkWiki/IsaacJones
15:36:42 <steveh> but ports and portage are more geared towards unix system software
15:37:05 <syntax-laptop> maybe you guys could write similar things for those other systems.
15:37:26 <syntax-laptop> I'm grouping together systems which are roughly similar, and I was thinking that FreeBSD and gentoo were pretty similar from our perspective.
15:37:44 <syntax-laptop> steveh: you mean you don't know if FreeBSD/gentoo is a good design for the haskell libraries?
15:38:07 <steveh> well, the implementation, mostly
15:38:25 <steveh> one uses BSD make and the other uses bash, right?
15:38:38 <syntax-laptop> The reason I have this appendix is that I want to point out good features of a bunch of different systems and pick among the best of them.
15:39:25 <syntax-laptop> (pick among the features, that is, not among the systems)
15:39:29 <steveh> aah
15:39:32 <steveh> makes sense
15:40:32 <syntax-laptop> But since Debian's system solves all my problems (at least until I started using Haskell!), and since i've decided to standardize on that, I don't really know much about other systems.
15:40:45 <syntax-laptop> I did use freeBSD for a few months, though.
15:41:40 <Marvin--> isn't this sort of the wrong level? Don't we want the coordination at sort of the "end points"? We want to unify how library developers package their software, and we want to unify how the haskell compilers find the libraries... how they get from the developer to the user is sort of a different thing and can be Debian, gentoo or whatever...
15:42:18 <steveh> dependency resolution is always the sticky point
15:43:41 <Marvin--> at which point? the compiler or the distribution?
15:44:02 <Marvin--> I don't really see the problem
15:44:55 <steveh> well, I'm thinking mostly of what happens when backwards compatibility is broken
15:45:08 <syntax-laptop> Marvin--: all of those systems are relevant to the discussion because we want a system which can support packaging on each system.
15:45:29 <Marvin--> of course
15:45:40 <syntax-laptop> Marvin--: some are more directly relivant than others, for instance, Debian does a really good job expressing dependancies
15:45:44 <Lunar^> Should backward compatibility plague Haskell ?
15:45:53 <steveh> Lunar^: that is a salient point
15:45:54 <steveh> :)
15:45:57 <syntax-laptop> DistUtils does a lot of what we want and abstracts things on the right level (imho)
15:46:19 <steveh> that's python
15:46:19 <Marvin--> Lunar^: it does, code compiled with ghc X.Y.Z doesn't necessarily work with code compiled with ghc X.Y.W from what I understand
15:46:22 <steveh> mmm python
15:46:22 <Marvin--> syntax-laptop: that's my opinion too
15:46:33 <steveh> definitely go with python
15:46:41 <syntax-laptop> Marvin--: xemacs solves a bunch of the same problems that we have outside of any external packaging system, and is interesting in that respect.
15:46:54 <syntax-laptop> CPAN and Boost are interesting on a different level: distribution
15:47:09 <syntax-laptop> Debian is also interesting because it does a good job layering tools that each have clearly defined tasks
15:47:20 <syntax-laptop> So this is why I want a nice appendix :)
15:50:29 <syntax-laptop> Marvin--: do you know how mature DistUtil's configuratino stuff is? (I'm talking about autoconf-type stuff here)
15:51:03 <Marvin--> syntax-laptop: I didn't know there was one at all,if there is I haven't used it
15:51:35 <Marvin--> wow, look at the time, I have things to do tomorrow
15:51:35 <yazirian> distutils is really very nice
15:51:37 <Marvin--> good night people
15:52:02 <syntax-laptop> 'night Marvin--
15:52:13 <syntax-laptop> yazirian: know anything about configuratino?
15:52:23 <syntax-laptop> That's something I"m pretty aprehensive about
15:53:08 <yazirian> from the perspective of assembling a package for distribution to end users?
15:54:12 <syntax-laptop> well, configuring a package for the end user's specific system.
15:54:28 <yazirian> distutils seems to be very good at that
15:54:44 <yazirian> I have personally seen it work on linux, solaris, tru64 and win32
15:56:09 <syntax-laptop> yeah. I think they have a module that performs a job like autoconf, but I'm not sure how good it is, wehether it can replace autoconf
15:56:21 <yazirian> I sure hope so, autoconf is so nasty :)
15:56:42 <syntax-laptop> but robust :)
15:57:45 <cm> hiho
15:57:48 <yazirian> it looks like they ship distutils with compiler descriptiosn
15:58:18 <syntax-laptop> hi cm
15:58:25 <syntax-laptop> yazirian: what does this description do?
15:58:25 <cm> hi syntax
15:58:38 <cm> hello Riastrad1
15:59:19 <yazirian> the std python install, as part of the developer support, installs some build settings which it is able to inspect; things like what the prefix location was, and what CFLAGS were used, etc.
16:00:26 <yazirian> it looks like it's checking that out and assembling command roots, a lot like the most basic stuff that make does
16:01:27 <syntax-laptop> yeah, that is good stuff.
16:01:57 <syntax-laptop> but what if someone installs a C compiler, then installs, python, then changes the C compiler.  That configuration information isn't available to the installing package?
16:02:01 <yazirian> have you seen the distutils-sig site?
16:02:11 <syntax-laptop> yazirian: yeah
16:03:56 <yazirian> It's going to try to use the same stuff that python itself used; presumably that ensures any C code will stay binary compatible.
16:04:25 <yazirian> I don't personally know how to alter the compiler used, but I'm betting it can be done. 
16:04:53 <yazirian> Chances are though, if they just upgrade their compiler in-place, then it's going to try using that similarly to how it would've used the old one. 
16:05:16 <yazirian> And any problems they'll have with any other binary compatibilities throughout their system resulting from the compiler change will exist there.
16:05:23 <cm> hm, i wonder, is there a definition of "scripting language"?
16:05:35 <syntax-laptop> yeah, I'm just saying that there is more configuration information than what is available at python-compile time.
16:05:45 <yazirian> cm: My personal one is "what you call a language when you want other people to think it is a toy" ;)
16:05:54 <cm> :)
16:06:35 <cm> i like that, hehe.
16:07:53 <syntax-laptop> heh
16:08:52 <yazirian> seriously though, how many times do (for example) a Java programmer say something like "Well, you COULD do it in php, but it's just a web scripting language." 
16:09:03 <yazirian> silliness I say! :)
16:10:17 <cm> yeah, as much as I dislike PHP doing it at work, I'm not sure I wanted to change the language to Java. Maybe the "typical java programmer" is less of a "script kiddie" or there are better libraries out there, but I dunno.
16:10:24 <cm> in PHP at least I have faked closures :-)
16:17:51 <yazirian> Java is a scheme hatched by Sun to sell servers. 
16:30:28 <rpr> One thing about Java is it will have commercial pressure to continue to evolve.  (ie c#)  For example, Java 1.5 has/may have some syntaxtic sugar for iterations, and generics, and they even considered tuples for multiple return values (didn't make it but will be reviewed again in the future.)
16:31:24 <mgoetze> yazirian: a scheme? no, i'd say java is a cobol hatched by sun... ;)
16:31:51 <cm> rpr: 1.9 gonna have macros? ;)
16:34:37 <isomer> heck at this rate in 20 or 30 years, java will have all of the trappings (but none of the substance) of a real computer language! i'm so excited.
16:35:21 * isomer bounces with mock fervor
16:45:47 <rpr> don't want to start a Java debate. But :) Again it will evolve pretty fast.  ML is older then C++, Haskell is older then Java.  Java 1.5 has generics, varargs, foreach iteration.  AspectJ is bringing  CLOS lite.  Tuples almost made it with multiple return values. Java 10 years from now will look decidedly differnt then today.
16:46:33 <rpr> But it will always be an imperative, statment based OO based language in its core.  Haskell is safe :)
17:42:28 <cm> nn
18:09:29 <Tomasso> if i have const::a -> b -> a const x y = x, whats the value of const infinite 2 ????
18:09:35 <Tomasso> isnt it infinite????
18:10:17 <Darius> @eval const 5 10
18:10:17 <lambdabot> 5
18:10:57 <Tomasso> but with infinite??
18:11:55 <Tomasso> how do i say infinite in haskell?
18:12:05 <Tomasso> to evaluate the expression
18:12:15 <Tomasso> (didnt know const was defined)
18:12:15 <Darius> What do you mean by "infinite"?
18:12:29 <Tomasso> something that never ends...
18:12:52 <Tomasso> my theory notes talks about a theoretical value called botton
18:12:55 <Tomasso> bottom
18:14:05 <Darius> It doesn't matter in this case, const x y -=> x no matter what x is.  Maybe you mean const 2 infinite which reduces to 2 using call-by-name and loops using call-by-value.
18:14:44 <Darius> Also bottom/undefined/omega are the typical names for what you mean by 'infinite'
18:14:56 <Tomasso> Darius: doesnt const 2 infinite return 2?
18:15:36 <Tomasso> mhmh
18:15:51 <Tomasso> ERROR - Cannot find "show" function for:
18:15:51 <Tomasso> *** Expression : const undefined 10
18:15:51 <Tomasso> *** Of type    : a
18:16:21 <Darius> A better example is 
18:16:30 <Darius> @eval const (1/0) 10
18:16:30 <lambdabot> divide by zero
18:16:44 <Darius> @eval const 10 (1/0)
18:16:44 <lambdabot> 10
18:17:14 <Darius> In call-by-value, both would result in 'divide by zero'
18:17:35 <Tomasso> what you mean for call-by-value?
18:19:01 <Darius> Call-by-value is strict evaluation.  It's what most languages are.  The arguments are evaluated to a value before being passed to a function.
18:19:32 <Tomasso> i see
19:46:25 <Riastradh> Has anyone here bought or heard from someone who bought the t-shirt at http://www.cafeshops.com/skicalc ?
19:55:15 <isomer> no, but i love the shirt
19:56:12 <Riastradh> I still haven't found out if the shirt itself is of decent quality or if the design comes out OK.
19:57:43 <isomer> it says the shirts are Hanes Beefy-T's, so... they're pretty good quality. as for the printing, who knows?
19:57:55 <Riastradh> The people who have received the shirts know.
19:58:45 <isomer> hehe
20:04:22 <Riastradh> I guess no one brought any to the Haskell Workshop...
22:35:39 * Cale is away: sleep.
23:01:41 <harsha123> shapr: hello.. 
23:01:52 <harsha123> shapr: how was your weekend?
23:03:57 <shapr> argh, I stayed up too late last night reading
23:04:16 <shapr> discipline is a good thing, I wish I had more of it :-)
23:05:16 <harsha123> shapr: hmm hard worker ;)
23:06:03 <shapr> have you tried writing an email filter?
23:18:55 <harsha123> shapr: nopes this office work is keepin my busy..
23:19:15 <harsha123> shapr: just downloaded a few dox on haskell
23:19:38 <harsha123> shapr: "a gentel introduction to haskell"
23:20:39 <shapr> that's a good start
23:21:42 <harsha123> shapr: but it says .. haskell 98.. is that fine?
23:24:34 <shapr> sure, that's fine
23:24:41 <harsha123> shapr:  ok
23:24:52 <adept> hi all
23:25:08 <harsha123> adept: hi
23:25:27 <adept> harsha123: 
