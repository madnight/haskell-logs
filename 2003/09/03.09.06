03:11:58 <shapr> @yow
03:11:58 <lambdabot> Where's the Coke machine?  Tell me a joke!!
03:14:56 <shapr> w00
03:15:33 <shapr> will the excitement never cease?
03:15:49 <shapr> so, is the bcpierce book the best way to understand System F from the ground up?
03:30:38 <Lor> Probably, yeah.
03:31:25 <Lor> It definitely gives you system F in its proper context, as a calculus among others. (But with some nifty features.)
03:31:37 <ibid> what is system f?
03:31:52 <ibid> (the name does not ring a bell)
03:31:57 <Lor> F_2 is the explicitly typed polymorphic lambda calculus.
03:32:14 <Lor> with big-Lambda type abstraction and []-type application.
03:32:32 <Lor> F_omega is the higher-kinded variant.
03:32:56 <Lor> Actually, I'm not sure which one people usually refer to when speaking of "System F".
03:33:29 <ibid> hmmhmm
03:33:30 <Lor> And actually not even sure whether it's F_2 or F^2. :)
03:33:35 <ibid> strange name for that :)
03:33:41 <Lor> Both are probably used.
03:33:47 <Lor> Blame Girard.
03:33:55 <ibid> why?
03:34:02 <Lor> 'Cos he dunnit. :)
03:35:45 <ibid> hmhm
03:42:23 <shapr> andersca: neat, ipv6
03:42:27 <shapr> I gotta try that
03:43:07 <andersca> :)
03:43:19 <shapr> Lor: do you know of any online freely downloadable info on System F? my book budget has too many constraints to handle at the moment.
03:43:54 <shapr> hi whee 
03:44:36 <whee> hola
03:47:08 <shapr> @foldoc "system f"
03:47:09 <lambdabot> *** "System F" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
03:47:09 <lambdabot> System F
03:47:09 <lambdabot>    A {type system} by J-Y. Girard.  Also known as Lambda-2 or the
03:47:10 <lambdabot>    {polymorphic lambda-calculus}.
03:47:14 <lambdabot>    ["Proofs and Types", J-Y. Girard, Cambridge U Press 1989].
03:47:18 <lambdabot> [3 @more lines]
03:47:36 <shapr> @foldoc "polymorphic lambda-calculus"
03:47:37 <lambdabot> *** "polymorphic lambda-calculus" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
03:47:37 <lambdabot> polymorphic lambda-calculus
03:47:37 <lambdabot>    (Or "second order typed lambda-calculus").  An extension of
03:47:38 <lambdabot>    {typed lambda-calculus} allowing functions which take types as
03:47:40 <lambdabot>    parameters.  E.g. the {polymorphic} function "twice" may be
03:47:42 <lambdabot>    written:
03:47:46 <lambdabot> [23 @more lines]
03:48:00 <shapr> @foldoc "typed lambda-calculus"
03:48:01 <lambdabot> *** "typed lambda-calculus" foldoc "The Free On-line Dictionary of Computing (09 FEB 02)"
03:48:01 <lambdabot> typed lambda-calculus
03:48:01 <lambdabot>    <theory> (TLC) A variety of {lambda-calculus} in which every
03:48:01 <lambdabot>    term is labelled with a {type}.
03:48:05 <lambdabot>    A {function application} (A B) is only synctactically valid if
03:48:07 <lambdabot>    A has type s --> t, where the type of B is s (or an {instance}
03:48:09 <lambdabot> [12 @more lines]
03:48:18 <shapr> see, now you know everything about functional programming :-)
03:59:18 <Lor> shapr, has your thirst for information been satisfied now?
04:22:49 <shapr> yes, now I am an expert!
04:23:53 <Lor> Now you know why it's cool that F2 is strongly normalizing?
04:24:44 <clausen> has there been any research on comparing if two algorithms are equivalent?
04:25:50 <Lor> Rice's theorem has sort of discouraged it, I think.
04:26:00 <Jerub> clausen: lots.
04:26:02 <Igloo> That's effectively the same as showing two functions are equivalent isn't it?
04:26:06 <Igloo> i.e. shown to be undecidable
04:26:10 <clausen> Lor: I'm not concerned with algorithms
04:26:30 <clausen> i.e. I don't want an algorithm to decide if A = B
04:26:45 <clausen> a mathematical framework would be fine :)
04:26:57 <Lor> So you want a definition for "equivalence"?
04:27:01 <clausen> yep
04:27:05 <clausen> so, if there are two implementations of quicksort
04:27:08 <clausen> I want A = B
04:27:13 <clausen> I want mergesort != quicksort
04:27:22 <shapr> you could compare parse trees
04:27:35 <clausen> Igloo: I don't want to do this no
04:27:42 <shapr> other than that, I think you've run across the Entscheidungssproblem
04:27:51 <Igloo> In what sense is mergesort != quicksort? Or do you mean stability?
04:27:51 <clausen> Igloo: eg: if the running time is different, I want to know
04:28:02 <shapr> hi Arnia 
04:28:04 <clausen> Igloo: I mean "algorithmic steps"
04:28:08 <Lor> All right, A = B: dom(A)=dom(B) & range(A)=range(B) & \forall x \in dom(A). A(x)=B(x)
04:28:14 <clausen> me and a friend was thinking about it
04:28:15 <Lor> That's mathematical for you. :)
04:28:20 <clausen> Lor: that isn't what I have in mind
04:28:26 <Igloo> So you want quicksort == insertionsort?
04:28:28 <clausen> lets put it in terms of Turing machines
04:28:31 <clausen> Igloo: no
04:28:38 <Lor> You want complexity classes?
04:28:41 <clausen> Lor: no
04:28:41 <shapr> you might be able to use the bananas and lenses stuff to factor out various stuff and end up with the big O complexity
04:28:45 <Igloo> I still don't understand then
04:29:00 <clausen> O(A) != O(B) => A != B
04:29:03 <clausen> (but not the converse)
04:29:07 <Igloo> If two algorithms aren't identical then they might be compiled differently
04:29:13 <clausen> Igloo: indeed
04:29:23 <clausen> so, I guess I want a good definition of "equivalent"
04:29:24 <Igloo> So you just want structural equality
04:29:34 <clausen> I've been thinking about transforming running state of Turing machines
04:29:42 <clausen> so, if you have a Turing machine A for mergesort
04:29:46 <clausen> and B for quicksort
04:29:55 <clausen> and if you can transform the state of A into B in, say, linear time
04:29:58 <clausen> then they are equivalent
04:30:30 <Igloo> Why do you want this?
04:30:30 <clausen> (this is one proposal I have)
04:30:38 <clausen> it's not particularly useful
04:30:46 <clausen> just an interesting problem, IMHO
04:31:04 <Igloo> So it's just for fun, not uni or work related?
04:31:07 <clausen> correct
04:31:23 <Lor> So you want to formalize a somewhat arbitrary equivalence relation between structural and extensional equality?
04:31:23 <shapr> I'd like to be able to compare parse trees
04:31:39 <clausen> shapr: so, how do you decide if two parse trees are equivalent?
04:31:41 <shapr> intensional and extensional equality?
04:31:45 <Lor> Parse trees can be compared, even modulo alpha. But that's not particularly useful.
04:31:52 <clausen> what's so special about a parse tree? (as opposed to turing machines?)
04:31:52 <shapr> clausen: compare all the branches
04:32:03 <Lor> Extensional is the "gives the same result" equality.
04:32:26 <shapr> it's easy to compare structure
04:32:26 <Jerub> shapr: that implies that an algorithms implementation doesn't have dead ends/dead code.
04:32:38 <Jerub> i.e. Assignment of variables that aren't used, etc.
04:32:44 <Igloo> It can't be decidable at all points of execution of arbitrary programs or you'd be able to do functional equivalence
04:32:45 <shapr> Jerub: yah, I know.
04:32:50 <shapr> even that subset would be nice.
04:32:54 <clausen> well, I want *any* quicksort implementations A and B to have A=B 
04:33:08 <shapr> in Python at least, lambda x:x+1 != lambda x:x+1
04:33:12 <Jerub> clausen: comparison of interim states?
04:33:24 <clausen> Jerub: well, that's what I proposed above
04:33:30 <Igloo> I'm not sure that is true, clausen
04:33:42 <Lor> clausen, how do you define quicksort?
04:33:42 <shapr> that sounds like how QuickCheck checks infinite lists for equality
04:33:45 <clausen> Jerub: (well, existance of a linear time state transformer)
04:34:00 <Lor> There are variants to that, just as to any other algorithm.
04:34:01 <clausen> Lor: qsort(3) ?
04:34:03 <Igloo> If you do different things with elements equal to x then I'm not sure you can convert state in linear time. I'm not sure you can't either, though
04:34:13 <Lor> clausen, that's not even an algorithm.
04:34:18 <Lor> glibc uses mergesort as qsort
04:34:33 <clausen> Lor: perhaps it's a *subjective* question as to whether two quicksort implementations are "the same"
04:34:44 <clausen> Lor: in any case, I'm interested in considering different "=" relations
04:34:47 <shapr> I'm interested in structural equality checking so that I can have a language like Haskell where everything really can be traced back to the SKI combinators, even if it uses supercombinators in the implementation
04:34:49 <Lor> Indeed. That's why it seems impossible to formalize.
04:34:57 <clausen> Lor: and see which ones seem to match up with intuition
04:35:12 <shapr> the comparison would let you implement new supercombinators as long they fit the behaviour.
04:35:17 <Lor> Granted, it is an interesting question.
04:36:22 <clausen> so, any ideas where to look for literature?
04:36:48 <clausen> BTW, me and a friend considered measuring dist(A, B) as "complexity class of state transformer"
04:37:08 <clausen> so, quicksort and mergesort are certainly O(n^2) equivalent
04:37:20 <clausen> but probably not O(n)-equivalent
04:38:17 <Igloo> Actually, they're O(1)-equivalent
04:38:34 <Igloo> Because whatever the state is you can start at the beginning of the other one
04:39:08 <Igloo> Well, in an imperative language anyway
04:39:12 <clausen> Igloo: nonono
04:39:26 <clausen> Igloo: the "n" there is "how much state is left to process"
04:39:28 <clausen> or something like that
04:39:47 <clausen> (actually, better to think in terms of running time)
04:40:10 <clausen> (n is the time-to-finish for algorithm A)
04:40:42 <clausen> I should write out the complete definition... the details were tricky
04:42:27 * clausen writing up
05:10:33 <clausen> members.optusnet.com.au/clausen/ideas/equivalence.txt
05:10:39 <clausen> (first cut)
05:14:47 <Igloo> BA(AB(S(A, I, t1))) = S(A, I, t1) means they have to have exactly the same number of operations
05:15:08 <clausen> hmmm
05:15:24 <clausen> I actually had a more general definition before
05:15:52 <clausen> ah
05:15:58 <clausen> perhaps we can adjust it:
05:16:06 <clausen> there exists t1' > t1
05:16:18 <clausen> such that BA(AB(S(A, I, t1))) = S(A, I, t1')
05:16:22 <clausen> (t1' >= t1, rather)
05:16:29 <Igloo> So BA can just run B to completion then
05:17:02 <clausen> it has a bound on it's running time
05:17:03 <Igloo> You might do better to define synchronisation points with a maximum time, or time complexity or something, between them for which the original holds
05:17:25 <clausen> oh, I see
05:17:28 <clausen> hmmm
05:17:43 <clausen> actually, I think the defn is ok
05:17:51 <Igloo> As long as you are happy with any 2 sorting algs being O(n log n) equivalent that's OK
05:18:02 <clausen> I am happy with that
05:23:17 <clausen> Igloo: could you refresh, and read the "discussion" ?
05:25:06 <Igloo> *nod*
05:25:28 * clausen wondering how to proceed
05:25:39 <Igloo> So how do you envisage this working with a lazy language?
05:25:49 <Igloo> And between imperative and functional languages
05:26:02 <clausen> a lazy program can be transformed into a turing machine
05:26:14 <clausen> you should be able to compare the resulting turing machines, right?
05:26:25 <Igloo> Ah, hmm, OK
05:26:28 <clausen> so, I guess the question is: do such transformations break equivalence?
05:26:34 <clausen> dunno!
05:27:26 <Igloo> So actually, for lazy languages you might need more than n log n just to collect the state together
05:27:46 <Igloo> s/lazy/pure functional/
05:28:21 <clausen> why?
05:29:40 <Igloo> Wouldn't the elements be spread around the tape?
05:30:03 <clausen> is that a problem?
05:30:09 <clausen> it is O(n), not n time ;)
05:30:24 <clausen> is 1000n enough?
05:30:50 <Igloo> If you need to follow pointers for each recursive call made so far then possibly not
05:31:05 <clausen> any permutation can be done in linear time, right?
05:31:17 <Igloo> I don't really know what the program would look like
05:31:26 <Igloo> permutation?
05:31:34 <clausen> well, imagine a bit array
05:32:02 <clausen> a permutation can be written like (1 3 6 4) (2 5)
05:32:10 <clausen> which means, 1 -> 3, 3 -> 6
05:32:11 <clausen> etc.
05:32:20 <clausen> so, such a permutation can be executed in linear time, right?
05:32:26 <Igloo> I'd have thought that was quadratic on a TM
05:32:33 <clausen> I don't think so
05:32:40 * clausen thinks
05:32:40 <Igloo> Anyway, I don't see the relevence
05:32:53 <Igloo> The problem is to find out which bits of the tape are the elements
05:32:55 <clausen> well, I think most transformations will be able to be expressed as permutations
05:33:10 <clausen> Igloo: yeah, perhaps
05:33:14 <Igloo> Yes, but you have to work out what permutation you want
05:33:27 <clausen> ok, doing permutations in O(n) time is a prerequisite then ;)
05:33:59 <clausen> hmmm, you might be right... I think it is O(n^2) time
05:35:02 <Igloo> I'm fairly sure it is, e.g. if you have 2n elements and you want to swap (0, n), (1, n+2), ... (n-1, 2n)
05:35:03 <clausen> if we add a "move left/right n" instruction, it is O(n), right?
05:35:27 <Igloo> Once you have worked out the permutation you want, yes
05:36:00 <clausen> ok, so the fact that we need a special turing machine mean that turing machines are the wrong things to consider?
05:36:11 <clausen> also, does it mean that transformations are likely to be fragile?
05:37:17 <clausen> perhaps register machines are better?
05:40:36 <Lor> Anything is better that TMs. :)
05:41:27 <clausen> hehe
05:41:39 <clausen> the amusing thing is that Turing actually built one!
05:42:17 <Igloo> Where did he find an infinitely long tape?
05:42:23 <Lor> Do you know the TM-in-Life?
05:43:24 <Lor> Eek, it's offline!
05:43:49 <clausen> Igloo: good point... it was finite ;)
05:43:58 <clausen> TM-in-Life?
05:44:33 <Lor> Gah, even archive.org is broken.
05:44:56 <Lor> http://www.google.fi/search?q=cache:bsGVOhVUIgAJ:rendell.server.org.uk/gol/tm.htm
05:45:06 <Lor> It's not nearly as impressive without the pictures.
05:51:25 * clausen tired
05:52:06 <clausen> good night...
05:56:27 <Jerub> Lor: so hit images.google.com ;
05:56:32 <Jerub> ;)
05:59:45 <Lor> It would be nice to have a proxy that relayed everything to google's cache and rewrote the links appropriately.
08:21:46 <blackdog> 'lo? any haskell hackers in the house?
08:22:44 <Lor> Somewhat.
08:23:50 <blackdog> ah. g'day, Lauri.
08:24:06 <blackdog> this place isn't quite as pumping as Shae had led me to believe...
08:24:17 <Lor> Well, it's Saturday.
08:25:57 <Riastradh> And it's the morning.
08:26:01 <Riastradh> If you have a question, ask it.
08:26:14 <Lor> Evening, more like it.
08:26:22 <Cale> 11:23 here
08:26:33 <Lor> Funny, it's 18:26 here.
08:26:39 <Riastradh> 11.14 (i.e. morning) here.
08:26:43 <Lor> Didn't know that there are three minute timezones. :)
08:26:57 <Cale> heh
08:27:06 <Riastradh> Or nine minute time zones.
08:27:33 <Cale> yes, 11:27
08:27:43 <blackdog> no question - my intentions were purely social.
08:27:46 <Cale> just resynched with nist. :)
08:28:01 <Cale> stupid clock seems to drift a whole lot
08:28:10 <Riastradh> Funny.  irssi shows a different time than my clock in the corner.
08:28:14 <Lor> You don't use NTP?
08:28:34 <Cale> ntp?
08:28:50 <Lor> The thingamajig that keeps your clock accurate.
08:28:59 <Cale> I usually just "rdate time.nist.gov" every once in a while.
08:29:46 <Cale> I ought to add it to cron.
08:30:29 <Cale> anyway. I'm moving soon, so I'd better pack up my computer.
08:31:07 <Lor> Really, ntp is the right thing to use if you have an internet connection...
08:31:08 <Lor> doh.
08:42:39 <jak> quick question guys: how do you convert betwen characters and numbers (ord/chr) ?
08:44:20 <Lor> Uh, with ord and chr? What's the question?
08:44:38 <Lor> Or do you mean how to parse a decimal representation of a number?
08:44:40 <Lor> And print one?
08:45:38 <jak> Lor: I thought it might be something else -- ord/chr don't seem to be part of the Prelude but rather in module Char.
09:19:58 <meep_> yeah, you have to import the Char module
20:29:21 <flippo> @yow
20:29:21 <lambdabot> Should I start with the time I SWITCHED personalities with a BEATNIK
20:29:21 <lambdabot>  hair stylist or my failure to refer five TEENAGERS to a good OCULIST?
21:53:33 <Binkley> @yow
21:53:33 <lambdabot> Yow!  Is my fallout shelter termite proof?
23:27:05 * shapr boings
23:27:31 <Jerub> heya shapr.
23:27:40 <shapr> y0 Jerub 
23:27:43 <shapr> wassup?
23:28:49 <Jerub> just playing with stuff.
23:28:54 <shapr> Haskell stuff?
23:28:56 <Jerub> I shoudl be testing tutorials and stuff.
23:29:11 <Jerub> no, not haskell stuff.
23:29:27 <shapr> aw
23:40:07 <shapr> @news
23:40:07 <lambdabot> Sorry, I don't know the command "news", try "lambdabot: @listcommands"
23:41:22 <shapr> @yow
23:41:23 <lambdabot> If I pull this SWITCH I'll be RITA HAYWORTH!!  Or a SCIENTOLOGIST!
