03:26:57 * c4t is away: lunch
07:52:55 <shapr> @arr
07:52:55 <lambdabot> Drink up, me hearties
07:53:20 * shapr snickers
07:53:50 <shapr> @arr
07:53:50 <lambdabot> Drink up, me hearties
07:53:52 <shapr> @arr
07:53:52 <lambdabot> Smartly me lass
07:53:55 <shapr> @arr
07:53:56 <lambdabot> Arrr!
07:54:02 * shapr entertains himself
07:54:10 <shapr> @arr
07:54:10 <lambdabot> Get out of me way, yeh landlubber
07:55:08 <shapr> @arr
07:55:09 <lambdabot> Aye Aye Cap'n
07:56:13 <dennisb> Savvy!
07:56:35 <shapr> I wrote a chooseRandom function that's used for @yow, @fortune, and @arr
07:56:46 <shapr> I think it would be useful to have in the standard System.Random library
07:57:01 <dennisb> It chooses a random element in a list?
07:57:04 <shapr> it takes a StdGen and a list
07:57:06 <shapr> yes, exactly
07:57:24 <dennisb> yea, that would fit nicely in the lib
07:57:24 <shapr> and it returns the chosen element and the new pRNG
07:57:35 <shapr> so that you can save the new seed for the next call.
08:02:31 <shapr> hi whee
08:04:11 <whee> hai
09:04:43 <isomer> shapr: wanna hear something mindboggling?
09:04:49 <isomer> shapr: http://www.timbarsky.com/media/mp3s/sophis.mp3
09:14:29 <Arnia> shapr: I've been a bad boy ;)
11:05:19 <Xcalibor> back :)
11:57:31 <shapr> Arnia: eh?
11:57:34 <shapr> @arr
11:57:34 <lambdabot> Aye
11:57:36 <shapr> @arr
11:57:37 <lambdabot> Drink up, me hearties
11:57:39 <shapr> @arr
11:57:39 <lambdabot> Aye Aye Cap'n
11:57:40 <shapr> @arr
11:57:40 <lambdabot> Ahoy mateys
12:09:29 <yazirian> hahaha
12:09:35 <yazirian> @arr
12:09:35 <lambdabot> Aye Aye Cap'n
12:09:38 <yazirian> awesome
12:26:10 <Xcalibor> @arr
12:26:10 <lambdabot> Arrr!
12:26:33 <Xcalibor> shapr: you commented that you saved the seed for one run to the next?
12:27:44 <Xcalibor> @fortune
12:27:44 <lambdabot> 	"The jig's up, Elman."
12:27:44 <lambdabot> 	"Which jig?"
12:27:44 <lambdabot> 		-- Jeff Elman
12:36:09 <Riastradh> @yow
12:36:10 <lambdabot> UH-OH!!  I put on ``GREAT HEAD-ON TRAIN COLLISIONS of the 50's''
12:36:10 <lambdabot>  by mistake!!!
13:24:25 <Riastradh> The HaWiki has been quiet lately...
13:28:06 <esap> wonder why
13:28:42 <esap> should put in some good debates there or something to attract people.
13:36:53 <esap> Hmm.. here's a question: Why do circular lists have the same type as non-circular ones?
13:38:18 <Smerdyakov> Why not?
13:38:45 <esap> They have structure, one is coalgebraic and another is algebraic.
13:38:54 <esap> s/structure/different structure/
13:39:17 <Smerdyakov> Well, they're implemented the same way. :)
13:39:46 <esap> But type does not describe an implementation. It describes (allowed) behaviour.
13:40:50 <Xcalibor> esap: however, you can implement different algebras on top the same type
13:41:00 <Smerdyakov> You can make a non-circular list type by making the value constructors strict in their arguments.
13:41:28 <Smerdyakov> So, in that sense, the Haskell list type is for circular lists, and it's up to you to define a non-circular list type.
13:42:14 <Xcalibor> afaik, haskell lists are actually monads
13:42:23 <esap> Hmm.. Haskell lists are more like "circular or noncircular list". I would also need both "non-circular only list" and "circular only list".
13:42:43 <Xcalibor> the same behavior allows to create a circular and a non cirsular list
13:43:25 <esap> I think if you leave out [], then you get circular-only list. If you leave out 'let x = ... in x' then you get non-circular only.
13:46:44 <esap> Ok, but I guess I can implement both [I didn't realize the strictness annotation thing]
13:55:52 * esap thinks strictness annotations should be properly part of the (argument) types.
13:58:35 <ibid> so that a function cannot be strict in one case and nonstrict in another?
13:59:02 <esap> ibid: well it could, but then the type is more complex.
14:00:00 <ibid> though i agree, it would be useful if a (fully) strict function were to show its strictness in its type
14:00:36 <esap> I would want to see both "fully strict" and "fully lazy" in the type.
14:00:48 <esap> Because sometimes you want to rely on those.
14:00:54 <ibid> how would you type (&&) then?
14:00:56 <ibid> yes
14:01:05 <ibid> (in its second argument)
14:01:55 <esap> (&&) :: !Bool -> Bool -> Bool
14:02:35 <Riastradh> Its second argument would of course be full lazy: it doesn't compute it.  Even if the first argument is false, the second argument doesn't need to be computed until something else uses its result.
14:03:00 <esap> riastradh: oh right, then perhaps  (&&) :: !Bool -> ~Bool -> Bool
14:26:03 <Arnia> shapr: Functional javascript
16:33:57 <AirCastle> can haskell be used to do things that writing an algorithm for would be too hard to figure out or would have to iterate through too many possibilities?
16:35:43 <Riastradh> That's a bit vague to answer...
16:35:52 <Darius> That question doesn't make sense.
16:36:00 <Darius> At least as presented.
16:39:13 <Darius> The answer is either, "yes, along with every other language" or "no, along with every other language"
16:40:15 <AirCastle> oh, it must be the second. =)
16:40:45 <syntax-laptop> heh
16:41:00 <syntax-laptop> Haskell is a programming language after all.  you have to come up w/ algorithms
16:41:18 <AirCastle> i wasn't sure since SQL allows me to do things that i would have no idea how to make an efficient algorithm for.
16:41:29 <Riastradh> syntax-laptop, what, didn't you hear about GHC's latest algorithm constructor?
16:41:53 <Cale> AirCastle: that doesn't mean that such algorithms don't exist :)
16:42:10 <syntax-laptop> Riastradh: you just hand it an arrow, right? ;)
16:42:41 <AirCastle> cale: oh, of course, i mean, the algorithm would *seemingly* have to iterate through too many possibilities
16:42:46 <syntax-laptop> AirCastle: yes, SQL is just hiding the algorithms for you.  Libraries can also hide algorithms for you, and haskell is pretty good for abstraction.
16:42:52 <Darius> SQL doesn't -do- anything.  It's a query language, the DBMS does the work.
16:43:01 <Smerdyakov> AirCastle, maybe the SQL server DOES iterate through too many possibilities, but it is just very quick at it. :)
16:44:19 <syntax-laptop> Riastradh: so is that Simon PJ's frightening branch that they are releasing ghc 6.2 to avoid? ;)
17:00:48 <AirCastle> syntax-laptop: i'm thinking up a compression algorithm just for fun but the thing is i want to select the best possible set of dictionary items to include in the binary tree but i don't know how to do that when i want to recursively compress the dictionary too, could i just learn haskell and problem solved? :)
17:01:30 <AirCastle> somehow i doubt it, but functional programming really mystifies me
17:02:48 <syntax-laptop> AirCastle: it may very well be that your algorithm can be elegantly expressed in Haskell, but I doubt that any programming language will just solve your problem :)
17:03:32 <Riastradh> syntax-laptop, unless you have something like GHC's algorithm constructor, which hasn't been released to the public yet.
17:04:19 <syntax-laptop> Riastradh: right, but what if simon decides to just hang on to it?!  He could make himself rich that way.
17:04:47 <Riastradh> Indeed.  We'll need to forcibly extract it before he gets ideas like that.
17:04:54 <whee> algorithm constructor? heh
17:04:55 <syntax-laptop> yeah. you know how he is
17:05:22 <whee> that sort of thing sounds like a lisp job :P
17:05:57 <syntax-laptop> heh
17:06:44 <AirCastle> python>lisp
17:07:01 <cm> :o
17:07:07 <Riastradh> AirCastle, which Lisp are you talking about?
17:07:15 <syntax-laptop> haskell >>= python
17:07:22 <syntax-laptop> ;)
17:07:58 <whee> I have more fun with lisp than python D:
17:08:14 <Riastradh> Ack, departation is forced upon me!
17:09:01 <syntax-laptop> hey Cerlyn!@
17:09:06 <Cerlyn> lo
17:10:29 <SyntaxPolice> Cerlyn: we were just talking about GHC's new algorithm constructor, which hasn't been released yet
17:10:37 <Cerlyn> ah k
17:11:59 <SyntaxPolice> did anyone ever see that star trek episode where Barkley "Becomes" part of enterprise and he can control everything from there?
17:12:13 <SyntaxPolice> Sometimes I think of cool hackers who do a lot with big projects like that.
17:12:35 <SyntaxPolice> ("from there" == the holideck)
17:19:01 <phubuh> i just fell in love with haskell
17:19:46 <phubuh> i had been fooled into thinking that the concept of monads was a particularly difficult to understand one
17:19:54 <phubuh> and i hadn't even tried!
17:20:11 <AirCastle> i saw that episode!
17:20:22 <AirCastle> he figured out the universe
17:20:24 <SyntaxPolice> phubuh: yeah, I think we should scour the web for things that make monads look scary
17:20:33 <AirCastle> what kind of projects are like that
17:20:50 <phubuh> SyntaxPolice: i agree! they're doing a great job of scaring people away from haskell :/
17:23:03 <SyntaxPolice> AirCastle: hm. linux maybe, GHC maybe (sometimes it looks like GHC is taking on a life of its own)
17:23:26 <cm> i don't manage to compile HOpenGL on win32 / mingw / msys
17:23:32 <cm> that so annoys me :(
17:23:59 <cm> gives me a couple of linker errors to (as it seems) opengl32.lib, glu32.lib and glut32.lib
17:24:02 <cm> mm
17:24:13 <cm> not sure where to specify those lib names, tho.
17:25:55 <Darius> phubuh: have you read "Wearing the Hairshirt: A Retrospective on Haskell"?
17:26:13 <phubuh> Darius: hmm, no. i'll google it :-)
17:26:57 <Darius> http://research.microsoft.com/~simonpj/papers/haskell-retrospective/index.htm
17:27:20 <phubuh> that's simon peyton jones' paper, isn't it? i think i was going to read that yesterday, but my pdf reader never started, and i forgot all about it
17:27:24 <phubuh> ah
17:27:29 <SyntaxPolice> heh
17:27:35 <phubuh> i'll read it when i finish compiling gnome :/
17:27:39 <cm> is there such thing as timeframe for haskell 2?
17:27:40 <Darius> It's an entertaining paper.
17:27:51 <Darius> no
17:27:53 <phubuh> in the meanwhile, i'll do some exercises from your talk about monads, SyntaxPolice :-)
17:28:09 <SyntaxPolice> Darius: is there a paper, or just the slides?
17:28:17 <SyntaxPolice> phubuh: heh. there are probably better monad tutorials than from that talk :)
17:28:18 <Darius> There are only slides
17:28:28 <SyntaxPolice> phubuh: but those examples are pretty OK :)
17:28:39 <phubuh> :)
17:28:48 <phubuh> i'm doing the longestStringM one
17:28:54 <SyntaxPolice> I was reflecting on that talk, and I don't think I convinced anyone that using monads was better than passing the params around explicitly
17:29:26 <Darius> All you need to do is pass the params around explicitly.  Then say, "now let's add exceptions"
17:29:43 <Darius> Then do the same for the monad version
17:30:02 <phubuh> that's what What The Hell Are Monads? did, and that turned me off of explicit passing :)
17:32:18 <SyntaxPolice> Darius: I'll remember that for next time :)
17:32:35 <SyntaxPolice> I think I'm giving this talk again, so I'll have to read Hal's tutorial.
17:48:00 <phubuh> how do i import Control.Monad.State?
17:48:36 <Darius> import Control.Monad.State  ?
17:49:09 <phubuh> that's what i thought, but:
17:49:10 <phubuh> hmm.hs:10: parse error on input `import'
17:49:37 <Darius> Are you using GHC?
17:49:42 <phubuh> yes
17:49:46 <phubuh> ghci, specifically
17:49:54 <phubuh> oh, maybe it's because my program isn't in a module of its own
17:49:55 <SyntaxPolice> phubuh: er
17:50:14 <SyntaxPolice> you need module FOo where at the top of the file
17:51:17 <phubuh> ah, i can't just put import statements in the middle of my module
17:51:18 <phubuh> :)
17:51:57 <Darius> that's what I was thinking, line 10 is a bit far down (unless it's part of a larger system)
17:52:13 <phubuh> a part of a larger system wouldn't be called hmm.hs :-)
17:54:53 * Darius finishes an instance of MonadState that uses STRef's illustrating another benefit of monads.
17:57:07 <SyntaxPolice> phubuh: heh
17:57:38 <SyntaxPolice> an import statement could be 10 lines down easily if you have haddock for the module
18:07:08 <phubuh> i don't know how to implement longestStringM :(
18:07:30 <phubuh> i don't think i understand these monads, after all. hmm.
18:08:41 <SyntaxPolice> phubuh: where are you stumbling?
18:09:33 <phubuh> well, i thought i had it, but ghc gives me some type inconsistency error that i can't decrypt
18:09:51 <SyntaxPolice> heh. you can paste it here
18:10:14 <phubuh>     Couldn't match `()' against `State String ()'
18:10:14 <phubuh>         Expected type: ()
18:10:14 <phubuh>         Inferred type: State String ()
18:10:14 <phubuh>     In the application `longestStringM xs'
18:10:14 <phubuh>     In the first argument of `return', namely `(longestStringM xs)'
18:10:25 <SyntaxPolice> the solution is here, btw, but you shouldn't look: http://www.syntaxpolice.org/lectures/haskellTalk2/BestSoFar.hs
18:10:36 <phubuh> okay :)
18:10:51 <SyntaxPolice> you probably don't need a return there, I"m guessing.
18:10:57 <SyntaxPolice> thats the recursive call?
18:11:01 <phubuh> yeah
18:11:15 <phubuh> hmm, yeah, the recursive call already yields a State, not a String
18:11:22 <SyntaxPolice> so return makes something into a monad, in a way, but that function call already is a monad
18:11:28 <SyntaxPolice> or already is in a monad
18:11:30 <SyntaxPolice> or something :)
18:12:22 <phubuh> when i remove the return around the recurse, i get an even more confusing error:
18:12:25 <phubuh>     Couldn't match `[a]' against `()'
18:12:25 <phubuh>         Expected type: [a]
18:12:25 <phubuh>         Inferred type: ()
18:12:25 <phubuh>     When using functional dependencies to combine
18:12:25 <phubuh>       MonadState [a] (State String),
18:12:27 <phubuh>         arising from use of `get' at hmm.hs:8
18:12:30 <phubuh>       MonadState () (State String), arising from use of `get' at hmm.hs:6
18:12:32 <phubuh>     When generalising the type(s) for `longestStringM'
18:13:17 <SyntaxPolice> how are you using 'get'?
18:13:44 <phubuh> longestStringM []     = do s <- get
18:13:44 <phubuh>                            return s
18:14:26 <phubuh> longestStringM (x:xs) = do s <- get
18:14:26 <phubuh>                            (if length x > length s
18:14:26 <phubuh>                             then do put x
18:14:26 <phubuh>                             else do put s)
18:14:26 <phubuh>                            longestStringM xs
18:14:40 <SyntaxPolice> well, from the type sig, you don't need to return the string
18:15:01 <SyntaxPolice> the reason its complaining is that longestStringM is [String] -> State String ()
18:15:11 <SyntaxPolice> so if you return something, it should be (), not a string.
18:15:19 <SyntaxPolice> you don't need to return the string, since it can be extracted from the state.
18:15:24 <phubuh> aah, of course
18:16:11 <SyntaxPolice> btw, how did you choose that talk with all the monad tutorials out there?
18:16:58 <phubuh> *Foo> execState (longestStringM ["foo", "bars", "baz"]) ""
18:16:58 <phubuh> "bars"
18:16:59 <phubuh> yay!
18:17:54 <phubuh> i was googling for "haskell monads" and stumbled in on it :)
18:18:31 <SyntaxPolice> I see
18:18:50 <SyntaxPolice> cool :)
18:26:39 <phubuh> is map defined as do x <- xs; return (f x)?
18:27:24 <Darius> That would work
18:27:31 <SyntaxPolice> map doesn't have to be monadic
18:27:57 <Darius> for all monads, map (fmap) is do x <- m;return (f x)
18:29:15 <cm> what is bind for list monads?
18:29:26 <Darius> concatMap
18:29:49 <phubuh> cm: concatenates the result of each element applied to the continuation
18:30:27 <Darius> Effectively, the above definition of map, makes a singleton list out of each application of f then concats the results.
18:30:54 <cm> ah
20:49:08 <flippo> @yow
