01:20:22 * Marvin-- growls at Data.Generic
01:27:59 <kosmikus> Marvin--: ?
01:29:19 <Marvin--> the Data.Generics in ghc 6 is missing a lot of instances :-/
01:55:44 * Marvin-- tries to figure out how to use mkM and gmapM to traverse through a state monad
02:11:28 <Marvin--> well, off to the hospital I am
03:23:55 <earthy> poor kosmikus
03:25:26 <earthy> lunch with Gordon Plotkin, Arne S\370lvberg, Johan de Kleer, Luc Steels...
03:35:45 <shapr> goood morning #haskell!
03:35:49 <shapr> what's going on?
03:37:12 <earthy> well... http://www.xtdnet.nl/paul/spam/all/ shows that verisign's sitefinder service *greatly* increased spam for a little while
03:37:25 <det> howso ?
03:37:48 <earthy> look at the top graph. ;)
03:38:09 <det> I mean, what about their service increased spam ?
03:38:09 <earthy> and look at the big spike... it seems to coincide with the introduction of the sitefinder `service'
03:38:21 <det> nothing comes to mind
03:38:43 <earthy> suddenly a *lot* more bounced...
03:39:16 <earthy> (where previously spam sent with spoofed source addresses to non-existing domains would just be silently dropped, now it suddenly bounced)
03:39:16 <det> oh, right
03:39:43 <det> mail to non-existing domains was bounced as well
03:39:48 <earthy> exactly.
03:39:53 <det> Question!
03:40:01 <earthy> non-existing domains such as... mail@meREMOVETHIS.now
03:40:40 <earthy> or arthurvl@xs4troutall.com (go fishing for real e-mail address)
03:40:54 <det> What way is there to construct an identity function so that the type is inferered (no annotations allowed)
03:41:26 <det> just deconstructing and reconstructing ?
03:42:43 <earthy> id = read . show   ?
03:43:00 <earthy> (but that won't infer the type unless applied to something with known type)
03:43:17 <earthy> but yeah, if you have typed destructors and constructors that will do the trick
03:43:53 <det> how do you cons in haskell again ?
03:44:47 <shapr> with a colon?
03:45:15 <det> I am guessing "id [x:xs] = x:xs" is the shortest way to identity function a list ?
03:45:28 <det> erm
03:45:30 <det> that doesnt handle nil
03:45:52 <det> that + "id [] = []"
03:46:02 <det> without type annotations that is
03:46:19 <earthy> and it is invalid haskell
03:46:27 <det> why ?
03:46:31 <earthy> (you want  id (x:xs) = x:xs
03:46:32 <earthy> )
03:49:01 <det> ahh
03:49:14 <det> and for the nil case ?
03:51:41 <det> well, generally something like this:
03:51:45 <det> - datatype 'a list = Nil | Cons of 'a * 'a list;;
03:51:47 <det> datatype 'a list = Cons of 'a * 'a list | Nil
03:51:48 <det> - fun id l =
03:51:49 <det> =     case l of
03:51:50 <det> =         Nil => Nil
03:51:52 <det> =       | Cons (x, xs) => Cons (x, xs)
03:51:52 <det> = ;;
03:51:54 <det> val id = fn : 'a list -> 'a list
03:51:54 <det> in sml
03:52:38 <det> I imagine that is the shortest way to construct an id function where the type is infered ?
03:53:25 <det> I wonder if that is something easy for the compile to optimize away
03:53:29 <det> compiler*
03:56:19 <det> I am envisional a programming language where all types are infered, and you define types with an id function: eg "type list = Cons id list_id | Nil" where id is the polymorphic id function
03:57:07 <det> envisioning*
04:40:33 <harsha123> close iptables
05:07:05 <kosmikus> det: what do you mean by "the type is inferred" -- or, in other words: why is "\x -> x" not good enough?
05:15:42 <det> kosmikus: I mean, to write an identity function that accecpts a paticular type without using type annotations, and it is of no practical value really
05:38:25 <kosmikus> det: just one type? okay then ...
05:51:28 <harsha123> hello everyone
05:51:59 <det> kosmikus: yes, just a specific type
05:55:42 <steveh> morning
06:06:22 <shapr> hiya steveh 
06:07:01 <shapr> written any Haskell lately?
06:34:33 <steveh> arr, no
06:34:34 <steveh> just perl
06:34:37 <steveh> which I am debugging
06:34:39 <steveh> :-/
06:34:45 <steveh> what's new with you?
06:35:37 <shapr> @arr
06:35:37 <lambdabot> Ahoy mateys
06:35:51 <shapr> trying to do some work, and trying to write lambdabot unit tests other than that
06:39:00 <steveh> @arr
06:39:01 <lambdabot> Smartly me lass
06:39:06 <steveh> @yow
06:39:07 <lambdabot> You should all JUMP UP AND DOWN for TWO HOURS while I decide
06:39:07 <lambdabot>  on a NEW CAREER!!
06:39:28 * steveh is just starting to unit test everything heavily
06:42:16 <shapr> unit tests rock
06:42:24 <shapr> especially unit-test-first
06:42:29 <shapr> aka test-driven-development
06:43:29 <SyntaxPolice> shapr: did you see my msg yesterday? :)
06:45:11 <shapr> er, no?
06:45:24 <shapr> which message do you mean?
06:45:36 <SyntaxPolice> irc message 
06:45:39 <SyntaxPolice> I'll resend
06:50:50 <Lunar^> shapr: pair programming with sebc in a interesting experience :)
06:52:07 <shapr> I bet it is
07:03:11 <shapr> hej phubuh 
07:03:31 <phubuh> hallå hallå, shapr
07:04:22 <shapr> hoi blitznl
07:04:25 <phubuh> I'm thinking of binding GStreamer to Haskell
07:04:26 <shapr> phubuh: whatcha doin?
07:04:30 <shapr> what's GStreamer?
07:04:51 <blitznl> hi shapr
07:06:12 <phubuh> A framework for multimedia, sort of. It's based on the idea of sources, filters and sinks. A source is, say, a file reader; a filter is, say, an MP3 decoder; and a sink is, say, a component that sends data to a sound card.
07:06:43 <shapr> you're going to wrap it into combinators? :-)
07:06:51 <phubuh> I think so :-)
07:07:55 <Lunar^> phubuh: What about trying to make use of Arrows ?
07:08:29 <shapr> yah, it sounsd like arrows would in there well
07:09:05 <phubuh> I don't know anything about arrows... I've been meaning to read about them, though.
07:22:13 <shapr> blitznl: whatcha working on lately?
07:27:00 <shapr> how do you make an operator?
07:27:03 <shapr> I've forgotten
07:27:52 <blitznl> shapr: nothing spiffy :( I had to finish a paper on the CORBA Component Model to finish one of my subjects. I finished it today. Now I am going to prepare I talk I have to give 4th of December about functional programming using the FC++ library for c++.
07:30:29 <blitznl> shapr: furthermore I am doing some literature study on the dynamic software updating thingy I talked to you about a few days ago..
07:30:52 <shapr> I'd like to hear your results
07:31:06 <shapr> have you collected your found references somewhere online?
07:32:59 <blitznl> shapr: well according to my advisor there are some 'must-reads' by a guy called Hicks and I am looking into a few other papers as well. 
07:37:34 <Lunar^> shapr: infix{,l,r} <level> <op>
07:39:54 <shapr> I wish I could do postfix ops that way also
07:41:57 <Lunar^> postfix ?
07:42:02 <Lunar^> like what ?
07:43:03 <shapr> 1 2 +
07:44:35 <blitznl> shapr: no but I will soon and I'll inform you when I did.
07:46:03 <shapr> cool
08:10:07 <kosmikus> shapr: there is a paper by Chris Okasaki (HW 2002??) describing how to embed postfix operators in Haskell
08:24:46 <shapr> @ar
08:24:50 <lambdabot> Sorry, I don't know the command "ar", try "lambdabot: @listcommands"
08:24:50 <shapr> :-)
09:28:46 <harsha123> shapr Helloa!
09:29:00 <harsha123> Helloa #haskell
10:17:27 <shapr> @yow
10:17:27 <lambdabot> This ASEXUAL PIG really BOILS my BLOOD...  He's so..so.....URGENT!!
10:43:05 <basti_> hi all
10:43:37 <basti_> is 'error "foo"' the right thing for errors? Or is there are thing more high level that is considered better style?
10:43:38 <harsha123> hi basti_ 
10:43:54 <basti_> hi harsha123
11:27:56 <shapr> @yow
11:27:57 <lambdabot> Yow!  I want my nose in lights!
11:28:12 <harsha123> shapr : hi
11:28:17 <shapr> hi harsha123 
11:28:18 <shapr> what's up?
11:28:26 <harsha123> shapr why dont you join #searchengine
11:28:34 <harsha123> some intersting stuff brewing up... 
11:29:00 <shapr> I have joined
11:30:17 <harsha123> shapr this guy, tuulos is researchin on creating a *realtime* searching engine for IRC
11:30:29 <shapr> interesting
11:31:18 <harsha123> shapr: what do you mean by "taking voice off " ?
11:31:36 <shapr> if a channel is set to +m (moderated) then only 'voiced' users can speak
11:33:37 <harsha123> shapr at present they are talking about how they can *log* IRC information on an *user* optional basis
11:35:05 <shapr> yah, I'm on the channel :-)
11:35:18 <harsha123> shapr :)
11:37:46 <harsha123> shapr whats the diff b/w a nick and a nickserv?
11:42:32 <SyntaxPolice> harsha123: a nick is your name on irc. nickserv is a tool to register your nick, for instance, with a password so that no one else can use it.
11:42:57 <SyntaxPolice> try "/msg nickserv help" for information
11:43:03 <harsha123> SyntaxPolice Oh, Ok.. :)
11:46:17 <harsha123> shapr what do you think about the whole thing ? :)
11:50:38 <shapr> I don't have enough information
11:51:05 <harsha123> hmmm.. Ok.. i guess you joined a bit late...
11:51:45 <shapr> no, I mean, the information he's given doesn't lead me anywhere
11:52:00 <shapr> I have no arguments against it at least
11:52:07 <harsha123> oh.. Ok.. why dont you ask then ?
11:52:26 <shapr> what should I ask?
11:52:44 <shapr> I'm willing to try it and see what happens.
11:52:47 <harsha123> :) what ever questions you have in mind.. 
11:53:29 <shapr> hei ibid 
11:53:32 <shapr> wazzup?
11:55:24 <ibid> lectures have ended on my course :)
11:55:42 <ibid> (i shan't understand why irssi forgets autojoin channels)
11:55:43 <shapr> interesting discussion #searchengine
11:56:10 <shapr> Helsinki guy wants to log all of freenode
11:57:19 * isomer peeps in
11:58:26 <harsha123> shapr before a short while he was actually talking about buying a 1.5 terabye SAN device..
11:58:51 <shapr> wow
12:00:16 <shapr> hi chris2 
12:00:20 <chris2> hi shapr
12:00:24 <shapr> how's code?
12:00:46 <chris2> mine?
12:01:48 <shapr> yah
12:01:57 <chris2> written in ruby ;)
12:02:03 <shapr> writing something interesting?
12:02:21 <chris2> i'm thinking of sth interesting, yeah
12:03:33 <chris2> a tool you drag&drop things into, and hopefully find them again
12:03:46 <shapr> sounds useful
12:03:57 <chris2> yes, esp. while surfing
12:04:44 <phubuh_> I'd love that
12:04:56 <phubuh_> now I just use my home directory like that :/
12:05:12 <chris2> phubuh_: me too, unfortunately
12:05:43 <harsha123> k guys i gotta go and get some sleep.. good bye.. 
12:05:57 <harsha123> bye #haskell
12:06:01 <shapr> bye
12:06:02 <phubuh_> bye!
12:06:07 <chris2> cu
12:06:15 <harsha123> bye shapr phubuh_ 
12:06:49 <chris2> i'm just thinking on how to store the data...
12:07:06 <shapr> I'd put it in the filesystem :-)
12:07:11 <chris2> yeah
12:07:15 <shapr> like you do now, but with a better interface
12:07:35 <chris2> but i'll probably need indexing
12:24:16 <Tomasso> @type compose
12:24:39 <shapr> @type (.)
12:24:40 <lambdabot> (.) :: (a -> b) -> (c -> a) -> c -> b
12:26:04 <Tomasso> hmhm isnt it (a -> b) -> (b -> c) -> (a -> c) ??
12:26:30 <shapr> no, that would be 
12:26:33 <shapr> @type flip (.)
12:26:34 <lambdabot> flip (.) :: (a -> b) -> (b -> c) -> a -> c
12:27:47 <Tomasso> isnt it (a -> b) -> (b -> c) -> (a -> c) ?
12:28:05 <Tomasso> how does haskell now that a is not one more parameter?
12:28:11 <shapr> huh?
12:28:31 <Tomasso> i mean, doesnt it return a function?
12:28:57 <shapr> @type (+ 1) (.) (+ 1)
12:29:08 <shapr> hrm
12:29:13 <shapr> @type (+ 1)
12:29:13 <lambdabot> flip (+) 1 :: Num a => a -> a
12:29:17 <shapr> @type (+ 1) (.)
12:29:29 <Tomasso> hmhm
12:29:38 <Tomasso> @type (map f . concat)
12:29:53 <shapr> I wonder if lambdabot has left too many dead hugs processes...
12:29:55 * shapr checks
12:30:22 <shapr> shae@ScannedInAvian:~$ ps ux|fgrep hugs|wc -l
12:30:22 <shapr> 28
12:35:04 <shapr> hi jasonw 
12:35:07 <shapr> nice hostname
12:35:19 <jasonw> thanks.
12:35:30 <shapr> mournblade was the twin of stormbringer, iirc
12:35:55 <shapr> did you know that Michael Moorcock has a contest going on right now where you get to continue a story he's started?
12:37:29 <shapr> jasonw: are you learning Haskell?
12:38:58 <jasonw> shapr: Pretty much. I've taken a class that used Haskell, but I'm not a pro.
12:39:21 <shapr> do you have any questions?
12:39:43 <shapr> looking for particular info?
12:39:55 <jasonw> shapr: Not off the top of my head. I'm just here to soak up information.
12:41:09 <shapr> I often suggest hacking up a lambdabot plugin to improve your Haskillz.
12:42:04 <jasonw> Thanks for the suggestion.
12:46:35 <shapr> hi shrimpx 
12:47:03 <shrimpx> hello
12:47:39 <Tomasso> where can i see the definition of concat?
12:47:49 <Tomasso> @type concat
12:47:50 <lambdabot> concat :: [[a]] -> [a]
12:48:06 <Tomasso> @definition concat
12:48:06 <lambdabot> Sorry, I don't know the command "definition", try "lambdabot: @listcommands"
12:48:25 <Tomasso> lambdabot: @listcommands
12:48:25 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","foo","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude
12:48:34 <shapr> @prelude concat
12:48:34 <lambdabot> ERROR: does not exist
12:48:34 <lambdabot> Action: connect
12:48:34 <lambdabot> Reason: Connection refused
12:48:38 <Tomasso> @define concat
12:48:38 <lambdabot> (line 1, column 1):
12:48:38 <lambdabot> unexpected end of input
12:48:38 <lambdabot> expecting white space or simple term
12:48:45 <shrimpx> heh
12:48:52 <shapr> oh, tmoertel's dictd server is down
12:49:00 <Tomasso> hhm
12:49:01 <shapr> Tomasso: look in Prelude.hs if you have Hugs installed.
12:49:16 <Tomasso> hmh ok..
12:51:10 <shapr> I'll email tmoertel and ask him for the data files so I can host @prelude
13:01:02 <jasonw> shapr: what is the general skill level of people on this channel?
13:25:30 <jameson> @eval let lim (x:xs) b = if (x*x <= b) then x:(lim xs b) else [x];  primes = 2 : [ x | x <- [3..], [y | y <- lim primes x, x `mod` y == 0] == [] ] in take 42 primes
13:25:31 <lambdabot> (line 1, column 18):
13:25:31 <lambdabot> unexpected "="
13:25:31 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string, "(", operator, simple term or end of input
13:25:54 <jameson> Hmm... (Sorry, guys, had to try this once...)
13:26:11 <jameson> @eval 1+2
13:26:11 <lambdabot> 3
13:26:32 <jameson> But what will it do on infinite expressions?
13:36:46 <Riastradh> jameson, lambdabot evaluates an extended Lambda-Calculus, not Haskell.
13:37:14 <Smerdyakov> Lambda calculus can encode infinite data structures.
13:38:28 <Smerdyakov> But they'll just print as functions, which are all printed the same. :-)
13:39:57 <shrimpx> crazy
13:44:39 <Riastradh> @eval \x. x
13:44:39 <lambdabot> <<EM Dynamic -> EM Dynamic>>
13:56:57 <shrimpx> @eval \x.\y.(x+y)
13:56:58 <lambdabot> <<EM Dynamic -> EM Dynamic>>
13:57:12 <shrimpx> @eval \x.\y.(x+y) 1 2
13:57:12 <lambdabot> <<EM Dynamic -> EM Dynamic>>
13:57:13 <shrimpx> hm
14:07:24 <Cale> @eval ((\x.\y.(x+y)) 1) 2
14:07:24 <lambdabot> 3
14:08:53 <Cale> @eval (\x y.(x+y)) 1 2
14:08:54 <lambdabot> 3
14:10:50 <shrimpx> ah
14:12:50 <jameson> Riastradh: Ah, thanks for the clarification :-)
14:23:14 <shrimpx> @eval (\p.p(\x.\y.x)) (\f.(f 7 8))
14:23:14 <lambdabot> 7
14:23:20 <shrimpx> yay
14:23:26 <shrimpx> lambdabot rocks
14:23:54 <shrimpx> @eval (\p.p(\x.\y.y)) (\f.(f 7 8))
14:23:55 <lambdabot> 8
15:09:29 <isomer> Darius: shapr said you're the fellow to ask about a good book reference on writing a cps compiler. any ideas?
15:13:57 * Darius has only read two hardcopy books related to programming, nevertheless...
15:14:48 <Darius> "Modern Compilation with {ML,Java,C?}" likely covers that (or perhaps uses administrative normal form)
15:15:20 <isomer> will check - thanks :)
15:15:37 <Darius> Also, there's "Compiling with Continuations"
15:15:44 <isomer> oh, that sounds more like it
15:15:55 * isomer hits powellsbooks.com
15:16:38 <Darius> Sorry "Modern Compiler Implementation in ML"
15:16:47 <isomer> oh, it's Appel who wrote it no less
15:17:50 <isomer> have you thumbed/read compiling with continuations?
15:18:34 <Darius> No.
15:18:59 <mattam> what part of the compiler use cps ?
15:19:24 <isomer> okey -- i'll try to find a local copy before spending the $$$
15:19:34 <mattam> Darius ?
15:19:54 <Darius> CPS is used as a sort of intermediate form.  The early RABBIT/SCHEME papers cover it as well.
15:20:50 <mattam> it's used in code generation then ?
15:20:52 <isomer> cps is a way to transform the input language so that you can optimize it in some very cool ways before priucing code
15:20:58 <isomer> producing, even
15:21:34 <mattam> k
15:21:55 <Darius> isomer: You may want to look at the paper "The Essence of Compiling with Continuations" as well to see why most compilers use ANF now.
15:22:40 <isomer> what's ANF? (i am clearly not up to date on this sort of thing)
15:24:52 <Darius> administrative normal form (I believe monadic normal form is the same thing)
15:26:11 <dark> mapM_ greet (members "#haskell")
15:26:21 <isomer> thanks for the tips Darius
15:32:32 <shapr> y0 y0 dark
15:33:13 <shapr> jasonw: people on this channel range from total newbies to GHC hackers
16:30:03 <Tomasso> if i had the expresion x<y then x:: Int and y:: Int ???
16:30:41 <phubuh_> Ord x and Ord y
16:31:00 <Riastradh> No, no, no.  'x < y' implies 'x :: Ord a => a' and 'y :: Ord a => a'.
16:31:50 <Tomasso> ok
16:42:02 <shapr> hi flippo, ltns
16:42:31 <flippo> shapr: yes, I've been doing more math lately, and less programming
16:43:45 <shapr> I've been playing more games lately :-)
16:43:57 <flippo> shapr: that's fun too
16:46:08 <dark> I've been writing games lately :)  Or at least trying to... I'm still stuck in the non-game code.
16:46:49 <dark> Postgres's idea of "atomic" is different from mine.
16:48:16 <flippo> heh, I've not yet entered the wonderful world of databases.
16:52:03 <flippo> Databases seem to become a full-time job for some.  I'd rather that not happen
16:52:29 <shapr> I enjoy working with databases on an irregular basis.
16:52:33 <shapr> it's fun when I only do it once a month.
16:54:18 <dark> I like databases when they stay in their place.  They're the backend, not the application :)
16:55:04 * shapr wanders off to sleep
18:08:04 <pimpbot5001> hi, does anyone know of a fast (almost constant time) way to allocate bytes in haskell?  I'm looking for something I can marshall to C
18:09:48 <Smerdyakov> Well, I think all normal Haskell allocations are guaranteed constant time.
18:09:58 <Smerdyakov> I don't know about what requirements of marshalling would add.
18:10:16 <Smerdyakov> (Normal allocations being implicit allocations, like when you build a tuple.)
18:13:20 <pimpbot5001> hmm
18:13:43 <pimpbot5001> well lets say i want a Ptr to an Int
18:13:53 <Smerdyakov> Do you know about how allocation is done in Haskell? (Or any implementation that uses a copying garbage collector.)
18:14:00 <pimpbot5001> the only way (i know of) to get that ptr is to call 'new'
18:14:19 <pimpbot5001> yea ghc's runtime should be constant time
18:14:36 <pimpbot5001> actually what im trying to avoid is a trap to the OS
18:14:52 <Smerdyakov> I don't know anything about marshalling in any Haskell compiler, so you should probably continue to make noise until someone who does shows up. :)
18:15:04 <pimpbot5001> see, i need to create a bunch of objects (Ints in this case) that i can marshall to C
18:15:12 <pimpbot5001> and performance is key
18:15:15 <Smerdyakov> We might be in trouble if it's too late/early in Australia and the UK, since the knowledgeable people live there. ;)
18:15:25 <pimpbot5001> hehe
18:15:35 <pimpbot5001> hmm, wonder what time it is there
18:17:11 <pimpbot5001> aha, 2am in london
18:17:17 <phubuh_> It's 3:16 in Sweden, which is GMT+1, so Britain should be 2:16.
18:17:25 <pimpbot5001> damn
18:23:42 <pimpbot5001> aha!
18:24:00 <pimpbot5001> apparently mallocForeignPtr is relatively cheap
22:55:19 <jasonw> Evening htodd.
22:56:12 <htodd> heh. Wondered what the l33t were doing with haskell
