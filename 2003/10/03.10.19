00:29:30 <JosephSpiros> dork
00:29:32 <JosephSpiros> :D
00:42:09 * kilowatt is away: sleeping
01:45:28 <shapr> @yow
01:45:29 <lambdabot> It's the land of DONNY AND MARIE as promised in TV GUIDE!
02:02:55 <prologic> yo shapr
02:03:10 <prologic> know any good xchatlog -> html log converters ?
02:04:34 <shapr> what does an xchatlog look like?
02:04:52 <prologic> lemme find a small one for you
02:05:45 <shapr> claims to do xchat --> http://irclog-xml.sourceforge.net/
02:06:10 <prologic> it doesn't work :)
02:06:15 <prologic> got some bug in it
02:06:16 <prologic> just tried it
02:06:28 <prologic> if I don't find a good one from somewhere I"ll write one myself
02:07:08 <shapr> I wonder what coreyr uses, http://tunes.org/~coreyr/
02:08:14 <prologic> hrmm
02:08:15 <prologic> sweet :)
02:08:17 <shapr> I wish the nhc98 runtime for PalmOS was released
02:08:19 <prologic> I want that whatever it is
02:08:37 <shapr> I really want some decent palmos study software and everything I've found is crap
02:09:03 <prologic> ahh k
02:09:07 <prologic> so you can ready away from the PC ?
02:10:06 <prologic> I sent him an email :)
02:10:21 <shapr> cool
02:10:30 <shapr> I want to study swedish away from my PC
02:10:36 <shapr> and I want to write PalmOS apps in Haskell
02:10:51 <prologic> ahh k
02:12:13 <shapr> hm, who's at macquarie?
02:12:36 <prologic> eh?
02:12:54 <shapr> seems they're doing the nhc98 runtime on PalmOS
02:13:18 <prologic> ah k
03:32:38 <lostben> i wonder why something this is not possible: contains (x:xs) x = True
03:33:07 <Heffalump> violates the linearity restriction
03:33:28 <Heffalump> that exists because otherwise the compiler would have to insert equality checks implicitly, which I think was considered too confusing
03:33:31 <Heffalump> you can write
03:33:38 <Heffalump> contains (x:xs) x' | x==x' = True
03:49:25 <lostben> Heffalump: sorry, someone was at the door.  thanks for your answer :-)
04:01:18 <harsha123> hello #haskell
04:01:35 <prologic> hello harsha123 :)
04:01:47 <harsha123> hi prologic 
04:01:58 <harsha123> arent ya taking a sunday break ?
04:03:12 <prologic> nope :)
04:03:23 <prologic> me never rests when it comes to developing software
04:03:35 <prologic> and since I cannot find a decent program/script to generate html log files from xchat
04:03:41 <prologic> I'm going to write one myself :)
04:49:31 <blackdog> syntaxpolice: you around? I want to say nice things to you about your debian/haskell repository.
04:50:29 <prologic> hehe
04:54:43 <blackdog> oh well. tell him when he gets back, ok?:)
05:16:42 <prologic> I will :)
05:16:49 <prologic> just tell me what to say :)
05:24:56 <blackdog> generalised nice things would be fine. getting the latest version of ghc on mandrake used to involve hours of obscenities: ghc on debian is as smooth as a barrel of greased monkeys on rollerskates.
05:29:32 <lostben> where can i find some information about order of application - e.g., a b c d -- let's say a and c are functions, does haskell interprete this as (a (b (c (d)))) or ((((a) b) c) d)?
05:30:36 <esap> lostben: the second interpretation.
05:30:58 <lostben> is it as straightforward as that? no strings attached? :-)
05:31:27 <blackdog> you can define infix operators which muddy the waters somewhat, but with just alphabetic characters, that's as complex as it gets.
05:31:30 <phubuh> all functions take exactly one argument. to make a function that appears to take several, you make it return yet another function that takes the second argument, and then returns the result -- e.g., (\x -> (\y -> y + x)) --; this works since the application order is the latter.
05:32:10 <lostben> very true, thanks for the insights.
05:32:12 <esap> lostben: yes. But note there is an operator ($).
05:32:27 <lostben> will read up on that $, cheers.
05:32:42 <esap> lostben: That is, a $ b $ c $ d == a (b (c d))
05:32:56 <blackdog> good for getting rid of lots of silly parentheses.:)
05:33:14 <lostben> ah, the other way around
05:35:54 <lostben> you said that infix operators confuse things a bit for newcomers, can i assume that (a + b is equivalently to + a b?
05:36:10 <lostben> you said that infix operators confuse things a bit for newcomers, can i assume that (a + b) is equivalently to (+ a b)?
05:36:27 <esap> lostben: a + b  === (+) a b
05:36:31 <ibid> no, (a+b) is equivalent to ((+) a b)
05:37:15 <esap> lostben: the parenthesis distinguish prefix operators from infix.
05:37:18 <lostben> right, the brackets around the + are there to indicate that + is a function, right?
05:37:34 <lostben> ah, cheers :-)
05:37:42 <phubuh> you'd have to write ((+) a b), but yes. however, the standard infix operators generally have less precedence than function application, so that foo x + bar y is (+ (foo x) (bar y)) -- foo and bar behave as if they were trigonometric functions in regular math notation
05:37:50 <esap> lostben: no, actually, I mean, you can make any operator into a function by using parenthesis.
05:38:35 <lostben> i'd better make some notes, quite a lot to remember... :-)
05:40:23 <lostben> just to confirm, logical operators such as && and || can be seen as infix operators just like +?
05:40:34 <phubuh> yes
05:40:51 <lostben> thanks
06:49:39 <phubuh> what can I use to call Haskell code from C?
07:09:13 <Lunar^__> phubuh: foreign export
09:05:48 <basti_> hi all
09:05:55 <phubuh> hey
09:12:19 <ecraven> (/c
09:12:28 <basti_> (/c?
09:12:52 <ecraven>  /c is an alias for /clear
09:12:54 <ecraven> ( is an error
09:12:57 <ecraven> ;-) 
09:13:07 <basti_> oh. yes. i see.
09:16:27 <stratocaster> anybody know of a binary of HOpenGL for windows? am having trouble building it myself...
09:30:02 <lostben> i wonder if there's a nice trick to get around the fact that a list is not empty if it contains empty lists (e.g., [[]])?
09:30:32 <lostben> by that, i mean, i want it to say that [[]] is empty rather than non-empty
09:31:04 <basti_> hmh
09:31:05 <lostben> is that possible without writing or using a function?
09:31:15 <dennisb> lostben: but it is not empty
09:31:42 <lostben> yes. i want the effect that it is empty even though it has empty lists within it
09:31:47 <basti_> hmm
09:31:56 <dennisb> it's like asking, I have this number 6, is there a way to make it 7 without using a function
09:32:08 <dennisb> lostben: write a function that removes empty lists inside the list
09:32:08 <basti_> thats a point.
09:32:11 <lostben> ok, so i'll use a function then. thanks anyway :-)
09:32:26 <basti_> but theres sure a real short way to do this
09:32:41 <lostben> how? i would like to know that there's one
09:32:48 <dennisb> filter or list comp. should work fine
09:32:50 * basti_ ponders
09:33:01 <basti_> yea you could filter out any element thats not a list
09:33:08 <basti_> recursively. Or something like that.
09:33:12 <dennisb> not an empty list
09:33:13 <lostben> i guess, cheers anyway :-)
09:33:18 <Riastradh> isEmpty = (==[]) . filter (not . (==[]))
09:33:21 <dennisb> the rest has to be lists also
09:35:06 <dennisb> there is a predefined function null that is the same as (==[])
09:35:26 <Riastradh> Good, that makes it even shorter.
09:35:56 <dennisb> except that it uses pattern matchin instead of ==, so it's not 100% equal to (==[]), but still the same
09:36:44 <Heffalump> no, it has a different type
09:36:59 <lostben> yeah, but it's a bit annoying that there's no short way to tell if a list contains nothing (e.g., a tree without any leaves)
09:37:13 <dennisb> Heffalump: exactly, it's not 100% equal
09:37:17 <Heffalump> lostben: huh? That's what null does.
09:37:36 <lostben> null [[]] yields false
09:37:39 <Heffalump> dennisb: well, it's not "still the same" either :-)
09:37:44 <Heffalump> oh, right
09:37:46 <Cale> yeah, because it contains []
09:37:54 <Heffalump> null (concat [[]]) won't
09:38:09 <Riastradh> Heffalump, but then you're flattening the list, which is not the same.
09:38:18 <Heffalump> as what?
09:38:23 <lostben> yeah, but for things like [[],[]]
09:38:24 <Riastradh> Oh, wait, yes it is.
09:38:31 <Riastradh> I still like mine, though!
09:38:32 <dennisb> Heffalump: does the same thing might have been better then (unless you have a strange ==)
09:38:53 <Heffalump> dennisb: but it doesn't, cos your contained type might not have an Eq instance at all
09:39:12 <Riastradh> isEmpty = null . filter (not . null)
09:39:14 <Heffalump> (you can't have a strange ==, cos you'll always get the list one)
09:39:36 * Riastradh ponders how to shorten that.
09:39:36 <Heffalump> riastradh: I think they're equally efficient, though I'm not certain
09:39:39 <dennisb> Heffalump: you can replace it with your own instance
09:39:49 <Heffalump> dennisb: oh, true
09:39:57 <dennisb> see, I can be clever too :-)
09:39:59 <Heffalump> actually, no you can't, it's in the Prelude
09:40:01 <lostben> a 3-level tree would be [[[],[]],[[],[]]] ... nothing in the tree, yet it's not null
09:40:08 <dennisb> can't you just hide it?
09:40:16 <Heffalump> lostben: these things all have different types
09:40:21 <Heffalump> dennisb: you can't hide instances
09:40:27 <dennisb> bugger
09:40:49 <dennisb> we can always import the prelude qualified
09:40:52 <Cale> lostben: if you want trees then define a Tree type
09:41:00 <Heffalump> dennisb: that'll still do the same thing
09:41:10 <Heffalump> cale: he might want to enforce the tree depth with the type system
09:41:35 <Heffalump> I don't think qualified imports affect instance declarations
09:41:39 <dennisb> Heffalump: that is correct
09:41:43 <dennisb> I agree
09:41:43 <Heffalump> s/qualified/qualifying/
09:41:48 <lostben> Cale, would have liked an universal one for other things like non-binary trees
09:41:51 <Heffalump> i.e. you'll still end up with the instance declaration whatever you do
09:42:08 <Heffalump> lostben: data Rose a = Node a | Tree [Rose a]
09:42:20 <Heffalump> sorry, those are silly names
09:42:29 <dennisb> Heffalump: and I can't even redefined [] and : myself, so there is no way fool it
09:42:29 <Heffalump> data Rose a = Leaf a | Fork [Rose a]
09:42:34 <Heffalump> dennisb: yeah
09:42:35 <dennisb> redefine even
09:42:55 <lostben> cheers, people. looks like i'll have to write it.
09:45:25 <basti_> lol
09:46:24 <Cale> lostben: you could use http://www.haskell.org/ghc/docs/latest/html/base/Data.Tree.html
09:47:26 <Cale> then isEmpty = null . flatten
09:49:19 <lostben> thanks :-) i think i'll have some fun writing one myself first, then compare it to that. cheers :-)
09:56:16 <lostben> meanwhile, would be good to know whether this can be done better (i'm very new to haskell) ... of_empty_lists xs = foldr (&&) True (map null xs) -- of course this is only for one-level trees
09:57:12 <Smerdyakov> Looks good to me.
10:01:38 <dennisb> foldr (&&) True  is equal to and
10:01:45 <dennisb> (really equal this time)
10:02:37 <dennisb> so you can write it: of_empty_lists = and . map null
10:03:26 <lostben> ah, just noticed that. neat :-)
10:05:43 <dennisb> or why not: of_empty_lists = all null
10:06:55 <lostben> ah, null :: [a] -> Bool... why not indeed!
10:09:05 <basti_> woah
10:09:15 <basti_> ;)
10:10:48 <c4t> hi to all
10:11:24 <zaragata> hello
10:12:20 <basti_> hi
10:13:40 <lostben> ah, you used all... i misread that, sorted of assumed that null :: [a] -> Bool means null would do the same thing
10:14:09 <lostben> but, thanks. i've now discovered all's usefulness :-)
10:20:39 <lostben> my_transpose xs = if all null xs then [] else map head xs : my_transpose (map tail xs) -- it works, but does not satisfy my_transpose :: [a] -> [a] for no obvious reason to me
10:21:07 <Lunar^__> I'm writing a small interpreter
10:21:16 <Lunar^__> I'm asking myself what would be the best way to have multi-dimensional array
10:21:28 <Riastradh> Use the Array module?
10:21:37 <Lunar^__> Using Array and making [Int] an instance of Ix ?
10:22:44 <ibid> i would use (Int, Int) etc :)
10:23:11 <Lunar^__> ibid: They're multi-dimensional in the language spec
10:23:33 <Lunar^__> ibid: So I parse array access as (LArray LValue [Expr])
10:23:46 <ibid> Lunar^__: uhh, what are you talking about?
10:23:58 <ibid> oh, you need to have a dynamic dimension?
10:24:03 <Lunar^__> right
10:24:11 <ibid> then [Int] is appropriate, i think
10:24:22 <ibid> or use the old a*n+b trick
10:24:44 <Lunar^__> ibid: tell me more about that one ? :)
10:24:58 <ibid> it's a standard trick, used by c, for example
10:25:23 <ibid> f[a][b] = f[a*n+b], where n = sizeof f[0]
10:26:33 <Lunar^__> ok
10:27:06 <Lunar^__> I'm trying to making [Int] an instance of Ix first, if I fail I'll do that way
10:44:31 --- mode: zelazny.freenode.net set +b *!23kjhkjf@*
14:33:18 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","lots of cool debs in the haskell-experimental archive - see http://haskell.org/hawiki/DebianUsers","new monads tutorial http://www.nomaware.com/monads/html/","Haskell Refactorer - http://www.cs.kent.ac.uk/projects/refactor-fp/hare.html","en,de,fr,se,nl,pt,es,fi,pg,ru,ua"]'
14:33:18 --- topic: set by shapr on [Fri Oct 03 07:37:49 2003]
14:48:11 <shapr> @fortune
14:48:12 <lambdabot> Some of my readers ask me what a "Serial Port" is.
14:48:12 <lambdabot> The answer is: I don't know.
14:48:12 <lambdabot> Is it some kind of wine you have with breakfast?
14:48:17 * shapr grins
14:50:01 * Smerdyakov boo's
14:50:34 * Heffalump confiscates Smerdyakov's superfluous apostrophe
14:50:57 * shapr makes it the people's apostrophe
14:53:50 <shapr> wait, is this still an oligarchy?
14:54:12 <Heffalump> if so, who's in charge?
14:54:27 <shapr> probably you ;-)
14:55:20 <Heffalump> no way
14:55:30 <Heffalump> you, surely
14:56:02 <Igloo> We'd need "a few" according to dict
14:56:32 <Heffalump> good point
14:56:43 <shapr> I nominate Igloo 
14:56:43 <Heffalump> right, let's have the three of us seize power :-)
14:56:45 * shapr laughs
14:56:48 * shapr seizes
14:57:08 <shapr> carpe oligarchy!
14:57:14 <Heffalump> there's Smerdyakov too, but he likes ML so I'm not sure we should trust him
14:57:22 * Heffalump keeps very quiet about the fact that he quite likes ML too
14:57:35 <Igloo> So just so as I can get things straight, if the #haskell Cabal existed would it be distinct to the oligarchy rulers?
14:57:49 <Heffalump> yes, but it of course doesn't
14:58:13 <shapr> right, the Haskell Secret Underground doesn't exist.
14:58:19 <shapr> neither does the #haskell Cabal
14:58:47 <Igloo> By order of the oligarchy!
14:58:58 * Igloo sighs. I still hate hat.
15:00:32 <shapr> _|''|_  <-- a hat?
15:01:13 <Igloo> Very pretty - now make one that's valid Haskell  :-)
15:01:31 <shapr> uh oh
15:10:11 <shapr> hi jao
15:11:36 <syntax-laptop> hi Igloo
15:11:40 <jao> hi shapr 
15:12:53 <syntax-laptop> so Igloo, what are triggers in haskell-utils for?
15:59:20 * c4t is away: @ is mind trying to get out
16:16:43 <shapr> hm, I'm not the first person to have thought of using planetary gears for a multispeed unicycle
16:17:06 <Lunar^__> hi shapr
16:17:19 <shapr> hi Lunar^__ 
16:19:01 <Lunar^__> shapr: Panther rocks
16:19:27 <shapr> what's Panther?
16:19:38 <Lunar^__> shapr: Mac OS X 10.3
16:19:49 <shapr> oh
16:20:01 <shapr> I prefer open source stuff
16:20:58 <Lunar^__> shapr: So do I, but it's really an impressive OS... lots of idea to borrow ;)
16:21:05 <shapr> oh, good point
16:21:39 <Lunar^__> shapr: btw, do you have an idea on how to make multi-dimensional dynamic array ?
16:21:47 <Lunar^__> shapr: I'm writing an interpreter and I would need that
16:22:05 <shapr> no, not really
16:22:24 <shapr> if you need interpreter advice, I'd suggest Darius 
16:22:37 <Heffalump> dynamic array in Haskell?
16:22:53 <Lunar^__> Heffalump: dimension needs to be dynamic
16:22:57 <Heffalump> I have no idea how to make a single-dimensional one :-)
16:23:06 <Heffalump> ah. That'll be impossible without dynamic types.
16:24:10 <Darius> Wouldn't data DynamicArray i e = NoArray | DynamicArray (Array i e) do it?
16:24:36 <Darius> Er, make that something like Either DynamicArray e
16:25:32 <Darius> e.g. data DynamicArray i e = Element e | DynamicArray (Array i (DynamicArray i e))
16:26:24 <Darius> This allows ragged arrays though, if that's a problem.
16:30:37 <Darius> Of course, if arrays are first class entities, then you already have this, and simply an Array of Value type should work.
16:31:08 <Lunar^__> Darius: they are
16:31:23 <Lunar^__> uh ok
16:31:39 <Lunar^__> just treat arr(1, 2) as arr(1)(2)
16:32:22 <Heffalump> darius: oh yeah. Duh.
16:49:30 <shapr> hoi dark, hoe gaat?
16:49:35 <shapr> man you should be asleep
16:52:15 <shapr> have you guys seen the nervous text postscript font?
16:52:44 <syntax-laptop> nope
16:59:35 <Igloo> Are you going to tell us?  :-)
16:59:51 * syntax-laptop is getting nervous
17:01:30 <shapr> http://www.letterror.com/foundry/beowolf/index.html
17:01:38 <shapr> I lost it for a bit :-/
17:01:59 <shapr> it's a font written in postscript such that each time a letter is rendered, it's different
17:02:11 <Lunar^__> lol
17:03:19 * shapr goes off to sleep
17:03:58 <Igloo> Cute
17:04:00 <Igloo> g'night
17:06:22 <syntax-laptop> night shapr
18:21:22 <blackdog> syntax-laptop: i didn't get a chance to thank you in person, dude... your debian/haskell repository rocks the Catskills.
18:31:47 <syntax-laptop> blackdog: cool!  Thank Igloo too, he really does most of the hard stuff!
18:37:02 <dark> Whoops, I missed shapr.
18:37:14 <dark> Anyway, hello :)
18:37:57 <o3> allo
18:39:19 <ozone> better
18:40:31 <ozone> hey isaac
18:40:43 <syntax-police> hi ozone
18:41:08 <syntax-police> (I was trying to op myself on another channel, which is why I was changing nicks)
18:42:43 <blackdog> ozone: g'day. i got Brick Jr. working. :)
18:44:37 <ozone> blackdog: brick jr?
18:45:25 <ozone> syntax-police: what a coincidence, i just found your business card
18:45:47 <syntax-police> ozone: whoa I gave you a business card?  That must have been my last one :( I still haven't gotten new ones
18:45:56 <blackdog> my new laptop. thinkpad 770z.
18:46:02 <syntax-police> ozone: are you mark?
18:46:19 * syntax-police can't remember the nick
18:46:26 <blackdog> ozone is andre. i'm mark.
18:46:35 <syntax-police> ahhh
18:46:41 <syntax-police> thanks :)
18:46:43 * syntax-police is embarassed
18:48:14 <ozone> yeah, i'm not _that_ lazy
18:48:16 <ozone> oh wait, i am
18:49:07 <ozone> syntax-police: heh, no worries.  just going through all my receipts and stuff to get my filthy money back from uni
18:49:34 <syntax-police> heh
18:52:55 <theath> what is haskell equivalent of != ?
18:53:25 <syntax-police>  /=
18:53:34 <theath> thanks
18:54:27 <syntax-police> so what have you guys been up to since icfp, ozone & blackdog?
18:56:35 <theath> hmm. could someone tell me what is wrong with this line of code: "((parentOf x == parentOf y) and (x /= y)) = "yes""
18:56:41 <theath> ?
18:57:01 <theath> there's a pipe before it
18:57:16 <Darius> @type and
18:57:17 <lambdabot> and :: [Bool] -> Bool
18:57:36 <theath> what's that mean?
18:57:46 <syntax-police> && is what you want
18:57:56 <theath> ooh
18:57:59 <theath> thanks again
18:57:59 <syntax-police> @type (&&)
18:58:00 <lambdabot> (&&) :: Bool -> Bool -> Bool
18:58:41 <theath> awesome. thanks guys
18:58:49 <syntax-police> also, I'm not sure about that last = "yes"
18:58:58 <syntax-police> oh I get it
18:59:00 <syntax-police> the pipe :)
18:59:05 <theath> :)
19:00:00 <theath> since i'm sure i'll run into problems again soon, hopefully you guys or someone else equally as helpful will be here
19:00:23 <syntax-police> hehe.  your questions are easy so far! it might get harder :)
19:31:19 <theath_> ok, i have a list of lists, and i want to grab the head of each individual list
19:31:23 <theath_> how do i do that?
19:31:31 <syntax-police> have you heard of map?
19:31:51 <theath_> maybe?
19:31:57 <theath_> an associative array?
19:32:00 <syntax-police> nope
19:32:09 <theath_> oh, well then nope 
19:32:27 <syntax-police> @type map
19:32:28 <lambdabot> map :: (a -> b) -> [a] -> [b]
19:32:35 <syntax-police> it takes a function, and a list, and returns a list
19:32:37 <Riastradh> @type map head
19:32:37 <lambdabot> map head :: [[a]] -> [a]
19:32:56 <Riastradh> @eval map head [[1],[1,2],[1,2,3]]
19:32:57 <lambdabot> [1, 1, 1]
19:33:05 <theath_> that's what i want
19:33:17 * syntax-police was trying to be more subtle ;)
19:33:31 <theath_> hehe
19:33:45 <theath_> awesome
19:34:00 <theath_> ok, now is there a handy function to get rid of duplicates in a list?
19:34:17 <Smerdyakov> Hm. I need a special word for people who go and give people the answers to things they should be figuring out for themselves.
19:34:33 <steveh> there needs to be an oreilly book on haskell
19:34:38 <Riastradh> Smerdyakov, it's not like it was a complicated homework problem or anything.
19:34:40 <steveh> that would cut down on this sort of thing :)
19:34:41 <theath_> newbie, lazy, in search of good resource and trying to exploit everything here
19:34:51 <steveh> laziness is the mark of a good programmer
19:34:54 <theath_> steveh: if there was, i'd buy it in a heartbeat
19:35:01 <syntax-police> theath: yes! you should find it here: http://www.haskell.org/onlinelibrary/
19:35:04 <Riastradh> Indeed, I just used one word of his!
19:35:32 <theath_> thanks syntax-police
19:35:35 <syntax-police> look at the libraries, especially the list library.  another neat resource is the wiki: http://www.haskell.org/hawiki/
19:36:11 * steveh has been falling away from haskell as of late...
19:36:29 <steveh> I have been programming Python for personal projects ... and ... heaven forfend .... perl at work.
19:36:36 * steveh breaks down in tears.
19:36:37 <steveh> :-D
19:36:49 * theath_ loves perl
19:37:19 * theath_ is scared of haskell
19:38:06 <steveh> though I used perl closures at work last week ... I am looking forward to explaining that one
19:38:51 <Riastradh> theath_, if you know Perl, you should know about map!
19:38:55 <theath_> no idea what that is. i like the builtin regex stuff w/ perl, so i use it in place of bash coding
19:39:24 <theath_> Riastradh: then i just suck. hehe
19:39:57 <theath_> is there an "include" directive like call that i need to make in my haskell file to let functions like "nub" work?
19:40:50 <syntax-police> theath_: import is what you're looking for, but you might have an easier time of all this if you read a tutorial :)
19:41:46 <theath_> gosh dangit. i should probably read that. my book talks about it for about 6 pages and i've been trying to do everything from that, but i'm starting to think i should read something a little bit more comprehensive
19:42:21 <syntax-police> this one is the one I learned from, but there are others: http://www.haskell.org/tutorial/
19:42:28 <Smerdyakov> theath_, what book is this?
19:42:45 <theath_> concepts of programming languages, also the name of the class
19:42:48 <steveh> http://www.cs.ou.edu/cs1323h/textbook/twoDzn.zip worked for me
19:43:09 <steveh> man
19:43:13 <theath_> steveh: are you a sooner?
19:43:21 <steveh> they should really teach scheme before they teach haskell in those classes...
19:43:24 <steveh> [duck]
19:43:34 <theath_> scheme?
19:43:34 <steveh> theath_: no, just found that when I was learning haskell
19:44:03 <theath_> steveh: gotcha
19:44:03 <steveh> the issue with haskell and ML is they look like they should almost be some bizarre form of algol
19:44:23 <steveh> whereas a lisp derivative hits you over the head with the fact that it is different
19:44:51 <theath_> steveh: those languages are talked about too in the book, but it's more a description of what languages have more abilities in different areas and, when writing your own language, how to accomodate your audience
19:45:18 <theath_> we don't do any really difficult coding in there, but right now we're converting prolog stuff that takes about 5 lines in prolog to 50000 lines in haskell
19:45:31 <steveh> wow, 50000 lines!
19:45:32 <steveh> damn
19:45:33 <steveh> :)
19:45:41 <blackdog> do you think so? The function application form "f a b c" really hit me over the head when i came over only knowing java and C...
19:45:42 <steveh> that might be the largest haskell project ever!
19:45:42 <theath_> he was trying to show that the advantages of prolog are pretty big (the built in database search capabilities are what i miss the most)
19:45:43 <steveh> :)
19:46:01 <theath_> hehe
19:46:03 <blackdog> that's ridiculous. YOu can write a prolog interpreter in fewer lines than that.
19:46:06 <theath_> 50001 lines now
19:46:12 <syntax-police> blackdog: good point!
19:46:17 <Smerdyakov> blackdog, if that hit you on the head, then you must have been very inexperienced.
19:46:20 <steveh> blackdog: that's just my personal opinion on the matter. of course, I learned lisp first.
19:46:33 <theath_> fine. 31 lines so far, w/ liberal line spacing.
19:47:19 <blackdog> Smerdyakov: Oh, I was. I don't mean it was particularly confusing: just that it was visually different enough that I never fell into the trap of thinking it was just a weird algol derivative.
19:49:19 <Smerdyakov> theath_, chances are you are coding it in a very inefficient way.
19:51:21 <Darius> sloccount says my Prolog intepreter is 263 lines and that's with some extra stuff that isn't necessary.
19:51:43 <Darius> Of course, it also says I should have gotten $6,647 for it.
19:52:03 <syntax-police> a class where we wrote a prolog interpreter in ML is what got me into functional programming :)
19:52:59 <Darius> What are the five lines of prolog?
20:04:38 * steveh wonders if anyone has heard of anyone doing extreme programming in haskell ...
20:04:39 <steveh> :)
20:20:17 <theath> dangit. i described the thing and i think i wasn't in the channel
20:20:23 <theath> but bitchx didn't give anything to me to tell me
20:20:28 <theath> st00pid
20:28:14 <theath> yes i can
20:34:24 <theath> .
21:57:58 <harsha123> hello #haskell
22:01:13 <harsha123> shapr hello and morning
22:13:34 <harsha123> anyone knows a good tutorial to program on bitchx ?
23:12:07 <jdrake> anyone know why nhc98 make would give this error: make: *** No rule to make target `basic-gcc', needed by `all-gcc'.  Stop.
