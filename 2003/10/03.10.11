01:35:44 --- mode: tolkien.freenode.net set +b *!23kjhkjf@*
03:17:17 <shapr> @yow
03:17:18 <lambdabot> O.K.!  Speak with a PHILADELPHIA ACCENT!!  Send out for CHINESE FOOD!!
03:17:18 <lambdabot>  Hop a JET!
03:17:56 <phubuh> @yow
03:17:56 <lambdabot> RHAPSODY in Glue!
03:19:24 <shapr> hiya phubuh, what's up?
03:20:34 <phubuh> hey shapr, i just finished an assignment in cs321 at uiuc to write a unifier and type inferring thing :)
03:21:45 <shapr> wow, nifty
03:22:10 <shapr> I hope TAPL goes through that sort of thing as well
03:22:12 <phubuh> i love courses with their material online :-)
03:22:15 <phubuh> TAPL?
03:23:05 <shapr> "Types and Programming Languages" by Benjamin C. Pierce
03:23:20 <shapr> I just got it recently, I'm reading it now.
03:23:27 <phubuh> oh, cool!
04:05:56 <shapr> @yow
04:05:57 <lambdabot> Now I can join WEIGHT WATCHERS!
04:41:33 <tic> @yow
04:41:34 <lambdabot> Maybe we could paint GOLDIE HAWN a rich PRUSSIAN BLUE--
06:18:17 <Igloo> Bah, why does nhc tell me "Unknown preprocessor directive at line 1 in file ./haskell-utils.lhs   !/usr/bin/runhugs +l" even without -cpp?
06:41:55 <isomer> morgen
09:08:01 <Lor> Anyone want a puzzle?
09:21:24 <steveh> Lor: is it a good one?
09:22:43 <Lor> Probably not. I'm just interested in how long it takes for people to figure out.
09:22:57 <steveh> well, I have a few minutes :)
09:24:05 <Lor> All right, here's the problem: give the next 10 symbols of the following sequence:
09:24:16 <Lor> aabbaabaababbababaababababaabababababababbababababababababab...
11:14:37 <Tomasso> ROR "practica6.hs":30 - Syntax error in expression (unexpected `;', possibly due to bad layout)
11:14:55 <Tomasso> how do i fix this ?? (is it an indentation problem??)
11:16:17 <Darius> possibly
11:16:24 <Tomasso> http://200.63.129.76/facultad/2anio/2cuat/Funcional/practicos/practica6/practica6.html
11:16:35 <Tomasso> look its the only function defined...
11:16:39 <Tomasso> :D
11:18:15 <dennisb> Tomasso: you have to indent the `max ...
11:18:46 <Tomasso> hmmh my editor doesnt let me...
11:18:58 <Tomasso> its doing word wrap i think...
11:19:05 <Tomasso> how would you indent it?
11:19:10 <dennisb> get a better editor
11:19:23 <dennisb> press the space button in the beginning of that line
11:19:35 <Tomasso> hehe its great it generates html from haskell highlighting :D
11:20:02 <Riastradh> Emacs can do that, but it's not specific to Haskell highlighting.
11:20:08 <Darius> Same for vim.
11:20:10 <Tomasso> it worked ;D
11:20:20 <Tomasso> yeah, but they are dificult to use...
11:20:27 <Riastradh> No, not really.
11:20:44 <Darius> At any rate, you should turn off word-wrapping when editting code.
11:20:59 <Tomasso> it works now, but it has a - Illegal type "TipTree -> Int" in constructor application
11:21:07 <Tomasso> ok
11:21:38 <dennisb> yes, you that is a bug in your program
11:21:58 <Tomasso> hihihi
11:22:33 <Tomasso> i did heightTip:: (TipTree a)-> Int
11:22:49 <Tomasso> hmm but it says undefined constructor grgr
11:23:04 <dennisb> grgr?
11:23:25 <Tomasso> haha fixed it
11:23:42 <Tomasso> hugs common errors: http://www.cs.kent.ac.uk/people/staff/sjt/craft2e/errors/allErrors.html
11:23:45 <Tomasso> (great)
12:52:01 <Tomasso> anyone there?
12:52:05 <syntax-laptop> hi Tomasso
12:52:11 <Tomasso> hello ! :D
12:52:21 <syntax-laptop> how's it going?
12:52:28 <Tomasso> goood
12:53:03 <Tomasso> where can i find stuff on the diference between algebraic types and abstract types?
12:53:22 <Tomasso> that thing is driving me crazy..
12:54:18 <syntax-laptop> This is always good for some questions, might give you some hints: http://www.haskell.org/hawiki/FundamentalConcepts
12:54:48 <Tomasso> syntax-laptop: let me check
12:54:56 <syntax-laptop> it doesn't answer your question directly, though...
12:56:05 <syntax-laptop> I think an algebreic type is just one that is made up of pieces, like a struct in C.
12:56:19 <syntax-laptop> data Foo {a :: Bar, b::Car}
12:56:31 <Tomasso> im reading that algebraic types define the exact shape of elements and a unique mecanism to inspect each element
12:57:15 <Tomasso> but what mecanism is it talking about?
12:58:45 <syntax-laptop> Hm.  You can always get at the pieces, in the example above if f :: Foo, then a f would give you that first element
12:59:17 <syntax-laptop> actually, my type sig is all wrong :(
12:59:28 <syntax-laptop> data Foo = Foo {a :: Bar, b :: Car}
12:59:41 <syntax-laptop> where did you read that definition of algebraic types?
13:01:00 <Tomasso> syntax-laptop: in my theoretical notes
13:03:49 <syntax-laptop> So you can also deconstruct them like so "(\(Foo d e) -> d) f" will give you the first element again
13:53:55 <esap> Hmm.. I understand it's possible to have a data type that is both an algebra and a coalgebra. Does that change if you distinguish cbv from cbn?
13:56:16 <esap> In particular, data Rec f = In ! (f (Rec f)) is I think both an algebra and coalgebra. Is '!' essential for the algebra side?)
14:03:01 <Lor> What's a coalgebra?
14:03:46 <Lor> An algebra is essentially a type and some first-order operations on it, right?
14:04:04 <esap> lor: dual of algebra :-) It's a collection and associated 'destructor'-like operations.
14:04:37 <esap> lor: basically, coalgebras have been used to model OO.
14:04:50 <Lor> Well, a datatype declaration always introduces both the constructors and the destructor, right?
14:05:05 <Lor> In the sense that once the type is introduced, it can be used in a case expression.
14:05:41 <esap> lor: yes.
14:06:06 <esap> lor: but not all types have coalgebra structure.
14:06:33 <esap> lor: even if they have destructors.
14:06:50 <esap> lor: I think  :-)
14:07:36 <Lor> Uh, this doesn't quite seem relevant: http://planetmath.org/encyclopedia/Coalgebra.html
14:08:12 <Lor> This does, though. http://cliki.tunes.org/Algebra%20and%20coalgebra
14:09:47 <esap> lor: hmm.. I wasn't aware that there is a concept called coalgebra for vector spaces :-)
14:11:09 <esap> I defined a coalgebra interface by: class (Functor f) => Coalgebra f a | a -> f where { destroyA :: a -> f a }
14:12:35 <esap> although I suspect that's actually for a _final_ coalgebra.
14:12:38 <Lor> Why a -> f ?
14:13:16 <esap> because for each carrier set, there is a corresponding functor.
14:13:40 <Lor> It can't act as a carrier for multiple different signatures?
14:13:55 <esap> that's why it's for final coalgebras.
14:14:27 <Lor> Hum. All right.
14:14:45 <Lor> I can't claim to understand this stuff very well, I haven't even grasped coinduction fully yet.
14:15:03 * esap hasn't grasped coinduction yet either :-)
14:15:47 <Lor> One could hope that with a proper continuation-based proof language, coinduction would look just like induction...
14:15:48 * esap also uses class (Functor f) => Algebra f a | a -> f where { createA :: f a -> a } for algebras.
14:17:01 * esap thinks again a->f makes for initial algebras.
14:21:36 <Darius> esap: The unique arrow from the initial algebra to another algebra is fold, and for final coalgebras unfold.
14:23:04 <esap> darius: hmm.. interesting. I just wrote foldA :: (Coalgebra f b) => (f a -> a) -> b -> a   foldA phi = phi . fmap (foldA phi) . destroyA   But should I have (Algebra f b) constraint on that somehow?
14:29:51 <esap> or actually, Algebra f a constraint maybe?
15:16:37 <Darius> esap: fold is a morphism between algebras.  You also don't really need a type class since there is only one initial (resp. final) (co-)algebra up to isomorphism.  If you pick a consistent way to represent carriers then there is only one "createA" and "destroyA"
15:19:16 <esap> darius: my thinking is I want to generalize the framework so that I can use any representation I like, and get the general functions for arbitrary algebras and coalgebras for free for all instances.
15:20:11 <Darius> esap: At any rate there could be several carriers for a functor, so the fundep only makes sense for an initial algebra as you mentioned, and the thing that makes the initial algebra initial is the existence of a unique morphism between it and another algebra, i.e. the existence of fold.
15:22:20 <Darius> esap: what does a typical instance of Algebra look like?
15:23:33 <esap> Well for example, I have data QXNat top = QXZero top | QXSucc (QXNat top), the algebra instance is: instance Algebra (Either a) (QXNat a) where { createA (Left a) = QXZero a ; createA (Right b) = QXSucc b }
15:25:27 <Darius> esap: How do you think of the 'f' part of Algebra?
15:26:07 <esap> darius: I think it as defining the structure of the 'a' part.
15:27:25 <esap> darius: that is, one level of 'recursion'.
15:28:10 <Darius> esap: okay, how do you describe the 'a' part?
15:28:30 <esap> darius: it's all levels of recursion.
15:28:53 <esap> darius: encapsulated in one type.
15:29:20 <Darius> esap: What is QXNat?
15:30:01 <esap> darius: that was my attempt at building natural numbers, but actually it's more like a pair of a natural number and 'top'.
15:31:09 <Darius> esap:  What would be the instance for cons lists?
15:31:42 <esap> hold on, I'll think.
15:34:58 <esap> data ListLevel a b = Nil | Cons a b   instance Algebra (ListLevel a) [a] where { createA Nil = [] ; createA (Cons x y) = (x:y) } I think.
15:35:54 <esap> Basically you replace self-reference by one additional type argument.
15:37:18 <Darius> Yes.  Applying the same reasoning should give you the typical Peano representation of Naturals.
15:37:41 <Darius> Also, that reasoning should sound familiar.
15:38:21 <esap> Heh, true, you have to do it already if you use Rec :-)
15:40:17 <esap> Oh you mean Rec Maybe is the representation for naturals?
15:40:30 <Darius> Yes.
15:40:37 <Darius> So another way of making a cons list algebra is simply, instance (ListLevel a) (Rec (ListLevel a)) where createA = In
15:41:43 <esap> Hmm.. I actually do have an instance for Algbera for Rec.
15:42:02 <Darius> And for any Functor f, you can make the initial algebra of f as simply Rec f.
15:42:02 <esap> instance (Functor f) => Algebra f (Rec f) where { createA = In }
15:42:31 <esap> OTOH, I also have a Coalgebra instance for Rec.
15:43:35 <Darius> Yes, it's pretty much the same, only with out (In f) = f instead of In, and with it you can make any final coalgebra.
15:45:50 <esap> How does that work if I have some data structures that are already recursive [e.g. ordinary lists?]. I think the class is useful for embedding those to the framework.
15:47:31 <Darius> Yes, but the a -> f is restrictive.  Both Rec (ListLevel a) and [a] are carriers for the functor ListLevel.
15:47:32 <esap> Of course, I could write conversion functions for every such type.
15:48:02 <esap> darius: that's why I don't have f -> a.
15:49:14 <esap> darius: the idea is that I only have one set of functors, but many carriers.
15:49:52 <Darius> Yah, you're right.  I was thinking backward.
18:40:36 <shapr> maybe hlibs should be split into thematic collections that have their own releases
18:45:52 <Lunar^> shapr: maybe a good idea
18:46:16 <Lunar^> shapr: btw, I will have a usable release for the PDFlib binding by the end of the week
18:46:20 <Lunar^> (the next one)
20:01:14 --- mode: brunner.freenode.net set +b *!23kjhkjf@*
20:06:53 --- mode: brunner.freenode.net set +b *!23kjhkjf@*
23:15:56 <keir> hey shapr!
23:46:27 --- mode: brunner.freenode.net set +b *!23kjhkjf@*
