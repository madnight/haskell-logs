01:33:03 <Lev> Woo.
01:44:18 <Lev> Anyone alive?
01:46:17 <prologic> yup
01:48:34 <Lev> How goes, prologic?
01:48:49 <prologic> hmm me goes alright
01:48:50 <prologic> u ?
01:49:33 <Lev> Oh... just thinking about the future. (; Feelin okay.
01:49:56 <prologic> hehe
01:50:11 <Lev> *yawns*
02:03:45 <Lev> Hmm.
02:03:50 <Lev> I wonder.
06:19:04 <SyntaxPolice> mornin'
06:19:39 <Igloo> Hi Syn  :-)
06:20:19 <SyntaxPolice> how's it going, Igloo?
06:20:27 <Igloo> Busy busy
06:20:45 <SyntaxPolice> we've got rather london-type weather here today
06:20:50 <SyntaxPolice> what are you working on?
06:20:56 <Igloo> Oh, if you get a minute can you check ghci in ghc6 6.0.1-10 works on your sparc please?
06:21:20 <Igloo> My transfer dissertation (thing you do around the end of your first year as a dPhil student)
06:22:49 <SyntaxPolice> sounds cool!
06:23:04 <SyntaxPolice> I'd be glad to try out ghci, but I don't have access to my sparc until I go home and plug it in, but I will do so :)
06:23:13 <Igloo> Heh, OK  :-)
06:26:10 * Igloo wanders off bathwards
07:18:23 <Lunar^> Did someone heard of a binding for resolver(3) functions ?
07:28:20 <jadrian> hello
07:40:38 <basti_> boing
08:12:10 <basti_> did I mention Haskell is fun? :)
08:12:23 <prologic> no
08:12:26 <prologic> but I have to agree with you :)
08:12:29 <prologic> it's terribly fun :)
08:12:36 <basti_> *g*
08:12:56 <basti_> I always thought Prolog was crazy but haskell is even more over the edge
08:33:49 <Igloo> Syn: Are you still around?
08:33:54 <shapr> Lunar^: dns functions?
08:44:00 <SyntaxPolice> hi Igloo
08:44:11 <SyntaxPolice> use  my full name and I'll get highlighting and know you're trying to talk to me :)
08:44:24 <Igloo> Do you know why hugs is marked uninstallable on http://qa.debian.org/developer.php?login=Isaac+Jones ?
08:44:38 <Igloo> Sorry, Isaac Jones  :-)
08:45:21 <Igloo> (uninstallable on mips(el) that is to say)
08:45:51 <SyntaxPolice> I mean my full handle :)
08:45:59 <SyntaxPolice> but no, I don't know :(
08:46:11 <SyntaxPolice> andI do'nt have time to look at it today, but I can this weekend.
08:47:38 * Igloo has asked #debian-devel, as I'd expect any reason to be listed on the problems page
08:48:17 <SyntaxPolice> do the autobuilders complain for those arches?
08:49:02 <Igloo> They seem to have built it fine
08:49:21 <SyntaxPolice> I can't log into those machines to try it out
08:49:39 <SyntaxPolice> I did get an email from my NM guy this morning, though :)
08:50:49 <Igloo> Huh? You can still look at the build logs on http://buildd.debian.org/build.php?pkg=hugs98
08:50:59 <Igloo> Cool
08:51:53 <SyntaxPolice> I know I can look at the build logs, but I can't log into those machines to installt he package to see why it won't install
08:51:55 <SyntaxPolice> ie test it :)
08:52:37 <Igloo> Ah, well you wouldn't be able to install packages anyway
08:52:55 <Igloo> I guess you could try dpkg/apt with locking off and --no-act or something
08:54:01 <SyntaxPolice> I've got some package cleanup to do this weekend. my xppaut package is out of date too. so I'll look at all this then.
09:58:52 <shapr> hi Heffalump 
10:00:00 <Heffalump> 'lo
10:01:50 <shapr> wassup?
10:02:22 <Heffalump> stuff
10:02:23 <Heffalump> :-)
10:02:35 <Lunar^> shapr: yes dns functions
10:02:50 <Lunar^> shapr: getHostByName ask only A records, I need to ask for MX
10:05:03 <shapr> have you seen HsDNS?
10:05:43 <Lunar^> Nope
10:06:24 <shapr> what's your email address, I'll send it to you
10:06:24 <Lunar^> Date: Tue, 16 Sep 2003 07:00:22 -0700 
10:06:30 <Lunar^> http://www.mail-archive.com/haskell-cafe@haskell.org/msg03457.html
10:06:42 <shapr> right, that one
10:06:47 <Lunar^> Neat :)
10:06:59 <Lunar^> lunar@lautre.net same as my GPG key :)
10:07:23 <shapr> oh, of course
10:08:51 <Lunar^> luv :0
10:14:57 * shapr grins
10:15:03 <shapr> hi jnf_ 
10:22:46 <harsha123> hi
10:22:51 <harsha123> heloa #haskell
10:23:06 <shapr> y0
10:23:17 <harsha123> shapr: hi :)
10:24:07 <steveh> okay
10:25:07 <shapr> steveh: what is?
10:26:57 <keverets> HsDNS sounds interesting... is it available publically?
10:27:08 <shapr> I think it's BSD licensed
10:27:39 <shapr> yes, it is
10:27:44 <shapr> what's your email? I'll mail it to you
10:28:22 <keverets> everetk@mcmaster.ca
10:29:08 <keverets> hrm... this list is publically archived, isn't it?  perhaps I should have spam-protected that.  Ah, well, bogofilter will have even more to chew on.
10:29:16 <shapr> yup
10:43:03 <Lunar^> shapr: does exectly what I need
10:43:18 <Lunar^> Thanks a lot
10:43:30 <Lunar^> using -lresolv is just pain
10:44:05 <Lunar^> Why it's not in hlibs ?
10:46:47 <shapr> I dunno
10:47:01 <shapr> I'll ask Tomasz if I can put it in there
10:49:22 <shapr> hm, I need to make up a webpage for the hlibs darcs repo
10:49:45 <shapr> does anyone know if there's a TaPL implementation in Haskell?
10:49:51 <shapr> I'd rather not use OCaml if I can skip it.
11:07:30 <harsha123> I would be afraid to fly in an airplane that was designed with floating point arithmetic
11:07:50 <harsha123> hehehe.. i picked that from the Cornell Website
11:59:24 <tomasso_> Hello
11:59:59 <tomasso_> can anyone tell me a way to view the contents that are input toi a function?
12:01:33 <tomasso_> is anyone there??
12:01:43 <ibid> yes
12:01:53 <ibid> your question does not parse
12:02:16 <tomasso_> ibid what do you mean?
12:02:31 <ibid> i don't get the question
12:02:39 <Lev> lol
12:03:12 <tomasso_> the problem haha is that i need to know the inputs that are given to a function
12:03:38 <ibid> tomasso_: why is that a problem? isn't that trivial?
12:04:26 <tomasso_> ibid i know the type of the function, but i need to know some information about it...
12:04:45 <ibid> more precisely?
12:04:48 <tomasso_> (i didnt write the fuunction, )
12:05:31 <tomasso_> ok, for example 
12:05:41 * basti_ awakenbs
12:05:45 <basti_> bsbn
12:05:47 <tomasso_> i have a fuunnction that gets a list as parameter
12:06:11 <tomasso_> i need to know the contents of that list
12:06:32 <ibid> surely you know it already
12:06:50 <ibid> (if you are the caller or the callee, and i don't see what else you can be)
12:07:13 * basti_ .oO° ( is it just me or did that rhyme? )
12:07:23 <ibid> :)
12:07:38 <basti_> guess this was a lambdarick
12:07:41 <tomasso_> hmhm is there any way to do that?
12:07:47 <ibid> do what?
12:07:51 <basti_> Tomasso what exactly do you want to do?
12:07:59 <ibid> as far as youäve explained the problem, it's trivial
12:08:20 <ibid> so far, i don't see a problem
12:08:21 <tomasso_> ive been looking for some debuggers...
12:08:50 <basti_> Tomasso did you try to use the functions interactively
12:08:51 <basti_> ?
12:09:12 <tomasso_> basti_ what do you mean?
12:09:23 <ibid> basti_: how would that help to know the _argument_ list? if you call the function you already must know the list
12:09:28 <basti_> i for example try programs with hugs
12:09:33 <tomasso_> (im using hugs)
12:09:40 <basti_> see :)
12:09:46 <basti_> so where is the problem now?
12:10:06 <basti_> ibid he asked ;)
12:10:22 <tomasso_> what does programs do?
12:10:24 <ibid> basti_: i still don't see a problem :)
12:10:36 * basti_ neither
12:10:47 <basti_> tomasso_: uhm... well thats a thing you should know
12:10:48 <tomasso_> hahahaha why dopnt you see the problem?
12:11:02 <ibid> tomasso_: because you have not explained it
12:11:22 <basti_> tomasso_: honestly, nobody can tell you what a program does *really*... its everything just interpretable from a viewpoint...
12:11:23 <tomasso_> hmhm ok i explain it again
12:11:57 <ibid> tomasso_: if you are the caller, you already know what arguments you give the function, so your "problem" of how to find that out is rather ... trivial
12:12:10 <ibid> unless your real problem is something else than what you described
12:12:37 <tomasso_> ibid, ,im not the caller
12:12:40 <ibid> are you asking how to know what kind of arguments a function accepts?
12:12:51 <ibid> tomasso_: you are not the callee either, you said earlier. who are you then?
12:13:03 <tomasso_> ibid, not what kind of argument
12:13:10 <tomasso_> i know the kind
12:13:19 <ibid> ok, then i don't see your problem
12:13:50 <basti_> do you maybe want the set of arguments a function was called with?
12:14:04 <tomasso_> ok, supoose you have a function that accepts a lkist of integers
12:14:19 <tomasso_> you know the typoe
12:14:48 <tomasso_> i want to know exactly what integers were passed
12:15:07 <tomasso_> this is done i think using a debugger
12:15:14 <ibid> tomasso_: you could add trace to the function
12:15:34 <tomasso_> ibid, how do i do that?
12:15:43 <tomasso_> you see the problem, right?
12:16:04 <ibid> tomasso_: i have a guess of what the problem might be :)
12:16:16 <basti_> trace sounds good
12:16:21 <basti_> i just dont know how to do that either ;)
12:16:25 <tomasso_> ok
12:16:30 <ibid> tomasso_: func a b c d e = trace (show (a,b,c,d,e)) $ rest of the function
12:16:41 <ibid> (you need a proper import)
12:16:44 <tomasso_> hmhm there should be couments on how to do it
12:17:07 <ibid> hm?
12:17:34 <tomasso_> hmhmhm do i have to put the $??
12:17:48 <ibid> it helps
12:17:57 <tomasso_> ibid do you know the name of the import?
12:18:13 <ibid> tomasso_: not for hugs
12:18:23 <ibid> tomasso_: try import Trace
12:18:50 <Igloo> Debug.Trace ought to be standard these days I'd have thought
12:19:01 <tomasso_> hmhmm grgr 
12:19:04 <ibid> probably yes
12:19:05 <tomasso_> for hugs?
12:20:03 <tomasso_> if i do import trace...
12:20:45 <ibid> import trace will not work (import Trace might, but import Data.Trace is more likely to work)
12:21:21 <tomasso_> let me check
12:21:36 <ibid> hierarchical modules rock ;)
12:23:11 <tomasso_> gotta go
12:26:20 <tomasso_> hmhm guys i did it i imported the trace module properly
12:26:46 <ibid> Debug.Trace, of course :(
12:27:03 <tomasso_> but it returns : instance of show memory required for definition of play
12:27:17 <ibid> that's quite true :)
12:27:18 <tomasso_> (it was just trace)
12:27:26 <ibid> you can't show something you can't show :)
12:27:33 <tomasso_> ibid  what does it mean?
12:27:55 <ibid> what it says
12:28:27 <tomasso_> and how do i fix it...:D
12:28:42 <ibid> you derive or instance Show for the type
12:28:44 <ibid> of course
12:28:56 <tomasso_> hahaha let me check
12:29:29 <tomasso_> what type the type of the parameters?
12:29:51 <ibid> the type of what you give to show :) (or trace?)
12:30:16 <tomasso_> ok
12:32:09 <tomasso_> is this wrong?
12:32:18 <tomasso_> type Env = [((Int,Int),Info)] deriving Show
12:32:25 <ibid> no
12:32:29 <Igloo> Yes
12:32:29 <ibid> actually yes
12:32:33 <Igloo> :-)
12:32:39 <tomasso_>  Syntax err
12:32:42 <tomasso_> or in input (unexpected keyword "deriving") 
12:32:42 <ibid> didn't notice the "type" there :)
12:32:56 <ibid> put it to Info
12:33:00 <ibid> not Env
12:33:22 <tomasso_> i found  Syntax err
12:33:28 <ibid> sleep time, bbl
12:33:48 <tomasso_> deriving (Eq,Show)i found
14:57:31 <Clearcode> hello
15:03:13 <Riastradh> Hi.
15:03:39 <Clearcode> hi Riastradh
15:05:41 <mattam> hi
16:12:49 <zaragata> hey there
16:13:23 <zaragata> is anyone here familiar with buddha?
16:13:45 <zaragata> (the debugger...)
16:14:38 <Darius> I hacked it a little to work on Windows but never really used it.
16:17:19 <Heffalump> apparently there's no point in using it cos all the code you might want to debug with has comments saying "the bug is here"
16:17:49 <zaragata> lol
16:18:21 <zaragata> i passed it a code that is ok with ghc & hugs, but buddha says there is a parse error
16:19:45 <Darius> I don't think any of the releases have changed the fact that Buddha only works with Haskell 98 and maybe not even all of that, though I'd imagine so with a 1.0 release.
16:20:30 <zaragata> :-(
16:21:24 <zaragata> so, which debugger shoud i use?
16:22:07 <zaragata> i have tried hood a little bit 
16:23:47 <zaragata> but would like something more interactive
16:24:20 <Cale> I usually use ghci or hugs
16:24:33 <Cale> though they're not exactly "debuggers"
16:25:07 <Darius> The only thing that works with all extensions (for GHC) that I can think of is HsDebug.  However, that requires building a speculative-eval GHC and it's rather new.
19:52:02 <blackdog> anyone got a pointer to a good resource on records in Haskell?
19:53:05 <Riastradh> Records as in 'data Point = Point { pointX :: Integer, pointY :: Integer }'-type things?
19:53:28 <blackdog> Yeah, that. I don't use them all that much, so i don't know the semantics.
19:53:49 <Riastradh> http://www.haskell.org/onlinereport/
19:54:13 <blackdog> Are they called records? I couldn't find it there... <looks again>
19:54:57 <blackdog> ah, there they are. sorry, stupid question.
19:59:37 <blackdog> so if i've got something like 'data Point = Point { x::Int, y::Int}', and I'd like to write a function 'double' that when given the 'x' selector, returns a new point with the x co-ord doubled and when given the y selector does the same with the y co-ord...
20:00:08 <blackdog> can I do this? I'm a bit stumped... i can hack a nasty way around it, but i'd rather do it cleanly.
20:00:30 <Riastradh> double p = Point { x = x p * 2, y = y p * 2 }  -- I think that should work.
20:02:18 <blackdog> Ok, that'd be the hack I was talking about: you're encoding the (* 2) bit twice. obviously, this is a cut-down example: i've got a much bigger data structure with some repeated parts, and I'd like to be able to factor that out.
20:03:19 <blackdog> oops, wait: doesn't that double both?
20:05:12 <blackdog> i'd like to be able to write "double x (Point 2 2)" and get "Point 4 2".
20:08:56 <Smerdyakov> Record selectors are not first-class.
20:09:08 <Smerdyakov> However, you can get any result you want using functions, most likely.
20:10:50 <blackdog> Ah, ok. I was hoping to avoid writing a plethora of support functions, but I guess there's no choice.
20:13:51 <Darius> I wouldn't be surprised if DrIFT could generate updaters.
20:15:46 <blackdog> I'm not overly keen on using a preprocessor... it's only a syntactic nicety, really.
20:24:00 <Smerdyakov> How is what you're asking for not "syntactic nicety"?
20:27:54 <blackdog> It is a syntactic nicety.
20:28:44 <blackdog> it's a minor pain to have to spell it all out in a source file, but not painful enough to put another processing step into my compile.
20:34:38 <Smerdyakov> I don't think I've ever wanted a feature like this
20:34:39 <Smerdyakov> .
20:36:54 <blackdog> This is the first time I've ever wanted it, too... :)
21:25:39 <Darius> Well, I have TH generating updaters
21:36:43 <harsha123> heloa! haskell
21:37:32 <harsha123> hi shapr (guess you are asleep) :)
21:55:38 --- mode: brin.freenode.net set +b *!23kjhkjf@*
22:22:08 --- mode: sendak.freenode.net set +b *!23kjhkjf@*
22:27:25 --- mode: brin.freenode.net set +b *!23kjhkjf@*
22:32:04 --- mode: tolkien.freenode.net set +b *!23kjhkjf@*
