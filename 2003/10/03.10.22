02:24:39 <phubuh> paragraph :: String -> Node
02:24:42 <phubuh> class Typeset a where
02:24:42 <phubuh>     typeset :: a -> Node
02:24:45 <phubuh> instance Typeset String where
02:24:46 <phubuh>     typeset = paragraph
02:25:01 <phubuh> why is the Typeset String instance illegal?
02:25:05 <phubuh>         (The instance type must be of form (T a b c)
02:25:06 <phubuh>          where T is not a synonym, and a,b,c are distinct type variables)
02:26:33 <phubuh> by the way, it would be very convenient if the type system let you have, say, a list of values that have instances of Show
02:32:33 <Heffalump> cos String is a type synonym for [Char]
02:35:26 <phubuh> what's wrong with that?
02:35:41 <phubuh> oh right, you can only instantiate for 'real' types, right?
03:08:57 <Heffalump> well, the problem is that [Char] isn't of the form T a b c
03:09:41 <phubuh> but neither is Integer (or is it?), yet instance Typeset Integer works fine
03:12:32 <Heffalump> no, Integer is
03:12:38 <Heffalump> it's not a synonym
03:12:53 <Heffalump> it's of the form T a b c where there are no a b cs
03:13:06 <Heffalump> whereas [Char] is [] Char, which isn't cos Char isn't a type variable
03:13:30 <Heffalump> can you do instance Typeable Char and instance Typeable a => Typeable [a] ?
03:13:46 <Heffalump> otherwise, you can do what the Show class does and have an explicit method in the class for lists
04:38:50 <shapr> @yow
04:38:51 <lambdabot> This PORCUPINE knows his ZIPCODE..  And he has ``VISA''!!
05:14:23 <shapr> wow, it's fun to look through my important papers box
06:44:27 <SyntaxPolice> hihi
06:44:47 <phubuh> has there been any discussion on the possibility of using type classes as types themselves; for example, [Show] could be the type of lists that contain Showable values?
06:45:46 <phubuh> hi syntax :-)
06:46:12 <Lunar^> phubuh: this is actually written as Show a => [a]
06:46:17 <Lor> That's essentially an existential type: [exists a . Show a => a]
06:47:10 <Lor> (No, it's not supported as such anywhere yet, afaik)
06:47:24 <phubuh> oh, sorry, i should've explained myself better: a list of type Show a => [a] cannot be, say [3, "foo", True]
06:47:56 <Lunar^> Uhh ok
06:48:07 <Lor> Direct support for such things would complicate other stuff too much.
06:48:10 <Lunar^> This is not Hindly-Mindler then I think
06:48:27 <Lunar^> It could be important if we had polymorphic records also
06:48:35 <phubuh> i see
06:48:36 <phubuh> :/
06:48:53 <Lor> If [3,3] were of such a type, then it'd have to be implicitly coerced to existential packages which include the directory. That is operationally non-trivial so it's better that the packing is done explicitly in code.
06:49:25 <Lunar^> HM doesn't allow one to write : prog id where prog f = (f 3, f True) 
06:49:57 <Lor> Just define data Shown = forall a . Show a => Shown a
06:50:09 <Lor> And then [Shown] is your type.
06:50:47 <Lunar^> Lor: then [Shown 3, Shown "foo", Shown True] :: [Shown]
06:51:07 <Lor> But why would you want such a thing? If the only thing about the elements of the list that interests you is their written representation, then why not just put the strings into the list directly?
06:51:41 <phubuh> oh i don't, i just used Show as a trivial example
06:52:32 <Lunar^> With polymorphic record you want that
06:53:43 <Lor> Why?
06:54:00 <Lor> Ah, sorry, I see.
06:54:23 <Lunar^> [a, b, c] are different types of records
06:54:45 <Lunar^> But you know that all of them got a "pos" record
06:54:56 <Lunar^> And you want to access it uniformaly
06:55:13 <Lunar^> You'd have to make a type class for now
06:55:55 <Lor> Hm, tricky.
06:56:27 <Lunar^> Not that much
06:56:31 <Lor> IIRC, most proposals for polymorphic records in haskell are to be implemented with something akin to dictionaries. So here, too, the dictionaries would have to get implicitly bundled.
06:56:40 <Lunar^> System I is able to do that
06:56:53 <Lor> What's that?
06:56:58 <Lunar^> Another type system
06:57:24 <Lunar^> But generated types are unreadable and unwrittable by humans
06:57:53 <kosmikus> Lunar^: reference to System I?
06:58:44 <Lunar^> kosmikus: One of my friend wrote an extension to System I (Iomega)
06:59:31 <Lunar^> http://citeseer.nj.nec.com/carlier02polar.html
07:00:02 <kosmikus> thanks
07:00:29 <Lunar^> He's now working at ULTRA on System E
07:00:43 <Lunar^> which is the « next-generation » system I
07:00:56 <Lunar^> One of his point is that there's two families of type systems
07:01:15 <Lunar^> One for humans, the other for computers
07:01:59 <Lunar^> The later can be more precise than the former, making them able to type more (valid) programs and to be more helpful for optimisations
07:02:28 <kosmikus> certainly
09:02:16 <prologic> How does Java's (in 1.5) generics compare with the Haskell type system ?
09:02:28 <prologic> With respect to expressiveness
09:02:46 <shapr> there is no comparison ;-)
09:03:13 <prologic> lol
09:03:14 <prologic> I know that :)
09:03:17 <shapr> actually, I don't know how generics work in Java 1.5, but anything that has ... extant(?) ... typing
09:03:33 <shapr> what's the name for C/Java style typing?
09:03:35 <shapr> I've forgotten
09:03:37 <prologic> well as far as i know generics in java just avoid type-casting
09:03:57 <prologic> allows you to tell the compiler (for instance) that a List will contains Strings
09:04:02 <prologic> and not just Objects
09:04:35 <shapr> that's handy
09:04:39 <prologic> perhaps
09:04:46 <Heffalump> existing polymorphism in C/Java is ad-hoc
09:04:48 <prologic> not that I like Java in anyway shape or form
09:04:54 <Heffalump> templates will introduce parametric polymorphism
09:05:07 <prologic> which is precisely what generics are right ?
09:05:11 <prologic> or trying to be
09:05:11 <Heffalump> yes
09:05:13 <prologic> but Haskell already has this
09:05:17 <Heffalump> indeed
09:05:22 <prologic> excellent
09:05:25 <prologic> I understand (slowly)
09:05:26 <shapr> ergo, don't use Java ;-)
09:05:27 <Heffalump> Haskell has both ad-hoc (through type classes) and parametric polymorphism
09:05:35 <prologic> yup
09:05:50 <Heffalump> though the ad-hoc polymorphism is only static, whereas in C++/Java it is dynamic
09:05:50 <kosmikus> that's why "genericity" in the context of Haskell usually means something different
09:06:51 <prologic> k
09:07:03 <prologic> it'll get into my head soon enough ;)
09:08:43 <prologic> Haskell's type classes are similar to Java's generics. Existing polymorphism in Java was only ad-hoc, but the introduction of generics will introduce parametric polymorphism slowly but surely. On the other hand Haskell is far superior to Java 1.5 as it has had both ad-hoc and parametric polymorphism since the creation of the language.
09:08:51 <prologic> I'm not even sure what the hell I'm saying, but how's that sound ?
09:09:01 * prologic kicks the damn clock (2:09am)
09:09:50 <kosmikus> the Haskell part is okay ;)
09:10:25 <prologic> oh good :)
09:10:27 <prologic> excellent
09:10:32 <prologic> how bout the Java part :P ?
09:11:05 <prologic> that's what I have to compare, Java 1.5 generics vs. Haskell type system (with respect to expressiveness).
09:12:31 <Heffalump> the fact that it's had it for longer isn't really evidence that it's "far superior" now
09:12:48 <prologic> you're right
09:12:51 <Heffalump> "slowly but surely" is just meaningless (and untrue) rhetoric
09:13:21 <shapr> Haskell didn't have ad-hoc polymorphism until the late 90s
09:13:28 <Heffalump> huh?
09:13:31 <kosmikus> no
09:13:36 <Heffalump> type classes have been around for ages
09:13:46 <kosmikus> I just checked the 1.0 Haskell report, and it mentions classes
09:13:51 <shapr> oh
09:13:51 <Heffalump> "Once upon a polymorphic type" was the paper that introduced them, IIRC
09:13:58 <shapr> I though they were 1997 or so
09:13:59 <shapr> hm
09:15:08 <kosmikus> constructor classes have been added later, afaik
09:15:16 <kosmikus> but also before 1997, I'd guess
09:16:07 <kosmikus> yeah, in Haskell 1.3, which is 1996
09:16:32 <Heffalump> constructor classes are beyond anything Java 1.5 will have, anyway
09:17:44 <harsha123> hi prologic :) morning ;)
09:17:48 <harsha123> hi shapr 
09:17:50 <prologic> hi harsha123 :)
09:18:19 <harsha123> am sorry, the other day my link went down while i was talkin to you
09:19:04 <shapr> hi harsha123 
09:20:16 <harsha123> shapr hello.. :)
09:26:52 <shapr> how's code?
09:41:15 <harsha123> shapr was that for me?
09:41:40 <shapr> yup
09:42:29 <harsha123> shapr i am exploring some band width managment solution for a customer who wants it.
09:42:47 <harsha123> shapr reading some iptables tc and rrdtools
09:42:58 <shapr> sounds like fun
09:43:12 <harsha123> trust me.. i havent started haskelling seriously :(  
09:43:23 <harsha123> i have to make some time for it...
09:44:25 <harsha123> shapr is that fun ? :)
09:44:38 <harsha123> yep, sounds like... :)
09:44:49 <harsha123> and what are you doing?
09:45:28 <shapr> I'm trying to figure out why zope won't listen on a port when I start it.
09:45:35 <shapr> network tools are fun
09:46:13 <harsha123> yep,but figuring it out is hell sometimes..
09:46:39 <harsha123> shapr do you use apache? 
09:47:03 <shapr> no, I run zope on port 80
09:47:17 <harsha123> Ok..
09:47:28 <shapr> I've thought of running zope through apache, I've heard it would improve transfer efficiency of large files
09:47:33 <shapr> but everything is fast enough at the moment
09:47:58 <harsha123> hmm...
09:48:39 <harsha123> what kinda server appliances do ya sell? webservers and ?
09:49:32 <shapr> we just build websites right now, we don't resell hardware
09:49:37 <shapr> though I've been considering that
09:49:50 <shapr> I used to sell and repair hardware in another country
09:50:02 <harsha123> Ok..
09:50:18 <shapr> we partner with an ISP for colocation of ourselves and our customers
09:51:16 <harsha123> dont people ask for specifics like CVS servers or bandwidth management soulutions,mail servers etc....? i guess that should do good business isn't it?
09:52:07 <shapr> no one has asked us for any services like that
09:52:18 <harsha123> Ok...
09:52:20 <shapr> most of our clients wouldn't know CVS if it bit them
09:52:29 <harsha123> hehehe...
09:52:32 <shapr> most of our clients can barely manage MS Outlook
09:52:40 <harsha123> ok..
09:53:11 <harsha123> here, people ask for a lot of bandmanagment stuff..
09:53:21 <harsha123> but how do ISP's manage bandwidth?
09:54:07 <harsha123> in sweden ? any specific toools?
09:54:07 <shapr> I don't know
09:54:09 <harsha123> hmm Ok
09:54:19 <esap> Just have a router that drops packages if bandwidth is exceeded, I guess.
09:54:37 <esap> s/packages/packets/ :-)
09:55:54 <harsha123> :)
09:56:53 <harsha123> shapr are you on ERC?
09:57:21 <shapr> yup
09:57:22 <shapr> I'm using ERC Version 4.0 $Revision: 1.553 $ with XEmacs 21.4 (patch 14) "Reasonable Discussion" XEmacs Lucid!
09:57:45 <harsha123> how do ya DCC over ERC ?
09:57:59 <shapr> there's a gnumacs way to do it
09:58:00 <harsha123> or bitchx for that matter?
09:58:02 <shapr> or you can use sendfile
09:58:25 <harsha123> bitchx?
09:58:43 <shapr> I think you can do "/dcc send" with bx
09:58:51 <shapr> or if someone has sent you something, /dcc receive
09:59:55 <harsha123> ok ..
10:00:13 <shapr> mmm, full duplex 100Mbps scp
10:01:41 <harsha123> shapr i had a problem acutally. I download mp3's over xchat. when i do that i usually get hits for my search on seperate tabs. but in bx, i get numbers 1,2,3 ( i guess they are the hits for my search) i wanna know i do i get to those hits?
10:18:56 <harsha123> shapr U there?
10:19:02 <harsha123> busy?
10:31:19 <shapr> eh?
10:31:26 <shapr> oh
10:31:29 <shapr> I don't know
10:32:54 <harsha123> ok
18:10:48 <larrikin> I'm having problems building ghc (6.0.1)
18:11:38 <syntax-laptop> larrikin: you don't happen to be using Debian, do you? :)
18:12:10 <larrikin> nope ..  not in this case..
18:12:23 <larrikin> i386-unknown-cygwin32
18:13:34 <syntax-laptop> ahh. I know nothing of windows :)
18:14:04 <larrikin> I think I may have succeeded in building the 'boot' stage ghc .. but I don't know this .. currently I'm failing to build the base libraries with problems building *.hsc into *_hsc.c
18:15:18 <larrikin> maybe I've missed building one of the needed tools along the way .. I doubt that it's particularly a windows thing
18:15:51 <syntax-laptop> out of curisity, why are you building it from scratch?
18:16:55 <syntax-laptop> which gcc are you using?
18:17:37 <syntax-laptop> what's the error you're getting?
18:17:41 <larrikin> I couldn't determine if the installer versions were totally compatible with a pre-existing cygwin install ... I read somewhere that they were designed to be standalone
18:18:15 <larrikin> gcc (GCC) 3.3.1 (cygming special)
18:18:50 <syntax-laptop> hm. from the building guide: GCC 3.3 currnetly cannot be used to build GHC, due to some problems with the new C preprocessor.
18:18:59 <larrikin> make[2]: *** No rule to make target `System/Posix/Directory_hsc.c', needed by `depend'.  Stop.  (same for all *.hsc -> *_hsc.c)
18:19:02 <syntax-laptop> http://www.haskell.org/ghc/docs/6.0.1/html/building/sec-pre-supposed.html
18:19:03 <Igloo> It should be OK with 6.0.1
18:19:07 <syntax-laptop> oh really?
18:19:22 * syntax-laptop stands aside for the expert ghc builder :)
18:19:31 <Igloo> :-)
18:20:35 <larrikin> if you want me too I will replace the source tree and start again..  I don't think it will build cleanly out of the archive as is ..
18:20:48 <larrikin> too*
18:21:55 <syntax-laptop> Igloo: so the ghc 6.0.1 building guide is wrong when it says do'nt use gcc 3.3, 'eh?
18:23:08 <Igloo> Unless I'm confused - well, conservative you might call it  :-)
18:23:42 <larrikin> I would expect to see "internal error" being reported somewhere if this was the problem ..
18:24:00 <syntax-laptop> so are .hsc files for the FFI?
18:24:14 * Igloo goes to bed
18:24:37 <syntax-laptop> bye Igloo
19:33:41 <larrikin> what process is required to generate *_hsc.c from *.hsc in the libraries/base.. area of the ghc source ?  
20:12:19 <larrikin> what am I doing wrong ..?
20:12:55 <larrikin> I execute ./configure --prefix=/usr --enable-hc-boot --with-gcc=/bin/gcc.exe
20:13:24 <larrikin> then 'make stage1' from the top dir
20:13:56 <larrikin> first error is ..
20:14:10 <larrikin> ==fptools== make boot - --unix -wr;
20:14:11 <larrikin>  in /usr/src/ghc-6.0.1/libraries/base
20:14:12 <larrikin> ------------------------------------------------------------------------
20:14:13 <larrikin> make[2]: *** No rule to make target `System/CPUTime_hsc.c', needed by `depend'.  Stop.
22:58:54 <larrikin> seems like current version has a glossy binary installer in preference to a sane build config where win is concerned .. are previous versions any more likely to co-operate with cygwin ?
23:01:35 <larrikin> fwiw I've installed the installer binaries in the hope of make a more useful build .. so I have a ghc.exe .. now I'm getting messages like 'c:\ghc\ghc-6.0.1\bin\ghc.exe: unknown package name: unix'
23:03:52 <Darius> Don't use Cygwin for anything but the build -environment- (unless they've changed their advice sense last I built GHC).  Use a straight MinGW and the GHC binary (also MinGW).
23:06:46 <larrikin> what if I want to incorporate C code into my apps and want to use everything cygwin can offer in terms of *nix portability .. like std unix library funcs and directory struct .. ?
23:07:15 <larrikin> which is what cygwin is all about .. correct me if I'm wrong here
23:07:58 <larrikin> maybe I'll have to give haskell a big miss on windows
23:10:42 <larrikin> at this point I'm tearing my hair out .. I'm thinking I need to add a '-B' flag to the ghc invocation within some of the Makefiles .. maybe .. in order for it to locate the unix / readline libs
23:11:59 <Darius> You shouldn't need to build a Cygwin GHC to link to C code that uses Cygwin or links to Cygwin libraries.
