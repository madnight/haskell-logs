00:09:00 <Pseudonym> @yow
00:09:01 <lambdabot> ..  If I had heart failure right now, I couldn't be a more fortunate man!!
01:58:45 <shapr> @yow
01:58:45 <lambdabot> What UNIVERSE is this, please??
02:25:20 <shapr> g'day clausen 
02:25:23 <shapr> gutentag kosmikus 
02:25:42 <clausen> gday shapr
02:25:53 <shapr> what's up?
02:26:36 <clausen> I'm mystified...
02:26:43 <shapr> by what?
02:26:47 <clausen> we and my girlfriend whipped up a program yesterday
02:26:51 <clausen> s/we/me/
02:27:04 <shapr> wouldn't that me I since it's in the subject? ;-)
02:27:20 <clausen> to classify emails as being written by male and female authors
02:27:25 <shapr> oh, nifty
02:27:26 <clausen> it works TOO well
02:27:33 <clausen> 100% accuracy
02:27:33 <shapr> this I gotta see
02:27:37 <prologic> lol
02:27:39 <clausen> (haven't taken it "out of the lab")
02:27:41 <prologic> how ?
02:27:45 <prologic> that's nearly impossible in my mind
02:27:47 <clausen> prologic: statistics / compression
02:27:52 <clausen> prologic: exactly
02:27:53 <shapr> yah, I agree, sounds nearly impossible
02:27:57 <clausen> prologic: which is why I don't believe it
02:28:02 <prologic> this I gotta see too
02:28:07 <prologic> it does
02:28:09 <clausen> (see disclaimer about "taking out of the lab")
02:28:13 <prologic> there's no sensible way (in my mind) of doing this
02:28:17 <prologic> everyone writes differently
02:28:17 <shapr> can I donate some emails to be classified?
02:28:39 <clausen> it reminds me of a well publicised example of AI:
02:28:46 <prologic> yeah I'll donate some as well :P
02:29:04 <shapr> is the program written in Haskell? I'd like to play with it.
02:29:06 <clausen> prologic: it hasn't been trained widely (only on alt.soc.religion, or something)
02:29:11 <clausen> shapr: python
02:29:25 <clausen> this guy wanted to write a program to automate mamogram analysis
02:29:27 <prologic> hrmm python
02:29:29 <clausen> (for breast cancer)
02:29:33 <shapr> ah, my second favorite language, easily ported to Haskell :-)
02:29:47 <clausen> so, he used a machine learning algorithm
02:29:53 <clausen> fed 100 positive samples
02:29:55 <clausen> 100 negative samples
02:30:07 <clausen> and then 100 test samples, to see how well it performed.
02:30:10 <clausen> well, 100% :)
02:30:17 <clausen> then, when deployed, it was totally useless
02:30:22 <prologic> what algorithm did he use ?
02:30:27 <clausen> then, they found out what happened
02:30:32 <shapr> overtraining?
02:30:42 <clausen> all samples (including testing data) had a yellow sticker if they were positive
02:30:52 <shapr> aha!
02:30:54 <shapr> that's too funny
02:30:59 <clausen> it got really good at looking for yellow stickers ;)
02:31:04 <prologic> lol
02:31:16 <prologic> that's funny
02:31:23 <clausen> so, I'm looking for yellow stickers! ;)
02:40:06 <shapr> have you found any yet?
02:40:12 <shapr> or any possible yellow stickers?
03:57:16 <shapr> @yow
03:57:16 <lambdabot> Yow!  Am I having fun yet?
04:38:57 <phubuh> @yow
04:38:58 <lambdabot> TAPPING?  You POLITICIANS!  Don't you realize that the END of the
04:38:58 <lambdabot>  ``Wash Cycle'' is a TREASURED MOMENT for most people?!
05:04:41 <Lunar^> Is there anyway to have something like System.Cmd.system that would let me get the standard output ?
05:05:58 <Lunar^> Posix.runProcess
05:08:22 <phubuh> popen "executable" [] (Just "standard input") >>= return . fst3
05:08:33 <phubuh> where fst3 (a, _, _) = a
05:10:06 <Lunar^> phubuh: where's defined popen ?
05:12:18 <phubuh> in Posix, i think
05:13:29 <Lunar^> I think I should try to do a shell using Haskell sometime
05:15:27 <Lunar^> http://www.electronconsulting.com/shell-haskell/
05:19:10 <Lunar^> POpen.popen <-- not in the new libs
05:22:17 <Lunar^> Damn... :( Neither popen nor shell-haskell would let me get the exit code
05:25:43 <phubuh> :/
05:28:21 <Lunar^> Choice #1 Corrupt ExitFailure semantic ; Choice #2 Do some Unix tricks
05:47:26 <shapr> Popen is from Jens Petersen
05:47:41 <shapr> I think it's part of ghc6
05:50:02 <shapr> Lunar^: tried -package popen?
05:51:58 <Lunar^> shapr: Is doesn't answer me needs anyway
05:52:08 <shapr> I think it might
05:52:15 <shapr> have you seen the @type plugin for lambdabot?
05:52:38 <Lunar^> shapr: I got some binary which either fail (returning an exit code) or display a number on stdout
05:53:01 <Lunar^> shapr: But neither popen nor shell-haskell allows me to get the exit code
05:54:25 <shapr> oh
05:54:27 <shapr> that sucks
05:54:36 <Lunar^> Yes :0
05:54:53 <Lunar^> Both use fork/exec and pipes
05:55:23 <Lunar^> That allows lazy communication
05:56:31 <Lunar^> I would need something in between, a blocking call getting stdout... I think I can write the C code
05:57:13 <Lunar^> after eating something though :)
05:57:53 <c4t> hi to all
05:57:58 <shapr> hi c4t
05:58:29 <c4t> hi shapr
06:00:20 <shapr> how's code?
06:00:33 <c4t> :)
06:00:55 <c4t> i would say thats working preaty good
06:01:35 <Lunar^> Ok got the good way to do it
06:01:57 <shapr> Lunar^: what is it?
06:02:10 <Lunar^> launch :: String -> [String] -> ((Handle, Handle, Handle) -> IO a) -> IO (a, ExitCode)
06:02:31 <Lunar^> I think that you could replace the first string by FilePath
06:03:51 <Lunar^> What do you tihnk ?
06:04:54 <shapr> looks sensible to me
06:14:53 <shapr> hi A
06:15:07 <A> hi shapr
06:19:16 <shapr> A: wanna learn haskell?
06:22:59 <blackdog> shapr: you make it sound so dirty.
06:23:14 * shapr grins
06:23:15 <shapr> g'day blackdog 
06:23:18 <blackdog> like you're selling drugs, or touting for a nightclub or something.
06:23:26 <shapr> blackdog: the first map comes free
06:23:56 <blackdog> then before you know it, you're doing the hard stuff. Monads, fundeps...
06:24:08 <shapr> yah, higher kinded types
06:24:15 <blackdog> got a friend who's on TH, he ain't never coming back.
06:24:18 * shapr laughs
06:24:29 <shapr> speaking of which, did he recover from the discussion he had with SPJ?
06:24:39 <blackdog> Yeah, I think so.
06:25:05 <blackdog> His system's pretty sound now, if not as fast as it was before he unilaterally decided that all values were floats.:)
06:25:14 * shapr grins
06:25:42 <blackdog> i'm in a good mood again, actually. finally back to hacking... it's so hard to keep focus.
06:26:05 <shapr> why were you in a bad mood? european air DTs?
06:26:33 <shapr> sweden withdrawal? :-)
06:27:08 <shapr> blackdog: I've noticed it's easier to keep focus if you have a friend to hack with
06:27:12 <shapr> pair programming really helps
06:27:15 <blackdog> that's true.
06:27:51 <blackdog> If I can get 15 minutes undisturbed hacking, i can get flow for hours, usually. But a lot can happen in 15 minutes... chess, websites, email, IRC...
06:28:05 <shapr> blackdog: one useful hint, get off IRC to hack :-)
06:28:14 <shapr> as much as I enjoy this channel, it's not good for productivity 
06:28:23 <shapr> notice Heffalump's pattern of joining
06:28:32 <shapr> gotta go deal with clothes washing, bbl
06:28:34 <blackdog> well, it's nice to be able to ask questions occasionally.
06:29:04 <shapr> that's true
06:29:13 <shapr> I think it's best to let the questions pile up for a chunk of time
06:31:05 <blackdog> you'd be proud of me: I'm actually writing the tests before I do the code.
06:31:56 --- mode: bear.freenode.net set +b *!23kjhkjf@*
06:32:35 --- mode: kornbluth.freenode.net set +b *!23kjhkjf@*
06:33:39 --- mode: capek.freenode.net set +b *!23kjhkjf@*
06:33:53 --- mode: orwell.freenode.net set +b *!23kjhkjf@*
06:35:28 <prologic> sweee
06:35:31 <prologic> nice netsplit :)
06:36:42 --- mode: jordan.freenode.net set +b *!23kjhkjf@*
06:41:39 --- mode: jordan.freenode.net set +b *!23kjhkjf@*
06:42:12 --- mode: tolkien.freenode.net set +b *!23kjhkjf@*
06:44:01 <shapr> blackdog: wow, I am proud of you, using HUnit or QuickCheck?
06:45:08 <blackdog> nothing yet, i was just hacking the makefile... 
06:45:12 --- mode: orwell.freenode.net set +b *!23kjhkjf@*
06:45:23 <blackdog> is that unbearably gauche?
06:46:07 --- mode: carroll.freenode.net set +b *!23kjhkjf@*
06:48:23 <shapr> no, I think unbearably gauche is using Perl to test your Haskell code
06:49:39 <blackdog> what about using a perl program to mangle assembly code generated _from_ haskell? :)
06:49:57 --- mode: capek.freenode.net set +b *!23kjhkjf@*
06:51:24 <shapr> blackdog: oh that's cruel :-)
06:51:36 <shapr> blackdog: what about using Python to test your Haskell program? (like the ghc6 test suite)
06:53:34 <shapr> hi croesus 
06:53:43 <croesus> hello
06:54:10 <blackdog> what i'm doing isn't that sophisticated - i just want to generate my external core files automatically. my problem is that i learn enough about makefiles to get a project going, then promptly forget it all.
06:54:58 <shapr> I usually write prototypes for each new feature that I might forget
06:55:07 <shapr> then when I've forgotten it, I go back and look at my single purpose prototype
06:55:38 <shapr> http://raven.scannedinavian.org/~shae/src/haskell/ProtoPostgres.hs
06:56:38 <blackdog> That's not a bad idea.
06:58:39 <shapr> http://raven.scannedinavian.org/~shae/src/haskell/ProtoQuickCheck.hs
06:58:55 <shapr> hey, how do you like emacs so far?
06:59:23 <earthy> not
06:59:26 <earthy> ;)
06:59:32 <phubuh> heathen :-)
06:59:47 <shapr> blackdog: want to define unusual operators in haskell? http://raven.scannedinavian.org/~shae/src/haskell/Rocket.hs
07:00:04 <phubuh> haha
07:00:24 <earthy> that is valid?
07:01:42 <SyntaxPolice> Matrix Revolutions in IMAX :)
07:02:02 <SyntaxPolice> shapr: I'll buy you a ticket for november 5 if you come visit me in Ohio
07:02:27 <blackdog> shapr: i've strayed from the lispish path: i've got too many things to hold in my head at the moment without emacs as well.:)
07:03:17 <blackdog> argh. stupid significant makefile whitespace... you'd think I'd know by now. schoolboy error...
07:03:24 * earthy grins
07:04:18 <shapr> SyntaxPolice: no way I can show up in November
07:04:18 <shapr> sadly
07:04:27 <earthy> ERROR "Rocket.hs":3 - Syntax error in fixity decl (unexpected `(')
07:04:30 <SyntaxPolice> :(
07:04:32 <earthy> hmmm.
07:04:39 <SyntaxPolice> but... but... mass media!
07:05:45 <earthy> Compiling ProtoRocket      ( Rocket.hs, interpreted )
07:05:45 <earthy> Rocket.hs:3: parse error on input `('
07:06:03 <shapr> earthy: it's not legal ;-)
07:06:12 <shapr> as far as I know, you can't have operators that span lines
07:06:31 <earthy> but that's not what it errors on...
07:06:33 <shapr> it's been suggested to change =^.^= to the cat operator 
07:07:07 <shapr> earthy: if you can make it work, I'll be entertained
07:08:00 <SyntaxPolice> shapr: I like that idea
07:08:07 <earthy> fun thing is, I was just about to look into the report as to what can and can not constitute an operator. :)
07:08:17 <shapr> earthy: tell us the exact details!
07:09:48 <blackdog> shapr: oooohhh no... i did most of my undergrad thesis on parsing near-arbitrary operators with type-dependent fixity. horrible, horrible experience.
07:10:15 <earthy> type-dependent fixity, not operator-dependent fixity?
07:10:20 <earthy> *eeeeewwwwwwwwww*
07:11:44 <blackdog> very ew. needless to say, it was a Big Mess.
07:12:11 <earthy> interesting though. do you have your thesis online somewhere? :)
07:13:06 <blackdog> Hah.:)
07:13:33 <blackdog> That bit didn't end up making it in, in the end. Lot of work for bugger-all result...
07:14:02 <blackdog> it did do one thing, though. I'll never try writing a compiler in C again.
07:14:22 * shapr grins
07:14:26 <earthy> why's that? :)
07:15:04 <earthy> okay, granted, I cheat when I do that, building preprocessors that let me define datatypes and stuff to deal with them neatly algebraically
07:17:28 <blackdog> i just got buried in scaffolding, basically. greenspun's 10th law, isn't it?
07:18:05 <earthy> something like it, yeah
07:19:30 <earthy> hmm.. `any Unicode symbol or punctuation'
07:19:41 <earthy> this does not include whitespace-like characters, does it? :)
07:20:17 <shapr> hi stardust 
07:20:56 <shapr> wassup?
07:21:22 <shapr> earthy: it does not. I'm looking forward to a fully unicode compliant Haskell implementation where I can use tengwar operators
07:21:56 * earthy 'd be perfectly happy if he could just define :\forall as an operator
07:22:01 <earthy> s/operator/constructor/
07:22:18 <earthy> (where \forall is the unicode forall glyph)
07:23:13 <shapr> we'd get to use real lambda chars
07:23:17 <shapr> though I dunno how to type them
07:23:39 <earthy> well, instruct your editor to translate \l into real lambda's. :)
07:25:31 <earthy> blasted, O
07:25:41 <earthy> but lambda is not in the mac's charset
07:25:54 <earthy> as in, that easily generated with keymodifiers
07:26:35 <phubuh> my editor can convert the lambda in "(lambda ...)" into a real lambda :-)
07:28:21 <earthy> phubuh: yes, that is an example
07:30:24 <shapr> @yow
07:30:24 <lambdabot> Yow!  Are we laid back yet?
07:31:22 <blackdog> shapr: what does @lojban do?
07:31:44 <phubuh> @lojban lets see
07:31:52 <shapr> it's broken atm
07:31:54 <lambdabot> ERROR: 501 Syntax error, illegal parametersERROR: 501 Syntax error, illegal parameters
07:32:01 <shapr> since lojban.org took down their online dictd server
07:32:04 <phubuh> oops :-)
07:33:13 <shapr> or maybe it's not broken... hmm
07:40:18 <shapr> @lojban cilre
07:40:20 <lambdabot> ERROR: 501 Syntax error, illegal parameters
07:41:25 <phubuh> @cmafihe cilre
07:41:25 <lambdabot> cilre <BRIVLA> [learn] 
07:47:37 <norpan> @cmafihe martin
07:47:38 <lambdabot> martin <CMENE> [] 
07:47:44 <shapr> @cmafihe norpan
07:47:44 <lambdabot> norpan <CMENE> [] 
07:47:48 <shapr> @cmafihe capr
07:47:48 <lambdabot> capr <CMENE> [] 
07:47:53 <ski> CMENE ?
07:47:56 <norpan> name
07:47:59 <shapr> @cmafihe doi norpan .i xu do tavla mi fo la lojban
07:48:00 <lambdabot> doi <DOI> [O!] norpan <CMENE> [] .i <I> [`.'] xu <UI6> [yes/no?] do <KOhA3> [you] tavla <BRIVLA> [talk] mi <KOhA3> [I, me] fo <FA> [ ] la <LA> [ ] lojban <CMENE> [] 
07:48:24 <norpan> go'i
07:48:28 <shapr> xamgu
07:48:29 <norpan> @cmafihe go'i
07:48:29 <lambdabot> go'i <GOhA> [last bridi] 
07:48:43 <shapr> go'i bau la sferie
07:48:52 <norpan> @cmafihe mi tavla bau la lojban
07:48:53 <lambdabot> mi <KOhA3> [I, me] tavla <BRIVLA> [talk] bau <BAI> [in language] la <LA> [ ] lojban <CMENE> [] 
07:49:23 <shapr> mi cilre la sferie
07:49:29 <shapr> hrm, that's not quite right
07:49:34 <norpan> bau la sfenska
07:49:50 <shapr> ki'e
07:50:14 <norpan> @cmafihe cmafi'e
07:50:14 <lambdabot> cmafi'e <BRIVLA> [small-fish] 
07:50:39 <shapr> @cmafihe jbofi'e
07:50:39 <lambdabot> jbofi'e <BRIVLA> [Lojbanic-fish] 
07:51:02 <norpan> cmajbofi'e
07:51:19 <shapr> ja'a
07:51:40 <norpan> @cmafihe jboski
07:51:40 <lambdabot> jboski <BRIVLA> [Lojbanic-describe] 
07:52:54 <norpan> shouldn't it say LUJVO instead of BRIVLA?
07:53:03 <norpan> and CMENE
07:53:10 <norpan> and GISMU
07:53:17 <norpan> maybe not
07:54:09 <blackdog> ever looked back at code you wrote a year ago and wonder if someone fiddled with your medication?
07:54:16 <shapr> blackdog: always
07:54:24 <shapr> I think that's a sign of good mental development
07:54:50 <blackdog> dammit, i want to start smart. this whole learning curve thing is embarrassing.
07:55:03 <phubuh> i hadn't thought about it like that! i usually get depressed thinking about how insanely stupid code i wrote
07:55:13 <shapr> phubuh: nah, it's a positive sign
07:55:26 <shapr> if you look back at your code from two years ago, and it looks good to you, means you haven't learned anything lately.
07:56:37 <blackdog> i'm about to revel in the joys of reimplementation, I think. This is too hideous to fix.
08:09:24 <Darius> shapr: That's exactly what I think.
08:09:59 <shapr> my first discovery of that principle was with skateboarding, if you haven't fallen down at least once that day, you're not trying hard enough...
08:33:11 <Lunar^> shapr: did it :)
08:35:37 <shapr> Lunar^: cool!
08:37:04 <Lunar^> shapr: I don't know how hacky it is.. but it seems to work.. just a small modification of shell-haskell
08:41:32 <ejt> what's the fn to convert a String -> Int ?
08:41:42 <Lunar^> read !
08:41:42 <shapr> haha
08:41:50 <shapr> it's the R in RTFM
08:41:55 <ejt> sigh, thx
08:49:46 <Lunar^> hehe
09:03:17 <shapr> hej toxic 
09:12:18 <shapr> hi hal
09:12:20 <shapr> long time no see
09:12:29 <hdaume> ditto :)
09:13:25 <shapr> how's life?
09:13:28 <shapr> whatcha been doing?
09:13:43 <Lunar^> hdaume: You lost your .microsoft.com host ;)
09:16:30 <shapr> hi kaninchen 
09:16:36 * shapr sings along with Jimi Hendrix
09:16:42 <kaninchen> hi shapr
09:16:49 <shapr> kaninchen: how's code?
09:16:57 <kaninchen> which code ?
09:17:35 <shapr> any code you're writing?
09:17:52 <kaninchen> well I'm currently writing no code :)
09:17:58 <shapr> oh, that sucks
09:18:03 <shapr> how can you stand it?
09:18:14 <kaninchen> cause the semester began one week ago .... so much orga work to do
09:18:21 <shapr> oh, I understand
09:18:33 <kaninchen> hehe well I can cause I know that I will code a bit next week :)
09:18:41 <shapr> ah, that's good.
09:19:01 <kaninchen> and you ?
09:19:27 <shapr> I have some good code cooking, though lately I've been reading TaPL instead of coding
09:19:59 <kaninchen> whats that ?
09:20:16 <shapr> Types and Programming Languages by Benjamin C. Pierce
09:20:23 <shapr> it's fun
09:20:48 <shapr> it traces from untype simple lambda calculus up to System F and beyond
09:21:37 <kaninchen> hehe nice
09:21:53 <kaninchen> well my prof. suggestion reading something about F
09:22:06 <kaninchen> cause we will do programming in fortran ...
09:22:18 <shapr> why are you doing programming in fortran?
09:22:39 <Darius> kaninchen: This is when you hack up something to generate Fortran.
09:22:52 <shapr> truly
09:23:25 <kaninchen> hehe
09:23:44 <kaninchen> well it's a std in our university ... so I have to do it ... :(
09:24:20 <shapr> which university?
09:24:31 <kaninchen> dresden (germany)
09:24:41 <hdaume> shapr: sorry, was afk...life's good, but busy...how about you?
09:39:28 <kaninchen> hdaume: well his life seems to be busy too :)
09:41:10 <shapr> :-P
09:41:14 <shapr> I am working actually
09:41:28 <hdaume> :)
09:46:16 <shapr> hdaume: do you ever look back on code you've written a year or two ago?
09:46:22 <shapr> if so, what's your opinion of that code?
09:53:49 <hdaume> i try not to :)
09:54:33 <hdaume> sometimes it's good sometimes it's not...from a year ago, it's generally not much different from how i would have written it today, but 2 years is a big diff
11:39:02 --- mode: zelazny.freenode.net set +b *!23kjhkjf@*
13:34:52 <Lunar^> Does anyone ever heard about a MIME parser in Haskell ?
14:58:03 <shapr> Lunar^: I want one too
15:05:09 <Lunar^> shapr: You got one !
15:05:14 <Lunar^> shapr: I am so dumb
15:05:31 <Lunar^> shapr: I look only the first part of WASHMail's MailParser
15:05:48 <Lunar^> shapr: (looked sorry). First you use parseMessageFromString, then digestMessage
15:12:44 <shapr> oh, I didn't know it did MIME
15:16:16 <shapr> yow, I can use this to fix my spam filter!
15:18:43 * shapr bounces excitedly
15:21:04 <andersca> whee
16:04:55 <Lunar^> shapr: :)))
18:13:50 --- mode: zelazny.freenode.net set +b *!23kjhkjf@*
18:15:59 --- mode: jordan.freenode.net set +b *!23kjhkjf@*
18:18:20 --- mode: tolkien.freenode.net set +b *!23kjhkjf@*
18:24:33 <Riastradh> Is the term 'non-linear pattern' the right term for a pattern like 'x:x:xs', to match a list whose first two elements are the same?
18:25:26 <Darius> I believe so or in general any pattern that has multiple uses of a variable.
18:25:26 <prologic> ermm
18:25:31 <prologic> x:x:xs is linear :)
18:25:42 <prologic> as linear as a list can be anyway
18:25:58 <prologic> or am I completely off the wrong track ? :)
19:56:13 * pl_away is away: gone to the city
23:35:55 <harsha> Hellooooooooooooooooooo #haskell
23:35:58 <harsha> hi shapr 
23:36:02 <harsha> hi Pseudonym 
23:55:35 <Pseudonym> G'day.
23:55:58 <prologic> hi
