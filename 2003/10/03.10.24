02:00:47 <FastJack> hi
02:01:21 <FastJack> I'm reading the gentle introduction to haskell. I stumbled over generators. is it basically the same as "iterators" in other languages?
02:15:32 <shapr> generators in Haskell?
02:17:43 <shapr> I think iterators are a collection of items and you have a single call that returns the next one of those items
02:18:18 <shapr> hi dnm 
02:20:58 <shapr> FastJack: which part of the gentle intro?
02:22:38 <FastJack> the part about list comprehensions and arithmetic sequences
02:22:44 <FastJack> 2.4.1
02:23:44 <shapr> I think a list comprehension is similar to an iterator
02:23:58 <shapr> but I don't know if iterators can combine a sequence with a test
02:24:17 <FastJack> Hmm, right.
02:24:17 <shapr> Python's list comprehensions are straight from Haskell
02:24:52 <FastJack> haven't played with python yet.
02:24:56 <FastJack> but ruby :)
02:32:39 <shapr> what do you think of Haskell so far?
02:33:38 <FastJack> interesting
02:33:45 <FastJack> can't say more at this time :)
02:34:19 <FastJack> I tried lisp once but was intimidated by the parenthesis
02:34:31 <shapr> is whitespace better?
02:34:57 <FastJack> I don't know. maybe it's just a matter of habit
02:36:48 * Darius doesn't get what problem people have with Lisp's parentheses. They aren't pretty, but that's about it.
02:37:16 <FastJack> which haskell interpreter would you suggest? I'm looking for something where I can try things out. I don't know if you know interactive-ruby. but something like this would be good for a start
02:37:59 <FastJack> Darius: right. you need to get used to it. maybe I just was not patient enough to let it sink in
02:38:50 <shapr> I use GHCi for my interactive experiments
02:42:32 <FastJack> dang, GHC needs happy. and happy needs haskell. there is no binary of happy for solaris/x86
02:43:06 <FastJack> I'll try it later on my openbsd box at home
02:43:50 <Lunar^> shapr: I'm satisfied with my module
02:44:02 <Lunar^> shapr: (for the lambdabot) you want to test it ?
02:44:21 <Darius> Lunar^: What does it do?
02:44:37 <Lunar^> FastJack: You can always build an unregisterised version
02:44:37 <shapr> Lunar^: sure
02:44:46 <Lunar^> Darius: interface with GHCi
02:46:05 <FastJack> Lunar^: but I need haskell for to build happy, right? or can I use another haskell dialect to build happy and then build GHC with it?
02:49:04 <Lunar^> FastJack: To do an unregisterised build, you have to get another box
02:49:08 <Lunar^> FastJack: and gcc on the target
02:50:13 <FastJack> Lunar^: ah, I see. you mean cross-compiling, right=?
02:50:43 <Lunar^> FastJack: right
02:50:56 <Lunar^> FastJack: look at the haskell-users mailling list for september
02:51:04 <Lunar^> FastJack: sorry.. glasgow-haskell-users
02:51:25 <Darius> There isn't a GHC binary for Solaris?  Also Hugs is (supposed to be) more portable, it may be easier to deal with than trying to build GHC.
02:52:14 <FastJack> Darius: solaris is not my only platform. :)
02:52:30 <FastJack> I want to try it out on my nextstep box too ;)
02:52:53 <shapr> you have a real NeXTStep box??
02:53:04 <FastJack> just white hardware.
02:53:15 <FastJack> still waiting to get a decent black hardware
02:53:16 <shapr> how old are you??
02:53:27 <FastJack> 28? why do you ask? :)
02:53:54 <FastJack> I have a fetish for ancient hardware :)
02:53:57 <FastJack> and operating systems
02:54:12 <shapr> I've often wanted NeXT hardware, but I move around the world too muc
02:54:55 <FastJack> I've seen some nice black hardware on ebay very often. but it always ended up way to expensive
02:55:42 <shapr> do you have a LispM too?
02:55:59 <shapr> I had an original IBM PC, I wanted to hear the MOTOR function of the ROM basic
02:56:32 <FastJack> no, I don't have lispm. should I? did I miss something there? :)
02:56:55 <FastJack> I'm still trying to get a bebox :)
02:58:19 <FastJack> Lunar^: I hope I have more success with cross-compiling happy than with building SML/NJ on my freebsd5 box :) I needed it for cmu-imsp.
03:01:27 <Lunar^> FastJack: The process seems to be well tested now
03:32:45 <shapr> @yow
03:32:45 <lambdabot> Is the EIGHTIES when they had ART DECO and GERALD McBOING-BOING lunch
03:32:45 <lambdabot>  boxes??
04:13:50 <earthy> heghe
04:13:54 * earthy has a BeBox
04:14:04 <earthy> but is *not* going to part with it. ;)
04:14:33 <shapr> I want an x86-64
04:14:44 <Heffalump> we had a talk from AMD about that on Wednesday
04:14:48 <Heffalump> it sounds quite cool
04:14:57 <shapr> I have a toshiba 1600/40 laptop, that's enough old hardware for me
04:14:58 * Igloo agrees with both of you  :-)
04:15:41 <earthy> both of who? :)
04:15:53 <earthy> hef & shapr would be my guess. ;)
04:15:56 <Igloo> shapr and Heff, the last two to speak
04:16:13 <earthy> but, nah, I don't want an x86-64
04:16:15 * earthy wants a G5. :)
04:16:30 <Igloo> Are they 64-bit OOI?
04:16:36 <Heffalump> nasty evil things
04:16:43 <earthy> OOI? they are 64 bit, yeah
04:16:49 <Heffalump> "out of interest"
04:16:57 <earthy> ah
04:17:12 <earthy> one'd think I'm a newbie at this IRC thang.
04:17:59 <earthy> (but it reminded me too much of out-of-order, or OOO execution. ;))
04:20:13 <Lunar^> earthy: in a laptop
04:24:09 <tic> earthy, ohh, a BeBox!
04:24:13 * tic bows
04:24:27 <Heffalump> 'lo kosmikus
04:28:00 <earthy> tic: it's been turned off for over a year
04:28:28 <earthy> I should hook up the 17" to it and fire it up again once, just for the kick of it
04:29:09 <tic> aww.
04:29:14 <tic> earthy, why turned off?
04:29:37 <earthy> tic: I moved jan 2002.
04:30:00 <earthy> owh, no, I'm lying.
04:30:18 <earthy> it *has* run until roughly end of oktober last year...
04:30:46 <earthy> anyway, I moved my `office-stuff' from one room to the other, and I never quite finished setting up my machines there as I already owned an iBook by then.
04:31:06 <tic> aha.
04:31:08 <earthy> and the Ultra1 was quicker to set up. :)
04:31:11 <tic> =)
04:32:52 <kosmikus> hi Heffalump 
04:38:10 <shapr> hej phubuh 
04:38:49 <phubuh> hej shapr :-)
04:39:58 <tic> phubuh, hur funkar inloggningen på BBB? Kommer ha det i min nästa lägenhet. Trodde det var DHCP iom att man har ett RJ45-jack i vägen.
04:40:06 <phubuh> jo, så är det
04:40:27 <phubuh> jag har aldrig "loggat in" på någonting, det borde vara helt transparent
04:41:25 <phubuh> my friend C-c:ed my startx :(
04:42:48 <phubuh> tic, by the way: bredbandsbolaget recently shut down their usenet server because it was too unused :(
04:43:07 <phubuh> i'm thinking of getting a bunch of people to mail them and complain
04:43:10 <tic> phubuh, argh!
04:44:08 <tic> phubuh, mystiskt. det står att man ska ringa till BBB när man vill ha det inkopplat, och någon timme senare kan man logga in med de uppgifter man fick. Det låter konstigt?
04:45:12 <phubuh> jo, just ja... innan du har loggat in för första gången mappas alla DNS-lookups till deras inloggningswebserver
04:47:07 <tic> phubuh, schysst, så då kan jag använda BBB gratis om jag skriver in IP till alla ställen jag vill smurfa tilll? :P
04:47:40 <phubuh> haha jo, jag antar det
04:47:41 <tic> sen efter den första gången man loggar in så behöver man aldrig logga in igen?  Hur lång tid tar det för DHCP-lånet att gå ut?
04:49:41 <shapr> hi Meep 
04:49:46 <Meep> hi
04:49:54 <shapr> what's up?
04:50:01 <phubuh> du behöver aldrig logga in igen, jag vet inte om dhcp-lånen
04:50:14 <Meep> nothing much...i've been settling in to uni
04:51:30 <tic> phubuh, oki, najs.
04:51:32 <tic> phubuh, tackar
04:53:20 <tic> phubuh, förresten, hur är bandbredden?
04:53:45 * earthy looks at the screen and thinks this would make her *green* with envy
04:54:05 <earthy> `actual swedish discussion!' ;)
04:54:22 <tic> heh.
04:57:46 <phubuh> tic, den är häftig
04:58:05 <tic> phubuh, finns det några fiffiga DC-hubbar inom BBB?
04:58:13 <tic> phubuh, så man kommer upp i 10/10
04:58:13 <tic>  )=
04:58:15 <tic> =)
04:58:57 <tic> inom BBBs nät, kanske vore bättre att säga. :)
05:00:53 <phubuh> jag brukar (eller brukade) använda en som hette "maximumspeed 10mbit" eller något liknande
05:01:03 <phubuh> där fick jag nästan alltid runt 1MB/s :-)
05:01:26 <tic> *dräggel*
05:01:38 <tic> stabilt. hoppas det finns något vettigt att hämta därifrån bara
05:01:56 <phubuh> det finns det mesta :-)
05:17:49 <basti_> hi
05:18:14 <shapr> hiya
05:36:11 <shapr> yay, new code
06:01:15 <basti_> hey Tomasso :)
06:03:54 <Tomasso> hey! basti_ 
06:03:59 <Tomasso> :D
06:06:20 <basti_> hows it going? :)
06:20:18 <phubuh> i am learning dvorak
06:21:53 <basti_> oh my ;)
06:29:54 <basti_> :)
06:29:57 <basti_> I think i got monads now
06:30:08 <basti_> this tutorial is really good
06:31:28 <basti_> did anyone ever do a "check monad laws" example? ;)
06:37:39 <Darius> The difficulty of checking them depends on the monad.  Maybe, for example, is quite easy to check.
06:38:11 <basti_> hmm you had to check it for any function and any value right?
06:40:48 <Darius> return and >>= are both fully polymorphic in the "pure" values that are passed to them. By paramtricity they can't possibly depend on that part.
06:41:52 <basti_> u huh.
06:42:43 <basti_> im hearing a lecture about automated proof systems at the moment
06:42:54 <basti_> maybe thats why this idea came up ;)
06:44:17 <Darius> Anyways, here's the proof of one of the monad laws for Maybe: (The Law: return a >>= f == f a) (unfold return and >>=: case Just a of Nothing -> Nothing;Just a -> f a and reduce: f a QED)
06:45:03 <basti_> uh yes.
06:56:12 <earthy> wouldn't it be nice if the compiler could do that kind of stuff for you? :)
06:56:29 <basti_> yeah that was what I was aiming at ;)
06:56:47 <basti_> a system that's capable of proving gauss' sum formula should be able to prove this too
06:57:14 <earthy> basti_: well, that is then a `simple' matter of linking (say) HOL to a compiler...
06:58:04 <earthy> and having the compiler hand off the proof-obligation to HOL, and HOL return the proof to the compiler
06:58:13 <basti_> lol
06:58:21 <basti_> i think proof AUTOMATION is even another case
06:58:32 * earthy nods ;)
06:58:48 <basti_> but this gauss thing was really impressive
06:58:53 <earthy> (to be slightly more honest: this is stuff I'm basing my PhD on. :))
06:59:00 <basti_> lol
06:59:38 <basti_> but cool theme, yes :)
06:59:57 <earthy> proving Gauss' sum formula, isn't that mostly arithmetic?
07:00:08 <basti_> yeah but the system was pretty general
07:00:14 <basti_> i saw it can also do set theory
07:00:26 <earthy> what system was it? HOL? Isabelle? Coq?
07:00:32 <basti_> PVS
07:00:36 <earthy> PVS sucks. :)
07:00:39 <basti_> lol ;)
07:00:53 <basti_> really whats better?
07:01:10 <earthy> (the proof of True==False of the week in PVS was a running gag at University of Nijmegen)
07:01:24 <basti_> lol
07:01:45 <basti_> well okay that means there are inconsistencies that render it unusable ;)
07:01:53 <earthy> What's better... well, can't really answer that. Isabelle, HOL and Coq are all good
07:02:02 <earthy> basti_: as I said, PVS sucks for actual proof. :)
07:02:02 <basti_> in what way are they better? ;)
07:02:19 <basti_> are they consistent?
07:02:20 <earthy> they *can*not* lead to obviously false conclusions. :)
07:02:22 <earthy> yes. :)
07:02:29 <basti_> thats good.
07:02:41 <basti_> big plus yes. ;)
07:02:45 <earthy> and they have much the same proof power and tooling that PVS does, nowadays.
07:03:29 <basti_> hmm
07:03:38 <earthy> look into e.g. ProofGeneral
07:03:45 <basti_> I should be cool and bring such an inconsistency proof to the lecture ;)
07:04:42 <earthy> most of the bugs leading to them have (obviously) been fixed rather quickly. ;)
07:05:00 <earthy> but there still is no consistency-guarantee in PVS
07:05:25 <basti_> *nods*
07:05:30 <earthy> (oh, and it gobbles memory to no end, it is relatively unstable, it can only be compiled with a very expensive commercial LISP compiler...)
07:05:49 <basti_> oh thats the reason why I only got binaries
07:05:56 * earthy nods
07:06:04 <basti_> mmh
07:06:06 <basti_> okay.
07:06:09 <earthy> the sources *are* available, but you won't gain anything from 'm. :)
07:06:18 <basti_> yes i see
07:06:30 <basti_> is there any open source imp? or are all three that you mentioned?
07:06:42 * earthy nods
07:06:58 <basti_> oic hol is sourceforge hosted
07:07:09 <earthy> it's kinda the Europe/US distinction, really. ;)
07:07:20 <basti_> what?
07:07:26 <earthy> HOL, Isabelle and Coq come from Europe, PVS from the US. :)
07:07:35 <basti_> *g*
07:07:36 <basti_> okay.
07:08:05 <earthy> European software tends to be slightly more stable. dunno why. Linux vs M$. KDE vs Gnome. etc.
07:09:04 <earthy> anyway, time for a beer and a slice of pizza methinks.
07:09:18 <basti_> :)
07:09:33 <basti_> have a nice meal
07:09:38 <basti_> thanks for the hints
07:09:53 <earthy> oh, no, social thing here at the uni, not dinner. ;)
07:10:17 <basti_> oic
07:33:44 <Lunar^> Could anyone explain what difference make the prefix '!' in a record definition ?
07:34:22 <Igloo> It means things put into that field are forced to head normal form
07:34:40 <Lunar^> Igloo: force evaluation ?
07:34:50 <Igloo> So   Foo bar   is effectively the same as    bar `seq` Foo bar   or Foo $! bar
07:35:02 <Igloo> Yes, but only to head normal form
07:35:13 <Lunar^> ok, I not sure exactly
07:35:40 <Lunar^> I don't see exactly why they're used for GHC's Name record (for n_occ and n_loc)
07:35:44 <Igloo> So Foo !String means that the string would be evaluated, but only enough to see if it was a  :  or  []
07:36:01 <Igloo> They're used to improve efficiency
07:36:45 <Igloo> Removing them won't break code (assuming lazy IO and uPIO aren't involved)
07:36:50 <Lunar^> ok thanks... I think I will the same kind of record for my interpreter
07:37:01 <Lunar^> mhh... uPIO are used for FastString I think
07:37:28 <Igloo> I'm fairly sure removing them won't break that
07:37:36 <Heffalump> actually, it could break code
07:37:42 <Igloo> Oh?
07:37:44 <Lunar^> I don't want to mess with FastString anyway
07:37:55 <Heffalump> it's just unlikely
07:38:04 <Igloo> Can you give an example?
07:38:19 <Heffalump> suppose you were making use of the error caused when an undefined value was put into such a field
07:38:29 <Heffalump> catching the exception in IO, and doing something based on that happening
07:38:36 <Igloo> Ah, yes, exceptions too
07:38:39 <Heffalump> removing the ! will stop that happening
07:38:51 <Lunar^> mhh ok
08:26:06 * shapr chortles merrily
08:27:43 <Lor> Merrily merrily merrily merrily life is but a dream...
08:27:50 * Smerdyakov invades Poland mierrily.
08:27:53 <shapr> row row row your båt
08:28:01 <shapr> Smerdyakov: playing diplomacy again?
08:28:19 <Smerdyakov> Just invading Poland, as I reckon I have a right to.
08:29:10 <Lor> gently down the ström
08:30:03 <SyntaxPolice> yay diplomacy!
08:30:08 <SyntaxPolice> that's a crazy game.
08:30:23 * SyntaxPolice recommends not playing it with girlfriend / partner / whatever
08:31:04 <Smerdyakov> SyntaxPolice, is it OK if I play with _your_ girlfriend?
08:32:01 <SyntaxPolice> Smerdyakov: she'd destroy you
08:32:07 <SyntaxPolice> ;)
08:33:20 <shapr> heheh
09:15:16 <Lunar^> Could I use Unique with ParseC ?
09:17:02 <Darius> Doesn't Unique use IO?
09:17:24 <Lunar^> tes
09:17:24 <Lunar^> yes
09:17:28 <phubuh> how do I generate a value for which isInfinite returns true?
09:19:03 <Darius> 1.0/0.0
09:19:28 <phubuh> that's what i thought too, but
09:19:29 <phubuh> Prelude> isInfinite (1.0/0.0)
09:19:30 <phubuh> False
09:19:47 <Lor> phubuh, try ghci
09:20:01 <phubuh> aha
09:20:09 <Lor> hugs' numerics are notoriously buggy
09:20:13 <phubuh> oh :-)
10:21:16 <shapr> @yow
10:21:17 <lambdabot> ..  the HIGHWAY is made out of LIME JELLO and my HONDA
10:21:17 <lambdabot>  is a barbequed OYSTER!  Yum!
10:23:11 <Tomasso> hahaha
10:24:37 <shapr> lambdabot is doing too many drugs
10:24:55 <Darius> you should've raised 'em right shapr
10:25:21 * shapr grins
10:28:36 <Darius> ... that was impressive.
10:29:37 <pimpbot5000> hi
10:29:46 <pimpbot5000> anyone here?
10:33:49 <Tomasso> where can i find stuff on using high order functions over lists
10:33:55 <Tomasso> and recursion templates
10:38:33 <pimpbot5001> anyone alive in here?
10:38:56 <Tomasso> me
10:38:57 <Tomasso> hehe
10:39:08 <pimpbot5001> yes!
10:39:08 <pimpbot5001> hehe
10:39:38 <pimpbot5001> ok so im working on a research project and im having some issues with the ghc
10:39:45 <pimpbot5001> are you familiar with the ghc?
10:40:44 <pimpbot5001> hello?
10:42:26 <Igloo> You're more likely to get help if you ask a question
10:42:52 <pimpbot5001> on?
10:43:04 <pimpbot5001> oops, ok
10:43:43 <pimpbot5001> so is anyone familiar with the costs involved in calling newStablePtr?
10:43:55 <pimpbot5001> ie. is the heap allocation constant time?
10:44:09 <pimpbot5001> this is in ghc of course
10:45:36 * Igloo has no idea. Yo could look at the code, or just try timing things
10:46:56 <pimpbot5001> hmm ok
10:48:19 <pimpbot5001> how about this...could i take an arbitrary box and strictify it?
10:50:48 <pimpbot5001> here's what im trying to do: i have a mutable array.  i might get multiple reads from the array, which may be storing the read in a suspension.  when i perform the read i store the suspension referring to the read in a queue.  when i go to mutate the state, i need to strictify the queue.  can this be done by mapping 'sequence' onto the queue?
10:55:37 <Igloo> foldr seq queue `seq` modify ... might be what you want
10:56:08 <Darius> Or just use DeepSeq or Strategies.
10:56:52 <Darius> Unless it's critical not to overevaluate
10:57:19 <pimpbot5001> it's ideally more strict than not
10:57:39 <pimpbot5001> what im implementing is fast, unboxed arrays
10:58:29 <pimpbot5001> is DeepSeq in Haskell98?
10:59:57 <pimpbot5001> nevermind, found it
11:03:09 <pimpbot5001> thanks, you guys rule!
11:05:11 <pimpbot5001> is anyone aware of a way to - gasp - mutate unboxed tuples from C?
11:13:31 <Lunar^> pimpbot5001: for the first part, look at GHC's library Data.UArray
11:14:16 <Lunar^> pimpbot5001: for the second, the easiest way is to have a function in C like get_fst(tuple * t) { return t.fst; } and to use a foreign import
11:14:25 <Lunar^> pimpbot5001: the hard way is to use peek et all
11:15:20 <pimpbot5001> yes this is one way to do it...unfortunately UArray's require heap allocation
11:15:47 <pimpbot5001> im looking for two things (which i suspect are hard to find without some magic): no heap allocation, and mutability
11:18:10 <pimpbot5001> see, here's why i need this.  im mutating an array (probably a huge number of times).  with each call i return a new box (ArrayBox arr').  when i write to the array, i do this: null arr out.  Then build a new box with arr'
11:20:13 <Lunar^> pimpbot5001: What are you trying to do, this sounds really like something required to make a memory manager ?
11:20:52 <Lunar^> pimpbot5001: sebc founds that because of Haskell lazyness, it's nearly imposible to have a fragment of code without any heap allocation
11:21:06 <pimpbot5001> right, i mean this is kind of a memory manager...but only for C land malloced arrays
11:21:36 <pimpbot5001> hmm so heap allocation is probably constant time?
11:21:55 <pimpbot5001> i could sleep at night if i knew that were true
11:22:24 <Lunar^> pimpbot5001: even if assembly code is good enough to consider using Haskell to do OS programming
11:23:50 <Lunar^> pimpbot5001: if you want to ensure that, you can try do stop GHC at core language stage
11:24:06 <Lunar^> pimpbot5001: look for any Thunk allocation : it means heap allocation
11:24:54 <pimpbot5001> ok i see, so ghc can output core language when told to?
11:25:04 <Lunar^> pimpbot5001: Yes... let me 1 second
11:25:46 <Darius> looking for -fext-core ?
11:26:02 <pimpbot5001> actually, i already know there will be a heap allocation...because the only method for mutating a value requires a Ptr
11:26:39 <phubuh> ratpoison is so awesome
11:26:46 <pimpbot5001> well that is if i can't get around using Storable
11:31:47 <Lunar^> Darius: yes that one :)
11:35:24 <pimpbot5001> ok so lets say i have this: readArr :: Array e -> !Int -> e
11:35:49 <Lunar^> Array is your type ?
11:36:13 <pimpbot5001> and say i want to do this (MkSomeData (readArr i))
11:36:57 <pimpbot5001> how could i force readArr's evaluation when it's placed in MkSomeData?
11:37:07 <Lunar^> You should not really call that name, it's a prelude type I think
11:37:23 <pimpbot5001> maybe instead have readArr :: Array e -> !Int -> !e
11:37:25 <Lunar^> pimpbot5001: if MkSomeData is the only constructor, that means 0 bit
11:38:32 <pimpbot5001> 0 bit?
11:39:06 <Tomasso> hhm there is one thing that says: implement the following functions using higher order functions when posible (all functions are functions with lists)
11:40:08 <Tomasso> isnt it always posible?
11:40:20 <Tomasso> or not?
11:41:40 <Lunar^> Tomasso: there sure is some example when you cannot
11:41:52 <Lunar^> s/when/where
11:42:07 <Tomasso> Lunar^: do you know any?
11:48:54 <Darius> Lunar^: Of course it's always possible.  It may be stupid, but it's certainly possible.
11:50:09 <Lunar^> Are we talking about high-order functions in the Prelude ?
11:51:29 <Lunar^> always depends on the function we're talking
11:51:33 <Lunar^> one could always write
11:52:18 <Lunar^> indList :: b -> (a -> [a] -> b) -> [a] -> b
11:52:34 <Tomasso> isnt it foldr?
11:52:34 <Lunar^> indList onEmpty _ [] = onEmpty
11:52:48 <Lunar^> yes it is
11:53:09 <Lunar^> mhh not it's not 
11:53:20 <Darius> @type foldr
11:53:21 <lambdabot> foldr :: (a -> b -> b) -> b -> [a] -> b
11:53:42 <Lunar^> indList _ onCons (x:xs) = onCons x xs
11:53:42 <Tomasso> but is the thing i said saying that i have to use those recursion templates or just ANY higher order function
11:54:17 <Tomasso> hmhm 
11:54:23 <Tomasso> @type foldl
11:54:24 <lambdabot> foldl :: (a -> b -> a) -> a -> [b] -> a
11:54:34 <Tomasso> hahahahaha lambdabot is great!
11:54:37 <Darius> Tomasso: how are we supposed to know?
11:54:44 <Lunar^> fold is accumlating something
11:54:53 <Lunar^> indList is just a deconstructor for [] type
11:55:02 <Lunar^> @type maybe
11:55:03 <lambdabot> maybe :: a -> (b -> a) -> Maybe b -> a
11:55:08 <Lunar^> Like this one in fact
11:55:21 <Tomasso> lambdabot: say hello
11:55:21 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
11:55:29 <Tomasso> haha
11:55:34 <Lunar^> You could write such function for each "data"
11:55:35 <Darius> @hello
11:55:35 <lambdabot> Hello world. 
11:55:48 <Tomasso> lambdabot: @listcommands
11:55:48 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","foo","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude
11:56:20 <Tomasso> lambdabot: lojban
11:56:21 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
11:56:30 <Tomasso> lambdabot: @lojban
12:00:06 <Darius> @lojban lojban
12:00:07 <lambdabot> ERROR: 501 Syntax error, illegal parameters
12:00:56 <phubuh> lojban is broken currently, i think
12:01:07 <phubuh> cmafihe works though :-)
12:01:21 <Darius> @listmodules
12:01:21 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
12:27:04 <Tomasso> lambdabot: @type concat
12:27:04 <lambdabot> concat :: [[a]] -> [a]
12:27:09 <Tomasso> haha
12:29:01 <Lor-> Um. This freenode server is weird. Why is my ghost still alive?
12:31:48 <Darius> Lor-: Pings for me are 2 hours apart
12:34:45 <dark> You can use Nickserv to kill off the ghost.
12:35:52 <basti_> re
12:48:42 <dark> Lor: If you register with NickServ, you can use it to kill off ghosts.
12:49:08 <Lor> What do I do? msg it with "help" or something?
12:56:33 <Tomasso> can anyone help me define the filter function in terms of map and concat ?
12:57:19 <basti_> hmmh
12:57:53 <Tomasso> is it posible?? concat [[a]] -> [a]
12:58:00 <Tomasso> i dont see how to do that...
12:58:00 <Darius> That's a crackheaded way to do it, but it is possible.
12:58:08 <basti_> yeah
12:58:24 <Tomasso> how do you say??
12:58:57 <basti_> i would do something like that: lambda function map (lambda x (if (function x) then x++ else []++))
12:58:58 <Lor> A list comprehension essentially transforms into map and concat...
12:59:15 <basti_> yea thats right
12:59:57 <Tomasso> hhm
13:00:32 <Tomasso> basti_: dont understend notation
13:00:36 <Tomasso> hehe :D
13:00:44 <basti_> lol ;)
13:00:47 <Tomasso> \function map... ?
13:01:08 <basti_> uhm "function" is the name of the variable to lambdabind
13:01:40 <basti_> \f->(map(\x->(if (f x) then [x]++ else []++)))
13:01:44 <basti_> i wanted to say
13:02:06 <dark> You'd need to write that as ([x]++) or (++) [x]
13:02:25 <basti_> uh ok
13:02:31 <Tomasso> mmh let me think a bit more about it
13:03:01 <basti_> thats what i thought when i saw the lazy fibonacci number thing ;)
13:03:02 <dark> But it doesn't look right... you'd end up with a list of [a] -> [a]
13:03:12 <basti_> hmh.
13:03:21 <basti_> was just a wild guess.
13:03:29 <basti_> ;)
13:03:35 <dark> Drop the ++, I think.  And apply concat. 
13:03:47 <dark> Then you concat this list of [x] and [] elements.
13:04:05 <dark> I think the Prelude defines this convenient function concatMap :-)
13:04:26 <Darius> It's also named (>>=)
13:04:40 <basti_> oh :)
13:04:42 <basti_> how nice
13:04:46 <dark> Erm?  >>= is a monad operator, right?  Do you mean the list monad?
13:04:49 <Darius> (well flip (>>=))
13:04:52 <Tomasso> ++ and concat are the same?
13:05:01 <Darius> @type (++)
13:05:01 <lambdabot> (++) :: [a] -> [a] -> [a]
13:05:04 <Darius> @type concat
13:05:04 <lambdabot> concat :: [[a]] -> [a]
13:05:13 <dark> concat is a generalization of ++
13:05:15 <phubuh> filter f = (>>= \x -> if f x then return x else return [])
13:05:16 <phubuh> :-)
13:05:32 <phubuh> err, drop that last return
13:05:39 <basti_> btw
13:05:46 <basti_> i found out today what exactly "return" does
13:06:03 <Darius> nothing you mean.
13:06:13 <basti_> uhm yea.
13:06:14 <Darius> phubuh: psh, mzero
13:06:17 <Lunar^> @type return
13:06:18 <lambdabot> return :: Monad a => b -> a b
13:06:24 <Lunar^> This one is so clear
13:06:27 <phubuh> Darius: ah, of course :-)
13:06:50 <dark> phubuh: Write that [] as fail for extra points :)
13:06:54 <Tomasso> dark: what is a generalization??
13:07:59 <dark> Tomasso: I'm using the word in its normal english meaning:)
13:08:12 <Lor> dark, mzero is better
13:08:53 <Darius> filter f = (>>= \x -> do True <- f x;return x)
13:10:05 <Lor> f is a monadic function?
13:10:13 <Darius> ... damn
13:10:22 <Lor> guard (f x)
13:10:54 <Darius> slap a return around it and it will work, ugly but it will work.
13:12:10 <Darius> It's merely a very roundabout way of writing if f x then return True else fail "..."
13:13:06 <Lor> when (f x) (return x)
13:13:25 <Lor> Um, sorry, no.
13:16:18 <Darius> filter f = ($ []) . mconcat . map (\x -> if f x then (x:) else id) -- functional lists... for efficiency!
13:16:32 * Darius couldn't think of anything more obtuse in an interesting way
13:16:49 <basti_> lol
13:18:29 <Darius> though mconcat . intersperse (',':) is convenient for showsPrec functions
19:01:09 <shapr> @yow
19:01:10 <lambdabot> PIZZA!!
19:01:23 <shapr> that bot loves pizza
19:05:40 <shapr> so, how's code?
19:08:03 <shapr> hm
19:09:09 * isomer bangs head against wall
19:09:43 <Riastradh> Freenode already split your head apart.  What more do you want to do?
19:10:02 * isomer watches knowledge leak out onto the desk
19:10:36 * Riastradh snatches it up, but throws it away quickly when he sees what's in it.
19:10:57 <shapr> yeehaa
19:11:15 <isomer> yo shapr
19:11:44 <shapr> y0 anth
19:11:45 <shapr> wassup?
19:12:08 <isomer> stud^H^H^H^Hcramming for my midterms... you?
19:12:37 * Riastradh is beating his head against a wall for the discussion about SRFI 44 now.
19:12:51 * isomer joins in
19:12:57 <shapr> I'm cogitating upon lambda calculus
19:13:14 <isomer> does it hurt?
19:13:18 <shapr> (aka, playing a game, and thinking about church numerals)
19:13:22 <shapr> nah, playing a game is fun
19:13:55 <shapr> the church numbers hurt
19:14:16 <isomer> Riastradh and i are practicing banging our heads against the wall...wanna join in?
19:14:38 <Riastradh> It's great fun!
19:14:51 <shapr> I think I'm already doing that with the homework in TaPL
19:14:55 <Riastradh> When I get up after it, I get high!
19:16:32 * Riastradh *whee*s
19:16:53 * isomer reaches for an advil or 3
19:17:06 <Riastradh> ..
19:17:06 <Riastradh> .
19:17:09 <Riastradh> ...
19:17:19 <isomer> gettin dizzy
19:17:27 <Riastradh> Damn you, Freenode!
19:17:31 <shapr> maybe I should give in and go to sleep
19:18:03 <Riastradh> shapr, bang your head against a wall first!
19:18:05 <isomer> shapr: eep!
19:18:07 <Riastradh> Then you'll have very fun dreams.
19:21:28 * shapr bounces cheerfully
19:21:58 <isomer> any snow yet, shapr?
19:22:17 <shapr> yah we got it yesterday
19:22:23 <isomer> did it stay?
19:22:27 <shapr> yup
19:22:33 <isomer> :)
19:22:44 <isomer> still waiting over here
23:50:59 <Pseudonym> shapr: You here?
