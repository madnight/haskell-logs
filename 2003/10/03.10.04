00:18:43 * Maddas poke ste
00:18:50 <Maddas> ugh, too lat
00:18:51 <Maddas> e
00:19:39 <Maddas> my typing skills aren't exactly overwhelmingly good today
03:31:50 * shapr boings
03:33:13 * phubuh_ zooms
03:33:22 * shapr zing
03:33:22 <shapr> s
03:39:14 * Maddas pokes phubuh_ 
03:39:51 * Maddas pokes phubuh, rather
03:40:05 <Maddas> phubuh_: is phubuh around?
03:40:26 <phubuh> indeed
05:26:15 * shapr chortles merrily
05:26:32 * phubuh codes ocaml :-P
05:26:38 <shapr> eww
05:26:48 <phubuh> to top it off, i'm installing windows xp professional in a virtual machine
05:26:53 * phubuh feels dirty.
05:27:16 <shapr> yuck
05:27:19 * shapr grins
05:27:48 <phubuh> ocaml is pretty nice for an impure language :-)
05:28:57 <phubuh> i'm hacking on a direct connect client (in ocaml), and i need a decent client (DC++, which is for windows) to test stuff
05:38:33 <Maddas> And I'm getting my (first) PowerBook in two weeks!
05:38:35 <andersca> hej shapr
05:39:03 <phubuh> Maddas, lucky you!
05:40:29 <Maddas> indeed
05:45:52 <mattam> Maddas: same here :) Which one did you choose ?
05:46:11 <Maddas> 15" with SuperDrive :-)
05:47:47 <mattam> ouch, lot of money and power
05:48:36 <Maddas> Yeah
05:48:40 <Maddas> That's gotta last for a while
05:48:54 <mattam> what is the difference between Full size and backlit keyboards ?
05:50:04 <Maddas> Full size?
05:50:13 <Maddas> Backlit keyboards are just candy, I think :)
05:50:46 <mattam> k
05:50:47 <phubuh> isn't it all? :P
05:51:21 <Maddas> well, that's pure candy ;)
05:53:38 <shapr> hej andersca 
06:06:32 * shapr boings
06:06:54 * shapr yawns
06:07:11 <shapr> hi arguile_
06:07:38 <arguile_> Hello, and bye again
06:07:48 <shapr> well then
06:08:04 <arguile_> Doing renovations to this house is killing my uptime :)
06:08:20 <shapr> oh, that sucks
06:08:24 <shapr> well, renovations are fun... 
06:08:42 <arguile_> The UPS won't be able to hold off long enough :) Anyway bye
06:09:04 * shapr is tempted to try 2.6.0
06:09:32 <shapr> Igloo: hey, would recommend a single wash deb containg all the pieces? or multiple debs?
06:22:26 <shapr> hoi BlitzNL
06:22:27 <shapr> ltns
06:23:34 <BlitzNL> hejsan shapr, is that correct? ;)
06:25:08 <Igloo> shapr: Would someone want some bits but not others?
06:25:41 <BlitzNL> Because of haskell's type inference we can write functions that can work on any type. Are there OO languages that do some kind of type inference based type system and therefore are able to provide a equaly powerfull generics mechanism? The only OO experience I have is C++ and its templates are kinda part of preprocessing and it scans all occurences of a template and then generates instances, i.e. not very nice.
06:27:03 <clausen> well, you can do run-time type identification in C++
06:27:06 <clausen> (rtti)
06:27:20 <clausen> (and in Java, C#)
06:27:25 <phubuh> lately binding OO languages don't really need type inference to do generics -- you can just send whatever message to whatever and hope they'll respond -- but it isn't going to be as safe as haskell's
06:27:46 <phubuh> not all lately binding OO languages, though
06:29:23 <shapr> BlitzNL: yes, that's correct.
06:29:28 <shapr> Igloo: good question
06:44:13 <shapr> hi nairda 
06:44:25 <shapr> learning Haskell?
06:44:40 <nairda> hi
06:46:11 <shapr> do you have some Haskell questions?
07:21:15 <shapr> hoi kosmikus
07:21:43 <kosmikus> hoi shapr
07:21:59 <kosmikus> how is life?
07:22:03 <shapr> life is good
07:22:12 <shapr> I'm playing with Haskell code
07:22:25 <kosmikus> what are you doing?
07:22:35 <shapr> playing with WASH
07:22:43 <kosmikus> ah
07:22:43 <shapr> I want to make some WASH debs
07:23:08 <shapr> what are you doing?
07:24:54 <kosmikus> trying to document and improve a constraint-based typechecker for rank-n polymorphic types
07:25:16 <shapr> sounds challenging :-)
07:27:16 <kosmikus> I hope that the hard work is done by now
07:27:49 <kosmikus> maybe we will have rank-n types in Helium at some point in time :)
08:15:56 <sandos> is there any way to cast in haskell?
08:16:07 <sandos> I have a function in which I want to use floats, but the arguments are Int
08:16:38 <sandos> Instance of Floating Int required for definition of crop
08:16:47 <sandos> I really havent heard of Floating Int ?
08:24:02 <kosmikus> floor, ceiling, round
08:24:17 <Riastradh> kosmikus, no, he wants a float _from_ an int.
08:24:47 <phubuh> @type fromIntegral
08:24:48 <lambdabot> fromIntegral :: (Integral a, Num b) => a -> b
08:24:49 <kosmikus> fromIntegral
08:24:54 <kosmikus> sorry
08:25:59 <sandos> hmm
08:25:59 <Orwell^> that is a really goofy error message
08:26:06 <Orwell^> "Floating Int" etc
08:26:14 <sandos> and fromIntegral doesnt help afaics
08:27:34 <kosmikus> why not?
08:27:46 <sandos> it does...
08:28:09 <sandos> but I also needed a toInteger
08:29:46 <sandos> hmm
08:29:52 <sandos> how do I go from Integer to Int ?
08:30:12 <kosmikus> fromIntegral
08:33:35 <kosmikus> @type fromIntegral (42 :: Int) :: Float
08:33:36 <lambdabot> fromIntegral 42 :: Float
08:33:40 <kosmikus> @type fromIntegral (42 :: Integer) :: Int
08:33:41 <lambdabot> fromIntegral 42 :: Int
08:33:47 <sandos> uhm hmm
08:34:31 <sandos> d :: Float -> Int
08:34:31 <sandos> d = fromIntegral . toInteger
08:34:36 <sandos> that doesnt work
08:35:07 <kosmikus> if you want Float to Int, you should use floor, ceiling, or round
08:35:14 <kosmikus> @type floor
08:35:14 <lambdabot> floor :: (RealFrac a, Integral b) => a -> b
08:35:15 <sandos> aha
08:35:15 <sandos> ok
08:35:24 <kosmikus> @type floor 2.5
08:35:25 <lambdabot> floor 2.5 :: (RealFrac a, Integral b) => b
08:35:34 <sandos> thanks
08:35:37 <kosmikus> @type (floor (2.5 :: Float) :: Int)
08:35:37 <lambdabot> floor 2.5 :: Int
08:40:47 <phubuh> how do i get a list of all n-sized sublists of a list?
08:44:07 <phubuh> wait, that should be easy
08:54:30 <phubuh> uh, i really don't know what this error means
08:54:34 <phubuh> ERROR "find.hs":25 - Inferred type is not general enough
08:54:34 <phubuh> *** Expression    : x
08:54:34 <phubuh> *** Expected type : a
08:54:34 <phubuh> *** Inferred type : _40
08:55:00 <phubuh> this is the function:
08:55:04 <phubuh> takeN 0 x  = []
08:55:04 <phubuh> takeN n xs = do x <- xs
08:55:04 <phubuh>                 r <- takeN (n - 1) (delete x xs)
08:55:04 <phubuh>                 x :: r
08:56:03 <Darius> uh, I don't think you want :: r
08:56:27 <phubuh> oh, of course. r is [[a]]
08:56:48 <Darius> Yes, but :: means 'has type'
08:56:53 <phubuh> haha
08:57:07 <phubuh> that's what i get for jumping back and forth between ocaml and haskell projects
08:58:03 <Maddas> haha
08:58:39 <phubuh> actually, x:r should be correct, i think... but hugs thinks takeN :: a -> [b] -> [b], and when i try to use it as a -> [b] -> [[b]], it says "unification would give infinite type"
09:00:09 <phubuh> of course, i forgot a return. gah.
09:00:32 <phubuh> i'm useless at combinatorics
09:03:38 <BlitzNL> has anyone ever considered design patterns for functional languages? I mean there are non, but would it be usefull to have them or are patterns only usefull when writing OO applications?
09:04:31 <Darius> Yes.  There are some.  And design patterns can't be useful for only OO (though OO design patterns often are unnecessary for FP)
09:04:33 <Riastradh> What are 'design patterns?'
09:05:28 <BlitzNL> Riastradh: serious? basic strategies for solving a problem
09:06:13 <Riastradh> The way you use it makes it sound like a term with a more special meaning.
09:06:28 <Xcalibor> hi all :)
09:07:11 <Xcalibor> BlitzNL: there are several design patterns for functional objects
09:07:17 <Xcalibor> functional languages, i mean
09:07:47 <Xcalibor> the problem is that most GoF patterns really solve shortcomings in the pre-ISO C++ language (and thus are applied to Java, and so on...)
09:09:26 <Xcalibor> Riastradh: design patterns are abstractions of common solutions that appear when doing OO programming... they are like recipes: when you have this, and want to get that, apply this pattern
09:09:59 <Xcalibor> which means adapting the recipe to your particular problem domain... Singleton, Class Factories, etc are common OO patterns
09:12:41 <Smerdyakov> I tend to think of design patterns as crutches for people who wouldn't come up with those solutions on their own.
09:14:10 <Darius> Smerdyakov: Part of the point of design patterns is to share design knowledge so people -don't- have to come up with it on their own.
09:14:52 * Xcalibor bbl... shower etc...
09:15:09 <Smerdyakov> From what I've seen, it still sounds like they are rarely useful to a skilled programmer.
09:15:35 <Smerdyakov> He can just use a kind of mental unification on the constraints imposed by the problem.
09:17:30 <Darius> Of course, design patterns shouldn't be new and unique, another point of design patterns is to explicitly name the result of that unification so one can talk about design concisely.
09:17:58 <Smerdyakov> Well, this reminds me of "rematerializing" or some similar term related to register allocation.
09:18:09 <Smerdyakov> The cost of discovery for oneself can be so small that it's not worth it. :)
09:21:43 <Darius> As I said, part is communication.  Talking in terms of design patterns abstracts away from implementation and can be clearer than an implementation.  Some design patterns have nearly identical implementations but different intents others have complicated implementations.
09:51:29 <sandos> ok, if Ive got a (Integer, Integer) and I need a (Int, Int) from that, how do I do that? Feel like Ive tried everything
09:55:10 <dennisb> sandos: fromEnum should work
09:55:28 <Darius> fromIntegral would work as well
09:56:23 <Darius> Of course, the behavior may not be what you want when the value of an Integer is > maxBound
10:05:40 * Xcalibor is back
10:45:11 <BlitzNL> is there a library available for doing network socket communication using haskell?
10:46:36 <Darius> Yes
10:46:43 <BlitzNL> what is its name ?
10:47:19 <BlitzNL> hslibs?
10:48:02 <Darius> Using GHC it's the Network (Network.*) modules in the network package.
10:49:05 <BlitzNL> Darius: k thnx
10:50:23 <sandos> how do I print the type of something?
10:50:56 <Smerdyakov> :type expression in hugs
10:53:02 <sandos> ok
10:55:20 <sandos> wow, I really dislike haskell right now
10:55:29 <sandos> I still cant seem to convert betweenm Int and Integer
10:56:08 <Darius> Prelude> fromIntegral (3 :: Integer) :: Int
10:56:08 <Darius> 3
10:56:12 <Darius> works fine for me
10:56:50 <Darius> The type signatures shouldn't be necessary in the cases where the types can be inferred from context.
11:02:12 <BlitzNL> is there a network library that works with hugs too?
11:03:02 <sandos> aha
11:03:05 <sandos> thats how you do it
11:04:25 <Darius> BlitzNL: I don't know.  I don't use Hugs.  A cursory glance at the documentation doesn't make it seem likely.
11:05:52 <Darius> sandos: That was the same thing dennisb and I said an hour ago.
11:06:14 <BlitzNL> Darius: I couldn't find it either, but I expected it to be somewhere. Maybe a nice pet-project though..
11:06:39 <Smerdyakov> Darius, you didn't say it with the type signatures.
11:07:59 <Darius> BlitzNL: One possibility is via the FFI.
11:11:11 <kosmikus> sandos, Darius: It's also the same thing phubuh and I said 3 hours ago ...
11:19:30 <sandos> well, I ended up nto using it
11:19:40 <sandos> I meant the ending ":: Int" which wasnt mentioned before I think
11:19:58 <sandos> ah it was too
11:20:00 <sandos> Im just blind
11:21:45 <sandos> is it possible to use tuples as a kind of whatever-type list?
11:22:02 <sandos> Im trying to write a listPrint function, and I want to be able to do something like
11:22:13 <sandos> listPrint [1, "hi", 2]
11:22:19 <sandos> and get "1 hi 2" as output
11:22:24 <sandos> but thats not a valid list
11:22:28 <dennisb> that is not a valid haskell list
11:22:30 <sandos> so is it possible to this with tuples?
11:22:40 <Darius> For limited numbers.
11:22:49 <phubuh> yes, but you'll have to write infinitely many functions if you want to be able to pass arbitrarily many arguments
11:22:55 <sandos> `aha
11:24:08 <dennisb> I don't understand how you can produce a list like that, don't you know what you put into the list?
11:24:23 <sandos> I do
11:24:37 <sandos> but I might want to put different stuff in at different times of usage
11:24:41 <sandos> think printf
11:24:55 <Riastradh> This sounds like a job for...Template Haskell!  *fanfare*
11:25:01 <sandos> oh..
11:25:03 <sandos> =)
11:25:09 <Darius> You can't put different stuff in at different times of usage.  Lists are immutable.
11:25:14 <Smerdyakov> sandos, the upshot is that you do one of two things:
11:25:21 <dennisb> you could use a datatype like data Val = F Float | I Int | S String or something
11:25:24 <Darius> (along with everything else)
11:25:31 <Smerdyakov> sandos, you define a single type that handles all elements you'd want, like dennisb just said.
11:25:55 <Smerdyakov> sandos, OR, you use something like TH to determine types at compile time and automatically generate a function whose type is statically known.
11:26:42 <shapr> but that would be too easy
11:26:50 <sandos> haha
11:28:43 * shapr boings cheerfully
11:29:12 <isomer> hey shapr
11:30:36 <shapr> hi anth, wassup?
11:31:42 <isomer> not much - working on my med school applications. how about you?
11:32:04 <shapr> watching a movie, getting distracted.
11:32:37 <isomer> :(
11:32:39 <isomer> which film?
16:40:53 <shapr> oy
16:40:57 <Smerdyakov> I agree.
16:41:02 <shapr> oy vay!
16:49:21 <shapr> biglumber.com is nifty
16:52:27 <shapr> hi Igloo 
16:53:35 <shapr> hola lektu 
16:53:41 <lektu> Hi.
16:53:46 <shapr> wassup?
16:53:53 <lektu> Just takin' a look.
16:54:06 <shapr> see anything interesting?
16:54:19 <lektu> Lots of silent people, as ever :)
16:54:53 <shapr> heh
16:54:57 <shapr> you could talk
16:55:00 <shapr> then it won't be silent
16:55:11 <lektu> Yeah, I suppose so.
16:55:19 <shapr> do you like functional programming?
16:55:34 <lektu> But the other day I asked about monads and the conversation ended on high-math.
16:55:51 <lektu> Yeah, sure. That's why I'm trying to learn Haskell.
16:55:51 <shapr> have you read the monads tutorial in the topic?
16:55:54 <Smerdyakov> lektu, a sign of the poor pedagogical skills of the answerers. :)
16:56:12 <lektu> I'm quite a fan of Common Lisp, also (but much less) of Scheme.
16:56:25 <lektu> (Smerdyakov): No, I think converstations tend to derive, in IRC.
16:56:47 <lektu> shapr: I'm doing my second reading of "All About Monads"
16:57:01 <Smerdyakov> lektu, well, the problem would be if they tried to use "high-math" to explain the programming concepts.
16:57:22 <shapr> lektu: what do you understand about monads so far?
16:57:34 <lektu> No. They sort of answered my questions, and next time I looked, they were discussing ZFC.
16:58:13 <Smerdyakov> ZFC sux.
16:58:18 <Smerdyakov> I burn it in effigy every night.
16:58:26 <lektu> shapr: That they're a way to "connect" operations (computations, I mean), so you can (more or less transparently) carry state from one operation to the next.
16:58:51 <shapr> that's the state monad
16:59:03 <shapr> that's one instance of a monad
16:59:08 <lektu> (Smerdyakov): No opinion, really. I like math (mostly algebra and set theory), but I'm no expert.
16:59:15 <phubuh> don't think you're getting away that concretely
16:59:21 <Smerdyakov> I think that covers all monads about as accurately as you'll get in English, shapr.
16:59:35 <lektu> shapr: Well, yeah, but I think what I've said is more general than that.
16:59:36 <phubuh> the first clause, yes
16:59:53 <Smerdyakov> lektu, I think ZFC is way too complicated to be used for anything of inherent interest to people. :P
17:00:04 <shapr> oh, I had a great explanation for monads I came up with earlier today
17:00:09 <shapr> I think I've forgotten it
17:00:21 <phubuh> :(
17:00:25 <lektu> (smerdyakov): I think high algebra is complicated, but beautiful (at least the tiny bit that I understand). And I bet topology is beautiful too.
17:00:34 <lektu> (shapr): Buuuuuhhhh.
17:01:01 <Smerdyakov> lektu, would you still use the theories you know of "high algebra" if there were simpler ones that yielded the same results for all problems that interest you?
17:01:03 <shapr> basically, monads are about sequencing
17:01:13 <shapr> make sure one piece happens before another
17:01:23 <lektu> (smerdyakov): I suppose not. But remember, I'm no mathematician.
17:01:46 <Smerdyakov> And that's probably beneficial in seeing that ZFC is a crock. :)
17:02:03 <lektu> shapr: Yeah, but you wouldn't need monads for sequencing were you not carrying something (state, call it as you like) from one step to the next.
17:04:23 <lektu> Anyway, concerning monads: I know they're useful. But the do-notation fragments of a Haskell program look so imperative (even if they are just syntactic sugar for >>= and >> and return) that they're positively ugly if compared with non-monadic Haskell.
17:06:14 <phubuh> i like to use >>= and >> as much as possible :)
17:06:25 <phubuh> (at least when it makes semantic sense)
17:06:54 <lektu> Yeah. But sometimes you just have to use do (well, you never *have* to, but you get my point).
17:07:02 <phubuh> yeah :(
17:07:42 <lektu> Anyway, my biggest problem with Haskell now is not monads, but warping my mind 'round Haskell, getting used to think in Haskell.
17:08:02 <lektu> It doesn't help that libraries are big and very poorly documented (at least example-wise).
17:10:27 <shapr> which libraries?
17:11:15 <lektu> Well, all of them. I mean, the Prelude is more or less easy to get. But FiniteMap, Array... Not to mention more specialized things like HaXml, etc.
17:12:05 <lektu> Not that each one of them is difficult per se, but the moment I wander from pure mathematic functions and into doing "things" (processing files, etc.)... I'd welcome more examples.
17:12:18 <shapr> drop by here, ask for examples
17:12:29 <shapr> I have a habit of writing prototype files for each new library I learn
17:12:32 <lektu> (I think I already mentioned the other day that I've bought a copy of Haskell School of Expression, but it didn't arrive yet)
17:12:39 <shapr> so I have ProtoFM.hs ProtoLazyList.hs etc etc
17:13:26 <lektu> What do you mean by "prototype files"?
17:13:59 <shapr> something that uses each of the functions (or maybe just the ones I need to use) in a library.
17:14:07 <shapr> then I save that file so I can come back and look at it if I forget.
17:14:08 <lektu> Ah, I understand.
17:14:18 <shapr> it's called a spike solution in Extreme Programming
17:15:05 <lektu> XP is something I'd like to get my hands into. Unfortunately, the probability of getting my bosses into allowing XP to be used at work approaches zero. From negative infinite upwards :)
17:15:24 <lektu> A Haskell question, about types.
17:15:27 <shapr> even so, XP has a lot of useful practices that are worth learning and using.
17:15:42 <shapr> you don't have to tell them that writing unit tests is part of XP, you can just say it's useful
17:15:44 <lektu> Yeah, I know.
17:16:19 <lektu> Yeah, unit testing is useable on itself. But pair programming... You cannot do that stealthily :)
17:16:51 <lektu> My question about types.
17:17:05 <lektu> The other day, in haskell-cafe, I was "offered" a monad like that:
17:17:13 <lektu> data Accum s a = Ac [s] a
17:17:23 <lektu> instance Monad (Accum s) where
17:17:24 <shapr> pair programming can be done stealthily, you just sit at the same desk and 'talk about your code' for an hour
17:17:31 <shapr> at least, it's worked for me in the past
17:17:35 <lektu> return x = Ac [] x
17:17:56 <lektu> Ac s1 x >>= f = let Ac s2 y = fx in Ac (s1++s2) y
17:18:27 <lektu> (shapr): Yeah, well, one hour talkin' about my code wouldn't be well-received by my boss.
17:18:49 <shapr> are you the alpha geek where you work?
17:18:58 <lektu> The question is: the monad needs to type variables (s and a)
17:19:17 <lektu> (shapr): No, there are a few more. We're quite-a-geek-department.
17:19:56 <lektu> (Cont.) But the fact is that the state being accumulated (in [s]) is of type a too.
17:20:09 <lektu> So I though I could define: data Accum a = Ac [a] a
17:20:29 <lektu> But that doesn't fly, at least I don't get it.
17:20:39 <lektu> instance Monad (Accum) where
17:20:45 <lektu> return x = Ac [] x
17:21:10 <lektu> Ac s1 x >>= f = let Ac s2 y = f x in Ac (s1++s2) y
17:21:54 <lektu> produces: "Inferred type is less polymorphic than expected; quantified type variable 'b' is unified with another quantified type variable 'a'".
17:22:47 <lektu> Which I deduce comes from type of >>= :  (>>=) :: forall m b a. (Monad m) => m a -> (a -> m b) -> m b
17:24:26 <lektu> So I'm not sure what is the question. Perhaps: There's a way to state in the data definition the restriction that s and a are related, i.e., that [s] is going to be [a]?
17:24:57 <shapr> I don't know, looks like it should work to me :-)
17:25:32 <lektu> Yeah, it looks that way to me too, but it doesn't, at least on GHC with extensions. Hmm... I'll try in Hugs.
17:25:34 <lektu> Wait a minute.
17:26:42 <lektu> "Inferred type is not general enough"
17:26:51 <lektu> "Expression: (>>=)"
17:27:17 <lektu> "Expected type: Monad Accum => Accum a -> (a -> Accum b) -> Accum b"
17:27:36 <lektu> "Inferred type: Monad Accum => Accum a -> (a -> Accum a) -> Accum a"
17:27:44 <lektu> IOW: the same answer.
17:29:03 <shapr> hm
17:30:08 <shapr> I don't have any suggestions
17:30:20 <shapr> but I'd bet Igloo or Heffalump could tell you why
17:31:05 <lektu> Why?
17:31:28 <shapr> they know more about FP and Haskell than I do
17:31:40 <shapr> sadly, I'm still a professional procedural programmer
17:31:52 <shapr> maybe one day I'll be a professional functional programmer :-)
17:31:58 <lektu> Same here. C++ & Perl, mostly.
17:32:31 <lektu> Anyway, Igloo is present but silent, and Heffalump is not in sight.
17:33:39 <lektu> Well, it's 02:32am so I should go to bed. I'll ask the question on haskell-cafe and switch my computer (and mind) off for a while.
17:34:06 <shapr> yah, sleep is a good idea for me too.
17:34:17 <lektu> You on Europe?
17:35:19 <shapr> yup
17:35:22 <shapr> I'm in the north of sweden.
17:35:28 <shapr> CET
17:35:32 <lektu> Then yes, time to go to bed.
17:35:41 <lektu> :)
17:35:47 <shapr> yah, just one more email check...
17:35:48 <shapr> :-)
17:35:51 * shapr feeds the addiction
17:36:01 <lektu> I'm e-mail addicted too.
17:36:02 <shapr> okay, that wasn't very exciting.
17:36:13 <lektu> What?
17:36:17 <shapr> no new email :-)
17:36:20 <shapr> not even spam!
17:36:21 <lektu> Ah..
17:36:30 <shapr> anyways, time for bed.
17:36:37 * shapr disappears in a poof of dreams
17:36:39 <lektu> Subscribe to a few well-choosen mailing lists and you'll never lack tons of e-mail.
17:36:54 <lektu> (GCC, for example, or perl5-porters :)
17:37:54 <lektu> Good night ev'rybody.
21:16:06 <ytftrduydtd> hey anyone on?
21:16:33 <Smerdyakov> No
21:16:46 <ytftrduydtd> =.=""
21:16:57 <ytftrduydtd> anyone doin comp 1a?
21:17:03 <ytftrduydtd> oppz
21:17:11 <ytftrduydtd> anyone know how to program in haskell?
21:17:26 <ytftrduydtd> coz i need help man ><
21:19:50 <Smerdyakov> Am I right that you just asked if we are doing a class at your university?
21:19:52 <Rafterman> ytftrduydtd: what do you need help with?
21:21:02 <ytftrduydtd> yeah, i'm stuck on a bit of programming for my project ><
21:22:24 <ytftrduydtd> it give out this error and i donno how to correct it
21:22:42 <ytftrduydtd> Illegal class assertion
21:26:07 <Smerdyakov> From what specific line of code?
21:26:14 <ytftrduydtd> let me paste it in
21:27:19 <ytftrduydtd> newLift :: LiftID -> Capacity -> (MinLevel,MaxLevel) -> Level -> Lift
21:27:57 <ytftrduydtd> the assignment default is in that format already, and they advised not to change it, and it gives out the eroor 
21:28:01 <ytftrduydtd> error*
21:30:00 <dennisb> that is probably not the row with an error
21:30:03 <Smerdyakov> What line comes right before that one?
21:31:54 <ytftrduydtd> -- constructor
21:32:05 <ytftrduydtd> a comment
21:33:20 <Smerdyakov> Are you using the words instance or class as a variable name anywhere?
21:34:22 <Smerdyakov> Or using => anywhere?
21:36:14 <ytftrduydtd> the variables are all declared correctly, or has been declared correctly by the people that set the assignment
21:37:27 <Smerdyakov> How much of the code have you changed yourself?
21:40:59 <ytftrduydtd> just the default ones, eg. variable = erro "watever"
21:42:09 <dennisb> ytftrduydtd: put every definition in the file in a comment and start adding functions one at a time until you get the error
21:42:36 <ytftrduydtd> k
21:43:26 <ytftrduydtd> oh btw, the prog has imports
21:43:49 <ytftrduydtd> coz when i didn't import the files, it hasn't got the error, but when i do import it it does
21:44:14 <ytftrduydtd> and they advised us to do it one by one, and the first two files dont affect each other, the last one is the main file
