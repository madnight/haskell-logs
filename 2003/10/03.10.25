04:11:53 <shapr> hiya
04:11:55 <shapr> wassup?
04:12:12 <jao> hi! 
04:12:33 <jao> nothing exciting. what about you? how's code?
04:16:04 <shapr> I've been staring at church numerals in OCaml
04:16:16 <shapr> Lunar^_ wrote a neat module for lambdabot 
04:16:22 <shapr> ghci via irc
04:16:42 <jao> are you learning ocaml?
04:17:18 <shapr> no, but "Types and Programming Languages" uses OCaml for its interpreters/evaluators
04:17:52 <jao> ah. i ordered tapl yesterday :)
04:18:11 <shapr> it's a spiffy book, I enjoy it lots
04:18:37 <jao> heh. i'm sure i will, too
04:18:51 <jao> (once i find the time for reading it!)
04:29:09 <basti_> hi all
06:11:55 <Vincenz> shapr: hiya
06:12:31 <Vincenz> shapr: where is that book you were talking about?
07:13:51 <Pseudonym> Anyone been reading Peter van Roy on LtU?
07:15:11 <Lunar^_> Pseudonym: I tried
07:18:03 <Pseudonym> The one on State and Modulatrity I thought was pretty easy to read.
07:18:23 <Pseudonym> The stuff on Prolog implementation is... well... let's say "niche interest".
07:19:46 <Lunar^_> Pseudonym: I agree with some of his points about the threaded State and modularity
07:20:07 <Pseudonym> Yes, me too.  I don't think that Haskell has solved this problem yet.
07:20:19 <Lunar^_> Pseudonym: Maybe with Arrows..
07:20:19 <Pseudonym> Though I now see why poeople like implicit arguments.
07:20:42 <Lunar^_> Pseudonym: implicit arguments?
07:21:03 <Pseudonym> I don't think arrows will help.
07:21:09 <Pseudonym> Any more than monads do now.
07:21:19 <Pseudonym> Although, arrows are a good model for Erlang-style concurrency.
07:21:42 <Pseudonym> So in the "concurrency or state, pick any one" stakes, arrows solve half the problem. :-)
07:22:15 <Lunar^_> Pseudonym: I don't know... sometimes you need a global state and a local state, this could be a "join" arrow
07:22:23 <Lunar^_> Pseudonym: with another arrows feeding the global state
07:22:47 <Pseudonym> http://haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#IMPLICIT-PARAMETERS
07:23:12 <Lunar^_> Pseudonym: I think that Arrows are really new, and really not pushed far because we lack a graphic editor
07:23:52 <Pseudonym> I don't think we need a graphic editor.  At least not to write programs.
07:24:04 <Lunar^_> Pseudonym: uh.. never used that... I read that part, but I didn't see any application for it
07:24:19 <Lunar^_> Pseudonym: to do real work(tm) with arrows I think so
07:24:22 <Pseudonym> Neither did I, until I read PvR's essay. :-)
07:24:31 <Pseudonym> I disagree, sort of.
07:24:38 <Lunar^_> Pseudonym: The syntax is mind crushing IMHO
07:25:09 <Lunar^_> Pseudonym: PvR ?
07:25:13 <Lunar^_> Pseudonym: uhh sorry
07:25:20 <Pseudonym> See, I think the reason why it's mind crushing is that people are thinking about static graphs.
07:25:36 <Pseudonym> I think the interesting cases for arrows are when the graphs are dynamic,.
07:26:45 <Pseudonym> Where a C++ programmer would use signals and slots, or a Java/Smalltalk programmer would use observers, I think arrows will do the job.
07:27:14 <Lunar^_> Pseudonym: uhh... an editor would be inappropriate for dynamic graphs, you're right
07:28:00 <Pseudonym> As an example, a spreadsheet.
07:28:13 <Pseudonym> A spreadsheet's topology is defined by the user.
07:28:39 <Pseudonym> The spreadsheet is the graphical editor. :-)
07:29:18 <Lunar^_> Pseudonym: mhhhh neat
07:29:36 <Lunar^_> Pseudonym: I want a graphical editor anyway
07:29:54 <Lunar^_> Pseudonym: Just to see if I can make of proof of OS programming by signal transformers
07:30:07 <Pseudonym> Interesting.
07:30:22 <Pseudonym> Many microkernel OSes do kind of that.
07:30:31 <Pseudonym> An IPC server is kind of like a signal transformer.
07:31:20 <Lunar^_> Pseudonym: For a mouse handler : devices sends Signal Bit, transformed to Signal (DeltaX, DeltaY), transformed to Signal Point, transformed by the graphical componenent to Signal Graphic
07:31:45 <Pseudonym> Rigbht.
07:31:47 <Pseudonym> Right.
07:32:15 <Lunar^_> I'm dreaming about this since I read the paper about Fruit
07:32:25 <Pseudonym> Hmmm... same for virtual memory, too.
07:32:36 <Pseudonym> Say you have an mmaped file.
07:33:02 <Pseudonym> Then it's memory -> page cache -> filesystem -> volume -> disk.
07:33:30 <Pseudonym> (Assuming that volume != disk.)
07:34:52 <Lunar^_> Pseudonym: If I'm starting a new OS, there would be NO filesystem
07:35:09 <Lunar^_> Pseudonym: because I don't want to see files
07:36:19 <Lunar^_> http://brix-os.sourceforge.net/?p0=info&p1=concepts&p2=ofs-about
07:36:40 <Lunar^_> This is quite good summary of the way I would see "files"
07:37:20 * Pseudonym nods
07:37:35 <Pseudonym> In fact, Unix is closer to this than a lot of people realise.
07:37:40 <Pseudonym> It doesn't have files, it has inodes.
07:38:04 <Pseudonym> The only catch is that the metadata isn't extensible, and there are no translators.
07:38:29 <Lunar^_> Pseudonym: someone even made an address book keeper with inode
07:38:52 <Pseudonym> There you go. :-)
07:59:32 <Pseudonym> Better go to bed, I think.  Nytol!@
11:21:45 <musasabi> How difficult is it to get haskell programs run in a very primitive enviroment (very limited heap and no libc)?
11:45:15 <basti_> uhm
11:45:21 <basti_> no libc?
11:48:57 <musasabi> nope. 
11:49:08 <basti_> bad.
11:49:09 <basti_> ;)
11:50:17 <musasabi> currently the system is using c++ with some hacked support files. now if only there would be something cleaner...
11:50:42 <basti_> hmm
11:53:01 <musasabi> nhc98 seems to have quite low resource requirements... (haven't looked properly how much ghc can be tweaked)
11:53:32 <basti_> to be honest I wouldnt know how to do that
15:34:02 <Tomasso> if i had to demonstrate by structural induction the following property:
15:34:04 <Tomasso> map f (xs ++ ys) = map f xs ++ map f ys
15:34:20 <Tomasso> how many base cases are there, 3?
15:34:27 <Smerdyakov> Then you should call the experts. Find a structural induction contractor.
15:34:50 <Tomasso> xs = [], xs = [] ys = [], and ys = [] ?
15:34:56 <Smerdyakov> "How many base cases are there?" is not a well-formed question without further information.
15:35:07 <Tomasso> Smerdyakov: what is a structural induction contractor
15:35:30 <Tomasso> Smerdyakov: what do you mean?
15:35:40 <Smerdyakov> Any induction is based on a well-founded relation.
15:35:48 <Smerdyakov> (I was joking about contractors.)
15:35:56 <Tomasso> heh  ok
15:36:01 <Smerdyakov> You have to decide what well-founded relation you're using before the idea of "base cases" makes sense.
15:36:13 <Smerdyakov> (A base case is any element with no elements "less than" it by the relation you use.)
15:36:45 <Tomasso> mhhm and in that case, am i right?
15:36:58 <Smerdyakov> In WHAT case?
15:37:06 <Tomasso> map f (xs ++ ys) = map f xs ++ map f ys
15:37:20 <Tomasso> base cases: xs = [], xs = [] ys = [], and ys = []
15:37:23 <Smerdyakov> You can't do induction without choosing a well-founded relation on the input set.
15:37:31 <Smerdyakov> You haven't given told us relation you're using.
15:37:38 <Smerdyakov> s/us/us what
15:37:49 <Tomasso> Smerdyakov: what relation?
15:38:26 <Smerdyakov> That's right. If you don't know what a relation is, you shouldn't be doing induction yet.
15:39:01 <Tomasso> i dont know what relation you say
15:39:37 <Smerdyakov> That's because I'm not SAYING a relation.
15:39:45 <Smerdyakov> It's YOUR job to come up with one before doing induction.
15:40:04 * Heffalump thinks Smerdyakov is being a little over-formal here :-)
15:40:45 <Smerdyakov> Regardless of the terminology used, the question I'm asking is the critical one.
15:44:03 <Heffalump> tomasso: what's your step case?
15:44:35 <Tomasso> step case == base case ??
15:44:48 * Heffalump changes his mind. I'm with Smerdyakov on this one.
15:44:51 <Darius> A -structural- induction comes with a relation.
15:45:13 <Heffalump> do you have a licence to induce, there?
15:45:51 <Tomasso> haha
15:49:01 <Tomasso> http://en.wikipedia.org/wiki/Structural_induction
15:49:08 <Tomasso> wikipedia is great
16:20:23 <dark> Yip!
16:20:34 <dark> shapr: Thanks for the WASH link.  Gave me new ideas :)
16:50:58 <syntax-laptop> is "A licence to induce" related "drinking and deriving"?
16:55:07 <Igloo> I hear the syntax police can revoke the former if you do the latter
21:28:29 <prologic> .lhs files, what can I do with them ? can they be converted to latex, or even postscript to be printed ?
