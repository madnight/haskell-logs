00:11:35 <Lunar^> Igloo: Are you there ?
00:26:17 <shapr> @boing
00:26:19 <lambdabot> Sorry, I don't know the command "boing", try "lambdabot: @listcommands"
00:26:55 <prologic> @yow
00:26:56 <lambdabot> Three attractive BANK ROBBERS are discussing RELIGIOUS DIFFERENCES and
00:26:56 <lambdabot>  MAKE-UP TECHNIQUE with them!!
00:26:58 <prologic> :)
00:27:04 <prologic> hi shapr
00:27:25 <shapr> hi prologic 
00:27:37 <shapr> wassup?
00:28:11 <prologic> getting some kind people to help me filter out my swen-virus mbox
00:28:20 <prologic> going to try and firewall off ip addresses
00:28:27 <prologic> know much about iptables ?
00:28:34 <shapr> not much
00:28:39 <shapr> I use the shorewall script
00:28:40 <prologic> me neither
00:28:48 <prologic> gonna have to read up on the howto again
00:28:54 <shapr> I've read about the various chains in iptables, but not enough to really understand it.
00:29:00 <prologic> -rw-------    1 prologic prologic 106458136 Oct 23 17:23 /home/prologic/Mail/swen-virus
00:29:07 <prologic> 706 swen viruses I've receieved to date
00:29:33 <shapr> quite a collection
00:29:38 <prologic> yeh
00:29:54 <prologic> i'm getting adsl in a few days and don't want these stupid people chewing my bandwidth
00:35:45 <Lunar^> shapr: I tried to build fptools's X11 last night on Mac OS X
00:36:17 <Lunar^> shapr: hit myself on the link phase... Mac OS X linker is just awfull
00:58:27 <Lunar^> Anyone ever successfully build fptools X11 ?
01:10:44 <shapr> Lunar^: which part of fptools do you mean?
01:16:45 <Lunar^> shapr: X11 package
01:16:59 <Lunar^> shapr: I always got linker problem, either on Mac OS X or Linux
01:21:09 <shapr> which version of the X11 package?
01:22:01 <Lunar^> shapr: the one in GHC6
01:23:29 * shapr tries building it
01:34:40 <Lunar^> :)(
02:58:49 <shapr> Lunar^: HSX11 version 1.00 ?
02:59:22 <Lunar^> shapr: dunno.. the one in GHC 6.0.1
03:24:58 <Igloo> Lunar?
04:09:25 <Lunar^> Igloo: did you ever try to compile fptools X11 on Mac OS X ?
04:09:51 <Igloo> No
04:12:13 <Lunar^> ok...
05:46:44 <shapr> Lunar^: I tried, I get a problem with make boot
07:49:03 <shapr> lotsa snow here
07:49:11 <andersca_> shapr: cool
07:49:35 <phubuh> here too :(
07:50:34 <shapr> on the good side, I'll be able to discover how to outfit my unicycle for snow ops
07:51:27 <phubuh> just the other day i discovered how to use my bicycle to fall down
07:51:42 <shapr> cool, how much practice did that take?
07:51:59 <phubuh> these things come naturally to me
07:53:05 <shapr> I wonder if it hurts less to fall off a unicycle onto snow
07:53:32 <phubuh> you lean a bit forward when you're riding the unicycle, don't you?
07:54:08 <shapr> yes, quite a bit, depending on speed
07:55:44 <phubuh> it seems to me, then, that falling from a unicycle would be nicer than from a bicycle, since there's less bikage to get tangled up in
07:57:16 <shapr> that's true, 99% of the time I get to fall onto my feet and just stand up
07:57:21 <shapr> or run if I'm really moving
07:57:33 <phubuh> ooh, that's cool
07:58:26 <shapr> so I've only gotten stitches once :-)
07:59:10 <shapr> the upside of a bicycle is that you don't often fall down
07:59:27 <shapr> of course, that's also true of a unicycle when you actually know how to ride it
08:57:03 <Lunar^> Ok.. using HSX11-1.0 works on both Linux and Mac OS X
09:40:56 <shapr> I can't get it to work forme
09:43:13 <Igloo> Am I right in thinking this is the HGL dep that needs greencard?
10:12:55 <basti_> boing
10:13:27 <phubuh> zoing
10:13:51 <basti_> !
10:32:07 <shapr> sproing!
10:32:22 <basti_> ah ;)
10:32:45 <shapr> much like rumplestiltskin, I am unable to resist certain things...
10:33:04 <basti_> tourette? ;)
10:35:22 <shapr> :-PP
10:35:34 <shapr> that's a funny thought :-)
10:35:39 <basti_> *g*
10:36:34 <basti_> how did this decimal guy do after i left?
10:42:02 <shapr> check the logs
10:42:06 <basti_> uh yes
10:42:08 <basti_> forgot
10:49:33 * shapr cheerfully installs debian again
10:49:46 <basti_> uh yes i got to do that too 
10:49:58 <basti_> tried to install a CORBA framework lately
10:50:13 <basti_> the install skript cheerfully did rm -rf /usr
10:56:23 <phubuh> bwaha
10:56:38 <basti_> :)
10:56:48 <basti_> aint that nice?
10:57:02 <basti_> it asked "do you want to remove your old XYZCorba version?"
10:57:05 <basti_> "y"
10:57:10 <basti_> "rm -rf /usr"
10:57:15 <basti_> "*BREAK*BREAK*BREAK*BREAK*BREAK*BREAK"
10:57:16 <phubuh> oh my
10:57:45 <basti_> well i can still login
10:57:51 <basti_> but no x no sensible tools
10:57:53 <basti_> etc.pp.
11:00:53 <shapr> scary thought
11:01:03 <basti_> :)
11:01:07 <basti_> it was my toy box
11:06:13 <Lunar^> shapr: What was the fix for @more on the lambdabot ?
11:10:33 <Heffalump> there's no really obvious fix
11:11:18 <Heffalump> apart from making your entire bot static, or all commands that might output stuff dynamic
11:12:07 <Lunar^> Heffalump: [Char] should be made [String] obviously
11:12:44 <Heffalump> yeah
11:12:56 <Heffalump> but the harder problem is dealing with the way @more needs to store Dynamic values
11:13:02 <Lunar^> Yes
11:13:12 <Heffalump> has shapr fixed it then?
11:13:33 <Lunar^> I tink so
11:13:40 <Lunar^> @prelude (^^)
11:13:41 <lambdabot> ERROR: does not exist
11:13:41 <lambdabot> Action: connect
11:13:41 <lambdabot> Reason: Connection refused
11:13:49 <Lunar^> oops
11:13:52 <Heffalump> heh
11:13:59 <Lunar^> @dict-help
11:13:59 <lambdabot> I perform dictionary lookups via the following 14 commands:
11:13:59 <lambdabot> @all-dicts .. Query all databases on dict.org
11:13:59 <lambdabot> @devils ..... The Devil's Dictionary
11:13:59 <lambdabot> @easton ..... Easton's 1897 Bible Dictionary
11:13:59 <lambdabot> @elements ... Elements database
11:14:00 <lambdabot> @foldoc ..... The Free On-line Dictionary of Computing
11:14:02 <lambdabot> @gazetteer .. U.S. Gazetteer (1990)
11:14:04 <lambdabot> @hitchcock .. Hitchcock's Bible Names Dictionary (late 1800's)
11:14:06 <lambdabot> @jargon ..... Jargon File
11:14:08 <lambdabot> [6 @more lines]
11:14:09 <Lunar^> @more
11:14:10 <lambdabot> @lojban ..... Search lojban.org
11:14:12 <lambdabot> @prelude .... Haskell Standard Prelude
11:14:14 <lambdabot> @vera ....... V.E.R.A.: Virtual Entity of Relevant Acronyms
11:14:15 <Heffalump> cool.
11:14:15 <Lunar^> works :)
11:14:16 <lambdabot> @web1913 .... Webster's Revised Unabridged Dictionary (1913)
11:14:17 <Heffalump> @modules
11:14:18 <lambdabot> @wn ......... WordNet (r) 1.7
11:14:20 <lambdabot> @world02 .... CIA World Factbook 2002
11:14:22 <lambdabot> Sorry, I don't know the command "modules", try "lambdabot: @listcommands"
11:14:26 <Heffalump> @listcommands
11:14:26 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","foo","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude
11:14:30 <Heffalump> @listmodules
11:14:30 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
11:14:39 <Heffalump> ah, he made them all dynamic :-)
11:28:45 <shapr> I thought I made them all static
11:28:51 <shapr> but I would prefer a better solution
11:29:36 <shapr> as I understand it, the problem is that you can't change the in-memory type table at runtime, right?
11:30:22 <Heffalump> oh, yes, @listmodules doesn't say what the dynamic ones are
11:30:56 <Heffalump> no, the problem is that runtime loaded stuff has a completely separate type table to the static type table
11:31:22 <Heffalump> so even identical types are treated differently on either side
11:32:05 <shapr> is there a solution to that?
11:32:19 <shapr> is there some way to merge the type tables?
11:32:20 <Heffalump> I think I had some ideas, but I forgot to document them
11:32:27 <Heffalump> I don't know of any such way
11:32:34 <shapr> is there some way to declare that certain types are equal?
11:32:42 <shapr> even if they're in different type tables?
11:32:49 <Heffalump> oh, actually, I just had a cunning plan
11:32:56 <shapr> what's that?
11:33:01 * shapr likes the sound of that :-)
11:33:02 <Lor> What are these type tables?
11:33:25 <shapr> from what Heffalump said before, I got the impression that type comparison is just pointer comparison at some level way down
11:33:34 <Heffalump> Lor: mapping the tags that Dynamic uses into real types
11:34:00 * shapr bounces excitedly
11:34:05 <shapr> what's your cunning plan?
11:34:05 <Heffalump> shapr: make a function of type Dynamic -> [String] or whatever it is that the more module stores, in the same place as data gets added to the more module
11:34:08 <Heffalump> oh, hmm.
11:34:14 <Heffalump> that may not work
11:34:33 <Heffalump> I'll think about it some more, but I've got other evil schemes I need to be implementing atm, and some work to mark.
11:34:41 <shapr> heh, ok
11:34:53 <shapr> feel free to email, msg, etc any ideas my way
11:35:06 <shapr> I'd really like to see this problem beaten
11:35:25 <shapr> since imho it separates Haskell from Erlang/Python/etc
11:35:30 <Heffalump> I should open up individual pages on my personal wiki
11:35:35 <Heffalump> lambdabot?
11:35:45 <shapr> ?
11:36:05 <Lor> shapr, that's the price you get for static typing.
11:36:09 <Heffalump> oh, the problem separates it, right.
11:36:20 <shapr> Lor: there must be some way around it...
11:36:28 <Lor> Maybe, but no one's found it yet.
11:36:37 <Heffalump> Lor: it's an implementation issue really.
11:36:43 <shapr> that's not a good reason :-)
11:36:48 <Heffalump> There's no fundamental reason that runtime loading of code should force separate type tables to be used
11:36:51 <shapr> we're wizardly hackers! we find solutions!
11:37:11 <Lor> heffalump, how about type safety?
11:37:20 <shapr> right, can we safely update a type table at runtime?
11:37:35 <shapr> if not, can we build a new type table, and then safely merge two type tables?
11:37:41 <shapr> hi lostben, are you lost?
11:37:45 <Heffalump> Lor: what kind of type safety do you want?
11:38:04 <lostben> shapr: quite often, yes.
11:38:13 <Heffalump> runtime loading is already type unsafe, since the thing doing the loading can make a mistake about what type the thing being loaded is
11:38:13 <Lor> Heffalump, the safe kind. :)
11:38:30 <shapr> lostben: is this a place you were hoping to be lost in?
11:38:45 <Lor> Heffalump, yeah, that's why I don't think Haskell really supports true dynamic loading.
11:38:50 <Lor> This might be of interest: http://citeseer.nj.nec.com/374313.html
11:38:52 <shapr> I suspect I'll understand the issue better once I've finished TaPL
11:39:07 <shapr> Lor: oh that is interesting
11:39:36 <lostben> shapr: this is where i chill out, usually halfway doing some math work
11:40:05 <shapr> have you been here to #haskell before?
11:40:07 <Lor> I've delved through every possible paper that even remotely deals with dynamic loading and reflection in a statically typed setting. Believe me, there is _no_ existing satisfactory solution.
11:40:20 <shapr> Lor: okay, what's a satisfactory solution that does not exist?
11:40:28 <Lor> Otoh, my standards for "satisfactory" may be a bit high...
11:40:35 <lostben> shapr: not really, a couple of times this week.  just started out learning haskell.  yourself?
11:40:42 <shapr> Lor: knowing about a lot of things that didn't work means you know where to not step...
11:40:47 <Lor> shapr, essentially you have to integrate the type checker with the runtime environment.
11:40:53 <shapr> lostben: I've been slowly autodidacting Haskell for awhile now
11:41:00 <shapr> Lor: is that difficult?
11:41:09 <Lor> Funnily enough, Java has it right, kind of. Its type system just plain sucks.
11:41:14 <shapr> TH does something like that?
11:41:30 <Lor> th?
11:41:34 <shapr> lostben: if you have any questions about Haskell, I'll do my best to answer them, feel free to ask me.
11:41:37 <shapr> Template Haskell
11:41:39 <Heffalump> so what's wrong with the Java solution? The fact that it's all dynamically typed?
11:42:09 <Lor> Heffalump, no, that's the right thing about it. The wrong thing is that there's no polymorphism or other nifty things that we want from a type system.
11:42:28 <Lunar^> Waow... is ([] Char) different from ([Char]) ?
11:42:31 <lostben> shapr: will keep that in mind, thanks.
11:42:36 <Heffalump> IM what's wrong with using it for Haskell.
11:42:42 <Heffalump> lunart: no
11:42:46 <Heffalump> s/lunart/lunar/
11:43:04 <Lunar^> Heffalump: strange... Dynamics complain because of THIS mismatch !
11:43:20 <Lor> Heffalump, it's just, well, non-trivial.
11:43:36 <Lor> As I said, you have to integrate the type checker in the run-time.
11:59:15 <shapr> @yow
11:59:16 <lambdabot> Join the PLUMBER'S UNION!!
12:07:34 <Lunar^> shapr: I'm using my version of shell-haskell to make a module for GHCi
12:18:08 <slj> @yow
12:18:09 <lambdabot> My polyvinyl cowboy wallet was made in Hong Kong by Montgomery Clift!
12:18:38 <slj> @boing
12:18:38 <lambdabot> Sorry, I don't know the command "boing", try "lambdabot: @listcommands"
12:18:46 <slj> :)
12:19:01 <slj> um
12:19:22 <shapr> hi ski
12:19:27 <ski> hi
12:19:29 <shapr> you were incognito there for a bit
12:19:30 <ski> hi shapr
12:19:51 <ski> yes, i'm connected on my bro's computer
12:19:52 <shapr> Lunar^: what sort of module?
12:20:13 <Heffalump> more off by one than incognito :-)
12:20:14 <ski> and i had a mindlapse about what nick i had
12:20:26 <ski> Heffalump : :=)
12:20:46 <Lunar^> shapr: One that let an instance of GHCi running in the background
12:21:06 <shapr> Lunar^: that sounds interesting... using GHCi for shell scripting?
12:21:30 <Lunar^> shapr: nope.. to allow @ghci to do direct Haskell evals
12:21:45 <Lunar^> shapr: a pretty big security hole anyway
12:22:16 <Heffalump> if you force the type of the expression not to be in IO, it'd not be that much of a security hole
12:22:17 <shapr> oh, a lambdabot plugin... hmm
12:22:25 <Heffalump> especially if you had a monitor thread that killed computations after a bit
12:22:36 <Heffalump> but can you get ghci to report the type?
12:23:00 <Lunar^> Heffalump: :t
12:23:26 <Lor> Then you have to do something about unsafePerformIO
12:23:26 <Lunar^> Heffalump: the monitor thread would send a Ctrl+C after 2 seconds ?
12:23:53 <Heffalump> Lunar^: well, raise an exception in that thread, anyway
12:23:59 <Heffalump> lor: oh, hmm
12:24:04 <Lor> And what about heap overflows?
12:24:13 <Lunar^> Heffalump: I was thinking of using shell-haskell
12:24:20 <ski> hmm, perhaps one can disable some modules ??
12:24:24 <Lor> You can segfault any interpreter just by creating a script that hogs all memory.
12:24:29 <Heffalump> if you only allow a computation to run for 5 seconds, it probably can't overflow the heap either
12:24:34 <Lunar^> Heffalump: not making GHCi part of the lambdabot
12:24:40 <Heffalump> what's shell-haskell?
12:24:51 <Lunar^> launch ::  (Handle -> Handle -> Handle -> IO a) -> FilePath -> [String]
12:24:51 <Lunar^>        -> IO (a, ExitCode)
12:25:01 <Lor> (This, btw, is another one of the problems I'd really like to know how to solve _properly_)
12:25:20 <Lor> In a typed setting, that is. In scheme it's fairly easy.
12:26:02 <Heffalump> what makes it easy in Scheme?
12:26:54 <Lor> In many scheme implementations you have explicit control over the environment in which an expression is evaluated.
12:27:00 <Heffalump> ah, right
12:27:07 <Lor> So you can easily disable all unsafe functionality.
12:27:08 <Heffalump> why can't Haskell implementatiosn provide that?
12:27:31 <Lor> Because first-class _typed_ environments are non-trivial.
12:27:45 <Heffalump> what do you mean by a first-class environment?
12:27:54 <Igloo> You'd probably only have to have a slightly mangled .hi file found first by the ghci people could get at
12:28:09 <Igloo> (to disable uPIO)
12:28:20 <Lor> Heffalump, fully manipulatable in code.
12:29:15 <Lor> Agh, sorry, no time for this discussion right now.
12:32:24 <ski> Lunar^ : what are the 3 Handle's given to 1st arg of launch ? std{in,out,err} ??  what is the FilePath ?
12:32:44 <Lunar^> ski: right, path to binary
12:33:32 <ski> Lunar^ : ??  so it launces up a binary, what then is the IO a for ?
12:33:55 <Lunar^> ski: returning something, like by reading stdout
12:34:27 <ski> Lunar^ : hmm
12:35:04 <ski> Lunar^ : is the IO a an inter-haskell computation that connects to the launched process by pipes ?
12:35:17 <ski> s/IO a/first arg/
12:35:50 <Lunar^> ski: If I understand well, yes
12:36:01 <ski> Lunar^ : ok
12:43:39 <dark> Greeblings
12:44:07 <ski> Greetings  (?)
12:44:08 <Lor> Dark!
12:45:07 <dark> Hello :)
12:45:14 <Lor> I had heard that you visited the channel occasionally, but so far it had only seemed like a legend. :)
12:45:24 <dark> Lor: Wow, I'm legendary :)
12:45:32 <Lor> How's phasefs?
12:45:46 <dark> Dormant.
12:45:56 * ski gotta go diconnect now. 56k modem ...
12:46:13 <dark> I should pick it up again :)  I was reading on LWN about the write barrier patches, that'll make it a lot easier.
12:47:06 <Lor> Write barrier? Some hooks in the kernel?
12:47:38 <dark> It's about the interface between the filesystem code and the block device drivers.
12:48:00 <dark> Some filesystems (like journaling ones, and phasefs) need to be able to say "don't write any of this stuff until you've completed writing that stuff"
12:48:03 <Lor> Ah, right, found it.
12:48:20 <dark> Currently the only option is to not send the commands for "this stuff" until the confirmation is back from "that stuff".  But that's inefficient.
12:48:43 <dark> Also, many devices will lie about when the data is actually on disk :(  I don't think that's solved yet.
12:48:53 <Lor> Um. That's a bit confusing to someone used to the traditional meaning of write barrier.
12:49:31 <dark> Lor: They mean it as a barrier against rearranging write commands :)
12:49:46 <Lor> In GC, a write barrier is essentially just a hook for memory writes.
12:50:20 <shapr> oh, hi dark!
12:50:35 <dark> Hello shapr :)
12:50:46 <shapr> how's the Haskell CGI?
12:51:03 <dark> Lor: It's a fairly odd name for it though :)
12:51:03 <SyntaxPolice> hey shapr
12:51:07 <shapr> hiya SyntaxPolice 
12:51:27 <shapr> Mr Isaac Jones (I still can't believe I forgot your 'real' name at the hotel desk)
12:51:43 <SyntaxPolice> ahaha
12:51:55 <SyntaxPolice> that was funny
12:51:56 <dark> shapr: Doing fine.  I'm doing horrible things with stylesheets now :)  That keeps the html simpler, which keeps the code simpler.
12:51:57 <SyntaxPolice> speaking of that experience, I almost left my laptop at a restaurant yesterday
12:52:01 * SyntaxPolice pokes kosmikus|away
12:52:11 <dark> Are you at a conference now?
12:52:13 <shapr> and slightly embarassing... I couldn't rightly say "look for a reservation for SyntaxPolice"
12:52:27 <shapr> dark: are you using WASH?
12:52:34 <dark> I've had similar experiences... such as when I flew to the US to visit people that I didn't know the real name of.
12:52:47 <dark> The immigration police were happy with a random address though.
12:52:51 <SyntaxPolice> shapr: hehe
12:53:26 <dark> shapr: Nope.  What's that?
12:53:26 <shapr> happily, Mr. SyntaxPolice was standing right behind me, and was able to furnish his 'real' name.
12:53:26 <shapr> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
12:53:26 <shapr> love the WASH logo
12:53:30 <shapr> I met Peter Thiemann, he's a cool guy.
12:53:39 <shapr> dark: you should have been at ICFP, we had a blast
12:53:47 <shapr> Lor was there
12:53:51 <dark> I also looked at HSP but somehow it didn't appeal to me.  I want HTML generation subordinate to the logic, not logic embedded in HTML :)
12:54:12 <shapr> I was pleased to meet Lor in person after having read so many of his posts on c.l.f
12:54:58 <Lor> Wha? "Many"? I only post occasionally.
12:55:12 <Lor> Hm, off for a while. South Park.
12:58:08 * dark is away reading about WASH :)
12:59:02 <dark> Installation (WASH AND GO)
