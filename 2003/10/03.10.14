00:07:02 --- mode: clancy.freenode.net set +b *!23kjhkjf@*
00:11:58 <harsha> prologic hi
00:12:09 <prologic> hi harsha :)
00:12:16 <harsha> :) sup ?
00:12:42 <prologic> eh not much
00:12:50 <prologic> having fun with my wiki implementation
00:19:23 <harsha> Ok.. 
00:19:36 * harsha is lost.. :)) like always
00:20:15 <prologic> http://daisy.ods.org/~prologic/wiki/index.php?wiki=FrontPage
00:20:18 <prologic> :)
00:20:24 <prologic> don't worry I get confused all the time
00:20:26 <prologic> natural :)
00:25:39 <harsha> prologic where are ya from?
00:27:19 <harsha> hmmm.. au?
00:39:23 <Pseudonym> prologic: If it ain't in a declarative language, we don't care. :-)
01:52:23 <prologic> declarative language huh
01:52:25 <prologic> i see ;P
01:52:40 <prologic> harsha, I'm from the sunny state of Queensland in Australia
02:42:26 --- mode: capek.freenode.net set +b *!23kjhkjf@*
02:45:47 <harsha> q
04:08:30 <shapr> prologic: is your wiki written in Haskell?
04:09:56 <prologic> no :)
04:10:04 <prologic> I decided against cgi for portability reasons
04:10:17 <prologic> I'm (not yet) very good at cross-compilation :)
04:10:38 <prologic> it takes quite a lot of effort to even compile my irc services project to freebsd
04:10:48 <prologic> have to use my isp's shell account which takes take on a dialup link
04:11:01 <shapr> oh
04:11:50 <prologic> I do like CGI though believe me :)
04:12:07 <prologic> come christmas holidays I'll pull wiwiwi apart and rewrite it :)
04:14:32 <prologic> how did you want me to commit a patch for wiwiwi anyway ?
04:14:56 <prologic> after you asked me to do so, I created the patch for it, but I don't know where or how to commit it :)
04:15:02 <shapr> oh
04:15:05 <shapr> with darcs!
04:15:06 <prologic> hehe
04:15:19 <prologic> do I have access to commit new changes ?
04:15:34 <shapr> I dunno, have you given me your public GPG key?
04:15:59 * shapr looks
04:16:59 <prologic> lol
04:17:00 <prologic> I don't have one
04:17:09 <shapr> do you know how to create one?
04:17:13 <prologic> geez I need a GPG key now :)
04:17:18 <prologic> I've never had one before
04:17:24 <prologic> never had the need for one :P
04:17:44 <shapr> well, if you create a GPG key and send me the public part of it, I'll add you to the access list
04:17:46 <prologic> no I don't know how to create one
04:18:00 <shapr> then you can do "darcs push --sign --verbose" in the top level of the darcs dir
04:18:18 <shapr> and it'll create the patch and push it to raven.ScannedInAvian.org
04:18:23 <prologic> ok
04:18:33 <prologic> good thing I log everything or I'll forget how :)
04:18:37 <shapr> heh
04:18:39 <shapr> truly
04:18:41 <prologic> neway I didn't change that much really
04:18:49 <prologic> just added horizontal rule, ----
04:18:55 <shapr> I'd like to have hrule
04:18:59 <prologic> I might just wait till the holidays and rewrite it and submit it :)
04:19:03 <prologic> oh ok :)
04:19:07 <prologic> nps then I'll do it this weekend
04:19:23 <shapr> plus I'm always trying to get more people to hook up to the hlibs so there will be more Haskell code there :-)
04:19:33 <prologic> k
04:19:47 <prologic> well soon as I can manage, I'll get you that GPG key
04:19:55 <prologic> I'll definately be adding stuff :)
04:20:05 <shapr> spiffy!
04:22:24 <prologic> hehe
04:22:38 <prologic> anyone written binary functions yet ?
04:23:01 <shapr> what sort of binary functions?
04:23:30 <phubuh> do you mean bitwise? e.g., AND and XOR?
04:23:38 <phubuh> if so, they're in Bits.hs, iirc
04:23:38 <prologic> someone came in here trying to solve an ACM problem, building a prototype in haskell
04:23:59 <prologic> so I thought it'd be fun and wrote functions to convert Integer's to Binary and back, and add two binary numbers together
04:24:06 <prologic> dunno if that's usefull to anyone or not
04:24:14 <prologic> they're represented as a list
04:25:17 <shapr> there's showBin in NumExts
04:25:56 <prologic> oh really ?
04:26:00 <prologic> in the Prelude ?
04:26:02 <prologic> or in hlibs ?
04:26:05 <shapr> Prelude NumExts> showBin 32 ""
04:26:05 <shapr> "0b100000"
04:26:51 <prologic> ahh k
04:26:58 <phubuh> i think i'm going to order one of those hindley-milner shirts this weekend :-)
04:27:00 <prologic> but can you add two of them together ?
04:27:37 <shapr> phubuh: me too
04:28:00 <prologic> Main> addbin [0,1,0,0,0,0,0] [0,1,0,0,0,0]
04:28:00 <prologic> [0,0,1,1,0,0,0,0]
04:28:04 <prologic> Main> bin2dec [0,0,1,1,0,0,0,0]
04:28:05 <prologic> 48
04:30:02 <prologic> dinner bbs
04:30:02 <shapr> no, can't add them
04:30:18 <shapr> I thought there was a binary thingy like 0x is hexadecimal, but seems there isn't
04:30:39 <phubuh> :-/
04:30:41 <phubuh> ocaml has 0b :-)
04:31:17 <phubuh> bin = readBin . show?
04:33:48 <shapr> is there a readBin?
04:44:59 <shapr> hi d33p 
05:13:48 <Lunar^> prologic: You should ask sebc, I think he made some improvements on wiwiwi
05:15:18 <shapr> Lunar^: but the hardware is hiding in Italy right?
05:16:03 <Lunar^> shapr: He went back
05:16:23 <Lunar^> shapr: He just need to get a new broadband connection at his new flat
05:16:58 <Lunar^> damn.. my english is getting worse and worse
05:19:39 <shapr> mon français est pas mieux aussi
05:21:26 <d33p> hey shapr sorry.. i was afk
05:21:34 <shapr> d33p: written any code lately?
05:21:54 <d33p> shapr: mm.. nope.. 
05:23:39 <Lunar^> shapr: My patch against shell-haskell is not reliable
05:24:31 <Lunar^> shapr: waitpid(2) fails sometimes
05:28:37 <shapr> that sucks
05:29:22 <Lunar^> shapr: It fails because the forked process exited too early
05:29:58 <Lunar^> shapr: before the waitforpid call in fact
05:30:30 <Lunar^> shapr: I could always add a sleep(3) (or like) but I don't feel it the nicest way
05:30:38 <shapr> is there a better way?
05:31:25 <Lunar^> shapr: I don't know.. is there any *nix guru ?
05:40:21 <ejt> how do I export an operator such as <+> ?  I get parse error if I just put it inside the normal export brackets
05:41:02 <ski> (<+>) i suppose
05:41:47 <ski> module Foo (foo,(<+>),bar,....) where ....
05:42:25 <ejt> y, thx
05:43:49 <ski> Rogntudjuu !
05:44:32 <ejt> ?
05:44:43 * ski is trying to prove a formula in Predicate logic
05:44:57 <ski> It doesn't work
05:45:05 * shapr disproves himself
05:45:11 * shapr disappears in a puff of illogic
05:45:53 <ski> But the formula seems like it should be true ...  :(
05:46:44 <ski> i even booted up alfa ..
06:16:13 <shapr> I'm beginning to realize that most programmers are not familiar with the lambda calculus
06:16:47 <Lunar^> @prelude hWaitForInput
06:40:22 <Lunar^> shapr: It works ! It was a C mistake !
06:40:43 <Lunar^> shapr: die language without no initialisation detection
06:45:41 <d33p> ski: hm, what is it?
06:59:47 <ski> d33p : the formula ?
07:00:55 <d33p> ok
07:02:37 <ski> (forall x. P x -> (exists y. Q y)) -> (forall x. exists y. P x -> Q y)
07:04:04 <ski> this feels like it should be easy to prove ..
07:04:54 <ski> .. but perhaps i need to invoke raa/lem or something
07:08:21 <d33p> mm, how do i read that? if for all x P(x) is true then there exists y such that Q(y) is true -> .. ?
07:09:05 <ski> (forall x. (P x -> (exists y. Q y))) -> ...
07:09:37 <d33p> oh ok
07:09:42 <ski> the first forall scopes over the implication, the exists scopes over it's implication
07:10:35 <ski> ... and, of course, x and y does not occur free in P,Q
07:13:47 <d33p> um iam probably wasting your time.. but iam interested in the problem, how come the exists y. Q y doesnt involve x? 
07:15:46 <ski> d33p : btw, this is an exercise in a logic course. 'tis just that i still can't seem to figure out how to hoist the exists out of the implication
07:16:29 <ski> P,Q is supposed to be one-place predicates
07:16:35 <d33p> ski: um, if you write it as contraposition, you'll change that particular quantifier.. dont suppose that helps?
07:17:31 <ski> do you mean the whole implication, or one of the sub-implications ?
07:17:38 <d33p> the sub 
07:18:54 <ski> i've hithherto tried to reason constructively.. but perhaps i really need classical reasoning here.  i have thought of contraposition, but not tried it much out yet..
07:19:32 <d33p> cool, i hope you get it out tonight.. i gotta catch some zz's now :-\
07:19:57 <ski> yeah, thanks
08:45:14 <ecraven> can anyone tell me where i can find an introduction to unification algorithms?
08:45:41 <Smerdyakov> What kind? Type checking or theorem proving?
08:48:35 <ecraven> hm.. i am not sure.. i want to find a translation from one tree to another
08:49:57 <zaragata> can anyone very quickly explain what unifications algorithms are used for? (i got curious)
08:50:00 <Smerdyakov> I don't understand what you mean, with respect to unification.
08:50:26 <Smerdyakov> Unification is solving systems of equations of tree structures, basically.
08:50:34 <zaragata> ?
08:50:48 <Smerdyakov> Like Haskell types, for instance.
08:51:07 <zaragata> any concrete example?
08:51:07 <Smerdyakov> Through type-checking, you determine that the types (a * b) and (Int * String) must be equal.
08:51:14 <zaragata> oh
08:51:16 <zaragata> i see
08:51:16 <Smerdyakov> Unification uses that to determine that a is Int and b is String.
08:51:43 <Smerdyakov> It's really trivial and not worthy of an introduction, which is why I asked ecraven what kind of unification he means.
08:52:09 <Smerdyakov> On the other hand, in automated theorem proving, unification is used to choose witnesses for existentials, which is, I'd assume, much more interesting.
08:52:36 <ecraven> (a 3 (b c)) and (1 3 q) should tell me that a=1 and q=(b c)
08:52:47 <ecraven> as an example
08:52:56 <Smerdyakov> Oh. The dead boring kind. :D
08:52:58 <zaragata> hmmm, do you think that could be used, for example, to try to compare two syntatic phrases in different languages? 
08:53:31 <Smerdyakov> ecraven, are you having a problem creating an algorithm that handles that example?
08:53:52 <zaragata> i'm not sure if I explained my self very well... I was thinking about automatic translation using corpora...
08:54:22 <Smerdyakov> zaragata, probably not, unless the languages have identical syntax.
08:54:49 <zaragata> hmm. i see, what i need is the opposite from unification
08:55:58 <ecraven> Smerdyakov: ultimately i want to compare two xml-like syntax trees and find a transformation from one to the other.. is this trivial?
08:56:17 <Smerdyakov> ecraven, yes. Delete one tree and create the other. :P
08:56:18 <ecraven> maybe it seems harder than it is to me :-)
09:02:29 <Smerdyakov> I don't really understand what problem you are trying to solve.
09:05:27 <zaragata> which algorithm would you use to make a chess player in haskell? minimax w/ alpha/beta pruning?
09:11:13 <zaragata> and which type to represent the board? 
09:12:14 <Smerdyakov> You'd use whatever you use in any other language, run through the IO monad as necessary.
09:23:46 <ski> zaragata : opposite of unification ?
09:24:19 <zaragata> (not scientifically speaking)
09:24:39 <zaragata> instead of joining a tree with the same struc and diff content
09:24:49 <zaragata> +/- the opposite
09:25:14 <ski> different structure and same content ?
09:25:30 <zaragata> yep
09:26:13 <ski> (very) *maybe* something like this can be done with higher-order unification ..
09:27:57 <zaragata> that would be interesting, because current translators use very primitive algorithms, like trying to match both texts at word-to-word level.
09:28:23 <zaragata> [tough i'm not an expert on the subject... :-) ]
09:33:41 <ski> HOU can IIRC do things like : unifying (foo (2 * n) (2 * n + 1)) with (f (2 * n)) yields f = (\x -> foo x (x + 1))
09:37:26 <ski> well, gotta go..
09:42:45 <zaragata> has anyone here tried wxHaskell's "BouncingBalls.hs" example?
09:50:08 * earthy has seen it run
09:50:12 <earthy> does that count? :)
09:51:49 <zaragata> yes
09:52:26 <zaragata> does it run smoothly or bumpy?
09:54:09 <zaragata> i have to go, leave your yes/no and i'll check the log later...
15:54:05 <zaragata> hey there, i have a newbie problem
15:54:24 <zaragata> i defined ap2 as ap2 f = f . f
15:54:35 <zaragata> is there anyway to type it so that
15:54:48 <zaragata> ap2 (replicate 3) 0
15:54:51 <zaragata> works?
15:55:32 <Riastradh> @type replicate
15:55:37 <zaragata> ?
15:55:38 <Riastradh> lambdabot?
15:55:40 <Riastradh> lambdabot!
15:55:43 <Riastradh> Noooooo!
15:55:54 * Riastradh mourns for the missing lambdabot.
15:56:06 <zaragata> lol
15:56:20 <zaragata> replicate :: Int -> a -> [a]
15:56:40 <Riastradh> What do you want 'ap2 (replicate 3) 0' to do?
15:57:28 <zaragata> the same as: replicate 3 . replicate 3 $ 0
15:57:53 <zaragata> [[0,0,0],[0,0,0],[0,0,0]]
15:58:36 <zaragata> using ap2 (logically) returns the usual "unification would give infinite type" error
15:59:07 <zaragata> but becaus i'm not sure of what the forall's do, i was wondering...
15:59:59 <Riastradh> I can't think of a way to do that.
16:00:20 <zaragata> :-(
16:02:01 <zaragata> thanks anyway
16:02:03 <dark> Hello!
16:02:10 <zaragata> hello
16:02:32 <dark> I've entered the wonderful world of Haskell CGI programming :)
16:05:06 <zaragata> using which tool?
16:05:24 <dark> So far... just Haskell :)
16:05:30 <dark> But I'm looking at Haskell Server Pages.
16:05:55 <zaragata> how do you run the cgi? apache's mode for haskell?
16:07:19 <zaragata> ... or you don't need it to run a cgi?
16:07:32 * zaragata googles aroun
16:07:35 <zaragata> d
16:08:23 * steveh used closures in Perl at work today.
16:08:24 <Darius> Any executable can be used as a CGI program
16:08:31 <steveh> I wish we could use Haskell ;)
16:08:42 <dark> I just compile it and set apache's ExecCGI option for that directory.
16:09:08 <zaragata> hmm. i though it had to be interpreted. nice.
16:09:11 <dark> Then I have one module that implements the parts of the CGI interface that I need; basically it collects the environment variables and returns a HTTP.Request type.
16:09:36 <dark> I might make an apache-mod-haskell if this turns out to be too slow :-)
16:10:10 <dark> Or I might look at the plugin stuff for the Haskell web server.  I might need to run Apache for other reasons though.
16:10:59 <dark> steveh: I considered using perl but I just can't get over its lack of function prototypes :)
16:12:59 <dark> When generating HTML I really like being able to use a prefix function to generate both opening and closing tags for an element.  I've been playing around with PHP and there you keep having to keep track of closing tags, it's as bad as doing memory management by hand.
16:15:54 <steveh> dark: well, I am temping at this place and someone drops some perl "test" "code" on my lap
16:16:16 <steveh> it's 700 lines, essentially the same 10 lines with a  method name and argument substituted.
16:16:34 <steveh> what kind of twisted world allows that code to persist?
16:16:40 <steveh> :)
16:19:23 <dark> steveh: Can you simplify it? :)
16:19:30 <steveh> i did
16:19:34 <steveh> that's where the closures came in
16:19:34 <steveh> :)
16:20:02 <steveh> though I didn't exploit their closure nature much
16:20:05 <dark> steveh: I remember coming to a new job where they had this webmail application that nobody wanted to touch, it had a bug list of about 100 entries.  I had great fun cleaning it up :)  Being able to cross of several bugs a day gives a feeling of satisfaction.
16:20:13 <steveh> just made a bunch of functions without explicitly defining them all
16:20:32 <dark> steveh: Does perl have proper closures that carry around their environment?  Or just anonymous functions?
16:20:51 <Riastradh> dark, Perl has real closures.
16:21:27 <dark> One thing I'll give perl, it's amazingly fast.
16:23:46 <steveh> dark: proper ones
18:56:43 <Lunar^> Another one to package for hlibs
18:57:46 <Lunar^> Uniform interface to get forms with CGI (including file uploads)
18:58:25 <Lunar^> (ParseC rules)
23:56:20 <shapr> @yow
23:56:20 <lambdabot> Zippy's brain cells are straining to bridge synapses...
23:56:29 <Pseudonym> G'day.
23:56:40 <shapr> g'day Pseudonym 
23:56:41 <shapr> wasup?
23:56:43 * andersca boinces
23:56:52 * shapr hoppar
23:57:20 <Pseudonym> Core dump fixing.
23:57:26 <shapr> excitement?
23:57:51 <shapr> I just read a bunch of bash.org quotes, I think my IQ went down by at least five points.
23:58:55 <Pseudonym> Haven't been doing anything declarative lately.
23:59:09 <Pseudonym> I think my IQ has probably dropped as a result, too.
23:59:28 <Pseudonym> Except that I have been looking at the FP-esque features in the boost library.
23:59:34 <Pseudonym> Makes C++ hacking a bit more fun.
