00:46:32 <Lor> "Graduate degrees are job training, not general education." Is that a common sentiment?
00:49:12 <earthy> depends on the job ;)
00:49:39 <earthy> and on the degree. (isn't a masters a grad degree as well?)
00:50:12 <Lor> I think masters was what was being referred to here.
00:50:38 <earthy> well, in .nl a master's is definitely considered general education
00:50:48 <Lor> Here in .fi too.
00:51:32 <earthy> however, there is *some* bias in the courses after the bachelor's towards either research or business
00:51:54 <earthy> and if biased towards research it's more of job training for research
00:52:33 <Lor> About the same as here, too.
00:52:54 <earthy> so, what you just stated does not, to mee, seem a very common sentiment ;)
00:53:11 <Lor> That was from the backlog.
00:53:54 <Lor> <Smerdyakov> [05:54] Getting dual graduate degrees is very unusual. Graduate degrees are job training, not general education. Employers might even think you're unfocused if you do it.
01:01:40 <earthy> yesh. and then he goes on ignoring Goedel: 20:10:24 <Smerdyakov> Segora, yes. This program would enumerate all proofs in t
01:01:40 <earthy> he formal system until it found one that proved the required fact.
01:04:57 <earthy> using that as a argument that statements cannot hold in a system... just sucks. ;)
01:14:47 <Lor> What was the context? There are decidable logics, of course.
01:18:02 <Lor> Ah, the halting problem.
02:02:16 <shapr> hi stigger 
02:05:31 <stigger> hello
02:09:34 <shapr> what's up?
02:10:49 <shapr> stigger: learning Haskell?
03:05:17 <shapr> yay! my books have arrived!
03:05:48 * shapr dances happily
03:12:21 <shapr> Types and Programming Languages by bcpierce and Conceptual Mathematics - a first intro to categories
03:30:57 <earthy> tapl is good... conceptual maths I don't know
04:07:53 * Igloo is in the middle of tapl
04:07:59 <Igloo> For small values fo middle
04:08:17 <earthy> just the one page in the middle? :)
04:08:41 <Igloo> :-P
04:33:21 --- mode: zelazny.freenode.net set +b *!23kjhkjf@*
04:55:24 --- mode: zelazny.freenode.net set +b *!23kjhkjf@*
05:04:42 <crazney> hi there. i am trying to write a function that takes user input (using do syntax and 'getLine') and then passes it, an returns a data type (defined by type Foo = ((Int, Int), Bar) where Bar is an abstract data type).. anyway, I have a function that passes the input string and thats ok - but I need a way to tell the function that calls it if there was a parse error (so it can ask again).. so currently I was trying to do something 
05:04:42 <crazney> like 'data ResultType = Error | Result Foo'.. but I think thats kind of a bad idea..
05:04:48 <crazney> anyone got any suggestions how I might do this?
05:05:43 * earthy points crazney to Maybe
05:06:19 <earthy> !help
05:07:03 <crazney> earthy: ok, so thats kind of what I was defining with my 'ResultType' yeah?..
05:07:11 * earthy nods
05:07:19 <crazney> can I paste something?
05:07:29 <earthy> go ahead
05:07:34 <crazney> getValidInput =
05:07:34 <crazney>                do
05:07:34 <crazney>                   x <- getLine
05:07:34 <crazney>                   let res = parseInput x
05:07:34 <crazney>                   if (res == Error) then
05:07:35 <crazney>                     do
05:07:37 <crazney>                        putStrLn "That is not a legal input."
05:07:39 <crazney>                        getValidInput
05:07:42 <crazney>                    else
05:07:44 <crazney>                     return res
05:07:48 <crazney> so the problem is.. res, which is of type Foo... I don't want to return that..
05:07:55 <crazney> i want to return the type thats inside it..
05:08:17 <Lor> What is inside it?
05:08:19 <crazney> if you get what I mean (like.. it would be Result ((Int, Int), Bar))..
05:08:29 <Lor> Use a case match.
05:08:34 <crazney> I just want to return the ((Int, Int), Bar) part..
05:08:39 <Lor> You treat separately the Error and Result cases.
05:08:42 <crazney> Lor: hrm, i haven't done them before..
05:08:54 <Lor> And in the pattern for the Result, you bind the actual result value to variables.
05:09:11 <crazney> so a case thing can do pattern matching?
05:09:17 <Lor> Yep.
05:09:28 <Lor> What is this program for?
05:09:34 <Lor> I mean, why are you writing it?
05:09:42 <crazney> uni
05:10:06 <Lor> It's an exercise? And they haven't taught you about matching and patterns yet?
05:10:09 <earthy> well, you're almost there. ;)
05:10:28 <crazney> Lor: yeah, its an exercise.. well they've tought us about pattern matching, yes - but not about case statements.
05:10:42 <crazney> we've done matching on functions and guards..
05:10:45 <Lor> Ah.
05:11:00 <Lor> You could write an auxiliary function to which you pass the "res".
05:11:25 <Lor> And that function could then do the matching.
05:11:53 <crazney> but it would still have to return something.. and I wouldn't know what to return in the case of an Error..
05:12:15 <Lor> Couldn't it just do what your error handling does currently?
05:12:25 <Lor> Ie. try again.
05:12:33 <crazney> oh yeah.. and then call getValidInput.. yeah that could work
07:18:25 <thornber> does anyone have a minute spare to point out what's wrong with this little (15 line) program ?
07:18:30 <thornber> http://people.sistina.com/~thornber/parse_play.hs
07:19:01 <thornber> I think I'm not understanding the error message from ghci
07:25:41 <earthy> ERROR "parse_play.hs":11 - Illegal type in class constraint
07:25:49 <earthy> that the one (this is hugs, btw)?
07:26:13 <thornber> y
07:26:22 <thornber> ghci's error is more complicated
07:26:44 <thornber> I'm sure I've done something stupid
07:31:30 <earthy> try changing line 11   to  instance Monad MyParser where
07:35:39 <earthy> your problem is in the kindedness of the Monad class and the MyParser instance you were trying to provide
07:35:43 <earthy> the 
07:36:15 <earthy> Monad class has kind  * -> *   (it takes a type to a monad of that type)
07:36:28 <earthy> the MyParser datatype has kind * -> * as well
07:36:37 <earthy> however, the  (MyParser a) datatype has kind *
07:36:47 <earthy> so you cannot make  (MyParser a) an instance of Monad
07:37:00 <earthy> as the kinds do not match
07:37:18 <esap> Monad is a property of type constructors, not of types.
07:38:00 <earthy> esap: type constructors only serve as indicators of types, no?
07:38:12 <earthy> or am I now misreading page 50 of the haskell report?
07:38:48 <thornber> hmm, I think I'm going to have to digest this slowly, thanks for the help
07:38:52 <esap> earthy: what you mean "indicators"? in 'Maybe Integer', 'Maybe' is a type constructor and Integer is a type and 'Maybe Integer' is a type.
07:39:28 <earthy> well, if you wish to distinguish between type constructors and types, yeah, okay.
07:39:39 <earthy> I'd consider Maybe a polymorphic type, myself...
07:40:04 <earthy> but I've been steeped in higher order typed lambdacalculus too much before starting to do haskell
07:40:08 <esap> earthy: it is. But 'Maybe' as such is not a type.
07:40:36 <earthy> it is not a type of kind *
07:40:54 <esap> Types always have kind '*'.
07:41:13 <earthy> then I'm still misreading page 50 of the haskell report. :)
07:41:53 <earthy> which quite clearly states  `The class and type must have the same kind; this can be determined using kind inference as described in Section 4.6'
07:42:37 <earthy> now, if something of kind * -> * is not a type, then that sentence does not make sense.
07:44:48 <earthy> but I'm no expert on Haskell, so do enlighten me. :)
07:46:32 <esap> Hmm.. page 49 seems to say "The type (T u1 ... uk) must take the form of a type constructor T applied to simple type variables u1, ..., uk"
07:46:51 <esap> Ok, I guess if k=0, you might call T a type.
07:48:21 <esap> And that definion doesn't seem to refer to the kind of 'T u1 ... uk' at all.
07:51:18 * earthy reads page 42 and sees: `The Haskell type system attributes a type to each expression in the program. In general, a type is of the form \forall u1,...,un . cx => t   where each of the universally quantified type variabels ui that is free in cx must be free in t
07:51:41 <earthy> '
07:52:28 <earthy> anyway, time to go home
08:22:56 <Segora> re
08:28:24 * kosmikus prefers to call everything a type, regardless of its kind
08:29:39 <Segora> well, there also are strange types that aren't kind
08:29:42 <Segora> *duck*
08:30:37 <kosmikus> :)
08:32:12 * esap wonders about whether should be a concept of type destructor.
08:32:40 * esap s/whether should/whether there should/
08:33:06 * Riastradh duals esap with a large comonad.
08:33:19 <kosmikus> would be nice to have definable type destructors, i.e. views
08:33:38 <Riastradh> esap, you're always trying to find the duals of things...are you a Taoist or something?
08:33:47 <esap> kosmikus: you mean views are that? Those views that were once a proposal for Haskell?
08:33:58 <kosmikus> oh no, sorry, I meant value destructors, not type destructors
08:34:23 <esap> riastradh: heh, no, but I have a principle that if I cannot find a dual or an inverse for something, then I don't understand the concept well enough.
08:37:01 <vajrabum_> So you're only planning on ever understanding those types/objects/functions for which it is possible to construct a dual or inverse. Have I got that right?
08:37:08 <esap> riastradh: it's also related to the fact that I'm actually trying to design a language. And adjunction and duality are symmetries that are useful for checking whether your design is good.
08:37:56 <kosmikus> as I see it, type constructors are nothing but invertible type-level functions, so I guess you could call the inverses destructors
08:38:31 <ecraven> hm.. is cons the inverse of car/cdr?
08:39:10 <esap> kosmikus: there is a difference between a constructor and a function: Constructors do not (by themselves) reduce to anything, even if you apply it to all arguments.
08:41:31 <kosmikus> Yes, the condition is a bit stronger than being invertible ...
08:42:54 <esap> kosmikus: you might think of it in another way as well: you could think of functions as a composition of a (sequence of) destructor(s) and a (sequence of) constructor(s).
08:44:00 <kosmikus> I think that is not enough
08:44:45 <kosmikus> how would you write \(x,y) -> (y,x) in that way?
08:47:56 <esap> app x . (,y) . \ x . \y  or something like that. Not a simple thing to do I guess.
08:48:38 <esap> Actually, I guess that function is one of the things that might be required to be primitive [since it's the inverse of recursion].
08:49:15 <Riastradh> A function is a combination of a constructor and a destructor: it is a translator.
08:52:18 <sandos> j debian
08:54:49 <esap> There are actually special cases of functions that include only the destructor part (e.g. a function with type 'a -> _|_'). But what is the corresponding for constructors?
08:56:18 * esap thinks it's the 0-argument constructor, i.e. constants.
10:09:15 <shapr> geez, too much bouncing
12:53:53 <Joopdod> are there any e-mail functions in Haskell?
12:55:40 <Smerdyakov> What do you mean by that question? A language that needs special support for e-mail is a poor language indeed.
12:56:33 <vajrabum_> There is free haskell code out there that talks to IMAP, POP and SMTP if that's an answer to your question.
12:56:43 <vajrabum_> It may not do what you want though.
12:56:49 <Joopdod> Well, I am doing some CGI programming in Haskell, and I wanted to know whether there is a function with type String->MayBeIO() that sends mail. 
12:57:03 <Lunar^_> Joopdod: You should look at WASHMail
12:57:11 <Lunar^_> Joopdod: There's some MIME header problems though
12:58:18 <Lunar^_> Joopdod: I've fixed some of them... I need to send a patch to the author
12:58:59 <Joopdod> Is there a website for that? I can't find it when searching on WASHMail:?
12:59:26 <Joopdod> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
12:59:29 <Joopdod> never mind
12:59:38 <Segora> btw. is there a working implementation of a MIME-decoder?
13:01:43 <Lunar^_> Yes
13:01:51 <Lunar^_> MailParser.hs in WASHMail
13:02:01 <Lunar^_> No sorry
13:02:12 <Lunar^_> It doesn't decoded MIME, only mail headers
13:03:04 <Joopdod> It's probably a stupid question. But why is there a makefile with the WASHMail package? Doesn't it work with JUST the code?
13:20:25 --- mode: jordan.freenode.net set +b *!23kjhkjf@*
15:12:42 <sandos> j python
15:20:45 <Riastradh> Traitor!
17:14:05 <o3> re
17:31:26 <blackdog> g'day ozone
17:42:23 <o3> hey big man
17:42:51 <o3> how goes it?  killed your flatmate yet?
17:46:23 <seunosewa> what do i need to consider in possible implementation of a dynamic website with a fynctional language?
17:52:33 <shapr> seunosewa: seen WASH?
17:52:48 * shapr goes off to sleep
18:40:27 <Pseudonym> @yow
18:40:27 <lambdabot> Is this where people are HOT and NICE and they give you TOAST for
18:40:27 <lambdabot>  FREE??
19:00:57 <blackdog> o3: nah, he gave me austrian breakfast this morning, and i spent the weekend at the beach. I'm all sweetness and light.
19:02:15 <o3> blackdog: as long as an austrian breakfast is a good thing ...
19:06:09 <blackdog> o3: you're a disturbed and disturbing individual
19:07:22 <o3> blackdog: candy bars!!
19:07:58 <Pseudonym> Austrians have candy bars for breakfast?
19:08:40 <blackdog> and mushrooms, and green leafy vegetables...
19:08:53 <o3> Pseudonym: that's how the kangaroos have so much energy to bounce everywhere, dontchaknow
19:09:34 <Pseudonym> Ah, that explains it.  You need lots of energy to play a didgeridoo in lederhosen.
19:09:57 <o3> now you're getting it, pseudonym
19:10:26 <Pseudonym> Why did I not find that encouraging?
19:10:35 <Smerdyakov> All right, here's a question for you white guys out there.
19:10:57 <Pseudonym> How do you know we're white, then?  Hmmm?
19:11:00 <Smerdyakov> Do you ever get the suspicion that Asians at Asian restaurants cook your food at a lower spicyness level than you requested?
19:11:12 <Pseudonym> It depends on the restaurant.
19:11:53 <Pseudonym> Most ethnic restaurants gear their menus to the locaal palette.
19:12:15 <Pseudonym> It can be hard to find one that doesn't.
19:12:26 <Smerdyakov> Well, they always ask surprised when I ask for level 20 out of 20, and then often I can barely taste the spicyness.
19:12:36 <Smerdyakov> (at one particular place)
19:13:57 <Pseudonym> Which area of Asia are we talking about?
19:17:20 <Smerdyakov> Maybe Thai
19:17:24 <Smerdyakov> It's called "Satay House"
19:18:21 <Pseudonym> So probably random Souht-East Asian.
19:18:31 <Pseudonym> Kinda Thai, kinda Malaysian, kinda Indonesian.
19:19:13 <Pseudonym> And you're complaining that the spice level isn't authentic?  Or it just isn't what you wanbted?
19:22:27 <Pseudonym> Or that they give you less spice than non-caucasian patrons?
19:23:02 <Smerdyakov> Well, I can barely taste it, and I can at most Thai places.
19:23:37 <Smerdyakov> So not what I wanted, and maybe not authentic.
19:24:07 <Pseudonym> I've found, for example, that it's hard to find Tom Yum which isn't sweet.
19:24:27 <Pseudonym> Sugar, of course, completely ruins the taste.
19:24:42 <Pseudonym> And bear in mind that I live much closer to Thailand than you do.
19:25:17 <Pseudonym> There are a lot of South-East Asians in Australia, which is unsurprising since South-East Asia is just up there a bit.
19:25:29 <Smerdyakov> I bet there are more in California. :D
19:25:39 <Pseudonym> I bet there aren't.
19:25:49 <Pseudonym> OK, maybe Thais.
19:25:53 <Pseudonym> But not, say, Malaysians.
19:26:11 <Smerdyakov> I have known several Malaysians in Pennsylvania.
19:26:20 <Smerdyakov> Factual evidence defeats your flimsy arguments.
19:26:37 <Pseudonym> Well I've known several black African-descended people in Melbourne.
19:26:45 <Pseudonym> They're still rare.
19:26:54 <Pseudonym> And there are more of them in California.
19:31:33 <Pseudonym> Bow before my superior anecdotes, mortal!
19:31:55 <Smerdyakov> I know someone who knows someone who knows someone who knows the first guy.
19:32:06 <Pseudonym> Touche.
19:32:21 <Pseudonym> Well I borrowed his lawn mower!
19:33:21 <Smerdyakov> It was not a lawn mower. It was the physical manifestation of hope.
19:33:42 <Pseudonym> Oh, that explains a lot.
19:35:58 <Pseudonym> Lunch, I think.
