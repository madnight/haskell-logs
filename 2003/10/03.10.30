01:45:58 <CowGirl> anyone know anything about FTP?? im trying to transfers files,  but its just staying in the queue..
03:01:17 <shapr> good morning #Haskell!
03:01:32 <shapr> hi htodd, learning Haskell?
03:05:07 <Lunar^> Hello shapr 
03:07:21 <shapr> bonjour Lunar^ 
03:07:25 <shapr> wazzup?
03:16:17 <Lunar^> shapr: I'm ready to do today's course
03:16:45 <Lunar^> shapr: Graphics.HGL works on all boxes
03:20:42 <shapr> yay
03:55:27 <ibid> hmm, is p >>= fail s = fail s true for any monad?
03:55:49 <ibid> if not, why not?
04:05:17 <Darius> Well it doesn't type to start with, then shutDownReactor >> fail "bad" is definitely not the same as fail "bad"
04:15:08 <ibid> i meant p >> fail s, of course
04:15:17 <ibid> yeah, that's a point
05:33:40 <prologic> hi guys! :)
05:35:29 <prologic> hi phubuh :)
05:35:34 <phubuh> hey prologic
05:35:39 <prologic> how's code ?
05:36:25 <phubuh> I've been writing a bunch of C :/
05:36:58 <prologic> lol
05:37:02 <prologic> yuck!
05:37:14 <phubuh> indeed
05:37:37 <phubuh> I'm familiarizing with GStreamer (http://www.gstreamer.net/); I'm planning on writing some bindings to Haskell
05:37:40 <prologic> what's your experience with programming languges ?
05:38:13 <prologic> hmm cool
05:39:11 <prologic> hrmm can the gst-player play dvds ?
05:41:59 <phubuh> well, I started with C64 BASIC when I was like 5, starting playing with QBASIC when I was like 6 or 7, started with C when I was 10 or so, learned Perl shortly thereafter, C++, Python, PHP, Java, Scheme, Common Lisp, Smalltalk, SML, Objective Caml, Haskell, and here I am...
05:42:03 <phubuh> Yes, I think so
05:59:17 <emu> is there a way to run ghci in emacs?
05:59:32 <emu> or use emacs as an ide
05:59:47 <phubuh> try http://www.haskell.org/pipermail/haskell/2001-July/007556.html
06:11:41 <prologic> well good
06:11:49 <prologic> then you might help me decide something
06:11:55 <prologic> I know over 15 languages myself :)
06:12:02 <prologic> though don't use any of them much anymore
06:12:38 <prologic> What language would you recommend to teach a 13-year old younger brother who is interesting in programming and has only limited knowledge of GWBASIC from school recently. ?
06:14:09 <phubuh> hmm, python maybe?
06:14:22 <prologic> lol
06:14:24 <prologic> are you serious ?
06:14:28 <phubuh> http://www.vpython.org/ is also cool :)
06:14:30 <phubuh> yeah
06:14:40 <prologic> I was thinking perhaps some BASIC type language for linux/dos/win32
06:14:47 <prologic> something at least that supports a few platforms
06:14:53 * Darius typically recommends Scheme for complete beginners to programming.
06:14:58 <prologic> I think euphoria might be a bit complicated
06:15:03 <prologic> Scheme huh
06:15:09 <prologic> don't forget he's only 13
06:15:14 <Darius> So?
06:15:23 <prologic> and if he's going to get anywhere, then he's going to have to learn the hard way like me
06:15:39 <prologic> so Scheme hrmm :)
06:15:41 <prologic> I'll look at it
06:19:05 <emu> Squeak
06:19:14 <emu> more neat things to play with
06:19:30 <prologic> the language Sqeak ?
06:19:32 * emu is a bit rusty on Haskell -- how do I go about using GHC.Base.id in a program ? =) I wouldn't mind importing it either
06:19:36 <prologic> Squeak
06:19:36 <emu> prologic: yah
06:19:40 <Darius> Smalltalk
06:19:40 <prologic> ah k
06:19:45 <emu> squeak.org
06:19:48 <prologic> see this is my very problem
06:19:56 <prologic> so many different people would recommend difference languages
06:20:00 <prologic> including my own profressors :)
06:20:06 <Darius> Squeak is an implementation of Smalltalk.
06:20:39 <Darius> Smalltalk has the benefit that one of it's early goals was to be used with children.
06:20:57 <prologic> ahh k
06:21:01 <prologic> then I'll look at it
06:21:30 <Darius> emu: id is a Prelude function
06:21:55 <emu> oops
06:22:03 <emu> or `GHC.Base.id', imported from Prelude
06:52:21 * pl_zzzz is away: gone to bed
07:06:40 <shapr> @yow
07:06:40 <lambdabot> Look DEEP into the OPENINGS!!  Do you see any ELVES or EDSELS...
07:06:40 <lambdabot>  or a HIGHBALL??...
07:07:54 <kosmikus> hi shapr
07:10:17 <kosmikus> GHCiModule in lambdabot?
07:57:35 <shapr> hi kosmikus, and no
07:57:40 <shapr> mostly because it's insecure
07:57:46 <shapr> I could limit it to admin privs
08:00:23 <kosmikus> I see
08:01:31 <kosmikus> would have been fun, though
08:14:10 <earthy> `fun'. ;)
08:14:47 <earthy> for sufficiently sick values of fun. ;)
08:21:14 <tomas_> can I get help with a haskell problem?
08:21:38 <ski> what is your problem ?
08:22:02 <tomas_> my function dosn't work :)
08:22:09 <ski> hehe :)
08:22:26 <ski> elaboration, please ...
08:22:46 <tomas_> hmm
08:22:53 <ski> type error or wrong answer or run-time error ?
08:23:05 <tomas_> type error
08:23:13 <ski> or design problem
08:23:15 <ski> ok
08:23:50 <ski> what is the function supposed to do ?  and what is the error message ?
08:24:16 <tomas_> ill pate the error message
08:24:20 <ski> ok
08:24:27 <tomas_> *** Expression     : listRoutes x destin (depart : illegalBs) ((y,z,d,depart) : ps) (listNext depart ((a,b,c,d) : ps))
08:24:30 <tomas_> *** Term           : listRoutes
08:24:33 <tomas_> *** Type           : Bstop -> Bstop -> [Bstop] -> [Path] -> [[Route]]
08:24:35 <tomas_> *** Does not match : a -> b -> c -> d -> e -> f
08:25:32 <tomas_> the line in the function is: map (\(x,y,z) -> (listRoutes x destin (depart:illegalBs) ( (y,z,d,depart):(a,b,c,d):ps)) (listNext depart ((a,b,c,d):ps)))
08:25:43 <ski> listRoutes wants 3 arguments, but you are giving it four
08:26:01 <ski> (or five ??)
08:26:06 <tomas_> listRoute wants five
08:26:11 <tomas_> =s
08:26:23 <tomas_> listRoutes :: Bstop -> Bstop -> [Bstop] -> [Path] -> [[Route]]
08:26:28 <ski> err, it wants four, but you give it five, sorry
08:26:35 <tomas_> yes ok
08:26:37 <ski> four !
08:26:51 <tomas_> yes four my fault
08:26:51 <ski> Bstop,Bstop,[Bstop],[Path]  is four args
08:26:56 <tomas_> yes
08:27:25 <ski> so what is the "(listNext depart ((a,b,c,d) : ps))" for ?
08:28:10 <tomas_> thats the function map puts on every element
08:28:18 <ski> should you modify listRoutes to take five instead ? or should you use that expression somewhere else ?  (or should it be removed ? probably not that)
08:28:35 <ski> hm
08:29:35 <ski> tomas_ : hej, du är på dtek, ser jag :)
08:29:42 <tomas_> :)
08:29:45 <tomas_> hej
08:30:28 <ski> tomas_ : jag läser på GU ..
08:30:53 <tomas_> ok men på chalmers?
08:31:43 <ski> tomas_ : data-inst. är gemensam för gu och chalmers (åteminstone var det så tills nyligen, hmm  ??)
08:32:07 <tomas_> ok, ingenaning :)
08:32:43 <ski> hm
08:33:54 <ski> in your 'map line' above you are giving just four args to listRoutes, but in the error you give five ?????
08:34:19 <tomas_> yes its weird.. 
08:35:08 <ski> is the 'map line' a modified version, or why isn't the parens matched in the same way in the error message as in your pasted line ?
08:35:40 <tomas_> its not modified 
08:36:08 <ski> your 'map line' doesn't seem to suffer from the problem with giving five args to listRoutes. i could conceively still have other errors...
08:36:15 <ski> weird
08:36:54 <ski> lemme double-check the parens one more time. you can do the same ...
08:37:23 <tomas_> ok
08:37:36 <ski> it's *not* the same code !
08:38:07 <tomas_> ill paste the complete function to you privatly
08:38:59 <ski> in the error, the 4th arg to listRoutes is "((y,z,d,depart) : ps)" but in the 'map line' the 4th arg is "( (y,z,d,depart):(a,b,c,d):ps)"
08:39:04 <ski> ok
08:39:07 <dennisb> here is a nice paste-page you can use: http://paste.msunix.org/
08:40:31 <ski> hmm, i seem to recall http://www.haskell.org/hawiki/HaskellIrcPastePage , now, as well ...
08:41:19 <tomas_> I pasted on http://paste.msunix.org
08:41:45 <dennisb> here is his paste: http://paste.msunix.org/index.php?view=2481
08:43:12 <ski> ok
08:43:20 <dennisb> Ah, the timetable assignment. Shouldn't that be finished by now?
08:43:21 <ski> ah
08:43:36 <tomas_> hmm :)
08:43:37 <tomas_> maybe
08:43:45 <ski> the parens are worng, i think
08:44:35 <ski> you have, like : "map (\(...) -> (listRoutes ..fourArgs..) fifthArg!)", i think 
08:44:59 <ski> you want the "fifthArg" to be the second arg of map, no ?
08:45:09 <tomas_> yes
08:45:18 <ski> so move your parens ... :)
08:45:34 <ski> clear ?
08:45:50 <dennisb> the error message is clear, you call listRoutes with 5 arguments, but it should only have 4
08:46:31 <tomas_> ok
08:47:20 <ski> tomas_ : hint :  "(f a) b" is the same as "f a b" (if "a" and "b" is 'atomical', syntax-wise)
08:47:32 <ski> fine
08:47:50 <ski> does it work ?  (i.e. that error gone)
08:48:49 <tomas_> I got a unexpected :
08:48:53 <tomas_> ;
08:48:54 <tomas_> even
08:49:23 <ski> probably wrongly-indented, or missing ), or something ...
08:49:47 * dennisb guesses missing )
09:09:44 <tomas_> thanks for your help, now it almost works :)
09:09:59 <ski> :-)
09:20:20 <SyntaxPolice> so... I got another can from the mango fairy
09:22:00 * Lunar^ would need to convert a number of seconds since Epoch to ClockTime
09:22:30 <Lunar^> Unfortunately, TOD is not exported by System.Time
09:22:44 <Lunar^> Mhh... sorry it is in fact
09:22:49 <Lunar^> (but this is not standard
09:25:21 <Darius> SyntaxPolice: find out who the mango fairy is and have her send the Bag 'o Money fairy over my way.
09:27:58 <SyntaxPolice> Darius: will do!
09:29:02 <ski> SyntaxPolice : do tell us all who the mango fairy is, when you have found it out ..
09:29:26 <SyntaxPolice> ski: will do.  This can was at work, which kinda rules out my previous theory of my downstairs neighbors
09:30:18 <basti_> hi
09:30:24 <ski> hi
09:30:29 <basti_> :)
09:30:42 <ski> (:
09:40:49 * ski yawns
09:42:24 <basti_> tired?
09:42:47 <ski> a little, yes
09:42:55 <basti_> too much haskell? ;)
09:43:03 <ski> no !
09:43:05 <ski> :)
09:44:06 <basti_> i always get this numb feeling in the head then
09:44:35 <ski> i'm just reading c.l.f, RN
09:45:08 <basti_> clfrn.
09:45:19 <basti_> sounds like a terminal control code.
09:45:29 * ski heh:s
10:34:25 * isomer is away: I'm busy
11:12:25 <harsha123> hello! #haskell
11:12:34 <ski> hi !
11:12:46 <harsha123> hi ski 
11:13:11 <basti_> hi harsha
11:13:31 <harsha123> hello basti_ 
11:51:42 <jemfinch> oops, forgot that Haskell was purely function.
11:51:45 <jemfinch> er, functional.
11:51:48 <jemfinch> my question is moot!
12:05:30 <keir> are there effecient multi-dimensional arrays in haskell?
12:05:38 <keir> (numeric)
12:06:16 <ski> (efficient as in unboxed ?  or just as in IOArray:s ?)
12:06:41 <keir> urm
12:06:45 <ski> (and, do you mean in haskell98 proper, or invluding common extensions ?)
12:06:48 <keir> as in, speedy
12:06:51 <keir> i'm thinking GHC
12:06:54 <keir> whatever it supports
12:07:02 <ski> s/invluding/including/
12:07:25 <keir> i'm going to write a sort of lookahed cardplaying game
12:07:30 <keir> game-tree and all
12:07:42 <keir> but it's a bit different because there's some probability in it
12:08:00 <keir> i'm not sure how to best approach this in haskell
12:09:38 <keir> is the stack fast enough to use it for the tree? or should i build it manually
12:10:19 <keir> maybe ML would be better...
12:17:21 <ski> keir : no, stupid me, of course the unboxed arrays will work in any dimension ...
12:18:07 <ski> keir : http://www.haskell.org/ghc/docs/latest/html/base/Data.Array.Unboxed.html  seems to list what unboxed arrays there are in ghc
12:18:25 <keir> ok, thanks
12:18:53 <ski> so multi-dimensional arrays should be o'kay
12:19:28 <keir> cool. what does unboxed mean?
12:19:36 <ski> keir : you can, of course use ordinary unboxed arrays, if you like. but perhaps you need the speed more
12:20:21 <ski> re. unboxed :
12:20:31 <ski> think of a polymorphic function, like length
12:20:37 <keir> ok
12:20:41 <ski> @type length
12:20:42 <lambdabot> length :: [a] -> Int
12:21:25 <keir> ok
12:21:42 <ski> (in one implementation scheme) this function will be compiled (by a compiler like ghc) to a single chunk of machine code
12:22:09 <ski> this code can be called with lists of every possible conceivable element type
12:22:22 <ski> but, it does the same thing regardless
12:22:32 <ski> namely : compute the length of the list
12:22:33 <keir> ok
12:22:51 <ski> now : how is the list stored in the memory
12:23:38 <ski> we might think of a (nonempty) list as contianing the element, and a memory address of the rest of the list
12:24:05 <keir> linked list
12:24:09 <ski> but an element can take varying amouts of space, depending on the type of the element
12:24:12 <ski> exactly
12:24:30 <keir> so unboxed arrays are just flat chunks of memory?
12:24:49 <ski> so the obvious way to solve this is to store only a pointer to the element in the list
12:24:52 <ski> same with arrays
12:24:54 <ski> yes
12:25:13 <keir> ok
12:26:39 <ski> if you know some C, you can think of the boxed case like a (void *), except we know more that in C, namely e.g. we know is specific instances what the type is, and we know that all elements in the array is of the same type, and so on ...
12:26:56 <keir> ok
12:27:01 <keir> i know c
12:28:56 <ski> so, to get to the point, unboxed representations are optimisations for some common situations with element types (e.g.), often in cases where the boxing is clearly a noticable overhead, for at least some speed-demanding programs
12:29:14 <ski> so
12:30:28 <ski> you can use ordinary arrays, but if you really feel (or better, discover, using a profiler, or other means) you need extra speed, ghc provides unboxed representations for some things
12:30:49 <keir> perfect
12:30:54 <keir> thanks for the help, but now i gotta run
12:30:56 <keir> midterm at 8pm
12:31:13 <ski> (there is another, orthogonal issue with mutable vs. immutable arrays)
12:31:14 <ski> ok
12:31:19 <ski> bye keir
13:15:03 <pimpbot5001> hi, is anyone in here a GHC guru?
13:15:16 <pimpbot5001> i have some performance questions concerning the FFI
13:15:28 <ski> Darius or Heffalump perhaps ??
13:15:59 <ski> Chilli seem not to be here
13:16:31 <pimpbot5001> the gurus would be british or aussie i presume
13:16:49 <pimpbot5001> but it's probably not too late there yet
13:16:54 <ski> if you want, you can state your question anyway. perhaps someone here can answer or give a hint/clue ...
13:17:24 <pimpbot5001> ok, well im wondering how efficient 'mallocForeignPtr' is
13:17:40 <ski> hmm
13:17:49 <ski> i guess it calls malloc in c
13:17:54 <pimpbot5001> or rather, is it much more costly than just constructing a new box
13:18:00 <pimpbot5001> hmm it's not supposed to
13:18:31 <pimpbot5001> i believe alloca and mallocForeignPtr grab bytes from the Haskell heap
13:18:41 <pimpbot5001> 'new' calls the C malloc
13:19:20 <jameson> unboxed lists: These really are flat arrays? So when I force a list to be unboxed (however that is done in Haskell, I forgot), it will copy all of its elements into a contiguous region and do all the nasty re-alloc stuff if I try to append?
13:19:44 <ski> jameson : no
13:19:47 <pimpbot5001> hmm ive never heard of an unboxed list
13:20:21 <ski> jameson : i was just taking a (polymorphic) linked list as an example of why boxing
13:21:28 <jameson> ski: OK, sorry. Thanks for the clarification!
13:21:36 <ski> jameson : (well, i suppose nothing hinders a sufficiently smart compiler (SSC) to optimise it into unboxed arrays, in the cases that there is no other clashes ...)
13:23:56 <jameson> Are there ever instances in which such an SSC would do the stuff I mentioned above? I would expect this only to happen for explicit arrays, but cases where such a transformation could help (and perhaps statically be shown to help) seem conceiveable to me...
13:24:37 <ski> pimpbot5001 : hmm, (looking through FFI report), mallocForeignPtr seems to not allocate from the main haskell storage heap, anyway. i took that as it (in the FFI C case) probably alloced from the C heap, but that needn't perhaps not be the case
13:26:14 <ski> jameson : i dunno. it doesn't seem exactly trivial to detect when one can perform such an optimisation (to make a big understatement)
13:27:17 <jameson> ski: Well, we obviously can't do it in the general case. I guess one would have to examine this more closely to see whether it could be worth the effort.
13:27:54 <ski> pimpbot5001 : hmm, by "box", you mean ... ?
13:29:56 <ski> jameson : mm
13:31:37 <jameson> I wonder if that could be blown up into a thesis topic, but I think there's more intereting stuff left to be done.
13:32:45 <jameson> By the way, is there a "proof assistant" or similar static analyser for Haskell like what they (presumably) have for Clean (to allow properties of functions to be proven)?
13:33:26 <basti_> oh we had that yesterday or the day before
13:33:36 <basti_> a guy here from the chan is working at something like that
13:33:41 <basti_> with HOL
13:34:33 <ski> (perhaps related : i wonder if one could make a system of defaulty-unboxed algebraic datatypes to work, with perhaps an explicit pointer tycon for handling sharing and cycles ...   (think similar to the bit-stream-encoding of binary trees))
13:35:17 <ski> basti_ : nice, got any link ?  or perhaps i should look up the logs .. ?
13:36:24 <basti_> hmmmh
13:36:28 <basti_> i guess this is better
13:36:34 <basti_> he said it was his thesis
13:36:51 <basti_> i dont remember the nick though
13:36:59 <ski> :(
13:37:06 <jameson> ski: I think a more general thing to examine along these lines would be to see how well types and representations can be separated (in order to keep this as transparent as possible to the programmer).
13:37:20 <pimpbot5001> ski: here's what im getting "although it may be implemented differently internally. You may not assume that the memory returned by mallocForeignPtr has been allocated with C's malloc()."
13:37:28 <pimpbot5001> from http://www.haskell.org/ghc/docs/latest/html/base/GHC.ForeignPtr.html#mallocForeignPtr
13:38:01 <ski> jameson : umm, do you mean, like, separation into type (the what), and representation (the how) ?
13:38:14 <jameson> basti_: That sounds pretty cool, though! I've only seen these things on toy languages so far, but it would be very cool to have it for a real one.
13:38:55 <jameson> ski: In a way, yes. Types being the stuff Domain Theoreticians figure out, and representations being the stuff the Engineers figure out (conceptionally speaking).
13:39:10 <basti_> I think the possibilities are amazing
13:39:35 <basti_> that would be for computer science what the pocket calculator / computer was to engineering
13:39:59 <ski> pimpbot5001 : yeah, it says something similar in the FFI spec ("It is *not* guarranteed that the block of memory was allocated by MarshalAlloc.malloc, so MarshalAlloc.realloc must not be applied to the reulting pointer." page 15)
13:42:21 <jameson> basti_: Thing is, pocket calculators were easy to use. I'd imagine that it would take a _very_ long time for this to become popular and have a huge practical impact-- recall that most programmers are primarily taught imperative languages with many impure and nasty features. Getting them (a) to give up their style of thinking and (b) to learn the syntax and semantics of higher-order logic won't be as easy as handing out pocket calculators.
13:42:55 <jameson> And by "them" I include myself, as my thoughts aren't pure and I rarely prove properties of my programs.
13:43:02 <ski> jameson : i seem to recall browsing through some paper which seems to be related to my idea : it is a type system for intermediate code in a compiler, so it is about representation (the how). it has explicit type and operations for reference/pointer and dereferencing, etc. also it has a product/pair type which is a type of "memory adjecency" (spelling ?) ...
13:43:53 <jameson> basti_: I'd agree, though, that it would be a very good idea to use such a program, if available.
13:44:27 <basti_> hmm
13:44:30 <jameson> ski: Do you happen to remember who the paper was from?
13:44:40 <basti_> I think this can be done by practice...
13:45:01 <ski> jameson : not at the moment, lemme search a little, ok ?
13:45:14 <basti_> i mean im not that much into proof systems (atm hearing a lecture though) but I think any decent programmer would have the skills
13:45:20 <jameson> ski: Sure, thanks! :-)
13:47:49 <jameson> basti_: The biggest problem for me is always to be "reasonably" sure that I've listed all of the important axioms, and left out the ones that I don't want to depend on (when I try do that stuff in my head, that is-- I don't have a system for that). A friend of mine is working on a dynamic system (for Java) which tries to estimate these axioms, but it always figures out ones that should be considered implementation details (and has trouble with ones that
13:49:07 <jameson> I guess one would want to specify axioms on abstract types (type classes in the case of Haskell) and prove them for the concrete ones in practice.
13:49:38 <basti_> whooooo.
13:49:45 <basti_> yes.
13:50:19 <basti_> hmm
13:50:36 <basti_> do you mean like: the program tries to figure out the "monad laws" (for example) by itself?
13:52:37 <ski> jameson : it could have been http://citeseer.nj.nec.com/572095.html, i don't remember exactly, 'twas some time ago i saw it. this paper at least seems to be about the same issue/idea ..
13:53:39 <jameson> basti_: That's an excellent example: The Monad type class doesn't enforce these. One would want to specify them for the abstract class and show that all concrete monads obey them (as such, they could be used to justify certain compiler optimisations as well).
13:53:44 <ski> jameson : you aware of that it looks like a part of your long mesg to basti_ above seem to have an eaten end ?
13:53:45 <jameson> ski: Thanks!
13:53:58 <jameson> ski: No, it arrived fine here :-/
13:54:21 <jameson> I forgor that there are problems with that on occasion...
13:54:26 <ski> jameson : (namely it ends like "... details (and has trouble with ones that")
13:54:53 <jameson> "...and has trouble with ones that are important)", is what it was supposed to end in.
13:55:09 <basti_> jameson actually we three think of the same thing then
13:56:08 <ski> jameson : yes, one really want to specify laws (e.g. as some sort of type) in type classes, and then, in the instances of these classes, make the implementations/objects-of-law-type be the proof of that law, for that specific instance :)
13:57:58 <ski> jameson : (so that paper is, partly, about another use for ordered logic, than Lambek calculus in lingustics)
13:58:49 <Smerdyakov> The authors of that paper are the folks I did my undergraduate research with.
13:59:43 <ski> cool !
14:03:48 <Jad> any one got links to haskell socket programing ?
14:05:02 <stratocaster> Hi. Is there any equivalent in ghci to ":e" in Hugs? I've looked some and am pretty sure the answer is "no", but thought I'd try here.
14:05:16 <ski> Jad : there is a little api doc at http://www.haskell.org/ghc/docs/latest/html/network/index.html
14:05:26 <Jad> tnx Ski
14:09:55 <ski> stratocaster : seems so (at least in version 5.02.2)
14:11:59 <ski> stratocaster : also in version 6.0.1
14:12:39 <ski> stratocaster : perhaps one can use :def to make such a command ... ?!?
14:13:23 <stratocaster> yea, maybe... I sorta figured "def" was meant for aliasing builtin stuff, but I guess I should look at the relevant docs
14:13:28 <kosmikus> ski, stratocaster: depends on how useful it should be
14:13:38 <kosmikus> a very simple implementation would be
14:13:53 <kosmikus> :def edit (\x -> return $ ":! emacs " ++ x)
14:14:06 <kosmikus> then you can say
14:14:15 <kosmikus> :e MyModule.hs
14:14:20 <kosmikus> to start the editor
14:14:33 <ski> kosmikus : so it automatically handles shortcuts ?
14:14:45 <kosmikus> yes, I think so
14:14:50 <kosmikus> as long as it is not ambiguous
14:15:20 <ski> kosmikus|away : you are away and still here ?  strange    ;)
14:15:44 <kosmikus> yes, I have a twisted personality ;)
14:16:15 <stratocaster> nice, that works just fine. I just do a ":r" when I'm done.
14:16:24 <ski> what does it do if it is ambiguous ?  lengthen the shortcuts to two letters (or whatever is needed to disambiguate it)
14:17:00 <kosmikus> you can use arbitrary prefixes of defined commands as long as they are unambiguous
14:17:20 <kosmikus> for example, :qu works just as :q or :quit
14:17:31 <ski> stratocaster : perhaps you can add a  ++ "\n:r" to it, if you want that behaviour !?
14:17:39 <ski> ok
14:17:56 <ski> a bit similar to the proof editor alfa, methinks
14:18:37 <kosmikus> the editor is started in the background, and immediate reload is probably not the desired behaviour
14:19:12 <stratocaster> it's working, too, though. doesn't reload until the editor exits
14:19:30 <kosmikus> okay
14:19:52 <ski> kosmikus : i thought a :! command would make it wait upon termination !?
14:20:08 <stratocaster> coulda saved myself a lot of alt-tabbing if I had not ignored ":def". thanks guys
14:21:09 <kosmikus> ski: you're right, I was wrong
14:21:28 <kosmikus> ski: but you can use & in :!
14:22:13 <ski> kosmikus : true
14:22:18 <kosmikus> stratocaster: you know that you can store :def's in your .ghci file, do you?
14:23:51 <stratocaster> thanks again. was just failing with ".ghcrc", was about to hit the docs
14:23:52 <ski> stratocaster : i have not used :e much, is it not annoying to have the editor start and terminate, start and terminate, over and over again (at least if it is a big editor, like emacs) ?   (or have i misunderstood the use of :e somehow ?)
14:24:29 <stratocaster> yea, with emacs it would be. I use vi or vim as EDITOR
14:24:40 <stratocaster> and they start and exit pretty quickly
14:25:21 <ski> stratocaster : ok.  does there exists things like syntax coloring and tags-like faetures for those editors ?
14:25:47 <ski> stratocaster : (like haskell-mode for emacs)
14:26:30 <stratocaster> there is good syntax highlighting, and OK indentation. Nowhere near as nice as emacs' "smart" Haskell indentation (which I really like)
14:26:50 <ski> ok
14:27:58 <kosmikus> with emacs, you could use emacsclient ...
14:28:18 <ski> i'm a bit irritated about the syntax-coloring in the haskell-mode (at least the version i have).  i have developed a indenting style which indents everything (2 spaces) inside a where clause
14:28:29 <kosmikus> emacs "smart" indentation is pretty annoying, in my opinion
14:28:48 <kosmikus> it seems to be following the "everything but what I want" policy
14:29:25 <stratocaster> yea, I can see where it would annoy people. I like bouncing on the tab key and seeing the various alternatives "magically" appear. Maybe I used Vim too long where that kind of stuff is not possible (AFAIK).
14:29:29 <ski> that means that the whole module except the first line "module ..." and possibly some comments is going to be indented at least 2 spaces. now i somehow don't get nice coloring of function names as if i start in column 0  :(
14:30:27 <kosmikus> ski: you could make an exception for the module's where ...
14:31:41 <ski> yeah, i guess. but i like to be fully consistent :)   (so i indent function body { and } in C more than the function head, just like other blocks)
14:34:08 <stratocaster> is there any way I can get at the name of the last loaded module? Or should I just stick a 'filename = "Blah.hs"' in my modules? For purposes of 'doing the right thing' if I just do ":e<CR>".
14:35:02 <ski> no such way that i know of ..
14:35:49 <ski> couldn't you stick the 'filename = ..' part into a :def command instead ? 
14:36:22 <ski> or perhaps a 'writeIORef filename ..' instead ?
14:36:28 <ski> hmm
14:38:47 <stratocaster> I don't see anything in the docs, either, but it's no big deal.
14:40:35 <stratocaster> Just to be an ass, maybe I'll alias "ghci" to a shell script that sets an unlikely enviroment variable with the filename in question, then make a .vimrc function that looks for that
14:42:26 <ski> but, to be perfect, you want this to interact nicely with :r :m :l and so on, right ?
14:43:06 <ski> is it possible to redefine, say, :l, and have the new def. statically refer to the old one ?
14:43:36 <stratocaster> yea, but I'm ok with there only being one module that gets :reloaded each session.
14:45:47 <ski> hmm, diametrical opposite of interactive is batch, right ?
14:46:24 <kosmikus> it's probably not even very hard to implement the :edit feature directly in ghci
14:47:27 <ski> prolly not .. (at least if one has a hum about the relevant structure of ghci)
14:49:12 <kosmikus> I mean, before you spend lots of time designing very cunning shell scripts, it might be worth just doing it right
14:50:21 <stratocaster> well, the script's done
14:51:55 <stratocaster> just "export GHCIFILE=$1\n/usr/bin/ghci $GHCIFILE" in the script (could just as well be an alias)
14:52:30 <stratocaster> and then "if exists("$GHCIFILE") :edit $GHCIFILE fi" (break up as appropriate) at the end of my .vimrc
14:53:02 <stratocaster> and then modify the :def in my .ghci to drop the filename altogether.
14:54:06 <kosmikus> don't you want to be able to override the filename?
14:55:05 <stratocaster> not really, because I mostly only want to use this ghci/vim thing for quick stuff.
14:55:12 <stratocaster> where I would've used hugs before.
14:55:49 <kosmikus> I see
14:56:02 <kosmikus> I like ghci much better than hugs
14:56:29 <stratocaster> If I do in the future, another :def should do it, I would think. Either your original function with the filename, or some hack System re-setting the env variable, maybe.
14:57:07 <earthy> g'night all
14:57:15 <ski> (oh, good, i see that ghci 6.0.1 has :browse, which i missed in previous versions)
14:57:26 <ski> earthy : good night
14:58:04 <stratocaster> it's a little slower to start up than hugs, but being able to do "let foo" is awful nice
14:58:28 <stratocaster> and the error messages seem more informative to me
14:59:08 <kosmikus> good night, earthy
14:59:11 <ski> couldn't ":show bindings" be seen as a responsibility of :browse, somehow ?
14:59:43 <kosmikus> let-bindings and better error messages are the main pros, yes
15:00:55 <kosmikus> ski: I guess, if you define a special module name for interactive bindings ...
15:01:49 <ski> hmm, can one access nonexported names in a module by, e.g. using :m to get there ?
15:02:14 <ski> i think one can do that in hugs
15:03:26 <ski> if so, we can make let-bindings with a type that is a module-hidden type. then it is not clear if that interactive binding should be available/usable/visable, when we step out of that module ..
15:05:10 <ski> so, mayyybe, we want one interactive name-space for every module (possibly nested ?  on import ?)
15:09:25 <kosmikus> ski: I think that's too complicated for me at this time of day ...
15:09:51 <ski> heh :)  prolly for me too
15:11:31 <kosmikus> you're at Chalmers, too, aren't you?
15:11:36 <ski> yeah
15:12:21 <kosmikus> PhD?
15:12:55 <ski> kosmikus : i thought you were in netherlands ..  oh, perhaps you meant me too, similar to some of the other persons here, no ?
15:13:05 <ski> no, not yet
15:13:20 <kosmikus> yes, I meant like some other persons I know ...
15:13:56 <kosmikus> (Ulf Norell, Patrick Jansson, Nils Danielsson, ...)
15:14:58 <ski> (i recog. the name "Patrick Jansson", at least. though i dunno what their nicks are, if some of them ever hang out here ..)
15:16:08 <kosmikus> I don't think they are here ...
15:16:17 <ski> 'k
15:16:31 <kosmikus> in which year are you?
15:17:10 <ski> ?? you mean when i started here at GU(/Chalmers) ?   1999 then
15:17:24 <Smerdyakov> ski, are you doing a 5 year masters program?
15:18:16 <ski> no, i started reading a math prog, then i got hooked up on prog. (func. in part.)
15:18:33 <ski> and i haven't been reading full-time all the time
15:18:34 <kosmikus> same for me
15:18:38 <jameson> Chalmers seems to be one of "the" places for FP people...
15:18:58 <kosmikus> have you already selected a masters project?
15:19:25 <ski> they have a "multi meeting" which i sometimes go to and listen :)
15:19:29 <ski> no
15:20:06 <Smerdyakov> This use of the word "reading" confuses us Americans. :-)
15:20:10 <Smerdyakov> I think we'd say "studying."
15:20:43 <ski> sorry, i searched for the right word and didn't find it directly ..
15:20:43 <kosmikus> Smerdyakov: are you doing a PhD in the US?
15:21:11 <kosmikus> ski: yes, I've heard about that "multi meeting"
15:21:17 <Smerdyakov> kosmikus, yes.
15:21:28 <kosmikus> Smerdyakov: where? and about what?
15:22:00 <Smerdyakov> kosmikus, UC Berkeley. Something in programming languages. I haven't even been here for a whole semester yet, so don't say the word "dissertation." ;-)
15:22:14 <ski> kosmikus : it's fun to see such well-known persons (/gurus/legends/whatever ..) as John Hughes there
15:22:21 <kosmikus> Berkeley, cool
15:24:03 <kosmikus> ski: yes, it's fun. Utrecht isn't bad either. But the FP community in general, especially the Haskell people, seem to be quite accessible.
15:24:28 <Smerdyakov> Poor Europe. Each country can only fit one university with many well-known persons. ;)
15:24:44 <jameson> Smerdyakov: Who's your advisor there?
15:24:51 <Smerdyakov> jameson, George Necula.
15:25:19 <ski> kosmikus : please remind/enlighten me, are the clean people at Utrecht, or was it at another place ?
15:25:36 <kosmikus> Smerdyakov: don't be unfair. First: how many important universities do you have per state? Second: how many of them are important in FP?
15:25:53 <kosmikus> no, Clean is at Nijmegen
15:26:13 <Smerdyakov> kosmikus, the state I'm in has at least 5 universities with significant CS action. Most have none, you're right. :)
15:26:22 <ski> ok, thanks. (i temp. forgot where they were ..)
15:26:53 <Smerdyakov> kosmikus, FP is researched in very few places in the US.
15:28:21 <kosmikus> Smerdyakov: that's what I thought; so don't be surprised if it scarce in Europe as well -- I think, compared to the US, FP research in Europe is still quite prominent :)
15:28:57 <Smerdyakov> kosmikus, OK, but I never got the impression that we were restricting our attention to FP.
15:29:53 <kosmikus> ski: in Utrecht there are Doaitse Swierstra (Parser combinators, Attribute Grammars), Arjan v. IJzendoorn (Helium), Daan Leijen (also Parser Combinators, wxHaskell), Johan Jeuring (PolyP, Generic Haskell), Eelco Visser (Stratego), ...
15:30:44 <kosmikus> Smerdyakov: not in principle, but I think that when ski was saying "such gurus as John Hughes", then there was an implicit restriction to "gurus in FP" ...
15:30:56 <ski> kosmikus : ok    (i seem to recognise those persons/topics)
15:31:02 <Smerdyakov> Well, gurus of all kinds are cool. :)
15:31:20 <ski> yeah
15:31:27 <kosmikus> unfortunately, we don't have much cooperation with the Clean group in Nijmegen, although they are doing many similar things
15:32:43 <kosmikus> Smerdyakov: but I also agree that FP may be one of the few topics in CS where Europe can actually compete with the US in research quality and quantity
15:33:17 <Smerdyakov> Yup, but it's also not recognized as a useful research topic by most CS researchers here.
15:33:57 <ski> (hmm, someday i'll have to learn how the linear/uniqueness type system of Clean works in detail/real practice. (I have an idea that one might be able to express Comonads in it in a safe way (thinking of the OI Comonad))
15:34:41 <Smerdyakov> Imbalanced parentheses
15:35:20 <ski> that is the problem with single-line text-fields ! :(
15:35:27 <jameson> Smerdyakov: George Necula: Sounds like a good choice to me :-)
15:35:59 <Smerdyakov> jameson, nod. One of the few professors who actually codes parts of his projects. :)
15:36:29 <Smerdyakov> But he has disparaged pure functional languages in class. ;)
15:37:30 <kosmikus> blasphemy ;)
15:38:10 <jameson> Smerdyakov: I had a look at CCured and his papers on proof-carrying code a while back. He definitely does cool stuff, and he seems to do it well :-)
15:38:26 <jameson> Not really FP, of course ;-)
15:41:23 <Smerdyakov> jameson, no, but he uses OCaml for all the implementation. :)
16:39:12 <jasonw> Heh. You prolly read over 100 by 11 A.M.
16:40:12 <ski> ?
17:47:16 <shapr> oy
17:47:17 <shapr> @yow
17:47:17 <lambdabot> ...It's REAL ROUND..  And it's got a POINTY PART right in the MIDDLE!!
17:47:17 <lambdabot>  The shape is SMOOTH..  ..And COLD.. It feels very COMFORTABLE on my
17:47:17 <lambdabot>  CHEEK..  I'm getting EMOTIONAL..
17:47:51 <ski> @arr
17:47:51 <lambdabot> Aye Aye Cap'n
17:47:55 <shapr> @fortune
17:47:56 <lambdabot>   "Triumph without Victory, The Unreported History of the Persian
17:47:56 <lambdabot>   Gulf War", -Headline published in the U.S. News & World Report,
17:47:56 <lambdabot>   1992.
17:48:26 <ski> :)
17:52:21 <shapr> so, what's exciting?
17:52:35 <ski> dunno
17:53:18 <ski> some parts of TCLT (The Current Long Thread) on c.l.f, perhaps ..
17:53:28 * shapr looks
17:55:15 <ski> at least it's educating/whatever in some places
18:10:06 * shapr sings cheerfully
18:10:13 <shapr> g'day Pseudonym 
18:30:46 <shapr> hi lambdabot 
18:34:37 <ski> @hello
18:34:37 <lambdabot> Hello world. 
18:34:47 <shapr> @hello We are receiving you.
18:34:48 <lambdabot> Hello world. We are receiving you.
18:35:01 <ski> @goodbye lambdabot
18:35:01 <lambdabot> Hello world. lambdabot
18:35:47 <shapr> exe: are you executable?
18:35:49 <ski> hello exe
18:36:04 <exe> shapr no...
18:37:05 <shapr> are you learning Haskell?
18:37:17 <Smerdyakov> shapr is too aggressive.
18:37:34 <shapr> Smerdyakov: just trying to steal all the SML users away from you ;-)
18:38:07 <shapr> actually, I talk to people who join because I think an empty channel looks lonely and lost.
18:38:26 <shapr> so I think people want to hang around and talk if they know people actually talk on a channel.
18:38:37 <ski> 'tis true
18:38:52 <exe> i dont know why i join here...
18:39:07 <shapr> exe: have you heard of Haskell the programming language?
18:39:31 <exe> mmm
18:39:32 <exe> yes
18:39:39 <shapr> Have you tried Haskell?
18:40:07 <exe> no
18:40:15 <exe> i am so bad for programming
18:40:38 <shapr> the best way to improve is to write more code
18:40:43 <ski> what programming languages do you know/have programmed in, if i may ask ?
18:41:08 <exe> basic
18:41:10 <exe> xD
18:41:12 <Smerdyakov> You may NOT ask. Minus 20 points!
18:41:13 <exe> yes, basic
18:41:25 <shapr> any other languages?
18:41:25 <exe> mirc scripting
18:41:30 <exe> mmm
18:41:31 <ski> QBasic ?
18:41:35 <exe> a litle c
18:41:37 <exe> for programming
18:41:39 <exe> freebsd modules
18:41:41 <exe> (very simples)
18:42:06 <ski> Smerdyakov : oh no !!
18:42:34 <exe> php too
18:42:57 <shapr> you might like Haskell
18:43:24 <shapr> it has the quick development times of Basic, with static typing
18:44:10 <shapr> exe: have you heard of higher order functions?
18:44:32 <shapr> do you want to know about them? :-)
18:44:32 <exe> no
18:44:48 <exe> haha
18:44:51 <exe> mmm, i dont know
18:45:09 <shapr> it's where a function is a value like a number or a string
18:45:16 <shapr> so you can use the function as data
18:45:50 <Smerdyakov> shapr, I think you'd be better off if you went and rode a unicycle for a while. ;)
18:46:07 <shapr> sadly, I don't have a snow tire for my unicycle yet.
18:46:13 <shapr> but I do have a lot of snow.
18:46:51 <ski> shapr : how deep is the snow up there, now ?
18:46:56 <shapr> on the upside, the cycle shop is two houses over, and they've just gotten a bunch of studly tires.
18:47:09 <exe> mmm, im my 18 birthdays i gona to learn about haskell :)
18:47:19 <ski> you are ?
18:47:19 <shapr> ski: about four centimeters, but it's icy and slippery.
18:47:33 <exe> ski ¨?
18:47:44 <shapr> exe: you want to learn about Haskell after you turn 18?
18:47:49 <exe> yes...
18:47:53 <ski> exe : for school ?  or for fun/etc ?   (possibly both, of course)
18:47:55 <shapr> how old are you now?
18:48:01 <exe> fun...
18:48:18 <clausen> is haskell dangerous for children? :p
18:48:19 <exe>  17
18:48:36 <exe> 16
18:48:43 <shapr> clausen: maybe too HOT to handle?
18:49:10 <exe> haskell works on freebsd?
18:49:14 <ski> both 17 and 16  ?  ;)
18:49:22 <exe> ski in the middle
18:49:23 <exe> :)
18:49:38 <shapr> yes, Haskell works on freebsd
18:50:05 <exe> :) ok, if is in the ports collections maybe i gona install it :)
18:50:46 <shapr> look for ghc or ghc6
18:51:03 <exe> ok
18:51:09 <exe> where are you from?
18:51:09 <ski> perhaps hugs also (?)
18:51:30 <ski> exe : me ? or shapr ?
18:51:36 <exe> both
18:51:49 <ski> i'm a swede living in sweden
18:51:58 <shapr> I grew up in Alabama, USA, but I live in the north of Sweden.
18:52:16 <shapr> Sweden is colder than Alabama.
18:52:37 <exe> hahaha
18:52:41 <ski> exe : and you are from (at least in) Argentina, i would presume ?
18:52:53 <exe> yes...
18:53:18 <exe> rosario, in the north of buenos aires (the DF of Argentina)
18:53:20 <ski> nice
18:53:25 <shapr> DF?
18:53:30 <exe> well, here CF
18:53:36 <shapr> what's that?
18:53:46 <exe> haha
18:53:50 <exe> Distrito Federal
18:53:53 <shapr> oh
18:53:57 <exe> or, Federal Distrit
18:53:59 <ski> and CF ? 
18:54:05 <exe> Capital Federal
18:54:26 <ski> ok
18:54:56 <exe> that's a big irc...
18:55:21 <shapr> ?
18:55:55 <shapr> there are lots of people on irc
18:56:08 <shapr> some people use irc to help them get stuff done
18:56:13 <exe> but, the net is big...
18:56:15 <shapr> some people use irc so they won't get anything done :-)
18:56:29 <exe> for example, undernet, and other networks are small...
18:56:36 <shapr> I think I'm the second kind of person ;-)
18:56:48 <exe> haha
18:58:18 <shapr> are you getting a degree in computers?
18:58:19 <Pseudonym> Work?  what's work?
18:58:41 <shapr> aha, he of the meta-nickname has returned.
18:58:49 <Pseudonym> Indeed.
18:59:02 <exe> [?]
18:59:03 <Pseudonym> I coined this particular nick some time around 1987 or so.
18:59:13 <shapr> I wish paralegals were more like parapsychologists.
18:59:18 <Pseudonym> I seem to recall that I was reading Goedel Escher Bach at the time.
18:59:32 <shapr> exe: Pseudonym means nickname
18:59:34 <ski> shapr : what's paralegals ?
18:59:44 <Pseudonym> It's like one legal, only doubled.
18:59:50 <shapr> paralegal is the name for an assistant to a lawyer
19:00:05 <ski> ah, ok 
19:00:06 <shapr> they usually spend their life in law libraries, looking for references
19:00:31 <shapr> parapsychologists claim to be scientists who do research on ghosts, mental powers, demons, etc
19:00:39 <shapr> oh, and UFOs
19:00:39 <ski> sounds like fun                                (or ? ;)
19:01:07 <ski> (last remark regarding paralegals)
19:01:10 <Pseudonym> Parapsychologists are specifically into pseudo-psychology.
19:01:14 <Pseudonym> So not UFOs as such.
19:01:20 <Pseudonym> Unless it's abduction research, I guess.
19:01:24 <shapr> I wonder what a parapsychiatrist would do? treat stranded UFO passengers?
19:01:43 <Pseudonym> But yes, it's the pseudo-science of psychology.
19:01:52 <exe> how i see the total of channels of the server in bitchx?
19:02:14 <Pseudonym> Actually, there is a site out there which is dedicated to recovery from PTSD as a result of alien abduction.
19:02:20 <shapr> Pseudonym: happily for us, we never hear from abduction researchers because a) they're full of shit, it never happens, no proof or b) it really happens, and the aliens have never returned them
19:02:34 <Pseudonym> :-)
19:02:38 <shapr> exe: you can do /list but it give back a *very* long list
19:02:46 <Pseudonym> Actually, I do think that there is something going on.  Possibly something to do with temporal lobe seizures.
19:03:08 <shapr> I don't care if they make 'em illegal, the authorities will not seize my temporal lobes.
19:03:12 <Pseudonym> A friend of mine once suffered from temporal lobe seizures.  She had many symptoms in common with an abduction experience, like anxiety, mania, the feeling of a "presence".
19:03:12 <shapr> I've been growing them for years.
19:03:21 <ski> also possibly sleep paralysis (SP)
19:03:25 <Pseudonym> That too, yes.
19:03:35 <shapr> right, I'm always paralyzed while I sleep. it's stressful.
19:04:07 <Pseudonym> Alien abduction sounds very, very similar to mediaeval folklore about demons and faeries, which suggests that there is something going on, and aliens just happen to be the latest folk interpretation.
19:04:07 <ski> all people are normally paralyzed when in REM sleep
19:04:21 <shapr> ski: it still sucks!
19:04:25 <ski> shapr : do you mean you often notice the SP ?
19:04:34 <shapr> sure, almost all the time.
19:05:16 <shapr> Pseudonym: that's a point I hadn't thought of
19:05:19 <pimpbot5001> hi does anyone know how to return bottom in a standard haskell function
19:05:21 <ski> before entering or after leaving REM sleep proper, or both ? (or do you have WILDs ? :)
19:05:26 <shapr> pimpbot5001: moon it
19:05:34 <shapr> ski: what's a WILD?
19:05:40 <Pseudonym> pimpbot: You could use undefined.
19:06:07 <ski> shapr : Wake Initiated Lucid Dream
19:06:08 <shapr> I noticed SP several times a night, though I guess I don't properly wake up.
19:06:14 <Smerdyakov> Whatever your view on what "alien abductions" are, it's pretty clear that there is some phenomenon/illness/whatever that has ruined thousands of people's lives. So being too flippant about the subject is ill-advised.
19:06:22 * Pseudonym nods
19:06:26 <shapr> I have lucid dreams, but I don't think they're related to wakefulness
19:06:49 <ski> shapr : no prob. the important bit is that one in conscious
19:06:50 <Pseudonym> Having a friend with these seizures has turned me into a true believer, so to speak, that there's something physiological happening.
19:07:15 <Smerdyakov> Of course, seizures don't explain implants in people's skulls....
19:07:16 <shapr> I think I'm so much of a control freak I can't even let my dreams happen by themselves.
19:07:21 <pimpbot5001> Pseudonym: so i could return undefined in place of any type?
19:07:27 <Pseudonym> pimpbot: Yes.
19:07:40 <pimpbot5001> cool, thanks!
19:07:41 <Pseudonym> Actually, I have something which I refer to as my "alien implant".
19:08:00 <shapr> knowledge of comonads?
19:08:03 <Pseudonym> It's a small solid something, kind of like a lump of calcium or something like that, in my arm.
19:08:17 <Pseudonym> It very closely resembles these "implants" which people keep finding.
19:08:20 <ski> shapr : i mean. some people, like you e.g., have LDs from time to time. but some people can (sometimes, at least) willfully initiate an LD directly from waking consciousness ..
19:08:23 <shapr> the gov't is keep an eye on you, eh?
19:08:50 <Pseudonym> I think it's just a lump of bone which formed in an odd place.
19:08:54 <Pseudonym> Just under the skin, that is.
19:09:04 <Pseudonym> It's very small.  Smaller than a grain of rice.  But you can feel it there.
19:09:07 <ski> shapr : what about comonads ? :)
19:10:03 <ski> shapr : nevermind, i got it ..
19:10:10 <shapr> ski: I'm often conscious of what's going on around me while I'm asleep, but it's not like full consciousness
19:10:49 <Pseudonym> Interesting.  I'm usually completely out of it.
19:11:15 <ski> shapr : no, but some people can (willfully) initiate LDs from waking. that is a WILD
19:11:19 <Smerdyakov> I'm often dreaming when I'm awake.
19:11:34 <shapr> Smerdyakov: that sounds like fun.
19:11:43 <shapr> ski: I'll try that, but not right now :-)
19:12:02 <shapr> I like to experiment with consciousness
19:12:07 <shapr> or lack thereof
19:12:43 <Pseudonym> I'm often dreaming while I'm working.
19:12:54 <Pseudonym> Or pretending to, at least.
19:13:59 <shapr> several people I've lived with have told me that I can be awakened after three or four hours of sleep, and have what appears to be a fully conscious and intelligent discussion, and then they realize I'm actually still asleep, with my eyes open.
19:14:10 <shapr> I don't remember those discussions.
19:14:13 <ski> shapr : Janice E. Brooks in one of those persons (site with LD subsite and info about her book on LDs on http://www.geocities.com/janice240obe/)
19:15:10 <shapr> I'll check it out, thanks.
19:16:05 <ski> my little brother often talks (mostly what sounds like garbage, or at least half-/ill-formed words) while asleep, but sometimes one seems to be able to have very short conversations with him (while asleep)
19:16:57 <shapr> my hairdresser in Alabama had two deaf children, she said they signed in their dreams.
19:17:27 <shapr> that sounds like a brain researchers dream job :-)
19:17:43 * shapr basks in the warm punniness
19:18:16 <Pseudonym> Some neurologists have found the part of the brain which induces paralysis during sleep.
19:18:32 <Pseudonym> They disabled it in cats, and while they were asleep, the cats got up and fought with other imaginary cats.
19:18:34 <shapr> it's the reticular formation, I think
19:18:47 <shapr> iirc, it's a U-shaped thingy in the brainstem
19:19:31 <isomer> shapr: want to see what happens if you erase OS X and install gentoo on your mac? http://www.gentoo.org/images/shots/edon-tux.png
19:19:47 <isomer> :)
19:20:15 <shapr> isomer: gorgeous logo
19:21:22 <isomer> i love the icon set too
19:23:06 <ski> shapr : is it the Reticular Activating System (RAS) ?
19:23:09 <clausen> Pseudonym: Cool!
19:23:39 <Pseudonym> Cool?
19:23:39 <Pseudonym> You think experimenting on poor defenceless animals is "cool"?!
19:23:55 <Pseudonym> Well, semi-defenceless, I guess.  They successfully defended themselves against dream cats.
19:25:15 <ski> wanna hear a weird (re sleep) instance with my little brother ?
19:25:15 <clausen> Pseudonym: did they get hurt?
19:25:40 <clausen> (if they didn't then... seems ok to me :)
19:26:19 <ski> iirc correctly most instances of somnambulism in humans is in (Deep) Ortho-Sleep, though
19:26:36 <ski> s/correctly//
19:26:49 <Pseudonym> Dunno.
19:27:44 <ski> well ? (about story :)
19:27:47 <Pseudonym> Not like those bloody physicists.  Forcing a cat into a half-alive/half-dead state is just plain cruel.
19:29:14 <Smerdyakov> ski, OK!
19:29:32 <ski> no need to force me ;)
19:29:58 <ski> On one particular occurance though : My little brother (when i and another bro' was sitting by the computer) suddely sat up in the bed and said "I can't see" ("Jag kan inte se" in swedish) several times, eyes open, but staring/looking kind of weird. My other bro' then says "What am i doing know ?", followed by he sticking out his tongue, whereupon my little bro' says "You are sticking out your tongue", in a kind of indifferent voice. So my othe
19:29:59 <ski> r bro' says "So you can indeed see, no ?". When he woke up in the morning he had no recollection of it. We think that he was indeed asleep at the time ..
19:32:31 <Pseudonym> Interesting.
19:32:52 <pimpbot5001> hi, does someone know the costs associated with ccall?  is it especially taxing?
19:33:36 <ski> he has on some other occations also walked around and responded (zombie-like and irritated, methinks) to questions
19:34:22 <ski> pimpbot5001 : i think it depends on safe/unsafe/threadsafe. also there is marshalling
19:37:00 <pimpbot5001> ah so unsafe should be pretty much instantaneous?
19:37:49 <ski> but then you'd have to guarantee that the foreign call cannot call back into haskell
19:38:18 <ski> (IIRC)
19:39:02 <pimpbot5001> right, this would be a pure function
19:40:55 <ski> see page 6 of the current FFI spec
19:42:07 <ski> pure/unpure is orthogonal to the safe/unsafe/threadsafe issue of callbacks-into-haskell, methinks
19:43:02 <pimpbot5001> do you have the url for the FFI spec handy?
19:43:12 <ski> http://www.cse.unsw.edu.au/~chak/haskell/ffi/
19:43:20 <pimpbot5001> thanks!
19:43:50 <ski> (linked to from www.haskell.org)
19:45:21 <ski> see also http://www.haskell.org/ghc/docs/latest/html/users_guide/ffi.html for ghc
22:51:04 <amb> hey
22:51:13 <ski> hello amb
22:51:29 <amb> Could you help me with a short non-haskell problem? *g*
22:51:39 <ski> what's it about ?
22:51:44 <amb> Chomsky
22:51:50 <ski> Noam ?
22:51:53 <amb> i.e. Formal language Definitions
22:52:04 <ski> ok, i guess i could try ..
22:52:12 <amb> Thanks :-)
22:52:33 <amb> I was wondering what the "|" meant in the rules
22:52:45 <ski> in BNF rules ?
22:52:53 <ski> i think it means "or"
22:53:01 <amb> Oh, great!
22:53:04 <amb> Thanks a lot :-)
22:53:22 <amb> You saved my day (I've been looking all day for it *g*)
22:53:24 <ski> all clear ?  or do you have some small example you want explained ?
22:53:50 <amb> I think I get it
22:53:54 <amb> :-)
22:53:59 <ski> nice :)
23:13:27 <harsha123> hi ski
23:16:48 <ski> hi harsha
