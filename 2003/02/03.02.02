04:47:39 * shapr blinks
04:51:49 <shapr> mmm, happy code
04:51:59 <shapr> happy code is working code
04:53:07 <shapr> whee: hey, where's your erlang listing?
05:15:43 * shapr yawns
05:38:33 <shapr> that john mccarthy guy is pretty smart
05:43:42 * shapr yawns
05:43:53 <shapr> good morning Haskellers!
05:44:12 <esap> good afternoon.
05:44:16 <shapr> that too!
05:44:21 <shapr> hi esap, what's up?
05:44:46 <esap> Hmm.. now trying to understand effect systems.
05:44:57 <shapr> what is one?
05:45:34 <esap> Well effect system is like a type system but it describes effects of the programs. An effect system is "dual" to a type system.
05:46:26 <shapr> hi dark 
05:46:32 <dark> Hello :)
05:46:35 <shapr> esap: I think I've heard of them, but I'm not really sure what they are.
05:47:21 <esap> shapr: ok, basically you associate to each function (type) an effect that is performed when that function is evaluated.
05:47:36 <shapr> ok
05:48:14 <esap> shapr: all typing rules of the language also have effects associated with them.
05:48:47 <shapr> that makes sense
05:49:47 <esap> shapr: well you can then choose many different kinds of effects you associate with different operations of the language, and you can then restrict the program to some set of those.
05:50:07 <shapr> interesting
05:51:28 <esap> shapr: see http://citeseer.nj.nec.com/254302.html for more details.
05:53:20 <esap> hmm.. actually, I misspoke, it wasn't that reference I intended to give :-)
05:54:54 <esap> I guess it's this one: http://citeseer.nj.nec.com/benton00monads.html
07:05:21 <ludde> is writing embedded languages in haskell considered metaprogramming?
08:09:37 <andersca_> hey norpan
08:57:04 <Smerdyakov> ludde, I wouldn't think it would be.
08:57:14 <ludde> ?
08:57:32 <Smerdyakov> You're not producing Haskell programs with Haskell code, are you?
09:04:30 <kawfee> how would I write a let expression on one line?
09:04:42 <kawfee> let  a =1 b = 2 ....
09:05:32 <kawfee> Prelude> let a = 9 b = 4 c = 11 in (a + b + c)/2
09:05:41 <kawfee> that's what I want to do
09:05:50 <kawfee> do I need ; ?
09:08:48 <Smerdyakov> Is it acceptable to use multiple let..in pairs?
09:09:04 <Smerdyakov> let a = 9 in let b = 4 in let c = 11 in (a + b + c)/2
09:10:27 <ludde> Smerdyakov: ok
09:15:57 <Smerdyakov> In SML it would be let val a = 9 val b = 4 val c = 11 in (a + b + c/2) end
09:15:57 <Smerdyakov> =)
09:16:39 <kawfee>  let a = 9 b = 4 c = 11 in (a + b + c)/2 let a = 9; b = 4; c = 11; in (a + b + c)/2    
09:16:43 <kawfee> that works
09:16:46 <kawfee> oops
09:16:48 <kawfee>  let a = 9; b = 4; c = 11; in (a + b + c)/2    
09:16:49 <kawfee> that
09:17:13 <Smerdyakov> Oh. Funny layout engine strikes again.
09:24:06 <ludde> is metaprogramming always done at compile-time ?
09:26:26 <Smerdyakov> Hm... I think it usually will be in statically typed languages.
09:26:37 <Smerdyakov> I must confess to knowing very little about the topic.
09:28:14 <Smerdyakov> You can do all sorts of insane things at runtime in Lisp =)
09:32:37 <dennisb> kawfee: you don't even need the last ;
09:32:46 <kawfee> ok
09:33:07 <dennisb> the more primitive syntax is let { a = 9; b = 4; c = 11 } in (a + b + c)/2
09:33:31 <dennisb> but the haskell system inserts the {;} automatically for you when indented correctly and so on
09:35:53 <dennisb> sometimes one get error messages refering to one of the {;} even though you have not written any such, very strange if one doesn't know about it
09:41:21 <kawfee> (\x a b c -> s*(s-a)*(s-b)*(s-c) let s = (a +b + c)/2)
09:41:32 <kawfee> I'm trying to do that, what am I doing wrong?
09:42:35 <kawfee> ahh
09:42:36 <kawfee> thanks
09:42:39 <dennisb> the let looks like itäs missplaced
09:42:56 <kawfee> how do you know it's misplaced?
09:43:36 <dennisb> you've started an expression before  "s*(s-a)*(s-b)*(s-c)" and then there is a let
09:43:49 <kawfee> Prelude> (\x a b c -> let s = (a +b + c)/2; s*(s-a)*(s-b)*(s-c))
09:43:50 <kawfee> ERROR - Syntax error in expression (unexpected `-')
09:44:20 <dennisb> I think the let should be first, let s = ... in s*(s-a)*(s-b)*(s-c)
09:45:03 <kawfee> yeah, that would make more senss
09:45:07 <kawfee> ERROR - Cannot find "show" function for:
09:46:03 <dennisb> for what?
09:46:03 <Smerdyakov> I think you meant for the "let" to be "where"
09:46:08 <kawfee> Prelude> (\x a b c -> let s = (a + b + c)/2 in  s*(s-a)*(s-b)*(s-c))
09:46:08 <kawfee> ERROR - Cannot find "show" function for:
09:46:08 <kawfee> *** Expression : \x a b c -> let {...} in s * (s - a) * (s - b) * (s - c)
09:46:08 <kawfee> *** Of type    : a -> Double -> Double -> Double -> Double
09:46:26 <kawfee> I'm going to change it to a where..using a let right now
09:46:36 <Smerdyakov> Your original was fine with that one change.
09:46:44 <dennisb> Smerdyakov: I don't think you can have where there
09:46:47 <Smerdyakov> The error you get just means the interactive environment doesn't know how to print a function value.
09:46:59 <Smerdyakov> dennisb, OK. I just know I've seen such an alternative to let in some places.
09:47:02 <dennisb> where can only be on a binding I think
09:47:21 <kawfee> it doesn't print out the answer
09:47:37 <Smerdyakov> kawfee, yes, because you haven't applied the function....
09:47:38 <dennisb> kawfee: there is now answere, you have created a function
09:47:51 <dennisb> the function is the answer
09:48:00 <kawfee> hrm, how would I apply it?
09:48:25 <kawfee> \x a b c -> let s = (a + b + c)/2 in  s*(s-a)*(s-b)*(s-c)) 1 2 3
09:48:28 <kawfee> it still complains
09:48:38 <kawfee> missed a ( at the beginning
09:48:40 <dennisb> put () around the function
09:48:54 <kawfee> (\x a b c -> let s = (a + b + c)/2 in  s*(s-a)*(s-b)*(s-c)) 
09:48:56 <kawfee> it already has them
09:49:19 <dennisb> (\x a b c -> let s = (a + b + c)/2 in  s*(s-a)*(s-b)*(s-c)) 1 2 3 4
09:49:42 <kawfee> it only has tjhree aregumetns
09:49:47 <kawfee> Prelude> (\x a b c -> let s = (a + b + c)/2 in  s*(s-a)*(s-b)*(s-c)) 1 2 3
09:49:47 <kawfee> ERROR - Cannot find "show" function for:
09:49:47 <kawfee> *** Expression : (\x a b c -> let {...} in s * (s - a) * (s - b) * (s - c)) 1 2 3
09:49:50 <kawfee> *** Of type    : Double -> Double
09:49:51 <dennisb> no, it has four
09:50:03 <dennisb>  \x a b c -> ....
09:50:08 <Smerdyakov> It's just that one of them isn't used :P
09:50:13 <kawfee> I only have 3
09:50:13 <Smerdyakov> (x)
09:50:15 <kawfee> hrm
09:50:18 <Smerdyakov> x is an argument.
09:50:18 <kawfee> I am confused
09:50:18 <dennisb> that is a function that takes 4 arguments called x  b c d
09:50:20 <Smerdyakov> It's the first one.
09:50:26 <kawfee> oh wow
09:50:26 <dennisb> that is a function that takes 4 arguments called x a b c
09:50:28 <kawfee> hrm
09:50:37 <kawfee> so it ignores the first argument?
09:50:40 <kawfee> is that legal?
09:50:44 <Smerdyakov> Huh?
09:50:48 <dennisb> yes, you don't use the x
09:50:50 <Smerdyakov> YOUR code ignores it, by not using it.
09:51:24 <dennisb> kawfee: why don't you give your function a name?
09:51:29 <kawfee> (\a b c -> let s = (a + b + c)/2 in  s*(s-a)*(s-b)*(s-c)) 9 4 11 
09:51:31 <kawfee> how about that?
09:51:44 <kawfee> what do you mean?
09:51:45 <dennisb> kawfee: does it work?
09:51:51 <kawfee> I don't think so, checking now
09:52:07 <kawfee> it gives me an snaswer of 288, supposed to be 16
09:52:07 <dennisb> write your function in a text file and load it in
09:52:19 <kawfee> I will, trying to get it to work
09:52:40 <Smerdyakov> I think you have miscalculated, kawfee... that function should do exactly what you expect.
09:52:42 <kawfee> oops
09:52:44 <kawfee> forgot the sqrt
09:52:47 <Smerdyakov> Maybe you transcribed the formula incorrectly.
09:52:58 <kawfee> yay!
09:52:59 <kawfee> it works
09:53:06 <dennisb> good
09:53:27 <kawfee> now time to give it a name
09:55:06 <kawfee> >A = (\a b c -> let s = (a + b + c)/2 in  sqrt(s*(s-a)*(s-b)*(s-c)))
09:55:36 <dennisb> you can probably not do it at the prompt, at least not if you use hugs
09:55:46 <kawfee> I am using hugs
09:55:52 <kawfee> writing it in a script
09:55:56 <dennisb> and function names must start with a small letter (not A)
09:56:00 <kawfee> do I have to use another let?
09:56:04 <kawfee> oh
09:56:08 <dennisb> in a file that is run by hugs it is no problem
09:56:15 <kawfee> thanks
09:56:31 <kawfee> it worked
09:56:50 <dennisb> and now you don't need the outermost () any more
09:58:56 <kawfee> I left them there
09:58:59 <kawfee> is that not ok?
10:00:01 <dennisb> sure
10:00:22 <dennisb> you can put in 10 if you like :-)
10:01:40 <kawfee> I like this language
10:01:56 <kawfee> it seems a bit tricky at first
10:01:59 <dennisb> we all do!
10:02:02 <kawfee> heh
10:02:08 <kawfee> I like functional languages though
10:02:14 <kawfee> I enjoyed scheme throughly
10:02:43 <dennisb> kawfee: do you take a course, or just learning on your own?
10:02:46 <kawfee> is that a vulgar word around these parts?
10:02:51 <dennisb> not at all
10:03:17 <dennisb> I think most of us like languages, even scheme
10:03:20 <kawfee> dennisb: taking a course in programming languages, one of the main languages we learn the concepts in is haskell
10:03:38 <dennisb> aha
10:04:58 <kawfee> >area = \a b c -> let s = (a + b + c)/2 in  sqrt(s*(s-a)*(s-b)*(s-c))
10:05:03 <kawfee> is that standared haskell form?
10:05:15 <dennisb> no
10:05:18 <kawfee> hrm
10:05:22 <dennisb> but it's nice anyway!
10:05:28 <kawfee> heh
10:05:36 <andersca_> dennisb: sliff
10:05:39 <kawfee> standard hasklell function definition form
10:05:52 <kawfee> oh wait
10:05:54 <kawfee> I see
10:06:04 <dennisb> I would write:
10:06:08 <dennisb> area a b c = sqrt (s*(s-a)*(s-b)*(s-c))
10:06:08 <dennisb>   where s = (a + b + c)/2
10:06:35 <kawfee> >area a b c = let s = (a + b + c)/2 in  sqrt(s*(s-a)*(s-b)*(s-c))
10:06:36 <kawfee> no
10:06:39 <kawfee> that is
10:06:40 <dennisb> yes
10:06:53 <kawfee> the where is the next question
10:07:08 <kawfee> now I have to cover your answer up
10:07:19 <kawfee> you're making this hard on me
10:07:28 <dennisb> sorry .-)
10:08:25 <dennisb> We usually try to not solve peoples homework here..
10:09:40 <kawfee> right
10:09:55 <kawfee> you were just showing me the next step, which is ok, I covered it up
10:10:08 <dennisb> sure, no problem
10:10:17 <kawfee> I'm finishing writing the last problem anyways, so I already forgot what it said
10:10:41 <kawfee> if I didn't do it on my own I wouldn't learn anything
10:10:51 <dennisb> kawfee: exactly
10:11:52 <kawfee> >area a b c = sqrt(s*(s-a)*(s-b)*(s-c)) where s = (a + b + c)/2
10:11:55 <dennisb> lots of things in haskell is just syntactic sugar that is rewritten by the compiler into a more primitive form that is compiled
10:12:05 <kawfee> looks the same as yours
10:12:26 <kawfee> >area a b c = sqrt(s*(s-a)*(s-b)*(s-c)) 
10:12:27 <kawfee>     where s = (a + b + c)/2
10:12:30 <dennisb> like writing functions f x = x*2 which is nicer instead of the more primitve f = \x -> x*2
10:12:32 <kawfee> with indenting
10:12:39 <kawfee> right
10:18:02 <kawfee> this indentation isn't going along very well with these > 
10:51:39 <dennisb> kawfee: if you use literate style, with > on code lines, then you need > also in front of the where
15:08:45 <flippo> I wish I could type code into hugs without constantly reloading files.  Grumble...
15:09:07 <Heffalump> ghci allows binding of declarations with let
15:09:27 <flippo> Heffalump: that's a little better
15:12:51 <flippo> Maybe the laziness of the language prevents a decent interactive command line
15:13:42 <flippo> When do you decide that a line contains an error, instead of something that hasn't yet been defined?
15:13:44 <Heffalump> no, I don't think so
15:13:49 <Heffalump> wdym?
15:14:19 <flippo> Heffalump: Hmm.  I can define a function after I use it.  But maybe it's just a typo.
15:15:10 <flippo> Heffalump: maybe the interpreter should wait for a "where" instead of throwing an error.  Too hard to know what a real error looks like.
15:16:38 <flippo> Heffalump: Or maybe it's the static typing.  lisp and python seem to be easy to write command-line interpreters for
15:17:16 <flippo> Maybe it is the type inference in particular
15:17:22 <emu> lisp makes provisions for it
15:17:46 <flippo> so maybe haskell could too
15:19:56 <emu> it would be interesting to see condition restarts
15:20:01 <emu> in haskell
19:09:42 <kawfee> how can you turn on tracing in hugs?
19:12:48 <Heffalump> what kind of tracing?
19:16:58 <kawfee> like stepping through an expression when it is evaluated
19:17:21 <Heffalump> you can't
19:17:33 <Heffalump> there's a program called hat that can do that
19:22:25 <kawfee> and...
19:23:24 <Heffalump> and what?
19:34:15 <kawfee> nothing
19:34:26 <kawfee> anyone know how to make emacs indent haskell for hugs correctly?>
19:34:55 <Heffalump> not if you're already using the haskell-mode and it's not working for you
19:43:58 <kawfee> I am
19:45:13 <kawfee> M-x turn-on-haskell-hugs does something
20:07:20 <kawfee> I'm trying to convert the following:
20:07:26 <kawfee> fc 0 = 1
20:07:28 <kawfee> fc 1 = 1
20:07:41 <kawfee>  fcn | n > 0 = n + fc (n-1)
20:07:52 <kawfee> using only if then else clauses
20:07:58 <kawfee> would the following be correct:
20:08:13 <kawfee> fc n = if n ==0 then 1 else
20:08:20 <kawfee>        if n == 1 then 1 else
20:08:33 <kawfee>        if n > 0 then n + fc(n-1) else 
20:08:55 <kawfee> I'm not sure exactly what to do about that last else, is there a blank statement in haskell?
20:13:20 <lament> you have to return something.
20:13:39 <lament> oh
20:14:18 <whee> you could eliminate that last if statement entirely
20:14:22 <whee> the original is undefined when n < 0, so yours could be too
20:14:52 <whee> or rather it will be defined, but behave oddly
20:18:24 <kawfee> huh
20:18:42 <kawfee> can you have an if then without the else?
20:18:54 <whee> no
20:19:05 <kawfee> ahh I see, I can get rid of the n ==1?
20:19:09 <kawfee> wait
20:19:11 <kawfee> no
20:19:13 <kawfee> arg
20:19:18 <whee> no, the n > 0
20:19:22 <whee> just assume if it's not 0 or 1, then it's > 0
20:19:37 <whee> obviously it'll behave incorrectly if n < 0, but that case is undefined in the given function so heh
20:19:50 <whee> or you could go and return something like -1 if n < 0
20:19:56 <kawfee> I can't
20:20:02 <kawfee> I have to use the given funciton
20:20:30 <whee> the given function is undefined for n < 0
20:20:50 <whee> so your function will behave exactly the same given n >= 0
20:21:13 <kawfee> hrm
20:21:15 <kawfee> ok
20:21:48 <whee> if you're only using if statements, there's no way to get around that
20:21:54 <kawfee> yeah
20:21:58 <kawfee> righto
20:22:19 <kawfee> I'm stuck on how to use patterns, anyone care to explain?
20:22:25 <whee> in what situations?
20:22:27 <kawfee> I understand them in strings
20:22:51 <kawfee> well, I have the following even n = if n == o then True else odd (n -1)
20:23:12 <kawfee> odd n = if n == o then False else even (n -1)
20:23:16 <kawfee> don't tell me how
20:23:20 <kawfee> I just want hints if you could
20:23:24 <whee> and what do you want to do
20:24:44 <kawfee> first I wan tto use guards, but I think I can figure that out, then I want to use patterns as much as possibl e and guards where patterns can't be used, but I don't know where I can use patterns
20:25:29 <whee> well look at the function you just pasted before and how you converted it to if statements
20:25:41 <kawfee> yeah?
20:25:42 <whee> then work backwards with this one
20:25:46 <kawfee> what?
20:26:12 <whee> you want to rewrite odd using patterns, right?
20:26:24 <whee> or rather more pattern matching and not the if statement
20:27:24 <kawfee> let me show you what I have for  the guarded case
20:27:31 <kawfee> even n
20:27:38 <kawfee> | n == 0  = True
20:27:48 <kawfee> | n /= 0  = odd (n-1)
20:27:51 <kawfee> odd n
20:27:56 <kawfee> | n == 0  = False
20:28:04 <kawfee> | n /= 0  = even (n-1)
20:29:15 <kawfee> I don't see anywhere I can use patterns
20:29:19 <kawfee> that is where I am lost
20:29:28 <whee> right, so you want to hoist one of those guards and use a pattern like the 'fc' function you had earlier
20:29:35 <kawfee> right
20:29:46 <kawfee> still lost
20:30:54 <whee> eeh
20:30:55 <whee> I don't know I can explain it without giving you the answer :)
20:31:24 <whee> the previous function you had shows you a version with an if statement, and the same thing using matching in the argument
20:32:18 <kawfee> hrm
20:32:38 <kawfee> wait
20:32:40 <kawfee> I think I see
20:32:45 <kawfee> even n
20:32:54 <kawfee> | n == 0  = True
20:33:18 <kawfee> wait wait
20:33:55 <kawfee> nope
20:33:57 <kawfee> lost again
20:34:00 <kawfee> that didn't work
20:34:53 <whee> you won't define the entire behavior at once
20:38:20 <kawfee> I need a pattern to check if a number is even or odd then?
20:39:04 <whee> no
20:39:07 <kawfee> hrm
20:39:08 <whee> look at the guards
20:39:18 <kawfee> n ==0 and n /= 0
20:39:23 <whee> each guard ends up being a 'separate' function declaration
20:39:28 <kawfee> ok
20:39:48 <kawfee> even n | n==0 ... ?
20:39:49 <kawfee> like that?
20:40:00 <kawfee> even n | n/=0 ... ?
20:40:11 <kawfee> please don't say yes, I'd be confused
20:40:20 <whee> no
20:40:22 <whee> heh
20:40:30 <kawfee> you didn't say that because I told you to did you?
20:40:41 <whee> look at the fc function again (the one they gave you to convert to if statements)
20:40:48 <kawfee> yeah?
20:41:08 <kawfee> ohhhh, wait...
20:41:15 <kawfee> my answer above was correct?
20:41:34 <kawfee> so even n | n == 0 actually evaluates it.. and checks some how..
20:42:13 <whee> no
20:42:13 <whee> that's still using a guard
20:44:33 <kawfee> bah~!
20:44:53 <kawfee> I can use guards, but I need to use patterns as much as possible
20:45:32 <olczyk> Ok. Very strange question. I want to use Haskell to access COM objects on WIndows.
20:45:44 <olczyk> AFAIU I need an idl file.
20:45:52 <olczyk> But I don't know how to make it.
20:48:04 <whee> kawfee: what's even 0?
20:48:30 <kawfee> True
20:48:35 <whee> so define that
20:48:53 <kawfee> even 0  == True
20:49:03 <whee> it's a function, so = not ==
20:49:09 <kawfee> yeah
20:49:10 <kawfee> sorry
20:49:15 <whee> then define even n
20:50:11 <kawfee> even n = odd (n-1)
20:50:21 <whee> indeed
20:50:24 <kawfee> that's it?
20:50:31 <whee> yes, then do the same thing with odd
20:50:37 <kawfee> so I should have:  even n
20:50:42 <kawfee> even 0 = True
20:50:46 <kawfee> even n = odd (n-1)
20:50:55 <kawfee> or can I take out the even n?
20:51:14 <whee> just the last two lines you pasted
20:51:57 <kawfee> why does the guarded condition need the even n at the beginning?
20:52:28 <whee> that's the function declaration
20:52:36 <whee> the rest is the guard determining what to do depending on the input
20:54:17 <kawfee> thanks for the help
20:54:20 <kawfee> I relaly appreciate it
20:54:22 <kawfee> really even
20:54:26 <kawfee> not really odd
20:54:30 <kawfee> heh
20:54:33 <kawfee> I amuse myself
20:55:21 <kawfee> now if I wanted to do a case I could do: 
20:55:25 <kawfee> case even of
20:55:41 <kawfee> 0 -> odd(n-1)
20:55:55 <kawfee> 0 -> True
20:56:01 <kawfee> _ -> odd(n-1)
20:56:09 <kawfee> take out that first one  0 -> odd(n-1)
20:56:52 <kawfee> how do I pass an arg to a case statement?
20:57:30 <whee> you don't
20:57:39 <whee> you need a function to do that
20:57:44 <kawfee> oh? how does it know about n ?
20:57:52 <kawfee> or the wildcard?
20:58:04 <kawfee> like the last one...
20:58:07 <kawfee>  _ -> odd(n-1)
20:58:13 <kawfee> how could I use the wildcard in that?
20:58:20 <kawfee> odd(_ - 1 )
20:58:23 <kawfee> ???
20:58:54 <whee> eeh, you only use _ if you don't care about what it binds to
20:59:33 <kawfee> eeek
20:59:56 <kawfee> so I need to bind this into some sort of function then in order to use a case statement?
21:00:23 <whee> yes, it's just like an if statement
21:00:33 <kawfee> but yeah, the wildcard doesn't matter anyways
21:00:40 <kawfee> since 0 is there, all I need is n 
21:00:57 <kawfee> case even n of ...
21:00:58 <kawfee> ?
21:01:13 <kawfee> even n = case n of ... 
21:01:14 <kawfee> ?
21:01:16 <kawfee> which one?
21:01:22 <kawfee> 1 or 2 ?
21:01:26 <kawfee> heh
21:01:54 <kawfee> well thanks
21:01:55 <whee> second
21:01:57 <kawfee> ahhh
21:01:59 <kawfee> makes sense
21:02:00 <kawfee> thanks
21:11:34 <whee> heh, I think cvs ghc is horribly broken
21:12:59 <whee> Prelude> [x*y | x <- [1, 2, 3] | y <- [3, 4, 5]]
21:13:00 <whee> ghc-5.05: panic! (the `impossible' happened, GHC version 5.05):
21:14:21 <whee>         getLinkDeps No iface for [<pkg>]DataziTuple
22:13:59 <kawfee> hrm
