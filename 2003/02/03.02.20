02:55:31 <shapr> good morning folks!
02:55:42 <shapr> how is everyone this sunny morning?
03:16:53 <eivuokko> Heya! It's pain to be inside, coding, instead of enjoying the sun...damn monitors :|
03:20:54 <shapr> I like both...
03:21:00 <shapr> it's always so hard to choose between sun and code.
03:21:11 <shapr> I want a sunny computer room.
03:23:38 <eivuokko> Too bad monitors tend to be hard to read in that case.
03:24:16 <shapr> is that also true for LCD monitors?
03:31:05 <eivuokko> Depends, I think.  Most of the ones around here can't direct, and mirror if you have too much light on your face.
03:31:17 <eivuokko> *can't take direct sunlight
04:20:33 <shapr> hej phubuh!
04:20:38 <shapr> vad gör du?
04:21:26 <phubuh> skolkar från min prao och försöker laga psgml
04:21:46 * shapr open his swedish dictionary
04:22:55 <phubuh> :-P
04:27:15 <shapr> actually, I'm going to figure out this DTD stuff, and then get the dictionary out...
04:31:26 <phubuh> great :-)
04:52:29 <shapr> hello :: IRC User -> IRC Greeting
04:52:30 <shapr> or something like that
04:55:14 <mgoetze> lol
05:05:55 * shapr bounces
05:06:03 <shapr> phubuh: written any neat haskell code?
05:06:20 <mgoetze> phubuh: will you be submitting an entry to the IOHCC?
05:40:31 * shapr yawns
05:42:18 * shapr bounces happily
05:42:21 <shapr> yay! I fixed psgml!
05:56:58 <steele> hi
05:57:16 <shapr> hiya
05:57:18 <shapr> what's up?
05:58:20 <steele> not much, should be learning for a test next week
06:24:14 <shapr> yay, joe english is working on namespace support for his xml parser
06:30:02 <Smerdyakov> There's a cartoonist by that name.
06:37:31 <shapr> hi Marvin-- 
06:37:36 <shapr> hi Smerdyakov
06:40:07 <Marvin--> hello
07:38:58 <SyntaxPolice> good morning :)
07:39:15 <mgoetze> hiya
07:39:17 <shapr> y0
07:39:34 <mgoetze> SyntaxPolice: wanna play go? :)
07:39:59 <SyntaxPolice> mgoetze: of course I do :) But I can't.  You need to stick around later in (my) day so we can play during lunch or something.
07:40:27 <mgoetze> SyntaxPolice: when and in waht time zone does your lunch take place?
07:41:37 <SyntaxPolice> eastern US time, sometime between 12:00 - 3:00, beginning in about 1.5 hours.
07:42:05 <SyntaxPolice> (as in, its 10:38 now)
07:42:12 <mgoetze> 10:42!
07:42:18 <SyntaxPolice> hmm. 
07:42:37 <SyntaxPolice> indeed, you're right
07:42:39 * SyntaxPolice runs rdate
07:43:11 <mgoetze> sounds like we'll be more likely to play on a monday or a tuesday then
07:43:21 * mgoetze isn't yet quite sure how long he will be here today
07:43:25 * mgoetze decides to find out.
07:43:51 <SyntaxPolice> ok
07:44:48 <Marvin--> I like this schedule
07:44:59 <Marvin--> It starts with "9.00 Coffee"
07:45:05 <mgoetze> lol
07:46:10 <mgoetze> brb
08:12:47 * SyntaxPolice gets annoyed when far too many functions are becomming Monadic :(
08:13:28 <esap> It's often possible to separate them to a monadic and non-monadic parts, if you think it's a problem.
08:14:43 <shapr> I begin to realize that I could write an xsl type checker in haskell, something that would look at the input and output DTDs and find flaws.
08:14:57 <SyntaxPolice> the problem is that I'm converting this code in an o.o. language to Haskell, just about every function in this class alters "this".  I don't have time to redesign, so much of it is ending up in a monad that echos the original design :(
08:15:27 <SyntaxPolice> and its kinda not intuitive that these functions belong in this monad, but they call functions that alter the state.
08:15:35 <shapr> suckage
08:15:48 <shapr> if you're writing unit tests as you go, you can come back and wildly refactor
08:15:49 <esap> syntaxpolice: oh. I don't think OO design works well in Haskell. You could dualize it to get a good functional program :-)
08:16:02 <shapr> esap: nice writings about duality on TheWiki btw
08:16:11 <mgoetze> SyntaxPolice: oh, looks like i'll be here longer today :)
08:16:11 <SyntaxPolice> dualize?
08:16:15 <esap> shapr: thanks.
08:16:17 <SyntaxPolice> mgoetze:  :)
08:16:36 <mgoetze> SyntaxPolice: i'll probably go to subway sometime soon, and when i get back, we could play
08:16:47 <SyntaxPolice> mgoetze: sounds cool. let me know.
08:17:04 <SyntaxPolice> got a pointer to the wiki on the subject?
08:17:47 <esap> syntaxpolice: basically you change all structures into unions, methods into constructors etc.
08:17:49 <SyntaxPolice> esap: I would say that the orig code is not very OO really, and I'd love to take the time to rediesgn it, but they want working code very soon.
08:18:53 <esap> syntaxpolice: ok, if the design is not OO, then I guess it might not be a problem. But OO design is not easy to do in Haskell.
08:20:30 <eivuokko> Value based oo design shouldn't be too hard.
08:20:47 <esap> syntaxpolice: http://c2.com/cgi/wiki?OoVsFunctional has something.
08:21:53 <esap> eivuokko: what is value-based OO design?
08:22:46 * esap defines OO design by "design based on encapsulating data and providing a small interface to that data"
08:22:47 <eivuokko> Something that doesn't use references/pointers much, but rather values.
08:23:20 <esap> eivuokko: but does it have centralized data in objects?
08:23:46 <Smerdyakov> esap, that's not a very good definition....
08:23:49 <esap> eivuokko: or does it separate data and behaviour.
08:23:50 <eivuokko> "centralized" doesn't make sense to me.
08:24:14 <Smerdyakov> esap, that's a usual design technique in Standard ML, for example, but I don't think most people would use that word.
08:24:17 <eivuokko> esap, most "oo" languages force the separation.
08:25:10 <Smerdyakov> The real features that make a language support "object oriented programming" are inheritance and subtyping/dynamic dispatch.
08:25:22 <ibid> esap described adt-based design, not ood :-)
08:25:38 <ibid> oo is a state of mind, not a feature set
08:25:45 <emu> inheritance is not needed
08:27:18 <ibid> inheritance is cool but hardly necessary - oo is about objects behaving
08:27:23 <esap> You mean object references are not directly related to OO, I guess. I think the essence of subtyping is that you can access the "object" using an interface that does not allow access to all information about the object.
08:27:53 <ibid> the essence of subtyping is that types are not disjoint :-)
08:28:05 <ibid> (subtyping is not a oo-only feature:-)
08:28:06 <eivuokko> Anyway, what I meant was that having "oo" design in an imperative language usually means that it's working on references, not values.  I'd say that most value based designs are easy to move to haskell, because such designs tend to have methods only for construction.
08:29:22 <Smerdyakov> That viewpoint just shows that you haven't thought about the essential features enough, eivuokko.
08:29:57 <ibid> an oo guru here describes that difference as variable-centricism versus value centricism
08:30:02 <esap> ibid: I think that's a good way of saying the same thing.
08:33:59 <shapr> if shareware expires before I've bothered to look at it, is that lazy evaluation?
08:33:59 <Smerdyakov> eivuokko, if you still hold to your previous statements, then you should try to think about what things you can do easily in "OO languages" that are harder in Haskell. I think you'll see your claimed qualities are not among them.
08:34:05 <shapr> hi opet 
08:34:40 <opet> hi
08:35:15 <shapr> opet: I don't think I've seen you here before, are you learning Haskell?
08:36:03 <ibid> hm, shapr, do you remember what "opet" in finnish means?
08:36:13 <shapr> student
08:36:15 <shapr> ?
08:36:22 <shapr> opetaja is teacher?
08:36:26 <opet> aren't we all still learning? :)
08:36:28 <ibid> ope is teacher
08:36:32 <shapr> ah
08:36:33 <ibid> colloquial
08:36:53 <shapr> opet: puhutko suomea?
08:36:54 <opet> but no, I'm using it in third year project at uni
08:37:00 <opet> wah?
08:37:12 <shapr> I asked you if you speak finnish
08:37:16 <shapr> not that I do actually ;-)
08:37:59 <shapr> opet: have any questions? need any help?
08:38:01 <shapr> hi hal
08:38:26 * shapr bounces impatiently
08:38:37 <hdaume> hi shae
08:38:38 * Riastradh dribbles shapr.
08:38:47 <opet> not really :)
08:38:57 * shapr drools and dribbles
08:38:58 <dennisb> bhha, I was just about to bring out my tennis racket
08:39:04 <opet> I hang around in #freebsd and I noticed #haskell.. thought I'd pop in
08:39:12 <eivuokko> Smerdyakov, as far as I understand, I didn't claim things were harder in haskell.
08:39:30 <shapr> do not taunt happy fun ball!
08:39:32 * Riastradh whacks dennisb with a tennis bat.
08:39:45 * shapr whacks xslt with a spiked club
08:40:07 * shapr equips larger weapons for XML proper
08:40:33 <shapr> we're all very violent today...
08:40:39 <shapr> is it that end of week feeling?
08:40:44 <shapr> desperate for the weekend?
08:40:45 <Riastradh> But it's not the end of the week.
08:40:51 <shapr> it isn't?
08:40:55 <Riastradh> ACK!  It's THURSDAY already!?!
08:41:19 * Riastradh thought it was Wednesday, and thus thought he was only halfway through with vacation!  Argh!
08:41:23 <shapr> yes it is, I have to hand in my estimate today.
08:41:31 <shapr> time flies when you're having fun.
08:41:43 <shapr> opet: are you doing something fun and interesting for your 3rd year project?
08:41:48 <Riastradh> But in the case of Haskell it's backslash, not fun.
08:42:13 * shapr thinks about that one
08:43:05 <shapr> oh! I get it!
08:43:06 <shapr> duh!
08:43:48 <opet> yes
08:44:04 <opet> iff haskell + spreadsheets == fun + interesting
08:44:11 <shapr> oh, that does sound like fun!
08:44:37 <Smerdyakov> eivuokko, "harder" might not have been the correct word, but I think I am suggesting an alternate way of deciding how languages support programming styles.
08:45:21 <Smerdyakov> eivuokko, i.e., your classification of "OO'ness" is seen to be silly because it's easy to use such functionality in languages no one calls "object oriented."
08:45:46 <eivuokko> My point was not oo, but the values vs references.
08:45:59 <Smerdyakov> OK
08:46:42 <eivuokko> It was just that there was talk about oo and imperative languages, which relates quite strongly (in practice) to having references and values.
08:46:50 <eivuokko> Sorry for the mess.
08:46:58 <esap> values vs. references is a different issue than "data in object" vs. "message passing between functionalities"
08:47:32 <Smerdyakov> Yes. Obviously there is a distinction between references and values when we talk about imperative languages. :P
08:47:37 <Smerdyakov> But it's not related to OO.
08:49:04 <ibid> Smerdyakov: oo is not a set of language features. it is a state of mind
08:49:22 <Smerdyakov> There are language features that make it a lot easier than otherwise.
08:49:31 * Smerdyakov goes away: class
08:49:32 <ibid> sure
08:50:12 <esap> OO design is something that involves layering, dividing the system based on its data and "capturing objects" based on conceptual models [or tell me a better name for these! :-)]
08:50:28 * eivuokko still doesn't understand where he claimed that oo and values and references walk together.
08:51:15 <ibid> esap: i'm not sure what you mean by them :-)
08:51:48 <ibid> esap: OO is about thinking about programs as sets of interacting anthropomorphic objects :-
08:51:51 <ibid> )
08:52:40 <esap> ibid: Yes. layering and conceptual models etc. relate to how you find out what things to design as objects.
08:53:14 <ibid> layering sounds like either the onion architecture or three-tier architecture. neither are oo :-)
08:54:19 <esap> ibid: layering is like the protocol stack layering [not related to tiers], that is, layering is based on the "X -is-allowed-to-use- Y" relation.
08:55:02 <ibid> yeah, onion architecture. not oo
08:57:52 <esap> ibid: but OO design enforces that it's objects that communicate with each other. Then you will have to divide the system into layers, each containing some objects based on which types of objects can use which interfaces. And interfaces can then be assigned to layers.
08:58:47 <ibid> there is no requirement to layer an oo system
08:59:03 <ibid> but layers can be used in an oo system, yes
08:59:21 <esap> ibid: but then what is subtyping used for?
08:59:37 <ibid> lots of things
08:59:47 <ibid> (and no, subtyping is not layering)
09:00:14 <esap> ibid: no, but to me it means you do not use subtyping for interfaces.
09:00:35 <ibid> well, you are using a strange def of layering then
09:01:01 <ibid> a haskell program can use the layered (onion) architecture
09:01:25 <esap> ibid: sure.
09:02:04 <ibid> the unix system is the prime example :-)
09:02:07 <esap> ibid: well I'm talking about interfaces between layers. A higher-level layer uses a lower layer through an interface.
09:02:32 <ibid> true, but that does not need subtyping
09:02:36 <esap> ibid: and subtyping is used for expressing the connection between that interface and the corresponding concrete component that implements the interface.
09:03:20 <ibid> it can be done like that but in actuality isn't done like that very often
09:03:24 <ibid> afaik
09:03:40 <esap> ibid: ok, what's the alternative way for doing that?
09:03:52 <esap> ibid: in OO style design?
09:04:27 <ibid> the facade design pattern is one possibility
09:07:00 <esap> ibid: Is that approach what I termed "message passing between functionalities" approach. That is, you have a facade that "hides" the functionality of a whole subsystem?
09:07:04 <ibid> more often than not the layers are not enforced but the design specified them
09:09:08 <esap> ibid: to me, functionality and layers are orthogonal [usually you have both]. But the OO parts are in the layered design part.
09:09:26 <ibid> a facade is an object that has a simple interface and uses a complicated set of classes to implement it (without any actual functionality in the object itself)
09:11:58 <esap> ibid: right. I think the important thing in facade is that it "hides functionality" [as opposed to hiding data].
09:12:23 <ibid> well, oo is about behaviour
09:12:39 <ibid> data is not very important
09:14:01 <esap> ibid: hmm.. well OO is also about behaviour. I'd phrase this as "OO is about having data and behaviour in the same place".
09:14:35 <esap> ibid: because inheritance is all about data.
09:15:55 <ibid> according to our local oo guru that's a misrepresentation of oo
09:16:01 <ibid> inheritance is overrated in oo
09:16:06 <ibid> according to him
09:16:50 <esap> ibid: heh, well I agree :­) I think inheritance is largely misunderstood.
09:17:30 <esap> ibid: inheritance is not about reuse. It's about sharing representation.
09:18:24 <esap> ibid: that is, "doing independent extension to data types".
09:18:26 <ibid> imho: there are two kinds of inheritance: implementation inheritance and subtyping.  it is harmful that they are usually lumped together
09:18:41 <ibid> the traditional inheritance concept is broken
09:18:45 <esap> ibid: right. subtyping is not inheritance. Subtyping is about behaviour.
09:18:54 <esap> ibid: inheritance is about data.
09:19:06 <ibid> no
09:19:20 <ibid> inheritance is representational reuse
09:19:45 <ibid> btw, there are (afaik) oo languages without the concept of inheritance
09:19:53 <opet> wow
09:20:07 <opet> sounds just like comp.lang.functional in here 
09:20:11 <opet> :)
09:20:13 <ibid> höhö
09:20:22 <esap> ibid: what languages?
09:20:22 <ibid> in which sense?
09:22:10 <ibid> prototype-based
09:22:40 <ibid> or (in the abadi-cardelli sense) object-based
09:22:56 <ibid> (which does not mean what we usually mean with it. object-based is a kind of oo)
09:23:38 <esap> ibid: hmm.. prototype-based OO is something I have quite little experience (I did read the abadi-cardelli book but I haven't actually used that paradigm much).
09:24:32 <Riastradh> 'Object-oriented programming' is far too vague a term.
09:24:50 <ibid> no, it is far too misused term
09:25:04 <mgoetze> SyntaxPolice: ya there?
09:25:21 <Riastradh> There are multitudes of different variants on it: CLOS, prototype-based, Smalltalk-style, et cetera; they're all entirely different yet they're all called 'object-oriented.'
09:25:58 <ibid> Riastradh: they are object-oriented because they are oriented around objects, that is, things with identity, behaviour and state
09:26:24 <Riastradh> No, they don't necessarily all have behaviour: in CLOS an object has identity and state, but behaviour is outside of it.
09:27:39 <ibid> well, even C calls certain things objects ;-)
09:27:46 <Riastradh> 'State' is achieved simply through lexical environment capture, i.e., closures; thus, it isn't really specific to 'object-oriented,' but static scoping.
09:27:52 <Riastradh> What do you mean by 'identity?'
09:27:57 <esap> When you have (object) identity, you basically get references.
09:28:07 <emu> no
09:28:13 <emu> not at the language level
09:28:24 <esap> Objects need to be identified somehow. And an object reference is a collection of data that contains the object identity (only).
09:29:05 <ibid> Riastradh: intensionality
09:29:14 <Riastradh> 'Intensionality?'
09:29:44 <ibid> Riastradh: two intensional things may not be the same thing even if they are identical features
09:29:51 <esap> An object identity that is a first-class value is basically the same thing as a reference.
09:29:55 <ibid> Riastradh: extensionality is the other one
09:30:14 <ibid> esap: identity need not be a way to locate an object
09:30:57 <esap> ibid: but are you then able to identify the object uniquely? To me, object identity is the only way to uniquely identify an object.
09:31:14 <Riastradh> I fail to see how this distinguishes 'object-oriented programming' from other styles.
09:31:16 <SyntaxPolice> mgoetze: yo
09:31:40 <mgoetze> SyntaxPolice: don't suppose you have a cgoban available?
09:31:53 <mgoetze> (or something of the sort)
09:32:12 <ibid> esap: yes, if they have an identity, then yes. and yes, you are right.  consider, my personal number uniquely identifies me but you cannot use it to locate me
09:32:25 <ibid> in the general case that is
09:32:47 <mgoetze> SyntaxPolice: if not, nngs.cosmic.org/web-clients.html might help :)
09:32:51 <emu> it's not that you can't have several identity numbers, it's that each one will only correspond to yourself, and no others
09:32:51 <ibid> Riastradh: identity, behaviour, state.  not identity alone
09:32:53 <esap> ibid: right. an object reference might not allow you to find the object.
09:33:05 <SyntaxPolice> mgoetze: can you hang on while I go home so I can play you from home?
09:33:16 <SyntaxPolice> (Then you might have to help me set up cgoban)
09:33:20 <ibid> esap: if it is a reference, then you will find it.  but an identity may not be a reference
09:33:23 <emu> ibid: behavior isn't tied to it
09:33:24 <Riastradh> ibid - But these are all simply aspects of generic statically-scoped functional languages.
09:33:29 <ibid> emu: yes it is
09:33:36 <mgoetze> SyntaxPolice: sure, np
09:33:45 <SyntaxPolice> OK be back soon.
09:33:50 <mgoetze> ok, cu
09:33:52 <ibid> Riastradh: as i said, oo is not a set of language features but a state of mind
09:34:24 <emu> I can define methods without having an object, they implement behavior.
09:34:26 <esap> ibid: oh, ok. [but this means for example CORBA object references are not references].
09:34:37 <ibid> Riastradh: OO is about thinking about programs as sets of interacting anthropomorphic objects :-)
09:34:37 <emu> you can't have state or identity without the object
09:34:53 <ibid> state and identity alone do not make an oo object
09:35:04 <ibid> they make a (named or nameless) variable
09:35:06 <Riastradh> No?  Explain CLOS instances, then.
09:35:10 <emu> variable? no
09:35:36 * ibid does not know enough of CLOS. anyway, even C has things that it calls objects, it does not make it oo
09:35:50 <emu> how about GTK+
09:35:59 <emu> it purports to be an OO-style in C
09:36:25 <Riastradh> In CLOS, instances have state but no special behaviour: behaviour is defined outside of instances.
09:36:33 <ibid> i can't say; i am not familiar with its design.  OO is often misused, though
09:36:36 <Riastradh> Defined outside of classes and instances, that is.
09:36:39 <emu> behavior is defined for generic functions
09:37:25 <Marvin--> gtk+ basically uses casting to implement inheritance, and uses available/hidden structs to implement public/private
09:37:35 <ibid> i know how it implements what it does
09:38:09 <ibid> gtk+ is certainly OO for some popular def of OO (that is, classes and inheritance. perhaps we should call it a CI-system:-)
09:38:17 <Marvin--> heh
09:38:34 <emu> what makes CLOS OO for me is that you can bind an instance to a variable and then start poking at it =)
09:38:34 <Marvin--> There are too many definitions of OO :)
09:38:40 <esap> but gtk+ has subtyping as well.
09:38:45 <ibid> emu: eh?
09:38:59 <ibid> emu: as i said, a CI system
09:39:09 <ibid> sorry s/emu/esap/ for the last line
09:39:25 <Riastradh> Exactly, Marvin: it's too vague and it's defined in too many ways for it to be at all a useful term.
09:39:32 <ibid> http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?Kevo :-)
09:39:35 <emu> (inspect (make-instance 'foo)) ;; poke poke...
09:39:45 <ibid> well yeah, OO is misused as a term
09:39:50 <ibid> emu: and that does what?
09:40:01 <Riastradh> No, not 'misused,' but poorly defined.
09:40:13 <emu> lets you inspect it!
09:40:21 <ibid> it is well defined, but many people just don't bother thinking it through
09:40:24 <ibid> emu: which is...?
09:40:35 <ibid> Riastradh: OO is about thinking about programs as sets of interacting anthropomorphic objects :-)
09:40:37 <emu> poking through the slots and object properties with some sort of tool
09:40:54 <esap> ok, maybe we should not talk about OO, just talk about identity, behaviour, state, inheritance, subtyping, prototype-based-design, layered-design, introspection, etc.
09:40:59 <ibid> esap: talk english :)
09:41:04 <Riastradh> ibid - But the objects aren't necessarily interacting with each other; outside things are making them interact.
09:41:05 <ibid> esap: good idea
09:41:17 <ibid> Riastradh: if they are not interacting, then it is not oo
09:41:33 <Riastradh> You would argue, then, that CLOS is not a real object system?
09:41:35 <ibid> Riastradh: an oo system consists of several objects that collaborate to fulfill requirements
09:42:13 <Riastradh> Objects in CLOS simply maintain state; generic functions and methods thereof do the interacting.
09:42:15 <ibid> Riastradh: i don't know CLOS well enough to judge it, but as I've repeatedly said, calling something in a system an object does not make the system OO
09:42:21 <esap> is the concept of an "object" well defined? Does object have identity, behaviour and state; or do we have to add or subtract something?
09:42:51 <Riastradh> ibid - 'Object' is a -VERY- vague term; it really just means a 'thing.'
09:43:26 <ibid> Riastradh: true.  however, in the context of OO, it has a specific meaning
09:43:29 <emu> no
09:43:34 <emu> your meaning is derived from Java and C++
09:43:45 <emu> CLOS predates both those systems
09:43:56 <emu> and it's predecessors go further back
09:44:08 <ibid> my meaning is not derived from java or c++
09:44:31 <ibid> my meaning is derived from two local oo gurus who both hate java and c++ very much :-)
09:44:37 <esap> I think the "identity, behaviour, state" definition is from Eiffel literature.
09:44:41 <emu> smalltalkers? =)
09:44:42 <Riastradh> There are -various- different definitions of 'object-oriented'; CLOS is one of them, Smalltalk is another, Self defines another, and then there are undoubtedly even more.
09:45:06 <ibid> emu: scandinavian school, probably simula
09:45:52 <SyntaxPolice_> mgoetze: OK, so how do I set up cgoban to use your server?
09:46:10 <mgoetze> SyntaxPolice_: apt-get install cgoban, run 'cgoban', click on nngs
09:46:55 <esap> a definition of object does not include the ability to change or remove methods, does it? [prototype languages offer that though]
09:47:01 <SyntaxPolice_> mgoetze: OK I loged inas syntax, unregistered
09:47:09 <ibid> esap: not necessarily
09:47:28 <mgoetze> SyntaxPolice_: 13 or 19?
09:47:35 <SyntaxPolice_> 13
09:47:36 <ibid> esap: it would rule out most static languages
09:47:59 <esap> ibid: well you could have a type system that understands removal of methods.
09:48:31 <emu> eh oh, static OO is a dubious thing anyway
09:48:31 <ibid> esap: not talking about types particularly
09:48:38 <ibid> heh
09:48:40 <esap> emu: hmm.. why?
09:49:10 <emu> you can argue that methods should be dynamically dispatched based on the actual runtime object class
09:49:19 <esap> emu: right.
09:49:46 <esap> emu: but dynamic dispatch is orthogonal to type systems.
09:49:46 <emu> and also
09:49:51 <emu> on multiple objects
09:49:53 <emu> not just a single one
09:50:39 <esap> hmm.. do all definitions of OO include dynamic dispatch? Can you have OO without it?
09:51:06 <ibid> not really
09:51:27 <esap> ok, but yes, multiple dispatch is a useful thing.
09:51:32 <ibid> in my def, it would break the behaviour requirement
09:51:41 <emu> you end up with nasty things like downcasting 
09:53:00 <ibid> multiple dispatch and dynamic dispatch is different :-)
09:53:37 <esap> emu: ok, but what if you had subtyping but not dynamic dispatch (a bit like Haskell :-)
09:53:47 <emu> http://www.cyberdyne-object-sys.com/oofaq2/
09:54:58 <esap> emu: why does that OO faq have "What is downcasting?" as the first question? :-)
09:56:02 <ibid> esap: haskell does have dynamic dispatch afaik
09:56:54 <emu> that's a "New" aqddition
09:56:54 <esap> ibid: oh right, silly me, I forgot about type classes.
09:57:25 <ibid> emu: who did you say that to?
09:58:10 <esap> or is type classes actually static dispatch. Hmm.
09:58:39 <emu> esap
09:58:57 <ibid> emu: they do require a dispatch table to be passed at runtime afaik
09:59:00 <ibid> argh
09:59:02 <ibid> esap
09:59:33 <esap> ibid: right that's a common implementation technique, but I think that's still resolved at compile time.
09:59:48 <ibid> okay
10:00:46 <esap> ibid: the runtime dispatch is just used as optimization to avoid excessive code generation, afaik.
10:01:26 <ibid> strange optimization but yeah ;-)
10:02:10 <esap> but does this mean Haskell is a good example of a language with subtyping but no dynamic dispatch?
10:02:35 * ibid does not know :-)
10:02:42 <ibid> how about existential types?
10:02:52 <mgoetze> i was afraid you'd do that :)
10:02:53 <ibid> they would probably require some kind of dynamic dispatch
10:03:00 <ibid> do what?
10:03:26 <esap> right, but existential types are just common extensions. 
10:03:52 <esap> I think existential types should provide both dynamic dispatch and "downcast" facilities to be useful.
10:04:30 <ibid> i believe i read somewhere that existential types are adt's; if you can downcast them, you break the encapsulation
10:04:59 <esap> ibid: but you can have downcast without breaking encapsulation.
10:05:11 <ibid> in OO, yes
10:05:13 <esap> ibid: if the language also has subtyping.
10:05:16 <ibid> but in existential types?
10:05:27 <ibid> different concept :-)
10:05:47 <ibid> there was a paper called abstract data has existential type or something like that
10:06:03 <esap> ibid: no, I mean crosscast.
10:06:33 <ibid> explain
10:06:58 <esap> ibid: you have a reference to an interface. Then you cast it and _maybe_ obtain a reference to another interface.
10:07:14 <esap> ibid: references come with existential types as well.
10:09:13 <esap> ibid: but those interfaces need not have any relationship to each other.
10:09:34 <esap> ibid: but to have "reference to interface", you need subtyping.
10:09:41 <ibid> sure
10:09:49 <ibid> subtyping is not existential typing, though :_)
10:10:41 <esap> hmm.. ok, this brings us to the concept of interface. I think there are at least two or three concepts traditionally called an interface :-)
10:11:11 <esap> and one of them coincides quite closely with existential typing (I guess).
10:11:25 <ibid> well, yeah, an interface is a version of ADT
10:12:49 <esap> one version of interface is "a type of a link between two objects". Another is "a type of a role of a link between two objects". Yet another is "a type of a data passed between functionalities".
10:14:52 <esap> the last one is quite close to existential typing, I guess.
10:15:41 <esap> I think you can use 'dependency' instead of 'link
10:15:57 <esap> ... and it's even clearer.
10:19:14 <esap> does that make sense?
10:20:14 <ibid> no? :-)
10:21:43 <esap> ok, if we have two objects, A and B, and they have some dependency, that is, one method of object A depends on the object B, and always to the same object. Then A contains a reference to B (or something like that). Then A has dependency to B.
10:22:29 <esap> But anyway, you can "type" that dependency, and the type of that dependency can be thought of as a specification of that dependency.
10:22:56 <esap> This specification is one way of describing an interface.
10:24:17 <esap> it's in a sense, "interface between class A_type and class B_type", which can associate requirements to both ends of the relationship.
10:25:22 <esap> That is, object A must satisfy some constraints and object B must satisfy some constraints. A specification of these constraints is the interface.
10:26:15 <esap> oh sorry. No, a specification of the constraints on the *dependency* is the interface.
10:27:05 <esap> but constraints on the dependency may require some constraints for the objects to be satisfied as well.
10:27:27 <SyntaxPolice_> mgoetze beat me by 4.5
10:27:49 <esap> because the dependency is a relationship between two objects.
10:27:56 <mgoetze> 'twas a good game :)
10:28:13 <mgoetze> SyntaxPolice_: back to work or another?
10:28:14 * SyntaxPolice_ is sorry he brought up oo programming several hours ago ;)
10:28:26 <esap> ibid: clear so far?
10:28:33 <SyntaxPolice_> lets play a fast 13x13. I'll probably lose worse, but I want to build intution, as I was saying :)
10:28:48 <SyntaxPolice_> I have no good players IRL toplay against.
10:28:48 <mgoetze> enforced quickness? :)
10:29:08 <SyntaxPolice_> so if I run out of byo-yomi time, I lose?
10:29:09 <ibid> esap: no :-) but don't worry, i'm off duty and won't concentrate enough to understand your stuff now
10:29:15 <mgoetze> eh?
10:29:26 <mgoetze> oh, i see... cgoban was displaying too much komi as usual
10:29:29 <SyntaxPolice_> if I fail to win 20 moves / 20 min,, do I lose?
10:29:31 <mgoetze> actually, SyntaxPolice_ won by 0.5
10:29:38 <mgoetze> SyntaxPolice_: yeah
10:29:39 <SyntaxPolice_> oh really?!?!
10:29:39 <esap> ibid: heh
10:29:54 * SyntaxPolice_ does the "surprised as hell to have won" dance
10:29:57 <mgoetze> SyntaxPolice_: bad news, eh? (this means i get black now)
10:30:02 <SyntaxPolice_> hehe
10:30:13 <SyntaxPolice_> OK, in that case, you get to choose the terms of the new game.
10:30:44 <mgoetze> i'll try to play quicker than i've given us time, though :)
10:30:51 <SyntaxPolice_> OK
10:35:27 <Igloo> How do halves happen?
10:36:02 <mgoetze> Igloo: eh?
10:36:21 * esap , when I play go, like to play white.
10:36:57 <Igloo> I thought the scoring was something like the difference of (number of picees captured plus number of empty squares controlled) of each player
10:37:32 <esap> igloo: yes it is.
10:37:33 <mgoetze> Igloo: well yeah, plus a little bonus for white 'cause it's weaker
10:38:26 <Igloo> Ah, a something-and-a-half bonus?
10:38:34 <mgoetze> yeah, usually
10:39:50 <emu> 6.5 now
10:40:25 <mgoetze> emu: in japanese pro games, you mean?
10:41:08 <emu> yes
10:41:40 <emu> it's called komi
10:41:57 <emu> just recently up'ed it from 5.5
10:42:31 <mgoetze> i think 6 is standard in germany, which allows for ties ("jigo"), of course
10:42:43 <mgoetze> SyntaxPolice_ and i are playing 0.5 right now
10:43:15 <emu> 0.5 is often used in games between not-so-close ranks
10:43:25 <emu> sort of a handicap 
10:43:36 <emu> while still preventing ties
10:47:51 * mgoetze steals a corner
10:51:16 <emu> heh
10:52:20 * emu goes "Duh"
10:52:35 <mgoetze> emu: you watching or something?
10:52:45 * esap thinks I'm missing some discussion :-)
10:52:46 * emu nods
10:53:00 <emu> i htink SyntaxPolice_ outsmarted himself
10:53:17 <mgoetze> i think i'm being mean :(
10:53:22 <emu> it was even
10:54:03 <emu> you ned to undo
10:55:02 <mgoetze> do both of us have to undo?
10:55:22 <emu> no
10:55:30 <emu> you shouldn't
10:55:36 <emu> if you want to undo one move
10:55:43 <emu> sounds like a client problem
10:55:49 <emu> ah there
10:57:50 <emu> oops ;)
10:58:00 <mgoetze> emu: you mean i made the right move? :)
10:58:06 <emu> you'll see
10:58:39 <mgoetze> oh, hm
10:59:02 <emu> =)
10:59:05 <mgoetze> lessee...
10:59:13 <emu> the idea was right, but the place was wrong
10:59:28 <mgoetze> but he's not alive, is he?
10:59:33 <mgoetze> oh, wait
10:59:34 <mgoetze> he is
10:59:36 <mgoetze> grmbl
10:59:46 <mgoetze> damnit
10:59:49 <emu> the idea with the throw in
10:59:56 <emu> is to cause him to place a stone in an awkward position
11:00:12 <mgoetze> yeah, that wasn't awkward enough
11:00:17 <emu> maybe it is even yet
11:00:27 <emu> no, that was precisely where he wanted to place a stone =)
11:01:00 <emu> ko ko ko
11:01:02 <mgoetze> ah well, did achieve a bit, though
11:01:03 <emu> aww
11:01:15 <mgoetze> hm, no ko?
11:01:25 <emu> well it's still there, but that wasn't much of a response
11:01:34 <emu> need a nice ko fight to liven it up
11:01:50 <mgoetze> hm, i'll do my best :)
11:01:50 <emu> keep playin it, there's more to go
11:02:14 <mgoetze> SyntaxPolice_: you're no fun :P
11:06:41 <emu> muhaha
11:06:45 * mgoetze curses gote
11:06:50 <emu> unnecessary!
11:07:16 <emu> you could've seized sente in the upper right
11:07:22 <mgoetze> yeah, prolly
11:07:22 <emu> looks like you got it now though
11:07:38 <mgoetze> well yeah, but my invasion plans are kinda ruined with b6
11:08:08 <SyntaxPolice_> heh, I haevn't been following the conversation here.
11:08:11 <emu> but of course
11:08:13 * SyntaxPolice_ is embarassed that he lost that corner
11:08:21 <emu> that's a natural move for him
11:08:26 * mgoetze is embarrassed that he didn't kill all the stones at the top
11:08:27 <emu> though he kind aforced himself into it
11:08:36 <emu> yeah, both of your mistakes kept it even =)
11:08:45 <emu> good job
11:08:57 * mgoetze thinks he lost this one
11:09:17 <emu> good =)
11:09:31 <emu> (and "bad" for SyntaxPolice_ =)
11:10:03 <emu> why do you think you lost, mgoetze ?
11:10:06 <SyntaxPolice_> :(
11:10:34 <emu> i think you're ahead by a point or two
11:10:34 <mgoetze> well, hm, looks a bit brighter now
11:11:07 <emu> SyntaxPolice_ has ~ 25 pts + komi
11:11:24 <mgoetze> so you're saying i shouldn't do a risky move now? :)
11:11:46 <emu> actually if you count the points (not hard now) you're ahead by quite a bit
11:11:50 <emu> you should learn to count points
11:11:55 <mgoetze> yeah, i know
11:12:13 <emu> if you want to do a risky move, do it. more fun fun fun
11:14:05 <emu> h7 seemeed rather useless
11:15:14 <mgoetze> emu: yeah, i had a cache problem there (wasn't correctly aware of eye at j6, thought it would force connect at g6)
11:15:14 <emu> i think there's only 2 pts left, including the ko
11:15:26 <emu> that would be moer like 1.3 pts
11:15:53 <emu> aww
11:16:17 <emu> the no-risk move
11:16:26 * SyntaxPolice_ must go back to work soon :)
11:18:12 <mgoetze> emu: did you call c4 a "no-risk" move? :)
11:18:37 <mgoetze> emu: i think i'm winning now, btw :)
11:19:03 <SyntaxPolice_> fuck
11:19:10 <emu> he went the wrong way
11:19:15 <SyntaxPolice_> somehow I didn't notice the connection :(
11:19:31 * mgoetze counts
11:19:43 <SyntaxPolice_> yeah, I think I'll resign.
11:19:51 <mgoetze> i make it about 8 territory for SyntaxPolice_ :)
11:20:01 <SyntaxPolice_> :(
11:20:04 <mgoetze> SyntaxPolice_: nice game anyhow
11:20:09 <SyntaxPolice_> thanks
11:20:15 <mgoetze> and you'll have black again next time!
11:20:16 <SyntaxPolice_> lots of big mistakes on my part.
11:20:23 <SyntaxPolice_> we're 2 for 1 :)
11:20:27 <SyntaxPolice_> (in favor of mgoetze)
11:20:36 <SyntaxPolice_> OK. Nice playing with you!
11:20:36 <emu> okay
11:20:37 <Marvin--> I should really spectate these games if I want to learn how to play
11:20:40 <SyntaxPolice_> I gotta go work.
11:20:42 <mgoetze> yeah, cya when you get back
11:20:46 <emu> this is what you should've done to protect:
11:20:47 <SyntaxPolice_> peace.
11:20:50 <emu> you should've protected c4
11:20:57 <emu> then when he tries to round the corner
11:21:03 <emu> form an eye at b1
11:21:07 <mgoetze> Marvin--: you can gobot replay the games for you on nngs
11:21:10 <emu> then black is screwed
11:21:29 <SyntaxPolice_> emu: I form an eye on b1 by moving on a1?
11:21:46 <mgoetze> emu: was 124 wrong or 126?
11:21:48 <SyntaxPolice_> or moving on b1
11:22:06 <SyntaxPolice_> emu: any high level advice? I'm particularly eager for strategy
11:22:07 <mgoetze> if 126[c5] my next move is hane at a2
11:22:31 <Marvin--> mgoetze: okay... how?
11:22:42 <SyntaxPolice_> mm. gotta go.
11:22:42 <mgoetze> Marvin--: connect to nngs and type "help request"
11:22:45 <mgoetze> SyntaxPolice_: cya
11:22:46 <SyntaxPolice_> I'll read later.
11:22:50 <SyntaxPolice_> (in case emu posts)
11:23:23 * mgoetze can't see how the white chunk can be saved
11:23:44 <emu> when he threatend c4
11:23:55 <emu> protect at c5
11:23:57 <emu> remember that?
11:24:02 <mgoetze> ah, i see now, after the hane eye at c1
11:24:10 * shapr boings
11:24:15 <emu> then black might hane at a2
11:24:23 <mgoetze> emu: yeah, then w b1
11:24:23 <emu> in which case white forms an eye at b1
11:24:30 <emu> or, black goes at b1
11:24:31 <Marvin--> /cgi-bin/gotot-search?first not found
11:24:31 <Marvin--> :(/
11:24:40 <emu> in which case white plays at a3
11:25:10 <mgoetze> then b a4
11:25:24 <Marvin--> mgoetze: tell gobot <number?>
11:25:41 <mgoetze> Marvin--: uhm, try Syntax-mgoetze
11:26:02 <Marvin--> agh, have to register first
11:26:04 <mgoetze> emu: then what?
11:26:32 * mgoetze doesn't think 128[a3] is the right answer to 127[b1]
11:26:32 <emu> no sorry
11:26:35 <emu> black a2
11:26:36 <emu> er
11:26:39 <emu> white a2
11:26:54 <mgoetze> yeah, that looks more likely :)
11:27:08 <Marvin--> damn them, having a plus in a mail address is TO valid
11:27:20 <mgoetze> brb
11:27:23 <Marvin--> they just don't want me to use my +spam address
11:28:47 <emu> should also look at white e4
11:28:52 <emu> that was safe
11:29:09 <emu> follow up with b c4, w c3 ...
11:29:16 <Marvin--> this doesn't bloody work
11:29:22 <shapr> I want namespace support in HaXml
11:29:35 <emu> my computers battery is supposed to be almost dead now. sgh.
11:29:36 <emu> sigh
11:30:07 <mgoetze> emu: you mean, way back? well, it would have won me the ko, at least
11:30:59 <emu> i mean, when i said SyntaxPolice_ made the no-risk move
11:31:20 <emu> it actually turns out that this was riskier than the "risky" move, but that took furhte inspection to determine =)
11:32:56 <mgoetze> well, it wasn't actually risky at all, presuming perfect play on his part :)
11:33:36 <emu> risky being a measure of trickiness, i guess =)
11:36:59 <emu> strategy?  always look for what gives points.  try not to form weak structures, otherwise you'll lose sente shoring them u.  keep sente =).  
11:37:50 <mgoetze> Marvin--: i've started the game on gobot
11:37:55 <emu> miai is good
11:38:07 <emu> try to have multiple ways to do something
11:38:13 * mgoetze doubts many people in this channel know what miai is... hehe
11:38:24 <shapr> isn't that a city in florida?
11:38:50 <mgoetze> no, that's miami :)
11:39:00 <shapr> ohh, yeah ;-)
11:39:06 * shapr snickers
11:39:12 <mgoetze> miai is basically two moves which are about equally good
11:39:14 <emu> and ppl pronounce it maiami around here
11:39:44 <mgoetze> i.e. one player does a move to secure a corner, and the other player secures another corner - that's a simple miai
11:39:44 <emu> maiemi
11:40:13 <emu> i was thinking more of connections such as diagonal
11:40:21 <emu> even if one way is blocked, you connect the other way
11:40:28 <mgoetze> yeah
11:40:37 <emu> miai for life inthe corner means there are two positions which will both grant life to the structure
11:40:37 <mgoetze> and run out with tobis :)
11:42:23 <emu> maybe i will use some of my upcoming free time to play go
11:42:25 <emu> woo
11:42:47 <Marvin--> free time? what's that? I've heard of it
11:43:01 <emu> i'm getting some as soon as i drop off this hw
11:43:04 <emu> i think
11:43:11 <mgoetze> Marvin--: it's the stuff you take the evening after an exam
11:43:35 <emu> it's better than drugs..
11:43:43 <emu> harder to get, too
11:44:24 <emu> i wonder how much longer my battery will last at 0%
11:44:50 <mgoetze> my cell phone always lasts several hours at 0% charge... :)
11:44:52 <emu> tiem to shutdown i guess
11:44:54 * shapr watches emu disconnect
11:45:35 <mgoetze> emu: buhbye
11:56:26 <shapr> hey Marvin--, you busy?
11:56:57 <Marvin--> shapr: since I need to wait for the ftpmasters to fix the sarge archive before I can commit this d-i stuff... no not really
11:57:21 <shapr> I wanted to ask for your advice on TwistedHaskell
11:57:46 <Marvin--> uh... I don't know that much about twisted, but okay
11:58:29 <shapr> how would you implement Jelly?
11:59:03 * mgoetze notes that we're behind the scheme implementation, they have jelly and are working on PB
11:59:26 <shapr> mgoetze: wanna help? ;-)
11:59:36 * mgoetze still has no idea what this is about :)
12:00:05 <Riastradh> Behind the Scheme implementation?
12:00:14 <Riastradh> Uh, it hasn't even started!
12:00:22 <shapr> mgoetze: how do you know about the scheme implementation?
12:00:31 <Riastradh> He's listening to our conversation in #scheme.
12:00:33 <shapr> oh
12:00:38 <mgoetze> yes, i'm a nasty spy
12:01:00 <Marvin--> heh
12:01:01 <Riastradh> Not that there's anything for you to spy on, of course; we've got no code yet!
12:02:39 <Marvin--> shapr: hmm, jelly... right, there were type problems with it, wasn't it?
12:03:16 <shapr> a list of integers in jelly should be ["list",1,2,3]
12:06:02 <Marvin--> okay, but we can't encode stuff in python objects anyway, since this is haskell, right?
12:06:28 <shapr> right
12:06:45 <Marvin--> so what stuff does what to those lists?
12:06:47 <shapr> but at the other end, jelly should be handed that sort of python list to decode
12:07:40 <Marvin--> there
12:07:44 <Marvin--> there's no serialization?
12:08:00 <shapr> banana does the bit level serialization
12:08:17 <Marvin--> okay, so don't we first and foremost need HsBanana?
12:08:23 <shapr> it's done.
12:08:36 <Marvin--> must HsJelly be implemented the same way PyJelly is?
12:08:55 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Banana.hs
12:09:21 <shapr> no, implementation can be different
12:09:27 <shapr> but I'm not sure how it can be different.
12:09:37 <shapr> porting code from Python to Haskell is very weird for me =)
12:09:46 <shapr> since Python is "more native" to me.
12:10:03 <shapr> that's why I want your advice.
12:10:14 <Marvin--> can class instances be encoded in jelly/banana too?
12:10:30 <shapr> yes, in jelly.
12:10:59 <Marvin--> I'm sorry, I don't think I know enough about the design
12:11:21 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Jelly.hs
12:11:33 <Marvin--> for example I don't see the advantage of layering jelly and banana. there's probably a perfectly reaonsable design behind it, but I don't know it
12:11:49 <shapr> you think they should be stuck together in a Haskell implementation?
12:12:43 <Marvin--> I have no idea
12:13:34 <shapr> I think I'm looking at this from the point of writing Python in Haskell.
12:14:16 <Marvin--> shouldn't unjelly be type b -> a btw?
12:14:37 <shapr> Jelly.hs is an abortive attempt :-)
12:14:44 <shapr> I gave up in disgust and went off to learn about Monads
12:14:57 <shapr> which has mostly succeeded
12:15:28 <Marvin--> well, since I don't know what advantage twisted.python gets from separating jelly and banana I don't know what to recommend for haskell
12:16:38 <shapr> hm
12:16:41 <Marvin--> what my intution says is the important thing is that if you take some python something and run it through jelly and banana, then unbanana and unjelly it in haskell it should be something meaningful, and then when you put it back through hsjelly and hsbanana and pybanana and pyjelly it should be the same thing still
12:17:09 <Marvin--> but I could be way off of course :)
12:17:22 <shapr> I agree with you.
12:17:39 <Marvin--> I don't see why it would make sense to mimic python lists with haskell lists, they are totally different
12:17:42 <shapr> I'd like to be able to pass native Haskell types into what looks like a normal socket or something
12:17:53 <shapr> that transparently encodes and sends to the python server
12:18:00 <Hase^^on> one question to all of you ! a creativ one :-) ! what do you expect in a banner for a homepage which treats and analyses board games ???
12:18:07 <Marvin--> sounds like you definitely want a type class then
12:18:17 <Marvin--> banner?
12:18:28 <Marvin--> you mean hideous graphic?
12:18:36 <Hase^^on> jepp :-)
12:18:37 <shapr> yes, typeclass. hmm.
12:18:42 <mgoetze> Hase^^on: i expect it to mention that the main focus is go, or not to exist at all. :P
12:18:59 <Marvin--> Hase^^on: I think I'd expect a chess piece, and then sigh at the mainstreamity of it
12:18:59 <shapr> I think I need to make a mapping between the python Jelly types and native Haskell types.
12:19:22 <Igloo> Jelly?
12:19:29 <shapr> Igloo: sound familiar? :-)
12:19:32 <Hase^^on> mgoetze: hmm go is good but not the best board game :-) (lotus is better)
12:19:34 <Marvin--> yes you need to have something that makes sense in Haskell for every thing that jelly can encode
12:19:42 <Igloo> The twisted thing?
12:19:50 <shapr> Igloo: yes, that's it.
12:19:55 <mgoetze> wtf is lotus?
12:20:00 <Igloo> Wouldn't twisted give you that?
12:20:09 <shapr> huh?
12:20:10 <Hase^^on> thx 
12:20:18 <shapr> Igloo: I don't understand?
12:21:07 <Hase^^on> I like this channel because I always get an answer ...
12:21:48 <mgoetze> Hase^^on: looks like some silly chess variant
12:21:48 <shapr> Hase^^on: nooo, a picture of an Icehouse set!
12:22:14 <Hase^^on> mgoetze: hmm lotus is not a chess variant at all !
12:22:29 <Hase^^on> mgoetze: its another game which has uncomparable rules ...
12:22:32 <mgoetze> Hase^^on: so answer the question!
12:22:42 <Hase^^on> mgoetze: which one ?
12:22:58 <mgoetze> Hase^^on: 21:19 < mgoetze> wtf is lotus?
12:23:16 <Hase^^on> mgoetze: see lotux.homelinux.org/~camold/ for it :-)
12:23:54 <Hase^^on> sharp: sorry, dunno what you meant ! explain it a second time pls
12:24:57 <emu> jelly, banana, scheme
12:25:14 <shapr> http://www.icehousegames.com/ <-- icehouse set
12:25:14 * emu scratches his head
12:25:26 <shapr> I should buy an Icehouse set for Igloo, because it fits his nick so well ;-)
12:25:49 <Hase^^on> sharp: mom
12:25:52 <shapr> eh?
12:26:00 <shapr> ps, it's "shaper" without an E
12:26:03 <Hase^^on> sharp: moment ... Im looking
12:26:09 <Hase^^on> E ?
12:26:16 <shapr> shaper - e = shapr
12:26:27 <Hase^^on> Oops
12:26:29 <Hase^^on> :-)
12:26:32 <shapr> :-)
12:26:53 <Hase^^on> sharo is better for a german to pronounce ^^
12:27:23 <Hase^^on> shapr ? what is the goal within icehouse ?
12:27:30 <mgoetze> Hase^^on: du willst mir ernsthaft verklickern, das spiel da sei besser als go?!?
12:27:44 <Hase^^on> mgoetze: ja will ich :-)
12:27:52 <Hase^^on> mgoetze: auf alle faelle ist es nicht schlecht
12:27:59 <shapr> icehouse is to board games as Haskell is to domain specific languages
12:28:01 <Marvin--> shapr: of course, functions, modules, classes, methods et.c. make no sense in haskell
12:28:02 <Hase^^on> mgoetze: kennst du phutball ?
12:28:16 <mgoetze> nee, will ich wahrscheinlich auch gar nicht
12:28:31 <mgoetze> was ich will ist jetzt mit dir go spielen, um festzustellen, dass du keine ahnung hast, wovon du redest
12:28:41 <Hase^^on> hehe wahrscheinlich ^^
12:29:02 <shapr> Marvin--: so you think something like PyModule, PyClass, PyMethod, just so I can send them back to the server?
12:29:08 <Hase^^on> aber sag mal was erwartest du bei so nem banner ?
12:29:53 <Marvin--> shapr: probably yeah
12:30:04 <mgoetze> gar nichts, ich achte eigentlich nie auf banner
12:30:26 <Hase^^on> hehe, genau das ist eben auch mein problem :-)
12:30:42 <mgoetze> kauf lieber werbung bei google
12:31:00 <Hase^^on> wie werbung kaufen ???
12:31:06 <shapr> ich habbe keine ahnung
12:31:18 <Hase^^on> shapr: habe is better ^^
12:31:23 <shapr> oh, thanks :-)
12:31:35 <Hase^^on> your an american shapr ?
12:31:37 <shapr> ich keine spreuchen deustche
12:31:40 <shapr> yes, I am.
12:31:41 <Hase^^on> your are an american shapr ?
12:31:44 <Hase^^on> ^^
12:32:15 <shapr> hi Janni!
12:32:17 <Janni> Heyeah, yeah yeah yeah!
12:32:22 <Hase^^on> shapr: if I have the right to correct you ^^: ich spreche kein deutsch :-)
12:32:38 <shapr> yes, everyone has the right to correct me!
12:32:42 <Janni> Hase: hares aren't supposed to speak
12:32:55 <Hase^^on> hares ?
12:32:58 <shapr> hase
12:33:08 <shapr> suchtig hase ;-)
12:33:13 <shapr> addicted to rabbits
12:33:18 <Hase^^on> suechtig ^^
12:33:19 <shapr> I'm still wondering about that one.
12:33:22 <Hase^^on> hehe yes I am
12:33:33 <Janni> hares have stupidly running around channels bouncing in and leaving
12:33:51 <Hase^^on> what do you mean with hares 
12:33:52 <Hase^^on> ?
12:33:58 <Hase^^on> Oops
12:34:08 <Hase^^on> sorry -> not native speaker ... :-)
12:34:19 <Janni> Hase: hare (engl.) = Hase (ger.)
12:34:36 <Hase^^on> jepp thats clear ^^
12:34:39 <Janni> looks similar to a rabbit but it's bigger
12:35:10 <emu> oh no, the germans took over here too
12:35:16 <Hase^^on> I actually now what the difference between a rabbit and a hare is ^^
12:35:25 <Janni> emu: the germans will take over the whole world!
12:35:32 <emu> like they haven't already tried
12:35:40 <Hase^^on> hmmmm :-(
12:35:44 <mgoetze> Janni: shhhh
12:36:01 <Janni> that was _ironic_
12:36:05 <emu> they took over #ocaml first... INRIA is in France, so no surprise
12:36:12 <redcrosse> heh
12:36:13 <Janni> 7msg mgoetze sorry, that i've told them
12:36:21 <Hase^^on> Oops, I recognized that I cant write anymore :-) I meant know not now .... ^^
12:36:50 <mgoetze> 7msg Janni now they'll find out about the plot of german staff members to get rid of lilo! you fool!
12:37:31 <Janni> http://elftor.com/elftor.php?number=129
12:38:04 * shapr laughs
12:38:16 <shapr> mgoetze, Janni: you guys are funny :-)
12:38:58 <mgoetze> there really are a lot of german freenode s(ervers|taff), hehe
12:39:04 <Janni> shapr: ok, then we succeded in (partly) disproving the stereotype about germans :)
12:39:44 * mgoetze thinks finns are funny too, what with that huge army of theirs meant to prevent a german invasion of russia :)
12:39:48 <shapr> well, I hope I disprove some of the stereotypes about USA citizens.
12:40:05 <Janni> sharp: flem.keenspace.com (you lost :)
12:41:08 <shapr> I lost?
12:41:12 * shapr is confused
12:41:56 <Janni> shapr: this is a (cool) US-critical webcomic (written by an US-citizen)
12:42:16 <Janni> but thinking about it, it mainly offends the government... and of course bush
12:43:08 <shapr> yah, there's some scary stuff happening in the US right now.
12:44:22 <Janni> does someone know a Pivot-Algorithm? in a test we should explain the task of a algorithm expressed in haskell and it centrally made use of a function named pivot. (i'll try to reconstruct it by head)
12:44:29 <Janni> s/head/heart
12:44:40 <shapr> quicksort has a pivot, doesn't it?
12:44:49 <shapr> several of the sort functions do
12:45:11 <Janni> yeah, probably it was a sort function
12:45:47 <Janni> err, no. it had the signature func :: [a] -> k -> a, so maybe a search function
12:46:00 <Janni> s/k/Int
12:48:15 <Janni> something like that (but really only something similar):
12:48:19 <Janni> func xs k
12:48:19 <Janni>         | k == len = pivot (k?)
12:48:19 <Janni>         | k < len  = func smaller k
12:48:19 <Janni>         | k > len  = func larger (k-1)
12:48:19 <Janni>         where
12:48:20 <Janni>         pivot = head xs
12:48:22 <Janni>         smaller = filter (pivot >=) xs
12:48:24 <Janni>         greater = filter (pivot <=) xs
12:48:36 <Janni> oh, shit. i hope it wasn't to much pasting
12:48:59 <mgoetze> Janni: prepare to be k-lined
12:49:19 * Janni faces his destiny
12:49:22 * shapr laughs
12:49:38 <mgoetze> :)
12:50:30 <Janni> i'm especially not sure about the (k-1). it could have been s.th. like (pivot+k-1)
12:51:30 <Janni> aw shit. forgot a line: "len = length smaller"
12:54:27 <Marvin--> mgoetze: Finish Him
12:54:43 <mgoetze> Marvin--: lol
12:55:01 <jlouis> haha
12:57:31 <mgoetze> aww, isn't he a nice boy? :)
12:58:05 <shapr> heh
12:58:11 <shapr> re Janni!
12:58:25 * mgoetze hopes Janni learned his lesson about excessive pasting! :)
12:58:30 * shapr argues with nameless adversaries on TheOriginalWiki
12:59:05 <Janni> 7msg mgoetze we may not fight against each other within the german conspiracy for taking over the world!
12:59:31 * shapr sickers
13:00:45 <Janni> it's a pity i don't know antique (give me a better word) english. such phrases sound much better then
13:00:55 <mgoetze> 7msg ok, then i will kill you and finish the conspiracy alone! mwahaha
13:01:02 <mgoetze> er, anyway
13:01:15 <Janni> hmm. i don't like "it's a pity". is there another expression in english for the german "leider"?
13:01:18 * mgoetze hopes everyone is aware that / is shift-7 on german keyboard :)
13:01:29 <mgoetze> Janni: depends on the context
13:01:39 <mgoetze> Janni: "unfortunately" might work
13:01:47 <Janni> although I don't use a german keyboard
13:01:55 * mgoetze doesn't either...
13:02:02 <Janni> aww shit! we told them again!
13:02:07 <mgoetze> ?msg Janni maybe we can trick them like this?
13:02:28 <Janni> 7mgoetze no. good germans have to use DEUTSCHE keyboard
13:02:59 <radix> I *hate* those keyboards
13:03:01 <Janni> mgoetze: yep. "unfortunately" is much better
13:03:08 * radix remembers trying to type on croatian keyboards.. ugh
13:03:20 <radix> let alone that they're not dvorak :P
13:03:45 <Janni> "let alone"? is this a fixed english expression or just wrong?
13:04:00 <radix> mmh, kinda
13:04:08 <radix> but admittedly I said that awkwardly :)
13:04:41 <Janni> radix: never^Walways answer an OR-question with TRUE or FALSE
13:04:53 <radix> it's usually "Well, <bad thing>, let alone <slightly less bad thing>"
13:04:55 <radix> Janni: :P
13:05:18 <Janni> radix: i'm using dvorak :)
13:05:59 <mgoetze> french keyboards are the worst
13:06:48 * hdaume can't stand british keyboards....they're close enough to american to get you comfortable, but different enough to constantly mess you up
13:06:56 <radix> yeah. I can deal with qwerty because I grew up on them (but use dvorak now), but the qwert*z* with / on the shift+7 was doubly hard :p
13:07:18 <radix> and then I took a trip to hungary, and had to use one of _those_
13:16:44 <Janni> radix: there is one bad thing about using dvorak: you have to tell everybody, why you can't really type on other keyboards and then explain dvorak
13:17:41 <radix> but it's a great way to keep snoopers away from your computer :D
13:17:51 * mgoetze finds it easy enough to explain his preference for QWERTY over QWERTZ and AZERTY
13:18:36 <Marvin--> / is on shift+7 on Swedish keybords
13:18:42 <Marvin--> keyboards even
13:19:07 <radix> it seems pretty ubiquitous outside of english keyboards..
13:19:37 <Janni> s/english/dvorak (ok, dvorak _is_ an english keyboard layout (kind of))
13:19:55 <radix> err? no, I meant english
13:20:09 <Janni> yeah, i misinterpreted ubiquitous
13:20:09 <radix> QWERTY doesn't have 7 on shift+7, at least the querty's here in the US :)
13:20:14 <radix> s/7/\//
13:20:41 <Marvin--> swedish qwerty keyboards have / on shift+7 :)
13:20:48 * radix stares at Marvin--
13:21:02 <hdaume> american keyboards have / on /
13:21:04 <radix> Marvin--: why are you repeating yourself? :)
13:21:10 <radix> hdaume: :D
13:21:11 <Janni> hdaume: :)
13:21:25 * mgoetze is very happy with his sgi keyboard
13:21:42 <Marvin--> radix: I thought it best to specify that swedish keyboards are qwerty
13:22:03 <radix> yeah, that's why I originally said "english" ;P
13:22:24 <radix> I can't speak for brit keyboards however.
13:22:30 <radix> i've never seen one. hdaume?
13:23:20 <Janni> have i ever elaborated about my imaginery perfect keyboard?
13:23:23 <hdaume> they're qwerty, but stuff is in the wrong place.  i don't remember exactly, but i had a really hard time at AFP this past summer
13:23:31 <Janni> in this channel, I mean
13:24:09 <Janni> i'll just explain my thoughts. maybe someone is here who will "steal" my thoughts and produce such a keyboard.
13:24:17 <Janni> then i could happily buy one :)
13:25:29 <mgoetze> my idea of a perfect keyboard is a sun type 5 which weighs less, has a standard ps/2 interface and looks as good as an sgi keyboard
13:26:04 <radix> I really like the overlaid numpad on laptop keyboards
13:26:10 <radix> as strange as that may sound
13:26:33 <radix> because I don't have to move my right hand to access movement keys when I want to use apps that don't have sane keybindings
13:27:20 <Janni> ok. my keyboard would be bipartite. that means you would have one part for every hand. so you could place your hands in one line with your shoulders. just try it. lay your hands left and right of your keyboard and imagine typing. IHMO it already feels great. the special about that keyboard is, you could use one part as a mouse, so you wouldn't have change from keyboard to mouse and back when working (this really would cut the edge).
13:27:57 <Janni> besides you could place your drugs (food, sweets and stuff) between the two parts. this would be really practical
13:28:42 <Janni> the two parts should be formed like, let's say half... eggs. so that they really fit into the hand
13:29:06 <radix> hmm! yes
13:29:11 <Janni> could anybody imagine what could be done with the other half of the keyboard? two mice don't really make sense
13:29:13 <radix> i could place a drink with a straw right in the middle. :D
13:29:46 <Janni> radix: exactly. do you know how often i drop food on my keyboard because i can only place in in behind it on the table?
13:29:56 <radix> :)
13:30:10 <Janni> fortunately i have a cover on it
13:30:18 <Janni> (yes, _while_ typing)
13:30:48 <Hase^^on> //amsg\\\ good night to all ! I'm going to bed ...
13:30:52 <mgoetze> Janni: then bend down and bite the food without using your hands?
13:30:54 <Janni> the only thing i could think of using two mouse functionalities were games
13:31:06 <Janni> mgoetze: _i_ didn't think of that
13:31:32 <Janni> but if s.th. would drop, it would drop on the plate
13:31:50 <Janni> no would in if sentences! fuckit
13:32:34 <mgoetze> Janni: :)
13:32:40 <mgoetze> s/would/were to/
13:32:43 <Janni> besides the keyboard would make heavy use of modifiers. like F1 = Fn-key + 1
13:33:05 * jlouis smiles and looks at his happy hackers keyboard
13:33:20 <Janni> and keys like space, return, delete, shift would be used by the thumbs
13:33:37 <Janni> jlouis: i'm using one, too, but they aren't really perfect
13:34:09 <jlouis> indeed not, but they are better than most other keyboards
13:34:30 <Janni> jlouis: but they have _no_ chance against my imaginary keyboard! :)
13:34:37 <jlouis> I just got a second monitor. I have the most malicious setup i've seen in a long time
13:35:04 <mgoetze> jlouis: bet it doesn't beat my sgi monitor, sgi mouse and sgi keyboard on a 4-port switch
13:35:21 * jlouis cackles and boots up his sparc ;)
13:35:38 <jlouis> I need an alpha or MIPS though
13:35:49 * mgoetze has sparc, pa-risc, mips, and amd
13:36:09 <jlouis> pa-risc is nice too. Not fast. I am on a B2000 at work partially
13:36:20 * Janni is disillusioned since there are no ethusiastic reactions on his descriptions
13:36:25 <mgoetze> we have some B2000s in the computer lab here at uni
13:37:40 <Janni> to point out: i'm not speaking of s.th. like natural keyboard, but _really_ two parts
13:38:48 <keyboarder> Janni: it's amazing!
13:38:55 <keyboarder> Janni: it's just great!
13:38:59 <keyboarder> Janni: incredible!
13:39:09 <Janni> thx, keyboarder!
13:39:46 <Janni> he still got visions
13:52:22 <shapr> Janni: you should try kinesis contoured keyboard
13:52:26 <shapr> I'm using one
13:53:14 <shapr> http://www.kinesis-ergo.com/images/elan.jpg
13:53:39 <shapr> you may also like the evolution keyboard
13:53:41 <shapr> http://www.kinesis-ergo.com/images/evol_chair2.jpg
13:54:20 <andersca> shapr: I'm getting one of those
13:54:26 <shapr> andersca: the contoured?
13:54:27 <andersca> I've had some really bad wrist problems :/
13:54:55 <shapr> andersca: I have heavily remapped my kinesis, I have many suggestions
13:56:08 <shapr> one of them is to buy contact juggling balls and learn to spin :-)
13:58:34 <andersca> :)
13:58:42 <jlouis> Another is to buy juggling balls and throw them :)
13:59:01 <jlouis> or clubs (since clubs are a lot funnier than balls :)
13:59:27 <Janni> shapr: yeah, i was thinking of buying one, but you know, they aren't _that_ cheap. and you still can't use them as a mouse (as i want it to do :)
14:00:18 <shapr> the only time I require a mouse right now is to select text from a web page, or to paste from the copy buffer into xemacs
14:00:21 <jlouis> screw the mouse. We cut the cords off at work and juggled with them
14:00:39 <jlouis> that is a better use
14:00:53 <Janni> shapr: which window manager? which browser?
14:00:58 <shapr> ion, galeon
14:01:18 <Janni> galeon is controllable by keyboard well?
14:01:19 <jlouis> malicewm, mozilla ; )
14:01:39 <shapr> galeon is 97% controllable from the keyboard
14:01:45 <radix> Janni: it's got the `search for text with keyboard'  feature, which is very nice for keyboard usage
14:01:53 <Janni> yay! i've found myself a new browser :)
14:01:59 <Marvin--> yeah, it's very neat
14:01:59 <radix> you just start typing, and it'll focus on the link that you typed
14:02:06 <shapr> yah, great feature
14:02:11 <Marvin--> I didn't notice it until recently
14:02:17 <radix> or if you don't want to only match a link, prefix it with `/', and it'll match against all the text
14:02:23 <radix> the only sucky thing is when you want to click on an *image* link
14:02:37 <Janni> but the dependencies :'(
14:02:54 <shapr> C-l jumps to the location field, C-t opens a new tab, M-num jumps to the numbered tab
14:03:10 <radix> I actually switched back to mozilla
14:03:11 <shapr> C-pgup C-pgdn goes back and forward tabs
14:03:15 <shapr> radix: why?
14:03:22 <radix> the new galeon got rid of too many features
14:03:23 <jlouis> C-x C-c exits emacs
14:03:27 <jlouis> ;)
14:03:33 <jlouis> the most important command
14:03:36 <radix> I can't live without "block images from this server" in the right-click context menu
14:04:25 * Janni doesn't know whetcher to take galeon1 or galeon2
14:04:40 <Janni> s/whetcher/wether :)
14:04:51 <Janni> s/wether/weather
14:05:12 <radix> galeon1 has more features and is generally stabler
14:05:13 <Janni> ok that was on purpose
14:05:44 <shapr> there's galeon2?
14:05:47 <radix> yes
14:05:50 <radix> `galeon-snapshot' in debian
14:05:59 <radix> it's not actually released, iiuc.
14:05:59 <Janni> for gnome 2
14:06:03 <shapr> hm, havent tried it.
14:06:04 <radix> in development
14:06:08 <radix> shapr: don't bother ;\
14:06:10 <Janni> radix: well, there is a FreeBSD-port
14:06:39 <shapr> radix: anything worth checking out?
14:06:41 <radix> Janni: well, what I mean is, "galeon 2.0 hasn't actually been released yet"
14:06:41 <radix> i.e., the "stable" version
14:07:16 <Janni> aww fuckit. i don't want to install all that gnome stuff
14:07:50 <radix> shapr: at first, the only reason I used it was for the typey-searchy-thingy
14:07:50 <radix> but that was rolled back into galeon1
14:07:50 <radix> so, no.
14:07:50 <radix> Janni: how about just mozilla?
14:07:52 <radix> it's got all the important features we were talking about
14:08:32 <Janni> radix: i have phoenix installed (but mostly using dillo and w3m).
14:08:46 <Janni> i'll check it's features...
14:16:31 <shapr> hi CrashChaos, what's up?
14:16:46 <CrashChaos> hey shapr.. trying to understand that lazy evaluation.. but messed it up somehow :)
14:17:01 <shapr> you have some code that doesn't work?
14:17:10 <CrashChaos> it does work.. kinda :)
14:17:19 <shapr> how long is it?
14:17:23 <CrashChaos> 4 lines
14:17:45 <shapr> paste it?
14:18:02 <CrashChaos> fibo xs = fibo [foldr1 (+) (a++b)] ++ drop 2 xs
14:18:02 <CrashChaos>     where   
14:18:02 <CrashChaos>     a = take 1 xs
14:18:02 <CrashChaos>     b = (drop 1 . take 2) xs
14:18:27 <CrashChaos> should (if I did it right) calculate the fibonacci sequence when called with fibo [1,1]
14:19:14 * shapr reads
14:20:00 <CrashChaos> then I thought calling take 10 (fibo [1,1]) should use that lazy evaluation and stop the fibo calculations after the tenth element.. but it did not.. so apparently I understood that lazy thingy wrong
14:20:30 <shapr> hi Pseudonym 
14:20:50 <shapr> CrashChaos: I've always used the : operator to make lazy lists.
14:20:55 <Pseudonym> G'day.
14:21:08 <jlouis> fib = 1 : 1 : [a + b | (a,b) <- zip fib (tail fib)]
14:21:13 <jlouis> or something
14:21:13 <shapr> CrashChaos: something like "ones = 1 : ones"
14:21:16 * CrashChaos doesn't know that operator
14:22:07 <CrashChaos> so ones = 1 : ones is the same as ones = [1] ++ ones ? except it's.. uuh.. lazy?
14:22:14 <shapr> right
14:22:23 <jlouis> exactly
14:24:02 <CrashChaos> hm.. I replaced the above with fibo xs = fibo (foldr1 (+) (a++b) : drop 2 xs).. but that doesn't work?
14:25:48 <shapr> CrashChaos: for example, "head (filter (> 5) [1..])" only pulls six elements from the infinite list, and then stops.
14:26:31 <shapr> since head means "give me the first element"
14:26:34 <CrashChaos> yes.. that's the behaviour I tried to get here too.. only pulling some elements from the fib sequence and then stopping
14:27:52 <shapr> hm
14:28:35 <shapr> I suspect either foldr1 or ++ aren't the right thing to use
14:28:43 <shapr> but I'm not sure.
14:29:21 <Pseudonym> What did you try here?
14:29:27 <Pseudonym> Hang on, I'll read the logs.
14:29:41 <CrashChaos> I can replace the first ++ with (head xs : b) but that doesn't help 
14:29:58 <jlouis> fib = 1 : 1 : [a + b | (a,b) <- zip fib (tail fib)]
14:30:08 <jlouis> I think it is easier
14:31:02 <Marvin--> jlouis: cute
14:32:19 <CrashChaos> jlouis: that's fine.. but why I'm trying to understand why my version isn't lazy?
14:33:02 <shapr> yah, I'm curious as well.
14:33:05 <CrashChaos> shapr: could it be that I'm adding new elements at the beginning of the list?
14:33:19 <shapr> I suspect that foldr1 might be trying to build the entire list before giving any of the elements
14:33:33 <shapr> but the jlouis version is building a list element by element with the (:) op
14:33:35 <Pseudonym> I think so too.
14:33:41 <Pseudonym> foldr (+) consumes the whole list/
14:33:51 <CrashChaos> but the list I give to foldr only contains 2 elements
14:34:08 <Janni> CrashChaos: you definitely have the wrong nickname
14:34:12 <Pseudonym> Oh!
14:34:17 <Pseudonym> Duh.
14:34:18 <CrashChaos> Janni: how so?
14:34:26 <shapr> Pseudonym: what is it?
14:34:28 <Janni> CrashChaos: you can't crash CHaOS (Cool Haskell OS)
14:34:43 <shapr> heh
14:34:45 * CrashChaos can crash everything ;p
14:34:47 <Pseudonym> Imagine what you'd get if you called fibo with a two-argument list.
14:35:02 <Pseudonym> You'd get a and b, two 1-argumenbt lists.
14:35:10 <Pseudonym> Uhm...
14:35:13 <Pseudonym> No, I see.
14:35:22 <Pseudonym> fibo calls fibo recursively.
14:35:44 <Pseudonym> When xs gets down to a 1-element list, the recursion is infinite.\
14:36:21 <Pseudonym> Suppose xs has one element.
14:36:25 <Pseudonym> xs = [x]
14:36:29 <Pseudonym> Then a = [x] and b = []
14:36:53 <Pseudonym> The RHS then calls fibo [foldr1 (+) [x]] ++ stuff
14:37:01 <Pseudonym> Which is infinite recursion.
14:37:19 <CrashChaos> Pseudonym: but that wouldn't happen if I called it with [1,1] ?
14:37:20 <Marvin--> [foldr1 (+) xs] will always be a singleton list...
14:37:25 <Marvin--> unless xs is [] of course
14:37:41 <Pseudonym> CrashChaos: Yes it would on the second time around.
14:37:59 <Pseudonym> fibo [1,1] would call fibo [2] recursively.
14:38:18 <Marvin--> which would call fibo [2] recursively :)
14:38:25 <Pseudonym> Exactly.
14:38:49 <Pseudonym> What you have there isn't a lack of laziness, it's a bug. :-)
14:38:54 <Marvin--> heh
14:39:38 <CrashChaos> and how's this: fibo xs = fibo (foldr1 (+) (head xs : b) : xs) ?
14:40:01 <CrashChaos> where b = (drop 1 . take 2) xs
14:40:20 <CrashChaos> hrm.
14:40:26 <Pseudonym> Well that won't infinitely loop.
14:40:28 * CrashChaos thinks he has to think about what this actually does again
14:40:34 <Pseudonym> It won't give you the Fibonacci sequence, though.
14:40:44 <CrashChaos> indeed.. messed it up now
14:43:18 <CrashChaos> next try: fibo xs = fibo (head xs + (head (drop 1 xs)) : xs)
14:43:56 <Marvin--> CrashChaos: anything on the form   fibo xs = fibo (...) ...  won't terminate and give you anything at all
14:44:17 <Marvin--> unless you have a base case
14:44:23 <CrashChaos> Marvin--: I know.. that's why I'm doing it that way as I'm currently trying to understand that lazy evaluation.. and why it does not fit in here
14:45:04 <Marvin--> CrashChaos: lazy evaluation won't help you unless you make it into a sort of a stream
14:45:16 <CrashChaos> what is a stream?
14:45:33 <Marvin--> CrashChaos: ones = 1 : ones  is sort of a "stream" because it will always be a 1 followed by ones, which will always be a 1 followed by ...
14:46:58 <CrashChaos> Marvin--: and a stream cannot be reversed? so it's impossible to get the fibonacci sequence into a stream when the biggest numbers are always added at the beginning?
14:47:00 <shapr> Pseudonym: http://c2.com/cgi-bin/wiki?AndrewBromage ;-)
14:47:12 <Marvin--> CrashChaos: no, because there is no biggest fibonacci number
14:47:29 <Marvin--> CrashChaos: sorry, that's a mathematical fact that no amount of lazy evaluation can help :)
14:47:32 <mgoetze> Marvin--: is too! prove that there isn't!
14:47:45 <Marvin--> mgoetze: oh dear, you don't believe in RAA?
14:47:57 <mgoetze> lol, nm :)
14:48:09 <CrashChaos> mgoetze: isn't the definition of the sequence the inductive proof all by itself? :)
14:48:31 <mgoetze> CrashChaos: no, not quite (though it helps)
14:49:05 <CrashChaos> add the proof for monotony and you're set
14:49:34 <Marvin--> I guess it depends on how rigorous proof you want
14:49:35 <Pseudonym> Might be easier to prove it directly.
14:49:45 <Pseudonym> First prove there exist at least to FIbonacci numbers greater than zero.
14:49:51 * CrashChaos thinks he should learn features like lazy evaluation differently though.. instead of trying to break them when not even fully understanding them :)
14:50:04 <shapr> I think breaking things is the best way to learn
14:50:09 <CrashChaos> Pseudonym: the sequence is defined as starting with 1,1.. no proof needed there
14:50:12 <Pseudonym> Now assume that F(n) is the largest.  Then F(n) + F(n-1) is greater than F(n).
14:50:15 <mgoetze> hm, i'd say you have to prove that all fibonacci numbers are greater than 0
14:50:29 <Pseudonym> mgoetze: Actually, that's true.
14:50:31 <shapr> I remember when I first ran fdisk.. I thought, I don't a need a partition, whatever that is...
14:50:50 <mgoetze> which can be proven by induction, of course :)
14:50:57 <Pseudonym> You need that fact to prove that a Fibonacci number is greater than the two previous numbers.
14:52:11 <mgoetze> yeah, the rest of the proof is trivial :)
14:53:07 <CrashChaos> F(0) = F(1) = 1; still to proof: F(n+1) > F(n) for n > 1. n=2: F(2) = 1+1 > F(1) correct. F(n+1) = F(n) + F(n-1) with F(n) > F(n-1) and F(0) > 0 we conclude that F(n+1) = F(n) + e with e > 0 therefore F(n+1) > F(n).. or something like that at least :)
14:54:59 <mgoetze> uuuuhm
14:56:15 <Pseudonym> Want to see some evil infinite lazy stream code?
14:56:22 <Pseudonym> http://andrew.bromage.org/E.hs
14:56:36 <Pseudonym> OK, it's not _that_ evil.
14:56:46 <mgoetze> F(n+1) > 2F(n-1).... hm, yeah, think that works
14:56:58 <Pseudonym> I challenge anyone to prove it correct, though.
14:57:37 <mgoetze> Pseudonym: are you submitting it? :)
14:57:52 * Pseudonym already has submitted an entry
14:57:55 <Pseudonym> Despite being a judge.
14:58:03 <Pseudonym> I'm going for the "worst abuse of the rules" award.
14:58:56 <CrashChaos> mgoetze: simple: F(n+1) = F(n) + F(n-1) > F(n-1) + F(n-1) as shown before (only works for n>2 of course)
14:59:11 * mgoetze considers going for the "best plagiarized" category :)
14:59:17 * Pseudonym laughs
14:59:35 <Pseudonym> If you submit one which generates "pi" instead of "e", you might be in with a chance.
14:59:36 <mgoetze> Pseudonym: oh, btw, that test message was not a submission ;)
14:59:49 <Pseudonym> Oh, OK.
14:59:50 <mgoetze> oh, is that what that does then? lol
14:59:52 <Pseudonym> That explains it.
14:59:58 <Pseudonym> Yes, try running it.
15:00:11 * Pseudonym laughs evilly... little does he know it's a virus...
15:00:45 <mgoetze> Pseudonym: uhm, how long is it supposed to run? :)
15:01:02 <CrashChaos> mgoetze: how many digits do you suppose e might have? ;)
15:01:23 <mgoetze> CrashChaos: about 3+2i....
15:01:43 <Pseudonym> mgoetze: It has a main.
15:01:56 <Pseudonym> Run it and find out.
15:02:01 <mgoetze> Pseudonym: yeah, that isn't exactly terminating over here
15:02:11 <Pseudonym> Or, alternatively, run your halting problem solver on it.
15:02:22 * mgoetze doesn't have a hps.
15:02:30 <Pseudonym> You haven't?
15:02:36 * Pseudonym should upload his to haskell-libs.
15:02:42 <mgoetze> unless i have one and didn't know it is one :)
15:03:01 <Pseudonym> That's the problem.  If you do have one, you can never know...
15:03:20 <mgoetze> take ... e seems more useful than main :)
15:03:29 <Pseudonym> Actually, that's a point.
15:03:40 * CrashChaos finds this very confusing considering he's going to write an exam tomorrow and learned that there cannot be a hps
15:04:03 <Pseudonym> CrashChaos: You know the so-called proof that there cannot be a HPS?
15:04:31 <Pseudonym> You assume you have a solver, then modify it to produce an impossible program.
15:04:31 * mgoetze guesstimates Pseudonym's E.hs to have about O(n^2) complexity...
15:04:38 <Pseudonym> mgoetze: Yup.
15:04:55 <Pseudonym> Well, you see, the so-called proof makes two tacit assumptions.
15:04:57 <CrashChaos> Pseudonym: yes.. so you cannot have one
15:05:10 <Pseudonym> The first is that you know that you have a solver.  The second is that you are able to modify it to suit.
15:05:31 <Pseudonym> It's logically reasonable for you to have a HPS, so long as you are unable to know it.
15:05:46 <Pseudonym> Or unable to modify it.
15:05:53 <CrashChaos> the proof does not modify it !?
15:06:00 <mgoetze> now, if you could write a program to generate n digits of e with O(n^e) complexity, that would be extremely cool...
15:06:05 <CrashChaos> it only embeds the turing machine into another TM
15:06:12 <Pseudonym> Oh, that's right.
15:06:21 <Pseudonym> OK, so it also assumes that you can understand the output.
15:06:32 <Pseudonym> In order to use it in the outer TM.
15:06:37 <CrashChaos> the output is defined by the problem though
15:06:40 <Smerdyakov> mgoetze, can't you, easily?
15:06:52 <mgoetze> Smerdyakov: i can't, can you?
15:06:54 <Pseudonym> Hmmm...
15:07:04 <Pseudonym> Actually, you're right.  So scratch the second assumption.
15:07:04 <CrashChaos> a TM that can decide the halting problem will output either 'yes it stops' or 'no it runs and runs'
15:07:23 <Smerdyakov> mgoetze, I don't know. You think it will take you more time per digit into e you get?
15:07:24 <Pseudonym> It's still possible to have a HPS so long as you are logically barred from knowing that you have one.
15:07:36 <Pseudonym> And hence using it to create the "impossible" TM.
15:07:55 <mgoetze> Smerdyakov: well, as noted, Pseudonym's solution seems to be O(n^2)
15:08:25 * Pseudonym could make it waste some time to bring it up to N^e if you want.
15:08:28 <CrashChaos> Pseudonym: I disagree. the proof clearly shows that if you have such a machine you do not need to know anything about it but still it breaks things
15:08:49 <Pseudonym> CrashChaos: You do realise that I'm trolling, don't you?
15:08:57 * Pseudonym just thought he'd mention it
15:09:16 <CrashChaos> Pseudonym: as I said.. I'm writing a bloody exam on that TM-stuff tomorrow.. so I'm not letting any confusing ideas stand in the room ;)
15:09:22 * Pseudonym laughs
15:09:23 <Smerdyakov> Pseudonym, if it's O(n^2), it's also O(n^e)....
15:09:38 <Pseudonym> True!
15:09:39 <mgoetze> Pseudonym: yes, please, as long as you prove that it's exactly O(n^e) :)
15:09:47 <Pseudonym> It's just not Theta(n^e)
15:09:50 <Smerdyakov> "Exactly n^e"....
15:09:55 <Smerdyakov> Someone has confused his notation.
15:09:59 <Pseudonym> Indeed.
15:10:32 <mgoetze> yeah, well, the prof kinda flew over that chapter rather quickly so he could get back to set theory... :)
15:10:43 <Pseudonym> I tried breaking the world record for number of continued fraction partial quotients of pi once.
15:10:49 <Pseudonym> My machine ran out of memory.
15:10:57 * Pseudonym needs a new algorithm
15:10:57 <Smerdyakov> mgoetze, it's terribly simple, so that's no excuse.
15:11:12 <CrashChaos> what's set theory btw?
15:11:19 <mgoetze> Smerdyakov: also, it was an 8 am lecture :)
15:11:26 <Pseudonym> CrashChaos: It's kind of like list comprehensions.
15:11:29 <mgoetze> CrashChaos: mengenlehre
15:12:21 * mgoetze wonders whether his answer was more helpful than Pseudonym's :)
15:12:27 <CrashChaos> ooh.. the boring 'draw some circles and draw intercections in different styles' stuff
15:12:52 <CrashChaos> mgoetze: it was ;)
15:13:05 <mgoetze> CrashChaos: uhm... something like that, yeah
15:14:07 <CrashChaos> mgoetze: yeah yeah.. it is advanced to some x \in A => x \in B when A \subset B.. but it's still pretty much the same as in elementary school imho
15:14:34 <Smerdyakov> LOL
15:14:43 <Smerdyakov> Try taking a set theory course some time, CrashChaos.
15:15:00 <Smerdyakov> If it still feels like elementary school, then you're Mr. Big Time Largehead Thinker Guy.
15:15:09 <mgoetze> CrashChaos: i do wish they would teach it properly in elementary school so that one could skip a few basics at uni, yeah :)
15:15:35 <creature> Hey Mike.
15:15:36 <CrashChaos> maybe.. I dunno whether they offer them here though.. I only heard 'analysis' which included set theory.. but only at elementary level then I guess?
15:15:39 <mgoetze> hi alex
15:15:53 <Pseudonym> Yeah.  Teach the axiom of choice to 9-year-olds.
15:15:59 <Pseudonym> And all its consequences.
15:16:08 <mgoetze> CrashChaos: you hardly need any set theory for calculus (== analysis)
15:16:14 <Smerdyakov> If you're at a non-small university, there will probably be at least one course with "set theory" (or your local language equivalent) in the name.
15:16:28 <mgoetze> aw, damnit
15:16:47 * mgoetze must leave very soon
15:17:03 <mgoetze> though i was quite enjoying this conversation
15:17:23 <CrashChaos> what else is there in set theory? I only had stuff like Schröder-Bernstein, relations, equivalence classes..
15:17:38 <Smerdyakov> Ask Wikipedia
15:17:45 <Smerdyakov> That's always the first place to go for math questions.
15:17:48 <mgoetze> CrashChaos: julia sets? :)
15:17:51 <Pseudonym> Or mathworld.
15:17:58 <mgoetze> (aka fractals)
15:18:03 <CrashChaos> mgoetze: did those at 'gymi' already ;)
15:18:03 <shapr> or #math
15:18:07 <Smerdyakov> Not MathWorld. Unless you're a Capitalist Pig.
15:18:12 <mgoetze> bye!
15:18:19 <CrashChaos> Smerdyakov: where's that wikipedia ?
15:18:25 <shapr> wikipedia.com
15:18:26 <Pseudonym> Or ask Google about "Zermelo Frankel".
15:19:24 <Pseudonym> Smerdyakov: While I'm not a Capitalist Pig (more a Capitalist Runt), I feel sorry for Eric.
15:19:50 <CrashChaos> wikipedia says 'Basic set theory' too.. so it is for elementary grade after all :)
15:20:19 <CrashChaos> in fact the link even goes to a page with heading 'Naive set theory' 
15:20:41 <Pseudonym> Yeah.  The reason for that is that naive set theory is inconsistent.
15:21:12 <Pseudonym> The problem is the axiom of comprehension.
15:21:20 <Pseudonym> (Therefore, list comprehensions are logically impossible.)
15:22:01 <esap> now that's a nice conclusion.
15:22:04 * CrashChaos should study maths after his CS degree.. too interesting to miss it
15:22:55 <CrashChaos> anyways thanks for your help and the nice discussion.. gn8
15:22:57 <shapr> yah, I want to go for a math degree also
15:23:00 <Pseudonym> Night.
15:23:03 <shapr> gnite CrashChaos 
15:23:08 * Pseudonym might go for a maths degree one of these days
15:23:13 <Pseudonym> Actually, no.
15:23:16 <shapr> Pseudonym: do you have a degree?
15:23:19 <Pseudonym> I've known too many mathematicians.
15:23:20 * Pseudonym does
15:23:22 <Pseudonym> Computer science
15:23:24 <Smerdyakov> A degree of strangeness.
15:23:24 <shapr> cool
15:23:27 <shapr> I want a degree.
15:23:32 <Smerdyakov> shapr, they're easy.
15:23:38 <Pseudonym> Yeah, they are.
15:23:43 <Smerdyakov> shapr, you just go to classes and take some tests. No biggie.
15:23:47 <Pseudonym> Right.
15:23:50 <shapr> I hope to learn some math along the way :-)
15:23:56 <Smerdyakov> That's easy, too!
15:23:58 * Pseudonym did honours, too
15:24:05 <Pseudonym> 60% thesis
15:24:09 <Smerdyakov> I knew hardly any math before I started... and look where I am today! I can draw a circle without looking!
15:24:17 <shapr> wow!
15:24:17 <Pseudonym> Woohoo!
15:24:22 * shapr snickers
15:24:31 <Smerdyakov> Pseudonym, stopped at bachelor's degree?
15:24:51 <Pseudonym> Bachelors with honours.
15:25:01 <Pseudonym> Which is slightly different than bachelors in Australia.
15:25:11 <Pseudonym> It's another year with research component.
15:25:15 * Pseudonym started a MSc
15:25:19 <Pseudonym> Ran out of money.
15:25:20 <Smerdyakov> For how many years total?
15:25:27 <Pseudonym> Four total.
15:25:37 <Pseudonym> Not including the failed MSc.
15:25:46 <Smerdyakov> Sounds like an option I have, but I prefer to start a PhD.
15:25:49 <shapr> I ran out of money too.
15:25:59 <Pseudonym> The idea is you can convert your MSc into a PhD part-way through.
15:26:02 <Smerdyakov> Could have been 2 years to get my bachelor's with a little more planning in high school
15:27:38 <Pseudonym> Actually, of the research group I was in, 10 started and it looks like only 3 or 4 will actually get their higher degrees.
15:27:47 * Pseudonym doesn't feel so bad about dropping out
15:38:43 <Pseudonym> Speaking of dropping out.
15:43:22 <Smerdyakov> O me o my, humour city ;-)
15:43:30 <Smerdyakov> What was the subject of your research?
15:45:04 <Pseudonym> Strong alias analysis for Mercury.
15:45:32 <Pseudonym> You've heard of strong typing, well, this was strong aliasing.
15:46:10 <Smerdyakov> Hm. And you're a working stiff now? =)
15:46:33 <Pseudonym> Actually, I'm doing stuff that's far more interesting now.
15:46:35 <Pseudonym> Well, not _right_ now.
15:46:39 <Pseudonym> Right now I'm writing manuals.
15:46:51 <Pseudonym> But after the release I'll get back to interesting stuff. :-)
15:47:02 <Smerdyakov> Like?
15:47:29 <Pseudonym> Text retrieval.
15:47:45 <Smerdyakov> For a Capitalist Company? =)
15:47:59 <Pseudonym> Not in the Ayn Rand sense.
15:48:04 <Pseudonym> Most of our clients are Big Government.
15:48:22 <Smerdyakov> Ick. You got Rand all over the channel.
15:48:24 <Pseudonym> So more in the Chomsky Millitary-Industrial Complex sense.
15:49:03 <Pseudonym> Let's just say there are a lot of government agencies interested in multiple terabytes of text.
15:50:03 <Pseudonym> Especially in these uncertain times.
15:50:15 <Smerdyakov> Ew. How can you help them?
15:50:21 <Smerdyakov> Morally
15:50:34 <Pseudonym> Oh, that's easy.
15:50:39 <Pseudonym> We help the Good Guys(tm).
15:50:48 <Pseudonym> Our product was even mentioned in the second season of "24".
15:50:56 <Smerdyakov> Hooray! I don't know what that is!
15:50:59 <Pseudonym> And we all know CTU are the Good Guys(tm).
15:51:28 <Smerdyakov> I don't even know what CTU is, so I can't comment.
15:51:52 <Pseudonym> You have to have seen the show.
15:52:15 <Smerdyakov> Well, sarcasm/irony/whatever aside.... you aren't bothered morally by what you do?
15:52:28 <Pseudonym> Not really.
15:53:03 <Pseudonym> No more than being pro-free speech bothers me, seeing as how this means free speech for some pretty bad speech.
15:53:25 <Smerdyakov> Is your product freely available?
15:53:40 <Pseudonym> If by "free" you mean "$30,000 per CPU", then yes.
15:54:20 <Pseudonym> That's Australian dollars, of course.  More like US$15,000.
15:55:04 <Smerdyakov> So, I'm assuming you see how absurd your analogy is. =)
15:55:10 * Arnia decides to go into Governmental IA work ;)
15:55:35 <Pseudonym> True.
15:55:45 <Pseudonym> Well, consider this:
15:56:11 <Pseudonym> Do you suppose that the aerospace engineers at NASA worry about the fact that their stuff is mostly used for big business or millitary?
15:56:22 <Pseudonym> Probably not.  They're more concerned with developing new, cool technology.
15:56:22 <Smerdyakov> Nope.
15:56:54 <Smerdyakov> Do you suppose that torturers worry about the fact that their efforts help particular factions?
15:57:05 <Smerdyakov> Probably not. They're more concerned with plying their trades in new, cool ways.
15:57:37 <Pseudonym> I think that analogy is worse than mine.
15:58:24 <Smerdyakov> It's meant to expose your underlying assumption that choosing ignorance absolves one of blame.
16:03:11 <Pseudonym> I think my assumption is that you take the good with the bad.
16:03:39 <Pseudonym> And I do keep away from projects that I don't like.
16:04:14 <Pseudonym> Our product is used in government agencies, sure, but also in research grant applications.
16:04:19 <Pseudonym> Which is a good thing.
16:04:46 <Smerdyakov> Possibly, unless the research being granted money produces more toys for the ruling class to use for nefarious ends.
16:05:27 <Pseudonym> Or for evil geniuses to attempt to take over the world.
16:06:19 * Arnia thinks Pseudonym has been reading too much UserFriendly ;)
16:06:35 <Pseudonym> Very possibly. :-)
16:06:59 <Smerdyakov> Well, I'm sure you've thought about this quite enough already, but I was just curious to hear your justifications. It sounds like the main one is "there is no better way."
16:07:26 <Pseudonym> I think that's true.
16:07:35 <Pseudonym> Fact is, the world's incentives are set up badly.
16:08:16 <Pseudonym> Things could be different, but until they are, we have to work with what we've got.
16:10:40 <Smerdyakov> OK. I think you're clearly wrong, since many people lead very different lives than yours and enjoy them quite thoroughly. Some of them were in the past accustomed to the probably very affluent lifestyle you lead, and most weren't.
16:11:15 <Pseudonym> I agree that many people live very different lives than mine.
16:11:23 <Pseudonym> My lifestyle isn't particularly affluent.
16:11:31 <Pseudonym> On a global scale it probably is, of course.
16:12:02 <Pseudonym> However, I live in the western world.
16:12:17 <Pseudonym> Where I am, the incentives are set up a certain way.
16:12:44 <Smerdyakov> If you were doing a masters degree at a good university, then I'd be very surprised if you aren't in the top of the top in even Australian social/wealth structure.
16:13:03 <Pseudonym> Not really.
16:13:19 <Pseudonym> I was on a scholarship.
16:13:22 <Pseudonym> Most full-timers are.
16:13:37 <Pseudonym> The government gives out a lot of them.
16:13:57 <Smerdyakov> Neato. Not so here.
16:14:09 <Pseudonym> I mean I'm higher than most.
16:14:27 <Pseudonym> However, even though I earn a lot of money, I live in a single-income family with spouse and kids.
16:14:46 <Pseudonym> So our situation is similar to two people on low incomes.
16:16:39 <shapr> hey, any suggestions on rewriting this truck in Haskell: http://c2.com/cgi-bin/wiki?FunctionalIsPoorAtModeling
16:17:24 <Smerdyakov> OK. Perhaps idealism would have been more appropriate earlier in your life. =)
16:17:32 <Pseudonym> Yes. :-)
16:17:56 <shapr> I think that power/potential/etc is there to be used for good or evil, and each person has to choose.
16:20:07 <Pseudonym> shapr: I've actually started on a paper for JFP which partly solves problems like these.
16:20:19 <shapr> have a draft version available?
16:20:25 <Pseudonym> Oh, not even close.
16:20:35 <shapr> napkin I can read? ;-)
16:20:37 <Pseudonym> But some of the ideas were in a recent post to the mailing list.
16:20:46 * shapr looks
16:21:12 <Pseudonym> The general problem is that you have a family of "things", which have some similarities and some differences.
16:21:25 <Pseudonym> In multi-paradigm design, these are called "commonalities" and "variabilities".
16:22:15 <Pseudonym> Once you've worked out the commonalities/variabilities, and you've worked out when you want the binding to take place, there's often a language feature which directly captures it.
16:22:26 <Pseudonym> If not, there's a design pattern instead.
16:22:31 <shapr> yah, good point
16:23:29 <Pseudonym> So in this case, you have the domain "truck" and the domain "tyre".
16:23:43 <Pseudonym> And you have the subdomains "ford truck" and "tonka truck".
16:23:54 <Pseudonym> And you have the domain "tyre pressure".
16:23:55 <shapr> right
16:24:15 <shapr> check tire pressure is an operation on tyres
16:24:25 <shapr> getTire is an operation on trucks
16:24:25 <Pseudonym> No, don't think about operations yet.
16:24:28 <shapr> oh, ok
16:24:36 <Pseudonym> How are trucks similar?
16:24:40 <esap> pseudonym: is this like conceptual modelling you are trying to do for the example?
16:24:45 <Pseudonym> Kind of, yes.
16:24:55 <shapr> trucks are all load bearing vehicles
16:25:13 <Pseudonym> For the purposes of this problem, their similarities are going to have something to do with tyre pressure.
16:25:34 <shapr> they all have tires?
16:25:41 <Pseudonym> Probably.
16:25:52 <Pseudonym> It partly depends what a "tyre" is.
16:26:16 * shapr finds the relevant message
16:26:44 <esap> can you just treat tyre as a "name" or a "placeholder" that will get meaning once it's placed in a correct context with other concepts?
16:26:58 <Pseudonym> See, that's an important issue.
16:27:06 <Pseudonym> Ford trucks have more tyres than tonka trucks.
16:29:15 <shapr> so tires should be a spot where you can have a variable number and size of tires?
16:29:23 <shapr> it's a collection?
16:29:27 <Pseudonym> Or something.
16:29:34 <Pseudonym> In Haskell, you might want:
16:29:35 <esap> but functional modelling should start from the functionality. Operatoins. Have to identify what things are *done* rather than what parts participate.
16:29:47 <Pseudonym> class Truck truck tyre | truck -> tyre where { ... }
16:30:00 <Pseudonym> esap: Ah, but Haskell isn't just a functional language.
16:30:06 <Pseudonym> It is a multi-paradigm language.
16:30:25 <Pseudonym> It supports functional design, object-oriented design, imperative design and a number of other paradigms.
16:31:17 <esap> hehe. Well I'm still trying to implement a simple object model in Haskell :-)
16:31:29 <esap> tried it once, and couldn't do it.
16:33:42 <shapr> hi Chilli!
16:33:49 <Chilli> Moin!
16:35:02 <shapr> hi timd 
16:35:23 <shapr> Pseudonym: what's the -> do in a typeclass definition?
16:35:33 <shapr> is this fundeps or something like that?
16:35:39 <Pseudonym> Yes, fundeps.
16:35:40 <Chilli> shapr: functional dependency?
16:35:49 <shapr> ah, that's on my "to learn" list
16:35:55 <Pseudonym> The idea being that a truck can only have one kind of tyre, in this case.
16:36:04 <Pseudonym> So if you know what kind of truck it is, you know what kind of tyre it is too.
16:36:08 <shapr> oh, neat
16:36:22 <shapr> sounds like 'paired subclasses' or something
16:37:03 <shapr> Chilli: how's Nepal doing?
16:37:30 <Chilli> going slow, as I am distracted by other things
16:38:09 <esap> what's this Nepal thing?
16:38:12 <Chilli> Eg, http://www.cse.unsw.edu.au/~chak/papers/CKZ02.html
16:38:28 <Chilli> has been execpted for the COCV workshop co-located with ETAPS
16:38:36 <Pseudonym> Ooh, interesting.
16:38:37 <Chilli> now we need to finish the final version
16:39:30 <Chilli> esap: http://www.cse.unsw.edu.au/~chak/project/haskell+ndp/
16:40:11 <Chilli> shapr: the LNCS volume of the AFP summer school is apparently ready for print
16:41:34 <shapr> I admit, I'm impatiently waiting for MPI support to show up in parr
16:41:54 <shapr> not yet impatiently enough to try to implement it myself ;-)
16:42:50 <shapr> parr is cool
16:43:42 <esap> chilli: hmm.. this data parallelism thing looks very interesting. I have to look into it when I have some time.
16:45:56 <Chilli> esap: the lecture notes for the mentioned usmmer school are at http://www.cse.unsw.edu.au/~chak/papers/CK02b.html
16:46:48 <hdaume> Chilli: what sorts of other things have you been distracted with?  :)
16:47:15 <Chilli> hdaume: c2hs
16:47:29 <Chilli> you may have seen the recent release announcement
16:47:37 <hdaume> ah, yes
16:47:39 <Pseudonym> See, Smerdyakov, Chilli depends on our software to eat.  Isn't a little death and destruction worth that?
16:47:56 * shapr grins
16:49:22 <Chilli> shapr: maybe I'll wait until you get impatient enough to implement the MPI support ;-)
16:50:09 <shapr> if I end up with any more PCs in my room...
16:50:56 <Igloo> Yeah, Fraskell now builds out-of-the-box  :-)
16:53:31 <hdaume> Chilli: the parr binaries on your webpage are linux only?
16:53:58 <Chilli> yeah, binaries are only for linux (as that's what I am running)
16:54:07 * shapr advertises parr
16:54:10 <shapr> get your copy today!
16:54:57 <shapr> I've been wondering if there's some relation between okasaki's flattening ops and parr's flattening ops.
16:56:18 <Chilli> what are flattenign of Chris?
16:56:43 <Pseudonym> And what are the flattening ops of parr, for that matter?
16:56:57 <shapr> he's flattening parentheses with his postfix papers.
16:57:54 <Chilli> no, I don't see how the postfix paper stuff would related to the flattenign trafo
16:58:39 <Chilli> Pseudonym: essentially the idea is to transform operations on arrays of arrays (where sub-arrays may be of varying size) into equivalent ops on flat arrays
16:59:02 <Chilli> the latter can be implemented more efficiently
16:59:06 <Pseudonym> Right.
16:59:22 <Chilli> the basic idea goes back to the PhD thesis of Guy Blelloch (who is Prof at CMU)
16:59:55 <Chilli> actually, there is also a paper of Belleloch and Sabot that mentions the idea (around the same time)
17:02:25 <shapr> I think the same idea is used in Sisal and I'm sure it's in Nesl
17:03:05 <shapr> my favorite feature is that it can be used to implement the mythical transparent parallelism of FP
17:04:31 <Chilli> It is in Nesl
17:04:44 <Chilli> Nesl is , in fact, by Guy Blelloch's group
17:05:03 <Chilli> however, Sisal didn't support *irregular* nested DP
17:05:29 <Chilli> Nesl only supports arrays and tuples as data types, though
17:06:57 <Smerdyakov> I was almost "in Guy Blelloch's group," but I accepted another offer instead. =)
17:07:57 <Chilli> Smerdyakov: who are you with now?
17:08:15 <shapr> Igloo: you have a new version of fraskell online?
17:09:16 <Igloo> If you haven't seen the GTK interface then probably, but not for a while now. The reason it builds out of the box is because of the new c2hs/gtk+hs releases
17:09:32 <Smerdyakov> Sort of Bob Harper. I'm an undergraduate, and I'm not doing much research during the academic year.
17:09:36 <Igloo> Oh, actually, teh released one won't build because the set of bugs in GHC has changed
17:10:15 <Pseudonym> I hate it when you can't rely on GHC bugs.
17:10:20 * shapr snickers
17:10:30 <Chilli> Pseudonym: lol
17:10:32 <shapr> hi timd, looking for haskell help?
17:10:33 <esap> pseudonym: ghc has bugs? whoa :-)
17:10:43 <shapr> esap: and they're unreliable!
17:10:49 <Pseudonym> I know!
17:10:51 <Chilli> Smerdyakov: cool, what are you doing with Bob?  Concert?
17:11:27 <esap> I think I've got *once* a program built with GHC to crash. And the problem went away once I cleaned and rebuilt.
17:11:36 <Smerdyakov> Sort of. I don't think I'm going to do anything else significant here before I leave for somewhere else this summer.
17:11:39 <Igloo> Amateur
17:12:07 <Chilli> Smerdyakov: where do you want to go?
17:12:27 <Smerdyakov> Cornell, Berkeley, or Princeton.... I'll know which after I visit =)
17:12:49 <shapr> esap: I'd have to agree with Igloo ;-)
17:12:51 <Igloo> I went through about 5 iterations of a "Send segfault report to SPJ, get back message saying it had been fixed" loop recently; it stopped when I didn't get a "fixed" message
17:13:40 <Igloo> Annoyingly I don't think it will ever build on IA32
17:15:46 <Chilli> Smerdyakov: fair enough
17:15:54 <shapr> I wonder if it would be easy to test TH with quickcheck
17:16:16 <Chilli> shapr: GHC has anice regression test suite
17:16:23 <Chilli> but people are lazy about putting tests in
17:16:37 <Chilli> I added a bunch of TH tests, but there should be many more
17:16:46 <shapr> I like the quickcheck style of testing
17:17:06 <Chilli> but it is hard to do with a compiler
17:17:14 <shapr> yes, it is.
17:17:34 <shapr> Heffalump had the idea of getting QC to save failing test cases for all further runs.
17:17:52 <shapr> I've been trying to figure out how I can get QC to do unit-test-first 
17:18:01 * esap is writing a compiler. Not yet in any shape to be tested though :-(
17:18:12 <shapr> of if unit-test-first applies to qc testing.
17:18:18 <Chilli> shapr: any success
17:18:25 <Chilli> esap: compiler for?
17:18:43 <esap> chilli: a language that I'm developing.
17:18:55 <esap> chilli: based on category theory.
17:19:04 <shapr> maybe I'm just too used to xUnit style testing.
17:20:27 <esap> chilli: basically the idea is that I try to ensure all the category theory stuff works in the language in very general sense [even more than in Haskell!] :-)
17:21:02 <radix> argh.
17:21:12 <radix> Every time I see `esap' I think `esad' :P
17:21:17 <shapr> what's esad?
17:21:52 <radix> A rude remark. :-)
17:22:20 <radix> Hrm, dict doesn't know it. :P
17:23:58 <esap> chilli: for example, I'm utilizing the symmetries very much (I have 3 symmetries implemented as primitive)
17:26:52 <Chilli> esap: I think, there have been languages based on category theory before
17:27:55 <dark> There have been languages based on foo before, for any value of foo :-)
17:28:02 <shapr> hi dark 
17:28:24 <Pseudonym> There has been no language based on anvils as far as I know.
17:28:41 <esap> chilli: sure. I've looked at a couple.
17:29:14 <shapr> Pseudonym: what about dwarvish? hm?
17:29:22 <Pseudonym> Oh, perhaps.
17:29:29 <Pseudonym> I thought dwarvish was mostly about gold.
17:29:36 <radix> hah.
17:29:56 <radix> If you go with Pratchett's dwarves, it'd probably be gold, not anvils
17:29:56 <Pseudonym> According to Terry Pratchett, most dwarf songs go someting like this:
17:30:02 <Pseudonym> "Gold, gold, gold, gold, go,d gold..."
17:30:03 <radix> HEH.
17:30:06 <Pseudonym> Exactly.
17:30:20 <dark> shapr, greetings :)
17:30:23 <Pseudonym> Disney's dwarves mostly sing "dig dig dig dig dig".
17:30:27 <radix> hehe.
17:30:33 <dark> "Hi ho, Hi ho"
17:30:40 <Pseudonym> My daughter knows that song well.
17:30:42 <emu> bugs bunny was based on anvils
17:30:45 <emu> among other things
17:30:47 <dark> But I bet a Hi is a dwarvish kind of anvil.
17:30:49 <Riastradh> I think Pratchett's dwarves are much more accurate.
17:31:02 <emu> accurate to what?
17:31:02 <Pseudonym> Disney's dwarves are completely dense.
17:31:03 <shapr> except for Glod Glodsson
17:31:16 <shapr> no way a dwark could play honky-tonk piano that well.
17:31:20 <shapr> er, "dwarf"
17:31:24 <Pseudonym> Though Charming(tm) and Lovable(tm).
17:31:26 <radix> Honky-Tonk?
17:31:29 <radix> hrm.
17:31:30 <emu> dwarks on the other hand..
17:31:37 <radix> I've only read about him playing a trumpet :)
17:31:39 <Chilli> dark: no problem in having previous languages based on similar principles, but the natural question is always: What's different?
17:31:44 <radix> when did he play piano?
17:31:48 <radix> (what book, I mean)
17:31:52 <dark> dwarks are a malevolent crossbreed between dwarves and orks.
17:31:56 <radix> haha.
17:32:09 <esap> chilli: the first ideas I took from citeseer.nj.nec.com/crolard99subtractive.html, and Hillmans paper "What is a concept", Then I've added lots of stuff from just basic category theory 'introduction' things, finite (co)products, finite limits etc, and all the standard category stuff of course (substitution, adjunctions, dom, cod, etc).
17:32:12 <dark> At least, the successful ones are dwarks.  The misfits are called dworks.
17:32:19 <emu> dwarfs and dorks
17:32:23 <dark> You never know how it'll come out if you mate with an ork.
17:32:27 <emu> also known as dorfs
17:32:44 <timd> sorry I've been silent - I'm actually trying to get ghc fired up on gentoo linux, and failing...
17:32:48 <shapr> Pseudonym: see what happens when you bring up anvils in a crowded room? ;-)
17:32:48 <emu> you never know how it'll come out if you were the type to mate with an ork
17:32:57 <shapr> timd: what's the problem?
17:32:59 <Pseudonym> Sorry everyone.
17:33:01 <dark> emu: You're assuming you would have a choice.
17:33:17 <timd> shapr: are you familiar with gentoo
17:33:20 <dark> Chilli: "this one is designed by me" :-)
17:33:21 <shapr> Pseudonym: problem with bringing up an anvil in a crowded room is that you're very likely to hit someone with that anvil.
17:33:33 <Chilli> dark: hehe
17:33:34 <shapr> timd: no, not at all. but I still might be able to help you.
17:33:36 <emu> not if you bring it up carefully
17:33:39 <esap> chilli: I'm trying to make a useful language out of just the categorical primitives.
17:33:45 <dark> shapr: Unless the anvil has "1000 Kg" written on it, in which case it's most likely you will end up hitting yourself.
17:34:00 * emu prefers the "16 tons"
17:34:29 <timd> Well, gentoo likes to buid everything from source, from the ground up. I've just rebuilt my work box
17:34:38 <timd> and it's all happy, except for ghc.
17:34:52 <emu> yes, they are nutty
17:36:00 <emu> people have too much CPU power for their own good
17:36:03 * emu is one of those people
17:36:39 <shapr> me too!
17:36:51 <shapr> dual 1544MHz athlon mp!
17:37:00 <emu> which one is that?
17:37:02 <emu> 1600 ?
17:37:10 <shapr> 1800+
17:37:19 <emu> I have MP 2000+s :-P
17:37:30 <shapr> wow, cool!
17:37:52 <shapr> see, that's a real desktop machine.
17:37:58 <shapr> I just need to buy some more ram.
17:38:03 * emu too
17:38:08 <shapr> 512mb isn't very exciting.
17:38:09 <emu> the price went up and up
17:38:39 <shapr> time for sleep, I have swedish class soon ...
17:38:51 <emu> if I load a bunch of clips into Premiere, I spike to nearly a GB of mem
17:38:53 <emu> usage
