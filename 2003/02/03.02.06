00:35:57 <shapr> http://www.bitwrangler.com/gvi/real-osi-model.html
03:08:58 <giedi> shapr: hehe
06:30:42 <Janni> hi all (took a while to find the right words)
06:31:26 <Janni> actually, i'm fixing some litte things of the HOpenGL-port for FreeBSD (yes, it's official now)
07:20:32 <Smerdyakov> Logan?
07:20:47 <Logan> Yes?
07:21:11 <Smerdyakov> Are you the Logan from TopCoder?
07:22:48 <Logan> Yep.
07:23:13 <Smerdyakov> Hello. I used "Psion" there.
07:27:21 <Logan> Cool, I recognize the handle.
12:55:03 <camold> cu all !
13:37:30 * shapr yawns
13:37:39 * whee throws food at shapr
13:37:43 <shapr> good morning #haskell!
13:37:49 * shapr gets pie in the face
13:37:57 * shapr gurgles custard
13:38:03 <eivuokko> Morning.
13:39:51 <radix> ewww
13:39:54 <mgoetze> mmm... custard pie
13:40:01 <shapr> custards last stand.
13:40:12 <mgoetze> haven't had any of that for, what, 8 years now?
13:40:12 * radix groans
13:40:26 <radix> mgoetze: !
13:40:36 <mgoetze> radix: ?
13:40:43 <radix> that's horrible :)
13:40:53 * radix loves custard pie.
13:41:07 <mgoetze> radix: yeah, well, i'm stuck in this silly place called germany where they don't have any :)
13:41:15 <radix> Ouch
13:41:25 <radix> you should teach the germans how to make it :-)
13:42:05 <mgoetze> if only i knew myself...
13:42:11 <mgoetze> send me a recipe :)
13:43:07 <radix> Internet!
13:43:22 <radix> %google custard pie recipe
13:43:27 <radix> oh, wait, pyn isn't here
13:43:27 <radix> :P
13:44:13 <radix> http://meme.essortment.com/custardpiereci_rqox.htm
13:44:42 <shapr> oh, I reread the Template Haskell paper today.
13:44:46 <shapr> it's AWESOME.
13:44:55 <mgoetze> radix: maybe tomorrow
13:45:05 * mgoetze is gradually getting to the interesting part of this bloody report.
13:54:37 <shapr> Igloo: if all the stuff mentioned in the TH paper is implemented, why not just stick a lineNumber call into your program, so TH can do the reflection for you?
13:54:59 <Igloo> Huh?
13:55:07 <shapr> you had an error yesterday?
13:55:16 <shapr> oh, duh...
13:55:33 <shapr> you'd have to know where in the source to put the lineNumber call.
13:55:44 <shapr> Igloo: never mind, user error
13:56:16 * Igloo is a bit lost, but I solved my problem (space leak) by looking at various types of heap profile, the source and it finally clicking
13:56:27 <shapr> I reread the TH paper today.
13:56:45 <shapr> I found the reflection/reification stuff impressive.
13:56:50 <Igloo> I need to work out why my program spends about 80% of the time doing system stuff
13:57:29 <Igloo> Not getting types in the datastructures reifying gives you turns out to be a big pain IMO
13:59:22 <Igloo> What are your licence views OOI, shapr?
13:59:34 <shapr> license for what?
13:59:51 <shapr> I prefer lGPL because then I can use stuff I've written for paying possibly closed source work.
13:59:52 <Igloo> programs and libraries you write
14:00:10 <shapr> even though I hate and fear using (much less writing) closed source stuff...
14:00:13 <shapr> I still need to eat
14:00:27 <Igloo> If you've written it you can GPL it and also use it for proprietary stuff
14:00:30 <shapr> and sometimes it's easier to persuade clients to use lGPL'ed software.
14:00:38 <shapr> yes, but other people can't
14:00:41 <Igloo> I'm talking about in your own time
14:00:51 <shapr> me too
14:01:05 <shapr> I plan on getting someone to pay me to write Haskell at some point :-)
14:01:07 <Igloo> Ah, OK, I got confused by your use of "I"  :-)
14:01:26 <shapr> I don't think I have much difference between my work and home code
14:01:30 <shapr> I feel the same way about all of it.
14:01:37 * Igloo is currently thinking of LGPLing libraries and GPLing programs
14:01:46 <shapr> oh, interesting thought
14:01:56 <shapr> oh, I like that idea.
14:02:05 <shapr> ok, I agree.
14:02:47 <Igloo> So why do you not use the BSD licence?
14:03:29 * Igloo should look back to see what libraries@ said about licences, if anything, some time
14:03:36 <shapr> last time I looked at licenses, I decided that lGPL gave the most freedom and right to users, but I don't remember why.
14:04:02 <shapr> hey, did you decide to get a userid on sf.net?
14:04:12 <Igloo> I think I have one, hang on
14:04:33 <shapr> I'm trying to add you to haskell-libs of course ;-)
14:05:02 <shapr> I'd like to have that project reach critical mass to become a wiki-style repository for Haskell code
14:05:32 <shapr> basically "add stuff you're writing, fix/improve anything"
14:05:32 <whee> heh, good luck on that :P
14:05:46 <shapr> whee: do you have an sf.net uid? ;-)
14:05:46 <whee> get it using a db?
14:05:52 <whee> yeah, I do
14:05:56 <Igloo> Right, I'm igloo
14:06:05 <shapr> whee: want me to add you?
14:06:18 <shapr> Igloo: may I add you as a developer?
14:06:24 <whee> I don't know how I would contribute, but if you want :)
14:06:29 <Igloo> TBH I'm unlikely to put much there unless it becomes related to the HL in some way, but feel free to add me anyway and I might do  :-)
14:06:38 <shapr> ok
14:07:42 <shapr> whee: well write haskell code, add it to cvs :-)
14:07:47 <shapr> or improve something that's already in there.
14:07:50 <creature> Evening, all.
14:07:54 <shapr> hi creature 
14:08:00 <Igloo> If there's somewhere obvious to add a link to http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/ then that might be an idea
14:08:02 <creature> Haskell can be belligerent at times. 
14:08:03 <whee> heh
14:09:01 <shapr> Igloo: ok, I'll add a link to your page when I get the front page together.
14:09:39 <shapr> oh cool, your phone number is there
14:09:48 * shapr is tempted to call Igloo and say "hi"
14:09:56 <Igloo> Work number, and I'm at home  :-)
14:09:59 <shapr> awww
14:10:03 <shapr> :-)
14:10:53 * Igloo is still hoping to get to Haskell Workshop, so will hopefully see you there
14:11:54 <shapr> yay!
14:12:11 <Igloo> Need to paperify something and have it accepted first, though
14:13:03 <whee> shapr: I guess you could add me, although I'm still somewhat of an idiot when it comes to haskell :)
14:13:10 <creature> Argh, can I have some hint as to why this doesn't work? 
14:13:23 <mgoetze> creature: if we get to know what it is...
14:13:34 <creature> Yeah, give me a sec Mike. 
14:13:43 <creature> I don't have root on this box and gpm isn't running, so I'm typing it in. 
14:14:03 <creature> splits :: Tour -> [(Tour,Tour)]
14:14:10 <creature> splits [] = []
14:14:19 <shapr> whee: well, a cvs-wiki is a great place to drop in code, I know I'll look at it and send you my thoughts :-)
14:14:25 <shapr> whee: what's your uid?
14:14:31 <whee> whee
14:14:40 <shapr> I should have looked :-)
14:14:49 <creature> splits (x:xs) = ([],(x:xs)) : [(x:a,b) | (a,b) <- splits xs]
14:14:51 <whee> :>
14:15:09 <shapr> ok, you're added.
14:15:13 <Igloo> What's Tour?
14:15:14 <creature> A tour is a list of towns. 
14:15:17 <creature> And a town is an int.
14:15:32 <shapr> ah, it's the traveling wilburies problem.
14:15:36 <creature> Yep.
14:15:40 <creature> Travelling salesman.
14:15:47 * shapr is joking :-)
14:15:53 <creature> Assessed, so hints as to why it doesn't return the final permutation rather than solutions. 
14:16:31 <creature> ie. given [1,2,3,4,5] I don't get the ([1,2,3,4,5],[]) part. 
14:16:47 <creature> I did try and correct this by adding a ": ((x,xs),[])" to the end but then I get a type error. 
14:16:52 <shapr> has anyone seen the awaitEval suggestion for Concurrent GHC?
14:16:55 <creature> And I can't see why.
14:17:08 <creature> I can't see why my version doesn't work as it stands, to be honest. 
14:17:11 <shapr> I have this feeling that awaitEval is a bad idea...
14:17:17 <creature> Presuming that xs will also match [].
14:18:36 <Igloo> creature: Work out what happens for [t] and you will see ([t],[]) isn't produced
14:18:58 <Igloo> Your base case is probably wrong, but I'd need to know the spec to be sure
14:19:54 <creature> Does xs not match [] ? 
14:20:02 * mgoetze doesn't get why creature is using tuples...
14:20:29 <creature> Because that's what the question asks me to do. :)
14:21:01 <mgoetze> splits [t] evaluates to ([],[t]) afaics
14:21:17 <creature> Yes. 
14:21:18 <creature> It does. 
14:21:24 <mgoetze> is that what it's supposed to do?
14:21:28 <creature> No.
14:21:35 <mgoetze> then your code is wrong :)
14:21:43 <creature> I know that. I can't see why. :)
14:22:13 <Igloo> Can you describe in English the relationship between the input and the output?
14:22:13 <mgoetze> i need a better description of the problem then...
14:22:49 <creature> Splits ts returns a list of all pairs (ts1,ts2) such that ts1++ts2==ts.
14:23:25 <Igloo> So you are saying there is no such pair when ts == []?
14:24:02 <creature> I would say so, yes, but I can see that would be where I'm going wrong. :)
14:24:20 <creature> Ack.
14:24:41 <mgoetze> so e.g. splits [1,2,3] => [([],[1,2,3]),([1],[2,3]),([1,2],[3]),([1,2,3],[])] ?
14:24:50 <creature> That's right.
14:25:12 <creature> I thought this was a hint to make my base case ([],[]) but that gives me a type error again.
14:25:25 <dark> shapr: Hmm, I think the LGPL is just too long and complicated.
14:25:31 * Igloo finds the LGPL says "The modified work must itself be a software library." and decides libraries should be GPL|LGPL and programs GPL
14:25:35 <mgoetze> well, [([],[])] more likely :)
14:25:50 <creature> You're right there. 
14:26:06 * mgoetze is not entirely sure recursion is the best approach to this problem, though
14:26:07 <dark> shapr: I settled on a simple four-line license that does everything I want :)
14:26:08 <radix> Igloo: you didn't know that about LGPL?
14:26:08 <creature> And then, it all works. Thanks. 
14:26:19 <creature> mgoetze - how would you have attacked it? 
14:26:22 <radix> that's why it used to be called the "Library GPL" :-))
14:26:41 <radix> dark: yeah? what is it?
14:26:45 <mgoetze> simple iteration across the "borders"
14:26:52 <mgoetze> s/across/over/
14:26:53 <creature> In Haskell? 
14:26:58 <mgoetze> sure
14:27:02 <radix> I've been using "Public Domain + if you don't believe in public domain, contact me and I'll license it to you"
14:27:05 <creature> I didn't want to go down the auxiliary function route, that's all.
14:27:38 <Igloo> I'd never really looked at it before. I was slightly surprised it could only apply to libraries in the first place, but it doesn't really make sense otherwise. I think allowing modified versions to be under the GPL || (under the LGPL && libraries) makes more sense, though
14:27:45 <Igloo> Hence I think I'll allow either licence to be used
14:28:03 <mgoetze> splits x = splits' x (length x)
14:28:18 <creature> What does ' do? 
14:28:25 <creature> Oh, you're defining a helper function, yes? 
14:28:27 <mgoetze> just another function
14:28:34 <creature> I didn't want to do that. 
14:28:46 <creature> Any reason why one is better than the other? 
14:28:46 <mgoetze> splits' x 0 = [([],x)]
14:29:05 <mgoetze> iteration is better because i don't have to think about it as long :)
14:29:22 <dark> -- You may freely use, modify, and distribute this software, as well as
14:29:22 <dark> -- modified versions and derived works of this software, but at your own
14:29:22 <dark> -- risk.  NO WARRANTY is given; not even the implied warranty of
14:29:22 <dark> -- merchantability or fitness for a particular purpose.
14:29:27 <Igloo> zipping inits and tails is bestest, though  :-)
14:29:28 <dark> That's the one I use.
14:29:51 <creature> Heh. 
14:29:57 <dark> Igloo: Interesting, that's what I came up with the other day until I realized I didn't need such a split function at all :)
14:29:59 <mgoetze> splits' x l = [(take l x, drop l x)] ++ splits' x (l-1)
14:30:44 <Igloo> dark: How does that differ from PDing it?
14:31:50 <dark> Igloo: It has a no warranty statement, and I don't know how to legally put things into the public domain.  Apparently it differs by jurisdiction and in some jurisdictions you just can't.
14:31:54 <radix> Igloo: copyright, warranty
14:32:04 <dark> So rather than having people guess about what "public domain" means, I just spell it out.
14:32:06 <radix> with that license, dark still owns the copyright
14:32:24 <dark> Yeah, another difference is that someone can't just republish it as his/her own work.
14:32:50 <dark> (true public domain doesn't require attribution)
14:32:50 * Igloo meant just the first bit
14:33:07 <radix> ok then: copyright :)
14:33:13 <eivuokko> I don't believe it's possible (atleast in many countries) to deny author's own copyright.
14:33:41 <radix> yes, lots of people believe that. That's why I tell people that they should contact me if they don't believe in copyright ;-)
14:33:43 <radix> err
14:33:50 <dark> And the whole license is shorter than the see-the-GPL blurb :)  I can just stick this at the top of every file and not worry about it.
14:33:52 <radix> s/copyright/explicit public domain/
14:36:31 <Igloo> Ah, LGPL actually has a clause allowing you to use it under the GPL anyway
14:37:45 <creature> Out of curiousity, how efficient is nub? 
14:38:07 <creature> What's the function that returns all except the last element of a list? 
14:38:14 <creature> And is it quicker than nub? 
14:38:29 <creature> ANd, most importantly, how do I find out the answer to such questions for myself? 
14:38:46 <Igloo> init is much more efficient than nub
14:39:03 <creature> init, thought that might be it. 
14:39:08 <creature> Where does the name come from, btw? 
14:39:23 <Igloo> Well, nub does O(n^2) comparisons, init does O(n) operations
14:39:25 <Igloo> initial
14:39:37 <creature> I thought that might be the case. 
14:40:14 <Pseudonym> Greetings.
14:40:36 <creature> Ack, it's hard to work on assignments when everyone else in the room is watching a film you haven't seen.
14:40:48 <Pseudonym> What film?
14:42:56 <creature> Spiderman.
14:43:25 <Pseudonym> The bad guy gets killed.
14:43:43 <creature> I haven't been watching it closely enough to figure out who the bad guy is. 
14:43:46 <Pseudonym> Oh, and Spiderman survives.
14:43:51 <creature> I generally catch the action scenes.
14:47:13 <Pseudonym> BRB.  Need to reboot.
14:51:58 <hdaume> hi all
15:36:58 <creature> Is there a library function that tells me whether an element in one list is within another? 
15:37:24 <creature> Actually, a library function that tells me if a given value is in a list?
15:37:30 <hdaume> x `elem` list
15:37:45 <hdaume> for two lists l1 and l2, any (`elem` l1) l2
15:37:57 <creature> Cool.
15:39:18 <creature> As in, elem l1 l2 checks that all elements in l1 are also in l2? 
15:41:40 <hdaume> no.  elem x l checks whether x is in l
15:41:54 <hdaume> elem :: Eq a => a -> [a] -> Bool
15:42:12 <creature> I see. OK, thanks. 
15:43:15 <creature> Hmm. 
15:43:38 <creature> Is it quicker to check whether all the elements in a short list are in a big list, or all the elements in a big list are in a short list? 
15:43:48 <creature> As I'm going to have to do a list comprehension anyway. 
15:44:13 <Pseudonym> Using this technique it's quicker to check whether all the elements in a short list are in a big list.
15:44:23 <creature> OK, thanks. 
15:44:27 <dark> Hmm, why?
15:44:39 <Pseudonym> Oh, hang on.
15:44:41 <hdaume> if you have Ord, it's probably faster to just sort both lists and just recursively check yourself
15:44:43 <Pseudonym> No, you're right.
15:44:45 <Pseudonym> It's the same.
15:44:52 <Pseudonym> hdaume said what I was about to say. :-)
15:45:03 <Pseudonym> Sort them both, then do a merge-based comparison.
15:45:10 <hdaume> exactly :)
15:45:14 <Pseudonym> If speed is important and you don't know the characteristics of your lists.
15:45:28 <creature> Merge-based comparison? 
15:45:29 <Pseudonym> If you know they're going to be short, the elem-based approach is going to be quicker.
15:45:31 <dark> Or turn one into a FiniteMap and do lookups.
15:45:37 <Pseudonym> Yes, or that.
15:45:41 <creature> We definitely haven't done finiteMaps.
15:45:46 <creature> Probably a bad idea to use them. 
15:46:07 <Pseudonym> Or you could use an Edison collection, for that matter.
15:46:09 <creature> Although this compare-two-lists is only for goodie points anyway. :)
15:46:17 <creature> So what's an Edison collection? 
15:46:33 <Pseudonym> Edison is Chris Okasaki's data structure library.
15:46:33 <dark> creature: A merge-based comparison would be that you compare the head element of each list and pop the lowest-sorting one, and always check whether the two heads are the same.
15:46:56 <dark> creature: This works if both lists are already sorted.
15:46:59 <creature> What if the lists are different lengths? 
15:47:22 <dark> creature: If you reach the end of either list without encountering equal heads, then you know they can't share elements.
15:47:41 <dark> (the remaining tail of the other list will only have elements greater than the last element of the first list)
15:47:50 <Pseudonym> For ease of writing you may want to drop duplicates from the list after sorting, or use a function which sorts and removes duplicates.
15:48:05 <creature> Hmm.
15:48:56 <dark> I think (map head . group) after sorting will do that.
15:48:59 <creature> When you say "Pop the lowest-sorting one", what do you mean? 
15:49:18 <dark> But I don't think removing duplicates will make it any easier.
15:49:24 <creature> As I'm not entirely convinced what you suggest will work.
15:49:31 <Pseudonym> Or noDups.
15:49:50 <creature> Pseudonym - libraries not in the standard collection aren't allowed, btw. 
15:49:57 <creature> Even when gunning for goodie points. 
15:50:17 <Pseudonym> I thought noDups was in List.
15:50:19 * Pseudonym checks
15:50:25 <dark> creature: I mean you recurse, using the tail of the list whose head compared lower than the other list's head, and the other list in full.
15:50:41 <dark> Pseudonym: I never heard of it and I stared at List pretty often :)
15:51:07 <creature> Oh, I see. 
15:51:08 <dark> creature: We're approaching the point where it would be easier to show you with code :-)
15:51:22 <creature> No, I get the idea now. 
15:51:49 <Pseudonym> You're right.  List has nub, which is inefficient.
15:52:02 <Pseudonym> Well, inefficient for this purpose.
15:52:11 <dark> Inefficient for pretty much any purpose I can think of :)
15:52:24 <Pseudonym> It's fine for small lists.
15:52:26 <dark> I don't think I've ever wanted to remove duplicates while preserving ordering.
15:52:46 <dark> Especially if it's not clear which duplicate will remain.
15:52:46 <creature> Incidentally, I think I'll just my original idea, as it's easier and we're not talking massive lists here. 
15:52:55 <creature> Only about 50.
15:53:11 <dark> creature: That's probably best.
15:53:53 <creature> elem returns a bool, yes? 
15:54:14 <Pseudonym> Yes.
15:54:25 <Pseudonym> It's usually best to do the obvious thing first, then profile.,
15:56:02 <dark> Pseudonym: The problem starts when the thing is dog slow and there's no obvious way to make it faster :)
15:56:14 <dark> I wonder where "dog slow" came from.  Dogs are pretty fast.
15:57:45 <creature> Depends on what you're comparing to.
15:57:51 <creature> And how well stapled-down they are. 
15:58:31 <dark> I saw a medical documentary once where they were stapling skin on a baby.
15:58:36 <dark> That sort of thing stays with you.
15:58:53 <creature> I can imagine.
16:09:27 <Pseudonym> I don't know where the term "working like a dog" came from.
16:09:34 <Pseudonym> All the dogs I've ever known eat and sleep.
16:17:35 <dark> Pseudonym: The ones I've seen also run around mindlessly and make lots of noise.  That takes a lot of energy.
16:17:45 <Pseudonym> That's true.
16:17:47 * Pseudonym is a cat person
16:18:50 <dark> Cats are also big in the eating and sleeping department.
16:18:58 <Pseudonym> Absolutely.
16:19:04 <whee> cats take care of themselves, though
16:19:09 <Pseudonym> But when have you heard someone described as having been "working like a cat"?
16:19:12 <dark> "I've been working like a cat" gives a different impression.
16:19:42 <dark> Might have been someone starring in Cats, the musical.
16:20:58 <Logan> Cats sleep 16 hours a day?  THat's how I work.
16:30:00 <Binkley> heya
18:06:14 <flippo> "I've been working like a programmer on an H1 visa."
18:35:55 <whee> haha, ghc broken again
18:36:11 <whee> hard to use TH when the compiler breaks at any moment :\
18:52:28 <Igloo> Tell me about it
19:22:57 <Pseudonym> BBIAB/
22:24:37 <shapr> goood morning #haskell!
22:25:29 <kawfee> yay!
22:25:45 <shapr> hi kawfee, what's up?
22:29:19 <kawfee> trying to get matlab to plot my data
22:29:27 <kawfee> it's not being very cooperative
22:29:36 <whee> what kind of data?
22:29:42 <kawfee> data from a program
22:29:47 <kawfee> it's a matrix of data
22:29:52 <whee> you might want to try using R
22:29:57 <kawfee> R?
22:30:04 <whee> http://www.r-project.org/
22:30:11 <kawfee> well...
22:30:17 <kawfee> matlab is the way it was done before
22:30:38 <kawfee> so I think I have to use it, the output is already formatted for it anyways
22:30:43 <whee> heh
22:30:56 <kawfee> know anything about plot?
22:31:11 <whee> nope
22:31:14 <kawfee> figures
22:50:33 * shapr yawns
