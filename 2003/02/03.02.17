03:42:59 <shapr> yargh
05:48:51 <shapr> hej!
05:49:02 <radix> HEJ shapr!
05:54:33 <Marvin--> RADix
05:54:55 <radix> MARvin
05:57:42 * Marvin-- grumbles at the number of jvm opcodes needed to compute boolean negation
05:58:03 <ibid> txt txt txt! :-)
05:59:40 <Marvin--> I'm trying to think of something smart...but
06:00:01 <shapr> jvm /= smart
06:00:17 <Marvin--> I noticed
06:00:38 <ibid> Marvin--: can you paste us the sequence?
06:02:02 <Marvin--> since there are no boolean operations, only integer ops, and my bools are zero for false and non-zero for true, it's...yuck
06:02:26 <Marvin--> the stupid-but-simple version is
06:02:30 <Marvin--> --   ifeq L1
06:02:30 <Marvin--> --   iconst_0
06:02:30 <Marvin--> --   goto L2
06:02:30 <Marvin--> -- L1:
06:02:30 <Marvin--> --   iconst_1
06:02:31 <Marvin--> -- L2:
06:02:37 <Marvin--> (inside Haskell comments :)
06:05:01 <Marvin--> ... violent silence
06:05:27 * shapr runs from java
06:05:59 <Marvin--> maybe it would be more fun to compile Haskell-to-JVM
06:08:19 <Marvin--> well, I gotta go to lecture
07:55:50 <SyntaxPolice> Snow.
07:56:37 <Robert> Cold snow.
09:04:15 <shapr> warm snow
09:04:30 <Igloo> Hmmm
09:05:09 <shapr> cold Igloo?
09:05:43 <ibid> hmhm
09:05:53 <shapr> warm ibid?
09:06:09 <ibid> ibid is abstract :-)
09:06:33 <ibid> it is a shortened form of lat. ibidem 'in the same place'
09:07:29 <Smerdyakov> It's a magic bird.
09:07:37 <Smerdyakov> It can fly you to another world.
09:07:49 <shapr> I thought that was a table?
09:07:56 <shapr> er, carpet?
09:08:00 <shapr> magic carpet ride?
09:08:00 <ibid> ???
09:08:13 <Smerdyakov> ibid, fly me to another world!!
09:08:18 <ibid> ni
09:08:23 <ibid> no i don't think so
09:08:35 <shapr> ni!
09:08:53 <shapr> you must cut down the largest tree in the forest.
09:08:56 <shapr> WITH A HERRING!
09:09:28 <ibid> ibid is used in academic publications that use footnote citations to indicate a reference to a citation that has been made earlier
09:11:02 <ibid> for example, if i have already referred to how to declare an imperative, i might at some later point just do "wadler[1] has argued that ... [1] ibid."
09:11:20 <ibid> (this is not standard practice in cs, as you probably know)
09:12:20 <ibid> (but it is common in several other branches of academic discourse)
09:12:47 <ibid> where [1] indicates footnote :-)
09:30:53 * shapr bounces
09:32:44 * ibid talked to a mep today
09:33:03 <shapr> a mep?
09:33:20 <shapr> what's a mep?
09:34:04 <ibid> member of the european parliament
09:34:20 <shapr> oh, neat
09:34:33 <ibid> face to face even
09:35:38 <shapr> interesting discussion?
09:36:17 <ibid> no
09:36:19 <ibid> :-)
09:36:40 <ibid> a short exchange "hello, who are you" "i'm me" "oh good" ;-)
09:36:46 <ibid> (of course with names and such)
09:37:43 <ibid> i am a member of the local group of her party and manage the local mailing list
09:38:05 <ibid> and we have, strange as it may seem (or not), a common acquaintance
09:42:56 <Smerdyakov> Why is that strange?
09:43:05 <Smerdyakov> Isn't this a human being just like you or I?
09:49:41 <ibid> yeah, the six degrees and stuff...
09:50:15 <ibid> but anyway, it seems strange to a normal person that he or she would have some connection to a political figure...
09:50:24 <Smerdyakov> Are you one of those silly folk who maintain a mystical distinction between "celebrities" and others?
09:50:48 <ibid> do you expect me to answer truthfully to that coloured question?
09:51:19 <Smerdyakov> Remove "silly folk," then, or bleach it to a single color.
09:51:55 <ibid> i do and i don't
09:52:32 <Smerdyakov> Hmm
09:53:39 <Smerdyakov> I think that sort of attitude is at the center of modern political estrangement and the accompanying horrific effects on our world.
09:56:30 <Smerdyakov> Am I wrong?
09:57:40 <ibid> yes :-)
09:57:48 * shapr grins
09:58:26 <Smerdyakov> OK. Your lack of verbosity is pretty ironically recursive here, since it shows the same desire to separate "the sphere of government and world politics" and "my sphere of everyday life."
09:59:14 <ibid> my lack of verbosity shows merely that i'm preparing to watch rikospoliisi maria kallio :-)
10:29:54 <shapr> I have a question, don't know if I've asked it here before
10:30:34 <mgoetze> shapr: uhm, check the logs? :)
10:30:35 <shapr> if I implemented a lambda calculus interpreter in Haskell, and each function carried around a record of all the combinators it was composed of, could I compare them for equality that way?
10:30:38 <shapr> heh, good point.
10:30:47 <shapr> that would be a good lambdabot plugin
10:31:38 <shapr> or would comparing lambda calculus that way run across godel's undecidability theorem?
10:32:14 <shapr> if that would work, could I expand it up to Haskell proper? could I compare Haskell functions for equality?
10:32:47 <ibid> i doubt it
10:43:25 <shapr> well, I was hoping for a more definite answer than that :-)
10:43:36 <ibid> 19:59  <ibid> my lack of verbosity shows merely that i'm preparing to watch rikospoliisi maria kallio :-)
10:43:45 * shapr grins
10:43:47 <shapr> ok, fair enough
10:55:39 <whee> can lambdabot reload things on the fly?
10:57:33 <ibid> unlikely it would run across gödel
10:57:44 <ibid> but church&turing maybe
10:59:44 <Igloo> shapr: showing 2 lambda calculus terms are functionally identical is undecidable
11:00:11 <ibid> is it semidecidable?
11:00:36 <Igloo> Meaning?
11:01:03 <ibid> there is an algorithm that, if it terminates, produces the correct result
11:01:08 <ibid> but termination is not guaranteed
11:01:45 <Igloo> The algorithm that never terminates satisfies that
11:01:59 <ibid> okay, terminates for some inputs :-)
11:02:32 <ibid> first-order proof is a well-known example
11:02:38 <Igloo> I could easily make it terminate correctly for any number of inputs you want
11:02:52 <ibid> hm okay
11:02:57 <ibid> wrong formulation :-)
11:04:19 <ibid> there is an algorithm that, if the inputs are equal, terminates but may not terminate for some inequal inputs (but produces the correct result whenever it terminates)
11:04:42 <ibid> you can switch the equal and inequal in that if it helps
11:05:25 <Igloo> I suspect not
11:06:42 <Igloo> My intuition is based on what happens when you reduce things like (\x -> x x x) (\x -> x x x)
11:07:07 <Smerdyakov> Untyped lambda calculus! HA!
11:07:38 <Smerdyakov> Or maybe there are seeeecret forall's there :P
11:07:40 <ibid> the classical case is the proof procedure (or refutation procedure) for first-order logic: it terminates for all tautologies but may not terminate for some refutable formulas (or, in the case of refutation procedure, terminates for all contradictions but may not terminate for some satisfiable formulas)
11:07:54 <ibid> but they always produce the correct answer if they terminate
11:08:10 <Smerdyakov> ibid, I don't think you can get a semi-decision procedure for term _in_equality.
11:08:27 <ibid> well yeah
11:08:39 <ibid> if you could get one for both, you'd get a decision procedure
11:08:58 <ibid> this is not the problem in the classical case as there are formulas that are neither tautologies nor contradictions :-)
11:09:06 <Smerdyakov> <ibid> you can switch the equal and inequal in that if it helps
11:09:39 <ibid> 21:08  <ibid> well yeah
11:10:00 <ibid> didn't you see me acknowledging my error there :-)
11:10:09 <Smerdyakov> <Smerdyakov> Yes, I did.
11:10:33 <ibid> when did you say that? :)
11:10:35 <mgoetze> maybe haskell needs to borrow "!" from prolog? :)
11:10:36 <Smerdyakov> Just now.
11:10:47 <ibid> you quote itself?
11:10:54 <ibid> :-)
11:11:58 <Igloo> Haskell has !, we just write it |
11:12:54 <ibid> Igloo: ?
11:12:58 <ibid> hmyeah
11:13:09 <ibid> a mandatory cut
11:13:19 <Igloo> Oh, ibid, are you still interested in playing with Haskell2LaTeX?
11:13:34 <ibid> Igloo: maybe, but not just now
11:13:52 <Igloo> Was it savannah.nongnu.org you were suggesting?
11:14:02 <ludde> How do I create a directory in haskell?
11:14:06 <ibid> Igloo: i need to restart on the ebba project soon, but i'm still recovering from last spring's sprint
11:14:12 <ibid> savannah, yeah
11:14:13 <ludde> i.e. mkdir
11:14:16 <Igloo> ebba?
11:14:43 <ibid> Igloo: http://savannah.nongnu.org/projects/ebba/
11:15:01 <ibid> or rather, http://www.nongnu.org/ebba/
11:15:10 <Igloo> Is B anything to do with Z?
11:15:12 <ludde> found it.
11:15:29 <ibid> both were conceived by jean-raymond abrial
11:15:39 <ibid> they have similar notation
11:15:44 <ibid> in the small
11:15:55 <ibid> but the in the large picture is very different
11:16:04 <ibid> schemata <-> abstract machines
11:16:55 <ibid> are very different animals
11:18:09 <ludde> How do I load the module System.Directory into ghci? it complains with "module 'System.Directory' is a package module".
11:18:34 <ibid> you need to use -package probably
11:19:34 <ludde> like: *Main> :load -package System.Directory
11:19:37 <ludde> ?
11:19:40 <ludde> that doesn't work
11:19:44 <ibid> on the command line
11:19:54 <ibid> see the docs
11:20:39 <ibid> last fall's, btw ;-)
11:20:44 <ibid> not last spring's
11:21:20 <steele> ludde: :set -package <name>
11:21:25 <ludde> oh
11:21:39 <ludde> thanks
11:23:45 <ludde> hrm, unknown package name 'System.Directory'
11:24:00 <ibid> read the docs
11:32:23 <Igloo> Heh - "You may not place any GIF files on a site hosted here" (from the savannah.nongnu.org terms)
11:33:39 <radix> nongnu??
11:33:53 <Igloo> Hosted by the GNU for non-GNU Free projects
11:34:03 <radix> oh.
11:34:11 <radix> sheesh, they got an entire domain for it?
11:35:21 <Igloo> Seems quite reasonable
11:35:55 <Igloo> I bet they ask me to get something signed by comlab
11:48:26 <ludde> How can I rewrite (\a -> fst a == pk) with sections and . ?
11:49:27 <Igloo> (== pk) . fst
11:49:47 <ludde> cool
11:49:51 <eivuokko> What does "section" mean here?
11:50:08 <Igloo> (operator expression) or (expression operator)
11:50:09 <ludde> partially evaluated operators?
11:50:27 <eivuokko> Hmmm, thx.  Is that language from report?
11:50:27 <Igloo> (op e) is equivalent to \x -> x op e
11:50:35 <Igloo> (e op) is equivalent to \x -> e op x
11:50:39 <Igloo> Yup
11:50:48 <eivuokko> I must have skipped the word, damn.
11:50:55 <ludde> I wonder what is more readable.
11:50:56 <Igloo> ludde: Partially applied operators I would say
11:51:05 <ludde> Igloo: err, yeah you're right.
11:51:17 <Igloo> Sections are nice and concise and just as readable if you've seen them before
11:51:36 <ludde> Igloo: do you think (== pk) . fst is as clear as (\a -> fst a == pk) ?
11:52:02 <Igloo> Yes
11:52:13 <ludde> ok
11:53:08 <ludde> is there some function that does this in a single step: (pk,s) : (filter ((/= pk) . fst) cache)
11:53:44 <ludde> i.e. update the snd of a tuple, given the fst value.
11:54:06 <Smerdyakov> That updates the snd of a tuple?
11:54:19 <ludde> yeah, pk is the key, and s is the new value.
11:54:30 <ludde> first it removes it from the cache, then it writes a new tuple with the new value.
11:54:37 <Smerdyakov> Oh, I gotcha.
11:55:24 <Smerdyakov> map (\(pk', s') -> if pk == pk' then (pk', s) else (pk', s'))
11:55:24 <Smerdyakov> ?
11:56:07 <ludde> that doesn't work if the item doesn't already exist though
11:57:00 <Smerdyakov> *shrug*
11:57:13 <Smerdyakov> If you're using an unsorted list for a finite mapping, then you have troubles already =)
12:00:23 <ludde> hm
12:00:26 <ludde> what else can I use?
12:00:34 <ludde> (in haskell)
12:04:59 <eivuokko> What's wrong with your own solution?
12:08:14 <Smerdyakov> There isn't a balanced tree finite map something included with your Haskell compiler?
12:27:01 <ludde> maybe
12:27:42 <ludde> eivuokko: nothing is wrong, i just wanted to know if there was some already-written function to do the same thing
12:27:53 * Janni bursts in and shouts "Hi, all!", then settles down quietly.
12:28:04 <radix> HELLO JANNI!
12:28:27 * radix coughs.
12:28:31 <Janni> radix: shouting: ok. screaming: no. ;)
12:29:25 <Janni> hares running around again? strange animals...
12:30:17 <dark> We should lay a trap.  Hares make good eating.
12:56:26 <SyntaxPolice_> hihi
12:59:13 <mgoetze> hi
12:59:40 <Binkley> hey
13:09:32 <SyntaxPolice_> Am I right in thinking that I can't match two patterns in a single Haskell pattern matching line?  Like "f (pat1) = a" \n "f (pat2 || pat3) = b" \n "f (pat4) = c"
13:10:42 <Marvin--> you're right
13:11:24 <SyntaxPolice_> darn ;)
13:13:25 <Marvin--> I suspect that the cases where it would work are too few and too specialized to be very interesting
13:13:38 <Marvin--> I mean, every variable in the patterns must have the same type for one thing
13:14:26 <Marvin--> that is, if you've got (C1 x || C2 x) then both x:s have to be the same type
13:14:38 <Marvin--> and you can't have  (C1 x || C2 x y)  if y occurs in the lhs
13:14:44 <Marvin--> err, rhs :)
13:26:48 <Smerdyakov> SML/NJ has or-patterns like that.
13:31:13 <SyntaxPolice_> Marvin--: I have thought several times that it would be useful.  Say you're evaluating an expression (Exp op subExp1 subExp2), and you want (case op) Times and Divide treated separately, but Plus and Minus treated the same.  Its not a big deal, though. The workarounds are obviously straightforward.
13:31:50 <Igloo> Have an isPlusMinus functino and use a guard
13:33:06 <Smerdyakov> That makes things nasty for compilers that want to use lookup tables for case statements on datatypes with many constructors.
13:34:11 <SyntaxPolice_> Igloo: right. though in my case a guard is a little ugly, so I make them into separate patterns and duplicate the code or make a helper function that they both call.
13:34:29 <Marvin--> I usually go for helper function when I need something like that
13:35:05 * Igloo worries about performance once I've got pretty graphs and tables
14:29:14 * Riastradh is somewhat confused about patterns such as the one that the 'Gentle Introduction to Haskell' provides when parsing trees -- readsTree ('<':s) = [(Branch l r, u) | (l, '|':t) <- readsTree s, (r, '>':u) <- readsTree t]
14:30:40 <dark> The pattern '|':t matches a list of characters (i.e. a String) of which the first character is a vertical pipe symbol.
14:30:41 <Marvin--> Riastradh: exactly where is the confusion?
14:30:55 <Riastradh> I am completely confused as to what it does, Marvin.
14:31:23 <dark> Riastradh: hmm, have you learned about list comprehensions?
14:31:32 <Riastradh> Apparently not.
14:31:58 <Marvin--> Riastradh: but you know about map and filter?
14:32:12 <Riastradh> Yes.
14:32:27 <radix> Riastradh: Hello!
14:32:37 <Riastradh> Hi radix.
14:32:46 <Marvin--> Riastradh: [ f x | x <- xs ]  is the same thing as  map f xs
14:33:14 <radix> Riastradh: Fancy meeting you here, sailor!
14:33:23 <radix> (Ok, I'll stop trolling now.)
14:34:44 <Riastradh> Marvin - Er, I don't see what that does, though.
14:35:10 <Marvin--> Riastradh: it applies a function for every element in the list... actually for every element that matches the pattern x
14:35:17 <dark> Riastradh: You can read [ f x | x <- xs ] as "a list of (f x), such that x is drawn from the list xs"
14:36:27 * radix bounces
14:36:38 <radix> list comprehensions are neat. :)
14:36:49 <radix> I'm also excited that I know something about haskell. :)
14:37:58 <dark> If xs is for example a list of pairs of integers, then you could write something like this: [ f x | (x, 0) <- xs ]
14:38:24 <dark> This would draw x from the elements of xs that match (x, 0)
14:39:48 <dark> It would be equivalent to (map (f . fst) . filter ((== 0) . snd)) xs
14:39:58 <radix> it's similar to set syntax in the math world. vaguely. (Is it considered bad to compare listcomps to set syntax? :))
14:40:17 <dark> I'm not sure how to rewrite that to be more clear; the whole point of list comprehensions is that they're simpler than a sequence of maps and filters :)
14:40:26 <Pseudonym> No.  In fact, I believe in Turner's first language they were called "ZF expressions".
14:40:32 <Pseudonym> ZF = Zermelo Frankel
14:40:44 <Riastradh> I'm still somewhat confused.
14:40:45 <Pseudonym> A clear nod to set theory.
14:40:53 <mgoetze> radix: yeah, because "set" is a crappy word
14:40:54 <radix> Pseudonym: ZF is the set of the two guys who had some big connection to set theory, right? :)
14:40:57 <Pseudonym> I think they were from SASL
14:40:58 * mgoetze prefers "menge"
14:41:05 <Pseudonym> radix: Them's the guys, yeah.
14:41:06 <radix> mgoetze: menge?? never heard that term :)
14:41:13 <radix> Pseudonym: neat ;)
14:41:18 <dark> Riastradh: The expression you asked about is being sneaky because it uses two lists in one comprehension.
14:41:32 <mgoetze> radix: german for "set"
14:41:36 <Riastradh> OK, why don't you try to explain the simpler one, the one equivalent to map?
14:41:40 <radix> mgoetze: er... ok.. :)
14:41:43 <Riastradh> [ f x | x <- xs ]
14:41:53 <dark> To give an example of that, [ (x, y) | x <- xs, y <- ys ] creates a list [(x, y)] with all the combinations of elements from xs and ys.
14:42:14 <radix> Riastradh: it's equivalent to  (map (lambda (x) (f x)) xs)
14:42:54 <radix> uh.
14:42:55 <Riastradh> Ah, ok, so in the place before the bar, 'x' is bound to each element in xs and y is bound to each element of ys?
14:42:56 <Pseudonym> If it's any help, list comprehensions can be decomposed mechanically into simpler functions.
14:42:57 <radix> sorry, I get lambda-happy sometimes....
14:43:02 <radix> (map f xs), of course.
14:43:07 <radix> but the lambda kinda shows the point better.
14:43:12 <Riastradh> Yes, it does, radix.
14:43:12 <Pseudonym> [ E | p <- xs ] = map (\p -> E) xs
14:43:27 <Pseudonym> [ E | condition ] = if condition then E else []
14:43:29 <Pseudonym> [ E | condition ] = if condition then [E] else []
14:43:30 <Pseudonym> Sorry.
14:43:35 <radix> Riastradh: hooray for fortunate accidents. :)
14:43:48 <Pseudonym> [ E | P, Q ] = concat [ [ E | Q ] | P ]
14:44:52 <dark> Pseudonym: Straight [ E | condition ] without any list involved sounds like a candidate for obfuscated haskell :)
14:46:19 <mgoetze> dark: you sure you ought to be giving tips, being a juror and all? :)
14:48:03 <Pseudonym> Yes, it does, doesn't it.
14:48:47 <Pseudonym> Why not?
14:48:52 <Pseudonym> We're allowed to say what we like.
14:49:08 <Pseudonym> Actually, we should use scavenger hunt rules.  Set a maximum bribe level for each judge.
14:49:18 <Riastradh> Is there any particular reason 'layout' is preferred to the explicit mechanism?  It looks to me like the explicit mechanism is, well, more explicit, while 'layout' is confusingly implicit.
14:51:23 <mgoetze> lol
14:51:28 <Pseudonym> Hmmm?
14:51:41 <Pseudonym> Layout is preferred in the IOCCC.  Not necessarily in the IOHCC.
14:51:43 <mgoetze> Riastradh: implicit, yes, but not confusing
14:52:05 <mgoetze> Riastradh: unless, of course, you abuse it for obfuscation... :)
14:52:06 <Pseudonym> For example, there's a possible "best abuse of category theory" award.
14:52:19 <Pseudonym> Based on the assumption that nothing is quite so obfuscating as lots of category theory.
14:52:19 <mgoetze> "best abuse of layout" might be good :)
14:52:22 <Riastradh> Can two values bound with let be bound on the same line with layout?
14:52:59 <Pseudonym> There's a 'Most creative layout".
14:53:14 <Pseudonym> Riastradh: Well there's let { x = foo ; y = bar }
14:53:21 <Pseudonym> Or there's let (x,y)=(foo,bar)
14:53:22 <Riastradh> That's the explicit version.
14:53:31 <Pseudonym> Lots of possibilities.
14:53:32 <Riastradh> What about two functions?
14:53:40 <Pseudonym> Sure.
14:53:52 <Pseudonym> let (x,y)=(\p->foo,\q->bar)
14:54:16 <Igloo> You don't even need the braces in the first one
14:54:22 <Riastradh> Hm, I suppose so, but still the explicit version still looks cleaner to me.
14:55:32 <Pseudonym> Er... if "cleaner" is an issue to you, you might be in the wrong contest.
14:56:50 <radix> Pseudonym: I don't think Riastradh was talking about the IOHCC :)
14:56:57 <Pseudonym> Oh, OK.
14:57:01 <radix> or if he was, maybe he read something and didn't understand the context...
14:57:06 * Riastradh is also still a bit confused about the tree parsing gizmo...
14:57:12 <Pseudonym> I think I missed the context.
14:57:17 <Riastradh> radix, it was stated in the Gentle Introduction.
14:57:32 <radix> Riastradh: ok
14:57:41 <Riastradh> In:
14:57:59 <Riastradh> [(Branch l r, u) | (l, '|':t) <- readsTree s
14:58:06 <Riastradh> where does 't' come from?
15:01:58 <Riastradh> Blah, I have to go shovel snow now.
15:02:09 * Riastradh will read up when he gets back to see if anyone has responded.
15:02:49 <radix> hah
15:02:53 <radix> me too :P
15:03:07 * whee lives in an apartment, and therefore has nothing to shovel
15:03:14 <whee> :)
15:03:22 <radix> grrr
15:03:45 <radix> I guess I can live with occasionally shovelling snow for free room and board
15:03:48 <whee> it snows nearly every day here, so I'm pretty happy with that one.
15:04:06 <radix> ahh, RIT :)
15:04:22 * radix is near Pittsburgh.
15:04:35 <radix> anyway, later.
15:04:36 <whee> my sister lives in pittsburgh, heh
15:04:43 <whee> well, near it
15:05:48 <Smerdyakov> My me lives in Pittsburgh.
15:06:33 <SyntaxPolice_> readsTree ('<':s) = [(Branch l r, u) | (l, '|':t) <- readsTree s, (r, '>':u) <- readsTree t] (That's what Riastradh is talking about, right?)
15:07:01 <SyntaxPolice_> Riastradh: t is part of the output from (readsTree s)
15:23:55 <Riastradh> SyntaxPolice - Where does the l come from, then, in the tuple:  (l, '|':t) ?
15:26:00 <whee> readsTree probably returns a tuple
15:26:18 <whee> or something :)
15:26:20 <Riastradh> Oh, I see.
15:26:30 <Riastradh> No, no I don't.
15:27:34 <Riastradh> Wait, yes I do.
15:27:39 <Riastradh> Sort of.
15:29:17 <whee> meh, it returns a list of tuples
15:30:02 <whee> and it looks like | and > are used for separating the branches when it's parsing
15:31:33 <redcrosse> yeah -- showTree (Branch l r)   =  "<" ++ showTree l ++ "|" ++ showTree r ++ ">"
15:51:31 <SyntaxPolice_> hi Riastradh. Sorry, i was eating.
15:52:28 <SyntaxPolice_> the "(l, '|':t) <- readsTree s" bounds (l, '|':t) to the output from "readsTree s"
15:52:54 <SyntaxPolice_> sorta :)
18:17:37 <dark> I have a sudden urge to go kernel hacking.  I wonder if my coding muscles are complaining about too much Haskell.
18:17:46 <radix> eeep
18:18:13 <Arnia> I'd urge you to resist ;)
18:18:35 <dark> Well I'm thinking about clausen's ideas of a functional file system :-)  So it's not all bad.
18:19:25 <radix> Sounds like you need to embed haskell into a kernel :)
18:20:23 <Arnia> I want a functional computer... down with Von Neumann
18:20:33 <radix> heh.
18:20:35 <dark> No, the idea was to use the concepts of lazy evaluation and memoization to implement some of Chris Okasaki's data structure ideas as a filesystem.
18:20:46 <dark> You don't actually need a lazy language to do that :)
18:46:59 <Pseudonym> I had a think about that idea.  I suggested that you could probably have a safe filesystem without journalling.
18:47:28 <Pseudonym> Then I realised you couldn't, then I realised you could after all. :-)
18:47:47 <Pseudonym> The problem was keeping metadata, like file size, up to date.
18:48:05 <Pseudonym> Then I realised that you could do it using a data structure like Stephen Adams' bbb trees.
18:50:46 <Pseudonym> If you can piece together the "one true metadata" from the constituent parts (as you can with file size), you can keep it up-to-date in a functional way.
18:51:10 <Smerdyakov> Why would you want to?
18:51:13 <Pseudonym> The only problem, I think, is you need to garbage collect the file system.
18:51:23 <Pseudonym> Oh, there's one big advantage.
18:51:42 <Pseudonym> In journalling file systems, the journal has a lot of pressure on it.
18:52:18 <Pseudonym> In a purely functional file system, there would be no such pressure.
18:53:03 <Pseudonym> So theoretically, you may be able to localise your disk accesses better.
18:53:15 <Smerdyakov> I don't know what a journalling file system is, so I'll just stare at the sun until I see the answer in my corneas.
18:53:38 <Pseudonym> When a machine crashes, the file system may be in an inconsistent state.,
18:54:05 <Pseudonym> Traditionally, you have to scan the file system on reboot and settle any inconsistencies.
18:54:19 <Pseudonym> In a journalling file system, you get true transactions.
18:54:29 <Smerdyakov> Very flattering
18:54:38 <Smerdyakov> Some people don't like filesystems
18:54:49 <Pseudonym> Where do they store their data?
18:54:50 <Smerdyakov> Fancy objects, they prefer!
18:55:18 <Pseudonym> Persistent object stores, indeed.
18:55:39 <Smerdyakov> They're probably all addicted to crack.
18:56:27 <Pseudonym> If I believed every USian who claimed this, at lest 70% of the Western world would be addicted to crack.
18:56:41 <Pseudonym> Because, of course, everything that I believe is true.
18:57:38 <Smerdyakov> If I believed every malcontent who claimes this, at least 95% of the Western world would possess traits logically inconsistent with immutable laws of the universe.
18:58:34 <dark> Pseudonym: The truth you miss is that 70% of the Western world _is_ addicted to crack.
18:59:12 * Pseudonym doesn't believe there's enough crack for that
18:59:14 <Smerdyakov> One of my distributional requirements for the bachelor's degree is "Survey of Crack Addiction."
18:59:18 <Arnia> Money is the new opium...
18:59:28 <Pseudonym> Certainly not in Australia, where heroin is much more popular.
18:59:39 <dark> It's probably oil.  And remember, oil gets "cracked".
18:59:42 <Smerdyakov> We have to interview people who are addicted to crack.
18:59:46 <Smerdyakov> And then we have to take them out to dinner.
18:59:51 <Smerdyakov> 80 times in the semester.
19:00:03 <Pseudonym> Do you have to record their table manners?
19:00:17 <Smerdyakov> Let me ask the dean.
19:00:19 <dark> Smerdyakov: So, the proper preparation work would be to find all the cute girls in your area and get them addicted to crack.
19:00:29 <Smerdyakov> The dean says you're full of something foul.
19:00:33 <Smerdyakov> Shall I slap him for you?
19:09:04 <Igloo> What's the function with type m m a -> m a called again?
19:09:16 <dark> pathological?
19:09:20 <Pseudonym> You mean m (m a) -> m a?
19:09:25 <Igloo> Yes, sorry
19:09:35 <Pseudonym> Usually "join".  On lists, of course, it's "concat".
19:10:24 <Igloo> Ta
19:11:01 <Pseudonym> I don't think "join" is a good name, but what can you do?
19:11:22 <Smerdyakov> How about "flatten"?
19:11:46 <dark> flatten has a nicely violent overtone.
19:11:46 <Pseudonym> Does that make sense for, say, IO (IO a) -> IO a?\
19:11:55 <Pseudonym> How about "obliterate"?
19:12:06 <Smerdyakov> It's a conceptual flattening of a layer of complexity.
19:12:07 <dark> Hmm, what's the difference between an overtone and an undertone?
19:12:47 <Pseudonym> Several layers of tone.
22:43:51 <Pseudonym> \/quit
