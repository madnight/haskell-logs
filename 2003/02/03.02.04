03:37:12 * shapr yawns
03:37:52 <dark> hello
03:38:04 <shapr> good morning dark!
03:52:47 * Marvin-- grumbles and growls
03:53:22 <shapr> good morning Marvin-- 
03:53:49 <Marvin--> no, bad morning
03:54:13 <Marvin--> well, okay, I've managed to semi-track down a memory-corruption-segfault bug in d-i, but for the rest it's been pretty miserable
03:54:44 <shapr> have you tried running it under valgrind?
03:56:09 <Marvin--> under vmware? no :)
03:56:14 <shapr> oh
03:58:43 <Marvin--> and "semi-track down" as in I commented out pretty much all occurrences of the function call "free" :/
03:58:47 <shapr> hey, did you guys see the 'pending approval' "Haskell Workshop 2003" in Uppsala, Sweden?
03:59:45 <Marvin--> pending whose approval?
04:00:00 <shapr> http://www.functional-programming.org/HaskellWorkshop/cfp03.html
04:00:27 <Marvin--> http://people.debian.org/~sjogren/d-i/screenshots/2003-02-04/ <- incomplete set of screenshots of d-i with an ugly s-lang frontend
04:01:22 <Marvin--> plenty of famous names
04:02:08 <Marvin--> wonder if Aarne or Markus will talk about bnfc under the functional pearls category
04:03:02 <Marvin--> "end of august" dang, I hope I'll be a PhD student by then
04:04:57 <shapr> I hope I'll be an undergrad by then ;-)
04:05:06 <Marvin--> heh
04:05:15 <Marvin--> no you won't, the semester doesn't start until september :-)
04:05:41 <shapr> aww
04:05:44 <Marvin--> actually, for freshmen it might start in the end of august
04:05:59 <Marvin--> introductory courses and whatnot
04:10:57 <Janni> hi.
04:11:04 <shapr> hi Janni 
04:11:17 <Janni> i'm happy. 5 lessons have been canceled. wonderful...
04:11:31 <shapr> so now you have time to write fun code?
04:11:32 <Marvin--> 5 out of how many over what timespan? :)
04:12:00 <mgoetze> Janni: what kinda crap school do you go to?
04:12:08 <Janni> 5 of 8 from 9:30 to 17:00
04:12:18 <Janni> mgoetze: "gymnasium"
04:12:28 <Marvin--> ooh, I thought you were going to a university
04:12:34 <Heffalump> that's a place you do sports, not a school :-)
04:12:38 <Marvin--> 8 lessons in one day is quite a lot
04:12:46 <Janni> Heffalump: that's why i placed the '"'s
04:12:48 <Marvin--> Heffalump: not in Germany and Sweden :P
04:12:49 <mgoetze> Janni: oh yeah, that. i remember vaguely... :)
04:13:22 <Janni> now i had only school from 9:30 to 12:00
04:13:26 <Heffalump> yeah, I know :-)
04:13:37 <Marvin--> gotta be pretty short lessons
04:13:46 <mgoetze> Janni: abi this year?
04:13:51 <Janni> yea :)
04:14:23 <mgoetze> been conscripted?
04:14:33 <Janni> nope :)
04:14:57 <mgoetze> Janni: so i'll see you here soon? ;)
04:15:20 <Janni> mgoetze: where do you study?
04:19:13 <mgoetze> Janni: technical university hamburg-harburg
04:19:24 <mgoetze> very recommendable, if you think you're good ;)
04:19:44 <Marvin--> mgoetze: why? they start by beating that notion out of you?
04:19:53 <Janni> mgoetze: then i might never see you. gonna study in karlsruhe
04:19:56 <mgoetze> yeah, something like that... lol
04:20:04 <mgoetze> yeah, karlsruhe is ok too, i hear
04:20:33 <mgoetze> Marvin--: though they haven't really suceeded yet in my case
04:33:04 <Marvin--> hmm, wonder if it'd be possible to use generic programming to define the quickcheck Arbitrary class
04:33:12 <shapr> how so?
04:33:57 <Heffalump> isn't the distribution of values you want likely to be datatype specific?
04:34:12 <Marvin--> I'm reading about GAST right now
04:34:25 <Marvin--> http://www.cs.kun.nl/~pieter/gentest/GastIFL02.pdf
04:34:33 <Marvin--> it's a quickcheck-like tool for Clean
04:34:38 <Marvin--> but they seem to use generic programming
04:35:07 <Heffalump> I'm sure you could do it, but you'd lose the ability to sensibly decide what proportion of each data constructor to use
04:36:56 <Marvin--> say I want to make my own instance of Arbitrary Int to test just, say, primes (maybe I've proved that the function is multiplicative or something), how do I hide the instantiation in the quickcheck module?
04:37:03 <Marvin--> Or do I have to create a newtype Prime?
04:37:48 <Heffalump> you need a newtype, I imagine
04:37:59 <Heffalump> same as for any copy of an instance
04:38:09 <Marvin--> bleh
04:38:25 <Heffalump> do you have any reason to think it would be different?
04:38:38 <Marvin--> no, I was hoping I could import-and-hide
04:39:33 <Heffalump> nope, you can't hide instances
04:39:40 <Marvin--> so if I want to define a generator for commutatative Int -> Int -> Int functions, I'd have to newtype CommFun = CommFun (Int -> Int -> Int) and use that in my properties
04:39:44 <Heffalump> it's been discussed a few times on the list what the correct behaviour should be
04:39:59 <Janni> snowing again (i love snow :)
04:41:14 <shapr> Janni: I'd be happy to ship you as many tons as you want from Sweden ;)
04:41:38 <shapr> is there a quickcheck list?
04:41:45 <Marvin--> good, start by taking the snow in Göteborg
04:42:08 <Janni> shapr: i'm really thinking from time to time of moving to skandinavia when i'm grown big :)
04:42:28 <shapr> it's a nice place
04:42:48 <Janni> i really like elks ;)
04:42:55 <Marvin--> no, don't move here, go somewhere else and take the snow with you! :)
04:43:16 <shapr> elks are tasty, mmm
04:43:21 <shapr> especially in elkburgers
04:43:26 <Janni> i don't like too warm weather and really enjoy cold sunny days
04:44:13 <Marvin--> oh dear, Germans and elks, here we go
04:44:19 <shapr> ?
04:44:25 <shapr> I'm not german.
04:44:39 <Marvin--> do you have any idea how many Germans go to Sweden to see elks?
04:44:48 <Marvin--> no but Janni is if I don't misremember
04:44:48 <shapr> no, do they really?
04:44:56 <Marvin--> oh yes they do
04:45:02 <shapr> neat
04:45:24 <Marvin--> we have a real problem with Germans stealing the elk warning signs along the roads
04:45:25 <shapr> the only elk I've ever seen in person was on a plate.
04:45:36 <Marvin--> (and I'm not kidding!)
04:45:40 <shapr> cool!
04:45:42 <Janni> Marvin: hehe. i can imagine
04:45:55 <shapr> you should sell the elk signs
04:46:08 <Marvin--> we do
04:46:19 <Janni> crazy
04:46:20 <Marvin--> but I guess forbidden fruit tastes better
04:46:21 <Janni> germans
04:47:05 <shapr> too bad there aren't any elk signs around here.
04:47:39 <Janni> what about girls? should I import some to skandinavia? (i've hundrets of girls running after me ;)
04:47:47 * shapr laughs
04:47:59 <Marvin--> everybody know that scandinavian girls are the best there is, so nah
04:48:11 * shapr grins
04:48:23 <Marvin--> bringing a blonde, tall, Swedish girl to Italy is a real pain
04:50:15 <Janni> and what about internet connection? (can't be worse than germany)
04:50:48 <Janni> broadband everyweher?
04:52:06 <Marvin--> not everywhere, but you can get so-so ADSL in most appartments
04:53:20 * Janni is going to eat (wondering what)
04:54:13 <Marvin--> my student room connection pretty much sucks these days
04:54:29 <Marvin--> the packets that do get through do so at decent speed, but there's a huge packet loss
04:54:48 <Marvin--> which is all right when you communicate with someone else with decent connection, but horrible when you try to communicate with someone with a modem
05:05:34 * Janni has eaten (not too much).
05:05:54 <Janni> i just love having a korean mother (korean food is just _so_ good)
06:57:10 <SyntaxPolice> shapr: alive?
07:02:02 <mgoetze> SyntaxPolice: how's the go program?
07:06:24 <SyntaxPolice> mgoetze: you get get it now.  Its just the board, but you inspired me to write it. The HTk authors have just agreed to use it as an example in their distro: http://www.syntaxpolice.org/~ijones/simpleGoBoard.tgz
07:06:54 <SyntaxPolice> I'm thinking of eventually fixing it up to be a nice module from which people could write their own backends.
07:07:15 <SyntaxPolice> But for now, hacking has stopped, as I have other things to do.
07:09:27 <mgoetze> cool
07:10:11 <mgoetze> SyntaxPolice: hm, >200KB/s :)
07:10:36 <SyntaxPolice> mgoetze: I could give you a version w/o the executable.
07:10:54 <SyntaxPolice> but then you'll ahve to get htk to compile it.
07:11:33 <mgoetze> i don't think that would be a very big problem
07:12:28 <mgoetze> ./goBoard: /lib/libc.so.6: version `GLIBC_2.3' not found (required by ./goBoard)
07:12:32 <mgoetze> not as big as that, anyhow :)
07:12:47 <SyntaxPolice> hehe
07:12:49 <SyntaxPolice> ok
07:13:24 <SyntaxPolice> oh well I guess you have the whole tarball now.
07:13:59 <SyntaxPolice> I can send you a smaller tarball sometime if you want.
07:14:31 <mgoetze> SyntaxPolice: i, uhm, have a file with diff output mentioning some binary files i don't have
07:15:13 <SyntaxPolice> heh, I meant to trim that diff.
07:15:23 <SyntaxPolice> just delete the mention of binary files.
07:15:48 <mgoetze> so the binaries are not necessary?
07:16:08 <mgoetze> what do i need to compile? just MaingoBoard.hs?
07:16:09 <SyntaxPolice> right.
07:16:25 <SyntaxPolice> yeah, yo8u need mainboard.hs, the changes to the makefile, and the htk distro.
07:16:46 <mgoetze> makefile? what makefile?
07:17:11 <SyntaxPolice> You need to htk distro to compile it, then apply the patch to the htk distro, which will make the changes to the makefile in htk.
07:17:30 * mgoetze suspects he will also need concurrent haskell.
07:18:01 <SyntaxPolice> not so sure of that. seems to build fine w/ the latest gtk
07:18:04 * mgoetze wonders whether upgrading to sarge might be easier. :)
07:18:12 <SyntaxPolice> err
07:18:13 <SyntaxPolice> ghc
07:18:17 <mgoetze> MaingoBoard.hs:9:
07:18:17 <mgoetze>     failed to load interface for `Concurrent':
07:19:18 <SyntaxPolice> I guess i keep my system pretty bleeding edge compared to you :) TO be honest, it might not be worth it.
07:20:34 * mgoetze thinks these things ought to be available as debian packages
07:20:54 <SyntaxPolice> mgoetze: thats a great idea.
07:20:55 <SyntaxPolice> :)
07:21:13 <mgoetze> SyntaxPolice: you gonna package them? :)
07:21:42 <SyntaxPolice> mgoetze: I'd like to, I really would.  Once we figure out a sane way to do it.  I guess that if htk depends on ghc, its not that hard.
07:22:05 <SyntaxPolice> but one problem is that it would have to depend on a specific version of ghc
07:22:15 <mgoetze> that's doable
07:22:27 <mgoetze> meanwhile, i'll be playing go on nngs :)
07:23:04 <SyntaxPolice> cool.
07:33:19 <ludde> Does GHC's concurrent module work well with async network IO?
07:39:46 <shapr> async?
07:39:55 <shapr> SyntaxPolice: alive now
07:40:25 <ludde> if I use network calls in multiple GHC threads, will the whole process block? (the unix socket calls are normally blocking)
07:40:49 <shapr> I think yes, the whole process will block
07:41:06 <shapr> I think I have a demo echo client/server here
07:41:38 <ludde> ok
07:41:58 <SyntaxPolice> shapr: hmm... trying to remember what I called you for... how's that library cgi thing?
07:42:12 <Marvin--> there's threadWaitRead and threadWaitWrite functions, but for some reason they take Ints as representation for file descriptors
07:42:14 <shapr> I haven't done anything to it
07:42:33 <Marvin--> and I have no idea how to get an Int fd from a Socket or Handle
07:42:52 <andersca> yo Marvin--
07:42:57 <shapr> ludde: http://kungens.kemi.fi/~shae/src/haskell/Echo2.hs
07:43:08 <andersca> and shapr too of course
07:43:09 <SyntaxPolice> shapr: do you want me to do it? I didn't meant to saddle you with it...
07:43:16 <ludde> thanks
07:43:21 <shapr> I got that from an Echo script that's mentioned in the header, and fixed it up to run with ghc5
07:43:28 <shapr> SyntaxPolice: I don't mind, just haven't had time.
07:43:29 <SyntaxPolice> shapr: OH!, but I wanted to ask you about Set. Do I remember seeing a set game on your home page or something?
07:43:47 <shapr> SyntaxPolice: part of a set game, written in Python, Java, C, Haskell I think
07:44:19 <SyntaxPolice> hehe.  is there a full-featured game out there anywhere? My girl is obsessed w/ the game.
07:44:28 <SyntaxPolice> but she doesn't have the cards
07:44:34 <SyntaxPolice> so she wants to play on her computer.
07:44:51 <Marvin--> shapr: but that's not async
07:45:14 <ludde> what's the difference between package net and package network?
07:45:40 <ludde> shapr: running that program in ghci crashes ghci with "broken pipe"
07:45:49 <shapr> hm...
07:45:56 <Marvin--> I think network is from the old module hiearchy (hslibs) and network is from the new hierarchy
07:46:13 <shapr> I think one is high level and one is lowlevel, but I'm not sure.
07:46:15 <ludde> Marvin--: hmm, one of thise is "net" ?
07:46:19 <ludde> those
07:46:31 <Marvin--> ludde: net is old, network is new
07:46:32 <shapr> thise is a good word
07:46:35 <ludde> ok
07:47:15 <shapr> SyntaxPolice: you can order from setgame.com
07:47:24 <shapr> I don't know of a full implementation of the game.
07:48:22 <shapr> SyntaxPolice: I think the best solution would be a cvs tree where many could hack on the cgi, that way whenever someone has time to improve it, they could
07:48:26 <Marvin--> bah
07:48:29 <shapr> humbug
07:48:35 * Marvin-- wants to use partial application with ` ` 
07:48:44 <shapr> eh?
07:48:47 <shapr> oh!
07:48:54 <Marvin--> suppose f takes three arguments, I want to be able to say `f x`
07:49:05 <Heffalump> someone pasted a neat trick to the list for doing that
07:49:10 <Heffalump> I forget how it worked, though
07:49:21 <Marvin--> I also find it a bit odd you can't do `(+)`
07:49:45 <shapr> `` just means infix, right?
07:53:54 <Marvin--> why are most of the winning categories in ioccc called "Best Abuse of XYZ"? :)
07:54:12 <esap> ioccc is about abuse.
07:55:09 <ludde> how do I convert the type Handle that socketToHandle returns into an Int that threadWaitRead expects?
07:55:21 <SyntaxPolice> shapr: do you have access to the haskell cvs rep?
08:00:47 <ludde> anyone?
08:15:46 <ludde> are there no useful "while" or "loop" monad functions?
08:16:16 <esap> ludde: sequence
08:16:35 <ludde> how would I use that?
08:16:35 <Heffalump> don't while and loop exist?
08:16:45 <ludde> I get "variable not in scope"
08:16:46 <Heffalump> sequence isn't that helpful for what you presumably want
08:17:34 <esap> sequence (cycle [putStrLn "foo"])
08:17:58 <Heffalump> DYM cycle?
08:18:03 <Heffalump> but right, yeah
08:18:05 <Smerdyakov> ludde, what is it you want? A function that takes a test in terms of a Monad -> Bool Monad and body as a Monad -> () Monad ?
08:18:48 <ludde> I want one that takes IO () and runs that IO code repeatedly
08:19:05 <Smerdyakov> Hm
08:19:13 <Smerdyakov> I guess you don't really need the inputs since it's a monad =D
08:19:55 <Smerdyakov> And I guess I used ML type constructor order... ;-)
08:20:04 <Heffalump> ludde: what esap said will do, then
08:20:12 <ludde> ok
08:20:33 <Smerdyakov> I would think you'd want some local state preserved from iteration to iteration in general.
08:21:40 <esap> foldM then?
08:22:00 <Smerdyakov> esap, I don't know. What's its type?
08:22:09 <esap> foldM            :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
08:22:14 <kawfee> let f x y = if x > 0 then x else x * y loop = 2 * loop in f 9 loop
08:22:24 <kawfee> how does that get evaluated?
08:22:28 <Smerdyakov> esap, doesn't duplicate while loop, since you have to know how many iterations ahead of time
08:22:51 <esap> you can put in an infinite list as argument, then use exceptions to bail out of the loop.
08:22:59 <Smerdyakov> kawfee, not valid Haskell code
08:23:01 <kawfee> Smerdyakov: hi
08:23:05 <Smerdyakov> kawfee, missing a ;
08:23:14 <kawfee> Smerdyakov: it's on seperate lines
08:23:25 <kawfee> let f x y = if x > 0 then x else x * y; loop = 2 * loop; in f 9 loop
08:23:25 <Smerdyakov> kawfee, well, use ;'s to indicate that when you put it on one line.
08:23:31 <kawfee> how about that?
08:23:34 <Smerdyakov> No ; after the last one :P
08:23:49 <kawfee> I didn't
08:23:59 <Smerdyakov> You should have only the first of those ;'s.
08:24:05 <Smerdyakov> They're just separators, not terminators.
08:24:08 <kawfee> oh
08:24:21 <kawfee> well that is how it is written, on three lines
08:24:25 <Smerdyakov> Where do you get stuck evaluating it?
08:24:47 <kawfee> ahh
08:24:49 <kawfee> I see it now
08:24:54 <kawfee> the loop is just a binding?
08:25:04 <Smerdyakov> Yes.... what else would it be?
08:25:10 <kawfee> I confused myself
08:25:11 <kawfee> thanks
08:25:18 <Smerdyakov> You can't throw in = just anywhere :D
08:26:01 <kawfee> so I evaluate f 9 loop, with f x y?
08:26:10 <kawfee> trhe loop binding doesn't appear to ever get evaluated
08:26:30 <Heffalump> well, it wouldn't
08:26:35 <kawfee> but I have no way of compaing loop with 9
08:26:45 <kawfee> comparing even
08:26:49 <Heffalump> well, no
08:26:57 <Heffalump> if you ever tried to compare it with something it'd get evaluated
08:27:07 <kawfee> ahh ok, thanks
08:27:12 <kawfee> so my answwer woulkd be 9?
08:27:20 <Heffalump> yes
08:27:39 <kawfee> ok, now I have to do innermost and outermost evals, thanks guys
08:30:02 <kawfee> wouldn't evaluation of loop = 2*loop be infinite?
08:31:32 <Heffalump> kawfee: yes
08:31:39 <Smerdyakov> No, Haskell has a special rule that infinite loops return 6.
08:34:22 <mgoetze> w00t, pizza service found me :D
08:35:54 <ludde> Why doesn't this code accept clients like it should? http://rafb.net/efnet_cpp/paste/results/N1500378.html
08:36:06 <ludde> I suspect "accept" blocks all the concurrent threads
08:46:36 <Smerdyakov> Are you mixing code not meant for a Concurrent Haskell extension with that very system? =)
08:47:19 <ludde> Smerdyakov: I'm just using the network module
08:47:46 <Smerdyakov> I know SML/NJ has separate versions of the socket code for regular vs. Concurrent ML
08:47:52 <Smerdyakov> Sooo.... maybe you need to fiddle with something.
08:48:03 <ludde> threadWaitRead :: Int -> IO () 
08:48:03 <ludde> Block the current thread until data is available to read on the given file descriptor. 
08:48:11 <Smerdyakov> *shrug*
08:48:16 <ludde> I think it might be a good idea to put this right before accept
08:48:29 <ludde> but I have no idea what to pass as the Int argument, cause i only have a Handle and a Socket
08:48:42 <Smerdyakov> Ick... Int for file descriptor
08:48:58 <ludde> yeah, but how do I convert a Socket into such an Int ?
08:49:46 <dark> Network.Socket.fdSocket :: Socket -> CInt
08:50:08 <ludde> CInt..hmm?
08:50:19 <dark> I'd recommend wrapping the glue code into a threadWaitSocket :-)
08:50:48 <dark> CInt is in Foreign.C.  It's a member of Integral, so fromIntegral works on it.
08:50:57 <ludde> cool
08:51:16 <dark> It might go wrong if you're on a platform where "int" in C is larger than Int in Haskell.
08:51:36 <ludde> i don't think there are any such platforms
08:51:53 <dark> Depends on your Haskell flavour, the Report only guarantees 30 bits in an Int.
08:51:58 <dark> GHC uses 32, though.
08:57:32 <esap> hmm.. maybe handleToFd and fdToInt also do the trick?
08:57:47 <dark> If you have a Handle.
08:58:20 <dark> If you do socketToHandle the Socket is no longer safe to use, I learned that the hard way.
08:58:49 <esap> oh hmm.. ok.
08:58:54 <mgoetze> dark: wanna play go?
08:59:08 <dark> mgoetze: Not tonight, I have a headache :)
08:59:15 <mgoetze> dark: all the better... lol
08:59:42 <ludde> it behaves exactly like before, when I use threadWaitRead :(
09:02:05 <esap> maybe your problem is the same as in http://www.haskell.org/pipermail/glasgow-haskell-bugs/2001-October/001946.html ?
09:02:59 <ludde> the problem seems to be related to buffering
09:04:06 <ludde> ok i turned off buffering
09:04:17 <ludde> and it seems to work
09:23:07 <Overflow> anyone in here who could take a look at my ocaml code for a stack?
09:24:07 <mgoetze> Overflow: this is the haskell channel :)
09:24:18 <Overflow> ocaml is almost haskell
09:24:21 <Overflow> ^^
09:24:32 <mgoetze> yeah, sure :)
09:24:38 <Overflow> type 'a stack = Empty | Top of ( 'a * 'a stack);;
09:24:38 <Overflow> let push (x,stack) = Top (x,stack);;
09:24:38 <Overflow> let pop (stack) = match stack with
09:24:38 <Overflow> |Empty -> failwith "empty"
09:24:38 <Overflow> |Top (x,rest_stack) -> (x,rest_stack)
09:24:39 <Overflow> let mystack = Top (3,Top(...(5,Empty) ....
09:24:52 <Overflow> -------------------
09:25:16 <Overflow> tdu u think im on the right way?
09:25:19 <Overflow> do
09:25:45 <Overflow> können auch deutsch reden :D
09:26:03 <dark> This looks exactly like Haskell lists :)
09:26:33 <Overflow> u think its correctly implemented ?
09:26:53 <Overflow> the one in ocaml is muc more complicated
09:28:22 <Overflow> dark ???
09:29:10 <andersca> Is it possible to use
09:29:14 <andersca> doh
09:29:41 <Overflow> im not sure about doh *g*
09:32:53 <Igloo>   This is the first early beginnings of what I hope fill become a GDB-style
09:32:53 <Igloo>   debugger for use with GHC.
09:33:00 <Igloo> (from a GHC CVS commit)
10:08:32 * shapr bounces
10:09:04 <shapr> Igloo: w00, tell us more
10:09:49 <Igloo> It's in the speceval branch - I didn't read the rest, but it should be in the archives shortly if it isn't already
10:10:13 <Igloo> subject had hsdebug in it I think
10:10:26 <shapr> cvs commit list?
10:10:32 <shapr> that's one I'm not on
10:11:13 <Igloo> Yup
10:12:56 * shapr looks for archives
10:34:44 <ludde> is there any shorter way to write:
10:34:45 <ludde> 	cloop
10:34:45 <ludde> 	where
10:34:45 <ludde> 		cloop = do
10:34:45 <ludde> 			line <- hGetLine h
10:34:45 <ludde> 			writeChan chan line
10:34:47 <ludde> 			cloop
10:35:32 <Heffalump> cloop = hGetLine h >>= writeChan chan >> cloop
10:35:37 <Heffalump> is shorter, but possibly not in a helpful way
10:37:16 <Heffalump> if you already have "fix" defined (fix f = let a = f a in a), then you get
10:37:38 <Heffalump> fix (hGetLine h >>= writeChan chan >>)
10:44:05 <ludde> hmm
10:44:52 <ludde> ok thanks
10:48:25 <Heffalump> I don't actually think making code compact in this way is generally helpful
10:48:30 <ludde> no..
10:48:31 <ludde> but..
10:48:35 <Heffalump> but you did ask :-)
10:48:38 <ludde> i did it like this instead:
10:48:38 <ludde> loop a = do a; loop a
10:48:53 <ludde> then I could simply write loop $ do
10:49:00 <Heffalump> right
10:49:01 <ludde> anyway
10:49:30 <ludde> in ghci, I use the concurrent module, but when I press Ctrl-C to stop the program, the threads are still running in the background
10:49:33 <ludde> I want to kill those too
10:52:17 <Heffalump> can you catch the Ctrl-C exception?
10:52:23 <ludde> no idea..
10:52:24 <ludde> but.. 
10:52:33 <ludde> i don't know about all the thread handles of my process
10:52:42 <ludde> since I create threads at many different places
12:02:17 <det> Is it possible to achieve overloading with ocaml modules as you can with haskell type classes ?
12:13:31 <engstad> det: No, you can't do overloading in Ocaml.
13:14:50 <SyntaxPolice> Marvin--: alive?
13:15:10 <camold> gn8 to all and cu tomorrow ! bye bye
13:16:14 <det> engstad, that is the suck :/
13:16:17 <det> engstad, thanks
13:16:33 <SyntaxPolice> Marvin--: I think you were talking about packaging Alex so you could package a BNF converter... I told you that you might want to hold off since it would be released w/ happy. I want to warn you that I think Alex will change so it might not be compatable w/ the bnf converter after that.
13:19:07 <Marvin--> SyntaxPolice: hmm... well, that's pretty much Aarne's problem, isn't it? :) Simon Marlow suggested I package it since he had no idea when a new release of happy was forthcoming
13:22:46 <SyntaxPolice> Marvin--: I see.  being that it will change, that might be a good idea anyway.  OTOH, maybe it would make sense to package alex together w/ the BNF converter.
13:23:34 <Marvin--> SyntaxPolice: bnfc doesn't *use* alex, it generates (among other things) an alex input file and a makefile that calls alex
13:24:42 <SyntaxPolice> Marvin--: does that change something I'm not seeing?
13:25:32 <SyntaxPolice> so bnfc would "suggest" alex be installed or something.
13:25:33 <Marvin--> SyntaxPolice: bnfc should Suggest alex, sure, but nothing more
13:25:44 <Marvin--> meaning alex should definitely be in a separate package
13:25:50 <Marvin--> am I misunderstanding you?
13:26:17 <SyntaxPolice> Marvin--: the problem I see, which is not a big deal, is that you'd create a package for Alex, then Happy would come out w/ a different version of Alex that would be incompatable w/ the old alex and bnfc.
13:26:35 <SyntaxPolice> So now we have two competing versions of Alex in Debian, and your package breaks if we delete the one you packaged.
13:26:54 <Marvin--> which is what Conflicts is about... we fix bnfc, drop the old alex and everybody is happy (no pun intended)
13:28:04 <SyntaxPolice> I'm doubtful of whether or not you meant that pun :) but that sounds fine to me.  BTW, does bnfc depend on GHC for any reason at the moment.
13:29:40 <Marvin--> I *think* it's fairly portable
13:30:43 <Marvin--> but I'll be build-depending on ghc
13:32:53 <SyntaxPolice> yeah. OK.  Keep me posted, I Just wanted to give you a head-up that SimonMar and I may be altering Alex soon.
13:33:22 <Marvin--> what changes are we talking about?
13:34:13 <SyntaxPolice> Marvin--: its still in the planning phase, but some changes to the syntax of Alex files, some performance improvements. I wouldn't want to elaborate too much in public and end up commiting to anything :)
13:34:26 <Marvin--> fair enough :)
13:34:37 <Marvin--> I'll return that "keep me posted" right back at ya ;)
13:35:01 <Marvin--> "The horse (boot-floppies) is dead, will you please stop kicking it?" heh
13:35:13 <SyntaxPolice> Will do. Tell me also if you come up with a nice solution to the problem of making a package work w/ different compilers.
13:35:26 <Marvin--> ugh, yes
13:35:42 <SyntaxPolice> :) I'm going to have to beat that thread again soon it seems it died down before becomming a flame war.
13:36:27 <Marvin--> I'd be happy to fan it a bit for you
13:36:44 <Marvin--> "you people are insane to suggest compiling at install-time, sheesh"
13:36:48 <SyntaxPolice> hehe
13:37:09 <SyntaxPolice> I know I know... this whole thing bugs the hell out of me. I want an elegant solution :)
13:42:26 <Binkley> hey all
13:52:00 <Heffalump> hiya
13:52:26 <Marvin--> sheesh, I thought *I* was a nitpicker
13:56:27 <SyntaxPolice> Marvin--: are you refurring to my "elegant solution" comment?
13:57:58 <Marvin--> SyntaxPolice: no, I'm referring to a vote on debian-vote
13:58:02 <Marvin--> err, s/vote/post/
13:58:10 <Marvin--> by tbm
14:00:05 <Marvin--> I prefer elegant solutions too, heck I'm a Haskell user :)
14:03:13 <Smerdyakov> Inelegant solutions behind elegant interfaces are quite nice, too.
14:08:16 <Marvin--> heh
16:06:52 <stepcut> whee!
16:07:09 <stepcut> the exclamation, not the person
16:07:21 <whee> :)
16:07:43 * stepcut is very-slowly making a ghc interface to mysql
16:08:55 <Heffalump> ghc?
16:09:21 <stepcut> well, meaning, it will compile under ghc. The HaskellDB stuff requires TREX
16:09:55 <stepcut> I have not been able to find any solid mysql support that works under ghc
16:10:39 <Heffalump> right
16:11:07 <stepcut> I briefly pondering porting TREX to ghc, but that is definately beyond my capabilities and time limits
16:11:35 <stepcut> well, time limits
16:13:00 <Heffalump> heh
16:13:24 * Heffalump disappears to get stuff done
19:00:33 <pat> hi, i'm interested in haskell for dialogue development. anyone know of some code i can look at?
23:59:30 <Chilli> Hi!
