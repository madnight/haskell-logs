03:48:59 <shapr> yay
03:49:04 * shapr bounces happily
03:49:28 <andersca> yo shapr
03:49:36 <shapr> hey andersca, wassup?
03:50:12 <andersca> shapr: working on a lab assignment, waiting for a phone meeting
03:50:28 <shapr> fuh assignment?
03:51:26 <andersca> one that koen made
03:51:27 <andersca> http://www.cs.chalmers.se/Cs/Grundutb/Kurser/ndg/Del1/lab2.html
03:51:54 <shapr> mmm, fun
04:10:27 <shapr> yow, simon pj is asking for guidance from some expert in fundeps
04:26:26 <shapr> hi Arnia, what's up?
04:29:18 <Arnia> shapr: Hey. I'm pondering monad construction and flicking through the latest Journal of FP issue online
04:29:35 <shapr> can I see that stuff online without a subscription?
04:31:22 <Arnia> shapr: Nup, unless the author releases it themselves. I'm using my university subscription. Mind you, this issue is merely the latest revision of Haskell98 report and Libraries report
04:37:20 <Arnia> shapr: Are there any good guides to monad creation?
04:37:57 <shapr> hmm
04:43:34 <shapr> I think I've seen one, but I don't remember where
04:43:59 <Arnia> I want to store two sets of structures between operations within the monad. Some functions alter these structures whilst others are purely semantic. How do I write the functions that update the structures?
04:51:15 * Arnia is still trying the 'get' monads
04:51:22 <Arnia> s/the/to
04:51:29 <shapr> oh, there's a good page for that
04:51:49 <shapr> http://www.dcs.gla.ac.uk/~nww/Monad.html
04:51:51 <shapr> that's really good
04:52:13 <shapr> read through that, type in all the code
04:55:48 <Arnia> I can feel my brain beginning to understand now. Its just taking longer than I'd like :-\
04:56:03 <shapr> it's *very much* worth it
04:56:18 <shapr> read Noel's page about six time in a row, sleep on it
04:56:27 <shapr> and then you'll be a lot closer 
04:56:47 <shapr> worked for me
04:57:01 <Arnia> I know... I am almost there in fact. Its just getting the knowledge to bed down comfortably so it becomes second nature.
04:57:15 <shapr> yah, that part is hard
04:58:27 <shapr> hi infotech 
04:58:32 <shapr> how may I assist you?
04:58:36 <infotech> hi shapr
04:58:46 <shapr> want to learn haskell?
04:58:48 <Arnia> Still. I can now understand where it comes from. I just read through the code to Parsec's ST monad
04:59:24 <shapr> noel's page really made it clear to me, because he takes an explicit passing example and directly rewrites it as a monad
04:59:27 <infotech> shapr: yea I'm learning haskell atm, but I'd rather learn it without any assistance :)
04:59:43 <shapr> infotech: ok, feel free to ask questions if you get some
04:59:54 <infotech> shapr: no problem, thanks
05:02:00 <Arnia> I'm definitely a haskell addict. I sat through a lecture this morning on the STRIPS planning system and spent most of it thinking about how to implement the algorithm functionally
05:02:11 <shapr> what's STRIPS?
05:03:01 <shapr> I also think Haskell is the niftiest language I've seen yet.
05:04:08 <Arnia> It was a planning system developed in Stanford in the early seventies. It uses a reduced form of predicate calculus. Its a total order planner which means it is suboptimal, but it was a major stepping stone in planning research
05:04:58 <shapr> hey, I've haven't thought of the plone site lately, any word on that?
05:06:05 <Arnia> We're having bandwidth issues atm so it will have to go on hold :(
05:06:55 <shapr> ok
05:07:23 <shapr> I'd like see it running on HWS-WP.. I could try that locally...
05:07:53 <shapr> Arnia: my short summary of monads is "two methods and three rules that let you safely subclass the idea of function call"
05:08:44 <Arnia> I think its state transformers that do my head in most...
05:09:24 <shapr> have you read the State section on that page I posted?
05:09:40 <shapr> when he talked about a database, it become much more clear to me
05:10:49 <Arnia> Yeah... I'm just reading it now
05:50:37 <Arnia> shapr: wb
05:55:24 <shapr> emacs crashed :-(
05:55:28 <shapr> hasn't happened in many months
05:56:28 <Arnia> :(
06:35:18 * shapr bounces happily
06:36:49 <mgoetze> hi shapr :)
06:36:52 <shapr> hi mgoetze 
06:38:07 <shapr> wassup?
06:38:23 <Arnia> shapr: Dependent Types Forever... forget functional programming, we're now making TYPES first class values ;)
06:38:47 <shapr> yay!
06:41:39 <mgoetze> shapr: sleep schedule fubar, not really ready for exam next tuesday, my code is still in perl, and there's a whole lot of "future of debian uncertain" crap in my mailbox, but otherwise great :) and you?
06:51:57 * Arnia continues reading McBride's paper
06:52:10 <Arnia> Wow, its like my concept of Active Types... its great :)
06:55:54 <shapr> mgoetze: you're making me want to become a debian developer ;-)
06:56:18 <mgoetze> shapr: let me become one first, then i'll sponsor you :)
06:56:20 <shapr> mgoetze: hacking on xslt in java, trying to stay in work-mode and away from all that fun haskell stuff
06:56:24 <shapr> mgoetze: cool!
06:56:46 * mgoetze should get around to doing that package...
06:56:54 <shapr> I'd like to update some of the emacs packages
06:57:00 <shapr> I'm unhappy with them
07:05:35 <shapr> hi skylan 
07:07:12 <mgoetze> shapr: file bugs with patches :)
07:07:47 <shapr> I'm tempted to try to NMU jde
07:09:16 <mgoetze> lol
07:09:35 <shapr> palomer: how's your haskell studies doing?
07:09:43 <mgoetze> if you try to become a dd and tell your am "i want to nmu jde", you'll be kicked out of the nm queue quite quickly :)
07:10:04 <shapr> really? why?
07:10:21 <shapr> kicked out backwards or forwards? ;-)
07:11:25 <mgoetze> well, doing nmu's on other people's packages is considered quite impolite
07:12:09 <shapr> oh
07:12:11 <shapr> I didn't know that.
07:12:20 <shapr> jde hasn't been updated it forever :-/
07:12:24 <shapr> er s/it/in
07:12:57 <Igloo> If NMUing was necessarily impolite then it wouldn't exist
07:13:19 <mgoetze> shapr: so, talk to Mithrandir about it...
07:14:51 <skylan> Hello shapr
07:14:52 <shapr> ok
07:15:00 * shapr bounces happily
07:15:11 <shapr> life is fun
07:16:51 <shapr> aha, mithrandir == jde maintainer
07:17:03 <Arnia> shapr: I think I've found a cool project topic for my dissertation :)
07:17:06 <mgoetze> shapr: yeah, he's on irc quite a bit
07:17:21 <Arnia> shapr: Relational calculus implemented in Haskell
07:17:31 <shapr> I don't know what relational calculus is...
07:17:40 * shapr googles
07:17:41 <mgoetze> NMUing is only ok if (1) it's done with the maintainer's permission or (2) the maintainer is MIA or (3) it's really urgent (e.g. security)
07:17:55 <shapr> oh, I see.
07:18:28 <Arnia> shapr: The mathematical foundations of relational databases :)
07:18:58 <shapr> Arnia: have you seen HaskellDB?
07:19:22 <shapr> Daan said he might put HaskellDB on top of HSQL (the database part of HToolkit)
07:19:42 <shapr> http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?relational+calculus
07:19:43 <shapr> mmm
07:19:56 <shapr> hi Igloo, what's up?
07:20:02 * shapr bounces around randomly
07:20:14 <Igloo> pan
07:20:29 <shapr> the image editor thingy?
07:20:36 <Igloo> Indeedy
07:20:40 <shapr> cool
07:20:51 <Igloo> I'm in the middle of rewriting it withthe power of TH
07:21:01 <shapr> what about pancito?
07:21:08 <Igloo> Never heard of it
07:21:11 <shapr> http://www.acooke.org/jara/pancito/index.html
07:21:45 <shapr> I still can't get GHC + TH to build on my machine :-/
07:21:50 <Igloo> OK, my supervisor really should have told me about that  :-)
07:22:06 <shapr> maybe he didn't know?
07:22:09 <shapr> or she
07:22:26 <shapr> is there some good way to do gender-neutral pronouns?
07:22:52 <Igloo> But it's his job to know everything, particularly derivations of things he co-authored  :-)
07:23:04 <Igloo> Speak German, I think
07:23:07 <shapr> heh
07:23:10 <shapr> good answer :-)
07:23:29 <shapr> oh, conal is your supervisor?
07:23:38 <Igloo> No, Oege is
07:23:40 <shapr> oh
07:23:47 <shapr> oh duh, I knew that
07:23:56 * shapr tries to wake up
07:24:08 <mgoetze> Igloo: wie bitte?
07:24:11 <Igloo> This doesn't give the impression of optimising in the way pan does
07:24:27 * Igloo should know what that means
07:24:40 <shapr> I know very little about either pan or pancito
07:24:45 <shapr> just that pancito is a derivation
07:25:28 <Igloo> pan optimises image creation functions and produces C. pancito seems to not optimise but just provide Haskell functions
07:26:33 <Igloo> Ah, it actually says inspired, not derived. That makes sense.
07:27:56 * Igloo e-mails Oege despite the fact I can hear him from where I am  :-)
07:28:17 <Arnia> That's lazy ;)
07:29:58 <shapr> heh
07:30:18 <shapr> otoh, it's a permanent record of a conversation, and therefore useful
07:30:28 <Igloo> Good excuse
07:32:12 <shapr> :-)
07:32:44 <shapr> Igloo: hey, have you seen the FunctionalIsPoorAtModeling discussion on TheOriginalWiki ?
07:32:54 <Arnia> Oooh, link please
07:32:58 <shapr> I was wondering if you might have some FP modelling suggestions
07:32:59 <Igloo> No
07:34:01 <shapr> http://c2.com/cgi-bin/wiki?FunctionalModelingExamples
07:36:03 <Igloo> Well, I would probably use an abstract datatype, possibly using a record as the concrete implementations
07:36:59 <shapr> how do you do abstract datatypes in Haskell?
07:37:58 <Arnia> Use a module exposing only certain functions
07:38:34 <Igloo> By not exporting the constructors of your datatypes
07:40:18 <Arnia> But still exporting the typename
07:42:58 <shapr> oh, neat
07:43:12 <shapr> oh, verycool
07:43:28 <shapr> that's *exactly* how factory objects work in Java
07:43:36 <shapr> fascinating
07:47:29 <shapr> if there isn't a HaskellWiki page on that, there should be
07:48:53 <shapr> hey, this is cute: http://haskell.org/wiki/wiki?InfixExpression
07:50:49 <shapr> ah, it already exists: http://haskell.org/wiki/wiki?AbstractDataTypes
07:55:21 <Smerdyakov> Does Haskell have a gimpy enough module system that this is the first you've heard of this method, shapr? =)
07:57:12 <Arnia> shapr: I think I want to make my database system cleaner than HaskellDB, or at least easier to understand, and I want to be able to use the full power of relational calculus, rather than just SQL
08:10:21 <shapr> Smerdyakov: learn haskell and find out ;-)
08:28:40 <creature> What do I want to read to find out how Haskell does ordering on strings? 
08:28:41 <shapr> I wish I had flip in shell scripting
08:29:16 <shapr> ls *|xargs -n 1 (flip ln -s)
08:29:19 <shapr> something like that
08:29:26 <shapr> I bet I could write it in Joy
08:29:44 <shapr> creature: I would assume it orders just like chars in an enum
08:30:09 <creature> foreach $x in 'ls *|xargs -n 1'; do ln -s $x; done 
08:30:17 <creature> ^^^ Can't you do something like that? 
08:30:45 <shapr> hm
08:31:19 <creature> Although my bash is fairly pants, and that might not be entirely what you're after.
08:31:44 <shapr> I want something that creates symlinks in this dir, to all the files in another dir
08:31:56 <shapr> oh waitasec...
08:31:58 <shapr> man lndir
08:31:59 <shapr> hmm
08:32:20 <shapr> that's much easier
08:32:27 <shapr> lndir ~/foo .
08:34:18 <Igloo> You can do it quite easily with find too
08:35:17 <Igloo> Or just ln -s wheretheyare/* . if that's all you want
08:35:24 * shapr has a brief thought of wrapping shell functions in Hsh.hs
08:35:31 <shapr> oh, good point
08:35:33 <shapr> that's much simpler
08:37:46 <creature> Argh@this Haskell I'm struggling with.
08:37:51 * creature checks the anon Q&A pages.
08:38:44 <Smerdyakov> Just use a cheat code.
08:38:51 <Smerdyakov> And get infinite lives.
08:40:27 <creature> Hwh.
08:40:29 <creature> Heh, even.
08:49:53 * Igloo gets the response "correct." from Oege re pancito  :-)
08:50:23 <shapr> what was the question?
08:50:38 <shapr> oh, 'inspired' not 'derived' 
08:51:01 <Igloo> I said I'd just been pointed at it but that it didn't seem to do optimisation
08:53:40 <shapr> well, good answer then =)
08:55:32 <Igloo> :-)
09:01:46 <shapr> hey, I could use QuickCheck for XSLT testing... hmm!
09:01:53 <shapr> that would be very cool...
09:08:07 <kawfee> morning
09:15:30 <shapr> hey kawfee 
09:15:57 <shapr> stupid units question... how do I go from liters to cubic meters?
09:16:22 <shapr> assuming H2O of course...
09:18:05 <whee> divide by 1000 I think
09:18:21 <shapr> ah, thanks
09:29:28 * shapr boings
09:29:37 <hdaume> hi shae
09:30:15 <shapr> hi hal, what's up?
09:31:03 * shapr entertains himself
09:31:04 <shapr> http://kungens.kemi.fi/~shae/src/haskell/MountainDew.hs
09:31:20 <shapr> now that's a candidate for a quick Haskell CGI
09:39:57 <shapr> http://c2.com/cgi-bin/wiki?FunctionalProgrammingEnvironment
09:40:07 <shapr> question from someone on TheOriginalWiki
09:41:10 <shapr> good question too
09:41:24 <shapr> I want HaskellDB on HToolkit!
10:20:45 * shapr codes very quietly
10:23:29 * opet codes quietly and leaves u2 to be noisy..
10:23:46 * Marvin-- is noisily listening to blind guardian
10:27:25 * shapr is listening to Chemical Brothers, Life Is Sweet Remix
10:31:06 * Igloo gets something resembling working code
10:31:47 <shapr> yay!
10:31:52 <shapr> code is good!
10:32:39 <esap> (almost all) code is huge.
10:49:42 <Igloo> This is currently particularly ugly, and almost certainly causes bad variable capture and stuff if you're unlucky
10:50:04 <Igloo> But I'll worry about that when it's finished  :-)
10:52:23 <opet> Igloo: the best approach to take :)
11:04:01 <mgoetze> SyntaxPolice: ping
11:48:28 * shapr boings
11:48:45 <mgoetze> shapr: wanna play go? :)
11:48:55 <shapr> nah, I'm actually in midst of paying work...
11:49:07 <shapr> I've just figured out a way I might be able to use Haskell in this project...
11:49:08 <shapr> mmm
11:49:56 <mgoetze> lol
11:50:39 <shapr> there's no way to unit test XSLT
11:50:47 <shapr> but I could use QuickCheck to test xslt!
11:51:06 <shapr> generate random but valid input according to the input DTD
11:51:18 <shapr> and check to make sure that any output is valid according to the output DTD
11:53:43 <unknown_> anyone know a way to do left recursion?
12:00:47 <shapr> what does that mean exactly?
12:02:01 <kawfee_> say you have a string, and you want to process the string left recursively
12:02:15 <kawfee_> "3-2-1"
12:02:26 <kawfee_> you want to do 3-2 then the result - 1
12:02:34 <kawfee_> that would be an example
12:03:20 <shapr> well, what do you think?
12:03:31 <shapr> do you know how to do right recursion?
12:03:34 <kawfee_> yes
12:03:37 <kawfee_> of course
12:03:42 <kawfee_> that's the easy one
12:03:59 <kawfee_> 3-2-1, 2-1 then 3 - (2-1)
12:04:11 <kawfee_> I'm trying to do it in a parser
12:04:19 <kawfee_> I already have the right one
12:05:14 <shapr> how did you do right recursion?
12:06:16 <kawfee_> > rightAssocSub = do e1 <- decimal
12:06:16 <kawfee_> >     op <- char '-'
12:06:16 <kawfee_> >     e2 <- rightAssocSub +++ decimal
12:06:16 <kawfee_> >     return (e1 - e2)
12:07:09 <shapr> what part of that makes it specifically right recursive rather than left recursive?
12:07:32 <kawfee_> doing the part in e2 last
12:07:40 <kawfee_> if I did it in e1 it would go left, but I get a stack error
12:07:48 <kawfee_> control stack 
12:07:50 <shapr> what sort of stack error?
12:08:20 <kawfee_> HW5> papply leftAssocSub "3-2-3-4-5"
12:08:20 <kawfee_> ERROR - Control stack overflow
12:17:11 <shapr> do you see anything in that code that might be right-handed?
12:18:12 <shapr> I think your rightAssocSub is righthanded in two places.
12:18:15 <shapr> not just one
12:19:46 <kawfee_> where?
12:20:03 <shapr> what do you think?
12:22:19 <shapr> kawfee_: where in there could handedness not matter?
12:23:05 <kawfee_> handedness>?
12:24:27 <shapr> yes, left or right
12:24:40 <shapr> what operations in your code are not commutative?
12:24:44 <shapr> hi buggs 
12:24:49 <buggs> hoi shapr
12:24:53 <kawfee_> the - 
12:25:00 <shapr> kawfee_: anything else?
12:25:43 <kawfee_> the way I retrieve the elements
12:25:53 <shapr> ?
12:25:57 <kawfee_> but that has to happen in the order it does
12:26:14 <kawfee_> nothing
12:26:20 <kawfee_> are you referring to the +++ ?
12:27:30 <shapr> what do you think?
12:36:07 <kawfee_> no
12:36:25 <kawfee_> well maybe
12:36:44 <kawfee_> but if I put it on the otehr side it doesn't work
12:39:33 <kawfee_> I think I may have a way to do it
12:41:11 <kawfee_> I need to extract the first two decimals from the string, then  do the same thing to the rest of the string
12:41:20 <kawfee_> but my problem is with the stack overflowing
12:42:11 <kawfee_> yeah, I'm still stuck
12:44:18 <shapr> bah
12:44:22 <shapr> I had more suggestions...
13:26:30 <shapr> interesting question on comp.lang.functional
13:26:44 <shapr> whether there are any parser generators that generate pretty printers at the same time.
13:26:49 <shapr> would be nice
13:39:09 <Marvin--> bnfc
13:39:45 <Marvin--> bnfc generates a pretty printer among other stuff
13:40:59 <Smerdyakov> Does it generate LaTeX macros?
13:43:21 <Marvin--> no I don't think so, it generates a LaTeX BNF grammar though
13:53:07 <shapr> neato
13:55:15 * shapr replies to the post
14:30:21 <shapr> has anyone heard of an XSL processor in Haskell?
14:30:52 <shapr> hi mws 
14:32:58 <mws> hi
14:33:42 <mgoetze> hi moritz :)
14:33:55 <ludde> XSL?
14:34:00 <mws> ;-)
14:36:15 <shapr> ludde: eXstensible Stylesheet Language.. it's how most people do XML transformations
14:36:55 <mws> was macht hansenet?
14:37:10 <mws> sorry
14:37:39 <mgoetze> shapr: mws needs to learn haskell :)
14:40:51 <shapr> hi moritz, would you like some urls to resources for learning Haskell?
14:41:05 <mws> well, yes, sounds good...
14:41:34 <shapr> http://haskell.org/learning.html
14:41:37 <shapr> that's a good place to start.
14:42:12 <mgoetze> shapr: don't push him too hard though, he needs to pass the physics exam :)
14:42:47 <shapr> heh, ok
14:43:01 <shapr> do I push people? :-)
14:43:44 <mws> mgoetze: i know of at least one more student in #haskell who is supposed to pass this exam, too
14:43:59 <mws> shapr: not me
14:44:18 <mgoetze> mws: ah, well, sometime within the next 2 semesters, anyhow :)
14:49:58 <mws> is there any book out there written about haskell (or functional programming)? 
14:51:13 <mws> mgoetze: i mean we could ask the bib to order it. they normally don't reject any wishes...
14:51:25 <mgoetze> mws: hm, good idea :)
14:51:42 <ludde> http://haskell.cs.yale.edu/soe/
14:53:41 <ludde> Paperback $29.95
14:54:31 <mgoetze> didn't simonpj write a book too?
14:55:48 * emu sneaks up behind mgoetze and captures his stones
14:56:15 <ludde> yeah he has written a few books
14:56:35 <ludde> http://www.countrybookshop.co.uk/books/?whatfor=3540196676
14:56:40 <mgoetze> aaaaaargh! no!
14:56:40 <ludde> old one
14:56:44 <opet> one of which I'm waiting for the uni library to give me
14:57:05 * opet drums fingers on the desk
14:59:08 <mws> mgoetze: i just filled out a form at www.tub... to order http://haskell.cs.yale.edu/soe/
14:59:38 <mgoetze> mws: they have a form? interesting, didn't know that :)
15:00:18 <mws> mgoetze: well, me neither. i just found out. go check http://www.tub.tu-harburg.de/index.php?id=360
15:02:16 <mgoetze> do you have to enter your matrikelnummer or something?
15:02:33 <mws> nope. name and email are optional
15:07:12 <shapr> oh, I can order too? ;-)
15:07:29 * shapr bounces
15:07:55 <mgoetze> shapr: yeah, and then come here to pick them up
15:08:05 <mgoetze> let me know beforehand so that we can go have dinner together
15:08:35 <shapr> heh
15:08:45 <shapr> actually...
15:09:00 <shapr> it looks like we're going to erlangen sometime soon
15:09:19 <shapr> with a stop in munich
15:09:32 <andersca> woohoo
15:09:36 * andersca just ordered an iPod
15:09:40 <mgoetze> can't you make a stop in hamburg? it's on the way :)
15:09:48 <ludde> andersca: do you have a mac?
15:09:52 * shapr looks for a map of .de
15:09:58 <andersca> ludde: nope, unfortunately not 
15:10:02 * mgoetze ponders sleeping at uni so that he will be up in time for physics tomorrow :)
15:10:14 <ludde> andersca: is it possible to connect to an iPod without a mac?
15:10:28 <shapr> mgoetze: is hamburg between munich and erlangen?
15:10:29 <whee> ludde: yes, but I doubt it's as seamless
15:10:30 <andersca> yep
15:10:36 <ludde> okay
15:10:43 <shapr> I'm about a zero on german geography
15:10:44 <mgoetze> shapr: no, it's between finnland and munich
15:10:46 <shapr> oh
15:11:24 <mgoetze> from the more general principle that germany is between finland and bavaria :)
15:13:00 <mws> you really should stop at hamburg because it's far more worth stopping here than stopping in munich
15:13:16 <mws> well, at least i think so...
15:14:59 <mws> anyway. it was nice chatting with you people. i'll go and hit the sack. mgoetze: tomorrow 9am at our world-famous technikum. see you there..
15:15:29 <mgoetze> mws: ja, goodnight
15:15:41 <shapr> nice to meet you ...
15:15:44 <shapr> oh well
15:19:12 <shapr> yay, new software
15:19:15 <shapr> http://www.isi.edu/~hdaume/GDC/
15:19:58 <mgoetze> what does it do?
15:20:04 <shapr> unsupervised learning
15:20:08 <shapr> like me
15:20:36 <mgoetze> what does it learn?
15:21:19 <shapr> probably learns about automatic document classification
15:21:23 <shapr> since that's what Hal is studying.
15:21:31 <shapr> we could ask him you know.
15:21:35 <shapr> hdaume: hey, what this do?
15:21:41 <shapr> ahem "what does this do?"
15:25:10 <hdaume> sorry, afk.  basically you give it "feature values" for a bunch of different inputs and it tells you which ones are most similar
15:25:28 <hdaume> you could use it to do automatic document classification by making each feature a word count for a specific word, for instance
15:26:25 <shapr> neat
15:26:47 <hdaume> the web page is a bit out of date: it actually now does support fuzzy k-means, which is much faster than normal k-means (just because i implemented it well)
15:27:35 <shapr> so, it's a classifier?
15:28:06 <hdaume> not really.  in classification you know the target classes for some training examples (hence "supervised").  here, you don't know the classifications (hence "unsupervised")
15:28:13 <shapr> ohh
15:28:44 <shapr> now I understand.
15:29:08 <mgoetze> hi Pseudonym 
15:29:11 <Pseudonym> G'day.
15:29:19 <Pseudonym> The CD is cut.  Release Hell is over.
15:29:24 <hdaume> :)
15:29:40 <Pseudonym> And today, we get an all-afternoon lunch, paid for by RMIT.
15:30:03 <shapr> yay!
15:30:20 <Pseudonym> Which is odd because today, RMIT also gets a report tabled in Parliament citing serious mismanagement.
15:30:34 <Pseudonym> I guess we make sure lunch is paid for first.
15:31:02 <hdaume> free lunch = muy  bueno
15:31:48 <Pseudonym> There is, of course, supposedly no such thing.
15:31:59 <hdaume> true
15:34:19 <shapr> so they're actually paying you for the hard work you put in for the release
15:34:28 <Pseudonym> Kind of.
15:34:33 <Pseudonym> Given that we don't get paid for overtime.
15:35:35 <Smerdyakov> What's a reasonable price for an airplane round trip between Pittsburgh and Oakland, California?
15:35:47 <hdaume> $300
15:35:48 <Pseudonym> Nobody knows.  It changes practically every day!
15:36:04 <Smerdyakov> hdaume, how do I get tickets for that price?
15:36:04 <Pseudonym> Don't ask me why I'm quoting that film.
15:36:16 <hdaume> or $400 if you fly direct
15:36:41 <Smerdyakov> I just need $500 or less, the maximum the school I'm visiting will pay.
15:36:44 <hdaume> (this is based on my Pittsburgh -> LA experience; I'm assuming oakland is similar -- i only flew there twice from pgh)
15:37:04 <hdaume> Smerdyakov: i usually used orbitz or cheaptickets
15:39:48 <Smerdyakov> Wow. expedia.com sure had more expensive tickets!
15:40:37 <hdaume> :)
15:47:18 <Pseudonym> Life is good.  I have ~2hrs of nothing to do and I'm getting paid for it.
15:47:31 <shapr> yay!
15:58:25 <Smerdyakov> hdaume, do you know if it's possible to get orbitz to search based on _arrival_ instead of takeoff times?
15:58:37 <hdaume> Smerdyakov: i think advanced search lets you do that
15:58:46 <kawfee> heh
15:59:09 <hdaume> Smerdyakov: what school are you looking at?
15:59:16 <Smerdyakov> Aha
15:59:18 <Smerdyakov> Berkeley
15:59:19 <kawfee> could someone help me with parsing 3-2-1, I have the right associative parse, just not the left one
16:15:23 <jlouis> more functional programming. I love it..
16:16:57 <shapr> jlouis: eh?
16:17:28 <jlouis> I normally code stuff in perl and C. But all my hobby projects are SML/Haskell
16:17:48 <shapr> ah
16:18:25 <shapr> my work stuff is java and python
16:18:30 <shapr> my fun stuff is haskell
16:20:31 * mgoetze recovers from heart attack he got looking at ebay.de
16:21:42 <Pseudonym> kawfee, how are you doing it atm?
16:22:31 <Pseudonym> Parsec?  Happy?  Home-written recursive descent?
16:30:39 <kawfee> parsing the input with <- 
16:30:52 <kawfee> recursively
16:31:24 <kawfee> > rightAssocSub = do e1 <- decimal
16:31:24 <kawfee> >                    op <- char '-'
16:31:24 <kawfee> >                    e2 <- rightAssocSub +++ decimal
16:31:24 <kawfee> >                    return (e1 - e2)
16:34:59 <hdaume> kawfee: what does +++ do?
16:36:10 <kawfee> it chooses between two parsers, if the first one fails then it goes to the second, if it succeeds then it returns that value
16:36:46 <kawfee> I need to do some sort of left recursion I would guess
16:37:03 <Pseudonym> Left recursion is impossible using recursive descent.
16:37:08 <Pseudonym> So you need to do one of the following:
16:37:13 <kawfee> ahhh
16:37:33 <Pseudonym> 1. You could gather the terms into a list, then process the list once you have it.
16:37:42 <Pseudonym> 2. You could use recursive _ascent_ instead.
16:37:42 <kawfee> I thought about that
16:37:46 <kawfee> ascent?
16:37:49 <Pseudonym> Yes.
16:37:59 <Pseudonym> In an imperative language, you'd implement it like this:
16:38:18 <Pseudonym> subroutine to do subtraction:
16:38:19 <Pseudonym> begin
16:38:23 <Pseudonym>   parse a term
16:38:30 <Pseudonym>     while (the next token is '-')
16:38:32 <Pseudonym>     begin
16:38:38 <Pseudonym>         parse another term
16:38:43 <Pseudonym>     end
16:38:44 <Pseudonym> end
16:38:49 <kawfee> hrm
16:39:07 <Pseudonym> If you implement the loop with recursion (as you'd have to do in Haskell) you have recursive ascent.
16:39:20 <Pseudonym> Rather than recursively descending the parse tree, you're recursively ascending it.
16:39:51 <Pseudonym> Does that make sense?
16:39:59 * Pseudonym has to go get some caffeine
16:40:03 <Pseudonym> BRB
16:40:13 <kawfee> sort of, but I don't see how it does : (3-2) -1, from the string 3-2-1
16:46:05 <hdaume> anyone know how to get emacs to display line numbers on each line?
16:46:20 <shapr> setnu.el
16:47:06 <shapr> hdaume: http://www.emacswiki.org/cgi-bin/wiki.pl?LineNumbers
16:48:00 <hdaume> shae: my officemate thanks you :)
16:48:05 <shapr> heh :-)
16:48:44 <shapr> some of the code I wrote is going into gnumacs proper...
16:48:48 * hdaume is going home
16:48:50 <hdaume> shae: cool!
16:48:55 <shapr> yah, it's pretty spiffy
16:49:06 <shapr> have a good offline day ;-)
17:10:28 <Igloo> What code, shapr?
17:10:40 <shapr> part of the ERC irc client.
17:10:47 <Igloo> Ah, cool
17:10:53 <shapr> seems I wrote something like 75 lines of code..
17:10:59 <shapr> not that I remember doing that... :-/
17:11:10 <Igloo> :-)
17:11:46 <Pseudonym> kawfee, another option is to drive a shift-reduce parser with the recursive descent parser.
17:11:51 <shapr> sleep-coding maybe
17:11:54 <Pseudonym> Do you know how shift-reduce parsing works?
17:24:35 <shapr> wow, bird and de moore wrote a book together?
17:25:13 <shapr> coool
17:25:33 <Pseudonym> Gotta go.  Free lunch.
17:25:37 <Pseudonym> Bye everyone.
17:37:40 <kyagrd> Wow, I'm first here, so many people, feel like I'm in C++ chan on some other irc serv.
17:44:14 <mgoetze> kyagrd: welcome :)
17:48:50 <shapr> hi kyagrd
17:49:47 <kyagrd> Is there anyone working with Haskell in the industry / company ?
17:54:24 <shapr> I'm trying to :-)
17:57:40 <kyagrd> How do you interact with C then :-(
17:57:55 <shapr> I haven't used the FFI so far
17:58:54 <kyagrd> There are libraries / DB interface or so to deal with and they are C API's
17:59:33 <shapr> have you seen the Foreign Function Interface, Green Card, hs2c, QForeign, and the others?
17:59:51 <kyagrd> Yes I've seen Green Card
18:00:11 <kyagrd> and I tried to use Haskell Direct ...
18:00:28 <kyagrd> But Hdirect was very hard to compile ... becase of version problems ....
18:01:49 <kyagrd> What is your method ? any good ideas / suggestions / framwork whatever 
18:02:35 <shapr> I haven't done any interaction with C, so I don't have any personal experience to share
18:05:53 <shapr> some people on this channel have worked with the FFI
18:05:53 <shapr> in great detail even
18:05:53 <shapr> the haskell mailing lists are helpful as well
18:06:19 <kyagrd> Yes I am subscribed in it. Thanks.
18:06:35 <kyagrd> And there is haskell group in alt.comp.lang.*
18:06:49 <kyagrd> newly made i think
18:07:21 <shapr> I've heard of it, though it doesn't show up on my local newsserver
18:09:49 <shapr> usually I would be more talkative, but I'm about to go to sleep
18:10:14 <kyagrd> I'm in the east, this is morning here :-P
18:10:19 <kyagrd> Good night then.
18:10:23 <shapr> I'm in sweden, it's almost morning ;-)
18:10:26 <shapr> good night
18:10:37 * shapr goes to sleep
18:30:04 <kawfee> how does shift reduce parsing work?
18:30:52 <kyagrd> It shifts and reduces.
18:31:06 <kyagrd> reading in a character means shift
18:31:19 <kyagrd> and pattern matching is reducing.
18:41:14 <kawfee> ok
18:42:03 <kawfee> I don't understand what you mean though
18:43:24 <kawfee> is there a way to make a while loop in a parser?
18:48:53 <kyagrd> What do you mean by loop?
18:49:27 <kawfee> well, I want to process a string, and I want a loop to return the element at the head of the input string
18:49:44 <kawfee> while ( get head of string) add the head of the string to what I already have
19:10:40 <kawfee> or, how about this, is there a way I can make "many" perform an operation, specifically - while it is picking up the elements
19:13:05 <whee> perform what kind of operation?
19:13:23 <kawfee> -
19:13:26 <kawfee> subtraction
19:13:58 <whee> you could simplify things a lot by using one of the supplied parsed grammars
19:14:03 <kawfee> I need to grab an expression, then grab another and perfom subtraction, then grab another ... so on until the input is exhausted
19:14:11 <kawfee> what do you mean?
19:14:18 <kawfee> I need to make a parser
19:14:45 <whee> right, and parsec includes the notion of operators and all
19:15:09 <kawfee> parsec?
19:15:46 <whee> oh, nevermind; thought you were using parsec (many is a parsec combinator) :P
19:16:01 <kawfee> I'm using Parselib
19:16:07 <kawfee> the supplied one
19:16:22 <whee> but uh, it might be easier to look at that example with using read/show for trees
19:16:39 <kawfee> yeah, if I could use a binary tree I could do it
19:17:18 <whee> just parse it into a simple ast and evaluate it
19:17:27 <kawfee> ast?
19:17:31 <kawfee> oh yeah
19:17:36 <kawfee> abstract sytax tree
19:17:48 <kawfee> how can I make one in haskell? is there a predefined function?
19:18:27 <whee> you just create a data constructor to represent things and use that
19:26:44 <kawfee> how do you create a data constructor?
19:33:04 <kyagrd> data TypName = CtorName "list of types whatever you want"
19:36:31 <kawfee> so for a tree: data ast = AST "list of lists"
20:00:15 <palomer> :o
20:00:23 <palomer> time to start learning haskell!
20:00:27 <palomer> wheee
20:04:22 <kawfee> all I really need is a list
20:04:36 <palomer> hrm, I emerged ghc and I can't find it
20:04:46 <palomer> whats the name of the binary?
20:04:46 <kawfee> then I need to apply - to the list, two elements at a time
20:07:40 <kawfee> how could I do the following ont he command line: papply many nextExpr "-3-4-5"
20:09:21 <kawfee> would happy tell me how it is generated?
20:16:48 <palomer> hrm, how do I split up my lines is hugs?
20:24:23 <kawfee> ERROR "hw5.lhs":39 - Unresolved top-level overloading
20:24:23 <kawfee> *** Binding             : retEmpty
20:24:23 <kawfee> *** Outstanding context : Monad b
20:24:32 <kawfee> > retEmpty = return []
20:24:40 <kawfee> I want to make a parser that returns []
21:31:21 <kawfee> is there a way to make a parser that tests for [] ?
21:32:12 <kawfee> oh wait, I could just do return []
21:33:00 <kawfee> *** Binding             : empty2
21:33:01 <kawfee> *** Outstanding context : Monad b
21:33:09 <kawfee> could someone help me with that?
21:37:08 <kawfee> nm
21:37:23 <kawfee> for somereason hugs wouldn't allow  empty = return []
21:43:46 <mgoetze> what's return?
21:44:45 <kawfee> how can I make the following return a list: 
21:44:46 <kawfee> > nextExpr :: Parser [Int]
21:44:46 <kawfee> > nextExpr = do char '-'
21:44:46 <kawfee> >               e1 <- nextExpr +++ decimal
21:44:46 <kawfee> >               e2 <- nextExpr +++ return 0
21:44:48 <kawfee> >               return ([e1]++[e2])
21:44:56 <lament> what's return?
21:45:00 <lament> heh. :)
21:45:18 <kawfee> return is a parser that returns it's item
21:45:23 <kawfee> return 0, will deliver 0
21:45:29 <kawfee> return 1 will deliver 1
21:49:14 <dennisb> kawfee: you have to give the type for the empty function
21:53:47 <palomer> :o
21:53:52 <palomer> monads!
22:00:48 <kawfee> oh
22:00:59 <kawfee> well how do I fix my code above to return an [Int]
22:01:22 <kawfee> decimal returns an Int
22:02:31 <kawfee> dennisb: thanks?
22:02:33 <kawfee> thanks
22:03:02 <dennisb> what is +++?
22:03:09 <dennisb> (the type)
22:05:29 <dennisb> The problem with empty is what's called the Monomorphism Restriction, section 4.5.5 in the standard http://www.haskell.org/onlinereport/decls.html
22:06:16 <dennisb> Practicly it just means that sometimes one simply have to tell haskell the type of things
22:08:48 <dennisb> Hmm. How will nextExpr even terminate? It always calls itself recursivly
22:09:27 <dennisb> it could fail but I don't see how it can produce a result (unless +++ do something special)
22:38:28 <kawfee> parser1 +++ pparser2; if both parsers fail then +++ does, if one suceeds +++ does
22:39:25 <kawfee> basically I want to build a parser that returns a list of the elements in a string, i.e. " 3-2-1" it should return [3,2,1]
22:39:46 <kawfee> I think I am doing it wrong now that I think about it
22:40:16 <dennisb> kawfee: aha, I see
22:41:00 <dennisb> then both parsers on the side of the +++ must have the same type
22:41:05 <kawfee> yes
22:41:11 <kawfee> I think so
22:41:17 <dennisb> which they don't have now
22:42:59 <kawfee> > lExpr = do char '-'
22:43:00 <kawfee> >            e1 <- decimal
22:43:00 <kawfee> >            e2 <- lExpr
22:43:00 <kawfee> >            return ([e1]++[e2])
22:43:08 <kawfee> I still get the same error
22:43:28 <kawfee> *** Term           : lExpr
22:43:29 <kawfee> *** Type           : Parser [Int]
22:43:29 <kawfee> *** Does not match : Parser Int
22:43:31 <dennisb> yes. e1::Int and e2::[Int]
22:43:51 <kawfee> oh
22:44:09 <kawfee> oh
22:44:11 <kawfee> oops
22:44:16 <dennisb> you can't put e1 and e2 in the same list since they are not of the same type (but it seems you got it!)
22:44:39 <kawfee> actually, I think I will end up with the same problem
22:44:51 <kawfee> I don't want to parser to fail
22:44:59 <kawfee> right, it's e1:e2
22:47:06 <kawfee> yay!
22:47:06 <kawfee> I think I got it
22:47:06 <kawfee> HW5> papply lExpr "-3-4-"
22:47:06 <kawfee> [([3,4,0],"-")]
22:47:06 <kawfee> HW5> papply lExpr "-3-4"
22:47:08 <kawfee> [([3,4,0],"")]
22:47:10 <kawfee> that's a better one
22:50:10 <kawfee> yay, it works
22:50:11 <kawfee> thanks
23:13:11 <kawfee> is there a function I can apply to a list that will perform an operation down the list taking two elemnts at a time, i.e. [3,2,1] -> (3-2)-1
23:13:40 <emu>  folding function
23:13:41 <kawfee> [10,9,8,7] -> (((10-9)-8)-7)
23:13:44 <kawfee> which one?
23:13:46 <kawfee> foldl?
23:13:54 <emu> I believe so
23:13:59 <kawfee> yeah, I thought so
23:14:01 <kawfee> wasn't sur4
23:14:25 <dennisb> foldl/foldr, the difference is how you put the parentheses
23:14:55 <emu> I guess foldl is left-associative
23:14:58 <emu> I never remember
23:15:51 <dennisb> correct
23:16:00 <dennisb> foldl1 and foldr1 could also be of use
23:16:16 <kawfee> foldl (-) [3,2,2,2]
23:16:18 <kawfee> why wont that work?
23:16:23 <dennisb> check the type
23:16:33 <dennisb> :t foldl
23:16:34 <kawfee> *** Expression : foldl (-) [3,2,2,2]
23:16:34 <kawfee> *** Type       : (Num [a], Num a) => [[a]] -> [a]
23:16:51 <kawfee> foldl :: (a -> b -> a) -> a -> [b] -> a
23:16:58 <kawfee> I dont' understand what that meansm with the ()
23:17:06 <dennisb> yes, it takes 3 arguments
23:17:07 <kawfee> oh wait
23:17:09 <kawfee> yeah,
23:17:14 <kawfee> I just saw that
23:17:20 <dennisb> the first is the function (a->b->a)
23:17:23 <dennisb> yes
23:18:56 <dennisb> foldl/foldr takes an extra argument which is the value to "plug in" to the left/right
23:20:55 <kawfee> thanks again, I had forgotten about foldl
23:22:39 <kawfee>  Instance of Fractional Int required for definition of div2
23:22:47 <kawfee> > div2 :: [Int] -> Int
23:22:47 <kawfee> > div2 = foldl (/) 1
23:23:43 <kawfee> I guess I need to convert everything to a float
23:24:13 <dennisb> Or you integer division
23:24:19 <dennisb> use
23:24:49 <kawfee> I got it
23:24:52 <kawfee> yeah I could
23:25:06 <dennisb> depends on what you want as a result of course
23:25:12 <kawfee> right
23:25:20 <kawfee> I went ahead and made it float
23:25:53 <kawfee> HW5> papply leftAssocDiv "2/2"
23:25:54 <kawfee> [(0.25,"")]
23:25:56 <kawfee> that isn't right
23:26:04 <kawfee> heh
23:26:09 <kawfee> 2/2 = 1 !
23:26:34 <kawfee> HW5> papply leftAssocDiv "2/1"
23:26:34 <dennisb> I guess you get: 1/2/2
23:26:34 <kawfee> [(0.5,"")]
23:31:42 <kawfee> this is funny
23:31:47 <kawfee> HW5> papply leftAssocDiv "1/2"
23:31:47 <kawfee> [(0.5,"")]
23:31:47 <kawfee> HW5> papply leftAssocDiv "2/1"
23:31:47 <kawfee> [(0.5,"")]
23:31:52 <kawfee> both get the same result
23:34:33 <kawfee> I guess this isn't the proper way to do division: foldl (/) 1
23:40:13 <dennisb> kawfee: I think not
23:40:28 <dennisb> that's where you want to look at foldl1/foldr1
23:41:27 <kawfee> ahh ok
23:41:31 <dennisb> they are like foldl/foldr but without the extra element (also it can't change the types like normal fold can)
23:44:16 <kawfee> foldl1 seems to work
23:44:31 <kawfee> change what types?
23:46:58 <kawfee> thanks for the help, I really appreciate it
23:50:18 <dennisb> foldl1 always returns something of the same type as the elements in the list
23:50:27 <dennisb> foldl can return something else
23:57:05 <kawfee> oh that
23:57:07 <kawfee> hrm
23:58:46 * dennisb goes to work
