02:42:59 --- topic: '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "New HTk release http://www.informatik.uni-bremen.de/htk/", "New DSP libs - http://users.snip.net/~donadio/haskell/", "IOHCC - http://iohcc.mgoetze.net/", "Gtk+HS 0.15.2 released"]'
02:42:59 --- topic: set by shapr on [Wed Feb 19 07:58:21 2003]
03:16:22 <shapr> whee
03:25:26 * shapr yawns
03:26:44 <opet> whee indeed
04:13:07 * Marvin-- still has a headache :/
04:14:36 * shapr puts aspirin into a MIME attachment and sends to Marvin-- 
04:19:46 <Marvin--> drugs/aspirin?
04:20:04 <Marvin--> I've taken painkillers, so far it hasn't helped
04:22:16 <shapr> suckage :-(
04:35:08 <Marvin--> tell me about it
04:40:12 <shapr> Marvin--: have you tried hyperventilating?
04:40:28 <Marvin--> no?
04:40:48 <shapr> headaches are often caused by blood vessels shrinking and not delivering enough blood, and it can be a vicious cycle
04:41:19 <shapr> I read that in a medical journal somewhere.
04:41:42 <shapr> I've had some success with lying down and hyperventilating for a bit, and then relaxing and breathing slowly.
04:54:22 <shapr> hi galority 
05:47:58 <shapr> I bet Arrows would be neat for DTD-aware XML combinators.
05:57:43 <shapr> wow, Haskell XMLToolbox  is 9k lines of code
05:58:05 <shapr> I wonder how he dealt with Unicode
06:00:11 <Janni> yay!
06:00:14 <shapr> hi Janni!
06:00:22 <Janni> hi
06:00:58 <shapr> what's up?
06:01:18 <Janni> relaxing from school
06:02:15 <Janni> had to wait a lot in school (free lessons). one of the most strenuous things ever...
06:02:40 <Janni> (if nobody else's around)
06:13:17 <Marvin--> that's why everybody should have a laptop :-)
06:13:32 <shapr> or at least a palm + keyboard
06:16:30 * Janni is fetching ice cream (yay! :)
06:16:51 <Marvin--> ice cream good
06:42:24 <shapr> mmm
06:42:56 <shapr> hi jak_
06:43:03 * shapr runs around in circles
06:47:35 <SyntaxPolice> good morning.
06:50:54 * Marvin-- swears at a segfaulting bogl-bterm
07:01:12 <shapr> bogl-bterm?
07:01:15 <shapr> good morning SyntaxPolice!
07:04:26 <SyntaxPolice> shapr: how's it going?
07:04:37 <Marvin--> It's a utf-8 aware terminal emulator that you can run on top of a framebuffer to get very nice i18n
07:07:27 <Marvin--> it segfaults because it fails to play nice with devfs
07:08:49 <shapr> oh
07:09:00 <shapr> SyntaxPolice: doing xml/xslt with java :-/
07:09:04 <shapr> SyntaxPolice: what's up with you?
07:09:43 <SyntaxPolice> shapr: writing some monad filled Haskell code. 
07:10:02 <shapr> enjoying it?
07:10:14 <shapr> learned anything about arrows?
07:10:31 <shapr> I was just musing about xml arrow combinators earlier
07:10:39 <SyntaxPolice> yeah, pretty much.  Some of the stuff that I'm rewriting was so side effect prone that I'm doing it w/ monads and hoping to redesign a little later.
07:11:08 <SyntaxPolice> I learned a bit about arrows and category theory last weekend when I got together w/ a math friend of mine to discuss it, but haven't looked at it for a week since I want to get my project done this week.
07:13:38 <shapr> I wrote part of a quickcheck suite for GHC External Core this weekend.
07:13:53 <shapr> nothing else exciting...
07:14:25 <SyntaxPolice> thats pretty cool. what kind of checks does it do?
07:16:37 <shapr> the idea is to randomly generate valid core and see if something kills GHC
07:17:24 <shapr> I'd like to try that for haskell source also, the core tester should tell me if that's a good idea.
07:18:11 <opet> "in the year 2003, AI was finally discovered in some randomly generated haskell code..." 
07:18:29 <shapr> "which promtply modified itself and crashed"
07:19:00 <Marvin--> shapr: how do you make ghc run the core you generate?
07:19:20 <shapr> Marvin--: isn't there a way to stuff core back into ghc?
07:19:35 <Marvin--> not that I've found
07:19:41 <Marvin--> yet anyway
07:19:55 <shapr> how do hal and binkley do it?
07:21:25 * shapr looks at the ghc docs
07:22:52 * SyntaxPolice saw "God's and Generals" over the weekend.  (A nearly 4 hour long american civil war movie)
07:24:28 <shapr> Marvin--: I can't find anything either...
07:27:00 * shapr finds it
07:27:40 <shapr> zsh/4 5353 % ghc --make HelloWorld.hcr
07:27:40 <shapr> ghc-5.04.2: chasing modules from: HelloWorld.hcr
07:27:40 <shapr> Compiling Main             ( HelloWorld.hcr, ./HelloWorld.o )
07:27:40 <shapr> ghc: linking ...
07:27:49 <shapr> Marvin--: too easy, huh? :-)
07:28:14 <shapr> I renamed the HelloWorld.hs to HelloWorld.hs.bad, and removed HelloWorld.o before doing that.
07:28:16 <Marvin--> doh :)
07:29:08 <shapr> Marvin--: check yourself, I could be wrong
07:30:06 <shapr> Marvin--: works?
08:04:29 <Marvin--> yay, working i18n
08:08:27 <shapr> yay
08:16:08 <Marvin--> http://193.11.232.159:8080/di-i18n.png
08:16:10 <Marvin--> well, "working"
08:16:23 <Marvin--> at least I'm getting correct Swedish in UTF-8
08:19:56 <hdaume> 'morning
08:22:14 <shapr> hi hal
08:25:21 * Igloo does a shiny new office bounce  :-)
08:25:47 <Marvin--> Igloo: nice :)
08:25:59 * Marvin-- does the i18n dance
08:26:09 <Igloo> :-)
08:28:28 <shapr> Igloo: yay, when do we see pix?
08:28:49 <Igloo> Ermmm, when I get Heff to take some probably
08:30:01 <smkl> what is "functional programming" is swedish?
08:30:57 <Marvin--> "funktionell programmering"
08:33:55 <smkl> ok thanks. what is "statically typed programming language"?
08:35:52 <hdaume> smkl: it means that at the time that your program is compiled, the compiler knows the type of every expression
08:36:19 <shapr> vi sticker funken i funktionell
08:36:34 <shapr> hdaume: I think he wants to know the swedish translation
08:36:35 <Marvin--> smkl: "statiskt typat programmeringsspråk" (only surprise there is language->språk I guess)
08:36:42 <hdaume> hehe oh
08:36:44 <hdaume> ;)
08:37:09 <shapr> hdaume: shows how helpful you are though ;-)
08:37:27 * hdaume is *very* tired
08:37:36 <shapr> spent all night debugging?
08:38:00 <hdaume> no.  my girlfriend is int he process of moving, so i spent all night packing boxes & moving them ;)
08:38:04 <shapr> oboy
08:53:27 <smkl> Marvin--: is "side-effect free" "biverkninglös"? and then last, "lazy evaluation"?
08:55:24 <jak_> hi shapr
08:58:15 <Marvin--> smkl: biverkningslös is one way of putting it, but we usually use the more swenglish "sidoeffektsfri", "lazy evalution" is "lat evaluering"
10:22:24 * shapr bounces
10:26:18 <mgoetze> shapr: sup? :)
10:33:43 <shapr> writing java...
10:33:45 <shapr> what's up with you?
10:34:51 <mgoetze> writing scheme/psql :)
10:46:52 <shapr> I want HToolkit to get stable enough to write Haskell/pg
10:48:02 <mgoetze> yeah, haskell/pgsql would be fun :)
11:33:37 <Janni> back again...
11:34:15 <mgoetze> moin
12:05:58 <Marvin--> http://www.python.org/dev/doc/devel/lib/module-itertools.html
12:09:51 <andersca> Marvin--: cool
14:55:59 <shapr> y0
15:02:41 <Marvin--> d3wd
15:02:49 <shapr> w4ssup?
15:03:44 <Marvin--> Discussing d-i features with bug submitters
15:04:09 <Marvin--> Never mind what boot-floppies could do, now that a new installer is developed, everybody and their grandmothers want their favourite features in
15:04:14 <shapr> heh
15:04:21 <Marvin--> "oh oh oh and it's gotta have AI that detects when my shoes are unlaced"
15:04:49 <Marvin--> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=182349
15:06:31 <shapr> severity value whishlist was not recognised
15:06:32 * shapr laughs
15:07:16 <Marvin--> whichlist
15:07:18 <Marvin--> witchlist
15:11:06 <unknown_> how can I make a list of factorials where: > fac (n+1) = fromInt (n+1) * fac n
15:11:15 <unknown_> I was trying fac2 = [ x| x <- fac 0 ]
15:11:33 <unknown_> er, [ x| x <- fac x ]
15:14:29 <Marvin--> kawfee: you need a list as rhs of <-
15:14:51 <Marvin--> kawfee: you probably want [ fac x | x <- [0..N] ] for some N
15:14:56 <Marvin--> or leave out the N if you want an infinite list
15:18:33 <kawfee_> yes, I want an infinite list
15:18:53 <Marvin--> then [ fac x | x <- [0..] ]  (or map fac [0..]) is what you want
15:19:07 <Marvin--> note that it isn't all that efficient
15:19:38 <kawfee_> ahh, I had it I just had my type def wrong, thanks
15:19:56 <shapr> it's easier to develop without a typedef first
15:20:12 <kawfee_> yeah, but it seems as though if I add it in it makes things work, sometimes
15:20:50 <Marvin--> heh, the DMR
15:20:58 <shapr> dmr?
15:21:01 <kawfee_> dmr?
15:21:07 <Marvin--> the Dreaded Monomorphism Restriction
15:21:09 <shapr> damn monomorphism restriction?
15:21:21 <Marvin--> but "damn" works too I guess ;)
15:25:12 <Marvin--> I wonder if it would be feasible for Debian to have two parallel release cycles, one "server" cycle (release every 18-24 months) and one "desktop" release (release every 6 months) or something like that
15:25:50 <Marvin--> maybe it's unfeasible to have new 10-CD sets twice a year
15:26:03 <Marvin--> or if it isn't 16 with sources too
15:26:32 * Pseudonym is detecting a pattern with these factorial questions
15:26:40 <Marvin--> Pseudonym: heh
15:26:42 <kawfee_> heh
15:26:44 <Marvin--> first exercise :)
15:26:46 <kawfee_> no
15:26:48 <Pseudonym> Apparently.
15:26:54 <kawfee_> we are just doing different things with them 
15:26:55 <Marvin--> well, second sometimes
15:27:05 <kawfee_> 3rd, and 4th
15:27:17 <kawfee_> doing memoization now
15:27:33 <kawfee_> I've got it figured out now, I think
15:27:52 <kawfee_> how can I make the Prelude> change to my def?
15:27:58 <kawfee_> module kawfee where ?
15:28:01 <Pseudonym> And now I'm adapting my factorial function to make a macchiato
15:28:08 <Marvin--> yay
15:28:17 * Pseudonym mmms... macchiato...
15:29:58 <kawfee_> adapt it to make an expresso'
15:30:07 <Marvin--> eSpresso
15:30:07 <shapr> hi Pseudonym 
15:30:10 <Pseudonym> Macchiato is espresso.
15:30:12 <Pseudonym> G'day!
15:30:20 <shapr> how's life?
15:30:23 <Pseudonym> Not bad.
15:30:30 <Pseudonym> Release hell, but apart from that...
15:30:39 <Pseudonym> The best part is we get an all-afternoon-long lunch on Friday.
15:30:44 <shapr> yay!
15:30:45 <Pseudonym> Assuming we ship Friday morning, anyway. :-)
15:30:59 <shapr> have you suggested XP-style incremental releases?
15:31:01 * Pseudonym mmms... all day lunch... someone else pays...
15:31:20 <Pseudonym> Well we do betas.
15:31:26 <Pseudonym> Quite often.
15:31:44 <Pseudonym> Trouble is, our customers are kinda dependent on our software.
15:31:55 <Pseudonym> So we have to do lots of post-install testing stuff.
15:31:59 <shapr> oh
15:32:12 <Pseudonym> With some of our customers, if the software fails, they fail.
15:32:40 <Pseudonym> Ditto for some of the customers we want to have. :-)
15:33:07 <shapr> yow
15:34:13 <Pseudonym> Well consider, for example, Lexis-Nexis (which is not a customer of ours).  They manage something like 40Tb of text.  That's their whole business model.
15:34:24 <Pseudonym> If their database system goes down, they can't do a hell of a lot.
15:34:31 <shapr> that's a good point.
15:34:51 <Pseudonym> Of course they won't _fail_ as such.
15:35:00 <Pseudonym> But it's still mission critical.
15:35:07 <Marvin--> not being able to do anything is damn expensive
15:35:08 <Pseudonym> Indeed.
15:35:09 <mgoetze> Pseudonym: you work on db software?
15:35:13 * Pseudonym nods
15:35:17 <Pseudonym> Text databases.
15:35:32 <Pseudonym> Hard core soft-realtime C++ hacking.
15:35:38 <Pseudonym> Fun stuff.
15:36:13 <mgoetze> Pseudonym: what does the "text" mean? are they somehow non-relational?
15:36:17 <Pseudonym> Yes.
15:36:23 <Pseudonym> We store and index text.
15:36:27 <mgoetze> oh
15:36:33 * mgoetze loves relational databases.
15:36:40 <Pseudonym> So, for example, you put in a large number of XML or SGML documents and it indexes them by word.
15:36:54 <Pseudonym> Like a search engine.
15:37:06 <mgoetze> yeah, i was about to ask if google is one of your customers ;)
15:37:10 <Pseudonym> No. :-)
15:37:36 <kawfee_> why wont this work: > remDups  = foldr ( if ( x == head xs) then x else x:(head xs)) []
15:37:41 <Pseudonym> Google has specific requirements that our customers don't.
15:37:47 <kawfee_> I thought foldr was defined foldr (x:xs) 
15:37:48 <Pseudonym> Our customers generally don't spider, for example.
15:37:56 <shapr> hiya det
15:38:10 <Pseudonym> As mentioned previously, we were mentioned in the second season of 24.
15:38:20 <Pseudonym> Apparently CTU uses our software.
15:38:34 <Pseudonym> We didn't know that until someone spotted it.
15:38:43 <shapr> what's CTU?
15:38:53 <shapr> 24 is a TV series, yes?
15:38:56 <Pseudonym> Yes.
15:38:57 * shapr doesn't really watch TV
15:39:07 * Pseudonym doesn't blame you
15:39:15 <Pseudonym> I, however, have young kids.
15:39:16 * Riastradh hasn't a TV, so hah!
15:39:19 <shapr> #haskell is much more fun
15:39:30 <Pseudonym> So I can't go out as much as I once could.
15:39:31 <shapr> well, Haskell in general
15:39:37 <kawfee_> TV is quite boring, other than the history channel
15:39:41 <Riastradh> Since when does having young kids require that you have a TV?
15:39:41 * Pseudonym hasn't been to the cinema in over a year
15:40:03 <Pseudonym> Riastradh: It means you're limited for entertainment.
15:40:15 <Pseudonym> TV is one of the few things you can do.
15:40:17 * Riastradh 's parents never had a TV, either.
15:40:35 <Pseudonym> I don't have cable, though.
15:40:51 <Pseudonym> Cable would mean I'd have to increase my TV viewing to justify the cost.
15:41:53 <Marvin--> 24? Isn't that the thriller/action thingy in 24 episodes, each suppsedly an hour "real time"
15:41:58 <Pseudonym> Yeah.
15:41:58 <whee> yes
15:42:04 <shapr> oh, I've heard of that.
15:42:10 <radix> o/` thriller o/`
15:42:18 <whee> it sounds like a neat show, but I bet it's hard to start watching mid season
15:42:25 <Igloo> Can anyone think of a way to rewrite a guarded function without guards that doesn't involve repeating bits lots?
15:42:26 <Pseudonym> It is, yes.
15:42:27 <shapr> radix: no michael jackson imitations allowed on #haskell
15:42:36 <Pseudonym> Igloo: It depends.
15:42:36 <radix> MJ > *
15:42:43 <shapr> Igloo: case?
15:42:44 <Igloo> I need something general
15:43:03 <Marvin--> Pseudonym: how were you mentioned?
15:43:03 <Igloo> shapr: That doesn't help get rid of guards
15:43:09 <shapr> oh
15:43:11 <shapr> hm
15:43:12 <Igloo> In fact case can have guards for that very reason
15:43:26 <Pseudonym> Marvin: Oh, the programmer chick said that she, and I quote, "upgraded the sim software".
15:43:33 <Pseudonym> That's us.
15:43:33 <Marvin--> Pseudonym: heh
15:43:42 <Pseudonym> Though it's called TeraText as of this release due on Friday.
15:43:58 <Marvin--> as in "we can handle terabytes of text, nya"?
15:44:06 <Pseudonym> Yeah.
15:44:17 <Pseudonym> Not that we've personally ever tried it.
15:44:24 <Pseudonym> Customers have, though.
15:44:46 <Pseudonym> It turns out that storing terabytes of text is really easy.
15:44:54 <Pseudonym> Well, not "really easy".
15:45:11 <Pseudonym> But it's not the hard part.
15:45:37 <Pseudonym> The hard part is when you query the text.  You end up with a "result set", which is the set of documents which match the query.
15:45:44 <whee> I imagine finding a terabyte of text is the hrad part
15:45:46 <whee> heh
15:45:57 <whee> it's not easy, like porn ;)
15:46:13 <mgoetze> perl hacking is stressful... anyone for a game of go?
15:46:17 <Pseudonym> When your result set is a billion documents in size, managing that (e.g. ranking it, sorting it etc) is very, very hard.
15:46:31 * Pseudonym thought he understood sorting
15:46:45 <Riastradh> mgoetze, I told you!
15:47:00 <radix> HEH
15:47:01 <mgoetze> Riastradh: i'm not giving up, i just need a break :P
15:47:11 <whee> mgoetze: if you want to win, I'll play
15:47:12 <Pseudonym> mgoetze: What are you hacking?
15:47:24 <mgoetze> Pseudonym: tournament results manager
15:47:28 <mgoetze> whee: see you on nngs
15:47:33 <Pseudonym> I don't know the rules of go.  If you want someone to move randomly and possibly illegally, I'm game.
15:47:34 <whee> where now :|
15:47:51 <whee> oh, heh
15:48:38 <mgoetze> Pseudonym, whee: so, does one of you know how to get to nngs? lol
15:48:56 <Pseudonym> Nope.
15:48:58 <whee> java client is supposedly loading
15:49:07 <Pseudonym> I know that go is some kind of Japaness board game.
15:49:13 <Pseudonym> And it uses uniform pieces.
15:49:35 <mgoetze> Pseudonym: www.gobase.org
15:49:37 <Pseudonym> Anyone know of an online bridge game thing?
15:49:48 <mgoetze> whee: have you given it a nickname yet?
15:49:52 * Pseudonym would fare better at bridge
15:49:57 <mgoetze> whee: ah, i see you
15:50:00 <whee> yes, just did
15:50:10 <mgoetze> whee: you're a total newbie, or have you played a few games?
15:50:27 <whee> if by few you mean random clicking ayear or so ago
15:50:37 <mgoetze> heh, ok, we'll try 5 handicap stones
15:50:47 <whee> heh, I probably need to find rules to skim
15:51:01 * mgoetze sends challenge
15:51:40 <whee> eer
15:51:48 <mgoetze> did you get it?
15:51:54 <whee> don't think so
15:52:00 * mgoetze tries again
15:52:05 <emu> hmm
15:52:11 <mgoetze> "challenge rejected"
15:52:18 <mgoetze> uhoh, emu is here
15:52:30 * mgoetze hides under his perl program. ;)
15:52:48 <whee> try again
15:52:52 <mgoetze> whee: you don't happen to be using debian?
15:52:53 <emu> scary
15:53:14 <whee> no
15:53:39 <mgoetze> ok, there we go
15:53:44 <mgoetze> i hope you see those handicap stones
15:53:50 <emu> you are playing in game 8
15:53:51 <whee> yes
15:53:51 <whee> you'll still win :)
15:54:12 <mgoetze> not if emu gives you tips ;)
15:54:39 <emu> 5 handicap?!
15:54:51 <mgoetze> yeah, i'm just a nice guy
15:54:53 <emu> in a 9x9?
15:54:56 <whee> haha
15:55:08 <mgoetze> i expect we'll be able to go down to 4 soon enough ;)
15:55:19 <emu> attack him!
15:55:22 <emu> make him pay
15:55:30 <Pseudonym> Die die die!
15:56:33 <kawfee_> could someone help me with foldr, how do I extract the x and xs as parameters?
15:56:38 <whee> duh, heh
15:56:51 <kawfee_> hrm
15:56:55 <emu> argh
15:56:57 <emu> you had him
15:57:00 <emu> okay
15:57:01 <kawfee_> emu: are you causing trouble again?
15:57:05 <mgoetze> yeah, he did :)
15:57:12 <whee> emu: this is technically my first game :p
15:57:13 <emu> solidify
15:57:24 <emu> pretty good
15:57:29 <kawfee_> foldr (\x -> x+1) [] [1,2,3]
15:57:31 <mgoetze> of course, with such a huge handicap, i have to count on big mistakes.
15:57:37 <whee> heh
15:57:39 <kawfee_> say I want to do something like that
15:58:11 <whee> haha, oops
15:58:14 <Pseudonym> Er...
15:58:16 <Marvin--> kawfee_ the second argument to foldr should be the value to use when the list is empty, and the function should take two arguments
15:58:30 * whee begins random clicking
15:58:40 <emu> the first line is called "the line of death"
15:58:58 <Marvin--> kawfee_: foldr (+) 0 xs  for example, would add all the numbers in xs
15:59:08 <kawfee_> foldr (\_ x -> x+1) [] [1,2,3]
15:59:13 <kawfee_> still doesn't work
15:59:25 <kawfee_> I'm just trying things out to better understand foldr
15:59:44 <Marvin--> no, the empty list isn't the same type as numeric types
15:59:45 <kawfee_> hrm
15:59:50 <kawfee_> I see that now
15:59:55 <kawfee_> I just defined length, hehe
15:59:59 <kawfee_>  foldr (\_ x -> x+1) 0 [1,2,3]
16:00:52 <emu> in a handicap game, you want to attack his stones and leverage your handicap advantage, while building up a wall around territory that cannot be undermined.  balance these two.
16:01:20 <Marvin--> time to sleep
16:01:46 <emu> you also need to know a few things such as how to avoid capture, when necessary
16:01:48 <kawfee_> foldr (\x y -> (+x) (+1)) (0,0) [1,2,3]
16:01:51 <emu> (if possible)
16:01:53 <kawfee_> how can I gett hat to work?
16:02:00 * shapr plays with a commercial refactoring browser for emacs
16:02:12 * mgoetze hopes whee isn't paying too much attention to emu ;)
16:02:21 <Pseudonym> I don't know which is worse.  "Commercial", "refactoring" or "emacs".
16:02:21 <emu> you already won, mgoetze 
16:02:30 <whee> nope!
16:02:30 <whee> heh
16:02:32 <kawfee_> what's wrong with emacs?
16:02:36 <whee> my plan of random clicking has worked!
16:02:37 <mgoetze> emu: yeah, i know, but i want to win the next game too!
16:03:01 <Pseudonym> What's wrong with emacs?  I'm bored and I want to start a flamewar.  That's what's wrong with it!
16:03:49 <shapr> Pseudonym: actually, "java" is the worst part
16:04:03 <Pseudonym> Yes, that would be it.
16:04:12 <Pseudonym> Actually, nothing wrong with "refactoring".
16:04:16 <emu> let's see if whee can make a live structure
16:04:21 <whee> haha
16:04:29 <emu> pretty close to one
16:04:36 <mgoetze> too much randomness :)
16:04:40 <kawfee_> how could I define the following: I want to make a function for foldr that takes two arguments and performs some operation on each of those and returns a tuple
16:04:46 <emu> why would you play a stone there, whee
16:04:51 <kawfee_> foldr (\x y -> (+,+1) (0,0) [1,2,3]
16:04:54 <kawfee_> that doesn't work
16:04:55 <whee> I just happened to click theere
16:04:56 <whee> :)
16:05:02 <emu> mgoetze doesn't even care, it's already dead
16:05:12 <mgoetze> whee: hint, this game is even more fun if you take it seriously ;)
16:05:17 <Pseudonym> Let's see if he can break into his opponent's gundam macross gatchaman structure.
16:05:23 <whee> mgoetze: yes, but I lost a while ago :p
16:05:39 <emu> genkiganger!
16:05:47 <Pseudonym> Nothing is more fun when taken seriously.
16:05:49 <kawfee_> *** Expression     : ((+),flip (+) 1) (0,0)
16:05:51 <kawfee_> what's flip?
16:06:07 <whee> it flips arguments
16:06:18 <kawfee_> we never discussed flip
16:06:26 <kawfee_> whee that was fun
16:06:39 <emu> mgoetze: you played wrong
16:06:57 <emu> if you wanted to prevent the eye, you should've played where he just did
16:07:01 <mgoetze> emu: just giving him a slight chance ;)
16:07:03 <Pseudonym> mgoetze, you moron.
16:07:05 <emu> now he has a live structure
16:07:05 <whee> haha
16:07:14 <whee> emu: the problem is, I don't realize that/
16:07:25 <emu> a live structure has two "eyes"
16:07:37 <emu> you cannot capture one with two "eyes" without being able to play two stones at once
16:07:47 <emu> which is not allowed
16:08:07 <Pseudonym> Mornington Crescent.  I win.
16:08:14 <whee> oops
16:08:43 <emu> there is no reason to randomly throw stones in secure territory
16:08:49 <emu> if you have no chance, don't bother
16:08:57 <emu> if you have no moves, pass
16:09:02 <emu> you do have one though
16:09:05 <whee> pfft
16:09:09 <mgoetze> yeah, just one
16:09:13 <emu> lets see if you can find it
16:09:14 <Pseudonym> The only winning move is not to play.
16:09:48 <mgoetze> whee: hint, you want to force me to cover something
16:09:58 <whee> :|
16:10:56 <whee> I see nothing.
16:11:02 <mgoetze> whee: a9
16:11:12 <emu> top-left corner
16:11:25 <mgoetze> ok, can pass now
16:11:27 <whee> that was rather uneventful
16:11:28 <whee> heh
16:11:33 <emu> it's a point
16:11:37 <emu> point for you
16:12:13 <emu> pass again
16:12:22 <mgoetze> or click done, or whatever
16:12:25 <emu> 3 passes is game over, on these, I think
16:12:29 <whee> eh oh
16:12:29 <emu> some dead stones to mark
16:12:33 <mgoetze> emu: still think 5 handicap was too much?
16:12:39 * mgoetze already marked the dead stones
16:12:49 <whee> err, oops
16:13:15 <emu> blah, if he didn't play randomly
16:13:26 <whee> haha
16:13:29 <mgoetze> whee: i think you need to type "done" into your command window
16:13:40 <mgoetze> there we go
16:13:43 <whee> I'll semi sort of try next time, but I'll still lose entirely :p
16:13:51 <mgoetze> whee: so, wanna try a less random game?
16:14:09 <whee> I suppose :|
16:14:10 <kawfee_> thanks for the help
16:14:20 <mgoetze> whee: 5 stones again, or think you're ready for 4?
16:14:31 <whee> ]whatever :P
16:15:14 <Pseudonym> (&$# (*&# !@*# Microsoft Word!
16:15:23 <shapr> Pseudonym: tried openoffice?
16:15:23 * mgoetze pets Pseudonym 
16:15:29 <Pseudonym> shapr: Can't.
16:15:40 <mgoetze> shapr: i'm betting his clients don't want openoffice
16:15:47 <Pseudonym> It's not that.
16:15:50 <Pseudonym> I'm writing manuals.
16:16:05 <mgoetze> whee: your turn
16:16:10 <Pseudonym> We have this system of stylesheets set up so that we can produce PDF and online searchable versions of the manuals.
16:16:25 <Pseudonym> (The manuals are actually a database which is pre-installed with the server.)
16:16:39 <whee> oops
16:16:44 * Pseudonym sighs
16:17:07 <Pseudonym> Moreover, because we have to use Word, we have to connect via Citrix
16:17:12 <mgoetze> whee: ?
16:17:51 <shapr> Pseudonym: even more fun
16:19:07 <Pseudonym> What we really need to do is hire a technical writer so we don't have to touch Word.
16:19:10 <Smerdyakov> Citrix is an operating system made out of oranges?
16:19:11 <Pseudonym> Problem solved.
16:19:30 <mgoetze> Smerdyakov: some sort of x11 on windows thing, i think
16:19:39 <Smerdyakov> I wanted the oranges =(
16:19:47 <Pseudonym> Yeah.  It lets me connect to a remote Windows machine from my desktop box.
16:19:59 <Pseudonym> So I don't need to taint my machine with Microsoft.
16:20:04 <mgoetze> whee: you're mean.
16:20:13 <whee> eh
16:20:19 <emu> wheeeeeeeee
16:20:29 <Smerdyakov> emu is a rather unpleasant character.
16:20:44 <emu> hay
16:20:48 <mgoetze> Smerdyakov: yeah, he likes to do nasty things like kill all my stones
16:24:59 <mgoetze> emu: did you tell him to do that move? lol
16:25:05 <mgoetze> (e2)
16:27:36 <mgoetze> whee: i'm afraid we'll have to go down to 4 handicap stones ;)
16:27:56 <whee> D:
16:28:16 <mgoetze> whee: bah
16:28:53 <emu> hey mgoetze, can i play you now?
16:28:56 <emu> i think you need a thrashing
16:29:04 <whee> haha
16:29:06 <mgoetze> oh
16:29:12 <mgoetze> emu: i just got one, didn't i? lol
16:29:33 <mgoetze> emu: what did we play last time, anyway, no handicap iirc?
16:29:39 <emu> i think so
16:29:44 * mgoetze wants 2, then.
16:29:48 <emu> whaa
16:29:52 <emu> wuss
16:31:57 <mgoetze> whee: you can watch our game
16:32:02 <mgoetze> whee: might learn something ;)
16:32:16 <whee> I think I have an idea of how emu plays, somehow :)
16:35:23 <mgoetze> emu: hah, i just knew you would answer like that.
16:37:20 <mgoetze> emu: that's a pretty big moyo ;)
16:41:30 <emu> hey, it's wnewman
16:42:04 <mgoetze> eh?
16:48:38 <emu> he started sbcl project cause he wanted something better than ocaml to write a Go AI in ;)
16:49:00 * shapr bounces happily
16:49:01 <emu> btw, your stones are dying
16:49:13 <mgoetze> emu: i know that you're a bastard, you don't have to remind me :P
16:50:37 <mgoetze> is sbcl the logic think, with the facts and conditions?
16:52:11 <mgoetze> s/think/thing/
16:57:45 <shapr> I thought importing a module got everything?
16:57:50 <shapr> does that include instance declarations?
17:01:38 * mgoetze ponders just resigning...
17:02:04 <emu> no it's a CL
17:02:21 <mgoetze> cl?
17:02:25 * shapr grumbles
17:04:13 <emu> common-lisp
17:05:18 <mgoetze> oh
17:06:35 * mgoetze is having serious sente problems
17:08:37 <emu> someone kick me
17:08:50 <mgoetze> emu: i just did, didn't i? :)
17:09:01 <emu> yes, cuz i wasn't thinking
17:09:13 <shapr> cool, TestCore.hs can generate Modules
17:09:40 <mgoetze> emu: i think you're winning anyway.
17:09:48 <shapr> now what do I do with it?
17:13:08 <shapr> I guess I generate a bunch of .hcr files and see what happens...
17:15:33 * shapr tries to remeber how to open and write to a file
17:15:41 <Igloo> shapr: Instance declarations are always ex/imported
17:15:58 <shapr> must be some sort of user error then..
17:16:01 <Igloo> And writeFile is the easy way
17:16:12 <shapr> cool, I'll look it up.
17:16:33 <Igloo> Just writeFile (filename :: String) (data :: String)
17:16:42 <shapr> that's easy enough
17:16:42 * mgoetze is trying really hard to hurt emu. ;)
17:21:17 <mgoetze> damn, i'm one too slow for seki, aren't i?
17:22:02 <shapr> hm, GHC is complaining about my "instance Arbitrary Rational where"
17:22:18 <shapr>     Illegal instance declaration for `Arbitrary Rational'
17:22:19 <shapr>         (The instance type must be of form (T a b c)
17:22:19 <shapr>          where T is not a synonym, and a,b,c are distinct type variables)
17:22:21 <shapr> what does that mean?
17:22:32 <Igloo> Rational = Ratio Integer
17:22:38 <Igloo> i.e. it's a type synonym
17:22:39 <shapr> oh!
17:26:13 <shapr> hm, I've import Ration
17:26:32 <shapr> er "Ratio" shouldn't the Ratio type constructor be in scope now?
17:28:08 <Igloo> What makes you think it isn't?
17:28:18 <shapr> ghc says it isn't
17:28:34 <Igloo> ghc or ghci?
17:28:39 <shapr> both 
17:29:04 <Igloo> What line does it fail on?
17:29:20 <shapr> TestCore.hs:140: Data constructor not in scope: `Data.Ratio.Ratio'
17:29:31 <Igloo> It's not a data constructor, it's a type constructor
17:30:12 <Igloo> The internals aren't exported, you'll have to use numerator, denominator, (%)
17:30:15 <shapr> oh
17:30:24 <shapr> thanks :-)
17:30:34 <Igloo> np
17:34:52 <shapr> one last question and then I'll go away and sleep...
17:34:54 <mgoetze> oops, missed one :)
17:35:04 <shapr> why is it saying the same thing about "instance Arbitrary (Ratio Integer) where"
17:35:05 <shapr> ?
17:36:11 <shapr> er waitasec
17:36:42 <mgoetze> emu: 3 handicap next time :P
17:36:52 <emu> dammit
17:36:57 <emu> if i had only not made that stupid mistake
17:37:03 <emu> i would've thrashed you by another 20 points
17:37:13 <mgoetze> yeah, i know
17:37:20 <mgoetze> of course, i made my share of mistakes...
17:37:38 * mgoetze was especially pissed about the lower left
17:37:56 <Smerdyakov> That lower left
17:38:04 <shapr> I think it should be working...
17:38:05 <mgoetze> yes, that one
17:38:23 <mgoetze> seki at the top left woulda been fun :)
17:38:33 <emu> no such luck :-P
17:38:42 <emu> tain't gonna happen
17:38:51 <Smerdyakov> It's always arousing my [word that's pronounced eye-er]
17:38:53 <mgoetze> 'twas close, though
17:38:58 <mgoetze> Smerdyakov: ire
17:39:00 <Smerdyakov> Hooray!
17:39:02 <emu> nah i had you al the way
17:39:02 <Smerdyakov> Thank you
17:39:36 <mgoetze> emu: yes, but i didn't realize that ;)
17:41:51 <shapr> this is too weird.. it works in ghci, it works with ./quickcheck, but I can't get it to work when I'm trying to write to a file.
17:43:41 <kawfee_> ERROR "hw4.lhs":110 - Equations give different arities for "cOS2"
17:43:46 <kawfee_> what's that mean?
17:44:23 <shapr> sounds like you're doing pattern matching, but not matching up all the types
17:44:33 <kawfee_> oh
17:44:54 <kawfee_> > cOS2 _ [] = []
17:47:59 <shapr> yay! it mostly compiles!
17:48:01 * shapr bounces happily
17:54:16 <kawfee_> I fixed it
17:54:26 <shapr> yay
17:54:27 <kawfee_> anyone know a function that does taylor series?
17:54:29 <kawfee_> yeah
17:54:31 * kawfee_ bounces
17:54:37 * shapr splashes
17:54:47 <kawfee_> I need to figure out foldr now
17:54:51 <mgoetze> kawfee_: what language are you talking about? maple? :)
17:54:53 <kawfee_> and a few other things
17:55:00 <kawfee_> mgoetze: haskell
17:55:01 <shapr> foldr is nifty
17:57:44 <kawfee_> what about foldl?
17:57:57 <Smerdyakov> Get real, man.
17:58:05 <kawfee_> what?
17:58:06 <shapr> I'm not fake.
17:58:12 <kawfee_> I though I was here
17:58:27 <shapr> on the other hand, foldl is nifty :-)
18:03:28 <kawfee_> if foldr nifty, shouldn't foldl be ytfin ?
18:04:00 <shapr> something like that, yes :)
18:05:59 <kawfee_> in zipWith ('div') z y
18:06:11 <kawfee_> nm
18:06:29 <kawfee_> needed `
18:08:11 <kawfee_> zipWith `div` [1,2,4,8,16] [1,1,2,6,24]
18:08:16 <kawfee_> why wont that work?>
18:08:22 <shapr> I feel clueless... how do I stick a value of type Gen Module into writeFile?
18:08:30 <shapr> I can show a Module
18:08:40 <shapr> so I tried liftM show
18:17:59 * shapr goes to sleep
18:19:49 <Igloo> kawfee_: That parses as (zipWith `div` [1,2,4,8,16]) [1,1,2,6,24] using div as an infix operator
18:20:47 <Igloo> shapr: Need to know more about Gen to answer that
18:21:06 <Igloo> kawfee_: without the `` it should do what you want
18:27:45 <kawfee_> RROR "hw4.lhs":137 - Last generator in do {...} must be an expression
18:27:56 <kawfee_> oh
18:28:26 <kawfee_> thanks
18:28:59 * Igloo toddles off to bed
18:31:39 <kawfee_> anyone know the name of the strict version of foldr?
18:42:08 <kawfee_> how can I convert a list of Integers to a list of Floats?
18:42:17 <kawfee_> I'm wanting to do: (zipWith / (fromInt)z (fromInt)y)
18:42:32 <kawfee_> I need the resulting list to be floats
18:45:47 <Riastradh> map intToFloat myListOfIntegers  -- There's probably a function like that in the Standard Prelude or something
18:45:59 * Riastradh kicks his period key for not adding a period at the end of that sentence.
18:46:15 <radix> you weirdo grammatically correct people
18:46:36 * mgoetze doesn't think that punctuation belongs to the realm of grammar.
18:46:48 <kawfee_> heh
18:52:11 <kawfee_> ERROR "hw4.lhs":126 - Type error in application
18:52:11 <kawfee_> *** Expression     : map fromInt y
18:52:11 <kawfee_> *** Term           : fromInt
18:52:11 <kawfee_> *** Type           : Int -> a
18:52:11 <kawfee_> *** Does not match : Integer -> a
18:57:37 <kawfee_> what about fromInteger?nm
18:57:39 <kawfee_> got that one
18:58:00 <kawfee_> ERROR "hw4.lhs":126 - Type error in application
18:58:01 <kawfee_> *** Expression     : q w
18:58:01 <kawfee_> *** Term           : q
18:58:01 <kawfee_> *** Type           : [a]
18:58:01 <kawfee_> *** Does not match : b -> c
19:01:11 <kawfee_> hehe
19:01:12 <kawfee_> got it
19:01:20 <kawfee_> forgot you need () around /
19:03:44 <kawfee_> anyone know how to do takeWhile (>.0000001) list
19:03:56 <kawfee_> would I need to express it in some other type of notation?
19:32:08 <kawfee_> anyone know what parser I would apply to get the zero "0"
19:32:16 <kawfee_> I thought char '0'
19:32:21 <kawfee_> it doesn't seem to be working 
19:41:45 <Riastradh> Is there a way to use hash tables in Haskell, where you can create a new one with a new association or without an association or with a different association from an old one, sort of like mutating but functionally?
19:43:22 <Riastradh> i.e.:  let ht = makeHashTable [['a', 'b'], ['c', 'd']] in extendHashTable ht [['e', 'f']]   -- returns a hash table where:  'a' -> 'b', 'c' -> 'd', 'e' -> 'f'
19:44:01 <whee> how about FiniteMap?
19:45:00 <Riastradh> Where's documentation on it?
19:45:11 <whee> using ghc?
19:45:48 <Riastradh> If I must.
19:45:57 * Riastradh really hasn't done much with Haskell.
19:46:24 <whee> http://www.haskell.org/ghc/docs/latest/html/base/Data.FiniteMap.html
19:46:38 <whee> I don't know about anything other than ghc
20:09:37 <Pseudonym> Hmmm.
20:09:50 <Pseudonym> According to Torvalds, "the only real major failure of the x86 is the PAE crud".
20:10:02 * Pseudonym wonders what Linus is on sometimes
20:10:10 <Pseudonym> Yes, PAE is crud.
20:10:30 <Pseudonym> However, the ONLY major failure?!
20:10:41 <whee> heh
20:10:45 <whee> I wish x86 would just die
20:11:08 <Pseudonym> How about the almost complete absence of a decent general-purpose register set?
20:11:23 <Pseudonym> How about the non-tagged TLB?
20:11:41 <Pseudonym> I guess I can see how he'd miss that.  If you're a monolithic kernel person you probably wouldn't miss a tagged TLB.
20:12:06 <Pseudonym> If you don't context switch often, you wouldn't mind if context switches are expensive.
20:51:02 <emu> mgoetze: you need to stop playing on nngs and start playing on kgs or igs
20:51:23 <mgoetze> emu: why?
20:51:35 <emu> so taht you will actually be able to play ppl
20:51:41 <emu> nngs is so dead
20:51:52 <mgoetze> emu: oh, i have other methods for *that*
20:52:02 <emu> i can't believe it's still going
20:52:05 <emu> there's like 10 people on it
20:52:09 <emu> 2 games maybe
20:52:47 <mgoetze> emu: i generally just play people i already know
20:52:59 <mgoetze> emu: and for that purpose, nngs is suited admirably
21:09:02 <engstad> pseudo: i actually agree with linus on that one.
22:19:50 <kawfee> could someone help me with "do"
22:20:07 <kawfee> what expressions belong inside it when using it for IO actions?
22:20:30 <kawfee> I have the following: 
22:20:31 <kawfee> > getLine :: IO String
22:20:31 <kawfee> > getLine = do r <- getChar
22:20:31 <kawfee> >    if r == '\n' then return ""
22:20:31 <kawfee> >    else do {qs <- getRest}
22:20:33 <kawfee> > return (r:qs)
22:20:36 <kawfee> >    where 
22:20:39 <kawfee> > getRest = do x <- getChar
22:20:41 <kawfee> >   if x == '\n' then return ""
22:20:44 <kawfee> >   else do xs <- getRest
22:20:46 <kawfee> >   return (x:xs)
22:20:55 <mgoetze> hm
22:21:06 <kawfee> I think it works, but I get many errors
22:21:08 <mgoetze> not sure you can just mix do and where like that
22:21:11 <kawfee> ERROR "hw4.lhs":140 - Last generator in do {...} must be an expression
22:21:26 <kawfee> I saw them do it in the Prelude
22:21:46 <mgoetze> well yeah, but the people who wrote the prelude understand monads. ;)
22:21:54 <kawfee> heh
22:21:56 <kawfee> funny
22:22:05 <kawfee> well how can I do it then?
22:22:58 <mgoetze> hm
22:23:14 <mgoetze> can't you just write it as straight recursion (without the getRest bit)?
22:24:40 <mgoetze> getLine = do r <- getChar
22:24:57 <mgoetze>    if r == '\n' then return ""
22:25:10 <mgoetze>    else return r ++ getLine
22:48:05 <kawfee> I was tryingt o do that, but I thought I needed ++
22:48:11 <kawfee> I mean, :
22:49:02 <kawfee> I still get an error, ERROR "hw4.lhs":141 - Last generator in do {...} must be an expression
22:49:13 <kawfee> I don't know how to fix that error either, I've seen it all night long
22:52:06 <kawfee> I think I need a helper function though
22:52:15 <kawfee> > getLine :: IO String
22:52:28 <kawfee> since I have that def, recursion would give me an IO string, not a string
