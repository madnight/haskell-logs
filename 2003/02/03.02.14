00:04:41 <Robert> ostkupan.
00:07:21 <Marvin--> japp
02:09:29 <pseiko> hi all
02:15:04 <galority> hi pseiko ;o)
02:20:47 <pseiko> *g*
03:11:26 <shapr> jag kommer tillbaka
03:13:28 <Robert> Bra.
03:13:29 <Robert> N‰r?
03:16:09 <shapr> jag kommer tillbaka nu
03:16:12 <shapr> just nu
03:16:40 <Robert> Ah.
03:16:55 <Robert> "Jag kommer tillbaka" usually means "I'll be back".
03:17:00 <shapr> oh
03:17:12 <shapr> jag har kommt tillbaka
03:17:16 <Robert> :D
03:17:21 <Robert> Jag Âterv‰nder!
03:17:25 <Robert> (I return)
03:17:32 <shapr> ah, I didn't know that word.
03:18:06 <Robert> Hehe, don't worry. You're well-educated to be an American!
03:18:16 <shapr> :-P
03:18:39 <shapr> jag kan ocksa tala en lite franska, en lite finska, en lite tyska, en lite dutch?
03:18:45 <ibid> one mistake every finn makes is to say "jag gick frÂn helsingfors till jyv‰skyl‰" :-)
03:18:59 <ibid> at least they say it's a mistake
03:19:22 <shapr> what's the mistake there?
03:19:32 <ibid> gÂ refers to going on foot
03:19:41 <shapr> no one actually goes from helsinki to jyv‰skyl‰? only the other way around? ;-)
03:20:02 <Robert> Hehe.
03:20:04 <ibid> no, one usually Âker from helsinki to jyv‰skyl‰ (iirc)
03:20:13 <Robert> Yup.
03:20:16 <shapr> oh
03:20:27 <Robert> "en lite finska" ---> "lite finska"
03:20:35 <Robert> dutch = Holl‰ndska
03:20:36 <shapr> ah, tack
03:20:51 <shapr> fˆr bÂda
03:20:53 <Robert> "en lite" -> "lite", actually.
03:21:03 <Robert> For both..?
03:21:07 <ibid> shapr: appilan pappilan apupapin papupata pannulla kiehuu ja kuohuu" ;-)
03:21:11 <shapr> yah, you gave me two corrections :-)
03:21:18 <Robert> Oh. Right :)
03:22:29 <shapr> ‰l‰r‰‰kk‰‰k‰‰n - plural of "don't torture" in finnish
03:22:44 <shapr> oh, I missed a k in there
03:23:01 <shapr> finnish is a nifty language.
03:23:05 <ibid> shapr: ‰l‰ r‰‰kk‰‰ k‰‰kk‰‰.  emm‰ r‰‰kk‰‰k‰‰n k‰‰kk‰‰. k‰‰kk‰‰ s‰ r‰‰kk‰‰t
03:23:18 <shapr> aiee :-)
03:23:21 * shapr runs away
03:23:59 <ibid> shapr: it's my retaliation for inflicting me the pain of reading about the contest...
03:24:16 * shapr laughs
03:24:51 <Robert> Finnish is evil.
03:24:55 <shapr> it's nifty
03:24:58 <ibid> nope
03:25:24 <shapr> yes it is!
03:25:26 <shapr> it's nifty!
03:25:35 <ibid> "i have a good mind to take upon my head to start off singing, begin reciting ..."
03:25:48 <ibid> it's not evil, that is
03:25:49 <Robert> Chemistry class now, bbl
03:25:59 <ibid> do you recognize that quote? :-)
03:26:11 <shapr> it sounds familiar
03:26:46 <shapr> the guys on #debian-fi still tease me for accidentally proposing to Viiru once.
03:26:57 <ibid> translation of "mieleni minun tekevi, aivoni ajattelevi ..." (this one you should recognise if you are a true fennophile)
03:27:02 <shapr> oh yes!
03:27:02 <ibid> how did you do that?
03:27:19 <shapr> ibid: I don't remember exactly
05:22:30 * shapr boings
05:22:54 * jlouis_ <-- has birthday today
05:23:05 <shapr> happy birthday jlouis!
05:23:10 <shapr> jlouis: are you old enough to drink now?
05:23:22 <jlouis_> shapr: I do not drink ;)
05:23:26 <shapr> actually, that makes you... 23?
05:23:27 <dark> I thought drinking was the first thing babies learned.
05:23:31 <jlouis_> shapr: yes
05:23:41 <jlouis_> I do not consume alcohol
05:23:55 <shapr> I do, but not very often.
05:24:07 <shapr> usually for New Years and that kind of stuff.
05:24:17 <jlouis_> I had a glass at 00:00
05:24:21 <jlouis_> new years eve
05:24:22 <shapr> alcohol is bad for coding
05:24:26 <jlouis_> hehe :)
05:24:32 <jlouis_> I juggle though
05:24:41 <shapr> oh really!
05:24:46 <shapr> do you do contact juggling?
05:25:24 <jlouis_> not that much
05:25:40 <jlouis_> balls and clubs primarily
05:26:19 <shapr> I have these half-kilo ball bearings someone gave me
05:26:25 <jlouis_> though i've started to try at a bit of contact juggling tricks. They can be nice to have up your sleeve
05:26:27 <shapr> that's how I learned to do contact juggling
05:26:36 <jlouis_> ah, smart
05:26:45 <shapr> very motivating
05:26:55 <jlouis_> dont drop them on your feet ;)
05:27:05 <shapr> you *remember* it when you do!
05:27:09 <jlouis_> ;)
05:27:20 <jlouis_> only done once?
05:27:21 <jlouis_> hehe
05:27:29 <shapr> hey, if you're coming to ICFP etc in Uppsala, bring your gear!
05:27:37 <shapr> we can do juggling
05:27:55 <shapr> I've never tried clubs, but I'd like to
05:28:09 <shapr> I can only do three balls, contact juggling is far more interesting to me
05:28:20 <jlouis_> hehe
05:28:27 <shapr> I need to find a list of contact tricks so I can see what I can learn
05:28:42 <jlouis_> there are plenty of good videos at the net
05:31:47 * shapr googles
05:33:14 <jlouis_> I think 'contact juggling' might do the trick
05:33:27 <jlouis_> though We should really create a juggling program for Haskell someday
05:33:37 <jlouis_> there is a complete group theory for it 
05:35:01 <shapr> well, this guy's list of palmspinning tricks is missing some that I came up with
05:35:21 <shapr> oh wait, maybe he has it on a different page
05:35:33 <shapr> jlouis: where's that juggling group theory?
05:35:44 <shapr> I've had some very interesting ideas along the same lines...
05:37:08 * shapr googles more
05:39:59 <shapr> cool, I do know of some stuff this guy doesn't have listed
05:47:08 * shapr sends email describing unlisted tricks
06:01:30 <mgoetze> hm, the world is so small at 80x25...
06:05:34 <mgoetze> yay@early submissions to iohcc
06:07:16 <Heffalump> how many?
06:09:16 <mgoetze> um... 2 so far i think
06:30:45 <shapr> yay iohcc!
06:36:28 * mgoetze watches shapr bounce
06:36:39 * shapr bounces MUCH
06:36:57 * shapr gets stuck in the ceiling
06:41:39 <jlouis_> shapr: look up side swap notation
06:41:44 <jlouis_> it is a cyclic group 
06:56:02 <SyntaxPolice> does anyone know of documentation or tutorial on ghc's monad.state ?
06:57:16 * shapr boings
06:57:28 <shapr> hi SyntaxPolice 
06:57:31 <shapr> he pseiko 
06:57:45 <SyntaxPolice> shapr: how's it going?
06:58:32 <pseiko> hi all, a little question: is there an easy explanation for the term "rank-2 polymorphism", e.g. with an example?
07:01:28 <shapr> SyntaxPolice: it's going well, we have two submissions already!
07:01:58 <SyntaxPolice> shapr: cool! how do they look?
07:03:06 <jlouis_> hmmm, maybe I should cook up something
07:03:39 <shapr> jlouis: yes please!
07:03:43 <shapr> SyntaxPolice: they're very nifty
07:12:53 <SyntaxPolice> woohoo, I implemented one of the examples in "The craft of functional programming" with the real Control.Monad.State :)
07:13:13 <SyntaxPolice> now I'm not sure why this was so hard last night :)
07:24:29 <shapr> sometimes you just need perspective
07:28:33 <shapr> hi miph 
07:29:41 <shapr> miph: learning Haskell? long time user?
07:31:03 <miph> shapr: learning. long way to go yet :-)
07:31:20 <shapr> miph: got any questions?
07:32:14 <miph> no really right now. just watching this space for interesting talks 
07:33:38 <shapr> I'm sure I can think of something interesting....
07:35:23 <shapr> oh, anyone has advice on how to make up a useful type structure?
07:35:29 <shapr> any suggestions or recommendations?
07:36:10 <shapr> so it looks like "data plural = singlename1 args | singlename2 args" is the right way to make that sort of type
08:00:32 * shapr bounces
08:00:40 <shapr> hi giedi 
08:01:32 * giedi waves
08:01:41 <shapr> what's up?
08:01:58 * giedi woke up and drank coffee..
08:02:09 <shapr> mmm, coffee
08:02:15 <shapr> I forgot to make coffee today
08:02:20 <shapr> I'll do it tomorrow.
08:02:40 <dark> I'm breaking my caffeine habit, which is why I won't be very productive this week :)
08:02:51 <shapr> why are you breaking it?
08:03:10 <shapr> I take as many stimulants as I can
08:03:40 <dark> I took mine in the form of chocolate milk, and it stopped being healthy when I passed the liter-a-day mark :)
08:04:02 <shapr> it's not healthy to drink more than a liter of milk a day?
08:04:47 <dark> Not for me, at least.  I'm probably allergic to it.  I'm definitely lactose-intolerant.  It's my Indonesian heritage I think :)  Also, that amount of chocolate can't be good.
08:04:49 <giedi> milksucks.com says so..
08:06:43 <shapr> does that mean you don't drink battery much?
08:07:45 <dark> I don't drink it at all...
08:07:56 <shapr> ah
08:08:25 <shapr> for me, stimulants == consciousness
08:08:36 <shapr> I wonder if ICFP will be anything like DragonCon
08:08:58 <shapr> I suspect not, but it would be cool to have an all night coding "Fix TH Bugs" coding sprint
08:09:04 <Heffalump> is shapr going to ICFP?
08:09:09 <Heffalump> (no, it won't)
08:09:10 <shapr> he is
08:09:12 <Heffalump> cool.
08:09:17 <shapr> have you been to DragonCon?
08:09:26 <shapr> Heffalump: that is, assuming it's not immensely expensive.
08:09:28 <Heffalump> no, but there won't be any all night coding sprints :-)
08:09:32 <shapr> awww
08:09:33 <shapr> why not?
08:09:35 <Heffalump> will you just have to pay registration?
08:09:39 <Heffalump> well, people don't tend to do them
08:09:49 <shapr> nah, I'll have to pay for a place to sleep also
08:09:54 <shapr> I live 800km away
08:10:34 <shapr> I think coding sprints could be great fun, and get useful stuff done
08:10:40 <Heffalump> I think it was $300 for ICFP 2002
08:10:43 <shapr> plus, pair programming with the GHC guys would rock
08:11:10 <Heffalump> come to FOP!
08:11:14 <shapr> what's that?
08:11:23 <Igloo> Oh, I should prod Oege about that
08:11:32 * shapr uses his other brain again
08:11:37 <Heffalump> including me.
08:11:41 <Heffalump> oops.
08:11:43 <Heffalump> mispaste
08:11:56 <Heffalump> http://web.comlab.ox.ac.uk/oucl/research/areas/ap/fop/
08:12:10 <Heffalump> igloo: haven't you missed the early reg deadline?
08:12:43 <Igloo> I sent an e-mail before it
08:12:56 <Heffalump> ah
08:13:02 <shapr> will there be code binges at FoP?
08:13:16 <giedi> lol.. shapr is an addict
08:13:21 <Heffalump> I doubt it
08:13:24 <Heffalump> sorry :-)
08:13:25 <shapr> giedi: yes, why else be here?
08:13:41 <shapr> oh c'mon... no programming at a Fun of Programming presentation????
08:13:47 <shapr> that's like... heresy!
08:13:58 <Heffalump> sorry :-)
08:14:10 * shapr thinks subversive thoughts
08:14:50 <shapr> I should send Bird an email and complain ;-)
08:15:07 <shapr> ask him to come to an after-FoP coding binge :-)
08:15:52 <shapr> I bet it would be more motivational to come up with a 'hackable toy' in Haskell
08:16:06 <shapr> what would be a good hackable toy?
08:17:06 <dark> You mean code-wise or actual hardware?
08:17:19 <shapr> code-wise
08:17:27 <Heffalump> Don't contact Richard about it, it's being organised by other people in honour of him :-)
08:17:43 <shapr> yah, I won't bug him.
08:17:47 <Heffalump> Were it not for the fact that the book is advertised an attempt would have been made to keep it a complete secret.
08:17:52 <shapr> heh
08:17:58 <Heffalump> (from him, that is)
08:18:05 <shapr> I understand
08:18:12 <Heffalump> I suspect getting people to come at the same time as keeping it a secret from him might have been hard, though.
08:18:20 * shapr snicker
08:18:21 <shapr> s
08:18:22 <shapr> I agree
08:18:40 <shapr> dark: some sort of code toy where you want to download it and add or change parts
08:18:59 <shapr> something like a haskell shell? or lambdabot with plugins? maybe monad transformers?
08:19:07 <shapr> or a haskell shell written from monad transformers?
08:19:07 <shapr> hmm
08:19:54 <shapr> something like emacs actually
08:20:51 <giedi> haskell OS you mean?
08:21:02 <shapr> yah!
08:21:12 <shapr> like Oberon, able to run as app, or on raw hardware
08:21:46 <shapr> though at that point it sounds too big, adding barriers to access
08:24:24 * shapr looks to see if the plugin part of HWS was added to CVS
08:25:39 <shapr> doesn't look like it
08:25:58 <shapr> does the fptools license allow me to add HWS-WP to haskell-libs ?
08:26:12 <shapr> ah, yes it does
08:32:41 <shapr> anyone know if the threaded RTS is standard in the debian ghc5?
08:35:05 <hdaume> hi all
08:35:26 <shapr> hi hal
08:43:39 * shapr builds hws-wp
08:51:11 * giedi scratches his head at unlambda programming language
08:58:26 <shapr> unlambda is nifty
09:03:59 <shapr> ok, I'd guess a good hacktoy would be some combination of monad transformers and runtime loading
09:04:15 <shapr> especially for a haskell shell
09:06:10 <shapr> better ideas?
09:11:36 <shapr> hi redcrosse 
09:11:45 <redcrosse> hello
09:11:54 <shapr> what's up?
09:12:06 <redcrosse> nothing much, you?
09:12:46 <shapr> just found out that someone is already implementing a new testing framework idea I had...
09:13:16 <redcrosse> hey, at least your idea was a good one then
09:13:20 <shapr> heh, truly
09:13:30 <Heffalump> the idea being?
09:13:43 <shapr> cvs-wiki
09:13:51 <shapr> http://fit.c2.com/wiki.cgi?RunScript
09:14:28 <shapr> I've been claiming it would be easier to add tests see test results via a Wiki
09:15:53 <shapr> actually, I'm even claiming that code should be editable on a wiki
09:22:43 <whee> I don't get what it does
09:23:37 <whee> seems like an awful lot of work for testing something, heh
09:25:42 <shapr> how so?
09:26:09 <whee> I guess I don't really understand how the whole thing works
09:26:20 <whee> but to me it looks like a pretty interface to standard unit testing?
09:27:08 <shapr> in what way is it different?
09:27:42 <shapr> the first differences I see are, communal adding of tests
09:27:42 <whee> that's what i want to know :)
09:27:56 <shapr> collaborative and incremental
09:29:10 <shapr> for example, I'd love to be able to add a unit test to gnome2 to test for a bug I found
09:29:41 <shapr> but I'm probably not going to go through all the trouble it takes to actually make sure that unit test gets into cvs
09:40:56 <whee> so what you do is essentially put an entire project on a wiki in a fashion that inputs to specific functions can be specified for testing?
09:41:18 <shapr> yup
09:41:20 <shapr> what do you think?
09:41:22 <whee> wouldn't that be insecure?
09:41:31 <shapr> how so?
09:41:42 <whee> you'd have to write your code awfully defensively before it makes it
09:41:55 <shapr> huh?
09:42:30 <whee> well, if I were to write a factorial function that assumes you're giving it a positive integer, someone goes and tests it with -1, it loops forever and possibly screws things up
09:42:35 <whee> some bugs aren't very nice
09:43:01 <shapr> ok, assume you test it with user mode linux
09:43:14 <whee> heh
09:43:32 <whee> I just don't think it'd be extremely useful with most larger projects
09:43:50 <shapr> why not?
09:44:40 <whee> well say you have some function in the middle of this huge project and you suspect it's faulty, how would you get the environment properly set up so you could actually target the one function?
09:45:38 <shapr> write a unit test for it?
09:46:17 <whee> then why bother with the wiki :P
09:46:20 <redcrosse> yeah, it looks like that framework is more for acceptance tests
09:46:31 <redcrosse> for customers
09:47:32 <whee> I just don't think it'd be really useful; developers are likely to have their own unit tests that would handle complex things
09:49:02 <dark> whee: likely?  It's extremely rare in my experience.
09:49:38 <whee> production quality developers :)
09:49:54 <whee> I'd say it's bad style to assume the users will do testing
09:51:11 <ibid> what's a "functional pearl"?  i see papers labelled as such, and don't really know what it means (beyond what i can deduce from reading the papers...). is there a definition somewhere?
09:51:39 <shapr> ibid: it means "a really cute trick I came up with"
09:51:50 <dark> I think it goes back to the collection "Programming Pearls".
09:51:56 <shapr> like chris okasaki discovering that amortized complexity is actual complexity
09:51:58 <dark> Which I first saw as a book.
09:52:16 <ibid> right...
09:56:05 <hdaume> shapr: how do you mean (re complexity)
09:56:06 <Janni> hey ladies, i'm back...
09:56:42 <Heffalump> where? where?
09:56:46 <shapr> hdaume: it's something Pseudonym told me.
09:57:20 <hdaume> what do you mean by "is"?  :)  (sounds like something they asked Clinton)
09:57:50 <shapr> basically, if you put off parts of an algorithm till you absolutely need them, sometimes you don't
09:58:00 <shapr> I don't have the details handy, sorry.
09:58:13 <hdaume> shapr: ah, so only in the context of a lazy language?
09:58:26 <shapr> I think so
09:58:31 <hdaume> muy interesante
09:59:03 <dark> It's probably from http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf
09:59:38 <hdaume> yeah, i've downloaded and even printed that; just haven't gotten around to reading it yet :)
09:59:42 <dark> Which I got from clausen's book list, http://members.optusnet.com.au/clausen/books.html
09:59:57 <dark> I've been reading it on screen but only got about halfway :)
10:56:12 <shapr> can anyone here see alt.comp.haskell or alt.comp.lang.haskell?
10:56:54 <Heffalump> not I
10:57:09 <shapr> someone on c.l.f claimed to have created it
10:57:18 <shapr> I wonder if it automatically propogates
10:57:18 <Heffalump> might take time to propagate, if it does at all
10:57:23 <Heffalump> alt.* tends to be very patchy
10:57:28 <shapr> yah, I've noticed
10:57:29 <ibid> not here
10:57:55 <hdaume> not i
10:57:57 <ibid> at least here, alt.* are created locally mostly based on user requests
10:58:30 <shapr> well, I like to use c.l.f anyway
10:59:35 <Heffalump> ahah, I found alt.comp.lang.haskell
10:59:38 <Heffalump> no articles though
10:59:52 <Heffalump> and it's not on my normal newserver, so I wouldn't actually read it
11:00:04 <shapr> where is it?
11:01:00 <Heffalump> I think on easynet's news server
11:01:13 <Heffalump> I can see it on our local nntpcache on urchin, which I think uses that
11:01:42 <shapr> hm, neat
11:03:27 <hdaume> groups.google.com doesn't even have it yet :(
11:03:56 <shapr> well, I like Heffalump's idea "put enough traffic into c.l.f and they'll ask us to create c.l.h"
11:04:28 <Heffalump> shapr: yeah, news.easynet.co.uk
11:04:39 <Heffalump> shapr: except that there's already a lot of Haskell traffic and noone has
11:04:44 <Heffalump> so I suspect people are happy with it
11:04:48 <hdaume> anyone know why i would get './configure: bad substitution' when gmake on sparc-sun-solaris2 for ghc (cvs) runs 'cd gmp && ./configure --enabled-shared=no --host=sparc-sun-solaris2' ?
11:04:54 <Heffalump> you want to avoid the situation where everything gets xposted
11:05:11 <Heffalump> hdaume: does that command work from a shell?
11:05:24 <hdaume> nope, when i do it myself it gives the same thing
11:05:40 <shapr> yah, since our last c.l.h discussion I thought about it, and now agree with you.
11:06:15 <Heffalump> hdaume: even if you change to gmp first then run it, instead of all at once?
11:06:21 <hdaume> yeah
11:06:31 <Heffalump> and what if you leave out the parameters?
11:06:31 <hdaume> i removed config.cache and it looks like that fixed it though
11:06:33 <shapr> what if you remove the options?
11:06:35 <shapr> ah
11:06:36 <hdaume> hooray for the placebo effect :)
11:06:40 <Heffalump> ah :-)
11:07:56 * shapr gets hws-wp to run
11:08:48 <shapr> I hope marvin-- lets me put hws-wp into haskell-libs
11:15:15 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "New HTk release http://www.informatik.uni-bremen.de/htk/", "New DSP libs - http://users.snip.net/~donadio/haskell/", "IOHCC - http://iohc.mgoetze.net/"]' by shapr
11:22:30 <dark> shapr: amusing rant about Java on http://sakima.ivy.net/~carton/academia/java_languageoftomorrow.html :)
11:32:27 <shapr> dark: this is a nifty rant!
11:32:48 <dark> shapr: Yeah, a well-educated rant, or something :)
11:33:09 <dark> I liked it as much as the Unix Hater's Handbook.  I wonder if they have similar backgrounds.  Lisp Machines were mentioned in both :)
11:33:13 <Smerdyakov> Who wants a joke? http://uuu.sourceforge.net/
11:34:36 <Heffalump> they actually seem serious, am I missing something?
11:36:13 <Smerdyakov> Maybe you haven't read the part about coding everything in x86 assembly yet? =)
11:36:29 <Smerdyakov> The reason they give is: "It's our passion."
11:37:00 <shapr> I suspect x86 is going to be like COBOL
11:37:08 <shapr> still haunting us years after we've decided to hate it.
11:38:56 <SyntaxPolice> shapr: did I see a set engine somewhere on a web account of yours?
11:39:06 <SyntaxPolice> (set the game)
11:39:10 <Smerdyakov> Their listed development team has average age of 19.
11:39:22 <Smerdyakov> I think it's odd to see a project web page that lists ages of members.
11:39:41 <Smerdyakov> And even odder to have it linked from a page for a legitimate research OS at a university.
11:42:49 <shapr> SyntaxPolice: very tiny amount of source that's just the beginnings of a Set Game
11:43:45 <shapr> hm, what was the popular mac database product for many years?
11:43:52 <SyntaxPolice> does it check whether something is actually a set?
11:44:10 <SyntaxPolice> shapr: Hypercard? Not exactly database...
11:44:12 <SyntaxPolice> but popular
11:44:17 <shapr> nah, a bit larger...
11:44:23 <SyntaxPolice> filemaker
11:44:26 <shapr> yes!!
11:44:27 <shapr> that's it!
11:44:34 * SyntaxPolice bounces
11:44:44 <shapr> I met their former head of R&D at a party in Seattle once
11:45:10 <SyntaxPolice> don't tell him, but when I was a kid, I pirated filemaker and had no clue wtf it was. It looked neat, though.
11:45:10 <shapr> his description of NewtonScript and mention of Self got me interested in prototype oriented programming
11:45:15 <shapr> heh
11:46:02 <SyntaxPolice> what are NewtonScript and Self?
11:46:33 <shapr> prototype oriented programming languages like Cecil and JavaScript
11:46:46 <shapr> no class hierarchy, only instances
11:47:17 <shapr> each new instance is a facade on top of its parent
11:47:28 <shapr> and automagically delegates calls it can't handle to its parent instance
11:47:34 <SyntaxPolice> interesting
11:47:47 <SyntaxPolice> but why no class hierarchy? 
11:47:53 <shapr> because you don't need one.
11:48:11 <shapr> Self is even more generic, it just has 'slots'
11:48:32 <shapr> and you send messages to an instance, if it matches a slot, that slot gets executed
11:48:38 <shapr> if not, it gets delegated back to the parent
11:49:05 <SyntaxPolice> sounds neat.
11:49:08 <shapr> it's very cool
11:49:12 <SyntaxPolice> is it less expressive?
11:49:30 <shapr> I think it's simpler to keep track of a single hierarchy.
11:49:47 <shapr> the downside is that you don't have separate compilation
11:50:02 <shapr> you're always working in a single 'image' like Smalltalk
11:50:12 <shapr> that works fine in a browser, or in a smalltalk image
11:52:29 <shapr> I suspect it wouldn't be a problem to do the same thing with Java
11:52:51 <shapr> the upside and downside of a single image is that you can change *anything*
11:53:31 <shapr> so if you decide to alter code that comes with the system, you can't expect your code to be easily installed in paralell with another smalltalk product
11:53:46 <shapr> also, it's not always easy to 'file out' changes in a smalltalk image
11:53:55 <shapr> you should check out Squeak, it's very neat.
11:54:16 <shapr> sadly, most of this I'm just parroting to you, I have very little actual experience with Squeak/Smalltalk/Self
11:55:23 <shapr> my smalltalk quotes: "smalltalk has an image problem" and when someone asked me whether I knew smalltalk, I said "eponymically"
11:57:31 <SyntaxPolice> hehe
11:57:37 <SyntaxPolice> sounds neat, though.
11:57:40 * SyntaxPolice will look into it.
11:58:05 <shapr> Squeak is an open source smalltalk done by disney and apple
11:58:24 <shapr> Alan Kay is now working on opencroquet.org though
12:02:53 <Smerdyakov> What is it?
12:03:45 <shapr> Smerdyakov: something like a collaborative distributed 3D environment
12:04:09 <shapr> much like a 3D version of Kansas from Self, or Nebraska from Squeak
12:05:16 <dark> I just had this horrible vision of unununium being a patented element.
12:05:29 * shapr snickers
12:05:32 <dark> I should stop reading nightmare-inducing material (like the news) before going to bed.
12:27:11 <Marvin--> shapr: be my guest
12:27:22 <shapr> yay!
12:27:59 <Marvin--> and I'm pretty sure I don't have anything newer
12:28:05 <shapr> I've already spotted several things I'd like to change :-)
12:28:15 * Marvin-- ponders how to test this in a smart way
12:28:29 <shapr> for example, explicit plugin dirs are unhappy for me :-(
12:28:30 <dark> "What's this HTTP stuff?  The slashdot discussion made it clear that FTP is superior.  *fix* *hack*"
12:28:40 <shapr> I want something relative to the server root
12:28:46 <shapr> something like, www root and server root
12:28:57 <shapr> dark: eh?
12:29:16 <Marvin--> of course, I didn't spend any time at all on configuration thingies
12:29:21 <dark> shapr: I was making fun of slashdot :)
12:29:28 <shapr> dark: easy target
12:29:35 <shapr> Marvin--: yah, with good reason
12:29:52 <shapr> dark: this Java critique is awesome
12:30:37 <Marvin--> shapr: right, I don't have any timestamps older than 2002-10-28, so I'd say it's a safe bet I don't have any modifications here
12:30:54 <shapr> ok, thanks for checking
12:31:55 <shapr> dark: the guys on #javapro say this Java critique is either misinformed or a troll.
12:32:13 <dark> Well... they would :)
12:32:34 <dark> It does exaggerate in a few places.
12:33:17 <Marvin--> man I gotta eat
12:33:25 <Marvin--> I ate a baguette for lunch
12:33:35 <Marvin--> that was nine hours ago
12:40:15 <Marvin--> would you believe I've played the GoT CCG for eight hours straight?
12:40:39 <dark> What's GoT?
12:41:05 <Marvin--> Game of Thrones
12:41:15 <dark> Heh.  I liked the book...
12:41:32 <Marvin--> yeah, and it makes an awesome CCG :)
12:42:52 <Marvin--> you play a house, either Stark, Baratheon or Lannister (or in the expansion, Greyjoy)
12:43:14 <Marvin--> and yesterday, we bought a new box of boosters and opened them all and split them on five people :P
12:43:55 <dark> How much is it per box?  The pricing is why I eventually drifted away from CCG :)
12:44:20 <CeroComa> hi
12:44:54 <dark> Jyhad boxes got pretty cheap at some point, so I played that for a few years longer.
12:44:56 <CeroComa> i'm trying to install gtk+hs on debian woody
12:45:17 <CeroComa> but only trying...
12:45:23 <Marvin--> dark: 36 boosters · 36 cards for 110 euro
12:45:29 <Marvin--> err, · 11 cards of course
12:45:30 <CeroComa> anyone can help me?
12:46:11 <dark> Marvin: Not an improvement over Jyhad even in its expensive days :)
12:46:32 <CeroComa> when I compile any example, it fails when it's linking
12:46:41 <Marvin--> dark: heh... but we were five people splitting it, so it wasn't that bad, 22 euro per person and we got a lot of nice cards
12:47:37 <Marvin--> dark: the fun thing is that you *can* play cards belonging to another house but at a cost penalty... right now I'm playing a multi-colored deck that has locations and characters that let you play knights of any house without penalties :)
12:48:26 <ludde> Is there some way to rewrite this into one line:
12:48:26 <ludde> 		uname <- getUserName ud
12:48:26 <ludde> 		when (mdOwner /= uname) $ error "You are not the match owner"
12:49:11 <Smerdyakov> Sure. Use a semicolon =)
12:49:32 <ludde> i meant one statement.
12:50:14 <shapr> ludde: unless?
12:50:24 <ludde> hmm, how does that help?
12:50:50 <shapr> er
12:50:59 <Marvin--> ludde: use bind explicitly
12:51:03 <shapr> Maybe uname? 
12:51:50 <Smerdyakov> You can write a function that does it and call that function....
12:52:14 <Marvin--> I *suppose* you could make a monadic help function that does pretty much that for you... whenM :: Monad m => (a -> Bool) -> m a -> String -> m ()
12:52:52 <ludde> getUserName ud >>= \a -> (`when` error "You are not the match owner") (a /= uName)
12:53:00 <ludde> would that work?
12:53:45 <ludde> getUserName ud >>= (`when` error "You are not the match owner").(/= uName)
12:53:58 <ludde> probably not
12:54:07 <Smerdyakov> Why wouldn't it?
12:55:18 <shapr> Marvin--: did Simon M say anything about adding your changes into hws proper in the libs tree?
12:55:56 <ludde> wow it seems to work
12:56:30 <ludde> how can I check if a maybe type is empty?
12:56:33 <ludde> err
12:56:36 <ludde> if it is Nothin
12:56:37 <ludde> g
12:56:49 <SyntaxPolice> isNothing :)
12:56:52 <ludde> oh
12:56:54 <SyntaxPolice> I also like to use fromMaybe
12:57:08 <SyntaxPolice> which will return a "default" if the answer is Nothing.
12:57:23 <ludde> is there an isJust too?
12:57:26 <SyntaxPolice> yep
12:57:35 <SyntaxPolice> I think you have to "import Maybe" to get those functions.
12:57:36 <ludde> cool
12:57:46 <SyntaxPolice> fromMaybe seems to me to be cleaner, though.
12:58:07 <ludde> when (isJust (mdRosimChan m)) $ error "Match is already started"
12:58:11 <ludde> not here.
12:58:31 <Marvin--> shapr: I didn't ask, he didn't say anything
12:58:32 <SyntaxPolice> yeah, its not always best :)
13:02:46 <Janni> ludde: think of pattern matching
13:03:30 <ludde> Janni: that requires more code
13:13:47 <Marvin--> hmm, seeing as Blizzard announced that expansion for War3 not very long ago, and now they open up beta testing and have plenty of animations and stuff... They must have started building it even before the release of War3...
13:13:53 <Binkley> hey
13:14:01 <hdaume> hi
13:14:59 <shapr> hi Binkley 
13:15:02 <Smerdyakov> Hello. I got into UCB PhD. =)
13:15:19 <Smerdyakov> But I'll tell them you said I shouldn't go!! :D
13:15:20 <Robert> So you've told us!
13:15:28 <Smerdyakov> I'm not telling you, Robert!
13:15:44 <Binkley> hey, congratulations!
13:15:49 <Binkley> heh
13:15:52 <shapr> hey Binkley, I've put lambdabot into haskell-libs cvs in the hopes of getting a plugin community of some sort started, interested?
13:16:03 <Binkley> in theory, i'm interested
13:16:11 <Binkley> in practice, i probalby won't have time for a while
13:16:15 <shapr> ok
13:16:37 <shapr> I'll bother you again after a while.
13:16:51 <Binkley> I'll probably be more likely to have time after the ICFP deadline
13:17:00 <shapr> ah, ok
13:17:15 <shapr> speaking of deadlines, have you heard of the IOHCC?
13:17:21 <Binkley> yep, saw the message today
13:17:27 <Binkley> I like it... 
13:17:36 <shapr> ok, just checking, I'm aggressively advertising :-)
13:18:26 <Binkley> I'll give it a go... I'm good at writing obfuscated code
13:18:29 <Binkley> or so I like to think
13:18:34 <shapr> yay :-)
13:19:06 <Marvin--> Smerdyakov: congrats
13:19:20 <Binkley> have you heard from any other schools yet?
13:19:37 <Smerdyakov> Yes, accepted by CMU and Cornell also.
13:19:46 <Binkley> excellent
13:33:16 <camold> //amsg\\\ night to all !
14:00:40 <shapr> yay netsplits
14:09:49 <Marvin--> I'm not sure "yay" is how I would put it, but yes
14:10:25 <shapr> :-)
15:00:44 * Janni is high (really high) on music right now
15:00:54 * shapr bounces happily
15:02:47 <Janni> the bad thing is, that i can mostly enjoy music at the end of the day when i should go to bed. fortunately weekend is beginning :)
15:03:37 <shapr> yes!
15:12:56 <Marvin--> I never thought I'd say this, but I think I could do with some TH right now
15:13:03 * shapr laughs
15:13:14 <shapr> it's really useful
15:13:21 <whee> I've been saying that for the past month, but I can't use it anyway :)
15:13:37 <Marvin--> generating optimization transformations for trivial cases of commutative expressions would be nice
15:13:52 <Marvin--> I mean, when the first case is
15:13:55 <Marvin--> simplifyExp (E_Typed (E_Op e1@(E_Typed (E_Const (C_Bool b)) _) OpAnd e2) _) =
15:13:55 <Marvin-->   case b of
15:13:55 <Marvin-->     JTrue  -> simplifyExp e2
15:13:55 <Marvin-->     JFalse -> e1
15:14:09 <Marvin--> ... well, I think it speaks for itself :P
15:14:45 <whee> that one of your IOHCC entries? :)
15:14:51 * shapr grins
15:14:55 <shapr> whee: you're mean ;)
15:15:43 <Marvin--> no, it's part of my compiler
15:15:47 <Marvin--> partial C to JVM
15:22:12 <ludde> does it work with pointers? :)
15:22:34 <dark> Everyone needs pointers.
15:23:45 <Marvin--> no, it's very partial
15:23:48 <ludde> what is E_Typed?
15:23:52 <emu> partial to what?
15:24:02 <ludde> partial C
15:24:02 <Marvin--> partial to a simple compiler :)
15:24:27 <Marvin--> it's a very tiny subset of C
15:24:33 <ludde> javalette?
15:24:41 <Marvin--> yeah :)
15:24:45 <ludde> :P
15:25:00 <Marvin--> E_Typed is the type annotation
15:25:11 <Marvin--> not really needed for simplification, but for code generation
15:25:14 <andersca> spliff
15:25:15 <ludde> oh
15:25:25 <shapr> sploff
15:25:32 <ludde> is it not possible to store the type annotation inside E_Op ?
15:25:33 <andersca> shapr: good!
15:25:36 <ludde> and inside E_Const 
15:25:42 <Marvin--> ludde: yes, but not using bnfc
15:25:43 <shapr> andersca: what does it mean?
15:25:48 <andersca> shapr: nothing
15:25:52 <shapr> andersca: oh, ok!
15:26:00 <shapr> andersca: what gnome code are you working on lately?
15:26:01 <Marvin--> andersca: has it changed from sliff?
15:26:09 <ludde> bnfc, a bison clone for haskell ?
15:26:21 <andersca> Marvin--: nah, it's just various mutations
15:26:28 <andersca> shapr: been hacking on D-BUS latel
15:26:29 <andersca> y
15:26:37 <Marvin--> oh
15:26:50 <shapr> Isn't bnfc the bnf -> happy/alex/parsec converter?
15:26:54 <andersca> shapr: http://www.freedesktop.org/software/dbus/
15:27:24 <shapr> andersca: how does it compare to toolbus?
15:27:40 <andersca> tool?
15:28:11 <Marvin--> ludde: no, bison clone is happy, bnfc takes a labelled bnf and does *everything* for you, but it also means less flexibility
15:28:25 <shapr> andersca: apt-cache show cwi-toolbus 
15:28:26 <Marvin--> ludde: written by Aarne
15:28:38 <ludde> everything? including type annotation?
15:28:42 <andersca> shapr: dude, I use rh
15:28:43 <andersca> :)
15:28:49 <Marvin--> ludde: well, no, that's the job of the type checker
15:29:08 <shapr> andersca: oh
15:29:16 <ludde> ok
15:29:26 <andersca> shapr: anyway, toolbus seems way too over-engineered and stuff
15:29:48 <andersca> or maybe not
15:31:14 <shapr> I dunno
15:31:36 <dark> Everything seems way too over-engineered these days.
15:31:47 <dark> Especially if it involves XML at any point :)
15:31:48 <andersca> whenever I hear the word "algebraic" together with software, I'm like uh-oh
15:31:51 <andersca> dark: yeah
15:32:10 <emu> putting together pieces that were broken apart
15:32:10 <dark> I keep wondering how come we used to be able to fit a Pascal compiler in 48k.
15:32:11 <Marvin--> andersca: that's because it comes from a university :)
15:32:27 <emu> dark: bondage and discipline
15:33:09 <whee> dark: well, when people used to have to walk 10 miles uphill (both ways) in 3 feet of snow to get supplies, they got a lot of thinking done
15:35:37 <Marvin--> heh
15:35:49 * shapr snickers
15:37:09 <emu> The days of Real Programmers
15:41:04 <shapr> Marvin--: did you ever find out if there are external Core manipulation tools?
15:42:44 <dark> shapr: That sounds like it's related to starship maintenance
15:43:00 <ludde> Marvin--: what types do javalette contain? int, bool, float?
15:43:07 * emu sends the aliens after dark
15:43:11 <ludde> s/do/does/
15:44:59 <shapr> dark: heh, truly
15:45:04 <shapr> eject the Core!
15:45:05 <dark> emu: I'm an X-COM veteran.
15:48:40 <Marvin--> ludde: int, bool, double and in our implementation also string
15:49:25 <ludde> would it be a bad idea to use special E_ nodes for different types? E_Add_Float and E_Add_Int ?
15:49:45 <ludde> maybe that's like what i suggested before
15:49:56 <Marvin--> shapr: haven't really had time to look into it, been busy getting my application ready
15:49:58 <ludde> but not quite
15:51:57 <Marvin--> shapr: but one of the problems is that after that much desugaring, it starts to become tricky to be able to give any interesting feedback to users in terms of their input
15:56:11 <shapr> hi Pseudonym!
15:56:16 <Pseudonym> G'day.
16:23:30 <Marvin--> heh, it's too easy to work with this kind of high-level stack machine
16:24:00 <Marvin--> I just realized "oh look, there's both ineg and dneg instructions"
17:12:20 <shapr> hi malc 
17:12:46 <malc> hm
17:18:55 <shapr> hi d3ciph3r 
17:19:30 <d3ciph3r> hi
17:19:34 <d3ciph3r> i have a question
17:19:40 <shapr> ask it
17:20:12 <Janni> d3ciph3r: 42.
17:20:22 <d3ciph3r> i want to import ParseLib, but how do I add it to the library? ( I'm using nhc98 and it does not come with Parselib)
17:22:23 <shapr> I haven't used nhc98
17:22:34 <shapr> does it say how to add to the library path?
17:23:03 <d3ciph3r> becuase it wants Parselib.hi , but all i can find is Parselib.hl ( on the internet that is).. Pardon, my ignorance, but i'm new at this
17:23:36 <shapr> is it ParseLib.lhs maybe?
17:23:37 <d3ciph3r> **Parselib.hs
17:23:46 <d3ciph3r> my bad, spelling error
17:23:55 <shapr> ah
17:24:06 <shapr> try downloading ParseLib.hs and putting it into your source dir
17:27:21 <d3ciph3r> i get:
17:27:23 <d3ciph3r> Fail: Can't open any of:
17:27:23 <d3ciph3r>  ./ParseLib.hi
17:27:23 <d3ciph3r>  /usr/local/include/nhc98/ParseLib.hi
17:27:23 <d3ciph3r>  when trying to read ParseLib.
17:27:42 <shapr> did you install nhc98 yourself?
17:27:57 <d3ciph3r> yea
17:28:25 <shapr> did you install it from an rpm? or what?
17:29:25 <d3ciph3r> rpm... source gave me problems
17:29:30 <d3ciph3r> er. wait
17:29:44 <d3ciph3r> no, i installed executables from a tar.gz
17:29:55 <shapr> I think the nhc98 includes dir didn't get installed correctly
17:30:01 <shapr> or maybe got installed in the wrong place
17:30:07 <shapr> do you have locate installed?
17:30:11 <d3ciph3r> yea
17:30:16 <d3ciph3r> i'm going to updatedb
17:30:19 <shapr> ok
17:30:30 <d3ciph3r> does ParseLib come with nhc98?
17:30:58 <shapr> if it's looking for ParseLib in /usr/local/include/nhc98 it surely sounds like it is expecting to see it there.
17:31:47 <d3ciph3r> a lot of libraries are located there... jsut ot ParseLib
17:32:16 <shapr> have you used rpm to look at the contents of the rpm packages to see if the file is in there?
17:32:34 <shapr> you may be able to list the contents of the rpms to get a good idea of how nhc98 should be correctly installed
17:34:11 <shapr> d3ciph3r: anything yet?
17:34:26 <shapr> d3ciph3r: are you using redhat? or mandrake? which version of your distro?
17:35:02 <d3ciph3r> gentoo
17:35:11 <d3ciph3r> i'm downloading an rpm
17:35:19 <shapr> ok
17:38:43 <d3ciph3r> rpm doesn't gave it either
17:39:08 <d3ciph3r> anyother compilers i can try?
17:40:00 <shapr> yes
17:40:09 <shapr> you could also try the GHC compiler
17:40:17 <shapr> that's the one I used most
17:40:22 <shapr> and you could try the Hugs interpreter
17:43:27 <shapr> d3ciph3r: http://www.haskell.org/learning.html
17:44:47 <shapr> d3ciph3r: are you learning Haskell for fun? or for school or what?
17:44:58 <d3ciph3r> an internet challenge
17:45:09 <shapr> what sort of internet challenge?
17:45:14 <d3ciph3r> btw, do you know any good tutorials on haskell?
17:45:27 <shapr> there are some tutorials listed on that url I pasted.
17:45:56 <d3ciph3r> i'm on a level where i have to use haskell to fix some source code so i can validate a code.. theres 3500 codes and 1 is right
17:46:14 <shapr> sounds neat
17:46:23 <shapr> where did you get that challenge?
17:46:29 <whee> heh, I remember playing with something like that at some point
17:46:45 <whee> should try those again now that I'm not an idiot :)
17:46:54 <d3ciph3r> www.mod-x.co.uk ... level 6 is intense.. took me 4 days.. took others 4 months.... level 7 is what i'm on right now
17:47:04 <d3ciph3r> hmn.. Compiling ParseLib         ( ParseLib.hs, ParseLib.o )
17:47:05 <d3ciph3r> ParseLib.hs:37: Variable not in scope: `isDigit'
17:47:05 <d3ciph3r> ParseLib.hs:59: Variable not in scope: `ord'
17:47:05 <d3ciph3r> ParseLib.hs:59: Variable not in scope: `ord'
17:47:05 <d3ciph3r> ParseLib.hs:103: Variable not in scope: `isAlpha'
17:47:07 <d3ciph3r> ParseLib.hs:103: Variable not in scope: `isAlphaNum'
17:47:10 <d3ciph3r> ParseLib.hs:267: Variable not in scope: `isDigit'
17:47:12 <d3ciph3r> ParseLib.hs:354: Variable not in scope: `isSpace'
17:47:53 <Igloo> Make it import Char
17:48:16 <d3ciph3r> where? in ParseLib?
17:48:53 <Igloo> Yup
17:49:04 <d3ciph3r> nice it works, thanks alot!
17:49:33 <shapr> d3ciph3r: is there anything past level 8?
17:49:45 <d3ciph3r> level 8 is under construction
17:49:50 <whee> haha
17:50:02 <d3ciph3r> you would not beleive the stress from level 6.... i was literally tearing out hair
17:50:08 <whee> what was it about?
17:50:38 <d3ciph3r> you had to break into a message board and find out how they were passing info around
17:50:55 <shapr> sounds fascinating
17:51:10 <shapr> are there different challenges for different people?
17:51:14 <d3ciph3r> thing is, the message board ony allowed a sertain OS and had an authentication sequence composed of numbers that you had to make an algorithm to break
17:51:24 <d3ciph3r> theres a variety of challenges
17:51:32 <d3ciph3r> from ASCII shifting, to cracking, etc
17:51:38 <shapr> can you solve all of them if you want?
17:51:40 <d3ciph3r> to programming of course
17:51:46 <d3ciph3r> you solve them 1 at a time
17:51:51 <d3ciph3r> each has its own level
17:52:02 <d3ciph3r> you must complete a level to move to the next
17:52:05 <d3ciph3r> and it gets harder
17:52:13 <d3ciph3r> exept for level 7
17:52:20 <whee> I think I'll start playing with this tonight
17:52:24 <shapr> yah, me too
17:52:27 <lament> heh
17:52:36 <d3ciph3r> i got to level 5 in like 7 hours.. then i got stuck for a week
17:52:40 <whee> haha
17:52:54 <d3ciph3r> level 6 took me 2 days, and level 6 4 days
17:54:45 <d3ciph3r> Compiling Main             ( upyours.hs, ./upyours.o )
17:54:45 <d3ciph3r> upyours.hs:6: No 'main' defined in module Main
17:54:45 <d3ciph3r> upyours.hs:11: Variable not in scope: `mzero'
17:54:45 <d3ciph3r> upyours.hs:12: Variable not in scope: `papply'
17:54:45 <d3ciph3r> upyours.hs:12: Variable not in scope: `code2'
17:54:46 <d3ciph3r> upyours.hs:40: Variable not in scope: `char'
17:54:48 <d3ciph3r> upyours.hs:40: Variable not in scope: `+++'
17:54:50 <d3ciph3r> upyours.hs:42: Variable not in scope: `char'
17:54:52 <d3ciph3r> upyours.hs:43: Variable not in scope: `char'
17:54:54 <d3ciph3r> upyours.hs:45: Variable not in scope: `char'
17:54:56 <d3ciph3r> upyours.hs:46: Variable not in scope: `char'
17:54:58 <d3ciph3r> what import do i need?
18:01:10 <shapr> d3ciph3r: haskell is worth learning
18:01:21 <Heffalump> Monad for mzero
18:01:27 <shapr> I suspect you would able to fix those modules yourself in a very short amount of time
18:01:35 <Heffalump> the others are probably local to this project
18:02:21 <d3ciph3r> yes... I haven't been able to find a good ( easy ) tutorial... most of these tutorials tend to jump right in
18:02:48 <Heffalump> how about the Gentle Introduction?
18:03:52 <d3ciph3r> i'll take a look at it
18:04:07 <d3ciph3r> what does <- do?
18:04:42 <shapr> it's a monadic version of =
18:04:59 <shapr> literally, it calls the >>= operator
18:05:05 <shapr> also called bindM
18:05:11 <d3ciph3r> ok.. that makes more sense now
18:05:52 <d3ciph3r> product (1..4) would be wrong right? should it be product [1..4] ?
18:06:02 <shapr> I think so
18:06:18 <shapr> I'm a registered agent now, shouldn't I stop helping you? ;-)
18:06:57 <d3ciph3r> lol...
18:17:31 <d3ciph3r> can someone explain to me how 'do' works?
18:18:28 <shapr> it lets you have multiple monadic bindM calls in a row
19:31:01 <shapr> hm
19:32:13 <Igloo> Bah, no content in wiki?WayOfTheFuture to steal  :-)
19:32:59 <shapr> ?
19:34:15 <d3ciph3r> so close... i get Data constructor not in scope: `Char' if i use Char, and Variable not in scope: `char' if i use char ... any ideas?
19:35:13 <shapr> sounds like you need to import the Char module
19:35:19 <d3ciph3r> i did
19:35:50 <shapr> in that case, no I have no idea.
19:36:01 <Igloo> You might want a pretty=printing library
20:07:37 <kawfee> hello
20:30:04 <shapr> hiya
21:06:13 <kawfee> hi
21:06:33 <kawfee> pretty dead in here tonight
21:07:56 <kawfee> Keltus: you're at urbana?
21:08:31 <kawfee> Keltus doesn't believe Haskell is used
21:08:47 <kawfee> Keltus: tell them what you told me
21:11:08 <Keltus> tell who?
21:12:42 <kawfee> the people in here
21:13:03 <kawfee> not many alive right now, but they usually are
21:16:14 <Keltus> okay, I don't believe Haskell is used much
21:18:00 * whee throws rocks
21:18:07 <whee> :D
21:18:38 * Heffalump agrees with Keltus
21:28:05 <Keltus> hehe
21:38:14 <kawfee> heh
21:38:17 <kawfee> whee: hah
21:38:27 <kawfee> let's stone Keltus 
21:38:39 <Keltus> actually, it would be an even fight
21:38:46 <Keltus> me and heffalump are on a team
21:38:50 <Keltus> and we have boulders
22:02:39 * emu agrees with Heffalump and Keltus 
22:02:51 * emu likes going against the grain!
22:04:08 <emu> that's why I'm here
22:10:19 <Keltus> haha, :)
22:39:08 <kawfee> emu: you are here to cause trouble
22:39:18 <kawfee> it's in your job description
22:39:32 * emu nods
