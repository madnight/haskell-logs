00:39:16 <flippo> I'm amazed at how small the code is for hugs.
00:41:05 <flippo> The Prelude.hs is fun to read too
00:42:17 <num_tenho> where can you find the hugs code? does it come with it?
00:43:09 <flippo> num_tenho: from http://cvs.haskell.org/Hugs/pages/downloading.htm
00:43:21 <flippo> num_tenho: I compiled from source.  Seemed easiest
00:43:29 <clausen> num_tenho: tem o que?
00:43:43 <num_tenho> i'll check it out some day.
00:43:48 <num_tenho> num tenho nick
00:43:58 <clausen> haha
00:44:03 <clausen> :)
00:44:23 <flippo> I counted 20,000 executable lines of C, and some bison.
00:44:26 <num_tenho> do you know where i can find small, well written haskell sources?
00:44:52 <clausen> num_tenho: I used the prelude / standard library to learn
00:44:55 <clausen> in hugs
00:45:04 <flippo> num_tenho: the prelude is great for that
00:45:44 <num_tenho> yes, i know the predule and the libraries very well. now i wanted more code to examine!
00:46:03 <clausen> I don't know of any other well written haskell code :(
00:46:25 <flippo> num_tenho: oh, let me know if you find any
00:46:26 <clausen> (that said, I haven't looked very hard)
00:46:37 <clausen> num_tenho: vc é de onde?  portugal?
00:46:42 <num_tenho> ok
00:46:45 <num_tenho> portugal
00:46:53 <clausen> qual cidade?
00:48:27 <flippo> num_tenho: there are good examples in this book I'm reading http://www.iro.umontreal.ca/~lapalme/AlgoFP/code.html
00:52:36 <num_tenho> thanks flippo
01:30:24 * flippo hugs hugs
05:17:36 * num_tenho is away: I'm busy
07:48:39 <shapr> whee
07:49:47 <esap> whee. Columbia blew up. Big news event.
07:49:52 <shapr> eh?
07:50:05 <esap> the space shuttle
07:50:33 <shapr> :-(((((
07:50:40 <radix> #columbia is discussion
07:50:44 <radix> lots of idiots around, though
07:51:57 <Smerdyakov> I think the fact that it's viewed as a bigger news event than effects of US imperialist policy going on yearround is interesting.
07:52:21 <radix> Why?
07:52:34 <radix> imperialism is a constant, constants don't make good news events
07:53:23 <shapr> the space program is a source of hope for me
07:53:29 <radix> indeed.
07:53:35 <Smerdyakov> shapr, how so?
07:53:47 <radix> Smerdyakov: Escape :-)
07:54:08 <shapr> I may not get off this planet, but I hope my children will, or my grandchildren..
07:54:24 <Smerdyakov> Why not focus on making the planet a better place first?
07:54:37 <shapr> I want to explore.
07:54:51 <Smerdyakov> Justify your right to explore and we can talk...
07:55:00 <shapr> to seek out new life forms and new civilizations
07:55:06 <shapr> to boldly go where no one has gone before
07:55:07 <radix> !??
07:55:31 <shapr> Smerdyakov: I've justified it to myself, and that's all I need.
07:55:39 <radix> Smerdyakov: What, do you think it's immoral to explore, or something?
07:55:54 <radix> why would it need justification?
07:56:05 <Smerdyakov> I think it's immoral to take advantage of extraneous leisure time granted to you at random, at the expense of most of the world's population.
07:56:15 <radix> Ah.
07:56:18 <shapr> why are you on IRC?
07:56:37 <shapr> if you really followed that to its end, you wouldn't even have time to tell me that.
07:56:39 <radix> Justify your right to IRC and we can talk :)
07:56:39 <Smerdyakov> Immorality
07:56:57 <shapr> don't expect me to live up to standards that you don't live up to :-)
07:57:46 <liiwi> oh shapr
07:57:58 <liiwi> you'll have to read http://jpzr.com/finland/
07:58:03 <shapr> uh oh
07:58:10 * shapr looks
07:58:13 <shapr> hi liiwi!
07:58:17 <liiwi> hi hi!
07:58:20 <rublik> :)
08:00:01 <shapr> this guy has a real chip on his shoulder
08:00:08 <liiwi> heh
08:00:54 <shapr> I think this guy is lame.
08:01:14 <shapr> truly lame
08:01:32 <shapr> most of his information does not match with my experience of living in Tornio for three years.
08:04:04 <shapr> liiwi: most people suck, in any country, the secret is finding the ones that don't, wherever you are
08:04:06 <liiwi> someone wrote response to that but it's really a sucker punch
08:04:41 <liiwi> shapr: I would say that visible minority sucks anywhere.
08:04:41 <shapr> one thing I discovered in .fi is that finland is not a western culture.
08:05:10 <shapr> the "runtime system" of finnish culture is implemented in a totally non-western way
08:05:40 <shapr> so if someone expects anglo-saxon basics in the culture, they won't be found
08:05:50 <liiwi> we grew from small tribes
08:06:05 <liiwi> that were the base even so far as early this centhury
08:06:10 <liiwi> erm, last.
08:06:15 <shapr> imho, it's important to try to understand a culture for itself, not for how it relates to the culture someone comes from
08:06:25 <shapr> yes, the tribal structure is still strong in Tornio
08:06:36 <shapr> the concept of "squirrel skins" is still very strong
08:06:55 <liiwi> while swedes etc. were more like one big kingdom
08:06:56 <shapr> favors and barter have more value than money
08:07:21 <liiwi> and they say we're not social :P
08:07:34 <shapr> it's just a different form of social
08:08:13 <shapr> ime, the tribal nature means that it's hard to get into the social circle, but once you're in, you're really in.
08:09:01 <liiwi> it also gives longer view
08:09:16 <shapr> ?
08:09:45 <liiwi> you can't just take off and say 'so long suckers'
08:10:26 <liiwi> these days it seems that people have problems thinking further than tomorrow
08:10:56 <shapr> I agree
08:11:19 <shapr> the tribal structure gives stronger connections, harder to make, harder to break
08:11:39 <liiwi> and anything you do affects on the wellbeing of your offspring.
08:12:14 <shapr> I think you'd find matching structures in the african american culture of the southeast US.
08:12:35 <shapr> I think the guy who wrote that article was trying to fit finnish culture into a box he had already made for it.
08:12:35 <liiwi> hmm
08:13:02 <liiwi> I suspect he could travel to sahara and complain about it being a boring and dusty place :P
08:13:06 <shapr> heh
08:13:29 <shapr> I think that guy will have trouble dealing with any culture that isn't closely related to his own.
08:16:34 <shapr> liiwi: tried any haskell lately? :-)
08:16:40 * shapr evangelizes freely
08:16:55 <liiwi> still wrestling with da big snake
08:17:05 <shapr> it's a good language to learn
08:17:17 <shapr> I got some Python contract work yesterday.
08:17:20 <liiwi> I'm having motivation problems doing about anything
08:17:24 <liiwi> yay!
08:17:37 <shapr> I'd suggest writing stuff to help automate whatever you do everyday
08:18:01 <shapr> no matter how hackist your solutions may be at first, everytime you write something, you learn a little more.
08:19:09 <liiwi> that would mean re-implementing few big things
08:20:21 <shapr> are there small things you can write to automate tasks?
08:20:31 <shapr> or maybe stuff you can plug into your existing solution?
08:21:03 <liiwi> nah, large, crappy applications that need idiotic glue to work
08:21:30 <shapr> suckage
08:46:25 <flippo> I'd love to wrap some java as haskell.  Like jython, but jaskell.
08:46:45 <shapr> there's some of that available
08:46:53 <shapr> one of the Simons wrote a bridge
08:46:56 <shapr> as did Ashley Yakeley
08:47:00 <flippo> shapr: I had a feeling there would be
08:47:08 <shapr> there was even a java bytecode backend for GHC at one point
08:47:42 <shapr> I think the downside of the bridges is that they're both using JNI calls 
08:47:48 <shapr> so iirc, one runs on win32, and one on linux
08:47:55 <flippo> I'm fond of hugs at the moment because of how small it is.  
08:48:04 <flippo> I assume wrapping C is not too difficult
08:48:05 <shapr> yup, hugs runs on sharp zaurus even
08:48:18 <shapr> I'd like to have a sharp zaurus for that reason alone :-)
08:48:36 <shapr> typing haskell into my palm keyboard and then taking it home just isn't the same :-/
08:49:00 <flippo> I counted only 20,000 executable lines of C code in hugs (for the essential bits)
08:49:13 <shapr> C calls/wrapping happens with the Foreign Function Interface (aka the FFI)
08:49:23 <flippo> ah
08:49:37 <shapr> both hugs and ghc support the FFI 
08:49:46 <shapr> not sure about NHC or Helium
08:51:22 <shapr> there's also c2hs, green-card, hdirect, and a few other tools for easing the C to Haskell process
08:51:38 <Smerdyakov> SML/NJ has a very nice FFI.
08:51:49 <Smerdyakov> It encodes the full C type system within ML =)
08:52:03 <shapr> yah, something similar in the Haskell FFI
08:52:17 <shapr> CDouble, Word32, Int8, etc etc
08:53:06 <Smerdyakov> Does it have types for arrays of known size?
08:54:20 <shapr> er, what do you mean exactly?
08:54:52 <shapr> if you mean contiguous in-memory arrays of Word8, CDouble, etc, then yes.
08:55:07 <shapr> In fact, you don't need the FFI to use those
08:55:13 <Smerdyakov> I mean a Haskell type to represent a C array of known size.
08:55:37 <shapr> separate types for array of size 1, size 2, etc?
08:55:41 <Smerdyakov> Yes
08:55:43 <shapr> I haven't seen anything like that.
08:55:45 <Smerdyakov> HA
08:55:49 <shapr> ?
08:55:55 <Smerdyakov> SML/NJ NLFFI has that ;)
08:55:58 <shapr> ok
08:56:06 <shapr> I'm happy for you :-)
08:56:46 <shapr> you could read up on the Haskell FFI and compare it to the SML FFI
08:56:51 <shapr> I'd be interested in reading a summary.
08:57:56 <Smerdyakov> There is a paper by Mathias Blume on the NLFFI.
08:58:31 <shapr> If I start learning SML, I'll read it.
09:04:12 <Janni> hellas!
09:06:06 <shapr> y0 y0
09:49:25 * shapr blinks
09:54:21 * esap tries to understand category theory.
09:54:44 <shapr> category theory doesn't look difficult, just not very definitive
09:54:50 <shapr> hard to pin down
09:55:57 <esap> Well it is not difficult as such. The problems come when you try to use it for something.
09:56:47 <esap> For example, I've been trying to find a good way to write unification algorithm for arbitrary diagrams of a category. Then you get problems.
09:57:27 <esap> I found I can't even seem to find a good representation for those diagrams.
09:59:17 <esap> There are lots of theorems of the form "if your category has terminal object and pullbacks, then it has finite limits". But they're too high level; I can't deduce how to get a representation for categories with finite limits based on that.
10:20:10 <shapr> I've read that category theory is "a category of everything" making it difficult to apply.
10:20:52 <shapr> er, "a theory of everything"
10:21:02 <shapr> I shouldn't type while being distracted.
10:50:04 <esap> yes, category theory is very abstract.
10:51:07 <esap> It generalizes most of the mathematics in one formalism. In this way, it's like set theory (except that it's cleaner and simpler).
10:51:59 <lament> All of math is very abstract :)
10:52:36 <lament> If people were taught category theory in primary school, it'd be second nature for them
10:52:42 <esap> heh, well even more abstract. Category theory borders on actually saying very little.
11:16:57 <shapr> SyntaxPolice: hey, two questions... we need a name, and a cvs tree for your Haskell Lib database
11:37:33 <shapr> hi dark 
11:37:37 <dark> Hello :)
11:37:40 <shapr> what's up?
11:40:03 <dark> I've alternately been reading about the space shuttle crash and cursing my flaky net connection.
11:40:18 <shapr> ah
11:40:26 <shapr> have they found any cause yet?
11:41:11 <dark> Not as far as I know.
11:41:22 <dark> Of course there's endless amounts of speculation, as well as blind assumptions.
11:41:31 <liiwi> cablerot
11:41:32 <shapr> standard stuff
11:42:34 <dark> I'm getting very annoyed at the repeated comparison with commercial airline safety figures.
11:45:40 <liiwi> oh dark, you should read http://jpzr.com/finland/
11:50:12 <shapr> ya know... I really wish I could tell a bunch of parsec combinators to spit me out a random bit of text that could actually satisfy them
11:50:20 <shapr> would be nice to run them in reverse
11:50:26 <whee> heh
11:50:47 <shapr> I could probably hack that together with QuickCheck...
11:50:59 <Smerdyakov> That shouldn't be hard to do, if you're hardy enough to rewrite it a bit.
11:51:33 <shapr> I think I'll just use the working input from my unit tests to figure out what I did wrong.
11:52:18 * shapr figures out the problem
11:53:27 <dark> shapr: Hmm... I think there's a Debian package that does that.  But it's not in Haskell :)
11:53:37 <whee> I should learn QuickCheck sometime
11:53:41 <dark> liiwi: Heh, satellite evidence showing that Finland is at the EDGE of Europe!!
11:53:43 <shapr> silly question, does the tick at the end of something like "function_name'" have a special meaning in Haskell?
11:53:50 <dark> liiwi: All this time I thought it was between France and Switzerland.
11:53:54 <shapr> whee: QuickCheck r0xx0rs
11:54:02 <dark> shapr: No, only by convention.
11:54:07 <liiwi> dark: there is the mysterious lack of mountains also!
11:54:08 <shapr> what's the convention?
11:54:08 <whee> time to start reading docs on it I guess
11:54:18 <shapr> just a rewritten version of the original function?
11:54:19 <dark> shapr: That foo' is somehow related to foo :)
11:54:36 <dark> shapr: I think it's the mathematician's version of writing foo_
11:54:43 <shapr> hrm
11:58:55 <shapr> ah, I am beginning to realize the power of combinators
11:59:40 <whee> hrmf, how can I use QuickCheck from ghci?
12:00:03 <shapr> whee: you using emacs + haskell-mode ?
12:00:11 <whee> vim, of course :)
12:00:23 <shapr> oh...
12:01:04 <shapr> http://kungens.kemi.fi/~shae/src/haskell/ProtoQuickCheck.lhs
12:01:30 <shapr> whee: the QC paper tells you how to use it from inside ghci
12:01:37 <shapr> just "quickCheck prop_Foo"
12:01:52 <whee> <interactive>:1: Variable not in scope: `quickCheck'
12:02:04 <whee> I've tried adding the QuickCheck module with :module but it can't find it
12:02:06 <shapr> have you imported QuickCheck?
12:02:19 <shapr> it's -package util I think
12:02:59 <whee> ah, well that's not going to happen :\
12:03:04 <shapr> why?
12:03:11 <whee> Loading package util ... linking ... not found: ___stginit_SystemziConsoleziReadline_
12:03:11 <whee> zsh: abort (core dumped)  ghci -package util
12:03:12 <shapr> :set -package util
12:03:16 <shapr> yuck
12:03:28 <shapr> in that case, download the QuickCheck source from the QC homepage
12:03:31 <shapr> that should still work
12:05:05 <whee> giving up here, heh
12:05:11 <shapr> ok
12:05:22 <whee> nothing ever seems to work with ghc and OS X :\
12:05:26 <shapr> :-(
12:06:03 <dark> liiwi: Lots of typically Finnish language mistakes in this article :)
12:07:41 <shapr> man, I wish there were a Parsec users list
12:07:52 <dark> shapr: Set one up? :)
12:08:07 <shapr> might be a good idea
12:08:25 <shapr> I won't even think of that very hard until the Haskell Library Listing stuff is working
12:08:41 <shapr> I should probably add that to an available cvs tree somewhere...
12:08:58 <whee> the what now?
12:09:31 <shapr> huh?
12:09:42 <whee> what's the Haskell Library Listing
12:09:53 <shapr> I won't start anything else until http://shapr.homelinux.net/ is worth using
12:10:28 <whee> hmmm, now I'm tempted to beat you to writing that ;)
12:10:35 <shapr> writing what?
12:10:43 <whee> whatever it takes to get that working
12:10:55 <shapr> well, it sort of works
12:11:00 <shapr> it just needs more features
12:11:15 <liiwi> dark: even when polish does not have much to do with finnish
12:11:21 <shapr> hm, it's pissy today... I wonder why.
12:11:37 <shapr> whee: the "see the list" link was working yesterday...
12:11:49 <whee> yeah that doesn't seem to work
12:12:05 <shapr> I'll fix it, just a moment..
12:16:34 <shapr> ok, fixed
12:19:08 <shapr> two features I want to see before that's ready to announce on the mailing lists are 1) full text searching and 2) "edit this entry" link for every entry
12:20:32 <shapr> whee: have you seen python's parnassus website?
12:20:36 <shapr> that's what I'd really like...
12:21:13 <shapr> I'm beginning to figure out this whole "domain specific embedded language" idea
12:21:16 <shapr> it's very spiffy
12:22:42 <shapr> on a random note, I'd like to hear from anyone who wants to time compile times for haddock, happy, and HaXml on their machine.
12:24:28 <whee> hmm
12:24:35 <whee> where's python paranassus's site?
12:24:44 <shapr> http://www.vex.net/parnassus/
12:24:57 <shapr> I think I could get source for that site, but I really want something written in Haskell
12:24:57 <whee> also I'm definately ripping off your idea and implementing my own version of this :)
12:25:06 <shapr> not my idea, credit goes to SyntaxPolice 
12:25:09 <whee> not in haskell, though
12:25:14 <shapr> :-(
12:25:20 <shapr> you want the source I already have?
12:25:22 <whee> I need an excuse to learn mnesia
12:25:25 <shapr> oh
12:25:27 <whee> and this looks like a great excuse
12:25:33 <whee> (mnesia being the erlang database)
12:25:34 <shapr> mnesia the scheme assembler?
12:25:36 <shapr> oh, that one
12:26:13 <whee> so what's so special about this parnassus site
12:26:17 <dark> " Finns live in illusory reality, where for example they consider themselves to be part of Swedish culture and history. They often say: "we were part of Sweden for several hundreds of years" as if it would had been some union of equals like England and Scotland in Great Britain."
12:26:23 <dark> This person has not seen Braveheart :-)
12:26:54 <shapr> whee: parnassus is written in python, has buttons for "this is a dead link" "update record" that kind of stuff.
12:27:20 <whee> hmm
12:27:25 <shapr> I guess I could use freshmeat.net for Haskell applications, but I'm really interested in collecting links to any sort of Haskell sources that do something interesting.
12:27:37 <whee> seems easy enough to implement
12:28:06 <whee> doesn't appear to handle dependencies in any form though
12:28:17 <shapr> would probably be easier if I could get hold of a decent postgresql binding for Haskell
12:28:30 <shapr> the entry form?
12:28:48 <shapr> just writes to file
12:28:50 <Smerdyakov> Learn one of these FFI's already, shapr!
12:28:57 <whee> hah
12:28:59 <shapr> Smerdyakov: bah humbug
12:29:01 <whee> so all of this is file based?
12:29:06 <shapr> yah, so far
12:29:14 <whee> that might be kind of slow
12:29:42 <shapr> the library listing is static html that's generated 
12:29:47 <shapr> so it should be fast enough
12:29:53 <shapr> input doesn't need to be extra speedy.
12:30:16 <whee> depending on what features you implement, I guess
12:30:35 <shapr> I just want something that can be community supported
12:30:48 <shapr> so a library author can keep up their own records
12:30:51 <shapr> if they want to
12:31:24 <Smerdyakov> Writing a functional PostgreSQL binding is completely trivial with a C FFI.
12:31:32 <shapr> Smerdyakov: then do it
12:31:34 <Smerdyakov> There is no valid reason for you to spend this long whining about it instead of doing it :P
12:31:41 <Smerdyakov> I HAVE done it, for SML/NJ.
12:31:41 <whee> haha
12:31:50 <Smerdyakov> I don't really care about your personal project at the moment. :P
12:31:50 <shapr> Smerdyakov: well, do it for Haskell then.
12:32:14 <shapr> ok, after I'm done with rfc822.hs
12:32:23 <shapr> which probably won't be too long
12:34:07 <steele> shapr: did you try the postgres binding in HToolkit?
12:34:20 <shapr> no, I wasn't able to get HToolkit to build.
12:34:34 <shapr> I'll update the cvs tree and try it right now.
12:35:23 <shapr> what's the usual way to build config.mk
12:35:24 <shapr> ?
12:36:40 <steele> it's created by configure
12:37:08 <shapr> ah
12:37:24 <shapr> autoconf doesn't like something about that tree
12:37:28 <shapr> steele: have you tried HToolkit?
12:37:32 <shapr> does it build for you?
12:37:45 <steele> i'm trying just now
12:38:04 <steele> the gui part built some days ago
12:38:21 <shapr> you must know something I don't :-)
12:38:38 <shapr> have you succeeded in running autoconf?
12:48:31 * shapr tries to figure out how to build "string"{m,n} parsers in Parsec
12:55:27 <shapr> there must be a simple solution to this...
12:56:04 <shapr> whee: hey, you've used Parsec, any idea how to build pattern{max,min} matchers?
12:57:49 <whee> no clue, hmm
12:58:02 <shapr> oh, I think know how!
12:58:03 * shapr bounces
12:58:07 <whee> have a look at many and man1 mayube?
12:58:10 <whee> maybe, even :|
13:06:28 <shapr> fromMtoN p = (foldr (>>=) (replicate p m)) >>= (foldr <|> (replicate p (m - n)))
13:06:32 <shapr> does that look sane?
13:07:27 * shapr runs some unit tests
13:08:24 <shapr> what does mzero do?
13:10:00 <Heffalump> it's generally used to indicate failure of some kind
13:10:05 <shapr> aha
13:10:09 <shapr> that makes more sense
13:10:16 <Heffalump> mzero >>= foo = mzero
13:10:22 <shapr> that's odd..
13:10:24 <Heffalump> foo >>= (\_ -> mzero) = mzero
13:10:37 <shapr> maybe I am confused..
13:10:41 <shapr> choice ps           = foldr (<|>) mzero ps
13:10:53 <shapr> that tries each parser in ps in order
13:11:21 <shapr> kind of like a monadic or, I think
13:11:56 <shapr> does my fromMtoN function look correct?
13:14:35 <shapr> hm, how does Control.Monad.sequence work?
13:14:56 <shapr> is it like "foldr1 (>>=) [lots of monads]" ?
13:16:41 <shapr> hi jagular 
13:17:07 <jagular> hello..
13:17:33 * shapr suddenly understands Control.Monad.sequence
13:17:36 <shapr> wow
13:17:39 <shapr> neat
13:18:06 <shapr> it really is sort of like foldr1 (>>=) [list of monads]
13:18:21 <shapr> ah, sequence_ is the (>>) version, that's exactly what I need here.
13:18:25 <shapr> mmm, monads kick ass
13:19:47 <shapr> no wait, maybe sequence_ isn't what I need ...
13:19:53 * shapr is confused
13:22:05 <shapr> what does mplus do?
13:22:45 <shapr> mzero is used to signify failure...
13:22:51 <shapr> what's mplus used to signify or do?
13:27:41 <shapr> oh, I think I have a solution.
14:00:39 <steele> sharp: the postgres binding works here now, i can do some simple queries
14:00:59 <steele> sharp: but the api is very low-level
14:02:35 <shapr> how did you build it?
14:02:48 <shapr> my autoconf barfed
14:02:59 <steele> which version did you use?
14:03:08 <shapr> Version: 2.57-2
14:03:32 <shapr> what did you use?
14:03:47 <steele> 2.13
14:03:50 <shapr> if I could do even simple queries, I'd like that.
14:03:52 <shapr> hm
14:04:00 <steele> i can send you the configure script
14:04:05 <shapr> aha, I can install 2.13
14:05:59 <shapr> hrm
14:06:10 <shapr> ok, send me the configure script? :-)
14:06:48 <shapr> thanks :-)
14:16:44 <shapr> I think I've found the problem
14:16:51 <shapr> debian/unstable uses autoconf2.50
14:17:10 <shapr> the configure.in files need to specify an AC_PREREQ directive (whatever that is)
14:17:32 <shapr> does anyone know how I can add an AC_PREREQ directive that requests autoconf2.13 ?
14:28:18 <shapr> hmm, the HToolkit page says it works with autoconf 2.53
14:29:32 <shapr> w00!
14:29:34 <shapr> I fixed it!
14:30:06 <steele> there were some problems with the build order here
14:31:51 <shapr> hrm, what's up with catalog/postgres.h ?
14:32:40 <steele> export CPPFLAGS=/usr/include/postgresql/server ?
14:33:37 <steele> i mean, CPPFLAGS=-I..
14:33:44 <shapr> right, I just figured that out :-)
14:33:45 <shapr> thanks 
14:34:27 <shapr> how did you change the build order?
14:36:04 <shapr> HSQL.hsc: In function `main':
14:36:05 <shapr> HSQL.hsc:227: `ZPBITOID' undeclared (first use in this function)
14:36:08 <shapr> what does that mean?
14:36:42 <steele> it's called BITOID in my version of postgres, seems like it's the same for yours
14:36:43 <shapr> I figured out that I can add "AC_PREREQ(2.53)" to my configure.in to fix the autoconf problem
14:36:50 * shapr edits
14:38:20 <shapr> hm, it seems to want the Graphics stuff?
14:38:22 <steele> the next thing here was: failed to load interface for `Graphics.Data.Geometry'
14:38:29 <shapr> yes, exactly
14:38:55 <steele> i build the Graphics.Data.Geometry manually before the Database stuff
14:38:57 <shapr> you fixed quite a few things in order to get it to work :-)
14:39:00 <steele> make -n
14:39:01 <shapr> oh, ok..
14:39:05 <shapr> what's -n do?
14:39:30 <shapr> make -n failed
14:39:32 <steele> just show what it would do
14:39:32 <shapr> I'm trying make -k
14:40:18 <shapr> yay, stuff is compiling!
14:40:34 <shapr> it finished!
14:40:35 <shapr> w00
14:41:01 <shapr> I hope make install won't screw with GHC...
14:42:42 <steele> we should send him a patch if we find a clean fix for the dependency problem
14:44:50 <shapr> truly
14:45:13 <shapr> I posted the autoconf fix
14:45:24 <shapr> as a comment to a closed bug report with the same problem..
14:45:31 <shapr> I'll send it to him via email...
14:50:01 <shapr> Dominic Steinitz posted to the libraries list about putting HaskellDB on top of HToolkit.
14:50:05 <shapr> I'd very much like that.
14:51:40 <shapr> is there some way to graph out the dependencies in a Makefile?
15:09:52 <shapr> sadly, the haddock docs don't tell me what these arguments are
15:10:00 <shapr> my postgresql database is on a different host
15:11:38 <steele> the first argument is the host, last is password
15:11:41 <shapr> ah
15:11:42 <shapr> excellent
15:12:39 <shapr> hrm
15:12:47 <shapr> I get :phase `E' failed (exitcode = 
15:12:47 <shapr> Process ghci segmentation fault
15:12:55 <shapr> that doesn't sound nice.
15:14:16 <shapr> steele: are you able to successfully query a database?
15:15:15 <steele> i get "unknown symbol `PQfmod'" with ghci, but it works with ghc
15:15:25 <shapr> ok, I'll try it there.
15:17:04 <shapr> yay!
15:17:08 <shapr> it even works in ghci for me
15:17:51 <clausen> oi num_tenho
15:18:02 <shapr> I can query postgres! w00!
15:18:22 <shapr> steele: this may be a low level interface, but it's what I'm used to using in Java and other language of equal fun.
15:21:03 <steele> shapr: it's ok, but something like HaskellDB would be nicer =)
15:21:11 <shapr> truly
15:21:25 <shapr> did you see what Dominic said about putting HaskellDB on top of HToolkit?
15:21:47 <steele> shapr: did you do anything for getting it to work with ghci?
15:21:57 <steele> yes
15:22:02 <shapr> it works for me.
15:22:12 <shapr> I just had to give it the correct parameters
15:22:13 <steele> anything special i mean
15:22:21 <shapr> it blows up if I give it incorrect params
15:22:28 <shapr> but if everything is correct, it works fine.
15:22:36 <shapr> *Main> main
15:22:36 <shapr> phase `C' failed (exitcode = 
15:22:36 <shapr> Process ghci segmentation fault
15:22:37 <steele> -package HToolkit or anything else?
15:22:47 <shapr> that's when I give it an incorrect host/name/db/pasword
15:23:00 <shapr> after that, it works fine.
15:23:08 <shapr> maybe you have a stale .o file in that dir?
15:23:25 <shapr> sometimes I have to erase the matching .o files to load a Haskell source file in GHCi
15:23:46 <shapr> for example, this happened to me earlier today:
15:23:50 <shapr> /home/shae/src/haskell/libraries/RunTestDots.o: unknown symbol `__stginit_HUnit'
15:24:21 <shapr> that's because I used ghc --make on a full program that imported RunTestDots.hs
15:24:35 <shapr> I had to erase the .o file, and then ghci was happy again.
15:28:27 * shapr looks at HaskellDB
15:30:12 <shapr> I remember someone added MySQL support to HaskellDB ... anyone remember who did that?
15:30:51 <shapr> seems to have been Sigbjorn Finne
15:36:53 <shapr> ah well, back to RFC822.hs
15:38:18 <num_tenho> RFC822.hs? 
15:38:38 <shapr> I'm writing an rfc822 parser with Parsec
15:38:54 <shapr> I'm beginning to understand some of the advantages of using combinators
15:39:13 <shapr> I think I'm about 75% finished
15:39:23 <shapr> but I've gotten distracting trying to find some more general solutions
15:39:35 <num_tenho> I'm currently studying parsers + haskell, that might be interesting... parsec?
15:39:56 <shapr> http://www.cs.uu.nl/~daan/
15:40:10 <shapr> are you studying them for school?
15:40:40 <num_tenho> yes, for college. still introductory stuff
15:40:57 <shapr> at this moment, I'm trying to write a fromMtoN combinator
15:41:14 <shapr> that should work like "foo"{m,n} in regeps
15:41:16 <shapr> regexps
15:41:22 <num_tenho> whose this link you gave me?
15:41:30 <shapr> that's Daan Leijen
15:41:32 <shapr> he wrote Parsec
15:41:42 <shapr> if you look at the left of the page, you'll see Parsec
15:41:49 <shapr> click on that, you get to the directions
15:41:52 <shapr> Parsec come with GHC5
15:42:07 <shapr> "comes with"
15:42:10 <num_tenho> yep. i'll check it out tonight
15:42:13 <shapr> sheez, I'm losing my english today.
15:43:06 <num_tenho> it's not my first language, i won't censure you for your english...
15:43:17 <shapr> english is my first language :-)
15:43:21 <shapr> I should censure myself.
15:43:27 <num_tenho> i just did!
15:43:30 <num_tenho> :-)
15:43:42 <shapr> oh, right.
15:43:44 <shapr> good point!
15:43:52 <shapr> I've been learning swedish, and it's confusing me.
15:44:05 <shapr> which university do you go to?
15:44:19 <num_tenho> U Minho @ Portugal
15:44:37 <shapr> haven't heard of it, but then I don't know much about Portugal
15:45:02 <shapr> I think there are a few portuguese Haskell users who show up here.
15:45:08 <clausen> num_tenho: btw, are pt universities good?
15:45:15 <clausen> num_tenho: should I think about doing a phd there?
15:45:18 <clausen> (I speak portuguese :)
15:45:25 <num_tenho> no, not really
15:45:34 <clausen> why?
15:46:01 <num_tenho> Whenever i think of doing a PhD, i think of somewhere abroad
15:46:18 <clausen> why?
15:46:31 <clausen> I guess it all depends on supervisors
15:46:35 <clausen> and $$$
15:46:42 <num_tenho> Portuguese universities are decent, but they have little international significance
15:46:45 <num_tenho> yes
15:46:46 <clausen> is it possible for foreigners to get scholarships?
15:47:06 <clausen> (scholarship == bolsa)
15:47:20 <clausen> (hmmm, you're probably looking also, and hence know the word also ;)
15:47:30 <num_tenho> we are the poorest country in the EU: if you want moneym think of somewhere else
15:47:40 <clausen> really?!
15:47:43 * clausen surprised
15:48:01 * clausen thought italy would be poorer
15:48:12 <clausen> and greece
15:48:19 * clausen ignorant about european politics
15:48:20 <num_tenho> never! don't forget italy is in the G7
15:48:25 <clausen> yeah, but italy is big
15:48:53 <num_tenho> greece tries to compete with us for the last position, but we are currently winning
15:48:59 <clausen> hehe
15:49:20 <clausen> so, maybe I should learn spanish...?
15:49:24 <clausen> (should be really easy, right? :)
15:49:44 <num_tenho> what about learning english? that would serve you better...
15:49:56 <clausen> english is my native language
15:50:22 <num_tenho> i know, me being ironic
15:50:26 <clausen> :P
15:51:01 <Heffalump> num_tenho: you do CS?
15:51:07 <num_tenho> yep
15:51:19 <Heffalump> is Joao Saraiva one of your lecturers?
15:51:30 <num_tenho> Yes and no...
15:51:38 * clausen hands Heffalump an ã
15:51:45 <num_tenho> I never had im as a teacher 
15:52:01 <num_tenho> but he works here. Are you @ Utrecht»
15:52:02 <num_tenho> ?
15:52:14 <Heffalump> no, Oxford
15:52:32 <num_tenho> Where do you know J Saraiva from?
15:52:33 <Heffalump> clausen: I'll only lose it again :-)
15:52:42 * shapr fights Parsec
15:53:34 <whee> hmmm
16:03:48 <num_tenho> what is the forall keyword used for? (or if you prefer where can i find doc about it?)
16:04:08 <shapr> aha, I win against Parsec! yay!
16:04:14 <Heffalump> it's not a keyword in Haskell 98
16:04:22 <num_tenho> yes i know
16:04:24 <Heffalump> because all types of top-level bindings are implicitly quantified with forall
16:04:24 <liiwi> yay!
16:04:34 * shapr cheers happily
16:04:36 * shapr happs cheerfully
16:05:00 <Heffalump> but you can use it for things like runST st = (forall s . ST s a) -> a
16:05:28 <Heffalump> i.e. runST takes something of type ST s a which can be used when s is of *any* type, and gives an a.
16:05:56 <shapr> steele: ah, I forget to mention those things in my email to HToolkit-users list, thanks for filling those in :-)
16:06:26 <num_tenho> Heffalump do you know where that is documented?
16:07:01 <Heffalump> num_tenho: I'm sure it's in the GHC docs somewhere, but I dunno where
16:07:07 <Heffalump> also in the paper about the ST monad
16:07:10 <liiwi> python's object model rocks the level it's exposed
16:07:23 <Heffalump> but I don't recall the reference immediately, check Simon Peyton-Jones' webpage
16:07:30 <num_tenho> ok thanks
16:08:37 <steele> shapr: didn't see your yet, i'm not subscribed to HToolkit-users just looking at the web interface
16:09:03 <steele> shapr: your mail, even. should go to bed =)
16:09:41 <shapr> steele: thanks for the help!
16:13:47 <shapr> steele: have you looked at HaskellDB sources to see how hard it would be to get rid of the need for TREX?
16:16:13 <shapr> any parsec users here?
16:16:21 <shapr> I've come up with an ugly solution to fromMtoN
16:16:37 <shapr> wondering if someone else could look at it and see if there's some obvious way to improve it.
16:21:38 <whee> shapr: I would if I weren't just getting started on ripping off your site ;)
16:23:00 <shapr> hah
16:23:05 <steele> shapr: i didn't look at HaskellDB yet.
16:23:25 <steele> whee: in erlang? you're using yaws?
16:23:37 <whee> steele: yes
16:49:04 <num_tenho> does anyone know if there is any formal reason for not being possible to use the same variable twice in a pattern matching? (for e.g. gcd x x = x )
16:49:48 <Smerdyakov> None that I can see!
16:50:15 <Smerdyakov> Just that your pattern could force type class constraints....
16:50:43 <Smerdyakov> Change one variable name and an irrefutable pattern becomes refutable.
16:51:11 <num_tenho> considering the variables have the same type...
16:51:26 <Smerdyakov> num_tenho, and...?
16:51:43 <num_tenho> i'm stuck. :-)
16:51:55 <Smerdyakov> Just use a guard
16:52:17 <whee> I've wondered about that one, myself
16:52:39 <num_tenho> (i would prefer to use patt match, but then i think i've been programming too much prolog)
16:52:45 <whee> in erlang doing something like f(X, X) -> X. will only match if both arguments are equal
16:52:46 <Heffalump> it depends what you expect to happen with repeated variables
16:53:27 <num_tenho> well, that is naturally intended to mean that both args are equal
16:53:44 <Heffalump> if you want gcd x x = ... to be shorthand for gcd x y | x==y = ..., then you make implementation more complicated and increase the chances of confusing types
16:53:56 <num_tenho> hmm. perhaps
16:54:11 <Heffalump> if the second x simply shadows the first x, that's really asking for silly mistakes so it's just banned outright
16:55:41 <num_tenho> yes, your right, it's too much "the prolog way", my question has been answered!
16:57:03 <Heffalump> gcd x x is what's known as a non-linear pattern; it's fairly normal for functional languages to ban them
16:57:27 <num_tenho> why is it called non-linear?
16:57:40 <Heffalump> a linear pattern is one where each variable occurs at most once
16:57:57 <num_tenho> that would be a quadratic pattern then?
16:58:00 <num_tenho> :-)
16:58:02 <Heffalump> :-)
16:58:10 <Heffalump> that confused me when I saw the name too
16:58:41 <Heffalump> sometimes in this kind of context linear means "appears exactly once", but here the set of variables that has to appear is just determined by what you can see in the pattern, so "at most once" is equivalent
17:00:21 <num_tenho> where did you learn these things? i want names and addresses!
17:01:46 <Heffalump> by reading papers, mostly
17:01:53 <Heffalump> I'm a postdoc, so I've been doing that for a while
17:03:03 <shapr> crap, this doesn't work :-(
17:03:13 <steele> whee: ah, erlang is where 'X=0, case Z of X -> "Z is 0"; _ -> "Z is not 0" end.' works. asked myself some time ago why i tried that in haskell/ml. ;)
17:03:49 <num_tenho> Heffalump: that helps explain why you know Saraiva...
17:04:53 <shapr> ah, maybe it does...
17:05:47 <Heffalump> num_tenho: yeah
17:06:11 <Heffalump> actually, I visited Braga a while ago (over 4 years now)
17:06:19 <num_tenho> Ponte de Lima?
17:07:00 <Heffalump> I don't remember precisely where - it was the third Advanced Functional Programming summer school, in a local monastery (of all things)
17:07:43 <num_tenho> there was something related to haskell happening there, Richard Bird has a photo in his site of himself in Ponte de Lima, so i suppose it must have been there
17:08:47 <Heffalump> no, that was an MPC, I think
17:08:53 <Heffalump> he didn't go to AFP
17:09:03 <num_tenho> Are those AFP summer schools awfully complicated? I'd like to do something programming-oriented in the summer...
17:09:06 <Heffalump> MPC = Mathematics of Program Construction
17:09:14 <Heffalump> well, they're only a week long
17:09:29 <Heffalump> but the 4th one was just last year, after the 3rd one being in 1998
17:09:38 <Heffalump> so they're not necessarily all that frequent
17:09:56 <num_tenho> hmmm. but does it get too complicated or not?
17:09:57 <Heffalump> They're aimed at about the level of a PhD student or a good undergraduate.
17:10:17 <Heffalump> where good = could go on to do a PhD, really
17:11:24 <num_tenho> hmmm, i don't know. i have good grades, but am not too confident of my haskellian apabilities
17:11:57 <num_tenho> perhaps i'll check the site to see if they have a program of what is done there.
17:15:12 <Heffalump> http://www.cs.uu.nl/~johanj/afp/afp4/
17:15:44 <shapr> yay, finally I have written atLeastM and fromMtoN combinators for Parsec.
17:16:25 <num_tenho> Heffalump: You must have met José Nuno Oliveira, then.
17:16:49 <liiwi> hmm, music has gotten slow.
17:17:05 <num_tenho> http://www.di.uminho.pt/~jno/
17:18:13 <Heffalump> yeah, though I don't really remember him
17:19:12 <num_tenho> hmmm. interesting professor. He tough me (us) all the anas catas and hylomorphisms
17:19:38 <num_tenho> i suppose you're familiar with that...?
17:20:07 <Heffalump> roughly, yeah
17:20:19 <Heffalump> Acid Rain theorem etc etc
17:21:38 <shapr> hi Binkley 
17:21:52 <Binkley> hello
17:22:04 <num_tenho> Heffalump: Is there anyone else working on the subject or is he the only one? (there is a theory here that says so...)
17:22:29 <Heffalump> no, quite a few other people
17:22:43 <Heffalump> not sure how many these days, actually
17:22:53 <Heffalump> but there's quite a lot of papers in the area
17:23:29 <num_tenho> the little he showed us actually looked quite interesting.
17:23:51 <num_tenho> perhaps a bit too far away from reality...
17:24:15 <Heffalump> well, my thesis was on that sort of thing, but a bit more applied than theoretical (though not much!)
17:25:39 <num_tenho> What was it's title?
17:26:06 <Heffalump> Higher-order matching for program transformation
17:26:38 <num_tenho> i suppose the thesis itself was equally abstract... :-)
17:27:24 <num_tenho> Where did you graduate?
17:27:31 <Heffalump> it was about automating the rule that says f (foldr ...) = foldr ...
17:27:38 <Heffalump> here (Oxford)
17:28:27 <num_tenho> how would you describe the course: more on the practical side / more on the theoretical side
17:28:41 <Heffalump> the undergraduate degree?
17:28:45 <num_tenho> yep
17:28:47 <Heffalump> more on the theoretical side
17:29:00 <Heffalump> (I didn't actually do that, my undergraduate degree is in Maths from another uni)
17:29:10 <Heffalump> But I teach some stuff on it now.
17:29:22 <num_tenho> hmmm. that's what i feared, mine is a bit on the practical side. 
17:29:41 <num_tenho> I would prefer it to be a bit more formal...
17:30:40 <num_tenho> f (foldr ...) = foldr ... ?
17:32:49 <Heffalump> have you seen the rule
17:33:00 <Heffalump> f (foldr g e xs) = foldr h e' xs
17:33:19 <Heffalump> if f e = e', and f (g x y) = h x (f y)
17:35:24 <num_tenho> nope. i'll copy paste it and analyse it later. A apropos of recursivity:
17:35:56 <num_tenho> Isn't it possible (at least theoretically)
17:36:20 <num_tenho> to make automatically make every recursive function /definition
17:36:28 <num_tenho> into an iterative one?
17:36:32 <Heffalump> no
17:36:36 <num_tenho> damn
17:36:47 <num_tenho> know why?
17:37:09 <Heffalump> I'm trying to think of a good example
17:37:21 <Heffalump> but in general it's only specific forms of recursion that can be automatically translated
17:37:24 <Heffalump> e.g. tail recursion
17:37:37 <num_tenho> that's what i was thinking of
17:38:12 <num_tenho> if you find an e.g. that counters my "theory" please say something!
17:39:02 <Heffalump> well, you could maintain an explicit stack and translate something that way
17:39:08 <Heffalump> so in theory you could do it
17:39:11 <Heffalump> but there'd be no point
17:39:50 <num_tenho> wouldn't there be an improvement in performance? 
17:40:36 <Heffalump> no, since the cost of recursion is the use of the stack
17:40:54 <num_tenho> there goes my theory
17:41:31 <Heffalump> if you can translate it /without/ a stack, e.g. tail recursion, then you get a big win
17:41:35 <Heffalump> and most compilers do this
18:38:42 <kawfee> is there a way to make the output of hugs print to a file?
18:38:55 <kawfee> so that whatever I type in hugs goes to a file
18:39:14 <shapr> you could write the code into a file first, and then load that file into hugs
18:39:22 <shapr> you might be able to use the unix command "tee" also
18:39:24 <shapr> not sure about that
18:39:34 <whee> shapr: _almost_ done my ripoff :)
18:39:50 <shapr> whee: go faster!
18:39:53 <whee> minus the categories, because I'm a lazy bastard
18:40:07 <shapr> well, I've written some very nifty Parsec code
18:41:03 <shapr> and steele helped me get HToolkit talking to postgresql
18:45:04 <kawfee> I know about script and typerscript
18:45:30 <kawfee> I thought there might be something similar to that
19:42:14 <whee> shapr: done :>
19:42:34 <whee> http://smaerty.ath.cx/wooo/
19:42:42 <whee> it may or may not die if you don't fill out all the fields, hehe
19:44:07 <whee> and I'm still too lazy to do anything complicated, although searching would take probably three more lines of code :\
19:50:28 <whee> and I broke it already :(
20:35:17 <kawfee> does haskell support postfix?
20:52:55 <kawfee> and I thought this channel was lively
20:53:09 <kawfee> don't you guys have better things to do than go out on a saturday night
21:03:08 <whee> I do!
21:03:10 <whee> :)
21:05:37 <kawfee> !
21:05:48 <kawfee> anyone here know anything about innermost and outermost evaluation?
21:05:57 <kawfee> I'm a little stuck with the concepts
21:06:21 <whee> eeh?
21:07:56 <kawfee> it's the different ways functions can be evaluated
21:26:46 <kawfee> if I had if p then q else r, how would I convert that to a case expression?
21:27:08 <kawfee> case (TRUE) of 
21:27:15 <kawfee> p -> q
21:27:25 <kawfee> _ -> r
21:27:29 <kawfee> is that right?
21:28:36 <whee> err, I don't think so
21:29:17 <whee> case p of true -> q\n _ -> r
21:29:30 <kawfee> \ ?
21:29:49 <whee> tried to fake a newline with \n :)
21:29:50 <kawfee> hrm
21:29:54 <kawfee> ahhh
21:30:00 <kawfee> ahh I see
21:30:01 <kawfee> thanks
21:34:07 <kawfee> do whitspaces count in a case statement?
21:36:09 <kawfee> this emacs addon doesn't work very well
21:36:15 <kawfee> it keeps indenting all my lines
21:36:19 <kawfee> in an odd way
21:36:26 <kawfee> am I doing something wrong?
21:36:36 <whee> yes, you're using emacs :)
21:36:48 <kawfee> bah
21:37:18 <kawfee> ERROR "hw2.lhs":1 - Syntax error in input (unexpected keyword "case")
21:37:28 <kawfee> grrr
21:37:34 <kawfee> > case collegeCode of 
21:37:37 <kawfee> what did I do wrong?
21:37:48 <whee> in what context?
21:37:57 <kawfee> lhs file
21:38:03 <whee> what's the line before that
21:38:04 <kawfee> trying to make a script with a case statement in it
21:38:07 <kawfee> ther isn't one
21:38:12 <kawfee> that's the first line
21:38:19 <whee> well that needs to be inside of a function then
21:38:25 <kawfee> what?
21:38:34 <kawfee> how can I define a case statement in an lhs?
21:38:47 <kawfee> Prelude>  case collegeCode of
21:38:47 <kawfee> ERROR - Syntax error in expression (unexpected end of input)
21:38:54 <kawfee> I can't do it outside of a script....
21:38:57 <whee> you can't just use a case statement outside of a function like that
21:39:01 <kawfee> and I can't do it inside one...
21:39:14 <kawfee> yeah you can
21:39:17 <kawfee> my prof did it
21:39:31 <whee> in actual source and not the interpreter?
21:39:46 <kawfee> he used an interpreter
21:39:51 <whee> then that's not the same
21:40:15 <kawfee> then how do I tell the interpreter it's not source?
21:40:42 <kawfee> I just want to check my rewrite of a case into an if
21:40:46 <kawfee> so I was going to code it up
21:40:58 <whee> just put it in a file and load it
21:41:07 <kawfee> that is what I was trying to do
21:41:14 <kawfee> dagg nabbit
21:41:25 <whee> f = case blah of ..
21:41:33 <kawfee> Reading file "hw2.lhs":
21:41:34 <kawfee> ERROR "hw2.lhs":6 - Empty script - perhaps you forgot the `>'s?
21:41:34 <kawfee> Prelude> 
21:41:42 <kawfee> oh
21:43:28 <kawfee> > a = case collegeCode of   
21:43:28 <kawfee> >    "E" -> "Nat Sci"  
21:43:35 <kawfee> it's complaining about collegeCode
21:43:42 <whee> is it defined somewhere?
21:43:46 <kawfee> no
21:43:59 <kawfee> how would I define it?
21:44:08 <whee> collegeCode = blah
21:44:17 <kawfee> then how would I use the case statement
21:44:32 <whee> a
21:45:17 <flippo> expandFunction collegeCode = case collegeCode of "E" -> "Nat Sci" ; "F" -> ...
21:45:19 <kawfee> ERROR "hw2.lhs":2 - Syntax error in input (unexpected `=')
21:46:51 <kawfee> > collegeCode = case collegeCode of   
21:46:51 <kawfee> >    "E" -> "Nat Sci"
21:46:53 <kawfee> how's that?
21:47:11 <kawfee> Main> collegeCode "E"
21:47:13 <whee> that's just defining a variable
21:47:17 <whee> not a function
21:47:17 <kawfee> then I tried the above and it complains
21:47:26 <whee> f c = case c of ...
21:47:28 <kawfee> hrm
21:53:46 <kawfee> so if I wanted to change the above I could do: if collegCode then if "E" then "Nat Sci" else if ...
21:53:58 <kawfee> for an if then else
21:56:00 <flippo> The stuff that comes before "if" or "case" is the stuff that is breaking.
