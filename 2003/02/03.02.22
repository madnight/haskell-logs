02:36:22 <ludde> Is there some set-minus function for lists?
02:40:56 <Marvin--> \\
02:44:49 <ludde> thanks
06:03:00 <Igloo> Why isn't the monomorphism restriction biting me here? let x c = c + 1 in (x 3, x 5) :: (Int, Integer)
06:03:48 <Igloo> Ah, it does if I make it a lambda abstraction; that makes sense as no computation is repeated without it
06:08:30 <esap> Hmm.. what was the reason for actually making lambda abstraction work differently than let in monomorphism restriction?
06:10:08 <Igloo> If you had x 3 repeated with the above then you would expect it to be evaluated multiple times
06:10:44 <Igloo> If it was of the form let x = E then you would expect E to be evaluated only once
06:11:01 <Igloo> But if you used x with 2 different types it would be evaluated twice
06:12:05 <esap> but is it necessary to actually evaluate things twice in either case? [would it work to "optimize" it to evaluate it only once?]
06:12:55 <Igloo> If it's a lambda abstraction then no work would be done, it's just for consistency
06:13:18 <Igloo> Oh, that might be wrong actually
06:13:51 <esap> I guess the reason for evaluting twice is that the semantics for different types might be different, and the result would differ as well?
06:13:52 <Igloo> I think if you have let x = \y -> y:[1..1000] then [1..1000] will stay around in memory whereas it wouldn't if y was an argument
06:13:59 <Igloo> Yup
06:17:53 <esap> ok, so in order to avoid reevaluating, you would have to evaluate first to "Int /\ Integer" then use different components in differently typed expressions. Might be hard in practise.
08:53:30 <esap> hmm.. is there some unwritten rule that all papers must have some direct area of application? I mean, I see a lot of papers termed like "doing X in reactive systems using Z", and the paper proper does not relate to reactive systems at all [but is more general]. Why would that be?
08:57:19 <dark> Maybe some funding rules?  University has $x million to spend on research related to reactive systems.
08:57:58 <esap> oh ok. If it's a precondition to being able to use that funding, then I understand it [but I still think it's a bad idea] :-)
08:58:09 <dark> Well I'm just speculating :)
08:58:49 <esap> Well I guess quite little research is independent of funding.
09:13:50 <Igloo> It might be to make it more likely to get into a journal
09:16:32 <esap> hmm.. interesting. maybe it's easier to understand these papers if they fix some interpretation for the mathematics :-)
09:24:07 * shapr bounces
09:27:03 <esap> hmm.. another question. What would be an understandable name for codata?
09:40:15 <jlouis> codata?
09:46:26 <esap> codata is a way of building looped data structures
09:47:06 <jlouis> aha, interesting
09:47:16 <jlouis> circular data structures?
09:47:21 <esap> yes
09:47:31 <jlouis> interesting indeed
09:47:48 <jlouis> I suppose you have a paper about it ;)
09:48:27 <esap> well one paper that discusses it is: http://citeseer.nj.nec.com/hughes96proving.html
09:49:22 <esap> another is: http://citeseer.nj.nec.com/240567.html, which even has it in the title :-)
09:51:54 <jlouis> heh, it is more that if someone has found 3 good articles i'll start by reading them instead of trying to dig through a bad one
09:53:16 <esap> yea, that's a good principle. Here's a third one: http://citeseer.nj.nec.com/telford97ensuring.html :-)
09:54:41 <jlouis> haha :)
09:56:09 * esap can also recommend other papers related to language design, lots of good ones around.
10:01:46 <esap> jlouis: see http://modeemi.fi/~esap/good-papers.bib
10:04:57 <jlouis> ;-)
10:05:02 <jlouis> looks good :)
10:06:55 <jlouis> @inproceedings{ filinski92recursion... good to know that my lecturer can write :)
10:08:27 <esap> whoa, filinski is your lecturer? Filinski wrote some of the good stuff about duality.
10:09:48 <jlouis> Yes, he runs quite a deal of semantics courses. His brain is fast though. You have to read to keep up with it
10:10:01 <jlouis> and some course in compiler theory
11:45:59 * shapr bounces more
11:47:35 * mgoetze growls more (at guilereadline)
11:48:28 <Stefan86_> any girls???
11:48:43 <whee> heh
11:48:45 <Smerdyakov> Sure, just add water.
11:48:54 <radixette> Hi, Stefan86!
11:48:58 <Stefan86_> hi
11:49:13 * shapr laughs
11:49:13 <Stefan86_> no girls??
11:49:24 <radixette> Stefan86_: Yes. Hi.
11:49:26 <mgoetze> Stefan86_: meine guete, was glaubst du eigentlich, wo du hier gelandet bist?
11:49:31 <shapr> Stefan86_: why do you want girls in #haskell? looking for sex with no side effects?
11:49:47 <radixette> shapr: HEH
11:49:50 <Stefan86_> wo ich hier gelandet bin???
11:49:57 <mgoetze> hm, sex with lazy evaluation might be fun
11:50:02 <shapr> um
11:50:03 <shapr> how so?
11:50:08 * shapr is soo afraid to hear this answer.
11:50:15 <radixette> mgoetze: argh.
11:50:15 <Stefan86_> i dont need girls for sex..i just looking for someone
11:50:36 <mgoetze> well, you could set it up so you can get the good parts exactly when you want it...
11:51:10 <shapr> mgoetze: I suspect the runtime requirements include a lot of other things
11:51:38 <shapr> aww
11:51:41 <whee> :(
11:51:43 <mgoetze> well, that was fascinating
11:51:54 <shapr> it was entertaining.
11:52:07 * mgoetze goes back to cursing guilereadline
11:52:40 <whee> dizzamn, they're really trying to get someone into the empty apartment across from me
11:53:01 <shapr> ?
11:53:20 <whee> three different people got tours today already
11:54:17 <shapr> whee: act like a nasty neighbor unless she's cute.
11:54:34 <whee> this one's a guy; I'd rather just avoid that.
11:54:35 <whee> heh
11:55:17 <whee> I should put my underwear on the outside and walk out with a box of crayons and a cd and start screaming "I CAN SEE THE COLOR"
11:55:38 * shapr laughs
11:55:51 <shapr> you could use M-x yow for the bad neighbor script.
12:02:52 * mgoetze ponders what kind of pizza to order
12:03:04 <whee> the kind with cheese
12:03:11 <whee> and now I want pizza :((
12:03:14 <mgoetze> oh, good idea
12:03:18 <mgoetze> any other suggestions?
12:03:28 <whee> I hear dough is also good to have with pizza
12:03:37 <whee> preferably baked in
12:03:47 <mgoetze> oh, hm, that sounds like some details about the construction process?
12:03:52 * mgoetze doesn't really bother with those...
12:03:53 <whee> D:
12:08:35 * mgoetze went for bacon, mincemeat, peppers and chili sauce
12:08:46 <whee> you forgot the cheese!
12:08:52 <whee> heh
12:09:45 <mgoetze> well, that's a "default" option :)
12:22:22 <shapr> y0 y0
12:22:24 <shapr> wassup?
12:22:28 <Arnia> Hey
12:22:53 <Arnia> I'm having problems with infix functions... is this a legal infix name? :/\:
12:23:25 <shapr> well, first of all, names that start with colons have some special something that I can't remember.
12:23:37 <shapr> I think that's right...
12:24:19 <Arnia> They're constructors... and I'm using them as such
12:24:48 <Arnia> I'm playing with a logic representation in Haskell.
12:31:35 <shapr> palomer: depends on what you mean by objective
12:32:26 <palomer> I don't know myself
12:32:28 <palomer> :o!
12:32:33 <palomer> started learning ocaml
12:32:40 <shapr> well, I can show you what Haskell can do, if you want.
12:32:55 <palomer> can it do everything ocaml can do?
12:33:11 <shapr> I don't know.
12:33:18 <shapr> I haven't learned ocaml.
12:33:25 <palomer> ok, so what can it do?
12:33:25 <whee> heh
12:33:29 <whee> it can, yes :P
12:33:35 <shapr> I know that ocaml compiles to faster code than Haskell
12:33:44 <radix> C can do everything OCaml can do
12:33:45 <radix> you should use C
12:33:50 * radix flees.
12:33:51 <shapr> I've heard that Haskell is more elegant than OCaml
12:34:04 <shapr> but I can't tell you from my own experience.
12:34:15 <whee> I'd have to agree with that one too
12:34:24 <shapr> whee: do you know both ocaml and haskell?
12:34:25 <palomer> how much more elegant?
12:34:32 <whee> shapr: yes
12:34:44 <shapr> whee: could you give a short comparison?
12:34:51 <whee> haskell's type system is a bit above ocaml's as well
12:35:25 <whee> derr uh, heh
12:35:34 <palomer> I looked at the great language shoot out, and it seems that ocaml is more concise
12:35:42 <Riastradh> Haskell's syntax, in my opinion, is -MUCH- more elegant than OCaml's.
12:35:48 <whee> ocaml's a lot faster, stricter, and easier to get used to
12:36:07 <whee> Riastradh: but it's tolerable if you redefine the syntax with camlp4, or use revised
12:36:10 <shapr> yes, I've heard ocaml is easier to deal with than Haskell.. for procedural programmers.
12:36:30 <whee> and the ocaml compiler actually works, whereas I have tons of problems with ghc :)
12:36:36 <shapr> I started learning Haskell because I wanted to get as much 'functional' as I could in one swell foop.
12:36:56 <shapr> that's another good point, the most famous Haskell compiler is not as portable as the ocaml compiler.
12:36:56 <palomer> hrm
12:37:00 <palomer> but haskell is slower
12:37:08 <palomer> is that because of the features?
12:37:11 <palomer> or is the compiler?
12:37:13 <shapr> GHC does work on Win32 and Linux, but not so well on MacOS X
12:37:24 <whee> palomer: a bit of both
12:38:04 <Riastradh> Saying 'X language is slower than Y language' is often rather silly; Stalin, for example, creates binaries from Scheme that are comparable to carefully written C programs.
12:38:05 <palomer> http://www.bagley.org/~doug/shootout/lang/ghc/
12:38:29 <palomer> http://www.bagley.org/~doug/shootout/lang/stalin/
12:38:45 <shapr> palomer: last time I got a GHC program from that shootout, the source was *old*
12:38:58 <whee> that site's not maintained anymore, anyway
12:39:23 <palomer> hrm
12:39:38 <Riastradh> The guy running it refused to update it when one of the GwydionDylan developers asked to have Dylan put onto it.
12:40:06 <shapr> I had to make many modifications to the source of the Echo.hs program to get it to run in the current version of GHC
12:40:27 <shapr> ohhh, they were using GHC 5.00.1
12:41:20 <palomer> that sounds pretty recent
12:41:35 <whee> most recent is 5.04.2
12:41:39 <palomer> and ocaml was the second fastest language!
12:42:17 <whee> I still see haskell as more useful if you're into theory, and ocaml for getting actual work done 
12:42:19 <shapr> palomer: if it's functional speed you want, ocaml is probably the best choice.
12:42:21 * whee ducks
12:42:26 <palomer> and it seems ocaml has a bigger standard library
12:42:34 <shapr> really?
12:42:37 <whee> no, it doesn't
12:42:42 <whee> ocaml's standard library is lacking
12:42:53 <palomer> for application
12:42:59 <palomer> like a graphics library
12:43:25 <whee> but half of ghc's library is monad crap, anyway. heh
12:43:28 <shapr> Haskell has a gtk1, gtk2, Tcl/Tk, wxWindows, win32, and some other toolkitbindings.
12:43:35 <shapr> hey, I like monads!
12:43:40 <whee> ocaml has the same batch of toolkits
12:43:44 <shapr> admittedly, I want to rewrite them all as arrows.
12:44:24 <shapr> palomer: well, if you decide to learn ocaml, come back and try Haskell sometime, I think you'll like it.
12:44:48 <palomer> This chapter presents the Graphics library, which is included in the distribution of the Objective CAML-language. This library is designed in such a way that it works identically under the main graphical interfaces of the most commonly used operating systems: Windows, MacOS, Unix with X-Windows.
12:45:05 <whee> palomer: that library is really low level; not too useful for most things
12:45:13 <palomer> ohmy
12:45:18 <palomer> I thought it would be like awt
12:45:18 <shapr> Htk works on all of those ;-)
12:45:22 <whee> but there are of course other bindings for real toolkits
12:45:29 <palomer> does haskell or ocaml have something similar to awt?
12:45:30 <whee> like opengl, tk, gtk, qt, whatever
12:45:44 <shapr> palomer: haskell has ObjectIO ported from Clean
12:45:45 <whee> and sdl and blah blah, the usual :)
12:45:49 <shapr> but it only works in win32 :-/
12:46:10 <shapr> there's a GUI project starting right now to write one
12:46:12 <palomer> by similar I mean cross platform
12:46:23 <palomer> shapr: for haskell?
12:46:23 <whee> gtk is decently cross platform
12:46:31 <shapr> palomer: yes, for haskell
12:46:46 <shapr> gui@haskell.org is the list addy I think
12:46:51 <shapr> I can find the correct url if you want.
12:47:07 <palomer> does haskell have OO features?
12:47:11 <shapr> palomer: what does that mean?
12:47:20 <shapr> typeclasses look like OO++ to me
12:47:33 <shapr> but they might not to you :-)
12:47:42 <palomer> polymorphism?
12:47:45 <palomer> inheritance?
12:47:53 <palomer> encapsulation, data hiding?
12:48:11 <shapr> yes, but not always in the way you're used to
12:48:43 <palomer> does the std library make use of these features?
12:48:56 <shapr> yes, but once again...
12:49:02 <shapr> not always like you would expect
12:49:40 <shapr> palomer: you could work on them at the same time
12:49:45 <shapr> then I could ask you how they compare =)
12:49:54 <shapr> I'd be happy to help you learn Haskell.
12:50:13 <palomer> thx for the offer!
12:50:29 <palomer> but I'm not gonna quit mid way in my ocaml endeavour
12:50:32 <shapr> ok
12:50:44 <shapr> come back and see us when you get comfy in ocaml :-)
12:50:49 <palomer> thx
12:51:50 <whee> now I feel like screwing around with gui applications :(
12:51:56 <shapr> heheh
12:52:07 <shapr> I agree, this channel is dangerously motivational.
12:52:20 <whee> now the problem is finding something to do that would require a gui
12:52:21 <shapr> so, anyone else feel that earthquake ten minutes ago?
12:52:43 <shapr> whee: wanna help me crash GHC? ;-)
12:52:48 <Riastradh> Earthquake where?
12:52:57 <whee> I can crash ghc by just loadinghci :p
12:52:57 <shapr> I writing QuickCheck tests for GHC's External Core
12:52:59 <mgoetze> crash ghc?
12:53:01 * shapr laughs
12:53:03 <shapr> whee: ok, you win
12:53:12 <shapr> Riastradh: central europe
12:53:13 * mgoetze makes a note to keep an eye on iohcc list.
12:53:26 <whee> shapr: there was a quake in california this morning too
12:53:27 <shapr> was felt in zurich and stuttgart
12:53:37 <mgoetze> shapr: not up here
12:53:42 <whee> all your damn bouncing!
12:53:43 <whee> heh
12:53:46 * shapr laughs!
12:54:56 * shapr goes back to making Arbitrary instances for parts of External Core 
13:00:54 <shapr> hey, anyone around with monad cluefulness?
13:01:11 <shapr> I was thinking of how to make a "recovery" chunk in a Maybe monad
13:12:24 <jlouis> recovery chunk?
13:12:37 <shapr> like, if you need to rollback a partial transaction
13:12:47 <jlouis> ah
13:12:53 <shapr> how do you do it?
13:14:39 <jlouis> persistence?
13:15:11 <jlouis> I am not fluent in monads
13:55:14 <shapr> nor am I
14:01:54 <Janni> i'm a free man again! (brought a _hard_ week behind me)
14:03:02 <mgoetze> Janni: eh? thought you were a gymnasiast?
14:04:02 <Janni> mgoetze: yep. but it was mainly stuff that doesn't have to do with school
14:04:14 <mgoetze> oh, like what?
14:04:26 <Janni> i told you about that university stuff. i wrote the "klausur" at thursday
14:04:27 <shapr> hi Janni 
14:04:51 <Janni> i have learned more for it than for school for the last.. lets say 3 years
14:05:42 <mgoetze> Janni: you did? can't remember... some special application procedure
14:06:11 <Janni> well, i am able to begin with university while still going to school.
14:06:56 <Janni> i can participate at the computer science lectures and the "klausur" (english word?) at the university Karlsruhe
14:07:09 <mgoetze> Janni: klausur == exam
14:07:31 <mgoetze> so, how does that work? do they hold extra lextures in the afternoon?
14:08:05 <Janni> no. we (pupils) just participate at the lectures as every other students do (more or less)
14:08:23 <Janni> but only computer science (informatik) and not "lineare algebra" and stuff...
14:09:03 <Janni> once we have passed the exam we don't have to do it when beginning studying in Karlsruhe
14:09:40 <Janni> besides we can be sure to affiliated
14:09:44 <mgoetze> but don't you have school at the same time?
14:10:28 <Janni> mgoetze: no. the lectures are from 14:00-15:30 and the schools are advised to make it possible to participate
14:10:40 <mgoetze> oh
14:10:42 <Janni> my school had to move sports for me to participate
14:10:48 * mgoetze doesn't have any lectures that late
14:12:45 <Janni> now i have done the exam (and i'm pretty sure I passed) I have semester vacations and even computer science is real fun I enjoy that I'll come home at noon for a month (or so)
14:13:24 <mgoetze> what was the lecture you attended called?
14:14:47 * mgoetze had a lecture called "Programmiermethodik" which he didn't bother attending, the exam of which he found extremely easy...
14:15:09 <Janni> lots of cool stuff. wait a moment...
14:16:37 <Janni> 1. Grundbegriffe; 2. Halbgruppen, Relationen; 3 Algebren und Termalgebren; 4 Formale Logik; 5 Funktionales Programmieren (Haskell, yay :); 6 Abstrakte Datentypen; 7 Algorithemkonstruktion I
14:17:17 <steele> Janni: you did way more Haskell than we did two years ago
14:17:40 <Janni> steele: fortunately
14:18:20 <mgoetze> Janni: yeah, but what was the lecture itself called? just "Informatik I" or something?
14:18:27 <Janni> yep
14:19:06 <mgoetze> Janni: that'll probably be the easiest part of your studies there... :)
14:19:27 <mgoetze> (assuming you want to stay in karlsruhe, that is)
14:20:00 <Janni> yeah, when I started I wasn't sure, but now I pretty am...
14:20:42 * mgoetze points out that "now I pretty am..." is not valid english :)
14:21:00 <Janni> mgoetze: it wasn't too easy, 'cause from what I've hard until now, I don't think more than 50% have passed, maybe 60%
14:21:20 <mgoetze> colloquially, what you can say is "I pretty much am"
14:21:27 <Janni> mgoetze: thx
14:21:33 <mgoetze> np
14:21:43 <shapr> Janni: I wish my school taught Haskell to me ;-)
14:22:12 <mgoetze> my uni teaches C
14:22:24 <mgoetze> i'm told it might get worse next semester
14:22:36 <shapr> last uni I went to taught COBOL and system 360 assembler.
14:22:36 * mgoetze can't fully form the dreaded j-word, however.
14:22:45 <Janni> shapr: in fact I learned Haskell by myself when I was told that Haskell will be used
14:22:53 <shapr> Janni: extraspiffy
14:23:02 <shapr> did you learn with a book?
14:23:47 <Janni> shapr: nope. i tried some tutorials (online) but didn't really understand... until I noticed the "Two Dozen Short Lessons" one
14:24:01 <Janni> well, i
14:24:32 <Janni> yay. I have no problems reading from screen
14:25:35 <Janni> mgoetze: be happy as long it's not C++. i think C is acceptable
14:25:44 <Janni> +as
14:25:53 <mgoetze> Janni: yes, that's another of the things i've been warned about
15:01:11 <shapr> lament: oh YEAH?
15:01:31 * shapr bounces happily
15:01:45 * shapr tries to figure out the new monadic QuickCheck
15:03:27 <lament> oh YEAH!
15:06:58 * shapr begins to understand how QC does monadic equivalence
15:06:59 <shapr> whoa
15:07:01 <shapr> neat
15:07:51 <shapr> strangely, no one has commented on my PurelyFunctionalExtremeProgramming page on TheOriginalWiki
15:20:37 <jlouis> url
15:26:10 <shapr> http://c2.com/cgi-bin/wiki?PurelyFunctionalExtremeProgramming
15:29:34 <jlouis> thanks
18:22:24 * shapr bounce
18:25:54 <shapr> f00
18:32:26 * Robert studsar.
18:34:31 <shapr> I swear this guy is going to start explicity testing for barbed wire
18:34:47 <mgoetze> shapr: eh?
18:34:59 <shapr> john hughes and his second quickcheck paper
18:35:19 <shapr> he's doing monadic equivalence testing that I don't quite understand
18:37:47 <mgoetze> shapr: it probably leads to a solution for the famous "how to catch a lion in the desert" problem
18:38:38 <shapr> ?
18:39:38 <mgoetze> shapr: (google ("catch" "lion" "desert"))
18:39:48 <shapr> :-P
18:39:52 <shapr> ok, after I get this code working
19:01:37 <shapr> anyone here tried QuickCheckM?
19:17:46 <shapr> er, how much utf support is actually in GHC?
19:19:09 <shapr> hm
19:32:00 <shapr> it's amazing how much fun stuff is in the GHC docs
19:33:49 <shapr> for example, assertions.. or pattern guards
23:04:23 * esap just woke up.
