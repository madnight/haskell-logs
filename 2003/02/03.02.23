03:35:27 <Janni> Love is all you need. All you need is love...
03:35:32 <Janni> Errr. Hi all.
03:36:22 <Marvin--> Errr. Hi to you too.
03:36:29 <andersca> hey marvin and janni
03:37:02 <opet> dododoooo
03:37:19 <Janni> opet: wrong guess
03:37:54 <opet> it wasn't yellow, then?
03:38:23 <Janni> opet: it isn't beatles (but somewhat referring to their song)
03:39:01 <opet> that's nice
03:39:14 <Janni> it's Pearl Jam, Love Boat Captain (one of the coolest songs ever (as so many)) (but who would've guessed?)
03:39:41 <opet> pearl jam
03:39:48 <opet> I saw them on tv a while ago
03:39:53 <opet> they all had hair cuts
03:40:08 <Janni> like what?
03:40:08 <opet> pearl jam just aren't the same without long hair
03:40:10 <Marvin--> urrrgh
03:40:13 * Marvin-- is hungover
03:40:29 * Janni doesn't care a bit
03:40:34 <opet> Marvin--: meh. me too
03:52:34 <Janni> Did they release Riot Act with short hair? If yes, I just love them with short hair
05:24:48 * shapr yawns
05:24:54 <shapr> is it morning already?
05:25:02 <Robert> Yes!
05:25:06 <Robert> At least in .se >:)
05:26:38 * Marvin-- mutters
05:27:52 * Robert muttrar.
05:28:10 * shapr yawnar
05:29:37 <Robert> :)
06:19:10 * dark vinkar svansen.
06:20:50 <Robert> Terve, dark 
06:21:02 <ibid> dark är en hund?
06:21:20 <Robert> Troligen.
06:21:25 <mgoetze> scheissschweden
06:21:44 <Robert> How many here do NOT speak Swedish? ;)
06:21:46 <Robert> Hehe.
06:21:51 <shapr> ik ben een buitenlander!
06:22:03 <ibid> jag är en finne :-)
06:22:04 <Robert> En ik been geen kaaskop!
06:22:07 <Robert> ben, even.
06:22:15 <shapr> ik ben een klerencast!
06:22:21 <Robert> Ach so.
06:22:23 <mgoetze> Robert: i speak german, so i understand it to about 40%...
06:22:36 <Robert> mgoetze: Dat is goed :)
06:22:48 <mgoetze> koennte auch besser sein...
06:22:53 <Robert> Ja.
06:26:04 <dark> shapr: klerenkast :)
06:26:34 <dark> And make sure you pronounce the n, "klere-" by itself is a curse prefix.
06:26:45 <mgoetze> dark: snakken up platt?
06:27:03 <dark> (probably from cholera)
06:29:28 * mgoetze should learn finnish.
06:29:34 <dark> Hmm, Dutch is the only language I know where disease-related curses are common.
06:30:51 <Robert> Nederlanders are strange :)
06:31:00 <shapr> dark: middle english has stuff like "a pox upon thee!"
06:34:26 <shapr> yow, verboseCheck just created 16000 lines of output
06:41:02 <dark> I'm using alsa 0.9.0beta5.  The module really is called 8233 there :)  I think it's supposed to also use fm801 but I never got that working.
06:41:14 <dark> Oops :)
06:55:12 <shapr> hm, how would I declare a Maybe type as an instance of Arbitrary?
06:56:41 <Marvin--> shapr: I guess you could pick Nothing with a certain probability?
06:56:49 <shapr> yes, I can do that..
06:57:39 <shapr> http://kungens.kemi.fi/~shae/src/haskell/TestCore.hs
06:57:50 <shapr> the very last instance
06:58:21 <shapr> arbitrary = oneof [return Nothing] -- works fine
07:02:15 <shapr> Marvin--: question is, how to pick the Just branch?
07:02:59 <shapr> I thought (Just arbitrary) would do it...
07:05:20 <Marvin--> liftM Just arbitrary?
07:05:32 <shapr> that sounds too easy :-)
07:05:48 <Marvin--> makes sense though?
07:05:55 * shapr tries
07:06:14 <Marvin--> the problem there is that you'll be generating Nothing about half the time, and that's kinda silly
07:06:17 <shapr> you're brilliant ;-)
07:06:32 <shapr> I can go back and fix it with a frequency combinator later
07:07:14 <shapr> can I do a "deriving" clause on an already existing type that's been imported?
07:09:11 <shapr> Marvin--: any thoughts on the unit-test-first style I'm trying to do there?
07:09:28 <shapr> is there a better way I haven't thought of?
07:09:40 <Marvin--> I don't know what you want to do
07:10:58 <shapr> http://c2.com/cgi-bin/wiki?CodeUnitTestFirst
07:11:17 <Marvin--> well I know the XP test-driven programming
07:11:19 <shapr> it's called "test driven development" sometimes
07:11:21 <shapr> yah, that's it
07:11:28 <shapr> http://c2.com/cgi-bin/wiki?PurelyFunctionalExtremeProgramming
07:11:36 <Marvin--> but since I don't know what you want to code, I can't comment on the testing
07:12:00 <shapr> I want to generate random instances of Core and save ones that make GHC explode.
07:12:02 <Marvin--> and I think you should have an  instance Arbitrary a => Arbitrary (Maybe a)
07:12:31 <shapr> whoa, that works?
07:12:39 <Marvin--> why shouldn't it?
07:12:40 <shapr> I could do the same thing with Qual?
07:12:49 * shapr tries that
07:12:50 <Marvin--> that's what overloading is for
07:13:09 * shapr bounces happily
07:17:06 <Marvin--> cool, delYsid has made debian-installer work seamlessly with braille displays
07:17:11 <shapr> yay!
07:25:58 <shapr> hiya
07:26:07 <opet> hi
07:26:12 <shapr> what's up?
07:28:37 <opet> not much.. just gave up watching scotland vs. france :/
07:32:43 * shapr bounces
07:35:42 * Robert bounces away.
07:35:43 * Riastradh dribbles shapr.
07:35:55 * shapr drools
07:36:07 <mgoetze> Riastradh: slam dunk!
07:36:50 <shapr> with some beer, I could be a slam drunk.
07:44:55 <Marvin--> ha. ha. ha.
07:45:01 <Marvin--> you crack me up
07:45:15 <mgoetze> anyone for go?
07:46:08 <Marvin--> too hungover
07:53:29 <Marvin--> wow, scary thought... with dependent types, could you make a generic list2tuple function?
07:53:56 <Marvin--> hmm, probably not
07:54:46 <shapr> huh?
07:54:47 <shapr> could you?
07:54:52 <Marvin--> no, probably not
07:55:02 <shapr> I think you could do it with TH
07:55:12 <Marvin--> well, yes
07:55:30 <Marvin--> you can probably do pretty much anything with TH ;)
07:55:36 <shapr> heh, truly
07:56:14 <shapr> I'm making another clueless mistake...
07:56:27 <shapr> newtype Vdef = Vdef (Qual Var,Ty,Exp) 
07:56:27 <shapr>     deriving Eq
07:56:36 <shapr> instance Arbitrary Vdef where
07:56:36 <shapr>     arbitrary = liftM Vdef (arbitrary,arbitrary,arbitrary)
07:57:34 <shapr> my first thought was that I should curry the Vdef constructor
07:57:36 <Marvin--> there's an Arbitrary instance for (a,b,c)
07:57:40 <shapr> yah, I noticed that
07:57:48 <Marvin--> so why not just liftM Vdef arbitrary?
07:57:55 * shapr blinks cluelessly
07:57:57 <shapr> oh :-)
07:58:37 <shapr> tack igen
07:58:52 <shapr> do you ever hang out in #debian.se ?
07:59:51 <shapr> oh, I've been using "prop_Foo x = x == x" for my 'unit' property
08:00:03 <shapr> could I use id instead and not have to worry about deriving Eq for every type?
08:00:15 <shapr> I think I can...
08:02:34 <Marvin--> no I only hang out on the developer channels
08:02:37 <Marvin--> er, use id for what?
08:03:49 <Marvin--> and what do you mean "unit" property?
08:04:39 <Marvin--> you could use  prop_Foo x = True  if you truly don't want to check anything
08:05:40 <shapr> right, good point
08:10:29 <shapr> Marvin--: swedish is so much fun :-)
08:10:41 <Marvin--> heh
08:22:15 * kawfee bounces
08:22:27 * shapr sees splashes of kawfee on the ceiling
08:22:36 <shapr> yow, I just explained monads on #emacs and people understood me!
08:22:56 <Janni> hi-de-ho!
08:23:01 <mgoetze> hi Janni
08:23:04 <shapr> my you smell all nice and flowery!
08:23:16 <mgoetze> shapr: just proves that emacs users are weird
08:23:20 <shapr> heh
08:23:32 <Janni> shapr: yeah, i know. i just come from playing football (soccer) :)
08:23:47 <shapr> mmm, tasty
08:23:55 <Janni> ahh, go away!
08:24:05 * shapr laughs
08:24:22 <shapr> just being sarcastic :-)
08:26:26 <shapr> Marvin--: can you think of anything about XP that would work differently in Haskell?
08:28:38 <jlouis> yes, the type inference system is in fact a crude UnitTest
08:28:51 <shapr> well, any type system is like that
08:28:55 <shapr> in my opinion
08:29:18 <shapr> type systems are tools that you can wrap around your code to prove certain properties about it.
08:29:35 <shapr> Marvin-- got me thinking about that with his masters project.
08:30:02 <jlouis> which is?
08:30:08 <shapr> I think that Hindley-Milner is like a tightly integrated form of Proof General and friends.
08:30:24 <jlouis> yes
08:30:35 <shapr> his masters project is something like "proving correctness in code"
08:31:05 <shapr> the idea he last spoke of was to use External Core, since it's simpler to deal with, and try to stuff it into automated proof systems.
08:39:03 <Marvin--> actually right now I'm looking at helium
08:39:14 <Marvin--> and use its haskell-to-core translation
08:41:13 <shapr> what kind of Core does it use?
08:41:24 * shapr is too lazy to unpack helium and look
08:43:09 <Marvin--> I think it's the same Core language - but less code to look through :-)
08:43:14 <Marvin--> and no overloading
08:44:49 <shapr> helium creates the same Core spec as GHC?
08:45:14 <shapr> so I could use GHC as a Helium backend?
08:45:20 <shapr> I gotta try that at some point.
08:46:31 <Marvin--> well, not the same concrete syntax
08:46:41 <Marvin--> but I don't want to use the concrete syntax anyway
08:46:54 <Marvin--> oh, and helium does a lot less name mangling
08:47:10 <Marvin--> so it should be easier to give reasonable feedback to the user
08:48:13 <spank> howdy
08:51:33 <shapr> hi
08:52:02 * spank cheers - he passed his functional programming class
08:52:04 <shapr> spank: have you been here before? looking to learn Haskell?
08:52:13 <spank> yeah, i have
08:52:31 <shapr> ok, I thought I'd seen you on some of the irc channels, wasn't sure if it was #haskell
08:52:43 <spank> prolly
08:52:59 <Smerdyakov> spank, is that surprising for you?
08:53:51 <shapr> Marvin--: can I do the same think for a parameterized type?
08:53:54 <shapr> er "thing"
08:53:54 <spank> well, haskell was difficult to understand when i started learning it
08:54:20 * shapr tries
08:54:21 <Smerdyakov> I hope it isn't anymore!
08:55:04 <giedi> *bark bark bark bark bark*
08:55:11 <shapr> meow!
08:55:14 <spank> the fundamental elements like recursion, syntax, etc. are easy now
08:55:57 <giedi> are you one with the monad?
08:56:52 <spank> haskell is the only functional language we learn in our course but the idea is that we get to grips with other paradigms
08:57:51 <spank> they choose it as a starter for fairness; many people who enter my course are acquainted with c, pascal, vbasic
08:58:17 <spank> because that's what some of us learn during high school
08:58:55 <giedi> it's one of them "gateway" drugs.
08:59:10 <shapr> yah, someone tries to smoke a gateway...
08:59:23 <shapr> did gateway go out of business for that reason?
08:59:35 <giedi> aren't they the cow boxes?
08:59:39 <whee> yes
08:59:40 <shapr> yah, that's them.
08:59:42 <shapr> moo
08:59:48 <shapr> apt-get moo
08:59:48 <whee> gateway's still around, I think
08:59:51 <shapr> ah, ok.
08:59:58 <shapr> I guess they don't do much business in northern sweden.
09:00:18 <giedi> they had a corporate makeover. i witnessed a commercial the other day.
09:01:07 <Marvin--> shapr: same thing what?
09:01:14 <shapr> er..
09:01:22 <shapr> type Qual t = (Mname,t)
09:01:53 <Marvin--> that's a type synonym, not a data type
09:01:53 <shapr> I'm trying to get my head wrapped around the [a] and (a,b,c) instances enough to figure out this one also
09:01:59 <shapr> right, it should be simple, yes?
09:02:04 <shapr> almost obvious I think :_)
09:02:11 <Marvin--> as long as both Mname and t are Arbitrary, Qual t will also be Arbitrary
09:02:20 <shapr> hm
09:02:27 <shapr> ok
09:05:25 <Marvin--> shapr: it's so obvious you don't have to do anything at all :-)
09:05:35 * shapr grins
09:05:36 <shapr> well then
09:20:01 <giedi> anyone here ever try this language (curry)? http://www.informatik.uni-kiel.de/~mh/curry/examples/
09:20:18 <shapr> I haven't, does it look interesting?
09:20:20 <spank> haskell clone?
09:21:03 <giedi> have you ever ventured into logic programming? this is like a hybrid functional/logic language.. I haven't read much on it yet tho.
09:21:12 <spank> heh, it looks exactly like haskell
09:21:24 <spank> my course has a logic programming class too
09:22:13 <Marvin--> hmm, is it implemented as an embeded language in haskell?
09:23:25 <shapr> I haven't tried logic programming
09:23:30 <shapr> truly, curry look like haskell
09:25:26 <spank> it's compatible with haskell
09:25:50 <spank> http://www.informatik.uni-kiel.de/~curry/report.html
09:27:26 <mgoetze> hm, looks interesting
09:27:37 <spank> http://www.informatik.uni-kiel.de/~mh/slides/ETAPS00.pdf
09:27:44 <shapr> yah, it looks nifty
09:27:45 <spank> read that
09:31:38 <shapr> this is nifty
09:31:52 <shapr> I don't like the idea of requiring Java though :-(
09:32:04 <shapr> I'm not happy with non-free
09:32:15 <whee> java's not free?
09:32:49 <shapr> nope
09:32:58 <whee> seems free to me, heh
09:33:09 <spank> i thought it was
09:33:16 <opet> it's free beer, not speach
09:33:21 <creature> It's free as in beer, not as in speech.
09:33:25 <spank> oh, right.
09:33:28 <opet> or whatever slashdot people witter on about
09:33:31 <whee> pfft, still free
09:33:32 <creature> Ack, first incisive comment for a long while and someone beats me to it. 
09:33:33 <creature> :)
09:33:33 <whee> I didn't pay for it.
09:33:44 <Marvin--> "free" is overloaded in English
09:33:44 <shapr> whee: neither can you fix it when it is broken.
09:33:49 <opet> heh
09:33:53 <Smerdyakov> What do you call Kaffe, shapr?
09:33:57 <whee> shapr: not like I would, anyway
09:34:07 <whee> I certainly have access to ghc source, but I'm not going to attempt to make it work.
09:34:08 <opet> shapr: you can get the sources and fix things if you like :)
09:34:43 <shapr> opet: have you seen the license for the sources?
09:34:55 <shapr> many times I have wanted to fix java
09:35:00 <Smerdyakov> shapr, ...
09:35:01 <opet> shapr: yeah
09:35:11 <Smerdyakov> Java is a language/VM spec/whatever, NOT a product.
09:35:35 <creature> I think Sun would like you to call it a "technology".
09:35:43 <opet> shapr: or use something like the blackdown jdk
09:35:44 <creature> Maybe an "Enterprise Solution"...
09:35:45 <Marvin--> heh, probably
09:35:51 * shapr snickers
09:35:58 <whee> hehh
09:36:03 <Smerdyakov> Whatever. It's not something to which you can attach a license, as far as I know.
09:36:30 <shapr> Smerdyakov: friend of mine wanted to port Java to a new mips related hardware platform
09:36:45 <Smerdyakov> shapr, if you mean the Sun JDK, then say so.
09:36:59 <shapr> it's the only java sdk
09:37:05 <Marvin--> there's jikes
09:37:16 <Smerdyakov> See above ^^ =)
09:37:18 <shapr> if JRVM and gnu classpath worked together, that would be a start.
09:37:44 <whee> also whatever this blackdown  project is
09:37:58 <Marvin--> blackdown only package it, right?
09:38:03 <Smerdyakov> And I believe it's even true that jikes is superior to the point where it's odd that anyone would want to use the JDK.
09:38:25 <shapr> Smerdyakov: jikes requires the SDK
09:39:05 <Smerdyakov> You can't use it with Kaffe?
09:40:03 <ibid> jikes works with kaffe
09:40:08 <ibid> and with sablevm
09:40:26 <Smerdyakov> So, shapr, what non-free components are required?
09:42:04 <opet> shapr: freebsd java people have had some success with sun and java
09:42:29 <giedi> their chief scientist created bsd i think.
09:42:42 <opet> they've got a license to distribute freebsd native binary jdk packages 
09:44:20 <shapr> Smerdyakov: what version of the java standard is implemented by kaffe?
09:50:56 <shapr> Smerdyakov: right now I'm being paid to write xalan2 and xerces based code for xml transformations. I'd also like to play with curry. do those things work on kaffe?
09:52:52 <ibid> what is the java standard?
09:53:00 <ibid> (java is not standardized)
10:26:23 <whee> .j #ocaml
10:26:24 <whee> dsafkdas :\
10:28:57 <jlouis> haha
10:29:44 <whee> at least it wasnt #sexwithwoodencrates :)
10:33:28 <Marvin--> #ocaml is worse, heretic! :)
10:35:01 <jlouis> Ok, I confess I am an SML guy ;)
10:35:24 <Marvin--> begone foul creature! :)
10:35:57 <jlouis> uh, oh
10:43:08 <ludde> How can I force evaluation of a string?
10:43:54 <jlouis> force as in strict force?
10:44:09 <ludde> hmm?
10:44:11 <ludde> well
10:44:16 <ludde> I had this:
10:44:17 <ludde> liftM (fromMaybe (error "You have not joined a match") . udMatch) $ readMVar ud
10:44:29 <ludde> of type: checkInMatch :: IO String
10:44:32 <ludde> but this doesn't fail
10:44:38 <ludde> since the String is never evaluated
10:45:55 <Igloo> That's not a String, it's an IO String
10:46:40 <ludde> yeah
10:46:42 <ludde> but.
10:46:48 <Igloo> If you have s <- checkInMatch; s `seq` do ...   hten that should work
10:46:49 <ludde> the core of the problem is that fromMaybe (error "You have not joined a match") . udMatch is not evaluated.
10:47:14 * Igloo wouldn't have thought the seq should be necsesary, though
10:47:24 <ludde> s `seq` ??
10:47:58 <Igloo> seq forces evaluation of its first argument ot WHNF
10:49:26 <ludde> oh?
10:51:26 <Igloo> I don't know what you're asking
10:52:54 <ludde> oh nothing
10:52:56 <ludde> :)
10:53:04 <ludde> thanks
10:53:08 <ludde> i guess that does what I want.
11:09:56 <shapr> whoops
11:10:25 * shapr bounces
11:10:28 <shapr> hiya
11:11:52 <shapr> jlouis: any other FP-XP differences you can think of?
11:16:56 <jlouis> you mean things that are different from impertive langugages?
11:17:01 <jlouis> -g
11:18:13 <shapr> yah, I guess so
11:25:05 * shapr boings
11:27:12 * Riastradh sproings.
11:27:35 * shapr dribbles Riastradh 
11:27:42 * shapr drools on Robert_
11:32:13 <shapr> latex .lhs files are spiffy
12:23:39 <Janni> hooray! (for no real reason)
12:29:11 <emu> impertinent languages...
12:31:36 <Janni> emu: Can you elaborate on that? (Eliza-Mode)
12:33:14 <emu> Go on
12:33:49 <Janni> I see
12:39:40 <emu> Sou desu ka
12:40:13 <Janni> What does that suggest to you?
13:16:59 <dark> (note that Sun tries damn hard to attach a license to "Java" as a whole.)
13:19:49 <dark> The specification comes with a license that claims to cover independent implementations, and puts restrictions on those.  Whether it'll hold up in court is anybody's guess.
13:20:56 <esap> What kind of restrictions?
13:22:07 <dark> Mainly, to implement exactly the spec, and stay out of the java and javax package hierarchies.
13:22:44 <esap> but is is not just that you cannot claim to implement the specification unless you actually do?
13:23:30 <dark> That's not what it says.
13:23:44 <dark> They have a whole _other_ page on trademark usage :)
13:25:03 <dark> For example, "I'm never using Java again" would be against their trademark usage rules.
13:25:19 <whee> haha, that's lame
13:25:26 <dark> You'd have to say "I'm never using the Java[TM] language again".  Or Java[TM] technology, if that's what you mean.
13:25:55 <dark> whee: They don't have an explicit rule against disparaging it, I just picked a semi-humorous example :)
13:26:10 <dark> However, you're not allowed to use "Java" as a noun.  Except when referring to the island, presumably.
13:27:29 <esap> Just insert a note that "each use of the word Java in the following documentation refers to the island", would that handle it? :-)
13:28:00 <ibid> note that trademark rules only apply in commerce
13:28:12 <ibid> hmhm
13:28:12 <Smerdyakov> I will sell you my knee.
13:28:21 <dark> It might make it a bit confusing for readers :-)
13:29:37 <esap> ok, then prepend it with "for legal reasons, ..."
13:32:09 <esap> overall, this licensing/patent stuff has gone over the egd
13:32:20 <esap> ... egde long time ago.
13:32:33 <Smerdyakov> Indeed. Friends don't let friends do intellectual property.
13:38:55 <esap> oh btw, anyone know about an unification algorithm for a language with control operators?
13:39:17 <Smerdyakov> What exactly do you mean by control operators?
13:40:14 <Smerdyakov> If you mean callcc and throw, then that doesn't need anything special...
13:41:14 <esap> well for example the one described in the classic paper Griffin: The formulae-as-types notion of control [citeseer.nj.nec.com/griffin90formulaeastypes.html]. Yes, callcc and throw.~
13:41:42 <Smerdyakov> OK, so if those are the only two, I'm confused as to why you think you need a special algorithm.
13:45:40 <esap> Hmm.. if you provide those operators as primitives, you need to handle unification for it separately [is the idea to implement those as translation to more primitive things or what?]
13:46:12 <Smerdyakov> I don't know why you'd want to provide them as primitives instead of values in some module.
13:47:37 <esap> the reason is that the type system I'm writing is weaker than ordinary systems especially w.r.t. to lambda abstraction, so this system does not allow implementation of the control operators in terms of lambda abstraction.
13:48:59 <Smerdyakov> Oh. I think that is another problem altogether from how I understood you.
13:51:28 <esap> The reason I've got this kind of solution is that I've used duality to try to find commonalities between different operations of the language. The dual of lambda abstraction is the control abstraction. But using the ordinary definition will lead to problems.
13:53:38 <esap> So I've split up lambda abstraction to two more primitive operators and provide dual to both separately.
13:56:28 <esap> But I'd like to understand the control operator better (especially unification) in order to understand the semantics of these new operations.
13:57:55 <Smerdyakov> Hm... and staring at the types in the SMLofNJ.Cont structure doesn't help you? =)
13:59:08 <esap> Well I've stared at various CPS translations for quite a while, and it helps a bit. Well I could look at that as well.
14:03:20 <esap> But actually, most of what I know about the control stuff is derived directly from the assumption that control abstraction is dual to lambda abstraction (lambda abstraction is better known).
16:16:45 <jlouis> Ok, if we have a recusive data structure, does the internal representation in the compiler be recursive?
16:16:56 <jlouis> have to be?
16:17:07 <jlouis> or is there some evil way to tie the knot?
16:17:10 <emu> pointers
16:17:15 <jlouis> (Having fun with Appels exercises)
16:17:36 <jlouis> yeah, but that has not been mentioned 
16:17:53 <jlouis> ok, I have a list definition which is obviously recursive:
16:17:58 <jlouis> type list<e> = {head: e, tail: list<e>}
16:18:18 <jlouis> explicitly instantiated
16:18:51 <jlouis> But the best type for the sucker I can come up with (according to his type language) is:
16:19:01 <jlouis> tycon_list = TyFun([z], App(Record([head, tail]), [Var(z), App(tycon_list, [Var(z)])))
16:19:17 <jlouis> which obviously is recusive in itself, which I somehow dont like
16:20:10 <jlouis> that is, a type function with formal parameter z of a record where the first parameter (head) is a type variable (z) and the second ..
16:20:35 <jlouis> parameter (tail) is a appliance of the type function itself to Var(z)
16:21:00 <jlouis> is that how the nut is cracked?
16:24:54 <jlouis> hmm, i'll just try unifying it and see what happens ;)
16:37:28 <jlouis> not good, the type checker would end up in a finite loop
16:37:39 <jlouis> what I expectited it to do
16:39:51 <flippo> shapr: obfuscated haskell?  Why?
16:41:52 <flippo> I'd rather see a pathologically-concise haskell contest.
16:42:43 <flippo> (For the record, I refer to http://iohc.mgoetze.net/ )
16:43:01 <lament> ok
16:43:06 <lament> write a one-liner webserver!
16:43:42 <flippo> lament: how hard could it be?
16:44:46 <flippo> obfuscated contests are best for languages that are known as unreadable
16:48:20 <Pseudonym> Pathologically-concise haskell may be appropriate if it's unreadable.
16:53:49 <emu> flippo: why? then it's no challenge
19:51:46 <kawfee> anyone know how to generate an infinite list of factorials?
19:59:51 <Smerdyakov> Yes, it should be easy!
20:00:10 <Smerdyakov> Just define it in terms of itself.
20:01:05 <flippo> hooray for lazy evaluation
20:03:27 <flippo> the real trick is tail-call elimination
20:07:47 <flippo> fact n = fact' n 1
20:07:47 <flippo> fact' 0 result = result
20:07:47 <flippo> fact' n result = fact' (result*n)
20:08:07 <flippo> does the (result*n) need a $!   ?
20:09:12 <flippo> I worry that lazy evaluation would prevent the tail-call elimination
20:10:02 <flippo> fact' n result = fact' (n-1) $! (result*n)
20:10:26 <Smerdyakov> Why are you using functions? >:O
20:10:41 <flippo> Smerdyakov: list comps?
20:10:59 <flippo> Smerdyakov: because I'm a rank beginner?
20:11:15 <Smerdyakov> So make a function that multiplies every element of a list by its 0-indexed position plus 2
20:11:25 <flippo> Smerdyakov: oooh
20:11:26 <Smerdyakov> And then you can do it on one line without writing any more functions
20:11:54 <Smerdyakov> Or maybe plus one instead of plus two, if you want to start with 0!
20:11:59 <kawfee> I don't want fac n, I just want the list
20:12:15 <kawfee> I want the factorial list without having to call fac n, I just want to call fac
20:12:57 <kawfee> I need an infinite list
20:13:20 <Smerdyakov> I just told you how to make it.
20:13:25 <Smerdyakov> Now do your own bloody homework.
20:13:33 <Pseudonym> There's a one-liner.
20:13:45 <Pseudonym> If you're curious.
20:14:11 <Smerdyakov> I knooooow it =D
20:14:43 <Pseudonym> Actually, it's too short to be a one-liner.  17 chars including spaces
20:15:35 <flippo> Using Array?
20:15:39 <Pseudonym> Nope.
20:15:45 <kawfee> I've already made one
20:15:51 <kawfee> > fac :: Int -> Integer
20:15:51 <kawfee> > fac 0    = 1
20:15:51 <kawfee> > fac (n+1) = fromInt (n+1) * fac n
20:15:51 <kawfee> > fac2 :: Int -> [Integer]
20:15:51 <kawfee> > fac2 x = [ fac x | x <- [0..x]]
20:15:56 <Pseudonym> Cool.
20:16:06 <kawfee> but it involves the parameter x which I want to remove
20:16:11 <kawfee> I need a binding?
20:16:13 <Pseudonym> Er...
20:16:18 <Pseudonym> Why not just dump it?
20:16:22 <flippo> looks like a finite list to me
20:16:23 <kawfee> what do you mean?
20:16:28 <Pseudonym> fac2 :: [Integer]
20:16:33 <Pseudonym> Oh, I see.
20:16:39 <Pseudonym> You can avoid it by using [0..]
20:16:45 <kawfee> it isn't infinite, it only goes up to the calculation for x
20:16:57 <Pseudonym> Since you already did the hard work.
20:17:00 <kawfee> but I need to index into  the list 
20:17:10 <Pseudonym> Huh?
20:17:13 <Pseudonym> Why?
20:17:18 <kawfee> so I want to be able to do fac2 !! n
20:17:21 <kawfee> for memoization
20:17:28 <kawfee> speed things up
20:17:53 <Pseudonym> Indexing an array is O(n), computing factorial is O(n).
20:18:04 <Pseudonym> Sorry, indexing a list.
20:18:09 <Pseudonym> Not an array.  An array is O(1).
20:18:11 <kawfee> ==]
20:18:15 <kawfee> I was about to call you on that
20:18:31 <Pseudonym> This isn't a good data structure for memoisation.
20:18:41 <kawfee> it doesn't matter
20:18:54 <kawfee> I'm just toying with the concept
20:19:24 <kawfee> should I make some sort of binding ?
20:19:41 <Pseudonym> http://haskell.org/wiki/wiki?MemoisingCafs
20:19:42 <Pseudonym> Take a look.
20:20:51 <Pseudonym> BTW, since you already did the hard work, here's the short version:
20:20:54 <Pseudonym> fac2 = scanl (*) 1 [1..]
20:21:41 <Smerdyakov> Well, that can't be fair! scanl does all the work!
20:21:50 <kawfee> what does scanl do?
20:21:57 <Pseudonym> No, (*) does all the work. :-)
20:22:45 <Smerdyakov> What's the standard function to map a function over a pair of lists to produce a new list?
20:22:54 <Pseudonym> You mean zipWith?
20:23:08 <Smerdyakov> Sounds good... what's the type
20:23:08 <Smerdyakov> ?
20:23:10 <flippo> I was trying to use foldl, darn it
20:23:20 <Pseudonym> Prelude> :t zipWith
20:23:20 <Pseudonym> zipWith :: forall c b a. (a -> b -> c) -> [a] -> [b] -> [c]
20:23:31 <Smerdyakov> OK, so:
20:23:57 <Smerdyakov> fac = 1:(zipWith (*) fac [2..])
20:24:26 <Pseudonym> Oooh, that's neat.
20:24:45 <Pseudonym> Now if you want REAL speed...
20:25:02 <Pseudonym> You could use a better algorithm.
20:25:17 <kawfee> I just want to do memoization
20:26:19 <Pseudonym> Did you read the MemoisingCafs page?
20:26:28 <flippo> Smerdyakov: that gives me the wrong answers :)
20:27:00 <Smerdyakov> flippo, I guess your compiler broke.
20:27:09 <flippo> [1,2,3,8,30,144,840,5760,45360,403200]
20:27:13 <kawfee> I didn't really understand it
20:27:16 <Pseudonym> It worked for me.
20:27:22 <flippo> very odd
20:27:29 <kawfee> heh
20:28:04 <flippo> oops, my typo
20:28:05 <Pseudonym> Prelude> let { fac = 1:(zipWith (*) fac [2..]) } in (take 10 fac)
20:28:05 <Pseudonym> [1,2,6,24,120,720,5040,40320,362880,3628800]
20:28:32 <flippo> (I changed the name of the outer but not the inner function)
20:28:50 <Smerdyakov> No functions here, bub!
20:29:14 <flippo> Smerdyakov: uh, whadymacallit
20:29:24 <Pseudonym> CAF
20:29:31 <Pseudonym> I think that's the term you're after.
20:30:12 <flippo> which stands for ...
20:30:19 <Pseudonym> Constant Applicative Form
20:30:24 <flippo> gah
20:30:47 <flippo> my silly haskell books don't use that term
20:31:21 <Pseudonym> You're clearly reading the wrong books.
20:31:24 <Pseudonym> :-)
20:32:01 <flippo> anyway to do that with foldl ?
20:32:21 <Smerdyakov> Of course. Everything you do with lists is really foldl!
20:32:31 <Pseudonym> Except for those things that are really foldr.
20:32:42 <flippo> okie dokie
20:41:22 <flippo> I do need to spend more time studying the prolog.  So many goodies in there.
20:41:24 <flippo> prelude, rather
20:53:51 <Pseudonym> The thing with factorial is that when you get into the big numbers, you start hitting weird behaviour in the integer library.;
20:58:01 <Pseudonym> Multiplication is not a constant-time operation.
21:25:33 <ibid> true
21:25:51 <ibid> neither is any other arithmetical operation on bignums :-)
21:36:19 <Pseudonym> Exactly.
21:36:49 <Pseudonym> It's much more efficent to multiply two similarly-sized Integers than a large one with a small once.
21:36:59 <Pseudonym> Hence, the naive implementation of factorial is pessimal.
21:37:09 <Pseudonym> With respect to multiply performance.
23:13:02 <emu> multipulcation
23:35:31 * shapr awakens
23:35:38 * emu runs for the hills
23:35:49 * shapr runs for swedish class
