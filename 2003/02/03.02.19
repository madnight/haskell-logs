00:11:17 <shapr> yow
00:11:21 <shapr> it's morning again!
00:11:25 <shapr> it's already @382
00:11:52 <shapr> hey dnm, wasssup?
00:14:02 <dnm> Hey.
00:14:06 <dnm> Not much. You?
00:27:53 <shapr> just waking up
00:28:04 <shapr> dnm: hey, have you seen the IOHCC?
00:28:13 <dnm> Nope.
00:28:32 <shapr> http://iohcc.mgoetze.net/
00:29:39 <shapr> obfuscated haskell contest
00:29:50 <shapr> dnm: haven't seen you online lately, been busy?
00:30:49 <dnm> Yeah.
00:31:00 <dnm> Avoiding IRC under the illusion of getting more project work done.
00:31:04 <dnm> Hasn't really worked out that way.
00:31:10 <shapr> :-)
00:31:41 <shapr> for me it's best to have a stimulus response loop... I know I want to chat on irc
00:31:57 <dnm> March first!
00:32:09 <shapr> so I say "get this five hour task done, then chat on IRC"
00:32:10 <dnm> Heh, and you're on the jury
00:32:14 <shapr> =)
00:32:23 <dnm> helium?
00:32:36 <shapr> it's a new Haskell learning platform
00:32:47 <shapr> concentrates on better error messages
00:33:06 <shapr> it's the first haskell implementation that's running on top of daan leijen's lazy virtual machine as well
00:33:25 <shapr> helium isn't a complete implementation of Haskell yet, but it's enough for learning
00:45:19 <dnm> Ah.
00:45:33 <dnm> I was wondering if I ought to uninstall Hugs the other day.
00:50:34 <shapr> dnm: come to sf.net/projects/haskell-libs and help us write general purpose libraries :-)
00:51:04 <dnm> Heh.
00:51:12 <dnm> That would be something to do.
00:51:32 <dnm> I still need to hack on my spi-calculus in Haskell thinger with monadic capabilities.
00:51:41 <dnm> Which is horribly confused, currently.
00:51:59 <dnm> I take it there's no "Haskell Standard Library" effort besides this?
00:52:12 <dnm> Gah. SF is down for maintenance.
00:52:40 <shapr> depends on what you mean by haskell standard library
00:52:49 <shapr> hbase is ashley yakely's project
00:52:59 <shapr> he appears to be replacing most of the prelude
00:53:32 <shapr> hfl is haskell foundation libraries, it's more about cleaning up and updating edison, and adding other libraries that could be there
00:53:50 <dnm> Hrm.
00:53:50 <shapr> haskell-libs is "write the python standard libraries for haskell"
00:54:10 <shapr> hfl includes some spiffy stuff, monad transformers and the like
00:54:23 <shapr> not that I really understand monad transformers yet :-)
00:58:01 <shapr> dnm: we've got a webserver with runtime loadable plugins and an ircbot with compile-time plugins in haskell-libs
00:58:24 <dnm> Hrm.
01:00:57 <dnm> I'm presently sort of in the Scheme & Lisp hacking mood, with some C++ thrown in for highly idiosyncratic reasons. But I'll keep this in mind.
01:03:23 <shapr> ok,
01:04:41 <dnm> I'm also playing with, generally speaking, a lot of number theory and algorithms hacks, and Haskell lends itself to some of those.
01:24:08 <shapr> neat, looks like Inferno/Plan9 might be GPL'd
01:25:18 <shapr> I wonder if GHC runs on Infero ;-)
01:26:37 * Marvin-- writes a really stupid unlit function
01:30:48 <Marvin--> shapr: weren't you writing an unlit function some time ago to use with quickcheck?
01:30:53 <shapr> yup
01:31:02 <shapr> want me to send it to you?
01:31:09 <Marvin--> yeah maybe we should compare notes :)
01:34:24 <shapr> http://kungens.kemi.fi/~shae/src/haskell/quickcheck
01:34:42 <shapr> I was just trying to extend the quickcheck script to work on .lhs files as well
01:36:02 <Marvin--> http://193.11.232.159:8080/unlit.hs
01:36:20 <shapr> ah, I was only doing it for birdtracks
01:55:29 <Marvin--> extractImports xs = [ x | Right x <- map (parse p "<unknown>") xs ]
01:55:30 <Marvin--> *cough*
01:56:29 <Marvin--> oh damn
01:57:04 <Marvin--> this won't work anyway
01:57:47 <Marvin--> how could it? I can't expect people to have the sources for ghc available
02:04:53 * Marvin-- goes "ugh"
02:05:20 <Marvin--> so...should I try to parse the .hi files? :(
02:13:23 <Marvin--> oh for ***
02:13:35 <Marvin--> RnHiFiles.lhs has a zillion imports
02:13:41 <shapr> ?
02:14:30 <Marvin--> the file that (I think) loads .hi files
02:14:44 <shapr> oh
02:15:32 <Marvin--> Is it a bad sign if it has *two* hi-boot files?
02:15:37 <shapr> yow!
02:15:38 <Marvin--> RnHiFiles.hi-boot-5  RnHiFiles.hi-boot-6  RnHiFiles.lhs
02:15:49 <Marvin--> that looks really scary
02:16:09 * shapr watches Marvin-- do surgery on GHC
02:16:52 * shapr trips over a stomach
02:17:21 <Marvin--> oh dear, this code uses returnM and thenM instead of do notation
02:31:43 <Marvin--> There is way too much trickery here
02:32:44 <shapr> Marvin--: considered asking Simon PJ?
02:33:18 <Marvin--> I'm considering abandoning ghc and using helium instead
02:33:47 <Marvin--> $ ls helium/lib/*.hs | wc -l
02:33:47 <Marvin-->       3
02:33:52 <Marvin--> very tempting :-)
02:35:00 <Marvin--> unfortunately I'll have to write a parser for helium's core language myself, but that's not too tricky, and it's probably easier to give feedback to the user in terms of helium's syntax
02:44:09 <Marvin--> con Nothing : private import $con  Prelude.Nothing [custom $type  ["Maybe a"]]  = #(0,0);
02:44:14 <Marvin--> okay, that's pretty verbose
03:35:02 <shapr> Marvin--: did you see Simon PJ's answer for how to simply make all hcr files?
03:35:07 <shapr> it's cute and cheesy
03:36:24 <Marvin--> heh, cute
03:36:52 * Marvin-- grumbles at the damn top-poster
03:47:36 <creature> Heh, I get annoyed at people who don't snip correctly.
03:49:58 <Marvin--> A: Because it messes up the order in which people normally read text.
03:49:58 <Marvin--> Q: Why is top-posting such a bad thing?
03:49:58 <Marvin--> A: Top-posting.
03:49:58 <Marvin--> Q: What is the most annoying thing on usenet and in e-mail?
03:51:08 <creature> Wade through 500 lines of quoted text for a one-line "Me too" response. Grr.
03:52:10 <Marvin--> :)
03:52:31 <Marvin--> yeah, when you agree you should snip the entire message out and just say "me2"
04:08:33 <Marvin--> ugh, it's not very fun writing a parser for a language you only have the code for a pretty printer for
04:24:03 <Marvin--> aiiih, unsafePerformIO on readIORef?! Icky icky people
04:37:27 <ludde> Is there some shortcut way to write: (\s -> return s { ssMatches = m))
04:37:36 <ludde> err, should be }
04:38:10 <Marvin--> not that I know of
04:41:16 <ludde> return . {ssMatches = m} is invalid ?
04:42:42 <Marvin--> {ssMatches = m} is not a function
04:42:47 <ludde> oh
04:42:48 <ludde> ok
04:43:11 <Marvin--> if it was, you'd be writing {ssMatches = m} s instead, wouldn't you?
04:43:15 <Marvin--> it's just a piece of syntactic sugar
04:46:22 <Marvin--> Maybe I should steal code from helium instead of parsing the output
05:02:43 <ludde> can I rewrite: \u -> do v <- readMVar u; return $ f v
05:02:49 <ludde> to something like: readMVar >>= (return . f)
05:05:56 <Marvin--> you cn rewrite   do v <- readMVar u; return $ f v  to  readMVar u >>= \v -> return $ f v  to  readMVar u >>= return . f  but you still need \u -> toplevel
05:06:26 <Marvin--> perhaps you need the parenthesis in (return . f), I don't remember
05:07:54 <ludde> ok
05:07:56 <ludde> thanks
06:46:21 <shapr> nej, det har jag inte
06:46:25 <shapr> ja, det har jag
06:47:47 <shapr> jag har många dator.
06:47:58 <shapr> datorn är gammal.
06:48:04 <shapr> er, "datorna"
06:48:05 <shapr> sheez
07:06:09 <Marvin--> "jag har många datorer"
07:06:37 <Marvin--> "datorn är gammal" or "datorerna är gamla" if you want plural
07:10:57 <shapr> hey, what's plural of foto in swedish?
07:16:37 <shapr> see me apply my usual calm and serious attitude to a webcam --> http://kungens.kemi.fi/~shae/foto/
07:31:07 <Marvin--> "foto" isn't really a word, it's an abbreviation of fotografi, which has plural fotografier
07:31:11 <Marvin--> but you usually say foton
07:31:15 <shapr> ok
07:31:27 <Marvin--> ett foto, flera foton
07:40:05 <ludde> Is there some shortcut for a >>= (return . b)
07:40:11 <ludde> err
07:40:16 <ludde> c <- a >>= (return . b)
07:42:51 <Marvin--> why should there be?
07:43:03 <ludde> cause it's too much to write? :)
07:44:35 <dennisb> looks like liftM
07:44:50 <shapr> is that a >>= c >>= return b ?
07:44:51 <ludde> yeah, thanks
07:45:01 <ludde> c <- liftM b a
07:45:18 * shapr thinks of foldr1 (>>=) [a,b,c]
07:45:32 <shapr> though I think sequence is actually implement as foldr1 (>>=)
07:45:36 <Marvin--> oh, sorry, I was totally misunderstanding
07:46:28 <ludde> liftM x is the same thing as return x then?
07:46:36 <ludde> hmm, no
07:58:22 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "New HTk release http://www.informatik.uni-bremen.de/htk/", "New DSP libs - http://users.snip.net/~donadio/haskell/", "IOHCC - http://iohcc.mgoetze.net/", "Gtk+HS 0.15.2 released"]' by shapr
07:58:47 <Riastradh> What's the #sml bit for?
07:59:02 <Marvin--> Riastradh: "Don't talk ML here"? :)
07:59:08 <Riastradh> Ah, ok.
07:59:35 <Marvin--> I don't know, that was a guess
08:05:54 <dennisb> some people write c <- b `liftM` a, so it looks like some kind of application
08:06:16 <dennisb> But I never do that
08:17:24 <shapr> hi redcrosse 
08:17:31 <redcrosse> heya
08:17:37 <shapr> what's up?
08:17:46 <redcrosse> nada
08:17:53 <redcrosse> what're you up to?
08:18:03 <shapr> java + xml
08:18:17 <redcrosse> yum
08:18:30 <shapr> at least it pays well
08:18:42 <redcrosse> true
08:26:02 <SyntaxPolice> shapr: is it hard for an american to be permitted to work Sweden?
08:26:09 <SyntaxPolice> work in Sweden :)
08:26:30 <Marvin--> yeah, we're extremely scared of american terrorists, so it's very hard
08:26:32 * Marvin-- nods
08:26:32 <Robert> Just be white, and not from the east, and things will be OK.
08:27:35 <SyntaxPolice> heh. Harper's Index claims that 1/3 of brits surveyed believe that America is more of a threat to world peace than Iraq.
08:29:46 <Robert> Just 1/3? :)
08:30:05 <shapr> SyntaxPolice: I'm the life partner of an EU citizen, so it's easy for me.
08:30:19 <shapr> dunno about US citizens just wanting to show up by themselves.
08:38:01 <shapr> hi argv[0] 
08:39:07 <SyntaxPolice> shapr: what if I brought another US citizen ;)
08:41:26 <shapr> SyntaxPolice: you could probably find a lot of info on the swedish immigration site.
08:43:50 <esap> hmm.. what is a zygomorphism? [from http://www.willamette.edu/~fruehr/haskell/evolution.html]
08:46:16 <shapr> esap: seems to be some kind of accumulator
08:46:24 <shapr> http://www.google.de/search?q=zygomorphism+&hl=xx-hacker&lr=&ie=UTF-8&start=10&sa=N
08:46:30 <shapr> oh, you may not like my language settings
08:47:42 <shapr> http://www.wordreference.com/English/definition.asp?en=zygomorphous
08:49:07 <esap> oh it's some kind of symmetry property? hmm.. I guess I should have known that then :-)
08:53:00 <esap> "zygomorphism (Malcolm, 1990): a function which, although not catamorphic by itself, becomes catamorphic when tupled with another function"). Hmm...
08:54:33 <shapr> like what?
08:54:44 <shapr> oh
08:54:57 <shapr> depends on what 'tupled with' means
08:55:18 <shapr> lots of functions might be zygomorphisms
08:55:46 <esap> hmm.. found it from ]web.comlab.ox.ac.uk/oucl/work/jeremy.gibbons/publications/accumulations.ps.gz, might need some reading that to understand it fully.
08:56:32 <Smerdyakov> Wow. Not in Wikipedia.
08:59:14 <shapr> I just had an evil realization.. if Haskell unicode sources become a reality, we'll be able to do this: http://www.vector.org.uk/v153/xwd153.htm
08:59:23 <ludde> haha, this looks unreadable:
08:59:24 <ludde> (forAllMatches $ return . not . elem (udName u) . mdUsers) >>= (`when` error "You have not joined that match") . or
08:59:58 <shapr> ludde: you need some where in there
09:00:05 <ludde> what do you mean
09:00:23 <ludde> to make it even more unreadable? :)
09:01:05 <shapr> clearer actually :-)
09:01:11 <ludde> oh
09:01:14 <shapr> unless this is part of your IOHCC entry? :-)
09:01:17 <ludde> no :)
09:01:36 <ludde> can I have single-line wheres?
09:03:05 <Smerdyakov> Probably with explicit braces and semicolons
09:04:42 <shapr> what do you mean single-line wheres?
09:04:57 <ludde> can I use where in a single line?
09:05:02 <ludde> i mean
09:05:09 <ludde> if I used where in the above, it would become many lines?
09:12:17 <shapr> you could probably use where on the same significant whitespace line if you have only a single where thing defined
09:17:20 <shapr> one week two days till 0th IOHCC ends
09:19:58 <Igloo> Eeek
09:22:53 * shapr bounces happily
10:21:14 <hdaume> anyone here know much about VC dimensionality?
10:21:53 <emu> venture capitalists have only one dimension: money
10:23:18 <eivuokko> Are you sure they don't have time atleast?
10:26:18 <shapr> what's VC?
10:28:25 <eivuokko> It's something to do with neural networks, right?
10:31:42 <hdaume> it's a measure of the complexity of a class of functions
10:32:18 <eivuokko> That sounds vague.
10:33:15 <hdaume> it's basically a way of measuring how difficult it is to learn a function in a given class (i.e., the class of polynomials is more complex than the class of linear functions)
10:33:53 <Janni> hiya!
10:35:58 <hdaume> hi
10:39:34 <shapr> y0
11:33:47 <shapr> hi giedi 
11:34:08 <giedi> lo
11:36:10 <bubba1034> Ok. I popped into the ocaml group to ask about SWIG and OCaml. THe same question applies here.
11:36:38 <bubba1034> Does anyone know if SWIG supports Haskel? If so can you point me to a web page?
11:39:51 <shapr> no, swig doesn't work with Haskell.
11:39:54 <shapr> only ocaml
11:43:27 <Marvin--> it'd been nice if the FFI supported calling function pointers and struct members :)
11:44:08 <shapr> I'd like to see SWIG support in Haskell
11:44:24 <Marvin--> my epxerience with SWIG is that it sucks
11:44:26 <shapr> that would make jlouis' suggestion very practical (wrap libs before writing)
11:44:31 <shapr> really?
11:44:33 <Marvin--> (guess why I wrote pyopenssl)
11:44:36 <shapr> oh
11:44:39 <radix> is Haskell's C API any good? err... for whatever the popular haskell compiler is
11:44:40 <shapr> you wrote pyopenssl?
11:44:54 <Marvin--> yeah, that's the main thing I did at strakt
11:45:07 <shapr> whoa, nifty
11:45:15 <shapr> you still at strakt?
11:45:32 <radix> marvin is a leeto ereeto
11:45:42 <Marvin--> I'm sort of pseudo-hired I guess you could say :) I usually only work there during summers
11:45:45 <shapr> what an ereeto?
11:46:00 <Marvin--> but it's been known to happen that they have an emergency and I've jumped in to work a few hours
11:46:28 <Marvin--> well, maybe not an emergency :) but rather "would you mind popping in for a few hours to look at this?"
11:46:51 * Marvin-- also wonders what an ereeto is
11:47:51 <shapr> ya know, an instance of Arbitrary for Ext Core would probably keep Simon PJ busy for weeks.
11:47:58 <shapr> same for Arbitrary for TH
11:48:04 <Marvin--> heh
11:48:52 <shapr> that is, if QC could save the test case before running it
11:49:03 <shapr> otherwise I suspect GHC would repeatedly fall over and die
11:49:08 <Marvin--> heh
11:49:42 <shapr> radix: the Foreign Function Interface is standard, and 99% supported by GHC and Hugs
11:50:08 <radix> hm, is there any interface for writing Haskell extensions in C?
11:50:25 <shapr> yes, the FFI
11:50:41 <radix> oh, of course
11:50:47 <radix> you'd just write C code to be called by the FFI :)
11:50:50 <shapr> right
11:51:32 <radix> is there a way to create the haskell datastructures with C, though? like, if you wanted to make an abstraction over a function pointer
11:51:51 <shapr> I think there already is one..
11:51:52 <shapr> Ptr
11:51:55 <radix> i guess you cauld implement that abstraction in the haskell code, if it just managed an integer representing the pointer
11:52:01 <bubba1034> shapr: You mean Green Card.
11:52:16 <radix> and then just pass the pointer to some C code that can cast and call it
11:52:47 <shapr> bubba1034: no, I mean the FFI
11:54:48 <shapr> radix: http://www.cse.unsw.edu.au/~chak/haskell/ffi/
12:05:17 <bubba1034> shapr: Yeah must be realatively new ( or I missed it last time I looked ).
12:16:18 <shapr> hi mairas, argv[0] 
12:16:35 * shapr bounces
12:16:53 <shapr> I wish I could persuade my clients that I can do this XSL stuff much faster with HaXml
12:19:38 <giedi> shapr: maybe if microsoft offered a compiler :(
12:22:49 <bubba1034> shapr: What do you mean by faster? Implement faster, or run faster?
12:24:10 <shapr> e) all of the above
12:25:44 <bubba1034> Find something you can do over a weekend. Then bring it in and say I did this in X hours over the weekend. You can pay me for my time, or I can do it over.
12:26:33 <bubba1034> If they decide that you should do it over they can see how much longer it took. They also have the two executables that they can compare speedwise.
12:27:50 <mairas> hi shapr... sorry, was afk...
12:32:19 <bubba1034> A question about FP in general.
12:34:29 <bubba1034> I would dump ML and move over to Haskell, but I feel too new to FP at this point to eshew the imperative features of ML.
12:35:16 <dark> bubba1034: You can get imperative Haskell by doing everything in IO :-)
12:39:27 <bubba1034> In intro's to FP, Haskell, or ML, they all say mutable variables should not be used in FP, but that there is a way to simulate them.
12:39:27 <SyntaxPolice> bubba1034: on the other hand, maybe you'd become a much better functional programmer without an imperative crutch :)
12:39:27 <bubba1034> But I never found the parts where they describe how to simulate them.
12:39:27 <Riastradh> bubba, do you really need them?
12:39:27 <bubba1034> Let's say I don't want to paint myself into a corner where I need them and then discover I have no way out.
12:39:27 <Riastradh> You'll find out how to simulate them when you read about monads, but until you do, you won't need them.
12:39:27 <hdaume> bubba1034: if you force yourself to not use the imp features of ML, then you might as well just learn haskell.  if you don't force yourself to not use them, then you'll most likely end up writing very imperative code
12:39:27 * hdaume is off to lunch
12:40:38 <dark> Riastradh: The problem with Haskell is that you need to know about monads just to write "Hello, world!"
12:41:33 <Riastradh> dark - eh, that's just because "Hello, World!" happens to be an I/O device, and I/O is inherently imperative.
12:41:47 <radix> Riastradh: yes. and I/O is important :)
12:42:07 <shapr> mairas: neat code
12:42:24 <mairas> shapr, what is?
12:42:34 <shapr> the latex abbrev finding stuff
12:42:46 <SyntaxPolice> You don't need to know monads to return "Hello, World!" :)
12:42:50 <mairas> oh. :-)
12:43:05 <mairas> wouldn't know about that, took ages to write. ;-)
12:43:27 <dark> My point is that main is an IO function so you can't avoid it.
12:43:39 <mairas> I'm still in very much the initial stages of trying to grok Haskell...
12:44:10 <bubba1034> The problem is not that you need IO to write "Hello World". The problem is that *real-world* programs are imperative.
12:44:25 <bubba1034> That's the main point of "Awkward Squad".
12:44:59 <SyntaxPolice> dark: I'm under the impression that the best thing is to use the IO monads in Main without understanding them at first, and use purely functional programming for the rest.
12:45:07 <SyntaxPolice> (to learn that is)
12:46:35 <shapr> mairas: you have any questions?
12:46:40 <bubba1034> From what I've seen of monads, they are not hard to learn. The problem is that they are described in papers which are basically academic.
12:47:06 <bubba1034> Academic papers are generally harder to understand than tutorials.
12:47:14 <shapr> I think monads, like objects, are an abstraction concept that requires a certain amount of learning, and then suddenly you understand them.
12:47:19 <mairas> shapr, sure, but no show-stoppers yet. :-)
12:47:50 <mairas> The problem I am now trying to tackle is described at http://mairas.net/wiki/JournalOct2002
12:47:52 <shapr> so, if you want to understand monads, use them for awhile, and everytime they don't behave, figure out why they don't behave.
12:47:56 <SyntaxPolice> I found that "THe craft of functional programming" by Thompson handled monads nicely.
12:48:00 <Marvin--> bubba1034: Monads for the Working Haskell Programmer is a very good introduction to state monads IMO
12:48:16 <mairas> (in the middle of the Finnish text)
12:48:46 <shapr> kylla ;-)
12:49:22 <mairas> You Swedish? :-)
12:49:55 <shapr> ei, minä olen american
12:50:04 <mairas> oh!
12:50:09 <shapr> and my finnish is very bad.
12:50:22 <mairas> I'm still impressed. :-)
12:50:37 <shapr> I lived in Tornio for three years, my finnish really should be better.
12:50:55 <mairas> But for the record - the music mentioned in the assignment is really not of my liking. ;-)
12:50:58 <shapr> heh
12:51:00 <mairas> Tornio? How come?
12:51:09 <shapr> I met this woman on ICQ.....
12:51:14 <shapr> and here I am.
12:51:29 <mairas> gee, cool!
12:51:32 <Riastradh> Humph, is there no Haskell Wiki?
12:51:54 <mairas> That'd make a great project!
12:51:59 <shapr> Riastradh: http://purl.org/wiki/haskell/RecentChanges
12:52:16 <Marvin--> shapr: heh, sounds like a friend of mine, though he ended up in Wisconsin I think it was
12:52:33 <shapr> I nearly ended up in Wisconsin...
12:52:41 * shapr decides that's seriously off-topic
12:52:54 <mairas> shapr: but that's not a WikiWeb coded in Haskell...
12:53:01 <shapr> truly, it's not.
12:53:29 <shapr> Marvin-- wrote a plugin system for Simon Marlow's Haskell Web Server
12:53:34 <Riastradh> Scroll down -- there's a page called 'HaskellWikiInHaskell' or something.
12:53:40 <shapr> I suspect that would be the best place to start writing a HaskellWiki
12:53:43 <Marvin--> http://www.hackles.org/strips/cartoon31.png *rofl*
12:53:44 <bubba1034> Sounds like my metaphrical mp3 database.
12:54:00 <shapr> Marvin--: heh! that's great!
12:54:28 <shapr> I'd like to see Wiki written in Haskell
12:54:47 <shapr> Igloo has said he'll actually start using a wiki written in Haskell ;-)
12:55:08 <mairas> shapr: be sure to do it right (??): internal XML representation with XSL-controlled output.
12:55:56 <Marvin--> http://www.hackles.org/strips/cartoon36.png  heeheehee
12:56:24 <shapr> data Wiki = StudlyCaps String | LiteralLink String deriving XML
12:57:01 <shapr> of course, that would require Template Haskell 
12:57:12 <mairas> Template Haskell?
12:57:22 <shapr> it's the new reflection / macro system for haskell
12:57:38 <mairas> slowly, you make me dizzy. :-)
12:57:42 <shapr> :-)
12:57:49 <shapr> there's a lot of cool stuff happening in the Haskell world.
12:58:13 <Smerdyakov> Should I apply for a summer job at Microsoft? I can be pretty sure they won't turn me down if I do.
12:58:57 <shapr> Smerdyakov: sure go for it, lots of cute chix in Seattle.
12:59:29 <mairas> shapr: seems pretty active for sure. I just should finally climb the last few steps of the initial learning curve so that I could write simple programs in Haskell without excessive pain...
12:59:31 <dark> Marvin: That assignment looks like gibberish to me :)
12:59:40 <Smerdyakov> UK might be where the things more my speed are happening, w/ Simon PJ and co =)
13:01:28 <Marvin--> dark: sheesh :)
13:01:28 <dark> shapr: One thing I'd like in a Wiki is freedom from StudlyCaps :)
13:01:28 <shapr> yah, that's true. Working with Simon PJ would be great.
13:01:28 <shapr> dark: you could have literal links...
13:01:28 <shapr> dark: how else could you delimit a link?
13:01:28 <mairas> dark: true. but actually many wiki implementations don't force it any longer...
13:01:28 <mairas> havin syntax like [this is a link]
13:01:31 <mairas> +f
13:01:38 <mairas> "g", that is. dammit.
13:01:40 <dark> shapr: Yeah but if everyone else uses StudlyCaps it won't help much :)  I guess I don't like the style of speech it encourages.
13:01:58 <shapr> well, how else to simply and easily make a link?
13:02:12 <mairas> shapr: like [this]
13:02:22 <mairas> works for PhpWiki already.
13:02:29 <shapr> yah, and for many wiki implementations
13:02:53 <shapr> but, the strong point of studly caps is that it's normal text written in a slightly unusual way
13:03:06 <Marvin--> http://www.hackles.org/strips/cartoon66.png  this comic is great :P
13:03:12 <Marvin--> and they have penguins for sysadmins! :P
13:03:45 <shapr> heheh
13:05:16 * Marvin-- isn't getting much work done today :P
13:05:28 <giedi> http://www.hackles.org/strips/cartoon267.png lol
13:07:10 * shapr laughs
13:07:55 <Marvin--> no 83... *lol* "7 of 9 lives" hahahaha
13:10:22 * esap almost has an iohcc entry ready. Just have to optimize it for space.
13:11:16 <bubba1034> Try not not to...must resist...can't hod out any longer...
13:11:21 <bubba1034> where are here breats?
13:12:19 <Marvin--> heh
13:12:32 <bubba1034> sorry where are her breasts?
13:13:08 <Marvin--> as a friend of mine said about 7/9, "she probably has implants""
13:13:18 <SyntaxPolice> heh
13:13:31 <jlouis> one of the better
13:13:39 <shapr> esap: yay!
13:14:00 <shapr> borg implants, scary thought
13:14:08 <Marvin--> http://www.hackles.org/strips/cartoon98.png
13:16:16 <jlouis> Todays lecture main point: Haskell is friggin big
13:16:36 <Smerdyakov> Haskell is the C++ of functional languages. :D
13:16:38 <Marvin--> uhm, what do you mean with "haskell" in this case?
13:16:52 <Smerdyakov> All the insane extensions in ghc
13:16:55 <jlouis> Haskell 98
13:17:14 <Marvin--> Haskell 98 isn't that big
13:17:20 <jlouis> though there are some nice insanity in multi parameter type classes
13:17:29 <jlouis> compared to SML it is
13:17:30 <Marvin--> ... which isn't haskell 98
13:17:41 <jlouis> I know
13:17:50 <Smerdyakov> Now, I didn't say Haskell 98, did I?
13:18:47 <jlouis> Haskell is indeed the C++ of functional languages
13:18:48 <giedi> later
13:18:53 <esap> I think type classes were not a good idea (who figured out that a single interface can only have one implementation!)
13:19:47 <Marvin--> uh?
13:20:22 <esap> I mean, how many times have you needed to write two instances for the same type class?
13:20:45 <Marvin--> you can, but you can't instantiate the same type more than once for a class
13:20:48 <esap> .. and didn't want to rewrite the concrete type.
13:22:30 * esap is expressing himself very badly today :-(
13:22:48 <Marvin--> yes you must be, I don't understand what you're saying
13:23:03 <mairas> gee whiz, I just defined my first type. ;-)
13:23:22 <esap> I mean, given a class and a type, how do you define two instances for those.
13:23:37 <Marvin--> you don't
13:23:49 <Marvin--> how would the compiler tell which instance to pick?
13:25:04 <esap> of course it couldn't, unless the programmer told how to choose.
13:25:46 <Marvin--> I'm sorry, I don't see why you can't wrap it in a newtype if you need several instances for the "same type"
13:26:31 <esap> well you can always wrap in newtype. But they would not be the same type.
13:26:53 <esap> And thus would not be compatible.
13:27:20 <Marvin--> the two *instances* would be incompatible!
13:28:46 <esap> no, I mean you want to reuse the same representation, say you have a representation for points. Then you have an interface. But you notice the same representation can implement this interface in two ways. If you use newtype, you are saying that they have different representation. You do not want that.
13:29:59 <Marvin--> what languages can you do this in?
13:30:13 <dark> A type is not just representation.  Consider the difference between Int32 and Word32, for example.
13:30:23 <Marvin--> I'm having a hard time understanding why you want it
13:30:27 <dark> The way an interface like Num is implemented could be the critical difference between two types.
13:31:21 <Marvin--> http://www.hackles.org/strips/cartoon146.png
13:31:59 <dark> Marvin: Don't bother, I'm reading all of them now :)
13:32:13 <Marvin--> :)
13:32:34 <esap> marvin: there was actually a paper that describes this kind of "extension" to Haskell. But I couldn't quickly find it now :-(
13:39:05 <esap> dark: ok, I agree, you could think of types like that. But I think it prevents you to express some concepts [that is, N-to-N relation between data and interfaces (think of instances as 'virtual tables (like in C++)'. Then those tables are not first-class objects.]
13:40:11 * esap means virtual _function_ tables.
13:41:03 <Marvin--> "level 4: penguin *with beard*" *lol*
13:41:24 <mairas> a newbie question: now that I have proudly defined my own class, how can I write a "show" function for it so that hugs can display instances of it?
13:42:02 <Marvin--> your own class or your own data type?
13:42:09 <mairas> data type.
13:42:11 <Marvin--> classes are something else in Haskell :)
13:42:30 <esap> classes in Haskell are like interfaces in other languages :-)
13:42:37 <mairas> oh, yeah. sorry, that was a typo. :-)
13:42:45 <Marvin--> when you want the show function, for example, you instantiate the Show class :)   instance Show YourDataType where show val1 = ...
13:44:15 <mairas> ok. thanks. back to reading tutorials again. ;-)
13:44:41 * esap just now noticed that the new revired report fixed that showsPrec stuff.
14:04:41 <mairas> Time to go to bed... You can count on me coming back asking silly questions, though. :-P
15:11:58 <shapr> hi Pseudonym 
15:12:07 <shapr> what's up?
15:30:16 <Pseudonym> G'day.
15:30:23 <Pseudonym> In Release Hell(tm).
15:30:36 <jlouis> hehe
15:31:02 <Pseudonym> Currently writing the install manual.
15:31:26 <jlouis> which thing?
15:31:38 <Pseudonym> Oh, this is my day jobn.
15:32:01 <jlouis> Ahh, like me who did a postgreSQL install
15:34:23 <Pseudonym> I'm trying to make the manual as cryptic as possible, filling it full of jargon that only people intimately familiar with the product would have a hope in hell of understanding.
15:34:28 <Pseudonym> I believe this is SOP.
15:35:16 <jlouis> hehe
15:35:54 <esap> Manuals are always cryptic for the end-users, irrespectively of what you do.
15:46:01 <dark> Pseudonym: The proper way to do it is to write it in Korean, then hire a Chinese firm to translate it to English and German.  Then give your clients the German version.
15:46:13 <Pseudonym> Ooh, good idea.
15:47:25 <jlouis> hehe
15:47:32 <jlouis> that is proper documentation ;)
17:08:10 <hdaume> goin' home
17:40:20 <emu> better yet, have babelfish do the work
19:27:55 <shapr> Pseudonym: now you just have to create wiki home page too
19:53:47 <emu> vvikie
21:21:39 <Pseudonym> Sorry?
21:21:43 * Pseudonym was afk
21:21:49 <Pseudonym> Bleeding for my country.
23:03:48 <radix> 'night
