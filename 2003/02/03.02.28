04:06:59 * shapr bounces
04:24:42 <shapr> hi buggs
04:24:56 <buggs> hoi shapr :)
04:26:43 <shapr> hoe gaat het met jou?
05:13:04 <shapr> deego: it's not here yet ;-)
05:13:23 <deego> shapr: oh ok, are you creating the bot?
05:13:53 <shapr> nah, it's already created, just needs a command parser
05:55:36 * shapr bounces
05:55:40 <shapr> anything exciting going on today?
05:57:06 <Smerdyakov> Homework?
05:57:07 <opet> yes!
05:57:13 <opet> actually, wait
05:57:14 <opet> no
05:57:20 * opet sighs
05:57:29 <shapr> oh well
08:01:38 <shapr> hi redcrosse 
08:01:56 <redcrosse> hello
08:02:00 <shapr> what's up?
08:02:09 <redcrosse> nothin'
08:02:12 <redcrosse> what're you up to?
08:02:34 <shapr> hacking on elisp at the moment
08:02:49 <shapr> learning how to do images and mode-line colors
08:03:16 <redcrosse> cool
08:17:33 <shapr> hey jewel! ltns!
08:25:00 <jewel> hello
08:27:52 <hdaume> morning
08:29:23 <shapr> hi hal
08:29:53 <shapr> jewel: hey, someone else just made a joy deb, put it online yesterday
08:37:40 <jewel> is joy being used much
08:37:50 <jewel> I don't think I'm on the ML any more
08:37:57 <shapr> it's gaining popularity
08:38:12 <jewel> Really?
08:38:25 <shapr> yah
08:38:36 <shapr> someone implemented it in OCaml or ML recently
08:38:41 <jewel> Interesting
08:59:19 <hdaume> anyone know if there's a way to redirect stdout and stderr on an already-running process?
09:08:49 <Igloo> I recently heard someone say there was a way to do it given in Phrack I think
09:10:51 <hdaume> i see online there's a way to do it with gdb that sometimes works :)
09:13:16 * esap just tried to do it by relinking /proc/<pid>/fd/<fd> but it didn't work :-)
09:57:53 <Igloo> Oooo! Pretty swirly thing!  http://urchin.earth.li/~ian/bar.mpg
09:58:33 <whee> it's not loading :(
09:59:06 <Igloo> Loading? plaympeg in smpeg-plaympeg plays it for me
09:59:09 <whee> I mean not downloading
09:59:15 <Igloo> It's not *that* pretty so you're not missing out on much anyway  :-)
09:59:22 <Igloo> Oh, why not?
09:59:26 <whee> times out
09:59:29 <whee> :|
09:59:49 <Igloo> I wonder if it's an ECN issue - what's your IP address?
10:00:21 <whee> 24.59.211.112
10:01:50 <Igloo> Oh, I thought ecntraceroute existed
11:01:31 <Marvin--> caps again?
11:01:37 <Marvin--> How was the Wednesday caps?
11:27:08 <shapr> yow
11:41:54 <Janni> hello, boys and girls!
11:42:04 <shapr> hiya
11:45:06 <Marvin--> girls? where?
11:46:53 <shapr> could be
11:52:07 <buggs> it's girls and boys!
11:58:30 * shapr bounces
12:07:19 <shapr> it's true Clean 2.0 has been lGPL'ed
12:07:22 <shapr> yay!
12:07:41 <shapr> I've heard Clean is basically Haskell with uniqueness types rather than monads
12:07:42 <whee> you'd better hope ghc works before I get a hold of a compiler
12:07:47 <whee> :P
12:07:52 <whee> (of a clean compiler, that is)
12:07:54 <shapr> is there a comparison of uniqueness types and monads?
12:08:02 <shapr> whee: I think you can freely download them...
12:08:08 <shapr> whee: truly I do hope ghc works for you
12:08:15 <whee> heh
12:08:17 <shapr> whee: anything I can do to help? :-)
12:10:19 <whee> I think I actually tried to learn clean back in the day, before I knew any functional languages
12:12:23 <Marvin--> shapr: "basically" haskell yes, they don't have curried types by default, you have to say a -> (b -> c) explicitly
12:13:56 <whee> hrmf, no source for this?
12:14:38 <whee> oohf, link in the middle of nowhere
12:17:41 <hdaume> Marvin--: can't you just say 'a b -> c' ?
12:18:01 <hdaume> (in clean, constructors have to be parenthesized)
12:18:35 <Marvin--> hdaume: that's not a curried type afaik
12:18:47 <Marvin--> that's an uncurried type
12:19:09 <Marvin--> what I meant was "if you want partial application, you have to explicitly write the type as returning a function"
12:19:13 <shapr> can I steal libraries from Clean easily? :-)
12:19:14 <Marvin--> iirc of course
12:19:30 <hdaume> Marvin--: oh, hrm...i don't remember anymore :)
12:21:26 <whee> I can't even figure out how to compile clean 
12:21:35 <Janni> re
12:23:20 <unknown_> shouldn't: foldl (-) 0 [3,2,1] give me a result of 0? It's giving me -6
12:23:31 <unknown_> this is very odd, last night it was giving me 0 as a result, today -6
12:23:35 <hdaume> (((0-3)-2)-1) = -6
12:23:39 <unknown_> oh
12:23:41 <unknown_> hrm
12:24:01 <hdaume> or is it the other way?
12:24:05 <unknown_> then I must have been doing it some other way last night
12:24:18 <hdaume> did you use foldl1?
12:24:31 <unknown_> I thought it was (((3-2) -1) -0)
12:24:51 <unknown_> maybe it was foldl1
12:25:03 <unknown_> I was using foldl1 with /
12:25:26 <whee> foldl1 with - will get you a 0 as well
12:25:40 <whee> with / it's probably something like 1.5
12:25:42 <unknown_> I think I confused all the folding functions
12:26:09 <unknown_> foldl gives odd results with /
12:26:13 <unknown_> dunno why
12:26:22 <unknown_> I pass it 0 as the last number
12:26:29 <unknown_> foldl1 works fine though
12:33:07 <ludde> can I put 0:s (NUL) in haskell String:s ?
12:34:05 <hdaume> sure
12:34:14 <hdaume> let s' = chr 0 : s
12:34:22 <ludde> can I use that in pattern matching?
12:34:33 <ludde> myfunc ('\0':s)
12:34:37 <ludde> or something
12:34:39 <hdaume> case s of { '\0':s' -> foo }
12:34:46 <ludde> ok
12:34:50 <ludde> so \0 is legal :)
12:34:51 <ludde> fun
12:34:56 <hdaume> i believe so
12:35:41 <ludde> are strings stored like linked lists with one character / node inside ghc?
12:35:48 <hdaume> yup
12:35:54 <hdaume> (unfortunately)
12:36:09 <hdaume> though you can use PackedString to get more efficiency
12:36:15 <ludde> okay
12:36:51 <ludde> is it impossible to use arrays internally? ML uses arrays internally, doesn't it?
12:37:05 <hdaume> what do you mean by 'internally'?
12:37:27 <ludde> the "low-level" representation of a string
12:37:32 <hdaume> ah.  no.
12:37:58 <ludde> which question did that answer? =)
12:38:28 <hdaume> oh, the first.  ocaml uses packed character arrays internally; i'd imagine sml does something similar since you can't use array ops on strings there
12:39:39 <Smerdyakov> For SML, type string = char vector
12:39:49 <Smerdyakov> (Actually Word8Vector.vector for efficiency reasons)
12:39:51 <hdaume> ah
12:40:21 <Smerdyakov> For anyone not familiar with the types, a vector is an immutable array with constant-time access.
12:40:42 <ludde> does haskell have vectors
12:40:50 <hdaume> yes.  Array is a "vector"
12:40:58 <ludde> oh
12:42:06 <ludde> nice
12:46:18 <ludde> can I use hGetContents on TCP/IP socket handles?
12:56:41 <ludde> does GHC use a O(n) lookup when finding the first pattern match that matches a function call?
12:57:22 <ibid> for one function i tried it did
12:57:27 <hdaume> yes
12:57:29 <ibid> but the function was *huge*
12:57:48 <hdaume> ludde: how else would you do it?
12:58:05 <ludde> hdaume: binary search?
12:58:12 <ibid> hdaume: table lookup, binary search, ...
12:58:56 <hdaume> i suppose you could do binary search if your data types were of nullary constructors...
12:59:50 <Smerdyakov> You don't need nullary constructors.
12:59:52 <hdaume> otherwise it's not clear to me how to handle 'f (Just (Just (Just (Left (Just 'a'))))))'
13:00:14 <Smerdyakov> Every pattern match that can fail is discrimination on a top-level constructor.
13:00:19 <hdaume> it will be somewhat smart about that, though, in that it will strip one constructor off at a time
13:00:33 <ibid> hdaume: i think i saw a paper about an efficient implementation of general predicate (pattern) matching for
13:00:40 <hdaume> unless you have guards, right?
13:00:58 <Smerdyakov> Oo, guards are silly. There's a reason SML doesn't have them ;-)
13:01:15 * hdaume will not be drawn into a language war :)
13:02:22 <hdaume> so hrm...i guess it's probably not O(n), since maching Nothing against 'Just (Just n)' then 'Just Nothing' then Nothing will only take two steps (reject the first two at the same time)
13:05:03 <Marvin--> hdaume: what, it makes a tree of them?
13:05:25 <hdaume> Marvin--: it inspects the top level constructer first, then descends
13:05:36 <hdaume> Marvin--: it's converted into a cascade of case expressions
13:06:59 <Marvin--> oh, right
13:08:03 <Marvin--> so it'll be kinda-logarithmic :)
13:08:19 <hdaume> kinda :)...depends on your datatypes and your patterns
13:09:46 <Marvin--> which is why I didn't say "logarithmic" ;)
13:20:22 * shapr sproings
13:20:38 * Riastradh explorbs.
13:24:21 <Marvin--> heh, the core code for  foo 3 = 4  without type signatures is hideous
13:25:33 <shapr> I want to improve my TestCore.hs code.. total random generation never gives anything worth putting into GHC
13:26:31 <Marvin--> and I'm about to give up on using Core in my master project
13:26:39 <shapr> :-(
13:26:41 <Marvin--> gonna talk to Koen about it first though
13:27:01 <Marvin--> I mean, I'm not really interested in expressions and functions, I'm more interested in declarations
13:27:12 <shapr> that's true
13:28:00 <Marvin--> so I'm trying to figure out how I can translate as much haskell as possible to a declarative style
13:28:25 <Marvin--> I guess I'll be breaking out where and let to top level declarations with freshly generated names, same with case et.c.
13:28:37 <shapr> that makes sense
13:35:36 <ludde> how do I explain to someone what a Monad is?
13:36:25 <shapr> I say "it's a way to subclass function call" 
13:36:29 <hdaume> that is the age-old question :).  who is this someone?
13:36:52 <ludde> hdaume: a friend, he doesn't know haskell too well
13:39:37 <hdaume> i rather like shae's explanation :)
13:39:50 <hdaume> but it is of course more than that
13:40:10 <hdaume> it's also a way to abstract away from implementation details
13:41:16 <shapr> right, what I said is one of those "lies-to-adults"
13:41:41 <shapr> an untrue but descriptive approximation of the real thing
13:41:43 <hdaume> if i were going to lie, i'd probably do it more so and say something like "It's a way to sequence things"
13:42:07 <ludde> is that a lie?
13:42:50 <hdaume> ludde: to some extent.  the obviously monad over 'data Id a = Id a' doesn't really sequence things
13:44:26 <hdaume> ...i guess it does...i dunno.  it depends what you mean by "sequence" :)
13:44:33 <ludde> I told him that you can use monads to write imperative programs that can have a state.
13:44:39 <shapr> that's true
13:44:45 <hdaume> yup
13:44:59 <shapr> it's like trying to describe objects to a procedural programmer
13:45:07 <shapr> it's not easy to put into one sentence
13:46:09 <shapr> I ended up saying "an instance is like a subroutine that never stops running, and you can reach into it and get out the current value of some variable."
14:45:58 * shapr pokes sjj 
14:50:55 <ludde> can I make constants in haskell?
14:51:06 <ludde> like enum or #define in C
14:51:32 <whee> everything is a constant
14:51:41 <whee> ignoring the monadic blah blah
14:51:53 <ludde> well
14:52:00 <ludde> I want to be able to use it inside a pattern match.
14:52:04 <ludde> instead of 
14:52:06 <ludde> parsePacket ('\0':s) = 
14:52:19 <Marvin--> ludde: ghc has a preprocessor
14:52:19 <ludde> I want to replace '\0' by a constant.
14:52:29 <Marvin--> or rather, you can use cpp yourself
14:52:56 <ludde> how would I do that
14:53:21 <Marvin--> ghc -cpp is one way, just cpp foo.in foo.out is another
14:54:25 <ludde> oh
14:54:44 <ludde> cool!
14:56:15 <Marvin--> don't overuse it :)
14:56:43 <ludde> no, I'm just using it to define Char constants.
14:59:02 <ludde> in what module do I find "ord" ?
14:59:42 <Igloo> Char
14:59:59 <ludde> how can I find out such things on my own?
15:01:39 <Marvin--> read the docs?
15:04:52 <Igloo> www.haskell.org/definition/, and for now it's best to use the revised link
15:09:32 <ludde> I've forgotten a lot of haskell stuff :(
15:10:32 <Igloo> Ah, you should write a CSE module to get you back into the swing of it
15:10:39 <ludde> CSE?
15:10:41 <Igloo> And then give me a copy when you're dnoe  :-)
15:10:50 <Igloo> Common subexpression elimination
15:11:02 <ludde> sounds tough
15:11:03 <ludde> but
15:11:18 <ludde> I read that if you represent your tree as a DAG
15:11:23 <Igloo> I think it is, that's my current problem
15:11:28 <ludde> and before adding a new node, you check if it already exists in the DAG
15:11:29 <Igloo> DAG? In Haskell?
15:11:36 <ludde> i know, that's the problem :)
15:11:55 <ludde> if it exists there, you just make a reference to the already existing node, instead of making a new one
15:11:58 * Igloo should read papers on graph algs in Haskell
15:12:16 <ludde> I think I read that in the dragon book.
15:12:59 * Igloo gets how to do it with a DAG (although handling things like \x -> x and \y -> y may be fun)
15:13:12 <shapr> http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html
15:13:39 <shapr> oh I found an error in that book I need to send in...
15:14:11 <shapr> cute error: 'p iii "second edition" should be "first edition"'
15:15:46 <Marvin--> heh
15:15:55 <Marvin--> I guess they'll have to print a second edition to fix that ;)
15:16:20 * shapr grins
15:18:06 <Igloo> I got that book out of the library but ended up giving it back because I wasn't having time to read it
15:18:13 <shapr> aw :-(
15:18:20 <shapr> did you read any of it?
15:18:56 <Igloo> Not really - I scanned one of the first 2 chapters, I think, but the library at comlab has silly short loan times and don't remind you in time for you to renew books
15:19:25 <shapr> that sucks
15:20:18 <Marvin--> our library is good that way :)
15:20:44 <Marvin--> it sends you mail about a week after the books are due, and then you can renew them anyway... twice :)
15:23:43 <ludde> ok.. let's see if I remember how to make a monad.. hrm
15:24:11 <Igloo> Bah  :-)
15:24:23 <ludde> ?
15:24:55 <Igloo> At marvin's library being useful - n/m  :-)
15:25:38 <Marvin--> I've had A Theory of Objects here for months now
15:26:59 <Marvin--> oh damn, I have to return SPJ's book, too many renewals
15:27:12 <Marvin--> but I could renew AToO again :)
15:29:50 <ludde> hmm
15:30:03 <ludde> I'm making a monad to parse strings into objects.
15:30:05 <ludde> newtype PacketParser a = String -> (a, String)
15:30:25 <ludde> how would I indicate failure? (i.e. failure to parse the string)
15:33:02 <Marvin--> will you hit me if I say "with a monad"? :)
15:33:35 <Marvin--> normally you have String -> [(a, String)] though
15:33:59 <ludde> hmm
15:34:09 <Marvin--> but [] is a monad, so
15:34:12 <shapr> hi flippo_work
15:34:26 <ludde> maybe I could have newtype PacketParser a = String -> (Maybe a, String)
15:34:41 <ludde> or h
15:34:46 <ludde> maybe I could have newtype PacketParser a = String -> Maybe (a, String)
15:34:50 <ludde> that's probably better.
15:34:57 <flippo_work> Howdy, shapr
15:35:01 <flippo_work> I wonder if I'll ever understand monads.  My one category theory book doesn't mention them.
15:35:12 <Smerdyakov> Duuuude
15:35:23 <Smerdyakov> They're just shortcuts that pass an extra value behind your back.
15:35:51 <flippo_work> Smerdyakov: that's an explanation of monads?
15:35:51 <Marvin--> ludde: Maybe is also a monad
15:36:03 <Smerdyakov> flippo_work, yes
15:36:24 <Marvin--> ludde: why don't you just have PacketParser m a = String -> m (a, String)  and have instance Monad m => Monad (PacketParser m) :)
15:36:28 <flippo_work> Smerdyakov: sounds like a fancy name for "side-effect" but not as offensive
15:37:09 <Smerdyakov> Not really, since a monad can't have a side effect unless you return it or something you explicitly construct from it.
15:38:00 <flippo_work> I learn so much here :)
15:40:32 <Marvin--> ludde: yes, I'm evil :-)
15:49:37 <Marvin--> ludde: for extra evilness, do it with monad transformers ;)
16:14:22 <palomer> :o
16:20:51 <whee> noooo he's back
16:20:54 <whee> :)
16:24:33 <Hase^^work> //amsg\\\ good night to all !
16:52:49 <shapr> yow
16:53:47 <shapr> Smerdyakov: monads are more than just a value passed behind your back... look at the Maybe monad
16:53:49 <shapr> :-P
16:55:47 <Smerdyakov> Hm. What does >> do for Maybe?
16:58:04 <shapr> instance Monad Maybe where
16:58:04 <shapr>     Just x  >>= k = k x
16:58:04 <shapr>     Nothing >>= k = Nothing
16:58:04 <shapr>     return        = Just
16:58:04 <shapr>     fail s        = Nothing
17:00:29 <Smerdyakov> It's passing a value! It's just of unit type! =)
17:02:31 <shapr> but
17:02:50 <shapr> the function call is important, since it gets around explicit failure checking
17:06:58 <shapr> hi liiwi 
17:07:00 <shapr> wassup?
17:07:01 <liiwi> hihi
17:07:18 <liiwi> not much, heading to bed soon
17:08:06 <palomer> :o
17:08:10 <shapr> palomer: :-)
17:08:15 <shapr> liiwi: sleep is good
17:08:59 <liiwi> can't get anything done anyway..
17:09:12 <shapr> what are you trying to do?
17:09:29 <liiwi> just generally.. low motivation monkey
17:09:38 <shapr> yah, it's good to do something else when that hits
17:09:44 <palomer> is it a good idea to explicitly type all your functions?
17:09:49 <shapr> I usually play crack-attack for short breaks
17:09:56 <shapr> and write Haskell code for longer breaks
17:10:07 <shapr> palomer: usually it's not very important
17:10:22 <shapr> Chilli mentioned a neat way of dealing with optional type sigs
17:10:23 <liiwi> just cannot concetrate
17:10:27 <shapr> he writes all his code first
17:10:34 <shapr> and then comes back and adds type signatures
17:10:56 <shapr> and if the type sig differs from what he expected, he knows the code doesn't work as he expects it to
17:16:41 <palomer> why is this valid: data Point a a = Point a a ?
17:16:47 <palomer> isn't that recursive?
17:16:51 <Smerdyakov> No
17:16:54 <Smerdyakov> The first Point is a type
17:16:58 <Smerdyakov> The second is a constructor
17:17:19 <palomer> ahh
17:21:13 <palomer> this is fun!
17:21:16 <shapr> ?
17:21:26 <palomer> reading a gentle intro to haskell
17:21:29 <shapr> oh, ok
17:21:36 <palomer> is it the best known tutorial?
17:21:56 <shapr> I'd say there are several equally well known tutorials
17:22:11 <Smerdyakov> The ancient Babylonians are rumoured to have had a superior one, but this has yet to be confirmed conclusively.
17:22:43 <shapr> we suspect they got theirs just like they got the chainsaw and the car in the movie "living dead part 3"
17:22:55 <shapr> aka "army of darkness"
17:23:00 <shapr> which is, btw, an excellent movie.
17:24:11 <palomer> wee list comprehension is neat
17:24:16 <shapr> yah, it's fun
17:32:06 <palomer> what's fbot?
17:32:13 <shapr> huh?
17:32:23 <palomer> erm f bot
17:32:39 <shapr> sounds like function f getting argument bot
17:32:49 <palomer> true true
17:33:39 <palomer> does the lazy nature of haskell make for slower code?
17:33:54 <shapr> not necessarily
17:34:19 <shapr> the only case where lazy evaluation can get weird is in 'space leaks'
17:34:33 <palomer> space leaks?
17:35:05 <shapr> for example, you write a parser, it reads everything into memory, just in case parts of your parser fail
17:35:33 <shapr> so you might end up with *all* of your input in memory at once
17:35:52 <shapr> it's not difficult to fix, but it's very weird at first
17:37:32 <shapr> palomer: head (filter (> 5) [1..]) pulls five elements out the infinite list and then stops
17:38:08 <palomer> yhea, thats what I reading right now
17:38:21 <palomer> won't that only pull the first element?
17:39:01 <shapr> nah, it'll pull [1,2,3,4,5,6] actually
17:39:05 <shapr> first six elements I should have said
17:39:23 <palomer> but the head pulls a single one!
17:39:30 <shapr> sure
17:39:39 <shapr> but the filter doesn't...
17:40:01 <palomer> ah, gotcha
17:40:13 <palomer> hrm, I don't get this function:
17:40:37 <palomer> fib = 1:1:[a+b | (a,b) <- zip fib (tail fib)]
17:40:49 <shapr> what parts of it do you understand?
17:40:54 <palomer> hrm
17:41:00 <palomer> doesn't fib return a list?
17:41:06 <shapr> yes
17:41:29 <palomer> ok so fib gets it's 2 first elements
17:42:09 <palomer> isn't (tail fib) = 1:[a+b | (a,b)...] itself?
17:42:15 <palomer> whew this is making my head spin
17:42:32 <palomer> I see how it works out mathematicly
17:42:42 <palomer> but I can't fanthom how the compiler understands that
17:42:56 <palomer> ahh, because it's lazy
17:42:57 <palomer> hrm
17:43:01 <palomer> i'll let it simmer
17:43:05 <shapr> :~)
17:44:11 <palomer> last thing
17:44:20 <shapr> ?
17:44:23 <palomer> shouldn't zip xs ys = [xs,ys] ?
17:44:27 <palomer> and not []
17:44:37 <palomer> erm [(xs,ys)]
17:45:17 <shapr> xs and ys are each lists
17:45:29 <shapr> so it's actually [(x1,y1),(x2,y2)]
17:45:32 <shapr> I think that's right...
17:45:33 * shapr checks
17:46:01 <palomer> I mean zip (x:xs) (y:ys) = (x,y) : zip xs ys
17:46:53 <shapr> what's your question again?
17:47:51 <palomer> the book says zip xs ys = []
17:48:22 <palomer> and hugs doesn't lik emy vesion
17:48:42 <Igloo> As the second line?
17:49:10 <Igloo> You'll need to rename it if you want to write your own
17:49:31 <palomer> yhea
17:49:33 <palomer> I did
17:49:38 <palomer> the first one
17:49:50 <palomer> zip2 xs ys = [(xs,ys)]
17:51:04 <palomer> ohmy, me understando
18:00:02 <palomer> how do I end an expression in haskell?
18:00:07 <shapr> ?
18:00:42 <shapr> palomer: like what?
18:01:18 <palomer> data Sign = Positive | Neither | Negative
18:01:31 <shapr> that should work
18:01:31 <palomer> sign x | x > 0 Positive
18:01:39 <palomer> | x < 0 Negative
18:01:43 <palomer> | Neither
18:01:47 <shapr> ah, in that case you need to line up the guards
18:02:04 <Igloo> You don't technically have to line them up, but you need some white space in front of them
18:02:06 <Riastradh> Shouldn't 'Neither' be 'Zero?'  (Isn't it a predefined constructor, and wouldn't the name fit better?)
18:02:10 <Igloo> Not lining them up would be strange, though
18:02:38 <palomer> Riastradh: good point
18:04:28 <palomer> but Zero isn't a sign
18:04:49 <palomer> how do I put no guard in the end?
18:05:06 <palomer> I can't just put neither, it flags an error
18:06:05 <shapr> I don't understand what you mean...
18:06:45 <palomer> | Neither
18:07:16 <palomer> flags an error
18:07:24 <palomer> ERROR "/home/palomer/test.hs":5 - Syntax error in declaration (unexpected `}', possibly due to bad layout)
18:07:51 <Riastradh> Don't you need an 'otherwise' there?
18:08:13 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Palomer.hs
18:08:17 <kawfee> hello
18:08:31 <shapr> hi kawfee 
18:08:31 <palomer> ah, good point
18:08:59 <shapr> hi lament 
18:10:53 <shapr> palomer: are you hitting tab in the haskell-mode buffer to line things up?
18:12:12 <lament> hi.
18:12:31 <shapr> uh oh... the sands of sleep are in my eyes
18:12:54 <palomer> shapr: sometimes
18:13:07 <palomer> it really screws up sometimes
18:13:09 <palomer> I don't get it
18:14:37 <Igloo> You need = signs
18:14:42 <Igloo> Between the guard and expression
18:15:30 <shapr> ah yes..
18:15:38 <palomer> hrm, tab doesn't allign haskell properly
18:15:44 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Palomer.hs
18:15:47 <palomer> yhea, I put them
18:16:15 <shapr> I hit C-c = for my equals signs
18:16:21 <shapr> makes haskell-mode line things up correctly
18:16:36 <shapr> you need to <tab> the guards into alignment first, I think
18:18:34 <palomer> gotcha
18:18:46 <palomer> it's the line seperating the expressions that threw me off
18:23:00 <palomer> bbl
19:30:11 <palomer> whats an as pattern?
19:33:36 <Fractal> An as pattern is where you can create 2 different bindings for something.
19:33:41 <Fractal> Er, kind of.
19:34:00 <Fractal> Here's an example:  myfunc a@(b,s) = ...
19:34:34 <Fractal> a is bound to (b,s)  and b and s are bound to the elements in the tuple.
19:35:01 <Fractal> The idea being that it's often easier to write just "a" in your function instead of (b,s)
19:37:11 <palomer> ahh
19:37:13 <palomer> I see
19:39:48 <palomer> but we can already do that with matchings
