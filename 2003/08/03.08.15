00:18:19 <earthy> g'mean
00:47:37 <sjj> Jerub: a compiler for Haskell?
00:48:30 <andersca> hey dennisb
01:29:02 <Darius> hmm, this may break the bot
01:29:15 <Darius> @prelude (\\)
01:29:17 <lambdabot> *** "(\\)" prelude "Haskell Standard Prelude Dictionary": text follows
01:29:17 <lambdabot> (\\)
01:29:17 <lambdabot>   (\\) ::  (Eq a) => [a] -> [a] -> [a]
01:29:17 <lambdabot>   (\\)                     = foldl (flip delete)
01:29:37 <Darius> ah, good, that fix was applied
01:30:31 <Heffalump> what was broken?
01:31:01 <Darius> There was a missing case in the dict code.
01:33:06 <Heffalump> ah, what did it do? And did it actually cause the bot to crash, or just display an error?
01:36:33 <Darius> I think there wasn't error catching back then, otherwise it just raised a pattern match failure exception.
01:44:30 <Heffalump> ah, right
02:35:40 <jao> hi. has anybody successfully compiled htoolkit on debian unstable with ghc 6.0.2? i'm trying, but ghc is complaining about not being able to locate some package imports...
02:50:26 <Heffalump> jao: I believe you should run "make -k" a couple of times in the htoolkit root directory to get a successful build
02:50:39 <Heffalump> cos it doesn't correctly specify dependencies
02:52:51 <Heffalump> is 6.0.2 out then?
03:04:16 <jao> Heffalump: thanks, it seems to work. and no, sorry, it's 6.0.1.
03:04:51 <jao> hm, do you know why the spurious error are produced? is a ghc bug?
03:06:23 <jao> ah... is the htoolkit makefile not specifying deps correctly?
03:06:41 <Heffalump> the latter
03:07:30 <jao> i see. do you know perchance what'd be the correct dep spec?
03:12:45 <Heffalump> I didn't look
03:12:51 <Heffalump> I'm sure it's not hard to fix, though
03:13:02 <Heffalump> just "make -k" fixed it for me and I didn't really care
03:13:49 <jao> ok, thanks... maybe i'll take a look latter. oops: another problem: make install complains: Reading package info from "config/port.pkg"
03:13:49 <jao> Fail: Couldn't parse package configuration.
03:14:52 <Heffalump> I don't have a file called config/port.pkg
03:15:17 <jao> strange... it seems to be created by configure
03:15:30 <Heffalump> I think shapr gave me a version with some changes that aren't in CVS.
03:15:38 <Heffalump> you might want to ask him what he changed
03:15:43 * Heffalump disappears
03:15:54 <jao> ah ok. cya
03:29:42 <shapr> yay
03:29:47 <shapr> SyntaxPolice is here!
03:47:57 <jak> quick question: how to do binary (bitwise) operations in haskell?
03:49:26 <jak> it's ok I found it Data.Bits
04:01:23 <o3_> phear, 100k of haskell code generated by template haskell
04:02:25 <Darius> How long does that take to compile?
04:02:29 <Heffalump> as in you got TH to print out the haskell code again afterwards?
04:05:52 * Heffalump wants to investigate using TH as a pre-processor like that (both so you can inspect the generated code and so you can make H98 code if you want)
04:18:29 <Darius> I think the pretty printer would need some work, but otherwise that should be fairly straightforward.
04:19:11 <o3_> Darius: the TH declarations don't take too long (maybe 1-2 seconds).  compiling the TH-generated code takes ... 10 seconds or so
04:19:38 <o3_> Heffalump: yeah, i hax0red the ppr* functions that came with THSyntax.hs so that it generates proper .hs output (at least for this case)
04:20:02 <Heffalump> cool.
04:20:12 * Heffalump thinks o3 must specialise in reading my mind and doing stuff I think would be cool.
04:20:30 <Darius> What all were you generating?
04:20:58 <o3_> Darius: this is for mocha, an objective-c binding i'm working on
04:21:24 <o3_> it's generating classes, types and instances to map an objc class hierarchy to haskell
04:21:41 <o3_> (100k is for ~15 classes, and that's without any of the method declarations for each class ...)
04:24:20 <Darius> 100 kilo -bytes-?
04:24:43 <o3_> yeah :)  quite scary
04:25:04 <Darius> yeah, but not the same as 100kloc which is what I thought originally.
04:25:14 <o3_> i'll dcc the file to you if you're interested to see what it does
04:26:19 * jao is back (gone for 01:09.05)
04:26:29 <shapr> hey jao
04:26:36 <jao> hey shapr!
04:26:52 <jao> so, you successfully compiled htoolkit? :)
04:27:06 <jao> i've got a problem with make install
04:27:08 <Darius> I think I'll pass, reading machine generated code usually isn't too entertaining.
04:28:12 <shapr> I want the TH preprocessor code :-)
04:28:13 <jao> shapr: it says the port.pkg file has incorrect format... any idea?
04:28:23 <shapr> jao: http://kungens.kemi.fi/~shae/ht.tar.bz2
04:28:28 <shapr> I dunno about port.pkg
04:28:50 <shapr> jao: wait, the GUI or database part of htoolkit?
04:29:00 <shapr> that tbz is just the database binding stuff for lambdabot 
04:29:06 <jao> shapr: the 'port' package
04:29:15 <shapr> I haven't tried the GUI part ye.
04:29:15 <shapr> t
04:29:26 <jao> ah, i see
04:29:30 <jao> :(
04:29:55 <jao> (i'm using the release tarballs)
04:30:35 <jao> shapr: have you used any other graphics toolkit (for haskell)?
04:32:57 <shapr> I've used the gtk+hs and gtk2hs bindings a bit
04:33:02 <shapr> and I played with the HTk binding some
04:34:08 <jao> aha: would you recommend any of them? fudgets seems interesting too...
04:34:33 <shapr> no particular recommendations, I'm not familiar enough with any of them to make a distinction.
04:34:40 <shapr> you may want to try wxHaskell as well.
04:35:09 <shapr> from what I've heard wxWindows is the most portable of the gui toolkits
04:35:20 <jao> yep. although i don't like the vanilla wxWindows libs arch
04:35:21 <sjj> zow, i'd stay away from wxWindows
04:35:28 <o3_> Darius: you're not coming to HIM?
04:35:35 <jao> sjj: why so?
04:35:50 <o3_> shapr: the TH code, in a nutshell, sucks right now :).  (although it does work)
04:35:50 <shapr> sjj: maybe the Haskell binding is less scary than the Python binding.
04:36:02 <sjj> jao: various reasons, bugginess, annoying API, inconsistency
04:36:16 <shapr> o3_: if you put it online somewhere, it might get fixed by others.
04:36:22 <sjj> if you're doing most of your work on unix systems wx generally backends to GTK+ anyway
04:36:31 <jao> sjj: yes, that's my experience with the c++ version
04:36:33 <sjj> plus, the whole C++ thing ;)
04:36:46 <o3_> shapr: i'm releasing it at HIM, it's not in a decent enough state right now for me to release it
04:37:06 <o3_> open-source is only good after the program actually does _something_ vaguely useful :)
04:37:17 <jao> definitely, i prefer gtk+, yes
04:37:41 <shapr> o3_: ok
04:37:52 <sjj> shapr: how's it going BTW?-)
04:38:19 <Darius> o3: no
04:38:21 <Heffalump> o3_: so you'll be in Sweden?
04:38:37 <Darius> o3: I'm not even exactly sure what it is.
04:39:05 <shapr> Darius: yes, come to HIM!
04:39:15 <shapr> it's the Haskell Implementors Meeting
04:46:31 <shapr> hey jao, I just saw your post on the haskell list, another XML library is HXMLToolbox, http://www.fh-wedel.de/~si/HXmlToolbox/
04:47:31 <jao> shapr: ah yes, thx... i was looking at it yesterday... any comments?
04:47:33 <shapr> oh, I see Joe English mentioned it already.
04:47:53 <shapr> my main comments are that the directions are difficult to wade through :-)
04:47:59 <shapr> it's powerful, but wasn't easy to figure out.
04:48:21 <jao> haxml seems pretty nice
04:48:22 <shapr> on the good side, I've written some simple unit tests for it, so you can have the benefit of my wading through the docs if you want.
04:48:36 <jao> shapr: definitely
04:48:39 <jao> :)
04:48:41 <shapr> the major difference between haxml and HXMLToolbox is the type approach
04:49:01 <shapr> haxml uses a specific type for each tag, hxmltoolbox uses a generic tree type
04:49:13 <shapr> that means you can't construct incorrect haxml docs
04:49:29 <jao> yes, i like that
04:49:48 <shapr> on the other hand, it also means you can't produce halfway solutions with haxml
04:50:02 <jao> the generic tree type sounds too domish
04:50:18 <shapr> some of the specifics of the output xml dtd are still unknown, even to the developers who are writing it
04:50:26 <shapr> so hxmltoolbox was better for what I was doing.
04:50:37 <shapr> validation is a separate step in hxmltoolbox
04:50:49 <jao> aha. on the contrary, i'll be working with a well-defined dtd
04:51:11 <shapr> in that case, haxml is better :-)
04:51:32 <jao> yup, i think so :) thanks for the advice!
04:52:16 <Lunar^> Did someone tried HGL ?
04:53:10 <Lunar^> (btw, Hudak's School of Expression needs two week to arrive after order in Paris :( )
04:53:16 <jao> what about the build toolchain: what do you guys recommend for building haskell projects: ghc -make, hmake...?
04:54:16 * jao is thinking of using plain GNU make
04:54:19 <Igloo> I tend to use ghc --make nowadays
04:54:31 <Igloo> On the grounds of simplicity
04:54:36 <shapr> yah, I use ghc --make as much as possible
04:55:13 <o3_> Darius: see http://cs-www.cs.yale.edu/homes/nilsson/HIM/
04:55:38 <jao> good... even if you have a non-flat dir tree? i mean, various libs and execs to be built
04:55:49 <o3_> Darius: bunch of haskell geeks who get together and talk about lots of haskell stuff, from implementation things in GHC, to template haskell, to whatever
04:56:04 <o3_> Heffalump: ja ja!
04:56:15 <o3_> Heffalump: will be there for PLI/ICFP and HIM
04:56:50 * jao doesn't if the non-flat thing makes any difference
04:57:05 <Lunar^> jao : I'm really anoyed by using GNU Makefile with mutually recursive modules
04:57:17 <Lunar^> does ghc --make handles theme better ?
04:57:48 <Igloo> Both make and mutually recursive Haskell modules should be avoided if possible
04:58:23 <Igloo> But sometimes they become necessary evils
04:58:25 * jao nods
04:58:41 <shapr> lambdabot used ghc --make even with subdirs etc
04:58:50 <o3_> ghc --make rocks
04:58:51 <Heffalump> ghc --make isn't much good when you want multiple targets, IMO
04:58:52 <shapr> has recently switched though
04:59:04 <Heffalump> or indeed anything vaguely complicated
04:59:42 <jao> Heffalump: that's what i was afraid of
04:59:45 <Heffalump> I forget precisely why I decided to swith the Makefile to use ghc -M, but I was reasonably convinced ghc --make couldn't do it right
04:59:50 <Heffalump> (as in I tried quite hard to make it)
04:59:59 <Igloo> multiple targets?
05:00:15 <shapr> I remember wanting a makefile for lambdabot a few days before one magically appeared
05:00:23 <Heffalump> two different binary products coming from some or all of the same source
05:00:34 <shapr> though I don't remember why exactly.
05:00:46 <Igloo> shapr: It just calls ghc --make doesn't it?  :-)
05:00:58 <shapr> Igloo: you wrote it, didn't you? :-)
05:01:01 <Igloo> Just do ghc --make twice?
05:01:05 <Igloo> Yup
05:01:11 <o3_> Igloo: do you know how much effort it would take to make ExportF available in THSyntax.hs, for somebody who has never hacked on GHC before?
05:01:36 <shapr> I've been thinking of adding $(GHC) so I can easily switch 'tween ghc6-threaded and non
05:02:23 <Heffalump> igloo: not any more, I rewrote it
05:02:25 <Igloo> o3: The conversion in one direction isn't immediately obvious - do you particularly want to do it yourself?
05:02:39 <Heffalump> shapr: yeah, that'd be good
05:02:41 * Lunar^ will end up with a bunch more modules if not mutually recursive :(
05:02:50 * Igloo is happy to do it this afternoon
05:02:52 <o3_> Igloo: i'd prefer anything to doing it myself ;)  but i'd really like the functionality
05:03:01 <Igloo> OK
05:03:08 <o3_> Igloo: at the moment i'm going via foreign import wrapper, which is ... a bit silly
05:03:09 <Lunar^> shapr: What's tween ?
05:03:13 <o3_> Igloo: ?  wow, thanks
05:07:38 <o3_> Igloo: you wouldn't happen to be in cambridge, would you?
05:07:52 <Igloo> No, Oxford
05:07:56 <Igloo> Why?
05:08:05 <o3_> ah.  i might be in cambridge from sep 4 to sep 7
05:08:19 <Igloo> Ah, how come?
05:08:42 <o3_> visiting some crazy friends there.  is oxford very far from cambridge?  (sorry for my complete ignorance of any non-sydney geography)
05:09:20 <Igloo> About 3h by public transport I think  :-(
05:10:07 <Heffalump> we'll meet up in Sweden anyway
05:10:20 <o3_> i didn't think igloo was going to sweden
05:11:11 <Igloo> If I'm not then buying the plane tickets was a silly idea  :-)
05:11:22 <o3_> oh, cool!
05:11:35 <o3_> i thought you weren't going, sorry :).  maybe i confused you with someone else
05:11:54 <o3_> you're going to just PLI?  or PLI+HIM?
05:12:37 <Igloo> Just ICFP+HW
05:14:44 <jao> bbiab (dinner)
05:18:22 --- mode: niven.freenode.net set +o Heffalump
05:18:22 --- mode: kornbluth.freenode.net set +b flamer!*@*
05:27:18 <shapr> so, how many people going to ICFP here?
05:27:41 * o3_ waves a flag
05:28:52 <Heffalump> me and igloo but you knew that
05:29:07 * Heffalump types one-handed since the other hand is full of pear
05:29:37 <Igloo> Which hand is which?
05:29:46 <Heffalump> left = type
05:30:17 <Darius> That's one problem with Dvorak.  It's hard to type one-handed because the keyboard is balanced.
05:30:36 <Heffalump> well, I was hunting all over the keyboard with my one hand
05:40:56 <shapr> Darius: seen the kernel patch for space bar switching?
05:41:04 <shapr> I've been tempted to try it
05:41:33 * Darius has no idea what you are talking about.
05:41:40 <shapr> in a nutshell, tap the spacebar once for space, or hold it down to mirror the keyboard
05:42:46 <Lunar^> shapr: weird
05:42:53 <shapr> makes sense for mouse users
05:43:03 <shapr> mousing kills touchtyping
05:43:06 <Igloo> Does it just mirror the letters or do enter, tab and backspace switch too?
05:43:46 <shapr> I don't know
05:43:56 * shapr googles
05:50:08 <shapr> aha
05:50:13 <shapr> the patch is by John Meacham even
05:50:18 <shapr> http://repetae.net/john/computer/hk/
06:04:50 * jao is back (gone for 00:49.56)
06:05:53 <jao> hm. i'd like: hold down spacebar = ctrl
06:11:46 <jak> what is a monomorphism restriction?
06:11:49 <Lunar^> And a do you do Ctrl + Space ?
06:11:50 <jak> and do I need it?
06:12:11 <Lunar^> hehe :)
06:13:10 <jak> I get this error message if I don't provide a type signature:
06:13:21 <jak> ompiling Saa7146          ( saa7146.hs, interpreted )
06:13:21 <jak> saa7146.hs:1:
06:13:21 <jak>     Ambiguous type variable `b' in these top-level constraints:
06:13:21 <jak>       `Bits b' arising from use of `decodeVideoPair' at saa7146.hs:15
06:13:22 <jak>       `Integral b' arising from use of `decodeVideoPair' at saa7146.hs:15
06:13:24 <jak>     Possible cause: the monomorphism restriction applied to the following:
06:13:26 <jak>       decodeVideo :: StateT b (Writer [String]) ()
06:13:28 <jak>         (bound at saa7146.hs:14)
06:13:30 <jak>       runDecodeVideo :: b -> IO () (bound at saa7146.hs:11)
06:13:32 <jak>     Probable fix: give these definition(s) an explicit type signature
06:13:34 <jak> Failed, modules loaded: none.
06:13:38 <jak> it works if I provide:
06:13:47 <jak> runDecodeVideo :: Int -> IO ()
06:14:10 <o3_> jak: see http://www.haskell.org/hawiki/MonomorphismRestriction
06:14:27 <jak> o3_: thanks
06:16:08 <jak> hmm interesting
06:21:24 <jao> Lunar^: well, with Ctrl + Space!
06:24:00 <jak> are you talking about those "happy hacker" keyboards?
06:24:40 <jao> nope, about a kernel patch to change the spacebar behavour
06:24:53 <jak> ah
06:24:53 <jao> (i use a hhk, though)
06:25:24 <jak> jao: was it worth the money?
06:25:59 <jao> jak: well it's rather expensive, but i'm happy with it
06:26:34 <jao> so much, that i actually own two of them: work/home :)
06:27:04 <jak> lol
06:27:05 <jak> cool
06:27:30 <jak> I was tempted -- but recently purchased a remote (RF) keyboard instead
06:28:26 <jao> that said, the nicest thing of it (the ctrl key in a better place) is easily obtained by mapping the ACAPS key in a regular kb.
06:28:39 <jao> oh, never seen one of those
06:28:41 <jak> :)
06:28:54 <jak> it's the a4tech reviewed on gamershell
06:29:18 <jao> gamershell?
06:29:50 <jak> http://www.gamershell.com/reviews_KBS-2548RPwirelesskeyboa.shtml
06:30:12 <jak> very cheap and comes with mouse as well
06:32:32 <jao> i see. doesn't look bad :)
06:32:33 <jao> although i don't need all these m$ extra keys! :)
07:40:11 <o3_> woo!
07:40:15 * o3_ makes his first GHC package
07:51:32 <earthy> time for my holidays
08:25:20 <Igloo> o3: Do you want to be able to reify foreign exports or just splice them in?
08:26:18 <o3_> just splicing them in will do for now
08:26:20 <Igloo> And can you give me a tiny program that uses one please?
08:26:38 <o3_> splicing in a foreign decl, you mean?
08:26:47 <Igloo> Cool. I'll look at reification later as it seems to just be dropping foreign import declarations too
08:27:06 <Igloo> No, a program that uses foreign exports but doesn't use TH
08:27:54 <o3_> ah, sure
08:37:47 <o3_> Igloo: dcc incoming
08:40:32 <Igloo> Ta
08:42:09 <sjj> Jerub: up late ;)
08:43:39 <o3_> Igloo: i'm heading off to bed.  if you need any help, just email me
08:43:45 <o3_> i'll respond in a few hours :)
08:43:57 <Igloo> OK  :-)
08:44:01 <o3_> thanks a lot!
08:47:57 <hdaume> :( no replies to my massive spamming of g-h-bugs
08:49:05 * Igloo didn't really read it as it didn't look like the sort of thing I'd know about and was big and scary
08:49:25 <hdaume> hehe...the final message i posted wasn't so big and scary
08:49:41 <hdaume> i think it's a bug in the implementation of Data.Dynamic, but i haven't actually looked into the source for that yet
09:37:37 <hdaume> in normal emacs, how do i turn on paren highlighting?  i tried (paren-set-mode 'sexp)
09:37:40 <hdaume> but that didn't work
09:37:50 <hdaume> normal emacs = nt emacs :)
09:38:24 <hdaume> nevermind, i found it :)
10:01:18 <Lunar^> how?
10:03:45 <jak_> hi, does anybody know how to show numbers in hexadecimal ?
10:03:58 <hdaume> Numeric.showHex
10:04:06 <jak_> excellent , thanks
10:04:08 <hdaume> :)
10:04:15 <hdaume> i just learned about that myself recently :)
10:04:31 <jak_> :)
11:07:57 <innervision> hi people..
11:09:00 <Segora> hi innervision
11:09:12 <innervision> hi Segora
11:09:43 <innervision> does anybody know if there is a way to apply a list of functions to a list of values in haskell?
11:10:06 <Heffalump> the lists are the same length?
11:10:09 <innervision> y mean... something like map (\x y -> x y)
11:10:13 <innervision> Heffalump: exactly
11:10:14 <Heffalump> zipWith ($) fs xs
11:10:29 <innervision> oh.. i reimplemented it then... :/
11:11:00 <innervision> i definde "applicate" that was exactly a map of a zip...
11:11:06 <Segora> studying the Prelude often pays off ;)
11:11:40 <innervision> Segora: quite right... i even have a printed copy...
11:11:58 * innervision doesn't remember where did he left that copy...
11:39:47 --- mode: niven.freenode.net set +o Heffalump
11:39:47 --- mode: acamar.freenode.net set +b flamer!*@*
11:42:48 --- mode: niven.freenode.net set +o Heffalump
11:42:48 --- mode: kornbluth.freenode.net set +b flamer!*@*
11:43:43 <innervision> a netsplit?
11:44:53 <Igloo> Yup
11:45:02 <Igloo> 2 of 'em
11:45:54 <innervision> :|
11:53:48 <Marvin--> happen all the time on this network
11:54:13 <innervision> i didn't notice that before...
12:59:24 * shapr yawns
13:01:43 <innervision> shapr: hi!
13:01:48 <shapr> hi innervision!
13:01:51 <shapr> how ar ya?
13:02:02 <shapr> hello Philippa, haven't seen you in awhile.
13:02:04 <innervision> fine fine... wondering inside the prelude...
13:02:12 <shapr> ah, good place to wonder.
13:02:45 <innervision> shapr: yeap, better than my code anyway...
13:06:02 * Philippa has been poking around her dissertation a bit more...
13:06:53 <Philippa> I'm now wondering if there's a way to express the pattern <constructor name> <parameters>* (that is, there may be some parameters, I don't care how many the constructor takes)
13:08:35 <meep> isn't that just the same as a pattern that matches any value, in effect?
13:09:00 <shapr> simplest way is to use an initialized record
13:09:05 <Philippa> oops, <constructor name> is meant to be specified in the pattern
13:09:25 <shapr> but you might be able to do something with the ((g.).)f stuff?
13:09:32 <Segora> hu! that goes way over my head type-wise
13:09:39 <Philippa> <parameters>* isn't, I'm going to get at them via field labels
13:10:16 <Philippa> so SomeConstructor <parametersIdon'tcareaboutorevenhowmanythereare>
13:10:36 <Philippa> shapr: initialized record?
13:10:44 <Segora> did I get this right: You want to match values with a known constructor of unknown arity? Sounds like an oxymoron to me.
13:10:58 <meep> is it just as a shorthand?
13:11:11 <meep> like (MkFoo *) instead of (MKFoo _ _ _ _ _)
13:11:17 <Philippa> meep: yep
13:11:28 <Philippa> 'cos I'm going to be adding fields a lot for a while
13:11:31 <meep> i guess you want a record then, like shapr says
13:11:51 <Segora> Philippa: the only way i can imagine doing this is to generate the matching code.
13:12:37 <Riastradh> Or you could use single tuple arguments for constructors, and then just do '(MkFoo _)'.
13:12:45 <Segora> i.e. write a magic construct in the source like your (MkFoo *) and translate it to (MkFoo _ _ _)
13:12:47 <Riastradh> s/single tuple arguments/a single tuple argument/1
13:13:01 <meep> what about a record, lol
13:13:03 <Segora> e.g. via a sed script
13:13:10 <Philippa> OK, where do I RTFM on records?
13:13:19 <Riastradh> http://www.haskell.org/onlinereport/
13:13:21 <meep> well it's a simple syntax
13:13:29 <Philippa> Riastradh: yes, now where /in/ the report? :-)
13:13:43 <meep> data SomeRecord = MkSomeRecord { foo :: Int, bar :: Int }
13:13:45 <Riastradh> data Foo = MkFoo { bar :: Baz, quux :: Quux }
13:14:10 <Philippa> ah, OK, Foo { } matches and I was using that syntax to declare anyway
13:14:23 <Philippa> 'twas only the pattern I was having difficulty with - thanks!
13:14:32 <Igloo> Bah
13:14:35 <meep> :)
13:14:41 * Igloo changes to metacity and fails to find a way to change back
13:14:41 <Philippa> (the joys of not knowing your terminology, huh?)
14:50:40 * jao is back (gone for 08:08.04)
22:04:53 <o3_> Igloo: thanks for the ExportF patches!
22:04:58 <o3_> i'll try compiling ghc later today
22:05:01 <o3_> haven't done it for a while :)
22:47:25 * o3 wonders how on earth he can solve this GHC/TH linking problem
22:48:01 <Jerub> o3: ask for advice on usent.
22:48:13 <Jerub> the answer will come to you 30 seconds later.
22:57:25 <Minute> Yay for Monads
22:57:47 <Jerub> :)
22:58:29 <Minute> http://lambda.weblogs.com/discuss/msgReader$8319#8343
22:58:55 <Minute> Someone finally put it in a way I can understand
22:59:12 <Minute> What with me being dumb and all, that is
23:03:23 <sjj> hrm, a fairly small analysis ;)
23:22:35 <Darius> Guy Lewis Steele Jr.* and Gerald Jay Sussman**
23:22:51 <Darius> * NSF Fellow         ** Jolly Good Fellow
