00:01:54 <Pseudonym> http://research.microsoft.com/Users/simonpj/papers/putting/index.htm
00:01:57 <Pseudonym> That's what I meant.
00:03:55 <Pseudonym> I was in the same honours year as Mark Shields.
00:04:11 <Pseudonym> The rumour was that nobody, including him, actually knew what his thesis was on.
01:43:20 <Heffalump> pseud: :-)
01:43:29 <Heffalump> he's written it now, hasn't he?
01:44:04 <Marvin--> ?
01:44:13 <Heffalump> see [08:04]
01:44:17 <Heffalump> oh, but you joined after that
01:44:45 <Marvin--> yes... and by the time of your comment, Pseudonym has parted, so really, what was the use? :)
01:45:15 * Marvin-- growls at having a 207M avi file but only being able to watch the first 1m25s of it
01:45:46 <Heffalump> oh, he had, I missed that :-)
01:46:10 <Jerub> Marvin--: using what software?
01:47:54 <Marvin--> Jerub: xine
01:48:08 <Marvin--> (I've tried with gnome-xine and totem, and I *think* totem uses a xine backend)
01:48:48 <Jerub> Marvin--: you might want to try 'mplayer', it uses a different backend.
01:49:24 <Marvin--> I'd prefer not using a program developed by arrogant fuckwits that has questionable licensing
01:49:47 <Jerub> heh.
01:51:14 <Marvin--> there are good reasons for that mplayer isn't already in Debian
01:54:43 <Marvin--> gahhh
01:54:55 * Marvin-- bonks hdaume-in-absentia on the head
01:56:31 <Heffalump> wossedone?
01:56:33 <Jerub> Marvin--: apt-cache show mplayer
01:57:06 <Heffalump> ganesh@musketeer:~$ apt-cache show mplayer
01:57:06 <Heffalump> wax: Unable to locate package mplayer
01:57:26 <Heffalump> s/wax/W/ # overenthusiastic auto-complete
01:57:47 <Marvin--> Jerub: you probably have unofficial apt sources
01:58:02 <Marvin--> I know for a *fact* that every attempt to upload mplayer has been rejected by the ftp masters for good reasons
01:58:34 <Marvin--> Heffalump: well, a) he doesn't know how to build tarballs, b) he has a stupid registration thing when you want to download stuff, and c) he's made hAll-in-one non-free
01:58:36 <Jerub> I have unstable main non-free contrib
01:58:53 <Marvin--> so do I
01:59:10 <Marvin--> try packages.d.o/mplayer
01:59:13 <Jerub> I also have non-us.debian.org unstable/non-US main contrib non-free and security.debian.org
01:59:15 <Marvin--> "No responses to your query"
01:59:19 <Heffalump> Marvin--: feel free to write a feww replacement :-)
01:59:25 <Heffalump> s/feww/free/
01:59:53 <Marvin--> I was about to do it for my degree project, but was happy when hdaume announced this program
02:00:05 <Marvin--> maybe I should just beat him over the head repeatedly until he sees reason
02:00:56 <Heffalump> when did he announce it?
02:01:51 <Marvin--> when I was in Oslo... that'd be mid-July or something
02:02:05 <Marvin--> I saw it and thought "this'll be perfect for my project"
02:02:15 <Marvin--> half an hour later I got a mail from Koen saying "check this out!" ;)
02:03:11 <Marvin--> I suspect he gave it this kind of silly license just because I complained that he hadn't given it a license at all :-/
02:03:17 * Heffalump rotfl at the license
02:03:58 <Marvin--> hey, as a Debian developer, you are required to be affronted, mad and upset about that kind of license :)
02:04:08 <Heffalump> I'm not a Debian developer :-p
02:04:17 <Jerub> but Marvin is.
02:04:32 <Jerub> Marvin--: seriously, mplayer is in debian unstable, from an offical mirror.
02:04:48 <Marvin--> Jerub: since how long?
02:05:12 <Jerub> dunno, I saw something mentioned on mplayerhq.hu I think
02:05:24 <Heffalump> I just apt-get updated and it's still not there.
02:05:25 <Marvin--> and how come packages.debian.org can't find it, nor my apt-cache?
02:05:39 <Jerub> do you have contrib and non-free ?
02:05:50 <Heffalump> yes
02:05:51 <Marvin--> Jerub: much as it pains me, but yes
02:06:04 <Jerub> okay, I'm quite confused then.
02:06:06 * Marvin-- is not vrms clean
02:06:08 <Jerub> hold on.
02:06:34 <Jerub> gah! I'm an idiot
02:06:37 <Marvin--> Jerub: yes :)
02:06:56 <Marvin--> just because you dpkg -i a package doesn't mean it came from an official mirror ;)
02:07:07 <Jerub> excuse my silliness, cvs contained instructions on how to compile it as a .deb package.
02:07:15 <Jerub> I don't download .debs except with apt-get!
02:07:41 <Marvin--> Jerub: the mplayer folks have also been very good at writing their source code to prevent binary redistribution
02:08:05 <Marvin--> though I hear that both that and the licensing issues are improving
02:08:20 <Marvin--> Heffalump: hmm, I was under the impression that you were, or at least in NM... wonder how I got that idea
02:08:36 <Heffalump> cos I keep writing random debs? :-)
02:09:19 <Heffalump> if a reason to put any of them into Debian appears, I might try to become one
02:09:40 <Marvin--> all right
02:10:30 * Marvin-- wonders how much hacking he must do to make hall-in-one play nice with the helium subset he's working on
02:11:53 * Heffalump wonders whether "I would like to package interesting software that has an appropriate licence for Debian" is adequate proof that I understand the social contract :-)
02:12:30 <Marvin--> definitely not, but NM is a process where you cooperate with your AM...
02:14:24 * Heffalump wonders how many people are rejected on philosphy grounds
02:14:29 <Heffalump> s/osphy/osophy/
02:14:37 <Marvin--> probably zero :)
02:14:55 <Marvin--> heck, very few are rejected... that's the biggest problem with NM right now
02:15:41 <Heffalump> if it was supposed to apply generally, I wouldn't qualify, since I believe non-free stuff has its place
02:16:12 <Marvin--> er, nobody is asking you to become a Debian drone without free will
02:16:18 <Marvin--> heck, read SC ยง5
02:17:01 <Marvin--> if we required people to never ever again touch a piece of non-free software we wouldn't have many professional software developers as Debian developers, now would we?
02:17:09 <Heffalump> :-)
02:17:26 <Heffalump> they might use it as a matter of necessity without believing it was a good thing to exist
02:19:19 <Heffalump> anyway, it's like Scouting - I wouldn't become one cos it requires you to promise to love/do your duty to (some) God, but I'm know plenty of people who just ignore their lack of belief and promise anyway
02:20:50 <Marvin--> i.e. you stand up for your beliefs
02:21:28 <Heffalump> not always
02:21:30 <Marvin--> when all my friends went to confirmation, I refused
02:21:48 <Marvin--> I'm pretty sure most of them aren't more religious than I am, but they did it anyway whereas I did not
02:22:09 <Heffalump> there's probably plenty of cases where I'd be flexible about them out of self-interest
02:22:09 <Marvin--> The local priest was quite amazed
02:22:25 <Marvin--> gah, I can't even get HAllInOne to compile
02:22:57 <Marvin--> HAllInOne.lhs line 28: unlit: Program line next to comment
02:22:58 <Marvin--> wtf?
02:24:16 <Heffalump> it means what it says, I imagine :-)
02:24:47 <Marvin--> I'm sure it does, but I don't understand what the problem is
02:25:47 <Heffalump> ah
02:25:53 <Marvin--> especially since if I run unlit manually, it does produce an output file that looks valid
02:26:14 <Jerub> Marvin--: I'm actually pleased to hear you were honest enough not to get confirmed.
02:26:18 <Jerub> (as a christian)
02:26:21 <Heffalump> hmm, yeah, it does look fine
02:27:07 <Marvin--> Jerub: I'm not even christened, as my parents felt that I should make that decision myself and not have it forced on me by them :-)
02:27:33 <reffie> i like parents who do that.
02:27:35 <Marvin--> why the heck does it produce an output file *and* exit with exit code 1?!
02:27:56 <Marvin--> reffie: yes, I think it's very sound
02:29:04 <Marvin--> Heffalump: I mean, if I rename my "foo" output file that I got from unlit to HAllInOne.hs and compile, that seems to work just fine
02:30:07 <Heffalump> yeah, and the source does look fine
02:30:08 <Heffalump> weird
03:01:30 * shapr boings
03:02:23 <Heffalump> 'lo
03:02:29 <Heffalump> have you tried those greencard debs yet? :-)
03:02:55 <shapr> no, not yet
03:03:00 <shapr> this is a good opportunity...
03:03:43 <shapr> polli: have you tried darcs?
03:03:47 <Jerub> bah, just had some little kid on #php who's been irritating for days give me his phone number.
03:03:51 <Jerub> So I reversed it.
03:03:56 <Jerub> he shat his pants :)
03:04:09 <shapr> depressing
03:04:19 <Heffalump> :-)
03:04:23 <shapr> man, I want hOp
03:04:52 <shapr> for extra geekiness I could dual-boot debian and hOp on this laptop
03:05:14 <shapr> yay, csound is back into debian
03:05:54 <shapr> hi neniu 
03:06:56 <shapr> what's debtags?
03:07:23 <shapr> oh
03:07:25 <shapr> neat
03:07:30 <shapr> @yow
03:07:30 <lambdabot> ..  the MYSTERIANS are in here with my CORDUROY SOAP DISH!!
03:08:42 <Marvin--> csound?
03:10:11 <shapr> "Csound is to sound synthesis as C is to programming."
03:14:18 <Marvin--> "hard to use, hard to debug and generally painful"?
03:14:49 <shapr> possibly :-)
03:14:56 <shapr> I think Haskore has a CSound output
03:16:48 <Marvin--> HOLY CRAP *reads the errata to game of thrones*
03:17:43 <Marvin--> Three of the perpetual cards have been limited, but not the *best* of them...sheeeeeeeesh
03:21:30 <shapr> Heffalump: something may be wrong with greencard-ghc6
03:21:57 <shapr> the "make boot" step of HSX11/INSTALL fails
03:24:59 * shapr bounces
03:25:17 <shapr> anything interesting happening in the Haskell world lately?
03:26:08 <shapr> @listmodules 
03:26:08 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
03:26:14 <shapr> @type
03:28:39 <shapr> Reason: <unknown>, line <unknown>:
03:28:39 <shapr>       Don't know how to unmarshall (word32 ({XID} res1))
03:28:44 <shapr> Heffalump: that's the error I'm getting
03:29:21 <Marvin--> shapr: I'm cursing hdaume for inventing stupid licensing conditions
03:29:38 <Marvin--> dunno if that's interesting or not
03:29:40 <shapr> what's his license?
03:29:59 <Marvin--> it's in HAllInOne
03:44:20 * Heffalump thinks it's cool
03:47:01 * Marvin-- thinks it's just as stupid as "cardware" licenses and friends, they're non-free. Period.
03:47:46 <Heffalump> I don't consider free-ness the be-all-and-end-all of existence
03:48:13 <Marvin--> well, it means I can't package it up and put it in Debian
03:48:44 <Marvin--> and there's also the problem that I'm pretty sure he made the license so silly just to taunt me
03:48:49 <Heffalump> you could put it in non-free
03:48:58 <Heffalump> and he appears to have succeeded in winding you up :-)
03:49:19 <Marvin--> I loathe the non-free section, and that won't help me a lot, since it still won't be part of Debian
03:49:25 <Heffalump> true
03:49:42 <Marvin--> And yes, he did. Licenses aren't a laughing matter. It's sad, but true.
03:49:44 <Heffalump> put it in haskell-experimental
03:49:53 <Heffalump> well, I think it's quite funny
03:50:03 <Marvin--> than I will be bound by the license as I've redistributed it, no thanks
03:50:14 <Heffalump> aren't you bound by it anyway for using it?
03:50:21 <Marvin--> I haven't used it yet
03:50:46 <Marvin--> actually, the license doesn't say anything about usage, only copy, modify and redistribute
03:50:50 <Marvin--> I'm not even sure I'm allowed to use it
03:50:55 <Heffalump> hehe
03:51:06 <Heffalump> how did you download it, with a webbrowser?
03:51:17 <Marvin--> yes
03:51:24 <Heffalump> you've probably copied it already then
03:52:04 <Marvin--> well, except that that would make it a shrink-wrap license that isn't enforceable in Sweden
03:52:56 <Heffalump> but now you're aware of it you probably have no more rights to do anything with it without complying with it
03:53:04 <Marvin--> which is why I haven't
03:53:08 <Marvin--> I deleted it
03:53:18 <Marvin--> which is why I couldn't copy&paste the license for shapr's reading
03:54:10 <Marvin--> I think it's sad to put a license in the distribution and not on the page that links to the distribution
03:54:40 <shapr> I agree that licenses are important.
03:54:53 <Heffalump> so do I, I just think this one is funny
03:55:24 <Heffalump> if it really persists I guess it would be a shame, but that's hdaume's prerogative
03:55:37 <Marvin--> of course it is
03:55:40 <Marvin--> but I don't have to like it
03:55:50 <Marvin--> I'll just waste my time reimplementing it instead
03:55:52 <Heffalump> if he hadn't written it at all, then Marvin wouldn't be slagging him off now
03:56:16 <Marvin--> well, I started by asking him nicely to put it under a license *at all* so I could use it
03:56:32 <Marvin--> he said he didn't want to impose more restrictions than he had to, since he didn't like licenses
03:56:40 <Marvin--> and then he did add restrictions anyway
03:57:00 <Heffalump> maybe he considered improving his mental well-being by having a laugh essential
03:57:05 <Marvin--> which I just think is sad
03:58:30 * Heffalump becomes tempted to write something and release it under that licence
03:59:48 <Marvin--> knock yourself out, I won't use it
04:00:45 <Heffalump> I guessed that ;-)
04:10:55 <crazney> hi there.. i have a very very basic question.. i'm starting learning haskell (as of tonight).. anyway the lecture notes imply to run 'hugs' and type 'double x = x + x' which (as far as i can see) would create a function called double.. anyway, when i use that syntax it gacks on me..:
04:10:56 <crazney> Prelude> double x = x + x
04:10:56 <crazney> ERROR - Syntax error in input (unexpected `=')
04:10:56 <crazney> Prelude> :quit
04:14:08 <Marvin--> crazney: no, you should put 'double x = x + x' in a file, e.g. Main.hs, and then run hugs on that file
04:14:20 <Marvin--> alternatively you can turn it into an expression like:  let double x = x + x in double 3
04:14:36 <Marvin--> or use ghci, where you can say 'let double x = x + x' (though that opens up a completely different can of worms)
04:14:43 <shapr> hi crazney 
04:14:44 <shapr> ltns
04:15:17 <crazney> hey shapr.
04:15:20 <crazney> Marvin--: ah ok. thanks!
04:15:29 <crazney> Marvin--: the lecture notes mention the ':edit' command.. 
04:15:33 <crazney> should i use that?
04:15:53 <Marvin--> nah, that's just a unix relic, I think, it'll launch $EDITOR or vi
04:16:00 <crazney> ah ok
04:17:39 <crazney> so is ghci a different interpreter?
04:17:39 <crazney> i think i have to use hugs..
04:17:49 <crazney> this is really weird.. the tutorial slides don't mention anything about that.. all there samples are showing some Hugs> command line that everything is executed on.
04:19:32 --- mode: sterling.freenode.net set +b flamer!*@*
04:19:34 <crazney> Marvin--: alright.. well i do this:
04:19:41 --- mode: brunner.freenode.net set +b flamer!*@*
04:19:59 <crazney> <spam - but it seems i'm not interupting anything>
04:20:09 <crazney> $ cat test.hs
04:20:09 <crazney> double :: Int -> Int
04:20:09 <crazney> double x = x + 1
04:20:09 <crazney> double 10
04:20:16 <crazney> $ hugs test.hs
04:20:26 <crazney> ...
04:20:27 <crazney> Reading file "/usr/lib/hugs/lib/Prelude.hs":
04:20:27 <crazney> Reading file "test.hs":
04:20:27 <crazney> ERROR "test.hs":6 - Syntax error in declaration (unexpected `}', possibly due to bad layout)
04:20:27 <crazney> Prelude>
04:20:30 <shapr> module Main where
04:20:35 <shapr> as the first line
04:20:46 <crazney> hrm?
04:20:56 <shapr> crazney: http://kungens.kemi.fi/~shae/src/haskell/Demo.hs
04:21:03 <shapr> that's my super-dense demo I recently wrote up
04:21:23 <polli> shapr: no I havn't tried darcs
04:21:24 <crazney> could you write up a super-simple demo dude? ;-)
04:21:57 <shapr> try Demo.hs, tell me what you think.
04:22:19 <shapr> even better, load it into hugs and play around with it.
04:23:05 <shapr> crazney: simple enough? or too dense?
04:24:11 <crazney> ahha! got it
04:24:13 <crazney> nah. perfect
04:24:14 <crazney> thanks dude
04:24:16 <crazney> bbk later :-)
04:24:41 <shapr> sure
04:28:01 <shapr> hoi reffie 
04:32:17 <reffie> hoi
04:32:22 <shapr> hoe gaat?
04:32:41 <Marvin--> aaaand that's about my knowledge of Dutch, stop now before it's too late ;)
04:33:16 * shapr grins
04:33:34 <shapr> I can also say closet, toothbrush, frog, and thank you.
04:34:34 <Marvin--> shapr: how very useful :)
04:36:49 * Marvin-- idly wonders if the kitchen lamp is a Wasp Factory
04:37:42 <shapr> hi CowGirl, wassup?
04:37:54 <CowGirl> can someone explain why this makes any difference.... for example using the fibonacci numbers function....
04:37:58 <shapr> crazney: I added a bit about typeclasses to the Demo.hs
04:38:00 <CowGirl> not to bad...how are u??
04:38:02 <CowGirl> ok.....
04:38:15 <CowGirl> fib n = fib (n-2) + fib (n-1)
04:38:42 <CowGirl> using that,  why does the function change say if it was just.............. fib n = fib (n-2) + (n-1)
04:38:53 <CowGirl> why does fib need to be put again??
04:39:13 <shapr> because it's calling itself both times?
04:39:29 <shapr> try it the way you said
04:39:30 <shapr> what happens?
04:39:33 <CowGirl> ok, but what exactly is it calling
04:39:34 <CowGirl> i did
04:39:42 <shapr> did it work?
04:39:53 <CowGirl> yeah it ran, just different answers
04:39:56 <CowGirl> like.....
04:40:00 <shapr> were they the correct answers?
04:40:19 <CowGirl> fib 9 .... = 55.....whereas the second one was fib 9 = 21
04:41:01 <CowGirl> they were correct,  but considering its to do with fibonacci numbers, i imagine the second is wrong
04:41:01 <shapr> you know how to calculate the fibonacci function?
04:41:20 <CowGirl> as a function or the actual math diagram??
04:41:36 <shapr> I mean, if you want the right answer ;-)
04:42:22 <CowGirl> using the actual math diagram, yes....  but the function is confusing me,...like why it has to recall fib...
04:43:03 <CowGirl> just used fib as an example,  not for any particular reason.... i'll show another one if i can find one...
04:43:18 <CowGirl> can u explain what its doing though...and why it has to be recalled??
04:43:46 <shapr> if you wanted to explain the fibonacci function in simple english, how would you say it?
04:44:10 <shapr> if I want the result of fibonacci for a certain number, how do I get that result?
04:44:18 <CowGirl> ok....
04:45:00 <CowGirl> by following the diagonal numbers
04:45:14 <shapr> how do I get the diagonal numbers?
04:45:53 <CowGirl> adding them
04:46:08 <shapr> so, which diagonal numbers do I add?
04:46:27 <CowGirl> below the number isnt it??
04:46:36 <shapr> give me an example?
04:46:43 <CowGirl> the diagonals below the number add to give the number
04:46:55 <shapr> how do the diagonals start?
04:47:04 <CowGirl> at 1
04:47:08 <CowGirl> that what u mean???
04:47:11 <CowGirl> 1
04:47:14 <CowGirl> 1 1
04:47:18 <shapr> yes, exactly
04:47:19 <CowGirl> 1 2 1
04:47:26 <CowGirl> ....
04:47:27 <shapr> no, that's pascal's triangel
04:47:30 <shapr> triangle
04:47:51 <CowGirl> oh ok, sorry was thinking the wrong thing for a moment
04:47:58 <CowGirl> im just looking for it in my book...
04:48:01 <shapr> ok
04:49:40 <CowGirl> ok,  heres another function.... for an example....
04:50:03 <CowGirl> its a reverse function, reverese every n block of a string given.....
04:50:17 <shapr> there's a really good reason that fib calls itself again twice, but you have to know the definition of the fibonacci function for me to explain it
04:50:38 <shapr> the fibonacci sequence starts with two 1s in a row
04:50:39 <shapr> 1,1
04:50:47 <shapr> and the next number is the last two numbers added together
04:50:54 <CowGirl> ok..
04:50:58 <shapr> 1,1,2,3,5,8
04:51:17 <CowGirl> ok, i see it here
04:51:29 <CowGirl> 13, 21
04:51:51 <CowGirl> 34, 55, 89...and so on
04:51:54 <shapr> so if you want fibonacci sequence at offset x
04:52:09 <shapr> you have to add together the two offsets before that, x-1 and x-2
04:52:12 <shapr> makes sense?
04:52:50 <CowGirl> yes,  for example x being like 6, 7...which is....
04:52:59 <CowGirl> 8,13
04:53:10 <CowGirl> then added that to be 21
04:53:25 <shapr> so, why does fib call itself twice in its own definition then?
04:54:43 <CowGirl> so its the same input originally put in??
04:54:53 <CowGirl> or adds to the new one??
04:55:11 <shapr> I don't which ones you're talking about.
04:55:21 <CowGirl> original Int
04:55:37 <shapr> with this definition: fib n = fib (n-2) + fib (n-1)
04:55:49 <shapr> if I want fib 6
04:55:50 <CowGirl> can u explain,  see if we're thinking the same, i have another function here if that would be easier..??
04:55:52 <shapr> what happens in that code?
04:57:18 <shapr> can you explain the steps that are taken?
04:57:44 <CowGirl> i can with the first part, just confused, why it recalls it
04:58:43 <shapr> explain it :-)
04:58:52 <shapr> explain the parts you understand
04:59:28 <CowGirl> im going to write it on paper.....this is another function that recalls..... rev n xs = reverse (take n xs) ++ rev n (drop n xs)    
05:00:47 <CowGirl> fib 6 is 8 right?
05:00:58 <shapr> yup
05:01:08 <shapr> but what steps are taken along the way?
05:01:44 <CowGirl> my function is saying 13 !
05:01:45 <CowGirl> ?
05:02:03 <shapr> counting from zero?
05:02:11 <shapr> that's probably the difference
05:02:30 <CowGirl> fib :: Int -> Int
05:02:30 <CowGirl> fib 0 = 1
05:02:30 <CowGirl> fib 1 = 1
05:02:30 <CowGirl> fib n = fib (n-2) + fib (n-1)
05:02:54 <shapr> so, show me how it works with fib 2
05:02:57 <CowGirl> ok...
05:04:45 <CowGirl> ok, so is it going something like this..... fib (2-2)  = 0  this is for the first part....
05:04:54 <CowGirl> then it stops at zero
05:05:15 <shapr> huh?
05:05:41 <shapr> fib 2 = fib (2-2) + fib (2-1)
05:05:47 <CowGirl> this is just for the first part.
05:05:50 <shapr> ok
05:06:19 <CowGirl> ok, so does that mean (0) + (1)  = 1     ?
05:06:59 <shapr> no
05:07:04 <shapr> you haven't called the functions yet
05:07:15 <shapr> fib 2 = fib (0) + fib (1)
05:07:16 <dennisb> "fib 2" is per definition of the function fib equal to "fib (2-2) + fib (2-1)"
05:07:31 <CowGirl> this is recursive right?
05:07:52 <shapr> so, what's the result of calling fib with zero?
05:08:07 <CowGirl> 0
05:08:17 <shapr> fib 2 = 0 + fib (1)
05:08:40 <shapr> are you sure that's right?
05:08:43 <CowGirl> ok,  i see, cause its in the base case
05:08:59 <CowGirl> cause this starts counting from zero
05:09:16 <shapr> if I call fib with zero, what do I get?
05:09:24 <CowGirl> 1
05:09:26 <shapr> yes
05:09:34 <shapr> fib 2 = 1 + fib (1)
05:09:45 <shapr> if I call fib with one, what do I get?
05:10:08 <CowGirl> 1 isnt it??
05:10:11 <shapr> yes
05:10:15 <shapr> fib 2 = 1 + 1
05:10:25 <shapr> so, the final answer is....
05:10:27 <shapr> two!
05:10:41 <shapr> ok, now we have to do fib 3
05:10:49 <shapr> can you show me the steps for fib 3?
05:11:00 <CowGirl> wait....
05:11:12 <CowGirl> how is fib 2 = fib (2-2) = 1?
05:12:13 <shapr> what 2 minus 2?
05:12:17 <shapr> er
05:12:23 <shapr> what's the result of 2 minus 2?
05:12:27 <keverets> fib 2 is the result of fib applied to 0 plus fib applied to 1
05:12:27 <CowGirl> 0
05:12:29 <dennisb> fib 2 is equal to fib (2-2) + fib (2-1) which is equal to fib 0 + fib 1 which is equal to
05:12:36 <shapr> what's the result of fib called with zero?
05:12:38 <CowGirl> fib 2 = 1 + 1
05:12:59 <shapr> so, fib (2-2) is not zero, it's fib called with zero as an argument
05:13:16 <CowGirl> fib 0 = 1
05:13:19 <shapr> right!
05:13:21 <CowGirl> ok, i see now
05:13:29 <shapr> sooo, what's fib 3 ?
05:14:35 <CowGirl> its 2
05:14:50 <CowGirl> but counting from 0
05:14:51 <CowGirl> its 3
05:15:04 <shapr> can you show me the steps involved?
05:16:03 <CowGirl> fib 3 = (3-2)
05:16:14 <CowGirl> = 1 + 2
05:17:30 <shapr> how did you get the two that you added?
05:18:13 <CowGirl> 3-1
05:18:51 <CowGirl> would it be easier to explain it using the reverse one??
05:19:00 <shapr> I don't think it would make a difference
05:19:03 <CowGirl> why a function needs to be recalled?
05:19:15 <clausen> CowGirl: it's the intuitive way of looking at fibonacci
05:19:17 <shapr> thing is, that two doesn't come from 3-1, it comes from fib 2
05:19:24 <clausen> 1 1 2 3 5 8 13...
05:19:35 <clausen> 8 = 5 + 3
05:19:43 <clausen> f(5) = f(4) + f(3)
05:20:48 <clausen> (try writing a function for that sequence 1, 1, 3, 5, 8, 13, ...)
05:20:56 <clausen> (in maths notation)
05:20:57 <CowGirl> ok, see i understand that
05:21:02 <shapr> fib 2 isn't given to us, we have to find out its value.
05:21:07 <CowGirl>  f(5) = f(4) + f(3)  that makes total sense now
05:21:09 <shapr> fib 3 = fib 1 + fib 2 (we don't know fib 2, so we have to solve it -- fib 2 = fib 0 + fib 1)
05:21:13 <CowGirl> just simply put
05:21:26 <clausen> CowGirl: so, in the general case:
05:21:49 <clausen> CowGirl: f n = f (n-1) + f (n-2)
05:22:20 <shapr> and everytime you run across a value of fib that you don't know yet, you call yourself with that value so you can get the result
05:22:48 <shapr> CowGirl: so, what about the reverse function? do you know how it works?
05:23:01 <CowGirl> no, havent seen it
05:23:09 <shapr> the one you pasted earlier
05:23:35 <CowGirl> oh....ok, sorry i was thinking reverse of fib.....
05:24:00 <CowGirl> i know what it does..... takes every n block of a string and reverses it....
05:24:01 <CowGirl> but
05:24:35 <CowGirl> reverse (take n xs) ++ rev n (drop n xs)
05:24:44 * Igloo hmmms at http://lists.debian.org/debian-devel/2003/debian-devel-200308/msg02682.html
05:24:50 <CowGirl> but why it recalls rev...
05:25:02 <CowGirl> and not just the reverse function
05:25:06 <CowGirl> from the prelude
05:25:41 <shapr> ok, the simplest recursive function is length
05:25:45 <shapr> length [] = 0
05:25:51 <shapr> length (x:xs) = 1 + length xs
05:26:08 <Marvin--> Igloo: well, I haven't used any of those three packages, so I feel disqualified
05:26:23 <shapr> if you have (x:xs) in the left hand side of a function, and that function gets a list as an argument
05:26:25 <Segora> hmm. may mailbox fills up with mails about length
05:26:35 <Segora> -a
05:26:41 <shapr> then it assigns the first item of the list to x, and the rest of the list to xs
05:26:46 <clausen> Segora: length of lists? :p
05:26:49 <CowGirl> yes
05:27:00 <Jerub> shapr: isn't the simplest recursive function an operation on integers, not on lists?
05:27:01 <CowGirl> like.... H=x : ELLO = xs
05:27:07 <shapr> CowGirl: yes!
05:27:08 * Igloo would be more tempted had I not recently tried to fix nhc98 and found it has a multitude of issues  :-)
05:27:29 <Jerub> i.e. CowGirl head and tail respectively. the head is an element, the tail is a list of elements. :)
05:27:32 <Segora> clausen: i'm not so sure. they use all sorts of terms I didn't learn at school. ;)
05:27:45 <shapr> CowGirl: so, length ['a','b'] = 1 + length ['b']
05:27:58 <shapr> and length ['b'] = 1 + length []
05:28:00 <shapr> and length [] = 0
05:28:19 <CowGirl> ok, understand that....
05:28:29 <CowGirl> it goes through each element in the list
05:28:37 <CowGirl> till u reach the base case
05:28:40 <shapr> right
05:28:42 <shapr> that's recursion
05:28:42 <CowGirl> of an empty string
05:28:47 <CowGirl> which is defined in this function
05:29:18 <CowGirl> ok, understand that
05:29:26 <shapr> it's like "How do you fold a basket of clothes? 1) if the basket is empty you're done 2) if the basket is not empty, fold the top thingy, goto 1
05:29:33 * Jerub ponders the simplest recursive case.
05:29:37 <Jerub> foo = foo
05:29:42 <Jerub> :)
05:29:44 <shapr> ones = 1 : ones
05:30:27 <CowGirl> ok with the drop function....
05:30:54 <Jerub> hey thats cool
05:31:04 <CowGirl> that drops the first n chars in a string
05:31:10 <CowGirl> keeping the remaining
05:31:18 <Jerub> the I/O is lazy so it starts outputing :)
05:31:22 <CowGirl> so drop 3 hello = "lo"
05:31:53 <CowGirl> ok,  so if i have rev n ( "lo")
05:32:13 <CowGirl> with 3....
05:33:21 <Segora> mylngth = foldl (\n _ -> n+1) 0
05:33:22 <Segora> ;)
05:33:22 <shapr> try "hello."
05:33:32 <shapr> rev 3 "hello."
05:33:38 <shapr> and compare that to
05:33:43 <shapr> rev 2 "hello."
05:34:00 <CowGirl> for the complete function... rev 3 is....
05:34:16 <CowGirl> lehol
05:34:29 <shapr> yup
05:34:32 <CowGirl> rev 2 is ... ehllo
05:34:39 <shapr> yup
05:34:53 <shapr> sounds like you understand recursion
05:35:04 <CowGirl> yeah, that i understand fine
05:35:15 <CowGirl> how it sorts through each element in a list
05:35:22 <CowGirl> and applies a function to each element in a list
05:35:43 <CowGirl> like say u want to convert a word to uppercase....it will sort through each letter
05:35:46 <CowGirl> converting one at a time
05:35:56 <CowGirl> using ASCII lets say
05:35:58 <Jerub> shapr: whats the definition of 'rev', for my reference.
05:36:29 <CowGirl> rev :: Int -> String-> String
05:36:29 <CowGirl> rev _ [] = []
05:36:29 <CowGirl> rev n xs = reverse (take n xs) ++ rev n (drop n xs)
05:36:45 <CowGirl> its the same reverse function
05:37:03 <CowGirl> just cause reverse is already in the prelude of course
05:37:27 <Jerub> ahh
05:37:33 <Jerub> rev n l = reverse (take n l) ++ drop n l
05:37:51 <CowGirl> yeah, see i understand the take part
05:38:08 <CowGirl> that takes 'n' number of chars in a string
05:38:18 <CowGirl> then reverses it as reverse is in the prelude...
05:38:20 <CowGirl> but for drop
05:38:29 <Jerub> CowGirl: I don't understand that definiton you've got there.
05:38:46 <CowGirl> like......   rev 3 "hello"
05:38:56 <CowGirl> = "lehol"
05:39:01 <CowGirl> that what u asking?
05:40:01 <Jerub> ohh, 
05:40:13 <Jerub> do me a favour, rev 3 "abcdefghijlk"
05:40:38 <keverets> should be cbafedihgklj
05:40:44 <CowGirl> yep
05:40:52 <Jerub> now I understand. :)
05:41:25 <CowGirl> reverses every n block of characters
05:41:35 <Jerub> yeap.
05:41:37 <CowGirl> i understand the take part
05:41:45 <CowGirl> so for what u just did,  take is "abc"
05:41:51 <CowGirl> then reverse that is cba
05:42:03 <Jerub> so the recursion in it isn't going item by item, its jumping 'n' along the list.
05:42:06 <CowGirl> but for drop.....it drops the first 3...and keeps the rest
05:42:14 <CowGirl> yeah, exactly
05:42:53 <CowGirl> and in keeping the rest, it does the same,...takes n block and reverse that block....
05:43:03 <CowGirl> but what im confused with, is why it recalls rev...
05:43:10 <keverets> to do what you just said.
05:43:16 <Jerub> ahhh, now that I can help you with.
05:43:24 <CowGirl> no shit sherlock! :)
05:43:30 <keverets> otherwise it would just stop after reversing the first.
05:43:38 <Jerub> lets use "123123123" as our example.
05:43:40 <CowGirl> it recalls..... rev n
05:43:41 <CowGirl> ok
05:44:20 <Jerub> rev 3 "123123123" = reverse (take 3 "123123123") ++ reverse (take 3 "123123") ++ reverse (take 3 "123") ++ []
05:44:23 <keverets> it recalls "rev n (rest)"
05:44:30 <CowGirl> so just refering to drop.....  u are using "123123"
05:45:12 <CowGirl> ok....
05:45:24 <Jerub> you know foo x:xs = x + foo xs, its almost the same, except we can't use the declarative syntax
05:45:31 <Jerub> so we've gotta do the recursion another, more flexible, way.
05:45:33 <CowGirl> but isnt the reverse function just being applied to the take part?
05:45:52 <Jerub> no, take refers to the head of the list.
05:45:57 <Jerub> drop gets the tail of the list.
05:46:31 <Jerub> dosomethingwith (take the first n) ++ recursewith (drop the first n)
05:46:56 <Jerub> dosomethingwith head ++ recursewith tail
05:47:00 <CowGirl> ok....i see now..... tell me if this is write...
05:47:07 <CowGirl> its doing a complete recursion...
05:47:11 <CowGirl> see what i was thinking
05:47:20 <CowGirl> is that is just does take first right...
05:47:33 <CowGirl> then is done with that and moves onto drop, and stays at drop...
05:47:52 <CowGirl> so this does a complete loop back to take....TAKE  uses the left over of drop
05:47:58 <CowGirl> and then reverses it
05:48:06 <CowGirl> so drop doesnt actually reverse anything
05:48:14 <Jerub> ...
05:48:24 <keverets> yup. drop only drops things
05:48:28 <Jerub> I think we're mixing purposes here.
05:48:41 <CowGirl> it just holds the next line in the recursion, and then goes back to take which then reverses....
05:48:44 <Jerub> but yes.
05:48:55 <Jerub> yes, okay, you're right :)
05:48:56 <CowGirl> how do u mean??  mixing purposes??
05:49:09 <CowGirl> so im spot on there, no confusion??
05:49:21 <Jerub> CowGirl: I thought we were on different tracks, but we werenm'
05:49:26 <Jerub> t
05:49:42 <crazney> contains :: Eq a => [a] -> a -> Bool
05:49:42 <crazney>   what does the 'Eq a =>' mean?
05:49:52 <CowGirl> Equal 
05:50:13 <Jerub> crazney: it means 'a' is a datatype that can be equal to something else.
05:50:22 <crazney> ah
05:50:24 <crazney> ok.. thanks
05:50:31 <CowGirl> ...see what i was thinking is that it just goes straight through the function once....meaning it does it recursively
05:50:57 <CowGirl> but drop does the main recursion....
05:51:03 <CowGirl> i get it now though....THANX :)
05:51:11 <Jerub> CowGirl: when looking at recursive functions, the easiest thing to do is to say. "Where's the head? Where's the tail?"
05:51:12 <shapr> Eq a => is a class constraint
05:51:16 <Jerub> ;)
05:51:20 <Jerub> well, list processing recursion.
05:51:34 <shapr> it means something must be a member of the Eq typeclass or this function won't take it.
05:52:07 <CowGirl> thanx Jerub....I get it now!!!
05:52:24 <Jerub> CowGirl: Just paying back the karma for learning haskell here myself ;)
05:52:27 <shapr> in short, if you can't do == /= on the input type, it won't work.
05:52:49 <Jerub> CowGirl: what university are you at?
05:52:58 <CowGirl> lol
05:53:00 <CowGirl> UNSW
05:53:04 <CowGirl> u?
05:53:19 <Jerub> ahh, they have a firstyear course in haskell don't they?
05:53:27 <Jerub> ex-UQ.
05:53:30 <CowGirl> yeah,,,,unfortunately!!!
05:53:33 <Jerub> I'm one of those working people now.
05:53:53 <CowGirl> im doing Info Sys degree, and probably will never use this again!!
05:54:03 <Jerub> CowGirl: hey, once you can think recursively, there's no hope for you, you'll turn into a real programmer. ;)
05:54:03 <Jerub> now, I'm going to go to bed :)
05:54:15 <clausen> CowGirl: do you know Alan Blair?
05:54:16 <shapr> you may never do Haskell again, but what it teaches you, you will use again.
05:54:18 <Jerub> CowGirl: Don't you believe that.
05:54:36 <CowGirl> Alan Blair,  sorry, dont know him.
05:54:40 <CowGirl> Jerub, why say that?
05:55:06 <CowGirl> i mean unless i major in programming in my degree, but thats unlikely, and not what i was aiming for
05:55:11 <Jerub> CowGirl: because in learning haskell you're learning some very important computer science concepts that will stand you in good stead.
05:55:30 <CowGirl> ok....yes that i can understand
05:55:42 <Jerub> CowGirl: even in infosys you need to know how to program.
05:55:54 <CowGirl> yeah, we do a year of it
05:56:00 <Jerub> and haskell will teach you things that will turn you into a much better programmer than most could hope for.
05:56:38 <CowGirl> i hope so....cause its turning me nuts at the moment!
05:56:54 <Jerub> heheheheh
05:57:04 <Jerub> been there.
05:57:15 <Jerub> drove me insane.
05:57:25 <Jerub> I ended up getting top marks.
05:57:29 <CowGirl> I do think its beneficial to learn for sure......just aggrivating!
05:58:08 <CowGirl> Well i appreciate ur help!!! :)
05:58:12 <CowGirl> Thank u :)
06:18:45 <crazney> alright.. i have a question.. i have a function 'mean3' which takes 3 parameters and returns the mean value of them... but now i'm asked to write a function 'howManyAboveMean :: Float -> Float -> Float -> Int' which returns the number of those 3 arguments above the mean.. this would be easy enough in C (have a variable that counts..).. but since i can't do that in functional programming.. well, hows the best way to do this (othe
06:18:45 <crazney> r than a bunch of big if statements)
06:20:03 <shapr> pattern matching?
06:20:03 <Igloo> Make a list of them, then get the members of the list that are above the mean and count them
06:20:33 <shapr> yah, that's a better solution
06:20:41 <shapr> then you can do it for any number of params
06:21:40 <crazney> can i just create the list of them in the function?.. the function is supposed to specifically be 'howManyAboveMean :: Float -> Float -> Float -> Int' (if it was in a list it'd be much easier i guess)
06:22:29 <Igloo> You can say
06:22:34 <Igloo> foo x y z = ...
06:22:40 <Igloo>   where xs = [x, y, z]
06:23:21 <Igloo> Or you could write a helper function    bar :: [Float] -> Int   and foo x y z = bar [x, y, z]
06:23:30 <crazney> oh.. cool. i don't think we have learnt that yet. but thanks!
06:23:38 <crazney> (i'll use it anyway :))
07:01:13 <Heffalump> hmm, it would be a shame if Debian lost nhc
07:01:36 <Heffalump> but if it's literally impossible to build it from source atm, it might be hard to maintain...
07:03:06 <Igloo> It's gcc3 issues
07:03:44 <Igloo> As in just cpp stuff. ISTR it was easy, just there was a lot of it
07:03:57 <Heffalump> I meant the tarball unpacking issue.
07:04:19 <Igloo> That could be fixed just by making a new tarball, but anyway I was misremembering and it's c2hs with that problem
07:04:48 * Igloo will probably e-mail Brent tonight if no-one else has publically before then
07:05:37 <Heffalump> oh, right
07:05:49 <Heffalump> cool.
07:05:56 <Heffalump> I don't really care about hmake and hat.
08:01:04 <Lunar^> @type shows
08:01:04 <lambdabot> shows :: Show a => a -> ShowS
08:01:12 <Lunar^> @info ShowS
08:01:13 <lambdabot> Sorry, I don't know the command "info", try "lambdabot: @listcommands"
08:01:19 <Lunar^> @type ShowS
08:01:19 <Riastradh> @prelude ShowS
08:01:21 <lambdabot> *** "ShowS" prelude "Haskell Standard Prelude Dictionary": text follows
08:01:21 <lambdabot> ShowS
08:01:21 <lambdabot>   type ShowS   = String -> String
08:01:22 <lambdabot> shows
08:01:24 <lambdabot>   shows ::  Show a => a -> ShowS
08:01:26 <Lunar^> thx
08:01:26 <lambdabot>   shows         = showsPrec 0
08:02:30 <Riastradh> The @prelude command is generally more informative than @type, since it can look up any sort of thing in any of the Haskell standard libraries (not just Prelude), and it shows the definitions, too.
08:09:57 * Marvin-- mutters in hdaume's general direction
08:10:31 * Heffalump applauds in hdaume's general direction
08:10:46 * hdaume is confused in hdaume's general direction
08:11:06 <Heffalump> Marvin is annoyed about the licence you put on HAllInOne
08:11:07 * Riastradh explorbs.
08:11:12 <Heffalump> I think it's funny.
08:11:16 <hdaume> ah
08:12:05 <Riastradh> What licence put he on it?
08:12:14 <Marvin--> hdaume: I have three things to say: 1) your download script thingy sucks, 2) your license sucks, 3) next time, build a proper damn tarball that has a *directory* in it so it doesn't pollute the directory I unpack it to
08:12:51 * Riastradh vehemently and emphatically agrees with number 3.
08:13:03 <Marvin--> I guess that would be three "you suck":s in a row ;)
08:13:20 <hdaume> yeah, i really agree with #3, too....i hate it when people don't do that...i shall fix that immediately :)
08:13:32 * Riastradh doesn't know what the licence or download script are (or even what this 'HAllInOne' thing is), so he doesn't have anything to say about numbers 1 and 2.
08:13:32 * Heffalump thinks people should stop criticising someone for writing useful software and letting other people have it.
08:13:34 <hdaume> it was really just laziness that made me forget :)
08:13:57 <Marvin--> Heffalump: that's not what I'm criticising him for, and you know it
08:14:33 <Heffalump> you're telling him that he sucks, as a direct result of him making his software available to you
08:15:12 <Riastradh> So, um, what is this 'HAllInOne' thing?
08:15:27 <Marvin--> the "you suck" was meant humourously
08:15:29 <Heffalump> Riastradh: takes a Haskell program in multiple modules and makes one big module instead
08:15:48 <Marvin--> what I'm annoyed by is the licensing and that he makes it hard to download it
08:15:53 <Marvin--> I can live with the latter, but not the former
08:16:09 <Riastradh> OK, now what's the licence on it?
08:16:18 <Marvin--> I think they were bad decisions, and being used to Debian terminology, I used the word "sucks"
08:16:37 <Heffalump> I can't quite remember, but something along the lines of the author being able to require anyone who gets it to perform a strange ritual.
08:16:49 <Heffalump> s/gets/distributes or modifies/
08:19:38 <hdaume> the tarball issue is fixed
08:19:51 <Heffalump> >> a. Lift your left leg, close your eyes and jump in
08:19:51 <Heffalump> >> the air.  Now tap the point of your nose exactly two
08:19:51 <Heffalump> >> times with your  right index finger. To complete:
08:19:51 <Heffalump> >> say the words  "thank you Big Kazooba"
08:20:13 <Heffalump> hmm. I can't comply, because I can never remember which my index finger is.
08:21:13 <hdaume> it's the pointer finger :)
08:21:22 <Heffalump> the one next to the thumb?
08:21:26 <hdaume> yeah
08:21:35 <Heffalump> I shall try to remember this.
08:21:56 <Marvin--> FUCK
08:22:04 <Marvin--> "The European Patent Office (EPO) in Munich has recently granted a patent to Amazon which covers all computerised methods of automatically delivering a gift to a third party. This patent is a descendant of the famous "Amazon One Click Patent" granted in the USA, but with a broader claim scope than the original US version."
08:22:26 <hdaume> ridiculous
08:22:31 <Heffalump> errm, like that'd survive a challenge
08:23:41 <Marvin--> "The documentation shows that the EPO has created its own rules to systematically grant thousands of US-style patents on algorithms and
08:23:41 <Marvin-->    business methods, and that the proposed EU Software Patent Directive currently under discussion in the European Parliament would impose exactly these EPO rules on Europe's national courts."
08:26:44 <shapr> yay, four people coming to the #haskell meetup
08:26:51 <shapr> well, six?
08:26:58 <shapr> SyntaxPolice and Igloo too?
08:28:50 <Heffalump> didn't I say me and Igloo were coming on the webpage?
08:29:19 <Heffalump> cool, someone fixed my spelling of Uppsala too
08:29:33 <shapr> oh yeah..
08:29:40 <shapr> ok, at least six people :-)
08:29:52 <Heffalump> cool.
08:30:07 <Heffalump> @seen phubuh
08:30:08 <lambdabot> I saw phubuh leaving #haskell 1 hour 34 minutes 53 seconds ago.
08:30:50 <Marvin--> where's this page?
08:30:55 <Heffalump> http://www.haskell.org/hawiki/HaskellIrcChannel
08:31:04 <Heffalump> are you going to come to Uppsala?
08:31:18 <Marvin--> still haven't decided
08:31:38 <Marvin--> heh, someone's qouted me
08:31:42 <Marvin--> damn you :)
08:34:54 <Marvin--> anyhoo... I can't afford the conference - and I guess it's too late anyway - and I'm not invited to the HIM, and I don't have anywhere to stay either in Uppsala or Stockholm
08:35:03 <shapr> come to the #haskell meeting!!
08:35:37 <Marvin--> uh... I still don't have anywhere to stay, remember?
08:36:19 <shapr> would you need a place to stay overnight to hang out with us for an evening?
08:36:41 <Marvin--> ... yes
08:36:55 <Marvin--> I may live in Sweden, but I don't live in Uppsala
08:37:22 <shapr> I could ask the hotel if you could sleep on our floor for one night
08:37:28 <shapr> that is, SyntaxPolice and I
08:37:35 <shapr> he's standing behind me, so I just asked him :-)
08:37:46 * Heffalump suspects they wouldn't like that
08:37:57 <Marvin--> no, they rarely like that
08:38:02 <Heffalump> otherwise, I'd have offered the same
08:39:33 <Marvin--> there are often extra bed offers and things like that... or I could try to find a hostel or something
08:40:19 <Marvin--> which night are we talking about? Gotta figure out if there are cheap train tickets to be found
08:40:32 <shapr> so far the list includes ICFP attendees only
08:40:49 <shapr> aka, you tell me
08:40:54 <Marvin--> what I mean is, I need to know a week in advance to be able to get cheap tickets
08:40:59 <Marvin--> well... cheaper ;)
08:41:11 <shapr> is any time best for all to meetup?
08:41:56 <Marvin--> I'm looking at the 26th right now, which is next Tuesday... I don't think I can make the 25th
08:41:56 <shapr> looks like 24-28 is the intersection currently
08:42:03 <shapr> ok
08:42:19 <Igloo> Was there anything against the afternoon after ICFP finishes before HW starts?
08:42:34 <shapr> which day?
08:42:47 <Marvin--> that'd be the 27th?
08:42:48 <shapr> oh, I have my program next to me...
08:43:07 <Igloo> 27th, yes
08:43:20 <Heffalump> 28th isn't in the intersection, you (shapr) said you were leaving on the night of the 27th...
08:43:40 <Marvin--> eh? before HW?
08:43:42 <shapr> oh right
08:43:49 <shapr> now I'm confused
08:43:50 <Heffalump> 27th is the Thursday, the day of HW
08:43:53 <Heffalump> unless I'm confused
08:43:56 <Heffalump> oh. hmm, I must be.
08:44:03 <Marvin--> uh, no, 27th is Wednesday
08:44:05 <shapr> no, 28th is a thursday
08:44:12 <Heffalump> ah, right, yeah
08:44:22 <Heffalump> so 24th-27th evenings are the intersection of when people are there.
08:44:32 <Heffalump> 28th during the day is in the intersection, but not the evening
08:44:48 <shapr> right!
08:45:31 <Marvin--> all right, 27th would be best for me... That'd give me time tomorrow to figure out where to stay, before buying tickets
08:45:38 <shapr> so, wednesday evening sounds best?
08:45:53 <shapr> but before SP and I ship out to sthlm
08:45:55 <Marvin--> then I could show up some time during the afternoon, and then leave some time during the afternoon Thursday
08:46:04 * Heffalump tries to remember where he's staying
08:46:17 <Marvin--> shapr: eh, I thought you were going to HW? Wasn't HW the 28th?
08:46:32 <shapr> yes, I've just noticed that
08:46:34 <Igloo> Same place as shapr+SP I think - Hotel Uppsala?
08:46:35 <shapr> I'm wondering myself
08:46:42 <Heffalump> sounds right
08:46:53 <Heffalump> Marvin--: maybe you should ring them and ask what the situation would be
08:47:01 <shapr> ok, I got it
08:47:13 <shapr> SP and I are in sthlm the night of the 28th
08:47:27 <Lunar^> does someone has a best name for this :
08:47:28 <Lunar^> rMap :: a -> [(a -> b)] -> [b]
08:47:30 <Lunar^> rMap a fs = map (\ f -> f a) fs
08:47:55 <shapr> Lunar^: fold?
08:48:12 <Heffalump> rmap sounds better than anything else
08:48:14 <Heffalump> fold is wrong
08:48:16 <shapr> oh
08:48:29 <shapr> @type scanl
08:48:29 <lambdabot> scanl :: (a -> b -> a) -> a -> [b] -> [a]
08:48:55 <hdaume> you can also just write 'rMap a = map ($a)'
08:48:59 * shapr is obviously confused
08:49:07 <Lunar^> hdaume: nice :)
08:49:14 <Marvin--> I don't think I can afford hotel prices right now... the train tickets still cost a fair bit, and I'm still not quite sure I'll get money for my studies during the fall until I finish my degree project...
08:49:58 <Heffalump> Marvin--: even the difference between a single-occupancy and a double-occupancy room?
08:50:12 <shapr> Marvin--: I'm planning to call the hotel anyway for something else, I'll ask them if would cost extra for you to sleep on the floor, yah?
08:50:26 <shapr> Marvin--: even though I know how much you enjoyed sleeping on the floor at debcamp :-)
08:50:49 <Marvin--> Heffalump: eh?
08:51:04 <Marvin--> shapr: all right... and heck, for one night, it's not a problem
08:52:16 <Heffalump> Marvin--: if they charge extra for one more person in the same room, it probably wouldn't be that much extra
08:52:31 <Marvin--> shapr: well, yes, but I'm not sure that can be arranged "afterwards"
08:52:37 <Marvin--> er, s/shapr/Heff/
08:52:51 <Marvin--> shapr: anyway, don't wait too long with the call, I need to buy train tickets tomorrow
08:52:56 <Heffalump> if it's the same room anyway, it shouldn't cause them a problem, though
08:53:06 <Marvin--> you never know :)
08:53:18 <Heffalump> shapr: are you and Syntax sharing a room?
08:54:06 <Marvin--> *groan* I still have to make travelling arrangements for my Germany trip too... guh
08:55:02 <shapr> Heffalump: yah, we are
08:55:16 <shapr> Marvin--: ok, I'll call them tomorrow morning
08:56:06 <Marvin--> what's "morning" in your book? ;)
08:56:42 <shapr> 10am?
08:57:01 <shapr> I've been adjusting my idea of morning so that I won't oversleep at ICFP ;-)
08:57:44 <Marvin--> all right ;)
08:58:37 <shapr> has anyone tried the gdesklets deb?
08:59:03 <shapr> I can't find the actual desklets in the menu, only the daemon
08:59:07 <Marvin--> no, but I've been meaning to
08:59:52 <Igloo> There isn't a README.Debian is there?
08:59:58 <shapr> there is
09:00:01 <shapr> it doesn't help
09:00:03 <Igloo> But it doesn't help?
09:00:03 <Igloo> Ah
09:00:11 * Igloo gives up on making CVS do what I want
09:00:17 <shapr> er, sorry, no README.Debian
09:00:24 <shapr> just README.gz and changelog.Debian.gz
09:00:55 <Marvin--> fuck, I can't install gdesklets until the python transition is sorta over
09:01:13 <shapr> "Open your file manager and click on a .display file in order to put that display onto the desktop."
09:01:21 <shapr> that's the part where I'm lost.
09:01:34 <shapr> what .display file? where? can I run it from the cmdline?
09:01:41 <Igloo> Are you using nautilus or something?
09:01:54 <shapr> I just installed it to try it out
09:01:56 <Marvin--> are you using gnome or kde?
09:01:58 <shapr> gnome
09:02:19 <shapr> only to try out gdesklets though, after which I'll switch back to ion ;-)
09:02:24 <Marvin--> then open up ~/.gnome-desktop in nautilus, there should be .display files there...
09:02:25 <Heffalump> igloo: oh?
09:02:30 <Heffalump> didn't cvs log -r help then?
09:02:44 <shapr> Marvin--: nothing there
09:03:16 <Marvin--> no, wait, .display?? No idea what that is
09:03:19 <Marvin--> I misread it as .desktop
09:03:28 <Igloo> I think -rghc-6-0-1: always tells me about the revision at that point, so I'm getting a chunk of noise for every single file. Plus I think it's telling me about deleted files too
09:03:52 <Heffalump> ah :(
09:04:05 <Heffalump> you could try doing it by date and asking for the date just after that checkin finished
09:05:55 <Marvin--> hrrm... no direct flights from Gรถteborg to Hamburg or Bremen
09:07:32 * Marvin-- sighs
09:07:34 <Marvin--> this is complicated
09:12:03 <shapr> oh, you have to download sensors and displays separately
09:12:07 <shapr> wow, they look cool
09:13:12 <Marvin--> url?
09:13:43 <shapr> http://www.pycage.de/software_gdesklets.html
09:13:48 <Marvin--> or do you know any other packages?
09:14:17 <shapr> I downloaded the tbz packages and installed them
09:15:06 <Igloo> Oh arse. Even if I get this to work I'm just going to get a ton of "merge rev. 1.158"
09:15:46 <shapr> what are you doing?
09:16:42 * Marvin-- says "eh" to the python 2.3 transition and installs gdesklets
09:16:49 <Igloo> I was trying to get all the checkin messages in the stable branch since ghc 6.0.1
09:17:16 <Marvin--> what the hell... file-roller seems buggy
09:27:08 <Marvin--> shapr: I'm lost too... how did you do this?
09:27:40 <Marvin--> bah, broken dependencies
09:29:55 <Marvin--> whee, I got the weather applet to work
09:36:40 <Marvin--> I'm not quite following how this is supposed to work... Do I still have to keep the .display files around after running the installers? Why aren't they included when intalled then?
09:40:21 <shapr> I dunon
09:40:26 <shapr> they're an XML file of some sort
09:40:37 <shapr> anyways, you double click on the .display file and the thingy arrives on your desktop
09:40:45 <Marvin--> yes
09:40:47 <shapr> after you've installed the other stuff
09:40:59 <Marvin--> yes
09:41:05 <shapr> it's cute, but not cute enough to get me to switch back to gnome
09:41:27 <Marvin--> but if you still need the .display files after "installing", why aren't they also "installed2?
09:41:53 * shapr dunno
09:42:07 <Marvin--> well, I already use gnome, so it's a win-win for me ;)
09:42:14 <Marvin--> a weather applet is really nice
09:42:20 <shapr> I got just got email from the deb author, he says he'll have a sensors&displays deb soon
09:42:43 <Marvin--> go seb128 :)
09:47:28 * Marvin-- sighs and tries to figure out what kind of deck to build
09:47:47 <keverets> a bigger one than you think you need.
09:47:59 <Heffalump> deck?
09:50:54 <Marvin--> Heffalump: I'm a silly CCG playing person
09:50:54 <Marvin--> keverets: big decks == slow decks
09:50:54 * Heffalump still doesn't understand, but never mind
09:50:54 <Marvin--> Heffalump: CCG == collectible card game
09:51:38 <Heffalump> ah
09:51:38 <Marvin--> sheesh, what kind of geek are you if you don't know that? :)
09:52:09 <keverets> which CCG are you building a deck for?
09:52:25 <Heffalump> I'm a computer geek, not a whateveritis geek.
09:53:50 <Marvin--> dang
10:58:36 * shapr whines about a painful unplanned unicycle dismount
11:09:09 <Heffalump> shapr: :(
11:29:26 <shapr> as long as my knee works during ICFP, I won't be too upset ;-)
11:29:37 <shapr> hey, has anyone here tried SyntaxPolice's DistUtils?
11:30:12 <Marvin--> haven't had time
11:31:04 <shapr> looks nifty
11:31:08 <shapr> autodebbing
11:31:43 * shapr tries to create a lambdabot dist...
11:34:12 <Marvin--> I've never believed in autodebbing
11:34:13 <Igloo> Cool - for HE?
11:34:57 <shapr> Igloo: yah, if I can use SyntaxPolice's distutils to make a lambdabot deb, I'll give myself bonus points for accomplishing two goals at once.
11:35:01 <Heffalump> autodebbing is good
11:35:13 <Heffalump> if you the autodebber picks up patches to improve the deb
11:35:39 <shapr> speaking of which, I haven't checked lambdabot lately
11:35:42 <shapr> for new patches
11:35:45 * Heffalump hasn't done anything to it
11:35:52 <shapr> nor have I
11:35:55 <Heffalump> did we reach a conclusion on where the definitive repository was?
11:35:58 <shapr> Haddock was too frustrating
11:36:10 <shapr> darcs, unless it causes problems
11:36:15 <shapr> in which case we switch back
11:36:30 <Igloo> Euch, with dynamic module loading you'd presumably need lambdabot-$compiler for all suitable compilers?
11:36:40 * shapr blinks
11:36:43 <Heffalump> yes, where compiler = ghc :-)
11:37:03 <Igloo> ghc5 and ghc6 at least
11:37:18 <Heffalump> true
11:37:33 <Heffalump> same situation as packages
11:37:43 <Igloo> YM libraries?
11:38:30 <Heffalump> yeah.
11:40:10 <Igloo> Could you do what it does with FFI calling dlopen and foreign export/import pairs?
11:43:19 <Marvin--> I wonder what Python's dl module does
11:47:13 <Heffalump> I was wondering about that, but it'd be hard
11:47:49 <Heffalump> any libraries shared between each end would either have to be passed in as an explicit parameter or duplicated
11:48:53 <Heffalump> I'm not sure if green card or the like would be able to generate the necessary stubs automatically - hopefully they would
12:02:44 --- mode: kornbluth.freenode.net set +b flamer!*@*
14:36:49 <luteman> hello.
14:37:56 <Heffalump> 'lo
14:38:13 <luteman> how are you?
14:38:23 <Heffalump> not bad
14:38:41 <luteman> <looking for an opens-ource project to work on.
14:39:26 <Heffalump> what kind of thing are you interested in?
14:40:30 <luteman> lets see, programs that help people. fun stuff too. a challenge.
14:41:55 <Heffalump> hmm
14:42:00 <luteman> of course using  LSSP (languages for smart people) asm too.
14:42:01 <Heffalump> how good is your Haskell?
14:42:29 <luteman> only written  a few small ones.. sort  newbie.
14:42:36 <luteman> :)
14:42:47 <Heffalump> you could try hacking on lambdabot
14:43:02 <Heffalump> though I can't think of anything obvious that needs doing
14:46:11 <luteman> what's lambdabot written in? what does it need done?
14:46:30 <Heffalump> Haskell, and make interesting modules for it :-)
14:46:50 <Heffalump> it's in the haskell-libs project on sourceforge
14:47:01 <kaol> @yow
14:47:02 <lambdabot> This is PLEASANT!
14:47:19 * Heffalump goes to bed
14:47:34 <luteman> @yow
14:47:35 <lambdabot> ..  the HIGHWAY is made out of LIME JELLO and my HONDA
14:47:35 <lambdabot>  is a barbequed OYSTER!  Yum!
14:53:10 <Darius> @listmodules
14:53:11 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
14:54:17 <Darius> @listcommands quote
14:54:23 <lambdabot> Module quote provides the following commands: ["fortune","yow"]
14:59:16 <luteman> what about a haskell-help module?
15:09:17 <Darius> luteman: what would it include/do?
15:10:04 <luteman> well lets see, command reference for one.
15:10:41 <Darius> @prelude dropWhile
15:10:43 <lambdabot> *** "dropWhile" prelude "Haskell Standard Prelude Dictionary": text follows
15:10:43 <lambdabot> dropWhile
15:10:43 <lambdabot>   dropWhile ::  (a -> Bool) -> [a] -> [a]
15:10:43 <lambdabot>   dropWhile p []       = []
15:10:44 <lambdabot>   dropWhile p xs@(x:xs')
15:10:46 <lambdabot>   	 | p x       = dropWhile p xs'
15:10:48 <lambdabot>   	 | otherwise = xs
15:12:15 <Darius> However, shapr has been going on about Haddock integration that would give access to the heirarchical libs documentation.  You may want to talk to him about that as he's done some work.
15:14:09 <luteman> sure ok.
15:15:44 <Darius> There're also some really gung-ho things that could be done.
15:16:19 <luteman> well I have quite a bit time here.
15:16:57 <kaol> @eval dropWhile (> 5) [7,6,5,4,3,7]
15:16:57 <lambdabot> (line 1, column 12):
15:16:57 <lambdabot> unexpected ">"
15:16:57 <lambdabot> expecting simple term
15:17:55 <kaol> hmm? hugs accepts that.
15:18:54 <Darius> The eval module isn't a Haskell interpreter.
15:19:10 <Darius> @eval dropWhile (\x.x>5) [7,6,5,4,3,7]
15:19:11 <lambdabot> [5, 4, 3, 7]
15:20:07 <Darius> Writing a tutorial Haskell interpreter that provided things like traces, and stepping would be one of those gung-ho things to de.
15:20:16 <Darius> s/de/do
15:21:03 <luteman> do you mean stepping at the mondaic/imperative level?
15:22:57 <Darius> Actually, I pretty much mean the same thing with traces and stepping.  I.e. length [1,3,4] ==> 1+length [3,4]
15:23:34 <Darius> There would be plenty of issues to deal with to get that workable and meaningful
15:24:45 <luteman> alright i'm a bit a newbie here. though I have to ask, do i have to dig into the interpeter to get this information?
15:25:44 <Igloo> I think Darius is essentially suggesting writing something from scratch
15:26:42 * Igloo isn't convinced IRC is the best medium for this though - and doesn't hat already do it for off-line use?
15:27:16 <luteman> what writing a haskell intepreter?
15:27:57 <Igloo> Stepping through a program
15:28:15 <Igloo> Certainly if used on channel I can see it swamping the conversation
15:28:18 <luteman> Thats interpreter level work, correct?
15:28:33 <Igloo> Yeah
15:28:44 <luteman> what about a news grabber? :)
15:31:29 <Darius> Igloo: Of course, IRC isn't the best medium!  This is why it would be a really gung-ho thing.  However, it would be nice to have handy upon occasion.
15:31:51 <Darius> As for swamping, there are already quite a few modules that can generate a lot of output.
15:33:02 <Cale> @yow
15:33:03 <lambdabot> Imagine--a WORLD without POODLES...
15:33:20 <Darius> I've been thinking about adding a trace mechanism to @eval, but haven't thought of a way to do it that minimizes the effort I'd need to put out.
15:35:17 <luteman> man you know life sucks as a programmer when you get even get free work.
15:35:22 <luteman> :P~~~~~~~~~~
15:41:29 <Darius> Anyways, lambdabot is a monstrous amalgamation of whatever someone felt like adding at the time, so anything you think is a good idea and can code up, you can add to lambdabot.
15:41:51 <Darius> The plugin API is more or less straightforward.
15:42:02 <kaol> @listcommands seen
15:42:02 <lambdabot> Module seen provides the following commands: ["seen"]
15:42:14 <kaol> @seen lambdabot
15:42:14 <lambdabot> Yes, I'm here
15:42:31 <kaol> @seen kaol
15:42:32 <lambdabot> kaol is in #haskell.
15:42:59 <Darius> @seen slowbot
15:43:00 <lambdabot> I saw slowbot leaving #joy 16 hours 32 minutes 24 seconds ago.
15:44:19 <luteman> http://www.chesscentral.com/software/junior_8.htm
15:44:49 <Igloo> Oh, if you want some that I think should be quite small to start with, making seen tell you when someone last spoke as well as what channels they are on would be nice
15:46:45 <luteman> sorry wrong channel.
15:47:17 <Darius> @listmodules
15:47:17 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
15:47:31 <Darius> No, the chess playing module isn't loaded 
15:48:05 <Igloo> I think it needs modification for ghc6
15:48:11 <luteman> there is a chess module?
15:48:30 <Darius> I did say "monstrous amalgamation" ;)
15:51:07 <luteman> yeah I see.
15:51:11 <luteman> hehe.
15:52:03 <Darius> @listcommands dict
15:52:04 <lambdabot> Module dict provides the following commands: ["dict","dict-help","all-dicts","devils","easton","elements","foldoc","gazetteer","hitchcock","jargon","lojban","prelude","vera","web1913","wn","world02"]
15:52:57 * Darius should make a help module, which would probably require minor changes to the API, though it shouldn't break any code.
15:53:40 <Darius> I don't think currently there is (reasonable) way for modules to communicate with each other.
15:57:11 <Darius> @listcommands system
15:57:12 <lambdabot> Module system provides the following commands: ["listchans","listmodules","listcommands","join","leave","part","msg","quit","reconnect","echo"]
16:06:28 <luteman> alright so trace is useless here.
16:20:30 <Darius> huh?
16:27:25 <crazney_> hi there.. are Int's in haskell limited like they are in c and stuff?.. eg can you overflow an int?..
16:27:37 <Darius> Yes, but not an Integer.
16:27:48 <crazney> Darius: hrm, ok.
16:27:51 <crazney> thanks.
16:29:31 <Igloo> You don't know when Int overflow will happen either - it's only guaranteed to be at least 29-bits
16:31:45 <crazney> alright.
16:31:48 <crazney> ta
16:37:10 <hdaume> woohoo, my wordnet interface is completed and works :)
16:37:47 <luteman> cool.
16:38:15 <luteman> tell me is wxwindows the best platform to write a haskell game in (2d)?
16:38:35 <hdaume> i dunno, but i kind of doubt it
16:38:55 <hdaume> i'd actually say you're probably best off just using hopengl
16:39:20 <hdaume> (back in my years of writing games, i usually used either opengl or directx in 3d mode, even when writing 2d stuff)
16:39:28 <hdaume> (though that was, of course, in c++)
16:41:29 <luteman> I'll probably make it text based. 
16:46:24 <luteman> Though it'd be quite nicer to help someone out instead. :)
16:52:57 <Jerub> a game in haskell?
16:54:08 <luteman> sure, maybe Dragon Chess. though i probably won't make an ai for it.
16:54:43 <Darius> Jerub: There is (was?) HQuake
16:56:02 <luteman> I sure would like to play games again like the c-64 days. though everything now is violent.
16:56:16 <Smerdyakov> luteman, ever play a DOS game called Turbo Trek?
16:57:12 <luteman> no tell me about it.
16:58:03 <Smerdyakov> It's an old adaptation of the Starfleet Battles combat sim game.
16:58:15 <Smerdyakov> I've been playing it in dosbox lately. :)
16:58:33 <luteman> oh.
16:59:10 <luteman> well a year ago I was contemplating making a game to simulate a large captial ship.
16:59:40 <luteman> though again with my resources it would be text.
16:59:43 <luteman> hehe.
17:07:35 <luteman> Smerdyakov, I'm a vegan too.
17:08:13 <Smerdyakov> That's interesting. Did you find my web page somehow?
17:08:46 <luteman> sure, just did a look up.
17:09:09 <Smerdyakov> Ah. Yes, I'm a recent vegetarian. I'm at about my one-year anniversary now.
17:09:15 <luteman> i'd give you mine though it's in .zip form at the moment. more of a blogger really.
17:09:17 <Smerdyakov> I haven't had any consistency with veganism, though.
17:10:19 <luteman> cool. To stop some of the meat cravings i get a veggir brat of vegan hot dog. the burgers do not really do it unless you have all the toppings.
17:10:40 <Smerdyakov> Oh, black bean burgers are heaaaaaavenly.
17:10:50 <Smerdyakov> Especially when they're not made to taste like beef-burger.
17:12:49 <luteman> hehhe, try cabbage with a dash of mustard. yummy.
17:13:18 <Smerdyakov> I eat mostly Asian food.
17:13:37 <Smerdyakov> I'm in walking distance of about 100 Asian restaurants. :)
17:17:00 <clausen> I didn't realize vegetarian asian food existed
17:17:11 * Smerdyakov falls over
17:17:12 <clausen> (well, I'm exaggerating, but...)
17:17:19 * Riastradh falls over too.
17:17:26 <Smerdyakov> Almost all Asian dishes are vegan if you take out the meat and put in the tofu.
17:17:41 <Smerdyakov> If you count India as Asian, then your statement just becomes ridiculous. ;)
17:17:45 <hdaume> haddock doesn't yet support imp params, does it?
17:17:47 <Riastradh> Or just, um, take out the meat and don't try to replace it with barfulous substance that tastes gross.
17:17:49 <clausen> yeah, indian is an exception
17:17:57 <clausen> there is quite a bit of vegetarian indian
17:18:05 <Riastradh> With _a_ barfulous substance, that is.
17:18:18 <luteman> tofu is kinda gross.
17:18:22 * clausen likes tofu
17:18:35 <Smerdyakov> Riastradh, tofu works well with most anything. It absorbs the flavor and becomes delicious in proportion to the deliciousness of accompanyments.
17:18:40 <clausen> when I go out with my gf's family (chinese), it's always pork + prawns
17:19:17 <Riastradh> Or, in other words, it's just bland, tasteless matter, and what little flavour it has is drowned out by other flavours.
17:19:38 <Smerdyakov> Riastradh, so does this mean that you don't eat lettuce?
17:19:57 <hdaume> lettuce at least adds pleasant consistency
17:20:09 <Riastradh> I do, but I don't replace stuff with lettuce and find that it tastes just as good.
17:20:15 * hdaume likes tofu when it's well prepared and, unfortunately, this is rare
17:20:23 <Riastradh> I add lettuce for its own texture.
17:20:23 <clausen> Riastradh: it's good that there are bland ingredients to add a base to other strong ingredients
17:20:33 <Smerdyakov> hdaume, I am very rarely disappointed by tofu. Yum yum
17:21:00 <hdaume> i used to not like it, but there was a "tofu festival" in little tokyo a month or two ago which turned me around :)
17:21:16 <Jerub> heh
17:21:29 <Smerdyakov> Tofu tastes soooo much better than meat. No disgusting gristle, or little hairs poking out of it!!
17:21:36 <Riastradh> Now, I don't actually dislike tofu -- in fact, I like it quite a bit in dishes like miso (or however one ought to spell that) soup --, but I find it gross when it pretends to be another flavour, like that of chicken.
17:21:49 <Riastradh> Smerdyakov, properly prepared meat doesn't have gristle or hair.
17:21:52 <Jerub> Smerdyakov: bah, you odn't know what good meat tastes like ;)
17:21:52 <Smerdyakov> Riastradh, would it "pretend to be another flavor"?
17:22:05 <Smerdyakov> ^ why
17:22:31 <Smerdyakov> Riastradh, it's quite good on its own with spices, sauces, and seasoning, without any pretensions to meathood.
17:22:33 <Riastradh> OK, not 'pretend to be another flavour,' but replace another perfectly good flavour.
17:22:58 <Smerdyakov> Another perfectly good flavor that comes with an unhealthy food produced in an environmentally and ethically irresponsible manner....
17:23:42 <Riastradh> It's unethical to kill animals?  Plants are alive, too, you know.
17:24:03 <Smerdyakov> Just search for "factory farming" on the web and you'll understand.
17:24:21 <Smerdyakov> But... it isn't by chance that I listed that reason last.
17:24:37 <Riastradh> As someone pointed out a while ago in #hprog, the data that state that vegetarians are generally more healthy is rather innacurate, since vegetarians are generally more careful about their diet.
17:24:50 <luteman> sure, chopping off beaks because chickens peck themselves to death from no space them loading them with antibiotics is unethical, NOT.
17:25:36 <Smerdyakov> Riastradh, I have a somewhat special case: I have a very sensitive digestive system that tells me quite clearly with pain that eating animal products is BAD.
17:26:02 <Riastradh> And when was the last time you ate meat?
17:26:08 <Smerdyakov> A year ago
17:26:09 <Riastradh> Consistently, that is.
17:26:22 <Riastradh> i.e. tasting a sliver of chicken and vomiting doesn't count.
17:26:40 <Riastradh> s/Consistently/On a somewhat regular basis, for an extended period of time/1
17:26:44 <Smerdyakov> I was a ravenous meat eater up until the beginning of last summer.
17:27:52 <Riastradh> Did you stop due to this sensitive digestive system of yours or for some other reason, and then never start up again due to two months later (or some other somewhat long period of time)trying meat again and finding it upset your digestive system?
17:28:19 <Smerdyakov> The first choice.
17:30:27 <Riastradh> OK, but then, you did say that you had somewhat a special case.
17:30:53 <luteman> Well, check this out a new doctor here asks: Do you smoke? Do Drugs? And lastly, Eat meat?
18:16:40 <isomer> openBSD or netBSD?
18:17:45 <Smerdyakov> What?
18:18:18 <isomer> any opinions on which to install for a firewall?
18:18:25 <Pseudonym> OpenBSD, definitely.
18:18:32 <isomer> why?
18:18:44 <Pseudonym> Because you don't have to do anything on a firewall except route and filter.
18:18:59 <isomer> easier to set up in the end?
18:18:59 <Pseudonym> I wouldn't use NetBSD unless you have obscure hardware.
18:19:19 <Pseudonym> I've never set up a firewall under NetBSD, but I found doing it under OpenBSD fairly straightforward.
18:19:29 <isomer> cool... thanks for the info, Pseudonym
18:19:50 <Pseudonym> I've also done it with FreeBSD 2.x.  It was no easier or harder.
18:19:57 <Pseudonym> FreeBSD has come a long way since then, of course.
18:20:16 <isomer> openbsd is the best option overall, you figger?
18:20:24 <Pseudonym> From a security point of view, yes.
18:20:39 <isomer> okay. thanks
18:21:09 <Pseudonym> A firewall is basically an embedded device.  You don't need peopel logging into it and running applications, so you don't need a fancy easy-to-use packaging system etc.
18:21:27 <Pseudonym> So you can afford to spend a little extra on paranoid security, as you get in OpenBSD.
18:21:47 <Smerdyakov> Why not use a completely hardware firewall, anyway?
18:21:58 <Pseudonym> Usually because you already have a spare box.
18:22:03 <isomer> got a box sitting around doing nothing, waiting to become a firewall
18:22:10 <Pseudonym> See? :-)
18:22:21 <Pseudonym> And you don't need a grunty box, either.
18:22:41 <Pseudonym> A 120MHz Pentium can handle traffic from two 100Mb network cards no problem.
18:22:58 <isomer> hehe this one's an athlon 700 :)
18:23:07 <Pseudonym> Old hardware never dies, it just gets pushed down the food chain.
18:25:03 <clausen> my server is a 486 :)
18:25:24 <Pseudonym> A 486 can handle 10Mbit firewalling at full speed with no problem.
18:25:29 <Pseudonym> I know.  I've done it.
18:25:43 <Smerdyakov> I think the <$100 cost of a router is worth it to avoid spending time configuring an old PC.
18:25:44 <Pseudonym> Rule #1 of networking: You can get away with anything at 10Mbit.
18:25:54 <Pseudonym> Smerdyakov: Yes and no.
18:26:00 <Pseudonym> The experience may be well worth it.
18:26:15 <Smerdyakov> It might be worth it if I wanted to be a system administrator, but I don't.
18:26:22 <Pseudonym> Fair enough, then.
18:26:32 <Pseudonym> Remember, though, a router/firewall has to be configured anyway.
18:26:41 <Jerub> in the context of Java having strong static typing, python having strong dynamic typing, and php having weak dynamic typing. what typing would you say haskell had?
18:27:06 <isomer> strong static typing *that works*
18:27:08 <Pseudonym> Jerub: Here is a can opener and a can labelled "worms".
18:27:17 <Pseudonym> Now let me run to a safe distance.
18:27:24 * isomer ducks too
18:27:28 * Jerub laughs.
18:27:50 <Jerub> seriously, I just want a few descriptive words to explain to a friend.
18:28:01 <Pseudonym> I don't think anyone uses these terms consistently.
18:28:57 <Cale> I would say that it has strong static typing, but also the ability to automatically infer the types of things most of the time.
18:29:01 <Pseudonym> I think that Haskell has strong static typing.
18:29:22 <Smerdyakov> I think better might be "it's type safe" and "it's statically typed."
18:29:22 <Jerub> okay, thanks :)
18:29:26 <clausen> but it's important to mention that it has a very descriptive type system
18:29:27 <Darius> latent strong static typing
18:29:39 <Darius> uh, throw in polymorphic too
18:29:41 <Jerub> Darius: latent - thats a good keyword.
18:29:53 <Pseudonym> Darius: "Polymorphic" means many things.,
18:30:01 <Darius> True
18:30:04 <Pseudonym> Actually it means "many forms".
18:30:08 <Pseudonym> But it also means many things.
18:30:09 <Cale> heh
18:30:34 <Pseudonym> Parametric polymorphism is one.  Module name overloading is another.
18:30:38 <Cale> "polymorphic" is polymorphic.
18:30:38 <Pseudonym> Both of which Haskell supports.
18:30:43 <Darius> And inclusion polymorphism
18:30:48 <Pseudonym> Yes.
18:31:10 <Pseudonym> But Haskell doesn't have C++-style ad hoc overloading, which is another form of polymorphism.
18:32:39 <Pseudonym> I think that Haskell's type system is "static" in the sense that a variable has a type fixed at compile time, and "strong" in the sense that the compiler enforces that.
18:33:20 <Pseudonym> C, for example, is weak static, because a variable has a type fixed at compile time, but the compiler doesn't perform strong checks.
18:33:31 <Jerub> well, strong in the context of php vs. python means that the compiler won't just change the type depending on context.
18:33:37 <Jerub> so haskell definately has strong typing.
18:33:57 <Pseudonym> I'm not convinced that Python's typing is strong.
18:34:01 <Pseudonym> It might be.
18:34:04 <Pseudonym> Hmmm.
18:34:15 <Pseudonym> See, that's the problem.  It doesn't have a fixed meaning.
18:34:25 <Pseudonym> Python is strongly typed in the sense that you say.
18:34:35 <Pseudonym> Oh, hang on.  Duh.
18:34:37 <Darius> It can have a fixed meaning, it doesn't have a generally agreed upon meaning.
18:34:42 <Pseudonym> Yes, the strong type checks are checked at runtime.
18:34:53 <Pseudonym> So "strong dynamic" is probably right.
18:35:47 <Pseudonym> BRB
18:36:26 <Jerub> I think strong latent might be closer.
18:36:26 <Darius> strong for me, just means that type errors are caught by the system.  When is orthogonal and I use static/dynamic for that aspect.
18:36:27 <Jerub> dunno.
18:36:46 <Darius> latent and manifest is the difference on whether it's necessary to write down types or not
18:37:09 <Darius> (or precisely, the types of terms)
18:37:28 <Smerdyakov> Or the terms for the types.
18:37:53 <Jerub> hmm.
18:38:09 <Jerub> interesting, never thought of the parallel between interfaces and typeclasses.
18:45:03 <Pseudonym> Darius: That sounds like a good system.
18:45:30 <Pseudonym> Jerub: Yes, but there's one critical difference.
18:46:03 <Pseudonym> Interfaces (i.e. Java interfaces, C++ abstract base classes) have to be attached to the type at the place where the type is declared.
18:46:54 <Pseudonym> So in C++ you can often end up with types like this:
18:47:20 <Pseudonym> class DblVec4d : public Object, public Vec4d<double>
18:47:29 <Pseudonym> (That's from some of my recent code.
18:47:31 <Pseudonym> )
18:47:59 <Pseudonym> Object is the interface required for my own meta object protocol, and the other is the actual data as a mixin.
18:48:28 <Pseudonym> In Haskell, you can attach interfaces to type "after the event" as it were.
19:55:09 <luteman> You know what happens when you assume. You make an ass out of Uma-Therman.
20:04:13 <Jerub> no,
20:04:24 <Jerub> When you assume, you make an ass out of you and umption.
20:22:00 <luteman> thats a fargin trick statement.
21:52:36 <Verbed> @yow
21:52:37 <lambdabot> ...Um...Um...
21:52:41 <Verbed> @yow
21:52:42 <lambdabot> Yow!  Maybe I should have asked for my Neutron Bomb in PAISLEY--
21:52:46 <Verbed> @yow
21:52:47 <lambdabot> Pardon me, but do you know what it means to be TRULY ONE
21:52:47 <lambdabot>  with your BOOTH!
21:53:28 <Smerdyakov> You know, Verbed, you can get your own yow with a new productivity suite called emacs.
21:55:39 <Verbed> I need the RELAY.
22:04:40 <Pseudonym> lambdabot lacks a lisp interpreter.
22:04:55 <Pseudonym> If we did that, any emacs plugin would work.
22:05:25 <Cale> I want to play tetris on lambdabot!
22:05:27 <Cale> :)
22:05:34 <Pseudonym> @left
22:05:34 <lambdabot> Sorry, I don't know the command "left", try "lambdabot: @listcommands"
22:05:35 <Pseudonym> @left
22:05:35 <lambdabot> Sorry, I don't know the command "left", try "lambdabot: @listcommands"
22:05:36 <Pseudonym> @rotate
22:05:37 <lambdabot> Sorry, I don't know the command "rotate", try "lambdabot: @listcommands"
22:05:41 <Pseudonym> Oh well.
22:05:44 <Cale> heheh
22:06:03 <Verbed> Pseudonym, #trivia ?
22:06:10 <Pseudonym> No, #working
22:06:19 <Pseudonym> And #occasionally-geeking-out
22:06:26 <Verbed> #how-unfortunate
22:06:31 <Pseudonym> #indeed
22:07:30 <Darius> adding a lisp interpreter to lambdabot would be easy.
22:08:05 <Pseudonym> Depends how much of lisp you need.
22:08:13 <Verbed> Would it get first-class continuations?
22:08:16 <Pseudonym> And, of course, which lisp.
22:09:06 <Darius> ah, CL as a lambdabot plugin, or better as a function in @eval
22:09:09 <Pseudonym> CLtL2 parsers are a little nasty.
22:09:45 <Darius> @eval joy "3 dup dup * *"
22:09:48 <lambdabot> [27]
22:12:40 <Verbed> Hmm..
22:12:40 <Verbed> @eval joy "5 dup *"
22:12:40 <Verbed> @eval joy "5 3 dup * *"
22:12:42 <lambdabot> [25]
22:12:45 <lambdabot> [45]
22:17:10 <Darius> @eval joy "4 [[pop 0 =] [pop pop 1] [[dup 1 -] dip x *] ifte] x"
22:17:33 <lambdabot> [24]
22:17:56 <Darius> eval module eats shapr's machine
22:18:18 <Pseudonym> [] [honk] [you joy love] if
22:21:57 <Darius> They kept ifte still the read order because they figured basic usage would predominate 
22:30:19 <Pseudonym> Ah, OK.
22:30:29 <Pseudonym> [you joy love] [honk] [] ifte
22:30:31 <Pseudonym> That better?
22:51:59 <Smerdyakov> Honk honk!
22:54:02 <Fractal> forth love if honk then
23:24:32 <Heffalump> morning
23:32:55 <Darius> @eval joy "1 5 [[pop 0 =] [pop pop] [[dup 1 - [*] dip] dip x] ifte] x"
23:33:29 <lambdabot> [120]
23:33:55 <Darius> well... using an accumulator didn't seem to make much of a difference.
