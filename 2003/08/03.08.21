00:01:43 <shapr> frameworks are good.
00:02:02 <Verbed> You can look at it, if you're at all curious.
00:02:11 <Verbed> I don't know how advanced your knowledge of Zope is.
00:02:45 <shapr> I probably count as advanced.
00:02:46 <Verbed> It may just be dull and obvious.
00:03:06 <shapr> 95% of my income for the last year has been zope work.
00:03:34 <shapr> sure, I'd enjoy looking at your framework
00:04:12 <Verbed> Perhaps you might have some helpful comments.
00:07:57 <shapr> I think it's an elegant use of acquisition, I've built the same sort of thing to let clients 'automatically' create websites.
00:08:20 <shapr> I have a cute python script that recursively acquires itself to build navigation 
00:08:32 <Verbed> That sounds interesting.
00:10:22 * shapr looks for it
00:13:55 <Verbed> Does it just 'acquire' itself from each subdirectory?
00:14:17 <shapr> iirc, it acquires itself two ways
00:14:20 <shapr> up and down
00:14:31 <shapr> but I've forgotten the exact details
00:16:20 <shapr> the summary is, 1. "look for subdirs that contain a file named content_file, add those to the local navbar" 2. "acquire yourself from the parent subdir"
00:16:59 <Verbed> I understand, rather clever.
00:17:06 <shapr> yah, it's cute
00:19:46 <shapr> have you tried WASH?
00:20:01 <Verbed> No, I haven't.
00:20:35 <shapr> I've only installed it, not tried to write something with it.
00:21:03 <Verbed> I'm trying to attain some sort of fluency in Haskell.
00:21:18 <shapr> me too
00:21:24 <shapr> that's why I want to use WASH :-)
00:24:31 <shapr> I'd like to find a Zope replacement in Haskell.
00:24:41 <shapr> g'mornin Heffalump 
00:24:44 <Heffalump> morning
00:24:49 * Heffalump wonders how much SEK he should get
00:24:50 <shapr> how's the honey-stealing business? :-)
00:24:57 <shapr> everyone wants SEKs
00:25:01 <Heffalump> the what?
00:25:15 <shapr> Heffalumps steal honey?
00:25:53 <Heffalump> oh, duh :-)
00:26:02 <shapr> must be too early for silly jokes :)
00:26:12 <Heffalump> I told you before I'm not very good with the actual proper background of Heffalumps :)
00:26:38 <Heffalump> and I still want advice on how many SEKs to get :-)
00:27:00 <shapr> will your train/hotel be paid for in advance?
00:27:30 <Heffalump> hotel I'll pay for with a CC
00:27:35 <shapr> do you eat lots of goodies on plane/train trips?
00:27:47 <Heffalump> isn't it a bus from the airport to Uppsala?
00:27:56 <shapr> oh, probably so
00:27:59 <Heffalump> nope
00:28:08 <Heffalump> I'm mainly wondering how much I can expect to spend per day
00:28:37 <shapr> I don't spend very much per day in Boden
00:28:52 <shapr> but that is a small town much north of Uppsala
00:29:13 * Heffalump decides to just get £100 worth and see how it goes
00:29:21 <shapr> yah, sensible
00:29:29 <Heffalump> that's 1270SEK
00:29:58 <shapr> that should last a few days at least
00:31:25 <shapr> oh, I'll be in Uppsala morning of Saturday the 23rd
00:31:57 <Heffalump> I won't :-)
00:32:36 <shapr> I know SyntaxPolice will be there then, and I think kosmikus too.
00:44:32 <shapr> hi themus_ 
01:02:11 <themus_> hey shapr
02:10:29 * shapr boings
02:10:32 <shapr> hello simon 
02:21:25 <shapr> hi Jerub_
02:40:37 <simon> hi shapr, is it so quiet cos i'm here or are all you guys sleeping?
02:40:46 <shapr> heh
02:40:51 <whee> we're all hiding from you
02:40:54 <shapr> I think it's because ICFP is about to start
02:41:00 <shapr> so we're all preparing in some way
02:41:06 <shapr> I'm trying to get a lot of work done beforehand
02:41:08 <whee> that's starting now?
02:41:12 <shapr> in two days
02:41:17 <whee> neat
02:41:54 <Heffalump> well, four
02:41:54 <simon> what's ICFP? a programmer-contest?
02:43:51 <Heffalump> conference
02:44:01 <Heffalump> there's a contest associated with it, but that was a couple of months ago
02:44:06 <shapr> InternationalConferenceFunctionalProgramming
02:44:16 <shapr> see http://www.haskell.org/
02:44:19 <shapr> it's mentioned in the news
02:45:05 <simon> ok
02:50:23 <Heffalump> 'lo
02:50:24 <shapr> hej Marvin-- 
02:50:41 <Marvin--> morning
03:28:20 <Marvin--> "Slide 15 shows purports to show "Obfuscated Copying" from Unix System V into Linux. SCO further obfuscated the code on this slide by switching it to a Greek font, but that was easily undone. It's entertaining that the SCO folks had no clue that the font-change could be so easily reversed."
03:28:22 <Marvin--> good grief
03:28:56 <Heffalump> it is quite funny
03:29:00 <whee> Marvin: exposing the means of decryption is a DMCA violation. I'd watch your back
03:29:04 <whee> :P
03:29:09 <andersca> haha
03:31:15 <Marvin--> whee: uh oh, Bruce Perens is in trouble now, then
03:31:22 <Marvin--> http://www.perens.com/SCO/SCOSlideShow.html
03:31:27 <Marvin--> quite an entertaining read
03:31:36 <whee> yeah, I've seen that
03:31:40 <whee> SCO is on crack
03:31:51 <Marvin--> "These slides have several C syntax errors and would never compile."
03:32:28 <andersca> "The oldest version of this code we've found so far is in Donald Knuth's The Art of Computer Programming, published in 1968."
03:32:33 <andersca> riiiight
03:32:59 <Jerub> it seems this was their logic ->
03:33:26 <Jerub> "We have all this UNIX code, it is ours. Find out how much linux kernel has this code. Present all of it as stolen."
03:33:58 <Jerub> But alot of the UNIX code they claim as theirs is attributed to other persons.
03:33:59 <Marvin--> yep
03:34:17 <Jerub> they weaken their own case with their blustering. Gah. I thought they were better than this.
03:35:15 <Marvin--> if this is all they've got, they stand as much chance as a lingonberry in a supernova
03:36:01 <whee> well, at least they're trying to get money out of liscencing now
03:36:14 <whee> there's no way they'd be able to get it after a court case
03:37:34 <Marvin--> wonder what "security reasons" micros~1 has for banning all msn clients
03:37:50 <Jerub> whee: they have to recoup the cost of buying the copyright from Santa Cruz, and their operating costs.
03:37:51 <Marvin--> maybe they've improved the protocol to use double rot13 encryption and thus other clients won't work?
03:38:15 <whee> Marvin: double rot13 is so last year. They're up to quad now.
03:40:21 <Marvin--> whee: ooh
03:42:21 <shapr> seems perens.org is slashdotted
03:43:07 <whee> shapr: http://www.martin-studio.com/slashdotted/056/ is a mirror
03:43:21 <whee> there's a link to the powerpoint slides there
03:43:29 <whee> (and an html version)
03:44:04 <whee> although that's pretty sluggish too, hurf
03:45:06 <Marvin--> http://saintaardvarkthecarpeted.com/perens/VegasSlideShow/frame.htm  works pretty well
03:45:56 <Marvin--> I really don't understand slide 10+
03:45:58 <Marvin--> er, 10
03:46:06 <Marvin--> well, I probably won't understand slides 10+ either :)
03:46:25 <whee> Marvin: I can't figure out what they're hiding with the "xxxxxxxxxxx" in that slide
03:47:38 <Marvin--> me neither
03:49:54 <Marvin--> 'SCO now offically stands for "Smoking Crack Operation"'
03:50:14 <whee> that makes crack smokers look bad :)
03:50:22 <Jerub> Marvin--: please don't defame Santa Cruz Operation
03:50:28 <Jerub> they aren't the ones that are doing this.
03:50:28 <Jerub> Its the 
03:50:40 <Jerub> Canopy Group, who own 'SCO', formerly known as 'Caldera'
03:51:07 <Jerub> they're a bunch of professional litigators that take small companies with some copyright and failing cashflow, and use it to sue someone.
03:51:16 <Marvin--> Jerub: I know
03:51:26 <Marvin--> the Santa Cruz Operation rocked
03:51:36 <Marvin--> the "SCO Group" is something else
03:51:55 <Marvin--> (while it's not entirely unlikely that employees at the original SCO *did* smoke crack... :)
03:52:39 <shapr> hi _meep_ 
03:52:43 <_meep_> hi :)
03:54:54 <Jerub> hmm
03:55:13 <Marvin--> http://www.dilbert.com/comics/dilbert/archive/images/dilbert2003228690821.gif  hahaha
03:55:35 <Jerub> is that todays?
03:55:44 <prologic> could someone show me an implementation of the pie approximation formula ? I've having trouble implementing it. The one with alternating additions and subtractions of fractions. eg: 1 - 1/3 + 1/5 - 1/7 ...
03:55:53 <Jerub> I'm trying to dig up the old slashdot stories.
03:57:57 <whee> prologic: I'd probably end up with a list comprehension to generate the fractions, then take n off of the list and sum them
03:58:23 <prologic> ok that's one way I thought, generating a list of fractions
03:58:33 <prologic> is there a another that looks similar to the formula ?
03:58:44 <prologic> need more practise with recursion
03:58:51 <whee> well you could just write a couple of recursive functions, or maybe just one
03:59:00 <prologic> yeh that's what i need help with
03:59:07 <prologic> implementing factorial is easy enough
03:59:12 <whee> I can't think of a nice way to alternate the sign, heh
03:59:22 <prologic> I can :P
03:59:26 <prologic> write a power function
03:59:35 <prologic> then call power -1.0 n
03:59:58 <Jerub> no, thats hideous
03:59:59 <whee> I was thinking more along the lines of including a boolean for the recursive calls
04:00:03 <Jerub> thats an O(n) call
04:00:09 <whee> one would indicate subtraction, the other addition
04:00:15 <prologic> hrmm k
04:00:21 <prologic> can I show you guys what I've got ?
04:04:17 <prologic> hrmm
04:04:31 <prologic> Jerub: what other way can you suggest of an alternating sign ?
04:04:43 <prologic> keep in mind I come from an imperitive background :P
04:05:37 <Jerub> pie_sign x | even x = +1
04:05:52 <Jerub> pie_sign x | odd x = -1
04:06:27 <Jerub> or, better
04:06:32 <Jerub> pie_sign x | odd x = x
04:06:38 <Jerub> pie_sign x | odd x = -x
04:06:43 <Jerub> err return the x.
04:06:57 <prologic> hrmm
04:06:59 <prologic> interesting
04:07:07 <Marvin--> wonder how long before thinkgeek has a t-shirt with Linus' "They are smoking crack" quote
04:07:11 <prologic> that's kinds what Maybe does ?
04:07:41 <Jerub> no
04:07:50 <Jerub> Maybe is something completely different.
04:08:31 <prologic> your 2nd example doesn't work in hugs first one does with the +1
04:09:02 <Jerub> the second example is broken
04:09:09 <prologic> hehe k
04:09:09 <Jerub> seeing as I copied the wrong line to change it.
04:09:21 <Jerub> one should be 'even' not 'odd'
04:09:43 <prologic> ahh yeah
04:09:45 <prologic> I see it now ;)
04:09:54 <prologic> sorry I'm slowly going blind :(
04:10:12 <_meep_> Alternatively you could add an extra boolean parameter to the function which kept track of whether the next number was even or odd, it might be slightly faster
04:10:22 <_meep_> but it's a bit ugly
04:10:27 <prologic> hrmm
04:10:36 <prologic> you guys are a tad over my head atm, but I'll catch up :)
04:10:54 <prologic> gotta learn haskell this semester as well as looking at a few other paradigms
04:11:28 <_meep_> it takes a while to get used to it
04:11:35 <prologic> yeah
04:12:02 <prologic> it's pretty straight forward though just take a while to remember everything about it
04:12:05 <_meep_> it's more like maths than other languages, you kind of have to know lots of techinques to be good at it, you can't just learn the language features
04:12:20 <prologic> I accidently wrote a crude functional language while using Crenshaw's compiler tutorials over the holidays
04:12:28 <Jerub> whats the sequence exactly prologic?
04:12:31 <prologic> yeah you have to be good at math
04:12:52 <prologic> pi/4 = 1 - 1/3 + 1/5 - 1/7 + ...
04:13:10 <prologic> just trying to implement that in some way that resembles it's mathematical counterpart
04:13:43 <prologic> _meep_: functional languages are pretty darn good though :) I love em so far
04:14:03 <_meep_> cool :)
04:14:28 <prologic> hrmm damn error msg
04:14:36 <prologic> hugs isn't that helpful with error msgs :)
04:15:13 <Marvin--> the similarity to maths can hurt more than it helps sometimes
04:15:28 <Marvin--> once, I had a student who actually tried to write   "pi/4 = ..."  in a source file
04:15:35 <prologic> lol
04:15:38 <prologic> ouch
04:15:49 <Marvin--> took me quite some time to explain why they couldn't do that
04:15:50 <prologic> now see I come from a very long programming background, even I wouldn't write that
04:15:52 <_meep_> can't you almst do that, or used to be able to
04:16:07 <_meep_> there were those (n + k) patterns
04:16:08 <Marvin--> _meep_: well, no, since you'd be redefining /
04:16:10 <prologic> not quite
04:16:19 <prologic> that's right
04:16:30 <prologic> you'd be defining pi/4 as a function wouldn't you ?
04:16:47 <_meep_> just a sec while i google...
04:17:00 <prologic> google our trusty tool :)
04:17:01 <Marvin--> you'd define the (/) function, pattern matching the second argument on 4
04:17:10 <Jerub> I'm actually having trouble with this division.
04:17:11 <prologic> ok
04:17:14 <Marvin--> but since (/) is already defined in the Fractional class, you can't do that
04:17:32 <prologic> Jerub you implementing what I'm trying to ?
04:17:41 <Marvin--> 'course, had you written pi `someotherfunctionname` 4 = ... that'd work, but it wouldn't do what they expected anyway
04:17:42 <Jerub> I haven't used haskell in so long
04:17:44 <_meep_> i was thinking of something like:
04:17:55 <Marvin--> sadly, that was a student that I've had twice in the same course, I wonder if she's passed it yet
04:17:56 <_meep_> fact (n + 1) = (n + 1) * fact n
04:18:08 <Marvin--> the n+k patterns should simply die, horribly
04:18:11 <prologic> that outta work :)
04:18:12 <Marvin--> or rather, be generalized
04:18:38 <_meep_> i think death is preferable, lol
04:18:45 <prologic> I see you're from sweeden Marvin-- ?
04:18:51 <Marvin--> no, Sweden ;)
04:18:55 <prologic> sorry :)
04:18:56 <prologic> lol
04:19:05 <prologic> that famous guy what's his name, comes from there
04:19:12 <prologic> I downloaded his documents on haskell
04:19:18 <Jerub> arg
04:19:22 <Marvin--> eh? John Hughes? He doesn't come from Sweden, he just lives here
04:19:29 <Marvin--> or who do you mean?
04:19:31 <prologic> no wait a sec
04:19:36 <Marvin--> Lennart Augustsson?
04:19:37 <shapr> Lennart Augustsson?
04:19:47 <prologic> the guy that insists on putting ; in his sources just to be proper
04:19:52 <Marvin--> Lennart does come from Sweden
04:19:53 <shapr> Ashley Yakeley?
04:19:54 <prologic> apparently according to our leturer
04:19:58 <Marvin--> dunno who that is
04:20:24 <prologic> geez I forget his name now
04:20:31 * prologic hits his brain's neurons
04:20:34 <Marvin--> so google ;)
04:20:43 <Jerub> I can't get this to work in hugs
04:20:45 <prologic> no help if I can't remember much about him :P
04:20:50 <Marvin--> true
04:20:52 <Jerub> I want a function that takes an Int and returns a Double
04:20:56 <Jerub> inverse :: Int -> Double
04:20:56 <Jerub> inverse x = 1/x
04:21:06 <Marvin--> googling for "insists on putting ; in his sources just to be proper" could be interesting
04:21:09 <shapr> Jerub: fromIntegral
04:21:11 <Jerub> but Hugs firmly believes that that function is Int -> In
04:21:12 <prologic> use fromIntegral
04:21:18 <prologic> it'll convert it to Double first
04:21:35 <prologic> Marvin--: lol, I doubt it'd turn up much knowing how google's algorithms work
04:21:46 <Marvin--> indeed :)
04:22:28 <prologic> inverse :: Int -> Double
04:22:29 <prologic> inverse x = 1 / fromIntegral x
04:22:29 <prologic> works ;)
04:22:35 <Marvin--> Jerub: that function exists, it's called recip, but you have to use fromIntegral first
04:22:47 <Marvin--> recip (fromIntegral (3::Int)) should work
04:22:54 <prologic> ahh k
04:22:59 <prologic> it's defined in the Prelude ?
04:23:08 <Marvin--> recip is in the Fractional class
04:23:12 <prologic> k
04:23:21 <Marvin--> it's defined in terms of /
04:23:21 <prologic> Marvin--, have you compiled nhc before ?
04:23:27 <Marvin--> nope, never used nhc at all
04:23:30 <prologic> ok
04:23:42 <prologic> I'm trying to use it instead of ghc as the installation is way too large for me
04:23:45 <prologic> Filesystem            Size  Used Avail Use% Mounted on
04:23:45 <prologic> /dev/hda1             2.0G  1.7G  173M  91% /
04:23:45 <prologic> /dev/hda5             1.9G  1.7G   99M  95% /home
04:23:45 <prologic> /dev/hda6             4.8G  4.4G  232M  96% /archives
04:23:49 <prologic> see ;P
04:23:54 <Marvin--> heh
04:23:56 <prologic> 60M ain't gonna do nicely on my system
04:24:00 <Marvin--> buy a hard drive
04:24:01 <prologic> bloody ghc
04:24:07 <prologic> student on low income :(
04:24:13 <Marvin--> so am I :)
04:24:17 <prologic> lol
04:24:24 <Marvin--> but I work too ;)
04:24:25 <prologic> gotta pay $122 uni fees tonight
04:24:35 <Marvin--> goody :/
04:24:36 <_meep_> can't you do a few judicious rm -r commands?
04:24:39 <prologic> yeh I do catalouge distributing, doesn't pay much atm
04:24:42 <prologic> no !
04:24:45 <prologic> gawd no
04:24:51 <_meep_> hehe
04:24:54 <prologic> been cleaning up / though a bit
04:25:01 <prologic> removed gimp, didn't need that
04:25:03 <Jerub> prologic: are you sure about that sequence?
04:25:04 <prologic> few other things
04:25:09 <prologic> yes
04:25:12 <prologic> I'm positive ;)
04:25:18 <Jerub> I get it converging on this point ->
04:25:19 <prologic> I have implemented it many times
04:25:23 <Jerub> 0.785148163
04:25:31 <prologic> try multiplying it by 4
04:25:36 <_meep_> don't the numerators increase as well as the denominators?
04:25:36 <prologic> you have to multiply the result by 4
04:25:46 <prologic> as it's defined as pi/4 = 1 - 1/3 + 1/5 - 1/7 ...
04:25:47 <Marvin--> Filesystem            Size  Used Avail Use% Mounted on
04:25:47 <Marvin--> /dev/hda2             5.8G  4.6G  982M  83% /
04:25:47 <Marvin--> /dev/hda5              28G  8.4G   20G  30% /mnt/stuff
04:25:47 <Marvin--> /dev/hdb2             9.6G  6.2G  3.5G  65% /home
04:25:47 <Marvin--> /dev/hdb3              22G   19G  2.7G  88% /mnt/scratch1
04:25:48 <Marvin--> /dev/hdb5              22G   18G  3.5G  84% /mnt/scratch2
04:25:50 <Marvin--> :P
04:25:58 <prologic> ahh lucky
04:26:03 <prologic> damn it I want more hdds
04:26:07 <Jerub> Main> pie 1000
04:26:07 <Jerub> 3.14059265
04:26:07 <Jerub> there we go.
04:26:13 <prologic> ahh sweet
04:26:15 <Marvin--> "pie", heh
04:26:20 <prologic> I'll learn a lot from your example
04:26:46 <prologic> always learn more from sources
04:26:48 <Marvin--> what approximate function is the number of correct digits in terms of the parameter?
04:26:58 <Jerub> damn. I'm going to have to make this lazy.
04:26:58 <Jerub> ERROR - Garbage collection fails to reclaim sufficient space
04:27:28 <prologic> Marvin--: umm, it's a few thousand to get to 12 decimal places
04:27:32 <prologic> I forget :)
04:27:50 <prologic> it's more accurate to use the formula with arctan's
04:27:51 <Marvin--> prologic: I did run out of space on / the other day, though, since I'm stupid enough not to have /var on a separate partition, and my chroot autobuilds chewed it all up
04:27:56 <prologic> it converges quicker
04:28:03 <shapr> faster
04:28:08 <shapr> ?
04:28:08 <prologic> faster :)
04:28:15 <prologic> whichver
04:28:19 <prologic> english is a screwed up language
04:28:28 <Marvin--> indeed
04:28:29 <prologic> Marvin--: yeh I need a separate /var drive too
04:28:37 * Marvin-- is going to brush up on his German one of these days<tm>
04:28:43 <prologic> lol
04:28:47 <prologic> trademark huh ?
04:28:55 <Marvin--> yeah, it'll probably never happen :)
04:29:05 <Marvin--> one of those RSN things
04:29:38 <prologic> (4*arctan 1/5 - arctan 1/239)*4
04:29:41 <prologic> is another formula
04:29:51 <prologic> hope I copied it down properly
04:30:34 <prologic> you have a lot of installed programs obviously Marvin-- ?
04:30:56 <prologic> bbs favourite tv show is on :)
04:31:02 <Marvin--> dpkg -l | wc -l says 1447, so yeah I guess
04:34:57 <Marvin--> ahh, gotta love Stephen Hawking
04:35:19 <Marvin--> when he was here in Sweden the other day, he was interviewed, and was asked why he was a researcher
04:35:27 <Marvin--> to me, the answer is obvious :) "Because I enjoy it"
04:35:53 <Jerub> grr
04:35:59 <Jerub> *** Type       : (Integral a, Fractional a) => a
04:36:15 <Jerub> I don't remember these errors :p
04:50:49 <keverets> isn't 4*arctan(1) sufficient?
04:51:47 <Jerub> keverets: the goal is not to get the answer, the goal is to experience the solution.
04:52:15 <keverets> ah.
04:53:50 <shapr> there is no goal...
04:54:01 <keverets> nor is there a spoon.
04:54:17 <andersca> rRRRRRRRRRR!!!!
04:54:18 <andersca> Avast
04:54:21 <shapr> I'm tired of eating with my fingers.
04:54:30 <keverets> there's still a fork.
04:54:39 <Marvin--> get BeOS
04:54:43 <Marvin--> ;)
04:55:01 <andersca> I'd rather use
04:55:04 <andersca> solarrRRRRRRRRRrrrrris
04:55:15 <Jerub> no spoon is in #vim
04:55:33 <Marvin--> I see no spoon here either
05:05:08 <Cale> my spoon is too big
05:07:13 <Marvin--> You can't HANDLE a spoon!</nicholson>
05:14:53 <Verbed> @yow
05:14:54 <lambdabot> YOU PICKED KARL MALDEN'S NOSE!!
05:17:18 <Cale> WITH A SPOON!!
05:17:33 <Verbed> @yow
05:17:33 <lambdabot> The Osmonds!  You are all Osmonds!!  Throwing up on a freeway at dawn!!!
05:17:37 <shapr> eww
05:17:38 <keverets> kind of like "in bed" for fortune cookies
05:17:45 <shapr> in bed?
05:17:58 <keverets> you tack it on to the end of whatever fortune you get.
05:18:01 <shapr> oh
05:18:43 <keverets> grr... this computer case has extremely poor air circulation.
05:19:26 <shapr> mine has excellent air circulation, meaning my whole room overheats.
05:19:59 <keverets> in some ways better than your expensive components overheating, and good for winter, but not so pleasant for humans in summer.
05:20:13 <Cale> Mine seems to have good enough air circulation to overheat my room, but my motherboard is still 57 C.
05:42:41 <prologic> stupid dialup connections :)
05:49:37 <prologic> did Jerub leave ?
05:51:09 <Lunar^> hGetContents is incompatible with matchRegex ?
05:52:30 <prologic> I wish I could tell you, but I'm in the process of learning Haskell too :)
05:52:46 <Lunar^> I read somewhere that hGetContents give you a lazy list
05:52:51 <prologic> the definition of both functions ought to be able to tell you though
05:52:57 <Lunar^> Not exactly
05:53:04 <prologic> lazy just means it doesn't fully evaluate the expression
05:53:13 <prologic> yes exactly :)
05:53:26 <prologic> it will tell you wether or not they're compatible if you can understand the source libaries
05:53:30 <Lunar^> do content <- hGetContents h ; matchRegex re content   <-- returns Nothing
05:53:45 <Lunar^> do content <- hGetContents h ; putStr content ; matchRegex re content   <-- returns Just ..
05:54:12 <prologic> you should use layout rules instead of ; too :)
05:54:24 <prologic> bad programming practise (in general) to put everything on one line
05:54:33 <prologic> I can't help you though I'm afraid
05:54:37 <Igloo> Sensible to do so for IRC discussion, though
05:54:42 <prologic> yes true ;)
05:55:00 <prologic> good thing about haskell though is that you can do so much in so little
05:55:15 <prologic> well any functional language
05:55:29 <Igloo> What's the type of matchRegex?
05:55:31 <Lunar^> prologic: I know !
05:55:46 <Lunar^> Igloo: 
05:55:52 <Lunar^> matchRegex :: Regex -> String -> Maybe [String]
05:56:02 <Lunar^> But after digging to the source
05:56:04 <Igloo> Your code isn't well typed then
05:56:11 <prologic> hehe
05:56:15 <prologic> I somehow knew that'd be the case
05:56:25 <prologic> and it's returning Maybe [String] ...
05:56:39 <Lunar^> It makes unsafePerformIO calls to Posix regex lib
05:57:19 <Lunar^> So if hGetContents is really making a lazy list...
05:57:30 <Igloo> How it works isn't the issue, the above do statements aren't well typed
05:57:51 <Igloo> Thus I refuse to believe they returned anything
05:58:00 <prologic> yes it is :) if you remember if you read the source and know how it works you'll get your answer :)
05:58:35 <Lunar^> -- hGetContents returns the list of characters corresponding to the
05:58:35 <Lunar^> -- unread portion of the channel or file managed by the handle, which
05:58:35 <Lunar^> -- is made semi-closed.
05:59:06 <Lunar^> Igloo: it's a reformulation of a lot more code
06:00:09 <Igloo> We'd probably need to see a small example of correct code that causes the problem. The fact it's a lazy list shouldn't be an issue.
06:01:18 <Igloo> (or rather, if it is I think it is a bug)
06:02:49 <Marvin--> unsafeInterleaveIO is a nasty beast
06:03:42 <prologic> oh Marvin-- you're still here :) did Jerub leave his implementation of pi around anywhere ? my connection was closed while watching tv
06:03:54 <Marvin--> no idea
06:03:58 <prologic> ok
06:04:17 <prologic> kinda wanted to see someone else's implementation to learn a few things off
06:04:39 <Marvin--> it's the 4 * (1/3 - 1/5 + 1// + ...)  right?
06:04:46 <prologic> yeap
06:04:48 <prologic> that's right
06:05:24 <prologic> with Jerub's indirect help I'm kinda there
06:06:48 <Lunar^> Marvin--: does it meant unpredictable result ?
06:09:22 <Marvin--> prologic: I'd implement it like this: http://sjogren.ost.sgsnet.se:8080/pi.hs
06:09:49 <Marvin--> though that may not be the most easily read version :)
06:10:26 <prologic> thanks :) I'll galdy take a look
06:10:58 <prologic> interesting
06:11:06 <prologic> you've introduced a few new things I haven't seen yet
06:12:53 <Marvin--> the fromthento list syntax is really neat
06:13:58 <Marvin--> though alternate can be replaced with  foldr1 (-)  if you want it really obfuscared :-P
06:14:25 <prologic> I kinda get alternate
06:14:29 <prologic> although I'll read up on it
06:14:33 <prologic> but foldr1 (-) ?
06:14:57 <Marvin--> @prelude foldr
06:14:58 <lambdabot> *** "foldr" prelude "Haskell Standard Prelude Dictionary": text follows
06:14:58 <lambdabot> foldr
06:14:58 <lambdabot>   foldr ::  (a -> b -> b) -> b -> [a] -> b
06:14:58 <lambdabot>   foldr f z []      = z
06:14:59 <lambdabot>   foldr f z (x:xs)  = f x (foldr f z xs)
06:15:35 <Marvin--> it applies a function recursively over a list
06:15:40 <Marvin--> folding the list into a value
06:15:52 <prologic> i see
06:16:39 <prologic> who owns that bot :P me wants it
06:16:40 <prologic> lol
06:16:56 <Lunar^> prologic: Search shapr's darcs repository
06:16:58 <Marvin--> lambdabot is a cooperative project of #haskell :)
06:17:06 <prologic> heh
06:17:12 <prologic> fair enough
06:17:20 <Lunar^> There's a link on shae.livejournal.com I think
06:17:31 <prologic> thanks Marvin-- for that, lots of things for me to learn obviously
06:17:36 <prologic> ta Lunar^
06:18:04 <Lunar^> Marvin--: btw, do you know if there's something on HaWiki about "our small high-order function (not in the prelude) we use daily"
06:18:45 <Marvin--> no idea
06:20:01 <prologic> Lunar^: is IRC.hs it ?
06:20:08 <prologic> it mentions lambdabot in the source
06:20:25 <Lunar^> prologic: Think you have a directory named "lambdabot"
06:20:32 <prologic> yup
06:20:37 <Lunar^> use darcs to pull the whole repository out
06:20:48 <prologic> what license is it under do you know ?
06:21:09 <Lunar^> Haskell evangelist license ? :0
06:21:14 <prologic> lol
06:23:10 <Heffalump> err, GPL iirc
06:23:32 <prologic> k ta
06:24:32 <Heffalump> oh, actually, I can't find any license at all
06:24:42 <Heffalump> oh, yes I can
06:24:50 <Heffalump> looks like BSD
06:25:02 <prologic> similar to GPL so I'm happy
06:25:07 <prologic> as long as I can use it freely :)
06:25:15 <Heffalump> I should add myself and others to the COPYING file
06:25:26 <Lunar^> Maybe I could really write the HEL :)
06:25:38 <prologic> you should if you contributed to it :P
06:26:06 * Heffalump BSD licences his contributions by announcement on #haskell
06:26:28 <prologic> lol
06:26:59 <Lunar^> 1388 total lines for my current project now... nice :)
06:27:11 <innervision> ;)
06:27:13 <prologic> lol
06:27:23 <prologic> probably much less than if you had done it in an imperative language
06:27:37 <Lunar^> yes, even it's 90% monadic operation
06:28:17 <innervision> Lunar^ so you saved the time of writing a LOT of code...
06:28:37 <Lunar^> each new line was a new happiness time :)
06:28:41 <prologic> I wonder if I could rewrite one of my large projects
06:28:43 <prologic> hah
06:30:05 <innervision> prologic you mean translating them to haskell?
06:30:11 <prologic> yeah
06:30:22 <prologic> be a huge job though, have to be pretty proficient at haskell first
06:30:44 <Lunar^> mhh.. you can't be proficient in a langage if you don't use it ;)
06:30:52 <prologic> true
06:30:58 <innervision> true
06:31:16 <Lunar^> really learned a bunch of new things by doing this one... especially concurrency
06:31:28 <Lunar^> MVar and QSem are really nice
06:31:47 <innervision> oh! i never did concurrency in haskell :(
06:32:08 * Marvin-- wants commutative monads and automatic concurrency
06:32:15 <Heffalump> yeah.
06:32:25 <Heffalump> Simon PJ thinks a nice syntax and semantics for commutative monads is needed.
06:32:30 <Heffalump> Unfortunately he doesn't know what it is.
06:32:32 <Marvin--> and I agree :)
06:32:40 * Heffalump agrees too
06:32:45 <Heffalump> would make the name supply problem much nicer
06:32:50 <innervision> hah!
06:32:54 <Marvin--> anybody doing research on it?
06:33:03 <Lunar^> Could someone explain what "commutative monads" are ?
06:33:18 <Marvin--> Lunar^: a monad where evaluation order doesn't matter
06:34:01 <Heffalump> you have to take account of binding usage, though
06:34:06 <Lunar^> uh... 
06:34:11 <prologic> hrmm
06:34:14 <Marvin--> yeah
06:34:16 <prologic> unable to load Network
06:34:19 <Marvin--> the scoping is a bit tricksy
06:34:20 <prologic> with lamdabot
06:34:32 <Heffalump> prologic: when did that happen?
06:34:34 <prologic> I got the source to it off the sourceforge site
06:34:35 <Marvin--> prologic: -package network, I think or -package net
06:34:43 <Heffalump> oh, yeah
06:34:44 <Marvin--> the sourceforge source is probably out of date, isn't it?
06:34:45 <Heffalump> use the makefile
06:34:47 <Lunar^> Heffalump: so it should automatically do a dependance graph and put in concurrence what it could ?
06:34:54 <prologic> I'm running it in hugs
06:34:58 <prologic> I don't have a compiler yet
06:35:05 <Heffalump> Marvin--: I don't think anyone has actually checked anything in since the darcs repository was made
06:35:09 <Heffalump> (anything serious, that is)
06:35:14 <Lunar^> prologic: Think that Lambdabot use glasgow-exts
06:35:19 <innervision> prologic doesn't matter. hugs rocks anyway...
06:35:20 <Heffalump> prologic: ah, it probably won't work in hugs
06:35:21 <Marvin--> prologic: then you'll have problems, since it uses dynamic loading and stuff
06:35:28 <Marvin--> Heffalump: right
06:35:30 <prologic> damn
06:35:31 <Heffalump> dynamic loading certainly won't :-)
06:35:35 <prologic> positive it won't work in hugs ?
06:35:38 <Heffalump> Lunar^: I guess so, yeah
06:35:44 <Marvin--> Heffalump: anyway, do you know of anybody doing research on commutative monads?
06:35:47 <Lunar^> Heffalump: waow.. tricky
06:35:48 <Heffalump> Marvin--: nope
06:35:55 <Heffalump> a dependency graph isn't a major problem
06:36:02 <Marvin--> google it is, then
06:36:36 <prologic> hrmm how do I get this darcs repository in a usefull format ? it's a but useless as a web page with individual files, there a way I can download an entire directory ?
06:36:51 <Lunar^> prologic: apt-get install darcs
06:36:53 <Marvin--> darcs --get :-)
06:36:54 <prologic> looks like I might have to install ghc :( bloody 60Mb binary
06:37:11 <prologic> hrmm ok
06:37:16 <Marvin--> "Phil Wadler (mr Monad)" heh
06:37:18 <prologic> I'm running testing though
06:37:25 <prologic> I think most haskell things are still in unstable right ?
06:37:50 <Lunar^> prologic: especially ghc6
06:38:00 <prologic> ghc6 is in testing now
06:38:00 <Heffalump> you could use haskell-experimental
06:38:02 <prologic> damn it
06:38:06 <Heffalump> oh, cool.
06:38:11 <Heffalump> good Igloo
06:38:11 <prologic> I don't want to break my system :)
06:38:13 <Lunar^> http://www.haskell.org/hawiki/DebianUsers
06:38:22 <prologic> ta got that one bookmarked :)
06:39:01 <innervision> ey! what's that?... (opening mozilla)
06:40:07 <prologic> which of those source lines do you debian people recommend to use ?
06:40:14 <prologic> obviously not experimental ?
06:40:28 <Lunar^> prologic: depends on the branch you are
06:40:34 <prologic> I'm on testing
06:40:36 <prologic> sid
06:40:44 <Lunar^> prologic: sid is unstable, sarge is testing
06:40:48 <innervision> prologic it wont break your system anyway...
06:40:51 <prologic> err
06:40:52 <prologic> sorry
06:40:54 <prologic> sid there
06:40:55 <prologic> then
06:41:00 <prologic> the one after woody :)
06:41:06 <prologic> I get so confused with them
06:41:21 <Lunar^> Use the "stable" one then I think
06:41:22 <prologic> potato -> woody -> sid -> sarge ?
06:41:28 <Heffalump> yep
06:41:30 <Lunar^> flip the last ones
06:41:31 <prologic> k
06:41:33 <Heffalump> oh.
06:41:35 <prologic> lol
06:41:35 <Heffalump> ahem :-)
06:41:39 <innervision> :D
06:41:41 <Heffalump> I get confused too, clearly.
06:41:41 <prologic> sarge then sid ?
06:41:42 <prologic> blah
06:41:45 <prologic> so I'm using sarge then
06:41:47 <prologic> gawd
06:41:50 <Lunar^> so you stable
06:41:53 <Heffalump> yes, and sid will never not be unstable now, if things stay the same
06:41:55 <Lunar^> sorry use
06:41:58 <prologic> yeah
06:42:09 <prologic> lol
06:42:12 <prologic> I'm so confused now
06:42:17 <prologic> I actually have testing lines in my sources.list
06:42:21 <prologic> which means technically I'm using sid
06:42:27 * prologic faints
06:42:36 <Lunar^> prologic: that you're actually using sarge
06:42:41 <prologic> I should reinstall the whole thing
06:42:45 <Lunar^> prologic: if labeled "unstable" it's sid then
06:43:22 <prologic> # cat /etc/debian_version 
06:43:23 <prologic> testing/unstable
06:43:25 <prologic> :)
06:43:55 <Lunar^> prologic: Both are labeled the same here
06:44:06 <Lunar^> Anyway, backporting ghc6 is not hard
06:44:10 <prologic> ok
06:44:20 <prologic> I'll use unstable then ...
06:44:33 <Lunar^> try unstable first, if it complains about libc, try stable
06:44:40 <Heffalump> haskell-experimental has a stable backport
06:44:44 <prologic> let me right this down for future clarity, potato (old stable) -> woody (stable) ... what are the next two ?
06:44:51 * Marvin-- curses make
06:44:52 <prologic> ok Lunar^ ta :)
06:44:56 <Heffalump> how does /etc/debian_version work?
06:44:59 <Marvin--> WHY OH WHY is not -k the default behaviour?
06:45:02 <Lunar^> prologic: sarge (testing) -> sid (unstable, and it will always be)
06:45:06 <prologic> ok
06:45:07 <Heffalump> Marvin--: because you won't see the first error then
06:45:08 * prologic writes it down
06:45:16 <Marvin--> Heffalump: feh
06:45:33 <Marvin--> people who don't use  | tee are on their own
06:45:45 <Lunar^> http://www.geocities.com/TheTropics/Resort/4986/sid.gif <-- because of this
06:45:56 <Lunar^> Sid is the boy who breaks toys in Toy Story
06:46:16 <prologic> heh
06:46:23 <Marvin--> I don't think the name of the next testing is decided yet
06:46:30 <prologic> funny how debian versions are named after cartoon characters
06:46:56 <Lunar^> prologic: Toy Story characters, because the one who started Debian was working at Pixar
06:47:26 <prologic> ahh k
06:47:29 <Marvin--> The most popular so far has to be "woody" ;)
06:47:32 <prologic> now I know
06:47:33 <innervision> prologic: anyway that's easier than thinking a new name every time... here you have a set to choose from...
06:47:36 <prologic> I've learnt more about debian here that I have in #Debian
06:47:43 <Lunar^> lol
06:47:45 <Marvin--> especially with someone suggesting using the name "hardened woody" for a more secure version ;)
06:47:47 <prologic> I like sarge though :)
06:48:00 <innervision> i didn't test it...
06:48:03 <prologic> lol
06:48:08 <prologic> using the hardend system
06:48:18 <prologic> haven't used hardened yet, no need
06:48:29 * Lunar^ is happily running a debian stable with a lot of backported package on his server and an unstable on his laptop
06:48:32 <Heffalump> Ian Murdock worked at Pixar?
06:48:46 <Heffalump> I thought it was someone else that did that
06:48:54 <Lunar^> Heffalump: maybe, I'm not sure though
06:48:56 <prologic> well when I have more money I'd like to build a server with stable on it
06:49:29 <innervision> prologic when i hava money i will buy a new computer.. :)
06:49:43 <prologic> lol
06:49:57 <prologic> same here!
06:49:57 <prologic> I need a new bloody hdd!
06:49:57 <prologic> larger one anyway
06:50:07 <prologic> this haskell is going to cost me a lot of space on / :(
06:50:46 <innervision> prologic: i have stripped my linux to a bare minimun...
06:51:00 <innervision> and i still have problems when installing something...
06:51:03 <prologic> heh
06:51:08 <prologic> with what tools ? any ?
06:51:20 <Heffalump> all you _need_ is ghc6
06:51:25 <Heffalump> you might want haskell-doc
06:51:35 <prologic> lol
06:51:35 <Marvin--> "all you need is ghc6..." sing along everybody
06:51:39 * Marvin-- puts on some Beatles
06:51:54 <innervision> lol
06:51:56 <prologic> I have a bare bones with no casing computer over there (points) with a broken vga bios
06:52:13 <prologic> it's sitting on an antistatic bag
06:52:22 <prologic> power supply on a cardboard box
06:52:29 <prologic> hdd on another one
06:53:06 <innervision> :|
06:53:12 <Heffalump> checking my spam folder is becoming really tiresome
06:53:16 <innervision> that's "messy"
06:53:31 <prologic> it is
06:53:49 <prologic> only way I could really test all the odd bits and pieces I had laying around though
06:55:08 <innervision> prologic how come with the broken vga bios?
06:55:48 <prologic> dunno
06:55:52 <prologic> old 1997 motherboard
06:56:05 <prologic> it can't be the video card because I have tried several
06:56:18 <prologic> so I might chuck the motherboard and try another one
06:56:32 <prologic> two motherboards and cpus I tested burnt out :(
06:56:37 <innervision> :(
06:56:43 <innervision> such a waste!!! :(
06:56:44 <prologic> yer
06:56:49 <prologic> waste of components
06:56:54 <prologic> I know!
06:56:56 <innervision> yeap!
06:57:15 <innervision> i hate when something like that happens... i'd rather get everything working...
06:58:14 <prologic> yeh
06:58:21 <prologic> but they're old pieces
06:58:24 <prologic> so it has to happen
06:59:19 <innervision> and get it stable (wich my actual computer isn't)
07:00:07 <prologic> heh
07:00:12 <prologic> least my desktop is stable
07:00:19 <prologic> can't say much about the power company though
07:00:28 <prologic> 43days uptime is all I've managed without a ups
07:00:41 <prologic> outta run the damn thing off a 12v battery and an inverter
07:09:56 <innervision> :|
07:10:02 <innervision> where do you live?
07:20:36 <Igloo> It was Bruce Perens who worked at Pixar
07:20:41 <Heffalump> yeah.
07:20:45 <Heffalump> I was trying to remember the name
07:28:46 <prologic> innervision: sorry, had to go pay bills on my gf's windoze system, java applets are crap on linux. I live in Australia, QLD
07:28:59 <prologic> lol
07:29:03 <prologic> damn
07:35:19 <prologic> hrmm darcs doesn't appear in the packages ...
07:35:27 <prologic> am I missing something ?
08:15:57 <Lunar^> prologic: yes.. it's another repository
08:16:06 <Lunar^> prologic: http://abridgegame.org/darcs/
08:16:13 <Lunar^> There's the deb source here
08:16:33 <Lunar^> hdaume: it's always strange to see your host ;)
08:16:48 <hdaume> Lunar^: it'll only be like that for two more weeks :)
08:18:09 * Igloo looks around for Sweden people
08:18:22 <Marvin--> hmm?
08:18:36 <Igloo> What's the tune(s?) on a 50 Kronor note?
08:19:48 <Igloo> Ca, Keu, que and thau appear as lyrics
08:19:55 <Marvin--> Vincenzo Bellini's "Norma"
08:21:19 <Marvin--> the woman is Jenny Lind, and to the right is the old Stockholm opera
08:21:43 <Igloo> Does it have any special significance or is it jut a famous Swedish piece?
08:22:18 <Marvin--> I'm skeptical that it's Swedish :)
08:22:32 <Marvin--> it's one of Jenny Lind's biggest successes, or so this page says
08:22:34 <Igloo> Oh
08:22:58 <Marvin--> and she performed on that opera in 1848
08:23:09 <Igloo> Presumably she is Swedish then?
08:23:52 <Marvin--> yes
08:24:13 <Igloo> OK  :-)
08:36:31 <prologic> ta Lunar^
08:36:33 <prologic> night guys :)
08:36:38 * pl_zzzz is away: asleep
09:13:49 <steveh> hello #haskellers
09:15:01 <Igloo> Hi Steve
09:15:59 <scharob> jo
10:51:22 <Lunar^> Hehe.. you can do (+ 1) as (\x -> x + 1) but not (- 1) as (\x -> x - 1)
10:53:17 <dennisb> Lunar^: but you can do ((-) 1)
10:53:41 <dennisb> (which is not the same)
10:53:55 * dennisb goes back to be quiet
10:54:11 <Cale> (flip (-) 1)
10:56:33 <Lunar^> dennisb: uh.. thx
10:57:04 <Lunar^> using the lambda here remove the ambuigity anyway
10:57:04 <Cale> (-1) is parsed as the number -1, which is why that doesn't work
10:59:15 <Lunar^> Cale: yep.. type system error message was pretty clear
11:01:34 * Smerdyakov prefers using ~ for negation in SML.
11:05:41 <Lunar^> damn.. this hGetContents & matchRegex thingy is going to make me crazy
11:14:54 <Lunar^> matchRegex doesn't work if hGetContents is not fully evaluated
11:15:17 <Lunar^> actually, it works sometimes
11:45:54 <stepcut> :( mysql does not support subselects until 4.1
11:52:57 <dennisb> some of them were supported before I think (not that it matters since it's so many other thing it does not support)
11:53:17 <dennisb> I wonder when 4.1 will be released
11:53:26 <stepcut> i heard Q2 next year maybe
11:57:16 <Verbed> @yow
11:57:16 <lambdabot> My polyvinyl cowboy wallet was made in Hong Kong by Montgomery Clift!
12:33:43 <hdaume> Lunar^: what do you mean it "doesn't work"?
12:50:59 <Lunar^> hdaume: sometimes returns Nothing, always returns Just ... if I putStr contents first
12:51:48 <hdaume> Lunar^: that's just because hGetContents is lazy
12:51:55 <hdaume> Lunar^: iow, don't use hGetContents
12:52:18 <hdaume> or, at least, don't prematurely close the handle
12:52:36 <Lunar^> hdaume: I don't close the handle before making my matchRegex
12:52:47 <hdaume> you'll have the same problem with 'do h <- openFile "foo" readMode; t <- hGetConents h; hClose h; putStrLn t' will likely print nothing
12:52:51 <Tomasso> why when i do
12:52:54 <hdaume> or maybe the first character
12:52:56 <Tomasso> Prelude> fun :: Int -> Int
12:52:57 <Tomasso> ERROR - Undefined variable "fun"
12:53:06 <Lunar^> hdaume: But actually, matchRegex is full of unsafePerformIO, which IMHO don't seem to work well with unsafeInterleaveIO
12:53:19 <hdaume> Tomasso: you can't give type sigs like that at the top level
12:53:35 <Tomasso> hdaume: what do you mean?
12:53:40 <hdaume> Tomasso: put them in a file or, in GHCi, you can do 'Prelude> let fun x = x+1       Prelude> fun 5     6'
12:54:12 <hdaume> Tomasso: hugs and ghci only evaluate expressions (things which have values) and statement (actions in IO).  "fun :: Int -> Int" is neither of these
12:54:39 <Tomasso> hmmh i see, do i have to put all definitions in a file?
12:54:43 <Tomasso> what kind of file?
12:54:54 <hdaume> a file named Something.hs
12:55:07 <Tomasso> i see
12:55:13 <hdaume> you don't have to put them all in; in ghci, you can define things at the prompt using 'let' as i just mentioned
12:55:49 <hdaume> Lunar^: i really think the problem is with the closing of the handle.  the use of uPIO in matchRegex is pretty safe
12:55:59 <Tomasso> and i load the files using :load filename.hs ?
12:56:06 <hdaume> yes, or just ":l"
12:56:18 <hdaume> and once it's loaded you can use :r to reload
12:56:24 <Tomasso> ok, and do i have to input the complete path?
12:56:50 <Lunar^> hdaume: I'm in a bracket... uhhh I see
12:56:52 <hdaume> not if you've started ghci/hugs in the same path as the file; otherwise you can also put -ifilepath to add filepath to the search path
12:57:40 <hdaume> so if you have a file in /foo/bar/Test.hs and you start ghci in /foo/bar, you can :l Test; or you can start ghci anywhere and do :l /foo/bar/Test.hs; or you can start ghi anywhere with 'ghci -i/foo/bar' and then :l Test.hs will work
12:57:44 <Lunar^> hdaume: Think I will not use hGetContents, it will be simplier
12:58:19 <Tomasso> a haskell ide for linux?
12:58:22 <hdaume> using hGetLine is much better
12:58:29 <hdaume> Tomasso: emacs or vim?  :P
12:58:31 <Lunar^> Tomasso: emacs + haskell-mode
12:58:39 <Tomasso> hhm ok
12:58:46 <Lunar^> Tomasso: You can have a buffer with your source and another one with GHCi
12:58:59 <Tomasso> what is GHCi ?
12:59:02 <Lunar^> Tomasso: This allows you to make interaction with what you're writing quite easily
12:59:18 <hdaume> ghci is ghc's version of hugs
12:59:21 <Lunar^> Tomasso: The Glorious Glasdow Haskell Compiler toplevel
12:59:22 <hdaume> it's ghc's interactive environment
13:03:17 <Tomasso> hmh
13:36:27 <Tomasso> how do i write comments in haskell?
13:36:57 <Tomasso> hmhm the editor says -- 
13:37:32 <Igloo> Or {- ... -} (which can be nested)
13:37:48 <Tomasso> hmhm i see
13:44:25 <Tomasso> how do i say diferent != ??
13:45:20 <Igloo> /=
13:45:28 <Tomasso> Ok
13:50:29 <Tomasso> how do i define a function that takes as parameter a number and a pair of numbers?
13:50:40 <Tomasso> i mean, the pair, is a tuple?
13:51:55 <hdaume> f i = i+1
13:51:59 <hdaume> f (i,j) = i + j
13:51:59 <hdaume> ?
13:52:07 <hdaume> f i (j,k) = i + j + k
13:52:08 <hdaume> ?
13:52:35 <Tomasso> i see
13:53:10 <Tomasso> and f :: type -> type -> type ?
13:53:23 <keverets> f :: Int -> (Int,Int) -> Int ?
13:53:27 <hdaume> if you assume i is an int, you get f :: Int -> (Int,Int) -> Int
13:53:36 <hdaume> (really, it's f :: Num a => a -> (a,a) -> a, but ...)
13:53:43 <keverets> bah... was just going to type that.
13:53:49 <Tomasso> hmmh i see
13:53:53 <Tomasso> hehehe
13:56:44 <Tomasso> (dont like the notation for parameters)
13:56:56 <hdaume> what's wrong with it?
13:57:11 <Tomasso> it should be f :: Int,Int,Bool -> Bool
13:57:26 <Tomasso> and not f :: Int -> Int -> Bool -> Bool
13:57:44 <Tomasso> looks ambiguos, at least for me (newbie) hehehe
13:57:52 <hdaume> but there's a big difference between (Int,Int,Bool) -> Bool and Int -> Int -> Bool -> Bool
13:58:23 <Tomasso> using () is a tuple
13:58:41 <hdaume> so youjust want to write commas instead of function arrows?
13:58:56 <hdaume> that seems even less clear to me :)
13:59:39 <Tomasso> hmhm probably got acostum..
13:59:56 <Tomasso> baa is the same,,.. sintax stuff..
14:00:12 <hdaume> because saying 'f:: Int,Bool -> Int' doesn't make it clear that 'f 5 :: Bool -> Int', whereas the -> notation does
14:00:40 <hdaume> the comma notation is sort of like Clean's notation.  they say "f :: Int Int Bool -> Bool' meaning 'f :: Int -> Int -> Bool -> Bool'
14:01:06 <Cale> Yeah, f a b = a + b, is a function that takes a number and returns a function that takes another number and then adds them.
14:01:30 <Tomasso> hhmh
14:02:17 <Tomasso> are these "f :: Int Int Bool -> Bool' and 'f :: Int -> Int -> Bool -> Bool' the same?
14:02:35 <Cale> the first is not haskell.
14:02:45 <hdaume> the former is Clean's notation for the latter
14:02:54 <hdaume> but they mean the same thing
14:03:03 <Tomasso> Ok
14:03:22 <Tomasso> another thing and dont bother for more.. at least for today :D
14:03:58 <Tomasso> when you dont know what data type is going to be used as input.. is it posible to make a template or smth like that>
14:04:01 <Tomasso> ?
14:04:29 <hdaume> if i understand you correctly, no, that wouldn't be typesafe
14:04:36 <hdaume> but that's what type classes are for
14:04:38 <Cale> There is Template Haskell, but you're probably better off in most cases using typeclasses for that.
14:04:49 <Tomasso> classes???
14:04:52 <Tomasso> ???!
14:05:00 <hdaume> they're not like OO classes
14:05:02 <Cale> yeah, like Num
14:05:12 <Tomasso> mmhh
14:05:23 <hdaume> shameless plug: http://www.isi.edu/~hdaume/htut/, see chapter 4 :P
14:08:58 <Tomasso> this tutorial seems to be good
14:11:11 <Marvin--> hdaume: does your tutorial also come under a silly license?
14:11:20 <hdaume> Marvin--: only if someone asks
14:12:57 <Marvin--> hdaume: it's really too bad, I want to use hAll-in-one in my degree project, but I simply cannot accept that kind of license
14:15:39 <hdaume> sigh.  i suppose i'll change it then :)
14:16:31 <Marvin--> no, I don't want to impose my own ideals on you, you are free to pick whatever license you want
14:18:29 <opet> lol
14:18:31 <hdaume> aight, /me is off to a talk
14:34:40 <Marvin--> bugs in libc scare the hell out of me :-/
14:37:12 <esap> bugs in libc are also quickly found (if they have any effect at all)
14:38:11 <Marvin--> well, this one apparently makes busybox segfault, meaning that the images for debian-installer don't boot
14:41:09 <esap> oh you mean the libc6 2.3.2 fiasco :-) I still haven't dared to try to reinstall that one.
14:41:49 * esap downgraded to libc6 2.3.1-16.
14:42:35 <Marvin--> I'm not sure it's the same thing
14:43:12 <esap> 2.3.2 broke lots of things (like X)
14:43:34 <Marvin--> not for me :)
14:44:22 <Marvin--> it seems to have broken d-i thoroughly though
14:46:07 <esap> For me, it did some "/lib/libnss_compat.so.2: symbol __nss_lookup_function, version GLIBC_PRIVATE not defined in file libc.so.6" errors.
14:46:45 <Marvin--> scary is what it is
14:54:31 <Tomasso> is it posible to generate executable files using haskell?
14:54:37 <Tomasso> .exe or linux binaries
14:54:42 <esap> sure.
14:54:47 <Tomasso> yes??
14:55:02 <Tomasso> thoght it was interpreted only
14:55:12 <Marvin--> use ghc
14:55:22 <esap> no, ghc compiles Haskell just fine.
14:55:51 <Tomasso> ghc is from the gnu compiler collection gcc?
14:56:01 <hdaume> no, haskell.org/ghc/
14:56:08 <Tomasso> le me check
14:57:09 <Marvin--> Tomasso: no :) the glasgow haskell compiler
14:57:48 <Tomasso> hmh
14:58:10 <Tomasso> and then if there are compilers what is hugs used for?
14:58:31 <hdaume> it makes it a lot easier to write and debug code
14:58:33 <Marvin--> interpreting?
14:59:03 <Tomasso> hugs is for interpreting?
15:00:19 <esap> tomasso: http://www.haskell.org/implementations.html actually has a nice explanation of different Haskell implementations.
15:00:33 <Tomasso> hmm le  me cehck
15:01:19 <esap> tomasso: but from those, I prefer GHC.
15:16:56 <Tomasso> are programs compiled using ghc fast as a gcc c compiled program?
15:17:25 <hdaume> ghc doesn't compile C programs :P.  in general, haskell tends to be slower than C.
15:17:41 <Tomasso> Ok hehe
15:17:47 <Tomasso> how slower
15:17:58 <Tomasso> lots ? or a little..?
15:18:03 <hdaume> of course, if you write the C exactly the same as the Haskell (or vice versa), i'd imagine they'd be about the same
15:18:06 <hdaume> it really depends
15:18:28 <Tomasso> hmmh
15:18:30 <hdaume> i'd say 3 times is a reasonable estimate
15:18:38 <hdaume> but if you really know what you're doing, probably no slower
15:18:52 <hdaume> (i.e., know what you're doing and are willing to write library code that is really ugly)
15:18:53 <Tomasso> and if i write a program i can interpret it using haskell and compile it using ghc with no modifications?
15:18:54 <Smerdyakov> Old benchmark that may have nothing to do with anything here: http://www.bagley.org/~doug/shootout/craps.shtml
15:19:04 <hdaume> that's the idea :)
15:19:15 <hdaume> otherwise there would be two languages, Haskell_Compiled and Haskell_interpreted
15:19:36 <Tomasso> then haskell is haskell everywhere
15:19:52 <Tomasso> not like c, that is diferent from one compiler to another..
15:19:55 <Tomasso> ugghh
15:19:55 <hdaume> modulo some extensions that different implementation support
15:20:10 <hdaume> all compilers support the "haskell 98 standard" and many support various extensions
15:24:21 <Smerdyakov> Tomasso, with C programs, you can get bizarre results between platforms because of lack of control over memory accesses.
15:24:37 <Smerdyakov> Tomasso, with Haskell extensions, you'll generally be stopped by the compiler at the parsing or type-checking stage.
15:34:25 <Tomasso> mhhm i like it...
19:19:11 <flippo> @yow
19:19:11 <lambdabot> Is this going to involve RAW human ecstasy?
19:42:12 <Malik> ggt n m =
19:42:12 <Malik>  if (mod n m) == 0
19:42:12 <Malik>  then return m
19:42:14 <Malik>  else return (ggt m (mod n m)
19:42:35 <Malik> why is this not working?
19:44:38 <Tomasso> did you define the functions paramaters and domain?
19:44:55 <Tomasso> ggt :: Int -> Int -> Int ?
19:45:23 <Malik> no.
19:45:26 <Malik> is this essential?
19:45:30 <Tomasso> it is
19:45:38 <Malik> this tutorial i have doesn't do this...
19:45:39 <Malik> mhm
19:45:44 <Tomasso> what is ggt?
19:45:57 <Malik> biggest common divisor or something like that
19:45:58 <Smerdyakov> Gast Gourier Transform
19:46:01 <Malik> my english is bad
19:47:08 <Tomasso>  (ggt m (mod n m) what does this part do?
19:47:37 <Malik> oh i forgot to paste a ) here
19:47:42 <Smerdyakov> Malik, you should go read a tutorial on Haskell.
19:47:42 <Tomasso> dont see connection between ggt m and mod
19:47:55 <Smerdyakov> Malik, you are horribly confused about what functional programming is and what 'return' is.
19:48:21 <Malik> well, i am reading a tutorial. perhaps it isn't the best.
19:48:34 <Smerdyakov> If it uses 'return,' then it is the worst.
19:48:45 <Smerdyakov> (If it uses return in the beginning, that is.)
19:49:00 <Tomasso> you dont need return
19:49:12 <Smerdyakov> Tomasso, it's not even legal to use it like that..
19:49:13 <Tomasso> return is an imperative command ?? :D
19:49:29 <Tomasso> you're telling one thing to return
19:49:38 <Smerdyakov> norpan, he's not doing anything, since it doesn't compile.
19:49:44 * Smerdyakov explodes nick completion.
19:49:56 <Smerdyakov> s/norpan/nope
19:50:14 <Malik> yes i know it goes without it... can you explain 'return' to me?
19:50:21 <Malik> sorry, i'm just starting.
19:50:24 <Tomasso> concepts are more important than sintax, but if it doesnt compile.. ;-D
19:50:32 <Malik> my questions aren't really smart, i know.
19:50:46 <Tomasso> im begginer too
19:50:50 <Smerdyakov> Malik, 'return' is not something you should use. You don't want to know what it is until you have learned more about Haskell.
19:51:06 <Tomasso> i started my functional programming course at university 3 days ago
19:51:52 <Malik> Smerdyakov: ok, i got it working without. the tutorial uses return, in connection with io... perhaps it's correct there..
19:52:07 <Smerdyakov> Malik, if the tutorial is teaching IO early on, then it is a bad tutorial.
19:52:28 <Smerdyakov> Malik, certainly you shouldn't be trying to learn IO if you are new to Haskell.
19:52:56 <Malik> well, yes seems so. it's hard to accomplish with referential transparency, i know.
19:55:59 <Malik> but ggt :: Int -> Int -> Int seems not to be essential
19:56:26 <Smerdyakov> What do you mean?
19:57:50 <Malik> Tomasso said is is essential to 'define' (i don't know whether this is the correct term) the function like this
19:58:15 <Smerdyakov> Oh, you mean that you don't need that line.
19:58:34 <Smerdyakov> Which is correct. It's often included just for documentation purposes.
19:58:47 <Malik> ah ok.
19:59:04 <Smerdyakov> Including the type also gives the compiler a chance to let you know if the actual type doesn't match the type you expect.
20:00:22 * Malik nods
20:03:21 <flippo> some tutorials grab you by the monads
20:15:05 <Pseudonym> Including the type gives you a much better quality of type error.
20:15:24 <Pseudonym> Especially in GHC.
20:23:27 <Smerdyakov> Might anyone here have advice on the legal organization of an Internet hosting cooperative, where members split the costs of professional colocation? From what I've been told so far, it sounds like it's best for us to form a partnership and have all members sign contracts that require them to follow the colo provider's rules and take responsibility for violations regarding their own sites. Any opinions?
20:23:57 <Pseudonym> Well we're doing that, only we're not doing it formally.
20:24:12 <Pseudonym> I don't know about legal organisations, therefore. :-)
20:24:13 <Smerdyakov> I'm part of a group of 11 doing it informally now.
20:24:31 <Pseudonym> Our group is about 16 people (6 boxen).
20:24:55 <Smerdyakov> Are you all mutual face-to-face acquaintances?
20:25:00 <Pseudonym> Yes.
20:25:33 <Smerdyakov> The group I'm part of have mostly never met each other, and I'd like to start a general co-op hosting thing with open membership.
20:26:56 <Pseudonym> Sorry, can't help you out there.
20:27:40 <Smerdyakov> Is there a web site for your group?
20:30:08 <Pseudonym> I think this is the closest thing we have for one:
20:30:09 <Pseudonym> http://futplex.com/
20:30:21 <Pseudonym> Or maybe this: http://tertius.net.au/
20:33:25 <Smerdyakov> Wild. Do you think there's advantage to be hide by forming a federation of such hosting groups, formal and informal?
20:33:29 <Smerdyakov> s/hide/had
20:34:18 <Pseudonym> In this case, yes.  We're actually the former employees and clients of a dot-com which... well, long story.
20:34:41 <Pseudonym> The short version is that it collapsed, but not for the usual reasons that dot coms collapsed.
20:35:08 <Smerdyakov> I mean a federation of groups like yours with others.
20:35:23 <Pseudonym> The short answer is I don't know.
20:35:36 <Pseudonym> I guess it depends on how much you trust each other.
20:36:08 <Smerdyakov> Well, I don't know how much trust you need to have things like resources on starting a local one and a worldwide directory.
20:37:10 <Pseudonym> Oh, sorry.
20:37:14 <Pseudonym> I see what you mean.
20:37:15 <Pseudonym> Hmmm.
20:37:17 <Pseudonym> Maybe.
22:58:34 <Verbed> @yow
22:58:34 <lambdabot> Mary Tyler Moore's SEVENTH HUSBAND is wearing my DACRON TANK TOP
22:58:34 <lambdabot>  in a cheap hotel in HONOLULU!
23:00:06 <innervision> :1
23:00:21 <Verbed> #trivia ?
23:03:05 <innervision> might...
23:25:58 <Pseudonym> @wn trivia
23:26:00 <lambdabot> *** "trivia" wn "WordNet (r) 1.7"
23:26:00 <lambdabot> trivia
23:26:00 <lambdabot>      n : something of small importance [syn: {triviality}, {trifle},
23:26:00 <lambdabot>          {small beer}]
23:26:14 <Pseudonym> #small-beer sounds good
23:26:34 <Pseudonym> So does trifle.  Mmmmm... trifle...
23:32:20 <Darius> "small beer"?  Where does WordNet collect it's data?  "small potatoes" is the American idiom for that; at least, I've never heard an American, or anyone else, say "small beer"
23:33:33 <Pseudonym> No idea.
23:36:36 <Darius> so what is futplex.com?
23:37:24 <Pseudonym> It's just a throwaway domain for stuff we want to host but don't need
23:37:28 <Pseudonym> a full domain for.
23:37:32 * Pseudonym shrugs
23:37:53 <Pseudonym> I like the picture.  My wife is responsible for that.
23:40:57 <Verbed> @wn small potatoes
23:40:59 <lambdabot> *** "small" wn "WordNet (r) 1.7"
23:40:59 <lambdabot> small
23:40:59 <lambdabot>      adj 1: limited or below average in number or quantity or magnitude
23:40:59 <lambdabot>             or extent; "a little dining room"; "a little house";
23:41:00 <lambdabot>             "a small car"; "a little (or small) group"; " a small
23:41:02 <lambdabot>             voice" [syn: {little}] [ant: {large}, {large}]
23:41:04 <lambdabot>      2: limited in size or scope; "a small business"; "a newspaper
23:41:06 <lambdabot>         with a modest circulation"; "small-scale plans"; "a
23:41:08 <lambdabot> [27 @more lines]
23:41:45 <Darius> Try with quotes.
23:45:24 <Darius> So I was looking up WordNet, and this is great: http://www.wordnet.com/bloopers.html
