04:15:12 <d33p> how crap is this attempt: 
04:15:13 <d33p> palindrome [] = True
04:15:14 <d33p> palindrome [a] = True
04:15:14 <d33p> palindrome (x:xs) = x == last xs && palindrome (init xs)
04:15:30 <Heffalump> it's incorrect :-)
04:15:37 <Heffalump> oh no, sorry.
04:15:41 <Heffalump> looks right
04:16:47 <d33p> okay
04:16:56 <Heffalump> it's probably not very efficient
04:17:02 <Heffalump> cos init and last will each do a scan of the entire list
04:17:13 <d33p> fair enough
04:17:22 <Heffalump> can you write a linear-time version?
04:17:28 <d33p> i'll give it a shot
04:17:52 <d33p> its time for dinner now though.. bbl
05:18:54 * Heffalump plays with implicit parameter problems
05:22:16 <Darius> I'm wary that it's a problem.  The only iffy part I see is there is (or seems) to be a difference between binding to a variable and binding in a function.  I.e. let g = ?x does not become (?x :: a) => b
05:23:24 <Heffalump> well, it gives the whole expression the context (?x :: a) and g gets type b
05:23:36 <Heffalump> the thing is that g () = ?x and g = \() -> ?x behave completely differently
05:23:50 <Heffalump> which is nasty, because Haskell essentially used to have proper eta-conversion (if you ignore strictness, IIRC)
05:24:36 <Heffalump> I'm trying to work out if the fact that implicit parameter contexts must appear at the top level is a problem
05:25:03 <Igloo> Yoiks, really?
05:25:15 <Igloo> I'd expect both to use the value of ?x at the point where g is defined
05:26:11 <Darius> Well, it seems to do that for variables but not for functions which kinda makes sense.
05:26:15 <Heffalump> no, because the point of the function version is that it uses it at the point where it's used
05:26:28 <Heffalump> implicit parameters are *supposed* to be dynamically scoped, that's the whole point
05:26:31 <Igloo> But it should just be implicit parameter passing, not dynamic scoping?
05:26:49 <Igloo> Really?
05:27:06 <Heffalump> well, otherwise how would they do what they're meant to do?
05:27:12 <Igloo> I assumed it was the same as if you explicitly put the parameters to all the relevant calls
05:27:26 <Igloo> Maybe I've missed the point
05:29:03 <Darius> It is, but the difference is whether you change ?x into \?x -> ?x or ?x.  For variables it seems to do the latter and for functions the former.
05:29:23 <Darius> I interpret implicit parameters as the Reader monad.
05:29:30 * Igloo disappears again
05:29:51 <Heffalump> well, explicitly putting in the parameters would have the same effect too
05:30:03 <Heffalump> because if you use the same names, then the innermost one would win
05:34:18 <Heffalump> darius: right, which again is dynamically scoped
05:37:21 <Darius> Yes, I just find it easier and more concise to think of it that way.
05:42:30 <Igloo> No, if you changed ?x to x everywhere and added x as an argument to each function then the value when g is constructed would be used, not the innermost one
05:43:50 <Darius> if g is g a = (?)x then it would be translated to g a (?)x = (?)x 
06:10:28 <Darius> Well, as I suspected, the difference between let g = ?x and let g () = ?x is the same reason as the monomorphism restriction.  This is discussed in 5.1 of "Implicit Parameters: dynamic scoping with static typing"
06:21:57 <Darius> In fact, using -fno-monomorphism-restriction makes (at least one of the) examples work as expected.
06:28:08 <reffie> untie me, for now.
07:18:02 * shapr boings
07:21:10 * Igloo bounces
07:21:25 * Igloo now has (the loan of) a guitar  :-)
07:21:37 <Igloo> Unfortunately it's a 3/4 size guitar and I am a full size Igloo
07:53:57 <MMD|Studying> what is an integral type?
07:54:26 <MMD|Studying> does he mean Integer?
07:54:45 <MMD|Studying> Integral values can be compared for equality and for orde
07:54:49 <MMD|Studying> r
08:00:45 * Riastradh has four guitars, one 5/8th size (but still a nice guitar), and he will buy an electric sitar today...or a Rickenbacker.
08:01:12 * Riastradh bounces too.
08:07:20 <Riastradh> MMD|Studying, a type for which there is an instance of the class Integral.
08:11:22 <Igloo> MMD: Integer is an Integral type, as is Int and various others
08:11:33 <Igloo> Integral is a class
08:11:49 <Igloo> See ":i Integral" in hugs
08:19:19 <Darius> Riastradh: ever play an nylon stringed electric?
08:21:43 <Riastradh> Nope.
08:22:12 <Riastradh> I imagine it would make finger picking a lot less blistering.
08:41:47 <Igloo> Oh, can you read guitar notation, Ria?
08:43:09 <Smerdyakov> Does anyone know how to get LateX2HTML to include the navigation images in its output instead of using links to local files?
08:44:51 <earthy> come again?
08:44:58 <earthy> what do you mean by `include'?
08:45:18 <Smerdyakov> earthy, put the .png files in the output directory and use relative links to them in the generated HTML files
08:47:08 <earthy> owh, yeah, that's possible
08:47:44 <earthy> just a sec
08:47:58 <earthy> -local-icons
08:48:23 <Smerdyakov> Thank you!
08:49:18 <Smerdyakov> Actually -local_icons
08:51:57 <earthy> err, yeah, right, sorry.
08:54:10 <Igloo> If anyone can tell me what the slashes all the way through and the various bits right at the end of http://chaos.earth.li/~ian/q.jpg mean I'd be most grateful
08:55:12 <MMD|Studying> bah when I opened it I thought it was some weird PLA
08:55:20 <MMD|Studying> My geeknesh rises to new levels
08:55:38 <Igloo> It /is/ a programming language
08:55:49 <Igloo> But not for your traditional CPU
08:59:05 <earthy> higloo: they seem to be counting hints
08:59:19 <Igloo> counting hints?
08:59:30 <earthy> yes: as in `you're now holding a note over a count'
08:59:37 <earthy> or maybe syncopation hints
09:00:01 <Igloo> Note that the A7 chord has one directly beneath it (on the first line)
09:00:03 <Igloo> syncopation?
09:00:22 <earthy> igloo: how much music did you study? :)
09:00:38 <Igloo> My guess was that you should do a down strum each beat and an up strum in the slashes inbetween beat, and the bits at the end ar to do with plucking a string or holding the chord or something
09:00:57 <Igloo> Music or guitar?
09:01:18 * Igloo has read half the web in the past few days but didn't spot that word anywhere, and had keyboard lessons in the dim and distant past
09:02:24 <earthy> well, I don't know about strumming the guitar, but it seems to be that the slashes indicate rythmical frasing
09:02:45 <earthy> and that frasing is specified at the `downbeats', so they would conceivably be strummed differently
09:03:32 <earthy> I'm asking a music student, just a sec
09:03:38 <Igloo> Oh, cool, ta
09:04:41 <earthy> okay, right.
09:04:49 <earthy> my guess was wrong. :)
09:04:54 <Igloo> :-)
09:04:58 <Igloo> So?
09:05:08 <earthy> those are the places you actually strum.
09:05:21 <Igloo> Strum down?
09:05:35 <earthy> no, strum at all
09:05:51 <Igloo> In that case either A7 on the first line is strummed twice at one or Dm7 at the end of the first line isn't strummed at all
09:06:27 * Igloo notices that the other ones I don't understand at the end have a rhythm equal to the notes underneat so presumably mean to strume in that rhythm
09:06:43 * earthy nods
09:07:25 <earthy> note: the guitar notation is in support of the melody line
09:07:30 <earthy> so, it makes sense that way
09:07:36 <Igloo> I still don't get the slashes, though
09:08:00 <earthy> well, it's the places you strum. ;)
09:08:22 <Igloo> Do you also strum where the chord is first given?
09:08:34 <earthy> actullay, changing the fingering on a strummed guitar makes the dying sound change
09:08:41 <earthy> no, it seems you don't
09:09:05 <earthy> but that doesn't really makes sense in the second line...
09:09:08 <Igloo> Ah, so the Dm7 is just to change the pitch of the already strummed strings?
09:09:32 <Igloo> Hmm, no, changing twice seems like it would have very little effect
09:10:54 <earthy> okay, trying to play this in my head it seems that you strum at the chord and at the slashes
09:11:27 <earthy> but, yeah, it's chords plus rythm in a silly notation. :)
09:11:36 <Igloo> So what about the A7 on the top line?
09:11:58 <earthy> igloo: that's just redundant information, right? :)
09:12:15 <earthy> (they actually do put redundant information in music notation at times)
09:13:00 <Igloo> Hmmm
09:14:12 <earthy> ah well, dinner. ;)
09:14:19 <Igloo> Thanks for your help  :-)
09:15:54 <earthy> no probs. ;)
09:31:17 <Heffalump> igloo: belatedly, no, because g would have ?x as a parameter
09:33:32 <Igloo> Not in the way I imagined it. Implicit contexts aren't inferred at the top level, so I don't think that's obvious either.
09:37:55 <Heffalump> sorry?
09:40:04 <Igloo> You are saying a let binding which doesn't give an explicit type produces functions with implicit parameters in the context, right?
09:41:20 <Heffalump> all I'm saying is that going through a program with implicit parameters and making them all explicit will still effectively give you dynamic scoping
09:42:09 <Igloo> Only if you decide to pass x as an argument to g
09:42:43 <Heffalump> yes, but that's what implicit parameters do (issues with variables v functions notwithstanding)
09:43:45 <Igloo> Which is what I think is non-intuitive
09:43:55 <Igloo> If you want that you should give g a type signature, as you have to do at the top level
09:52:28 * shapr realize Igloo is creating the Mu-Fu martial art (Musically Functional)
10:03:31 * shapr boings
10:04:13 * shapr sings cheerfully
10:05:24 <Darius> Have you bought or otherwise obtained the Jimmy Eat World CD or do you still only listen to Praise Chorus?
10:05:55 <shapr> still only the Praise Chorus :-)
10:06:57 <shapr> speaking of music, I wrote some tiny C binaries that give remote control of alsaplayer
10:07:45 <shapr> so now I have equally flexible music playing in the console
10:09:30 <shapr> oh Ithink I found out why I can't push patches to the darcs server
10:09:42 <Igloo> Oh?
10:09:51 <Heffalump> postfix is doing things wrong?
10:09:56 <shapr> that too
10:10:00 <shapr> but I think it's actually gpg
10:10:03 <Heffalump> it sounds like David Roundy was expecting pipes to be run in the home directory
10:10:14 <shapr> yah, I think that was part of the problem.
10:10:37 <shapr> anyways, I have six or seven private keys
10:10:46 <shapr> and the wrong one is set to primary
10:11:10 <shapr> darcs calls "gpg --clearsign"
10:11:29 <shapr> I expected it to choose the secret key according to the email address given
10:11:44 <shapr> but it doesn't, it just uses the primary
11:19:28 <Riastradh> Whee!
11:19:51 * Riastradh owns four guitars and as of a few minutes ago an electric sitar as well.
11:20:13 <Igloo> Cool  :-)
11:20:44 <Riastradh> The six-string Rickenbacker wasn't very interesting, and the twelve-string one was way too costly; thus I was left with but one choice.
11:21:37 <Igloo> How do 12 strings differ from 6 strings (apart from the obvoius)?
11:22:41 <Riastradh> They make a much nicer sound when playing rhythm.
11:23:18 <Igloo> Is each pair of strings the same note then?
11:23:32 <Riastradh> No -- generally the extra string is an octave higher.
11:23:49 <Riastradh> On George's Rickenbacker, the low E and A were the just doubled, while the others were an octave higher, I think.
11:23:54 <Igloo> Hmmm, OK, so don't you need 3 hands?
11:24:03 <Riastradh> No.
11:24:11 <Riastradh> The strings are very close together.
11:24:13 <Igloo> Or are they interleaved?
11:24:25 <Riastradh> You need big and calloused hands.
11:24:33 <Igloo> Ah, right
11:24:45 <Riastradh> They're harder to play.
11:25:07 <Igloo> Makes sense  :-)
11:26:02 <Riastradh> The sitar has thirteen 'sympathetic strings'...I spent the last hour tuning them, painstakingly slowly, as they're all high and the slightest adjustment makes the greatest difference.
11:26:21 <Riastradh> They sound really cool when distorted, though!
11:26:30 * Igloo needs to tune the guitar
11:26:33 <Igloo> :-)
11:27:26 <Riastradh> I need to learn some George songs, now...
11:46:41 <MMD|away> add1 n = n+1 
11:46:48 <MMD|away> iterate add1 0
11:47:17 <MMD|away> that wouldn't give out a sequence would it?
11:50:09 <Igloo> It returns a list - is that what you mean?
11:50:44 <MMD|Studying> it does? 
11:50:47 <MMD|Studying> but why?
11:50:56 <MMD|Studying> ow
11:51:01 <Igloo> Do you know what the type of iterate is?
11:51:06 <MMD|Studying> I suppose because iterate is defined that way
11:51:07 <Riastradh> @type iterate
11:51:09 <lambdabot> iterate :: (a -> a) -> a -> [a]
11:51:14 <MMD|Studying> yeah :d
11:51:15 <Riastradh> @prelude iterate
11:51:20 <lambdabot> *** "iterate" prelude "Haskell Standard Prelude Dictionary": text follows
11:51:20 <lambdabot> iterate
11:51:20 <lambdabot>   iterate ::  (a -> a) -> a -> [a]
11:51:20 <lambdabot>   iterate f x       = x : iterate f (f x)
11:51:22 <MMD|Studying> thx
14:48:40 <scharob> Hi
14:48:46 <Riastradh> Hi.
14:50:05 <scharob> Can anyone explain to me why the curryfied add function with the Type Int -> Int -> Int is right-assotiative and returns a function Int -> (Int -> Int) ?
14:51:04 <dark> scharob: Hmm that's not quite right.  It doesn't return a function Int -> (Int -> Int), it is a function Int -> (Int -> Int)
14:51:22 <Riastradh> It returns a function of the type Int -> Int.
14:51:55 <dark> And the reason why -> is right-associative is because it's more convenient that way :)  You want add to take an Int as first parameter, not an (Int -> Int) function -- that wouldn't make sense.
14:52:02 <scharob> Well but what does the function look like for my add example? If haskell only accepts one argument for a function..
14:52:10 <scharob> add 5 4 e.g.
14:52:35 <scharob> What function does that return?
14:52:43 <scharob> I do not get that
14:52:51 <Darius> the constant 9 "function"
14:52:52 <Riastradh> 'add 5 4' returns Int.
14:52:53 <dark> Ah.  It's treated as two function applications.  First you get (add 4) 5.  The (add 4) is reduced to an (Int -> Int) function that takes the 5.
14:53:31 <dark> So function application is left-associative.
14:53:34 <scharob> but how can add 4 be reduced??
14:53:39 <scharob> hmm
14:53:48 <scharob> It will not run I guess
14:53:52 <Riastradh> ?
14:54:05 <dark> By magic :)  That's why it's a builtin.
14:54:25 <scharob> no no....what is the magic ;()
14:54:44 <scharob>  The (add 4) is reduced to an (Int -> Int) function that takes the 5....How does that work??
14:55:02 <dark> Well the compiler probably converts (add 4) to something like (\x -> primIntAdd# x 4)
14:55:15 <scharob> uh?
14:55:21 <scharob> Hmmm
14:55:22 <Riastradh> Are you familiar with the Lambda-Calculus?
14:55:29 <scharob> No not really
14:55:41 <dark> Where primIntAdd# is a function I just made up that the compiler uses to represent integer addition.
14:55:52 <scharob> Where can I get an explanation of this canluclus?
14:55:55 <Riastradh> Reading stuff about the Lambda-Calculus may help.
14:55:57 <Riastradh> Google.
14:56:09 <Smerdyakov> scharob, you really don't want to know.
14:56:26 <dark> scharob: It's probably easier to understand with a function that isn't "add" :)
14:56:35 <Smerdyakov> scharob, assuming that + is already available as a built-in operator, then your add 4 reduces to (\x -> 4 + x)
14:57:18 <Smerdyakov> scharob, though now that I think about it, I don't think "reducing" is that helpful of a notion here.
14:57:45 <scharob> Smerdyakov so it is replaced by a "help" function?
14:58:21 <dark> In this case, the + function is pretty much identical to the add function so it doesn't explain much...
14:58:39 <scharob> I just do not see how my add can manage to accept a single parameter and return a function that yields 9...
14:58:44 <Darius> Smerdyakov: not that I disagree, but \x y -> x + y ~> \y -> 4 + y would be straightforward beta-reduction.
14:59:04 <Smerdyakov> scharob, it's not really replaced. add 4 already _is_ a function. Just like if you define a function f, then f already _is_ a function.
14:59:32 <Darius> (er applied to 4)
14:59:39 <scharob> So constants are also functions?
14:59:50 <Darius> add 4 doesn't yield a function that evaluates to 9.
14:59:59 <scharob> Darius not?
15:00:06 <scharob> no add 4 5
15:00:11 <dark> (add 4) yields a function that adds 4 to things.
15:00:13 <Darius> They could be thought of as nullary functions, but that's probably not too helpful.
15:00:13 <Riastradh> add 4 yields a function whose argument is added to 4.
15:00:19 <dark> How the compiler implements this is unimportant :)
15:00:19 <scharob> But it takes add 4 first ??
15:00:57 <Darius> scharob: know what a closure is?
15:01:06 <scharob> mom need to change connection :-(
15:02:45 <scharob_> okay back
15:02:50 <scharob_> Darius Closure?
15:02:52 <scharob_> No
15:02:55 <Smerdyakov> Why did you ask if constants are functions?
15:03:05 <Smerdyakov> Darius, I think explaining closures would only be confusing here.
15:03:23 <Darius> It depends on what scharob_ is after.
15:03:33 <Smerdyakov> Let's wait and see why he asked if constants are functions.
15:03:44 <Darius> Probably because an off remark I made earlier.
15:04:22 <scharob_> I just want to know why add has the type Int -> (Int -> Int) and does take only an single Integer and not as with tuples (Int,Int) -> Int
15:05:05 <scharob_> I do not understand why Int -> (Int -> Int) works
15:05:15 <scharob_> or Int -> Int -> Int
15:05:18 <Smerdyakov> scharob, because it DOES take only a single integer.
15:05:36 <scharob_> Yes but how? I need 2 parameters to add...
15:05:39 <Smerdyakov> scharob, when it has that first integer, it has half the input, and creates a new function to wait for the other half.
15:05:44 <scharob_> I cannot add 4 with nothing
15:05:51 <Smerdyakov> That's right, you can't.
15:05:56 <Smerdyakov> Imagine that your code does the following.
15:06:02 <Smerdyakov> Your code is a little man who sits at a desk.
15:06:09 <Smerdyakov> His only job in life is to sit and wait for an integer to arrive.
15:06:18 <Igloo> scharob_: Would you be happy with a function  add4 x = 4 + x  ?
15:06:23 <Smerdyakov> When he gets it, he's supposed to send a note to another guy saying "the number was 4".
15:06:40 <Smerdyakov> Then he dies and the other guy takes over. The other guy waits for an integer, and uses the note to know what to add to it.
15:06:43 <scharob_> Smerdyakov Ah...whar are the steps haskell creates this new function after reading the 1st integer?
15:06:51 <Smerdyakov> scharob, what?
15:07:34 <scharob_> Well, add 4 was read in
15:07:46 <scharob_> What is the new function to read in x ?
15:07:56 <Smerdyakov> What do you mean "what is the new function"?
15:08:24 <scharob_> Well you said when it has that first integer, it has half the input, and creates a new function to wait for the other half.
15:08:27 <Smerdyakov> The function that is created is represented internally.
15:08:38 <Smerdyakov> There is no need to come up with equivalent textual code to describe it.
15:08:56 <Smerdyakov> The runtime system certainly has nothing to do with Haskell code.
15:09:02 <Smerdyakov> That's only relevant while you're compiling.
15:09:39 <scharob_> hmm
15:10:10 <scharob_> I am not really satisfied, yet :-)
15:10:48 <Smerdyakov> Why are you not satisfied?
15:11:19 <scharob_> Every function in haskell takes only one single parameter as an input, correct?
15:11:32 <Smerdyakov> Right
15:12:05 <scharob_> And then another function is created, differnt as my example add lets say add'
15:12:10 <scharob_> internally
15:12:17 <Smerdyakov> Right
15:12:39 <scharob_> and the next parameter I gave with the command line is read in by this function add'
15:13:02 <Smerdyakov> Yup
15:13:18 <scharob_> and then it returns the result
15:13:59 <scharob_> So if I have a function that uses 3 Inputs it would be e.g. a -> (a -> ( a-> a))
15:15:41 <scharob_> be back in a minute
15:16:14 <scharob_> okay...need to correct...10 seconds
15:16:16 <scharob_> :-)
15:18:21 <scharob_> Thanks @ all for your help
15:18:24 <reffie> now i know that you love me.
15:19:24 <Smerdyakov> What does "need to correct...10 seconds" mean?
15:20:12 <scharob_> I said...be back in a minute and I was only just round about 10 seconds away from the channel
15:20:40 <scharob_> So nothing special....should be a joke *duck*
15:21:05 <Smerdyakov> English isn't your native language, is it?
15:21:13 <scharob_> no
15:21:18 <Smerdyakov> It shows ;)
15:21:25 <scharob_> uh
15:22:05 <dark> Smerdyakov: Because he spells correctly? :)
15:22:15 <scharob_> Well I need to apologise that
15:22:28 <scharob_> dark ?
15:22:31 <Smerdyakov> scharob, so now you understand curried functions?
15:23:04 <scharob_> Smerdyakov I think I understand the "rough" thing
15:23:40 <scharob_> But I cannot say I am familiar with this currying
15:24:13 <Smerdyakov> What keeps you from being familiar?
15:24:21 <dark> I'm playing Utopia.  It's a fantasy game so it uses words like "Faery" and "Shepherd".  I don't think I've *ever* seen those spelled correctly on the boards.
15:24:51 <Smerdyakov> dark, "faery" has mainy "correct" spellings, including "fairy" and "faerie."
15:24:57 <Smerdyakov> s/mainy/many
15:24:57 <scharob_> Smerdyakov Do you know how haskell creates this new function to get the next parameter? And how does this fit to pattern matching?
15:25:05 <dark> Smerdyakov: Yes but not "feary" :)
15:25:20 <Smerdyakov> scharob_, Haskell is a functional programming language. "Creating things" is not part of the user-level view.
15:25:24 <dark> "Rouge" is also a popular occupation.
15:26:11 <Smerdyakov> scharob, are you asking because you're interesting in compiler implementation? An answer to the question of how this is done on the nuts-and-bolts level would be utterly irrelevant to you otherwise.
15:28:12 <Smerdyakov> And pattern matching is not connected with currying. (to chop off that half of your questions)
15:28:16 <scharob> Smerdyakov I come to it because if I think about this currying I come to this point where I want to know that..
15:28:41 <Smerdyakov> scharob, so, to reiterate, you are asking because you want to know how to compile Haskell to real machine code, not because you want to learn to understand Haskell programs better>
15:28:43 <Smerdyakov> ?
15:28:51 <scharob> Smerdyakov I just thought how the function knows there are no more parameters..
15:29:25 <Smerdyakov> scharob, please answer my question with one choice or the other: Do you care about how to compile Haskell to machine code, or how to understand Haskell programs?
15:29:53 <scharob> Smerdyakov Machine Code
15:30:21 <Smerdyakov> scharob, well, in that case, it's simple.
15:30:40 <Smerdyakov> scharob, you represent a function as a pointer to its code and a record containing all the variables that it uses that are defined outside the function.
15:30:42 <scharob> That sound good
15:31:13 <Smerdyakov> scharob, for instance, a partially applied "add" result would be a pointer to some code and the machine value of the first parameter, stored together.
15:34:02 <scharob> Okay...and when my record is empty the function application ends..
15:35:17 <scharob> So add 4 5 would write e.g. in register 100 4 and then my register 100 would be added with another register 101 that contains the next integer of the record..
15:35:42 <scharob> Until my record stack is empty
15:37:13 <Smerdyakov> That sounds close enough.
15:37:40 <scharob> Okay.
15:40:07 <scharob> And what about haskell....I mean my little hugs for instance...Type checking is succesful until my add x y has for x and y an Integer...and pattern matching returns my expression a + b, another Integer... and add 4 returns first addnext 5 and then addnext 5 returns the constant 9...that is how it works?
15:42:21 * scharob sees a bubble over his head "They will call me stupid"
15:44:41 <Darius> A bit belatedly, dark: webboards may not be the best places for looking for intelligence, or at least typographical skill.
15:45:29 <Smerdyakov> scharob, pattern matching is not involved except in the trivial case of binding variables, if you want to look at it that way.
15:46:15 <scharob> Yes my x binds the first value of the function application and the second is bound by y
15:46:41 <Smerdyakov> Right.
15:47:08 <scharob> But I simply did not know another function is created
15:47:38 <scharob> I thought there must be 2 values because add needs 2 parameters
15:48:12 <Darius> In actual implementations, compilers go to all kinds of trouble to -not- make extra functions.  In fact, none actually -make- a new function.
15:48:20 <scharob> And the problem was why the hell add could just accept a single parameter
15:48:41 <Darius> It could, if by that you mean a tuple, but that's much less convenient.
15:49:20 <scharob> I do not see any advantage to this
15:49:54 <Smerdyakov> scharob, how far are you in learning Haskell? Have you learned of the map function yet?
15:50:05 <Darius> map (add 4) [1..10] is less typing than map (\x -> add (4,x)) [1..10] and (arguably) clearer.
15:50:06 <scharob> Uh....found something about lambda calculus...looks like hard stuff..
15:51:11 <scharob> I think map is a higher order function...
15:51:27 <Smerdyakov> scharob, but did you get to the part in whatever text you are reading where it is explained?
15:51:52 <Smerdyakov> scharob, if not, then I doubt the text mentioned the type of (+) explicitly, and it is bad that you have gone off on a tangent worrying about it.
15:53:03 <scharob> Smerdyakov okay
15:57:21 <scharob> Smerdyakov It seems map is a function that takes some values from a list and hands it over to any other function
15:57:50 <Darius> and then ...?
15:58:16 <scharob> Darius And then this other function returns the values
16:00:10 <scharob> So I could also say map (multiply 4) [1..10] or any apropriate function..
16:02:43 <Darius> @eval map (\x.4*x) (fromTo 1 10)
16:02:44 <lambdabot> [4, 8, 12, 16, 20, 24, 28, 32, 36, 40]
16:03:09 <scharob> Yes
16:03:12 <scharob> :-)
16:03:47 <scharob> More general or abstract this map thing..
16:05:09 <scharob> I saw also some more of those functions....zipWith, zip, foldr...but I think I'll continue tomorrow
16:07:49 <Darius> @get-definition zipWith
16:07:50 <lambdabot> zipWith = \f l r.if null l || null r then [] else f (head l) (head r) : zipWith f (tail l) (tail r)
16:07:56 * Darius pats himself on the head.
16:09:30 <scharob> Does anybody know where to get the full Version of this text? http://www.jfsowa.com/logic/alonzo.htm
16:35:57 <Lunar^> http://wise.homedns.org/blog/ <--- progress has been made
16:47:26 <Smerdyakov> Why is it labelled "blog"?
17:06:40 <emu> we blog
20:11:41 <Smerdyakov> Cave men were known to utilize primitive recursion in planning the hunt.
20:37:01 <Heffalump> oh yes?
