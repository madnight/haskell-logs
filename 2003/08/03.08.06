01:16:54 <Marvin--> eep
04:07:37 <juhp> yay, on a v6 connection now :)
04:09:07 <reffie> yay
04:09:12 <reffie> you're a hax0r, now
04:19:11 <Marvin--> l33t
04:22:25 <juhp> heh
04:23:33 <Marvin--> or would that be l:33:t?
04:46:12 <reffie> heh
04:51:31 <reffie> 31:33:7
04:54:26 <Marvin--> yay, all the icky C code paid off
04:54:32 * Marvin-- is down from 600 cpu seconds to 400 cpu seconds
04:54:40 <reffie> yay
04:54:50 <reffie> what are you doing?
04:55:07 <Marvin--> writing a text search indexer
04:55:12 <Marvin--> in python and C
04:55:22 <reffie> 400 seconds to do what?
04:55:38 <Marvin--> to create 8 indices over an 18M postgres database
04:55:44 <Marvin--> (the index is 70M)
04:55:54 <reffie> ah ok
04:56:15 <Marvin--> you wouldn't believe  how slow it was when I fiddled with berkeley dbs over nfs :-/
04:56:29 <reffie> heh
04:56:41 <Marvin--> seriously, writing those 70M of data to berkeley dbs took *three hours* over nfs
04:56:45 <Marvin--> and 12 seconds locally
04:56:50 <dennisb> Marvin--: what about tsearch or other full text index solutions that exists?
04:57:20 <Marvin--> dennisb: er, tsearch as in the binary trees in libc?
04:57:42 <dennisb> Marvin--: tsearch as in the package that exists for postgresql
04:58:03 <Marvin--> hmm, is that when you can do things like create index using btree or stuff?
04:58:59 <dennisb> no, that is ordinary indexes. It's an index that makes it go fast to search for a word in a bigger text block.
04:59:13 <Marvin--> this is a full text index to be used with free-text searches (case sensitive or not, diacritic mark handling, phrase searches, word truncation...), and none of the (open source) stuff we've evaluated suited us
04:59:59 <dennisb> I don't know exactly what tsearch supports, but version 2 is very new and might be something you want to at least look at
05:00:27 <Marvin--> is it postgres-only?
05:02:02 <dennisb> yes
05:02:31 <dennisb> but it probably does not do all that you do in your implementation
05:02:56 <dennisb> http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/
05:03:05 <Marvin--> yeah I found it
05:03:12 <Marvin--> we need to support both postgres and oracle
05:03:28 <Marvin--> and I think some nuthead here is investigating how expensive ram is, we may not need databases at all ;)
05:03:34 <dennisb> :-)
05:04:49 <dennisb> just in case you don't know, but ram is not really a substitute for a database since it looses it's content when you turn of the power :-)
05:05:44 <Marvin--> no shit, einstein
05:05:49 <reffie> heh
05:05:49 <dennisb> hehe
05:26:37 <Marvin--> hmm, I wonder if it's possible to write a gtk theme engine that moves menu bars to the top of the screen like in macos
05:27:37 <Marvin--> of if I need window manager support too
05:30:06 <o3> Marvin--: qt/kde can do that
05:30:15 <o3> but if you use focus-follows-mouse, have fun
05:30:53 <Marvin--> hmm, point
05:31:02 <Marvin--> dang
05:31:08 <Marvin--> 'cause I really like focus-follows-mouse
05:31:16 <Marvin--> but I also really like the macos style menu bars
05:32:49 <o3> Marvin--: icewm has a nice feature where it will only refocus if the mouse cursor has been on the new window for e.g. 300ms or so
05:33:00 <o3> so if you're just zipping past other windows, it won't refocus
05:33:03 <o3> which will interact nicely with that
05:33:14 <o3> unfortunately icewm has no kde integration, at least when i last used it
05:33:16 <Marvin--> hmm, nice
05:33:40 <Marvin--> heh, when I searched google for "macos menu bar linux", haskell.org/pipermail/gui/... was the second link
05:34:12 <o3> are you subscribed to gui?
05:35:26 <Marvin--> no
05:36:54 * o3 goes looking through GUI archives to see if it's worth subscribing to
05:43:15 * Marvin-- wants a mac :-/
05:55:02 <o3> Marvin--: ibooks are reasonably cheapish
05:57:18 * Marvin-- grumbles about sawfish and/or gnome not remembering the size and position of his terminal windows on the laptop
05:59:49 <Marvin--> it remembers the number of tabs I have in each window and the *titles* of said tabs, but not the fscking size and position of the windows
05:59:52 <Igloo> sawfish window cycling has gone a bit quirky for me since I upgraded it
06:01:40 <Marvin--> I run windowmaker on this machine and on my home machine because of my all window managers suck principle :-/
06:02:20 <Marvin--> the laptop has gnome 2 and lots of terminal windows since I really suck at using the pointer pad on the laptop :-)
06:02:32 <d33p> whats wrong with blackbox?
06:02:46 <o3> please no WM war! :)
06:03:29 <Marvin--> I like gnome, but I really dislike both sawfish and metacity, they just don't work for me, they feel too flaky... wmaker is rock solid but sucks in other interesting ways :-/
06:27:55 <Marvin--> hello syntax
06:34:58 <steveh> i thought xfce worked pretty well
06:35:45 <steveh> but I don't think it remembers xterm sizes either :)
06:36:06 <steveh> that's what --geometry is for :^)
06:36:19 <Marvin--> this is gnome-terminal
06:36:46 <Marvin--> it may have --geometry too, but even with several windows it's just one process, so --geometry won't work anyway
06:37:00 <Marvin--> now I remember what I disliked with blackbox
06:37:15 <d33p> whats that marvin :)
06:37:15 <steveh> -geometry, not --geometry
06:37:16 <steveh> silly me
06:37:33 <Marvin--> how on earth can I get it to auto-launch programs on several different virtual desktops?
06:37:45 <d33p> Marvin--: there is a program, bblaunch
06:38:04 <Marvin--> like launch evolution in full-screen on desktop 6, galeon in full-screen on desktop 2, some gnome-terminal:s here and there
06:38:13 <d33p> bbkeys is indispensible too
06:38:23 <steveh> do you like the tab-ability of gnome-terminal?
06:38:31 <Marvin--> yes
06:38:43 <Marvin--> but I also want several g-t windows :) sometimes on different desktops
06:38:48 <Marvin--> well, usually on different desktops
06:39:15 <d33p> iam going to paste.. hope no one gets pissed off
06:39:17 <d33p> d33p@SGL:~$ bblaunch 
06:39:17 <d33p> usage:  bblaunch [-options ...] command
06:39:17 <d33p> where options include:
06:39:17 <d33p>   -s --shaded                      shaded
06:39:20 <d33p>   -h --maxhorz                     horizontally maximixed
06:39:22 <d33p>   -v --maxvert                     vertically maximized
06:39:24 <d33p>   -o --omnipresent                 omnipresent
06:39:26 <steveh> sounds like you should just use screen, marvin ;)
06:39:26 <d33p>   -w --workspace <workspace>       specify initialworkspace
06:39:28 <d33p>   -k --stack <stack>               specify stack placement
06:39:30 <d33p>   -d --decor <decorations>         specify window decorations
06:39:32 <d33p>   -p --pause <milliseconds>        time to wait for windows to map
06:39:34 <d33p>   -? --help                        displays this message
06:39:40 <Marvin--> steveh: I've never managed to use screen :)
06:39:51 <steveh> screen rocks my world
06:39:56 <steveh> as much as any software can
06:39:59 <Marvin--> d33p: see, the problem with that is that gnome-terminal is a single process for several windows...
06:39:59 * d33p agrees with steveh
06:40:21 <d33p> Marvin--: hm..
06:40:23 <Marvin--> which is why wmaker has lots of problems with it :-/
06:40:23 <steveh> the advantage to screen is you can detach it and pick up your work at a different location
06:40:36 <Marvin--> steveh: sure, but what I need is a gui-enabled screen
06:40:45 <d33p> does such a beast exist?
06:40:57 <Marvin--> not to my knowledge
06:41:06 <steveh> seems kind of weird to need a gui-enabled terminal program :)
06:41:07 <d33p> :\
06:41:29 <steveh> you can use any terminal you want with screen
06:43:08 <Marvin--> sure, but what I really want to do is to detatch and pick up my gui programs at a different location
06:43:15 <steveh> hehe
06:43:17 <steveh> that's VNC then
06:43:25 <Marvin--> gah, no, eek
06:43:28 <steveh> only way that I know of
06:43:43 <Marvin--> I want it for individual programs, not to transfer an entire desktop
06:44:30 <steveh> wel
06:44:39 <steveh> I suppose an X11 guru might know of some way to do that
06:44:43 <steveh> but it's not me
06:45:12 <o3> Marvin--: vnc, or xproxy
06:45:15 <o3> i think it's called xproxy
06:45:16 <d33p> it'd have to work with X11 fowarding
06:45:44 <o3> never used it myself; a friend pointed it out to me
06:45:44 <steveh> right, but it has to be smart enough to allow an X program to have a valid DISPLAY setting
06:46:02 <steveh> yet also allow that DISPLAY to be transferred to different physical displays
06:46:59 <Marvin--> hrm, is there a debian package for xproxy?
06:47:16 * d33p casts vnc
06:47:16 <Marvin--> I can only find xproxy-http (which is something radically different) and lbxproxy which also seems to be something else
07:04:00 <Marvin--> hey cool, I'm *cough* down to 115 cpu seconds
07:04:10 <Marvin--> alas, I don't think it's reasonable to use this much memory :-/
07:04:27 <Marvin--> since the worst case would be memory usage == 8 * database size :-/
07:07:13 <SyntaxPolice> howdy all
07:11:00 * Marvin-- is reading interesting things on the gnome usability list about the "Quit" menu item
07:15:32 <Marvin--> I think the main problem is that there is no concept of an "application" in unix :)
07:40:35 <keverets> Marvin--: apt-cache show xmove
07:41:46 <Marvin--> ah, cool, thanks, I'll have to have a look at that
07:42:50 <keverets> np.
07:43:40 * shapr yawns
07:44:26 * Marvin-- is thinking, re: sloppy focus and macos style menu bar... in the mac world of having an "application" concept, I think I could get used to not having sloppy focus
07:44:38 <o3> Marvin--: believe me, you do
07:44:48 <vegai> I hate gnome-terminal
07:44:49 * Marvin-- wants macosx on linux :)
07:45:08 <shapr> I like gnome-terminal
07:45:10 <Marvin--> sounds like I want gnome to be macosx
07:45:10 <o3> i use sloppy focus on X11, and click-to-focus on mac os x.  wouldn't imagine switching from either
07:45:25 <vegai> shapr: does it work with screen in there?
07:45:41 <Igloo> sloppy focus disagrees with my tendency to throw the mouse cursor to a random corner of the screen when it's getting in the way
07:45:46 <vegai> with screen and irssi, more specifically
07:46:10 <shapr> vegai: I dunno about irssi, but gnome-terminal and screen work just fine here.
07:46:13 <o3> Marvin--: you know you want an ibook ;)
07:46:56 <vegai> shapr: here with every screen update, the whole foreground paints blue
07:47:31 <vegai> that brings forth rage
07:47:53 <Marvin--> Igloo: gvim hides the mouse cursor when you start typing, so does gnome-terminal I think
07:48:00 <Igloo> At a guess your TERM is xterm but gnome-terminal isn't emulating one faithfully
07:48:02 <shapr> I'm using zsh, gnome-terminal, and screen in debian/unstable
07:48:18 <vegai> might be an issue with irssi 
07:49:05 <Marvin--> o3: yes and no, I like the idea of having a unix system while still being able to play blizzard games, true ;) but on the other hand, I don't want to leave the free software world, I really do want gnome to be as good as macosx
07:49:32 <Marvin--> shapr: idea! buy a mac, then you can play blizzard games without windows! Problem solved!
07:51:08 <o3> Marvin--: same.  but now i've got one, oh man, i am so not going back until the rest of the unix world catches up
07:51:53 <shapr> Marvin--: but I want open source
07:52:14 <o3> Marvin--: i have complete faith gnome/kde will get there in 5 years ... but for now, the mac just rules if you want something which Works
07:52:59 <Marvin--> shapr: I thought your vow was to not buy windows software :)
07:53:53 <o3> are you going to HIM, Marvin--?
07:53:57 <o3> (i've probably asked you this before)
07:55:05 <Marvin--> that's the one in Stockholm, right? No, I'm not, I'm trying to decide whether I should go to Uppsala simply for a vacation and to meet with "you guys" even if I don't attend the conference (because I can't afford it)
07:55:59 <o3> why uppsala instead of stockholm?  HIM is probably more relevant -- more haskell hackers, and it's free
07:56:55 <Marvin--> well, I know that a lot of people here are going to Uppsala
07:57:01 <Marvin--> and I've been to Stockholm, but not to Uppsala :)
07:57:17 * hdaume returns
07:57:18 <Marvin--> (granted, it was a long time ago, so I probably can't find my way around Stockholm any better than any of you)
07:57:53 <Marvin--> o3: plus, I'm guessing that it's easier to find cheap lodging at decent distance from stuff in Uppsala than in Stockholm
07:58:07 <o3> *nod*
07:59:05 <Marvin--> but if HIM is free, it might be fun to attend... how long is it? where in Stockholm? Got a web page?
07:59:39 <o3> http://cs-www.cs.yale.edu/homes/nilsson/HIM
08:02:13 <Marvin--> "Participation is by invitation. If you have not been invited yet, but feel that you should have been, then don't be shy: send a mail to one of the organizers.
08:02:15 <Marvin--> er
08:03:45 <shapr> yah, come to HIM
08:04:37 <o3> it can't hurt :)
08:05:25 <Marvin--> it can hurt my self-esteem!
08:06:07 <Marvin--> the name is kinda ambigous too, is it for people who implement haskell compilers/interpreters, or for people who implement stuff in haskell?
08:11:31 <Marvin--> well, I'm going home
09:48:50 * Igloo gets a ghc6 Debian tree hopefully ready to compile for sparc and watches haddock taking an age to compile
09:57:00 <shapr> it's the age of haddocks
09:57:04 <shapr> that comes after the age of men
09:57:55 <Riastradh> Blistering barncales in a thundering typhoon!
09:58:05 <shapr> tin tin?
09:58:11 <Riastradh> What else?
09:58:20 <Riastradh> Er, what else could it be?, even.
09:58:34 <d33p> w00f w00f
09:58:53 * shapr meows
09:59:06 * Riastradh longs for monads to be built in to Erlang.
10:00:12 <shapr> quick, fix it.
10:14:48 <shapr> hej andersca 
10:24:08 * Igloo hopes haddock is meant to take longer to compile than I think it does or ghc is going to take days
10:37:46 * shapr grins
10:51:29 <shapr> yay
10:51:50 <Igloo> ?
10:52:13 <shapr> I discovered something semiobvious about databases that I've been missing for at least a decade.
10:52:20 <hdaume> what
10:52:35 <shapr> about foreign keys, normalization, and programmatically inserting values
10:53:43 <shapr> problem: if you use a two column table to save your foreign keys (list of countries for example) it's a real pain to programmatically insert data, because you have to look up the key value for your country name
10:54:42 <shapr> solution: don't make two columns, just make the country name the only column and the primary key, whether it uses lots more space or not, at least you can easily programmatically insert data without having to do subqueries to lookup unique IDs
10:55:12 <shapr> same for many to many relationships, just create two columns and make the primary key both columns at the same time.
10:55:39 <hdaume> "whether it uses lots more space or not" is quite a qualification at times, though
10:55:51 <hdaume> (for instance on dbs with a few hundred million rows :P)
10:56:14 <hdaume> but in non-enormous cases, yeah, i agree
10:56:29 <shapr> I have to ask, is that standard database knowledge?
10:57:05 <hdaume> i don't know
10:57:12 <shapr> I don't either.
10:57:17 <shapr> maybe I should read a database book.
10:59:43 <Igloo> It'll be slower, too
10:59:59 <shapr> that's true, but faster to develop
11:00:25 <shapr> it would seem simpler to have a "do pointer twiddling" layer that gives me the best of both worlds when I want
11:00:41 <Igloo> I was about to suggest that  :-)
11:00:54 <shapr> I really have to fix HaskellDB
11:01:01 <shapr> license or not
11:01:08 <shapr> it would make my life easier.
11:01:31 <Igloo> Have you contacted the author about the licence?
11:01:34 <shapr> sure
11:01:40 <shapr> no response though
11:01:40 <Igloo> Presumably the issue is a lack of one?
11:01:43 <shapr> yup
11:01:46 <Igloo> Hmm  :-(   Who is it?
11:01:54 <shapr> Daan
11:01:58 <shapr> Daan the Maan ;-)
11:02:02 <Igloo> :-)
11:02:09 <Igloo> If it's been a while you could try again
11:02:45 <shapr> that's true
11:08:43 <Igloo> Ouch
11:09:22 <Igloo> Compiling haddock on the machine that does GHC in 2 hours took just over 2 mins. On vore it took 70.
11:09:39 <shapr> vore is sparc?
11:09:42 <Igloo> Yup
11:09:42 <hdaume> wow
11:09:54 <hdaume> Igloo: was this because of linking time?
11:10:06 <shapr> sounds like ghc6.2 might be out by the time the ghc6.0.1 package has built ;-)
11:10:13 <hdaume> hehe
11:10:24 <Igloo> So GHC would take 3 days...I hope that was largely due to GHC being slow as the GHC build's ghc-inplace might be better
11:10:32 <Igloo> hdaume: No idea
11:11:02 <hdaume> Igloo: if you're using standard ld it will take forever...if you can get it to used gld instead, you're much better off...there was a thread on one of the mls about this a few months back
11:11:06 <Igloo> It was getting about 1/4 of a CPU with about 1/4 the clock speed, and has less RAM, which would account for some of it
11:11:10 <hdaume> s/used/use
11:11:45 <Igloo> ld is GNU ld - this is Debian/sparc, none of your Solaris rubbish  :-)
11:11:52 <hdaume> oh yeah ;)
11:12:12 <hdaume> ...debian must just suck
11:12:13 * hdaume ducks
11:12:21 <Igloo> :-P
11:12:36 * shapr beats hdaume with a microsoft EULA printed on cardstock.
11:13:05 * hdaume sics laywers on shapr
11:13:18 <hdaume> misuse of microsoft product
11:13:41 <hdaume> sigh, one more month and we can't make the terribly easy microsoft jokes anymore
11:13:45 * shapr grins
11:14:02 <shapr> I hope you're having fun in the northwest
11:14:30 <hdaume> i am.  i actually really like it here.  i wish there were a good (relevant) university here; i would totally consider moving here post graduation.
11:14:39 <shapr> have you met Ashley Yakeley? I dunno if they have functional get togethers in your area
11:15:04 <hdaume> i haven't...i forgot he was from around here
11:15:53 <shapr> c'mon galoisconnections is right next door!
11:16:04 <hdaume> :)
11:16:07 <shapr> I'd *love* to hang out with those guys for awhile.
11:16:23 <shapr> actually, they have strong university ties
11:16:44 <shapr> with www.ogi.edu
11:17:21 <hdaume> yeah...it's too bad ogi doesn't have good nlp
11:17:31 <Igloo> nlp?
11:17:37 <shapr> natural lang processing?
11:17:39 <hdaume> natural language processing :)
11:17:44 <shapr> @fact nlp
11:17:46 <lambdabot> Nothing
11:17:50 <shapr> @fact natural language processing
11:17:55 <lambdabot> set natural to language processing
11:17:55 <shapr> oof
11:17:56 <shapr> @fact nlp natural language processing
11:17:57 <hdaume> hehe
11:17:58 <lambdabot> set nlp to natural language processing
11:18:02 <shapr> @delete natural
11:18:04 <lambdabot> Sorry, I don't know the command "delete", try "lambdabot: @listcommands"
11:18:08 <shapr> um
11:18:13 <shapr> @fact delete natural
11:18:14 <lambdabot> deleted natural
11:18:15 <shapr> aha
11:18:33 <hdaume> @fact delete delete
11:18:34 <lambdabot> deleted delete
11:18:37 * shapr grins
11:18:39 <hdaume> hrm...
11:18:45 <shapr> @fact delete
11:18:47 <lambdabot> Nothing
11:19:02 <shapr> I think I need to work on that.
11:19:14 <shapr> I remember thinking that was cheesy when I wrote it.
11:19:44 <shapr> hey hal, want write access to the haskell-libs darcs repo?
11:20:03 <shapr> hi meep 
11:20:07 <meep> hi
11:20:13 <shapr> have you been here before?
11:20:23 <meep> no, but i''m quite familiar with haskell
11:20:26 <hdaume> shapr: why would i want that?  :)
11:20:44 <meep> i'm just surprised there's people here ;)
11:21:14 <shapr> hdaume: well, you write haskell code, and it's a #haskell code-wiki sort of
11:21:15 <shapr> so..
11:22:28 <hdaume> shapr: okay, mebbe you should tell me what it is :)
11:23:08 <shapr> darcs is the source control system David Roundy wrote in Haskell
11:23:24 <hdaume> oh
11:23:30 <hdaume> okay, i misinterpreted your comment
11:23:36 <hdaume> erm question
11:23:46 <hdaume> i thought you wanted to know if i wanted to be able to commit changes to darcs itself
11:24:11 <shapr> since cvs on sf.net is sooo slow lately, I slurped the cvs tree of haskell-libs.sf.net onto my new box http://www.ScannedInAvian.org/
11:24:34 <shapr> it's much easier to give write access to darcs than to cvs
11:25:09 <hdaume> the "See the List" link is broken :)
11:25:10 <reffie> http://reffie.segfaulted.com/
11:25:11 <shapr> I don't have access to the darcs darcs repo
11:25:20 <shapr> oh, sorry about that
11:25:33 <shapr> http://www.ScannedInAvian.org/cgi-bin/darcs
11:25:40 <shapr> that's the user view of the repo
11:25:47 <Igloo> GHC6 is conspicuous by its ansence
11:26:13 <shapr> if you have darcs installed, you can grab the repo with "darcs get http://www.ScannedInAvian.org/repos/hlibs"
11:26:38 <shapr> and if you send me your GPG public key, I'll add it to the keyring of approved patchers
11:26:56 <shapr> and then you can push any changes you make to the repo
11:27:21 <shapr> I'm considering offering Haskell web hosting on ScannedInAvian.org :-)
11:27:23 <hdaume> i don't...i'll maybe get involved when i return to school...i'm too overloaded right now though
11:27:44 <shapr> sure, ask me if you want access.
11:27:51 <hdaume> ok
11:28:04 <shapr> meep: written any cool Haskell code lately?
11:28:17 <meep> i've written a c parser using Parsec, not sure why, lol
11:28:24 <shapr> that sounds nifty to me
11:28:36 <Riastradh> shapr, just about everything sounds nifty to you.
11:28:42 <meep> was going to try to write a simple compiler to compile it to Parrot bytecode, but i think that's too hard for me
11:28:49 <shapr> Riastradh: I disagree!
11:30:26 <shapr> meep: have you seen ctk and ctklight?
11:30:53 <meep> lemme see....
11:31:14 <meep> oh yeah i did see that
11:31:35 <meep> looks useful
11:31:54 <meep> ur involved with darcs then, shapr?
11:31:59 <shapr> just as a user
11:32:08 <meep> oh right
11:32:20 <shapr> I would like to extend it to do in-repo refactoring
11:32:36 <shapr> but that's something for my copious free time
11:32:43 <meep> lol
11:33:09 <shapr> if you haven't been here, the local touristy things are lambdabot, and HaWiki
11:33:15 <meep> so what is in-repo refactoring?
11:33:17 * meep ducks
11:33:36 <shapr> lambdabot is written in Haskell, sources available on sourceforge, though I'm thinking of switching to darcs
11:33:38 <meep> yeah i came here from HaWiki
11:33:41 <shapr> ah cool
11:33:53 <andersca> meep: can you write /me meep
11:34:04 * meep meep
11:34:08 <meep> :D
11:34:37 <meep> i did try compiling lambdabot, but i had trouble getting it working on FreeBSD
11:34:48 <shapr> if you refactor source from one file to another, cvs (or any other source control system) can't track the code across files
11:34:50 <andersca> yay
11:35:06 <shapr> what sort of trouble?
11:35:17 <shapr> I may be able to help.
11:35:22 <meep> i can't remember, i'll just try it again now if you like
11:35:25 <shapr> sure
11:35:29 <meep> does it use gtk2hs?
11:35:35 <shapr> not that I know of
11:35:43 <shapr> hircules does
11:35:51 <meep> oh, i was thinking of hircules, yeah
11:35:57 <meep> i'll try lambdabot then
11:36:53 <shapr> since darcs views a repository as just a collection of changes/patches, it would be easy to integrate it into a refactoring browser
11:36:58 <shapr> well, maybe not easy
11:37:49 <meep> cool
11:37:58 <meep> well if it was easy u'd write it in C ;)
11:38:15 <shapr> darcs has a token replace patch type
11:38:28 <shapr> I'd like to extend that to an AST rewrite patch
11:39:00 <shapr> but it would require darcs to parse any sources you want to apply that sort of patch to
11:39:08 <meep> oh right
11:39:26 <meep> completely, or could you get away with a simplified parser do u think?
11:39:49 <shapr> depends on what sort of refactoring you want
11:39:54 <meep> i see
11:40:10 <shapr> a complete parser would be best
11:40:41 <meep> C++ would be nasty :S
11:40:57 <andersca> Quidquid latine dictum sit, alturn viditur
11:41:54 <shapr> plus if you're going to have a parser in the source control system, you might as well store the parse trees rather than the sources, and go for Intentional Programming
11:42:13 <meep> then people could use their own formatring conventions i suppose
11:42:18 <shapr> it would make Ashley Yakeley happy though
11:42:20 <shapr> yes, as you said
11:42:42 <shapr> I prefer indentation, Ashley prefers braces and semicolons
11:43:07 <meep> i always find Haskell gets very arsey about 'where' clauses
11:44:39 <shapr> yah, complexi functions with multiple where clauses can be scary
11:45:00 <meep> but let just looks too imperative :(
11:45:15 <hdaume> i've never found where to be weird :)
11:45:34 <meep> i think it gets worse when ur in a do { ... } thing maybe
11:46:28 <shapr> hdaume: there's some scary nested multilevel where stuff in the chess source I think
11:47:25 <hdaume> perhaps some exists, but i think it's always possible (and not difficult) to not write it yourself ;)
11:47:40 <shapr> oh, speaking of which
11:48:09 <shapr> someone suggested to me that we have the opposite of an IOxCC
11:48:31 <shapr> where people submit one page of code, and are judged on elegance, expressiveness, etc
11:48:52 <shapr> I suspect Haskell would do well in that kind of contest.
11:50:07 <meep> the quicksort thing is always good
11:50:21 <meep> altho i don't think it's actually the best algorithm to use in haskell
11:50:44 <shapr> I wonder if I should start an ElegantSource page on HaWiki, where we put pointer to particulary elegant bits of Haskell
11:50:46 <hdaume> you can get an almost identical version of quicksort in Java
11:51:08 <shapr> any suggestions for extraspiffy bits of Haskell code?
11:51:17 <meep> anything with folds
11:51:20 <keverets> the sieve of erasmus?
11:51:44 <hdaume> Eratosthenes
11:52:01 <keverets> err, yeah, that.
11:52:03 <Riastradh> @prelude foldl
11:52:06 <lambdabot> *** "foldl" prelude "Haskell Standard Prelude Dictionary": text follows
11:52:06 <lambdabot> foldl
11:52:06 <lambdabot>   foldl ::  (a -> b -> a) -> a -> [b] -> a
11:52:06 <lambdabot>   foldl f z []      = z
11:52:06 <lambdabot>   foldl f z (x:xs)  = foldl f (f z x) xs
11:52:11 <shapr> you have some elegant source online?
11:52:11 <meep> actually, what about parser combinators
11:52:18 <shapr> yah, parser combinators are sexy
11:52:20 <meep> they're really neat
11:53:02 <kaol> @prelude foldr
11:53:05 <lambdabot> *** "foldr" prelude "Haskell Standard Prelude Dictionary": text follows
11:53:05 <lambdabot> foldr
11:53:05 <lambdabot>   foldr ::  (a -> b -> b) -> b -> [a] -> b
11:53:05 <lambdabot>   foldr f z []      = z
11:53:05 <lambdabot>   foldr f z (x:xs)  = f x (foldr f z xs)
11:53:13 <meep> lol
11:53:20 <meep> did someone say fold?
11:53:36 <shapr> I especially like Parsec
11:53:50 <meep> parsec's the only one i've tried, but it  seems good
11:54:02 <meep> gotta love them monads
11:54:08 <shapr> I came up with two more combinators for Parsec, manyN and manyNtoM
11:54:29 <shapr> they work like {m,n} in regexps
11:54:36 <kaol> umm, how does one parse the signature of foldl?
11:55:09 <meep> u mean how does a human do it?
11:55:17 <kaol> yes
11:55:24 <hdaume> foldl is a function which takes an element (a), a list of bs and a function to combine as with bs to give new as.  it returns an a.
11:55:30 <shapr> > foldl (+) 1 [1,1,1]
11:55:30 <shapr> 4
11:55:48 <Igloo> But not in that order
11:55:58 <shapr> @eval foldl (\x y . x + y) 1 [1,1,1]
11:55:59 <lambdabot> 4
11:56:03 <hdaume> right
11:56:39 <kaol> how would I get a function to sum the elements of a list with foldl?
11:56:52 <Riastradh> sum = foldl (+) 0
11:56:58 <hdaume> that sounds like homework :)
11:57:01 <kaol> thought so
11:57:03 <Riastradh> Oops.
11:57:06 <kaol> nah, I wish
11:57:10 <Riastradh> Was it homework, or just a random question?
11:57:18 <kaol> If they only had something that interesting in CS...
11:57:21 <kaol> no homework
11:58:05 <shapr> reffie: nice site, but there's no content yet...
11:58:15 <reffie> :P
11:58:26 <reffie> i dont know what to put
11:59:47 <shapr> what sort of projects do you work on?
12:03:59 <shapr> hi Heffalump!
12:04:04 <shapr> lambdabot loves you.
12:04:06 <Heffalump> 'lo
12:04:09 <Heffalump> he does?
12:04:12 <shapr> yes!
12:04:18 <Heffalump> does anyone know anything about greencard debs, btw?
12:04:26 <shapr> he's now much more dynamic and flexible because of you.
12:04:49 <shapr> I vaguely recall greencard debs long long ago
12:05:06 <shapr> but I'm not sure if that's correct
12:05:08 <hdaume> is "debs" (the 'e') pronounced as in "heads" or "green"?
12:05:11 <Heffalump> yeah, I keep seeing references to old ones, but I can't find any current ones
12:05:17 <Heffalump> I pronounce it as in "heads"
12:05:26 <shapr> yah, debian comes from the two founders, debra and ian
12:05:33 <Heffalump> I imagine it depends on how one pronounces "Debian", though
12:05:36 <shapr> I used to say "deeb ee an"
12:05:47 <Heffalump> I've heard some people pronounce it the way shapr just said, but I pronounce it as in "heads"
12:05:48 <shapr> but it's deb from debra, and ian from ian.
12:06:06 <Heffalump> I don't think debra was a founder, she was just ian's gf (now wife)
12:06:11 <shapr> well, ok :-)
12:06:38 <hdaume> good to know...i always (internally) pronounced it "d eeee bian"
12:06:39 <shapr> if you still have a girlfriend after starting a linux distro by yourself, she probably gave enough emotional, monetary, and moral support to count as a fonuder anyway :-)
12:06:43 * Igloo notices the way I pronounce it is the same as a short form of Debra (is that really spelt right?)
12:06:57 <Heffalump> anyway, I've made a deb of greencard for GHC, shall I stick it in haskell-experimental?
12:07:01 <shapr> YES
12:07:04 <shapr> is it 3.01?
12:07:07 <Heffalump> yes
12:07:11 <shapr> oh, extra spiffy :-)
12:07:24 <Heffalump> requires ghc 6.0.1-2 though, because I'm not sure about dependency issues so I went for the paranoid approach
12:07:40 <Heffalump> I'd really like to find what the situation is with other versions though
12:07:45 <shapr> maybe I can figure out how you've packaged greencard and do the same for the Xlib binding.
12:07:45 <Heffalump> (of greencard debs, that is)
12:07:48 <Igloo> Does greencard code get linked in?
12:07:55 <Heffalump> linked in in what sense?
12:08:17 <Igloo> I thought it was just a preprocessor rather than its code being linked into the executable you are building
12:08:30 <Heffalump> no, it has some code too
12:08:31 * shapr doesn't know
12:08:38 <Igloo> I guess it's possible the code it generates differes for different ghcs though
12:08:43 <Igloo> Ah, OK
12:08:49 <Heffalump> it installs a GHC package
12:09:05 <Heffalump> there really ought to be some policy on the subject of GHC packages, actually.
12:09:30 <Igloo> Yeah; that'll be OK in everything except a reinstall of ghc6
12:09:43 <shapr> yes
12:09:50 <shapr> let's make up something
12:09:55 <shapr> actually, you guys make up something
12:09:57 <shapr> I have no clue
12:09:57 <Heffalump> oh, yes, that'd be unfortunate.
12:10:09 <Igloo> So actually we need a way for libraries to register themselves even if they aren't going to be automatically built
12:10:19 * Heffalump warns that I did just throw the packages together in a hurry, so there may be rough edges
12:10:27 <Heffalump> shapr: are you in a position to actually test them properly?
12:10:32 <shapr> sure
12:10:41 <shapr> I built the Xlib bindings yesterday
12:10:42 <Heffalump> igloo: well, update-ghc or something was what I was thinking of
12:10:52 <shapr> after building greencard
12:11:14 <shapr> sounds like ghc-pkg data needs to be configuration files?
12:11:55 <Igloo> Yeah, exactly. I was already thinking of register-haskell for compilers and libraries for compilation and telling the compilers about them.
12:12:25 <Heffalump> oh, *ARSE*
12:12:28 <Igloo> My sole remaining bug (hurrah!) is a similar issue with hmake
12:12:31 <Igloo> ?
12:12:32 <Heffalump> dependency stuff is a mess here.
12:12:39 <Heffalump> we need ${ghcdeps}
12:12:59 <Heffalump> IM ${ghc:Depends}
12:13:10 <shapr> if SMs library registration thingy becomes popular, it'd be easier than separate deals for ghc-pkg and hugs 
12:13:19 <Igloo> To do what, Heff?
12:13:37 <Heffalump> well, currently the gc packages have:
12:13:44 <Heffalump> Build-Depends: ghc6 (=6.0.1-2), ghc6-prof (=6.0.1-2), help2man
12:13:46 <Heffalump> Depends: ${shlibs:Depends}, ghc6 (=6.0.1-2), ghc6-prof (=6.0.1-2)
12:13:57 <Heffalump> (I'm not sure if the -prof stuff is needed but cba to worry about it for now)
12:14:29 <Heffalump> anyway, so of course things just fail when I try to rebuild in the stable repository, which doesn't have that version of ghc
12:14:54 <Igloo> Ah, ISWYM. You can hack around it with calling dpkg and making a substvars in debian/rules if you want a temporary (automated) hack
12:15:04 <Igloo> You are using ghc6 not ghc to build, right?
12:15:11 <Heffalump> probably not
12:15:13 <Heffalump> should I be?
12:15:41 <Heffalump> do you have an example of how to do that to hand?
12:15:43 <Igloo> Probably
12:15:46 <Heffalump> why?
12:16:15 <Igloo> Give --with-ghc=ghc6 to configure if it's the same as other things I've seen
12:16:22 <shapr> hi Verbed 
12:16:25 <Heffalump> it doesn't have a configure, but I know how to do it - but why?
12:16:29 <Igloo> Because it should work on a machine with ghc5 and ghc6 installed and ghc pointing to ghc5
12:16:33 <Heffalump> oh, yes.
12:16:36 <Verbed> Hello
12:16:46 <Heffalump> ideally I'd just have a generic ghc dependency though.
12:17:10 <Heffalump> do ghc5 and ghc6 "provide" ghc?
12:17:13 * Igloo will need a ghc-pkg6 too, although you could find it in /usr/lib/ghc6-* if you want another temporary hack
12:17:24 <meep> has ghc6 totally changed the organisation of the Posix libraries?
12:17:34 <Heffalump> I think it moved them.
12:17:38 <Igloo> If you have a generic ghc dependency then you need to get the depends line right automatically
12:17:41 <shapr> you need to use System.Posix I think
12:17:46 <Heffalump> igloo: yeah :(
12:17:57 <meep> i was trying to compile lambdabot 1.0, but it seemed to expect the ghc5 organisation. has that changed in the latest cvs?
12:17:57 <Igloo> Provides: haskell-compiler, ghc
12:18:07 <Heffalump> meep: it has changed, yes
12:18:11 <meep> :)
12:18:15 <Heffalump> it conditionally compiles for both ghc5 and ghc6 now
12:18:27 <Igloo> Really you probably need binary packages for both or a source package that compiles as appropriate using the register-haskell we haven't got  :-)
12:18:29 <meep> ok, i'll go cvs it
12:18:30 <Heffalump> (though I haven't maintained the ghc5 bits so I'm not certain they'll work right)
12:19:07 <Heffalump> is it ok if I just upload these greencard packages to unstable as-is, and sort out this dependency crap later?
12:19:16 <Igloo> I should talk to the library people and find out what's going on
12:19:34 <Igloo> If the binaries work as is then I'd say it's fine for HE unstbale
12:19:35 <shapr> SyntaxPolice is the main man for LIP
12:19:40 <Igloo> unstable even
12:20:04 <Heffalump> right, uploaded
12:21:15 <Igloo> Anyone heard anything from Brent recently OOI?
12:21:25 <shapr> Brent?
12:21:35 <Igloo> Fulgham - nhc98 maintainer
12:21:39 <shapr> oh
12:21:40 <Heffalump> right. So what I should do is build-depend on ghc, figure out whether ghc is ghc5 or ghc6, get the current package version from dpkg, and make a (binary) dependency on that?
12:21:51 <Igloo> Yup
12:21:55 <Heffalump> shit, I would still need to call the correct ghc-pkg.
12:21:58 <Heffalump> lovely.
12:22:09 <shapr> meep: if you have darcs installed, the haskell-libs darcs repo is http://www.ScannedInAvian.org/repos/hlibs
12:22:25 <Igloo> That's /usr/lib/ghc-[56].*/ghc-pkg or similar
12:22:31 <Igloo> where [56] is what you worked out
12:22:31 <meep> shapr: ok, i'll try that
12:22:35 <Heffalump> yes, but it needs an environment setup for it
12:22:42 <Igloo> huh?
12:22:51 <Heffalump> #!/bin/sh
12:22:51 <Heffalump> GHCPKGBIN="/usr/lib/ghc-6.0.1/ghc-pkg.bin";
12:22:51 <Heffalump> PKGCONFOPT="-f /usr/lib/ghc-6.0.1/package.conf";
12:22:51 <Heffalump> # Mini-driver for ghc-pkg
12:22:51 <Heffalump> exec $GHCPKGBIN $PKGCONFOPT ${1+"$@"}
12:22:57 <Heffalump> is what /usr/bin/ghc-pkg does
12:22:58 <shapr> meep: the lambdabot sources in hlibs may require ghc6
12:23:13 <Heffalump> has hlibs diverged from CVS?
12:23:18 <Igloo> That's a symlink to the one in /usr/lib
12:23:23 <Heffalump> (apart from the random trivial crap we were checking into it)
12:23:26 <Heffalump> oh. Duh :-)
12:23:36 <shapr> Heffalump: no, just that anon cvs SF checkouts are extremely flooded
12:23:37 <Heffalump> sorry :-)
12:23:47 <kaol> @eval (\x -> foldl x 1 [1,1,1]) (+)
12:23:48 <lambdabot> (line 1, column 5):
12:23:48 <lambdabot> unexpected "-"
12:23:48 <lambdabot> expecting identifier or "."
12:23:52 <meep> is that why u often get those end of file messages?
12:23:58 <Heffalump> shapr: then why do you say it might require ghc6? Just because of what I said earlier?
12:24:01 <shapr> kaol: @eval uses the period instead of .
12:24:02 <shapr> Heffalump: yes
12:24:05 <Heffalump> ok
12:24:51 <Heffalump> hmm.
12:25:09 <Heffalump> Really I ought to make greencard-ghc5 and greencard-ghc6, so that people with co-existing installations can have both.
12:25:22 <Heffalump> (currently it's greencard-ghc, and I had plans to make greencard-hugs)
12:27:11 <Igloo> Heff: From the same source?
12:27:17 <Heffalump> yes
12:27:26 <Heffalump> I'll need to move the package to using dbs or something first, though
12:27:34 <Igloo> Someone should file a bug to make lndir a separate package
12:27:35 <Heffalump> so that build can make multiple built trees
12:27:48 <Heffalump> separate from X?
12:27:55 <Igloo> xutils or whatever it is
12:28:45 <Heffalump> if I upload a new package that changes the binary packages it generates, will the binary packages from the old package be deleted?
12:29:18 <Igloo> Try it and see  :-)
12:30:02 <Darius> well once I make this dynamically extensible parser thing work then the '.' can be changed to a '->'.  Though I have thought about changing that recently.
12:35:17 <Igloo> Bah, if "MUT (34.74 elapsed)" in -Rghc-timing output is time taken then it does indeed seem to be 35 times slower
12:36:11 * Marvin-- has new GoT cards :) pleasure...overload...
12:36:14 <Marvin--> oooh, shiny
12:44:14 <Heffalump> pkg-gencontrol: warning: unknown substitution variable ${shlibs:Depends}
12:44:19 * Heffalump wonders what's going on there
12:44:52 <Igloo> Was it empty?
12:45:13 <Igloo> If so you can ignore the warning, but if it produces an empty Depends line then it'll break apt
12:45:21 <Heffalump> it quite probably was empty, yes
12:45:31 <Igloo> (so remove the line from debian/control)
12:46:23 <Marvin--> grmbl
12:46:30 <Marvin--> four of 18 rares were useless to me
12:46:34 * Marvin-- sighs
12:47:02 <Heffalump> oh, I see why it was empty. Another mistake.
12:47:30 <Igloo> :-)
12:47:35 <Igloo> Marvin: You can't trade them?
12:47:38 <Marvin--> Heffalump: do you need a larting? ;=)
12:47:43 <Marvin--> Igloo: I hope I can
12:48:09 <Heffalump> why would I need a larting? :-p
12:48:19 <shapr> hi tom!
12:48:24 <Heffalump> 'lo
12:48:24 <tmoertel> hi shapr!
12:48:27 <shapr> what's up?
12:48:43 <tmoertel> wrapping up work in anticipation of a vaction
12:48:51 * tmoertel could use a break
12:48:56 <tmoertel> what's up w/ you?
12:49:04 <shapr> what are you doing for your vacation? coming to ICFP? :-)
12:49:15 <shapr> at the moment I'm reading about call/cc as explained to elisp programmers.
12:49:23 <Marvin--> Heffalump: you never know ;)
12:49:25 <tmoertel> shapr: I wish!  I'm visiting the in-laws w/ my wife.
12:49:36 <shapr> visiting people can be fun too
12:49:37 <Marvin--> Heffalump: I guess I could flame you until you need a larting...
12:49:59 <Heffalump> how would flaming me make me more in need of a LARTing?
12:50:12 <tmoertel> shapr: yes.
12:50:24 <shapr> hey tom, I've copied haskell-libs cvs tree into a darcs repo on http://www.ScannedInAvian.org/ if you'd like to try it, I can give you commit access from your public GPG key
12:50:24 <Marvin--> bah, never mind :-/
12:50:53 <tmoertel> I haven't tried Darcs yet.  How do you like it?
12:51:04 <shapr> haven't used it enough to have much of a reaction
12:51:07 <shapr> it seems fine
12:51:22 <shapr> I like the theory of patches behind it
12:51:25 <Heffalump> the last LART I remember getting was for breaking OxLUG's email for several hours
12:51:25 <tmoertel> notice any of the slowness alluded to in the docs ?
12:51:32 <shapr> no, I haven't
12:51:50 <shapr> traffic on the user list implies that low speed only comes from large inputs
12:51:59 <shapr> and that splitting up inputs fixes the slowness
12:52:06 <tmoertel> I also like the theory.  Even if it isn't rigorous, it's seems like more thought that many CVS-replacements are built upon.
12:52:18 <Heffalump> yes, definitely
12:52:35 <shapr> someone tried to add the fptools tree in its entirety at once, and the process died after ~110 hours
12:52:53 <Heffalump> hehe
12:52:56 <tmoertel> shapr: lol!
12:52:57 <shapr> with smaller chunks, it took less than an hour
12:53:07 <Marvin--> shapr: well, bad code can be written in any language :-)
12:53:25 <tmoertel> is the run time quadratic or exponential w.r.t. input size ?
12:53:36 <shapr> no idea
12:53:41 <Heffalump> shapr: did you download those greencard packages? (if not, then don't for a bit)
12:53:56 <shapr> no, not yet
12:55:37 <Heffalump> damn, it didn't delete the greencard-ghc package
12:55:54 <Heffalump> shapr: make sure you apt-get greencard-ghc6, not greencard-ghc
12:55:57 <shapr> ok
12:56:32 * tmoertel must run to the hardware store to get garden supplies
12:56:34 <Marvin--> why should it delete the greencard-ghc package?
12:56:41 <shapr> tmoertel: have fun
12:57:03 <Heffalump> because I uploaded a new source package with the same name as the old source package, but the new one didn't provide that binary package
12:57:27 <Heffalump> so I'd like the old binary package to be gone
12:58:39 <Marvin--> er, to the debian archive?
12:59:11 <Heffalump> no, to haskell-experimental
12:59:37 <Marvin--> ah, because I'm 99% sure obsolete binary packages get removed automatically in the debian archive
12:59:52 <Heffalump> I imagine dinstall might be a bit smarter than mini-dinstall.
13:02:40 <Marvin--> katie does lots of trickery yes
13:03:21 <Heffalump> hmm. Is there a nice way to use substitution variables in postinst/prerm scripts?
13:09:37 <Marvin--> no, that's implemented in gencontrol, isn't it?
13:09:54 <Marvin--> I generally just use sed for it in the configure target
13:10:16 <Heffalump> configure target?
13:10:32 <Marvin--> debian/rules configure
13:10:46 <Heffalump> I hope that's not compulsory :-)
13:11:21 <Marvin--> no, it's not
13:14:47 <Marvin--> gah, 30 + 25 + 14 = 60 is an equation that definitely don't add up
13:37:32 <Heffalump> aargh, how do I get dpkg to tell me the version of something?
13:39:28 * Heffalump uses COLUMNS=500 dpkg -l, ICK
13:39:42 <Marvin--> uh, dpkg -s?
13:40:01 <Heffalump> ah, yes, that's a big nicer
13:40:52 <Heffalump> s/big/bit
13:41:16 <Marvin--> /topic Debian
13:41:18 <Marvin--> oops :)
13:43:05 * Marvin-- ponders what cards to take out of his new deck to get it closer to the ideal 60 cards
13:43:36 <Heffalump> /topic some weird card trading business
13:44:05 <Verbed> MTG, most likely.
13:45:42 <Marvin--> Verbed: no, Game of Thrones
13:47:33 * Heffalump gets the GHC-version-figureouter working and uploads greencard-ghc6 to HE stable too
14:25:27 <Marvin--> heh, ztv had an ad about themselves, I think they wanted to hire people, and referred to teletext page 666
14:33:24 <shapr> I just saw the Tenacious D HBO special on svt2, it was cute.
14:33:31 <andersca> :)
14:34:01 <Marvin--> the what and the what?
14:34:27 <shapr> "Tenacious D" the band
14:35:47 <Marvin--> yeah, but "HBO"?
14:36:22 <andersca> channel network
14:36:23 <andersca> right?
14:36:46 <Smerdyakov> Cable television channel, so I don't know if you'd call it a "network."
14:37:37 <Heffalump> do I need ghc's profiling libraries installed to build other profiling libraries?
14:38:41 <andersca> Smerdyakov: ok
14:39:58 <Igloo> I'd have thought so for inlining to work properly. You could try it and see.
14:40:21 * Darius doesn't really remember how to play "Fuck Her Gently" on the guitar anymore.
14:41:59 <Heffalump> oh, it'll need it for the hi files
14:42:08 * Heffalump removes the dependency from the binary package, anyway
14:42:09 <Marvin--> Darius: too...bad...
14:54:08 * Darius should probably talk to Daan about factoring apart Parsec.
14:54:48 <Heffalump> what into?
14:55:45 <Darius> The parts that are completely parser implementation independent (e.g. just about all of Parsec.Combinator) and Parsec dependent parts.
14:56:10 * Heffalump is looking forward to Doaiste Swierstra and John Hughes' paper on parsing with Arrows (I think) at ICFP
14:56:38 <Darius> I can think of at least two (three counting me :P) projects that more or less copy & paste large chunks of Parsec.
14:58:14 <Marvin--> Heffalump: you think you look forward to it? :)
14:58:33 <Heffalump> no, I think it's about parsing with Arrows :-p
15:14:20 * shapr boings
15:14:47 <shapr> Darius: what do you mean? who redoes parsec?
15:15:21 <shapr> oh
15:15:26 * shapr reads scrollback
15:17:06 <shapr> yah, parsec is great
15:18:17 * Marvin-- doesn't really follow shapr's conversation logic :)
15:18:49 <Heffalump> you have to view shapr as a massively parallel non-deterministic process
15:18:53 <Heffalump> he makes a lot more sense that way :-)
15:18:58 <shapr> I think that's an effective viewpoint
15:19:03 * shapr laughs
15:19:49 <shapr> isn't everyone like that though?
15:19:54 <Igloo> Can we make him deadlock?
15:20:02 <shapr> sure, take away my caffeine.
15:20:28 <Marvin--> Igloo: even more interesting, can we make him *livelock*?
15:20:42 <shapr> what's that?
15:21:08 <Marvin--> the way I understand it, a deadlock is when two processes are waiting for each other to release some lock they're interested in
15:21:24 <Igloo> If you refine   while(true) {}    then you are livelocked
15:21:31 <Marvin--> livelock is when the program loops because it fails to do something repeatedly
15:21:35 <shapr> oh
15:21:48 <Marvin--> for example, many broken solutions to the dining philosophers involve livelocking
15:21:48 <Igloo> If you refine   STOP    then you are deadlocked
15:21:49 <Heffalump> so a deadlocked program that used spinlocks would actually be livelocked?
15:22:03 <shapr> I think that happens to me when I can't check my email.
15:22:28 <Igloo> I guess they map quite well to being dead and being in a coma, except for being able to come back from both
15:22:31 <Marvin--> "Okay, I got the left fork, but the right fork ain't available, so I'm going to put down the left fork and try again. Okay, I got the left fork, but the right fork ain't available. ..."
15:23:00 <Igloo> I think so, Heff, but I can't remember how spinlocks work
15:23:02 <Heffalump> as opposed to "Okay, I got the left fork, let's wait for the right fork", which would be deadlock
15:23:23 <Heffalump> igloo: while(lockunavail) {}, roughly
15:23:36 <Igloo> Ah, yes then
15:26:39 <shapr> do you guys have parallel conversations in real life too?
15:27:52 <Marvin--> oh dear, now I've done it
15:28:01 <shapr> ?
15:28:19 <Marvin--> Wile_E wanted to ask me some questions about cdebconf and I was daft enough to say "go ahead" :)
15:28:39 <shapr> yay
15:31:40 <shapr> speaking of parallel processes, I wonder how Nepal is doing.
15:32:02 <Darius> shapr: Parsek and the monadic parser with Pappy, as well as probably others and homebrew projects.
15:32:35 <shapr> where would you cut Parsec to factor out common code in those?
15:32:42 <Marvin--> Darius: uh, well, isn't Parsek another implementation of basically the same interface that Parsec has? Aren't they very different under the hood?
15:32:57 <Heffalump> shapr: wdym? (re parallel conversations in real life)
15:33:03 <Darius> Yes, but large chunks don't rely on those differences.
15:33:15 <shapr> Heffalump: as in carrying on multiple conversation at once.
15:33:17 <Darius> Parsek copied and pasted a good chunk of Parsec
15:33:25 <Marvin--> Darius: well, true, but last I looked, Parsek didn't provide a *lot* of them ;)
15:33:31 <shapr> listening to one person while speaking to another, or listening to two people at the same time
15:33:48 <Marvin--> shapr: hey, I'm a guy, I can't do more than one thing at the same time
15:33:54 <shapr> it's much harder to speak to more than one person at once.
15:34:18 <Marvin--> (does this suggest that SMP systems are female and single-processor systems are male?)
15:34:30 <shapr> I dunno, I'm definitely male.
15:34:32 <Heffalump> errm, on IRC yes, IRL no
15:34:46 <Darius> "A part of the code (the parser combinators like "many") is simply
15:34:47 <Darius> taken from Daan's original code. I hope he doesn't mind :-)
15:34:50 <Darius> "
15:34:53 <Marvin--> Darius: yeah
15:35:12 <Marvin--> Darius: but Parsec (at least in ghc) provides a big chunk of other modules with other stuff too
15:35:35 <Marvin--> Heffalump: yes and no, depends on whether we mean different topics or the same topic
15:35:37 <Darius> I imagine many derived parsers would work with just about anything that provided MonadPlus.
15:35:57 <shapr> what does MonadPlus do in Parsec?
15:36:02 <shapr> dup?
15:36:08 <shapr> or fail?
15:36:09 <Marvin--> Heffalump: I would argue that it's easier to keep up two different conversations in IRC than IRL
15:36:11 * shapr looks at the docs
15:36:19 <Heffalump> Marvin--: well yes
15:36:23 <Heffalump> that's why I work that way :-)
15:36:28 <Marvin--> heh
15:36:49 <Marvin--> we have an internal company mud at Strakt, that's how *we* work :)
15:36:54 <shapr> mzero mplus is fail and ?
15:37:04 <Marvin--> heck, it takes several seconds to go down the hall to someone else's office to, y'know, *talk* to them
15:37:11 <Darius> <|>
15:37:14 <shapr> oh
15:37:20 <shapr> ok
15:37:46 <Marvin--> granted, some people at the office use the mud more than others :)
15:38:19 <shapr> that doesn't seem to naively map to plus in my head.
15:39:15 * Igloo reads up a bit
15:39:32 <Igloo> I think sometimes I have conversation stacks, but not more than about 2 levels deep
15:39:58 <Darius> + in various contexts means one or the other.  For example, Either A B is often represented as A+B.
15:39:58 <shapr> I think my conversations are often persistent over very long periods of time
15:40:11 <Marvin--> shapr: think union
15:40:41 <shapr> I recently saw toby knutsen(?) again on #emacs, two years ago he'd been trying to get speedbar to run in the same window. Since then, I saw ECB do it, so I told him about it when I saw him again.
15:40:48 <Darius> Marvin--: I bet good chunks of Parsec.Token can be copied to Parsek.  Those are the more convenient to use, annoying to define ones.
15:41:10 <Marvin--> shapr: A U B is an "additive" operation, but it also means "either in A or in B"
15:41:18 <shapr> oh
15:41:26 <shapr> that makes more sense when you put it that way.
15:42:12 <Darius> in other contexts, * (usually by juxtaposition) is /\ (and) and + is \/ (or)
15:42:34 <Darius> (which is also related to intersections and unions)
15:44:52 <shapr> what are the 'major' monad classes?
15:45:17 <shapr> all the ones under Control.Monad ?
15:45:49 <Marvin--> sleep
16:44:18 * Cale is away: dinner
17:02:18 * Igloo wonders why DsMeta.o is getting built in stage1
17:24:41 * Pseudonym yaens
17:24:59 <Heffalump> morning
17:25:04 <Pseudonym> Morning.
17:25:13 * Pseudonym gets into work at 10:30am
17:25:17 <Pseudonym> I like working at a university.
17:25:21 <Heffalump> that's a bit early
17:25:42 <Pseudonym> True, however, my boss gets in at 11 on most days.
17:25:51 <Pseudonym> I figure getting in before him is a good career move.
17:26:05 <Heffalump> you brown-noser you
17:26:27 <Pseudonym> Yeah, I'm waking my way to the top.
17:27:53 <d33p> s/waking/?
17:28:10 <Pseudonym> As in waking up.
17:28:20 <d33p> :\
17:28:30 <Pseudonym> As opposed to sleeping one's way to the top.
17:28:44 <Pseudonym> I really shouldn't try jokes like this until I've finished my first coffee.
17:35:29 <Igloo> Ganesh thought I was mad when I got in at 8pm the other day
17:38:50 <Pseudonym> That largely depends.  Did you get a lot of hacking/theorems/whatever done the night before?
17:38:56 <Pseudonym> If so, you're not mad, you're just productive.
17:39:52 * Igloo has decided I'm on holiday for a bit while I do GHC porting
17:40:12 <Pseudonym> GHC porting is also productivity of a sort.
17:40:25 <Pseudonym> Who here knows stuff about GHC's code generator?
17:40:46 <Heffalump> Igloo
17:40:57 <Igloo> No I don't
17:41:14 <Heffalump> well, you should, so try to answer whatever Pseudonym wants to know and you'll learn ;-)
17:41:18 <Pseudonym> I'm curious what GHC does about saving variables across evals.
17:41:21 <Igloo> :-)
17:41:26 <Pseudonym> :-)
17:41:39 <Pseudonym> Does it save them on the stack or in an environment?
17:41:55 <Igloo> No idea
17:42:01 * Pseudonym nods
17:42:14 <Pseudonym> I ask because the Mercury group produced a really interesting paper on this topic recently.
17:42:22 <Pseudonym> And it seems to me that their approach might work well in GHC.
17:42:43 <Heffalump> what's the paper?
17:43:09 <Pseudonym> Hang on.
17:43:15 <Pseudonym> http://www.cs.mu.oz.au/research/mercury/information/papers.html
17:43:24 <Pseudonym> It's the one called "Using the heap to eliminate stack accesses".
17:43:34 <Pseudonym> Some of isn't relevant to GHC, but some is.
17:44:11 <Pseudonym> Mercury pretends to be a kind of sequential language, so you have to worry about things like making sure that variables are in the right places after if-then-elses.
17:44:15 <Heffalump> oh, I heard that talk
17:44:21 <Pseudonym> Oh?
17:44:23 <Heffalump> pity I can't remember any of it since it was right next to my own talk there :-)
17:44:24 <Pseudonym> What did you think?
17:44:27 <Pseudonym> Ah. :-)
17:44:35 <Pseudonym> Want a precis?
17:44:41 <Heffalump> I'll look at the paper
17:44:44 <Pseudonym> OK.
17:45:16 <Pseudonym> Apparently this sped up the Mercury compiler by 12% _and_ made the code smaller.
17:45:31 <Pseudonym> At an overhead of 1-2% more compilation time.
17:45:45 <Pseudonym> That sounds like a win-win-win kind of thing to me.
17:47:46 <Igloo> win-win-lose surely  :-)
17:48:08 <Pseudonym> Well, win-win-irrelevant.
17:48:13 <Igloo> :-)
17:48:22 <Pseudonym> Actually...
17:48:33 <Pseudonym> I wonder if the extra 1-2% compilation time factors in the 12% speedup.
17:48:44 <Pseudonym> They don't mention this in the paper.
17:48:51 <Igloo> I doubt it
17:48:55 <Pseudonym> I doubt it too.
17:48:59 <Pseudonym> So it _is_ a win-win-win!
18:32:06 <Pseudonym> I have way too much time.
18:32:27 <seafood> Has anyone here tried profiling a program that uses Template Haskell?
18:46:30 * Heffalump swears at make
18:48:25 <Igloo> :-)
18:51:52 <Pseudonym> host% make fsck you
23:39:21 <andersca> a working class marvin
23:39:25 <andersca> or should I say __class__
23:40:22 * Marvin-- groans
