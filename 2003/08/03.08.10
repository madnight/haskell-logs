04:24:11 <meep> hi, could anyone help me out with state monads?
11:39:48 <YveDeLarc> hi
11:40:02 <hdaume> hello
11:44:01 <earthy> ah... home sweet sweltering home
12:38:41 <andersca> hi marvin with new dns
12:39:06 <Marvin--> with wha...?
12:39:22 <Marvin--> huh, cool, I didn't know
12:39:38 <Marvin--> how am I supposed to know when they don't send mails about these things ;-)
12:40:44 <Marvin--> this is good, much shorter
12:41:32 * andersca has carbon.csbnet.se now
12:43:48 <Marvin--> najs
12:46:39 <Marvin--> andersca: did you see my complaint about nautilus and autofs? :/
12:47:27 <andersca> yeah, I bet there's a bug filed about it
12:47:56 <Marvin--> I didn't find one, so I filed one
12:48:06 <andersca> oh, coolo
12:48:11 <Marvin--> http://bugzilla.gnome.org/show_bug.cgi?id=119488
12:48:41 <Marvin--> though it would be even better if there were "shortcuts" to things like cd-rom, floppy et.c. in the sidebar
12:50:28 <Marvin--> another nifty thing would be to be able to right-click on a directory that's in /etc/fstab as 'user,noauto' and have it mounted
12:51:46 <andersca> we do have that, in the desktop menu
12:52:05 <Marvin--> desktop menu?
12:52:12 <Marvin--> oh, when nautilus manages the desktop
12:52:13 <andersca> yeah
12:52:18 * Marvin-- is starting out slow and using nautilus standalone :)
17:51:35 <Pseudonym> @yow
17:51:35 <lambdabot> Yow!  Did something bad happen or am I in a drive-in movie??
20:08:38 <flippo> @yow
20:08:39 <lambdabot> I'm wet!  I'm wild!
20:09:52 <Verbed> @yow
20:09:52 <lambdabot> MY income is ALL disposable!
21:46:12 <Pseudonym> Hmmmmm.
21:46:36 <Pseudonym> This is probably the wrong place to ask, but has anyone here done a lot of multithreaded programming in non-declarative languages?
21:47:46 <Pseudonym> Or even in Haskell, I guess.
21:49:46 <vegai> I have been brainwashed to think that threads are often evil
21:50:30 <Pseudonym> Yes, I'm trying to disprove this.
21:50:40 <Pseudonym> Or at least that threads are often less evil than the alternative.
21:50:43 <Darius> observable concurrency is often evil (and often just right), non-observable concurrency is perfectly fine.
21:51:00 <Pseudonym> Here's the thesis which I am trying to disprove, but haven't so far:
21:51:37 <Pseudonym> It's very, very rare to find a deadlock situation which you can't see coming a mile off.
21:51:58 <Pseudonym> In other words, it's very, very rare to "accidentally" write a deadlock.
21:52:03 <Darius> At what granularity?
21:52:11 <Pseudonym> At any granularity.
21:52:33 <Pseudonym> Generally speaking, when you write a deadlock into your code, you knew that you probably had beforehand.
21:53:03 <Pseudonym> Put another way: the overwhelming majority of deadlocks come as no surprise.
21:54:14 <Pseudonym> Incidentally, on threads being evil: I have a strong suspicion that most "synchronisation" problems are actually encapsulation problems.
21:54:49 <Pseudonym> For example, race conditions tend to happen because the data you're trying to protect isn't properly encapsulated.
21:55:12 <Pseudonym> We Haskell programmers don't have this problem, of course.  We don't have any global state to screw up. :-)
21:55:41 <Darius> Of course, not. *hides unsafePerformIO $ newIORef foo*
21:55:51 <Pseudonym> That's actually thread safe.
21:56:01 <o3> Pseudonym: i think it really depends on the level of the programmer
21:56:08 <Pseudonym> o3: I think that's true.
21:56:21 <o3> Pseudonym: (this is with regard to seeing deadlocks coming a mile off)
21:56:30 <Pseudonym> But I think my thesis still holds because newbie threads programmers aren't exactly going to write transaction-safe RDBMSes first off, are they.
21:56:52 <o3> Pseudonym: until i did studied concurrency in a subject at uni, i had no idea how i wrote _anything_ multithreaded which worked at all :)
21:57:17 <Pseudonym> Fair enough.
21:57:36 <Pseudonym> Obviously I don't expect perfection, but I'd want them at least to know what they were doing. :-)
21:57:57 <o3> Pseudonym: yes, agreed.  i think that if you don't know the underlying techniques and concepts involved in currency (semaphores, condition variables) to a reasonable degree, it's really easy to shoot yourself in the foot
21:58:07 <Pseudonym> But similarly, if someone were new to Haskell, I wouldn't expect any of their Haskell code to work at all either. :-)
21:58:25 <Darius> After typechecking?
21:58:26 <Pseudonym> So I don't think that's an inherent problem with threading.
21:58:33 <Pseudonym> Darius: Yes, even after typechecking.
21:58:50 <Pseudonym> Because most newbie Haskell programmers don't put type declarations on things, the typechecking doesn't necessarily help.
21:59:20 <Pseudonym> After type checking, at least you know your code will be _consistently_ wrong.
22:00:39 * Darius thinks he always put top-level type declarations, but he's not very typical in most respects.
22:02:47 * Darius also had one of those, "once it typechecks, it just works" moments recently.
22:03:01 * Pseudonym laughs
22:03:27 <Pseudonym> Anyway, I still haven't seen anything to disprove my thesis, although I will amend it to require a minimum level of competence.
22:03:36 <Pseudonym> Obviously you have to know what deadlock _is_ first.
22:03:45 <Verbed> #trivia anyone?
22:03:53 <Pseudonym> What _is_ #trivia?
22:04:18 <Verbed> If you want a Matrix quote, look elsewhere.
22:05:13 <Pseudonym> #trivia is not a source of Matrix quotes.  Got it.
22:05:26 <Pseudonym> That explains everything.
22:05:28 <Pseudonym> :-)
22:06:02 * Verbed sighs
22:08:25 <Verbed> #trivia is an intellectual sinkhole, it feeds on time, being unable to synthesize itself the appropriate nutrients for survival.
22:08:31 <Verbed> Come, join me there.
22:08:38 <Pseudonym> No, I'm at w*rk.
22:08:48 <Pseudonym> Sadly I have no time to feed it.
