00:02:53 <Darius> ah, good I haven't read this ("Tool support for Refactoring Functional programs")
00:16:29 <Pseudonym> Good to have something to read.
00:16:47 * Pseudonym will read "Computation of Gauss-Kronrod Quadrature Rules" on the train on the way home
00:22:29 * Darius should add a linear type system to his SLC interpreter. That'd be interesting.
00:27:08 <Pseudonym> Time to go home.
00:27:11 <Pseudonym> Have a good weekend.
02:16:52 <Lor> Greetings from ICFP.
02:17:08 <andersca> woo
02:17:20 <Lor> Hi, andersca.
02:17:47 <Lor> It's me, nether@#gimp.
02:18:56 <andersca> wow
02:18:57 <andersca> hey dude
02:20:14 <Lor> Shae sortakinda made me promise to visit here.
02:21:16 <andersca> you know shae?
02:21:25 <Lor> I met him in Uppsala.
02:21:37 <Lor> And lotsa other people, too.
02:22:02 <andersca> cool
02:22:06 <Lor> Very.
05:52:00 <mvw> hi, icfp should be over, anyone knows why the contest results aren't online?
06:05:18 <mvw> hi, icfp should be over, anyone knows why the contest results aren't online?
06:06:15 <elmex> is there some way to use the Maybe monad with some kind of error-message for the Nothing-case? i want to make less indenting with such cases:
06:06:18 <elmex>      case symtbl of    
06:06:21 <elmex>        Nothing   -> error "Object is not a symbol table"
06:06:24 <elmex>        Just stbl -> case ... of
06:10:18 <noshadow> What about writing an myeval Maybe a | Nothing = error "blub" | Just x = x ?
06:11:26 <elmex> hm
06:11:47 <elmex> just found something else ;)
06:54:37 <whee> heh, browsing the haskell wiki is a great way to get confused
07:02:52 <Cale> Yeah, I find that ignoring the bits that don't make sense yet helps. :)
07:17:51 <ski> Cale : R U there ?
09:09:58 * Heffalump arrives
09:14:59 <hdaume> hey heff
09:24:25 <Heffalump> heya
10:11:08 * ski sighs
10:12:41 <Heffalump> because?
10:13:24 <ski> Heffalump : almost the whole system (except irc :) seems to have hanged @ here ..
10:13:56 <Heffalump> ah
10:14:32 <ski> Heffalump : more specifically the local network/file system
10:31:01 <esap> Hmm.. is there somewhere a good treatment of circular data structures and how to use them in Haskell?
10:31:35 <ski> esap : the wiki has a page called something like "tying knots" ...
10:33:43 <esap> oh but that page seems to miss the point :-) The most useful operation for the circular data structures is somehow missing :-)
10:33:52 <Heffalump> the operation being?
10:33:57 <ski> esap : which ?  
10:34:16 <ski> esap : testing for aliasing/been here before ?
10:34:22 <esap> class (Functor s) => DataStructure s p  | s -> p where { apply :: s a -> p -> a }
10:35:02 <Heffalump> oh, that's not possible
10:35:04 <ski> huh ?
10:35:11 <Heffalump> not with implict circularity, certainly
10:35:23 <Heffalump> you'd break referential transparency if you could test for that
10:35:26 <esap> I have already implemented that function for several types.
10:35:43 <Heffalump> IM what ski said.
10:35:44 <ski> i don't get what this class is meant for ..
10:36:05 <Heffalump> you can't test for aliasing or been here before with an implicitly circular datastructure in Haskell.
10:36:28 <esap> It is used to find an element (of type a) from a data structure 's a' based on a path from "root" of the data structure to the element.
10:36:40 <ski> it's another story with IORef or STRef, of course
10:37:01 <ski> hmm
10:37:22 <Heffalump> ski: sure
10:37:35 * Heffalump departs
10:38:03 <hdaume> grr...ghc takes forever to compile my 82k line program
10:38:04 <ski> with a possible path for binary tree is   data Path = TurnLeft Path | TurnRight Path | Here   ?
10:38:22 <hdaume> or just [Bool]  :)
10:38:53 <ski> of course (trying to have a more speaking type just :)
10:39:10 <hdaume> :)
10:39:11 <esap> Yes, I use [p] for paths in trees (where p the path used for branching the tree)
10:40:09 <ski> have you experimented with "turning a tree upside-down along a path", so to speak, sometime ?
10:40:27 <esap> I have code like: instance (DataStructure s p) => DataStructure (Tree s) [p] where { apply (ITreeNode e _) [] = e ; apply (ITreeNode _ childs) (c:cr) = apply (apply childs c) cr }
10:41:06 <ski> 'kay
10:41:33 <ski> can one walk graphs with this class too ?
10:41:58 <hdaume> probably DAGs
10:42:01 <esap> well I don't know how to make sure that the graph is infinite in all directions.
10:42:21 <esap> For that to work well, you can't have "dead-ends" in the structure
10:42:27 <ski> hdaume : i was thinking of cyclic graphs, mostly
10:42:48 <ski> why ?
10:43:31 <esap> ski: The reason is that the apply function does always return an element. So every path must lead somewhere. And this is what I want.
10:43:40 <hdaume> i guess it depends on your representation
10:43:52 <hdaume> esap: ah, i hadn't realized that
10:44:28 <esap> So this thing can only be used with circular data structures.
10:44:33 <hdaume> but in general, without some fancy footwook, i don't see how you can get instance Functor Graph ...
10:45:00 <hdaume> well i guess you can
10:45:02 <hdaume> nevermind :)
10:45:09 * hdaume is having a stupid day
10:46:06 <ski> esap : but doesn't your class work for finite trees (just not empty ones (?)) ?
10:46:42 <ski> esap : hmm
10:46:58 <esap> ski: well no, not if the tree can have dynamically determined depth.
10:47:19 <esap> ski: it will work for finite structures for which you can in advance know the size of the whole structure.
10:47:59 <ski> esap : does your tree branch into the same number of subtree for each node of some tree ?
10:48:29 <Darius> except that you need something to signal failure (e.g. a monad), what would be wrong with finite data structures.
10:48:45 <esap> ski: no, the "list of subtrees" under each node has to be circularly defined.
10:49:15 <esap> ski: or known in advance. The tree type doesn't care, I've abstracted over that.
10:49:42 <esap> ski: data Tree f a = ITreeNode { element :: a, children :: f (Tree f a) }
10:49:50 <Darius> also, whiy is it called "apply"?
10:50:02 <ski> esap : i was thinking of defining some type s (used as branch "list" in e.g. trees) that would have an empty type for Path ... hmm
10:50:24 <esap> darius: because if you implement DataStructure ((->) a) a  then apply = ($)
10:50:54 <esap> darius: it's a generalization of that.
10:51:38 <ski> esap : it could perhaps be good to have dependent types for this ... oh well
11:11:31 <keverets> is the hws still being worked on?  wasn't it supposed to host haskell.org at some point?
11:12:10 <Heffalump> not that I've heard
11:14:10 <keverets> in terms of being worked on, or potentially hosting haskell.org?
11:18:29 <Heffalump> the latter
11:27:20 <keverets> Heffalump: ah, I found the reference (for the potential of hosting haskell.org) in a paper by Simon Marlow in 2000 for the Haskell Workshop in Montreal.
11:28:13 <Heffalump> ah, ok
11:28:23 <Heffalump> I've not heard more about it since.
11:50:18 <Lunar^> Did someone alreayd compiled HGL in ghc source tree ?
12:01:25 <golya> exit
12:01:27 <golya> exit
12:06:50 <ski> what commands do lambdabot understand ?  (eval,type,quit,hello,.. ?)
12:08:22 <Igloo> Lunar: I don't understand your question exactly, but the deb builds it (I think without any changes in 6.0.1)
12:08:32 <Igloo> @listcommands
12:08:32 <lambdabot> I react to the following commands: ["all-dicts","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude","quit","reconnect","
12:08:51 <ski> Igloo : 'kay, thanks
12:11:48 <Igloo> I assume that's been truncated. I think you can get a list of modules and commands for each module too, but I am no expert. And there's always the source.
12:12:23 <Riastradh> @listmodules
12:12:23 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
12:12:26 <Riastradh> @listcommands eval
12:12:26 <lambdabot> Module eval provides the following commands: ["eval","define","get-definition","definitions","del-definition","dump","set-fuel","resume"]
12:12:46 <ski> Igloo : can't get the source right now. whole (almost) system hanged except irc ..
12:13:00 <Cale> lambdabot appears to need some extra code to break lines that are too long
12:18:12 <ski> @karma
12:18:13 <lambdabot> I can't find the karma of nobody.
12:22:36 <hdaume> that just sounds like someone from the deep south talking
12:23:00 <Darius> Cale: yeah, it's been on the todo list for a long long time
12:23:02 <Smerdyakov> Or someone who has a brain problem!!!! HAHA!
12:23:54 * hdaume is resisting the urge to say "...like i said"
12:24:41 <Cale> @karma shapr
12:24:41 <lambdabot> shapr has a karma of 0
12:24:47 <hdaume> @karma hdaume
12:24:47 <lambdabot> You have a karma of 0
12:24:49 <hdaume> :(
12:24:57 <hdaume> how does one get karma?
12:25:03 <Cale> @karma Cale
12:25:03 <lambdabot> You have a karma of 0
12:25:05 <hdaume> @help karma
12:25:05 <lambdabot> Sorry, I don't know the command "help", try "lambdabot: @listcommands"
12:25:13 <ski> karma+ and karma- i presume ..
12:25:19 <hdaume> @karma+ hdaume
12:25:19 <lambdabot> You can't change your own karma, silly.
12:25:21 <hdaume> :(
12:25:25 <ski> @listcommands karma
12:25:25 <lambdabot> Module karma provides the following commands: ["karma","karma+","karma-"]
12:25:32 <hdaume> @karma+ lambdabot
12:25:32 <lambdabot> lambdabot's karma has been incremented.
12:25:33 <Cale> @karma+ hdaume
12:25:34 <lambdabot> hdaume's karma has been incremented.
12:25:38 <hdaume> @karma lambdabot
12:25:38 <lambdabot> lambdabot has a karma of 1
12:25:48 <hdaume> i think he should say something witty when you affect his karma
12:25:51 <vegai> missing period!
12:25:54 <vegai> @karma- lambdabot
12:25:54 <lambdabot> lambdabot's karma has been decremented.
12:28:04 <hdaume> @karma+ chilli
12:28:04 <lambdabot> chilli's karma has been incremented.
12:29:37 <whee> @karma+ somerandomdude
12:29:37 <lambdabot> somerandomdude's karma has been incremented.
12:29:40 <whee> pfft :P
12:30:22 <whee> I'd say that should have an option to check the seen database before dealing with karma
12:30:37 <whee> if it has never seen a user, why should they have karma :P
12:32:27 <Darius> @karma+ SPJ
12:32:27 <lambdabot> SPJ's karma has been incremented.
12:33:15 <Riastradh> whee, go ahead and fix it, then.
12:35:15 <whee> Riastradh: lambdabot is hard$!@ :)
12:35:24 <whee> but I'll try :P
12:39:14 <Riastradh> I was working on fixing up the karma junk I initially wrote, but that got stuck on my other computer.
12:42:22 <whee> bah, sourceforge doesn't want to work :\
12:43:45 <Riastradh> Someone should move haskell-libs to Savannah.
13:09:25 <ski> netsplit ?
14:07:47 <Igloo> " I hope one day we'll move from CVS to something better" </Simon M in cvs-fptools@haskell.org>
14:09:07 * Riastradh is installing and reading the tutorial for arch.
14:11:05 <Igloo> He talks briefly about subversion and mentions arch and darcs later in the thread (cvs commit: fptools/green-card/distrib INSTALL) if anyone is interested
14:11:55 * stepcut has recently started playing with arch
14:12:08 <stepcut> I am using arch for my haskellDB port
14:13:03 <Igloo> port?
14:13:09 <stepcut> to linux/mysql
14:13:30 <stepcut> branch might be a better term
14:13:33 <Igloo> Aha, does shapr know about that?
14:13:42 <Igloo> Oh, and does it work with GHC 6.0.1?
14:13:47 <stepcut> no and no
14:13:55 <Igloo> Ah, OK
14:14:29 <stepcut> I would like to get haskellDB working under GHC, but for now I am using hugs
14:15:09 <stepcut> I heard a rumor that some implemented extensible records for GHC, but I have not seen it yet
14:15:49 <Igloo> I think someone who might be called Umut Acar did something recently. There was an inconclusive discussion at HW on the subject.
14:15:50 <stepcut> so for now haskellDB/Mysql requires hugs and Mysql 4.1alpha
14:16:08 <stepcut> Igloo: yeah, that is all I have heard
14:18:54 <stepcut> I hope arch is good
14:19:12 <stepcut> I have not been using it long enought to tell
15:31:57 * Riastradh decided arch was overly complicated after reading its manual.
15:38:20 * Riastradh looks at DARCS.
15:45:28 <reffie> k
16:06:32 * esap performs 'man arch' and also finds it excessively complex.
16:07:46 * Riastradh arghs.
16:07:50 <Riastradh> DARCS won't compile.
16:07:59 <Riastradh> I even went and got the GHC 6.0.1
16:08:00 <Riastradh> !
16:13:15 * Riastradh summons SyntaxPolice.
16:44:44 * Riastradh unsummons SyntaxPolice.
16:47:38 * Riastradh resummons SyntaxPolice.
16:47:59 <Darius> should've quit while you were ahead
17:02:22 <mvw> what is SyntaxPolice?
17:03:35 <Riastradh> The author of DARCS.
17:03:58 <Riastradh> Er, no, that's not right.
17:04:00 <Darius> That's David Roundy, SyntaxPolice is Isaac Jones
17:04:01 * Riastradh hrms.
17:04:06 <Riastradh> Yes, I just realized that.
17:04:20 * Riastradh unsummons SyntaxPolice on that realization.
17:04:44 <Riastradh> Does David Roundy ever come here?
17:05:05 <mvw> i was planning to do a set of interviews to present different fp communities - who are the 2-3 guys to interview for haskell?
17:05:47 <Darius> Riastradh: I don't know his nick if he does.
17:06:10 <Darius> I think he might have a couple of times though.
17:06:39 <hdaume> mvw: i'd consider simon peyton jones, john hughes and alastair reid, malcolm wallace, koen classen, uhmm....i'm sure there are more
17:06:48 <hdaume> different people will give you different suggestions tho :)
17:06:50 <Darius> Marlow
17:19:20 <mvw> what is the haskell community's preferred web site (www.haskell.org?) and discussion forum (a mailing list? a news group?)
17:20:26 <Riastradh> haskell.org and c.l.functional or whatever the mailing list is.
17:21:13 <Riastradh> haskell@haskell.org for general Haskell discussion and haskell-cafe@haskell.org for newbie questions, or so the 'Mailing Lists' page on haskell.org says.
17:23:14 <mvw> thanks, i will put that on my list and have a look
20:23:13 <whee> eer, anyone familiar with lambdabot source?
20:23:47 <whee> wait, gah, nevermind
20:24:58 <whee> I'm having a fun time trying to figure out what everything does; this needs some function signatures :|
20:32:13 <whee> attempting to integrate the karma features with seen in some usable way; I had some zany idea about trying to come up with some monad transformer for modules
20:32:46 <whee> would be more fun than simply merging the two :)
