01:39:07 <prologic> are the operators defined in the prelude ? eg: \ + * - ?
01:39:16 <ibid> generally yes
01:39:17 <ski> yes
01:39:48 <prologic> generally, but not specifically ?
01:40:56 <ski> perhaps ibid meant that \ is not an operator ???
01:41:12 <ibid> i count it as an operator :)
01:41:37 <prologic> oh wait
01:41:39 <prologic> it's / sorry
01:41:42 <prologic> my mistake
01:41:49 <ski> but not as a definable one (in haskell at least), no ?
01:41:52 <ibid> but it, like the list constructor (:), are syntactically such that they cannot be (re)defined
01:41:55 <ibid> true
01:42:25 <prologic> my point really is, are the standard math operators defined in the prelude or are they built-in ?
01:42:49 <ibid> check for yourself :)
01:42:53 <ibid> but yes, they are defined
01:42:57 <ski> ibid : the list constructor can be given a type (if put in parens), but \ can't , no ?
01:43:40 <ibid> that's mostly because lambda cannot be usefully sliced ;)
01:44:47 <ski> i've been thinking of a type system allowing the definition and typing of variable-binding "things" like \ ..
01:45:41 <ibid> generally, you need to have reflection to make that useful :)
01:46:03 <ski> hmm, not sure of that. care to explain ?
01:47:17 <ibid> well, if you want to be able to make a binding construct a second-class or even first-class object, you also need to have a language construct for variables (think Scheme's symbol type)
01:47:58 <ski> yes, but not nessecarily
01:48:11 <ski> a first-class object
01:48:29 <ski> (i think)
01:49:00 <ibid> and a language construct for variables is one component of a reflection system :)
01:50:15 <ski> (or (multi-)stage system ?)
01:51:50 <ibid> hmm?
01:52:18 <ski> something like MetaML ..
01:52:44 <ski> or does that qualify as a reflection system (not sure) ?
01:52:58 <ibid> ah, metaprogramming
01:53:13 <ibid> if it's static, it's not reflection, but if it is dynamic, it is :)
01:53:34 <ski> if what is static/dynamic ?
01:54:35 <ibid> the metaprogramming mechanism
01:55:50 <ski> you mean if the metaprogramming facilities is only available/run at compile-time, as opposed to also at run-time ?
01:56:40 <ibid> basically yes
05:47:16 <Heffalump> hi
05:53:54 <scharob> hi
06:40:36 <Heffalump> @topic-init
06:40:50 * Heffalump pokes a non-existent lambdabot
06:41:56 <Heffalump> @topic-init
06:42:10 <Heffalump> @foo
06:42:11 <heffalambda> Sorry, I don't know the command "foo", try "lambdabot: @listcommands"
06:42:16 <Heffalump> hmm.
06:43:11 <ski> should "lambdabot" really be hardcoded like that ?
06:43:19 <Heffalump> probably not.
06:43:39 * Heffalump will prod stuff later
08:51:54 <ski> bye for now
12:47:41 <pseiko> hi all
12:48:36 <hdaume> he
12:48:40 <hdaume> hi, even
12:51:17 <pseiko> i have written some code which pretty-prints a table, there seems to be nothing in the libraries
12:51:45 <pseiko> why? i think this is a common issue, isnt it?
13:09:46 <hdaume> i dunno...it's not too much code and it's not entirely clear where it would go
13:10:48 <pseiko> but it is rather boring to write :-(
13:11:04 <hdaume> pp = unlines . map unwords . transpose . map (\x -> let l = maximum (map length x) in map (\y -> take l (y ++ repeat ' ')) x) . transpose
13:11:07 <hdaume> i think that'll do it
13:12:20 <hdaume> that should be [[String]] -> String....you can change it to Show a => [[a]] -> String by replacing y with show y
13:13:04 <hdaume> and length to length.show
13:13:51 <hdaume> (fwiw, though, i do have that in my generic Util library, i think :P...maybe in my String library)
13:14:41 <pseiko> wow, looks great :-)
13:15:17 <hdaume> (that's untested, off the top of my head, though, so you should try it before taking my word :))
13:15:40 <pseiko> just tried it
13:16:08 <pseiko> but it is rather expensive, because of the transpose
13:16:45 <hdaume> i can't really think of a less expensive way to do it...
13:17:30 <hdaume> laziness should help you out there
13:18:48 <pseiko> i like this line in my solution:
13:18:55 <pseiko> colwidths col = maximum $ map (length.(!!col)) table
13:19:12 <hdaume> that's really expensive...worse than transpose :)
13:19:38 <pseiko> and why? even worse than transpose?
13:20:10 <hdaume> probably a cheaper way to do it would be to map (\ (x:xs) -> (x,xs)) on all the guys, do the first column, and then repeat on the rest.  though i think transpose will only be moderately slower than this
13:20:29 <hdaume> yeah, transpose is a one-time n^2 operation.  yours is an n^2 operation for each column
13:21:45 <pseiko> hmm, oh, oh, smells burnt, my meal, argh, cu in a few minutes again :-)
13:21:51 <hdaume> hehe
13:23:57 <pseiko> the water of my potatoes was evaporated :-) but they are still not eatable
13:25:36 <pseiko> bye all, thank you hdaume :-)
16:05:11 <turtles> suports haskell polimorphism?
16:05:23 <Heffalump> err, yes
16:06:13 <turtles> i try do this, f a b and then f a b c and i got an error
16:06:42 <turtles> i am using hugs98 for linux
16:07:31 <Darius> Haskell supports parametric polymorphism
16:07:45 <Darius> e.g. the reverse function can work on lists of any type.
16:08:17 <turtles> want to see all code i am trying to do
16:08:20 <turtles> ?
16:08:58 <turtles> are 2 functions
16:09:08 <Darius> If it's less than five lines or so you can paste it here, otherwise you can edit the HaskellIrcPastePage at the wiki if you don't have any handy webspace.
16:11:05 <turtles> maior_num :: Int -> Int -> Int -> Int
16:11:06 <turtles> maior_num :: Int -> Int -> Int
16:11:31 <turtles> these are what i want to do
16:11:38 <Heffalump> you can't do that kind of polymorphism
16:11:49 <Heffalump> well, you can with a type class, but you probably don't want to
16:12:33 <Darius> This kind of "polymorphism" is typically called (ad-hoc) overloading.
16:13:10 <Darius> if the maior_num's do pretty much the same thing, you may want to use a list
16:13:35 <turtles> maior_num :: Int -> Int -> Int and maior_num :: Float -> Float -> Float , this is what i can do?
16:14:03 <Heffalump> yes, but you need to do it a little differently
16:14:22 <Heffalump> look up how to use type classes
16:18:27 <rlj> @seen rlj
16:18:27 <heffalambda> rlj is in #haskell.
16:18:31 <rlj> bleh
16:18:43 <rlj> @seen lambdabot
16:18:43 <heffalambda> I haven't seen lambdabot
16:18:49 <Heffalump> it's dead, Dave
16:18:51 <rlj> @seen heffalambda
16:18:52 <heffalambda> Yes, I'm here
16:19:53 <Heffalump> that was interesting
16:22:06 <whee> heh
16:22:17 <Igloo> Could be shapr demonstrating it after HIM or something
16:25:55 * turtles is away: (Auto-Away after 10 mins) [BX-MsgLog On]
16:26:25 <Heffalump> yeah, possibly
21:59:09 <whee> has anyone used the readline library that ghc includes?
23:04:28 <stepcut> nope
23:05:53 <whee> heh
23:06:24 <whee> trying to think of a good way to clear the terminal
23:07:25 <whee> guess I could just run clear and grab that output, but that seems weird :)
23:08:20 <sjj> putStr (chr(27):"[2J")
23:10:25 <whee> hrrm, seems to work
23:11:06 <whee> seems to be interacting with readline strangely, though :\
23:11:14 <sjj> heh heh
23:11:39 <whee> I need to draw custom output and then the readline prompt, so I set the redisplay function to one of my own
23:11:55 <sjj> I've never used readline, sorry.
23:12:10 <whee> it's fun :)
23:18:14 <whee> what exactly does that escape code do?
23:19:24 <whee> ahh, weird. It works correctly if I putStrLn it, but not with just putStr
23:21:17 <dennisb> whee: it's line buffered, so try to flush stdout
23:22:09 <frevidar> when using ghc, does the haskell function "lookup" take time proportional to number of elements in the list, or does it do some hashing internally?
23:22:58 <whee> dennisb: I had it unbuffered and using putStr (that escape char) and then some of my own text
23:23:26 <whee> I print the current readline line each refresh, and the text would advance to the right every keypress
23:23:49 <dennisb> frevidar: it works on a list so it os prop. to the number of elements in the list
23:24:54 <dennisb> whee: well, I don't know what is wrong. Usually when things work after newlines and not work without newlines it's because it's buffered and you can instead of a newline do hFlush(stdout);
23:25:11 <whee> I'll try that, as well
23:50:26 <shapr> gooood morning #haskell!!!
23:50:47 <whee> I'm doing a lot of "join $ liftM f x", is there something better? :|
23:50:59 <whee> I'm ending up with IO (IO ()) and it just wants IO () heh
23:54:26 <Darius> @type join . liftM
23:56:17 <Darius> =<<
23:56:57 <whee> aah
23:57:12 <Darius> of course, that's just >>= flipped.
23:57:35 <Darius> I've yet to use join.
23:57:38 <whee> I don't know what I was thinking :)
