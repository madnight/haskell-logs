01:12:59 * shapr boings
01:13:07 * andersca bounces
01:18:43 <shapr> tjenare andersca 
01:19:09 <andersca> tjena shapr
01:19:22 <shapr> vad händer?
01:20:12 <andersca> jag kompilerar evolution
01:20:22 <shapr> det gör bra?
01:20:29 <andersca> ja
01:20:41 <shapr> hur mycket tid är det?
01:21:24 <andersca> jag vet inte, men nu kÃ¶r jag med ccache
01:21:39 <shapr> okej
01:23:17 <Pseudonym> shapr: You missed all the bouncing.
01:25:00 <Jerub> heya shapr.
01:25:08 <Jerub> well, no, flamer is still here.
01:25:20 <Pseudonym> Yes, but he appears to be _permanently_ here.
01:25:37 <shapr> Pseudonym: g'mornin Pseudonym!
01:25:43 <Pseudonym> G'day.
01:25:46 * Pseudonym isn't staying
01:26:02 <shapr> hey, any suggestions for improving Haskell?
01:26:11 <shapr> I'm looking for stuff I can contribute to HIM
01:26:14 <Jerub> me?
01:26:17 <Pseudonym> Yes.  Let's add global variables!
01:26:22 <shapr> aiee
01:26:28 <shapr> Jerub: sure, tell me your ideas
01:26:37 <Jerub> <?haskell ?>
01:26:40 <Pseudonym> Do you want to improve the language or the compiler?
01:26:42 <Jerub> ;)
01:27:19 <shapr> Pseudonym: any suggestions you have
01:27:19 <Jerub> shapr: I'd like to be able to import and export python datatypes from haskell
01:27:29 <shapr> hm
01:27:30 <Pseudonym> shapr: OK, here's an interesting paper.
01:27:35 <Pseudonym> http://www.cs.mu.oz.au/research/mercury/information/papers.html#p81-somogyi
01:27:39 <Jerub> using parrot
01:27:47 <Pseudonym> I think that GHC could benefit from this.
01:28:38 * shapr looks
01:28:45 <Pseudonym> That should test your deep-GHC-internals-hacking sK1llz.
01:29:23 <shapr> as if I have any :-)
01:29:26 <Pseudonym> Would you like a precis?
01:29:58 <shapr> yes please!
01:30:01 <Pseudonym> OK.
01:30:04 <Pseudonym> Suppose you have this:
01:30:06 <shapr> I've read the summary, and it sounds sensible
01:30:27 <Pseudonym> case foo of { (x,y) -> case bar of { something -> f foo x } }
01:30:34 <Pseudonym> Stare at this for a moment.
01:30:43 <Pseudonym> The innermost expression uses both foo and x.
01:31:15 <Pseudonym> But at that point, foo is guaranteed to be evaluated, right?
01:31:27 * shapr thinks
01:31:34 <shapr> yes
01:31:36 <shapr> of course
01:31:37 <Pseudonym> Right.
01:31:49 <Pseudonym> Now suppose the inner case expression forces bar to be evaluated.
01:32:09 <Pseudonym> That means GHC has to call code to evaluate bar.
01:32:23 <Pseudonym> Across that call, it has to save variables somehow.  I think it's on the stack.
01:32:49 <Pseudonym> The idea behind the paper is that sometimes (and the paper shows how to determine when) it's cheaper just to save foo than to save both foo and x.
01:33:02 <Pseudonym> Because you can always get to x if you can get to foo.
01:33:15 <shapr> nifty
01:33:19 <Pseudonym> Yeah.
01:33:40 <Pseudonym> They report the Mercury compiler speeding up by 5-10% or so from this one optimisation alone.
01:33:47 <shapr> impressive
01:33:48 <Jerub> shapr: write a haskell compiler for parrot 
01:33:57 <Pseudonym> Presumably because it does a lot of structure hacking.
01:35:01 <Pseudonym> There might also be a useful interaction with environment optimisation.
01:35:11 <Pseudonym> I don't think GHC does any environment optimisation at the moment.
01:35:23 <shapr> Jerub: hah
01:35:43 <Pseudonym> Jerub: I wrote most of a scheme compiler for parrot, but then someone else beat me to it.
01:35:51 <Pseudonym> It was actually a direct translation of the SECD machine.
01:36:01 <Jerub> heh
01:36:07 <Jerub> I'm working on php->parrot
01:36:12 <Pseudonym> Unfortunately there wasn't any I/O in Parrot at the time.
01:36:23 <Pseudonym> So I couldn't bootstrap the compiler.
01:37:01 <Pseudonym> I didn't do any environment optimisation either. :-)
01:37:03 <Jerub> Pseudonym: right now, good documentation on writing compilers in parrot is more important than languages in parrot.
01:37:10 <Pseudonym> True.
01:37:29 <Pseudonym> Another issue is garbage collection.  I don't think that'a a solved problem yet.
01:37:52 <Jerub> thats automagic in parrot iirc.
01:37:55 <Pseudonym> Incidentally, I also tried to write an optimiser for parrot code, and I ran into one insurmountable problem, which I personally think is a deep flaw in Parrot.
01:38:00 <shapr> Pseudonym: any other HIM suggestions?
01:38:11 <Pseudonym> Parrot allows you to compute an arbitrary address and jump to it.
01:38:46 <Pseudonym> Which stuffs up dataflow analysis something shocking.
01:39:05 <Pseudonym> shapr: How about first-class modules? 
01:39:12 * Pseudonym is only half serious
01:40:21 <Pseudonym> Let's have a think...
01:40:54 <Jerub> I was half serious with the <?haskell ?> thing. it'd be nice to be able to embed haskell in a small part of a html document.
01:41:02 <Jerub> no idea how it'd work.
01:41:08 <shapr> for web programming? or what?
01:41:18 <shapr> yah, first class modules would be nice
01:41:23 <shapr> so would parameterized modules
01:41:29 <Jerub> for web programming
01:41:30 <shapr> thoough I dunno how I'd use that.
01:41:36 <shapr> Jerub: tried WASH?
01:42:15 <Pseudonym> Oh, speaking of web.
01:42:20 <Pseudonym> www.cs.uu.nl/~johanj/publications/TheWeb.ps
01:42:23 <Pseudonym> Implement this!
01:42:34 <Pseudonym> It should be pretty easy.
01:42:51 <shapr> hey, have I already told you about the Haskell wiwiwi wiki?
01:42:57 <Pseudonym> Yes.
01:43:01 <Jerub> no, you hadn't.
01:43:20 * shapr broadcasts information cheerfully
01:43:56 <shapr> oh, this is related to sebc's thesis proposal
01:44:14 <shapr> Pseudonym: have you tried the MetaEnvironment?
01:44:16 <Pseudonym> Someone said this on a mailing list I'm on, in response to someone buying a machine with 8Gb of RAM: My Amiga had 2 glorious MB of RAM... What would 8GB be necessary for? [...] Sounds like a lot. Maybe I am
01:44:17 <shapr> or looked at it?
01:44:24 <Pseudonym> old fashion.
01:44:40 <Pseudonym> shapr: No.
01:44:45 <shapr> I'm old fashioned too, I haven't bothered to buy another gb of ram for my pc
01:45:17 <Pseudonym> Some people Just Don't Get It(tm).
01:45:21 <Lunar^> shapr: broacast is good
01:45:33 <Lunar^> shapr: You can look at my last blog entry, it's talking about Haskell ;)
01:45:38 * shapr looks
01:45:43 <Pseudonym> Gotta go.  Night.
01:46:09 <shapr> yay, SyntaxPolice arrives tomorrow morning!
01:46:14 * shapr bounces enthusiastically
01:49:33 <shapr> Lunar^: what's the url? I got there before via sebc's friend blog pages.
01:50:17 <Lunar^> http://lune.talath.net/~lunar/blog/
01:50:33 <Lunar^> google on Lunar blog should lead you happily
01:50:56 <shapr> ok
01:53:02 <Jerub> yay
01:53:06 <Jerub> s-exps rock
01:53:21 <Jerub> instead of implementing a full php parser, I'm using s-exps that parallel php's capabilities.
01:53:37 <Jerub> that way I can do my parrot dev without a full parser.
01:57:42 <shapr> I think Haskell could use a standard database api
01:58:40 <Jerub> that'd be nice.
01:58:49 <Lunar^> shapr: so do I... something like Java ResultSet update capability would be nice also
01:59:02 <shapr> I want HaskellDB as the standard :-)
01:59:20 <Lunar^> I should take time too go deeper with this
01:59:25 <shapr> then we never have to write SQL again
02:01:02 <Lunar^> Writing SQL has meaning when you want to do complex (but efficient) request
02:01:30 <shapr> well, look at HaskellDB and see what you think.
02:01:38 <Lunar^> ok :)
02:01:40 <Lunar^> bbl
02:01:44 <shapr> hej Marvin-- 
02:01:52 <Marvin--> morrn
02:02:00 <Jerub> hmm.
02:02:13 <Jerub> I should really read a paper on implementing asm code generation.
02:02:54 <Marvin--> have you read the tiger book?
02:03:10 <Jerub> nope
02:03:20 <Marvin--> Modern Compiler Implementation in ML
02:03:29 <andersca> ah, that tiger book
02:03:31 <Marvin--> quite good
02:03:52 <Marvin--> there are two books in compiler implementation, the dragon book, and the tiger book :-)
02:03:54 <Jerub> I'll check if the library has it.
02:04:10 <Jerub> I've read the dragon book, and a few other compiler texts.
02:04:12 <Marvin--> Andrew Appel
02:04:21 <Jerub> and the monadic parser combinator paper.
02:04:38 <Jerub> and the parsec paper
02:05:13 <Jerub> but i really need to read something on code generation
02:05:33 <Marvin--> I think the chapters in the tiger book on code generation are quite good
02:05:47 <Jerub> okay, definately put it on the list then.
02:07:20 * shapr yawns
02:07:32 <shapr> g'mornin arguile 
02:07:41 <arguile> Morining
02:07:59 <Jerub> its not like I need to know much, and there are some problems I don't need to worry about.
02:07:59 <arguile> err... obviously I'm not sufficiently caffeinated yet
02:08:07 <Jerub> (I've got unlimited registers!
02:08:24 <shapr> nor am I
02:16:56 <Jerub> hmm
02:17:10 <Jerub> no, evil, bad steve.
02:38:07 <Jerub> gah
02:38:11 <Jerub> shapr: are you still around?
02:44:54 * Heffalump appears
02:45:04 --- mode: ChanServ set +o Heffalump
02:45:18 <Jerub> Heffalump: flamer has been quitting and joining all day, it would be nice if you did something :)
02:45:21 --- mode: Heffalump set +o Jerub
02:45:25 <Jerub> ahh good :)
02:45:45 <Jerub> eek! power!
02:45:50 <Jerub> get it away!
02:46:00 --- mode: Jerub set +b flamer!*@*
02:49:07 --- mode: Jerub set -o Jerub
03:04:16 <bob2_nothome> hi all.
03:04:26 <bob2_nothome> I've got another stupid question, if you don't mind :)
03:05:28 <bob2_nothome> I have a couple of functions, add and normalise.  add is [X] -> [X] -> [X], and normalise is [X] -> [X]
03:06:11 <bob2_nothome> his call appears valid, afaict, but it results in an error: normalise (add [(3,4)] [(-2,4)])
03:06:19 <bob2_nothome> Program error: {normalise [(1.0,4)] ++ add [] []}
03:07:18 <bob2_nothome> of course, I have no idea *why*?
03:07:20 <bob2_nothome> s/?//
03:08:11 <Heffalump> you'll be missing some cases in the definitions
03:08:37 <Heffalump> try running it with ghci, the error message might be more helpful
03:10:02 <bob2_nothome> bah, yes.
03:10:15 <bob2_nothome> I didn't have a default case, just realised.  thanks again!
03:11:24 <bob2_nothome> do empty lists have a type?
03:11:30 <Heffalump> yes 
03:11:32 <Heffalump> [] :: [a]
03:11:58 <bob2_nothome> so, add [] []   = [] :: Poly, creates a list of type Poly?
03:12:00 <andersca> @type []
03:12:00 <lambdabot> [] :: [a]
03:12:45 <Heffalump> yeah
03:12:51 <Marvin--> oh, @type is back?
03:12:57 <Heffalump> assuming Policy is a synonym for some list type
03:14:07 <bob2_nothome> yup.
03:14:08 <bob2_nothome> thanks.
03:19:34 --- mode: leguin.freenode.net set +b flamer!*@*
03:22:28 <bob2_nothome> is there an idiom for dealing with the last item of a list of tuples?  aside from recursing down to the last item and getting it in (x,y):[] or so.
03:23:57 <Heffalump> well, you can use last to get the last item of a list
03:24:14 <d33p> bob2_nothome: something like [a] or [] ?
03:24:41 <Heffalump> and then fst and snd to extract x and y
03:24:45 <d33p> func [] = .. 
03:24:49 <d33p> func [a] = .. 
03:24:50 <bob2_nothome> ah, fst and snd
03:25:15 <d33p> that will match either the end or the last element
03:36:44 --- mode: niven.freenode.net set +o Heffalump
03:36:44 --- mode: acamar.freenode.net set +b flamer!*@*
03:38:22 * shapr yarghs
03:38:46 <Marvin--> who's this flamer guy?
03:38:47 <shapr> @yow
03:38:48 <lambdabot> Pardon me, but do you know what it means to be TRULY ONE
03:38:48 <lambdabot>  with your BOOTH!
03:38:53 <shapr> I dunno, haven't seen him here before.
03:39:59 <bob2_nothome> a bot written in haskell?
03:40:56 <shapr> where?
03:41:19 <Heffalump> lambdabot :-)
03:41:23 <shapr> oh
03:41:31 <Heffalump> flamer is someone who was bouncing all morning so Jerub banned him
03:41:35 <shapr> ok
03:41:53 <Heffalump> you could unban him and see if he still tries to auto-rejoin
03:42:09 <shapr> I'm sure he can /msg someone if he regains consciousness
03:46:08 <shapr> hah, file thinks a haddock dump is "network.haddock: XWD X Window Dump image data, 3584x0x1869769472"
03:46:38 <bob2_nothome> haddock?
03:47:00 <shapr> http://haskell.cs.yale.edu/haddock/
03:47:07 <shapr> bob2_nothome: yes, lambdabot is written in Haskell
03:47:16 <bob2_nothome> wow.
03:47:19 <shapr> the source is freely available in cvs or darcs 
03:47:28 <bob2_nothome> is the source available?  that'd be quite interesting to see.
03:47:35 <bob2_nothome> heh.
03:47:45 <shapr> http://www.scannedinavian.org/cgi-bin/darcs?hlibs*
03:47:53 <bob2_nothome> how do you find darcs?  usable as your main revision control system?
03:48:01 <shapr> so far no trouble
03:48:19 <shapr> admittedly, I don't put a huge load on it
03:49:02 <shapr> I'd like to have emacs integration, but not enough to write said integration
03:49:33 <bob2_nothome> is there a haskell-scriptable editor anywhere?
03:50:14 <shapr> xemacs is haskell scriptable if you use the integration code from the InForM thingy
03:50:28 <shapr> there's also hIDE aka haIDE
03:51:02 <Lunar^> shapr: Did you think my last post interesting ?
03:51:35 <shapr> yes, but I'm too sleepy today to fully understand it.
03:54:24 <shapr> Lunar^: I'm curious about the table locking, are you using MySQL?
03:54:55 <shapr> if you need unique IDs, there's a unique monad supply starting with ghc5.04.3 I think
03:55:23 <shapr> oh, I think you already told me you are using MySQL
03:55:42 <Jerub> table locking with mysql?
03:56:18 * shapr dunno
03:56:21 <Jerub> are you using ODBC or native libs?
03:56:26 <shapr> I haven't used MySQL in loong
03:56:51 <shapr> oh, I could install HToolkit on raven so lambdabot could have @fact again
03:57:03 <shapr> especially since I've grabbed the old factoid table
03:57:15 <shapr> bob2_nothome: lambdabot has database integration too
03:57:25 <shapr> though it's not there at the moment.
03:57:57 <Lunar^> shapr: yes, but I want a single Id for every table and my daemon is not the only application which can create new entry
03:57:58 <bob2_nothome> oh, neat.
03:58:06 <shapr> oh
03:58:12 <shapr> bob2_nothome: are you learning Haskell?
03:58:17 <shapr> or finding other users?
03:58:40 <bob2_nothome> shapr: yah
03:58:46 <shapr> e) all of the above?
03:59:04 <bob2_nothome> all I've seen so far is piddly little examples.  I'd like to see how you write an entire app in it.
03:59:18 <bob2_nothome> darcs is all I've seen so far.
03:59:39 <shapr> does lambdabot count as an app?
04:00:04 <bob2_nothome> yes!
04:00:08 <Jerub> a wiki counts as an app.
04:00:10 <shapr> check simon marlow's haskell web server
04:00:14 <shapr> oh, there's a wiki also
04:00:26 <Jerub> shapr: where's the haskell wiki source?
04:00:28 <shapr> though it doesn't require much structure, wikis don't need much code.
04:00:40 <shapr> http://wise.homedns.org/blog/src/
04:01:04 <shapr> I'm running an earlier version of that wiki here: http://www.scannedinavian.org/cgi-bin/wiwiwi/blog.cgi
04:01:41 <Lunar^> Damn... I need to rewrite bracke :(
04:01:45 <Lunar^> +t
04:02:10 <shapr> I could write a simple haddock plugin for lambdabot today, instead of working :-)
04:02:31 <Jerub> shapr: hows work?
04:02:41 <shapr> lots of it
04:03:08 <shapr> 99% python work, so that's good
04:03:26 <shapr> 0.5% Java/XSLT and 0.00001% Haskell
04:03:50 <Heffalump> you have Haskell work?
04:04:04 <shapr> just once so far :-)
04:04:12 <shapr> but I expect to do more
04:04:19 <Heffalump> what was it?
04:04:29 <shapr> since it's not really 'haskell' work, it's more 'accomplish this task, give us results'
04:04:34 <Heffalump> ah
04:04:46 <shapr> xml transforms with HXMLToolkit
04:04:50 <shapr> toolbox?
04:04:56 * shapr always forgets
04:04:58 <Heffalump> what form were the results in?
04:05:37 <shapr> input is OpenOffice files, output is a custom XML format for elearning publishing
04:05:47 <Jerub> shapr: are you freelancing?
04:05:50 <shapr> actually, input is ms.doc files, but I turn them into OpenOffice
04:06:17 <Jerub> OO has python bindings apparently.
04:06:17 <shapr> Jerub: I am half owner of a company, and self-employed. which of those companies I'm working for depends on the task.
04:06:25 <shapr> yah it does
04:06:43 <shapr> but I didn't get them happy on my system
04:06:47 <Jerub> cool
04:07:02 <Jerub> :(
04:07:23 <shapr> so I just wrote a shell script to unzip the files, and haskell code to convert them
04:09:12 <shapr> oh, speaking of xml and haskell
04:10:00 <shapr> I'd like to have a utility to find duplicates parts of an html/xml tree. Basically, I want to factor out common parts of web pages to make includes
04:10:43 <Heffalump> gah, I wasn't concentrating when I used dput earlier, and accidentally uploaded a package to ftp-master.debian.org, and now katie is emailing me every 10 minutes to tell me about the files left lying around
04:10:56 <shapr> whoops
04:11:10 <shapr> how would I write a tree factoring thingy in Haskell?
04:11:31 <shapr> can I steal some CSE code somewhere? :-)
04:11:46 <Jerub> I read a paper on doing xml diffs a while back.
04:11:52 <Jerub> O(log n) or something.
04:11:53 <Heffalump> it's probably easiest to just write your own
04:11:54 <shapr> url? title?
04:12:07 <Jerub> been a long time.
04:12:27 <Marvin--> Heffalump: uh, and it's not a reject so you can't remove the files?
04:12:35 <Jerub> this was back before I started with php, I was looking for work and implementing it was suggested as a 'foot-in-the-door' with a local company.
04:12:50 <Heffalump> Marvin--: well, it deleted .changes immediately for not being signed by a developer
04:13:00 <Heffalump> but left the tarball etc around for 24 hours
04:13:26 <shapr> can you get rid of the files?
04:13:41 <Heffalump> well, I can't rm them via ftp, I tried that
04:13:46 <Heffalump> I dunno if there's any other way.
04:15:13 <Marvin--> you don't have write access to anything else than the reject dir iirc
04:16:11 * Marvin-- hops onto auric
04:16:16 * shapr hops
04:16:22 * shapr hops more
04:16:22 * andersca spins around
04:16:30 * shapr loads an interface
04:16:38 <Marvin--> oh, actually, you do have write permission to unchecked too
04:16:39 <shapr> hrm, no show instance...
04:16:47 <Marvin--> Heffalump: so you could ssh to auric and remove the files there
04:17:05 <Marvin--> Heffalump: or I can do it if you tell me what files it was
04:19:32 * shapr bounds
04:19:34 * shapr rebounds
04:19:40 <Marvin--> bah
04:19:43 --- mode: niven.freenode.net set +o Heffalump
04:19:43 --- mode: acamar.freenode.net set +b flamer!*@*
04:20:59 <shapr> it irritates me that I can't derive an instance of Show for type synonyms
04:22:14 <Marvin--> that's because they're *drumroll* type synonyms
04:22:18 <shapr> :-P
04:22:42 <shapr> and yet, when I try to derive Show for another datatype that uses that type synonym, it says "no show instance for this synonym"
04:22:44 <Lunar^> mhhhhh :(
04:23:02 <Lunar^> Is there any way I could "lift" block ?
04:23:11 <shapr> or maybe it's one of the types in this FM?
04:23:35 <Heffalump> errm, it should definitely inherit the Show instance
04:24:01 <shapr> hm
04:24:08 <shapr> do FMs have a standard show instance?
04:24:39 * shapr thinks they do
04:24:47 <Marvin--> no, they don't
04:24:50 <shapr> oh
04:24:57 <shapr> must be the problem
04:25:02 <Marvin--> probably :)
04:25:06 <shapr> :)
04:26:04 <Lunar^> sorry liftM would do it :)
04:42:42 <shapr> hm, I'd hoped for more info in the haddock dumps
04:47:22 * shapr grumbles about haddock sources
04:49:51 <Lunar^> ?
04:50:35 <shapr> too many IORefs for my tastes :-)
04:51:19 <Igloo> What are you trying to do to them?
04:51:33 <Igloo> Oh, Lunar, what arch did you want GHC in Debian for?
04:52:07 <Lunar^> Igloo: powerpc !
04:52:26 <Lunar^> Igloo: My poor iBook is lonely wihout its glorious Haskell compiler
04:52:33 <shapr> trying to save the docs pre-html so I can save them for a lambdabot plugin
04:52:45 <Igloo> Ah, that looks like it needs some hacking to get to work
04:52:56 <Heffalump> don't you need to write a new backend?
04:53:11 <shapr> like ppLambdabot?
04:53:13 <shapr> yes, it seems so
04:53:18 <Heffalump> or just ppRaw
04:53:30 <shapr> I was hoping there would be lots of info in the foo.haddock.gz binary dumps so I could just use those.
04:53:37 <Lunar^> ?? How far does linux/PowerPC is different from darwin/PowerPC & linux/x86
04:54:13 <Marvin--> well, ghc5 and ghc6 are written in haskell, so first of all a bootstrap version is needed...
04:54:38 <Marvin--> and iirc, ghc4 isn't in the archive any more
04:55:04 <Igloo> Lunar: They call registers by different names which makes for some fun. Once I'd got that sorted out (I think) I could still only produce segfaulting binaries
04:56:02 <Igloo> I'm not knowledgeable about it to know what bits are really Darwin-only and which bits are just PPC
04:56:06 <Lunar^> Igloo: uhh... I was not thinking this was this lot of works
04:56:24 <Igloo> If it wasn't a lot of work I'd have done it by now  :-)
04:57:01 <earthy> http://www.haskell.org/ghc/dist/4.08.2/ghc-4.08.2-src.tar.bz2
04:57:11 <earthy> seems like quite a good link to GHC 4
04:57:48 <Igloo> GHC 4 doesn't really help
04:58:14 <earthy> are you already bootstrapped?
04:58:27 <Marvin--> well if there's porting to be done as well...
04:58:28 <Lunar^> There's hugs on debian/powerpc I think
04:58:37 <Igloo> I have cross-port working (at least it worked for sparc)
04:59:26 <Igloo> I think it must have worked for PPC too for me to get as far as I did
05:00:35 <Marvin--> go on Igloo, port it to m68k too, let's see how long it takes for the m68k buildd to compile ghc6 :-)
05:01:15 <Lunar^> mhhhh
05:01:51 <Igloo> Hmm, only m68k-nextstep is known about by configure unfortunately  :-)
05:02:10 * shapr grumbles
05:02:25 <Igloo> shapr?
05:02:34 <shapr> haddock sources need refactoring
05:02:34 <Lunar^> Igloo: I would be damnly glad to have it, my Mac OS X is unable to boot for now (think I lost the partition map)
05:02:56 * shapr gets out the refactoring stick
05:03:07 * shapr applies it liberally to haddock
05:03:16 <Lunar^> lol
05:04:10 <Igloo> Lunar: Well, if you give me a patch you can have it  :-)    I haven't looked to see if the HEAD is better, or asked Wolfgang to see if he has any interest in helping the cause, but I can't spend much more time on it myself right now  :-(
05:04:15 <shapr> indices should not be written to disk in the same function where they're built
05:05:44 <Lunar^> Igloo: ok thanks anyway
05:32:13 * shapr kersplats
05:32:18 --- mode: niven.freenode.net set +o Heffalump
05:32:18 --- mode: acamar.freenode.net set +b flamer!*@*
05:33:37 <Segora> hi
05:33:40 <shapr> hi Segora 
05:33:42 <shapr> what's up?
05:33:59 <Segora> oh well... the first day with bearable temperature here in karlsruhe
05:34:22 <Segora> (which means 25 deg instead of 38)
05:34:25 <shapr> yay
05:34:30 <Segora> :)
05:34:41 <Segora> and you?
05:35:09 <shapr> playing around with haddock, ingesting stimulants
05:35:13 <shapr> life is good :-)
05:35:22 <Segora> *g*
05:35:23 <Marvin--> speaking of stimulants, time for a cup of coffee
05:35:58 <andersca> yes
05:36:29 <Segora> well, i've dosed down the stimulants in favor of fruit juice with sparkling water
05:36:51 <Segora> (i wonder if there is an english term for the german 'Schorle'...)
05:37:16 <Segora> drink :: Beverage -> IO ()
05:37:19 <andersca> whoah, this was strong
05:37:29 <andersca> drink :: Beverage -> Maybe ToiletVisit
05:37:35 <andersca> if you'd like it to be pure
05:37:35 <Segora> *g*
05:38:11 <Segora> well, purity can be nice sometimes
07:22:41 * isomer stumbles in
07:22:52 <isomer> coffee
07:22:59 * isomer stumbles to the kitchen
07:25:38 <isomer> *grunt*
07:29:07 --- mode: niven.freenode.net set +o Heffalump
07:29:07 --- mode: acamar.freenode.net set +b flamer!*@*
08:31:15 * shapr throws a long bomb exception
08:31:21 <shapr> ENOCOFFEE
08:33:54 <Marvin--> ditto
08:39:30 * Marvin-- grumbles in the general direction of the institution administration
08:41:05 <Marvin--> they put me up for teaching during the second half of the semester, while I've explicitly said I was only available during the first half
08:41:50 * Marvin-- sighs
08:46:14 <Igloo> Is it required?
08:46:59 <Marvin--> no, it's their problem
08:47:09 <Marvin--> but I wanted to teach *something* :)
08:47:15 <Marvin--> just not Java, and not the second half
08:48:52 <Igloo> :-/
08:51:33 <isomer> you mean you don't *love* java??
08:51:42 * isomer stares with mock incredulity
08:52:28 <isomer> c'mon....the b0rked type system... the b0rked exception model...
08:53:16 <Marvin--> I think you summed it up pretty well ;)
08:53:40 <Marvin--> oh, and having students who want to learn java because java is kool and they can become webmonkeys and make lots of money
08:57:31 <isomer> i guess that's just the icing on the cake, huh?
08:59:06 <isomer> it's pretty much beyond me why a university would use java as a primary teaching language. one or two courses...fine. it's popular and can get people jobs...but a while friggin curriculum? please
09:00:39 <Smerdyakov> isomer, Java is the best choice among "popular" languages. The problem is faculty too unskilled or short-sighted to see that popularity is not the best criterion for education.
09:02:47 <Smerdyakov> Hm. What do y'all think about creating a general web site/Internet hub for advocacy and information on practical uses of functional programming and other things thought traditionally to be "purely academic"?
09:02:56 <isomer> i suppose compared to C++, java is a bit easier to pick up -- in the same way that a refrigerator is somewhat easier to pick up than a truck
09:05:31 <Marvin--> isomer: well, the first programming course here is two parts, one part Haskell, one part Java
09:05:41 <Marvin--> (used to be SML and Ada :)
09:07:20 <isomer> well that's alright! the uni i graduated from switch from smalltalk/scheme to 100% pure java (ugh)
09:07:40 <isomer> happened when all the really good profs left...
09:07:42 <Marvin--> well, this is GÃ¶teborg, of course we do Haskell ;)
09:08:17 <isomer> cool
09:08:55 <isomer> you know a friend of mine teaches at that uni, and he told me that people actually graduate knowing nothing but javascript + some java. scary thought...
09:09:28 <Marvin--> ehhh, I have never seen javascript anywhere here
09:09:41 <Smerdyakov> isomer, these people are not CS majors, I hope!
09:09:53 <Smerdyakov> isomer, that level of knowledge would be impressive for an English major. ;)
09:10:07 <Marvin--> there are quite a few CS *like* educations here, too
09:10:37 <isomer> uh, they ARE cs majors. it's quite frightening.
09:10:39 <Marvin--> There's CS, and CE which are pretty similar, then there's IT, there's system science, informatics and a whole bunch of other crap too
09:10:51 <Marvin--> isomer: at Chalmers or at GÃ¶teborg University?
09:10:57 <isomer> Carleton
09:11:00 <isomer> in canada
09:11:07 <Marvin--> uh
09:11:11 <Marvin--> I thought you were talking about GÃ¶teborg
09:11:12 <isomer> and you can graduate with an honours thesis that's little more than a book report
09:11:23 <isomer> oh, you mean a real school? nah...
09:11:54 <isomer> sad because it used to be a top-notch comp sci program. 
09:12:20 <Marvin--> brb, going to fetch my laundry
09:12:33 <Marvin--> ("hooray")
10:37:43 <Innervision> Heffalump: hi!
10:37:49 <Heffalump> hi
10:38:26 <Innervision> here i am, fighting against my rusted brain to get to understand monads...
10:42:20 <Marvin--> "here I am, brain the size of a planet..."
10:42:27 <Heffalump> :-)
10:42:28 <Innervision> Marvin--!!!
10:43:01 <Innervision> Marvin-- you are one of my kin! everybody else thinks marvin is derived from the little Looney Tunes martian...
10:43:28 <Marvin--> Innervision: heh :) others associate the nick with south park
10:44:04 <Innervision> Marvin-- i didn´t know that... seems that nobody remembered the Paranoid Android
10:44:48 <Marvin--> I watched through the entire TV series with a couple of friends a few weeks ago :)
10:45:21 <Innervision> Marvin-- there is a TV series?? :/
10:45:26 <Marvin--> yep :)
10:45:52 <Innervision> Marvin-- i had to read the books! :P
10:46:01 <Marvin--> the feeling of it is much like the radio show
10:46:26 <Marvin--> of course, it's horribly low budget, has bad actors and horribly horribly bad decor :)
10:46:41 * Heffalump assumed it was the paranoid android
10:47:20 <Innervision> Heffalump: i think (and assumed) that Marvin-- is talking about the "Hitchhickers guide to the galaxy" series...
10:47:35 <Heffalump> yes, Marvin the paranoid android
10:47:37 <Marvin--> yes, of course
10:48:35 <Innervision> Marvin-- do you have any idea whether the Radiohead song has anything to do with Marvin?
10:50:16 <Marvin--> what song?
10:50:20 <Marvin--> (I guess that'd be "no idea")
10:50:26 <Innervision> nopp
10:50:52 <Innervision> "Paranoid Android"... in the "OK Computer" album...
10:51:06 <Innervision> soo... you are not very mad about Radiohead i see... :P
10:53:48 <Marvin--> no :)
10:54:25 <Innervision> mhh... what kinda music do you listen to?ç
10:56:47 <Marvin--> jazz, blues, metal
10:56:50 <Marvin--> classical
10:57:23 <Innervision> Marvin-- the you need to listen to Radiohead... it doesn't fit into any of those cathegories...
11:05:17 <keverets> it's more in the "i want to kill myself" category...
11:06:19 <Innervision> keverets nope... it depends on your state of mind. i mix that with System Of A Down, Dave Matthews, Prodigy, Pearl Jam... cannot be that harmful ;)
11:11:44 <Heffalump> arse, does Haskell have no infinite precision floating type?
11:12:04 <Heffalump> oh, that'd be silly. ahem.
11:12:28 <Heffalump> but one that had infinitely large or small exponents would be nice.
11:12:44 <Innervision> Heffalump I guess there's should be an extension...
11:12:59 <Heffalump> well, I could write one I guess.
11:13:12 <Heffalump> but Igloo has just done the calculation I wanted anyway
11:13:37 <Innervision> :D
11:14:06 <Igloo> It has Rational, but you really don't want to be using it  :-)
11:14:37 <Heffalump> is it an instance of Floating?
11:14:39 <Heffalump> ah, no.
11:14:41 <Heffalump> and no, I don't :-)
11:14:42 <Innervision> Igloo really... a lil pain...
11:15:08 <Igloo> What do you want a Floating instance for?
11:15:37 <keverets> would it be silly to have arbitrary precision floating type?
11:16:00 <Innervision> keverets it would be quite useful indeed...
11:16:04 <Heffalump> using stirling's formula
11:16:10 <isomer> anyone know what the state of the wxwindows haskell binding is? usable/working/stable...?
11:16:11 <Heffalump> I wasn't expecting the answer to be as low as 75K
11:16:24 <Igloo> Does that do something cunning with logs or something?
11:16:31 <Heffalump> stirling n = sqrt (2*pi/(n+1)) * exp (-n-1) * ((n+1) ** (n+1))
11:16:35 <Heffalump> calculates factorials
11:16:43 <Igloo> Decimal search up to 2^32 is fine by hand
11:16:56 <Igloo> Ah, right
11:16:58 <Heffalump> really? I didn't expect that.
11:17:13 <Innervision> isomer use Python for that.. :/
11:17:22 <Heffalump> I could have just rearranged my use of the formula to keep everything within range
11:18:01 <Darius> Heffalump there's an exact reals library in haskell-libs
11:18:27 <Heffalump> I didn't actually want exact, I just wanted it not to give up when my numbers got really large
11:18:34 <Heffalump> anyway, I'm off to the pub
11:18:40 <Igloo> Oh, I guess if I'd tried large numbers just all the computation would have been slow
11:19:00 <Igloo> When I said it was fine by hand I meant running it on different values
12:20:15 * Igloo crosses appendages as I get to half way through building the stage 2 compiler
12:21:53 <Darius> Have you tested the stage 1 compiler?
12:26:05 <Igloo> No, but I'm reasonably certain only a packaging error can screw it up now
12:33:06 <Marvin--> and packaging errors never occur, oh no :)
12:34:28 <andersca> rrrRRRRRRRRRRr
12:34:29 <andersca> Avast!
12:34:51 <Marvin--> switched keyboard again, andersca?
12:35:04 <andersca> r! RRRRRrrrrRRRRR!
12:59:48 <Riastradh> RrRRRrr?
13:01:12 <Marvin--> I didn't know there were question marks on that keyboard
13:02:06 <Riastradh> rRrrrRRRRRr.
13:02:14 <Marvin--> or full stops :)
13:13:16 * hdaume ughs
13:22:12 <sylow> wowie zowie
14:41:54 --- mode: calkins.freenode.net set +b flamer!*@*
15:12:38 <Igloo> Oh bother, I told it to make a binary-only upload
15:13:15 <Heffalump> of what?
15:13:20 <Igloo> GHC
15:13:32 <Heffalump> sparc?
15:13:36 <Igloo> Yeah
15:13:52 <Heffalump> so you have real magic working packages?
15:14:09 <Igloo> Dunno, I'll test in a minute
15:14:49 <Heffalump> oh, you haven't uploaded, just made the packages, right
15:15:00 <Igloo> Yeah
15:19:48 <kaol> www.nomaware.com seems to be down...
15:26:39 <elmex> hm
15:26:41 <elmex> yay
15:26:48 <elmex> big blackout in usa
15:27:42 <Heffalump> yay?
15:28:13 <elmex> dunno
15:28:16 <elmex> sounds like fun
15:28:24 <Heffalump> no internet!
15:28:43 <elmex> who cares? get out book and candlelights and wait until the power is back
15:28:52 <Heffalump> no internet!
15:29:02 <Heffalump> how could you live?
15:29:28 <elmex> Heffalump: the big blackout is a tactic against that new windows virus ;)
15:29:50 <Jerub> where in the usa? one city or multiple states?
15:29:52 <elmex> i can cope with some hours of no internet
15:29:57 <Heffalump> a lot of the Eastern area
15:30:05 <Heffalump> Niagara area (and several hundred miles around)
15:30:08 <elmex> Jerub: new yoark, torontto
15:30:10 <Heffalump> including Toronto, New York etc
15:30:14 <elmex> Paris
15:30:18 <Darius> ah, -north- east
15:30:20 <elmex> Tokyo
15:30:20 <Heffalump> that's in France.
15:30:25 <Heffalump> That's in Japan.
15:30:27 <elmex> Peking
15:30:31 <Heffalump> That's in China.
15:30:33 <elmex> Hildesheim ;)
15:30:42 <Heffalump> I don't know where that is.
15:30:54 <elmex> Hildesheim is as big as Shanhai
15:31:04 <Darius> as crowded too?
15:31:07 <elmex> it's the absolute centre of boring people 
15:32:01 <elmex> the fun thing is, that they can send tv-pictures from the blackouted areas
15:32:05 <elmex> (switch on cnn)
15:32:06 <elmex> ccn)
15:32:13 <elmex> whatever that news channel is named
15:33:15 <elmex> well, anyways, i will see some docu in tomorrows news.. i will go to bed and think about the people there without air-conditioners
15:33:18 <elmex> gn8
17:00:12 * Igloo giggles at Hal in g-h-bugs
17:02:39 <hdaume> Igloo: sigh
17:46:37 --- mode: niven.freenode.net set +o Heffalump
17:46:37 --- mode: bradbury.freenode.net set +b flamer!*@*
17:46:43 --- mode: niven.freenode.net set +o Heffalump
17:46:43 --- mode: acamar.freenode.net set +b flamer!*@*
17:46:56 --- mode: orwell.freenode.net set +b flamer!*@*
18:52:09 --- mode: niven.freenode.net set +o Heffalump
18:52:09 --- mode: pratchett.freenode.net set +b flamer!*@*
20:35:52 <flippo> @yow
20:35:53 <lambdabot> My life is a patio of fun!
20:49:15 --- mode: niven.freenode.net set +o Heffalump
20:49:15 --- mode: acamar.freenode.net set +b flamer!*@*
20:52:45 <Cale> Aug 14 13:10:27 <Cale> ooh, brownout
20:52:45 <Cale> Aug 14 13:11:53 <FiReMaGe> eh, your site is lagging
20:52:45 <Cale> Aug 14 13:12:16 <FiReMaGe> or im having problems..
20:52:45 <Cale> Aug 14 13:13:29 <-- Cale has quit (Ping timeout: 180 seconds)
20:53:05 * Cale got caught by the massive blackout
20:54:01 <Cale> as you can see, I got that message off exactly 182 seconds before the ping timeout, which means that my computer died 2 seconds later.
21:00:43 <Jerub> *grin*
21:00:48 <Jerub> I need a paper to read.
21:02:18 <Jerub> heh - google for 'reafactoring grammar ebnf' and I get my old lecturer on the first page of hits.
21:04:14 <Smerdyakov> Because he's one of the few people who can't spell "refactoring"? ;)
21:06:01 <Jerub> well, I'm lagged so I didn't edit my satement here.
21:06:05 <Jerub> ;)
21:07:25 <Jerub> hmmm StrategoXT might be the thing I look at next.
21:09:22 <Smerdyakov> Look at in what sequence of events?
21:10:22 <Jerub> reading appers.
21:11:08 <Jerub> papers.
21:11:20 <Smerdyakov> Reading papers why?
21:11:30 <Jerub> main topic I'm looking at the moment is language implementation.
21:11:40 <Smerdyakov> Why?
21:12:25 <Jerub> I'm having some fun writing a compiler hat targets the parrot virtual machine.
21:12:35 <Jerub> (perl6's virual machine)
21:24:47 <Smerdyakov> Oh. I just realized you are writing a compiler hat. Can I have one, too?
21:31:06 <Jerub> *wink*
21:31:26 <Smerdyakov> That would be pretty awesome.
21:31:31 <Smerdyakov> I'd walk around with a compiler on my head.
21:31:37 <Smerdyakov> And compile things like I hadn't a care in the world.
21:32:03 <Jerub> 14.95 for you I give you 2 for $20. You like hat.
21:32:03 * Jerub brandishes hat.
22:26:32 <Smerdyakov> I don't get it. Why is Freenode so quiet around this time? :\
22:37:39 <Cale> Because it's night in North America
22:45:03 <Smerdyakov> So? Where did all the Europeans go?
23:31:37 <dennisb> Smerdyakov: it's 8:30 AM in sweden
