00:01:11 <Darius> @prelude span
00:01:12 <lambdabot> *** "span" prelude "Haskell Standard Prelude Dictionary": text follows
00:01:12 <lambdabot> span
00:01:12 <lambdabot>   span ::  (a -> Bool) -> [a] -> ([a],[a])
00:01:12 <lambdabot>   span p []            = ([],[])
00:01:14 <lambdabot>   span p xs@(x:xs')
00:01:14 <Darius> @prelude break
00:01:15 <lambdabot>   	 | p x       = (x:ys, zs)
00:01:17 <lambdabot>   	 | otherwise = ([],xs)
00:01:19 <lambdabot>                          where (ys,zs) = span p xs'
00:01:21 <lambdabot> [2 @more lines]
00:01:25 <lambdabot> *** "break" prelude "Haskell Standard Prelude Dictionary": text follows
00:01:27 <lambdabot> break
00:01:29 <lambdabot>   break ::  (a -> Bool) -> [a] -> ([a],[a])
00:01:31 <lambdabot>   break p              = span (not . p)
00:24:37 <Darius> @prelude reads
00:24:38 <lambdabot> *** "reads" prelude "Haskell Standard Prelude Dictionary": text follows
00:24:38 <lambdabot> ReadS
00:24:38 <lambdabot>   type ReadS a = String -> [(a,String)]
00:24:39 <lambdabot> reads
00:24:41 <lambdabot>   reads ::  Read a => ReadS a
00:24:43 <lambdabot>   reads         = readsPrec 0
02:12:32 * shapr boings
02:13:32 * Jerub waves to shapr.
02:13:37 <shapr> hi Jerub 
02:13:39 <shapr> what's up?
02:13:52 <Jerub> just chill'n.
02:14:20 <sjj> saturday night in Brisbane
02:14:21 <Jerub> hows yourself?
02:14:23 <sjj> how fun!
02:14:32 <shapr> I'm bouncy
02:14:36 <sjj> Jerub: I take it you stay away from the Ekka?
02:15:06 <Jerub> sjj: I'd been 3 times.
02:15:14 <sjj> this year?
02:17:32 <Jerub> yeah
02:17:38 <Jerub> inlaws are rna members.
02:17:42 <Jerub> free entry.
02:17:50 <Jerub> the fireworks were good.
03:58:52 <Igloo> Well, the good news is GHC now builds on sparc. The bad news is that it doesn't on i386  :-)
04:02:59 <jao> Igloo: hi. how comes that the ghc6-doc deb does not contain the users guide?
04:04:28 <Igloo> Do you not have a /usr/share/doc/ghc6-doc/html/users_guide?
04:05:06 <jao> nope
04:06:17 <Igloo> What do "dpkg -s ghc6-doc | grep Status" and "dpkg -s ghc6-doc | grep Version:" say?
04:06:49 <Igloo> Oh, you're right, it seems to have disappeared
04:06:58 * Igloo was looking at an old version
04:07:17 * Igloo will look into it
04:07:38 <jao> yep. Status: install ok installed. thanks
06:53:53 <sjj> Jerub: damn, 3 times in a year, how can you stand it?-)
07:18:12 <o3> Igloo: i just thought ... you know, if there's a CSyntax.hs file, you could construct an AST for a C program, and compile and link that into the final haskell program during the compilations stage
07:18:18 <o3> <- sick puppy
07:23:04 <o3> hmm, you could even have inline C in a haskell function
07:23:12 <o3> how very wrong :)
07:38:47 <Igloo> o3  :-)
07:39:26 <Igloo> And of course CSyntax would have ASMSyntax inside it...  :-)
07:39:58 <o3> sweet!
07:41:26 <o3> Igloo: the more I use TH, the more i'm convinced that haskell needs something like multi-line strings (ala python's """ or perl/shell's <<)
07:42:04 <o3> ditto for strings which don't like escape sequences, like perl's 'foo' or python's q"foo"
07:54:51 <Igloo> There's no particular reason (apart from confusing unlitters) why "" can't be multiline, although an alternative which hade more sensible newlines like << might be nice
07:55:01 * Igloo finds it generally, not just with TH
07:55:45 <o3> Igloo: my motivating reason is better support for regexes
07:55:59 <o3> which is the main reason perl is so attractive, IMHO
07:56:28 <o3> just having a string which doesn't have escape characters would make it so much nicer to write them
07:56:37 <Igloo> *nod*
07:56:52 <o3> maybe i'll bring it at HIM
07:57:55 <innervision> sorry for the offtopic question... but... has anyone tried wheter www.flashmail.com is up?
08:10:42 <Smerdyakov> o3, what about the usual ML quotations mechanism?
08:12:29 <o3> Smerdyakov: i don't know about that.  how does it work in ML?
08:13:16 <Smerdyakov> `My name is ^x.` evaluates to [QUOTE "My name is ", ANTIQUOTE x, QUOTE "."]
08:13:32 <Smerdyakov> You can use whatever characters you want inside the `'s.
08:14:26 <o3> Smerdyakov: nice
08:15:11 <Smerdyakov> It's meant for easy interaction with object languages (in the sense of the opposite of meta language) and was in a really early version of ML.
08:16:13 <o3> Smerdyakov: it'd be nice to have something like that in haskell.  would regex support in particular much niceer!
10:34:50 <o3> yay, ghc compiled
12:56:55 <Lunar^> Did someone already used WASH ?
16:01:50 <hdaume> hi guys
16:14:39 --- mode: calvino.freenode.net set +b flamer!*@*
17:11:20 <Verbed> @yow
17:11:20 <lambdabot> If elected, Zippy pledges to each and every American
17:11:20 <lambdabot>  a 55-year-old houseboy...
18:04:16 <innervision> fede21: loooser :P
18:04:26 <innervision> Heffalump u there?
18:04:44 <innervision> fede_BY_THE_WAY that didn't make things better... :/
18:30:19 * Heffalump appears briefly
18:31:03 * Jerub gasps.
18:32:59 <Heffalump> hmm?
18:33:25 <Jerub> you're soo .. brief!
18:34:32 <Heffalump> clearly :-)
19:46:18 <Darius> ah, reading LISP papers from back in the day, "one cannot write (SETQ (CAR X) 'B) to get the effect of (RPLACA X 'B)"
