03:10:39 <prologic> Hey I got an interesting question for you guys, concerning compilers/interpreters and FPL's. How small a FPL could you start off with to have a functional and usefull FPL ?
03:13:55 <whee> the lambda calculus? :)
03:14:35 <prologic> hrmm
03:15:40 <prologic> what would the minimum subset of Haskell you'd need to implement for it to be usefull :) ?
03:16:06 <prologic> would you have to define some basic operators inside the interpreter/compiler
04:00:55 <ac_school> hello
06:09:57 <noshadow> Is there an nice implementation of an free abelian group around? best as plus-monad or anthing like this.
06:56:42 <reffie> is there a mod_haskell ?
07:02:13 <Lunar^> I think so
07:02:19 <Lunar^> You may try WASH also
07:02:45 <reffie> WASH?
07:03:17 <Cale> yeah, http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
07:04:09 <reffie> tnx
07:43:18 <noshadow> Do I guess right, that I cannot make Blablub an and instance of Monad, if I have to define Blablub via data (Eq t) => Blablub t = Bla t ?
07:52:04 <Cale> why not?
07:54:52 <noshadow> Cale: how do I do?
07:55:25 <noshadow> My Blablub is actually a (FormalSum coeff), and I can instance Num coeff => Monad (FormalSum coeff) where
07:55:49 <noshadow> but where do I place this restriction to the second argument, to the one the monad would get.
07:56:49 <Cale> I'm not sure, I was just wondering why it seemed impossible. I'll play around with it and see if I find anything.
07:57:15 <noshadow> Cale: I guess for this to work the definition of monad needed already the restriction.
07:58:28 <noshadow> Currently Monad is a m, that fullfits some rules. This rules are universal, and I so no reason to tell im its a monad but the rules would only fit then the as and bs of the return and >>= arguments' type fullfit a requirement..
08:11:46 <Cale> http://www.dcs.gla.ac.uk/mail-www/haskell/msg00284.html seems related
08:14:05 <noshadow> Cale: That's what I though about. But when I change the Monad-definition, there is no reason to use Monad at all...
08:32:43 <Lunar^> What would really need porting GHC to linux-powerpc ?
08:33:09 <Lunar^> Doing an unregistred port doesn't seem so hard after looking at the docs
10:08:34 * andersca bounces
10:08:34 <andersca> hey hdaume
10:08:49 * Riastradh dribbles andersca.
10:09:57 <hdaume> hey
13:29:43 <Zeenix> hi guys
13:29:51 <Riastradh> Hi.
13:36:31 <Zeenix> is haskell better than scheme? are they in competition at the first place?
13:36:42 <Darius> depends and no
13:36:57 <Riastradh> Both of those depend on what you like.
13:37:21 * Riastradh has Scheme, Haskell, and Erlang in his top three in an unspecified order, with ML following closely behind.
13:37:56 * hdaume has Haskell, OCaml, Perl as top 3 :)
13:38:28 * Riastradh projectile vomits at the hdaume's third.
13:38:55 <Riastradh> (and that sentence works even if you take out the 's -- he's Hal Daume III...)
13:38:59 <Darius> Haskell and C++ seem to be my favorite languages as they are the only ones I've continuously used, though I've barely used C++ since I started Haskell
13:39:02 * Zeenix doesnt understand why everyone is choosing functional-langs only..
13:39:12 <Riastradh> Zeenix, all the others suck.
13:39:20 <Riastradh> Well, I can't say that about logic languages, because I don't know any.
13:39:29 <Darius> Prolog is a nightmare.
13:39:38 <Riastradh> (unless you count Erlang as a logic language, which it used to be)
13:40:08 <Darius> I don't think so.  It used to be -implemented- in prolog, but I don't think it ever had many logic-y things.
13:40:12 <Darius> I may be wrong.
13:40:13 <Cale> Prolog-land is a nice place to visit, but I wouldn't want to live there, I don't think.
13:40:16 <Zeenix> well, can we make kernel modules in any of these?
13:40:20 <Riastradh> YES!
13:40:25 * Riastradh points at Schemix.
13:40:51 <stepcut> is vhdl considered a logical language?
13:41:02 <Darius> Constraint systems though seem nice.
13:41:11 <Riastradh> Logic_al_ or _logic_?
13:41:20 <Riastradh> I think Scheme is pretty logical, but it's definitely not a logic language.
13:41:36 <Riastradh> Prolog, on the other hand, doesn't seem very logical from what I've heard of it, but it's definitely a logic language.
13:41:37 <stepcut> err, logic as in prolog. (not paying attention to what I am typing)
13:47:26 <Zeenix> i am getting confused.. are 'rule-based' and 'functional' synonyms?
13:47:36 <ibid> no
14:32:55 <Zeenix> is List is not a 'rule-based' language?
14:33:00 <Zeenix> s/is/so
14:33:13 <Riastradh> 'List?'
14:33:13 <hdaume> Lisp?
14:33:23 <Zeenix> yeah List, sorry
14:33:27 <Zeenix> Lisp
14:33:38 * Zeenix hits his head with a big hammer
14:33:38 <hdaume> no, it's a functional language
14:33:46 <hdaume> ...sort of.... :P
14:34:01 <Zeenix> well, its used in AI thats why i thought..
14:34:06 <hdaume> it's a language which supports and (to some degree) encourages functional-style programming
14:34:21 <Riastradh> No, it's a family of languages.
14:34:25 <hdaume> well true
14:35:00 <Riastradh> Scheme, a member of that family, and the community thereof encourage functional programming a fair bit more than most other Lisps.
14:35:34 <Cale> Lisps in general are sort of halfway in between functional and imperative programming, it seems.
20:00:06 <mvw> hi folks, anyone knows why the icfp contest web site has not published the funny results yet?
20:38:49 <mvw> lunar: hi, you know anything about icfp2003 contest results?
20:46:16 <Pseudonym> Nobody knows.  It changes practically every day.
21:20:50 <flippo> @yow
21:20:51 <Darius> polymorphic type inferencer for the symmetric lambda calculus seems to work; doesn't handle recursion though the evaluator doesn't care
21:20:51 <lambdabot> Yow!  I like my new DENTIST...
21:29:01 <Pseudonym> I have to ask.  What's the symmetric lambda calculus?
21:36:29 <Cale> heh, lambdabot's quote seems somewhat apropos. :)
21:45:54 <Darius> "Declarative Continuations and Categorical Duality" Filinski '89
21:46:28 <Darius> It aims to put continuations on even footing with values.
21:46:48 <Darius> (therefore functions become quite distinct from values)
21:48:05 <Darius> callcc in it (using ! for the ascii-ification of a down arrow, Filinski uses ?) is: k<=f=>k!(f^({}<=k))
21:53:16 <Darius> er k<=k!(f=>f^({}<=k))
22:16:54 <Darius> Damn.  Almost lost a lengthy post just before I sent it.  Good thing that was only a light brownout.
22:17:16 <Riastradh> Darius, UPSs are nice...
22:22:15 <Darius> I imagine, I forgot to re-add the "again" to the above.
23:25:34 <Darius> Pseudonym: Isn't DataStructureFreeTransformation just the normal way you'd make an abstract data type.  Factoring listCase into null/head/tail you get the usual ADT representation of lists.
23:28:24 <Pseudonym> Darius: Uhm...
23:28:35 <Pseudonym> What is an abstract data type?
23:29:10 <Pseudonym> OK, let me put it this way.
23:29:17 <Pseudonym> Consider FiniteMap.
23:29:31 <Pseudonym> You want a way to iterate over all of the elements in the map.  That is:
23:30:09 <Pseudonym> fmToList        :: FiniteMap key elt -> [(key,elt)]
23:30:11 <Pseudonym> Right?
23:30:23 <Darius> That's one way, yes.
23:30:26 <Pseudonym> Yes.
23:30:33 <Pseudonym> I argue that this is a "normal" way, too.
23:30:48 <Pseudonym> The other way would be this:
23:31:07 <Pseudonym> fmToList :: FiniteMap key elt -> Iterator (key,elt)
23:31:34 <Pseudonym> iteratorCase :: Iterator a -> (a -> Iterator a -> b) -> b -> b
23:31:37 <Pseudonym> Or something like that.
23:32:39 <Pseudonym> We generally don't do that in Haskell, because iterators (as you would use in strict languages) are basically there to simulate lazy evaluation, which in Haskell you have for free.
23:33:03 <Pseudonym> So no, I don't think it's "the normal way".
23:33:29 <Pseudonym> The point of DataStructureFreeTransformation, though, is that once you've abstracted out the data constructors, you no longer really "need" them.
23:33:56 <Pseudonym> If you have higher ranked polymorphism, you don't need algebraic data types.
23:35:46 <Pseudonym> DataStructuresNotFunctions and FunctionsNotDataStructures are both appropriate in different circumstances. :-)
23:38:12 <Darius> The intent of the page seem(s/ed) to be aiming at getting rid of explicit uses of pattern matching/constructors as they are 'implementation'.  The higher-order representation looks more like just a particular 'implementation' you could use.
23:38:36 <Darius> Freedom to change implementation as long as you maintain the interface/invariants is one of the traits of any abstract data type.
23:39:04 <Pseudonym> The intent of the page is to show a particular refactoring/program transformation method/call it what you will.
23:40:12 <Pseudonym> It's not necessarily to show if/why you should use it.
23:40:40 <Pseudonym> One of the interesting things about Haskell is that there is a kind of duality between data and functions.
23:41:50 <Pseudonym> I sometimes find it convenient to prototype some kinds of code as data structures, where you then write an interpreter which runs over the data structure.
23:42:18 <Pseudonym> This is one way to then get rid of the data structure when you don't need it any more.
23:42:40 <Darius> Well as a transformation, it is similar to churchification or refunctionalization.
23:42:57 <Pseudonym> Right.
23:43:18 <Pseudonym> And of course it's not much use by itself.
23:43:26 <Darius> (that list representation is what @eval used to use)
23:44:09 <Pseudonym> It's also a trick that you can use to get your compiler to optimise your code further.
23:44:20 <Pseudonym> GHC has a great inliner, but not a very good deforester.
23:45:08 <Darius> Well, I'm not too sure how useful defunctionalization is to a language user, but refunctionalization looks as if it could increase modularity while decreasing code size.
23:45:58 <Pseudonym> Well, defunctionalisation I think is useful when prototyping code.
23:46:14 <Pseudonym> See http://haskell.org/hawiki/DerivingFromSpecifications
23:46:41 <Darius> The transformation? or using DatatypeNotFunctions?
23:47:04 <Pseudonym> I mean DataStructuresNotFunctions.
23:47:34 <Pseudonym> If your _abstract_ view is as functions, though, DataStructuresNotFunctions is a kind of a defunctionalisation as an implementation technique.
23:50:39 <Pseudonym> I think.
23:50:45 <Pseudonym> I'm using the terms very loosely. :-)
23:58:41 <Darius> I think I removed bird tracks once and someone put them back
23:59:10 <Pseudonym> Well I'm removing as many as I can before anyone else gets a chance.  Mwhahahaha!!
23:59:19 <Pseudonym> Besides, I'm mostly doing them to my own work.
