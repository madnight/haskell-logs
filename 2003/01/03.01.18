00:53:15 * shapr bounces
00:53:25 <shapr> good morning!
01:03:40 <dark> shapr: I'm trying to breathe new life into uncc.  But it's a mess :)  Apparently Haskell makes worse-smelling messes than C.
01:04:13 <shapr> heh
01:04:24 <shapr> got any code online?
01:04:29 <shapr> or a cvs tree I can look at?
01:04:36 <dark> Instead of confusion about which module is in charge of memory allocation, I have confusion about what Add really means.
01:04:48 <shapr> ha!
01:05:05 <dark> "That depends on what the meaning of Eq is"
01:05:23 * shapr laughs
01:05:33 <dark> It's still up on http://www.xs4all.nl/~dark/uncc--1.0--patch-4.tar.gz
01:05:53 <dark> What I'd like to do is start over, but rescue the grunt work I've put into the disassembler.
01:07:26 <dark> Actually I have some local patches to it that never went anywhere.  Which is part of the problem :)
01:07:31 <shapr> ah
01:07:45 <dark> I think it's just first-haskell-project-itis
01:11:22 <shapr> this is heavy duty stuff
01:13:32 <dark> shapr: uncc?
01:13:42 <shapr> yah
01:14:15 * shapr reads IA32.hs
01:15:32 <dark> The main design decision I'm wondering about is whether I should translate directly from machine code to expression trees (like now), or have an intermediate assembler-like representation as a list of opcodes with operands.
01:16:03 <shapr> what difference would it make?
01:16:05 <dark> The second form would make it easier to do some kinds of heuristics (like detecting specific opcode patterns as being associated with certain compiler tricks), but it would be a whole extra layer.
01:16:50 <dark> The difference is most visible with for example the PUSH instructions.  I could translate it to a set of stack operations, but that obscures the basic meaning of "push a function argument" of the x86 calling convention.
01:18:14 <dark> Going directly to expression trees obscures such things... but makes it easier to use more powerful general techniques, such as keeping track of what values are on the stack.
01:18:54 <shapr> well, what's the target audience of uncc?
01:19:44 <dark> Not sure :)  But its purpose is to assist conversion of machine code to C code.
01:20:32 <dark> And at first I'm going to unashamedly target it for gcc, linux, and ia32.  But I'll want to expand it when I come across interesting binaries for other platforms.
01:21:13 <dark> (Note the "assist" -- I expect it to work by having the human operator provide and extend a description file that guides the decompilation process.  Stuff like defining struct layouts once they're been puzzled out, then rerunning the decomiler.)
01:22:01 <shapr> it sounds like you'll want to use both forms of decompilation at different times
01:23:05 <dark> Yeah but I'm wondering if I could use pattern-recognition on the expression trees instead.  That way the decompiler won't be fooled by code that manages the stack "by hand", for example.
01:23:09 <shapr> what about picking whichever one is more likely to encourage you to use uncc more?
01:23:27 <dark> (One thing I'm keeping in mind is that the targeted binary might be malicious code that's specifically written to fool the decompiler)
01:24:02 <dark> shapr: That sounds like a winning strategy :)
01:24:26 * shapr grins
01:24:43 <dark> Hmm... one advantage of an intermediate representation is that it makes it easier to fall back to simply printing assembly code in places where full decompilation fails.
01:25:21 <dark> Then the human operator can try to figure it out, and maybe even specify that asm statements are fine.  (For example, in a kernel module)
01:25:25 <dark> One of my first decompilation-by-hand projects was a binary-only linux kernel module :)
01:25:57 <shapr> I'd love to find the smp deadlock hidden in the nvidian binary driver >:-|
01:27:50 <dark> On ther other hand, falling back to code like: * (uint32_t *) esp = 10; esp -= sizeof(uint32_t); isn't actually much worse than falling back on asm("push %0" : : 0 "r", 10)
01:28:33 <dark> shapr: It'd be very cool to find it and submit a patch :)  Watch them go ballistic.
01:28:48 * shapr runs uncc on nvidia.o
01:28:55 <shapr> hmm
01:30:48 <dark> Heh, you can't actually _run_ it yet :-)
01:31:16 <shapr> well, it gave me something short
01:31:19 <dark> You'd get farther with objdump -phD and ndisasm.
01:31:42 <shapr> yes, that gives me more output
01:31:48 <dark> Yeah, currently its main function just tries to disassemble something short, to see if the disassembler works at all.
01:32:14 <shapr> so, where to next?
01:32:16 <dark> It does exercise the ELF parser onthe file you give it, though.
01:32:29 <dark> shapr: For nvidia or for uncc? 
01:33:13 <shapr> uncc
01:33:29 <shapr> the nvidia project does sound neat
01:33:55 <shapr> uncc would be more generally useful
01:34:03 <dark> I think I'll start by reworking Expr and Stmt, then fixing the resulting breakage in IA32.
01:34:53 <dark> Then I'll try to make it so that it prints _something_ for most binaries, even if it doesn't detect where functions start and end yet.  It should be possible to pretend it's all one big function with lots of gotos, by leaving "call" instructions as-is.
01:35:06 <dark> That should already be much easier to work with than a straight disassembly.
01:35:19 <shapr> yah, I want more something :)
01:35:32 <dark> Hmm, except for the way I handle registers :)
01:35:50 <shapr> ?
01:36:13 <dark> A disassembler would say "mov al, 0".  uncc will also describe the effects on ax and eax, as if they're separate variables.
01:36:36 <dark> the idea is that a later pass of value lifetime analysis will eliminate the assignments that aren't used.
01:37:14 <dark> But until that is done, uncc output will be way more cluttered :)  In fact, a simple add instruction will also generate statements that set the flag values.
01:38:11 <shapr> sounds neat
01:38:38 <dark> I think I'm going to be lazy and only do flag values that most compilers actually use.  So no parity bits.
01:38:51 <dark> the parity flag would be a pain to code in C :)
01:39:02 <dark> Unless there's some magic incantation for it.
01:39:21 * shapr has no idea
01:39:35 <dark> One of the tricky bits of uncc will be deciding which integer values are signed and which are unsigned.
01:39:44 <shapr> that i386 assembly book I read in 1992 didn't mention parity bits 
01:39:47 <shapr> or maybe I forgot 
01:39:56 <dark> You can usually tell by what kind of conditional jump the compiler uses.
01:40:09 <dark> But then you need to trace that back to where the values came from.
01:40:33 <dark> I might have to read up on how C does type coercion of operations that mix signed and unsigned values :)
01:41:16 <dark> shapr: There's one parity flag, set after most arithmetic instructions.  It reports if the number of 1 bits in the result is odd or even.
01:41:26 <dark> You can branch on it with jp and jnp.
01:41:32 <dark> I haven't ever seen a compiler use it.
01:41:56 <dark> I wonder how much effort bochs spends on calculating this bit :)
01:42:24 <dark> (bochs is an x86 emulator.  It's pretty neat, I made it run X-COM Apocalypse, v_e_r_y_s_l_o_w_l_y)
01:44:44 <shapr> I wonder what the use of that bit is
01:45:01 <dark> I guess it helped back in the days when most serial communications had parity bits.
01:45:13 <shapr> lemonodor has just gotten x-com to run on an old machine of his, is x-com immensely cool or something?
01:45:17 <dark> In fact IIRC even text files used 7-bit ascii with a parity bit at one time.
01:45:31 <dark> Yes, x-com is immensely cool :)  Especially the first. 
01:45:43 <shapr> hmm
01:45:48 <shapr> doesn't run on any emulators?
01:46:16 <dark> It's a dos game, it probably runs on dosemu if you configure it right.  Or bochs.  X-COM 3 is much more processor-heavy than the first two.
01:46:45 <shapr> hm
01:47:07 <dark> It's a turn-based squad combat game, combined with a pause-button strategy game.  You build bases, shoot down ufos when you can (or wait till they land if you're scared), then send teams of agents to go in and investigate.  That's the turn-based part.
01:47:24 <shapr> sounds neat
01:47:40 <dark> The nice thing is how the progress of the strategy game depends on what you accomplish in the tactical missions.  You have to collect alien technology to study it, and bring back live aliens if you can :)
01:48:05 <dark> It's also a brutal game.  Especially in the early missions you can expect to lose 50% of your agents if you're not careful, and 20% even if you are.
01:48:47 <dark> X-COM 3 adds a realtime version (again, with pause button) of the tactical missions, and makes the controls more squad-based than agent-based. 
01:49:10 <shapr> wow
01:49:11 <dark> X-COM 2 is mostly a repeat of X-COM 1 with different graphics and different names for the tech :)
01:50:28 <dark> Someone actually made a tool to mix and match X-Com 1 and 2, it's at http://members.aol.com/stjones/xcomutil/.  But that page is mostly for people who are already bored of winning the game.
01:55:40 <dark> Oh, there's also X-Com Interceptor, which has a similar setup except that it has first-person space combat missions instead of squad-based tactical combat.
01:56:08 <dark> I think that might be a windows game, I don't remember.  I found it a much shorter game than the others.
02:01:52 <dark> There's also X-COM Alliance, which I've never played, which seems to be a first-person shooter.
02:05:40 <Janni> hi
02:07:22 * dark wonders if he scared off shapr.
02:08:05 <Janni> dark: were you talking about Britney Sp**rs?
02:08:26 <dark> Janni: No, X-COM.
02:08:48 <dark> But don't knock Britney, I learned semiconductor physics from her.
02:09:21 <Janni> dark: how that? private lessons?
02:15:07 <dark> http://britneyspears.ac/lasers.htm
02:17:25 <dark> I think this is the best picture from it: http://britneyspears.ac/physics/basics/images/britneycbvb.jpg
02:18:11 <shapr> heh
02:20:59 <lament> ht
02:21:00 <lament> hm
02:21:19 <lament> "in an insulator there are as many electrons as there are energy levels for them to occupy."
02:21:22 <lament> I don't want to know.
03:05:41 * d33p is away: xyxo yp iyeb pemusxq lecsxocc!
03:23:57 <shapr> oops
04:23:18 * d33p is back (gone 01:17:38)
06:14:56 <Janni> can i somehow define a Int datatype with restricted bounds? in Ada that would be type MyInt = (1..31), IIRC
06:34:49 * d33p is away: xyxo yp iyeb pemusxq lecsxocc!
09:43:46 <Janni> hi
11:03:58 <Janni> back again...
12:10:10 * d33p is away: Zzz
15:48:56 <Janni> re
15:50:38 <Janni> i have a (algorithmical) problem. i need to distribute elements of different weight into containments with limited capacity
15:51:03 <Janni> there should be as less as possible containments be needed.
15:51:09 <Heffalump> DYM containers?
15:51:15 <Janni> DYM?
15:51:16 <Heffalump> sounds like the knapsack problem, anyway
15:51:20 <Heffalump> do you mean
15:51:46 <Janni> ehh.. yea, containers
15:52:17 <Janni> i just want a little hint. do i have to try almost everything out, or is there a much more efficient way?
15:52:27 <Igloo> There is a more efficient way
15:52:45 <Igloo> Can you take only a little bit of an element or do you have to take the whole thing?
15:52:49 <Heffalump> umm, isn't the general problem NP complete?
15:52:59 <Heffalump> presumably you can't otherwise it wouldn't be interesting
15:53:00 <Janni> Igloo: the whole thing.
15:53:18 <Igloo> I thought this was solved by dynamic programming in something like n^2
15:53:25 <Janni> ok, i'll spend a bit more time on thinking
15:53:42 <Igloo> If I'm wrong then what I said above might be wrong
15:54:08 <Heffalump> igloo: oh, actually you may be right
15:54:19 <Heffalump> I think a more general problem might be the NP complete one
16:02:17 <Janni> i think i really have to try everything out for the optimal distribution...
16:02:42 <Heffalump> google for the knapsack problem
16:02:59 <Janni> Heffalump: yea, but i don't want to know the solution :)
16:03:18 <Heffalump> ah
16:03:36 <Heffalump> I don't know what it is either so I can't give you any hints
16:05:09 <Igloo> I don't think I can give a less subtle hint than a suggestion of a table to build that I think is the right answer
16:16:19 <Janni> ;
16:16:47 <Janni> i have always wanted to say that. now i did. finally...
23:03:40 * d33p is back (gone 10:53:30)
