00:21:53 <creature|sleep> shapr - you about?
00:26:49 <shapr> yes
00:27:14 <shapr> how may I assist you?
00:31:43 <creature> I'm having some problems, still, with a problem I had last night.
00:31:49 <shapr> ?
00:32:07 * shapr looks at the logs
00:32:12 <creature> Ok, I've a format NewPic that's of type [Line]. Line is of type [(Int, Bool)]
00:32:25 <creature> Looking at logs would be cool, so I wouldn't have to bring you up to speed on everything.
00:32:40 * shapr reads
00:33:23 <creature> The problem in question is this line: superimpose a b = zipWith (superimposeLine) a b
00:33:31 <creature> Which as far as I can tell, should work beautifully.
00:34:05 <shapr> hm, run length encoding?
00:34:23 <creature> Que?
00:34:41 <shapr> just looking at the datatype
00:34:45 <shapr> hiya Marvin--
00:35:00 <shapr> doe superimposeLine work?
00:35:57 <creature> Yes.
00:36:06 <creature> superimposeLine :: Line -> Line -> Line
00:36:06 <creature> superimposeLine a b = zipWith (superimposeTuple) (breakLine a) (breakLine b)
00:36:42 <shapr> how does it work with unequal line lengths?
00:36:51 <creature> It doesn't have to.
00:37:26 <shapr> that's handy
00:37:45 <creature> Yep.
00:37:59 <creature> I could drop you an email consisting of what I've got, Pictures.hs, and the question sheet if you like.
00:38:00 <shapr> what's wrong with that one line?
00:38:20 <creature> I really wish I knew WTF was up with it. 
00:38:23 <creature> It should work.
00:38:29 <creature> But it doesn't.
00:38:37 <creature> Best thing is to email you and let you play with it, TBH.
00:38:47 <creature> I'm getting the same output problems as I did last night, though.
00:38:52 <creature> So if you can see the logs there, that would help.
00:38:57 * shapr reads the logs
00:39:35 <creature> I'll give you some more in a sec, when I've finished blow-drying my hair.
00:39:42 * creature is getting ready for his 9AM lecture.
00:40:02 <shapr> I've never gotten in the habit of blow drying my hair
00:40:04 <shapr> even though I should
00:40:15 <shapr> long wet hair is bad in -30° C weather
00:40:34 <shapr> our swedish teacher said it'll get colder at the end of january
00:40:36 * shapr is scared
00:41:38 <creature> Ah ha! 
00:41:42 <creature> Maybe it isn't bust after all!
00:42:03 <shapr> ?
00:42:20 <creature> No! It works! It's me being a dumbass!
00:42:39 <shapr> yay it works!
00:42:52 <creature> Yep! Yay! 
00:43:10 <creature> Which means it was at least partially my fault last night, as I did have a bug in one of my display functions.
00:45:13 <Marvin--> morning
00:46:01 <creature> Hmm@mismatched socks.
00:46:04 <creature> Oh well, no-one will notice.
00:47:03 <creature> Anyway, I'm off. 
00:47:08 <creature> Later all, cheers for the help.
00:47:11 <shapr> :-)
03:06:32 <Janni> hi
03:06:43 <shapr> hiya
03:06:46 <Janni> hi
03:07:15 <shapr> what's up?
03:07:50 <Janni> i'm still working on the HOpenGL port for FreeBSD...
05:41:58 * shapr bounces
05:45:02 * Logan impacts.
05:46:56 <shapr> hi Logan!
05:46:57 <shapr> ltns!
05:47:33 * Logan nods.
05:47:38 <Logan> Haven't been doing much haskell lately.
05:48:02 <shapr> what have you been doing? various contests?
05:48:09 <shapr> I like the new version of xmms-shell
05:48:31 <Logan> Stil coaching the school's programming team... working on http://ircquotes.org. :P
05:48:42 <Logan> Heh, about once a year I find myself with nothing to do and end up rewriting xmms-shell.
05:48:58 <Logan> This last time I kept it up for over a week, and was able to get some bugfixes and requests in.
05:49:12 <Logan> Or, rather, this last time I extended it rather than rewrite it. :P
05:49:28 <whee> haha woo, finally got CVS GHC compiled and working
05:49:44 <whee> every build for the past couple weeks has been broken in some way before :\
05:49:59 <shapr> I was very happy that I can get shuffle and repeat status out of the new version.
05:50:12 <whee> eh?
05:50:29 <Logan> shapr: I forget why I didn't have that before... maybe xmms didn't have the status functions...
05:50:37 <shapr> whee: new version of xmms-shell
05:50:45 <Logan> I have a rewrite of XMMS's control socket code that's been sitting around for over three years.
05:50:46 <whee> oh, neat
05:50:50 <shapr> I wrote xmms-shell.el 
05:50:56 <Logan> What does that do?
05:51:01 <whee> now write xmms-shell.vim :)
05:51:13 <shapr> just wraps around xmms-shell and gives access to all the functionality from inside emacs
05:51:14 <Logan> Oh, syntax highlighting?
05:51:19 <Logan> Oh, cool.
05:51:24 <shapr> it's cheesy and not very impressive imho
05:51:28 <shapr> but I do use it all the time
05:51:32 <Logan> I just use it in combination with the keybindings icewm supports.
05:51:35 <shapr> I posted it to gnu.emacs.sources
05:51:51 <Logan> When I find myself in Windows, I hate playing music, because I can't conveniently pause it, change tracks, etc. :P
05:51:52 <shapr> Logan: hey, can you write one for alsaplayer? ;-)
05:52:10 <Logan> shapr: Maybe, does alsaplayer have some sort of remote control API?
05:52:11 <shapr> XMMS requires X, and that sucks for those days when I want to do emacs code development in the console
05:52:14 <shapr> yes it does
05:52:21 <shapr> but I haven't looked at it much
05:52:32 <Logan> Then it should be possible... With the last revision, I worked on abstracting the connection code.
05:52:40 <Logan> So in theory you could implement your own class that communicates with alsaplayer.
05:52:41 <shapr> alsaplayer has a remote control api of some flavor, *and* does everything XMMS does, without needing X
05:52:46 <shapr> hm, neat!
05:52:54 <Logan> Though the class structure is probably far too XMMS-influenced.
05:53:25 <Logan> Look at session.h and playlist.h
05:53:46 <shapr> oh, I found a pissy bit about xmms-shell
05:53:57 <shapr> I'd like to use one single regexp to parse the info
05:53:58 <Logan> I made it so it can support either the old style control socket or the new one I wrote.
05:54:06 <shapr> but some line of the status output are only there when XMMS is actually playing
05:54:41 <shapr> Logan: do you do elisp?
05:54:41 <Logan> You'd rather I output "N/A"?
05:54:44 <Logan> No.
05:54:56 <shapr> for me, yes
05:55:07 <Logan> Maybe the next time I work on it. :P
05:55:11 <shapr> because then I could just assign regexp groups for each separate 'field'
05:55:12 <shapr> ok, cool
05:55:32 <shapr> if you don't end up doing that, it won't kill me :-)
05:56:21 <shapr> I had fun hacking together one function and a list of commands, which get sewed togeter via a macro
05:57:02 <shapr> (defun xsc (cmd) `(lambda nil (interactive) (xmms-shell-command ,cmd)))
05:57:07 <shapr> (global-set-key [(hyper x) p] (xsc "play"))
05:57:09 <shapr> cute, eh?
05:57:30 <Logan> I hate lisp. :P
05:57:34 <shapr> heh
05:57:50 <shapr> It's not my favorite, but I can use it.
05:58:04 <shapr> I'm looking forward to having Template Haskell in the base release
05:58:05 <shapr> that'll be great fun
05:58:18 <Logan> What can you do with it?  I haven't been following.
05:58:21 <whee> I'm looking forward to getting home early and playing with TH
05:58:40 <whee> Logan: lots more than you can imagine :)
05:58:41 <shapr> you could do "liftM5 = liftMn 5"
05:58:46 <shapr> you could do "deriving XML" 
05:58:52 <whee> Wolfgang wrote OS X Cocoa bindings in a 16kb bz2
05:59:05 <whee> it appears to generate all the fun stuff at compile time using TH
05:59:09 <shapr> smart move
05:59:25 <shapr> I think many of the preprocessors will stop being static code and move to being TH
05:59:36 <shapr> like the arrows preproc, the mdo code
05:59:40 <shapr> Logan: there's a very cool paper on it.
05:59:50 <shapr> Logan: hey, how's your education going? have you been recruited by IBM yet? ;-)
06:00:08 <Logan> I haven't been attending classes because I'm broke.
06:00:57 <shapr> oh, that sucks
06:01:00 <shapr> why are you broke?
06:01:12 <Logan> Yeah, I just now found a part time job, icky Windows programming.
06:01:31 <shapr> I went from student to broke in '92
06:01:44 <shapr> ended up doing VB
06:01:53 <shapr> haven't gotten back to school yet :-(
06:02:14 <shapr> hope to do it here in sweden
06:02:17 <shapr> where it's free
06:15:15 <Logan> I hope I can avoid VB (I don't know it at all), though there will probably be quite a bit of it. ):
06:17:40 <shapr> vb is very simple, but can make it hard to write good code.
06:20:47 <shapr> Logan: what have you been coding for fun?
06:22:55 <Logan> http://ircquotes.org :P
06:23:13 <Logan> I made a really ugly IRC bot in java, too, which confirmed my dislike of java.
06:24:00 <Logan> I've been expanding my web development skills.
06:24:23 <shapr> tried Zope?
06:24:50 <Logan> Didn't really look at it, but I did implement ircquotes in python.
06:25:13 <Logan> (and XSLT, and my friend's search engine was done in perl for another project)
06:25:22 <shapr> have you seen the Twisted server framework?
06:25:32 <Logan> Yeah, I've looked at it a little recently.
06:25:43 <shapr> what's your opinion of it?
06:25:46 <Logan> It's a bit goofy but it has a lot of code.
06:26:09 <Logan> I don't have much use for it, really.
06:26:17 <Logan> I've thought about rewriting my bot using it, but that's all.
06:26:34 <Logan> I don't want to give up apache for web services, so I'm using mod_python instead of twisted.
06:27:38 <Logan> I made my own simple web application framework.
07:06:27 * shapr notes that Haskell and PHP are not very similar
07:07:48 <Igloo> Neither are good and evil. I think there's a lesson to be learnt there.  :-)
07:09:00 <shapr> I agree.
07:09:33 <Igloo> My supervisor said I was very productive too, which is nice
07:09:50 <shapr> cool!
07:23:53 * Marvin-- throws down his pen in disgust at the number theory proofs
07:24:20 * shapr throws down his keyboard in disgust at PHP coding conventions
07:24:36 <shapr> bad programmers!
07:27:39 <Marvin--> at least I'm able to prove some of the easier propositions
07:27:50 <Marvin--> not that the easier ones are likely to end up on the exam...
07:41:18 <Marvin--> No instance for (Arbitrary Char)
07:41:19 <Marvin--> dang
07:41:56 <shapr> easy to make one
07:42:21 <shapr> it is kind of surprising though
07:43:44 <Marvin--> elements ['\0'..'\255']?
07:43:53 <Marvin--> I guess it's because it depends on what parts of Char you want to use
07:44:02 <shapr> that's true
07:44:04 <Marvin--> if you just want letters, or if you want all gory characters
07:44:20 <Marvin--> though you could do that with sized I guess
07:44:33 <shapr> for our icfp entry, we only had four, since that's what the maps used.
07:44:37 <shapr> instance Arbitrary Char where
07:44:37 <shapr>     arbitrary = oneof (map return (['.','~','#','@']))
07:44:37 <shapr>     coarbitrary = variant . fromEnum
07:45:00 <shapr> in that case, it was really handy that we could define it to be anything
07:45:13 <Marvin--> nod
07:45:37 * Marvin-- wants ghci to autocomplete identifiers :/
07:46:07 <Marvin--> bah, this generation is too good, I wanted to be mean to QC :P
07:46:22 <Marvin--> prop_WordsUnwords xs = words (unwords xs) == xs
07:50:11 <shapr> eh?
07:50:18 <shapr> yah, I want autocompletion also
07:50:31 <shapr> I could probably hack it into the interactive ghci emacs mode
07:50:58 <Marvin--> I'm trying to find a property that's nasty enough that it's false but QC claims it to be true
07:51:01 <dark> Does ghci use libreadline?
07:51:10 <Marvin--> (well, it should be simple but nasty!)
07:51:12 <shapr> I don't know
07:51:14 <shapr> hi dark!
07:51:23 <Marvin--> dark: probably, since it completes on filenames
07:51:38 <Marvin--> so yeah I guess I could implement it myself
07:53:54 <shapr> shae@thunderbird:/usr/lib/ghc-5.04.2 > ldd ghc-5.04.2
07:53:54 <shapr>         libdl.so.2 => /lib/libdl.so.2 (0x40026000)
07:53:54 <shapr>         libreadline.so.4 => /lib/libreadline.so.4 (0x4002a000)
07:55:29 <shapr> hey dark, is your Penguin Warrior source online?
07:55:39 <dark> Nope.
07:55:55 <shapr> ok
07:56:03 <dark> Today I've been busy with my other project, which is learning Latin and reading about the Roman empire :)
07:56:05 * shapr will be patient.
07:56:40 <Marvin--> completionMatches :: String -> (String -> IO [String]) -> IO (Maybe (String, [String]))
07:56:41 <Marvin--> riiight
07:57:50 <Marvin--> which of course is not documented
07:57:56 <shapr> ??
07:58:01 <shapr> that actually exists?
07:58:21 <Marvin--> hslibs/util/Readline.hsc
07:59:17 <shapr> neato
08:00:11 <Marvin--> foreign import rl_completion_matches :: Ptr CChar -> FunPtr Generator -> IO (Ptr (Ptr CChar))
08:00:11 <Marvin--> great
08:02:16 <Marvin--> setAttemptedCompletionFunction :: Maybe (String -> Int -> Int -> IO (Maybe (String, [String]))) -> IO ()
08:02:17 <Marvin--> ???
08:06:44 <Marvin--> *cough* tetrinet anyone?
08:07:35 <SyntaxPolice> does anyone know why hat doesn't work with ghc 5.04.x?
08:07:37 * shapr grins
08:07:44 <SyntaxPolice> (hi everyone, by the way :)
08:07:46 <shapr> SyntaxPolice: last I heard, it sort of does work
08:07:48 <shapr> hi SyntaxPolice!
08:08:00 <shapr> problems come from the imperfect translator of Hat
08:08:52 <Marvin--> hmm. Trying to execute a readline-using program in an interpreter using readline doesn't really work
08:08:53 <shapr> for example, sometime the hat translator thinks 1 - 1 is actually "1 (negate 1)"
08:08:55 <shapr> weird stuff like that.
08:09:08 <shapr> SyntaxPolice: look at the archives of the hat mailing list, there's good stuff there.
08:09:14 <SyntaxPolice> shapr: thanks :)
08:09:25 <shapr> sure
08:09:48 <shapr> looks like my contract work will be going to XML input for a PHP system
08:10:11 <shapr> my clients have said they're perfectly happy with me using HaXml to process the XML prior to input =)
08:10:18 <shapr> my first paying Haskell job is in the works! w00!
08:10:54 <Igloo> Cool  :-)
08:11:24 <SyntaxPolice> shapr: congrats :)
08:11:43 * shapr bounces happily
08:21:48 <SyntaxPolice> actually, ghc is complaining about a missing hat package, but I see nothing in the list archive about this... maybe its a debian problem...
10:10:46 * d33p is away: Zzz
10:14:27 <SyntaxPolice> I finally got hat to compile w/ ghc... now lets see if it works.
11:08:26 <JH1> any prolog programmers?
11:09:06 <shapr> not me
11:09:58 * SyntaxPolice once had to write a prolog interpreter i ML for a class, but remembers almost nothing about it.
11:10:45 <JH1> its not a syntactic question, i just wondered if anyone could recommend an http library so i can parse web pages
11:11:07 <JH1> the one in SWI prolog isn't great, neither is piLLow
11:12:00 * shapr dunno
12:11:15 * shapr bounces
12:17:09 <SyntaxPolice> did my name confuse JH1 I wonder
15:08:09 <whee> anyone know of a nice TH tutorial or set of examples?
15:20:10 <Igloo> Have you seen SimonPJ and Tim Sheard's paper?
15:21:38 <whee> I'm reading that now, but I can't really follow it 
15:21:58 <whee> do they introduce how to actually use the code they're showing? heh
15:27:13 <whee> I mean right now I'm getting an error like "is used in a top-level splice, and must be imported, not defined locally", and I have no clue what it means really
15:27:38 <whee> or why it's even there :p
15:28:09 <Igloo> Functions called in $( ... ) must be in an imported module
15:28:16 <Igloo> Not the one you are writing
15:28:22 <Igloo> Would that explain it?
15:28:49 <whee> so TH code has to be entirely separate from everything else?
15:30:16 <Igloo> No
15:30:19 <Igloo> You can do
15:30:23 <Igloo> module A:
15:30:25 <Igloo> foo = 5
15:30:26 <Igloo> modue B:
15:30:30 <Igloo> import A
15:30:32 <Igloo> bar = 6
15:30:43 <Igloo> baz = $(lift foo)
15:31:09 <whee> yes, but module A can't define some TH function and use it itself
15:31:57 <Igloo> No
15:32:53 <Igloo> Although you can do $( let f x = ... in ... f 5 ... ) etc
15:34:45 <whee> is there a version of Simon PJ/Sheard's paper that isn't in columns? :\
15:48:43 <Janni> hi
15:49:46 <whee> I guess not. bah. heh
15:51:52 <Janni> I just finished creating the HOpenGL port for FreeBSD. anyone here who is using FreeBSD and thus could test the port? if yes, you can fetch it from ftp://rochel.dyndns.org/. but use the `ftp` client, since somehow many other ftp-clients can't access. (have to fix that)
15:54:34 <whee> are there any other resources for TH? I can't read this until I can get it printed :\
15:54:46 <Janni> or do `wget ftp://rochel.dyndns.org/pub/hs-HOpenGL.tar.bz2'. you can replace the bz2 by gz if you want...
15:55:40 <Janni> s/wget/fetch if you don't have wget...
15:56:01 <Janni> but there doesn't seem to be any FreeBSD users here anyway :|
15:56:21 <Janni> s/doesn't/don't
16:04:55 <Pseudonym> Correction: There are no FreeBSD users who use HOpenGL here.
16:05:53 <Pseudonym> I've never run X on a FreeBSD box.  I generally run FreeBSD if I really need the performance, and XFree86 kills performance.
16:34:50 <whee> how does hasktags work? heh
16:35:07 <whee> as in, how do I use it :)
16:36:09 <whee> oh, it's just broken itself; it doesn't handle case insensitive filesystems correctly
16:40:17 <Igloo> At what does FreeBSD give higher performance, and are there numbers to back that up?
16:42:09 <whee> geh, hasktags doesn't sort the resulting tags either, which results in mucho complaining from vim :\
16:42:59 <Pseudonym> Igloo: There are, but I don't have them on me.
16:43:05 <Pseudonym> And the increase is slight.
16:43:36 <Pseudonym> The general thing is that Linux's VM algorithms have low constant factors but FreeBSD's have low complexity.
16:44:00 <Pseudonym> On a relatively unloaded machine, this makes no difference.
16:44:03 <Igloo> Are you talking about current 2.4 VM?
16:44:15 <Pseudonym> On an ftp site with 4000 simultaneous connections this apparently makes a difference.
16:44:25 <Pseudonym> No, I'm talking about 2.2 and earlier.
16:44:44 <Pseudonym> Things may well have changed in this area, yes.
16:45:05 <Pseudonym> I know that the free page allocator is still kinda slow.
16:45:06 <whee> you could argue that FreeBSD's VM is more mature, in that case :)
16:45:31 <Pseudonym> Solaris, on the other hand, has low _latency_.
16:45:47 <Pseudonym> Tradeoffs are wonderful.
16:45:58 <Igloo> I don't have any reason to believe Linux is now better, I was just curious
16:46:03 <Pseudonym> Sure.
16:46:14 * Pseudonym has no information on 2.4 and later in this regard
16:46:21 <Pseudonym> But XFree86 still kills performance. :-)
16:52:10 <Igloo> :-)
17:01:52 <whee> I should probably learn QuickCheck sometime
17:22:22 <whee> is there a better way to write something like "(zipWith f) . g"?
17:26:54 <Igloo> Does that work?
17:27:09 <whee> yes, it does work as expected
17:28:18 <whee> in this case the entire relevant function is "zipWith ((zipWith f) . g)"
17:31:33 <Igloo> Don't think so, then
19:17:38 * d33p is back (gone 09:06:54)
22:47:57 <jemfinch> did someone here write an IRC bot in Haskell?
22:48:39 * jemfinch thinks the topic appears suspiciously like it was handled by an IRC bot written in Haskell.
