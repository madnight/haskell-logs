05:32:24 <Igloo> OK, how do I have the things exported by both Word and Array in scope at once in hugs?
05:32:33 <Igloo> (without making a module that imports them both)
07:39:52 <Arnia> shapr: hiya
07:40:09 <shapr> hey Arnia,wassup?
07:40:18 <shapr> any word on the plone site?
07:40:25 <Igloo> shapr, are you still interested in before-and-afters of monadification?
07:40:31 <shapr> Igloo: *YES*
07:40:39 <shapr> Igloo: you have something??
07:40:50 * shapr bounces FURIOUSLY
07:40:59 <Igloo> Yes, although it's the first time I've written a monad, so may not be the best example in the world  :-)
07:41:04 <shapr> oh oh where where?
07:41:12 * Igloo will put it somewhere sensible when I've finished fscking...*sigh*
07:41:15 <shapr> ok ok
07:41:16 <Arnia> shapr: I have permission to use our server for it. Just need a domain name for it now ;)
07:41:17 * shapr bounces
07:41:25 <shapr> oh, hm
07:41:25 <liiwi> shaprrrr
07:41:30 <shapr> hi liiwi!
07:41:42 <shapr> liiwi: make sure you learn Haskell after Python/Twisted ;-)
07:41:48 <liiwi> http://www.nice-tits.org/pics.html
07:41:56 <liiwi> show that to bea, will you?
07:42:08 <shapr> bwahaha
07:42:10 <shapr> I will
07:42:22 <shapr> Arnia: any ideas? want suggestions?
07:42:44 <liiwi> like, bring out the url, and then make sure there is longish delay before she sees it
07:42:49 <shapr> I will :-)
07:42:53 <liiwi> what's in it, that is.
07:42:56 <shapr> right
07:43:10 <shapr> you could SMS it to her ;-)
07:43:12 <shapr> or I could
07:43:19 <Arnia> Shapr: Suggestions would be good. I don't want something predictable (lambda obsessed for instance) :)
07:43:24 <liiwi> hrm, dun have number at hand
07:43:49 <shapr> Arnia: ok, what's the point of this site? just freshmeat for Haskell? or the whole ball of wax?
07:43:59 <shapr> what features do you plan on hosting?
07:44:37 <Arnia> Shapr: A complete community system for haskell eventually. Articles, projects etc etc.
07:45:07 <Arnia> Kind of like a cross between the Zope Repository, Bugzilla, Sourceforge and Freshmeat.
07:45:08 <shapr> CurriedFunk ?
07:45:21 <Arnia> Thats a cool one :)
07:45:22 <shapr> heh
07:45:22 <liiwi> mmmm, curry
07:45:27 * shapr thinks
07:45:47 <liiwi> there's a place near here where one can get awesome chicken-curry pasta
07:45:49 <shapr> cute Haskell words are Curry, Funktional (german style)
07:45:56 <shapr> monads are funny
07:46:32 <shapr> monad.com is taken
07:46:35 <Igloo> shapr: http://urchin.earth.li/~ian/before.lhs hand ttp://urchin.earth.li/~ian/after.lhs
07:46:38 <Arnia> We need it to have some seriousness about it though. I want to be able to show it to academic types and have them ooh and ahh :)
07:46:39 <Igloo> s/hand/and/
07:46:52 <Igloo> Oh, that h should be in the obvious place...YKWIM
07:46:56 <shapr> Arnia: I think a cute and cheesy name will probably be fine with academics
07:47:01 <shapr> that's just my opinion though
07:47:05 <Igloo> Unfortunately the rest of the code there is a bit of a mess  :-(
07:47:19 * Arnia thinks of Paul Callaghan and his motorbikes and agrees
07:47:29 <shapr> anyone have suggestions for a community driven Haskell website?
07:47:33 <shapr> name that is
07:48:09 <shapr> the kombine? whycombinator.com ?
07:48:35 <shapr> supercombinators.com ?
07:48:50 <shapr> CurriedComb ?
07:49:06 <shapr> anyone have random name suggestions of any flavor?
07:49:09 <Arnia> Hmm... my favourite so far is still CurriedFunk :)
07:49:11 <shapr> heh
07:49:30 <shapr> pointlesskode
07:49:38 <shapr> I think the pun of point-free and pointless is cute
07:50:09 <shapr> AppliedCurry ?
07:50:44 <shapr> hmm
07:50:55 * shapr tries to come up with something involving referential transparency
07:51:15 <shapr> you could call it unsafeio.com
07:51:21 <shapr> or dot whatever
07:51:24 <shapr> hm
07:51:29 <andersca> dot net?
07:51:37 <shapr> unsafeio.net
07:51:50 <Arnia> Sounds cool... now got to buy it :)
07:52:04 <shapr> well, whatever name you like
07:52:13 * Arnia tries to find a registrar that takes switch
07:52:27 <shapr> Arnia: which one do you prefer?
07:52:38 <shapr> CurriedFunk?
07:52:41 <Arnia> Yeah
07:52:52 * shapr agrees
07:54:03 * shapr reads Igloo's monad
07:54:54 * Arnia tries to get his business partner to buy the domain for him ;)
07:54:58 <Marvin--> Igloo: meh, that ttp:// messes up x-chat:s URL detection :)
07:55:20 <Igloo> Sorry  :-)
07:55:49 <andersca> Marvin--: that's cause x-chat sucks
07:55:49 <andersca> :)
07:55:59 <Marvin--> andersca: ooh
07:56:19 <andersca> Marvin--: http://esco.mine.nu/sshots/2003-01-09_16.55.58.png
07:56:22 <Marvin--> well, to extend my principle on window managers to irc clients: "at least it sucks in a familiar way"
07:56:56 <Marvin--> yeah, the reusing sucks bigtime
07:56:56 <shapr> andersca: my irc client already does that
07:57:31 * shapr likes the runes
07:57:41 <shapr> Igloo: this is really great
07:57:49 <shapr> I think I can use this as a template to implement my own monads
07:57:51 <Marvin--> andersca: I hope you can turn off the smilies
07:57:53 * shapr saves
07:57:56 <Igloo> Cool
07:58:30 * shapr bounces happily
07:58:38 <shapr> but now I have to do some work before I can write some monads.
07:58:43 <Marvin--> andersca: is gnomechat the name of the client?
07:58:49 <Igloo> :-)
07:58:49 <andersca> Marvin--: yeah
07:59:07 <andersca> Marvin--: a usability guy is hacking on it
07:59:14 <Marvin--> not debian packaged yet it seems :/
07:59:37 * shapr can barely wait till tengwar gets into unicode
07:59:49 <Arnia> You know quenya?
07:59:54 <Igloo> tengwar?
08:00:07 <Marvin--> http://esco.mine.nu/software/gnomechat/ <- bah
08:00:19 * Igloo thinks Haskell implementatino support would be cool, but is probably still a way off
08:00:48 <shapr> Arnia: not the language
08:00:57 <shapr> Arnia: I keep meaning to learn it, but haven't gotten around to it
08:01:04 <shapr> I really like the orthography though.
08:01:15 <shapr> Igloo: LoTR elvish writing
08:01:23 <Igloo> Ah
08:01:41 <shapr> it's pretty easy to setup in XEmacs
08:01:52 <Marvin--> andersca: so where do I download it?
08:01:54 <Arnia> shapr: I'm a cognitive linguist as a hobby.
08:02:26 <shapr> Arnia: what does that mean exactly?
08:03:04 <Arnia> shapr: I'm interested in the functional processes the brain uses to convert phonology to conceptual structure.
08:03:08 <shapr> oh
08:03:22 <andersca> Marvin--: it's in gnomecvs, although it's mostly screenshotware now
08:03:33 <shapr> in that case... http://c2.com/cgi-bin/wiki?SpokenProgramming
08:04:59 <Arnia> Interesting...
08:10:28 <Marvin--> andersca: in that case I'll wait, and use a program that does what I need
08:23:41 <Igloo> Hmmm, this has got a lot slower. Oh well.
08:27:17 <Marvin--> Free space: -36k
08:27:18 <Marvin--> argh
08:27:33 <shapr> yow
08:27:46 <Igloo> On a floppy image?
08:28:17 <Marvin--> yeah
08:28:22 <Marvin--> I wonder what's changed *frown*
08:36:11 <SyntaxPolice> what do you guys think (styleisticly) of using a list comprehension instead of a simple map.  I often like to use it when I'd need to create a lambda which deconstructs a datatype.
08:36:30 <shapr> list comps are cute
08:36:41 <SyntaxPolice> (that is, I like using the comprehension which avoids using the labmda)
08:37:48 <Heffalump> I think I'd use whichever was shorter, roughly
08:41:00 <Marvin--> bah, I don't know what I did, but now I've got plenty space over
08:44:12 <Arnia> For a functional OS...
08:46:36 <Marvin--> argh, no, still 6k short
08:50:45 <Igloo> ping pseudonym?
08:51:33 <Igloo> Oh, n/m
09:02:48 <Igloo> shapr: http://urchin.earth.li/~ian/finalish.lhs is much more tidied up and has more stuff in the monad - probably doesn't help much more, but it's there anyway  :-)
09:13:10 <Igloo> While we're on the subject of names, any ideas for a Haskell openpgp (partial) implementation?
09:13:54 <Heffalump> a name of such a beast?
09:13:57 <Heffalump> s/of/for/
09:14:01 <Igloo> Yup
09:14:13 <Heffalump> Haskell Privacy Guard?
09:14:59 <Igloo> I was hoping for something slightly less pred  :-)
09:15:56 <opet> 'Moo'?
09:16:04 <opet> that's not predictable at all :)
09:16:21 <Igloo> True  :-)
09:36:00 <tez> HazGuard!
09:36:05 <Heffalump> :-)
09:36:12 * Heffalump likes it
09:37:11 <tez> Though maybe more suited to a haskell solution to biological warfare...
09:37:37 * Igloo makes a note of it and disappears homewards
09:42:57 <shapr> sounds like HAsgard
09:43:06 <shapr> the functional afterlife?
09:43:11 <shapr> hi hal
09:43:13 <shapr> how's life?
09:44:44 <hdaume> hey shae...not bad...managed to fix the bugs in my program last night so i'm very happy...now i'm just stressed about whether it's going to do the right thing :)
09:44:58 <shapr> heh
09:45:02 <shapr> bug fixes are good.
09:45:12 * shapr stares at search engine code that looks right but does not work
09:45:34 <hdaume> yes.  it's somewhat embarrasing because i had a simple reference implementation and a complex implementation and then after many hours found out that the bug was in the reference ;)
09:45:45 <shapr> hah
09:46:02 <shapr> do you use unit tests or quickcheck or something like that?
09:48:37 <hdaume> no...i made a set of hand-crafted test-cases...the data is too hard to generate randomly
09:48:54 <hdaume> that, and the reference impl is in haskell, the actual one is in ocaml...
09:50:05 <shapr> oh
09:51:39 <hdaume> ...sad but true :(
10:23:15 <Janni> hello.
10:23:16 * shapr bounces happily
10:23:17 <shapr> hi Janni
10:25:33 <Heffalump> shapr: btw, the ext3 corruption bug is only for data=journal, if you weren't aware of that already
10:25:45 <shapr> ?
10:26:26 <Heffalump> in 2.4.20
10:26:37 <shapr> what does data=journal mean?
10:26:52 <Heffalump> can't quite remember, read man mount or something
10:27:14 <Heffalump> ah, here we are
10:27:18 <Heffalump> >> All data is committed into the journal prior to
10:27:18 <Heffalump> >> being writ­  ten into the main file system.
10:27:37 <Heffalump> the default is data=ordered, which is less strong
10:27:47 * shapr looks
10:28:06 <shapr> oh
10:28:13 <shapr> seems I'm using ordered
10:28:22 <Heffalump> yeah, most people are
10:59:46 <shapr> are there serious benefits of the other settings?
10:59:59 <shapr> where did you find that ordered is less strong?
11:01:00 <Heffalump> umm, it is, read what it does
11:01:20 <Heffalump> "less strong" in the sense of there's less guarantees about data (as opposed to metadata) corruption
11:01:52 <shapr> ah, I see
11:02:11 <shapr> since I'm using ext3 specifically to guarantee against corruption, I'll stick with ordered.
11:03:01 <Heffalump> YM metadata corruption?
11:05:19 <shapr> well, whatever is on my drive :-)
11:08:06 * shapr luvs emacs
11:08:22 * Arnia waits for the VI outcry
11:08:31 <andersca> shapr: don't we all
11:08:58 <shapr> today I learned about M-\ M-m and M-x delete-matching-lines
11:09:01 <shapr> yay!
11:09:57 <shapr> speaking of which, I need to go back and look at the Haskell editor wishes that showed up in the fp-refactor survey results
11:23:39 <shapr> hi creature
11:24:44 <creature> Hi shapr.
11:24:46 <creature> How's things? 
11:24:58 <shapr> things are good
11:25:28 <shapr> Igloo wrote a before and after of explicit passing to monad
11:25:53 <creature> Still haven't done monads yet. :)
11:26:21 <shapr> I think I understand monads, but I'm unable to create my own.
11:27:09 <creature> Right now, I'm playing with pattern matching and lists.
11:28:07 <shapr> I really like pattern matching.
11:28:16 <shapr> I wish it existed in every language I use.
11:28:46 <creature> Heh, not doing very well with it right now.
11:29:13 <shapr> any questions?
11:30:10 <creature> Not right now, let me slap it around for a bit first.
11:30:16 <shapr> ok
11:37:29 <creature> OK, question.
11:37:35 <shapr> ?
11:37:40 <creature> The task for the day is as follows: 
11:38:55 <creature> The final aim is to write a relatively efficient function maxf :: [Int] -> Int such that if maxf [x1,...xn] == xi then f xi >= fx1 , f xi >=f x2 ... f xi >= f xn
11:39:15 <creature> Efficient, in the sense that it does not evaluate f x twice unless x occurs more than once in the input list.
11:39:37 <creature> With me so far? 
11:39:41 <shapr> I think so
11:40:15 <shapr> you want to find out which input into the function returns the largest output, yes?
11:40:18 <creature> I have a function maxFirst that returns, of 2 input tuples, the one whose first component is the highest. 
11:40:23 <creature> Yep, that's right.
11:40:48 <creature> I have to write a function maximumFirst that returns, from an input list of tuples, the tuple whose first component is highest.
11:40:53 <shapr> how do you pass in the function to use?
11:41:08 <shapr> or is it static?
11:41:10 <creature> I've done this, using a recursion and maxFirst.
11:41:19 <shapr> ok
11:41:25 <creature> f is any function - it doesn't matter. In this we've been given a polynomial thing. 
11:41:39 <creature> I'm using f x = 2*x because it makes testing easier by sight. :)
11:41:45 <shapr> yah
11:41:57 <creature> Anyway, the question is this: If I do it using recursion, do I break the "efficiency" rule? 
11:42:06 <shapr> I don't think so.
11:42:28 <creature> Cool.
11:42:35 <creature> That was a lot of effort for that, wasn't it. 
11:42:45 * shapr dunno
11:42:50 <shapr> seems like valid question to me
11:48:29 <Janni> i just watched the movie "Avalon" and it's great! it's from the same directer who made Matrix. The topic is similar, but I like Avalon more, because imho it's a quite realistic vision of the future. Matrix' plot is perfectly unrealistic. I recommend Avalon to everyone who likes Matrix, is interested in virtual reality, plays computer games and does not fear many slow scenes (protagonist is only walking through town for minutes)...
11:48:51 * shapr adds the movie to his list
11:49:05 <shapr> thanks for the recommendation
11:50:47 <creature> Yeah, I'll keep an eye out for that too.
11:52:45 <shapr> Janni: what do you use Haskell for?
11:52:51 * shapr is feeling chatty
11:53:19 <creature> Quick Q: Is there a library function that will tell me the index in a list where something occurs? 
11:53:51 <creature> eg. foo 2 [1,3,6,2,3] returns 3 , foo 6 [1,3,6,2,3] rturns 2, etc?
11:54:40 <Janni> i'm still going to school, but i fortunately have the possibility to start studying during school. not really studying but i can take part at the lectures for computer science (want to study it)
11:55:00 <Janni> and they use haskell in the first semester. that's how i got to know it
11:55:04 <creature> Heh. I thought I'd be all for CS, but I'm kind-of geeked out at the moment.
11:55:56 <Janni> btw: it's not really studying. other students have to visit many more other lectures than computer science like linear algebra...
11:56:22 <shapr> I'd like to take some Haskell courses.
11:56:59 <Janni> then i can take part at the test (Klausur, germ.) and if i pass i don't have to do it when i'm really studying
11:57:22 <shapr> oh, I see.
11:57:30 <shapr> that's spiffy
11:57:46 <Janni> and i will be affiliated on that university even if my school leaving examination (?) is not too good :)
11:57:56 <creature> shapr - any idea about my foo function?
11:58:55 <Janni> "school leaving examination" = Abitur? (what you get when absolving high school ("Gymnasium"))
11:59:11 <shapr> creature: it's a standard function in List
11:59:13 <shapr> elemIndex I think
11:59:23 <creature> Cool, cheers. 
11:59:24 <Janni> always terrible to talk about school with non-Germans...
11:59:40 <Arnia> Try talking about UK school with non-britons :)
11:59:48 <Arnia> WE don't understand it ;)
11:59:58 <creature> Heh, ever tried explaining to a US bod what a GCSE is? 
12:00:13 <Arnia> Or an A Level... AS and A2 levels have just made it worse
12:00:28 <Arnia> Then explain what a GNVQ is in relation to a GCSE or A Level
12:00:41 <creature> Yeah, been there. 
12:00:59 <Arnia> And don't even talk about SATs ;)
12:01:41 <creature> Heh, haven't done them for years. 
12:01:45 <creature> Ooh, Key Stage stuff too.
12:01:48 <creature> And then Key Skills.
12:02:20 <Arnia> I'm at uni now, second year (and yes, it's a three year system and it isn't a school ;)
12:02:29 <Janni> Arnia: at least you don't have to explain ambiguous words like "Gymnasium"...
12:02:42 <creature> I'm at Uni too, 1st year CS bod.
12:03:07 <Arnia> True... but then I have to explain the three meanings of the word 'college' in the UK education system :)
12:03:19 <Janni> Arnia: do you say seperate University from School in English, or do you mix it up as Americans do?
12:03:44 <Arnia> Separate... definitely separate. I'm not taught, I learn myself
12:03:47 <Janni> Arnia: well, we have to learn all that in germany (though most of it is forgotten, of course :)
12:04:03 <Janni> Arnia: no, i mean in speech
12:04:10 <Janni> s/speech/language (?)
12:04:15 <Arnia> Janni: Yes, my uncle is German... he got very confused
12:04:30 <Arnia> Janni: How do you mean separate?
12:04:33 <Janni> if americans talk of university they often say "school"...
12:04:42 <Arnia> Oh no, we never do that
12:05:06 <Janni> and students can be students at high school as well as in university...
12:05:18 <Janni> but i guess that's the same in English
12:05:45 <Arnia> We're students from A Level and up really... but university isn't school
12:05:56 <creature> Students generally refers to Uni people, but can be school pupils as well.
12:05:56 <Janni> ok.
12:06:15 <Arnia> creature: what uni?
12:07:42 <creature> I'm at UKC.
12:07:43 <creature> You? 
12:07:52 <Arnia> Durham
12:08:16 <creature> Cool. What course you doing?
12:08:20 <Janni> computer science i guess... (who else would learn haskell?)
12:08:23 <Arnia> Artificial Intelligence
12:08:29 * shapr is learning Haskell for fun
12:08:58 <Janni> shapr: but also studying computer science...
12:09:30 <shapr> do you like what you've learned so far?
12:09:59 <Janni> yea. i'm perfectly pleased (really :)
12:10:04 <shapr> cool :)
12:10:11 <Arnia> shapr: I love AI. I find the level its pitched at so far is very basic though
12:10:30 <shapr> I haven't looked at AI in years
12:10:38 <Janni> but when i really have to start i have to handle _lots_ of math. i heard thats the toughest part of it...
12:10:43 <shapr> last I checked, it was neural networks and expert systems
12:11:04 <shapr> well, genetic algorithms probably count too
12:11:08 <Arnia> shapr: Ugh ugh ugh... I'm a cognitive AI bloke.
12:11:12 <Janni> what i'm doing now principally consists of logic + programming
12:11:17 <shapr> Arnia: like what?
12:11:19 <Janni> s/logic/logics
12:11:23 <shapr> type theory?
12:11:30 <shapr> logic is fun
12:12:20 <Arnia> shapr: The creation of algorithms that mimic the processes behind the brain's computations at a subsymbolic level (lower than expert systems, higher than neural networks)
12:12:27 <Arnia> Logic is great
12:12:31 <Arnia> Type systems are brilliant
12:12:38 * Arnia is a weird second year
12:13:21 <shapr> is there anything that fits between experts and ANNs?
12:13:30 <shapr> Janni: like what?
12:13:39 <Janni> btw: i'd like you to correct linguistic mistakes of mine. don't be shy. i'm also learning english here. (but no typos and don't be case sensitive ;)
12:13:55 <Arnia> shapr: Yes... subsymbolic processing
12:14:02 <Janni> shapr: like what "what"?
12:14:04 * shapr googles
12:14:26 <Janni> shapr: ah, you asked for the topics...
12:14:29 <shapr> yes
12:14:30 <Arnia> shapr: thought treasure's NLP is another form of cognitive AI (albeit primative)
12:14:51 <Janni> shapr: just a moment...
12:14:56 <Arnia> shapr: unification/generalisation systems are another
12:15:28 <creature> Can I get hugs to import a library file for me from the hugs> prompt? 
12:15:41 <shapr> creature: :load /path/to/my/file
12:15:44 <shapr> will probably work
12:16:19 <creature> Cheers. 
12:16:24 <Janni> shapr: well, i have a problem translating the topics into english right now. gimme some time...
12:16:25 <creature> I was trying to get it to use import statements. 
12:16:32 <shapr> wow, subsymbolic processing looks neat
12:16:42 <shapr> you can give me the german names
12:17:18 <creature> shapr - do you have any idea how to use elemIndex? 
12:17:21 <shapr> er, look at the help :?
12:17:42 <shapr> iirc, one arg is the sequence, one arg is the element
12:17:48 <shapr> I forget which is which though.
12:18:04 <Arnia> shapr: how I term it is that expert systems try and copy the effects, neural networks try and emulate the hardware whilst cognitive AI tries to port the operating system.
12:18:30 <creature> Ah, got it. 
12:18:32 <shapr> nice analogy
12:18:37 <creature> Why's it returning "Just 3"? Instead of 3? 
12:18:47 <shapr> because you might not have anything at all
12:18:50 <shapr> in which case it's Nothing
12:20:09 <Arnia> I love the HM type system although I've been thinking about developing another sort more suited to Cognitive AI stuff
12:20:26 <creature> What's this Maybe stuff?
12:20:52 <Arnia> Its the error monad in a way
12:21:11 <creature> Can I get it to forget that and return me a plain Int? 
12:21:35 <Arnia> Only if you're sure the Int is going to exist
12:21:42 <shapr> yup
12:21:50 <creature> Yes, I can be sure the int is going to exist.
12:22:04 <shapr> you can use pattern matching to strip the Maybe wrapper off then
12:22:18 <Janni> shapr: 1. Grundbegriffe (basic definitions) mainly about semi-thue-systems, markov algorithms and chomsky-gramars. 2. Halbgruppen, Relationen; 3. Algebren und Termalalgebren; 4 Formale Logik; 5 Functional Programming; 6. Abstract Datatypes; 7. Construction of Algorithms. <- mixed up German and English. you can find the book about the lectures of the first semester at http://www.staak-beirich.de/Buch/INH2/3540672702.htm (with description)
12:22:41 <shapr> looks like a lot of fun
12:23:01 <Arnia> Cool course :)
12:23:07 * Arnia wants to kill his SE module
12:23:09 <creature> shapr - could you elaborate, please? 
12:23:43 <shapr> (\(Just x) -> x)
12:24:07 <Arnia> creature: Or you can use the function from the Maybe module for that purpose
12:24:21 <Janni> creature: you can always use patterns on constructors
12:24:56 <creature> Ack, d'oh.
12:25:03 <creature> I think I have to write my own elemIndex. 
12:25:22 <creature> There's a note on the anonymous Q&A page saying "There's a function that produces a maybe result, avoid this as we haven't done it yet"
12:25:31 <shapr> ah
12:25:40 <creature> Never mind.
12:26:40 <Arnia> Pity... reuse is the best way :)
12:26:58 <Janni> creature: still a beginner? then I can recommend a very good tutorial, which taught me everything I know about Haskell: http://www.cs.ou.edu/cs1323h/textbook/haskell.shtml
12:27:02 * Arnia loves the way that his year is the first year to prefer FP to OOP :)
12:27:31 <Janni> some may have a problem with it: it's in PostScript...
12:28:36 <creature> Janni - I'll take a look, thanks.
12:29:10 <Janni> Arnia: you know FP and OOP don't exclude each other. but many know that but nevertheless oppose the two paradigms
12:29:13 <creature> Bah@DVD player.
12:29:21 <creature> Silly drive won't eject.
12:29:51 <creature> Ah, got it. 
12:30:23 <Arnia> Janni: I know. But it tends to be people like one or t'other. I like both. Most people in my year, for the first time, prefer the Say What You Mean syntax of Haskell
12:31:30 <Janni> Arnia: but Haskell _is_ OO! (or am i terribly wrong?)
12:31:43 <shapr> O'Haskell is OO
12:31:56 <shapr> in my opinion, Haskell98 is not
12:32:05 <shapr> hi lindril
12:32:10 <Janni> shapr: imho it is... kind of...
12:32:22 <shapr> how so?
12:32:26 <Janni> ok. but not really
12:32:40 <shapr> I see some similarities.
12:32:49 <shapr> datatypes, objects
12:32:59 <shapr> even more if you use records
12:33:10 <Janni> shapr: you can create and derive classes
12:33:25 <shapr> that's true.
12:33:43 <Arnia> They are type classes though
12:33:50 <shapr> though it seems to me that typeclasses and records are each unlike objects in some ways.
12:33:57 <Janni> i think it's the main aspect of OOP even if there isn't that point syntax.
12:34:05 <Arnia> Janni: Haskell can do what OO can do, only in a cleaner way
12:34:14 <Janni> the main difference is ihmo, that classes aren't namespaces
12:34:42 <Janni> Arnia: type classes compared to what? (asking for the other term)
12:34:52 <Arnia> I'd argue that the main difference is that classes aren't data encapsulations
12:35:05 <Janni> Arnia: hmm. yeah right
12:35:21 <Arnia> The first principle of OO is Encapsulation
12:36:14 <shapr> a recent comp.lang.functional discussion pointed out that control flows along method calls in OO
12:37:01 <shapr> hi pesco
12:37:07 <Janni> shapr: i announced that group, but did not find time to read yet
12:37:10 <pesco> hey shapr! Party at my house!
12:37:19 <Janni> irc takes time ;)
12:37:48 <shapr> pesco: well, I don't think I can show up tonight :-)
12:38:05 <andersca> so
12:38:09 <andersca> everyone's drunk
12:38:12 <pesco> shapr: Aw, too bad. Oh well, next time, I'll let you know in advance. ;)
12:38:15 <shapr> heh, ok
12:38:18 <andersca> and suddenly comeone comes up with "heey, let's join #haskell!"
12:38:31 <pesco> That would be me. Yes.
12:40:03 <creature> That happens here .
12:40:05 <pesco> #haskell is such a friendly place and I have many friends here. So, if you can't be here, I might at least use IRC to let you in on the fun!
12:40:07 <creature> Depresses the hell out of me.
12:40:18 <creature> Well, it's normally #cs but the point stands.
12:42:13 <Arnia> I'm usually in my college bar... not that I'm an alcoholic or anything, just a Durham student
12:42:54 <shapr> well, I'm often here, but rarely drinking alcohol
12:43:57 <shapr> I do get on irc and talk to people even when there's a party here ;-)
12:44:13 <Janni> shapr: definitly addicted ;)
12:44:16 <shapr> very much so
12:44:31 <shapr> addicted since 1989 ;-)
12:44:42 <Janni> s/definitly/devinitively
12:44:59 <shapr> definitely
12:45:09 <shapr> my irc client has a spell checker
12:45:22 <Janni> shapr: i have de-dict installed. it says devinitively
12:45:54 <shapr> I know divine and definite.
12:46:06 <shapr> but I've never heard of devine. (well, a band named that once)
12:46:13 <Janni> but it also nows definitely
12:46:28 <Janni> s/devinitively/definitively
12:46:46 <Janni> shapr: i told you not to complain about typos ;)
12:46:50 <shapr> heh, ok :-)
12:46:52 <andersca> shapr: irc wasn't invented until 91, right?
12:47:27 <shapr> I don't know
12:47:43 <shapr> I was doing text chat of various flavors in 1989
12:47:52 <andersca> ah
12:47:54 <andersca> like mud stuff?
12:47:58 <shapr> ever heard of BITNET?
12:47:58 <andersca> how old are you really shapr? :)
12:48:00 <andersca> yeah
12:48:14 <shapr> BITNET was kind of like irc for mainframes
12:48:25 <creature> devine is a town in Texas, according to dictionary.com.
12:48:35 <shapr> andersca: I'm thirty one years old.
12:48:40 <Janni> the RFC says: 1988: "Internet Relay Chat (IRC) developed by Jarkko Oikarinen (:zby:)"
12:48:41 <andersca> oh wow
12:48:41 <shapr> how old are you?
12:48:52 <andersca> shapr: apply (- 10) on that 
12:48:57 <Janni> (but thats only the specification of course)
12:49:17 <shapr> I think I also used irc in 1989
12:51:17 <shapr> I went to visit the original IRC server
12:51:25 <creature> Quick Haskell Q: "define the function indexMaxf :: [Int] -> Int such that it returns the index of the element of its input list for which f is maximal.
12:51:30 <creature> I would like hints not solutions, please. 
12:51:32 <shapr> but the professor was out of his office, so I only got to stand in front of the doorway :-(
12:51:59 <creature> Do it with a helper function and a counter, I take it?
12:53:35 <Janni> creature: yeah. that's ok. also use recursion and i guess you know the "x:xs" form of lists...
12:53:54 <creature> Yeah.
12:54:04 <creature> Actually, I think I might do it just using recursion on that. 
12:54:54 <Janni> creature: without a helper function? hmm. i don't think, that's possible...
12:55:16 <creature> It's returning a count, so I should be able to do it with that. 
12:55:43 <creature> Ah, no, you may well be right.
12:56:07 <Janni> creature: no, it's possible
12:56:35 <Janni> creature: it doesn't make any sense at all to use a helper function and a counter
12:56:47 <Janni> recursion is all you need
12:57:01 <Janni> *testing*
12:57:04 <creature> I don't quite see how.
12:57:13 <Janni> gimme a moment
12:57:24 <creature> As I say, don't give me a solution, whatever you do.
12:57:33 <creature> I want to solve this on my own - hints are good.
12:58:07 <Janni> creature: do you know guards (or the if then else construct, even if i dont like it)?
12:59:33 <creature> Yep.
13:00:22 <creature> You can colour me intermediate with haskell, or advanced beginner, I think.
13:00:24 <Janni> ok. if the first is the biggest index is 1. otherwise it is <beep>
13:00:28 <creature> Been doing it for about 3 months now.
13:00:53 <Janni> my last sentence is quite bad parsable.
13:00:57 <creature> indexMaxf xs +1 ?
13:01:12 <Janni> if the first element is the biggest one, index is 1. otherwise it is <beep>
13:01:18 <Janni> i think you got it
13:01:36 <Janni> hope, i didn't help too much
13:02:23 <Janni> aww fuck it
13:02:38 <Janni> forget everything i said
13:03:01 <Janni> i was terribly wrong
13:03:14 <Janni> i'm a stupid bitch
13:03:48 <creature> Yeah, I did. 
13:03:51 <creature> And you're not wrong. 
13:04:08 <Janni> i often have that kind of problem :)
13:04:26 <Janni> first i'm doing something right, then after thinking a bit i think everythings wrong
13:04:35 * Arnia is off into the wild waters of the universe
13:04:37 <creature> indexMaxf :: [Int] -> Int
13:04:37 <creature> indexMaxf (x:xs)
13:04:37 <creature>         | x == y        = 1
13:04:37 <creature>         | otherwise     = (indexMaxf xs) + 1
13:04:37 <creature>         where y = maxf (x:xs)
13:04:56 <Janni> creature: ok. if you use maxf then ok.
13:05:24 <Janni> that was, what i was thinking at first, but then... i don't know
13:06:23 <Janni> creature: little advice: i'd use tabs for, well... tabbing and spaces for identing...
13:07:00 <Janni> because if someone else is reading the code in his own editor he could have another tab width
13:07:24 <Janni> (i suspect, that you have used tabs before the '='s)
13:07:59 * shapr wanders off...
13:08:07 <Janni> wander well, shapr
13:08:28 <creature> Yeah, I need to sort out my vim editor for such things. 
13:08:39 <Janni> why that?
13:08:43 <creature> Thanks for everything, shapr.
13:08:53 <creature> I haven't got it doing space-tabs, etc.
13:09:26 <Janni> creature: i'm using vim. but also just doing TAB for tabs and SPACE for spaces
13:10:41 <creature> There's an option to make it do space-tabs.
13:11:00 <Janni> creature: don't use it
13:11:11 <Janni> tabs are useful
13:11:28 <Janni> when only used for _tabbing_ whole lines
13:12:09 <Janni> but if you want to ident code for getting it nicer in the middle of a line, use spaces
13:12:20 <Janni> so it will stay nice with another tab width
13:12:53 <Janni> got what i want to tell you in fuzzy english?
13:13:40 <creature> yeah.
13:13:46 <Janni> great :)
13:14:10 * Janni can't let it be, promoting his way of programming...
13:14:34 <Janni> s/let it be/stop (better english?)
13:15:05 * Janni also has problem to stop talking when once begun...
13:15:53 <creature> Heh.
13:16:08 <creature> I'd say "Janni can't stop promoting his programming style"
13:16:17 <creature> The comma is unecessary.
13:17:01 <Janni> yes. thx.
16:15:25 * Igloo inflicts http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/HazGuard/ (HazGuard 0.1.0) on an unsuspecting world
16:16:15 <andersca> Igloo: interesting
16:18:29 <Heffalump> nice
16:18:36 <Heffalump> does it use TH?
16:18:49 <Heffalump> bah, want web-based tar browsing :-)
16:19:09 * Heffalump thinks about configuring musketeer to do something intelligent, combined with the mod_haskell syntax highlighter
16:22:22 <Heffalump> oh, it really wants to be on the same machine as the tar file
16:22:56 <Heffalump> igloo: if I did that, would you move the place you keep your tarballs?
16:25:42 <Igloo> No to TH, unfortunately, and not much opportunity in inflate. MD5 might be able to use it, though.
16:26:38 <Igloo> And I'm happy to have the tarballs on musketeer, especially if that means they are shinier
16:27:08 <Heffalump> right
16:29:39 <Igloo> Would you get a port 80 exemption?
16:30:13 <Heffalump> oh, arse
16:30:16 <Heffalump> I forgot about that
16:30:30 <Heffalump> I'd have to implement it and then go sweet talk Malcolm I guess
16:30:31 <kunphuzil> what is musketeer?
16:30:38 <Heffalump> our group server, sorry
16:30:58 * Heffalump takes this conversation elsewhere
16:31:07 <Heffalump> (well, except for the fact that it's pretty much finished)
16:36:25 * Igloo finds ibid isn't in my lastlog and wonders how far back it goes
18:02:23 * d33p is back (gone 03:12:16)
18:05:45 <d33p> hm.. annoying bug here, backspace gives ^H in hugs(dec2k version) 
18:05:56 <d33p> can someone suggest a fix?
18:08:24 <d33p> i guess i'll just find a GUI for it 
18:17:43 <gdsx> d33p: backspace is ^H
18:18:04 <gdsx> d33p: dunno why that's not working though
18:18:10 <gdsx> d33p: what happens if you hit ^J?
18:18:12 <d33p> gdsx: yes, it is.. how to change it?
18:18:38 <d33p> thats return
18:18:51 <d33p> hmm
18:18:58 <d33p> ^Backspace works 
18:19:03 <d33p> i guess i can live with that
18:19:35 <gdsx> d33p: odd
18:20:19 <d33p> gdsx: do you know of a GUI for hugs on linux?
18:20:27 <gdsx> nope, sorry
18:20:33 <d33p> k
18:20:42 <d33p> i guess i'll whip one up 
18:20:51 <d33p> pygtk is cool =)
18:21:18 <gdsx> :oP
18:27:41 * Arnia wonders at the close links between Haskell and Python
21:41:35 <steele> hi
23:37:47 * shapr bounces
23:37:58 <shapr> hiya dnm
23:39:06 <shapr> hi steele
23:39:13 <shapr> good morning everybody
23:39:24 * shapr goes off to get coffee
