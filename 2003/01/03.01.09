01:23:10 <xkb> hi
01:23:28 <xkb> I read sometime ago there was some paper on combining monads.
01:23:34 <xkb> However, I cant find it anymore
01:23:50 <xkb> sort of modular monads
01:25:34 <shapr> monad transformers
01:25:47 <xkb> ah.. thats the one
01:25:53 <xkb> Ill google for that
02:04:24 <Heffalump> modular interpreters and monad transformers is the standard paper on the subject
02:19:05 <shapr> haven't seen xbill around in awhile
04:16:14 <Heffalump> anyone familiar with arrows around?
04:16:36 <shapr> is there anyone familiar with arrows who ever shows up here?
04:16:36 <shapr> ;-)
04:16:58 <shapr> Heffalump: what question do you have?
04:17:29 <Heffalump> can you remember what the definition of the ArrowApply class in Hughes' paper is?
04:18:10 <shapr> is that the a -> b, a -> c one?
04:18:20 * shapr looks at the paper
04:18:37 * Marvin-- hates cyclic references
04:19:46 <shapr> Heffalump: arr, &&&, or what?
04:20:06 <Heffalump> how many members does ArrowApply have?
04:21:18 <shapr> class Arrow a => ArrowApply a where
04:21:52 <shapr>     app :: a (a b c, b) c
04:22:01 * Marvin-- boggles
04:22:05 <shapr> that's it
04:23:01 <Marvin--> I tend to forget that in Python, instance methods have back references to their instances, so you shouldn't pass them around uncontrolled *shiver*
04:23:13 <Heffalump> shapr: ta
04:23:15 <shapr> Marvin--: you can nowadays
04:23:34 <Marvin--> shapr: when mixing code written in C and Python? No :(
04:23:35 <shapr> you can throw around unbound methods, and then bind them when you need them
04:23:37 <shapr> oh
04:23:47 <Marvin--> I "solved" it by using a static method instead
04:23:58 <Marvin--> but I'll have to implement the CGC protocol in pyOpenSSL, I'm afraid
04:33:57 <Marvin--> damn, Koen doesn't have time to see me until next week
04:34:40 <andersca> for?
04:35:22 <Marvin--> talk about master project
04:36:07 <andersca> oh cool
04:36:16 <andersca> ugh
04:36:32 <andersca> now I've received like 5 nigeria mails to my codefactory address in just a few days
04:37:08 <Heffalump> spamassassin generally catches mine
04:39:15 <andersca> yeha, mine too
04:42:41 <Marvin--> andersca: forward them to the police, I forgot which dept...
04:43:13 <Marvin--> since it's not only spam, it's scam (yay, rhyming) the police are interested in them
04:44:29 <Marvin--> heh, www.polisen.se is severely broken at the moment :)
04:44:44 <Marvin--> "Please contact the server administrator, root@ux111402 and inform them of the time the error occurred"
04:44:46 <Marvin--> right, nice mail address
04:45:04 <Marvin--> but they are running Apache :)
04:45:09 <andersca> yeah
05:56:24 * Marvin-- brings forth valgrind
05:56:37 <Heffalump> what on?
05:57:02 <Marvin--> my python module
05:57:07 <andersca> valgrind is cool
05:57:09 <andersca> very cool
05:57:18 <Heffalump> how does it help with a language like python?
05:57:25 <Heffalump> or is the module written in C?
05:57:27 <Marvin--> the module is written in C :)
05:57:34 <Marvin--> --10955-- FATAL: unhandled syscall: 252
05:57:34 <Marvin--> dang
05:58:05 <Heffalump> that's impressive...
05:58:25 <Marvin--> what?
05:58:40 <Igloo> unhandled by valfrind presumably?
05:58:48 <Marvin--> yes
05:59:02 <Marvin--> so I'll have to write a wrapper for it and recompile valgrind myself...ick
05:59:06 <Heffalump> oh, right
05:59:57 <Marvin--> uh, so how do I know what syscall 252 is?
06:01:32 <Marvin--> asm/unistd.h... I'll be damned
06:01:55 <Heffalump> what is it?
06:01:58 <Marvin--> #define __NR_exit_group 252
06:02:02 <Marvin--> what's exit_group? :)
06:02:18 <Marvin--> there's no manpage for it...
06:02:46 * Heffalump greps kernel source
06:05:46 <Heffalump> and doesn't find it anywhere...
06:06:01 <Heffalump> in 2.4.19
06:06:19 <Marvin--> err... me neither
06:06:29 <Heffalump> also, the asm/unistd.h in 2.4.19 only goes up to 242
06:06:33 <Marvin--> yeah
06:06:43 <Marvin--> so..uh...
06:07:04 <Heffalump> what system are you running on?
06:07:32 <Marvin--> 2.4.19!
06:07:33 <Marvin--> :)
06:08:15 <Marvin--> exit_group seems to be a 2.5 thing
06:08:24 <Heffalump> ah...
06:08:26 <Marvin--> so why does valgrind complain about python using that syscall
06:08:37 <Heffalump> maybe python is trying it and handling the failure gracefully
06:09:27 <andersca> or glibc
06:10:20 <Heffalump> point, what glibc version?
06:10:26 <Marvin--> so now I have to get 2.5 source, read it to understand what exit_group does, and then implement a valgrind wrapper for it? great :)
06:10:43 <Marvin--> 2.3.1
06:11:07 <Igloo> Surely you need to implement a valgrind wrapper that does nothing?
06:11:16 <Heffalump> no, it needs to fai
06:11:17 <Heffalump> l
06:11:28 <Heffalump> well, what do valgrind wrappers do, precisely/
06:11:46 <Igloo> Understanding what exit_group does shouldn#t be necessary, anyway
06:11:49 <Marvin--> I think they basically check what state the memory is in before and after the call
06:11:57 <Igloo> Or rather what it should do
06:21:46 * Marvin-- downloads a 2.5.53 .tar.bz2 just in case
06:21:58 <Marvin--> bah, only 500K/s to ftp.sunet.se
06:25:33 <andersca> I use ftp.chl.chalmers.se
06:25:36 <andersca> or ftp.hemmet.chalmers.se
06:26:08 <Marvin--> good point
06:26:17 <Marvin--> I'll have to do a test download
06:26:24 <andersca> 31556230 bytes transferred in 5 seconds (6.05M/s)
06:26:41 <Marvin--> hemmet didn't have 2.5 though
06:26:53 <andersca> no :/
06:27:31 <Marvin--> I'm getting 730K/s to ftp.chl
06:28:27 * Marvin-- tries with a rebuilt valgrind
06:29:09 <Marvin--> coo', that seemed to have worked
06:30:49 <Heffalump> did it tell you anything useful?
06:31:24 <Marvin--> ==15249== definitely lost: 0 bytes in 0 blocks.
06:31:24 <Marvin--> ==15249== possibly lost:   0 bytes in 0 blocks.
06:31:24 <Marvin--> ==15249== still reachable: 416827 bytes in 8874 blocks.
06:31:38 <Marvin--> what I mean is that valgrind actually accepted my wrapper function and continued ;)
06:31:57 <Heffalump> ah :-)
06:36:18 <Marvin--> it doesn't seem to find anything leaking in my module though
06:36:31 <Marvin--> I wonder if that means that there are no leaks, or if it means something else is broken
06:59:06 <Janni> g'day
07:06:59 <liiwi> ello
07:07:21 <opet> hi
07:52:19 <liiwi> shaprrrr
07:52:50 <shapr> hi liiwi
07:52:53 <shapr> how's the code?
07:58:39 * SyntaxPolice is thinking of writing an instance of the FGL Graph class to include a mapping from the node labels to the Nodes so that I can get nodes by their labels.
07:58:55 <SyntaxPolice> instead of passing around a FiniteMap or something
08:00:43 <shapr> sounds useful to me
08:01:12 <shapr> I've been idly working on a gantt chart thingy that uses FGL
08:01:40 <shapr> I've noticed it would be easier for me to deal with Node labels
08:20:18 <liiwi> shapr: stuck. need to extend twisted.
08:26:33 <Igloo> Woohoo!
08:27:01 <Igloo> I think I may know enoug to finish inflate for Haskell, thanks partly to Pseudonym  :-)
08:28:27 <Heffalump> inflate?
08:28:59 <Igloo> As in zlib
08:30:08 <Heffalump> ah.
08:43:05 <SyntaxPolice> can I say something like: data LabelGraph a b = (Graph gr) => LabelGraph (FiniteMap a b) (Graph a b)
08:43:09 <SyntaxPolice> oops
08:43:14 <SyntaxPolice> make that last part (gr a b)
08:45:38 <SyntaxPolice> it likes this: data (Graph gr) => LabelGraph gr a b = LabelGraph (FiniteMap a b) (gr a b)
08:46:03 <SyntaxPolice> I guess thats what I want...
08:49:28 <Igloo> Ermmm, what are you trying to do?
08:50:33 <Igloo> Oh, that might be right, if it is valid
08:50:37 <SyntaxPolice> well, I want LabelGraph to be an instance of Graph, but I also want it to contain an element that must be an instance of graph.
08:51:09 <SyntaxPolice> so I can implement the overloaded operations and it'll keep a mapping from the node labels to their Node (id)s
08:57:03 <hdaume> SyntaxPolice: haskell ignores pre => contexts on datatypes, for the most part
08:58:04 <hdaume> SyntaxPolice: that is, it will only let you construct your LabelGraph when gr is an instance of Graph, but you can't use that fact anywhere in your code.  that is, you couldn't say 'lgraphNodes (LabelGraph fm gr) = labNodes gr' because the context gets thrown away
08:59:21 <SyntaxPolice> i see. but I could say 'lgraphNodes (Graph gr) => (LabelGraph fm gr) = labNodes gr'
08:59:42 <SyntaxPolice> but then i can't use lgraphNodes as an implementation of the Graph instance I guess.
08:59:52 <hdaume> you probably just want 'data LabelGraph gr a b = LabelGraph (FiniteMap a b) (gr a b)' and then put "(Graph gr, Ord a) =>" in the contexts of all your functions relating to labgraphs
09:00:19 <hdaume> SyntaxPolice: sure you can 'instance (Graph gr, Ord a) => Graph (LabelGraph gr) where ...'
09:00:32 <SyntaxPolice> ahh.
09:00:44 <hdaume> erm, no
09:00:54 <hdaume> that Ord a can't be in the context, since it doesn't appear on the RHS
09:01:03 <hdaume> but other than that, you're fine
09:01:42 <hdaume> actually, no.  (i should think before talking.)  you won't be able to actually use the FM in any of the instance functions, because you can't require Ord a in a graph instance
09:01:51 <hdaume> what you want is something like Hughes' restricted datatypes
09:03:09 <SyntaxPolice> hmm
09:03:58 <hdaume> you're pretty much SOL right now...i started working with John a little while back on implementing the restricted datatypes, but there are two many unanswered questions right now (due to lazy context reduction, mostly) to make an implementation feasable
09:04:15 <hdaume> you can make your LabelGraph, but you can't make it an instance of Graph
09:04:39 <SyntaxPolice> hm. damn.
09:05:28 <hdaume> you'd have to either rewrite Graph as a MPTC or rewrite FiniteMap to take a comparison function as an argument (like the difference between sort and sortBy)
09:06:16 <SyntaxPolice> I see.  I don't know what an MPTC is - but if I made Ord a a context for Graph, (which is not desirable) then this would work, right?
09:07:07 <hdaume> multiparameter type class.  you could change Graph so that it's something like 'class Graph gr where { nodes :: Ord a => gr a b -> [a] ; ... }' or something, but you'd have to add Ord a to every function there.
09:07:31 <SyntaxPolice> OK I understand that.
09:07:53 <hdaume> the MPTC way would be to make it 'class Graph gr a where { original type sigs }' then your instance would be 'instance (Graph gr, Ord a) => Graph (LabelGraph gr) a where ...' which should also work
09:09:21 <SyntaxPolice> OK, and MPTC is a ghc extention that I've used before I think.
09:40:15 <Heffalump> shapr: did you mutter something about filesystem corruption in 2.4.20, and if so, what?
09:42:15 <Igloo> I think he said it was in ext3
12:05:21 <lpx> can someone help me out?
12:05:44 <lpx> i want to know how can i work with IO erros in haskell
12:06:28 <lpx> or where can I get some information about it?
12:26:59 <hdaume> what do you mean "work with"?
12:27:09 <hdaume> you might look at the functions bracket/catch/try in System.IO
12:30:41 <lpx> thx
12:36:56 <hdaume> np
14:47:46 <whee> what's the most "standard" GUI api for haskell?
14:47:52 <whee> GTK+HS or ObjectIO or?
14:48:31 <opet> there isn't one :)
14:48:45 <whee> by standard I mean actively developed and usable
14:52:36 <hdaume> gtk+hs is pretty good, as is gtk2hs
14:52:40 <hdaume> (i've used both)
14:52:58 <hdaume> and they're both actively developed and quite usable
14:53:26 <andersca> does gtk+hs use gtk2?
14:53:43 <whee> which would I be better off using (which has the larger userbase)
14:57:14 <hdaume> it's say gtk2, but i don't know (that's the one i used more, but only because it had a higher version number *grin*)
14:57:41 <andersca> yeah, gtk2 is much better
14:57:49 <whee> heh, gtk2hs it is
14:57:52 * andersca is a gtk+ developer
14:57:54 <andersca> so I know :)
15:00:43 <whee> gtk2hs looks pretty nice, mogul does anyway
15:50:36 <Igloo> Yay!
15:50:43 * Igloo inflates rfc1951.txt
15:57:36 <Pseudonym> Woohoo.
15:58:24 <Pseudonym> Incidentally, are you using trees to decode the Huffman codes or have you worked out the quick way?
15:59:43 <Igloo> Well, at the minute I'm using a list and testing prefixes of increasing length, but that was just the quickest to write  :-)
16:00:05 <Pseudonym> :-)
16:02:42 <Igloo> I was thinking about trees, either with an obvious datatype or with function composition. I vaguely remember something here about a better way now you mention it, though
16:02:42 * Igloo has completely forgoten all details though...remind me?
16:02:53 <Pseudonym> I don't th9ink I mentioned the details.
16:03:00 <Pseudonym> The codes are assigned in a special way.
16:03:23 <Pseudonym> I think they're consecutive from smallest to longest lebgth, right?
16:04:08 <Pseudonym> In which case, the following data structure should do it:
16:04:14 <Igloo> Ermmm, there are no gaps that could be used
16:04:23 <Igloo> But I'm not sure "consecutive" is the word I'd use
16:04:45 <Pseudonym> type HuffmanTree = [(Int, Array Int Code)]
16:05:05 <Pseudonym> The length of the list should be the length of the longest code.
16:05:24 <Pseudonym> The first element of each pair is the first code assigned for that length.
16:05:46 <Pseudonym> The second element is basically an array of the symbols of that length.
16:05:51 <Pseudonym> In code order.
16:05:54 <Pseudonym> With me so far?
16:05:56 <Igloo> Ah, but not all values are in the tree
16:06:03 <Igloo> Or is that not relevant?
16:06:08 <Pseudonym> It's not relevant.
16:06:17 <Igloo> OK, with you
16:06:23 <Pseudonym> After all, if you can't decode 'em, you shouldn't care about them.
16:06:45 <Pseudonym> OK, so let's pick a simple code.
16:07:04 <Pseudonym> Say: 0 -> A, 10 -> B, 110 -> C, 111 -> D
16:07:35 <Igloo> What do you do if there are no codes of a given length?
16:08:13 <Pseudonym> Then the "First code" of that length is the "first code" of the previous length * 2.
16:08:18 <Pseudonym> And the array, of course, is empty.
16:08:47 <Igloo> Ah, so you mean [(Code, Array Int Code)]
16:08:54 <Pseudonym> Hmmm.
16:08:57 <Pseudonym> No, try this:
16:09:01 <Igloo> And empty initial bit can be fudged
16:09:03 <Pseudonym> [(Code, Array Int Symbol)]
16:09:15 <Pseudonym> No, the empty initial bit isn't present.
16:09:20 <Pseudonym> There is no code of length 0.
16:10:21 <Pseudonym> Anyway.  Looking at that simple code...
16:10:31 * Igloo doesn't see how this is going to end up faster - the tree is linear in code length and this must be too
16:10:55 <Pseudonym> [(0, { 0 -> A }), (2, { 0 -> B }), (6, { 0 -> C, 1 -> D})]
16:11:02 <Pseudonym> You'll see why in a moment.
16:11:09 <Igloo> Although I suppose you could make this list a tree
16:11:47 <Pseudonym> OK, so here's the decoding process.
16:11:51 <Pseudonym> You read in a bit.
16:12:07 <Pseudonym> Oh, hang on.
16:12:17 <Pseudonym> Damn, this is in reverse order.
16:12:32 <Pseudonym> You need to make the first element of each pair the _last_ code value plus one.
16:12:41 <Pseudonym> And store the array in reverse order.
16:12:45 <Pseudonym> Let me try that again:
16:12:59 <Pseudonym> [(1, { 0 -> A }), (3, { 0 -> B }), (8, { 0 -> C, 1 -> D})]
16:13:02 <Pseudonym> OK.
16:13:14 <Pseudonym> You get 1 because it's 0+1.
16:13:24 <Igloo> In what sense is the array in reverse order?
16:13:26 <Pseudonym> You get 3 because it's 10 (the last code value of length 2) + 1.
16:13:30 * Igloo goes to get a drink, bias
16:13:31 <Pseudonym> Sorry.
16:13:40 <Pseudonym> [(1, { 0 -> A }), (3, { 0 -> B }), (8, { 0 -> D, 1 -> C })]
16:13:46 <Pseudonym> Reverse the order of that last array.
16:13:57 <Pseudonym> OK, I'll get a drink too and wait for you to return.
16:15:28 <Igloo> back
16:17:51 <Igloo> Is this going to work for the following code? 00 -> A, 010 -> B, 011 -> C, 100 -> D, 101 -> E, 110 -> F, 111 -> G
16:18:27 <Pseudonym> Let's see.
16:18:35 <Igloo> :-)
16:19:39 <Pseudonym> [(1, {}), (1, { 0 -> A }), ({8, { 0 -> G, 1 -> F, 2 -> E, 3 -> D, 4 -> C, 5 -> B })]
16:19:46 <Pseudonym> That's what I think it should look like.
16:19:58 <Pseudonym> OK, give me a bit sequence.
16:20:05 <Igloo> Ah, that's what those numbers are
16:20:15 <Igloo> 110
16:20:50 <Pseudonym> OK.  What you do is you read the code into an integer register one bit at a time.
16:21:11 <Pseudonym> When you have read a bit, you compare the value in the register with the first element of the head of the list.
16:21:43 <Pseudonym> Hang on, got that wrong.
16:21:49 <Pseudonym> [(0, {}), (1, { 0 -> A }), ({8, { 0 -> G, 1 -> F, 2 -> E, 3 -> D, 4 -> C, 5 -> B })]
16:21:51 <Pseudonym> Sorry.
16:22:28 <Pseudonym> If the value in the register is greater than or equal to the element, you read in another bit and move on to the tail of the list.
16:22:47 <Pseudonym> So in this case, we first read in a 1.  It's greater than 0, so we move on.
16:22:57 <Pseudonym> We now have 11.  This is greater than 1, so we move on.
16:23:13 <Pseudonym> Now we have 110, which is 6, which is less than 8, so we stop.
16:23:33 <Igloo> But we have walked as far as we would need to walk down the tre already
16:23:43 <Pseudonym> Yes, but we've chased fewer pointers.
16:23:45 <Pseudonym> Better locality.
16:23:53 <Pseudonym> Even better locality if we use an array instead of a list.
16:23:59 <Pseudonym> No pointers, sequential reads etc.
16:24:14 <Igloo> I think there's a code length limit of something like 15
16:24:17 <Pseudonym> It's also far more compact.
16:24:26 <Igloo> What do you mean by "chased", too?
16:24:47 <Pseudonym> I mean the number of pointers you dereference.
16:24:57 <Igloo> And in GHC we probably have direction all over the place with your lists and tuples
16:25:11 <Pseudonym> A tree of n symbols requires n leaf nodes and n-1 internal nodes.
16:25:22 <Pseudonym> True, but you can be more clever as I will show in a moment. :-)
16:25:26 <Igloo> Walking down a tree dereferences 2 pointers
16:25:35 <Igloo> OK  :-)
16:26:00 <Pseudonym> You can do it all with unboxed structures, as I will soon show.
16:26:40 <Pseudonym> OK.  Now you take the first element of the pair that you stopped at (8), subtract the code (6) and subtract another 1.  This gives you the value 1.  Look it up in the array, and you have F.
16:27:16 <Pseudonym> Try it with some more codes.
16:27:50 <Pseudonym> There's a reason why the Huffman codes were assigned in this order, incidentally.
16:27:54 <Pseudonym> It's so you can do this fast decoding.
16:28:10 <Igloo> I believe it works (although I'd double check about holes before implementing it)
16:28:15 <Pseudonym> Sure.
16:28:22 <Pseudonym> OK, now here's the neat part.
16:28:40 <Pseudonym> You need two arrays, both of which can be unboxed arrays.
16:29:06 <Pseudonym> Uhm...
16:29:09 * Pseudonym thinks
16:29:11 <Igloo> The first giving indexes into the second?
16:29:17 <Pseudonym> No, actually three arrays.
16:29:38 <Igloo> Hmmm, yes, another with the ints above so you know when to move on in the indexing array
16:29:38 <Pseudonym> Yeah.  Basically, one array which is the first elements of the list.
16:29:45 <Pseudonym> The second indexes the full symbol array.
16:29:46 <Pseudonym> You got it.
16:30:08 <Pseudonym> The particularly neat part is that if you can assign your symbol numbers yourself, you can avoid the third (large) array.
16:30:17 <Igloo> I remain unconvinced it will be faster with such small trees. Maybe I will implement both and test.
16:30:29 <Pseudonym> That's very useful if you're, say, compressing text by assigning Huffman codes to individual words.
16:30:41 <Pseudonym> Another nice thing is that you can also _encode_ this way.
16:31:16 <Pseudonym> That turns out to be a _lot_ more efficientl.
16:31:50 * Igloo hasn't thought about encoding yet  :-)
16:33:31 <Pseudonym> :-)
16:37:34 <Pseudonym> If you'd like an algorithm to compute the optimal Huffman codes under the constraint that the length is limited to N bits, I can do that too.
16:37:46 <Pseudonym> It's one of those algorithms which benefits a lot from lazy evaluation.
16:40:53 <Igloo> If you have a description handy then a copy would be nice, but I'm not going to write deflate right now so I'll ask you when I'm going to do it
16:42:30 <Pseudonym> I found a copy of AListair's paper: http://citeseer.nj.nec.com/turpin95practical.html
16:46:10 * Igloo makes a note of that, ta
16:47:56 <Pseudonym> The algorithm uses lazy evaluation, but I don't think anyone has tried actually implementing it in a lazy language before.
16:48:12 <Pseudonym> Despite the fact that Alistair Moffat teaches Haskell. :-)
16:48:29 <Igloo> Heh
17:25:01 * Igloo realises that to handle "Any bits of input up to the next byte boundary are ignored." for uncompressed blocks I'll have to pass around bytes_consumed `mod` 8 all over the place
17:25:15 * Igloo looks tempted by a Monad
17:25:36 <Pseudonym> Are you using a bit stream or something?
17:25:43 <Igloo> Yup
17:25:48 <Pseudonym> Eek.
17:26:00 <Pseudonym> One pointer per bit?
17:26:36 <Igloo> Don't care hughely about performance
17:26:41 * Pseudonym nods
17:27:12 <Pseudonym> Can I ask, as a matter of interest, exactly why you're doing this? :-)
17:27:28 <Igloo> Althogh I should stop passing the entire inflated result around
17:27:42 <Igloo> Because everyone else is too lazy to
17:27:47 * Pseudonym nods
17:27:52 <Pseudonym> In theory:
17:27:57 <Pseudonym> gunzip :: [Byte] -> [Byte]
17:28:10 <Pseudonym> Evaluated lazily.
17:28:22 <Igloo> Oh, I'm doing it for inside an openpgp implementation
17:28:31 <Pseudonym> Oh, fun.
17:28:46 * Pseudonym hung around the openpgp working group while the rfc was being written
17:28:56 <Pseudonym> I got one change in.
17:29:03 <Igloo> Oh?
17:29:05 <Pseudonym> And a half-written reference implementation, long since lost.
17:29:29 <Pseudonym> Yeah.  One-pass signatures look like this:
17:29:55 <Pseudonym> <OTP packet> <OTP packet> <Message> <OTP signature> <OTP signature>
17:30:12 <Pseudonym> I got them to clarify the relative orderings of the initial OTP packets and the trailing signatures.
17:30:21 <Igloo> Ah, cool
17:30:40 <Pseudonym> The way the spec originally read, the trailing signatures could be any permutation of the OTP packet orderings.
17:31:22 <Igloo> Some of this stuff feels like it should be put in separate modules, but modules that pretty much fit on a screen seem silly
17:31:49 <Pseudonym> Yes and no.  If you have a language with true separate compilation, it makes a lot of sense.
17:31:59 <Pseudonym> In Haskell it's a bit sillier.
17:32:44 <Igloo> I suppose if I make it literate it'll puff out a bit
17:32:58 <Pseudonym> Good reason to make it literate, if you ask me.
17:33:01 <Igloo> Although I'm not sure how much I can bring myself to write about the Tree structure
17:33:16 <Pseudonym> :-)
17:46:33 <Igloo> Hmmm, I'd quite like Bit to have a Num instance so I can have 1, 0 :: Bit but that's kind of nasty
19:30:01 <Igloo> Hmmm
19:30:07 <Igloo> -rw-r--r--    1 igloo    igloo        8919 Jan 10 03:29 Inflate.lhs
19:30:07 <Igloo> -rw-r--r--    1 igloo    igloo       36944 Jan  9 14:29 rfc1951.txt
19:30:31 <Igloo> And the only thing I can think of that isn't implemented yet is uncompressed blocks
19:31:01 <Igloo> Although I guess to be fair the RFC does have a section describing Huffman Trees
19:31:27 <Pseudonym> True.
19:43:24 * Igloo goes to bed before I rewrite the history bit
21:17:57 <shapr> Heffalump: yes, 2.4.20 has ext3 corruption bugs, the debian source package has patches to fix that problem.
