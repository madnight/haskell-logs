02:01:45 * dark bounces.
02:10:02 <Marvin--> come out of your coding block?
02:15:36 * Marvin-- drinks some really dark coffee
02:19:31 <dark> Marvin: Not really :)
02:19:36 <dark> But making some progress.
02:20:00 <dark> I'm looking for a better way to deal with the representation of virtual addresses and file offset, which may be either Word32 or Word64 depending on the format.
02:20:41 <Marvin--> argh, someone thought it was funny to start emacs for me
02:21:10 <dark> I could use Integer, but that won't have the correct wraparound behaviour.
02:21:13 <Marvin--> "ProofGeneral offers a much superior interface."
02:21:28 <Marvin--> yeah, and emacs handles my utf-8 environment really swell - NOT
02:22:02 <dark> I could use a type like VAddr = Addr32 Word32 | Addr64 Word64, but that means encoding it in every address, even though the sizes never mix.
02:22:26 <Marvin--> argh, give me my tab key back you stupid editor
02:23:03 <dark> I could parameterize my other types (like Memory) with a word size, but that means figuring out what to do with type classes.  I don't want to use ghc's weird instance extensions :)
02:23:16 <Marvin--> I was just going to suggest that :P
02:23:57 <dark> Currently I have for example a "Format" class, of which ELF is an instance.  It provides functions like "entryPoints" and "load".
02:23:58 <Marvin--> this syntax is weird, maybe it's ML
02:25:02 <dark> This might be a too Javaish approach to begin with :)
02:25:18 <dark> Maybe I should have a Format datatype instead, and functions which delegate to various format implementations.
02:25:55 <Marvin--> why? executable format sounds like typical overloading to me
02:26:12 <dark> Yeah but I don't know how to add a variable address size to it :)
02:26:37 <Marvin--> ;)
02:26:56 <Marvin--> theory ToyList = PreList:
02:27:13 <Marvin--> datatype 'a list
02:27:13 <Marvin-->   = Nil                    ("[]")
02:27:13 <Marvin-->   | Cons 'a "'a list"      (infixr ":" 65
02:27:20 <Marvin--> )
02:36:54 <Marvin--> aiiih
02:49:11 <Marvin--> M(sent(xb,t,triple(xb,xnb,encr(triple(xa,xna,xbet),xbt))))
02:49:12 <Marvin--> er, right
02:52:06 <Marvin--> "Towards an automatic analysis of security protocols in first-order logic"
02:52:08 <Marvin--> sounds damn interesting
02:55:27 <dark> "automatic" analysis?
02:55:42 <dark> We don't even have manual analysis for security protocols :)
02:56:17 <dark> Just some fragments that don't fit together yet.
02:57:23 * dark bounces around shapr.
02:57:29 * jmalicki-work licks shapr
02:57:53 * shapr gets dizzy, slips on some saliva, and knocks himself out on the floor
02:57:59 <shapr> =)
02:58:42 <shapr> good morning #haskell!
02:59:00 <Marvin--> dark: it's an example of how SPASS finds a security hole in untyped Newman-Stubblebine key exchange
02:59:05 <Marvin--> dark: http://data.mpi-sb.mpg.de/internet/news.nsf/Spotlight/19991004
03:05:54 <dark> I'll be back in an hour :)
03:11:50 <Marvin--> SPASS is kinda fast
03:12:13 <shapr> isn't that a statistical package?
03:15:06 <Marvin--> *this* SPASS is an automated theorem prover for FOL
03:15:13 <Marvin--> FOL with equality to be exact
03:15:17 <shapr> oh
03:15:29 <shapr> hi Arnia 
03:15:31 <Arnia> Hey
03:15:45 <shapr> what's up?
03:17:09 <shapr> Marvin--: that's cool stuff
03:17:55 <shapr> you want to make something like that for Haskell + QC?
03:18:07 <Marvin--> I still don't know exactly what I want to do
03:18:26 <Marvin--> but yes I want to use a combination of theorem proving and QC to be able to show properties of Haskell programs
03:19:55 <Marvin--> "In this section we study the monadic Horn theories involved ..." que?
03:20:10 <shapr> I've heard of Horn clauses 
03:22:25 <Arnia> Hrrumph... I'm in a boring practical on system administration
03:22:38 <shapr> sysadmin is important :-)
03:22:41 <Heffalump> that sounds like monadic logic
03:22:46 <Heffalump> which I never understood
03:23:11 <Marvin--> me neither, I need to rehearse a lot of logics
03:24:43 <Arnia> shapr: Its on perl
03:27:00 <shapr> ew
03:32:02 <Marvin--> I don't get this syntax
03:32:09 <Marvin--> 5[0:MRR:4.0,1.0] ||  -> .
03:32:12 <Marvin--> ??
03:32:30 <shapr> looks like an array slice range to me
03:32:38 <shapr> where'd you get it?
03:32:48 <Marvin--> it's spass' output
03:32:55 <Marvin--> Here is a proof with depth 1, length 5 :
03:32:55 <Marvin--> 1[0:Inp] ||  -> Human(sokrates)*.
03:32:55 <Marvin--> 2[0:Inp] || Mortal(sokrates)* -> .
03:32:55 <Marvin--> 3[0:Inp] Human(U) ||  -> Mortal(U)*.
03:32:55 <Marvin--> 4[0:Res:3.1,2.0] Human(sokrates) ||  -> .
03:32:56 <Marvin--> 5[0:MRR:4.0,1.0] ||  -> .
03:32:58 <Marvin--> Formulae used in the proof : 1 3 2
03:34:04 <shapr> I understand the Formulae line
03:34:23 <shapr> Res is Result?
03:34:27 <shapr> what's MRR?
03:34:37 <Marvin--> res is resolution
03:34:38 <shapr> oh
03:34:54 <Marvin--> mrr is...probably some other proof tactic :)
03:34:59 <shapr> it looks like the numbers are line, subchunk references
03:35:08 <shapr> 3.1 is line 3, piece 1
03:35:23 <shapr> so, on line 4 it says 3.1,2.0
03:35:34 <shapr> meaning Human(U) from the first part of line 3
03:35:49 <Marvin--> well yes the numbers refer to the premises, but I'm not quite sure what .0 and .1 enumerate
03:35:50 <shapr> and Mortal(sokrates) from line 2
03:35:54 <Marvin--> and I don't understand the "||  -> ." syntax
03:36:23 <shapr> .0 means the entire premise, .1 means the first part of the premise
03:36:42 <shapr> I dunno about the pipe symbols
03:39:54 <Marvin--> "E is a a purely equational theorem prover for clausal logic. That means it is a program that you can stuff a mathematical specification (in clausal logic with equality) and a hypothesis into, and which will then run forever, using up all of your machines resources. Very occasionally it will find a proof for the hypothesis and tell you so ;-)."
03:40:13 <shapr> hah
03:43:12 <Marvin--> "E 0.31 can complete this specification using between 1/10th and 1/20th of a second of cputime on an ULTRASparc 1/143 (time resolution is getting critical for simple examples), including the overhead for parsing, I/O, and generation of a suitable term ordering. This is pretty good even for a normal state-of-the-art (i.e. not Waldmeister, which is far beyond the state of the art ;-) prover for pure unit equality problems."
03:43:14 <dark> The irony is that Socrates himself gave the ultimate proof of his own mortality, and he didn't need any syllogisms to do so.
03:43:32 <Marvin--> dark: I doubt he was happy about it though
03:43:44 * shapr grins
03:44:02 <Marvin--> How do you pronounce the word "hypothesises" anyway? ;)
03:44:14 <shapr> I just say "Lots of them"
03:44:16 <dark> I think "hypotheses" is the correct plural.
03:44:20 <Heffalump> it is
03:44:32 <shapr> I had this idea, but he has lots of them.
03:44:33 <Marvin--> sheesh, trust Germans to spel baddly
03:44:40 * shapr snickers
03:44:59 <shapr> I get to do a lot of editing of German native speakers written english.
03:45:21 <Marvin--> yay, E is gpl, maybe I should package it
03:45:22 <shapr> Not that I can speak any German...
03:45:36 <shapr> you'll probably have to fight with E the constraint based language.
03:45:37 <Marvin--> I doubt ftp-masters will like the package name "e" though
03:45:48 <dark> Kitties!  http://www.cnn.com/2003/TECH/science/01/21/cloned.cat.ap/index.html
03:45:58 <Marvin--> dark: go code! :)
03:46:07 <dark> Marvin: I think there's an actual rule that package names have to be at least 2 letter.
03:46:13 <Marvin--> dark: yeah I think so too
03:46:18 <Marvin--> is that an example of a copycat?
03:46:23 <dark> e-prover
03:46:24 <shapr> bwahahaa
03:46:32 <Marvin--> dark: yup, that's what I had in mind
03:46:45 <dark> I want a cat, but I don't think I can take care of one :)
03:46:57 <Marvin--> I want a cat too, but unfortunately I'm allergic
03:47:10 <Marvin--> I compensate by spending time with friends who have cats :P
03:47:30 <Marvin--> "other guys are nice to the cat to get the girl, while I on the other hand..."
03:47:31 <dark> Also, people around here have weird ideas about outside cats.  I wouldn't trust them to leave it alone.
03:48:03 <Marvin--> cute name though, "Cc" :)
03:48:56 <dark> "Cc's creation was funded by Genetic Savings & Clone, a company that hopes to make money from people's desires to duplicate their favorite pets."
03:49:04 <Marvin--> argh, I have been looking at sparkle, coq, otter, isabelle/hol, spass, and now E. Right, that leaves looking into gandalf and vampire too
03:49:19 <Marvin--> makes you wonder if theorem provers multiply
03:49:24 <dark> Marvin: How many of those have entries in the Monster Manual?
03:49:25 <shapr> we have five cats
03:49:26 <Marvin--> dark: errr
03:49:36 <Marvin--> dark: heh, no idea
03:49:48 <dark> shapr: Did you have problems moving them?
03:49:49 * shapr grins
03:49:52 <shapr> dark: yes.
03:50:19 <Marvin--> "Not only does cloning not produce a physical duplicate, but it can never reproduce the behavior or personality of a cat that you want to keep around. There are millions of cats in shelters and with rescue groups that need homes, and the last thing we need is a new production strategy for cats."
03:50:42 <shapr> swedish law says we have to vaccinate them and have them tested, injected with identifier chips and registered before we can move them to sweden
03:51:01 <shapr> it was an expensive and time consuming process
03:51:10 <Marvin--> a friend of mine has a cat coming from a shelter, it's very shy
03:51:14 <shapr> four months from vaccine to test is the legal minimum
03:51:31 <Marvin--> shapr: I guess they want to err on the safe side
03:52:44 <dark> shapr: identifier chips?
03:53:14 <shapr> yah, our cats have passive radio identifier implants
03:53:24 <dark> My girlfriend's sister has cats and sometimes we take care of them when she's away.  They're always very curious about these weird people on their couch :)
03:53:28 <shapr> with included serial number, etc
03:53:36 <Marvin--> chip-in-the-brain connected to the door so you don't have to go up in the middle of the night to let them in or out
03:53:41 <Marvin--> we're advanced in Sweden, we are
03:54:08 <dark> Marvin: I think I saw a site of someone who actually made a catflap with image detector to let only his own cat in.  That would indeed be easier with rfid :)
03:54:22 * shapr laughs
03:54:23 <Marvin--> dark: yeah, it's been on /. ages ago
03:54:31 <Marvin--> E.tgz
03:54:35 <Marvin--> something tells me I have to rename that one
03:55:11 <shapr> hmm
03:58:35 <Marvin--> maybe I should call it eprover instead of e-prover, the author's html file is called eprover.html :)
04:01:08 <shapr> there are some seriously weird people on #java
04:02:05 * Arnia points at #python
04:02:13 <dark> Slashdot's search engine sucks.
04:02:19 <shapr> at the moment, java is *way* ahead of python
04:02:36 <shapr> <thalesdm> Probably. My family has studied the Middle East for centuries, and isn't much into conspiracy theories, we know what is really happening
04:02:38 <shapr> beat that...
04:03:16 <shapr> I'm not sure if he's for real or not, but either way, he's outside of my everyday experience.
04:03:19 <Arnia> Oooooookkkay
04:03:28 * shapr laughs
04:03:30 * Arnia goes and hides on #plone
04:03:33 * shapr laughs more
04:04:02 <Arnia> BTW, anyone heard any more about Fruit?
04:04:13 <shapr> I thought Fruit became Yampa?
04:04:18 <shapr> or am I confused..
04:05:20 <dark> http://www.quantumpicture.com/Flo_Control/flo_control.htm
04:05:24 <Arnia> Aha, didn't know that
04:06:11 <shapr> Arnia: I could be wrong, I need to check..
04:07:34 <Arnia> Ok...
04:07:39 * Arnia reads up on Arrows
04:07:53 <Marvin--> dark: go CODE! :)
04:07:55 <shapr> I luv arrows... but I only vaguely understand them
04:08:06 <shapr> we're all CODEpendant
04:08:46 * shapr chortles
04:09:58 <Marvin--> riiight
04:10:04 * Marvin-- slowly backs away from shapr
04:10:42 <Arnia> I think all data is type
04:11:02 * Arnia wonders about winding up all the dynamic typists in #python with that one
04:17:46 <lament> won't work.
04:23:03 <Arnia> Won't wind them up?
04:23:16 <dark> clockwork python typists?
04:23:58 <lament> Arnia: no
04:24:08 <lament> Arnia: because it not C++
04:25:05 <Arnia> Errm... I'm putting forward the idea that all there is is type. That data is just type that is being used.
04:28:21 * Marvin-- smiles at lament after checking in on #python
04:28:49 <lament> Arnia: and type is type that is not being used?
04:29:06 <Arnia> No, type is all :)
04:29:34 <lament> no, what i don't understand is
04:29:40 <lament> "data is just type that is being used."
04:29:41 <Marvin--> -O6
04:29:44 <Marvin--> *6*?!
04:29:46 <lament> what sort of type is not being used?
04:29:48 <Marvin--> is that even meaningful?
04:30:09 <Arnia> data is type that is being used in an arrow then
04:30:16 <lament> ooh.
04:30:26 <lament> I don't know what arrows are. Is there a good tutorial on them?
04:30:42 <Arnia> Read up on 'Genuinely Functional GUIs'
04:30:58 <Marvin--> "HPUX with gcc - someone please hurt an HP employee for me!" <- from Makefile.vars in E
04:31:34 * shapr grins
04:31:55 <Arnia> I'm being very abstract here... deliberately. These aren't meant to be particularly useful ideas, just bits of theory to knock around.
04:32:33 <Arnia> I am coming to believe that all data is, is a type declaration. I think I need to find some good books on Denotational Semantics
04:33:44 <Marvin--> why is it a type declaration?
04:33:51 <Marvin--> I know some denotational semantics
04:33:55 <lament> Well, all type is certainly data - that's half of it :)
04:34:12 <Arnia> What is the number 1?
04:34:43 <Arnia> Not the symbol, but the concept
04:35:38 * Marvin-- starts looking for a book by Dantzig
04:35:53 <lament> Arnia: that's an evil question.
04:35:55 <Marvin--> "Number. The Language of Science" <- good book
04:36:47 <Marvin--> "This is without doubt the most interesting book about the development of the concept of numbers I've ever read" (Albert Einstein)
04:36:53 <Arnia> lament: Not really... one view is that the number 1 represents a set consisting of all possible instances (both concrete and abstract) of that number
04:37:34 <lament> Arnia: that's silly, since then i'd ask: what are the instances of number 1?
04:38:04 <shapr> erm, random silly question...
04:38:20 <shapr> foldr1 should go from [a] -> a
04:38:24 <shapr> is that true?
04:38:56 <shapr> what HOFs should go from [a] -> [a] where the second list is smaller?
04:39:00 <shapr> like, filter for example
04:39:04 <Arnia> You can rationalise it by saying that 1 is the type of all objects that denote one
04:39:28 <lament> Arnia: what objects denote one?
04:39:38 * shapr needs to reread the banana, lense, etc paper
04:39:55 <lament> shapr: heh, that paper is weird.
04:39:55 <Arnia> This does -> 1
04:40:12 <Arnia> So does the binary 000001
04:40:24 <Marvin--> shapr: er, what is your exact question?
04:40:28 <Igloo> shapr: lots
04:40:39 <Igloo> take n where n < length of the first list
04:40:40 <lament> Arnia: number one is the type of a literal 1? That doesn't make much sense
04:40:43 <Igloo> drop n for the same
04:40:56 <Igloo> const [] if the first list isn't empty
04:41:18 <lament> s/literal/numeral
04:41:23 <Arnia> lament: Why not?
04:41:38 <Arnia> Numerals denote the abstract concept of a number
04:41:50 <Marvin--> What's the definition of a type anyay? If a type is a set, then a lot of things are types, yes
04:41:52 <lament> Arnia: because the type of numeral 1 is string, for one :)
04:41:55 <shapr> Marvin--: I don't know my exact question, I think that's the problem.
04:41:58 <shapr> hi Igloo!
04:42:00 <Marvin--> shapr: aha
04:42:31 <Arnia> lament: No such thing as a real number 1, all we have are denotations
04:43:02 <Arnia> Marvin--: Types are abstract descriptions of form in this view
04:43:06 <Marvin--> Arnia: okay
04:44:30 <Marvin--> bah, there doesn't seem to be a multi meeting scheduled for tomorrow
04:44:31 <Igloo> Hi  :-)
04:44:50 * Arnia needs to go
04:44:52 <dark> I think there's a difference in kind between "one pineapple" and "one liter of water".
04:45:11 <Arnia> dark: How do you know they mean the same thing?
04:45:16 <shapr> actually, I think I want to go through the prelude.list module and classify each of the functions as hylo, cata, etc
04:45:20 <dark> Arnia: I'm saying they don't :)
04:45:25 <shapr> to match the banana lenses barded wire paper
04:45:34 <lament> shapr: why?
04:45:42 <Arnia> dark: I mean, you know that there is a concept of 'one-ness' there
04:45:50 <shapr> is there a separate name for catamorphisms that go from many to one?
04:46:33 <dark> Arnia: I think it's a human definition, the universe doesn't care about 'one-ness' just like it doesn't care about 'pineapple-ness'.
04:46:43 <shapr> lament: map is foldr that's not a catamorphism, yes?
04:47:01 <Arnia> dark: That argument could be used to say that all maths is shit. It doesn't matter in the end.
04:47:16 <shapr> filter is sometimes [a] -> a and sometimes [a] -> [a]
04:47:28 <dark> Arnia: I don't think so.  The argument could be used to say that maths is about humans :)
04:47:37 <Igloo> Ermmm, no, filter always gives you a list
04:47:39 <shapr> no wait, foldr != map
04:47:42 <lament> heh
04:47:46 <shapr> argh
04:47:50 <lament> filter most certainly gives a list
04:47:58 <lament> while foldr doesn't
04:48:00 <Arnia> dark: Pity it seems to describe the universe so well then
04:48:04 <Arnia> I have to go, speak soon
04:48:15 <shapr> lament: I think I do not sufficiently understand foldr
04:48:53 <shapr> it sure is cool when I use it though
04:49:56 * lament wonders what arnia's idea was all about
04:50:06 <shapr> I dunno, but it sounds interesting
04:50:23 <shapr> I know he's very interested in type theory
04:50:37 <lament> arnia's mistake was using numbers as an example
04:51:00 <shapr> I think he was specifically interested in numbers
04:51:03 <shapr> type theory of numbers
04:51:24 <shapr> I agree with dark, math is about humans
04:51:45 <lament> numbers are absolutely disturbing
04:51:59 <shapr> imho, reality is... we put rules one some parts and hope the other parts follow the same rules
04:52:11 <dark> Yeah, especially if you don't know in advance whether they're 32-bit or 64-bit numbers :-)
04:54:34 <dark> I think Feynman defined "If I do this, what happens?" as the essential question of science.
04:54:42 * shapr agrees
04:57:10 <lament> I thought the essential question was "Why does this happen when I do that?"
04:59:13 <dark> lament: That's not a question that can be answered via the scientific method, though :)
05:00:19 <lament> that's why it's so essential!
05:20:27 * dark tries using just Integer everywhere and doing width-limited arithmetic explicitly where necessary.
05:54:57 <Segora> re
05:55:13 <shapr> hiya
06:02:30 <Marvin--> omg this code is getting ugly
06:02:43 <shapr> ?
06:03:18 <Marvin--> I'm using newt to create a user interface
06:03:24 <shapr> what's newt?
06:03:24 <Marvin--> and it's all way too dynamic
06:03:28 <shapr> I've heard of it....
06:03:32 <shapr> I think
06:03:40 <Marvin--> developed by redhat to be used in an installer, it's based on slang
06:03:54 <Marvin--> "Not Erik's Windowing Toolkit - text mode windowing with slang"
06:04:29 <Marvin--> so anwyay, what I'm doing now is, I've got these two pieces of text, and I've gotta fit them and two buttons on this screen
06:04:50 <shapr> yay, fun
06:05:13 <Marvin--> so I create two dummy textbox components to figure out how much space the texts will take when reflowed, then I figure out the size of the screen, create a window that fits in the screen and isn't unreasonably large if the texts are small
06:05:41 <Marvin--> then I check "hmm, did I get a smaller window than I asked for? damn, then I'll have to make the textboxes smaller, err..."
06:05:47 <Marvin--> luckily, they have scrollbars :P
06:05:51 <shapr> yay
06:06:05 <shapr> you can't just ask for the window size?
06:06:58 <Marvin--> yes, I ask for the screen size and create a window that's width-7 and max height-5
06:07:22 <Marvin--> I don't want lots of empty space in the window so I start by creating the dummy textboxes to calculate how much space I need, before creating the window
06:07:51 <Marvin--> The only trickery is when I need more space than what's available
06:07:56 <Marvin--> remember, this is going to run in 80x24 :)
06:15:50 <Marvin--> shapr: http://193.11.232.159:8080/newt.png and newt-small.png
06:17:55 <Marvin--> ugh, I think more coffee is in order
06:18:01 <shapr> oh, this looks very familiar
06:19:22 <Igloo> #
06:19:28 <Igloo> Ooops
06:19:39 <Marvin--> # to you too :)
06:25:13 <Marvin--> tetrinet anyone?
06:26:28 <lament> Marvin--: sure
06:26:34 <Marvin--> tetrinet.debian.net
06:31:33 <lament> i haven't played it in ages...
06:33:17 * shapr looks up tetrinet
06:33:45 * shapr installs
06:56:50 <Marvin--> c'mon shapr, join us
06:57:36 <dark> shapr gets assimilated?
06:59:39 <shapr> oh ,ok...
07:01:54 * shapr tries to figure out how to connect
07:02:43 <shapr> oh, duh..
07:02:48 * shapr installs the CLIENT this time
07:02:55 <Marvin--> hahaha
07:03:00 <lament> ouch.
07:06:52 * dark runs out to the store.
08:18:57 <andersca> yo Marvin-- and shapr
08:18:59 <andersca> and the rest
08:20:17 <Marvin--> yo dinner
08:20:38 <shapr> yah, food time
08:36:07 <creature> Afternoon, all.
08:38:21 <creature> Quick Q: I know I can do stuff like foo :: a -> a, but is there a way I can restrict a to a certain class of types? 
08:38:49 <creature> I have to operate on a numerical list, and whilst I could assume this means it wants ints only I'm not sure I'm meant to.
08:39:03 <dark> You can do foo :: (Integral a) => a -> a
08:39:43 <dark> Or Num a, depending on what operations you need.
08:40:15 <creature> Hmm.
08:40:45 <creature> Well, I've got a question sheet that asks me to define a function that adds 3 to every element of a numerical list. 
08:41:02 <creature> Which I've done. But for a list of ints. 
08:41:39 <dark> Well, (+) is part of Num.
08:41:41 <creature> Is there likely to be a big problem with me writing stuff like that for an int, and then later adapting it when I can bounce it off my seminar leader? 
08:42:01 <dark> So you can probably change just the type signature and it'll work for other numerical types.
08:42:10 <creature> Cool.
08:42:18 <dark> Hmm, except for the "3"
08:42:27 <dark> You might need to write (fromIntegral 3)
08:42:48 <dark> So that it gets converted into the appropriate numerical type.
08:43:05 <creature> I don't suppose you happen to know the syntax of filter, do you? 
08:43:12 <creature> I could really do with a good Haskell reference. 
08:43:24 <creature> If I weren't a couple of weeks away from being done with it for a while, I'd invest.
08:43:39 <dark> http://www.haskell.org/onlinereport/standard-prelude.html
08:44:08 <Igloo> :t filter   in one of the interpreters tends to suffice for me
08:44:35 <creature> That's cool, thanks.
08:48:20 <creature> mgoetze|away !
09:01:12 <mgoetze> creature: hi :)
09:01:36 <creature> Mike - I was going to ask you. 
09:01:49 <mgoetze> yeah?
09:01:56 <creature> I remember you saying you got cron to do an apt-get update && apt-get upgrade overnight a while back. How did you get this going? 
09:02:34 <mgoetze> oh, that must have been ages ago :) well, you'll have to put something like the following in /etc/crontab:
09:03:09 <creature> Yeah, probably at least a year ago.
09:03:15 <andersca> woohoo http://www.gnome.org/pr-bitstreamfonts.html
09:03:41 <mgoetze> 30 4 * * * root apt-get update && apt-get -y upgrade
09:03:55 <mgoetze> (would run every morning at 4:30)
09:04:48 <Heffalump> what happens if debconf wants to know something?
09:05:45 <creature> That was my fear. 
09:05:51 <creature> I've got to get it to go through my proxy, too.
09:06:12 <mgoetze> well, you can get apt set up to automatically use the proxy, that's not such a problem
09:06:13 <creature> It takes notice of $http_proxy when running interactively, you see. 
09:06:18 <creature> But doesn't do that in cron.
09:06:23 <creature> Not sure if it's in my apt setup.
09:06:27 <mgoetze> yeah, you'll have to set it up in apt.conf
09:06:44 <mgoetze> as for debconf, should be fine as long as you're sticking to stable...
09:06:52 <creature> I am.
09:07:34 <mgoetze> but just in case, you might want to 'dpkg-reconfigure debconf' to ignore anything below critical
09:08:11 <Igloo> debconf has a don't ask frontend doesn't it?
09:08:29 * mgoetze updates manually anyhow... that was just for a company where i wasn't going to be working much longer.
09:08:43 <creature> Done that. 
09:08:54 <creature> I'd like it to do it overnight for me, really. 
09:08:58 <creature> Now, how do we get it proxying? 
09:09:55 <Heffalump> I just download updates and do apt-get -n upgrade
09:10:00 <Heffalump> so I get an email telling me about them
09:10:09 <Heffalump> I should add a filter so I only get told when there are any
09:10:24 <creature> I'm tempted to not bother, really. Just thought it would be quite swish to have it automatically upgrading.
09:11:40 <dark> ... but that would remove the fun of manually upgrading.
09:11:50 <creature> Yeah.
09:12:01 <Heffalump> creature: you have an http proxy?
09:12:14 <creature> Not personally, but the uni does. 
09:12:15 <Heffalump> just make sure the environment variable http_proxy is set (or ftp_proxy if appropriate)
09:12:19 * mgoetze is trying to get mailman working on a new debian system
09:12:19 <creature> It's where we get our web browsing from. 
09:12:25 <Heffalump> I forget how to make cron do this
09:12:36 <creature> Incidentally, any of you ever played with icecast? 
09:12:39 <creature> I'm having some problems. 
09:12:53 <creature> I want to get streaming working, so I can listen to my music from the PPC's (Public PC's).
09:13:51 <creature> Every now and again it cuts out. I did think this was a bitrate problem to begin with, as apparently changing mid-stream causes players to barf. 
09:14:01 <creature> But I told it to ignore things not at the default rate and it still does it. 
09:14:05 * creature considers a buffer running empty. 
09:15:26 <shapr> creature: seen cron-apt?
09:16:41 <creature> Nope.
09:16:44 <creature> What's that? 
09:16:48 <shapr> apt-get -uf install cron-apt
09:17:05 <creature> What's -u ? 
09:17:41 <shapr> means "show me the new packages and ask me yes/no"
09:19:35 <creature> OK, got that now. 
09:19:37 <creature> So what is it? 
09:20:19 <shapr> look in /etc/cron-apt/
09:20:35 <creature> For what? 
09:21:13 <shapr> by default it does update && -d upgrade
09:21:18 <shapr> you can change lots of nifty options
09:21:41 <shapr> and it runs at 4:00am by default I think
09:22:27 <creature> I can live with that.
09:22:29 <creature> Sounds cool.
09:25:00 <Igloo> It's bad when 4am is too early, right?
09:25:14 <shapr> yes, that's bad.
09:25:23 <shapr> sadly, that's been the case for me many times
09:25:33 <creature> I was thinking that I'm likely to be up then.
09:25:54 <creature> But there's no time when I can be certain of being asleep.
09:26:18 <shapr> you could wrap it in a load-checking script
09:26:39 <creature> Nah, I run seti too.
10:01:46 * dark moves his mouse so that from now on his other shoulder will hurt.
13:19:04 <stepcut> greetings and salutations
14:27:46 <esap> hmm.. someone tell me how would I optimize the performance of a monadic parser? I mean, it is way too easy to use all the time in >>= operation for the parser monad. How can I avoid it?
14:29:30 <Marvin--> have you written it yourself?
14:29:38 <esap> yes.
14:30:00 <esap> I needed some features that I didn't find anywhere else.
14:30:15 <Marvin--> "Parallel Parsing Processors" by Koen Claessen is a quite good read
14:30:21 <Marvin--> Processes even
14:31:06 <Marvin--> basically, you want a continuation passing monad to avoid right-recursion
14:31:29 <esap> oh hmm. that's a good point.
14:32:01 <Marvin--> (or was it left? I'd have to dig up some notes to answer that)
14:32:19 <Marvin--> http://www.cs.chalmers.se/~koen/Papers/parsing-pearl.ps
14:32:33 <esap> My current parser has a "parse function" that is something like: [c] -> a -> m (ParserResult c b)
14:33:14 <Marvin--> what's the a?
14:33:56 <esap> It's a context passed for the parsing, to be used by the grammar for its own purposes.
14:34:06 <Marvin--> oookay
14:34:10 <Marvin--> in any case, that paper is a good read :)
14:34:25 <Marvin--> "6  Implementation B: Removing Bind"
14:34:42 <esap> Ok thanks, I'll read that.
14:36:09 * shapr ribbits loudly
14:36:32 <Marvin--> evening shapr
14:37:13 * Marvin-- has been playing a nerdy CCG for several hours :)
14:37:34 <shapr> which one?
14:37:40 <Marvin--> A Game of Thrones
14:37:45 <shapr> oh
14:39:17 <Marvin--> you up for some nightly tetrinet? :)
14:39:59 <shapr> tempting, but I gotta watch tv with my woman
14:40:15 <Marvin--> poor you :)
14:40:48 <shapr> even worse
14:41:04 <shapr> I just got an email saying I'll probably be doing a whole lot of java 
14:41:07 * shapr sighs
14:41:35 <shapr> g'night all
15:30:05 <Riastradh> Is there a TFM which I can R about using hugs in Emacs?
15:46:24 <Heffalump> apt-get install haskell-mode :-)
15:46:33 <Heffalump> if you happen to use Debian
15:46:43 <Heffalump> dunno about a TFM though
15:50:33 <Riastradh> Never mind, I found it.
16:36:49 <creature> I have some custom types: Database :: [(Person, Book)], Person :: String, Book :: String
16:36:53 <creature> I have to write a function foo :: Database -> Person -> [Book] That returns a list of books that the person has according to the database. 
16:36:59 <creature> This is not difficult. 
16:37:02 <creature> However, I have to do it using things like map, filter, etc. Recursion isn't an option, nor is a list comprehension.
16:37:06 <creature> This is difficult, because I'm tired to the point that I can implement but not create. So some hints on what kind of thing I'm trying to do here would be appreciated.
16:38:29 <Pseudonym> Can you do it with a list comprehension?
16:38:34 <Pseudonym> I don't mean "are you allowed".
16:38:39 <Pseudonym> I mean "are you awake enough".
16:38:56 <Heffalump> if so, there's translation rules in the Haskell report
16:39:01 <Pseudonym> Right.
16:39:06 <Riastradh> I'm only learning Haskell, but from what I know of other functional languages:  map (\((person, book)) -> book) myDatabase
16:39:20 <Riastradh> Er.
16:39:22 <creature> I've done it with a list comprehension before. 
16:39:27 <Riastradh> Damnit, I didn't mean to write out the whole answer.
16:39:28 <Pseudonym> OK, then.
16:39:30 <creature> That's why I'm not meant to do it.
16:39:32 <Pseudonym> Here are the translation rules.
16:40:09 <Pseudonym> [ E | P <- Qs ] = map (\P -> E) Qs
16:40:23 <Pseudonym> [ E | BoolTest ] = if BoolTest then [E] else []
16:40:53 <Pseudonym> [ E | Stuff1, Stuff2 ] = concat [ [ E | Stuff2 ] | Stuff1 ]
16:41:02 <Pseudonym> That's pretty much all you need to know.
16:41:22 <Pseudonym> This assumes patterns in qualifiers are irrefutable, BTW.  If they can fail, the rules are slightly different.
16:42:13 <creature> I see.
16:42:24 <Pseudonym> It's a brain-dead translation, but it'll work.
16:43:08 <Pseudonym> The one in the report is much more efficient.
16:45:07 <Pseudonym> Interestingly, monads used to be defined using only these primitives: map, concat and unit.  Unit is now called "return".
16:45:15 <creature> Haven't done monads yet. 
16:45:19 <Pseudonym> You can see it in the boolean case.
16:45:34 <Pseudonym> [ E | BoolTest ] = if BoolTest then return E else fail "whatever"
16:46:19 <creature> Riastradh - if it makes you feel better, you didn't, because it doesn't take into account person.
16:46:34 <creature> Unless...
16:47:58 <Riastradh> Oh, right.
16:48:02 * Riastradh misread your question.
16:48:40 <creature> wb Pseudonym.
16:48:49 <Pseudonym> Thanks.
16:51:42 <creature> With your stuff1, stuff2 above can I use that on something like "P <- Qs, P > 5"?
16:51:48 <Pseudonym> Sure.
16:51:59 <Pseudonym> The Stuffs can even be multiple Stuff.
16:52:36 <Pseudonym> [ E | Stuff1, Stuff2, Stuff3 ] = concat [ [ E | Stuff2, Stuff3 ] | Stuff1 ]
16:52:50 <Pseudonym> = concat [ [ E | Stuff3 ] | Stuff1, Stuff2 ]
16:53:19 <Pseudonym> Associative law and all that.
16:53:54 <Pseudonym> I assume concat is allowed, BTW.
16:54:06 <creature> Yeah.
16:54:41 <creature> Argh, I'm not getting very far here. 
16:54:44 <Pseudonym> Also useful is the function concatMap.
16:54:52 <creature> Now, that does sound useful.
16:54:54 <Pseudonym> concatMap f xs = concat (map f xs)
16:56:27 <Pseudonym> Oh, how about it: http://web.mit.edu/6.827/www/lectures/L09-Lists2Print.pdf
16:56:33 <creature> listBooksv2 dBase per = concat [ [ b | p == per] | map (\((p,b)) -> b) dBase]
16:56:52 <creature> I tried that which I think is true according to the substitution thing you gave me above. 
16:57:23 <Pseudonym> Nope.
16:57:26 <creature> If I don't get this done in the next 3 minutes, I'm going to bed. I'll rtfm later. 
16:57:32 * Pseudonym nods
16:57:47 <creature> No, maybe it isn't.
16:57:49 <Pseudonym> Oh, hang on.
16:58:19 <Pseudonym> No, mine was right. :-)
16:58:45 <creature> Funny that, a bit of thought and I can get it working after all.
16:58:50 <Pseudonym> :-)
16:58:59 <creature> listBooksv2 dBase per = concat [ [b | p ==per] | (p,b) <- dBase]
16:59:04 <Pseudonym> Right.
16:59:11 <creature> Cheers for that, most useful.
16:59:16 <Pseudonym> Not a problem.
17:00:29 <Smerdyakov> I can write this function in ML with one call to List.mapPartial.... :P
17:01:17 <Pseudonym> Well you can do it in Haskell with a one-line list comprehension for that matter. :-)
17:01:41 <creature> I did it in Haskell with a one-line list comprehension. :)
17:01:43 <Pseudonym> It's also fairly straightforward to do it with one call to foldr.
17:01:48 <creature> I had to reimplement it 2 different ways.
17:02:37 <creature> Anyway, I'm off to bed. 
17:02:39 <creature> Cheers for that.
17:02:41 <Pseudonym> Night.
17:02:43 <Pseudonym> No problem.
17:03:27 <Smerdyakov> Isn't listBooks dBase per = [b | p == per, (p, b) <- dBase] better, or is that not valid Haskell?
17:03:45 <Pseudonym> He had to implement two separate ways.
17:03:52 <Pseudonym> He did one pretty much that way.
17:03:58 <Smerdyakov> OK, so then:
17:04:16 <Smerdyakov> listBooks dBase per = identityFunction [b | p == per, (p, b) <- dBase]
17:04:23 <Smerdyakov> However you would denote identityFunction in Haskell ;-D
17:04:31 <Pseudonym> It's called id.
17:04:43 <Smerdyakov> OK. 2 different ways!
17:04:51 <Pseudonym> That would hardly impress whoever is marking his assignment.
17:05:02 <Pseudonym> Since he's gone:
17:05:12 <Smerdyakov> Whoever is marking his assignment should learn to specify the assignment more precisley ;-)
17:05:44 <whee> they'll do that by not giving you credit :)
17:06:11 <Pseudonym> listBooks dBase per = dBase >>= \(p,b) -> guard (p == per) >> return b
17:07:05 <Pseudonym> Smerdyakov: I suspect it was specified more precisely that he had the time or inclination to describe here.
17:07:36 <Smerdyakov> fun listBooks dBase per = List.mapPartial (fn (p, b) => if p = per then SOME b else NONE) dBase
17:07:37 <Smerdyakov> ;-D
17:08:39 <Pseudonym> I'm not sure if we have that.
17:09:02 <Pseudonym> mapPartial :: (a -> Maybe b) -> [a] -> [b]
17:09:17 <Pseudonym> Mercury calls it map_filter.
17:10:46 <Pseudonym> Oh, cool.
17:10:49 <Pseudonym> We have something even more powerful.
17:11:06 <Smerdyakov> A ten foot tall donkey?
17:12:16 <Pseudonym> Oh, no, not what I thought.
17:12:16 <Pseudonym> Yes, the thing is, if in Haskell you feel like mapPartial, you're probably better off using list comprehensions or monad "do" notation.
17:16:09 <Pseudonym> I like the ten foot tall donkey idea, though.
17:16:33 <Smerdyakov> The ten foot tall Haskell donkey doesn't have any insides unless you cut him open and look.
17:16:51 <Pseudonym> Yes.  Haskell is very quantum like that.
17:17:17 <Pseudonym> Factoid: More people are killed every year in incidents involving donkeys than in incidents involving aeroplanes.
17:19:52 <Heffalump> BAN DONKEYS!
17:36:24 <Pseudonym> I agree.
17:36:32 <Pseudonym> Donkeys are bloody dangerous.
