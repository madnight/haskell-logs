01:40:22 <shapr> good morning!
01:40:25 <shapr> how's life?
01:41:19 <Arnia> Icons and I'm going on a date shortly :)
01:41:21 <Arnia> http://plone.org/Members/arnia/iconsets/bubble
01:47:31 <shapr> nice icons
01:48:17 <Arnia> danke... now I'm off to the baltic art gallery for my date
01:48:22 <Arnia> Bye :)
01:48:24 <shapr> have fun!
01:51:05 <shapr> hi Marvin--
01:51:53 <Marvin--> morning
01:52:07 <shapr> what's up?
01:52:55 <shapr> I wonder why he was k-lined
01:53:18 <andersca> whoops
01:55:28 <Marvin--> er
01:55:51 <Marvin--> what's up? Nothing much, I missed the number theory lecture because I overslept
01:56:08 <Marvin--> not that today's material will be on the exam (which is on Saturday and I will probably fail it miserably)
01:56:18 * mgoetze was up in time for discrete mathematics today.
01:56:38 * mgoetze handed out the voting sheets for the best lecture. :)
02:45:05 * shapr bounces
02:45:44 <mgoetze> shapr: :P
02:46:30 <andersca> our CEO also overslept
02:58:48 * shapr woke up early
02:58:54 <shapr> time for swedish class, bbl
02:59:14 <andersca> have fun
03:23:19 <Marvin--> bah
03:23:22 * Marvin-- curses tetrinet
03:25:40 <andersca> addictive?
03:26:02 <Marvin--> yeah
03:26:45 <Marvin--> tetrinet.debian.net says "If you wonder why your RC bug isn't fixed, you're looking at the answer"
03:27:16 <andersca> :)
03:28:04 <Marvin--> well, I'm off for the univ
06:35:34 <xkb> hi
06:35:43 <xkb> What does this do:
06:35:54 <xkb> add x y =
06:36:01 <xkb> x >>= la ->
06:36:16 <xkb> y >>= \b ->
06:36:20 <xkb> return (a+b)
06:36:27 <xkb> that l should be a \
06:36:39 <xkb> where x and y are Monad instances
06:36:57 <xkb> Instance Monad Maybe 
06:37:11 <xkb> and the operation >>= is defined as
06:37:25 <xkb> x >>= f = case x of 
06:37:31 <xkb> Just a -> f a
06:37:39 <xkb> Nothing -> Nothing
06:38:03 <xkb> And the thing that I dont understand fully is the syntax of the x >>= \a -> thing
06:38:04 <smkl> same as "add = liftM2 (+)"
06:38:37 <smkl> x is a computation that returns value a
06:38:43 <xkb> ahh
06:38:50 <Igloo> It's just x >>= (\a -> thing)
06:39:01 <xkb> aha
06:39:09 <xkb> so its not 2 cases or somthing
06:39:11 <xkb> something
06:39:28 <xkb> I know what the code does, semantically.
06:39:36 <Igloo> No
06:39:41 <Igloo> It's the same as
06:40:01 <smkl> it could be written do { a <- x; b <- y; return (a+b) }
06:40:02 <Igloo> do a <- x; b <- y; return (a + b)
06:40:07 <xkb> ahhh
06:40:12 <xkb> thats more familliar
06:40:32 <xkb> ok.. Thanks
07:07:47 * shapr bounces off the wall
07:24:01 <shapr> hi ludde
07:24:08 <shapr> var bor du?
07:24:08 <ludde> hi
07:24:14 <ludde> gbg
07:24:19 <ludde> ungefär
07:24:20 <shapr> jag studerar svenska :-)
07:24:30 <ludde> okej :)
07:24:39 <shapr> svenska är kul
07:24:53 <shapr> what's ungefär?
07:25:04 <mgoetze> approximately, about
07:25:16 <shapr> oh, ok
07:25:16 <shapr> thanks
07:25:33 <mgoetze> schweidisch ist geschrieben garnicht so schwer zu verstehen...
07:25:34 <shapr> mgoetze: you do swedish?
07:25:37 <mgoetze> shapr: nope
07:25:38 <shapr> oh, ok :-)
07:25:57 * mgoetze has been in sweden, though :)
07:25:58 <ludde> hi mgoetze :)
07:26:02 <mgoetze> hi ludde :)
07:26:15 <shapr> mgoetze: what were you doing in .se?
07:26:35 <mgoetze> shapr: european diplomacy convention
07:26:46 <shapr> neat
07:26:51 <shapr> was everybody tactful?
07:26:57 <mgoetze> nope, lol
07:26:59 <shapr> did you all go out to a pub and have beer?
07:27:14 <mgoetze> yeah, well, in larger groups at least
07:27:19 <mgoetze> except of course not everyone had beer
07:27:23 * mgoetze doesn't do alcohol.
07:27:48 <mgoetze> and the new european diplomacy champion is a norwegian, hehehe
07:28:09 <shapr> oh, diplomacy is a game?
07:28:46 <dark> shapr: If you didn't know that, then I recommend finding out and playing it a bit :)  It's the original networked multiplayer game, from the pencil and snail mail age.
07:29:07 <mgoetze> it's a board game, really :)
07:29:13 <mgoetze> well, not a board game... THE board game
07:29:14 <ludde> european diplomacy convention sounded like some political meeting :)
07:29:23 <mgoetze> dark: so i'll see you at findipcon? ;)
07:30:34 <mgoetze> dark: www.melankolia.net/sds/index.html
07:34:23 * shapr bounces
07:34:33 <mgoetze> creature: hi alex
07:35:46 <dark> mgoetze: No, I'm dipped out :)  I recommend the game to people who haven't tried it, though.
07:36:01 <mgoetze> dark: how can that happen?
07:36:11 <mgoetze> dark: also, how/where did you play?
07:37:19 <dark> mgoetze: In my student days, in Groningen and NL generally.  Actually I never played much myself, but I my best friend played a lot and I sort of looked over his shoulder :)
07:38:16 <mgoetze> dark: are you in helsinki, or near?
07:38:30 <dark> mgoetze: In Helsinki.
07:39:31 <mgoetze> dark: surely you could at least spare a weekend to have a fresh look at it then? ;)
07:41:56 <creature> Hey mgoetze (Mike, isn't it?)! ltns.
07:42:03 <dark> Hmm, which weekend?  It only gives last year's date.
07:42:58 <mgoetze> creature: yeah, lol
07:43:05 <mgoetze> dark: april 25-27
07:54:14 * shapr sproings
07:54:25 <shapr> hi Dalroth
07:54:32 <shapr> written any Haskell code lately?
08:03:39 <shapr> dark: hey, how's HaSDL doing?
08:11:15 <shapr> any used strafunski?
08:26:52 <dark> shapr: I've been trying to rewrite Penguin Warrior in Haskell :)
08:27:55 <shapr> wow cool!
08:29:47 <shapr> y0 Arnia
08:29:48 <shapr> wasssup?
08:29:59 <dark> I might convert it from using (x, y) tuples to using a Pair type.  That way I can make it a functor, and define + and - operators.
08:30:10 <Arnia> Been shopping :)
08:34:03 <shapr> today's vaporware project is a real-time strategy game that comes with a library of strategy combinators, where you build your own AI.
08:34:38 <shapr> If you've ever played the first Dark Reign and really used the unit settings, this is the next step.
08:34:46 <Arnia> www.galileo-projects.org is the project I was mentioning about this
08:35:05 <Arnia> I dunno if the site is back up, I'll bug Chris about it if it isn't :)
08:35:05 <shapr> empty site
08:35:23 <Arnia> I'll go and bug chris :)
08:35:37 <shapr> I've been trying to think up a set of combinators I'd like to use
08:35:55 <Arnia> Galileo is the frontpiece game for the engine. The engine will use Python as the glue between components
08:36:01 <shapr> neat
08:36:17 <Arnia> The engine consists of both a UI section and client and a server section
08:36:42 <Arnia> You will, theoretically, be able to make any multiplayer, interaction game using the system.
08:37:01 <Arnia> Want to help? :)
08:37:19 <shapr> sounds interesting
08:37:31 <Arnia> I'm using Haskell as the inspiration and python to do the code and I need some help with it... so if you're interested :)
08:38:02 <shapr> you have code?
08:39:21 <Arnia> The graphics and sounds engines (both very advanced) have code, but we're working on the AI/worldengine in getting a good design for it. Starchat IRC network #galileo
08:41:09 <shapr> where's starchat?
08:41:36 <shapr> aha
11:00:53 <Janni> hi
11:01:05 <Janni> hi
11:22:45 <tez> hi
11:58:51 * d33p is back (gone 07:28:32)
16:01:43 <Janni> Anybody here using FreeBSD? I just wrote a port for HOpenGL. I'd be happy if you'd test the port, before I can submit it. You can download it from ftp://rochel.dyndns.org/pub/hs-HOpenGL.tar.gz . Untar it into /usr/ports/graphics and cd to hs-HOpenGL and `make install`. it will be there in a minute (when i'm ready with testing). i'll tell you then. (i'm already telling you now, because i don't have much time now and there is time for you to notice
16:01:52 <Janni> this message.
16:03:25 <kunphuzil> not i :/
17:07:33 <creature> Anyone around for a quick Q? 
17:10:11 <Janni> yea
17:10:47 <Janni> though i shouldn't (getting too late)
17:11:21 <creature> Heh, same here. 
17:11:23 <creature> Anyway:
17:11:54 <creature> I have an "image" format that consists of a list of tuples, of the form (Int, Bool) where Int is the number of characters and Bool is True if the character is # and False if it is .
17:12:16 <creature> So the line ...##. would be represented as [(3, False), (2, True), (1, False)].
17:12:31 <Janni> ok
17:12:43 <creature> Technically, that's the definition of a Line. A NewPic is a [Line] .
17:13:07 <creature> I have to write a function superimpose to superimpose 2 NewPics, and am kind-of lost as to where to start.
17:13:15 <creature> I'm after hints not solutions, as always.
17:13:44 <Janni> hmm. what does superimpose mean? does # always "win"?
17:13:51 <whee> define superimpose
17:14:06 <creature> Yep, # always wins. 
17:14:21 <Janni> creature: and if the images are not equal sized?
17:14:21 <creature> . and . = . | . and # = # | # and # = #
17:14:31 <whee> that should be pretty easy to do
17:14:34 <creature> Erm, I think I'm allowed to presume they're equally sized.
17:14:41 * creature hunts question sheet.
17:14:56 <whee> just write a function to combine two Lines, then map that over the two lists
17:15:45 <creature> The question sheet doesn't specify, but I'm meant to be reimplementing a function that does presume they're equal, so I think I'm allowed to as well.
17:16:44 <creature> Yeah, I'd got that far whee, but I can't really see how to do it for 2 lines. 
17:16:59 <whee> well, it's just another map
17:17:03 <creature> I was tempted to try and write a function to put breaks in each line according to where the tuples go.
17:17:26 <whee> write a function that given two tuples will combine them and return a new tuple
17:18:05 <creature> Yeah, but we can't presume the tuples are even.
17:18:13 <whee> eh?
17:18:30 <whee> oh, I see what you mean
17:18:32 <creature> Say we were to try and superimpose "..." with ".#."
17:18:51 <whee> it may be easier to use replicate and expand the lines out so that they're all tuples representing 1 character
17:18:53 <creature> I suppose I could always write something to break it down into units of 1, and then consider each one in term.
17:19:17 <whee> I think it was replicate, might not be :\
17:19:19 <Janni> creature: yeah, then you wouldn't need the annoying "coordinates" either
17:19:42 <Janni> if you created just two lists of .|#
17:19:56 <whee> the easy way is to expand each line into a list of booleans
17:20:14 <Janni> yeah, but i don't know if that would be kind of... lame :)
17:20:25 <whee> combining them is then easy, and the rest is just compressing it back into the original format
17:20:52 <creature> I have to do that as a challenge question.
17:20:54 <whee> Janni: it'd result in clean code, though
17:21:02 <whee> nothing crazy going on
17:21:05 <creature> Although it's not marked, so I may just leave it in lists of (1,_).
17:21:26 <whee> creature: do what as a challenge question>?
17:22:08 <creature> Write a function "tidy" that takes a messy list and neatens it. 
17:22:12 <creature> Say I gave it this: 
17:22:16 <whee> ah, that's easy :)
17:22:33 <creature> [(4,True),(3,False),(0,True),(2,False),(1,False),(7,True)]
17:22:36 <creature> It would return:
17:22:49 <creature> [(4,True),(6,False),(7,True)]
17:23:08 <whee> think of it recursively and it becomes quite simple
17:23:23 <whee> grab the next two tuples, see if they can be combined or one eliminated (if count is 0 perhaps)
17:23:56 <whee> it might even be possible to do that in a one line mapAccumL
17:24:14 <kunphuzil> I don't see why [(4,True),(6,False),(7,True)] is returned..
17:24:23 <creature> Yeah, I reckon I can do that. 
17:24:39 <creature> kunphuzil - it removes all 0 units, and merges duplicate entries next to each other. 
17:24:58 <creature> Say [(2,False),(3,False)] becomes [(5,False)]
17:25:36 <Janni> kunphuzil: i don't know, if you read what he wrote before, but the Ints are not indizes but counts
17:25:45 <Janni> s/indizes/indices
17:26:04 <creature> Janni - it removes all entries of the form (0, _) and merges duplicate contiguous tuples.
17:26:20 <whee> I don't think you'll have a problem writing that
17:26:30 <Janni> creature: clear
17:26:37 <creature> In the example above, it removes the (0,True) and merges the (3,False),(2,False), and the (1,False).
17:26:54 <creature> Anyway, that's breakTuples written.
17:26:56 <Janni> yea. all clear. i explained to kunphuzil...
17:26:59 <kunphuzil> oh, i see
17:27:06 <kunphuzil> ok
17:27:36 <kunphuzil> i have enough "skills" i bet to write a program to do that
17:27:55 <kunphuzil> too much school things, haven't really had time to learn haskell :/
17:28:06 <kunphuzil> in fact, doing homework right now
17:32:47 <creature> Ow@finger. 
17:32:53 <creature> I think I've got a dose of RSI coming. :/
17:35:50 <creature> How can I do 2 things at once in a list comprehension? Like this: 
17:35:53 <Janni> strike! my HOpenGL port works. looking for testers now. but tomorrow should be early enough. gonna sleep now. night all.
17:36:29 <creature> superimposeLine a b = [superimposeTuple c d | breakTuples c <-a, breakTuples d <- b]
17:36:35 <creature> Night Janni, thanks for the help.
17:37:56 <whee> there should be a version of map that takes arguments from two lists
17:38:31 <creature> What is map, anyway? 
17:38:39 <creature> I've been using it recently, but don't really "get" it. 
17:38:50 <whee> but you could try [ x | x <- superimposeTuple c d ] where c = breakTuples a ... etc etc
17:38:50 <creature> Although it seems very useful.
17:39:59 <whee> map is (a -> b) -> [a] -> [b] (I believe), so it applies the function to every element in the list and returns a new list of the results
17:41:01 <whee> I was thinking there'd be a version that was (a -> b -> c) -> [a] -> [b] -> [c], but now that I think about it, that's usually done with zip
17:41:48 <whee> I don't think a list comprehension will work that well in this case
17:42:02 <creature> Seemed like a logical thing to do, TBH.
17:42:04 <whee> you need to keep the last tuple around until nothing else collapses into it
17:42:05 <creature> Any other hints? 
17:42:38 <creature> Never mind, I think I can see a solution. 
17:42:41 <whee> well, mapAccumL does look like the easy way to taclke this
17:42:41 <whee> tackle, heh
17:42:56 <creature> We haven't used mapAccumL so I'd rather not venture there yet.
17:44:38 <whee> I'd go after it the obvious way
17:44:50 <whee> using your superimposeTuple function, call that on every two elements of the list of tuples
17:45:28 <whee> just a function that takes the Line and recursively builds a new Line
17:45:52 <creature> Would it be perverse to join the 2 lists, one in reverse of the other, then take the head and last element of each and work towards the middle? :)
17:46:26 <whee> that would require duplication of the list
17:46:40 <whee> one of the list in one direction, the other being the reverse
17:46:56 <creature> Yeah. I just liked the idea of it.
17:46:59 <creature> Seemed somewhat pretty to me.
17:47:08 <whee> it'd be really inefficient
17:50:44 <creature> Ooh, may have done a superimposeLine...
17:53:30 <whee> if I hadn't broken ghc I'd write something you could compare with :)
17:56:48 <creature> Heh. 
17:56:51 <creature> Ack, it's broken. :<
17:57:31 <whee> what do your functions look like?
17:58:07 <creature> They're fairly manky. 
17:58:17 <creature> Hold on, let me have a look.
17:59:00 <creature> Program error: {superimposeLine [(Num_fromInt instNum_v33 2,Bool_True)] []}
17:59:03 <creature> What's that mean?
17:59:29 <whee> hrmf, odd compiler that is
17:59:33 <whee> maybe a pattern match failed?
17:59:37 <creature> Ah, I see where I've ballsed up.
17:59:46 <creature> I've ignored those nice breakTuple functions that make everything work nicely.
18:00:19 <creature> Argh! 
18:00:21 <creature> Brain melting! 
18:00:59 <creature> I can't see where to stick in my breakTuple function.
18:01:05 <creature> Want to see what I've got so far? 
18:01:10 <whee> sure
18:01:24 <creature> In here, on #flood? 
18:01:27 <creature> s/on/or/g
18:01:38 <creature> It's not too long really.
18:01:41 <whee> how long is it?
18:01:50 <whee> noone else seems to be here, so I guess it doesn't matter
18:01:58 <creature> 14 lines in total.
18:02:00 <creature> breakTuple :: (Int, Bool) -> [(Int, Bool)]
18:02:00 <creature> breakTuple (a,b)
18:02:00 <creature>         | (a,b) == (1, b)       = [(a,b)]
18:02:00 <creature>         | otherwise             = (1, b):breakTuple ((a-1),b)
18:02:10 <creature> superimposeTuple :: (Int, Bool) -> (Int, Bool) -> (Int,Bool)
18:02:10 <creature> superimposeTuple (a,b) (c,d)
18:02:10 <creature>         | b || d                = (a,True)
18:02:10 <creature>         | otherwise             = (a,False)
18:02:19 <creature> superimposeLine :: Line -> Line -> Line
18:02:19 <creature> superimposeLine [(a,b)] [(c,d)] = [superimposeTuple (a,b) (c,d)]
18:02:19 <creature> superimposeLine ((a,b):xs) ((c,d):ys) = (superimposeTuple (a,b) (c,d)):superimposeLine xs ys
18:02:27 <creature> superimpose :: NewPic -> NewPic -> NewPic
18:02:27 <creature> superimpose [a] [b] = [superimposeLine a b]
18:02:27 <creature> superimpose (x:xs) (y:ys) = (superimposeLine x y):superimpose xs ys
18:03:00 <whee> breakTuple could be written better using matching
18:03:25 <whee> also, I think it'd be easier to use replicate in that case
18:04:02 <creature> Right now, I'd like to get it working and then work on getting it pretty. 
18:04:10 <creature> Besides, it's 2AM now and I have a 9O'clock lecture. :/
18:04:39 <whee> is it not compiling?
18:04:46 <creature> It's not working. 
18:04:53 <whee> I think superimposeLine may be bad as superimposeTuple really returns a list
18:04:55 <creature> And it's not working because my superimpose functions aren't using breaktuple at all.
18:05:00 <whee> so you end up with [[(a, b)]] as the final type
18:05:45 <whee> you'd want to use breaktuple on the lists
18:06:37 <creature> Yeah, but I don't see where to insert such things. 
18:06:56 <creature> Do I need another function? 
18:07:06 <whee> well, I would do it in superimposeLine
18:07:22 <creature> So would I, initially, but I can't see how. :( Any hints? 
18:07:36 <creature> Could I maybe use a where clause? 
18:07:40 <whee> I'm trying to remember haskell syntax, heh
18:08:00 <creature> I think I'd need to use a where clause, because of the way my pattern matching is written.
18:08:53 <whee> okay, I'm going to do a one liner which may or may not work because I can't test it :)
18:09:36 <creature> OK...
18:11:58 <whee> superimposeLine l r = map (uncurry superimposeTuple) $ zip (flatten breakTuple l) (flatten breakTuple r)
18:12:31 <whee> errr, no
18:12:49 <whee> superimposeLine l r = map (uncurry superimposeTuple) $ zip (flatten . map breakTuple l) (flatten . map breakTuple r)
18:12:49 <creature> undefined variable flatten.
18:13:06 <whee> try List.flatten?
18:13:12 <whee> I don't know :\
18:13:34 <whee> I don't even know if that function exists in haskell, heh
18:13:51 <creature> Doesn't appear to.
18:14:10 <whee> it should, maybe it's called something else
18:14:58 <whee> it might be concat
18:15:20 <whee> yes, it is
18:15:35 <creature> *** Expression     : concat breakTuple r
18:15:35 <creature> *** Term           : concat
18:15:35 <creature> *** Type           : [[d]] -> [d]
18:15:35 <creature> *** Does not match : a -> b -> c
18:15:51 <whee> use the second version I pasted
18:16:03 <creature> Ah, OK.
18:16:32 <whee> which also might not compile, in which case you can replace both '.''s with '$'
18:19:50 <creature> Which does run, and possibly correctly.
18:19:55 <whee> hah
18:20:06 <creature> But it doesn't seem to.
18:20:18 <creature> More excessive cut & paste: 
18:20:20 <creature> Assessment13> printPicture(newPicToPic (flipV newPic1))
18:20:20 <creature> ....##
18:20:20 <creature> ....##
18:20:20 <creature> ######
18:20:25 <creature> Assessment13> printPicture(newPicToPic newPic1)
18:20:26 <creature> ##....
18:20:26 <creature> ##....
18:20:26 <creature> ######
18:20:33 <creature> Assessment13> printPicture(newPicToPic(superimpose newPic1 (flipV newPic1)))
18:20:33 <creature> ......
18:20:33 <creature> ......
18:20:33 <creature> ######
18:21:07 <whee> perhaps a bug in superimposeTuple
18:21:32 <whee> or not, that looks correct
18:22:02 <whee> test each function on some sample data to make sure they behave correctly
18:23:43 <creature> superimposeLine seems to work Ok.
18:23:48 <creature> Which suggests the bug is in superimpose.
18:24:22 <whee> do both breakTuple and superimposeTuple work?
18:24:37 <creature> Yes.
18:24:59 <creature> example3 :: Line
18:24:59 <creature> -- ##....
18:25:05 <creature> example4 ::Line
18:25:05 <creature> -- ....##
18:25:14 <creature> Assessment13> superimposeLine example3 example4
18:25:14 <creature> [(1,True),(1,True),(1,False),(1,False),(1,True),(1,True)]
18:25:27 <whee> what's NewPic, [Line]?
18:25:32 <creature> Yep.
18:26:19 <whee> superimpose is much like superimposeLine
18:26:24 <whee> except instead of two lists of tuples, it's two lists of Lines
18:26:31 <creature> I don't understand superimposeLine as it is. :/
18:26:40 <whee> heh
18:26:46 <whee> it's simple :)
18:27:03 <creature> superimpose :: NewPic -> NewPic -> NewPic
18:27:03 <creature> superimpose [a] [b] = [superimposeLine a b]
18:27:03 <creature> superimpose (x:xs) (y:ys) = (superimposeLine x y):superimpose xs ys
18:27:06 <creature> So what's wrong with that? 
18:27:13 <creature> It's my base case, innit? 
18:27:36 <whee> I think you mean superimpose (a:[]) (b:[]) = superimposeLine a b
18:27:40 <whee> instead of the first case
18:28:20 <creature> You'd think:
18:28:32 <whee> wait, no
18:28:35 <creature> superimpose :: NewPic -> NewPic -> NewPic
18:28:35 <creature> superimpose (a:[]) (b:[]) = superimposeLine a b
18:28:35 <creature> superimpose (x:xs) (y:ys) = (superimposeLine x y):superimpose xs ys
18:28:42 <creature> *** Type           : NewPic -> NewPic -> [(Int,Bool)]
18:28:42 <creature> *** Does not match : NewPic -> NewPic -> NewPic
18:29:09 <whee> heh ignore that one
18:29:17 <whee> try superimpose [] [] = [[]]
18:30:08 <creature> Doesn't like that.
18:30:28 <creature> It runs, but I don't get the correct output, and I get a program error.
18:30:54 <whee> errf what about superimpose [[]] [[]] = [[[]]] :)
18:31:21 <whee> having problems with that data structure as simple as it is :)
18:31:26 <creature> Doesn't match the type.
18:31:30 <whee> jhhha
18:31:58 <creature> Let's take a break from this for now. 
18:32:04 <creature> Can you explain superimposeLine to me, please? 
18:32:05 <whee> superimpose (a:[]) (b:[]) = [superimposeLine a b]
18:32:07 <whee> :)
18:32:22 <whee> okay
18:32:28 <whee> do you understand map?
18:32:46 <creature> Yes.
18:32:56 <creature> I don't understand $ or uncurry.
18:32:58 <whee> hooray
18:33:16 <whee> $ is simple, it's basically shorthand for parens
18:33:26 <creature> parens? 
18:33:29 <whee> map blah $ blah blah blah is the same as map blah (blah blah blah)
18:33:49 <creature> I see.
18:34:23 <whee> now for zip/uncurry, zip :: [a] -> [b] -> [(a, b)], so it takes the two Lines and combines their elements into a list of tuples
18:35:13 <creature> Yep, OK.
18:36:17 <whee> now you want to map superimposeTuple on each tuple (of tuples) that zip has returned, but superimposeTuple is curried 
18:36:28 <creature> curried? 
18:36:38 <creature> I know this refers to some guy named Curry, but I can't remember anything else.
18:36:43 <whee> that is you apply superimposeTuple like "superimposeTuple a b" and not "superimposeTuple (a, b)"
18:36:57 <creature> I see.
18:37:01 <whee> when you curry a function, you can do partial evaluation
18:37:22 <whee> so you could write "superimposeTuple a", and that would return a function :: (Int, Bool) -> (Int, Bool)
18:37:35 <creature> So we've converted 2 lists of tuples into 1 list of tuples of tuples?
18:37:43 <whee> yes
18:38:01 <whee> now uncurry :: (a -> b -> c) -> ((a, b) -> c)
18:38:12 <whee> it simply takes those two curried arguments and packs them inside a tuple
18:38:52 <creature> Hang on, according to those bracked uncurry returns a function? 
18:38:56 <whee> so now this 'new' superimposeTuple takes a tuple of tuples, which we can conviently map onto this list that zip has returned
18:39:02 <whee> yes, it returns a function
18:39:06 <creature> OK, cool.
18:40:08 <whee> there's probably better ways to write that, but I'm a bit rusty :)
18:42:41 <creature> || isn't an XOR function, is it? 
18:43:01 <whee> no, I think xor is .|.
18:43:22 <creature> I'm starting to think my superimposeTuple is suspect.
18:43:48 <creature> Assessment13> printPicture(newPicToPic(superimpose newPic1 (flipH newPic1)))
18:43:48 <creature> ##....
18:43:48 <creature> ##....
18:43:48 <creature> ##....
18:44:29 <whee> that's odd, heh
18:44:32 <creature> Yeah.
18:44:44 <creature> I tried superimpose l r = map (uncurry superimposeLine) (zip l r)
18:44:53 <whee> it's missing the cases where one is . and the other is #, but getting # and # fine :\
18:45:05 <creature> Yeah, but it shouldn't be: 
18:45:12 <creature> superimposeTuple (a,b) (c,d)
18:45:12 <creature>         | b || d                = (a, True)
18:45:12 <creature>         | otherwise             = (a,False)
18:45:22 <creature> if b or d is true, then it's true. 
18:45:24 <creature> Otherwise it's false. 
18:45:40 <creature> And a and c don't matter, as it's only getting functions where a = 1.
18:46:35 <whee> try writing it out with explicit matching to see if it's really superimposeTuple
18:46:35 <creature> And it works fine on my test data.
18:46:46 <whee> so it's probably not that
18:48:58 <creature> Although, it seems it is:
18:49:07 <creature> Assessment13> printPicture(newPicToPic(superimpose newPic1 (invertColour newPic1)))
18:49:07 <creature> ......
18:49:07 <creature> ......
18:49:07 <creature> ......
18:49:17 <whee> heh
18:49:44 <whee> try writing it like "superimposeTuple (_, True) (_, _) = (1, True)" and the other two cases
18:51:55 <creature> superimposeTuple :: (Int, Bool) -> (Int, Bool) -> (Int,Bool)
18:51:55 <creature> superimposeTuple (_,True) (_,_)     = (1,True)
18:51:55 <creature> superimposeTuple (_,_) (_,True)     = (1,True)
18:51:55 <creature> superimposeTuple (_,False)(_,False) = (1,False)
18:52:13 <creature> ARGH!!!
18:52:21 <creature> It's in my whatChar function! 
18:52:38 <whee> haha
18:52:53 <creature> No, no it isn't.
18:53:18 <creature> I can't do this.
18:54:37 <creature> I'm going to bed, I'll look at it in the morning. 
18:55:05 <whee> is this assignment online somewhere?
18:55:14 <creature> Only on the intranet.
18:55:17 <creature> I can email you a copy if you like.
18:55:33 <whee> I'm extremely bored and feel like attempting it in ocaml, heh
18:57:54 <creature> whee - on its way.
18:57:56 <creature> ocaml?
18:58:11 <whee> Objective Caml, another functional language
18:58:24 <whee> not lazy or purely functional like haskell, though
18:58:26 <creature> Heh.
18:58:37 <creature> thought you might have meant occam, which apparently I get to play with next year.
18:59:09 <whee> occam sounds familiar, is that one of those parallel languages?
18:59:28 <creature> Yeah, I think so.
18:59:37 <creature> The 2nd years had to solve the Dining Philosophers problem in it. 
18:59:43 <creature> Avoid deadlocks, that kind of thing.
19:00:08 <whee> I recall seeing occam when I was looking for a new language to learn, ended up learning erlang out of that search
19:01:51 <creature> Not sure if you can do anything productive in it.
19:01:59 <whee> and I don't think that problem is an issue in erlang with it's message-based nature
19:02:53 <lament> productive? erlang? not sure?
19:02:57 <lament> why not?
19:03:03 <lament> or do you mean occam?
19:03:05 <creature> lament - nah, productive re: occam.
19:03:08 <whee> I think he meant occam
19:03:11 <creature> I've never written in it, so I really wouldn't know. 
19:03:13 <lament> oh.
19:03:43 <creature> whee - anyway, as I say, you've got mail.
19:03:51 <whee> indeed I do
19:04:09 <whee> what's a Picture in relation to a NewPic?
19:04:11 <whee> Picture being the actual characters?
19:04:25 <creature> See the attached Pictures.hs file.
19:04:52 <whee> ahh, yes
19:05:17 <whee> hah
19:05:31 <whee> I think the zipWith function does what I was doing with a zip and uncurry
19:05:50 <creature> zipWith is a bit like being called Sandwich.
19:06:56 <creature> I remember I decided this the last time I asked about on here. 
19:06:59 <creature> but can't remember much about it. :)
19:07:12 <whee> heh
19:07:36 <whee> yes, it is
19:07:40 <whee> :\
19:07:55 <whee> that's what I get for being out of the loop
19:08:14 <creature> So you're saying I can write superimposeLine simpler with zipWith? 
19:08:22 <whee> yes
19:08:29 <creature> don't tell me how, that'll be a nice exercise to kind-of compensate for you handing me a solution on a plate to that Q.
19:08:51 <whee> the map/uncurry/zip pattern is packaged up into zipWith
19:11:08 <creature> Can you see any obvious errors in my superimpose? 
19:12:50 <whee> how about you rewrite that using zipWith as well and see :)
19:15:00 <creature> Cool, I'll try that. 
19:15:03 <creature> Anyway, I'm going to go to bed now. 
19:15:07 <creature> Thanks for all your help.
19:15:16 <whee> np, good night
22:10:31 * d33p is away: lunch
