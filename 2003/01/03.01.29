01:16:24 <Marvin--> bnfc is sick
01:19:26 <mgoetze> Marvin--: parse error: unidentified token ("bnfc")
01:19:39 <Marvin--> http://www.cs.chalmers.se/~markus/BNFC/
01:21:24 <mgoetze> this markus must have too much time on his hands
01:21:36 <mgoetze> you should tell him to do useful things instead, like write games in haskell ;)
01:21:53 <Marvin--> I think it's mainly Aarne who's written it
01:22:11 <Marvin--> and the beauty of working at Chalmers is that you can get paid to do things like this ;)
01:24:18 <mgoetze> hm... maybe i should put in a semester there... ;)
01:24:42 <mgoetze> Marvin--: is english and german enough to get around chalmers?
01:25:01 <Marvin--> A lot of courses are taught in English
01:25:06 <Marvin--> the majority of them I think
01:25:18 <Marvin--> there's an international master's program for example
01:25:55 <Marvin--> and even if there are courses with only Swedish student, sometimes non-Swedish speaking lecturers teach them and they end up being in English anyway
01:26:17 <mgoetze> can you point me to a webpage with a list of courses?
01:27:11 <Marvin--> http://www.cs.chalmers.se/Cs/Education/Courses/index-en.html
01:27:22 <Marvin--> http://www.cs.chalmers.se/Cs/Education/dcs/ <- and this is the master's program
01:29:23 <mgoetze> hm, they're quarterly? that'll certainly make getting anything accepted by my examination department tough
01:29:38 <Marvin--> ouch, how so?
01:30:06 <Marvin--> our semesters are 20 credits (corresponding to 20 weeks) and most courses are 5 credits, and we usually do two at a time
01:32:12 <mgoetze> we don't have a credits system here... i'd have to convince them that something i do over there is equivalent to a lecture i'd normally take here
01:37:35 <mgoetze> well, chalmers does have some neat courses, and of course that they use haskell is really cool
01:37:47 * mgoetze is keeping it in mind as an alternative to zuerich and berkeley ;)
01:38:59 <Marvin--> heh
01:39:47 <mgoetze> and swedish *should* be learnable. i mean, i can almost read it...
01:40:51 * mgoetze goes back to writing bindkey declarations for .zshrc
01:42:43 <Marvin--> you don't need Swedish to study here, really :)
01:43:42 <mgoetze> yeah, you do seem to offer a full program in english, unlike, say, helsinki univ. of technology
01:46:54 <det> agh, is it true that Ghc can only produce a single binary for any program and not dynamic libraries (such as a scene graph library and 2 seperate games) ?
05:39:47 <hennker> morning
05:39:56 <Marvin--> morning
06:13:36 * shapr yawns
06:13:46 <shapr> goood morning
06:16:54 <argv[0]> =), hi shapr 
06:17:10 <argv[0]> where are u, shapr?
06:18:11 <Smerdyakov> Outside your window
06:18:14 <Smerdyakov> Doing something indecent
06:18:15 <Smerdyakov> :-O
06:20:45 <shapr> um
06:20:53 <shapr> argv[0]: I'm in sweden, where are you?
06:26:23 <shapr> hey SyntaxPolice, have you had time to mess with the upload form?
06:27:29 <argv[0]> shapr: Portuguese
06:28:49 <shapr> ah, I'm from the US, even though I live in Sweden.
06:28:57 <shapr> I've never been to .pt, is it nice?
06:32:32 * Marvin-- mumbles at acer's homepage
06:34:58 <SyntaxPolice> shapr: yeah. I did mess with it a bit yesterday.
06:35:09 <SyntaxPolice> wait... upload form?
06:35:58 <shapr> SyntaxPolice: er, input 
06:35:59 <shapr> doh
06:36:02 <shapr> I'm not awake yet :-)
06:36:33 <SyntaxPolice> hehe. Yeah, I sorta did most of it except categories
06:37:01 <SyntaxPolice> the old version just read the input file in order and dumped it out to an html file in order. the new version will have to read it into a map and dump it out by category.
06:37:47 * shapr drinks more coffee
06:44:24 <shapr> SyntaxPolice: is it ready for input?
06:45:50 <SyntaxPolice> shapr: not sure what you mean by 'ready for input' the form is done... I can send you the html or something if youw ant.  I'm tring to think of a way to split this up... I could just turn it over to you while I work on getting the new version of hugs into debian :)
06:45:56 <SyntaxPolice> but its is my code, so I could probably do it fater
06:45:57 <SyntaxPolice> faster
06:46:05 <SyntaxPolice> on the other hand, I don't really know html or cgi very well.
06:46:19 <shapr> whatever works for you
06:46:45 <SyntaxPolice> are you decent at html design? I do want something that will look nice?
06:46:56 <shapr> hrm, probably not
06:47:11 <shapr> in my work I usually get static html from a designer
06:47:18 <shapr> and then clip it up into dynamically generated pieces
06:47:21 <SyntaxPolice> I'm really pretty bad... 
06:47:33 <shapr> for the moment I just want something that works
06:47:47 <SyntaxPolice> hm.  do you want me to send it over to you and you can look at it and see what you think?
06:47:51 <shapr> sure, send it
06:47:53 <SyntaxPolice> OK...
06:50:52 <SyntaxPolice> ok http://www.syntaxpolice.org/~ijones/haskellLibTracker.tgz
06:51:23 <SyntaxPolice> the readme file will be useful but not completely accurate. 
06:51:38 <shapr> ok, thanks :-)
06:51:46 <SyntaxPolice> I broke things up into two directories (are you using apache?) /usr/lib/cgi-bin and /var/www/ where the static pages will go.
06:52:18 <shapr> I can use apache, apache2, whatever
06:52:24 <shapr> I have a dynamic public address here
06:52:29 <SyntaxPolice> feel free to change whatever... you may find that some of hte stuff will be cleaner in a finiteMap. I didn't know aobut that module when I wrote this.
06:52:53 <shapr> thanks for finding time to work on this :-)
06:52:55 <SyntaxPolice> OK... yeah, I was having trouble getting it onto a server that I could let you look at
06:53:15 <SyntaxPolice> shapr: I'd be very pleased if it was a help :)
06:53:34 <shapr> I hope it can be a help to the whole Haskell community
06:53:48 <SyntaxPolice> yes indeed.
06:54:07 <SyntaxPolice> by the way, I didn't put any license on the docs or anything, I'm considering it to be a BSD type license.
06:54:10 <shapr> I don't mind tracking down all the libs I can find and entering their specifics, and keeping local copies on my DSL gateway.
06:54:14 <shapr> ok
08:32:42 * SyntaxPolice builds both ghc and hugs for different reasons at the same time on two computers!
08:34:09 <shapr> SyntaxPolice: scary :-)
08:34:35 <hdaume> 'morning
08:34:56 <shapr> hi hal
08:39:28 <liiwi> http://www.datapower.com/products/xa35.html
08:39:28 <shapr> hardware xml/xslt processing?????
08:40:31 <hdaume> wow
08:41:25 <liiwi> colourful boxes have the future
08:43:40 <shapr> scary
08:49:46 <Marvin--> interesting... it says it's "copying files to the hard drive"...but I don't have any CD inserted
08:50:55 <shapr> Marvin--: cool!
08:50:58 <shapr> hi eivuokko 
08:51:13 <eivuokko> hi shapr, others :)
08:51:16 <shapr> hyv‰‰ huomenta
08:51:29 <shapr> mit‰ kuuluu?
08:53:40 <eivuokko> Bra, tack.  Hmmm, that's about my swedish skills ;)
08:53:44 <shapr> heh
08:53:48 <shapr> mine aren't much better.
08:54:22 <eivuokko> Oh, I thought you were from Sweden.
08:54:32 <shapr> nah, Alabama
08:54:42 <eivuokko> Whoa!
08:54:56 <shapr> :-)
08:55:30 <eivuokko> Who dragged you here, into cold? ;)
08:55:38 <shapr> this woman I live with....
08:56:10 <eivuokko> :)
08:57:53 <shapr> hdaume: FastIO is for reading files that are made up of c structs? like image files or other binary data?
08:58:43 <hdaume> shapr: not of c structs...just either of binary data (ints, floats, chars) or ascii data that's too slow to marshall through a haskell string (i.e., reading a file in haskell that only contains ints is very slow using normal IO)
08:59:23 <shapr> can you give me an example?
09:00:27 <shapr> I hope I'm not being dense :-)
09:00:39 <hdaume> so the file looks liek "1 2 3 4 5 6 ... 38492 388432 734284 3728".  is like 5mb.  if you do 'l <- (map read . words) `liftM` readfile "file"', this is *very* slow.  so instead you use FastIO and use fscanfInt to read each int, which reads it directly into an int, instead of through a haskell string and then "read"
09:01:05 <Heffalump> so basically the point is that read is slow and sscanf is fast?
09:01:38 <hdaume> it's not really that read is slow.  it's that when you do "readFile", it first converts the char* it gets form the file to a String, and this conversion is very slow ... 
09:02:52 <Heffalump> ah
09:03:02 <Heffalump> because a linked list is fundamentally inefficient?
09:03:43 <hdaume> i suppose :).  i'm not really sure why.  also because cchars are 8bits and haskell chars are 16 (i think)...
09:03:57 <eivuokko> Isn't String is not optimised by compilers as a special case?
09:04:09 <hdaume> eivuokko: i don't think so
09:04:36 <Heffalump> you have to be careful, given the possibility for infinite strings or ones with undefined tails
09:05:35 <SyntaxPolice> shapr: have you taken a look at that CGI?
09:06:07 <shapr> SyntaxPolice: nah, I've been distracted
09:06:31 <shapr> I did register a dyndns.org address for my dsl box...
09:10:08 <SyntaxPolice> cool :)
09:39:55 <shapr> hey jemfinch, haven't seen you around here much
09:51:20 <shapr> hey, do all of the libraries involved need to be compiled as -prof in ghc, when you're profiling anything?
09:51:29 <shapr> I vaguely recall that is so...
09:51:50 <hdaume> yes
09:51:57 <shapr> aha
09:52:14 <shapr> that makes a big dent in the 'binary debs' idea
09:52:29 <hdaume> i hadn't been following the thread...why is it bad?
09:52:59 <shapr> we've started a "building debian packages for haskell libraries" thread on libraries@haskell.org
09:53:09 <hdaume> right.  i've seen it, but ignored it : )
09:53:32 <shapr> Marvin-- mentioned that it can take a long time to compile a library
09:53:37 <shapr> and that the point of debian was to have binaries
09:54:27 <Heffalump> isn't it usual to build profiling and non-profiling versions?
09:54:38 <hdaume> yeah, but you can just have the two coexist.  compile with profiled ones with -osuf p_o -hisuf p_hi
09:54:45 <Heffalump> yes
09:55:06 <shapr> question is, should each haskell library have a version for nhc, hugs, ghc4, ghc5, ghc4-prof, ghc5-prof
09:55:18 <Heffalump> I think it has to.
09:55:20 <shapr> I would prefer to see a source package that got compiled how you need it.
09:55:22 <Heffalump> which is a bit of a mess.
09:55:28 <Heffalump> That's not how Debian works, though.
09:55:31 <shapr> yah, I wonder if there's a better way.
09:55:48 * Heffalump tries to recall how apt works.
09:56:06 <Heffalump> If you have foo v1 and bar v1, with bar v1 depending on foo v1
09:56:22 <Heffalump> and foo v2 appears but bar v2 doesn't, what happens when you do an apt-get upgrade ?
09:56:45 <Igloo> foo will be held back
09:56:54 <Heffalump> right.
09:56:54 <shapr> yah
09:57:01 <SyntaxPolice> c2hs is in this state now if I'm not mistaken.
09:57:05 <Heffalump> so I guess apart from the mess of names, that's the way to go
09:57:07 <shapr> "don't install any extra packages during an upgrade"
09:57:12 <SyntaxPolice> well actually, no not quite.
09:57:16 <shapr> upgrade != install
09:57:25 <Heffalump> shapr: the issue here is whether packages get removed
09:57:26 <shapr> SyntaxPolice: tell me more :-)
09:57:36 <shapr> um, I don't think so...
09:58:04 <SyntaxPolice> c2hs depends on exactly a particular version of ghc which isnt' there anymore and c2hs hasnt' been recompiled for the new version.
09:58:14 <SyntaxPolice> but thats slightly different (and I mentioned it in my email), sorry 
09:58:40 <shapr> but you're right, every minor upgrade of ghc will require *all* the libs to be upgraded
09:58:55 <SyntaxPolice> and how can we coordinate maintainers to do that?
09:59:19 <SyntaxPolice> it would seem like if we were to go that way, one person would have to maintain all the haskell packages and make sure they all get recompiled & uploaded together.
10:01:08 <shapr> it does sound like that
10:01:39 <shapr> or a bunch of NMUs
10:01:44 <shapr> I guess I should join the Force
10:02:37 <SyntaxPolice> So in short, I still feel like recompiling on the users's machine ala elisp is the way to go.
10:03:21 <shapr> well, maybe one of the Simons will have a brilliant solution
10:04:25 <Janni> hi!
10:04:44 <shapr> hiya Janni 
10:05:13 <Heffalump> SyntaxPolice: making package upgrade take an inordinate amount of time is unacceptable, IMO
10:05:47 <Heffalump> and there's no specific need for it to be the same person, because all that will happen is that ghc or whatever will be held back until the libraries you have installed also get upgraded
10:06:00 <Heffalump> which strikes me as fine (as long as library maintainers in general are reasonably prompt)
10:06:10 <shapr> well
10:06:19 <shapr> how long does it really take to recompile the average library?
10:06:24 <shapr> I don't know...
10:06:35 <Heffalump> do some experiments and tell us? :-)
10:07:43 <SyntaxPolice> Heffalump: otoh in the case where you have packages that don't match the ghc version, the order you install things in will matter as to what is installable and what is not.
10:07:53 <shapr> Heffalump: what do we consider an average machine?
10:08:05 <SyntaxPolice> if you have a package that requires a lower ghc version, and that packages is currently installedd, then ghc will get held back
10:08:08 <Heffalump> shapr: PIII-700, say
10:08:13 <shapr> hrm
10:08:17 <shapr> I have an Athlon 800
10:08:24 <Heffalump> that'll do
10:08:36 <shapr> bea has a PIII-600
10:08:37 <Heffalump> SyntaxPolice: true
10:08:38 <SyntaxPolice> but if you already have the higher ghc version and try to install a library that depends on the lower version, then that library is not installable.
10:08:44 <shapr> though I dunno if she'll let me test with it... :-)
10:10:00 <Heffalump> I think the facts should be established (what is technically feasible and what isn't, how long recompiling will take, etc), and then debian-devel should be asked
10:10:55 <shapr> yah, I agree.
10:11:17 <shapr> which libraries shall I compile?
10:11:24 <shapr> what's a good way to test the time taken?
10:11:32 <Heffalump> something big, and "time"
10:13:01 <SyntaxPolice> well, if there is something in particular that takes tons of time, maybe binary-only installations could be offered too...
10:13:34 <dark> shapr: I was reading my scrollback :)  What's that FastIO you were talking about?  It looks like something uncc could benefit from when gobbling up ELF binaries.
10:13:57 <shapr> dark: written by hdaume...
10:14:09 <shapr> he posted an url to it on one of the mailing lists
10:14:14 <shapr> I think the main list
10:14:22 <dark> Ah, okay.  I haven't been reading the haskell lists lately.
10:15:04 <dark> Hmm, now that I think more about it, uncc might not benefit all that much.  It mainly needs to read bytes into [Word8], which is pretty easy to do via hGetBuf if I want to.
10:16:31 <dark> My main concern with going through String is not speed, but the risk of Unicode frobnification of the binaries :)
10:19:02 <SyntaxPolice> I agree that we should find out how long things take to build, I don't really like that idea either (and most people seem to disagree with me).  I just feel that keeping packages in sync with the compiler version will not work, considering the current state of the haskell related packages.
10:23:00 <shapr> SyntaxPolice: don't really like the idea of compiling source packages upon install?
10:23:03 <shapr> ya know..
10:23:13 <shapr> we might be able to do both
10:23:32 <SyntaxPolice> shapr: no, I don't like it in theory, but in practice it seems best to me.
10:23:49 <shapr> yah, I understand.
10:23:56 <shapr> Marvin--: are you awake?
10:24:00 <SyntaxPolice> yeah, I was thinking those packages that take a long time to build could have separate binary-only packages.
10:24:23 <shapr> much like the emacs base installs come with elc files I think...
10:24:29 <shapr> and you can separately download the source if you prefer
10:25:13 <shapr> now that I think of it, a new xemacs package doesn't come with the elisp sources
10:25:54 <shapr> would it be way too much trouble to setup the source packages with the ability to build themselves?
10:26:05 <shapr> I don't know...
10:26:40 <shapr> yah, big packages could come have separate already built debs
10:26:42 <shapr> I like that idea.
10:27:33 * shapr posts that idea to libraries@
10:27:34 <SyntaxPolice> at least it would cut down on the package explosion.
10:27:39 <shapr> yah,
10:27:40 <shapr> it would
10:27:44 <SyntaxPolice> hehe... be sure to credit me ;)
10:28:02 <shapr> dark: you want the url to hdaume's FastIO package?
10:28:06 <shapr> SyntaxPolice: will do
10:35:12 <SyntaxPolice> shapr: saw your mail, cool.  I'd suggest as a start definitely timing the packages that are already there, excluding the compilers... then the stuff you want, like hmake... 
10:35:37 <shapr> yah, good point.
10:37:47 <dark> shapr: No, I'll come across it when I read the lists again.  My current priority is to get uncc to do anything at all, I don't care if it does it slowly :)
10:40:04 <shapr> good point
10:51:11 <Binkley> 'lo
10:51:55 <shapr> hi Binkley 
10:52:11 <shapr> what's up?
10:54:27 <Binkley> not much
10:55:12 <shapr> any slash and burn agriculture in the world of type inferencing?
10:57:22 <Binkley> heh
10:57:31 <Binkley> no, the world of type inferencing seems to be creating more trees right now
10:58:31 <shapr> do you base your deforestation work on burstall & darlington?
10:58:33 <shapr> or what?
10:58:49 <Binkley> no, more on gill/launchbury/peyton jones (shortcut deforestation)
10:58:54 <Binkley> and olaf chitil's modifications to it
10:58:57 <shapr> oh
10:59:11 <shapr> don't know about them
10:59:15 <shapr> I'll add that to my reading list.
10:59:19 <Binkley> heh
10:59:27 <Binkley> shortcut deforestation is worth knowing about
10:59:38 <Binkley> as for whether chitil's work is worth knowing about, well, my work will decide that
11:01:22 <shapr> is there a short summary that describes your avenue of research?
11:01:36 <shapr> or would I need to undertand g/l/spj + chitil ?
11:02:19 <Binkley> hmm, not really
11:02:43 <Binkley> i have a draft of a paper up at http://www.cs.berkeley.edu/~krc/Writing/deforestation.ps
11:02:49 <Binkley> which i like to think is fairly understandable
11:02:59 <shapr> :)
11:03:29 * shapr downloads
11:17:37 <Smerdyakov> Binkley, there was a paper on this subject in IFCP 2002.
11:17:55 * Smerdyakov looks it up again
11:18:29 <Smerdyakov> By Josef Svenningsson
11:18:45 <Smerdyakov> I think that was the one presented horribly with hand-drawn overhead slides =)
11:20:38 <Binkley> yep
11:20:48 <Binkley> i thought that was the better of the two deforestation talks
11:20:57 <Binkley> but it's all still in theory, that's the problem with most work on deforestation
11:21:34 <Smerdyakov> I think your diagrams could stand to be redone in something nicer, like GraphViz =)
11:22:08 <Binkley> well, it's still a draft :-)
11:22:15 * Smerdyakov visits Binkley's home page.
11:22:23 <Smerdyakov> I believe I saw you there, generally sitting in front right.
11:23:07 <Binkley> heh
11:23:13 <Binkley> sounds about right
11:26:07 <Heffalump> Josef's talk was about some set of fusion rules, right?
11:26:17 <Binkley> yeah, fold/unfold
11:29:05 * shapr fights with hugs + apache
11:29:21 * shapr envisions a very large apache trying to crush him with a hug
11:30:04 <Binkley> heh
11:30:08 <shapr> lovely error messages
11:30:10 <shapr> runhugs: Error occurred
11:30:14 <shapr> that really helps.
11:30:51 <Smerdyakov> What are you trying to do?
11:31:08 <shapr> run SyntaxPolice's code :-)
11:31:21 <Smerdyakov> What does it have to do with Apache?
11:31:30 <shapr> it runs hugs under apache
11:31:36 <shapr> I'm positive this is user error
11:34:48 <Smerdyakov> Binkley, typo in page 5: missing {} around subscripts for v_cons and v_nil =)
11:36:06 <Binkley> good eye
11:52:02 <shapr> SyntaxPolice: awake?
11:54:29 <shapr> oh, I think I get it..
11:55:50 <Smerdyakov> What does this code use hugs to do in Apache?
11:57:28 <shapr> it's a very simple package registry
11:57:37 <Heffalump> does it use mod_haskell, or just exec hugs?
11:57:49 <shapr> just exec hugs
11:57:56 <shapr> is there a real mod_haskell?
11:58:07 <shapr> oh, we've discussed this before I think..
11:58:17 <shapr> mod_haskell calls hugs, doesn't let you run ghc programs, right?
11:58:32 <shapr> maybe I should port this to Marvin--'s HWS-WP
11:58:35 <Smerdyakov> Why does it exec hugs?
11:58:41 <Smerdyakov> Is hugs generating web pages?
11:58:44 <shapr> yup
11:59:02 <Smerdyakov> I prefer to write a small standalone web server and interface with Apache using mod_proxy. =)
11:59:11 <Heffalump> mod_haskell links with hugs properly
12:00:31 <hdaume> shapr: does it have to rerun hugs every time a page is requested, or does it keep hugs loaded?
12:00:58 <shapr> I think it reruns hugs
12:00:59 <Heffalump> mod_haskell keeps hugs loaded
12:01:07 <hdaume> rerunning hugs = bad news :)
12:01:08 <Heffalump> (for each Apache process)
12:01:15 <Smerdyakov> Is there a reason why it is superior to use mod_haskell versus standalone server and mod_proxy?
12:01:15 <shapr> yah well, this is a quick hack
12:01:30 <Heffalump> smerdyakov: better integration with Apache and all that Apache can do
12:01:42 <Heffalump> no need to reinvent the wheel etc etc
12:01:46 <shapr> if someone else here would like to write a better Haskell package registry in Haskell, I'd be thrilled.
12:02:07 <Smerdyakov> Heffalump, example of something you miss out on with my version?
12:02:47 <Heffalump> ability to filter the output of something mod_perl produced (admittedly you need Apache 2 to be able to do that kind of thing and I don't think mod_haskell works for it)
12:03:13 <hdaume> http://montev.isi.edu:8000/survey/ is done using hugs and (as you can see) is quite slow :)
12:03:53 <shapr> still not painfully slow
12:04:00 <Heffalump> I was using the mod_haskell sample code to serve up Haskell code syntax highlighted from mine, and it seemed quite fast
12:04:11 <Heffalump> but I think I broke the configuration somehow and disabled it cos I didn't have time to fix it
12:14:35 <dark> Binkley: That deforestation approach looks yummy.  I want it. :)
12:15:29 <Binkley> heh
12:15:30 <Heffalump> the type-based stuff?
12:15:34 <Binkley> well, i'm working on it
12:21:27 <Binkley> So here's a question: anyone know of a decent Haskell emacs mode? 
12:21:43 <Binkley> I'm using the one at http://www.haskell.org/haskell-mode/ but the indentation doesn't work right at all, or else I'm doing something wrong
12:22:14 <Heffalump> It never feels right for me either
12:22:29 <Heffalump> I just use the syntax highlighting (and even that gets confused when you comment/uncomment a block of code)
12:22:36 <Binkley> yeah
12:22:39 <SyntaxPolice> shapr: hi
12:22:43 <shapr> hi SyntaxPolice 
12:22:51 <Binkley> you have to hit M-x font-lock-fontify-buffer to bring it up to date
12:22:52 <Binkley> but it's a pain
12:23:08 <shapr> bind it to a key
12:23:12 <shapr> or put it on a timer :-)
12:23:18 <Binkley> heh
12:23:25 <Binkley> i do have it bound to a key, but it's still a pain
12:23:48 <shapr> SyntaxPolice: did the format of approval.txt change with the library stuff?
12:24:01 <SyntaxPolice> shapr: yes, most likely. you should blow those files away
12:24:10 <shapr> that might be it
12:24:20 <Heffalump> ah, ok
12:24:29 <SyntaxPolice> so the firs tpart works, generating a preview web page, but the second part, generating the static page, does not work.
12:24:32 <shapr> I agree that the indentation could be improve in haskell-mode
12:24:33 <Heffalump> I'm really incompetent at configuring emacs
12:24:37 <shapr> SyntaxPolice: right
12:24:39 <Heffalump> so I don't even know how to bind things to a key :-)
12:24:49 <shapr> would you like some emacs help?
12:25:09 <Binkley> in this case, add theline:
12:25:15 <Binkley> (global-set-key "\M-f" 'font-lock-fontify-buffer)
12:25:17 <Binkley> to your .emacs file
12:25:33 <Binkley> (global-set-key "\M-g" 'goto-line) is another handy one
12:25:51 <shapr> you don't use forward-word ?
12:26:23 <Binkley> nope
12:26:30 <Binkley> of course, you can bind it to whatever key you want...
12:27:06 <shapr> the standard emacs movement keybindings are also available in zsh and bash
12:27:10 <Heffalump> shapr: well, if you're offering in general to help me with emacs problems when I have them, yes :-) But right now I don't need any in particular, though I'll stick the above line in now
12:27:19 <shapr> ok
12:27:21 <Heffalump> I think M-g is already bound to goto-line
12:27:31 <Smerdyakov> Heffalump, only in xemacs
12:27:35 <shapr> yup, not in gnumacs
12:27:38 <Heffalump> ah, ok
12:27:43 * Heffalump uses xemacs exclusively
12:27:47 <shapr> me too
12:27:47 <Smerdyakov> As do I
12:27:52 <Smerdyakov> Much more rational bindings =)
12:27:58 <shapr> I use it for my irc client.
12:28:03 <SyntaxPolice> anyone here using haskell-mode in gnu emacs?
12:28:14 <shapr> <crickets>
12:28:16 <shapr> :-)
12:28:30 <SyntaxPolice> heh... I was using xemacs, but the subversion stuff works much better in gnu emacs.
12:28:39 <shapr> yah, I agree with that :-(
12:29:00 <Heffalump> I can never get the hang of the VC (CVS) integration in either
12:29:10 <Heffalump> but I prefer to do VC from the command-line really
12:29:18 <shapr> Heffalump: I can give you an overview
12:29:28 <shapr> of both vc minor mode and pcl-cvs
12:30:36 <SyntaxPolice> shapr: so did you get the "first part" to run, where you see the form and get a preview?
12:30:57 <shapr> sure
12:31:07 <Heffalump> I suspect I'd still prefer to use the command-line, though thanks. The only real hassle of doing so is having to hit "revert" in [x]emacs after doing an update, and to be careful not to have unsaved changes when doing so
12:31:09 <shapr> I've entered in information, and it shows up in awaitingApproval.txt
12:31:20 <SyntaxPolice> OK, thats cool :)
12:31:38 <shapr> I can generate a static page just fine with the existing data
12:31:44 <shapr> but the new data I've entered explodes
12:33:09 <SyntaxPolice> what do you mean, new data and explodes? :)
12:33:21 <shapr> SyntaxPolice: http://kungens.kemi.fi/~shae/approved.txt
12:33:24 <shapr> something wrong with that?
12:34:09 <SyntaxPolice> shapr: I think it should be a list of lists, what happens if you put a [ at the beginning and a ] at the end?
12:34:34 <shapr> oh
12:34:48 <shapr> :-)
13:55:33 <Binkley> nebuchadnezzar
13:55:36 <Binkley> oops, wrong window
15:02:25 * shapr yawns
15:03:39 <SyntaxPolice> if anyone thinks that we're having an argument about Debian, they should read the mplayer thread on debian-devel :)
15:03:57 <Marvin--> I know, tragic, isn't it?
15:04:08 <shapr> um
15:04:12 <shapr> where do I find the archives?
15:04:15 <shapr> sounds interesting
15:04:24 <Marvin--> lists.debian.org
15:04:36 <SyntaxPolice> yeah really... I can't quite make out exactly whats going on, but it sounds like if the mplayer people contacted some folks and worked out the license issues, there would be no problem.
15:04:40 <Marvin--> it's not interesting, it's a flamewar, and the mplayer developers are being immature and arrogant as usual
15:04:45 <Pseudonym> Why do I get the impression that we're going to be asking the GHC people to give us flags to limit the scope of intermodule optimisation?
15:04:52 <Heffalump> eeek, no
15:05:04 <Pseudonym> Eeek indeed.
15:05:32 <shapr> GHC has more flags than the UN
15:05:40 <SyntaxPolice> lol
15:05:55 <Pseudonym> A compromise might be if we could get GHC to tell us what it actually used, rather than what it theoretically depends on.
15:06:05 <Marvin--> heh
15:06:13 <hdaume> UN?
15:06:16 <shapr> united nations
15:06:17 <Marvin--> losing binary compatability all the time is a big problem
15:06:18 <hdaume> oh, nm
15:06:42 * Heffalump thinks the strength of open source is that binary compatibility is far less important than source compatibility
15:06:47 <shapr> Marvin--: what about SyntaxPolice's idea of source packages that have the ability to compile themselves?
15:06:48 <Pseudonym> You know, like the current international crisis which is going to remain UN-solved.
15:07:01 <shapr> there's an international crisis?
15:07:05 * Pseudonym agrees with Heffalump up to a point
15:07:12 <shapr> I thought it was most my country's gov't being a bunch of assholes.
15:07:27 <Pseudonym> Actually, it's everyone's country's government being a bunch of arseholes.
15:07:27 <Heffalump> and a decent package system should resolve any issues for those who just want to download binaries
15:07:33 <Marvin--> I don't like source packages, I like binary packages, that's why I'm using Debian instead of *bsd
15:07:35 <shapr> Pseudonym: heh :-)
15:08:03 <shapr> Marvin--: yes, but ... debian developers don't always build their packages as soon as other stuff is updated.
15:08:08 <Pseudonym> Everyone is jumping all over each other trying to be the world's biggest rogue state.
15:08:23 <Pseudonym> Enough politics.
15:08:28 * shapr grins
15:08:30 <Marvin--> but I don't see a *problem* with having source packages that are highly configurable so if you're unhappy with the current situation, just apt-get source and debuild
15:08:39 <shapr> ok
15:08:48 <shapr> I agree that already build libraries is a better thing.
15:09:06 <Pseudonym> One of the problems with GHC is that there are a lot of incompatible memory models.
15:09:21 <Pseudonym> What if I want profiling and unboxed tuples?
15:09:46 <dark> Marvin: Are you talking about mplayer or about haskell libs? :)
15:09:51 <Pseudonym> Not unboxed tuples.  What the hell is it called?
15:10:01 <shapr> um
15:10:04 <shapr> I don't know?
15:10:14 <shapr> you will need separate profiling libs
15:10:19 <shapr> er, separate profiling binaries
15:10:30 <Marvin--> dark: haskell libs (well, I guess it applies to mplayer too, but since the licensing is confusing and the developers are assholes I have no intention to use mplayer)
15:10:31 <shapr> or you could include it in the base ghc binary
15:10:57 <dark> You refuse to use software written by assholes?  It's a common sentiment, but impractical :)
15:10:59 <Marvin--> profiling libs will need separate packages, as it always has in debian
15:11:00 <Pseudonym> I still have a beef with the fact that  Haskell does not support separate compilation.
15:11:03 <shapr> note, I use emacs.
15:11:22 <shapr> RMS wrote it.
15:11:26 <Pseudonym> -funbox-strict-fields
15:11:26 <Pseudonym> That's what I was thinking of.
15:11:29 <Marvin--> dark: I am perfectly happy with xine and they don't bite my head off when I communicate with them
15:11:36 <shapr> Pseudonym: I've only vaguely heard of that one
15:11:46 <dark> No need for separate Debian packages for profiling libs, ghc packages already support providing both profiling and non-profiling libs in one package.
15:12:08 <Marvin--> hmm, yeah, there were a lot fewer *-prof packages than I thought
15:12:25 <shapr> oh
15:12:26 <kawfee> hello
15:12:27 <shapr> that's good to hear
15:12:38 <shapr> hi kawfee, are you feeling stimulated?
15:12:39 <Pseudonym> shapr: The idea is, if you have, for example, data Foo = Foo !(!Int,!Int)
15:12:52 <Pseudonym> That's actually represented internally as: data Foo = Foo Int# Int#
15:12:55 <shapr> then you never create a thunk?
15:12:55 <dark> Pseudonym: That just hurts my eyes.
15:12:55 <shapr> oh
15:12:56 <kawfee> shapr: dunno
15:12:59 <shapr> makes sense
15:13:02 <det> what is the "!" operator for ?
15:13:11 <Pseudonym> ! means strict
15:13:20 <shapr> it's like that ruler your teacher had in class
15:13:24 <shapr> to make things strict
15:13:28 <det> I thought that was $
15:13:38 <dark> It's not really an operator, it's part of the datatype declaration syntax.
15:13:41 <hdaume> $ is not strict.  $! is
15:13:41 <Pseudonym> $ is dynamic, ! is static
15:13:44 <Pseudonym> ! is part of the type system
15:13:48 <shapr> no, that's the bribe that greases the process, it's lazy binding
15:13:50 <Pseudonym> Yes, $!
15:14:32 <kawfee> det: hey
15:14:37 <kawfee> det: isn't helium yours?
15:14:40 <shapr> I am unable to come up with a silly association for $!
15:14:44 <SyntaxPolice> well, I'm off to home.  if anything interesting gets talked about here, be sure to post to libraries@haskell.org :-)
15:14:45 <det> kawfee: yes
15:14:49 <kawfee> thought so
15:14:50 <SyntaxPolice> peace.
15:14:51 * SyntaxPolice &
15:14:57 <Pseudonym> Farewell.
15:14:58 <shapr> have fun SyntaxPolice!
15:15:12 <det> kawfee: Is he being a nuisance? :)
15:15:15 <kawfee> det: mind fixing opers in #lisp, I think there are a few who need to be added
15:15:20 <Marvin--> ah good, stop talking interesting things so I can focus on playing civ3 :P
15:15:24 <shapr> hah
15:15:36 <kawfee> det: nah
15:15:39 <det> kawfee, sure
15:15:40 <kawfee> det: not at all
15:15:41 <shapr> Marvin--: did you see lambdabot?
15:15:48 <Marvin--> I never thought my main use of a laptop would be to play games while still being in linux on the regular machine
15:15:54 <Marvin--> shapr: huh?
15:15:54 <Pseudonym> Oh, yes, shapr.  What did you think?
15:15:59 <shapr> Pseudonym: it's cool
15:16:03 <dark> shapr: $ just promises $ when it gets around to it.  $! gives you $ immediately.
15:16:06 <Pseudonym> It's very, very rudimentary.
15:16:11 <shapr> dark: oh I like it !
15:16:26 <shapr> Pseudonym: I'm not convinced switching to parsec would be a good idea...
15:16:37 <Marvin--> oh, Simon Marlow replied btw
15:16:38 <Pseudonym> I meant just for the command parser.
15:16:47 <Pseudonym> Not for the IRC protocol parser.
15:17:00 <shapr> what about an arrow based parser for the irc protocol?
15:17:09 <shapr> yah, command parser would be good in parsec
15:17:17 <shapr> Marvin--: replied to what?
15:17:17 <Marvin--> he wasn't sure when he'd get around to release a new version, so he suggest I package alex
15:17:23 <shapr> oh!
15:17:27 <shapr> that's good to hear
15:17:34 <shapr> that he replied :-)
15:17:43 <Pseudonym> The IRC protocol parser needs to be as fast as it can.
15:17:44 <det> kawfee, efnet servers? irc.secsup.org appears to be down and lightning wont let me on withouit identd
15:17:56 <shapr> Pseudonym: wouldn't an arrow parser be really fast?
15:17:57 <kawfee> try prison.net
15:18:09 <shapr> or would it...
15:18:12 * shapr isn't sure
15:18:18 <kawfee> irc.Prison.NET 
15:18:27 <Pseudonym> Maybe.
15:18:41 <dark> I promose a name.  $! is the spam operator :)
15:18:44 <Pseudonym> The protocol is sufficiently simple that a hand-written parser makes a bit more sense, I think.
15:18:54 <shapr> yah, probably so
15:19:38 <shapr> dark: so we have, ! is the strict teacher's ruler; $ is the lazy person's bribe, and $! is make money fast operator
15:19:40 <shapr> right?
15:19:48 <dark> Sounds right to me.
15:19:51 * shapr snickers
15:20:00 <shapr> this could go way too far
15:20:18 <dark> It couldn't get as bad as Intercal, though :)
15:20:27 <shapr> I hope not
15:20:47 <dark> Though... their actual operator names are fairly reasonable, it's the way they read out the characters that's weird :)
15:21:02 <dark> "select" and "mingle"... I forgot the others.
15:25:12 * shapr remembers what he was doing
15:27:45 <shapr> ok, check this out: http://shapr.homelinux.net/
15:28:26 <Pseudonym> What's this for?
15:28:46 <dark> Where'd you get the list of categories?
15:28:47 <shapr> this is for a user updateable list
15:28:58 <shapr> they were made up on the spot I think
15:29:02 <shapr> SyntaxPolice wrote the code
15:29:11 <dark> s/Pretting/Pretty/
15:29:14 <shapr> I just stuck it up on my gateway box
15:29:22 <shapr> good point, thanks
15:29:33 <Pseudonym> Is it a Haskell backend?
15:29:43 <dark> And I think it wants a dash :)
15:30:09 <shapr> Pseudonym: yes, hugs
15:30:12 <shapr> hooked up to apache
15:30:26 <Pseudonym> OK, just checking.
15:30:33 <shapr> :-)
15:30:43 <shapr> anything else would be heresy ;-)
15:31:33 <Pseudonym> I see your directory index.
15:31:36 <Pseudonym> http://shapr.homelinux.net/haskell/
15:31:56 <shapr> whoops
15:32:21 <shapr> dark: ok, typo fixed
15:32:50 <shapr> in my opinion, this is a rough start to something like freshmeat.net for Haskell libs
15:33:05 <shapr> even more importantly, I'd like to keep cached local copies of the libs
15:33:07 <Pseudonym> There's the communities report, of course.
15:33:16 <shapr> since it seems Haskell libs drop off the net and never come back :-/
15:33:25 <shapr> that's true
15:33:44 <dark> I discovered a flaw in my method for getting pizzas out of the oven.
15:33:56 <shapr> dark: an opportunity for deforestation?
15:34:06 <shapr> did you start a forest fire after dropping a pizza?
15:34:07 <shapr> :-)
15:34:18 <Logan> I will write a haskell library for generating Pokey comics.
15:34:27 <shapr> Logan: that would be stupendously awesome
15:34:28 <shapr> truly it would
15:34:34 <shapr> everyone should know about Pokey
15:34:40 <Logan> I AM GIVING YOU BRAIN DAMAGE!!!
15:34:42 <dark> I slide the edge of a plate under one end, and use the side of a knife to push the other end.
15:34:43 * shapr bounces
15:34:57 <shapr> Logan: HAVE YOU EVER USED STAPLES SMALL CHILD?
15:35:09 <shapr> Logan: did you see build-a-pokey?
15:35:17 <Logan> shapr: One project I've seriously considered is transcribing all Pokey dialogue to a database and implementing a Pokey search engine.
15:35:19 <dark> I held the knife too high and managed to scrape most of the topping onto my plate :)
15:35:21 <Logan> shapr: Yeah.
15:35:38 <shapr> Logan: would you transcribe all the scritched out bits also?
15:35:51 <shapr> dark: this could be a bonus if you don't like the crusty bits
15:35:53 <Logan> shapr: Probably, if it's possible to make it out.  I'd flag those as scratched out, though.
15:36:10 <shapr> Pseudonym: some of the links on the haskell libraries page are dead
15:36:15 <shapr> and have been dead for awhile
15:36:25 <dark> Okay, what's Pokey?
15:36:25 <Pseudonym> Trye.
15:36:34 <shapr> dark: you must find pokey yourself.
15:36:36 <shapr> he's a penguin
15:36:38 <shapr> and he's evil
15:36:42 <dark> shapr: Packaging them for Debian would fix that :)
15:36:45 <Pseudonym> Is Pokey like Goats?
15:36:45 <Logan> *BIF!*
15:36:53 <Logan> http://yellow5.com/pokey/
15:37:01 <Pseudonym> http://www.goats.com/
15:37:02 <shapr> dark: would you commit to packaging pokey comics for debian??
15:37:19 <dark> shapr: Only if they're Free.
15:37:22 * shapr laughs
15:37:33 <Logan> I should contact the "authors" before I embark on this noble project.
15:37:37 <dark> And if they're free, you can probably get them transcribed by Distributed Proofing :)
15:38:11 <Pseudonym> Since when have penguins lived in the Arctic?
15:38:37 <Pseudonym> OMG, I found a factual error in Pokey.
15:38:44 <shapr> Logan: Pokey has authors? I thought he was a force of nature?
15:38:44 <dark> Pseudonym: Since Finland got zoos?
15:38:49 <Pseudonym> Possibly.
15:39:12 <shapr> yes, packaging libs for debian would ensure that they don't disappear.
15:39:23 <shapr> I must apply for my own personal spiral badge.
15:39:51 <dark> shapr: You also get groupies.  This is a widely held secret.
15:40:11 <shapr> I'm afraid to even think of what debian developer groupies would look like.
15:40:15 <shapr> oh wait..
15:40:25 <shapr> if they look like I dream of jeanie, I'm in...
15:40:45 * shapr notices the cute genie bottle with red spiral on top
15:40:47 <Pseudonym> The ones that you dream of look like her.
15:40:59 <shapr> um
15:41:15 <shapr> hm
15:42:55 <shapr> so, any suggestions or comments on this library input form?
15:43:15 <dark> I exhausted my comment quota with petty nitpicking :)
15:43:34 <Pseudonym> Well I just managed to submit something saying that I want my contact details there but not putting any contact details in.
15:43:45 <Pseudonym> Some sanity checking might be handy.
15:43:58 <shapr> oh
15:43:58 <shapr> hm
15:44:53 <dark> Hmm, maybe have a paragraph explaining the scope?  It took me a while to realize you only want libraries, and tools _for_ haskell.  I was looking for a "Games" category :)
15:45:20 <shapr> oh
15:45:22 <shapr> good point
15:45:39 <Logan> http://yellow5.com/pp/05Chapter1.html is kind of weird.
15:48:00 <shapr> dark: er, waitasec.. what was your original idea of the scope?
15:48:09 <dark> shapr: Anything written in Haskell :)
15:48:24 <shapr> oh, it is anything written in Haskell
15:48:41 <dark> Well then I suggest changing the header :-)
15:48:45 <shapr> good point that there's no games category
15:49:00 <Pseudonym> Is there a category for IRC bots?
15:49:06 <shapr> Pseudonym: just a moment;-)
15:49:13 <dark> Pseudonym: Well there's "Robots" :)
15:49:13 * Pseudonym laughs
15:49:16 <Pseudonym> True.
15:49:33 <shapr> hm, that might cover it.
15:49:47 <shapr> this is the open source process, release early
15:49:52 <shapr> people tell you what you've missed
15:49:56 <shapr> fix it
15:50:16 <Logan> Or tell them to fix it. :P
15:50:22 <shapr> that too
15:50:23 <Logan> Hmm, an IRC bot in Haskell...
15:50:28 <shapr> there is one!
15:50:31 <shapr> Pseudonym wrote it!
15:50:38 <shapr> it's cool!
15:50:47 <dark> I guess the next step is Megahal in Haskell.
15:50:53 <shapr> Pseudonym: you should setup a cvs tree, or stick it into sourceforge
15:51:02 <dark> And then it'll be indistinguishable from the average irc denizen.
15:51:22 <shapr> I want to add the database of research papers for it to search
15:51:34 <Pseudonym> If someone else wants to create the sourceforge project, I'll be happy to be a developer.
15:51:40 * Pseudonym doesn't care enough to run it as a project
15:51:41 <Marvin--> maaan I should've been in bed an hour ago
15:52:06 <shapr> you could add it to the haskell foundation project
15:52:14 <shapr> er, foundation libs
15:52:24 * Pseudonym laughs
15:52:35 <shapr> we need network protocol libs :-)
15:52:40 <Pseudonym> Yes, the Haskell Two standard needs a common way to write IRC bots.
15:52:45 <shapr> yes
15:52:51 <shapr> an IRC Arrow
15:52:55 <dark> Hmm I have HTTP and FTP clients in harc.
15:53:03 <shapr> what's harc?
15:53:03 <Pseudonym> After all, it's not a real language until someone writes an IRC bot in it.
15:53:07 <shapr> exactly
15:53:14 <dark> But they're not designed to be generic, they're designed to do a simple job simply.
15:53:29 <dark> shapr: harc is my arch reimplementation.
15:53:32 <shapr> oh, I have a copy of harc
15:53:34 * shapr looks
15:53:39 <dark> shapr: I got it as far as "harc get" over http, and then lost interest.
15:54:00 <Pseudonym> This is why Haskell libs keep disappearing.
15:54:21 <shapr> right
15:54:23 <dark> shapr: The newest is harc--0.1--patch-13
15:54:31 <shapr> dark: I only have pre10
15:54:36 <shapr> 0.1pre10
15:54:43 <shapr> your ftp code looks quite impressive
15:55:00 <Pseudonym> I think we need a better foundation for network programming.
15:55:14 <shapr> like what?
15:55:38 <Pseudonym> I dunno.  ObjectIO? :-)
15:55:58 <shapr> that does more than gui?
15:56:05 <Pseudonym> Yes.
15:56:09 <shapr> hm
15:56:32 <shapr> well...
15:57:14 <shapr> I'm looking forward to getting it working on linux then
15:57:57 <shapr> dark: any problem with me pulling that code into a real ftplib.hs when I'm done with these mailtools?
15:58:17 <dark> shapr: That's fine with me.
15:58:20 <shapr> I'd very much like to have a good set of network libs for Haskell.
15:58:32 <shapr> dark: any other network libs hanging around? :-)
15:59:04 <dark> shapr: Client.HTTP in the same project? :-)
15:59:13 <dark> It's even more specialized, though.  It makes no attempt to do full HTTP.
15:59:33 <shapr> hm
15:59:42 <shapr> there's an HTTP lib for Haskell I think
16:00:07 <dark> One big thing that's missing from the FTP lib is the ability to resume aborted downloads.
16:00:07 <shapr> but nothing for FTP
16:00:18 <shapr> if it works at all I'll be thrilled.
16:00:21 <Heffalump> does FTP support that?
16:00:24 <shapr> sure
16:00:31 <dark> Heffalump: Sort of.
16:00:42 <dark> The RFC specifies a way to do it, but nobody really uses that.
16:00:47 <Heffalump> ah
16:00:54 <shapr> I thought wget used it?
16:01:01 <Heffalump> only for http I thought
16:01:10 <dark> There _is_ a way, but it's not what the RFC specifies :)
16:01:11 <shapr> oh, I thought it was for ftp also.
16:01:50 <dark> Officially the server is supposed to send "marker" information as part of the data stream, and the client can request downloads starting at such a "marker".
16:02:22 <dark> In practice, nobody sends markers, and clients just send byte offsets in ASCII and pretend they're markers.
16:02:52 <dark> This means that it works for "binary mode" downloads, and all the unix folks are happy.
16:03:06 <shapr> neat, I didn't know that.
16:03:12 <dark> It also means the client doesn't need to keep state :)  It can just inspect the local file size.
16:03:22 <shapr> elegant
16:04:07 <dark> shapr: Yeah but it doesn't solve the problem that the RFC method was designed for, which is that CRLF conversion changes the file offsets in ASCII mode :)
16:04:13 <shapr> urf
16:04:35 <dark> Of course, ASCII mode is rarely used these days.
16:08:06 <dark> FTP can do a lot more than common implementations allow for.  This probably points to a flaw in the specification :)  (Everyone just uses file-structure stream mode with ASCII or "image" (binary) type, because the various options interact so much that you'd get a combinatorial explosion otherwise.)
16:08:41 <dark> I think I once counted up that you'd need 48 slightly different decoders to handle all of FTP's options.
16:08:47 <shapr> yow
16:08:53 <shapr> sounds like a combinator library waiting to happen
16:09:05 <shapr> or monad transformers to make a module decoder!
16:09:18 <Pseudonym> 48 slightly different decoders... 3 Haskell compilers... four compilation models each... and let's not forget versioning!
16:09:26 * shapr snickers
16:09:27 <Pseudonym> Let's not package FTP in Debian.
16:09:31 <shapr> aww
16:09:35 <dark> As an example, what you use as the record separator in record mode depends on whether you're transfering ascii or image data, and on whether you're compressing or not.
16:09:38 <Pseudonym> :-)
16:10:23 <dark> FTP might be the only remaining network protocol with explicit EBCDIC support, though :)
16:10:31 <shapr> wow
16:11:35 <Pseudonym> I think ASN.1 still has it.
16:12:14 <Pseudonym> Most people use Unicode nowadays, but still.
16:12:20 <shapr> ASN.1 is distilled insanity
16:13:51 <Pseudonym> Sounds like the full FTP is, too.
16:16:26 <dark> I don't think the full FTP is "distilled" anything.
16:16:33 <dark> It's too complicated for that :)
16:17:04 <dark> I think it's a bit like sendmail, it goes to a lot of trouble to solve problems that are no longer relevant.
16:17:28 <shapr> oh
16:17:37 <shapr> good point
16:17:55 <dark> For example, there's a whole section on the proper way to transfer page-structured files.  I don't even know what those are :-)
16:19:36 <Pseudonym> Oh, they're from VMS.
16:21:05 <Pseudonym> As I understand them, they're like a proto version of mmap'd files.
16:21:16 <dark> Also, if you want to transfer a file from a 36-bit system to a 32-bit system, FTP is the protocol for you.
16:21:18 <Pseudonym> Or something.
16:21:56 <dark> Pseudonym: It seems to be sparse file support, actually.
16:23:04 <dark> Or at least something that would be implemented as sparse files today :)
16:24:16 <Pseudonym> Oh, OK.
16:24:58 <dark> Pseudonym: Hmm, your description might be just as accurate.
16:25:15 <dark> It mentions having a "file descriptor" associated with the file.  Though that probably doesn't mean what I think it means.
16:25:46 <Pseudonym> Probably not, no.
16:26:03 <dark> This is pretty clear though:
16:26:03 <dark> To transmit files that are discontinuous, FTP defines a page structure.
16:26:24 <Pseudonym> That would be handy if you have to ftp a whole filesystem.
16:26:38 * dark briefly wonders about the logical implications of saying "that probably doesn't mean what I think it means".
16:27:07 <Pseudonym> Depends on which logic you use.
16:38:38 <dark> shapr: I put harc-0.1pre13.tar.gz on my site :)  Changes are mostly prettifications.
16:38:49 <shapr> ok
16:39:24 <dark> Hmm, the changelog is fairly hard to get to without actually using arch.
16:39:44 <dark> Actually it's not in the .tar.gz at all :)
16:39:54 <dark> I guess I should finish harc to fix that.
16:40:39 <dark> (My problem is that arch requires DAV to work over HTTP, and my ISP doesn't have that.  So I have harc which can download over plain HTTP, and arch which can't commit that way...)
16:41:02 <shapr> hehe
16:41:42 * Heffalump is extremey unconvinced that arch will ever get anywhere, given the bitching on the mailing list
16:41:48 <Heffalump> s/extremey/extremely/
16:42:10 <shapr> I'm sure we all read and speak fluent typo.
16:42:15 <dark> Heffalump: I tried to subscribe at some point but apparently failed.
16:42:41 <Heffalump> dark: ah
16:42:56 <dark> Heffalump: I think there's an mbox archive of it somewhere... I should resync.
16:43:15 <Heffalump> a large part of it consists of Tom Lord complaining about various things
16:43:29 <dark> Heffalump: Complaining about landry's changes?  Or something else?
16:44:11 <Heffalump> lots of things, including landry's changes
16:44:27 <Heffalump> most of it is "why won't people listen when I say how great arch is"
16:44:46 <dark> Sounds like a standard case of "I don't have time to do this, so someone else should do it in exactly the way I would have done it", then.  I'm familiar with the effect :-)
16:45:45 <Heffalump> heh
16:46:10 <Heffalump> I don't know whether he's right or not about landry's changes going against the overall design, but he comes across as very arrogant
16:46:38 <Pseudonym> Arrogance is a virtue.
16:46:49 <shapr> hubris, laziness, ..
16:46:50 <Pseudonym> For a programmer, anyway.
16:46:55 <shapr> forgetfulness?
16:47:03 <Heffalump> only if you're actually writing code :-)
16:47:05 <Pseudonym> impatience
16:47:08 <shapr> oh
16:47:27 <dark> hubris isn't quite the same as arrogance, though.
16:47:27 <Pseudonym> That's the Larry Wall version, anyway.
16:47:57 <Pseudonym> Aeleen Frisch's version I like more.
16:48:04 <shapr> what's that?
16:48:12 <Pseudonym> Flexibility, ingenuity, paitence, persistence, adherence to routine, attention to detail, laziness.
16:48:28 <shapr> hm
16:48:35 <shapr> I have negative routine
16:48:41 <dark> Hmm, patience instead of impatience?
16:48:46 <dark> I think the laziness/impatience combination is critical.
16:48:47 <Pseudonym> Laziness: Writing a 250-line script to avoid typing characters.
16:48:59 <Pseudonym> Patence: Remaining capable of waiting until Mozilla 1.0 is released.
16:49:44 <Pseudonym> Adherence to routine: Insisting on real coffe, smoking in your office, coming late and having your company-paid breakfast behind your computer.
16:50:34 <Pseudonym> Actually, I think patience is more of a virtue in a sysadmin than in a programmer.
16:50:39 <shapr> I quit smoking.
16:50:41 <Pseudonym> The Frisch list is for sysadmins.
16:51:11 <shapr> it's a nice list.
16:51:14 <Pseudonym> Yes, I guess hubris is the virtue, not arrogance.
16:51:41 <Pseudonym> Flexibility: The ability to escape when irate users think they have you cornered.,
16:51:46 * Pseudonym has needed that once or twice
16:52:01 <shapr> haha
16:52:03 <Pseudonym> I think the most important virtue of a sysadmin, though, isn't on the list.
16:52:11 <shapr> ?
16:52:19 <Pseudonym> It's being a control freak.
16:52:33 <shapr> makes sense.
16:52:34 <Pseudonym> In particular, the ability to make the users think they are utterly dependent on you.
16:53:02 <Pseudonym> It's not so much being the master of all you survey.
16:53:06 <Pseudonym> It's making _others_ think that.
16:53:33 <Pseudonym> This doesn't work if you're a sysadmin for a software shop, of course.
16:53:42 <dark> I think the most important sysadmin virtue is "integrity", though.
16:53:44 <Pseudonym> Programmers see through it.
16:53:47 <dark> But that's a different kind of list :)
16:53:54 <Pseudonym> :-)
16:54:12 <Pseudonym> There's a fine line ebtween integrity and hubris.
16:54:40 <Pseudonym> Integrity in this sense is internal consistency.
16:55:02 <dark> (integrity does imply rationality and realness, though...)
16:55:08 <Pseudonym> True.
16:57:03 <dark> You mean that internal consistency could override all external factors?
16:57:21 <dark> That's the kind of integrity that leads to RMS :-)
16:58:10 <Pseudonym> :-)
16:58:49 <Pseudonym> Well, while I think sysadmins do need to be in touch with reality, I think that making sure that people know what you consider to be "your way" is very important.
17:13:28 * shapr tries to figure out how to write directly to the submission file
17:15:27 <shapr> oh
17:51:15 <kawfee> "my way"
18:01:30 <shapr> no, mine!
18:03:23 <dark> my way leads to darkness
18:03:24 <dark> and sleep
18:03:28 <shapr> sleepd
18:03:30 <shapr> sleep
18:03:34 <shapr> for me too
18:03:35 <shapr> g'nite
18:03:43 <dark> sleepd sounds very unixy
18:03:53 <dark> I'd love to have a background process for sleeping :)
18:03:56 <shapr> heh
18:03:56 <shapr> me too
18:04:03 <shapr> was just a dvorak typo
18:04:30 <dark> I'm still disappointed that dvorak keyboards don't have "dvorak" along the top row of keys.
18:05:26 <kawfee> ?
18:06:10 <shapr> I want HaskellDB on top of HToolkit
18:06:25 <dark> I want more chocolate milk.
18:06:29 <shapr> hm
18:06:35 <shapr> I could go with tha.
18:06:36 <shapr> that
18:06:38 <shapr> much more attainable
18:06:39 <dark> And I have the means to gratify my desire, muah-ah-ah-ah!
18:06:42 <shapr> I don't
18:06:57 <Heffalump> dark: the only reason for your disappointment is that the inventors of QWERTY were either unoriginal or ashamed of being associated with it :-)
18:07:16 <dark> Heffalump: Or they just thought it sounded cute :)
18:07:19 <shapr> yah, "sign your work" as the pragmatic programmers say
18:10:18 * shapr falls over unconscious
18:10:26 * dark carries shapr to the food processor.
18:10:33 <shapr> nooo
18:10:37 <shapr> I want a BED
18:10:46 * shapr laughs
18:10:59 <dark> Oh :)  With or without girl?
18:11:12 <shapr> I really don't care at the moment, too tired...
18:11:37 <andersca> you can have mine, I can't sleep right now :/
18:11:55 <shapr> I'll just use mine, thanks anyway...
18:12:08 * shapr goes off to dream about fixing Haskell CGI code
18:12:23 <dark> If you're going to dream anyway, why not about Haskell 2?
18:13:52 * dark notes that shapr is still online, and therefore still awake.
18:14:29 <dark> A friend of mine said "It's better to log out than to fade away."
19:03:00 <flippo> shapr: Thompson's "Haskell: The Craft of Functional Programming" is temporarily out of print.  So I ordered Hudak's book
19:04:09 <flippo> I see many computer books becoming unavailable lately.  Not too surprising I guess.
19:04:11 <andersca> whoah, it's out of print?
19:04:36 <flippo> andersca: the publisher is promising to run another printing in March
19:04:59 <flippo> Not a serious problem yet
19:05:38 <flippo> Publishers are dropping books of permanent value along with the "Idiots Unleashed in 21 Days" books
19:06:13 <flippo> But maybe they notice the continuing demand after a while
19:06:24 <andersca> yeah, we use the thomson book as course book 
19:06:37 <flippo> andersca: That should help keep it in print
