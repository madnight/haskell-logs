03:06:47 <Janni> hi
05:09:23 <xkb>  any idea what happens to a mailing list subscription if a mail server is unreachable for 2 weeks?
05:11:13 <Heffalump> depends on the mailing list software
05:11:45 <xkb> its the haskell-cafe list
05:12:06 <Heffalump> mailman, I think
05:12:16 <Heffalump> I think that might be just about enough time for it to unsubscribe you
05:12:21 <Heffalump> but check on the web interface
05:12:21 <xkb> darn
05:12:33 <xkb> good idea
05:18:03 <xkb> it says im allready subscribed
05:18:24 <xkb> hmm.. how can I show the output of a bash script
05:18:40 <xkb> debuggin output
05:18:58 <shapr> maybe it has a command line arg to do that?
05:19:44 <xkb> Man bash again :D
06:24:03 <shapr> oy
06:24:12 <inkedmn> howdy :)
06:24:16 <shapr> hiya inkedmn
06:29:47 <shapr> is there some way I can run quickcheck tests in main?
06:29:58 <shapr> hey dark
06:39:48 <shapr> aha
07:50:43 * shapr bounces
07:53:56 <jak_> problems compiling the haskell bindings:
07:54:10 <jak_> SDL/Bare/Audio.o: In function `s6iP_ret':
07:54:10 <jak_> SDL/Bare/Audio.o(.text+0x403): undefined reference to `SDLziBareziAudio_d65A'
07:54:11 <jak_> collect2: ld returned 1 exit status
07:54:11 <jak_> make: *** [SDL/Keynames.hs] Error 1
07:54:18 <jak_> any ideas?
07:54:27 <shapr> you using pre7 ?
07:54:30 <jak_> yep
07:54:32 <shapr> hm
07:54:33 <shapr> works here
07:54:40 <shapr> what distro are you using?
07:54:49 <jak_> rh8, with CVS SDL 
07:55:43 <shapr> hm
07:56:47 <shapr> are you using the latest c2hs ?
07:56:52 <jak_> probably not
07:57:08 <jak_> hsc2hs-0.65
07:57:20 <jak_> The Glorious Glasgow Haskell Compilation System, version 5.04.2
07:57:28 <shapr> er
08:00:49 <jak_> produced getkeynames fine
08:00:53 <jak_> but struggles with foo
08:01:09 <shapr> hm
08:01:47 <jak_> is 5.04.2 the latest version?
08:01:56 <shapr> I think so
08:02:04 <shapr> yes
08:05:13 <jak_> Hmm
08:05:26 <jak_> it only links correctly if it ghc --make compiles SDL/Bare/Audio.o
08:05:34 <shapr> that's strange
08:05:41 <jak_> if it is already compiled then it fails with the undefined reference error
08:06:32 <shapr> you're just trying to "make" it, yes?
08:06:38 <jak_> yes
08:06:58 <shapr> maybe cvs SDL has some differences?
08:07:37 <jak_> well it's odd that it works on compilation, but not if it's already built
08:07:51 <jak_> perhaps it is an oddity in ghc?
08:07:56 <shapr> could be, I'm not sure
08:08:01 <shapr> you could ask dark if he's awake
08:08:12 <jak_> what TZ is dark?
08:08:16 <shapr> CET
08:08:19 <shapr> er, EET
08:09:33 <shapr> I'm trying to cut down my code/test cycle time in Haskell
08:09:42 <shapr> anyone know how I can run quickcheck or hunit tests in main?
08:09:42 <jak_> ghci ?
08:10:14 <shapr> I'm using emacs, I'd like to have something in compile-command that runs all of my hunit and quickcheck tests
08:12:09 <jak_> ahh
08:12:20 <shapr> found something?
08:12:28 <jak_> you have to explicitly link SDL/Bare/Audio_stub.o
08:12:30 <shapr> aha
08:13:52 <shapr> oh, I can do one-button quickcheck testing
08:13:55 <shapr> cool
08:14:26 <shapr> spiffy!
08:15:09 <shapr> hmmm
08:15:21 <shapr> doesn't recognize QC tests in .lhs files though
08:29:29 <shapr> quickcheck roxx
08:31:44 * shapr tries to add .lhs functionality to the quickcheck script
08:39:28 <Marvin--> shapr: for both >  and \begin{code}?
08:39:34 <shapr> for just > atm
08:39:39 <Marvin--> okay
08:40:02 <shapr> it's using fst.head.lex to pick up the first word, which is ">" in .lhs
08:40:03 <shapr> hmm
08:40:31 <shapr> let names = nub$ filter (\x -> (("> prop_" `isPrefixOf` x) || ("prop_" `isPrefixOf` x)))
08:40:36 <shapr>           (map (fst.head.lex) (lines xs))
08:41:02 <shapr> yes, I know that lambda is ugly
08:41:34 <Marvin--> it's long :)
08:41:47 <shapr> you wanna tell me how to improve it? ;-)
08:41:51 <Marvin--> no :)
08:42:12 <Marvin--> but you might want to allow a variable number of spaces between ">" and "prop_"
08:42:22 <shapr> well
08:42:44 <shapr> prop_Foo should always be at the 'beginning' yes?
08:42:57 <shapr> if it were indented, wouldn't that be an error?
08:42:59 <Marvin--> but is "beginning" always at "> "?
08:43:16 <shapr> I think so, the properties are always top-level, yes?
08:43:23 * shapr isn't sure
08:43:56 <Marvin--> I just tried having ">foo = 3" in foo.lhs, and it worked just fine
08:44:03 <shapr> oh
08:44:04 <Marvin--> as does ">  foo = 3"
08:44:07 <shapr> good point
08:44:27 <shapr> does that work for "   foo = 3" also?
08:44:50 * shapr wonders if Igloo is upgrading his hardware
08:44:52 <Marvin--> yes
08:45:08 <shapr> well, I'll add that after I've got everything else working
08:45:14 <Marvin--> as long as you have the same number of leading space in the whole file
08:45:29 <Marvin--> you can't have "  foo = 3\nbar = 2"
08:46:10 <Marvin--> not that anyone would want to write two leading spaces on every line... but it's different when the lines start with ">", people can get religious about number of spaces for less ;)
08:47:49 * Syntaxpolice religiously does what emacs does by default :)
08:48:43 <shapr> oh, speaking of which, I haven't looked at the new features in the latest haskell-mode
08:48:47 <shapr> hi Syntaxpolice
08:49:11 <Syntaxpolice> shapr: hi, how's it going?
08:50:31 <shapr> going well
08:50:43 <shapr> re Igloo
08:51:21 <shapr> it kind of bugs me that I need to use different functions to get the first part out of a list and tuple
08:51:36 <shapr> I guess I'm used to Python's idea that any sequence can be treated the same way
08:51:59 <Syntaxpolice> you need even different functions to get the first element out of anything but a two-touple, also, right?
08:52:18 <shapr> I think so
08:52:28 <lament> heh
08:52:36 <shapr> the difference being that tuples are considered unique types in Haskell
08:52:39 <shapr> rather than sequences
08:52:54 <lament> python tuples are simply immutable lists
08:53:01 <shapr> right, not the same thing at all
08:53:15 <shapr> good point lament
08:53:16 <lament> corresponding to haskell lists :)
08:53:26 <shapr> yah, exactly
08:58:34 <Janni> re
08:58:40 <Syntaxpolice> are python lists composed of elements of a single type?
08:59:16 <Marvin--> python isn't that type oriented
08:59:30 <shapr> python lists are totally heterogenous
09:00:30 <lament> Syntaxpolice: Python only has one type
09:00:34 <lament> Syntaxpolice: "objects" :)
09:01:38 <Marvin--> well, not really, there are plenty of types in python
09:02:03 <Marvin--> but they are hierarchial
09:02:08 <shapr> what exactly does nub do?
09:02:22 <jak_> python has one static type -- object, but many run-time types
09:03:03 <Syntaxpolice> ahh, interesting.
09:03:11 <lament> Marvin--: not really hierarchial
09:03:23 <Syntaxpolice> so you can do typechecking at runtime on arbitrary types?
09:03:52 <lament> at runtime, yes
09:04:03 <lament> although i'm not sure if that qualifies as "typechecking"
09:04:40 <Marvin--> they aren't used for typing, more like prototypes
09:05:53 * shapr gives up and tries unlit
09:08:40 <hdaume> shapr: removes duplicates
09:09:00 <shapr> ok, thanks
09:12:09 <shapr> unlit doesn't really fix the problem, the quickcheck script needs a real file ...
09:15:13 <Marvin--> isn't it easier to use Syntax.Haskell.Parser?
09:15:20 <shapr> maybe so
09:15:21 * shapr looks
09:15:33 <Marvin--> err, language.haskell.parser that is
09:16:30 <Marvin--> hmm, literal mode doesn't seem to be supported :(
09:16:53 <shapr> :(
09:17:14 <shapr> that's frustrating
09:19:26 <shapr> well, I'll go back to .hs until I find a better solution.
10:21:18 * shapr stares at this QuickCheck example that doesn't work
10:25:11 <shapr> any QuickCheck users here?
10:27:43 <shapr> hmm
11:04:45 * Heffalump appears
11:05:51 * shapr bounces
11:05:54 <shapr> hi Heffalump!
11:06:05 <Heffalump> yo
11:06:47 <shapr> what's up?
11:07:04 <Heffalump> not much, you?
11:07:42 <shapr> playing with QuickCheck
11:08:09 <whee> I see wolfgang did objective c bindings :))
11:08:14 <shapr> yah, looks cool
11:08:21 <shapr> weren't you asking for them before?
11:08:26 <whee> yes
11:08:31 <shapr> tada!
11:09:14 <whee> only problem now is that ghc is refusing to compile again
11:10:00 <shapr> is there some default implementation of Show for functions?
11:10:08 <Heffalump> not usually
11:10:21 <shapr> running QC with functions just complains about no instance
11:10:22 <shapr> hmm
11:10:28 <Heffalump> instance Show (a->b) where show _ = "<<function>>"
11:10:32 <Heffalump> is what I usually do
11:10:42 <shapr> makes sense
11:10:44 <Heffalump> (it really is that simple)
11:10:48 * shapr tries that
11:10:51 <shapr> thanks
11:10:55 <Heffalump> of course, actually displaying them is pretty much impossible
11:11:23 <Heffalump> I suppose you could do something like instance Enum a,Show a,Show b => Show (a->b) where ...
11:11:42 <shapr> hm, that would be neat
11:11:57 <shapr> very neat in fact
11:12:37 <shapr> strangely, the QC manual says that function composition isn't always commutative, but the test passes everything so far
11:13:06 <Heffalump> umm, it's very rarely commutative
11:13:11 <Heffalump> f x = 2 * x
11:13:13 <Heffalump> g x = x + 1
11:13:23 <Heffalump> f . g /= g . f
11:13:39 * shapr checks his transciption from the manual
11:14:35 <shapr> it's not failing
11:14:42 <Heffalump> errm
11:14:54 <Heffalump> (f.g) 1 = 4
11:14:57 <Heffalump> (g.f) 1 = 3
11:15:02 <shapr> excellent point
11:15:03 <Heffalump> what test data is it using?
11:15:12 <shapr> randomly generated data
11:15:28 <Heffalump> well yes, but what in particular?
11:15:31 <shapr> (f === g) x = f x == g x
11:15:32 <shapr> prop_CompAssoc       :: (Int -> Int) -> (Int -> Int)  -> (Int -> Int) -> Int -> Bool
11:15:32 <shapr> prop_CompAssoc f g h = (f . (g . h)) === ((f . g) . h)
11:15:55 <Heffalump> well, it is associative
11:15:55 <shapr> then I run "quickCheck prop_CompAssoc" at the ghci prompt
11:15:57 <Heffalump> it's just not commutative
11:16:03 <shapr> oh!
11:16:16 * shapr is now confused
11:16:27 <shapr> oh I see!
11:16:32 <Heffalump> associativity: a op (b op c) = (a op b) op c
11:16:33 <shapr> thanks Heffalump =)
11:16:37 <Heffalump> commutativity: a op b = b op a
11:16:37 <shapr> yah, user error
11:16:56 <shapr> he says "for example, if we check for commutativity, then it fails"
11:17:05 * shapr adds a commutative test
11:17:36 <whee> what does QuickCheck do?
11:18:04 <shapr> it generates data instances to test the properties you've specified for your code
11:19:09 <shapr> cool :-)
11:19:17 <shapr> commutative function test fails as expected
11:19:25 <shapr> whee: want me to post this code?
11:20:42 <whee> if you're bored enough
11:21:31 <shapr> http://kungens.kemi.fi/~shae/ProtoQuickCheck.hs
11:22:03 <shapr> http://www.cs.chalmers.se/~rjmh/QuickCheck/
11:23:52 <shapr> hm, where does ordered come from?
11:23:59 <shapr> he talks about insertion into ordered lists
11:24:16 <Heffalump> wdym "come from"?
11:24:31 <shapr> the QC manual uses it, but I can't find it in the standard libs anywhere
11:25:01 <shapr> is it in there somewhere?
11:25:29 * shapr wonders if it's part of QC itself
11:25:45 <Heffalump> ah, dunno
11:25:51 <shapr> not in QC
11:25:53 <Heffalump> ordered [] = True
11:25:59 <Heffalump> ordered [x] = True
11:26:10 <Heffalump> ordered (x:y:xs) = x<=y && ordered (y:xs)
11:26:57 <shapr> thanks
11:26:58 * shapr tries that
11:38:06 <shapr> cool
11:38:07 <shapr> this works
11:38:10 <shapr> thanks Heffalump!
11:46:25 <shapr> hrm
11:46:30 <shapr> more stuff he hasn't defined
11:48:26 * shapr reads further
12:03:29 * shapr reads about Arbitrary typeclass in QC
12:29:38 <Marvin--> Enterprise is amazing, they've got a Universal Translator
12:30:03 <Marvin--> and when it doesn't work, they have a *person* who learns languages *faster* than the *Universal Translator* to talk to aliens
12:31:44 <SyntaxPolice> I saw Enterprise for the first time the other day, and that translator woman was injured.  It was kinda neat.
12:31:47 <shapr> truly that is amazing
12:32:06 <Marvin--> I honestly don't get the translating part :)
12:32:25 <Heffalump> the translator is just a computer she has to program, I thought
12:32:32 <Heffalump> well, semi-program
12:32:38 <Marvin--> well, it has lots of "linguistic algorithms"
12:32:58 <Marvin--> now, I don't know what "algorithm" means in the Star Trek universe, though :)
12:33:12 <Heffalump> :-)
12:33:37 <Janni> re
12:34:20 <SyntaxPolice> so she programs the computer with the language, or she works with the computer to figure out the language?
12:34:42 <Marvin--> I don't know
12:34:51 <Heffalump> I think the latter
12:35:08 <SyntaxPolice> And then from then on the computer can do the language by itself?
12:36:11 <Marvin--> I just don't understand how she can fail to program the translator but speak it herself :)
12:36:32 <SyntaxPolice> heh
12:36:43 <Heffalump> I can play chess better than I can program a computer too (well, maybe)
12:36:51 <whee> star trek need not make sense :p
12:38:04 <Marvin--> Heffalump: she was *hired to program the damn thing* :)
12:38:26 <Heffalump> I thought she was hired to do the communication
12:38:42 <Heffalump> and uses whatever tools are appropriate
12:38:44 <Marvin--> which usually means working with the UT
12:39:10 <Marvin--> this episode is kinda nifty
12:39:16 <Marvin--> Vanishing Point
12:39:17 <shapr> logic /= TV
12:39:20 <Marvin--> she's becoming transparent :)
12:39:24 <shapr> TV <= TV
12:39:26 <shapr> er
12:39:38 <shapr> TV < logic
12:39:51 <shapr> star trek often has huge plot holes
12:39:55 <shapr> I still enjoy watching it
12:40:18 <Marvin--> me too :)
12:40:30 <shapr> sometimes I get five minutes into the plot and say, "if they need immediate treatment and you can't treat them, why don't you just put them in stasis?"
12:40:47 <shapr> but they've forgotten about stasis more times than I can think of
12:41:17 <shapr> sometimes starfleet training sounds like a mail-order course
12:41:34 <shapr> even so, I watch several episodes a day of voyager =)
12:41:41 <Marvin--> "UNIVERSITY DIPLOMAS!!"
12:41:49 <Heffalump> aren't stasis generators for humans quite big
12:42:04 <shapr> Heffalump: they seem to have several in various cargo bays
12:42:07 <Marvin--> "Gain respect from your friends, join starfleet"
12:42:28 <shapr> "if they give you a red shirt and no last name, run for your life"
12:42:34 <shapr> have you seen Galaxy Quest?
12:42:43 <Heffalump> but if they're on the ship then they could just treat them
12:42:49 <shapr> if you like Star Trek, you *must* see Galaxy Quest
12:42:54 <shapr> I was howling with laughter
12:43:11 <Marvin--> yeah, Galaxy Quest was fun :)
12:43:27 <shapr> Heffalump: for those times when they can't treat this problem
12:43:43 <shapr> like when Ensign Kim was infected by some cells from Species 5472
12:43:43 <Heffalump> ah
12:43:57 <shapr> "he has only a few hours to live, we must hurry to develop the cure"
12:45:04 <shapr> I guess if they always remember the stasis chambers, there would be far fewer episodes
12:45:42 * shapr gets bored and cuts the cheese on his sandwich into I Ching hexagrams
12:47:26 <shapr> hmm
12:47:37 <shapr> 29. K'an / The Abyss, Danger
12:47:46 * shapr carefully puts the knife down
12:57:02 <Marvin--> BAH
12:57:05 <Marvin--> what a lousy ending
12:57:10 <Marvin--> That's the problem with star trek
12:57:16 <Marvin--> some of the episodes are really really good
12:57:19 <Marvin--> up to the last five minutes
12:57:31 <Marvin--> where they crash worse than a JAS
13:01:48 <shapr> JAS?
13:01:54 <shapr> jet assissted takeoff?
13:02:02 <shapr> assisted
13:04:23 <Marvin--> Swedish fighter plane
13:04:35 <Marvin--> jakt/attack/spaning
13:04:55 <Marvin--> they had a lot of problems with the steering early on, so it kinda...crashed a few times :)
13:07:19 * Marvin-- is watching the Osbournes on mtv :)
13:11:08 <Marvin--> doh, I think I've seen this one
13:28:19 <Janni> re
13:51:42 <shapr> y0
13:52:01 * shapr gets back to the QuickCheck paper
13:52:34 <shapr> I always thought the Saab Viggen was the coolest plane ever
13:52:54 <norpan> at least it's stable
13:53:08 <shapr> the Israeli Lion is nearly as interesting, but designed to be unstable
13:53:10 <shapr> hi norpan
13:53:17 <shapr> how's chalmers?
13:53:17 <norpan> but jas is a very interesting plane
13:53:23 <norpan> chalmers is good
13:53:31 <shapr> is jas designed like the lion? forward swept wings?
13:53:33 * shapr google
13:53:34 <shapr> s
13:53:52 <Heffalump> the Eurofighter is designed to be unstable too
13:54:49 <shapr> I've been thinking about forward swept wing setups for years
13:55:02 <norpan> indeed
13:55:31 <shapr> the next step is harrier-style vectored thrust and flexible skins and airframe
13:55:48 <shapr> that lets you change the lift properties of the whole craft for various roles
13:56:40 <norpan> i haven't got a clue what that means :)
13:57:01 <shapr> you know the harrier?
13:57:16 <norpan> yes
13:57:27 <shapr> lets you change the direction of the thrust
13:57:33 <norpan> yes, like vtol
13:57:35 <shapr> right
13:58:10 <shapr> the next step after that is to make the skin and bones of the aircraft flexible, and powered so it can change shape in flight
13:58:21 <norpan> yikes
13:58:31 <norpan> seems fragile
13:58:43 <shapr> shouldn't be a problem
13:58:47 <Fractal> Next step is to make it pilotless.
13:58:58 <shapr> I'd start with some of the spiffy carbon fibers that can contract
13:59:05 <shapr> well, pilotless has problems :-)
13:59:07 <norpan> next step is to eliminate wars and the need for fighter planes
13:59:13 <shapr> oh I like that one
13:59:20 <Fractal> That'd be good too.
13:59:32 <shapr> even so, I'd still enjoy dreaming up designs for niftier vehicles
13:59:39 <shapr> I have a neat design idea for a motorcycle
13:59:52 <Fractal> GWB doesn't like that plan though...
14:00:08 <norpan> still, there would be some need for flexible planes though
14:00:32 <shapr> spiffy motorcycle: dual counter-rotating spheres of some heavy metal (depleted uranium would be nice) centrally located in the frame, on a 3-axis gimbal
14:00:41 <shapr> would allow a rider of any size to control a bike of any size
14:00:58 <shapr> also, you'd have a nice place to store braking energy rather than burning it away with pads
14:01:39 <shapr> if my dream of room temperature superconductors ever happens, I could probably get away with zero gears
14:01:48 <norpan> and no chance to change direction :)
14:01:56 <Heffalump> lol
14:01:58 <shapr> bah, you could change direction just fine :-)
14:02:07 <Heffalump> hmmm..
14:02:20 <Heffalump> there's a reason they use big heavy spinning things to keep things pointing the same way...
14:02:27 <shapr> if the spheres are on a gimbal, you could even stand the bike up on the front tire and park it that way
14:02:47 <norpan> a 100% svaing on parking space, world shattering!
14:02:50 <norpan> saving
14:02:56 <shapr> well, 50% savings :-)
14:03:03 <shapr> with 100% you'd have to park them on top of each other
14:03:28 <norpan> ok, so i am a percent exagerator
14:03:31 <shapr> Heffalump: if the big heavy spinning things are on a powered 3-axis gimbal, you can then point any direction you want
14:03:46 <Heffalump> umm, you'd need a lot of energy to move them, though
14:03:56 <Heffalump> oh, I see, you leave them pointing the same way
14:03:59 <Heffalump> and move the bike around them
14:03:59 <shapr> right
14:04:01 <shapr> exactly
14:04:14 <shapr> and you use them to store braking energy as well
14:04:43 <shapr> spin up the flywheels rather than burn up the pads
14:05:01 <shapr> I have some neat designs for tires, power plants, etc etc
14:05:01 <Heffalump> yeah, I got that bit
14:05:35 <shapr> I just wish FP were this intuitive for me ;-)
14:06:03 <norpan> but if the spinning things are so heavy you'd need much friction to change direction
14:06:10 <norpan> since they have great momentum
14:06:16 <shapr> you don't change the direction of the spinning things
14:06:23 <shapr> you depend on the fact that they don't
14:06:37 <norpan> they move, since the bike moves, or do you leave them at home?
14:06:53 <shapr> they're on a swivel, that swivels in 3 axes
14:07:03 <norpan> the whole swivel must move
14:07:15 <norpan> and if it's heavy you'd need friction, and lots of it
14:07:19 <shapr> even seen the three circles at the science labs that you can strap into?
14:07:28 <norpan> yes, but they are stationary
14:07:43 <shapr> think of a big flywheel in the middle of those three circles
14:07:56 <shapr> no matter which way you turn the outermost frame, the flywheel doesn't turn
14:08:18 <norpan> let's say they weigh 100 kg
14:08:46 <norpan> or 1000 kg
14:08:49 <norpan> more likely
14:09:08 <norpan> and you go at a speed of, say 100 m/s
14:09:11 <norpan> well, that's fast
14:09:50 <norpan> then you have a momentum of 100*100*1000 joule
14:09:55 <norpan> kj
14:10:07 <norpan> you need to break all that momentum in order to turn
14:10:09 <shapr> check out the amount of momentum your average car has ... it's scary.
14:10:15 <shapr> and yet, cars can turn.
14:10:34 <norpan> yes, but cars have four tires
14:10:36 <whee> the power of friction.
14:10:42 <norpan> and they don't turn very good at 100 m/s
14:11:30 <shapr> the tire design I came up with has varied density from the hub to the outermost edge
14:11:37 <norpan> oh
14:11:44 <shapr> the tires are shaped like a V where the hub is at the top of the V, and the ground is at the bottom
14:11:49 <norpan> and you are going to connect your power plant to the bike as well :)
14:12:08 <shapr> as the weight and stress on the tires increases, the tires should have more contact with the ground, since they'll compress
14:12:19 <shapr> I have this mental picture of a tire full of toothpaste =)
14:12:31 <norpan> good if you are stranded
14:12:35 <shapr> should be nice against flat tires.
14:12:52 <shapr> yah, I have some spiffy ideas for a power plant... most of them unworkable :-/
14:14:03 <shapr> I've thought of some neet stuff for a car also
14:14:20 <shapr> but I should probably get back on topic and keep working on QuickCheck :-)
14:15:01 <shapr> any QC users here?
14:15:20 <norpan> well, i've used it
14:15:25 <shapr> what do you think?
14:15:28 <shapr> have you used it much?
14:15:28 * Heffalump has used it
14:15:34 <norpan> well, it's good
14:15:39 <shapr> any tips or tricks?
14:15:41 <norpan> but not useful for my big programs
14:15:44 <shapr> how so?
14:15:58 <norpan> it's too hard to generate good random input
14:15:59 <shapr> any thoughts on good points and bad points?
14:16:07 <shapr> hmm, interesting
14:16:55 <shapr> anything else?
14:17:32 <norpan> not really
14:17:38 <norpan> have only used it twice
14:18:00 <norpan> found bugs in an utf-8 encoder/decoder with it at least :)
14:18:05 <shapr> that's good to hear
14:18:29 <shapr> at least it was useful to you :-)
14:18:43 <norpan> well, it wasn't mine...mine was bug free :)
14:18:48 <shapr> hah
14:20:47 <norpan> but it's good, makes you think once more about your program's properties
14:21:34 <shapr> I wonder about the relation between QC properties and mathematically provable properties
14:28:46 <kunphuzil> What does mapping an Integer to an Integer do? I don't understand..
14:29:57 <norpan> kunphuzil: what do you mean
14:30:28 <kunphuzil> I am wondering what Integer -> Integer is suposed to do, maybe it explains this later in the tutorial?
14:30:46 <norpan> it means a function taking an integer yielding an integer
14:31:36 <kunphuzil> oh, i see
14:31:38 <kunphuzil> thanks
14:37:59 <shapr> hi kunphuzil, learning Haskell?
14:38:14 <norpan> shapr: it seems like that :)
14:38:41 <shapr> what are you doing norpan?
14:38:46 <shapr> cool code? fun stuff?
14:39:45 <dark> shapr: Hello!
14:39:50 <shapr> hello dark!
14:40:08 <shapr> I've so far failed in setting up my joystick under devfs :-(
14:40:15 <shapr> not really sure why
14:40:28 <dark> shapr: because devfs is subtle and evil?
14:40:33 <shapr> heh
14:40:35 <shapr> maybe so
14:40:42 <shapr> so far I've had minimal trouble with devfs
14:40:57 <shapr> this is the first time it's kunphuzild me
14:41:01 <dark> You probably forgot to check the "hidden option to make seemingly unrelated other options work" option in the kernel.
14:41:07 <shapr> probably so
14:41:21 <shapr> I think it wants the hid module (seriously)
14:41:27 <norpan> shapr: i'm playing internet poker with very bad results
14:41:28 <shapr> which I haven't built in
14:41:47 <shapr> nor built as a module
14:42:22 <shapr> can I build new modules for the same kernel-package image without going through the whole "build a new kernel deb" process... and still expect those new modules to work?
14:42:40 <dark> I don't know about kernel-package.  But if you have a built kernel tree still lying around, it should work.
14:43:18 <shapr> kernel-package is nice because it can automatically (un)apply patches, etc
14:43:25 <dark> Just add modules to your config and do "make modules", then drop them into the right /lib/modules directory.  You might have to do the rescanning thingy.
14:43:38 <shapr> depmod -a I think
14:43:56 * shapr decides to try 2.4.20 with the ext3 patches
14:44:15 <Heffalump> umm, 2.4 has ext3 anyway, doesn't it?
14:44:19 <Heffalump> at least I hope so...
14:44:31 <shapr> well, 2.4.20 had some ext3 corruption problems
14:44:36 <shapr> latest patches claim to have fixed that
14:44:36 <Heffalump> ah.
14:44:47 <Heffalump> is 2.4.20 the latest version?
14:44:52 <Heffalump> 2.4 that is
14:44:58 <shapr> afaik, it is
14:47:38 <norpan> those corruption problems was only with data journalling?
14:50:57 <shapr> norpan: yup
14:52:44 <shapr> aha
14:53:02 <shapr> I forgot the gameport module for the SB Live in the input section
14:58:26 <norpan> i haven't seen a joystick in ages
14:59:16 <shapr> I have a microsoft force feedback joystick from long ago
14:59:53 <dark> I found something new to do when I get fed up with coding :)  http://texts01.archive.org/dp/default.php
15:00:30 <shapr> yah, I like that project
15:06:58 <kunphuzil> what does universally quantified mean?
15:07:16 <kunphuzil> and, what is a reccomended haskell tutorial?
15:09:41 <norpan> kunphuzil: universally quantified means that it can be anything
15:10:31 <norpan> i don't know of a good modern haskell tutorial
15:11:39 <dark> Read them all and see which you liked best? :)
15:16:05 <Janni> i know a very good tutorial: http://www.cs.ou.edu/cs1323h/textbook/haskell.shtml
15:16:44 <kunphuzil> Janni: ok, thanks
16:13:10 <kunphuzil> shapr: shapr> hi kunphuzil, learning Haskell? Yeah..
17:00:59 * shapr bounces
17:20:53 --- topic: set to 'lisp' by kunphuzil
17:21:01 <kunphuzil> er.. uh oh
17:21:03 <shapr> ?
17:21:08 <kunphuzil> sorry..
17:21:11 <kunphuzil> i meant to do /j lisp
17:21:13 <shapr> can you put it back?
17:21:19 <kunphuzil> sure
17:21:21 <shapr> I can, if you want...
17:22:10 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Gtk+HS 0.14.10:  http://www.cse.unsw.edu.au/~chak/haskell/gtk/","HWS-WP: http://www.dum.chalmers.se/~marvin/hws-wp/", "HaskellWiki resurrected", "ANNOUNCE: GHC version 5.04.2 released","need joystick testing: http://www.xs4all.nl/~dark/hasdl-0.1pre7.tar.gz"]' by kunphuzil
17:22:15 <shapr> thanks :-)
17:22:24 <kunphuzil> yeah
17:22:27 <kunphuzil> sorry about that..
17:22:37 <shapr> no worries
17:23:02 <kunphuzil> i remember #lisp had something like "we put the * in *" in there topic.. so i guess i got mixed up and did /t lisp :P
17:23:11 <shapr> heh
17:23:46 <kunphuzil> So, for what reasons should I learn haskell?
17:23:59 <shapr> because it'll change your thinking for the better
17:24:07 <whee> indeed.
17:24:17 <shapr> the mental tools that you learn from Haskell can be applied in every other programming language you work with.
17:24:25 <kunphuzil> cool
17:24:32 <shapr> any language that doesn't change how you think isn't worth learning --Alan Perlis
17:24:38 <kunphuzil> i read that is it not easy for a beginning programmer,
17:24:45 <shapr> I disagree.
17:25:01 <shapr> I think it's easier for a beginning programmer, rather than one that has been steeped in the procedural way of thinking.
17:25:02 <kunphuzil> i am that new.. i know some stuff, but not that advanced
17:25:11 <kunphuzil> not
17:25:19 <kunphuzil> shapr: oh, ok
17:25:28 <kunphuzil> procedural being languages like C?
17:25:30 <shapr> in that case, I think you'll have an easier time coming to grips with purely functional programming than later in your carrer
17:25:33 <shapr> career
17:25:36 <shapr> yes, procedural is C
17:25:46 <shapr> that's the most typical procedural lang, imho
17:25:54 <kunphuzil> yeah
17:26:05 <shapr> so
17:26:13 <kunphuzil> i started to learn C, but didn't get to far into it to be very advanced..
17:26:18 <shapr> whether you actually learn Haskell to the point of being fluent or not...
17:26:25 <shapr> your exposure to it will broaden your horizons
17:26:47 <kunphuzil> I hope to learn it enough to be fluent, above and beyond that aswell.. i hope
17:26:50 <kunphuzil> anyway, BBL
17:26:53 <shapr> ok, cya
17:54:08 * shapr bounces
17:59:31 <kunphuzil> shapr: heh, your just like someone else I know on IRC. always /me bounces
17:59:42 <shapr> well, I'm a hyperactive person.
17:59:47 <shapr> are you also bouncy?
18:00:02 <kunphuzil> yeah
18:00:13 <shapr> bouncy is good.
18:00:17 <kunphuzil> i don't do /me bounces a lot, but IRL i am 
18:00:28 <shapr> I'm much bouncy in person
18:01:10 <dark> My girlfriend says she can recognize me from a distance from the way I bounce.
18:01:32 <shapr> hah
18:01:36 <shapr> I must meet you dark....
18:01:48 <shapr> I like to meet people who bounce.
18:02:09 <dark> Somehow that sounds ominous :)
18:02:15 <shapr> hah
18:02:33 <shapr> well, I tend to amplify bouncy emotions
18:03:05 <shapr> so bystanders might need to be warned beforehand
18:03:46 <shapr> oh, I was in Helsinki not too long ago
18:03:53 <shapr> but I forgot to talk to you
18:03:58 <shapr> oh well, next time.
18:04:25 <kunphuzil> are you guys in finland?
18:04:52 <shapr> dark is...
18:04:55 <shapr> I'm in sweden.
18:05:00 <shapr> was in finland last year though.
18:05:05 <shapr> where are you?
18:05:25 <kunphuzil> U$A
18:05:29 <shapr> which part?
18:05:34 <shapr> southeast I would guess
18:05:36 <kunphuzil> i have no choice to live here tho :P
18:05:44 <shapr> since mindspring has the most coverage in the SE
18:05:50 <dark> shapr: IIRC, liiwi invited me, but I had a big deadline the next day.
18:05:55 <shapr> oh, okay
18:06:00 <shapr> yes, I remember that now!
18:06:00 <kunphuzil> shapr: southwest
18:06:06 <shapr> where in the southwest?
18:06:12 <kunphuzil> i don't think i use mindspring, i have earthlink..
18:06:22 <shapr> *** kunphuzil is kunphuzil (~kunphuzil@user-38ldi73.dialup.mindspring.com)
18:06:25 <kunphuzil> maybe it is routed there or something
18:06:35 <shapr> maybe it's modem sharing
18:06:36 <kunphuzil> or mindspring == earthlink?
18:06:40 * shapr dunno
18:06:42 <kunphuzil> yeah
18:06:43 <kunphuzil> maybe
18:06:45 <shapr> where in the southwest?
18:06:47 <dark> Mergers, I guess.
18:06:48 <kunphuzil> az
18:06:57 <shapr> ok, where in az? :-)
18:07:03 * shapr wants to know the city
18:07:10 <shapr> I know some programmers in AZ
18:07:17 <shapr> well, know of
18:07:21 <kunphuzil> cool
18:07:48 <shapr> phoenix?
18:07:52 <kunphuzil> yeah
18:08:03 <kunphuzil> which compiler is reccomended most for linux?
18:08:07 <shapr> for Haskell?
18:08:11 <kunphuzil> yeah
18:08:12 <shapr> I would suggest GHC
18:08:17 <shapr> which linux distro do you use?
18:08:18 <kunphuzil> ok, that is what i have now
18:08:22 <kunphuzil> debian
18:08:27 <shapr> ah, you're in good hands then...
18:08:35 <kunphuzil> i used apt-cache to search for some compilers and that is what came up
18:08:37 <shapr> the debian haskell-mode is maintained by SyntaxPolice
18:08:44 <kunphuzil> what is haskell-mode?
18:08:54 <shapr> michaelw maintains the ghc packages, and he's here on irc, though not so often on #haskell
18:08:59 <shapr> it's a mode for emacs
18:09:01 <shapr> you know emacs?
18:09:12 <shapr> or know of emacs?
18:09:20 <kunphuzil> yeah
18:09:25 <kunphuzil> but i have never used it
18:09:57 <shapr> it's nice, though it has quite a chunk of startup overhead
18:10:02 <shapr> for learning it I mean :-)
18:10:15 <kunphuzil> oh, ok
18:10:55 <shapr> ah, now I remember... WayneConrad is part of the XP users group in Phoenix
18:11:07 <kunphuzil> XP? like windows?
18:11:09 <shapr> noooo
18:11:15 <shapr> microsoft stole the acronym
18:11:25 <shapr> originally eXtreme Programming
18:11:26 <kunphuzil> oh
18:11:28 <kunphuzil> oh i see
18:11:34 <kunphuzil> BBL anyway
18:11:35 <shapr> http://c2.com/cgi-bin/wiki?PhoenixXpUsersGroup
18:11:36 <shapr> ok
18:11:49 * shapr tries to remember what he was doing
18:11:50 <shapr> hmmm
18:12:36 <shapr> oh yes...
18:12:43 <shapr> getting my joystick working...
18:25:43 <kunphuzil> wow
18:25:51 <kunphuzil> I didn't know there were XP groups like LUGs
18:25:57 <shapr> sure
18:26:00 <shapr> you know XP?
18:26:21 <kunphuzil> well, i have heard it before
18:26:25 <kunphuzil> but i don't really know what it is
18:53:12 <shapr> it's a methodology
18:53:55 <kunphuzil> huh?
18:54:12 <kev_> software design discipline
18:54:24 <shapr> http://c2.com/cgi-bin/wiki?ExtremeProgramming
18:54:36 <kev_> or maybe project management as well
18:55:15 <kunphuzil> oh
18:55:22 <kunphuzil> interesting
18:55:31 <kunphuzil> btw, how do i run ghc in interpreter mode?
18:55:32 <kev_> it's nothing special really
18:55:40 <shapr> kev_: it is to me
18:55:41 <kev_> just seems to be the new 'in thing'
18:55:57 <jmalicki-work> it's like totally punk rock, d00d
18:56:07 <shapr> imho, XP is a great thing
18:56:11 <shapr> kunphuzil: ghci
18:56:33 <kunphuzil> ok, thanks
18:56:57 <kunphuzil> Um.. what does Prelude mean?
18:56:57 <jmalicki-work> i'm not sure i like the strict pair programming thing
18:56:58 <kev_> shapr: to me it just seems more of a banner under which people say that current design procedures are wrong
18:57:01 <kunphuzil> sm
18:57:04 <kunphuzil> er, sorry
18:57:08 <kev_> and because it's got a title, the
18:57:08 <jmalicki-work> kev_: no, that's Agile Programming :)
18:57:14 <jmalicki-work> kev_: XP is merely one solution
18:57:15 <kev_> there's something behind what they say
18:57:20 <shapr> kunphuzil: the Prelude is a collection of generally useful code
18:57:21 <kev_> jmalicki-work: hehe :)
18:57:28 <kunphuzil> ok
18:57:37 <shapr> handy stuff like the length function
18:58:11 <shapr> I've had programming jobs in several companies
18:58:27 <shapr> in my experience, "current design procedures" don't exist
18:58:42 <jmalicki-work> shapr: mostly because they suck :)
18:58:48 <jmalicki-work> so they don't do anything
18:58:54 <kev_> shapr: you'd be amazed how many companies don't even follow basic practices
18:59:01 <shapr> oh no I wouldn't ;-)
18:59:13 <kunphuzil> that would be cool to have a job as a programmer, i think. no one takes kid programmers tho :P
18:59:17 <shapr> so far I've only seen voodoo programming and total chaos
18:59:23 <shapr> kunphuzil: yes they do..
18:59:27 <shapr> if you're good they'll hire you
18:59:28 <kev_> kunphuzil: they did years ago
18:59:36 <kunphuzil> yeah, that is what i was thinking
18:59:37 <jmalicki-work> kunphuzil: define kid?
18:59:41 <kunphuzil> (if you are good enough)
18:59:48 <shapr> kunphuzil: you're.. fifteen?
18:59:55 <kev_> shapr: I worked at an ISP where they didn't even manage to use content management for their configurations
18:59:59 <kunphuzil> shapr: well.. 14
19:00:03 <kev_> ah
19:00:03 <shapr> ah, I was close.
19:00:13 <kev_> well, hiring you's prolly illegal ;)
19:00:19 <jmalicki-work> kunphuzil: i've know 18yr olds who have worked as peers of 30yr old PhD's before
19:00:33 <kunphuzil> wow
19:00:45 <jmalicki-work> if you know how to program, you know how to program
19:00:51 <shapr> kev_: I worked on a 60k-lines of VB trust management system where 30% of the code was unreachable
19:01:01 <kev_> nice
19:01:14 <jmalicki-work> shapr: that's VB, what do you expect? :)
19:01:31 <shapr> and in the first two weeks of every month, they would laze around and relax... and the last two weeks everyone would be forced to work twelve hour days
19:01:37 <shapr> just to make our month-end deadline
19:02:01 <shapr> I was the most junior programmer, but they couldn't see that balance work habits would make those last two weeks easier.
19:02:06 <jmalicki-work> shapr: that;s almost mroe of a sign of just bad morale etc
19:02:13 <kunphuzil> heh
19:02:18 <shapr> yah, the morale went through the floor while I was there
19:02:38 <shapr> the advantage of XP in my opinion is that I've tried as much as I can by myself
19:02:44 <shapr> and I've tried pair programming a few times
19:02:47 <shapr> and it really does work for me
19:02:48 <kev_> tbh, combatting morale and the likes probably does more for companies than trying to force in XP techniques
19:02:58 <shapr> also, the most basic tenet of XP is "do what works"
19:03:12 <jmalicki-work> shapr: i think XP pushes it to the extreme... i like the idea of sharing offices and getting help every time you're like "it's not obvious"
19:03:25 <shapr> I like that approach
19:03:27 <kunphuzil> is XP kind like a religion, where it's a way of life, only for programming?
19:03:37 <shapr> I don't think so
19:03:38 <jmalicki-work> kunphuzil: yeah
19:03:43 <kev_> kunphuzil: it's more a backlash against RUP 
19:03:46 <kev_> www.rational.com
19:03:47 <jmalicki-work> kunphuzil: there are XP-like methodologies that aren't quite so off
19:03:52 <shapr> RUP is younger than XP I think
19:03:56 <jmalicki-work> kunphuzil: XP is just, well, the extreme of it
19:03:58 <kev_> shapr: it is?
19:03:59 <shapr> afaik, RUP is an XP clone
19:04:08 <shapr> yah, XP has been around for several years
19:04:16 <kev_> before UML and the likes?
19:04:25 <shapr> hm, not sure if it happened before UML
19:04:25 <kunphuzil> what is UML?
19:04:32 <shapr> Unified Modeling Language
19:04:39 <jmalicki-work> shapr: umm.. isn't RUP like the opposite?
19:04:45 <kev_> it's for designing programs graphically
19:04:46 <shapr> it's a way of describing the structure of a program in non-programming language specific structures
19:04:52 <kev_> jmalicki-work: that's waht I thought
19:04:54 <shapr> nah, RUP is very much like XP
19:04:58 <kunphuzil> Oh..
19:04:58 <jmalicki-work> shapr: how so?
19:05:13 <kunphuzil> I think i remember seeing a program written in UML before in a programming book
19:05:20 <jmalicki-work> shapr: i fail to see how XP and UML could co-exist........
19:05:21 <shapr> use cases, program process tracking, module boundaries, etc
19:05:29 <kev_> shapr: that's just common stuff
19:05:36 <kunphuzil> and what is RUP?
19:05:38 <jmalicki-work> shapr: well sure... that's just basic programming
19:05:44 <shapr> RUP == rational unified process
19:05:45 <kev_> that's like saying they're identical because they both advocate debugging
19:05:49 <jmalicki-work> kunphuzil: dumb waterfall-method type shit
19:05:52 <shapr> from rationalrose.com (now owned by IBM)
19:05:53 <jmalicki-work> kev_: hehehe yeah :)
19:06:00 <shapr> waterfall is *terrifying*
19:06:05 <kunphuzil> jmalicki-work: waterfall-method?
19:06:12 * kunphuzil is new to all this stuff :(
19:06:15 <jmalicki-work> shapr: RUP is basically waterfall, tweaked
19:06:20 <shapr> kev_: not really, use cases are pretty radical compared to most methodologies
19:06:23 <jmalicki-work> kunphuzil: when you hear that word, run :)
19:06:27 <shapr> oh, I disagree
19:06:28 <jmalicki-work> shapr: umm.. not really
19:06:32 <shapr> RUP has lots of feedback compared to waterfall
19:06:42 <jmalicki-work> shapr: yes... tweaked.
19:06:43 <kunphuzil> What is waterfall tho?
19:06:47 <jmalicki-work> shapr: XP is radically different.
19:07:03 <jmalicki-work> shapr: XP == fuck design , period....
19:07:08 <jmalicki-work> shapr: UML has no place in XP
19:07:08 <kev_> shapr: tbh, I think rational are just trying to shrug off the XP craze
19:07:10 <shapr> kunphuzil: waterfall is where you get feedback around 1 year after you release
19:07:16 <shapr> jmalicki-work: have you actually *read* any XP books?
19:07:21 <jmalicki-work> shapr: yes
19:07:27 <shapr> XP is very much about design
19:07:51 <jmalicki-work> shapr: XP is about design-as-you-go
19:07:53 <kev_> no, it's about not constraining yourself
19:08:09 <kev_> which is fair enough for small projects
19:08:12 <shapr> sure, it is about design as you go
19:08:12 <jmalicki-work> shapr: being aware of what your program does vs. doing front-end design are very different
19:08:29 <jmalicki-work> kev_: well, the argument for XP is to not make a large project
19:08:34 <kev_> jmalicki-work: yep
19:08:37 <shapr> but design as you go works fine, if you've done your SpikeSolutions ahead of time
19:08:40 <jmalicki-work> kev_: if you have a large project, you've aleady fucked up
19:08:49 <shapr> because then you *know* what's going to be a problem
19:09:08 <shapr> XP also says "do the hardest parts first, since they're the most risky, and usually the hardest to change later"
19:09:10 <kev_> the first rule of large scale software development - get a better job
19:09:22 <jmalicki-work> shapr: sure RUP and XP have similarities, but they have radically different heritages
19:09:26 <jmalicki-work> kev_: hah.. i like that :)
19:09:35 <shapr> I agree, but heritage is unimportant
19:09:45 <jmalicki-work> shapr: RUP and XP more or less represent the convergence of waterfall vs. code cowboy
19:09:57 <shapr> I disagree
19:09:58 <jmalicki-work> shapr: well, RUP and XP are still on two sides of the line
19:10:15 <shapr> waterfall is totally about pre-design, and cowboys are about total code, zero design
19:10:17 <kev_> XP basically legitimises the code cowboy side of things by giving it a name and a few oreilly books
19:10:20 <shapr> no way
19:10:23 <jmalicki-work> XP starts with code cowboy , and fixes it, RUP starts with waterfall and fixes it
19:10:39 <jmalicki-work> we're just getting closer to a methodology that works
19:10:48 <shapr> have you guys *tried* the XP method?
19:10:56 <kev_> shapr: I got a better job ;)
19:11:02 <jmalicki-work> shapr: no... other agile methods, however
19:11:04 <shapr> I've been using test driven development for years, it rocks
19:11:20 <kev_> test driven development is nice, that much I do agree with
19:11:26 <shapr> what about refactoring?
19:11:45 <jmalicki-work> shapr: refactoring has a place in RUP?
19:11:52 <kev_> refactoring is essential but it takes longer than people realise
19:11:56 <shapr> it does?
19:12:08 <shapr> how long does it take you to refactor?
19:12:14 <jmalicki-work> shapr: it always depends :)
19:12:24 <kev_> twice of half the length
19:12:24 <shapr> it takes me three minutes.
19:12:50 <kev_> shapr: you obviously don't have messy enough projects to play with ;)
19:13:04 <jmalicki-work> wow, they're trying to adapt RUP to XP
19:13:09 <shapr> three minutes of writing a test, three minutes of writing code to answer the question that test asked...
19:13:23 <shapr> three minutes to refactor towards the next bit of code I'm going to write
19:13:39 <jmalicki-work> shapr: it really depends how complex your code is that you're refactoring.
19:13:45 <kev_> shapr: you can't keep that pace going though
19:13:49 <kev_> not at scale
19:13:49 <shapr> kev_: why not?
19:13:50 <jmalicki-work> kev_: yeah
19:13:53 <shapr> at what scale?
19:14:01 <jmalicki-work> shapr: 40hrs/wk
19:14:09 <shapr> it works for me
19:14:11 <shapr> and has for years
19:14:13 <jmalicki-work> shapr: you dont divide 40hrs by three minutesand you get that much work done
19:14:17 <kev_> at trying to tie several large systems together sort of scale
19:14:26 <shapr> jmalicki-work: try it
19:14:36 <jmalicki-work> shapr: i do.
19:14:40 <jmalicki-work> shapr: every day.
19:14:48 <kunphuzil> Wow, it seems as if me inquiring about XP has starting a lot of conversation
19:14:53 <shapr> you do nine minute cycles?
19:15:00 <shapr> kunphuzil: yah, cool isn't it? :-)
19:15:27 <kunphuzil> heh
19:15:32 <kunphuzil> what do you mean bye cycles?
19:15:51 <shapr> I mean, three minutes to write a test.. three minutes to write code, three minutes to refactor
19:15:58 <shapr> sometimes those chunks get longer or shorted
19:15:59 <shapr> shorter
19:16:08 <jmalicki-work> shapr: sometimes refactoring even leaves code in a state where it doesnt do anything for a week
19:16:14 <shapr> huh?
19:16:15 <kev_> yep
19:16:18 <kev_> which is a real pain
19:16:20 <jmalicki-work> shapr: occasionally code gets messy enough that you have to do larger-scale refactoring
19:16:29 <shapr> I've never broken code while refactoring.
19:16:33 <jmalicki-work> shapr: like higher-level designs need refactored.
19:16:37 <shapr> yah, I agree.
19:16:40 <kev_> shapr: after you get above so many thousands of lines of code you'll probably find your approach is flawed
19:16:46 <kev_> and need to chuck out what you started with
19:16:52 <jmalicki-work> shapr: its not that you break the code, its that a higher level design takes longer to refactor
19:16:57 <shapr> sadly, I've never had the chance to do a project with several thousand lines :-(
19:17:07 <shapr> have you guys tried a refactoring browser?
19:17:26 <shapr> they can greatly simplify your refactoring phase.
19:17:39 <kunphuzil> what is refracter?
19:17:44 <shapr> refactor
19:17:47 <kev_> it's still no real way to do large software
19:17:50 <whee> I must be missing something, refactoring doesn't seem like something complicated enough to require a _browser_
19:17:51 <whee> heh
19:17:53 <shapr> you know what factoring a number is about, yes?
19:18:26 <dark> whee: You can tell the browser stuff like "rename this function; swap its first two arguments", and it will go and update all calls to the function.
19:18:39 <shapr> kunphuzil: you can factor software the same way... move methods around in a class hierarchy, merge classes, extract chunks of code into new methods
19:18:39 <jmalicki-work> dark: is there a good one for emacs?
19:18:50 <shapr> there is
19:18:50 <whee> oh, I guess that makes sense
19:18:52 <dark> jmalicki: I have no idea; I don't use any :)
19:18:57 <kev_> dark: :s/function/functionx/g ;)
19:19:03 <jmalicki-work> dark: its something i've been meaning to check out :)
19:19:30 <jmalicki-work> shapr: its when you get to a 200k line program that RUP and XP differ btw
19:19:32 <dark> I don't think there's any browser yet that can do "make this program use an event loop instead of I/O polling"
19:19:39 <shapr> whee: a refactoring browser turns all of your source into matching abstract syntax trees, then operates on the trees, turns the trees back into source, and then runs all of your unit tests
19:20:14 <jmalicki-work> man
19:20:17 <shapr> a refactoring is a change to the source of your program that does not change the functionality of that program.
19:20:24 <jmalicki-work> its been a long time since i've heard someone say "abstract syntax tree" :)
19:20:39 <whee> I don't think I'd need a tool to do that for me, heh
19:20:39 <kev_> I'm telling you, sed
19:20:39 <shapr> whee: you'd be surprised how useful they are
19:20:46 <whee> but highly language dependent
19:20:49 <shapr> kev_: tell me you're joking :-)
19:20:52 <shapr> whee: not necessarily
19:20:56 <jmalicki-work> kev_: sed r00lz
19:20:57 <dark> Sometimes I end up with bugs separated out into their own functions, with comments explaining what the bug does :-)
19:20:59 <kev_> shapr: not really
19:21:04 <Heffalump> ASTs are kind of fundamental to any compiler, you know :-)
19:21:12 <kev_> it's amazing what you can do with a few lines of sh and sed
19:21:15 <jmalicki-work> kev_: i usually just use M-%
19:21:18 <shapr> there's a nifty tool called the MetaEnvironment that uses a language independent abstract syntax tree tool
19:21:33 <jmalicki-work> shapr: sounds like it was developed by academics. hence useless.
19:21:43 <Heffalump> kev_: you're right, but there's so much more you can do if you have an AST in your hand
19:21:45 <kev_> shapr: I presume it uses ebnf specifications of the languages or something?
19:21:50 <shapr> I think Dijkstra was an academic... what did he do?
19:21:51 <dark> My phone makes a rattling noise when I shake it.
19:21:59 <shapr> anything useful?
19:22:07 <shapr> or popular?
19:22:07 <jmalicki-work> shapr: he said gotos were bad, so he was obviously dumb :)
19:22:11 <kev_> shapr: started a flamewar on a journal?
19:22:19 <jmalicki-work> did djikstra do anything useful? im unaware
19:22:28 <jmalicki-work> besides algorithm work of course
19:22:31 * kev_ notes that goto's are still damned useful
19:22:32 <shapr> I think he did one or two popular things
19:22:33 <Heffalump> promoted structured programming
19:22:43 <shapr> I'll let you use google
19:22:45 <dark> jmalicki: He came up with semaphores.
19:22:46 <Heffalump> invented the semaphore
19:22:57 <dark> P and V are abbreviations of dutch words :)
19:23:07 <Heffalump> most decent languages have more specialised features that make goto unnecessary, thank god
19:23:17 <shapr> kev_: yah, something like ebnf
19:23:19 <Heffalump> in particular break/continue and exceptions
19:23:20 <jmalicki-work> dark: man... i hate semaphores :)
19:23:22 <kev_> Heffalump: they're still useful in situations
19:23:32 <jmalicki-work> dark: well, ok, only in their SysV incarnation :)
19:23:45 <kev_> implementing excepitons in C being the obvious one
19:23:52 <jmalicki-work> Heffalump: those language features often suck in their own ways
19:23:55 <jmalicki-work> kev_: yep
19:24:08 <Heffalump> that doesn't make goto good, it makes C bad :-)
19:24:20 <shapr> I dislike call stacks
19:24:21 <jmalicki-work> Heffalump: noone has come up with something better that i've seen
19:24:27 <Heffalump> exceptions...
19:24:28 <shapr> having to unwind call stacks sucks
19:24:29 <jmalicki-work> Heffalump: C++/java exceptioins are a joke
19:24:41 <whee> much like c++ and java themselves.
19:24:43 <shapr> continuations and coroutines are much better imho
19:24:44 * whee ducks
19:24:44 <Heffalump> exceptions inside a single function do precisely what you want to use goto for
19:24:49 <jmalicki-work> shapr: yeah
19:24:53 <shapr> kunphuzil: having fun yet? :-)
19:25:03 <jmalicki-work> shapr: when you can develop in a functional language, that is better.
19:25:10 <shapr> kunphuzil: btw, any specific questions I can answer?
19:25:10 <jmalicki-work> Heffalump: i prefer goto... it's more maintainable.
19:25:23 <Heffalump> in what way is it more maintainable?
19:25:29 <kev_> ack, it's 3:30am, and these boxes are hanging on boot
19:25:38 <jmalicki-work> Heffalump: in what way is goto not easily maintainable at all?
19:25:41 <kunphuzil> shapr: well, atm writing a howto for GRUB.. so sorta :P
19:25:47 <Heffalump> jmalicki-work: it's too general
19:25:57 <jmalicki-work> Heffalump: it makes the uncommon case "loud", distracting you from the common case
19:26:04 <jmalicki-work> Heffalump: gotos focus you on the common case
19:26:05 <shapr> kunphuzil:  you're writing a GRUB howto?
19:26:15 <kunphuzil> shapr: yeah..
19:26:28 <jmalicki-work> Heffalump: generality isn't bad if it's not abused
19:26:28 <Heffalump> someone else reading your code who doesn't know your coding standards will see a goto and not know what kind of nasty effect it could have on the control flow of your program
19:26:28 <kev_> kunphuzil: fancy porting grub to sh4 ? ;)
19:26:30 <Heffalump> but goto is an invitation to abuse it
19:26:36 <jmalicki-work> Heffalump: noone should be reading my code w/o knwoing my coding standards :)
19:26:36 <Heffalump> people always abuse language features
19:26:37 <kev_> Heffalump: then you commend it
19:26:38 <jmalicki-work> Heffalump: no, its not
19:26:39 <shapr> kunphuzil: you should hang about for a few hours, I'm pretty sure the GRUB maintainer is clausen, should be here soon
19:26:47 <kunphuzil> shapr: GRUB is sweet, way way better than lilo
19:26:56 <kunphuzil> shapr: cool
19:26:58 <Heffalump> jmalicki-work: then your coding standards are equivalent to having in-method exceptions
19:27:00 <jmalicki-work> Heffalump: its philosophy... i like to cater to the competent. academics want any idiot to be able to program :)
19:27:15 <jmalicki-work> Heffalump: oh sure, i just think gotos are better syntactically
19:27:15 <kunphuzil> shapr: so he is a "haskeller" ?
19:27:18 <Heffalump> I don't think this is an academic/non-academic debate
19:27:22 <shapr> kunphuzil: yup
19:27:28 <kev_> Heffalump: it verges on one
19:27:38 <jmalicki-work> Heffalump: noone ever reads code w/o knowing coding standards
19:27:38 <kev_> at least, the XP stuff does
19:27:40 <shapr> kunphuzil: did you understand what refactoring is?
19:27:50 <jmalicki-work> Heffalump: in the *real world*, people work on a project for a year
19:27:52 <shapr> eh?
19:27:57 <jmalicki-work> Heffalump: it takes 2 days to learn coding standards
19:28:04 <Heffalump> in the *real world*, people dip into OSS projects
19:28:13 <kev_> dip into?
19:28:22 <Heffalump> play around with for a few days
19:28:28 <Heffalump> or even a few hours
19:28:30 <kev_> and then bin them? ;)
19:28:34 <jmalicki-work> Heffalump: yes.. but the useful work is done by people who work on them for a year.
19:28:37 <shapr> fix a few bugs, file a few patches
19:28:43 <Heffalump> no, make a patch that fixes some problem they have, for example
19:28:49 <jmalicki-work> Heffalump: most OSS projects have people who dedicate a LOT of time to them
19:28:59 <jmalicki-work> Heffalump: that is really fairly irrelevant in reality
19:28:59 <kev_> yep
19:29:07 <Heffalump> yes, and many also have lots more people who spend a little time on them
19:29:10 <jmalicki-work> Heffalump: those people exist but its not the brunt of the work
19:29:12 <kev_> patching really issn't a way to develop software
19:29:31 <jmalicki-work> Heffalump: and the poeple who spend a lot of time do the brunt of the work. people have done organizational studies on this, im not pulling this out of my ass
19:29:32 <shapr> that's how it works in most of the OSS projects I've worked with
19:29:43 <shapr> I file a patch, so do six other people
19:29:45 <shapr> the maintainer integrates them
19:29:51 <Heffalump> the better your language, the less the need for coding standards
19:29:55 <jmalicki-work> shapr: that happens, but its a minor piece of the puzzle
19:30:02 <shapr> not in the projects I've worked on
19:30:18 <shapr> I'm not an expert though
19:30:44 <kunphuzil> I am reading the Yet Another Haskell Tutorial (http://www.isi.edu/~hdaume/htut/) is a reccemended one?
19:30:45 <kev_> shapr: patching doesn't even work for the linux kernel development
19:30:47 <Heffalump> even commercial projects can have high turnover - e.g. the (only) one I've worked on had a succession of 3 month interns
19:30:47 <jmalicki-work> shapr: i'm refering to both personal experience and academic studies on the social structure of OSS projects... i wish i could cite it but i forget
19:30:48 <kev_> never mind anythign else
19:31:06 <kev_> Heffalump: then that's a _real_ problem
19:31:10 <Heffalump> patching seems to work very well for linux kernel development, judging by the mailing list
19:31:18 <jmalicki-work> Heffalump: not really
19:31:25 <Heffalump> kev_: it had full timers too
19:31:31 <jmalicki-work> Heffalump: most of those patchers are more mainline developers who are fulltimers
19:31:32 <kev_> Heffalump: what, so dos bugs in the stable kernel are fine?
19:31:51 <shapr> kunphuzil: http://c2.com/cgi-bin/wiki?WhatIsRefactoring
19:31:58 <jmalicki-work> Heffalump: very very rarely do i see a patch on lkml that is from an outsider
19:32:06 <shapr> kunphuzil: YAHT is pretty good, Hal has done lots of good stuff to it
19:32:06 <kunphuzil> shapr: ok
19:32:46 <shapr> I've patched the kernel... sadly, someone else got to the same fix before I did
19:32:57 <Heffalump> jmalicki-work: I don't really know the people involved, so I can't tell easily, but I do know that a few years ago I wrote a useful patch with a few hours work
19:32:58 <shapr> I am by no means a regular on the lkml
19:33:06 <Heffalump> without really having read the source beforehand
19:33:08 <jmalicki-work> Heffalump: sure, it happens
19:33:21 <shapr> I was adding support for the IDE chipset on my weird SMP mobo
19:33:25 <Heffalump> and having that be easy to do means you get more solid software in the end
19:33:27 <jmalicki-work> Heffalump: but then you optimize towards 10% of the work that comes from outsiders, rather than the main 90%
19:33:53 <shapr> in my experience, the 10% from outsiders is often the eye-opening stuff
19:34:05 <Heffalump> but if my claim about better languages requiring less coding standards is true, then you help the 10% without hurting the 90%.
19:34:07 <jmalicki-work> shapr: sometimes.. but then they're also the ones who jump in and become regular
19:34:12 <jmalicki-work> shapr: not who write one patch and leave
19:34:18 <shapr> I wonder here I fit in :-)
19:34:23 <shapr> I'm always a patch and leave guy
19:34:28 <jmalicki-work> shapr: they take on a *big* project then become mainline developers
19:34:31 * Heffalump points out that goto also completely screws any hope of doing many compiler optimisations
19:34:39 * kev_ watches the topic drift
19:34:47 <jmalicki-work> Heffalump: actually, no. i was on the MSVC++ optimizer team. trust me, it doesnt
19:35:02 <shapr> kev_: in short, I think you should try each of the practices in XP seperately, and together...
19:35:04 <shapr> kev_: find the ones that work for you, use them.
19:35:17 <jmalicki-work> Heffalump: modern compilers turn all loops and if's into gotos before they optimize anything :)
19:35:19 <kev_> shapr: I have done, I do have a job you know :P
19:35:24 <shapr> jmalicki-work: oh, when were you working on MSVC? I know some of those guys.
19:35:37 <jmalicki-work> shapr: 2000
19:35:47 <kev_> only thing I've never played with is paired coding
19:35:47 <Heffalump> jmalicki-work: you're trying to tell me that MSVC++ did things like loop invariant hoisting in the presence of irreducible loops?
19:35:47 <shapr> kev_: even so, there's always more stuff to learn...
19:35:53 <shapr> there's so much I don't understand, and wish I did
19:36:06 <kev_> shapr: you're trying to teach your granny to suck eggs here ;)
19:36:16 <jmalicki-work> Heffalump: refresh me on irreducible
19:36:17 <kev_> preaching to the converted or whatever
19:36:19 <shapr> oh, my fiancee's brother's best man is on the VC++ bug fixing team
19:36:21 <shapr> what's his name....
19:36:25 <shapr> hartmut
19:36:27 <shapr> something
19:36:34 <shapr> dang
19:36:38 <jmalicki-work> shapr: hmm... i think it rings a bell...
19:36:38 <shapr> I'll ask her tomorrow
19:36:45 <shapr> cool guy from germany, has a beard
19:36:55 <shapr> used to do Aspect Oriented stuff in Visual Basic with XML
19:37:11 <jmalicki-work> dunno
19:37:11 <shapr> oh, I know some guys in the gaming team also
19:37:16 <shapr> and I know some guys in the Far East sales team
19:37:18 <jmalicki-work> its a huge company :)
19:37:23 <Heffalump> jmalicki-work: a loop with two entry points
19:37:24 <shapr> yah, I lived in Seattle for awhile.
19:37:30 <shapr> lots of microserfs
19:37:31 <jmalicki-work> Heffalump: ah
19:37:45 <shapr> kev_: so try pair programming, I swear it's amazing stuff.
19:37:47 <Heffalump> can only happen in C if you use a goto statement
19:37:52 <jmalicki-work> Heffalump: oh, sure
19:37:55 <shapr> kev_: realize you'll require two willing participants though ;-)
19:38:09 <jmalicki-work> Heffalump: but that you're using a goto statement vs. some other method to get the same flow control is irrelevant is all i'm saying
19:38:09 <kev_> shapr: I'd probably kill the person I'm paired with in a week
19:38:16 <Heffalump> jmalicki-work: do you still work for MS, btw?
19:38:16 <jmalicki-work> Heffalump: that it doesn't know it originated as a goto
19:38:18 <shapr> kev_: but you don't pair with them for a week
19:38:24 <jmalicki-work> Heffalump: no, a small startup now
19:38:25 <shapr> kev_: half a day usually
19:38:31 <shapr> in fifteen minute shifts
19:38:36 <shapr> where each of you has the keyboard
19:38:41 <Heffalump> jmalicki-work: but if you compile away the loops first then try to do optimisations, any optimisation that involves loops has to first work out what the loops are again...
19:38:48 <Heffalump> jmalicki-work: when were you there?
19:38:48 <jmalicki-work> Heffalump: oh, sure
19:38:51 <shapr> jmalicki-work: hey, you know Ashley Yakely?
19:38:52 <jmalicki-work> Heffalump: 2000
19:38:59 <jmalicki-work> shapr: i dont think so....
19:39:06 <shapr> you'd remember if you did ;-)
19:39:08 <Heffalump> jmalicki-work: as an intern, or FTE?
19:39:15 <jmalicki-work> Heffalump: intern
19:39:25 <Heffalump> what months?
19:39:32 <shapr> kev_: then you pair with someone else on a different task
19:39:41 <jmalicki-work> Heffalump: re-discovering the loops also allows you to not worry about how the code was written , but what it actually expresses, too
19:39:44 * Heffalump was there April -> July 2000
19:39:55 <jmalicki-work> Heffalump: like, may-september 2000 i thnk
19:40:00 * shapr wonders when we get to Intentional Programming
19:40:08 * Heffalump is avoiding that topic :-)
19:40:11 * shapr laughs
19:40:12 <jmalicki-work> shapr: haskell is a big step towards it
19:40:19 <shapr> er, not really
19:40:22 <jmalicki-work> shapr: thats why i like haskell
19:40:24 <shapr> at least, not in my opinion
19:40:34 <jmalicki-work> shapr: for a developed language, put it that way
19:40:36 <shapr> .NET is a different approach to the IP idea
19:40:48 <Heffalump> jmalicki-work: did you know Kevin Matulef? He was an intern on VS around that time
19:40:52 <jmalicki-work> shapr: ummm... .NET is an approach to the IP idea *at all*?
19:40:56 <shapr> yah sure
19:41:03 <Heffalump> .NET and IP have almost nothing to do with each other
19:41:03 <jmalicki-work> Heffalump: i was pretty antisocial when i was there ;P
19:41:05 <shapr> what do you think the IP idea is about?
19:41:15 <Heffalump> jmalicki-work: ah :-) I take it you didn't go on the Whistler trip then?
19:41:38 <jmalicki-work> shapr: maybe i'm off.. but i took it as the idea of removing the abstraction penalty, and allowing for much greater abstraction as a result
19:41:39 <shapr> kunphuzil: you've fallen in among deep geeks ...
19:41:45 <jmalicki-work> Heffalump: nope :)
19:41:51 <Heffalump> yes, that was roughly what IP was about
19:41:52 <jmalicki-work> Heffalump: i went out drinking occasionally :)
19:42:12 <shapr> how does Haskell follow that principle?
19:42:21 <jmalicki-work> shapr: more so than any other quasi-mainstream language imo, haskell allows for the removal of the abstraction penalty
19:42:22 <shapr> and, do you see how .NET attempts the same thing?
19:42:30 <jmalicki-work> shapr: the language GREATLY favors optimization
19:42:33 <jmalicki-work> shapr: frankly, no :)
19:42:35 <Heffalump> well, HOFs make some types of abstraction easy
19:42:46 <jmalicki-work> HOF?
19:42:50 <kunphuzil> shapr: lol, cool :)
19:42:50 <shapr> higher order funciotn
19:42:51 <shapr> function
19:42:52 <Heffalump> .NET isn't really about making abstraction easy, it's about making inter-language communication at the object level easy
19:42:53 <jmalicki-work> yeah
19:43:00 <jmalicki-work> Heffalump: yep
19:43:07 <jmalicki-work> .NET is really no different than java
19:43:11 <jmalicki-work> like the language portion
19:43:12 <kev_> Heffalump: and screwing sun ;)
19:43:18 <shapr> heh
19:43:18 <shapr> truly
19:43:21 <kev_> don't forget the latter bit
19:43:23 <jmalicki-work> its like a language-indepnedent java, not too much more
19:43:30 <Heffalump> well, it has a bigger bytecode that's better designed for non-C# languages than JBC is for non-Java languages
19:43:33 <Heffalump> yeah
19:43:35 <shapr> .NET == non-intel windows
19:43:41 <lament> JVM isn't language-dependent
19:43:46 <jmalicki-work> lament: yes, it is
19:43:53 <lament> jmalicki-work: how so?
19:43:55 <Heffalump> in theory it isn't, in practice it is
19:43:55 <jmalicki-work> lament: well, it imposes an object model on you
19:44:00 <jmalicki-work> lament: you cant go outside that object model
19:44:08 <lament> um, they managed to write Jython somehow
19:44:12 <jmalicki-work> at least without reducing it to the java object model
19:44:17 <kev_> lament: yeah, they wrote it using objects ;)
19:44:20 <jmalicki-work> lament: it probably has a fairly compatible object model
19:44:26 <Heffalump> compiling any language but Java to JVM turns into a hack
19:44:29 <shapr> you should see generated java source from Jython, it's scary stuff
19:44:36 <lament> hmm, i wouldn't think so, even though i don't know java much
19:44:38 <Heffalump> even things like inner classes from later versions of Java have to be compiled nastily
19:44:41 <shapr> I've edited it by hand enough times to know
19:44:58 <Heffalump> there really is a very very close correspondence between Java bytecode and Java 1.0 source
19:45:11 <shapr> the way I see it, the JVM leans strongly towards procedural OO languages
19:45:13 <Heffalump> try writing a Java compiler, you'll notice this soon enough :-)
19:45:15 <kev_> have they changed the bytecode between revisions?
19:45:16 <lament> jmalicki-work: most languages are compiled to C, and C doesn't even have proper objects
19:45:23 <Heffalump> kev_: not as far as I know
19:45:33 <jmalicki-work> lament: you can compile C to .NET.. try that with java ;)
19:45:38 <shapr> kunphuzil: any other questions?
19:45:40 <kev_> lament: yeah, but they implement objects in C
19:45:44 <Heffalump> only because .NET has unsafe stuff
19:45:47 <kev_> implementing objects in C is fairly simple
19:45:50 <shapr> gcj compiles Java
19:45:58 <lament> Heffalump: being unsafe is not a requirement for C
19:45:58 <jmalicki-work> i work on an OO C project right now
19:46:04 <jmalicki-work> it makes some concepts hard to express
19:46:05 <kunphuzil> shapr: well, not atm.. 
19:46:11 <jmalicki-work> but if you dont have weird relationships it works out well
19:46:12 <kunphuzil> shapr: i am sure i will have some tho.
19:46:19 <shapr> kunphuzil: ok, feel free to ask when those questions show up
19:46:29 <lament> jmalicki-work: doesn't .NET also have some kind of object model?
19:46:33 <kev_> jmalicki-work: I take it wrapping everything with defines?
19:46:35 <shapr> kev_: so, what parts of XP work for you?
19:46:38 <Heffalump> lament: errm, are you sure? How does it compile pointer arithmetic?
19:46:40 <jmalicki-work> lament: the bytecode doesnt do it so much so
19:46:42 <lament> jmalicki-work: which you have reduce other languages to
19:46:46 <lament> s/have/have to
19:46:46 <jmalicki-work> kev_: no... actually having vtables
19:46:50 <kev_> shapr: extensive unit tests
19:46:53 <kev_> jmalicki-work: oohh..
19:46:56 <shapr> kev_: anything else?
19:47:03 <lament> Heffalump: pointer arithmetic only has to work on arrays
19:47:12 <jmalicki-work> kev_: like foo->vt->x()
19:47:19 <jmalicki-work> kev_: err.... foo->vt->x(foo)
19:47:28 <lament> Heffalump: which isn't unsafe
19:47:30 <Heffalump> lament: it only has to work inside an array, yes, but the compiler can't always know which array a pointer points to
19:47:33 <shapr> btw, I must point out that this channel is the coolest on the freenode irc network ;-)
19:47:48 <lament> Heffalump: that's true, but still doesn't require any unsafe stuff
19:47:50 <kev_> shapr: nothing in particular
19:48:11 <Heffalump> lament: if that's so, how come C++ definitely does require unsafe stuff?
19:48:28 <jmalicki-work> Heffalump: it depends what you do
19:48:32 <lament> Heffalump: it does? I don't know C++. What does it have to do with C?
19:48:49 <Heffalump> I'm talking about compiling to .NET in particular here, you realise?
19:49:07 <lament> no. What unsafe stuff does C++ require?
19:49:10 <jmalicki-work> Heffalump: you can write C++ code that doesnt require unsafe stuff
19:49:12 <emu> C++
19:49:17 <shapr> kev_: have you tried the RefactorMercilessly bit?
19:49:20 <kev_> is there anything hoopy about the .NET vm that's nice?
19:49:21 <Heffalump> jmalicki-work: yeah, but the language as a whole does.
19:49:26 <Heffalump> lament: sadly I can't remember
19:49:26 <lament> Heffalump: perhaps you're talknig about _efficient_ compilation :)
19:49:30 <Heffalump> kev_: it has a tailcall feature
19:49:32 <kev_> shapr: I refactor mercilessly all the time
19:49:35 <jmalicki-work> lament: Foo * x = reinterpret_cast<Foo *>(0x40003);
19:49:41 <jmalicki-work> lament: that's legal C++ ;)
19:49:45 <kev_> nothing to do with XP for that
19:49:45 <Heffalump> anyway. I was going to bed before I got dragged into this discussion.
19:49:52 <Heffalump> well, dived into it
19:49:58 <Heffalump> and now I'm really going.
19:50:03 <shapr> g'nite Heffalump!
19:50:05 <lament> jmalicki-work: um.
19:50:06 <jmalicki-work> nite
19:50:09 <kev_> night
19:50:22 <lament> jmalicki-work: I'm sure the C++ standard doesn't say that crap has to work :)
19:50:25 <jmalicki-work> lament: you better have something at 0x40003 if you want it to *work* :)
19:50:28 <kunphuzil> shapr: ok, thanks
19:50:43 <shapr> kev_: CollectiveCodeOwnership?
19:50:50 <kev_> shapr: ?
19:50:55 <shapr> have you tried that?
19:50:55 <jmalicki-work> lament: you can do some hokey shit with C++ :)
19:51:02 <kev_> I have no idea what that is ;)
19:51:05 <jmalicki-work> lament: even reinterpret_cast, period :)
19:51:23 <shapr> means any project developer can fix any code anywhere in the project if he thinks it's needed.
19:51:30 <jmalicki-work> shapr: yes... it works extremely well
19:51:56 <shapr> the one I miss most is PairProgramming
19:52:06 <shapr> I rarely get the chance
19:52:09 <jmalicki-work> shapr: but you dont need to formalize that... you just need to be enough of an asshole to fix other people's code with impunity :)
19:52:30 <shapr> imho, part of your viewpoint should be that it's your code
19:52:33 <shapr> no matter who wrote it
19:52:37 <shapr> but I'm being picky :-)
19:52:41 <kev_> yep, and the situation will be a lot less  clear cut than any rules can define
19:52:48 <lament> jmalicki-work: i'm pretty sure that if your C++ implementation simply crashes each time reinterpret_cast is used, it would still be ANSI-compliant
19:53:03 <jmalicki-work> lament: but its also useless then ;)
19:53:21 <lament> oh? reinterpret_cast is an essential feature?
19:53:22 <jmalicki-work> lament: you still need to make a useful product to make money, not one thats merely ansi compliant :)
19:53:26 <jmalicki-work> lament: yes.
19:53:31 <lament> God, I'm really lucky I don't know C++ :)
19:53:40 <shapr> same here
19:54:07 <jmalicki-work> lament: like its not always essential... but it commonly is
19:54:16 <jmalicki-work> lament: espescially when you have to interface with legacy code
19:54:50 * lament is appaled at the amount of crap in the world
19:54:52 <shapr> kev_: there is up-front desing in XP -> http://c2.com/cgi-bin/wiki?SpikeSolution
19:55:01 <shapr> well, crap is a great lubricant
19:55:04 <shapr> sort of
19:55:29 <lament> oh.
19:56:21 <kev_> Here is the code for our first spike: 
19:56:21 <kev_>   #(10 -5 -2) inject: 0 into: [:s :e | s + e]
19:56:31 <kev_> The new spike looked like this: 
19:56:31 <kev_>   t := #((10 0) (-5 3) (-2 7)).
19:56:32 <kev_>   (t select: [:e | e last < 5]) inject: 0 into: [:s :e | s + e first]
19:56:38 <kev_> well, that looks tasty
19:56:47 <shapr> you know smalltalk?
19:56:51 <kev_> nope
19:56:54 <lament> heh
19:56:55 <shapr> nor do I
19:56:58 <kev_> and I feel nauseus already
19:57:06 <lament> smalltalk is beautiful.
19:57:07 <shapr> heh, smalltalk is relatively inoffensive
19:57:16 <shapr> if you stare at it for a few minutes, it becomes clear
19:57:24 <kev_> lament: people say that same thing about lisp
19:57:28 <jmalicki-work> kev_: its not that far off from haskell :)
19:57:31 <lament> yes, lisp is also beautiful :)
19:57:31 <kev_> shapr: you shouldn't have to do that wil a language though
19:57:33 <shapr> now something fun like Joy... that's worth studying.
19:57:47 <shapr> kev_: oh c'mon... programming is an unnatural act to begin with.
19:57:50 <shapr> :-P
19:57:55 <jmalicki-work> shapr: you must not program in C :)
19:57:58 <lament> smalltalk, lisp and haskell are all quite beautiful, each in a different way
19:57:59 <kev_> if you want a language that's usable, it's helpful if it's human readable
19:58:15 <lament> kev_: smalltalk is the second most "readable" language I know
19:58:24 <lament> kev_: but in any case, that's totally subjective
19:58:28 <shapr> jmalicki-work: I've only written C a few times, didn't like it much.
19:58:44 <kev_> we don't need to save bytes by chopping out whitespace and shorting variable names these days
19:59:01 <lament> kev_: what does that have to do with anything?
19:59:01 <jmalicki-work> heh
19:59:08 <jmalicki-work> lament: the s's and e's above
19:59:20 <kev_> yep
19:59:30 <kev_> which is just totally incomprehensibly
19:59:33 <shapr> I think # means "send a message"
19:59:38 <lament> no
19:59:39 <kev_> if they were words at least, it might help
19:59:45 <lament> #() is an array
19:59:49 <shapr> ah
19:59:52 <kev_> case in point ;)
20:00:06 <shapr> I want to learn Smalltalk at some point
20:00:11 <lament> shapr: do it!
20:00:15 <lament> it's very, very nice
20:00:23 <shapr> well, logic/constraint is on my list after Haskell
20:00:24 <kev_> from what i've seen of lisp, it's parenthesis all the way, no?
20:00:30 <jmalicki-work> kev_: yes
20:00:32 <shapr> it's mostly parens
20:00:37 <shapr> simple enough though
20:00:42 <jmalicki-work> kev_: (* (+ x y) 2)
20:00:42 <shapr> scheme is rather elegant
20:00:46 <shapr> elisp is hackish but workable
20:00:49 <lament> kev_: parens are one of the reasons why lisp is good
20:01:06 <shapr> yah, the parens make lisp very close to an AST in text
20:01:11 <shapr> I like that about it
20:01:32 <jmalicki-work> i hate ASTs
20:01:35 <shapr> plus prefix ops mean you don't worry about op precedence
20:01:35 <jmalicki-work> thats why i hate lisp
20:01:36 <jmalicki-work> ;)
20:01:38 <shapr> I rather like ASTs
20:01:46 <jmalicki-work> i prefer parse trees
20:01:55 <jmalicki-work> saying AST makes you sound like you have a stick up your ass :)
20:02:05 <shapr> really?
20:02:06 <shapr> hmm
20:02:25 <shapr> ever tried Joy?
20:02:28 <jmalicki-work> no
20:02:35 <shapr> I'm fond of Joy...
20:02:42 <jmalicki-work> i haven't been an extreme polyglot
20:02:46 <shapr> postfix, stack-based, purely functional, concatenative
20:02:54 <lament> don't 'ast' and 'parse tree' mean the same thing?
20:02:59 <jmalicki-work> lament: yes :)
20:03:00 <shapr> I thought so
20:03:03 <lament> heh.
20:03:16 <lament> sanity check :)
20:03:17 <jmalicki-work> lament: i'm sure someone well schooled can find that AST means something more precise or some shit :)
20:03:27 <kev_> ah, okay, well that explains what an AST is ;)
20:03:28 <shapr> I haven't had any school....
20:03:33 <jmalicki-work> kev_: :)
20:03:34 <shapr> so I'm out :-)
20:03:45 <lament> shapr: neither have I, but I have a dictionary
20:03:46 <jmalicki-work> concatenative?
20:03:49 <kev_> I thought I'd missed out on 20 years of computing or something ;)
20:03:52 <jmalicki-work> hehehe
20:04:04 <kev_> tbh, I'd rather my code wasn't like a parse tree
20:04:08 <shapr> jmalicki-work: yah, the meaning of the space char in Joy is like the dot char in Haskell
20:04:10 <kev_> when it's written down
20:04:21 <shapr> but it almost always is.
20:04:51 <lament> lisp code is not 'like a parse tree'
20:04:54 <shapr> jmalicki-work: in fact, the dot in Joy means the same as space in Haskell.
20:04:54 <lament> it IS a parse tree :)
20:04:59 <kev_> the one thing I really like about python is the formatting it's got
20:05:08 <shapr> (* x y percent approxEqual *)
20:05:08 <shapr> DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .
20:05:16 <kev_> it's formatting is enforced, and it's readable
20:05:22 <shapr> that's an approxEqual function I wrote in Joy
20:05:25 <lament> kev_: Hm, when I said smalltalk is the second most readable language i know
20:05:35 <lament> kev_: Python is the first :)
20:05:44 * kev_ loves python
20:05:52 * shapr loves python also
20:05:54 <kev_> I'm sure some day I'll end up hating it, but hey...
20:06:05 <shapr> I would have stayed with Python as my primary language if Tismer and Guido had gotten it together :-(
20:06:07 * jmalicki-work has never had a chance to play with it yet
20:06:14 <shapr> oh well
20:06:14 <kev_> jmalicki-work: it'
20:06:17 <kev_> it's very very handy
20:06:17 <lament> who's Tismer?
20:06:20 <jmalicki-work> im thinking of rewriting some half-done test frame works in python
20:06:22 <kev_> esp for sysadmin stuff
20:06:27 <shapr> Christian Tismer, author of Stackless Python
20:06:30 <lament> oh.
20:06:53 <shapr> but Guido didn't want stackless in core Python
20:06:55 <kev_> Totally removes any need for perl, thank god
20:07:02 <shapr> so I went looking for greener pastures.
20:07:03 <jmalicki-work> kev_: :)
20:07:39 <kev_> python and .net could be very nice, if they'd work together
20:07:53 <jmalicki-work> kev_: is there not a python.NET already?
20:07:56 <kev_> esp if some .net alternative could be rigged up on unix
20:08:01 <kev_> jmalicki-work: prolly, never played with any of it
20:08:02 <jmalicki-work> kev_: mono
20:08:03 <kev_> not had time
20:08:06 <kev_> jmalicki-work: yep
20:08:19 <shapr> so, what's the downside of XP again?
20:08:22 <jmalicki-work> when .NET launched they had like 32 langauges ported or something
20:08:31 <kev_> and python's persistant object stuff combined with redundancy would be amazing
20:08:35 <jmalicki-work> shapr: the big one is its only appropriate for small projects
20:08:46 <shapr> jmalicki-work: less than forty people?
20:08:51 <jmalicki-work> shapr: and convincing PHB's to let you do it is tough
20:08:55 <jmalicki-work> shapr: more like less than 10
20:09:01 <shapr> I think less than forty
20:09:06 <shapr> have you tried XP with more than 10?
20:09:12 <jmalicki-work> shapr: i've seen 5 is the taget number for XP
20:09:13 <kev_> I think they state specifically on the xp site, don't try this with more than 10 people
20:09:20 <shapr> really? where?
20:09:21 <jmalicki-work> kev_: i've seen the same thing
20:09:32 <shapr> show me
20:09:40 <lament> they also probably say that a project with more than 10 people is doomed, somewhere :)
20:09:51 <jmalicki-work> lament: yes, they do, in fact :)
20:10:00 <jmalicki-work> lament: they even say keep it to 5 if it all possible
20:10:14 <shapr> I'd say four
20:10:24 <kev_> http://www.extremeprogramming.org/when.html
20:10:26 <shapr> but I'd still like to see the target number for XP mentioned somewhere.
20:10:31 * shapr looks
20:10:35 <kev_> there was a better one than that though
20:10:48 <shapr> heh
20:10:51 <kev_> the '30' just seems like marketing's taken hold to me
20:11:02 <kev_> kinda like the php nightmare
20:11:06 <lament> id software is 17 people, and not all of them are programmers
20:11:16 <jmalicki-work> a lot of this may come from agileprogramming.org too.... since its an umbrella term
20:11:20 <jmalicki-work> i think thats the site?
20:11:20 <lament> and games like quake3 and doom3 are hardly small projects :)
20:11:25 <shapr> thief was written by four people in one year, one of which was the programmer
20:11:29 <kev_> lament: and they're all work addicts ;)
20:11:54 <jmalicki-work> kev_: well, that pages says more like "some crackhead did this, but god knows why" is what it sounds like to me :)
20:11:57 <lament> shapr: thief is a mod though, isn't it?
20:11:58 <kev_> anyway, games really aren't that complicated in comparison to most software
20:12:13 <kev_> :)
20:12:15 <jmalicki-work> lament: a lot of that work is graphic design and shit too
20:12:27 <jmalicki-work> lament: if you consider the engine to be one project, and levels another etc
20:12:29 <shapr> lament: I think it does use one of the quake engines
20:12:38 <lament> jmalicki-work: that's why id software has 17 people, and not 3
20:12:39 <shapr> though heavily redone
20:12:43 <kev_> for games, you're not dealing with dynamic data and the real world, which makes life so much more easy
20:13:00 <jmalicki-work> yeah, anytime when you have a closed system things are easier :)
20:13:07 <lament> dynamic data?
20:13:27 <kev_> lament: well, you've not got some messy lump of data from some other department that you've got to integrate with
20:13:38 <lament> heh.
20:13:51 <kev_> which is where most of the software nightmares I've seen come from
20:14:26 <kev_> trying to write software to deal with structures that aren't fixed and keep growing
20:14:40 <shapr> sounds like you need an agile methodology
20:14:42 <shapr> like XP
20:14:45 <shapr> :-P
20:14:48 <kev_> again, another reason I like python
20:15:01 <lament> dynamic typing?
20:15:12 <shapr> Haskell has compile-time dynamic typing ;-)
20:15:15 <kev_> lament: tearing your code apart when you have to ;)
20:15:20 <lament> heh.
20:15:28 <kev_> python's great for gluing stuff
20:15:44 <shapr> ok, it sounds like software is better done by small teams
20:15:55 <shapr> and we all know that convincing PHBs of anything is hard
20:16:01 <lament> shapr: most things are better done by small teams
20:16:02 <kev_> not that that's the real solution, again that's not gonna scale too well, but it works
20:16:03 <shapr> so, aside from that, what downsides does XP have?
20:16:05 <lament> shapr: except when it's impossible
20:16:34 <shapr> I've had trouble convincing PHBs to use switches instead of ten cascaded repeater hubs
20:16:45 <kev_> PHBs?
20:16:53 <shapr> pointy haired bosses
20:16:58 <shapr> a dilbert reference
20:17:09 <jmalicki-work> kev_: like a boss with a stick up his ass about corporate procedure, etc
20:17:17 <kev_> i had a PHB who hired someone because they had XP on their CV
20:17:19 <kev_> *shudder*
20:17:22 <shapr> scary
20:17:37 <kev_> shapr: it's the latest thing to hire for apparently
20:17:41 <shapr> even worse
20:17:50 <kev_> it was PHP a few years ago
20:17:52 <kev_> now XP
20:17:58 <jmalicki-work> shapr: PHB's also like paperwork etc etc , which can make them not like XP
20:18:08 <shapr> I'd like to be hired because I'm willing to look carefully at how I do things, and try to make that process improve
20:18:09 <jmalicki-work> shapr: its , well,extreme, and they can find it offensive
20:18:22 <jmalicki-work> shapr: you know, they like progress reports and procedure and shit :)
20:18:27 <shapr> yah, I know
20:18:33 <shapr> I send them unit test output
20:18:33 <jmalicki-work> shapr: so that way they can convince themselves they understand
20:18:41 <jmalicki-work> with XPs, its more like magic happening underneath them
20:18:41 <shapr> saying "here's what works"
20:18:47 <kev_> jmalicki-work: I dunno, there's certainly a lot of small companies out there with bosses of the belief that "we're doing this radical XP thing, it's cutting edge and we're open minded"
20:18:48 <jmalicki-work> they wouldnt know what to do with that :)
20:18:52 <shapr> and spike solutions saying "here's what we know how to do"
20:19:06 <jmalicki-work> kev_: then they don't have pointy-hair, by definition :)
20:19:16 <kev_> jmalicki-work: no, they have it growing ;)
20:19:40 <jmalicki-work> kev_: PHB strongly implies closedmindedness i think :)
20:19:45 <shapr> I was given a micro-powerpoint project to do in Java 1.3 some weeks after several people had been working on it
20:19:47 <lament> the opposite of a PHB -- long haired boss? :)
20:19:48 <jmalicki-work> at least i think
20:19:51 <jmalicki-work> lament: haha
20:20:02 <kev_> jmalicki-work: I was being cynical about what they were saying though
20:20:03 <shapr> they finally let me use Jython after months of me asking
20:20:11 <jmalicki-work> oh hehehe
20:20:12 <shapr> so I rewrote it entirely test-driven in one week
20:20:26 <kev_> "We're open minded because we're doing this thing we read in a business manager rag which said, do this, it'll make you open minded"
20:20:38 <jmalicki-work> hehehe
20:20:39 <shapr> and added most of the requested features at the same time
20:20:57 <shapr> then they said they had decided against Jython, since it wasn't Java :-((
20:21:05 <kev_> shapr: thing is, once you get to the stage where you can totally rewrite stuff, that's you at the easy bit ;)
20:21:21 <shapr> kev_: the code I was given did less than nothing.. it didn't even compile
20:21:29 <jmalicki-work> shapr: sometimes that kind of stuff makes sense, i.e. "we want to be able to hire someone to maintain this"
20:21:39 <kev_> yep
20:21:45 <shapr> it was also a zip file, the other guys couldn't use CVS after repeated lessons from me
20:21:50 <emu> maintainence is easy then.. all you have to do is maintain its nonworking state
20:21:56 <shapr> hah
20:22:05 <jmalicki-work> dammit
20:22:07 <kev_> mind you, it could all be worse
20:22:12 <kev_> last large project I wrote was in php
20:22:17 <jmalicki-work> we have a programmer who checks in .jar's without source until prodded
20:22:18 <emu> plus just say Java or XML whenever they ask you a question
20:22:19 <jmalicki-work> hehe
20:22:20 <emu> guarenteed job
20:22:22 <kev_> a _systems_ project in php
20:22:26 <shapr> my code was one file, three classes and ~400 lines including tests.
20:22:26 <jmalicki-work> kev_: ?
20:22:28 <kev_> client server php
20:22:32 <jmalicki-work> jesus
20:22:34 <kev_> indeed
20:22:45 <kev_> but hey, at least I got to write the win32 daemons in perl
20:22:51 <jmalicki-work> :)
20:22:56 <kev_> although I got shit for that because they weren't in asp
20:23:04 <kev_> *shudder*
20:23:08 <kev_> did I mention that I quit? ;)
20:23:08 <emu> wow that's really funy
20:23:28 <shapr> I couldn't persuade my bosses that Jython was Python written in Java, and simpler than Java :-/
20:23:58 <kev_> shapr: jython and java are worlds apart
20:23:59 <jmalicki-work> WOAH
20:24:03 <jmalicki-work> www.techsunite.org
20:24:05 <shapr> kev_: how so?
20:24:07 <kunphuzil> hrm.. i don't understand how/why someone would want to compile native haskell code into C? i mean, 1) would some of the things not work? and 2) uh.. there is only reason number one :P
20:24:10 <jmalicki-work> CWA is unionizing IT people
20:24:13 <kev_> shapr: one's pythong, the other's java
20:24:27 <kev_> jmalicki-work: nice
20:24:30 <emu> perhaps the best reason to compile into C is to use the gcc backend
20:24:32 <jmalicki-work> kunphuzil: haskell is almost always compiled into C
20:24:36 <jmalicki-work> kunphuzil: thats what ghc does
20:24:42 <kunphuzil> oh
20:24:44 <kev_> can we get our red flags out now?
20:24:44 <kunphuzil> why?
20:24:49 <shapr> kev_: how long you think it takes a programmer to learn python?
20:24:51 <jmalicki-work> kunphuzil: that way the ghc people dont worry about low-level optimization for a specific processor
20:24:59 <jmalicki-work> kunphuzil: they use C as a portable assembler more or less
20:25:04 <kev_> shapr: that's not really the point
20:25:10 <shapr> it should be
20:25:12 <kev_> you can't find python programmers on the street
20:25:15 <kunphuzil> hmm
20:25:17 <shapr> make your own
20:25:27 <kunphuzil> but haskell is function and C is not..
20:25:28 <jmalicki-work> shapr: its just risk-mitigation
20:25:28 <kev_> managers don't want that, and for valid reason
20:25:35 <kunphuzil> shapr: hm.. my friend is learning python
20:25:40 <shapr> python is nice
20:25:41 <kev_> you can't just pay 40 pounds to get someone to patch your program
20:25:43 <jmalicki-work> shapr: sure you can do it, but why?
20:25:47 <kev_> if you need to train someone
20:25:49 <emu> kunphuzil: you can implement closures and etc in C
20:26:07 <kunphuzil> then why not just use C if you are going to convert it to C?
20:26:12 <jmalicki-work> kunphuzil: yeah, you just wouldn't WANT to implement closures... they wouldn't be syntactically transparent
20:26:13 <shapr> jmalicki-work: because I can write the same program in one-third of the lines of code, and one-quarter of the time of the matching Java program
20:26:16 <emu> because it's a fucking pain in the ass to write it in C
20:26:28 <jmalicki-work> shapr: yes. and its still cheaper for the company to have you do it in java
20:26:35 <emu> kunphuzil: usually *->C compilers compile into C as a stage
20:26:39 <shapr> I disagree.
20:26:46 <shapr> but then, I have a job writing Python.
20:26:53 <kev_> shapr: it's not something you can disagree on
20:26:55 <kev_> it's simple
20:27:02 <kunphuzil> shapr: cool
20:27:07 <kev_> hire a java coder for a debug/patch session
20:27:10 <jmalicki-work> shapr: its the basic principle of "use commodity parts"
20:27:16 <kev_> costs you maybe $150
20:27:19 <jmalicki-work> shapr: java is a commodity part. python is not
20:27:20 <kunphuzil> emu: as a stage?
20:27:25 <kev_> train up a python coder and have them work on it, a lot more
20:27:28 <emu> shapr: the problem with java is that it lacks decent abstraction facilities, which is why it gets so much code bloat
20:27:41 <jmalicki-work> shapr: it may make sense sometimes to use python, but thats a much bigger risk for a company to take
20:27:52 <shapr> I still disagree
20:27:56 <jmalicki-work> shapr: if the company doesn't care, they decide not to take the risk of using non-commodity parts
20:28:02 <kev_> shapr: you _can't_ disagree
20:28:04 <jmalicki-work> shapr: you're also a programmer, not an MBA :)
20:28:08 <shapr> a) test-driven python code is far less likely to have bugs than consumer quality java code
20:28:18 <kev_> shapr: this is for a piece of software that's already written
20:28:21 <jmalicki-work> shapr: perhaps. but thats not the issue
20:28:23 <kev_> what's cheaper to fix? a or b?
20:28:32 <jmalicki-work> shapr: perhaps your solution is BETTER... but the other solution is a COMMODITY
20:28:33 <emu> kunphuzil: for example, ECL compiles CL to C and then compiles that with gcc and loads the shared object into the running environment. I suspect ghci does something similar if it does convert to C.
20:28:33 <kev_> a being the java program, b being the python one?
20:28:41 <kev_> jmalicki-work: exactly
20:28:58 <kunphuzil> emu: oh
20:28:59 <shapr> I'd say B is cheaper to fix
20:29:09 <kev_> it's a case of balanacing all your costs, and dancing better than the competition
20:29:12 <shapr> but then, I know a gazillion Python programmers who'd love to get work doing Python.
20:29:17 <kev_> shapr: not if you can't hire a python programmer
20:29:18 <shapr> in that case, I'd use Haskell.
20:29:22 <jmalicki-work> shapr: like why embedded systems often use x86 hardware.. you could find better hardware, but why when PC stuff has a much bigger market etc?
20:29:25 <shapr> but you can hire Python programmers.
20:29:30 <kev_> shapr: not easily
20:29:38 <lament> fun.
20:29:42 <jmalicki-work> shapr: there are 100 java programmers for every python one :)
20:29:45 <jmalicki-work> if not more
20:29:46 <kev_> you can't go to the job centre, post and ad and get an employee in a day or so
20:30:11 <emu> and how many of them can't program worth a dime?
20:30:13 <kev_> if I wanted a java program fixed, I can flick open the phone book and I've got someone
20:30:20 <kev_> emu: doesn't matter, it's a contract job
20:30:25 <kev_> get a quote, get it fixedc
20:30:28 <jmalicki-work> emu: commodity parts are often shittier.. but they're commodity
20:30:29 <emu> ``worth a dime''
20:30:31 <lament> So many python programmers wanting a job, and no one hires them because, in effect, there're not enough python programmers.
20:30:41 <kev_> lament: exactly :)
20:30:42 <jmalicki-work> lament: well, you're stuck within a community
20:30:44 <shapr> I still disagree.
20:30:47 <jmalicki-work> lament: someone has to take leadership
20:31:05 <shapr> but then, I'm planning on using Haskell for my future commercial developement when I get the chance
20:31:07 <kev_> atm I'm glad that for my current job we do do python
20:31:09 <jmalicki-work> shapr: whether or not you're right isn't what's at issue.. merely that they weren't necessarily dumb for doing so
20:31:22 <kev_> mainly because the decisions are all being made by a techie
20:31:25 <jmalicki-work> shapr: to use python is to take a risk and to take leadership
20:31:32 <kev_> and we have a small number of python programmers available
20:31:38 <jmalicki-work> shapr: it may be better, but its a commitment to doing something nonstandard
20:31:39 <shapr> jmalicki-work: I understand that
20:31:45 <emu> amazing the python advocacy on haskell channel
20:31:55 * emu ducks swiftly
20:32:00 <shapr> well, given the choice between Python and Java to do paying work...
20:32:00 <kev_> emu: we love haskell, but it doesn't pay ;)
20:32:03 <jmalicki-work> shapr: and you wont do that for a simple program. if you're going to use python because its better, you'll do it on a wider scale
20:32:09 <shapr> I'd like to do paying Haskell work
20:32:13 <emu> it's such a different language
20:32:14 <shapr> we needs some freakin libs
20:32:19 <jmalicki-work> shapr: and you'll have it led by a senior developer, not by a junior contract programmer
20:32:27 <jmalicki-work> shapr: SyntaxPolice has a commercial haskell job
20:32:32 <lament> emu: we're not talking python vs. haskell, we're talking pytho vs. java :)
20:32:35 <lament> *python
20:32:35 <shapr> I know, I wanted to work with him ;-)
20:32:49 <shapr> but I'm not willing to move back to the states to get a Haskell job.
20:32:54 <jmalicki-work> shapr: you don't want to work in columbus ;)
20:32:54 <emu> oh I see, even more on topic
20:32:58 <emu> hehee
20:33:01 <emu> i love it
20:33:07 <shapr> which is too bad, the job sounds very cool
20:33:22 <kunphuzil> Hmmm... in YAHT they left out a whole section :P
20:33:29 <kunphuzil> If anyone has it on hand, open page 16
20:33:29 <shapr> kunphuzil: which section?
20:33:30 <kev_> tbh, I'm glad my job isn't using something academic like haskell
20:33:38 <kunphuzil> shapr: 2.3
20:33:40 <kev_> it's nice to have a job that keeps you on your toes
20:33:48 <jmalicki-work> haskell would be cool if you were big enough to have a tools dept
20:33:51 <emu> haskell doesn't keep you on your toes?
20:33:51 <shapr> if I had an NNTP lib for Haskell, I could have done my first commercial work with Haskell recently
20:33:54 <jmalicki-work> to develop the language and tools itself
20:33:55 <kev_> and get to play with the academic stuff as an interest
20:34:04 <jmalicki-work> but if you cant afford to write tools, it sounds iffy to me tbh
20:34:16 <kev_> emu: if you want to play with academic stuff as an interest, you're not going to get paid for it
20:34:25 <kev_> if it's academic, you can't use it
20:34:35 <emu> why does it have to be academic?
20:34:44 <shapr> kunphuzil: yup, zero NHC docs...
20:34:51 <kev_> emu: the more interesting stuff usually is
20:34:52 <shapr> kunphuzil: imho, not a big deal at the moment
20:34:58 <jmalicki-work> emu: haskell is for all practical purposes academic
20:35:00 <shapr> NHC was designed to be extremely portable
20:35:03 <kunphuzil> shapr: yeah, i wasn't planning on using it anyway
20:35:07 <jmalicki-work> emu: it may be breaking out, but its still pretty out there
20:35:07 <shapr> GHC is difficult to port
20:35:10 <kev_> even ML is totally academic
20:35:14 <kev_> despite what some people claim ;)
20:35:16 <emu> sure, but isn't the point of academia to come up with good ideas? and wouldn't industry be interested in good ideas?
20:35:19 <shapr> well, let's write some libs
20:35:22 <shapr> then we can make some money
20:35:23 <lament> kev_: ML might be academic
20:35:29 <lament> kev_: but F#.NET is the latest buzzword!
20:35:31 <lament> :)
20:35:33 <kunphuzil> so.. if I want to get a job in programming I have to use all the sucky langs like C and Java? :P
20:35:35 <kev_> emu: yes, so you play with the academic stuff and work in industry ;)
20:35:39 <lament> kunphuzil: Yes.
20:35:41 <emu> it's all about mindset really, I think
20:35:42 <jmalicki-work> emu: oh sure.. but for instance there isnt real corporate backing behind haskell
20:35:46 <shapr> some of my jobs don't care about the code that I write, as long at it completes a task and they get the results of the task
20:35:59 <emu> you could simply just give up at it
20:36:01 <shapr> Python doesn't have corporate backing either
20:36:03 <shapr> nor does Perl
20:36:05 <jmalicki-work> emu: like, say, if Rational decided haskell was the next big thing(tm) and devoted resources to it, that would change EVERYTHING
20:36:10 <kev_> shapr: perl does
20:36:13 <shapr> really?
20:36:14 <jmalicki-work> shapr: perl does
20:36:14 <shapr> who?
20:36:17 <jmalicki-work> shapr: ActiveState
20:36:24 <kev_> shapr: any unix vendor?
20:36:26 <jmalicki-work> i think thats their name?
20:36:27 <shapr> they're not really corporate backing
20:36:35 <emu> even if you're not successful, at least don't assume failure before you start
20:36:38 <shapr> yah, really
20:36:41 <lament> ActiveState back Python too
20:36:46 <jmalicki-work> lament: ah
20:36:55 <lament> http://www.activestate.com/Products/ActivePython/
20:36:55 <shapr> I can make money with Haskell if I have more libs
20:37:00 <shapr> you guys can too
20:37:01 <jmalicki-work> shapr: ActiveState makes a big difference for perl
20:37:05 <kunphuzil> shapr: how?
20:37:09 <jmalicki-work> shapr: as well as unix vendors shipping it
20:37:10 <shapr> kunphuzil: get contract work
20:37:18 <kev_> shapr: I'd still rather not
20:37:27 <kunphuzil> shapr: i see.. they don't care which lang you use, just as long as you get it done? am i right?
20:37:32 <kev_> I try and avoid any sort of purity for paid stuff
20:37:33 <shapr> kunphuzil: for example, a client wants me to dump the contents of a private nntp server into a database
20:37:41 <shapr> can be done with Haskell, if there's an nntp lib
20:37:55 <jmalicki-work> shapr: so write an nntp lib
20:37:58 <shapr> client does not care which lang is used, nor which platform, as long as it's done.
20:38:07 <kunphuzil> is Haskell a good lang to learn functional programming?
20:38:08 <kev_> yeah, writing an nntp lib isn't really that hard
20:38:15 <shapr> jmalicki-work: sadly, this is a case where I don't have time to write an nntp lib, it has to be done on tuesday.
20:38:24 <shapr> kunphuzil: imho, the best lang to learn Functional Programming
20:38:33 <kunphuzil> ok, cool
20:38:33 <emu> well, isn't Haskell /the/ Function Programming Language?
20:38:34 <kev_> right, I'm off to bed
20:38:36 <emu> hehe
20:38:38 <kev_> night folks
20:38:42 <kev_> it's 5am
20:38:42 <emu> functional that is
20:38:46 <jmalicki-work> scheme is arguably easier to learn
20:38:47 <shapr> g'nite kev_
20:38:47 <jmalicki-work> night
20:38:50 <kev_> oh, actually
20:38:53 <kev_> 10 mins more
20:38:55 <emu> I mean, it's pure after all
20:38:59 <kev_> this box has reinstalled, finally
20:39:05 <kunphuzil> and, which is the reccemended editor for writing haskell?
20:39:10 * emu uses emacs
20:39:12 <shapr> kunphuzil: I'd suggest emacs
20:39:13 <jmalicki-work> i use echo
20:39:19 <kunphuzil> jmalicki-work: lol
20:39:19 <emu> there are those who stand by ed
20:39:28 <jmalicki-work> whats that cartoon
20:39:30 <emu> but they have BO
20:39:34 <shapr> kunphuzil: in my opinion, emacs is a journey unto itself.
20:39:40 <jmalicki-work> the girl walks up "well, i wave a magnet over my disk to edit files"
20:39:54 <kunphuzil> emu: lol
20:39:56 <shapr> kunphuzil: though I'd be happy to help you with it if you wish to learn.
20:39:58 <emu> jmalicki-work: that would make her a Real Programmer (tm)
20:40:06 <shapr> I've written some stuff on the EmacsWiki
20:40:18 <jmalicki-work> wikis scare the living shit out of me
20:40:22 <shapr> why?
20:40:29 <kunphuzil> jmalicki-work: that cartoon sounds funny
20:40:33 <jmalicki-work> they're just spooky
20:40:35 <shapr> they're just a totally editable page with about six formatting rules
20:40:36 * emu wonders why there is shit living in jmalicki-work 
20:40:49 <shapr> I'm a resident on a very large number of wikis
20:40:50 <jmalicki-work> emu: you know, tapeworms and all that
20:40:53 * kev_ can't stand wiki's
20:40:59 <kev_> but hey
20:41:01 <kunphuzil> uh.. what should i `apt-get' to install emacs?
20:41:05 * shapr checks to see if he's in the right irc channel
20:41:07 <jmalicki-work> kunphuzil: apt-get xemacs
20:41:08 <shapr> kunphuzil: yup
20:41:14 <shapr> kunphuzil: I would recommend that you start with xemacs
20:41:27 <shapr> it's easier to begin with
20:41:29 <jmalicki-work> there are those who like GNU emacs... but they're wrong ;P
20:41:31 <kev_> I'd recommend you start with vim, but hey... ;)
20:41:33 <lament> shapr: how can you like Python, Haskell and *gasp* emacs? :)
20:41:37 <emu> i use gnu emacs, but i don't know why
20:41:41 <shapr> lament: I love programming.
20:41:53 <emu> heh, there are few better editors than emacs
20:41:59 <shapr> are there any?
20:42:02 <kev_> emu: I can name one ;)
20:42:03 <shapr> I haven't found them
20:42:06 * emu can too
20:42:12 <shapr> tell me!
20:42:22 <emu> however they only existed on the lisp machines
20:42:25 <shapr> oh
20:42:25 <jmalicki-work> shapr: edlin.exe
20:42:31 <kev_> edit.com
20:42:35 <shapr> debug.com
20:42:42 <jmalicki-work> shapr: isnt debug a .exe?
20:42:54 <shapr> you must be using a new fangled version of DOS
20:43:04 <shapr> back in my day, debug was far less than 64k
20:43:08 <jmalicki-work> shapr: in 3.x even i thought?
20:43:16 <jmalicki-work> shapr: maybe, but i thought it was still an EXE :)
20:43:19 <kev_> debug was always an exe afair
20:43:23 <emu> shapr: just imagine, a graphical environment with a decent programming language backing it, that is written all the way down to the core in that language and is debuggable and inspectable all throughout! and of course there's an editor
20:43:40 <shapr> emu: you're talking about Squeak? ;-)
20:43:43 <lament> heh
20:43:45 <shapr> or Oberon ;-)
20:43:45 <jmalicki-work> emu: emacs is an OS :)
20:43:50 <emu> lisp machines
20:43:51 <shapr> Oberon rocked
20:43:52 <kev_> actually, I'm surprised there aren't more languages that have a graphical editor as part of the language
20:43:54 <kunphuzil> hmm
20:43:58 <shapr> it was so fast
20:44:00 <lament> emu: well, you just described Squeak
20:44:00 <kunphuzil> i am getting a broken packages error
20:44:03 <emu> i know
20:44:03 <jmalicki-work> emu: emacs just happens to run on a unix microkernel :)
20:44:06 <emu> that's why I like Squeak too
20:44:06 <shapr> kunphuzil: tell me more
20:44:11 <kev_> or at least, languages where you're not editing ascii text for the code
20:44:14 <emu> except Squeak doesn't do lowlevel OS functions
20:44:23 <emu> jmalicki-work: these did not run Unix
20:44:25 <jmalicki-work> kev_: UML code generation is pretty cool
20:44:27 <shapr> I'd like to see an OS written in Haskell
20:44:31 <kunphuzil> leetdebian:/home/kunphuzil# apt-get install xemacs21
20:44:39 <kunphuzil> Some packages could not be installed. This may mean that you have
20:44:39 <kunphuzil> requested an impossible situation or if you are using the unstable
20:44:39 <kunphuzil> distribution that some required packages have not yet been created
20:44:39 <kunphuzil> or been moved out of Incoming.
20:44:40 <lament> I would like emacs more if it used a good programming language
20:44:41 <shapr> as soon as Chilli adds MPI support to Nepal
20:44:42 <jmalicki-work> shapr: have you seen vapour? its a cool lisp OS
20:44:45 <kev_> jmalicki-work: I try and avoid UML purely because it scares me
20:44:46 <lament> elisp is hardly a good programming language
20:44:48 <emu> yeah, emacs lisp blows
20:44:51 <shapr> jmalicki-work: know the guys who were working on it
20:44:53 <emu> stupid stallman
20:44:58 <shapr> friend of mine wrote miasma
20:45:07 <kunphuzil> lisp == not good?
20:45:10 <emu> no
20:45:11 <jmalicki-work> kev_: i mean its cool in theory that you can like program in visio by drawing graphs :)
20:45:12 <emu> emacs lisp == not good
20:45:15 <shapr> programming == good
20:45:15 <emu> lisp == neato
20:45:21 <kunphuzil> emu: oh, i see
20:45:22 <jmalicki-work> shapr: Zhivago rawks
20:45:30 <shapr> jmalicki-work: you know demoncrat?
20:45:39 <jmalicki-work> i think ive run across him before
20:45:43 <jmalicki-work> not in a LOONg time though
20:45:51 <shapr> he's well worth knowing.
20:45:54 <shapr> very much so
20:46:00 <shapr> I've done pair programming with him
20:46:24 <shapr> he spent the weekend at my apartment once long ago...
20:46:28 <jmalicki-work> heh
20:46:39 <shapr> kunphuzil: try apt-get -uf install xemacs21-mule
20:46:55 <shapr> speaking of which, I need to send him an email and see how he's doing
20:47:19 <shapr> btw, I'm fond of emacs... it even my irc client
20:47:20 <shapr> I'm using ERC Version 3.0 $Revision: 1.357 $ with XEmacs 21.4 (patch 10) "Military Intelligence" XEmacs Lucid!
20:47:56 <shapr> lament: we need HaMacs that works like PyMacs
20:48:01 <shapr> PyMacs rocks
20:48:05 <lament> PyMacs?
20:48:10 <jmalicki-work> i wish elisp had a JIT
20:48:16 <jmalicki-work> i mean, emacs would be much less slow
20:48:18 <emu> zmacs
20:48:29 <lament> "Pymacs is a powerful tool which, once started from Emacs, allows both-way communication between Emacs Lisp and Python. "
20:48:30 <lament> gah, evil
20:48:35 <kunphuzil> what is PyMacs? python emacs?
20:48:39 <emu> like python is any better at speed haha
20:48:41 <shapr> lament: PyMacs rocks
20:48:41 <lament> i hoped it would be an editor scripted in Python
20:48:49 <shapr> emu: Python is much faster than elisp
20:48:53 <shapr> lament: it is!
20:48:59 <lament> shapr: no
20:49:00 <emu> probably so, but CL is even faster! ;)
20:49:03 <shapr> you can do (import os) in emacs!
20:49:04 <kunphuzil> is python a functional language?
20:49:04 <lament> shapr: it's an emacs shell
20:49:10 <lament> kunphuzil: not really
20:49:12 <kev_> kunphuzil: no
20:49:22 <shapr> kunphuzil: python has some functional bits and pieces
20:49:22 <kunphuzil> is it lazy or strict?
20:49:25 <kev_> it's got some functional parts
20:49:31 <shapr> er..
20:49:34 <shapr> strict I guess
20:49:35 <shapr> sort of
20:49:36 <emu> only a pure functional language can be lazy sanely
20:49:37 <lament> kunphuzil: strict
20:49:41 <shapr> every language has some strict and some lazy parts
20:49:49 <kev_> it's eager, if that's what you mean
20:49:50 <lament> what lazy parts does python have?
20:49:52 <shapr> otherwise "if" wouldn't work
20:49:54 <kev_> but other than that, it's very loose
20:49:56 <lament> heh
20:50:05 <emu> lament: the people who were supposed to write the decent compiler and etc
20:50:14 <shapr> lament: PyMacs is effectively python in emacs
20:50:14 <emu> ;)
20:50:16 <kunphuzil> emu: lol
20:50:16 <lament> emu: ah :)
20:50:27 <shapr> it's extremely spiffy
20:50:28 <lament> shapr: it's still an emacs shell
20:50:30 <emu> I can do python in emacs
20:50:31 <lament> shapr: it requires emacs
20:50:35 <emu> comint-run ..
20:50:38 <shapr> that's true, it does.
20:50:38 <lament> shapr: i won't touch anything that requires emacs
20:50:40 <emu> I think there's even a special more for it
20:50:43 <emu> mode
20:50:44 <shapr> well, ok
20:50:50 <kev_> shapr: that's sick
20:50:57 <lament> shapr: Have you seen Edwin?
20:51:01 <shapr> I think it's rather elegant
20:51:05 <shapr> I'd like to see a Haskell version.
20:51:07 <kev_> no, really, it's sick
20:51:12 <lament> no, it's not elegant to hide complexity under more complexity
20:51:19 <kev_> people get hung for less in other countries
20:51:21 <kunphuzil> what is the `non-mule' binary for emacs?
20:51:29 <shapr> kunphuzil: it doesn't have multilingual support
20:51:32 <emu> mule turns emac into a mule
20:51:37 <emu> as opposed to a gnu
20:51:49 <kunphuzil> emu: funny man :P
20:52:01 <emu> they decided emacs was too fast
20:52:06 <shapr> with mule support, you can see this just fine: $(BF|K\8l(B
20:52:14 <lament> shapr: Have you seen Edwin?
20:52:18 <shapr> that was japanese...
20:52:23 <shapr> sounds familiar...
20:52:32 <lament> It's an Emacs clone written in Scheme
20:52:40 <shapr> oh
20:52:42 <lament> unfortunately, it's completely undocumented and abandoned
20:52:43 <shapr> yah I have heard of that
20:52:45 <emu> now stallman wants to switch to guile
20:52:54 <emu> can he ever do anything right?
20:53:00 <shapr> I've written some elisp
20:53:06 <shapr> I'd very much like to see guile in emacs
20:53:06 <emu> first he fucks up elisp
20:53:15 <shapr> elisp was a good solution at the time
20:53:19 <emu> as it's ``cure'' he proposes guile
20:53:20 <shapr> there weren't any free lisps
20:53:26 <kev_> emu: 100 thousand gnu kiddies can't be wrong
20:53:31 <emu> he could've strove to make it more compatible with CL
20:53:33 <kunphuzil> damnit, i don't know why i ever used Sid, (i think because of gnome2, which i don't even use now)
20:53:38 <lament> emu: what's wrong with guile?
20:53:42 <shapr> kunphuzil: I like sid :-)
20:53:50 <shapr> kunphuzil: still having problems?
20:53:50 <emu> (a) scheme (b) broken 
20:53:55 <kunphuzil> shapr: yeah
20:54:01 <lament> what's wrong with scheme? What's broken about guile?
20:54:06 <shapr> kunphuzil: tell me about them, hopefully I can help you.
20:54:18 <kunphuzil> shapr: well.. just broken packages. i dunno
20:54:26 <shapr> kunphuzil: have you updated recently?
20:54:44 <kunphuzil> maybe that is the prob
20:54:48 <shapr> could be
20:54:53 * kunphuzil hates updating on 28k8 :(
20:54:57 <shapr> yow
20:54:58 <emu> scheme can be used for practical things... but for all intents and purposes the language itself is very useless and small, and seems to oppose practical use
20:55:03 <kunphuzil> i hate downloading anything for that matter :P
20:55:09 <shapr> I update once a day
20:55:16 <shapr> update and upgrade
20:55:26 <shapr> of course, I have 512k dsl :-)
20:55:30 <emu> guile isn't a stellar implementation of scheme either
20:55:38 <kunphuzil> shapr: ah, fast
20:55:45 <shapr> decently so
20:55:56 <kunphuzil> i [hope i] am getting cable soon
20:55:59 <shapr> still would like more so my Counterstrike score would be better :-)
20:56:04 <emu> but feel free to find out for yourself
20:56:04 <kev_> ack, I remote reinstall this box which takes an hour, then on the second stage of my install script it hangs
20:56:09 <shapr> CS on linux, yay!
20:56:15 <kev_> shapr: tried natural selection?
20:56:19 <shapr> not yet
20:56:23 <kev_> it's v.good
20:56:28 <shapr> I have heeded your advice
20:56:29 <emu> shapr: are you a CS major?
20:56:37 <shapr> emu: you could put it that way
20:56:40 <kev_> lol
20:56:52 <shapr> as long as CS stands for CounterStrike
20:56:54 <emu> there are plenty of those and SC majors in the compsci dept
20:56:58 <kev_> shapr: they don't like CS players on NS btw, just so you know ;)
20:57:06 <shapr> why not?
20:57:19 <shapr> I'm a pretty good CS player.
20:57:20 <kev_> because they keep playing the game like it's CS
20:57:27 <emu> and now WCIII but anyway
20:57:32 <kev_> and it's a _very_ different game
20:57:51 <kunphuzil> I like bzflag :)
20:57:57 <lament> I don't.
20:58:04 <kunphuzil> Even though I suck, it is great fun
20:58:07 <shapr> kev_: so.. you up for working on a Haskell nntp lib this weekend?
20:58:18 <kev_> shapr: I don't know any haskell ;)
20:58:24 <shapr> good chance to learn
20:58:28 <kev_> I just turned up to try and find an ML user
20:58:35 <kev_> and I've got another ML practical to hand in on monday
20:58:38 <emu> I've used SML/NJ
20:58:39 <kev_> so too busy atm
20:58:44 <emu> or not
20:58:52 <kunphuzil> kev_: i am learning too
20:59:14 <emu> which ML?
21:00:08 <shapr> well
21:00:09 <kev_> emu: we use mosml at uni
21:00:34 <shapr> fun chat, though I dunno how useful it was :-)
21:00:59 <shapr> time for me to sleep
21:01:06 <kev_> shapr: when you're stuck doing a large project, you'll realise it's useful
21:01:07 <shapr> g'nite all
21:01:11 <kunphuzil> kev_: Smerdyakov is a fluent SML user i know of (on right now..)
21:01:13 <kev_> you'll heed the advice and get a better job ;)
21:01:14 <kev_> night
21:01:28 <kev_> kunphuzil: I don't really need any help atm
21:01:30 <kunphuzil> shapr: bye
21:01:40 <emu> hehe, adam used to be a big C++ fan
21:01:42 <kunphuzil> actually, i should leave also
21:01:46 <kev_> and me
21:01:47 <emu> then he switched to SML
21:01:48 <kev_> it's 5am
21:01:55 <kev_> this stuff with have reinstalled again by tomorrow
21:02:00 <kev_> night
21:02:03 <kunphuzil> emu: really? *grin*
21:02:10 <lament> Is there really such thing as big C++ fans?
21:02:26 <emu> well I seem to recall him being that way 2 years ago or so
21:02:34 <lament> I mean, of people who actually have a clue and know other languages
21:02:35 <jmalicki-work> lament: i've met one :)
21:02:44 <kunphuzil> emu: this could come in handy for some of the battles he has with C/C++ users in YPN :P
21:02:52 <emu> dont tell him i said that
21:03:31 <kunphuzil> emu: ok, but is it true?
21:04:17 <emu> I remember it, hazily, whether or not he'll admit to it is another matter
21:05:05 <emu> not that I would hold it against him
21:05:10 <emu> he learned his own way that C++ is evil
21:06:07 <kunphuzil> smerdy is very mean to a lot of people, i know some people who would hold it against him :P
21:06:26 <kunphuzil> in your opinion is smerdy very nice?
21:07:01 <emu> um
21:07:09 <emu> he's a bit prickly ;)
21:07:29 <emu> I don't mind, though
21:07:31 <kunphuzil> yeah
21:07:52 <kunphuzil> emu: when he says you have sucky programming skills you do
21:08:16 <emu> we always clash on lisp-vs-ml
21:08:20 <kunphuzil> and that you never intend to learn anything
21:08:56 <kunphuzil> he seems to aprove on me learning haskell, not that i care
21:13:31 <kev_> always shitty when you get people like that
21:13:40 <kev_> totally remove your enthusiasm for the field
21:13:59 * kev_ really is off to bed now
21:14:13 <emu> he means well I think
21:24:23 <jmalicki-work> oh, about RUP vs. XP: http://www.martinfowler.com/articles/newMethodology.html#N400315
23:20:04 <kunphuzil> hmmm.. ghc doesn't seem to have something in a tutorial is telling me to do, like toUpper, toLower and square..
23:20:19 <jmalicki-work> did you include the prelude, or whatever?
23:20:38 <kunphuzil> ? how do i do that?
23:20:46 <kunphuzil> it says:
23:20:54 <kunphuzil> Prelude> if thats what you mean
23:21:34 <kunphuzil> well, anyway. going to sleep......
23:21:54 * kunphuzil is away: slahpen stil
