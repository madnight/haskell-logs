02:54:58 <mgoetze> soo... anyone for go? :)
02:55:24 * radix doesn't go.
02:55:25 * radix leaves.
02:55:49 <mgoetze> radix: bye
02:56:02 * radix isn't really leaving.
02:56:06 * radix was just making a stupid joke.
02:56:27 <mgoetze> oh. to make up for it, you'll have to play go ;)
02:56:38 * radix flees.
02:56:42 <radix> sorry for the actions. :)
03:31:45 <rublik> :)
04:35:10 <steele> hi
04:35:38 <mgoetze> hi
04:51:29 <mgoetze> Marvin--: hiya
04:53:00 <Marvin--> afternoon
04:54:56 <mgoetze> Marvin--: wanna play? :)
04:55:37 <Marvin--> sorry, no, I've got some packing to do, visiting the parents over the weekend
04:56:21 <mgoetze> ah, right
05:00:42 * Marvin-- reads Pete Lindstrom's parametric worm warning and giggles
05:15:49 <Marvin--> err
05:16:11 <Marvin--> I have four hard drives on the shelf, one is a broken 44G, one is 8G and two are oooooold ~100M disks
05:16:16 <Marvin--> and I have *no* idea which is which
05:33:57 <Marvin--> mount --bind is kinda cute
05:37:11 <Heffalump> yes
05:37:17 * Heffalump used to have lots of evil symlinks to do that
05:40:10 <Marvin--> well, I have a bus to catch *wave*
06:52:44 <SyntaxPolice> good morning
06:53:02 <mgoetze> hi
06:53:04 <mgoetze> wanna play? :)
06:54:23 <SyntaxPolice> you're hooked, aren't you :)
06:54:24 <SyntaxPolice> OK...
06:54:35 <mgoetze> guess what i'll be doing all evening? lol
06:55:25 <SyntaxPolice> what room are you in? (yahoo)
06:55:35 <mgoetze> uhm, i'm on nngs
06:55:47 <mgoetze> it's much nicer there :)
06:56:21 <SyntaxPolice> btw, can anyone think of a way to write [(x,y) | x <- l1, y <- l2] using (map map) ?
06:56:43 <SyntaxPolice> mgoetze: I don't feel like getting cgoban set up. wanna join me on yahoo?
06:57:35 <mgoetze> SyntaxPolice: still only netscape 4 as yet, so no thanks :)
06:58:15 <mgoetze> SyntaxPolice: well, a zip, and then a function combinetotuples or something :)
07:00:02 <SyntaxPolice> its against the rules to use recursion or function calls :)
07:00:02 <SyntaxPolice> I mean define functions
07:00:02 <SyntaxPolice> mgoetze: so we're not playing?
07:00:28 <mgoetze> SyntaxPolice: well, if you tell me how to fix opera, we are... :)
07:00:39 <Smerdyakov> SyntaxPolice, what type function are you looking to create?
07:00:41 <mgoetze> unless opera doesn't work with yahoo
07:01:07 <Smerdyakov> SyntaxPolice, [a] -> [b] -> [(a, b)] ?
07:02:05 <SyntaxPolice> I know nothing about opera.
07:02:05 <SyntaxPolice> Smerdyakov: its the cartisian product, the function should be f :: [a] -> [b] -> [(a,b)]
07:02:05 <SyntaxPolice> but a friend of mine wrote it with some crazy combination of map map and concat and another map and some fold or something stuck in there, but I couldn't reproduce what he did.
07:02:06 <Smerdyakov> SyntaxPolice, or do you just want the answer?
07:03:36 <Smerdyakov> prod a b = mapCat (map (\y -> (x, y) b)
07:03:38 <Smerdyakov> Is that it?
07:03:48 <Smerdyakov> With one more parenthesis...
07:03:52 <Smerdyakov> prod a b = mapCat (map (\y -> (x, y)) b)
07:04:20 <SyntaxPolice> Smerdyakov: No, I can use that list comprehension that I posted 5 minutes ago, I was trying to figure out how to do it w/ no recursion & only higher level functions like fold, map, etc.
07:04:20 <SyntaxPolice> but I don't really need the function at all, I just was trying to figure out what my friend did.  He didn't kow about list comprehensions.
07:04:22 <Smerdyakov> Er
07:04:31 <Smerdyakov> prod a b = mapCat (\x -> map (\y -> (x, y)) b)
07:04:47 <Smerdyakov> That uses no recursion!
07:05:01 <Smerdyakov> [argh, still needs a at end]
07:05:33 <SyntaxPolice> what is x?
07:05:33 <SyntaxPolice> and what is mapCat? :)
07:05:42 <Smerdyakov> I think mapCat is a standard Haskell function.
07:05:45 <Smerdyakov> And now I've bound x.
07:05:48 <Smerdyakov> prod a b = mapCat (\x -> map (\y -> (x, y)) b) a
07:06:08 <Smerdyakov> Maybe mapConcat
07:06:18 <Smerdyakov> Same as concat . map
07:06:59 <Smerdyakov> Anyway, I have to go. I think that does it, modulo the name of that standard function :)
07:07:21 <SyntaxPolice> but what does map cat do? 
07:07:21 <SyntaxPolice> i mena mapCat
07:07:21 <SyntaxPolice> hehe
07:07:22 <SyntaxPolice> ok
07:07:29 <Smerdyakov> I told ya!
07:07:32 <Smerdyakov> It's concat . map
07:07:48 <Smerdyakov> But set up so that actually works ;-)
07:07:51 <rublik> =)
07:07:52 <Smerdyakov> Like it would if map weren't curried
07:07:52 <mgoetze> jewel, SyntaxPolice : ok, who wants to play?
07:08:06 <Smerdyakov> So map, then concat result list
07:08:55 <mgoetze> SyntaxPolice: pick a room
07:11:46 <SyntaxPolice> mgoetze: hamster pit?
07:12:29 <mgoetze> ok
07:13:01 <mgoetze> hm, damn, i need some sort of plugin
07:13:11 <SyntaxPolice> yeah, java.
07:14:11 <mgoetze> so, what do i need to apt-get?
07:14:23 <SyntaxPolice> mgoetze: are you using mozilla?
07:14:28 <mgoetze> yes
07:14:59 <SyntaxPolice> add this to your apt sources:
07:15:01 <SyntaxPolice> deb ftp://metalab.unc.edu/pub/linux/devel/lang/java/blackdown.org/debian woody non-free
07:15:01 <SyntaxPolice> deb ftp://metalab.unc.edu/pub/linux/devel/lang/java/blackdown.org/debian woody main
07:15:05 <SyntaxPolice> apt-get install j2sdk something
07:15:13 <SyntaxPolice> well, first
07:15:17 <SyntaxPolice> apt-get install mozilla-snapshot
07:15:47 <mgoetze> ooh, snapshot. fun. :(
07:15:50 <SyntaxPolice> ln -s /usr/lib/mozilla-snapshot /usr/lib/mozilla-cvs
07:15:59 <SyntaxPolice> (you don't need the snaphot, its just to make the install happy)
07:16:20 <SyntaxPolice> then apt-get install j2sdk1.4
07:16:30 <SyntaxPolice> then cd ~/.mozilla/
07:16:33 <SyntaxPolice> mkdir plugins
07:17:23 <SyntaxPolice> ln -s /usr/lib/j2se/1.4/jre/plugin/i386/mozilla/javaplugin_oji.so libjavaplugin_oji.so
07:17:33 <SyntaxPolice> then run mozilla :)
07:17:41 <mgoetze> j2sdk1.3 you mean?
07:17:58 <SyntaxPolice> that should work. what version of debian are you running?
07:18:04 <mgoetze> woody
07:18:25 <SyntaxPolice> yeah, that should be fine... i'm surprised I have woody in my apt sources.  i better fix that.
07:19:04 <SyntaxPolice> brb.
07:19:15 <mgoetze> hmph.... only 233 kB/s
07:23:34 <mgoetze> ok... loading :)
07:24:51 <mgoetze> SyntaxPolice: invite me
07:28:49 <mgoetze> SyntaxPolice: uhm... this is too slow. waaaay too slow
07:28:58 <SyntaxPolice> grr
07:29:13 <SyntaxPolice> slow network or slow machine?
07:30:04 <mgoetze> SyntaxPolice: network
07:30:15 <SyntaxPolice> mgoetze: if you want to wait for 2.5 hours I can go home and we'll play w/ cgoban or whatever.
07:31:12 <mgoetze> SyntaxPolice: in 2.5 hours i'll be sitting in a pub playing go on a real board :)
07:31:33 <SyntaxPolice> sounds like fun.
07:31:43 <SyntaxPolice> mgoetze: where are you?
07:31:45 <mgoetze> oh yeah, it is
07:31:47 <mgoetze> hamburg
07:32:11 <SyntaxPolice> if you played go in a bar in ohio, I don't think anyone would take it very well :)
07:32:23 <SyntaxPolice> we play in coffee shops sometimes,a nd even then people are a little freaked out by it.
07:32:46 <mgoetze> SyntaxPolice: the name of the place is "chess cafe"
07:32:55 <mgoetze> :)
07:33:02 <mgoetze> SyntaxPolice: the owner is a 4dan
07:33:28 <SyntaxPolice> ahh cool.
08:20:01 <Janni> hello to everybody. weekend is beginning _now_! :)
08:20:17 <SyntaxPolice> Janni: I still have at least 7 more hours to go :)
08:20:58 <Janni> SyntaxPolice: that's the disadvantage living in america. 7 hours more work :)
08:21:03 <SyntaxPolice> hehe
08:23:23 <mgoetze> Janni: wanna play go? :)
08:25:21 <Janni> mgoetze: not yet. maybe tonight or tomorrow...
08:25:43 <mgoetze> Janni: i'm playing over a real board tonight :)
08:25:54 <mgoetze> Janni: where do you live?
08:27:17 <Janni> mgoetze: in Nussbaum (really :) near Bretten near Pforzheim near Karlsruhe.
08:28:17 <mgoetze> ahja :)
08:28:25 <mgoetze> someone should tell maple that ln(e)=1
08:28:46 <Janni> mgoetze: when my mother saw me playing that game she recognized it from old people of her village playing the game _all_ the time (i'm half korean)
08:30:54 <liiwi> go is fun
08:31:08 <mgoetze> liiwi: wanna play? :)
08:33:21 <liiwi> I'm too pissed off now
08:34:15 <mgoetze> at who/what?
08:34:50 <liiwi> just in general
08:39:05 <radix> Use your anger as a tool to vanquish your foes!
08:55:17 <Sucht`on|Hase> hi to all
08:55:24 <Sucht`on|Hase> I have a question !
08:56:08 <Sucht`on|Hase> so I have a security hole in my server because I use hGetLine for reading the characters of the server handler ...
08:56:24 <Heffalump> how is that a security hole?
08:56:38 <Sucht`on|Hase> if somebody never sends me an enter it is
08:56:44 <radix> DoS, perhaps...
08:56:54 <radix> send tons and tons of data without a newline...
08:57:07 <Sucht`on|Hase> because the server alwasys cashs the characters and then one day all ram is gone :-)
08:57:33 <Sucht`on|Hase> I need a newline in the input ... the client sends the input stream ...
08:58:00 <radix> Sucht`on|Hase: So use a function that supports a line-length limit?
08:58:25 <whee> you could recurse getting characters
08:58:32 <Sucht`on|Hase> radix: yes. but whats the name of such a function ?
08:58:42 <radix> Sucht`on|Hase: I'm not a Haskell hacker. dunno :-)
08:58:44 <whee> so it would either stop and return on either newline or some limit
08:58:55 <Sucht`on|Hase> whee I tried that by using hGetChar but I didnt work
08:59:10 <Sucht`on|Hase> whee join #flood
08:59:14 <whee> define didn't work
08:59:22 <Sucht`on|Hase> the I print you the source of that function I tried
08:59:29 <Sucht`on|Hase> perhaps you find the failure
08:59:35 <Sucht`on|Hase> I didnt for 2 hours now ... :-)
09:02:00 <Sucht`on|Hase> so ? whats wrong ?
09:03:21 <Sucht`on|Hase> whee: do you know whats wrong ?
09:03:23 <whee> hold on, going to play with this
09:03:51 <Sucht`on|Hase> kk thanks
09:04:31 <Sucht`on|Hase> whee: so perhaps I can fasten your play :-) the fault seems to be in hGetChar because it does not terminate
09:05:25 <Sucht`on|Hase> I tried an putStrLn [c] after that but it wasn't executed ...
09:06:49 <whee> hooray, fighting with layout
09:06:59 <Sucht`on|Hase> hehe
09:07:15 <Sucht`on|Hase> so, did you found it ?
09:07:23 <whee> well I'm trying to get it to compile first
09:07:28 <Sucht`on|Hase> hehe
09:07:38 <Sucht`on|Hase> shell I send you the hole code ?
09:07:46 <whee> nah
09:08:04 <Sucht`on|Hase> so two files ? (the hole server at the moment :-)
09:08:11 <Sucht`on|Hase> kk
09:10:03 <Sucht`on|Hase> whee: you normally have to compile it by import of Socket an IO and usage of package net
09:10:22 <whee> yes but I'm dealing with a stupid parse error in an if statement
09:10:26 <whee> which makes no sense whatsoever
09:10:51 <Sucht`on|Hase> hehe
09:13:22 <whee> how do I reference stdin with this?
09:13:52 <whee> ah, got it
09:15:07 <whee> okay, so your prolblem is that it's not checking the length after the user would type something?
09:15:39 <Sucht`on|Hase> hm no
09:16:12 <Sucht`on|Hase> the problem is that the function doesn't terminate at all
09:16:49 <Sucht`on|Hase> therefor it doesn't return the string what it should do
09:17:13 <whee> hrmm, terminates for me  :)
09:20:47 <Sucht`on|Hase> hmmm
09:20:54 <Sucht`on|Hase> did you change anything ?
09:21:09 <Sucht`on|Hase> if not I should try the call anotherway
09:21:20 <whee> I don't know, I just rewrote it naively
09:21:25 <whee> my version works 
09:21:36 <Sucht`on|Hase> hmmm
09:21:43 <Sucht`on|Hase> so how did you test it ?
09:21:56 <whee> I pasted it in #flood
09:24:16 <Sucht`on|Hase> hmmm what do you need the IO.hSetBuffering stdin NoBuffering for ?
09:24:26 <whee> so it wouldn't buffer stdin
09:24:36 <Sucht`on|Hase> hmmm
09:24:46 <whee> otherwise it won't actually go through that function right away
09:24:54 <Sucht`on|Hase> even if I do not use that line it does what it should ... hmmmmm :-)
09:25:23 <Sucht`on|Hase> so I used it like that -> #flood
09:25:57 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "buddha debugger 0.4 http://www.cs.mu.oz.au/~bjpop/buddha/", "new  #sml channel for all your ML topics", "Helium 1.0 - Haskell for Students http://www.cs.uu.nl/~afie/helium/index.html", "New HTk release http://www.informatik.uni-bremen.de/htk/", "New DSP libs - http://users.snip.net/~donadio/haskell/"]' by shapr
09:26:10 <Sucht`on|Hase> oops ! hGetLine must be replaced by nread of cource
09:26:13 <Sucht`on|Hase> course
09:26:20 <whee> does it work?
09:26:24 <Sucht`on|Hase> no
09:26:51 <Sucht`on|Hase> hGetLine works but not nread (in that function I've written to #flood)
09:27:10 <whee> I think it's still buffering the thing
09:27:20 <whee> or something crazy
09:27:31 <Sucht`on|Hase> hmm buffering is possible
09:27:42 <Sucht`on|Hase> how can I turn that off ?
09:28:05 <whee> the same way I do in the code I pasted :)
09:28:22 <whee> I don't know if that's it, though
09:28:33 <Sucht`on|Hase> hehe, I knew you would say that :-) k, lets see
09:31:08 <Sucht`on|Hase> hmm it works but it seems to me that 255 characters were less than that ...
09:32:04 <Sucht`on|Hase> ahh nice I was wrong
09:32:15 <whee> 255 chars is a little over three lines on a 80 char wide terminal, for reference
09:32:19 <Sucht`on|Hase> ok, thanks whee, it was the buffering
10:23:57 * gabor greets housel
10:40:21 <molar> hello anyone know about k-fold-cross-validation
10:54:56 <molar> anybody?!
11:00:16 <molar> skylan
11:06:24 <molar> anyone know about machine learning | central limit theorem | k-fold-cross-validation any of those
11:06:47 <lament> google does.
11:07:37 <molar> its a stats problem i have
11:46:45 <engstad> Ludde... Ludde from NTH?
11:51:20 <ludde> engstad: NTH? no.. chalmers
11:51:44 <engstad> Ah well. :-)
11:51:54 <engstad> I knew a guy we called Ludde.
11:53:47 <shapr> what's k-fold-cross-validation ?
11:53:58 <shapr> central limit theorem...
11:53:58 <shapr> hmm
11:54:15 <emu> CLT is easy
11:54:23 <shapr> never heard of it
11:54:27 * shapr googles
11:54:29 <emu> stats
11:54:49 <engstad> Given one expression (arithmetic), and another, is there a way to show mechanically that they are equal?
11:55:12 <shapr> emu: statistics?
11:55:40 <emu> the mean of each repeated sample from a population will form a normal curve around the mean of the population
11:55:51 <shapr> that's clt?
11:55:57 <shapr> sounds simple enough
11:57:07 <emu> hum
11:57:20 <shapr> what's that other one?
11:57:22 <emu> no, not quite, my memory was off
11:57:42 <Smerdyakov> engstad, I think you need to specify what an arithmetic expression is for us to answer that question.
11:57:53 <Smerdyakov> engstad, equality of real numbers is undecidable, you know =)
11:58:03 <shapr> http://www.maths.lth.se/help/R/.R/library/bootstrap/html/crossval.html
11:58:08 <shapr> that doesn't look too hard either
11:58:19 <emu> Draw a SRS of size n from any population with mean \mu and finite std deviation \sigma.  When n is large, the sampling distribution of the sample mean x-bar is approximately normal: x-bar is approximately N(\mu, \sigma/sqrt(n))
11:59:39 <engstad> Smerd: It's simpler than that. How do you prove that:  a * (b + c + d) == a * b + a * c + a * d, mechanically.
11:59:40 <emu> SRS = simple random sample, i thiink
12:00:11 <shapr> top quotingsucks
12:00:40 <Smerdyakov> engstad, in that case, you apply a distributive law twice.
12:00:46 <engstad> Smerd: Or rather: Given: Binary Mul (Var "a") (Sum [Var "b", Var "c", Var "d"]).
12:00:57 <Smerdyakov> engstad, automated theorem proving is a huge research area. There is no "easy answer."
12:01:07 <engstad> Ok.
12:01:23 <Smerdyakov> engstad, for small problems ins imple domains, you can be naive and just apply all inference rules that work in a breadth first manner until you prove it =)
12:01:40 <engstad> Hehe.. yeah, I might do that.
12:02:23 <engstad> There's odd things though: Like 2 * (a / 2) == a.
12:02:52 <Smerdyakov> Not terribly odd. You define a/b to be a/(b^-1).
12:02:54 <Smerdyakov> er
12:02:56 <Smerdyakov> Not terribly odd. You define a/b to be a*(b^-1).
12:03:03 <engstad> *nod*.
12:03:13 <Smerdyakov> Then use commutativity of multiplication and cancel inverses
12:03:14 <engstad> I'll have to do constant propagation?
12:04:10 <Smerdyakov> You could say it that way, but there's no need to think of anything but applying inference rules until you arrive at your conclusion.
12:04:29 <engstad> True.
12:04:48 <engstad> That could really explode quickly though..
12:05:14 <Smerdyakov> There's this thing called "resolution theorem proving" that you might like to look into.
12:05:28 <engstad> I suppose I could try to get each equation to some sort of "normal form".
12:40:48 * shapr bounces
12:41:06 <shapr> g'morning
12:45:21 <SyntaxPolice> hi shapr
12:52:35 <shapr> hi SyntaxPolice, what's up?
14:02:31 <Janni> re
14:03:39 <steele> hi Janni
14:04:48 <shapr> hiya
14:46:42 <camold> question: I do have severe problems with a function
14:47:05 <camold> this is all based on Handle's ...
14:47:11 <Smerdyakov> Free English tip: remove "do" from that sentence unless you are affirming something that was in doubt earlier. ;-)
14:47:42 <camold> hehe thx
14:48:27 <camold> so the prob is somehow a little bit complex because there is a lot of code. but that shouldnt confuse :-)
14:48:52 <camold> I'm going to paste the neccessary things in #flood
14:51:11 <mowla> new  #sml channel for all your ML topics -- machine learning = ML?
14:51:23 <whee> meta language
14:53:08 <camold> hi whee
14:53:15 <whee> hola
14:53:49 <camold> do you know what ? I didnt finish the server yet. there is one problem I cant solve ... *grrrr*
14:54:43 <camold> so if anybody could have a look at #flood and see what Ive pasted there pls !
14:54:59 <Smerdyakov> You'd probably want them to join BEFORE you paste :D
14:55:13 <camold> hehe sure
14:55:18 <mowla> anyone know about k-fold-cross-validation
14:55:22 <camold> but I could paste it again ^^
14:55:34 <whee> mowla: google does :)
14:55:59 <mowla> your right but i disagree with the theory and need someone to argue with
14:56:01 <whee> that looks like your old nread still camold
14:56:35 <camold> not exactly
14:56:38 <camold> whee
14:56:48 <whee> no?
14:56:58 <whee> I wouldn't use ++ in a function that'll recurse like that
14:57:10 <whee> it's usually quicker to prepend and reverse the list afterwards
14:57:26 <Smerdyakov> Wow, someone talked about what's quicker in this channel ;-)
14:57:52 <whee> yes, that is the old nread :)
14:58:41 <camold> kk
14:58:43 <camold> :-)
14:58:45 <camold> so the problem is: I'm connecting to the server wich uses that functions. the call in the server is then:
14:58:47 <camold> a <- correct h ( SrvOpponent p2 ) ClOk
14:58:49 <camold>   putStrLn ( show a )
14:59:07 <camold> and the input for the Handle is first "Player bla" and then "Ok"
14:59:37 <camold> so this should be correct but a is False ....
15:01:07 <camold> so if somebody want the hole thing :-) because it should be pretty complicated to compile the lines yourself without knowing the rest ...
15:01:47 <whee> well if you send "Player bla" first, wouldn't correct go and compare that against ClOk?
15:01:58 <camold> no
15:02:19 <camold> so pls download ftp://lotux.homelinux.org/pub/*.hs
15:02:23 <whee> it just appears to read one line and do a comparison
15:02:26 <camold> thats the real code
15:03:02 <camold> yes thats right whee
15:03:27 <whee> right, so if the first line you send is "Player bla" it would compare that, and a would be false
15:03:39 <camold> mom
15:03:51 <camold> no
15:03:59 <camold> the first line is parsed beforehand
15:04:05 <whee> okay
15:04:07 <camold> this has not been pastet
15:04:10 <camold> this has not been pasted
15:04:36 <camold> so if the call a <- correct h ( SrvOpponent p2 ) ClOk
15:04:36 <camold>   putStrLn ( show a )
15:04:52 <camold> takes place, there is still just the "Ok" left
15:05:07 <camold> omg my english is bad *gg*
15:05:46 <whee> hmm
15:06:13 <camold> so you found something ?
15:06:16 <whee> I would try loading the protocol module interactively and testing the functions
15:06:26 <camold> did so
15:06:46 <camold> message "Ok" gives back the correct ClOk
15:07:58 <camold> and if you test "do l <- mread stdin; putStrLn $ show l" separatly and input "Ok" there will be the correct answer with ClOk
15:08:08 <camold> and exactly that is the problem .....
15:10:54 <whee> err
15:11:02 <camold> found something ?
15:11:03 <whee> heh
15:11:12 <whee> nread1 still looks odd to me 
15:11:18 <camold> why ?
15:15:11 <whee> hrmf
15:15:16 <camold> what ?
15:15:22 <whee> I don't know :)
15:15:51 <whee> maybe you can try using the Observe module to debug this or something, mread is fine, message is fine
15:15:53 <camold> it always seems to me, that you lough out my programs ^^
15:16:04 <camold> hehe
15:16:11 <camold> hmmm Observe ?
15:16:17 <whee> it'd be easier to debug if you did tracing of some sort
15:16:38 <camold> hmmm actually I dont know Observer
15:16:39 <camold> hmmm actually I dont know Observe
15:17:08 <whee> I'm not familiar enough with the server module to figure out where it could be going wrong
15:17:19 <whee> well,  your main module
15:17:22 <camold> hmm jepp
15:17:30 <camold> aehmmm
15:17:31 <camold> mom
15:17:43 <camold> startGame
15:17:57 <camold> reception just gets two players
15:18:11 <camold> both have to write "Player playername"
15:18:36 <whee> that part works?
15:18:39 <camold> and then startGame starts and ask both participants whether its ok, that they play against the other
15:18:42 <camold> yes
15:18:45 <camold> try it
15:18:55 <camold> ghc --make -package net Server.hs
15:19:05 <camold> and then use telnet localhost 10003
15:19:16 <camold> two times telnetting ^^
15:19:36 <camold> the server should tell you "Welcome to lotux.homelinux.org"
15:19:57 <camold> and then you have to answer "Player thefirstname"
15:20:12 <camold> then the playername of the second client
15:20:23 <camold> and then the server tells you your opponent
15:20:46 <camold> the should be answerd with "Ok"
15:20:49 <whee> still not compiling, hm
15:21:02 <camold> what is the fault ?
15:21:24 <whee> Server.hs:1:
15:21:25 <whee>     Failed to find interface decl for `listenOn'
15:21:25 <whee>     from module `Network'
15:21:32 <whee> and a bunch more like that
15:21:42 <camold> hmmm ghc version ?
15:21:46 <whee> 5.05
15:21:50 <camold> mom
15:22:03 <camold> hmm I have 5.02.2
15:22:11 <whee> possible that the network interface has changed
15:22:24 <camold> baah this would be terrible ^^
15:22:32 <camold> so I could nevertheless start a server
15:22:36 <camold> on my computer
15:22:43 <camold> so you can try telnetting
15:22:53 <whee> I'll assume the server part works :)
15:23:03 <camold> hmm not really ....
15:23:07 <camold> that is the problem !
15:23:27 <whee> heh
15:24:03 <whee> how about you output what nread comes up with each time?
15:24:15 <whee> just to see if there's some stray newlines or something
15:24:15 <camold> so I send "Ok" to the server and he interprets it as ErorMsg and not as ClOk
15:24:24 <camold> did so
15:24:35 <camold> there wasnt anything ....
15:24:43 <camold> mom
15:24:48 <camold> I put that in the source
15:25:05 <camold> and make a third test
15:26:11 <whee> also it might be useful to see what message is actually dealing with
15:26:29 <camold> so I did put the line "putStrLn msg" into the mread functino
15:26:32 <whee> perhaps temporarily have message return MsgError "string that failed"
15:27:20 <camold> what ? sorry, i dont understand what you mean
15:27:57 <camold> so the server is running on lotux.homelinux.org:10003
15:28:35 <camold> so pls make a telnet to that host
15:28:45 <whee> have the message function return what actually failed to match anything
15:29:04 <camold> jepp Ill do that
15:29:07 <whee> then have correct print out the error if it didn't match
15:29:33 <camold> I do print everything that the server gets as input on my srean
15:29:42 <camold> screan
15:29:44 <whee> yes, but it'd be nice to know what message is failing on.
15:29:56 <camold> on "Ok"
15:30:21 <camold> i assure you :-) I did some debugging (by hand) before ..
15:30:23 <whee> you modified it to return the string it couldn't match?
15:30:28 <whee> heh
15:30:39 * Arnia eats a type system
15:30:41 <whee> it's obviously not getting "Ok" if it's not matching it
15:30:53 <camold> sure
15:31:09 <camold> so I do have some output know
15:31:34 <camold> telnet router 10003
15:31:34 <camold> Trying 169.254.0.1...
15:31:34 <camold> Connected to router.
15:31:34 <camold> Escape character is '^]'.
15:31:34 <camold> Welcome to lotux.homelinux.org
15:31:35 <camold> Player camold
15:31:37 <camold> Opponent whee
15:31:39 <camold> Ok
15:31:43 <camold> Client failed
15:31:45 <camold> Connection closed by foreign host.
15:32:04 <camold> so I wrote "Player camold" and "Ok"
15:32:09 <camold> the rest is from the server
15:33:09 <whee> yes, but is the message function returning the string that failed to match?
15:33:28 <camold> yes
15:33:32 <whee> and printing it?
15:33:37 <whee> or, rather, is correct printing it
15:33:46 <camold> everything that goes over the net has been printed to stdout
15:33:58 <whee> not what goes over the net, what message is actually parsing.
15:34:52 <camold> hehe
15:35:05 <camold> thats nearly the same for this server
15:35:37 <camold> do you still have the Network.hs
15:35:38 <camold> ?
15:35:45 <whee> no
15:35:49 <whee> heh
15:35:51 <whee> that one worked fine
15:35:51 <camold> hmmm so wait
15:36:00 <camold> if I say
15:36:14 <whee> have message return MsgError str when nothing matches
15:36:22 <whee> and have correct check for MsgError and print out what it failed on
15:36:30 <camold> putStrLn ( "\"" ++ msg ++ "\"" ) when msg is a string
15:36:43 <whee> I would use show
15:36:44 <camold> the output should be "hello" if msg is hello ?
15:36:53 <camold> kk show is better ^^
15:37:39 <camold> aaahhhhhhh !
15:37:48 <camold> I do know the thing now
15:38:00 <camold> the message is not "Ok" ! its "Ok\r"
15:38:25 <camold> by the way, what is the '\r' ?
15:38:54 <camold> so the server gets a wrong input ...
15:39:02 <camold> hmmm ok Ill fix that
15:39:10 <camold> but nevertheless thanks for your help.
15:39:18 <whee> easiest fix is to modify nread to treat \r like \n
15:39:33 <camold> hmm but what is \r ?
15:39:40 <camold> \n is newline and \r ?
15:40:00 <whee> I forget what it is exactly, but you'll usually see \r\n at the end of lines sometimes
15:40:11 <whee> so nread is stopping at \n, returning Ok\r
15:40:22 <camold> yes
15:40:41 <whee> you may want to stop at \r and then read the \n and discard
15:40:57 <camold> but if I treat \r like \n then nread would stop at \r and with the next use it would begin with \n
15:41:32 <whee> right, you read the \n and discard before retruning
15:41:35 <whee> returning, even
15:41:59 <camold> hmmm
15:42:21 <whee> I believe there's functions for checking the next thing on a handle without actually removing it
15:42:59 <camold> hmm sure 
15:43:00 <camold> ?
15:43:00 <camold> ^^
15:43:07 <whee> yes
15:51:28 <camold> ok it works now
16:00:00 <dark> \r is carriage return, which brings the cursor back to the left side of the screen.  \n is newline on unix systems, but line feed in ascii.  The telnet protocol (and most textual network protocols) specify that lines end with carriage return and line feed, but clients and servers usually accept a variety of end-of-line conventions.
16:01:58 <dark> This all dates back to the days of paper terminals :)
16:12:44 <camold> n8 to al ! and cu tomorrow ^^
