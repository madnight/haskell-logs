04:33:15 * d33p is away: xyxo yp iyeb pemusxq lecsxocc!
05:20:43 --- topic: '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Gtk+HS 0.14.10:  http://www.cse.unsw.edu.au/~chak/haskell/gtk/","HWS-WP: http://www.dum.chalmers.se/~marvin/hws-wp/", "HaskellWiki resurrected", "ANNOUNCE: GHC version 5.04.2 released","HaSDL: http://www.xs4all.nl/~dark/hasdl-0.1pre7.tar.gz","New Mailing List for Template Haskell", "Tallest dwarf in Moria"]'
05:20:43 --- topic: set by Pseudonym on [Wed Jan 08 16:29:45 2003]
05:20:43 --- names: list (clog galority Heffalump mgoetze|away smkl dark tWip Marvin-- Fractal lament tez whee jak_ shapr d33p skylan lindril Segora SyntaxPolice xkb Radek emu drlion gdsx SyntaxPolice__ Igloo liiwi jewel Logan)
11:12:58 <shapr> hi tWip 
11:22:59 * shapr bounces
11:23:47 <shapr> hi andersca 
11:24:18 <andersca> hey shapr
11:24:24 <shapr> what's up?
11:29:29 <tWip> what do ppl use for GUI programming, I tried gtk2hs and fudgets, but both failed to install
11:34:29 <shapr> tWip: curses? :-)
11:34:40 <shapr> have you tried gtk2hs?
11:35:10 <tWip> yes
11:36:07 <tWip> fudgets seems to be very elegant, but unportable... of course I could roll my own with HOpenGL, but that's a bit too much work
11:40:49 <shapr> there's been some discussion about this recently on the mailing lists
11:40:59 <shapr> basically "will there be a standard gui lib for haskell"
11:41:05 <tWip> oh... I'll need to catch up on that
11:41:06 <shapr> I hope so :-)
11:41:16 <tWip> that would be nice
11:41:27 <shapr> I'm interested in decent database bindings at the moment.
11:42:16 * shapr is called to be social with his woman
11:42:19 <shapr> I'll be back tomorrow.
11:54:06 * d33p is back (gone 07:20:50)
12:19:46 * d33p is away: xyxo yp iyeb pemusxq lecsxocc!
14:37:59 * Janni is back...
23:32:01 <jemfinch> I have a question about SML, and this is usually the best channel to find people who do SML -- anyone mind if I ask the question?
23:32:29 <emu> I know it a bit
23:32:49 <jemfinch> I'm having a typechecking problem.
23:33:21 <emu> what a surprise
23:33:29 <jemfinch> :)
23:33:40 <jemfinch> ok, mind if I paste?
23:33:47 <emu> query?
23:33:51 <emu> how long?
23:34:01 <jemfinch> it's 9 line long signature.
23:34:27 <emu> eh whatever, no one is talking
23:34:33 <jemfinch> ok, here you go :)
23:34:34 <jemfinch> signature IRC_MSG_QUEUE = sig
23:34:34 <jemfinch>   structure IrcMsg : IRC_MSG
23:34:34 <jemfinch>   type t
23:34:34 <jemfinch>   val new : unit -> t
23:34:34 <jemfinch>   val isEmpty : t -> bool
23:34:35 <jemfinch>   val enqueue : t * IrcMsg.t -> unit
23:34:37 <jemfinch>   val dequeue : t -> IrcMsg.t option
23:34:39 <jemfinch> end
23:34:45 <jemfinch> so that seems pretty simple, right?
23:36:02 <jemfinch> now, when I write a structure to match the signature, it compiles and matches fine, but look at the type it gives enqueue/dequeue:
23:36:36 <jemfinch> - IrcMsgQueue.enqueue;
23:36:36 <jemfinch> val it = fn : IrcMsgQueue.t * ?.IrcMsgQueue.t -> unit
23:36:36 <jemfinch> - IrcMsgQueue.dequeue;
23:36:36 <jemfinch> val it = fn : IrcMsgQueue.t -> ?.IrcMsgQueue.t option
23:36:49 <jemfinch> but it just matched that signature!
23:40:03 <emu> well
23:40:17 <emu> what's mystifying me is the IrcMsgQueue bit for the second t
23:40:36 <jemfinch> the whole darn thing is mystifying me.
23:40:59 <emu> do yo have some code you could send me?
23:41:03 <jemfinch> I can't figure out why it matches the signature and then gives it a type that is blatantly *not* the signature that was matched.
23:41:10 <jemfinch> you want the structure?
23:41:19 <emu> well the ?. thing means something is being redefined i think
23:41:29 <jemfinch> I'll need to send ircmsg.sml and ircmsgqueue.sml.
23:41:33 <emu> ok
23:44:22 <emu> why is structur IrcMsg : IRC_MSG in the signature at all?
23:44:40 <jemfinch> it's needed to make it a "closed signature"
23:46:03 <emu> can it be the same name as the actual structure?
23:47:11 <jemfinch> "Code is structured in MLTon so that signatures are closed.  Thus, in MLTon, one would never write "signature SIG = sig val f : Foo.t -> int end".  Instead, one would write, "signature SIG = sig structure Foo : FOO val f : Foo.t -> int end".  The benefit of this approach is that one can first understand the specifications (i.e. signatures) of all the modules in MLTon before having to look at any implementations (i.e. structures or functor
23:47:11 <jemfinch> hat is, the signatures are self-contained.
23:48:25 <jemfinch> yeah, it can be the same name.  Look, for instance, at the Basis signature for STRING, which includes "structure Char : CHAR"
23:48:35 <jemfinch> (that quote is from the MLTon style-guide, btw)
23:49:19 <emu> oh, is this an MLton thing? I've only used SML/NJ
23:49:25 <jemfinch> no, I'm using SML/NJ.
23:49:42 <jemfinch> I can't get MLTon to compile on my system (and probably wouldn't use it anyway if I could, I like SML/NJ a lot.)
23:50:39 <jemfinch> I just like the MLTon style-guide because it's pretty smart most of the time.
23:51:02 * jemfinch wishes the Basis library followed the "call the basic type of a module 't'" convention.
23:52:32 <jemfinch> is this going to be a problem for the newsgroup?         
23:53:33 <emu> I don't know what's wrong.  I don't have MyString either, so it won't compile
23:53:41 <jemfinch> I can send you that if you want.
23:53:55 <emu> okay
23:54:03 <jemfinch> MyString is in misc.sml.
23:55:57 <emu> might want to try and isolate a simpler example too
23:57:29 <jemfinch> I wouldn't know how to do that.
