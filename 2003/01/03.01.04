06:12:43 * shapr awakens
06:14:10 <shapr> goood morning functionelles!
06:16:30 <shapr> how are ya?
06:22:38 * shapr bounces happily
07:35:11 <Janni> hi
08:37:58 <shapr> oh, dark isn't here...
08:40:34 --- topic: set to '["mo' nads than you", "We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Gtk+HS 0.14.10:  http://www.cse.unsw.edu.au/~chak/haskell/gtk/","HWS-WP: http://www.dum.chalmers.se/~marvin/hws-wp/", "HaskellWiki resurrected", "ANNOUNCE: GHC version 5.04.2 released","need joystick testing: http://www.xs4all.nl/~dark/hasdl-0.1pre7.tar.gz","tested, confusion between axes and hat?"]' by shapr
09:30:31 <shapr> y0
09:53:56 <Igloo> Hey
09:53:59 <shapr> hi!
09:56:57 <kunphuzil> hi
09:57:07 <shapr> what's up?
09:57:51 <kunphuzil> not much, but i some things are working in ghci (don't know the proper name for it..)
09:57:54 <kunphuzil> but:
09:58:02 <kunphuzil> toUpper, toLower and square don't work
09:58:08 <shapr> really?
09:58:10 <shapr> how so?
09:58:18 <shapr> have you imported the Char module?
09:58:42 <kunphuzil> well, i don't know..
09:58:46 <kunphuzil> just says:
09:59:02 <kunphuzil> Prelude> map toUpper "hello"
09:59:02 <kunphuzil> <interactive>:1: Variable not in scope: `toUpper'
09:59:02 <kunphuzil> Prelude> 
09:59:12 <kunphuzil> but it works in hugs
09:59:22 <shapr> try :m Char
10:00:17 <kunphuzil> ok
10:00:38 <kunphuzil> oh ok
10:00:42 <kunphuzil> works now, thanks
10:00:50 <kunphuzil> hmmm, hugs is a lot faster
10:01:08 <kunphuzil> shapr: what about square, what do i do to load that?
10:01:32 <kunphuzil> Haskell 98 mode: Restart with command line option -98 to enable extensions ?
10:01:36 <kunphuzil> maybe i should do that
10:01:56 <shapr> I'm not sure which module has square
10:02:07 <kunphuzil> ok
10:02:30 <Igloo> hugs isn't faster, it has lower startup overhead
10:02:43 <Igloo> I don't think square is standard
10:45:00 <Janni> re
10:45:07 <kunphuzil> Hi
10:45:12 <kunphuzil> what does re mean?
10:45:24 <Heffalump> rehi or regards, usually
10:45:25 <shapr> it's short for "rehi"
11:11:09 <kunphuzil> Does anyone know what arguements max takes? (Haskell)
11:11:26 <Heffalump> two, I'd imagine
11:11:33 <Heffalump> but :t max in either hugs or ghci would tell you
11:11:46 <kunphuzil> oh ok
11:11:48 <kunphuzil> thanks
11:14:00 <kunphuzil> I don't really understand this..
11:14:01 <kunphuzil> *** Type       : Ord a => a -> a -> a
11:14:02 <kunphuzil> *** Expression : max
11:14:03 <kunphuzil> ?
11:16:18 <Heffalump> ok, it means it takes two arguments
11:16:35 <Heffalump> which can be of any type, as long as (a) they are the same type and (b) an ordering relationship is defined on that type
11:16:44 <Heffalump> Ord a => means "a is a member of class Ord"
11:16:49 <Heffalump> any number will be a member of it, for example
11:18:02 <kunphuzil> Hmm
11:18:14 <kunphuzil> So, how would I use it to find the largest num in a list?
11:18:42 <Heffalump> is the list definitely non-empty?
11:19:02 <kunphuzil> Well, no
11:19:11 <Heffalump> what result do you want if it is empty?
11:19:15 <kunphuzil> it says it should return 0 if the list is empty (in the tutorial..)
11:19:42 <Heffalump> are all the numbers >=0, then?
11:20:10 <kunphuzil> yeah
11:20:41 <Heffalump> foldr max 0 list
11:21:19 <kunphuzil> ah..
11:21:59 <kunphuzil> I had thought foldr only took function args like + - etc
11:22:09 <kunphuzil> I see now, thanks
12:24:15 <kunphuzil> A 285K Hello World file!@
13:05:13 <Heffalump> anyone remember that long conversation about perl parameter passing from a while back?
13:39:50 <Igloo> About lists and arrays?
13:42:03 <kunphuzil> What is monads?
13:52:24 <Heffalump> igloo: yeah
14:29:52 <Heffalump> btw, the next time anyone advocates perl as being better than Haskell, point them at http://www.perl.com/pub/a/language/misc/fmproto.html
14:30:44 <whee> is anyone else having problems building recent cvs ghc?
14:30:46 <lament> why would anyone ever say that?
14:31:06 <lament> whee: I always have problems building ghc if that helps.
14:31:19 <whee> heh
14:31:37 <whee> I'm having linker problems, again :\
14:31:44 <whee> although entirely different and unrelated libraries this time
15:08:39 <Igloo> Latest autobuilds worked IIRC
15:09:58 <whee> are there any automated OS X builds?
15:11:15 <Igloo> Ah, no, just Linux I think
15:11:21 <whee> :|
15:13:19 <Marvin--> meh, I wonder why Evolution doesn't understand the RE:s in the Simons' mails on ghc-users, it completely breaks the threading
15:13:31 <whee> great, I can't even use the Memo library with my broken build, heh
15:14:07 <Igloo> mutt too - I think O(E?) doesn't put the right headers in
15:14:42 <Marvin--> Hmm, I seem to remember it working in mutt
15:14:50 <Marvin--> well, there are no In-Reply-To headers
15:15:15 <Marvin--> but there's a Thread-Topic...
15:16:21 <Marvin--> I get |*>:s in mutt, so it's only working somewhat
15:16:35 * Marvin-- mutters
15:23:19 <whee> haha, 5.04.2 doesn't compile either, although with a 'real' error instead of a linking problem
15:23:32 <whee> utils/FastString.lhs:71: Module `CString' does not export `unpackNBytesBA#'
15:36:37 <Igloo> What are you compiling with?
15:36:50 <whee> 5.05
15:37:02 <whee> which would be a broken build, bah :\
15:37:54 <whee> hopefully TH ends up in a release soon, one that actually builds :)
15:38:23 <Igloo> Just use a sensible OS  :-P
15:39:24 <whee> :P
15:39:43 <whee> ghc is actually the only program I've had problems compiling, heh
15:40:31 <whee> even erlang works fine :P
15:40:53 <Igloo> Well, GHC has lots of nasty OS/arch dependencies (AIUI)
15:41:13 <inkedmn> howdy friends
15:50:53 * Heffalump wonders if shapr is around
15:51:11 <Heffalump> what is the erlang compiler written in?
15:58:21 <whee> Heffalump: looks like a mix of erlang and c
15:59:34 <Heffalump> how does it get bootstrapped on weird platforms?
16:00:07 <whee> that's a good question :)
16:00:22 <whee> the erlang sites appear to be down, I can't check :\
16:01:18 <whee> I think the actual erlang emulator may be written entirely in c, so that gets built first, then everything else gets built
16:01:49 <Heffalump> ah
16:01:51 <Heffalump> cunning
16:02:45 <whee> that does appear to be the case
16:05:49 <Heffalump> and does it always generate C?
16:06:37 <dark> Oh my God, there is an axe in my hat!
16:06:56 <whee> erlang gets output as bytecode, which gets run by the emulator
16:10:54 <whee> I don't know what kind of speed penalty there is, but hot swapping of code makes up for anything :)
16:11:41 <kunphuzil> Why does length (tail [1,2,3]) work and not length (head [1,2,3])?
16:12:07 <whee> because the head of a list is an element, which may or may not be a list (and isn't in that case)
16:12:22 <whee> the length function requires a list
16:12:43 <kunphuzil> Oh, ok
16:12:48 <Heffalump> head :: [a] -> a
16:12:51 <Heffalump> tail :: [a] -> [a]
16:13:35 <kunphuzil> The above means, head uses a list and returns num, and tail uses a list and returns a list?
16:13:45 <lament> no
16:13:47 <Heffalump> yes, if the list is a list of nums
16:13:59 <kunphuzil> lament: ?
16:14:02 <lament> head uses a list of things and returns a thing
16:14:16 <kunphuzil> lament: yeah, that's what i meant
16:15:51 <lament> unlike, say, length, which uses a list and returns num :)
16:18:59 <kunphuzil> I don't understand how this works.. :
16:19:05 <kunphuzil> Fn {
16:19:24 <kunphuzil> 1     n = 1 or n = 2
16:19:44 <kunphuzil> Fn - 2 + Fn -1 otherwise
16:19:46 <Igloo> Is this meant to be Haskell?
16:19:51 <lament> heh
16:20:00 <kunphuzil> No, it says it is the Fibonacci sequence
16:20:23 <Heffalump> I think you are missing some brackets
16:20:41 * Igloo starts writing it in Haskell before realising that might be your homework
16:20:53 <lament> kunphuzil: it's weird pseudocode, which happens to be harder to understand than the actual program
16:21:06 <kunphuzil> Igloo: no, I am learning for fun..
16:21:16 <Igloo> It means that F1 = 1, F2 = 2 and Fn = F(n-2) + F(n-1) for any other n
16:21:50 <Igloo> It might make more sense if you write "F1" as "f 1", "Fn" as "f n" etc
16:22:26 <Janni> hello
16:22:57 <Igloo> Hi
16:26:44 <kunphuzil> Like 1 1 2 3 5 8 12 ?
16:27:24 <Igloo> Almost  :-)
16:27:35 <Igloo> Hint: 5 + 8 = 13   :-)
16:27:44 <kunphuzil> Doh :P
16:34:48 <dark> I always have trouble with 8 + 5.
16:34:48 <dark> Maybe I missed class that day.
16:34:48 <kunphuzil> dark: lol
16:34:48 <kunphuzil> Hmmm.. This problem is hard for me.. :/
16:34:48 <dark> It's probably best to forget about the pseudocode.
16:35:05 <kunphuzil> Ok
16:35:41 <kunphuzil> I don't really see what it is asking either. 
16:36:00 <kunphuzil> Hmm, I don't really understand a recursive function aswell.. :/
16:36:02 <Igloo> It is asking you to write a function f such that f n = Fn
16:36:40 <Igloo> Ah, hmmm
16:36:55 <dark> Igloo: How do you know what the assignment is? :)
16:37:09 <kunphuzil> It's not an assignment..
16:37:19 <Igloo> What's your background?
16:37:26 <Igloo> dark: Educated guess  :-)
16:37:29 <kunphuzil> I'm reading:
16:37:30 <kunphuzil> http://www.isi.edu/~hdaume/htut/
16:38:02 <kunphuzil> Igloo: what do you mean?
16:38:24 <Igloo> Well, are you at university or what?
16:38:29 <Igloo> What page?
16:38:57 <kunphuzil> Page 35
16:39:04 <kunphuzil> And, I'm just in Jr High School..
16:39:46 <Igloo> Ermmm, not page 35 for me
16:40:56 <kunphuzil> oh, well Exercise 8..
16:41:02 <kunphuzil> Er, 7
16:41:17 <Igloo> I was about to say it matches solution 7  :-)
16:41:37 <Igloo> Can you write factorial n?
16:42:22 <kunphuzil> Uh.. I guess not, because i don't know really what you mean by factorial
16:42:42 <Igloo> factorial 5 = 5 * 4 * 3 * 2 * 1
16:43:13 <Igloo> Can you now write a Haskell function to calculate the factorial of any positive integer?
16:43:18 <dark> I wonder if hdaume deliberately made his math notation different from how haskell looks.
16:44:54 <Igloo> (if you haven't seen this sort of thing before then probably not, that's fine  :-)  )
16:47:35 <kunphuzil> Igloo: Yeah, i think i can now
16:47:35 <Igloo> OK, what have you got?
16:48:28 <kunphuzil> Hrm... Well i was doing fact n = n * (n - 1) but I don't think that will work
16:48:41 <kunphuzil> Must be a loop or something
16:48:42 <Heffalump> no, but you're nearly there
16:48:56 <Igloo> Think about what fact 1 should be
16:49:47 <kunphuzil> 0 or 1?
16:50:11 <Heffalump> 1, by definition
16:50:46 <kunphuzil> hmm
16:51:04 <Igloo> Yup - you'll need a special case for this (called a "base case")
16:51:15 <Igloo> Otherwise you have infinite recursion
16:51:56 <kunphuzil> I don't really see how to create a loop, could you refresh me?
16:52:06 <kunphuzil> And, i rember there are no "destructive loops"
16:52:08 <Igloo> What do you mean by "create a loop"?
16:52:22 <Igloo> Ermmm, do you mean destructive assignments?
16:52:38 <kunphuzil> oh, yeah
16:52:54 <Igloo> Can you modify "fact n = n * (n - 1)" so that it does exactly the same thing except if n is 1 it returns 1?
16:53:35 <kunphuzil> the only way i can think, is using an if statement..
16:53:52 <Heffalump> that's fine
16:54:22 <kunphuzil> (not to good with functions yet, but here is my try:)
16:54:27 <kunphuzil> fact n = 
16:54:27 <dark> There's always more than one way to do it.  Haskell is like Perl that way.  (*duck*)
16:54:39 <inkedmn> heh
16:54:45 <kunphuzil>    if n > 0
16:54:49 <Heffalump> usually they're trivially the same, though
16:55:02 <kunphuzil>       then n = n * (n - 1)
16:55:12 <Igloo> Ermmm
16:55:16 <kunphuzil>       else 1
16:55:22 <kunphuzil> I dunno :/
16:55:25 <whee> you're missing a vital function call in there
16:55:33 <lament> dark: yes. Exactly like Perl.
16:55:41 <inkedmn> kunphuzil: you could set up another definition that only runs if the argument is 1
16:55:44 <Igloo> Oh, ooops, missed that earlier
16:55:50 <inkedmn> s/only runs/is only called/g
16:55:58 <Heffalump> inkedmn: don't confuse things :-)
16:56:07 <inkedmn> Heffalump: sorry, didn't mean to
16:56:08 <inkedmn> :)
16:56:10 <Igloo> kunphuzil: That wasn't what I expected you to say, and it doesn't do exactly what I suggested
16:56:28 <Heffalump> kunphuzil: what do you expect n = n * (n-1) to do?
16:56:41 <kunphuzil> Heffalump: I was trying to do factorial n
16:56:46 <kunphuzil> but i know that won't work
16:57:00 <Igloo> As it happens it will have the same effect, but if n == 1 then 1 else n * (n - 1) was what I was driving at
16:57:31 <whee> kunphuzil: look at the relationship between factorial 5 and factorial 4
17:01:15 <kunphuzil> Uh.. Well 5*4*3*2*1 has factorial 4 in it, factorial 3 etc..
17:01:50 <Igloo> kunphuzil: Can you write factorial 5 in terms of factorial 4?
17:03:18 <kunphuzil> yeah, fact 4 * n (if n is 5)..
17:03:48 <Igloo> Right, and what does your functino say fact 5 is?
17:04:27 <kunphuzil> Huh? 5*4*3*2*1??
17:04:59 <Igloo> No, what does "if n > 0 then n = n * (n - 1) else 1" do if n is 5?
17:05:12 <Igloo> (what you wrote above compressed onto 1 line)
17:06:32 <kunphuzil> Oh, multiplies 5*4
17:06:53 <Igloo> Right, so this is where the recursive call bit comes in
17:07:12 <Igloo> What you actually want is 5 * fact 4
17:07:23 <Igloo> Or in general n * fact (n - 1)
17:08:19 <whee> so when do we confuse him with the evolution page :)
17:08:26 <Igloo> So "fact n = if n > 0 then n = n * fact (n - 1) else 1"
17:08:57 <Igloo> Does that make sense?
17:09:19 <kunphuzil> Oh... I see now
17:09:38 <Igloo> You could also write
17:09:41 <Igloo> fact 1 = 1
17:09:46 <Igloo> fact n = n * fact (n - 1)
17:09:58 <Igloo> in Haskell
17:10:12 <kunphuzil> what else would i write it in? :P
17:10:15 <Igloo> The two are equivalent (except for how they behave with negative numbers and 0)
17:10:21 <Igloo> :-)
17:10:58 <lament> but the one without the if is so much prettier :)
17:11:01 <kunphuzil> Yay, it works :)
17:11:06 <kunphuzil> yeah
17:11:09 <kunphuzil> i used that one
17:11:47 * Igloo hits himself over the head
17:12:00 <whee> kunphuzil: http://www.willamette.edu/~fruehr/haskell/evolution.html behold, the power of cheese^H^H^H^H^H^Hhaskell
17:12:14 <Igloo> Someone just pointed out that the second "n = " in the one using if is wrong
17:12:47 <Igloo> It should just be "fact n = if n > 0 then n * fact (n - 1) else 1" as it just returns the value n * fact (n - 1), it doesn't assign it to n or anything
17:13:23 <Igloo> kunphuzil: Also notice how the one on 2 lines looks sort of like the pseudo code you have for the fibonacci series
17:13:50 <kunphuzil> Yeah, sorta
17:14:48 <kunphuzil> Hmm. I think this next exercise is going to be easy now that I understand that
17:14:55 <Igloo> Cool  :-)
17:15:54 * Igloo goes to bed
17:16:14 <kunphuzil> Bye
17:16:18 <kunphuzil> Thanks for the help
17:16:20 <Igloo> np
17:26:00 <kunphuzil> Hrm
18:47:27 <kunphuzil> Hmm
18:47:46 <Heffalump> Hrm?
18:48:06 <kunphuzil> Can I paste some code?
18:49:51 <Heffalump> sure, if it's not too long (say less than 10 lines)
18:50:23 <kunphuzil> ok, it's 10 lines. heh
18:50:30 <kunphuzil> module Main
18:50:30 <kunphuzil>         where
18:50:30 <kunphuzil> import IO
18:50:30 <kunphuzil> main =
18:50:32 <kunphuzil>         do hSetBuffering stdin LineBuffering
18:50:35 <kunphuzil>                 putStrLn "Please enter you name: "
18:50:37 <kunphuzil>                 name <- getline
18:50:40 <kunphuzil>                 putStrLn ("Hello, " ++ name ++ ", how are you?")
18:50:43 <kunphuzil> I get an error saying:
18:50:53 <whee> I think you mean getLine
18:50:57 <kunphuzil> ERROR "name.hs":11 - Last generator in do {...} must be an expression
18:51:04 <kunphuzil> Ah
18:51:11 <whee> but wait, that looks weird
18:51:15 <kunphuzil> Thats what I needed, i knew I was missing something small ;)
18:51:22 <whee> that fixed it?
18:51:52 <Heffalump> your indentation looks wrong
18:52:02 <Heffalump> are putStrLn, name etc at the same indentation as hSetBuffering?
18:52:07 <whee> yes, I'm thrown off by the indentation heh
18:52:40 <kunphuzil> oh
18:53:14 <kunphuzil> ok, works now
18:53:27 <kunphuzil> that is strange. i don't like the "layout" system much :/
22:04:00 <kunphuzil> doCheck num =
22:04:00 <kunphuzil>         if num < 0
22:04:01 <kunphuzil>                 then do putStrLn "The sum is: "
22:04:10 <kunphuzil> ^^ I am getting layout errors..
22:06:14 <dark> Looks okay so far, but what's the next line?
22:06:35 <lament> heh
22:06:39 <lament> too late :)
