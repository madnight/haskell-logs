00:01:08 <glguy> cocreature: You around?
00:01:13 * hackagebot templateify 0.1.0.0 - Make template from website  https://hackage.haskell.org/package/templateify-0.1.0.0 (AlanHawkins)
00:01:15 <cocreature> glguy: yep
00:01:44 <glguy> Have you been using the client much, or did you just immediately discover those two things just now?
00:02:22 <cocreature> glguy: the latter, I’m still using weechat atm but I’d like to switch so I just look at what’s missing for me and try to implement it
00:03:27 <glguy> if you start any implementation and have questions #haskell-irc is also available
00:03:33 <cocreature> ah great
00:03:59 <glguy> dolio has been adding features also
00:04:21 <glguy> able to discuss then there
00:06:13 * hackagebot swagger2 2.1.2 - Swagger 2.0 data model  https://hackage.haskell.org/package/swagger2-2.1.2 (NickolayKudasov)
00:06:33 <gfixler> https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:findMin
00:06:52 <gfixler> ^ I'm curious why all the min/max functions in Data.Map don't require Ord k
00:07:00 <gfixler> anything where I give a k requires Ord k
00:07:09 <gfixler> and min/max require Ord k
00:07:10 <johnw> probably because the data structure has already sorted everything
00:07:18 <johnw> so all you need to do is to look at the extreme edges
00:07:22 <johnw> that doesn't requires any comparisons
00:07:27 <johnw> just "always go left" or "always go right"
00:07:28 <gfixler> ah, that's probably it
00:07:43 <gfixler> cool, thanks
00:08:59 <gfixler> can I even make a map without an Ord k?
00:09:27 <glguy> empty maps and singleton maps might not need Ord
00:09:30 <kadoban> A Data.Map? You can make an empty one I guess? Maybe even a singleton
00:09:48 <gfixler> okay, singletons must be it
00:09:56 <gfixler> trying to understand why Ord k shows up everywhere
00:09:56 * hackagebot templateify 0.1.0.0 - Make template from website  https://hackage.haskell.org/package/templateify-0.1.0.0 (AlanHawkins)
00:09:56 * hackagebot swagger2 2.1.2 - Swagger 2.0 data model  https://hackage.haskell.org/package/swagger2-2.1.2 (NickolayKudasov)
00:10:05 <gfixler> if we could just unify my k with the Ord ks in the map
00:10:20 <Koterpillar> https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#g:5 exactly
00:10:33 <gfixler> yep
00:10:36 <gfixler> thanks all
00:11:21 <Koterpillar> I guess you could store the (cmp :: k -> k -> Ordering) somewhere in the map, then you need Ord for _all_ the constructors but not further
00:11:40 <ertes> Koterpillar: no, that doesn't work
00:11:48 <Koterpillar> ertes: why not?
00:11:50 <Koterpillar> however, I don't see a use for this, other than Scala
00:12:10 <ertes> Koterpillar: which comparison function would M.union choose?
00:12:20 <glguy> the first one
00:12:28 <glguy> and then not use the ordering from the service
00:12:31 <glguy> second
00:12:40 <glguy> and be slower
00:12:43 <glguy>  :)
00:13:10 <ertes> glguy: note that mappend = M.union
00:14:04 <ertes> and in any case, it would leave Map wide open to violating invariants
00:14:28 <Koterpillar> what kind of invariants?
00:14:31 <ertes> one way to encode a comparison function with Map is to make it type-bound rather than value-bound, e.g. by using reflection
00:15:26 <ertes> union :: (Reifies o (k -> k -> Ordering)) => Map o k a -> Map o k a -> Map o k a
00:15:30 <kadoban> Koterpillar: Invariants like ... being able to find values in it that are in there.
00:15:33 <Koterpillar> assuming there's no interface to alter the stored comparison function
00:15:47 <Koterpillar> kadoban: if you get hold of the Map constructor, you can already do it
00:15:51 <Zemyla> Why don't IORefs have their input and output variable types separated?
00:16:04 <ertes> Zemyla: hmm?
00:16:09 <ertes> input and output?
00:16:29 <Zemyla> Like readIORef :: IORef a b -> IO b; writeIORef :: IORef a b -> a -> IO ()
00:16:44 <Zemyla> Then IORef can be a profunctor.
00:17:00 <ertes> Zemyla: what's the type of newIORef?
00:17:20 <Zemyla> ertes: a -> IO (IORef a a).
00:18:16 <ertes> Zemyla: that doesn't seem useful…  i could imagine a functor (or even monad) around IORef though
00:18:57 <Zemyla> ertes: The a in IORef a is invariant. It can't be a functor.
00:19:52 <ertes> Zemyla: data IORef' :: * -> * where IORef' :: IORef a -> (a -> b) -> IORef' b
00:21:04 <Zemyla> ertes: How do you write to it?
00:21:29 <ertes> ah, true
00:23:34 <ertes> Zemyla: but since it's invariant, keep the original IORef around for writing
00:23:44 <ertes> that's as good as having the second type variable
00:26:21 <ertes> (and instead of IORef' just use IO itself)
01:05:37 <sinelaw> Hey, having trouble running Intero. 'stack ghci' is showing the usage string instead of doin whatever it's supposed to be doing
01:12:48 <nure> h-hi
01:20:43 <srhb> nure: Hello again.
01:22:58 <jle`> ertes: maybe a profunctor then :p
01:34:14 <nure> how to disable joined/left notifications on irssi?
01:34:56 * hackagebot x86-64bit 0.1.1.1 - Runtime code generation for x86 64 bit machine code  https://hackage.haskell.org/package/x86-64bit-0.1.1.1 (PeterDivianszky)
01:35:16 <Sose> nure: /ignore #channel1,#channel2 JOINS QUITS PARTS
01:35:16 <srhb> nure: /ignore -channels #channel * JOINS PARTS QUITS NICKS -- I'm sure there's also an #irssi channel if you need specific help with your client. :)
01:36:05 <nure> oh, thanks
01:44:06 <dysfun> having difficulties with Freer and overlapping instances. Anyone know how I can resolve this? http://paste.lisp.org/+6WWX
02:04:58 * hackagebot large-hashable 0.1.0.0 - Efficiently hash (large) Haskell values  https://hackage.haskell.org/package/large-hashable-0.1.0.0 (AlexanderThiemann)
02:20:27 <estonoboo> hey
02:21:16 <ongy> Hi again
02:22:36 <estonoboo> how can I test that GHCi is actually working?
02:22:50 <srhb> estonoboo: Start it with ghci?
02:22:59 <srhb> estonoboo: 2 + 2 should evaluate :)
02:23:03 <ongy> in a terminal
02:23:14 <ongy> or does ghci come with a gui on windows?
02:23:21 <estonoboo> hm, lemme see
02:23:23 <srhb> ongy: No, I think you're right, good catch.
02:23:44 <srhb> It will probably just terminate instantly if opened without a terminal, I guess.
02:23:52 <srhb> (Or keep running uselessly in the background? Not sure.)
02:23:57 <danilo2> Helo guys! How can I add to stack a custom extra build tool, that is a binary and would be pulled from github whenever anyone would like to install a package? 
02:24:41 <estonoboo> it does have a gui, but it starts so slowly the first time
02:25:16 <srhb> estonoboo: Not sure why that would be, it's instant in my terminal.
02:25:16 <ongy> danilo2: I'd say, please don't do that. (imo pulling random binaries in a compile step is just horrible)
02:25:56 <estonoboo> @shrb: the difference is that you started it before
02:25:56 <lambdabot> Unknown command, try @list
02:26:13 <srhb> estonoboo: No, it was fast the first time, too. :)
02:26:16 <danilo2> ongy: ok so how would you do it? To compile this library user needs a specific haskell pre-processor available in a path. I dont want to force him to manualy install it before the compilation
02:26:28 <srhb> estonoboo: (I know because I install different versions of ghc all the time)
02:26:34 <estonoboo> why
02:26:40 <srhb> estonoboo: Testing compatibility.
02:26:46 <srhb> estonoboo: Fun... :-)
02:26:51 <estonoboo> :V
02:27:03 <srhb> estonoboo: It's just a one liner here, nothing too bad.
02:27:34 <estonoboo> um, what? what oneliner?
02:27:46 <srhb> estonoboo: Just asking my package manager to install the version I want.
02:27:57 <ongy> danilo2: I would force them to get it themselfs. It's what I have seen to be done and I guess most people prefere it.
02:28:02 <srhb> estonoboo: Anyway, does it work now?
02:28:10 <estonoboo> yes, NOW it works
02:28:13 <srhb> Great. :)
02:28:33 <estonoboo> and now let's get deep in the hole iykwim :V
02:29:16 <danilo2> ongy: in the stack manual there are even words aobut it: "stack will automatically install build tools required by your packages or their dependencies, in particular alex and happy." . So I think stack authors think its better not to force users to do it manually
02:29:18 <srhb> estonoboo: I hope I don't. A sober environment in #haskell is something to strive for. :)
02:29:39 <estonoboo> not into that hole, into the Haskell hole
02:29:45 <estonoboo> ye perv... :D
02:29:51 <ongy> danilo2: happy and alex are on hackage. Pulling in packages and compiling the build tools is fine. Pulling some binary file is ugly
02:30:06 <estonoboo> also, can you have git integration with vim?
02:30:15 <danilo2> ongy: I can make a hackage package out of it
02:30:19 <srhb> estonoboo: Yes, there was something similar to magit for Vim, I think...
02:30:38 <danilo2> ongy: this are some python scripts but are used for haskell pre-processing, so I can make hackage package
02:31:19 <danilo2> ongy: I've never told about a binary, oh i did! I'm sorry - I ment a python scripts
02:32:50 <ongy> danilo2: I have no idea about stack, and I'm not sure what exactly the rules for hackage are. I just wanted to point out that pulling binaries is ugly. With python scripts, I'm not sure. I don't like it, but that's me personally
02:33:53 <danilo2> ongy: of course, pulling binaries is ugly - I was talking about small python scripts, sorry for using wrong words on the beginning. Still I'd like to integrate it with stack so the user dont have to think aobut it when installing the package
02:34:04 <ongy> and have you checked if you can use template haskell or some other existing tool instead? That would make this problem go away
02:36:37 <puregreen> danilo2: won't this make your library unusable on Windows? I think Python isn't provided there by default
02:37:03 <ongy> or at least windows does things with PATH which makes it really annoying to use in scripts
02:37:20 <danilo2> puregreen: sure, there will be need to have python on windows, but still - it is better than requiring to have a custom python scripts pulled from somewhere
02:37:54 <danilo2> puregreen: this is not a widley used library - its rather a bigger project, so if someone would need to use it, this sohuld not be a problem
02:38:09 <ongy> danilo2: can you point us to the scripts you are using? maybe there's a better way with builtin tools
02:38:39 <danilo2> ongy: thiss are our custom scripts allowing us to pre-process haskell osurce files acocrding to some rules
02:39:17 <danilo2> ongy: we do it because we are for example adding a syntax similar to `case of` , which generates some TH calls and optimizes them so during compilation time we've got simple lookup table there
02:41:59 <puregreen> you can probably download and run the scripts in Setup.hs if you really have to
02:42:16 <puregreen> (or you can rewrite the scripts in Haskell and include them into Setup.hs)
02:43:21 <clem_> Hey there, I'm pretty new to Haskell, and as an exercice, I'm trying to implement a simple websocket server who decode and store the received messages in redis. My code: http://lpaste.net/175297 . The error I get: http://lpaste.net/175298
02:43:22 <danilo2> puregreen: I dont want to run them. I want to use the -F -pgmF ghc flag, so everytime I re-compile a file using stack this file is pre-processed by the sscripts. I'm doing it currently like this (ghc allows using pre-processors this way). The only problem is that I want users to have the scripts and to be in the newest version. 
02:43:58 <danilo2> puregreen: stack has in its FAQ info that it can bring extra build tools, like happy, but I cannot find any further info about it
02:44:09 <srhb> clem_: Looks like you forgot an argument.
02:44:29 <puregreen> people install libraries with cabal as well, so what stack can/can't do doesn't matter
02:44:46 <puregreen> unless you're fine with the library being only installable with stack, too
02:44:58 <srhb> clem_: I wonder if you meant (R.set "msg" . pack . message) m
02:45:16 <puregreen> at which point the question arises: what's the point of having it on Hackage if the user would have to jump thru the hoops no matter what?
02:45:31 <kadoban> danilo2: You'll probably want to ask in #haskell-stack ... likely at a better time of day. I never learned how the build-tools installation thing actually works, heh.
02:45:31 <danilo2> puregreen: I'm fine with it. Its not a widely-used librayr -it is a project
02:45:49 <danilo2> kadoban: yeah, good point! Thank you :)
02:46:09 <clem_> srhb: That's it ! Thanks a lot !
02:46:11 <kadoban> Yeah I question how useful this actually is. If it's so small userbase, just make a little script that sets up the dev environment for people?
02:46:27 <srhb> clem_: Sure thing.
02:50:14 <Gurkenglas> http://lpaste.net/5561543298935422976 ummm
02:50:43 <Gurkenglas> https://hub.docker.com/r/fpco/stack-build/ stopped responding?
02:50:58 <Gurkenglas> Is this remote? I thought Im working with a vm on my machine here
02:51:36 <pavonia> Can anyone think of a reason why a call to System.Win32.failIfFalse_ in GHCi could make GHCi crash while in a compiled binary it works fine?
02:52:59 <srhb> Gurkenglas: Depends what you mean. You run the container from the image locally.
02:53:51 <srhb> Gurkenglas: Looks like the docker daemon, the docker container or your vm went down.
02:53:57 <srhb> Gurkenglas: Or some combination of those.
02:54:11 <Gurkenglas> how do I restart them?
02:54:18 <srhb> Gurkenglas: https://192.168.99.101:2376/v1.24/containers/create -- this is your docker daemon at least.
02:54:38 <Gurkenglas> page is blank
02:54:51 <Gurkenglas> no wait timeout
02:54:51 <srhb> Gurkenglas: No idea. You should probably find out why they went down and start over with that error corrected.
02:58:11 <Gurkenglas> Hmm restarting the "docker quickstart terminal" gets me stuck at "waiting for an ip" which google says is fixed by reinstalling host os...
03:01:13 <srhb> Gurkenglas: Fun!
03:01:35 <srhb> Gurkenglas: If you've torn out all your hair, you're reaching epic docker master levels.
03:03:19 <Gurkenglas> Killed "default" in VirtualBox after reading http://stackoverflow.com/questions/35958619/docker-terminal-waiting-for-an-ip , docker works but the github projects i cloned there are gone.
03:03:43 <Gurkenglas> now lets see if this happens again if i retrace the steps
03:07:09 <srhb> With the sdl2 bindings, should I destroy the renderer and window before using quit?
03:08:36 <Gurkenglas> (Ohh probably had something to do with my C: being full)
03:09:24 <srhb> Gurkenglas: re. things being gone: Depends how you're starting the containers. docker run creates a new container from the image.
03:11:20 <kamyarinanloo> hello everyoe
03:11:25 <srhb> kamyarinanloo: Hi
03:11:31 <kamyarinanloo> hello everyone
03:11:46 <kamyarinanloo> Can I ask some haskell question here?
03:11:54 <kamyarinanloo> any pro haskeller
03:11:57 <kamyarinanloo> answer me
03:12:01 <srhb> kamyarinanloo: You can ask any Haskell question you like.
03:12:12 <srhb> If you restrict yourself to proessionals, you might get fewer, or slower responses :)
03:12:15 <srhb> Lots of hobbyists here.
03:12:20 <nure> i hate questions i this
03:12:22 <kamyarinanloo> oh sure
03:12:26 <kamyarinanloo> here is the problem
03:12:26 <nure> no, you can`t, leave
03:12:40 <srhb> nure: Yes they can. Be nice.
03:12:45 <kamyarinanloo> I have written a utility for our internal use
03:12:53 <nure> so pointless
03:13:22 <kamyarinanloo> I have used ansi console for coordinated and colored text response
03:13:47 <Gurkenglas> sure be pointless, but that doesnt necessarily break their followup question, you can switch to "get on with it" or something if you need to be mean :P
03:14:04 <kamyarinanloo> I first completed the code using nested case expressions with 'just' which is boilerplate in presence of >>=
03:14:24 <kamyarinanloo> then started to make the code better omitting  boilerplates
03:14:39 <kamyarinanloo> so tried to eliminate extra case respones
03:14:42 <Gurkenglas> but it doesnt work? put your code on lpaste.net so we can fix it
03:15:05 <kamyarinanloo> But now I have nested monads as like IO (Maybe (IO []))
03:15:14 <srhb> Woops, you probably don't want that.
03:15:18 <kamyarinanloo> which I dont know how to print out
03:15:26 <srhb> You can't.
03:15:28 <kamyarinanloo> Can I send the file for you?
03:15:29 <Gurkenglas> You probably want MaybeT. I can show you how to use that if you use lpaste
03:15:38 <srhb> kamyarinanloo: You can upload a minimal example to lpaste.net :)
03:16:43 <kamyarinanloo> Here is the code:
03:16:44 <kamyarinanloo> http://lpaste.net/175302
03:17:40 <kamyarinanloo> please check it out
03:18:55 <srhb> kamyarinanloo: Have you ever worked with monad transformers?
03:19:20 <kamyarinanloo> Actually I am trying right now
03:19:47 <nure> Monad transformers are most hatefull things for me 
03:19:59 <nure> because i am not so smart :(
03:20:03 <srhb> kamyarinanloo: MaybeT IO a could be useful
03:20:20 <srhb> nure: It doesn't take smarts, just practice. :)
03:20:28 <cocreature> nure: a lot of smart people are also not extremely fond of them :)
03:20:49 <kamyarinanloo> I am grabbling all over the code with MOnad transformers
03:20:50 <srhb> cocreature: Usually for different reasons, I think. ;-)
03:20:51 <kamyarinanloo> with no success
03:21:18 <srhb> kamyarinanloo: Well, it would probably be easier if you reduce it even more to get something basic working with runMaybeT and then fill back in your functionality
03:21:28 <srhb> kamyarinanloo: Once you have a basic example working, it gets quite easy to extend.
03:22:11 <kamyarinanloo> How can I use it?
03:22:46 <kamyarinanloo> srhb: I am actually confused with monad transformers since I have no true intuition about them yet
03:22:56 <jle`> i don't think you ever really need monad transformers
03:23:03 <jle`> but yeah, they do help with boilerplate reduction
03:23:07 <srhb> Nor do I, but I think they're a valid solution.
03:23:13 <jle`> actually there are situations where you would need monad transformers
03:23:34 <jle`> but it doesn't sound like this would be one of them
03:24:18 <BlueSkull> hi guys, i have a problem that i don't know how to start...
03:24:34 <BlueSkull> the problem is to find in an array the maximum and the rest
03:24:42 <BlueSkull> with this prototype: maxAndRest :: Ord a => [a] -> (a,[a])
03:24:45 <srhb> BlueSkull: Do you really mean array?
03:24:58 <jle`> BlueSkull: does the result have to preserve the order?
03:25:07 <jle`> also, yes, those aren't arrays
03:25:19 <BlueSkull> we have two versions, with and without
03:25:35 <BlueSkull> but neighter of each i know hoy to implement
03:25:44 <kamyarinanloo> Now, who can help me?
03:25:57 <jle`> BlueSkull: with and without what?
03:26:11 <BlueSkull> start with the most easy
03:26:24 <BlueSkull> i hope to understand :P
03:26:59 <jle`> you can try implementing it as a fold, which is fairly straightforward if you don't care about preserving the order
03:26:59 <BlueSkull> i really bad in haskell
03:27:22 <jle`> your result is (a,[a]), so that's a good start for your accumulator
03:27:47 <kamyarinanloo> Hey guys, you forgot my problem?
03:28:04 <kamyarinanloo> I feel I need monad transformers but I am not master at them
03:28:15 <BlueSkull> jle`, ok, thank you for the idea, i will try
03:28:47 <jle`> it's not obvious what your initia accumulator would be, though, so that's kind of weird
03:29:22 <jle`> maybe (Maybe a, [a]) would be a mre meaningful accumulator
03:29:25 <BlueSkull> jle`: and what about if i need to keep the order?
03:30:02 <srhb> kamyarinanloo: Could you condense the problematic code a bit? It's a bit large currently :)
03:30:12 <BlueSkull> jle`: ufffff, sound hard for me at this time
03:30:22 <jle`> do you know about Maybe ?
03:30:43 <kamyarinanloo> srhb: I am reading some data from a REST service an then showing them on the console
03:31:02 <lpaste> Gurkenglas annotated “My Utility” with “kamyarinanloo, this better?” at http://lpaste.net/175302#a175305
03:31:18 <kamyarinanloo> srhb: The data is about an operator status which can be online, offline and busy
03:31:24 <srhb> kamyarinanloo: Ah, Gurkenglas got you covered :)
03:32:35 <BlueSkull> jle`: i have seen, but still didn't use
03:32:55 <kamyarinanloo> Gurkenglas: thanks lets consider the code
03:34:13 <damiansoriano> hello everyone, I need to generate a JWT token to connect to google, does anyone done that already?
03:34:22 <damiansoriano> I checked some libs but they are not easy to use
03:34:48 <Gurkenglas> (I left what your code does unmodified, just showed how it would look if you used MaybeT. You can show me the original code that works if you want me to modify that :P)
03:35:06 <the_2nd> I want to use attoparsec to exactly take a 2 char hex. Using hexadecimal will use the entire string as long as it is hex, tho
03:35:15 <the_2nd> how can I limit this to only two chars?
03:35:51 <srhb> the_2nd: Make a parser that consumes any hex char, run it twice.
03:36:04 <cocreature> the_2nd: you could use satisfy isHexDigit twice
03:36:17 <kamyarinanloo> Gurkenglas: your code does not work
03:36:27 <kamyarinanloo> just compile it it raises an error
03:36:44 <kamyarinanloo> liftIO $ username <- getLine
03:38:07 <cocreature> kamyarinanloo: you probably want username <- liftIO getLine
03:40:35 <kamyarinanloo> The code still raises errors :(
03:40:49 <cocreature> if you show us the error we might be able to help
03:41:11 <kamyarinanloo> operator_status2.hs:43:54: error:
03:41:11 <kamyarinanloo>     • Couldn't match type ‘Maybe (IO [()])’ with ‘IO ()’
03:41:11 <kamyarinanloo>       Expected type: f (Maybe (IO ()))
03:41:12 <kamyarinanloo>         Actual type: f (Maybe (Maybe (IO [()])))
03:41:14 <kamyarinanloo>     • In the second argument of ‘($)’, namely
03:41:16 <Gurkenglas> (Right sorry for that wrong line)
03:43:39 <cocreature> removing the return in line 58 and changing forM to forM_ might work
03:44:25 <Gurkenglas> Oh I see, I didnt expect the putStrLn "Login failed!" to be nested that deep, try pasting your original working code with the loads of boilerplate
03:44:49 <troydm2> Cale: hey, so I've tried all sorts of stuff yesterday and still about 800mb of data is occupied by ARR_CHAR, btw you can see my latest commit I've refactored a bit of code that lowered memory usage slightly but still it's very high, about 1gb
03:44:58 <black0range> Hello guys! This isn't strictly a Haskell question, but could anyone give me a hint how to solve this problem efficiently? :) https://open.kattis.com/problems/adventuremoving4
03:47:34 <troydm2> Cale: as I'm converting Text -> ByteString might there be something in between, maybe memory is actually occupied by Text which aren't converted to bytestring yet
03:48:37 <kamyarinanloo> Here is the original working code: http://lpaste.net/175315
03:50:08 <Gurkenglas> black0range, here's your hint: Each kilometer you travel should be paid for at the cheapest tank station in the previous 200 kilometres.
03:50:53 <Gurkenglas> (I think.)
03:51:17 <kamyarinanloo> Gurkenglas: Watch my original code plz
03:52:05 <black0range> Gurkenglas: Hmmm
04:00:38 <the_2nd> I am unable to create the error case for my parsers
04:00:39 <the_2nd> http://lpaste.net/175320
04:00:39 <lpaste> Gurkenglas annotated “operator_status” with “operator_status (annotation)” at http://lpaste.net/175315#a175323
04:01:11 <Gurkenglas> the_2nd, $ between return and Fail
04:01:51 <lpaste> Gurkenglas revised “operator_status (annotation)”: “operator_status (annotation)” at http://lpaste.net/175323
04:02:01 <the_2nd> Gurkenglas, error : http://lpaste.net/175324
04:03:22 <Gurkenglas> the_2nd, try 'fail "test"' instead of 'return $ Fail "test"'
04:04:13 <Gurkenglas> You could also try putting do to the left of the case and leaving out the _ -> line, that should make non-exhaustive patterns call fail
04:05:28 <kamyarinanloo> Gurkenglas: The code does not compile yet.
04:05:28 <Gurkenglas> scratch that last line
04:05:54 <Gurkenglas> As in, disregard the line before the one where I said that, not try removing the last line of your code in hopes of that making it work x)
04:05:55 <the_2nd> Gurkenglas, weird, it accepts hex chars > f and seems to replace them with 0
04:06:10 <the_2nd> az ay ... become 12
04:06:31 <Gurkenglas> kamyarinanloo, paste an error
04:06:32 <the_2nd> cz ... I mean
04:06:36 <Gurkenglas> this time in an lpaste
04:07:48 <kamyarinanloo> I thought you could compile yourself, but here is the error: http://lpaste.net/175328
04:08:04 <Gurkenglas> the_2nd, http://hackage.haskell.org/package/attoparsec-0.13.0.2/docs/Data-Attoparsec-ByteString-Char8.html#v:parseOnly "This function does not force a parser to consume all of its input. Instead, any residual input will be discarded."
04:08:20 <Gurkenglas> Im not good with all that command line stuff
04:08:28 <Gurkenglas> see the last few days of me talking on this channel
04:09:56 <the_2nd> Gurkenglas, lovely, working now
04:12:31 <lpaste> Gurkenglas revised “operator_status (annotation)”: “kamyarinanloo, try this” at http://lpaste.net/175323
04:12:55 <Gurkenglas> noo wait
04:13:13 <lpaste> Gurkenglas revised “kamyarinanloo, try this”: “kamyarinanloo, now ._.” at http://lpaste.net/175323
04:14:15 <kamyarinanloo> Still error! Can you try to compile your code first plz?
04:18:11 <Gurkenglas> Well I can try but itll take a while and I might not get there
04:20:06 * hackagebot hpack-convert 0.14.3 - Convert Cabal manifests into hpack's package.yamls  https://hackage.haskell.org/package/hpack-convert-0.14.3 (yamadapc)
04:21:01 <srhb> kamyarinanloo: You're also asking a bit much. :P The basic framework is correct, you just need to fix the type errors. :)
04:21:39 <kamyarinanloo> srhb: Sorry! But I have to reach the correct working code and them start hours considering and digesting it!
04:21:56 <kamyarinanloo> Otherwise, I already have got non-working code!
04:22:08 <srhb> kamyarinanloo: Still, people are volunteering their help. You can buy a service if you want something else :)
04:22:27 <Gurkenglas> (39/84 at installing some of the packages)
04:22:36 <kamyarinanloo> srhb: It is ok. Just guide me how I can buy service, I am happy with it
04:23:41 <kamyarinanloo> And I thank everyone here for helping me specially Gurkenglas for giving me so much time
04:23:48 <Gurkenglas> There was that site where you can pay people up to and including ekmett to tutor you
04:23:51 <srhb> kamyarinanloo: The problem is that it was assumed ok200 is a value already.
04:24:03 <srhb> It was used in a pattern match, I think
05:59:54 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | Hackage status? https://status.haskell.org | https://downloads.haskell.org'
05:59:54 --- topic: set by glguy on [Fri Aug 05 17:41:47 2016]
05:59:54 --- names: list (clog oish_ omefire1 dsh PeterStuart hk238 Ne0nD3lta Rodya_ pellenation bitfurry infinity0 gilligan_ anton__ tlaxkit Guest79402 docnvk maybefbi wtetzner Berra bbielsa muzzle nickager abdul crobbins thewormkill leat3 unclechu binaryplease madbub amyers dddddd_ herzmeister dzack wolfcore slackircbot rydgel sepp2k shookees ec\ dixie Itkovian quickbrownfox DeATh`RoW clem drets anuxivm jutaro unK_ black0range vaibhavsagar derpderp ggole oolongCat arw contiver edon_)
05:59:54 --- names: list (suraizm_ vbsd dramforever athan Ranhir nure damiansoriano grouzen tv2 uuplusu BlueSkull silver simukis__ freekevin oish niluje fengshaun Tendies sdothum whald citaret chlong|mtg zcourts Voldenet sigma914 ubert locallycompact quchen raichoo xinming estonoboo strelox ype panosk atomi Sose phileas magneticduck1 ertes Satyajit marr daniel_w psychicist__ Gurkenglas hackebeilchen zero_byte tomphp Boomerang kritzcreek kapral JUgelen pie_ [n1x]_1 MrWoohoo mattyw)
05:59:54 --- names: list (danza jibi benl23 bjz edwinvdgraaf terlar Rodya shafox albertid jhrcek deam jgt1 vydd dexterph ouch_my_spleen structuralist hackagebot madidier BartAdv mw m0rphism Swizec gfixler t0by benonsoftware CoconutCrab emmflo jameseb pdgwien lyxia Fenne Hi-Angel CurryWurst wvdhaute TxmszLou zipper vlatkoB robogoat zeroed lokydor Zekka lambdafan thc202 danvet wedens goodboy dolio isochronia xaxisx piyush-kurur av_ phanimahesh riscool rossberg_ haasn ramky qguv bydo)
05:59:54 --- names: list (dsantiago drewdavis bertschn_ cross alang__ hamishmack elementalest t0mb0_ texasmynsted _sjs Stratege Nahra cpup Sonarpulse pfurla hexagoxel juhp lspitzner exferenceBot pavonia cyphase slomo_ Nivim kv sebastian-w Cale shangxiao w4and0er96 Lord_of_Life a3Dman cheater numee justanotheruser alx741 PatrickRobotham calloc Rotaerk rootnode cromachina nakal__ predator117 markus1189 nwf acertain padre_angolano Sgeo_ latro`a_ mauke jdt case39 thunderrd Philonous)
05:59:54 --- names: list (hive-mind puregreen buttbutter Moto-chan ncl28 r143255 M2tias gienah fr33domlover pkmx[m] M-david brian[m] srcerer eikke rembo10 Plastefuchs MindlessDrone emiliocobos nkpart Bane^ etrepum gornikm acro_ crank1988_ OliPicard Desoxy rtur jcp tomus japesinator andyo Ninja3047 nilOps mceier wrmsr nikolah guios bsmt arianvp trajing kriztw xaimus cnr aatxe scared1 geal Xandaros erebe2 ghorn_ deni_ flonk_ ReinH otulp ongy Zemyla fryguybob Fuuzetsu anoe_ marens_)
05:59:54 --- names: list (aleator_ bergmark so_ PHO navilan- kshannon_ ppnkk_ RazorX jw358 Ariadeno_ mxf_ mokus__ spacebug_ chchen_ bengt__ fmapE_ orzo_ luite_ lenstr absence wrengr_away dmwit koomi PlasmaStar senoj dong-le Zialus thallada c-rog timrs2998 chrisg- hpd ClaudiusMaximus jchia1 tristanp Myrl-saki Noldorin robertk moei andrewsw jtobin AppleJacks24 alex_lu Robin_Jadoul Black-Wolf deank mda dredozubov Sigyn cchalmers Tinchos phaji mvr_ schjetne garphy taksuyu vili_ jcreekmore)
05:59:54 --- names: list (_kit_ Tourist johnv_ Deadhand _ashbreeze_ AdituV isenmann otto_s ninedotnine shirt Sonderblade imalsogreg tristero jud^ KeelOfSteel codedmart PotatoGim ludat Bashmetim Axman6 ovibos armin TheAuGingembre martingale Khisanth NeverDie gregoire s4kashya_ cdsmith nathyong shymega jcdietrich catsup execut3 abbe Frankablu cpape vincenzo fractalcat cdidd jmnk h3adrush dibblego nak kosorith erikd SAL9000 nshepperd solrize oldmanmike myfreeweb amiri BananaMagician)
05:59:54 --- names: list (albel727 bb010g[m] fall_ Mon_Ouie burp87 DustyDingo ajmccluskey kfpratt Guest34040 etcinit ryanpcmcquen uwap esmiurium shesek elgot asivitz Khudher sevas_ obadz besenwesen ps-auxw Mandus reda tomjaguarpaw bbee supki shyn statusbot revprez revprez_cons verement SiCC thomas glguy pikajude tsani wting hnz SoupEvil drdo jloomis Twey orion amuck baetheus FledRebel pikpok quaestor Atrumx wizonesolutions sleblanc psacrifice opios spaceghost_ ajaniMember Hafydd)
05:59:54 --- names: list (machinedgod astocko wagle fromeroj fiddlerwoaroof jokleinn whiteline drewr guampa pkug je5finger Didac GXNPwd xfix phadej Moyst jimki polux M-Shrike M-wamaral davidar M-Quora SShrike M-Magnap SeriousBug[m] M-schmittlauch M-mistake M-Illandan tagada[m] radix M-krsiehl kaz tax dmiles moop aloiscochard srenatus[m] l3france s4kashya dfranke djellemah Johannes13 pacak kilimanjaro bjobjo Draggor Ravana Rarrikins whoops _xor zebr m1dnight1 ernst tommd fkurkows1)
05:59:54 --- names: list (spaceghost rieper ireniko Maxdamantus dhananjay herzen wolfram Jaak kolko trilog bshelden malice` meditans_ parisianSummer Ezku monty jophish Cetusx m1dnight_ mt kini Willis cin sujeet bluepixel tusj lhynes tswett cyberlard cbaines Ford_Prefect LeaChim demize vqrs Sornaensis Tesseraction dxtr t0m0 shachaf davl Nycatelos rotcpy tobik cdk_ ortmage irclogger_com koz_ cschneid norotartagen AntiSpamMeta hiratara mimi_vx raid SuperTux88 tortal ircbrowse alang)
05:59:54 --- names: list (lpaste jak nyuszika7h Blkt Jaxan fergusnoble codehero ManiacTwister Baughn_ rockfruit akermu Quintasan kier minad TimWolla yaknyasn zopsi incomprehensibly sewilton CARAM__ caw rstone jml magicman hansihe stasku____ nurupo filthy_casual sdx23 jle` rcsgns recycle Morgawr mnoonan seyt int-e IndigoTiger joehillen tg bencryption suzu mtesseract theorbtwo chipf0rk carc swistak35 krgn byorgey magthe yusukesuzuki steshaw sbrg cgfbee mrBen2k2k2k cYmen monkeyiq)
05:59:54 --- names: list (Raptor8m3 tnks clever worch mgaare TheSpectre paf31_ Starfire beckyconning_ brennie mrlase zph_ qmm bgyss Flaeme henriquev spicydonuts spinda xplat|work ninegrid mudfog_ banjiewen JackMc kevinkjt2000-tab watersoul_ squisher dh liste metalrain LnL Raynes Enigmagic nont_ Wamanuz jxv Oxyd jbalint mdarse MK_FG DigitalKiwi posco euphoria- abrar srk saml ramatevish oberstein acowley Guest66632 whaletechno MitchW_ mno2 Natch ggherdov cstrahan carter seanparsons)
05:59:54 --- names: list (NemesisD micmus okek ocharles alphonse23_ katymoe jlyndon ericbmerritt pkogan angular_mike sz0 razi1 stevenxl zrl zero7 shennyg trig-ger amatecha joco42 vikram__________ solidsnack jfokkan__ tarcwynne_ wyvern sephiap {AS} thoughtpolice bedouin chriswk jroesch_ enolan jessicah sa1 runeks fabianvf mkurkov TabAtkins lukexi afcondon gmci bigs nbouscal bitonic AlainODea georgew jmct loopspace shelling__ jorendorff_ phuu dstockwell rfw heyj sbauman tjpeden)
05:59:54 --- names: list (pchiusano sdemos johtso Sorella FMJaguar borkdude S11001001 parsnip mbrcknl shans_ lancetw psftw iphy yminsky dmoon1221 pootler_ Tritlo kjnilsson monad_cat pikhq idupree pyrtsa Matajon Xnuk maerwald mjrosenb Ke dogui kishar david_koontz jtcs Intensity hughrawlinson rbocquet glowcoil catgirl _6a68 toogley dpepsilon ent SLi jrp6 dsm Guest10413 sjl_ sLite Qommand0r gurki Arguggi bgamari moredhel cow_2001 coup_de_shitlord Skuzzzy sgronblo daishan spaceships bounb)
05:59:54 --- names: list (squimmy samgd kjanosz edran dschoepe max-m codebam ljhms snsapiens tinkyholloway Iceland_jack tlevine Anderson chokboy sohum johnw s4msung itsnevereasy Jonno_FTW luis yamadapc isomorphismes hyperbor1ean cjay no-n alem0lars SolarAquarion xacktm Klumben nckx sword_smith gseitz Chobbes thimoteus Nik05 niteria agrif tpsinnem richi235 runawayfive bizarrefish capisce petercommand kloeri shadowdaemon __main__ averell Freundlich qnikst iross implementation ahihi)
05:59:54 --- names: list (Taylor nlz arkeet Elision sivs carado orcus Elsi buoto1 zyla przembot hator klugez XMunkki s4kashya1 tokik undermink hrumph davidthomas bitemyapp skeet70 burp hanDerPeder cic heurist kuno Tharbakim obihann jstolarek haircode chirpsal1 Ralith_ mudfog statusfailed psmolen Tene rntz Fubar^ dpower MorTal1ty ryoia Scorchin hpc chishiki tippenein OutlawStar dxld SegFaultAX acfoltzer mikeplus64 sajith StoneToad tdammers zimp Yaiyan joncfoo nek0 atk pfoetchen malthe)
05:59:54 --- names: list (lexi-lambda valdyn fionnan cynick kosmikus tero- [swift] dtulig AustinMatherne cbm80 newsham pmade sm trampi dcoutts_ iliastsi Laney hydraz nathanic Nimatek_ rfk cjh` divVerent rotty verrlara thorkilnaur sleezd mitchty dcoutts noctux \u jgornick benjica geekosaur Brando753-o_O_o ElderFain jlouis bshd comboy Gothmog_ amiller icedev sqrt2 mjo naudiz kaol dpn` inr intelux marienz meretrix eyck electrostat noexcept lambdabot Dykam scinawa jnoah Diabolik grol)
05:59:54 --- names: list (lassulus Deewiant vishesh milessabin ThreeOfEight zmanian__ Phyx- esssing linduxed Madars opqdonut ion nille ido folsen Boreeas benzrf Tehnix andreass dju Kavec rvncerr froztbyte dysfun julmac strixy coeus_ dqd karls chronon-io_ majoh_ RageD saurik tek0_ djm joshc_ ziman tekacs horatiohb i- magbo flebron epta ninefingers LordDeath epitron zymurgy spion koala_man mendez Cathy skarn vin-ivar abh anachrome Guest9205 ft amontez ploop Ornedan adarqui)
05:59:54 --- names: list (prooftechnique wjm mikeizbicki carter-znc liyang miklcct suppi ahf saidinwot kyren _Shandy vikraman bogdanteleaga brixen marinintim Dr_sack wamaral monochrom avn felixsch TheVoid OH- __rlp Saimeidae acomminos vodkaInferno obiwahn joeyh Rabbit__ _flow_ wolf_mozart hiptobecubic vfs chattered `0660 oherrala eddsteel kwantam Biohazard shwouchk bananagram dario lieven gothos brt1 zpconn__________ gabiruh mitch_ joedevivo jonrh caasih Ulrar huonw bjs mpickering)
05:59:54 --- names: list (da-x aristid bartavelle Xorlev marcel stephe staffehn_ Bigcheese M-ou-se aweinstock theDon cods hegge shutdown_-h_now lachenmayer Jinxit edwtjo bvad_ TommyC Akii alpounet_ Cerise KaneTW yarou RGamma Phillemann joeytwiddle ephess_ gargawel simony knyppeldynan zerokarmaleft karshan eagleflo SphericalCow dilinger Hijiri knittl jstimpfle scopedTV angseus zomg kennyp ijp etabot hvr tolt kav quuxman si14 defanor Ankhers greenbagels kantokomi Profpatsch DrCode)
05:59:54 --- names: list (irishsultan ChongLi nekomune snoogie teppic BrianHV eatonphil reqq456 taruti nesqi surtn lanodan mmaruseacph2 greeny bsermons tessier cocreature schnizzle chris2 quicksilver Pucilowski nmattia Paks libreman Kneiva frontendloader crough jrib1 nathanel_ CindyLinz phaazon cantstanya Neo Ring0` Rembane ddima_ sleepynate tazjin thebnq erg betawaffle asjo martinbjeldbak_ callumacrae Reyu tych0 ephemeron maskd jordanlewis pdxleif boostedcabbage APic nopf platz tjbp)
05:59:54 --- names: list (dyreshark croben aaronm04 jotrk trevorriles tomku Nikotiini lnaia siddhu PanicSkittle chameco noplamodo toure zhulikas mniip bairyn davean hemite c_wraith ynyounuo mattp_ Fylwind alercah aupiff_ superfatkappa mak` xnyhps metaf5_ kungp DANtheBEASTman potatoe` indiffernet greymalkin Drezil asm89 brisbin dan64 Lutin` Eagle_Erwin mathu jackhill mads- benjamincrom hongminhee ski urdh abra0 jinblack DDR Athas cow-orker cmn ggVGc _janne supki_ codebje bind jix_)
05:59:54 --- names: list (Jello_Raptor mero hodapp staticfox Speed eL_Bart0 johl andjjj23 mach abk7 CosmicRay tzaeru ario patha mkloczko Horv Saizan Sam_ ironChicken logcat owa qnix Vq jokester fold4 ricardo82 PierreM x1n4u Bez_ julienXX hc dunj3 avdi adamCS Edoxile barrucadu Igloo osfameron wtw funfun arcetera Purlox ixian GGMethos otterdam swhalen KorriX joachifm flux pleiosaur eyenx_ hyPiRion Chousuke JRHaigh gsingh93 lispy notdan Eliel_ Greezler hbar_ seagreen bcoppens gnusosa)
05:59:54 --- names: list (JDevlieghere lpsmith mindos_cloud____ lyddonb ndeine peddie jzl owlscientist lattenwald luigy Ewout tumdedum sparr qz exio4 yeltzooo9 numberten honkfestival hxegon_afk wayne stux|RC-only Factionwars dalmahal tinco qinusty sanitypassing johnstein dustinm gpampara brezel kipd kmicu pelegreno JPohlmann chrzyki killtheliterate alanz nemesit|znc brolin_empey keteim BrAsS_mOnKeY lucz srhb Taneb arrdem sinopeus zxtx rom1504 kipras`away Amadiro relrod gridaphobe)
05:59:54 --- names: list (parsnipM_ xxpor shapr mrd lstrano Clint @ChanServ EvanR pharaun Belgarion0 Adeon tomaw Ov3rload marmoute hiredman Atlanis Ashy tctara mlhmwglt Geekingfrog octo_ keix danieli baweaver earthy optocoupler mankyKitty sisir__ reem slick solatis Liskni_si yorick edwardk Kruppe fairfieldt Forkk SenpaiSilver happy0 TRMander1on integral dgonyeo kyagrd ssedov dkua sclv YP-Cloud__ louispan xa0 andreypopp Vbitz seliopou chelfi jrslepak low-profile hausdorff niko)
05:59:54 --- names: list (fingerzam cjwelborn Tiktalik strmpnk henrytill armlesshobo unsymbol tumdum dredozubov_ MasseR d3lxa oelewapperke reynir fuziontech Adios Majiir Xe)
06:00:24 <ertes> Zemyla: you may find this paper interesting ("reflection without remorse"): http://okmij.org/ftp/Haskell/Reflection.html
06:02:38 <hexagoxel> (self-answer: i have to use ext2Q, and then ext1Q on the first argument. kinda boilerplaty, but works.)
06:02:43 * hackagebot language-dockerfile 0.2.3.0 - Dockerfile linter, parser, pretty-printer and embedded DSL  https://hackage.haskell.org/package/language-dockerfile-0.2.3.0 (yamadapc)
06:02:58 <hexagoxel> eh, s/ext1Q/extQ/
06:04:15 <ertes> Zemyla: it pretty much gives you a number of blueprints for how to design a sequence type for free categories
06:38:14 <AzureStigma> can someone explain term value vs type value
06:47:22 <Gurkenglas> MaybeT and ListT and EitherT should be unified into TraversableT
06:48:01 <mniip> and DistributiveT
06:49:27 <Gurkenglas> Wait I did something like that once except I think I didnt think of EitherT also falling under it and then I despaired at the quadratic amount of mtl instances
06:49:54 <mniip> ReaderT is traversable too iirc
06:50:02 <mniip> or is that Coreader
06:50:21 <mniip> :t sequenceA
06:50:22 <lambdabot> (Applicative f, Traversable t) => t (f a) -> f (t a)
06:50:52 <mniip> nope, WriterT is traversable, ReaderT is distributive
06:51:09 <Gurkenglas> hmmmyep thats it then
06:52:05 <Gurkenglas> so are all the transformers covered by TraversableDistributiveT? What about FreeT
06:52:19 <Gurkenglas> *Free
06:52:20 <mniip> no
06:52:24 <mniip> not all
06:53:04 <Gurkenglas> (TraversableDistributiveT is defined such that StateT is covered by it)
06:53:28 <mniip> as a composition of WriterT Endo and ReaderT?
06:54:05 <Gurkenglas> as a composition of TraversableT and DistributiveT
06:54:31 <Gurkenglas> StateT s = TraversableDistributiveT ((,) s) ((->) s)
06:54:49 <mniip> that wouldn't work
06:54:56 <mniip> it would have the wrong instance
06:55:08 <Gurkenglas> ah ok
06:55:11 <mniip> you need the Endo definition of StateT for that to work
06:56:21 <mniip> also would TraversableDistributiveT even work?
06:56:47 <mniip> :t distribute
06:56:48 <lambdabot>     Not in scope: ‘distribute’
06:56:48 <lambdabot>     Perhaps you meant ‘distrib’ (imported from Control.Lens)
06:56:49 <mniip> aw
06:57:28 <Gurkenglas> So StreamT should be DistributiveT Stream?
06:57:45 * hackagebot swagger2 2.1.2.1 - Swagger 2.0 data model  https://hackage.haskell.org/package/swagger2-2.1.2.1 (phadej)
06:58:40 <mniip> StreamT isn't a monadtrans is it
06:59:34 <sm> yamadapc: thanks for hpack-convert! that came at just the right time
07:02:42 <Gurkenglas> mniip, I think StreamT is ReaderT Nat
07:03:07 <Gurkenglas> DistributiveT g m a = g (m a)
07:03:39 <mniip> eh
07:03:48 <mniip> oh well yes okay
07:05:54 <Gurkenglas> So "This is a fancy way of saying it isomorphic to `(->) x` for some x." says DistributiveT is covered by ReaderT, so we're back to TraversableT and ReaderT
07:07:42 <Gurkenglas> Right this was my implementation http://lpaste.net/revision/151726 and mniip looked at it at one point and was yucked out by the instances and at some later point I saw something of his that thought could fix this
07:07:49 <Gurkenglas> *that I thought
07:08:51 <Gurkenglas> MonadT? That cant be right
07:10:04 <Gurkenglas> In fact removing the revision out of the link I found on google (site:lpaste.net TraversableT) renames MonadT to TraversableT x)
07:10:51 <black0range> Are there any build in function to do convert a fractional to a string with a given number of significant digits? ex: 3.1415 -> "3.142"
07:12:09 <sm> black0range: printf "%0.3f" n ?
07:13:39 <muzzle> is there a way to get byte-wise position information in Text.XML.Stream.Parse 
07:14:03 <muzzle> i.e. EventPos but instead of line/column a byte position
07:14:09 <SrPx> Is there something similar to bytecode but functional - i.e., a primitive language which functional programming languages can be compiled to, with the particular effect that one can measure the amount of work required to complete a program's execution (i.e., on bytecode, just count the number of instructions executed)?
07:14:10 <muzzle> that I can use with a Handle
07:19:07 <sm> SrPx: what about llvm ?
07:21:11 <ggole> "Amount of work required" is a pretty vague concept anyway
07:23:05 <ggole> You could compile + run on a  particular machine and count instructions retired, which gives you an idea of how much work was done for that compilation on those inputs on that architecture
07:23:31 <ggole> How much of that work was actually required and how much could be removed by clever compilation tricks, etc is another question
07:24:34 <magneticduck1> ggole: I think SrPx is looking for a functional language whose primitives are in direct correspondence to primops executed on the hardware
07:25:39 <ggole> That doesn't sound like a functional language at all :)
07:25:53 <ggole> Except if you regard instructions as functions from machine state to machine state, I suppose.
07:26:48 <ertes> SrPx: you can go as low as pure lambda calculus with some primitive types built in, and it still doesn't correspond to "work on machine"
07:27:29 <ertes> even pure lambda calculus requires things like GC
07:28:51 <SrPx> yep the issue with lambda calculus is that you can't really count how much work it took to reduce a term
07:29:01 <SrPx> becaue there are many different evaluation orders
07:29:16 <ggole> You could lower to something more machine-like, perhaps CPS
07:29:40 <ertes> SrPx: you can simplify beyond lambda calculus, for example SK calculus, but as long as the language is higher order, you will need at least GC
07:30:02 <ggole> Typically in a CPS IL you have machine-like functions that aren't curried, have explicit evaluation order, etc
07:30:03 <magneticduck1> it should be possible to encode a lambda calculus within finite bounds in x86 such that some useful correspondence between rule application and CPU cycles can be arrived at 
07:30:27 <magneticduck1> reminds me of the famous O(1) sorting algorithm
07:31:06 <ertes> magneticduck1: ask the machine how many steps 'fix f' takes for an arbitrary f, even with finite bounds
07:31:48 * SrPx shrugs
07:32:38 <magneticduck1> anyway what we really need is a chip that runs lambda calculus
07:32:53 <ertes> really?  do we *need* that? =)
07:33:08 <magneticduck1> yes
07:33:22 <ggole> That particular mistake (we need a chip for X) has been made many times
07:33:29 <byorgey> magneticduck1: https://www.cs.york.ac.uk/fp/reduceron/ , https://github.com/tommythorn/Reduceron
07:33:41 <ggole> For X = Lisp, *Lisp, Prolog, Haskell, Java, etc, etc
07:33:45 <ggole> All dead
07:35:51 <ongy> ggole: what do the java smartcarts have? I thought that's pretty much "chip that runs a jvm"
07:36:22 <ggole> ongy: there was also Jazelle + Azul's hardware
07:36:28 <ertes> ongy: the JVM is a relatively thin abstraction over what popular chips look like
07:36:30 <ertes> so it works
07:36:51 <ggole> And I believe some other attempts which I can't recall off the top of my head
07:37:46 * hackagebot microlens-aeson 2.1.1.1 - Law-abiding lenses for Aeson, using microlens.  https://hackage.haskell.org/package/microlens-aeson-2.1.1.1 (fosskers)
07:39:09 <ertes> i wonder if there are significant speedups to be gained from having "haskell hardware"
07:40:49 <ggole> Speedups over what? Naive hardware, or the ridiculously tuned stuff we have for imperative ISAs?
07:42:17 <ertes> ggole: the latter…  our current architectures only do imperative memory operations and I/O, but they are really good at that
07:44:45 <ggole> Mmm. There are all kinds of practical disadvantages, too.
07:44:56 <ggole> Like not being able to run any existing software.
07:45:06 <ggole> And having no market share.
07:45:18 <ggole> So if you, incredibly, probably impossibly, make it to parity, you still lose.
07:46:32 <ongy> accelorator cards for scientific machines would be nice for a start
07:46:35 <ggole> A better plan would be to have something important that you can do way better than conventional hardware
07:47:29 <ggole> (Like DWave is trying to do.)
07:47:46 <ggole> ongy: that market is already catered to by the GPU vendors
07:48:22 <ggole> They have dedicated cards, drivers, compilers etc for scientific workloads.
07:48:31 <hexagoxel> "blockLocs <- State.Class.gets fst <&> Map.elems .> (=<<) (ExactPrint.annsDP .> (=<<) (fst .> binder))"
07:48:42 <hexagoxel> am i overdoing the pointless left-to-right style yet? :D
07:49:03 <Cale> That's... basically unreadable
07:49:07 <byorgey> the goggles, they do nothing!
07:49:36 <ongy> :t .>
07:49:38 <lambdabot> parse error on input ‘.>’
07:49:40 <alanz> hexagoxel, yes
07:49:44 <ongy> :t (.>)
07:49:45 <lambdabot> (st -> r) -> (kab -> st) -> kab -> r
07:50:18 <ongy> why do the types have such weird names? I don't see constraints, what's the difference to
07:50:21 <ongy> :t (.)
07:50:22 <lambdabot> (b -> c) -> (a -> b) -> a -> c
07:50:38 <ggole> Taken from the source?
07:50:44 <ggole> @src (.>)
07:50:44 <ertes> ongy: it's probably a continuation thing
07:50:44 <lambdabot> Source not found. Take a stress pill and think things over.
07:51:02 <ertes> ongy: or a lens thing (which is basically the same)
07:51:06 <byorgey> ongy: just mnemonic probably.  (.>) comes from Control.Lens.Index.  Probably there is some other way to think about (.>) where it is not a priori obvious that it is just function composition
07:51:24 <byorgey> I don't actually know what (.>) is.
07:51:57 <ertes> but (.>) is also defined in semigroupoids with a completely different type
07:52:02 <ggole> "This is the same as (.)."
07:52:02 <hexagoxel> (just flip (.))
07:52:04 <byorgey> ongy: but by parametricity it can't possibly be any different than (.)
07:52:13 <ertes> (.>) :: (Apply f) => f a -> f b -> f b
07:57:46 * hackagebot casadi-bindings 3.0.0.5 - mid-level bindings to CasADi  https://hackage.haskell.org/package/casadi-bindings-3.0.0.5 (GregHorn)
07:58:39 <hexagoxel> btw if anyone has a better name for a flip (.) with non-sucky precedence, i am all ears.
07:59:37 <Zemyla> hexagoxel: So (>>>) doesn't do it for you, then?
07:59:54 * hexagoxel replaced that oneliner with an 8-line do-block-into-list-comprehension. just for those worrying.
07:59:59 <hexagoxel> Zemyla: no :)
08:00:30 <mniip> use those triangle brackets :p
08:02:46 <alanz> hexagoxel, clarity wins every time. Your future self will thank you
08:07:11 <hexagoxel> alanz: as a non-obvious-sequitur, i just noticed that the non-comment KeywordIds don't have a SrcSpan associated to them - now i can't compare against that to control my comment moving :(
08:08:07 <alanz> I generally use showAnnData to see where things end up
08:08:25 <alanz> Are you talking about programatically?
08:08:43 <hexagoxel> alanz: yes.
08:09:01 <hexagoxel> (also, 0.5.2.1 still has no haddocks.. builder down?)
08:09:13 <alanz> The whole point of ghc-exactprint is to work with relative locations
08:09:49 <alanz> See the ones for prior version, they need to be uploaded. I did not do that release, will upload docs when I get time
08:10:24 <hexagoxel> (thanks)
08:12:47 * hackagebot credentials 0.0.1 - Secure Credentials Storage and Distribution  https://hackage.haskell.org/package/credentials-0.0.1 (BrendanHay)
08:12:49 * hackagebot credentials-cli 0.0.1 - Secure Credentials Administration  https://hackage.haskell.org/package/credentials-cli-0.0.1 (BrendanHay)
08:32:29 <Gurkenglas> Why does stack's lts-6.10 not contain https://hackage.haskell.org/package/deepseq-generics 0.2.0.0, but instead 0.1.1.2?
08:32:50 <Gurkenglas> (More generally, how would I go about getting https://github.com/lspitzner/exference to build with stack?)
08:33:53 <Gurkenglas> (this is the output of stack init: http://lpaste.net/5540738176705888256 )
08:34:06 <Gurkenglas> -to build with stack+to init with stack
08:36:40 <glguy> Gurkenglas: lts-6.10 has whatever major versions were around when lts-6 started. Eventually there will be an lts-7 and it will have whatever versions are around when it starts. You can see the upcoming versions in the nightly resolver
08:38:00 <c_wraith> I'm surprised at how annoying it is to annotate a lazy game tree with IORef weights. 
08:38:04 <c_wraith> and I'm not even sure I did it right for concurrent uses.. does unsafeInterleaveIO guarantee that the IO actions it creates will only be executed once, even if demanded concurrently? 
08:38:58 <Gurkenglas> glguy, https://www.stackage.org/lts-6.0 was may, deepseq-generics-0.2.0.0 was january
08:39:30 <glguy> Gurkenglas: It can't update until most of the packages already in stackage work with the new version
08:39:53 <Zemyla> c_wraith: Can you use MVars instead?
08:40:11 <Clint> glguy: is irc-core deprecated?
08:40:40 <glguy> Clint: glirc-2 is using irc-core-2
08:40:42 <c_wraith> Zemyla, that wouldn't help. it's not concurrent updates I'm worried about, it's concurrent evaluation of the IO action that creates the reference 
08:40:56 <glguy> Clint: but now you can install just the library, it doesn't come with the executable
08:41:20 <glguy> Clint: I have people who want to use the library parts but not all the vty and lens dependencies of the client
08:41:22 <Clint> glguy: ok, but the library is coming back someday?
08:41:23 <Clint> ah
08:41:38 <glguy> Clint: I released a new irc-core last night
08:41:43 <glguy> Clint: Are you using the old one?
08:42:05 <Clint> glguy: not at the moment
08:42:47 * hackagebot haxr 3000.11.2 - XML-RPC client and server library.  https://hackage.haskell.org/package/haxr-3000.11.2 (BrentYorgey)
08:45:19 <adarqui> hey, wondering if anyone has any idea about this. i have several local packages that I specify in my stack.yaml ie: packages: ../package1 ../package2 .. so i have a few packages that all depend on the same packages. when i stack build, each build seems to be separate. is there any way to "share" the built dependencies to speed up re-builds across several packages?
08:48:21 <Gurkenglas> stack init tells me some dependencies are not found. Can I tell stack to try to get them from hackage and build them first then?
08:49:19 <Gurkenglas> (cabal cant build old-time, stack can, so im trying to get stack to do the things that work with cabal and not with stack)
08:49:33 <Gurkenglas> (stack doesnt build old-time either, it just fetches a compiled executable)
08:50:29 <cocreature> Gurkenglas: you can add packages to extra-deps and stack will get them from hackage
08:50:57 <Gurkenglas> stack init won't give me a stack.yaml to put the extra-deps into
08:52:16 <cocreature> Gurkenglas: try stack init --solver or stack init --omit-packages
08:57:07 <Gurkenglas> yep that solves the current step thanks
09:02:56 <damiansoriano> I am trying to sign something using cryptonite, but I only have the privatekey in a string, is there any way to generate a PrivateKey from a string?
09:04:02 <kamyar> hi again
09:04:30 <kamyar> dear haskellers
09:04:33 <Gurkenglas> damiansoriano, you mean the sort of string you'd get by passing a PrivateKey value to print?
09:04:38 <kamyar> I have a question
09:05:24 <kamyar> As I understand from Haskell resources 
09:05:27 <glguy> damiansoriano: Check out https://hackage.haskell.org/package/x509-store-1.6.1
09:05:45 <glguy> damiansoriano: You'll probably need Data.X509.Memory
09:06:11 <damiansoriano> thanks
09:06:21 <damiansoriano> is Data-X509 compatible with cryptonite?
09:06:30 <kamyar> Hakell is meant to keep values in monadic contexts till the end if routine/ unit of work
09:06:39 <glguy> damiansoriano: yeah
09:07:21 <kamyar> if I am right then using some function like maybe should be discouraged
09:07:29 <kamyar> Am I right?
09:07:37 <srhb> kamyar: No.
09:07:43 <srhb> kamyar: If I can decipher your meaning, at least.
09:07:58 <Gurkenglas> kamyar, you can apply functions that have nothing to do with monads to values in a monadic context, thats what fmap does
09:08:13 <srhb> kamyar: On the other hand what you seem to be saying is "don't get a value from a Maybe value until you need to get the value out of the Maybe value" -- in that case, you're right.
09:08:41 <kamyar> fmap does not extract the value but does some action on it 
09:08:53 <kamyar> while keeping it in context
09:08:55 <srhb> But if all you're doing is extracting it (via casing and defaulting) only to stick it and something else right back into a Maybe, you're probably doing something wrong.
09:09:35 <kamyar> but maybe extracts the value if it is sonething other than Nothing
09:10:15 <srhb> kamyar: maybe gives you an a from a Maybe a whether it's Just or Nothing
09:11:04 <Gurkenglas> kamyar, your question would be easier to answer with a yes or no if you gave a specific example of what code it is that is better than some other code that semantically does the same thing
09:11:09 <srhb> > (maybe 4 id Nothing, maybe 2 id (Just 2)
09:11:11 <lambdabot>  <hint>:1:41:
09:11:11 <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
09:11:14 <srhb> guh
09:11:16 <srhb> > (maybe 4 id Nothing, maybe 2 id (Just 2))
09:11:18 <lambdabot>  (4,2)
09:12:15 <Gurkenglas> You probably wanted 4 instead of the first 2 there.
09:12:27 <srhb> Yes. :-)
09:12:38 <srhb> I altered it half-way to get 42. 
09:12:43 <srhb> Silly compulsion.
09:13:16 <srhb> kamyar: Anyway, the thing you should _not_ do is case out a value only to immediately perform another computation on it that produces a Maybe b
09:13:28 <kamyar> ok suppose we have a maybe value returned from a function and we wanna do some action on it using functions and then return the result 
09:13:51 <kamyar> functions get int and return int 
09:13:52 <srhb> But that's as far as I think we can say something general.
09:14:56 <kamyar> the primary function gets some int from a network resource in a maybe type
09:15:19 <srhb> so primary :: IO (Maybe Int) ?
09:15:27 <srhb> (We have a precise language or this, use it :-))
09:15:37 <kamyar> then we apply other functions on the int and return the result
09:16:13 <rntz> what are the values of GHC.TypeLits.Symbol? are there any?
09:16:37 <kamyar> we can apply all calculating functions on the inner int without having to extract the value from maybe 
09:16:44 <rntz> is it possible for me to have a DataKind-promotable thing whose values are isomorphic to String?
09:16:54 <srhb> kamyar: Yes.
09:17:26 <kamyar> at the end haskell will return the result or Nothing in case the prime func fails
09:17:35 <ashishnegi> hello..  i am writing property based tests https://github.com/nilenso/tronkell/blob/master/test/TestEngine.hs#L37
09:17:50 <ashishnegi> My player is `Arbitrary`
09:17:53 <byorgey> rntz: do you mean type-level values, or value-level values?
09:18:05 <byorgey> rntz: Symbol is a kind
09:18:13 <byorgey> its values are types which are strings
09:18:29 <byorgey> but those types themselves have no values.
09:18:33 <kamyar> on the other hand we could use maybe to extract the value and give it to the calculating functions
09:18:59 <kamyar> which us better?
09:19:03 <srhb> kamyar: Well, depends again. Did you want to do the calculation on some default value in case you got a Nothing from primary?
09:19:07 <srhb> kamyar: Then maybe is great!
09:19:08 <ashishnegi> and Game has some players.. Players coordinate depends upon game config.. but i can not pass bounds to Player.. and has to resort to https://github.com/nilenso/tronkell/blob/master/test/TestEngine.hs#L58
09:19:13 <srhb> kamyar: If not, then probably not.
09:19:20 <ashishnegi> `isValidPlayer`
09:19:20 <srhb> kamyar: It depends on the specifics.
09:19:45 <rntz> byorgey: I want both? I want something whose value-level values are strings and whose type-level values are strings
09:20:14 <rntz> the reason is, I have a type Type which represents types of a simple language I'm writing, and it ought to use strings to identify branches of a sum type
09:20:22 <rntz> and I want Type to be both a type and a kind
09:20:26 <kamyar> srhb: got the point thnx
09:20:26 <ashishnegi> What is alternative to `arbitrary` for property based testing when we want to generate random Data using some config.. ?
09:20:34 <byorgey> rntz: for that you want something like the 'singletons' package
09:20:45 <byorgey> rntz: I'm not sure if it has something specifically for Symbol/String
09:20:47 <rntz> the type for representing types in my compiler, the kind for parameterizing my Expr type
09:20:51 <exDM69> I'm having some issues with QuickCheck... how do I prevent Arbitrary from generating infinitely large structures
09:20:54 <exDM69> ?
09:21:03 <rntz> I don't want a singleton type, though? unless "singleton" is a misnomer for that package...
09:21:18 <byorgey> rntz: oh, yes, it does, http://hackage.haskell.org/package/singletons-2.2/docs/Data-Singletons-TypeLits.html
09:21:39 <lyxia> exDM69: there's no general solution
09:21:44 <ashishnegi> exDM69: just do a `take 100` on your list and send it forward.
09:21:49 <lyxia> exDM69: what are you generating
09:21:54 <byorgey> rntz: singleton types are what give you that connection between isomorphic values on the value and type levels
09:22:04 <exDM69> lyxia: I have a simple tree structure (AST-like)
09:22:09 <rntz> hm, what connection are you talking about?
09:22:23 <exDM69> lyxia: with data Tree = Leaf | Branch [Tree]
09:22:35 <exDM69> lyxia: for the Branch part, I'd need to make sure it's bounded in size
09:22:46 <rntz> I do *not* want a type (singleton "foo") whose only value is the string "foo", if that's what you mean - that's what I understand a singleton type to be
09:23:13 <exDM69> ashishnegi: that's the same as doing vectorOf, right?
09:23:18 <rntz> maybe I'll just defnie a tpye Type and a kind KType that looks almost exactly the same...
09:24:00 <ashishnegi> exDM69: no... i guess.. it will give you a vector of Trees.. 
09:24:15 <lyxia> exDM69: in the definition of arbitrary you can apply "resize" on recursive calls to reduce the size. Also, using "sized" you can test the size value, if it is zero just return a Leaf.
09:24:52 <byorgey> rntz: oh, I think I understand what you want now.  You want something like String or Symbol which can be used as both a type and a kind?
09:24:57 <rntz> yes!
09:25:08 <exDM69> lyxia: looking for docs of "resize" and "sized"...
09:25:16 <rntz> if only Symbol were String I would be perfectly happy :)
09:26:17 <byorgey> rntz: ok, that does not exist, but the singletons package has functions like 'symbolVal' that let you convert back and forth between String and Symbol
09:26:32 <ashishnegi> sorry for asking again.. but in case somebody can tell :  What is alternative to `arbitrary` for property based testing when we want to generate random Data based on some config.. ?
09:26:47 <exDM69> lyxia: do you know where I could find a helpful example?
09:27:22 <byorgey> rntz: even if there were a single type that could be used both as a type or a kind, the fact is that the promoted version of a type is completely distinct from the unpromoted version
09:27:32 <byorgey> so they may as well be different.
09:27:46 <rntz> byorgey: well, it makes me write my types twice if they're different
09:28:07 <byorgey> oh, I see, if you also have types which you want to promote
09:28:09 <rntz> symbolVal doesn't seem to do what I want? because Symbol, as a tpye, has no values afaict
09:28:23 <rntz> yeah. I have a type MyLangType which I want to be both a type and a kind
09:28:38 <rntz> and then (Expr  :: MyLangType -> *)
09:29:08 <byorgey> maybe make a type family called Promote which turns String into Symbol, and recursively promotes everything else?
09:29:15 <byorgey> not sure off the top of my head if that would actually work
09:29:21 <rntz> oh, hm. maybe that would work.
09:29:51 <GreySunshine> I have written code(http://lpaste.net/175370) to print "yes" if the given number is a square of prime otherwise I print "no". Please help me optimize my code.
09:30:08 <lyxia> exDM69: I don't know :/  Try this simpler steps: 1) write a function genTree :: Int -> Gen Tree that generates trees of depth less than the argument. 2) You can now define arbitrary = sized genTree.
09:32:22 <ashishnegi> what are the good practices for testing functions writing/reading on channels https://github.com/nilenso/tronkell/blob/master/src/Tronkell/Server/Server.hs#L137
09:32:49 * hackagebot aeson-injector 1.0.5.0 - Injecting fields into aeson values  https://hackage.haskell.org/package/aeson-injector-1.0.5.0 (NCrashed)
09:35:32 <exDM69> lyxia: http://www.pasteall.org/73794  <--- this seems to work
09:37:01 <kritzcreek> when using the parsers library, how can I get the highlighting information out of the parse result?
09:37:45 <lyxia> exDM69: your tree branches will have the same arity at a given depth.
09:38:03 <lyxia> exDM69: you can use listOf instead to have more varied structures.
09:38:15 <lyxia> exDM69: instead of vectorOf size
09:38:27 <exDM69> ah, I undersand
09:40:05 <exDM69> lyxia: listOf gives too big results
09:40:16 <exDM69> lyxia: I'll add "choose" to pick a random size
09:40:19 <exDM69> with upper bound
09:40:31 <lyxia> sure
09:42:33 <exDM69> lyxia: thanks, my problem is solved!
09:45:19 <exDM69> lyxia: generating random AST's, then pretty-printing them out gives a good indication of how ugly my programming language syntax is going to be :P
09:47:40 <estonoboo> guys, now I do have a problem with GHCi
09:48:10 <estonoboo> when ran from its app, it runs very quickly and then it closes
09:48:29 <estonoboo> as for cmd, I ran it there and it gave me this magnificent error: "C:\Users\ConlangMath\AppData\Roaming\ghc\i386-mingw32-8.0.1\package.conf.d\package.cache: GHC.PackageDb.readPackageDb: inappropriate type (not a ghc-pkg db file, wrong file magic number)"
09:49:45 <lpaste> quchen annotated “Square of primes” with “Square of primes (annotation)” at http://lpaste.net/175370#a175375
09:50:07 <quchen> GreySunshine: ^
09:53:06 <estonoboo> ...
09:55:41 <Cale> estonoboo: I've never seen something like that, but it sounds like either something has corrupted your ghc package database, or the thing wasn't installed correctly in the first place?
09:56:15 <estonoboo> well, I am going to be honest, I installed 2 more packages
09:56:25 <estonoboo> where are packages stored?
10:02:57 <estonoboo> Cale: maybe removing package.cache will help?
10:03:06 <estonoboo> I'm not sure if I should do it tho
10:04:10 <estonoboo> I did delete it, and when I did, ghci now complained that it doesn't even exist :C
10:04:33 <glguy> There's a "ghc-pkg recache" command that might help with having deleted the cache
10:04:34 <monochrom> ghc-pkg --global recache
10:05:36 <monochrom> maybe not --global
10:05:41 <estonoboo> is it usual to um, literally have the file filled with \NUL?
10:12:51 * hackagebot language-dockerfile 0.3.0.0 - Dockerfile linter, parser, pretty-printer and embedded DSL  https://hackage.haskell.org/package/language-dockerfile-0.3.0.0 (yamadapc)
10:29:48 <XennonsPlaysYT> Sup Guys
10:30:43 <XennonsPlaysYT> Sup Guys
10:31:18 <XennonsPlaysYT> Sup Guys
10:31:37 <XennonsPlaysYT> Sup Guys
10:31:38 <XennonsPlaysYT> Sup Guys
10:31:44 --- mode: ChanServ set +o johnw
10:31:45 --- mode: johnw set +b *!~XennonsPl@197.48.142.243
10:31:45 --- kick: XennonsPlaysYT was kicked by johnw (Kicked)
10:31:45 --- mode: johnw set -o johnw
10:31:52 <glguy> o.O
10:33:05 <damian> hello, now I have a Data.X509.PrivateKey.PrivKey, not sure how to use cryptonite to sign something
10:33:21 <damian> since cryptonite is expeting things of the type Crypto.PubKey.RSA.Types.PrivateKey
10:33:51 <amir107> !help
10:33:58 <glguy> damian: Look up the docs for PrivKey
10:34:00 <damian> I don't really need to use cryptonite, but is the only thing I found for singing strings
10:35:15 <damian> glguy x509 is not exposing the constructor, so not sure how to extract the private key from PrivKeyRSA
10:35:18 <damian> @glguy x509 is not exposing the constructor, so not sure how to extract the private key from PrivKeyRSA
10:35:18 <lambdabot> Unknown command, try @list
10:35:48 <glguy> damian: The constructors are exported. Try clicking on the PrivKey hyperlink in the documentation for x509-store
10:35:53 <c_wraith> does anyone know offhand if the thunk created by unsafeInterleaveIO is guaranteed to only execute its action once in the face of concurrent evaluation? 
10:35:56 <glguy> that will take you to the module that defines PrivKey
10:36:13 <glguy> Also @ is for bot commands rather than addressing people
10:37:12 <glguy> c_wraith: That seems to be the case
10:37:57 <glguy> c_wraith: If you want to live on the wild side there is unsafeDupableInterleaveIO
10:38:12 <c_wraith> I definitely don't want that. :) 
10:39:10 <damian> glguy: thanks! it's working
10:39:11 <damian> :)
10:42:11 <c_wraith> glguy, I'm experimenting with MCTS, and can't see any better way to handle the weights than by annotating nodes with an IORef. but I want to lazily create the game tree.. so I wanted to be sure each node's IORef would only be allocated once. 
10:44:50 <damian> did anyone used jose library before?
10:52:48 <bri> Hey
10:56:14 <damian> did anyone used jose or any other jwt generation library that support RS256?
11:02:16 <pignaniel> !list
11:02:41 <iphy> https://travis-ci.org/iphydf/pokemon/builds/150997317#L837 <- how can this happen? there is no change of anything between those two cabal calls
11:02:52 * hackagebot haskell-igraph 0.1.0 - Imcomplete igraph bindings  https://hackage.haskell.org/package/haskell-igraph-0.1.0 (kaizhang)
11:02:59 <iphy> cabal: You need to re-run the 'configure' command. The version of Cabal being used has changed (was Cabal-1.24.0.0, now Cabal-1.22.5.0). Additionally the compiler is different (was ghc-8.0, now ghc-7.10) which is probably the cause of the problem.
11:03:17 <iphy> how can the compiler suddenly change?
11:04:12 <koala_man> distro upgrade? 
11:04:50 <koala_man> oh, I see. no, that's weird. 
11:05:22 <iphy> so one thing I thought could be a cause of this is the fact that I change the main function in Setup.hs
11:05:27 <dcoutts> iphy: changed the path?
11:05:48 <dcoutts> any caching from previous builds?
11:05:56 <glguy> iphy: If you're using GHC 8.0.1, you should be using cabal-1.24
11:06:14 <glguy> but appear to be installing 1.22
11:06:27 <iphy> glguy: I see, I'll try that
11:07:07 <iphy> the next build will try 1.24
11:08:20 <glguy> iphy: Also in case you didn't know about it https://github.com/hvr/multi-ghc-travis is a good way to generate your .travis.yml files
11:08:51 <iphy> I think I've seen that in use on various occasions
11:12:42 <iphy> glguy: cool, that helped
11:47:53 * hackagebot x86-64bit 0.1.2 - Runtime code generation for x86 64 bit machine code  https://hackage.haskell.org/package/x86-64bit-0.1.2 (PeterDivianszky)
12:01:18 <Khudher> Some guy says that functional programming languages has changed nothing, how can i reply to him?
12:01:40 <Khudher> lol
12:01:53 <koala_man> pure functional languages change nothing :3
12:02:13 <maerwald> that pun
12:02:15 <johnw> somewhere here there is an immutability joke
12:02:22 <johnw> oh, there it is
12:02:36 <Khudher> oh :(
12:02:50 <johnw> Khudher: there's no real reason to reply
12:03:19 <Khudher> i was learning Haskell, he made me wonder what is the best thing to do in haskell
12:03:31 <johnw> pretty much anything is good to do in Haskell
12:03:58 <Khudher> can you recommend me to read a book that would be useful for me? for learning haskell?
12:04:00 <hpc> the best thing is the thing you are close to knowing how to do
12:04:04 <hpc> while you're learning
12:04:04 <Khudher> im really new to functional programming
12:04:18 <hpc> Khudher: take a look at https://github.com/bitemyapp/learnhaskell
12:05:10 <Khudher> hpc, THANK YOU!
12:05:10 <Khudher> i will join #haskell-beginners
12:05:10 <Khudher> too
12:05:28 <hpc> you're free to ask beginner questions here too
12:07:49 <Cale> Khudher, hpc: Yeah, the naming of #haskell-beginners is a constant source of irritation to me.
12:08:48 <puregreen> Cale: why?
12:09:27 <danilo2> Hello guys! Why the following type family declaration is invalid in GHC8? `type family Components f = f' | f' -> f where Components (a -> b) = (a, Components b) ; Components a = (a,())`
12:09:44 <danilo2> I think it should be allowed
12:10:45 <hpc> Cale: kinda curious too - i don't go there so i have no idea what it's like
12:27:54 * hackagebot language-dockerfile 0.3.1.0 - Dockerfile linter, parser, pretty-printer and embedded DSL  https://hackage.haskell.org/package/language-dockerfile-0.3.1.0 (yamadapc)
12:30:59 <dmj> question, is there some sort of efficient mutable vector construction technique? I know size must be known beforehand, was wondering if there was a compiler rewrite rule, or a way to "dynamically" define a mutable vector, while foregoing list allocation
12:32:26 <kamyar> hi again
12:32:40 <dmj> where size and elements could be known, w/o additional allocation
12:34:11 <puregreen> dmj: maybe by using generate/constructN/iterateN with unsafeThaw
12:34:26 <puregreen> dmj: there might be a fusion rule for lists too but I don't know
12:34:28 <kamyar> When I compile my haskell project it gets too large
12:34:38 <puregreen> kamyar: you mean, the binary?
12:34:45 <kamyar> a short utility got 60M 
12:34:58 <puregreen> strip it and then upx -9 it
12:35:02 <kamyar> how can I get smaller binary?
12:35:36 <dmj> kamyar: what puregreen suggested, upx
12:35:47 <kamyar> puregreen: what to do on windows then?
12:35:57 <puregreen> same :)
12:36:15 <kamyar> windows hasnt got strip
12:36:19 <kamyar> or upx
12:36:51 <puregreen> don't know about strip but it definitely has upx
12:36:56 <puregreen> you just have to download it
12:37:14 <eacameron> kamyar: if you're using stack, try stack exec strip
12:37:26 <kamyar> oh ok upx is on sf.net
12:37:38 <kamyar> let me try 
12:37:40 <kamyar> thnx
12:39:30 <ReinH> It should already be stripped by default though.
12:40:49 <ReinH> And anyway, large binary sizes are normal for GHC. Among other things, it has to include the full RTS.
12:41:27 <tdammers> the upside of that is that the binary contains the full RTS, so that at least is not a runtime dependency
12:42:00 <dmj> puregreen: pretty sure iterate and the like perform additional allocation, replicate is really static
12:42:11 <dmj> puregreen: looking specifically at the generic mutable interface
12:49:38 <dmj> puregreen: seems like Bundle is what I want
12:52:23 <ahsfhyicxv> Is there a good natural language parser in Haskell that can parse values ("1 cup water") into a number (1), unit ("cup"), and what the unit is of ("water")?
12:53:43 * ski suspects possibly not, but would check out whether GF has anything relevant
12:53:46 <ski> @where GF
12:53:46 <lambdabot> Grammatical Framework, dependently typed FPL, categorial grammar formalism, supporting multilingual grammar applications for e.g. natural language processing, at <http://www.grammaticalframework.org/>. (An old `Alfa' interface is at <http://web.archive.org/web/*/http://www.cs.chalmers.se/~hallgren/Alfa/Tutorial/GFplugin.html>)
12:56:42 <ski> (there's also a channel, #gf)
13:05:10 <adarqui> anyone have an idea what this means? getting it out of nowhere when using yesod devel: <command line>: cannot satisfy -package-key main
13:06:49 <shapr> random guess: you don't have a Main.hs module?
13:07:25 <adarqui> i do
13:07:36 <shapr> ok, no idea
13:07:42 <adarqui> ;/
13:08:09 <adarqui> trying to downgrade cabal, maybe somehow it got upgraded and yesod needs a lower version
13:08:41 <adarqui> yup, that was it.. wtf?
13:09:01 <adarqui> yesod devel didnt work with cabal 1.24.0.0 , but works with 1.28.x.0
13:10:54 <adarqui> been struggling all day with my environment.. today sucks.
13:17:10 <Phyx-> ReinH: yeah, but the RTS itself is quite tiny
13:17:39 <Phyx-> it gets quite bulky if you include anything from the GHC package
13:18:11 <Phyx-> though -ffunction-sections may do a better job then -obj-split in reducing that
13:24:36 <Gurkenglas> http://lpaste.net/816180469279227904 <- how do I make this work?
13:25:10 <Gurkenglas> https://github.com/fpco/stackage/#get-your-package-included to make it use a precompiled package?
13:27:57 <mgsloan> Gurkenglas: I'm pretty sure that's a non-deterministic Cabal bug, unfortunately https://github.com/haskell/cabal/search?q=package.cache+&type=Issues&utf8=%E2%9C%93
13:28:18 <mgsloan> I've encountered it before, rarely, and it just goes away when I try to look into it https://github.com/commercialhaskell/stack/issues/2121 
13:28:49 <mgsloan> stack exec -- ghc-pkg unregister 
13:28:51 <Gurkenglas> Well thats a good thing isnt it
13:29:02 <Gurkenglas> Ill let you look at it and either it goes away or you get a good look at it
13:29:21 <mgsloan> Yes, though right now stack doesn't have a good way to downgrade Cabal version, only upgrade :/
13:29:37 <mgsloan> Oh, that's version 1.22.5, it might be fixed in a newer version
13:29:58 <mgsloan> Maybe try "stack setup --upgrade-cabal" ?
13:30:12 <mgsloan> Not super easy to go back yet, though, heh
13:30:29 <Gurkenglas> inb4 everything breaks
13:30:52 <mgsloan> Seems like 1.24 mostly fixed things, but you never know with code change
13:32:05 <Gurkenglas> Maybe Im going at this from the wrong angle. Is there an online travis thing that I can point at my pull requests to see if they typecheck? Then I wouldnt need to do any local stuff.
13:32:32 <Gurkenglas> (its currently upgrading)
13:34:09 <mgsloan> Well, you're definitely going to want to be able to build locally, but yeah, check out https://docs.haskellstack.org/en/stable/travis_ci/
13:35:04 <nomeata> cdsmith: Hi. Do you have a an example of a somewhat fancy, static (using drawingOf) image for https://code.world/haskell?
13:37:54 <Gurkenglas> mgsloan, still fails: http://lpaste.net/1811014883534176256 "stack exec -- ghc-pkg unregister" now?
13:40:03 <mgsloan> Yeah, unregister FPretty I guess
13:40:23 <mgsloan> I suppose it's probably already unregistered.  Weird.
13:40:46 <mgsloan> I try to usually avoid this, but at this point, you should delete your exference\.stack-work
13:41:16 <mgsloan> Oh actually, upgrading Cabal would effectively have that effect anyway
13:42:04 <Gurkenglas> http://lpaste.net/4686455463405944832
13:44:59 <mgsloan> Yeah, you gotta tell it what to unregister
13:45:14 <mgsloan> Sometimes helpful for surgically rebuilding just what you want
13:45:24 <mgsloan> But in this case, I recommend blowing away and tryin gain
13:46:46 <Gurkenglas> You mean removing the .stack-work instead of unregistering anything yes?
13:47:23 <mgsloan> Yup, will take longer to build
13:47:39 <mgsloan> But will make sure there's no funky broken state there 
13:52:23 <Gurkenglas> What library should I use to send a POST to a website? (lpaste in this case)
13:53:34 * av_ needs some help once again
13:54:18 <Gurkenglas> av_, best not let us wait. in fact the best way to not let us wait is to only let us know you need help once we already know what you need help with
13:54:37 <av_> hi everyone, just wondering: I have a problem building an algorithm that does some simple vector operations on the way (3 elements each)
13:54:40 * av_ is typing still :)
13:55:25 <av_> what's the most efficient way of encoding those vectors: List, 3-tuple, data type with single constructor and three values of identical type, Data.Vector, etc.?
13:55:44 <av_> oh, and it also has to work with Numeric.AD, I didn't have much luck with tuples last time I tried
13:57:07 <av_> the algorithm currently uses lists and incurs a 5-fold speed penalty compared to C
13:57:15 <Gurkenglas> mgsloan, http://lpaste.net/632616448971243520 should I also delete the stack.yaml and stack setup --solver again?
13:57:33 <mgsloan> Nah
13:57:39 <Gurkenglas> av_, are you compiling with -O2?
13:57:43 <av_> can anyone give me a hint?
13:57:46 <av_> Gurkenglas: yes
13:57:54 <mgsloan> Gurkenglas: You probably just need to add it to build-depends
13:57:57 * hackagebot heckle 2.0.0.4 - Jekyll in Haskell (feat. LaTeX)  https://hackage.haskell.org/package/heckle-2.0.0.4 (2016rshah)
13:58:24 <mgsloan> Now, why exference wouldn't already have that in its build-depends is a mystery
13:58:31 <mgsloan> Perhaps some package split up
13:58:56 <ClaudiusMaximus> av_: maybe see if the 'linear' package works, it has a V3 type, though I haven't tried it with 'ad' - same author, so it might be compatible
13:59:12 <kadoban> Heh, so there's hakyll and now heckle, both based on jekyll.
14:00:48 <av_> ClaudiusMaximus: ok, that adds linear to my list :(
14:02:30 <ClaudiusMaximus> av_: please report back if it works / doesn't work
14:02:39 <av_> ah, there's V3, that might be what I'm looking for
14:02:43 <av_> ClaudiusMaximus: will do
14:03:57 <orbipedis> Hi, I've written a small haskell command-line utility. What's the easiest way to distribute this to my friend who is on a different OS?
14:04:23 <Gurkenglas> mgsloan, http://lpaste.net/7790998150126239744 umm o.o
14:05:17 <mgsloan> Wow, that error message got interspersed with other output
14:05:25 <mgsloan> I don't think I've ever seen that
14:05:39 <Gurkenglas> Oh I see its a type error
14:05:40 <av_> oh, btw, ad is a very unfortunate name for a package -- my privoxy blocked it and with cabal's fantastically verbose error message, it took me the best part of two days to figure it out :(
14:05:53 <mgsloan> Gurkenglas: Yeah, exference probably hasn't locked down its deps well enough
14:06:24 <byorgey> orbipedis: does your friend have GHC installed?
14:06:35 <Gurkenglas> Yea it usually builds as seen its the readme of https://github.com/lspitzner/exference Im trying to build it with stack because cabal wont build old-time for me
14:06:45 <orbipedis> byorgey: no
14:07:12 <byorgey> orbipedis: OK, I see.  In that case I don't think I can help you, sorry =(  Though maybe someone else here knows
14:07:26 <Gurkenglas> (also then i can pr it to suggest stack instead of cabal, and after that maybe ill add travis or something)
14:08:06 <mgsloan> Cool!
14:08:47 <Gurkenglas> If its builds on the docker thing, and this is a dependency issue, can I make the docker thing export what dependencies it ended up using so i can tell stack what works
14:12:49 <lspitzner> Gurkenglas: you added that Cofree import, didn't you? :)
14:12:57 * hackagebot damnpacket 1.0.2 - Parsing dAmn messages  https://hackage.haskell.org/package/damnpacket-1.0.2 (JudeTaylor)
14:13:08 <sphinxo> say I have a list of functions like top,middle,bottom and right,center,left how can I compose them so I get a list like [[(top . right), (top . center), (top . left)], [(middle . right), (middle . center),...]]
14:13:15 <Gurkenglas> lspitzner, yyyyup Im currently wondering why this builds on the docker thing
14:14:21 <Gurkenglas> sphinxo, [[f . g | g <- rcl] | f <- tmb]
14:14:41 <sphinxo> ahh that makes sense thanks
14:17:28 <sphinxo> and then I can do g . f for [top.right, middle.right, bottom.right] etc
14:21:28 <Gurkenglas> not if g continues to be drawn from rcl
14:22:12 <sphinxo> oh yeah
14:25:41 <sphinxo> How could I generate diagonals?
14:25:58 <sphinxo> actually there is only two
14:26:00 <sphinxo> nvm
14:28:23 <cdsmith> nomeata: Not off-hand, but I can convert a basic CodeWorld example for you.
14:32:37 <cdsmith> nomeata: Here, try this.  https://code.world/haskell#PUYCZ97N92ENkuB4RQt7zFQ
14:32:49 <Gurkenglas> exference builds! Using stack! I am safe forever.
14:33:51 <mgsloan> \o/
14:36:25 <Gurkenglas> Let's try this other project now. stack build. Hrm. stack solver. (to be continued?)
14:44:00 <magneticduck> Gurkenglas: nix is the only True Way
14:44:12 * maerwald sighs
14:44:13 <Gurkenglas> mgsloan, tell me when you tire of me throwing pastes of stack not doing something at you http://lpaste.net/8402432576307855360
14:45:13 <Gurkenglas> (The author of that package can build his thing so cabals response to stacks build plan question should not be "none" right?)
14:45:39 <mgsloan> Gurkenglas: I actually recently improved those dep error messages (the stack ones), should be easier to understand on stack master branch
14:46:02 <mgsloan> In theory, that's the problem with using a solver like that, it's not really sure to work as things change
14:46:39 <mgsloan> Gurkenglas: Did you try the "Recommended action" that stack told you about? :)
14:47:35 <Gurkenglas> last time it did the same thing stack solver --modify<something else here... config?> did so i thought i'd just do that immediately, and then when it failed i guessed i would have failed the same way had i added those like it suggested
14:47:54 <mgsloan> Possibly so
14:48:21 <mgsloan> Ideally cabal-install would have the property "if there is a working build plan, it will be found", but I wouldn't count on it
14:48:49 <mgsloan> I actually prefer manually picking my versions in situations like this
14:48:55 <Gurkenglas> so i guess i clone stack, stack build it and replace my current stack.exe with the result?
14:49:11 <mgsloan> I want to make conscious decisions about these things instead of leaving it up to the machine.  Things get a lot more tractable / concrete
14:49:26 <mgsloan> You can do "stack upgrade --git"
14:49:50 <mgsloan> It'll just give better error messages, nothing magic for this particular thing
15:02:40 <Gurkenglas> sphinxo, zipWith (.) tmb rcl, sorry missed your question till now
15:07:51 <Gurkenglas> Can stack install C libraries somehow? ( http://lpaste.net/4924133520432955392 )
15:08:17 <mgsloan> Only indirectly via nix support or docker integration
15:09:44 <Gurkenglas> docker integration means itll be on a guest machine and nix means it only works on linux?
15:09:45 <mgsloan> Not sure why eay32 / ssl32 wouldn't be available, though, those are included with msys2 on windows (installed by stack)
15:10:02 <maerwald> a guest machine? docker is not virtualization
15:10:21 <mgsloan> maerwald: Yeah, but docker for windows uses virtualization
15:10:27 <Gurkenglas> its added a "default" machine to my virtualbox
15:10:29 <maerwald> why would anyone use windows
15:10:39 <mgsloan> maerwald: reasons
15:10:40 <maerwald> with docker especially it makes no sense
15:10:40 <Gurkenglas> because i grew up with it and linux is even more full of terminal stuff
15:13:18 <Gurkenglas> because the linux vm i was trying to set up also couldnt build all the github haskell project i was trying to pr to and someone said to try docker
15:13:27 <Gurkenglas> *projects
15:15:59 <av_> ClaudiusMaximus: progress so far: I changed a (small) part of my program from [] to Linear.V3, the benchmark immediately went from a runtim of 15s to 2.5s, which is fairly close to that of a C equivalent of the test (1.5s), something I could live with.
15:16:49 <av_> On the other hand, getting AD to work again required me to turn off the monomorphism restriction, and just that pragma alone drives the benchmark up to 10s.  Not good.
15:21:06 <Gurkenglas> mgsloan, maybe its because its asking for eay32 and ssl32 but I have a 64 bit system
15:22:14 <Gurkenglas> In that case can I tell stack to install msys2 for a 32 bit system so i get those?
15:25:02 <mgsloan> Hmm, dunno
15:25:22 <mgsloan> You'll probably get some mileagout out of finding the eay32.dll / etc and adding the dir to extra-lib-dirs
15:25:58 <mgsloan> You're lucky I was recently messing with this stuff on windows, to get some Haskell VR stuff going
15:27:12 <Gurkenglas> https://www.dll-files.com/libeay32.dll.html x)
15:30:40 <mgsloan> I mean on your computer, it's probably already there
15:31:00 <mgsloan> likely somewhere in AppData if STACK_ROOT is unset
15:32:30 <Gurkenglas> (yep all the google results are scams. you'd think searching stackoverflow for "eay32.dll" or "where to get dll files" would find something. was about to go to ##windows and ask)
15:37:18 <mniip> you could ask a random person on IRC to mount their windows partition
15:37:21 <mniip> :p
15:37:25 <APic> B-)
15:38:12 <ClaudiusMaximus> av_: you can avoid the monomorphism restriction by adding type signatures to the affected definitions, maybe that will help - perhaps adding SPECIALIZE pragmas will help too (afaik 'ad' needs polymorphic functions as input)
15:38:15 <mgsloan> Yeaah, it's probably better to find them on your computer than off it
15:38:42 <ClaudiusMaximus> av_: i mean, you can avoid turning off the monomorphism restriction globally by fixing only the problematic definitions
15:39:14 <APic> ☺
15:41:07 <av_> ClaudiusMaximus: that's what I did, performance still is worse by a factor of 4 than when I don't give a damn about AD
15:45:19 <Gurkenglas> Windows explorer doesnt find it in %appdata% or System32 (or takes very long?) and ##windows and I seem to have a misunderstanding :D
15:55:31 <Gurkenglas> "<bprompt> Gurkenglas:    well, as I read your log, the eay32, ssl32, are not easy32.dll and ssl32.dll, are just packages for C" hmm good point mgsloan are you sure I need those as dll files?
15:58:00 <mgsloan> Not sure, no
15:58:24 <mgsloan> I haven't used windows much in the last 10 years
15:58:26 <geekosaur> "Missing C libraries" means it looked for both .dll and .o (or maybe .obj). de facto on Windows only .dll is used
15:58:54 <Gurkenglas> Oh hey I could just manually install 32-bit msys2
16:02:48 <mniip> Gurkenglas, perhaps http://gnuwin32.sourceforge.net/
16:04:05 <mgsloan> lukexi's windows setup seems pretty decent - https://gist.github.com/lukexi/e634067f1d7e3a629988
16:04:15 <mgsloan> Dunno if that will help
16:06:41 <Gurkenglas> That lukexi page sounds useful anyway thx
16:07:38 <sena_kun> hi, folks. Can I ask yesod-related questions here? #yesod seems to sleep now.
16:08:46 <Gurkenglas> sure you can. in fact it annoys us less than asking fer permission :D
16:09:36 <sena_kun> Gurkenglas, I just used to it. :) I'm trying to write a yesod app without hamlet(i.e. using blaze combinators directly). Currently I'm thinking about dealing with forms. I can generate action link and enctype, but I wonder, how can I include Widget in my blaze code? Can I render Widget to Html somehow to include it in a blaze markup directly?
16:14:51 <Gurkenglas> Installing msys2 for 32 bit didnt seem to give me any new ssl32.dll s, though I used a different installer than the one from the lukexi page, lets try that one
16:15:09 <Gurkenglas> oh wait no he links to the same one.
16:16:44 <Gurkenglas> ill follow his further instructions maybe that gets me somewhere
16:22:09 <Gurkenglas> hmm i dont even know whichbit msys2 im even using. And http://lpaste.net/5303323091936477184 tells me I should update my shortcut targets but I dont know where "MSYS2_ROOT\msys2_shell.cmd -msys" is. and none of this is in lukexis instruction
16:22:11 <Gurkenglas> *s
16:23:43 <Gurkenglas> Oh the someguy in ##windows whose "install pkgmgr" suggestion i was about to use is actually mn-donthighlighthim-iip, lets try that
16:24:44 <athan> Does anyone here know of a binding between optparse-applicative and something like envparse?
16:25:58 <Gurkenglas> google results make it look like im supposed to be looking on my machine again oh hey terminal accepts pkgmgr as a command and shows https://gyazo.com/30d38fc86a2ed73a1183d0b8389d8ced should i listen to it?
16:26:13 <Gurkenglas> (as in use pkgmgr or dism)
16:27:03 <acowley> Does anyone have any suggestions as to whether or not there is a strategy for encouraging unification in the problematic example here: http://lpaste.net/1151182858895753216
16:33:28 <dmwit_> acowley: What type annotations make it work?
16:33:38 <acowley> dmwit_: ::Int
16:33:45 <dmwit_> acowley: The obvious ones (`(two :: Int)` and `(three :: Int)`) don't work here.
16:33:53 <acowley> Oh! They do for me
16:34:08 <acowley> GHC-8.0.1?
16:34:09 <dmwit> err, hm
16:34:14 <dmwit> They do for me as well, but not in ghci!
16:34:35 <acowley> Surprising! They work for Intero, which has much in common with ghci
16:35:42 <dmwit> aha, I was missing a final `:: Int` compared to the source for the top-level value
16:35:58 <dmwit> This thing is surprisingly fragile!
16:36:30 <acowley> dmwit: I distilled this from a 20kloc code base!
16:36:35 <acowley> Imagine the teetering
16:37:07 <acowley> Oh, you know, your version of leaving out the annotation on bar' is very interesting
16:37:21 <acowley> That's closer to the error I see when I leave out annotations in my real code
16:37:41 <dmwit> Have you considered using a `newtype` to delimit the higher-ranked-ness?
16:37:50 <acowley> I thought the "untouchable" language was when a type equality was involved
16:37:52 <dmwit> (Would that be too syntactically costly in the real code?)
16:37:57 <mniip> newtypes can't contain dictionaries
16:38:14 <dmwit> ...ah
16:39:11 <mniip> hmm
16:39:23 <acowley> The newtype helps here!
16:39:24 <dmwit> Are you sure?
16:39:36 <mniip> @let newtype Dict c where Dict :: c => Dict
16:39:38 <lambdabot>  .L.hs:199:22:
16:39:38 <lambdabot>      Expecting one more argument to ‘Dict’
16:39:38 <lambdabot>      Expected kind ‘*’, but ‘Dict’ has kind ‘k0 -> *’
16:39:39 <dmwit> (I'm asking whether mniip is sure, not acowley, for the record.)
16:39:49 <mniip> @let newtype Dict c where Dict :: c => Dict c
16:39:50 <lambdabot>  .L.hs:199:9:
16:39:50 <lambdabot>      The constructor of a newtype must have exactly one field
16:39:50 <lambdabot>        but ‘Dict’ has none
16:39:56 <acowley> I've used a newtype for this code in the past, but changed the foundations a lot and wnated to try without
16:40:05 <mniip> @let newtype Dict c where Dict :: c => () -> Dict c
16:40:06 <lambdabot>  .L.hs:199:9:
16:40:06 <lambdabot>      A newtype constructor cannot have a context in its type
16:40:06 <lambdabot>      Dict :: forall (c :: Constraint). c => () -> Dict c
16:40:09 <mniip> see
16:40:36 <acowley> It's rather a nuisance, but it's not a deal breaker as I only offer the forall'ed API for safety's sake. There's a "practical" API with a couple more concrete types named that infers much better.
16:40:44 <acowley> But I don't like this state of affairs
16:40:47 <mniip> tbf the first dict should actually be fine in core, maybe it's a good idea to allow it in haskell?
16:40:49 <ski> @let newtype Dict c = c => MkDict ()
16:40:50 <lambdabot>  .L.hs:198:18:
16:40:50 <lambdabot>      A newtype constructor cannot have a context in its type
16:40:51 <lambdabot>      MkDict :: forall (c :: Constraint). c => () -> Dict c
16:41:08 <dmwit> mniip: I dunno. The newtype seems to be compiling and working just fine here.
16:41:15 <mniip> full code?
16:41:24 <acowley> The fragility of the example seems wrong, but I'm honestly not familiar enouth with OutsideIn to see why it happens
16:41:58 <acowley> dmwit: I'm actually not sure why the newtype helps, either :(
16:42:29 <dmwit> mniip: http://lpaste.net/1151182858895753216
16:42:29 <acowley> dmwit: I mean, the annotation on aux seems to get lost when it goes through the Any synonym
16:42:51 <mniip> oh
16:42:56 <mniip> that's something else
16:43:05 <dmwit> acowley: See my annotation?
16:43:08 <mniip> that's universal quantification not existential
16:43:36 <acowley> dmwit: Yes, I tried that here, too
16:43:37 <mniip> it doesn't contain a dictionary but rather a dictionary accepting function
16:43:49 <dmwit> acowley: I'm not sure I understood your complaint, then.
16:44:37 <acowley> I don't know why the newtype is necessary, or specifically where aux's type is getting lost.
16:44:41 <dmwit> mniip: I don't think `Any` or `Any'` are existential, are they?
16:44:48 <joe9> Why is it wrong to do this? http://dpaste.com/1WS9MTN  , error: http://bpaste.net/show/14b3a47c811b I need to read up on RankNTypes. Not sure if it is good or bad.
16:44:51 <mniip> indeed they are not
16:45:04 <dmwit> So why do you say it's something else...?
16:45:44 <dmwit> acowley: I don't fully understand either. But I do know that with these polymorphic things it is often needed to use a `newtype` to prevent GHC from floating foralls in funny ways.
16:46:14 <mniip> yeah RankN typechecking is undecidable in general iirc?
16:46:33 <mniip> with Rank2 typechecking being so complex that it has no place in ghc?
16:46:35 <dmwit> joe9: You should probably make `a` an argument to `Context`.
16:46:38 <mniip> or something
16:46:47 <joe9> dmwit: ok, Thanks.
16:47:05 <dmwit> joe9: Or else write `cLogger :: String -> IO ()` and leave the `show`ing to your callers.
16:47:26 <acowley> dmwit: Is it a moved forall that blocks unification? I thought it was just type equalities that GHC wouldn't look through.
16:47:28 <joe9> dmwit, That is what I had initially.
16:48:11 <dmwit> acowley: I'm treading a bit outside my firm knowledge here. It might be worth an email to one of the mailing lists.
16:48:20 <joe9> dmwit, but, it seemed like a good idea to change it to polymorphic to reduce the show stuff.
16:48:49 <dmwit> joe9: You can easily write `log :: Show a => Context -> a -> IO ()` if `cLogger` accepts `String`s.
16:49:08 <dmwit> joe9: `log ctxt a = cLogger ctxt (show a)`
16:50:42 <acowley> Hrmph, the newtype isn't actually working in the larger code base, so it's even worse off.
16:51:36 <dmwit> urk
16:51:49 <acowley> It's much more complicated, though
16:52:09 <Gurkenglas> mgsloan, https://gyazo.com/cbe7804ba61c1a13cfbfac6b8be8154e
16:52:16 <acowley> I guess I'll try this one out on IRC every now and again to see if anyone has any ideas
16:52:56 <acowley> I'd like to understand what GHC's problem is.
16:53:22 <mniip> ohh
16:53:29 <mniip> I think I've seen a similar thing happen
16:53:46 <mniip> where it does monomorphism restriction in like the wrongest place ever
16:54:12 <acowley> In general, the issue I have with the newtype is that I need to annotate it's application. 
16:54:13 <joe9> dmwit thanks
16:54:27 <mniip> ah
16:54:33 <mniip> that's where I think I saw it
16:54:37 <acowley> dmwit: Check it out, if you move the newtype constructor application to the foo'' application, it breaks down again
16:54:47 <mgsloan> Gurkenglas: Perhaps add extra-lib-dirs: "D:\Haskell" to config.yaml?
16:54:53 <Gurkenglas> Is the ghc that 64-bit stack installs also automatically 64-bit?
16:54:59 <mniip> hmm
16:55:00 <acowley> dmwit: That is, leaving aux :: Applicative f => f (Int -> Int -> Int)
16:55:03 <mniip> looks like a legit bug
16:55:37 <acowley> dmwit: So you have to be really careful not to rely on a type annotation on the actually polymorphic term
16:56:44 <mniip> https://hackage.haskell.org/package/acme-php-0.0.3/docs/Prelude-PHP.html
16:56:54 <mniip> if you take a look at the type of sortBy, and the type of sort
16:56:59 <mniip> and then the definition of sort
16:58:29 <glguy> mniip: What's surprising about those two definitions?
16:59:07 <hpc> that's the monomorphism restriction
16:59:18 <hpc> which easily leads to type errors in newbie code, but is not a bug
16:59:35 <mniip> oh right
16:59:53 <mniip> having no type annotation does that I suppose
16:59:54 <hpc> i consider the haddock for acme-php to be spoilers for that exact reason :D
17:00:37 <mniip> okay then consider me tricked
17:00:54 <hpc> there's one other minor spoiler in haddock that isn't directly visible
17:01:04 <hpc> but if you mouse over all the "Bool"s you might spot it
17:01:19 <Gurkenglas> What does the config.yaml look like after that modification if before it was just comments and {}? Changing it to {extra-lib-dirs: "D:\Haskell"} or {}\n\nextra-lib-dirs: "D:\Haskell" gives something like http://lpaste.net/1969563300618305536 and I dont see the relevant info on https://docs.haskellstack.org/en/stable/yaml_configuration/#yaml-configuration
17:02:44 <acowley> I added all the variations as annotations on that lpaste
17:02:47 <sena_kun> perhaps it's late for yesod users, eh. Or my question is strange. I'm going to grep shakespeare sources a bit then...
17:02:54 <mniip> Gurkenglas, the first is correct
17:03:00 <mniip> but realize that you want \\
17:03:26 <Gurkenglas> \\ where?
17:04:26 <mniip> D:\\Haskell
17:04:32 <mniip> string escape characters apply
17:05:11 <Gurkenglas> kk
17:05:43 <Gurkenglas> no sell https://gyazo.com/4c041f43b1ff5a63896afc23b0dafc15
17:06:03 <mniip> hmm get rid of those {}
17:06:12 <mniip> I'm not sure if {} object notation is allowed at toplevel
17:06:14 <Gurkenglas> oh hey wait that error is readable
17:06:30 <Gurkenglas> yea works now i needed [] around the string
17:06:52 <Koterpillar> mniip: hint: valid JSON is valid YAML
17:06:52 <Gurkenglas> expected [a] encountered String :)
17:07:21 <mniip> aah
17:07:24 <Gurkenglas> adding the .dlls changed nothing tho mgsloan
17:07:34 <mniip> I was reading the wrong error
17:07:48 <mniip> your shell prompt is not colorful enough
17:08:10 <Gurkenglas> well yea shell prompts are stupid why do you think im on windows
17:08:43 <mniip> you tell me
17:09:41 <Gurkenglas> because windows has less shell prompts. except when i do things that only work on windows because the people that use linux wanted to include us
17:11:25 <Gurkenglas> (as in, every time i try to switch to linux the shell stuff spits me back out)
17:11:54 <codehero> you don't need to use the shell in linux
17:11:59 <Koterpillar> Gurkenglas: export PS1='% '
17:12:45 <mniip> Koterpillar, not enough colors
17:13:13 <Gurkenglas> Is that a command you mean me to execute to add some insufficient amount of color to my shell prompt?
17:13:33 <mniip> mine's like, PS1="\\[${color}31m${color}1m\\]\\u@\\h\\[${color}0m\\] \\[${color}36m${color}1m\\]\\W\\[${color}0m\\] \\[${color}32m${color}1m\\]\\\$\\[${color}0m\\] "
17:15:04 <Gurkenglas> Is the ghc that 64-bit stack installs also automatically 64-bit?
17:15:05 <Koterpillar> Gurkenglas: also, zsh's default is pretty much that (no color, no fancy Git statuses or anything)
17:15:09 <Koterpillar> Gurkenglas: yes
17:15:22 <Koterpillar> Gurkenglas: sorry, it is on Linux, not sure about other OSes
17:15:44 <geekosaur> ... https://github.com/geekosaur/dotty/blob/master/.prompt.pl :p
17:16:12 <Koterpillar> geekosaur: screenshot
17:16:20 <Gurkenglas> Im not against color, im against shell prompts ^^ tho ill grant that my response of "<Gurkenglas> well yea shell prompts are stupid why do you think im on windows" might have been a bit mismatched to its previous line
17:16:31 <geekosaur> not a lot to see since in terminal windows it stows most of it in the titlebar :p
17:16:40 <Koterpillar> Gurkenglas: PS1='% ' will give you exactly that as a prompt, '% '
17:17:02 <Koterpillar> geekosaur: larger screenshot :)
17:17:21 <mniip> geekosaur, what the
17:18:35 <geekosaur> mostly that's a holdover from previous employer, where I had a network-shared home dir that could be used on something like 12 different hardware/os combinations (initially; it shrank a lot over time)
17:19:16 <codehero> how can anyone say that shell prompts are stupid and still code? especially haskell...
17:19:59 <Koterpillar> codehero: it's not a shell prompt that makes you a good programmer, especially haskell
17:20:19 <glguy> I got 3 better at Haskell when I colored my shell prompt
17:20:25 <codehero> well of course not, but when you know how to write haskell, you should be smart enough to use a shell prompt
17:20:58 <codehero> glguy: really? i gotta try that. i got 5 skill points for installing zsh, so maybe some extra color will help me
17:21:25 <Koterpillar> codehero: IMO you should force neither Haskell nor prompts on people
17:21:36 <codehero> i'm not
17:21:39 <glguy> 10host:08~/path $
17:21:40 <codehero> i'm just wondering
17:21:48 <Axman6> ls
17:21:56 <hpc> imagine discovering shell prompt configuration for the first time
17:22:03 <glguy> ghc-7.10.3 ghc-8.0.1
17:22:11 <hpc> your reaction would likely be "oh, that's pretty neat" and not "this changes EVERYTHING"
17:22:13 <Axman6> cd ghc-8.0.1
17:22:15 <Axman6> ls
17:22:23 <codehero> honestly. i'm just using grml config and it works perfectly for me
17:22:34 <codehero> i like my terminal, but i'm lazy
17:22:47 <glguy> Axman6: Hey, quit using my computer!
17:22:48 <hpc> how did we get on this topic anyway?
17:23:04 <hpc> oh, via cmd.exe
17:23:17 <codehero> Gurkenglas complained about how stupid shells were
17:23:26 <codehero> oh cmd.exe, lol
17:23:45 <geekosaur> https://dl.dropboxusercontent.com/u/8376576/screenshotM-20160809T202100.png if you really care (left ws on the left open...)
17:23:48 <codehero> to be fair. if i had to use that, i would also think that shells were horrible
17:24:16 * geekosaur sends codehero powershell
17:24:46 <codehero> i heard that powershell was great
17:28:03 * hackagebot glirc 2.6 - Console IRC client  https://hackage.haskell.org/package/glirc-2.6 (EricMertens)
17:31:59 <Gurkenglas> huh rumpus is actually meant to be built on windows primarily, cool
17:33:24 <vctr> is ghcid broken now?
17:33:42 <vctr> seems to just say "Reloading" without actually reloading.
17:44:26 <Gurkenglas> Do normal people git clone links that look like git@github.com:lukexi/$i ? those dont work for me, instead i use stuff like https://github.com/lukexi/$i.git
17:44:48 <Koterpillar> Gurkenglas: have to have an SSH key with Github to be able to do that
17:44:59 <geekosaur> normally you use those if you have an ssh key and you have commit access to the repo
17:45:10 <geekosaur> otherwise use the https: link for a read only clone
17:45:11 <Koterpillar> geekosaur: access doesn't matter, you can still pull
17:45:42 <Koterpillar> I personally hate to enter the username/pw/2facode for https, so always go for ssh clones
17:46:03 <Gurkenglas> --recursive seems to try to ssh key kind even if i start with the other, can that be changed?
17:46:18 <Koterpillar> yes, one moment
17:46:18 <Gurkenglas> *try the ssh key kind
17:46:40 <Koterpillar> Gurkenglas: https://github.com/koterpillar/desktop/blob/master/config/git/config#L14
17:46:42 <Gurkenglas> k we should pr that to https://github.com/lukexi/rumpus/blob/master/scripts/clone-dependencies.sh
17:46:47 <Koterpillar> Gurkenglas: you want the opposite of my config
17:47:26 <Axman6> glguy: sorry man, I don't have 8.0 yet and thought I'd play =P
17:47:33 <Gurkenglas> oh that doesnt look like the sort of thing to be put into a shell script like the one i linked
17:47:46 <geekosaur> hm? usually I let the https ones be anonymous. so the repo itself warns me if I try to push or whatever since I pulled it without ability to push
17:48:23 <Koterpillar> Gurkenglas: this goes into your git config (~/.gitconfig, ~/.config/git/config, no idea where on Windows)
17:48:47 <et09> can someone explain to me why cabal doesn't allow multiple versions of packages? (or does it?) 
17:48:51 <Gurkenglas> right, i was hoping for some modification to https://github.com/lukexi/rumpus/blob/master/scripts/clone-dependencies.sh which would make it work for people like me
17:48:58 <et09> besides that package namespace thing or w/e it's called
17:49:07 <et09> that resembles ruby 'gemsets'
17:49:29 <Koterpillar> Gurkenglas: if you have a Github account, the easiest way is to get a key
17:50:04 <Gurkenglas> im trying to set it up for other people here, they shouldnt have to get a github account to build rumpus
17:50:36 <Koterpillar> Gurkenglas: you can change all the submodule URLs in all the repos
17:52:38 <Koterpillar> Gurkenglas: or make people install that piece of config that I linked you to
17:53:26 <Gurkenglas> well i guess maybe i shouldnt be trying to make it too easy to build lukexi will want to sell that thing on steam
17:54:14 <Gurkenglas> but thx
17:55:02 <mniip> so wait
17:55:30 <Axman6> et09: how are bool-1.0 and bool-2.0 supposed to coexist in the same program if one defines data Bool = True | False and the other defines data Bool = False | True | FileNotFound?
17:55:38 <mniip> when we say "monomorphism restriction" is that simply a word for lack of polymorphism
17:55:45 <mniip> or are monic morphisms actually involved
17:56:15 <geekosaur> the former
17:56:17 <et09> Axman6: i'm thinking specifically about how you seem to have to specify everything you want to install when you run 'cabal install'
17:56:44 <geekosaur> t's forcing a polymorphic expression to pick a concrete type, or throw an error if it can't
17:57:06 <mniip> no I mean the etymology of the term
17:57:55 <geekosaur> ypu'd have to ask the author of the haskell 98 report (or possibly some earlier version)
17:59:35 <wolfperson> hi sorry i have an xmonad problem not a haskell problem per se but #xmonad is dead
18:01:05 <wolfperson> i think i messed up installing 0.12 with cabal somehow
18:01:19 <codehero> wolfperson: what's the problem?
18:01:25 <Koterpillar> wolfperson: what makes you think so? provide details
18:01:45 <Axman6> et09: these problems are mostly avoided by using stack
18:02:12 <wolfperson> nearly of the modules from my config are "missing", i dont remember the exact error
18:02:30 <Koterpillar> wolfperson: hmm. Can you reproduce it?
18:02:45 <wolfperson> i could, but there's something else too
18:03:19 <wolfperson> which is that urxvt isn't loading .Xresources i don't think, or at least not the colors for some reason
18:03:32 <Koterpillar> wolfperson: i.e. you don't have X at all?
18:03:42 <geekosaur> if you installed from vendor packages, make sure you installed both xmonad and xmonad-contrib. if this is a debian-like, you need 3 packages: xmonad, libghc-xmonad-dev, libghc-xmonad-contrib-dev
18:03:42 <wolfperson> no, everything works fine, it's just default colors
18:04:09 <wolfperson> but what's stranger is that 'ls' is no longer a bash command
18:04:10 <codehero> wolfperson: do "xrdb ~/.Xresources" for the urxvt thing
18:04:20 <wolfperson> ok
18:04:31 <codehero> wat?
18:04:43 <geekosaur> sounds like $PATH is wrong
18:04:50 <wolfperson> ah probably
18:04:55 <geekosaur> which might also explain xrdb not working
18:04:58 <geekosaur> echo $PATH
18:04:59 <wolfperson> i was fussing with it before i restarted
18:05:00 <codehero> do you have /bin/ls or /usr/bin/ls?
18:05:07 <codehero> oh right. path
18:05:09 <codehero> yeah
18:05:14 <codehero> that'd also explain the cabal thing
18:05:24 <wolfperson> /home/andy/go/bin:/usr/local/bin:/usr/bin:/usr/local/games:/usr/games:/home/andy/.cabal/bin:/usr/local/go/bin
18:05:48 <wolfperson> idk what i did to it
18:06:00 <codehero> you're using archlinux, right?
18:06:07 <wolfperson> debian stable
18:06:25 <et09> on another note, anyone know a page that compares haskell and golang code side by side?
18:06:41 <Koterpillar> no /bin
18:06:42 <Koterpillar> wolfperson: distro?
18:06:43 <codehero> oh, debian also has /usr/bin?
18:06:48 <codehero> i thought debian stuff was in /bin
18:07:02 <wolfperson> yeah it does, i think
18:07:05 <codehero> because in that case you should add /bin to your path
18:07:29 <wolfperson> just /bin?
18:07:30 <codehero> not sure where you got the /usr/bin from, but i guess there may be some stuff there
18:07:34 <codehero> yeah
18:07:41 <wolfperson> ok
18:07:44 <codehero> or you copied some shell config from someone who uses arch
18:07:45 <Koterpillar> wolfperson: both; look into /etc/skel maybe?
18:08:18 <wolfperson> i was trying to put go in my path today
18:08:34 <slack1256> I've never used stack before. Is my understanding that it pins versions down instead of the ranges cabal uses (and solver)?
18:08:35 <codehero> did you copy paste something?
18:08:43 <wolfperson> no
18:09:04 <codehero> huh. well, then i'm not sure how you managed to remove the /bin
18:09:05 <geekosaur> well, you're missing /bin which often has many basic utilities (such as ls)
18:09:10 <wolfperson> no i forgot where i installed go lol
18:10:51 <wolfperson> ok cool, that fixed it i think
18:11:49 <wolfperson> i'll restart xmonad to show you the errors
18:12:48 <geekosaur> codehero, traditionally basic utilities are in /bin and everything else in /usr/bin
18:14:13 <geekosaur> this is mostly a holdover from the old days when disk drives were tiny and only a few files would fit in the root filesystem, and some --- not all --- systems have (following Solaris) switched to /usr/bin being the main directory and /bin being a symlink to it
18:16:18 <codehero> but it should be fine if you just add it back
18:17:46 <wolfpers1n> http://pastebin.com/vrZXG2zc
18:17:46 <geekosaur> in any case, this being debian I think the missing modules is they did apt-get install xmonad
18:17:56 <wolfpers1n> ^ accurate
18:18:22 <geekosaur> [10 01:03] <geekosaur> if you installed from vendor packages, make sure you installed both xmonad and xmonad-contrib. if this is a debian-like, you need 3 packages: xmonad, libghc-xmonad-dev, libghc-xmonad-contrib-dev
18:18:25 <wolfpers1n> though i tried to install cabal and i couldn't make it usable
18:18:37 <wolfpers1n> i've got those
18:19:13 <wolfpers1n> what's strange is that this happened really out of the blue, i've been using xmonad fine
18:19:15 <Koterpillar> wolfpers1n: XMOnad != XMonad
18:19:27 <wolfpers1n> i know, that wasn't in the message
18:19:33 <wolfpers1n> i couldn't copy and paste it
18:20:05 <Koterpillar> wolfpers1n: ghc-pkg list
18:20:46 <wolfpers1n> ok, what should i be looking for
18:20:56 <codehero> nice :D
18:20:56 <codehero> also. use "which" if you don't know where a binary might be
18:20:56 <codehero> well
18:20:56 <codehero> yeah, but arch just puts everything in /usr/bin
18:20:57 <codehero> including utils
18:20:58 <codehero> for some reason, i dunno
18:20:59 <codehero> ah, i see
18:21:00 <codehero> like you have /bin on your floppy or something and then the rest on your 4mb hdd?
18:21:01 <codehero> yeah, you need xmonad-contrib
18:21:07 <Koterpillar> xmonad
18:21:26 <codehero> also you have a typo
18:21:32 <wolfpers1n> where
18:21:33 <codehero> a pretty obvious one at that
18:21:37 <codehero>  Could not find module `XMOnad.Hooks.ManageDocks'
18:21:50 <wolfpers1n> right that's not in the message i just typed that into pastebin
18:21:57 <codehero> oh
18:21:58 <wolfpers1n> i couldnt copy and paste
18:22:03 <codehero> okay
18:22:13 <codehero> then install contrib if you haven't already
18:22:27 <wolfpers1n> if you mean libghc-xmonad-contrib ive got that
18:22:48 <wolfpers1n> or wait, that's not its name
18:23:32 <wolfpers1n> libghc-xmonad-contrib-dev?
18:23:48 <wolfpers1n> ive got that, and the other one too
18:23:59 <geekosaur> the /bin /usr/bin split predates floppies. it's from when you loaded the OS from *tape*, and the root had just enough stuff to be able to mount /usr from a disk, once the kernel was running to provide a disk device driver
18:24:20 <Koterpillar> I wonder what's the point of -contrib if you have to have -dev
18:24:40 <Koterpillar> wolfpers1n: what does 'ghc-pkg list | grep xmonad' give?
18:25:06 <wolfpers1n> xmonad-0.11 and xmonad-contrib-0.11.3
18:25:21 <geekosaur> do you mean xmonad vs. xmonad-contrib? you can do stuff with just the xmonad package (and the dev package that debian always splits out from the program...), but most of the *interesting* stuff is in -contrib
18:25:53 <geekosaur> the main reason to split them is so we can release contrib more often, since it gets new stuff much more often than the core does (which basically just gets bugfixes/new ghc compatibility)
18:26:23 <wolfpers1n> id just like it if i could get xmobar to display the weather
18:26:40 <Koterpillar> geekosaur: no, specifically with Debian, I wonder what's -dev providing
18:27:22 <geekosaur> xmonad is just /usr/bin/xmonad and the session stuff. debian *always* splits libraries from executables
18:27:31 <Koterpillar> wolfpers1n: taffybar and tianbar can [disclaimer: I'm the author of tianbar]
18:27:36 <geekosaur> we don't do that, the debian packaging does
18:27:49 <geekosaur> it's just one of their peculiarities
18:27:57 <wolfpers1n> Koterpillar neat
18:28:11 <wolfpers1n> i'd like to get to the bottom of this still
18:28:28 <wolfpers1n> but yeah i'm kind of clueless
18:28:30 <Koterpillar> wolfpers1n: ghc -v ~/.xmonad/xmonad.hs
18:29:13 <wolfpers1n> ohhh shit was that the -v command the error was talking about?
18:29:42 <wolfpers1n> ok so what did that do
18:30:26 <Koterpillar> what did it do? paste the output?
18:30:31 <wolfpers1n> sure
18:30:54 <codehero> wolfpers1n: could you try just installing xmonad-contrib? without the dev
18:31:22 <wolfpers1n> http://pastebin.com/UQ2RLNx8
18:31:37 <wolfpers1n> my shell's history wasnt long enough to catch everything
18:31:57 <wolfpers1n> xmonad-contrib isn't a package
18:32:13 <geekosaur> hiding package case-insensitive-1.1.0.2 to avoid conflict with later version case-insensitive-1.2.0.7 (and a bunch of others)
18:32:16 <wolfpers1n> there's a xmonad-dev...
18:32:36 <wolfpers1n> and yeah, i've got that
18:32:39 <geekosaur> codehero is still trying to treat your debian as arch and use arch package names. unsurprisingly it is not working
18:32:46 <linoge> Hi again, howdy ^^.
18:33:07 <wolfpers1n> do i have to install arch
18:33:10 <lpaste> argent0 revised “Is this how you use a catamorphism?”: “Is this how you use a catamorphism?” at http://lpaste.net/175425
18:33:29 <codehero> wolfpers1n: lolno
18:33:31 <geekosaur> no, you should not have to install arch
18:33:37 <codehero> geekosaur: heh, no i actually googled the package name https://packages.debian.org/source/sid/xmonad-contrib
18:33:48 <geekosaur> sid? glwt
18:33:57 <wolfpers1n> right
18:34:00 <geekosaur> they said they're on stable. sid is unstable
18:34:04 <codehero> i don't know. i don't use debian ._.
18:34:10 <wolfpers1n> well there's backports
18:34:11 <geekosaur> so maybe they redid the packages in unstable
18:34:26 <wolfpers1n> ill look
18:35:03 <geekosaur> in any case it sounds like you have additional packages installed from somewhere, and given that it seems to only be looking locally for those modules, you may have a different ghc installed than the one that came with debian
18:35:09 <geekosaur> if you did that, you can't use the debian packages
18:35:24 <geekosaur> you will have to use cabal to install xmonad and xmonad-contrib
18:35:42 <Koterpillar> do you have more than one ghc?
18:35:50 <geekosaur> and add $HOME/.cabal/bin to $PATH
18:36:14 <argent0> Is there a name for the 'Thing' class?
18:36:15 <wolfpers1n> possibly Koterpillar
18:36:39 <wolfpers1n> yeah that would make sense because i tried installing xmonad with cabal multiple times actually..
18:36:47 <Koterpillar> oh
18:36:54 <Koterpillar> paste the full output of ghc-pkg list
18:38:18 <wolfpers1n> does anyone know offhand how to make urxvt's history longer
18:38:56 <codehero> wolfpers1n: that depends on your shell
18:39:16 <Koterpillar> wolfpers1n: you can pipe things to files...
18:39:18 <wolfpers1n> i thought so too but editing my .bashrc didn't work
18:39:22 <codehero> unless you mean the scrolling
18:39:26 <wolfpers1n> yeah that
18:39:32 <codehero> errr.. backlog i think
18:40:00 <codehero> hm. no
18:40:07 <codehero> ah, scrollback buffer it's called
18:40:33 <Koterpillar> wolfpers1n: e.g. see http://sprunge.us/
18:40:34 <Koterpillar> ghc-pkg list | curl -F 'sprunge=<-' http://sprunge.us
18:41:52 <wolfpers1n> broken packages, oh no
18:41:54 <ski> (`XTerm*vt100.saveLines: 8192' for XTerm. i suppose RXVT doesn't use X resources ?)
18:41:59 <wolfpers1n> http://sprunge.us/eBCP
18:42:08 <codehero> i think it might be saveL... yeah, what ski said
18:42:14 <wolfpers1n> i just fixed that actually
18:42:28 <codehero> it's just URxvt.saveLines
18:42:43 <wolfpers1n> ^ thanks
18:43:05 * hackagebot species 0.4 - Computational combinatorial species  https://hackage.haskell.org/package/species-0.4 (BrentYorgey)
18:43:19 <geekosaur> rxvt does, but it won't listen to xtrm's resources
18:43:26 <wolfpers1n> http://sprunge.us/eBCP
18:43:48 <jchia1> I'm using stack and find that the generated executables are pretty large (10M) even for simple programs. how can i get stack to build shared libraries and generate executables that dynamically link to shared libraries?
18:44:00 <Koterpillar> wolfpers1n: if you (temporarily) rename ~/.ghc away, what happens?
18:44:17 <wolfpers1n> rename it to what
18:44:25 <Koterpillar> ~/.ghc-not-right-now
18:44:44 <wolfpers1n> ok, done
18:45:01 <wolfpers1n> what should i do to test it
18:45:06 <Koterpillar> xmonad --recompile
18:45:38 <wolfpers1n> error message: "parse error on input `,'
18:45:46 <wolfpers1n> on line 254
18:45:51 <codehero> oh that's great
18:45:54 <Koterpillar> ...different ghcs?
18:46:46 <codehero> wolfpers1n: do you have ghc in ~/.cabal/bin ?
18:47:00 <wolfpers1n> no
18:47:20 <codehero> hrm
18:47:23 <codehero> weird
18:47:41 <codehero> do you have xmonad in cabal bin?
18:47:47 <wolfpers1n> yes
18:47:55 <codehero> that might be the problem
18:48:07 <wolfpers1n> yeah i don't know how to remove or uninstall it actually
18:48:27 <wolfpers1n> i couldn't ghc-pkg to work
18:48:27 <codehero> just delete the binary
18:48:34 <wolfpers1n> in bin?
18:48:38 <wolfpers1n> got it
18:48:39 <codehero> yeah
18:48:43 <wolfpers1n> lol
18:48:47 <codehero> as long as you have it installed with apt
18:48:51 <codehero> which i assume you have
18:49:00 <wolfpers1n> yep
18:49:06 <codehero> okay
18:49:26 <wolfpers1n> ok, same error message as the beginning
18:49:44 <codehero> did you do xmonad --recompile?
18:49:49 <wolfpers1n> yep
18:49:56 <codehero> weird
18:50:07 <codehero> ummm.. do you have anything important in .ghc?
18:50:12 <wolfpers1n> and i swear i've apt-get purged it and just tried a cabal install before
18:50:32 <wolfpers1n> hard to say
18:50:46 <wolfpers1n> x86_64-linux-7.10.3  x86_64-linux-7.6.3
18:50:58 <wolfpers1n> those are the two directories in .ghc, which i dont understand really
18:51:48 <geekosaur> you have two versions of ghc installed
18:51:53 <geekosaur> 7.6.3 is debian's
18:51:59 <wolfpers1n> ugh
18:52:06 <wolfpers1n> ok, great, thank you
18:52:14 <codehero> huh
18:52:27 <geekosaur> welcome to debian stable :)
18:52:40 <wolfpers1n> lol ive been using it for a year with no problems really
18:52:53 <codehero> heh. i think you'll be able to help wolfpers1n out better than i
18:53:04 <codehero> i'll need to go now
18:53:05 <wolfpers1n> no it's fixed
18:53:05 <codehero> so, good night and good luck
18:53:09 <codehero> oh, okay
18:53:11 <wolfpers1n> good night, thank you
18:53:12 <codehero> that's great :)
18:53:13 <geekosaur> "there's this special biologist word for stable. we call it dead." which in some ways characterizes debian stable package versions >.>
18:53:28 <codehero> lol
18:53:32 <wolfpers1n> yeah i'm beginning to see the problem now
18:53:33 <codehero> (that's why i use arch)
18:53:48 <wolfpers1n> i've heard unstable is just fine though
18:53:57 <geekosaur> testing's the safer alternative
18:54:06 <wolfpers1n> or that's what i meant, yeah
18:54:22 <geekosaur> they try to be careful, but an apt-get upgrade of sid sometimes offers to remove glibc and 90% of your system with it >.>
18:54:30 <wolfpers1n> anyway how should i uninstall the other ghc
18:54:49 <wolfpers1n> lol
18:55:00 <geekosaur> without knowing how you installed it, nobody can say
18:55:12 <glguy> Debian Stable provides a valuable view into the past for software archeologists
18:55:14 <wolfpers1n> it couldn'tve been apt-get so it must have been cabal
18:55:22 <geekosaur> cabal can't install ghc
18:55:29 <wolfpers1n> ok then it wasnt cabal
18:55:34 <wolfpers1n> buhhhh hmm
18:55:35 <geekosaur> it *could* have been apt-get... if you are using someone's PPA
18:56:02 <geekosaur> but in that case you can't use any of the standard debian haskell packages, because they all expect and install stuff for debian's ghc 7.6.3
18:56:04 * ski . o O ( "Well it just so happens that your friend here is only _mostly_ dead. There's a big difference between mostly dead and all dead... Now, mostly dead is slightly alive. Now, all dead - well, with all dead, there's usually only one thing that you can do.","What's that?","Go through his clothes and look for loose change!" )
18:56:06 <wolfpers1n> i might have just installed the binary too but i don't remember
18:57:13 <joe9> I just switched all my data types from String to Text. And, What a difference that made to my CPU usage. It is amazing. Earlier the fans were going on all the time when I ran this program. Now, they do not even start.
18:59:00 <wolfpers1n> ok so there's two ghc packages available
18:59:18 <wolfpers1n> uninstall the oldest one im guessing?
18:59:47 <wolfpers1n> well ok aptitude says only 7.6 is installed
19:00:04 <geekosaur> then only one is from debian's package system
19:00:47 <wolfpers1n> how could that be though, i'm using the aptitude package manager
19:01:09 <wolfpers1n> there's just two versions available i think
19:01:47 <wolfpers1n> actually i only have one choice, nevermind
19:02:40 <geekosaur> the "official" ghc download doesn't go through apt
19:03:09 <geekosaur> it would have installed (by default; it can be changed) in /usr/local/bin
19:05:01 <lingxiao> hey all
19:05:03 <wolfpers1n> #haskell is so much more pleasant than #go-lang, i never use irc anymore
19:05:16 <palat> this is irc.
19:05:24 <wolfpers1n> indeed
19:05:58 <lingxiao> suppose I have three regular expressions as follows: http://lpaste.net/
19:06:07 <lingxiao> and I want to combine them with or: 
19:06:34 <dramforever> lingxiao: Your link was cut off
19:06:56 <lingxiao> sorry here: http://lpaste.net/175440
19:07:11 <lingxiao> and I want to combien them with OR,  so re = re1 | re2 | re3
19:07:22 <lingxiao> what is the or operatioin in Data.Text.ICU ?
19:07:25 <lingxiao> I cant seem to find it here:
19:07:36 <lingxiao> https://hackage.haskell.org/package/text-icu-0.7.0.1/docs/Data-Text-ICU.html#t:Regex
19:08:39 <glguy> lingxiao: The operation is you put | between them all and compile that
19:09:19 <geekosaur> well, provided it's not POSIX BRE
19:09:26 <geekosaur> (\| might work for that)
19:09:27 <lingxiao> glguy if I do:   let re12 = re1 | re2 I get   parse error
19:09:38 <glguy> lingxiao: no, you make one regular expressoin
19:10:00 <glguy> "this|that"
19:10:05 <lingxiao> glguy could you show me an example I'm not following ?
19:10:29 <geekosaur> it has to be one string, you put | between the individual expressions
19:10:30 <glguy> The thing I just wrote
19:10:32 <lingxiao> you mean for re1' and re2' :: .Text
19:10:50 <dramforever> lingxiao: Do you have Text's or Regex's?
19:10:52 <lingxiao> soo ... "\\d|\\d+\\.?\\d+"
19:11:01 <geekosaur> yes
19:11:05 <lingxiao> I'm trying to compose ICU.Regex
19:11:13 <lingxiao> this way it's a bit more readable
19:11:14 <dramforever> ooh
19:11:25 <geekosaur> although I think that specific regex does not do what you want
19:11:33 <geekosaur> (first part matches *one* digit)
19:11:34 <glguy> Yeah. Regular expressions are suited for run-time provided patterns, say your IRC client has a /grep command that needs a syntax suitable for a command
19:11:37 <lingxiao> like instead of "\\d|\\d+\\.?\\d+|(\\d{1,3},)+\\d{3}(\\.\\d{1,3})?"
19:11:55 <lingxiao> glguy sorry what do you mean by that?
19:12:23 <ski> @quote stark
19:12:23 <lambdabot> AlanPerlis says: The string is a stark data structure and everywhere it is passed there is much duplication of process. It is a perfect vehicle for hiding information.
19:12:25 <glguy> It looks like you're trying to use them like a poor replacement for parser combinators or something
19:12:33 <glguy> where you might have Haskell operators to combine parsers
19:12:34 <dramforever> lingxiao: You are *not supposed* to combine Regex'es
19:12:48 <dramforever> Different Regex'es can even have different matching options
19:13:09 <lingxiao> ok here I should be very honest in that I don't understand regex very well
19:13:21 <lingxiao> how it works in haskell, how it works in general. 
19:13:26 <lingxiao> in practice i mean
19:13:56 <lingxiao> I know from the sipser book what regexes are in theory
19:13:57 <dramforever> A regex is a regular *expression*, which is a *string* (generally)
19:13:59 <palat> how popular is liquid haskell among you all
19:14:14 <dramforever> So you write a *string*, compile it, match text with it
19:14:15 <lingxiao> this one:https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/113318779X
19:14:16 <palat> do you use it often, or at all
19:14:25 <c_wraith> liquid haskell isn't used all that much.  I really like the idea, but the implementation just isn't there yet.
19:14:34 <geekosaur> ^
19:14:55 <palat> Would rust be a better option in place of liquid haskell applications
19:15:07 <c_wraith> Rust does basically nothing liquid haskell provides. :)
19:15:13 <palat> whoop
19:15:18 <palat> I guess I was thinking of memory
19:15:27 <geekosaur> lingxiao, you probably need to learn more about regexes anyway. the one you're trying to build would be very inefficient
19:15:38 <geekosaur> and for the effort you'd put into fixing that, you could do it properly with a parser
19:15:40 <lingxiao> geekosaur how so?
19:15:48 <dramforever> Rust can't do compile-time bounds check I think?
19:16:05 <geekosaur> all the components start with the same initial sequence. you should match that once, not repeat it
19:16:08 <lingxiao> geekosaur  so my use case is that I want to scan through a document and replace all occurances of numbers with some token
19:16:16 <lingxiao> ie  43.211 becomes <NUM>
19:16:25 <lingxiao> what would you do given this use case
19:16:37 <geekosaur> because it's going to try matching the first one, fail, backtrack, try to match the first one plus some additional stuff, fail, backtrack, ...
19:16:48 <lingxiao> so you're saying the run time is bad
19:16:53 <bjz_> dramforever: there is a PR: https://github.com/rust-lang/rfcs/pull/1657
19:16:57 <bjz_> *RFC
19:17:50 <dramforever> Whoa
19:18:21 <lingxiao> geekosaur and anyone else, is there a library that does what I'm describing?
19:18:45 <dramforever> Does it work well enough so that, say, if I write a binary search it will tell me if it'll never "go wild"?
19:19:20 <bjz_> dramforever: no idea -- it's still a proposal. long way off
19:19:48 <dramforever> Ok
19:20:59 <NeverDie> What's usually recommended to serve static files on a web server hosted through Haskell?
19:21:06 <NeverDie> Like for example, a React project.
19:21:23 <palat> Careful, react will try to copyright your stuff
19:22:21 <NeverDie> palat: I thought we were past that.
19:22:51 <palat> lmao
19:23:06 <lingxiao> ping geekosaur
19:23:26 <geekosaur> I don't know of a library that does what you want out of the box. it seems kinda specific for that
19:23:37 <nshepperd> lingxiao: there don't seem to be any combinator libraries in the "regex" space, but that's fine since you can use a parser combinator library like parsec
19:25:00 <lingxiao> nshepperd do you know off the top of your head any tutorial  or  github projects that deals specifically with my use case
19:25:11 <lingxiao> that is finding strings under some pattern and replacing them with some other string?
19:25:28 <enthropy> nshepperd, have you seen https://hackage.haskell.org/package/regex-applicative
19:25:59 <lingxiao> enthropy is it well maintianed?
19:27:07 <nshepperd> enthropy: :O
19:27:09 <enthropy> probably. I think the author is pretty smart/ has done other work
19:27:15 <enthropy> that I also like
19:27:36 <dramforever> That's still regex, you see
19:28:07 <geekosaur> well, it's more a parser combinator library masquerading as a regex library
19:28:27 <dfeuer> Hrmm... No Cale... I wonder if his computer still hasn't recovered.
19:28:37 <nshepperd> I haven't of anyone doing find and replace with Parsec, though
19:29:01 <dramforever> lingxiao: What was the goal again?
19:29:20 <dramforever> Finding and replacing specific tokens
19:29:21 <dramforever> ;
19:29:23 <dramforever> ouch
19:29:30 <dramforever> Finding and replacing specific tokens?
19:29:59 <nshepperd> I guess lingxiao could just write their own newtype wrapper around Text with operators for constructing a regex
19:30:24 <dramforever> Or just write down a regex
19:30:41 <nshepperd> well yeah but regexes are ugly
19:31:05 <nshepperd> we demand combinators!
19:31:37 <lingxiao> nshepperd dramforever   it's an NLP pre proessing task
19:31:56 <lingxiao> I need to find all occurences of numbers and replace them with some token, ie:
19:32:04 <lingxiao> hello4322 becomes hello<NUM>   
19:32:09 <lingxiao> 3233.432 becomes <NUM>
19:32:10 <lingxiao> etc
19:32:11 <dramforever> Ok
19:32:34 <lingxiao> there's also some stuff from this twokenize library from some guys in Carnegie Mellon that I may port over
19:32:38 * ski . o O ( lexing/tokenizing ? )
19:32:45 <lingxiao> but yes ... it's an ugly thankless but crucial task
19:32:53 <lingxiao> and very real world
19:33:29 <lingxiao> geekosaur sorry you said it's a parser combinator lib masqueradigng as regex library
19:33:39 <lingxiao> do you mean it's not using regex on the inside at all?
19:34:08 <lingxiao> yeah and nshepperd in the api of regex-applicative you provided I see a find and replace function
19:34:30 <geekosaur> lingxiao, this is haskell. we don't use regexes, in general; parser combinators are easy, more readable, and often faster
19:34:37 <nshepperd> enthropy posted that but cool
19:34:43 <lingxiao> oh ops sorry
19:35:22 <geekosaur> yes, we understand that the rest of the world knows only regex and uses them exclusively because they can't imagine anything better than impenetrable syntax and bad backtracking behavior...
19:35:39 <lingxiao> geekosaur ok  I'll use parsec then
19:35:46 <lingxiao> first time in the real world yay
19:36:16 <dramforever> Find and replace with parsec is... strange
19:36:31 * nshepperd thinks geekosaur meant that the term regex has been conflationarily used to refer to both the matching algorithm and the text syntax for constructing matchers
19:36:57 <nshepperd> probably the latter is more correctly called a 'regex' since it is actually an expression...
19:37:10 <geekosaur> more or less
19:37:21 * dramforever thinks geekosaur meant that "Regexes are bad"
19:37:38 <dfeuer> geekosaur, regex-applicative is actually a regex library (ACTUAL regex) masquerading as a parser combinator library.
19:38:20 <dramforever> +1, it compiles code to regex first
19:38:54 <lingxiao> dfeuer  are you the guy who made the library?
19:39:01 <lingxiao> asking because the github account is feuerbach
19:39:10 <lingxiao> if not sorry! just thought I might ask
19:39:20 <dfeuer> lingxiao, no, that's Roman Cheplyaka.
19:39:43 <lingxiao> ok just weird seeing his github account is feuerbach
19:39:56 <lingxiao> anyways what do you mean by  ACUTAL regex ?
19:40:11 <dfeuer> lingxiao, yeah, I'm not sure how he ended up with that handle. I'm not Feuerbach but Feuer<Feuerwerger
19:40:30 <lingxiao> like you're actually using a parser combinator lib but the api is regular expression?
19:41:09 <fr33domlover> lingxiao, regex-applicative has an API similar to that of parser combinators
19:41:20 <nshepperd> I don't even know what regexes are any more. regex regex regex
19:41:25 <dfeuer> lingxiao, I mean that regex-applicative only parses regular languages. None of the special extensions that Perl and whoever hack on to support more general languages.
19:41:58 <dfeuer> I guess it's not actually regular *expressions*, but the languages that "genuine" regular expressions can describe.
19:43:06 <lingxiao> uh can't remember if numbers such as: 4322.11123  is regular
19:43:40 <dfeuer> lingxiao, you mean just some numbers followed by a decimal point followed by some numbers? Definitely regular.
19:43:48 <lingxiao> yeah 
19:43:51 <lingxiao> oh boy 
19:43:56 <dfeuer> Parenthesized expressions are not regular.
19:44:16 <lingxiao> yeah ok that might be a problem since I'm not sure what other special circumstances I might need to account for
19:44:21 <dfeuer> ?
19:44:26 <lingxiao> wait .. that's recognizable by a pushdown automata right
19:44:41 <dfeuer> Sounds right. 
19:44:43 <lingxiao> which is context free
19:44:58 <lingxiao> ok just checking that I didnt forget everything in what is a great subject
19:45:09 <dfeuer> Regular expressions are recognizable by finite state automata.
19:45:22 <lingxiao> wrt the ?, I'm doing preprocessing of text so im not sure what other use cases comes up
19:45:33 <lingxiao> yeh that makes sense
19:45:52 <lingxiao> funny in class we went from regular to context free straight to recursively enumberble
19:45:57 <lingxiao> we didnt really consider context-sensitivie
19:45:59 <lingxiao> but I digress
19:47:27 <begriffs> What's the most efficient way to trim a blank line off the end of a bytestring?
19:47:31 <lingxiao> wait but yeah if it'sa  fact that the feuerbach library only recognizes regular languages, then I cant really use it
19:48:45 <begriffs> The context for my question si that I'm parsing CSVs with cassava and the library dies on input that has a final blank line, despite my program receiving csv in that form.
19:49:07 <ClaudiusMaximus> begriffs: possibly 'init', or 'init.init', depending if your newlines are 1 byte or 2 bytes
19:50:09 <joobus> can the haskellbot here do data.aeson stuff?
19:50:20 <ClaudiusMaximus> i think init for strict bytestrings is O(1)  (possibly just generates a new thingy referencing the data of the original bytestring, with the length field decremented)
19:50:24 <lingxiao> this is a silly question .. 
19:50:41 <begriffs> ClaudiusMaximus: I see a spanEnd function that looks promising... My bytestring is lazy.
19:50:49 <lingxiao> but suppose I open a text file so that we have the format:  str1 \n str2 \n ... \n strn
19:51:38 <lingxiao> and I want to make it into a source using soynman's conduit library
19:51:46 <nshepperd> 'dropWhileEnd isSpace' if you want to remove lines that are blank as in whitespace also
19:51:53 <lingxiao> does anyone know off the top fo their head what the api is
19:52:19 <lingxiao> because if i map over the string and split at the char `\n` so i have a list [str1, str2, ... strn]
19:52:31 <lingxiao> that seems like an awfully round about way of doing it
19:52:38 <lingxiao> even if the list never exist in memory ..
19:52:42 <lingxiao> which i dont know if it does
19:53:08 * hackagebot json-api 0.1.1.1 - Utilities for generating JSON-API payloads  https://hackage.haskell.org/package/json-api-0.1.1.1 (toddmohney)
19:56:39 <begriffs> nshepperd: nice. Maybe I have to convert it to strict bytestring to get those ...End functions. I also see a stripSuffix. But maybe cassava should be improved in this respect because it seems inefficient to go through the string once just to trim it when the csv parser could be improved.
20:01:51 <lingxiao> what's the community's opinion on pipes vs conduit these days/
20:03:23 <glguy> teach the controversy
20:04:26 <lingxiao> huh?
20:04:35 <lingxiao> sorry glguy were you talking to me?
20:07:53 <monochrom> it was a joke
20:09:27 <lingxiao> oh does anyone have experience using conduit and would like to answer a basic qustion?
20:10:55 <peteretep> Here's a weird question. I am using Haskell as a modelling language in some piece of work I'm writing because I are too dumb to do it in Z Notation. I am trying to model a testing assertion
20:10:58 <peteretep> I have: type TestPredicate f = f -> TestResult
20:11:24 <peteretep> What I'd really like is to replace f with something that will nicely stand in for anything
20:11:33 <peteretep> Any recommendations?
20:11:41 <lingxiao> this is the question: http://stackoverflow.com/questions/38863636/how-do-you-make-the-output-of-a-readfile-function-into-source-for-conduit
20:11:45 <sumtypeoranother> At work I write a lot of analytics type code. I have a table like "User = User { name, age, netWorth, tempx, tempy }". Does something like vinyl let me define "UserSubset = User (keepOnly name, age)"? Does this make sense? I need to be able to define a huge ADT with all possible values, then easily define smaller types that are subsets of the huge ADT. Can Haskell do this? Is there a formal name for what I'm describing? Is
20:14:12 <Koterpillar> sumtypeoranother: look into http://hackage.haskell.org/package/vinyl and http://hackage.haskell.org/package/record
20:14:25 <enthropy> sumtypeoranother, projection might be the name
20:15:58 <enthropy> afaik that "record" package would require you to write out the looking up what's stored in name and age, and make a new record with them
20:16:40 <Koterpillar> peteretep: what do you mean by "stand in for anything"?
20:18:08 <sumtypeoranother> Koterpillar: Thanks, I'm looking through both right now.
20:18:19 <sumtypeoranother> enthropy: Thanks, I'll google around for it
20:18:57 <enthropy> http://hackage.haskell.org/package/HList-0.4.1.0/docs/Data-HList-Record.html#g:16
20:19:43 <sumtypeoranother> I found this for those interested: https://hackage.haskell.org/package/projection
20:19:51 <peddie> sumtypeoranother: 'frames' might also be relevant: https://acowley.github.io/Frames/
20:20:25 <sumtypeoranother> peddie: Thanks. I was wondering if it might be relevant.
20:24:07 <peteretep> Koterpillar: really it's meant to be a placeholder for "any computation"
20:24:13 <sumtypeoranother> Frames looks promising for the types of analysis I'd like to do. I use cassandra a lot, and was a bit dismayed at having to define full types for every database table. At work we frequently pick and choose columns based on the task, so that would mean creating full types for every table as well as a fair amount of variations thereof.
20:25:05 <peddie> sumtypeoranother: doesn't frames let you auto-generate a bunch of type definitions from your dataset with template haskell?
20:26:03 <sumtypeoranother> peddie: Yes, I'm going through the tutorial now and it seems promising for my use case if I could create a connector to cassandra based on it.
20:26:34 <peddie> oh, I see; I misunderstood your message, sorry -- good luck!
20:27:10 <Koterpillar> peteretep: what's a computation?
20:29:11 <nitrix> Koterpillar: It's just a lingo, usually used in a situation where a computation is expected to produce a result in a given context. `m a` can be see as the value `a` of in a context `m` of the computation of type `m a`.
20:30:42 <Koterpillar> nitrix: that's what I was trying to get out of peteretep... particularly, is m limited to something?
20:31:49 <nitrix> e.g. modify (+1) >>= return (1 > 0) :: State Int Bool, that can be understood as a computation with a result of type `Bool` in a context where you're able to manipulate a state of type `Int`.
20:32:53 <nitrix> I meant >>, not >>=, sorry.
20:35:39 <nitrix> Koterpillar: I see. I'm unaware of the whole discussion, just trying to clarify on the `computation/context` lingo. I'm one of those that use them too, as opposed to, burritos or boxes analogies, when you don't want to be too pedant or overwhelming with type variables.
20:35:49 <peteretep> I think I will simply define a Computation type outside of scope for use in the paper
20:35:57 <peteretep> And let the reader use their imagination
20:39:19 <lingxiao> hey if someone can take a  look here I'd really appreciate it!! 
20:39:20 <lingxiao> http://stackoverflow.com/questions/38863820/how-do-you-save-a-file-using-conduit
20:40:03 <joe9> can anyone please help me with how to fill this hole? http://bpaste.net/show/5f4c34defa66
20:40:33 <joe9> this is what I need to do : Text -> Lucid.Base.HtmlT Data.Functor.Identity.Identity ()
20:40:45 <joe9> lift is not helpful.
20:45:12 <joe9> http://bpaste.net/show/e73a068d44d5 is my problem.
20:45:48 <joe9> "test" :: Svg () ===> it :: Svg ()
20:46:50 <glguy> joe9: Try: toHtml
20:46:52 <joe9> ("test" :: Text) :: Svg () ===>     Couldn't match type Text\n with Lucid.Base.HtmlT Data.Functor.Identity.Identity ()\n Expected type: Svg ()\n Actual type: Text
20:46:52 <joe9>     In the expression: ("test" :: Text) :: Svg ()
20:46:52 <joe9> (
20:47:14 <joe9> glguy: Thanks, That worked.
20:47:36 <glguy> You're using overloaded string literals, so   "test" :: Svg () is actually
20:47:43 <glguy> fromString "test" :: Svg ()
20:47:55 <joe9> oh, ok. Got it. Thanks.
20:47:59 <glguy> It's not automatically coercing a Text to an Svg for you
20:48:13 <glguy> which is why you can't do:   ("" :: Text) :: Svg ()
20:48:43 <glguy> "" :: Text is itself,    fromString ("" :: String) :: Text
20:48:49 <glguy> because of that extension
20:49:14 <glguy> It has to do with the string literal syntax, and not being an arbitrary String or Text value
20:49:25 <joe9> oh, ok. makes sense. Thanks.
21:00:51 <joe9> glguy: as an fyi, ExceptT worked out very well. It made the whole task so much simpler. Thanks for that idea.
21:04:05 <pavonia> Not strctly a Haskell question, but I'm trying to understand how the #alignment function works in this hsc2hs code: http://lpaste.net/175458  As I'm trying to write Storable instances for other structs, is this a pattern I can use for arbitrary structs?
21:05:08 <geekosaur> yes, usually
21:05:12 <glguy> pavonia: It asks the C compiler what offset it would put your type at if your type was the second field in a struct
21:05:21 <glguy> where the first field was 1 byte wide
21:05:55 <pavonia> Why exactly 1 byte for the first field?
21:07:04 <geekosaur> structs start out aligned for any type. a 1-byte initial field forces non-alignment on the second field, which the compiler then corrects by inserting bytes. offsetof is then used to find out where the second field got aligned
21:08:32 <geekosaur> this will work on most modern platforms. there are some older platforms where you need to be careful, but I don't think anyone's going to be using this to align kernel structs on ancient SCO Unix :p
21:10:36 <pavonia> I'm not even sure why you would need that alignment class function from Haskell, but I guess I understand that macro now. Thanks!
21:11:03 <glguy> You can allocate memory in Haskell to be used when marshaling a storable value
21:11:28 <geekosaur> that is hsc2hs which is used to let haskell ffi code access C structures. you need to make sure that haskell is looking in the correct places in the struct while marshaling/demarshaling
21:12:18 <geekosaur> the alignment of struct members must match what the C compiler uses; that macro lets hsc2hs ask the C compiler itself what alignment to use
21:12:29 <pavonia> So do I need call that alignment function in my code myself or is it all done automatically?
21:12:51 <geekosaur> the #let is used later as #alignment
21:13:07 <glguy> pavonia: It's used automatically in functions like "alloca"
21:13:08 <pavonia> Yeah, I mean the class function with the same name
21:13:09 <geekosaur> it's only needed when telling hsc2hs how to access fields in the struct; the code is otherwise autogenerated
21:13:32 <pavonia> glguy: Okay, that's good :p
21:14:10 <glguy> The alignment class method is specifically for allocating new memory to poke into
21:15:37 <begriffs> I pinged #haskell-stack with this but it's pretty slow there tonight. Anybody know why when I run `stack test` on the cassava package that it doesn't run any tests? I see the binary for the test suite inside .stack-work and running it directly is fine...
21:15:50 <ClaudiusMaximus> is there any harm in the alignment class method being set to a value different from that returned by hsc2hs #alignment macro?  I have some code that defines  alignment _ = alignment nullPtr  but I could change it to use #alignment if it'd be better
21:16:35 <geekosaur> there can be, on some platforms
21:16:52 <glguy> It can either trap the instruction or be slower
21:17:22 <ClaudiusMaximus> ok, i'll switch over to use #alignment
21:18:17 <glguy> I think on i686 the maximum alignment is 4, which is the pointer alignment, so you're fine there
21:18:50 <glguy> Unless you're doing something with vectorized operations, but I remember less about that
21:19:27 <glguy> and I seem to remember maximum of x86_64 was 16
21:20:41 * geekosaur has used systems where struct elements were aligned 4 unless they were (double) (which were aligned 8). whether anything still does that, he doesn't know
21:29:34 <joe9> quick question, when using a TChan (Control.Concurrent.STM.TChan), Can the type be a custom datatype? Then, we do not have to worry about "read" a string and  converting it to the custom datatype
21:29:44 <palat> :t sum 
21:29:47 <lambdabot> (Num a, Foldable t) => t a -> a
21:41:54 <eshahnazi>    /join #haskell
21:43:11 * hackagebot hgmp 0.1.0.1 - Haskell interface to GMP  https://hackage.haskell.org/package/hgmp-0.1.0.1 (ClaudeHeilandAllen)
21:43:46 <eshahnazi> hi
21:49:57 <glguy> hi
21:50:24 * Clint nods.
22:04:53 <AbelianGrape> Charming. Looks like compiling with -prof somehow manages to break LibUSB
22:23:09 <ski> joe9 : `Foo' in `TChan Foo' can be a custom datatype, yes
22:29:07 <gestone> hi all, so i'm trying to figure out how i would write this lambda in do notation
22:29:16 <gestone> i'm trying to understand the ReaderT monad transformer
22:29:28 <gestone> and i'm doing an exerices from haskell book
22:29:41 <gestone> anyways, here's the code
22:29:42 <gestone> rPrintAndInc = ReaderT (\a -> putStrLn ("Hi: " ++ show a) >> return (a + 1))
22:30:13 <gestone> how would i write this in do notation without a specific reference to the binding a?
22:33:57 <ClaudiusMaximus> :t do { a <- ask ; lift (putStrLn ("Hi: " ++ show a)) ; return (a + 1) }
22:33:58 <lambdabot> (Num b, Show b, MonadReader b (t IO), MonadTrans t) => t IO b
22:35:44 <gestone> ahh
22:36:11 <routerz> if you were asked what equipment/licenses you wanted for your first day as a network sec engineer, what would you go for?
22:36:43 <cocreature> routerz: please limit your questions in this channel to those related to the haskell programming language
22:42:09 <gestone> so i looked at the hackage documentation for ask
22:43:04 <gestone> and i still don't quite understand the use for it. is it just when we need to ask for the argument for a given ReaderT
22:43:07 <gestone> ?
22:43:19 <undreren> Hi
22:43:38 <liste> gestone: yes, it's for retrieving the ReaderT `environment'
22:43:44 <liste> hi undreren 
22:43:50 <liste> (or Reader)
22:44:42 <liste> > runReader (do {x <- ask; y <- ask; return x + y}) 5
22:44:44 <lambdabot>      Occurs check: cannot construct the infinite type:
22:44:44 <lambdabot>        a ~ ReaderT a Identity a
22:44:44 <lambdabot>      arising from a functional dependency between:
22:45:17 <gestone> oh why doesn't that work?
22:46:08 <ClaudiusMaximus> return x + y = (return x) + y, typo i guess
22:46:09 <cocreature> > runReader (do {x <- ask; y <- ask; return (x + y)}) 5
22:46:11 <lambdabot>  10
22:46:21 <undreren> >  runReader 5 $ do {x <- ask; y <- ask; return x + y}
22:46:23 <lambdabot>      Occurs check: cannot construct the infinite type: b0 ~ m0 b0
22:46:23 <lambdabot>      arising from a functional dependency between constraints:
22:46:23 <lambdabot>        ‘MonadReader (m0 b0) m0’
22:46:41 <cocreature> undreren: nope tha arguments are the other way around
22:46:50 <cocreature> which annoys me each time I use runReader
22:46:53 <cocreature> or runState
22:46:57 <undreren> me too
22:47:09 <undreren> I just tried it, because I can never remember the order
22:47:25 <undreren> >  flip runReader 5 $ do {x <- ask; y <- ask; return $ x + y}
22:47:28 <lambdabot>  10
22:47:30 <cocreature> it’s easy, it’s just always the wrong way around
22:47:43 <undreren> flippedy-flip all the way through my monad stack...
22:47:51 <undreren> cocreature: lol
22:49:02 <gestone> i see and if i want to execute an IO action inside of that do block, i have to use the "lift" function so i can embed the IO action inside the monad transformer instance of ReaderT right?
22:49:04 <ski> > (execWriter . (`runReaderT` [5])) (ask >>= tell)
22:49:06 <lambdabot>  [5]
22:49:07 <ski> > ((`runReader` [5]) . execWriterT) (ask >>= tell)
22:49:09 <lambdabot>  [5]
22:49:47 <cocreature> gestone: typically you use liftIO instead of lift because it has the advantage of being able to lift through multiple levels of transformers
22:49:47 <ski> gestone : or `liftIO'
22:49:55 <cocreature> whereas lift only lifts one level
22:50:32 <gestone> oh i see, since monad transformers can be nested inside of each other
22:50:38 <cocreature> exactly
22:51:45 <gestone> so where would there be a case where i would use just "lift"? i can't think off of the top of my head when i would want to be using other monads in this do block
22:52:08 <cocreature> geal: for things that are not IO and you can’t thereby use liftIO on
22:52:11 <cocreature> eh *gestone
22:52:38 <wetweewee> Hey, guys. At times when programming, after running into compiler error after compiler error, I get enraged and feel like going World War Hulk on my computer. Is this a normal feeling among programmers, or are we supposed to stay cool, calm and collected, in spite of all the errors we run into? Do I just need psycho therapy or something? Thanks, guys.
22:52:46 <ski> you can often use `lift' when writing instances for `MonadState',`MonadReader',...
22:53:19 <gestone> ah okay
22:53:28 <gestone> i'm assuming liftIO is implemented with lift
22:53:35 <ski> yes, that too
22:53:39 <undreren> This compiles: flip runReaderT "Hello World!" $ do; str <- ask; liftIO $ putStrLn str;
22:53:50 <undreren> main = flip runReaderT "Hello World!" $ do; str <- ask; liftIO $ putStrLn str;
22:54:04 <ski> looks ok
22:54:45 <kadoban> wetweewee: You get used to it with experience. Only advice I can think of would be ... do smaller pieces before you try compiling.
22:54:48 <liste> wetweewee: how long have you been feeling like that?
22:54:58 <undreren> wetweewee: Welcome to my life :D
22:55:13 <ski>   main = (`runReaderT` "Hello World !") (liftIO . putStrLn =<< ask)  -- a variant
22:55:39 <liste> wetweewee: you'll get used to that, probably (:
22:56:06 <wetweewee> liste: For a while. When I run into too many errors, I contemplate curbstomping my computer into the dirt
22:57:09 <gestone> so for the usage of the lift function, besides using it to implement other instances of monad transformers, what other use does it serve?
22:57:14 <gestone> i've been playing around with this
22:57:14 <glguy> compiler errors are great, they tell you what still needs to be fixed
22:57:18 <gestone> reader' = do {a <- ask; lift (Just 5); return (a + 1)}
22:57:34 <gestone> obviously, lift (Just 5) won't do anything
22:57:50 <gestone> but could there be useful monads besides IO for which that would... actually do something?
22:58:13 * hackagebot large-hashable 0.1.0.1 - Efficiently hash (large) Haskell values  https://hackage.haskell.org/package/large-hashable-0.1.0.1 (StefanWehr)
22:58:13 <gestone> (sorry for so many questions, this chapter on monad transformers has really got me confused)
22:58:58 <gestone> glguy: those compiler errors can be really dense sometimes though x_x
23:02:12 <dysfun> if you think monad transformers is confusing, don't try Freer :)
23:04:14 <gestone> dysfun: i just looked it up
23:04:28 <gestone> *sigh* this language just makes me feel dumb
23:05:12 <dysfun> gestone: well i'm not quite sure what your question is
23:05:39 <gestone> i was just curious if there were usages outside of implementing instances of monad transformers for lift
23:06:26 <gestone> since for IO using liftIO is better
23:07:02 <dysfun> lift works across many transformers
23:08:37 <dysfun> if i for example implement a StateT wrapping a ReaderT, then i can use lift to take a computation that works on the readerT and make it work on my StateT ReaderT stack
23:09:27 <gestone> ahh got it
23:09:41 <gestone> right since monad transformers can be nested...
23:10:00 <dysfun> right. a monad has no 'hole' for a nested monad, whereas a transformer does
23:11:04 <gestone> got it
23:11:14 <dysfun> so you stack the set of side effects you want as transformers
23:11:21 <dysfun> ordering does matter, btw
23:14:56 <gestone> the ordering of how you stack the transformers?
23:15:00 <chrisbarrett> hey peeps, I'm trying to accumulate errors in an applicative context. I'm playing with the validation package, but I can't figure out how to use the class it comes with in a constraint that works with the classes in 'transformers'. In particular, Validate takes (* -> * -> *), whereas the classes in transformers take (* -> *) How would you approach this problem in general? 
23:15:19 <chrisbarrett> validation is here: https://hackage.haskell.org/package/validation-0.5.3/docs/Data-Validation.html
23:15:27 <dysfun> gestone: yes. for example if you have an ExceptT wrapping a WriterT, you'll lose the Writer contents when you throw an exception
23:15:44 <gestone> ahh
23:17:52 <dysfun> the Free monad came about as a way of cutting some of the tedium out of combining quite a few effects
23:18:07 <dysfun> and then extensible-effects and freer
23:19:07 <gestone> i'm presuming it was created since combining effects with a stack of monad transformers became... hard to maintain and reason about?
23:20:58 <slack1256> not really, it mainly started as a way to delimit really messy datatype as IO. which is used as a sinbin for many stuff
23:21:11 <slack1256> IOSpec/operational where on this track
23:21:21 <slack1256> the technique is just really general
23:22:31 <slack1256> monads transformers get hard because self inflicted pain. You should lift your functions at call site (so their real type reflects the semantics). For example using Control.Monad.Trans.Reader.reader
23:23:35 <slack1256> and use the runState/runMaybe/runCont ""retractor"" liberaly to delimit effects to zones, and try to really just have IO as the single layer
23:24:14 <ski> @type reader
23:24:15 <lambdabot> MonadReader r m => (r -> a) -> m a
23:24:16 <ski> @type (<$> ask)
23:24:17 <lambdabot> MonadReader a f => (a -> b) -> f b
23:24:51 <slack1256> if you don't gain anything with a function `plusOne :: ReaderT Int (MaybeT IO) Int`; plusOne = ask >>= return . succ
23:25:06 <slack1256> just neither with the mtl version
23:25:17 <slack1256> just lift at call site and delimit your contexts
23:25:32 <ski> @pl plusOne = ask >>= return . succ
23:25:33 <lambdabot> plusOne = succ `fmap` ask
23:25:49 <slack1256> well not lift, reader, state, hoist etc
23:27:02 <dysfun> hrm, infix fmap reads pretty well
23:27:17 * ski thinks so as well
23:27:29 <slack1256> (as an anecdote my first serious program made all it operations on the supremum of all monads on the code, ie the stack of all of them. It was a semantic mess)
23:28:24 <dysfun> yeah, this is one thing i like about freer - it makes it very easy to use the minimum of effects for your code
23:30:34 <dysfun> once you've understood some of the evil type operators/datakinds stuff it gets up to
23:30:35 <ski> are you suggesting preferring `(MonadReader Int m,MonadIO m) => m Int' (or something like that, perhaps adding `MonadError () m' to the constraints) to `ReaderT Int (MaybeT IO) Int' ?
23:31:02 <slack1256> no
23:31:34 <troydm> Cale: hey, so I'm still fighting with that problem which is how a 200mb dataset in MongoDB becomes 1gb when loaded into Haskell memory
23:31:36 * dysfun avoids MonadError where possible
23:32:05 <slack1256> I am sugesting using runStateT/runContT/runReaderT inside monad operator locally, to define contexts
23:32:11 <troydm> Cale: I've optimized everything and it still says that ARR_WORDS are about 800mb of entire memory usage
23:32:17 <slack1256> so the peeling of the monad stack is very explicit
23:33:06 <ski> dysfun : this being the one in <https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Except.html#t:MonadError>, with no spurious constraint on `e' in `MonadError e m'
23:33:34 <dysfun> ah
23:33:46 <ski> slack1256 : and "monad operator" here means ?
23:34:01 <ski> slack1256 : a custom `runX' operation ?
23:34:36 <slack1256> it can be, but normally it means runState
23:34:40 <slack1256> runStateT
23:35:26 <slack1256> flip runStateT 0 $ do (..code that use the state, the enclosing code doesn't has to reflect this on its signature)
23:35:39 <ski> "using runStateT/... inside [runStateT] locally", sounds strange to me
23:36:10 <slack1256> probably
23:36:29 <slack1256> this is probably one of those "show, don't tell" things
23:36:50 <ski> slack1256 : yes, but sometimes you have to do more involved code inside that `runStateT', breaking out parts into separate definitions for clarity, or even spanning module boundaries
23:37:11 <ski> (though perhaps what you're saying is "try not to do that" ?)
23:38:26 <slack1256> I try to think on the monads as the context for certain operations. When I approach some problem I think were in this path of operations I need certain contexts and where I can do without them
23:39:31 <slack1256> thus the runReaderT/runStateT/runContT fall naturally in this scheme. The modules boundaries haven't been a problem because I try to stick to the datatype/operation-on-it per module schema
23:39:53 <slack1256> you're probably right in that I may haven't hit a big case where this is unavoidable
23:40:45 <ski> often, i've wanted to be able to label the monad transformers that are combined, and refer to then by name, rather than by position
23:41:48 <dysfun> ah that's where freer comes in
23:42:13 <ski> @hackage mmorph
23:42:14 <lambdabot> http://hackage.haskell.org/package/mmorph
23:42:17 <ski> can help a bit
23:42:33 <slack1256> there are mtl-like library with "tagged" monads IIRC. maybe not well maintained
23:42:38 * dysfun is writing an interpreter, gave up on the monad stack a couple of days ago, rewriting in freer
23:43:31 <ski> dysfun : hm, no `Cont' :(
23:43:51 <dysfun> Exc can do continuations
23:44:53 <ski> doesn't look like it
23:45:15 <ski> "Exceptions of the type e; no resumption"
23:45:47 <dysfun> how about Coroutine?
23:46:21 <ski> nah
23:47:01 <dysfun> oh well. haven't found a need for it yet
23:51:32 <slack1256> @info Cont
23:51:32 <lambdabot> Cont
23:51:41 <slack1256> @info ContT
23:51:41 <lambdabot> ContT
23:52:34 <slack1256> ContT r m a = ContT { runCont :: a -> m r } is just the second argument of >>=
23:55:05 <quchen> ?unmtl ContT r m a
23:55:05 <lambdabot> (a -> m r) -> m r
23:55:17 <slack1256> ;_;
23:55:47 <quchen> ?src ContT
23:55:47 <lambdabot> newtype ContT r m a = ContT { runContT :: (a -> m r) -> m r }
23:56:10 <slack1256> yay
23:58:02 <ski> slack1256 : there is no `info' command in lambdabot
23:59:28 <ski> @info reader' a = do {a <- ask; lift (Just 5); return (a + 1)}  -- gestone
23:59:28 <lambdabot> reader' a = ask >>= \ a -> lift (Just 5) >> return (a + 1);
23:59:42 <ackpacket> Free book/tutorial nominations?
23:59:59 <ackpacket> Reading learn you a haskell currently.
