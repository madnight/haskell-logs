01:06:46 <kqr> does anyone have experience with using persistent + sqlite? the tutorials I see online mention some sort of "runSqlite :: String -> SqliteReader m a -> m a" function which I can't find in the recent version of the libraries
01:07:21 <kqr> actually sorry
01:07:24 <kqr> I'm dumb
01:07:32 <kqr> I was looking at the old versions – it's there in the more recent versions...
01:32:41 <jle`> happens to the best ofus
03:20:29 --- topic: 'https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | Hackage status? https://status.haskell.org | https://downloads.haskell.org'
03:20:29 --- topic: set by glguy on [Fri Aug 05 17:41:47 2016]
03:20:29 --- names: list (clog psychicist__ laxdog groscoe spoonm sanitypa1 xcmw rashmirathi hamishmack Iskarlar caumeslasal sanitypassing JuanMiguel path[l] zebr osa1_ younder mdarse oish_ skapazzo sgflt ilyanok Itkovian_ ^bschafer1 aloiscochard moop robertk zero_byte bjz ptek fcpga_te ub mda1 phnx[m] Wuzzy Yuras shafox mrkgnao mmn80 eklavya detrumi unK_ newsham_ sphinxo _noblegas slomo fizruk pavonia preavy cheater Shoue JoshS xall moongazer Moto-chan ebzzry jgertm_ killer[m])
03:20:29 --- names: list (tomphp marr mattyw malthe thc202 cfricke vlatkoB quchen kqr kini codesoup polux danza kritzcreek fbergmann raichoo albertid CurryWurst_ mbuf m1dnight_ circ-user-bxPJZ oisdk_ mirpa Beetny simukis sleblanc ventonegro Jayflux zipper Forlorn mszczygiel insitu dsub tsahyt takuan guiben tromp_ acro jchia1 alfredo SoupEvil benl23 ThomasLocke Profpatsch seishun ali_bush vqrs RaceCondition iliastsi amx bl1nd-tmux Fairy s4kashya3 s4kashya2 dud Cxom_ nshepperd falafel)
03:20:29 --- names: list (Mortomes|Work martyix jhrcek lonokhov xberg razi1 danvet mzf smwangi MarcelineVQ sz0 cpup tjayanth anry pfoetchen jibi mettekou edsko vili juri_ jmcintosh drbean howdoi hexagoxel PragCyph1 exferenceBot lspitzner justanotheruser Vyn nullx002 fiddlerwoaroof watabou sellout- acertain emmanuel_erc sebastian-w alx741 pikajude Zekka dario` whaletechno taktoa jmg8766 kolmodin pyon __main__ jtm[m] Snircle darkpsi herzmeister Gabemo ijp dsantiago drdo kier Rotaerk)
03:20:29 --- names: list (angerman nakal_ vektorweg1 markus1189 PatrickRobotham theDon dfeuer jedws jmorris gawen augur isenmann yulax rossberg jaziz dan_f rzwz hiratara ricardo82 M67087[m] ptek[m] M41px[m] eoin[m] leadingthenet[m] antoine[m] randomhuman[m] Tyrionite[m] comexk[m] heyalex[m] douglas-lee[m] Guest91110[m] Narfinger[m] korayal[m] raheesh[m] Faleidel[m] xxblx[m] shenal[m] bennofs roadrunner168[m] chaosdaten[m] Mol[m] nate[m] M-krsiehl moose[m] mith[m] aspiwack[m])
03:20:29 --- names: list (cbHXBY1D[m] M-BostonEnginer4 samsam999[m] rewzn[m] Spolyk[m] michael[m] zaynetro[m] elebertus[m] todd_killings[m] qkthr[m] M60452[m] tagada[m] M78432[m] wazaaaa1[m] ntrn[m] chedi[m] ShibaInu[m] Idiothead[m] sajith[m] sudoreboot[m] dpluy[m] xss[m] ctp[m] tiltec[m] TylerCecil[m] M92351[m] sydgtfyds[m] Ugzuzg[m] rdesfo[m] knightking[m] quuxman[m] Are[m] Yves[m] ErichGubler[m] chujji[m] wobble[m]1 nbardiuk[m] goodboy[m] thbell[m] monomon[m] jacobm[m])
03:20:29 --- names: list (bensmith[m] zperrault[m] JoxxSoxx[m] teh[m] davidar pkmx[m] wobble[m] noam[m] digitalis_[m] ProofTechnique[m corintho[m] jacs[m] jyp[m] M92854[m] nayomaileme[m] kputnam[m] codo[m] lambdaislove[m] stalek[m] M-Illandan kungfumonkay[m] zizai[m] Alejandro[m] superjens[m] fxrs[m] MartialJob[m] easterbunny[m] hashb[m] M-mistake vise890[m] Nuva[m] nikolap[m] M65028[m] Hepburn[m] jerin[m] qwertyuiop[m] undu[m] guanjian[m] SeriousBug[m] billy086[m] M-schmittlauch)
03:20:29 --- names: list (tty[m] kineticrootkit[m aminb M80375[m] orion[m] erdemkulunk[m] edmundtse[m] M92608[m] bernas[m] M-Magnap tungdx[m] anvar-zg[m] rale[m]1 prose[m] M-Quora SteinsGate[m] i675591[m] fldx[m] M-wamaral scapbi[m] M41971[m] M-david vuamitom[m] Profpatsch[m] adaszko[m] mibrahim[m] unknownln toogood2bgood Soif[m] twt[m] helloworld1[m] anononon[m] jovial[m] M93937[m] jamescdericco[m] radix M66964[m] SShrike ka_lou[m] Oat[m] csoriano[m] beeeee[m] renopuphac[m])
03:20:29 --- names: list (M0xd34df00d[m] bobjason[m] M-sj4nes jonjitsu[m] diamaths[m] gutigen[m] unclechu schum[m] kanrab[m] crave[m] brian[m] teneighty[m] M-berdario drifter[m] jhartley[m] rale[m] saq3jh3j[m] fazil[m] M62844[m] blog[m] M-Shrike bb010g[m] eniac[m] srenatus[m] teufel7[m] neatloop[m] drasich[m] bob98[m] cgfloare[m] oz[m] ostuda_lidstva[m tristero sssilver[m] nont_ watersoul Alban koenvg thallada norotartagen oberstein NeverDie ezyang revprez Ferdirand Monoide)
03:20:29 --- names: list (hackrilege Tourist Madars latro`a cjwelborn prkc tombert cantstanya LordDeath _flow__ quaestor wamaral _ashbreeze_ asm89 mikeplus32 nille lynn tabaqui1 NickHu dcoutts_ APic geekosaur lucz XMunkki Slick kantokomi HalfEatenPie_ chin-tastic urdh K0HAX solaraquarion SegFaultAX Chobbes wolfcore nek0- [swift] fall__ besenwesen_ Shoggoth- max-m phileas henrytill_ carter-znc dpn` ongy _srk lispy_ pent_ abbe_ koz_ oish hegge_ phadej_ oelewapp1rke brichot_ Levex)
03:20:29 --- names: list (tmciver Ke aweinstock klugez_ luite_ Moyst jstolare1 andreypopp hyPiRion_ monad_cat grol_ bitonic zph S11001001 miklcct_ amatecha sdemos sa1 jcp___ marens dmj` enolan chbatey TabAtkins dustinm| niteria_ meiji11` noam_ SumoSudo todaystomorrow jophish Rurik_ Tharbakim Vorpal kadoban Netwolf giraffe grantwu byorgey deank govg valdyn xinming magthe cchalmers Voldenet gienah leat2 JuanDaugherty carlomagno1 Guest99712 treehaqr shutdown_-h_now Natch ixian MoALTz)
03:20:29 --- names: list (Zialus juhp noddy nurupo Brando753-o_O_o mou Sigyn qryantm citaret mitchty monty tumdedum WarzoneCommand folsen [exa] amiri ljhms cgfbee Kneiva Taylor orion free_beard lokydor obiwahn buoto MonadHendrix Ninja3047 icedev sdrodge sjl_ adnelson Philonous herzen bydo_ wedens1 Clint monochrom Soft hvr zerokarm1left nshepperd__ Morgawr cjh`_ sword_smith_ Tspoon_ pieter___ kyren_ fabiopbx_ implementation_ horatioh1 diskie_ Aditu_V padre_angolano a3Dman lukke100)
03:20:29 --- names: list (alang Belgarion0 michalrus Ranhir lukky513 krazedkat lyxia d3lxa amuck dibblego Kuros` Klumben Bigcheese earthy pyrtsa jle` kerrick MrWoohoo ircloggerbot ym lucky fengshaun j416 atk grumble bno1 pranz1 OnkelTem LuckyRawApe jackhill Cathy djapo Tene JDevlieghere ph88_ higgs chrissl m0rphism ByronJohnson solrize SCHAAP137 orbital Qommand0r lattenwald araujo ps-auxw Adluc ggVGc dqubed Igloo Sorella cyphase catsup codebam Khisanth agrif Willis tinkyholloway)
03:20:29 --- names: list (valkyr2e chameco ctag Frankablu Ralith_ qguv reverse_light adarqui atomi flippant Solarion toure xo_odin cmn theorb lordcirth sujeet mach pacak nathanic acfoltzer stoopkid AntiSpamMeta cdidd k4rtik BMeph69 Maxdamantus fragMental infinity0 ogkloo Deadhand Sgeo__ verement StoneToad jchia_ bkonkle shookees daishan customminer laudiacay slackircbot linduxed riaqn ericsagn1 GLaDER dmwit gareth__ marmalodak esph dsm tv dolio dustinm Uakh_ oaao iomonad-srv)
03:20:29 --- names: list (plugitin mvdw jml jmct hansihe kyagrd milessabin georgew billstclair mbrock kipd ericbmerritt_ jfokkan__ {AS} Orion3k tarcwynne_ wyvern cstrahan ocharles_ metalrain CARAM__ adelbertc AlainODea avdi joedevivo jedai jzy123 RayNbow` ego magicman guampa orzo_ nwf posco_______ Axman6 jhhuh jtcs happy0 hungryhugo a3gis dcoutts bluepixel chris2 foobars Yuffster TheAuGingembre Ring0` MindlessDrone KaneTW LeaChim oleks myfreeweb scared boriskr0 jgertm exio4 shirt)
03:20:29 --- names: list (jbalint texasmynsted Forty-Bot Atrumx joehillen erg Ewout runawayfive Enigmagic erikd Lord_of_Life meta-coder zymurgy ClaudiusMaximus Lokathor ccomb zoran119 niallj lyddonb WizJin keemyb Qfwfq martingale MarLinn shyn omilu numberten pdxleif isomorphismes hpc absence stasku_ Flaeme peteretep beckyconning__ Adios Ankhers niko throughnothing thorkilnaur_ johnv_ adamCS wilornel__ tippenein capisce amused fractalcat nathyong_ ryan_vw zenzike xxpor_)
03:20:29 --- names: list (unbalancedparen YP-Cloud_____ ebird Dunearhp_ glguy c-rog bsmt atondwal dtulig Yaiyan o`connor_ cjay Sose jgornick Vtec234 bbee karls Majiir pikhq zyla benjamin1rom comboy Fylwind Hijiri brezel nmattia barrucadu cocreature Xe dqd RazorX nahra schultz haasn fkurkowski tero- blue_feint solatis mceier eyck Didac electrostat heurist Factionwars johnw stefan-__ snoogie mutantmell Sonderblade bshelden insert_name_here ThreeOfEight tkdlc Blkt wahrsagevogel foobar_)
03:20:29 --- names: list (Robin_Jadoul Ulrar bd_ nerdystreetrat geal ShoaibJahejo minsky flxw ghorn qinusty jrib1 joehh joncfoo dschoepe tg andjjj23 voidrays esmiurium jessicah Purlox tgeeky davean chirpsalot Geekingfrog chriswk bartavelle mindos_cloud____ srhb reem frankpf bus000 brixen mpickering xa0 vikraman caasih mikeizbicki simony suppi Benzi-Junior ephemeron Fuuzetsu gnusosa g2 wjm tjpeden Vbitz sim642 carc angular_mike_ ryoia louispan phz_ alibabzo frug72 bcoppens Zemyla)
03:20:29 --- names: list (bgyss liyang_ ski mrd_ zomg kaol dunj3 hive-mind hiredman Forkk pleiosaur __name__ wting zpconn__________ Rabbit_ jlewis intelux javax MitchW M2tias Drezil xnyhps Matajon Shogun staffehn_ l_zzie fxrs beaky x1n4u maerwald Guest46272 fouric tomku _cyril_ jzl jnoah krgn athaller_ ssedov cpape aspiringNoob FransWillem gbluma kwantam TheSpectre mimi_vx Nicmavr yushyin vinnie92 TimWolla richi235 coddinkn a6a3uh leothrix sam[0] klarrt ormaaj dcci_ monkeyiq ppnkk)
03:20:29 --- names: list (nemesit|znc ntpttr bdeferme anahuelamo samgd jamesbvaughan greeny Vq cow-orker jix kipras`away Tesseraction Hafydd mattp_ liff Guest35059 rotty hpd spacebug greymalkin Nik05 wizonesolutions mikedlr JackMc runeks NemesisD micmus vodkaInferno vfs zmanian ggherdov OliPicard Raptor8m3 Bane^ ReinH dju heinrich5991 Reisen emerson spaces prooftechnique benzrf rodlogic RouxTheDay Nikotiini kjanosz majoh abrar vlopez jokester surina `0660 mokus iteratee tek0 Oxyd)
03:20:29 --- names: list (codebje NibbleNinja xfix Jonno_FTW CindyLinz dxtr QtPlatypus jtobin tctara SolitaryCypher canta int-e otulp rightfold raibutera stux|RC geppettodivacin rotcpy _kit_ burp_ RGamma houli jluttine Flonk a3f _janne SLi thewormkill tessier c_wraith yarou bengt_ jw358 srcerer xplat sevas zv Sam__ zaquest eikke jokleinn DanZimm a____ptr testbot_49371 bjobjo acowley imalsogreg Dykam johl hiptobecubic wrengr_away felixsch uwap nitrix bogdanteleaga TommyC jorj Twey)
03:20:29 --- names: list (AppleJacks24 stig przembot SlashLife akermu rootmos jdt irclogger_com frontendloader defanor mkolenda mniip ziman carado sbrg cross kungp seliopou ogre_ ohsix edwtjo LnL mk-fg mgaare jud gridaphobe Squarism adimit rbocquet chelfi flux raid c0dehero Tristan-Speccy sm alex_lu pmade jameseb cschneid jlouis Laney Bengi Bez_ obadz marcelh katymoe_ tazjin rann henriquev crough shelling__ fuziontech noexcept PlasmaStar dfranke Arguggi tych0 parenthetical bind1)
03:20:29 --- names: list (rjeli Ornedan kriztw tinco irishsultan onintza Saizan Fubar^ joeyh alpounet flebron trajing JSharp suzu Raynes noplamodo squisher statusbot sag3 qz qlkzy RevJohnnyHealey tomus lachenmayer strixy ahf statusfailed aristid noctux timrs2998 abh scopedTV ChongLi cods nonzen briansteffens Meanirelli xaimus petercommand Deewiant potatoe mrowe da-x EvanR metaf5 whiteline daf opios anoe ernst Nycatelos ycheng PHO sns sqrt2 wtw tswett nvd ThusSpakeHarambe mietek)
03:20:29 --- names: list (Bashmetim parsnip nshepperd1 staticfox Tuplanolla schoppenhauer gothos Wamanuz gpampara cyberlard dilinger dedgrant avn tortal nkpart psmolen Marqin lanodan MagBo isacloud carter Akii nopf obihann tomaw wagle supki Cetusx cmdv mmaruseacph2 elgot rvolosatovs Veltas dpepsilon fryguybob huonw tjbp lambdabot pharaun Desoxy mak` KorriX alphonse23_ w4and0er96 lukexi dgpratt joco42 mkurkov paroxp bigs edwardk hughrawlinson spicydonuts vikram__________ Xandaros mt)
03:20:29 --- names: list (Eliel amiller ft hodapp _alexbiehl subleq nullfxn t0m0 kishar csm pkogan mankyKitty solidsnack dxld Paprikachu schnizzle ajp reactormonk bgamari kian baweaver mauke aaron7 raek TC` davl yorick vin-ivar Enzyme otterdam robogoat tnks luigy prefork strmpnk minad OutlawStar loopspace rom1504 takeey seanparsons thoughtpolice ab9rf xplat|work lexi-lambda rellen phuu tekacs sbauman teppic shans_ wenzowski shennyg gornikm tharper jinblack stephe Tritlo g4k jonrh)
03:20:29 --- names: list (jorendorff_ trig-ger mbrcknl dstockwell ajmccluskey sisir___ caw Liskni_si sclv iphy incomprehensibly Scorchin nbouscal banjiewen paf31 Rembane seagreen Freundlich navilan luis froztbyte Adeon vi0 ahihi dan64 esssing Rumia jroesch_ Lutin` andromed1-galaxy s4kashya fugyk akfp DrDeath jelleke SuperTux88 alanz lieven dzack1 ircbrowse Baughn zero7 jxv dgonyeo spinda pchiusano Heero poga Neo grandy johtso si14 Quintasan Jaxan mendez alem0lars xacktm bjs)
03:20:29 --- names: list (osfameron baetheus epta dogui e _6a68 nyuszika7h bananagram andreass frms asjo buckowski nonlinear brennie haldean Jello_Raptor Cale bounb madknight Speed trevorriles chrzyki fabianvf rlr kshannon Boreeas glowcoil ec\ quoboo perkda TallerGhostWalt etrepum inr PanicSkittle garphy`aw bitemyapp patsToms voter101 ollef peddie fergusnoble Diabolik logcat integral mitch_ Glitchy scinawa heyj solarus yminsky sivs idupree ryanpcmcquen Xorlev abra0 DDR cic ephess_)
03:20:29 --- names: list (kmicu lulf amontez cmr tdammers brisbin swhalen zxtx guios SaidinWoT gsingh93 armlesshobo mjo arw fingerzam orcus kriton MasseR trampi mw Cerise stevenxl etcinit gleber notdan wrmsr Paks anachrome Amadiro kloeri lassulus lancetw yaknyasn rstone PotatoGim kilimanjaro Merv s4kashya_ Guest28451 IndigoTiger ecobos dh afcondon DANtheBEASTman u-ou angseus_ joachifm ramatevish tjt Chousuke_ ngWalrus kosmikus sdx23 MorTal1ty codedmart owickstrom SiCC neonfuz)
03:20:29 --- names: list (arianvp lpsmith spion Athas indiffernet niklasb odamn oherrala CodeKiwi sleezd kennyp_ quuxman masquerade cynick Tehnix` saurik brolin_empey liste coeus japesinator sLite ReinH_ shapr eddsteel emmflo tsani yeltzooo DustyDin1o mudfog_ so niluje jrslepak Eagle_Er1in lstrano_ ploop qmm adraenwan s4msung sleepynate zhulikas edran dyreshark @ChanServ GGMethos pelegreno___ 7ITAAABAS unsymbol ynyounuo gabiruh Biohazard_ naudiz eL_Bart0 reynir ambrosia catern)
03:20:29 --- names: list (greenbagels cnr fycth_ cin killtheliterate sparr christiansen` cbaines sohum lpaste marmoute mudfog hanDerPeder mathu radek1 majjoha Xnuk m1dnight1 AustinMatherne pinkmuffinere fold4 boj aatxe Gothmog_ julmac Saimeidae nekomune thoros Guest18807 wayne sbjorn hemite platz tolt yamadapc BrianHV_ JPohlmann Reyu tokik deni Shandy siddhu iross gargawel ncl28 Ezku_ joeytwiddle mantovani betawaffle bob_twinkles hxegon jpl_ relrod nilOps n__dles eagleflo Jaak ido)
03:20:29 --- names: list (koala_man Phyx- oldsk00l dhananjay hongminhee mrlase dredozubov edejong Myrl-saki fairfieldt p_q jotrk_ nesqi)
04:13:57 <Squarism> Im curious why haskell hasnt gained more traction in the typical "enterprise world". Just feels like there could be huge improvments in productivity, quality and clarity. Typical java enterprise has so much bloat. Complicated frameworks that make it hard to reason about "what is actually happening" etc. Maybe im totally wrong and are beeing naive - but that is just my impression as a java "ee" dev since 15 years.
04:18:02 <Axman6> commercial support, good tooling, and killer apps are probably all things people look for which are kinda missing for Haskell
04:19:27 <Ferdirand> when I tell my coworkers that you don't need for-loops nor mutable variables and that you just use higher-order functions, they roll their eyes and switch subject :(
04:20:19 <ongy> Ferdirand: which language do you usually use?
04:20:33 <hpc> if i told my coworkers any of that, they would probably say "what does that have to do with python?"
04:20:52 <Axman6> "Python has lambdas so we don't need Haskell"
04:21:02 <Axman6> "FP is all about map and reduce right?"
04:21:34 <hpc> python is the only language where functions are separate but equal
04:22:07 <Axman6> not sure what you mean
04:22:41 <Ferdirand> all first-class values are equal, but some values are more equal than others
04:24:22 <grantwu> Difficulty learning the language, fear of an inability to hire devs, smaller community, performance concerns, too
04:26:14 <grantwu> https://blog.pusher.com/golangs-real-time-gc-in-theory-and-practice/ might be instructive - company rewrote their Haskell codebase in Go to get lower GC pause times
04:29:31 <grantwu> Stuff like http://lambdaconf.us/downloads/documents/lambdaconf_slfp.pdf where the first mention of "performance" is in the same category as "profunctor optics" doesn't help...
04:33:40 <Axman6> grantwu: imo, profunctor optics are essential to writing sane composable applications. they've changed how I write programs completely
04:34:31 <Axman6> we just need to give them a nice software industry appropriate name, like hyperaccessors
04:34:51 <grantwu> our of curiosity, do you know where they originated?
04:34:58 <Cale> lens.
04:34:59 <grantwu> *out
04:35:06 <Axman6> yeah pretty much lens
04:35:20 <Cale> Well, profunctors are an older idea
04:35:54 <Cale> Actually, I wonder how long the *name* "profunctor" has been around
04:35:57 <Cale> Perhaps less time
04:36:21 <Axman6> the idea of composable getters and setters is probably what prompted looking into it, but profunctor optics/van laarhoven optics imo are a fundamental idea that was recently discovered
04:36:28 <grantwu> Well... not everyone thinks they're great
04:36:49 <mpickering> the irony of all this is obviously that the profunctor representation is easier to understand and work with in my experience
04:36:57 <Cale> I don't think they're terrible, but I don't really use them all that much.
04:37:50 <Cale> We generate lenses for all our types and I use them when it's appropriate, which is still somehow surprisingly rarely.
04:38:09 <mpickering> Do you use record update syntax or record selectors Cale?
04:38:21 <Cale> yes, somewhat
04:39:15 <Axman6> I keep finding more and more uses for them. dibblego showed me how they can be used to make the expression problem less of a problem using classy prisms and defining functions in terms of (AsFoo e, MonadError e m) => m a
04:39:53 <puregreen> does `Vector` take less memory than `[]` for boxed types?
04:39:58 <Axman6> yeah I think is a really clean way to build up error hierarchies
04:40:05 <Axman6> puregreen: it should yes
04:40:24 <dibblego> pretty much everyone in BFPG does it too; it was the subject of a hack day, "what does everyone do?", turns out, the same thing for the last few years
04:40:36 <Axman6> heh
04:40:43 <mpickering> I wish prisms integrated better into pattern matching syntax
04:41:04 <grantwu> What is the BFPG?
04:41:09 <dibblego> pattern matching pattern schmatching syntax schmyntax
04:41:21 <dibblego> Brisbane Functional Programming Group, the capital city of FP
04:41:23 <Axman6> puregreen: vector has an actual array of pointers to haskell values, lists have a pointer to to the value, then a pointer to the tail, there's a lot of overhead
04:41:44 * Axman6 disputes that claim, but not very strongly
04:42:09 <mpickering> and I wish it was possible to unbake records from the compiler and disable things like record update syntax
04:45:22 <Axman6> mpickering: use view patterns
04:46:15 <Axman6> :t view _Just
04:46:17 <lambdabot> (MonadReader (Maybe b) m, Monoid b) => m b
04:46:39 <Axman6> :t view _1
04:46:40 <lambdabot> (Field1 s s b b, MonadReader s m) => m b
04:47:23 <Axman6> :t view _1 :: (a,b) -> a
04:47:25 <lambdabot> (a, b) -> a
04:47:55 <Axman6> > let fst (view _1 -> x) = x in fst ("hello",True)
04:47:58 <lambdabot>  "hello"
04:48:19 <joehh> dibblego: I assume you mean for queensland? or the capital for australia?
04:48:22 <Axman6> > let fstsnd (view (_1._2) -> x) = x in fst ((1,"hello"),True)
04:48:24 <lambdabot>  (1,"hello")
04:48:36 <Axman6> > let fstsnd (view (_1._2) -> x) = x in fstsnd ((1,"hello"),True)
04:48:38 <lambdabot>  "hello"
04:48:38 <dibblego> joehh: no, the world
04:48:42 <joehh> :)
04:50:08 <Axman6> > let fstsnd (view (_1._2._Just) -> x) = x in fstsnd ((1,Just "hello"),True)
04:50:10 <lambdabot>  "hello"
04:50:21 <Axman6> > let fstsnd (view (_1._2._Just) -> x) = x in fstsnd ((1,Nothing),True)
04:50:26 <lambdabot>  ()
04:50:40 <Axman6> oh, monoid
04:51:01 <Axman6> > let fstsnd (view (_1._2._Just) -> Just x) = x :: String in fstsnd ((1,Nothing),True)
04:51:02 <joehh> not inconsistent with my learnings from bfpg youtube videos vs others
04:51:03 <lambdabot>  "*Exception: <interactive>:3:5-55: Non-exhaustive patterns in function fstsnd
04:51:31 <dibblego> zackly
05:02:15 <joehh> Having grown up with haskell, I'm fmailiar with the benefits of
05:02:17 <joehh> the type system and its advantages over the type system of other
05:02:19 <joehh> languages (say c/c++/c#). However, I do struggle with how to
05:02:21 <joehh> communicate this.
05:02:23 <joehh> What is the best way to communicate these advantages? Whenever I
05:02:25 <joehh> talk about types and compilers, people's eyes glaze over and
05:02:27 <joehh> assume the compiler is about as smart as a c/c++/c#/java
05:02:29 <joehh> compiler. Ie not that helpful.
05:02:31 <joehh> How can I best demonstrate the difference in type
05:02:33 <joehh> system "strength"?
05:03:45 <tnks> honestly, I just tell them how many fewer defects I have from when I didn't use type checking to when I did.
05:04:06 <tnks> I just tell them very human stories, and then slowly connect them to the technical details.
05:05:03 <tnks> so I have a design question.
05:05:21 <tnks> hmm, maybe I should just make a gist.
05:07:10 <joehh> thank tnks the "storey" I have is that haskell lets me finish code
05:07:30 <joehh> when I try to do something in python et al, interupptions mean I never finish.
05:07:44 <joehh> In haskell, the compiler tells me where I am up to
05:07:52 <tnks> sure.
05:07:58 <tnks> everyone's story will be different.
05:08:09 <tnks> just intrigue them with an honest account.
05:15:47 <joehh> where we are struggling is we have a code base written in c# and
05:15:48 <joehh> js and a number (<20) of high value customers who pay enough to
05:15:50 <joehh> expect (some) customisation. However whenever we need to change
05:15:52 <joehh> something, a FULL (semi-manual) test suite needs to be run across
05:15:54 <joehh> all customers.
05:15:56 <joehh> I'm looking to introduce Haskell in between the configuration and
05:15:58 <joehh> the website(c# and js) components. Ie verify the the
05:16:00 <joehh> configuration matches a particular type and also verify (maybe
05:16:02 <joehh> via quickcheck) that the website handles the full range of
05:16:04 <joehh> configuration.
05:16:06 <joehh> My feeling is a configuration sanity checker (ie type checker)
05:16:08 <joehh> will go a long way. Is this a sensible approach? What are peoples
05:16:10 <joehh> thoughts?
05:16:47 <tnks> did you see Gabriel's latest work on dhal?
05:17:18 <tnks> sorry, dhall.
05:17:29 <joehh> yes
05:17:29 <tnks> http://www.haskellforall.com/2016/12/dhall-non-turing-complete-configuration.html
05:17:42 <tnks> joehh: is that along the lines of what you're thinking of?
05:17:56 <joehh> It looks VERY useful
05:18:02 <tnks> if so, it's pretty unprecedented in any other language ecosystem I've seen.
05:18:10 <joehh> that is the problem
05:18:35 <tnks> rather than trying get them to see the value in idle conversation -- how about prototyping something in dhall?
05:29:47 <joehh> worth a try
05:30:38 <joehh> will you be at the bfpg tech drinks next week?
05:31:22 <joehh> I'm based in melb but am likely to be in bris on either the 15/16th
05:32:06 <joehh> ideally i'll arange flights to make it
05:35:56 <roundhouse> hi, does any one know what's up with File IO on Nixos? If I read a file with any of the String or Text readFile functions, I get "hGetContents: invalid argument (invalid byte sequence)" if the file contains non ASCII characters.
05:36:30 <roundhouse> The file is saved in utf8, and echo $LANG gives me "en_US.UTF-8"
05:41:36 <lyxia> How can we hide imports from rendering in a literate haskell file. https://wiki.haskell.org/Literate_programming mentions a LaTeX specific solution, I'm wondering whether there is something similar if you're writing in markdown/rst via pandoc.
05:51:00 <Saizan> roundhouse: you could try using the operations on Handle and open and set the encoding of the Handle manually, as a workaround.
05:52:21 <roundhouse> Saizan: Thanks for the tip. I actually have a workaround by reading as ByteString and converting to Text thereafter. However, I'd like to understand why this is happening and fix the root of the evil :)
06:00:42 <gpyh> hi
06:01:35 <gpyh> I have a quick question and I was unable to find the answer by myself ; say I made a typeclass A and I already have a typeclass B, can I give an instance of B for every type that has an instance of A?
06:01:52 <gpyh> Basically, implementing a typeclass on another typeclass instead of a concrete type
06:02:22 <gpyh> I know I can do a new typeclass based on another, but here I have an existing typeclass
06:02:30 <gpyh> ty :D
06:03:05 <tdammers> yes, you can, but it doesn't do quite what you think
06:03:11 <Cale> gpyh: Are you sure that you need to?
06:03:15 <tdammers> you can write instance A a => B a where ...
06:03:45 <gpyh> Cale: Even if I don't that's something I'd be happy to lear :D
06:03:55 <lyxia> that issue is at the root of the Applicative Monad Proposal
06:03:59 <gpyh> tdammers: interesting ; what's the catch?
06:04:24 <gpyh> learn*
06:04:24 <Cale> gpyh: When instances are being selected, the type class constraints on them can't be observed
06:04:42 <Cale> Only *after* the instance resolver commits to an instance will those constraints be required to hold
06:05:08 <Cale> So, if you write instance A a => B a where ..., it looks to the thing which picks the instances the same as  instance B a where ...
06:05:13 <lyxia> roundhouse: what does hGetEncoding return on your handle
06:05:43 <Cale> This is because you can't ever know that there won't be an instance of A for some type, defined in some future module.
06:06:10 <Cale> So you can only assume that one exists when trying to pick an instance, and then complain that you can't find it later.
06:06:33 <tdammers> gpyh: colloquially, one problem is that it says "all types a are instances of B if and only if they are also instances of A", when really you want to say "if a type a is an instance of A, I want it to automatically be an instance of B, but if it's not, then I want to be able to define a different instance for it"
06:06:36 <gpyh> Cale: that was a great explanation, thanks :D
06:06:50 <tdammers> but that's not possible because of the open universe (i.e., you cannot enforce the absence of an instance)
06:07:39 <gpyh> tdammers: thanks a lot
06:09:47 <roundhouse> lyxia: Just ANSI_X3.4-1968
06:09:59 <Cale> There are extensions like UndecidableInstances and OverlappingInstances which will relax this, but usually if you're going to use those, all the instances of the type classes involved, just for the sake of sanity, should probably remain confined to the module where you're using it in. Also, you should strongly consider just writing the instances as you need them.
06:10:07 <roundhouse> lyxia: that seems to not be what I want :)
06:11:18 <Cale> gpyh: another thing you can do is use DefaultSignatures, to provide default method implementations in the definition of B which rely on A, and that'll get used when you try to define an instance of B and don't specify how the methods are implemented (if an instance of A exists)
06:11:24 <roundhouse> How does the haskell runtime decide what encoding should be used?
06:11:41 <Cale> gpyh: So you'll still have to write  instance B MyType  but you can leave it at that, if there's an instance of A.
06:13:01 <Cale> roundhouse: Your system locale... I think it looks at $LANG
06:14:27 <roundhouse> but echo $LANG geives me "en_US.UTF-8"; however Haskell wants to open in " ANSI_X3.4-1968"
06:14:45 <Tuplanolla> Check the other `LC_` variables, roundhouse.
06:16:10 <roundhouse> they seem to all be empty. That's most likely the cause
06:16:32 <Tuplanolla> This locale mess is nothing but trouble.
06:17:16 <roundhouse> So I guess I should take this question over to #nixos ^^
06:17:31 <Cale> Ah, apparently it uses localeEncoding from the iconv library to determine it
06:17:43 <Profpatsch> ANNOUNCEMENT FOR GERMANS: https://openlab-augsburg.de/2016/12/haskell-workshop-fuer-einsteiger-und-weitermacher-am-17-12/
06:18:24 <Cale> localeEncodingName = unsafePerformIO $ do
06:18:24 <Cale>    -- Use locale_charset() or nl_langinfo(CODESET) to get the encoding
06:18:24 <Cale>    -- if we have either of them.
06:18:24 <Cale>    cstr <- c_localeEncoding
06:18:24 <Cale>    peekCAString cstr -- Assume charset names are ASCII
06:18:35 <Cale> hmm
06:18:36 <Profpatsch> (Haskell Workshops in Augsburg, Bavaria, 17.12.)
06:19:03 <Cale> (apparently localeEncoding is something defined in C bits that are compiled along with base?)
06:19:33 <Cale> (c_localeEncoding :: IO CString is an FFI import of "localeEncoding")
06:19:35 <lyxia> it is http://hackage.haskell.org/package/base-4.9.0.0/src/cbits/PrelIOUtils.c
06:19:53 <Cale> yep, that'd be it
06:21:08 <roundhouse> hmm, tbh I don't even know what iconv does. This seems to be more complicated than I thought.
06:21:25 <Cale> Ah, and nl_langinfo(CODESET) apparently corresponds to $LC_CTYPE
06:22:53 <Cale> It's a library which does all kinds of conversions between different character sets
06:22:59 <Netwolf> anyone know how to stop the zillion msg from bots I seem to getting to connect to another ircd?
06:23:25 <Cale> Netwolf: Is this a question about Haskell somehow?
06:23:51 <codedmart> I am looking for a func that creates a file if it doesn't exist.
06:24:16 <Netwolf> Cale: not really, just wondering if anyone else is seeing this
06:24:36 <Cale> Netwolf: Most IRC clients have some way to ignore users, but I'm sure also that such bots will be k-lined if brought to the attention of Freenode operators.
06:24:57 <Cale> codedmart: writeFile?
06:25:19 <Tuplanolla> I'm not sure there's an atomic way to do that, codedmart.
06:25:23 <Ferdirand> Netwolf: I didn't but you're not the first to report it
06:25:39 <codedmart> Cale: if the file does it exist does anything happen?
06:25:52 <Netwolf> Ferdirand: I set my mode to +R
06:26:07 <codedmart> Don't really want to write to it. Just want to create it if it doesn't exist.
06:26:17 <Cale> codedmart: Well, writeFile would overwrite it.
06:26:52 <lyxia> touchFile
06:27:29 <codedmart> lyxia: Yeah that would be nice. I can't find that :).
06:27:48 <lyxia> there's one in unix
06:28:06 <lyxia> http://hackage.haskell.org/package/unix-2.7.2.1/docs/System-Posix-Files.html
06:28:07 <Tuplanolla> Doesn't that change the timestamps of existing files, lyxia?
06:28:24 <Cale> yes
06:30:05 <lyxia> I'm assuming it behaves just like touch
06:30:13 <lyxia> which it might not
06:30:52 <codedmart> OK I will look. Thanks guys!
07:19:03 <DexterLB> a (possibly very dumb) question about parsec: how do I match someting like "(.*)foo"?
07:20:08 <quchen> With lots of backtracking :-/
07:20:50 <quchen> fooParser = string "foo" <|> (anyChar *> fooParser)
07:20:53 <quchen> Or something like this
07:20:58 <quchen> But that will lose the .* part
07:21:11 <DexterLB> I need to get just the (.*) part out of it
07:22:46 <quchen> Not sure how manyTill works exactly
07:22:49 <pavonia> You could use a combinattion of manyTill and try
07:22:50 <quchen> Could be what you’re looking for
07:32:58 <MonadHendrix> is  (*2) identical to (2*)
07:34:29 <quchen> ..?
07:35:07 <hackrilege> What would a type level list of types look like?
07:35:29 <quchen> '[Int, Char]
07:36:05 <quchen> It’s a list of types. :-)
07:37:00 <quchen> Just like [1,2] is a list of homogeneously typed (Int) values of heterogeneous values (1 and 2), '[Int,Char] is a list of homogeneously kinded (*) values of heterogeneous values (Int and Char).
07:37:32 <quchen> :k '[Int, Char]
07:37:34 <lambdabot> [*]
07:37:44 <quchen> :k '[Applicative, Monad]
07:37:45 <lambdabot> [(* -> *) -> Constraint]
07:38:00 <hackrilege> Could I use that to make eg Free' f a = Base | Roll ((isIn f) (Free' f a))
07:38:03 <hackrilege> ?
07:39:14 <quchen> That sounds possible, yes. IsIn would be a type family "IsIn f xs a" that is Void if f isn’t in xs, and otherwise a.
07:43:11 <hackrilege> Right so as long add the kind can express both Int and Char it will be able to take other values of the same Kind, namely *
07:43:37 <hackrilege> So could I have written '[Int,Bool]
07:44:22 <quchen> Sure.
07:44:37 <quchen> :k '[Int, Bool, Char, Maybe Int, Either () Void]
07:44:39 <lambdabot> [*]
07:45:08 <hackrilege> :k '[Int]
07:45:09 <lambdabot> [*]
07:45:26 <codedmart> I am missing something about Handle and openFile. I am using logging-effect to try and use `AppendMode` to log messages. But I keep getting this error -> `openFile: resource busy (file is locked)`
07:45:27 <hackrilege> :k '[]
07:45:28 <lambdabot> [k]
07:46:42 <hackrilege> So I think the first argument is of kind * -> * so would I need something like;
07:47:01 <hackrilege> :k '[Maybe]
07:47:02 <lambdabot> [* -> *]
07:47:35 <glguy> codedmart: That means that the file was already open using a different handle
07:48:08 <codedmart> glguy: In my app? 
07:48:49 <hackrilege> quchen, I think I meant that  IsIn would be a type family "IsIn f xs a" that is Void if f isn’t in xs, and otherwise f a.
07:49:30 <codedmart> I only have one place where I call openFile.
07:49:43 <glguy> codedmart: Then that place is running more than once
07:50:03 <glguy> without closing the handle between those executions
07:50:10 <hackrilege> Is there a way to write a type level list of types without using that funny ' prefix?
07:50:16 <codedmart> Hmm...
07:50:32 <glguy> codedmart: Instead of using openFile, you can use withFile to ensure that the file is closed when you're done
07:50:48 <quchen> hackrilege: Yes, leave the ' away :-þ
07:50:54 <quchen> > :k [Int, Char]
07:50:56 <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
07:50:59 <quchen> :k [Int, Char]
07:51:00 <lambdabot> [*]
07:51:22 <quchen> If you leave the ' away and there’s an ambiguity you’ll get an error.
07:51:25 <Cale> hackrilege: The ' thing lifts data constructors to the type level. If there's no type with the same name, you can leave it out.
07:52:34 <Cale> (which is a little questionable in general, but for lists with their special syntax, it makes sense)
07:52:48 <glguy> fwiw, GHC will generate a warning if you skip the ' with -Wall
07:52:54 <glguy> -Wunticked-promoted-constructors
07:53:54 <glguy> codedmart: http://hackage.haskell.org/package/base-4.9.0.0/docs/System-IO.html#g:8
07:56:02 <shapr> mmm, IO
08:09:52 <hackrilege> http://lpaste.net/349583
08:10:03 <hackrilege> Does that look right?
08:12:26 <codedmart> glguy: Is there a Handle that doesn't care if a resource is busy? Trying to put a gist together, but even when I call hClose in my logging func I still get the errors.
08:13:59 <hackrilege> Oh I had to correct it, http://lpaste.net/349583
08:15:13 <hackrilege> If this is right, how do I extend it so that FreeN holds the type level list of types instead of just using the same f over and over?
08:15:35 <hackrilege> And is such a structure already in existence, and if so what's it called?
08:16:09 <c_wraith> hackrilege: that looks right, but that append function is almost unusable in practice.
08:16:54 <c_wraith> hackrilege: oh, FreeN doesn't look right.
08:16:56 <hackrilege> Really, I was planning on making a Monoid instance
08:17:44 <c_wraith> hackrilege: data Free f a = Pure a | Recurse (f (Free f a))
08:17:55 <hackrilege> Oh yeah it doesn't need f, that's where I was getting confused as I wanted to store the provided type somehow
08:18:34 <glguy> codedmart: no, you'll have to figure out how you're losing track of how many times the file is being opened
08:18:37 <c_wraith> hackrilege: Recurse :: f (FreeN n f a) -> FreeN (Successor N) f a
08:19:05 <c_wraith> hackrilege: then of course you need to fix the kind for FreeN
08:19:15 <glguy> codedmart: probably even better if you just open it once and use the same handle while logging
08:19:48 <codedmart> glguy: Yeah I thought I was, but misunderstanding it. Retrying. Thanks!
08:19:55 <hackrilege> What's wrong with the kind, it needs parenthesis?
08:20:04 <c_wraith> hackrilege: f has kind * -> *
08:20:39 <hackrilege> It has 5  *s does it need parenthesis?
08:21:04 <c_wraith> hackrilege: f is a single type argument with kind * -> *
08:21:35 <hackrilege> data FreeN :: *  -> (* -> *) -> * -> * where
08:21:40 <hackrilege> ?
08:21:50 <c_wraith> Why are you asking me instead of ghc? :P
08:22:02 <hackrilege> I don't have a compiler :(
08:23:00 <heebo> ok ive just discovered the probability library
08:23:08 <hackrilege> Anyway my question was about how to store various different things of kind *-> *, and then suspect such a thing has been conceived before, what's it called?
08:23:15 <heebo> how freakin cool is pribabkustuc programming
08:23:16 <c_wraith> hackrilege: yes, * -> (* -> *) -> * -> * looks right.
08:25:21 <hackrilege> * -> [* -> *] -> * -> *
08:25:26 <hackrilege> ??
08:27:56 <geekosaur> "how to store various different things of kind *-> *" --- there are no "things" (values) of that kind
08:28:27 <hackrilege> I don't understand how to add a new type as in;  Recurse :: g (FreeN n f a) -> FreeN (Successor n) (Construct g f) a
08:28:46 <geekosaur> and no, the () was not a typo, it is actually () not []
08:29:13 <hackrilege> :k [Maybe]
08:29:14 <lambdabot> error:
08:29:14 <lambdabot>     • Expecting one more argument to ‘Maybe’
08:29:14 <lambdabot>       Expected a type, but ‘Maybe’ has kind ‘* -> *’
08:29:39 <hackrilege> :k '[Maybe]
08:29:41 <lambdabot> [* -> *]
08:29:54 <geekosaur> so what do you think you are doing with that?
08:30:17 <hackrilege> The square braces are required to store a list of all the parameters I have used in FreeN
08:31:28 <codedmart> glguy: OK I moved openFile and pass the handle through to the logging function but nothing get's logged now? I suppose you would need some gists.
08:31:42 <hackrilege> Recurse (Just (Recurse Left Basecase))
08:34:41 <hackrilege> Oops, I mean;  Recurse (Just (Recurse (Left Basecase))) :: FreeN (Successor (Successor Zero)) [Maybe, Either] a
08:35:21 <hackrilege> I guess I can't just use square braces there, I should use Construct or something, I don't quite get it
08:36:00 <hackrilege> But that's basically what I'm driving at
08:36:29 <hackrilege> I just don't know how to handle the construction of the type level list of types
08:42:24 <hackrilege> Does that make sense geekoasur?
08:43:56 <geekosaur> I'm not really the person to ask if you're actually trying to use type level lists
08:44:53 <hackrilege> It's not normal?
08:45:07 <roundhouse> Hi, I was wondering is there any nice formatting library for haskell?
08:45:48 <geekosaur> hackrilege, not everyone is a master of type level programming
08:46:01 <geekosaur> in particular *I* am not. ask someone qualified.
08:46:27 <hackrilege> Hey, someone qualified, do you know?
08:47:20 <byorgey> hackrilege: I haven't been following but you might need a tick in front of the list, i.e. '[Maybe, Either]
08:48:02 <[exa]> what's the actual definition of '[...] ?
08:48:27 <Shoue> hackrilege, you want to build a type-level list? Use ': and something like a type family which allows you to construct (or deconstruct) a type-level list recursively.
08:49:59 <hackrilege> Is the object I describe referred to as something else by convention and appear in a library somewhere?
08:50:11 <[exa]> hackrilege: anyway, just out of curiosity, what are you planning to do with the typelevel list later?
08:50:49 <hackrilege> Lenses and prisms I guess
08:51:26 <[exa]> hackrilege: also, for the name you're searching for, I remember that languages like henk2000 and Sage could construct weird stuff from types, there might be some material.
08:53:14 <hackrilege> I'll try and append my paste
08:55:38 <hackrilege> It's like an arbitrary monad transformer stack? It has no name?
08:57:44 <c_wraith> hackrilege, it's more like a sequence of Composes
08:57:55 <codedmart> glguy: Can you see what I am doing wrong? This compiles fine, but nothing is logged unless I use stdout as handle. I have tried a number of different ways but either nothing gets logged or I hit that `resource busy` error.
08:57:59 <codedmart> https://gist.github.com/codedmart/08bcccf40b469a5613719807c939f088#file-notworking-hs-L42-L44
08:58:21 <hackrilege> c_wraith, can I get a link?
09:00:09 <hackrilege> I guess I'm struggling to write a synonym for ':
09:00:30 <c_wraith> hackrilege: https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Functor-Compose.html but it's not the same thing - just the single-nesting version
09:00:31 <hackrilege> I'll try searching on that term
09:02:45 <hackrilege> Oh right that, yeah kind of, like \g (FreeN n f a) -> Free (Successor n) (Compose g f) a
09:03:45 <idndifnirr> Not sure if this belongs in off topic, but what are your favourite JVM languages? I'm looking for something haskell-like, scala seems like that at first glance but also quite polluted with Java stuff, so I'm looking at clojure too... Opinions?
09:04:41 <c_wraith> hackrilege: http://lpaste.net/349590 No need to have both a type-level list of types and a type-level length.  You can use a type family to get the length from the list of types
09:05:32 <hackrilege> Oh yeah, nice
09:05:49 <c_wraith> hackrilege: note that I still claim the type is basically unusable in practice, at least in Haskell. :)
09:06:49 <hackrilege> I'm interested about why you think that...
09:06:49 <Tyrionite[m]> idndifnirr: if you want something Haskell-like, Clojure is not the right one ;) I'm keeping an eye on Frege (http://www.frege-lang.org/) and especially Eta (https://github.com/typelead/eta)
09:07:03 <c_wraith> hackrilege: you can't arbitrarily recurse.  All your nesting must be known at compile-time.
09:08:23 <c_wraith> hackrilege: the end result is that you're using really noisy syntax and advanced language features to do something that could be done without either.
09:08:32 <idndifnirr> Haven't heard of those before, checking them out!
09:09:04 <hackrilege> Ok here's an example, rather than constructing a rose tree as Free [] a, I can indicate alterative traversal ordering or subsets at each level, so making a type synonym to a version of [] with a type parameter indicating the ordering
09:09:28 <c_wraith> hackrilege: but only for fixed nesting depths that are known ahead of time.
09:10:05 <hackrilege> I can operate on the structure to descend a fixed depth and alter the type prescribing the ordering
09:10:23 <c_wraith> hackrilege: You might be able to work around it by using existentials one way or another, but then you're going even deeper into syntactic overhead.
09:10:24 <hackrilege> Without actually reordering the elements in the list
09:11:02 <c_wraith> Well, if it does what you hope, excellent.  I'm willing to have my mind changed on the usefulness of it. :)
09:12:07 <hackrilege> I guess which is the most intrusive approach depends on conditioning, this seems to follow logically from something I was doing earlier
09:18:23 <hackrilege> Intuitive*
09:24:50 <codedmart> Really missing something still. If I pass in `stdout` as the `Handle` things log fine, but if I pass in a `Handle` from `openFile` nothing is logged: https://gist.github.com/codedmart/08bcccf40b469a5613719807c939f088#file-notworking-hs-L42-L44. I tried variations of this, but if I do get things to log by calling `openFile` directly in `withLogging` I get
09:24:50 <codedmart> `resource busy` errors.
09:27:18 --- mode: ChanServ set +o monochrom
09:27:35 --- mode: monochrom set -q *!*@ti0108a400-1289.bb.online.no
09:29:21 <geekosaur> where does withFDHandler come from?
09:30:14 <codedmart> geekosaur: http://hackage.haskell.org/package/logging-effect-1.1.0/docs/Control-Monad-Log.html#v:withFDHandler
09:30:26 --- mode: monochrom set -o monochrom
09:30:54 <codedmart> I just want to use stdout in development, but append log messages to file in production.
09:31:23 <geekosaur> nrrrr, doc conflates file descriptors with Handles. if they do so in the code as well, I can well imagine trouble
09:32:36 <codedmart> Not sure I understand what you are saying? Is there something wrong with `withFDHandler`?
09:32:58 <geekosaur> oh, both default batching and default buffering. you might try disabling buffering on the Handle for starters
09:33:55 <codedmart> geekosaur: Do I need to create my own handle not using openFile to disable buffering?
09:34:37 <geekosaur> codedmart, mixing buffered and direct file descriptor I/O is a recipe for weird behavior. but if they are just saying fd when they mean Handle, it's likely not a problem; it's only if they extract the fd and then use both it and the Handle that stuff breaks
09:34:53 <geekosaur> @index hSetBuffering
09:34:53 <lambdabot> GHC.IO.Handle, System.IO
09:37:07 <geekosaur> ok, looks like you might be safe wrt FD vs. Handle. file buffering might be an issue especially if you run this and then stop it with ^C or other signal
09:37:50 <geekosaur> (you wouldn't notice that with stdout because it's line buffered; files are block buffered, whether you see data will depend on how much log output and how big the buffer is)
09:39:19 <codedmart> geekosaur: Sorry not sure what `wrt FD vs. Handle` means? So still try disabling buffer?
09:39:53 <geekosaur> yes, still try disabling buffer. and don't worry about the other one, given you've been completely confused by every mention and it looks irrelevant anyway
09:40:11 <codedmart> This is all new to me :|
09:40:19 <geekosaur> [06 17:34:14] <geekosaur> codedmart, mixing buffered and direct file descriptor I/O is a recipe for weird behavior. but if they are just saying fd when they mean Handle, it's likely not a problem; it's only if they extract the fd and then use both it and the Handle that stuff breaks
09:40:28 <codedmart> Ah ok.
09:40:34 <codedmart> I do appreciate your help!
09:41:14 <geekosaur> file descriptors are how the kernel knows a file. Handles are a buffering abstraction specific to Haskell, although other language libraries provide their own versions
09:42:15 <geekosaur> you can;t mix them across languages (e.g.  a Handle is not a C (FILE *)), and the kernel knows nothing whatsoever about any buffering in the application (here, in the Handle), so it's possible to create some really confusing situations
09:42:55 <codedmart> geekosaur: Great thanks! Disabling buffer solved the problem.
09:43:11 <codedmart> I am seeing log message now. I appreciate it.
09:54:58 <hackrilege> Where can I find documentation for ':
09:55:07 <hackrilege> ?
09:55:52 <hackrilege> It isn't recognised in hoogle (or Google)
09:56:07 <monochrom> Find and read the doc of DataKinds
10:03:01 <nshepperd1> ': is just : lifted with datakinds
10:05:43 <c_wraith> hackrilege, look up the paper "giving Haskell a promotion" by Sweirich et al 
10:08:53 <grazie> Hi All, is there a way to pass args to main func when file loaded in ghci? the file in question uses `getArgs` in `main`
10:09:18 <grazie> loading file in ghci and running `main arg1 arg2` etc doesn't work
10:13:07 <sm> :main arg1 arg2
10:13:22 <grazie> found it :set args 2 3 6 1010
10:13:41 <grazie> sm: ok, just saw that solution too, thank you
10:16:57 <geekosaur> there's also withArgs
10:35:15 <younder> Hi all
10:40:04 <haasn> What's the canonical way to get a changelog for packages? I have a program that compiles with http-conduit 2.1.x for example and fails with 2.2.x, and I need to fix it - but I have no idea what even changed in http-conduit 2.2.0 because I can't find a real changelog anywhere
10:40:15 <haasn> Surely such a popular package must have them somewhere
10:40:27 <haasn> Especially for backwards-incompatible changes like these which break existing programs
10:42:31 <lyxia> haasn: do they have a repo
10:42:53 <lyxia> there is a changelog on hackage
10:42:59 <haasn> https://github.com/snoyberg/http-client apparently
10:43:06 <lyxia> @where http-conduit
10:43:06 <lambdabot> I know nothing about http-conduit.
10:43:12 <lyxia> @hackage http-conduit
10:43:12 <lambdabot> http://hackage.haskell.org/package/http-conduit
10:43:45 <lyxia> oh that's why you say "real changelog"...
10:43:46 <haasn> I guess I'll just `git diff` the relevant files
10:43:56 <haasn> annoying
10:46:41 <byorgey> haasn: use hdiff.luite.com
10:51:09 <haasn> byorgey: thanks, that helps somewhat
10:53:43 <haasn> Hooray, I managed to get it to type check
11:01:17 <haasn> Still sort of weird that there's no simple changelog
11:01:34 <haasn> I'd expect a description of interface changes to be the very least any sane package author should provide when making backwards incompatible changes. Oh well :/
11:05:05 <glguy> haasn: The canonical way is to go to the docs: http://hackage.haskell.org/package/http-conduit and to click on ChangeLog.md
11:05:36 <glguy> No promises that the information you wanted is contained there
11:05:54 <dfeuer> The most reliable way is git diff.
11:06:02 <haasn> Ah, I didn't see that link
11:06:09 <dfeuer> But that's also the most painful.
11:06:13 <haasn> While basic, that changelog does at least hint at the information required to fix this bug
11:06:50 <haasn> (in particular, it mentions updating to http-client 0.5, and http-client's 0.5 changelog hinted at changes to HttpException, which is what failed compiling)
11:07:29 <wraithm> Is there a better way to write this?: concatMap (\(x, ys) -> map (\y -> (x, y)) ys) :: [(a, [b])] -> [(a, b)]
11:07:56 <blackdog> wraithm: could section out (\y -> (x,y)) to (x,)
11:10:34 <lyxia> \xys -> [(x, y) | (x, ys) <- xys, y <- ys]
11:28:32 <edward222> hey can someone help me to debug this
11:28:35 <edward222> http://lpaste.net/349596
11:30:13 <edward222> guys?
11:30:36 <cocreature> edward222: what is the function supposed to do and what problem are you seeing?
11:31:05 <niez> hello, I have many data types defined with only one data constructor, using record syntax, is there a way (maybe some GHC extension) to reduce this boilerplate? I have everywhere data Client = Client { ... }, data Something = Something { ... } etc., I didn't found such extension, maybe it would be good improvement to add such thing to GHC? to be able to ommit data constructor name if data type is defined using record syntax and it has only one data constructor?
11:32:04 <edward222> cocreature: the function has to count equal element and put them in tuples
11:32:26 <edward222> cocreature: akk and akklist not in scope
11:32:32 <hackrilege> edward222 I don't see that the last 2 arguments to pack1 visible in the scope of pack
11:32:33 <mettekou> edward222 cocreature: I annotated your lpaste with the errors I'm getting for your code, are you getting the same? http://lpaste.net/349596
11:33:21 <mettekou> edward222 hackrilege: Indeed, akk and akklist are not visible to pack.
11:33:23 <Cale> edward222: Only *adjacent* equal elements?
11:33:46 <Cale> edward222: for example, what should the result be when applied to "aba"?
11:33:53 <edward222> mettekou: yes
11:34:29 <Cale> > map (head &&& length) . group $ "mississippi"
11:34:31 <lambdabot>  [('m',1),('i',1),('s',2),('i',1),('s',2),('i',1),('p',2),('i',1)]
11:34:36 <Cale> ^^ this function?
11:35:12 <edward222> cale: pack [3,3,3,3,3,3,0,0,0,0,5,5,5,5] => [(3,6),(0,4),(5,4)]  pack "aaaaaaaabcccccccccccccccaaaa" => [('a',8),('b’,1),('c',15),('a',4)]
11:35:29 <Cale> okay, cool, so it's really only the adjacent ones
11:35:57 <edward222> Cale: yes
11:36:42 <hackrilege> lyxia, map (\(x,ys) -> map (\y->(x,y)))
11:37:27 <hackrilege> Oops lyxia, map (\(x,ys) -> map (\y->(x,y)) ys)
11:37:36 <lyxia> what's that
11:37:46 <hackrilege> (lyxia) \xys -> [(x, y) | (x, ys) <- xys, y <- ys]
11:38:11 <Cale> edward222: I would recommend adding an argument for the element you're trying to match to pack1
11:38:15 <lyxia> [(a, [b])] -> [[(a, b)]]  not the right type
11:38:39 <lyxia> and well that's pretty much what wraithm was asking about
11:38:45 <Cale> also, you should be able to remove the [(a,Integer)] list argument, it's only making things hard
11:39:22 <Cale> (there's no point in accumulating that, just produce the element when you hit something which doesn't match, or the end of the list)
11:40:11 <pikajude> hey, I'm blanking on this but I know the answer is obvious: how do I use traversable/foldable to write a function Either a b -> Maybe b?
11:40:21 <pikajude> that's more idiomatic than `find (const True)`?
11:40:41 <hackrilege> Oh I'm missing a join (concat)
11:41:22 <AndreasK> pikajude: http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:either
11:41:47 <pikajude> isn't `either (const Nothing) Just` even longer?
11:42:11 <lyxia> :t foldr (const . Just) Nothing `asAppliedTo` Left ()
11:42:13 <lambdabot> Either () a -> Maybe a
11:42:33 <pikajude> :t find (const True) `asAppliedTo` Left ()
11:42:34 <lambdabot> Either () b -> Maybe b
11:42:56 <lyxia> that's certainly shorter
11:42:58 <dfeuer> :t foldMap pure :: Either a b -> Maybe a
11:43:00 <lambdabot> error:
11:43:00 <lambdabot>     • Couldn't match type ‘b1’ with ‘a1’
11:43:00 <lambdabot>       ‘b1’ is a rigid type variable bound by
11:43:02 <AndreasK> Personally I find either (and maybe where it applies) clearer to read
11:43:03 <dfeuer> Noooo.
11:43:06 <dfeuer> :t foldMap pure :: Either a b -> Maybe b
11:43:08 <lambdabot> error:
11:43:08 <lambdabot>     • No instance for (Monoid b1) arising from a use of ‘foldMap’
11:43:08 <lambdabot>       Possible fix:
11:43:17 <dfeuer> Fff.f
11:43:25 <dfeuer> :t foldMap Just :: Either a b -> Maybe b
11:43:27 <lambdabot> error:
11:43:27 <lambdabot>     • No instance for (Monoid b1) arising from a use of ‘foldMap’
11:43:27 <lambdabot>       Possible fix:
11:43:42 <dfeuer> OK, I'm getting this wrong somehow.
11:43:56 <pikajude> the value inside Maybe has to be Monoid as well
11:44:00 <lyxia> Maybe is not the monoid you think it is
11:44:31 <hackrilege> :t concat . (map (\(x,ys) -> fmap (\y->(x,y)) ys))
11:44:33 <lambdabot> [(t, [t1])] -> [(t, t1)]
11:44:42 <dfeuer> Oh, it needs First.
11:44:45 <dfeuer> Grrr
11:44:59 <dfeuer> pikajude, yeah, that's because the Monoid instance for Maybe is *wrong*.
11:45:18 <pikajude> tl;dr it's actually not as simple as I thought
11:45:27 <pikajude> so I think find (const True) might be the *shortest*
11:45:37 <dfeuer> :t getFirst . foldMap (First . Just)
11:45:39 <lambdabot> Foldable t => t a -> Maybe a
11:45:48 <pikajude> yep
11:46:12 <dfeuer> That really should be the Monoid instance for Maybe.
11:46:14 <dfeuer> *sigh*
11:46:26 <lyxia> In do notation { ... Right b <- myEither ... }
11:48:16 <hackrilege> :t asAppliedTo
11:48:17 <lambdabot> (a -> b) -> a -> a -> b
11:48:32 <hackrilege> What is this?
11:49:10 <Franciman> Hello
11:49:16 <Franciman> does anyone use intero with neovim?
11:49:28 <lyxia> hackrilege: fancy (const . const)
11:50:08 <hackrilege> :t (const . const)
11:50:08 <lyxia> hackrilege: it restricts the type of a function to expect an argument whose type is the same as a given expression
11:50:10 <lambdabot> a -> b -> b1 -> a
11:51:13 <lyxia> oh no it's fancy const actually
11:51:42 <c_wraith> :t fmap (+1) `asAppliedTo` [] -- hackrilege
11:51:43 <lambdabot> Num b => [b] -> [b]
11:51:52 <hackrilege> Wow, doing the same thing as manually restricting a type but dynamically, that's great
11:51:55 <geekosaur> also the signature is probably better understood with extra parentheses: (a -> b) -> a -> (a -> b)
11:52:08 <lyxia> it's not dynamic
11:52:42 <hackrilege> I mean "as a function"
11:52:54 <geekosaur> it's not dynamic, it's just using an "example" value to restrict a type. all the work is done by the type signature
11:53:05 <hackrilege> Instead of writing a type annotation in the code
11:54:11 <hackrilege> I guess it's not really much use in programs as the type should be inferred
11:54:45 <lyxia> right it's an IRC thing
11:55:24 <lyxia> nowhere to be found on hayoo.
11:56:10 <joncol> Any emacs ppl here? I tried #emacs, but no response for a simple Q: Shouldn't this work in a function: (beginning-of-line) (re-search-forward "\\s-\\+" (point-at-eol) nil), for matching whitespace at the beginning?
11:56:35 <hackrilege> Can you imagine a scenario where eg the type of monad could be left ambiguous in the code and result in a compile error if an asApploedTo statement was absent?
11:58:04 <geekosaur> asAppliedTo isn't really intended for use in code; it's more for checking constrained types in ghci or lambdabot
11:58:31 <geekosaur> real code usually provides the constraints itself via inference from use sites
11:59:45 <hellow1> hellow, could anyone spare some time and look what mistake i did in my code? getting "    * Couldn't match expected type `[a2]'                   with actual type `[String] -> Bool'     * Probable cause: `compareLett' is applied to too few arguments"
11:59:56 <hellow1> http://lpaste.net/349602
12:01:44 <geekosaur> hellow1, compareLett isn't in there, and it's usually better to provide complete code *and* complete error message matching that code
12:02:34 <geekosaur> however, line 24 looks suspicious to me. you explicitly matched (x:xs), so you need to actually pass that somewhere, it won't be automatic
12:02:49 <geekosaur> eta reduction requires removing references from *both* sides of the =
12:03:02 * hackagebot directory 1.3.0.0 - Platform-agnostic library for filesystem operations  https://hackage.haskell.org/package/directory-1.3.0.0 (Rufflewind)
12:03:02 * hackagebot haskell-menu 0.2.1 - A simple menu system for Haskell programs  https://hackage.haskell.org/package/haskell-menu-0.2.1 (jlamothe)
12:04:08 <hellow1> geekoaur: yeah you are right. i did not use (x:xs) in the rest of my equation
12:04:23 <hellow1> geekoaur: i will check that out, thanks
12:05:19 <geekosaur> well, `take n  . reverse compareL` would expect a list, and isn't given one. looks to me like you expected (x:xs) to get passed to it automatically
12:06:00 <geekosaur> I suspect you wanted: isPoem n xs@(_:_) = take n . reverse compareL $ xs
12:06:19 * sm remembers hackagebot needs attention. If it's missed before I get around to it, ping me
12:06:40 <atk> So I was told that apparently haskell is pretty good when you need server side scripting.
12:06:48 <atk> Does anyone know where to start with that?
12:07:08 <Clint> define "server side scripting"
12:07:34 <atk> I guess in the modern day and age people call these things "web apps"
12:08:06 <atk> but basically, generated content with logic behind POST requests (and GET requests with parameters)
12:08:27 <Clint> atk: yesod's pretty popular
12:08:29 <sm> I'd check out eg Spock, yesod, servant
12:08:40 <atk> plugged into a server via WSGI or something
12:08:43 <atk> I see, thanks!
12:09:49 <sm> https://github.com/tdammers/sprinkles is also pretty cool, though not released yet
12:09:58 <atk> Great, now i have an excuse to learn haskell.
12:12:05 <atk> I mean the idea of writing a game in haskell was already a pretty interesting push towards learning it as writing a game in a pure functional language sounds and looks like a completely fun pain in the ass.
12:12:49 <sm> it's not that painful, there are quite a few examples to copy
12:13:00 <apriori> did anyone of you guys manage to setup atom + ghc mod in a reliable way in a cabal dependent setup? (can't use stack, because it doesn't support cross compile)
12:20:14 <ertes> atk: there are quite a few popular web frameworks for haskell, and yesod is perhaps not a good one to learn haskell, because it's too magic
12:20:46 <atk> well, I wasn't planning on learning haskell using it, but using it as an excuse to learn haskell.
12:20:54 <Clint> in the same way one should not learn haskell from xmonad
12:21:02 <Guest99814> oh.
12:21:16 <atk> As in, I previously didn't have any reason to know haskell other than as a curiosity.
12:21:29 <ym> > should not learn haskell from xmonad
12:21:32 <lambdabot>  error:
12:21:32 <lambdabot>      Variable not in scope:
12:21:32 <lambdabot>        should
12:21:35 <ym> Then how do I configure it?
12:22:02 <geekosaur> ym, the point there is that xmonad is very low level and you end up doing things that one would normally avoid in idiomatic Haskell
12:22:02 <ertes> atk: by "magic" i mean it's designed to be as productive as possible at the cost of understanding what's going on under the hood…  therefore i recommend a different one, if your intention is to *learn haskell*
12:22:20 <ertes> s/cost of/cost of giving up/
12:22:31 <geekosaur> it's a lot less like writing Haskell and a lot more like writing C in Haskell
12:22:52 <ym> I feel the same about StumpWM.
12:22:53 <atk> But a guy who I would say usually knows what he's talking about informed me that haskell is a good language for server side scripting (Web Applications) Now I don't usually write web stuff, but recently I found a reason to write something I would find useful. So I decided to look into good languages for such a task (obviously not PHP)
12:23:01 <ym> And that's why I switched to xmonad.
12:23:14 <atk> So now I have an excuse to write a web application, I also have an excuse to learn haskell.
12:23:25 <ogkloo> still though you could definitely make the case that it's easier to do a lot in Haskell than C.
12:23:30 <atk> And to learn haskell I was going to ask; any good books?
12:23:33 <ogkloo> even at the low level
12:23:47 <ogkloo> well not at *low level* low level
12:23:52 <atk> (Books in the style of K&R would be quite nice)
12:23:53 <ogkloo> but like xmonad
12:24:21 <ertes> atk: try happstack or snap, or even one of the more modern frameworks like scotty
12:25:24 <ertes> atk: and as a book recommendation: http://www.cs.nott.ac.uk/~pszgmh/pih.html
12:25:47 <atk> Well anyway, I'll revisit the question of web stuff after I am comfortable with haskell. I was just making sure that I wasn't going to have to reinvent the wheel.
12:26:09 <ertes> definitely not =)
12:26:27 <ertes> you might from time to time, but not for web programming
12:26:59 <ogkloo> how does Happstack compare to yesod?
12:27:18 <Clint> nicer types, more frustrating everything else
12:27:19 <ertes> ogkloo: more algebra, less magic
12:27:32 <ertes> and a looooot more manual in many respects =)
12:28:39 <ertes> happstack can be used (reasonably) without TH and QQ, and without scaffolding
12:31:27 <ertes> i found snap to be a lot more productive, if you can live without type-safe routing (it's possible to integrate web-routes, but it's probably not worth the trouble)
12:32:15 <ertes> (we should call this something other than "type-safe routing", because it's misleading)
12:33:27 <sm> atk: programming in haskell is a good one closes to K&R style (I think)
12:33:37 <sm> ah, ertes already said it
12:50:47 <NeoHendrix-ng> does haskell lazily evaluate decimal places
12:51:11 <NeoHendrix-ng> could i have an exact value for pi, for example
12:51:18 <NeoHendrix-ng> like i can have an infinite list
12:51:35 <lyxia> well you can represent pi as the lazy list of its digits
12:51:44 <Tuplanolla> Not with the usual types however.
12:51:53 * mmaruseacph2 coded a spigot in Haskell some years ago
12:52:13 <mmaruseacph2> but unless you wait all eternity you're not going to get all digits of pi
12:52:32 <NeoHendrix-ng> mmaruseacph2: obviously, but that isn't the point
12:52:53 <NeoHendrix-ng> like having an infinite list, the point isn't to getting all the values
12:53:01 <mmaruseacph2> then, it's easy to write such algortithm
12:53:09 <lyxia> "easy"
12:53:12 <mmaruseacph2> I think I wrote it after drinking some with my friends
12:53:19 <mmaruseacph2> sure, could have been Ballmer peak
12:53:22 <NeoHendrix-ng> actually there are a few formulas for it
12:53:24 <lyxia> haha
12:53:34 <mmaruseacph2> yep, and it's easy to encode those formulas
12:53:38 <NeoHendrix-ng> good point
12:53:58 <NeoHendrix-ng> my question still stands though, as pi was just an example
12:54:37 <mmaruseacph2> I think there are some packages who provide you with that
12:54:43 <lyxia> it all depends on how you represent it
12:54:51 <lyxia> what's the problem with the list of digits
12:55:32 <NeoHendrix-ng> im trying to think of a number it wouldn't work for, but i can't
12:55:44 <NeoHendrix-ng> cool
12:55:58 <NeoHendrix-ng> encoding formulae, excellent
12:56:53 <NeoHendrix-ng> 16 tan¯¹(⅕) - tan¯¹(1/239)
12:57:01 <mmaruseacph2> NeoHendrix-ng: see https://en.wikipedia.org/wiki/Chaitin%27s_constant
12:57:49 <mmaruseacph2> you won't be able to compute the digits of this number
12:58:10 <NeoHendrix-ng> lol
12:58:59 <NeoHendrix-ng> does the halting problem apply to the brain
13:00:15 <mmaruseacph2> another one, related to it, is the busy beaver one: sum over 2^{-BB(i)} (2^-1 + 2^-6 + 2^-21 +2^-107 +..) 
13:00:29 <mmaruseacph2> again, determining enough of it's digits will require solving the halting problem
13:01:20 <haasn> Does somebody have a link to the thing that explained the difference in power between applicative and monad using the UN conference and launchMissiles example?
13:02:20 <NeoHendrix-ng> launchMissiles isn't in Prelude :[
13:02:27 <NeoHendrix-ng> neither is Burrito
13:04:04 <haasn> ah I think it was iffy vs miffy or something
13:04:57 <NeoHendrix-ng> http://lpaste.net/349616
13:11:10 <mmaruseacph2> maybe you wanted https://hackage.haskell.org/package/acme-missiles
13:11:32 <mmaruseacph2> but then, don't forget to also use https://hackage.haskell.org/package/acme-timemachine
13:12:30 <hackrilege> Is there a class requiring a fromRational instance?
13:13:32 <hackrilege> Forming something like Enum with Real...
13:15:21 <hackrilege> In that Enum requires toInteger and fromInteger and Real requires toRational
13:15:29 <edward222> i need to write this with functions higher order please help http://lpaste.net/349617
13:16:37 <mmaruseacph2> edward222: the conditions in the comprehension are filters
13:24:14 <hackrilege> It says the list of every number before n which equals the sum of the numbers which divide itself
13:31:31 <hackrilege> > filter (\ a -> a == (sum (filter (\b -> 0==(mod a b)) [1..n] ))) [1..n]
13:31:33 <lambdabot>  *Exception: not an integer: n
13:31:58 <hackrilege> Ach nvm
13:38:10 <athan> > n -- wait what's n?
13:38:12 <lambdabot>  n
13:38:19 <athan> oh yeah
13:38:33 <athan> syntactical constructs in the interpreter or something
13:39:03 <geekosaur> @hackage simple-reflect
13:39:03 <lambdabot> http://hackage.haskell.org/package/simple-reflect
13:39:07 <geekosaur> ^ from that
13:39:19 <hackrilege> > let n = 100 in filter (\ a -> a == (sum (filter (\b -> 0==(mod a b)) [1..a] ))) [1..n]
13:39:22 <lambdabot>  [1]
13:39:23 <athan> sweet. Thanks geekosaur
13:40:06 <athan> Could a typechecker be "implemented" by cheating with smv (I think that's the package name) and an SMT solver?
13:40:12 <athan> sbv*
13:40:35 <byorgey> athan: sure
13:40:55 <byorgey> athan: typechecking with SMT solvers is an active area of research
13:41:19 <athan> :O awesome! thanks byorgey!
13:41:22 <hackrilege> > let n = 100 in filter (\ a -> a == (sum (filter (\b -> 0==(mod a b)) [1..a-1] ))) [1..n]
13:41:25 <lambdabot>  [6,28]
13:41:41 <hackrilege> Perfect!
13:41:46 <bitemyapp> byorgey: LiquidHaskell uses SMT on the backend doesn't it?
13:42:03 <athan> I'm wondering if i could make a lightweight haskell compiler that does stuff with llvm, specifically for raspberry pis
13:42:13 <athan> probably a pipe dream :)
13:42:25 <byorgey> bitemyapp: it might, I'm not sure off the top of my head
13:42:29 <bitemyapp> athan: Ranjit Jhala's work on LH might be relevant.
13:42:34 <athan> it does bitebyapp
13:42:40 <bitemyapp> okay, so you already knew.
13:42:42 <athan> that would be awesome actually
13:42:46 <bitemyapp> only worked example that came to mind.
13:42:47 <byorgey> athan, bitemyapp: also see https://www.microsoft.com/en-us/research/project/dafny-a-language-and-program-verifier-for-functional-correctness/
13:42:52 <bitemyapp> uh, other than a couple odds and ends.
13:42:58 <athan> yeah idk i don't use it actively, there were a couple things I ran into, but thank you
13:43:02 <bitemyapp> oh right, microsoft.
13:43:15 <bitemyapp> MSR/MS have some SMT-backed compiler stuff floating around
13:43:19 <athan> woot, thanks byorgey!
13:43:22 <bitemyapp> so try that as a search query
13:43:26 <athan> oh wow okay
13:43:50 <bitemyapp> maybe they don't think programmers can be arsed with additional proof burden?
13:44:50 <byorgey> bitemyapp: maybe they think programmers *shouldn't* be.
13:45:08 <byorgey> Should programmers have to manually allocate and deallocate their own memory?
13:46:02 <bitemyapp> I don't have an opinion on the "should", because I'm not sure the question matters when I think the labor shortage and the inclinations of programmers means they'll not bother unless the compiler can derive proofs for them.
13:46:08 <hackrilege> athan http://raspberrypi.stackexchange.com/questions/45930/is-it-possible-to-use-any-virtualization-technique-with-the-raspberry-pi-3
13:46:26 <bitemyapp> Mostly, anyway. There are certainly people whose daily bread is earned by slinging Coq for industry.
13:46:44 <bitemyapp> but even that can often be search-y
13:51:44 <athan> hackrilege: It seems like the top answer didn't really understand the question haha, but heck yeah!
13:51:54 <athan> then I could use HaLVM or something
13:52:02 <hackrilege> Right
13:52:06 <ottanta> hello! how are you 
13:52:08 <hackrilege> https://github.com/GaloisInc/HaLVM/blob/master/README.md
13:52:35 <athan> but I don't have a 3, I've got a 2. I tried to compile stack with GHC, and i gave up after 3 days lol
13:53:01 <byorgey> hi ottanta 
13:56:00 <hackrilege> Better would be a driver for cpus connected via usb
13:56:19 <ottanta> I have a math/haskell problem
13:56:30 <ottanta> but I'll pastebin my code before I ask my question
13:58:02 <hackrilege> athan, did you try the jvm?
13:59:26 <athan> hackrilege: You mean with Frege? Er, however it's spelled :s
13:59:40 <athan> I suspect if it's also just a port of GHC, then I'll have similar issues
13:59:49 <athan> idk i also just want to implement a compiler
14:01:46 <hackrilege> Getting ghc running would be a start
14:02:30 <lpaste> ottanta pasted “No title” at http://lpaste.net/48549167852683264
14:02:48 <ottanta> see pastebin please, I can't quite figure out what's going on
14:02:54 <hackrilege> Can't you run ghc on the jvm somehow?
14:04:13 <geekosaur> no, you can't
14:04:20 <byorgey> ottanta: your definition of dotProduct is wrong, should be  y1*y2  instead of  y1+y2
14:04:31 <ottanta> byorgey: OMG
14:04:44 <hodapp> There's Eta, but that's not really the same
14:04:50 <hodapp> (formerly ghcvm)
14:05:17 <byorgey> ottanta: also, instead of  atan (y2/x2)  you should use e.g.  atan2 y2 x2
14:05:30 <ottanta> oh
14:05:33 <byorgey> ottanta: atan2 explicitly takes signs into account so you can get an answer in all four quadrants
14:05:40 <ottanta> Nice!
14:05:46 <hodapp> also, division by zero ceases to be an issue with atan2
14:05:46 <byorgey> whereas e.g.  atan (y2/x2) == atan (-y2/-x2)
14:05:56 <byorgey> good point, that too
14:05:56 <geekosaur> that was the first thing I noticed, yeh
14:06:13 <Gurkenglas> ottanta, floating point magic would surprise me to produce such significant errors after this little computation, and your first check could have been what's the actual angle between those vectors so your paste length/error search space becomes halved
14:07:00 <ottanta> Gurkenglas: it was because the dot product wasn't defined properly, as byorgey said
14:07:23 <ottanta> fixing it fixed the problem, I'll use atan2, the atan function was to double check since the angles werent what I calculated out on paper with a calculator 
14:07:39 <ottanta> s/paper with/paper and with/
14:09:03 <hackrilege> hodapp can you use Eta in an implementation of the jvm in php in a web browser?
14:09:12 <ottanta> geekosaur: div by zero wasn't going to be an issue since that function was there just to double check, but it was something I was also aware of
14:09:42 <geekosaur> I didn't mean division by zero, I keyed on atan vs. the sign being different in the two results
14:10:01 <ottanta> byorgey: the book I'm reading isn't going over stuff like haskell standard libraries yet, where would I be able to double check
14:10:24 <geekosaur> digging a bit deeper would have had me notice the dot product error
14:10:26 <hodapp> hackrilege: I have no idea.
14:10:30 <ottanta> geekosaur: oh, well, it should be, sometimes.  The dot product method should always give the absolute angle between two vectors, and not one relative to the first.  It kinda has to since the dot product is commutative
14:11:45 <ottanta> sorry, I mean the cos thing I set up, the dot product gives the magnitudes of the two vectors times the cosine of the angle between them, but the function I defined is commutative
14:11:59 <ottanta> the one which uses the dot product, I mean
14:12:16 <ottanta> so the sign error wasn't what surprised me, it was the value being wrong
14:12:24 <ottanta> or the absolute value of it, rather
14:12:40 <ottanta> but thanks for the help everyone omg Gurkenglas geekosaur byorgey, you're the best!
14:12:51 <Gurkenglas> '[]     !! _         =  errorWithoutStackTrace "Prelude.!!: index too large"' <- Why doesn't it say '"index too large by " ++ show k'?
14:13:35 <jle`> submit the PR :)
14:16:30 <Gurkenglas> I mean, could there possibly be an overhead to that? There is one to stack traces, and this is kinda the first step in that direction
14:17:50 <lyxia> I can't imagine any.
14:24:06 <mettekou> How can I parse function application by juxtaposition as in Haskell with Parsec/Megaparsec?
14:24:36 <mettekou> Or in other words: the whitespace operator representing function application.
14:25:34 <mettekou> My current solution (application = Application <$> term <*> (some spaceChar *> term) seems to run forever on a simple application as input ("f x").
14:26:28 <byorgey> mettekou: use buildExpressionParser or similar and specify an operator named "" with high precedence
14:27:23 <mettekou> byorgey: I tried that before and that required me to put parentheses around expressions within declarations which was a real pain. Then again I didn't have unit tests for my parser back then and I caught some bugs when adding those today. I'll try it out, thanks!
14:28:06 <byorgey> mettekou: that sounds like an unrelated problem, though of course I don't know anything about the specifics of your language
14:28:12 <hexagoxel> mettekou: because <term> can be an application, so you have some nice recursion
14:28:21 <hexagoxel> i would guess
14:28:29 <mettekou> hexagoxel: Yeah, that was my guess as well.
14:29:26 <mettekou> byorgey: Well, it's a proof assistant, the syntax for terms (not declarations) reflects Coq (but terms are fully annotated until I get to type inference).
14:41:24 <mettekou> byorgey: This implementation makes parsing fail for some other terms: term = makeExprParser term' [[InfixL (some spaceChar *> pure Application)]]. What have I overlooked?
14:45:40 <benzrf> mettekou: you might wanna try earley instead :)
14:45:49 <benzrf> mettekou: it operates at an arguably higher level of abstraction in some ways
14:46:59 <benzrf> basically you dont actually work with any kind of control flow - you *just* specify the grammar, and u get a working parser out, for any CFG
15:12:59 <mettekou> byorgey: The error is the same for both expressions which fail to parse when I add the expression parser: they fail when they encounter a colon, expecting whitespace.
15:15:16 <mettekou> byorgey: No, wait they fail expecting a term instead of a colon for a type annotation.
15:27:19 <suffi> anyone here that has a general suggestion on when and how to use the on function?
15:27:25 <suffi> fomr Data.Function
15:27:45 <Rembane> suffi: With great care!
15:27:51 <Rembane> :t on
15:27:53 <lambdabot> (b -> b -> c) -> (a -> b) -> a -> a -> c
15:28:11 <suffi> it takes two functions and returns a third, thats the idea right?
15:28:54 <Rembane> suffi: It takes a function that needs to arguments of type b. And it takes a function that transforms values of type a to type b.
15:29:02 <Koterpillar> suffi: compare `on` snd is one example
15:29:25 <suffi> ok i will try that one out
15:30:05 <ouyout> hello: has any of you ever built rocksdb (github.com/facebook/rocksdb) on Windows? I'm trying to use it for a Haskell project but I can't get it to work.
15:37:06 <suffi> ((+) 'on' digitToInt) '1' '2'
15:37:11 <suffi> i found an other example
15:37:41 <suffi> so kind of like a composition
15:38:00 <ogkloo> like composition for moving types around it looks like
15:38:38 <Rumia> @suffi : The most common use is with "compare".
15:38:38 <lambdabot> Unknown command, try @list
15:39:06 <lambdabot> The @ is for bot commands, and addressing users.
15:39:15 <glguy> and not, lambdabot
15:39:22 <suffi> i see
15:40:52 <suffi> and another one
15:41:01 <suffi> ((++) `on` map (+1)) [1,2] [3,4]
15:41:16 <suffi> i mean it really is like compositon in a way
15:43:06 <Rumia> :t (***)
15:43:08 <lambdabot> Arrow a => a b c -> a b' c' -> a (b, b') (c, c')
15:43:41 <Rumia> :t (^^^)
15:43:43 <lambdabot> error:
15:43:43 <lambdabot>     • Variable not in scope: ^^^
15:43:43 <lambdabot>     • Perhaps you meant one of these:
15:43:51 <Rumia> :t (&&&)
15:43:52 <lambdabot> Arrow a => a b c -> a b c' -> a b (c, c')
15:48:00 <Rumia> It is quite close to composition, compare: "f `on` g = \ x -> f (g x) (g x) " and "f . g = \x -> f (g x)".
15:48:32 <Rumia> Err..
15:48:54 <Rumia> "f `on` g = \x y -> f (g x) (g y)"
15:49:18 <suffi> yeah, that makes it pretty clear
15:50:31 <suffi> well thanks for that, i think ikind of got it now
15:54:19 <Rumia> How evil is it to leave abs and signum from Num undefined?
15:54:54 <c_wraith> it's relatively common. 
15:55:09 <c_wraith> I'm pretty sure Complex doesn't define them, for instance. 
15:55:37 <c_wraith> (or else it defines them in a law that obeys the laws, but is otherwise meaningless.) 
15:55:47 <c_wraith> *in a way*
15:55:50 <ogkloo> why wouldn't they be defined?
15:56:18 <c_wraith> like abs = id ; signum = 1
15:56:35 <c_wraith> those obey the laws relating those two functions. 
15:56:54 <Tuplanolla> Looks like `System.Posix.Signal` doesn't provide a way to set flags for `struct sigaction`, so I tried it with C instead. I queried the flags of the default signal handlers first and got back `0x7c56dbd`. That's not consistent with the definitions in `bits/sigaction.h`. What's going on here?
15:56:55 <c_wraith> but they're as nonsense as the operations themselves on Complex numbers. 
15:57:20 <geekosaur> > abs (3 :+ 4)
15:57:22 <lambdabot>  5.0 :+ 0.0
15:57:26 <geekosaur> looks right to me...
15:57:58 <c_wraith> but that breaks abs x * signum x == x
15:58:16 <geekosaur> > signum (3 :+ 4)
15:58:18 <lambdabot>  0.6 :+ 0.8
15:58:35 <c_wraith> ok, no it doesn't. :) 
15:58:43 <geekosaur> > let x = 3 :+ 4 in abs x * signum x
15:58:46 <lambdabot>  3.0 :+ 4.0
15:58:52 <Rumia> I ended up not using Num because the laws for +/- don't hold on the nose.
15:58:53 <geekosaur> just got clever with signum
15:59:11 <c_wraith> I guess that's a totally meaningless signum just to make the laws work. :) 
15:59:42 <Rumia> No I think its the unit sized vector.
16:00:02 <geekosaur> > abs (0.6 :+ 0.8)
16:00:04 <lambdabot>  1.0 :+ 0.0
16:00:06 <geekosaur> yep
16:00:19 <c_wraith> that's true by definition. 
16:00:33 <Rumia> So is all of mathmatics.
16:01:13 <c_wraith> sometimes it's more trivial than other times. like when you just divide by length. 
16:01:21 <geekosaur> well, what c_wraith said is correct insofar as reconstructing the original that way means signum produced a unit vector
16:02:05 <geekosaur> ...I don't think the law for signum requires it behave just like it would for a scalar though, and unit vector would appear law abiding to me
16:02:06 <Rumia> Yes, but the unit vector in the direction of the complex number /is/ a mathmaticaly useful consept.
16:02:16 <sophiag> hi. i'm fairly new to haskell, had to switch computers and got bumped down to an older version of ghc i can't upgrade for whatever reason (centos6 seems to make it impossible to install higher than 7.04) and am now having a hard time running a lot of examples from learnyouahaskell. i think it's expected adts shouldn't work in this version of ghci, 
16:02:16 <sophiag> but things like i have to import Prelude or it says it can't find Maybe?
16:03:12 <geekosaur> what packages exactly did you install?
16:03:25 <sophiag> the whole platform
16:03:46 <geekosaur> ... but no Prelude? then something else is wrong
16:03:51 <geekosaur> @lpaste
16:03:51 <lambdabot> Haskell pastebin: http://lpaste.net/
16:04:08 <geekosaur> ^ send output of "ghc-pkg check" to the pastebin please
16:04:20 <nshepperd1> > signum 0 :: Complex Double
16:04:23 <lambdabot>  0.0 :+ 0.0
16:04:47 <nshepperd1> Nice. Seems reasonable
16:05:38 <sophiag> geekosaur: no output...
16:06:34 <geekosaur> then send the putput of "ghc-pkg list" there
16:06:38 <geekosaur> *output of
16:08:00 <c_wraith> was 7.0.4 the crazy half-release? 
16:08:04 <sophiag> http://lpaste.net/349625
16:08:33 <nshepperd1> Interesting that Complex doesn't support eg. Gaussian integers with Complex Integer due to the RealFrac constraint, solely to support signum...
16:09:06 <sophiag> this is what you get on centos6 and manual builds are apparently impossible due to an issue with libgmp
16:10:36 <Koterpillar> sophiag: are you sure you can neither get a VM nor compile GHC?
16:11:39 <geekosaur> hm, base is there... but ghci isn't loading it?
16:11:47 <sophiag> i tried building it manually and the error message from the libgmp dep led me to a github issue saying you need to use yum :(
16:12:42 <sophiag> and i think "get a vm" is a tall order to resolve this
16:13:14 <sophiag> if that's the case they need to update the install page to say they've dropped support
16:13:17 <geekosaur> you don't have access to install things? you are going to be in some pain, and not just with respect to installing a decent ghc
16:13:27 <sophiag> what?
16:13:30 <Koterpillar> sophiag: what kernel version are you on?
16:13:38 <sophiag> what do you mean access to install things?
16:13:44 <Koterpillar> sudo
16:13:49 <geekosaur> "you need to use yum :("
16:13:52 <sophiag> i do...
16:13:53 <geekosaur> which is the installer
16:13:57 <sophiag> yum gives you 7.04...
16:14:03 <sophiag> i'm on centos6
16:14:05 <sophiag> 6
16:14:11 <geekosaur> no, you want to remove ghc and install ncurses-devel and gmp-devel
16:14:16 <sophiag> 6 is very old
16:14:19 <sophiag> i've done that
16:14:26 <geekosaur> I *think* that's all you need to build ghc, but there may be more
16:14:28 <Koterpillar> sophiag: I forgot, did you "yum install stack"?
16:14:31 <sophiag> this is all documented as not working
16:14:52 <sophiag> koterpillar: done that...again, documented as not working...it's not just me
16:14:59 <Koterpillar> ok; kernel version?
16:15:13 <geekosaur> can you link to the issue?
16:15:28 <Koterpillar> and as geekosaur says, install those devel packages
16:15:37 <sophiag> 2.6.32-642.11.1.el6.i686
16:15:46 <sophiag> koterpillar: I DID
16:16:04 <Koterpillar> sorry, I must have missed that. Another opportunity is to install Docker
16:16:25 <Koterpillar> I vaguely remember RH did backport everything that was needed for Docker to 2.6 kernels
16:16:38 <sophiag> if i need to install docker, then they need to update the install page to say centos6 is no longer supported
16:16:56 <Koterpillar> they == stack? Raise a bug with stack
16:18:06 <sophiag> that bug has been raised already. i also already said that on here
16:18:34 <sophiag> more the issue is why it's not working for me with an older version. i shouldn't need to upgrade it for this functionality
16:19:01 <geekosaur> I wouldn't try docker, rh did backports but iirc the result is barely functional and very buggy
16:19:01 <Koterpillar> Again, I'm sorry if I missed that too, but please paste the error you get with this old version
16:19:29 <sophiag> it varies...
16:19:34 * geekosaur does c6 support and is mildly surprised ghc would have issues; it's generally tolerant of older systems
16:19:58 <geekosaur> (stack I can make no promises about, though; don't really know what it needs)
16:20:10 <sophiag> geekosaur: do you install ghc with yum?
16:20:28 <Koterpillar> sophiag: no help for you if your errors description is "not working" and "it varies"
16:20:48 <sophiag> koterpillar: i described already above
16:20:50 <geekosaur> no, I prefer later versions
16:21:03 <sophiag> geekosaur: how do you get around the libgmp issue then?
16:21:13 <geekosaur> you did not describe, you did not link to the "documented as not working", you have not provided any useful information
16:21:17 <geekosaur> and I can't read minds
16:21:21 <Koterpillar> "i have to import Prelude or it says it can't find Maybe?" <-- this is the best I can find
16:21:23 <sophiag> let me find the link
16:21:29 <Koterpillar> which is not the exact GHC error
16:21:39 <geekosaur> and ghc should support libgmp6 and even centos6 has that
16:22:17 <Retriple> How does Persistent deal with failure (e.g. database connection loss)? You can basically just run everything in a ReaderT SqlBackend IO a, which doesn't leave any room for monad-level error handling, does it?
16:22:18 <sophiag> geekosaur: https://github.com/commercialhaskell/stack/issues/967
16:22:26 <geekosaur> oh no, gmp5 default :/
16:22:54 <geekosaur> iirc gmp5 works you just need a symlink. ghc doesn't use the things that changed between them
16:23:03 <geekosaur> ok, that is stack
16:23:12 <geekosaur> you were talking about ghc, do you mean ghc or do you mean stack
16:23:23 <geekosaur> they are different programs from different organizations.
16:23:56 <sophiag> seems the problem is with stack
16:24:10 <geekosaur> so you are installing binary distributions only
16:24:11 <sophiag> i was trying to manually update everything
16:24:21 <geekosaur> we're both talking about building from source, not binaries
16:24:42 <sophiag> well according to that, you need to use the rpm
16:24:45 <geekosaur> but even for stack, "You can also download one of the binaries with the -gmp4 suffix from the latest release." 
16:25:11 <geekosaur> from that issue you claimed was not fixed... sounds as fixed as it is going to get
16:25:17 <geekosaur> you need a specific binary
16:25:30 <sophiag> oh maybe i should have tried that
16:25:56 <sophiag> this is over a year old so i followed what they updated on the install page
16:25:59 <geekosaur> and I followed the link and there are indeed packages with -gmp4
16:26:19 <geekosaur> and that's the latest release
16:26:51 <sophiag> just to be clear, you're saying the one here? https://docs.haskellstack.org/en/stable/install_and_upgrade/
16:27:06 <geekosaur> https://github.com/commercialhaskell/stack/releases
16:27:49 <geekosaur> as linked from https://github.com/commercialhaskell/stack/issues/967#issuecomment-139189617
16:28:07 <geekosaur> (if it is not clear, "the latest release" at the end of that comment is a link)
16:28:24 <sophiag> ok, lemme give that a shot
16:28:38 <sophiag> because yum was not doing it
16:32:37 <geekosaur> no, if you are doing this then you don't want to use yum for anything haskell related
16:33:01 <geekosaur> although you may need it for C libraries that various Haskell packages use via the FFI
16:34:41 <sophiag> ok, so i actually already downloaded stack 1.20-gmp4 yesterday...do you know where to put it in my path to replace the one from yum?
16:36:31 <geekosaur> first, remove the one from yum (along with any ghc installed from yum)
16:37:26 <geekosaur> then, I would place it either in /usr/local/bin or ~/.local/bin (which you may need to create and add to $PATH; but that means stack will be able to auto-update, provided it can figure out it needs the gmp4 one or it upgrades itself from source at least)
16:37:33 <sophiag> ah i found it
16:43:23 <sophiag> ok, so i manually replaced stack with the the 1.20-gmp4 version
16:43:33 <sophiag> reloaded ghci...same behavior
16:44:17 <sophiag> oh i didn't delete ghc though
16:46:52 <geekosaur> when you do that, you will have to use stack to manage your ghc
16:48:14 <sophiag> you mean i'll call stack update and it should give me the latest build?
16:48:27 <sophiag> i can't find where yum put ghc...
16:50:28 <geekosaur> once you have stack installed, you run "stack setup" and it should install a ghc (among other things)
16:50:49 <geekosaur> then you would use "stack ghci" to run it, since it won't be installed in the normal place; it
16:51:06 <geekosaur> it's managed by stack instead of by yum
16:52:31 <sophiag> ok, thanks
16:52:33 <sophiag> i found the old one
16:52:35 <geekosaur> (also, er, what are you doing. if you want to remove the ghc that you installed with yum, "sudo yum remove ghc" and let yum deal with it; don't remove it directly)
16:52:55 <geekosaur> otherwise you'll confuse yum because it will think ghc is still installed when it's not
16:53:01 <Rumia> Is there a name for "f g Nothing b = b; f g a Nothing = a; f g (Just a) (Just b) = g a b"
16:53:29 <Koterpillar> Rumia: liftA2?
16:53:43 <glguy> not quite
16:54:32 <glguy> to use liftA2 you'd have something liek: f g x y = liftA2 f x y <|> x <|> y
16:54:52 <Rumia> That is what it is.
16:54:55 <Rumia> Hmm.
16:55:27 <Tuplanolla> With `g`.
16:55:34 <Koterpillar> is g mappend?
16:55:56 <Koterpillar> you can make it one
16:57:20 <sophiag> geekosaur: ugh, ok...i get "stack: command not found"
16:57:58 <sophiag> it's in /usr/local/bin
16:58:34 <geekosaur> hm, centos6 doesn't add that to $PATH? you will need to add it yourself
16:58:45 <geekosaur> (it's one of those things I do anyway...)
16:58:59 <geekosaur> export PATH=/usr/local/bin:$PATH
16:59:05 <geekosaur> (in the shell)
16:59:41 <Rumia> g a b = 1 + max a b
16:59:57 <geekosaur> then add that same line to ~/.bash_profile (or lazy people add to ~/.bashrc until they find out it breaks environment managers)
17:00:16 <sophiag> geekosaur: ah wait, i screwed up placement by accident. now getting permission denied even as su...
17:00:54 <geekosaur> which file did you download from the release area? and did you just copy that over or did you unpack and install it?
17:00:58 <Koterpillar> Rumia: if it was just max, you could wrap a and b in the Max monoid
17:01:23 <sophiag> i unpacked it and and put a symlink in /usr/local/bin
17:02:02 <Rumia> mempty :: Max x == minBound, yes?
17:02:02 <danilo2> Hello guys! Can I have a Lens Traversal to some place in a nested map and put there a value creating some of the structure if it doesnt exist yet?
17:03:17 * geekosaur is taking approximately forever to download it because local network is overloaded yet again (not under my control, sadly)...
17:03:55 <geekosaur> so the stack binary in there is executable and a symlink to it should work
17:03:59 <Welkin> downloading what?
17:04:14 <geekosaur> ls -l /usr/local/bin/stack; ls -lL /usr/local/bin/stack
17:04:40 <Koterpillar> Rumia: by necessity, yes
17:04:40 <geekosaur> (that should produce 2 lines of output, if it's more then send it to lpaste)
17:04:47 <danilo2> ok I see in LEns manual "If you want to be able to insert missing values, you want `at`". So there is other question - is there any simple way to compose many `at`'s ? 
17:05:00 <Koterpillar> Rumia: but that doesn't matter since mempty :: Maybe a == Nothing
17:07:21 <sophiag> geekosaur: are you sure this is what you meant? http://lpaste.net/349626
17:07:54 <geekosaur> I typed "ls" not "ln"
17:07:57 <geekosaur> twice even
17:08:03 <sophiag> ah yeah sorry just saw that
17:08:41 <sophiag> "lrwxrwxrwx. 1 root root 18 Dec  6 19:58 /usr/local/bin/stack -> ../src/stack/stack"
17:08:56 <Koterpillar> relative symlink path?
17:09:13 <sophiag> i take it that's the problem
17:09:48 <Koterpillar> where is the original executable you've unpacked?
17:10:07 <sophiag> in /usr/local/src
17:10:27 <sophiag> actually /usr/local/src/stack
17:10:29 <geekosaur> and is the actual path to it /usr/local/src/stack/stack  then?
17:10:35 <sophiag> yeah
17:10:42 <sophiag> lemme fix that
17:10:53 <geekosaur> so what does the second ls command produce?
17:10:57 <Welkin> sophiag: imma let you finish, but...
17:11:01 <geekosaur> [07 01:03:50] <geekosaur> ls -l /usr/local/bin/stack; ls -lL /usr/local/bin/stack
17:11:32 <Koterpillar> (the relative symlink was fine)
17:11:37 <danilo2> Hello! :) Does somebody know how I can easily compose two lenses of type `Lens' a (Maybe a)` ? 
17:11:50 <sophiag> ah, what?
17:11:50 <geekosaur> the -L in the second one tells it to follow the symlink and report the thing it points to instead of the symlink itself
17:11:53 <danilo2> They are created by `at` and used over Data.Map
17:12:50 <Koterpillar> sophiag: fix the path, as you've already figured out
17:14:11 <sophiag> geekosaur: i pritned you that output above... "lrwxrwxrwx. 1 root root 18 Dec 6 19:58 /usr/local/bin/stack -> ../src/stack/stack"
17:14:44 <sophiag> i remade the symlink with an absolute path and now i'm getting not found again
17:14:44 <geekosaur> you didn't notice there were *two* ls commands, even after I specifically pointed to what was different about the second?
17:14:44 <Koterpillar> sophiag: what about the second command?
17:15:40 <sophiag> geekosaur: "ls: cannot access /usr/local/bin/stack: Not a directory"
17:16:11 <geekosaur> then you're pointing to the wrong thing in the symlink
17:16:29 <sophiag> oh, it should be the whole directory?
17:16:34 <geekosaur> no
17:16:50 <sophiag> well that's the exec
17:16:58 <geekosaur> that error would mean that, if you are pointing at /usr/local/src/stack/stack, then /usr/local/src/stack is a file instead of a directory
17:17:04 <Koterpillar> sophiag: ls -lR /usr/local/src/stack
17:17:13 <Koterpillar> sophiag: please show the output of that
17:18:25 <sophiag> koterpillar: http://lpaste.net/349627
17:18:54 <Koterpillar> sophiag: ls -l /usr/local/bin/stack; ls -lL /usr/local/bin/stack
17:18:59 <Koterpillar> sophiag: please show the output of both these commands
17:19:21 <sophiag> already did above
17:19:33 <Rumia> > Nothing < Just 1
17:19:35 <lambdabot>  True
17:19:45 <Koterpillar> sophiag: yes, but you said you've remade the linl
17:19:58 <Koterpillar> *link
17:22:00 <sophiag> "
17:22:05 <sophiag> "lrwxrwxrwx. 1 root root 27 Dec  6 20:12 /usr/local/bin/stack -> /usr/local/src/stack/stack/"
17:22:19 <geekosaur> that's wrong
17:22:26 <Koterpillar> remove the final slash in there
17:22:38 <sophiag> "ls: cannot access /usr/local/bin/stack: Not a directory'
17:23:06 <sophiag> oh..huh. good catch
17:24:18 <sophiag> ok, NOW back to permission denied
17:24:26 <sophiag> same as before
17:24:28 <sophiag> lol
17:29:34 <sophiag> so...why am i getting permission denied calling it from root?
17:30:54 <Koterpillar> you have selinux everywhere
17:31:19 <Koterpillar> to test things, can you just _copy_ /usr/local/src/stack/stack to /usr/local/bin/stack?
17:31:38 <Koterpillar> or set it to permissive
17:31:38 <geekosaur> if ls -lL shows it present and executable as /usr/local/bin/stack then you probably need selinux labels on stuff in/under /usr/local/src, yes
17:32:09 <geekosaur> or just copy the file and don't try to get clever, yes. selinux does not reward cleverness
17:32:32 <Koterpillar> (see that '.' in 'lrwxrwxrwx.'?)
17:32:35 <sophiag> oh i see
17:32:51 <sophiag> i thought it was considered a best practice to not copy it
17:33:53 <geekosaur> in most cases it is a best practice. when selinux is active, it's a bad idea unless you know the selinux label allows execution
17:34:48 <sophiag> some guy in #linux started screaming at me about that
17:35:39 <Koterpillar> that is definitely not best practice ^
17:35:49 <geekosaur> there are quite a few people who consider selinux to be evil because it breaks the way they work. (and there are others who simply don't trust it, since it was developed by the NSA)
17:36:12 <sophiag> oh just had to do chmod on it
17:36:25 <geekosaur> and no, screaming at people isn't a best practice anywhere :/ but few channels are as well behaved as this one
17:36:29 <Koterpillar> ooooh
17:36:33 <Koterpillar> I missed that :\
17:36:37 <sophiag> uh, it's downloading 7.12...
17:36:40 <sophiag> the fuck?
17:36:41 <geekosaur> it looked executable to me?
17:36:47 <Koterpillar> http://lpaste.net/349627
17:36:53 <sophiag> oh wait? that's lts-7.12
17:36:57 <sophiag> not sure what that even is
17:37:00 <geekosaur> yes, that would be current
17:37:03 <sophiag> oh ok
17:37:03 <Koterpillar> that means you are getting GHC 8
17:37:05 <sophiag> lol
17:37:20 <geekosaur> it refers to a stackage snapshot of packages known to work together and the version of ghc they work with
17:37:23 <sophiag> this has not been fun. i'm weary
17:38:22 <sophiag> you can tell i'm not an ops type. i like programming. but this will serve me. i plan on migrating everything to aws soon and probably getting a chromebook
17:38:31 <geekosaur> "lts" is "long term support", they promise to not add packages that will break it. (the other alternative is nightlies, which can change without warning)
17:39:08 <sophiag> well i know someone who still uses hugs so...
17:39:11 <Welkin> ew
17:39:14 <Welkin> a chromebook?
17:39:16 <Welkin> good luck with that
17:39:21 <sophiag> why?
17:39:29 <Welkin> just use a normal linux distro
17:39:32 <sophiag> that way they're basically disposable
17:39:36 <Welkin> ubuntu LTA always works fine
17:39:40 <Welkin> LTS*
17:39:44 <sophiag> i will have a regular linux distro. on aws...
17:40:07 <sophiag> that way shit gets broken/stolen i'm out at most $300
17:40:24 <Welkin> for that much you can get a full blown laptop
17:40:25 <sophiag> not sure though, i haven't looked into them that much yet
17:40:31 <sophiag> yeah?
17:40:38 <Rumia> @ty (:+:)
17:40:40 <lambdabot> error:
17:40:40 <lambdabot>     • Data constructor not in scope: :+:
17:40:40 <lambdabot>     • Perhaps you meant ‘:+’ (imported from Data.Complex)
17:40:45 <Rumia> @ty (:+)
17:40:46 <lambdabot> a -> a -> Complex a
17:41:26 <sophiag> ok, so i ran stack setup and all is good
17:41:29 <geekosaur> the main problem with aws for this is that ghc can require a lot of memory at times, especially when linking, and you may have to resize the instance
17:41:37 <Welkin> yes
17:41:39 <geekosaur> which can get expensive
17:41:41 <Welkin> it will fail on less than 2 GB
17:41:50 <Sadin[m]> sophiag http://www.newegg.com/Product/ProductList.aspx?Submit=ENE&IsNodeId=1&N=100006740%204018 
17:41:50 <Sadin[m]> Doesnt take much looking to find what Welkin is talking about
17:41:53 <Welkin> also, aws is expesnive as hell
17:42:04 <Welkin> digital ocean is half the price with no surprise charges
17:42:18 <sophiag> hence why i'm factoring in the super cheap laptop...
17:43:11 <sophiag> anyway, what about cabal?
17:43:30 <sophiag> i guess i can finally update that now?
17:44:00 <Koterpillar> sophiag: if you have stack, you don't need cabal (the CLI tool)
17:44:32 <`Guest00000> hello
17:44:45 <Welkin> either: install the binary distribution + cabal-install, or use stack, or use nix
17:44:54 <sophiag> koterpillar: what? i don't need cabal? really?
17:45:03 <Welkin> sophiag: you need the Cabal library
17:45:09 <Welkin> stack uses that
17:45:19 <Welkin> the binary cabal-install is no needed though
17:45:32 <Welkin> although I think in some cases stack does use cabal-install
17:45:33 <Koterpillar> sophiag: what did you want to do with cabal?
17:45:37 <Welkin> or maybe that is for yesod
17:45:40 <sophiag> just update packages
17:45:51 <Koterpillar> sophiag: stack manages that for you
17:46:34 <sophiag> ok good. cuz it's still telling me base is too old for cabal-install :/
17:46:39 <`Guest00000> i need to read some files throughout my program once. i don't care at which point their state is taken. can i use unsafePerformIO?
17:46:41 <sophiag> that can't be a good sign?
17:47:00 <Koterpillar> sophiag: what is telling you that?
17:47:01 <Welkin> you can specify which version of stackage to use with stack
17:47:09 <Welkin> and install the necessary ghc
17:47:14 <Welkin> try to use ghc 8
17:47:20 <sophiag> cabal is
17:47:26 <kadoban> `Guest00000: Why not just do it the usual way in main?
17:47:27 <Koterpillar> sophiag: don't run cabal
17:47:34 <sophiag> and i'm still getting the same error launching ghci from emacs
17:47:34 <Welkin> lol
17:47:41 <Welkin> http://docs.haskellstack.org/en/stable/README.html#quick-start-guide
17:47:45 <sophiag> i may need to reload emacs?
17:47:46 <Koterpillar> sophiag: stack runhaskell File.hs, or stack ghci; emacs (at least Spacemacs) picks up stack
17:49:51 <`Guest00000> kadoban: for simplicity?
17:50:35 <Gurkenglas> `Guest00000, you can put the whole program in the do block of your main if you want a global identifier pointing to the contents of the file
17:50:51 <sophiag> hmm emacs doesn't seem to be picking up stack. i wonder if i need to either restart or just eval my config?
17:51:11 <Welkin> relaunch
17:51:19 <sophiag> oh.... ghci -V shows the old version
17:51:25 <sophiag> which i had yum remove...
17:51:33 <Koterpillar> sophiag: yes, stack's ghc is somewhere else
17:51:35 <Welkin> that is the wrong command anyway
17:51:37 <Gurkenglas> (Would be nicer though if you could leave out the let in do blocks so do blocks looks exactly like the top level)
17:51:38 <`Guest00000> in my program, data read from those files determines 
17:51:49 <Welkin> everything needs to be prefixed with `stack ` to use stack
17:51:52 <`Guest00000> which files are opened next
17:52:14 <`Guest00000> so i would need to interface the pure part with the IO part
17:53:00 <sophiag> so now i have two versions of ghc? i thought that was why i had yum remove the old one
17:53:03 <Gurkenglas> do filenames <- readFile "metafile.txt"; filecontents <- mapM readFile filenames; doStuffWith filecontents -- no problemo
17:53:13 <Gurkenglas> (*`Guest00000)
17:53:38 <Welkin> sophiag: did you read about what stack is?
17:53:41 <Gurkenglas> make that "mapM readFile (lines filenames)" of course
17:53:42 <Welkin> http://docs.haskellstack.org/en/stable/README.html#quick-start-guide
17:54:12 <Koterpillar> sophiag: stack's GHC will not be directly available; you have to use 'stack ghci' and such to run it
17:55:10 <sophiag> so i need to change my haskell-mode hooks i think
17:55:49 <Koterpillar> (custom-set-variables '(haskell-process-type 'stack-ghci))
17:55:56 <Koterpillar> from a random tutorial https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md
17:56:19 <Cale> Gurkenglas: Be careful if the list of files is long, that might run out of file descriptors because lazy I/O.
17:56:59 <stoopkid> so when i clone repos from github and try to build them, ghc can't find any of the source files and i'm not sure where "sudo apt-get install haskell-platform" puts them. any ideas?
17:58:06 <Cale> (but you can always use something like strict Text and/or ByteString to solve that if it's likely to be an issue)
17:58:08 <delYsid> hmm, why is it that my toplevel function without a type signature is vastly more specific then what a separate ghci session (or lambdabot, for that matter) reports for the type?  Do callers affect type inference?
17:58:29 <Welkin> stoopkid: don't use the platform. Use stack instead. http://docs.haskellstack.org/en/stable/README.html#quick-start-guide
17:58:40 <Koterpillar> delYsid: yes
17:58:44 <Gurkenglas> Cale, is there a way to help that? Say, you want to merge the strings from all the files, needing to look at the current positions in all the files. Would you need to manually keep a cache in RAM, opening each file only when you need more?
17:58:46 <delYsid> @type fmap fold . whileM (gets $ not . null . snd)
17:58:47 <lambdabot> (MonadState (a1, t a) f, Monoid b, Foldable t) => f b -> f b
17:58:48 <c_wraith> delYsid: It's probably the monomorphism restriction
17:58:51 <Welkin> especially don't use anything from your distro's package manager
17:58:59 <`Guest00000> Gurkenglas: the needed filenames are partially contained inside some of needed files, so some "intertwining" of IO and pure parts is needed
17:59:02 <Welkin> it will be comically outdated
17:59:15 <delYsid> c_wraith: huh?
17:59:15 <c_wraith> delYsid: try writing it with an explicit argument and seeing if it recovers the general type
17:59:19 <`Guest00000> except i use unsafePerformIO and it's all simpler
17:59:37 <Cale> Gurkenglas: Well, if you needed to access things randomly, yeah, you might end up opening and closing them again. If you only need to go through sequentially, it's less trouble
17:59:42 <Gurkenglas> `Guest00000, you can just replace every use of unsafePerformIO with a bind in the do block
18:00:30 <`Guest00000> except i have a lost of small functions instead of do block
18:00:32 <`Guest00000> lots
18:00:47 <Gurkenglas> Inline em, then. That's what I'd do anyway
18:00:52 <Cale> `Guest00000: I strongly recommend not using unsafePerformIO in that way
18:00:55 <Gurkenglas> (As long as you only use each once)
18:01:13 <`Guest00000> Cale: please  explain why
18:01:18 <Gurkenglas> If you paste your code I could take a look at it
18:01:23 <c_wraith> delYsid: the monomorphism restriction requires type variables that are constrained by a type class to be monomorphic in bindings written without an explicit argument.  It's disabled in ghci and lambdabot, but enabled in .hs files
18:01:29 <stoopkid> Welkin: when i install slack it tells me: "WARNING: '/home/stoopkid/.local/bin' is not on your PATH." but "/home/stoopkid/.local/bin" is not a directory. is this not a problem?
18:01:42 <c_wraith> delYsid: Oh, the binding also has to lack an explicit type signature
18:01:54 <delYsid> c_wraith: yes, that helped.  This is very puzzling.
18:01:56 <stoopkid> stack**
18:02:35 <Welkin> stoopkid: nope
18:02:37 <c_wraith> delYsid: It's just a special case to prevent certain kinds of unexpected exponential runtimes. :)
18:02:39 <Welkin> stoopkid: just add it to your path
18:02:49 <Cale> unsafePerformIO should only be used in cases where 1) you expect the result to be the same every time the IO action is executed, 2) you don't care how often it is run, or whether it is run and 3) it doesn't allocate heavily limited resources which might become exhausted -- since you have no control over the sequence in which things are going to occur.
18:03:23 <stoopkid> Welkin: cool, thank you
18:03:35 <Cale> anything involving file I/O basically shouldn't go anywhere near unsafePerformIO
18:04:01 <c_wraith> delYsid: the full rule is: If a binding lacks a type signature, lacks explicit arguments, and the general type has a type variable constrained by a type class, the signature is monomorphised.  (Maybe only the variables constrained by the type class are monomorphised, I don't recall the exact rule)
18:04:04 <`Guest00000> Cale: because point 3?
18:04:13 <Cale> Mainly, but also point 1
18:04:29 <sophiag> koterpillar: i think that got it working, but it's still not recognizing Empty (capital E). isn't that in Control.Applicative?
18:04:36 <Cale> (files can change)
18:04:44 <`Guest00000> in my case point 1 doesn't matter as I don't care about the change
18:04:54 <c_wraith> delYsid: it exists because sometimes things that look like foo :: Num a => [a] result in exponential run time without it.
18:04:59 <`Guest00000> i want any file state 
18:05:21 <Koterpillar> sophiag: Hayoo doesn't know about it, where did you find it?
18:05:42 <sophiag> it's in learnyouahaskell
18:06:02 <sophiag> i was towards the end when my laptop died
18:06:04 <Koterpillar> sophiag: http://learnyouahaskell.com/chapters where?
18:06:11 <MarcelineVQ> sounds like a Maybe-like type, like   data Optional a = Full a | Empty
18:06:16 <c_wraith> sophiag: many things in that book expect you to have definitions from earlier in the text in scope.
18:06:18 <geekosaur> hayoo shows a few things called Empty, for me
18:06:23 <sophiag> http://learnyouahaskell.com/functors-applicative-functors-and-monoids
18:06:28 <sophiag> section on monoids at the end
18:06:35 <c_wraith> sophiag: is it defined somewhere else in the chapter?
18:06:36 <sophiag> folding over trees
18:06:42 <MarcelineVQ> Ah it's a leaf
18:06:49 <Koterpillar> sophiag: data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)  
18:06:50 <geekosaur> then Empty will be part of their tree type
18:06:57 <Koterpillar> sophiag: it's defined there
18:07:30 <sophiag> oh. lol
18:07:41 <sophiag> see, i haven't been following it well with my ghci screwed up!
18:07:53 <sophiag> ugh, well thanks for all the help playing sysadmin today
18:08:30 <Cale> `Guest00000: But then there's also the fact that it's just usually not so bad to do things in a sane way with a coherent and understandable ordering to it, and one which doesn't break all the nice properties we use when thinking about the behaviour of Haskell code.
18:08:32 <sophiag> the thing was i already had a bst type constructor and i thought that was the same one
18:11:05 <Gurkenglas> Aaaand he's gone
18:11:13 <dyreshark> RIP
18:11:43 <stoopkid> bleh, it still fails
18:12:56 <jchia1> Hey Axman6, are you the reddit Axman6? Regarding distributed-process, does it have the dependency semantics I mentioned?
18:13:49 <c_wraith> jchia1: I assume he is, as he's talked about distributed-process a couple times in here. :)
18:14:36 <jchia1> OK
18:44:57 <Rumia> So I have "data Tree zero one two= Leaf zero | ??? one (Tree zero one two) | Branch two (Tree zero one two) (Tree zero one two)"
18:45:21 <Koterpillar> Rumia: Stick
18:45:30 <Rumia> Nice.
18:45:34 <Rumia> Thanks!
18:45:40 <Entroacceptor> or make that last one "trunk"
18:45:55 * Koterpillar was joking and/or waiting for a refinement question
18:46:03 <Koterpillar> Rumia: also, Graft
21:18:00 <nevere> I am looking for a job queue implementation in Haskell to use with a web app, and it seems that the only maintained one seems to be yesod-job-queue. But it has the whole yesod framwork as a dependency. My main app uses spock framework. So Is it ok use yesod-jobs for this requirement?
21:34:25 <nevere> I am looking for a job queue implementation in Haskell to use with a web app, and it seems that the only maintained one seems to be yesod-job-queue. But it has the whole yesod framwork as a dependency. My main app uses spock framework. So Is it ok use yesod-jobs for this requirement?
21:42:18 <lambdacat> Does anyone know how to auto-derive aeson JSON instances when using opaleye and hence type aliases?
21:42:51 <lambdacat> For example, to use opaleye you create a type that is polymorphic over all its fields and then a type alias with the concrete types.
21:43:11 <lambdacat> But then you can’t use GHC.Generics to auto-derive JSON instances (that I know of).
21:44:25 <lambdacat> `data User’ a b = User’ { userId :: a, userEmail :: b }`, `type User = User’ Int64 Text`
21:47:19 <Rotaerk> does anyone have an example stack.nix file for a haskell project?
21:47:24 <Rotaerk> err shell.nix
21:48:40 <jle`> lambdacat: you can use geners to auto-derive json instances
21:48:45 <jle`> that's actually the preferred way these days
21:48:51 <jle`> s/geners/generics
21:48:53 <lambdacat> Yeah, I think I just figured it out.
21:49:00 <lambdacat> At least I did this:
21:49:15 <lambdacat> instance ToJSON (User’ Int64 Text)
21:49:25 <lambdacat> At least that worked, but there’s probably a better way.
21:50:01 <lambdacat> Ah, yes, I can achieve what I want...
21:50:16 <lambdacat> I want to use genericParseJSON and it looks like that’ll work fine with this approach.
21:50:59 <jle`> :D
21:51:29 <lambdacat> opaleye is pretty nifty!
22:09:47 <nevere> I am looking for a job queue implementation in Haskell to use with a web app, and it seems that the only maintained one seems to be yesod-job-queue. But it has the whole yesod framwork as a dependency. My main app uses spock framework. So Is it ok use yesod-jobs for this requirement?
22:11:49 <ezyang> nevere: What features do you need out of your job queue 
22:14:49 <nevere> ezyang: Basically I need my main program to continue without blocking. I also don't want to loss all the progressing jobs in case there is a server crash. So I need one with persistence (redis or postgres). Also need one with a monitor for jobs so that they does not take too much resources or run too much time.
22:15:46 <ezyang> it seems unlikely that yesod-jobs will integrate well with spock, but I'd be happy to be surprised 
22:17:38 <nevere> ezyang: So is there something else I can use. I have been looking since yesterday and the ones I found are hworker and jobqueue library. Both of them seems very expirmental and unused and unmaintained.
22:19:39 <nevere> ezyang: I gave hworker a try but ended up with some kind of runtime error...
22:24:29 <ezyang> well, if you want the jobs to be persistent you necessarily need something that integrates with your db setup 
22:27:13 <nevere> ezyang: Ok. is there one that will work with postgres?
22:27:40 <ezyang> dunno :/ 
22:39:15 <glguy> ezyang: Looking at that readDirStream code I'm also bothered that in the presence of async exceptions that dir entries might not be freed
22:39:38 <ezyang> it's probably buggy 
22:39:43 <ezyang> file a bug :) 
22:39:51 <ezyang> though... who maintains this package anyhoo 
22:40:57 <glguy> It think CLC might have it... also I see hvr helping out a lot if not being the actual maintainer...
22:41:31 <glguy> I'm putting together a candidate fix
22:47:19 <hololeap> > (flip $ fmap . (==))  filterM $ [1,2,3]
22:47:21 <lambdabot>  error:
22:47:21 <lambdabot>      • Couldn't match type ‘[a] -> m [a]’ with ‘[Integer]’
22:47:21 <lambdabot>        Expected type: (a -> m Bool) -> [Integer]
22:48:05 <hololeap> > filterM =<< flip (fmap . (==)) $ [1,2,3]
22:48:07 <lambdabot>  [[1],[1],[1,3],[1,2],[1,2],[1,2,3],[1],[1],[1,3],[],[],[3],[2],[2],[2,3],[],...
22:48:24 <hololeap> weird pattern. i wonder why it arises
23:24:42 <glguy> ezyang: As it happens that whole module is not async exception safe and directory handles require explicit close (no finalizers)
23:24:53 <glguy> so I'm going to worry about that in a different ticket
23:25:00 <ezyang> heh 
23:28:39 <glguy> The original code checks for EINTR and retries for readdir/readdir_r, but I don't see it documented that that can actually happen
23:39:44 <chetshah> Hello all, I am a haskell beginner and had a question regarding let/where syntax usage. 
23:39:53 <chetshah> Consider following:
23:40:19 <chetshah> sortInts xs = m : (sortInts (removeFirst m xs)) where m = minimumInt xs
23:40:50 <chetshah> here the where clause is evaluated before all other things, also is it evaluated every time it is used (twice in expression) ?
23:41:21 <chetshah> Are there specific evaluation rules when using let/where?
23:42:09 <kadoban> chetshah: Typically if you give something a name, it's only evaluated once, no matter how many times you use that name.
23:42:09 <opqdonut> chetshah: a name created with let/whare is evaluated at most once
23:42:21 <opqdonut> chetshah: same applies e.g. to named arguments
23:43:28 <chetshah> All expressions that have been given a name/pattern are evaluated at most once right?
23:43:34 <LordBrain> that is relying on the monomophism restriction 
23:43:44 <kadoban> chetshah: I question what you mean by "the where clause is evaluated before all other things", by the way. I suspect that's not really true.
23:44:16 <LordBrain> well i think he's noticing the laziness of : ?
23:44:36 <chetshah> kadoban: Ok got it, I used Ocaml  beforewhere it might have been the case.
23:44:46 <kadoban> chetshah: Assuming you don't mean stuff like ....  let ignored = x + 1 in (x + 1) + (x + 1) + (x + 1)  -- then yes.
23:47:20 <chetshah> Thank you guys, This is what I have understood:
23:47:25 <chetshah>  all names/patterns for let/where are evaluated once(on demand) and get memoized for future usages.
23:48:29 <kadoban> At most once, sounds right
23:48:57 <chetshah> @kadoban Thank you.
23:48:58 <lambdabot> Unknown command, try @list
23:49:48 <kadoban> Note that as opqdonut mentioned the same logic applies to really any way you give stuff a name. A top level binding, function arguments, etc.
