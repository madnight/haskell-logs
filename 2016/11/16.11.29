00:00:05 <sssilver> I can't, even though I'm a senior engineer, been programming for 15 years, know multiple programming languages fairly well, shipped a dozen systems that work in production and generate some money, etc
00:00:25 <benzrf> guillaum2: well, if `compare a b == EQ', then `a == b == True'...
00:02:16 <guillaum2> benzrf: not necessarely, exemple : `minimumBy (comparing snd) [("hello", 10), ("you", 10)]`
00:03:17 <guillaum2> (perhaps I oversimplified my initial statement)
00:04:04 <kadoban> sssilver: I'll look at it in a bit. I'd think I'd eventually be able to come up with at least an inefficient algorithm though, but no promises.
00:07:42 * hackagebot BlogLiterately-diagrams 0.2.0.4 - Include images in blog posts with inline diagrams code  https://hackage.haskell.org/package/BlogLiterately-diagrams-0.2.0.4 (BrentYorgey)
00:07:42 * hackagebot ede 0.2.8.6 - Templating language with similar syntax and features to Liquid or Jinja2.  https://hackage.haskell.org/package/ede-0.2.8.6 (BrendanHay)
00:21:08 <kadoban> sssilver[m]: I guess I'd just do it recursively, add a square to every possible position to the ones of (N-1) complexity, and then remove duplicates. And for N=1 it's fairly trivial. That'll blow up pretty bad, but then I suspect the bare number of the things blow up really bad at even moderate N anyway, so maybe it doesn't matter.
00:37:38 * hackagebot cudd 0.1.0.3.1 - Bindings to the CUDD binary decision diagrams library  https://hackage.haskell.org/package/cudd-0.1.0.3.1 (adamwalker)
00:37:52 <guillaum2> Hey, that's awesome, the fact that min/max are left/right biased means that `head (sortBy f l) == minimumBy f l' and `last (sortBy f l) == minimumBy f l`
00:43:12 <tsahyt> Hello! I've got some code that needs testing for which quickcheck seems to be a bad choice, as I don't really have a lot of useful properties to test, but rather specific test cases. what would be a good choice of testing framework here?
00:43:50 <oherrala> tsahyt: I have really liked doctest
00:44:00 <boxscape> trying to define bind in terms of Kleisli composition... So far I have `\x f -> (const x >=> f) undefined` - is the undefined necessary?
00:44:30 <oherrala> tsahyt: and for building test suite of unit tests and properties, check out Tasty
00:44:35 <tsahyt> oherrala: I'd prefer to keep the tests separate in a test suite though. can doctest do that?
00:45:16 <tsahyt> I did not know about Tasty. how does that compare to HSpec?
00:46:26 <oherrala> tsahyt: I think they solve the same problem
00:47:54 <boxscape> > (\x f -> (const x >=> f) undefined) [1..5] (replicate 4) -- it seems to work, at least
00:47:56 <lambdabot>  [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5]
00:49:14 <boxscape> oh, I just realized - I think I can a value of any type rather than a value of the polymorphic type a
00:49:24 <boxscape> > (\x f -> (const x >=> f) ()) [1..5] (replicate 4)
00:49:27 <lambdabot>  [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5]
00:49:31 <boxscape> that's a bit nicer, then
00:49:39 <tsahyt> hspec seems to be more specification oriented in its DSL, even if it technically does unit testing. 
00:50:03 <tsahyt> also I like the output tasty gives, so I'll give that a shot 
00:51:42 <tsahyt> I just stumbled across an old 24 days of hackage post about tasty. that got me thinking, will there be another run of this series this year? I always greatly enjoyed reading those, and they also serve as great refreshers later on when I get to use one of those libraries
00:57:38 * hackagebot sqlite-simple 0.4.11.0 - Mid-Level SQLite client library  https://hackage.haskell.org/package/sqlite-simple-0.4.11.0 (JanneHellsten)
01:07:39 * hackagebot patches-vector 0.1.5.4 - Patches (diffs) on vectors: composable, mergeable, and invertible.  https://hackage.haskell.org/package/patches-vector-0.1.5.4 (LiamOConnorDavis)
01:07:41 * hackagebot composition-tree 0.2.0.3 - Composition trees for arbitrary monoids.  https://hackage.haskell.org/package/composition-tree-0.2.0.3 (LiamOConnorDavis)
01:12:39 * hackagebot latex-formulae-image 0.1.1.2 - A library for rendering LaTeX formulae as images using an actual LaTeX installation  https://hackage.haskell.org/package/latex-formulae-image-0.1.1.2 (LiamOConnorDavis)
01:12:41 * hackagebot latex-formulae-pandoc 0.2.0.4 - Render LaTeX formulae in pandoc documents to images with an actual LaTeX installation  https://hackage.haskell.org/package/latex-formulae-pandoc-0.2.0.4 (LiamOConnorDavis)
01:12:43 * hackagebot dixi 0.6.9.2 - A wiki implemented with a firm theoretical foundation.  https://hackage.haskell.org/package/dixi-0.6.9.2 (LiamOConnorDavis)
01:17:39 * hackagebot wl-pprint-annotated 0.0.1.2 - Wadler/Leijen pretty printer with annotations and slightly modernized API  https://hackage.haskell.org/package/wl-pprint-annotated-0.0.1.2 (minad)
01:17:41 * hackagebot console-style 0.0.1.0 - Styled console text output using ANSI escape sequences.  https://hackage.haskell.org/package/console-style-0.0.1.0 (minad)
01:17:43 * hackagebot wl-pprint-console 0.0.1.0 - Wadler/Leijen style pretty printer supporting colorful console output.  https://hackage.haskell.org/package/wl-pprint-console-0.0.1.0 (minad)
01:19:18 <onintza> Why is mconcat :: Monoid a => [a] -> a instead of :: (Monoid a, Traversable t) => t a -> a?
01:24:01 <ertes> onintza: see 'fold'
01:24:12 <ertes> :t fold
01:24:14 <lambdabot> (Monoid m, Foldable t) => t m -> m
01:26:29 <onintza> oh, then what is the utility of mconcat?
01:30:15 <ertes> onintza: it's Monoid-specific instead of Foldable-specific, so the monoid can choose the most suitable associativity
01:31:14 <onintza> oh
01:36:10 <emanuel1989> Hello, I have a haskell problem that I can't fix - could anybody give me a hand with it? code and error here: http://pastebin.com/afT8q641
01:37:22 <pavonia> Use div instead of /
01:37:36 <tsahyt> also truncate instead of floor
01:37:52 <tsahyt> or wait, div should already take care of that
01:38:11 <tsahyt> so you wouldn't need floor then
01:38:53 <emanuel1989> I ended up with this:     | otherwise = (toDigits $ n `div` 10) ++ [digit] 
01:39:05 <emanuel1989> awesome - plenty more to learn...
01:39:10 <emanuel1989> thank you very much!
01:47:41 * hackagebot yaml 0.8.21.1 - Support for parsing and rendering YAML documents.  https://hackage.haskell.org/package/yaml-0.8.21.1 (MichaelSnoyman)
01:48:38 <ski> emanuel1989 : one alternative would be to use `divMod' instead of `div' and `mod'. that'll give you a pair of results
01:49:31 <ski> emanuel1989 : from an efficiency point of view, it's not good to repeatedly add stuff to the end of a list (it's quadratic in time, rather than the expected linear complexity)
01:51:15 <ski> one fix is to instead add to the front, and then do a single reverse on the whole result list
01:51:17 <emanuel1989> ski: so swapping it around would be better
01:51:21 <emanuel1989> yeah yeah
01:51:34 <emanuel1989> got the same idea when you said it
01:51:46 <emanuel1989> still learning basics of haskell
01:51:52 <ski> another is to use an accumulator, and add each new item to the front of that (and not reverse it at the end)
01:52:09 <emanuel1989>     | otherwise = (toDigits nestedN) ++ [digit]
01:52:14 <emanuel1989> where     (nestedN, digit) = n `divMod` 10
01:52:37 <emanuel1989> accumulator - sounds cool - need to read about it
01:52:46 <emanuel1989> VERY helpful - I really appreciate
01:57:41 * hackagebot pipes-key-value-csv 0.4.0.1 - Streaming processing of CSV files preceded by key-value pairs.  https://hackage.haskell.org/package/pipes-key-value-csv-0.4.0.1 (mjmrotek)
02:00:07 <ski> emanuel1989 : "accumulator" means that you keep track of the "current value, so far" of something, in this case your result list
02:00:43 <ski> typically you carry it around in an extra argument, which you return (possibly after a "finalization" of it, in the base case)
02:01:18 <ski> so, this'd entail making a "helpe/workerr" predicate, which carries around the accumulator, and does most of the work
02:01:24 <ski> s/helpe/helper/
02:02:21 <ski> while the function that you really wanted to write is the "wrapper" of this, that supplies the initial value of the accumulator (and possibly you could do the finalization (if any) in here instead, if you prefer)
02:07:23 <ertes> consider folds like (maybe _n _j), (either _l _r) and (foldr _f _z)…  is there a good english word for the values that go into those holes?  i would say "cases", but "case" is too overloaded
02:14:19 <merijn> ertes: eliminators?
02:15:16 <ertes> hmm
02:15:21 <merijn> Incidentally, do I understand correctly that I need to compile with -fllvm to use vector instructions?
02:17:42 * hackagebot websockets 0.9.8.1 - A sensible and clean way to write WebSocket-capable servers in Haskell.  https://hackage.haskell.org/package/websockets-0.9.8.1 (JasperVanDerJeugt)
02:17:44 * hackagebot websockets 0.9.8.2 - A sensible and clean way to write WebSocket-capable servers in Haskell.  https://hackage.haskell.org/package/websockets-0.9.8.2 (JasperVanDerJeugt)
02:18:02 <emanuel1989> ski: sorry - had a late scrum - reading your messages now
02:21:56 <emanuel1989> ski: thank you for explanation, I will give it a try later as I'm not a full time Haskell coder :) thanks once again! Need to run away, have a nice day
02:31:49 * ski . o O ( Scree-scry-scroo-scrum )
02:32:43 * hackagebot websockets 0.10.0.0 - A sensible and clean way to write WebSocket-capable servers in Haskell.  https://hackage.haskell.org/package/websockets-0.10.0.0 (JasperVanDerJeugt)
02:33:11 <ski> ertes : "operations", in the sense of (universal) algebra ?
02:37:22 <ertes> ski: hmm…  beginner audience
02:37:41 <ertes> CT experience not assumed
02:37:43 * hackagebot websockets-snap 0.10.2.0 - Snap integration for the websockets library  https://hackage.haskell.org/package/websockets-snap-0.10.2.0 (JasperVanDerJeugt)
02:37:59 <ertes> (although i'm building up to algebras)
02:38:31 <ski> "callback" ?
02:40:48 <merijn> ertes: I find eliminators rather fitting as folds are effectively Churhc (or is it Scott? I forget) encoded representations of the ADT and the different arguments correspond to different elimination rules for the constructors
02:41:30 <ertes> merijn: (it's church)
02:42:34 <ertes> ok, thanks for your thoughts
02:43:09 <ertes> +sharing
02:44:52 <ski> merijn : if you're thinking of "elimination rules" as in natural deduction, then `either' itself is the sole elimination rule for `Either'
02:45:09 <merijn> ski: I suppose
02:47:01 <ertes> merijn: that's actually the reason i'm a bit skeptical, because i don't know if "eliminator" makes sense in the recursive case
02:47:17 <ertes> *especially* with infinite lists
02:50:40 <merijn> Anyone know how I can get an Addr# out of a Ptr?
02:53:11 <ertes> merijn: perhaps by importing GHC.Ptr?
02:53:23 <ertes> @src Ptr
02:53:23 <lambdabot> data Ptr a = Ptr Addr#
02:54:01 <merijn> ertes: The constructor is not exported
02:54:17 <merijn> oh
02:54:20 <merijn> GHC.Exts has it
02:54:29 <merijn> \o/
02:54:37 <ertes> ah =)
02:54:46 <ertes> alternatively you could never construct a Ptr in the first place
02:55:34 <merijn> ertes: Well, I still want to use ForeignPtr to get finalizers :)
02:56:11 <merijn> ertes: But inside withForeignPtr I want the Addr# so I can see if I can abuse GHC.Prim for fun and profit ;)
02:56:31 <merijn> Also, I'm not entirely sure whether I can make the FFI return an Addr# directly
02:56:41 <ertes> you can also abuse the 'primitive' library for extra fun, extra profit and extra monads =)
03:27:45 * hackagebot lambdacube-compiler 0.6.0.1 - LambdaCube 3D is a DSL to program GPUs  https://hackage.haskell.org/package/lambdacube-compiler-0.6.0.1 (CsabaHruska)
03:47:46 * hackagebot yesod-bin 1.5.0 - The yesod helper executable.  https://hackage.haskell.org/package/yesod-bin-1.5.0 (MichaelSnoyman)
04:07:47 * hackagebot yesod-auth 1.4.14 - Authentication for Yesod.  https://hackage.haskell.org/package/yesod-auth-1.4.14 (MichaelSnoyman)
04:07:49 * hackagebot yesod-bin 1.5.0.1 - The yesod helper executable.  https://hackage.haskell.org/package/yesod-bin-1.5.0.1 (MichaelSnoyman)
04:07:51 * hackagebot yesod-core 1.4.27 - Creation of type-safe, RESTful web applications.  https://hackage.haskell.org/package/yesod-core-1.4.27 (MichaelSnoyman)
04:09:36 <cobreadmonster> Nobody's around?
04:11:22 <kuribas> cobreadmonster: haven't seen him
04:11:51 <kuribas> it's still early
04:12:18 <cobreadmonster> kuribas: nobody is somebody?
04:12:29 <kuribas> cobreadmonster: nvm, bad joke
04:12:34 <cobreadmonster> lol
04:12:38 <cobreadmonster> what time is it in the US?
04:13:15 <bartavelle> i need to write a log file parser in java, I want to die
04:13:23 <bartavelle> anybody knows some library that would alleviate my pain?
04:13:41 <bartavelle> people seem to use regexps :(
04:13:48 <lee1> 7:12AM
04:13:51 <merijn> bartavelle: Write a Haskell program that generates a java parser?
04:14:07 <merijn> Every problem can be made more fun by turning it into a compiler problem :)
04:14:41 <liste> bartavelle: https://github.com/sirthias/parboiled/blob/master/examples-scala/src/main/scala/org/parboiled/examples/json/JsonParser0.scala
04:14:49 <liste> though that's Scala :(
04:14:56 <liste> didn't find the Java version
04:15:18 <bartavelle> merijn, true :)
04:15:18 <liste> here https://github.com/sirthias/parboiled/blob/master/examples-java/src/main/java/org/parboiled/examples/calculators/CalculatorParser0.java
04:15:51 <bartavelle> liste, thanks!
04:15:54 <liste> if the grammar is regular this may help too https://github.com/VerbalExpressions/JavaVerbalExpressions
04:17:57 <winter> Is there anyone interested in a code review?
04:17:59 <winter> https://github.com/haskell/time/pull/55
04:18:12 <winter> I'm try to improve time's performance
04:18:49 <winter> But the code is a bit of old, welcome join and help me!
04:38:29 <tnks> so I read some of the writeups comparing type families to functional dependencies.
04:38:44 <tnks> but they probably biased me too heavily in favor of type families.
04:39:40 <tnks> is there a common context in which there's a good reason to choose functional dependencies over type families?
04:40:32 <tnks> the only one I can think of is what appears to be a syntactic annoyance of type families.
04:40:53 <tnks> but I'm not sure I should let syntax govern these kinds of decisions too strongly.
04:41:58 <ertesx> tnks: fundeps often come at a lot less syntactic noise
04:42:31 <ertesx> class Blah a where type Action a; …
04:42:50 <ertesx> something :: (Blah a, Applicative (Action a)) => a -> Action a a
04:42:53 <ertesx> compare:
04:43:02 <ertesx> class Blah m a | a -> m where …
04:43:09 <ertesx> something :: (Blah m a, Applicative m) => a -> m a
04:43:49 <tdammers> I also like how fundeps intuitively read as "a determines m"
04:44:28 <tdammers> the notation makes immediate sense even if you've never heard of fundeps
04:44:34 <tdammers> can't say the same about type families
04:47:02 <ertesx> also fundeps are more generic in that you can have bidirectional fundeps (a -> b, b -> a), although i haven't found a use case for that yet
04:47:41 <tnks> ertesx: yeah, right after typing that the syntactic annoyance was not that big a deal, I reconsidered that stance.
04:48:05 <tnks> for my case, I think functional dependencies actually make sense.
04:49:06 <tnks> I'm just making "classy" interfaces for a parameterized monad transfomer stack
04:49:27 <tnks> but I wanted to index a type with another type.
04:50:02 <ertesx> one advantage of type families is that you can keep *related* types simpler
04:50:06 <tnks> kind of like ether, but just at the app-level.
04:50:13 <ertesx> example:  class Blah b a | a -> b
04:50:42 <ertesx> now you want to parameterise a type on 'a', and of course 'b' follows from 'a', but you can't really capture that without type families, so you end up using *two* parameters
04:50:46 <ertesx> data Blubb b a = …
04:50:57 <ertesx> even though the 'b' will always follow from 'a'
04:51:35 <tnks> ertesx: right, I think this follows from whether having to specific both types is helpful or not, given how you plan on using the type class.
04:51:36 <ertesx> so it's a tradeoff
04:51:39 <tnks> yeah.
04:51:53 <tnks> I'm going to want to have the index specified pretty much always.
04:52:08 <tnks> so that gets me to this idea that type families are "faster"
04:52:18 <tnks> is there a performance problem with functional dependencies?
04:52:28 <ertesx> i suppose you could use existentials
04:52:42 <ertesx> data Blubb a = forall b. (Blah b a) => …
04:53:14 <visual> hey guys i wanna make a game like gta 4 but better, can you help pls
04:53:45 <ertesx> well, in this particular case ATs might actually be faster, because existentials are always an indirection
04:53:46 <tnks> the wiki has this blurb:  "For what I did the type families solution was considerably faster than the functional dependencies code at least in GHC-7.4.1. Thus the bug in ticket 5970 does no longer hurt me. (In GHC-6.12.3 the conversion to type families made the compilation even slower.)"
04:54:28 <tnks> but I wonder if that assessment is up-to-date (from GHC 6, to 7, to now 8)
04:54:49 <visual> hey guys, srs q ! what's better, linux or haskell ?
04:55:16 <ertesx> tnks: you'll have to benchmark to figure that out
04:55:35 <hpc> a tough question, but i would have to say peanut butter ice cream
04:55:48 <tnks> functional dependencies are used so many places, my guess is it can't be so bad it makes functional dependencies a non-starter.
04:55:54 <hpc> or possibly puppies
04:56:08 <ertesx> tnks: in general i would expect both approaches to have equal performance, but if you do work with existentials (to get rid of the redundancy), then you will sacrifice performance
04:56:11 <visual> hpc: i think you're making fun of me !
04:56:24 <hpc> :P
04:56:28 <stalk> hi
04:56:35 <tnks> ertesx: okay, I'm going to just go with fun-deps for now.
04:56:53 <visual> what's better, java or haskell
04:57:19 <stalk> So, I want to parse a markdown file, and automatically fill link urls.
04:57:36 <barrucadu> visual: You're in the Haskell IRC channel, we're a little biassed here.
04:58:16 <M-schmittlauch> visual: it depends
04:58:18 <stalk> I had a python script for that, that used a regex to find links. Now I want to do it in haskell, so I think using a parser combinator would be the right way
04:58:52 <visual> what does it depend on?
04:58:53 <tnks> visual: honestly, before asking a question like that, you really need to explain why you're asking that question at all.
04:58:57 <Tuplanolla> See if Pandoc already provides this, stalk.
04:59:08 <visual> tnks: cause i wanna know what's better java or haskell
04:59:15 <visual> to not waste time on learning an inferior lang
04:59:23 <stalk> Tuplanolla: the problem is that writeMarkdown . readMarkdown != Id_String using pandoc
04:59:27 <Tuplanolla> I suggest Forth instead, visual.
04:59:33 <Tuplanolla> It's obviously the best.
04:59:35 <stalk> and I want my script to only touch what is needed
04:59:37 <tnks> visual: how did you at all narrow the choices to just those two?
04:59:53 <Ferdirand> learning a language is never wasted, no matter how inferior it may be
05:00:06 <barrucadu> visual: What's better: jellyfish or mountains? Without any further context your question feels sort of like that.
05:00:06 <Tuplanolla> Doesn't it provide a separate link hunter, stalk? If not, Megaparsec is indeed the way to go.
05:00:07 <merijn> Ferdirand: meh...not 100% agreed :p
05:00:31 <stalk> Ah, no idea about specific "link hunter", let me see
05:00:53 <hpc> i would say learning a language is almost never wasted if it's got something different about it
05:01:01 <tnks> visual: anyway, the question should be answered not by asking us, but by asking yourself "what do you value personally, and what do you want to learn."
05:01:09 <hpc> (even then there are some exceptions)
05:01:27 <stalk> Tuplanolla: why megaparsec instead of for instance just ReadP ?
05:01:40 <merijn> stalk: ReadP has, in general, *awful* performance
05:01:49 <stalk> ah
05:02:21 <Tuplanolla> It's the successor of Parsec. There are of course other parser combinators too.
05:02:33 <merijn> stalk: (mega)parsec has a lot of machinery making it faster and more flexible. attoparsec in turns sacrifices some flexibility/error reporting for more speed
05:02:49 <hpc> most parser combinator libraries also have a generic interface in parsers
05:03:09 <hpc> so you might write your parser in that and see which backend suits best
05:03:22 <hpc> or pick the first backend that's good enough ;)
05:03:39 <stalk> Ok; I don't need anything particular, honestly. Performance isn't really important (as long as it's reasonable)
05:04:08 <merijn> stalk: Right, megaparsec is a decent default in terms of power/flexibility/performance
05:04:34 <merijn> stalk: I wouldn't use it to parse through GB of data, but data measured in megabytes it's probably just fine
05:04:35 <stalk> So, I have two types of links that I want to be able to parse, `[text](link)` and `[text]`. The second is not valid markdown but it's easier to write.
05:04:47 <hpc> someday we'll have gigaparsec for that ;)
05:04:49 <stalk> merijn: OK, I'll go for this one
05:04:57 <merijn> hpc: You mean attoparsec? :p
05:05:20 <merijn> stalk: Also, make sure to use the Text interface, not String :)
05:05:25 <hpc> it'd take millions of attoparsec parsers to operate on even a single byte!
05:05:28 <puregreen> stalk: the second is valid Markdown provided that there's a link reference for it somewhere
05:05:47 <stalk> But markdown also specifies something like `[link][ref]` or `^[link]` for notes
05:06:30 <puregreen> yes
05:06:42 <puregreen> (though in Pandoc it looks like [^link], I think)
05:07:28 <stalk> So, what I thought was just specify a grammar to parse "[name](link)" and "[name]", and automatically adds the "(link)" in the second case
05:08:28 <stalk> but on "[name](link)", the parser could start with the second form and not try the first. And similar problems could arise for the other ways that square brackets can appear.
05:09:17 <stalk> So, the most logical idea is to somehow specify that the second form can only be used if there is no opening parethesis at its end.
05:09:26 <stalk> So, I'm not sure how to do all that
05:09:28 <puregreen> I don't understand why you want to do that instead of adding a link reference for all special links, like this: http://lpaste.net/347773
05:09:30 <visual> so i should ogo with java then?
05:09:47 <merijn> stalk: You could just parse [name] and parse an optional link after that
05:10:05 <merijn> stalk: tbh, if you look at a parser combinator tutorial that's actually all pretty trivial :)
05:10:19 <stalk> mmh,maybe
05:11:02 <stalk> puregreen: I'm not sure I follow
05:11:43 <stalk> I'm afraid I'd need to pretty much implement the whole markdown grammar in my parsers to not have to specify things "negatively"
05:12:29 <merijn> stalk: Naah
05:12:50 * hackagebot implicit 0.1.0 - Math-inspired programmatic 2&3D CAD: CSG, bevels, and shells; gcode export..  https://hackage.haskell.org/package/implicit-0.1.0 (Juri_)
05:12:56 <merijn> stalk: I would just specify the link and skip every token (whitespace separated thing) that's not a link
05:12:57 <Tuplanolla> You can probably get away with just code block and paragraph parsing, stalk.
05:13:21 <stalk> Fair enough, I'll try with megaparsec and see what comes up
05:13:56 <stalk> thanks, guys!
05:14:23 <ertesx> visual: have you written a hello-world program in java?
05:17:08 <merijn> stalk: Hell, you could just patch pandoc's markdown parser. It's pretty easy to modify
05:17:24 <visual> ertesx: no
05:17:36 <stalk> I think it would make for a good exercise to start from scratch anyway
05:17:52 <ertesx> visual: have you written a hello-world program in haskell?
05:18:06 <visual> ertesx: no
05:18:14 <ertesx> visual: then write a hello-world program in both, and see which one feels better
05:18:15 <visual> i only know pascal
05:18:23 <stalk> and given that I want my parser to spit exactly what it has been given, modifying pandoc's parser might be cumbersome
05:18:26 <stalk> anyway, gtg
05:18:27 <Tuplanolla> You'll be pleasantly surprised, visual.
05:18:33 <visual> but i dont need a hellow world, i wanna make a game like gta 4
05:18:54 <ertesx> visual: and writing hello world is your first step toward that goal
05:19:16 <visual> no i think ill quit
05:19:17 <visual> good day sir
05:19:52 <Tuplanolla> Should've just recommended Forth.
05:22:23 <ongy> not sure if troll, or just weirdo
05:24:13 <Ferdirand> ongy: Obvious troll who wanted to see if this channel could uphold its reputation for unbreakable patience.
05:24:58 <ertesx> some trolls allow themselves to be untrolled, if haskell is just interesting enough =)
05:25:29 <ertesx> s/untrolled/detrolled/
05:26:45 <ertesx> "wait, there is actually something interesting in this channel?  imma stop trolling and listen seriously for a monad"
05:26:48 <ertesx> s/monad/moment/
05:26:49 <ertesx> wow…
05:27:01 <ertesx> i duck today
05:27:02 <ertesx> SUCK!
05:27:17 <Tuplanolla> That was still technically correct.
05:27:36 <ertesx> i'm glad that typo wasn't one key further
05:27:49 <SolitaryCypher> > imma stop trolling and listen seriously for a monad; which is how I learnt monads
05:27:52 <lambdabot>  <hint>:1:52: error: parse error on input ‘;’
05:40:08 <emanuel1989> is anybody experiencing problems with installing criterion today? - my error: http://pastebin.com/0Zh62rzW
05:57:12 <osa1> does TH code need to run in target platform rather than the host platform? I'm wondering if there's a theoretical problem with TH and cross compilation. as far as I understand it's just an implementation problem because TH in theory could just run in the host platform and then generated code would be compiled for the target platform.
06:03:39 <wamaral> I'm playing with lambdabot (on my machine) but I can't get it to eval stuff, something about mueval-core not able to load some module "L" - someone familiar with that?
06:06:28 <merijn> osa1: There's a bunch of discussion on this
06:06:37 <merijn> osa1: But you'r right that it should run on the target platform
06:06:39 <osa1> where?
06:06:55 <osa1> it should run on the host, not target
06:06:56 <merijn> osa1: ghc-devs and #ghc mostly
06:07:11 <merijn> osa1: Running on the host would break lots of things too
06:07:30 <merijn> osa1: i.e., when using it to generate stuff based on the targets word size, etc.
06:07:55 <osa1> how do you do that in a library? I'd expect that to work if done properly
06:08:12 <Tuplanolla> This suggests that programs should have three execution phases.
06:08:44 <merijn> osa1: How do you do what? Base things on the the word size? Keep in mind that things like Foreign.C.Types and the sizes of Int, etc. are architecture dependent
06:08:59 <merijn> osa1: So cross-compiling from 64bit to 32bit or vice versa need to account for that
06:09:05 <osa1> Tuplanolla: why three?
06:09:05 <merijn> osa1: Hell, even on the same architecture
06:09:26 <merijn> osa1: Because, for example, CInt is not the same size on 64bit linux as it is on 64bit OSX
06:09:26 <Tuplanolla> osa1: Compile-time phase on the host, compile-time phase on the target, runtime phase on the target.
06:09:42 <osa1> Tuplanolla: there's no compile time phase on target in my scheme
06:09:52 <osa1> Tuplanolla: just compile time phase on host and runtime on target
06:09:58 <merijn> osa1: Which is why your scheme can't work :)
06:10:02 <osa1> :O
06:10:21 <merijn> At least not without losing currently possibly functionality
06:10:24 <osa1> I'm really confused. why do we need compile time phase on target?
06:10:46 <osa1> I mean, let's say word size etc. are done correctly using some kind of library other than base
06:10:48 <merijn> osa1: Because TH can, at compile time, generate stuff based on properties of that architecture
06:11:19 <merijn> osa1: Well "let's say...done correctly using some kind of library" <- no one has managed to produce such a library, so...
06:12:53 * hackagebot mackerel-client 0.0.0 - An API client library for Mackerel (https://mackerel.io)  https://hackage.haskell.org/package/mackerel-client-0.0.0 (itchyny)
06:13:39 <Tuplanolla> Foreign things make it extra hairy.
06:14:31 <ertesx> the best way to compile for Y on X is to emulate Y on X =)
06:14:42 <bollu> if I have a persistent entity, how do I get the key from it?
06:14:48 <bollu> I have an entity, and I want to run an update on it
06:15:34 <bollu> http://lpaste.net/8552049097798844416#line77 
06:15:48 <bollu> I want to write bumpUserCount. I don't know how to get "key"
06:16:00 <ertesx> merijn: i would expect finiteBitSize to return the bit size of the host platform in TH
06:17:53 * hackagebot mackerel-client 0.0.1 - An API client library for Mackerel (https://mackerel.io)  https://hackage.haskell.org/package/mackerel-client-0.0.1 (itchyny)
06:22:05 <bollu> how do I create a persistent Key?
06:22:48 <bollu> like, if I have an object, how do I get the Key out of it in persistent?
06:25:29 <bollu> okay, if I know something is a primary key, how do I get a Maybe a for that particular primary key?
06:25:41 <bollu> (since a primary key can have at most 1 object against it)
06:26:36 <riaqn> Hey, how do I express that, 'class A x y' must also satisfy 'class B y'?
06:26:57 <riaqn> that is, class A contains class B, so to speak.
06:27:27 <riaqn> ahh, sorry, shoule be the reverse.
06:27:53 <ertesx> riaqn: class (B y) => A x y
06:28:10 <ertesx> just like:  class (Applicative m) => Monad m
06:28:35 <riaqn> ertesx: ah huh, thank you!
06:28:38 <ertesx> (the parentheses are a style choice)
06:28:45 <ertesx> class Applicative m => Monad m
06:28:59 <riaqn> ertesx: so now in instance of A, we can use functions from class B?
06:29:08 <ertesx> riaqn: on B, yeah
06:29:12 <ertesx> whoops
06:29:16 <ertesx> riaqn: on 'b', yeah
06:29:23 <ertesx> uhm
06:29:29 <ertesx> riaqn: on 'y', yeah
06:29:34 <riaqn> ertesx: cool! thank.
06:29:49 <ertesx> goddamnit…  i should stop IRCing for today =)
06:32:16 <hexagoxel> can i have dependencies in both directions across the FFI? what flags do i need to pass so the foreign object file is linked correctly?
06:32:37 <merijn> hexagoxel: What do you mean?
06:32:54 * hackagebot mackerel-client 0.0.2 - An API client library for Mackerel  https://hackage.haskell.org/package/mackerel-client-0.0.2 (itchyny)
06:33:16 <merijn> hexagoxel: You mean have the C binary link against on haskell exported stuff and the same haskell library to C exported stuff?
06:33:19 <hexagoxel> yes
06:33:31 <merijn> hexagoxel: The good news is: Yes
06:33:38 <merijn> hexagoxel: The bad news is: It's platform dependent
06:33:56 <jchia_1> I'm trying to understand whether to choose fclens package or lens package. Reportedly lens lets you use "van Laarhoven lens" (https://github.com/ekmett/lens/wiki/FAQ#good-enough) but I don't know what that means. lens seems more powerful but fclens seems simpler. I'm not sure which one I need. Could someone help me choose? I mostly need to transform stuff deep in some datastructure, possibly altering the local structure (modify to a different type), possibl
06:34:03 <merijn> hexagoxel: On OSX it should "Just Work (TM)", prepare for an especially bad time on linux
06:34:11 <hexagoxel> merijn: aww
06:34:13 <merijn> hexagoxel: Depending on the linker you distro ships with
06:34:37 <drifter[m]> Is Haskell suitable as a first language?
06:35:04 <hexagoxel> merijn: can i not tell ghc to include the foo.o when linking the library?
06:35:12 <merijn> hexagoxel: The old pre-gold linker is especially painful. It's single pass, so mutually dependent libraries need to be listed multiple times in the exact right order to work
06:35:20 <merijn> hexagoxel: Yes, but GHC just calls the system linker nowadays
06:35:24 <tdammers> drifter[m]: I don't have a lot of data to base this on, but I believe it is, and I've heard of good results from others
06:35:28 <jchia_1> drifter[m]: Depends on your goals
06:35:35 <ongy> it may even be easier to learn haskell as first language, but I'm unsure how much it will help you learn other languages later. So if you need a tool, I think it's good. If you want to get int programming in general and want to learn a bunch of languages, I'm not sure
06:35:37 <merijn> hexagoxel: And the standard linux linker is a pain for mutually dependent libraries :)
06:36:08 <tdammers> drifter[m]: I recommend learning more than one language eventually anyway, so it doesn't matter *that* much which one you learn first
06:36:29 <merijn> hexagoxel: On the bright side, linking mutually dependent libraries/object files shouldn't really differ between 100% C objects and a mix of haskell/C
06:36:51 <hexagoxel> merijn: is linking multiple object files the same as linking multiple static libraries?
06:36:54 <drifter[m]> If you had to recommend one book for learning Haskell, which would it be?
06:37:00 <merijn> hexagoxel: So the FFI, etc. here is a red herring.
06:37:06 <merijn> hexagoxel: I'm not 100% sure, tbh :)
06:37:13 <riaqn> another question  How do I express that, given class A x y, I can actually implement an instance for class B y?
06:37:33 <riaqn> by instances from class A x y.
06:37:37 <hexagoxel> merijn: perhaps the best question is: can you point me to any sample setup doing anything like this on linux?
06:37:45 <drifter[m]> I tend to lose focus/motivation a lot, so it needs to be engaging.
06:38:00 <jchia_1> drifter[m]: haskellbook.com
06:38:04 <hexagoxel> because i have been trying to throw linker options at cabal/ghc for some time without any success.
06:38:30 <merijn> hexagoxel: tbh I let a colleague sort it out :p
06:38:36 <merijn> hexagoxel: What errors are you getting?
06:38:46 <merijn> hexagoxel: And are you familiar with ldd/nm? :)
06:38:52 <tdammers> jchia_1: I believe for your intents and purposes, a good enough explanation of van Laarhoven lenses is that they're theoretically sound; there are few kludges, if any, in lens, which, among other things, allows lens to define most of its types as mere aliases, which in turn means you can create lenses without actually depending on anything (not even lens)
06:40:05 <hexagoxel> merijn: should me move to -overflow?
06:41:16 <jchia_1> tdammers: practically, what happens when I use a library that's has 'kludges'? What kind of kludges?
06:41:54 <tdammers> jchia_1: mostly just that you get dependencies that are avoidable, or that you can't have certain things that might be useful
06:42:43 <tdammers> jchia_1: also, have you read the SO post linked from the lens FAQ?
06:42:46 <tdammers> http://stackoverflow.com/questions/5767129/lenses-fclabels-data-accessor-which-library-for-structure-access-and-mutatio/5769285#5769285
06:44:46 <jchia_1> tdammers: I found it on google and read it a little bit. It lists fclabels, data-accessors, lenses and data-lens, but not lens, so I only skimmed it.
06:45:19 <jchia_1> Do you think it'll help me decide?
06:46:36 <tdammers> unless you're writing a library that needs to avoid big dependencies, or something that needs to minimize dependencies for other reasons, I'd just roll with lens
06:47:00 <lpaste> bollu pasted “code-review-noob-persistent-spock” at http://lpaste.net/347809
06:47:27 <bollu> can I please have a code review? http://lpaste.net/347809#line11
06:47:31 <puregreen> jchia_1: I have a somewhat more up-to-date comparison of lens libraries here: https://guide.aelve.com/haskell/lenses-sth6l9jl
06:47:31 <bollu> it's a simple spock and persistent app
06:47:38 <bollu> I think I'm writing utterly un-idiomatic code
06:47:41 <ski> @where lenses
06:47:42 <lambdabot> <http://twanvl.nl/blog/haskell/overloading-functional-references>,<http://cdsmith.wordpress.com/2011/04/26/composing-state-with-functions-and-lenses/>,<http://patternsinfp.wordpress.com/2011/01/31/
06:47:42 <lambdabot> lenses-are-the-coalgebras-for-the-costate-comonad/>,<http://stackoverflow.com/questions/5767129/lenses-fclabels-data-accessor-which-library-for-structure-access-and-mutation>
06:47:42 <bollu> considering how weird my code looks
06:48:13 <bollu> so can someone please go through the code and tell me how to improve it?
06:48:22 <bollu> much appreciated
06:48:36 <Tuplanolla> I looked at it, but you're doing things I know very little about, bollu.
06:48:38 <jchia_1> thanks, tdammers & puregreen
06:49:02 <bollu> Tuplanolla: :( I was hoping for the web people to be around
06:50:05 <jchia_1> thanks, ski. what does @where do?
06:51:00 <jchia_1> is it like some kind of map lookup with topic as a key?
06:52:55 * hackagebot fmt 0.0.0.1 - Nice formatting library  https://hackage.haskell.org/package/fmt-0.0.0.1 (Artyom)
06:53:04 <ski> jchia_1 : yes, if you happen to know an interesting/appropriate key
06:53:09 <bollu> https://www.reddit.com/r/haskell/comments/5fj0i7/code_review_request_for_a_simple_webapp_with/
06:54:42 <jchia_1> ski: can you list the keys?
06:55:31 <ski> jchia_1 : not that i know
06:55:50 <jchia_1> ski: yeah, i tried @keys and it didn't work
07:11:03 <codedmart> How do others handle this. If I have a model `data` say `User`. All the fields are the same for a `User` when they are first created other then `_id` field is not present. Do you just use `Maybe` or is there another trick that I am not thinking of. I would like `id` to not be `Maybe` in all situations other then when the `User` first is created.
07:12:49 <ongy> you can make it User a { _id :: a }, not sure if that's the best
07:12:56 * hackagebot chronos 0.3 - A time library, encoding, decoding, and instances  https://hackage.haskell.org/package/chronos-0.3 (andrewthad)
07:14:24 <ski> or `data User f = MkUser {_id :: f ID,...}', with `f' initially being `Maybe' (or `Const ()'), then changing to `Identity' .. though it's not clear it's worth trying something like this here
07:15:00 <ski> the simplistic alternative is to just initialize `_id' with an error, and don't look at it until you replace it with a real value
07:15:13 <ski> (or perhaps a dummy value of some sort)
07:15:19 <ongy> ski: what's the advantage of yours over mine?
07:16:55 <ski> ongy : one can wrap more fields with `f'. with your, assuming they have different types, you'd need more parameters
07:18:38 <EvanR> codedmart: trick, put a functional future value in for the ID
07:19:18 <codedmart> EvanR: Not sure I follow.
07:19:32 <codedmart> example or link?
07:19:33 <EvanR> this is the same as putting error except that it wont crash
07:19:41 <EvanR> which may or may not be a good idea, practically
07:20:10 <codedmart> I use Servant, which expects a `User` in the req body as json.
07:20:50 <codedmart> So if Servant can't `FromJSON` it, it doesn't even get to my code.
07:21:05 <EvanR> when or how will your ID be determined?
07:21:34 <codedmart> EvanR: I set it before I save it in the DB, then it is not allowed to be changed.
07:22:44 <EvanR> why is there a period where theres no ID?
07:23:40 <EvanR> you dont have a createUser :: ID -> User ?
07:23:51 <codedmart> EvanR: When the user is first created I get the initial data without an ID.
07:24:18 <EvanR> yeah i would think thats a different data type
07:24:42 <EvanR> one of the nice things about types is that you *know* everything is there
07:24:53 <EvanR> its what tells you when stuff isnt there
07:24:53 <codedmart> Really in the case of a lot of my models the `_id` is the only different.
07:25:30 <codedmart> So I feel like having a `NewModel` and `Model` with all the same fields but `_id` is redundant.
07:25:35 <EvanR> to conveniently represent one type as the other type without the ID field, theres extensible records
07:25:48 <EvanR> or the other way around
07:26:21 <EvanR> but youre right in thinking theres only one type and the field is a Maybe is not good
07:26:38 <EvanR> (for this purpose)
07:26:58 <codedmart> So you are saying I should check out extensible records?
07:27:15 <EvanR> maybe, i havent seen anything in haskell thats too compelling
07:27:23 <codedmart> Ah
07:28:06 <EvanR> your getting data from json which is logically a different type, a "pre-user record"
07:28:25 <codedmart> Yeah
07:28:26 <EvanR> the user record which forgot an ID
07:28:47 <EvanR> so my original suggestion wouldnt work, that was assuming there logically is an ID here
07:29:50 <EvanR> codedmart: so, im thinking the "data record PLUS id field" is a pattern to exploit, the ID is kind of an artificial augment anyway
07:30:27 <EvanR> like, type WithID a = (ID, a)
07:30:47 <EvanR> and nothing inherently has IDs baked in, but then i dont know if your database layer would like it
07:30:49 <ahihi> this seems similar to what persistent does with its Entity wrapper
07:31:15 <codedmart> EvanR: Yeah, that is a good thought. I will have to play with that. Thanks!
07:31:50 <EvanR> this is a form of "poor-mans extensible records"
07:33:06 <ertesx> codedmart: i don't treat user ids as part of users
07:33:23 <ertesx> (UserId, User)  -- users together with ids
07:33:48 * ski . o O ( "i don't treat algebra carriers as part of algebras" )
07:34:16 <EvanR> ertesx: that logically extends to not think anything is really part of User, which is interesting
07:34:44 <EvanR> as part of EAV, or OOP, or whatever, the only part that IS a part of the user is the ID
07:34:52 <EvanR> the rest is augmentatios
07:35:04 <c_wraith> The user is that person over there.  Not anything in my software.  It's not like this is Tron.
07:35:25 <ertesx> EvanR: not quite, because you might still ask what makes two users equivalent…  of course if you just stuff all users into a single equivalence class, your application becomes really really simple =)
07:35:39 <EvanR> what is an "equivalent user" ?
07:35:54 <ertesx> EvanR: the answer to that question defines users
07:36:06 <ski> a user that behaves, or can be coerced into behaving, the same as another user ?
07:36:10 <EvanR> users are objects or entities in the database, so you compare the ID
07:36:30 <ertesx> (i'm not talking about the phsyical user, but the software's view of a user)
07:36:39 <EvanR> you modify all their attributes regularly, so math doesnt really work the way youre saying with them
07:37:06 <EvanR> when all their attributes are equal, no one is going to think they are the same user
07:37:10 <ertesx> you're conflating the notions of identity and equivalence
07:37:16 <codedmart> ertesx: so you use that for all models. Model = (ModelID, ModelData)?
07:37:37 <ertesx> codedmart: yeah, pretty much
07:37:51 <EvanR> weve had two John Smiths in the databse before, with the same permissions
07:37:58 <EvanR> its not equivalent
07:38:28 <ertesx> EvanR: they are not identical, and your application might not need equivalence…  but what defines the features of a user can still be defined in terms of an equivalence relation
07:38:39 <EvanR> i call bullshit
07:39:29 <ertesx> Map UserId User  -- problem: you have redundancy
07:39:39 <EvanR> why?
07:41:39 <ertesx> because you included user ids in User
07:42:00 <EvanR> codedmart: really, this is going to happen again with a different field, the type is written to tell you what this section of the code really will expect, likewise any report about a users full data is another type
07:42:20 <EvanR> ertesx: ok, i was suggesting not
07:42:42 <EvanR> codedmart: and exactly whats in a users literal table is yet another
07:42:50 <EvanR> lots of types yay
07:42:54 <ertesx> EvanR: … not…?
07:43:06 <EvanR> yes we suggested the same thing
07:43:17 <ertesx> ah, ok then =)
07:43:29 <EvanR> but i see its a symptom of something greater
07:43:31 <ertesx> but then why did you call bullshit?  we seem to agree
07:43:42 <EvanR> i wasnt referring to (UserId, User)
07:43:56 * ski . o O ( `{m :: Map UserId User | forall (uid :: UserId) (u :: User). lookup uid m = Just u => _id u = uid}' )
07:44:33 <EvanR> what language is that
07:44:53 <ski> an imaginary one
07:44:54 * ertesx .o( -XDependentTypes )
07:45:16 <EvanR> with dependent types and sufficient extra convenience you could do extensible records
07:45:25 <codedmart> EvanR ertesx so the Model = (ModelId, ModelData) is a good solution in your opinions?
07:45:35 <EvanR> for you specific issue i think so
07:45:44 <ertesx> codedmart: yeah, although i wouldn't bother defining Model
07:45:57 <EvanR> but the "in my mind there is a complete user, and i will sometimes not have all that data together at once" will happen again
07:46:06 <ertesx> let the feature type be called Model and the identifier type be called ModelId (or even Id Model)
07:46:11 <EvanR> and my observation about that is, thats nothing to do with the User type
07:46:27 <EvanR> s/User/WhateverType/
07:46:48 <ertesx> then use (UserId, User) or (Id User, User) where you need named users
07:47:11 <ertesx> the type family approach has one advantage:  you can abstract over feature types:  (Id a, a)
07:47:15 <EvanR> instead of expecting to get a User from your form or page, youre expecting something specific about that page
07:47:47 <EvanR> and parts of it may coincide with a literal field, or not (think password entry)
07:47:57 <ertesx> (perhaps call it Key instead of Id)
07:48:01 <EvanR> youre not submitting a user when you enter a login
07:48:19 <EvanR> even though one of the fields is called the same
07:49:20 <codedmart> EvanR: I should have used something other then User. You are right. User is quite different then Signup or Login. But all my other models the only difference is the addition of an id.
07:49:41 <EvanR> right, even in rails, i see stuff like that as a coincidence
07:49:55 <EvanR> the types are really about context specific expectations
07:50:12 <EvanR> in rails, i do a lot of redundant looking copying of fields over, even when theres only one difference
07:50:17 <EvanR> or two
07:50:23 <EvanR> no shenanigans to hide all that
07:50:28 <codedmart> Do you think it is better to just be explicit at the cost of being redundant then?
07:50:46 <EvanR> in my case i dont think its redundant
07:51:03 <EvanR> "its exactly the same as this other thing, except one field" is true, until its not
07:51:27 <EvanR> which lead me to believe, it never was
07:51:46 <ertesx> what are Signup and Login?  form data?
07:51:54 <EvanR> agile haskell, call today
07:52:01 <codedmart> Yeah, well anyway thanks again for the conversation everyone. I will mull it over.
07:52:08 <codedmart> ertesx: yes
07:53:16 <EvanR> merging things which coincidentally look the same leads to a lot of maintenance hell or debugging hell, or insanity, ime
07:53:24 <sabastiaan> Does anybody know how you can build and run an stack project from within spacemacs? 
07:53:29 <sabastiaan> Sorry if this is the wrong place to ask
07:53:43 <javjarfer> ertes, at the end I'm going to leave the parser as it is for now, using the normal combinator <?> as keeping it Applicative, because for the thing "I wanted" the only way I saw was chaging the Applicative Functor to another kind of functor 
07:53:45 <ertesx> codedmart: i would go with a Key family then, and just not define Key instances for Signup and Login
07:54:39 <plakband> In conduit, I need the contents of a file along with its filepath. What's the recommended way of turning `awaitForever sourceFile :: Conduit FilePath ResIO ByteString` into a `Conduit FilePath ResIO (FilePath, ByteString)`?
07:54:42 <javjarfer> ertesx, and I want to explore that posibility but, I want to do it in a more formal way
07:56:19 <ertesx> javjarfer: there are relaxed versions of Applicative like Apply from the semigroupoids package, but they still have that "naturality" property…  if you give it up, reasoning becomes difficult
07:56:51 <ertesx> javjarfer: i'd say if you can't express it as an applicative functor, then something must be deeply wrong with your approach
07:57:09 <ertesx> or should i say: deeply unnatural
07:57:22 <c_wraith> boo hiss pun
07:58:34 <ertesx> javjarfer: it's like reducing monoids to magmas basically…  a rather undesirable generalisation
08:00:14 <Guest88488> when I use 'stack build' it builds in a directory like '.stack-work/dist/2672c1f3/build/..' Anyway I can change that to something more convenient and permanent?
08:00:30 <Guest88488> The build also results in some c header files which I need to include in another program
08:03:44 <javjarfer> ertesx, what is wrong with the approach is that you can't have a natural transformation that combine the Parsers (Applicative functors) because the fact of combining them, makes them incomplete, in the sense that they need to be feed with a new "message and id"
08:05:13 <javjarfer> ertesx, so, if the fact of combining them, produce a type that isn't itself them isn't the natural transf <*>
08:06:08 <javjarfer> ertesx, and that is the point I stopped and said... okay I need to stop with this and learn a bit more xD
08:06:51 <ertesx> i… don't even really understand what that means…
08:07:41 <hackrilege> Hi, I have been reading about parameter roles to try and understand this paste; http://lpaste.net/347487
08:07:58 * hackagebot cabal-debian 4.35.5 - Create a Debianization for a Cabal package  https://hackage.haskell.org/package/cabal-debian-4.35.5 (DavidFox)
08:08:31 <hackrilege> I'm struggling to manipulate (eg do arithmetic) the Type level Nat Succ...
08:09:33 <shapr> hackrilege: have you read https://wiki.haskell.org/Type_arithmetic ?
08:09:40 <hackrilege> I suppose that was not the intended use, but then it does not behave as I desire.
08:10:12 <hackrilege> Aha, thanks shapr
08:10:28 <geekosaur> that typeclass does more than just type level Peano numbers
08:10:43 <hackrilege> Oh really? How so?
08:11:28 <geekosaur> its called Vec (but should be called List probably) for a reason, and likewise uses Nil and Cons for a reason. it's a type-level-length list
08:11:49 <geekosaur> if you just want Nat, that's a bit simpler
08:12:29 <hackrilege> Actually I wanted the Type Nat to indicate the degree of nesting in Free []
08:12:48 <hackrilege> This was just an example I was given to get me started....
08:14:04 <hackrilege> The idea was that I could include a list of length n in a nesting of lists of depth n
08:15:22 <hackrilege> I guess this Vec type is such a list, but I'm not so familiar with GADTs and stuff, can anyone help me with the next step?
08:15:36 <javjarfer> ertesx, (sorry I'm thinking if I have explained myself bad or is something wrong with my reasoning, just a second xD)
08:15:39 <geekosaur> ok, so this is a reasonable starting point for that, but if you are still struggling with type level Peano numbers then you want to start even simpler and figure those out, before trying to work out type-level-length lists
08:15:53 <kuribas> How do I make an url link in haddock?
08:16:01 <geekosaur> (which may then be obvious to you, and also how to adapt it)
08:16:56 <hackrilege> Ok, I'll read up a bit more and come back after making an attempt at a paste
08:18:22 <byorgey> kuribas: <URL>
08:20:50 <kuribas> byorgey: what if I want to have words instead of the url?
08:21:19 <kuribas> like [link to google](http://google.com)
08:21:23 <mettekou> What's the recommended way of dealing with monad transformer stacks which both include StateT and share some fields in their state? Use type classes to make operations of one stack (the one with the least fields in its state) work in the other or expose the one stack's computation as a pure function to the other stack?
08:21:37 <ertesx> javjarfer: take your time, or even better, write code!
08:22:27 <ertesx> javjarfer: all these vague ideas aren't really helping you *or* me, when in the end it's not something that is actual haskell
08:23:01 <byorgey> kuribas: can't be done, unfortunately
08:23:06 <byorgey> kuribas: at least not that I am aware of
08:23:13 <kuribas> hmm, okay
08:24:31 <javjarfer> ertesx, yes, you are right... but I came to Haskell precisely because I wanted to been able to reason about code and about the constructions I do, without experimentation. Been able to really see the advantages or one approach or other more formally. 
08:25:48 <EvanR> mettekou: dont base things on fields, instead make an interface or interfaces that the client code will use, and implement them behind the scenes with transformers (if you want)
08:26:01 <EvanR> i.e. dont use transformers directly
08:26:05 <javjarfer> ertesx, not simply using patterns... and playing a with really complex LEGO (that most of the time is how I see OOP style)
08:26:15 <ertesx> javjarfer: whether you use haskell as a programming language or as a logical calculus, you should write code…  if you can't convince the type checker, either your model is too precise for haskell, or your model doesn't make sense
08:27:23 <ertesx> both cases are bad:  in one it means you need a more expressive language than haskell (and currently the more expressive ones are vastly less practical)
08:27:41 <ertesx> in the other…  well…  it's just…  wrong =)
08:29:13 <hackrilege> Sorry my client crashed, I missed any messages since my last post
08:29:27 <hackrilege> Anyway, I don't understand this syntax;
08:29:30 <hackrilege> class Cmp x y c | x y -> c
08:30:11 <hackrilege> What is it called? (The | and no where...)
08:30:44 <Cale> That's a functional dependency
08:30:55 <hackrilege> Ooo fancy
08:31:08 <Cale> It says that given x and y, there can be at most one c for which there is an instance Cmp x y c
08:31:43 <Cale> and so the compiler, once it knows what types x and y are, may search for an instance of the form Cmp x y c in order to *infer* c
08:32:02 <hackrilege> Ah so then providing a single instance then is somehow a complete definition
08:32:32 <Cale> Well, you may have many instances still, for different x and y
08:32:48 <Cale> But for any particular choice of (x,y), you will have at most one choice of c
08:32:56 <hackrilege> instance Cmp Zero Zero Equal
08:33:02 <hackrilege> Ok
08:33:05 <javjarfer> ertesx, yeah... you are right again, maybe I need to stay more practical. But I can't avoid thinking that I can't do it in other way beacuse I'm not able to formally express myself xD, even with that, I will stay more practical
08:33:05 <hackrilege> Thanks
08:33:35 <Cale> It's the same as if you'd defined  class Cmp x y where type CmpResult x y
08:33:40 <EvanR> x y -> c
08:33:47 <EvanR> looks like f a -> b
08:33:49 <EvanR> confusing
08:33:49 <sabastiaan> If I have an IO function that returns 2 strings, can I pass that to another function has 2 string arguments directly?
08:34:04 <EvanR> no you have to curry
08:34:06 <mmaruseacph2> see curry and uncurry functions
08:34:10 <Cale> EvanR: yeah, it's just two whitespace separated lists of type variables
08:34:30 <Cale> EvanR: and then commas go in between each of the fundeps
08:34:40 <t7> hindly or milner?
08:34:50 <t7> or damas?
08:34:59 <Cale> e.g. you might have something like ... | x y -> z, y z -> x, z x -> y
08:35:47 <bonnie> hey guys im a beginner! can anyone help me why this can't compile?
08:35:48 <Cale> sabastiaan: If that other function takes the string arguments as a pair, you can. Otherwise, you need to take the pair apart.
08:36:25 <bonnie> i know that some things are redundant.. but still: http://lpaste.net/347839
08:36:58 <Cale> bonnie: What error do you get?
08:37:06 <Cale> That function is missing a case for a list of length 1
08:37:41 <bonnie> Cale Oh really? why?
08:37:52 <Cale> because (x:y:xs) only matches a list with at least 2 elements
08:37:58 <Cale> and [] only matches an empty list
08:38:06 <bonnie> Cale yes okay 
08:38:18 <hackrilege> So it can't satisfy the case for (x:[])
08:38:19 <bonnie> thanks a lot! haskell is really picky :)
08:38:45 <Cale> Normally that's not a compile error, but the compiler can warn you about it
08:38:51 <Cale> What error are you getting?
08:39:04 <hackrilege> Incomplete pattern
08:40:03 <ertesx> javjarfer: "practical" and "correct" are different things, but in the particular calculus you are working in "correct" and "computable" indeed *are* the same thing
08:40:08 <bonnie> Cale fixed it :)
08:40:28 <ertesx> javjarfer: in other words: write code =)
08:42:16 <javjarfer> ertesx, hahaha wow that really went to philosophy and to real world very fast. Didn't see that ending coming this time.
08:43:39 <javjarfer> ertesx, by the way, my reasoning was bad xD! And I'm happy for it because it's the first time I have realised of it by thinking in categorical terms. Of couse you can express it using Applicative functors, only thing is that you can't keep the type so "nice and clean"
08:44:22 <ertesx> at this point i don't even know what "the type" is ;)
08:44:40 <javjarfer> ertesx, and then you can say now, thing you would realise faster if you had started writing code
08:45:23 <javjarfer> ertesx, the type of the parser, Paser E S A
08:45:53 <javjarfer> ertesx, you would need to end up with somthing like Parser E S (X -> A)
08:46:02 <javjarfer> ertesx, for all parsers
08:46:50 <ertesx> category theory is a nice framework for modelling and reasoning ("what is a monomorphism? how do monomorphisms interact?"), but at some point you need a concrete realisation of the model: an implementation ("this particular arrow is a monomorphism, so i can apply all my monomorphisms reasoning to it")
08:50:19 <javjarfer> ertesx, yes, but it's the first time I came with something really usefull using it... And I have tried it several times during writing code, this time, thinking about applicative functors as well "functors" has really helped me to see, that the problem wasn't in the functor composition. The natural transformation isn't the problem, the problem was the morphisms I was mapping with the functor, that doesn't carried the correct types
08:51:06 <javjarfer> ertesx, as you said before (and that helped me a lot... really a lot) is a truly generic construction, for not being able to get inside it something like this
08:51:24 <javjarfer> ertesx, so thanks you really much xD
08:51:34 <ertesx> s/generic/natural/
08:52:27 <ertesx> also i think you should get your terminology straight =)
08:53:57 <javjarfer> ertesx, sorry... in my defense I would say that I'm a systems engineer trying to absord too much terms. If you could recommend me resources for that, it would be great
08:54:40 <osfabibisi> there's nothing like trying to get a module installed with Clojure and boot to make you appreciate stack
08:54:57 <osfabibisi> even the *name* seems better, having attempted to google various variants of "install boot module" and such
08:55:44 <geekosaur> stack's only slightly better. try googling it with respect to building anything web related >.>
08:56:08 <ertesx> javjarfer: i learned CT mostly from wikipedia, partly from nLab, and a wikibook on category theory (you should be able to find it)…  i'd say i had a rough start, but i made it…  there are probably easier ways to learn CT
08:56:35 <ertesx> javjarfer: oh, and from implementing it in agda, which was an enlightening experience of its own =)
08:56:48 <osfabibisi> geekosaur: agreed.  stack is a terrible, terrible name, but boot is (slightly) worse ;-)
08:57:23 <javjarfer> ertesx, omg implementing what in agda?
08:57:33 <ertesx> javjarfer: category theory
08:58:01 * hackagebot publicsuffix 0.20161129 - The publicsuffix list exposed as proper Haskell types  https://hackage.haskell.org/package/publicsuffix-0.20161129 (wereHamster)
08:58:18 <javjarfer> ertesx, hahahaha okay, I was waiting that not to be the answer. Do you have that in a repository or something?
08:58:56 <ertesx> javjarfer: yeah, this is the current state: https://github.com/esoeylemez/agda-simple/tree/master/Algebra/Category
08:59:23 <javjarfer> ertesx, and right now I'm with Chapter 0 - Aluffi, I have read in many sites that was a nice introduction
09:02:18 <javjarfer> ertesx, well... I really didn't renember how agda looks. Wow... It would take me time to even start seen what is written there
09:06:48 <ertesx> it's messy and sparsely documented…  i don't expect *anyone* to understand it right now…  although at least my coding style is pretty consistent =)
09:07:20 <shapr> First make it work, then you can make it pretty later.
09:09:04 <ertesx> with agda there is an incentive to clean up early:  as the module grows, type-checking it becomes considerably slower =)
09:10:12 <javjarfer> ertesx, really? that is because of dependent types?
09:10:44 <ertesx> javjarfer: because of type-level computation
09:11:08 <javjarfer> ertesx, lost in terminology "type-level"?
09:11:12 <ertesx> (it would happen to haskell, too, if you would use a lot of type-level computation)
09:12:00 <ertesx> type-checking involves computation, and computation takes time
09:13:02 * hackagebot console-style 0.0.1.1 - Styled console text output using ANSI escape sequences.  https://hackage.haskell.org/package/console-style-0.0.1.1 (minad)
09:13:04 * hackagebot wl-pprint-console 0.0.1.1 - Wadler/Leijen style pretty printer supporting colorful console output.  https://hackage.haskell.org/package/wl-pprint-console-0.0.1.1 (minad)
09:13:08 <c_wraith> usually the type checker doesn't run computations nearly as fast as optimized output from the compiler runs, either. 
09:13:24 <c_wraith> it has to interpret them, basically. 
09:13:30 <javjarfer> ertesx, ahhh okay I get the term, the computation needed to typecheck, okay, that seems logical, that for Agda, computing the typechecks should be expensive
09:13:48 <fmapE> Trying to use $ stack setup on Ubuntu 16.10. Whatever GHC or GHCJS version I try, always get a bunch of ld relocation errors.
09:13:52 <fmapE> Anyone know a workaround?
09:13:59 <c_wraith> even in Haskell, it can get slow if you're using deeply recursive types. 
09:14:00 <fmapE> (Have googled, no success)
09:14:23 <kadoban> fmapE: Recent ubuntu or something? I seem to remember seeing an issue in the tracker for that with a lot of discussion
09:14:26 <ertesx> javjarfer: not the computation the type checker does by being a type checker, but the computation introduced by the types themselves…  consider closed type families in haskell
09:14:35 <fmapE> kadoban: Yeah  Ubuntu 16.10
09:14:41 <geekosaur> fmapE, wait for ghc 8.0.2
09:14:54 <c_wraith> ...  and for stack to support it. 
09:14:57 <c_wraith> and ghcjs 
09:14:58 <geekosaur> 8.0.1 requires some special configuration plus building a patched Cabal library
09:15:09 <fmapE> kadoban: Found that issue, didn't get help from it
09:15:27 <kadoban> fmapE: Hmm, ya that was definitely the version. Ah alright, ya maybe you just have to wait then. You should be able to use GHC 7.10.3, right, or did I make that up?
09:15:28 <fmapE> geekosaur, c_wraith: waiting would suck. Tell me more about configuration and patching?
09:15:49 <geekosaur> 7.10.3 is no better
09:16:09 <c_wraith> fmapE, if at all possible, I'd approach this by going back to Ubuntu 16.04 for now. 
09:16:13 <kadoban> Ah, darn.
09:16:26 <fmapE> c_wraith: not possible unfortunately.
09:16:28 <geekosaur> no released ghc has support for position independent executables
09:16:34 <fmapE> c_wraith where's the stuff about patching?
09:16:45 <c_wraith> fmapE, then you're in an unpleasant situation.. 
09:16:55 <c_wraith> fmapE, and I'm not sure. ask geekosaur
09:17:32 <fmapE> c_wraith: 
09:17:44 <fmapE> c_wraith: "you're in an unpleasant situation" tell me about it
09:18:11 <geekosaur> http://lpaste.net/338947 is half of what you need (settings file for ghc to disable position independent executables in the linker)
09:18:17 <c_wraith> all I can say is that sometimes the bleeding edge is painful. :(
09:18:29 <fmapE> c_wraith indeed
09:18:43 <pikajude> that's why it's bleeding
09:19:11 * geekosaur looking for the Cabal patch
09:19:36 <fmapE> geekosaur: That settings file looks like a Haskell list: does it go somewhere in the ghc source?
09:19:48 <geekosaur> yes
09:19:55 <javjarfer> ertesx, ahh okay now I get it better. Well, like always, the fancier the construction, the bigger the overhead
09:20:00 <geekosaur> there is a file called "settings" in the ghc global lib directory
09:20:06 <fmapE> geekosaur: found it. Thanks
09:20:27 <fmapE> geekosaur: (found the spot for the settings, not the Cabal lib patch)
09:21:10 <geekosaur> http://git.haskell.org/packages/Cabal.git/commitdiff/c30b179a73d9fd3f6edcdda5e881523cd6edd46a is the patch for Cabal
09:21:31 <javjarfer> c_wraith, true (deeply recursive datatypes) but It was something I expected xD
09:22:44 <fmapE> geekosaur: Many thanks!
09:24:06 <geekosaur> having done this, you may also need to rebuild stack against the new Cabal lib
09:24:41 <ertesx> javjarfer: even simple things can be expensive…  for example a non-trivial equality proof might involve lots and lots of individual terms with long and complicated types in a long chain of transitivity
09:25:54 <fmapE> geekosaur: one more Q, how do I get stack to use the new GHC(JS) without just building it and putting it on my path?
09:26:06 <fmapE> geekosaur: Is there a way to tell stack where to get GHC sources from?
09:26:15 <geekosaur> that I don't know
09:26:18 <javjarfer> ertesx, now we are talking about typechecking from the typechecker? Or to the computational cost of that in a simple equality proof?
09:27:04 <kadoban> fmapE: There is a way to do that, but I've never done it. Why not just build it and put it on your path?
09:27:12 <geekosaur> but, you aren't changing ghc source for this (you do not need to build ghc with the patched Cabal lib, only tools like stack and cabal-install)
09:27:42 <geekosaur> ...ghc already knows which settings names to use, it's the external tools that need to be updated
09:27:56 <Guest98321> What would the easiest way to get into haskell 3d programming?
09:28:00 <fmapE> geekosaur: But I need stack's ability to jump between ghc versions
09:28:01 <geekosaur> at most you have stack install ghc, then overwrite its settings file
09:28:21 <ertesx> javjarfer: hmm?
09:28:37 <ertesx> todaystomorrow: are you new to both or only to haskell?
09:28:45 <todaystomorrow> new to 3d
09:28:48 <sm> todaystomorrow: probably http://www.hgamer3d.org
09:28:54 <todaystomorrow> I started haskell five years ago
09:29:02 <geekosaur> which will be somewhere under ~/.stack/programs
09:29:12 <todaystomorrow> it's my favorite language! I wish everything was written in haskell it's so intuitive
09:29:19 <todaystomorrow> why do people think haskell is so hard?
09:29:24 <ertesx> todaystomorrow: well, as a first step make sure your linear algebra is not too rusty
09:29:41 <todaystomorrow> Yeah I don't know linear algebra, how can I learn it?
09:29:48 <ertesx> todaystomorrow: (sorry, for some reason i assumed that you were new to haskell)
09:29:59 <todaystomorrow> Noep I'm an oldie actually
09:30:08 <todaystomorrow> I've written an ircbot in haskell
09:30:32 <todaystomorrow> I've solved dozens of euler problems in haskell
09:30:45 <javjarfer> ertesx, when you have said non-trivil equality proof I have thought of using a type that should be equal to another and the cost of typechecker for doing that in a long chain of transitivity, and to a runtime checking of something being equal to something
09:30:52 <ertesx> todaystomorrow: today?  if you like video format, there are countless intros like khan academy…  if not, there is probably a wikibook
09:31:14 <ertesx> you can also get a book on linear algebra
09:32:00 <todaystomorrow> I'm only at calculus and I've failed it twice
09:32:03 * yulax shudders at the thought of linear algebra
09:32:05 <mettekou> EvanR: the client code already uses pure functions, every module using one of the transformer stacks exports them.
09:32:31 <ertesx> todaystomorrow: i made another assumption: by "3d programming" you were talking about 3D *graphics*
09:32:56 <todaystomorrow> working in 3d spaces
09:33:06 <ertesx> javjarfer: this is indeed equality of types
09:33:15 <geekosaur> really, at this point I'd install vbox and an older ubuntu inside that --- far easier than futzing around with this
09:33:52 <ertesx> todaystomorrow: more context would be useful, because a lot of things involve 3D spaces
09:34:33 <ertesx> todaystomorrow: if you want to do machine learning with 3-feature data sets, that's something entirely different from navigating a 3D camera through a 3D scene =)
09:34:54 <moongazer> todaystomorrow, you need to teach me:)
09:35:08 <todaystomorrow> Ah, I like the idea of working with cameras
09:35:22 <todaystomorrow> to do stuff like posting 3d images on special boards
09:35:28 <todaystomorrow> or special effects with haskell
09:35:31 <moongazer> Guys, this is unrelated to Haskell, but I need interview advice
09:36:30 <pikajude> that's a good reason to take it elsewhere
09:37:29 <moongazer> pikajude, elsewhere as in exactly where?
09:37:34 <ertesx> todaystomorrow: yeah, you will most likely need some linear algebra, at least vectors and likely matrices
09:37:35 <sm> search hacker news, there are informative discussions of interviewing there
09:38:04 <moongazer> sm, I have read all that stuff. Need some direct advice
09:38:24 <todaystomorrow> Something about me makes me feel
09:38:24 <bonnie> hey guys, im beginner in haskell, there is a function thats not working, i think something is wrong in the list comprehension, im gonna send it with lpaste 
09:39:08 <bonnie> http://lpaste.net/347864
09:39:22 <bonnie> can u help maybe? thanks in forward!
09:41:15 <bonnie> i actually only wanted to make a list of the lists, that are but into moveBubbles, so all the lists before the final result 
09:43:39 <lpaste> prsteele pasted “Lenses segfault” at http://lpaste.net/347868
09:44:13 <prsteele> hey everyone. I'm getting a segfault compiling a simple program with TemplateHaskell (and lens). paste at  http://lpaste.net/347868 , any thoughts?
09:46:51 <EvanR> line-case ?
09:47:09 <EvanR> ah thats your lib
09:47:11 <prsteele> just happens to be the name of the package I'm working on. Just running `ghc src/Main.hs` does the same
09:47:41 <EvanR> segfault, thats frightening
09:47:58 <prsteele> ...yes, and no other message, either. I'm crashed the compiler before, but it had suggestions
09:50:43 <glguy> prsteele: I'd probably start with reinstalling lens or packages that it depends on or reinstalling GHC. I don't know what's gone wrong exactly whether it's corruption, or a shared library that GHC is built against installed on the system changed or something else entirely
09:50:47 <bengt_> that snippet compiles fine here (on osx) with ghc 8.0.1
09:51:08 <prsteele> bengt_: I believe you, it's from the docs
09:51:29 <prsteele> glguy: that's what I'm trying (re-installing GHC). Rather I'm just going to jump to 8.0.1
09:52:04 <bengt_> hehe
10:02:52 <hackrilege> Did anyone see this? https://hackage.haskell.org/package/hylide
10:03:21 <javjarfer> ertesx, nice I understood it well
10:04:15 <c_wraith> hackrilege, that looks fun
10:05:32 <hackrilege> Yeah!
10:06:02 <hackrilege> Now we can write for Android!!!
10:06:49 <c_wraith> do android browsers support webgl well? 
10:07:44 <hackrilege> Yeah for sure, Android is Google so the browser is chrome
10:07:46 <hackrilege> https://hylogen.com/
10:08:02 <MarLinn> Not if you install a different one
10:08:02 <EvanR> it wasnt on my android phone... 
10:08:26 <kadoban> I don't think that's really true on any android phone I've ever seen, there's a different android browser by default for some reason.
10:09:17 <hackrilege> I think the new ones have a Google bar in by default with a mic that seems to send data to Google at its own leisure...
10:09:19 <ertesx> javjarfer: as an example here is the rather unwieldy proof that natural number multiplication is commutative: https://github.com/esoeylemez/agda-simple/blob/master/Data/Nat/Core.agda#L177
10:11:04 <ertesx> javjarfer: this requires the type checker to do the computations the proof relies on symbolically, i.e. using an actual abstract syntax tree in memory
10:11:07 <ertesx> and that's expensive
10:11:45 <hackrilege> Does anyone know about angular or backbone in Haskell?
10:12:50 <prsteele> If I just went and updating version bounds in a package version 0.1.0.0, but I expect nothing to functionally change because of this, is bumping to 0.1.0.1 acceptable?
10:13:06 <prsteele> reading pvp.haskell.org makes this _seem_ correct
10:14:30 <javjarfer> ertesx, puff I was trying to read it, which proof where you using? to compare it with normal notation
10:15:11 <javjarfer> ertesx, I really don't get this part of the syntax  "cong suc $"
10:15:51 <ertesx> javjarfer: feel free to join #agda, because this is getting too far from haskell =)
10:17:03 <javjarfer> ertesx, okay sorry... I'm joining
10:38:05 * hackagebot mdp 0.1.1.0 - Tools for solving Markov Decision Processes.  https://hackage.haskell.org/package/mdp-0.1.1.0 (prsteele)
10:45:21 <EvanR> heres a program idea, use juicy-pixels to load the target image file, and report the format and dimensions
10:46:12 <EvanR> i just noticed "file" command doesnt do this
10:47:55 <kadoban> EvanR: ? it does for me, maybe it depends on the format?
10:48:03 <EvanR> this is OSX
10:48:19 <kadoban> "PNG image data, 670 x 815, 8-bit/color RGB", etc.
10:48:27 <EvanR> i have 3 jpegs, all different format according to file, zero have dimension info
10:48:41 <kadoban> Hmm, it's not the same command I suppose then, what would that be, the one from BSD family I guess?
10:48:57 <pavonia> EvanR: You could use ImageMagick's identify
10:49:37 <EvanR> that would proably be more robust
10:49:41 <kadoban> Oh huh, that's funny, JPG is the only one I can find where it *doesn't* show dimensions and such. It even does .xcf and other random ones.
10:50:37 <EvanR> JPEG image data, EXIF standard. JPEG image data, JFIF standard 1.02. JPEG image data, JFIF standard 1.01, comment: "CREATOR: gd-jpeg v1.0 (using IJ"
10:51:25 <EvanR> just this missing parenthesis there pisses me off and makes me want to suggest someone looking for haskell practice, as they do in here, write something more uniform ;)
10:51:42 <glguy> prsteele: If you were just updating bounds you don't need a new version at all
10:52:05 <glguy> Unless those new bounds cause you to reexport a different API
10:52:16 <glguy> (then you'd obviously need more than a 4th digit change)
10:52:48 <grazie> I'm trying to rewrite a Sudoku solver in Haskell for learning purposes,,,this might be a hard question to answer but I'll try.. in this code https://gist.github.com/7a8ce0e78795191c54245e372f604fb8 ...
10:53:26 <glguy> grazie: You appear to be using tabs with a misconfigured editor
10:53:40 <grazie> the parameters `g (s,d)` are of type Grid (Square, Digit) at the start but by line 15 they are changed to -- Array (Char, Char) [Char] -> ((Char, Char), Char)
10:53:46 <glguy> grazie: Make sure your tab-stops are set to 8
10:54:25 <grazie> ok, I'll reformat, I didn't know if gist would preserve the format of a haskell file, so I just used .txt
10:55:02 <glguy> The gist is showing you what the file actually is
10:55:12 <glguy> toDump is actually indented that far to the right
10:55:24 <grazie> testing https://gist.github.com/7de270c757182c48d518a6d7e61cc8d8
10:56:21 <grazie> ok, this should be better https://gist.github.com/eb71eea48084eee0187ed2dec18a9e80  the line I'm having most trouble with is 15
10:56:52 <glguy> That last paste is still wrong, toDump isn't lined up with ds
10:57:00 <grazie> ghc is telling me that the parameters to delete_and_replace are not Grid (Square,Digit) but rathe r:: Array (Char, Char) [Char] -> ((Char, Char), Char)
10:57:05 <grazie> hmmm
10:57:59 <grazie> testing https://gist.github.com/066952ae0434c722a06ee50ecb98f433
10:58:01 <prsteele> for anyone interested, the segfault goes away with GHC 8.0.2.
10:59:26 <grazie> I don't know why it's not lined up once it's turned into a gist
10:59:37 <grazie> I'll come back later when I get it figured out
10:59:52 <lots> Anyone familiar with stack saying no information found for ghc when running stack setup?
11:01:08 <sdx23> grazie: well, if you type Square = (Char, Char) it is only an alias
11:03:06 <grazie> ok, formatting is better here, https://gist.github.com/anonymous/b159131aa132e5148660ebfc97048b7e  if you start from `assign` and follow funcs, why are types messed up for delete_and_replace g (s,d)
11:03:34 <grazie> delete_and_replace g (s,d)  --- I'm worried I"m not using`>>=` correctly
11:03:48 <grazie> (oh, can't do underscore on irc)
11:05:32 <EvanR> codedmart: i forgot to say, the other way is to make things more convenient and just use something like aeson Value, Object (HashMap Text Value) for as many things you dont want to make new types for
11:05:59 <EvanR> you get as much safety as a dynamic web language but you dont have to come up with new record types
11:06:30 <codedmart> EvanR: Yeah I don't like that option, but appreciate your comment.
11:07:47 <grazie> oops, I have to go, will come back later if anyone can help then...
11:19:31 <joe9> not sure what I am missing. When I start an executable using: 'stack exec my-exe -- +RTS -p -RTS' from the shell prompt, it runs fine. I see a my-exe.prof file when I ^C the process. But, when I run the same from a shell script, it does not create a my-exe.prof file. ghc creates a 0 byte file for my-exe.prof.
11:19:39 <joe9> any suggestions on what I might be missing, please?
11:23:08 * hackagebot type-assertions 0.1.0.0 - Runtime type assertions for testing  https://hackage.haskell.org/package/type-assertions-0.1.0.0 (lexi_lambda)
11:27:29 <geekosaur> joe9, it's the first one that sounds wrong to me. profile information is only written during normal termination, not via signals or exceptions
11:36:58 <c_wraith> note that by default, there's a signal handler that catches ctrl-c and turns it into a normal exit. 
11:37:25 <pikajude> what's the easiest way to get a textual representation of the IP address associated with a SockAddr?
11:37:42 <pikajude> assuming it will never be either a unix socket or whatever a "can" is since this is an HTTP server
11:38:09 <joe9> c_wraith: do you know if that signal handler is installed when ghc is running from a script?
11:38:10 <EvanR> it C, getNameInfo
11:38:19 <EvanR> er, getnameinfo
11:38:33 <pikajude> wait, i have to use the FFI?
11:38:46 <EvanR> its probably in low level library somewhere
11:38:52 <joe9> geekosaur: the script is exiting when it receives a ^C
11:38:58 <mniip> getnameinfo? I always used inet_ntop
11:39:14 <EvanR> that only works for ipv4
11:39:22 <mniip> ipv6 too
11:39:30 <joe9> geekosaur: pressing ^C, is triggering an interrupt/exception and the script is exiting on an exception
11:39:46 <joe9> s/script/haskell executable/
11:40:05 <EvanR> inet_ntop requires you pass in the address family
11:40:09 <pikajude> okay, Network.Wai.Logger.Apache does it manually
11:40:10 <pikajude> damn it
11:40:16 <pikajude> guess i'll do that too
11:40:28 <EvanR> upgrade to 21st century yall
11:42:12 <pikajude> woo, Network.Wai.Logger has one
11:42:42 <EvanR> pikajude: in general, this task tends to expand to "works for anything, and also i want reverse DNS plz" so getnameinfo solves that
11:43:10 <pikajude> why would I want reverse DNS to show an IP address
11:43:26 <EvanR> im saying format it nicely as an IP address is a subset of this larger issue of showing an address
11:43:33 <EvanR> so they consolidated it into one place 
11:44:02 <EvanR> its like, you could also carefully extract bits from a float to display it, but we use printf
11:44:11 <pikajude> but where is it consolidated into
11:44:15 <EvanR> getnameinfo
11:44:51 <EvanR> https://hackage.haskell.org/package/network-2.6.3.1/docs/Network-Socket.html#v:getNameInfo
11:45:04 <pikajude> I see
11:45:12 <pikajude> can I avoid doing reverse DNS if I just want to show the IP address textually
11:45:16 <EvanR> yeah
11:45:30 <EvanR> thats a flag
11:46:08 <pikajude> oh, NI_NUMERICHOST
11:46:14 <EvanR> tried and true
11:46:23 <EvanR> these Maybe returns are a little weird
11:46:48 <EvanR> it says if theres a problem itll throw an exception, so what does Nothing mean
11:47:13 <pikajude> if you request NUMERICHOST i assume it doesn't return a hostname
11:47:25 <EvanR> it does
11:47:36 <EvanR> itll be like "192.168.0.1"
11:47:41 <pikajude> oh right
11:48:00 <ym> OMG!
11:48:01 <pikajude> maybe "failure" is a C-land exception
11:49:14 <EvanR> it uses peekIf to decide to peekCString or return Nothing
11:49:28 <EvanR> oh... youre right
11:50:08 <EvanR> if the first Bool arg is False, it returns Nothing o_O
11:50:18 <EvanR> so put True, and use NI_NUMERICHOST
11:51:07 <joe9> c_wraith: any suggestions on where I can find the default signal handler?
11:51:58 <c_wraith> joe9, it's buried in the signal handling library. 
11:54:31 <joe9> c_wraith: when I run the exe from the script, I am sending a INT when the script receives a ^C. whereas, when I run the exe from the shell directly, I think the exe gets the ^C directly.
11:54:54 <joe9> c_wraith: there probably is a difference in how the Int is handled vs how the ^C is handled.
11:55:39 <geekosaur> actually it would b getting SIGINT twice
11:55:55 <geekosaur> ^C sends interrupt to the process group, not just the script; you should not have to forward it
11:57:14 <joe9> geekosaur: no, it is not getting forwarded in this scenario. I am sure it has something do with how I am invoking the ghc exe too. shell script -> sudo -> sh -> stack exec my-exe
11:57:43 <joe9> geekosaur:  I think something in that call chain is not forwarding the ^C sent to the process group
11:58:12 <geekosaur> sudo's going to be messing with a lot of things there (including your permission to send a signal, unless you sudo that as well)
12:01:31 <joe9> geekosaur: do you know which signal handling library might have the code for the default signal handler.
12:02:12 <joe9> geekosaur: I can probably customize it to my particular situation. At the very least, have more messages to figure that code out.
12:02:27 <geekosaur> ...
12:02:37 <FatBoyXPC> oh hi geekosaur :D
12:02:48 <geekosaur> it's not "a library". it is the ghc runtime, unless something is specifically overriding it
12:03:50 <FatBoyXPC> Can anybody help me understand the concept of monads? I've watched several videos, read several blogs, and I can't stop myself from feeling like it's no different than an object which implements a specified interface
12:04:53 <joe9> FatBoyXPC: the (>>, >>=) are just functions that join 2 other functions.
12:05:30 <joe9> FatBoyXPC: the monad is the mechanism to make (>>,>>=) as generic as possible so they can be used across many different types of functions.
12:05:33 <FatBoyXPC> I'm not looking for syntax specific stuff, I'm just trying to wrap my head around the concept of a monad
12:06:20 <geekosaur> actually you were given even more misinformation in that thing about "a library". it's not normal exit, it's an exception that (unless something uses Control.Exception.catch) triggers abnormal exit
12:06:25 <sabastiaan> Aren't monads used to create a way to have some way of accesing global state?
12:06:38 <sabastiaan> be it IO state or something else
12:06:46 <geekosaur> although it's possible that that may write some profiling information, whereas an unhandled signal will not
12:06:57 <joe9> sabastiaan: they can be. but, not meant only for that purpose.
12:07:21 <joe9> sabastiaan: (Just 10) >>= (\i -> Just (i + 10))
12:08:03 <geekosaur> FatBoyXPC, from a practical perspective a monad is indeed just "a specified interface". it's a rather flexible interface though
12:08:43 <FatBoyXPC> That's fair, I keep trying to tell myself I just don't get it yet
12:08:49 <joe9> geekosaur: I think that is what is happening, an "unspecified signal" situation. I wish I can check out the default handler to figure it out.
12:08:53 <FatBoyXPC> but if there's agreement upon that, I think I can deal with that answer
12:11:13 <geekosaur> joe9, there is no default handler
12:11:18 <nil_> hey guys, I just asked a question on #haskell-beginners before I realized it was #haskell-beginners and not this channel, I'm going to repeat the question here if it's not a problem.
12:11:28 <geekosaur> unless you mean what the kernel does with a signal when no handler is registered
12:11:51 <geekosaur> but you said SIGINT which *does* have a handler and is also not an "unspecified signal"
12:12:06 <mizu_no_oto_work>  FatBoyXPC: starting somewhere simpler than Monad: do you understand what a Functor is?
12:12:07 <joe9> geekosaur: I figure there must be something in ghc that is telling it to write profiling information when the program is exiting.
12:12:41 <joe9> geekosaur: and behave differently when ^C is pressed or a SIGINT is received.
12:12:48 <geekosaur> yes, and it's part of the runtime. and I don't know precisely when that part of the runtime activates
12:12:52 <FatBoyXPC> mizu_no_oto_work: I don't. I think of a Functor as a function that wraps a function, sort of like composition
12:12:55 <geekosaur> but, both of those are SIGINT
12:13:25 <geekosaur> the only thing that knows the difference is the kernel's tty input handler
12:13:57 <mizu_no_oto_work> FatBoyXPC: Do you understand the map function?
12:14:09 <joe9> geekosaur: that is what I thought, that ^C == SIGINT. but, I suspect that the behaviour regarding writing profiling information is different depending on whether ^C is pressed or SIGINT is received..
12:14:19 <mizu_no_oto_work> > map (*2) [1,2,3,4,5]
12:14:21 <lambdabot>  [2,4,6,8,10]
12:14:53 <geekosaur> joe9, yes you keep saying that as if there is a magical way for it to know which is which
12:15:26 <geekosaur> they are both SIGINT, it cannot tell where the SIGINT was generated or for what reason
12:15:36 <FatBoyXPC> mizu_no_oto_work: Before we go too far down this rabbit hole, understand that I haven't even started dabbling with haskell. Al lmy experience is in imperative languages, so thinking this way is so different to me. I assume the map function in the FP sense is not the same map function you'd see in other languages that iterates over lists?
12:15:50 <geekosaur> if there really is a difference, ^C is not it
12:16:11 <mizu_no_oto_work> FatBoyXPC: No, it's exactly the function that iterates over lists.
12:16:23 <geekosaur> I'd probably be using strace to try to figure it out (except I'd probably be trying to find a better solution to this in the first place)
12:16:33 <FatBoyXPC> Oh, well then yeah, I get that. After typing that I saw your example for (*2) on a list. That's a pretty common thing, yeah
12:17:01 <mizu_no_oto_work> FatBoyXPC: You can basically think of Functor as a Mappable interface, because there's all sorts of things that you might want to map over.
12:17:45 <FatBoyXPC> mizu_no_oto_work: so Functors all have a map function?
12:18:21 <joe9> geekosaur: (except I'd probably be trying to find a better solution to this in the first place) -- Any recommendations, please?
12:18:35 <geekosaur> FatBoyXPC, the "map" you see in non-FP contexts is sometimes what Haskell calls map, and sometimes what Haskell calls fmap
12:18:52 <FatBoyXPC> Well that's weird, can you elaborate?
12:18:54 <geekosaur> and those two names are similar for much the same reason that they use the same name in other contexts
12:18:57 <joe9> geekosaur:  I just want a reliable way to stop a daemon process. ^C when testing from shell
12:18:59 <mizu_no_oto_work> Yes, Functor is basically an interface with a single function in it called 'fmap' (to avoid colliding with 'map'), where the Functor instance for Lists defines fmap to be map
12:19:02 <mizu_no_oto_work> :t fmap
12:19:04 <lambdabot> Functor f => (a -> b) -> f a -> f b
12:19:18 <joe9> geekosaur: and, sending a SIGINT when running the process from a shell script.
12:20:10 <mizu_no_oto_work> Some things you might want to map over are data structures:
12:20:21 <FatBoyXPC> mizu_no_oto_work: can you explain the syntax here? does f => (a -> b) define a function? where f is a param, and (a -> b) -> f a -> f b is the return value?
12:20:30 <geekosaur> joe9, running something under sudo complicates things quite a lot. also I do not usually consider a "daemon" to be something I would interrupt with ^C; a daemon, I would expect to send an exit command, or if necessary SIGTERM
12:20:36 <geekosaur> ^C is for interactive programs, not daemons
12:20:40 <FatBoyXPC> I botched that message a bit, but I think I got it clear enough
12:21:25 <mizu_no_oto_work> FatBoyXPC: No - you can think of everything before the => as defining the interfaces that type variables must implement.
12:21:58 <joe9> geekosaur: I have multiple threads in the process and I want to exit cleanly. When I receive an async exception, I am closing the logger thread and any resources and exiting.
12:22:01 <mizu_no_oto_work> Technically, they're not interfaces but typeclasses, but the difference between the two isn't important at the moment.
12:22:15 <joe9> geekosaur: If I use SIGTERM, the async exception is not raised.
12:22:25 <joe9> geekosaur: hence, I am forced to use SIGINT
12:22:29 <geekosaur> because you would need a signal handler for it
12:22:37 <geekosaur> like any other daemon
12:22:50 <mizu_no_oto_work> :t sum . sort
12:22:51 <lambdabot> (Ord c, Num c) => [c] -> c
12:22:56 <joe9> geekosaur: oh, ok. write a signal handler for SIGTERM?
12:23:12 <FatBoyXPC> mizu_no_oto_work: can we mvoe this to private chat? 
12:23:21 <joe9> geekosaur: that signal handler would cancel any threads?
12:23:31 <FatBoyXPC> or maybe a bit quieter channel? I'm not able to read constantly and I have to keep scrolling and such, making it a little difficult
12:23:57 <Tuplanolla> I think #haskell-beginner is quieter, FatBoyXPC.
12:24:04 <joe9> geekosaur: that would get tricky as such a signal handler has to run in the main thread.
12:24:28 <joe9> geekosaur: but, when using GUI, they recommend using the main thread for the GUI calls.
12:24:33 <geekosaur> joe9, https://downloads.haskell.org/~ghc/8.0.1/docs/html/libraries/unix-2.7.2.0/System-Posix-Signals.html#g:4 and you want softwareTermination or sigTERM (same thing) as the signal
12:25:08 <geekosaur> and n, neither of them automatically cancel threads, what does that is when the main thread exits then all other threads are forcibly killed
12:26:25 <geekosaur> you need to think about how to do a clean shutdown, how to use something like the async library to manage threads that may need to be interrupted, and then have the main thread do a normal exit so that the profiler stuff will run afterward
12:27:20 <joe9> geekosaur: I am using the async library and safe-exceptions
12:27:35 <joe9> geekosaur: safe-exceptions to capture the ^C and exit cleanly
12:27:51 <geekosaur> well, that is information you did not provide before
12:28:21 <joe9> geekosaur: sorry about that. Is there a template for such a process?
12:28:38 <joe9> geekosaur: some sample code for a daemon that handles threads and signals properly?
12:32:32 <geekosaur> mm, the parallelism and concurrency book talks about exceptions but not signals. one way around that is for the signal handler to raise a specific exception you can catch. but, you are already doing this, in a potentially confusing way...
12:32:51 <geekosaur> and I guess you are already confused enough so we will pretend an interactive signal is suitable and stick with your ^C
12:33:07 <tsk> I'm trying to model a set of rules.  Basically anything that returns a Boolean is a rule ( a -> Bool).  These policies can accept any type.  How do I keep a list of these Predicates?  Since they are not of same type (odd, (=='x')) are not same type. Also, I should be able to apply these predicates later 
12:33:08 <geekosaur> eventually you will be wondering how to do this when it's a service though
12:33:59 <geekosaur> (and, there's still that sudo --- would really be better to run this from a sudo-d shell so you don't have to worry about permissions and possibly different pgrps or even sessions being hauled in...)
12:34:34 <joe9> geekosaur: yes, that is the problem. I figured sending a SIGINT would be good enough and kick off the same handling that ^C was doing interactively.
12:35:28 <joe9> geekosaur: everything else runs fine, the proces stops, etc. it is only the profiling that is not working.
12:35:44 <geekosaur> and it should be, but something else is happening. having the sudo in the middle complicates things enough that it's hard to tell what
12:36:29 <geekosaur> (be easier if ti weren't creating the file too, since that would suggest the problem might be the account you sudo-d to didn't have write permission :)
12:36:54 <geekosaur> basically you have a lot of moving parts here and I want some of them to go away, because any of them can potentially interfere with things
12:37:42 <joe9> ok, Thanks. will try to figure out how to simplify this. Thanks again.
12:38:41 <geekosaur> in particular sudo, because it runs a new  process environment under a different user, complicates signal delivery
12:40:21 <geekosaur> and if I absolutely had to do things that way I'd be using strace at this point to try to figure out what exactly the program is seeing. but, strace is something of an advanced diagnostic tool --- I can understand what it's telling me, if you're not fairly familiar with unix/posix system calls, the posix process and signal models, etc. then it will be difficult to interpret
12:40:51 <geekosaur> (also, how it deals wth threads --- which may be further complicated by ghc's idea of a thread being different from posix's)
12:48:36 <joe9> g
12:49:05 <tsk> I was able to wrap the argument types into a restricted union types (data P = PI Int | PS String) and turn predicates a->Bool as (P -> Bool) which now I can put in a list. Is this the only way? 
12:50:18 <tsk> any other concepts I can look for? I tried GADT
12:51:35 <EvanR> tsk: the issue here is, they cant accept any type
12:51:42 <EvanR> each one accepts a particular type
12:52:10 <EvanR> const True and const False are the only possible a -> Bool's
12:52:23 <[exa]> Hi everyone
12:52:52 <EvanR> if you create a "anything list" of these things, youd never be able to use it, because the type information was lost when you dropped into "List"
12:53:29 <EvanR> heterolist types save the point-wise type information
12:53:32 <[exa]> I'm wondering about inner workings of the haskell type system. I've been reading TypingHaskellInHaskell and didn't find a place that specifies how to decide if there is no instance that would cover certain usage of some typeclass
12:53:51 <[exa]> i.e. no place where the "No instance for Cl ..." is actually produced
12:54:28 <[exa]> question: is this message produced during the hindley-milner-style process, or after that on overloading resolution?
13:01:33 <joe9> geekosaur: Thanks so much for the advice. will check out strace.
13:13:54 <alx741> quick question: Is GHC error format fully (or most of it) compatible with GCC error format? (for using it with editors that already understand GCC errors)
13:17:20 <mjdominus> I feel like I've asked this before, but:
13:17:20 <mjdominus> I have nub :: (Eq a) => [a] -> [a]  and then I wanted to defined count_uniq = length . nub
13:17:20 <mjdominus> And got a very long error message that began “No instance for (Eq a0) arising from a use of ‘nub’ // The type variable ‘a0’ is ambiguous”
13:17:20 <mjdominus> This was fixed when I added an explicit type signature for count_uniq.
13:17:20 <mjdominus> But why did I need the explicit type signature?
13:17:46 <mjdominus> I thought it should infer count_uniq :: (Eq a) => [a] -> Int, but it didn't.
13:18:23 <EvanR> it does, but the problem is when you use it somewhere
13:18:41 <mjdominus> That seems not to be the case.
13:18:47 <EvanR> show code
13:18:57 <Liskni_si> monomorphism restriction perhaps?
13:19:07 <Liskni_si> does count_uniq x = length (nub x) work?
13:19:15 <mjdominus> I thought it was the monomorphism restriction probably.
13:19:49 <mjdominus> count_uniq x = length (nub x)
13:19:49 <mjdominus> does compile.
13:20:30 <Liskni_si> it's the monomorphism restriction then :-)
13:20:40 <geekosaur> beyond that, it would depend on the exact inferred type, which could be complicated by MMR + defaulting + possibly extensions (polymorphic string or list literals?)
13:20:42 <lpaste> mjdominus pasted “length . nub” at http://lpaste.net/347940
13:21:10 <EvanR> so... what is the context you get the error in then
13:22:08 <EvanR> works for me in ghci
13:22:33 <mjdominus> EvanR: Does it still compile if you comment line 11 and uncomment line 10?
13:22:47 <mjdominus> I am using ghci 7.10.3.
13:23:47 <geekosaur> oh, ghci does change things a bit
13:24:02 <geekosaur> in a program it could use type context from call sites to resolve it
13:24:11 <geekosaur> in ghci, it has to do so with only what it knows right then
13:24:13 <mjdominus> The explanation of the monomorphism restriction at https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-930004.5.5 is too complicated for me to understand what is going on in this example. 
13:24:19 <EvanR> with ., it doesnt work
13:24:48 <mjdominus> Why doesn't it infer full polymorphism, what is it probably inferring instead, and why does this result in a compiler error?
13:24:49 <EvanR> so much for eta conversion!
13:25:32 <nitrix> I give explanations occasionally on #haskell-beginners.
13:25:34 <EvanR> if i enable NoMonomorphismRestriction, then it works
13:25:50 <mjdominus> The explanation at https://wiki.haskell.org/Monomorphism_restriction says that it is controversial and subtle, and perhaps this is why I have never understood it.  Maybe this is the example that will help me understand it.
13:26:08 <mjdominus> It surprises me every time  :(
13:26:14 <nitrix> There's essentially two schools of thoughts with both pros and cons.
13:26:14 <EvanR> i thought MMR only matter when doing local definitions
13:26:25 <EvanR> this is mattering in a top level definition
13:26:27 <nitrix> One side was chosen because it complements well memoization.
13:26:41 <geekosaur> actually, local definitions have a completely different mechanism (MonoLocalBinds). MMR is top levels
13:27:02 <nitrix> As long as you give your functions type annotations (including where clauses), you'll not run into MR issues.
13:27:28 <nitrix> Past that, it's up to you if you want to learn about it :)
13:27:40 <geekosaur> ...actually MMR should also apply to locals, whereas MonoLocalBinds only applies to locals and never to top levels
13:27:51 <nitrix> geekosaur: correct afaik
13:28:03 <mjdominus> I understand that, but what the problem here is that I don't understand what is going on.  One of the big benefits of the strong typing, for me, is better collaboration with the compiler.  Whenever htis comes up, the collaboration has broken down because I don't understand what the problem is.
13:28:45 <geekosaur> the MMR often has that effect. although, ghci should default to the MMR disabled (specifically because of this, and its poor interaction with entering an expression/definition at a time)
13:28:55 <glguy> mjdominus: Maybe it'd be productive to ask questions about the specific things on the wiki or haskell report that you don't understand
13:29:08 <hackrilege> I'm following https://wiki.haskell.org/Type_arithmetic But I get an error; lpaste.net/347942
13:29:09 <geekosaur> although if you put it in a file and load that into ghci then MMR is enabled for the file
13:30:03 <mjdominus> glguy: The specific thing I'd like to know first is: what type did ghc deduce for `count_uniq` in the non-working version of my program?
13:30:25 <geekosaur> use :t for that
13:30:34 <mjdominus> You can only use :t after a successful compilation!!
13:30:39 <pikajude> what's the best way to convert a base64url-encoded bytestring to an Integer
13:30:54 <glguy> mjdominus: Have you pasted your program somewhere?
13:30:55 <EvanR> mjdominus: i have it working both ways in a file
13:31:05 <mjdominus> glguy: http://lpaste.net/347940
13:31:09 <pikajude> there must be a better way than `sum . zipWith (\ x y -> (256 ^ x) * fromIntegral y) [0 :: Integer ..] . reverse . unpack . decodeLenient`
13:31:11 <EvanR> and loaded into GHCI, had to explicitly enable NoMonomorphismRestriction
13:31:26 <EvanR> :t count_uniq works
13:31:28 <lambdabot> error:
13:31:28 <lambdabot>     Variable not in scope: count_uniq :: t0 -> t
13:31:28 <lambdabot> error:
13:33:09 <glguy> mjdominus: It deduced the very type you annotated, but becauase the definition of count_uniq didn't have a type signature the monomorphism restriction was triggered and GHC objected to not having a good monomorphic type to default to
13:33:28 <nitrix> mjdominus: foo xs = (len, len) where len = genericLength xs. Notice how `len` has the type `Num a => a`. Without monomorphic restriction, the length will be computed twice and you'll obtain a tuple of type :: (Num a, Num b) => (a, b), with monomorphism restriction, the compiler understands you meant `len` to not be recomputed but rather memoized and shared, and thus the tuple gets the type :: Num a => (a, a)
13:33:38 <glguy> Basically it said: Eq a => [a] -> Int   needs to be made monomorphic, but I don't know what to replace a with
13:33:53 <glguy> mjdominus: You can see what type it came up with in the error message
13:34:05 <mjdominus> glguy: where "needs to be made monomorphic" is because it wants to comply with the MR?
13:34:23 <mjdominus> And the type signature explicitly tells the compiler not to try to make the function monomorphic?
13:34:24 <glguy> mjdominus: Yeah
13:34:26 <glguy> right
13:34:48 <mjdominus> nitrix: thanks, that is a helpful example.
13:34:56 <glguy> mjdominus: http://lpaste.net/347946
13:35:21 <mjdominus> My error message was significantly less transparent :)
13:35:26 <nitrix> mjdominus: When MR is enabled, it applies on every declarations with no left hand side arguments and no type annotations that'd conflict with inferring a monomorphic type.
13:35:32 <glguy> mjdominus: this is GHC 8.0.1
13:36:07 <lpaste> mjdominus annotated “length . nub” with “length . nub (annotation) (annotation)” at http://lpaste.net/347940#a347947
13:36:37 <nitrix> mjdominus: so, `foo = ...` is affected, `foo x = ...` is not affected. Then `foo :: Num a => a; foo = ...` is also not affected because there's a polymorphic annotation.
13:37:37 <glguy> mjdominus: typeclass constraints behave like (invisible) function arguments, so the restriction is intended to make definitions that don't appear to be functions from behaving like them and recomputing their values at each use site
13:37:44 <mjdominus> nitrix: Why is foo x unaffected not subject to the same restriction for the same reasons?
13:38:02 <mjdominus> glguy: Thanks, a light is dawning.
13:38:13 <mjdominus> nitrix: I think glguy just answered my question.
13:38:16 <nitrix> mjdominus: Arbitrary decision. We assume if the function receives a parameter, you intention is probably not to have it memoized as a constant.
13:38:54 <mjdominus> Thanks very much for your patience.  I hope I have internalized it this time.
13:40:39 <nitrix> It's simplified quite a lot, but I wanted to get down to a practical example with sharing so that you understand there's are two sides of a coin to solve and a line had to be drawn somewhere to keep reasonable performance.
13:40:39 <nil_> if  f, g, h :: a -> b
13:40:44 <nil_> and  f x = if x < 0 then g x else h x
13:40:53 <nil_> then f is a *what* of g and h?
13:41:41 <nil_> (<0) is just an example, it could be any kind of test.
13:41:59 <Koterpillar> nil_: domain?
13:42:06 <Koterpillar> oh, sorry, ignore
13:42:29 <EvanR> i dont understand the explanation involving sharing
13:42:33 <nil_> the domains of g and h are joined together, that's king of the point.
13:43:25 <Koterpillar> the domains are the same
13:43:54 <nil_> nope, f extends both their domains. :)
13:44:08 <Koterpillar> f, g, h :: a -> b
13:44:18 <nil_> ah, right, I'm wrong about that part.
13:45:08 <nil_> I mean g only makes sense if the test is true (i.e. for x in (-inf,0)) and h only makes sense for x in [0,inf).
13:45:39 <nil_> g and h are not total functions. that's what I mean when I say their domains are extended.
13:46:10 <Koterpillar> I see; something like 'sum' springs to mind but that's too vague
13:46:18 <geekosaur> f is the intersection of the domains of g and h
13:46:28 <nil_> ...huh.
13:46:35 <geekosaur> (which is indeed a generalization of sum)
13:46:55 <Koterpillar> I thought intersection of anything is less or equal than the parts?
13:47:00 <nil_> you mean f's domain is the intersection of the other two domains, yes?
13:47:08 <geekosaur> sorry, yes
13:47:11 <nil_> got it.
13:47:17 <nil_> is there a word for f?
13:47:45 <lyxia> an extension of g and h
13:47:58 <acowley> Anyone using IHaskell with GHC8?
13:48:14 * hackagebot printcess 0.1.0.0 - Pretty printing with indentation, mixfix operators, and automatic line breaks.  https://hackage.haskell.org/package/printcess-0.1.0.0 (m0rphism)
13:48:25 <nil_> lyxia: that's going to be it, thanks!
13:50:13 <wespiser> are there any data science or compiler projects that need help?
13:50:42 <johnw> GHC could use an expert in linkers
13:50:43 <MarcelineVQ> wespiser: https://ghc.haskell.org/trac/ghc/wiki/Newcomers
13:52:25 <ggVGc> I'd like every compiler to be better please
13:52:32 <ggVGc> and static linking to not be dead
13:53:16 <geekosaur> Koterpillar, hm, now you have me wondering if I have them reversed again
13:53:20 <geekosaur> and in fact I probably do, sigh
13:53:30 <geekosaur> union, not intersection
13:53:45 * geekosaur always wants to pair union with and instead of or /o\
13:54:33 <Koterpillar> geekosaur: you have that wrong again! union \o/ intersection /o\
13:54:52 <geekosaur> *eyeroll*
13:55:51 <geekosaur> there's a simple mnemonic involving the symbols used for them, except I never think in terms of the symbols
13:55:54 <mjdominus> Thanks again folks.  I'm always impressed at how helpful this channel is.
13:56:09 <codedmart> I have a cluster of rethinkdb servers. The haskell driver for rethinkdb only handle a connection to a single instance. Is resource-pool to allow for connections to multiple instances? Is there something else I should use or look at?
13:56:20 <jle`> > S.fromList [1,2,3] /\ S.fromList [2,3,4]
13:56:23 <lambdabot>  fromList [2,3]
13:56:30 <jle`> i just remember /\ for And
13:56:33 <jle`> heh
13:56:43 <jle`> and |_| for union i guess
13:57:17 <geekosaur> that's the symbol one, yeh (more precisely for this, cup ~ vel)
13:57:32 <geekosaur> but I dont think in mathematical symbols
13:58:23 <slack1256> ∪
13:59:33 <lyxia> In German "u" sounds like French "ou" which means "or". ezpz
14:02:45 <ottanta> so I'm doing some debugging right now. why is it that the types of my functions have to be a -> IO ()? what's the () for? like in a simple way cause I guess it has to do with it being a monad
14:02:45 <jle`> i wonder if those whose first language are languages with logogram writing systems think in symbols
14:03:11 <wespiser> if you had a student that just finished learning mtl evaluators, how long would it take to teach them enough to contribute to ghc? and not just spelling errors in comments!
14:03:17 <jle`> ottanta: it doesn't have to do with monads :)
14:03:30 <jle`> ottanta: an 'IO ()' is an IO action that produces a () as a result
14:03:37 <jle`> a '()' is sort of just a dummy value
14:03:43 <ottanta> ohhh
14:03:52 <jle`> the basic intent is that we only carea bout the action's effects and not its result
14:03:55 <ottanta> wespiser: I have no idea
14:04:15 <jle`> wespiser: it depends on the contribution
14:04:19 <shapr> and the person
14:04:36 <wespiser> I'm interested in it, but it may be a bridge too far, I might focus my efforts on writing a Scheme implementation with LLVM
14:04:53 <wespiser> with a tutorial
14:06:25 <nil_> I hear GHC is /really/ complicated though.
14:06:42 <jle`> i've heard different reports
14:06:59 <ottanta> wespiser: if you're into scheme there's a dialect of it that has a lot of good programming concepts, including typing and classes, called racket, which can also just be used as a scheme interpreter
14:08:05 <wespiser> no, I just use Scheme as an teaching language
14:08:51 <wespiser> S-Expressions are easy
14:11:23 <joe9> I am using the deriving (Pretty) in the data structure. ghci errors out. The stack build and exec of the executable run fine. I tried with :set -XDeriveAnyClass and :set -XDeriveGeneric
14:11:27 <joe9> but, they do not seem to help.
14:11:48 <joe9> does ghci support deriving (<custom>) ?
14:11:56 <joe9> this is ghci 8.0.1
14:12:11 <joe9>     Not in scope: type constructor or class âPrettyâ
14:12:14 <joe9> is the message I get.
14:13:15 * hackagebot cayley-client 0.2.1.1 - A Haskell client for the Cayley graph database  https://hackage.haskell.org/package/cayley-client-0.2.1.1 (MichelBoucey)
14:14:45 <lyxia> import Pretty then
14:15:15 <joe9> lyxia: I do. It is in the module. oh, import at the ghci prompt?
14:16:08 <joe9> lyxia: http://codepad.org/Q20mp5w6
14:16:21 <joe9> lyxia: not sure how to show the class at the ghci prompty
14:16:46 <joe9> I think info Pretty should work. let me try again.
14:17:23 <joe9> lyxia: got it. wrong module version.
14:18:45 <joe9> lyxia: Thanks.
14:19:08 <lyxia> I didn't do much :)
14:23:16 * hackagebot namespace 0.1.2.3 - A Generic Haskell library for managing namespaces  https://hackage.haskell.org/package/namespace-0.1.2.3 (xuhao)
14:37:15 <tyoverby> totally just shooting in the dark here, but a while back I saw that someone wrote a parser for a syntax that handled haskell-like whitespace-significant syntax
14:38:39 <tyoverby> I can't find the parser again, but it looked really handy
14:41:00 <ottanta> how do I enable warnings when I'm using ghci to load my code
14:41:34 <joe9> ottanta: -Wall
14:41:41 <ottanta> ty
14:41:50 <Tuplanolla> You can use `:set -Wall` within as well.
14:42:37 <MarLinn> and you can also put that into your .ghci to make it the default
14:49:57 <ottanta> MarLinn: is that just in my $HOME on *nix?
14:53:17 * hackagebot printcess 0.1.0.1 - Pretty printing with indentation, mixfix operators, and automatic line breaks.  https://hackage.haskell.org/package/printcess-0.1.0.1 (m0rphism)
14:56:47 <lpaste> ottanta pasted “No title” at http://lpaste.net/2768823217953964032
14:57:04 <ottanta> yeah so I wrote this, and it does what I want, I just get the feeling it's shitty
14:57:16 <ottanta> so I was hoping for feedback
14:58:24 <kadoban> ottanta: Using length like that isn't so good. You can use a tad more pattern matching for that
14:58:30 <ottanta> yeah 
14:58:49 <kadoban> Or at least use 'null' instead
14:58:52 <ottanta> like, should I just keep messing around with it until I get it
14:59:00 <ottanta> yeah the compiler tells me to use null, is that the same as []? or 
14:59:34 <kadoban> Well I think you just want uhm ...  intersperseList _ [xs] = xs    for one case
14:59:38 <jle`> @src null
14:59:38 <lambdabot> null []    = True
14:59:38 <lambdabot> null (_:_) = False
14:59:44 <ottanta> Oh!
15:00:13 <kadoban> Or equivalently intersperse _ (xs:[]), whichever you find more appealing
15:00:19 <jle`> down with bools
15:00:31 <ottanta> when I tried to do that it told me that I had a conflicting pattern earlier
15:00:40 <ottanta> and warned me about not using the first var which, _ totally covers
15:00:46 <ottanta> so I just didn't really try I guess
15:01:03 <kadoban> Hmm, might have been in the wrong order possibly? It matters what order you put them in
15:01:24 <ottanta> could've been
15:01:38 <ottanta> I keep finding myself realizing I'm using haskell entirely wrong
15:01:39 <ottanta> :)
15:01:55 <kadoban> Like intersperse sep (xs:xss)  would also match that, so if *that's* first, then  intersperse _ [xs] will never match anything
15:02:41 <ottanta> !!
15:02:43 <ottanta> that was it
15:03:25 <Welkin> ottanta: a:[] is rthe same as [a]
15:03:38 <Welkin> > 1:2:3:[]
15:03:41 <lambdabot>  [1,2,3]
15:03:46 <Welkin> > [1]
15:03:48 <lambdabot>  [1]
15:03:49 <Welkin> > 1:[]
15:03:51 <lambdabot>  [1]
15:04:21 <ottanta> Welkin: why are you telling me this
15:04:31 <ottanta> like it's appreciated but I'm not following what it's connected to
15:04:45 <Welkin> ottanta: kadoban's example
15:05:00 <ottanta> oh!
15:05:39 <ottanta> so in pattern matching [foo]  is a list with one element?
15:05:45 <Welkin> yes
15:06:51 <ottanta> Thanks!
15:10:47 <MarLinn> ottanta, Sorry, I didn't see the mention. Yes, you can put a .ghci in your $HOME, but also in your project folders. Ghci should then pick the one you expect.
15:11:42 <ottanta> MarLinn: so, basically, child directories before parents?
15:13:45 <MarLinn> ottanta, here's the doc: https://downloads.haskell.org/~ghc/7.2.2/docs/html/users_guide/ghci-dot-files.html
15:13:50 <ottanta> thanks
15:14:01 <ottanta> MarLinn: thanks!
15:14:04 <MarLinn> Don't want to say anything wrong XD
15:15:02 <ottanta> oh no it's fine, I need to get in the habit of being able to find documentation anyway
15:48:20 * hackagebot printcess 0.1.0.2 - Pretty printing with indentation, mixfix operators, and automatic line breaks.  https://hackage.haskell.org/package/printcess-0.1.0.2 (m0rphism)
15:49:09 <delYsid> cabal hell :(
15:49:34 <lyxia> isn't that a thing of the past
15:49:44 <Axman6> m0rphism: that's a great name for a package
15:50:28 <delYsid> lyxia: for some people
15:50:59 <MarLinn> "cabal install hell" does have a certain ring to it
15:51:06 <Axman6> I assume you're not using stack then?
15:52:56 <kuribas> removing .ghc or upgrading ghc/cabal-install usually solved it for me.
15:53:24 <kuribas> I last had an issue which was because my ghc version couldn't work with a newer version of Vector.
15:53:27 <pharaun> sounds like a great band name
15:55:10 <MarLinn> I stopped calling it "hell" and now say "purgatory" because whenever I fell into it, it turned out I was paying for earlier sins
15:55:30 <pikajude> Does anyone know if http-client's httpLbs will request keepalive by default?
15:56:22 <pikajude> or do I have to turn it on?
15:56:39 <Squarism> in the 16th century you could enter the catacombs under rome to shorten your time in the purgatory - for a fee to the Vatican. Sadly its been removed
15:56:49 <m0rphism> Axman6: Thanks :) Maybe I should include a drawing of the "pretty printcess" in the documentation :3
15:57:14 <Tuplanolla> Make a resource manager for it and call it `printcesspoll`, m0rphism.
15:57:20 <MarcelineVQ> pikajude: what does the docs say about it?
15:57:28 <pikajude> MarcelineVQ: it says Manager enables keep-alive
15:57:31 <pikajude> doesn't say whether it's turned on or not
15:57:33 <srk> Squarism: like to shorten your time on earth? :D
15:57:44 <Tuplanolla> I managed to write `printcesspool` wrong.
15:57:45 <pikajude> and I'm not sure whether you have to specifically send Connection: keep-alive or not
15:58:12 <Axman6> m0rphism: agreed
15:58:44 <Squarism> srk, if one sees this as the purgatory maybe. I thought it was after life on earth.
16:00:31 <MarLinn> pikajude, in cases like this I usually just look at the source. Even if I can't read it, that fact alone usually tells me something
16:01:47 <pikajude> it didn't help
16:05:21 <pikajude> well apparently, in HTTP 1.1, connections are all considered persistent by default and you have to opt-out
16:05:26 <pikajude> like node does by default
16:05:30 <pikajude> so I don't have anything to worry about
16:05:53 <hpc> is that part of HTTP 1.1 or in implementations?
16:06:16 <hpc> because technically you can just decide to close the connection and oops, it's single-page connections again
16:14:35 <lpaste> ottanta pasted “No title” at http://lpaste.net/1464521034039296000
16:15:06 <ottanta> yeah so, question included in the pastebin there
16:15:42 <geekosaur> you can't pattern match a constructor
16:15:49 <glguy> with a wildcard
16:15:54 <geekosaur> yes, thar
16:16:02 <ottanta> huh
16:16:08 <bobjason[m]> Hello
16:16:11 <geekosaur> constructors are how it knows what everything else looks like; you have to match them explicitly
16:16:23 <ottanta> I guess I'll have to reread the section on that :/
16:16:33 <glguy> ottanta: you can't pattern match with Tree, either
16:16:39 <glguy> you need Node or Empty
16:16:48 <ottanta> OH 
16:16:52 <ottanta> Node is the constructor
16:16:54 <ottanta> Derp
16:16:56 <ottanta> thanks!
16:17:12 <ottanta> I forgot the type constructor and the class constructors were different 
16:17:25 <ottanta> data constructors, not class constructors
16:17:31 <ottanta> thanks!
16:25:40 <heebo> lo
16:26:17 <heebo> noddy question: how do i print out a json object such that it looks like json
16:26:49 <Koterpillar> encode?
16:27:11 <heebo> im using aeson, will try encode
16:28:06 <heebo> thanks looks right
16:30:15 <ggVGc> man, I just ended up here, https://oleksandrmanzyuk.wordpress.com/2012/06/10/monads-from-monoids/
16:30:33 <ggVGc> pretty dense, coming from a not-much-type-theory/math background
16:31:54 <ottanta> man that redefinition of a monoidal category 
16:33:22 * hackagebot cabal-file-th 0.2.4 - Template Haskell expressions for reading fields from a project's cabal file.  https://hackage.haskell.org/package/cabal-file-th-0.2.4 (NickPartridge)
16:34:18 <ottanta> ggVGc: have you studied any algebra that exposes you to groups, magmas, semigroups, etc, or like, linear algebra where you get exposed to vector spaces
16:45:33 <ggVGc> ottanta: a bit, but it was years ago
16:48:24 <lyxia> Are the template haskell quasiquotes e/t/d/p magic, or are they defined somewhere
16:49:52 <mgsloan> magic, unfortunately
16:54:03 <lyxia> surely someone has wanted to insert actual haskell in their quotes
16:54:28 <bentownsend> o
16:54:51 <mgsloan> lyxia: Yeah, people tend to use haskell-src-exts and haskell-src-meta for that
16:55:47 <lyxia> mgsloan: great, thank you!
16:58:19 <mgsloan> welcome!  Note that it's a bit of an incomplete solution, but does work for most small chunks of haskell
17:36:23 <ottanta> it's kinda cool that so many people join and quit this channel
17:38:48 <chreekat> ottanta: iirc it's one of the biggest channels on freenode
17:39:04 <chreekat> I tell my client to ignore joins/parts/quits
17:39:23 <ottanta> I kinda doubt it's one of the biggest
17:39:28 <ottanta> but that's cool regardless
17:41:08 <geekosaur> it's #6 biggest channel
17:41:09 <kadoban> ottanta: It is currently the 6th biggest channel on freenode, and it's consistently in the same range.
17:41:37 <kadoban> The bigger ones are ##linux, distros and #python
17:41:53 <ottanta> oh nice
17:42:14 <ottanta> I just added a filter to filter out most of the joins/parts
17:42:17 <ottanta> on my client
17:43:13 <ottanta> has freenode's overall use gone down over the past like, 8 or so years
17:43:25 <ottanta> I remember it used to be _the_ place everyone asked technical questions 
17:45:50 <geekosaur> not that noticeably. in terms of numbers, the top 8 channels (or at least the ones that existed then; good luck finding #node.js in 2004!) have all grown since I started using it, ut the growth has been a little slower since things like slack and discord came along
17:46:36 <geekosaur> that said, it's worth noting that slack groups always want to link to freenode channels, because established communities usually don't want to rip up their roots and move to the new hotness
17:47:26 <chreekat> ottanta: looks like a steady increase until a max of 98966 users in 2014, and now sloping gently the other way. ~82000 now. This according to irc.netsplit.de
17:48:16 <ottanta> that's good
17:52:05 <ottanta> most IRC networks I used to use have kinda died
17:54:33 <geekosaur> one big difference is that freenode has been "professionally" managed from the start, whereas on most other IRC networks every server has it own operator(s) and no real working together to maintain it in any sense beyond the minimal technical one
17:54:56 <geekosaur> (and virtually no management on the community level, which is where freenode has always been different)
17:57:09 <geekosaur> I first got on freenode because I was asked to manage a pair of channels that were relocating from (iirc, been a long time) efnet. since then several other projects and organizations I've worked with have also moved from other irc networks, and I've also seen many others I wasn't involved with move
17:57:49 <pooria> Hey folks, I'm a python developer working in Data Mining and Machine Learning, is there any convincing case to be made for my case to switch to Haskell?
17:59:14 <lordcirth> pooria, you would probably be most interested in the safety Haskell offers when working with threads
17:59:43 <lordcirth> Not to mention a much stronger (better/safer) type system than Python
18:00:17 <pooria> @lordcirth, I don't use much of multi thread programming, I'll be using frameworks such as Tensorflow that takes care of concurrency 
18:00:17 <lambdabot> Unknown command, try @list
18:01:07 <pooria> lordcirth: any special case for ML and Data Mining research?
18:01:23 <lordcirth> pooria, how often do you have a bug that is caught partway through, or at the end, of a long compute run?
18:01:49 <pooria> since we do interactive computing most of the time, we don't end up doing test at the long compute run 
18:02:08 <pooria> lordcirth: what is more important for me tho, is the community of ML in haskell 
18:02:19 <pooria> do you know any community, library regardin ML ?
18:02:34 <pooria> in other words, how mature is haskell's ML community 
18:02:37 <lordcirth> I am a Haskell beginner.  No doubt others here know.
18:02:57 <peddie> pooria: generally software development in haskell is light-years ahead of in python, but the base of existing, well-maintained and widely used libraries for data science and machine learning in python is light-years ahead of haskell
18:03:21 <pooria> peddie: fair enough 
18:03:32 <peddie> pooria: so no, probably not much case :)
18:04:08 <ottanta> yeah geekosaur there's certain channels I still have to go to efnet for, like when trying to get ahold of certain FreeBSD developers
18:06:54 <ottanta> pooria: I think R has a better ML/big data analysis setups but that language is... specific
18:07:43 <chreekat> pooria: For ML, data science, and lots of other categories, check out http://www.haskellforall.com/2015/08/state-of-haskell-ecosystem-august-2015.html#machine-learning, or google around for discussions on that post
18:07:48 <pooria> ottanta: yeah am not a big fan of R, and Python syntax doesn't satisfy me (although 100% of my work is done in python with "very very" great libraries)
18:07:54 <ottanta> but I think it would depend on what algorithms you're going for
18:08:07 <ottanta> because I think some of the more computationally intensive ones should be written in C if you're doing them by hand
18:08:31 <ottanta> like terrible n! stuff
18:09:20 <pooria> ottanta:  python has good libraries that are "linked" with that are implemented in C or Fortran and I was wonder if the same has happened for haskell 
18:09:34 <boxscape> > let p = [1..5] in zipWith3 (\a b c -> a ++ b ++ c) (inits p) (map (pure . negate) p) (tail $ tails p)
18:09:36 <lambdabot>  [[-1,2,3,4,5],[1,-2,3,4,5],[1,2,-3,4,5],[1,2,3,-4,5],[1,2,3,4,-5]]
18:09:39 <boxscape> is there a better way to do this?
18:09:56 <ottanta> pooria: I would assume so, Haskell's C FFI is well documented
18:10:11 <ottanta> i'd refer to that link though
18:10:26 <pooria> ottanta: thanks anyway, I'm checking the link 
18:10:42 <boxscape> > let p = [1..5] in zipWith3 (\a b c -> a ++ (b:c)) (inits p) (map negate p) (tail $ tails p) -- actually, that's a bit better I suppose
18:10:44 <lambdabot>  [[-1,2,3,4,5],[1,-2,3,4,5],[1,2,-3,4,5],[1,2,3,-4,5],[1,2,3,4,-5]]
18:12:22 <EvanR> has anyone heard of "composable free monads"
18:12:32 <EvanR> like, we know monad transformers dont compose
18:12:39 <EvanR> or something
18:12:50 <EvanR> but do free monad transformers compose
18:34:09 <solrize> i don't see an obvious composition but i don't understand this stuff.
18:34:56 <solrize> dunno what you mean about a free monad transformer either
18:35:22 <Axman6> it'd definitely possible to compose two effects into one free monad
18:53:28 * hackagebot namespace 0.1.3.0 - A Generic Haskell library for managing namespaces  https://hackage.haskell.org/package/namespace-0.1.3.0 (xuhao)
19:08:29 * hackagebot wuss 1.1.2 - Secure WebSocket (WSS) clients  https://hackage.haskell.org/package/wuss-1.1.2 (fozworth)
19:32:51 <ottanta> >map (\x -> x+2) [1..10]
19:32:59 <ottanta> does it need a space
19:33:09 <ottanta> :i map
19:33:13 <ottanta> :(
19:33:34 <glguy> You need a space after the > specifically, and lambdabot doesn't do :info
19:34:07 <ottanta> > map (\x -> x+2) [1..10]
19:34:09 <lambdabot>  [3,4,5,6,7,8,9,10,11,12]
19:34:15 <ottanta> !! thanks glguy!
19:35:43 <Axman6> @info Bool
19:35:43 <lambdabot> Bool
19:35:54 <Axman6> (it's correcting indo to echo IIRC)
19:35:56 <Axman6> info*
19:36:01 <Koterpillar> @enfo Bool
19:36:02 <lambdabot> Maybe you meant: undo echo
19:36:30 <ottanta> @info Monad
19:36:30 <lambdabot> Monad
19:36:39 <Koterpillar> @info ZZZZZZZZZZZZZZZ
19:36:39 <lambdabot> ZZZZZZZZZZZZZZZ
19:36:47 <ottanta> @info /me
19:36:47 <lambdabot> <unknown>.hs: 1: 1:Parse error: /
19:36:54 <Axman6> @echo @echo test
19:36:54 <lambdabot> echo; msg:IrcMessage {ircMsgServer = "freenode", ircMsgLBName = "lambdabot", ircMsgPrefix = "Axman6!~Axman6@pdpc/supporter/student/Axman6", ircMsgCommand = "PRIVMSG", ircMsgParams = ["#haskell",":@
19:36:54 <lambdabot> echo @echo test"]} target:#haskell rest:"@echo test"
19:36:56 <MarcelineVQ> info becomes undo iirc
19:37:00 <Axman6> D:
19:37:03 <Axman6> um
19:37:09 <ottanta> @info \/me 
19:37:09 <lambdabot> <unknown>.hs: 1: 1:Parse error: \/
19:37:20 <MarcelineVQ> @info do { x <- [1..10]; return x; }
19:37:21 <lambdabot> [1 .. 10] >>= \ x -> return x
19:37:27 <ottanta> @echo @echo
19:37:27 <lambdabot> echo; msg:IrcMessage {ircMsgServer = "freenode", ircMsgLBName = "lambdabot", ircMsgPrefix = "ottanta!~80@unaffiliated/ottanta", ircMsgCommand = "PRIVMSG", ircMsgParams = ["#haskell",":@echo @echo"]}
19:37:27 <lambdabot> target:#haskell rest:"@echo"
19:37:27 <Axman6> ah yes
19:37:41 <glguy> You can toy with lambdabot in /msg
19:37:45 <ottanta> kk
19:37:52 <Axman6> hmm, I can't tell if that's a problem or not...
19:38:06 <Axman6> glguy: was it you who run lambdabot these days?
19:38:09 <Axman6> runs*
19:39:04 <MarcelineVQ> I was under the impression it was int-e, by way of hearsay only though
19:39:24 <Axman6> ah that might be right. In my mind it's still Cale
19:39:51 <ottanta> all of the responses  to @echo are that data structure
19:43:30 * hackagebot ghcjs-dom-jsffi 0.7.0.2 - DOM library using JSFFI and GHCJS  https://hackage.haskell.org/package/ghcjs-dom-jsffi-0.7.0.2 (HamishMackenzie)
19:43:32 * hackagebot ghcjs-dom 0.7.0.2 - DOM library that supports both GHCJS and GHC  https://hackage.haskell.org/package/ghcjs-dom-0.7.0.2 (HamishMackenzie)
19:43:33 <joe9> For some reason, a module I wrote is hanging. I am trying to figure out why. when I try to :break , I get this message: cannot set breakpoint on displayPretty: module Text.PrettyPrint.GenericPretty is not interpreted
19:43:44 <joe9> Is there any way to load a module as interpreted?
19:44:05 <joe9> TMPDIR=/tmp/ghc stack exec ghci -- -Wall Main.hs -- is how I am loading Main
19:44:21 <ottanta> uhm hm
19:44:29 <joe9> and then I am trying to set a breakpoint in a module's function
19:44:30 <ottanta> I'm trying to build my own data type but I want to put a type constraint on it 
19:44:55 <ottanta> oh
19:47:04 <joe9> got it, :load <path and module name>.hs
19:47:05 <geekosaur> joe9, try loading it explicitly with a * prepended
19:51:03 <joe9> geekosaur: ok, Thanks.
19:51:59 <joe9> geekosaur: like this: http://codepad.org/lbE5p2I9
19:53:04 <joe9> geekosaur: no luck with these too: http://codepad.org/V5T01nFE
19:53:31 * hackagebot stackage-curator 0.14.3 - Tools for curating Stackage bundles  https://hackage.haskell.org/package/stackage-curator-0.14.3 (MichaelSnoyman)
19:59:19 <lpaste> xcmw pasted “How can I write a more generic type for z?” at http://lpaste.net/348013
20:07:18 <isovector> > fix (*0)
20:07:24 <lambdabot>  mueval-core: Time limit exceeded
20:07:37 <isovector> :/ why isn't that = 0?
20:07:58 <joe9> geekosaur: When I do: :load *Main.hs, http://codepad.org/RfIoEtKr still gives methis error
20:08:30 <Koterpillar> isovector: because it's not lazy
20:09:25 <Axman6> > fix (0*) :: Natural
20:09:27 <lambdabot>  0
20:09:36 <Axman6> > fix (0*) :: Integer -- should fail
20:09:40 <lambdabot>  mueval-core: Time limit exceeded
20:10:00 <isovector> Koterpillar: Axman6: ahh, perfect. thanks. 
20:10:16 <joe9> geekosaur: seems to be the same question too http://stackoverflow.com/questions/28570367/debugging-io-in-a-package-module-inside-ghci
20:10:30 <Axman6> Natural is data Nautral = Z | S Natural
20:11:57 <isovector> came up with a clever solution to a physics problem using `fix` and was doing a test to make sure it worked how i thought. good thing i checked :)
20:14:02 <Axman6> yeah fix doesn't work well on strict functions
20:15:01 <monochrom> > Z :: Natural
20:15:03 <lambdabot>  error:
20:15:03 <lambdabot>      Data constructor not in scope: Z :: Natural
20:17:04 <Koterpillar> @let fixStrict f start = fst . head . dropWhile (uncurry (/=)) . (\l -> zip l (tail l)) $ iterate f start
20:17:06 <lambdabot>  .L.hs:164:1: warning: [-Woverlapping-patterns]
20:17:06 <lambdabot>      Pattern match is redundant
20:17:06 <lambdabot>      In an equation for ‘fixStrict’: fixStrict f start = ...
20:17:20 <Koterpillar> > fixStrict (/ 2) 1
20:17:22 <lambdabot>  0.0
20:17:46 <Koterpillar> > fixStrict cos 1
20:17:48 <lambdabot>  0.7390851332151607
20:17:53 <ddk> hello all
20:18:07 <isovector> what's the intuition behind Writer's `mfix`? does it accumulate anything `tell`ed while finding the fixpoint of the resulting `a`?
20:18:24 <monochrom> No.
20:18:48 <monochrom> Read my https://wiki.haskell.org/MonadFix
20:19:26 <isovector> monochrom: will do. thanks
20:21:50 <ddk> i m working for a toy text editor and strugling to choose the best data structure which will give best performence for my model of user text data i.e. of the form of [user_lines]...my operations are to edit this interactively ..i.e. inser delete navigate replace etc..can someone suggest me something about it plzz..
20:22:01 <isovector> this stuff hurts my brain
20:22:25 <isovector> monochrom: reading this gives me the impression that only the actions at the fixpoint will be invoked. yes?
20:22:45 <monochrom> I don't understand that sentence.
20:23:16 <isovector> ehh. i'll just do an experiment and see :)
20:23:19 <monochrom> But you can always perform experiments to refute your hypotheses.
20:23:31 <monochrom> And it will always be a refutation.
20:24:17 <ddk> i m working for a toy text editor and strugling to choose the best data structure which will give best performence for my model of user text data i.e. of the form of [user_lines]...my operations are to edit this interactively ..i.e. inser delete navigate replace etc..can someone suggest me something about it plzz..
20:24:52 <nshepperd> isovector: if your function contains one 'tell' call, the result will only contain one 'tell' as well
20:25:11 <monochrom> The most accurate describe-in-just-five-English-words I know is "you can haz forward reference"
20:25:57 <nshepperd> yes
20:26:00 <nshepperd> there's no "repeating actions until fixpoint" or anything like that.
20:26:08 <ddk> would some one help me also plzz ~~Q
20:26:25 <Koterpillar> ddk: read the Atom blog, they were talking about something called 'ropes'
20:26:42 <kadoban> ddk: Yeah, I think ropes are commonly used
20:27:08 <isovector> yeah, that's what my test says too. that's some spooky stuff.
20:27:10 <kadoban> I'm not sure if they play well in persistant land or if something else works better here actually.
20:27:32 <ddk> kadoban : okk.. is rope a data structure in haskell 
20:27:59 <isovector> ddk: https://hackage.haskell.org/package/yi-rope this is what i used when i wrote a toy editor in hs 
20:28:07 <kadoban> Are you asking if there's a haskell implementation? I don't particularly know.
20:28:12 <kadoban> I guess so, heh.
20:28:35 <ddk> ok.. thanks
20:29:07 <ddk> isovector : i want to talk to you would you help me a little bit
20:29:21 <isovector> ddk: what's up?
20:29:30 <orzo> I intend to have a http interface by having a local web server.  What's the best way to do that in haskell?
20:29:49 <isovector> orzo: have you checked out servant?
20:30:00 <orzo> no
20:30:15 <isovector> it'll explode your brain :)
20:32:04 <ddk> isovector : can i text you personally ...~~Q 
20:33:26 <isovector> ddk: https://github.com/isovector/eden here's my editor. code is probably more helpful than words can be
20:34:06 <ddk> isovector : thanks first i try to get it ... thanks a lot 
20:37:49 <lpaste> glguy pasted “for xcmw” at http://lpaste.net/348016
20:38:29 <glguy> ?tell xcmw Is this what you're working toward?  http://lpaste.net/348016
20:38:29 <lambdabot> Consider it noted.
20:42:07 <orzo> it looks like my distro has released 8.0.1 and I'm still using ghc 7.10.3.  Browsing the list of new goodies, I see ApplicativeDo as the only feature i pine for.
20:42:44 <monochrom> I like the new bullets in error messages :)
20:42:45 <orzo> If 8.0.1 ghc is actually a faster compiler than 7.10.3, then I pine for that too.  I notice "performance" improvements are mentioned, but I'm not clear if they mean compiling or runtime
20:43:12 <orzo> anyone have a rough impression if ghc 8 is a faster compiler or not?
20:43:33 * hackagebot yesod-websockets 0.2.4.1 - WebSockets support for Yesod  https://hackage.haskell.org/package/yesod-websockets-0.2.4.1 (MichaelSnoyman)
20:45:03 <WhoreTrap66> ghc 8 is a bit buggy for me, I had to revert.
20:46:31 <orzo> what bug was the deal breaker?
20:48:16 <orzo> https://mail.haskell.org/pipermail/haskell-cafe/2016-May/123995.html says he experienced massive performance regression from 7.10.3 to 8.0.1
20:48:34 <orzo> i'm already unhappy with the speed of 7.10.3, so I guess i wont upgrade
20:48:38 <WhoreTrap66> It was a bit sluggish and threw errors all the time
20:48:58 <martinium> 8.0.2 is a major bug fix release
20:49:04 <martinium> will be addressing those concerns
20:49:12 <martinium> based on what I've read
20:49:15 <martinium> ;)
20:49:33 <WhoreTrap66> :)
20:49:35 <martinium> it's already in Release Candidate
20:49:46 <martinium> so fixes for the issues soon
20:49:58 <orzo> cool
20:51:29 <monochrom> It was a release candidate for Black Friday Sale. Hopefully it will be a release final for Boxing Week Sale. :)
20:53:34 <WhoreTrap66> I hate this time of year, always broke from the sales, to much good to pass up over one single weekend lol.
21:08:34 * hackagebot monad-logger-syslog 0.1.3.0 - syslog output for monad-logger  https://hackage.haskell.org/package/monad-logger-syslog-0.1.3.0 (MichaelSnoyman)
21:15:19 <Forlorn> Hi, is there somekind of local/offline means of searching for Standard Library functions?
21:16:30 <Forlorn> e.g a `random` function.
21:16:41 <kadoban> Forlorn: You can set up hoogle on your local computer, as a command line tool
21:16:50 <Forlorn> kadoban, nice
21:17:35 <Cale> I usually just try to make sure I have an internet connection while programming :)
21:17:37 <Forlorn> kadoban, I am trying it right now, thanks
21:17:55 <Koterpillar> "How can I set up an offline #haskell?"
21:18:09 <Forlorn> Cale, I don't have a browser on this computer, and I don't want to use some ncurses browser either :/
21:18:18 <Cale> Though you can also tell cabal-install to install docs by setting documentation: True in your ~/.cabal/config
21:18:59 <Cale> The docs are HTML though, so you'd also want a browser to view them
21:19:23 <kadoban> Forlorn: Good luck. I've never done it myself, I hope it's easy.
21:19:27 <monochrom> "less" can do HTML
21:19:33 <Cale> heh
21:19:43 <Cale> such browser
21:19:44 <Forlorn> monochrom, didn't know that
21:19:51 <monochrom> Actually I think it calls a helper program, and you could use that helper program directly.
21:20:18 <monochrom> It also calls yet another helper program to do PDF actually.
21:20:18 <Forlorn> monochrom, what kind of helper program? hoogle?
21:20:20 <Cale> Forlorn: Do you... not have a modern display?
21:20:54 <Forlorn> Cale, yeah, but it's laggy, I doubt I could use a browser without losing my sanity
21:21:01 <monochrom> I forgot which program is its helper program. But there is a way to find out by investigating its default config.
21:21:24 <Forlorn> even urxvt lags a bit
21:21:26 <kadoban> Wait ... less can handle PDF you're saying?
21:21:28 <Cale> Forlorn: oh, because you're ssh'ed into something?
21:21:39 <Forlorn> Cale, nope
21:21:45 <monochrom> It calls a helper program to give it text.
21:21:53 <kadoban> Hmm, interesting
21:21:54 <Forlorn> Asus EEE 1000H it's old.
21:21:56 <Clint> kadoban: man lesspipe
21:21:58 <phanimahesh> kadoban: less uses lesspipe, and can run arbitrary programs to try to get text out of pretty much anything
21:22:19 <kadoban> That sounds quite cool
21:22:30 <phanimahesh> it also means vulnerabilities in any of less pipes become vulnerabilities in less itself, from a usage standpoint
21:22:44 <phanimahesh> never use less on a file you don't trust.
21:23:09 <chetshah> Hello all, I found https://twitter.com/lambda_conf/status/803695008100466688 which divides fp in general into four sections. I have written programs
21:23:34 <chetshah> but find difficult to grok/learn last two sections
21:23:43 <chetshah> any specific learning resources recommended ?
21:23:48 <phanimahesh> you can even define your own lesspipes. want exif data when lessing images. done. want latex when lessing pdfs, and you follow a convention on disk? done.
21:24:06 <glguy> chetshah: You'd probably need to pick a particular topic to ask about from the list that you're interested in
21:24:58 <Cale> "Understand deep relationships between different concepts" good skill
21:25:01 <Cale> lol
21:25:02 <kadoban> Wow, you're not competent until you understand rank-n types? Heh ...
21:25:19 <Cale> Yeah, this list is a bit nonsense
21:25:46 <Cale> It's probably less useful than the table of contents for the GHC User's Guide
21:25:52 <Cale> but contains many of the same words
21:26:01 <glguy> Instead of interpreting it as needing to understand all of the items in one of the lists to be considered that thing it might be more useful just to use it as a list of potentially interesting topics to learn about at some point
21:26:09 <Cale> yeah
21:26:30 <kadoban> Though that'd be easier to do if they'd organized it in a less trolly way.
21:26:31 <Cale> I guess it can be helpful if you're bored to have a list of words to google
21:27:19 <Cale> I also don't know what some of these things are supposed to refer to. You have "Functional Architecture" just randomly thrown in there among a list of actual things.
21:27:31 <MarcelineVQ> weird how things don't line up horizontally
21:27:46 <kadoban> Not sure what "Advanced Optics" is either ... is that supposed to be lens?
21:27:56 <Cale> I think it is
21:28:07 <glguy> Perhaps a workshop on "functional architecture" would be considered a more or less advanced workshop based on that list
21:28:18 <MarcelineVQ> by which I mean everything is just slightly out of order between left and right sides
21:28:28 <glguy> rather than being a checkbox you're supposed to check off so you can call yourself "pro"
21:29:06 <jmorris> i want to write a function with type [(Double, Double)] -> Int and i want the output to be the first of every tuple multiplied by the second of every tuple, then the sum of those products
21:29:16 <Cale> Also the boundaries are really arbitrary
21:29:34 <Koterpillar> jmorris: and how does it return an Int?
21:29:52 <jmorris> Koterpillar, that should be double my bad
21:29:58 <jle`> jmorris: you can use 'map'
21:30:00 <jle`> and then sum
21:30:16 <jmorris> jle` can you give an example?
21:30:17 <jle`> use map with a function to turn your [(Double, Double)] into a [Double]
21:30:21 <jle`> and then sum that
21:30:24 <jle`> > sum [1,2,3]
21:30:25 <Koterpillar> and 'curry' if you want to stick to pointfree / confuse people
21:30:27 <lambdabot>  6
21:30:35 <Cale> Like, existential types and rank-n types are lower tier somehow than functional dependencies
21:30:41 <monochrom> "curry (*)" is not confusing.
21:30:42 <jle`> so you map a function that takes a tuple and returns the product of the two  values
21:31:04 <jle`> map (????) [(1,2),(3,4),(5,6)]
21:31:21 <Koterpillar> > map _ [(1 :: Double, 2 :: Double)]
21:31:23 <lambdabot>  error:
21:31:23 <lambdabot>      • Found hole: _ :: (Double, Double) -> b
21:31:23 <lambdabot>        Where: ‘b’ is a rigid type variable bound by
21:31:36 <jle`> it'll probably be (Double, Double) -> Double
21:31:49 <MarcelineVQ> monochrom: no more confusing than uncurry (*) at least
21:31:49 <jle`> map :: ((Double, Double) -> Double) -> [(Double, Double)] -> [Double]
21:32:07 <monochrom> oh oops, it should be uncurry yeah
21:32:27 <jle`> type checker would have caught it, harmless mistake
21:32:29 <glguy> I'm sure it wouldn't be the first use of a Num (a,b) instance
21:33:59 <jmorris> so how do i map mutiplication of the two values
21:34:02 <jle`> but i have a feeling that there might be a way to avoid mapping over a list of tuples altogether
21:34:16 <jle`> jmorris: you need to map a function that takes a tuple and returns the product of the elements
21:34:19 <jle`> can you write that function?
21:34:29 <jle`> first step is pattern match
21:34:33 <jle`> (\(x,y) -> ????)
21:34:45 <jle`> pattern matching is a good first instinct when you need to write a function
21:35:07 <jle`> map (\(x,y) -> ???) [ ... ]
21:35:19 <ab9rf> if you are planning to write something that "makes decisions", pattern matching is often the way to go
21:35:36 <jmorris> so this map (\(x,y) -> x*y)
21:35:42 <jle`> that works :O
21:35:52 <jle`> > map (\(x,y) -> x*y) [(1,2), (3,4), (5,6)]
21:35:54 <lambdabot>  [2,12,30]
21:36:41 <chetshah> oh this lamdabot thing is cool..
21:36:49 <jle`> btw, (\(x,y) -> f x y) is a common pattern that's abstracted by the higher order function, 'uncurry f'
21:37:18 <jle`> uncurry is in Prelude
21:37:30 <ab9rf> > map (uncurry (*)) [(2,3),(4,5),(6,7)]
21:37:33 <lambdabot>  [6,20,42]
21:37:33 <jle`> > uncurry (*) (1,2)
21:37:34 <jmorris> so uncurry (*)
21:37:35 <lambdabot>  2
21:37:46 <jle`> yup
21:37:53 <jle`> but (\(x,y) -> f x y) is fine too
21:37:55 <ab9rf> :t uncurry (*)
21:37:57 <lambdabot> Num c => (c, c) -> c
21:39:19 <jmorris> sum . map (\(x,y) -> x*y)
21:39:37 <jle`> :t sum . map (\(x,y) -> x*y)
21:39:39 <lambdabot> Num c => [(c, c)] -> c
21:40:07 <jle`> btw, did this list of tuples come from 'zip' ?
21:40:25 <jmorris> um, no
21:40:45 <jle`> ah, ok
21:41:13 <jle`> because it's easier to do zipWith f xs ys is nicer than map (uncurry f) (zip xs ys)
21:43:36 * hackagebot sbp 2.1.0 - SwiftNav's SBP Library  https://hackage.haskell.org/package/sbp-2.1.0 (jgross)
21:45:22 <lpaste> ottanta pasted “No title” at http://lpaste.net/7434938961786568704
21:46:16 <ottanta> so in what I just pasted, the type signature of the function as well as the explicit signature of Left :: Direction both still have that error occur (ambiguous occurrence) 
21:47:24 <kadoban> ottanta: Yeah, don't use "Left" and "Right" as names, they're very very commonly used elsewhere in haskell to mean something else.
21:47:45 <ottanta> :(
21:48:03 <Forlorn> When I do `import System.Random` in ghci, it says that the package does not exist.
21:48:06 <Forlorn> :'(
21:48:14 <kadoban> You could try L and R or  Sinister and ... whatever the jokular name for Right is.
21:48:41 <Forlorn> I found it in `hoogle random`, do I perhaps have to install cabal and the install it?
21:48:42 <kadoban> Forlorn: What build system are you using? stack? cabal-install?
21:49:09 <kadoban> Then yeah, I think you have to cabal-install it. You should likely make a sandbox first to use.
21:49:28 <Forlorn> I just installed ghc, that's all I know
21:49:33 <jle`> Forlorn: you need the 'random' package installed
21:49:39 <jle`> Forlorn: try using 'stack'
21:49:46 <jle`> then you can stack install random => stack ghci
21:49:49 <kadoban> stack ghci --package random   should work
21:49:51 <jle`> and you can load it in there
21:50:00 <jle`> ooh even better
21:50:06 <Forlorn> I'll install stack too
21:51:01 <ottanta> I just renamed everythin into italian
21:51:04 <Koterpillar> jle`: stack ghci without --package will not work even if you install it
21:51:12 <kadoban> ottanta: Oh Dexter apparently, use Sinister and Dexter, I'm sure that won't confuse anyone ;) (p.s. don't really do that)
21:51:30 <ottanta> kadoban: yeah I just used Sinistra and Destra
21:51:36 <kadoban> Koterpillar: Well, it will most likely actually, it's probably just not best practice.
21:51:38 <ottanta> same etymology
21:52:10 <Forlorn> Koterpillar, I see
21:53:25 <rblaze> is there any way to setup "stack hoogle" so that it knows about base packages, but have local documentation for them? If I don't run "stack hoogle generate", it can't find anything from base. If I do, all the doc links point to hackage.
21:55:26 <Koterpillar> kadoban: it doesn't
21:56:12 <Koterpillar> kadoban: "stack install" doesn't affect your stack.yaml, and only stack.yaml determines which packages are available in "stack ghci"
21:57:43 <kadoban> Koterpillar: Many people do these things in global context. and 'stack ghci' will usually let you use any packages that are in the cache or whatever it's called, unless you run it with certain options.
21:58:23 <kadoban> But regardless, it's still not a best practice.
21:58:32 <osa1> any hakyll users here? my blog used to work, but in newest hakyll I'm getting YAML parse errors when in titles with semicolons
21:58:53 <Koterpillar> kadoban: checked with the global project, you are right
21:59:02 <osa1> so if I have `title: blog post: part 1` I get an error because of second semicolon
21:59:29 <osa1> err, colon
22:00:40 <kadoban> osa1: That sounds unfortunate. Can you do some workaround like use whatever html entity defines a colon maybe, assuming there is one?
22:01:22 <osa1> kadoban: so this is in the header part of a blog post, it's not generated by compilers
22:02:15 <kadoban> osa1: Right, I'm fairly familiar with hakyll. You can use HTML entities there though, right? (never actually tried)
22:03:16 <osa1> hmm not sure what an html entity is
22:03:16 <kadoban> Actually maybe you can't ... I'm not sure if that'd make sense.
22:03:34 <kadoban> osa1: Like &amp; instead of &
22:03:37 <osa1> ahh
22:03:40 <osa1> hmm
22:03:56 <kadoban> Though the more I think about it, the less confident I am that that'd actually work.
22:05:46 <kadoban> osa1: I think it'd be uhm ... &#x003a; if you want to try it, just for kicks.
22:06:29 <osa1> OK, wrapping the line with quotes worked
22:06:49 <osa1> it's annoying though. it was YAML before, right? I don't think YAML standard changed in the meantime
22:06:54 <kadoban> That sounds like a better solution xD
22:07:10 <kadoban> I'm not sure how metadata parsing works at all actually. How old was the old version you were using?
22:08:07 <osa1> I was using 4.4 I think, now I'm using the latest (4.9)
22:10:40 <kadoban> Hm. I thought I remembered something about the backend for metadata switching to some other parsing library thing, but I'm not seeing it in searches. Not sure :-/
22:23:27 <gestone> hey all i'm trying to give a shot at using Parsec
22:24:13 <gestone> namely i'm trying to thread state through my program with Parsec. is there a runState State monad function equivalent in the lib?
22:24:46 <gestone> so far i've stumbled across the runParser function and the parse function
22:24:51 <johnw> there is a user state that works with Parsec
22:24:59 <johnw> it's built-in
22:25:16 <johnw> access it with getState and putState
22:25:34 <kadoban> And then yes you use runParser
22:27:14 <gestone> ah okay thanks
22:35:50 <ertesx> i always wondered: what's the point of parsec's built-in user state?
22:36:02 <ertesx> is parsec older than StateT?
22:36:18 <kadoban> I think it behaves differently in the presence of backtracking, but I'm not positive.
22:36:55 <kadoban> Differently than just doing ParsecT (State Whatever) I mean
22:37:18 <kadoban> Hmm, that's totally not where the 'm' goes in ParsecT, oh well.
22:37:28 <ertesx> i think you can choose the behaviour by choosing between StateT over ParsecT and ParsecT over StateT
22:38:17 <kadoban> Maybe the user state was integrated to make it more obvious what the default people usually want should be?
22:41:28 <johnw> I bet it's just based on how old Parsec is
22:42:46 <ertesx> yeah, perhaps it's even from days before Parser became a transformer
22:43:44 <ab9rf> parsec is quite old
22:51:03 <Myrl-saki> lmao. 2 blue switches in a single office = pandemonium.
22:51:10 <Myrl-saki> ...wrong channel
22:53:07 <SteinsGate[m]> Ohayou
22:54:10 <Myrl-saki> SteinsGate[m]: OHio
23:04:11 <jmorris> i have a function with type [(Double,Double)] -> Double and want to return the sum of only the first elemts of the tuple
23:05:36 <sdx23> jmorris: what have you tried?
23:05:53 <MarcelineVQ> i'd be just like earlier yeah? only you're returning the first element instead of multiplying
23:06:00 <MarcelineVQ> *it'd
23:06:13 <jmorris> :t fst
23:06:14 <lambdabot> (a, b) -> a
23:07:02 <jmorris> ive tried sum . map fst
23:07:43 <ab9rf> :t sum . map fst
23:07:44 <lambdabot> Num c => [(c, b)] -> c
23:08:04 <liste> > sum . map fst $ [(1,2),(3,4)]
23:08:06 <lambdabot>  4
23:08:11 <liste> > sum . map fst $ [(1.0,2),(3,4)]
23:08:13 <lambdabot>  4.0
23:08:23 <ab9rf> seems to work
23:08:44 <jmorris> i didn't use the dollar sign
23:08:50 <ab9rf> precedence matters
23:09:05 <ab9rf> :t sum . map fst [(1,2),(3,4)]
23:09:07 <lambdabot> error:
23:09:07 <lambdabot>     • Couldn't match expected type ‘a -> [c]’
23:09:07 <lambdabot>                   with actual type ‘[Integer]’
23:09:24 <ab9rf> figure out why :)
23:12:33 <solrize> @hoogle a->a
23:12:33 <lambdabot> package base
23:12:33 <lambdabot> package bytestring
23:12:33 <lambdabot> package containers
23:12:42 <solrize> um
23:13:21 <ab9rf> @hoogle a -> a
23:13:22 <lambdabot> Prelude id :: a -> a
23:13:22 <lambdabot> Data.Function id :: a -> a
23:13:22 <lambdabot> GHC.Exts breakpoint :: a -> a
23:13:31 <ab9rf> hoogle cares about whitespace
23:13:46 <jle`> jmorris: you don't need the dollar sign
23:13:55 <ab9rf> you could also use parentheses
23:13:55 <jle`> you could do (sum . map fst) [(1,2),(3,4)]
23:14:05 <jle`> jmorris: or just sum (map fst [(1,2),(3,4)])
23:14:34 <jle`> sum . map fst [(1,2),(3,4)] is parsed as sum . (map fst [(1,2),(3,4)]), fwiw
23:14:49 <ab9rf> or even sum $ map fst [(1,2),(3,4)]
23:15:27 <jmorris> the function is just x=sum . map fst
23:16:18 <liste> > let sumOfFsts = sum . map fst in sumOfFsts [(1,2), (3,4)] -- works too
23:16:20 <lambdabot>  4
23:25:51 <echo-area> Could somebody please check my question at http://lpaste.net/348024
23:43:15 <lyxia> echo-area: uh, Tree' is not isomorphic to the other, is it?
23:43:30 <eklavya> I am having problems with haddock
23:43:41 <eklavya> it seems to be working differently than documented
23:43:53 <eklavya> I even copied the doc from UUID package
23:44:00 <eklavya> but that too is not rendering properly
23:44:08 <eklavya> I am using stack haddock
23:44:14 <echo-area> lyxia: But I can do e.g. Tree a <-> GTree a <-> Tree' a
23:44:28 <eklavya> is there some other config that haddock requires?
23:48:26 <lyxia> echo-area: you haven't shown that yet
23:49:18 <pikajude> @pl
23:49:18 <lambdabot> (line 1, column 1):
23:49:18 <lambdabot> unexpected end of input
23:49:18 <lambdabot> expecting white space, "()", natural, identifier, lambda abstraction or expression
23:50:58 <pikajude> sorry lambdabot 
23:52:23 <echo-area> lyxia: Oh, yes I didn't show them in the paste
23:52:27 <lyxia> echo-area: what does "isomorphic" mean to you actually
23:53:09 <lyxia> there is no bijection between Tree and Tree'
23:53:59 <ottanta> so, is there a way to return the memory footprint of an integer
23:54:13 <ottanta> @hoogle Integer -> Int
23:54:14 <lambdabot> Crypto.Number.Basic log2 :: Integer -> Int
23:54:14 <lambdabot> Crypto.Number.Basic numBits :: Integer -> Int
23:54:14 <lambdabot> Crypto.Number.Basic numBytes :: Integer -> Int
23:54:20 <ottanta> ^
23:54:34 <ottanta> something like numByte
23:54:40 <ottanta> *S which I guess would be it
23:58:40 <ottanta> like if I do bitSize (4 :: Integer) all hell breaks loose
23:58:43 <echo-area> lyxia: I've added the conversion functions
23:58:47 <ottanta> > bitSize 4 ::Int
23:58:49 <lambdabot>  *Exception: Data.Bits.bitSize(Integer)
23:58:55 <ottanta> :(
23:59:03 <ottanta> > bitSize (4 :: Int)
23:59:05 <lambdabot>  64
23:59:13 <bollu> 	fundeps aren't too "advanced" right>
23:59:49 <lyxia> echo-area: oh. hrm.
23:59:50 <bollu> where does fundeps stand between LambdaCase and.. say, DataKinds?
