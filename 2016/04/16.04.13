00:00:27 <kadoban> Sounds plausible.
00:00:43 <ntnt> that's patronizing; this algo works
00:02:01 <kadoban> It's not patronizing, I was agreeing that it sounds correct, but I'm not 100% sure.
00:02:13 <kadoban> If you don't want input … okay.
00:03:26 <fr33domlover> isn't it much easier to use Map as-is but keep track of that number as you add and remove elements? Start at minBound, when you insert check if need to raise the number; when you delete, check if need to lower it
00:03:27 <cocreature> ntnt: full is not something that an Ord constraint can answer so you would limit the cases where you can use map
00:03:48 <ntnt> kadoban: I may have been slightly harsh; I do like the O(log^2 n) algo; just to avoid having to implement it myself
00:04:13 <ntnt> cocreature: yeah, this is for a particular problem where I want 'indexed *doubly* linked lists' // implementing it as a map
00:04:23 <ntnt> so I'm okay with the key only being Int
00:04:40 <cocreature> yeah I was just pointing out why it doesn’t make sense to rewrite Data.Map
00:06:16 <kadoban> ntnt: 's alright, tone gets lost in IRC a lot. I'm a bit cranky at the moment as well, sorry for reacting more negatively than warranted.
00:07:38 * hackagebot stackage-curator 0.13.2 - Tools for curating Stackage bundles  https://hackage.haskell.org/package/stackage-curator-0.13.2 (MichaelSnoyman)
00:07:38 * hackagebot StateVar 1.1.0.4 - State variables  https://hackage.haskell.org/package/StateVar-1.1.0.4 (SvenPanne)
00:07:42 <navaro1> hello guys, I am a haskell beginner, is this right place to ask for help with my ingenious code?
00:08:10 <cocreature> navaro1: sure
00:08:14 <kadoban> navaro1: Yep, you've come to the right place
00:08:18 <navaro1> nice, thanks
00:09:07 <navaro1> so I am working on very, RockPaperScissors game with very very simple AI
00:09:08 <navaro1> https://github.com/navaro1/lyfe/blob/master/Haskell/RPS/Main.hs
00:09:11 <navaro1> it is in here
00:09:16 <navaro1> it actually works right now
00:09:48 <navaro1> but I want to make it more Monadic/Higher-Level, so I'll be able to pound those concepts into my brain
00:10:25 <navaro1> so my first question is
00:10:39 <navaro1> is function ```checkIt``` good candidate for folding?
00:12:27 <navaro1> @cocreature @kadoban
00:12:28 <lambdabot> Unknown command, try @list
00:12:38 <navaro1> @list
00:12:38 <lambdabot> What module?  Try @listmodules for some ideas.
00:13:16 <luwanda> anyone live in SF? http://www.meetup.com/deadpoetssociety/
00:14:28 <shachaf> This channel is about Haskell.
00:17:08 <cocreature> navaro1: not really, you do multiple recursive calls in case 3 and 4 of go which doesn’t fit into a fold pattern. also a fold won’t let you distinguish case 3 and 4. the extra argument is also weird for a fold
00:17:33 <navaro1> cocreature: so what would be the way?
00:18:44 <navaro1> cocreature: or let me rephrase - what should I do to improve this code - in matter of functional programming principles
00:20:29 <cocreature> navaro1: what is checkIt actually supposed to do?
00:21:45 <navaro1> which hand it should play -> which hand occurs most times in result of group it
00:22:06 <navaro1> which basically provides list of (Hand (in form of char) -> Int)
00:22:46 <navaro1> so given [('r', 3), ('p', 2), ('s', 1)]
00:22:57 <navaro1> it should return Rock
00:24:03 <cocreature> navaro1: so first, make it take a Map Hand Int instead of a Map Char Int and perform the deserialization somewhere else. that makes it clearer what the code does
00:25:41 <kadoban> The Ord instance for Hand is kind of bothering me. It's … not transitive; doesn't that break stuff, potentially?
00:26:09 <navaro1> 'break stuff' in what way?
00:26:43 <kadoban> Well, I mean it could break sorting of a list of Hands for instance, depending on what sort is used. I dunno if it can muck up using it for keys in a Map?
00:26:47 <cocreature> navaro1: so it seems like that function is trying to do things at once, 1. find the Hands with maximum value 2. chose a random hand among those. try separating this
00:27:00 <LordBrain> i don't think Ord should really be used for that
00:27:16 <LordBrain> oh i see i'm not the only one
00:27:40 <navaro1> it chooses random hand only for case when no of occurrences is the same
00:27:45 <navaro1> but thank you guys :)
00:27:48 <LordBrain> he means it is a contract of that class that a>b and b>c implies that a>c
00:27:49 <kadoban> Yeah, I think you should make just a winsOver :: Hand -> Hand -> Bool function
00:27:55 <navaro1> okay
00:28:22 <LordBrain> these kinds of laws are not enforced syntatically, but most type classes have them
00:28:56 <LordBrain> so it's sort of a use error to violate them
00:29:00 <kadoban> Hand can just derive its Ord then (which can be useful for putting them in a Map or whatever)
00:30:59 <LordBrain> navaro1, what happens when someone calls sort [Rock,Paper,Scissors]
00:31:11 <LordBrain> :t sort
00:31:12 <lambdabot> Ord a => [a] -> [a]
00:31:33 <LordBrain> Ord should mean sortable...
00:31:34 <navaro1> okay
00:31:37 <navaro1> thank you guys :)
00:31:45 <navaro1> I will be back bothering you ;)
00:31:52 <kadoban> :)
00:33:56 <LordBrain> then again... with this toy, it is not likely anyone will ever do that...
00:35:14 <LordBrain> but whats the point of making such a deviant instance... its like needless mind clutter that such a thing floats around
00:36:02 <LordBrain> and clutter invites more clutter... pretty soon there goes the whole neighborhood...
00:37:05 <LordBrain> its an understandable experiment tho, c++ is notorious for encouraging crazy overloading
00:37:16 <MarcelineVQ> who are you talkin to
00:37:29 <LordBrain> i'm used to talking to empty space
00:38:41 <LordBrain> it actually beats talking to a lot of people
00:40:28 <LordBrain> any way, with 1462 people in here, its not crazy that some silent lurker is of similar mindset to navaro1
00:43:16 <LordBrain> when was in college, i tutored math, and it seems like it was always hte same questions that come up over and over, i think haskell is a bit similar in that regard. Then people get advanced, and forget that they made the same journey.
00:44:18 <LordBrain> maybe type classes should have static versions of quickcheck built in
00:44:31 <LordBrain> automatically testing every instance
00:47:03 <LordBrain> i suppose we have dependent types for that level of checking, theoretically superior to a quick check, but more difficult to construct i think.
00:47:52 <kadoban> It'd be rather interesting trying to set that up. I'm sure it'd have to be an optional thing though, and yeah it could never be perfect.
00:50:57 <LordBrain> you could make a set of prop_functions be a part of the actual class interface. then the user would get warnings until they actually implemented them, and once implemented, adding a quickCheckAll is nothing.
00:51:00 <MarcelineVQ> you could probably make ANNotations with laws in them a ghc plugin can run for you
00:51:49 <LordBrain> actually no
00:51:57 <LordBrain> ideally you just give them default instances
00:52:38 <LordBrain> but then quickCheckAll wont catch them unless you're instance is in the actual library that defined the class... often the case but still.
00:53:14 <LordBrain> often, we define the instance in another library, where the type is defined
00:53:59 <LordBrain> i'm not sure quickcheck would even support this actually
00:54:53 <LordBrain> quick check would require arbitrary for the polymorphic type, wouldn't it? And that's not generally possible
00:55:56 <cocreature> you also would need to have some == instance so you can actually check something. for functions (and anything containing them) that’s not possible
00:56:00 <LordBrain> in practice, the amount of discipline involved in just leaving this to the user doesn't seem to be a burden tho
00:56:30 <LordBrain> most errors i've had, were not law violations
00:57:18 <LordBrain> i cant recall even ever having an issue, except with the old ListT, but that was more a theoretical issue, not sure how practical
00:57:45 <LordBrain> as in, the code worked as intended despite the thing technically not being a monad
00:59:12 <LordBrain> i suppose if laws are relied upon tho for various optimizations, then we might get in trouble
01:01:45 <LordBrain> i think one reason we haven't done this sort of thing, is more that there are more pressing issues, which have higher pay offs for effort expended, so as auto-quickchecking class laws, doesnt motivate anyone sufficiently.
01:02:20 <LordBrain> but then again, maybe i'm letting the status quo bias me
01:12:35 <jophish> @tell sinelaw writing a typechecker :)
01:12:35 <lambdabot> Consider it noted.
01:17:35 * hackagebot snaplet-purescript 0.4.1.0 - Automatic (re)compilation of purescript projects  https://hackage.haskell.org/package/snaplet-purescript-0.4.1.0 (AlfredoDiNapoli)
01:51:41 <mikeplus64> anyone familiar with trifecta? is there a version of try that doesn't discard error messages? (or, how would i define that?)
01:53:29 <mikeplus64> oh, it looks like there's spirited debate over whether that should be how it works
02:11:01 <Gurkenglas> @let (x ^>>= f) btofb s = f (s ^. x) btofb s
02:11:03 <lambdabot>  Defined.
02:11:13 <Gurkenglas> :t (^>>=) :: Lens' s a -> (a -> Lens' s b) -> Lens' s b -- Only lawful if the pointer isn't to itself
02:11:14 <lambdabot> Functor f => Lens' s a -> (a -> Lens' s b) -> (b -> f b) -> s -> f s
02:11:20 <Gurkenglas> :t (^>>=)
02:11:21 <lambdabot> Getting a s a -> (a -> t1 -> s -> t) -> t1 -> s -> t
02:11:31 <Gurkenglas> Getting's doc: "When you see this in a type signature it indicates that you can pass the function a Lens, Getter, Traversal, Fold, Prism, Iso, or one of the indexed variants, and it will just "do the right thing"."
02:11:47 <Gurkenglas> :t _head ^>>= ix -- Why does (Index m) need to be a Monoid?
02:11:49 <lambdabot> (Applicative f, Monoid (Index m), Cons m m (Index m) (Index m), Ixed m) => (IxValue m -> f (IxValue m)) -> m -> f m
02:13:29 <Gurkenglas> > [2..] ^? (singular _head ^>>= ix) -- If the pointer is a lens instead of a traversal it works fine
02:13:31 <lambdabot>  Just 4
02:14:06 <Gurkenglas> > [2..] ^? (_head ^>>= ix) -- But then I would have expected this to work too
02:14:08 <lambdabot>      No instance for (Monoid Int) arising from a use of ‘_head’
02:14:08 <lambdabot>      In the first argument of ‘(^>>=)’, namely ‘_head’
02:14:08 <lambdabot>      In the second argument of ‘(^?)’, namely ‘(_head ^>>= ix)’
02:14:38 <Gurkenglas> (Should I have produced this conversation in a query instead and pasted it?)
02:21:24 <rydgel> probably
02:22:54 <tdammers> it helps if the new language you're learning has features that are very suitable for doing things you've been trying to do earlier
02:23:24 <tdammers> forget that, 12 hours late :x
02:23:55 <Rembane> Pi delay!
02:23:58 * Rembane dances the pi dance
02:25:17 <flummz> I solved a chess knight problem exercise with a selector . filter . generator chain, but my exercise requires a top level signature of
02:25:17 <Gurkenglas> Can I make fail be called on failed pattern matches even outside a do block?
02:25:20 <flummz> knightProblem :: StartPos -> NrMoves -> TargetPos -> [Moves]
02:25:22 <flummz> knightProblem =  kSelector . kFilter . kGenerator 
02:25:48 <flummz> how can i feed those three arguments to kGenerator without changing the knightProblem signature and equation?
02:25:54 <flummz> ( http://codepad.org/LLaIHTEM )
02:26:47 <Gurkenglas> flummz, you mean, feed the first two arguments to kGenerator and the third to kSelector
02:27:06 <flummz> kGenerator only needs StartPos
02:27:20 <Gurkenglas> "-- kGenerator: needs StartPos, NrMoves, generates all sequences of length NrMoves"
02:27:23 <flummz> and NrMoves
02:27:35 <flummz> but kSelector needs TargetPos
02:27:36 <Gurkenglas> Right, so the first two arguments to kGenerator and tht third to kSelector
02:27:45 <flummz> yes i think so
02:28:09 <flummz> but i may not change knightProblem, only the components
02:28:11 <Gurkenglas> So do "knightProblem startpos nrmoves targetpos = kSelector targetpos . kFilter . kGenerator startpos nrmoves"
02:28:24 <flummz> can't do that
02:28:33 <flummz> oh
02:28:47 <Gurkenglas> Oh, this equation is fixed. Then we can deduce the types of kSelector, kFilter and kGenerator, regardless of what the task assignment says
02:29:30 <flummz> i believe that is where i'm stuck, yes :P
02:29:52 <Gurkenglas> kSelector is (a -> NrMoves -> TargetPos -> [Moves]) for some a, kFilter is (b -> a) for some b and that a, kGenerator is (StartPos -> b) for that b
02:30:07 <flummz> (i have a working solution, but not for the specified problem :)
02:30:30 <Gurkenglas> If those types don't fit, you must acquit
02:31:03 <Gurkenglas> Got the full text of the assignemnt for us?
02:31:11 <flummz> in german hang on
02:31:27 <Gurkenglas> What universities are you going to that you get to do Haskell
02:31:43 <flummz> tu vienna
02:31:48 <Gurkenglas> I'm trying to do my bachelor's thesis on it and it looks like I'm the only guy in Berlin to do with it
02:32:02 <flummz> we've got jens knoop from germany here
02:32:46 <flummz> http://www.complang.tuwien.ac.at/knoop/lehre/ss2016/ffp185A05/ffp_lu03_160406.pdf
02:33:19 <Rembane> Gurkenglas: Chalmers in Sweden.
02:33:24 <Gurkenglas> All the professors that worked with it back in the day retired like a year ago and the guy I found read a book about Haskell 5 years ago iirc
02:33:35 <flummz> hehe
02:34:04 <flummz> as you see, i removed the transformation parts from the start and the end of the generator/filter/selector chain
02:34:23 <flummz> to make it more presentable on irc
02:35:16 <flummz> and i only solved a similar problem, not the specified one, by changing the specified "springer" (knight)
02:36:00 <flummz> like that: http://codepad.org/nzUB3w3E
02:36:26 <flummz> Gurkenglas: maybe the focus changet to scala? just a wild guess
02:36:29 <flummz> d
02:36:41 <Gurkenglas> Okay either we find whoever wrote that task assignment and get them in this channel (got their number?) or we assume that you can add some argument names to the left of that = and can implement those 5 components in a where clause. Was there another assignment of this form earlier on?
02:37:09 <flummz> nothing similiar
02:37:56 <flummz> but in your opinion, you have to change the "springer" specified on paper to make the problem solvable?
02:38:20 <flummz> ( like i did in http://codepad.org/nzUB3w3E )
02:38:39 <flummz> data  Job =  Job  StartPosition AnzahlZuege  ZielPosition
02:40:03 <mniip> Gurkenglas, I, too, want to do one of those :o
02:41:00 <bitonic> Is there a way to pretty print the info provided by http://haddock.stackage.org/lts-5.12/base-4.8.2.0/GHC-RTS-Flags.html#t:RTSFlags into something I can pass as an command line argument?
02:41:35 <Gurkenglas> In my estimate the author of that assignment will change his mind on those two lines if the problem is pointed out
02:41:42 <flummz> hehe
02:41:52 <flummz> deadline is maybe at 1200
02:42:12 <flummz> i believe a script collects the assignments at midday
02:42:27 <flummz> and runs some test cases
02:42:38 <Gurkenglas> Talk to the author!
02:42:56 <Gurkenglas> (And now I have to go talk to said guy about how he probably doesn't understand a word I'm writing bye.)
02:43:12 <flummz> you are right, but it's a bit late for that
02:43:27 <flummz> (and the author is an university professor with a 60h workweek)
02:43:59 <flummz> thank you gurkenglas and bye
03:05:40 <Rusfadagvswdf> Hi people 
03:16:04 <__uu__> hi, is the expression of [x*2 | x <- [1..10], x*2 >= 12] some kind of grammar sugar?
03:16:16 <__uu__> what are the functions behind?
03:16:43 <Kneiva> that's list comprehension
03:19:46 <flummz> __uu__: if x*2 >=12 is true, x*2 is added to your list
03:20:16 <flummz> you can add several such predicates which have to be of type bool with commas "behind"
03:20:35 <__uu__> yes, is there any other way to write it more "functional"?
03:20:44 <flummz> thats already very haskell
03:20:45 <__uu__> in a more "functional" way?
03:21:15 <__uu__> so, is that part of haskell grammer?
03:21:25 <flummz> i'm a rookie, but maybe with simple recursion?
03:22:01 <flummz> but you rlist comprehension is probably the most elegant way to express this
03:22:07 <Aruro> __uu__: its part of haskell standard yes, but there is way to write it more explicit
03:22:24 <Aruro> __uu__: its a list instance of monad :)
03:22:52 <__uu__> Aruro: y, that is what I am expecting
03:23:21 <Aruro> __uu__: read about list monad and guards
03:23:38 <Aruro> __uu__: last condition in list comprehension is guard
03:23:42 <__uu__> Aruro: ok! thanks for pointing out!!
03:24:05 <__uu__> flummz: and thank you, too
03:24:07 <Aruro> __uu__: but flummz is also right list comprehensions are very usefull for clearness
03:24:19 <flummz> np
03:25:15 <__uu__> I read "learn you a haskell" days ago, and now I am re-reading it, and the question just popped into my mind. :)
03:25:34 <__uu__> It seems I misread the guard part
03:25:58 <Aruro> __uu__: when stuck also look here https://en.wikibooks.org/wiki/Haskell , very nice book
03:26:27 <flummz> lyah is also very nice
03:26:36 <__uu__> thx!
03:26:59 <Aruro> __uu__: https://en.wikibooks.org/wiki/Haskell/Understanding_monads/List , scroll down there is List comprehension section
03:27:24 <__uu__> flummz: but to be honest, after reading lyah, I still have no idea of how to write a proper program..
03:27:34 <__uu__> that is why I am re-reading it.
03:27:52 <Aruro> flummz: you should read Real World Haskell
03:28:36 <Aruro> flummz: its free and u can read it here : http://book.realworldhaskell.org/read/
03:29:21 <Aruro> __uu__: sorry that was to u :)
03:29:40 <flummz> i didn't mind to buy a paper copy of lyah, but __uu__ has a point about real world programs
03:29:50 <suppi> __u__ a pretty common scenario. this is why i don't recommend it
03:30:09 <suppi> __uu__.
03:30:17 <flummz> Aruro: i'll complete lyah first :)
03:30:24 <Aruro> suppi: its very good to have super first intro, but then anything else is needed right away
03:31:01 <Aruro> flummz: also look here : https://www.haskell.org/tutorial/
03:31:12 <flummz> the last one i know
03:31:26 <suppi> Aruro, it took me months to read. not a total waste of time, but a waste of time indewd
03:31:39 <suppi> __uu__, try this http://gilmi.xyz/post/2015/02/25/after-lyah
03:31:53 <flummz>  realworldhaskell and the wikibooks are bookmarked
03:31:57 <Aruro> flummz: start writing scripts and ask us here
03:32:06 <__uu__> aha, the <- in list compression has almost the same meaning as in a do block!
03:32:08 <Aruro> flummz: dont wait till end of book
03:32:12 <flummz> using the horrible webbrowser bookmarking crutch
03:32:18 <Aruro> __uu__: yes
03:32:31 <__uu__> suppi: thanks! marked!
03:34:29 <flummz> why are the webbrowser bookmarking tools so bad
03:34:42 <flummz> both in firefox and chromium-browser
03:35:12 <tdammers> because bookmarking is very 1998?
03:35:12 <suppi> __u__, if you still have a hard time consider buying haskellbook.com
03:35:49 <flummz> tdammers: bookmarking is 1998, i see
03:36:21 <flummz> in 1998, browsers were able to save offline copies
03:36:21 <hpc> nowadays people use javascript to crash the browser so it saves their exact location in multiple tabs automatically
03:36:31 <Aruro> tdammers: not at all
03:36:33 <flummz> hehe
03:36:51 <Aruro> flummz: use tags to make bookmarks
03:36:54 <flummz> hpc: in 1998, javascript crashed netscape, and there were no tabs and no autosave
03:37:15 <hpc> tabs are very 2006
03:37:36 <flummz> Aruro: on webservers where i'm not even the customer but the product?
03:37:40 <bernalex> bookmarks are supposedly very nice with vimperator and pentadactyl. although I don't use them at all.
03:38:02 <Aruro> flummz: tags are firefox bookmark feature
03:38:08 <Aruro> flummz: i think
03:38:15 <flummz> aatxe: oh, that one, no i don't need that
03:38:28 <flummz> i need hierarchic lists
03:40:19 <Aruro> flummz: what are you bookmarking?
03:40:40 <flummz> the post lyah thread, the gentle introduction, real world haskell, and the wikibook
03:40:56 <Aruro> flummz: so tags are your friends
03:41:00 <flummz> nope
03:41:24 <flummz> i'm sure they are yours
03:41:30 <tdammers> I tend to just rely on ff's history search
03:41:32 <flummz> but i know they are not mine :)
03:41:36 <flummz> lol
03:41:50 <bernalex> tdammers: buffers are also great, if using vimperator/pentadactyl.
03:42:17 <flummz> i switched from emacs to atom
03:42:28 <flummz> it hurts very much but it's a great relief also
03:42:31 <Aruro> flummz: ctr-b in firefox gives u nice access to bookmarks you can search and look last tags and so on
03:42:39 <flummz> Aruro: thanks, i know that
03:42:54 <Aruro> flummz: u dont use it , that is point :)
03:42:55 <flummz> Aruro: i was just ranting about the bookmarks ui
03:42:59 <Aruro> flummz: u want folders :D
03:43:11 <flummz> i want hierarchic lists, as in the file system
03:43:40 <Aruro> flummz: just download all those books with wget and be happy :)
03:43:47 <flummz> hehe
03:43:48 <flummz> no
03:44:00 <flummz> i'm not accumulating heaps of unused files anymore :)
03:44:09 <flummz> used to do that
03:44:17 <flummz> "oh! that paper sounds really interesting!"
03:45:46 <flummz> okay
03:45:54 <flummz> 2 new monitors have arrived
03:46:00 <flummz> which is nice but kind of distracting
03:46:03 <Aruro> flummz: heaps are not bad, u just dont know how to use it, look here: http://www.lesbonscomptes.com/recoll/
03:46:17 <flummz> don't tell me what i dont know, please
03:46:49 <flummz> but thanks for trying to help :)
03:46:54 <Aruro> :D
03:47:52 <flummz> (and i don't need recoll, because i have gnu/linux)
04:15:30 <Hiro`> I'm going through the Stack tutorial. Stack keeps erroring when I try to build with Acme.Missiles, even though I have it in my stack.yml as an extra-dep, as instructed.
04:16:18 <Hiro`> According to stackage, Acme.Missiles is "not currently in any snapshots". Does this mean that it's no longer available to Stack?
04:19:24 <gxx3> is there any work done to improve interactivity of ghci? being able to recompile a function or a file without restarting the program
04:20:40 <oherrala> gxx3: try :reload?
04:20:54 <brownjm> Hi gxx3. I just saw this on the haskell subreddit yesterday: http://neilmitchell.blogspot.fr/2016/04/ghcid-06-released.html
04:20:57 <oherrala> and :load <file>
04:21:00 <tdammers> Hiro`: it means that it isn't contained in any of the snapshots that stack uses, but you can add it explicitly in your stack.yml
04:21:07 <tdammers> -extra-deps IIRC
04:21:59 <Hiro`> tdammers: so it should still build if I declare it in the extra-deps section of my stack.yml file.
04:23:02 <tdammers> yes
04:23:32 <Hiro`> Yet I get an error message saying, `Could not find module "Acme.Missiles"`
04:25:19 <gxx3> oherrala just tried. it sort of works. but if function A calls function B, and I reload function B, A will still call old B
04:26:33 <gxx3> so I would have to reload entire project, somehow
04:26:45 <gxx3> without restarting the runtime
04:34:27 <Hiro`> I wonder if the tutorial is slightly out of date?
04:57:46 <spoing> hello! anyone got any experience with reactive-banana? I'm trying to read the mouse position from sdl (sdl2 library), which includes a function getAbsoluteMouseLocation, with the return type MonadIO m => m (Point V2 CInt)
04:58:45 <spoing> i've added a handler to it using pollEvents getAbsoluteMouseLocation, but I later want to use the value stored in the behavior
04:59:47 <spoing> I tried using valueB, but it tells me the type of the Behavior is expected to be Behavior CInt, and my actual type is Behavior (Point V2 CInt). 
05:01:38 <spoing> so my question is: does anyone know how to either use the valueB function properly, or how to get the correct value (Point V2 CInt) from a Behavior?
05:02:14 <Guest59435> reactive-banana!  Who makes up these names :)
05:04:51 <aphorisme> has anyone some info (paper, article, etc.) on pattern matching algorithms on a sorted list of strings? 
05:10:30 <sebbenbear> hey, does anyone have a good resource on QuickCheck for beginners?
05:10:38 <sebbenbear> Still getting my head around that :/
05:22:49 <Jinxit> aphorisme: if you can change your data structure you can look into tries
05:23:42 <aphorisme> Jinxit: Hm ... all I have is a key-value store as a backend. Maybe there is a way to implement a trie on top of it.
05:37:45 * hackagebot language-dot 0.0.9 - A library for the analysis and creation of Graphviz DOT files  https://hackage.haskell.org/package/language-dot-0.0.9 (BenGamari)
06:05:56 <joneshf-laptop> There's a recurring pattern I'm running into. I have a `Maybe Int` and an `Int`. If the `Int`s are equal, I want to do A. If they're not or the `Maybe Int` is `Nothing`, I want to do B. 
06:06:12 <joneshf-laptop> I've tried a few different ways, and they all seem like I'm missing something.
06:06:38 <joneshf-laptop> `if Just n == foo then doA else doB`
06:07:21 <joneshf-laptop> `case foo of Just m -> if m == n then doA else doB; Nothing -> doB`
06:08:19 <joneshf-laptop> `maybe doB (\m -> if m == n then doA else doB) foo`
06:08:20 <joneshf-laptop> etc
06:08:52 <joneshf-laptop> I feel like the fact that I'm turning the `Maybe Int` into a `Bool` is a smell.
06:09:16 <joneshf-laptop> but I can't figure out if the smell is from the code I'm writing, or the data I've been given.
06:09:30 <pavonia> If you need it a lot, you could write a new function
06:11:59 <joneshf-laptop> yeah, I suppose that's an option
06:12:15 <joneshf-laptop> maybe that's what my real qualm is
06:12:16 <joneshf-laptop> ?
06:15:25 <chelfi> joneshf-laptop: if I'm not mistaken you can use elem from Data.Foldable
06:15:39 <chelfi> > 5 `elem` (Just 5)
06:15:40 <lambdabot>  True
06:15:44 <chelfi> > 5 `elem` (Just 4)
06:15:45 <lambdabot>  False
06:15:46 <etmk> joneshf-laptop: imho you're not converting Int to Bool, but comparing two Ints and dispatching.  The alternative would be just to dispatch based on Int values, if possible
06:15:54 <chelfi> > 5 `elem` (Nothing)
06:15:55 <lambdabot>  False
06:16:02 <pavonia> Wow
06:16:08 <pavonia> :t elem
06:16:09 <lambdabot> (Eq a, Foldable t) => a -> t a -> Bool
06:16:33 <Jinxit> I never knew Maybe was foldable, makes sense though
06:20:32 <etmk> joneshf-laptop: forget that bit about dispatching on Ints.  Doesn't fit your problem.
06:22:46 * hackagebot generic-deriving 1.10.4.1 - Generic programming library for generalised deriving.  https://hackage.haskell.org/package/generic-deriving-1.10.4.1 (ryanglscott)
06:27:31 <joneshf-laptop> chelfi, yeah, that's another I've tried :)
06:27:51 <scshunt> writing custom Show instances is the worst
06:28:04 <joneshf-laptop> maybe I'm overthinking it?
06:32:49 * hackagebot bindings-fluidsynth 0.2.1 - Haskell FFI bindings for fluidsynth software synthesizer  https://hackage.haskell.org/package/bindings-fluidsynth-0.2.1 (BenGamari)
06:52:20 --- topic: 'http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org'
06:52:20 --- topic: set by quicksilver on [Wed Oct 07 07:39:51 2015]
06:52:20 --- names: list (clog pacak takuan Madars obiwahn dcoutts_ ner0x652 jpll kevinyings coeus slomo albertid_ andyhuzhill alx741 edwtjo dhex `^_^ Wuzzy saml micmus lanodan skarn Cale nathyong garphy` PierreM_ jdt_ simukis_ Amnez777- cdg bsdwrk t0by thorkilnaur__ rcharles PatrickRobotham _kfpratt mitchty armlesshobo meditans latk leat Natch algae juanca_ grol Guest14135 Desoxy_ platz_ FreeFull_ earldoug1as Schrostfutz_ sgronblo_ otto_s_ tokik_ mrshoe_ zerokarm1left kosmikus stomp_)
06:52:20 --- names: list (markus1189 jackhill Gothmog_ cow-orke1 sphaleri1e aleator bitemyap1 jotrk_ spaceshi1s aweinstock JRHaigh_ ali_bush_ PaulN abrar_ Proteus_1 jtobin_ dmwit Wamanuz2 danthemy_ pdxleif verement k00mi jud^ themagician_h Wizek__ martinga_ Hugehead Sgeo vlatkoB aphorisme balor madbub mpereira xnil sdothum Saikia81 numee copy` cyborg-one kritzcreek JagaJaga theorbtwo joneshf-laptop rfvizarra nesqi ChristopherBurg cereal_killer_ madgen Guest78297 suls sepp2k Reshi)
06:52:20 --- names: list (bhiliyam zipper JoshS seangrove oisdk_ Noldorin sarfraz wei2912 edwinvdgraaf eyck proteusguy GenericUsername joseph dsh rodlogic dgpratt petermw wrmsr| quimrsto_ carenz a3Dman catern mada sebbenbear spoing marmalodak goodboy bencryption Cetusx viaken Khisanth tristero majoh k3d3 buoto ralu br0kenman t595 jhrcek epta Nivim dredozubov_ kaictl cynick sjl_ swistak35 ploop CosmicRay davl danvet hausdorff defanor fergusnoble iross mw alevy kmicu moei kolko)
06:52:20 --- names: list (Guest34040 ype mudfog_ srenatus caumeslasal dino- Saizan liyang hyPiRion cheater ps-auxw heath toure koala_man Hafydd Guest59344 __rlp Guest84027 thebnq musha68k ziman anachrome jaaket cods pleiosaur oish hsyl20 codebje benjamincrom gdsx Freundlich sLite_ smoose _sjs_ gxx3 zopsi_ agm_ godel_ Iceland_` hackebeilchen1 rossberg watersoul_ silver obcode_ spacebug_ zeroskil1or fizruk mattyw dh edsko dsub takle tinkyholloway andjjj23 ljhms amyers pyon Hiro` prkc)
06:52:20 --- names: list (bazzle fryguybo1 niko MotoNyan ph88^ tumdedum caconym Nahra` kloeri Didac jophish Nikotiini Igloo majjoha pmade Black-Wolf raek Boney simony LordBrain fractalcat fkurkowski ario mountaingoat l3france gfixler krgn````` ertes rashmirathi Internet13 sz0 momofarm Laney shwouchk LowPoten` kishar Giauzar NeverDie_ badon M-radix bob_vh Iskarlar_ thunderrd phanimahesh augur Wizek_ latro`a Yuras chrzyki __uu__ dmag osa1 perspectival zero_byte cic jamie_h kolmodin)
06:52:20 --- names: list (lassulus Meow-J wedens zos avocado chlong wedify jokester Maxdamantus Sonderblade rootnode al-damiri radge__ jcp etrepum adamh dwynwen_ddlleyw noplamodo Willis adulteratedjedi antoniy bgamari andromeda-galaxy lyddonb Taneb tlevine_ gridaphobe peddie KorriX_ Diabolik moredhel_ Biohazard luxbock_ WizJin- Xnuk_ shennyg Kaini_ brassel m4lvin_ Dykam_ taruti benjamingr___ lonokhov solidus-1iver zyoung_ rstone Liskni_si takeey_ zoran119_ xanadu__ mjrosenb_)
06:52:20 --- names: list (vikram_________ kaol_ kriztw_ niteria_ Xorlev CindyLinz bobry danza otterdam keb ssedov M-ou-se fooBard akegalj hegge agocorona cdidd rgr cjwelborn lordf Taylor kakos kilburn_ Flonk orion tobiasBora ksj ozgura laz romtam thomasjo1 thc202 freeman042 sigma914 marr tristanp Asuran kurnevsky1 BartAdv jack_rabbit jre2 nomeata wildsebastian luwanda rydgel hackagebot gem dpower raichoo aloiscochard MrWoohoo geekosaur wvdhaute erikd Skuzzzy FreeBirdLjj Reite quchen)
06:52:20 --- names: list (xelxebar Vbitz ThomasLocke bb010g lyuha kurnevsky electrostat mj12` castlelore obadz ebzzry Azel AndreyG jamiis gabiruh pelegreno elementalest cpup ThatOtherPerson rwiggins Volundr hexagoxel exferenceBot lspitzner hucksy dsantiago angerman zv Zekka cyphase guampa jargon- noam_ phileas alunduil vili Rotaerk predator117 zzz` plutoniix sykora nakal_ pavonia isenmann Moyst ahihi2 fiddlerwoaroof jcurbo Hijiri e-r-a XMunkki m0rphism akfp Polarina Ch0c0late_ jgertm)
06:52:20 --- names: list (urdh keemyb uikkusu bluepixel jerin jokleinn djellemah thimoteus adamCS subfactorial binaryplease daytime Pessimist whiteline spanner LoganG FledRebel irishsultan LostKobrakai doubling M-mistake M-schmittlauch _ashbreeze_ sleblanc goldfire machinedgod s4msung zhulikas cognominal Strout cchalmers pranz M-davidar M-Quora M-david M-Illandan shutdown_-h_now isocliff Miroboru krgn W4RH4WK Guest59435 mnoonan Athas dented42 solrize leadingthenet nisstyre briansmith)
06:52:20 --- names: list (zimp ninedotnine dkibi nshepperd MarcelineVQ HyperHopper Vorpal ibid hamishmack bjobjo rofer Cathy Draggor sinopeus wolfcore ephess_ Factionwars zuz cdk optocoupler justanotheruser stevenxl angseus mingc srcerer bergey` joeytwiddle r0ryy MindlessDrone Sam__ Tehnix magicman Ranhir danharaj dalmahal eldon_ Nik05 knyppeldynan flummz lambdabot Ravana jle` hiratara FMJaguar timrs2998 Oxyd d3lxa pointfree cantstanya keft marens Excureo amiri mikecaruso undoall)
06:52:20 --- names: list (joelburget RageD ephemeron mmaruseacph2 condy Baughn johnzorn Elision araujo Frankablu etabot svp_ myme magthe ThePhoeron AntiSpamMeta dredozubov negatratoron squimmy sevas Slush- cjh` Majiir sword_smith m1dnight_ acertain sdx23 taksuyu lpvb Ewout tusj DrCode Philonous emmanuel_erc derpderp meta-coder infinity0 stelleg tv Bane^ logcat monty Lord_of_Life hjulle Coldblackice_ wtw albel727 Cerise __main__ catsup inr stoned benonsoftware Sornaensis keix meretrix)
06:52:20 --- names: list (mounty cross xeno_ cYmen fengshaun jinblack rbocquet staffehn esssing dixie fr33domlover Intensity armyriad besenwesen troydm ryoia bsima Paks opios Chunlea Plastefuchs Jinxit Keikran dogui geppettodivacin xplat Fullma fangs124 Tinchos chishiki dolio emiliocobos mokus shachaf dreamdust Raynes FireFly sm joehillen dilinger ClaudiusMaximus bsmt ion fuziontech bounb arw elgot dario greeny__ vic_ qnikst CurryWurst sqrt2 Amadiro Morgawr deavid dschoepe zaquest)
06:52:20 --- names: list (ethercrow shadowdaemon jcreekmore heurist ollef crank1988 Ralith ljb bbee dmiles lhynes ortmage kantokomi askarpo ichor kalloc shwouchkster levi sabalaba ByronJohnson tgeeky cgfbee averell hvr magbo monochrom kini suppi petercommand sekrit yusukesuzuki nurupo pikajude xintron dibblego hive-mind bengt__ impure_hate Axman6 AustinMatherne leftylink nwf bydo seagreen phage natimic tromp yorick tommd KeelOfSteel luz1e padre_angolano codedmart amingoia arnihermann)
06:52:20 --- names: list (Scorchin dcoutts pnutus hodapp gniourf geal Eagle_Erwin valdyn nont_ SenpaiSilver andreas303 tuple_cat kwantam wrengr_away tnks zq zmanian__ sbauman beckyconning_ carlw2 amatecha amharc chattered jlewis mvr_ tomjaguarpaw gpampara gthorslund nemesit|znc scshunt mlhmwglt danieli xa0 relrod thomas @ChanServ eikke betawaffle so Vq Akii niluje Ring0` Speed wayne hemite ec\ nexsja Shandy RouxTheDay jlouis bind Kavec Edoxile RazorX| archaic mads- M2tias eagleflo)
06:52:20 --- names: list (ebird maartenpi psyq c_wraith arkarth Ornedan aparent Starfire yeltzooo indiffernet Watcher7 kjanosz nikola julienXX wting mrlase Drezil supki jb55 lokydor stux|RC-only vifon honkfestival bshelden hongminhee froztbyte ahf yarou Rembane Fubar^ kvieta MasseR pfeyz isomorphismes low-profile ironChicken KaneTW fold4 kipras`away cjay davesilva sleepynate Ankhers PHO solirc lnx phaazon larsen kennyp lyxia coddinkn asm89 gratimax Ararat ndeine Erebe JPohlmann liste)
06:52:20 --- names: list (Twey DANtheBEASTman mxf Guest26166 xou dunj3 anoe ]|[ bjs cin alanz SuperTux88 cbaines keteim nek0 c-rog DigitalKiwi BrianHV z-nexx igniting ChongLi_ int-e pyrtsa shteou Yaiyan jnoah botd4bed17f brolin_empey owa d-snp dasmith91 warc vishesh electrogeek saurik demize octophore Niamkik lenstr o`connor SphericalCow srhb tetheno nopf _6a68 amontez ManiacTwister tomku knittl bcoppens case39 richi235 quuxman ackthet naudiz qnix barrucadu lancetw karshan bartavelle)
06:52:20 --- names: list (jmct lpsmith xxpor pikhq bd_ bergmark mattp_ spion sbrg ocharles_ jroesch_ avdi cstrahan fboyer solidsnack trig-ger PotatoGim caasih iphy lpaste alang code_crimes bedouin noexcept TimWolla Kneiva wamaral mindos_cloud____ asjo zomg theDon arkeet chaptastic brisbin Reyu reynir edwardk ajmccluskey yaknyasn {AS} hc qz Purlox dicioccio milessabin karls kyren Geekingfrog runeks spinda ft julmac `0660 oherrala RevJohnnyHealey newsham vin-ivar eyenx_ mrowe ppnkk)
06:52:20 --- names: list (Zemyla BigEndian martinbjeldbak_ tero- jimki_ vincenz nekomune tsani monkeyiq dan64 lf94 kshannon [swift] hanDerPeder zenzike davean woffy DDR hiredman glckr cyberlard sokoll nyuszika7h jrp6 EvanR cosban pieter nobag gothos prooftechnique tg sujeet deni luis DustyDingo yminsky Pucilowski Adios okek SHODAN YP-Cloud_ vikraman xaimus posco kryft d6e CARAM__ dxtr sdboyer Atlanis fmapE benzrf mpark1 aatxe MK_FG robtaylor maerwald GHCI tazjin pi_____ spill swhalen_)
06:52:20 --- names: list (Tristan-Speccy Ov3rload Jello_Raptor tych0 yamadapc japesinator ReinH joshc capicue mgaare Kahva liszt owlscientist ido GGMethos jstimpfle u-ou Xandaros osfameron jkarni PanicSkittle v45h lieven mauke ircbrowse Jaxan minad raid spwhitt Tene Ashy Ariadeno mach pfoetchen kav fyolnish cfloare Chousuke bigs katymoe codehero Ulrar noctux comboy timothyh nathanic nicola statusfailed tswett cnr nilOps LeaChim myfreeweb xnyhps Quintasan brt1 gargawel Horv saiam)
06:52:20 --- names: list (Mandus eL_Bart0 squisher DenSchub Xe friden slick mudfog lstrano_ poga luite johtso andreypopp__ runde alpounet aristid pkogan_ seanparsons xplat|work reem bogdanteleaga dpn` Saimeidae sparr flux Profpatsch Tamini nille brennie solatis riscool mjo cbm80 wagle sternenseemann jedavis_ chu mak` zerowidth acommino- Guest32455 dtulig callumacrae frelux bitonic rikkus_ potatoe adarqui Eiam kyagrd bkolera fabianvf harmchop stasku____ thoughtpolice nbouscal sunfun)
06:52:20 --- names: list (NemesisD mno2 earthy Jonno_FTW quicksilver MitchW lokien mrd epitron pm52 ski opqdonut dxld horatiohb dzackgarza przembot j0llyr0tten lattenwald tessier Vivek Kruppe \u dalcde chipb mikeplus64 ent cmn rtur LnL chelfi gienah joco42 chris2 jstolarek maskd jonrh arianvp Fylwind thallera1 OliPicard dju mendez joeyh icicled refried_ Sigyn mimi_vx Voldenet OutlawStar SegFaultAX alem0lars Klumben SolarAquarion xacktm gbarboza telser adlan_ seliopou_ telmich)
06:52:20 --- names: list (neobrain1 giraffe ddima_ julm icedev dfranke phadej t0mb0- Eliel_ siddhu_ exio4 ggVGc Jaak_ fingerzam1 magically otulp fall__ greymalkin idupree tolt BillyIII Boreeas uwap andyo robertk moop pharaun carter-znc amiller etcinit georgew sephiap Tritlo nolrai2 tjpeden louispan tarcwynne_ trevorriles mankyKitty marcel Guest33283 shans_ S11001001 bgyss Caelum gseitz usr gnusosa sleezd luigy lukky513 jorj abh x1n4u johnw connor_goodwolf zxtx mbrcknl phaskell lurker6)
06:52:20 --- names: list (bernalex Clint zymurgy jgornick Blkt tippenein jzl a6a3uh apo_ ernst metaf5 Walther sewilton mathu vodkaInferno numberten psacrifice folsen gsingh93 scopedTV_ _guios stqism kipd abk7 zrl nkpart kjnilsson acro mpickering Myrl-saki wyvern jrslepak nitrix huonw max-m hbar justicefries hpd zpconn__________ borkdude bananagram leather hansihe canta dqd dysfun zudov sellout djanatyn mero Deewiant abra0 brixen_ ixian vigs Ferdirand rcsgns marko MaienM mt sea-gull)
06:52:20 --- names: list (killtheliterate dustinm t0m0 RayNbow`TU staticfox tek0 Nimatek selckin StoneToad burp freekevin hydraz wolf_mozart hpc fionnan robogoat sajith lujan happy0 Moggle jbalint corne ]OLI[ arrdem jknick TommyC Arch-TK Rodya jix rotty Thulsadum tailgate frontendloader unsymbol Simson-san jessicah` rvncerr lachenmayer rieper nickforall felher vqrs kungp sivs ireniko Belgarion0 capisce Maerten_ tumdum notdan s_e sanitypassing omilu Guest52926 andrewsw Cyrus Adeon Ongy)
06:52:20 --- names: list (Marqin arahael LordDeath timvisher felixsch pavlicek SoupEvil tdammers Ezku bsermons atomi micxjo mceier abby_ ramatevish benl23 statusbot orzo pydave6367 haasn Chobbes chirpsalot funfun malthe razi1 TabAtkins joedevivo ikke henriquev si14 zph_ Bigcheese sclv alphonse23_ alexlord phuu horlicks Forkk andreass_ alk_ Ke abbe tjbp_ wizonesolutions cschneid Lutin_ sohum [BNC]clion pdgwien- drdo tomaw mirsal wto stephe_ nak xcombelle codebam kier banjiewen)
06:52:20 --- names: list (incomprehensibly Elsi sisir_ dkua shelling__ spicydonuts lexi-lambda jameseb tekacs Oejet quakestor mephx gcollins loopspace jfokkan__ chriswk dstockwell mikeizbicki wjm minsky cocreature Tiktailk lispy integral Cr8 acfoltzer drewdavis AlainODea SLi rom1504 Enigmagic oberstein carc jorendorff dmoon1221 pootler_ agrif klugez teeteewhy caw nyandoge orcus _flow_ qguv pchiusano jlyndon irclogger_com carter ggherdov ricardo82 noteventime)
06:57:50 * hackagebot chart-histogram 1.1 - Easily render histograms with Chart  https://hackage.haskell.org/package/chart-histogram-1.1 (BenGamari)
07:08:05 <ntnt> i wonder if TH is a clever screw you to all the ppl who want macros -- if anyone asks for macros, one can respond ' try TH ' ... but TH is so horribly hard to use, no one would every try, and they just give up
07:08:29 <scshunt> TH is hard to use because of haskell's limitations
07:09:03 <ntnt> no no, the line is 'haskell is perfect; if you need macros, you have too much boiler plate; so you should refato ryour ideas'
07:11:43 <edwardk> ntnt: i'd like a decent macro system, but once you have a rich surface syntax the problem is non-trivial
07:12:07 <ntnt> I don't mind TH's complexity; I mind the run time issues I get with it
07:12:17 <ntnt> if only GHC could interpret it instead of "we have to do multi stage compilation", I'd be so happy
07:12:38 <ntnt> use some TH here, some TH there ... and suddenly my edit compile debug cycle is 10x longer
07:12:56 <edwardk> I do wish it was faster
07:13:31 <ntnt> edwardk: you're involved with some effort to do a haskell-like that is strict right?
07:13:40 <edwardk> no
07:13:41 <geekosaur> um, TH *is* interpreted (it uses the bytecode backend)
07:13:42 <aweinstock> aren't TH's syntax trees untyped?
07:13:47 <ntnt> I've been wondering -- why not take stg, and compile stg -> whatever, in a strict manner
07:14:00 <edwardk> i'm very much a proponent of proper laziness
07:14:21 <geekosaur> also typed TH is a thing, at least since (iirc) 7.8
07:14:24 <edwardk> i use purescript from time to time, which is strict, but i'm not involved in its development
07:14:55 <edwardk> another sort-of-strict haskell-like out there is Mu, which is out of standard chartered
07:15:24 <edwardk> We have ermine here at S&P Global Market Intelligence, but that is non-strict, like Haskell.
07:15:41 <edwardk> I do have a structs library in Haskell for making non-trivial inhabitants of kind #
07:15:45 <edwardk> but that is a different beast
07:16:19 <ntnt> right, "ermine" is what I was trying to refer to
07:16:28 <edwardk> yeah, ermine isn't strict
07:16:31 <Athas> Is Ermine fast?
07:16:43 <ntnt> so I've been trying to write a 'strict haskell' -> js compiler, instead of a new language, in trying to still use haskell's tools (i.e. type checker, vim modes, etc ...)
07:16:53 <edwardk> Athas: nope. doesn't have to be, it can delegate anything it needs to to native stuff in the jvm
07:16:58 <ntnt> and I've been wondering if "stg -> strict output, instead of thunks" is the right approach
07:17:08 <edwardk> ntnt: sounds like you are looking for purescript
07:17:13 <aweinstock> geekosaur: https://hackage.haskell.org/package/template-haskell-2.10.0.0/docs/Language-Haskell-TH-Syntax.html#t:TExp ?
07:17:15 <edwardk> which is basically 'strict haskell to obvious js'
07:17:35 <edwardk> the emitted js is quite clean
07:17:42 <geekosaur> aweinstock, yes
07:17:46 <ntnt> edwardk: https://github.com/ermine-language/ermine/wiki/References -- what is the tradeoffs of ermine? documentation seems sparse
07:18:00 * hackagebot digamma 1.0 - A (deprecated) implementation of the digamma function  https://hackage.haskell.org/package/digamma-1.0 (BenGamari)
07:18:00 <ntnt> edwardk: tried purescript, was not a big fan of its existing state of tooling, the compiler also seemed slow
07:18:02 <aweinstock> geekosaur: which submodule are the combinators for it in? I havn't found them yet
07:18:29 <edwardk> ntnt: pros: we have a bunch of reporting stuff we offer up, cons: it only gets enough development to let us build things atop
07:18:48 <geekosaur> that I don't know. I know it exists, that's about it
07:19:02 <ntnt> purescript also has almost no libraries
07:19:05 <edwardk> we have a rewrite of ermine's interpreter in haskell that we started, but ran outof time/resources to work on for now
07:19:39 <edwardk> purescript is definitely the farthest along of the purescript, elm, etc. cottage industry of making strict haskell-likes. it hasa lens library, etc.
07:20:08 <ntnt> yea, but there's also (1) haste, (2) ghcjs, both of which sorta work
07:20:13 <edwardk> if i want haskell, i'll use ghcjs. if i just need to put something on a web page? i'll go with purescript
07:20:31 <edwardk> ghcjs works amazingly well. luite is a mad genius
07:20:33 <ntnt> ghcjs also has front+backend shares code directly. i.e. aeson works nicely
07:20:40 <bernalex> I'd go with haskell to "just put something on a website" too
07:20:45 <ntnt> purescript -- not sure if I want node+purecript on the backend
07:20:58 <edwardk> ntnt: i'm not advocating a purescript backend
07:21:11 <edwardk> we use a lot of purescript in our frontend web dev
07:21:23 <aweinstock> edwardk: is this the structs library you mentioned? https://github.com/ekmett/structures
07:21:24 <edwardk> and the folks on the team really seem to like it
07:21:38 <ntnt> edwardk: really? I'd thought you guy would have gone with reflex for FRP + ghcjs
07:21:45 <edwardk> http://hackage.haskell.org/package/structs
07:22:10 <edwardk> ntnt: ghcjs doesn't play nearly as well with being called _into_ from javascript
07:22:23 <edwardk> purescript feels like javascript but lets you think with types
07:23:00 * hackagebot hmatrix-svdlibc 0.3.2 - SVDLIBC bindings for HMatrix  https://hackage.haskell.org/package/hmatrix-svdlibc-0.3.2 (BenGamari)
07:23:01 <edwardk> also ghcjs brings a rather non-trivial amount of extra baggage into the page
07:23:25 <edwardk> we're commonly using ermine for providing simple charts and things into a page that had nothing to do with us
07:23:27 <ntnt> edwardk: how do you guys do 'type-safe websocket communication' ?
07:23:37 <edwardk> we don't
07:23:46 <ntnt> edwardk: oh, you use purescript + ermine, so there's no advantage of purescritp + haskell, since the backend isn't haskell either
07:23:56 <edwardk> yeah
07:24:10 <edwardk> our ermine 'html writer' uses a bunch of purescript in the front end
07:24:32 <ntnt> ah, thus 'calling into' the purescript
07:25:20 <edwardk> we ultimately use it to generate panels in an existing gui, that mostly isn't purely functional
07:26:12 <elvis4526> How would one desugar this do statement http://hastebin.com/bekocatoji.hs (this is from here https://github.com/jwiegley/gitlib/tree/master/gitlib) - i'm trying to have a better understanding of monads
07:26:21 <edwardk> folks navigate through a big c# based web application, and select a bunch of reporting options, then they get a report done up in ermine, browse it in html and can export it to excel, pdf, etc.
07:27:42 <edwardk> aweinstock: structures provides the cache oblivious map stuff. structs provides a quirky way to build 'strict' objects in haskell so that you can have things like linked-lists with drastically reduced overhead
07:28:00 * hackagebot hoogle-index 0.4.4 - Easily generate Hoogle indices for installed packages  https://hackage.haskell.org/package/hoogle-index-0.4.4 (BenGamari)
07:28:02 * hackagebot language-openscad 0.1.7 - A simple parser for OpenSCAD  https://hackage.haskell.org/package/language-openscad-0.1.7 (BenGamari)
07:28:26 <aweinstock> edwardk: I just read the writeup here: https://www.schoolofhaskell.com/user/edwardk/unlifted-structures
07:28:38 <aweinstock> edwardk: are there more posts about it?
07:29:24 <edwardk> aweinstock: https://www.youtube.com/watch?v=I1FuZrDhOEk&index=16&list=PLnqUlCo055hVfNkQHP7z43r10yNo-mc7B is where i demo'd the idea at the HIW
07:29:48 <edwardk> i did two lightning talks last year
07:30:23 <ntnt> do we have a >> foldl* :: (a -> b -> a) -> a -> [b] -> [a] // where we store all the intermediate a's as well ?
07:31:21 <aweinstock> ntnt: scanl
07:31:35 <aweinstock> :t scanl
07:31:36 <lambdabot> (b -> a -> b) -> b -> [a] -> [b]
07:31:53 <ntnt> aweinstock: ha, I actually found it on hoogle, but read 'scanl', and thought 'must be some parsing bs' lol
07:33:00 * hackagebot linux-evdev 0.3.2 - Bindings to Linux evdev input device interface.  https://hackage.haskell.org/package/linux-evdev-0.3.2 (BenGamari)
07:35:09 <ntnt> > scanl + 0 [1, 2, 3]
07:35:10 <lambdabot>      Could not deduce (Num t0)
07:35:10 <lambdabot>      from the context (Num t,
07:35:10 <lambdabot>                        Num ((b -> a -> b) -> b -> [a] -> [b]),
07:35:24 <ntnt> > scanl + (0 :: Int) [1::Int, 2, 3]
07:35:25 <lambdabot>      Couldn't match expected type ‘[Int]
07:35:26 <lambdabot>                                    -> (b -> a -> b) -> b -> [a] -> [b]’
07:35:26 <lambdabot>                  with actual type ‘Int’
07:35:28 <aweinstock> (+)
07:35:33 <quchen> > scanl (+) 0 [1,2,3]
07:35:35 <lambdabot>  [0,1,3,6]
07:36:05 <quchen> ntnt: What you wrote is trying to add "scanl" to (the function "0" applied to the list "[1,2,3]").
07:36:18 <ntnt> lol
07:36:58 <aweinstock> is there a good 'instance Num (a -> a)' involving church encoding?
07:38:00 * hackagebot monoidal-containers 0.1.2.4 - Containers with monoidal accumulation  https://hackage.haskell.org/package/monoidal-containers-0.1.2.4 (BenGamari)
07:40:36 <freinn> hi! I'm having trouble making a type instance of the Functor typeclass, I don't know what to do http://lpaste.net/159699
07:42:11 <fortran_rulez> hey guys
07:42:11 <aweinstock> freinn: (x y z) means "x applied to y applied to z", and doesn't really make sense as a pattern
07:42:14 <notdan> freinn: should it be let (x,y,z)?
07:42:32 <fortran_rulez> how do I use Cassava with tab delimited files?
07:42:37 <aweinstock> notdan: that's syntactically valid, but not type-correct with the rest of the stuff there
07:42:50 <notdan> yeah true
07:43:01 * hackagebot pandoc-lens 0.5 - Lenses for Pandoc documents  https://hackage.haskell.org/package/pandoc-lens-0.5 (BenGamari)
07:43:22 <notdan> Flip K' a b expands to K' b a, the only constructor of which is K' b
07:43:38 <aweinstock> freinn: try making K' a Functor first, it'll be simpler
07:44:35 <aweinstock> @src Const
07:44:35 <lambdabot> Source not found. Have you considered trying to match wits with a rutabaga?
07:45:09 <freinn> ok thanks aweinstock and notdan
07:48:01 * hackagebot ring-buffer 0.1.3 - A concurrent, mutable ring-buffer  https://hackage.haskell.org/package/ring-buffer-0.1.3 (BenGamari)
07:48:03 * hackagebot stemmer 0.5.2 - Haskell bindings to the Snowball stemming library.  https://hackage.haskell.org/package/stemmer-0.5.2 (BenGamari)
07:52:55 <aweinstock> freinn: I don't think there's a general way to get (instance Functor (f a) => Functor ((Flip f) a)), if that's what you're trying to do
07:53:01 * hackagebot svm-light-utils 0.1.4 - Parsers and formatters for the SVMlight input file format  https://hackage.haskell.org/package/svm-light-utils-0.1.4 (BenGamari)
07:53:29 <aweinstock> freinn: K' is definitely doable, and is fairly simple
07:54:08 <aweinstock> (and is in fact standard, called the Const functor, and is essential in lenses)
07:57:07 <apsod> aweinstock: Isn't it doable only if f is a functor in its first argument?
07:58:01 * hackagebot vector-fftw 0.1.3.6 - A binding to the fftw library for one-dimensional vectors.  https://hackage.haskell.org/package/vector-fftw-0.1.3.6 (BenGamari)
07:58:50 <aweinstock> apsod: how so?
08:00:38 <apsod> Since mapping a (Flip f a b) to a (Flip f a c) given b -> c boils down to mapping an (f b a) to an (f c a) given b -> c
08:02:10 <aweinstock> ok, but how do you denote f being a functor in it's first argument?
08:02:37 <aweinstock> instance Functor (Flip (f a)) => Functor (Flip (f a)) where fmap = fmap -- is trivial
08:04:13 <fortran_rulez> ah decodeWith does the trick for tab delimited files
08:11:09 <ironChicken> if i use the +RTS -M4m -RTS option, does that affect the heap space usable by any foreign libraries with which my program dynamically links?
08:11:22 <apsod> aweinstock: True, but the statement still holds doesn't it?
08:11:54 <geekosaur> ironChicken, no
08:12:08 <ironChicken> ok
08:12:12 <geekosaur> they will likely use either C memory allocator or their own, instead of the ghc runtime;s
08:12:24 <ironChicken> i see
08:13:06 <ironChicken> but actually, now i realise it was a pointless question because the memory allocation i'm worrying about it done in the haskell code using malloc
08:14:24 <ironChicken> essentially, i think i have a memory leak because i think my malloc'ed memory is not being freed
08:15:33 <ironChicken> and i suppose the question i meant to ask is whether than heap size constraining is a reliable test for this
08:15:41 <aweinstock> apsod: I guess so?
08:15:54 <aweinstock> edwardk: watched the talk, have a question
08:16:11 <aweinstock> edwardk: in (isNil t = isTrue# (unsafeCoerce# reallyUnsafePtrEquality# (destruct t) Null)), what types is unsafeCoerce# casting between?
08:17:16 <geekosaur> ironChicken, I'm thinking you want Foreign.ForeignPtr
08:17:29 <geekosaur> http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/haskell2010-1.1.1.0/Foreign-Marshal-Alloc.html#v:finalizerFree
08:17:46 <aweinstock> edwardk: unsafeCoerce# :: ((a :: *) -> (a :: *) -> Int#) -> ((a :: #) -> (b :: *) -> Bool#) -- is it this?
08:17:52 <geekosaur> otherwise, fi you used http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/haskell2010-1.1.1.0/Foreign-Marshal-Alloc.html#v:malloc then you must use http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/haskell2010-1.1.1.0/Foreign-Marshal-Alloc.html#v:free
08:18:06 <ironChicken> geekosaur: yeah, i've been experimenting with that but i was getting segfaults (my fault: i was extracting the raw pointer)
08:18:33 <ironChicken> really, i need to re-think the control flow
08:33:10 <ibng> how can I read "(1/12)" to display Prelude> 1/12 ?
09:06:01 --- topic: 'http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org'
09:06:01 --- topic: set by quicksilver on [Wed Oct 07 07:39:51 2015]
09:06:01 --- names: list (clog Tekkkz amyers mattyw urodna greg viaken W4RH4WK _sjs nesqi yiqiao nidr0x trism joelburget skarn jtobin rwiggins jfischoff magthe _ashbreeze_ cat-o-the-thrill jamie_h ichor majoh pacak tristero Vbitz Wuzzy Cetusx myme gniourf seangrov` Guest49472 ksj abrar_ joneshf-laptop WizJin albertid_ castlelore seyt lassulus whiteline prkc magbo geekosaur carlw2 Dipper valdyn Frankablu aweinstock Argue_ fiddlerwoaroof Cerise cjwelborn Athas anachrome Majiir)
09:06:01 --- names: list (athinggoingon stomp Strout deepfire Vorpal_ ztennix mfukar sqrt2 kmicu noplamodo_ Saizan Yuras_ ldbrandy jbiesnecker mw newjersey joseph mistermetaphor hyPiRion_ edwinvdgraaf jotrk FUZxxl cow-orker zuz_ Bez_ verement sLite buoto roconnor_ Desoxy ess_sing staffehn_ undoall_ vlatkoB zopsi djbeau1 godel Amadiro mmachenry1 hiratara kfpratt supernul1set cdg_ madgen_ goldfire1 MichaelBurge dmj glguy disgrntld seishun centrinia jedws schlicht NeverDie_ eliasr)
09:06:01 --- names: list (umib0zu alunduil byorgey x77686d suls jtcs crobbins mountaingoat Wizek garphy`aw bennofs stianhj skeet70 AleXoundOS schjetne tgeeky wolphin FreeFull milking bts- Natch sabalaba hjljo takuan kakos JRHaigh Gothmog_ nycs cfricke L8D_ Sorella youness caumeslasal codesoup Luke jgt kini mizu_no_oto Aruro mingc hiptobecubic dhinojosa wraithm ggole Lokathor _janne machinedgod etmk __uu__ Gurkenglas linduxed Madars obiwahn dcoutts_ jpll kevinyings coeus slomo alx741)
09:06:01 --- names: list (edwtjo saml micmus lanodan Cale nathyong PierreM_ jdt_ simukis_ Amnez777- klarrt thorkilnaur__ PatrickRobotham mitchty armlesshobo latk algae grol platz_ earldoug1as Schrostfutz_ sgronblo_ otto_s_ tokik_ mrshoe_ zerokarmaleft kosmikus markus1189 jackhill sphaleri1e aleator bitemyap1 spaceshi1s ali_bush_ PaulN Proteus_1 dmwit Wamanuz2 danthemy_ pdxleif koomi jud^ themagician_h martingale Hugehead mpereira xnil sdothum copy` cyborg-one theorbtwo ChristopherBurg)
09:06:01 --- names: list (cereal_killer_ Guest78297 sepp2k bhiliyam oisdk_ Noldorin eyck proteusguy GenericUsername dsh rodlogic dgpratt petermw wrmsr| a3Dman catern mada marmalodak goodboy bencryption Khisanth k3d3 epta Nivim dredozubov_ kaictl cynick sjl_ swistak35 ploop CosmicRay davl danvet hausdorff defanor fergusnoble iross alevy moei kolko Guest34040 ype mudfog_ srenatus dino- liyang cheater ps-auxw heath toure koala_man Hafydd __rlp thebnq musha68k ziman jaaket cods pleiosaur)
09:06:01 --- names: list (oish hsyl20 codebje benjamincrom gdsx Freundlich smoose gxx3 agm_ Iceland_jack hackebeilchen1 rossberg watersoul_ silver obcode_ spacebug_ zeroskil1or dh takle tinkyholloway andjjj23 ljhms pyon bazzle fryguybo1 niko MotoNyan ph88^ tumdedum caconym Nahra` kloeri Didac jophish Nikotiini Igloo majjoha pmade Black-Wolf raek Boney simony LordBrain fractalcat fkurkowski ario l3france gfixler ertes rashmirathi Internet13 sz0 Laney shwouchk LowPoten` kishar Giauzar)
09:06:01 --- names: list (badon M-radix bob_vh thunderrd augur Wizek_ chrzyki dmag cic kolmodin Meow-J wedens zos avocado chlong wedify jokester Maxdamantus Sonderblade al-damiri radge__ jcp etrepum adamh dwynwen_ddlleyw Willis adulteratedjedi antoniy bgamari andromeda-galaxy lyddonb Taneb tlevine_ gridaphobe peddie KorriX_ Diabolik moredhel_ Biohazard luxbock_ Xnuk_ shennyg Kaini_ brassel m4lvin_ Dykam_ taruti benjamingr___ lonokhov solidus-1iver zyoung_ rstone Liskni_si takeey_)
09:06:01 --- names: list (zoran119_ xanadu__ mjrosenb_ vikram_________ kaol_ kriztw_ niteria_ Xorlev CindyLinz bobry danza otterdam keb ssedov M-ou-se fooBard akegalj agocorona cdidd Taylor kilburn_ Flonk orion tobiasBora ozgura romtam thomasjo1 thc202 freeman042 sigma914 marr tristanp Asuran kurnevsky1 BartAdv jre2 wildsebastian luwanda hackagebot gem dpower aloiscochard MrWoohoo erikd Skuzzzy FreeBirdLjj Reite xelxebar ThomasLocke bb010g lyuha kurnevsky electrostat mj12` obadz)
09:06:01 --- names: list (ebzzry Azel AndreyG jamiis gabiruh pelegreno elementalest cpup Volundr hexagoxel exferenceBot lspitzner hucksy dsantiago angerman zv Zekka cyphase guampa jargon- noam_ phileas vili predator117 zzz` plutoniix sykora nakal_ isenmann Moyst ahihi2 jcurbo Hijiri XMunkki m0rphism akfp Polarina jgertm urdh keemyb uikkusu bluepixel jokleinn djellemah thimoteus adamCS binaryplease daytime Pessimist spanner LoganG FledRebel irishsultan LostKobrakai doubling M-mistake)
09:06:01 --- names: list (M-schmittlauch sleblanc s4msung zhulikas cognominal cchalmers pranz M-davidar M-Quora M-david M-Illandan shutdown_-h_now isocliff Miroboru krgn Guest59435 mnoonan dented42 solrize leadingthenet nisstyre briansmith zimp ninedotnine dkibi nshepperd MarcelineVQ HyperHopper ibid hamishmack bjobjo rofer Cathy Draggor sinopeus wolfcore ephess_ Factionwars cdk optocoupler justanotheruser stevenxl angseus srcerer bergey` joeytwiddle r0ryy MindlessDrone Sam__ Tehnix)
09:06:01 --- names: list (magicman Ranhir danharaj dalmahal eldon_ Nik05 knyppeldynan flummz lambdabot Ravana jle` FMJaguar timrs2998 Oxyd d3lxa cantstanya keft marens Excureo amiri mikecaruso RageD ephemeron mmaruseacph2 condy Baughn johnzorn Elision araujo etabot svp_ ThePhoeron AntiSpamMeta dredozubov negatratoron squimmy sevas Slush- cjh` sword_smith m1dnight_ acertain sdx23 taksuyu lpvb Ewout tusj DrCode Philonous emmanuel_erc derpderp meta-coder infinity0 stelleg tv Bane^ logcat)
09:06:01 --- names: list (monty Lord_of_Life Coldblackice_ wtw albel727 __main__ catsup inr stoned benonsoftware Sornaensis keix meretrix mounty cross xeno_ cYmen fengshaun jinblack rbocquet dixie fr33domlover Intensity armyriad besenwesen troydm ryoia bsima Paks opios Chunlea Plastefuchs Jinxit Keikran dogui geppettodivacin xplat Fullma fangs124 Tinchos chishiki dolio emiliocobos mokus shachaf dreamdust Raynes FireFly sm joehillen dilinger ClaudiusMaximus bsmt ion fuziontech bounb)
09:06:01 --- names: list (arw elgot dario greeny__ vic_ qnikst CurryWurst Morgawr deavid dschoepe zaquest ethercrow shadowdaemon jcreekmore heurist ollef crank1988 Ralith ljb bbee dmiles lhynes ortmage kantokomi askarpo kalloc shwouchkster levi ByronJohnson cgfbee hvr monochrom suppi petercommand sekrit yusukesuzuki nurupo pikajude xintron dibblego hive-mind bengt__ impure_hate Axman6 AustinMatherne leftylink nwf bydo seagreen phage natimic tromp yorick tommd KeelOfSteel luz1e)
09:06:01 --- names: list (padre_angolano codedmart amingoia arnihermann Scorchin dcoutts pnutus hodapp geal Eagle_Erwin nont_ SenpaiSilver andreas303 tuple_cat kwantam wrengr_away tnks zq zmanian__ sbauman beckyconning_ amatecha amharc chattered jlewis mvr_ tomjaguarpaw gpampara gthorslund nemesit|znc scshunt ggherdov carter irclogger_com jlyndon pchiusano qguv _flow_ orcus nyandoge caw teeteewhy klugez agrif pootler_ dmoon1221 jorendorff carc oberstein Enigmagic rom1504 SLi AlainODea)
09:06:01 --- names: list (drewdavis acfoltzer Cr8 integral lispy Tiktailk cocreature minsky wjm mikeizbicki dstockwell chriswk jfokkan__ loopspace gcollins mephx quakestor Oejet tekacs jameseb lexi-lambda spicydonuts shelling__ dkua sisir_ Elsi incomprehensibly banjiewen kier codebam xcombelle nak stephe_ wto mirsal tomaw drdo pdgwien- [BNC]clion sohum Lutin_ cschneid wizonesolutions tjbp_ abbe Ke alk_ andreass_ Forkk horlicks phuu alexlord alphonse23_ sclv Bigcheese zph_ si14)
09:06:01 --- names: list (henriquev ikke joedevivo TabAtkins razi1 malthe funfun chirpsalot Chobbes haasn pydave6367 orzo statusbot benl23 ramatevish abby_ mceier micxjo atomi bsermons Ezku tdammers SoupEvil felixsch timvisher LordDeath arahael Marqin Ongy Adeon Cyrus andrewsw Guest52926 omilu sanitypassing s_e notdan tumdum Maerten_ capisce Belgarion0 ireniko sivs kungp vqrs felher nickforall rieper lachenmayer rvncerr jessicah` Simson-san unsymbol frontendloader tailgate Thulsadum)
09:06:01 --- names: list (rotty jix Rodya Arch-TK TommyC jknick arrdem ]OLI[ corne jbalint Moggle happy0 lujan sajith robogoat fionnan hpc wolf_mozart hydraz freekevin burp StoneToad selckin Nimatek tek0 staticfox RayNbow`TU t0m0 dustinm killtheliterate sea-gull mt MaienM marko rcsgns Ferdirand vigs ixian brixen_ abra0 Deewiant mero djanatyn sellout zudov dysfun dqd canta hansihe leather bananagram borkdude zpconn__________ hpd justicefries hbar max-m huonw nitrix jrslepak wyvern)
09:06:01 --- names: list (Myrl-saki mpickering acro kjnilsson nkpart zrl abk7 kipd stqism _guios scopedTV_ gsingh93 folsen psacrifice numberten vodkaInferno mathu sewilton Walther metaf5 ernst apo_ a6a3uh jzl tippenein Blkt jgornick zymurgy Clint bernalex lurker6 phaskell mbrcknl zxtx connor_goodwolf johnw x1n4u abh jorj lukky513 luigy sleezd gnusosa usr gseitz Caelum bgyss S11001001 shans_ Guest33283 marcel mankyKitty trevorriles tarcwynne_ louispan tjpeden nolrai2 Tritlo sephiap)
09:06:01 --- names: list (georgew etcinit amiller carter-znc pharaun moop robertk andyo uwap Boreeas BillyIII tolt idupree greymalkin fall__ otulp magically fingerzam1 Jaak_ ggVGc exio4 siddhu_ Eliel_ t0mb0- phadej dfranke icedev julm ddima_ giraffe neobrain1 telmich seliopou_ adlan_ telser gbarboza xacktm SolarAquarion Klumben alem0lars SegFaultAX OutlawStar Voldenet mimi_vx Sigyn refried_ icicled joeyh mendez dju OliPicard thallera1 Fylwind arianvp jonrh maskd jstolarek chris2)
09:06:01 --- names: list (joco42 gienah chelfi LnL rtur cmn ent mikeplus64 chipb dalcde \u Kruppe Vivek tessier lattenwald j0llyr0tten przembot dzackgarza horatiohb dxld opqdonut ski pm52 epitron mrd lokien MitchW quicksilver Jonno_FTW earthy mno2 NemesisD sunfun nbouscal thoughtpolice stasku____ harmchop fabianvf bkolera kyagrd Eiam adarqui potatoe rikkus_ bitonic frelux callumacrae dtulig Guest32455 acommino- zerowidth mak` chu jedavis_ sternenseemann wagle cbm80 mjo riscool solatis)
09:06:01 --- names: list (brennie nille Tamini Profpatsch flux sparr Saimeidae dpn` bogdanteleaga reem xplat|work seanparsons pkogan_ aristid alpounet runde andreypopp__ johtso luite poga lstrano_ mudfog slick friden Xe DenSchub squisher eL_Bart0 Mandus saiam Horv gargawel brt1 Quintasan xnyhps myfreeweb LeaChim nilOps cnr tswett statusfailed nicola nathanic timothyh comboy noctux Ulrar codehero katymoe bigs Chousuke cfloare fyolnish kav pfoetchen mach Ariadeno Ashy Tene spwhitt raid)
09:06:01 --- names: list (minad Jaxan ircbrowse mauke lieven v45h PanicSkittle jkarni osfameron Xandaros u-ou jstimpfle GGMethos ido owlscientist liszt Kahva mgaare capicue joshc ReinH japesinator yamadapc tych0 Jello_Raptor Ov3rload Tristan-Speccy swhalen_ spill pi_____ tazjin GHCI maerwald robtaylor MK_FG aatxe mpark1 benzrf fmapE Atlanis sdboyer dxtr CARAM__ d6e kryft posco xaimus vikraman YP-Cloud_ SHODAN okek Adios Pucilowski yminsky DustyDingo luis deni sujeet tg prooftechnique)
09:06:01 --- names: list (gothos nobag pieter cosban EvanR jrp6 nyuszika7h sokoll cyberlard glckr hiredman DDR woffy davean zenzike hanDerPeder [swift] kshannon lf94 dan64 monkeyiq tsani nekomune vincenz jimki_ tero- martinbjeldbak_ BigEndian Zemyla ppnkk mrowe eyenx_ vin-ivar newsham RevJohnnyHealey oherrala `0660 julmac ft spinda runeks Geekingfrog kyren karls milessabin dicioccio Purlox qz hc {AS} yaknyasn ajmccluskey edwardk reynir Reyu brisbin chaptastic arkeet theDon zomg asjo)
09:06:01 --- names: list (mindos_cloud____ wamaral Kneiva TimWolla noexcept bedouin code_crimes alang lpaste iphy caasih PotatoGim trig-ger solidsnack fboyer cstrahan avdi jroesch_ ocharles_ sbrg spion mattp_ bergmark bd_ pikhq xxpor lpsmith jmct bartavelle karshan lancetw barrucadu qnix naudiz ackthet quuxman richi235 case39 bcoppens knittl tomku ManiacTwister amontez _6a68 nopf tetheno srhb SphericalCow o`connor lenstr Niamkik octophore demize saurik electrogeek vishesh warc)
09:06:01 --- names: list (dasmith91 d-snp owa brolin_empey botd4bed17f jnoah Yaiyan shteou pyrtsa int-e ChongLi_ igniting z-nexx BrianHV DigitalKiwi c-rog nek0 keteim cbaines SuperTux88 alanz cin bjs ]|[ anoe dunj3 xou danieli xa0 relrod thomas @ChanServ eikke betawaffle so Vq Akii niluje Ring0` Speed wayne hemite ec\ nexsja Shandy RouxTheDay jlouis bind Kavec Edoxile RazorX| archaic mads- M2tias eagleflo ebird maartenpi psyq c_wraith arkarth Ornedan aparent Starfire yeltzooo)
09:06:01 --- names: list (indiffernet Watcher7 kjanosz nikola julienXX wting mrlase Drezil supki jb55 lokydor stux|RC-only vifon honkfestival bshelden hongminhee froztbyte ahf yarou Rembane Fubar^ kvieta MasseR pfeyz isomorphismes low-profile ironChicken KaneTW fold4 kipras`away cjay davesilva sleepynate Ankhers PHO solirc lnx phaazon larsen kennyp lyxia coddinkn asm89 gratimax Ararat ndeine Erebe JPohlmann liste Twey DANtheBEASTman mxf Guest26166)
09:18:05 * hackagebot warc 0.2.0 - A parser for the Web Archive (WARC) format  https://hackage.haskell.org/package/warc-0.2.0 (BenGamari)
09:29:39 <akfp> Anyone using ghci in spacemacs?  How do you use the repl history?
09:30:28 <ggVGc> man, getting into lenses has transformed my haskell experience profoundly
09:30:46 <ggVGc> ertesx: thanks a lot for yesterday! I've been doing lens related stuff all day today, and had no major issues
09:30:51 <ggVGc> it all makes much more sense now
09:30:56 <ggVGc> and I have no problem making my own lenses
09:35:25 <crough> akfp: Meta+P
09:35:28 <crough> lowercase, that is
09:36:00 <crough> (note: it also may be C-p... I'm bad at realizing the buttons I'm smashing)
09:52:06 <ertesx> ggVGc: glad to help
09:53:43 <ggVGc> now I find myself asking, why would I ever write a non-lens getter?
09:57:00 <crough> ehh, getters are the part that I don't really get
09:57:05 <crough> haha, get
09:57:19 <ggVGc> crough: how do you mean?
09:57:33 <ggVGc> a getter is just a function that returns a value. it's as simple as it gets
09:57:46 <ggVGc> but now I wonder, why even write regular getters instead of lenses
09:57:50 <crough> Oh, yes, I understand them. I don't understand the value over functions
09:58:08 <ggVGc> there's no difference?
09:58:09 <crough> like, plain ol functions (for things that are only Getter)
09:58:11 <ggVGc> I don't understand
09:58:23 <ggVGc> that's exactly what a getter is
09:58:49 <ertesx> ggVGc: because a function composes differently from a lens
09:58:49 <ggVGc> :t fst
09:58:51 <lambdabot> (a, b) -> a
09:58:55 <ggVGc> ^ getter
09:59:11 <crough> Well, there's a type in lens called Getter which is what I thought was happening
09:59:21 <ggVGc> ertesx: but you can easily make a lens into a getter when you need it to be
09:59:26 <ertesx> ggVGc: (map (f . g)) rather than (map (f . (^. g)))
09:59:58 <ggVGc> ertesx: yeah, but I'd still implemet the lens first and then if I need the getter often I'd write it in terms of the lens
10:00:00 <ertesx> ggVGc: i guess for an actual *field*, i.e. something you can set as well, it makes sense to write a lens
10:00:32 <ertesx> but you wouldn't want 'putStrLn' to be a setter for String =)
10:00:40 <ertesx> s/setter/getter/
10:01:32 <ggVGc> maybe I would?
10:01:34 <ggVGc> what do you know!
10:02:00 <ertesx> maybe you would…  i wouldn't =)
10:02:00 <ggVGc> nah, sure, if only a getter makes sense of course you wouldn't write a lens. But for almost all cases a lens seems way more reasonable to write first than either a setter or a getter
10:02:53 <ertesx> that implies that almost all functions return something you could set in a way that satisfies the lens laws, and that's probably wrong
10:03:17 <ertesx> i'm more inclined to write traversals than lenses
10:04:59 <ertesx> one of the interesting features of traversals is that you can use them in a non-lens context to do something useful:  they are generalised 'traverse' (a.k.a. mapA) after all
10:05:20 <ramin> @pl sum $ zipWith (\x y -> if x == y then 0 else 1) l r
10:05:21 <lambdabot> sum (zipWith (flip flip 1 . flip flip 0 . (if' .) . (==)) l r)
10:06:31 <ertesx> ggVGc: remember 'both'?  both print (x, y)  -- non-lensy usage…  you can use lenses in this non-lensy, too, but it's generally more useful with traversals
10:06:47 <ramin> @pl dist l r = sum $ zipWith (\x y -> if x == y then 0 else 1) l r
10:06:49 <lambdabot> dist = (sum .) . zipWith (flip flip 1 . flip flip 0 . (if' .) . (==))
10:08:04 <ggVGc> hm, alright
10:08:14 <ggVGc> ertesx: I just wrote this. would you make it a traversal instead? https://gist.github.com/d247227d57373464355d5c1d64a046ed
10:09:01 <ertesx> ggVGc: it *is* a traversal
10:09:46 <ertesx> wait…  that looks like an improper lens
10:09:46 <ggVGc> err, then I've misunderstood something again. I thought traversals implied Applicative?
10:09:50 <ggVGc> oh, okay
10:09:52 <ggVGc> :(
10:09:55 <ggVGc> I thought it was fine
10:10:00 <ertesx> ah, no, it's ok
10:10:23 <ggVGc> why did you think it was improper?
10:10:46 <ggVGc> and why is it a traversal?
10:11:09 <ertesx> not sure why i thought that…  and it's a traversal, because every lens is a traversal
10:11:47 <ggVGc> ah, right
10:18:32 <cocreature> ggVGc: a traversal has to work over _all_ applicatives (that’s what the forall in the type means). since every functor is an applicative, if you have something that works for _every_ functor, that’s even better and will obviously also work for all applicatives
10:26:56 <nitrix> :t Prelude..
10:26:57 <lambdabot> parse error on input ‘Prelude..’
10:27:00 <nitrix> :t Prelude.(.)
10:27:01 <lambdabot> Not in scope: data constructor ‘Prelude’
10:27:12 <ertesx> :t (Prelude..)
10:27:13 <lambdabot> (b -> c) -> (a -> b) -> a -> c
10:27:17 <nitrix> ertesx: Thanks.
10:28:54 <nitrix> Quick question, `id` in Haskell isn't quite correct as an identity morphism for the Hask category, right?
10:29:17 <ertesx> nitrix: it's a family of identity morphisms
10:29:24 <nitrix> I'm reading the wiki and it's pointing out that in cat theory, morphisms are supposed to be monomorphic, and `id` in Haskell is polymorphic.
10:29:49 <ertesx> id :: forall a. a -> a  -- technically id is a function of two arguments, one of which is a type
10:29:56 <nitrix> ertesx: So Hask is in reality the category of Type _families_ ?
10:30:08 <johnw> nitrix: if you think of it as "@id A" for some A, then it will match up with the notation you see in the books
10:30:25 <johnw> because they often write id_a when talking about identity morphisms for some object a
10:30:33 <johnw> (where _a is subscripted a)
10:30:37 <nitrix> Right.
10:30:45 <nitrix> This is what I was expecting.
10:30:45 <johnw> in Haskell it's the same, we just get to infer the a
10:30:51 <ertesx> nitrix: it's the same as this: we tend to talk about "the state monad" when we talk about State, but it is actually a family of state monads, one for each of its arguments
10:31:13 <ertesx> in the same way 'id' is a family of identity functions, one for each type
10:31:33 <nitrix> So they're all families, just because Haskell is inferred.
10:32:05 <nitrix> Interesting.
10:32:29 <ertesx> but the objects of Hask are types and functions, nothing with families
10:32:32 <johnw> it's not the inference that makes them families
10:32:38 <ertesx> it's 'id' that is a family
10:32:58 <johnw> a function a -> b is a family of 'b' values indexed by 'a' values
10:33:02 <ertesx> the first argument, which is the type, is passed implicitly by the type system
10:33:24 <nitrix> Oh, so the objects are types, the functions are morphisms with sources and targets other objects, the composition still the same, but, the identity morphisms are for families?
10:33:39 <nitrix> ertesx: Ah right. You're not the first one that mentions this.
10:34:19 <johnw> nitrix: id is a family of morphisms indexed by type
10:34:37 <johnw> but the first part of your description was right
10:35:30 <ertesx> nitrix: here is another family of morphisms:  const  -- except that this time the index into the family is a regular value and you pass it explicitly
10:35:36 <ertesx> const -- a family of constant functions
10:35:44 <ertesx> const 0 -- a specific constant function
10:36:00 <nitrix> I see.
10:36:01 <ertesx> ok, bad example
10:36:06 <ertesx> const () -- a specific constant function
10:36:09 <ertesx> better one
10:36:15 <ertesx> because 'const 0' is actually still a family =)
10:36:19 <nitrix> Taking a 5 mins break to digest this and grab a lunch :)
10:37:32 <ertesx> hmm…  really bad example…  even 'const ()' is still a family…  let me start over
10:37:40 <ertesx> (&&)  -- a family of functions
10:37:59 <ertesx> indexed by a value of type Bool
10:38:07 <ertesx> (&&) True  -- a certain function of that family
10:39:19 <orion> Is anyone familiar with System.Posix.Signals? I am using SIGHUP to close/open a log file (after rotation), but after one rotation the signal handler doesn't execute anymore.
10:39:35 <orion> Do signal handlers need to be re-installed after they're fired?
10:40:06 <hpc> orion: try it
10:40:37 <hpc> orion: i know something like that is deliberate for ^C so that it's always possible to kill a hung program
10:40:48 <hpc> ^C once runs the signal handler, and again goes right to the RTS
10:40:56 <hpc> unregistering the handler would be an elegant implementation of that
10:41:20 <dolio> johnw: But a function a -> b is also a family of a values indexed by b values. :)
10:41:48 <johnw> dolio: cool :)
10:42:53 <ertesx> orion, hpc: you don't need to reinstall handlers, unless you used CatchOnce
10:43:13 <ertesx> perhaps there is some unix semantics at work here, or perhaps it's just a bug in your code
10:43:21 <hpc> ah
10:46:08 <orion> I'm using fast-logger to write the log file.
10:46:59 <orion> _ <- installHandler sigHUP (Catch (renewLoggerSet ls)) Nothing
10:48:22 <geekosaur> is renewLoggerSet just chaging log stuff, or is it also restarting processing or etc.?
10:48:25 * hackagebot pipes-attoparsec 0.5.1.3 - Attoparsec and Pipes integration.  https://hackage.haskell.org/package/pipes-attoparsec-0.5.1.3 (RenzoCarbonara)
10:49:13 <geekosaur> point being, you =r handler should return to let things resume, it should not reinvoke a processing loop\
10:50:29 <shou> What would you call transforming the recursion of a type Fix-style, e.g. Fix Maybe vs Maybe (Maybe (Maybe ...)), or [a] vs List (List (List ...))? Flattening the recursive type?
10:51:07 <orion> geekosaur: renewLoggerSet comes from the fast-logger library: newfd <- openFileFD file; oldfd <- atomicModifyIORef' fref (\fd -> (newfd, fd)); closeFD oldfd
10:51:21 <k0ral> Hello
10:52:29 <ertesx> shou: i'd call it ""
10:52:33 <ertesx> or "identity" if you will
10:52:53 <ertesx> the only reason we have Fix is that we can't have Maybe (Maybe (Maybe …
10:53:47 <shou> Yeah, I mean what'd you call the action of taking an illegal infinite type and turning it into a Fix-style one.
10:54:23 <ertesx> nothing…  you're doing nothing
10:54:36 <ertesx> Fix is a haskell/H-M peculiarity
10:55:20 <ertesx> hypotheticalToFix :: Maybe (Maybe (Maybe …)) -> Fix Maybe  -- this is the identity function
10:55:54 <k0ral> does anyone know a way to implement class instances for :<: type operator, from 'Data types à la carte', without resorting to Overlapping Instances ?
10:56:03 <ertesx> all it does is wrapping, which is only for type system bookkeeping
10:57:18 <Cale> shou: Many many obvious type errors result in infinite types
10:57:33 <Cale> oh, sorry, misread the question
10:57:43 <Cale> (I answered why we don't support infinite types)
10:58:21 <ertesx> shou: background: in a language that is expressive enough Fix is a function and the infinitely recursive Maybe is indeed identical to Fix Maybe…  but that's very problematic, so we use wrapping
10:59:24 <ertesx> shou: same question: what do you call converting 'repeat 1' to 'fix (1 :)'?  nothing, it's the identity function
10:59:26 <ggVGc> why would infinite types be useful?
10:59:37 <ertesx> shou: or rather the identity "transform"
10:59:49 <Cale> ggVGc: The same reason that recursive types are useful, I suppose.
10:59:50 <EvanR> ggVGc: imagine 1:2:3:4:... at the type level...
11:00:07 <ertesx> ggVGc: see free monads for an example
11:00:23 <ggVGc> whatr real world scenarios are currently hard to deal with because of no infinite types?
11:00:31 <ertesx> Free f a ≃ Either (f (Free f a)) a
11:00:46 <ertesx> ggVGc: languages based on free monads =)
11:00:55 <ggVGc> I know almost nothing about free monads
11:00:56 <ertesx> also generic folds/unfolds
11:01:03 <ggVGc> maybe that's what I should read up on today
11:01:27 <ggVGc> don't we have generic folds?
11:01:49 <hpc> ggVGc: they're one of those things that doesn't really have a huge "THEY ARE GOOD AT THIS" like for instance Applicative with parsing
11:02:00 <ertesx> ggVGc: we do, and technically they are given by fixed points of functors
11:02:11 <hpc> ggVGc: but occasionally you just find things that line up with the abstraction they provide
11:02:34 <ertesx> ggVGc: note, we do have infinite types, just not directly…  we need a newtype indirection
11:02:38 <ggVGc> hpc: yeah, I'm just fishing for if someone's had a moment where they went "Danmn, no infinite types, this is a hassle now"
11:02:54 <hpc> well they wouldn't, they'd use Free ;)
11:03:00 <shou> ertesx: I guess what I want is describing the syntactic change. From an impossible infinite type to a Fixed one so that it's expressible.
11:03:05 <hpc> actually hackage has a reverse dependency lookup now doesn't it?
11:03:07 <EvanR> im usually like, damn i didnt mean to make an infinite type
11:03:12 <EvanR> good thing it stopped me
11:03:26 * hackagebot protolude 0.1.2 - A sensible set of defaults for writing custom Preludes.  https://hackage.haskell.org/package/protolude-0.1.2 (sdiehl)
11:03:31 <ggVGc> EvanR: in which situation has that happened?
11:03:45 <EvanR> that happens a lot, just trying to write normal code
11:03:50 <EvanR> if you put the variables in the wrong place
11:03:56 <hpc> hmm, i can't find it
11:04:09 <ertesx> shou: good question…  i don't think there is a common term for it
11:04:21 <ertesx> shou: haskellising?  newtype-wrapping?
11:04:30 <ertesx> probably the latter, if i'd get to choose
11:04:37 <hpc> ggVGc: http://packdeps.haskellers.com/reverse/free
11:04:40 <EvanR> ggVGc: ex. (Int, (Int, (Int, (Int... a tuple whose right side is itself
11:04:49 <EvanR> probably a mistake
11:05:50 <ertesx> ggVGc: it's one of those things you never quite *need*, but you're glad to have them in your toolbox or at least on your mental bookshelf
11:05:51 <EvanR> > let p = (1, p) in p
11:05:52 <lambdabot>      Occurs check: cannot construct the infinite type: t3 ~ (t2, t3)
11:05:53 <lambdabot>      Relevant bindings include
11:05:53 <lambdabot>        p :: (t2, t3) (bound at <interactive>:1:5)
11:06:21 <ertesx> ggVGc: doing languages and structural processing in a principled way is usually what you use them for
11:06:24 <EvanR> s/cannot/will not/
11:06:44 <hpc> ggVGc: http://hackage.haskell.org/package/free-game-1.1.81/docs/FreeGame.html
11:06:53 <hpc> that uses IterT which is defined in terms of Free
11:07:19 <hpc> for a particularly visible example of it being convenient
11:07:37 <EvanR> interesting
11:08:47 <hpc> also understanding free monads is one of those big makes-you-a-better-programmer moments just for how it makes you think about recursion
11:09:20 <Myrl-saki> @pl (\pyon -> pyon)
11:09:20 <lambdabot> id
11:09:21 <Myrl-saki> pyon: ^
11:09:46 <orion> ha, figured it out.
11:10:11 <EvanR> "makes you a better programmer whether you like it or not"
11:10:15 <orion> I have both a request log /and/ an exception log, and the latter overwrites the handler for the former.
11:10:41 <ertesx> hpc: understanding free monads is one of those big ruins-you-even-more-for-other-languages moments =)
11:10:58 <Myrl-saki> @pl let f x = x
11:10:58 <lambdabot> (line 1, column 12):
11:10:58 <lambdabot> unexpected end of input
11:10:58 <lambdabot> expecting letter or digit, variable, "(", operator, ";" or "in"
11:11:04 <Myrl-saki> @pl f x = x
11:11:04 <lambdabot> f = id
11:11:12 <Myrl-saki> @pl x = f x
11:11:12 <lambdabot> x = fix f
11:11:27 <hpc> heh
11:12:09 <Myrl-saki> @pl add x 0 = x; add x y = add (succ x) (pred y)
11:12:09 <lambdabot> (line 1, column 12):
11:12:09 <lambdabot> unexpected ';'
11:12:09 <lambdabot> expecting letter or digit, variable, "(", operator or end of input
11:12:19 <Myrl-saki> @pl add x y = add (succ x) (pred y)
11:12:19 <lambdabot> add = fix (flip flip pred . ((.) .) . (. succ))
11:12:20 <hpc> well, by the time you are ready for Free you should be to the point where you are able to put aside your dependence on haskell's feature set
11:12:29 <Myrl-saki> pyon: holy cow it's true.
11:13:13 <orion> ertesx: I locked myself in my room for weeks trying to understand free monads.
11:14:03 <orion> Luckily, I now understand them enough so that they are useful.
11:14:08 <orion> (to me)
11:14:23 <ertesx> orion: usually when i have trouble understanding something, i try to reinvent it
11:15:53 <hpc> when i have trouble understanding something, i slack off for a month :P
11:15:55 <EvanR> question, how to write markdown-or-something-documents which contains math notation
11:16:15 <ertesx> EvanR: you can use pandoc's markdown…  it handles math
11:16:16 <hpc> EvanR: embed tex somehow
11:16:20 <kadoban> EvanR: pandoc markdown has support for … yeah that ^
11:16:21 <hpc> oh, or that
11:16:25 <EvanR> i saw pandoc, is that the answer
11:16:35 <hpc> pandoc is always the answer
11:16:35 <EvanR> is there a "pandoc" format
11:16:52 <ertesx> EvanR: there is "pandoc markdown", which is extended CommonMark
11:17:00 <EvanR> interesting
11:17:21 <hpc> EvanR: btw i like that you explicitly said "markdown-or-something" instead of assuming markdown is a well-specified language :D
11:17:40 <bdesham> ugh
11:17:45 <ertesx> you can also use CommonMark + pandoc's math extension…  it's extension-based similiar to haskell's -X/LANGUAGE
11:17:53 <bdesham> the commonmark people were unhappy that markdown didn't have a formal specification
11:18:02 <bdesham> so they came out with a variant that had... no formal specification
11:18:03 <EvanR> i actually cant stand markdown but it seemed like a good direction to try
11:18:46 <hpc> bdesham: to be fair it has a reference implementation
11:18:57 <hpc> which is a sure sight better than markdown
11:19:08 <ertesx> EvanR: none of the "lightweight markup languages" really nail it for me, but they are easier to emacs/vim, a trade-off i'll gladly take
11:19:22 <ertesx> markdown works especially well with emacs' magic "do what i mean" key:  M-q
11:19:34 <hpc> looks like IETF has a draft proposal for markdown though, so hopefully that changes in the near future
11:19:35 <MichaelBurge> Is there a good case where comonads are commonly used in practical software in modern Haskell?
11:19:41 <hpc> and we can start making fun of it on its merits instead
11:19:52 <bdesham> hpc: I mean, the original markdown also had a reference implementation. it just got tripped up in many corner cases (iirc)
11:20:05 <ertesx> MichaelBurge: i've used them for media processing in the past, and i'd use them again
11:20:08 <EvanR> MichaelBurge: comonads are basically good for party tricks
11:20:09 <hpc> it's also considered abandoned
11:20:18 <bdesham> yeah
11:20:45 <bdesham> John Gruber considers it a strength of markdown that "people can do their own thing" and define their own extensions or whatever
11:20:57 <kadoban> hpc: What do you like instead of markdown?
11:21:01 <bdesham> which I think is not an appropriate attitude for a markup format
11:21:05 <crough> The Zipper instance of comonad is useful if the nearest neighbor is important to computation... but I honestly have never needed it abstracted to its class
11:21:07 <EvanR> ertesx: id like to do a comonad for a low rez framebuffer like thing... 
11:21:22 <EvanR> its just that implementing that on a modern PC is like....
11:21:41 <hpc> kadoban: honestly, just writing html or whatever
11:21:50 <MichaelBurge> ertesx: Do you mean like extracting signals from some noise, and building more and more useful signals by repeatedly building up 'extract'?
11:22:15 <ertesx> MichaelBurge: i mean writing filters pointwise and then 'extend'ing them
11:22:33 <hpc> html is syntactically pretty pants, but it's improved quite a bit as html5 continues to evolve, and i know it well
11:23:01 <ertesx> MichaelBurge: (blur =>= transform myMatrix =>= ...) myImage
11:23:05 <hpc> it's not really possible to learn markdown well, as it's an implementation-specific family of nearly-languages
11:23:43 <MichaelBurge> ertesx: Sure, that makes sense. Thanks
11:23:47 <hpc> you can pick up the generalities in about half an hour, then get bitten by some formatting ambiguity that makes a document impossible to format the way you want later on
11:24:05 <hpc> anyway this is getting further and further OT
11:24:08 <EvanR> human beings + 2d char array paradigm = markdown. technology to accomodate two terrible things
11:24:54 <kadoban> hpc: eww. HTML is just godawful.
11:24:57 <ertesx> EvanR: store comonads well for media processing…  basically repa does the same thing with its "delayed arrays", except that you can't have continuous arrays in repa
11:25:02 <hpc> i hear the next version of markdown is going to use latin-1 characters to directly encode PNG images
11:25:29 <EvanR> ertesx: an old school frame buffer is very obviously not continuous ;)
11:25:34 <ertesx> + work
11:26:01 <hpc> kadoban: yeah, but it's my awful
11:26:04 <EvanR> latin-1 encoded as utf8?
11:26:06 <ertesx> EvanR: they don't have to be continuous…  Store is fully polymorphic on its index type, which repa is not
11:26:21 <EvanR> ertesx: yes basically Store is what im thinking of
11:26:36 <hpc> EvanR: (aka, opening a png file in vim)
11:26:45 <kadoban> hpc: I only use HTML for like, templates. Never content, personally. I tend to just use markdown because it's simple enough and doesn't annoy me too much.
11:27:28 <TallerGhostWalt> is there a way to turn on a CPP macro flag in a library... 
11:27:37 <TallerGhostWalt> I am trying to get the EVENTLOG to display for Haxl
11:27:46 <TallerGhostWalt> when I run an app that is using it 
11:27:55 <ertesx> EvanR: in fact i've used repa for the final 'realisation' step to get parallel processing with Store =)
11:28:06 <TallerGhostWalt> http://hackage.haskell.org/package/haxl-0.3.1.0/docs/src/Haxl-Core-Monad.html#runHaxl
11:29:32 <EvanR> hpc: ok thats sounds awful now
11:29:48 <hpc> yeah, i was just being silly :P
11:29:52 <EvanR> ohd
11:29:53 <EvanR> oh
11:30:13 <hpc> the joke was that it almost sounds plausible
11:30:37 <ertesx> hpc: it is plausible…  just replace "markdown" by "LaTeX" in your joke
11:30:47 <hpc> lol
11:31:19 <TallerGhostWalt> maybe I need to recompile with the -DEVENTLOG ?
11:31:28 <TallerGhostWalt> in my library
11:31:39 <EvanR> you know what happens when you make a joke about a technology too terrible for someone to invent
11:31:51 <EvanR> </rhetorical>
11:33:19 <hpc> a sort of reversal of that is how i wrote acme-microwave
11:33:27 * hackagebot envparse 0.3.2 - Parse environment variables  https://hackage.haskell.org/package/envparse-0.3.2 (MatveyAksenov)
11:33:42 <hpc> becaus that method of counting numbers is extremely handy as far as UI goes, but take it out of context and it's ridiculously stupid
11:33:55 <hpc> and sounds too terrible to invent
11:35:32 <EvanR> ive never tried pressing 60
11:35:40 <EvanR> i press `1' ;)
11:35:56 <hpc> try doing 90 seconds sometime
11:36:06 <EvanR> `1' `+30 seconds' ;)
11:36:12 <ertesx> hpc: why is that an acme package?
11:36:14 <hpc> too many buttons :P
11:36:28 <ertesx> it's the same number of buttons as "90"
11:36:29 <hpc> ertesx: because it's breaking a ton of implicit rules of numeric literals
11:36:38 <EvanR> i get confounded when theres no +15 seconds button, unfortunately
11:36:40 <ertesx> hpc does it?  i don't think so
11:36:43 <hpc> ertesx: 170 > 200 == True
11:37:04 <hpc> 200 is 2 minutes, 170 is 2:10
11:37:09 <Renard_Chase> Can someone possibly explain how '.' works? I don't seem to exactly get it
11:37:11 <ertesx> hpc: you're mixing up something
11:37:26 <hpc> am i?
11:37:26 <ertesx> hpc: remember that you have an implicit equivalence relation =)
11:37:29 <geekosaur> ertesx, that *is* how microwaves do it
11:37:42 <geekosaur> if the input makes no sense in base-60 then it's retried as a number of secon ds
11:37:57 <ertesx> yeah, i got that…  i still think it's valid
11:38:23 <hpc> ertesx: it's valid if you accept the word of our reheated lord and savior
11:38:33 <ertesx> remember to check the rules *below* fromInteger
11:38:34 <hpc> but show any random person that 170 > 200 and you'll get laughed at
11:38:48 <hpc> ertesx: like i said, implicit rules ;)
11:38:54 <hpc> it's technically sounds but looks stupid
11:38:56 <hpc> and that's the joke
11:39:11 <hpc> dear god freenode
11:39:34 <ertesx> sorry for ruining the joke =)
11:39:45 <ertesx> the god of algebra made me do it
11:39:59 <hpc> yeah, it's just one of the weirder acme packages because the joke isn't as overt
11:40:14 <hpc> or directly language-related
11:40:34 <ertesx> it's like my acme-schoenfinkel…  nothing wrong with the package, but when you have 'hässlich f' in your code, it makes you smile =)
11:40:52 <hpc> yeah
11:41:40 <hpc> that package's haddock is a perfect read comedically speaking
11:41:54 <hpc> a couple pages of polymorphic nonsense and bikeshedding
11:42:01 <hpc> all built up to a really dumb german pun
11:42:51 <hpc> it's funnier than anything in acme-php
11:43:09 <Renard_Chase> > 1+2
11:43:10 <lambdabot>  3
11:43:34 <Renard_Chase> > let f = (+3) . (*4) in f 1
11:43:36 <lambdabot>  7
11:43:48 <Renard_Chase> I don't get why that's not 16
11:44:15 <hpc> (f . g) x = f (g x)
11:44:20 <kadoban> Renard_Chase: It's 1 * 4, then add 3
11:44:35 <hpc> so (+3) . (*4) 1 = (+3) ((*4) 1)
11:44:40 <kadoban> (.) is in an odd order for some reason that I'm still not clear on.
11:44:46 <hpc> = (+3) (1 * 4)
11:44:50 <hpc> = (1 * 4) + 3
11:45:19 <hpc> (.) is in that order because it's mathematically convenient
11:45:28 <hpc> it defines function composition
11:45:40 <Renard_Chase> Ah, ok... that is kind of weird
11:46:05 <hpc> https://en.wikipedia.org/wiki/Function_composition
11:46:07 <Renard_Chase> :q
11:46:30 <hpc> i actually learned it in high school as (f ∘ g)(x) in algebra
11:46:54 <hpc> it was a weird wart in that particular class but rather fortunate for me
11:48:10 <kadoban> (.) is probably my least favorite thing I use often. I'd be so much happier if (>>>) was a thing that people actually used.
11:48:39 <hpc> kadoban: ever tried F#?
11:48:47 <kadoban> No
11:49:05 <hpc> it prefers function composition in that order because it's strict and impure
11:49:17 <hpc> if you somehow find yourself doing windows development you may consider learning it
11:49:52 <kadoban> Which order, the (>>>) way?
11:49:58 <hpc> (also because there were some problems with how it did type inference iirc, but that might have been improved)
11:50:03 <hpc> yeah
11:50:06 <kadoban> Ah
11:50:49 <kadoban> I just mostly find it easier to type if nothing else. I should really find/write some way in vim to switch back and forth between (.) and (>>>) for an expression.
11:51:17 <kadoban> "write write write *go back a random amount, type ., go back more … *sigh*"
12:02:51 <nooben> Hello
12:06:43 <kadoban> Hi
12:07:13 <ggVGc> Hej
12:10:05 <bsima> Hola!
12:10:51 <Iceland_jack> hola bsima 
12:11:35 <bsima> A recurring thought I've had recently: I would love to see a lisp designed around monads
12:12:03 <bsima> and purity
12:12:19 <monochrom> w00t, I defined "pattern XGet k = X (Get k)". now I just discovered that I can write "abc = XGet yyy"
12:19:26 <EvanR> so mathjax is the one that actually works
12:19:29 <MichaelBurge> I have a sum type of ApiRequests, and a bunch of distinct types for each possible response. I'm trying to use DataKinds to write a function makeRequest :: (forall a :: ApiRequest). a -> IO (ApiResponse a)
12:19:57 <MichaelBurge> Whether I use type families or typeclasses, I keep running into an error 'Data Constructor X comes from an un-promotable type ApiRequest'
12:21:16 <MichaelBurge> Is there an example of using DataKinds to write a function similar to makeRequest?
12:21:30 <geekosaur> yes, currently you can't promote a type with non-nullary constructors
12:21:38 <geekosaur> I... think ghc8 might change that?
12:22:28 <MichaelBurge> geekosaur: That's pretty cool. The status page says it's due mid-April. So you're saying there's a chance I could take a nap and a new GHC will solve my problems while I sleep?
12:23:14 <geekosaur> rc3 just came out (source tarball, possibly some bindists out). the hope is that that will be the release version as well
12:23:29 <geekosaur> but I don't rrecall if this was in 8.0.1 or planned for later releases
12:24:33 <MichaelBurge> https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-8.0.1
12:24:42 <MichaelBurge> It says "promotion of GADTs to kinds", so maybe it will have it
12:25:33 <EvanR> i just tried a data kind with a non-nullary ctor and it worked
12:26:06 <EvanR> http://lpaste.net/159707
12:27:17 <EvanR> maybe this doesnt count as promoted
12:27:44 <EvanR> hmm ‘Char’ of kind ‘*’ is not promotable
12:28:24 <java_man> is there a reason why Cassava's decodeOptions is missing quoting alternatives in encodeOptions?
12:28:54 <geekosaur> wonder if that works if you have GHC.Prim imported for C#
12:29:06 <java_man> it's sort of bumming me out. Seems like I have to do some global search and replace so the quoting in this tsv file doesn't throw off decodeWith
12:30:15 <nitrix> EvanR: Question, what symbol are you using to wrap `Char`? My terminal doesn't like it.
12:30:27 <EvanR> smart quotes
12:30:33 <EvanR> i copied and pasted from ghc output
12:30:33 <nitrix> U+?
12:31:33 <EvanR> U+2018
12:31:38 <EvanR> U+2019
12:31:38 <geekosaur> shows as u+2018 here
12:32:06 <EvanR> > '\2018'
12:32:07 <lambdabot>  '\2018'
12:32:15 <EvanR> > text "\2018"
12:32:16 <geekosaur> that's decima
12:32:16 <lambdabot>  ߢ
12:32:19 <EvanR> oh
12:32:30 <EvanR> > text "\x2018"
12:32:32 <lambdabot>  ‘
12:32:38 <geekosaur> > text '\x2018'
12:32:39 <lambdabot>      Couldn't match type ‘Char’ with ‘[Char]’
12:32:39 <lambdabot>      Expected type: String
12:32:39 <lambdabot>        Actual type: Char
12:32:49 <java_man> anyone using cassava here?
12:32:51 <geekosaur> derp
12:33:00 <geekosaur> > text "\x2018"
12:33:02 <lambdabot>  ‘
12:33:09 <EvanR> https://en.wikipedia.org/wiki/Quotation_mark
12:37:45 <EvanR> so mathjax lets you put latex into your html... but to do something like this http://www.logicmatters.net/resources/ndexamples/proofsty.html you need a "package"
12:37:54 <EvanR> can you use packages in your html
12:49:43 <java_man> what should I be using for search and replace on bytestrings?
12:50:20 <texasmynsted> Is there a place I can find descriptions of algebraic data types that are not haskell specific?  By that I mean that users of other functional programming languages would find helpful?
12:51:57 <nitrix> texasmynsted: Minor the `data` that's specific to Haskell, it's very similar I think.
12:52:02 <Athas> Okay, I'm sold.  Stack is very very nice.
12:52:31 <nitrix> texasmynsted: Do those languages support polymorphism? Type variables and so on?
12:52:46 <texasmynsted> yes most do
12:52:57 <nitrix> data Maybe a = Just a | Nothing
12:53:22 <nitrix> Can't go wrong with a definition like this really :P
12:53:47 <Athas> That's not a very algebraic formulation, though!
12:55:28 <monochrom> if you accept SML, Caml, or OCaml as "other languages", then there are descriptions in terms of "other languages"
12:56:32 <monochrom> but it's just product and tagged union.
13:01:07 <EvanR> Athas: i think an explanation in javascript would help javascript programmers, even if it was "algebraic" and even if javascript doesnt have types
13:01:30 <EvanR> theres probably a youtube video floating around about it
13:02:05 <EvanR> using vectors with keywords(?) in clojure is becoming popular to model ADTs
13:02:10 <Athas> EvanR: maybe.  I fear the notational overhead in Javascript would overwhelm the point, to be honest.
13:02:15 <Athas> It would work nicely in Lisp, though.
13:02:26 <EvanR> you need a macro to do pattern matching
13:15:07 <dolio> I think Pierce's Category Theory for Computer scientists might describe algebraic data types in categorical terms, but I bet the Haskell-specific description would be more useful for users of other languages. :)
13:16:47 <acertain> is there a way to make a thunk return a different value when it's being evaluated?
13:17:06 <acertain> if it gets evaluated while it's already being evaluated
13:17:16 <bergmark> acertain: maybe you can use Debug.Trace?
13:17:29 <ertesx> acertain: if that happens, you get a <<loop>>, if i understood your question correctly
13:17:49 <acertain> ertesx, not always, basically I want to cheat out of a loop
13:17:51 <EvanR> within the same thread
13:18:07 <bergmark> oh n/m me
13:18:07 <acertain> sometimes you don't get a <<loop>> and it just loops
13:18:24 <ertesx> acertain: you mean an application-logic loop or a <<loop>>?
13:18:53 <EvanR> if you are doing this in IO you can use StableNames to check if an object has been seen already
13:19:28 <EvanR> and avoid a loop
13:19:29 <acertain> i can do this in IO, but i'd like to be able to reuse work
13:19:46 <acertain> ertesx, e.g. `let a = [2] ++ a in a`
13:20:06 <EvanR> stable names with unsafePerformIO might work
13:20:11 <ertesx> acertain: i think you want observable sharing
13:20:56 <ertesx> denotationally 'a' is indistinguishable from '[2] ++ a'…  observable sharing makes it distinguishable
13:20:59 <ertesx> but it's also highly unsafe
13:21:26 <EvanR> especially for someone trying to work on your code
13:21:27 <ertesx> if that's what you need, see the data-reify library
13:21:32 <EvanR> who could be you
13:21:41 <acertain> observable sharing would work, if i build up an ast, which i'd like to avoid
13:21:59 <ertesx> there is no way to do this in general
13:22:47 <ertesx> you can observe sharing and *some* loops, but if you get an actual loop, there is no way to observe it
13:23:14 <ertesx> the only thing you can do in those cases is time out
13:39:53 <java_chump> how do i make a local library project "visible" to stack
13:40:07 <java_chump> so that when other projects reference the name, they build correctly?
13:44:50 <kadoban> java_chump: You reference it in the stack.yaml file where you want to use it.
13:45:45 <Sonolin> is "zip [0..]" the recommended way of iterating lists (when the index is necessary in the iteration function)?
13:46:00 <Sonolin> I feel bad doing it for some reason (maybe because it feels imperative)...
13:46:42 <lpaste> acertain pasted “No title” at http://lpaste.net/159713
13:46:54 <acertain> i feel like that should work, but it doesn't
13:47:03 <acertain> ideas?
13:47:16 <Peaker> Sonolin: it's not "iterating" really, more of "annotating with indices" and it is a nice way to do it. Certainly not imperative IMO
13:47:19 <kadoban> Sonolin: Seems fine. I don't really see it as imperative, but maybe I'm missing something.
13:47:23 <Peaker> Sonolin: if you use "lens" you can use the Int index of the list
13:47:47 <Sonolin> ok thanks, that makes me feel better at least :)
13:47:52 <Sonolin> and still haven't gotten to lenses, on my todo list though
13:48:40 <Iceland_jack> Sonolin: With 'lens'
13:48:41 <Iceland_jack> > imap (,) "hello"
13:48:42 <lambdabot>  [(0,'h'),(1,'e'),(2,'l'),(3,'l'),(4,'o')]
13:48:58 <Iceland_jack> :t imap :: (Int -> a -> b) -> ([a] -> [b])
13:48:59 <lambdabot> (Int -> a -> b) -> [a] -> [b]
13:49:00 <Iceland_jack> Quite simple
13:49:12 <acertain> it loops in ghci and throws <<loop>> with -O2
13:52:09 <Iceland_jack> Sonolin: If you are interested, 'imap' also works on Maps
13:52:09 <Iceland_jack> > imap (,) (M.fromList [(97, 'a'), (65, 'A')])
13:52:11 <lambdabot>  fromList [(65,(65,'A')),(97,(97,'a'))]
13:52:33 <Iceland_jack> > imap (printf "%d = ord %c") (M.fromList [(97, 'a'), (65, 'A')]) :: M.Map Int String
13:52:34 <java_chump> kadoban under extra-deps?
13:52:35 <lambdabot>  fromList [(65,"65 = ord A"),(97,"97 = ord a")]
13:53:06 <java_chump> kadoban I get an error message with stack build:
13:53:11 <java_chump> "The following package identifiers were not found in your indices: PkgName"
13:53:23 <kadoban> java_chump: Naw, if it's a local directory, you add it in packages, with the extra-dep: true flag
13:53:51 <kadoban> java_chump: The syntax is in the docs on the website. If you can't find it I can look in a bit. It should be under stack.yaml or something, package configuring, something like that.
13:54:26 <kadoban> We should really add a trigger for this … this is like the #1 stack question I seem to get, heh.
13:57:57 <java_chump> kadoban I get a build error because both the included package and the current package have a Lib module...
13:58:10 <java_chump> "Ambiguous module name ‘Lib’:"
13:58:16 <java_chump> "it was found in multiple packages: ..."
13:58:32 * hackagebot shake-language-c 0.9.1 - Utilities for cross-compiling with Shake  https://hackage.haskell.org/package/shake-language-c-0.9.1 (StefanKersten)
13:58:34 * hackagebot ginger 0.2.3.0 - An implementation of the Jinja2 template language in Haskell  https://hackage.haskell.org/package/ginger-0.2.3.0 (TobiasDammers)
13:58:50 <kadoban> java_chump: Well, you probably should fix that part. Usually you want to make some attempt to make module names unique per package.
13:59:27 <kadoban> There's some syntax for package imports, but I don't know it and it'd be better to just do it the right way here.
14:01:24 <java_chump> kadooban okay, i've changed the package Lib module to something unique. now stack is having trouble finding modules in the current project
14:01:37 <java_chump> "Could not find module ..."
14:03:03 <kadoban> java_chump: You have to change it multiply places, you probably missed one.
14:03:08 <kadoban> multiple*
14:03:22 <EvanR> you mean you should make the full name of the module including path to be unique?
14:03:36 <EvanR> Types.hs is a common module name
14:04:09 <kadoban> There should be *some* attempt to make them at least meaningful. If you have a better wording for "don't just call everything Lib", feel free.
14:04:58 <EvanR> two modules in the same package in the same directory called Lib would indeed be bad for several reasons
14:05:10 <java_chump> they're in different packages though
14:05:17 <EvanR> with the same path?
14:05:21 <java_chump> one is a dependency, the other is the current project
14:05:24 <java_chump> they're in different paths
14:05:40 <EvanR> then... shouldnt be an issue?
14:05:40 <java_chump> although i symbolically linked to the other project within the current project directory, maybe that screwed it up?
14:05:59 <EvanR> thats interesting
14:06:15 <kadoban> EvanR: He has project1 with a module Lib (not Project1.Lib, just Lib) and project2 with a module Lib (some story) and is trying to use project2 from project1
14:06:26 <kadoban> s/some/same/
14:06:32 <EvanR> yeah so same "module path" (top level)
14:06:36 <EvanR> thats bad
14:06:55 <EvanR> you cant make a modular called Data.Map and also use Data.Map from containers
14:07:21 <java_chump> at any rate, I've already changed the Lib name. the problem now seems to be that the modules in the current project are no longer visible
14:07:33 <geppettodivacin> @where learn
14:07:33 <lambdabot> https://github.com/bitemyapp/learnhaskell | http://www.seas.upenn.edu/%7Ecis194/spring13/index.html | https://github.com/NICTA/course/
14:07:49 <java_chump> all I did was edit the yaml to add a pointer to the other project directory under packages
14:07:57 <java_chump> so it's
14:07:58 <java_chump> packages:
14:08:01 <java_chump> - '.'
14:08:02 <kadoban> java_chump: You're probably not changing the Lib name in all of the places you need to.
14:08:09 <java_chump> - '../../OtherStuff/.'
14:08:32 * hackagebot html-parse 0.1.0.0 - A high-performance HTML tokenizer  https://hackage.haskell.org/package/html-parse-0.1.0.0 (BenGamari)
14:09:07 <kadoban> java_chump: Did you look in the .cabal file for the package in which you renamed the Lib module? Did you change the file name for it too? Did you look at the module header, if it has one? Did you change any place it's imported?
14:09:48 <java_chump> kadoban I changed it in the cabal file, i changed the filename, and i changed it in the module argument within the file
14:10:30 <EvanR> try installing the other package
14:12:26 <java_chump> EvanR doesn't print anything when i do stack install... hope it worked
14:12:49 <EvanR> thats the unix way
14:13:08 <EvanR> (i dont know stack)
14:14:21 <kadoban> 'stack install' doesn't really mean anything in this context. You don't install libraries to use them, you just specify them in your stack.yaml.
14:15:22 <kadoban> java_chump: You'll have to share more of what's going wrong, if something still is.
14:15:29 <kadoban> lpaste.net can be helpful
14:17:34 <java_chump> kadoban doh!
14:17:41 <java_chump> typo in the module name :P
14:17:49 <kadoban> Ahh
14:19:23 <java_chump> diff question - how do i hide imported packages in the ghci prompt
14:19:25 <java_chump> ?
14:19:37 <java_chump> they're getting to be kind of long
14:20:08 <kadoban> There's some way to set your prompt to something else, I forget the syntax though.
14:20:20 <java_chump> nevermind i found it
14:20:29 <java_chump> :set prompt
14:23:33 * hackagebot werewolf 1.0.0.0 - A game engine for playing werewolf within an arbitrary chat client  https://hackage.haskell.org/package/werewolf-1.0.0.0 (hjwylde)
14:23:35 * hackagebot werewolf-slack 1.0.0.0 - A chat interface for playing werewolf in Slack  https://hackage.haskell.org/package/werewolf-slack-1.0.0.0 (hjwylde)
14:24:26 <ggVGc> ^ useful
14:29:37 <MichaelBurge_> Is there a way to pattern match on a constructor without matching on all of its arguments? I have a sum type and only care about the constructor, but don't want to type an underscore for each argument.
14:31:35 <shachaf> Constructor{}
14:31:37 <Iceland_jack> MichaelBurge {}
14:31:56 <Iceland_jack> > let Left{} = Left 'a' in "not right"
14:31:57 <lambdabot>  "not right"
14:32:13 <Iceland_jack> It's the empty record update syntax
14:33:20 <Iceland_jack> MichaelBurge: If you need this more often or if you want to ignore almost all parameters, pattern synonyms are your friend
14:33:31 <Iceland_jack>     pattern IsLeft :: Either a b
14:33:32 <MichaelBurge_> Ooh, nice. I hadn't seen that before. It looks like it has a generalization where you can match on a subset of the records too
14:33:39 <Iceland_jack>     pattern IsLeft :: Either a b
14:33:39 <Iceland_jack>     pattern IsLeft <- Left{}
14:33:53 <Iceland_jack>     pattern IsRight :: Either a b
14:33:53 <Iceland_jack>     pattern IsRight <- Right{}
14:34:44 <java_pro> is there a library function to unique-ify a Data.Vector
14:34:46 <java_pro> ?
14:35:08 <Iceland_jack> You use them just like normal patterns
14:35:08 <Iceland_jack>     which :: Either a b -> String
14:35:08 <Iceland_jack>     which IsLeft  = "LEFT"
14:35:08 <Iceland_jack>     which IsRight = "RIGHT"
14:35:41 <MichaelBurge_> iceland_jack: At some point I should sit down and read what all of the language extensions are. It seems like they've added a ton recently.
14:35:57 <ggVGc> by the time you finish there'll surely be at least 5 more
14:36:00 <Iceland_jack> lol
14:36:16 <Iceland_jack> I wrote something about it once
14:36:18 <Iceland_jack> @google icelandj pattern synonyms
14:36:18 <lambdabot> https://www.schoolofhaskell.com/user/icelandj/Pattern%20synonyms
14:36:44 <Hijiri> java_pro: what do you mean by unique-ify?
14:36:53 <Iceland_jack> But, as you said, there has been further development on pattern synonyms :) my post doesn't cover 'bidirectional synonyms'
14:37:13 <Iceland_jack> '(explicitly) bidirectional ...'
14:37:37 <Hijiri> java_pro: like hash consing?
14:37:45 <verement> java_pro: fromList . nub . toList ?
14:45:56 <ertesx> verement: that destroys the benefit of using a vector though
14:46:22 <verement> shame about that
14:46:38 <EvanR> fromList . nob . toList, instead you can use the constructN thing
14:46:50 <EvanR> nub*
14:46:55 <MichaelBurge_> sometimes it's hard to tell, since a lot of libraries have rewrite rules.
14:47:01 <MichaelBurge_> they wouldn't cover up a nub like that, though
14:47:01 <ggVGc> :t nub
14:47:02 <lambdabot> Eq a => [a] -> [a]
14:47:11 <ggVGc> what's nub?
14:47:13 <ertesx> MichaelBurge_: that one is easy to tell: it's terrible
14:47:22 <EvanR> > nub [1, 2, 3, 2, 1]
14:47:23 <lambdabot>  [1,2,3]
14:47:26 <ertesx> ggVGc: keep only the first occurrence
14:47:32 <ggVGc> ah, alright
14:47:33 <ggVGc> nice]
14:47:37 <ggVGc> that'll be handy one day
14:47:41 <ggVGc> weird name
14:47:46 <EvanR> ikr
14:47:50 <ggVGc> could be named keepFirst...
14:47:57 <EvanR> how about unique
14:48:04 <EvanR> or uniq
14:48:06 <ggVGc> yeah, that too
14:48:09 <ggVGc> like everywhere else
14:48:12 <ggVGc> thanks haskell
14:48:17 <MichaelBurge_> ggVGc: It's actually an easy way to accidentally go quadratic. It doesn't have an Ord constraint, so it can't use things like a hash.
14:48:27 <MichaelBurge_> I think there's a version somewhere that's n * log n instead of n^2
14:48:27 <ReinH> Iceland_jack: I'm a big fan of bidirectional pattern synonyms.
14:48:43 <EvanR> though the uniq unix command acts more like group in that it doesnt know about non-consecutive runs
14:49:05 <ggVGc> EvanR: which is really really annoying
14:49:10 <ggVGc> and I've had to work around that many times
14:49:17 <EvanR> "just sort first"
14:49:23 <dolio> Just learn what "nub" means. :)
14:49:33 <ggVGc> yeah, but the cases I needed to do it in needed to preserve order
14:49:36 <ggVGc> so I couldn't
14:49:37 <dolio> Then you can use it in conversations.
14:49:43 <ReinH> MichaelBurge_: Data.List.Ordered.nub . sort https://hackage.haskell.org/package/data-ordlist-0.4.7.0/docs/Data-List-Ordered.html#v:nub
14:50:02 <ertesx> option 1: use vector-algorithms to sort the vector, then use a tortoise+hare style algorithm: run through the vector, move elements to the front, skipping duplicates
14:50:06 <EvanR> "haskell terminology for impressing guests at a cocktail party"
14:50:14 <EvanR> first edition
14:50:19 <ertesx> option 2: use vector-algorithms to make a sorted version of the vector, use binary search
14:50:20 <ggVGc> so, a prism(and lens?) can rebuild an object again right? But wen is that useful?
14:50:24 <ggVGc> I can't come up with a use case
14:50:53 <ertesx> option 3: find that your solution did not involve vector-algorithms, rethink and then choose option 1 or 2
14:52:47 <dolio> Why use sorting anyway? It's easy to write n * log k nub that works similarly to the original nub.
14:53:20 <ertesx> dolio: either that one involves a sorted vector, or it will have a huge constant factor in comparison
14:53:22 <dolio> Is naturally stable, lazy, and probably has better asymptotics than sorting.
14:53:42 <EvanR> for vector nub with ord, you can construct a new vector using a set state
14:54:33 <Cale> > foldr (\x xs s -> if S.member x s then xs s else x : xs (S.insert x s)) (const []) "mississippi" S.empty
14:54:34 <lambdabot>  "misp"
14:57:52 <Cale> The special case of foldr in which it produces a function is really quite a handy thing to get familiar with
14:58:36 <EvanR> i am interested to know a detailed check of performance improvement 
14:58:54 <ertesx> don't underestimate the power of memory locality…  something like Set quickly exhausts the caches, adding not only memory cost, but also a huge constant factor to CPU time, as soon as it grows beyond a certain threshold
14:58:58 <EvanR> because sometimes someone will reject that idea because its too slow
14:59:32 <dolio> And your use of a vector copied my entire data set into memory instead of streaming over it in constant space.
15:00:31 <ertesx> dolio: there was a vector to begin with
15:00:41 <EvanR> nub isnt constant space...
15:00:51 <ertesx> dolio: this one is about nubbing a vector in particular
15:01:06 <ertesx> for lists i'd totally go with the Set/HashSet-based nub
15:01:15 <dolio> Oh, I see.
15:01:58 <Lokathor> is there a particular difference between Vector and Array?
15:02:05 <Lokathor> or are they kinda two versions of the same thing?
15:02:17 <ertesx> Lokathor: vector has a better and more complete API with stream fusion
15:02:32 <EvanR> Array has more general indexes
15:02:36 <ertesx> Lokathor: only advantage of array: you can have multi-dimensional indices
15:02:48 <dolio> And be slow. :)
15:03:02 <Lokathor> hmm, well i only need to index by Int, and I expect I'll be doing the index translation myself anyway, so Vector seems to be it
15:03:27 <ertesx> Lokathor: it's preferable to translate manually than to use array in most cases =)
15:03:43 <EvanR> yeah i love translating manually!
15:03:59 <ertesx> there's probably an iso for it…
15:04:28 <EvanR> i would like an infinite-size matrix type
15:04:49 <ertesx> EvanR: type Matrix = (->)
15:04:51 <dolio> Anyone could write a wrapper for vector that supported Ix stuff, probably one that worked for arbitrary underlying vector types.
15:04:55 <dolio> But they haven't. :)
15:05:01 <Lokathor> well, i have a 2d space, with 2d locations, and then i want to store what's at that location in a structure, so translating on my own seems sensible enough
15:05:01 <EvanR> (->) is....
15:05:07 <EvanR> not the same thing!
15:05:47 <ggVGc> when do I want to construct a value from a lens? :(
15:06:15 <ertesx> ggVGc: when that lens is a prism and you want to construct something that isn't a constructor =)
15:06:27 <ggVGc> I jus tdon't know which situation requires it
15:06:32 <ggVGc> I can't find a use case for myself
15:06:37 <ggVGc> but I'd like to have seen one
15:06:42 <ggVGc> so I can identify it
15:07:03 <EvanR> ertesx: though i can see (R2 ->) being a continuous plane
15:07:10 <EvanR> a grid seems different
15:07:18 <ertesx> ggVGc: _Just . _Just
15:07:33 <ertesx> > _Just . _Just # ()
15:07:34 <lambdabot>  Just (Just ())
15:07:35 <ReinH> > "deadbeef" ^? hex
15:07:37 <lambdabot>  Just 3735928559
15:07:50 <Peaker> > _Just . only 5 # ()
15:07:52 <lambdabot>  Just 5
15:07:55 <ReinH> I mean, technically you are always constructing a value when you use a lens ...
15:08:09 <ReinH> fsvo "constructing"
15:08:16 <ertesx> EvanR: (V2 Integer ->)
15:08:56 <EvanR> ertesx: updating that...
15:09:16 <EvanR> and yeah R2 isnt really V2 R
15:09:23 <EvanR> that why it seems different
15:10:41 <ertesx> EvanR: wow, you're pretty demanding!  ok, let me get crazy: i've used Cofree to make an infinite grid that gets less efficient the further you get away from the origin
15:10:58 * EvanR is listening
15:12:16 <ertesx> Cofree Maybe Tile  -- infinite list of tiles…  now replace Maybe by something that has two degrees of freedom and optionally make it go in both directions
15:12:43 <ertesx> you need to be a bit careful with directions, so you don't end up with duplicate tiles, but yeah
15:13:03 <EvanR> what does the Nothing do
15:13:08 <ertesx> uh, not Maybe
15:13:35 * hackagebot hw-bits 0.0.0.3 - Conduits for tokenizing streams.  https://hackage.haskell.org/package/hw-bits-0.0.0.3 (newhoggy)
15:15:12 <chrisede> not quite sure how this works: foldl (\a b -> a * 10 + b) 0
15:15:50 <ertesx> V2 (Cofree F Tile)  -- the outer V2 gives you two half-grids…  i had a design for the inner F to prevent it from producing duplicate tiles…  it wasn't quite V2 itself
15:16:54 <ertesx> EvanR: but if you want to be lazy, V2 (Cofree V2 Tile) should give you an infinite plane…  just remember that you'll have duplicates
15:17:06 <ertesx> s/plane/grid/
15:17:44 <EvanR> data Cofree f a = a :< f (Cofree f a)
15:18:49 <ReinH> ertesx: fun :) you can improve that somewhat with memoization but then it isn't a nice cofree structure any more
15:19:21 <ertesx> ReinH: sharing works with that one, so you shouldn't need memoisation
15:19:45 <EvanR> ok now add serializability!
15:20:02 <ertesx> chrisede: do you understand how the explicitly recursive version works?
15:20:28 <ReinH> ertesx: Nah, you do https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/cellular-automata#got-the-memo-
15:20:42 <chrisede> I understand foldl (\acc x -> acc + x) 0 xs
15:20:57 <chrisede> but that other one got me confused
15:21:11 <ertesx> ReinH: this *is* the memo structure i've used for a store =)
15:22:13 <ReinH> :)
15:22:44 <ReinH> And in fact you still get a slowdown even after memoization :(
15:23:16 <ertesx> chrisede: a left fold is basically an accumulating consumer: the function combines the "next" element (second argument) with the "running accumulated value" (first argument)
15:23:54 * hackagebot hw-succinct 0.0.0.5 - Conduits for tokenizing streams.  https://hackage.haskell.org/package/hw-succinct-0.0.0.5 (newhoggy)
15:24:14 <ertesx> chrisede: for [1,2,3,4] you get:  0 -> 10*0 + 1 = 1 -> 10*1 + 2 = 12 -> 10*12 + 3 = 123 -> 10*123 + 4 = 1234
15:24:19 <chrisede> it's my first day using haskell, is there any way I can see the process in ghci, for instance let it dump the process
15:24:30 <chrisede> so I can better understand
15:25:01 <EvanR> chrisede: the difference between foldl (\a b -> ...) 0 and foldl (\a b -> ...) 0 xs is that you did or didnt add the last argument
15:25:17 <EvanR> without the last argument you still have a function waiting for the last argument
15:25:33 <EvanR> :t foldl
15:25:34 <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
15:25:41 <ertesx> chrisede: not sure (wait for more answers), but if there isn't you can always apply the foldl equations by hand, and that usually pays off even more
15:25:46 <EvanR> Foldable t => (b -> a -> b) -> b -> (t a -> b)
15:26:22 <ertesx> foldl (\x dx -> 10*x + dx) 0 [1,2,3,4] = foldl (\x dx -> 10*x + dx) (10*0 + 1) [2,3,4]
15:27:01 <chrisede> ah I see
15:27:06 <chrisede> Thanks
15:28:24 <ertesx> > foldl (\total nextStr -> total + length nextStr) 0 ["abc", "de", "fghij"]
15:28:26 <lambdabot>  10
15:32:04 <Darwin226> Hey, is `data T s m a = L s | R (m a)` a monad? 
15:32:27 <Darwin226> I can't seem to figure out the bind for the `R m >>= f` case
15:32:27 <fr33domlover> Cale, a few days ago we talked about UUID - just a little fact worth metioning, a UUIDv4 isn't a totally random string - it specifically contains the digit '4' at a specific position, and the rest of it is indeed random :P
15:32:42 <MichaelBurge_> Darwin226: That looks kind of like an EitherT?
15:33:18 <Cale> fr33domlover: yeah, there are 6 non-random bits in it
15:33:23 <Darwin226> MichaelBurge_: Yeah, kind of. I don't know if it's the same. EitherT is m (Either ...) so maybe that makes a difference
15:33:36 <Cale> It's not just the 4, there are an additional 2 bits which are non-random
15:34:08 <MichaelBurge_> Darwin226: Well, return should be easy. That's just 'return = R . return'.
15:34:33 <ertesx> Darwin226: that looks like a monad to me
15:34:46 <ertesx> Darwin226: but first you need to decide what its semantics is
15:35:00 <Darwin226> ertesx: Right now I'd be happy with anything that typechecks
15:35:16 <MichaelBurge_> Darwin226: For >>=, you could probably keep the L without doing anything, and thread >>= to the R part.
15:35:18 <ertesx> Darwin226: what does L denote?
15:35:35 <ertesx> Darwin226: "anything that typechecks" is not necessarily a monad =)
15:35:57 <Darwin226> `R m >>= f = do { a <- m; case f a of L s -> ... pretty sure I need a (m b) here but I don't have a b...}`
15:36:26 <ertesx> Darwin226: again: what does L denote?
15:36:55 <Darwin226> ertesx: Seriously, what ever you want. I can't think of a type checking solution here at all (without things like undefined ofcourse)
15:37:09 <Darwin226> Let's say it denotes the same thing the Left does in Either
15:37:20 <ertesx> Darwin226: your task is to come up with a meaning for L and then implement that meaning
15:37:25 <EvanR> a monad whose actions, when executed, gives you whatever you want
15:37:27 <EvanR> sounds handy
15:37:52 <Cale> Well, if it is a monad, it is likely uniquely a monad
15:37:52 <Darwin226> It's whatever, for some fixed whatever :D
15:38:06 <Cale> It's quite unlikely that there would be more than one instance
15:39:29 <ertesx> wait…  i'm not sure if it's a monad
15:39:42 <Cale> I'm fairly sure it's not, but I don't have a proof
15:40:06 <Darwin226> Yeah... Maybe you guys should try asking on #haskell :D
15:40:13 <Darwin226> That usually works for me
15:40:33 <Cale> Darwin226: lol
15:41:12 <ertesx> it's an Applicative at least, the left-distributive (<|>) variant of Either
15:41:35 <Darwin226> ertesx: Yeah, I've gone exactly that far :/
15:41:36 <Cale> Well, you could also insist on a MonadZero instance for m
15:41:45 <Cale> and maybe it'd work
15:41:49 <ertesx> Darwin226: the left-distributive Either is definitely not a monad
15:41:52 <Cale> (Or MonadPlus, I suppose)
15:42:14 <java_foo> when using generics for Cassava, how do i specify that the record has a prefix or suffix relative to the column identifier in the csv?
15:42:32 <java_foo> i did this before a while back, but i forgot how to do it :(
15:44:02 <Darwin226> Cale: I think I lose a lot of the usual transformers then.
15:44:52 <ertesx> Darwin226: would EitherT work as a replacement?  EitherT e m a ≃ m (Either e a)
15:45:09 <Darwin226> ertesx: Just thinking about that. I think it actually would
15:45:36 <Darwin226> Let's see
15:45:49 <Cale> Yeah, well, what are you trying to do?
15:46:49 <glguy> If that T type was a monad requiring only a Monad constraint of the 'm' type you'd be able to write: R getChar >>= L   and see what character you were going to get without involving all that pesky IO :)
15:47:46 <Darwin226> Cale: I've been trying to make a checked exception system for a while now. It seems to be ALMOST within the reach of the type system. This is a part of my latest attempt. Something inspired by the ether library
15:47:49 <java_foo> anyone know?
15:48:02 <Cale> Darwin226: What's wrong with Either as a checked exception system?
15:48:02 <Darwin226> glguy: Nice job man
15:48:13 <MichaelBurge_> Darwin226: This typechecks at least: http://hastebin.com/ohaxaduper.coffee
15:48:13 <Darwin226> Cale: It only checks one exception :D
15:48:26 <Cale> Darwin226: It checks one exception of an arbitrary type though.
15:49:11 <Cale> You can use Control.Exception's mechanism for a hierarchy of exception types with it too :)
15:49:16 <ertesx> Darwin226: Either Dynamic A
15:49:33 <Darwin226> Cale: I want an interface that integrates with existings monad stacks that keeps track of current possible exceptions and that allows handling of only some of them while reflecting that information in the type
15:50:00 <Darwin226> Typeable defeats the point of checked exceptions
15:50:00 <MichaelBurge_> Darwin226: Oh, there was an article from Well-Typed about encoding exceptions in typeclasses
15:50:16 <ertesx> Darwin226: Either works for that…  exception types can be hierarchic
15:50:17 <MichaelBurge_> Darwin226: http://www.well-typed.com/blog/2015/07/checked-exceptions/
15:50:29 <ertesx> Darwin226: currently we have only two levels: SomeException and the individual exception types
15:50:31 <Darwin226> ertesx: With hidden types
15:50:49 <dredozubov> Darwin226: you can use open-union for that
15:50:52 <ertesx> Darwin226: the reason it's hidden is that we have only those two levels =)
15:50:52 <EvanR> Dynamic is actually a lot more powerful/footshooting than the equivalent thing in many language ertesx uses it to make fun of ;)
15:51:01 <dredozubov> basically it's sum of types
15:52:01 <Darwin226> dredozubov: None of the existing solutions integrate with monad stacks. An open union is exactly the thing I'm trying to cram into a normal transformer
15:52:20 <dredozubov> Darwin226: we crammed it somehow at work
15:52:31 <dredozubov> don't remember the details though 
15:52:34 <Darwin226> dredozubov: Is it at the top of the stack?
15:52:34 <ertesx> Darwin226: you can always use Either to select exception types
15:52:51 <ertesx> Darwin226: Either (Either Ex1 Ex2) A
15:53:17 <ertesx> you can even do some tricks to get full commutativity
15:53:23 <EvanR> somehow "monad stacks" tends to cause you to slide into complex and overengineered extra stuff :(
15:53:36 <Darwin226> ertesx: Now try having other effects in there
15:53:50 <ertesx> Darwin226: EitherT (Either Ex1 Ex2) m A
15:54:23 <dredozubov> Darwin226: we have a clunky encoding of that
15:54:39 <Darwin226> EvanR: Yeah, I've opened the extensible effects paper a few times today
15:54:56 <dredozubov> there's an open union of function from all kinds of custom exception to one type
15:55:23 <dredozubov> that type is gonna be handled in the end
15:55:39 <Darwin226> dredozubov: Hmm, I was hoping for something a bit more liberal
15:55:49 <ertesx> am i the only one who doesn't think that monad transformers are too bad?
15:56:47 <Darwin226> ertesx: Every time I need to write some arbitrary instance from one library for a transformer from the other, I die a little on the inside
15:56:50 <ertesx> (at least with mtl-style effect classes)
15:56:51 <dredozubov> ertesx: i think there are decent mtl-based solutions out there
15:56:52 <hpc> they're a good way to shoot yourself in the foot at the program design level
15:57:01 <ertesx> Darwin226: good point
15:57:05 <hpc> which puts them on par with most other programming languages out there
15:57:08 <hpc> and i don't hate those
15:57:11 <hpc> for the most part
15:58:07 <dredozubov> Darwin226: and still, writing MonadBaseControl instances may be even worse
15:58:25 <Darwin226> dredozubov: tell me about it, wrote 4 of the last week
15:58:46 <Darwin226> thank god for Data.Coerce or there'd be 2 more
15:59:02 <EvanR> maybe theres regular haskell, advanced haskell, and corporate haskell
15:59:04 <ertesx> well, at least Free/FreeT take some of the pain away
15:59:05 <EvanR> three different things
16:00:04 <ertesx> i generally just implement the usual classes, and unless i have some crazy recursive monad it's often just straightforward lifting
16:00:14 <EvanR> corporate haskell studies mathematical techniques to get the program to do a thing without going back and redesigning it the right way
16:00:23 <hpc> ebzzry: but haskell isn't enterprise ready
16:00:25 <EvanR> to satisfy real time constraints
16:00:27 <hpc> let alone mainframe certified :P
16:00:56 <EvanR> and how to ignore the reality of what your code has become
16:02:53 <ertesx> you mean like…
16:02:53 <ertesx> > let five = 2 + 2 in five  -- uh
16:02:54 <lambdabot>  4
16:03:11 <EvanR> > "worse" > "better"
16:03:12 <lambdabot>  True
16:03:13 <ertesx> > let 2 + 2 = 5 in let five = 2 + 2 in five  -- corporate mathematical solution
16:03:15 <lambdabot>  5
16:04:54 <java_foo> is there a standard way to "join" two data vectors on the value of a record field ?
16:06:47 <MichaelBurge_> java_foo: You mean like 'Eq a => Vector b -> Vector c -> (b -> a) -> (c -> a) -> Vector (b, c)'?
16:07:06 <hexagoxel> Does anyone know of (a post about) exemplary applications of free monads, focussing on what exactly can be expressed with them that would otherwise incur significant overhead?
16:08:35 <ertesx> hexagoxel: simple example: Free IO  -- the language of suspendable IO actions…  IO actions with "delimiters"
16:08:38 <java_foo> MichaelBurg_ yeah that would be fine
16:08:56 <java_foo> MichaelBurg where the tuples consist of pairs of value where some predicate is satisfied
16:09:10 <java_foo> MichaelBurge_
16:09:23 <MichaelBurge_> java_foo: That forces you to use either a nested loop join, or assume that the vectors are sorted already.
16:10:12 <java_foo> hm
16:10:21 <EvanR> do you have to use a Vector
16:10:34 <Cale> hexagoxel: It's not so much about overhead
16:11:34 <hexagoxel> (to clarify: i meant syntactical, or any development-time overhead)
16:11:36 <Cale> hexagoxel: Free monads are just one technique for constructing the library of computations you're trying to describe, when you know that it's got to have a monad instance, and especially when you'd like to interpret the same computations in more than one way.
16:11:41 <Cale> ah, okay
16:11:56 <ertesx> hexagoxel: another simple example:  Free ((->) A)  -- a language in which actions can ask for values of type Q…  this one is a great example of what working with free monads looks like
16:11:59 <hexagoxel> sorry, should have made that clear right away.
16:12:05 <Cale> Well, there are some related approaches which I think are often better
16:12:10 <ertesx> whoops
16:12:12 <ertesx> s/Q/A/
16:12:45 <ertesx> Cale: like what?  operational?
16:13:26 <MichaelBurge_> java_foo: I don't think there's a standard function for it, but you could probably write one as long as the nested loop join is okay.
16:13:55 <Cale> ertesx: Well, the so-called "van Laarhoven encoded free monad" is at least on the face of it fairly different, even if it lets you do roughly the same thing
16:14:08 <java_foo> MichaelBurge_ thanks ... darn
16:14:12 <Cale> ertesx: and it's often a bit easier to express the languages we're interested in that way
16:14:29 <ertesx> Cale: what's that?
16:14:36 <java_foo> guess it's back to python for a while :(
16:14:38 <Darwin226> Is that the Free . Coyoneda thing?
16:14:40 <Cale> Well, I like to think about it in stages
16:15:23 <Cale> So, if you have an IO action, say, you might start abstracting over how it does some things by defining a record type with some "methods" which produce IO actions
16:15:41 <Cale> data Ops = Ops { method1 :: ... -> IO result1; ... }
16:16:30 <Cale> If you're rather extreme about that, you might factor out enough operations that you have "enough", such that no other IO actions are required in many contexts. If you'd like to prove that no other IO is required, you can abstract over the choice of monad:
16:16:45 <Cale> data Ops m = Ops { method1 :: ... -> m result1; ... }
16:17:19 <Cale> (perhaps with the intention that you eventually write an Ops IO, but now you have the ability to perhaps write Ops m records for more pure monads)
16:17:46 <Cale> and you can write things which use this which are polymorphic in that choice too:  (Monad m) => Ops m -> m ...
16:18:47 <Lokathor> so i want to write: x < 0 || y < 0 || x >= width || y >= height || cells V.! index
16:18:59 <Cale> So, then the next step is to basically define a monad parameterised over such an Ops record, which passes it along for you
16:19:12 <Lokathor> does the || short circuit? or, does it not matter in the presence of non-strictness?
16:19:29 <Lokathor> because the ! shouldn't be used at the end if the index is out of bounds
16:19:29 <Cale> newtype FreeVL ops a = FreeVL { runFreeVL :: forall m. Monad m => ops m -> m a }
16:19:31 <EvanR> || short circuits
16:19:50 <EvanR> (without special support because laziness)
16:19:52 <jle`> Lokathor: manually evaluate from the defintiion of || and see
16:19:57 <jle`> since (||) is just a normal function
16:20:36 <ertesx> Cale: i see
16:21:13 <hexagoxel> ertesx: thanks. i was fixed on more complex/custom functors, so good to reminded of these simpler examples.
16:21:13 <Lokathor> jle`, i'll have you know that the source link for (||) doesn't work right :P
16:21:16 <jle`> ;_;
16:21:17 <ertesx> Cale: i use free monads when i need to take the structure of the computation apart…  most notably when there is suspension involved
16:21:20 <jle`> @src (||)
16:21:20 <lambdabot> True  || _ = True
16:21:20 <lambdabot> False || x = x
16:21:38 <ertesx> Cale: like in the Free ((->) A) case
16:21:41 <Lokathor> the page can open, but the anchor doesn't work right so it can't jump down to the right spot in the file
16:21:57 <jle`> so, say, (-10) < 0 || (blah blah blah) = True || blah blah blah = True
16:22:17 <jle`> or, more relevantly, (-10) < 0 || _|_ = True || _|_ = True
16:22:36 <Cale> ertesx: Yeah, this makes that "suspension" side of things a little more indirect
16:22:37 <Darwin226> Cale: What do you get from this?
16:22:44 <Lokathor> whee, http://lpaste.net/159717
16:22:46 <ertesx> hexagoxel: you can build the more complex functors by combining the simple ones…  that gives you another form of "effect classes" =)
16:23:54 <Cale> Darwin226: You get a monad of abstract operations. If your ops m is some record type of m-actions, you can apply the FreeVL constructor to one of the field extractors to get a FreeVL action
16:23:57 <wedify> i have a great idea for syntax, if an expression is touching a paren that is interpreted as multiplication. eg. x(1-2) is x*(1-2), whereas x (1-2) is x applied to (1-2)
16:24:16 <wedify> i don't hate myself or others
16:24:45 <Cale> Darwin226: So like, you can build up a little library of these, and then to interpret a computation built up from them, you can apply runFreeVL to some action, and a record of implementations for the operations
16:25:36 <EvanR> Cale: thats pretty cool, in what way is it similar to "free monads" ?
16:25:37 <jle`> wedify: sounds good, i'll submit the PR
16:25:40 <hexagoxel> Cale: thanks as well.
16:26:06 <ertesx> wedify: i have one, too:  let's compile empty source files to programs that print "Hello world."
16:26:23 <Cale> EvanR: http://r6.ca/blog/20140210T181244Z.html
16:26:27 <wedify> jle`: if only i had thought of this before april fool's. and then actually implemented it
16:26:35 <Darwin226> Cale: I think I'd need to see an example of this. I've written a similar record of actions at work recently but after a while it seemed more natural to make it a typeclass. Then the interpreters are instances.
16:27:18 <EvanR> Darwin226: i like this passing in of the implementation... then there is more flexibility
16:27:27 <Cale> http://aaronlevin.ca/post/136494428283/extensible-effects-in-the-van-laarhoven-free-monad
16:27:28 <jle`> > let x = 10 in (*)  2x
16:27:29 <EvanR> you cant compute instances at runtime
16:27:30 <lambdabot>  20
16:27:36 <jle`> wedify: it works backwards ^
16:27:44 <wedify> ertesx: no that's bad because clearly an empty file is any program whatsoever
16:28:25 <Darwin226> EvanR: I'd say it's the exact same tradeoff of using typeclasses for anything
16:28:31 <Cale> (but why does everyone like to refer to everything as a stack, even things which are about as unrelated to stacks as possible?)
16:29:12 <Cale> I guess the thing in that blog post, being a list, is sort of like a stack, in that a list is like a stack.
16:29:17 <Darwin226> Cale: if it's anything like the freer extensible effects, it's still treated pretty much like a stack
16:29:21 <hpc> because everything is a stack in CS 101
16:29:27 <hpc> unless it's an array implementing a stack
16:29:27 <Darwin226> you have to handle effects in a LIFO order
16:30:05 <Cale> It's really referring to monads constructed using monad transformers as "transformer stacks" which kind of gets to me
16:30:29 <Cale> Nobody refers to  f (g (h x))   as a "function stack"
16:30:30 <jle`> > (*)      2x
16:30:30 <Darwin226> It's the same analogy, just even more rigid
16:30:31 <lambdabot>  2 * x
16:30:41 <hpc> i suspect in that case it's more like a synonym for "tower"
16:30:53 <hpc> i admit to being guilty of that as well
16:30:55 <Darwin226> if f (g (h x)) was a datastructure where you had to somehow peel of f then g then h
16:30:58 <Darwin226> they would
16:31:02 <EvanR> Darwin226: well......... this is like how you can use type classes number 37, "how to emulate java"
16:31:17 <EvanR> which i havent seen any benefit to, so no trade off
16:31:48 <puregreen> how is referring to transformer stacks as “stacks” bad?
16:32:20 <Cale> I don't think of monad transformers that way though. I suppose the end result is that you can successively apply lift, and move between the related monads one at a time, but if you have to think about how many times something needs to be lifted, you're using monad transformers incorrectly.
16:32:53 <Cale> (at least, outside of the small module in which you're defining and newtyping your monad)
16:33:24 <EvanR> transformer stacks being "stacks" comes from the same place that "full stack" or "server stack" comes from
16:33:35 <EvanR> which is... i dont know where
16:33:38 <Cale> Well, I don't... yeah
16:33:40 <Cale> hah
16:33:40 <ggVGc> from now on I'll refer to all my programs as function stacks
16:34:10 <Darwin226> Cale: Yeah, I don't really talk about stacks when I'm working with MTL classes
16:34:15 <EvanR> that is interesting to note
16:34:17 <hpc> one of you should ask what the correct term for nested transformers is
16:34:21 <hpc> on listoverflow.com
16:34:39 <EvanR> my clojure code which looked like a . b . c . d for function composition was referred to as a stack
16:34:39 <ggVGc> transformer nests?
16:35:08 <EvanR> which i took to mean something to do with actual stack data structure, and not until now did i realize why they called it that
16:35:10 <hpc> on listoverflow.com
16:35:37 <ggVGc> if haskells type sustem is functional, and monads can be implemented using it, are monads function stacks too?
16:36:03 <EvanR> natural deduction notation... stack
16:36:08 <Darwin226> functions all the way down
16:36:12 <EvanR> everything is a stack
16:36:21 <xa0> What
16:36:29 <ggVGc> I guess I'm a stack engineer now
16:36:30 <jle`> i wouldn't say the type system is functional, we don't have first-class type functions
16:36:39 <EvanR> when you tell someone to check that logs, just say check the stacks
16:37:25 <ggVGc> if we are stack engineers, and ants spend their life building stacks, I guess we're all just ants
16:37:27 <EvanR> jle`: not having first class functions can still feel functional
16:37:45 <hpc> ants spend their lives building java
16:38:57 <xa0> You're all crazy
16:39:35 <hpc> or do ants build xml that then builds java?
16:40:12 <Darwin226> hpc: I feel a stack coming on
16:41:21 <Iceland_jack> <ReinH> Iceland_jack: I'm a big fan of bidirectional pattern synonyms.
16:41:21 <Iceland_jack> we need a club
16:42:26 <wedify> Iceland_jack: you mean for building values as well as matching them?
16:42:31 <Adeon> to beat up bidirectional pattern synonym lovers?
16:43:30 <Iceland_jack> wedify: yes
16:43:31 <Iceland_jack> Adeon:  no
16:43:58 * hackagebot smtps-gmail 1.3.2 - Gmail SMTP Client  https://hackage.haskell.org/package/smtps-gmail-1.3.2 (EnzoHaussecker)
16:44:29 <hpc> ... gmail smtp client
16:44:40 <hpc> that's different from a regular smtp client?
16:45:12 <xa0> Supports gmail-only features
16:45:23 <xa0> Like letting Google see all your data
16:45:58 <hpc> yeah or something like that
16:46:11 <Lokathor> I'll ask before I begin trying to fiddle with this: Can you stack monad transformers on top of ST?
16:46:26 <Lokathor> it's basically the same as stacking them over IO, right?
16:46:37 <fr33domlover> Lokathor, you can stack on top of any Monad, I think
16:46:43 <fr33domlover> even Identity if you like
16:47:32 <Lokathor> well, I want MonadRandom (so, RandT I suppose), and I also want ST
16:47:48 <fr33domlover> Lokathor, to be honest I never used ST so I'm not sure what's the common usage pattern is
16:48:06 <fr33domlover> specifically, not sure ST is used for long-running things and inside MT stacks
16:48:16 <fr33domlover> but i hope someone else will help :P
16:48:36 <hpc> but can you queue ST below other transformers ;)
16:52:25 <MichaelBurge_> fr33domlover: Yeah, it should work. You can even get access to IO with stToIO, but I'm not actually sure if there are any consequences of doing that.
16:52:49 <fr33domlover> Lokathor, ^
16:53:00 <EvanR> Cale: "Further, we can provide arbitrary effect stacks"
16:53:06 <EvanR> in the last link you posted ;)
16:53:24 <fr33domlover> Lokathor, either way, maybe another way is to stack on IO and use stToIO for ST computations
16:53:39 <EvanR> seriously though these van laarhoven things seem bad ass... 
16:54:00 <EvanR> going back i see a lot of references to Data Types a la Carte
16:54:06 * EvanR goes to read that
16:54:19 <Lokathor> conceptually, the computation should need MonadRandom, and that's it. I could do 1 random and then pass in a seed and maintain my own generator inside the ST
16:54:34 <Lokathor> but i'd rahter just be able to intersperse the ST and MonadRandom stuff with a lift here and there
16:54:46 <Lokathor> but the type gymnatics aren't obvious at the moment :(
16:54:50 <Lokathor> i'll have to read up on it
16:56:10 <Mateon1> Hello, I have a quick question. I'm trying to see all types with a given typeclass instance (eg. AstExpression => [TernaryExpression, FunctionCall, Identifier, ...]), is it possible to do that in GHCi?
16:56:50 <Lokathor> i don't think so
16:57:22 <MichaelBurge_> Mateon1: ':info Monad'
16:57:56 <Mateon1> MichaelBurge_: Thank you! :)
16:58:07 <Lokathor> oh types with an instance! >_<
16:58:18 <Lokathor> I thought you meant functions with a typeclass constraint
16:58:24 <Lokathor> I read that very wrong
17:01:06 <Mateon1> Well, actually they wasn't typeclasses, but :info solves it either way. Thanks again
17:05:54 <hpc> this hip library really makes me feel like an idiot
17:06:10 <hpc> trying to figure out how to do manipulations in hip and then get something that juicy can make into something gloss wants
17:06:58 <EvanR> hpc: for my presentation... i could not get gloss/gloss-juicy to load anything
17:09:40 <hpc> EvanR: i can get it to load a 200x100 grid of images that have all been Transform'd
17:09:54 <hpc> it's just very slow and i need to mush it together at runtime into one image
17:10:02 <hpc> and hip seems to be easiest
17:10:32 <hpc> i was considering messing with a pixel buffer myself to mush the images together, but might as well use libraries when possible
17:10:47 <hpc> until i can prove memory twiddling is better in some way
17:18:59 * hackagebot vivid 0.2.0.5 - Sound synthesis with SuperCollider  https://hackage.haskell.org/package/vivid-0.2.0.5 (TomMurphy)
17:23:25 <hpc> oh no, hip depends on cairo, which depends on C stuff
17:23:25 <ajohnson6494> Couldn't match expected type `IO t0' with actual type `[Integer]'
17:23:26 <ajohnson6494> Greetings, I am just starting out learning haskell an I am getting the following error message...
17:23:38 <hpc> and i am on windows... this will be interesting
17:23:39 <ajohnson6494> Any Idea on what could be wrong
17:24:25 <hpc> ajohnson6494: based only on the information presented, your compiler must have been expecting a type IO t0 when it instead got [Integer] :P
17:24:27 <EvanR> that error is pretty common you used an IO action where a list was expected
17:24:35 <hpc> but yeah, that
17:24:40 <hpc> if you paste code we can help further
17:24:41 <hpc> @hpaste
17:24:41 <lambdabot> Haskell pastebin: http://lpaste.net/
17:25:01 <Darwin226> Say I have a type s that's an element of (a ': ss). Now I have two functions: (s ~ a => s -> b) and (Elem s ss => s -> b). Is there a way to get a (s -> b) out of all this?
17:25:05 <ajohnson6494> https://gist.github.com/anonymous/6f1d92201a341ff1132c61b3d95c8776
17:25:22 <hpc> and give you slight nudges in the direction of learning how to interpret and fix these type errors
17:25:43 <Darwin226> I've written a typeclass with an overlappable instance and that part works but it forces me to use IncoherentInstances at the call site since I don't have concrete types even though that's the point.
17:25:47 <hpc> ajohnson6494: you'll be seeing lots of them, type errors are the most common compile error you'll come across
17:26:18 <ajohnson6494> okay, yah I am very new at this language
17:27:10 <ajohnson6494> hpc: my goal of this function is to find all multiples of 3 given a list of integers
17:28:39 <EvanR> step 0 write the type of the function that solves the problem
17:28:54 <EvanR> thatll tell you how to start writing the functions code
17:30:33 <lpaste> ajohnson6494 pasted “Haskell Question” at http://lpaste.net/159724
17:31:26 <xa0> ajohnson6494: main = return multiples (...)
17:31:45 <xa0> return $ multiples (...), even
17:33:22 <glguy> ajohnson6494: Maybe you wanted: main = print (multiplies [1..6])
17:34:00 <glguy> main needs to be an action, like printing; it can't just be a list of numbers
17:34:40 <ajohnson6494> okay thanks, trying now
17:35:01 <xa0> Or that sure
17:35:31 <ajohnson6494> the print(multiples [1,2,3,]) worked Thank You very much!!
17:36:46 <monochrom> usually "main = return (some answer)" does nothing.
17:42:41 <orion> monochrom: When does it not do nothing?
17:44:25 <monochrom> 1. in ghci, you enter "main".  2. sometimes runghc is buggy and does something about some-answer, but I forgot what.
17:48:55 <hpc> in ghci, results of type IO (anything that isn't ()) get printed out after execution
17:49:06 <hpc> and runghc acts like loading ghci and running main
18:13:00 <hommersamson> hello
18:15:21 <hommersamson> man i'm having a hard time doing some simple relational-esque data munging on vectors of records
18:16:01 <EvanR> because vectors are not a good data structure for that
18:16:25 <EvanR> a better way would be to use indexed sets of records
18:16:25 <hommersamson> EvanR maps make this easier perhaps?
18:16:38 <EvanR> which internally may use tries yes
18:20:25 <hpc> blech
18:20:35 <hpc> i ran cabal update and then it went and butterflied a bunch of packages
18:20:50 <EvanR> cabal is the next crypto hash function?
18:20:56 <hpc> probably
18:20:57 <hommersamson> what do people think of Frames is that ready for prime time
18:21:04 <hommersamson> or should i stick with Cassava and Data.Map
18:21:23 <hpc> so i need to reinstall a bunch of things tomorrow, but hopefully it's just gloss-juicy and hsnoise
18:21:54 <hpc> and hopefully i pay attention and install it from a local copy with an upper bound on gloss so it doesn't break again
18:22:07 <hpc> getting so close though
18:23:37 <hommersamson> what was the way to get cassava + generics to prepend a string to the column name in decoding columns to records automatically?
18:34:26 <aberrant> hi all
18:34:50 <aberrant> silly question from a total n00b: using the repl, how do I specify the type interface for a function?
18:35:39 <monochrom> let { f :: Int -> Bool; f x = even x && odd x }
18:41:20 <hommersamson> is there a gist for loading csv data into a Data.Map?
18:45:08 <kadoban> hommersamson: I would imagine there's some packages on hackage for that
18:45:35 <aberrant> monochrom: thank you
18:46:48 <hommersamson> kadoban i thought I remember cassava having a way to do it, but i can't find the help section / example
18:49:55 <hommersamson> huh
18:49:59 <hommersamson> maybe i'm thinking of aeson
18:49:59 <Axman6> hommersamson: what would the key be?
18:55:09 <averagehat_> How might I conditionally update state using a Maybe value?
18:55:32 <averagehat_> If the value is nothing, I want to do skip it, if it's Just, I want to add it
18:55:55 <averagehat_> I know I can use `when` but not sure how to deal with and extract the wrapped avlue
18:55:57 <averagehat_> value*
18:56:14 <kadoban> :t maybe
18:56:15 <lambdabot> b -> (a -> b) -> Maybe a -> b
18:56:30 <kadoban> You can use that kind of, in a 'do' block or elsewhere
18:56:39 <kadoban> :t maybe (return ())
18:56:40 <lambdabot> Monad m => (a -> m ()) -> Maybe a -> m ()
18:56:57 <hommersamson> Axman6 key could be a particular column
18:57:00 <kadoban> :t foldM
18:57:01 <lambdabot> (Monad m, Foldable t) => (b -> a -> m b) -> b -> t a -> m b
18:57:18 <kadoban> averagehat_: That can also be useful ^  Maybe a is a Foldable
18:57:31 <kadoban> s/Maybe a/Maybe/
18:58:06 <kadoban> I think I meant forM
18:58:07 <kadoban> :t forM
18:58:08 <lambdabot> (Monad m, Traversable t) => t a -> (a -> m b) -> m (t b)
18:59:03 <kadoban> :t forM_ (Just 5) -- for example, if that helps
18:59:04 <lambdabot> (Monad m, Num a) => (a -> m b) -> m ()
18:59:12 <averagehat_> so something like
18:59:26 <averagehat_> maybe () (stateful action) (Just x)
19:00:22 <kadoban> Well, you probably need    maybe (return ())
19:01:35 <averagehat_> correct, I missed that part of your comment. But yes, that's exactly the kind of construct I was looking for.
19:02:15 <kadoban> Cool. To me the 'maybe' one is more obvious, the forM ones are … more succinct, but can look a little bizarre until you're used to Maybe being a Foldable.
19:04:42 <numee> Hi, is there a good textbook explaining Scott encoding? There seems to be no mention on Barendregt.
19:04:47 <orion> thread blocked indefinitely in an MVar operation <-- anyone know how to get to the bottom of this?
19:06:05 <hommersamson> what's the best way to dump in-memory monad state in haskell?
19:09:29 <dfeuer> Is the MonadFix instance for [] good for anything?
19:12:22 <leewz> memoization! anyone know a reference for the way i do it here? http://stackoverflow.com/a/36604118
19:15:43 <ntnt> is there a nice way to store relations in haskell ? I can use a Map, but then I only have one primary key -- but I want multiple indexes
19:16:08 <leewz> tuple?
19:16:44 <ntnt> how do I get indices ?
19:18:42 <leewz> huh? i mean if you want to index by k1 k2, then instead index by (k1,k2)
19:19:24 <ntnt> suppose Ihave a tuple (k1, k2, k3, v)
19:19:30 <ntnt> I want to be able to index on k1, also on (k2, k3)
19:20:20 <leewz> maybe instead of being able to index on any of the three, you can normalize. sort k1 k2 k3 and then look up the sorted version
19:21:57 <ntnt> where can I buy a motorcycle
19:21:58 <ntnt> ?
19:22:07 <ntnt> maybe you want a bicycle instead.
19:22:08 <ntnt> :-)
19:22:15 <ntnt> I really do wnat to store relations
19:22:26 <ntnt> I'm reading this paper: http://shaffner.us/cs/papers/tarpit.pdf
19:22:37 <ntnt> and I want to test out the functional relational (not reactive) programming thingy
19:24:26 <leewz> when you index by (k2,k3), what do you actually get?
19:24:33 <leewz> i mean, what do you expect to get?
20:05:05 <shajen_> I am new to irc channel
20:07:40 <shajen_> #Beginer
20:15:41 <leewz> how do i compile a module with -O for use in ghci?
20:21:06 <roboguy`> leewz: The "i" in ghci means "interpreted," so you can't really enable compiler optimizations when you use it
20:21:34 <roboguy`> Or maybe it means "interactive". Either way, it is interpreted
20:22:09 <leewz> one of us is missing something
20:22:20 <leewz> ghci can load compiled code
20:22:47 <leewz> either it loads compiled code if it exists and is new enough, or you can tell it to
20:23:29 <leewz> but i don't know how to compile a module without a main, and if i compile with a main, i can't seem to access the functions inside it
20:24:59 <leewz> okay, i think i got it. have to actually treat it like a module.
20:25:56 <roboguy`> Yeah, the default module name is "Main" and I think it always expects the "main" action to be in it
20:40:42 <adas> when I do something like `data BasicAuth (realm :: Symbol) (userData :: *)` I know that `realm` is a type variable that can be substituted for any type that has kind `Symbol`. Then what does `userData :: *` mean?
20:43:27 <shajen_> quit
20:43:34 <shajen_> QUIT
20:43:46 <kadoban> No, I don't want to.
20:43:55 <adas> "/quit"?
20:45:33 * Clint squints.
20:46:48 <orion> haha, found why the MVar operation was blocked: Two threads can not share the same Chan for bi-directional communication. You need two Chans.
20:49:04 <adas> anyone?
21:08:33 <dfeuer> adas?
21:09:02 <dfeuer> adas, * is the kind of regular old types like Int and Maybe Int and such.
21:10:44 <Shou> adas: * matches datatypes that aren't of other kinds such as Nat, Symbol, or Constraint. So what dfeuer just said basically.
21:10:54 <keer4n> whoami
21:11:46 <adas> dfeuer: Shou why can't we simply use a type variable instead of '*' in that case? As in `(userData :: a)` ????
21:11:58 <dfeuer> Shou, there are also things like  Maybe, [], IO :: * -> *, and StateT :: * -> (* -> *) -> *
21:12:27 <adas> ah oops. my bad
21:12:30 <dfeuer> adas, no, in (userData :: k), k is the *kind* of the type variable userData.
21:12:31 <adas> i think i understood
21:12:34 <adas> its the kind
21:12:36 <adas> not type
21:12:38 <adas> yup
21:12:46 <dfeuer> You are accidentally being polykinded, which is possible, but probably not what you meant.
21:13:12 <dfeuer> Some things can be polykinded, but many many things can't.
21:13:38 <adas> so it can't be 'a' because 'a' is a type variabe that says any "TYPE". '*' is a kind variable that says any "KIND"
21:21:11 <dfeuer> adas, no.
21:21:14 <Shou> adas: actually * is a specific kind called star, like Int is a specific type.
21:21:30 <dfeuer> Here's an example of something polykinded:
21:22:10 <dfeuer> newtype PolyCompose (f :: k2 -> *) (g :: k1 -> k2) (a :: k1) = PolyCompose (f (g a))
21:22:35 <dfeuer> That looks really weird, I know.
21:22:51 <dfeuer> but
21:22:57 <dfeuer> let's come up with an example.
21:24:04 <dfeuer> Suppose    k1 = * -> * -> *,  k2 = * -> *.
21:25:01 <adas> what is the _star_ kind?
21:25:20 <dfeuer> We need   f :: (* -> *) -> *, like    newtype F f = F (f Maybe)
21:26:16 <dfeuer> Then we need g :: (* -> * -> *) -> * -> *, like  newtype G h x = h Int x
21:27:18 <dfeuer> @define newtype PolyCompose (f :: k2 -> *) (g :: k1 -> k2) (a :: k1) = PolyCompose (f (g a))
21:27:20 <lambdabot>  Defined.
21:27:39 <dfeuer> @define FFFFF f = FFFF (f Maybe)
21:27:39 <lambdabot>  .L.hs:151:1: Not in scope: data constructor ‘FFFFF’
21:27:40 <lambdabot>  
21:27:40 <lambdabot>  .L.hs:151:11: Not in scope: data constructor ‘FFFF’
21:27:48 <dfeuer> @define newtype FFFFF f = FFFFF (f Maybe)
21:27:50 <lambdabot>  Defined.
21:28:10 <dfeuer> @define newtype GGGGG h x = GGGGG (h Int x)
21:28:11 <lambdabot>  Defined.
21:29:07 <Shou> adas: it's like the type of a type, it's just called star for what I guess you'd consider normal datatypes like "Int". As you referenced above there are other kinds like Symbol, or even Nat and Constraint. "Show" for example has a Constraint kind because it appears on the right-hand-side of => (type constraints) like: Show a => a -> String.
21:29:45 <dfeuer> Shou, yes, but don't miss the other *standard* kinds, which are composed of * and ->.
21:30:52 <Shou> Oops, I meant left-hand-side
21:31:34 <adas> all those stars make me feel like im in orbit around haskell ... unable to touch down !!!
21:31:35 <Shou> And yeah dfeuer
21:32:35 <dfeuer> adas, here are some useful examples:
21:32:40 <dfeuer> Maybe :: * -> *
21:32:47 <dfeuer> Either :: * -> * -> *
21:33:19 <adas> i guess it mean `Maybe` takes a type of any kind and returns a type of any kind
21:33:26 <dfeuer> No.
21:33:32 <dfeuer> Maybe *only* takes types of kind *.
21:33:45 <dfeuer> * may *look* like a wildcard, but it is *not* a wildcard.
21:33:52 <dfeuer> * is a very specific thing.
21:34:17 <dfeuer> Maybe takes any type of kind * and produces a type of kind *.
21:34:42 <dfeuer> Here's another one:
21:34:51 <adas> so what types have kind *?
21:34:53 <dfeuer> newtype Apply f x = Apply (f x)
21:34:59 <adas> Int? Bool? String?
21:35:06 <adas> et. el..?
21:35:42 <dfeuer> In standard Haskell, Apply has kind    (* -> *) -> * -> *, but in GHC, with the PolyKinds extension, it has kind  (k -> *) -> k -> *
21:36:03 <kadoban> adas: Yep. It's the kind of "concrete" types.
21:36:10 <dfeuer> adas, yes, Int, Bool, String, Bool -> Int, (Bool -> Bool) -> Int, (Int, Bool), etc. all have kind *.
21:36:21 <dfeuer> Polymorphic types can have kind * as well.
21:36:31 <dfeuer> a -> b, (a -> c) -> (d, e), ...
21:37:08 <dfeuer> But  (->) has kind * -> * -> *, and thus  ((->) e) has kind  * -> * .....
21:40:50 <adas> I think I'm close to touch down now.
21:41:08 <adas> is there an equivalent for '*' in the Type realm?
21:41:33 <adas> i think i answered that question earlier
21:41:43 <adas> Int, Bool, String and so on
21:42:26 <dfeuer> adas, no, there isn't really.
21:42:52 <dfeuer> adas, * is kind of weird in that you can just keep adding new things to it.
21:43:48 <dfeuer> You can *sort of* do something *vaguely* similar with data families, but it's not really the same.
21:44:25 <dfeuer> The other kinds that are really open in that sense are # (the kind of unlifted types used for super-low-level stuff sometimes) and
21:44:38 <dfeuer> Constraint, the kind of class constraints.
21:46:18 <dfeuer> You can always make more types of kind * using data or newtype, and you can always make more constraints using class. I think you'd probably have to hack some compiler bits to add things to #, but it's conceptually open.
21:46:53 <adas> is there any way to say "any kind"?
21:47:19 <adas> aldk :: BOX?
21:47:39 <adas> sldk :: SORT?
21:49:53 <adas> in any case, thanks for teh clarification. that was very helpful
21:50:06 <dfeuer> adas, yeah,
21:50:12 <dfeuer> things can be polykinded.
21:50:26 <dfeuer> For instance....
21:51:41 <dfeuer> data Categorize (s :: k -> k -> *) (x :: k) (y :: k) where {Id :: Categorize s a a; Embed :: s a b -> Categorize s a b}
21:52:37 <dfeuer> which expresses the notion of upgrading a Semigroupoid to a Category. The kind determines the *objects* of the Semigroupoid/Category.
21:54:17 <adas> so in that example, 's', 'x' and 'y' are type variables. so what is the difference between 'k' and '*' ?
21:55:23 <adas> i suppose 'k' is also a type variable? is it?
21:55:31 <adas> wrong
21:55:42 <adas> 'k' is kind .. but what kind?
21:55:53 <adas> so '*' is a very specific kind
21:57:12 <Clint> adas: https://wiki.haskell.org/Kind
21:59:01 <adas> if s was s :: * -> * -> * wouldn't it mean the same thing?
21:59:52 <adas> because I can't find any type of kind 'k' !!
22:00:19 <nshepperd> k is a kind variable
22:03:00 <adas> the concept of a value of any type can be represented with a type variable
22:03:13 <adas> the concept of a type of kind can be represented with a kind variable
22:04:42 <adas> *any kind
22:06:02 <adas> this is soo meta. I feel high. God must be somewhere close by.
22:07:10 <adas> so If 'k' is a kind variable, i suppose it stands for 'any type'
22:08:06 <Rotaerk> a type variable stands for any type; a kind variable stands for any kind
22:10:24 <adas> Rotaerk: now that makes sense. I think that  sorted out the folds in brain 
22:10:51 <adas> I should keep telling myself that types occur in type context. Kinds in kind context. Don't mix and match !
22:19:10 <jle`> adas: something like Proxy is poly-kinded.  you can have Proxy Int, Proxy Bool, but you can also have Proxy Maybe, Proxy IO, Proxy Either...even Proxy Monad
22:19:18 <jle`> Proxy :: a -> *
22:19:23 <jle`> er, Proxy :: k -> *
22:19:27 <jle`> :k Proxy Bool
22:19:28 <lambdabot> *
22:19:31 <jle`> :k Proxy Either
22:19:32 <lambdabot> *
22:19:35 <jle`> :k Proxy Monad
22:19:36 <lambdabot> *
22:19:58 <cocreature> Const is another example that is polykinded (at least in ghc8)
22:19:59 <Rotaerk> :k Proxy Proxy
22:20:00 <lambdabot> *
22:20:13 <jle`> hehe
22:20:39 <jle`> Bool :: *, Either :: * -> *, Monad :: * -> Constraint, Proxy takes 'em all!
22:21:06 <jle`> i think in the old days, Proxy used to be Proxy :: * -> *, so it could only take Bool, Int, etc., but not IO, Maybe ...
22:21:19 <jle`> * Either :: * -> * -> *
22:21:59 <jle`> even without ConstraintKinds or DataKinds, there are still a lot of different kinds we work with in day to day Haskell
22:22:11 <jle`> other than just *
22:24:11 <Lokathor> Just '*'
