00:01:10 <akkartik> So xmonad's given me the incentive to bite the bullet and figure out this cabal thing..
00:07:09 <akkartik> I'm trying to build X11-1.2 from a user account
00:07:23 <akkartik> $ runghc Setup.hs configure --user --prefix=$HOME/xmonad
00:07:36 <akkartik> $ $ runghc Setup.hs build
00:07:37 <akkartik> Setup.hs: Warning: Unknown field 'lib-dirs'
00:07:37 <akkartik> Preprocessing library X11-1.2...
00:07:37 <akkartik> /lusr/gnu/bin/ld: cannot find -lX11
00:07:37 <akkartik> collect2: ld returned 1 exit status
00:07:39 <akkartik> linking Graphics/X11/Xlib/Event_hsc_make.o failed
00:07:41 <akkartik> command was: /lusr/opt/ghc-6.6/bin/ghc-6.6 -lX11 Graphics/X11/Xlib/Event_hsc_make.o -o Graphics/X11/Xlib/Event_hsc_make
00:07:44 <akkartik> Setup.hs: got error code while preprocessing: Graphics.X11.Xlib.Event
00:08:00 <akkartik> turning on -v5, it's this command:
00:08:13 <akkartik> /lusr/bin/hsc2hs -D__GLASGOW_HASKELL__=606 -Iinclude -I/lusr/X11R6/include --lflag=-lX11 -o Graphics/X11/Xlib/Event.hs Graphics/X11/Xlib/Event.hsc
00:08:32 <akkartik> Adding --lflag=-L/lusr/X11R6/lib gets the command to work
00:08:47 <akkartik> That dir is in X11.buildinfo
00:09:03 <akkartik> Anybody know why it isn't being used?
00:15:34 <twb> akkartik: do you have the (C language) xlib -dev or -devel package installed?
00:16:01 <akkartik> aha, this irc thing works! :)
00:16:14 <akkartik> do you mean at the linux-distro level or in haskell?
00:16:22 <twb> What distro are you using?
00:16:51 <akkartik> the university here uses ubuntu
00:16:57 <twb> OK, one moment.
00:17:17 <akkartik> like I said I think I have the libs because modifying the cmdline by hand works
00:17:35 <akkartik> so I don't think it's a sub-haskell problem
00:17:46 <twb> You probably need to do "sudo apt-get install libx11-dev libxt-dev"
00:18:07 <twb> Ah, OK
00:18:18 <akkartik> No root, sadly.. let me check if they're already installed.. ah, ok, rolling back
00:18:49 <twb> You must be using an old version of Ubuntu... Breezy or something?
00:20:20 <twb> akkartik: anyway, I don't think I know how to help.  Sorry.
00:20:36 <akkartik> thanks, man. hmm, how do I figure out if it's breezy?
00:21:43 <twb> Um, try looking at /etc/issue
00:21:49 <akkartik> ah
00:22:04 <akkartik> it's been a while since I maintained linux :) like slackware. thanks.
00:22:48 <twb> I actually have a package called "libghc6-x11-dev"
00:23:06 <twb> In apt, that is.
00:31:43 <akkartik> I have Ubuntu 6.06. Looks like that's Dapper Drake. Anyways.. Thanks for the help, I'll be around.
00:35:52 <kzm> akkartik, that's ghc 6.4.1, no?
00:36:24 <akkartik> We have 6.6 here.
00:37:07 <kzm> What does 'which ghc' give you?
00:37:31 <akkartik> /lusr/opt/ghc-6.6/bin/ghc-6.6 (after traversing some symlinks)
00:37:56 <Japsu> @hoogle matrix
00:37:57 <lambdabot> Text.Html.BlockTable.getMatrix :: BlockTable a -> [[(a, (Int, Int))]]
00:37:59 <kzm> (If you have it installed in /usr/local, e.g. from a binary snapshot, apt-get'ting libraries won't help you)
00:38:11 <Japsu> @hoogle matrices
00:38:12 <lambdabot> No matches found
00:44:31 <Cheery> I have a map of functions, like this:
00:44:51 <Cheery> [\x -> x, \x -> x+2] etc.
00:45:02 <Cheery> gah, list I mean.
00:45:19 <dons> ok
00:45:21 <Cheery> I'd like to apply them all to some value.
00:45:30 <Cheery> is there some readymade function for doing that?
00:45:36 <dons> > map ($2) [\x -> x, \x -> x+2]
00:45:37 <lambdabot>  [2,4]
00:45:49 <Japsu> omg
00:45:49 <Cheery> wtf
00:45:57 <Japsu> @type $
00:45:59 <lambdabot> parse error on input `$'
00:46:03 <dons> :t ($)
00:46:06 <lambdabot> forall a b. (a -> b) -> a -> b
00:46:12 <dons> ?src ($)
00:46:13 <lambdabot> f $ x = f x
00:46:14 <TSC> ($2) ==== (\f -> f 2)
00:46:23 <quicksilver> sections = win
00:46:36 <dons> the kids always love that trick :-)
00:46:49 <Cheery> you are so cool people that hell freezes.
00:46:50 <quicksilver> $ is just a synonym for function application with lower precedence, but the real win is in being able to section it :)
00:47:20 <Cheery> who was idiot enough to make $ function application? :) I think I like the person who proposed it.
00:47:25 <kzm> > (\y -> map (\f -> f y) [\x -> x, \x -> x+2]) [1,2,3,4]
00:47:26 <lambdabot>   add an instance declaration for (Num [t])
00:47:26 <lambdabot>     In the expression: x + 2
00:47:26 <lambdabot>     ...
00:47:34 <kzm> Oops.
00:47:53 <kzm> > (\y -> map (\f -> f y) [\x -> x, \x -> x+2]) 42
00:47:54 <lambdabot>  [42,44]
00:48:26 <TSC> > [f x | f <- [\x -> x, \x -> x+2], x <- [1..4]]
00:48:27 <lambdabot>  [1,2,3,4,3,4,5,6]
00:48:56 * kzm aims for the consolation price for gratuitous use of backslashes.
00:49:34 <dons> > let (\\) = 42 in (\y -> map (\(\\) -> (\\) y) [\(\\) -> (\\), \(\\) -> (\\)+2]) (\\)
00:49:35 <lambdabot>  [42,44]
00:49:49 <TSC> Gah, my eyes
00:49:58 <dons> > let (\\) = 42 in (\(\\\) -> map (\(\\)->(\\)(\\\))[\(\\)->(\\),\(\\)->(\\)+2])(\\)
00:50:00 <lambdabot>  [42,44]
00:50:37 <kzm> > let (\\\\) = map; (\\) = 42 in (\(\\\) -> (\\\\) (\(\\)->(\\)(\\\))[\(\\)->(\\),\(\\)->(\\)+2])(\\)
00:50:38 <lambdabot>  [42,44]
00:50:44 <dons> > let (+)=(\\\\\\);(\\\\\)=map;(\\)=42;(\\\\)=2 in (\(\\\)->(\\\\\)(\(\\)->(\\)(\\\))[\(\\)->(\\),\(\\)->(\\\\\\)(\\)(\\\\)])(\\)
00:50:45 <lambdabot>   Not in scope: `\\\\\\'
00:50:47 <dons> grr
00:50:55 <kzm> > let (\\\\\) = 2; (\\\\) = map; (\\) = 42 in (\(\\\) -> (\\\\) (\(\\)->(\\)(\\\))[\(\\)->(\\),\(\\)->(\\)+(\\\\\)])(\\)
00:50:56 <lambdabot>  [42,44]
00:51:07 <dons> haskell is so clean and concise.
00:51:14 <kzm> Oh, forgot the +.
00:51:36 <dons> ?wiki Obfuscation
00:51:36 <lambdabot> http://www.haskell.org/haskellwiki/Obfuscation
00:51:37 <kzm> Well, there's always whitespace (the language)?
00:51:40 <dons> for the origin of these tricks.
00:54:46 <desp> whew, finally sent my app.
00:55:14 <vincenz> dons: q regarding wiki, where does one put random code?
00:55:25 <vincenz> dons: like the 130 euler problems
00:55:35 <vincenz> they form nice haskell one-liners
00:57:20 <dons> make a new page, under Category:Code
01:00:30 <earthy> hm. seeing that obfuscation page almost makes me want to try my hand at a mandelbrot-shaped mandelbrot-generator
01:00:37 <earthy> and at a maze-shaped maze-generator
01:00:46 * earthy won't, though. ;)
01:01:03 <dons> like the rsa-shaped rsa generator?
01:01:34 <dons> http://www.cse.unsw.edu.au/~dons/tmp/jl_rsa.hs
01:03:46 <earthy> more like http://homepages.cwi.nl/~tromp/maze.html
01:03:48 <lambdabot> Title: On a Maze program
01:04:25 <earthy> or  http://www.xs4all.nl/~stijnw/ocmjg/index.html
01:04:27 <lambdabot> Title: Obfuscated C Mandelbrot- and Julia-set Generator - Home
01:06:28 <hpaste>  Cheery pasted "I wrote some HSV -stuff." at http://hpaste.org/1157
01:09:19 <Cheery> funny how everything turns small and tame when you kick it into combinators.
01:11:02 <Cheery> thought I'd have wanted to find something which is in better form from the beginning.
01:11:08 <Vq^> thats nice functions to have reachable
01:11:26 <Vq^> python actually have those in the standard lib
01:14:16 <Cheery> I also wrote hexcode to color -converter.
01:16:18 <Vq^> Cheery: you read the X Window System rgb.txt file?
01:16:25 <Cheery> nop
01:16:38 <vincenz> woo for the power of vim
01:16:38 <Vq^> that could be a nice feature :)
01:17:00 <Cheery> could you link me up?
01:17:00 <vincenz> http://www.haskell.org/haskellwiki/EulerProblems
01:17:01 <lambdabot> Title: EulerProblems - HaskellWiki
01:17:15 <vincenz> dons: there you go, it'll need some cleaning up, but that's the basis
01:17:56 <vincenz> dons: the links in the titles link directly to the details about the problems
01:19:41 <Vq^> Cheery: have you thought about using where instead of let/in?
01:20:27 <Cheery> it may actually go better there, not thought about it.
01:20:31 <akkartik> could someone on ubuntu 6.06/DapperDrake confirm the following works?
01:20:35 <akkartik> $ wget http://hackage.haskell.org/packages/archive/X11/X11-1.2.tar.gz
01:20:44 <akkartik> $ tar zxf X11-1.2.tar.gz
01:20:49 <akkartik> $ cd X11-1.2
01:21:14 <Cheery> Vq^: I'm just reading about HSV whether there's something the algorithm did not show me but I could use in haskell.
01:21:24 <akkartik> $ runghc Setup.hs configure --user
01:21:43 <akkartik> $ runghc Setup.hs build -v5 2>&1 |tee x
01:22:48 <quicksilver> vincenz: Haskell-hu?
01:23:51 <TSC> vincenz: Your solution to problem 1 is wrong ("and" /= "or")
01:24:09 <Vq^> Cheery: http://en.wikipedia.org/wiki/HSV_color_space#Transformation_between_HSV_and_RGB
01:24:11 <lambdabot> http://tinyurl.com/zhj74
01:24:33 <vincenz> fixing
01:24:33 <vincenz> fixing
01:24:35 <vincenz> wait up
01:26:36 <Vq^> @type map (map (():))
01:26:39 <lambdabot> [[[()]]] -> [[[()]]]
01:26:49 <vincenz> TSC: what?
01:27:17 <TSC> You are counting only multiples of 3 and 5 (multiples of 15); you want multiples of 3 or 5
01:27:31 <vincenz> oh right
01:27:38 <vincenz> yeah well I was doing this quickly
01:27:48 <vincenz> and then making those wikipages was a lot of work
01:27:50 <vincenz> ok it's done
01:27:57 <vincenz> http://www.haskell.org/haskellwiki/EulerProblems
01:27:59 <lambdabot> Title: EulerProblems - HaskellWiki
01:28:54 <akkartik> ah, I got it to work. Had to add this line to X11.cabal: 'extra-lib-dirs: /lusr/X11R6/lib
01:29:18 <akkartik> but it was already there in X11.buildinfo:
01:29:20 <akkartik> cc-options:  -I/lusr/X11R6/include
01:29:20 <akkartik> ld-options:  -L/lusr/X11R6/lib
01:29:28 <vincenz> dons: check it out?
01:29:48 <akkartik> so perhaps mine isn't the best solution?
01:30:37 <vincenz> quicksilver: btw, fixed that typo
01:30:40 <quicksilver> :)
01:30:41 <vincenz> thx'
01:30:47 <quicksilver> Data.Binary is such a fraud
01:31:00 <quicksilver> it's "unbounded" Integer is bounded above by 2^(2^32)
01:31:12 <vincenz> those bastards!
01:31:15 <vincenz> @arr
01:31:15 <lambdabot> Har de har har!
01:31:18 <quicksilver> what if I want to store a big number?!
01:31:37 <vincenz> honestly...
01:31:42 <vincenz> I doubt that will ever be possible
01:31:49 <vincenz> you'd need 2^32 bits
01:31:53 <quicksilver> :)
01:31:53 <vincenz> which si half of the atoms in the universe
01:31:59 <quicksilver> no it isn't
01:32:02 <quicksilver> it's only 4G...
01:32:12 <vincenz> hmm point taken
01:32:14 <quicksilver> I have a hard disk larger than 4G
01:32:19 <quicksilver> so I can store numbers bigger than that
01:32:24 <vincenz> half in the exponent != half the number
01:32:29 * vincenz kicks himself
01:32:39 <vincenz> #atoms = 10^52 or 10^80
01:32:39 <quicksilver> hmm I was wrong, though
01:32:43 <vincenz> can't remember
01:32:50 <quicksilver> it's 256^(2^32)
01:32:53 <quicksilver> still my 4G point was valid
01:33:03 <vincenz> B
01:33:18 <vincenz> that'll prolly expand on 64bit platfs?
01:37:57 <quicksilver> vincenz: sort of, it's based on 'Int'
01:38:12 <quicksilver> vincenz: but I think Int is in practice 32 bit even on 64 bit platforms
01:38:58 <quicksilver> vincenz: at least, it's 32 bit on this G4, which is at least a 'somewhat 64 bit' platform
01:39:59 <Syzygy-> Prelude> 2^63 :: Int
01:40:00 <Syzygy-> -9223372036854775808
01:40:00 <Syzygy-> Prelude> 2^31 :: Int
01:40:00 <Syzygy-> 2147483648
01:40:03 <Syzygy-> Prelude> 2^63 :: Int
01:40:03 <Syzygy-> -9223372036854775808
01:40:03 <Syzygy-> Prelude> 2^31 :: Int
01:40:04 <Syzygy-> 2147483648
01:40:07 <Syzygy-> bPrelude> 2^63 :: Int
01:40:08 <Syzygy-> -9223372036854775808
01:40:10 <Syzygy-> Prelude> 2^31 :: Int
01:40:12 <Syzygy-> 2147483648
01:40:14 <Syzygy-> Oooops
01:40:18 <Syzygy-> Sorry about the duplication
01:40:21 <Syzygy-> Anyway.
01:40:34 <Syzygy-> That's on a natively built ghc6.6 running om an amd64
01:40:47 <vincenz> Syzygy-: try 2^62
01:41:04 <Syzygy-> Prelude> 2^62 :: Int
01:41:04 <Syzygy-> 4611686018427387904
01:41:21 * quicksilver nods
01:41:30 <quicksilver> the real determiner is how long your arrays can be
01:41:38 <quicksilver> because it's storing the Integers as [Word8]
01:41:40 <quicksilver> :t length
01:41:42 <lambdabot> forall a. [a] -> Int
01:41:45 <quicksilver> s/arrays/lists
01:41:55 <quicksilver> but 'length' is only specced as returning 'Int'.
01:42:21 <quicksilver> there is genericLength, but (a) Data.Binary doesn't use it, and (b) I don't think it gives extra precision, just an overloaded interface
01:42:57 <vincenz> anyways, feel free to enjoy the euler page
01:42:58 <vincenz> cheers
01:43:01 <vincenz> `ap` work
01:43:03 <quicksilver> thanks :)
01:44:07 <quicksilver> hmm maybe genericLength does give higher precision. Interesting
01:44:17 <mux> what kind of datatype would you guys use to represent a square on a chess board?
01:44:22 <quicksilver> I don't really want to try to make a 4G+1 array on my machine to test it out, though :)
01:44:33 <mux> I have data Square = Square Int Int, but more type-checking would be great
01:44:49 <mux> would you recommend me to use Chuch Numerals to limit the Int's here to 8 each?
01:44:53 <vincenz> mux: I'd name it Cell first?
01:44:59 <mux> or better, to 1-8 and a-h
01:45:06 <mux> vincenz: well sure, I can do that :-)
01:45:11 <quicksilver> mux: I find that a bit heavyweight
01:45:18 <vincenz> data Cell = Cell Column Row
01:45:29 <quicksilver> mux: since you only have 8 options, I'd just make two ADTs deriving enum
01:45:32 <vincenz> data Column = A | B ... | H deriving (Ord,Eq,Enum)
01:45:37 <quicksilver> as vincenz says, yes
01:45:42 <mux> ah, I was pondering doing that
01:45:47 <vincenz> that way you can do
01:45:48 <vincenz> [A..H]
01:46:03 <mux> I was a bit worried that using just capital letters would be confusing
01:46:05 <vincenz> data Row = R1 | .. | R8 deriving (Ord, Eq, Enum)
01:46:12 <quicksilver> mux: if it's in a module, it's OK
01:46:14 <vincenz> possbly even custom-derive Num
01:46:15 <mux> or would clash with some namespace
01:46:27 <quicksilver> mux: it's up to you if you want to import the module as-is, or qualified
01:46:35 <mux> yeah sure
01:46:45 <quicksilver> import qualified ChessBoard as CB; --- now use CB.A, CB.B etc
01:46:47 <mux> to A to H and R1 to R8?
01:46:52 * quicksilver nods
01:46:53 <mux> s/to/so/
01:46:53 <quicksilver> I would
01:47:02 <mux> okay, thanks a bunch for the hints!
01:47:18 <quicksilver> if it was, say, a 64x64 board and an explicit ADT was annoying
01:47:27 * mux nods
01:47:37 <quicksilver> I'd define a custom Num instance which threw an error if you tried to force in a number too big
01:47:47 <quicksilver> data Row = Row Int
01:48:13 <quicksilver> instance Integral... where fromInteger x = if x < 0 || x > 63 then error "row out of range" else Row
01:48:40 <vincenz> eq
01:48:44 <vincenz> s/q/w
01:49:04 <quicksilver> vincenz: why's that nasty?
01:49:39 <mux> I wish it was possible to auto-derive Enum on ADTs consisting of only one data constructor and several nullary types
01:50:42 <quicksilver> mux: well you can't tell the type system you only plan to instantiate at those types
01:50:48 <quicksilver> mux: it's an open world...
01:51:40 <mux> I mean
01:51:41 <mux> http://mu.org/~mux/LambdaChess/Piece.hs
01:51:46 <mux> look at the instance Enum here
01:51:52 <mux> it could have been entirely auto-generated
01:52:11 <mux> Enum Piece
01:52:32 <quicksilver> mux: ah yes. agreed :)
01:52:39 <vincenz> mux: site blocked for nudity and games
01:52:40 <quicksilver> mux: probably DriFT can do that/
01:52:53 <mux> vincenz: hah, seriously?
01:52:58 <vincenz> ye
01:52:59 <quicksilver> vincenz: fair point, the chess pieces are indeed nude, and playing games
01:53:06 <mux> quicksilver: ah, I didn't check that indeed
01:53:19 <akkartik> I just tried out xmonad, and it seems to run but my single display gets nothing. X server doesn't quit, so xmonad is running, it's just not doing much.
01:53:21 <mux> vincenz: at least ~mux/ is work-safe :-)
01:53:25 <mux> I can't tell for the rest of the box
01:53:33 <vincenz> mux: it's probably site-based, not subdir base
01:53:34 <vincenz> +d
01:53:40 <akkartik> I'm running it under vnc though, so perhaps that's an issue. I'll try on the local display tomorrow
01:54:10 <akkartik> vnc.log has an error message about Xinerama, but I'm on a single monitor so that is prob not an issue.
01:54:29 <akkartik> just FYI, for all who helped. Thanks guys, I'll be around
02:01:47 <mux> well I'm going to ditch that instance Enum Piece anyways
02:02:10 <mux> the only use I have for it was to be able to write:
02:02:15 <mux> let allPieces = enumFrom (Piece White Pawn)
02:02:23 <mux> but I could get away more easily with:
02:02:28 <mux> let allPieces = [ Piece c t | c <- enumFrom White, t <- enumFrom Pawn ]
02:03:13 <quicksilver> right ;)
02:03:54 <vincenz> mux: erm
02:04:08 <vincenz> let allPieces = [Firstpiece..LastPiece]
02:04:37 <mux> I'd need the instance for this to be possible
02:04:42 <mux> this is the same as my enumFrom call
02:04:54 <vincenz> enum is deriveable
02:05:01 <mux> not for this type
02:05:16 <mux> that's the whole point that started this discussion
02:24:22 <mux> morning duncan :-)
02:24:41 <kolmodin> ?localtime dcoutts
02:24:42 <lambdabot> Local time for dcoutts is Tue Mar 27 19:22:50
02:24:47 <kolmodin> :)
02:25:05 <mux> oh well, evening duncan :-P
02:25:14 <mux> @localtime
02:25:18 <lambdabot> Local time for mux is Tue Mar 27 11:23:23 2007
02:25:41 <dcoutts> @arr
02:25:42 <lambdabot> Ahoy mateys
02:25:54 <vincenz> dcoutts: http://www.haskell.org/haskellwiki/EulerProblems
02:25:55 <lambdabot> Title: EulerProblems - HaskellWiki
02:29:36 <badfish> this is a really intersting free application.  http://www.challenge-tv.com/index.php?mode=demodetail&demo=28007&dl=3
02:29:41 <lambdabot> Title: Challenge-TV.com, http://tinyurl.com/2nsdao
02:32:50 <dcoutts> vincenz: why were you pointing me at that? any particular reason?
02:33:19 <vincenz> dcoutts: well when you have some free time and want to solve some puzzles :)
02:34:22 <dcoutts> hah hah hah, free time.
02:34:32 <vincenz> :D
02:34:49 <vincenz> good thing you keep your  humor
02:37:31 <earthy> ah, the mythical CFT, usually accompanied by the magical Round Tuits...
02:49:16 <hpaste>  lizhn pasted "Read several files and combine their text into one String" at http://hpaste.org/1158
02:53:08 <Botje> how do you import something on the ghc commandline?
02:53:27 <Botje> I have a nice oneliner but need to import Data.List
02:54:10 <Lemmih> Botje: Use qualified identifiers?
02:54:40 <Botje> hey, that works!
02:57:59 <LPhas> i'm reading the happs tutorial and there are some examples that does't work
02:59:09 <LPhas> 3.2 and 3.3 raise an excpetion when calling "main"
03:00:18 <LPhas> if used from ghci
03:03:01 <Cheery> toHSV 0.5 0.5 0.5 (\h s v -> (h,s,v))
03:03:13 <Cheery> (NaN,0.0,0.5)
03:03:26 <Cheery> in another configuration it gives me NaN
03:04:02 <Cheery> only if min == max there comes this special case.
03:04:53 <Cheery> > 0/0
03:04:55 <lambdabot>  NaN
03:04:59 <Cheery> > 1/0
03:05:01 <lambdabot>  Infinity
03:05:16 <LPhas> :t toHSV
03:05:19 <lambdabot> Not in scope: `toHSV'
03:05:22 <opqdonut> interesting
03:05:27 <opqdonut> that 1/0 thing
03:05:37 <opqdonut> > Infinity*0
03:05:38 <lambdabot>   Not in scope: data constructor `Infinity'
03:05:45 <Cheery> LPhas, I'll soon paste this thing again.
03:05:49 <opqdonut> > (1/0)*0
03:05:49 <Cheery> I modified the code a bit.
03:05:50 <lambdabot>  0.0
03:05:51 <LPhas> > 1/0 :: Int
03:05:52 <lambdabot>   add an instance declaration for (Fractional Int)
03:05:52 <lambdabot>     In the expression: 1 /...
03:05:53 <opqdonut> woot
03:06:01 <LPhas> :t (/)
03:06:04 <lambdabot> forall a. (Fractional a) => a -> a -> a
03:06:14 <LPhas> :i Infinity
03:06:14 <opqdonut> > (Infinity::Fractional)*0
03:06:15 <lambdabot>   Not in scope: data constructor `Infinity'
03:06:21 <opqdonut> hrmmh
03:06:22 <LPhas> woo
03:06:27 <opqdonut> those work very illogically
03:06:37 <opqdonut> both from a programming and a mathematical standpoint
03:06:45 <Cheery> but is it right that it gives me NaN if there is no hue?
03:06:46 * LPhas agrees
03:07:02 <quicksilver> > (1/0)*0
03:07:03 <lambdabot>  0.0
03:07:34 <LPhas> :t (2/3)
03:07:37 <lambdabot> forall t. (Fractional t) => t
03:07:44 <LPhas> :i Fractional
03:08:01 <Cheery> ok, time to do the counterpart for toHSV
03:08:09 <Cheery> or actually, rewrite.
03:08:15 <LPhas> (1/0) :: Float
03:08:19 <Cheery> http://hpaste.org/1157
03:08:35 <LPhas> > (1/0) :: Float
03:08:37 <lambdabot>  Infinity
03:08:40 <opqdonut> gah
03:09:06 <kuribas> If I do mapM (putStrLn . show) [1..20], will ghc be able to optimize away the list?
03:09:08 <LPhas> opqdonut: so Infinity is a Float O_o
03:09:34 <opqdonut> :t Infinity
03:09:37 <lambdabot> Not in scope: data constructor `Infinity'
03:09:38 <twb> LPhas: IEEE754 incudes at least one infinity value.
03:09:38 <opqdonut> there is no infinity
03:09:47 <opqdonut> yeah floating infinity exists
03:09:57 <opqdonut> but it shouldn't be 1.0/0 afaik
03:10:14 * LPhas agrees
03:10:24 <twb> In Haskell, division by zeri should be an error, IIRC
03:10:51 <LPhas> is the limit x->0 1/x = Infinity
03:10:56 <LPhas> but 1/0 is a nonsense
03:11:00 <opqdonut> yeah
03:11:13 <opqdonut> well not an error necessarily but atleast NaN or _|_
03:12:15 <quicksilver> I think there is some attempt to make Float and Double conform to IEE754
03:12:24 <quicksilver> so that compilers can choose to compile them to native FP opcodes
03:13:56 <LPhas> quicksilver: uhm, i think that IEE754 states that Float/Double shoulde have Infinity, not how and when to use them
03:14:51 <quicksilver> LPhas: it's possible I have the wrong standard number
03:15:12 <quicksilver> LPhas: tehre is a standard which gives precise semantics for floating point arithmetic, and this is implemented in hardware
03:16:08 <twb> Isn't NaN an infinity, in 754-terms?
03:16:11 <quicksilver> however imperfect this standard may be, if your language has data types which map to it then your compiler can compile to native FP opcodes
03:16:51 <twb> quicksilver: no one says the target system supports IEEE754
03:17:19 <mux> that's a pretty safe assumption
03:17:30 <twb> mux: except for embedded devices
03:17:45 <quicksilver> twb: yes, clearly, only if it does
03:17:46 <mux> most embedded devices use ARM or MIPS which have IEEE754
03:17:52 <mux> but anyways
03:17:57 <quicksilver> twb: it's stsill useful for have that feature in your language :)
03:18:01 <twb> I'll take your word for it.
03:18:05 <quicksilver> personally I never use floating point anyway
03:18:16 <mux> if you don't have IEEE754 you often have at least a subset of it on which you can base your IEEE754 code
03:18:17 <twb> I personally hate floating point.
03:18:59 <twb> IMO we should always use arbitrary-precision rationals, and only use fixnums/flonums where optimization forces us to.
03:19:14 <mux> we could have -fieee754
03:21:18 <tcr> twb: in haskell, fractional literals are interpreted as rationals, I think.
03:22:17 <Syzygy-> ?t (3/5)
03:22:17 <lambdabot> Maybe you meant: tell temp time tiny-url todo todo-add todo-delete topic-cons topic-init topic-null topic-snoc topic-tail topic-tell type . ft v
03:22:23 <Syzygy-> ?type (3/5)
03:22:25 <lambdabot> forall t. (Fractional t) => t
03:23:40 <tcr> ?type 0.5
03:23:42 <lambdabot> forall t. (Fractional t) => t
03:25:04 <hpaste>  Cheery annotated "I wrote some HSV -stuff." with "new code for HSV -stuff." at http://hpaste.org/1157#a1
03:28:58 <quicksilver> twb: it's a bizaree series of events which lead to hardware manufacturers building fast-floating-point ops into their chips and not fast-fixed-point
03:29:11 <quicksilver> twb: since fast-fixed-point is (a) faster and (b) nearly always what you actually want
03:31:28 <twb> I thought all the fast floating point stuff was in GPUs these days.  I confess I never followed matters closely.
03:32:14 <LPhas> quicksilver: FP op aren't meant for graphics?
03:33:35 <quicksilver> LPhas: most graphical systems actually only need fixed point to some sensible precision
03:33:49 <quicksilver> LPhas: and fixed point is much faster in principle
03:34:24 <quicksilver> LPhas: floating point is for the bizarre case that you need different precision at different magnitudes; not all that common
03:35:09 <quicksilver> at least, in my experience, but then it depends what kind of programs you tend to write
03:35:14 <mux> FP is often used in 3D/2D graphics code, and in code dealing with audio too
03:35:15 <quicksilver> I hardly use fractional numbers of any kind :P
03:35:23 <mux> that doesn't mean those things can't be done fixed-point
03:35:36 <mux> for instance, there's a fixed-point mp3 decoder (called mad)
03:35:39 <quicksilver> it's used because it's easy
03:35:48 <quicksilver> and it's what C compilers do
03:35:57 <quicksilver> and it's what processors do (given that processors have FPUs)
03:36:23 <quicksilver> it's not used because the 'floating' part has intrinsically useful advantages in the domain of application, most of the time
03:37:04 <quicksilver> and, of course, given that you have FPUs with custom wiring to do floating arithmetic in small numbers of cycles, fixed point actually isn't faster. It should be, but the custom harder exists to make the floating version fast.
03:37:15 <quicksilver> s/harder/hardware/
03:37:40 <hpaste>  MathematicalOrc pasted "The type system won't let me..." at http://hpaste.org/1159
03:37:58 <siti> yeah the only reason for fixed point is on hardware without FPUs... e.g. arm iirc
03:38:53 <quicksilver> mathematicalorc: no, I don't believe it can, that's why Data.Set isn't a Monad
03:38:55 <LPhas> quicksilver: but isn't a CPU a "custom hardware that makes fixed point op"?
03:39:35 <quicksilver> LPhas: I'm years out of date on CPUs but I'm not aware they have single-op fixed point instructions
03:39:43 <quicksilver> LPhas: you need 'multiply-and-rescale' as a primitive
03:39:57 <quicksilver> LPhas: otherwise its 3-4 ops, or something
03:41:06 <LPhas> quicksilver: i see
03:41:14 <LPhas> ( someone knows what
03:41:18 <LPhas> $(inferStartState ''MyState)
03:41:22 <LPhas> means? )
03:41:37 <dcoutts> it's Template Haskell
03:41:53 <dcoutts> inferStartState is a function that takes a type name an generates code
03:42:07 <dcoutts> and the $( .. ) splices that code back into the program
03:42:16 <LPhas> dcoutts: oh
03:42:22 <norpan> i wonder how often you actually would multiply to fixed-point numbers
03:42:28 <dcoutts> ''MyState is the name of the type MyState
03:42:35 <norpan> as opposed to multiplying by an integer
03:42:46 <LPhas> dcoutts: but "what" code it returns?
03:42:49 <norpan> s/to/two
03:43:04 <dcoutts> LPhas: a think if type QExp
03:43:24 <dcoutts> LPhas: what specicic code depends on what inferStartState does
03:44:10 <hpaste>  MathematicalOrc annotated "Read several files and combine their text into one String" with "Try this..." at http://hpaste.org/1158#a1
03:44:17 <LPhas> dcoutts: it's used in the HaPPS tutorial :/ i was getting mad trying to understand
03:45:37 <quicksilver> Char is supposed to be unicode. What encoding do hPutStr and friends use?
03:45:54 <dcoutts> quicksilver: ASCII
03:46:09 <quicksilver> dcoutts: and truncate to LSByte?
03:46:17 <dcoutts> or more specifically only the low 8 bits of each Char
03:46:29 <quicksilver> dcoutts: *nod*
03:47:57 <quicksilver> > (fromIntegral 257) :: Word8
03:47:59 <lambdabot>  1
03:48:07 <quicksilver> ^^ I find this behaviour rather surprisng
03:49:00 <quicksilver> struO111
03:49:17 <quicksilver> strkes me that you could get strange errors that way
03:49:54 <dcoutts> quicksilver: it's an issue to bear in mind for any fixed width type
03:50:04 <dcoutts> overflows are silent, it just wraps
03:50:13 <dcoutts> if you need no overflow use Integer
03:50:35 <dcoutts> or use a newtype that checks for overflow (which will be really slow)
03:59:57 <kzm> There should be a way to turn on exceptions on overflow.  THere's a gcc flag to do it, but I couldn't get it to work with ghc and -optc/-fvia-c
04:00:26 <dons> dcoutts: hvae you had a look at append?
04:00:38 <dcoutts> dons: not yet much
04:00:46 <kzm> Apparently there's a performance penalty to using it (the gcc flag), but in many cases it'd be worth it, I think.
04:11:07 <araujo> morning!
04:11:15 <Botje> hello!
04:12:00 <araujo> dons, Sent.
04:14:02 <dcoutts> dons: ok finished with cabal patches, now ++
04:15:08 * QtPlatypus wonders why the haskell people use ++, isn't that rather state oreneted.
04:15:24 <QtPlatypus> > succ 1
04:15:26 <lambdabot>  2
04:15:49 <dcoutts> QtPlatypus: I mean the append operator ++
04:15:54 <dcoutts> ?type ++
04:15:56 <lambdabot> parse error on input `++'
04:16:00 <dcoutts> ?type (++)
04:16:02 <lambdabot> forall a. [a] -> [a] -> [a]
04:18:34 <dons> QtPlatypus: you're crazy man. append! append!
04:19:03 <dons> anyway, ++ to increment a state value is just (++) = modify (+1)
04:19:11 <dons> and purely functional :-)
04:19:43 <dons> > let inc = modify (+1) in runState (do inc ; inc ; inc  ; return "done") 1
04:19:45 <lambdabot>  ("done",4)
04:19:46 <int-e> and a good opportunity to have stack overflows come and haunt you later
04:20:08 <dons> that's true.
04:21:03 <int-e> @type get >>= (put $!)
04:21:06 <lambdabot> forall a (m :: * -> *). (MonadState a m) => m ()
04:32:18 <kzm> about that, I almost always get stack overflows when I do frequency counts using Data.Map.
04:32:40 <kzm> Then I do the proper `seq` invocations, sacrifice a chicken at a crossroads, and it works.
04:32:54 <kzm> But perhaps, just perhaps, Data.Map should be stricter?
04:33:16 <kzm> Or: are there good uses for Data.Map (and Set) that rely on them being lazy?
04:34:11 <kzm> And: enough of them that using e.g. wrapping things in 'data Lazy a = Lazy a' is more cumbersome than said invocations?
04:34:17 * kzm wonders.
04:36:26 <JaffaCake> dcoutts: we didn't decide what to do about the Cabal branches, http://www.haskell.org/pipermail/cabal-devel/2007-March/000449.html
04:36:29 <lambdabot> Title: branches and merging, http://tinyurl.com/29fe8k
04:40:19 <dcoutts> dons: seems to work, I'll commit it
04:40:36 <dcoutts> dons: you'll notice the rules firing
04:46:11 <dcoutts> dons: pushed
04:50:48 <Dazhbog> Hello all, anyone here use shim?
04:50:53 <dons> dcoutts: ok. i'll try it out.
04:51:23 <dcoutts> dons: see the ++ rules in particular, it's a two-stage rewrite back to ordinary ++
04:51:40 <dons> any idea how that interacts with concatmap ?
04:51:46 <dcoutts> no idea :-)
04:52:03 <dons> who uses concatMap anyway ;-)
04:52:10 <dcoutts> heh
04:52:47 <dcoutts> I'd guess that concatMap f = foldr (\x y -> f x ++ y) [] would be ok
04:52:53 <dons> ah, so you try to fuse both. then try to turn back one then the other.
04:52:57 <dcoutts> since we assume that y will be a list
04:53:19 <dons> so we turn back one, then hope that will fuse?
04:53:21 <dcoutts> so we should end up using the append' if f x is fusible
04:53:26 <dons> right.
04:53:34 <dons> yes, i see.
04:53:59 <dons> ok. pushed into base. i'll rebuild ghc.
04:54:11 <dcoutts> dons: right, if it's fused on the first arg but not the result or second then we use append'
04:54:32 <dons> "we build or day, for not much pay, with a hey-dilly-ho-dilly G. H. C.!"
04:54:33 <kombinator> dons: hello, I would like to ask you again a couple of questions about Yi
04:54:38 <dons> s/all/
04:54:54 <dons> shoot.
04:55:21 <kombinator> dons: specifically, what data structure do you use for the buffer?
04:55:33 <dons> Ptr CChar
04:55:43 <dcoutts> so lots of copying on inserts ?
04:55:44 <dons> check the FastBuffer.hs module.
04:55:50 <dons> dcoutts: right.
04:55:52 <kombinator> so it's a monolithic array of chars?
04:55:55 * dcoutts would use a rope of ByteStrings
04:55:56 <dons> but works well up to 100MB ;-)
04:56:03 <dons> yes, this was all pre-bytestring days
04:56:12 <dons> kombinator: right
04:56:19 <kombinator> with O(n) insertion?
04:56:26 <dons> yep.
04:56:42 <dons> show me a real source file that this is noticeable on :-)
04:57:06 <kombinator> dons: I don't know, but vim sometimes chokes on some files for me
04:57:08 <dons> oh, though we over allocate, so the whole buffer is usually not copied
04:57:25 <dons> since you can append in O(1) most of the time.
04:57:42 <dons> and insert will only memmove the tail of the buffer
04:57:59 <dons> its of theoretical concern mostly
04:58:07 <kombinator> dons: I was thinking that fingertrees would be a good datastructure for a buffer and was wondering if you used it
04:58:08 <Dazhbog> I'm trying to compile shim, but I get a compilation error "Not in scope: data constructor `HsRecordBinds'"..
04:58:13 <dcoutts> dons: what was the other thing I was going to look at this evening... I've forgotten :-)
04:58:21 <dons> kombinator: yeah, that'd be a good structure
04:58:23 <dons> a finger tree of lines.
04:58:39 <dons> dcoutts: hmm. foldr/concatMap?
04:58:40 <kombinator> dons: or of characters
04:58:56 <dons> i'd keep lines as a strict bytestring
04:58:58 <dcoutts> kombinator: you want a combination of tree and chunkyness for space efficiency
04:59:06 <dons> so you can display a line with zero copying
04:59:10 <dcoutts> though beware of long lines
04:59:17 <kombinator> dons: and you keep highlightning information as a separate list?
04:59:18 <dons> mostly you want fast indexing of lines
04:59:21 <dons> yeah.
05:00:07 <kombinator> dcoutts: I understand, but I thought that I would need a lot of space for syntax highlighting/incremental prasing anyway
05:00:23 <dons> not really, no.
05:00:23 <dcoutts> kombinator: I think you only need 1 Int per line or so
05:00:27 <dons> right.
05:00:37 <dcoutts> kombinator: since the lexer state is a single Int
05:00:38 <dons> just the transition state for each line
05:00:52 <dons> so you know where to reenter the lexer to colour a line
05:01:11 <dcoutts> and when you can stop re-lexing
05:01:33 <dcoutts> eg if you get to the beginning of the next line in the same state then no need to carry on lexing
05:01:38 <dons> yep
05:04:44 <Saizan> i get a SIGKILL on ar when building lbHSbase.a, memory issue?
05:05:23 <mauke> are you out of memory?
05:05:53 <dons> ulimit, memory yeah.
05:06:04 <dons> what ar try to chew up all your ram
05:06:08 <dons> watch.
05:06:14 * dons gets some sleep. night. happy lambdas.
05:07:04 <Saizan> i had 40mb left when my machine started freezing and i couldn't check again till ar suicided..
05:07:19 <Dazhbog> what do you guys use for developing in haskell?
05:07:47 <Spark> cocaine
05:07:49 <dcoutts> Saizan: yep, known issue. Turn off split-objs in your build if you're low on ram
05:08:22 <dcoutts> Saizan: or if it's an option, use binutils 2.17.x which has a patch I sent it to make ar use less memory
05:09:05 <dcoutts> Dazhbog: tea, linux, nedit, ghc/ghci, cabal
05:09:16 <LPhas> thc
05:09:29 <LPhas> Dazhbog: emacs
05:09:32 <dcoutts> nedit and vim actually
05:10:33 <Dazhbog> Have you got ghci nicely integrated in your editor?
05:10:59 <LPhas> Dazhbog: in emacs haskell-mode rocks
05:11:07 <Saizan> dcoutts: ehm, how do i turn off split-objs? a flag to gcc?
05:11:33 <Dazhbog> LPhas: okay I'll check it out
05:11:42 <xerox> LPhas, ping
05:11:49 <LPhas> xerox: pong
05:12:23 <dcoutts> Saizan: SplitObjs=No in mk/build.mk
05:12:26 <Dazhbog> LPhas: so it more than syntax highlighting? =)
05:12:31 <Dazhbog> it does even
05:12:37 <LPhas> Dazhbog: try it
05:12:39 <dcoutts> Saizan: echo "SplitObjs=NO" >> mk/build.mk
05:12:46 <LPhas> Dazhbog: is the best :D
05:12:51 <Dazhbog> LPhas: I will, thanks :P
05:12:55 <dcoutts> Saizan: but you'd have to make clean and rebuild
05:13:19 <LPhas> Dazhbog: auto-indentation is your best friend
05:16:32 <xerox> dcoutts, who wrote carsim? It's very cute :)
05:16:52 <dcoutts> xerox: it is isn't it :-) name's in the source, or the license file
05:17:09 <xerox> yeah I wonder the nickname ^_^
05:17:47 <dcoutts> dons: do you want me to commit this version of concatMap ?
05:23:39 <Saizan> dcoutts: 2.13-3 is enough to have that patch in?
05:24:09 <Saizan> ehm 2.17-3
05:24:33 <dcoutts> Saizan: maybe. I think it got in in 2.17.0
05:25:06 <dcoutts> it should take ar about 150mb to build libHSbase.a where as it used to be more like 550mb
05:26:17 <Saizan> ugh, quite a lot anyway
05:26:27 <dcoutts> yep, it's building the index that does it
05:26:40 <dcoutts> making a .a file is trivial if you don't do the index
05:26:59 <dcoutts> I've got a 50line haskell prog that does the former in seconds and ~0 memory
05:48:44 <gour> @seen jyp
05:48:44 <lambdabot> I saw jyp leaving #oasis and #haskell 1d 18h 52m 58s ago, and .
06:04:07 <quicksilver> dcoutts: I'm not sure, I think you might be able to add range checking to certain things without too much pain
06:04:26 <quicksilver> dcoutts: in particular, fromInteger seems like the most serious offender, since it can be added silently
06:05:04 <quicksilver> I don't mind 128+128 having overflow behaviour, within the type
06:38:36 <chessguy> @type lift
06:38:39 <lambdabot> forall (m :: * -> *) a (t :: (* -> *) -> * -> *). (MonadTrans t, Monad m) => m a -> t m a
06:38:52 <chessguy> @hoogle liftIO
06:38:53 <lambdabot> Control.Monad.Trans.liftIO :: MonadIO m => IO a -> m a
06:39:12 <vincenz> @tell bringert *grin* 9 Compos instances
06:39:13 <lambdabot> Consider it noted.
06:58:13 <kuribas> > True || undefined
06:58:15 <lambdabot>  True
06:58:25 <kuribas> > undefined || True
06:58:26 <lambdabot>  Undefined
06:58:41 <mauke> @src (||)
06:58:41 <lambdabot> True  || _ =  True
06:58:41 <lambdabot> False || x =  x
06:59:29 <kuribas> I see...
07:00:17 <kuribas> > elem 0 [undefined, 0]
07:00:18 <lambdabot>  Undefined
07:00:26 <kuribas> @src elem
07:00:27 <lambdabot> elem x    =  any (== x)
07:00:36 <kuribas> @src any
07:00:37 <lambdabot> any p =  or . map p
07:00:49 <Adolfo> hi
07:01:06 <Adolfo> somebody can help me?
07:01:39 <Adolfo> I have problems
07:01:48 <Saizan> yeah, just ask :)
07:01:52 <Adolfo> I need do something and I can't
07:02:13 <Saizan> like?
07:02:15 <Adolfo> i need define  a mathematics  matrix
07:02:28 <Adolfo> a type matrix,,,
07:02:52 <Adolfo> a can do operations like multiplication and sum up
07:03:03 <Saizan> what do you mean by "i can't"?
07:03:25 <Adolfo> I don't know how do these
07:03:58 <Adolfo> Im triying but I don't have a lot of ideas..
07:04:40 <Saizan> you don't know how to define the operators or how to be able to use (+) and (*) for your matrices?
07:04:49 <Adolfo> Exactly
07:05:13 <Saizan> which one of the two?
07:05:57 <Adolfo> *
07:06:09 <Adolfo> I need do the two operations
07:06:40 <Adolfo> Other problem is I don;t know how define the tipe matrix..
07:06:51 <Saizan> ok
07:06:56 <Adolfo> I mean,, only know on vector
07:07:04 <xerox> Adolfo, http://darcs.haskell.org/gtk2hs/cairo/Graphics/Rendering/Cairo/Matrix.chs
07:07:07 <lambdabot> http://tinyurl.com/yxbpjc
07:07:09 <sjanssen> Adolfo: are you trying to make the code fast, or do you want to finish quickly?
07:07:10 <xerox> maybe this can be helpful
07:07:56 <dirkjanh> type Matrix = [[Float]] ?
07:07:57 <Adolfo> I want to finish quickly
07:08:14 <Adolfo> the problem is I don't have a lot of time
07:08:16 <sjanssen> then type Matrix a = [[a]] -- is the simplest matrix
07:08:38 <sjanssen> a Matrix is a list of row vectors (lists)
07:08:39 <xerox> actually importing my module would make it even faster :)
07:09:24 <Adolfo> How I can impot the module?
07:09:36 <Adolfo> import
07:09:55 <xerox> Hmmm. actually it's too much cairo bound to be able to use it as it is
07:11:28 <Adolfo> I define know de type matriz
07:11:35 <uccus> anyone here knows anything interersting about the Subtext programming language?
07:12:16 <Adolfo> I can write something like that   matrix [[2] [3] [3]]
07:12:24 <Adolfo> With various elements?
07:12:24 <sjanssen> commas
07:12:30 <Adolfo> ok
07:12:31 <sjanssen> > [[1], [2], [3]]
07:12:33 <lambdabot>  [[1],[2],[3]]
07:12:41 <earthy> > [[1,1],[2,2,2],[3,3,3,3]]
07:12:42 <lambdabot>  [[1,1],[2,2,2],[3,3,3,3]]
07:12:49 <Adolfo> ohh
07:12:52 <Adolfo> I see
07:13:23 <sjanssen> but be careful, you can accidentally make matrices with mismatched dimensions
07:13:59 <earthy> as I just did. :)
07:14:08 <Adolfo> ok
07:14:11 <Adolfo> 3 and3
07:14:19 <Adolfo> 4 and 4
07:14:53 <Adolfo> Know i have defined th type matrix
07:14:56 <Adolfo> then what?
07:15:05 <uccus> you multiply them
07:15:12 <matthew-_> but there are a whole number of interesting ways of trying to fix that... from dependent types to template haskell...
07:15:12 <Adolfo> How can I do the operation
07:15:15 <sjanssen> Adolfo: #haskell is not going to do your homework -- just so you know
07:15:37 * matthew-_ waits for half of #haskell to leave ;-)
07:15:41 <Adolfo> I only want a little of help
07:15:46 <Adolfo> I have define this
07:15:58 <uccus> hmm.. write a function multiply :: Matrix -> Matrix -> Matrix
07:16:12 <uccus> the thing you have to figure out is how to do that :)
07:16:13 <Adolfo> multMat:: Matrix -> Matrix > Matrix
07:16:25 <Saizan> Adolfo, do you know the linear algebra definition of matrix product?
07:17:10 <Adolfo> more or less
07:17:46 <matthew-_> or just use ffi and call the blast C++ library. I suspect it might go faster than a native haskell implementation... ;-)
07:19:35 <Adolfo> maybe with the scale  product?
07:19:45 <uccus> Adolfo: why do you need to use Haskell?
07:20:00 <sioraiocht> @src concat
07:20:00 <lambdabot> concat = foldr (++) []
07:21:20 <Adolfo> Is a homework for get a ponit of a midterm
07:21:43 <Adolfo> I know how do that in java, but I am not expert in haskell
07:21:55 <uccus> how do you do it in Java?
07:23:20 <Adolfo> give one second I have this in my documents
07:23:25 <matthew-_> well you'd have at least one object for each cell, each row and each column, then, when the mallocs have finished...
07:23:33 <Adolfo>    public static void main (String [] args) {
07:23:34 <Adolfo>       int [][] a =       int [][] b =
07:23:34 <Adolfo>       dump (a);
07:23:34 <Adolfo>       System.out.println ();
07:23:34 <Adolfo>       dump (b);
07:23:34 <Adolfo>       System.out.println ();
07:23:36 <Adolfo>       int [][] c = multiply (a, b);
07:23:39 <Adolfo>       dump (c);
07:23:40 <Adolfo>    }
07:23:47 <Adolfo> static void dump (int [][] x) {
07:23:49 <Adolfo>       if (x == null) {
07:23:51 <Adolfo>           System.err.println ("array is null");
07:23:53 <Adolfo>           return;
07:23:55 <Adolfo>       }
07:23:57 <Adolfo>       // Dump the matrix's element values to the standard output device
07:23:59 <Adolfo>       // in a tabular order
07:24:00 <Thunder> Adolfo: Please use hpase!
07:24:01 <Adolfo>       for (int i = 0; i < x.length; i++) {
07:24:01 <vincenz> Adolfo: please use @paste
07:24:02 <sjanssen> Adolfo: do not paste so much code
07:24:03 <Adolfo>            for (int j = 0; j < x [0].length; j++)
07:24:04 --- mode: ChanServ set +o vincenz
07:24:05 <Adolfo>                 System.out.print(x [i][j] + " ");
07:24:06 --- kick: Adolfo was kicked by vincenz (vincenz)
07:24:09 --- mode: vincenz set -o vincenz
07:24:23 <vincenz> gotta hate slow buffers on irc clients
07:25:07 <uccus> Adolfo: go to http://hpaste.org/
07:25:22 <vincenz> wb
07:25:24 <vincenz> sorry about that
07:25:30 <Adolfo> I'm sorry
07:25:31 <uccus> paste it there... besides, I only wanted to see your multiply routine
07:25:33 <Adolfo> but the code
07:25:37 <vincenz> was to stop your client from continuing to past :)
07:25:38 <vincenz> @paste
07:25:39 <lambdabot> Haskell pastebin: http://hpaste.org/new
07:25:51 <Adolfo> ok
07:25:56 <Adolfo> I'm sorry too
07:26:12 <uccus> tick the 'anounce' box [it's alright, just please do not do it again]
07:26:30 <uccus> *announce
07:27:15 <Adolfo> Ok
07:27:17 <Adolfo> so
07:27:19 <LPhas> @seen bringert
07:27:20 <lambdabot> I saw bringert leaving #haskell-soc and #haskell 3h 5m 42s ago, and .
07:27:24 <Adolfo> Talkin about my problems
07:28:57 <Adolfo> I don't undertsand so good haskell.. i want to learn but with I said before I don't have a lot of time for learn very well
07:29:19 <Adolfo> And these is complicated for me
07:29:24 <nominolo> has anyone written a simple line-counting program for haskell and would care to paste it?
07:29:59 <heatsink> main = liftM (length . lines) getContents
07:30:06 <nominolo> (i know that those metrics are inaccurate, but I'd like to have some idea, at least)
07:30:13 <nominolo> i mean filtering out comments
07:30:17 <heatsink> oh
07:30:36 <nominolo> otherwise i'd just use $ wc -l *.hs
07:30:41 <uccus> Adolfo... have you pasted your multiply routine yet?
07:31:06 <Adolfo> no
07:31:43 <vincenz> @paste
07:31:44 <lambdabot> Haskell pastebin: http://hpaste.org/new
07:32:05 <Adolfo> uccus can you help me, please?
07:32:08 <vincenz> Adolfo         ^^^^^^^^^^^^^^^^
07:32:17 <Adolfo> OK
07:33:23 <Adolfo> ok
07:33:32 <Adolfo> I talk later I have to go
07:33:34 <Adolfo> Bye
07:33:35 <Adolfo> thanks
07:35:25 <Adolfo> what mean these error
07:35:49 <Adolfo> parse error on input '( '
07:36:12 <uccus> means Haskell was not expecting a '(' there...
07:36:29 <Adolfo> and
07:36:34 <Adolfo> Not in scope
07:36:42 <Adolfo> what mean?
07:36:48 <uccus> means whatever it was, it's not defined
07:37:20 <matthew-_> Adolfo, you could start reading "a gentle introduction to Haskell"
07:37:26 <uccus> means Haskell doesn't know (yet) what the identifier (the name) stands for
07:37:36 <Adolfo> ok
07:39:38 <Adolfo> uccus are you seeying te other msn?
07:39:45 <Adolfo> mesagges
07:40:04 <uccus> what do you mean?
07:40:32 <Adolfo> I have these
07:40:39 <Adolfo> type Matriz a = [[a]]
07:40:42 <sjanssen> is it okay to make a blocking call inside a finalizer?
07:40:58 <Adolfo> multMat:: Matriz -> Matriz -> Matriz
07:41:45 <uccus> and then?
07:42:03 <Adolfo> multMat [[]] [[]]= [[]]
07:42:10 <Adolfo> the empty matrix
07:42:29 <uccus> well, you are not trying to multiply empty matrices, are you?
07:42:41 <Adolfo> no
07:42:47 <Adolfo> Hey uccus I have to go
07:42:53 <uccus> Adolfo, please pay attention for a moment, ...
07:42:58 <matthew-_> sjanssen: a java finalizer?
07:42:58 <uccus> oh my my
07:42:58 <Adolfo> ok
07:43:06 <Adolfo> say me
07:43:12 <sjanssen> matthew-_: a Haskell finalizer
07:43:42 <matthew-_> sjanssen: ahh! I'm not sure I know about those...
07:43:47 <Adolfo> uccus what happened?
07:43:57 <uccus> Haskell has some very nice functions to tackle with lists,... lists are very nice things but if you want to do everything by recursion it gets complicated
07:44:29 <uccus> now, if you think I am going to provide you with the answer, then be disappointed, I won't
07:44:33 <Adolfo> what is the Functions name?
07:45:22 <uccus> but, I'm going to give you a list of functions... sum, zipWith, !!, ...
07:45:55 <uccus> read up on what these three functions do... and think of a way to combine them, that should do it... alright?
07:45:58 <Adolfo> uccus i have to go..really
07:46:04 <uccus> ok then... take care
07:46:06 <Adolfo> Im late for classes
07:46:24 <Adolfo> but can talk with msn?
07:46:26 <Adolfo> later
07:46:28 <uccus> nope
07:46:32 <Adolfo> ok
07:46:34 <uccus> sorry
07:46:34 <Adolfo> ok
07:46:40 <Adolfo> So
07:46:56 <Adolfo> I try to gome back more late
07:46:58 <Adolfo> thanks
07:48:45 <uccus> any lawyers around? can we sue the internet messaging services for diluting our thinking?
07:50:58 <sjanssen> heh, msn
07:51:01 <uccus> and can I sue Haskell for making ASP.NET state management too hard for me? ;)
07:51:35 <Saizan>  http://www.haskell.org/haskellwiki/Prelude_extensions#Matrix <-- if he ever figure (*) out, we can show him this :)
07:51:36 <lambdabot> Title: Prelude extensions - HaskellWiki
07:54:57 <uccus> you have to admit it's hard for a newbie, though
07:55:41 <uccus> @src transpose
07:55:41 <lambdabot> transpose []             = []
07:55:42 <lambdabot> transpose ([]   : xss)   = transpose xss
07:55:42 <lambdabot> transpose ((x:xs) : xss) = (x : [h | (h:t) <- xss]) : transpose (xs : [ t | (h:t) <- xss])
07:55:46 <Saizan> well the second one it's quite straightforward from the definition
07:56:04 <uccus> but he has to implement transpose himself
07:56:52 <LPhas> sjanssen: hi, dons told me that you use xmonad on macosx
07:57:50 <earthy> hm. the xmonad page lacks screenshots
07:58:18 <dmwit> earthy: Let me take one for you, just a sec.
07:58:27 <earthy> I guess that's the point, really, but still. :)
08:00:56 <LPhas> if someone can post some screenshot of xmonad it'll be cool
08:01:14 <dmwit> http://www.stanford.edu/~wagnerd/xmonad.png
08:01:26 <dmwit> (Under Xinerama -- two screens! =)
08:01:33 * LPhas bows to dmwit 
08:02:35 <earthy> nice.
08:03:24 <earthy> I like some more visual indication of my focus point though
08:04:06 <earthy> but then again, I grew up on the olden days of fvwm1
08:04:17 <dmwit> earthy: It's on the way.
08:04:20 <earthy> which was a huge improvement over twm and tvtwm. ;)
08:04:24 <dmwit> (I also wish for a visual indication of that.)
08:04:47 <dmwit> Have you seen dwm?
08:05:12 <dmwit> It has a small one- or two-pixel border around each window, and the active window is outlined in red.
08:05:28 <dmwit> dwm is, incidentally, what they're trying to clone, so... ;-)
08:05:46 <earthy> dwm seems nice
08:08:38 <sjanssen> dmwit: nice
08:08:45 <sjanssen> LPhas: nah, I run Linux lately
08:08:51 <sjanssen> LPhas: you're having trouble?
08:09:17 <LPhas> sjanssen: yes, a lot :P
08:09:45 <sjanssen> what's the problem?
08:09:57 <LPhas> sjanssen: well, mainly ghc can't find x11 lib
08:11:27 <ndm> @seen sorear
08:11:28 <lambdabot> I saw sorear leaving #darcs, #haskell-overflow, #ghc and #haskell 12h 25m 58s ago, and .
08:12:06 <dmwit> LPhas: Is it definitely installed?
08:12:15 <sjanssen> the Haskell X11 package?
08:12:20 <dmwit> (The dev-version and all?)
08:12:24 <LPhas> dmwit: the haskell x11 package is installed
08:12:24 <sjanssen> or Xlib.dylib, or whatever it's called
08:12:33 <LPhas> dmwit: the x11 lib.. i suppose not
08:12:43 <LPhas> dmwit: but i don't know where to get it
08:12:57 <dmwit> Mmmm, me neither. =(
08:13:14 <dmwit> But you can probably tell whether its installed by doing something like:
08:13:18 <dmwit> ls /usr/lib/X11
08:13:24 <sjanssen> LPhas: have you installed X11.app, and all of the X11 developer tools?
08:13:41 <LPhas> sjanssen: i installed X11.app
08:13:54 <LPhas> sjanssen: and xcode with developer tools in it
08:13:58 <sjanssen> okay
08:14:01 <LPhas> sjanssen: but maybe i missed something
08:14:03 <sjanssen> so you'll also need this:
08:14:05 <sjanssen> @where X11
08:14:05 <lambdabot> I know nothing about x11.
08:14:10 <sjanssen> @hackage X11
08:14:10 <lambdabot> http://hackage.haskell.org/cgi-bin/hackage-scripts/package/X11
08:14:17 <LPhas> sjanssen: i installed this
08:14:18 <sjanssen> that one ^^^
08:14:19 <earthy> /usr/X11R6/lib/
08:14:29 <sjanssen> LPhas: and it installed successfully?
08:14:44 <sjanssen> @where X11-extras -- did you get this one too?
08:14:44 <lambdabot> darcs get http://darcs.haskell.org/~sjanssen/X11-extras
08:14:49 <earthy> which has libX11.dylib
08:14:52 <LPhas> sjanssen: oh, sorry, no, it didn't installed
08:15:04 <LPhas> sjanssen: it says me that cannot find x11 lib
08:15:08 <LPhas> sjanssen: wait a second
08:15:10 <sjanssen> which one didn't install X11 or X11-extras
08:15:28 <LPhas> extras
08:16:20 <sjanssen> are you 100% sure that X11 (we're talking about a Haskell package, not an OS X package) is installed?
08:16:44 <earthy> heck with ghc-pkg describe X11
08:16:48 <earthy> *check
08:17:07 <LPhas> sjanssen: i tryied some days ago
08:17:30 <LPhas> sjanssen: let me re-try now so i can figure out exactly what doesn't work
08:18:18 <HairyDude> test.hs begins with a #! line that is runghc 6.7. so why do I get this?:
08:18:19 <HairyDude> [pwb@silver hsblog]$ PATH=/usr/local/bin:/usr/bin:/usr/X11R6/bin
08:18:19 <HairyDude> [pwb@silver hsblog]$ ./test.hs
08:18:19 <HairyDude> Glasgow Haskell Compiler, Version 6.4.2, for Haskell 98, compiled by GHC version 6.4.2
08:18:52 <LPhas> sjanssen: /usr/bin/ld: can't locate file for: -lX11
08:18:57 <LPhas> compiling X11
08:19:01 <dmwit> HairyDude: Because you have GHC 6.4 installed?
08:19:31 <sjanssen> LPhas: ah yes, I recall having this problem
08:19:51 <vincenz> @pl \x -> x >>= \(l, (c,m)) -> return (l, m)
08:19:52 <lambdabot> (uncurry ((`ap` snd) . (. fst) . const . (return .) . (,)) =<<)
08:19:57 <vincenz> ew
08:19:59 <LPhas> sjanssen: you can't remind what didi you do?
08:20:07 <sjanssen> I can't remember :(
08:20:07 <HairyDude> dmwit: it *should* be using the 6.7 version installed in my homedir, because that's the version I tell it to use. but it's using the installed 6.4 version
08:20:40 <dmwit> HairyDude: Add your homedir to the PATH.
08:20:55 <LPhas> sjanssen: oh, well, if i find a way i'll tell
08:20:55 <xerox> do (l,(c,m)) <- x; return (l,m)
08:21:04 <HairyDude> does runghc just run ghc then?
08:21:27 <sjanssen> hmm, is there a way to give cabal/ghc the exact location of libs to link in?
08:22:19 <dmwit> HairyDude: It probably just runs ghci.
08:23:45 <revence> Okay, not a lambda question, but I need BitchX help (quick), if dons doesn't mind.
08:24:01 <dmwit> sjanssen: -Ldir
08:24:14 <revence> How can I scroll? The talks just keep a-goin' 'til they vanish. Can't get them, after.
08:24:45 <HairyDude> so I have a custom installation of runghc, which I would naturally expect to run the custom installation of ghc. but instead it just lets exec find it, which fails miserably if PATH isn't right, which it isn't if you're running it through suexec
08:24:49 <vincenz> bringert: hey, 10 Compos classes, and I actually use em :)
08:24:56 <vincenz> bringert: it really cleaned up parts of my code :)
08:24:57 <uccus> I didn't know I can infixr/infixl on named functions! is this right? infixl 4 `plus`?
08:25:08 <bos> sjanssen: do you mean -i?
08:25:09 <vincenz> bringert: I use upto Compos7
08:25:24 <sjanssen> LPhas: find the location of libX11.dylib
08:25:40 <dmwit> LPhas: earthy says: /usr/X11R6/lib
08:25:56 <LPhas> dmwit: i found them
08:26:13 <LPhas> dmwit: i was trying to make a simlink in /usr/local/lib
08:26:49 <dmwit> Cute. =)
08:28:09 <bringert> vincenz: nice
08:28:09 <lambdabot> bringert: You have 2 new messages. '/msg lambdabot @messages' to read them.
08:28:16 <LPhas> hi bringert
08:28:31 <bringert> hi
08:28:33 <LPhas> bringert: i suscribed your proposal of modify cabal configuration for SoC
08:28:46 <LPhas> dmwit: cute but don't work :P
08:28:54 <sjanssen> HairyDude: you can probably make ghc -e work like runghc
08:29:53 <sjanssen> HairyDude: ghc -e main foo.hs
08:30:12 <HairyDude> ooo, so it does
08:30:33 <HairyDude> unfortunately I can only fit one arg into a #! line
08:30:46 <bringert> nominolo: did you see my privmsg?
08:30:52 * HairyDude slaps whoever designed that
08:31:14 <sjanssen> HairyDude: you can always #! a script that calls ghc -e main
08:32:30 <HairyDude> then I get an error from suexec (could not open log file, permission denied)
08:38:36 * HairyDude slaps dmr for a crap design
08:40:08 <shapr> Did you mean DRM?
08:40:18 * shapr snickers evilly
08:41:01 <LPhas> dmwit: cool but doesn't work :|
08:41:09 <dmwit> Yeah, too bad.
08:41:14 <dmwit> Have you got something working yet?
08:41:23 <LPhas> dmwit: no i'm not
08:41:30 <dmwit> If not, try sending -L"dir" to ghc when you compile.
08:41:35 <sjanssen> LPhas: I think I went the symlink route too
08:41:42 <LPhas> dmwit: but i'm compiling via cabal
08:41:44 <dmwit> (I don't know how to do this with Cabal.)
08:41:59 <dmwit> sjanssen: Is it GHC_OPTIONS= at the beginning, or what?
08:42:00 <LPhas> sjanssen: so i have to figure out how-and-where simlink
08:42:16 <LPhas> dmwit: at the beginning of what?
08:42:23 <sjanssen> you can add a ghc-options: stanza to add flags
08:42:39 <sjanssen> LPhas: I probably did something dumb like symlink in /usr/lib
08:43:00 <dmwit> LPhas: He means add that stanza to X11.cabal.
08:43:07 <dmwit> Let us know if you need help.
08:43:19 <sjanssen> I don't think it can be the very top line
08:43:59 <sjanssen> but you should be able to add it on the very last line
08:44:22 <LPhas> dmwit: #@*%£#
08:44:30 <LPhas> dmwit: i deleted /usr/X11/lib
08:44:40 <dmwit> !!!
08:44:41 <LPhas> dmwit: forgetting a -s in ln
08:44:58 <LPhas> dmwit: and then deleting the ln-ed dir
08:45:01 <dmwit> LPhas: It should complain hardcore about hard-linking a directory...
08:45:13 <LPhas> dmwit: sigh
08:45:14 <sjanssen> cabal also has an ld-options field.  I bet you can add the directory to those options
08:45:32 <LPhas> now i have to find macosx cs's
08:45:33 <LPhas> ...
08:45:42 <sjanssen> LPhas: hopefully you've got your developer tools discs handy :)
08:46:05 <LPhas> sjanssen: luckly yes
08:46:09 <dmwit> *sigh*
08:47:51 <sjanssen> anyway, I think the solution is to add: ld-options: -L/the/path/ to the Cabal file
08:49:10 <LPhas> sjanssen: let's try
08:59:59 <chessguy> hi haskellers
09:00:25 <dmwit> Heya, chessguy!
09:06:23 <LPhas> sjanssen: worked
09:06:42 <LPhas> sjanssen: sudo cp /usr/X11R6/lib/* /usr/lib/
09:06:49 <LPhas> sjanssen: not pretty but worked
09:06:54 <dmwit> =(
09:07:03 <dmwit> But also =D
09:07:23 <LPhas> dmwit: i can use simlink to make it better
09:07:32 <LPhas> dmwit: now that i know that works
09:07:46 <dmwit> I guess adding ld-options didn't work, huh?
09:08:21 <LPhas> dmwit: yes but maybe i make something wronk
09:08:31 <LPhas> dmwit: then i'll check cabal doc
09:08:44 <dmwit> Anyway, you've got something working, which is good. =)
09:08:54 <LPhas> dmwit: precisely :P
09:09:24 <sjanssen> X11-extras and xmonad should be easy
09:10:09 <kyevan> Mmm. Is it bad when you find yourself writing contracts for other functional languages in haskell notation?
09:11:09 <chessguy> contracts?
09:12:38 <kyevan> chessguy: Types, but only for humans to use
09:12:54 <Igloo> Yes; it means you're using languages other than Haskell
09:13:29 <kyevan> Igloo: Well, Haskell sorta fails to run in DrScheme, and I sorta like grades better than F, so...
09:13:31 <LPhas> @paste
09:13:32 <lambdabot> Haskell pastebin: http://hpaste.org/new
09:13:43 <Igloo> :-)
09:14:17 <hpaste>  phas pasted "xmonad ld error" at http://hpaste.org/1160
09:14:33 <LPhas> sjanssen: ... ^^^
09:14:43 <chessguy> ?hoogle lift
09:14:45 <lambdabot> Control.Monad.Trans.lift :: (MonadTrans t, Monad m) => m a -> t m a
09:14:45 <lambdabot> Text.ParserCombinators.ReadPrec.lift :: ReadP a -> ReadPrec a
09:14:45 <lambdabot> Language.Haskell.TH.Syntax.lift :: Lift t => t -> Q Exp
09:15:14 <doserj> Lphas: extra-libraries: "Xext"
09:15:23 <doserj> add this to xmonad.cabal
09:16:59 <LPhas> doserj: don't work
09:17:31 <dmwit> LPhas: You did ./Setup.h s install for both X11 and X11-extras, right?
09:17:46 <LPhas> dmwit: right
09:18:08 <sjanssen> LPhas: darcs pull, then runghc Setup.lhs clean and start over
09:18:22 <LPhas> ok, worked
09:18:25 <LPhas> the "" quotes
09:19:17 <dmwit> LPhas: How do you just "Setup.lhs"?  You didn't put . in your PATH, did you?
09:20:15 <LPhas> dmwit: well... yes
09:20:23 <chessguy> > liftM2 (+) [1..3] [3,6,9]
09:20:25 <lambdabot>  [4,7,10,5,8,11,6,9,12]
09:20:28 <dmwit> http://bashcurescancer.com/never_ever_ever_put_the_cwd_in_path.html
09:20:30 <lambdabot> Title: Never ever ever put the CWD in your PATH, http://tinyurl.com/yvwybo
09:20:37 <LPhas> dmwit: oh...
09:20:47 <dmwit> ;-)
09:21:00 <doserj> at least, don't put it at the front...
09:24:03 <chessguy> heh, nice
09:25:02 <LPhas> now that i compiled xmonad, i'm supposed to launch it in a X11 shell, right?
09:25:17 <mux> old news
09:25:21 <dmwit> LPhas: You have to figure out how to replace your current window manager.
09:25:28 <doserj> LPhas: are you running a wm currently?
09:25:32 <mux> only recent windows converts want to put the cwd in path anyways :-)
09:25:37 <dmwit> doserj: He's on a mac.
09:25:38 <LPhas> well, i'm on macosx :P
09:25:45 <doserj> oh...
09:25:48 <LPhas> eheh
09:25:53 <LPhas> so i need sjanssen
09:26:00 <dmwit> Yep. =)
09:26:49 <hpaste>  phas annotated "xmonad ld error" with "running xmonad in a X11 shell" at http://hpaste.org/1160#a1
09:29:56 <doserj> http://developer.apple.com/technotes/tn2006/tn2165.html#Q19
09:29:57 <lambdabot> Title: Technical Note TN2165: Frequently Asked Questions about the X Window System (X11 ...
09:31:12 <LPhas> doserj: eheh worked
09:31:41 <LPhas> worked for a second, then crashed lol
09:31:54 <dmwit> heh
09:32:23 <sjanssen> LPhas: X11.app starts up a window manager by default, and you can't run two window managers simultaneously
09:32:38 <LPhas> sjanssen: i resolved with a custom .xinitrc
09:32:46 <LPhas> sjanssen: now loads xmonads... and works :D
09:33:05 <earthy> me likes how the default X11.app wm looks quite a lot like the native wm
09:33:07 <LPhas> sjanssen: but if i load a terminal, then crashe
09:33:20 <sjanssen> oh, thats a new one
09:33:26 <earthy> lphas: are you running rootless?
09:33:31 <sjanssen> LPhas: load a terminal with alt+shift+enter?
09:33:58 <LPhas> sjanssen: no, with Applications->Terminal
09:34:08 <sjanssen> oh, should be the same anyway
09:34:27 <sjanssen> LPhas: you'll probably need to set X11.app to full screen mode to get xmonad to work
09:34:37 <LPhas> if i make alt+shift+enter it crashes immediatly lol :P
09:34:45 <LPhas> sjanssen: probably :D let's try
09:35:46 <LPhas> sjanssen: crash also in fullscreen
09:36:00 <LPhas> sjanssen: the code i compiled is some day old, maybe they have patched something
09:36:07 <LPhas> @where xmonad
09:36:07 <lambdabot> darcs get http://darcs.haskell.org/~sjanssen/xmonad
09:36:34 <LPhas> erhh, maybe YOU have patched something :P
09:37:52 <dmwit> What is gmrun?
09:38:27 <dmwit> nm, google search
09:46:59 <kolmodin> ?localtime dons
09:46:59 <waern> dcoutts, ping
09:47:00 <lambdabot> Local time for dons is Wed Mar 28 02:45:06 2007
09:47:05 <kolmodin> hia waern
09:47:07 <waern> hey
09:47:13 <kolmodin> good morning, perhaps? :)
09:47:38 <waern> I've actually been up since 14:00
09:47:44 <waern> :)
09:47:52 <kolmodin> hah, good for you :)
09:48:30 <kolmodin> time zones is a bitch
09:49:08 <waern> yes, I need dcoutts here
09:51:10 <kolmodin> and I'd like to coordinate something with dons
09:51:50 <waern> so, it was a mistake to go up so early ;)
09:51:59 <waern> actually I had to go to a meeting
09:52:12 <kolmodin> ah
09:52:34 <kolmodin> I would probably like to get up earlier instead of later
09:52:39 <kolmodin> at least I like to think so
09:52:45 * waern too
09:57:22 <kolmodin> @tell dons ping me
09:57:22 <lambdabot> Consider it noted.
10:08:17 <bringert> waern: sorry I woke you for that 15:00 meeting :-)
10:08:27 <bringert> you looked a little sleepy
10:09:09 <vali> hmm, i am wondering if there is any reason to use lisp instead of haskell for AI?
10:09:43 <kyevan> vali: Tradition.
10:09:47 <waern> bringert, hehe... np, I should have gone up much earlier :)
10:09:54 <kyevan> Other than that... prolly not.
10:11:01 <glen_quagmire> hey, in general, not haskell specific, is there a way to express if-else only with boolean logic?
10:11:21 <glen_quagmire> (x and y) or z   ; works similar to what i want except when y is false.
10:11:21 <vali> kyevan: that's what i thought. thanks
10:11:23 <Eelis> didn't believe me eh ;)
10:12:23 <sjanssen> glen_quagmire: you want if x then y else z?
10:12:27 <Eelis> glen_quagmire: perhaps you are looking for logical implication, although it's not quite the same as if-then-else in programming languages
10:12:45 <kyevan> vali: Oh, one other reason!
10:12:50 <kyevan> You want a new keyboard.
10:13:03 <kyevan> (Wearing out the 9/( and 0/) keys :P)
10:13:18 <glen_quagmire> there is this circuit called Fredkin Gate. it works similar to if-then-else. But i wanted to express each of the 3 outputs using boolean logic.
10:13:24 <sjanssen> glen_quagmire: you want (x && y) or (not x && z)
10:13:31 <sjanssen> s/or/||
10:13:52 * glen_quagmire does on the paper
10:15:31 <glen_quagmire> x = 1;  then, (1 && y) || (0 && z) = y || 0 = y.
10:15:55 <glen_quagmire> x = 0; 0 || z = z.. nice it works thanks sjanssen
10:19:03 <glen_quagmire> alright midterm ew
10:20:52 <sjanssen> @scheck \x y z -> (if x then y else z) == ((x && y) || (not x && z))
10:20:54 <lambdabot>   Completed 8 test(s) without failure.
10:22:09 <largos> sjanssen: what is scheck?
10:22:15 <sjanssen> @help scheck
10:22:16 <lambdabot> scheck <expr>
10:22:16 <lambdabot> You have SmallCheck and 3 seconds. Test something.
10:22:43 <sjanssen> largos: SmallCheck takes a property, and checks whether it remains true for many inputs
10:23:01 <largos> oh, I see
10:23:25 <sjanssen> as opposed to QuickCheck, which uses random tests, SmallCheck uses a non-random algorithm
10:23:44 <sjanssen> and it's smart enough to see that there are only 8 ways to get 3 Bools
10:25:42 <largos> nice :)
10:26:11 <largos> @scheck \x y z -> (if x then y else z) == ((x && y) | (x && z))
10:26:11 <lambdabot>  Parse error
10:26:27 <sjanssen> @check \x y z -> (if x then y else z) == ((x && y) || (not x && z)) -- not as good
10:26:29 <lambdabot>  OK, passed 500 tests.
10:27:03 <largos> @scheck \x y z -> (if x then y else z) == ((x && y) || (x && z))
10:27:04 <lambdabot>   Failed test no. 3. Test values follow.: True, False, True
10:27:16 <largos> cool
10:27:32 * largos was just curious what the failure output looked like..
10:28:04 <largos> @check is quickcheck?
10:28:04 <lambdabot>  Parse error
10:28:11 <largos> heh
10:28:22 <largos> @check \x y z -> (if x then y else z) == ((x && y) || (x && z))
10:28:23 <lambdabot>  Falsifiable, after 1 tests: True, False, True
10:28:39 <sjanssen> @check \x y z -> (if x then y else z) == ((x && y) || (x && z))
10:28:40 <lambdabot>  Falsifiable, after 0 tests: False, False, True
10:29:01 <largos> "after 0 tests"
10:29:01 <ddarius> sjanssen: Which incidentally means that (modulo _|_) scheck can -prove- some properties.
10:29:34 <sjanssen> exactly
10:30:03 <sjanssen> ddarius: and I've heard of a tool based on SmallCheck that also tests bottoms
10:30:41 <sjanssen> dcoutts was using it to prove strictness properties of various list functions.  Called ChasingBottoms IIRC
10:31:27 <ddarius> sjanssen: Yeah, that would be about the only real use of it.  Most programmers assume the inputs are defined for almost all functions.
10:34:37 <ddarius> sjanssen: Do you know if it works by symbolic execution or what?
10:35:19 <sjanssen> ddarius: ChasingBottoms or SmallCheck?
10:35:31 <ddarius> ChasingBottoms
10:37:07 <sjanssen> I believe it uses the same type class stuff as SmallCheck, just counts an extra 'undefined' value for each type
10:37:37 <sjanssen> then it probably uses some of the IO exception catching stuff to determine which yielded bottom
10:39:40 <ks> why haskell is cool ?
10:40:00 <ddarius> ks: "why is haskell cool?"
10:40:13 <jacobian> type theoretic goodness
10:40:32 <Heffalump> it's the power of PhD
10:40:51 <alkoma> cool by association :)
10:40:52 <Philippa> type-level kludges piled higher and deeper?
10:41:00 <ks> ddarius right english is my second language, i mostly speak typo
10:41:09 <ddarius> Heffalump: Were you the one that first suggested/designed that logo or who was?
10:41:24 <ddarius> ks: That's okay, I was just making sure.
10:42:05 <ddarius> ks: Laziness is one of the obvious things, though it's not as big as it seems, there are still tons of cool stuff you can do with it.
10:42:24 <Heffalump> ddarius: Audrey Tang was the one I heard of it from.
10:42:37 <ddarius> Heffalump: That's right.
10:43:05 <ks> ddarius yeah i like that :) i'm damn lazy MF
10:43:05 <jacobian> laziness is a pretty big deal for me since you can get simulate non-determinism easily in the list monad.
10:43:16 <Heffalump> google suggests that she was the original source of the phrase
10:43:25 <ddarius> She was.
10:43:34 <ddarius> I remembered when you said her name.
10:43:39 <sjanssen> ks: pretty much every word in this sentence: Haskell is a general purpose, purely functional programming language featuring static typing, higher order functions, polymorphism, type classes, and monadic effects. Haskell compilers are freely available for almost any computer.
10:43:40 <ddarius> jacobian: Tree is better.
10:44:03 <ddarius> Indeed! "is" is why Haskell is cool.
10:44:57 * sjanssen prefers "are"
10:45:13 <ks> sjanssen thanks  i've heard of monads at uni, is it something related to math ?
10:45:40 <sjanssen> ks: monads are a category theory concept, but we've borrowed them in Haskell
10:45:42 <vincenz> are you allowed to pass around unapplied typedefs?
10:45:45 <Adolfo> Why when I write import Array.. i see the next error: parse erros on input '{'
10:45:46 <jacobian> ddarius: Thanks
10:45:48 <vincenz> type Foo a = [a]
10:45:52 * ddarius needs to leave now, not in 10 minutes.
10:45:54 <largos> ddarius: by "is" you mean referential transparency, right? ;)
10:45:55 <sjanssen> not that you need to know category theory too use them!
10:45:58 <ks> sorry for asking stupid questions, i'm just learning (and i like ask questions)
10:46:12 <vincenz> type Foo a = [a]; type Var m a = [m a]   ... Var Foo Int  (Is this legal)
10:46:13 <sjanssen> s/too/to
10:46:22 <sjanssen> vincenz: no
10:46:26 * vincenz snas
10:46:28 <vincenz> +p
10:46:35 <vincenz> no partially applied type-defs, hmm?
10:46:49 <sjanssen> vincenz: yeah, it's got something to do with decidability
10:47:01 * vincenz nods
10:47:03 <vincenz> pity
10:47:07 <vincenz> that would've been nice :/
10:47:17 <sjanssen> I think it'd essentially allow full type level lambdas
10:47:21 <ks> phew that's cool, category theory is pretty complex to my mind
10:48:36 <ks> what's most common area, where haskell is being used ?
10:49:53 <largos> ks: this is just a guess, but I'd say academic research prototypes
10:49:57 <sjanssen> vincenz: type K x y = x; type S x y z = x z (y z);  nonterminating term in SKI here :)
10:50:23 <sjanssen> ks: Haskell is really good at compilers and interpreters
10:50:47 <rashakil> ks: Haskell is really bad at
10:50:49 <rashakil> Terminated
10:51:03 <sjanssen> ks: have you heard of Pugs?
10:51:09 <ks> nope
10:51:15 <Saizan> what would you think of adding pickNth :: Int -> Set a -> a to Data.Set? equivalent to pickNth n = (!! (n-1)) . toAscList   but  O(log n) instead of O(n)
10:51:49 <sjanssen> Pugs is the very first implementation of Perl 6 -- and it's written in Haskell
10:52:14 <ks> sjanssen that's impressive
10:52:26 <rashakil> Saizen: why n-1?
10:53:04 <sjanssen> Saizan: the indexing operations (like in Data.Map) are a bit questionable.  It means we're constrained to one type of implementation for Data.Map
10:53:05 <largos> Saizan: seems odd to add a pickNth to an unordered collection
10:53:07 <Saizan> rashakil, well, easier to implement that way :)
10:53:46 <rashakil> ah
10:53:47 <ks> so to sum it up: academy and comp. languages(interpreters/compilers)
10:54:11 <largos> Saizan: hm.. actually, is Data.Set internally unordered? (if not, how would you get an O(log n) implementation?)
10:54:25 <largos> s/if not/if so/
10:54:29 <Saizan> sjanssen, yes, tought so, but a balanced bin tree seems the best anyway
10:54:46 <sjanssen> Saizan: and the function should be zero indexed from zero, and use the naming convention found in Data.Map
10:55:01 <sjanssen> Saizan: it also requires that the tree sizes are cached in the nodes
10:55:25 <sjanssen> (there are balancing schemes that don't use this, like red-black and AVL)
10:55:31 <Saizan> largos: a Set is implemented as a balanced binary tree so in fact toAscList is O(n) not O(n log n)
10:55:47 <largos> Saizan: ah, ok.
10:55:53 <sjanssen> ks: you can use Haskell for pretty much anything.  darcs is another big Haskell project -- it's a revision control system
10:56:05 <sjanssen> I'm working on an X11 window manager in Haskell
10:56:39 <Saizan> ?docs Data.Map
10:56:39 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Map.html
10:57:31 <ks> sjanssen is it possible to earn money using Haskell ? i'm looking for another language to add to my toolkit
10:58:24 <sjanssen> ks: yes, there is some use of Haskell in industry.  It isn't quite like Java where there's a job on every street corner, though
10:58:35 <reilly> you'll be a better developer in any language if you learn haskell
10:58:40 <ClaudiusMaximus> ks: i'm using Haskell for art stuff, plugged into Pd; also there are some games written in Haskell - as sjanssen said, pretty much anything is possible
10:59:08 <Vq^> ks: it is certainly possible
11:00:16 <Saizan> (didn't know Data.Map had elemAt)
11:00:31 <ks> ok thanks for answers
11:09:44 <vincenz> sjanssen: ah, thx
11:09:55 <vincenz> sjanssen++ -- type-fu
11:15:08 <ndm> @where bzib
11:15:09 <lambdabot> I know nothing about bzib.
11:15:17 <ndm> @where bzlib
11:15:17 <lambdabot> http://haskell.org/~duncan/bzlib/
11:15:42 * ndm grumbles that hackage doesn't include a darcs link to packages
11:15:56 <ndm> who wants stable tarballs!
11:16:09 <sjanssen> ndm: me too
11:16:21 <sjanssen> is there a wishlist somewhere?
11:16:44 <ndm> @seen dcoutts
11:16:45 <lambdabot> I saw dcoutts leaving #ghc, #haskell-overflow, #haskell and #gentoo-haskell 5h 10m 30s ago, and .
11:17:18 <ndm> @seen Igloo
11:17:19 <lambdabot> Igloo is in #haskell-soc, #haskell, #darcs, #ghc, #gentoo-haskell and #haskell.hac07. I last heard Igloo speak 45m 41s ago.
11:17:36 <ndm> Igloo: http://hackage.haskell.org/cgi-bin/hackage-scripts/package/compression-0.1 - links to your website, and 404's
11:17:39 <lambdabot> http://tinyurl.com/24bhzg
11:19:42 <Igloo> ndm: Yeah, I've been lazy about putting pages up there as they'd just have less info than hackage anyway
11:19:49 <Igloo> ndm: Newer packages don't have a homepage link
11:19:54 <ndm> Igloo: fine, but hackage shouldn't link to them
11:20:02 <Igloo> Agreed
11:20:08 <ndm> Igloo: i was trying to find the darcs, but it doesn't look like i need the package after all
11:20:20 <Igloo> 0.1? Hmm, I should upload one that does compression anyway
11:20:27 <ndm> i'm looking for a good library test case for catch, System.FilePath is perfect, but I wrote it :(
11:20:49 <Igloo> What does good mean?
11:21:27 <ndm> Igloo: 400-800 lines, compiles with Yhc (or comes close)
11:21:39 <ndm> not written by anyone at York
11:21:53 <ndm> @tell sorear http://hackage.haskell.org/cgi-bin/hackage-scripts/package/th-lift-0.2 - something that derive should have? (you seem more TH than me)
11:21:53 <lambdabot> Consider it noted.
11:22:18 <vincenz> hey haskellites, what's your thoughts on: http://programming.reddit.com/info/1d4p1/comments/c1d835?context=5
11:22:20 <lambdabot> Title: Project Euler: mathematical programming problems for people who think FizzBuzz i ..., http://tinyurl.com/3y5clq
11:23:12 <Igloo> ndm: base64-string, mime-string, iconv, postgresql are probably all H98, but I'm not sure how they fare on size
11:23:33 <ndm> Igloo: not just bindings to something else either - no FFI would be ideal
11:23:36 <vincenz> it regards the haskell wiki
11:23:54 <Igloo> ndm: base64-string or mime-string might work then
11:24:00 <sjanssen> vincenz: I'm not familiar with Project Euler specifically, but I generally don't like programming challenge spoilers
11:24:02 <Igloo> ndm: Or compression
11:24:12 <ndm> Igloo: thanks, i thought about compression but MTL looks like it will be annoying
11:24:25 <ndm> Igloo: although i'm not sure that would be too hard to overcome...
11:24:27 <ndm> Igloo: got a darcs link?
11:24:30 <vincenz> sjanssen: it's just like 99 lisp problems to me..
11:24:33 <ndm> (working out of darcs makes it easier to submit patches back)
11:25:25 <vincenz> I'll ask dons
11:25:32 * Igloo makes some standalone repos
11:25:52 <vincenz> @tell dons What are your thoughts regarding putting the solutions of Project Euler on the wiki?   I got these comments on reddit: http://programming.reddit.com/info/1d4p1/comments/c1d835?context=5
11:25:53 <lambdabot> Consider it noted.
11:27:29 <Igloo> ndm: http://urchin.earth.li/darcs/ian/mime-string/
11:27:34 <lambdabot> Title: Index of /darcs/ian/mime-string
11:28:37 <ndm> Igloo: you have Utils in the root of that repo, which does nothing and doesn't load
11:28:58 <Igloo> ndm: and http://urchin.earth.li/darcs/ian/base64-string/
11:29:00 <lambdabot> Title: Index of /darcs/ian/base64-string
11:29:26 <ndm> Igloo: should mime-string work on its own from the repo?
11:29:26 <Igloo> ndm: Hmm, probably shouldn't be there
11:29:52 <ndm> Binary\EncodingQ\String.hs also won't load, missing modules
11:29:57 <ndm> ERROR file:.\String.hs - Can't find imported module "Codec.MIME.String.Internal.Utils"
11:30:00 <nominolo> vincenz: note the last comment on reddit
11:30:24 <nominolo> vincenz: oh, sorry.
11:30:42 <nominolo> misread your statement
11:31:01 <vincenz> nominolo: ?
11:31:24 <nominolo> well, solutions are intended not to be public
11:31:25 <Igloo> ndm: Sorry, should be fixed now
11:31:55 <nominolo> i think this should be respected.  although, it's a great advertisment for haskell
11:32:05 <vincenz> afaict, there's nothing to be gained by having the solutions, as such I fail to see why the existence thereof should be negative, if people want to do it themselves, they simply do not look at the solutions
11:32:10 <vincenz> erm
11:32:14 <vincenz> nothing to be gained by not having them
11:32:38 <nominolo> well, i believe in the laziness of people ;)
11:32:44 <largos> vincenz: I'd at least suggest making it clear that it is a "spoiler" page
11:32:51 <vincenz> largos: good point
11:33:07 <largos> vincenz: so someone who comes across it accidentally can still choose to see the solution or not
11:33:14 <vincenz> Well I started the wiki page today, and I'm not too familiar with the formatting et all, it's a  work in progress hopefully not just by me
11:33:54 <ndm> Igloo: thanks, will have to decide which one is the ideal one - if not for MTL and Data.Bits/Data.Word etc, hmmm....
11:34:06 <procyon112> OMG I hate wireless mice more than Java!  Help!  I can't click straight!
11:34:17 <procyon112> Sorry.. just had to get that out.
11:35:37 <LPhas> there's a way to get ghci calculate a veeeery long integer like (2^16)^(640*480)?
11:35:58 <mauke> > (2^16)^(640*480)
11:36:02 <lambdabot> Terminated
11:36:08 <LPhas> mauke: ehaehe
11:36:16 <procyon112> LPhas: calculating is one thing.... printing it might prove more difficult
11:36:26 <LPhas> procyon112: oh
11:36:32 <mauke> works here
11:36:39 <LPhas> mauke: here not :/
11:36:40 <mauke> it starts printing almost immediately
11:37:08 <sjanssen> > (2^16)^(640*480) `seq` "finished"
11:37:11 <lambdabot>  "finished"
11:37:16 <LPhas> Prelude> (2^16)^(640*480)
11:37:16 <LPhas> Bus error
11:37:16 <LPhas> BlueTux:~ Phas$
11:37:30 <mauke> Prelude> length . show $ (2^16)^(640*480)
11:37:30 <mauke> 1479623
11:37:46 <Igloo> LPhas: What version of GHC, OS and architecture?
11:37:54 <Botje> > (2^16)^(640*480)  * 0 + 42
11:37:56 <lambdabot>  42
11:38:04 <Botje> look! haskell is fast ;)
11:38:10 <mahogny> Tigge, 'lo
11:38:12 <procyon112> it takes about 5 seconds to start priniting on my machine.
11:38:36 <thou> > ((2^16)^(640*480)) :: Double
11:38:37 <lambdabot>  Infinity
11:38:52 <vincenz> @poll-add EulerSolutionsOnWiki
11:38:53 <lambdabot> Added new poll: "EulerSolutionsOnWiki"
11:38:58 <vincenz> @vote-add EulerSolutionsOnWiki Yes
11:38:59 <lambdabot> Unknown command, try @list
11:39:04 <vincenz> @help poll
11:39:04 <lambdabot> poll provides: poll-list poll-show poll-add choice-add vote poll-result poll-close poll-remove
11:39:10 <vincenz> @choice-add EulerSolutionsOnWiki No
11:39:11 <lambdabot> New candidate "No", added to poll "EulerSolutionsOnWiki".
11:39:12 <vincenz> @choice-add EulerSolutionsOnWiki Yes
11:39:13 <lambdabot> New candidate "Yes", added to poll "EulerSolutionsOnWiki".
11:39:19 <vincenz> @vote EulerSolutionsOnWiki Yes
11:39:20 <lambdabot> voted on "Yes"
11:39:35 <procyon112> @vote EulerSolutionsOnWiki No
11:39:35 <lambdabot> voted on "No"
11:39:37 <Botje> while it would be nice to learn from, it would give away the algorithms.
11:39:42 <Botje> @vote EulerSolutionsOnWiki No
11:39:42 <lambdabot> voted on "No"
11:39:46 <sjanssen> @vote EulerSolutionsOnWiki No
11:39:46 <lambdabot> voted on "No"
11:39:57 <zbrown> @vote EulerSolutionsOnWiki No
11:39:58 <lambdabot> voted on "No"
11:41:13 <vincenz> Botje: noone forces you to look at that pag
11:41:31 <Botje> i wouldn't be able to resist.
11:41:44 * vincenz boggles
11:42:05 <Botje> and it would kind of make the hard work of people who got pretty far without the wiki useless.
11:42:05 <mauke> a lot of problems can be brute forced
11:42:32 <vincenz> Botje: not really, since there's nothing to be gained by solving em
11:42:45 <largos> mauke: yeah, but, IMO, bruteforcing ruins the benefit (solving the puzzle)
11:42:50 <vincenz> Besides, it's not like this information is secret, I am certain it will be shared.
11:42:57 <dolio> Euler is also set up as sort of a competition, so giving away answers is against that spirit.
11:43:01 <mauke> oh, there's a puzzle?
11:43:13 <vincenz> So I fail to see why a spoiler's page which you don't _have_  to look at is considered negative
11:43:38 <Botje> it'd be a lot more fun to see solutions to some of the ACM problems (http://acm.uva.es/problemset/)
11:43:39 <lambdabot> Title: online-judge.uva.es - PROBLEM SET ARCHIVE
11:43:56 <vincenz> Botje: that's not what this poll is about
11:44:03 <vincenz> besides, there was never any mention of either/or
11:45:27 <sjanssen> vincenz: looking at a solution before attempting to solve the problem reduces enjoyment and learning opportunities
11:45:35 <eventualbuddha> any of you guys installed haskell on OS X?
11:45:43 <sjanssen> eventualbuddha: I have
11:45:51 <vincenz> sjanssen: Yes, however noone's forced to look at em
11:46:13 <vincenz> sjanssen: The same could be said about the lisp99 problems
11:46:37 <sjanssen> those problems are more tutorial in nature, IMO
11:46:38 <eventualbuddha> sjanssen: from source? i've tried but i get this: configure: error: GHC is required unless bootstrapping from .hc files
11:46:53 <vincenz> sjanssen: hence even more aimed at 'learning opportunities'
11:47:03 <sjanssen> eventualbuddha: you must have GHC before you can build GHC
11:47:20 <vincenz> Anyways, I'll check the poll again tomorrow and act accordingly
11:47:22 * vincenz sighs
11:47:28 <eventualbuddha> sjanssen: sounds rather circular
11:47:34 <vincenz> there goes an hour of wasted effort this morning in getting all that crap in wiki syntax
11:48:02 <sjanssen> eventualbuddha: would you try compiling gcc without gcc? :)
11:48:05 <SamB> eventualbuddha: oh, it is rather circular
11:48:17 <SamB> sjanssen: maybe if you had some other program by the name of "cc"
11:48:33 <eventualbuddha> so, other than installing from source, how do i install GHC so that i can.. um.. compile GHC? :P
11:48:42 <sjanssen> s/without gcc/without a C compiler
11:49:00 <sjanssen> eventualbuddha: I believe macports handles this transparently
11:49:01 <SamB> it requires more than just a C compiler, I'm pretty sure
11:49:15 <eventualbuddha> sjanssen: it would, except i get this: Error: Target com.apple.build returned: shell command "env DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib make all" returned error 2
11:49:31 <SamB> it might need to be a 32-bit C compiler or somesuch
11:50:23 <SamB> (at least, I hear that to get it running on DOS, they needed to cross-compile it first...)
11:50:35 <sjanssen> SamB: "a C compiler" is the most concise yet reasonable superset
11:50:38 <SamB> (that might be a library issue, though)
11:50:53 <SamB> sjanssen: maybe "a reasonable C compiler" ;-)
11:51:23 <eventualbuddha> sjanssen: here's the full output with debug/verbose on: http://pastie.caboo.se/49863
11:51:26 <lambdabot> Title: #49863 - Pastie
11:51:52 * SamB wishes x-chat would preserve selections across tab changes
11:53:56 <Cale> @users
11:53:57 <lambdabot> Maximum users seen in #haskell: 337, currently: 320 (95.0%), active: 44 (13.8%)
11:55:48 <sjanssen> eventualbuddha: http://www.haskell.org/ghc/download_ghc_66.html#macosxintel
11:55:49 <lambdabot> Title: GHC: Download version 6.6
11:55:54 * SamB wonders why meme's favicon is the Debian swirl
11:56:44 <eventualbuddha> sjanssen: i tried updating macports. didn't help. i'll try the binary installer
11:56:53 <eventualbuddha> thanks
11:57:47 <Cale> eventualbuddha: It's unusual to compile GHC unless you're making modifications to it.
11:58:03 <eventualbuddha> Cale: well, i didn't want to, but macports wouldn't install it
11:58:07 <Cale> ah
11:58:17 <sjanssen> macports sucks just a little bit
11:58:33 <eventualbuddha> sjanssen: *most* of the time it works fine. it's just that 2%...
11:58:34 <vincenz> sjanssen: you can have type-lambdas if you newtype, rright?
11:58:43 <SamB> wow, sounds sweet
11:58:48 <SamB> debian sucks a *lot*
11:59:17 <sjanssen> vincenz: I don't see how
11:59:39 <vincenz> newtype F a = M.Map a a
11:59:48 <sjanssen> invalid
11:59:50 <vincenz> newtype F a = F M.Map a a
11:59:51 <Heffalump> SamB: in what ways?
11:59:55 <vincenz> newtype K f a = K (f a)
12:00:01 <sjanssen> valid, module parens
12:00:02 <SamB> Heffalump: lots of little ways
12:00:05 <vincenz> well yeah
12:00:07 <SamB> mostly
12:00:08 <vincenz> but that's a typelambda
12:00:15 <sjanssen> vincenz: no, it isn't
12:00:22 <vincenz> so how is this different from
12:00:26 <vincenz> type F a = M.Map a a
12:00:31 <vincenz> type K f a = f a
12:01:05 <sjanssen> vincenz: why isn't "data K f a = K (f a)" a type lambda?
12:01:18 <vincenz> the K isn't
12:01:19 <vincenz> the f is
12:01:35 <SamB> sjanssen: it is not a type lambda because it wraps the type
12:01:47 <SamB> a type lambda would be...
12:02:32 <sjanssen> vincenz: for all intensive purposes, you should consider newtype to be single constructor data without the overhead
12:02:42 <vincenz> sjanssen: I know that
12:02:43 <SamB> type K f a = f a
12:03:02 <SamB> (if that could be partially applied)
12:03:29 <SamB> sjanssen: also with a bang
12:03:42 * vincenz >>= date
12:04:10 <[vincenz]> so
12:04:28 <[vincenz]> type V f a = (f a)
12:04:39 <[vincenz]> newtype MA a = MA (M.Map Int a )
12:04:44 <[vincenz]> V MA Int
12:04:45 <[vincenz]> would be fine
12:04:47 <[vincenz]> cause MA is newtyped
12:05:22 <[vincenz]> type V f a = (f (Array Int a))
12:05:35 <DukeDave> Hey guys, what's a function to round a double to a certain number of decimal places?
12:05:53 <DukeDave> I can only think of hack ways :S
12:06:05 <sjanssen> @hoogle approxRational
12:06:06 <lambdabot> Ratio.approxRational :: RealFrac a => a -> a -> Rational
12:06:10 <SamB> oooow
12:06:35 <SamB> hmm. that isn't how you spell "oooooo" is it?
12:06:44 <DukeDave> > approxRational 3.14159 2
12:06:46 <lambdabot>  2%1
12:06:55 <DukeDave> Erk,
12:07:00 <DukeDave> what just happened? :)
12:07:10 <SamB> you approximated pi to the nearest "2"
12:07:24 <DukeDave> > approxRational 3.14159 0.01
12:07:26 <lambdabot>  22%7
12:08:01 <akkartik> > approxRational 3.14159 0.0001
12:08:03 <lambdabot>  333%106
12:08:14 <sjanssen> > approxRational 0.1 pi
12:08:16 <lambdabot>  0%1
12:08:19 <SamB> okay, it seems I was wrong
12:08:27 <sjanssen> hmm, maybe this isn't the right function
12:08:34 <SamB> but I was assuming that approxRational was a good suggestion ;-)
12:08:35 <DukeDave> I'm just perplexed what the func does do :)
12:08:39 <zbrown> sjanssen: i think you gave the argument backwards?
12:08:47 <zbrown> > approxRational pi 0.1
12:08:48 <lambdabot>  16%5
12:08:52 <zbrown> weeee
12:08:54 <SamB> I think it gives you the simplest rational within the second arg of the first
12:09:16 <DukeDave> maths makes me scared :|
12:09:38 <zbrown> approxRational 3.141592653589793 0.000000001
12:09:46 <zbrown> > approxRational 3.141592653589793 0.000000001
12:09:47 <lambdabot>  103993%33102
12:09:47 <zbrown> woops
12:09:50 <zbrown> weeee
12:09:55 <SamB> now I wants to know how it does it
12:10:05 <SamB> but I probably won't be able to read it...
12:10:10 <SamB> @src approxRational
12:10:11 <lambdabot> Source not found. Are you on drugs?
12:10:19 <zbrown> SamB: very carefully
12:10:24 <sjanssen> > fromRational (approxRational pi 0.1)
12:10:26 <lambdabot>  3.2
12:10:34 <Cale> The approxRational function, applied to two real fractional numbers x and epsilon, returns the simplest rational number within the open interval (x-epsilon, x+epsilon). A rational number n/d in reduced form is said to be simpler than another n'/d' if |n| <=|n'| and d <=d'. Note that it can be proved that any real interval contains a unique simplest rational.
12:11:09 <SamB> hmm.
12:11:21 <SamB> ah, yes, I think I see how.
12:11:40 <_roconnor> > (round (pi *1000))/1000
12:11:40 <lambdabot>  Add a type signature
12:11:46 <_roconnor> > (round (pi *1000))/1000 :: Double
12:11:46 <lambdabot>   add an instance declaration for (Integral Double)
12:11:49 <SamB> but not how you find it
12:11:58 <alexj> @seen shapr
12:11:59 <lambdabot> shapr is in #haskell. I last heard shapr speak 3h 31m 39s ago.
12:12:04 <SamB> @index approxRational
12:12:04 <_roconnor> > (fromInteger (round (pi *1000)))/1000
12:12:04 <lambdabot> Data.Ratio
12:12:06 <lambdabot>  3.142
12:12:06 <Cale> That means that 3/2 is simpler than 3/2.
12:12:09 <SamB> @docs Data.Ratio
12:12:10 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Ratio.html
12:13:34 <alexj> @seen glguy
12:13:34 <lambdabot> glguy is in #haskell-blah and #haskell. I last heard glguy speak 1d 1h 8m 49s ago.
12:25:18 <goltrpoat> just curious, is it possible to write the general catamorphism in an entirely point-free manner?  i'm stuck on needing an if for the case analysis
12:25:47 <goltrpoat> (utterly pointless exercise, pardon the pun, was just curious)
12:26:04 <sjanssen> goltrpoat: catamorphism for lists?
12:26:08 <goltrpoat> yeah
12:26:36 <sjanssen> I don't know a way to do it pointfree
12:27:02 <sjanssen> you could do it if we had a catamorphism on Bool
12:27:08 <goltrpoat> it ends up boiling down to requiring if' p x y = if p then x else y, looks like
12:27:14 <goltrpoat> oh, good point.
12:27:39 <sjanssen> but head and tail are cheating because they're defined pointfully
12:27:55 <goltrpoat> -nod-
12:29:02 <goltrpoat> yeah, so i guess so you end up cheating even if there was a pointfree if'
12:30:12 <LPhas> @seen xerox
12:30:13 <lambdabot> xerox is in #haskell-soc, #haskell, #haskell-blah, #haskell-overflow, #ghc and #perl6. I last heard xerox speak 3h 5m 25s ago.
12:32:13 <sjanssen> instead, we should just have newtype [a] = forall b. Build {foldr :: (a -> b -> b) -> b -> b}
12:32:30 <sjanssen> :)
12:33:06 <shapr> @seen shapr
12:33:07 <lambdabot> You are in #haskell. I last heard you speak just now.
12:33:15 <goltrpoat> hah
12:33:54 <monochrom> you are evil
12:34:49 <dolio> I must say, I've seen few language nambes better than HaMLet-S.
12:34:55 <dolio> Names, even.
12:35:03 <monochrom> heh
12:46:56 <goltrpoat> seems like type variables escape if you actually do something like that
12:50:18 <chessguy> hi all
12:50:22 <arcatan> hi one
12:50:36 <chessguy> procyon112, you around?
12:51:04 <goltrpoat> sjanssen:  eg, empty = Build { cata = const } --what's the type of cata empty?
12:52:37 <goltrpoat> or rather.. what's a
12:52:38 <goltrpoat> hehe
12:53:08 <monochrom> Can it be polymorphic?  I.e., empty :: forall a. [a]
12:53:56 <_roconnor> @type []
12:53:58 <lambdabot> forall a. [a]
12:54:05 <sjanssen> goltrpoat: it should have type forall a. [a]
12:54:25 <chessguy> maybe it's forall a. [a]
12:54:47 * chessguy doesn't even know what we're talking about
12:56:24 <goltrpoat> actually, ghci doesn't like seem to like this at all
12:56:59 <sjanssen> rank 2 is tricky, GHC might have inference problems with this code
12:56:59 <goltrpoat> with data List a = forall b. Build { cata :: b -> (a -> b -> b) -> b }, the empty definition from earlier, and something like cata empty (*) 1
12:57:02 <monochrom> This type is proposed: newtype [a] = Build { cata :: (a -> b -> b) -> b -> b}.  We ignore that there is already another [a] built in.  We now discuss its implications.
12:57:18 <goltrpoat> er
12:57:22 <goltrpoat> cata empty 1 (*) rather
12:57:23 <sjanssen> oh, and there's a problem with existential record selectors
12:57:26 <monochrom> I missed "forall b."
12:57:49 <goltrpoat> yeah, that's what it's complaining about (and suggesting using pattern matching instead, which sort of defeats the purpose :) )
12:58:41 <goltrpoat> actually.. no, i take that back.  it was saying that earlier, but that was after i wrote the cons with a record update
12:59:10 <goltrpoat> right now it's "Cannot use record selector 'cata' as a function due to escaped type variables' "
13:00:14 <kosmikus> are you sure you don't want cata to be polymorphic?
13:01:01 <monochrom> I'm wonder if it should be cata :: forall b. ...
13:01:04 <sjanssen> hmm, does the forall mean what I think it does here?
13:01:05 <tcr> Can you create a type that is an union of other types?
13:01:12 <kosmikus> monochrom: yes, that's what I think
13:01:25 <monochrom> forall means opposite things before and after the data constructor. :)
13:01:39 <sjanssen> ah yes, I agree with monochrom
13:01:49 <kosmikus> tcr: disjoint union, yes. Either ...
13:03:40 <procyon112> tcr: and a conjunctive union is a tuple.
13:04:05 <augustss> a conjunctive union.....
13:04:26 <tcr> Aren't disjoint union types something like data Color = Red | Blue | ... ?
13:04:39 <sjanssen> @pl cata f z xs = cata' xs f z
13:04:39 <lambdabot> cata = flip . flip cata'
13:05:17 <kosmikus> tcr: that's one way to look at it, yes.
13:06:13 <sjanssen> @paste
13:06:14 <lambdabot> Haskell pastebin: http://hpaste.org/new
13:06:33 <monochrom> Either is also a "data Either ... = ... | ... "
13:06:40 <goltrpoat> kosmikus/monochrom/sjanssen:  perfect, that worked
13:06:45 <goltrpoat> thanks
13:07:28 <procyon112> tcr: in haskell a \/ b is (a,b) or records.  a /\ b is Either, data ... = ... | ... or other monadic constructs.
13:07:45 <procyon112> Er.. flip that
13:07:55 <tcr> That's not what I want (or I don't see how it applies, at least); what I'd like to have is something like: data Foo = Foo1 | Foo2; data Bar = Bar1 | Bar2; uniontype Foobar = Foo `typeunion` Bar
13:07:58 <procyon112> a /\ b is tuples, a \/ b is either.
13:08:26 <hpaste>  sjanssen pasted "catamorphism experiment" at http://hpaste.org/1161
13:09:06 <procyon112> tcr: Either Foo Bar
13:09:47 <goltrpoat> sjanssen:  more or less what i have, trying to get cons to typecheck
13:09:56 <procyon112> tcr: Then pull the right type out with pattern matching.
13:10:33 <tcr> Is it possible to inquire lambdabot for an url with the relevant description of Either?
13:10:35 <monochrom> haskell has tagged unions (that is data ... = ... | ... | ...), no other unions.
13:11:10 <procyon112> tcr: case x of (Left y) -> y is a Foo... (Right y) -> y is a bar
13:11:44 <monochrom> I hope http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t%3AEither helps
13:11:46 <sjanssen> @pl cons x xs = Build (\f z -> x `f` cata f z xs)
13:11:46 <lambdabot> cons = (Build .) . (. flip (flip . cata)) . ap . ((.) .) . flip id
13:11:47 <lambdabot> http://tinyurl.com/y4wexy
13:11:56 <procyon112> ?hoogle Either
13:11:57 <lambdabot> Prelude.Either :: data Either a b
13:11:57 <lambdabot> Prelude.either :: (a -> c) -> (b -> c) -> Either a b -> c
13:13:05 <procyon112> ?src Either
13:13:06 <lambdabot> Source not found. Where did you learn to type?
13:14:02 <LPhas> ?src Prelude.Either
13:14:03 <lambdabot> Source not found. And you call yourself a Rocket Scientist!
13:14:08 <dolio> ?src Either (>>=)
13:14:08 <lambdabot> Left  l >>= _ = Left l
13:14:09 <lambdabot> Right r >>= k = k r
13:14:14 <LPhas> lambdabot piss me :|
13:14:19 <monochrom> Either is defined for you, but it's simply: "data Either a b = Left a | Right b".  You could understand it from that point on.
13:14:25 <dolio> ?src Either Either
13:14:26 <lambdabot> Source not found. Take a stress pill and think things over.
13:14:41 <tcr> I think I'm rolling it up the wrong way; what I _really_ want is the following: Say you've got `data Type = TypeVar Name | TypeConstructor Name [Type]';   What I'd like is TypeConstructor to be `TypeConstructor Name [TypeVar]', but then I'd have to make TypeVar its own type, and that's kind of ugly.
13:14:44 <dolio> ?src Either Left
13:14:44 <lambdabot> Source not found. Listen, broccoli brains, I don't have time to listen to this trash.
13:15:36 <tcr> Maybe I'm just trying to pull something out of the type systems that's not usual done this way.
13:15:41 <procyon112> tcr: Yup.  TypeVar is a constructor, not a type. To do what you want, you will have to factor it out as a type, ugly or not.
13:15:48 <LPhas> tcr: it's a tree?
13:16:28 <LPhas> tcr: data Tree a = Leaf a | Node a [Tree a]
13:17:05 <LPhas> tcr: then Leaf a :: Tree a
13:17:22 <LPhas> tcr: so you take what you want, at least i think
13:17:28 <tcr> LPhas: No, it's not a tree, that's why I want to make it that specific in the first place.
13:17:57 <monochrom> make TypeVar its own type.  it is not ugly.  I see it in GHC all the time.
13:18:35 <procyon112> data TypeVar = TypeVar Name; data Type = TVar TypeVar | TConstr Name [TypeVar]
13:19:10 <chessguy> hi procyon112
13:19:17 <procyon112> yo chessguy
13:19:19 <tcr> Yeah but then I must diligent because of name collisions, too :) as procyon112's example showed it rightly
13:19:24 <tcr> must be
13:19:43 <goltrpoat> @pl \x xs -> Build (\z f -> x `f` cata xs z f)
13:19:43 <lambdabot> (Build .) . (. cata) . (.) . ap . flip id
13:19:48 <procyon112> chessguy: sorry.. no Email yet.  I've been busy hacking C++ :(
13:19:48 <chessguy> hey how fare are you in your patches? i've got some concerns
13:19:54 <chessguy> ewwww
13:19:58 <procyon112> concerns like?
13:19:59 <goltrpoat> yikes.
13:20:53 <chessguy> well, i want to do some refactoring at some point, to make the framework more flexible. i'm wondering if that should be done before what you're doing
13:21:40 <tcr> monochrom: Are there any limitations wrt type systems that'd prevent allowing union of types as I'd like to see? :)
13:21:48 <procyon112> Possibly.  I've got my own framework I've been hacking.  We may not be able to do a straight patch, but once I've got the logic down of what I want to do, integrating it by hand shouldn't be too difficult.
13:22:03 <chessguy> oh, you started from scratch?
13:22:19 <monochrom> Yes I think there are.
13:22:26 <procyon112> chessguy: I started a while back... before you announced yours.
13:23:26 <chessguy> why wouldn't you have said that to start with, instead of saying you wanted to patch mine?
13:24:28 <procyon112> chessguy: Because there is so much overlap, that rather than do 2 different systems, It might be better for the AI Task force library to have 1 system that is more generic and can do everything.
13:24:49 <procyon112> Mine is no further along than yours.... and the major difference is in the evaluator.
13:25:09 <chessguy> well, that's fine, but we ought to both work on the same one
13:25:24 <chessguy> this is the first i've even heard that there was a second one
13:25:31 <LPhas> @pl \foo a b -> foo b a
13:25:31 <lambdabot> flip
13:25:36 <LPhas> eheh
13:25:44 <chessguy> ?src flip
13:25:44 <lambdabot> flip f x y = f y x
13:26:46 <procyon112> In mine, instead of functions having an arity and a list of params, everything in mine is arity 0 except "apply" which is arity 2... I think we can do both though with one evaluator and mix the 2 representations.
13:27:30 <procyon112> Also, mine is normal order evaluation and yours is applicative order, but that's cosmetic at this point.
13:28:07 <chessguy> ermm, mine lets the nodes decide what order they want to evaluate in
13:28:57 <procyon112> Right, whereas mine, being lazy, only evaluates on need, so there is no need to have "short circuit" logic in ifelse nodes.
13:29:45 <chessguy> anyway, the changes i wanted to make were to make it more explicit that, e.g., the selection method currently used is only the default method, and others could be supplied, either by the library or as custom functions given by the user.
13:29:47 <procyon112> Yours is "it's up to the function" order ;)
13:30:43 <chessguy> i want to be able to mix and match lots of different strategies for generation, selection, reproduction, etc.
13:30:53 <chessguy> including your island strategy
13:31:31 <procyon112> chessguy: that's good.  We also want a way to supply mutation and crossover operators, as well as population, etc... I was thinking of making a "default" record with all the config data, then letting the user massage that record and then pass it in as a config object to the GP run function.
13:32:10 <chessguy> i think i have an idea that's one better
13:32:30 <chessguy> have a default record, but allow the user to pass a *function* which can modify the record
13:32:46 <chessguy> that way they can pick and choose what they want to modify
13:33:13 <procyon112> sounds good to me.
13:33:42 <chessguy> but i think that's going to need to be in place, or at least some semblance of it, before you start your island strategy stuff
13:34:25 <procyon112> yes... or really before alot of things... A hard coded population of 300 is not really workable ;)
13:34:35 <chessguy> right, it was never intended to be
13:35:03 <chessguy> so what have you gotten done so far?
13:35:22 <procyon112> hehe.  nada.  I've been hacking C++.  Stupid work :)
13:35:32 <chessguy> ok, that's probably a good thing
13:35:33 <SamB> chessguy: how is that better than just modifying the default record?
13:35:48 <chessguy> SamB, huh?
13:36:07 <SamB> well, I mean basically you trade a shorter name for a lambda...
13:36:37 <chessguy> the library will have a default configuration record. he was saying that we should let the user pass a replacement record. i'm saying we should let the user pass a function to modify the record instead
13:37:34 <SamB> his way, the user could say (defaultRecord { aField = aValue, anotherField = anotherValue })
13:37:49 <procyon112> chessguy: actually, I was implying the user get the defaut record, and then modify it, and then pass it into the main run.  I think our 2 methods would be fairly equivelent.
13:37:57 <SamB> your way: (\def -> def { aField = aValue, anotherField = anotherValue })
13:38:11 <procyon112> Right, like SamB said... not too different.
13:38:28 <chessguy> ah, ok. i was thinking that my way we wouldn't export the default record
13:38:52 <SamB> chessguy: quite
13:39:01 <SamB> at least, most likely
13:39:15 <chessguy> i don't know, seems cleaner to me, but it probably doesn't matter
13:39:37 <procyon112> I don't care one way or the other.. as long as there's a way to do it ;)
13:39:55 <chessguy> sure
13:40:36 <chessguy> ok, i'll hack that part tonight, and hopefully have something workable to put on the darcs repo by tomorrow
13:41:34 <shapr> Has anyone written udp servers in Haskell?
13:41:37 <chessguy> but we should commit to either both working on mine, and porting your evaluator to it, or both working on yours, and porting whatever from mine to yours that we need to
13:42:14 <chessguy> shapr, what still uses udp?
13:42:16 <procyon112> My concern is more with the genome representation. currently a node is [a]->a.. I think it needs to be more complex than that.
13:42:25 <shapr> I just tried hacking http://www.haskell.org/hawiki/HaskellNewbie_2fTcpIpAndNetworking to do udp, but it has a few problems.
13:42:26 <lambdabot> Title: HaskellNewbie/TcpIpAndNetworking - The Haskell Wiki
13:42:35 <shapr> chessguy: I want to use UDP.
13:43:13 <chessguy> procyon112, how so? and isn't that just a trivial matter to change?
13:44:03 <ddarius> chessguy: DNS
13:44:05 <ClaudiusMaximus> shapr: maybe this could help?  http://slavepianos.org/rd/r/darcsweb.cgi?r=sw-78;a=headblob;f=/Sound/OpenSoundControl/Transport.hs
13:44:07 <lambdabot> Title: darcs - sw-78, http://tinyurl.com/yuvo4a
13:44:23 <procyon112> data Node = ListFunc ([a]->a) | App Node Node | Func Name | PrimitiveData ...
13:44:37 <shapr> ClaudiusMaximus: Yeah, I'll check that out.
13:44:46 <shapr> ClaudiusMaximus: Are you doing @go filetype:hs udp like I am? :-)
13:45:14 <chessguy> procyon112, well yeah, if you have an evaluator that can handle that, it's nice
13:45:29 <chessguy> s/evaluator/evaluator and generator/
13:45:45 <procyon112> chessguy: I'm not sure if it's trivial yet.  I'd like it to encompass both the [a]->a style AND the (apply func node) style.  I haven't hacked on it yet, so I'm not sure if there's not a gotcha in there.
13:46:33 <chessguy> we'll also eventually want to allow for ADFs too
13:47:16 <procyon112> chessguy: doubtlessly we will have users partial to either style, as yours is more prevelent in the literature, and mine is more conducive to Strongly Typed GP... I think we can mix them though.
13:47:29 <shapr> ClaudiusMaximus: Yeah, that source is eminently hackable.
13:47:41 <ClaudiusMaximus> shapr: no, i just happened to know about that project (it's required by hsc3 on the same site)
13:48:54 <chessguy> procyon112, so should we just both work on your code and drop mine then? since your evaluator is farther along?
13:49:05 <procyon112> Right.  ADFS *and* other side data too.  For instance, in my trees, a valid *evolveable* parameter might be switching between applicative and normal order, which could happen to an individual during mutation lets say.  This is evolveable data lying outside the main syntax tree.
13:50:08 <chessguy> that sounds really cool, as long as it's optional
13:50:26 <procyon112> Chessguy: no.. yours is probably a bit further along than mine... and it's announced, and others have looked at it.  No matter which way we go, there's so little code it doesn't matter, so lets stick with yours.
13:51:28 <chessguy> ok, i'll collect the default parameters into a single record in my code then
13:51:37 <procyon112> Mine has been hung up getting type inferrence working + being time constrained with my paying job... so I really have only the basic framework.
13:53:19 <procyon112> I do have a cool little REPL though I might integrate into yours.  Type in trees in Lisp syntax, evalute them, ask for the type of them, ask for a mutation of it... a little parsec parser does the work.
13:53:49 <chessguy> that sounds cool
13:54:42 <bos> ?users
13:54:42 <lambdabot> Maximum users seen in #haskell: 337, currently: 323 (95.8%), active: 44 (13.6%)
13:54:48 <chessguy> i want to eventually be able to bolt a gtk2hs front end onto it too, as long as it's not required to run the program (if we want to do any optimization, or run it remotely, we'll want to use the text-based version)
13:55:29 <largos> are recursive list comprehensions possible in haskell?
13:55:30 <procyon112> My main interest is getting the typing working... and that might take a bit.  I can work independantly right now, and once I truely understand the solution, integrating it into whatever you have should be pretty simple.
13:55:35 <shapr> @seen ddarius
13:55:36 <lambdabot> I saw ddarius leaving #haskell, #haskell-overflow and #haskell-blah 53s ago, and .
13:55:39 <shapr> bah
13:56:08 <chessguy> fair enough. can you /msg me your email address so i can let you know when i update the repo later tonight?
13:57:20 <procyon112> My quest for the typing has led me through TAPL and "Type Theory and Functional Programming" and "Implementing Functional Languages", and much more, and I *think* I finally understand the concept that I'm trying to define :)  It's been an adventure.
13:57:56 <chessguy> what concept?
13:58:22 <chessguy> shapr, ping
13:58:29 <procyon112> chessguy: ooh, and if your refactoring, you should check out how hard it would be to remove the -fglasgow-exts requirement.
13:58:29 <emu> { concept | concept is difficult to define }
13:58:37 <chessguy> procyon112, ok
13:58:39 <goltrpoat> largos:  depends on what you mean by 'recursive list comprehensions'
13:59:15 <procyon112> emu: concept is well understood in the literature, but poorly understood in my brain :)
14:00:20 <largos> goltrpoat: I'm just playing with fibinocci, and wondering if it can be done in a single list comprehension
14:00:31 <largos> (without using the closed form solution)
14:00:41 <emu> fix
14:00:56 <emu> well also, scanl
14:01:09 <procyon112> emu: I come from a very imperative C++ background.  I have never, until a few months ago, been exposed in any way to this monster called "type theory".  I figured I could just sit down and write a simple algorithm to construct function types, having never heard of unification, etc... boy was I in for a head banging experience.
14:01:26 <chessguy> haha
14:01:39 <emu> aye
14:01:52 <chessguy> i've heard the word, but that's about it :)
14:01:55 <emu> that'll get you started in FP
14:02:21 <goltrpoat> largos:  you know you can use let in a list comprehension, right
14:02:26 <shapr> chessguy: pong
14:02:33 <emu> writing a simple type unifier for a basic parametric polymorphic type system is not a bad exercise at all
14:03:03 <procyon112> emu: That's actually WHY I learned Haskell... I was writing my framework in C++, and then started googling for help, and all the literature for what I was trying to do pointed to Haskell... I figured I should learn Haskell.
14:03:17 <goltrpoat> largos:  since.. technically, you could just say fib n = [k | k <- fibs n; let fibs = ...] !! n :)
14:03:23 <chessguy> ?seen ddarius
14:03:24 <lambdabot> ddarius is in #haskell, #haskell-overflow and #haskell-blah. I don't know when ddarius last spoke.
14:03:29 <chessguy> shapr, ^^
14:03:33 <goltrpoat> er.. swap the let and the k <- fibs n
14:03:50 <largos> goltrpoat: oh, I didn't know I could use a let in there
14:03:58 <shapr> ah yes
14:04:25 <TomMD> largos: What is wrong with:  fib = [x | x <- 1 : 1 : zipWith  (+) fib (tail fib)] ?
14:04:52 <emu> > fix (\f -> 1 : 1 : [ a + b | x <- zipWith (+) f (tail f) ])
14:04:53 <lambdabot>   Not in scope: `b'
14:05:00 <emu> > fix (\f -> 1 : 1 : [ x | x <- zipWith (+) f (tail f) ])
14:05:01 <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
14:05:04 <shapr> ddarius: Thought you might find http://slavepianos.org/rd/r/darcsweb.cgi?r=sw-70;a=summary interesting.
14:05:08 <lambdabot> Title: darcs - sw-70
14:05:10 <chessguy> TomMD, what's wrong with fib = 1 : 1 : zipWith (+) fib (tail fib)] ?
14:05:33 <ddarius> largos: [x | x <- xs] desugars to map id xs i.e. xs.
14:05:38 <TomMD> I like to be wordy :-)
14:05:42 <chessguy> lol
14:05:53 <largos> TomMD: ah, that's what I was trying to come up with
14:06:35 <TomMD> largos: Good - I was afraid I was really misunderstanding what you were wanting.  Chessguy makes a good point that you don't need the list comprehension form.
14:06:42 <largos> yeah
14:07:08 <ddarius> shapr: That's no fun.
14:09:35 <ddarius> shapr: Was it your site that I got the links to the CS as applied to mechanical locks papers?
14:09:42 <shapr> I think so.
14:09:50 <shapr> You probably mean Blaze somebody?
14:10:06 <shapr> Yeah, "Lockpicking For Computer Scientists" I think.
14:10:35 <chessguy> sounds like a cool paper
14:12:11 <shapr> That guy writes a lot of cool papers.
14:12:17 <shapr> ddarius: Got any nifty papers for me to read?
14:13:00 <shapr> ddarius: Have you the topos paper that separates implementation from interface for physics? I can think of how that could be used to implement the ideas in that story chapter I sent you.
14:13:30 <ddarius> shapr: Yeah, that guy.  I read the one on safelocking and on master keyed pin tumblers.  The second actually very likely applies to me right now.
14:13:35 <chessguy> http://www.crypto.com/papers/safelocks.pdf
14:13:46 <shapr> ddarius: Oh that sounds interesting... what are you doing these days?
14:13:48 <ddarius> I have read the first of the papers in that series (re Topos)
14:13:50 <shapr> Or should I not ask?
14:14:15 <ddarius> shapr: I'm referring to the dorms.  I could make a master key for all the dorms from mine.
14:14:20 <shapr> ah
14:14:34 <sjanssen> @botsnack
14:14:35 <lambdabot> :)
14:14:41 <ddarius> shapr: Let me check my toread list.
14:15:18 <chessguy> @get-sjans
14:15:18 <lambdabot> Unknown command, try @list
14:15:27 <chessguy> @get-sjan
14:15:27 <lambdabot> Unknown command, try @list
14:15:29 <shapr> heh
14:15:32 <shapr> chessguy: Submit it!
14:15:39 <shapr> @get-sjanssen!
14:15:40 <lambdabot> Unknown command, try @list
14:15:41 <chessguy> @get-shans
14:15:41 <lambdabot> shapr!!
14:15:44 <chessguy> :)
14:15:50 <shapr> You screamt?
14:15:55 <chessguy> i did not!
14:16:01 <shapr> Ah, lambdabot screamt!
14:16:16 <chessguy> i think the bot has a thing for you :)
14:16:27 <shapr> ddarius: I'm going to Sweden for two weeks, starting one week from now, so I want to have some papers to read for the flight and any offtime.
14:16:49 <shapr> ddarius: btw, you really gotta read Hamming's "Art of Science and Engineering : Learning to Learn" it's awesome!
14:16:55 <shapr> I'm only partway into it, but wow!
14:17:05 <sjanssen> @yow
14:17:06 <lambdabot> What I need is a MATURE RELATIONSHIP with a FLOPPY DISK ...
14:17:11 <dylan> LOL
14:17:13 <shapr> That's a scary comment.
14:17:16 <chessguy> @keal
14:17:16 <lambdabot> write an algorthim that generates the correct responses for a phone survey based on number of rings whether answered how quickly hung up on and the mood of the receiver
14:17:36 <shapr> @protontorpedo
14:17:45 <lambdabot> wil I make mroe $$ than learning java or APL or smalltalk or plt scheme or ruby or perl or clisp?
14:18:00 <ddarius> "Initial Algebra Semantics is Enough!" is very good if you haven't read it.  As in "EXE: Automatically Generating Inputs of Death" and a slide show presentation on Dawson Engler's site is also enjoyable.
14:18:14 <emu> > 1 : map snd (iterate (uncurry (ap (,) . (+))) (1, 1))
14:18:15 <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
14:18:42 <shapr> emu: cute!
14:18:43 <chessguy> i think i better leave before my library gets even bigger :)
14:19:07 <shapr> ddarius: The big downside of Hamming's book is that it's out of print, and the copies I've found are very expensive.
14:19:10 <ddarius> shapr: I could give you my toread.txt, but I've hardly scratched it.  'maybe read 15-20 papers/books/theses out of 170
14:19:26 <shapr> I got lucky, I found a copy for $120. The easy to find copy is $500 in .nl
14:19:30 <emu> mm, point-less form
14:19:45 <shapr> But wow, what a book!
14:20:01 <emu> > 1 : map snd (iterate (\(x,s) -> (s,x+s)) (1,1))  -- shorter and easier to understand =)
14:20:02 <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
14:20:04 <ddarius> Apparantly, I wanted to mention "Type Directed Concurrency" on LtU, so I guess that's a good paper too.
14:20:29 <shapr> ddarius: Send me your list! You know my address, yeah?
14:20:50 <dolio> > fix (scanl (+) 1)
14:20:52 <lambdabot>  [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,2...
14:21:04 <ddarius> shapr: Still the scannedinavian one?
14:21:08 <dolio> Oops.
14:21:09 <Botje> @pl \a b -> 1 + a + b
14:21:10 <lambdabot> (+) . (1 +)
14:21:15 <Botje> heheh.
14:21:23 <dolio> > fix ((1:) . scanl (+) 1)
14:21:24 <lambdabot>  [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17...
14:21:30 <emu> aye, that was it
14:21:35 <Botje> @pl \a b -> 2 * a + b
14:21:35 <lambdabot> (+) . (2 *)
14:21:48 <largos> :t fix
14:21:50 <lambdabot> forall a. (a -> a) -> a
14:21:50 <ddarius> shapr: Also this is my "started a few months ago" toread list, I still have the one that I was working on a few years ago (and then some...)
14:22:02 <emu> pl form has some resemblence to stack programming
14:23:48 <ddarius> "Weird things that surprise academics trying to commercialize a static checking tool" at http://www.stanford.edu/~engler/ is entertaining.
14:23:50 <lambdabot> Title: Dawson Engler
14:24:09 <ddarius> Incidentally, Dawson Engler is one of my favorite computers scientists.
14:24:39 <procyon112> emu: I'm telling you.  I have this weird feeling that pl *is* 1 dimensional cellular automata.
14:25:26 <ddarius> procyon112: @pl is a compiler.  That's all.
14:26:07 <ddarius> It's similar to (as in is) compiling to a fixed set of combinators.
14:26:12 <emu> that's true; it converts normal everyday code into something only a machine could love
14:27:13 * ddarius has a whole pile of crap to do sooner or later, but the good news it might result in him getting a decent chunk of money now and later.
14:28:10 <procyon112> I just get the weird feeling of recognition... that combinator values are the states of the 1-D cellular automata, and that the combinators define the neighborhoods.. it feels isomorphic.  I think there's a thesis to be written there.
14:29:26 <Saizan> well, there's not really a "neighborhood" data can flow only in one direction
14:31:14 <procyon112> So, combinator application may be isomorphic to a "generation" of automata (which is provably irreversible in the general case).
14:36:45 <shapr> ddarius: Yup, still scannedinavian
14:37:03 <LPhas> @where scannedinavian
14:37:04 <lambdabot> I know nothing about scannedinavian.
14:37:08 <LPhas> pfft
14:39:14 <ddarius> shapr: Ah, good because I already sent it.
14:46:06 <LPhas> @where hope
14:46:07 <lambdabot> http://hope.bringert.net/
14:46:27 <LPhas> @seen bringert
14:46:28 <lambdabot> I saw bringert leaving #haskell-soc and #haskell 1h 15m 18s ago, and .
14:46:32 <LPhas> oh
14:48:11 <shapr> LPhas: www.scannedinavian.com is my server.
14:48:37 <LPhas> shapr: yes i know eheh
14:50:03 <daniel_larsson> shapr: I love the "Oh, I know how to spell it, I just don't know the state abbreviation." comment :)
14:51:43 <ddarius> http://www.cs.cmu.edu/
14:51:44 <lambdabot> Title: SCHOOL OF COMPUTER SCIENCE/Carnegie Mellon University
14:51:50 <ddarius> Bah.
14:53:25 <LPhas> shapr: are you building a company?
14:54:51 <Mushy-pea> Hi.
15:01:02 <nominolo> @seen ekidd
15:01:02 <lambdabot> I saw ekidd leaving #haskell 9h 3m 38s ago, and .
15:02:53 <sorear> hello!
15:02:53 <lambdabot> sorear: You have 1 new message. '/msg lambdabot @messages' to read it.
15:02:58 <sorear> @messages
15:02:58 <lambdabot> ndm said 3h 41m 4s ago: http://hackage.haskell.org/cgi-bin/hackage-scripts/package/th-lift-0.2 - something that derive should have? (you seem more TH than me)
15:03:00 <Mushy-pea> @seen Mushy-pea
15:03:01 <lambdabot> You are in #haskell. I last heard you speak just now.
15:03:22 <Mushy-pea> @seen rashakil
15:03:22 <lambdabot> rashakil is in #haskell and #perl6. I last heard rashakil speak 4h 9m 36s ago.
15:04:01 <Mushy-pea> Hello Sam.  You around?
15:04:30 <sorear> @index Lift
15:04:30 <lambdabot> Language.Haskell.TH.Syntax
15:04:47 <sorear> @tell ndm Yes.
15:04:47 <lambdabot> Consider it noted.
15:06:01 <Mushy-pea> ?bot had a good day today?
15:06:02 <lambdabot> :)
15:06:08 <Mushy-pea> :)
15:06:09 <sorear> @seen ndm
15:06:09 <lambdabot> I saw ndm leaving #haskell-soc, #ghc, #haskell-overflow, #haskell-blah and #haskell 3h 28m 20s ago, and .
15:07:22 <sorear> beelsebob: what does tatd2 stand for? (initials?)
15:08:38 <beelsebob> sorear: yeh
15:16:11 <sorear> @seen
15:16:24 <Mushy-pea> lambdabot can do Haskell compilations, right?  How do you get it to eval a line?
15:16:37 <sorear> > 2 + 2
15:16:38 <lambdabot>  4
15:16:43 <Mushy-pea> OK.
15:16:44 <sorear> like that!
15:17:56 <shapr> Is there any good reason Network.Socket.SockAddr doesn't have a Read instance?
15:18:08 <Mushy-pea> What about chunks of code?
15:18:18 <sorear> Read is evil! <- not a good reason, but probably the one used
15:18:20 <sorear> Mushy-pea: ?
15:18:43 <sorear> Mushy-pea: use @let for top level definitions, like functions and stuff
15:18:53 <Mushy-pea> OK.
15:18:58 <sorear> Mushy-pea: or just use > let ...defininions... in expression
15:19:15 <sorear> @let is b0rken right now
15:19:15 <lambdabot>  Parse error
15:19:20 <sorear> @let x = 2
15:19:23 <lambdabot> Plugin `eval' failed with: IRCRaised Data.ByteString.last: empty ByteString
15:19:31 <sorear> so you'll have to use > let
15:19:59 <Mushy-pea> Think I'll stick with GHC for now :)
15:20:29 <sorear> @ty GHC.Base.foldr
15:20:31 <lambdabot> forall a b. (a -> b -> b) -> b -> [a] -> b
15:20:36 <sorear> this IS ghc
15:21:10 * shapr swears at the Show instances in GHC libs.
15:21:14 <shapr> $@*@*!!
15:21:15 <sorear> not even ghci - lambdabot compiles everything you say!
15:21:26 <ddarius> sorear: What's wrong with @let code-wise?
15:21:27 <sorear> Unknown command
15:21:40 <sorear> ddarius: stale binaries
15:21:57 <Mushy-pea> I mean on my local machine.  Just thought it was a funny thing, a chat room bot that compiles stuff.
15:22:00 <sorear> ddarius: TuringTest fixed the actual bug a couple weeks ago, but dons hasn't recompiled yet
15:22:09 <shapr> Show instances should include quotes around the output so that read . show == id !!
15:22:10 <ddarius> okay
15:22:27 <shapr> We've run across that problem repeatedly in the standard libraries.
15:22:32 <sorear> shapr: /me sympathises
15:22:44 <sorear> report a bug!
15:22:52 <ddarius> shapr: Indeed. They should preferably be an isomorphism.
15:23:04 <Igloo> shapr: What do you mean?
15:23:05 <shapr> Actually, our solution is to switch entirely to Binary for serialization and declare that Read and Show are for human consumption.
15:23:16 <shapr> > shows (SockAddrInet 39 0xffffff) . shows 10 $ "EOF"
15:23:17 <lambdabot>   Not in scope: data constructor `SockAddrInet'
15:23:23 <sorear> There's a certain satisfaction to having your name plastered all over Trac.
15:23:24 <shapr> > shows (Network.Socket.SockAddrInet 39 0xffffff) . shows 10 $ "EOF"
15:23:25 <lambdabot>      Not in scope: data constructor `Network.Socket.SockAddrInet'
15:23:29 * shapr cries
15:23:33 * shapr throws lambdas
15:23:49 <sorear> shapr: have we forgotten the virtues of human readable save files?
15:24:01 <Igloo> shapr: Do you mean parentheses rather than quotes?
15:24:13 <sorear> shapr: I *like* being able to hand-debug the serialized stores!
15:24:27 <sorear> shapr: can't do that with binary :(
15:24:36 <ddarius> There's a certain satisfaction to being able to just barely say "I hacked a very very very little bit on GHC".
15:24:49 <ddarius> sorear: Sure you can.
15:24:51 <Igloo> shapr: Oh, I see, you want to just concatenate show output and read it back again?
15:25:04 <sorear> ddarius: ah, I see I left out an "easily"
15:25:14 <Mushy-pea> Sure binary can be hand fixed, just takes a bit of patience :)
15:25:19 <ptolomy> I made a brief attempt last night at creating a ADT/Data.Dynamic-based message-passing concurrency library for haskell. I didn't finish, because I got lazy and I'm not all that good, but has anyone else made such a thing? It seems like if anyone comfortable with haskell took a swing, they could have it in a couple hours..
15:25:44 <sorear> Mushy-pea: this is Haskell.  We should let people be lazy.
15:25:52 <sorear> @quote lazy
15:25:52 <lambdabot> Pseudonym says: Lazy evalution is really, really trippy.
15:25:54 <Igloo> shapr: If so, you should use show . map show or something, but it sounds like you just want a datastructure to contain all the bits
15:25:56 <ddarius> ptolomy: Channels does most of the work for you.
15:26:04 <ptolomy> indeed.
15:26:05 <Igloo> shapr: But like you say, Binary is probably the way to go anyway
15:26:07 <ddarius> ptolomy: I wrote a pi calculus interpreter with them a long while back.
15:26:18 <ddarius> er EDSL actually.
15:26:26 <Mushy-pea> I agree.  Kind of defeats the object of having a compiler if you edit the binary manually.
15:26:27 <sorear> I want human readable serialization!
15:27:05 * ddarius has editted GHC output binaries manually before.
15:27:11 * sorear has too
15:27:16 <ptolomy> Mine worked by a TMVar with a map from process identifier (currently ThreadId) to a Channel and having 'spawn' forkIO and populate that.
15:27:37 <sorear> Indeed, I've editted GHC itself as a binary.
15:28:15 <chessguy> evening sorear
15:28:28 <sorear> Why is everyone else so fond of binary serialization koolaid?
15:29:07 <ddarius> Because you want to be as space efficient as possible when serializing [1..]
15:29:08 <monochrom> Why do you edit a GHC binary?  Like those computer games, to give yourself 99 lives? :)
15:29:46 <sorear> monochrom: Hint: somewhere within the original binary was the string "libreadline.so.4"
15:30:05 * sorear prefers to avoid this by compiling his own GHCs
15:30:05 <monochrom> Oh haha, that one.
15:30:26 * sorear is very irked that GHC 6.4.2 cannot be compiled with either 6.6 or HEAD
15:30:39 * sorear begrudgingly downloaded a binary
15:31:57 <Philippa> sorear: binary serialisation's important for seriously durable systems, amongst other things
15:32:22 <sorear> Philippa: that sounds backward ...
15:32:34 <ddarius> Durable as in ACID
15:32:38 <sorear> Philippa: my textfiles rarely get corrupted and are always easy to fix.
15:33:23 <Philippa> yeah, but it's not a sensible format for a heap dump
15:36:36 <monochrom> You need serialisation for persistence.  Then you want it binary to cut cost.
15:37:23 <sorear> methinks disks are cheaper than staring at hex editors...
15:37:49 <dibblego> editors should read disks better
15:38:05 <monochrom> Here is a cheap shot at both. Serialise in a format that makes the programmer's life easy. Pass it through bzip2.
15:38:31 <sorear> To a first approximation, that's what OOo does.
15:38:58 <sorear> xml+gzip
15:39:58 <ptolomy> mm.. if you're lookin for speed and want to now-and-then just publish diffs, that seems worse than straight binary serialization.
15:40:30 <ptolomy> (Then again, the binary serialized data that I work with daily is a huge pain because you rather have to trust that the libraries are doing their jobs properly)
15:40:31 <monochrom> You have a point in "disks cheaper than staring at hex".  Indeed, I carefully chose "cut cost" instead of "performance, efficiency" because "cut cost" has derogatory implications.
15:44:03 <monochrom> diffing requires designing the format to be diffable. this is orthogonal to binary or not. you can have easily diffable fat format. you can have easily diffable lean format.
15:44:21 <mwc> There's a coupla proposals for binary xml out there anyways
15:44:37 <mwc> binary container formats that allow forward upgradeability and all that
15:45:10 <mwc> Though, for my 2 cents, I agree with monochrom, text + bz2
15:45:32 <sieni> I used to have a problem. Then I decided to use XML and Java to solve it.
15:45:38 <sieni> Now I have three problems.
15:45:53 <mwc> Well, binary formats can be a pain when you add a field to an on-disk structure
15:45:59 <mwc> now you need to handle old versions
15:46:15 <monochrom> You could use XML and Haskell to solve it. You would have four problems.  The fourth is learning arrows. :)
15:46:25 <dibblego> binary XML == ASN.1
15:46:31 <ddarius> mwc: That's independent of binary v. text
15:46:37 <monochrom> w00t ASN.1 :)
15:46:44 * ptolomy is unreasonably focused on the particular case of 'serialize to messages of N or more predefined field types as fast as possible and with as little memory overhead as possible'..
15:47:03 <mwc> ddarius, indeed, but text files make it trivial to keep backward compatibility
15:47:08 <sorear> ptolomy: raise(SIGABRT)
15:47:24 <sorear> ptolomy: that will solve your whole problem in 1 system call
15:47:34 <sorear> ptolomy: and probably max out your disk bw...
15:47:40 <monochrom> I think the compatibility problem boils down to fixed-length records vs variable-length records.
15:47:42 <ddarius> mwc: No more than binary files, though I will agree that textual formats tend to be better about it.
15:48:03 <mwc> ddarius, indeed, binary files require you to add bookkeeping infrastructure to the file
15:48:16 <sorear> ptolomy: getting a copy of the deserialization utility (last I heard it was called 'undump') may be trickier.
15:48:27 <monochrom> Most people design text formats to be variable-length, but there are exceptions.  Most people design binary formats to be fixed-length, but there are exceptions.
15:48:29 <ddarius> mwc: ? And text files don't?
15:48:46 <ptolomy> sorear: I don't think I'm quite clever enough to see what you're getting at.
15:49:01 <mwc> ddarius, well, text files tend to have that infrastructure in place just so that humans can parse them
15:49:16 <dibblego> how would you serialize a list with a fixed-length record format?
15:49:18 <mwc> tags in xml, variable = statements in cnfigure files
15:49:59 <mwc> sorear, we really should have a SIGHCF instruction eh?
15:49:59 <sorear> ptolomy: core dumping is a very fast way to transfer a heap to disk
15:50:07 <mwc> sorear, mmap?
15:50:09 <ddarius> mwc: Okay.  I agree with that and did already.  But this is not anything inherent.  It's no trouble to make an extensible binary format.
15:50:20 <sorear> mwc: why do you want SIGHCF?
15:50:26 <monochrom> Many programmers have relied on the newline character for several centuries.
15:50:30 <sorear> mwc: I just want to dump core!
15:50:48 <sieni> monochrom: several millenia, at least!!!1!
15:50:51 <ddarius> sorear: Except you usually don't want the entire heap.
15:50:57 <chessguy> wow. a few weeks ago, i had no idea how to fix this annoying problem i was having. i just pulled it up again and fixed it in about 2 minutes. i must be learning something :)
15:51:15 <mwc> ddarius, nope, but what I was getting at was that text files have a structured nature already. So you tend to get "advanced" features for free
15:51:17 <sieni> chessguy: that often happens
15:51:21 <ptolomy> sorear: Ah. See, I meant to express that I'm biased in that I'm not considering to disk so much as sending messages between processes on the network.
15:51:57 <mwc> sorear, SIGHCF is for when the user makes really poor choices. It's really for their protection
15:52:02 <ddarius> sieni: There haven't been programmers for several millenia.
15:52:44 <ddarius> chessguy: Remember that the when you hit the next "hard" concept.
15:52:45 <mwc> of course, a HCF syscall would probably be more useful
15:52:48 <monochrom> We are just exaggerating.
15:52:57 <chessguy> ddarius: good advice
15:53:15 <sieni> ddarius: Oh, sorry. I didn't notice that there have been programmers for several centuries either.
15:53:48 <sorear> Even Lovelace was only ~150 ya.
15:53:58 <monochrom> I bought a book and read it for two months and couldn't understand anything.  After several years, I read it again and in a month I understood it more than my supervisor did. :)
15:54:16 <sieni> mwc: why not use something simpler, like s-expressions, instead of xml?
15:54:22 <monochrom> Of course, in between, I spent half a year learning very basic lattice theory. :)
15:54:43 * ddarius read TTT a long time ago.  I should be able to understand almost all of it now.
15:54:48 <mwc> sieni, I assume because xml had more structure to it, you can validate it against a DTD or whatever they're using these days
15:54:55 <mwc> I don't advocate xml for anything mind you
15:55:03 <sorear> sieni: s-expressions are tainted with the stigma of lispers
15:55:26 <mwc> it's a particularly nice example of all the bad traits of binary formats bolted on to a text format
15:55:48 <ddarius> So use square brackets and call them... uh, AML and you should be good.
15:55:55 <procyon112> XML *is* lisp... reinvented... poorly... again.
15:56:10 <sorear> no, XML is s-expressions reinvented poorly.
15:56:21 <sorear> *XSLT* is lisp.
15:56:28 <sorear> @quote XSLT
15:56:29 <lambdabot> darius says: I imagine XSLT programmers say "It's a one pager" the way most other programmers say "It's a one liner".
15:56:53 <sorear> procyon112: == Procyon_?
15:57:01 <chessguy> procyon112: glasgow extensions no longer needed
15:57:45 <sieni> well, there are sxml and sxslt for handling xml and xslt stuff with s-expressions...
15:57:55 * sorear reboots emacs (must try yi! someday)
15:58:44 <mwc> lol, only with emacs would you "reboot" a router ;)
15:58:56 <mwc> s/router/editor
15:59:12 <mwc> I think as I get older I'm going to develop total aphasia
15:59:29 <chessguy> ?all-dict aphasia
15:59:32 <lambdabot> *** "Aphasia" gcide "The Collaborative International Dictionary of English v.0.48"
15:59:32 <lambdabot> Aphasia \A*pha"si*a\, Aphasy \Aph"a*sy\, n. [NL. aphasia, Gr. ?,
15:59:32 <lambdabot>    fr. ? not spoken; 'a priv. + ? to speak: cf. F. aphasie.]
15:59:32 <lambdabot>    (Med.)
15:59:32 <lambdabot>    Loss of the power of speech, or of the appropriate use of
15:59:33 <lambdabot> [19 @more lines]
15:59:40 <chessguy> @more
15:59:41 <lambdabot>    words, the vocal organs remaining intact, and the
15:59:41 <lambdabot>    intelligence being preserved. It is dependent on injury or
15:59:41 <lambdabot>    disease of the brain.
15:59:42 <lambdabot>    [1913 Webster]
15:59:44 <lambdabot>  
15:59:45 <dmead> @less
15:59:46 <lambdabot> [14 @more lines]
15:59:47 * sorear <3 words
15:59:47 <lambdabot> Maybe you meant: let list
15:59:50 <dmead> hmm
15:59:55 <dmead> words rock my face
16:00:01 <ddarius> mwc: I had a cool experience with that once.
16:00:21 * QtPlatypus is coming more and more to think that XML rather then being a solution, its infact just anouther problem.
16:00:51 <mwc> chessguy, there's a form of aphasia where you try to say one word but a totally different one comes out
16:01:07 <chessguy> oh i do that all the time
16:01:17 <monochrom> Every solution is a problem.
16:01:28 <chessguy> i don't need any brain disease to be dumb :)
16:01:31 <mwc> often people with it can understand speech or read perfectly, but they can't speak a sentence.
16:01:36 <mwc> ddarius, what happened?
16:01:45 * sorear has developed a persistant memory error where XML is classified as a variant of SML
16:01:56 <monochrom> haha
16:01:59 <dmead> nice..
16:02:03 <QtPlatypus> expn SML
16:02:11 <sorear> Standard ML
16:02:16 <mwc> speaking of which, anybody seen SucessorML?
16:02:28 <dmead> doesn't the ML stand for miranda's language?
16:02:35 <mwc> http://successor-ml.org/
16:02:39 <dmead> or is it meta language
16:02:39 <lambdabot> Title: Main Page - Successor ML
16:02:40 <mwc> dmead, MetaLanguage
16:02:40 <sorear> it was written by Milner
16:02:48 <monochrom> My Language
16:02:52 <dmead> but there is something called miranda right?
16:02:56 <sorear> yea!
16:02:59 <mwc> it was originally designed for a computer proof system apparently
16:03:03 <QtPlatypus> Yes.
16:03:06 <dmead> and didn't the inventor name it after his daughter?
16:03:07 <sorear> miranda is (fst approx) pred haskell
16:03:09 <sieni> mlton is cool
16:03:11 <sieni> <3
16:03:22 <mwc> anyways, abbout SuccessorML, they're getting close to having a language as useful as Haskell
16:03:23 <sorear> David Turner
16:03:27 <dmead> i like my language :P
16:03:37 <sorear> mwc: does it have hackage yet? :)
16:03:38 <sieni> but good night everybody, and good luck
16:03:40 <mwc> I just don't understand how those guys get by without type classes
16:03:43 <dmead> mwc: is it super strict typing?
16:03:45 <monochrom> It's very Microsoft.  My Computer.  My Network.  My Language.
16:03:47 <sorear> 2 /. 3
16:04:04 <dmead> monochrom: they dropped that metaphor
16:04:07 <sieni> mwc: mlton is pretty useful already, they should just have a decent native thread support
16:04:07 <ddarius> mwc: It was in a horrible high school biology class.  We were watching a movie.  I woke up and I could hear the video clearly, I could recognize the words as English but for the life of me they made no sense whatsoever.  Even trying I couldn't get any meaning attached to them.  So I went back to sleep.
16:04:29 <dmead> yes
16:04:33 <dmead> thats called being half asleep
16:04:34 <monochrom> Oh!  So now they're Microsoft Computer, Microsoft Network, Microsoft Language? :)
16:04:35 <mwc> sieni, the ad-hoc overloading slays me
16:04:40 <dmead> hehe
16:04:41 <dmead> nah
16:04:42 <dmead> just
16:04:43 <dmead> computer
16:04:44 <dmead> network
16:04:45 <dmead> etc
16:04:49 <sorear> wow, 1984 is soo getting to me
16:05:00 <dmead> any battlestar nerds here?
16:05:11 <mwc> dmead, Tigh is not a cylon. It's impossible
16:05:12 <sieni> monochrom: microsoft computer as in mc hammer?
16:05:14 <sorear> I was just about to ask if these were C vocabulary words ddarius couldn't understand
16:05:22 <dmead> mwc: thats what i said
16:05:25 <monochrom> > let 2+2=5 in "freedom is the freedom in saying 2+2=" ++ show (2+2)
16:05:27 <lambdabot>  "freedom is the freedom in saying 2+2=5"
16:05:33 <dmead> mwc: he predates the human models ;o
16:05:41 <ddarius> sorear: The year I was born.  sorear was, what, -5 years old?
16:05:51 <sorear> about that
16:06:00 <mwc> exactly, he's too damn old. It would only make sense if they killed him and replaced him with a clone. but the cylons are not clones of particular people to begin with
16:06:19 <dmead> mwc: we don't really know that
16:06:29 <sieni> mwc: as in what? arithmetic operations?
16:06:31 <dmead> mwc: they could be replacements, but they haven't gone into it
16:06:34 <mwc> dmead, Moore actually said it at some point, it's not canon
16:06:38 <dmead> ahh
16:06:39 <ddarius> dmead: Apparently I can do all kinds of things and hold complete conversations while being completely asleep.
16:06:43 <HairyDude> (.text+0x4cf): undefined reference to `unixzm1zi0_SystemziPosixziProcess_executeFile_closure'
16:06:45 <Shimei> Noooo. No BSG spoilers!
16:06:48 <HairyDude> which package do I want?
16:06:51 <sorear> HairyDude: unix
16:06:51 * Shimei flails about
16:06:51 <TomMD> I didn't know you could take legit syntax and define it as something else (e.g. 2+2)... wow
16:06:54 <ddarius> ekidd: You add or otherwise work on your CT intro anymore?
16:06:58 <sieni> mwc: well, ml has functors if you want something similar to type classes
16:07:00 <mwc> sieni, yeah
16:07:02 <sorear> HairyDude: or --make and have GHC tell you!
16:07:03 <HairyDude> not posix? odd name
16:07:11 <HairyDude> oh, forgot abot that
16:07:13 <dibblego> TomMD, of course you can redefine functions
16:07:39 <dibblego> > let map _ _ = "foo" in map (+2) [1..10]
16:07:39 <sorear> HairyDude: ALWAYS use --make or --interactive.  the default mode should only be used if you know why you are doing it.  Sigh.
16:07:40 <lambdabot>  "foo"
16:07:47 <dmead> i keep watching the last 30 seconds of the finale
16:07:48 <ekidd> ddarius: I'm working on it still, but it's going to take a while--I'm trying to collect good examples.
16:07:52 <HairyDude> :)
16:07:53 <dmead> reminds me of contact
16:08:18 <HairyDude> sorear++
16:08:34 <mwc> type classes seem to complement functors. A functor feels much heavier and is an architectural unit. A type class feels more appropriate for dealing with heterogenous types satisfying a given interface simulatenously
16:08:35 <dmead> HairyDude: rm *.o
16:08:37 <TomMD> lol, of coarse, it is just a pattern match and a redefinition of '+'... I need to think more clearly... time to sweat off some brain impeding liquids.
16:08:48 <mwc> ddarius, I have the ability to answer wake up calls in my sleep
16:09:09 <dmead> i can get up, turn off the alarm and walk back to bed
16:09:12 <dmead> and not record any of it
16:09:14 <dmead> apparently
16:09:24 <dmwit> These are all bad skills to have.
16:09:26 <dibblego> that's just cause you're a forgetful bugger
16:09:33 <stepcut> dmead: i missed a few final exams that way :)
16:09:38 <dmead> :)
16:10:00 <Mushy-pea> OK, I want to write a function that takes an integer x as an argument and divides that by every integer in the list [2..x / 2], to produce a list of factors.  Can this be done with just map, given a function and the list.  I'm strugling to see how.
16:10:10 <sieni> gotta go to sleep
16:10:26 * sorear wants to build a pressurized water alarm system
16:10:29 <ddarius> Apparently, I'm an ass when I'm asleep.  This is why no one seems to notice that I'm asleep when this happens.
16:10:35 <dmead> > map (/2) [1..10]
16:10:36 <lambdabot>  [0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0]
16:10:53 <sorear> Mushy-pea: no
16:10:56 <dmead> > map (/div 2) [1..10]
16:10:57 <lambdabot>   add an instance declaration for (Enum (t -> t))
16:10:58 <dmead> err
16:11:01 <dmead> > map (/div) [1..10]
16:11:02 <lambdabot>   add an instance declaration for (Enum (a -> a -> a))
16:11:05 <dmead> etclekrjlgakrea
16:11:08 <sorear> Mushy-pea: map always makes lists the same length as the imput
16:11:10 <dmead> > map (div 2) [1..10]
16:11:12 <lambdabot>  [2,1,0,0,0,0,0,0,0,0]
16:11:15 <sorear> Mushy-pea: you want 'filter'
16:11:15 * ddarius wants to build a mechanical/hydraulic/pneumatic/etc. computer.
16:11:21 <TomMD> What is the '+' primitive again?
16:11:26 <mwc> I've only missed one exam in my life, that was my high school calculus final. Luckily I had a 100 in the course and even though I showed up 3 hours late, my teacher offered to let me write it that afternoon for 3 hours. It took me 30 minutes :)
16:11:27 <int-e> > map (`div` 2) [1..10] -- dmead, this?
16:11:29 <lambdabot>  [0,1,1,2,2,3,3,4,4,5]
16:11:34 <dibblego> ?type (+)
16:11:37 <lambdabot> forall a. (Num a) => a -> a -> a
16:11:37 <mwc> anyways, /me goes to study for final tomorrow
16:11:40 <dmwit> > [x / 2 | x <- [1..10]]
16:11:41 <lambdabot>  [0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0]
16:11:42 <TomMD> ?src (+)
16:11:43 <lambdabot> Source not found. I can't hear you -- I'm using the scrambler.
16:11:47 <dmead> > map ((div) 2) [1..10]
16:11:48 <lambdabot>  [2,1,0,0,0,0,0,0,0,0]
16:12:17 <dmwit> > liftM (div 2) >>= [1..10]
16:12:17 <lambdabot>  Couldn't match expected type `m t -> m t -> b'
16:12:18 <dmead> d do doo
16:12:32 <dmead> i don't think you need the >>=
16:12:39 <dmwit> > liftM (/ 2) [1..10]
16:12:40 <lambdabot>  [0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0]
16:13:57 <dmwit> Haha, "With a little practice, writing can be an intimidating and impenetrable fog!"
16:14:08 <Mushy-pea> OK.  I can see there's a few possibilities.
16:14:09 <dmead> nice
16:14:40 <dmead> Mushy-pea: using map is the simplest example
16:14:57 <dmead> ?src map
16:14:57 <lambdabot> map _ []     = []
16:14:58 <lambdabot> map f (x:xs) = f x : map f xs
16:15:04 <HairyDude> > map (flip div 2) [1..10]
16:15:05 <sorear> TomMD: it adds two numbers
16:15:05 <lambdabot>  [0,1,1,2,2,3,3,4,4,5]
16:15:07 <sorear> > 2 + 2
16:15:08 <lambdabot>  4
16:15:15 <ddarius> Hmm, interesting story: My girlfriend has had a conversation in her sleep with another girl who was also sleeping and while sleeping with her one night she kissed me in her sleep, and not no peck neither.  Between the both of us, it makes you wonder what we might've done/do when we're both asleep...
16:15:18 <vincenz> @poll
16:15:18 <lambdabot> Maybe you meant: poll-add poll-close poll-list poll-remove poll-result poll-show pl spell tell
16:15:36 <dibblego> ddarius, stop dreaming
16:15:44 <dmead> @poll-add
16:15:44 <lambdabot> Missing argument. Check @help <vote-cmd> for info.
16:15:46 <vincenz> ddarius: this is not #fantasyRus
16:15:50 <vincenz> @poll-list
16:15:51 <lambdabot> ["EulerSolutionsOnWiki","EvilPoll","OperatingSystem","RestrictToOneVote","Written_a_compiler_or_interpreter?","cheeky-off","jabberName"]
16:15:51 <dmead> @help poll-add
16:15:52 <lambdabot> poll-add <name>             Adds a new poll, with no candidates
16:16:09 <vincenz> @vote-list EulerSolutionsOnWiki
16:16:10 <lambdabot> Unknown command, try @list
16:16:12 <dmead> @poll-add is the tigh a cylon?
16:16:12 <lambdabot> usage: @poll-add <poll>   with "ThisTopic" style names
16:16:14 <vincenz> @help poll
16:16:15 <lambdabot> poll provides: poll-list poll-show poll-add choice-add vote poll-result poll-close poll-remove
16:16:25 <vincenz> @poll-result EulerSolutionsOnWiki
16:16:26 <lambdabot> Poll results for EulerSolutionsOnWiki (Open): Yes=1, No=4
16:16:36 <dmead> @poll-add tigh=cylon?
16:16:36 <lambdabot> Added new poll: "tigh=cylon?"
16:17:02 <dmwit> InstanceTightCylon?
16:17:11 <dmwit> s/ight/igh/
16:17:34 <ddarius> Is there any way to get rid of a poll?
16:17:44 <ddarius> nm
16:18:05 <ddarius> Is there any reason we are not getting rid of at least some old polls?
16:18:13 <stepcut> apparently, none of the core xmonad developers use emacs, because they bound all the window manager keys to useful emacs key bindings :(
16:18:13 <vincenz> poll-remove
16:18:23 <vincenz> emacs = teh suc
16:18:35 <thedward> I can't seem to make xmonad go
16:18:41 <dons> stepcut: vim Config.hs and rebuild ;-)
16:18:42 <lambdabot> dons: You have 3 new messages. '/msg lambdabot @messages' to read them.
16:18:51 <thedward> I've got it compiled and running, but the keyboard doesn't work properly
16:18:52 <dmwit> stepcut: I also do not use emacs, but I did do a s/Mod1Mask/Mod4Mask/ on Config.hs
16:18:55 <stepcut> vincenz: perhaps, but I have to use something to read email and chat on irc
16:19:07 <vincenz> stepcut: it's called an email client and an irc client
16:19:08 <stepcut> dmwit: which one is Mod4? the windows key ?
16:19:09 <dons> stepcut: the keybindings are configurable. edit Config.hs?
16:19:13 <dmwit> stepcut: Yeah.
16:19:20 <dmwit> thedward: What's the symptoms?
16:19:32 <stepcut> dons: yes, I have been changing them, I just missed a few ;)
16:19:41 <dons> kolmodin: pong?
16:19:43 <thedward> dmwit: well, nothing was happening when I hit the key combinations (except for keyrelease events on stdout)
16:19:46 <Mushy-pea> ddarius: I had a dream recently where I said to this woman "....but, you can only do this when you're asleep".  To which she replied "You are asleep".  Then she smiled and retreated into the distance :)
16:19:54 * dons is glad to see so many xmonad users :-)
16:20:02 <dmwit> thedward: Did you stop the old window manager?
16:20:09 <dmwit> It may be intercepting your keys.
16:20:13 <vincenz> dons: comments on my tell?
16:20:36 <stepcut> dons: I was going to add a feature (per workspace layout) but then I did a darcs pull and someone already had ;)
16:20:43 <dons> vincenz: i've heard that they don't like solutions going public. but i'm all for free source.
16:20:52 <dons> my opinion isn't really relevant here though, vincenz .
16:20:55 <thedward> dmwit: Well, I tried running it in Xephyr first, but thought that might be the problem, so I ran it as the only program in my xsession
16:21:02 <dons> stepcut: yeah, that's rather nice too.
16:21:18 <dmwit> thedward: Okay, no other window manager then.  Humm...
16:21:44 * Mushy-pea goes to bed, hoping for more weird dreams :)
16:21:53 <thedward> dmwit: I put some debugging in, and I see that for the key event I am getting value like: (154618822665,65293), instead of (9,65293)
16:22:00 <vincenz> dons: how so?
16:22:10 <dmwit> thedward: Whoa.  Are you on a 64-bit machine?
16:22:19 <Pseudonym> My Haskell dreams are usually pretty weird.
16:22:20 <stepcut> dons: are there any plans to make xmonad pay more attention to size hints (or whatever they are called?). It has a tendency to make certain dialog boxes unreasonably large...
16:22:27 <vincenz> Pseudonym: join `ap`?
16:22:44 <dons> stepcut: i'm not aware of any discussion we've had on this. it would be reasonable though.
16:22:50 <dmwit> stepcut: Oooo, I hope so.  dwm handles this by having a "floating" layer that all dialogs get shunted to.
16:23:01 <vincenz> dons: I agree with you, it's a shame as it took me quite some vimscripting to get the wikisyntax, but it seems the majority is against it, which i don't understand as they don't HAVE to look at the page
16:23:04 <dons> yeah. we do plan to implement the floating layer.
16:23:08 <thedward> dmwit: yeah. I was thinking that might be the issue, but I'm not sure where the problem is in the code.
16:23:14 <TSC> thedward: That's the same problem I have; you're on a 64-bit machine
16:23:16 <vincenz> :/
16:23:24 <TSC> The problem is in the X11 bindings
16:23:33 <thedward> Oi.
16:23:38 <dons> urgh.
16:23:43 <stepcut> if I try to search for text on a web page, the 'no matches found [Ok]' dialog box takes up half the screen ;)
16:23:44 <dons> damn X11!
16:24:08 <thedward> wait, is it X11's fault, or just the fault of the Haskell X11 bindings?
16:24:14 <dons> thedward: yes, the (cough) legacy X11 bindings are rife with forign import Int instead of CInt
16:24:14 <sorear> How many #haskellers DON'T use xmonad?
16:24:17 <dons> hence not 64 bit clean.
16:24:20 <TSC> Haskell X11 bindings
16:24:30 <dons> thedward: the X11 bindings are not CInt/Int clean.
16:24:37 * vincenz uses gnom
16:24:38 <vincenz> +e
16:24:45 <thedward> I guess it would be naive to think s/Int/CInt/ would solve the problems?
16:24:52 <ddarius> Pseudonym: I've not had a Haskell dream.  And it's been a long time since the last programming related one.
16:24:55 <sorear> vincenz: GNOME is not a window manager
16:25:09 <vincenz> sorear: whatever gnome uses then
16:25:13 <kelan> i use sawfish
16:25:13 <sorear> vincenz: last I used it it defaulted to using Sawfish, but could use any
16:25:16 <dons> thedward: that would be enough, yes.
16:25:20 <ddarius> sorear: I don't run X so...
16:25:26 <dons> and some fromIntegrals.
16:25:29 <dmwit> sorear: It uses metacity these days.
16:25:32 <sorear> ddarius: I'm not alone?!
16:25:34 <TSC> thedward: I got some buttons to work by changing a few definitions in the bindings, but other things still didn't work
16:25:37 <thedward> dons: I mean, just brute forcing it... that wouldn't break anything?
16:25:52 <TSC> It would lose windows sometimes, for example
16:26:02 <dons> you have to go into the X11 package, replace all foreign imports that use Int with CInt
16:26:11 <dons> and then fromIntegral any args to those functions. that will fix the problem
16:26:20 <dons> you coudl be more specialised and do it just for the stuff xmonad needs ;-)
16:26:26 <ddarius> sorear: I'm on Windows, however I do prefer terminals.  I would give xmonad a try if I was running Linux.
16:26:35 * sorear has found a way to unify Int with CInt
16:26:42 <ddarius> Running X on windows is not worthwhile.
16:26:53 <vincenz> sorear: what does gnomoe do then
16:27:17 <sorear> GHC (IMO erroneously, but SPJ could still convince me I'm wrong) doesn't accept my hack :(
16:27:46 <Igloo> sorear: What is it?
16:27:56 <dons> sounds dodgy...
16:28:15 <sorear> Igloo: http://haskell.org/pipermail/glasgow-haskell-users/2007-March/012216.html
16:28:18 <lambdabot> Title: GADT + Newtype deriving = Erroneous errors, http://tinyurl.com/262jpe
16:28:18 <kc5tja> ddarius: I can see making an XLIB.DLL that just thunks to the Win32 API as a compatibility module.  That ought to be productive, yet offer minimal performance hit.
16:31:00 <Igloo> sorear: Apart from anything else, I don't see how it would unify Int and CInt from teh FFI's PoV. They're types with different sizes.
16:31:10 <Igloo> Maybe I'm missing your point
16:31:28 <sorear> Igloo: well, if they are the same I can unify them.
16:31:30 <ddarius> kc5tja: I want to use a X-based window manager to manage Windows applications.
16:31:46 <sorear> Igloo: I suppose that's kinda pointless on reflection.
16:32:05 <chessguy> procyon112: ping
16:32:20 <sorear> error of the day: GADT declaration not (yet) handled by Template Haskell
16:32:30 <kc5tja> ddarius: Ahh.  Yeah, wrapping win32 windows into XIDs isn't going to be easy.  :)  If even possible at all.
16:32:36 <chessguy> @quote error
16:32:37 <lambdabot> ghc says: Kind error
16:32:39 <chessguy> @quote error
16:32:39 <lambdabot> ghc says: internal error: Invalid object in processHeapClosureForDead
16:32:43 <chessguy> @quote error
16:32:43 <lambdabot> ghc says: parse error on input
16:32:47 <chessguy> @quote error.day
16:32:47 <lambdabot> No quotes match. My mind is going. I can feel it.
16:32:56 <sorear> @quote GADT.declara
16:32:56 <lambdabot> No quotes match. That's something I cannot allow to happen.
16:33:00 <chessguy> @quote error.message
16:33:00 <lambdabot> SamB says: Because sliced bread gives horribly uninformative error messages?
16:33:05 <chessguy> @quote error.message
16:33:06 <lambdabot> shapr says: Today's nifty error message: *Main> thread blotttchhhkrrreeeedaaa dddi   nbbbdllleooofcccikkkneeeidddt   eiiilnnnydddeeefffiiinnniiittteeelllyyy
16:33:08 <chessguy> there we go
16:33:40 <ddarius> kc5tja: That's why I need to figure out how to write a wm in Win32 API.
16:33:45 <dmwit> ?quote thread
16:33:45 <lambdabot> shapr says: Today's nifty error message: *Main> thread blotttchhhkrrreeeedaaa dddi   nbbbdllleooofcccikkkneeeidddt   eiiilnnnydddeeefffiiinnniiittteeelllyyy
16:34:27 <kc5tja> ddarius: Sounds like you'll become the master of COM before long; I believe much of the "theming" capabilities of modern GDI is expressed in terms of COM objects.
16:34:35 * kc5tja likes COM, but admits that it can be cumbersome at times.
16:35:00 * kc5tja even wrote an open source, in-process-only clone of COM called GCOM for Linux once.  It was pretty slick.  :)
16:35:15 <ddarius> I don't think it's that involved to do what I'd like to do.  I would want an ion/xmonad/dwm/etc. like wm.
16:35:53 <ddarius> It's just a bit hard to find the relevant info.
16:36:24 <shapr> shazam!
16:36:36 <shapr> chessguy: We got some other nifty messages today...
16:36:45 <chessguy> shapr: do share
16:36:47 <ddarius> Actually, I might have enough of it.  I just need to get off my rear and wrap some Win32 API functions that the heirarchical libraries doesn't.
16:36:55 <shapr> chessguy: > LoadiCnHgE CsKtPaOtIeN Ta nsdtart events o>k  E-v esntta r4t6i nogf  ACphpe
16:37:04 <dmwit> ddarius: Have you seen http://en.wikipedia.org/wiki/Desktop_shell_replacement ?
16:37:04 <lambdabot> Title: Desktop shell replacement - Wikipedia, the free encyclopedia
16:37:31 <chessguy> nice
16:37:52 <ddarius> dmwit: No, though I may have covered similar ground.  I've looked mostly at "virtual desktop managers".
16:40:05 <jcreigh> hello #haskell
16:41:19 <dmead> hi
16:43:17 <sorear> shapr: ooh.  Is that in Swedish?
16:43:19 <sorear> :p
16:43:19 <emu> > unwords ["hello","haskell"]
16:43:20 <lambdabot>  "hello haskell"
16:44:30 <chessguy> can someone with bot ops have LB join #ai please? i'm being asked to demo haskell syntax :)
16:44:44 <sorear> @join #ai
16:46:24 <Pseudonym> Dammit.
16:46:59 <Pseudonym> Sorry.
16:47:01 <Pseudonym> I couldn't resist.
16:50:13 <kc5tja> For those who are curious about seemingly bizarre pastes on hpaste.org containing a bunch of Xorg.conf files, please disregard them.  pastebin.com is down for some reason.
16:50:44 <sorear> kc5tja: Shall I delete them?
16:50:46 <jcreigh> rafb.net/paste if you want somewhere that doesn't announce anything.
16:50:57 <dons> sorear: they can sty there for now, surely?
16:51:11 <ndm> anyone want to put up a CGI:IRC gateway for #haskell?
16:51:11 <lambdabot> ndm: You have 1 new message. '/msg lambdabot @messages' to read it.
16:51:17 <hpaste>  aphroguy pasted "xorg.conf" at http://hpaste.org/1163
16:51:44 <jcreigh> ndm: why?
16:51:57 <monochrom> because!
16:52:09 <ndm> jcreigh, because i can't connect directly, and using EPIC is not particlarly fun, and ircatwork.com is down tonight
16:52:10 <jcreigh> because...?
16:53:13 <jcreigh> hmm...this is due to fascist sysadmins?
16:53:20 <kc5tja> sorear: Not yet, please.  I need to help some folks with their X configuration problems.
16:53:25 <Igloo> ndm: irssi is a shinier than epic, FWIW
16:53:27 <kc5tja> Do I have the ability to delete them when I'm done?
16:53:30 <Igloo> (if it's available)
16:53:40 <ndm> jcreigh, university campus
16:53:48 <ndm> igloo, be right back (perhaps!)
16:53:58 <sorear> kc5tja: no, only the hpaste admins
16:54:03 <sorear> (me and glguy)
16:54:26 <dons> me too, btw.
16:54:33 <kc5tja> sorear: OK, I'll let you know then.
16:55:12 <ndm> Igloo: success?
16:55:26 <ndm> it does seem more pretty, at least
16:55:45 <jcreigh> heh
16:56:33 <ndm> Igloo: did you see the FilePath release? let me know if its what you need
16:56:59 <Igloo> ndm: Yeah, ta. It'll probably be tomorrow before I take a look
16:57:15 <Igloo> (tomorrow Igloo-time)
16:57:43 <ndm> Igloo: thats fine, as long as you spot anything bad in time
16:57:56 <ndm> anyone know how I find out about CR-terms, the ones at the start of every paper in cmop sci
16:58:07 <ndm> specifically which terms/keywords etc i shove on my paper!
16:58:18 <dmead> cr-terms?
16:58:18 <dmead> o0
16:58:22 <dmead> @google cr-terms
16:58:27 <lambdabot> http://linkinghub.elsevier.com/retrieve/pii/S0022231303001595
16:58:27 <lambdabot> Title: ScienceDirect - Journal of Luminescence : Crystal-field splitting of the Cr4+ te ...
16:58:29 <ndm> dmead, i think they are computer review terms
16:58:37 <dmead> ah
16:58:40 <ndm> but googling has given my little success
16:58:58 <dmead> yea im retarded at writting technical papers
16:59:07 <dmead> 3 years of a philosophy major will do that
16:59:29 <ndm> i have the paper, just stealing CR terms off the closest paper I can find is likely to go wrong
16:59:48 <ndm> since i suspect they will haev done the same thing, and we'll be chinese wispering away from the thing its meant to be
17:02:03 <stepcut> hrm, xmonad was not so happy about using dmenu to launch hmp3
17:04:00 <rashakil> matlab is passive agressive towards xmonad: replies to user actions, but its window is painted gray.
17:05:38 <kc5tja> sorear: OK, you can delete http://hpaste.org/1163 now.  Thanks!
17:06:00 * ddarius can't reach half the internet for some reason.
17:06:35 <thedward> woo.
17:06:41 <thedward> got keyboard working in xmonad
17:06:47 <thedward> who knows what else I have broken though. :)
17:06:58 <jcreigh> thedward: your keyboard wasn't working?
17:07:19 <thedward> jcreigh: yeah, the X11 bindings aren't 64-bit friendly
17:07:25 <jcreigh> oh, yes.
17:07:30 <sorear> kc5tja: 1163 deleted
17:07:43 <thedward> but, with a few strategic changes I got the keyboard working with xmonad :)
17:07:50 <ndm> @karma+ sorear -- derive patches
17:07:51 <thedward> changes to the X11 bindings, that is
17:07:51 <lambdabot> sorear's karma raised to 27.
17:08:03 <jcreigh> "aren't friendly" that's a nice way of saying they're horribly broken. :)
17:08:18 <thedward> well. yes.
17:08:37 <stepcut> ddarius: I think ubuntu released a new beta, the tubes are probably full
17:08:50 <thedward> though, the particular things I tweaked had been depending on hsc2hs to exhibit proper behaviour
17:09:00 <kc5tja> sorear: Thanks for the patience.  Not sure why, but pastebin.com was experiencing SQL errors.
17:09:23 <ddarius> It's because it wasn't written in Haskell!
17:09:37 <kc5tja> Hahaha :)
17:09:43 <stepcut> hpaste will never experience SQL errors
17:10:07 <kc5tja> Does it even use SQL?
17:10:11 <kc5tja> SHOULD it even use SQL?
17:10:19 <kc5tja> I think these kinds of sites are pretty simple for SQL.
17:10:33 <sorear> kc5tja: it uses a IntMap
17:10:44 <stepcut> kc5tja: no SQL ;)
17:10:57 <thedward> does 'unsigned long' in C vary by architecture?
17:10:59 <sorear> kc5tja: and Read/Show for persistance :)
17:11:03 <sorear> thedward: definitely
17:11:33 <sorear> thedward: it must be at least 64 bits, but beyond that, implementation defined behavor awaits
17:11:38 <sorear> s/64/32
17:11:41 <kc5tja> thedward: It can, yes.  It's more accurate to say that it varies by compiler.
17:11:44 <procyon112> sorear: yes, procyon112 = procyon/Procyon_.  Somone else owned Procyon
17:12:04 <procyon112> chessguy: cool about -fglasgow-ext not neede!
17:12:04 <kc5tja> On a 64-bit architecture, unsigned long is "supposed" to be 64 bits wide, but not all compilers use this definition.  Some reserve long long for that purpose.
17:12:31 <sorear> kc5tja: If you fix compiler = "gcc", unsigned long is still variable length.
17:12:42 <kc5tja> sorear: ANY compiler.
17:12:48 <chessguy> procyon112: i have a partial solution to the configuration record, but i don't like it very much
17:12:53 <kc5tja> The size of a type is always compiler specific in C.
17:13:19 <kc5tja> The only guarantee you have is sizeof(long) >= sizeof(int) >= sizeof(short) >= sizeof(char).
17:13:30 <kc5tja> Everything else is compiler dependent.
17:13:34 <sorear> sizeof(long) * CHAR_BIT >= 32
17:13:39 <sorear> that's guaranteed too
17:13:40 <procyon112> vc++ has unsigned long=32 bits on 64 bit platforms.  Too much MS code would break if you changed the size of int or long.
17:13:56 <kc5tja> procyon112: Ditto for open source tools, apparently.
17:13:58 <sorear> vc--
17:14:22 <Pseudonym> There are also some guarantees about floating point sizes.
17:14:28 <sorear> Visual C doesn't need any more karma :)
17:14:29 <Pseudonym> Like MANTISSA_DIGITS.
17:14:33 <procyon112> hehe
17:14:38 <chessguy> ?vera VC
17:14:40 <lambdabot> *** "vc" vera "Virtual Entity of Relevant Acronyms (Version 1.9, June 2002)"
17:14:40 <lambdabot> VC
17:14:40 <lambdabot>      Virtual Channel / Circuit (ATM)
17:14:40 <lambdabot>  
17:14:40 <lambdabot> *** "vc" vera "Virtual Entity of Relevant Acronyms (Version 1.9, June 2002)"
17:14:42 <lambdabot> [3 @more lines]
17:14:45 <chessguy> @more
17:14:45 <lambdabot> VC
17:14:46 <lambdabot>      Virtual Console
17:14:48 <lambdabot>  
17:14:56 <reilly> The perl 6 project manager, Jesse Vincent, just said to me in a discussion about pugs and perl:  Perl's idea of a type system is "La-La-La, I don't hear you"  (it should be pointed out this was in reference to perl 5)
17:15:37 <chessguy> procyon112: i can't figure out how to create that configuration record without parameterizing it over the polymorphic type of the client problem
17:15:49 <sorear> @remember JesseVincent Perl's idea of a type system is "La-La-La, I don't hear you"
17:15:49 <lambdabot> Done.
17:15:52 <procyon112> On Visual C (++), for 64 bit platforms, for (long long i=0; i<10; i++) will probably be faster than int ;)
17:15:53 <sorear> @quote JesseVincent
17:15:53 <lambdabot> JesseVincent says: Perl's idea of a type system is "La-La-La, I don't hear you"
17:16:16 <TSC> thedward: Did you have to change XID and Mask to Word32 (instead of Word64)?
17:16:16 <obra> Aww. I'm quotable.
17:16:36 <chessguy> @quote obra
17:16:36 <lambdabot> adept says: I think I need cobrain to understand coeffects
17:16:40 <obra> (Hi, I'm Jesse)
17:16:42 <procyon112> chessguy: I'm not following you.  I'd have to see the code.
17:17:37 <hpaste>  chessguy pasted "for procyon" at http://hpaste.org/1164
17:17:41 <Pseudonym> Hi, Jesse!
17:17:56 <Pseudonym> I'm Pseudonym, and I'm an algoholic.
17:17:56 <kc5tja> procyon112: It might take the same amount of time as a 32-bit int, because to use 64-bit integers, you need an instruction prefix byte.
17:18:07 <obra> I fugure that if I'm going to badmouth Perl to haskell folks, I should be around to do it myself ;)
17:18:10 <obra> figure, even
17:18:22 <kc5tja> procyon112: It'd be interesting to benchmark it.
17:18:50 <kc5tja> obra: Most folks here seem to be Haskell coders and/or Python coders interested in Haskell, so I doubt you'll offend anyone at all.  :)
17:19:14 <obra> kc5tja: no worries. I've been attempting to pick up haskell at audreyt's urging.
17:19:30 <dons> kzm: can you mentor the bioinf soc student?
17:19:55 <chessguy> procyon112: i'd have to do data Config a = Config ...
17:20:00 <chessguy> which is really ugly
17:21:11 <procyon112> chessguy: We need to parameterize Double too though, don't we?  Not all programs return Double.
17:21:22 <chessguy> Double is the fitness
17:21:31 <Pseudonym> ddarius: Because I'm contributing less code.
17:21:38 <procyon112> Ahh ok
17:21:39 <Pseudonym> I have to make up for it somehow.
17:21:48 <chessguy> i really ought to factor that out
17:22:00 <chessguy> with at least a type Fitness = Double
17:23:29 <procyon112> agreed.  I'm not sure how multi-objective algorithms work, but I don't think they use double for fitness.
17:24:25 <thedward> TSC: well, I actually used CUInt
17:25:06 <DukeDave> chessguy, when you say 'fitness', are you talking about genetic algorithms?
17:25:36 <chessguy> DukeDave: yes, essentiall. genetic programming in this case
17:26:15 <Daveman> woo
17:26:15 <chessguy> DukeDave: procyon112 and i are working on a haskell framework for evolutionary computation
17:26:58 <DukeDave> wow, that sounds right up my street.. I may furnish you with beer in return for enlightenment in future :)
17:27:08 <DukeDave> does the project have a home yet?
17:27:37 <procyon112> chessguy: So, by parameterizing Config, what exactly are we hurting?
17:27:39 <Pseudonym> DukeDave: As much as they would appreciate beer, I suspect they'd appreciate patches more.
17:28:08 <procyon112> Beer /\ Patches would be my local optima though.
17:28:21 <shapr> whew
17:28:24 <shapr> Lots of good code written today
17:28:26 <chessguy> DukeDave: the darcs repo is at http://catenova.org/~awagner/GPLib and the description/documentation will eventually reside at http://www.haskell.org/haskellwiki/AI
17:28:29 <lambdabot> Title: Index of /~awagner/GPLib/
17:28:42 <shapr> sorear: Hah, no .. that's not Swedish!
17:29:00 <chessguy> procyon112: it's a kludge. there's no real reason to parameterize Config by the type of the problem we're working on, other than that it makes it work
17:29:18 <shapr> HAppS now supports UDP applications that work almost exactly like HTTP apps! The ServerParts and all that pretty much just work!
17:29:21 * shapr dances merrily
17:29:27 * stepcut hops
17:29:33 <sorear> shapr: figured.  but at the digram level, it did look an amazing amount like Swedish
17:29:37 <Pseudonym> I love the "pretty much" qualification.
17:29:43 <DukeDave> This is beautiful! Why was I not informed earlier :)
17:29:47 * sorear joins in the festivities!
17:30:01 <DukeDave> (I study computational intelligence)
17:30:11 <chessguy> DukeDave: it was just announced last week on haskell-cafe
17:30:45 <sorear> Poll: Who is *not* subscribed?
17:30:59 <shapr> I'm subscribed to haskell-cafe, but I don't always have time to read it.
17:31:04 <chessguy> sorear: DukeDave, apparently :)
17:31:08 * sorear receives about twice as much mail from haskell-cafe@ as from all the world's spammers
17:31:12 <shapr> But for now, I'm off to play a game, yay!
17:31:21 * sorear doesn't bother with any sort of email-hiding measure
17:32:06 <chessguy> sorear: you're still young :)
17:32:29 <DukeDave> Nah, I'm only on haskell@ ..
17:32:32 <dmwit> sorear: not subscribed
17:32:52 <sorear> Generally, project announces should go to haskell@.
17:32:53 <DukeDave> generally by the time things move to cafe they're going over my head anyway ;)
17:33:13 <ndm> sorear, lucky you - the worlds spammers seem to hit me 1000 times a day :(
17:33:32 <chessguy> i suppose i could copy my -cafe announcement to haskell@
17:33:36 * stepcut gets 1000-3000 spams per day
17:33:39 <ndm> DukeDave, lots of good things start on cafe
17:35:29 <Pseudonym> That beats my paltry 200 spams per day.
17:35:35 <Pseudonym> I get less since I started using spamcop.
17:35:53 <DukeDave> Aha, I've got it: I'll just knock together a script which dictates all the cafe threads to be when I get in to bed :)
17:36:01 <Pseudonym> BTW, English pedants may wonder why I said "less" rather than "fewer".
17:36:06 <Pseudonym> I see "spam" as a mass noun.
17:36:18 <ddarius> spams?
17:36:31 <Cale> Less spam, fewer spams.
17:36:53 <chessguy> DukeDave: anyway, feel free to sign up on the wiki page
17:37:08 <DukeDave> yeah I'm just putting my particulars down
17:37:09 <sorear>    (Typeable s, Typeable a) => Data (ST s a)
17:37:15 <sorear> ^^ useless instance?
17:37:35 <DukeDave> my MSc project this summer is working on Fuzzy logic in Haskell
17:37:42 <ddarius> Why would you want s to be Typeable?
17:37:48 <chessguy> MSc?
17:37:49 <DukeDave> so hopefully I'll be able to contribute some good stuff for you
17:38:15 <chessguy> sounds great
17:38:59 <DukeDave> http://www.cse.dmu.ac.uk/msccir/
17:39:01 <lambdabot> Title: MSc CIR and MSc IS)
17:39:17 <stmartin> What's the best way to get the fractional part of a Num ?
17:39:44 <ddarius> @hoogle frac
17:39:45 <lambdabot> Prelude.Fractional :: class Num a => Fractional a
17:39:45 <lambdabot> Prelude.RealFrac :: class (Real a, Fractional a) => RealFrac a
17:39:45 <lambdabot> Prelude.realToFrac :: (Real a, Fractional b) => a -> b
17:40:04 <chessguy> nice
17:40:29 <dmwit> > let fracpart x = x - floor x in fracpart 1.23
17:40:30 <lambdabot>  Add a type signature
17:40:35 <dmwit> > let fracpart x = x - floor x in fracpart 1.23 :: Double
17:40:36 <lambdabot>   add an instance declaration for (Integral Double)
17:40:36 <lambdabot>     In the expression: fr...
17:40:37 <stmartin> so I should be able to go  Fractional(d), assuming d is typed as a Num
17:40:43 <DukeDave> yeah, I've basically turned it into an exercise in how many assignments I can submit as lhs's
17:40:47 <chessguy> procyon112: i guess we can parameterize it that way for now, but i reserve the right to make it prettier later :)
17:41:00 <dmwit> > frac 1.23
17:41:01 <lambdabot>   Not in scope: `frac'
17:41:23 <ddarius> stmartin: No.  There is some standard function (maybe fractionalPart or somesuch) that does what you want.  Check the library documentation or the Report.
17:41:56 <dmwit> > let fracpart x = x - fromIntegral $ floor x in fracpart 1.23 :: Double
17:41:57 <lambdabot>        add an instance declaration for (RealFrac (a -> Double))
17:41:57 <lambdabot>     In the ex...
17:42:19 <dmwit> > let fracpart x = x - fromIntegral (floor x) in fracpart 1.23 :: Double
17:42:20 <lambdabot>  0.22999999999999998
17:42:39 <chessguy> procyon112:  ugh, but if we parameterize Config that way, then we have to do the same for GlobalState
17:42:40 <procyon112> chessguy: We may need to wrap the datatype anyway.  Especially if I add Multitypic GP.  In which case we will have something like data Node = LitInt Integer | LitDouble Double | Function String | Apply Node Node | ParamFunction ([Node]->Node);
17:42:47 <dmwit> > let fracpart x = x - fromIntegral (floor x) in fracpart 1.23 :: Ratio Int
17:42:49 <lambdabot>  23%100
17:43:19 <sorear> procyon112: look into GADTs
17:43:20 <procyon112> chessguy: And looking at the problem that way, leaves Config monotypic, using Node as an abstraction
17:43:21 <chessguy> yuck. i'm just going to leave those commented out for now
17:43:40 <chessguy> ok
17:43:52 <chessguy> i'm gonna upload this patch a while
17:43:59 <DukeDave> Observation.. from lhs2tex User Guide:  "WARNING: Note that both lhs2TeX.fmt and polycode.fmt contain lhs2TeX directives,
17:43:59 <DukeDave> and therefore cannot be included using TEX or LATEX include mechanisms such as
17:43:59 <DukeDave> \input or \usepackage."
17:43:59 <DukeDave> so, how do people get around this?
17:44:13 <procyon112> sorear: GADTs are on my list... I'm still in massive brain download mode ;)
17:44:38 <DukeDave> I'm a little confused, I was hoping to just /include all my modules and get one nice tex :(
17:44:58 <procyon112> chessguy: You should haddock-ize those comment headers too.  Just add the pipe character.
17:46:03 <sorear> procyon112: do any of the comments contain slashes?
17:46:13 <chessguy> procyon112: you mean --| ?
17:46:21 <sorear> or -- |
17:46:21 <chessguy> sorear: no
17:46:40 <chessguy> at least, i don't think so
17:46:41 <sorear> chessguy: good. haddock loves to choke on either/or
17:46:52 <ddarius> Or maybe not.
17:46:53 <procyon112> sorear: good to know :)
17:47:12 <sorear> bit me :(
17:47:14 <sorear> ddarius: ?
17:47:32 <ddarius> sorear: not directed at you
17:47:46 <stmartin> @past
17:47:47 <lambdabot> Haskell pastebin: http://hpaste.org/new
17:48:00 <sorear> @where logs
17:48:01 <lambdabot> http://tunes.org/~nef/logs/haskell/ http://meme.b9.com/cdates.html?channel=haskell
17:48:11 <sorear> if you really meant past
17:50:45 <ddarius> @future
17:50:45 <lambdabot> Unknown command, try @list
17:51:22 <ndm> :( - latex is not referentially transparent
17:53:05 <sorear> is it just internally stateful, or does it actually do bad stuff?
17:53:08 <sorear> @quote format
17:53:09 <lambdabot> SamB says: Because sliced bread gives horribly uninformative error messages?
17:53:12 <sorear> @quote format
17:53:12 <lambdabot> ghc says: For basic information, try the `--help' option.
17:53:14 <sorear> @quote format
17:53:14 <lambdabot> ghc says: For basic information, try the `--help' option.
17:53:17 <sorear> @quote formatt
17:53:18 <lambdabot> <skew> says: also, if you use ST you know the code is just using mutable variables, rather than formatting your hard drive
17:53:59 <ndm> sorear, its just crap - defining \newcommand{\q}{\hspace{-2mm}} on one line and using \q on the next is not equivalent to writing \hspace... on the next line
18:00:16 <hpaste>  stmartin pasted "Roman_numerals  mod_twelths" at http://hpaste.org/1165
18:00:38 <araujo> hello!
18:00:39 <stmartin> I have a problem with Num
18:01:12 <sorear> Num sucks
18:01:22 <thedward> If I add a 'cc-options: -D_XSERVER64' line to the X11 cabal file, that seem to do the correct thing with datatypes; Is there a good way to make that conditional?
18:02:03 <stmartin> But perhaps I'm just missreading the error message? Can someone have at Roman_numerals please?
18:02:33 <sorear> stmartin: first, "Num"s don't support mod
18:02:44 <sorear> stmartin: for instance, try defining mod for matrices
18:03:07 <sorear> stmartin: you want Integral for mod_{one,ten,hundred}s
18:03:26 <procyon112> chessguy: I'm not going to get to anything tonight.  I have a movie date with my girlfriend that preempts code hacking.
18:03:36 <stmartin> and then fractional for mod_twelths?
18:03:42 <sorear> yeah
18:03:48 <stmartin> thanks.
18:03:49 <TSC> And the return type says Int, but (/) returns something else
18:03:49 <sorear> maybe RealFrac/RealFloat
18:03:53 <TSC> :t (/)
18:03:54 <procyon112> chessguy: But I will look at your patch tomorrow.
18:03:55 <lambdabot> forall a. (Fractional a) => a -> a -> a
18:04:06 <procyon112> chessguy: if it's up yet.
18:04:07 <stmartin> TSC: ta
18:04:20 <TSC> thedward: I will try that option here to see if it helps
18:04:33 * araujo restricts with (Num sorear)
18:04:43 <dmwit> :t div
18:04:45 <lambdabot> forall a. (Integral a) => a -> a -> a
18:04:56 <dmwit> (But he really wants (*12) anyway.)
18:05:51 <dmwit> Huh.  What's the difference between truncate and floor?
18:05:58 <dmwit> :t truncate
18:06:00 <lambdabot> forall a b. (RealFrac a, Integral b) => a -> b
18:06:09 <dmwit> :t floor
18:06:10 <jcreigh> truncate might be towards zero?
18:06:12 <lambdabot> forall a b. (RealFrac a, Integral b) => a -> b
18:06:15 <jcreigh> I dunno
18:06:18 <dmwit> Ah, I see.
18:06:26 <dmwit> Oh, jcreigh, hi!
18:06:41 <dmwit> > truncate (0-12.5)
18:06:42 <lambdabot>  -12
18:07:08 <sorear> > truncate (-12.5) -- Haskell does have unary operator.
18:07:08 <stmartin> > floor (0-12.5)
18:07:10 <monochrom> truncate is towards zero
18:07:10 <lambdabot>  -12
18:07:10 <lambdabot>  -13
18:07:28 <jcreigh> dmwit: how's xmonad treating you?
18:07:46 <dmwit> Focus-follows-mouse doesn't change which workspace is active. =(
18:07:46 <monochrom> floor is sometimes called "towards -inf", and ceiling "towards +inf".
18:07:54 <dmwit> I think it's easy to fix, I just haven't looked at the code yet.
18:08:11 <jcreigh> dmwit: it's not as easy as you think. :(
18:08:21 <jcreigh> there's a subtle bug you have to watch out for.
18:08:25 <stmartin> What's the function to convert an Num to a Fractional?
18:08:41 <dmwit> Sounds like somebody already tried... =(
18:08:46 <dmwit> :t toFrac
18:08:49 <lambdabot> Not in scope: `toFrac'
18:09:11 <dibblego> ?hoogle Num a, Fractional b => a -> b
18:09:12 <lambdabot> Control.Monad.Error.throwError :: MonadError e m => e -> m a
18:09:12 <lambdabot> Control.Monad.State.put :: MonadState s m => s -> m ()
18:09:12 <lambdabot> Control.Monad.Writer.tell :: MonadWriter w m => w -> m ()
18:09:36 <dmwit> ?hoogle Rational a, Fractional b => a -> b
18:09:37 <lambdabot> Control.Monad.Error.throwError :: MonadError e m => e -> m a
18:09:37 <lambdabot> Control.Monad.State.put :: MonadState s m => s -> m ()
18:09:37 <lambdabot> Control.Monad.Writer.tell :: MonadWriter w m => w -> m ()
18:10:08 <dmwit> jcreigh: Care to tell what the subtle bug is?
18:10:09 <stmartin> The report makes no mention of toFrac
18:10:31 <monochrom> realToFrac may be useful
18:10:39 <dmwit> :t fromRat
18:10:41 <lambdabot> forall a. (RealFloat a) => Rational -> a
18:11:03 <monochrom> There is no conversion from Num to Fractional.  Num is too weak.
18:11:17 <stmartin> how so?
18:11:38 <stmartin> Nums can represent a fractional, can't they?
18:11:48 <sorear> stmartin: gimme a homomorphism from polymorphisms into the rationals
18:12:06 <sorear> s/ polymorphisms / polynomials /
18:12:07 <jcreigh> basically, the catch is this: when switching workspaces, we hide all the windows on the current workspace so that it's possible to switch to a blank workspace. So, if you have two windows on workspace 1, and you switch to a blank workspace 2, the two windows are hidden, one after the other. this generates EnterNotify events!
18:12:16 <monochrom> You are intuiting too much under the lack of information.
18:12:18 <dmwit> stmartin: Yes, they can, but they can represent other things too.
18:13:08 <jcreigh> I'm sure there's other cases as well: The basic thing to remember is that xmonad moving windows around generates enterNotify events. so it's tricky to change things based on that.
18:13:25 <dmwit> jcreigh: How does mod+w and mod+e work, then?
18:13:46 <dmwit> (It should be possible to do the same thing, right?)
18:14:43 <stmartin> Hmmmm, so what type should digits_of take then if I want to be able to pass either an Int or a Fractional?
18:15:28 <jcreigh> yes, it's possible. but in the enterNotify event handler, how do you tell the different between the user mousing over something, and an enterNotify being triggered because xmonad decided to hide/show something?
18:15:32 <dmwit> jcreigh: Anyway, point taken.  I'll be careful with things that can generate new events.
18:15:43 <dmwit> ...ah
18:15:49 <monochrom> Perhaps create a new class, say "Digitizable"
18:16:38 <dmwit> So the problem isn't that I might generate events, its that somebody else might generate spurious events, and I have to deal with it.
18:16:40 <dmwit> Interesting.
18:17:00 <dmwit> Okay, this needs some thought. =)
18:17:18 <jcreigh> no, my understanding is that it's closer to the former. (Is "I" in that sentence "xmonad"?)
18:17:44 <dmwit> "I" is "code that dmwit adds to xmonad"
18:18:17 <dmwit> (and "somebody else" is "xmonad")
18:19:03 <dmwit> This probably explains why I had trouble allowing clicks to focus windows last night.
18:19:34 <sjanssen> in the current code, the window under your mouse pointer is the one in focus
18:19:41 <sjanssen> (unless you mod+j to it)
18:19:45 <dmwit> Exactly.
18:20:10 <monochrom> The existing class "Real" includes both Int and Double. But I doubt you can extract digits from the methods of Real.
18:21:07 <dmwit> sjanssen: Or mod+w or mod+shift+enter or ...
18:22:05 <jcreigh> dmwit: oh, you want click-to-focus *only*?
18:22:05 <chessguy> ?src Real
18:22:05 <lambdabot> class  (Num a, Ord a) => Real a  where
18:22:06 <lambdabot>     toRational      ::  a -> Rational
18:22:19 <dmwit> jcreigh: No, but I at least want click-to-focus.
18:22:27 <sjanssen> oh right, created windows get focus too
18:22:42 <dmwit> I'm fine with focus follows mouse (it's my preferred), but if I click in a window, I want to know it's focussed for sure.
18:22:51 <sjanssen> unless resizing causes your pointer to be in a new window
18:23:02 <jcreigh> ...whereas right now, you have to mouse-out mouse-in. I see.
18:23:25 <fuzan> are there any ion users in here? :)
18:23:40 <sjanssen> click focus shouldn't be hard, AIUI
18:23:45 <TSC> I use ion3
18:23:54 <fuzan> TSC: have you used wmii?
18:24:03 <dmwit> sjanssen: Right, that's what I thought.  I thought I could even do it at 4am. =)
18:24:11 <TSC> I don't think so (certainly not seriously)
18:24:26 <sjanssen> for every ButtonPress event registered you check whether the window is in a viewed workspace, then you set focus to it
18:24:42 <fuzan> TSC: new(er) dynamic wm that's pretty sweet. i've always hated dynamic wms, yet last night, it swayed me.
18:24:42 <dmwit> fuzan: What's the question?  People here have used lots of WM's... ;-)
18:24:59 <fuzan> dmwit: none, actually. i'm just reccomending people to try wmii :)
18:25:04 <sjanssen> fuzan: wmii is bloated, use xmonad
18:25:04 <TSC> What does dynamic mean?
18:25:06 <dmwit> fuzan: Have you tried dwm?
18:25:10 <dmwit> Or xmonad? ;-)
18:25:13 <jcreigh> fuzan: have you tried xmonad? :)
18:25:36 <fuzan> dwm is too minimalistic for my taste :)
18:25:40 <fuzan> xmonad, no. let me google.
18:25:58 <dmwit> fuzan: It's trying to be a dwm-knockoff.
18:26:20 <dons> we prefer the term 'implementation'
18:26:27 <fuzan> heh, the arbitrary line maximums are so retarded, imho. they ARE however amusing :)
18:26:41 <fuzan> how well does xmonad work?
18:26:53 <dons> rather well, imo. i've been running it for weeks now.
18:27:21 <dmwit> dons: weeks? ... it's only existed for like ten days...
18:27:23 <kilimanjaro> I'm considering getting it myself
18:27:26 <fuzan> i JUST started using dwii last night. i'm not even sure what the sexy bar is called that i've been using. does xmonad have such a thing?
18:27:31 <dons> dmwit: not so.
18:27:32 <jcreigh> dmwit: not true. "darcs changes" :)
18:27:47 <kilimanjaro> i use ion currently, but I hate lua
18:27:52 <dmwit> Bah, empiricism.
18:28:25 <dmwit> Anyway, it's pretty awesome for a three-week-old.
18:28:30 <dons> 07.03.06:18:16:34 * dons is running in thunk
18:28:32 <dons> :-)
18:29:01 <jcreigh> I'm running the WM formerly known as thunk. :)
18:29:06 <fuzan> any screenshots? :)
18:29:16 <jcreigh> fuzan: no window decorations
18:29:20 <dons> several. check the logs for 'xmonad.*screen'
18:29:34 <dons> decorations are for christmas trees and cakes.
18:29:44 <TSC> It seems like xmonad on 64-bit still has trouble with picking up windows to manage (even with thedward's suggestion)
18:29:50 <dmwit> buckwheat.stanford.edu/xmonad.png -- on Xinerama!
18:30:11 <dons> TSC, i can't see how the -package X11 is going to run safely on 64 bit till the CInt issues are fixed.
18:30:21 <dons> its a nasty, though correctable, flaw in the X11 binding
18:30:24 <allbery_b> @remember SteveTraugott the major difference between python and other languages is that, in python, you can not only read your old code faster, you can feel stupid faster too
18:30:24 <lambdabot> Done.
18:30:32 <TSC> Yes, it seems you're right
18:30:53 <TSC> At least the keys work (:
18:30:57 <dmwit> Actually, I think my productivity has gone down significantly since xmonad.
18:31:09 <dmwit> Always having XChat visible is a real killer... =P
18:31:44 <jcreigh> yeah...I always have to detach irssi to get any real work done.
18:32:01 <DukeDave> Hey gang, in lhs2tex is there a a command (something like \texttt{}) which print text in the 'code' font?  Context: I'm referring to function names within a text block
18:32:21 <DukeDave> (and it dies when I try \code{})
18:32:34 <jcreigh> sjanssen: oh, are you on OS X?
18:57:49 <DukeDave> ... the pipe symbol then :)
18:57:52 <DukeDave> woop
18:57:57 <DukeDave> night all :)
19:03:22 <dons> ?users
19:03:23 <lambdabot> Maximum users seen in #haskell: 337, currently: 298 (88.4%), active: 37 (12.4%)
19:07:00 <dmwit> :t maybe
19:07:02 <lambdabot> forall b a. b -> (a -> b) -> Maybe a -> b
19:07:36 <dmwit> Oooo, handy.
19:09:15 <dolio> Yikes. Below 300 users.
19:09:26 <dmwit> :t elemAfter
19:09:28 <lambdabot> Not in scope: `elemAfter'
19:10:40 <sorear> hello!
19:10:51 <dmwit> > let elemAfter w ws = listToMaybe . filter (/= w) . dropWhile (/= w) $ ws ++ ws in elemAfter 1 [1]
19:10:52 <lambdabot>  Nothing
19:11:21 <dmwit> Oh.
19:11:39 <dmwit> > listToMaybe [2,3]
19:11:40 <lambdabot>  Just 2
19:13:27 <dolio> ?src listToMaybe
19:13:27 <lambdabot> listToMaybe []        =  Nothing
19:13:28 <lambdabot> listToMaybe (a:_)     =  Just a
19:15:37 <dolio> @check (\l -> listToMaybe l == foldr (const . Just) Nothing l) :: [Int] -> Bool
19:15:38 <lambdabot>  OK, passed 500 tests.
19:16:59 <jcreigh> ?users
19:16:59 <lambdabot> Maximum users seen in #haskell: 337, currently: 300 (89.0%), active: 39 (13.0%)
19:17:02 <jcreigh> there
19:17:07 <dolio> :)
19:18:26 <dmwit> Oy, I need to keep reminding myself that there's a difference between "visible" and "current".
19:19:25 <jcreigh> dmwit: yeah. barring bugs the current WS should always be visible. But of course a visible workspace isn't always current.
19:19:41 <jcreigh> dmwit: BTW, how are you feeling about the Xinerama handling thus far?
19:19:51 <dmwit> Actually, I'm warming to it.
19:19:56 <dmwit> It's pretty simple.
19:20:10 <sorear> booyah!
19:20:11 <dmwit> (Simple is nice.)
19:20:40 <sorear> Everyone thinks I'm crazy and GHC is doing the Right Thing with newtype deriving and GADTs.
19:20:50 <sorear> They won't argue with a segfault :)
19:20:56 <dmwit> I realized that the reason I liked my external monitor so much wasn't the bigger resolution; it was that it was so much brighter and more colorful. =P
19:21:13 <jcreigh> "external"? is the laptop?
19:21:17 <jcreigh> s/the/a/
19:21:26 <dmwit> Yeah, I'm on a laptop.
19:22:28 <zbrown> sorear: I don't think you're crazy but I know I'm crazy :)
19:22:52 <dmwit> zbrown: Don't flatter yourself. ;-)
19:23:05 <zbrown> :-P
19:24:15 <sorear> I can crash no less than six versions of GHC.
19:24:30 <zbrown> i can crash no versions of GHC :(
19:26:04 <jcreigh> dmwit: BTW, if you think of some extremely clever way to record the workspace <-> screen relationship, I'd love to hear it. The problem now is we have Map Int Int (workspace # -> screen #), which means the workspace to screen lookup is easy, but the reverse is really awkward. and we need to do both. Eventually I'll just break down and write a "one to one map" datatype that does what we want...but I'm holding off to see if we need to ...
19:26:10 <jcreigh> ... totally redo Xinerama anyway.
19:26:32 <hpaste>  procyon112 pasted "Help with infix expressions" at http://hpaste.org/1166
19:26:45 <dmwit> jcreigh: I was wondering if it should be encoded straight into the StackSet.
19:26:53 <procyon112> What am I doing wrong here?
19:26:53 <jcreigh> dmwit: how do you mean?
19:26:58 <dmwit> I'm still thinking about that, though, and it makes me uneasy.
19:27:10 <dmwit> Well... current :: [Int]
19:27:40 <procyon112> DOH!  I think that should be infixr  Never mind.  I feel stupid.
19:27:52 <dmwit> But I'm trying to read all the code, and I haven't gotten to the current implementation of screens yet, so feel free to ignore me for now. =)
19:28:14 <jcreigh> dmwit: well, you're gonna puke when you see screenWS. Just warning you. :)
19:28:57 <dmwit> By the way, I'm assuming that something like (keys cache === concat stacks), up to ordering and actual syntax.
19:29:01 <dmwit> Is this true?
19:29:16 <dmwit> Errr... specifically in the StackSet setting.
19:29:40 <jcreigh> I believe so...I haven't touched StackSet much.
19:29:47 <sorear> Ok, bash is stumping me.
19:29:49 <sorear> stefan@stefans:/tmp$ function foo() { $1 -V ; $1 -e 'seq icA ()' A.hs ; $1 -dcore-lint -e 'seq icA ()' A.hs }
19:29:49 <sorear> >
19:29:59 <sorear> why is that command incomplete?
19:30:28 <jcreigh> function foo() { $1 -V ; $1 -e 'seq icA ()' A.hs ; $1 -dcore-lint -e 'seq icA ()' A.hs; }
19:30:50 <jcreigh> (trailing semicolon)
19:31:03 <sorear> that's ... derogative adjective
19:31:18 <jcreigh> ...and no, I have no idea why it requires that. maybe it would be different in a file?
19:31:38 <dmwit> Compatibility with C? =P
19:31:45 <jcreigh> heh
19:33:05 <sorear> Ok.
19:33:14 <sorear> Now, when I run that function ....
19:33:20 <sorear> my shell immediately exits!
19:33:55 <dmwit> What's $1?  What's A.hs?
19:34:08 <sorear> A.hs is a file in my current dir.
19:34:50 <sorear> $1 is one of "ghc-6.4.2", "ghc-6.6", "ghc-6.7", "ghc-6.7.20070213", "ghc-6.7.20070223", "ghc-6.7.20070323"
19:36:24 <dons> dmwit: check it with QuickCheck, there's a list of stackset properties in tests/
19:36:44 <sorear> Does anyone have a clue why running that fun kills my shell?
19:37:01 <dmwit> dons: How do I run the tests?
19:37:07 <dmwit> (How do I build the tests?)
19:37:22 <sorear> Even running it in a subshell "(foo ghc-6.4.2)" doesn't help!
19:37:38 <jcreigh> sorear: it kills the parent shell?!?
19:38:14 <dons> $ cd xmonad
19:38:14 <dons> $ runhaskell tests/Properties.hs
19:38:30 <dmwit> ...
19:38:36 <dmwit> pwnt
19:38:55 <monochrom> In A.hs, does icA call something that amounts to unix's "kill -9 -1"?
19:39:19 <sorear> monochrom: it's not an IO action :)
19:39:34 <jcreigh> sorear: I dunno...maybe try to debug with bash -x?
19:39:50 <sorear> monochrom: in any event, it's being munged by GHC badly enough to fail core lint, so I don't really control what it does.
19:39:54 <sorear> jcreigh: tried.
19:40:09 <jcreigh> oh
19:40:10 <sorear> + ghc-6.4.2 -dcore-lint -e 'seq icA ()' A.hs
19:40:10 <sorear> *** Exception: Segmentation fault
19:40:10 <sorear> + :
19:40:10 <sorear> stefan@stefans:/tmp$ exit
19:40:13 <sorear> Process shell finished
19:40:29 <sorear> that's what the tail of the buffer looks like, trying it after a set -x
19:45:16 <dmwit> What is this "where _ = x :: T" mean?
19:45:42 <sorear> Binds a wildcard pattern to x :: T
19:45:49 <sorear> thus, it does nothing
19:46:04 <dmwit> So... why is it used?
19:46:09 <sorear> but during typechecking it constrains x to type T, which may be important
19:46:14 <jcreigh> probably to restrict a type?
19:46:20 <dmwit> Ah, okay, yes.
19:46:44 <sorear> Oh, this is *fun*
19:46:58 <sorear> that function?  only kills shells inferior to Emacs.
19:46:59 <dons> dmwit: that's a type defaulting to tell QuickCheck which type to generator
19:47:21 <dmwit> dons: Neat.
19:47:46 <jcreigh> sorear: oh, lovely. it's always something stupid.
19:53:18 <jcreigh> hmm...dmenu is nice if you actually take the time to define menu items for it...
19:53:52 <dmwit> jcreigh: I have a .dmenu with links/scripts that I use a lot, and a one-liner to lsx/dmenu that directory...
19:54:14 <dmwit> dons: Looks like it passes.
19:54:19 <dmwit> \o/
19:54:46 <dons> good to find new properties :-)
19:55:04 <dons> i'd really like some screen/workspace ones too, but out workspace/screen split is in two separate types currently
19:55:25 <jcreigh> I like how it doesn't matter where the match is...I can "mpc next" in there and type mod-p n e <cr>
19:55:42 <jcreigh> s/can/& put/
19:58:53 <sorear> bug reported.
19:59:29 <jcreigh> ...no thanks to bash+emacs...
19:59:41 <dmead> sorear
19:59:41 <dmead> yo
19:59:44 <dmead> in emacs22
19:59:51 <dmead> do you find that it doesn't chase your modules?
19:59:57 <sorear> dmead: chase?
20:00:17 <dmead> if you import modules that you've written
20:00:27 <dmead> in the same directory as the file you're loading
20:00:35 <dmead> it should automatically find them
20:00:48 <dmead> this seems to be not working for me in emacs22
20:00:50 <sorear> haha.  No, it's not that easy.
20:00:59 <sorear> Change to *haskell* and M-x cd
20:01:00 <dmead> =/
20:01:09 <dmead> ah
20:01:17 <dmead> thats done automatically in 21
20:01:24 <dmead> HMM
20:03:05 <jcreigh> you ever write like 80 lines of Haskell, and then wonder, "hmm, is this going to parse and typecheck?" :)
20:03:37 <chessguy> procyon112: the patch is applied, whenever you want to get it
20:03:58 <dmwit> The problem with Haskell is that it's so dense, it takes forever to read it.
20:04:09 * sorear often postpones typechecking until the entire program has been written
20:04:20 <chessguy> @quote one.page
20:04:20 <lambdabot> darius says: I imagine XSLT programmers say "It's a one pager" the way most other programmers say "It's a one liner".
20:04:33 <sorear> @quote 2.lines
20:04:33 <chessguy> on that note, bed-time!
20:04:34 <lambdabot> glguy says: in true Haskell form, after I realized what I was actually doing... all my functions melted down to about 2 lines each
20:04:51 <dons> dmwit: practice helps a lot.
20:04:59 <dmwit> =)
20:05:03 <dmwit> Then practice I shall.
20:05:12 <sorear> Found my first typechecker bug today :)
20:05:14 <dons> i find i can write rather large chunks of haskell now, and it often type checks first go. its a bit scary when that happens.
20:05:32 <sorear> @quote type.?checked
20:05:33 <lambdabot> scsibug says: i could have sworn it was incorrect until it type-checked
20:05:53 <dmwit> Oh, writing is easy.  It's reading that's hard. ;-)
20:05:57 <zbrown> @quote
20:05:57 <lambdabot> Alanna says: Saying that Java is nice because it works on all OS's is like saying that anal sex is nice because it works on all genders.
20:06:06 <zbrown> lol
20:06:34 <jcreigh> dmwit: BTW, tiling mode per workspace is so nice...
20:06:36 <jcreigh> dmwit++
20:06:45 <dons> yeah.
20:06:52 <dons> does dwm have that (no?)
20:07:01 <dmwit> It wasn't me...
20:07:06 <dons> in fact, its an obvious feature any tiling wm should have.
20:07:07 <jcreigh> oh.
20:07:19 <jcreigh> well, ++ for other reasons then. :)
20:07:19 <dmwit> dwm has it
20:07:22 <dmwit> =)
20:07:26 <jcreigh> dmwit: really?
20:07:29 <sorear> by the way, I've ditched ion3
20:07:33 <sorear> (about 3 days ago)
20:07:37 <jcreigh> sorear: ...in favor of?
20:07:40 <dons> and moved to... ?
20:07:43 <dons> wmii?
20:07:47 <sorear> next time I need X, I'll install xmonad :)
20:07:47 <dmwit> jcreigh: yeah
20:07:51 * sjanssen prepares to slap sorear if he doesn't say xmonad
20:09:12 <jcreigh> sorear: get another monitor. then you run X all the time because Linux doesn't have multihead console support. :)
20:10:11 <dmwit> AUGH! TwinView took away my VT's!
20:10:24 <cr_> heh, i just simulated dwm within emacs' windows since linux is too slow for firefox
20:10:57 * zbrown notes that he uses Gnome because he's too lazy to install anything else.
20:10:58 <jcreigh> yeah, firefox is S-L-O-W
20:11:06 <sorear> jcreigh: xterm uses a REALLY ugly font by default, and has highly braindead color handling.
20:11:30 <dmwit> ?index Display
20:11:30 <lambdabot> Graphics.X11.Xlib.Types, Graphics.X11.Xlib, Graphics.X11.Xlib.Types
20:11:36 <sorear> jcreigh: I use the console because it is simply a much nicer terminal emulator.
20:11:46 <zbrown> jcreigh: firefox is slow as in... render speed or what?
20:11:58 <jcreigh> zbrown: everything. (800mhz AMD)
20:12:12 <cr_> im on 2g amd64 and its real bad
20:12:25 <jcreigh> (okay, it's not unbearable since I upgraded from my 400mhz PII...but still...)
20:12:28 <cr_> 25 seconds to launch. 4 seconds to open a new tab. freezes up for 5 seconds if you ctrl-+ (font size) etc
20:12:37 <jcreigh> cr_: something is wrong.
20:12:41 <jcreigh> cr_: it should not be that bad.
20:12:50 <zbrown> oh ok
20:13:01 <zbrown> jcreigh: which version of firefox?
20:13:06 <cr_> jcreigh: yeah, i'll try again once the --enable-glitz switch compiles properly
20:13:10 <sorear> Elinks is WAY faster
20:13:17 <dmwit> I'm really surprised Haskell doesn't have some sort of bidirectional Map.
20:13:21 <cr_> sadly theres nothing besidse firefox with ecmascript+css
20:13:30 <jcreigh> zbrown: "iceweasel" (Debian's rebranding of Firefox) 2.0.0.2
20:13:32 <sjanssen> dmwit: yes, I've wanted one on a dozen occasions
20:13:41 <sorear> ecmascript is overrated
20:13:49 <zbrown> jcreigh: ah ok, ya i stay away from anything thats over firefox 1.5.x
20:13:57 <sorear> as for CSS... elinks does that just fine
20:14:10 <jcreigh> zbrown: you find the 1.5.x branch to be faster?
20:14:14 <zbrown> jcreigh: granted my system (Core Duo 2.0ghz) can take the hit
20:14:26 <zbrown> jcreigh: in my experience yes. Both in windows and linux.
20:14:30 <cr_> well, porting haskell primitives to Object prototypes screws up for (a in b) loops, hope they fix that in ES4
20:14:37 <dmead> yea
20:14:37 <jcreigh> hmm...maybe I'll downgrade.
20:14:40 <dmead> firefox is getting SLOW
20:14:57 <zbrown> after they bumped to 2.x it got slow
20:15:02 <jcreigh> I'll have to get out of the habit of killing X and letting firefox save my session. :)
20:15:05 <zbrown> the fastest firefox was around 1.0 beta
20:15:12 <dmead> yea
20:15:28 <zbrown> swiftfox would be a good one for you to consider if speed is a concern jcreigh
20:15:29 <dmead> they seem to be stuffing more and more into the same loop
20:15:34 <dmead> and not spinning off threads
20:15:47 <cr_> i think brendan doesnt like threads, or something
20:15:54 <dmead> =/
20:16:00 <cr_> http://weblogs.mozillazine.org/roadmap/archives/2007/02/threads_suck.html
20:16:02 <lambdabot> Title: Brendan's Roadmap Updates: Threads suck, http://tinyurl.com/377w7c
20:16:17 <zbrown> jcreigh:
20:16:19 <zbrown> oops
20:16:24 <zbrown> jcreigh: http://getswiftfox.com/1.5.0.7.htm
20:16:25 <lambdabot> Title: Swiftfox 1.5.0.7
20:16:47 <zbrown> the optimizations definitely make a difference
20:16:49 <zbrown> its nice
20:16:58 <dmead> yea
20:17:09 <dmead> i've teaked the compile flags for firefox on my gentoo
20:17:25 <sjanssen> threads are fine, your language sucks
20:17:38 <zbrown> hmmm gentoo, haven't touched that in years lol
20:17:43 <jcreigh> it's ironic...the only app the runs slow enough that I'd consider trying to tweak compile flags is so big that I don't want to compile it...
20:17:53 <dmead> indeed
20:18:02 <dmead> swiftfox is really good for non gentoo people
20:18:10 <dmwit> Hahaha, I just looked over and saw "threads are fine, your language sucks".  Awesome.
20:18:24 <dmwit> ?remember sjanssen threads are fine, your language sucks
20:18:24 <lambdabot> Done.
20:18:34 * zbrown kills accounting
20:19:07 * jcreigh notices that he still has "phoenix" in his ~/opt
20:19:12 <zbrown> jcreigh: haha
20:19:26 <zbrown> what was the name before that....?
20:19:30 <jcreigh> I forget...
20:19:34 <zbrown> phoenix... firefox...
20:19:36 <zbrown> hmmm
20:19:36 <dmead> ahh
20:19:38 <dmead> it was
20:19:38 <zbrown> firefly
20:19:39 <jcreigh> thundercougarfalconbird
20:19:40 <zbrown> wasn't it
20:19:46 <dmead> it was trademarked...
20:19:50 <dmead> and thats why they changed it...
20:19:52 <dmead> ummm
20:19:54 <sjanssen> wasn't it firebird at some point?
20:19:54 <zbrown> i think it was firefly no?
20:19:57 <zbrown> firebird
20:19:58 <zbrown> that was it
20:19:59 <dmead> yes
20:20:02 <dmead> firebird
20:20:06 <dmwit> io = liftIO --  x_x
20:20:10 <zbrown> oh wait firefly is the tv show i like :-D
20:20:11 <dmead> to go with thunderbird
20:20:13 <dmead> :-D
20:20:17 <dmead> firefly is cool
20:20:21 <dmead> alot like cowboy bebop
20:20:24 <zbrown> yup
20:20:36 <dmead> :D
20:20:37 <zbrown> who wants to take my accounting exam for me tomorrow?
20:20:39 <zbrown> any takers?
20:20:43 <dmead> nothx
20:21:12 <zbrown> hmmm i wonder when the cluster will be up *hehehehe*
20:21:44 <dmead> :DDDD
20:21:52 <dmwit> :t $!
20:21:54 <lambdabot> parse error on input `$!'
20:21:58 <dmwit> :t ($!)
20:22:01 <lambdabot> forall a b. (a -> b) -> a -> b
20:22:09 <dmwit> ?src ($!)
20:22:10 <lambdabot> Source not found. And you call yourself a Rocket Scientist!
20:22:36 <dmwit> Anyway, I'm guessing a strictified ($).
20:22:49 <sjanssen> you are correct
20:24:10 <LoganCapaldo> f $! x | f `seq` x `seq` True = f x -- Perhaps??
20:24:12 <zbrown> hmmm bedtime, guess im getting up early to study lol
20:25:51 <jcreigh> zbrown: swiftfox 1.5 branch is noticebly faster...not a *huge* improvement, but still helps. Thanks for the link!
20:26:43 <jcreigh> hmm...I wonder if I should uninstall debian's firefox...
20:27:41 <jcreigh> firefly++
20:28:07 <LoganCapaldo> You can't take the sky from me
20:28:44 <dmwit> LoganCapaldo: (f $! x = f `seq` x `seq` f x) -- is this equivalent?
20:28:48 <zbrown> jcreigh: anytime :)
20:28:53 <araujo> hello!
20:29:02 * araujo throws lambda at everyone
20:29:05 <zbrown> jcreigh: you tried opera? is that any better?
20:29:08 <LoganCapaldo> dmwit: maybe? :)
20:29:11 <LoganCapaldo> I dunno
20:29:25 <dmwit> Okay.  It doesn't really matter anyway. =)
20:29:31 <jcreigh> zbrown: no, I haven't. I dunno...isn't it still ad-laden?
20:29:48 <zbrown> don't believe so
20:29:53 <LoganCapaldo> I just saw the "guard used with seq to force sticter evaluation" recently and felt like trying to apply it
20:30:13 <sjanssen> dmwit: it's just f $! x = x `seq` f x
20:30:41 <dmwit> Well, that's short.
20:30:58 <sjanssen> @pl \f x -> x `seq` f x
20:30:58 <lambdabot> ap seq
20:31:04 <monochrom> hard to write long programs in haskell
20:31:58 <sjanssen> monochrom: it is hard to write long programs in Haskell.  Whenever I try to write a long program it ends up in 50 lines or less
20:32:17 <monochrom> I know the feeling.
20:32:38 <araujo> yeah, Haskell makes it almost impossible :-(
20:32:55 <zbrown> jcreigh: http://kazehakase.sourceforge.jp/ <--- a friend of mine uses that brwoser, sposed to be very fast
20:32:57 <lambdabot> Title: Kazehakase
20:33:50 <araujo> You want to make your code shorter in other languages , but longer in Haskell
20:35:23 <zbrown> jcreigh: and if you're feeling really adventurous and can handle having no support for css, java, or javascript and barely any support for frames, then use this one: http://www.dillo.org/
20:35:25 <lambdabot> Title: Dillo Web Browser :: Home Page
20:38:09 <jcreigh> how many passes does GHC *have*?
20:38:55 <jcreigh> yay, finally typechecks.
20:42:58 <merus> wow, dillo is the fast
20:44:12 <zbrown> dillo is ridiculously fast :)
20:44:30 <zbrown> if you can deal with malformed web pages and not needing to enter too much stuff like on banking websites its definitely the best
20:48:19 <merus> Yeah.
20:52:06 <jcreigh> but no tabs. I'm addicted to tabs.
20:52:28 <jcreigh> (I know, elinks has tabs...)
20:55:09 <sorear> jcreigh: too many
20:55:28 <jcreigh> "too many"?
20:55:34 <jcreigh> how can you have too many tabs? :)
20:55:40 <sorear> jcreigh: lex, parse, fixity, tc can fail
20:55:54 <jcreigh> oh, GHC passes. right
21:08:55 <thedward> okay. I've got xmonad usable on my amd64 box now, the only bug I managed to activate on my current build is that it core dumps whenever I change the keymap.
21:13:07 <sjanssen> thedward: this is a known issue on all platforms (haven't figured it out yet)
21:14:00 <thedward> sjanssen: Ah. well, at least I don't feel left out anymore. :)
21:15:27 <thedward> I went through and deInted (or rather reInted to CInt) the X11 lib. I really have no clue what I am doing, but xmonad seems to be working at least. Should I submit patches?
21:18:03 <sjanssen> thedward: yes, you should
21:20:04 <thedward> the default email for darcs send appears to be libraries; Is that where the patches should actually go?
21:20:40 <sjanssen> that should be fine
21:20:52 <thedward> I guess I better subscribe to that list then.
21:23:03 <user317> is there a way to load a dynamic library in haskell, like a plugin?
21:23:09 <sorear> hmm.  Why are the comprehensions being removed from nobench?
21:23:12 <sorear> @where plugins
21:23:13 <lambdabot> I know nothing about plugins.
21:23:15 <sorear> @where hs-plugins
21:23:16 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
21:23:39 <sjanssen> sorear: $10 says it's to make it faster with streams
21:23:40 <user317> thanks
21:23:40 <sorear> actually, that's dons' thesis project...
21:24:54 <sorear> Wow, on x86 (nobench) -fasm is faster than -fvia-C today!
21:25:34 <sjanssen> nice
21:25:49 <siti> :)
21:26:05 <sorear> 1% faster!
21:26:38 <user317> hmm, does hs-plugins work with ghc 6.6?
21:26:42 <sorear> yeah
21:26:50 <thedward> another xmonad wierdness. when I alt-shift-c a window to kill it, sometimes the process doesn't actually end (though the window does go away).
21:27:00 <sorear> if you have ghc 6.4.2 - the tarball will work, darcs won't
21:27:14 <sorear> if you have ghc 6.6 - darcs will work, the tarball won't
21:27:23 <sorear> if you have ghc 6.7 - neither will work (iirc)
21:27:48 <sorear> > 2 + 2 -- running on HS-Plugins!
21:27:50 <lambdabot>  4
21:27:51 <sorear> @version
21:27:52 <lambdabot> lambdabot 4p517, GHC 6.6 (OpenBSD i386)
21:27:52 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
21:31:09 <sjanssen> thedward: are you sure this isn't the application's fault?
21:32:03 <user317> is there an ebuild around for darcs version of hs-plugins?  or a snapshot that will work with ghc 6.6?
21:32:32 <thedward> sjanssen: not at all; But I am sure it is at variance with how the same apps behave under whatever the default gnome window manager is.
21:33:32 <sjanssen> thedward: does closing something simple like xterm work correctly?
21:34:50 <thedward> sjanssen: yes; as does firefox
21:38:38 <sorear> @yow
21:38:38 <sorear> @botsnack
21:38:39 <lambdabot> Yow!  I'm having a quadrophonic sensation of two winos alone in a steel
21:38:39 <sorear> tsk tsk
21:38:39 <lambdabot> mill!
21:38:39 <lambdabot> :)
21:38:43 <TSC> thedward: Can I see your patch?  I would like to test it too
21:39:30 <jcreigh> TSC, thedward: I think it's great we've got people hacking on X11 to make it 64bit clean...thanks guys.
21:39:58 <TSC> I haven't done much myself
21:40:20 <jcreigh> okay...
21:40:44 <jcreigh> I can revise.
21:41:05 <TSC> @where x11
21:41:05 <lambdabot> I know nothing about x11.
21:41:13 <jcreigh> thedward: I think it's great that your hacking on X11 to make it 64bit clean...in contrast to the lazy, no-good social outcast TSC :)
21:41:24 <TSC> That's better
21:41:26 <jcreigh> heh
21:42:09 <jcreigh> but seriously, it's good that people are working on it, either testing or patching.
21:42:47 <jcreigh> it's kind of awkward to have to say "Yeah, we have X11 bindings! Oh, unless you have a new PC."
21:43:00 <TSC> Where is the X11 darcs repo?
21:43:34 <jcreigh> hmm. I don't actually know.
21:43:43 <sjanssen> @fptools X11
21:43:44 <lambdabot> X11 not available
21:43:56 <sjanssen> http://darcs.haskell.org/packages/X11 iirc
21:43:57 <lambdabot> Title: Index of /packages/X11
21:44:15 <QtPlatypus> @quote regular expression
21:44:15 <lambdabot> No quotes for this person. Your mind just hasn't been the same since the electro-shock, has it?
21:44:33 <sjanssen> jcreigh: we might get some new XCB based bindings anyway
21:44:33 <TSC> Ah, thanks
21:44:45 <jcreigh> sjanssen: XCB == better?
21:45:11 <sjanssen> jcreigh: less crufty is the best explanation
21:45:16 <jcreigh> ah
21:45:24 <sorear> Wow. I just almost wrote my name and password (vs. name/date) on a homework assignment.
21:45:30 <sjanssen> closer to the X protocol, more sane error handling
21:45:48 <sjanssen> sorear: wrote, as in on a sheet of paper?
21:45:51 <jcreigh> is this a SoC project?
21:46:06 <sorear> sjanssen: yes :)
21:46:09 <sjanssen> jcreigh: yeah, I've proposed it
21:46:25 <sorear> sjanssen: with a pen!
21:46:28 <sjanssen> even if Google doesn't fund it, I'd still like to get it done
21:46:49 <sjanssen> sorear: wow, I can't even imagine doing that
21:47:24 <sjanssen> did you have one of those heart attack moments, similar to any time you see your password in plaintext?
21:47:51 <sorear> no, I caught the error just in time ...
21:48:10 <sorear> besides, I can change my pw easily enough
21:48:39 <LoganCapaldo> theres no way to turn on -fglasgow-exts in an already running ghci is there?
21:48:49 <Heffalump> yes, there is
21:48:56 <sorear> :set -fglasgow-exts
21:49:13 <sorear> essentially every flag can be set and unset at runtime
21:49:21 <LoganCapaldo> arg
21:49:26 <sorear> even stuff like corelint and preprocessor
21:49:34 <siti> should 1,313,998 map lookups take about 20 seconds? on a fast machine...
21:49:45 <sorear> How big is your map?
21:49:57 <LoganCapaldo> I thought :set <options> meant options was required, and heres a list of options, prog, editor, prompt
21:50:05 <LoganCapaldo> silly me
21:50:10 <sorear> map lookups involve O(log n) indirect function calls
21:50:42 <siti> about 370
21:51:04 <sjanssen> siti: and what are your keys?
21:51:12 <siti> bytestrings
21:51:24 <sorear> siti: bytestrings are slow
21:51:33 <siti> umm
21:51:42 <siti> what's faster :P?
21:51:45 <sjanssen> that doesn't sound unreasonable to me
21:51:46 <LoganCapaldo> sorear just destroyed my reality
21:51:56 <LoganCapaldo> I thought ByteStrings were the fast ones
21:52:01 <sorear> siti: they are asymptotically fairly fast, because of better packing, but the FFI overhead is on the order of 3000 cycles
21:52:06 <sjanssen> sorear: I think you should qualify that statement
21:52:09 <siti> shouldn't bytestrings use memcmp :p
21:52:20 <sjanssen> siti: are you using strict or lazy?
21:52:24 <siti> strict
21:52:28 <sjanssen> strict does use memcmp IIRC
21:52:29 <sorear> so if your strings are short, the overhead can swamp the benefits of packing
21:52:50 <siti> hmm, well why don't we reduce the overhead ;)
21:52:50 <sorear> siti: they use memcmp - but calling into C isn't cheap :(
21:53:00 <siti> why is it so much ? :(
21:53:08 <sorear> i dunno
21:53:18 <LoganCapaldo> is it "free" with -fvia-C?
21:53:22 <sorear> dons did a benchmark, but I doubt it still exists
21:53:32 <sjanssen> I bet ByteString comparison is faster when your strings are 10 characters or so
21:53:52 <siti> I have another module that uses low level haskell, with stuff like bit packing with a sorted array
21:53:55 <siti> it seems fast :)
21:53:55 <sorear> dons: ping?
21:54:14 <siti> if bytestrings was written like that without using c functions would it be fast?
21:54:22 <sorear> http://www.cse.unsw.edu.au/~dons/tmp/x.hs -- iirc this was it, but it now has different contents
21:54:29 <siti> ok
21:54:33 <sjanssen> siti: you might have success with a better data structure (like a trie)
21:55:05 <jcreigh> a trie?
21:55:17 <siti> I don't need partial matches though, isn't that what a trie is for?
21:55:36 * LoganCapaldo looks up trie
21:55:37 * jcreigh reads wikipedia article
21:55:38 <LoganCapaldo> aha
21:55:44 <LoganCapaldo> I see i've invented this :)
21:55:50 <siti> lol
21:55:55 <LoganCapaldo> Doncha love it when that happens?
21:55:57 <sorear> Me too.
21:56:00 <sjanssen> tries are great data structures.  I don't think they're taught often enough in CS
21:56:11 <sorear> I also invented HMAC - I'm a bit prouder of that one.
21:56:17 <siti> yeah I had not heard about them until about 5 days ago
21:56:35 <sjanssen> siti: tries are useful for all sequence like data structures
21:56:43 <sorear> siti: http://www.cse.unsw.edu.au/~dons/tmp/A.hs
21:56:48 <sorear> that's it
21:57:20 <siti> ok
21:57:33 <sjanssen> ouch, that is worse that I thought
21:57:56 <siti> hmm, what do you think about bytestrings (I am not volunteering) done all in low level haskell?
21:58:18 <sorear> sjanssen: wrt the benchmark?
21:58:40 <sjanssen> sorear: yes
21:59:13 <sjanssen> somebody ought to write a pure Haskell version of compare and see how that does
21:59:34 * sorear adds to TODO list, near the top
22:00:06 <siti> are the Foreign.ForeignPtr, and Foreign.Ptr super optomized like you'd expect from c?
22:00:28 <sorear> I hope :)
22:00:32 <siti> hehe
22:00:37 <sorear> they're used in the shootout
22:00:37 <sjanssen> I don't see what you can optimize in Ptr
22:00:42 <sjanssen> it's just an address
22:01:01 <sorear> sjanssen: Inlining and unboxing will make a huge diff
22:01:07 <siti> what I mean, as in it's not calling some c function
22:01:22 <sorear> sjanssen: no sense calling a function to increment a Ptr :)
22:01:24 <siti> it's just the raw asm instructions for accesing a pointer
22:01:31 <sjanssen> sorear: ah, true
22:01:48 <sorear> siti: yes, it generates the raw asm instructions.
22:01:52 <sjanssen> most of the optimizations come for free with ghc
22:02:01 <sorear> BUT
22:02:15 <siti> it's not a fair comparison but with my intersection getting called 240967 times, it only takes up 0.1%
22:02:31 <sorear> siti: http://www.hpaste.org/447
22:02:38 <sorear> siti: read that, esp. the asm-code
22:02:40 <siti> actually 1.2%*
22:02:57 <siti> I am not good at asm but I will try
22:03:10 <sorear> you don't have to be
22:03:24 <sorear> just notice the fact that the inner loop has 11 memory accesses
22:03:29 <sorear> it should have 2
22:03:38 <siti> crazy
22:03:57 <siti> so performance would suck on x86 with only 8 regs...
22:04:08 <sorear> ghc does a PATHETIC job of register allocation, and bungles the Cmm so much that even GCC can't do it
22:04:19 <siti> ok
22:04:19 <sorear> siti: no, that code is using like 2 regs at a time
22:04:31 <sorear> siti: it's an allocation issue
22:04:34 <siti> oh oops
22:04:39 <siti> I misread*
22:04:41 <dons> siti: memcmp is as fast written directly as haskell
22:04:48 <siti> ok
22:04:56 <dons> we've found that several times now, when writing the bytestring lib, and again writing the binary lib
22:05:07 <sjanssen> dons: is that changed in base now?
22:05:29 <dons> i think it still uses:
22:05:30 <dons>     | otherwise                         = inlinePerformIO $
22:05:31 <dons>         withForeignPtr x1 $ \p1 ->
22:05:31 <dons>         withForeignPtr x2 $ \p2 -> do
22:05:31 <dons>             i <- memcmp (p1 `plusPtr` s1) (p2 `plusPtr` s2) (fromIntegral $ min l1 l2)
22:05:34 <dons>             return $! case i `compare` 0 of
22:05:36 <dons>                         EQ  -> l1 `compare` l2
22:05:39 <dons>                         x   -> x
22:06:08 <sjanssen> so that should probably be changed to a pure Haskell solution
22:06:12 <siti> inlinePerformIO?
22:06:13 <sorear> I think we need a library for fast handling of small strings.
22:06:19 <sorear> siti: you don't want to know
22:06:27 <ddarius> reallyUnsafePerformIO
22:06:31 <sjanssen> siti: unsafePerformIO but more dangerous
22:06:33 <siti> cool ;)
22:06:38 <dons> ah i see. it was for the shootout.
22:06:51 <dons> in the knucleotide benchmark, the haskell memcmp was faster than a C call
22:06:54 <dons> might depend on string size.
22:06:54 <siti> I am using unsafePerformIO with my ordered array...
22:06:57 <sorear> unsafeExplodeCranium
22:06:57 <dons> e.g. this was better,
22:06:59 <dons> eq !n (Ptr p) (Ptr q) = inlinePerformIO $ IO $ go n p q
22:06:59 <dons>   where
22:06:59 <dons>     go !n p q s
22:06:59 <dons>         | n == 0    = (# s , True #)
22:07:01 <dons>         | otherwise = case readInt8OffAddr# p 0# s of
22:07:04 <dons>                 (# s, a #) -> case readInt8OffAddr# q 0# s of
22:07:06 <dons>                     (# s, b #) | a /=# b   -> (# s, False #)
22:07:09 <dons>                                | otherwise -> go (n-1) (plusAddr# p 1#) (plusAddr# q 1#) s
22:07:20 <dons> that's your daily dose of low level haskell
22:07:23 <sorear> you can't be bothered to use IO?
22:07:25 <siti> yeah memcmp will be really good for big strings because it will use sse
22:07:29 <dons> now returning you to regularly scheduled programming
22:07:31 <sorear> you have to use State# directly?
22:07:31 <ddarius> low-level GHC
22:07:34 <siti> what's the # mean?
22:07:41 <sorear> you don't want to know
22:07:47 <siti> hah
22:07:53 <sorear> @quote #
22:07:54 <lambdabot> chessguy says: heh. i think i'm officially addicted. i'm chatting in #haskell, helping hack on a haskellwiki page, browing a reddit thread about haskell, while playing a haskell video lecture in the
22:07:55 <lambdabot> background
22:07:57 <dons> sorear: its possible IO would be ok here. but we don't get the primops directly
22:08:00 <sorear> @quote #
22:08:01 <lambdabot> Cale says: [dmead] yo yo yo yo what it is mother fuckers [Cale] dmead: this isn't #scheme
22:08:17 <dmead> :o
22:08:28 <sorear> dons: peek optimizes to readInt8OffAddr# ...
22:08:46 <dmead> someone should fork firefox to use threads...
22:08:50 <siti> lol
22:09:02 <dons> sorear: sure. i spend all day writing this code. for some reason i didn't get quite the code i wanted though.
22:09:07 <dons> usually ghc gets it right
22:09:10 <siti> yeah I hate it how firefox locks up when the other tabs are rendering :(
22:09:23 <dmead> yea
22:09:26 <sorear> We should rewrite firefox in haskell.
22:09:28 <ddarius> Yay! The internet is deciding to work again.
22:09:30 <siti> lol
22:09:34 <sorear> It should take about a week.
22:09:34 <dmead> lawls
22:09:42 <dmead> indeed
22:09:45 <dons> sorear: you should have a go reimplementing some of the shootout benchmarks. its enlightening.
22:09:59 <siti> haskell needs a little more optimization before it could power a webbrowser ;)
22:10:06 <araujo> sorear, that ideas has come to my mind sometimes ....
22:10:10 <sorear> dons: for speed?  I'm good at golfing :)
22:10:11 <dons> siti: seriously?
22:10:11 <ddarius> siti: Not at all.
22:10:13 <dons> how about threads.
22:10:23 <dmead> don't we have threads?
22:10:32 <dons> i doubt it would be fundamental compiler performance that matters
22:10:40 <dons> you just need C-ish speed, and a good implementation
22:10:51 <siti> well threads rock in haskell...
22:10:59 <siti> so that's no problem
22:11:05 <dmead> if i had the time i'd crack open the firefox code
22:11:07 <sorear> yeah, if Firefox was rewritten using a garbage collector and with lazy lists of characters it would be as slow as Haskell!
22:11:15 <dmead> and add threads around the spawn tab function(s)
22:11:15 <siti> I love having 195% cpu utilisation
22:11:16 <ddarius> We could exploit good concurrency support for simple robust reflowing algorithms
22:11:34 <siti> unfortunately ghc needs a parallel garbage collector...
22:11:43 <siti> to get better scalability
22:12:26 <dmead> shit
22:12:28 <dmead> if i wasn't graduating
22:12:33 <araujo> i really don't know why firefox has to be so cpu consuming ..... if i could find a nice engine other than gecko , it'd be nice to give it a try with Haskell
22:12:39 <dmead> i'd try and add threads to ff for SOC
22:12:47 <siti> firefox 3.0 is using cairo :p
22:13:02 <dmead> did they post a build of that yet?
22:13:06 <sjanssen> dmead: I have a feeling that is way too much work for one person over three months
22:13:06 <siti> dmead: adding threads is possibly the hardest thing you can do
22:13:07 <siti> yes
22:13:07 <dcoutts> siti: cool
22:13:21 <sorear> DHTML is evil.
22:13:50 <sorear> Writing a nice, simple, modular, HTML-only web browser in haskell should be trivial, even with all the quirks.
22:13:57 <dmead> i dunno...
22:14:01 <araujo> yes sorear
22:14:02 <siti> I think firefox 3.0 is a bit better with threads, but you can't take a project that is not designed for it and in a few months make it use threads well :(
22:14:09 <sorear> but DOM seems to force an internal architecture on the browser ...
22:14:09 <araujo> sorear, we just need a nice engine
22:14:32 <dmead> well i'm not talking about threading gecko or something
22:14:43 <dmead> but adding threads to GUI actions is not really that hard
22:14:50 <sorear> araujo: I would never trust an engine in a non-memory-safe language
22:14:52 <araujo> Unless , we write one on Haskell :-)
22:14:56 <dmead> just enough so things done lock when other tabs are rendering
22:14:59 <siti> well how do they work around that gtk+ needs everything in one thread?
22:15:13 <dmead> i wasn't aware that it does
22:15:29 <siti> well it does, the only way to work around it is with lots of locks :(
22:15:47 <dmead> in my experience with java it's not too bad
22:15:49 <dmead> but thats java..
22:15:54 <dmead> i would think
22:16:20 <dmead> that adding a thread call in the SIGC signals  (or whatever they use for actionlisteners)
22:16:25 <dmead> would be enough
22:16:36 <araujo> Ok, if someone is willing to work on a haskell web browser, ping me
22:16:44 <siti> lol
22:16:49 <dmead> :P
22:17:01 <siti> I think it's a bit to ambitious with the base libraries haskell has atm
22:17:18 <ddarius> araujo: What's the hardest part of a web browser?
22:17:22 <araujo> siti, it's possible
22:17:25 <sorear> there already is something of a web prowser
22:17:29 <mbishop> Rendering html
22:17:33 <sorear> it's one of the Fudgets demos
22:17:40 <siti> cairo/gtk2hs needs more work to make it safe etc (I have not got around to doing it yet...)
22:17:41 <sorear> night all.
22:17:47 <ddarius> mbishop: Exactly.  What's the hardest part of that?
22:17:55 <mbishop> Meeting standards?
22:17:56 <dmead> night
22:18:12 <sorear> I think ECMAscript/DOM will be harder, at least if we want efficiency.
22:18:16 <dcoutts> siti: ah yes
22:18:21 <araujo> ddarius, i guess it is hardest for supporting more than html
22:18:28 <dcoutts> siti: we should get a bug into our bug db about that
22:18:29 <sorear> A element has been changed - find the optimum rerender!
22:18:36 <sorear> and you need to use CopyArea!
22:18:39 <dcoutts> siti: just to clarify what functions are unsafe
22:19:01 <sorear> bye
22:19:15 <araujo> siti, gtk2hs is good enough to code a nice and simple gui for it
22:19:23 <araujo> Nothing complex
22:19:36 <sorear> It needs to use termcap.
22:20:24 <siti> yeah, the problem I see is that to fix it lots of foreign pointers with finalizers / ref counting with cairo will need to be used which will mean there is no garuntee when the GC gets rid of the surfaces :(
22:20:44 <siti> we need a way to tell the GC that stuff is high priority so it should check it really often
22:21:02 <siti> araujo: yeah gtk2hs is pretty good all round, just cairo needs some work
22:21:21 <dcoutts> siti: ideally that's what the with* versions were supposed to do - to guarantee block scoped allocation
22:21:27 <siti> yep
22:21:32 <araujo> siti, i wouldn't use cairo ... at least, not for now
22:21:54 <siti> araujo: but, you *really* want a nice vector rendering engine :p
22:22:07 <siti> and you don't want to reinvent that, it would take years..
22:22:29 <araujo> I just want to be able to read plain html stuff ... that's why i would use an existing simple engine
22:22:36 <siti> I see
22:22:41 <araujo> it could be re-invented later :-)
22:22:46 <siti> lol
22:26:21 <siti> does anyone know how much memory overhead per each bytestring there is, approximately?
22:26:35 <dcoutts> siti: 30 bytes
22:26:40 <dcoutts> on a 32bit box
22:26:44 <siti> k
22:26:45 <dcoutts> > 9 * 4
22:26:46 <lambdabot>  36
22:26:54 <dcoutts> oh 36 maybe
22:26:55 <siti> thanks
22:27:42 <dcoutts> (with my imaginary optimal representation it'd be 7 rather than 9 words)
22:28:11 <siti> I am just trying to diagnose my massive memory usage, it should be only be about 50-100MB but it is about 250 :(
22:28:21 <dcoutts> the theoretical minimum is 2 words, 8 bytes on 32bit box
22:29:06 <dcoutts> siti: if most your bytestrings are all substrings of bigger ones then it's only 5 words rather than 9
22:29:06 <siti> it seems nothing is at fault, but there has to be something :(
22:29:30 <siti> in this case I am copying them so they are not...
22:31:57 <stefanha> I would like to read 8-bit unsigned data (Word8) from a file, and use it efficiently as a buffer of Doubles (UArray).  How can this be done (maybe using hGetBuf and then fromIntegral?)?
22:34:42 <sjanssen> stefanha: so you want to transform each individual byte to a Double?
22:35:05 <sjanssen> (ie you don't want to slurp up the file raw and treat them as Doubles)
22:35:54 <stefanha> Yes, I need to transform bytes to Doubles.
22:36:05 <sjanssen> okay
22:36:35 <sjanssen> Data.ByteString should be easier to use than hGetBuf
22:37:11 <dons> yeah, so suck them in as a lazy bytestring, and then call whatever function you're using to decode bytes to doubles on that.
22:37:20 <dons> maybe even as a strict bytestring, if the file is under 10M
22:37:39 <stefanha> Okay, thanks.  I'll look at bytestring.
22:37:40 <sjanssen> once you've got the ByteString, it's just: listArray bound . map fromIntegral . Data.ByteString.unpack
22:37:51 <stefanha> thanks
22:38:42 <kolmodin> dons, dcoutts: what do you think of a new binary release?
22:39:07 <sjanssen> dons: and here is when you say "that function is optimized into a single loop with our new streams framework" :)
22:40:41 <kolmodin> dons, dcoutts: I'll tag 0.3 unless you feel strongly otherwise
22:42:55 <siti> any ideas why my program is using 200MB, I have 30,000 strict bytestrings in a map which add up to 700KB (not including overheads), I have about 20MB of my custom ordered array (I am pretty sure it does not leak memory because it uses ForeignPtrs which are GC'd correct?
22:43:32 <sjanssen> siti: are the bytestrings slices of a larger document?
22:43:44 <siti> I am using copy so no
22:43:58 <sjanssen> what else is going on in the program?
22:44:31 <siti> it receives some data via a network socket and chucks it in the map...
22:44:36 <Cale> Maybe try the heap profiler?
22:44:52 <siti> I am pretty sure there is not space leaks because doing lookups are instant...
22:44:55 <sjanssen> siti: maybe you're being lazy in the map?
22:45:08 <sjanssen> or lazy in the elements in the map?
22:45:33 <siti> maybe
22:45:58 <siti> Cale: heap profiler?
22:46:00 <Cale> If that's the case, then the things which they're computed from won't be GC'd.
22:46:13 <sjanssen> are the ByteStrings keys or elements in your map?
22:46:17 <siti> keys
22:46:23 <sjanssen> and the elements are?
22:46:36 <siti> my low level ordered array...
22:48:58 <dons> kolmodin: yeah sounds reasonable
22:48:59 <siti> it's very strange :(
22:48:59 <Cale> compile your program with -prof -auto-all, and then run it with +RTS -hc -RTS on the commandline, which should produce a .hp file. You can then run hp2ps on that to get a postscript graph of which cost centre allocated what portion of the memory over time
22:49:13 <siti> Cale: ok thanks
22:49:19 <kolmodin> dons: done
22:49:49 <Cale> http://www.haskell.org/ghc/docs/latest/html/users_guide/prof-heap.html for more details
22:49:51 <lambdabot> Title: 5.4. Profiling memory usage, http://tinyurl.com/ycro5f
22:50:06 <Cale> and http://www.haskell.org/ghc/docs/latest/html/users_guide/profiling.html for profiling in general
22:50:09 <lambdabot> Title: Chapter 5. Profiling, http://tinyurl.com/kwh6c
22:50:26 <siti> yeah the docs were pretty confusing when I tried doing it another time
22:50:33 <siti> but your explanation sounds good :)
22:51:12 <Cale> Depending on which cost centre seems to be the problem, you might want to annotate your source with extra cost centres within the big one.
22:51:26 <siti> how do you annotate ?
22:51:47 <Cale> {-# SCC "name" #-} <expression>
22:52:06 <Cale> where "name" is whatever you'd like the cost centre to be called
22:52:37 <siti> ok
22:52:40 <Cale> The annotation extends as far to the right as possible when parsing.
22:52:46 <siti> I see
22:53:23 <ailndx> > channels
22:53:24 <lambdabot>   Not in scope: `channels'
22:53:54 <siti> I am using about 140MB on the haskell heap which I guess does not count the allocated stuff, e.g. bytestrings and ordered array...
22:55:30 <kolmodin> binary-0.3 - now available in a hackage near you
22:56:35 <dons> kolmodin: go ahead and announce it too. describe any changes that have occured, according the to the darcs log.
22:57:12 <kolmodin> I'm afraid I don't have time atm
22:57:39 <dons> ok.
22:57:44 <kolmodin> about to go to work. hopefully I have some time before leaving tomorrow
22:57:55 <kolmodin> going to help my brother move into his new appartment
22:58:23 <kolmodin> I could perhaps write something cunning on the bus to my parents.. :)
23:01:27 <Cale> dons: ByteStrings would be included in heap profiling, right?
23:01:31 <dons> yep
23:01:35 <Cale> okay, good
23:08:55 <dcoutts> siti: can you avoid copying them? just take them as substrings of your input?
23:09:08 <siti> I could try that
23:09:20 <siti> I have a graph but it's B&W
23:09:24 <siti> and I have to go again...
23:09:35 <siti> is it just evince, or are the graphs B&W?
23:10:05 <dcoutts> siti: I think hp2ps has a colour option
23:13:14 <dibblego> ?hoogle a -> [a]
23:13:15 <dibblego> ?hoy!
23:13:15 <lambdabot> Prelude.repeat :: a -> [a]
23:13:16 <lambdabot> List.intersperse :: a -> [a] -> [a]
23:13:16 <lambdabot> Prelude.(:) :: a -> [a] -> [a]
23:13:16 <lambdabot> Unknown command, try @list
23:13:43 <siti> dcoutts: yep it does thanks
23:14:11 <dcoutts> siti: you mean the colour thing or the allocation problem?
23:14:26 <siti> the colour
23:14:48 <dcoutts> siti: ok, so is it possible for you to take substrings without copying them? I suspect that may make all the difference.
23:15:53 <siti> ok, it might not in my case because I am lowering the string which is copying it I think
23:16:24 <dcoutts> true, unless you can lower the whole thing first before taking substrings
23:17:16 <siti> ok
23:17:52 <siti> the problem with the heap profile it doesn't actually show how much each bit is taking up, only how much it allocates
23:18:26 <siti> I don't mind if it allocates terrabytes (it is actually ;)) but it holding on the the memory is the issue :(
23:18:32 <Cale> The shades of grey represent the same things as in the legend -- it's sorted.
23:19:13 <Cale> It shows how much allocated stuff is actually on the heap at each point in time.
23:19:20 <dmwit> ?seen jcreigh
23:19:21 <lambdabot> jcreigh is in #haskell. I last heard jcreigh speak 1h 23m 43s ago.
23:20:07 <Cale> The ordinary profiler counts allocation without taking deallocation into account, the heap profiler should reflect the actual amount of memory needed.
23:29:32 <siti> oh man it looks like all the allocations are in the ordered array, I forgot to use 21094979*8 :( because I use a Word64 not a byte
23:29:52 <siti> which is about 160MB
23:30:17 <siti> thanks for the help guys I learnt a lot anyway...
23:32:13 <thedward> ?seen TSC
23:32:14 <lambdabot> TSC is in #haskell-blah and #haskell. I last heard TSC speak 1h 47m 40s ago.
23:32:41 <thedward> ?tell TSC http://darcs.antejentacular.org/repos/X11/ ; You'll probably also need http://darcs.antejentacular.org/repos/X11-extras
23:32:41 <lambdabot> Consider it noted.
23:33:20 <rubenz> Is there some way to automatically some C code to Haskell?
23:33:53 <ski> sentence no verb error
23:33:56 <dmwit> rubenz: Like using the FFI, or what?
23:34:14 <rubenz> Is there some way to automatically convert some C code to Haskell?
23:34:33 <rubenz> sorry
23:34:41 <Pseudonym> Not if you want all the bugs and segfaults too.
23:35:01 <rubenz> Not really
23:35:01 <dmwit> ?hoogle setInputFocus
23:35:07 <lambdabot> No matches found
23:36:50 <dmwit> :t when
23:36:53 <lambdabot> forall (m :: * -> *). (Monad m) => Bool -> m () -> m ()
23:37:57 <nomouse> ?help
23:37:58 <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
23:38:06 <nomouse> ?list
23:38:07 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot/COMMANDS
23:39:32 <nomouse> ?help tell
23:39:33 <lambdabot> tell <nick> <message>. When <nick> shows activity, tell them <message>.
23:39:45 <opqdonut> :)
23:45:34 <dolio> :t either
23:45:37 <lambdabot> forall a c b. (a -> c) -> (b -> c) -> Either a b -> c
23:49:14 <dons> thedward: so you've got it working on your 64 bit machine?
23:52:49 <TSC> thedward: Thanks, having a look... did you also change X11-extras?
23:52:50 <lambdabot> TSC: You have 1 new message. '/msg lambdabot @messages' to read it.
23:55:56 <TSC> Duh, I'm stupid; my 64-bit computer is at uni.  I'll test it tomorrow morning (:
23:56:04 <thedward> TSC: yeah, there were some Ints in there too
23:56:20 <thedward> dons: I've got it working well enough to make xmonad go.
23:56:33 <dons> sweet. yes, there's a couple of spots in X11-extras we can fix right now.
23:56:39 <dons> do you have a patch for that? I can apply it.
23:56:41 <thedward> I have patches for that, too
23:56:48 <dons> send 'em over.
23:56:55 <dons> dons@cse.unsw.edu.au
23:57:02 <thedward> http://darcs.antejentacular.org/repos/X11-extras
23:57:04 <lambdabot> Title: Index of /repos/X11-extras
23:57:05 <sjanssen> do the patches break compatibility with the broken X11 package?
23:57:18 <dons> sjanssen: you want to take care of that ^^
23:57:18 <thedward> sjanssen: oh. hum. almost certainly.
23:57:22 <dons> ah
23:57:29 <dons> ok. so we play the waiting game. hmm.
23:57:52 <dons> thedward: can you reply to your X11 darcs patch mail with some info on whether the X11 patches break anything?
23:58:33 <dons> i.e. does the external X11 api change at all? and if so, why?
23:59:07 <thedward> dons: I'll have to go through and double check; I know I didn't have to make any changes to xmonad
23:59:32 <dmwit> I put this in xmonad's Main.hs:
23:59:38 <thedward> It would also probably be a good idea for me to test them on a 32-bit machine, just to make sure it didn't break anything there.
23:59:43 <dons> yeah, since we want to convince Sven that its not going to break anything.
23:59:46 <dons> before he'll apply it
23:59:50 <dmwit> handle (ButtonEvent {button = b}) = trace "click event" >> trace (show b)
23:59:57 <dons> dmwit: ok. good start.
23:59:59 <dmwit> Yet ~/.xsession-errors shows nothing.
