00:33:30 <Saizan> !paste
00:33:31 <hpaste> Haskell paste bin: http://fserv.pikapphi.umr.edu:8000/
00:41:50 <Saizan> > unlines . zipWith (++) "a" . lines $ "foo\n\nbar"
00:41:50 <lambdabot>  Couldn't match `[a]' against `Char'
00:42:48 <Saizan> > lines $ "foo\n\nbar"
00:42:49 <lambdabot>  ["foo","","bar"]
00:43:22 <Saizan> > unlines . lines $ "foo\n\nbar"
00:43:24 <lambdabot>  "foo\n\nbar\n"
00:44:20 <glguy> > printf "%4d: %s" 15 "sample line" :: String
00:44:20 <lambdabot>  Add a type signature
00:44:28 <glguy> > printf "%4d: %s" (15::Int) "sample line" :: String
00:44:29 <lambdabot>  "  15: sample line"
00:44:50 <glguy> > printf "%4d: %s" (15::Int) "" :: String
00:44:51 <lambdabot>  "  15: "
00:48:54 <glguy> it has to do with Text.XHtml
00:50:51 <ohmega> is it not possibly to create a datatype without constructors?
00:51:11 <glguy> it is with glasgow-exts enabled
00:59:46 <glguy> I've isolated the issue to comments
01:01:06 <glguy> > unlines "\r\n\r\n"
01:01:06 <lambdabot>  Couldn't match `String' against `Char'
01:01:12 <glguy> > lines "\r\n\r\n"
01:01:13 <lambdabot>  ["\r","\r"]
01:01:21 <glguy> > lines "\r\n\r\n\r"
01:01:22 <lambdabot>  ["\r","\r","\r"]
01:03:19 <Baughn> glguy: Were you expecting something else?
01:03:34 <glguy> Baughn: I was just making sure
01:03:39 <glguy> it confirmed what I wanted it to
01:04:06 <Baughn> I just wish nobody had ever thought of using anything but plain \n for newline. >_<
01:05:33 <blackdog> g'day all
01:05:47 <Vq^> g'day mr Dog
01:06:05 <glguy> Saizan: check it out now
01:06:18 <quazimoz> any fortran guys here?
01:06:18 <blackdog> what's the current state of the art in handling haskell source? i vaguely remember screwing around with programatica and Typing Haskell In Haskell, but i've been out a while...
01:06:36 <Saizan> glguy: stripping '\r's while adding numbers?
01:06:48 <glguy>       addLineNums l                                                                                                                                   = pre << primHtml (unlines
01:06:51 <glguy>                           . zipWith (\a b -> printf "%4d: %s" a b) [(1::Int)..] . init . lines . filter (/='\r') . drop 5 $ l)
01:07:00 <blackdog> SyntaxNinja? Shae? Dons? Where are the old guard? :)
01:07:09 <glguy> irssi made that worse than it was supposed to look
01:07:13 <glguy> but it's still ugly code atm
01:07:53 * glguy sets about cleaning up, for example removing \a b
01:09:32 <Saizan> well, if hscolour didn't add <pre> it could be better :)
01:09:48 <glguy>         = pre << primHtml (unlines
01:09:49 <glguy>                           . zipWith (printf "%4d: %s") [(1::Int)..]
01:09:49 <glguy>                           . init . lines . drop 5 $ l)
01:09:51 <glguy> getting better
01:10:04 <glguy> (the filter was needed for both cases, numbered and otherwise)
01:11:50 <Saizan> (you could filter it at the insertion so)
01:12:08 <glguy>       addLineNums
01:12:09 <glguy>         = (pre <<) . primHtml . unlines
01:12:09 <glguy>         . zipWith (printf "%4d: %s") [(1::Int)..]
01:12:09 <glguy>         . init . lines . drop 5
01:12:19 <glguy> I'm not sure if it is occuring at insertion
01:12:49 * Saizan checks happs-state
01:13:34 <glguy> I think there is a bug in HsColour
01:13:42 <glguy> that doesn't clean \r off the end of a comment
01:14:04 <Saizan> well there's plenty of \r in the state
01:14:06 <glguy> ok
01:14:09 <glguy> I'll filter
01:14:12 <glguy> there
01:14:38 <Saizan> "lots of lines" is typed at the browser right?
01:14:45 <glguy> yeah
01:15:16 <glguy> input now filtered for \r
01:15:18 <Saizan> ah, nevermind, i didn't see the '\n's mixed with the words
01:16:00 <hpaste>  glguy pasted: input test at http://fserv.pikapphi.umr.edu:8000/2#1
01:16:11 <glguy> ok, fixed on all new input
01:17:52 * Saizan wonders who decided that the web must use windows' newline
01:19:23 <glguy> I'm going to repair the existing state when I one off
01:19:49 <glguy> existing state cleansed :)
01:20:47 <glguy> one-off removed :)
01:21:41 <Saizan> :)
01:22:17 <Saizan> we need a stateconverter
01:22:47 <glguy> I've pushed the line-numbres patch to the repo
01:22:56 <glguy> if you wanted the new version
01:23:17 * Saizan pulls
01:24:15 <glguy> I also made it such that the line-numbers check box stays checked whiel line numbers are on
01:25:59 <glguy> I'm working on config file support
01:26:08 <glguy> haven't decided if its necessary yet
01:26:14 <Saizan> ah, right, one could also add coockies to remember the preference
01:26:29 <glguy> HAppS has User Session handling for that area
01:26:33 <glguy> I need to read up
01:27:52 <glguy> ?hoogle Ordering
01:27:53 <lambdabot> Prelude.Ordering :: data Ordering
01:28:01 <glguy> ?hoogle Ordering -> Bool
01:28:02 <lambdabot> No matches, try a more general search
01:28:12 <glguy> ?hoogle Ordering -> Ordering -> Bool
01:28:12 <lambdabot> No matches, try a more general search
01:29:41 <ClaudiusMaximus> :t compare EQ
01:29:43 <lambdabot> Ordering -> Ordering
01:30:13 <ClaudiusMaximus> :t (/= EQ)
01:30:15 <lambdabot> Ordering -> Bool
01:30:17 <glguy> yeah
01:30:30 <glguy> I just wondered if there were otherfunctions
01:37:14 <Saizan> mmh, how do you see multi-channel?
01:37:44 <glguy> The rudimentary thing that is the irc bot would need to be improved :)
01:39:56 <glguy> I think I found what causes that bug in hscolour
01:40:10 <glguy> check in the darcs HEAD version first
01:40:41 <Saizan> yeah we would need a StateT to let it join channels
01:41:16 <Saizan> darcs HEAD version?
01:41:25 <glguy> hscolour HEAD verions
01:41:28 <glguy> hscolour from darcs
01:45:09 <Saizan> err, i don't follow you.. what's HEAD?
01:45:18 <glguy> the development version
01:45:41 <glguy> *Language.Haskell.HsColour.CSS> hscolourFragment False "--this is a test\r\n"
01:45:42 <glguy> "<pre><span class='comment'>--this is a test\r</span>\n</pre>"
01:45:51 <glguy> hscolour is spliting the \r and \n up
01:46:35 <opqdonut> hrrr
01:47:01 <Saizan> ah, yes
01:47:28 <Saizan> that's what i was trying to say in query before :)
01:48:03 <Saizan> i've installed the darcs version from the start
01:48:48 <blackdog> hey, quick straw poll - how many of you guys use emacs for hacking haskell? am thinking of writing a mode for haskell-semantics aware highlighting...
01:49:19 <blackdog> (other guys go to thailand for sex, i come here to drink beer and write code :) )
01:49:25 <opqdonut> blackdog: i use
01:49:39 <notsmack> @where haskell-mode
01:49:39 <lambdabot> http://haskell.org/haskellwiki/Haskell_mode_for_Emacs
01:50:32 <blackdog> notsmack: yeah, i use that. but it only knows syntax.
01:50:45 <notsmack> blackdog: yeah
01:51:05 <blackdog> it'd be really nice to have something that can tell "oh, that expression won't type properly" and colours it red
01:51:06 <glguy> Saizan: I fixed it
01:51:12 <notsmack> i wasn't sure if you /actually/ meant semantics :)
01:51:12 <glguy> Saizan: I'm going to submit a patch
01:51:24 <blackdog> maybe colour exps that depend on it a different colour
01:51:33 <blackdog> notsmack: *grin*
01:51:53 <blackdog> if i were any less concerned with syntax i'd be hacking lisp :)
01:51:54 <Saizan> http://saizan.no-ip.org/static/test.html <-- it doesn't help much even if it doesn't split \r\n however
01:52:29 <Saizan> Prelude> writeFile "test.html" "<pre>asdasd\r\nadasdas</pre>"
01:52:55 <blackdog> but i'd like to offload all the typing/parsing stuff to some library that i don't have to care too much about - hopefully will just have to write the elisp and some glue code
01:53:18 <roconnor> @yow
01:53:18 <lambdabot> I just got my PRINCE bumper sticker ... But now I can't remember WHO he
01:53:18 <lambdabot> is ...
01:53:44 <notsmack> blackdog: my haskell-foo isn't to that point yet, but i imagine you've looked at lambdabot's plugins?
01:53:47 <blackdog> @vixen
01:53:48 <lambdabot> <undefined>
01:53:53 <blackdog> notsmack: i wrote one :P
01:54:00 <blackdog> damn, where'd vixen go?
01:54:02 <blackdog> i'm sad now
01:54:26 <dons> i broke the file format last week
01:54:26 <lambdabot> dons: You have 1 new message. '/msg lambdabot @messages' to read it.
01:54:31 <dons> and have been travelling, so haven't fixed it yet
01:54:35 <blackdog> bastardo!
01:54:41 <dons> (it uses a gzipped, binary state file now
01:54:44 <blackdog> but g'day don, long time no speakee
01:54:47 <dons> instead of compiling in all those regexes)
01:54:50 <dons> heay
01:54:50 <blackdog> how're things? Where are you?
01:54:54 <dons> in Nice
01:55:05 <dons> popl/padl
01:55:10 <roconnor> @users
01:55:10 <lambdabot> Maximum users seen in #haskell: 311, currently: 272 (87.5%), active: 24 (8.8%)
01:55:16 <blackdog> i thought i'd get you out of the woodwork if i talked about haskell stuff without mentioning emacs :)
01:55:20 <blackdog> oh, very cool
01:55:25 <blackdog> am in ayuthaya, thailand
01:55:44 <dons> nice
01:55:46 <dons> working?
01:55:55 <blackdog> nope
01:56:08 <blackdog> got paid mad benjamins for hacking embedded basic code for the asian games
01:56:11 <blackdog> now i'm just cruising
01:56:28 <blackdog> how's POPL?
01:56:39 <dons> yeah fun.
01:56:58 <glguy> Saizan: either way I've emailed the patch, both cases should be resolved now
01:57:08 <dons> good to hear you got some benjamins
01:57:29 <glguy> ?teens
01:57:29 <lambdabot> Lately, I have seen blackdog, boegel, dons, glguy, itkovian, notsmack, opqdonut, roconnor and saizan.
01:57:33 <glguy> ?losers
01:57:33 <lambdabot> Maximum users seen in #haskell: 311, currently: 271 (87.1%), active: 24 (8.9%)
01:57:38 <earthy> um, right.
01:57:48 * earthy sees a little discovery-problem with wxhaskell
01:57:52 <blackdog> dons: hey, you've done stuff with manipulating haskell ASTs, yeah? what's the state of the art? don't want to rewrite stuff if i don't have to, but i need more information than just calling ghci and seeing if stuff types properly...
01:57:55 <earthy> yes, there is a darcs repository
01:58:05 <earthy> but not even the wiki tells you where!
01:58:21 <dons> blackdog: AST hacking in haskell?
01:58:24 <blackdog> yeah
01:58:27 <Saizan> glguy: perfect
01:58:29 <blackdog> mostly type info
01:58:36 <dons> for what data type?
01:58:41 <dons> hsSyn, or some custom type
01:59:03 <blackdog> i want to maintain a tree for a haskell program that reflects what's in the emacs buffers
01:59:07 <dons> well, can you use QuickCheck to verify other conditions
01:59:21 <blackdog> so you get instant feedback on your code...
01:59:25 <glguy> Saizan: that's two patches for me in one day
01:59:28 <dons> sounds very nice
01:59:34 <glguy> Saizan: my first two actually
01:59:38 <glguy> both trivial though :(
01:59:46 <dons> blackdog: so sounds like you want to bind to ghc-api
01:59:52 <blackdog> dons: am not fussed as to the mechanism, though. would i be best off ripping stuff out of ghc/ghci, or is there a lib?
01:59:55 <blackdog> yeah, basically.
01:59:55 <glguy> both one liners :)
01:59:57 <dons> and then get proper lexer, parser and type control
02:00:03 <blackdog> zackly
02:00:14 <dons> i reckon a binding to ghc-api will work best in the long run
02:00:21 <Saizan> glguy: in "true haskell form" one liners are half a function :D
02:00:49 <blackdog> ok. Didn't the programatica guys have some approach to the haskell IDE thing?
02:01:11 <dons> you could ask on -cafe, waern and pepe are working on ghc-api editor stuff at the moment
02:01:14 <dons> its quite hot
02:01:39 <blackdog> good ideo. cheers mate
02:02:40 * glguy tries to remember who said that they had registered hpaste.com already
02:02:49 <earthy> ghc-api editor stuff... me waaaant
02:02:59 <blackdog> g'day earthy
02:03:04 <blackdog> yeah, would be nice, hey. :)
02:03:08 <dons> glguy: someone in here?
02:03:22 <blackdog> especially when you see how much cool shit they can do with braindead languages like vb and java
02:03:25 <blackdog> :)
02:03:27 <glguy> if I heard it at all, it was here
02:03:34 <earthy> otoh, linking libghc to vim would be somewhat... heavy. ;)
02:03:40 <dons> yeah
02:03:45 <glguy> i might be thinking of something similar buy different, however
02:03:58 <earthy> so what I *really* want is something like a ghci-like repl
02:04:04 * notsmack yells "Yi!" and goes to bed
02:04:10 <blackdog> don, still using yi?
02:04:12 <earthy> with easier i/o than ghci provides
02:04:14 <blackdog> heh :)
02:04:15 <glguy> ?yow
02:04:15 <lambdabot> LOOK!!  Sullen American teens wearing MADRAS shorts and "Flock of
02:04:15 <lambdabot> Seagulls" HAIRCUTS!
02:04:25 <dons> nah, but its still under development
02:04:27 <dons> active
02:04:31 <dons> jyp is doing the work now
02:04:35 <blackdog> link it to yi and load it incrementally - no use, no pay
02:04:37 <bringert> glguy: hpaste.com seems to be available
02:04:57 <earthy> right.installing darcs requires me to update 130-ish packages on fc6...
02:05:03 <dons> this is why we need a haskell server..
02:05:36 <earthy> btw, dons, did you see my new haskell indenter for vim?
02:05:40 <dons> earthy: get anywhere with 'binary' and dazzle?
02:05:47 <earthy> it's not quite as non-functional as that japanese thing. :)
02:06:09 <dons> earthy: i did -- a few weeks ago?
02:06:26 <dons> not sure if I tried it out yet hmm. should owrk in vim 6/
02:06:26 <earthy> dons: nah, I was kinda pooped when I got home after riding my bike against the force 9 gale and rain
02:06:28 <dons> ?
02:06:33 <dons> ah yes
02:06:37 <earthy> it should, but there's a nasty gotcha
02:07:14 <earthy> on the line with setlocal indentkeys, there should be a \ before the |
02:07:22 <dons> huh
02:07:37 <earthy> | is a command separator in vimscript
02:07:41 <earthy> and > is a valid command in vimscript
02:07:44 <dons> didn't know that
02:07:55 <earthy> so <|> *looks* like the | key-code, but it really is not. ;)
02:08:07 <dons> mmm
02:08:09 <blackdog> oh, i ran into another old gotcha
02:08:12 <earthy> took me some help from #vim to find that one. :)
02:08:21 <blackdog> one of my programs reads in /usr/share/dict/words
02:08:21 <dons> ?paste
02:08:24 <blackdog> and chuckts it into a map
02:08:26 <blackdog> s
02:08:28 <blackdog> Set, rather
02:08:34 <lambdabot> http://fserv.pikapphi.umr.edu:8000/
02:08:40 <blackdog> inevitably, this is the slowest part of my program.
02:08:46 <dons> using bytestrings?
02:08:48 <blackdog> it would be really nice to precompile it and marshal it out
02:08:52 <blackdog> FPS?
02:08:53 <blackdog> no
02:08:56 <blackdog> should i ?
02:08:58 <earthy> yes
02:09:00 <glguy> dons: did you see the line numbering?
02:09:01 <dons> very much so
02:09:03 <earthy> most emphatically.
02:09:06 <blackdog> *grin*
02:09:11 <blackdog> ok. am behind the eightball, it seems.
02:09:15 <blackdog> will download and try
02:09:18 <dons> i think there's even a benchmark in fps for dict/words and Set
02:09:22 <dons> comes with ghc 6.6 in base
02:09:26 <dons> you got ghc 6.6?
02:09:27 <glguy> dons: working towards being "lisp-paste" repaceable
02:09:32 <dons> great
02:09:34 <glguy> Saizan: submitted the original patch for it
02:09:56 <blackdog> oh, yeah
02:10:13 <dons> yeah, here's a spellchecker using the dict, and a Set:
02:10:18 <dons> main = do
02:10:18 <dons>   ps <- P.readFile "Usr.Dict.Words"
02:10:18 <dons>   loop (Set.fromList (P.lines ps)) `catch` \_ -> return ()
02:10:18 <dons> loop set = do
02:10:18 <dons>   ps <- P.getLine
02:10:20 <dons>   when (not (ps `Set.member` set)) $ P.putStrLn ps
02:10:23 <dons>   loop set
02:10:37 <blackdog> Where P is ... ?
02:10:49 <dons> import Data.ByteString qualifed as P
02:11:14 <dons> also, re. marshalling, you could also do this
02:11:22 <dons> so use the new binary marshalling library
02:11:26 <dons> after you've constructed the map
02:11:38 <dons> dump it to disk with: encodeFile "mystuff" mymap
02:11:59 <dons> and you can get it back later with:   decodeFile "mystuff" :: IO MyyMaptype
02:12:08 <dons> now, that might just be faster
02:12:13 <glguy> ?seen bringert
02:12:13 <lambdabot> bringert is in #haskell. I don't know when bringert last spoke.
02:12:16 <glguy> wait, i just saw him
02:12:18 <glguy> bringert: you there/
02:12:25 <dons> you could use gzip/bzip2 on it too. writeFile . gzip . encode $ mymap
02:12:36 <blackdog> dons: thnk it might be, actually
02:12:46 <dons> ?where binary
02:12:46 <lambdabot> http://darcs.haskell.org/binary
02:12:52 <glguy> ?where xhtml
02:12:52 <lambdabot> http://www.cs.chalmers.se/~bringert/darcs/haskell-xhtml
02:12:53 <blackdog> i don't care how long it takes the first time, it's just embarrassing to have it be so slow in use
02:12:55 <dons> if you want the new marshalling library
02:14:21 <bringert> hi glguy
02:14:49 <glguy> bringert: I think that the form functions in xhtml should set both id and name. do that sound correct? and would you accept a patch that changed this
02:14:57 <blackdog> Data.ByteString.lines doesn't seem to exist...
02:14:58 <glguy> presently only the name seems to be set
02:15:16 <dons> blackdog, oh, its in Data.ByteString.Char8
02:15:22 <dons> since it uses info about \n
02:15:37 <blackdog> ok, cheers
02:15:40 <dons> ?version
02:15:40 <lambdabot> lambdabot 4p473, GHC 6.5 (OpenBSD i386)
02:15:40 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
02:16:04 <bringert> glguy: hmm, that's a bit of a policy decision. If you mean that high-level ones (like textfield, but not input), I think it would be ok
02:16:21 <glguy> bringert: right, i mean the ones tha thavea String field
02:16:25 <glguy> that takes the name
02:16:30 <bringert> yeah
02:16:32 <glguy> and that are filed into the "FORM" haddock
02:16:34 <glguy> section
02:16:43 <glguy> what repo should I pull against?
02:17:01 <bringert> the darcs.haskell.org one
02:17:08 <glguy> ?where xhtml
02:17:08 <lambdabot> http://www.cs.chalmers.se/~bringert/darcs/haskell-xhtml
02:17:12 <glguy> not that one
02:17:22 <bringert> I only keep the chalmers one around to have a homepage for the package
02:17:34 <bringert> ideally, I would like to use hackage for that instead
02:17:49 <glguy> http://darcs.haskell.org/packages/xhtml/
02:17:50 <lambdabot> Title: Index of /packages/xhtml
02:17:57 <glguy> does that have my thefor patch?
02:19:18 <glguy> + widget w n markupAttrs = input ! ([thetype w,name n,identifier n] ++ markupAttrs)
02:19:21 <glguy> that's the change :)
02:19:35 <glguy> I'll send it
02:19:40 <glguy> with an actual patch
02:20:34 <glguy> the reasoning for this change is that it allows <label> to work correctly
02:21:52 <glguy> and id is the norm over name in xhtml
02:21:55 <dons> Igloo: are you able to apply these doc patches being generated from the libraries process?
02:24:19 <mq_mattr> hi yall
02:25:03 <blackdog> dons: is it intended as a drop-in replacement for all strings, then?
02:25:12 <dons> mostly, yeah
02:25:20 <dons> you dont' get pattern matching (yet..)
02:25:22 <blackdog> how about stuff like pattern-matching?
02:25:23 <blackdog> damn
02:25:24 <blackdog> :2~)
02:25:27 <blackdog> ah well
02:25:41 <dons> but, e.g. (x,xs) = (head s, tail s)
02:25:50 <blackdog> yeah
02:26:01 <blackdog> using head and tail always makes me feel so dirty
02:26:13 <blackdog> but if i'm careful (and promise to pull out in time...)
02:26:23 <dons> urgh
02:26:39 <dons> also, if you know your safe, use unsafeHead/unsafeTail
02:26:42 <dons> i.e. after a null test
02:26:47 <blackdog> :) sorry. have been working with lighting guys, my metaphors have become a little earthier
02:26:52 <blackdog> oh, ok
02:26:54 <blackdog> cool.
02:27:01 <JKnecht> * was feeling same way about his paypal acct but in a good way.
02:28:14 <blackdog> so if you create a bunch of substrings with take, do they all refer to the underlying string?
02:29:17 <JKnecht> it almost seems like the link to the 6.6 documentation saying 6.4.2 is on purpose
02:29:54 * matt_r was mq_mattr
02:30:18 <dons> backyeah
02:30:21 <dons> blackdog: yeah
02:30:33 <dons> hence O(1) substrings in the docs
02:30:40 <matt_r> dons: how is popl today?
02:31:02 <dons> sunny
02:31:07 <dons> nothign really caught my attention so far
02:31:18 <matt_r> dons: it is in nice right?
02:31:27 <dons> yeah
02:31:32 <matt_r> like the biscut
02:31:35 <dons> so food is really good
02:31:48 <matt_r> i bet
02:31:54 <dons> though i'm not sure this whole wine for lunch, wine for arvo tea, wine for dinner is conducive to research
02:32:11 <dons> you see a few people falling asleep after the lunch break
02:32:26 <dons> good thing the coffee is also good..
02:32:28 <blackdog> v nice
02:32:34 <matt_r> there is a group of us at mq who think research is impossible without rum
02:32:40 <JKnecht> sounds more like it than au
02:32:43 <blackdog> perhaps they'll wake up after dreaming of snakes biting their tails
02:32:44 <matt_r> but not really in those circumstances
02:33:04 <matt_r> more like, late at night, struggling to get anywhere - shot of rum - inspiration strikes!
02:33:15 <dons> wacky
02:33:22 <matt_r> the in the morning you turn the garbage you wrote the previous night into something useful :)
02:33:26 <dons> heh
02:33:44 <matt_r> but I think being hazy all day at popl would be less than ideal
02:34:22 <matt_r> oh, that's right, I have a haskell question......
02:34:38 <matt_r> is there a library somewhere with a Date datatype in it?
02:34:57 <dons> you mean Data.Generics?
02:35:02 <dons> with its Data class?
02:35:04 <glguy> @paste
02:35:04 <lambdabot> http://fserv.pikapphi.umr.edu:8000/
02:35:10 <matt_r> >data Date = Date {day :: Int, month::Int, year::Int}
02:35:17 <dons> oh, Date
02:35:18 <dons> sorry
02:35:20 <JKnecht> popl = princ of prof langs?
02:35:23 <dons> yeah, System.Time , iirc
02:35:25 <JKnecht> prog
02:35:38 <matt_r> I think that is overkill though
02:35:41 <blackdog> ah crap
02:35:50 <dons> ?hoogle CalendarTime
02:35:51 <lambdabot> System.Time.CalendarTime :: Int -> Month -> Int -> Int -> Int -> Int -> Integer -> Day -> Int -> String -> Int -> Bool -> CalendarTime
02:35:51 <lambdabot> System.Time.CalendarTime :: data CalendarTime
02:35:51 <lambdabot> Time.calendarTimeToString :: CalendarTime -> String
02:35:54 <blackdog> anyone know how to turn off display of evaluated vars in ghci?
02:36:08 <dons> foo >> return () ?
02:36:16 <dons> I thought there was a :set flag though now
02:36:50 <matt_r> see how many parameters CalendarTime takes?
02:37:02 <matt_r> I thought that would make it clunky to program with
02:37:09 <blackdog> i still want to bind a toplevel var, i just don't want to display it...
02:37:12 <matt_r> but I guess with all the accessors it would be ok?
02:37:20 <dons> mmm, usually you start with getCurrentTime
02:37:27 <dons> and then update using records, iirc
02:37:31 <dons> that's how I use it.
02:37:50 <matt_r> I am storing data in a list with each tuple having a date stamp.
02:38:06 * matt_r using haskell to balance the books
02:38:42 <matt_r> so my main work is accessing/comparing/etc dates over the last 12 months
02:38:52 <matt_r> I think rolling my own simple one will be best
02:39:28 <matt_r> then I can make it dd/mm/yy in default case - no mistakes from using the bloody us way!
02:39:35 <matt_r> s/us/US
02:40:15 <blackdog> yeah. the right ones are us, not the US
02:40:38 <matt_r> better yet - I think I will roll my own interface the calendar time - much better idea
02:41:46 <blackdog> that's sort of depressing
02:42:38 * matt_r loves the ghc commentary
02:44:25 <Vq^> @src zipWith
02:44:25 <lambdabot> zipWith f (a:as) (b:bs) = f a b : zipWith f as bs
02:44:25 <lambdabot> zipWith _ _      _      = []
02:44:40 <matt_r> does anyone know who was responsible for taping the ghc hackaton?
02:44:43 <Vq^> isn't "as" a keyword?
02:45:16 <matt_r> Vq^:  don't think so
02:45:26 <matt_r> > let as = 5 in as
02:45:28 <lambdabot>  5
02:45:36 <matt_r> seems not
02:45:40 <Vq^> "Renaming module imports. Like qualified and hiding, as is not a reserved word but may be used as function or variable name."
02:46:04 <matt_r> aha!
02:46:16 <Vq^> then i get it
02:46:26 <matt_r> so it is only a reserved work on import lines
02:46:26 <Vq^> i got a bit scared when emacs highlighted it :)
02:46:54 <matt_r> emacs normally knows better - but not in this case I guess...
03:17:44 <bringert> glguy: thanks, pushed
03:21:07 <earthy> as is a keyword in a very specific context. ;)
03:24:00 <kolmodin> bringert: is the build procedure for http on windows not fully cabalized?
03:24:11 <kolmodin> bringert: I saw something on the mailing list this morning
03:24:16 <bakert> What does the cabal "clean" target do by default?  Just delete .hi and .o files?
03:24:29 <kolmodin> bringert: and a comment on the http homepage
03:24:43 <kolmodin> bakert: yes, and all preprocessed files
03:25:08 <bakert> ok i think i won't bother with it and i'll have my own clean target in the makefile then
03:25:27 <earthy> whoa. that wxhaskell install on fc6 was rather painless
03:25:38 <bakert> trying to do everything through a set up program that may or may not be there is annoying!
03:26:13 <kolmodin> earthy: using ghc 6.4.x or 6.6 ?
03:26:15 <bakert> How portable is runhaskell or runghc?  Do all installations of haskell have it?
03:26:16 <earthy> 6.6
03:26:23 <earthy> runhaskell should be portable
03:26:38 <earthy> runghc may not be
03:26:38 <kolmodin> earthy: nice. so the building process has been redone?
03:26:49 <earthy> kolmodin: something has been done at least
03:26:50 <bakert> oh.  maybe i'll do runhaskell Setup.lhs clean as my clean target in the makefile then.  thanks earthy, kolmodin
03:27:04 <earthy> note that I *did* only install compat-wxGTK2-2.4.2
03:27:10 <earthy> and not wxGTK2-2.8.0
03:27:25 * earthy doesn't like tempting the gods
03:27:32 <kolmodin> earthy: yeah, but what I saw a while ago was more of a hack. we can't use it in gentoo, for example
03:27:55 <earthy> dunno how hackish it is. it works. :)
03:27:57 <kolmodin> bakert: yeah, if I'd have a makefile that's what I'd do
03:28:16 <kolmodin> earthy: that's because fc6 is a binary dist :)
03:28:34 <kolmodin> earthy: while gentoo only uses source
03:28:56 <bakert> kolmodin, i definitely have to have a makefile ... it's part of wider thing.  I'll get "all" to do clean, configure, build and "clean" to do "clean" (both with runhaskell) and that should be all i have to put in the makefile
03:42:18 <earthy> kolmodin: :)
03:53:33 <earthy> hooo joy
03:53:46 <earthy> porting Dazzle to 6.6 is rather less than 'recompile'
03:54:53 <bringert> kolmodin: I think it should work fine. the homepage comments are out of date
03:55:02 <earthy> A pattern type signature cannot bind scoped type variables `x'
03:55:03 <earthy>       unless the pattern has a rigid type context
03:56:28 <bringert> kolmodin: I don't really know anything about Windows, or how well cabal works there
03:56:41 <kolmodin> bringert: ok, I was about to say that it wasn't that hard, except I haven't actually tried
03:56:45 <kolmodin> it
03:57:00 <Vq^> what is Data.Binary ?
03:57:04 <kolmodin> I'm sure that you don't have got to have anything special to run it though
03:57:09 <kolmodin> Vq^: get it at
03:57:12 <kolmodin> ?where binary
03:57:12 <lambdabot> http://darcs.haskell.org/binary
03:57:23 <Vq^> thanks
03:57:25 <kolmodin> it's a replacement for NewBinary, GhcBinary and whatnot
03:57:35 <kolmodin> it's pure, it's fast!
03:58:04 <Vq^> tried to compile lambdabot and i had some trouble finding it
03:58:58 <kolmodin> beware with compiling with the -O flag in combination with using lazy{Put,Get}. it breaks on my system
03:59:31 <bringert> kolmodin: I've updated the homepage
03:59:41 <kolmodin> bringert: great
04:04:38 <malebria> Is there a way to define a macro?
04:04:42 <malebria> Like from C #define
04:05:02 <sieni> malebria: what do you need it for?
04:05:06 <malebria> The point is that I can't pattern match with functions: foo = "foo"
04:05:18 <malebria> f foo = True; f _ = Fasle
04:05:20 <malebria> False
04:05:48 <sieni> malebria: how would you define equality for functions?
04:06:14 <malebria> sieni: with instance Eq ?
04:06:16 <sieni> malebria: solve the halting problem?
04:06:32 <malebria> sieni: halting problem?
04:07:03 <psnl> use epigram!
04:08:56 <pejo> sieni, "Eq" implies that he's interested in some sort of syntactic equality, maybe between terms up to alpha renaming or similar.
04:09:32 <malebria> I'm talking about constant functions.
04:09:35 <malebria> foo = "foo"
04:09:37 <malebria> Like this one.
04:10:48 <pejo> malebria, what problem are you trying to solve that leads up to this problem?
04:11:11 <malebria> This one I showed: foo = "foo"; f foo = True; f _ = False;
04:11:28 <malebria> I could do it as: f "foo" = True; f _ = False
04:12:01 <pejo> malebria, and what problem brings you there?
04:12:07 <Igloo> dons: It's on my list
04:17:47 <malebria> !paste
04:17:48 <hpaste> Haskell paste bin: http://fserv.pikapphi.umr.edu:8000/
04:18:27 <hpaste>  malebria pasted: pattern match at http://fserv.pikapphi.umr.edu:8000/7
04:19:08 <malebria> pejo: It would be better not to repeat the strings with "", cause I'll not have a compilation error if I mistype one of them.
04:21:53 <sgillespie> hello
04:22:32 <sgillespie> how do i set args in ghci?
04:22:41 <sgillespie> I thought it was System.Environment.setArgs
04:22:47 <sgillespie> but i must have been mistaken
04:24:09 <Lemmih> ?type System.Environment.withArgs
04:24:10 <lambdabot> forall a. [String] -> IO a -> IO a
04:26:34 <sgillespie> how would i use withArgs?
04:30:39 <Lemmih> withArgs ["arg1","arg2"] myMain
04:31:01 <Saizan> ?ty withArgs
04:31:02 <lambdabot> Not in scope: `withArgs'
04:31:18 <earthy> ofcourse that wxhaskell couldn't work. *sigh*
04:32:44 <sgillespie> sounds fun...
04:32:47 <sgillespie> i gotta go to work
04:32:50 <sgillespie> thanks for the help
04:33:00 <shankys_> Is anyone here familiar with using Takusen for database access? I'm having some trouble creating a persistent connection with Takusen. The problem is that you need to use a function called withSession in Takusen that takes two argument: the first being the connection information, and the second being the stuff you want to do with the database. withSession creates the connection and automatically tears it down once everything is done ex
04:33:03 <pejo> malebria, Could you use an ADT instead of the strings? http://lml.ls.fi.upm.es/~jjmoreno/prog_dec/haskell_EN_read_show.pdf - "derivation from Read and Show" on one of the last slides, with the Colour example.
04:33:06 <lambdabot> http://tinyurl.com/y97koj
04:36:05 <Saizan> malebria: are you forced to use Strings? won't be better to make a data ObjOperation = Destroy | Create | Assign | ... ?
04:38:21 * Saizan should read all the buffer before starting to write
04:38:31 <bringert> shankys_: HaskellDB does the same thing. here's what I did in Hope: http://www.cs.chalmers.se/~bringert/darcs/hope/HopeFastCGI.hs
04:38:49 <bringert> shankys_: i.e. run dbConnect outside of runFastCGI
04:39:17 <bringert> shankys_: but that wouldn't work with dyn-cgi I guess
04:39:36 <bringert> shankys_: also, there is a problem if the db connection dies in between requests
04:39:55 <shankys_> bringert: I looked at that. The thing is that there's no concept of a connection in Takusen
04:40:19 <bringert> shankys_: yeah, that's a problem when you want to make it persistent
04:40:33 <bringert> shankys_: you would probably have to modify Takusen
04:40:56 <shankys_> bringert: Shit... I was really hoping there would be some way around this
04:41:04 <bringert> shankys_: if you e-amil the authors, the might think it's a fun problem
04:41:15 <shankys_> bringert: Oleg has some serious type trickery in some of the Takusen code...
04:41:52 <bringert> shankys_: as far as I know, there is no simple workaround, but if you challenge Oleg, I'm sure he will come up with some amazing trick that does it
04:42:32 <shankys_> bringert: I'll probably do that (email the authors). We've been talking to them off and on and have found a few bugs in Takusen that they fixed for us. They're usually fairly responsive.
04:43:34 <bringert> shankys_: I guess there could be a connect function that reuses connections
04:44:23 * SimonRC <3 replicateM
04:44:53 <SimonRC> I just found that I could do:  replicateM 16 [True, False]
04:45:01 <SimonRC> > replicateM 3 [True, False]
04:45:02 <lambdabot>  [[True,True,True],[True,True,False],[True,False,True],[True,False,False],[Fa...
04:45:04 <psnl> SimonRC: what does that do?
04:45:08 <bringert> shankys_: using a pool of connections tagged with their connection parameters or something
04:45:20 <SimonRC> all combinations, sorted by first item first
04:45:40 <psnl> oooh, wouls have been nice to see that ..... sometime
04:45:43 <SimonRC> I am creating a "lights out" solver
04:45:49 <psnl> SimonRC: a what?
04:45:58 <Saizan> lisppaste2: url
04:45:58 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
04:46:29 <SimonRC> specifically, this variation:   http://jayisgames.com/archives/2006/09/sigil_of_binding.php
04:46:30 <lambdabot> Title: Sigil of Binding: review, discussion, hints, tips and walkthrough at Jay is Game ...
04:46:41 <SimonRC> It is a completely logica game
04:46:54 <SimonRC> you basically have to solve a big load of xor equations.
04:47:06 <malebria> Saizan: no, not in this case. This is going to be a plugin (as soon as hs-plugins + ghc 6.6 works) and in it could be defined functions with any name.
04:47:11 <psnl> SimonRC: I don't need to fix my sim to work in rounds, I can just implement the assigment
04:47:21 <SimonRC> however, as ther are only 2^16 move combinations, a computer can just try them all.
04:47:28 <SimonRC> psnl: ol
04:47:29 <shankys_> bringert: There's an ISession class that is mentioned in the Takusen code that does the connection stuff internally, but isn't supposed to be shown to the end user. Maybe I can modify the Takusen code to use that. I should probably ask the authors if there's something easier I can do though.
04:47:31 <SimonRC> * ok
04:48:08 <shankys_> bringert: But I think you're right -- Takusen will probably have to be modified in some way...
04:49:17 <malebria> pejo: thanks for the link, but this is not the case...
04:49:51 <malebria> How do I know if a function can be used in pattern matching? : can, but ++ can't.
04:50:05 <malebria> How do I know if a function foo can be used or not?
04:50:09 <Saizan> (:) is a constrictor
04:50:22 <malebria> Saizan: hum, sure..
04:50:23 <bringert> mmm, type-level hackery APIs are always some easy to understand: doQuery:: (Statement stmt sess q, QueryIteratee (DBM mark sess) q i seed b, IQuery q sess b) => stmt -> i -> seed -> DBM mark sess seed
04:50:28 <Saizan> you can use only constructor and (+) afaik
04:50:29 <bringert> s/some/so/
04:50:45 <malebria> Saizan: + is a special case?
04:50:47 <shankys_> bringert: hehe
04:51:21 <Saizan> malebria: i think so, even if you can see it as a constructor for Peano-like naturals
04:51:32 <shankys_> bringert: Yeah, we've got some functions in our code that have 16+ line type signatures...
04:51:39 <pejo> malebria, yes, (n+k)-patterns are spoken about a lot. Google for "ban (n+k) patterns".
04:52:30 <malebria> pejo: I remember reading about a "church" against this form of patterns, like Emacs Church.
04:52:44 <Saizan> malebria: however you could have cObjs = "createObject" ...  f x | x == cObjs ...   and then you use cObjs when you want to refer to thet string..
04:53:35 <Saizan> slightly better maybe..
04:54:44 <malebria> Saizan: yes, I wondered about this, but there're other patterns in the problem, which are dependents on this one.
04:56:19 <base3> hi there
04:56:31 <base3> debian has the choice of ghc5 or ghc6 packages
04:56:43 <base3> is there any reason not to install ghc6??
04:57:05 <earthy> yes.
04:57:09 <base3> what?
04:57:17 <earthy> you want to use software that depends on ghc5
04:57:26 <base3> like what
04:57:33 <dons> if you're writing new stuff, ghc 6.6 is preferred
04:57:36 <Igloo> If you don't know of a reason then you should use 6.6
04:57:44 <base3> you;'re saying they are not backwards compatible?
04:57:55 <SamB> there are a few things that are not
04:58:08 <base3> also, i dont have the option of 6.6 only 6.2
04:58:16 <SamB> 6.2?!?!?
04:58:24 <SamB> what are you using ... debian stable?
04:58:33 <base3> yup
04:58:39 <malebria> ghc5 is not on sid
04:58:39 <SamB> ooookay....
04:58:40 <earthy> upgrade. now. :)
04:58:46 <Igloo> Use that over ghc5 anyway
04:58:51 <earthy> testing is more than stable enough
04:59:11 <SamB> it does not crash! at least, not usually!
04:59:13 * earthy kicks the hell out of wxhaskell
04:59:29 <earthy> testing is in release-freeze isn't it?
04:59:30 * SamB hands earthy his wxask
04:59:37 <malebria> Doesn't packages.debian.org have reverse depends?
04:59:39 <malebria> I would be good.
04:59:48 <malebria> Ok, this is very off topic.
04:59:55 <malebria> it
04:59:59 <SamB> malebria: the binary packages don't depend on ghc5...
05:00:06 <SamB> only the source code does
05:00:17 <earthy> wxask?
05:00:19 <SamB> anyway, they probably aren't in Debian ;-)
05:00:27 <SamB> earthy: that is wxhaskell without the hell
05:00:35 <earthy> ah
05:00:43 <Igloo> library binary packages do depend on ghc
05:00:48 <malebria> SamB: do you know an example in sarge?
05:00:57 <earthy> well, the hell is that libwxc wants to link against a shitload of symbols that should be defined in libwx
05:01:05 <earthy> but somehow the link fails.
05:01:14 <SamB> malebria: nobody said anything needing GHC 5 was *in* Debian
05:01:30 <malebria> hum...
05:01:58 <malebria> SamB: but even in packages with reverse depends packages.debian.org doesn't show them.
05:02:07 <SamB> earthy: and you have the -dev package for wxWidgets/Windows?
05:02:28 <SamB> malebria: different issue
05:02:42 <SamB> anyway, apt-cache can do it
05:02:42 <malebria> sure.
05:04:31 <malebria> SamB: if you are on a debian system.
05:07:00 <SamB> true...
05:07:49 <malebria> SamB: Is there a reportbug for web in debian?
05:08:28 <ibid> why would one need one?
05:08:29 <SamB> reportbug for web?
05:08:38 <SamB> you can use a mail client...
05:08:48 <ibid> malebria: gmail :)
05:09:29 <malebria> Not to report a bug via web.
05:09:35 <malebria> To report a bug on the web pages.
05:09:36 <SamB> oh, that
05:09:49 <ibid> malebria: just report a bug against the "package" www.debian.org
05:10:17 <ibid> malebria: see also http://www.debian.org/Bugs/pseudo-packages
05:10:19 <lambdabot> Title: Debian -- Debian BTS - pseudo-packages
05:10:23 <malebria> ibid: thanks.
05:11:14 <malebria> ibid: but a bug in packages.debian.org fits in www.debian.org, right?
05:11:28 <SamB> that is a funny package name
05:11:47 <SamB> malebria: why not?
05:11:49 <ibid> malebria: they can reassign if it's wrong :)
05:11:52 <malebria> It's a source package.
05:11:55 <SamB> oh, but...
05:11:55 <malebria> =P
05:11:58 <ibid> no it's not
05:12:02 <ibid> it's a pseudo package
05:12:07 <malebria> Querying Debian BTS for reports on www.debian.org (source)...
05:12:13 <ibid> heh
05:13:15 <SamB> you could also report a bug in bugs.debian.org, (the lack of instruction as to what package name to use for packages.debian.org bugs)
05:13:40 <SamB> hmm, upgrade reports...
05:14:37 <ibid> "your upgrade report was buggy"
05:19:21 <pixel> first primeFactors solution for pb#35 is buggy (http://haskell.org/haskellwiki/99_questions/31_to_41)
05:19:21 <lambdabot> Title: 99 questions/31 to 41 - HaskellWiki
05:19:36 <pixel> it fails when given a prime number
05:20:16 <pixel> ("head $ factors a" fail)
05:29:02 <bd_> pixel: of course; head [] is undefined
05:30:45 <Saizan> one should add: primeFactors a | prime a = [a]; | otherwise = ...
05:31:13 <pixel> bd_: sure. i'd say first solution should be dropped
05:31:34 <malebria> When I try to create a type with deriving Typeable, I get this message:
05:32:16 <Saizan> that you need -fglasgow-exts?
05:32:40 <malebria> Saizan: yes.
05:32:44 <malebria> for newtype-deriving
05:33:45 <dancor> is this a reasonable way to define a zipper on a non-binary tree
05:34:10 <malebria> Saizan: but why do I need it for typeable and not for Ord or Eq?
05:34:12 <dancor> data MTree m = Map m (MTree m)
05:34:12 <dancor> data MTreeContext m = Top | ChildOfViaSiblings (MTreeContext m) m (MTree m)
05:34:12 <dancor> data MTreeLoc m = (MTree m, MTreeContext m)
05:34:43 <dancor> Map = M.Map
05:35:02 <Saizan> malebria: i think it's connected to how Typeable is defined, not to your type, i get that message even with simple data definitions
05:37:47 <malebria> Saizan: I'm doing a test with newtype Int2 = Int2C Int deriving Eq
05:37:58 <malebria> or newtype Int2 = Int2C Int deriving Num
05:38:29 <malebria> or newtype Int2 = Int2C Int deriving (Show, Eq, Num)
05:39:27 <augustss> malebria: deriving Typeable is not H98, so you need the flag.
05:39:30 <bd_> malebria: Ord, Show, Eq are defined as derivable in the h98 specification. Not sure about Num. Typeable is a GHC extension
05:39:46 <augustss> Num isn't derivable either in H98
05:41:17 <malebria> Is it possible to write a derivable class?
05:42:11 <bd_> with -fglasgow-exts, you can derive anything in a newtype if the type in the constructor implements it
05:43:19 <dons> you cn write your own derviing functions pretty easy
05:43:23 <dons> using SYB techniques
05:43:45 <dons> we have a 10 line 'deriver' for ndm's deferred-binary lib
05:43:53 <dons> and a prototype for binary deriving too
05:45:11 <malebria> dons: where can I find doc about this?
05:45:34 <dons> i can send you the code. but talk to ndm about it
05:45:36 <dons> ?seen ndm
05:45:36 <lambdabot> I saw ndm leaving #haskell.hac07, #ghc, #haskell-overflow, #haskell-blah and #haskell 3d 22h 12m 56s ago, and .
05:45:42 <dons> its just an idea we came up with last week
05:45:46 <dons> so not sure if its documented anywhere..
05:45:51 <dons> ?google syb
05:45:53 <lambdabot> http://www.syb.com/
05:45:53 <lambdabot> Title: Stock Yards Bank & Trust Company
05:45:57 <dons> heh
05:46:01 <dons> ?google syb haskell
05:46:04 <lambdabot> http://del.icio.us/tag/syb
05:46:04 <lambdabot> Title: Pages tagged with "syb" on del.icio.us
05:46:05 <dons> there is only one syb!
05:46:18 <dons> ?where syb
05:46:18 <lambdabot> I know nothing about syb.
05:46:22 <dons> bah
05:47:06 <malebria> dons: I'll take a look.
05:49:59 <earthy> syb is cool
06:11:52 <shankys_> Could anyone point me to Haskell resources that would be useful for learning how to program in the type system? I'm looking to modify some of the Takusen code, where Oleg does some rather ridiculous (or should I say awesome?) type hackery. I want to know if there are any good resources that will help me when I inevitably don't understand something about the typing in the Takusen code.
06:14:31 <dons> basically, Oleg's papers and posts to the haskell mailing list
06:14:33 <dons> check his web site
06:14:39 <dons> and also talk to him :)
06:17:03 <shankys_> dons: Sounds good. Are there any really good references for stuff like multi-parameter type classes, functional dependencies, etc other than Oleg's stuff?
06:21:12 <dons> MPTCs and FDs, yeah. well the papers on the 'Research' sub page of haskell.org
06:21:21 <dons> for MPTCs, mark jones papers are good
06:21:25 <dons> and easy to read
06:57:43 <Saizan> i can't have a State condivided between two threads, right?
06:58:18 <earthy> um. if you package it in a TVar you can
06:59:32 <Saizan> *shared (is condivided english?)
07:00:11 <Saizan> ?hoogle TVar
07:00:12 <lambdabot> Control.Concurrent.STM.TVar :: module
07:00:12 <lambdabot> GHC.Conc.TVar :: data TVar a
07:00:12 <lambdabot> GHC.Conc.newTVar :: a -> STM (TVar a)
07:00:26 <Saizan> ?docs Control.Concurrent.STM
07:00:26 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/stm/Control-Concurrent-STM.html
07:02:37 <bakert> ?docs Network.Browser
07:02:37 <lambdabot> Network.Browser not available
08:15:14 <syntaxfree> bah, snotty C++ weenies annoy the heck out of me.
08:16:07 <syntaxfree> http://www.codinghorror.com/blog/archives/000768.html
08:16:09 <lambdabot> Title: Coding Horror: The Problem With C++
08:19:51 <Itkovian> the problem with C++ is the ++
08:20:09 <syntaxfree> @karma c
08:20:09 <lambdabot> c has a karma of 18
08:20:18 <syntaxfree> @karma haskell
08:20:18 <lambdabot> haskell has a karma of 16
08:20:23 <syntaxfree> jeez.
08:20:40 <bringert> it all because of
08:20:41 <bringert> c++
08:20:56 <bringert> it's, dammit
08:21:14 <psnl> @karma+ haskell
08:21:14 <lambdabot> haskell's karma raised to 17.
08:21:16 <syntaxfree> I know. You can even say C++ in the middle of a word.
08:21:17 * bringert yet again makes note to self to read what he types
08:21:27 <syntaxfree> @karma example
08:21:27 <lambdabot> example has a karma of 0
08:21:36 <syntaxfree> look at this example++ to see if it works.
08:21:40 <syntaxfree> @karma example
08:21:40 <lambdabot> example has a karma of 1
08:21:50 <syntaxfree> c--
08:21:52 <psnl> type what you write, then you can check if it makes sense without having to run^W read it
08:22:10 <Itkovian> C++--
08:22:16 <Itkovian> @karma C
08:22:17 <lambdabot> C has a karma of 2
08:22:29 <Itkovian> @karma c
08:22:29 <lambdabot> c has a karma of 18
08:22:33 <Itkovian> c++--
08:22:36 <Itkovian> @karma c
08:22:36 <lambdabot> c has a karma of 18
08:22:41 <syntaxfree> c--
08:22:44 <syntaxfree> @karma c
08:22:44 <lambdabot> c has a karma of 18
08:22:48 <syntaxfree> c----------
08:22:51 <syntaxfree> @karma c
08:22:51 <lambdabot> c has a karma of 18
08:22:52 <Itkovian> haha
08:22:55 <sjanssen> syntaxfree: c++ and c-- are special cased
08:23:02 <syntaxfree> aw shucks
08:23:04 <Itkovian> c++ just gobbles up all the karma
08:23:08 <Itkovian> never giving back
08:23:11 <syntaxfree> sjannsen: apparently, they aren't.
08:23:12 <syntaxfree> c++
08:23:14 <syntaxfree> karma c
08:23:19 <syntaxfree> @karma c
08:23:19 <lambdabot> c has a karma of 18
08:23:31 <syntaxfree> c is stuck at 18 karma?
08:23:37 <Itkovian> sigh
08:23:47 <syntaxfree> did people @karma+ it into 18?
08:23:49 <Itkovian> @karma c-
08:23:49 <lambdabot> c- has a karma of 0
08:23:53 <sjanssen> syntaxfree: it isn't stuck, it's special cased
08:23:54 <rahikkala> @karma- c
08:23:54 <lambdabot> c's karma lowered to 17.
08:24:01 <Itkovian> @karma----- c
08:24:02 <lambdabot> Unknown command, try @list
08:24:07 <Itkovian> @karma- c
08:24:07 <lambdabot> c's karma lowered to 16.
08:24:10 <rahikkala> Though actually, C isn't that bad
08:24:17 <Itkovian> no, but C++ is
08:24:21 <Itkovian> @karma- c
08:24:21 <lambdabot> c's karma lowered to 15.
08:24:24 <syntaxfree> C is bad in the sense computers are bad.
08:24:30 <syntaxfree> Computer hardware sucks.
08:24:30 <Itkovian> come on, let's get this thing down
08:24:44 <syntaxfree> That's why we need programming languages.
08:24:54 <sjanssen> let's be nice to C
08:25:16 <sjanssen> it /is/ ghc's best backend at the moment
08:25:41 <syntaxfree> isn't C basically a glorified assembly language?
08:25:51 <syntaxfree> @all-dict pasm
08:25:53 <lambdabot> No match for "pasm".
08:25:54 <opqdonut> syntaxfree: portable asm
08:26:15 <opqdonut> with syntactic sugar for functions and a nice standard library
08:26:18 <opqdonut> could be nicer tho
08:27:11 <syntaxfree> the problem with C is computers, then.
08:27:17 <syntaxfree> Maybe it's time we have Haskell hardware.
08:27:26 <syntaxfree> That does program transformations in hardware.
08:28:24 <sjanssen> !paste
08:28:25 <hpaste> Haskell paste bin: http://fserv.pikapphi.umr.edu:8000/
08:28:39 <syntaxfree> does hpaste have an IRC announcer yet?
08:28:57 <hpaste>  sjanssen pasted: karma++ handling at http://fserv.pikapphi.umr.edu:8000/8
08:28:58 <bakert> What's the quote?  "C combines the power and speed of assembly language with the ease of use of ... assembly language."
08:30:00 <syntaxfree> hey, nice style.
08:30:21 <syntaxfree> I wish I could compile lambdabot to hack on it.
08:30:36 <sjanssen> syntaxfree: why can't you?
08:30:40 <syntaxfree> hey. lambdabot left #haskell.br. boo hoo.
08:30:46 <syntaxfree> sjanssen: it can't find my readline.
08:30:56 <syntaxfree> and yet I have a good copy of the latest readline in /usr/local/bin
08:31:24 <chessguy> @join #haskell.br
08:31:25 <lambdabot> Not enough privileges
08:31:27 <chessguy> bah
08:31:33 <Igloo> Why does lambdabot need readline, OOi?
08:31:46 <syntaxfree> dunno.
08:31:53 <bakert> everything needs readline
08:31:58 <sjanssen> Igloo: for the interactive offline mode
08:32:02 <bakert> as i discovered yesterday haskell-ing up our build box
08:32:14 <syntaxfree> sjanssen: do you know if I can somehow just disable that?
08:33:04 <sjanssen> syntaxfree: I don't know.  dons would be a good person to ask
08:33:11 <syntaxfree> yes. I keep forgetting.
08:33:50 <syntaxfree> @tell dons can I just disable the interactive offline mode in lambdabot so I can get to compile without it kvetching about not finding the perfectly good copy of the latest readline on my Mac?
08:33:51 <lambdabot> Consider it noted.
08:34:17 <Igloo> Ah, OK
08:34:20 <syntaxfree> boy, this rules: http://my.opera.com/csant/blog/2007/01/17/unleash-the-powers
08:34:22 <lambdabot> Title: unleash the powers - csant/log - by Claudio Santambrogio
08:34:47 <syntaxfree> I'd like to have a global modal command-line in the bottom of my screen commanding all my programs.
08:35:42 <emu>  something like Dynamic Windows of Genera would be pretty nice
08:35:59 <syntaxfree> I'd like at least to have Quartz Ion.
08:36:18 <syntaxfree> I mentioned it jokingly to tuomov, and he flipped out.
08:36:26 <sjanssen> syntaxfree: ha
08:36:41 <syntaxfree> "Proprietary capitalistic imperialistc ..." *mouth starts to foam*
08:36:50 <syntaxfree> boy, overpoliticized people tire me.
08:36:55 <nornagon> how's it haskellin'?
08:37:43 <sjanssen> @seen tuomov
08:37:43 <lambdabot> I haven't seen tuomov.
08:37:54 <sjanssen> syntaxfree: did you know that he used to hang out here?
08:37:59 <nornagon> @quote what's your monad
08:37:59 <lambdabot> No quotes for this person. You speak an infinite deal of nothing
08:38:05 <nornagon> lb fail.
08:38:49 <syntaxfree> sjanssen: where, there?
08:39:00 <syntaxfree> I first saw tuomov on #gentoo. He does come here often though.
08:39:16 <sjanssen> yeah, I was referring to #haskell
08:39:50 <syntaxfree> he liked that I know personally the creators of Lua.
08:49:35 <pixel> chessguy: first primeFactors solution for pb#35 is buggy
08:51:23 <pixel> chessguy: it fails when given a prime number (http://haskell.org/haskellwiki/99_questions/31_to_41)
08:51:24 <lambdabot> Title: 99 questions/31 to 41 - HaskellWiki
08:52:56 <syntaxfree> who owns hpaste?
08:53:19 <bos> glguy
08:53:51 <syntaxfree> @tell glguy hey. the shaded boxes look pretty good. the colors in the "New paste" screen should match the other screens though. Good job!
08:53:52 <lambdabot> Consider it noted.
08:55:41 * syntaxfree randomly mentions we have now #haskell.br for brazilians.
08:56:31 <bos> maravilhoso!
08:58:24 <syntaxfree> bos: huh?
09:10:33 <earthy> sigh. annoying wxhaskell linking problems
09:11:08 <syntaxfree> s/wx//
09:11:47 <kowey> earthy: ?
09:13:09 <SyntaxNinja> linking problems?!
09:13:16 <SyntaxNinja> -package foo! that's all ya need ;)
09:14:43 <kowey> earthy: i've never really figured out why, but on Linux, I've always needed to compile with something like '-lwx_gtk2u_gl-2.6' (Debian + friends)
09:15:17 <kowey> ideally, we would figure out how to make it so the -package foo takes care of that
09:16:28 <earthy> but, ldd of the libwxc already states that the .so is linked to those
09:18:02 <earthy> and shouldn't those -l things, if needed, be in the ghc-pkg description?
09:18:15 <kowey> maybe that's all that's missing
09:21:16 <earthy> nope
09:21:19 <earthy> doesn't help.
09:21:27 <syntaxfree> wouldn't ghc --make chase that kind of linkinf problems?
09:21:33 <syntaxfree> I have a --make tick.
09:21:56 <syntaxfree> Even when I compile small acripts that don't even import libtraries I use --make
09:21:57 <earthy> syntaxfree: nope.
09:22:23 <earthy> weirdly enough nm on the wx libs doesn't give me any symbols
09:22:37 <earthy> oh well. I've butted my head against this for long enough
09:22:50 <earthy> time to enjoy some pizza and my gf's company
09:23:41 <kowey> (by the way, by "compile", i meant "compile my app", not wxhaskell)... anyway, enjoy
09:23:53 <earthy> if any of you has more ideas... I've posted to wxhaskell-users
09:24:35 <earthy> kowey: I got that part. ;)
09:24:45 * earthy has been fighting this for the past 4 hours
09:25:21 <Igloo> kowey: Do you take flags from something like wx-config --ldflags?
09:27:50 <syntaxfree> I never even managed to compile wxhaskell
09:27:56 <syntaxfree> I'm thinking of writing my own WM in Glut.
09:28:02 <syntaxfree> At least window decorations look native.
09:28:26 <earthy> oh, I've got wxhaskell 0.9.4 working with GHC 6.4.1 on Mac OS X
09:28:44 <earthy> which makes all of this very much more annoying
09:30:26 <Jaak> glut! O_O
09:30:28 <dmhouse> How would you describe seq? A 'strictifying' function?
09:30:47 <kowey> Igloo: i really don't remember... I know that the wxhaskell configure takes a path to wx-config, so we are using it
09:30:57 <kowey> maybe not entirely correctly
09:34:16 * kowey notices a comment-out line in the configure script:   extraldopts=""		# "`$wxconfig --ldflags`"
09:34:28 <kowey> http://darcs.haskell.org/wxhaskell/configure
09:36:53 <paolino> :t scanl (>>=)
09:36:58 <lambdabot> forall (m :: * -> *) b. (Monad m) => m b -> [b -> m b] -> [m b]
09:39:33 <paolino> :t join (>>=)
09:39:34 <lambdabot>     Occurs check: cannot construct the infinite type: a = a -> b
09:39:34 <lambdabot>       Expected type: (a -> a) -> (a -> a) -> a1
09:40:02 <paolino> @hoogle join
09:40:02 <lambdabot> Monad.join :: Monad a => a (a b) -> a b
09:40:02 <lambdabot> Control.Monad.join :: Monad m => m (m a) -> m a
09:40:02 <lambdabot> Data.PackedString.joinPS :: PackedString -> [PackedString] -> PackedString
09:45:17 <mikojiba> hi
09:46:21 <chessguy> hi mikojiba
09:52:39 <ski> dmhouse : a polymorphic strict function ?
09:57:33 <syntaxfree> @src seq
09:57:34 <lambdabot> Source not found. Your mind just hasn't been the same since the electro-shock, has it?
09:57:54 <syntaxfree> @google haskell seq
09:57:56 <lambdabot> http://www.zvon.org/other/haskell/Outputprelude/seq_f.html
09:57:56 <lambdabot> Title: Haskell : seq
09:58:09 <mein_traum> http://mibssam.free.fr
09:58:11 <lambdabot> Title: e-Mibssam
09:58:31 <Saizan> i don't think you can implement seq in haskell
09:59:19 <Cale> You can almost do it
09:59:24 <syntaxfree> can't functions be strictified in the type declaration or something?
09:59:28 <Cale> It used to be a typeclass
09:59:32 <bd_> You could implement it for a specific type, by matching against all available constructors
09:59:42 <Cale> right
09:59:48 <Cale> Or even just one constructor
09:59:58 <bd_> ah, true
10:00:06 <syntaxfree> hmm. why isn't it a typeclas anymore?
10:00:08 <syntaxfree> :t seq
10:00:10 <lambdabot> forall b a. a -> b -> b
10:00:15 <Cale> Because that's less convenient
10:00:29 <syntaxfree> humm.
10:00:32 <Cale> It adds all kinds of class constraints to things which you want to make strict
10:00:42 <syntaxfree> ah, of course.
10:00:55 <syntaxfree> that looks like kind of a wart, but I don't have a clue of how to fix it.
10:02:01 <syntaxfree> does ($!) still exist?
10:02:08 <bd_> :t ($!)
10:02:10 <lambdabot> forall b a. (a -> b) -> a -> b
10:02:34 <Saizan> seq _|_ = _|_; seq x = x; -- too bad we can't write this :)
10:02:34 <syntaxfree> > (+2) $! 2
10:02:38 <lambdabot>  4
10:02:49 <bd_> Saizan: id ;)
10:03:04 <Saizan> id doesn't inspect the argument
10:03:10 <Saizan> so it's not seq
10:03:13 <bd_> neither does that definition ;)
10:03:36 <Saizan> well it should check if it's bottom :P
10:04:07 <syntaxfree> :t undefined
10:04:08 <lambdabot> forall a. a
10:04:20 <syntaxfree> @free undefined
10:04:20 <bd_> Saizan: you forgot the second argument ;)
10:04:22 <lambdabot> f undefined = undefined
10:04:35 <syntaxfree> @free fmap
10:04:37 <lambdabot> Expected variable or '.'
10:04:47 <allbery_b> {-# OPTIONS_GHC -fbang-patterns #-} seq' !x = x -- ?
10:04:48 <bd_> id _|_ = _|_; id x = x after all
10:05:05 <syntaxfree> fbang-patterns?
10:05:19 <Cale> syntaxfree: yeah, and it still has the wrong associativity
10:05:21 <bd_> Prelude> let seq' !x y = y
10:05:21 <bd_> Prelude> seq' undefined 4
10:05:21 <bd_> *** Exception: Prelude.undefined
10:05:23 <bd_> nice
10:05:38 <Cale> heh
10:05:54 <Cale> That's just being translated back into a call to the usual seq though :)
10:06:04 <allbery_b> oh :(
10:06:30 <bd_> It all depends on which you consider primitive I guess.
10:07:15 <Cale> Oh, another thing is that undefined isn't the same as \x -> undefined, because seq is available at function types.
10:07:20 <syntaxfree> I think it's funny that case statemenets are considered more primitive than guards, given that neither can be written in Haskell.
10:07:29 <Cale> I'm not sure if that's a good thing.
10:07:45 <syntaxfree> bah. how does seq even type, then?
10:07:50 <Cale> It certainly makes reasoning a bit harder
10:07:54 <Cale> @type seq
10:07:56 <lambdabot> forall b a. a -> b -> b
10:08:08 <syntaxfree> where b can be (c->c)?
10:08:16 <Cale> as can a
10:08:25 <resiak> how does that even work?
10:08:37 <Cale> It's primitive
10:08:38 <bd_> > seq (+ undefined) "foo"
10:08:39 <lambdabot>  "foo"
10:08:54 <resiak> *nods* That makes sense :)
10:08:57 <syntaxfree> > seq 2 3
10:08:58 <lambdabot>  3
10:08:58 <Cale> > seq (\x -> undefined) 0
10:08:59 <lambdabot>  0
10:09:04 <Cale> > seq (undefined) 0
10:09:05 <lambdabot>  Undefined
10:09:06 <syntaxfree> > seq (+1) "Hella"
10:09:07 <lambdabot>  "Hella"
10:09:15 <syntaxfree> > seq (+1) 2
10:09:16 <lambdabot>  2
10:09:31 <Cale> That evaluates the function (+1) before returning 2
10:09:38 <syntaxfree> ys, I know.
10:10:06 <syntaxfree> seq is kinda warty.
10:12:01 <Cale> It makes free theorems fail in annoying ways
10:12:06 * esap just introduced a longest constructor name I've ever used: SLocallyFinitelyPresentableCategoriesAndIsomorphismClassesOfFunctorsCategory
10:13:04 <Cale> Yay!
10:13:11 <Cale> Are you a fan of GAP?
10:13:16 <syntaxfree> @free seq
10:13:18 <lambdabot> f . seq x = seq (g x) . f
10:13:20 <esap> GAP?
10:13:40 <Cale> http://www-gap.mcs.st-and.ac.uk/
10:13:49 <lambdabot> Title: GAP System for Computational Discrete Algebra
10:13:54 <Cale> It has lots of identifiers like that
10:14:05 <syntaxfree> @free product
10:14:07 <lambdabot> Extra stuff at end of line in retrieved type "forall a. (Num a) => [a] -> a\n"
10:14:15 <syntaxfree> @free gives weird errors.
10:14:15 <lambdabot> Extra stuff at end of line
10:14:29 <Cale> CanonicalRepresentativeDeterminatorOfExternalSet
10:15:27 <Saizan> do they at least provide an alias?
10:15:34 <esap> Cale: No, that identifier is one constructor for a SCategory type in my compiler's parse tree.
10:15:41 <Cale> No, but they do provide tab completion :)
10:16:32 <Cale> The names aren't really that bad -- often the functions are so specific and particular that they deserve long names.
10:17:01 <Cale> esap: I realised, it just reminded me of the identifier design in GAP.
10:18:05 <esap> Cale: I don't have tab completion, but the long name is really the best name I have for it. In "Categories for Types", they use the shorthand "LFP" for this category, but I think that's way too obscure, I can't keep up with all the three-letter acronyms...
10:18:36 <dmhouse> esap: seriously, without tab completion or dabbrevs, that would be an absolute nightmare.
10:18:42 <Cale> SLocallyFinitelyPresentableCategories ?
10:19:25 <Cale> That's an interesting condition
10:19:25 <Saizan> SLocFinPresCats?
10:19:47 <esap> Cale: well maybe, but I think I also need other categories whose objects are finitely presentable categories, but whose arrows are not isomorphism classes of functors....
10:19:55 <Cale> ah
10:20:14 <esap> Saizan: That's even worse than LFP
10:20:29 <Cale> Ah, is that the meaning of locally finitely presentable?
10:21:17 * esap looks up the definition :-)
10:21:53 <Cale> I would have guessed something along the lines of having the set of relations governing arrows between any single object and its neighbours being finitely presentable.
10:22:48 <esap> An object of category C are finitely presentable, if the representable functor H^S : C -> Set  preserves finite colimits.
10:23:10 <Cale> hmm
10:24:12 <Cale> ah, okay, so the "locally" is really referring to the idea that it's applied to the objects of your category (which are themselves categories)
10:24:26 <Codex_> esap: you're going to have real difficulties implementing "preserves finite colimits" -condition.
10:24:39 <syntaxfree> esap: you can abbreviate "category" to "cat" and eschew the "-morphism" suffix.
10:25:08 <esap> A category C is finitely presentable, if C has all limits and all filtered colimits, and there is a set S of finitely presentable objects of C such that for any object C of C, there is a filtered diagram D : J -> C and colimit (k_i : DI -> C | I \in J) for which each DI \in S.
10:26:06 <Cale> I somehow doubt these were the definitions when the concepts were first named.
10:26:20 <esap> Probably not
10:27:48 <esap> This is from quite difficult-to-read part of CfT (page 292 that deals with domain model for higher-order polymorphism
10:28:07 <Cale> "Finitely presentable" makes me think that there's probably some similarity between this concept and the concept for groups/monoids etc.
10:28:35 <Cale> Do they bother to define a presentation?
10:28:41 <syntaxfree> jesus, today's a friday.
10:28:52 <syntaxfree> I didn't even notice.
10:29:19 <esap> Cale: No I don't think so. They do define representable functors though.
10:30:26 <SyntaxNinja> dons: any comments on Haskell' writings?
10:31:13 <syntaxfree> @get-shapr
10:31:14 <lambdabot> shapr!!
10:31:19 <syntaxfree> :P
10:31:30 <Codex_> esap: just use the long name. And add a comment to clarify which page of CfT it is from. :)
10:31:55 <esap> Cale: This concept of finitely presentable category is actually used to model the kind *.
10:33:12 <esap> Cale: And the category of finitely presentable categories is then used to model all the other kinds.
10:36:06 <esap> Cale: it's actually pretty interesting that this book considers some part of definition of LFP (cartesian closure) to be too difficult to be covered in the book, it just refers to something called "Gabriel-Ulmer duality", which I have no idea what it is....
10:37:23 <ski> hiya esap
10:37:59 <esap> ski: Hi!
10:38:34 <ski> been doing/reading anything cool, lately ?
10:39:15 <esap> ski: I just introduced the longest constructor I've ever used: SLocallyFinitelyPresentableCategoriesAndIsomorphismClassesOfFunctorsCategory
10:39:33 * ski grins
10:39:58 <ski> what's it's type ?
10:40:15 <esap> SCategory, of course.
10:40:27 <ski> (no arguments ?)
10:40:34 <esap> no
10:40:56 <esap> It's the base category on which everything else is built on.
10:41:06 <ski> how does your CT lang project fare ?
10:41:56 <esap> I'm still getting some Non-exhaustive patterns errors from some code for my test example.
10:42:20 <ski> your test example being ?
10:43:06 <esap> hold on, I'll put it somewhere so it's accessible.
10:43:50 <esap> ski: http://www.kotiposti.net/epulkkin/test1.cifl
10:46:17 <ski> the first part declares a category named 'category1', yes ?
10:46:28 <esap> ski: yes.
10:46:46 * ski tries to figure any sense in 'h :: 1 -> forall[obj :: type](obj=>obj)'
10:47:13 <ski> is that a type signature for 'h' ?
10:47:30 <esap> ski: It's just a fancy way of defining the type of \x -> x
10:48:19 <esap> ski: it has explicit universal quantification, and 'obj=>obj' is just the exponential.
10:48:30 <ski> mhm .. and why is that the body of the declaration of a category ?
10:49:19 <ski> or .. in general, what is needed to declare a category, in your language ?
10:49:23 <esap> ski: It defines the category that has just one arrow (called 'h', which is the identity function)
10:49:52 <ski> .. and objects being ?
10:50:07 <ski> do you just determine objects up to iso ?
10:50:40 <esap> ski: Well I do allow definition of objects as well, but this example doesn't have those.
10:51:01 <ski> so it's a zero-object category, then ??
10:51:18 <ski> or is it implied that it is one object ?
10:51:31 <syntaxfree> http://en.literateprograms.org
10:51:33 <esap> ski: heh, not quite. To have that one arrow, at least terminal object and exponentials are needed [and therefore also products]
10:51:34 <lambdabot> Title: LiteratePrograms:Welcome - LiteratePrograms
10:51:34 <syntaxfree> this is great.
10:52:01 <ski> oh ..
10:52:17 <ski> hmmm
10:52:18 <esap> ski: but I don't yet have syntax for saying that.
10:52:44 <esap> ski: and also universal quantification
10:53:08 <ski> you *don't* mean that 'at least terminal object and exponentials are needed' *inside* that new category, correct ?
10:53:55 <esap> ski: well no. I mean they have to come from somewhere, otherwise that definition makes no sense.
10:54:07 <ski> (i.e. they are needed in the category on which we build this new category, or something like that, yes ?)
10:55:01 <esap> ski: OTOH, that category must have at least two objects, where one is the terminal object and the other is 'forall[obj :: type](obj=>obj)'.
10:55:43 <ski> 'that category' being 'category1', or not ?
10:55:44 <esap> ski: The syntax for good way to defining categories is not all too clear to me.
10:55:50 <esap> ski: yes
10:56:22 <esap> ski: And that definition actually implies some structure on category1 as well.
10:56:44 <ski> esap : not me either .. one ought to build new categories out of old, in terms of categorical concepts (over 'CAT', e.g.) ..
10:56:56 <esap> ski: Because if you don't have that structure, the object defined as '1' would not be terminal object, and the other object would not have the same meaning as in the definition.
10:57:14 <ski> hm
10:57:28 <ski> waitamoment
10:58:00 <ski> you're saying that 'category1' needs terminator,exponentials,universals ?
10:58:11 <esap> ski: no, not quite
10:58:30 <ski> i though 'category1' was declared to just have identity morphism(s ?)
10:58:59 <ski> and those terminator,exponentials,universals were devices in the language (category) *used* to build 'category1'
10:59:00 <syntaxfree> http://www.joelonsoftware.com/articles/fog0000000022.html
10:59:02 <lambdabot> Title: Human Task Switches Considered Harmful - Joel on Software
10:59:03 <syntaxfree> story of my life.
10:59:03 <esap> ski: Actually, the morphism is not an identity morphism. It's a morphism from the terminal object to obj=>obj.
10:59:43 <esap> ski: that is, more like \x -> x, not id_{obj}.
10:59:46 <ski> i'm talking about morphisms *in* 'category1', atm .. not however they may be represented as morphisms in other cats
11:00:00 <ski> are we talking about same thing ?
11:00:41 <esap> ski: yes, the only defined morphism in category1 is from terminal object to obj=>obj.
11:01:08 <ski> and those two being objects *in* 'category1', then ?
11:01:15 <esap> ski: yes.
11:01:18 <ski> (just want to make sure i don't misinterpret you)
11:01:25 <ski> ok
11:01:33 <Codex_> esap: there can be more stuffs in category1 than just the one morphism, we just dont have access to them?
11:01:57 <ski> then i think i get less than i thought about the definition of 'category1'
11:02:17 <esap> Codex: yes. Probably the basic category structure (id, dom, cod, etc.) needs to be assumed when you say 'category'.
11:03:22 <ski> hmhm .. when i think of defining a category, i think of saying what the objects are, what the morphisms are, what the identity and composition are, and how those satisfy the laws
11:03:36 <syntaxfree> how would you define "calculus"?
11:03:38 <ski> i assume you want to have several of these implicit (and guarannteed)
11:03:55 <syntaxfree> I'm thinking of writing my dissertation on "A contract evaluation calculus". But people will just not get it in my field.
11:03:55 <esap> ski: ok, in this language, those are called 'module
11:04:32 <chessguy> syntaxfree, that article is intereting
11:05:00 <syntaxfree> I'm always running with 15 embrionary projects in my head.
11:05:07 <syntaxfree> Rarely anthing gets past 20% status.
11:05:19 <chessguy> i'm the same way
11:05:24 <ski> (syntaxfree : hm .. related to that functional contracts, in the Fun of Programming ?)
11:05:29 * allbery_b resembles that too
11:05:31 <esap> ski: the idea being that a category is itself pretty abstract thing. The interpretation of the category in terms of, say, set theory, or programming language constructs, is what I call 'module'.
11:05:41 <ski> hm
11:05:43 <syntaxfree> ski: nah, these are insurance contracts. I'm an economist :)
11:05:55 <allbery_b> well,  actually I havbe a stable of 70-80% stuff that'll never get finished
11:06:09 <syntaxfree> I also have a stable of 70-80% stuff, mind you.
11:06:16 <syntaxfree> It's the 20% stuff that bothers me, though.
11:06:26 <Cale> esap: hmm, cartesian closed isn't too hard a property, I think I could manage that better than most of the other stuff you're talking about :)
11:06:28 <syntaxfree> the 80% stuff I one day will be emotionally stable and non-creative enough to pick and complete.
11:06:40 <esap> ski: The easy way to think about it is to think how categories are seen in Cat, the 2-category of small categories, functors and natural transformations.
11:06:44 <Cale> Gabriel-Ulmer duality, I know nothing about though.
11:06:48 <ski> esap : 'naturaltransformation' and 'functor' i think i get ..
11:07:16 <ski> module module1 :: category1
11:07:21 <ski> ^^ this specifies what ?
11:07:39 <ski> that the things 'module1' talks about resides in 'category1' ?
11:08:03 <esap> Cale: yea, cartesian closure is pretty simple, in principle. In the LFP case however, you need to prove there exists a set of finitely-presentable objects, in order to prove cartesian closure,  which is hard.
11:08:40 <esap> ski: it specifies that module1 must have all operations defined in the category1. It's just a type annotation.
11:08:52 <Cale> Probably the exponential is tricky?
11:09:10 <RyanT5000> is there a way to modify an exception within functional code?
11:09:14 <chessguy> by the way cale, have you reviewed the new Category theory based on haskell article?
11:09:19 <RyanT5000> i basically want to make a stack trace
11:09:26 <Cale> chessguy: url?
11:09:30 <esap> Cale: yes, proving that exponential has a set of finitely presentable objects is hard.
11:09:36 <ski> @hoogle mapException
11:09:36 <lambdabot> Control.Exception.mapException :: (Exception -> Exception) -> a -> a
11:09:44 <chessguy> on haskell-cafe
11:09:49 <chessguy> let me see
11:09:50 <RyanT5000> thanks, ski; don't know how i missed it
11:10:07 <esap> ski: My example isn't actually valid [but I don't currently have any checking that the module would satisfy the category, so it doesn't matter (yet)]
11:10:15 <ski> hm
11:10:41 <chessguy> http://en.wikibooks.org/wiki/Haskell/Category_theory
11:10:43 <ski> esap : 'how categories are seen in Cat' <- referring to internal category theory ?
11:11:26 <esap> ski: I'm not sure. I haven't studied internal category theory very closely.
11:12:00 <esap> ski: I mean, I don't know what exactly you refer to.
11:13:11 <esap> ski: The 2-category of categories, functors and natural transformations has categories as objects. Normally objects in a category are thought of as abstract. So you'd expect that a good way to describe categories [in context of Cat] would be as abstract entities.
11:13:49 <esap> ski: Of course, normally, categories are *also* described in concrete terms
11:14:13 <ski> an object is a morphism (functor) from '1' to the object (category) in question
11:14:39 <ski> hm
11:15:05 <ski> is that right ?
11:15:23 <ski> yes
11:15:31 <esap> ski: that's the 'concrete' way of describing an object, then as an element in Cat.
11:16:20 <ski> (for a moment i though '1' was the terminal 2-category, but there it's the terminal object in Cat)
11:17:26 <esap> ski: hmm. are you referring to my example?
11:17:42 <ski> (em, no, my statement, just above)
11:17:55 <ski> i seem to want 'h' in 'category1' to be a morphism in Cat
11:18:08 <esap> ski: that's not the intention
11:18:16 <ski> (from the terminal category to something)
11:18:31 <esap> ski: the intention is that the 'module' stuff is an element in Cat.
11:18:37 <ski> hm
11:18:55 <ski> 'module1' declares 'f','g'
11:19:01 <ski> what are those ?
11:19:36 <ski> arbitrary things .. or things like objects,morhisms,identity,composition in that element of Cat
11:20:06 <esap> ski: those are just names for concrete arrows in module1
11:20:38 <esap> ski: actually, I should define 'h' in 'module1'.
11:20:42 <ski> maybe it would be better if you tried to elaborate on 'The easy way to think about it ..', instead of trying to  answer my current random confusion questions
11:20:53 <ski> ohm
11:20:56 <lokadin> .ui ski is the best
11:20:57 <esap> ski: then it would be clearer what is the relation between 'category' and 'module'.
11:21:07 <ski> hiya lokadin
11:21:31 <lokadin> coi kk i'll get back to work .ui
11:23:07 <ski> i think it would be useful if there was some description of what 'category1' and 'module1' was meant to capture (or mayhaps they are just random tests ?) .. and perhaps definitions of very simple categories, like terminal, discrete two-object, etc ..
11:24:12 <esap> ski: These are just random tests really.
11:24:33 <esap> ski: My type checker doesn't have enough intelligence yet to find the trouble here.
11:24:33 <ski> (ah .. 'Automata' and 'auto1' may be such examples ..)
11:24:33 <Codex_> esap: does that example go through your type checking?
11:24:58 <esap> Codex: almost, not quite.
11:25:34 <esap> ski: the Automata stuff is just some garbage I wrote a long time ago. It needs a rewrite anyway, my syntax has been changed since I wrote that.
11:25:35 <ski> hm, should 'h' in 'category1' be preceded by 'function' ?
11:25:54 <ski> ahm
11:26:33 * esap advices against reading comments :-)
11:26:46 <ski> hehe
11:26:59 <ski> where does 'obj' come from in 'g = nt1{obj}' ?
11:27:06 <ski> the signature ??
11:28:13 <esap> ski: no, I think it needs one 'rightadjunct[polymorphism[obj::type]](nt1{obj}), then it'd work. But I'm still stuck on the rightadjunct[exponential...] part.
11:29:10 <shapr> @users
11:29:11 <lambdabot> Maximum users seen in #haskell: 311, currently: 297 (95.5%), active: 40 (13.5%)
11:29:15 <ski> hiya shapr
11:29:22 <shapr> hiya ski
11:29:28 <ski> esap : what does 'exponentials(obj)' signify ?
11:29:49 <syntaxfree> @get-shapr
11:29:49 <lambdabot> shapr!!
11:29:53 <syntaxfree> I love that : )
11:29:56 <esap> ski: an adjunction - x obj -| obj => -.
11:30:01 <ski> (i.e. what does it denote ?   an object ? a morphism ? .. ?)
11:30:20 <syntaxfree> Maybe it's that the double exclamation mark reminds me of the better days of Dust Puppy.
11:30:37 <ski> esap : so it is a proof of an adjunction, then ..
11:31:04 <esap> ski: yes.
11:31:23 <ski> hm
11:31:30 <shapr> syntaxfree: you screamt? :-)
11:31:40 <esap> This language is very much based on adjunctions...
11:31:41 <syntaxfree> no, lambdabot did.
11:31:41 <ski> identity{obj} :: obj -> obj  // i presume
11:31:55 <syntaxfree> I don't like the thought of lambdabot as a woman. I prefer it to be a cute pet.
11:32:09 <esap> ski: yes.
11:32:17 <ski> so, hm ..
11:33:08 <ski> 'rightadjunct[exponentials(obj)][...]' want '...' to be a left adjunct, and gives the corresponding right adjunct ?
11:33:24 <esap> ski: no
11:33:30 <syntaxfree> joel.reddit.com is better than programming.  today
11:33:57 <esap> ski: rightadjunct[exponentials(obj)] is the right adjoint functor of that adjunction. That is a use of the functor to an arrow.
11:34:14 <ski> ah
11:34:20 <ski> hm
11:34:32 <esap> ski: I don't have much syntactic sugar for that yet...
11:34:59 <ski> so it's basically '(obj =>)', then ?
11:35:07 <esap> ski: yes.
11:35:47 * monochrom shivers upon the mention of adjunction!
11:35:52 <ski> and which adjunction does 'polymorphism[obj :: type]' signify ?
11:36:31 <esap> ski: pi*_A -| forall_A
11:36:33 <ski> (and why '[..]' rather than '(..)' ? and why the ascription on 'obj' ?)
11:36:36 <esap> ski: that's universal quantification
11:37:41 <esap> ski: the 'pi' is a product projection. And '*' is a contravariant substitution/reindexing functor
11:37:48 <ski> hm .. i think i need to see some example (not necessarily in your language :) of this adjunction
11:38:19 <esap> ski: hmm.. hold on, I can probably find some paper that describes it...
11:39:04 <ski> (i've never really understood e.g. how dependent types are modelled in CT)
11:40:23 <ski> pi*_A B --> C
11:40:34 <ski> =============
11:40:44 <ski> B -> forall_A C
11:40:46 <ski> ???
11:40:58 <esap> ski: yes.
11:41:24 <esap> ski: existential quantification is left adjoint of that same functor.
11:41:30 <ski> is the '_A' in 'pi*_A' a subscript on the '*' ?
11:41:41 <esap> ski: it's subscript on 'pi'.
11:42:01 <ski> esap : this seems somehow related to universal and existential in an allegory .., hm
11:42:59 <ski> hm
11:43:09 <ski> then why is the '*' inbetween ?
11:43:33 <esap> ski: maybe I should have typed it (pi_A)*
11:43:59 * ski glances at channel and briefly wonders whether we scare away other discussion
11:44:32 <esap> ski: (pi_I)* :: C(I,U) -> C(IxU,U) , where pi :: IxU -> I
11:44:38 <chessguy> i don't have a clue what you're talking about, as usual, so more clueless than scared
11:45:16 <monochrom> heh
11:45:55 <Codex_> I dont think anyone else understands that :)
11:46:23 * allbery_b is more or less ignoring the entire discussion, being that it's about a mile overhead :)
11:46:28 <ski> hm, so '*' is just the composition difunctor, then ?
11:46:41 <monochrom> It is more than a mile.
11:46:41 <esap> ski: there is also an additional condition that must be satified by forall_A and '*', the 'Beck-Chevalley condition' (see google)
11:47:15 <esap> ski: yes. f*(g) = g o f.
11:48:24 * ski needs to wait and ponder around a moment, to avoid brainache :)
11:49:04 <chessguy> @type id
11:49:06 <lambdabot> forall a. a -> a
11:52:24 <ski> F : C --> D   G : D --> E
11:52:27 <ski> -------------------------
11:52:30 <ski> G o F : C --> E
11:53:25 <ski> in in functor categories
11:53:27 <ski> (o) : E^D * D^C --> E^C
11:53:27 <esap> ski: yes, that's functor composition.
11:53:38 <ski> s/in in/so in/
11:53:42 <monochrom> Oh! dons didn't put out a Haskell Weekly News this Tuesday!
11:53:48 <ski> so
11:54:00 <tero-> hi. I've been struggling to learn Haskell in order to write a server for a network game. I packed all network related functionality to a module behind a simple interface. It's at http://www.iki.fi/tol/server.hs.txt and a tester for it is at http://www.iki.fi/tol/testserver.hs.txt
11:54:18 <tero-> I feel that things could be done in a simpler way but I have not found too many examples on how to write a network server with Haskell
11:54:41 <ski> G : D --> E
11:54:57 <ski> -------------------
11:54:57 <ski> (G o) : D^C --> E^C
11:55:34 <ski> so
11:57:39 <ski> hm
11:57:41 <ski> no
11:57:52 <ski> that's the covariant one
11:58:06 <ski> F : C --> D
11:58:09 <ski> -------------------
11:58:16 <esap> right, '*' is the contravariant one...
11:58:24 <vegai> tero-: Erlang might work better for such a thing.
11:58:26 <ski> (o F) : E^D --> E^C
11:58:27 <Cale> tero-: hmm, do you have a more specific question?
11:58:29 <tero-> I included those URLs in case somebody would find them useful. Also, comments on them are welcome.
11:58:48 <chessguy> tero-, perhaps you could play around with synching your server to an automated client, like dons' simple bot example
11:58:51 <tero-> Cale: the specific question would be some links to examples
11:58:55 <br1> @seen dons
11:58:55 <lambdabot> dons is in #ghc, #haskell.hac07, #haskell-overflow and #haskell. I last heard dons speak 5h 37m 28s ago.
11:59:00 <Cale> ah, okay
11:59:19 <br1> I need help installing lambdabot with ghci under Windows.
11:59:26 <br1> I have cygwin, fwiw
11:59:38 <ski> pi_{I,U,0} : I * U --> I
11:59:44 <tero-> vegai: hmm.. I've browsed Erlang a bit and I found Haskell somehow more approachable
11:59:46 <ski> ------------------------------------
11:59:46 <ski> (o pi_{I,U,0}) : U^C --> U^(I * U)^C
11:59:47 <chessguy> tero-, i'd say if dons' example bot can connect to your server without a huge amount of modification to the bot, you're probably in good shape
12:00:30 <vegai> tero-: I feel the same, actually. But some have had better luck doing game servers in that
12:00:37 <ski> er
12:00:52 <ski> (o pi_{I,U,0}) : U^I --> U^(I * U)
12:01:01 <tero-> chessguy: I would do that to make the server module more generic, right?
12:01:13 <esap> ski: right.
12:01:14 <Cale> It looks like much of this is really in StateT/IO
12:01:25 <chessguy> tero-, yes to simplify the API
12:01:27 <ski> esap : does this cohere with what you said, as of yet ?
12:01:35 <ski> ok
12:02:05 <esap> ski: Yes, I usually prefer to write C(I,U) instead of U^I, because this is a hom-set which is not necessarily an exponential.
12:02:07 <Cale> However, I'm not completely certain what the state parameter is for in some of these functions.
12:02:26 <tero-> vegai: and I especially like Haskell's type system.
12:02:39 <Cale> ah, for ServerTraits
12:02:44 <tero-> Erlang is dynamically typed I guess
12:03:11 <ski> esap : ok .. i just wanted to compare it with something i was somewhat more familiar with (but not very much)
12:03:17 <tero-> Cale: it sure could use some comments :) it's now a bit obfuscated
12:03:35 <esap> ski: it's a fine difference that is not always made.
12:04:20 <Cale> (a -> Connection -> String -> IO (a, [Message]) -- what might servTAddConn do with the parameter of type a, other than just returning it?
12:04:51 <tero-> Cale: it might modify the state
12:05:08 <tero-> Cale: like adding a player record and associate the connection for it
12:05:47 <Cale> ah, okay
12:06:16 <tero-> btw. is it sensible to have two threads for one handle? are there any locking issues that might cause nightmares later on?
12:06:29 <tero-> I found it simple to have two channels: one for reading and one for writing
12:06:55 <Cale> That seems sensible to me, but I haven't written too many multithreaded applications.
12:07:15 <Philippa> I've done it, and it didn't fall over - but I didn't get to stress test it
12:08:36 <SamB> why would that fall over?
12:08:43 <SamB> it might have performance problems...
12:09:44 <SamB> oh, now I see it...
12:09:53 <ski> esap : i don't know, maybe better if we continue discussing in ##logic, then
12:10:20 <esap> ski: ok
12:10:24 <Philippa> SamB: bad enough performance problems are indistinguishable from falling over :-)
12:10:30 <SamB> hmm.
12:10:35 <SamB> maybe so!
12:10:47 <Philippa> constant factors suck when they turn out to be infinite, too
12:10:50 <SamB> but I just meant maybe it would be slow, not maybe there would be some kind of priority inversion...
12:11:07 <Philippa> *nod*
12:11:18 <SamB> but now I see what you mean about locking issues...
12:11:20 <Philippa> in practice I don't think it can be unless the OS would've messed you about anyway
12:11:37 <Philippa> assuming your in and out threads're trivial loops
12:11:45 <JKnecht> constant infinity seems like partial completeness, maybe the same thing
12:12:06 <tero-> one thing I noticed with two threads / handle was that the other thread died sometimes with a message "Thread blocked indefinitely"
12:12:16 <tero-> after the connection was terminated
12:12:28 <tero-> but oddly enough it did not happen every time
12:14:42 <tero-> is there a place to upload Haskell code snippets like this?
12:15:37 <chessguy> you could upload it to the wiki
12:16:03 <chessguy> it sounds like you have a deadlocking issue though
12:16:39 <monochrom> @paste
12:16:39 <lambdabot> http://fserv.pikapphi.umr.edu:8000/
12:16:44 <monochrom> Woah?!
12:16:51 <SamB> it just occurred to me that maybe if you get the reader thread blocked waiting for data, and then the writer thread tries to write, it won't be able to do so?
12:16:55 <tero-> the read thread terminates on hGetLine and the write thread stays in readChan
12:17:45 <SamB> "thread blocked indefinately" means that no other thread could wake it up...
12:18:08 <SamB> the garbage collector does proofs in its spare time, I think ;-)
12:18:09 <monochrom> That fserv.pikapphi.umr.edu thing seems to hang.
12:18:21 <shapr> Man, I wish I could easily snip everything inside <haskell> tags into a file. On haskellwiki that is.
12:18:22 <Philippa> tero-: to be expected. If you want to be nice you can catch the exception from hGetLine and send the other thread a message to the effect of "Choke!"
12:18:24 <shapr> !paste
12:18:47 <SamB> Philippa: or you could just close the Handle
12:19:07 <SamB> or not
12:19:07 <monochrom> http://paste.lisp.org/new/haskell  try this, tero-
12:19:18 <SamB> why would you want to do any of those things
12:19:48 <tero-> Philippa: ah. that'd be better
12:19:48 <SamB> why would you want to read and write like that anyway?
12:22:18 <tero-> SamB: what would you suggest for reading and writing to multiple socket connections?
12:22:48 <tero-> there was this nice function hSelect a while ago but it disappeared so I had to revise the implementation a little
12:22:52 <paolino> @docs cabal
12:22:52 <lambdabot> cabal not available
12:23:21 <paolino> @docs Cabal
12:23:22 <lambdabot> Cabal not available
12:25:07 <SamB> tero-: well, what are you doing?
12:25:22 <tero-> chessguy: maybe I could put it to the wiki. I have to comment it first a little
12:26:33 <SamB> really I don't have any real experience myself...
12:26:40 <tero-> SamB: it's a network server that has multiple socket connections
12:26:58 <Philippa> tero-: I'd suggest a mux/demux thread talking to a pile of reader/writer chans
12:27:00 <tero-> SamB: and the unit of communication is one line
12:27:21 <SamB> the only thing I've worked on like that is Conjure... and I don't think I've seen the latest architecture...
12:27:38 <SamB> and anyway Lemmih said something about it being broken?
12:27:49 <Philippa> in particular, give all the readers the same chan to send new messages down
12:28:06 <tero-> Philippa: they have the same channel now
12:28:08 <Lemmih> What's broken?
12:28:09 <SamB> Philippa: hmm, that sounds vaguely familiar
12:28:15 <SamB> Lemmih: oh, well, maybe you fixed it
12:28:31 <SamB> last I can remember hearing, you said it wasn't working
12:29:35 <SamB> Lemmih: so it works now?
12:30:10 <tero-> Philippa: one thread only to reduce the level of complexity / sync issues?
12:30:24 <Lemmih> Yes, Conjure works.
12:30:34 * SamB wonders what it does
12:30:42 <SamB> ;-)
12:30:48 <resiak> @where conjure
12:30:48 <lambdabot> http://darcs.haskell.org/~lemmih/conjure/
12:31:13 <shapr> What's the best regex lib for Haskell? I'm trying to automatically snip text out of <haskell> tags in haskellwiki source....
12:31:24 <emu> Text.Regex?
12:31:52 <shapr> I wonder if Parsec is a better solution...
12:32:01 <emu> parsing xml, probably oO
12:32:16 <Philippa> tero-: there's no gain to using more than one mux/demux thread in practice - the network tends to be synchronous underneath
12:32:40 <Philippa> shapr: Parsec's easy to see a quick solution in, at least
12:32:45 <shapr> yeah,  true
12:32:55 <beschmi> shapr: there's also http://www.cs.york.ac.uk/fp/HaXml/HaXml/Text-XML-HaXml-Html-Parse.html
12:32:58 <Philippa> it won't be hugely slow, so go write the tool
12:32:58 <lambdabot> http://tinyurl.com/2g6qcz
12:33:01 <SamB> emu: why do you think it is XML, just because it looks like XML?
12:33:35 <beschmi> shapr: didn't see that you wan't to parse the wiki language
12:33:52 <emu> is it? I don't recall haskellwiki language
12:33:59 <SamB> there is a language?
12:34:02 <emu> is that the markdown like thing
12:34:12 <SamB> it is wikimedia whatnot
12:34:36 <SamB> er.
12:34:39 <SamB> mediawiki, sorry
12:34:44 <SamB> wikimedia is the foundation
12:34:52 <fasta> shapr: can't you just call Perl otherwise?
12:34:56 <glguy> shapr: could hpaste be run on scannedinavian.com?
12:34:57 <lambdabot> glguy: You have 2 new messages. '/msg lambdabot @messages' to read them.
12:35:22 <fasta> shapr: I saw someone using unsafePerformIO to make a safe interface to sed
12:39:05 <SamB> fasta: is not safe!
12:39:06 <csci> Hello. On the wiki, under Gettin started in 5 steps two tutorials are listed: Which one is better for me: experienced in C, Python, Ruby, Java and a bit of Scheme.
12:39:15 <SamB> what if someone installs bad version of sed?
12:40:01 <emu> hmm, where's the meta-tutorial
12:40:07 <fasta> SamB: I believe it was not full sed, but if people install a bad version sed you have a problem, I agree.
12:40:32 <kowey> csci : http://www.haskell.org/haskellwiki/Meta-tutorial
12:40:33 <lambdabot> Title: Meta-tutorial - HaskellWiki
12:40:41 <csci> kowey: Thanks
12:40:44 <kowey> csci : slow, medium, or fast ?
12:41:04 <csci> I'd prefer fast: more about syntax and some paradigmas
12:41:46 <csci> kowey: But the meta-tutorial is what I've searched for. Thanks again :)
12:42:07 <emu> @where yaht
12:42:07 <lambdabot> http://darcs.haskell.org/yaht/yaht.pdf
12:43:30 <fasta> Do you run-time check datatype invariants?
12:43:32 <kowey> csci: that would be medium (but a good medium), yaht
12:44:21 <fasta> Compile time is possible, but I don't think it's popular.
12:45:21 <ookk> is there a function :: (a,b) -> (b,a) ?
12:45:43 <paolino> how does it work to use the . in the modules, is there a connection with directories ?
12:45:46 <mauke> @hoogle (a,b) -> (b,a)
12:45:47 <lambdabot> Data.Graph.Inductive.Query.Monad.(><) :: (a -> b) -> (c -> d) -> (a, c) -> (b, d)
12:45:50 <emu> @type uncurry . flip
12:45:52 <lambdabot> forall a b c. (b -> a -> c) -> (a, b) -> c
12:46:00 <paolino> ookk:  (snd &&& fst)
12:46:08 <monochrom> There is no library function (a,b) -> (b,a)
12:46:10 <emu> @type flip . uncurry
12:46:11 <lambdabot> forall b c a b1. (a -> b1 -> b -> c) -> b -> (a, b1) -> c
12:46:24 <mauke> @pl \(a,b) -> (b,a)
12:46:24 <lambdabot> uncurry (flip (,))
12:46:38 <emu> yea something like that
12:46:42 <emu> @type uncurry . flip . (,)
12:46:44 <lambdabot>     Couldn't match `b -> c' against `(a1, a)'
12:46:44 <lambdabot>       Expected type: a1 -> a -> b -> c
12:46:52 <ookk> i want to flip a tuple
12:46:53 <shapr> glguy: Sure, try hpaste on scannedinavian
12:46:58 <pejo> fasta, datatype invariants - do you mean things like "This integer is always smaller than 253"?
12:47:10 <emu> @type uncurry . flip (,)
12:47:11 <lambdabot>     Couldn't match `b -> c' against `(a, a1)'
12:47:11 <lambdabot>       Expected type: a -> a1 -> b -> c
12:47:17 <LoganCapaldo> @pl (\(x, y) -> (y, x))
12:47:17 <lambdabot> uncurry (flip (,))
12:47:23 <fasta> pejo: for example
12:47:24 <glguy> shapr: can we install hscolour on that server? or can I install it in my home-dir
12:47:31 <emu> @type uncurry (flip (,))
12:47:33 <lambdabot> forall a b. (a, b) -> (b, a)
12:47:38 <shapr> glguy: If it has a deb, I'll install it immediately.
12:47:39 <emu> hmm, well i clearly need to take a break
12:47:43 <ookk> then \(a,b) -> (b,a) is better think
12:47:52 <fasta> pejo: or for a container: if I put an element e into the container, afterwards, the container is one larger than before.
12:48:08 <glguy> shapr: does Cabal support local install?
12:48:18 <paolino> > (snd &&& fst) (1,2)
12:48:19 <lambdabot>  (2,1)
12:48:22 <glguy> shapr: I want to use the darcs version as of this morning
12:48:23 <fasta> pejo: checking that every element in the container that might point to some other element in the container is really pointing to a valid element, etc.
12:48:44 <glguy> shapr: and I'm compiling it now
12:48:44 <fasta> pejo: basically, it's providing a run-time specification of what should happen.
12:49:13 <paolino> anyone knows what's the meaning of the "point" in the modules import ?
12:50:01 <pejo> fasta, not much of a choice but to check it run-time. Suppose I write a function fac which takes an int < 253. Someone then makes the call "fac (e1 + e2)", which is tricky to analyze.
12:50:08 <allbery_b> you mean things like Data.List?  Haskell98 has a flat namespace, which is annoying.  modern Haskell uses hierarchical libraries, think of the . as a directory separator
12:50:59 <paolino> albery_b , Cabal knows about it ?
12:51:23 <LoganCapaldo> So the big difference between State and ST is that ST is strict?
12:51:24 <fasta> pejo: what do you mean?
12:51:27 <allbery_b> yes, as long as you don't tell it that you're working with only Haskell98
12:51:44 <allbery_b> (would be "haskell98" in build-depends IIRC)
12:51:47 <pejo> fasta, that it is hard to tell what the value of e1 + e2 is statically.
12:51:52 <chessguy> allbery_b, so what would Data.List look like in modern haskell?
12:52:05 <fasta> pejo: in some languages you can do that
12:52:14 <allbery_b> chssguy:  backwards.  it is List in H98, Data.List in modern Haskell
12:52:37 <chessguy> oh
12:52:41 <allbery_b> Data.List is a syntax error in strict H98
12:52:42 <glguy> shapr: does HAppS have a .deb?
12:52:56 <pejo> fasta, anyone with general recursion, that doesn't bump into halting problem?
12:53:40 <Philippa> LoganCapaldo: the big difference is that State has one "slot" for your state and ST gives you an entire heap full of mutable cells with references into them
12:53:47 <fasta> pejo: you need to give enough hints for the compiler to check that everything is fine.
12:53:54 <Philippa> there's a lazy version of ST
12:55:24 <LoganCapaldo> Philippa, So State with an association list or some kind of record or tuple is the state could be used to implement ST?
12:55:33 <psnl> is there an existing function of type Int -> String that takes an number and prints it in words? for example: foo 1 = "one", foo 11 = "eleven" ?
12:55:45 <pejo> fasta, suppose you lie to the compiler?
12:55:55 <thetallguy> glguy: no deb for happs that I know of
12:56:09 <glguy> shapr has 0.9.0 installed
12:56:21 <glguy> i might just nee to upgrade my code
12:56:22 <thetallguy> glguy: however I did get a deb for yhc built the other day
12:56:43 <fasta> pejo: the compiler then says:"can't verify proof" or "With your hints I was not able to prove it" or "I proved it"
12:57:38 <fasta> psnl: not that I know of, I would just call a Common Lisp
12:58:14 <shapr> glguy: I don't have the last few HAppS patches.
12:58:18 <psnl> fasta: ok, cool
12:58:21 <shapr> Do you want 'em?
12:59:01 <glguy> i dont know i havent use .9 yet
12:59:04 <fasta> To see your offline messages, get the latest version of Windows Live™ Messenger.
12:59:14 <fasta> Microsoft is spamming :(
12:59:30 <fasta> I use MSN over Jabber, thank you very much.
12:59:32 <glguy> [14:56] Eric: what happened to fserv :(
12:59:33 <glguy> [14:56] Booyakasha!!: power went out
12:59:33 <glguy> [14:56] Booyakasha!!: and i went to class and didnt bother to restart it
12:59:33 <Philippa> LoganCapaldo: yes, if you have sufficient polymorphism. I believe System FC can do it, Haskell 98 certainly can't
12:59:45 <glguy> [14:56] Booyakasha!!: ill go turn it back on for ya
13:00:12 <shapr> glguy: scannedinavian is running on a virtual server in Atlanta at a real NOC.
13:00:35 <glguy> shapr: this is only good news because the css files are one it
13:00:40 <roconnor> Atlanta isn't subject to data retention
13:01:05 <roconnor> er, but maybe neither is Sweeden
13:01:13 <shapr> I'm not in Sweden!
13:01:26 <shapr> I'm in Alabama
13:01:42 <roconnor> oh right
13:01:51 <shapr> I will visit Sweden again in April.
13:11:19 <dblhelix> shapr: why have you left sweden?
13:12:59 <shapr> dblhelix: Sweden Immigration people wanted me to make more money or leave the country. I didn't increase my income quickly enough to make them happy.
13:13:24 <psnl> asked to leave, eh?
13:13:29 <shapr> yup
13:13:41 <don-o> shapr: how much a year makes them happy?
13:13:47 <shapr> I got a letter that said "if you're still in the country by this date, look for a lawyer."
13:14:19 <shapr> don-o: They said they didn't have an exact amount, which made things significantly more difficult for me.
13:15:20 <don-o> shapr: perhaps you could just show up to immigration wearing a lot of bling. :)
13:15:48 <shapr> heh
13:16:19 <shapr> hiya don-o, have I seen you around these parts before?
13:16:33 <shapr> Are you learning Haskell or a long time user that I've missed?
13:16:48 <don-o> shapr: probably not. im new to haskell. ruby blew my mind a year ago or so and its a gateway drug to other languages.
13:16:51 <Cale> shapr: that sounds pretty strange
13:17:25 <shapr> don-o: Greetings and welcome to the land of lambdas!
13:17:41 <Cale> Why is it reasonable that they require you to make more money or leave?
13:17:51 <don-o> shapr: thx = "thanks" + thx
13:18:28 <Cale> > let thx = "thanks" ++ thx in thx
13:18:29 <lambdabot>  "thanksthanksthanksthanksthanksthanksthanksthanksthanksthanksthanksthankstha...
13:18:35 <shapr> Cale: They were worried I'd become a burden for the social system. Their system has high overhead.
13:18:41 <don-o> Cale: lol
13:18:45 <mauke> > cycle "thanks"
13:18:46 <lambdabot>  "thanksthanksthanksthanksthanksthanksthanksthanksthanksthanksthanksthankstha...
13:18:59 <syntaxfree> @let thks = cycle "thanks! "
13:19:00 <don-o> omg. a haskell evaluating bot.
13:19:05 <Lemmih> > fix ("thanks":)
13:19:05 <lambdabot> Defined.
13:19:07 <lambdabot>  ["thanks","thanks","thanks","thanks","thanks","thanks","thanks","thanks","th...
13:19:17 <syntaxfree> > L.thks
13:19:18 <lambdabot>  "thanks! thanks! thanks! thanks! thanks! thanks! thanks! thanks! thanks! tha...
13:19:23 <Cale> Hehe
13:19:23 <shapr> Lemmih: It even has a smiley!
13:21:50 * Lemmih stabs GHC. Make better code!
13:22:51 <bd_> don-o: a /literate/ haskell evaluating bot, mind :)
13:23:18 <shapr> don-o: Do you want the short tour?
13:24:14 <don-o> shapr: thx but im writing javascript at the moment.
13:24:26 <shapr> don-o: Ok, next time
13:24:32 * don-o nods
13:25:13 * shapr pokes glguy 
13:28:24 <darrint> (offtopic, but you people would know) Is there a good online explanation of the use of the noncontradiction in proofs?
13:28:50 <syntaxfree> @get-shapr
13:28:50 <lambdabot> shapr!!
13:28:57 <syntaxfree> Tee hee.
13:29:31 <Cale> darrint: as in proof-by-contradiction or contrapositive?
13:29:36 <darrint> http://en.wikipedia.org/wiki/List_of_rules_of_inference
13:29:42 <darrint> See noncontradition. That one baffles me.
13:29:59 <darrint> contrapositive and proof-by-contra I understand.
13:30:19 <Cale> Oh, hehe, yeah, usually you don't want that one ever to be possible to use.
13:30:33 <Cale> Because if you can use that rule, your system is boring.
13:30:46 <darrint> That's a very helpful answer.
13:30:55 <darrint> It explains why it comes up early in Haskell Road.
13:31:27 <darrint> Authors use it to prove (~P, PvR) -> R
13:32:11 <glguy> what import Typeable?
13:32:14 <glguy> ?index Typebale
13:32:15 <lambdabot> bzzt
13:32:17 <darrint> I gotta run. Thanks for the answer Cale.
13:32:18 <glguy> ?index Typeable
13:32:18 <Cale> hmm
13:32:18 <lambdabot> Data.Typeable, Data.Dynamic, Data.Generics.Basics, Data.Generics
13:32:20 <Cale> okay
13:32:31 <Cale> yeah, I suppose you can use that rule "locally"
13:32:48 <darrint> As in a suppose, but not a top-level given?
13:32:51 <Cale> yeah
13:33:05 <darrint> Seems intuitive.
13:33:12 <Cale> But generally, it's enough to say that once you have phi and not phi, the premise is false.
13:33:12 <darrint> Much thanks.
13:33:27 <Cale> Which is basically inference rule #1 on that page
13:33:41 <shapr> syntaxfree: you screamt?
13:33:51 <syntaxfree> no, lambdabot did.
13:33:57 <syntaxfree> I just like to watch him scream.
13:34:13 <darrint> Again, much thanks. I better run.
13:34:30 <shapr> syntaxfree: Watch it, or I'll add get-diego ;-)
13:34:45 <mauke> (function(f){f(f)})(function(f){f(f)})
13:34:47 <syntaxfree> I've been pining for one.
13:35:13 <ookk> @hoogle Int -> Char
13:35:14 <lambdabot> Char.chr :: Int -> Char
13:35:14 <lambdabot> Char.intToDigit :: Int -> Char
13:35:14 <lambdabot> Data.PackedString.indexPS :: PackedString -> Int -> Char
13:35:34 <mauke> > toEnum 64 :: Char
13:35:35 <lambdabot>  '@'
13:37:49 <syntaxfree> @get-shapr
13:37:49 <syntaxfree> :(
13:37:49 <lambdabot> shapr!!
13:37:56 <shapr> wah!
13:38:07 <mauke> @shapr syntaxfree
13:38:07 <lambdabot> why on earth would I slap syntaxfree
13:38:15 <syntaxfree> hehehe
13:38:21 <syntaxfree> I'd like to have my own get- command./
13:38:55 <shapr> syntaxfree: You could always add it and send the patch to dons
13:39:57 <syntaxfree> I can't compile lambdabot!
13:40:11 <syntaxfree> @todo-add someone write get-diego, please!
13:40:12 <lambdabot> Entry added to the todo list
13:40:15 <shapr> Now you know where to start!
13:40:37 <SamB> @todo
13:40:37 <lambdabot> 0. SamB: A way to get multiple results from a google search
13:40:37 <lambdabot> 1. dons: improve formatting of @dict
13:40:37 <lambdabot> 2. dons: write Haskell Manifesto
13:40:37 <lambdabot> 3. lispy: don't let lambdabot's prettyprinter split the sequence @foo across lines
13:40:37 <lambdabot> 4. TheHunter: priviledged users should get priviledged listcommands.
13:40:39 <lambdabot> [22 @more lines]
13:40:45 <syntaxfree> @more
13:40:45 <lambdabot> 5. TheHunter: @type 1 :: Int
13:40:46 <lambdabot> 6. lispy: haddock gives a link from a type signature to the types.  It would be nice if it also let you find functions in the given module that use a type.
13:40:46 <lambdabot> 7. dons: Implement @whatis
13:40:47 <lambdabot> 8. dcoutts: implement @cool list, as a clone of the @todo(-add) commands
13:40:49 <lambdabot> 9. dons: there's some bug in the 'when i left' code of @seen
13:40:51 <lambdabot> [17 @more lines]
13:40:58 <SamB> nobody removes things from this list, do they?
13:41:44 <shapr> I wonder what's up with TheHunter
13:41:48 <shapr> I haven't seen him around in awhile.
13:42:38 <Cale> @type 1 :: Int
13:42:39 <lambdabot> Int :: Int
13:43:10 <allbery_b> that bug is IIRC it's choopping at the wronmg place and reporting type instead of value
13:44:55 <Cale> It should chop at the last :: in the line rather than the first.
13:45:39 <syntaxfree> @more
13:45:46 <syntaxfree> I hate that!
13:45:50 <syntaxfree> I want @more todos;
13:46:03 <syntaxfree> @todo
13:46:04 <lambdabot> 0. SamB: A way to get multiple results from a google search
13:46:04 <lambdabot> 1. dons: improve formatting of @dict
13:46:04 <lambdabot> 2. dons: write Haskell Manifesto
13:46:04 <lambdabot> 3. lispy: don't let lambdabot's prettyprinter split the sequence @foo across lines
13:46:04 <lambdabot> 4. TheHunter: priviledged users should get priviledged listcommands.
13:46:05 <syntaxfree> @more
13:46:06 <lambdabot> [22 @more lines]
13:46:06 <syntaxfree> @more
13:46:08 <lambdabot> 5. TheHunter: @type 1 :: Int
13:46:10 <lambdabot> 6. lispy: haddock gives a link from a type signature to the types.  It would be nice if it also let you find functions in the given module that use a type.
13:46:12 <lambdabot> 7. dons: Implement @whatis
13:46:14 <lambdabot> 8. dcoutts: implement @cool list, as a clone of the @todo(-add) commands
13:46:16 <lambdabot> 9. dons: there's some bug in the 'when i left' code of @seen
13:46:18 <lambdabot> [17 @more lines]
13:46:20 <lambdabot> 10. dons: sarahbot style @tell
13:46:22 <lambdabot> Plugin `more' failed with: IRCRaised thread killed
13:47:42 <emu> can someone explain to me why hIsOpen blocks?
13:48:02 <chessguy> what's a sarahbot style @tell? her @tell doesn't seem to work for me
13:50:06 <syntaxfree> maybe glguy can expand on his hpaste project and provide online access to @todo
13:50:16 <glguy> ?seen Saizan
13:50:16 <lambdabot> Saizan is in #haskell. I last heard Saizan speak 3h 30m 50s ago.
13:50:39 <huschi> @type map
13:50:41 <lambdabot> forall b a. (a -> b) -> [a] -> [b]
13:50:42 <Saizan> glguy:?
13:51:01 <glguy> Saizan: do you still have the hpaste code for happs .9
13:51:01 <syntaxfree> @get-shapr
13:51:02 <lambdabot> shapr!!
13:51:04 * syntaxfree ducks
13:51:10 <syntaxfree> I promise, I won't do it anymore.
13:51:16 <syntaxfree> I'm bored enough I'm going insane.
13:51:29 <shapr> what!!
13:51:33 <dmhouse> syntaxfree: write some code!
13:51:36 <chessguy> @darcs get http://haskell.org/shapr
13:51:37 <shapr> syntaxfree: Write some useful code!
13:51:37 <lambdabot> get http://haskell.org/shapr not available
13:51:41 <shapr> dmhouse: You beat me :-)
13:51:54 <Saizan> glguy: yes, you need yesterday-version, because so you can import the 0.8 api
13:51:54 <syntaxfree> My brain has not been the same since my ex dumped me.
13:51:59 <dmhouse> syntaxfree: or write for the Wikibook. :)
13:52:07 <shapr> syntaxfree: darcs get http://www.scannedinavian.com/~eric/hpaste
13:52:10 <syntaxfree> I can't seem to do any work.
13:52:12 <shapr> syntaxfree: Add the @todo display!
13:52:16 <dmhouse> syntaxfree: write a whiney blog post! :)
13:52:24 <syntaxfree> I can't even do that.
13:52:42 <syntaxfree> I think I might need a shrink or something.
13:52:59 <glguy> Saizan: yesterday version?
13:53:16 <allbery_b> does sound just a bit like clinical depression.  not that that's surprising
13:53:38 <syntaxfree> glguy: hpaste might be an interesting project to begin hacking into, because it's so simple.,
13:53:47 <syntaxfree> I don't even know the mechanics of contributing to open source software.
13:53:48 <glguy> that's quite true
13:53:55 <shapr> syntaxfree: Ever used darcs?
13:53:56 <syntaxfree> I change stuff and record it?
13:54:02 <Saizan> glguy: happs' yesterday version, musasabi changed the cabal and SimpleHTTP so you can import it in your app
13:54:04 <syntaxfree> shapr: yes, for my undergrad monograph.
13:54:15 <earthy> syntaxfree: ah, you lack the concept that's called 'darcs send'
13:54:16 <shapr> syntaxfree: change, record, and darcs send to the author, in this case glguy
13:54:29 <glguy> shapr: do you have the version that Saizan is talking baout?
13:54:29 <chessguy> i was wondering this too
13:54:36 <shapr> glguy: I just pulled it.
13:54:36 <chessguy> what do you mean by 'record'
13:54:38 <syntaxfree> ok, bbl.
13:54:44 <glguy> shapr: that's the one you instlaled earlier?
13:54:49 <glguy> shapr: or just now
13:54:53 <shapr> It's installed now.
13:55:03 <glguy> Saizan: OK, I have that...
13:55:17 <Saizan> ok, dcc-ing
13:55:24 <dmhouse> chessguy: darcs repositories are essentially a series of patches that tell you how to get from the initial code import to how the code is currently.
13:55:38 <chessguy> ...
13:55:40 <glguy> I think it got blocked
13:55:42 <glguy> this is mirc
13:55:42 <dmhouse> chessguy: recording changes amounts to taking all the changes to the files since you last recorded and making a new patch out of them.
13:55:44 <glguy> one second
13:55:55 <Saizan> should i rename it to .txt?
13:56:02 <glguy> try again, i turned off the filter
13:56:03 <shapr> chessguy: Were you joking?
13:56:08 <chessguy> so you only darcs sends something like a diff report?
13:56:19 <chessguy> shapr, no i really am this dumb
13:56:30 <shapr> chessguy: It's not dumb, it's called something you don't know yet.
13:56:36 <chessguy> that too
13:57:00 <shapr> The stuff I do not know is much larger than the stuff I do know.
13:57:13 <dmhouse> chessguy: yeah, darcs send allows you to send patches over email, then on the other side you use darcs apply to apply them to the files.
13:57:20 <earthy> shapr: it'd be scary if that was reversed
13:57:31 <huschi> isn't it possible to derive class instances from GADTs?
13:57:36 <chessguy> oh so darcs can figure out the difference automatically?
13:57:44 <shapr> earthy: I'd probably be lost in my own head if it were reversed.
13:58:18 <earthy> chessguy: ahyup
13:58:23 <dmhouse> huschi: no, because in most cases it wouldn't make sense.
13:58:28 <earthy> ever heard of the 'diff' and 'patch' programs?
13:58:39 <chessguy> vaguely
13:58:40 <huschi> dmhouse: thx. so i have to do it myself... :(
13:58:42 <glguy> Saizan: if you want to use the current code, you need the latest xhtml and latest hscolour
13:58:48 <glguy> Saizan: My patches are in darcs
13:58:56 <glguy> for those libs
13:59:05 <shapr> glguy: I'll be back in 45 mins or so, I must unicycle before the sunlight is all gone.
13:59:10 <glguy> kk
13:59:26 <dmhouse> huschi: consider data Foo where Bar :: a -> Foo. For the Eq instance, the compiler has to write code like Bar x == Bar y, but x and y might have different types.
13:59:57 <glguy> anyone know how to change happs' port number?
14:00:09 <chessguy> there should be a step-by-step guide to making a package available to 'darcs get' it, getting it to modify, submitting a patch, and applying the patch
14:00:12 <shapr> --http-port=
14:00:14 <Saizan> glguy: k
14:00:22 <shapr> chessguy: I think there is...
14:00:31 <glguy> shapr: when I run my binary?
14:00:35 <shapr> glguy: yup
14:00:36 <Saizan> @darcs hscolour
14:00:36 <lambdabot> hscolour not available
14:00:41 <chessguy> oh?
14:00:42 <shapr> @where hscolour
14:00:42 <lambdabot> http://www.cs.york.ac.uk/fp/darcs/hscolour/
14:00:47 <dmhouse> Gah, Typeable instances should automatically derive.
14:00:55 <shapr> chessguy: dons wrote a guide like that, but maybe it's only for creating a package
14:01:10 <shapr> chessguy: You could modify that guide into a "how to contribute to a Haskell package" maybe?
14:01:10 <allbery_b> as in, not even requiring deriving (Typeable)?
14:01:22 <chessguy> shapr, how am i supposed to do that if i don't know myself?
14:01:37 <shapr> chessguy: you are the best person to do that because you are the perfect audience.
14:01:47 <glguy> hpaste: connect: does not exist (No route to host)
14:01:50 <glguy> I can't connect ot freenode?
14:02:03 <chessguy> hmm
14:02:10 <shapr> chessguy: That's why I often write tutorials when I'm getting into a new piece of software, because the developers can't
14:02:14 <shapr> they know too much
14:02:20 <shapr> anyway, I'll be back in 45 or so
14:02:22 <chessguy> shapr, i do that often too
14:03:04 <chessguy> (e.g., my recent 'tutorial' on lazy evaluation)
14:03:28 <chessguy> i knew what lazy evaluation was, but hadn't worked through an example like that before
14:03:54 <kowey> chessguy: maybe the tutorial could be folded into this page http://en.wikibooks.org/wiki/Understanding_darcs/Working_with_others
14:03:56 <lambdabot> http://tinyurl.com/2owhfm
14:04:18 <malebria> http://www.haskell.org/haskellwiki/Humor/Microsoft
14:04:20 <lambdabot> Title: Humor/Microsoft - HaskellWiki
14:04:20 <glguy> http://kakapo.scannedinavian.com:8000/ -- but CSS files are missing atm
14:04:22 <lambdabot> Title: All pastes
14:04:24 <malebria> I didn't get the fun of this joke.
14:04:29 <glguy> and I can't connect to IRC from this machine
14:04:33 <huschi> dmhouse: but if i have Foo :: Show a => a -> Bar
14:04:44 <huschi> it would be possible to drive Show.
14:05:01 <dmhouse> huschi: yeah, but it can't be done in general, so it's not possible for anything, unfortunately.
14:05:49 <huschi> dmhouse: can DrIFT do it?
14:05:52 <Cale> malebria: consider that it was written in 1998
14:06:46 <malebria> Cale: But microsoft is researching in haskell nowadays, right?
14:06:49 <Cale> The irony of the whole thing is that many of the people mentioned there are really working for Microsoft now.
14:07:06 <SamB> Cale: oh, you mean they weren't at the time?
14:07:09 <earthy> not conal though, right?
14:07:11 <dmhouse> huschi: yeah, maybe.
14:07:20 <fasta> Is there a way to see what is overflowing the stack?
14:07:27 <huschi> dmhouse: i will try :)
14:07:30 <Cale> SamB: that was written before SPJ moved to Microsoft
14:07:39 <SamB> oh?
14:07:40 <ctkrohn> Hey... stupid monad question.  I have a function userIdExists Integer -> IO Bool.  I'd like to do something like do {b1 <- userIdExists x; b2 <- userIdExists y; if b1 && b2 then ....} but it seems rather verbose to separately bind the b1 and b2 variables.  Perhaps there's a more concise way using >>= ?
14:07:41 <chessguy> what port does darcs work on?
14:08:17 <Cale> ctkrohn: [b1,b2] <- mapM userIdExists [x,y]
14:08:32 <ctkrohn> Cale: ah, good call
14:08:34 <huschi> chessguy: the port of ssh or http?
14:08:41 <ctkrohn> didn't realize pattern matching could work like that... nice
14:08:43 <huschi> depends on how you use it.
14:09:04 <malebria> Cale: this is really ironic..
14:09:12 <chessguy> huschi, you can use either?
14:09:14 * mikojiba is away: Occupé
14:09:20 <nmessenger> @type liftM2 (&&) (udefined 1 :: IO Bool) (undefined 1 :: IO Bool)
14:09:21 <lambdabot> Not in scope: `udefined'
14:09:23 * mikojiba is back (gone 00:00:07)
14:09:30 <nmessenger> @type liftM2 (&&) (undefined 1 :: IO Bool) (undefined 1 :: IO Bool)
14:09:32 <lambdabot> IO Bool
14:09:47 <huschi> chessguy: afaik. maybe you can use ftp too. but i'm not sure.
14:09:53 <Cale> ctkrohn: yeah, actually in the IO monad it's a little unsafe to pattern match like that, because if the pattern doesn't match your program dies, but in this case, it's okay
14:10:14 <emu> lisppaste2: url
14:10:15 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
14:10:19 <ctkrohn> I see
14:10:50 <glguy> does anyone have a copy of hpaste CSS?
14:10:59 <ookk> is there a partial sum function?
14:11:15 <earthy> ookk: what do you mean by 'partial sum'?
14:11:15 <lisppaste2> emu pasted "Strange IO behavior" at http://paste.lisp.org/display/35657
14:11:21 <chessguy> oh, this looks good: http://darcs.net/DarcsWiki/GettingStarted
14:11:22 <lambdabot> Title: GettingStarted - DarcsWiki
14:11:24 <ookk> partialSum [1,2,3] = [1,3,6] ?
14:11:33 <twanvl> > scanl (+) 0 [1,2,3]
14:11:34 <lambdabot>  [0,1,3,6]
14:11:41 <emu> am I perhaps running into locking issues with handles?
14:11:44 <ookk> ok thx
14:13:50 <Saizan> glguy: when i saved the page to try to fix overflow :)
14:14:01 <Saizan> s/the/a/
14:16:22 <glguy> Saizan: I'm going to convert it all over to one CSS file with reasonable CLASS names
14:17:38 <Saizan> glguy: oh, didn't even see there were many of them
14:17:46 <glguy> thats the problem :)
14:19:03 <dmhouse> glguy: your paste app has stolen port 8000 on scannedinavian.com! :(
14:19:12 <glguy> stolen?
14:19:34 <dmhouse> Well, I've got a HAppS app on the same box.
14:19:48 * dmhouse is trying to figure out how to tell it to bind to a different address.
14:19:54 <huschi> dmhouse: DrIFT doesn't work with existential types or GADTs
14:19:56 <glguy> ah (I imagine that everyone should pick a non-default port
14:19:58 <glguy> i killed it
14:20:35 <dmhouse> glguy: cheers. Any idea how you do pick a different port, then?
14:20:47 <glguy> shapr said : --http-port=XXXX
14:20:50 <glguy> when you run your app
14:21:24 <Saizan> 80 is taken?
14:21:31 <glguy> yep
14:21:54 <dmhouse> glguy: aha! Great.
14:24:04 <Saizan> you know if there's a way to run a IO a inside an happs' app?
14:24:12 <Cale> GHCi seems so much smarter than all the other tools regarding packages. It's frustrating that the system will refuse to compile something when some package isn't explicitly in the cabal file, but GHCi will load the module right away.
14:24:20 <glguy> Saizan: and get the result?
14:24:28 <Saizan> glguy: yes
14:24:36 <glguy> I believe that it's a bitch
14:24:39 <glguy> what did you want to do
14:25:23 <Saizan> glguy: to do proper multichannel the bot and the happs need to share a mutable list of channels
14:25:57 <fasta> Is there any way I can get to know for sure what is getting evaluated?
14:26:34 <fasta> Since my Debug.trace calls seem to indicate that a certain function is crashing, while in testing it always works, nor are there any indications that it contains an infinite recursion.
14:27:18 <fasta> er Debug.Trace.trace
14:28:05 <Cale> what are you printing inside the calls to trace?
14:28:17 <Cale> Static strings, or parts of the data around there?
14:28:37 <Cale> If you use trace to print values from your code, it can strictify things.
14:29:19 <fasta> Cale: Both
14:29:30 <fasta> Cale: and I am aware of that
14:29:38 <dmhouse> Can I get bash to print exit codes from commands I execute?
14:29:56 <fasta> Cale: essentially I would like to know when I exit a function
14:30:10 <nmessenger> dmhouse, 'echo $!' I think
14:31:09 <dmhouse> nmessenger: doesn't appear to do anything.
14:31:16 <nmessenger> $? actually: http://tldp.org/LDP/abs/html/exit-status.html
14:31:34 <dmhouse> Great. Thanks.
14:32:03 <fasta> Cale: if I do trace "foobar" $! <function applied to value that might not terminate>, would that print "foobar" only when it terminates?
14:34:18 <JuanMarcus> hi =D
14:34:33 <JuanMarcus> question about sockets
14:35:08 <JuanMarcus> how come the HostAddress is a word32 thing?
14:35:22 <JuanMarcus> i don't get it
14:35:30 <allbery_b> re bash:  you can embed $? (suitably escapd) into $PS1 to see the exit status of a command automatically.
14:35:49 <Cale> fasta: it would print foobar before evaluating the thing further at all
14:36:00 <dmhouse> allbery_b: I just wanted the exit status of a single command.
14:36:07 <fasta> Cale: ok, is there a way to do get what I want?
14:36:10 * nmessenger has not used sockets, but IP addresses are four-byte dotted strings, so a Word32 would make sense.
14:36:23 <Cale> fasta: you could put the trace further down
14:36:33 <JuanMarcus> yeah, very logical
14:36:58 <fasta> Cale: that's a work around
14:37:05 <Cale> huh?
14:37:13 <fasta> Cale: or I am missing the point.
14:37:28 <musasabi> dmhouse: normally one just uses different http ports.
14:37:47 <dmhouse> musasabi: what was that in response to?
14:38:00 <Cale> trace msg x will, when evaluated, print msg, before returning x
14:38:10 <musasabi> the HappS thing.
14:39:00 <Cale> It's not clear when it would ever print the value otherwise.
14:39:31 <Cale> (since there's only one time when it's actually "there" in the code)
14:42:22 <Cale> If the message prints, you can be sure that it will evaluate x to WHNF.
14:42:27 <fasta> Cale: I am asking for a function f, that prints "foobar" iff its argument that f should fully request somehow terminates.
14:43:07 <Cale> can't you sort of tell whether it ever terminates?
14:43:18 <dmhouse> fasta: some simple concurrency>
14:43:35 <fasta> Cale: I am not sure of anything anymore at this point.
14:43:40 <Cale> okay
14:43:55 <Cale> Well, you could do something like...
14:44:05 <Cale> x `seq` trace "foobar" x
14:44:26 <Cale> that'll evaluate x to WHNF, then print "foobar" before returning x
14:44:37 <dmhouse> fasta: how about making the long computation write an MVar when it's finished, which the parent computation picks up and runs whatever when the child is done?
14:44:50 <Cale> I'm assuming this is in pure code
14:45:06 <Cale> because if it wasn't, he'd probably be using putStrLn
14:45:14 <fasta> Yes, it's pure
14:45:18 <dmhouse> I assumed it was IO when we started talking about printing things.
14:46:55 <emu> is there a nifty function for interpreting, say, a 4-elem ByteString as a Word32?
14:47:10 <fasta> Cale: ok, and to be sure it enters this computation, I put another trace around this?
14:47:15 <dmhouse> ?hoogle unpack
14:47:16 <lambdabot> Data.PackedString.unpackPS :: PackedString -> String
14:47:16 <lambdabot> Network.Socket.unpackFamily :: CInt -> Family
14:47:43 <dmhouse> emu: http://haskell.org/ghc/docs/latest/html/libraries/base/Data-ByteString.html#v%3Aunpack, perhaps?
14:47:45 <lambdabot> http://tinyurl.com/wn5rt
14:48:00 <emu> right, duh
14:48:01 <dmhouse> I don't know how you'd do the Word8 -> Word32 conversion, though.
14:48:16 <emu> well i can write a small algo to do that i guess
14:48:34 <fasta> Cale: My trace now shows "entering" a few times, followed by *** Exception: stack overflow
14:49:27 <glguy> http://kakapo.scannedinavian.com:1684/0
14:49:29 <lambdabot> Title: first post
14:49:31 <glguy> almost back to normal
14:50:31 <fasta> Isn't the idea of Haskell that it's referential transparant?
14:50:58 <fasta> I would be wildly surprised it the type of value I put in my container would matter for its behaviour.
14:51:39 <Cale> fasta: what's the type of x?
14:51:42 <fasta> Hmm, I think I found the issue :)
14:52:00 <SamB> hmm. how puzzling...
14:52:04 <fasta> It appears that I am trying to insert the _same_ value an unlimited amount of times.
14:52:04 <Cale> seq will only force things into WHNF, which means just determining the top level constructor, and nothing more
14:52:25 * SamB wonders why his lexer isn't accepting a capital letter after an underbar...
14:52:31 <lisppaste2> dmhouse pasted "Why does this code hang?" at http://paste.lisp.org/display/35662
14:52:46 <matt_r> chaps, I am having some ghc trouble
14:52:48 <dmhouse> I'm having weird problems with some simple IO hanging. Anyone take a look?
14:52:48 <lisppaste2> matt_r pasted "ghc is taking my lets" at http://paste.lisp.org/display/35663
14:53:00 <huschi> if i have "instance Num a => C a where" and "instance C Int where" which one will be taken for ints?
14:53:09 <allbery_b> dmhouse:  how vbig is the data you're sending to it?
14:53:20 <dmhouse> allbery_b: about 10 characters
14:53:28 <matt_r> ghc (even with optimisations off) is reducing away me lets before it gets to core.  I want core to have lets in it
14:53:45 <matt_r> any suggestion (besides making more complicated lets)?
14:54:08 <allbery_b> you may need forkIO; linerar write/read from a piped process can blcok because pipes typically hold onluy a limited amount of data and will block if the sibprocess doesn't read them.  so the subprocess can be blocked waiting for you to read its output while you're blocked waiting for it to read your output to it
14:54:41 <matt_r> s/chaps/chaps and chapettes
14:54:42 <Cale> huschi: that'll only be allowed with -fallow-overlapping-instances, and possibly -fallow-undecidable-instances, and I think it'll pick the more specific one.
14:55:12 <huschi> Cale: thx. that was what i hoped.
14:55:21 <dmhouse> allbery_b: forkIO around the read?
14:55:30 <dmhouse> allbery_b: I already forkIO around the write, as you can see.
14:55:52 <dmhouse> allbery_b: this didn't use to hang, let me paste the old version.
14:56:36 <allbery_b> yeh.  I'm not real familiar with doing this in haskell but I know how most unixlikes process stuff over pipes (which are used to implemnt runInteractiveCommand)
14:56:51 <dmhouse> allbery_b: well, actually, it was just the contents of the ExitSuccess branch without the system call and the case cruft,
14:56:57 <allbery_b> I could see hGetContents returning a lazy string which you might need to force, which can also lead to confusion
14:59:24 <dmhouse> It appears to be the system call that's hanging it.
14:59:37 <Cale> matt_r: I have no real idea why it would be doing that, but why should you care?
15:00:23 <matt_r> I want to understand core better, and I figure seeing what core corresponds to simple haskell programs will be enlightening.
15:01:24 <matt_r> my phd involves writing fragments of a compiler - the explicitly typed core langauge will be similar to F (and perhaps later Fc) - so I want to know more about core
15:01:36 <allbery_b> hm.  depending on the exact flavor of "which" you're using, it could decide to tryt to source your shell startup files, which if they assume interactivity may do unexpected things when run on a pipe instead of a tty/pty
15:02:07 <Cale> matt_r: what happens if the usage in the let is genuinely recursive?
15:02:23 <matt_r> good thought...
15:02:36 <dmhouse> allbery_b: right, well is there a better way to test for the existence of a binary?
15:02:40 * allbery_b prefers to use type, which is understood by any shell written in the past 15 years and doesn't play stupid shell tricks
15:03:13 <dmhouse> type? Is that a command?
15:03:30 <allbery_b> yes, a sh (and sh-compatible) builtin
15:03:34 <allbery_b> system invokes sh to run commands
15:03:53 <dmhouse> Doesn't appear to be available in Eshell.
15:04:02 <dmhouse> But, what, I'd just replace which with type and expect it to work?
15:04:05 <glguy> it's in sh, but not csh
15:04:07 <allbery_b> yes
15:04:31 <matt_r> cale: first attempt is full of cruft ....
15:04:50 <allbery_b> system should be using /bin/sh (if it's not, it's a bug --- system() should be have consistently, not depend on user's shell weirdnesses)
15:06:08 <emu> the ghc users mailing list is giving me fits
15:06:29 <dmhouse> Still hangs.
15:06:42 <allbery_b> hrm
15:07:31 <allbery_b> not sure to look otherwise, if you're certain the system is hanging and not the runInteractiveCommand or etc.
15:08:25 <matt_r> cale: I thin it still simplifies some of it
15:08:39 <sorear> tell fodder
15:08:43 <matt_r> cale: perhaps my example is not genuine recursion
15:08:56 <dmhouse> allbery_b: I'll probably build some proper config on there instead of testing at runtime for the existence of the binary.
15:09:08 <Cale> let x = x in x
15:09:35 <beschmi> matt_r:  which flags are you using?
15:10:03 <matt_r> beschmi: ghc -fno-code -fext-core -O0
15:11:23 <matt_r> cale: your suggestion has the desired effect
15:11:48 <lisppaste2> matt_r pasted "cale: result of suggestion" at http://paste.lisp.org/display/35664
15:12:02 <Cale> neat
15:12:26 <SyntaxNinja> kosmikus: you've got mail
15:12:36 <SyntaxNinja> me & iavor are looking at polymorphic components.  let me know if you have any info for me :)
15:12:57 <SyntaxNinja> dons: didn't see if you replied earlier, still waiting for comments on pattern guards.
15:13:03 <SyntaxNinja> (I just msg'd Ravi)
15:13:13 <matt_r> so, now I know how to force it to leave in the lets, but I would still be interested to know what part of the compiler is getting rid of them since optimisation is off
15:13:28 <beschmi> matt_r: there are some simplifications even with -O0, i think you are better of with the -ddump-foo options
15:14:01 <SamB> Igloo: so when is "happy -i -g -d" going to work in Debian?
15:15:31 <SamB> oh great, even just -i -d doesn't work
15:15:35 <Igloo> SamB: If you mean the outstanding Debian bug then I think I gave Simon a patch that should be in the latest release to make it work, where "work" means give an error rather than just breaking
15:15:58 <SamB> Igloo: how is that an improvement over what it does now?
15:16:03 <sorear> matt_r: btw, we have a new pastebin
15:16:12 <sorear> @paste
15:16:13 <lambdabot> http://fserv.pikapphi.umr.edu:8000/
15:16:38 <Igloo> SamB: If you want it to do something useful then you'll probably have to submit a patch. It's documented as not working already
15:16:46 <SamB> oh.
15:17:00 <Igloo> It's just that the option parser didn't know that it wasn't meant to work
15:17:04 <SamB> is -d documented as not working?
15:17:12 <Igloo> -d without -a, yes
15:17:31 <SamB> oh. the option parser should just force that...
15:17:50 <Igloo> Yes, which is why I sent Simon the patch I mentioned earlier...
15:17:52 <matt_r> sorear: that link doesn't seem to work ...
15:18:03 <SamB> I thought you said it made an error message!
15:18:36 * Igloo can't remember, but I think it produces an error to the effect that you can't use -d without -a, yes
15:18:49 <SamB> I meant, it should just enable -a if you need that for -d
15:19:13 * Igloo doesn't think turning on debugging options should automatically change other things
15:19:35 <SamB> this is for debugging the parser tables, though!
15:19:46 <SamB> also the grammar
15:19:52 <SamB> not the *generator*
15:20:12 <matt_r> beschmi: thanks for the suggestin, but unless I am using the wrong -ddump-(simpl) then it is giving the same results
15:20:15 <SamB> or, at least, if you are debugging happy... wouldn't you very well know about that?
15:20:37 <dmhouse> shapr: ping
15:20:46 <Igloo> Well, if you want to submit a patch that does it your way then I don't feel strongly about it  :-)
15:22:26 <sorear> glguy: where's the pastebin?
15:23:27 <dmhouse> ?tell shapr that my forums are running at http://scannedinavian.com:8012, username and pass are as I told you previously.
15:23:27 <lambdabot> Consider it noted.
15:23:53 <SamB> oh, great, now I've got happy producing invalid Haskell code...
15:25:33 <shapr> pong
15:25:33 <lambdabot> shapr: You have 1 new message. '/msg lambdabot @messages' to read it.
15:26:18 <SamB> Igloo: does Happy 1.16 actually work?
15:26:55 <Igloo> I have no reason to believe otherwise
15:29:10 <SamB> Igloo: I get:
15:29:15 <SamB> Parser.hs:50:0:
15:29:15 <SamB>     Multiple declarations of `Parser.happyParse'
15:29:15 <SamB>     Declared at: GenericTemplate.hs:75:0
15:29:15 <SamB>                  Parser.hs:50:0
15:29:20 <sorear> @tell glguy Backspacing while entering darcs descriptions Does Not Work.
15:29:20 <lambdabot> Consider it noted.
15:29:49 <glguy> hi
15:29:49 <matt_r> sorear: ditto - that drives me nuts
15:29:49 <lambdabot> glguy: You have 1 new message. '/msg lambdabot @messages' to read it.
15:29:53 <glguy> ?messages
15:29:53 <lambdabot> sorear said 32s ago: Backspacing while entering darcs descriptions Does Not Work.
15:30:08 <glguy> sorear: poweroutage took my server down
15:30:09 <sorear> glguy: where's the pastebin now?
15:30:22 <glguy> kakapo.scannedinavian.com
15:30:28 <bos> that's what you get for letting darcs put the terminal into cbreak mode :-)
15:30:32 <sorear> should I have waited before pushing the lambdabot patch?
15:30:57 <glguy> sorear: apparently :(
15:31:22 <glguy> sorear: because scannedinavian isn't lettming me connect ot IRC
15:31:35 <sorear> ok.
15:31:44 <sorear> Well, I'll learn HAppS
15:31:52 <glguy> http://kakpo.scannedinavian.com:8000
15:31:58 <sorear> and try and write that API
15:32:04 <sorear> @where paste
15:32:04 <lambdabot> http://paste.lisp.org/new/haskell
15:32:19 <sorear> @where+ paste http://kakpo.scannedinavian.com:8000
15:32:19 <lambdabot> Done.
15:32:33 <sorear> typo?
15:32:35 <sorear> @where+ paste http://kakapo.scannedinavian.com:8000
15:32:35 <lambdabot> Done.
15:32:45 <glguy> my css files are held hostage on the downed machine
15:32:57 <glguy> so I have trying to rebuild
15:32:57 <sorear> have no fear
15:33:02 <sorear> I can't see CSS
15:33:09 <glguy> heh
15:33:14 <chessguy> wait, which is correct, kakpo or kakapo
15:33:19 <glguy> kakapo
15:33:36 <beschmi> matt_r: i thought -ddump-ds would work
15:34:18 <sorear> glguy: when I select show-line-numbers, it hides the text :(
15:34:25 <matt_r> beschmi: of course - I didn't have it in my head that the result of the desugureer is core
15:34:26 <glguy> ??
15:34:42 <glguy> sorear: I don't understand
15:34:50 <Saizan> sorear: you see only the line numbers?
15:34:56 <sorear> I see nothing
15:35:05 <Saizan> it's a post query
15:35:07 <sorear> Ah I think I've found it
15:35:13 * sorear hacks a patch
15:35:23 <glguy> what was it?
15:35:33 <matt_r> beschmi: you are a champ :)
15:35:57 <matt_r> beschmi: much thanks
15:36:02 * Saizan never test on textual browers
15:36:20 <shapr> glguy: What sort of error do you get from the irc connection?
15:36:29 <glguy> shapr: it can't connect
15:36:33 * matt_r thinks kakapo is a strange nz parrot
15:36:34 <glguy> shapr: telnet can't either
15:36:40 <sorear> glguy: init . lines
15:36:55 <glguy> sorear: OH
15:36:58 <sorear> is there a Haskell chomp?
15:37:09 <shapr> matt_r: that's correct
15:37:19 <glguy> yeah, I'll have to come up with a different way of shaving off the "</pre>"
15:37:22 <Saizan> init there is to strip a </pre> tag
15:37:27 <sorear> glguy: I'm suprised you caught on so quickly... should I know something?
15:37:29 <glguy> like... not shaving it off
15:37:39 <glguy> I'll fix that
15:37:45 <matt_r> shapr: super endangered because they just sit around waiting to be eaten by cats and foxes right?
15:37:50 <sorear> anyway, my test paste had no final newline
15:38:03 <shapr> matt_r: that's it
15:38:03 <sorear> hence it had no lines after init . lines
15:38:37 <beschmi> matt_r: np, i'm interested in this myself. trying to see some type level lambdas in core atm
15:38:47 <shapr> matt_r: Freezing in place was an excellent strategy when their enemies only had sight. But kakapos have a strong musky scent and are also the largest parrots in the world. They were common pets many decades ago.
15:39:14 <glguy> sorear: I think I fixed it, testing
15:39:14 <shapr> matt_r: http://www.kakapo.net/en/ They also make amazing BOOMP noises.
15:39:41 <sorear> still fails
15:40:17 <matt_r> shapr: I am a bit of a parrot fan myself - we have a pair of king parrots in the backyard as I speak and a big flock of cockatoos over the other side of the valley
15:40:22 <glguy> sorear: try
15:40:27 <sorear> glguy: suggestion: make the "show line numbers" use GET
15:40:28 <matt_r> beschmi: cool - to what end I wonder?
15:40:35 <sorear> it IS idempotent, after all
15:40:44 <sorear> glguy: hurray!
15:41:08 <shapr> matt_r: I'm jealous, I'd enjoy the amazing bird variety in .au. Hopefully I'll get to spend a few months there sometime.
15:41:17 <shapr> I'd like to unicycle around .au sometime :-)
15:41:17 <glguy> sorear: it's using POST because XHTML likes posts when you use the "gui" function
15:41:23 <glguy> I could switch it
15:41:29 <beschmi> matt_r: i'm just trying to understand how all the haskell features are translated to system F
15:41:38 <glguy> sorear: does it matter?
15:41:56 <chessguy> is there a darcs repository somewhere that i can play around with darcs on?
15:41:58 <sorear> It means I can't specify show-line-numbers in the URL.
15:42:00 <matt_r> shapr: it seems we share a few interests - I just got a singlespeed the other week - but unicycle is too much for me :)
15:42:04 <sorear> @where darcs-unstable
15:42:04 <lambdabot> I know nothing about darcs-unstable.
15:42:11 <glguy> sorear: ah
15:42:24 <sorear> http://www.abridgegame.org/repos/darcs-unstable
15:42:25 <matt_r> beschmi: we could be of use to each other then, because I am thinking along similar lines
15:42:26 <lambdabot> Title: Index of /repos/darcs-unstable
15:42:37 <sorear> @where+ darcs-unstable http://www.abridgegame.org/repos/darcs-unstable
15:42:37 <lambdabot> Done.
15:42:39 <glguy> shapr: do you or does your NOC block IRC?
15:42:43 <chessguy> sorear, thanks
15:42:43 <matt_r> beschmi: well, perhaps I could be of use to you, you have already helped me out!
15:42:48 <sorear> what's a NOC?
15:42:56 <glguy> network op center
15:43:19 <shapr> matt_r: Just takes practice :-) I'm about to get V-brakes on my unicycle - Here's me and my unicycle - http://picasaweb.google.com/shae.erisson/OakMountainUnicycling/photo#5020679394879006402
15:43:22 <lambdabot> Title: Picasa Web Albums - shapr - Oak Mountain ..., http://tinyurl.com/yt37cs
15:43:24 <chessguy> yikes
15:43:31 <chessguy> over 4000 patches there
15:43:44 <shapr> glguy: Can't be me, I don't have a firewall :-)
15:43:47 * sorear mutters something about --partial
15:44:17 <matt_r> shapr: holy moly - that is a serious unicycle - off road and all - I love it :)
15:44:32 <glguy> i don't understand why $ telnet irc.freenode 6667    stalls then
15:44:48 <shapr> glguy: I don't either, but I'm investigating...
15:44:49 <beschmi> matt_r: i don't need it for anything. so i just give up staring at core for now ;)
15:44:56 <glguy> freenode.org*
15:44:59 <matt_r> shapr: how do brakes on a unicycle work - do you have a freewhell?
15:45:08 <Excedrin> shapr: check dns
15:45:24 <shapr> Excedrin: seems to work
15:46:06 <shapr> matt_r: If you mean coasting, it doesn't work on a unicycle. Brakes are only for serious downhill use. But I'm trying to be a good mountain unicyclist, so...
15:46:35 * glguy has seen videos of people flying down hills on unicycles with their feet off the pedals
15:46:36 <shapr> matt_r: muni is a lot of fun, you should try it!
15:46:37 <matt_r> shapr: wow
15:46:44 <ihope> @index Fractional
15:46:45 <lambdabot> Prelude
15:46:51 <ihope> Really?
15:47:09 <allbery_b> yes
15:47:09 <ihope> What is a Fractional, exactly?
15:47:19 <glguy> ?instances Fractional
15:47:20 <lambdabot> Double, Float
15:47:26 <shapr> glguy: Hey, it works for me. telnet irc.se.freenode.net 6666
15:47:31 <matt_r> shapr: after I pay off the singlespeed, I will start saving for a muni :)
15:48:12 <ihope> irc.se.freenode.net?
15:48:14 <glguy> shapr: interesting
15:48:28 <shapr> matt_r: A muni like mine is about $1200 usd, mostly because of the profile hub & cranks.
15:48:41 <glguy> !paste -- i wonder if this is correct
15:48:42 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
15:48:47 <ohmega> I should get brake for my next unicycle too. Had almost forgot about that!
15:48:59 <matt_r> shapr: so saving is definately required :)
15:49:06 <shapr> I'll be building another one soon, and I'll use a Kris Holm geared hub for that, it'll be cheaper.
15:49:20 <ohmega> Is that hub available at all?
15:49:25 <glguy> shapr: do you have a port you prefer that I use?
15:49:27 <shapr> matt_r: Unicyclists on #haskell include ohmega, Lemmih, and dcoutts_
15:49:32 <shapr> glguy: Nah, I don't care.
15:49:46 <shapr> matt_r: And beelsebob
15:49:53 <shapr> I'm sure I'm forgetting somebody...
15:50:12 <shapr> ohmega is the man behind the swedish unicycle community.
15:50:19 <matt_r> shapr: no way - there is more than one?  I have underestimated unicycling
15:50:28 <fatalis> muni == mountain unicycle?
15:50:30 <shapr> fatalis: yup
15:50:38 <ohmega> ohmega: i just followed your path and gave up the adminship actually :)
15:50:42 <ohmega> uh
15:50:45 <ohmega> *shapr:
15:51:04 <fatalis> it sounds like rolling down a mountain to me
15:51:19 <shapr> matt_r: There's a bunch of crazy unicyclists in Sydney, and some in other .au cities too.
15:51:21 <ihope> shapr: the entire Swedish unicycle community?
15:51:44 <shapr> ihope: Well, ohmega started ehjulingsfolket.se and organized a bunch of meetings.
15:51:59 <glguy> Linking dist/build/hpaste/hpaste ...collect2: ld terminated with signal 15 [Terminated]
15:52:04 <glguy> I wonder why that happens so often
15:52:07 <shapr> fatalis: Yes, but at very high speeds and you're always on the edge of crashing. It's fun!
15:52:11 <sorear> that's never good :(
15:52:33 <shapr> glguy: my virtual server is limited in cpu and ram, so you often have to redo things when your process gets OOM'd
15:52:41 <glguy> oh
15:52:44 <fatalis> shapr, kinda like jaywalking on the highway
15:52:45 <matt_r> it is getting up the hills that worries me
15:52:54 <shapr> fatalis: Jaywalking on the interstate
15:53:00 <glguy> shapr: so will hpaste get killed off after a certain amount of time?
15:53:11 <fatalis> on the information superhighway...
15:53:22 <shapr> glguy: Not unless it sucks a bunch of resources at once. It's an average.
15:53:51 <shapr> matt_r: It's easier than you'd think. Going up hills on a muni is often faster than on a mountain bike. Going down is slower though.
15:54:35 <ohmega> shapr: Ehrm. It's probably true that you going up a mountain on a unicycle is faster than most people on a bike, but I don't think it's true in general ;)
15:54:53 <matt_r> shapr: well, you have me interested, I just went from 27 gears to one and it was not as hard as I thought, so maybe losing most of the rest of the bike is doable at some point as well
15:54:53 <shapr> Oh, maybe it just seems that way to me.
15:55:29 <fatalis> lose the rest and switch to a segway
15:55:46 <chessguy> sorear,  is there a file on this repository that i can scribble on that nobody will care about?
15:55:58 <sorear> !?
15:56:13 <sorear> fatalis: lose EVERYTHING and become a hiker!
15:56:18 <shapr> matt_r: I started unicycling when I was 32, and I started muni a year or two later. If you're younger than me, it'll probably be easier for you.
15:56:41 <sorear> chessguy: you want to do what with darcs?
15:56:42 <matt_r> shapr:  younger - yes - but not by much :)
15:57:02 <mbishop> you're all a bunch of old farts :P
15:57:07 <shapr> sorear: Or you could try the boneless roll down the hill I attempt sometimes.
15:57:09 <chessguy> sorear, i'm just learning to use it. i want to make a 'patch' that doesn't do anything
15:57:53 <sorear> chessguy: it's *very* easy to set up a private repository - infact that's one of the main selling points
15:58:21 * shapr waves his cane at mbishop 
15:58:22 <matt_r> sorear: I do a bit of that as well - but it is 11kms to work, so bike is much better :)
15:58:29 <chessguy> well, i'm behind a router here, not the best idea for me here, probably
15:58:43 <earthy> hm? what, with darcs? have you ever done a darcs get?
15:58:53 <hpaste>  glguy pasted: announce test at http://kakapo.scannedinavian.com:8000/2
15:58:57 <chessguy> earthy, yes
15:58:57 <earthy> if so, then you've already set up private repositories. ;)
15:59:00 <sorear> whoever said you had to make your repo public?
15:59:13 <chessguy> so i can get from localhost?
15:59:16 * earthy nods
15:59:17 <sorear> no
15:59:22 <chessguy> ...
15:59:24 <sorear> you can get from ../foo
15:59:29 <earthy> that'd be called getting from the local filesystem though. ;)
15:59:30 <sorear> a local path!!
15:59:40 <chessguy> hmm
15:59:50 <earthy> darcs get /path/to/myrepo
15:59:53 <sorear> you CAN set up a httpd, but it is unneccessary
16:00:14 * mbishop trips shapr
16:01:50 <earthy> g'night all
16:04:14 <SamB> you can also get via SSH
16:04:25 <xic> what happens if an exception is not handled?
16:04:40 <SamB> > error "unhandled exception"
16:04:40 <lambdabot>  Add a type signature
16:04:43 <SamB> > error "unhandled exception" :: ()
16:04:44 <lambdabot>  Exception: unhandled exception
16:04:55 <SamB> xic: something like that
16:05:09 <xic> SamB: sorry, i mean not in the main thread
16:05:14 <SamB> it gets printed out and your program (or thread) dies...
16:05:17 <sorear> xic: the thread is killed
16:05:26 <sorear> xic: (often silently :( )
16:05:34 <SamB> sorear: what?
16:05:36 <SamB> silently?
16:05:38 <SamB> that isn't nice...
16:06:03 <SamB> okay, so I said what ought to happen, in my opinion ;-)
16:06:31 <xic> are the ghc docs reliable with regards to what exceptions each function will throw?
16:06:45 <SamB> what docs?
16:06:51 <sorear> almost any function can throw any exception
16:06:56 <sorear> it's called "laziness"
16:06:56 <SamB> I don't remember them saying things like that
16:07:19 <xic> hPutChar
16:07:35 <xic> i mean IO a actions, not functions i guess
16:08:19 <chessguy> so, if you had multiple projects that you wanted people to be able to 'darcs get', you do a 'darcs init' in each folder?
16:10:02 <sorear> chessguy: yes
16:10:29 <sorear> darcs init is quick and painless.  do it as often as you can :)
16:10:51 <SamB> chessguy: you also have to "darcs add" all the files and "darcs record" the adds...
16:11:11 <sorear> and don't forget to darcs record your changes!
16:11:12 <JKnecht> has it become more 'production
16:11:22 <JKnecht> ' relative to say svn?
16:11:31 <SamB> hmm?
16:11:36 <JKnecht> darcs
16:11:41 <SamB> darcs is good for prototyping and stuff
16:11:44 <sorear> whose FUD is that? :P
16:11:56 <JKnecht> got it
16:12:06 <SamB> where "stuff" is "things smaller than GHC", I guess
16:12:14 <SamB> GHC's history is a bit long
16:12:19 <sorear> GHC uses darcs!
16:12:43 <SamB> sorear: and when I deal with GHC you wouldn't believe how many --partial problems I run into!
16:12:46 <JKnecht> FUD is beneath me. I speak from experience (albeit from about a year ago, whence the query).
16:13:26 <SamB> I will admit I speak a bit from fear
16:13:28 <sorear> ok :)
16:13:49 <sorear> anyway, *I* haven't had serious issues with darcs yet
16:13:53 <SamB> fear that darcs will corrupt my working directory and I won't be able to extract my patches
16:14:43 <sorear> the nice thing about darcs is if you use it in the normal way you wind up with 10 copies of your code and 0 risk of global corruption :)
16:14:44 <SamB> of course, really I'm only ever afraid of that happening with GHC's repository
16:15:18 <SamB> even if you do "find -name '*.hs' | xargs rm" by mistake, you are still okay ;-)
16:15:20 <JKnecht> yeah that's it. It wouldn't I think do anything of the sort, but it's lack of the aforementioned property gives rise to righteous caution
16:16:14 <sorear> aformentioned property?
16:16:19 * sorear missed it
16:16:25 <JKnecht> Produccione
16:16:54 <SamB> what property?
16:17:01 <sorear> hpaste: !whatsnew
16:17:02 <SamB> I don't speak latin-based languages
16:18:07 <JKnecht> 'production' is a characterization of a piece of software's worthiness to support serious endeavor/enterprise.
16:19:45 <sorear> GHC is a joke?
16:19:53 <SamB> oh. that.
16:20:03 <SamB> sorear: hmm?
16:20:06 <SamB> @ghc
16:20:06 <lambdabot> ghc says: absApply: Duff function
16:20:13 <SamB> a whole jokebook, actually
16:20:21 <sorear> well it's obviously not *serious*...
16:20:51 <SamB> sorear: well, darcs groans under its enormous bulk
16:21:08 <SamB> and, um, sometimes breaks
16:21:22 <SamB> @ghc
16:21:23 <lambdabot> ghc says: internal error: EVACUATED object entered!
16:21:28 <SamB> @ghc
16:21:28 <lambdabot> ghc says: No parameters for class
16:21:30 <SamB> @ghc
16:21:30 <lambdabot> ghc says: primitive string literal must contain only characters <= '\\\\xFF\\'
16:21:43 <SamB> !!!!!
16:21:50 <SamB> '\\\\xFF\\'?
16:22:05 <jcreigh_> 255?
16:22:05 <SamB> that looks... uh... a bit excessivlely escaped?
16:22:34 <SamB> > '\\\\xFF\\'
16:22:35 <lambdabot>  Improperly terminated character constant
16:22:40 <SamB> > '\xFF'
16:22:41 <lambdabot>  '\255'
16:22:54 <twanvl> > "'\\\\xFF\\"
16:22:55 <lambdabot>  "'\\\\xFF\\"
16:24:09 * glguy thinks hpastes CSS is back to acceptable
16:24:17 <Cale> @paste
16:24:18 <lambdabot> http://fserv.pikapphi.umr.edu:8000/
16:24:24 <glguy> !paste
16:24:25 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
16:24:32 <glguy> ?where paste
16:24:33 <lambdabot> http://kakapo.scannedinavian.com:8000
16:24:44 <Cale> What happened to it?
16:24:51 <glguy> power outage
16:24:54 <Cale> oh
16:25:04 <glguy> the CSS is stranded on the server that doesn't have power
16:25:10 <Cale> ah
16:25:14 <glguy> so I moved to shaprs hosted service
16:25:21 <glguy> that should be more stable
16:25:56 <Cale> I think the other CSS looked slightly better, but this is fine.
16:26:03 <twanvl> Why is there a view link for the pastes, as opposed to just making the entire line a link?
16:26:42 <glguy> can an <li> be inside a <a>?
16:26:59 <JKnecht> No
16:27:39 <twanvl> Why do you use <li>s, that doesn't make much sense.
16:28:33 <twanvl> I would expect <li><span class="nick">me</span><span class="title">something</span></li>
16:28:56 <chessguy> hmm
16:29:05 <chessguy> so what does 'darcs send' actually do with the patch?
16:29:17 <chessguy> i don't see any change on the server side
16:30:12 * allbery_b thought it sent email, and the recipient fed it back to darcs to apply it
16:30:38 <allbery_b> (darcs apply)
16:31:27 <glguy> Cale: what did you notice was different and better about the old one
16:31:38 <glguy> I tried to replicate the old one as best I could remember
16:31:43 <Botje> chessguy: 'darcs push' alters the server repository
16:31:46 <sorear> email
16:32:10 <sorear> there are no servers
16:32:23 <chessguy> oh ok
16:32:23 <sorear> darcs send is used to give patches to someone else
16:32:39 <SamB> darcs push alters shell server's repositories!
16:32:41 <chessguy> and darcs push just applies it, whether they want it or not
16:32:42 <sorear> if you are the sole developer, it's better to only have one repo and record
16:33:11 <sorear> e.g. for vty I have one repo, which I upload to ftp-hosting after every few changes
16:33:41 <sorear> for lambdabot I (simplification) have one repo, which I modify and darcs send to dons@www.cse.unsw.edu.au
16:33:45 <chessguy> it seems weird that i could, say, push a change that just totally screws up LB, and dons couldn't control it
16:34:24 <sorear> you can push changes ?!
16:34:27 <glguy> well... he could... not apply the patch
16:34:37 * allbery_b suspects permissions are doable, to prohibit such
16:34:38 <chessguy> ...
16:34:42 <chessguy> i don't get it
16:34:56 <sorear> if you push, dons can only unrecord.
16:34:57 <chessguy> if i 'darcs push' a change, it changes the code automatically on the other end
16:35:02 <sorear> correct.
16:35:09 <sorear> but only dons can push
16:35:10 <chessguy> so it's already applied
16:35:18 <sorear> everyone else must stay with send
16:35:29 <chessguy> what stops me from pushing?
16:35:33 <sorear> send sends a patch via email, and dons can just ignore it
16:35:39 <sorear> chessguy: what's dons' ssh password?
16:35:48 <sorear> you'll need that to push.
16:35:51 <glguy> chessguy: file permissions stop you from pushing
16:36:11 <chessguy> but i don't need his password to get
16:36:12 <glguy> chessguy: the same thing that stops me from deleting your home directory
16:36:13 <sorear> www-data can't write to /home/dons/...
16:36:19 <sorear> chessguy: http is read only
16:36:32 <sorear> chessguy: darcs get just uses the web
16:36:34 <chessguy> ah, i see
16:37:04 <br1> @paste
16:37:04 <lambdabot> http://fserv.pikapphi.umr.edu:8000/
16:37:08 <sorear> bzzt.
16:37:09 <sorear> !paste
16:37:10 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
16:37:20 <sorear>  @paste is a broken link ATM
16:38:07 <chessguy> ok, now say i make a change, to my local repository, and it's showing on 'darcs whatsnew', but i haven't recorded it yet
16:38:21 <chessguy> how do i change my mind and get rid of that change
16:38:29 <glguy> revert
16:39:06 <chessguy> aha
16:39:14 <sorear> if you HAVE recorded it, unrecord
16:39:26 <xic> anyone use hslogger? is it thread safe?
16:39:52 <chessguy> is there a way i can see what's different on my local repository from, say, his?
16:40:09 <sorear> darcs send, then say 'no' to everything.
16:40:19 <sorear> conversely darcs pull ...
16:41:39 <br1> |paste
16:41:41 <br1> !paste
16:41:42 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
16:42:14 <glguy> hpaste, url or bust!
16:42:15 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
16:42:21 <hpaste>  br1 pasted: $ do at http://kakapo.scannedinavian.com:8000/3
16:42:23 <chessguy> hmm, it says there are no changes to pull
16:42:54 <hpaste>  glguy pasted: runST doesn't like $ at http://kakapo.scannedinavian.com/3#1
16:43:47 <glguy> ($) doesn't work on higher ranked types
16:43:57 <br1> ok
16:43:58 <br1> thx
16:44:44 <twanvl> glguy: That url misses the :8000 (and maybe it should say 'annotated')
16:44:46 <br1> the last url lacked :8000
16:44:50 <br1> ha
16:44:59 <glguy> I wonder why that was...
16:45:02 <mikojiba> bye
16:45:05 <chessguy> so, i recorded changes on my 'patcher' repository, pushed the changes to my 'server' repository. on the server side, i then 'unrecord'ed it, and 'reverted'. my 'patcher' repository still shows the change. if i'm on the patcher repository, why can't i pull?
16:45:07 <glguy> worked before
16:45:09 <glguy> I'll look
16:45:11 <br1> also, I had to refresh manually to see the changes (opera browser)
16:45:40 <chessguy> or should i just 'darcs get' again
16:46:13 <sorear> chessguy: you can't pull!?
16:46:41 <sorear> chessguy:~/mainrepo $ darcs pull ../patcher
16:46:46 <sorear> what happens?
16:46:52 <sorear> (and why do you have 2 repos?)
16:46:54 <SamB> chessguy: you can't pull unpulls
16:47:05 <chessguy> sorear, for experimentation
16:47:06 <SamB> you maybe wanted "darcs rollback"
16:47:56 <ndm> @tell dmhouse still not had a chance to go through it, have printed of the stuff on Groups from wikipedia to get some background first
16:47:56 <lambdabot> Consider it noted.
16:48:30 <chessguy> hm, that works
16:49:24 <dons> ?users
16:49:24 <lambdabot> Maximum users seen in #haskell: 311, currently: 293 (94.2%), active: 50 (17.1%)
16:49:37 <glguy> twanvl: when there is an annotation
16:49:48 <twanvl> of course
16:49:58 <glguy>  soandso annotated: annotation paste title at URL
16:50:12 <glguy> but that suggested they annotated something called "annotation"
16:50:14 <dons> so how's the lisp paste replacement going?
16:50:21 <dons> can we kick lisppaste yet ;)
16:50:32 <glguy> hpaste, url for dons, please
16:50:33 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
16:50:38 <glguy> back in business
16:51:04 <glguy> I'm making the in channel messages smarter now
16:51:23 <chessguy> is darcs send tied to sendmail?
16:51:29 <sorear> no
16:51:36 <chessguy> what's it tied to?
16:51:41 <sorear>              --sendmail-command=COMMAND  specify sendmail command
16:51:47 <SamB> so, yes, it is
16:51:51 <sorear> also you can use darcs send -o file
16:52:14 <glguy> how should I say that someone's annotations is available at URL
16:52:22 <sorear> lisppaste2: url
16:52:22 <lisppaste2> To use the lisppaste bot, visit http://paste.lisp.org/new/haskell and enter your paste.
16:52:25 <chessguy> if i record a change, is there a way i can just find the file that's going to be sent when i do the darcs send?
16:52:33 <glguy>  glguy "made an annotation called" "title" at "url" ?
16:52:35 <dons> hang on...
16:52:39 <sorear> chessguy: no
16:52:55 <sorear> chessguy: because the output of darcs send isn't stored anywhere before you send it
16:52:58 <SamB> glguy annotated blah with blah at URL
16:53:19 <chessguy> yuck. that's going to make it hard to submit patches, unless i configure sendmail to work with my email account
16:53:23 <sorear> chessguy: darcs send combines context information with the raw patch to produce a context-independant patch
16:53:26 <SamB> chessguy: -o
16:53:27 <dons> hmm, so is http://kakapo.scannedinavian.com:8000/new correct?
16:53:28 <lambdabot> Title: New Paste
16:53:29 <SamB> -o makes that file
16:53:37 <dons> glguy: ?
16:53:39 <chessguy> oh
16:53:47 <bd_> chessguy: there's also an option to use a custom mailer
16:53:50 * dons trie this..
16:53:52 <sorear> in the long run, fixing sendmail will make your life MUCH easier
16:53:54 <dons> yeah, trie!
16:54:01 * sorear speaks from experience
16:54:08 * bd_ had to use msmtp, as his ISP blocks outgoing port 25
16:54:09 <chessguy> -o would be fine
16:54:19 <dons> sorear: not for me, i never send patches to anyone else
16:54:20 <chessguy> if i'm understanding correctly what it does
16:54:21 <dons> :}
16:54:23 <sorear> @paste
16:54:30 * dons waits on freenode
16:54:35 <sorear> oh duh.
16:54:37 <lambdabot> Haskell pastebin: http://kakapo.scannedinavian.com:8000/new
16:55:04 <sorear> of course, there is no chance I could have typoed that address.
16:55:06 <sorear> gpm++
16:55:51 <chessguy> ok, so who's got a project i can work on submitting a patch for?
16:56:19 <allbery_b> hs-plugins? }:>
16:56:24 <dons> heh
16:56:24 <sorear> how good are you with Haskell?
16:56:35 <chessguy> something simple, please :)
16:56:38 <emu> hs-plugins!
16:56:42 <sorear> dons has a darcs project written in English
16:56:45 <dons> hmm. we need more libraries. but umm. lamdabot maybe?
16:56:50 <dons> sorear: i do?
16:56:55 <sorear> dons: hwn?
16:56:57 <chessguy> i can't get lambdabot to build
16:56:59 <dons> ah yes
16:57:12 <dons> you could try getting lambdabot to build
16:57:29 <dons> or use happs for seomethign
16:57:32 <sorear> and then make it work the first time by your method!
16:57:47 <chessguy> i guess i can try again
16:57:48 <dons> grr. ok. so beer and pool for 5 hours isn't conducive to spelling
16:57:56 <sorear> really, for x in configure build ; do runhaskell Setup.hs $x; done ought to work
16:57:56 <chessguy> ?where lambdabot
16:57:57 <lambdabot> Right here! Seriously, though: http://www.cse.unsw.edu.au/~dons/lambdabot.html
16:58:03 <chessguy> oops.
16:58:05 <chessguy> ?version
16:58:06 <lambdabot> lambdabot 4p476, GHC 6.5 (OpenBSD i386)
16:58:06 <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot
16:58:19 <dons> sorear: heh!
16:58:25 <dons> did you sneak that in ? ;)
16:58:33 <sorear> nope
16:58:38 <chessguy> i think that was glguy
16:58:39 <sorear> check the logs
16:58:39 <dons> well, i like it!
16:58:45 <chessguy> iirc
16:59:06 <sorear> btw, dons, have you noticed @karma glguy?
16:59:09 <dons> 07.01.18:16:44:16 <nmessenger> @where+ lambdabot Right here!  Seriously, though: http://www.cse.unsw.edu.au/~dons/lambdabot.htm
16:59:21 <sorear> he got 13 for hpaste, and that's just the ones I saw.
16:59:21 <dons> ?karma glguy
16:59:21 <lambdabot> glguy has a karma of 39
16:59:24 <chessguy> oh, my mistake
16:59:24 <dons> hehe
16:59:29 <dons> glguy++
16:59:33 <glguy> lol
16:59:36 <dons> ong live happs!
16:59:41 <dons> agile up yourselves!
16:59:59 <dons> ?karma-al
16:59:59 <lambdabot>  "dons"                112
16:59:59 <lambdabot>  "audreyt"              70
16:59:59 <lambdabot>  "fglock"               42
16:59:59 <lambdabot>  "lambdabot"            42
16:59:59 <lambdabot>  "glguy"                40
17:00:01 <lambdabot> [624 @more lines]
17:00:14 <chessguy> lambdabot++
17:00:15 <dons> looks like audreyt is chasing fast
17:00:19 <chessguy> @more
17:00:20 <lambdabot>  "Cale"                 38
17:00:20 <lambdabot>  "dcoutts"              38
17:00:20 <lambdabot>  "sjanssen"             35
17:00:20 <lambdabot>  "Lemmih"               34
17:00:20 <lambdabot>  "shapr"                34
17:00:22 <lambdabot> [619 @more lines]
17:00:34 <dcoutts__> heh
17:00:54 <sorear> methinks audreyt would fall if we raised karma awareness in #haskell
17:01:16 <sorear> ++ should be at least the third item
17:01:33 <chessguy> third item?
17:01:48 <sorear> I'm the #2 speaker in #haskell and almost none of the newbies use ++ (for anyone, for that matter)
17:02:01 <sorear> in the @topic list
17:02:19 <bd_> lambdabot++
17:02:25 <dons> heh
17:02:34 <dons> yeah, pugs commits generate ++ iirc
17:02:40 <dons> unlike say the 200 binary commits this week
17:02:41 <bd_> @karma++
17:02:41 <lambdabot> You have a karma of 1
17:02:45 <bd_> tsk
17:02:54 <sorear> @karma+ @karma
17:02:55 <lambdabot>  @karma's karma raised to 1.
17:02:57 <dons> btw, anyone using binary/
17:03:01 <sorear> yes
17:03:04 <sorear> you!
17:03:05 <sorear> :)
17:03:05 <dons> what for?
17:03:09 <sorear> lambdabot
17:03:09 <dons> oh, yeah
17:03:15 * dons points at the bot
17:03:21 <dons> binary gzip getting freaky!
17:03:43 <sorear> @vixen Help, my brain is corrupted!
17:03:45 <lambdabot> <undefined>
17:03:52 <dons> ?paste
17:03:53 <lambdabot> Haskell pastebin: http://kakapo.scannedinavian.com:8000/new
17:03:56 <dons> is this right now?
17:04:01 <dons> sorear: yeah, i know
17:04:04 <glguy> hpaste, url
17:04:05 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:04:17 <dons> got to write a little ghci script to move things
17:04:24 <dons> so not new?
17:04:27 <chessguy> ?where fps
17:04:28 <lambdabot> http://www.cse.unsw.edu.au/~dons/fps.html
17:04:29 <dons> need to fix the bot again?
17:04:34 <sorear> again!?
17:04:47 <dons> s/\/new//
17:04:48 <sorear> it still works for me
17:05:02 <dons> glguy: final word please?
17:05:11 <glguy> ?
17:05:17 <dons> what's the url?
17:05:19 <dons> ?paste or
17:05:20 <lambdabot> Haskell pastebin: http://kakapo.scannedinavian.com:8000/new
17:05:23 <dons> hpaste url
17:05:29 <dons> hpaste :url
17:05:34 <glguy> hpaste: url
17:05:35 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:05:36 <dons> i've had too much beer
17:05:37 <glguy> !paste
17:05:38 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:05:53 <allbery_b> maybe @paste should map to @where paste so you can @where+ to change it
17:05:58 <chessguy> you aussies are good at that
17:06:04 <sorear> I had the same idea...
17:06:06 <sorear>    New paste formNick: _____________________ Title: _____________________ Silent: [ ]
17:06:11 <sorear> glguy: ^^^ soo close
17:06:36 <sorear> hpaste is virtually perfect in elinks
17:08:07 <xic> is there a global thread lock for IO actions?
17:08:23 <glguy> in what
17:08:44 <dons> xic, no
17:08:47 <dons> handles are locked though
17:09:00 <dons> but yeah, threads can do IO independent of each toehr..
17:09:04 <SamB> like stdout and stderr
17:09:26 <sorear> !whatsnew
17:09:28 <hpaste>  glguy annotated announce test with i'm annotating this paste at http://kakapo.scannedinavian.com:8000/4#4
17:09:33 <xic> i mean, is there an optional way to globally lock specific IO actions? like withGlobalIOLock?
17:09:44 <sorear> no
17:09:46 <hpaste>  glguy pasted !a new paste! at http://kakapo.scannedinavian.com:8000/5
17:09:55 <sorear> lambdabot has no good global state
17:09:56 <chessguy> hey dons?
17:10:10 <sorear> I can paste the INCREDIBLY EVIL workaround however
17:10:33 <glguy> twanvl: better?
17:10:41 <twanvl> yes
17:11:00 <glguy> data PasteAnnounce = NewPaste String String String
17:11:01 <glguy>                    | Annotation String String String String
17:11:05 <xic> sorear: does iit involves unsafePerformIO and an MVar?
17:11:09 <glguy> instance Show PasteAnnounce where
17:11:09 <glguy>   show (NewPaste n t u) = printf " %s pasted %s at %s" n t u
17:11:09 <glguy>   show (Annotation n t t' u) = printf " %s annotated %s with %s at %s" n t t' u
17:11:37 <chessguy> the instructions for building lambdabot say:Build with cabal (simple)
17:11:37 <chessguy>     $ vi Config.hs
17:11:37 <chessguy>     $ ./build
17:11:37 <chessguy>     $ ./lambdabot { -e command }
17:11:49 <chessguy> what's the point of doing 'vi Config.hs'
17:11:52 <twanvl> Although it might look even nicer with quotes, I'm not sure (glguy annotated "announce test" with "i'm annotating this paste" at $url)
17:12:05 <glguy> if you can get two people to agree
17:12:06 <glguy> I'll change it
17:12:14 <sorear> xic: yes
17:12:18 <dons> hey chessguy
17:12:23 <wolverian> chessguy, change the bot's nick and such? :)
17:12:34 <allbery_b> I agree, the quotes are preferable
17:12:39 <chessguy> ohhh, ok
17:12:45 <glguy> that's one
17:13:14 <nmessenger> twanvl, glguy: /agree
17:13:26 <chessguy> ok, here's where i'm stuck. when i try to execute ./build, i get this:
17:13:40 <sorear> chessguy: I think ./build is broken
17:13:46 <chessguy> Setup.hs: cannot satisfy dependency regex-compat-any
17:13:56 <chessguy> oh, heh. no wonder i can't build it
17:13:58 <sorear> whad'ya think?
17:14:04 <sorear> install regex-compat
17:14:08 <glguy> message updated
17:14:21 <sorear> debian, etc should have a package
17:14:30 <chessguy> where can i get that?
17:14:36 <sorear> for windows haskell.org/ghc, downloads, extralibs bundle
17:14:53 <chessguy> not on windows
17:14:56 <sorear> for debian, check your local package manager
17:15:16 <chessguy> fedora core 64 here
17:15:21 <sorear> oooh
17:15:24 <glguy> separate files for each page (CSS FILES) were nice, i could tell what people were doing from the debug output
17:15:28 <glguy> oh well :)
17:15:38 <chessguy> ?where zlib
17:15:38 <sorear> no extralibs or regex-compat package?
17:15:38 <lambdabot> darcs get http://haskell.org/~duncan/zlib
17:15:44 <dcoutts__> @arr
17:15:45 <lambdabot> I want me grog!
17:15:46 <sorear> chessguy: did you install ghc from source?
17:16:05 <chessguy> no, i used the package manager
17:16:24 <glguy> dons: my next step is to compress pastes with zlib
17:16:32 <sorear> MUAHAHAHA!
17:17:04 <ihope> Hmm, Z notation.
17:17:11 <chessguy> ?where extralibs
17:17:11 <lambdabot> I know nothing about extralibs.
17:17:18 <chessguy> ?where regex-compat
17:17:19 <lambdabot> I know nothing about regex-compat.
17:17:30 <ihope> The big question is whether ZFC can be translated into Z notation.
17:17:36 --- mode: ChanServ set +o Cale
17:17:50 --- mode: Cale set -b *!*n=palomer@*.dsl.bell.ca
17:18:02 <glguy> here we go
17:18:02 --- mode: Cale set -o Cale
17:18:50 <sorear> chessguy: don't install extralibs from darcs unless you got ghc from darcs!
17:19:03 <chessguy> oh
17:19:04 <chessguy> ok
17:19:13 <sorear> chessguy: get extralibs (incl. regex-compat) from the same place you got ghc
17:19:28 <chessguy> i don't think it's available on my package manager
17:19:37 <sorear> (except for base, it shouldn't hurt too much, but still they are developed together...)
17:19:55 <sorear> fedora-haskell-ppl: ping?
17:20:19 <chessguy> i don't think that's likely to trigger :)
17:20:39 <sorear> ^AVERSION^A
17:21:13 <chessguy> oh, look
17:21:15 <chessguy> http://www.haskell.org/fedora/
17:21:16 <lambdabot> Title: Fedora Haskell
17:21:18 <chessguy> sweet
17:23:18 <hpaste>  glguy annotated "!a new paste!" with "quoted announce test" at http://kakapo.scannedinavian.com:8000/5#1
17:23:28 <chessguy> hmm, i'm not seeing extralibs or regex-compat though
17:23:37 <ihope> sorear: did you... mean to send ^AVERSION^A?
17:24:13 <sorear> ihope: yes
17:24:33 <ihope> And was it supposed to be a CTCP VERSION?
17:24:47 <sorear> ihope: I'd've used real ^As, but I didn't expect most clients to reveal OS
17:25:03 <sorear> (and .*fedora.* was the whole point)
17:25:17 <ihope> I... see.
17:25:26 <glguy> read ^A?
17:25:27 * sorear tries to be too clever
17:25:34 <sorear> > read "\001"
17:25:36 <chessguy> ihope, do you use fedora?
17:25:36 <lambdabot>  Add a type signature
17:25:39 <glguy> what does ^A do in IRC
17:25:47 <sorear> @read "\001TIME 23483429\001"
17:25:47 <lambdabot>  TIME 23483429
17:25:55 <sorear> @read "\001PING\001"
17:25:55 <lambdabot>  PING
17:26:10 <sorear> glguy: CTCP escape
17:26:17 <sorear> @read "\001VERSION\001"
17:26:18 <lambdabot>  VERSION
17:26:19 <ihope> chessguy: no.
17:26:33 <ihope> @help read
17:26:33 <lambdabot> read "<foo>". Print <foo>
17:26:42 <ihope> @read blah
17:26:43 <lambdabot> Plugin `dummy' failed with: IRCRaised Prelude.read: no parse
17:26:48 <chessguy> bah
17:26:48 <ihope> @read "blah"
17:26:49 <lambdabot>  blah
17:26:58 <kilimanjaro> Sorry if this is a silly question, but is there a way to define a type constructor w.r.t. typeclasses rather than concrete instances?
17:27:04 <sorear> of course, removing the space requires admin privileges, and a different command
17:27:10 <sorear> huh?
17:27:14 <kilimanjaro> Err
17:27:16 <sorear> data Foo a b = Bar
17:27:25 <glguy> kilimanjaro: data Foo a = Bar a a
17:27:27 <sorear> instance Baz (Foo a) where -- ?
17:27:28 <chessguy> so nobody knows where i can get regex-compat or extralibs for fedora?
17:27:31 <ihope> @read "\001BLAH\001"
17:27:31 <lambdabot>  BLAH
17:27:43 <chessguy> i guess that means i still can't build lambdabot
17:29:30 <SamB> chessguy: build from sources?
17:29:32 <sorear> @msg #haskell Unfortunately I can't *type* a ^A in irssi, but if they had half a brain and allowed escapes I could version the channel this way.
17:29:32 <lambdabot> Unfortunately I can't *type* a ^A in irssi, but if they had half a brain and allowed escapes I could version the channel this way.
17:30:09 <sorear> chessguy: you have 6.6? and no extralibs?
17:30:16 <sorear> who dropped the ball?
17:30:18 <chessguy> SamB, i'm willing to try. how do i go about it?
17:30:22 <chessguy> no, 6.41
17:30:40 <sorear> chessguy: ghci ; :m + Text.Regex
17:30:44 <sorear> does that work?
17:31:19 <sorear> (you DO mean 6.4.1? they haven't gotten to .8 yet, nevermind .41 :) )
17:31:39 <chessguy> no, it just says Interrupted.
17:31:44 <SamB> besides, .41 wouldn't be a release line ;-)
17:31:53 <sorear> REALLY?
17:31:54 <chessguy> GHC Interactive, version 6.4.2, for Haskell 98.
17:31:55 <chessguy> sorry
17:32:07 <SamB> .41 would be a devolopment line
17:32:10 <sorear> :m + Text.Regex ---> Interrupted !?
17:32:13 <SamB> like 6.5 or 6.7
17:32:16 <chessguy> right
17:32:23 <sorear> ok, iff you didn't ^C...
17:32:27 <sorear> that's a *problem*
17:32:36 <chessguy> oh wait
17:32:43 <sorear> can you !paste the complete session?
17:32:44 <chessguy> i muffed something up, because it works now
17:32:54 <sorear> how did you muff it up?
17:33:04 <chessguy> i don't know
17:33:04 <sorear> it shouldn't've been possible
17:33:24 <chessguy> anyway, that works
17:33:27 <sorear> ok
17:33:51 <glguy> sorear: I'm updating hpaste to allow me to test this ^A thingy ;)
17:34:05 <glguy> !ctcp VERSION
17:34:20 <glguy> !id test
17:34:21 <sorear> chessguy: did you remember to mv lambdabot.cabal.ghc-6.4 lambdabot.cabal
17:34:32 <chessguy> umm, no
17:34:37 <glguy> that's odd
17:34:38 <chessguy> didn't know i needed to
17:34:54 <glguy> !paste
17:34:55 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:34:56 <sorear> chessguy: ok.  "Everyone uses 6.6 now."  flw.
17:35:21 <sorear> @users
17:35:21 <lambdabot> Maximum users seen in #haskell: 311, currently: 284 (91.3%), active: 20 (7.0%)
17:35:42 <chessguy> well, it's no longer complaining about regex
17:35:45 <chessguy> Setup.hs: cannot satisfy dependency plugins>=1.0
17:36:07 <sorear> erm, just delete that dep
17:36:14 <chessguy> ...
17:36:26 <sorear> (you COULD install hs-plugins, but all you'd get is @run - not really worth it)
17:36:26 <chessguy> how?
17:36:37 <sorear> edit lambdabot.cabal
17:36:40 <chessguy> oh
17:36:46 <sorear> there should be a Build-Depends: line
17:37:12 <glguy> !paste
17:37:12 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:37:17 <sorear> on second thought
17:37:24 <sorear> @where hs-plugins
17:37:25 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
17:37:26 <SamB> hmm, Happy's default %name conflicts with its grammar templates...
17:37:41 <sorear> ^ probably easier than fixing the cabal, esp. for a cabal newbie\
17:37:57 <SamB> any ideas what the resolution should be?
17:37:58 <sorear> !whatsnew
17:38:00 <glguy> i guess it doesn't recognize me anymore
17:38:16 <sorear> !quit
17:38:17 <glguy> !quit
17:38:22 <sorear> yow
17:38:24 <sorear> !paste
17:38:25 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:38:28 <chessguy> well, i just took the plugins thing out of the list of build-dependencies
17:38:33 <glguy> I don't know what changed :)
17:38:53 <glguy> OH
17:39:02 <chessguy> Linking ...
17:39:02 <chessguy> Chasing modules from: Main.hs
17:39:02 <chessguy> Could not find module `Codec.Compression.GZip':
17:39:10 <sorear> you need to install zlb
17:39:11 <sorear> you need to install zlib
17:39:23 <glguy> !id test
17:39:23 <sorear> (and edit the apparently outdated cabal)
17:39:23 <hpaste> test
17:39:29 <glguy> !ctcp VERSION
17:39:29 <hpaste>  VERSION
17:39:33 <chessguy> oh, i got zlib, but couldn't find the instructions to build it
17:39:44 <sorear> what, did it fail to notice the cloak
17:39:58 <glguy> my "username" was set t oglguy and not eric
17:40:03 <glguy>   | isAdmin && "!ctcp " `isPrefixOf` s'
17:40:04 <glguy>       = privmsg (drop 6 ("\001" ++ s' ++ "\001"))
17:40:13 <glguy> that didn't seem to cause any ctcp stuff
17:40:16 <sorear> chessguy: you don't need instructions.  all reasonable cabal programs are build the same way.
17:40:30 <sorear> glguy: does privmsg prefix a space?
17:40:35 <sorear> that will break ctcp
17:40:46 <glguy> nope
17:40:54 <glguy> i thought not
17:40:55 <glguy> let me check
17:40:56 <chessguy> enlighten me
17:41:22 <br1> what was the syntax for ifs in do blocks?
17:41:26 <sorear> runhaskell Setup.(l)hs configure
17:41:30 <sorear> br1: there is none
17:41:36 <sorear> br1: if is just an expression
17:41:45 <sorear> br1: hence it needs to be a single command
17:41:57 <glguy> !ctcp VERSION
17:41:57 <hpaste>  VERSION
17:42:02 <sorear> br1: hence you must indent then and else, or else it will be treated as 2/3 commands
17:42:08 <sorear> runhaskell Setup.(l)hs configure
17:42:10 <sorear> runhaskell Setup.(l)hs build
17:42:16 <glguy> maybe I'm not dropping enough chars
17:42:16 <sorear> runhaskell Setup.(l)hs register --user --inplace
17:42:18 <br1> ok
17:42:52 <glguy> lol, found it
17:42:57 <glguy> I'm not telling what I did wrong
17:42:59 <chessguy> the build failed. Could not find module `Data.ByteString.Lazy':
17:43:00 <glguy> embarrassing
17:43:17 <glguy> !ctcp VERSION
17:43:21 <glguy> that worked
17:43:31 <glguy> I got a LOT of activity
17:43:38 <glguy> !paste -- still up?
17:43:38 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
17:43:57 * sorear has set overly wide exception handlers, causing lambdabot to panic and exit on the first timeout - and dons applied it.  Killed the bot for several minutes.
17:43:58 <glguy> ^A escaping confirmed to work
17:44:21 <Philippa> glguy: I'd suggest not using VERSION for such a test again
17:44:27 <sorear> why not?
17:44:30 <Philippa> it's liable to be taken as preparation for assorted crackery
17:44:39 <glguy> by whom?
17:44:56 <Philippa> anyone who's seen it as a prelude to assorted exploits being systematically used
17:45:03 <wolverian> the all-seeing eye..
17:45:08 <sorear> Big Brother
17:45:08 <chessguy> so i guess i need to find Data.ByteString.Lazy now
17:45:13 <sorear> chessguy: fps.
17:45:21 <chessguy> hm, i installed that already
17:45:23 <glguy> lol, if anyone is scared now, they can /msg a complaint to hpaste
17:45:42 <Philippa> glguy: we know it's benign in this case
17:45:47 <Philippa> but really, don't mass-VERSION a chan
17:45:55 <sorear> chessguy: did ghc say anything about 'hidden'
17:45:59 <Philippa> if you need a test like that, use PING instead
17:46:05 <chessguy> when?
17:46:25 <sorear> ATTENTION EVERYONE: HIDDEN DOES NOT MEAN NOT FOUND.  why does nobody know this?  so frustrating
17:46:46 <sorear> and it is very important, or cabal will tear your hair out.
17:46:59 <chessguy> are you talking about when i installed fps?
17:47:07 <sorear> no when you compiled lb
17:47:22 <sorear> "it is a member of package fps-0.8, which is hidden"
17:47:33 <sorear> GHC said something like that.
17:47:58 <chessguy> no, i don't see anything like that
17:47:59 <sorear> you did remember to 'runhaskell Setup.hs register --user --inplace' after compiling fps?
17:48:10 <sorear> (in the fps dir)
17:48:32 <sorear> (install will work as well, but is less desirable because nobody will write uninstall)
17:48:37 <chessguy> nope, didn't know i needed too
17:48:44 <chessguy> i did do install
17:48:56 <sorear> did install succeed
17:49:11 * lucca hisses at hpaste
17:49:33 <chessguy> yes, but i just did the register thing, without --inplace because it didn't like it
17:49:52 <sorear> "didn't like it?"
17:50:04 <chessguy> Setup.lhs: Unrecognised flags: --inplace
17:50:14 <sorear> !?
17:50:19 <glguy> lucca: complaints can be piped to /dev/null, or /msg'd to hpaste directly, thanks -- the mgmt ;)
17:50:32 <lucca> heh, yeah
17:50:32 <sorear> runhaskell Setup.lhs register --inplace --user
17:50:50 <sorear> the register is important :)
17:51:08 <sorear> (that error is typical of forgetting register - /me speaks from experience)
17:51:08 <chessguy> Setup.lhs: Unrecognised flags: --inplace
17:51:49 <sorear> runhaskell Setup.lhs register --help
17:52:09 * sorear is very confused
17:52:29 <glguy> lol, i just not got the version reply from bos31337
17:52:33 <chessguy> the flags it lists are --help, --verbose, --user, --global, and --gen-script
17:52:45 <sorear> Is anyone here familiar with ancient versions of cabal?
17:52:45 <glguy> now*
17:53:17 <sorear> ok, then... /me sets mode -knows_what_he_is_doing
17:53:48 <chessguy> what's the --inplace supposed to do
17:54:01 <sorear> in place setup.
17:54:10 <glguy> doesn't copy files out
17:54:10 <sorear> so you can delete the files later.
17:54:39 <sorear> just use runhaskell Setup.hs install --user, and start saving for a new hd.
17:54:52 <chessguy> lol, ok
17:55:21 <chessguy> now i can go back to zlib/runhaskell Setup.hs build   ?
17:55:38 <sorear> yes
17:55:58 <chessguy> still can't find Data.ByteString.Lazy
17:56:04 <glguy> how does one send a DELETE (vs. GET or POST)
17:56:18 * sorear apologizes for giving chessguy so much grief about the impossible behaivor of his 6.6 install :)
17:56:36 <sorear> glguy: echo 'DELETE /2 HTTP/1.0'
17:56:47 <chessguy> 6.4.2 you mean
17:57:08 <sorear> glguy: echo -e 'DELETE /2 HTTP/1.0\n' | nc kakapo.scannedinavian.org 8000
17:57:14 <sorear> chessguy: 6.6 I mean.
17:57:38 <sorear> chessguy: It was behaving impossibly because it wasn't the version I was expecting it to be :)
17:57:58 <sorear> chessguy: It was behaving impossibly because it wasn't actually a 6.6 install.
17:57:59 <chessguy> should i try runhaskell Setup.hs install --global ?
17:58:07 <sorear> --global will need root
17:58:15 <chessguy> i can do that
17:58:20 <sorear> but it shouldn't help
17:58:24 <chessguy> in fact, i am root already
17:58:32 <chessguy> so why can't it find it?
17:58:37 <sorear> does the error from zlib build mention 'hidden' ?
17:58:39 <glguy> is it a bad idea to let the paste bin respond to deletes?
17:58:44 <sorear> glguy: no.
17:59:04 <glguy> can a form have a method="DELETE"?
17:59:08 <chessguy> Preprocessing library zlib-0.3...
17:59:08 <chessguy> Building zlib-0.3...
17:59:08 <chessguy> Chasing modules from: Codec.Compression.GZip,Codec.Compression.Zlib,Codec.Compression.Zlib.Raw,Codec.Compression.Zlib.Internal,Codec.Compression.Zlib.Stream
17:59:08 <chessguy> Could not find module `Data.ByteString.Lazy':
17:59:08 <chessguy>   use -v to see a list of the files searched for
17:59:09 <sorear> chessguy: you also need to reconfigure after installing a dependency...
17:59:10 <chessguy>   (imported from ./Codec/Compression/GZip.hs)
17:59:18 <chessguy> did that
17:59:22 <chessguy> in zlib
17:59:28 <sorear> and it found fps-any ?
17:59:30 <kpreid> glguy: no
18:00:08 <glguy> so DELETE just slipped through the cracks?
18:00:10 <chessguy> it doesn't mention fps
18:00:44 <sorear> ok ... try adding fps after base to the builddeps of zlib.cabal
18:00:56 <kpreid> glguy: yes
18:01:19 <sorear> cabal, wisely IMO, refuses to allow a package to use a module that it doesn't explicitly depend on.
18:01:38 <sorear> this wreaks havoc when fps is merged into base, like they did in 6.6
18:01:51 <chessguy> so it should just say 'build-depends: base, fps'
18:01:55 <sorear> chessguy: or is fps already listed in zlib.cabal?
18:01:57 <sorear> chessguy: yes
18:02:03 <chessguy> no, it's not there
18:02:28 <SamB> hmm, what email address should I use for SimonM
18:02:37 <SamB> rey_: happy
18:02:44 <SamB> er
18:02:48 <SamB> rey_:
18:02:49 <sorear> /msg nickserv info JaffaCake ?
18:02:50 <chessguy> ah, it found fps now
18:02:53 <SamB> ack ack ack
18:02:56 <SamB> horrible x-chat
18:02:57 <sorear> pheew.
18:03:00 <SamB> I said no tabs!
18:03:11 <chessguy> hmm
18:03:19 <chessguy> i got a buttload of warnings, but i think it build
18:03:23 <chessguy> *built
18:03:34 <chessguy> !paste
18:03:34 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
18:04:17 <sorear> chessguy: from configure?
18:04:29 <hpaste>  chessguy pasted "boat-load of warnings" at http://kakapo.scannedinavian.com:8000/6
18:04:34 <sorear> chessguy: the ... not found messages from configure are not warnings
18:05:02 <chessguy> it doesn't say 'not found'
18:05:11 <sorear> chessguy: ok.  all those warnings, iff they matter, will be fatal runtime errors.
18:05:15 <sorear> *iff*
18:05:31 <sorear> so no worrying about silent errors
18:05:42 <glguy> @bot
18:05:43 <lambdabot> :)
18:05:43 <chessguy> ok, trying lb
18:05:54 * sorear braces
18:06:00 <chessguy> oh, i forgot to register zlib
18:06:08 <chessguy> i'm learning :)
18:06:40 <chessguy> # runhaskell Setup.hs register --user
18:06:40 <chessguy> Registering zlib-0.3...
18:06:40 <chessguy> Reading package info from ".installed-pkg-config" ... done.
18:06:40 <chessguy> ghc-pkg: /usr/local/lib/zlib-0.3/ghc-6.4.2 doesn't exist or isn't a directory (use --force to override)
18:07:09 <sorear> chessguy: you need to copy before registering
18:07:22 <chessguy> copy what where?
18:07:24 <sorear> chessguy: or use install, which is a synonym for copy ; register
18:07:29 <chessguy> oh
18:07:31 <sorear> copy, the command
18:07:47 <sorear> also, using --user as root is not good
18:07:55 <hpaste> feed me more code  plz, kthnxby
18:07:56 <hyrax42_> where are the shootout efforts on the wiki?
18:07:56 <chessguy> oops
18:07:59 <hyrax42_> ?where shootout
18:08:00 <lambdabot> http://shootout.alioth.debian.org/
18:08:09 <sorear> if you use --user as root, only root will be able to use the software
18:08:10 <chessguy> ok, i installed it globally
18:08:10 <hyrax42_> ?wiki shootout
18:08:10 <lambdabot> http://www.haskell.org/haskellwiki/shootout
18:08:35 <chessguy> ok, here goes LB again
18:08:48 <glguy> @list
18:08:50 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot/COMMANDS
18:08:54 * sorear braces again
18:09:11 <JuanMarcus> hello
18:09:20 <JuanMarcus> another socket question
18:09:27 <glguy> > take 10 $ fix ( (1:) . scanl1 (+) . (1:) )
18:09:29 <lambdabot>  [1,1,2,3,5,8,13,21,34,55]
18:09:31 <sorear> go ahead we won't mind
18:09:46 <chessguy> (i'm going to configBuilding lambdabot-4.0...
18:09:46 <chessguy> Chasing modules from: scripts/BotPP.hs
18:09:46 <chessguy> Skipping  Main             ( scripts/BotPP.hs, dist/build/BotPP/BotPP-tmp/Main.o )
18:09:46 <chessguy> dist/build/BotPP/BotPP is up to date, linking not required.
18:09:46 <chessguy> Chasing modules from: Main.hs
18:09:47 <glguy> :t take
18:09:47 <chessguy> Could not find module `Codec.Compression.GZip':
18:09:49 <lambdabot> forall a. Int -> [a] -> [a]
18:09:49 <chessguy>   use -v to see a list of the files searched for
18:09:51 <chessguy>   (imported from ./Lib/Serial.hs)
18:09:55 <JuanMarcus> my haskell programs only send udp messagens to other haskell prograns
18:09:59 <sorear> yow!
18:10:01 <glguy> ?src take
18:10:02 <lambdabot> take n _      | n <= 0 =  []
18:10:02 <lambdabot> take _ []              =  []
18:10:02 <lambdabot> take n (x:xs)          =  x : take (n-1) xs
18:10:22 <chessguy> oops
18:10:22 <JuanMarcus> i sent from python to java, java to python, everything was fine
18:10:24 <sorear> chessguy: you probably need to add zlib as a dependency of lambdabot, same procedure as fps/zlib
18:10:30 <chessguy> oh ok
18:10:40 <JuanMarcus> but from haskell, it doesn't work
18:10:45 <sorear> it'd be nice if fedora shipped a non-obsolete ghc ...
18:11:23 <chessguy> and then runhaskell Setup.hs configure ?
18:11:39 <sorear> True
18:11:52 <JuanMarcus> should i use that Datagram socket type?
18:12:15 <chessguy> sorear, it'd be nice if i wasn't so clueless too
18:12:26 <JuanMarcus> i though that would be like SOCK_DGRAM
18:13:16 <chessguy> same error
18:13:21 <matt_r> what is this karma?
18:13:22 <chessguy> oh wait
18:13:23 <chessguy> hang on
18:13:55 <sorear> @karma
18:13:56 <lambdabot> You have a karma of 12
18:14:02 <sorear> @karma matt_r
18:14:02 <lambdabot> matt_r has a karma of 0
18:14:12 <sorear> matt_r++ helpful answer
18:14:12 <sorear> @karma matt_r
18:14:13 <lambdabot> matt_r has a karma of 1
18:14:19 <sorear> matt_r-- cleanup
18:14:23 <sorear> use it often!
18:14:25 <matt_r> aha! that's nice
18:14:29 <chessguy> sigh
18:14:33 <matt_r> aww, you took away my karma
18:14:41 <chessguy> Could not find module `Data.Binary.Get':
18:14:41 <chessguy>   use -v to see a list of the files searched for
18:14:41 <chessguy>   (imported from ./Plugin/Vixen.hs)
18:14:41 <matt_r> I assume I can't give it to myself
18:14:45 <matt_r> :)
18:14:51 <sorear> correct.
18:14:53 <tero-> ah, should I put some karma points for the answers I got today?
18:14:55 <beschmi> JuanMarcus: what are the arguments in your socket call?
18:14:59 <sorear> tero-: yes!!
18:15:16 <JuanMarcus> you mean this? sock <- socket AF_INET Datagram 0;
18:15:27 <chessguy> is that in fps too?
18:15:27 <sorear> tero-: If I got ops the first thing I'd do is mention ++ in the TOPIC.
18:15:29 <matt_r> beschmi++
18:15:29 <tero-> gotta read the log. it works like "nick++ helpful answer?"?
18:15:37 <sorear> chessguy: no, it's in binary.
18:15:42 <sorear> tero-: yes.
18:15:47 <matt_r> @karma beschmi
18:15:47 <lambdabot> beschmi has a karma of 2
18:15:50 <chessguy> oh, something else i need to get
18:15:57 <glguy> sorear++
18:16:03 <chessguy> ?where Binary
18:16:03 <sorear> actually it works like \bnick++\b, where \b is white space, bol, or eol
18:16:03 <lambdabot> http://darcs.haskell.org/binary
18:16:18 <beschmi> JuanMarcus: i use protocolNum <- getProtocolNumber "UDP"; NS.socket NS.AF_INET NS.Datagram protocolNum
18:16:41 <JuanMarcus> i'm a try thatm hang on
18:16:41 <sorear> chessguy: binary is in very active development. be prepared to unpull until you arrive at a version compatible with lambdabot.
18:16:46 <sjanssen> also, nick can not be C or c
18:17:00 <sorear> sjanssen wrote the currrent karma code
18:17:07 <sjanssen> and is not prefixed with $ @ or %
18:17:12 <sjanssen> if we want to be pedantic :)
18:17:16 <beschmi> JuanMarcus: getProtocolNumber "UDP" is 17 for me
18:17:16 <chessguy> oh, that's that thing dons has been working on
18:17:24 <sorear> chessguy: one of them.
18:17:41 <sorear> chessguy: it was a hackathon (smashathon?) victim
18:18:22 <chessguy> sigh, am i going to have to make fps a dependency of everything i try to install that needs it?
18:18:29 <JuanMarcus> beschmi: i don't have that function, but i did used that number and didn't work
18:18:41 <hyrax42_> ?index write_
18:18:42 <lambdabot> bzzt
18:18:46 <tero-> okay. so this'll do it? vegai++ Cale++ chessguy++ Philippa++ monochrom++
18:18:46 <sorear> chessguy: yes.  Or just upgrade ghc :)
18:18:51 <sorear> tero-: yes
18:18:53 <hyrax42_> oops
18:18:54 <beschmi> JuanMarcus: it is in Network.BSD, are you on windows>
18:19:16 <chessguy> how hard is that?
18:19:22 <sorear> not very
18:19:26 <tero-> good. that counts. sorear++ :)
18:19:26 <JuanMarcus> beschmi: it must be multi platform code
18:19:32 <sorear> get the source, configure, make, make install
18:19:36 <chessguy> well, let me start wit getting LB running
18:19:42 <sorear> takes an hour and a half though
18:19:57 <sorear> and it took my CPU to 2C shy of the alarm threshold
18:20:07 <sorear> 14C higher than it has been pre-GHC
18:20:10 <chessguy> hmmm
18:20:28 <chessguy> # runhaskell Setup.lhs install --global
18:20:28 <chessguy> Installing: /usr/local/lib/binary-0.2/ghc-6.4.2 & /usr/local/bin binary-0.2...
18:20:28 <chessguy> Setup.lhs: Error: Could not find module: Data.Binary with any suffix: ["hi"]
18:20:33 <JuanMarcus> beschmi: the haskell program receives messages from other haskell programs... it doesn't receive from other languagens...
18:20:47 <sjanssen> chessguy: it'll be less than 90 min. if you can find a machine with multiple processors/cores
18:20:51 <sorear> chessguy: I think you need to compile first :)
18:21:12 <sorear> chessguy: it'll be longer than 90 min if your machine is much slower than mine (2G p4)
18:21:18 <chessguy> oh, compiling barfed
18:21:26 <sjanssen> about an hour for my 1.83 GHz Core Duo for ghc and extralibs
18:21:32 <sorear> dons on his 8-cpu uberbox compiled ghc in 8minutes
18:21:50 <tero-> are there any guidelines on editing Haskell wiki?
18:21:51 <beschmi> JuanMarcus: hmm, seems like you have to use tcpdump/wireshark
18:22:05 <stepcut> takes hours to compile ghc on qemu-arm :p
18:22:06 <sorear> common sense? :p
18:22:07 <chessguy> how far back do you think i should unpull?
18:22:14 <sorear> until it works.
18:22:23 <sorear> how did compiling barf?
18:22:25 <JuanMarcus> beschmi: i was hoping not to get to that point
18:22:34 <sorear> it might not be hac07's fault...
18:22:44 <chessguy> src/Data/Binary.hs:608:0:
18:22:44 <chessguy>     Non-type variables, or repeated type variables,
18:22:44 <chessguy>       in the constraint: IArray UArray e
18:22:44 <chessguy>     (Use -fallow-undecidable-instances to permit this)
18:22:44 <chessguy>     In the context: (Binary i, Ix i, Binary e, IArray UArray e)
18:22:45 <chessguy>     While checking the context of an instance declaration
18:22:47 <chessguy>     In the instance declaration for `Binary (UArray i
18:22:53 <JuanMarcus> beschmi: thanks anyway
18:23:12 <sorear> if you are compiling binary it's definitely binary's fault :)
18:23:14 <sorear> unpull.
18:23:43 * sorear has forgotten the version of binary that lb compiles with
18:23:59 <chessguy> i don't suppose it's likely to be documented on lb
18:24:20 <sorear> someday, not now :(
18:24:36 <chessguy> should i only unpull one patch?
18:24:52 <sorear> at a time if you can wait that long :)
18:25:03 * sorear doesn't really know
18:25:17 <sorear> too bad all the hacers are asleep now
18:25:24 <chessguy> ugh, i'm going to have to say no to all the other 191 patches?
18:25:30 <sorear> d
18:25:34 <sorear> chessguy: d
18:25:38 <chessguy> ah
18:25:42 <sorear> also, ? helps
18:27:05 <chessguy> same barf
18:27:35 <sorear> it's probably incompatible with 6.4 :(
18:28:01 <tero-> or would the mailing list be a better place to get some comments on a network server module than the Haskell wiki?
18:28:09 <sorear> at this point I'd suspend activity until ~10am GMT
18:28:09 <chessguy> what, binary?
18:28:13 <sorear> y
18:28:20 <sorear> tero-: probably.
18:28:21 <chessguy> what happens at that time?
18:28:33 <sorear> the hacers wake up
18:28:34 <tero-> haskell-cafe perhaps?
18:28:55 <chessguy> maybe i'd be better off just (trying to) upgrade GHC now
18:29:04 <sorear> tero-: definitely -cafe.  #haskell is only for announcements and guru questions.
18:29:11 <sorear> oops
18:29:23 <sorear> tero-: definitely -cafe.  haskell@haskell.org is only for announcements and guru questions.
18:29:35 <sorear> #haskell is fine for newbie questions :)
18:30:02 <tero-> okay :)
18:30:34 * shapr tries newbie questions on #php
18:30:55 <chessguy> how would i go about upgrading GHC
18:31:13 <shapr> chessguy: I use apt-get -uf install ghc6
18:31:29 <chessguy> hmm, what's apt?
18:31:37 <shapr> It's the package manager for Debian
18:31:57 <chessguy> that won't help me much on fedora
18:32:06 <sorear> chessguy: go to haskell.org/ghc, download ghc-6.6, build, install.
18:32:23 <sorear> if you're feeling impatient you can get a binary bundle.
18:32:28 <shapr> actually, I think apt is available on fedora...
18:32:34 <chessguy> i assume i should uninstall the original one first
18:32:39 <sorear> chessguy: not at all!
18:32:56 <sorear> chessguy: ghc is quite intelligent about having multiple versions.
18:33:12 <sorear> chessguy: further a lot of programs (like hs-plugins) don't work on 6.6 yes
18:33:13 <sorear> chessguy: further a lot of programs (like hs-plugins) don't work on 6.6 yet
18:33:33 <sorear> chessguy: I have 6.4.2, 6.6, and HEAD all installed now, and I use all three regularly.
18:34:15 <chessguy> you're a madman
18:34:24 <sorear> thank you.
18:34:28 <tero-> do you happen to know any socket servers implemented in Haskell? there's one report on implementing a high speed socket server with Haskell but I'd like to process all the logic inside a single thread
18:34:51 <sorear> lambdabot uses sockets, HAppS
18:34:52 <tero-> if only to keep things simple
18:35:10 <sorear> nah, concurrency makes things easier
18:35:19 <sorear> (esp. with a concurrent environment)
18:35:19 <beschmi> tero-: one thread per connection should be much simpler (and threads are cheap in haskell)
18:35:38 <sorear> threads are cheap in programmer time too.
18:35:39 <tero-> beschmi: I was forced to go that way when hSelect disappeared
18:35:49 <tero-> beschmi: actually
18:36:04 <JuanMarcus> beschmi: i found the problem, its binding to a diferent port
18:36:07 <tero-> actually I used two threads for one connection. reader thread and writer thread
18:36:23 <sorear> I think hSelect was removed because threads are The Haskell Way.
18:36:32 <JuanMarcus> beschmi: i don't know why... can you show me the code you use to bind the socket to the port?
18:36:36 <sorear> sjanssen et al: care to comment?
18:37:05 <tero-> sorear: lambdabot's a client, right? does is support multiple connections?
18:37:43 <sorear> sure. it uses connect, but that doesn't make it a client any more than ftpd's use of connect does.
18:37:51 <sorear> and ftp-clients use accept
18:38:35 <sjanssen> sorear: what might I comment on?
18:38:46 <beschmi> JuanMarcus: bindSocket sock (SockAddrInet myport iNADDR_ANY)
18:38:59 <sorear> IIRC you are knowledgeable about select's disappearance
18:39:12 * chessguy crosses his finger as he types 'make'
18:39:18 <sjanssen> no, not really
18:39:22 <JuanMarcus> beschmi: what's that myport?
18:39:22 * sorear hides behind his bunker
18:39:38 <sjanssen> but I agree that threads are "The Haskell Way"
18:39:42 <JuanMarcus> beschmi: i use 7070 and it binds to a completely diferent port
18:40:20 <beschmi> JuanMarcus: i don't use a fixed port
18:40:21 <sjanssen> might as well be the responsibility of the RTS to figure out when input sources are ready
18:40:56 <JuanMarcus> beschmi: i see...
18:41:03 <beschmi> JuanMarcus: i can start the server and take a look
18:41:34 <JuanMarcus> beschmi: don't worry
18:41:43 <chessguy> well, regardless of how this goes, thanks for all your help sorear. i learned a lot tonight
18:41:46 <chessguy> sorear++
18:41:56 <sorear> yw.
18:42:02 <xic> you guys seem to know a lot about Network... i asked this a while ago, but it's worth another shot: how can i detect if a network Handle has been closed by the other computer? only way i can seem to do it is to try to write to the handle and check for an exception
18:42:33 <sorear> continuously read, and wait for an exception?
18:43:13 <xic> actually my program never reads, just writes, so a read would just cause a stall i think
18:43:28 <sorear> read in another thread?
18:43:32 <tero-> xic: does those functions like hIsOpen hIsEOF etc. work?
18:43:40 <sorear> they shouldn't
18:43:53 <sorear> in UNIX you detect eof by trying to read
18:44:01 <xic> tero-: i tried hIsOpen, hIsClosed, hIsReadable, and hIsWritable, none seem to work
18:44:02 <sorear> (even in the form of select)
18:44:08 <sjanssen> chessguy: which version of GHC are you using?
18:44:09 <beschmi> JuanMarcus: it's the same thing for me, never noticed because client and server use haskell here too
18:44:31 <chessguy> 6.4.2. currently attempting an upgrade to 6.6
18:44:31 <sorear> since haskell-way(select) == threads, I'd try that for detecting eof
18:44:32 <beschmi> JuanMarcus: 10275 instead of 9000
18:45:03 <sorear> try to read in a forkIO thread, when the read dies with an io error stop your long computation
18:45:51 <JuanMarcus> beschmi: there is this mkPortNumber function that makes a real port number, but i can't find it
18:46:01 <JuanMarcus> beschmi: its not in the network module
18:46:11 <SamB> fromIntegral
18:46:12 <SamB> try that
18:46:14 <sorear> IIRC PortNumber is an instance of Num
18:46:16 <sjanssen> chessguy: if you comment from the first line it complains (608) to the end of the file, it should compile
18:46:24 <sorear> so use fromInteger, like SamB said :)
18:46:26 <JuanMarcus> tried
18:46:37 <chessguy> sj...what, binary?
18:46:40 <xic> sorear: thanks, it's worth a shot
18:46:45 <sorear> chessguy: sjanssen is talking about binary
18:47:06 <sorear> chessguy: I poked #haskell.hac07 - thought someone might be insomniac
18:47:14 <sjanssen> sorear: nice catch :)
18:47:52 <chessguy> we're talking about Binary.hs, right?
18:48:04 <sjanssen> chessguy: correct
18:48:30 --- mode: ChanServ set +b palomer!*@*
18:48:36 <sjanssen> chessguy: apparently the "instance (Binary i, Ix i, Binary e, IArray UArray e) => Binary (UArray i e)" doesn't work on GHC 6.4, so you can just comment it out
18:48:46 <sorear> oops
18:48:48 <tero-> lambdabot seems to use two threads for one connection, read/write
18:48:49 <sjanssen> it isn't used by anything, as far as I know
18:48:57 <sorear> someone unbanned palomer earlier
18:49:01 <JuanMarcus> fromInteger gives the same result
18:49:06 <xic> what's a good way to make a list [0..n] that excludes the single value m?
18:49:10 <sorear> why'd chanserv reban him?
18:49:11 <JuanMarcus> 7074 turns into 41499
18:49:16 <xic> where 0 <= m <= n?
18:49:18 <sorear> > filter (/=23) [0..]
18:49:19 <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,2...
18:49:24 <sorear> > filter (/=23) [0..25]
18:49:26 <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25]
18:49:38 <xic> cool
18:50:37 <tero-> :q!
18:50:37 <sorear> Cale: what's the ddea with ChanServ banning palomer?
18:50:48 <sorear> nice try :)
18:50:56 <chessguy> ah, found it
18:50:56 <sorear> lambdabot isn't ghci, let alone vi
18:51:09 <chessguy> sorry, had to tell my fiancee i had better things to do than talk to her
18:51:15 <sorear> ouch
18:51:19 <tero-> dang that blackbox's focus. always in the wrong window
18:51:38 <sorear> tero-: be greatful it was irc
18:51:48 <sorear> tero-: i've rm -r ~ because of focus
18:52:17 <tero-> sorear: oh. hope you didn't lose anything crucial :/
18:53:37 <chessguy> sjanssen, ok, trying now
18:53:48 <JuanMarcus> PortNum is 16 bits
18:54:00 <JuanMarcus> hey maybe that's my problem
18:54:33 <chessguy> sjanssen, works great! thanks a lot!
18:54:37 <chessguy> sjanssen++
18:54:50 <sjanssen> chessguy: thanks for reporting the problem
18:54:54 <sjanssen> I'll make a TODO for it
18:55:40 <chessguy> thank fedora developers for shipping with 6.4
18:55:52 <araujo> hello!
18:56:16 <JuanMarcus> hi
18:56:20 <JuanMarcus> are you brazilian or what?
18:56:30 <chessguy> araujo, hola!
18:57:16 <araujo> hola chessguy !
18:57:21 <araujo> Coomo estas? :-)
18:57:29 <araujo> JuanMarcus, hi, me?
18:57:35 <JuanMarcus> yep
18:57:40 <chessguy> bastante bien, aprendiendo mucho esta noche
18:57:52 <JuanMarcus> that's a very common brazilian last name
18:58:26 <JuanMarcus> and a pizza place in my city
18:58:32 <JuanMarcus> araujo's
18:58:33 <araujo> JuanMarcus, really?! .. wow
18:58:42 * araujo likes pizza a lot
18:58:50 <araujo> JuanMarcus, i am from venezuela
18:58:51 <araujo> :-)
18:59:21 <JuanMarcus> dispite having this name, i'm brazilian
18:59:45 <araujo> isn't Juan a common .br name?
19:00:04 <JuanMarcus> not really
19:00:19 <araujo> i think i will have go down there someday, and check if it is really true there are many araujo's as everybody says
19:00:19 <chessguy> augh
19:00:28 <chessguy> lambdabot died on trying to compile vixen
19:07:50 <chessguy> it looks like the updated binary breaks vixen
19:07:59 <chessguy> sjanssen, are you still around?
19:08:22 <mbishop> @vixen
19:08:23 <lambdabot> <undefined>
19:08:27 <mbishop> ?vixen
19:08:27 <lambdabot> <undefined>
19:08:29 <mbishop> heh
19:09:12 <chessguy> yup
19:09:20 <chessguy> they broke it
19:10:31 <chessguy> dons probably just uninstalled the module. i'll have to try to figure out how to do that
19:12:27 * SamB notices he's confusing his datatypes with his productions...
19:14:10 <chessguy> ?where lambdabot
19:14:10 <lambdabot> Right here! Seriously, though: http://www.cse.unsw.edu.au/~dons/lambdabot.html
19:16:11 <chessguy> @fortune
19:16:11 <lambdabot> I'm young ... I'm HEALTHY ... I can HIKE THRU CAPT GROGAN'S LUMBAR
19:16:12 <lambdabot> REGIONS!
19:19:02 <Elifant> Hello all. I'm refactoring Text.PrettyPrint.HughesPJ module to be more generic. There is TextDetails type inside, which is 'Chr Char | Str String' (actually it also PStr String constructor, but it is obsoleted). The question is: is it really needed? Why don't just use plain String? Is it more effectively? I've read Hughes' paper and his implementation works with plain String.
19:20:17 <chessguy> aha!
19:20:23 * chessguy finds and eliminates the Vixen
19:21:28 <chessguy> hmm, that's not the only module they broke
19:27:40 <SamB> Elifant: actually I think the PStr constructor is going to have a new type soonish
19:28:11 <SamB> something like Data.ByteString
19:28:17 <Elifant> PStr is not a question, it was 'PStr FAST_STRING', but now it is obsoleted.
19:28:31 <Elifant> The question is why to use TextDetails instead of plain String?
19:28:54 <SamB> GHC's version still uses packed strings for that constructor
19:29:13 <SamB> does that help you understand what that is for?
19:29:19 <Elifant> some magic? because code is just 'Str String | PStr String'
19:29:34 <SamB> Elifant: GHC's internally used version, I mean
19:29:42 <SamB> it has a different name but most of the code is the same
19:29:43 <Elifant> hm...
19:30:14 <Elifant> where can I get internally used version of HughesPJ?
19:30:33 <SamB> from the GHC source
19:30:48 <Elifant> this is where I look now :)
19:31:04 <Elifant> ghc libraries sources
19:31:26 <SamB> ghc/compiler/utils/Pretty.lhs
19:31:27 <Elifant> oops, stop. do you mean sources of GHC itself, not libraries?
19:31:29 <SamB> compiler sources
19:31:51 <SamB> see, this version is used by GHC to print error messages and things like that
19:32:04 <JuanMarcus> beschmi: ok i got it
19:32:26 <Elifant> is it used by haskell programs which import Text.PrettyPrint.HughesPJ?
19:32:26 <SamB> packed strings can really save a lot of space, probably time too sometimes
19:32:31 <SamB> Elifant: no
19:32:34 <beschmi> JuanMarcus: what did you do?
19:32:42 <JuanMarcus> beschmi: PortNum uses the port number backwards, making 7074 turn into 41499
19:32:46 <SamB> but, it might provide some insight into the way things are
19:32:51 <JuanMarcus> beschmi: so i just droped it
19:32:55 <Elifant> then internal version isn't interesting for me
19:32:57 <SamB> JuanMarcus: um. use fromIntegral
19:33:14 <JuanMarcus> SamB: doesn't solve
19:33:33 <SamB> Elifant: It would change a lot of code in the library if they took out TextDetails
19:33:44 <SamB> then they'd have too versions on their hands
19:33:46 <JuanMarcus> beschmi: bindSocket sock (SockAddrInet 7074 endereco)
19:33:48 <SamB> er. two
19:33:55 <SamB> two substantially different versions
19:34:15 <Elifant> SamB: actually, not. I removed TextDetails from module and changes are minimal
19:34:39 <SamB> Elifant: anyway, why should it be removed? you don't think that is going to make it faster do you?
19:35:08 <sorear> tell fodder
19:35:37 <Elifant> I change library so it works with any instance of class Pretty. Now String is Pretty and TextDetails is Pretty.
19:35:41 <SamB> besides which, Real Soon Now, the PStr constructor might come back to usefullness
19:35:52 <SamB> Elifant: that sounds slower
19:36:12 <SamB> GHC isn't that good with dictionaries, you know
19:36:38 <SamB> ... also, people like to use the name Pretty to refer to a class of things that can be prettily printed
19:36:47 * sorear reads the logs, notes the existance of #haskell.br to JuanMarcus and araujo 
19:37:02 <JuanMarcus> that is cool
19:37:08 <SamB> JuanMarcus: how are you doing it?
19:37:50 <JuanMarcus> SamB: bindSocket sock (SockAddrInet 7074 address)
19:38:08 <JuanMarcus> SamB: that works
19:38:22 <JuanMarcus> SamB: bindSocket sock (SockAddrInet (PortNum 7074) endereco)
19:38:28 <JuanMarcus> SamB: that didn't
19:38:42 <SamB> I told the doctor "it hurts when I do this"
19:38:46 <SamB> he told me "don't do that"
19:39:14 <JuanMarcus> actually i didn't know i was able to not do it
19:39:23 <Elifant> SamB: what class name you propose? I'm not a native speaker, so I can't make a good name :)
19:39:24 <JuanMarcus> =D
19:39:26 <SamB> anyway... that constructor shouldn't be exported...
19:39:48 <SamB> Elifant: I would suggest that we don't really need a class
19:40:09 <beschmi> and the PortNumber newtype should be abstract perhaps
19:40:10 <Elifant> At least I need generic PrettyPrint library and so need a class
19:40:24 <SamB> beschmi: just so
19:40:34 <Elifant> I may call new library 'GenPrettyPrint' and don't replace old one.
19:40:34 <SamB> Elifant: why do you need it?
19:40:57 <Elifant> I want to pretty-print source code with colouring. Colouring is made with ANSI ESC sequences.
19:41:08 <sorear> @where hscolor
19:41:09 <lambdabot> I know nothing about hscolor.
19:41:10 <SamB> eeeeeeek
19:41:11 <sorear> @where hscolour
19:41:12 <lambdabot> http://www.cs.york.ac.uk/fp/darcs/hscolour/
19:41:26 <sorear> @docs Text.PrettyPrint.HughesPJ
19:41:27 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Text-PrettyPrint-HughesPJ.html
19:41:29 <SamB> ANSI ESC sequences indeed...
19:41:34 <sorear> those two are all you'll need
19:41:58 <sorear> but do yourself a favor and religously separate ESC-generation from formatting :)
19:42:13 <Elifant> I already have pretty-printer for my code. But I can't integrate colouring
19:42:20 <sorear> why not?
19:42:21 <SamB> that is good
19:42:27 <SamB> you don't want to integrate coloring
19:42:31 <sorear> why can't hscolour be used?
19:42:34 <SamB> you want to keep it seperate ;-)
19:42:50 <SamB> sorear: by "integrate" he means "tangle up with"
19:42:58 <sorear> ok.
19:43:09 <Elifant> ok, I have AST. I have function which returns color for each AST node.
19:43:13 <Elifant> I have pretty-printer.
19:43:17 <SamB> color?
19:43:22 <SamB> why do you have color?
19:43:23 <xic> is there a good introduction to STArray?
19:43:53 <Elifant> SamB: to show it on color screen :)
19:44:14 <sorear> Elifant: wouldn't it be easier to use PrettyPrint.HughesPJ to pretty print the ast, using colored letters?
19:44:14 <SamB> is it anything special?
19:44:23 <sorear> hscolour!
19:44:31 <SamB> colored letters?
19:44:38 <Elifant> sorear: then pretty-print will calculate strings length incorrectly
19:44:44 <SamB> sorear: I see no colored letters in my character map!
19:44:56 <Elifant> because ANSI sequences takes bytes, but no screen space!
19:45:11 <sorear> Elifant: use (Attr,Char)
19:45:20 <SamB> sorear: I don't think you can do that
19:45:25 <Elifant> ok, but Pretty-Print accepts plain String only!
19:45:26 <stepcut> SamB: do you have any idea how YHC gets the primitive value out of a closure for FFI calls ? It looks like there is C code that peeks inside the Node pointer. But it is not clear to me how it ensures the node contains a primitive value, and not an expression, like, 1 + 2 ...
19:45:34 <sorear> Elifant: PrettyPrint is broken then.
19:45:42 <SamB> perhaps *that* is why he wanted a generic pretty-printer?
19:45:45 <sorear> Elifant: go fix it, and publish the result.
19:45:47 <Elifant> sorear: this is why I modify it to be more generic
19:45:56 <sorear> Publish the result!
19:45:58 <Elifant> yes, yes, I'm doing it !
19:45:58 <stepcut> my question may be a bit confusing due to my own confusion :)
19:46:03 <Elifant> in progress.
19:46:07 <SamB> sorear: so what do you suggest for his class name?
19:46:11 <SamB> he wanted to call it Pretty
19:46:13 <sorear> The lambda revolution can't have people who hoard fixes!
19:46:17 <SamB> I told him people already use that
19:46:26 <Elifant> yes, Doc is parametrized by item name
19:46:27 <SamB> for something else
19:46:36 <sorear> SamB: what's wrong with qualified names?
19:46:50 <Elifant> it's a workaround, but not the right way
19:47:09 <SamB> sorear: well, it is better to find a name that actually describes the class
19:47:21 <SamB> his class doesn't do what most Pretty classes do...
19:47:35 <Elifant> do I need to describe class to help you name it?
19:47:44 <SamB> that might help ;-)
19:47:46 <sorear> what does his pretty class do?
19:47:55 <sorear> doesn't it pretty print values like Show?
19:48:06 <SamB> generalizes TextDetails
19:48:10 <sorear> and if it doesn't, what's he using a class for?
19:48:17 <sorear> ?index TextDetails
19:48:17 <lambdabot> Text.PrettyPrint.HughesPJ, Text.PrettyPrint
19:48:30 <Elifant> yes, it knows how to get item length, newline item, space item
19:48:37 <SamB> @hoogle TextDetails -> a
19:48:39 <lambdabot> No matches, try a more general search
19:48:42 <SamB> aww.
19:48:53 <sorear> TextDetails is a Data
19:49:03 <sorear> why do you want to make it a class?
19:49:32 <Elifant> because ideally pretty-printer may work even with window controls
19:49:38 <Elifant> why restrict it to string?
19:49:40 <SamB> sorear: he wants to be able to use PrettyPrint on things other than characters
19:50:07 <SamB> like, oh, colored characters
19:50:10 <sorear> then parametrize it!
19:50:13 <Elifant> in my case it will work with (String, Color)
19:50:13 <SamB> yes
19:50:14 <SamB> he is
19:50:22 <Elifant> sorear: so I did.
19:50:22 * sorear can't understand what use typeclasses are here
19:50:38 <SamB> but he needs a class that provides the operations that HughesPj wants from TextDetails
19:50:43 <sorear> oh
19:50:45 <Elifant> classes (passed as parameter) must have some methods
19:50:53 <Elifant> how to require them? with class!
19:51:01 <sorear> dictionaries!
19:51:02 <Elifant> oops, "type (passed ..."
19:51:06 <SamB> like width
19:51:08 <sorear> anyway
19:51:15 <Elifant> sorear: and classes are dictionaries :)
19:51:17 <sorear> class TextObject where
19:51:23 <SamB> good name
19:51:23 <sorear> blah blah blah
19:51:35 <sorear> instance TextObject IndentedLine where
19:51:49 <Elifant> instance TextObject WindowControl where :-\
19:51:51 <sorear> data IndentedLine = IL Int String
19:51:58 <SamB> sorear: um.
19:52:04 <SamB> I don't think you have it quite right
19:52:06 <sorear> when you finish, post it on haskell@.
19:52:22 <sorear> when you give up, tell me so I can resume my own efforts.
19:52:29 <sorear> I want this too.
19:52:31 <SamB> data TextDetails = Chr Char | Str String | PStr String
19:52:32 <glguy> ?yow
19:52:33 <lambdabot> As President I have to go vacuum my coin collection!
19:52:42 <SamB> there is *no indentation*
19:52:53 <sorear> SamB: just because indentation uses spaces doesn't mean that's the Right Way!
19:53:00 <SamB> sorear: there are no spaces.
19:53:02 <SamB> at least, not usually.
19:53:28 <sorear> if there are no spaces and no indentation, how does the callback know what x position to use?
19:54:04 <SamB> the indentation comes later, I think...
19:54:19 <sorear> then what does nest do?
19:54:32 <SamB> it does not futz with TextDetails
19:54:40 <Elifant> there is, but more generic. PrettyPrinter calls pindent and get object representing indent.
19:55:24 <Elifant> so maybe PrettyElement?
19:55:30 <SamB> why don't you read the paper? don't they develop a Doc datatype in the paper?
19:55:42 <SamB> Elifant: PrettyText?
19:55:45 <Elifant> I've read the paper.
19:55:52 <sorear> read the source code?
19:55:54 <SamB> I was talking to sorear ;-)
19:55:59 <Elifant> ah...
19:56:06 <sorear> I've read the paper too
19:56:18 <Elifant> SamB: I don't like 'Text' in names.
19:56:33 <sorear> haskell 1.2 had a whole class called 'Text'
19:56:36 <SamB> Elifant: you were planning to use this on bitmaps?
19:56:45 <Elifant> SamB: who knows :)
19:57:04 <Elifant> layout problem is quite common
19:57:39 <SamB> I think you need a slightly higher-end pretty-printer for really graphical stuff ;-)
19:58:22 <Elifant> but I need to start with something
19:58:39 <Elifant> !
19:58:42 <Elifant> LayoutElement ?
19:58:44 <xic> > return 3
19:58:45 <lambdabot>   add an instance declaration for (Show (m a))
19:59:19 <Elifant> Layout consists of indents and text/control/picture, so they are layout elements
19:59:21 <sorear> you don't want to generalize TextDetails
19:59:37 <sorear> you want to rewrite FullRender to use something better
19:59:43 * sorear is reading the source code
19:59:45 <Elifant> it isn't needed
20:00:12 <Elifant> however I have some questions about fullRender, I will ask them after we make name
20:00:22 <Elifant> SamB: so how about LayoutElement?
20:00:24 <sorear> Oh, so you *want* to use spaces for indentation?
20:01:02 <Elifant> sorear: not spaces, just "generic indent"
20:01:09 <brad_> anyone get ghc-6.6 to build on freebsd?
20:01:10 <Elifant> it is spaces for text
20:01:19 <sorear> then you'll need to generalize fullRender.
20:01:29 <sorear> fullRender uses spaces.
20:01:44 <Elifant> sorear: this is as simple as replace TextDetails with LayoutElement (or whatever name)
20:02:20 <Elifant> sorear: it uses 'spaces k' for getting indent, I already replaced it to 'pindent k' which returns generic indent
20:02:25 <chessguy> sorear, new error on building LB: Chasing modules from: scripts/RunPlugs.hs
20:02:25 <chessguy> Could not find module `System.Eval.Haskell':
20:02:25 <chessguy>   use -v to see a list of the files searched for
20:02:25 <chessguy>   (imported from scripts/RunPlugs.hs)
20:02:28 <stepcut> brad_: I have
20:02:47 <sorear> If you can figure out how to make the existing fullRender do the Right Thing with proportional fonts etc I'll be mighty impressed.
20:02:53 <sorear> chessguy: that's a non-error
20:02:59 <brad_> stepcut - how did you get past this error: Time.hsc:370:2: #error "Don't know how to get at timezone name on your OS."
20:03:10 <sorear> chessguy: it means you dont have hs-plugins installed
20:03:22 <sorear> chessguy: you remember deleting the dependency?
20:03:35 <sorear> chessguy: if you look, lambdabot has already been build
20:03:43 <sorear> chessguy: runplugs is built later
20:03:52 <chessguy> so it should still run?
20:03:52 <Elifant> sorear: since each element now know how to get it's length (and we may count it even for proportional fonts), pretty-print will work as expected
20:04:04 <sorear> chessguy: yes.  ./dist/build/lambdabot/lambdabot
20:04:15 <sorear> ok
20:04:25 <stepcut> brad_: let me ponder
20:04:30 <sorear> Elifant: than you've already generalized fullRender. :)
20:04:43 <sorear> Elifant: (in a way I agree with...)
20:04:48 <Elifant> well... yes :)
20:05:07 <chessguy> yay!!!!
20:05:10 * chessguy cheers
20:05:14 * sorear claps
20:05:23 <sorear> Elifant: I still say TextObject.
20:05:23 * chessguy dances
20:05:36 <chessguy> oh wait
20:05:45 <sorear> ?
20:05:46 <chessguy> premature celebration
20:05:57 <chessguy> $ ./dist/build/lam*/lambdabot
20:05:57 <chessguy> Initialising plugins ...........Plugin.Djinn: couldn't find djinn binary
20:05:57 <chessguy> ........................................ done.
20:05:57 <chessguy> lambdabot> > 3+2
20:05:57 <chessguy>  fd:46909632806918: hClose: resource vanished (Broken pipe)
20:05:58 <chessguy> lambdabot>
20:06:02 <sorear> are you about to complain > 2.2 doesn't work?
20:06:05 <sorear> duh....
20:06:23 <sorear> hs-plugins is used only for > foo
20:06:37 <sorear> since you disabled it > foo won't work
20:07:27 <chessguy> on > is hs-plugins?
20:07:36 <Elifant> another question: fullRender gets (TextDetails -> a -> a) as parameter and folds TextDetails internally. why not just return [TextDetails]?
20:07:46 <sorear> lambdabot> anything_but_run_>_djinn_hoogle_bf_ft_unlambda_check_or_...
20:08:05 <sorear> Elifant: I suspect shortcut deforestation didn't exist when HughesPJ was written.
20:08:18 <sorear> Elifant: I suspect that's why.
20:08:26 <Elifant> so may it be safely changed?
20:08:29 <sorear> yes
20:08:35 <Elifant> gooooood
20:08:37 <stepcut> brad_: On my system, /usr/include/time.h has struct tm, so everything was peachy
20:08:38 <sorear> you'll break compatibility of course
20:09:01 <sorear> but I suspect you're not worried about that :)
20:09:01 <Elifant> I create new functions with 'gen' prefix.
20:09:09 <Elifant> even new Doc is GenDoc p
20:09:19 <Elifant> type Doc = GenDoc TextDetails
20:09:29 * sorear looks forward to seeing your haskell@ ANNOUNCE
20:09:30 <Elifant> so it won't break
20:09:30 <stepcut> brad_: look at libraries/base/config.log and libraries/base/configure and search for things like tm_zone and TM_ZONE to see what it was looking for and what it found
20:09:31 <brad_> ah, thanks stepcut, i will look into that - i installed as "desktop user", so i may not have gotten all of the sources, indeed, /usr/src was empty after i installed at this "basic" level
20:10:25 <stepcut> also, I built using gcc42 and this command-line: ./configure --prefix=/opt/ghc-6.6 --with-ghc=/opt/ghc-6.4.1/bin/ghc --with-gcc=/usr/local/bin/gcc42
20:10:42 <stepcut> and I am on FreeBSD 4.8, so...
20:10:49 <stepcut> things have probably changed :)
20:11:04 <brad_> wow, 4.8, thats vintage!
20:11:25 <stepcut> brad_: yeah, but that is what my webprovider uses, so I need to around if I want to compile haskell .cgi scripts :-(
20:11:57 <sorear> what, you can't just run ssh gcc? :)
20:12:08 <chessguy> so can i put hs-plugins back in the dependencies list?
20:12:08 <stepcut> no, CPU/RAM limits
20:12:11 <brad_> i did not set a --with-ghc for my build, but since i have only 6.4.2 installed, i presume it found it
20:12:36 <stepcut> probably, I don't think you should need any of those flags
20:13:07 <brad_> by the way, the config.log does not contain *zone*
20:13:20 <sorear> chessguy: it'll break if you do because you didn't install hs-plugins :)
20:13:26 <brad_> so i guess i need to look into why...
20:13:34 <stepcut> brad_: which config.log ?
20:13:43 <sorear> you have ghci, why do you want @run?
20:13:55 <stepcut> brad_: the top-level one does not, but there is another one in libraries/base/config.log ?
20:14:03 <brad_> the one you indicated - libraries/base/conf.log
20:14:23 * chessguy sighs
20:14:30 <chessguy> ?where hs-plugins
20:14:30 <lambdabot> http://www.cse.unsw.edu.au/~dons/hs-plugins/
20:14:32 <stepcut> does libraries/base/configure have zone ?
20:14:42 <sorear> chessguy: why do you want it?
20:14:59 * chessguy shrugs
20:15:01 <brad_> no, in fact, grep -i zone * in that dir shows nothing
20:15:05 <sorear> it will only fix @run (and maybe @check)
20:15:08 <chessguy> to get have a fully-working lambdabot i guess
20:15:28 <sorear> ok
20:15:34 <chessguy> s/get//
20:15:40 <sorear> it should Just Work on 6.4.2
20:15:58 <SamB> what does it mean when happy says "parE"?
20:16:18 <stepcut> brad_: odd, I would think at the very least that configure.ac would, since that comes from the tarball and is not autogenerated
20:16:20 <chessguy> i want to be able to submit patches and stuff, and i'd feel more comfortable doing that if LB works completely locally
20:16:46 <stepcut> atleast I assume it comes from the tarball...
20:16:52 <brad_> i got my code from darcs, i presume darcs would contain stable code, BUT...maybe i need to work from tarballs for confirmed 6.6 copies
20:17:04 <brad_> maybe the darcs repo is active
20:17:28 <stepcut> brad_: ah, let me take a peek at darcs real quick
20:18:52 <chessguy> sorear, did you see that the new binary broke two LB plugins
20:18:53 <chessguy> @seen
20:18:54 <lambdabot> Due to the existance of massively broken IRC clients, I will not answer you in channel.
20:19:10 <chessguy> @seen dons
20:19:11 <lambdabot> dons is in #ghc, #haskell.hac07, #haskell-overflow and #haskell. I last heard dons speak 3h 5m 55s ago.
20:19:12 <sorear> chessguy: yes?
20:19:22 <chessguy> hmm, he must have somehow patched that
20:19:26 <chessguy> @vixen
20:19:26 <lambdabot> <undefined>
20:19:26 <sorear> chessguy: seen + vixen , any else?
20:19:37 <chessguy> no, those are the two i was thinking of
20:19:44 <sorear> chessguy: he == "dons" that == "@seen" ?
20:19:45 <stepcut> brad_: it looks like http://darcs.haskell.org/packages/base/configure.ac contains AC_STRUCT_TIMEZONE, is that different than yours ?
20:20:07 <sorear> chessguy: I did that to seen.  (and FTR my local bot has no @run)
20:20:09 <chessguy> yes
20:20:27 <chessguy> how did you do it?
20:20:32 <chessguy> @vixen hi
20:20:32 <lambdabot> <undefined>
20:21:45 <brad_> if you are referring ot the configure.ac in the toplevel build dir, i do not see AC_STRUCT_TIMZEONE
20:21:57 <brad_> in fact i am walking the whole build tree looking for it
20:22:22 <stepcut> no,  I mean libraries/base/configure.ac
20:23:04 <brad_> no, in that dir, the configure.ac does not have TIMEZONE in it
20:23:56 <stepcut> brad_: odd, it is there in darcs, how exactly, did you get this source code ?
20:24:09 <brad_> i just pulled from darcs yesterday
20:24:19 <brad_> ALTHOUGH
20:24:22 <brad_> i had errors
20:24:26 <brad_> and had to restart it
20:24:28 <stepcut> darcs get http://darcs.haskell.org/ghc ?
20:24:28 <brad_> multiple times
20:24:29 <lambdabot> Title: Index of /ghc
20:24:44 <brad_> darcs errors in fact
20:24:49 <brad_> i know because darcs told me so
20:25:03 <stepcut> does 'darcs check' complain at all ?
20:25:04 <brad_> darcs 1.0.8
20:25:19 <brad_> should i do darcs check in the top build dir?
20:25:40 <stepcut> yes, and in the libraries/base directory
20:26:25 <sorear> chessguy: darcs send?
20:26:49 <stepcut> brad_: if you want to run head, you could also try downloading the nightly tarball from here: http://www.haskell.org/ghc/dist/current/dist/
20:26:50 <lambdabot> Title: Index of /ghc/dist/current/dist
20:26:51 <chessguy> sure
20:27:01 <stepcut> ghc-6.7.20070119-src.tar.bz2
20:27:16 <brad_> hmmm, in the packages dir darcs said it was consistent, but in the top build dir i am get 15,000 or so patches
20:27:32 <stepcut> heh
20:27:32 <brad_> i presume the full patchset
20:27:35 <stepcut> dunno
20:27:47 <brad_> actually you have been immensely helpful
20:27:48 <sorear> chessguy: 20070115185300-e3110-6d67d45ddeddb6d850b60b18d52cfd2719df1325
20:28:01 <chessguy> what's that, the checksum?
20:28:05 <brad_> and you have taken a lot of time to help me with this
20:28:17 <brad_> so i say a big THANKS
20:28:23 <stepcut> :p
20:28:26 <sorear> chessguy: darcs internal patch name
20:28:37 <brad_> i will try with the tarballs, i am sure i will be further ahead
20:28:39 <sorear> chessguy: the patch that does "that" to seen
20:28:42 <chessguy> what do i do with that?
20:28:46 <stepcut> brad_: I've been stuck on my project all day, so I am looking for excuses to slack off ;)
20:28:57 <sorear> look at the patch or ignore it.
20:29:13 <chessguy> look at it where?
20:29:20 <brad_> thanks again stepcut! i am going to sign off now and try this tarball build
20:29:26 <stepcut> brad_: good luck!
20:29:33 <chessguy> at the main LB repository?
20:29:40 <sorear> not much else you can to with that number.
20:29:55 <sorear> yes
20:30:05 <sorear> grr, I hate not noticing -- more --
20:31:08 <chessguy> did you just darcs send that?
20:31:51 <sorear> Mon Jan 15 10:53:00 PST 2007  Stefan O'Rear <stefanor@cox.net> * make @seen not ping entire channels
20:32:04 <sorear> 4 days just?
20:32:20 <SamB> @seen
20:32:21 <lambdabot> Due to the existance of massively broken IRC clients, I will not answer you in channel.
20:32:22 <chessguy> oh, so it's already patched on the version i have
20:32:34 <SamB> sorear: that is a bit harsh
20:32:35 <chessguy> but it doesn't work
20:32:42 <SamB> that behaviour is not broken
20:32:44 <sorear> it doesn't?
20:32:53 <sorear> how does it not work?
20:32:59 <chessguy> it crashed when trying to build seen
20:33:10 <chessguy> i had to take that module out
20:33:10 <sorear> GHC CRASHED !?!?
20:33:15 <SamB> sorear: you shouldn't accuse IRC clients of being broken for this reason...
20:33:33 <chessguy> well, the build for LB crashed
20:33:36 <SamB> chessguy: doesn't that solve the problem, though?
20:33:47 <sorear> so cabal crashed?
20:33:57 <chessguy> i guess
20:34:00 <sorear> no part of the build should crash
20:34:27 <chessguy> it was building LB, and it went through the plugins, and when it got to @seen, it gave a fatal error
20:34:44 <chessguy> i had to take @seen and @vixen out of the module list and restart the build
20:34:58 <sorear> fatal error --> type error or not in scope?
20:35:08 <sorear> for me "crashed" == "Segmentation fault"
20:35:09 <chessguy> type error
20:35:13 <chessguy> sorry
20:35:24 <chessguy> here, let me do it again, and i can be more specific
20:35:51 <sorear> ok, vixen and seen are expected to break
20:35:55 <chessguy> i'm rebuilding for plugins anyway
20:36:12 <sorear> they are the two modules most likely to be broken by binary's volatility
20:36:22 <chessguy> ./Plugin/Seen.hs:205:24:
20:36:22 <chessguy>     Ambiguous type variable `a' in the constraints:
20:36:22 <chessguy>       `Binary a' arising from use of `decode' at ./Plugin/Seen.hs:205:24-29
20:36:22 <chessguy>       `Show a' arising from use of `fromRightM' at ./Plugin/Seen.hs:205:12-21
20:36:22 <chessguy>     Probable fix: add a type signature that fixes these type variable(s)
20:36:23 <chessguy> [
20:36:27 <sorear> chessguy: the plugins build is known to be broken
20:36:43 <sorear> (full lambdabot-dynamic plugin build)
20:36:53 <sorear> (just runplugs-plugins is fine)
20:36:55 <SamB> oh no, not *again*
20:37:04 <sorear> SamB: eh?
20:37:21 <SamB> I had it working!
20:37:29 <sorear> lambdabot-dynamic?
20:37:38 <SamB> ... yeah
20:37:52 <chessguy> hmm, plugins still aren't working
20:37:54 <SamB> it was a fair bit of work too
20:37:58 <xic> can i have an unboxed array of Enum values?
20:38:02 <sorear> well, it bailed on me with a dynamic linker error, and dons said it was expected
20:38:07 <sorear> xic: Enum is a class.
20:38:18 <SamB> dynamic linker error?
20:38:21 <sorear> xic: Unboxed arrays can only hold members of a type.
20:38:24 <sorear> SamB: yeah.
20:38:26 <SamB> what dynamic linker error?
20:38:32 <SamB> I wish people would stop doing stuff like that
20:38:58 <sorear> I don't know, i don't keep typescripts of everything
20:39:09 <sorear> (it should be in the logs when I asked dons)
20:39:15 <sorear> SamB: stuff like whhat?
20:39:28 <SamB> breaking the dynamic build?
20:39:39 <SamB> the static build takes too damn long
20:42:40 <xic> sorear: can i have an unboxed array of Ordering values?
20:43:05 <sorear> @instances-importing IArray UArray
20:43:06 <lambdabot> Couldn't find class `UArray'. Try @instances-importing
20:43:16 <sorear> @instances-importing Data.Array.Unboxed IArray
20:43:18 <lambdabot> Array e, UArray Bool, UArray Char, UArray Double, UArray Float, UArray Int
20:43:41 <sorear> @docs Data.Array.Unboxed
20:43:42 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Array-Unboxed.html
20:43:48 <sorear> ^^^ the full list.
20:44:05 <xic> right, i don't see Ordering on the list. does this mean it's not possible?
20:44:27 <sorear> use fromEnum
20:44:30 <chessguy> sorear, so...should i be able to run LB with plugins (and thus the > functionality) or not?
20:44:33 <sorear> not possible yes
20:44:44 <chessguy> s/plugins/hs-plubins/
20:44:45 <sorear> chessguy: if all you want is > then you can
20:44:57 <sorear> chessguy: if you want @dynamic-load, then no
20:45:10 <chessguy> i don't know what @dynamic-load is
20:45:37 <chessguy> @dynamic-load
20:45:38 <lambdabot> Unknown command, try @list
20:46:32 <sorear> lambdabot-dynamic: user error (loadShared: couldn't load `librt.so' because /usr/lib/librt.so: symbol __librt.so: symbol __librt_multiple_threads,
20:46:40 <sorear> version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference)
20:46:53 <sorear> SamB: that's the error.  CLOG, 06.12.25
20:47:01 <sorear> from context:
20:47:07 <sorear> 18:31:00 <dons> now, SamB submitted a patch for this,
20:47:12 <sorear> 18:31:07 <dons> so it should work with a little bit of effort
20:48:46 <SamB> what a mysterious error
20:49:51 <chessguy> hmm, it seems to build ok, but i still get an error when i use >
20:49:52 <sorear> but anywqay, if you don't know what @dynamic-load is, you don't need it.
20:50:08 <chessguy> lambdabot> >3
20:50:08 <chessguy>  fd:46909632806918: hClose: resource vanished (Broken pipe)
20:50:09 <sorear> chessguy: copy dist/build/runplugs/runplugs into .
20:50:38 <sorear> does it work now?
20:51:38 <chessguy> hang on
20:51:54 <sorear> ^L?
20:52:54 <chessguy> no
20:52:56 <chessguy> ]# ./dist/build/la*/lambdabot
20:52:56 <chessguy> Initialising plugins ...........Plugin.Djinn: couldn't find djinn binary
20:52:56 <chessguy> ........................................ done.
20:52:56 <chessguy> lambdabot> >3
20:52:56 <chessguy>      Failed to load interface for `ShowQ':
20:52:57 <chessguy>         Could not find module `ShowQ': use -v to see a list of the files searched for
20:53:07 <sorear> ok
20:53:10 <sorear> ....
20:53:20 <sorear> look in ./build
20:53:54 <sorear> I don't think it will be usefully executable, but it'll say where ShowQ is...
20:54:07 <chessguy> you mean ./dist/build ?
20:54:22 <sorear> no I mean ./build
20:54:27 <sorear> it's a text file
20:54:35 <chessguy> oh
20:54:39 <sorear> theoretically a shell script
20:54:53 <chessguy> scripts/ShowQ.hs
20:54:58 <SamB> why you say "theoretically"?
20:55:17 <sorear> i no longer know :(
20:55:40 <SamB> it was the last time I ran it!
20:56:37 <chessguy> so...what do i need to do with ShowQ
20:56:57 <sorear> build should say
20:57:11 * sorear tries again to make a plugins bot
20:57:23 <chessguy> should i try just executing build?
20:57:30 <sorear> yes
20:57:48 * SamB is still trying to "darcs pull"
20:57:48 <sorear> I keep forgetting it exists when ppl ask how to build the bot :)
20:57:48 * chessguy crosses fingers again
20:58:00 <sorear> SamB: darcs pull what?
20:58:06 <SamB> lambdabot
20:58:16 <SamB> I'm like 4xx patches behind or something
20:58:44 <chessguy> shazam!
20:58:49 <chessguy> sorear++
20:59:05 <sorear> it works!?
20:59:15 <chessguy> yup
20:59:40 <sorear> yay!
20:59:58 <chessguy> what's the normal way to end LB, by the way? i've just been ^C'ing it
21:00:06 <SamB> @quit
21:00:07 <lambdabot> Not enough privileges
21:00:16 <chessguy> that doesn't work
21:00:26 <sorear> chessguy: ^C or ^D
21:00:29 <SamB> try it at the prompt?
21:00:33 <chessguy> lambdabot> @quit
21:00:33 <chessguy> Quit
21:00:37 <sorear> chessguy: @quit is only for IRC ATM
21:00:45 <sorear> SamB: I broke it!
21:00:48 <SamB> oh?
21:00:53 <SamB> why did you do that?
21:01:29 <SamB> your multi-net support, I presume?
21:01:47 <sorear> it seemed easier than twisting offline into enough of a knot that sending a "QUIT :foo" killed readline?
21:02:15 <SamB> ???
21:04:23 <chessguy> woohoo!
21:04:31 <chessguy> > 3
21:04:33 <lambdabot>  3
21:04:34 <robo_chessguy>  3
21:04:43 <sorear> yay!!!
21:04:48 <SamB> sorear: how do you configure the network connectivity now?
21:05:02 <sorear> chessguy: how did you figure it out?
21:05:08 <chessguy> figure what out?
21:05:21 <sorear> chessguy: I don't think I documented the online procedure except in /msg dons
21:05:35 <SamB> sorear: get to patching, then!
21:05:46 <chessguy> it's in the README
21:06:04 <sorear> oh so it is
21:06:05 <SamB> oh, dons must have leaked the info
21:06:18 <chessguy> CONNECTING:
21:06:18 <chessguy>     ./lambdabot -e 'rc online.rc'
21:07:14 <sorear> there are a lot more options now
21:07:25 <stepcut> I should put my lambdabot jabber patches up for adoption
21:07:26 <sorear> for instance -e 'rc online.rc' -e 'offline'
21:07:37 <sorear> stepcut: == ADept ?
21:07:41 <chessguy> hey look, my 6.6 make finished
21:07:49 <sorear> chessguy: yay!
21:07:56 <stepcut> sorear: ???
21:08:12 <SamB> sorear: you are strange
21:08:22 <sorear> stepcut: oh. dons said an "ADept" was working on jabber patches.
21:08:24 <SamB> why would stepcut == ADept?
21:08:37 <sorear> like xerox == edi
21:08:39 <stepcut> sorear: is this recent? I should message him
21:08:49 <SamB> he has some russian name, really
21:08:59 <SamB> adept, I mean
21:09:02 <sorear> stepcut: if you wait a few hours dons should wake up
21:09:10 <stepcut> sorear: no, I meant ADept :)
21:09:47 <stepcut> I have working patches, the code is just not pretty. And it uses an beta version of HaXml
21:10:17 <sorear> stepcut: I'd like to see it.  If nothing else it will show me how to generalize the multiprotocol interface.
21:10:31 <sorear> stepcut: how recent are these patches?  post-multiserver?
21:10:51 <stepcut> probably 5 months
21:10:55 <sorear> oh.
21:11:07 <sorear> well it'll still be interesting
21:11:23 <sorear> just rather completely incompatible with the current bot
21:11:34 <chessguy> heh
21:11:41 <stepcut> :
21:11:42 <stepcut> :p
21:12:00 <stepcut> it might not be that bad
21:12:11 <chessguy> GHC Interactive, version 6.6, for Haskell 98.
21:12:16 <SamB> okay, so where does Data.Binary come from?
21:12:17 <chessguy> boo-yeah!
21:12:22 <chessguy> ?where binary
21:12:22 <lambdabot> http://darcs.haskell.org/binary
21:12:42 * chessguy does a couple backflips
21:14:59 <chessguy> heh. this is kind of amusing. i completely built LB using 6.4.2, and THEN upgraded to 6.6
21:15:10 <sorear> hehum
21:15:15 <chessguy> oh well
21:15:38 <chessguy> i guess i could take fps out of lb's .cabal and rebuild
21:15:38 * sorear is running GHC HEAD for default ... too bad LB is incompilable with it atm
21:15:50 <sorear> chessguy: LB has a special cabal for 6.6
21:15:56 <sorear> (it's the default one)
21:16:03 <sorear> darcs revert lambdabot.cabal
21:16:05 <chessguy> oh, i think i overwrote that
21:16:29 <sorear> darcs revert will get it back
21:18:07 <chessguy> can't find network
21:18:13 <sorear> ?
21:18:24 <sorear> did you install the extralibs in 6.6?
21:18:32 <chessguy> oh
21:18:34 <chessguy> no i didn't do that yet
21:18:41 * sorear has forgotten whether special steps are needed
21:18:56 <chessguy> there's an extra tarball for extralibs
21:19:30 <stepcut> I wonder if I can license my library under BSD if it 'depends' on an LGPL library. After all, someone could implement the LGPL library under BSD someday...
21:19:36 * sorear hasn't compiled 6.6, come to think of it
21:19:43 <sorear> stepcut: easily.
21:19:51 <sorear> stepcut: your code can be under BSD...
21:19:57 <stepcut> obviously, any binaries produced will be LGPL
21:19:59 <sorear> stepcut: Visual Haskell is under BSD
21:20:09 <sorear> stepcut: VS2006 core is *not*
21:20:30 <sorear> rather extreme example...
21:22:06 <sorear> ?index nullForeignPtr
21:22:07 <lambdabot> bzzt
21:22:59 <chessguy> hmmm
21:23:15 <chessguy> doesn't look like extralibs has a single point of install. do i have to install each library individually?
21:23:35 <stepcut> xb
21:23:46 <stepcut> (oops, missed the C- part)
21:25:21 <sorear> chessguy: how did you compile zlib?
21:25:36 <sorear> did you need to do any mucking with nullForeignPtr?
21:25:40 <chessguy> no
21:25:56 * sorear is trying to build a 6.4 bot now, and thought you might know
21:26:04 <chessguy> there was a zlib.cabal
21:27:08 <chessguy> that worked fine
21:31:47 <chessguy> welcome, monochrom
21:31:56 <monochrom> yo
21:33:02 <sorear> hi!
21:35:34 <chessguy> hmmm
21:35:44 <chessguy> now it's saying it can't satisfy zlib
21:35:49 <chessguy> i'm trying to rebuild LB with 6.6
21:36:16 <chessguy> do i still need that dependency?
21:36:53 <chessguy> oh, i probably have to reinstall zlib
21:38:13 <chessguy> which means reinstalling fps. whee....
21:41:04 <monochrom> @type foldr
21:41:05 <lambdabot> forall b a. (a -> b -> b) -> b -> [a] -> b
21:43:39 <chessguy> fps got built into 6.6 now right?
21:43:46 <monochrom> yeah
21:43:58 <chessguy> so there's no need to include both in cabal dependencies?
21:44:28 <monochrom> cabal may want all packages listed
21:44:52 <chessguy> well, i'm getting a conflict when both are listed. it's finding the same thing in base and fps
21:45:41 <chessguy> taking fps out seems to resolve it
21:45:45 <sorear> correcty
21:45:47 <monochrom> fps no longer a package? now part of base?
21:45:50 <sorear> correct
21:46:01 <sorear> and since Cabal doesn't have Provides: ...
21:46:04 <monochrom> that explains everything
21:46:15 <chessguy> whee, i'm starting to get the hang of this
21:46:22 <sorear> yay!
21:46:42 * chessguy begins to feel like a tiny bit less of a n00b
21:47:32 <chessguy> i learned darcs, cabal, and LB all tonight
21:47:45 <chessguy> and a little bit about GHC too
21:52:45 <stepcut> sorear: darcs get http://www.n-heptane.com/nhlab/repos/haskell-xmpp/ and darcs get http://www.n-heptane.com/nhlab/repos/lambdabot-xmpp/
21:52:47 <lambdabot> Title: Index of /nhlab/repos/haskell-xmpp
21:53:03 <stepcut> almost all the 'changes' to lambdabot are in the new file, XMPP.hs
21:54:04 <sorear> stepcut: doing...
21:54:10 <sorear> ieeee!
21:54:34 <sorear> I specifed partial and it still wants to get all 1200 patches...
21:55:22 <stepcut> sorry
21:55:41 <stepcut> I have not tried building it recently either
21:56:05 <stepcut> it's an experimental, uncommented, hackjob -- may it give you much pleasure :)
21:56:37 <stepcut> the portion in lambdabot simple translates the IRC messages into jabber messages
21:56:59 <sorear> I don't seriously expect much of lambdabot-xmpp to show up in lambdabot.
21:57:08 <stepcut> which is nice in the sense that it non-intrusive
21:57:17 <sorear> but calculating glb(irc,xmpp) will require xmpp
21:57:49 <stepcut> haskell-xmpp is one attempt at creating a native haskell jabber library
21:57:56 <chessguy> hmm, hs-plugins are back to not working
21:57:59 <stepcut> client-side only
21:58:12 <chessguy> $ ./lb
21:58:12 <chessguy> Initialising plugins ................................................... done.
21:58:12 <chessguy> lambdabot> > 3
21:58:12 <chessguy>  Ix{Int}.index: Index (13510798885650432) out of range ((0,28))
21:58:18 <sorear> oh joy.
21:58:26 <chessguy> yeah, isn't that a lovely one
21:58:41 <sorear> on my system, that isn't even a valid Int!
21:58:58 <stepcut> I tried to make it extensible, so that you could add additional additional XMPP extensions with out having to change the source to existing extensions
21:59:03 <int-e> hmm, that's 30000000360000 hex, a round number.
21:59:04 <chessguy> % 13510798885650432 :: Int
21:59:12 <chessguy> > 13510798885650432 :: Int
21:59:14 <lambdabot>  3538944
21:59:16 <chessguy> wrong bot :)
21:59:18 <stepcut> so that third partsies could implement additional extensions indenpendent from the primary maintainer
21:59:30 <chessguy> yeah, that looks like a 64-bit issue
21:59:37 <sorear> huh? what? extensible bah? :)
21:59:55 * sorear has virtually 0 knowledge of xmpp
22:00:08 <stepcut> sorear: if I recall correctly, my design meets that goal, but I am not thrilled about the resulting API
22:01:18 <chessguy> ok, i think i've done enough insanity for the day. it is 1 am here, so i think i'm gonna catch a few winks
22:01:29 <chessguy> thanks again for all the help sorear.
22:01:32 <stepcut> sorear: xmpp is based entirely on the idea that it would be neat to make a chat client by have the clients talk by sending each other one big long XML document that represents the whole conversion
22:01:32 <chessguy> sorear++
22:02:08 <stepcut> sorear: in a sense, it is 'lazy' because everytime a user sends a message, a bit more of the document gets created a sent to the remote side
22:02:37 <sorear> chessguy: when you wake up, talk to dons - he knows a lot more than I about hs-plugins
22:03:03 <stepcut> sorear: because it is based on XML, there are lots of optional extensions that add new XML tags. http://www.xmpp.org/extensions/
22:03:05 <lambdabot> Title: XMPP Extensions
22:03:10 <sorear> stepcut: yeah, I got thatmuch from the spec. It reads alot like a topology book when you're missing half the prerequisites.
22:03:42 <sorear> and I got about the same amount in the first reading. "Huh?  "basic result in analysis"? Huh?"
22:04:38 <chessguy> will do
22:06:08 <sorear> stepcut: oh, I can integrate your hacks quite easily
22:06:38 <stepcut> sorear: spiffy
22:07:19 <sorear> So I'll port it to the most recent bot, and multiprotocol will be realized.
22:07:28 <stepcut> sorear: cool
22:07:40 <stepcut> sorear: let me know if I forgot to add some files to haskell-xmpp
22:07:46 <sorear> should I send the new patch back to you, or directly to dons? It will not break IRC.
22:08:06 <stepcut> probably dons
22:08:14 <stepcut> I am not actively using this stuff at the moment
22:08:57 <stepcut> I mostly hacked it up so we could use the > stuff
22:09:08 <stepcut> but, now everyone knows haskell well enough that we don't need to do that anymore
22:10:15 <stepcut> sorear: one issues is haskell-xmpp requires HaXml (>= 1.16), which is in beta still
22:10:23 <sorear> still?
22:10:49 <sorear> oh I have HaXml 1.13 and 6.6 on my machine.
22:10:49 <stepcut> according to the HaXml homepage, 1.13.2 is the latest stable release
22:11:18 <sorear> yeah 1.13.2
22:11:31 <stepcut> in the newer versions he supports 'streaming' xml, which is what is needed to do parse the incoming jabber conversation
22:11:32 <sorear> stable is 3 versions behind devel?
22:11:40 <sorear> yow
22:12:11 <stepcut> more, 1.17 is the latest version
22:12:44 <sorear> stepcut: what is Consumer ?
22:12:53 <sorear> it's listed in Build-Depends
22:12:56 <stepcut> but, I think it is because he is breaking the API a lot, and HaXml gets used by a lot of people that are used to the old stable API
22:13:01 <stepcut> oops, I should upload that too :)
22:13:05 <stepcut> hold on
22:13:20 <sorear> hehe
22:14:24 <sorear> Should I try to understand Xmpp.hs or haskell-xmpp  first?
22:14:37 <stepcut> sorear: hrm...
22:14:39 * sorear wants to get the code as quickly as possible.
22:16:27 <stepcut> darcs get http://www.n-heptane.com/nhlab/repos/haskell-consumer/
22:16:30 <lambdabot> Title: Index of /nhlab/repos/haskell-consumer
22:16:58 <stepcut> consumer is a monad for consuming streams
22:17:09 <sorear> oh
22:17:12 <stepcut> it supports peek, next, and poke
22:17:17 <sorear> like MonadSupply on the new wiki?
22:17:32 <stepcut> let me see, I have never heard of MonadSupply before :)
22:17:42 <sorear> ?wiki New_monads/MonadSupply
22:17:43 <lambdabot> http://www.haskell.org/haskellwiki/New_monads/MonadSupply
22:18:03 <sorear> have you heard of the new wiki before?
22:18:30 <stepcut> yes :)
22:18:47 <stepcut> similar to MonadSupply, but with peek and poke
22:19:22 <sorear> poke sounds destructive
22:19:31 * sorear longs for ungetc
22:20:00 <stepcut> sorear: :p
22:20:42 <stepcut> better names might have been, peek, push, and pop
22:21:09 * sorear isn't the kind of archhacker who thinks of reading as popping
22:21:30 <sorear> though I have seen the trick before ... stc forths
22:21:45 <stepcut> in terms of what to understand first -- it depends on your goals
22:21:46 <sorear> ret to fetch-sim-opcode
22:22:14 <sorear> why isn't consumer a State(T) ?
22:22:29 <stepcut> you probably do not need to understand anything in haskell-xmpp if you just want to merge the lambdabot-xmpp with the new lambdabot
22:22:48 * sorear runs haddock in haskell-xmpp
22:23:34 <sorear> Synopsis:       A library that does useful stuff
22:23:39 <sorear> hehehe.
22:24:01 <stepcut> the Xmpp.hs in lambdabot is not very friendly to understand, but it is simple in concept. It just acts as a translator between lambdabots IRC centric view of the world and xmpp
22:24:13 <sorear> !whatsnew
22:24:29 <stepcut> also, it does not do everything yet, like understand channel joins, etc
22:24:50 <sorear> wow, Xmpp.hs (in haskell-xmpp) is almost as long as Lambdabot.hs
22:25:20 <bos31337> @hoogle mappend
22:25:20 <lambdabot> Data.Monoid.mappend :: Monoid a => a -> a -> a
22:25:26 <stepcut> Consumer(T) is basically just a specialized instance of State(T) that has a restricted interface -- it probably could have been implement on top of StateT the same way MonadSupply is
22:26:31 <stepcut> heh, looks like Xmpp.hs has a hardcode server address to :) Should be easy to fix ...
22:26:32 <sorear> point of interest: the MTL has a completely unrestricted interface.
22:26:39 <sorear> the constructors are exported.
22:26:57 <sorear> modify_ is called modify, modify is called ... StateT
22:28:32 <stepcut> yeah, I should probably not export those :)
22:29:40 * stepcut gets ready for bed
22:29:46 <sorear> g'night
22:30:26 <sorear> stepcut: also check with newsham
22:30:37 <sorear> he is implementing SILC for lambdabot
22:31:36 <bos31337> ?src Control.Functor
22:31:37 <lambdabot> Source not found. I can't hear you -- I'm using the scrambler.
22:31:42 <bos31337> ?src Functor
22:31:43 <lambdabot> class  Functor f  where
22:31:43 <lambdabot>     fmap        :: (a -> b) -> f a -> f b
22:34:13 <bos> what's a good way to fold over a tree?
22:34:31 <sorear> write a fold?
22:34:32 <bos> i have a simple tree of kind *, so it looks like i can't use Foldable or Traversable
22:34:47 <sorear> what does your tree look like?
22:34:53 <sorear> I've seen:
22:35:06 <sorear> data Prop = Node Int | Prop :> Prop
22:35:08 <bos> simple binary tree. data Tree = Node Tree Tree | Leaf
22:35:08 <sorear> and wrote
22:35:22 <sorear> foldProp f g (Node i) = g i
22:35:43 <sorear> foldProp f g (a :> b) = f (foldProp f g a) (foldProp f g b)
22:35:59 <sorear> if it's not a next or similar write your own fold
22:36:34 <bos> so you're using :> as an infix constructor there? new to me.
22:36:39 <sorear> if possible call it foldMap ... constructor classes considered harmful.
22:37:23 <bos> ok, clearly thinking in HOF terms isn't worth it here :-) thanks.
22:37:29 <sorear> bos: yes. it's a space saving trick.  That code I gave is from my Short Theorem Prover, and adding a fold made it 20 ch shorter.
22:37:41 <sorear> will no whitespace it is 590 ch.
22:37:57 <bos> damn. we so need advanced haskell books.
22:38:19 <sorear> advanced? like IOHCC prep?
22:39:04 <bos> no, more like "here are things that you will want to do that aren't covered in the existing intro-level textbooks."
22:40:19 <sorear> you want to write a short theorem prover?  or are you still talking about infix data constructors?
22:41:09 * glguy snores
22:41:31 <bos> sorear: neither, really.
22:41:44 * sorear is a little confused...
22:42:10 <bos> i'm in a thicket of libraries and classes, and i don't know how to do things that are perfectly natural to me in more conventional languages.
22:42:55 <bos> like: i have a tree! do i write my own fold, or do i make it an instance of some typeclass so that i can leverage other stuff down the road? if the latter, which typeclasses, and why?
22:43:26 <sorear> Data.Foldable, iff you can.
22:43:29 <bos> hence me looking at Data.Foldable and Data.Traversable, which looked applicable, but don't seem to be.
22:43:40 <sorear> Constuctor classes are harmful.
22:43:55 <sorear> Perhaps less harmful than the alternatives, but still...
22:44:40 <bos> hmm, ok :-)
22:48:16 <sorear> @users
22:48:17 <lambdabot> Maximum users seen in #haskell: 311, currently: 269 (86.5%), active: 15 (5.6%)
22:56:14 <glguy> ?losers ?
22:56:15 <lambdabot> Maximum users seen in ?: 1, currently: 0 (0.0%), active: 0 (NaN%)
22:56:27 <glguy> ?losers loserville
22:56:28 <lambdabot> Maximum users seen in loserville: 1, currently: 0 (0.0%), active: 0 (NaN%)
22:56:33 * glguy is having a blast
22:57:01 * glguy wants to take his guitar hero to best buy and play for a crowd ;)
22:57:23 <glguy> sorear: there?
22:58:32 <base_16> glguy: guitar hero 1 or 2?
22:58:36 <glguy> 2
22:58:45 <glguy> I love 1 also , however
22:58:50 <glguy> I just don't play it as much anymore
22:58:57 <base_16> i've played 2 for a little bit
22:59:20 <base_16> but i'm too cheap to buy them
22:59:20 <glguy> My brother an I are playing Hard mode to get gold stars
22:59:23 <base_16> it's kind of expensive
23:00:21 <sorear> glguy: pong
23:00:38 <glguy> sorear: is the list page of hpaste still legible for text browsers?
23:00:42 * sorear was trying to digest XMPP info
23:00:45 <sorear> !paste
23:00:46 <hpaste> Haskell paste bin: http://kakapo.scannedinavian.com:8000/
23:00:51 <glguy> or do I need to add a delimiter and color it white for CSS people
23:01:12 <sorear> add a delimiter
23:01:18 <glguy> kk
23:01:19 <sorear> or better yet use a table
23:01:34 <sorear> and it's already light green on grey
23:01:44 <glguy> light green on grey?
23:01:48 <sorear> coloring it white wouldn't help
23:01:55 <sorear> yes
23:02:00 <bos> ?where pancito
23:02:00 <lambdabot> I know nothing about pancito.
23:02:12 <glguy> sorear: I mean that CSS people won't see the delimiter
23:02:14 <glguy> you will
23:02:23 <bos> what's lambdabot's counterpart to "where"?
23:02:31 <bos> is it "remember"?
23:02:38 <bos> or is that for quotes?
23:02:39 <glguy> where and where+
23:02:44 <glguy> quote and remember
23:02:50 <bos> ?where+ http://www.acooke.org/jara/pancito/
23:02:50 <lambdabot> Done.
23:02:56 <bos> ?where pancito
23:02:57 <lambdabot> I know nothing about pancito.
23:03:20 <sorear> glguy: why can't you use a regular html table/
23:03:21 <sorear> glguy: why can't you use a regular html table?
23:03:39 <bos> ?where+ pancito http://www.acooke.org/jara/pancito/
23:03:40 <lambdabot> Done.
23:03:46 <bos> there we go.
23:03:58 <glguy> sorear: I don't like tables, and they break my "whole row is a link" idea
23:04:03 <glguy> that's why :-p
23:04:06 <glguy> we'll see
23:04:09 <glguy> I'll play with it
23:04:19 <bos> ?where pan
23:04:19 <lambdabot> I know nothing about pan.
23:04:34 <bos> ?where+ pan http://conal.net/pan/
23:04:34 <lambdabot> Done.
23:06:24 <sorear> nice
23:20:36 <bos> ?
23:20:51 <glguy> sorear: me?
23:21:08 <bos> pancito seems nice, but it's the graphics that he produces with it that are sweet.
23:21:18 <bos> nothing like a bit of artistic flair to liven up your haskell.
23:21:36 <glguy> I think I need to redo the hpaste page to look like pan
23:23:16 <sorear> glguy: yes
23:23:27 <sorear> glguy: I thought pan was a graphics library?
23:23:44 <glguy> sorear: it is, but the graphics on the page are sweet
23:24:04 <glguy> you wouldn't be able to tell how cool without using a graphical browser
23:24:09 <glguy> and I'm being quite sarcastic
23:29:20 <glguy> sorear: I might have been put off by the front page, but the outputs from pan are quite cool
23:31:24 <glguy> sorear: when you have console only, you miss out on interesting java applets, like pajama
23:31:39 <glguy> where you can render some of thsee pictures in realtime
23:31:47 <glguy> or modify them rather
23:32:08 <sorear> I do too have X!
23:32:17 <glguy> Oh
23:32:21 <sorear> I just won't use it unless I have a very good reason
23:32:24 <glguy> ahh
23:32:30 <glguy> like smaller fonts?
23:32:31 <sorear> spjapers for instance
23:32:42 <glguy> and 256 color terminals?
23:33:00 <sorear> 16 colors is good enough, and... fbcon!
23:33:37 <sorear> my console font size is limited only by LCD screen resolution, thank you very much. :)
23:33:55 <glguy> do you make liberal use of screen(1) ?
23:34:03 <sorear> that, and I like to be able to see what I'm typing.
23:34:04 <sorear> no
23:34:19 <sorear> Alt-Fn yes.
23:34:36 <Cale> I want a programming reddit with moderators who understand what the difference between an article that's about programming and an article which is not about programming.
23:34:44 <glguy> what do you mean?
23:35:00 <Cale> me?
23:35:05 <glguy> :-p
23:35:12 <bos> there's lots of junk in p.r.c lately.
23:35:17 <sorear> Cale: yesterday, after you unbanned palomer, chanserv overruled you.
23:35:29 <glguy> That was yesterday?
23:35:32 <Cale> sorear: I noticed, there's nothing I could do about it though.
23:35:35 <glguy> Cale: did you unban him twice?
23:35:44 <bos> @hoogle ByteString -> Int -> Int -> ByteString
23:35:45 <lambdabot> No matches, try a more general search
23:35:49 <Cale> Just once.
23:36:02 <glguy> @localtime sorear
23:36:04 <lambdabot> Local time for sorear is Fri Jan 19 23:33:10 2007
23:36:56 <sorear> bos: are you looking for B.take n . B.drop x ?
23:37:00 <bos> is there an idiom for chopping a substring out of a string other than take . drop?
23:37:05 <bos> sorear: ha! got me
23:38:05 <glguy> in middle school, I drew a seirpenski's triange on paper an pencil (first 5 iterations, I believe, if not 6)
23:38:21 <bos> i guess that they just modify the offset and length, so they're efficient. never mind.
23:38:22 <glguy> it took a couple days
23:38:25 <sorear> yeah, I do that when I'm really bored
23:38:31 <glguy> (one of the pan pictures reminded me of it)
23:38:52 <glguy> I still have it laminated at my parents house
23:39:10 <sorear> although I've got a super-dense math book now, which is much better at relieving boredom
23:39:13 <glguy> teacher let me do a class on how to calculate the number of triangles in it
23:39:26 <sorear> (and to some extent replacing it with frustration)
23:48:02 <glguy> sorear: if I was going to make Format Line Numbers a GET request
23:48:07 <glguy> would it be better to:
23:48:22 <glguy> :8000/0/number
23:48:28 <glguy> :8000/0?number=true
23:48:33 <glguy> in the spirit of
23:48:42 <glguy> :8000/0/0/plain
23:48:55 <sorear> better yet, :8000/0?number
23:49:03 <sorear> I think that's the usual checkbox way
23:49:08 <sorear> also have ...
23:49:16 <sorear> :8000/0?number+plain
23:49:24 <sorear> no more ordering worries!
23:49:34 <sorear> (since q-strings are baggish)
23:49:46 <glguy> that would be ?number&plain
23:50:05 <sorear> hehehe.
23:50:07 <glguy> plain is a totally different url because it is annotation specific
23:50:13 <sorear> I am sooo out of practive
23:50:14 <sorear> I am sooo out of practicee
23:50:21 * sorear stops trying
23:50:24 <glguy> heh
23:50:28 <sorear> glguy: it is?
23:50:41 <glguy> yeah, plain doesn't list all
23:50:47 <glguy> just the specific paste
23:50:52 <glguy> not the whole "thread"
23:51:11 <glguy> why? so you can right click on it and save the file
23:51:19 <sorear> ah
23:51:30 <glguy> or in your case "D"
23:51:34 <glguy> probably
23:51:48 <sorear> d
23:52:09 <sorear> not like it really matters :)
23:55:16 <glguy> I'm going to add a delete button... and if people start abusing it I can worry about that later...
23:56:29 <sorear> I wonder if it would really be useful; pastes aren't big
23:56:44 <glguy> but it would be nice to get rid of testing garbage
23:56:53 <ski> hm, lisppastes don't expire, yes ?
23:57:15 <glguy> don't think they do
23:57:26 <sorear> lisppastes expire iirc, after 3 months after most recent annotation
23:57:38 <ski> aha
23:57:42 <sorear> that's why lisppaste hosted code has lots of annotations
23:57:54 * ski grins
23:58:02 <sorear> hpastes expire after 100 pastes
23:58:34 <sorear> that was my idea and I want it to stay :)
23:58:52 <glguy> that was your idea?
23:58:58 <sorear> I think so
23:59:32 <glguy> I don't actually remember, so you are probably right
