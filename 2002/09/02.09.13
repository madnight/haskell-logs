00:00:06 <Pseudonym> Nice.
00:00:14 <jemfinch> he can next commands arbitrarily, it's pretty fun :)
00:00:34 <Pseudonym> So I shouldn't do system "rm -rf ~", then?
00:00:43 <Pseudonym> With an @ in there, obviously.
00:00:48 <jemfinch> you don't have the capabilities for him to execute it :)
00:00:52 <jemfinch> he's pretty secure.
00:00:53 <Pseudonym> Damn.
00:01:02 <jemfinch> @calc 0xDEADBEEF
00:01:02 <supybot> jemfinch: OverflowError: float too large to convert
00:01:10 <jemfinch> hmm.
00:01:12 <Pseudonym> @eval 1+2
00:01:13 <supybot> Pseudonym: Sorry, you don't have the "owner" capability.
00:01:13 <jemfinch> he shouldn't do that.
00:01:19 <Pseudonym> Ah well.
00:01:23 <jemfinch> Pseudonym: if you use @calc you can do math :)
00:01:26 <jemfinch> @eval 1+2
00:01:28 <supybot> jemfinch: 3
00:01:29 <Pseudonym> @calc 1+2
00:01:29 <supybot> Pseudonym: 3
00:01:33 <Pseudonym> Yay!
00:01:36 <jemfinch> I can eval because I'm the owner :)
00:01:41 <jemfinch> @capabilities
00:01:42 <supybot> jemfinch: [owner, #programming.op, #arstechnica.op, #linux.op]
00:02:02 <jemfinch> he has a capabilities system for determining if a user can do something.
00:02:09 <jemfinch> @help addcapability
00:02:10 <supybot> jemfinch: addcapability <name|hostmask> <capability>
00:04:14 <Pseudonym> @calc 14885392687 / 4738167652
00:04:15 <supybot> Pseudonym: 3.14159265359
00:04:20 <Pseudonym> Excellent.
00:04:23 <jemfinch> @calc 3399 + 1275
00:04:24 <supybot> jemfinch: 4674
00:04:39 <jemfinch> he's about 4674 lines of non-comment, non-blank lines of Python code.
00:04:49 <Pseudonym> Must try this in Haskell some time.
00:05:00 <jemfinch> yeah, I will be too :)
00:05:03 <jemfinch> I have fun writing IRC bots.
00:05:26 <jemfinch> it's also fun because it provides a useful framework in which to test other code.
00:05:26 <Pseudonym> Do you use a library?  Or do you hack the protocol yourself?
00:05:49 <jemfinch> except for what's included in the standard Python library, everything's written myself.
00:06:06 <Pseudonym> Right, so you use standard network code, but not standard IRC protocol code.
00:06:09 <jemfinch> I even wrote a Python implementation of the CDB database format because I needed a platform-independent dbm.
00:06:17 <jemfinch> no, I wrote the irclib myself.
00:06:21 <Pseudonym> Right.
00:07:06 <jemfinch> @cpustats
00:07:07 <supybot> jemfinch: I have taken 3.424 seconds of user time and 2.623 seconds of system time, for a total of 6.047 seconds of CPU time.  My children have taken 0.0 seconds of user time and 0.0 seconds of system time for a total of 0.0 seconds of CPU time.  I currently have 1 active thread.
00:07:14 <jemfinch> @uptime
00:07:15 <supybot> jemfinch: I have been running for 0 days, 0 hours, 38 minutes, and 57 seconds.
00:07:39 <jemfinch> he's pretty cpu intensive to start :)
00:07:54 <Pseudonym> Yeah, well, Python has to actually compile the code first, I guess.
00:07:55 <jemfinch> but I guess that's the price I pay for using Python.
00:08:09 <jemfinch> actually, it was all precompiled -- Python caches compiled bytecode.
00:08:21 <jemfinch> compilation really doesn't take much time, really.
00:08:23 <Pseudonym> Oh, interesting.
00:08:25 * Pseudonym nods
00:08:46 <jemfinch> he generally averages about .4 seconds an hour if he's running for any significant amount of time.
00:09:33 <jemfinch> I wrote a similar bot (twice!) in O'Caml prior to him.
00:10:32 <jemfinch> and prior to that, I wrote a bot in Python -- so I've gone from Python -> O'Caml and back to Python :)  Hopefully, I'll go to Haskell next :)
00:10:36 <jemfinch> writing IRC bots gives me a non-trivial program to test my knowledge of a language on, and a nice framework to test new stuff as I learn it.
00:10:42 * Pseudonym installs an irc server
00:10:55 <jemfinch> why's that?
00:12:58 <Pseudonym> So I can play with the IRC protocol without putting weird entries in someone else's logs.
00:13:50 <jemfinch> hehe...don't worry, irc servers probably don't log much of anything...it'd be too intensive.
00:14:45 <jemfinch> here's a great, unreadable command:
00:14:55 <jemfinch> eval `(lambda irc=irc, f=lambda f, irc=irc: schedule.addEvent(time.time()+300, f) or irc.queueMsg(ircmsgs.IrcMsg("PRIVMSG #coderforums :Haskell r0x0rs!!!")): f(f))()`
00:16:06 * Pseudonym laughs
00:18:10 <jemfinch> he has a scheduling mechanism, but I haven't made a command to schedule things -- so I abused lambda and default arguments to a function to make a recursive function that schedules itself again every 200 seconds to say "Haskell r0x0rs!!!" on that channel :)
00:22:34 <jemfinch> well, Pseudonym, thanks for all the help -- I'm gonna be working on Haskell a bit over this next week (I'm on vacation for a week)
00:22:40 <Pseudonym> Not a problem.
00:22:43 <Pseudonym> See you later.
00:23:15 <jemfinch> vale, amice :)
01:04:05 <norpan> howdy ho
01:04:13 <ski> hi
03:30:20 * shapr bounces
03:31:26 * delYsid bounces too
03:31:45 <shapr> hi delYsid!
03:32:25 <delYsid> I can finally even hit C-M-x on that display
03:32:29 <shapr> yay!
03:33:13 * delYsid wonders if future cell-phones will have a dabbrev-expand key :)
03:33:36 <shapr> I hope so
03:34:48 <delYsid> hmm, I just received a phonecall from fujitsu
03:35:02 <delYsid> They confirmed, one can really buy no lifebook with crusoe in Europe
03:35:17 <shapr> suckage
03:35:23 <delYsid> yup
03:35:29 <shapr> I wonder why
03:35:35 <delYsid> I was tempted to tell him, "well, then I'll buy a VAIO" :)
03:35:44 <shapr> you should have said tha
03:35:45 <shapr> t
03:36:23 <delYsid> heh, as soon as I have a laptop for that display, /me is se evil mobile hacker :)
03:36:29 <shapr> w00
04:37:17 --- topic: set to 'ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.2.3 released http://www.cse.unsw.edu.au/~chak/nepal/ || welcome jadrian! our 30th concurrent user! yay! we're growing!' by shapr
04:45:44 <shapr> hi ChoJin
04:45:47 * shapr bounces
04:45:54 <shapr> my vacation starts tomorrow, yay!
04:46:11 <ChoJin> hi
05:10:27 <Jii> aloha
05:10:36 <shapr> hi Jii!
05:10:38 <shapr> what's up?
05:11:05 <Jii> autumn is coming, eventually!
05:11:13 <shapr> that's true
05:11:15 <Jii> how is it up there, north?
05:11:22 <shapr> getting cold :-/
05:11:36 <Jii> friend of mine just demoed plone and i was impressed :)
05:11:47 <Jii> i remember that you were enthusiastic about plone?
05:11:59 <shapr> yah, plone rocks
05:12:29 <Jii> i just needed a context for it to make sense
05:12:57 <Jii> (this is probably not the right channel to discuss about plone, though :-)
05:13:01 <shapr> heh
05:13:09 <shapr> either #zope or #plone might be better
05:14:19 <Jii> are you on both? :)
05:14:27 <shapr> yup
05:34:05 <olczyk> I need help building 'hat'.
05:34:24 <shapr> what's the problem?
05:34:40 <olczyk> First:
05:34:49 <olczyk> using ghc-5.04
05:34:56 <olczyk> hat version 2.00
05:35:41 <olczyk> have hugs can't find version.
05:36:01 <olczyk> I get a compilation error Can't find module IOExts
05:37:29 <Igloo> Doesn't hat 2 explicitly say you can't use GHC 5.04?
05:41:35 <shapr> yes
05:41:44 <olczyk> Sigh. Yes.
05:41:50 <shapr> er, wait...
05:41:58 <shapr> I think I've built hat2 with ghc5.04
05:42:23 <shapr> olczyk: IOExts is in one of the packages, try adding -package data to the build line?
05:42:36 <olczyk> How about the CVS?
05:49:04 <olczyk> -package doesn't seem to work.
05:50:15 <olczyk> It's already in the compilation line, but adding it somewhere else causes a different error.
05:50:37 <shapr> hmm
05:50:46 <norpan> -package lang
05:50:49 <norpan> for IOExts
05:51:00 <shapr> I'm doing for-pay Python work right now, but I'll try to compile hat 2.00 later today if I have time.
05:52:21 <norpan> olczyk: you have to have a -package flag for each package you use, for instance ghc -package data -package lang -package text -package util
05:53:18 <olczyk> shapr: OK.
05:55:28 <olczyk> norpan:  The Makefile is pretty funky. So it's hard to get everything where it should go, but I will give it a try.
05:55:42 <norpan> don't you just love funky Makefiles :)
05:55:51 <norpan> I should try to compile hat for ghc 5.04 myself
05:56:50 <olczyk> Trey mozilla. Gaah.
06:00:26 <olczyk> What does +CTS -package lang -CTS mean?
06:01:11 <shapr> since +RTS foo -RTS is for the Run Time System
06:01:22 <shapr> I would guess that CTS stands for Compile Time System ?
06:01:35 * olczyk new to hmake
06:01:41 <shapr> hmake is nifty
06:02:05 <shapr> olczyk: haven't see you post any new stuff to TheWiki lately, what have you been up to?
06:03:16 <olczyk> Which Wiki? Too many Wikis too little time.
06:03:24 <shapr> WardsWiki
06:03:32 <shapr> TheOriginalWiki
06:04:18 <olczyk> Dropped out after a while. It seems togenerate l;ittle new good stuff and lots of junk.
06:05:54 <norpan> i get som parse error in PreludeBasic.hx with ghc 5.04 and hat 2
06:07:47 <norpan> which is a generated file
06:08:13 <shapr> if you look on the hat-users mailing list, it's not quite perfect at parsing Haskell
06:12:45 <norpan> yes, but this is in the build process of hat :)
06:13:22 <shapr> oh
06:13:31 <shapr> maybe it is totally broken with ghc5.04 then :-/
06:14:07 <Igloo> The "not" is even in bold...
06:14:10 <norpan> well, hopefully not totally broken
06:14:32 <Igloo> Why not try with 5.02?
06:14:40 <norpan> Igloo: i know it works with 5.03
06:14:42 <norpan> 5.02
06:14:51 <norpan> so i don't have to try that :)
06:14:57 <Igloo> So what are you trying to achieve?
06:15:12 <norpan> i'm trying to compile hat to use with my ghc 5.04 system
06:15:53 <Igloo> Despite the fact it explicitly says "5.00 (but not 5.04)"?
06:16:12 <norpan> where does it say that?
06:16:18 <Igloo> http://www.cs.york.ac.uk/fp/hat/requirements.html
06:16:41 <norpan> ok, must be put there recently, i downloaded hat before 5.04 was out :)
06:17:07 <Igloo> Ah, OK  :-)
06:17:17 <shapr> I really like the hat symbol
06:17:32 <norpan> well, if it's documented that it doesn't work, then maybe i should wait for the next release instead :)
06:17:38 <shapr> I think it's a northern Lappish Sami tribal symbol
06:18:26 <Igloo> I'm slightly surprised they haven't releasd a new version yet
06:20:28 <norpan> Well, yes, I won't downgrade ghc 5.04 just to use hat
06:21:32 <shapr> hat is very useful, I hope they get a new version out soon
06:21:45 <shapr> is there some other kind of Haskell debugger?
06:21:55 <norpan> unfortunately i am often using ghc extensions
06:48:24 <BlizzNL> 'lo
06:48:30 <shapr> hiya BlizzNL
06:48:31 <shapr> wassup?
06:48:42 <BlizzNL> nothin' just cruising
06:56:45 <BlizzNL> shapr: You aren't into the catamorphisms and stuff, or are you?
06:56:53 <shapr> nope
06:57:05 <shapr> I have no idea what one is
06:57:13 <shapr> I'd like to learn, but now is not a good moment.
06:57:16 <BlizzNL> mmm you should give it a look. It's great .. 
06:57:41 <BlizzNL> Ow you should read 'Sorting Morphisms' by Lex Augusteijn available on the web
06:59:04 <shapr> I don't even know what a morphism is.
07:03:37 <BlizzNL> It mean some like : 'being of a certain form' 
08:21:57 <shapr> I have a sudden urge to make a #haskell cafepress store...
08:22:34 <shapr> specifically, I want the t-shirt mentioned here: http://haskell.org/wiki/wiki?QuotesPage
08:23:07 <shapr> anyone have a nice graphical depiction of the Hindley-Milner principal-type algorithm?
08:28:51 <shapr> I should email Pseudonym, he'd probably know where I could find a nice HM graphic.
08:53:42 --- topic: set to 'ANNOUNCE: GHC version 5.04.1 released || ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.2.3 released http://www.cse.unsw.edu.au/~chak/nepal/' by shapr
08:53:50 <shapr> yay! ghc 5.04.1 !!!
08:54:14 * shapr bounces happily about 5.04.1
08:56:51 * cleverdra wonders if this one will compile.
08:57:20 * shapr downloads
09:15:50 <shapr> hiya BlizzNL
09:16:06 <BlizzNL> shapr: 'lo shapr
09:16:13 <shapr> new GHC released today
09:16:16 <shapr> 5.04.1
09:16:35 <BlizzNL> I have to admit I never used anything else but Hugs
09:16:45 <shapr> GHC is nice.
09:16:58 <BlizzNL> GHC is a compiler, right?
09:16:58 <shapr> I like to use both of them
09:17:03 <shapr> yup it is
09:17:15 <BlizzNL> so it creates a executable?
09:17:19 <shapr> yes it does
09:17:23 <BlizzNL> wow :)
09:17:30 <shapr> it also has an interactive interpreter
09:17:45 <shapr> Haskell binaries are pretty good.
09:17:59 <shapr> they're not as fast as C or OCaml, but they're faster than Python for sure.
09:18:12 <BlizzNL> IC I'll give it a go 
09:18:18 <o3> shapr: depends what you're doing ... some algorithms in haskell can be fast
09:18:18 <Igloo> Oh, cool, I was wondering when that would make it. Now if only hat would follow suit  :-)
09:18:30 <Igloo> shapr: Depends what you are doing
09:18:31 <shapr> Igloo: try compiling hat2 with .1
09:18:45 <shapr> might work
09:18:55 <o3> we had a first-year student who found optimal travelling salesman in haskell with ghc; his solution took two seconds to run for 7 cities, i think.  (no idea what algorithm he used)
09:18:57 <shapr> I won't have time to try that till I'm back from greece though
09:19:11 * Igloo hasn't got time right now
09:19:17 <shapr> nor do I
09:19:18 <Igloo> IO in Haskell is particularly bad
09:19:27 <shapr> I wish there were some way to speed it up.
09:19:56 <shapr> I think we've had this discussion before... I don't remember the conclusion though.
09:21:33 * BlizzNL is leaving for his favorite soccer team to play.. I'll see you guys (I don't expect a girl, if there is I'll apologise) later
09:22:08 <Igloo> Technically there is as my girlfriend is looking over my shoulder, but I don't think that really counts  :-)
09:22:19 * shapr grins
09:22:21 <BlizzNL> Igloo : definitely not ;)
09:58:54 * shapr bounces
09:59:23 <jemfinch> shapr: did you stop using Python entirely?
09:59:37 <shapr> nah, I'm writing Python right now.
10:00:15 <shapr> though I only write Python for-pay
10:00:17 <shapr> same with Java
10:00:27 <shapr> Haskell I do because I enjoy it.
10:00:44 <shapr> I like Python also, but I wish to become as fluent in Haskell as I am in Python.
10:01:04 <shapr> jemfinch: have you stopped writing OCaml?
10:01:40 <jemfinch`> shapr: I just noticed you didn't hang out in #python anymore.
10:02:15 <shapr> well, a) that channel has lots of fun, entertaining, and especially *distracting* traffic
10:02:29 <shapr> and b) I'm trying to concentrate on thinking in Haskell
10:02:34 <jemfinch`> oooh...that's definitely true :)
10:02:44 * Igloo wonders if we should be insulted by (a)  :-)
10:02:47 <jemfinch`> so you like Haskell?
10:02:52 <shapr> jemfinch: yah, it rocks
10:03:01 <shapr> Igloo: nah, shouldn't be insulted by (a)
10:03:02 <jemfinch`> Igloo: it's more of a compliment, most irc channels are dreadfully boring.
10:03:18 <jemfinch`> shapr: I'm *definitely* liking the look of it...I'm learning it, slowly.
10:03:28 <Igloo> jem: I was refering to the inference that #haskell is a dreadfully boring channel
10:03:33 <shapr> Igloo: I joined opn#python when there were eight users, after migrating from efnet
10:03:48 <jemfinch`> Igloo: oh.  Well, I dunno :)
10:03:50 <shapr> so I think I had a big influence on the channel culture there
10:04:11 <shapr> I joined efnet#python when it had eleven users, and was there till I migrated here
10:04:20 * shapr has been on IRC forever
10:04:41 <jemfinch`> shapr: have you written significant amounts of code in Haskell yet?
10:04:53 <shapr> um, what do you consider significant?
10:04:54 <Igloo> It's only a matter of time before there are ethernet sockets in the womb
10:05:00 <shapr> jemfinch: you know Twisted?
10:05:06 <toadx> shapr is idle for 00:00.16, on since 05:48:56 09/12/02 <-- I would hardly call 'since yesterday' forever
10:05:06 <jemfinch`> shapr: what do *you* consider significant? :)
10:05:09 <shapr> Igloo: I want mine now!
10:05:09 <jemfinch`> shapr: yes, I do.
10:05:15 <shapr> toadx: hah :-)
10:05:35 <Igloo> I kind of assumed you'd grown out of wombs  :-)
10:05:44 <shapr> jemfinch: I've written Banana.hs, and want to write Jelly.hs and PB.hs ... you wanna help? :-)
10:05:46 * toadx biggest haskell project to date is 350 lines :)
10:06:03 <jemfinch`> shapr: hmm.  Which one is Banana, again?
10:06:23 <shapr> jemfinch: twisted.spread has three layers, banana is the bottom, then jelly, then pb
10:06:28 <jemfinch`> shapr: I'm not really inclined to help only because I don't use Twisted :)
10:07:00 <shapr> jemfinch: would allow publishing of Haskell web services through Twisted
10:07:45 <shapr> not just web services, Twisted has AIM, IRC, NNTP, SMTP, etc etc etc
10:08:22 <Igloo> Mine is "4452 total", not including sub programs that build other bits of it
10:08:37 <shapr> jemfinch: other than that, I've written Mandelbrot.hs, which is not large.
10:08:37 * Igloo should sort that out and put it on the web
10:08:42 <shapr> Igloo: yah, do it!
10:09:03 <shapr> jemfinch: what are you looking to write?
10:09:32 <jemfinch`> shapr: my general modus operandi when learning a new language is to write some more trivial test programs (like programs to read in a dictionary and print out the anagrams in the dictionary) and then write an IRC bot in the language.
10:09:49 <shapr> jemfinch: I'm convinced I can do more in Haskell than in any other single language, but I'm also convinced that I can do even more if Haskell can talk to other languages as peers.
10:10:23 <shapr> cool, I'm up for a Haskell irc bot.
10:10:30 <shapr> you have a public CVS somewhere?
10:10:41 <jemfinch`> shapr: I just started learning Haskell 2 days ago :)
10:10:50 <shapr> so? you learn fast :-)
10:10:52 <shapr> I've seen it.
10:10:53 <jemfinch`> it'll be a bit before I'm ready to write an IRC bot :)
10:11:16 <shapr> ok, I'll wait.
10:11:25 <jemfinch`> there's a lot to learn in Haskell -- Monads in particular are going to take me some extreme mind-bending to get working.
10:11:38 <jemfinch`> (working in my head, that is)
10:11:45 <shapr> the moments that I understand Monads they're just cute and nifty tricks.
10:11:57 <shapr> the rest of the time I'm not really sure what to do with them.
10:12:40 <jemfinch`> hehe...I'm most interested in these "Monad transformers" that let you make interpreters with swapable capabilities.
10:13:03 <jemfinch`> like, "hey, I want my language to be lazily evaluated instead of strictly evaluated!"  "Well, swap out your strict monad for your lazy monad and you're set."
10:13:09 <shapr> isn't that true of any combinator system?
10:13:20 <shapr> or is it?
10:13:33 <shapr> yah, I want to be able to write custom languages also.
10:13:43 <shapr> that's one reason I chose to learn Haskell.
10:14:06 <jemfinch`> I don't know...I suppose it would be possible with ML's functors, assuming the implementation had higher-order functors (just about every implementation does)
10:15:06 <shapr> I've been tempted to learn OCaml, I'd like to know how you compare OCaml and Haskell.
10:15:16 <jemfinch`> O'Caml is ugly.
10:15:22 <jemfinch`> Haskell isn't :)
10:15:24 <shapr> the main benefit I see in OCaml is execution speed
10:15:50 <toadx> Clean has good execution speed, and Haskell-like syntax... just not libraries :(
10:15:52 <shapr> and possibly increased portability.. I know GHC isn't very portable.
10:16:02 <jemfinch`> And O'Caml is a much more imperative language than Haskell.  My mind didn't bend nearly as much learning O'Caml as it will bend while I'm learning Haskell (that's a plus for Haskell, not O'Caml, I like to learn when I learn a new language)
10:16:08 <cleverdra> toadx - or open source, IIRC.
10:16:23 <toadx> cleverdra: the 2.0 compiler is now GPL
10:16:34 <shapr> jemfinch: yah, mind bending was one of my requirements, that's why I'm going for Mercury after Haskell.
10:16:51 <shapr> I'm trying to cover all the major paradigms
10:16:58 <jemfinch`> shapr: O'Caml is also a strange platform for research -- they added polymorphic recursion in a *minor* release!
10:17:02 <cleverdra> toadx - indeed?  I'd better take another look.
10:17:37 <cleverdra> shapr - have you gotten to logical programming, yet?
10:18:20 <toadx> cleverdra: well, its dual licensed, LGPL for non-commercial stuff...
10:18:53 <cleverdra> toadx - tth.  Nevermind.
10:19:30 * jemfinch` has to go move.
10:19:40 <jemfinch`> I haven't even packed my stuff yet.
10:20:03 <jemfinch`> shapr: I'd love to take a look at your Banana.hs when I get back from vacation in a week.
10:20:27 <shapr> http://purl.org/net/shapr/src/haskell/
10:20:44 <shapr> jemfinch`: or look in Twisted CVS tree under TwistedHaskell
10:21:26 <shapr> it's not very exciting, the most exciting part was going from Haskell Double to IEEE 754 Double Precision format
10:21:38 <jemfinch`> why'd you do that?
10:22:09 <shapr> because banana.py uses python's struct.pack with a network order double to transfer floating point numbers.
10:22:41 <jemfinch`> hmm.
10:22:45 <shapr> so I had to figure out exactly what that meant, and then get one of those from a GHC Double
10:22:56 <shapr> there's probably an easier way to do it, but I couldn't find it at the time.
10:23:21 <jemfinch`> is that even guaranteed to be the same on every platform?
10:23:42 <shapr> what, GHC Double? yes.
10:23:53 <jemfinch`> shapr: I mean, if I struct.pack a double on my computer, will a different computer with a different underlying float representation read it exactly the same?
10:23:59 <jemfinch`> (in Python)
10:24:07 <shapr> yah, they better...
10:24:21 <shapr> it's an IEEE 754 Double Precision floating point number.
10:24:27 <shapr> in network order even
10:24:36 <jemfinch`> hmm...ok.
10:24:45 <shapr> if they don't read that correctly, half the C programs out there won't compile on it
10:24:55 <jemfinch`> I really do have to move...I was supposed to start at 1pm and now it's 1:30 and I haven't even packed :)
10:25:10 <shapr> dude, you better go :-)
10:25:17 <jemfinch`> :)
10:25:23 <jemfinch`> seeya'll later.
10:25:31 <shapr> seeya!
11:24:51 <Igloo> Oh, cool, looks like work is being done ot make GHC easier to bootstrap
11:27:21 <shapr> how so? you have urls?
11:27:57 * Igloo goes to find one
11:29:06 <Igloo> http://haskell.org/pipermail/cvs-ghc/2002-September/015195.html (and other messages)
11:31:31 <shapr> wow, spiffy!
11:32:20 <shapr> iirc, readline is GPL only, so I think we'd have to rewrite it in Haskell to make GHC fully lGPL
11:33:14 <Igloo> GHC is BSD isn't it?
11:33:43 * shapr doesn't remember
12:43:02 <Dalroth> http://www.illmitch.com/
12:43:40 <cleverdra> Readline isn't very difficult to rewrite, fortunately.
12:44:28 * cleverdra has done it in scheme, albeit partially (horizontal scrolling).
12:47:11 <cleverdra> http://www.shiro.dreamhost.com/scheme/vault/readline-0.1.tgz -- but I need to send shiro 0.2, which is quite a bit cleaner.
12:47:28 <cleverdra> (and that's public-domain)
13:10:13 <norpan> hi all
13:51:27 <engstad> In type theoretical papers, what does the symbol, upside-down "T" mean?
13:53:23 <norpan> engstad: bottom
13:53:30 <norpan> engstad: either non-termination or error
13:54:03 <norpan> type-theoretical equivalens of false
13:56:53 <BlizzNL> engstad: This subject and why it exists in Haskell's type system is explained very well in 'A gentle introduction to Haskell'.. Start reading at page 12
13:59:57 <norpan> Well, bottom is not explicitly in the haskell type system, the closest you get is forall a.a
14:01:52 <norpan> or, any type can have the value bottom
14:02:06 <norpan> but you can't give the value bottom explicitly
14:02:58 <Igloo> How does undefined differ?
14:03:25 <norpan> Igloo: undefined is a function which gives an error, so you can call that value bottom
14:03:43 <norpan> as you can with error x or any non-terminating function
14:04:29 <norpan> but the value is not really in the system, it's more of an exceptional event
14:15:43 <tmoertel> Chilli: are your computers building 5.04.1 RPMS right now ?
14:18:14 * tmoertel doesn't want to torture his computers w/ the massive 2-times build if Chilli is already torturing *his* computers with the massive 2-times build ;-)
14:21:52 <hdaume> hey all...any java gurus present?  :)
14:22:11 <sethk> Semi-guru.  What's up?
14:22:31 <BlizzNL> are there any ana-catamorphism gurus in the house tonight ?
14:22:50 <hdaume> i have a textpane.  i want it so that when you click the right mouse button on it it moves the caret to the location it would have moved the caret to had you left-clicked.
14:23:21 <sethk> What else should happen on a right click?
14:23:29 <sethk> Or just move the cursor?
14:23:40 <hdaume> also pop up a menu, but it needs to move the caret first
14:24:07 <hdaume> (or at least i need to know where the caret *would* have been moved, even if it doesn't eally move it there)
14:24:27 <hdaume> something like .getCaretPositionAt(int x,int y) would be nice :)
14:24:33 <sethk> Well, actually the more difficult part is the location; once you know the loc you can move the caret.
14:24:40 <hdaume> yeah :)
14:25:19 <sethk> Let me ask some of the guys in the office who do more GUI than I do ... give me a few minutes.
14:25:26 <hdaume> okay...thanks a ton
14:27:09 * hdaume now remembers why he gave up java for haskell in the first place
14:30:57 <olczyk_> How do I convert a int to a string?
14:31:54 <redcrosse> show n
14:31:58 <redcrosse> works for me
14:39:18 <engstad> Hmm, I need ghc to compile ghc...
14:39:48 <olczyk_> Something I'm getting very confused about... how does the compiler know you've reached the end of the block?
14:40:09 <engstad> Indentation.
14:40:29 <sethk> The concensus is that the proper guru is at lunch but due back within 1/2 hour.
14:40:29 <sethk> Actually I've done this and I could hunt up the code, but it isn't here, it is back at my main office.
14:41:29 <olczyk_> Pythonlike yuch.
14:41:55 <engstad> olc: if you don't like it, you can use {}'s and ;'s.
14:42:55 <olczyk_> Yeah but I still gotta *read* it and modify it if someone else doesn't use them.
14:43:11 <sethk> hdaume: Yes, I try to get away from it (Java) when possible...there must be a better way, or a less worse way
14:43:20 <engstad> olc: Well, see, I've used C/C++ for about 20 years now, and I had no problem with it. I kind of like it. :-)
14:43:37 <sethk> Oh, it's better than C++...
14:44:08 <sethk> It's better than PDP-11 assembly language also...
14:44:12 <olczyk_> At least with lisp you have () or (progn ) ( depending on how you look at it ).
14:44:16 <engstad> Be careful with the word "better", sethk. C++ is better for some things.
14:44:22 <olczyk_> I gave up Python for Ruby because of it.
14:44:36 <sethk> I know, actually, I use it every day.
14:44:53 <engstad> sethk: ;-)
14:45:31 <engstad> Is there a {;} tool for haskell?
14:46:29 <engstad> That way, olczyk_ could be happy by filtering other people's code first. :-)
14:51:28 * shapr bounces
14:53:14 * shapr boings
14:53:52 <shapr> tmoertel: I have a very random question... would you happen to know where I could find a graphic depiction of the Hindley-Milner principal-type algorithm?
14:59:41 * shapr bounces
15:11:34 * BlizzNL says goodbye : See you guys tomorrow
15:11:48 * shapr is tired.
15:24:41 <sethk> Anyone interested in a data statement question?
15:27:27 <shapr> sethk: go for it
15:27:58 * shapr reads up on entry admissions for luth.se
16:12:37 <hdaume> sure
16:12:43 <shapr> sure what?
16:13:14 <hdaume> sure to sethk's q
16:13:30 <hdaume> i think i got logged off ... oh, he's gone anyway :)
16:15:20 * shapr reads up on the tetration operator
16:16:24 <redcrosse> that sounds like another name for someone operating torture devices
16:17:17 <shapr> you're probably right
16:17:28 <shapr> but in this case, math professors are the operators
16:17:36 <shapr> er, torturers, or whatever
17:14:26 <clinton> has anyone used the munster curry compiler? for some reason 'print' is undefined. Anyone know why?
17:15:04 * shapr hasn't tried curry yet
20:04:04 <olczyk> Does someone know how to use the trace command of ghc?
21:02:58 <sethk> I do, if you are still here
23:08:46 <clinton> has anyone used curry here? I want to solve "a + 3 =:= 5" for a, but the function always 'suspends'.
23:30:52 <olczyk> sethk: Passed out for a while but I'm not sure when you were.
23:52:04 <olczyk> here.
