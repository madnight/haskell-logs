00:25:19 <lambdabot> I live.
00:25:36 <Pseudonym> Excellent.
00:57:32 <andersca> hey Marvin--
00:58:05 <Marvin--> morning
03:25:37 <norpan> hi all
06:02:08 <tmoertel> good morning
06:03:00 <ChilliX> Morning tmoertel!
06:03:27 * tmoertel debates -- coffee or tea ?
06:03:45 <ChilliX> Life does present tough choices!
06:04:28 <tmoertel> ChilliX: Your RPMs of GHC 5.04.1 appear to work just fine on both RHL 7.3 and 7.2.
06:04:37 <ChilliX> cool
06:04:52 <ChilliX> RH7.2 and RH7.3 are very similar
06:06:52 <tmoertel> I found a minor issue with ghc-docs. The links to the User Guide and the haddock docks in /usr/share/docs/ghc-doc-5.04.1/docs/index.html are broken.
06:07:14 <ChilliX> yeah, I know
06:07:27 <ChilliX> the spec file in CVS is better in that regard
06:07:47 <tmoertel> once again, you're one step ahead of me! ;-)
07:29:06 <ChilliX> hmm, that was quick: already found the first serious show stopper in GHC 5.04.1
07:29:12 * ChilliX sighs deeply.
07:32:57 <norpan> ChilliX: the show aint over 'till the fat lady sings.
07:37:36 <ChilliX> In this case, the show is over for C->Haskell on GHC 5.04.1
07:39:25 <Igloo> How come?
07:39:59 <ChilliX> deriving Read for types that contain Maybe fails utterly for GHC 5.04.1
07:40:18 <ChilliX> well, c2hs derives Show and Read to read and write .chi files
07:40:18 <tmoertel> ack!
07:40:39 <ChilliX> on the first .chi you try to read, you get a "no parse"
07:40:49 <ChilliX> not very useful
07:40:51 <Igloo> Ah
07:41:11 <tmoertel> ChilliX: I have types that derive Read and Show, and they seem to work. Can you be more specific?
07:41:36 <ChilliX> Try:
07:41:37 <ChilliX> module Main
07:41:38 <ChilliX> where
07:41:38 <ChilliX> data T = C (Maybe Int) Int
07:41:38 <ChilliX>        deriving (Show, Read, Eq)
07:41:39 <ChilliX> main = 
07:41:41 <ChilliX>   do
07:41:43 <ChilliX>     let v = C Nothing 1
07:41:45 <ChilliX>     print v
07:41:47 <ChilliX>     print $ read (show v) == v
07:42:29 <ChilliX> 5.04 works, 5.04.1 not
07:42:49 <ChilliX> (for me, anyway)
07:44:23 * tmoertel compiles
07:45:02 <tmoertel> "Fail: Prelude.read: no parse"
07:45:13 <ChilliX> that's what I get, too
07:45:24 <ChilliX> not the expected behaviour, I would say
07:45:37 <tmoertel> not expected, indeed
07:45:43 <ChilliX> already submitted it to the sf.net bug tracker
07:45:57 <ChilliX> very annoying
07:48:09 <tmoertel> interesting: it works for data T = C { a :: (Maybe Int), b :: Int } deriving (Show, Read, Eq)
07:48:31 * tmoertel suspects that why my code works properly
07:48:44 <ChilliX> I suspect that it is due to the Nothing separated from the next argument by only a space
07:48:58 <ChilliX> and not a punctuation symbol
07:49:11 <ChilliX> that would explain the difference with field labels
07:50:18 <ChilliX> hmmm, but it is a very interesting observation, because it might give me an easy way to work around the problem in c2hs
07:50:24 <ChilliX> so, thanks for the tip!
07:50:51 <tmoertel> glad I could be of assistance
07:51:15 <ChilliX> :-)
07:51:28 <ChilliX> but this has to wait 'till tomorrow
07:51:36 <ChilliX> I am going to sleep first
07:51:37 <ChilliX> 'night
07:52:40 <tmoertel> night
08:26:39 <andersca> hey norpan
09:12:58 <shapr> greek islands are not conducive to studying papers on monads
09:13:06 <andersca> hey hey shapr
09:13:19 <Igloo> You want to get your priorities straight, young man!
09:14:12 <shapr> bah, it's bea who wants to vacation, I'm just being nice and tolerating the sun....
09:14:56 <shapr> hi Igloo
09:15:00 <shapr> hey andersca
09:15:36 <Igloo> Hi  :-)
09:33:06 * Igloo tries to find a clean way of getting the directory the current Makefile is in
09:37:49 <Igloo> Unfortunately I'm not convinced this is possible
10:28:37 <olczyk> Is there some way to get Haskell to tell me the signature of a function?
10:28:49 <olczyk> Like the CL 'describe' command?
10:28:57 <andersca> :t ?
10:28:58 <andersca> in hugs
10:29:03 <tmoertel> olczyk: in GHC or Hugs, enter :type <expr> and prompt
10:29:13 <tmoertel> s/GHC/GHCi/
10:29:22 <andersca> Prelude> :t (+)
10:29:22 <andersca> (+) :: Num a => a -> a -> a
10:29:22 <tmoertel> s/and/at/
10:29:23 <andersca> for example
10:29:31 <andersca> Prelude> :t length
10:29:32 <andersca> length :: [a] -> Int
10:29:32 <andersca> too
10:31:16 <olczyk> How about in the middle of a large program? Say I see 'obscureFunction' in the code and
10:31:23 <olczyk> want to know it's singature?
10:31:45 <olczyk> s/ng/gn/
10:32:49 <Marvin--> oohyes...
10:33:00 <Marvin--> turtle graphics program with concurrent turtles
10:33:06 <Marvin--> less than 80 lines of Haskell code
10:33:32 <redcrosse> haskell mode will show you the sig of the function before the cursor
10:33:43 <Erwin> well, there is this auto-doc mode, if you just type 'mod' after a while the signature comes up. I don't know if it can get its information from for example an inferior haskell process
10:34:24 <olczyk> redcrose: I'm thinking of a user written function in say a fourty file program.
10:34:37 <Erwin> Looking at haskell-doc-mode docs it says something about looking up local funs via imenu
10:35:12 * olczyk feels sad that he keeps moving the goal posts. Should say exactly what he wants in the first place.
10:36:36 <redcrosse> olczyk: not sure if it'll work on forty file programs
10:36:47 <redcrosse> olczyk: but it's finding function sigs from the prelude
10:43:36 <olczyk> OK. Another question. You have a bunch of statements.
10:43:43 <olczyk> main= statement1
10:43:48 <olczyk>    statement2
10:43:53 <olczyk>     statement3
10:44:00 <olczyk>     statement4
10:44:10 <olczyk> (sorry about the indentation)
10:44:44 <olczyk> How do I add a statement to the end that is independent?
10:45:15 <olczyk> If I add statement5, it is treated like an arguement to statement4.
10:45:26 <olczyk> I don't want that ;).
10:45:38 <olczyk> somewthing like Lisps (prog1...)
10:47:40 <Erwin> Err, this is something about monads and sequence with >> -- I have only briefly looked at that part of the book :)
10:48:48 * olczyk also wonders about a function of type m a->a.
11:02:36 <andersca> Marvin--?
11:02:41 <Marvin--> andersca: yes?
11:02:46 <andersca> Marvin--: http://carbon.hemmet.chalmers.se/Pictures/unicode-language2.png
11:02:53 <Marvin--> olczyk: you'd do main = st1 st2 st3 st4 >> st5
11:03:14 <Marvin--> andersca: heh
11:03:39 <andersca> Marvin--: I like the way to index variables by using subscripts
11:04:00 <Marvin--> andersca: I think it's too complicated to type :-)
11:04:07 <andersca> yeah, that's the problem :/
11:04:20 <Marvin--> indentation will be a problem too
11:04:35 <Erwin> Nice. How would list comprehension look then?
11:04:37 <Marvin--> what with some glyphs being wider than others
11:04:58 <andersca> Erwin: good question, lemme try :)
11:05:49 <Marvin--> when we wrote our turtle graphics program today we used a hideous list comprehension that had a case expression that resulted in IO actions et.c., really hideous :P
11:06:16 <Marvin--> then we generalized it a bit and could get rid of the filtering part, and put the case thing in a helper function so we could just do 'map transision ps' and it all looked nice and pretty
11:06:30 <Marvin--> and then we realized that sequence + map is mapM so we used that instead
11:07:59 <andersca> :)
11:11:24 <Marvin--> gotta love pretty code
11:11:49 <andersca> yeah
11:11:55 <Marvin--> now we just have to figure out how to implement the 'save state' construct
11:12:53 <Marvin--> save p is supposed to continue executing as if nothing happened, but when the program finishes, p should be run, with the state that 'save p' had
11:13:11 <olczyk> Marvin. Won't that return the wrong type? a >> b returns Type b not Type a.
11:14:19 <Marvin--> olczyk: that depends on what you want to do... main is of type IO () anyway...
11:14:43 <Marvin--> if you say "I want to do b after a" then monads is the way to go
11:14:56 <andersca> or "I don't want do do b if a fails"
11:16:02 <olczyk> I want to do something like ...
11:17:06 <olczyk> foo x y z = a b c d '>>' printToStdOut "foo finished with varaibales= v1 v2 v3 and return value=r"
11:17:25 <olczyk> the >. in quotes because that's not what I'm sure I want.
11:17:54 <olczyk> s/>/>>
11:18:05 <Marvin--> uh, so that's the definition of foo?
11:18:40 <olczyk> The normal definiton is: foo x y z = a b c d
11:18:55 <Marvin--> and the return type of foo is, say, t?
11:19:13 <Marvin--> in order for foo to print something, which is a side-effect, it *must* have the return type IO <something>
11:19:32 <olczyk> What is 'it'.
11:19:55 <Marvin--> foo
11:19:59 <Marvin--> foo :: ... -> IO t
11:20:23 <Marvin--> foo x y z = do { let r = a b c d; putStrLn "bla bla bla"; return r }
11:20:48 <olczyk> So then once you do output, everything has to live in IO?
11:20:59 <Marvin--> yes
11:21:07 <Marvin--> because input and output are side-effects
11:21:11 <Marvin--> and all side-effects have to live in IO
11:21:14 <andersca> it's weird :)
11:21:19 <Marvin--> no, it's not weird at all
11:21:22 <andersca> until you figure it out
11:21:51 <Marvin--> one of the good things with having side-effect free functions is that it doesn't matter in which order you execute them (so it's easy to parallelize the execution if you have several processors)
11:22:08 <Marvin--> but if you've got side effects, you *definitely* want the side effects to "happen" in a pre-defined order
11:22:48 <olczyk> So let's say that we want to do algebra on some group in a program ( eg implemention
11:22:52 <olczyk> quternions ).
11:23:06 <olczyk> sed/quternions/quaternions/
11:23:13 <Marvin--> then you should separate the calculations from the input/output
11:23:30 <Marvin--> have one set of functions that do calculations and one set of functions that do I/O and use the calc functions
11:23:43 <Marvin--> the calculating functions are side-effect free so they don't need IO
11:23:50 <olczyk> And so you define an function times.
11:23:57 * Marvin-- once again drools over the output of his turtle graphics program :P
11:24:08 <andersca> are you using gtk+hs? :)
11:24:32 <Marvin--> andersca: no, Yahu, it's Tk-based, but it saved me the need to install gtk+hs at MC
11:24:43 <Marvin--> andersca: gtk2+hs is supposed to be very cool, but we don't have gtk2 yet I think
11:24:55 <olczyk> And you've made a mistake. So you want to print out the inutvariables output variables and
11:25:02 <olczyk> intermediate variables.
11:25:15 <olczyk> s/inutvar/input var/
11:25:21 <olczyk> Then you are stuck in IO?
11:25:25 <andersca> Marvin--: speaking of which; I'd like to join dum ;)
11:25:25 <Marvin--> ah, you just hit the mark, haskell isn't that easy to debug
11:25:43 <Marvin--> andersca: nod nod, I can sign you up on the mailing list... One Of These Days I'm going to call for a meeting
11:25:48 <andersca> yay
11:25:57 <olczyk> What about divides. 
11:25:59 <andersca> is the mailing list high-traffic?
11:26:30 <Marvin--> andersca: not really, from time to time, but usually not
11:26:43 <Marvin--> andersca: well, the spam is high-traffic, but I assume you already filter?
11:27:00 <andersca> more or less...
11:27:19 <olczyk> where divides ( steping outside quaternions for a moment ) is divides a b c d= [ a/(abcd)
11:27:37 <Marvin--> olczyk: what do you mean?
11:27:49 <olczyk> b/(abcd) c/(abcd) d/(abcd)].
11:28:12 <olczyk> The best you can do is report that divides returns an error. 
11:28:12 <Marvin--> what about it?
11:28:34 <olczyk> Not that divides returns an error because b=0.
11:28:38 <Marvin--> oh... well... when you want error handling, there's... monads :)
11:28:44 <olczyk> Unless you design it so upffront.
11:29:07 <olczyk> Yeah but once you have an error you get stuck in the error monad for the rest of the program.
11:29:09 <Marvin--> in this case you could guard on | a == 0    = error "a is 0"; | b == 0   = error "b is 0" and so on
11:29:41 <Marvin--> well, in MonadPlus there's the mplus operator...
11:29:46 <Marvin--> and mzero
11:29:55 <olczyk> mplus: m a-> aS?
11:30:00 <olczyk> s/aS/a/
11:30:30 <Marvin--> mplus :: m a -> m a -> m a
11:30:42 <Marvin--> and mzero :: m a
11:30:52 <olczyk> You still can't recover.
11:30:53 <Marvin--> so mzero `mplus` k is supposed to be k
11:31:08 <Marvin--> i.e. mzero is to be the 'error' state
11:31:27 <Marvin--> but I confess I don't know much about error handling in Haskell
11:31:44 <Marvin--> I think there's a try function but I also think it only works on IO
11:32:18 <Marvin--> try :: IO a -> IO (Either IOError a)
11:33:08 <Marvin--> hmm, there's also catch :: IO a -> (IOError -> IO a) -> IO a
11:33:21 <Marvin--> but that's not very general... Sorry, can't help you there :(
11:33:46 <Marvin--> andersca: what address should I subscribe?
11:35:01 <andersca> Marvin--: andersca@gnu.org
11:36:01 <Marvin--> andersca: check
11:41:07 <olczyk> Thanks.
11:46:41 <Marvin--> "Tackling the awkward squad: monadic input/output, concurrency, exceptions, and foreign-language calls in Haskell"
11:46:42 <Marvin--> whoa
11:46:47 <Marvin--> Simon Peyton Jones of course ;)
11:49:15 <Marvin--> "In short, Haskell is the world's finest imperative programming language."
11:49:26 <andersca> :)
11:51:39 <Marvin--> his papers are always entertaining :) "this is a terrible example!"
11:54:05 <Marvin--> "this is a bit like using a chain saw to repair a dishwasher"
11:57:21 * tmoertel notes that he has considered using a chainsaw to repair his moderately-operative dishwasher
12:06:49 * Marvin-- does some reading on imprecise exceptions
12:09:32 <norpan> hi all
12:15:45 <Marvin--> oh, eek, ghc implements implicit variables
12:15:52 <Marvin--> (hmm, hugs does too though?)
12:16:57 <Marvin--> eerrr... linear implicit variables?
12:17:03 * Marvin-- tries to bend his mind around this one
12:23:01 <dennisb> Marvin--: John Hughes wrote a paper about global variables you might want to read
12:23:55 * dennisb is away again
12:25:04 <loom2> looked it up, http://www.math.chalmers.se/~rjmh/Globals.ps
12:25:20 <norpan> dennisb: hej hej hej!
12:26:10 <Marvin--> dennisb: yeah, I think I read it
12:26:39 <Marvin--> I think I've read about implicit variables too
12:27:42 <Marvin--> but it seems like ghc doesn't support imprecise exceptions? (yet?)
12:42:55 <andersca> dennisb: hey!
13:01:12 <toadx> I hate how kghostview does not do continuous scrolling
13:01:46 <ski> I use gv
13:02:06 <ski> What do you mean with continuous scrolling ?
13:03:45 <toadx> ski: kghostview will only show one page at a time, you can't see the bottom of one page and the top of the next page at the sime time... with continuous mode, you can
13:04:10 <ski> aha, then my viewer don't do that
13:04:14 <toadx> Acrobat Reader does it
13:04:34 <ski> yes, i know (i think it at least can be configured to do it)
13:04:57 <Marvin--> I think that's a limitation in gs...
13:05:05 <toadx> but acrobat can't view .ps files :(
13:05:07 <loom2> where can i find definitions of "rank 1" versus "rank 2" types?
13:05:12 <toadx> Marvin: i think you are correct
13:05:49 <ski> That's a little irritating,yes. But i find it more irritating that my windows version of gv at home doesn't scroll the displayed page when dragging the mouse on it (It does that at school)
13:06:38 <toadx> the other annoying thing about kghostview is that if you go to the previous page, it starts you at the top of the page instead of the bottom
13:07:17 <ski> loom2 : http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#UNIVERSAL-QUANTIFICATION
13:07:41 <ski> loom2 : does that suffice ?
13:08:40 <loom2> ski: probably yes. thanks :)
15:44:35 <olczyk> ghc, what does the operator # mean?
15:56:11 <olczyk> In ghc, what does the operator # mean?
16:01:46 <olczyk> In ghc, what does the operator # mean?
16:03:23 <olczyk> input :: String  -> IO (Maybe X)
16:04:04 <olczyk> load fname = processString # readFile fname
16:05:08 <olczyk> processString :: String ->  Maybe X 
16:05:18 <olczyk> What does # mean?
16:05:48 <Marvin--> err, good question
16:05:59 <Marvin--> I thought #'s had something to do with unboxed variables, but now I'm not so sure
16:06:25 <olczyk> Is it a keyword/operator? I couldn't find it defined in code.
16:08:23 <olczyk> I also couldn't find it in any documentation.
16:34:26 <olczyk> Have to go.
16:53:46 * Pseudonym grrrs
16:54:03 <Pseudonym> Why are IORefs not members of Ord?
19:37:38 <dennisb> olczyk is not here, but # is just a normal operator that you can define yourself. It has no built in meaning. It is used for unboxed values, so 4# is an unboxed number. But # alone is not used for unboxed things (as far as I know).
19:38:08 <dennisb> I think that in his case # is defined to be liftM (from the Monad module)
19:39:54 <Chilli> Pseudonym: what ordering would you want to use?
19:40:05 <Chilli> Pseudonym: these beasts can move in the heap during a GC
19:44:07 <Pseudonym> I don't know, really.
19:44:24 <Pseudonym> The thing is, if you want to use them for hash consing, you need to be able to look them up.
19:44:48 <Pseudonym> Say, in a FiniteMap.
19:45:18 <Pseudonym> Another option is to use a (Unique, IORef) pair, but that seems unnecessarily awkward.
19:45:56 <Pseudonym> Personally, the specific ordering is not important, so long as they are orderable.
20:01:54 <Igloo> Bah, it appears GHC needs Baz.hi when compiling Foo.lhs if Foo imports something from Bar which it in turn imports from Baz
20:14:28 <olczyk> Anyone here?
20:30:09 <ibid> yes
20:31:59 <Chilli> Pseudonym: the specific ordering is not important, I agree, but the ordering must not change
20:32:13 <Chilli> Pseudonym: which is not guaranteed for IORef's
20:33:02 <Chilli> Pseudonym: the only way that the impl could guarantee it is by using an Unique, Ref pair internally
20:34:06 <dennisb> olczyk: # is just a normal operator that you can define yourself. It has no built in meaning. It is used for unboxed values, so 4# is an unboxed number. But # alone is not used for unboxed things (as far as I know).
20:34:15 <dennisb> I think that in his case # is defined to be liftM (from the Monad module)
20:35:06 <olczyk> What does liftM do?
20:40:04 <olczyk> Btw is there any way of 'descending' back out of a Monad?
20:40:27 <olczyk> I mean that there are functions which results in arguments that are actions, 
20:40:47 <olczyk> but are there any that take an action and return a value?
20:42:35 <dennisb> olczyk: monads have a "run" method that you invoke to perform the monadic operation, there is no way to just getting rid of the monadic part
20:42:49 <dennisb> for IO there is unsafeperformIO, but it is really unsafe
20:43:04 <dennisb> but in some cases it can be used
20:43:48 <dennisb> liftM moves a computation in under the monad, just look at it's type
20:46:51 <olczyk> I saw the signature, that why I asked the second question. Which I think can be better asked,
20:47:31 <olczyk> is there a function that has signature m a->b? Dropping one back out of the monad.
20:47:51 <olczyk> It seems that there are circumstances where that would be desirable.
20:48:15 <olczyk> Otherwise once a function 'lifts' you into a monad you are stuck.
20:48:37 <olczyk> The particular circumstance I am thinking about is logging, where when you log,
20:49:00 <olczyk> you want to be lifted into a monad, but when you are done you want to go back down into the 
20:49:10 <olczyk> 'usual' state.
20:51:04 <ibid> the only way you can "get out of" a monad is to call a non-monad function inside the monad
20:51:30 <ibid> at least in the general case, and in the particular case of the IO monad (disregardin unsafePerformIO)
20:53:32 <ibid> in some particular cases (such as the Maybe monad) there is a way to move out of the monad (in the Maybe monad case, it is fromJust, but then you'd have to know that the monad value is a Just)
20:54:40 <ibid> but for example, in the list monad, which value should be returned by such a unlifting function? :-)
20:57:45 <Pseudonym> In the case of Maybe, there's always fmap.
20:58:21 <Pseudonym> It doesn't drop you out of the monad, but it lets you embed a computation.
20:58:50 <ibid> yes, well, that's true for all Functors :-)
20:58:51 <Pseudonym> In the case of logging, you might be better off using a writer monad transformer.
20:59:15 <Pseudonym> On top of whatever you like.
21:00:27 <Pseudonym> Monad transformers rock.
21:07:48 <dennisb> olczyk: short answere is no, there is no function m a -> a
21:29:47 <ibid> dennisb: in the general case :-)
21:30:07 <ibid> (in some particular cases, yes there are :-)
21:30:58 <ibid> What is true is that there is no function Monad m => m a -> m
21:31:05 <ibid> bah
21:31:09 <ibid> What is true is that there is no function Monad m => m a -> a
21:31:21 <Pseudonym> foo :: (Monad m) => m a -> a
21:31:27 <Pseudonym> foo m = error "gotcha"
21:31:31 <Pseudonym> There you are.
21:31:36 <ibid> hmm, true :-)
21:32:07 <ibid> there is no non-bottom function Monad m => m a -> a
21:32:09 <ibid> is this true? :-)
21:32:42 <olczyk> So there is nothing really predefined, but I can write one?
21:33:17 <Pseudonym> Consider this: What would the function look like for a state transformer?
21:33:33 <Pseudonym> At the very least you need to supply an initial state.
21:34:04 <ibid> olczyk: depends on the monad
21:44:51 <sethk> Hello, all (if all /= Nothing)
21:45:24 <Pseudonym> As it happens, all /= Just x too.
21:45:45 <Pseudonym> all :: [Person]
21:46:25 <sethk> Anything interesting going on?  I'm playing with HaXml tonight...
21:48:55 <sethk> Well, as the activity level is overwhelming, I'll check back in a while...
21:49:19 <olczyk> Impatient sort.
21:49:38 <sethk> Hey, life   :)
21:49:48 <olczyk> Is there a way to do handshaking in haskell?
21:50:04 <sethk> As in network communications?
21:50:15 <olczyk> One example yeah.
21:50:44 <sethk> They do some similar things in the Fudgets libraries, and probably in others that I'm not as familiar with...
21:50:49 <olczyk> Semi practical example: you want to write code that tests a server application under heavy
21:50:56 <olczyk> load.
21:51:25 <olczyk> So you write a multithreaded app that starts wach thread and then waits for a value
21:51:32 <olczyk> to be changed from false to true.
21:51:59 <olczyk> Obviously you can't wait for a variable to change, since it won't.
21:52:04 <olczyk> But can you simulate it?
21:52:31 <sethk> With concurrent Haskell you can do anything threads can do, and you have the sychronization primitives...
21:52:52 <sethk> You can control, effectively, the number of threads...
21:53:38 <sethk> And you can have a controlling thread that implements an action to simulate a variable change by, say, releasing a sychronization primitive...
21:54:20 <sethk> You don't have the fine grain thread control that you have in, say, Solaris...
21:54:53 <sethk> So you could make it work but I'm not sure how precisely you could, for your example, calibrate the load you are simulating...
21:55:24 <Pseudonym> You can use MVars to do condition variables.
21:55:33 <Pseudonym> Or there are semaphores.
21:55:58 <sethk> Yes, and you can build any other primitives from these...
21:56:40 <sethk> Is there the equivalent of read/increment as a single execution unit?
22:01:41 <Pseudonym> Sort of.  There's modifyMVar.
22:03:25 <sethk> I'll look at it.  In terms of functionality if you have atomic get/increment you can always implement any concurrency primitive.
22:04:00 <Pseudonym> Well what you can do is atomically put a value in a blank MVar.
22:04:18 <sethk> But can you change it atomically?
22:04:34 <Pseudonym> Yes.
22:05:06 <sethk> Then it can be the basis for any other primitive (someone's theorem, I forget who)
22:05:09 <Pseudonym> modifyMVar var (\x -> let x1 = x+1 in return (x1,x1))
22:06:09 <sethk> What happens when concurrent access is attempted?  An exception, or does it block, or can you choose?
22:07:25 <Pseudonym> http://haskell.org/ghc/docs/latest/html/base/Control.Concurrent.MVar.htmlhttp://haskell.org/ghc/docs/latest/html/base/Control.Concurrent.MVar.html
22:07:28 <Pseudonym> http://haskell.org/ghc/docs/latest/html/base/Control.Concurrent.MVar.html
22:07:33 <Pseudonym> Sorry, bouncy middle button.
22:07:48 <sethk> I thought maybe we had a condition variable bug there for a moment.
22:07:53 * Pseudonym laughs
22:08:05 <sethk> I'll read the docs.
22:08:35 <sethk> Hey, I've got a system crash in some time zone or another ... back in a few...
22:10:13 <Pseudonym> lambdabot: Hello.
22:10:15 <lambdabot> Sorry, I'm not a very smart bot yet.
22:10:22 <Pseudonym> It lives!
22:12:34 <olczyk> IT dies!
22:12:59 <Pseudonym> Well that's all it does at the moment.
22:17:23 * olczyk thinks cruel programmer that makes his program so that all it can do is die.
22:18:13 <Pseudonym> Well it's not very smart.  It doesn't know.
22:19:10 <Pseudonym> Well it knows how to die cleanly now.
22:20:46 --- mode: card.freenode.net set +o Chilli
22:20:46 --- mode: ChanServ set -o Chilli
22:28:11 <olczyk> Using condition variables is cheating.
22:28:24 <olczyk> For one thing they violate the spirit of the question.
22:28:56 <olczyk> For another they are overkill, there is only one thread that will modify the variable so there is really no need for synchronisation.
22:29:37 <olczyk> Third. TO implement the condition variable you have the OS create a mutable variable internallly.
22:29:52 <olczyk> In other words, you've fopped the problem off onto the OS.
22:31:39 <Pseudonym> I think that MVars are what you want.
22:32:11 <Pseudonym> You make an empty MVar, then get your worker threads to wait on it (using readMVar).  Then when all is ready, put something in the MVar, and all of the waiting threads will wake up.
22:40:45 <olczyk> No.
22:41:01 <olczyk> You've totally ignored my reasons why it is insufficient.
22:41:14 <Pseudonym> Or I didn't understand them.
22:41:28 <Pseudonym> I'm not sure why they violate the spirit of the question.
22:42:20 <Pseudonym> And personally, I don't see what the problem is with "overkill", unless the overkill solution is too unwieldy to use in simple situations.
22:43:12 <Pseudonym> But that's just my personal opinion, of course.
22:45:55 <olczyk> Can't stay awake. SO it's time to go.
22:46:01 <olczyk> Bye all.
22:49:55 <lambdabot> I'm a bit smarter now.
22:59:01 <sethk> Anyone still here?
22:59:28 <Pseudonym> Pretty much.
22:59:51 <sethk> Hi
22:59:55 <Pseudonym> G'day.
23:00:05 <Pseudonym> lambdabot: Hello.
23:00:06 <lambdabot> Sorry, I'm not a very smart bot yet.
23:00:17 * Pseudonym shrugs
23:00:39 <sethk> Fill me in on lambdabot
23:00:49 <Pseudonym> It doesn't really do anything.
23:00:57 * Pseudonym was bored
23:01:11 <sethk> I've got a system administrator like that...
23:01:15 <lambdabot> You're telling me.
23:01:33 <sethk> It has personality...
23:02:32 <Pseudonym> Not really.  It can be remote-controlled.  That's about it.
23:02:38 <Pseudonym> lambdabot: @listchans
23:02:40 <lambdabot> I am on these channels: ["#haskell"]
23:02:55 <Pseudonym> It can also do that.
23:03:30 <sethk> How is it connected to IRC?
23:03:51 <Pseudonym> hslibs/Socket
23:04:33 <sethk> One of the things I still need to learn for Haskell...
23:04:49 <Pseudonym> I didn't know how to use it until two days ago. :-)
23:05:33 <Pseudonym> As a matter of interest, has anyone else written an Haskell bot?
23:05:39 <sethk> I don't think I'll have problems, but it isn't interesting so I've been playing around elsewhere.
23:05:43 <sethk> Don't know.
23:07:27 <Pseudonym> Fair enough.  I didn't find it that interesting either.
23:08:01 <sethk> I've done more than enough socket programming for one lifetime
23:16:46 <Pseudonym> lambdabot: @listchans
23:16:49 <lambdabot> I am on these channels: ["#haskell"]
23:21:27 <sethk> Pseudonym:  I have to reboot this machine.  See you in a while if you are still awake...
23:21:57 <Pseudonym> lambdabot: @listchans
23:22:00 <lambdabot> I am on these channels: ["#haskell"]
23:22:31 <Pseudonym> lambdabot: @listchans
23:22:34 <lambdabot> I am on these channels: ["#haskell"]
23:22:48 * Pseudonym should really use somewhere else for debugging
