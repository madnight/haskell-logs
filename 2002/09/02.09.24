02:43:39 * shapr boings
03:13:11 * shapr boings
03:17:01 * shapr boings more
03:17:33 <andersca> hey hey shapr
03:17:46 <shapr> hiya andersca, what's up?
03:27:23 * Marvin-- goes AAAAGH about people who can't write decent "I need help" mails
03:27:58 <shapr> hi Marvin--
03:28:02 <shapr> having fun at school?
03:28:05 <Marvin--> "fix `fmap` pBoolFactor $> optP (pBoolEq *> pBoolFactor) gives a type error", well duh, how about including your definition of fix?!
03:28:32 <andersca> haha
03:28:36 <andersca> BoolFactor?
03:28:51 <Marvin--> well, that's not the point
03:28:54 <shapr> it's like XFactor, but not so many possible values.
03:29:04 <Marvin--> they included some parser definitions and their grammar, but NOT THE DEFINITION OF fix!
03:29:23 <Marvin--> maybe I should use my l33t supervisor abilities to go read their code
03:30:44 <Marvin--> and there are so many errors in that code I don't want to look at iiit :/
03:31:43 <andersca> when I had the data structures course at chalmers, someone fucked up so you could see all the comments from the supervisors
03:31:59 <Marvin--> heh
03:32:11 * Marvin-- is going to supervise that course next period
03:32:26 <Marvin--> why haven't they even looked at the type of optP? :(
03:32:37 <andersca> comments like "please re-do this, you don't deserve anything else"
03:32:54 <Marvin--> uh
03:33:08 <Marvin--> supervisors shouldn't be saying that even if no-one else saw it
03:33:30 <andersca> nah
03:33:32 <Marvin--> optP :: b -> Parser a b -> Parser a b, dammit
03:34:02 <Marvin--> They probably want a Parse a b -> Parser a [b] where the resulting list is length 0 or 1
03:34:41 <Marvin--> fooP p = optP Nothing (Just `fmap` p) :-)
03:35:02 <Marvin--> or in their case, fooP p = optP [] ((:[]) `fmap` p)
03:35:06 <andersca> ah
03:36:11 <Marvin--> but if I send that to them, they'll probably go "huh?"
03:36:58 <Marvin--> *sigh* Yet Another group who try to add type information in the grammar
03:37:19 <andersca> that just complicates the grammar
03:37:20 <Marvin--> maybe I should make some sort of Official Pronouncement on the tutorial tomorrow
03:37:37 <andersca> sounds like a good idea
03:38:50 <andersca> ebnf makes stuff so much nicer
03:41:17 <Marvin--> yeah, and having the parser use manyP and things like that will make it more efficient
03:41:30 <andersca> and you don't need to change the grammar to make it non lr
03:41:36 <Marvin--> aP = bP <|> bP <*> cP <*> dP <- slooow
03:41:56 * andersca ponders adding a pretty-printing class
03:42:11 <Marvin--> still, this would be so much simpler if people knew monadic notation enough to use Parsek directly
03:42:36 * shapr wants to take classes at chalmers
03:43:06 <Marvin--> shapr: so you get to use Haskell more? :)
03:43:17 <andersca> oh, ProgsParse is an interface to Parsek?
03:43:27 <Marvin--> yes
03:43:47 <Marvin--> all these <*> and *> and <* and $> are giving me a headache
03:43:59 <shapr> Marvin--: yah, I'd like to be fluent enough in Haskell to write all of my for-pay code in it.
03:44:09 <andersca> what's <*>?
03:44:10 <shapr> I don't understand Monads well enough to do that though.
03:44:20 <Marvin--> andersca: Parser a b -> Parser a c -> Parser a (b,c) I think
03:44:25 <shapr> maybe I could persuade some of the gurus here to give a Monad workshop here on irc?
03:44:32 <andersca> isn't that *> ?
03:44:42 <Marvin--> err, I thought *> and <* were leftP and rightP
03:44:45 <Marvin--> damn
03:44:49 * andersca just uses $> and mapFs with lambda expressions
03:45:09 <Marvin--> no, you're right, daaaamn
03:45:25 <shapr> hi jcore
03:46:02 <Marvin--> okay, so the *> is meant to be "then", I thought of <* and *> as being a direction, whereas <*> was a neutral "combination"
03:46:48 <Marvin--> ouch, ouch, ouch, poor people, they're going to write a language with side effects in expressions
03:46:51 <andersca> *> is "then and combine the parsers into a tuple"
03:46:54 <Marvin--> sucks to be them in type typing lab
03:47:04 <shapr> hey Erwin, have you written anything in Haskell lately?
03:47:07 <andersca> how can you have side effects in expressions?
03:47:38 <Marvin--> <Expr> ::= ... | <Var> '=' <Expr> ?
03:47:49 <andersca> oh ugh
03:48:11 <Marvin--> think C ;)
03:48:14 <andersca> yeah
03:48:46 <Marvin--> eep, I gotta go or I'll be late for the AFP lecture
03:48:50 <andersca> have fun
03:48:58 <Marvin--> shapr: come visit next fall and take the AFP course :)
03:49:12 <Marvin--> monad transformers is the topic of today's lecture, yay
03:59:39 * shapr bounces
04:47:45 <xkb> hidiho
04:48:14 <xkb> does anyone here know some good papers about exceptionhandling in haskell
04:48:23 <xkb> or any other functional language for that matter
04:48:36 <shapr> I've seen some.
04:48:48 <shapr> nothing jumps to mind at this instant...
04:48:52 <xkb> :(
04:48:57 <xkb> I used citeseer
04:49:03 <xkb> and got quite alot of them
04:49:04 <shapr> exception handling is pretty simple though, are you looking for in-depth info?
04:49:08 <xkb> yes
04:49:16 <cleverdra> Erlang has some, IIRC, but Erlang 'exception handling' is wildly different from, say, Java's system.
04:49:19 <shapr> what kind of in-depth info?
04:49:26 <xkb> im working on a possible implementation for another functional language
04:49:29 <shapr> ah
04:49:32 <xkb> semantics
04:49:41 <shapr> have you read some of the "implmementing functional languages"  books?
04:49:43 <shapr> that might help you.
04:49:50 <xkb> hmmz.. I need to check erlang 2.
04:49:54 <xkb> shapr: what books?
04:50:07 <xkb> could you give me the titles or ISBN nrs?
04:50:12 <shapr> I think Simon Peyton-Jones wrote a book about it, and several others have been written.
04:50:21 <shapr> yah, just a moment while I look them up.
04:50:53 <xkb> A book by SPJ will be very nice..
04:51:01 <xkb> as he also has some papers on the subject
04:51:05 <shapr> http://research.microsoft.com/Users/simonpj/Papers/pj-lester-book/
04:52:16 <xkb> thanks
04:52:40 <xkb> whish I had a laser printer
04:52:47 <shapr> hm, I can't seem to find my lapalme book, it has some good references.
04:52:51 <xkb> seems all books about implementing fp are out of print
04:52:55 <shapr> xkb: get a palm pilot :-)
04:53:05 <xkb> shapr: hej.. I have an ipaq :)
04:53:08 <xkb> but they suck
04:53:13 <shapr> run linux on it!
04:53:17 <shapr> then it will suck less!
04:53:19 <xkb> :)
04:53:25 <xkb> I wanted to buy a zaurus
04:53:30 <xkb> as it also runs hugs
04:53:38 <shapr> yah
04:53:42 <xkb> but then I noticed the price
04:53:46 <xkb> ouch
04:53:50 <shapr> what's the price?
04:54:17 <xkb> around 700 euro's in europe
04:54:33 <xkb> ~=700 USD 2 then
04:54:36 <shapr> is it significantly more powerful than the iPaq or Palm ?
04:55:25 <xkb> No.. I think the processor is also an ARM model
04:55:29 <cleverdra> well, there's no Haskell yet for the Palm.
04:55:54 <shapr> I'm unsurprised...
04:55:57 <xkb> main + for the zaurus.. it runs a linux kernel => simple porting
04:56:47 <xkb> I still need to learn the details of monads.
04:56:55 <xkb> they seem to play a big part in exception handling
04:58:01 <shapr> hi pesco!
04:58:04 <shapr> how's life?
04:58:14 <shapr> xkb: monads play a big part in FP
04:58:57 <xkb> not in my fp :)
04:59:13 <xkb> altough they are there..
04:59:42 <xkb> whats that intro paper to monads again?
05:00:11 * shapr looks for the url
05:00:41 <shapr> http://www.dcs.gla.ac.uk/~nww/Monad.html
05:00:47 <shapr> there's one that google turned up.
05:00:47 <cleverdra> google for 'monads' has many interesting hits.
05:00:52 <shapr> yah, exactly
05:01:02 <xkb> yeah.. thats the one I meant
05:02:02 <xkb> Is anyone of you doing research on fp's?
05:02:12 <andersca> dennisb is
05:02:29 <xkb> what subjects?
05:03:17 <pesco> shapr: what's up?
05:04:05 <shapr> pesco: doing for-pay Python code, thinking of how to rewrite it in Haskell :-) what's up with you?
05:05:11 <xkb> w00t.. there is a haskell opengl binding :)
05:05:38 <shapr> yah, it's cool
05:06:54 <xkb> and I just went to all this trouble making a 3d prog in c++
05:07:02 <pesco> shapr: Just returned from 2 weeks USA. Did a bit genetic programming.
05:07:09 <shapr> pesco: cool! where in the US?
05:07:21 <pesco> shapr: Massachusetts, Boston area.
05:07:28 <shapr> awesome, MIT friends?
05:07:57 <pesco> shapr: Actually no, haven't come across any MIT alumni so far...
05:09:13 <Igloo> I know someone who went on a holiday there (or maybe was there while at a conference or something, I forget). He said the TMRC software was being rewritten in Java of all things
05:09:35 <shapr> extreme suckage
05:09:42 <shapr> TMRC, originator of hack
05:34:51 * pesco is away: sleep
07:52:40 <BlizzNL> good afternoon
08:24:59 <Blizz> does anyone know if there is a tool for evaluating lambda expressions ? (please don't say hugs or something ;)) 
08:25:56 <cleverdra> Well, there's also Scheme.
08:26:05 <cleverdra> What kind of tool were you looking for?
08:26:31 <Heffalump> hugs would be fine if you didn't mind the Haskell type system, of course
08:26:44 <Heffalump> and didn't want to trace the evaluation or anything low-level like that
08:28:31 <Blizz> well ok, I have a class about type systems and ofcourse uses lambda calculus alot to express type expressions and such.. well lamdba expressions a kinda new to me so I was wondering if there was some tool to play with them
08:29:08 <cleverdra> hugs *would* be good for that, actually.
08:30:22 <Heffalump> not really, if you want to be able to trace their evaluation
08:30:38 <Heffalump> and being constrained to those that fit within the haskell type system would be inconvenient
08:30:41 <Heffalump> but it's better than nothing.
08:30:55 <Heffalump> and hugs can't print out expressions under a lambda.
08:31:05 <Heffalump> (or indeed do any evaluation under a lambda)
08:31:16 <Blizz> yes but hugs uses lambda the haskell way and I am faced with stuff like /\X:*./\Y:*.VZ:*.(Z->Y->Z)->Z 
08:32:16 <cleverdra> No you're not.
08:32:35 <cleverdra> Heffalump - what do you mean, 'under a lambda'?
08:32:48 <Blizz> cleverdra: Mmm I see them at my desk right now :)
08:32:52 <Heffalump> \x -> ((\y -> y+y) 1)
08:32:56 <Heffalump> won't have any evaluation done
08:32:58 <cleverdra> Blizz - what Heffalump said.
08:33:34 <Heffalump> and hugs won't print it out for you
08:33:42 <cleverdra> Ah, I see.
08:33:49 <cleverdra> Hugs is not a symbolic math machine.
08:34:03 <Heffalump> well, that's not maths
08:34:16 <cleverdra> Blizz - if you don't mind very different syntax, you can get an HP49G.
08:34:19 <Heffalump> the result I'd expect from certain evaluation strategies is \x -> 1+1, not \x -> 2
08:34:36 <Heffalump> the point is that hugs won't do that evaluation, and nor will it print out any result, either evaluated or unevaluated
08:35:02 <Heffalump> and there's no way you can write a Show instance for functions
08:38:18 <cleverdra> 1 << X -> << Y -> 'Y+Y' >> >> EVAL -- in the HP49G's UserRPL
08:39:06 <cleverdra> This would evaluate to '2', of course, but you can get the intermediate steps; you can pass 'X' to the lambda to get an equation, &c
08:39:28 <cleverdra> 'X' << X -> << Y -> 'Y+Y' >> >> EVAL --> X+X
08:39:37 <Heffalump> can you change reduction strategies?
08:40:14 <cleverdra> err, that's wrong; I'm not passing the argument to the internal function.
08:40:20 <cleverdra> Heffalump - I don't know what that means,.
08:40:35 <cleverdra> Heffalump - but my guess is 'no'
08:40:45 <Heffalump> if you have (\x -> (\y -> x+y) 1) 2
08:40:52 <Heffalump> you can either evaluate it "outermost" or "innermost"
08:41:18 <Heffalump> outermost would be (\x -> (\y -> x+y) 1) 2 ==> (\y -> 2+y) 1 ==> 2+1
08:41:42 <Heffalump> innermost would be (\x -> (\y -> x+y) 1) 2 ==> (\x -> x+1) 2 ==> 2+1
08:41:59 <cleverdra> ah.  No, I don't think you can (at least not without writing SysRPL)
08:42:49 <cleverdra> Actually, I could do this; decompose the function and evaluate it's internals with symbolic arguments, and then compose a new function that supplies those arguments.
08:43:37 <cleverdra> So, the answer is "Yes but you'd have to write the evaluator"
08:43:45 <Heffalump> heh.
08:43:59 <Heffalump> Blizz's original question was about whether such an evaluator exists :-)
08:44:00 <cleverdra> It's not too difficult, but it's certainly not convenient for someone who hasn't spent time on this =)
08:44:09 <cleverdra> Oh, indeed =)
08:46:56 <Blizz> Heffalump: yeah indeed ;)
08:48:19 <Blizz> But maybe you can answer this question : what is the 'Haskell style lambda expression equal to /\X:*./\Y:*.VZ:*.(X->Y->Z)->Z that would be of great help too!
08:48:58 <cleverdra> Actually, you *can* do this, selectively, in the equation writer.  You'd have to tell it what you want to evaluate, and to evaluate it step-by-step.
08:49:43 * Heffalump tries to remember how types correspond to expressions
08:49:53 <cleverdra> oops, no you can't.  /me retracts.
08:50:12 <cleverdra> Blizz - what is '*.' ?
08:50:28 <cleverdra> err, nevermind.
08:50:36 <Heffalump> * is a kind.
08:51:07 <cleverdra> Oh.  I thought it was function composition, and proceeded to be totally confused as to what (\X .) could be.
08:51:24 <cleverdra> (\x), that is.
08:51:28 <Heffalump> think of it as a type of types
08:51:41 <cleverdra> OK.
08:51:49 <Heffalump> /\X:* is equivalent to \x ->
08:52:43 <cleverdra> Then what is the . ?
08:53:34 <Blizz> and VZ:* is equivalent to ?
08:54:04 <Blizz> hi shapr
08:54:49 <shapr> hi Blizz, what's up?
08:55:04 <shapr> has the irc.nl server been nice to you?
08:55:28 <Blizz> shapr: no I keep losing the connection when I am idle .. maybe it's my firewall
08:55:58 <shapr> do other idle outside connections also fail? ssh frex?
08:56:09 <Blizz> no just mirc
08:56:26 * shapr has started using Heffalump and Igloo style ircronyms
08:56:39 <Heffalump> irccronyms?
08:56:48 <Heffalump> s/cc/c/
08:57:08 * cleverdra assumes that 'frex' is such a 'cronym.
08:57:16 <shapr> stuff like OOI and UIAC
08:57:28 <shapr> ircronyms :-)
08:57:29 <Heffalump> ah, right
08:57:36 <Heffalump> :-)
08:57:45 <Heffalump> OxIRC language takes over #haskell
08:57:52 * shapr grins
08:57:56 <cleverdra> AFAIK and its many children are also popular =)
08:58:03 <shapr> yup
08:58:11 <shapr> hey sethk, you're one of the haide dev guys, right?
09:00:03 * shapr builds ghc 5.04.1
09:02:45 <Blizz> Heffalump: /\X:*./\Y:*.VZ:*.(X->Y->Z)->Z : what can you say of the kind of this expression? Can I say its kind is (*->*->*)->* or am I being naive ;)
09:04:22 <Heffalump> I think so.
09:04:25 * shapr still hasn't gotten around to kinds
09:04:42 <Heffalump> I'm not 100% confident with them myself
09:04:53 <shapr> iirc, they're metatypes
09:05:54 <Heffalump> yeah, pretty much
09:06:07 <Blizz> shapr: they have many synonyms 
09:12:48 * Blizz reads at cnn.com america dropped 200 special forces at Ivery Coast to save 160 american student who are held hostage.. Even being a student is dangerous nowadays ;)
09:13:09 <shapr> that's bizarre
09:13:31 <shapr> sounds like the end of the age of reason....
09:14:07 <Blizz> That's the 00's I guess
09:14:22 <shapr> ?
09:14:48 <Blizz> 00's comes after 90's ;)
09:15:15 <Blizz> I am rigidly keeping the year2k bug alive ;)
09:15:51 <shapr> I see
09:15:56 <shapr> good point
09:16:03 <cleverdra> Hopefully we'll get over that kind of base humor by 19110
09:16:58 <Blizz> after the year 9999 there will be a year 10000 bug 
09:17:46 <shapr> the Integerenium is coming up in 2038
09:18:33 * cleverdra expects that 32-bit machines will be dead by 2038.
09:18:44 * Blizz agrees
09:19:23 <Blizz> But 30 year old cobol code is still running at dutch banks, so who knows..
09:19:33 <shapr> yah, that's what I was thinking.
09:19:58 * cleverdra notes that Debian Linux is Y2.038K compliant.
09:20:13 <shapr> really? how so?
09:20:57 <cleverdra> They represent the clock as more than a integer, or something -- this is old propaganda that I came across.
09:21:06 <shapr> hi Dalroth
09:21:06 <Blizz> shapr: guess they used doublewords ;)
09:21:21 <cleverdra> Blizz - a doubleword is 32-bits.
09:21:42 <Heffalump> errm, all UNIX applications use 32bits to represent times now
09:21:47 <Heffalump> (on 32 bit applications)
09:21:52 <shapr> a nice simple solution would be an integer of seconds since the epoch, and another integer of epochs since jan 1, 1970
09:22:00 <Heffalump> s/applications/architectures/
09:22:11 <Heffalump> shapr: that doubles the size of all times though
09:22:51 <shapr> well, you could have it like yy assuming less than fifty years from now, or yyyy for exactness
09:22:59 <shapr> so a half-size time would be this epoch
09:23:16 <Heffalump> errm, but types are chosen at compile-time, not run-time
09:23:23 <shapr> hm
09:23:30 <cleverdra> Heffalump - non sequitor.
09:25:27 <cleverdra> Heffalump - stat a file fifty years from now, and you'll get a 32-bit integer that corresponds to some implicit epoch.  The FS doesn't need to store more than that.
09:44:19 <Heffalump> what if you stat a file made today in 50 years time?
09:46:38 <cleverdra> Heffalump - the time would be converted when the system epoch changes.
09:47:08 <Heffalump> so it would jump forward 68 years?
09:47:11 <cleverdra> This is easy in filesystems; other programs may have other ideas of how to manage that.
09:47:28 * shapr realizes he needs QuickCheck tests.
09:48:16 <cleverdra> Heffalump - oh, that's silly, of course.  I was thinking of signed times without telling myself so -- and that won't work either.
09:48:36 <Heffalump> there's no problem as long as the world moves to 64 bit architectures by 2038.
09:48:59 <cleverdra> Your 'space' argument still holds.
09:50:32 <Heffalump> which space argument?
09:50:58 <Heffalump> if we move to 64 bit architectures, the size of an int becomes 64 bits, and programs just need recompiling to work fine.
10:18:54 * shapr bounces
10:20:29 <Igloo> And file formats need changing
10:24:12 <Heffalump> true
13:15:09 <hdaume> hey.  question: ">>=" is pronounced "bind".  does ">>" have a pronunciation?
13:17:56 <Heffalump> then?
13:19:58 <hdaume> makes sense :)
13:21:46 <Heffalump> except >>= was often called thenST etc in pre type class days
13:25:29 <Marvin--> hmm, I've mostly seen it called bind*
14:08:20 <Marvin--> does anybody know how "packaging friendly" gtk+hs and/or gtk2hs are?
14:09:18 <Heffalump> as in making RPMs etc?
14:10:32 <Marvin--> Well, .debs actually, but I guess the "etc" part fits :)
14:10:55 <Marvin--> I'm loathe to stick anything in /usr/lib without it being in a .deb
14:11:28 <Heffalump> put it in /usr/local
14:11:31 <Marvin--> I was looking at the gtk2hs source a while back, and it had lots of ghc-pkg things in it, which I don't understand, and I don't know if I can get it to honor some sort of $(BASEDIR) variable
14:11:32 <Heffalump> or build a deb :-)
14:11:44 <Marvin--> Well duh, a deb is what I want to build, but I don't know how
14:11:53 <Marvin--> and I don't know how to put it in /usr/local if my ghc installation is in /usr/lib
14:11:54 <Heffalump> ghc-pkg isn't too bad, you just run it in a post-install script, and run it to remove in a pre-remove script
14:12:14 <Heffalump> well, apart from changing packages.conf there's no problem
14:12:16 <Marvin--> oh, so it doesn't do any of the moving files around?
14:12:24 <Heffalump> I don't think so.
14:12:32 <Heffalump> but you have to feed it something that knows where the package lives
14:12:49 <Heffalump> I'm a bit busy atm, or I'd have a go at it
14:15:04 <tmoertel> mapM_ (putStrLn . ("Hello, " ++)) /names
14:15:35 <Marvin--> there's no man page for it :/
14:15:48 <Heffalump> nonono.
14:15:59 <Heffalump> do names <- execIRC "/names"
14:16:06 <Heffalump>    mapM_ (putStrLn . ("Hello, " ++)) names
14:16:09 * Marvin-- just rolls his eyes
14:16:25 <Heffalump> I'm surprised at you, your implementation of /names would have to have used unsafePerformIO
14:16:45 * tmoertel assumes IRC client w/ integrated Haskell interpreter and /names as a special form
14:16:55 <Heffalump> but it'd be impure
14:16:59 <Marvin--> IMPUUUURE
14:17:08 <Marvin--> go wash your mouth, young man!
14:17:38 <Heffalump> absolutely!
14:17:50 * tmoertel washes mouth w/ purely-functional soap
14:19:08 <andersca> hey Marvin--
14:19:14 <andersca> got any fun stuff for us tomorrow?
14:20:14 <Marvin--> andersca: Marcin wants me to explain monads, "yeah right" I told him ;)
14:20:25 <Marvin--> nah, but at least have a basic look at monads
14:20:35 <andersca> really? for type checking?
14:20:49 <Marvin--> well, not state monads for the type environment
14:20:55 <Marvin--> just to simplify the error handling
14:20:59 <andersca> nod
14:21:28 <Marvin--> and, well, we'll try to go through the exercises...
14:21:37 <Marvin--> dunno which parts are hardest with it
14:32:10 <Marvin--> argh, the moving-files part and ghc-pkg part are in the same make target
14:32:29 <Marvin--> maybe I should start by fixing upstream ;)
14:35:06 <Heffalump> you can apply a patch to it, that's what the Debianisation patch is for
14:35:12 <engstad> I'm defining: repeat f a = cons a (repeat f (f a))
14:35:26 <engstad> Where: cons h t = h:t
14:35:30 <Marvin--> Heffalump: I know. But Debian also says "contribute patches upstream"
14:35:34 <engstad> But, repeat is already defined..
14:35:55 <Heffalump> Marvin--: true, but this really is a Debianisation patch, since "make install" ought to move files and run ghc-pkg
14:36:10 <Marvin--> engstad: either call it something else, or do import Prelude hiding (repeat)
14:36:31 <engstad> How can I hide repeat?
14:36:35 <Heffalump> and you'll need to run ghc-pkg from the package scripts, so unless you're going to include the makefile in the binary package, you'll have to copy out the ghc-pkg statements anyway
14:36:41 <Heffalump> engstad:
14:36:43 <Marvin--> Heffalump: well, my solution was going to be having an install-files target and letting install depend on it. No change for normal users, but I can use install-files instead
14:36:47 <Heffalump> import Prelude hiding (repeat)
14:36:55 <engstad> Ah, literally. :-)
14:36:56 <Heffalump> Marvin--: true
14:37:05 <Heffalump> oh, marvin said that, sorry :-)
14:37:15 <Marvin--> heck, I even answered before he asked ;)
14:38:08 <engstad> I can still use Prelude.repeat, right?
14:38:17 <Marvin--> if you do import qualified Prelude, yes
14:38:41 <Marvin--> hrrm, I wonder how these students expect me to solve their "type error" if they don't tell me what the error is
14:39:42 <engstad> Haskell is really a cool little language.. :-)
14:40:15 <Marvin--> define "little" ;)
14:40:25 <Igloo> You can use qualified names even if you don't use import qualified
14:40:31 <Marvin--> oh?
14:40:34 <Marvin--> cool, I didn't know that
14:40:38 <hdaume> Igloo: not if you hide something
14:40:50 <Igloo> OK, I was about to say I didn't know what the semantics of hiding are, though
14:41:00 <engstad> Heh, I guess it's not that small, eh?
14:41:05 <Igloo> I can't think why not OTTOMH, though
14:41:15 <hdaume> :) i am often frustrated by that.  i always have "import X hiding Y ; import qualified X" back to back
14:41:29 <Heffalump> you might import Foo as Q and import Bar as Q
14:41:45 <Igloo> Oh, yes, OK
14:41:46 <Heffalump> I think that's valid - and if so, then you need even qualified symbols to be hidden to avoid conflicts
14:42:08 <engstad> I'm reading "Why Functional Programming Matters" by John Hughes. It really ought to be manditory reading for all students.
14:42:21 <Igloo> If hugs is to be believed it works, though
14:42:41 <Igloo> import Bar hiding (bar)
14:42:45 <Igloo> Main> bar
14:42:45 <Igloo> ERROR - Undefined variable "bar"
14:42:45 <Igloo> Main> Bar.bar
14:42:45 <Igloo> 5
14:42:59 <engstad> Never read a better explaination of "fold" (even though they call it "reduce".
14:43:06 <Igloo> ghci too
14:43:23 * Igloo hasn't got the energy to read the relevant bit of report ATM, though  :-)
14:44:05 <engstad> Is there a good XEmacs haskell .el file somewhere?
14:45:05 * Marvin-- wonders how the heck haskell + corba can work
14:45:28 <Marvin--> a lot of IO monads I expect
14:45:56 <Heffalump> engstad: look on haskell.org
14:46:11 <Heffalump> most real-world Haskell programming needs lots of IO monads
14:47:53 <engstad> See, a program with no side effects isn't useful at all. It'll always return the same result. :-)
14:48:10 <Marvin--> I know, I know
14:48:32 <Marvin--> it just sucks that the power of haskell is the laziness and side-effect-freeness, but nobody want that :)
14:51:04 <engstad> Well, most side-effects are really cumbersome to deal with, which is why one should try to minimize the dangers of the side-effects. C++ uses objects to "encapsulate" the dangers. Haskell uses monads. 
14:51:05 <Heffalump> well, any program uses a top-level IO monad, but most real-world applications need IO deep down too
14:51:40 <Heffalump> I think Haskell's biggest weakness is that it's hard to learn
14:52:17 * Heffalump goes to bed (probably)
14:52:21 <Marvin--> well, if you come from the world of imperative programming yes, but it's not hard to learn as a first language
14:52:38 <Heffalump> IM stuff like monads and type classes and so on, not the basic stuff
14:53:04 <Marvin--> yeah, monads are tricky, but when you get the "A-ha", it's all well and good :)
14:53:36 <Heffalump> yes, but that takes time, and the poorer programmers will never go "A-ha"
14:53:45 <Marvin--> and things like type classes isn't harder than for example templates in C++ (man what a horrible mess)
14:53:57 <Heffalump> people don't use templates in C++ much, though
14:53:59 <Marvin--> the poorer programmers will never produce quality software, no matter the language, though
14:54:14 <Marvin--> uh, I thought usage of iterators from STL and stuff like that was very common?
14:54:25 <Heffalump> oh, but that's using someone else's templates
14:54:29 <Heffalump> not writing your own
14:54:38 <Heffalump> just like using do from IO is much easier than writing your own monad
14:54:46 <Heffalump> hmm. Maybe my argument doesn't hold.
14:54:48 <engstad> It's really caught on lately. Lot's more bloated code though (Haskell not much better though :-)
14:54:55 <Marvin--> I think you're starting to contradict yourself ;)
14:55:05 <Heffalump> I was about to say that without the poorer programmers using the language too, it couldn't take off
14:55:20 * Heffalump decides to just go to bed :-)
14:55:24 <Marvin--> That might be true though :/
14:55:28 <engstad> G'night!
14:55:36 <Marvin--> night heff'
14:55:36 <Heffalump> <gone>
17:33:07 <Igloo> Anyone with GHC 5.04.1 around?
17:37:30 <Pseudonym> I've got 5.04 without the .1.
17:52:11 <Chilli> Ig: I got 5.04.1
17:53:20 <Igloo> Chilli: Do you still need -package lang to import Storable even when you give -fffi?
17:53:41 <Chilli> depends how you import
17:53:51 <Chilli> is you "import Foreign", yes
17:54:07 <Chilli> hmm, just a sec
17:54:25 <Igloo> "import Storable"...
17:55:20 <Chilli> Foreign and CForeign are in the haskell98 package now
17:55:24 <Chilli> whoch is included by default
17:55:37 <Chilli> you get all of Storable via Foreign
17:56:02 <Chilli> if you want Storable explicitly, you either have to use hierachical libs (ie, Foreign.Storable) or pass -package lang
17:56:43 <Igloo> Ah, perhaps I should be importing Foreign rather than storable then. Thanks!
17:57:19 <Chilli> Foreign reexports evrything of all the language-independent FFI libs
17:57:34 <Chilli> and CForeign re-exports all of the C-dependent FFI libs
19:28:06 <plv> Hi, anyone knows if it is possible to code an operating system (or at least parts of) using a functionnal language such as haskell?
19:38:14 <Pseudonym> Yes and no.
19:38:22 <Pseudonym> It depends what you mean by "operating system".
19:39:01 <Pseudonym> For example, in a microkernel OS, it should (in principle) be possible right now to write servers in Haskell.
19:39:36 <plv> I guess for the architecture pieces it requires ASM, but for the scheduler or virtual memory manager?
19:40:45 <Pseudonym> http://www.ai.mit.edu/projects/express/
19:40:47 <Pseudonym> Have a look.
19:40:54 <plv> thanks!
19:41:12 <Pseudonym> It's ML, not Haskell, but still...
22:28:28 <sethk> hello xmkl
23:13:15 <sethk> Hello adept
23:17:59 <adept> sethk: 
23:18:03 <adept> hello
23:18:18 <sethk> Anything going on?
23:23:19 <adept> sethk: going to do a bit of haskell, actually :)
23:24:07 <sethk> I'm running some new code against 300 MB of data, if the data ever finishes downloading.  It handled the 100 MB test in about 8 minutes.
23:24:14 <sethk> Not bad for functional code.
23:24:21 <adept> sethk: what kind of code?
23:25:06 <sethk> Fairly simple; it takes a large demographic database, checks for duplicates in certain fields, and then formats it for import into Oracle.
23:25:45 * Pseudonym used to work on demographic databases
23:25:54 <Pseudonym> Can I ask what it's for?
23:26:00 <Pseudonym> Or would you have to kill me?
23:26:22 <sethk> The database is from Experian, and you can find out how many boxes of corn flakes your neighbors buy...
23:26:32 <Pseudonym> Interesting.
23:26:37 <adept> sethk: i have something similar to that, but for telecomms area :)
23:27:01 <Pseudonym> I worked on the Australian, UK and US censuses from the 0s.
23:27:04 <Pseudonym> 80s
23:27:17 <Pseudonym> So slightly different in focus.
23:27:23 <sethk> I've done similar work in the telecomms area, but I usually don't like to admit it.  Right now, though, I can't be quite so choosy...
23:27:45 <sethk> We have the census data also, plus the 2006 census projections.
23:27:51 <adept> sethk: why you dont like to admit it? :)
23:28:10 <Pseudonym> Oh, we also did a lot of climate data.
23:28:21 <Pseudonym> My boss was a geographer, not a marketeer.
23:28:35 <sethk> Two reasons.  First, I HATE telephones.  Second, commercial marketting isn't terribly interesting.
23:28:53 <sethk> Pseudonym:  The geographic aspects are much more interesting than the marketting aspects.
23:29:41 <sethk> adept:  As I said, I don't like telephones, which I suppose is why I've done work for AT&T, Bell Labs, Lucent, GTE, and probably others that I'm trying to forget.
23:29:43 <Pseudonym> Yeah, I'd guess so. :-)
23:30:04 <adept> sethk: well, thanks god I'm far away from marketing dept and their deed :)
23:30:38 <sethk> Adept:  Definitely.  Pseudonym:  I'm doing some work on a project that generates cell phone coverage maps, which is mildly interesting.
23:31:39 <Pseudonym> That does sound kinda interesting.
23:32:24 <adept> sethk: how do you check for duplicates? Using List.group?
23:32:50 <sethk> No, FiniteMap.
23:34:42 <adept> sethk: i need to check dups _and_ find out how many similar records are in each group. And I found out that List.group is an incredible memory eater in my case ...
23:35:06 <Pseudonym> What does "similar" mean?
23:35:38 <sethk> adept:  I haven't checked List.group vs. FiniteMap, but I'd guess that FiniteMap is more efficient.  Also, same question as Pseudonym.
23:36:40 <Pseudonym> You could actually probably write List.group in terms of FiniteMap.
23:36:50 <adept> Pseudonym: suppose record has 100 fields. Only 10 of them are meaningfull for comparing wether they are similar or not. So I compute some kind of "signature" for each record, "zip" them with the original recordset, then "group" the result by the signature. 
23:37:15 <Pseudonym> Right.  Perl programmers call that the Schwartzian transform.
23:37:27 <sethk> So the signature can be the key for FiniteMap?
23:37:36 <adept> Pseudonym: in other words, if those 10 field have the same value in both records, they are similar.
23:38:00 <adept> Pseudonym: who was Schwartz? :)
23:38:02 <Pseudonym> The abstraction you want is a multi-map.
23:38:11 <adept> sethk: yes :)
23:38:16 <Pseudonym> adept: Randal Schwartz.  The guy who got into trouble with Intel.
23:38:30 <Pseudonym> That's not the reason they call it that, though. :-)
23:38:36 <sethk> Pseudonym:  Is multi-map in the ghc libraries?
23:38:44 <Pseudonym> sethk: Nope.
23:38:58 <sethk> I'll bite:  where does it live?
23:39:04 <Pseudonym> type MultiMap k v = FiniteMap k [v]
23:39:11 <Pseudonym> I don't think Haskell really has one yet.
23:39:18 * Pseudonym will add one to Edison eventually
23:39:23 <sethk> But you are saying it wouldn't be difficult to code?
23:39:28 <Pseudonym> Not at all.
23:39:40 <Pseudonym> In principle, it maps a key to a set of values, rather than a single value.
23:40:00 <Pseudonym> So building one on top of FiniteMap would be pretty damn easy.
23:40:05 <sethk> Pseudonym:  are you the Edison guru now?
23:40:17 <Pseudonym> Err... yes and no.
23:40:37 <sethk> Hmmmm....why and why not?   :)
23:40:44 <Pseudonym> Chris Okasaki is basically not working on it any more, so I'm making my own forked version and he's helping me out.
23:41:18 <Pseudonym> I'm not really working on Edison as such, because I've changed a lot of the interface.
23:41:29 * adept found that List.group is no longer used in my code, and Finitmap is. When have I done that? :)
23:41:46 <sethk> Chris told me that he hasn't done much on it for a couple of years.
23:41:51 <Pseudonym> Yes.
23:42:06 <Pseudonym> So what I'm working on is kind of second-generation Edison.
23:42:26 <sethk> Let me know if I can help.  I thought Edison a good idea and I need some innovative tree types for my database engine work.
23:42:59 <Pseudonym> http://sourceforge.net/projects/hfl/
23:43:13 <sethk> Pseudonym:  I'm looking...
23:43:40 <Pseudonym> I haven't finished gutting the interface yet.
23:43:45 <Pseudonym> And I've only added one data type.
23:44:08 <adept> sethk: how do you interface with oracle?
23:44:24 <Pseudonym> The main improvements so far are 1) fundeps, and 2) removing the Maybe type.
23:44:28 <sethk> Pseudonym:  Actually, I've already added myself to hfl a few weeks ago.  I didn't realize we were talking about the same thing.
23:44:42 <Pseudonym> Oh!
23:44:45 * Pseudonym laughs
23:44:48 <Pseudonym> Of course, that was you.
23:45:18 <sethk> Adept:  Right now I'm just producing files that the bulk loader consumes, but I'm working on a real interface.
23:45:31 <adept> sethk: via OCI?
23:46:31 <sethk> Adept:  I'm not sure.  All the typical interfaces are rather awkward.  I may code an interface to my own database engine first, where I can make changes on the engine side if necessary.
23:47:19 <sethk> It is far from obvious to me what the natural interface from Haskell to a database should be.
23:48:01 <adept> sethk: same thing here. Though I feel that I need it more and more ...
23:48:27 <sethk> Adept:  It is definitely needed. 
23:48:43 <sethk> Pseudonym:  Why is removing Maybe a goal?
23:49:30 <Pseudonym> http://haskell.org/wiki/wiki?NotJustMaybe
23:49:40 <sethk> Adept:  One can use c2hs (or something similar) and create a straightforward interface, but the "right" interface clearly requires some thought.
23:49:55 <sethk> Pseudonym:  Reading...
23:51:24 <sethk> Adept:  And I'm toying with the idea of porting some of my database engines interface code to Haskell.
23:51:28 <adept> sethk: hmm.. I'd rather prefer having datasets as lazy lists on haskell side, queries along the lines of list comprehension (i like the Mnemosyne thing they done in erlang), etc....
23:52:09 <sethk> Adept:  Laziness with database transactional semantics is a difficult fit.
23:52:17 <Pseudonym> adept: In fact what you want is something like datalog for queries.
23:52:39 <Pseudonym> sethk: For "reading" it's not too bad.
23:52:59 <Pseudonym> Only problem is you want to kill the rest of the transaction as soon as it becomes garbage.
23:53:06 <sethk> Pseudonym:  Unfortunately, not true (this is my area).  Repeatable read and strict serializability make laziness difficult.
23:53:24 <adept> sethk: I know. But even a read-only access will be a major step forward
23:53:39 <sethk> Pseudonym:  I've made changes to my concurrency control algorithm to allow laziness, but that is only available in my engine.
23:53:50 <Pseudonym> Performing a query should (in principle) return a lazy list which is the results of the query at the time it hit the IO monad.
23:54:06 <adept> Pseudonym: whats datalog?
23:54:12 * adept googling ...
23:54:14 <Pseudonym> adept: Kind of like prolog.
23:54:21 <Pseudonym> Only it's a database query language.
23:55:04 <sethk> Pseudonym:  With traditional database methods such as Oracle or DB2 use, a read must be completed before allowing ANY user to update the table.
23:55:26 <Pseudonym> sethk: OK, granted, but that's an issue for the client, not for the server.
23:55:36 <Pseudonym> If the database requires that, the binding should make the list non-lazy.
23:55:59 <sethk> Pseudonym:  No.  The server guarantees the behavior and correctness, the client doesn't have the context to do so.
23:56:11 <Pseudonym> I guess.
23:56:21 <sethk> Pseudonym:  What I've done is change to more optimistic concurrency control in my engine....
23:56:28 <Pseudonym> I like Z39.50's model better. :-)
23:56:42 <Pseudonym> Or maybe I just hate relational databases.
23:56:56 * adept hates RDBMS too ... 
23:56:56 <sethk> Pseudonym:  Where I never fail a transaction until absolutely necessary.
23:57:11 <Pseudonym> That sounds quite interesting.
23:57:15 <sethk> Pseudonym:  But, as a result, the lazy read will sometimes fail when you ask for more data.
23:57:50 <sethk> Pseudonym:  which is counterintuitive, as the client generally does not expect concurrency errors for a read-only connection.
23:57:59 <Pseudonym> True.
23:58:26 <sethk> Pseudonym:  In testing, it works surprisingly well (aborted transactions rarely occur in practice).
23:58:29 <Pseudonym> You want to be able to explicitly ask for a query to pull everything over the wire eagerly, then.
23:58:44 <Pseudonym> If that's what you want, anyway.
23:58:59 <Pseudonym> How much did you stress it?
23:59:17 <sethk> Pseudonynm:  Exactly, if the client needs that behavior.
23:59:34 <sethk> Pseudonym:  With tables of about 10 million records, but...
