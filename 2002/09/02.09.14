00:57:27 <olczyk> Anyone there?
05:30:10 <BlizzNL> vage
05:52:02 <BlizzGOne> Id President Bush on CNN or something? Where is everybody
07:39:19 <BlizzNL> Anyone who has experience with HaXml
08:12:21 <jewel> shapr and I played with it one day
08:37:38 <sethk> olczyk:  I'm back, but it is about 12 hours later, I think....
09:58:07 <BlizzNL> good evening
09:59:00 <eivuokko> Evening.
11:05:51 <olczyk> Sorry I only have a little time here. Can someone explain hot the ghc trace command works?
11:06:07 <olczyk> sed 's/hot/how/'/
11:12:15 <sethk> Olczyk:  you are taking about the trace() function?
11:13:48 <sethk> in module Debug...
11:15:44 <olczyk> Yes.
11:15:50 <sethk> Hey, you are here!
11:16:02 <olczyk> One of the problems is that I don't seem tobe able to import Debug.
11:16:19 <sethk> Oh, that's easy, use "import Debug.Trace"
11:16:28 <sethk> Then, here is an example:
11:16:56 <sethk> showEntries ofilefd (c:cs) line = myTrace (show line)
11:17:05 <sethk> hPutStrLn ofilefd (show c) >> showEntries ofilefd cs (line+1))
11:17:18 <sethk> Which outputs line numbers are a file is being processed.
11:17:38 <sethk> myTrace is just trace; I use myTrace so that I can turn it on or off
11:17:50 <sethk> without changing code
11:18:24 <olczyk> And the orignal looked like:
11:18:52 <olczyk> showEntries ofilefd(c:cs) line =show line.
11:18:55 <olczyk> ?
11:19:27 <sethk> No, like this...
11:19:34 <sethk> showEntries ofilefd (c:cs) line =
11:19:37 <Igloo> trace s e is the same as e except it print s to stderr (or maybe stdout?) when it is evaluated
11:19:42 <sethk> hPutStrLn ofilefd (show c) >> showEntries ofilefd cs (line+1)
11:20:07 <sethk> Exactly, and I think stderr
11:20:26 <sethk> But watch the parentheses or it doesn't do what you expect.
11:20:32 <Igloo> And there's a bracket missing from your example
11:20:34 <sethk> An extra set of parentheses around 
11:20:39 <sethk> the expression
11:20:41 <olczyk> I see got it.
11:20:45 <olczyk> Thanks.
11:21:07 <sethk> I'm "cut and paste challanged"
11:21:35 <sethk> I haven't figured out when the parentheses are necessary, so I just always add them around e (the expression)
11:21:41 <sethk> Which is harmless
11:21:55 <olczyk> Try it in Smalltalk. No emacs-mode.
11:22:16 <sethk> No emacs-mode?  I missed something...
11:22:21 * olczyk thinks emacs mode makes it easy to add () just to be safe.
11:22:55 <olczyk> When you put () (or []) around things just to be safe, you wind up with the
11:23:00 <olczyk> old Lisp complaint.
11:23:25 <olczyk> You need a good "sexp" oriented editor to help you keep things straight.
11:24:03 <sethk> In Haskell mode?
11:24:46 <olczyk> Exaclty. You match the beginning and end of (). You indent automatically because of it.
11:24:52 <olczyk> ...
11:25:41 <olczyk> You still play the game of "where did I forget to put the )", but you resolve it in seconds
11:25:45 <olczyk> not minutes.
11:25:53 <sethk> Strange, though, because the code I just pasted is in emacs using Haskell mode and I don't see the problem :)
11:26:33 <olczyk> No-No. I haven't used Haskell mode for a long time, but it seems OK. I was talking ST.
11:26:47 <sethk> What is ST?
11:27:03 <olczyk> Which has no emacs mode and their built-in editors are not "sexp" sensitive.
11:27:06 <olczyk> Smalltalk.
11:27:22 <sethk> Oh, OK.
11:29:09 <olczyk> Haskell does seem to lend itself tomany () anyway.
11:29:29 <sethk> Yes, because of the left leaning function application
11:45:16 <Igloo> You can use $ instead of brackets a lot of the time, and learning how tightly things bind would probably be useful
11:45:28 <Igloo> And you can't put [] around something to be safe
11:45:59 <Igloo> How would you do function application such that fewer ()s were needed?
11:55:52 <norpan> Igloo: stack order of course .)
11:56:29 <norpan> but with partial application it won't work
12:46:23 <BlizzNL> I created my own type ('newtype title = title String deriving (Eq, Show)') Now I want to return this title as a string, how can I do that?
12:55:59 <BlizzNL> I have it, it's show
13:20:53 <olczyk> How can I access the return value of a function just before it returns?
13:21:03 <olczyk> I mean:
13:21:12 <olczyk> FOO:: Int->Int
13:23:10 <olczyk> FOO name = dothis tothat
13:23:19 <olczyk> I would lie to do 
13:23:50 <olczyk> FOO name = (trace returnvalue ) dothis tothat
13:24:01 <olczyk> FOO name = (trace (show returnvalue )) dothis tothat
13:24:13 <olczyk> But am unsure what retunvalue should be.
13:35:17 <Igloo> hugs' traceShow is useful:
13:35:17 <Igloo> traceShow :: Show a => String -> a -> a
13:35:17 <Igloo> traceShow msg x = trace (msg ++ show x) x
13:35:25 <Igloo> And FOO isn't a function
13:35:51 <Igloo> (it doesnt start with a lowercase letter or _)
13:37:21 <olczyk> Is Haskell that strict? ( Problem due to stupid CAPS LOCK key. )
13:39:00 <Igloo> The language is defined as such
13:40:19 <BlizzNL> I defined a newtype and when I use show to convert it into a string it also takes the newtype name with it. Is there a better way?
13:41:12 <Igloo> You probably want   foo (Type s) = s
13:43:34 <BlizzNL> Igloo this seems to work, but what happens?
13:44:21 <Igloo> What do you mean?
13:44:33 <Igloo> The value is pattern matched and s is bound to the string in the constructor
13:44:58 <BlizzNL> Igloo: ahh great thnx
13:53:42 <sethk> A similar question, if anyone is still here...
13:55:37 <BlizzNL> I'm here
13:56:24 * olczyk thinks he needs a better intro to Haskell.
13:56:24 <sethk> I have a type defined by a data statement, which has several constructors; I'll just give you two which is enough for the question...
13:56:34 <norpan> hi all
13:57:08 <sethk> A constructor Name, which takes a String, and a constructor Number, which takes an Int
13:57:18 <sethk> I have a list of these, so I have something like:
13:57:35 <BlizzNL> norpan: hi
13:57:38 <sethk> [ Number 123, String "xyz", String "abc", Number 456]
13:57:58 <sethk> I want a function to take a member of this list, and return the underlying type, e.g., Int
13:58:04 <norpan> i have been drinking a bit now, so don't take what i say seriously
13:58:21 <BlizzNL> norpan: You drunk bastard :)
13:58:27 <sethk> The problem is that if I create a function to do this, it fails because I'm trying to get it to return different types.
13:58:39 <sethk> for example:
13:58:43 <norpan> sethk: you can't return a type in haskell, you can only return values
13:58:56 <sethk> Yes, I mean a value of a different type...
13:59:04 <sethk> elementToValue (Name s) = s
13:59:11 <sethk> elementToValue (Number n) = n
13:59:22 <norpan> sethk: that's not possible, what would the type of elementToValue be?
13:59:27 <BlizzNL> Cant you pattern match them in some way>
13:59:46 <sethk> norpan: yes, that is the problem.  BlizzNL, I can pattern match, but then what?
14:00:08 <norpan> sethk: it's not possible, elementToValue can only have one type
14:00:23 <sethk> I can pattern match in a higher level function that takes my type as an argument....
14:00:39 <norpan> what you can do is to define a class, and then make String and Int members of that class
14:00:43 <sethk> but that complicates the program.  Perhaps, though, the complication is necessary.
14:00:55 <sethk> norpan:  OK, how does that help?
14:01:27 <norpan> then you can have elementToValue as a member function of that class, so it is overloaded, but to really help you I need to know what you are trying to achieve
14:01:40 <norpan> what should happen to the return value of elementToValue?
14:01:52 <norpan> where is it used
14:01:58 <sethk> Actually, this is a very simple program, in preparation for the "real" program.  Here is what it does:
14:02:54 <sethk> It uses a Happy parser to process a file.  The result is [Line], where Line is [Element], and Element is defined by a data statement as the string or number or a third option, 'Fnumber Float'
14:03:19 <sethk> Happy returns a list of lists, and the list I gave a part of above is for one parsed line...
14:03:50 <sethk> Now I'm taking the values and creating an input file for a database loader.
14:04:06 <sethk> Not necessarily the best way to do it; partly as a learning exercise
14:04:58 <norpan> the thing is this, because Haskell is strongly  typed, you need to know the type of the value _before_ you get it
14:05:32 <sethk> I do, but the type is "Element", which means one of the three constructors...
14:05:37 <norpan> yes
14:05:53 <sethk> I actually did find a way to get it to work, but I'm looking for the "right" way.
14:05:53 <norpan> but you don't know which one
14:06:00 <sethk> norpan:  exactly
14:06:05 <norpan> what should be done with the element
14:06:26 <sethk> Right now, I'm just printing it; later I will want to do arbitrary things with it...
14:06:33 <norpan> if you need a string, it's easy to write elementToString
14:06:44 <norpan> if you need a monkey, it's easy to write elementToMonkey
14:07:01 <sethk> In fact, that is what I did, just changing the number lines to, for example, (show n)
14:07:12 <norpan> well, that's fine then
14:07:39 <sethk> I can convert it back to an Int with read(), but that seems to be a roundabout way to get there...
14:07:56 <norpan> but why do you want to convert back to Int?
14:08:11 <BlizzNL> Igloo: Youre pattern matching solution works great except for one case were I have a selector ('data Attr = { bookLang :: Lang } deriving (Eq, Show)'. Any idea how to match this?
14:08:26 <BlizzNL> BTW the Lang looks like this : data Lang 	= English | Dutch deriving (Eq, Show)
14:11:45 <sethk> norpan:  in general, who knows?  I might be parsing an expression and want to execute it.  (There are other ways to do that as well, but there are situations where it makes sense.)
14:12:07 <norpan> But the point is that you need to know
14:12:47 <norpan> the type system puts some restrictions on what you can do, in return it provides run-time safety
14:18:13 <sethk> I know, I just don't think I've found the best way to compensate.
14:18:50 <Igloo> Blizz: That doesn't look like valid Haskell to me
14:18:55 <sethk> A type class doesn't help, I think, because the return type is still monomorphic
14:19:21 <BlizzNL> The compiler doesn't complain ;)
14:19:28 <norpan> but why not keep it in the Element type until you are ready to process it?
14:20:16 <Igloo> Blizz: hugs does
14:20:26 <BlizzNL> Igloo : sorry this is the correct one : data Attr = Attr { bookLang :: Lang } deriving (Eq, Show)
14:20:57 <Igloo> You can pattern match that as if it was data Attr = Attr Lang or you can use bookLang to extract the Lang
14:25:21 <sethk> norpan:  OK, but I still need to extract the value in some way.
14:25:35 <norpan> sethk: yes, by pattern matching when it's really needed
14:26:10 <sethk> You mean by writing a function whose argument type is Element?
14:26:54 <norpan> yes
14:28:33 <sethk> OK, I probably need to rethink a little about processing the data to see how this works in general...
15:03:15 <BlizzGOne> anyone who knows some paper or tutorial which gives an introduction to parsing xml using haskell?
15:10:06 <tmoertel> BlizzGOne: have you looked at HaXml? http://www.cs.york.ac.uk/fp/HaXml/
17:06:02 <meatloaf72> hakell is gay
17:09:27 <Igloo> lol
17:09:49 * clausen thinks haskell doesn't have a sexual preference
17:10:16 <Igloo> He probably did before he died
17:10:30 <clausen> ah, good point
17:10:55 <clausen> was he gay?
17:19:11 <Igloo> NAFAIK
17:19:45 <Igloo> He didn't discuss his sexuality with me. Probably due, at least in part, to me not being born
17:19:54 * clausen googles
17:21:14 <Igloo> Oh, apparently I was almost 2 when he died
17:25:56 <sethk> What brought up that question?
17:26:09 <clausen> <meatloaf72> hakell is gay
17:26:25 <clausen> anyway, 
17:26:32 <clausen> googling "haskell curry" married
17:26:40 <clausen> didn't turn up anything interesting, hehe
17:27:00 <sethk> Perhaps is was a curried marriage...(think about it?)
17:27:28 <sethk> Now I'm doing it...
17:27:45 <clausen> what?
17:27:54 <clausen> marry :: Person -> Person -> Marriage
17:28:13 <sethk> You obviously haven't met my ex-wife...
17:28:16 <clausen> curried_marriage = marry (person "Haskell Curry")
17:28:17 <clausen> or something
17:28:21 <clausen> correct
17:28:27 <clausen> ah
17:28:32 <clausen> curried as in "game over"?
17:28:51 <sethk> I was thinking more of "partial application"...
17:28:53 <Igloo> I'd say that was partial_marriage
17:29:33 <sethk> I actually had a question, but it has slipped my so called mind
17:30:15 <sethk> Oh, yes, looking for opinions on Parsec, Happy, and other parsing alternatives.
