05:24:05 <shapr> is there an existing function to return the permutations of a list?
05:28:16 <ChilliX> don't think so
05:29:23 <shapr> hi ChilliX
05:29:33 * shapr finds a permutations written by Koen Claessen
05:30:09 <ChilliX> ah, thought you meant existing as in Prelude or standard libs     (or even GHC's libs)
05:30:31 <shapr> I was hoping for a really fast existing one in the standard libs
05:30:48 <shapr> one that works is nearly as good
06:08:54 <shapr> is there a liftMn so that can I can do useful stuff like "liftM21 = liftMn 21" ?
06:10:14 <ChilliX> no, such a function couldn't be typed
06:10:23 <shapr> oh
06:10:35 <ChilliX> (using the -fgenerics it would be possible to define family of such functions though)
06:23:43 * shapr adds generics to his list of things to read up on
08:42:22 <ChilliX> re JaffaCake
08:43:42 <shapr> hi JaffaCake
08:43:46 <shapr> what's the Jaffa for?
08:43:49 <Heffalump> hi
08:44:18 <ChilliX> in my book jaffa cakes are choclate cookies with a orange filling
08:44:26 * shapr doesn't know those
08:44:47 <Heffalump> <aol> (to ChilliX)
08:44:48 <ChilliX> ask Bea, they are pretty common in .de
08:44:51 <Heffalump> very nice to eat, too
08:45:05 <Heffalump> not that I want to eat this JaffaCake.
08:45:26 <ChilliX> Heffalump: agreed on both accounts
12:02:09 * shapr coughs
12:02:32 --- topic: set to 'ICFP is OVER || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.2.3 released http://www.cse.unsw.edu.au/~chak/nepal/' by shapr
12:02:39 <shapr> ICFP is *over* !
12:02:48 <shapr> I had a blast =)
12:03:40 <Heffalump> ICFP isn't over
12:03:44 <Heffalump> the programming contest is :-)
12:03:50 <Heffalump> the conference hasn't even started.
12:05:37 <jewel> you know, the important part
12:08:02 <Heffalump> :-)
13:40:52 <shapr> Heffalump: I wish I could go to the actual conference... maybe some year
13:47:38 <Heffalump> pity you're not a student - in the unlikely event that we won, there'd probably be funding for you to do so
13:48:01 <shapr> yah, well :-)
14:26:59 <pesco> Does anyone know off the top of their head whether one can safely assume ord to always return positive values?
14:27:21 <shapr> I don't see how it could do anything else
14:27:36 <pesco> I'm not sure on the definition of class Enum.
14:27:57 <pesco> Does it allow mapping to negative values or not?
14:28:22 * pesco sticks his head into the report.
14:28:30 <dark> I think Haskell98 defines the Char bounds as 0 through 0xffff.  GHC extends that to 0x1ffff.
14:29:02 <Igloo> Char must be big enough for all of unicode, no?
14:29:14 <Igloo> And 16 bits isn't
14:29:35 <dark> Igloo: I didn't say GHC was wrong to do so :)
14:30:13 <Igloo> If the standard does say that it's probably overruled by a "or whatever the latest versino of unicode says" line elsewhere
14:30:35 <pesco> Igloo: 16 bit is too little. I hear that the report will be changed on that.
14:30:50 <dark> pesco: org isn't from Enum, though.  It's defined as Char -> Int.
14:30:54 <pesco> But there it says, mapped to Ints in the range [0..2^16-1].
14:31:06 <pesco> dark: ord = fromEnum
14:31:13 <pesco> ord :: Char -> Int
14:31:17 <pesco> There you go.
14:31:35 <pesco> It's fromEnum, restricted to Char.
14:31:41 <dark> pesco: That's not how GHC implements it, actually :)
14:31:51 <pesco> Under the hood, that is?
14:31:59 <dark> Right.
14:32:12 <pesco> That's unimportant then.
14:32:53 <dark> Anyway, I hope GHC's Char range becomes the standard.
14:33:07 <pesco> dark: It will.
14:34:09 <dark> I also hope the IO module will be updated to take character set information, if it's going to pretend to return [Char].
14:52:11 <pesco> dark: Precisely that's under heavy discussion on haskell-i18n@haskell.org
14:52:35 <pesco> I'm right now cleaning up my UTF-8 codec to put it into CVS.
14:54:46 <dark> pesco: Cool :)
15:07:46 <pesco> Eww, GHC munching 800k UnicodeData.hs. Watch that goat moan!
15:08:21 <dark> It's called stress testing, I think :)
15:08:53 <pesco> I panicked GHC with something much less obese during the ICFP contest.
15:09:51 <dark> I remember when nethack's lighting tables crashed gcc.  (Well, not directly -- it ate up all the memory).  The fixed gcc was out on the day after the nethack release :)
15:10:20 <pesco> Nethack? Lighting tables?
15:10:38 <dark> You're asking about both, or about the connection?
15:10:45 <pesco> The connection.
15:11:15 <pesco> Aarhh, I need more RAM!
15:11:53 <dark> At some point nethack introduced a new algorithm for line-of-sight calculation, one that worked better with the (new) randomly-shaped caves.
15:12:21 <pesco> Ahum.
15:12:31 <dark> This algorithm used huge constant tables, for speed.  But gcc used obscene amounts of memory to compile them.
15:12:50 <pesco> ic
15:13:39 <pesco> Man, I need to rout esome work through this machine, the moaning goat meter has never looked so colorful before!
15:13:42 <dark> I guess calling them "lighting tables" was wrong, I think of them that way because line-of-sight is used for determining how far a light shines :)
17:12:51 <vtra238_> hi everyone
17:13:13 <Pseudonym> G'day.
17:13:59 <vtra238_> i'm just experimenting on IO progs so would u mind helping
17:14:57 <Pseudonym> Depends on the problem.
17:15:06 <Pseudonym> Usual etiquette is just to ask away.
17:15:21 <vtra238_> ok i'll show what i've written
17:15:29 <vtra238_> ask1 :: IO String
17:15:29 <vtra238_> ask1 = do
17:15:29 <vtra238_>       putStrLn "Hi!, what's your name?"
17:15:29 <vtra238_>       getLine
17:15:29 <vtra238_> ask2 :: IO String
17:15:30 <vtra238_> ask2 = do
17:15:32 <vtra238_>        name <- ask1
17:15:34 <vtra238_>        putStrLn ("How are you " ++ name ++ "?")
17:15:36 <vtra238_>        getLine
17:15:38 <vtra238_> main :: IO ()
17:15:40 <vtra238_> main = do
17:15:42 <vtra238_>        name <- ask1
17:15:44 <vtra238_>        how <- ask2
17:15:46 <vtra238_> --       putStrLn ("Hello " ++ name ++ "!")
17:15:48 <vtra238_>        putStrLn ("I'm " ++ how ++ " too!")
17:16:04 <vtra238_> the problem is i want to get ask2 to get the name but i don't want to run ask1 again
17:16:47 <Pseudonym> Here's a clue:
17:16:53 <Pseudonym> ask2 :: String -> IO String
17:17:08 <vtra238_> ohh
17:17:57 <vtra238_> so would it treat the name <- ask1 as the input string?
17:18:05 <Pseudonym> Uhm.
17:18:08 <Pseudonym> Not quite.
17:18:16 <Pseudonym> Here's another clue:
17:18:21 <Pseudonym> putStrLn :: String -> IO ()
17:20:05 <vtra238_> ohh so when i call the putStrLn it asks for that string
17:20:18 <vtra238_> i.e name
17:20:40 <Pseudonym> I think my clues might be a bit obscure.
17:20:46 <Pseudonym> ask2 :: String -> IO String
17:21:03 <Pseudonym> You can make a version of ask2 which takes name as an argument.
17:21:20 <Pseudonym> ask2 name = do putStrLine "whatever"
17:21:27 <Pseudonym> Then from main, just pass it in.
17:21:36 <Pseudonym> main = do name <- ask1
17:21:44 <Pseudonym>           how <- ask2 name
17:22:11 <vtra238_> ohh
17:22:24 <vtra238_> so when i have arguments i need to bind that with the function
17:23:24 <Pseudonym> I don't really understand that question.
17:23:35 <vtra238_> so in main the variable name is passed on to ask2 ...  ?
17:23:41 <Pseudonym> Right.
17:24:01 <vtra238_> ahh i c
17:24:28 <Pseudonym> As a matter of interest, this wouldn't be a John Shepherd subject, would it?
17:24:43 <vtra238_> who's john shepherd?
17:24:54 <vtra238_> i'm just doing this for fun
17:25:02 <vtra238_> we haven;t learn't this in lectures yet
17:25:03 <Pseudonym> Just checking.  You're on from UNSW, he's a lecturer there.
17:25:07 * Pseudonym nods
17:25:15 <vtra238_> oh ok
17:25:24 <Pseudonym> I knew him ten years ago when he was at Uni Melbourne
17:25:29 <vtra238_> oh i c
17:25:37 <vtra238_> u from which uni?
17:26:01 <Pseudonym> At the moment, I nominally work for RMIT.
17:26:21 <vtra238_> that in the states?
17:26:26 <Pseudonym> Actually it's a project of RMIT which is soon to be privatised, so it doesn't feel like working for RMIT.
17:26:31 <Pseudonym> No, Melbourne.
17:26:36 <vtra238_> oh ok
17:26:37 <vtra238_> cool
17:26:40 <Pseudonym> www.mds.rmit.edu.au
17:26:50 <vtra238_> so u still use haskell?
17:27:33 <Pseudonym> Yup.
17:28:13 <vtra238_> oh ok...hmm i've never heard of haskell until a few weeks ago
17:28:45 <Pseudonym> When John Shepherd taught me functional programming, there was no Haskell.  There was Miranda and a few cheap knock-offs (Orwell and Miracula).
17:29:14 <vtra238_> oh...would u call java functional?
17:29:20 <Pseudonym> No.
17:29:25 <Pseudonym> I'd call it object oriented.
17:29:29 <vtra238_> oh its object oriented
17:29:35 <vtra238_> yea i forgot
17:29:47 <vtra238_> i learn;t that in high school
17:29:55 <Pseudonym> It's kind of hard, because languages often cross paradigms.
17:30:02 <Pseudonym> Java is procedural and object-oriented.
17:30:19 <Pseudonym> Haskell is pure functional, but it's related to other declarative languages, like logic languages.
17:30:38 <vtra238_> yea, i'm more used to object, and procedural
17:30:39 <Pseudonym> C++ supports lots of paradigms (but not functional).
17:30:45 <vtra238_> ahhh
17:30:51 <vtra238_> what about C
17:30:58 <Pseudonym> C is very much 3GL procedural.
17:31:11 <Pseudonym> It was designed as a high-level assembler.
17:31:11 <vtra238_> similar to java isn;t it?
17:31:19 <Pseudonym> Only superficially.
17:31:26 <vtra238_> hmm i c
17:31:29 <Pseudonym> In the same way that Latin is similar to English.  They look the same.
17:31:48 <Pseudonym> Java is closer to Modula 3, even though they look quite different.
17:32:00 <vtra238_> oh ok...so haskell can do stuff like prolog
17:32:08 <Pseudonym> ort of.
17:32:38 <Pseudonym> Haskell doesn't really do Prolog-style unification without some scaffolding.
17:33:06 <Pseudonym> Haskell is more like a strongly moded Prolog.  Mercury or something like that.
17:33:38 <vtra238_> i c
17:33:43 <Pseudonym> In Prolog, you can run predicates backwards or forwards.  Not in Haskell.
17:34:03 <Pseudonym> But it's part of the same family of declarative languages.
17:34:09 <vtra238_> oh ok ... yea the order does matter i suppose
17:34:33 <Pseudonym> In Haskell, all function arguments are "input" and the return value is "output".
17:34:43 <Pseudonym> In Prolog, it's much freer than that.
17:34:55 <dark> With Prolog, optimizing is black magic.  With Haskell, it's, um, magic with a spellbook.
17:35:02 * Pseudonym laughs
17:35:06 <Pseudonym> That's pretty close to the truth.
17:35:10 <vtra238_> haha
17:35:30 <Pseudonym> Optimising Prolog also depends very much on the implementation.
17:35:39 <Pseudonym> Indexing and so on.
17:36:16 <vtra238_> is it easy to implement haskell for online applications
17:36:43 <Pseudonym> So Haskell is kind of like Prolog, only with strong types, strong modes, no nondeterminism and a more understandable computation rule.
17:37:37 <Pseudonym> What do you mean "online applications"?  You mean like a web application server?
17:37:56 <vtra238_> yea
17:38:05 <vtra238_> somehting like database manipulation
17:38:26 <vtra238_> or anything realyl
17:38:27 <Pseudonym> There currently aren't any good DBMS interfaces, but there are people working on that.
17:39:02 <dark> Ark, I was smitten by the parser.  "move 0 -1" was parsed as "((move 0) - 1)", and instead of telling me, it was complaining that the next list element (move 0 1) had the wrong type.
17:39:26 <Pseudonym> Currently, Haskell isn't really as useful as other languages for that particular application domain.
17:39:26 <Pseudonym> Not like Perl or Java.
17:39:44 <Pseudonym> Oh, yeah.
17:40:00 <dark> Pseudonym: shapr is a fan of Haskell Server Pages or something.
17:40:15 <vtra238_> yea ok, just curious, coz i'm working on a website
17:40:42 <Pseudonym> I haven't really looked at it, but isn't it pretty much dependent on Win32?
17:40:50 * Pseudonym might be wrong about that
17:41:56 <vtra238_> i dunno ... but until then i suppose i'll use what i have
17:43:48 <Pseudonym> dark: At least you didn't have one Edinburgh Prolog's version's famous error.  "Your program contains one or more syntax errors."
17:44:28 <vtra238_> haha
17:44:47 <vtra238_> gee thats a helpful error msg
17:44:52 <Pseudonym> Yes. :-)
17:45:36 <vtra238_> btw does anyone here know how to use bitchX
17:45:54 <dark> Cool, I wonder what "spurious 8259A interrupt: IRQ7" means.
17:46:15 <vtra238_> looks like something to do with memory
17:46:26 <Pseudonym> What were you doing when you got that?
17:46:52 <dark> Pseudonym: It was supposed to be reading input via curses getch().
17:48:23 <dark> Apparently 8259A is my interrupt controller, and IRQ7 isn't mapped to any device.
17:48:29 <Pseudonym> Yes.
17:48:39 <Pseudonym> vrta238_ is right, it's usually a hardware problem.
17:48:44 <dark> Triggering hardware errors is pretty impressive for a "functional" program :)
17:49:07 <vtra238_> wow, never heard of that
17:49:19 <Pseudonym> Yes, I would think so!
17:49:21 <Pseudonym> Is it repeatable?
17:49:38 <vtra238_> you could end up writing a virus or something
17:49:50 <vtra238_> maybe ...
17:50:37 <dark> Yes, it's repeatable.
17:50:43 <Pseudonym> Cool, our first Haskell virus!
17:51:22 <vtra238_> =D
17:51:27 <dark> I think I see what's happening.  My main loop first calls get_key (which calls getch), and looks up the result in the keymap.  If the key is not in the keymap, main_loop flashes the screen and recurses.
17:51:59 <dark> Apparently getch is instantly returning something that it interprets as a weird key, which causes a tight screen-flashing loop :)
17:52:08 <vtra238_> oh whats the command to flash the screen? is it cls?
17:52:18 <dark> vtra238: I'm using the curses flash() call.
17:52:29 <toadx> does the haskell-mode for emacs have any easy way to re-indent an entire function. I just renamed a function, and now I have to hit tab, like 100 times, to fix the indentation??
17:52:35 * dark notes that Haskell has excellent facilities for calling C funtions.
17:52:59 <Chilli> toadx: why not move the whole block in one go
17:53:00 <dark> toadx: I think there's an indent-region function that's not haskell specific.
17:53:08 <Chilli> not re-indenting, but as a block move?
17:53:23 <toadx> Chilli: with delete-rectangle?
17:53:38 <dark> Anyway, looks like my console isn't happy with the rapid flashing.
17:54:09 <Chilli> eiterh that or using C-x C-i with a numeric prefixarguemnt
17:54:31 <Chilli> eg, M-2 C-x C-i  to shift indent two to the right
17:54:39 <Chilli> (negative arg to go left)
17:55:45 * dark points at indent-region again, which does indent-according-to-mode on a selected region.
17:56:47 <Chilli> problem with indent region and haskell mode is that often enough Haskell mode doesn't indent as I want it
17:57:06 <Chilli> so9, indenting a whole region has a good chance of messing things up
17:57:13 <Chilli> (at least for me)
18:00:24 <vtra238_> bye all, time to do some study, thanks for your help Pseudonym
18:02:27 <dark> Aha, curses really hates it if I do getChar and getch() in the same program.
18:05:22 <Pseudonym> So don't do that.
18:05:56 <dark> Well, yeah :)
18:06:35 <dark> I was using getChar for testing in places, because I hadn't finished get_key yet :)
18:07:07 <Pseudonym> What are you working on, incidentally?
18:07:18 <dark> A roguelike game.
18:07:32 <dark> I want to take all the things I like about nethack, crawl, and omega, and put them in one game, written in a language I like:)
18:07:59 <tmoertel> "The Dungeons of Foldr"
18:08:02 <Pseudonym> My former supervisor worked on the original rogue.
18:08:13 <dark> tmoertel: Hmm, nice :)
18:08:29 <dark> tmoertel: Yeah I guess a lot of Haskell concepts would make for good in-game names.
18:08:38 <dark> tmoertel: Especially stuff like random scroll titles :)
18:08:42 <Pseudonym> The monomorphism restriction hits. You feel weaker.
18:09:03 <dark> "You find a scroll of (Enum a) => a -> Int"
18:09:15 <Igloo> lol
18:09:40 <tmoertel> "You have been lifted into the Continuation Monad. You feel jumpy."
18:10:55 <Chilli> :-))
18:13:38 <dark> Okay, now my program correctly shows a blank screen, and does nothing when I press the right keys.  Progress can begin :-)
18:24:29 <Chilli> now that he can begin, he goes to bed...
18:34:49 <jens> funny, i'm writing a "game" too
18:35:08 <jens> well actually a icfp contest gui ;-)
18:35:33 <jens> right now it has some io races "issues" though...
18:36:03 <Chilli> oh, cool
18:36:39 <jens> hope it will be working soon
18:36:51 <Chilli> I am currently considering to use something similar to the icfp contest as my second assignment for my computing course
18:37:09 <jens> fun :)
18:37:16 <Chilli> if I do that, could I maybe get your gui?
18:37:58 <jens> sure - it will be under gpl anyway :)
18:38:08 <Chilli> good :-)
18:38:28 <Chilli> so, how did you guys go with the contest?
18:40:03 <jens> i'll let the others answer that.  i think we have a decent if not super-quick entry
18:41:07 <Chilli> I got the impression that it is quite diddicult to find world setups where with multiple robots there is not a lot of luck involved in the relative scores
18:41:25 <Chilli> Did you have that impression, too?
18:45:57 <jens> and lots of bots pushing and shoving in the tunnels...
18:47:32 <Chilli> yeah
18:48:18 <Chilli> SPJ, Julian Seward, Rob Ennals, Gerg Morissett and I did a lightning entry
18:48:57 <Chilli> I tweaked it yesterday a bit after they changed the rules, to submit a variant for the final deadline
18:49:16 <Chilli> the second version behaves much more cleverly, I think
18:49:26 <Chilli> but it doesn't necessarily score much better
18:49:27 <jens> really
18:49:41 <jens> mmmmh
18:50:05 <Chilli> "behaves more cleverly, I think" means, I looked at it, it does behave nicer
18:50:27 <Chilli> but eg the random start posiution seems to have more influence on the score
18:50:36 <Chilli> which is kind of frustrating
18:50:52 <jens> ah
18:51:07 <Chilli> I guess, you ran your robot also against itself
18:51:13 <Chilli> did you make similar obeservations?
18:51:44 <jens> to be honest i think much about the scoring
18:51:56 <jens> to be honest i _didn't_ think much about the scoring
18:52:12 <Chilli> ok
18:52:27 <Chilli> how many lines of code did you guys end up with>?
18:54:13 <jens> seems to be under 2000
18:54:18 <jens> how about you?
18:54:44 <Chilli> 2000
18:54:50 <Chilli> pretty much exactly
18:55:18 <Chilli> 90-95% of it in the first 24h :-)
18:55:22 <jens> quick coding, eh ;-)
18:56:07 <toadx> okay, easy question, I want to scan a file, look for a line that looks like '*ModelName:     "the_model_name"' and return just 'the_model_name' as a String. Should I use Regex, ParserCombinators, or something completely different?
18:57:12 <Chilli> use lines followed by a filter
18:57:21 <Chilli> something like
18:58:37 <Chilli> case filter ("*ModelName:" `List.isPrefixOf`) . lines of
18:58:58 <Chilli>   (str:_) -> <stuff is in str>
18:59:07 <Chilli>   _ -> error "not found"
18:59:17 <Chilli> quick and easy
18:59:52 <toadx> to strip the final " should I just use a second filter?
19:00:19 <Chilli> depends on how flexible the syntax is
19:00:44 <Chilli> you can just use break to cut of the line at the first " and then another break to cut off at the second "
19:01:02 <Chilli> or a takeWhile (/= '"')
19:02:18 <Pseudonym> As a matter of interest, have you guys ever seen Robo Rally?
19:02:27 <toadx> cool, thanks!
19:02:32 <Pseudonym> It's a board game which looks a lot like the ICFP contest.
19:05:17 <Chilli> Pseudonym: really?
19:05:48 <Pseudonym> Yup.
19:05:55 <Pseudonym> A friend of mine used to play it.
19:06:22 <Pseudonym> http://www.wizards.com/roborally/welcome.asp
19:09:11 <Chilli> hmm, maybe they got their inspiration there
19:10:58 <tmoertel> jens: what does you gui do?
19:12:10 <jens> tmoertel: short answer - not as much as i'd like it too!  :-)
19:12:30 <tmoertel> jens: do you play back captured game data?
19:12:57 <jens> well current it connect to a server as an observer and display the game live
19:13:00 <Chilli> that would be cool, stepping back and forth in time
19:13:07 <jens> yeah
19:13:21 <tmoertel> I wrote a proxy that sits betwen a robot and the server and records
19:13:24 <Chilli> how did you guys observe the game during the contest?
19:13:34 <Chilli> log files with board dumps?
19:14:13 <jens> yep
19:14:35 <jens> primitive but it works well enough for a few days i guess
19:14:46 <Chilli> sure
19:14:48 <Chilli> did the same
19:15:15 <jens> i'd like to do a manual mode too, in the gui
19:15:58 <Chilli> for single stepping?
19:16:23 <jens> i mean a user controlled bot
19:19:34 <Chilli> ah, ok
19:25:02 <tmoertel> are any icfp contest team pages up yet?
19:27:12 <Chilli> ae you planning to do one?
19:27:17 <Chilli> ae = are
19:27:27 <tmoertel> i didn't enter this year, so no
19:27:35 <tmoertel> ;-)
19:28:30 <Chilli> oh, ic
22:43:32 <vtra238> hi all
22:48:52 <Verbophobe> Hey hey.
