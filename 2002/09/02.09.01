00:30:13 <clinton> what do I have to do to "print []" to make it work? I think I have to define [] type, but I forget how..
00:34:25 <ibid> it is predefined...
00:34:33 <ibid> which error message do you get?
00:38:15 <clinton> "Ambiguous type variable(s) `a' in the constraint `Show a'"
00:44:10 <ibid> ahh
00:44:21 <ibid> print ([]::[Int]) vaikkapa :-)
00:44:42 <ibid> problem is it does not know which a for [a] is to be used there
00:49:35 <ibid> s/vaikkapa/for example/ sorry for talking in finnish :-)
00:57:56 <clinton> ah, thanks... I have one more type problem...
00:58:05 <clinton> makeArray = array ((0,0),(0,0)) [((0,0),1)]
00:58:14 <clinton> what is the type of makeArray?
00:59:11 <clinton> I've tryed "makeArray :: Array Int Int" but that doesn't work...
00:59:41 <ibid> Prelude> :type Array.array ((0,0),(0,0)) [((0,0),1)]
00:59:41 <ibid> forall t t1 e.
00:59:41 <ibid> (Num e, Num t1, Num t, GHC.Arr.Ix (t, t1)) =>
00:59:41 <ibid> GHC.Arr.Array (t, t1) e
00:59:57 <ibid> says GHCi
01:00:37 <clinton> ah, thanks, I'll use that ":type" in the future.
01:00:47 <ibid> Hugs says
01:00:48 <ibid> Array> :type array ((0,0),(0,0)) [((0,0),1)]
01:00:48 <ibid> array ((0,0),(0,0)) [((0,0),1)] :: (Ix a, Ix b, Num c, Num b, Num a) => Array (a,b) c
01:01:46 <clinton> what does forall mean?
01:03:08 <ibid> "for all types t, t1 and e"
01:03:19 <ibid> you can just ignore it, it's not haskell 98
01:03:51 <ibid> it seems the hugs type is more useful to you
01:04:36 <clinton> ok, thank you very much... the type system is a little more clearer now...
01:42:44 <PMode> re
02:13:20 <Heffalump> morning
02:17:24 <PMode> ;)
02:17:50 <Heffalump> how goes it?
02:18:02 <PMode> good.
02:18:06 <Heffalump> cool
02:18:07 <PMode> but nothing working :)
02:18:15 <Heffalump> ah :-)
02:18:19 <PMode> but the ideas are in our heads
02:18:20 <Heffalump> our bot works but is fairly stupid
02:19:32 <PMode> yes, our test-one also :)
02:19:47 <PMode> choose a random direction and probably take and drop
02:20:42 <Heffalump> ah, ours is a bit better than that
02:20:56 <PMode> the next evolution will be better *G*
02:21:10 <Heffalump> :-)
02:34:15 <ustenzel> Can anyone help me get rid of too much lazyness?
02:34:27 <Heffalump> probably
02:34:47 <Heffalump> what's the problem?
02:35:10 <ustenzel> Say I essentially have a state thread where the state is something complex.  Maybe a FiniteMap.
02:35:37 <Heffalump> where the keys are something like Robots or Packages? :-)
02:35:41 <ustenzel> Everytime I change sth in that map, I is is not (yet) evaluated and takes up memory.
02:35:51 <ustenzel> Yeah, probably robots :)
02:35:53 <Heffalump> have you tried using seq?
02:36:32 <ustenzel> seq gets annoying pretty quickly.  It evaluates just a bit (WHNF, most is still unevaluated).
02:36:47 <Heffalump> do you know about deepSeq?
02:37:08 <ustenzel> read about it... does it work as advertised?
02:37:45 <Heffalump> I've never used it
02:37:50 <Heffalump> but the mailing list seems to think it does
02:38:12 <Heffalump> can you give a bit more details about what needs to be evaluated?
02:38:13 <ustenzel> And if so, I need to have an "instance DeepSeq (FiniteMap a)", which I'd need to define myself, right?
02:38:39 <Heffalump> I think you just want instance DeepSeq b, where your FiniteMap type is FiniteMap a b
02:39:00 <Heffalump> given that presumably your Ord instance for a evaluates to check ordering
02:39:10 <Heffalump> then, just before you insert, do a deepSeq
02:39:31 <ustenzel> What about the internals of the FiniteMap?
02:40:10 <ChilliX> just a word of caution here
02:40:14 <ustenzel> It is a tree, needs to get rebalanced, which is again lazy.
02:40:46 <ChilliX> forcing the evaluation of large data structures that are repeatedly used can easily use up much *more* memory than leaving the stuff lazy
02:41:17 <ChilliX> unless you have profiled this code and are sure that what your are trying to fix is a problem, it might be a waste of time or even counterproductive
02:41:17 <Heffalump> ustenzel: the unrebalanced tree will take up the same space as the rebalanced tree, though
02:41:57 <ustenzel> Heffalump: Right.  But the thunk that will eventually be evaluated to a balanced tree will take that memory plus some.
02:43:27 <Heffalump> errm, yeah, but, a tiny amount in comparison to the size of the tree itself
02:43:37 <Heffalump> surely?
02:43:57 <ustenzel> Done repeatedly it adds up.
02:44:04 <Heffalump> hmmm.
02:44:11 <Heffalump> if you're sure...
02:44:14 <Heffalump> have you profiled this?
02:44:17 <ustenzel> I'm checking if the map is the problem or just its contents.
02:44:35 <Heffalump> I'm not sure if you can get at the internals of FiniteMap to instance DeepSeq it
02:44:55 <ustenzel> I'm sure I can't :)
02:45:02 <Heffalump> well, you have the GHC source
02:45:06 <Heffalump> so you /can/
02:45:30 <ustenzel> Or at least don't want.  There is not much point in using ready made data structures just to muck with their internals.
02:45:53 <Heffalump> well, that's what you really have to do to completely force evaluation
02:46:18 <Heffalump> would forcing evaluation of a lookup from the FiniteMap force evaluation of the map itself?
02:48:31 <ustenzel> Don't think so.  That evaluates "just enough", maybe a single node or so.
02:49:06 <Heffalump> well, the entire tree down to that node, presumably
02:49:13 <Heffalump> are you having major space problems, then?
02:49:25 * Heffalump is rather worried about space usage on large maps
02:51:04 <ustenzel> As long a the FM gets evaluated, there is no problem.  If it is done lazyly, the space problem occurs within seconds.
02:51:55 <ustenzel> Ah -- scratch that!
02:52:21 <ustenzel> The FiniteMap is fine, it is strict enough.
02:52:57 <Heffalump> thought it would be :-)
02:53:10 <ustenzel> I need to use some strict data constructors, then do a seq before insertion.  This way it doesn't grow.
02:54:07 <ustenzel> Wouldn't have believed that a buch of integers could need two strictness annotations...
02:55:46 <ustenzel> About the ST module -- if I understand correctly, the ST module is designed for exactly this kind of problem.
02:56:05 <ustenzel> How much strictness does it provide?
03:06:27 <Heffalump> well, it should do in-place updates
03:07:52 <ustenzel> Only when using MutVars, right?
03:09:30 <Heffalump> well yes
03:09:34 <Heffalump> YM STRefs?
03:17:55 <ustenzel> yeah, some paper called them MutVars.
03:18:46 <Heffalump> ah, ok
03:18:57 <ustenzel> Whatever, these mutable things feel better in imperative languages.
03:19:43 <Heffalump> anyway, looks like you want Control.Monad.ST.Strict
03:20:06 <Heffalump> GHC.ST definitely does in-place updates, but I don't think it is strict
03:20:20 <Heffalump> of course you need to think very carefully about what you want from strictness
03:20:54 <ustenzel> Hm, so ST evaluates to WHNF, LazyST doen't.  
03:22:18 <ustenzel> ...which doesn't relieve me from thinking about lazyness and space leaks :)
03:22:56 <Heffalump> but using a state monad ought to guarantee that your previous state isn't left lying around
03:25:01 <ustenzel> Does it ever matter?  Seems to me the only difference is saved time, as no garbage collection is necessary.
03:26:06 <Heffalump> if your state monad has an imperative implementation, yeah
03:26:48 <Heffalump> and given the types of Control.Monad.ST, I guess it does
03:26:57 <ustenzel> And if not?  What do i gain?
03:26:59 <Heffalump> s/it does/they do/
03:27:04 <Heffalump> sequencing
03:27:16 <Heffalump> reduced possibility of state leaks
03:27:38 <ChilliX> My rule of thumb with all this stuff is, unless you *know* that you need it, chances are, you don't.
03:27:49 <Heffalump> chilli: <aol>
03:28:39 * Heffalump tried making his state monad strict once and slowed down his code massively
03:29:26 <ustenzel> Actually, the first monad that was explained to me was the state transformer.  However, the simple form, with no 2nd-order type, without STRefs.
03:29:42 <ustenzel> I couldn't quite follow what this was all about.
03:30:49 <ustenzel> Are there any articles online that explain how to use monads, not only for IO?
03:33:18 <ChilliX> ustenzel: yes, check out Simon Peyton Jones and John Launchbury's paper called "State in Haskell"
03:33:18 <jewel> yes, there are a few
03:33:41 <ChilliX> the other one to read is SPJ's Tackling the Awkward Squadf
03:34:06 <ustenzel> I read both.  They don't give a feeling for monads in general.
03:34:32 <ChilliX> to theoretical?
03:34:34 <ustenzel> Im thinking more of Maybe, Lists and Parsers.
03:34:37 <ChilliX> to = too
03:34:43 <ChilliX> ah, ok
03:34:49 <ChilliX> Wadler's Comprehending Monads
03:35:05 <ChilliX> explains about the different kinds of non-ST monads
03:35:13 <ustenzel> Link?  Or is it in dead tree format?
03:35:24 <ChilliX> Google for Phil Wadler
03:35:42 <ChilliX> on his publications page under monads
03:37:44 <ustenzel> Found it, thanks.
03:38:03 <ChilliX> :-)
04:03:23 * shapr awakens
05:58:09 <shapr> whew
05:58:15 <shapr> hi Ghazgkull
05:58:29 <Ghazgkull> Hola.
05:59:14 <shapr> Ghazgkull: are you learning Haskell? or a long time user?
05:59:49 <Ghazgkull> Neither.
05:59:58 <shapr> oh...
06:00:00 * Ghazgkull scratches his head.
06:00:30 <shapr> midway between the two?
06:00:37 <shapr> or maybe you're here for an entirely different reason?
06:00:56 <Ghazgkull> Trying to figure out why my client is/was drawing your name differently than everyone else.
06:01:07 <Ghazgkull> Psuedo-random lurker.
06:01:12 <Heffalump> maybe it just likes hime
06:01:24 <shapr> Yah, I'm just very likable. That must be it.
06:01:28 <Ghazgkull> Could be. :)
06:02:08 <Ghazgkull> I work on the Eclipse project... a few days ago I had a conversation with someone about the fact that a Haskell plugin is in the works.
06:02:17 <Ghazgkull> So here I sit. Lurking. :)
06:04:37 <shapr> neato, I'd like to see a haskell plugin.
06:05:23 <Ghazgkull> I don't recall what stage of development it's in... so it could be a while before there's actually a working IDE.
06:05:33 <shapr> of course, I'm more interested in hIDE, since it just might be scriptable with haskell soon.
06:06:21 <shapr> and hIDE is a framework that integrates emacs & vim for actual editing... since I'm an emacs power user I like that.
06:06:29 * Ghazgkull nods.
06:06:32 <shapr> otoh, SWT is nifty stuff too
06:06:47 <shapr> I'd like to see Haskell able to use SWT
06:07:34 <Ghazgkull> You can use external editors with Eclipse, btw.
06:29:09 <Ghazgkull> Hasta.
10:36:31 <cleverdra> Does anyone know what the CVSROOT should be for the Glasgow Haskell Compiler?  All I can find on sourceforge or haskell.org is the nothin and cvsweb, respectively.
10:37:45 <shapr> cleverdra: look at http://haskell.org/ghc/
10:37:55 <shapr> there's a get/build ghc from CVS howto there as well
10:39:09 <cleverdra> I've been looking at that page, but I only now noticed the 'CVS Cheat Sheet'.  Thanks.
10:39:18 <shapr> sure, np
10:39:28 <shapr> cleverdra: why are you building from CVS?
10:39:57 <cleverdra> shapr - I'm not; I'm getting the Commentary.
10:40:16 <cleverdra> shapr - it's either wget or cvs, since I need an offline copy.
10:40:46 <shapr> cleverdra: offline?
10:40:56 <shapr> what commentary?
10:40:58 * shapr is way lost
10:41:16 <shapr> cleverdra: it's really cool to finally know that you're ayrnieu :-)
10:41:17 <cleverdra> http://www.cse.unsw.edu.au/~chak/haskell/ghc/comm/
10:41:25 <shapr> oh, that commentary!
10:41:31 <shapr> yah, is good stuff.
10:42:01 * shapr is writing for-pay Python code >:-/
10:42:29 <cleverdra> shapr - cool.  What kind?
10:43:15 <shapr> zope stuff
10:43:23 <shapr> I have enough paying zope work for several people.
10:43:34 <shapr> this necessitates that I hack up new abstractions on a regular basis.
10:43:36 <shapr> I like that part.
10:44:22 <shapr> I hope to fit Haskell into my current for-pay jobs.
10:53:26 <cleverdra> well, it seems that the Haskell people do not know how to login anonymously to their own CVS.  /me shrugs
10:58:40 <shapr> cleverdra: I have the fptools part of the tree via anon cvs
10:58:44 <shapr> that contains ghc
10:59:28 <shapr> cleverdra: CVS/Root in my fptools dir is ":pserver:anoncvs@glass.cse.ogi.edu:/cvs"
11:02:02 <cleverdra> cvs login: authorization failed: server glass.cse.ogi.edu rejected access to /cvs for user anoncvs
11:02:56 <cleverdra> Is there a password that I don't see?
11:03:26 <shapr> did you try elem password {"","cvs","anoncvs","anon"}  ?
11:04:38 <cleverdra> um, 'cvs' is the password.
11:04:48 <shapr> cool
11:05:19 * cleverdra is reminded of the time he rebooted his windows box because of some security software with a default password: password
11:05:34 <cleverdra> thanks =)
11:06:27 * shapr grins
11:07:37 <shapr> If I can't figure something out, I try all the [solution | solution <- [brain dead,obvious]] that I can think of.
11:09:35 <shapr> have you realized that list comprehensions are like having enough legs to fill all of the Trousers Of Time at the same time?
11:09:41 <cleverdra> Particularly reasonable, when you put it that way.
11:09:57 <shapr> er, the list comp thing?
11:10:09 <cleverdra> Yes.  I don't quite understand teh ToT thing.
11:10:31 <shapr> you need to read a book called "The Color of Magic" by Terry Pratchett
11:10:35 <shapr> er, might be Colour
11:10:46 <cleverdra> Yes, I've heard of it =)
11:10:57 <shapr> ok, read that book, and the rest of the books in the series.
11:11:08 <cleverdra> I've read several, but not that one.
11:11:10 <shapr> then the Trousers of Time will your favorite pair of pants.
11:11:23 <shapr> well, the Trousers turn up in several of those, I forget which ones.
11:12:01 --- topic: set to 'hash-haskell ICFP team on #haskell-icfp: observers welcome (no spies!) (we're rockin!) || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.2.3 released http://www.cse.unsw.edu.au/~chak/nepal/ || list comprehensions == results from every leg in the Trousers Of Time' by shapr
14:25:59 <dark> What does the note about list comprehensions in the topic mean?
14:48:23 <shapr> dark: it's a Terry Pratchett reference
14:51:46 <dark> I know what the Trousers of Time are, but I don't understand what they have to do with list comprehensions :)
14:52:19 <shapr> a list comp is some kind of monad, that shows all of the "web of futures"
14:52:23 <shapr> I forget where I read that :-)
14:52:36 <shapr> the comprehension returns all of those possible futures
14:53:27 <dark> But... my comprehensions return possible heres and nows :)
14:53:44 <dark> Like, all map positions that have a monster on them.
14:54:43 <dark> Speaking of monads, I'm trying to figure out what ST is for.  I thought it meant "state", but I see no way to access the state.
14:55:30 <Heffalump> use STRefs
14:55:42 * shapr bounces
14:56:07 <shapr> hi specialx, I don't think I've seen you here before. Looking for Haskell info?
14:56:27 <Heffalump> this channel has grown a lot lately
14:56:35 <Heffalump> even if there are two of Igloo and Chilli :-)
14:57:14 <shapr> yup, it's true.
14:57:28 <shapr> I think dwltr is new here also.
14:59:32 <dark> Heffalump: Oh, I see.  I missed them because they were off in their own file :)
14:59:43 <Heffalump> :-)
15:01:38 <dark> Hmm I think I prefer the interface of the State monad.  But is ST faster?  Its code seems "more native" :)
15:01:53 <Heffalump> ST will be implemented using real updated state
15:02:02 <Heffalump> for the State monad you'll have to hope the compiler figures that out
15:02:15 <dark> Hmm.
15:02:36 <Heffalump> I did try it for something I did and didn't find it was much better than State
15:02:47 <Heffalump> but it wasn't a big bit of the code so I didn't get any good performance tests
15:03:58 <dark> In my case, the actual State type will be fairly small, it just contains FiniteMaps and such.
15:04:18 <dark> I'm guessing that ST's semantics will affect only the top-level type.
15:04:48 <dark> This is a convenient guess, you see, because I wanted to use State anyway :-)
15:05:00 <Heffalump> wdym affect only the top-level type?
15:05:35 <dark> Well suppose my state type is called World.  It's a single-constructor type, and one of its arguments is a FiniteMap.
15:06:30 <dark> Now if I wanted to, say, delete a key from that FiniteMap, I'd have to get the World out of an STRef, right?  And then put the changed World back in the STRef, with its FiniteMap operated on.
15:07:38 <dark> It looks to me like the operation on the FiniteMap will be the same, regardless of which monad I use.
15:08:18 <dark> Oh, I need to go put my girl to bed :)
15:09:45 <Heffalump> you can use multiple STRefs in one ST computation, btw
15:18:47 <shapr> hi dblack
15:27:34 <dblack> hi shapr
15:27:42 <dblack> how's it going?
15:27:51 * dblack has been very ruby-absorbed lately :-)
15:29:17 <shapr> dblack: icfp contest for another eighteen hours :-)
15:32:47 <Heffalump> 20.5, actually :-)
15:44:46 <dark> Heffalump: Hmm, true.  I guess I don't need the World type with ST.
15:45:36 <Heffalump> word of advice: with State, make your World type a record
15:45:57 <dark> Yes I was planning to :)  State has all these nice operations like "gets"
15:46:31 <Heffalump> is anyone doing any impure IO (trace etc) in checked-in code?
15:46:41 <shapr> psst, wrong channel
15:46:48 <Heffalump> oops.
18:07:53 * shapr bounces
