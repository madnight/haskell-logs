00:06:23 <dennisb> japp
00:07:05 <andersca> hey
00:07:14 <andersca> are you at work?
00:07:21 <dennisb> andersca: not now
00:08:09 <dennisb> but i'm in a hurry, I have work waiting for me
00:12:56 * dennisb is about to go to the tram
00:15:07 * dennisb is gone
00:30:12 <Chilli> agone
00:30:16 <Chilli> oops
00:44:47 <Marvin--> andersca?
00:45:01 <Marvin--> andersca: how the heck do I change the default font used by gtk2 programs?
00:45:28 <andersca> Marvin--: just put
00:45:34 <andersca> gtk-font-name="Arial 10"
00:45:37 <andersca> in your .gtkrc-2.0
00:46:23 <Marvin--> phew, thanks
00:49:21 <Marvin--> Now I just wish that Nautilus' sidebar tree was a bit more like Konqueror's :)
00:49:58 <andersca> how?
00:50:47 <Marvin--> Nautilus' tree is just the file system tree. Well, actually I like how Xandros' "file manager" (modded konqueror I think) looks
00:51:01 <andersca> oh right
00:51:06 <Marvin--> http://spud.osnews.com/osnews/img/1762/xandros2.jpg
00:51:07 <andersca> yeah, we're gonna work on that :)
00:51:19 <Marvin--> I mean, just having the tree is rather useless
00:51:28 <andersca> need multiple roots...
00:51:42 <Marvin--> yay, now the tear-off menus work too
00:51:52 <Marvin--> err, but not in gconf-editor
00:52:06 <andersca> fixed in HEAD I think
00:52:10 <Marvin--> ah
00:52:24 <andersca> I'm gonna start releasing from head when we do nightly snapshots of 2.1
00:52:46 <Marvin--> oh heck, gotta run
00:52:48 <Marvin--> see you
00:52:54 <andersca> later
00:57:08 <norpan> hi all
00:57:34 <andersca> hello mr norp
07:19:29 <andersca> hey Marvin--
07:19:37 <Marvin--> hullo
07:19:47 <Marvin--> man did I botch today's lesson :)
07:24:05 <andersca> botch?
07:24:23 * andersca thought it was ok
07:26:00 <Marvin--> what I did with the make-this-grammar-unambigous problem was just horrible
07:26:07 <Marvin--> I confused _myself_
07:26:47 <andersca> oh that
07:26:52 <andersca> it was a little tricky, yeah 
07:27:41 <Marvin--> A much better approach (I was too unprepared for the lesson) would've been to draw the two ASTs for the ambiguity and say "I want only this one" and go in that direection instead
07:27:48 <Marvin--> Next week I think I won't use the slides at all
07:28:02 <Marvin--> It's too hard to do things gradually when using slides
07:28:21 <andersca> and the oh machine in es53 is really sucky
07:28:29 <Marvin--> yeah :(
07:30:11 <andersca> who wrote the ebnf program?
07:30:56 <Marvin--> Patrik-someone.. He was an assistant on the course last year
07:31:22 <andersca> would have been nice to have x86 binaries of that program
07:35:17 <norpan> source code!
07:35:46 <andersca> that too :)
07:36:45 <Marvin--> andersca: ~progs/Ebnf
07:37:06 <Marvin--> it looks like it's a humongous amount of code though
07:37:50 * andersca tries to find his lab account password
07:38:50 <andersca> Marvin--: woo
08:04:18 <pnou> from hugs if i put the function sq = \x -> x * x in a module, its type is Integer -> Integer whereas if i use sqrt x = x * x it type is Num a => a -> a
08:04:40 <pnou> why the lambda form is not polymorphic?
08:04:57 <andersca> Prelude> :t (\x -> x * x)
08:04:57 <andersca> \x -> x * x :: Num a => a -> a
08:04:59 <andersca> it is here
08:05:05 <pnou> in the toplevel yes
08:05:13 <pnou> but not in a module
08:05:27 <norpan> pnou: do you use the function in the module?
08:05:29 <Ig> The monomorphism restriction is probably the cause
08:05:37 <norpan> there is a restriction on top-level functions
08:05:46 <pnou> i use :e test.hs
08:05:47 <Ig> And type defaulting will make Num a into Integer
08:05:56 <pnou> module Test where
08:05:56 <pnou> sq = \x -> x * x
08:06:01 <pnou> i load the module
08:06:05 <pnou> and type it with :t
08:06:22 <norpan> pnou: probably hugs defaulting Num to Integer then
08:06:52 <pnou> but why the most polymorphic type isn't infered?
08:07:35 <pnou> and why does it works with sq x = x * x and not whith \x -> x * x?
08:08:14 <Ig> http://research.microsoft.com/Users/simonpj/haskell98-revised/haskell98-report-html/decls.html talks about the MR - I haven't got time to reread it now and check it is actually the cause
08:08:48 <Ig> Oh, actually, yours is virtually given as an example there
08:09:57 <pnou> ha yes
08:10:02 <pnou> thanks :)
08:10:50 <Ig> It's worth explicitly typing all top level functions anyway as it makes type errors much more helpful
08:10:53 * Ig vanishes
10:45:44 <BlizzNL> Is there a function which returns the index of an element in a list : i.e. somefunc 'a' ['b', 'b', 'a'] results in 2 or something?
10:46:31 <Heffalump> can't think of one off the top of my head
10:46:35 <Heffalump> easy enough to write though
10:46:45 <Heffalump> what should somefunc 'a' ['b','a','a'] return?
10:47:04 <Heffalump> check the List module and the Prelude first, though
10:47:30 <BlizzNL> Heffalump: ok btw nice to have you back ;)
10:48:25 <dennisb> BlizzNL: elemIndex
10:48:58 <andersca> hey dennisb
10:49:19 <dennisb> hej
10:49:57 <BlizzNL> dennisb: yep I found it too... elemIndices is great :)
10:51:17 * BlizzNL is leaving (Champions League)
10:54:52 <dennisb> How do I know that this function run in constant space?   f n = do print n; f (n+1)
10:55:22 <Heffalump> define "know"?
10:55:23 <Marvin--> you do?
10:55:27 <dennisb> It's not tail-recursive
10:55:50 <dennisb> what argument can I use to motivate that it runs in constant space
10:56:32 <Marvin--> independent of haskell implementation?
10:56:43 <dennisb> Marvin--: that's a tricky question
10:57:00 <Marvin--> I'm just thinking that different implementations can do it differently, and the GC is tricky too
10:57:12 <Heffalump> it also depends on the monad
10:57:15 <Heffalump> what does >>= do?
10:57:21 <Marvin--> oh yew
10:57:23 <Marvin--> yes
10:57:28 <Marvin--> well, wait
10:57:34 <Marvin--> print is IO
10:57:39 <dennisb> this is normal IO
10:57:54 <Marvin--> so it only depends on what the IO monad does, but that's an implementation-dependent black box too :)
10:58:31 <dennisb> say that I want to implement a server that runs for ever. They are almost always implemented like that
10:58:45 <Marvin--> yeah
10:59:54 <dennisb> and it does use constant space in practice, but I would like to have some motivation to why and how
10:59:55 <Marvin--> does  sequence_ [ print n | n <- [1..] ]  run in constnat space?
11:00:20 <dennisb> but maybe one can not say anything which is bad..
11:00:42 <andersca> dennisb: ask :)
11:00:45 <Heffalump> well, IO >>= ought to be strict.
11:00:47 <Marvin--> when you involve GC it gets tricky :/
11:00:50 <dennisb> as always, haskell have no formal semantics so how can we discuss it :-)
11:00:53 <Heffalump> and print n forces n to be evaluated.
11:00:56 <Marvin--> dennisb: amen ;)
11:01:07 <Heffalump> So the two obvious possibilities for a space leak aren't there.
11:02:45 * dennisb will think about that
11:02:59 <andersca> dennisb: writing a serve?R
11:03:16 <dennisb> but now a new episode of friends is on
11:03:38 <dennisb> andersca: well, I have a couple of those, I just thought about it
11:03:58 <dennisb> it works in practice, that is not the problem
19:24:45 <engstad> Quick question: I've got: x::Integer, how do I convert it to a Fractional?
19:25:08 <Pseudonym> x % 1
19:26:05 <Pseudonym> Is that a quick enough answer?
19:26:07 <engstad> '%' is a variable not in scope (at Prelude).
19:26:12 <engstad> ;-)
19:26:19 <Pseudonym> Which Haskell are you using?
19:26:23 <engstad> ghci
19:26:31 <Pseudonym> import Data.Ratio
19:26:36 <Pseudonym> if you're using hierarchical libraries
19:26:40 <Pseudonym> otherwise, import Ratio
19:27:05 <Pseudonym> I assume by "fractional" you mean "rational", BTW.
19:27:20 <Pseudonym> It's just occurred to me that you might mean floating point.
19:27:29 <engstad> I did a :t (/), and it wants Fractional.
19:27:39 <Igloo> fromIntegral
19:27:44 <Pseudonym> Well do you want floating point or actual fractions?
19:27:50 <Pseudonym> fromIntegral, yes.
19:28:01 <engstad> There you go! :-) Thanks!
19:28:09 <Pseudonym> But you should probably decide which kind of Fractional you want.
19:28:21 <engstad> Are there different kinds?
19:28:35 <Pseudonym> Sure.
19:28:41 <Pseudonym> Lots of instances of that class.
19:29:06 <engstad> I'm doing something very simple though, I just want the percentage of two numbers. :-)
19:29:14 <Pseudonym> Complex, for example.
19:29:22 <Pseudonym> OK, then.  That should do you.
19:29:44 <engstad> Complex is a Fractional?
19:30:00 <Pseudonym> Sure.  If it supports division, it's Fractional.
19:30:06 <engstad> I see. 
19:30:46 <engstad> Btw, is the Complex type a function of its components, i.e. can you have a Complex Integer type?
19:30:50 <Igloo> It'll get default to a Double I think, which should do fine
19:31:32 <engstad> Parametrisized, I guess is the word.
19:31:39 <Pseudonym> It supports different components, but not Integer.
19:31:45 <Pseudonym> The components must be members of RealFrac.
19:32:35 <engstad> I see. Because you could imagine a class C(N), mathematically speaking. Of course, division would be out of the question.
19:37:01 <engstad> Cool, I see how complex numbers are constructed, (0.0 :+ 1.0) * (0.0 :+ 1.0) gives me (-1.0) :+ 0.0.
19:37:19 <engstad> :+ must be an infix constructor?
19:48:04 <Igloo> Yup
