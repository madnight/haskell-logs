00:00:18 <adept> sethk: hello
00:02:36 <sethk> What's up?
00:03:13 <adept> sethk: (off-topic mode on) Nothing, just lazy Friday morning here. You?
00:05:50 <Pseudonym> Just about time to go home.
00:10:35 <sethk> Sorry, I'm flipping back and forth here.  I'm playing with Parsec and had a question, but I figured out the answer...
00:12:45 <norpan> hi all
00:12:51 <sethk> Hello
00:47:41 <andersca> hey norpanski
00:52:24 <norpan> hej andersur
00:52:48 <andersca> norpan: I finished my parser and type checker yesterday
00:52:58 <norpan> andersca: good for you!"
00:59:21 <andersca> hey Marvin--
00:59:31 <Marvin--> morning
01:00:06 <andersca> Marvin--: functions were tricky to implement in the type checker
01:04:28 <norpan> andersca: why are functions tricky?
01:04:34 <norpan> do you have overloaded functions?
01:04:58 <Marvin--> functions as in lambda calculus abstractions?
01:05:36 <andersca> Marvin--: functions as in imperative functions
01:06:23 <norpan> a:t1,b:t2,f:(t1,t2)->t3|-f(a,b):t3
01:06:27 <Marvin--> oh, with side effects and everything?
01:06:36 <Marvin--> well, side effects don't matter for types
01:06:48 * Marvin-- nods at norpan
01:06:48 <andersca> I think so
01:07:03 <sethk> Anyone here?
01:07:03 <norpan> why is it hard to implement?
01:07:09 <andersca> norpan: it wasn't hard, it was tricky
01:07:12 <norpan> oh
01:07:14 <Marvin--> it's tricky to specify the semantics
01:07:17 <andersca> yeah
01:07:22 <Marvin--> but types shouldn't be a problem
01:07:25 * andersca also needed to pass the return type around
01:07:32 <Marvin--> uh, yes, obviously
01:07:42 <norpan> i assume you have built a type checking monad?
01:08:07 <andersca> norpan: no type checking one
01:08:09 <andersca> just an error one
01:09:57 <Marvin--> Well, you don't really have to implement a special monad, just using monadic notation makes it dead simple implementing a type checker
01:10:02 <andersca> yeah
01:10:24 <andersca> I couldn't use guard though
01:10:39 <norpan> well, you'd want type information in the monad, so an error/state monad would be suitable
01:10:54 <norpan> but you can pass the type table explicitly as well
01:10:56 <Marvin--> well, sure, you can put the type environment in the monad, but it's not really NEEDED
01:11:10 <Marvin--> andersca: guard needs MonadPlus, doesn't it?
01:11:15 <andersca> Marvin--: yeah
01:11:19 <andersca> I just wrote my own function
01:11:46 <Marvin--> we just did MonadPlus m => ... :)
01:12:16 <andersca> I wanted to be able to specify my own error messages
01:12:18 <andersca> so I did something like:
01:12:25 <andersca> checkTypes::Monad Result => Environment -> Bool -> String -> Result Environment
01:12:26 <andersca> checkTypes e p s = if not p then Error s else return e
01:12:50 <Marvin--> eh... can you do => notation on something else than type variables?
01:13:05 <Marvin--> Why not just Monad m => Environment -> Bool -> String -> m Environment?
01:13:45 <andersca> because that gives me
01:13:46 <andersca> ERROR "/home/andersca/src/haskell/programspråk/lab/TypeCheck.hs":32 - Inferred type is not general enough
01:13:46 <andersca> *** Expression    : checkTypes
01:13:46 <andersca> *** Expected type : Monad a => Environment -> Bool -> String -> a Environment
01:13:46 <andersca> *** Inferred type : Monad Result => Environment -> Bool -> String -> Result Environment
01:13:46 <Marvin--> The guard function isn't all that useful though, if it took an error message string it could use fail instead and would be more useful IMO
01:14:01 <Marvin--> oh, you do special things with your Result type?
01:14:12 <Marvin--> instead of just return and bind?
01:15:13 <andersca> don't think so
01:15:23 <Marvin--> hmm
01:15:28 <Marvin--> what about your own guard function then?
01:16:02 <andersca> I dunno, I wrote the code at 3am so it can prolly be improved :)
01:49:05 <Marvin--> hrm... newtype Monad m => TypeSystem m a = State { runState :: Env -> m (a, Env) }
01:49:07 <Marvin--> looking good? :)
01:49:22 <Marvin--> instance Monad m => Monad (TypeSystem m) where ...
02:22:11 <andersca> Marvin--: nice!
02:22:21 <Marvin--> this is very cute :P
02:22:39 <Marvin--> I wrote an assertM :: (Monad m, Eq a) => m a -> a -> String -> m ()
02:22:46 <Marvin--> very handy :)
08:00:55 <olczyk> Can any one recommend a reference on combinators in Haskell ( for someone who does not even know what combinators are)?
08:01:29 <norpan> olczyk: combinators are simply functions
08:01:58 <norpan> most often functions for a specific data type, parser, pretty-printer, and so on
08:02:27 <norpan> and a collection of such functions for a given datatype are called combinators
08:03:07 <norpan> because you combine smaller parts into bigger parts using those functions
08:07:36 <olczyk> I got the impression there was something formal known as Combinators. For example in the
08:07:43 <Heffalump> no, there isn't
08:07:57 <olczyk> paper 'What the Hell are Monads'.
08:08:11 <olczyk> the thenMD 'combinator'
08:08:38 <olczyk> thenMB:: Maybe a ->(a->Maybe b)->Maybe b
08:08:58 <olczyk> mB `thenMB' f = case mB of
08:09:07 <olczyk>         Nothing->Nothing
08:09:10 <Heffalump> there's nothing particularly special about it
08:09:14 <olczyk>            Just a-> f a
08:09:18 <olczyk> .
08:09:22 <olczyk> Usage:
08:09:45 <olczyk> r= doQuery q1 db `thenMB` \r1-> ...
08:09:57 <olczyk> Ok then what do the ` arround thenMB mean?
08:10:04 <Marvin--> also known as >>=? :)
08:10:07 <Heffalump> that's just turning a two-argument function into an operator
08:10:11 <Heffalump> Marvin--: well, it is now :-)
08:10:23 <Heffalump> olczyk: you can do that with any function that takes (at least) two arguments in Haskell
08:10:29 <Heffalump> e.g. 5 `div` 3
08:11:37 <olczyk> Ok. How about the 'thoery of combinators'.
08:13:47 <Marvin--> combinator is just a special name for "function that takes functions as arguments"
08:13:49 <Marvin--> (roughly)
08:14:22 <Marvin--> >>= (or thenMB) is a combinator, because it takes two monads (Maybe expressions) and combines them into one monad (Maybe expression)
08:14:40 <olczyk> it 'combines'.
08:15:08 <olczyk> But are there any rules on how it combines?
08:15:44 <norpan> olczyk: no, it just another name
08:18:55 <olczyk> http://www.umcs.maine.edu/~chaitin/unknowable/fixedpoint.l
08:19:13 <olczyk> Sorry it's lisp, but I just stumbled across it and think it's interesting.
08:19:35 <Heffalump> it's well-known, but you can't write that program in Haskell
08:19:39 <Heffalump> because it's untypable
08:20:22 <Heffalump> but Haskell has built in fixpoints anyway, because you can write recursive definitions
08:20:32 <Heffalump> s/recursive/arbitrary recursive/
08:21:02 * olczyk strains not to say: 'I can type it' ;)
08:21:30 <Marvin--> duh :P
08:21:40 <Heffalump> :-p
08:21:55 <Heffalump> you might be able to type it, but no Haskell 98 implementation can :-p
08:23:51 <olczyk> Haskell implementations don't have fingers.
08:24:03 <Heffalump> so the only way they can type things is with a type inference system.
08:24:09 <Heffalump> and they can't do it :-)
08:31:35 <olczyk> I just came across a refrence to a paper called 'Monads made easy' by Ahmed Hammad
08:31:53 <olczyk> but the link was broken. Does anyone know if this paper is available.
08:33:08 <Marvin--> http://isabase.philol.msu.ru/fp/haskell/papers/monads/monad.html ?
08:34:38 <olczyk> Thanks.
08:45:40 <Marvin--> google powah
08:49:08 <olczyk> Sigh. I used teoma. 
09:38:39 <Heffalump> hi
09:38:50 <BlizzNL> Hello
09:53:40 <BlizzNL> I have to go
16:31:42 <Arnia> Hi
16:32:28 <Heffalump> hi
16:33:12 <Arnia> Has there been any serious work on fudgets or fudget like GUIs recently?
22:24:28 <Luke> seems like when I divide a Rational by a Rational, I get a Ratio (Ratio Integer) - can I simplify that back to some other "first-level" rational type?
22:24:49 <Luke> oh, seems like / is what I should use
22:41:23 <Luke> error message: "Haskell 98 does not support pattern type annotations" - any idea what I'm accidentally trying to do? :)
22:43:28 <Luke> ah, was using :: for "cons" :)
22:56:22 <sethk> Anybody home?
22:56:36 <sethk> Has anyone seen this message from ghc (5.04.1)?
22:56:46 <sethk> /usr/local/lib/ghc-5.04/libHSrts.a(Main.o): In function `main':
22:56:51 <sethk> Main.o(.text+0x4): undefined reference to `__stginit_Main'
22:56:56 <sethk> Main.o(.text+0x1b): undefined reference to `Main_zdmain_closure'
22:57:00 <sethk> collect2: ld returned 1 exit status
22:57:04 <sethk> ???????
23:01:11 <Luke> know how to chck if a rational is really an integer (i.e. divisor is 1) in haskell?
23:01:21 <Luke> don't know the error, sorry
23:02:10 <sethk> Give me a bit more information; it sounds like the modulus operator might do it but I'm sure you've already considered that.
23:03:18 <Luke> was just wondering if there was a "proper" way. maybe I'll just compare it with its floor
23:04:13 <sethk> Just like with any language you can get floating point roundoff errors which will make a comparison with floor give the wrong answer.
23:04:33 <sethk> You can always say (x - floor) < .0001 or some such arbitrary workaround...
23:05:49 <sethk> the modulus operator seems less prone to this problem, although I don't know what happens under the covers.  I've not seen a recommended way to do this in Haskell but I haven't done much with floating point calculations in Haskell.
23:07:52 <Luke> I'm using rationals rather than floats, so I guess its safe?
23:08:10 <Luke> what's the solution using modulus?
23:08:33 <Luke> oh, floor doesn't work on rationals?
23:08:41 <Luke> or, not how I expect
23:09:45 <dennisb> sethk: I don't know exactly what that error is, but do you have a main function in a Main module in you program?
23:10:51 <dennisb> Luke: is it the function denominator you look for?
23:11:21 <sethk> Yes, it is a very simple program; it has a main function.  It may not have a main module, though; let me try changing that.
23:11:44 <Luke> maybe.. though I'm curious, why in the hugs shell does "denominator 5%5" give 1%5?
23:12:01 <dennisb> denominator (5%5)
23:12:08 <Luke> oh :) thanks
23:12:23 <dennisb> denominator 5 is of course 1
23:12:24 * Luke makes mental note to pretend he is programming in lisp until he gets the hang of precedence :)
23:12:42 <dennisb> function application binds the hardest
23:12:59 <sethk> dennisb:  I removed the "module" line at the head of the file and the problem disappeared!  Thanks :-)
23:13:13 <dennisb> ok, it was some other module name then Main then?
23:13:57 <sethk> Yes
23:14:39 <dennisb> if I remember correctly the standard says that the main must be in a module Main but that the compilers allow it without a module too
23:14:45 <dennisb> but i'm not 100% sure
23:15:14 <sethk> That sounds right.  In any event it was neither; it was in a module NOT named Main.
23:15:38 <dennisb> which didn't work. I think hugs might allow that though
23:15:48 <dennisb> it just shows that it's best to stick to the standard
23:15:53 <sethk> I think so; I recently switched from hugs to ghci
23:16:37 <sethk> Actually, ghci didn't complain either...
23:16:50 <sethk> So unless I want to link it...
23:16:58 <dennisb> aha, but ghci doesn't have to care about main
23:17:32 <sethk> Yes, that's true.  But, it doesn't give you the "no main" warning message, even though the main you've supplied is within a module...
23:17:35 <dennisb> it just loads the module and let you call whetever function in it. Well, now it works
23:18:07 <dennisb> it doesn't run the main command, there is no error to have a main in every module if you like
23:18:29 <sethk> Yes, I see that ... now  :-)
23:19:50 <sethk> Now I'm getting unhandled exceptions.  Can I run the program from within ghci and have it read from stdin (and somehow tell it to associate stdin with a file)?
23:20:19 <dennisb> sethk: I don't think so
23:20:34 <sethk> Too bad; I'll change it to use a file name and open the file...
23:20:42 <dennisb> easy enough
23:26:03 <Luke> is there some builtin to do: "unwrap f (x,y) = f x y" ?
23:26:46 <sethk> Not for a tuple, I don't think...
23:26:53 <smkl> uncurry
23:27:11 <sethk> uncurry?????
23:27:34 <sethk> f (x,y) is not curried...
23:27:49 <smkl> f is curried
23:28:05 <Luke> type sig looks right
23:28:08 <smkl> "uncurry f" is f uncurried
23:28:30 <sethk> But f is only applied to a single argument, so where is there currying going on?
23:29:29 <smkl> f has curried type f :: a -> b -> c
23:29:51 <smkl> and there is no currying, just uncurrying
23:29:56 <sethk> Because it is the first argument to unwrap?
23:31:28 <smkl> in Prelude.hs: uncurry f p = f (fst p) (snd p)
23:31:56 <sethk> Oh, I see ... confusing name   :-)
23:43:25 <Luke> a [Int] ++'d to a [Rational] should become [Rational], right?
