03:48:17 <BlizzNL> 'lo
03:48:27 <Heffalump> hi
04:11:11 <dark> Hmm.  I have represented my Terrain type as an Array indexed be (Int, Int).  Now I want to move to non-square, non-bounded terrains, so I'm thinking of FiniteMap indexed by (Int, Int).  But maybe I should go the functional route and use (Int, Int) -> a ?  I'm not sure what the tradeoffs are.
04:12:24 <dark> Terrains are modified extensively during construction, and occasionally afterward.
04:14:58 <ibid> i'd go for FiniteMap
04:16:34 <ibid> functions are not a good runtime-mutable data structure
04:16:43 <dark> I'm beginning to realize that the (Int, Int) -> a representation would be very hard to serialize :)  I'd need to keep track of some kind of boundaries for that.
04:16:45 <ibid> (mutable in the sense of functional mutation:-)
04:17:11 <ibid> dark: and you'd have to code manually what FiniteMap gives you for free
04:17:27 <dark> ibid: What is that?
04:17:38 <ibid> dark: of course, you can wrap your FiniteMap into a function, essentially as (lookupFM fm)
04:17:51 <ibid> dark: searchable data structure
04:18:12 <Heffalump> functions can be runtime-mutable, but only by composition :-)
04:18:15 <dark> Well, the terrain construction function would probably end up providing a Terrain function that searches some combination of arrays :)
04:19:28 <ibid> Heffalump: more than that, you can mutate them by environment closure :-)
04:19:56 <dark> The problem I have with FiniteMap is that it's, well, Finite.  I'd like to be able to represent for example a town with a lot of boring fields around it, and a road leading to it.  The road could go on "forever", and wouldn't need a separate cell allocated for each square of road.
04:21:44 <dark> ibid: Hmm, I guess I could define a "background" function and combine it with a FiniteMap.
04:22:34 <dark> ibid: This way the FiniteMap could keep track of all mutations to the background.
04:22:42 <ibid> yes
04:23:16 <dark> This leaves only the problem of serializing the background :)
04:23:52 <Heffalump> ibid: by what?
04:24:24 <Heffalump> IM what is "environment closure"?
04:24:50 <Heffalump> dark: what kind of patterns do you envisage for the backgrounds?
04:25:14 <dark> Heffalump: Probably simple ones, to represent "outside the map" areas.
04:25:53 <ibid> Heffalump: constructing a new function (by lambda, for example) that captures some variables of a lexically enclosing scope
04:26:24 <Heffalump> I don't see how you can mutate an existing function with that
04:26:37 <dark> Heffalump: Maybe if one of the variables is an IORef :)
04:26:57 <ibid> Heffalump: in a pure functional language, all mutation is by creating a new value
04:27:24 <Heffalump> darK: ok, but that's sick :-)
04:27:25 <ibid> Heffalump: for example, addToFM "mutates" its parameter
04:27:38 <Heffalump> ibid: sure, that's why I said composition is the only way to mutate functions
04:27:50 <Heffalump> (or the equivalent thereof)
04:27:58 <ibid> Heffalump: ok, how do you  define composition?
04:28:01 <dark> Heffalump: sectioning is another :-)
04:28:14 <ibid> ahh, now i see what you mean
04:28:32 <dark> Hmm, but that changes the type.
04:29:23 <ibid> for example, foo f x = lambda y -> if x == y then f x else y :-)
04:29:35 <dark> I think the problem here is that I don't know what I want :)  I can't _really_ have non-bounded terrains.  Following the road for long enough should get you to another town.  I'd have to generate the whole world as one terrain.
04:29:37 <ibid> yes, that's composition too, conceptually
04:30:29 <Heffalump> anyway, the eventual problem is that the result is always bigger than the original function
04:30:38 <ibid> dark: i once tried a flight simulator which had a relatively small rectangular area of the terrain modelled. if you flew outside of that area, all you got was some sickening general greeness
04:30:44 <ibid> Heffalump: yes
04:30:54 <dark> ibid: Was it on the TRS-80? :)
04:31:03 <ibid> dark: i think debian has it
04:31:22 <ibid> actually, i'm sure
04:31:29 <ibid> i just don't remember its name
04:31:30 <dark> ibid: That's the sort of thing I'd like to avoid :)  It's okay to be boring, just somewhat realistic.
04:32:09 <dark> ibid: I think I need to define boundaries for movement, and have the map extend far enough outside those boundaries that you can never see non-mapped areas.
04:32:43 <ibid> or define a function that modifies a prototype map to generate slightly different cities :-)
04:32:47 <dark> ibid: In other words, a fairly traditional approach :)
04:33:12 <dark> ibid: Using the position as seed, perhaps?  Then it's still easy to serialize :)
04:33:27 <ibid> yes
04:35:24 <dark> Hmm, in many cases the background will simply be solid rock :)
04:36:26 <ibid> it was sabre i think
04:36:56 <ibid> if you fly high enough, you get to see the borders of the mapped area
04:44:33 <dark> _is_ there a way in Haskell to serialize a function directly?  The runtime environment must have enough information to do this :-)
04:45:36 <ibid> why must it?
04:46:45 <dark> Well, it must have enough information to be able to calculate the function's value for any argument, and it represents this in a finite amount of memory.
04:47:02 <dark> That representation is precisely what's needed for serialization :)
04:48:19 <ibid> dark: you want to serialize machine code?
04:48:54 <dark> If that's what it takes...
04:49:16 <Heffalump> hm..
04:49:22 <dark> In practice, a function can be represented by a reference to machine code, right?
04:49:42 <dark> Well, I guess that requires assuming that it will be read in by the same program later.
04:52:07 <ibid> dark: you also need the reference environment for it (if it is a closure)
04:55:46 <dark> Yeah, I guess this is not a viable route :)
04:56:21 <dark> In fact I want to _reduce_ dependency on the program, so that a map can be written by one version and read by another.
04:57:03 <dark> This also means I can't do tricks like generating the map from a seed and saving only the seed.  I don't want to fossilize my algorithms.
04:59:01 <dark> I guess I could version the algorithms :)  But that means that all future versions must carry around backward-compatibility code.
05:04:37 <norpan> hi all
05:04:54 <norpan> i'm looking for an easy way to link statically with libgmp when using ghc
05:06:48 <ibid> ghc links everything statically iirc
05:07:40 <Igloo> Only the Haskell code I think
05:07:53 <Igloo> -optl-static might do what you want
05:08:25 * Igloo can't remember if we decided just -static did or not last time we had this conversation
05:10:31 <norpan> i don't mind libc or libm being dynamic, but libgmp can not be expected to be installed
05:10:38 <norpan> and I want to distribute binaries
05:11:03 <ChilliX> norpan: what system?
05:11:09 <norpan> linux and solaris
05:11:33 <norpan> and i use red hat 7.3 which means libgmp.so.3 which is only in red hat 7.1 and up
05:12:23 <ChilliX> Python depends on gmp on RH Linux
05:12:35 <ChilliX> (as does sawfish)
05:12:47 <norpan> yes, but i want people to be able to use it even if they use other linux dists
05:12:56 <norpan> i think it's ok to require glibc 2 though
05:13:04 <ChilliX> ok
05:13:27 <norpan> likewise with solaris libc on solaris
05:14:04 <norpan> maybe i can change package.conf
05:14:09 <norpan> hmmm no
05:15:34 <ChilliX> what happens if you add libgmp.a explicitly to the linker command line?
05:16:44 <norpan> doesn't matter since ghc adds -lgmp anyway
05:17:08 <norpan> i can remove the libgmp.so but that's an inferior solution
05:17:16 <ChilliX> true, of course
05:17:32 <ChilliX> hmm
05:18:07 <dark> norpan: a little warning, on solaris you can't link everything statically.  You'll have to list specific libraries.
05:18:28 <norpan> I need only to link libgmp static
05:18:54 <norpan> But ghc happily adds -lgmp to the link command no matter what I do
05:19:37 <ChilliX> what you can do
05:19:49 <ChilliX> is override the package.conf *without* changing it
05:20:16 <norpan> -optl-static works, but then everything is linked statically
05:20:30 <ChilliX> if you make your own package.conf, which contains an entry for "rts" it will override the standard one
05:20:31 <norpan> but I can live with that, then I don't even have to depend on glibc 2
05:21:30 <dark> norpan: The problem on solaris is that it leaves out static versions of some libraries.
05:22:00 <dark> norpan: In particular the ones for networking functions.  I don't remember which others.
05:22:14 <norpan> ok, but then they ought to be standard in any solaris installation
05:22:45 <dark> norpan: Yes, the problem is more that if you tell it to link everything static, it fails rather than settling for the shared ones.
05:22:58 <norpan> oh
05:23:09 <dark> I've had to deal with this before :)
05:23:37 <dark> That was with C, though, so I could simply add all the needed flags to the makefile.
05:24:44 <norpan> ok, seems like solaris already links statically with libgmp, so no problem
05:26:34 <dark> Nice :)
05:27:36 <norpan> seems like I have to distribute the source code to libgmp according to the LGPL though
05:28:11 <dark> Hmm, hadn't thought of that.  You actually have to do more than that, if you link statically.
05:28:23 <norpan> also seems like the solaris ghc distribution doesn't
05:28:23 <Heffalump> LGPL allows static linking, doesn't it?
05:28:26 <norpan> yes
05:28:30 <dark> You'll have to provide a way for users to recompile your program with a new version of libgmp.
05:28:41 <norpan> You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange. 
05:30:30 <norpan> shit, it seems like I have to distribute the .o-files for my program as well
05:30:56 <norpan> this really sucks
05:31:49 <norpan> ok, seems like it's sufficient to accompany with a written offer to give the user the .o files on demand
05:32:29 <Heffalump> don't do that, you could be stuck with actually having to satisfy any number of people's demand
05:32:48 <norpan> i'll just put the files on the web then
05:33:49 <dark> Heffalump: Actually, it only seems to apply to people he distributed to.
05:33:52 <dark> Heffalump: "same user"
05:34:05 <norpan> since the software will be sold, it's not much of a worry
05:34:37 <dark> norpan: You might as well include the .o files directly, then?  Then you're done right away.
05:34:50 <norpan> yes, but that'll increase the size of the download
05:35:46 <dark> Er, heh.  You might have to include ghc as well.
05:35:49 <Heffalump> dark: if they are distributing not-for-profit themselves, I think they can pass on that offer
05:36:13 <norpan> but they are not allowed to redistribute the .o files
05:36:25 <norpan> the copyright on those is ours
05:36:27 <dark> Heffalump: You're thinking of the GPL :)  The LGPL has different terms.
05:36:58 <Heffalump> ah, ok
05:37:09 <dark> norpan: If the executable can be downloaded, and the .o files can be downloaded from the same page, then I'd say that counts as 6a ("Accompany...")
05:37:23 <dark> norpan: However, see below 6e:
05:37:48 <dark> For an executable, the required form of the "work that uses the Library" must include any data and utility programs needed for reproducing the executable from it.
05:38:00 <dark> That would include ghc itself, and I don't think ghc qualifies for the exception that follows.
05:38:03 <dark> It's a bit unclear though.
05:38:25 <norpan> well, i'll just put the ghc distribution on the same page then :)
05:38:33 <dark> Sounds like it will work :)
05:39:00 <ChilliX> well put a link to ghc on the page
05:39:10 <norpan> you'd probaly only need libHSbase.a though
05:39:22 <norpan> maybe a few others
05:39:22 <dark> The end result should be that if people want to use a different version of gmp with you program (say, it has a security bug), then they can do so.
05:39:48 <ChilliX> I mean, you should consider what the intention of the license
05:39:48 <norpan> then I'll happily compile a new one and send them :)
05:39:50 <ChilliX> is
05:39:53 <norpan> yes
05:39:57 <dark> Actually, putting them up for download on the same page would be 6d.
05:40:03 <ChilliX> ghc is widely available
05:40:10 <ChilliX> and if you provide a link to it
05:40:14 <dark> norpan: No, they'd have to be able to do it without your involvement.  That's the point of the LGPL :)
05:40:16 <ChilliX> people can get it easily
05:40:21 <norpan> it will be distributed on cd:s as well, and there is plenty of room on the cd
05:40:38 <dark> ChilliX: Maybe not the same version that compiled this program, though.
05:40:40 <norpan> dark: yes, but i can accompany by a written offer to do it
05:40:51 <ChilliX> dark: old version of ghc are archieved
05:41:04 <ChilliX> if you check out the GHC download pages, they have version numbers on them
05:41:06 * cleverdra wonders if the LGPL, like the GPL, has three alternatives for redistribution.
05:41:27 <norpan> i'll talk to the legal department and see what they have to say :)
05:41:33 <ChilliX> don't link to haskell.org/ghc/, but to directly yo the download page of the right version of the compiler
05:41:35 <dark> ChilliX: Would you bet your business on that? :)  The site might go down or something.  The gmp maintainers have rattled their sabres for less.
05:42:28 <dark> Hmm, you might not need to include ghc itself, if gcc is enough to do the final linking.  After all they will already have the .o files.
05:42:30 <ChilliX> dark: yes, I think it is save to bet a business on it
05:42:46 <ChilliX> point (1) ghc is widely mirrored even on some Linux CDs
05:43:06 <ChilliX> point (2) if worst comes to worst, you can still put a copy of ghc on your homepage
05:43:13 <Heffalump> does the GPL/LGPL say anything about things being widely available, though?
05:43:14 <dark> cleverdra: It has five, in section 6 alone.  The LGPL is much more complicated than the GPL.
05:43:47 <ChilliX> Heffalump: I didn't say to just claim it is widely available
05:43:57 <ChilliX> Heffalump: put an explicit link to the right version there
05:43:59 <dark> Heffalump: No, it only talks about "normally distributed with the major components of the operating system"  (subclauses elided)
05:44:25 <norpan> anyway, i think i will solve the legal problems, now that the techinical problems are solved
05:44:30 <ChilliX> whether the actual binary is on your server or some other server doesn't matter in my understanding
05:44:50 <dark> ChilliX: Well, 6d explicitly says "from the same place"
05:45:00 <ChilliX> norpan: what program do you distributed?
05:45:01 <norpan> place: The Internet :)
05:45:10 <ChilliX> norpan: :-)
05:45:26 <ChilliX> dark: doesn't that mean that everything has to be accessible from there?
05:45:27 <norpan> ChilliX: it's a hardware verification suite, see www.safelogic.se
05:45:29 <dark> Debian has argued this back and forth for a bit.  Our source packages are on the same server but in a different directory tree :)
05:45:36 <ChilliX> dark: ie, you need en explicit link
05:45:37 <norpan> parts of it is written in Haskell
05:46:31 <ChilliX> norpan: cool
05:46:36 <ChilliX> norpan: what part?
05:46:59 <norpan> most parts, except the user interface
05:47:07 <norpan> which is written in java
05:47:25 <norpan> and the verification engines, which are written in C and Scheme
05:47:38 <norpan> a true multi-language project
05:48:40 <ChilliX> :-)
05:49:13 <dark> ChilliX: I guess the LGPL needs updating :)  It was written in 1991, when the "same place" meant an FTP server.
05:50:16 <norpan> I have 321 haskell modules, totalling 225k lines
05:50:20 <ChilliX> dark: My understanding of the intent would be that a user does not have to serach for the tools, but the onus is on the distributer to provide easy access to them from one location
05:50:27 <norpan> that's quite a bit of haskell
05:50:33 <ChilliX> norpan: have you written them all??
05:50:41 <norpan> no, four people
05:50:55 <ChilliX> indeed, that's quite a bit of code
05:51:15 <norpan> not everything is used atm though
05:52:13 <norpan> i'd say half of it is unused
05:52:18 <norpan> need to clean up :)
05:52:26 <ChilliX> ic
05:52:48 <ChilliX> How many people doing Java, C & Scheme?
05:53:27 <norpan> about four doing java, four doing C and one doing Scheme :)
05:53:39 <ChilliX> The Lonely Schemer...
05:53:41 <norpan> yes
05:53:52 <norpan> totally impossible to read the code as well :)
05:54:07 <ChilliX> good for him, he won't be fired ;-)
05:54:11 <norpan> yes
05:54:17 <ChilliX> so, GUI in Java?
05:54:24 <norpan> although I've started to get a grip on it, so we can fire him soon :)
05:54:25 <ChilliX> C for perforemance critical stuff?
05:54:27 <ChilliX> and Scheme?
05:55:07 <ChilliX> as an extension language?
05:55:09 <Igloo> While we're off topic, does anyone know of a way I can tell make that my %.gz rule removes %?
05:55:58 <ChilliX> Ig: no idea how to tell make that a file is removed
05:56:24 <norpan> Igloo: interesting problem
05:56:36 * Heffalump thinks abandoning make is the way to go :_)
05:56:38 <Heffalump> s/_/-/
05:56:50 <Igloo> Indeed  :-)
05:56:56 * Igloo just uses zgrep rather than grep
05:57:00 <dark> I don't know a way to do it in general.  But for specific files, you could mark them .PHONY
05:57:39 <dark> Hmm, that won't work.
05:57:59 <Igloo> No... .INTERMEDIATE is closer but doesn't do what I actually want
05:58:26 <norpan> so you create a file, and then gzip it?
05:58:36 <Igloo> Yup
05:58:51 <norpan> you can lump them together into one makefile rule i suppose
05:59:07 <norpan> but that's not optimal of course
06:00:58 <dark> The easiest thing might be to not remove it :)
06:01:24 <Igloo> That sort of defeats the object of gzipping it  :-)
06:01:41 <dark> Hmm.  remove and then touch?
06:01:48 <dark> More confusing, of course :)
06:02:01 <Igloo> Well, wrong
06:02:17 <dark> You actually need the ungzipped file for some things?
06:02:22 <Igloo> The problem is that make might try to build something else from foo
06:02:55 <Igloo> Well, not now that I have switched to using zgrep
06:09:26 <norpan> but instead of having
06:09:31 <norpan> foo: bar
06:09:38 <norpan> and %.gz: %
06:09:53 <norpan> you can have foo.gz: bar directly and add gzip to the end of the rule
06:11:14 <Igloo> Sure, but that's not a nice solution. And won't work if you need to run something that only takes a filename as an argument (as opposed to taking input on stdin as an alternative)
06:11:51 <norpan> why not?
06:13:57 <Igloo> Well, you could do it, but you'd have to put all such programs into the same rule
06:14:25 <norpan> well, yes
06:15:01 <andersca> hello norpan
06:15:06 <norpan> hi andersca
06:15:20 * andersca just had a lecture about type systems and semantics
06:15:55 <norpan> andersca: good for you!
06:19:19 <andersca> norpan: it was entertaining
07:26:54 <norpan> I'm looking for the XmlPP equivalent in the hierarchical tree in ghc 5.04
07:33:23 <Heffalump> hmm, does the copyright on the CUP version of the Haskell report affect the existing copyright statement on the online report?
07:39:10 <Igloo_> As long as the people who put the copyright statement on the online one had a right to do so you can use it under that licence
07:39:28 <Igloo_> I wonder of CUP got permission from all the authors to change it
07:41:05 <Heffalump> but is the right granted by the statement on the online version in perpetuity, or can they choose to withdraw it?
07:42:50 <andersca> hey Marvin--
07:43:57 <Marvin--> hello hello
07:44:40 <Igloo_> They can't withdraw it but they can stop offering it
07:45:21 <Heffalump> but can the existing right still be propagated?
07:46:17 <Igloo_> You can't take away rights you have granted
07:46:28 <Igloo_> Does it give you the right to propogate the right?
07:46:36 <Heffalump> it doesn't explicitly say that, no
07:46:37 <norpan> the rights don't automatically propagate to modifications however
07:47:07 <Heffalump> >> The authors intend this Report to belong to the
07:47:07 <Heffalump> >> entire Haskell community, and so we grant permission
07:47:07 <Heffalump> >> to copy and distribute it for any purpose, provided
07:47:07 <Heffalump> >> that it is reproduced in its entirety, including
07:47:07 <Heffalump> >> this Notice. Modified versions of this Report may
07:47:09 <Heffalump> >> also be copied and distributed for any purpose,
07:47:11 <Heffalump> >> provided that the modified version is clearly
07:47:14 <Heffalump> >> presented as such, and that it does not claim to be
07:47:16 <Heffalump> >> a definition of the language Haskell 98.
07:47:33 <norpan> so, the book may only be distributed non-commercially, but the other versions may be distributed for any purpose
07:47:40 <Heffalump> mind you, the copyright statement on the online version is actually invalid :-)
07:47:51 <Igloo_> IWW?
07:47:56 <Heffalump> norpan: yes, assuming that statement remains
07:48:19 <Heffalump> Igloo_: it uses (c) not c in a circle (but not having a copyright statement doesn't actually mean you don't have copyright, just that it's harder to enforce)
07:48:22 <Igloo_> AIUI that right is propogated when you give someone a copy with that statement in
07:48:42 <norpan> Heffalump: but it has the word copyright, which is enough
07:48:43 <Igloo_> It's not invalid, it just carries no legal weight
07:48:59 <norpan> it's only if you only have (c) that there may be doubts
07:49:03 <Igloo_> The (c) bit that is. The rest probably does
07:49:05 <Heffalump> since having legal weight is the point, it's invalid (though actually as norpan points out it's not)
07:49:17 <Heffalump> oh, and it doesn't have a year.
07:49:30 <Heffalump> which is quite important given that copyrights expire
07:49:48 <Igloo_> You aren't actually worried about who it is copyright, anyway, you are worried about the licence granting you additional rights
07:49:51 <norpan> Heffalump: but copyrights expire according to authors death, not publication date
07:50:03 <Heffalump> oh, point
07:50:16 <norpan> at least if it's not a work for hire, which it's not since Simon Peyton Jones claims to hold the copyright
07:50:44 <norpan> so, we have to kill SPJ and wait another 70 years or so
07:52:11 <Heffalump> hmm, Igloo is ideally placed for that
07:55:12 <Igloo> Bah
08:19:21 <dark> Waiting 70 years won't be enough.  The length of copyright is (x + 20) years, where x is the age of mickey mouse.  You'll also have to kill all top Disney executives.
08:20:21 <Heffalump> lol
08:20:46 <Heffalump> ok, Igloo, you kill SPJ, then we'll come up with a plan to kill Disney executives
08:21:44 <dark> Quietly replace the reels for the next big Disney movie with two solid hours of Ren & Stimpy.  They'll have to do the honourable thing after that.
08:23:52 <Heffalump> errm, they're Disney executives, why do you expect them to do the honourable thing?
08:24:37 <dark> Anyway, I'm in favour of limiting copyright to 20 years total, extended up to 40 as long as the material is in print.
08:24:58 <Heffalump> I think you need to treat computer stuff and literature differently
08:25:16 <Heffalump> computer copyrights are effectively indefinite, since the material is obsolete before it gets out of copyright
08:25:26 <Heffalump> whereas literature etc is actually still useful once it gets out of copyright
08:25:28 <Marvin--> andersca: is there a neat-o tool for creating (gtk|gtk2|gnome|gnome2) wizards easily?
08:25:37 <dark> Well, 20 years ought to be enough to stop that.  "in print" is defined as current media :)
08:25:41 <andersca> Marvin--: glade?
08:26:07 <Marvin--> andersca: well, except for glade... I was hoping to have something that handled prev/next buttons and stuff like that too
08:26:10 <Heffalump> 20 years is still too much for computer stuff, IMO
08:26:41 <dark> Hmm... I think we can still read all data formats from 1980.
08:27:00 <dark> Finding a 5.25" floppy drive is not impossible.
08:27:02 <Heffalump> by computer stuff, IM programs, not data
08:27:18 <dark> Oh, well... emulators :-)
08:27:28 <Heffalump> I said obsolete, not unusable
08:27:46 <dark> Also, I think the main point is that they will still be useful for making derived works.
08:27:53 <Heffalump> you can use them, but noone except people interested in retro stuff would want to
08:28:16 <Heffalump> possibly, but you won't get the source for most software that goes out of copyright
08:28:28 <cleverdra> http://www.tale.com/titles-free.phtml?title_id=39 -- Melancholy Elephants, by Spider Robinson.  You can read the ending for 'free' if you don't mind advertisements, or follow the two alternatives this site gives you.  This short-story SF focuses on infinite-duration copyrights, and their implications.
08:28:57 <dark> cleverdra: Yeah, I read it recently.
08:29:35 <dark> Heffalump: That's different, software should always come with source but I don't think I can get the rest of the world to agree on that yet :)
08:30:04 <Heffalump> well, the BitKeeper experience seems to be that if software comes with source, people will cheat
08:30:10 <cleverdra> Heffalump - there's got to be something deeply immoral about not releasing source *eventually*.
08:30:32 <dark> Even source can be obsolete after 20 years, though.
08:30:36 <Heffalump> cleverdra: morality aside, after 20 years most companies won't /have/ the source
08:30:36 <cleverdra> Heffalump - like, what if a developer gets hit by a bus?  The program must rot?
08:31:07 <Heffalump> presumably companies are a bit more organised than just having their current active source kept by one developer
08:31:24 <dark> cleverdra: Most non-free programs eventually rot.  It's why I've become so disgusted with writing it.  Only one project I've ever worked on profesionally still exists, and that one was free software.
08:31:27 <Heffalump> probably that's what would happen if the developer of some small piece of shareware was hit by a bus, though
08:31:29 <cleverdra> Heffalump - well, you're talking about companies there and I'm talking about a roguelike called ADOM =)
08:32:06 <dark> Source tends to get lost especially when companies go bankrupt.
08:32:22 <dark> Either that or it just goes into the permanent write-only archive :)
08:33:10 <dark> Heffalump: I'm confident that we can always resurrect programs, though, as long as the media is intact.  I'm much more concerned about film material, most of the 20th century is rotting away and will be lost forever.
08:34:21 <norpan> all because of copyright, it sucks
08:34:32 <Marvin--> andersca: oh, sorry, I didn't know that the glade wizard thingy was so advanced :)
08:34:37 <dark> norpan: All because of unreasonably long copyright, I'd say.
08:34:40 <norpan> yes
08:34:49 <cleverdra> Indeed.  At least more recent movies will be forever preserved in gigantic mpeg format.
08:34:56 <dark> Heh.
08:34:57 <norpan> 20 years should be more than enough for anything
08:35:16 <norpan> for software, 2 years should be enough
08:35:31 * cleverdra wonders if "The King and I" is still under copyright.
08:35:33 <dark> norpan: My test for statements like that would be Knuth's books :)
08:36:02 <norpan> dark: that's a non-test, i think knuth would have written them anyway
08:36:02 <cleverdra> dark - http://lpf.ai.mit.edu/Patents/knuth-to-pto.txt
08:36:08 <dark> norpan: I think it would be reasonable to keep those in copyright for longer than 20 years.
08:36:31 <dark> It used to be that copyright was 28 years, with an extension of 28 more years on request.
08:36:35 <norpan> dark: to the benefit of who?
08:36:36 <cleverdra> (dark - yes, I know that is a different issue.)
08:36:49 <dark> Of course, these days, all publishers would have a database to automate the extension request, so that's not all that useful.
08:36:57 <dark> norpan: Of Knuth :)
08:36:58 <norpan> copyright should be for the benefit of society not for the benefit of authors
08:37:22 <dark> I think it's of benefit to society if Knuth has plenty of money to live on :)
08:37:28 <cleverdra> norpan - copyrights are by definition for the benefit of authors, and by implication for the benefit of society (by presumably encouraging authors).
08:38:01 <norpan> cleverdra: yes, i know, but more than 20 years copyright won't change an authors decision to write a book
08:38:10 <dark> cleverdra: Actually, at least in the USA they're defined to be for the benefit of society, and only incidentally for the copyright holders (which is often _not_ the author)
08:38:20 <norpan> in knuth's case i think he would have written the books anyway
08:38:27 <Heffalump> what date did Knuth write that letter?
08:38:32 <cleverdra> dark - sorry, yes.
08:38:35 <cleverdra> Heffalump - I've no idea.
08:39:16 <cleverdra> dark - actually I agree that 'benefit-to-society' is more important, but this is precisely where extremely long copyrights (and patents) break.
08:40:18 <cleverdra> fail.  A copyright for 200 years benefits a group of people, but not society =)
08:40:25 <norpan> and any copyright time should be from date of publication, not connected with the health of the author
08:40:52 <dark> norpan: We wouldn't want to encourage assassination :)
08:41:02 <cleverdra> norpan - that's mentioned in Melancholy Elephants, BTW.
08:41:21 <dark> But yes, I agree that the "author's lifetime" clause has to go, because I predict human lifespans will be greatly extended this century.
08:41:58 <cleverdra> dark - I was wondering if a convention of "When I die, all this is open-source" licenses would encourage murder =)
08:42:18 <norpan> "Open source as long as I live" :)
08:42:19 <dark> cleverdra: It's a trade-off.  If they write good stuff, it might be better to wait a bit :)
08:44:41 <cleverdra> hm.  Indeed =)
08:46:03 <cleverdra> norpan - that has all kinds of interesting implications: "Open-source license for FOO expired; please destroy sources."
08:46:54 <norpan> i don't think such a license would qualify as open source though
08:46:56 <Heffalump> I don't think a license that can expire would meet the 
08:47:00 <Heffalump> doh, too slow :-)
08:47:10 <norpan> that's what you get for being a Heffalump
08:47:58 <cleverdra> It's a bit like "public domain for non-commerical use", I suppose.
08:48:17 <Heffalump> are you calling me a slow, lumbering beast? :-)
08:48:17 <norpan> "You may only distribute this commercially"
09:30:47 <hdaume> hi all
09:30:56 <Heffalump> hi
09:57:35 <hdaume> when i say "Maybe has kind * -> *" how is this read?  "Maybe has kind star to star" is what I say -- is there a preferred vocalization?
09:58:26 <dark> Well, the usual pronunciation rules for * are that you find an offensive word that has vowels in place of the *, and say that.
09:58:51 <hdaume> :) i think you'll have a hard time with *->* and that definition
10:03:12 <ibid> "hmm to hmm"? :-)
10:03:28 <ibid> the asterisks are placeholders in a way
10:10:02 <Heffalump> the asterisks represent the set of all types
10:58:10 <andersca> Marvin--?
10:59:27 <Marvin--> andersca: hmm?
11:00:47 <andersca> never mind, I got it to work :)
11:08:03 <Marvin--> argh, that's more than what can be said with my experiments with gnomedruid
11:08:31 <Marvin--> a) I don't want to use a "first" and a "last" page, but then the back/forward buttons will be fscked up
15:30:01 <dark> Wow, I think I graduated to fully incomprehensible code today, the kind you find in Control.Monad.RWS :)
15:37:57 * dark defines a helper function.
17:30:15 <andersca> is there a way to have multi-line strings in haskell?
17:31:31 <Heffalump> ++ :-)
17:31:33 <Heffalump> no, apart from that.
17:31:54 <Pseudonym> But remember that the ++ will be evaluated only once.
17:31:54 <Heffalump> at least IIRC - there was a thread about this on haskell or haskell-cafe a few months ago
17:32:05 <andersca> ++ is good enough
17:32:07 <Heffalump> at compile-time if you're lucky
17:32:16 <Pseudonym> Should get pulled out as a top-level CAF at least.
17:32:20 <Heffalump> someone wanted HERE documents and I think the conclusion was you can't have them
17:33:00 <Igloo> You can have gaps
17:33:19 <Igloo> \ followed by whitespace (including \n) followed by \
17:35:03 <Pseudonym> Damn ,you're right.
17:35:16 <Pseudonym> http://haskell.org/onlinereport/lexemes.html#sect2.6
17:35:20 <Pseudonym> There it is in plain HTML.
17:36:01 <Pseudonym> "A string may include a "gap"---two backslants enclosing white characters---which is ignored. This allows one to write long strings on more than one line by writing a backslant at the end of one line and at the start of the next."
17:37:13 <Heffalump> that's pretty messy
17:38:15 <Igloo> Yeah, real HERE documents would be nice
17:40:37 <Pseudonym> Personally, I don't find HERE documents that useful in "real" programs.
17:40:47 <Pseudonym> As opposed to, say, Perl scripts. :-)
17:41:10 <Pseudonym> Especially if your program needs to deal with I18N.
17:42:56 <Pseudonym> It's often much better to read a template file, IME.
17:43:07 <Pseudonym> That might be because of the sorts of programs I write, of course,.
17:43:12 <Heffalump> hmm, true
23:57:13 <sethk> Hello adept
