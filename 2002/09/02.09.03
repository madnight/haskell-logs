01:47:48 <specialx> does anyone know of some less technical tutorials for haskell? all the one's on the web page go right over my head
01:48:28 <pesco> specialx: Also The Gentle Intro?
01:48:51 <specialx> that's what i am reading. lol
01:49:51 <specialx> it suggests that i know another functional or even semi-functional language, so i am thinking perhaps that's where i have gone wrong cause i only really know python, php, vicual basic, basic etc but nothing like C\C++, scheme, ML etc
01:50:37 <pesco> Do you have a local library that could get you one of the Haskell text books?
01:51:01 <pesco> Throughout my learning of programming languages I've found that tutorials on the web are generally not a good source to start with.
01:51:05 <specialx> i dunno, i'd have to try tomorrow, but I doubt it. the technical section isn't all that good :/
01:51:15 <pesco> The Gentle Intro wet my appetite for Haskell, though. In response to that, I bought a book.
01:51:53 <pesco> specialx: Maybe try a local university, they should be happy to share their knowledge, even with non-students.
01:52:03 <pesco> s/even/also/
01:53:02 <specialx> i don't think i have ever seen a haskell book, but perhaps i was never looking for one too. yeri might have to. i noticed you got that uni url in the topic. my friend goes to that uni :) i think he probably has even done somethign with nepal. but i am in melbourne however
01:53:08 <pesco> I would have been a full-time user of our Uni lib, if someone had just told me "Hey, go there, they'll give you cool books!"
01:54:20 <pesco> specialx: Melbourne is a big city, just visit any local Uni. Even mine has a couple of books specific to Haskell, even though they don't teach or use the language anywhere, AFAICS.
01:54:49 <Chilli> Uni Melbourne is teaching Haskell in first year
01:54:55 <Chilli> they must have plenty of these books
01:54:59 <specialx> yer i might have to go for a search tomorrow.
01:55:06 <specialx> yer but i am unsure if i am allowed into melb uni library.
01:55:11 <pesco> Chilli: Ah, Melbourne's your's? I forget.
01:55:29 <Chilli> pesco: no, I am in Sydney, but I know people there
01:55:48 <pesco> Chilli: Oic.
01:56:03 <specialx> what do you guys find haskel like anyway? you like?
01:56:15 <pesco> I fell in love with it.
01:56:20 * Chilli -> off
01:56:52 <pesco> All the other langs I've gone out with cheated on me.
01:57:07 <pesco> But Haskell, it's so... pure...
01:57:09 <specialx> what other langs have/do you use?
01:57:21 * pesco waves his head dreamily
01:58:09 <pesco> specialx: I started with C, C++, had a quick and painful discourse into Pascal, more pain with Java, and short periods of fun with Prolog and Scheme.
01:58:35 <pesco> Oh no, my first program was in BASIC actually.
01:58:40 <pesco> Then came C.
01:58:45 <specialx> same, on a commodor /64128
01:58:53 <specialx> 64/128 even
01:59:37 <pesco> Myne was on same mystic machine that had a "Sony" label on it, but I don't remember any details, my memory is a bit fuzzy that far back.
02:00:03 <pesco> s/Myne/Mine; s/same/some/
02:01:01 <pesco> Anyway, you want to try Haskell, how do you like what you see?
02:01:48 <specialx> very good, from what i can make out of it anyway. i need to learn some more languages, i wanted to try c\c++ but i don't like it so much, then i was looking at java but nah, i don't like that either.
02:02:07 <specialx> i decided on python, and am finding it easy, so i wanna do something totally different and haskell seems to be it.
02:02:43 <specialx> i also want to get into some AI programing and i thought perhaps haskell could be alright for it. i am not sure, but realistically you can use any language, just some are more suited for it
02:03:29 <pesco> I'm not experienced with AI, but I suppose Haskell is a decent choice.
02:04:04 <specialx> well as far as i know
02:04:05 <pesco> Much AI is based on mathematical foundations, which will be expressible easily.
02:04:13 <specialx> functional programming just uses functions over and over
02:04:25 <specialx> so you write a function and need a computation done, so you send it to another function
02:04:25 <specialx> etc
02:04:36 <specialx> am i right or have i missed the functional programming point?
02:04:36 <pesco> Correct.
02:05:11 <specialx> okay cool, so i figured using AI, which uses nodes, each node will be some kind of data which will influence a decision done by the AI engine.
02:05:56 <pesco> One thing that's easier in LISP, for instance, are symbolic operations.
02:06:01 <specialx> so i figured using functions each node will be able to grab some incoming data, computer it using functions which reference other nods and other functions kind of like a mesh system
02:06:13 <specialx> nods - nodes
02:06:16 <specialx> computer = compute
02:06:26 <specialx> yes i read LISP is good.
02:06:49 <specialx> but it didn't appeal to me at the time of reading it. some guy in here i think shapr talked to me about haskell and he pretty much sold haskell to me :)
02:06:55 <specialx> it's jsut now i have decided to start learning it
02:06:59 <pesco> Many despise it for its parentheses, but I think that's just a matter of getting used to it.
02:07:16 <specialx> haskell?
02:07:21 * Heffalump generally tries to avoid brackets in Haskell by using $
02:07:21 <pesco> Yah, shapr is our head Haskell salesman.
02:07:38 <pesco> specialx: No, I was referring to LISP's parens.
02:07:45 <pesco> Heffalump: I like $, too.
02:08:06 <pesco> specialx: $ is a function application operator in Haskell.
02:08:33 <pesco> specialx: So foo (bar x) becomes foo $ bar x
02:08:57 <pesco> Because $ has lower priority than anything else.
02:09:09 <pesco> Heffalump: Or is ther something even lower?
02:10:03 <Heffalump> nafaik
02:10:22 <Heffalump> you could probably define something at equal priority
02:10:43 <Heffalump> but (I think it's) infixr 0 ($)
02:14:28 <pesco> Yup. Ok, I'm off to debug UTF-8 code.
02:19:36 <specialx> cool thanks guys, i am gonna check out some of these other tutorials i found online after i cook dinner which i am off to do now, adios guys ;)
03:39:46 <specialx> a question, if haskell is purely functional why are there classes?
03:48:40 <Heffalump> they're not C++/Java classes
03:48:43 <Heffalump> they're type classes
03:48:58 <Heffalump> you can make objects from them
03:50:01 <specialx> oh, so the Num class has Double, Float, Int, Integer for instance?
03:50:11 <ibid> can't, surely?
03:50:25 <Heffalump> sorry, yes :-)
03:50:39 <Heffalump> specialx: yeah, all of which are types
03:52:12 <specialx> cool, i can also see what you mean by lots of paretheses.
03:58:12 <pesco> jimbosimo: Hi, how are you?
03:59:09 <jimbosimo> Hi, I'm ok....
04:01:49 <pesco> What leads you to channel Haskell?
04:02:59 * pesco recovers from dancing, if that's what you call it, to the Nine Inch Nails.
04:03:22 <specialx> NIN are goodly indeed :)
04:03:30 <jimbosimo> well, I was just reading about haskell
04:04:01 <pesco> specialx: Reminds me to check what he's planning next.
04:04:45 <specialx> pesco: trent?
04:17:52 * pesco -> Off for bit
04:37:09 * tmoertel arises for a new day
04:57:14 <Heffalump> afternoon
06:01:01 <ChilliX> Hmm, *ICFP* is far from being over!
06:01:12 <ChilliX> The contest is over, that's all.
06:26:08 --- topic: set to 'ICFP contest is OVER || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.2.3 released http://www.cse.unsw.edu.au/~chak/nepal/' by smkl
06:42:25 <ChilliX> Thanks mkl
06:42:30 <ChilliX> mkl = smkl
07:05:34 <Heffalump> hello
10:50:54 <dark> Is there a tool that can tell me if any of my modules export stuff that's not imported anywhere else?
10:58:35 <Heffalump> presumably YM only with regard to a defined set of files?
10:58:40 <Heffalump> (and not as far as I know)
11:02:17 <PMode> re
11:02:25 <PMode> how can i get the biggest Int
11:03:11 <Heffalump> maxBound
11:03:24 <Heffalump> ( :: Int, or in a context which causes the type to be inferred as such)
11:03:35 <Heffalump> how did your ICFP entry go, btw?
11:04:36 <PMode> oh, our ideas were very good, but we didn't get the stuff ready, so we've choosen a simplier player for submission
11:06:58 <PMode> i've tried maxBound.
11:07:55 <PMode> Heffalump: what's with your entry?
11:08:31 <Heffalump> I think it turned out to be rather bad at deciding which packages to deliver
11:08:50 <Heffalump> we only realised this after the end when we played it against the #dylan bot
11:09:06 <PMode> is there an ability to run a ghci or ghc with message output style for emacs?
11:09:30 <Heffalump> not sure, sorry
11:10:40 <PMode> Heffalump: we've submited a stupid bot which looks for the next homebase and fills the homebase as good as possible
11:11:41 <Heffalump> what route-finding algorithm did you use?
11:11:44 <PMode> Heffalump: our initial idea was: segment the image by homebases and calculate high-level paths. the low-level path-creation should be done by so called floods.
11:12:34 <Heffalump> flood = a breadth-first search?
11:12:47 <Heffalump> I don't see how to segment the image by a set of points
11:13:21 <PMode> Heffalump: segmentation is done by, let me think, i don't know the name :)
11:13:26 <PMode> Heffalump: i look in the source
11:14:11 <PMode> For orientation in the map we use segments of a 
11:14:11 <PMode> Voronoi-Diagram which is spanned
11:14:12 <PMode> by the HomeBases
11:14:25 <Heffalump> oh, cool.
11:14:28 <Ig> Does your Voronoi-Diagram know about walls?
11:14:46 <PMode> yes
11:14:55 <PMode> but it isn't used, i think ;)
11:15:09 <PMode> the algorithm doesn't work well i think (a bug)
11:15:23 <PMode> Ig: but the idea was great ;)
11:16:00 <Ig> :-)
11:16:01 <PMode> Ig: if the destination is in the neighbor-segment we will use a separate flood to calculate the path
11:16:11 <PMode> Ig: in the idea ;)
11:16:40 <PMode> Ig: so we needn't go first to the homebase of the current segment.
11:18:48 <PMode> the managment wasn't so good ;)
11:19:02 <PMode> i cannot program with haskell
11:19:11 <PMode> some points for our situation 
13:31:21 <PMode> ciao
13:47:55 <PMode> re
13:48:04 <Heffalump> lo
13:48:19 <PMode> how can i as simple as possible parse: a -> b
13:48:25 <PMode> to an Edge-type?
13:48:51 <Heffalump> YM Edge (parse of a) (parse of b)?
13:48:53 <PMode> Heffalump: haskell is fun. now (after 3 days haskell) i'm glad to program  haskell.
13:49:00 <Heffalump> cool :-)
13:49:16 <PMode> mmh.
13:49:16 <Heffalump> so however well or badly your ICFP entry does, you've got something out of it
13:49:24 <Heffalump> you probably want to make an instance of class Read
13:49:25 <PMode> yes. 
13:49:43 <Heffalump> unless you want to construct a full scale parser for large things
13:49:50 <Heffalump> which it sounds like you don't
13:50:13 <PMode> no, i want to write edges in a file and construct nodes set and weights finitemap from this line
13:50:44 <PMode> Edge a {from :: a, to::a}
13:50:59 <PMode> but there is no weight 
13:51:04 * Heffalump looks confused
13:51:12 <PMode> Heffalump: why?
13:51:46 <Heffalump> I don't understand what you mean
13:52:04 <PMode> okay. i want a way to find a -> in a list of chars
13:53:35 <Heffalump> and then do what?
13:54:08 <PMode> parse the rest ;)
13:55:34 <Heffalump> but not the stuff before the -> ?
13:56:27 <PMode> i want the node before and after.
13:57:06 <Heffalump> what format is the node in ?
13:58:41 <PMode> <node> <sign> <node> ; sign = -(<weight>)-> | <-(<weight>)-> ; weight = Int; node = a
14:00:36 <Heffalump> you might want to look at a parser combinator library
14:01:40 <tmoertel> e.g.: http://www.cs.uu.nl/~daan/parsec.html
14:02:55 <tmoertel> Also known as Text.ParserCombinators.Parsec in newer GHC releases
14:03:11 <Heffalump> hierarchical libraries are really cool.
14:03:21 <Heffalump> they save lots of hassle
14:03:38 <PMode> hierarchical libraries?
14:03:50 <Heffalump> the fact that Text.ParserCombinators.Parsec is a library
14:04:11 <Heffalump> it's made it possible to gather most Haskell libraries together in one place
14:06:15 <PMode> i see no problem, since i'm coming from java
14:06:41 <Heffalump> it's not a problem, just something Haskell didn't have until recently.
14:07:08 <PMode> Heffalump: that means, there is now a package structure created by a commitee?
14:07:24 <dark> I'm not sure there was a committee :)
14:07:26 <Heffalump> yeah.
14:07:31 <Heffalump> well, agreement on the mailing list
14:07:34 <Heffalump> no formal committee
14:07:45 <Heffalump> I think Simon Marlow makes the final decisions on what goes into hslibs
14:14:03 <pesco> Gar, I can't decide on the prettiest way to indent my if statement. Why does Haskell have to be so pretty?
14:14:47 <pesco> And this thing calls itself pure. It's pure _sin_ I tell you!
14:18:12 <Heffalump> :-)
14:18:26 * Heffalump got quite pissed off with the layout rule during the contest, actually
14:18:41 <pesco> Oh, can you go into detail?
14:19:13 <Heffalump> errm, just the rules about where you can put "where" clauses, mostly
14:19:20 <Heffalump> not directly related to the layout rule
14:19:21 <pesco> Heheh.
14:19:31 <Heffalump> but that tends to confuse any error messages on the situation, even with ghci
14:21:00 <pesco> Ahah.
14:21:29 <tmoertel> Do you use Emacs haskell-mode w/ GHCi?
14:21:35 <Heffalump> not integrated
14:21:48 <tmoertel> Why not integrated?
14:21:52 <Heffalump> I use the emacs haskell mode (it does have a few bugs, though)
14:21:57 <Heffalump> errm, I prefer command prompts
14:22:05 <Heffalump> I'm not really a very expert emacs user
14:22:16 <Heffalump> (don't ask me what the bugs are, I can never remember them until I run into them)
14:22:29 <pesco> :-)
14:22:33 <tmoertel> I use haskell-mode a lot, and I do have some problems w/ auto layout.
14:22:52 <tmoertel> but it's fairly easy to fix them by hand when they occur
14:22:55 <Heffalump> oh, the auto-indenting doesn't work at all, afaiac
14:23:14 <tmoertel> It works pretty good for me. I had to make a small patch to get it
14:23:32 <tmoertel> to respect my "2-column" preference, however.
14:23:45 <pesco> ?
14:23:55 <pesco> 2-column indentation?
14:24:47 * tmoertel tries to find an example . . .
14:25:37 <tmoertel> http://www.moertel.com/~thor/acm-contest-1996/CuttingCorners.hs
14:27:02 <Heffalump> www.moertel.com seems not to be working for me (from two different places)
14:27:13 <pesco> Yup.
14:27:36 * tmoertel smacks router
14:27:48 <toadx> operating timed out...
14:29:20 <tmoertel> while I refresh the link, try an alternative path: http://www.ellium.com/~thor/acm-contest-1996/CuttingCorners.hs
14:31:04 <pesco> Ah, your haskell-mode auto-indents all the ='s and ::'s to the same column?
14:31:14 <Heffalump> I hate that :-)
14:31:19 <tmoertel> For the most part
14:31:31 <pesco> Heffalump: *g*
14:31:34 <Heffalump> cos the types of the arguments end up above the result of the function
14:31:58 * Heffalump is contributing to something atm where that's the policy for alignments and I think it looks ugly
14:32:23 <pesco> Heffalump: Ah yes, that's also my reason for not using this style.
14:32:40 <pesco> Argument types above result decl that is.
14:32:57 <tmoertel> An extra CR can take care of that problem ;-)
14:33:05 <pesco> result statement even.
14:33:45 <pesco> tmoertel: Then you'd have two lines for the type sig where one line consists only of the result type.
14:33:48 <Heffalump> well, the argument types still end up not above the arguments
14:34:56 <tmoertel> pesco: No I meant add a blank line between type decl and the fn defn
14:35:15 <pesco> tmoertel: What good does that do?
14:35:37 <tmoertel> pesco: the human eye is great at grouping
14:36:14 <toadx> my styles, from the darkside
14:36:25 <pesco> I like to group function definition and type sig.
14:37:20 <Heffalump> yeah.
14:37:29 <Heffalump> this is clearly a religious war :-)
14:37:47 <pesco> Finally.
14:38:08 <pesco> I've had enough of this nice-atmosphere-on-#haskell crap! ;-)
14:38:45 <Heffalump> :-)
14:39:05 <Heffalump> tmoertel: your code formatting sucks and you should fix it immediately!
14:39:15 <pesco> Ah no, actually this is one of the few places I actually enjoy staying at.
14:39:34 * tmoertel fires up Perl . . .
14:39:39 <Heffalump> lol
14:40:20 <toadx> my code formating really sucks right now ... but this is my first real haskell program, so I have not had much time to develop a style yet :p
14:41:17 <toadx> I seem to have far to many lines that are 120 characters long :<
14:41:41 <tmoertel> now, line wrapping is something that _cannot_ be tolerated
14:42:04 <Heffalump> absolutely!
14:42:10 <Heffalump> (can you tell my boss that?)
14:42:19 <tmoertel> got an email addy?
14:42:21 <tmoertel> ;-)
14:42:27 <toadx> that's why I run at 1600x1200 and open emacs full screen :p
14:42:37 <tmoertel> With the 6x10 font, no less?
14:42:40 <pesco> toadx: That's disgusting.
14:42:51 <toadx> pesco: i know
14:43:05 <pesco> toadx: But be that way, it's your screen space.
14:43:31 <pesco> I'm just surprised that so many people don't mind it.
14:43:58 <toadx> I need to add one last feature to the code, and then I am going to go back and try to tighten up the code in both appearance and execution
14:44:20 <toadx> like I said, its my first real haskell program...
14:44:53 <pesco> As long as I don't have to read such long lines, I don't care about it. But I find it strange that many never notice that they could use all that blank screen estate for other stuff. Like the Moaning Goat Meter.
14:44:58 <pesco> Or xterms.
14:45:08 <pesco> Or Wanda the Gnome Fish.
14:45:15 <toadx> that's why I have dual-head :)
14:45:25 <pesco> *drops head on keyboard*
14:45:43 <tmoertel> dual-head Mac?
14:46:16 <toadx> actually, I have fake dual-head, I have two computers running linux with x2x
14:46:23 <tmoertel> (those 24-inch Apple Cinema Displayes are sweeeeeet...)
14:46:36 <pesco> toadx: I teach you about efficient desktop layout and we switch. Deal?
14:46:48 <toadx> I hope to get a mac titanium sometime in the next 9 months
14:47:18 <toadx> pesco: but I only need one window ... emacs ;)
14:47:37 <pesco> Ok ok, just don't tell me about it. I'll pretend it's not there.
14:47:46 <toadx> haha
14:48:03 * tmoertel can't wait for Emacs retina-projection-mode
14:48:08 <Heffalump> lol
14:50:06 <PMode> how do i compile in ghci against parsec?
14:50:18 <PMode> which command-line arguments for modules parsec?
14:50:51 <Heffalump> do you know what package it's in?
14:50:53 <tmoertel> It should be in the "base" package, which is always loaded...
14:50:57 <Heffalump> ah, ok
14:51:29 <tmoertel> (assuming 5.04)
14:51:52 * shapr boings
14:52:54 <shapr> hiya
14:53:13 <tmoertel> PMode: ":module +Text.ParserCombinators.Parsec" ought to work
14:53:17 <buggs> hoi shapr
14:53:24 <tmoertel> howdy, shapr!
14:53:41 <shapr> hiya buggs,tmoertel
14:53:42 <PMode> hi shapr 
14:54:02 <PMode> debian, ghc-5.02.2 
14:54:12 <PMode> Heffalump: it is in Text
14:54:14 <PMode> text
14:54:32 <tmoertel> :set -package text (just guessing)
14:54:54 <shapr> hello PMode
14:54:58 <Heffalump> tmoertel: what makes you think it's in base, OOI?
14:55:12 <PMode> Prelude> :set -package text
14:55:12 <PMode> Loading package text ... linking ... done.
14:55:24 <PMode> oh.
14:55:42 <tmoertel> Hef: http://www.haskell.org/ghc/docs/latest/html/base/Text.ParserCombinators.Parsec.html
14:56:53 <Heffalump> ahah
14:57:00 <Heffalump> it seems a bit of a strange thing to have in base.
14:57:22 <tmoertel> It's all part of the new reorginzation for the hierarchial libraries
14:58:05 <shapr> I like the reorg
14:58:10 <tmoertel> me too
14:58:45 * tmoertel must walk the dog. b back in a bit . . .
15:01:12 <PMode> okay, i have it
15:01:21 <PMode> only my program didn't work yet ;)
15:01:29 <PMode> ghci -syslibs text *g*
15:01:31 <shapr> hi vina
15:01:45 <PMode> import Parsec instead of import Text.Parsec
15:02:55 <PMode> is it possible to assign some variables in a Parser-method
15:08:16 <PMode> okay, good by
15:09:13 <shapr> hey, when is ghc5.04.1 being released?
15:09:26 <shapr> I want to use WASH-CGI
15:23:10 <shapr> hey Heffalump, have you seen the dynamic linking thread on ghc-users?
15:24:09 <Heffalump> yeah
15:24:20 <shapr> I wonder if hIDE will actually become scriptable with Haskell
15:24:26 <shapr> that would make me a very cheerful person.
15:59:04 <Ig> Grrr, I need hat again
15:59:07 * Ig checks the website
15:59:58 <Ig> hmmm
16:14:27 <tmoertel> Some ICFP contest team pages are now up: http://icfpcontest.cse.ogi.edu/links.html
16:15:06 <Verbophobe> Woo!  Who am I supposed to be rooting for?
16:15:20 <Heffalump> Hash-Haskell
16:15:30 <Verbophobe> Consider yourself rooted.
16:15:32 <Verbophobe> Wait...
16:15:36 <Verbophobe> That didn't sound right.
16:15:40 <Heffalump> we haven't posted anything up there
16:15:53 <tmoertel> Team Radical Too: entry in C -- that's daring ;-)
16:16:04 <Verbophobe> As I can see...
16:17:37 <tmoertel> A quote from the code: "Given a local situation, do a *quick* simulation of just the local effect of different moves, and use this information to decide what to do."
16:19:18 <tmoertel> Team Aqua Team Hunger Farce has a python/C entry.
16:19:39 <Heffalump> I think there entry sounds most impressive of the ones I've read about so far
16:19:46 <Heffalump> s/there/their/
16:19:49 <tmoertel> Team Watt's is a Common Lisp.
16:21:11 <tmoertel> Team "The Doug Boat" has a Java Entry: "TIM-MAH! is an object oriented agent utilizing compound path analysis, dynamic value assignment, heuristic path-value projections, along with Dijkstra's shortest path algorithm (and caching of Dijkstra results) "
16:21:23 <Heffalump> oooh.
16:21:36 <Heffalump> (I did the last thing on that list)
16:22:04 <tmoertel> I wonder how the Java entries fare on the memory-consumption constraint?
16:22:16 <Heffalump> oh, cos of the JVM?
16:22:25 <tmoertel> exactly.
16:23:25 <Heffalump> I wonder how they clean their cache of routeTrees
16:23:49 <tmoertel> maybe they don't ;-)
16:24:00 <Verbophobe> Makes ya think how less Java would suck if it had a binary compiler of sorts...  'Course, the language itself is alright, but the JVM...  Well... You know..
16:24:01 <Heffalump> heh
16:24:06 <Heffalump> gcj exists
16:24:13 <Verbophobe> Really?
16:24:20 <Heffalump> dunno how well it works
16:24:35 <Heffalump> I did think about caching all our Dijkstra results, but I thought that'd eat memory like no tomorrow
16:24:54 <Heffalump> I think time rather than space was our problem on large maps, anyway
16:24:56 <buggs> gcj performs worse than ibm jdk
16:25:10 <tmoertel> Another Java entry: cwilper: "I don't expect to have done too well, as I just barely got valid tests working before the deadline. But it does deliver package, and doesn't crash (most of the time :)."
16:25:46 <tmoertel> So far, Java has the most entries.
16:26:09 * tmoertel must run an erand . . .
16:26:23 <Heffalump> hmm, IC*F*P :-)
16:26:51 <dark> Well, you *can* build Functors in Java...
16:27:14 <pesco> dark: Please don't.
16:27:18 <dark> And it has anonymous inner classes which are almost closures.
16:27:34 <clausen> can't you on any turing-complete language?
16:27:42 <clausen> pesco: it's actually quite clean
16:27:58 <clausen> the java designers liked lisp
16:28:07 <dark> clausen: Well, yes, if you count writing a Haskell interpreter as implementing it in that language :-)
16:28:46 <dark> clausen: They did?  I've seen no evidence of that.  They have these icky Iterators instead of map and filter.
16:29:06 <clausen> hmmm, just my lecturer saying that
16:29:13 <dark> And there's a builtin array type but not a builtin list type.
16:29:47 <dark> Maybe they liked lisp, and all the time they were working on Java, they were thinking, I wish I was in the other department where they use lisp. :-)
16:30:02 <clausen> hehehe
16:30:22 <dark> clausen: Actually the bytecode might be lispish, I haven't looked at that.
16:31:31 <dark> I've been using gcj, it's okay but it's a bit unstable if you inherit nested classes and such.
16:31:39 <dark> I never checked its speed though :)
16:32:15 <dark> I haven't looked at ghc's speed either, my haskell programs are still working on the "do it at all" stage, there's no need for "do it faster" yet.
16:52:30 * Ig finishes a brute force nonogram solver in Haskell
16:52:48 <Ig> That probably took less time than it took me to screw it up by hand the first 2 times  :-)
16:55:40 <dark> Interesting :)  How fast is it?
16:56:15 <Ig> I'm just seperating the test nonogram into a separate module and I'll time it
16:56:30 <Ig> Itdoesn't cope with nonograms where you need to guess, if such a thing exists
16:56:49 <dark> They've been proven to exist:)
16:57:04 <dark> Actually I think I made a 4x4 example once.
16:57:07 <Ig> Can you give me a small example?
16:57:16 <dark> I'll see if I can reconstruct it.
17:00:02 <dark> No, I can't anymore.  It's too long ago and it's 3 am here :)
17:00:18 <Heffalump> nonograms just list the length of each 1 sequence in each row/column, right?
17:00:24 <Heffalump> do they say where the first one starts?
17:00:37 <dark> No.
17:00:38 <Heffalump> 01
17:00:39 <Heffalump> 10
17:01:14 * Ig manages to break it by doing so
17:01:16 <dark> Heffalump: I think Ig means ones where there is a unique solution, but you can't get there by pure decuction.
17:01:27 <Ig> And yes, I do
17:01:28 <Heffalump> errm, define "pure deduction"?
17:01:44 <Heffalump> one version of pure deduction would be to try all possible bitmaps
17:02:04 <dark> Heffalump: I define it as an algorithm where every time you mark a square, you're certain that you're giving it the right value.
17:02:18 <Heffalump> and you have to mark one square at a time?
17:02:21 <dark> As opposed to cases where you have to make a guess, and see if that guess leads to contradictions.
17:02:34 <dark> No, not really.  I'm modeling this on the way I solve them with pen and paper.
17:02:43 <Heffalump> so it's just a matter of scale
17:02:51 <dark> In which case the available memory space is limited by my skull capacity :)
17:03:03 <Heffalump> since I could claim that I can mark n^2 squares at a time 
17:03:08 <dark> The algorithm Ig probably used considers one line at a time, though.
17:03:40 * Heffalump pokes Ig for a formal definition of what he wants ;-)
17:04:32 <Heffalump> how would you go about solving
17:04:33 <Heffalump> 101
17:04:36 <Heffalump> 010
17:04:37 <Heffalump> 101
17:04:38 <Heffalump> btw?
17:04:46 <Heffalump> oh, I should have stated that as the lists :-)
17:04:51 <Heffalump> 212 / 212
17:04:54 <Heffalump> duh
17:05:10 <Heffalump> 1,1 ; 1 ; 1,1  / 1,1 ; 1 ; 1,1
17:05:28 <Heffalump> oh, 1,1 is obvious, right.
17:05:46 * Heffalump stops thinking about it
17:08:04 <Ig> I don't know precisely what I mean, which is one reason I wasn't sure if such a thing exists  :-)
17:08:20 * Ig tries again without confusing x and y in the interface
17:08:39 <Ig> "user  0m2.130s    sys 0m0.010s" for solving http://www.puzzlemuseum.com/griddler/gridpuz.htm
17:08:50 <dark> (deletes long explanation) Right. :)
17:08:50 <dark> I think a nonogram solver would be a fun project for a transputer network.
17:09:29 <Ig> In fact, if you substitute what I mean in you get roughly the tautalogical "If three is a nonogram with unique solution my program won't find, it won't find the solution for it"
17:09:44 <Heffalump> that's what I suspected :-)
17:10:10 * Heffalump did some research on critical sets for Latin squares quite a while back
17:10:32 <Heffalump> a Latin square is a n x n grid of the numbers 1 - n, with each number appearing only once in each row or column
17:11:14 <Heffalump> a uniquely completable set is a latin square with some elements removed that could only have come from one latin square
17:11:24 <Ig> And hugs solves the above instantly, which is good to know  :-)
17:11:39 <Heffalump> a critical set is a uniquely completable set of which no proper subset is uniquely completable
17:11:48 <dark> A popular puzzle in NL is shaped like a crossword, but the clues are numbers, and each "word" consists of unique digits that sum to the given number.
17:12:37 <Heffalump> anyway, we had this definition for "strong critical sets", which were those that could be filled in an element at a time, always leaving something that was a subset of a latin square
17:12:46 <Ig> I've seen more general number puzzles, with cluse like "the sum of 2 down and 3 across" or "a 4 digit prime"
17:13:02 <dark> Actually, I just remembered that there's a global constraint as well: no word is a permutation of another word.
17:13:14 <Heffalump> unfortunately that definition turns out to not impose any extra restrictions :-)
17:13:43 <Ig> I was trying to work out the difference  :-)
17:15:49 <Heffalump> we changed it to saying that for each step along the route to full latin square, there was always at least one square that could only possibly have one value, just from looking at the row and column it was in
17:16:34 <dark> Heffalump: That sounds like the Ig's question for nonograms.
17:16:48 <dark> s/the // :)
17:17:01 <Heffalump> exactly :-)
17:56:53 <Pseudonym> G'day all.
18:00:42 <Heffalump> hiya
18:01:04 <Pseudonym> QuickCheck rocks.
18:01:10 <Heffalump> sometimes
18:01:14 <Pseudonym> Sometimes, yes.
18:01:25 * Pseudonym has noticed it's not so good for automated unit testing
18:01:35 <Pseudonym> But while developing, it rocks.
18:02:13 <Heffalump> why isn't it good for automated unit testing? because the tests aren't the same each time?
18:02:27 <Heffalump> I think it could do with better facilities to collect failed test cases
18:02:32 <Pseudonym> BTW, "rocks" is a synonym for "adequately performs the job I want to do at the moment".
18:02:39 <Heffalump> :-)
18:02:41 <Pseudonym> Two reasons.
18:02:52 <Pseudonym> First, it requires that testable properties are exported from a module.
18:03:13 <Pseudonym> Or, alternatively, enough internal stuff is exported so that the testable properties are writable.
18:03:47 <Pseudonym> Second, it's designed for interactive use.
18:04:10 <Pseudonym> While you can create a standalone "test executable", it ain't fun.
18:04:28 * Pseudonym might have to try HUnit
18:04:54 <Heffalump> having quickCheck generate stuff for HUnit might be cunning
18:05:52 <Pseudonym> That might indeed be cunning.
18:06:36 <Pseudonym> Having said all that, QuickCheck is really nice while you're actively hacking one module.
18:06:58 <Pseudonym> As I am at the moment.
19:00:13 <Verbophobe> Ending a sentence with a preposition is something up with which I will not put.
19:05:32 * Gowilla connects a spare client as backup against the random freeze-ups I'm getting
