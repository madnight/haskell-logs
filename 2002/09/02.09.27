01:23:21 <andersca> hey marvin
01:24:01 <Marvin--> morning
02:38:11 <Igloo> http://www.algorithm.com.au/wiki/hacking/haskell.ghc_runtime_loading
02:47:07 <shapr> good morning!
02:47:34 --- topic: set to 'ANNOUNCE: GHC version 5.04.1 released || ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || 2002 Haskell Workshop Programme http://www.cse.unsw.edu.au/~chak/hw2002/ || Try to get this topic to fill a whole screen | Don't use drugs, get high on hugs! || A' by shapr
02:47:51 --- topic: set to 'ANNOUNCE: GHC version 5.04.1 released || ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || 2002 Haskell Workshop Programme http://www.cse.unsw.edu.au/~chak/hw2002/ || Try to get this topic to fill a whole screen | Don't use drugs, get high on hugs! (end' by shapr
02:54:23 <Heffalump> filling a screen wouldn't be possible then
02:56:41 <shapr> it's true.
02:56:45 <shapr> that's as much as you get.
02:56:54 <shapr> we could always try to double-buffer the topic
02:57:09 <shapr> and then update it like a film when new people join the channel
02:57:26 <Igloo> Or perhaps we could not  :-)
02:57:53 * shapr laughs
03:02:47 <dnm> hey shapr
03:10:17 <shapr> hi dnm, what's up?
03:10:44 <shapr> dnm: written any haskell lately?
03:12:28 <dnm> Writing some shortly
03:12:34 <dnm> In the queue anyway.
03:12:49 <dnm> Compiling Gwydion Dylan right now though.
03:12:52 <shapr> I can show you a nice implementation of a priority queue ;-)
03:13:04 <dnm> By all means.
03:14:18 <shapr> http://www.iro.umontreal.ca/~lapalme/AlgoFP/Chapter5/PQueue.hs
03:14:43 <shapr> that's from rabhi and lapalme's "Algorithms: A Functional Programming Approach"
03:14:45 <shapr> very nice book
03:15:03 <dnm> I've heard of it.
03:15:14 <dnm> Have you seen/read _Purely Functional Data Structures_?
03:15:32 <shapr> nah, I'm ordering it today
03:15:51 <shapr> I read the online preview pages of both on amazon.co.uk
03:15:58 <shapr> and Okasaki's book looks harder to read
03:16:22 <shapr> the one I have is surprisingly light and fun reading
03:17:08 <shapr> everything is presented in a very transparent manner, and the order in the book is such that it all fits together very smoothly
03:17:29 <shapr> I'll tell you what I think of PFDS when it arrives.
03:18:57 <dnm> Cool.
03:19:02 <dnm> A friend of mine here has it.
03:19:08 <shapr> what does he say about it?
03:20:32 <shapr> it looks very informative
03:20:46 <shapr> especially since the Edison libraries that come with GHC are written by the author
03:21:48 <dnm> I haven't asked him.
04:14:57 <Igloo> OK, where should .ps files of literate programs be installed to?
04:17:56 <Heffalump> /usr/share/doc surely
04:18:11 <Igloo> OK, ta
04:23:19 <jewel> shapr: where is the CVS?
04:23:28 <jewel> (just got back to irc now!)
04:23:38 <shapr> standard Twisted tree, but check out the TwistedHaskell module instead
04:23:59 <jewel> ok
04:26:02 <jewel> just the three files?
04:26:08 <shapr> that's all so far
04:26:29 <shapr> twisted.spread has three layers
04:26:32 <shapr> I've done the bottom layer
04:28:00 <jewel> Thanks, I'll look over it layer
04:28:01 <jewel> later
04:28:08 <shapr> ok
04:31:59 * dnm drinks a pounch of Tang
04:32:08 <shapr> pounch?
04:32:16 <dnm> s/pounch/pouch/
04:32:16 <shapr> is that like a punch pouch?
04:32:22 <shapr> that's a good idea actually
04:32:40 <dnm> heh
04:33:08 <shapr> hospitals have this 'dial-a-dose' thing
04:33:29 <shapr> where you twist this dial and then the plunger stops at a certain amount of ccs from a syringe
04:33:38 <shapr> the same kind of thing would be useful for powdered drinks
04:33:58 <shapr> you just plug the expandable pouch onto your faucet, and turn the water on
04:34:43 <shapr> that would also be useful for cooking, 'dial-a-dose' on a container of milk could give you exactly a cupful
04:34:45 * shapr thinks
04:34:59 <shapr> I bet I could build that into the handle of those US plastic milk jugs
04:39:55 * Igloo invents a version number
04:39:58 <dnm> That's an astronomical cost increase
04:40:23 <dnm> Although you might be able to sell it as a kitchen gadget if you made it into a detachable thingy that could go on various jugs and what not.
04:40:35 <shapr> yah, that would be better
04:40:49 <dnm> Like those simple 1 shot push valves they have for liquor bottles used by all decent bars and bartenders that I saw in Ireland.
04:41:35 <shapr> hm
04:41:37 <shapr> yah
04:41:42 <shapr> that's the idea
04:42:42 <dnm> Okay. Exasperated mail off to gd-hackers.
04:42:45 <shapr> gd?
04:42:47 <shapr> oh
04:42:48 <shapr> dylan
04:46:58 <dnm> Yeah.
04:49:11 <dnm> So how are you and monads getting along these days?
04:49:17 <shapr> somewhat better
04:49:17 <andersca> hehe :)
04:49:25 <shapr> dnm: you understand 'em?
04:49:31 <dnm> Yeah
04:49:40 <shapr> ok, lemme try to explain 'em to you
04:49:45 <shapr> s'okay?
04:49:49 <dnm> Sure
04:49:53 <shapr> ok...
04:50:18 <shapr> looks to me like Monads are about having separate functional programs sequenced together
04:50:40 <shapr> entering a monad is sort of like entering a new enclosing scope, where the laws of the universe are slightly different
04:51:10 <shapr> you can call forward into new monads from your current one, but you can't really get stuff back
04:51:33 <shapr> any comments on that? :-)
04:52:09 <shapr> thing that confuses me is that you *can* get stuff back sometimes
04:52:21 <shapr> but I can't seem to make it work myself
04:53:46 <dnm> Well, in a simple explanation, monads allow you to make a set of combinators apply uniformly over various idioms, by building general functions.
04:54:06 <dnm> with a uniform way of writing them
04:54:07 <shapr> ok
04:54:31 <shapr> I've picked on a tiny bit of that from the "Generalizing Monads to Arrows" paper, but I'm missing a lot of groundwork
04:54:39 <dnm> idioms meaning things like data structures, state, flow, I/O
04:54:44 <shapr> right
04:55:00 <shapr> Hughes says that repeatedly, "monads give you a standard api"
04:55:01 <dnm> the idea of a monad itself is from mathematics.
04:55:03 <shapr> or something to that effect
04:55:06 <shapr> right, category theory
04:55:10 * dnm nods
04:55:40 <shapr> anything else?
04:56:18 <dnm> you can use monads on monads, for one. ;]
04:56:25 <shapr> what's the slightly more complicated explanation?
04:56:33 <dnm> Haskell also functors, though it's unclear if they're the same as they are in ML.
04:56:37 <dnm> I think they are, but I'm not sure.
04:56:50 <dnm> Give me a level of complexity you're looking for.
04:56:57 <shapr> I've noticed that with Gen (Gen a), I can do Monad.join to get Gen a, but I dunno what to do with IO (Gen a)
04:57:13 <shapr> dnm: what's the next step up from what you just explained? :-)
04:57:31 <dnm> Wadler's papers.
04:58:11 <shapr> I've read them, as far as I could get...
04:58:14 <shapr> I'll go over them again
04:58:18 <shapr> thanks for the nutshell explanation
04:58:30 <dnm> Sure. I don't think it helped you much though.
04:58:31 <dnm> ;]
04:58:33 <shapr> I think it did
04:59:03 <dnm> Have you read the paper on Monadic Parser Combinators?
05:00:02 <shapr> meijer and friends?
05:00:07 <shapr> yes, I've read it
05:00:15 <shapr> while I was reading, it was all so clear
05:00:21 <shapr> then afterwards....
05:00:39 * Igloo tentatively mentions http://urchin.earth.li/~ian/Haskell2LaTeX/Haskell2LaTeX-0.3.0.tar.gz
05:01:34 <dnm> SPJ has a slew of papers too that are good and that deal with monads in interesting circumstances, but I've not ready many of his papers.
05:02:32 <Heffalump> is that a release, then?
05:03:14 <Igloo> It's the 0.3.0 release, innit  :-)
05:03:26 <Heffalump> and the 0.1.0 and 0.2.0 releases were announced where?
05:03:43 <Igloo> It started of as 0.8.0 a few days ago, but by the time I'd got round to finishing it is was 0.3.0  :-)
05:03:55 <Igloo> 0.0.{1,2,3,4,5,6,7,8} were Oege-only releases I think
05:04:08 <Heffalump> ITYM 0.0.8, not 0.8.0
05:04:10 * Igloo realises I didn't take something I did out of the TODO. Oh well.
05:04:18 <Igloo> No, I mean 0.8.0
05:04:29 <Igloo> 0.0.8 was months ago
05:04:33 <Heffalump> right...
05:04:48 <Igloo> The version gradually dropped as I thought about more things that really ought to be fixed
05:05:05 <Heffalump> ah.
05:05:50 * Igloo could rename it 0.1.0 if you prefer  :-)
05:06:28 <Heffalump> s'ok :-)
05:06:46 * Heffalump wgets
05:07:32 * Heffalump watches it build and looks rather sick
05:07:33 <Igloo> Some bits of it are completely horrible proof of concept bits still, unfortunately. But it should pretty much work.
05:07:37 <Igloo> sick?
05:07:44 <Heffalump> it keeps running touch
05:07:52 <Igloo> Not in a sick way, though
05:08:04 <Igloo> It is bringing the .hi file timestamps in line with the .o ones
05:08:20 <Igloo> The commented out ones it isn't running are the sick ones that unfortunately don't work
05:11:51 <dnm> Okay. Going to try to nap, and not fully fall asleep
05:18:00 * Igloo catches up on Mail/haskell/*. Productive day today.
05:18:21 <Heffalump> make: *** No rule to make target `Hetris/Curses.hi', needed by `Hetris/UI.hi'.  
05:19:48 <Igloo> Euch
05:19:59 <Igloo> What did  you do?
05:20:27 <Heffalump> ./configure ; make
05:20:47 <Heffalump> (on two separate lines)
05:21:06 <Igloo> Oh, Curses.hs should be made in make dep. I wonder why I didn't notice that before.
05:21:22 <Heffalump> should I have done a make dep myself?
05:21:26 <Igloo> No
05:21:35 <Igloo> Oh, no, it shouldn't matter actually
05:22:05 <Igloo> Which machine is this?
05:22:12 <Heffalump> munchkin
05:22:22 <Heffalump> might be an old GHC
05:22:29 <Heffalump> well, 5.04
05:22:34 <Heffalump> which is what urchin has too IIRC
05:22:40 <Igloo> Shouldn't cause a make error, though
05:23:45 <Igloo> I'm reasonably sure I just tested exactly that on urchin, though, so I'm slightly confused
05:24:06 <Heffalump> well, I didn't try it on urchin
05:28:49 * Heffalump does so
05:29:15 * Igloo is doing so too  :-)
05:29:28 <Heffalump> maybe my account is better than yours :-)
05:29:31 <Igloo> OK, it definitely breaks on munchkin. I'll be annoyed if it's a make 3.78.1 vs 3.79.1 thing
05:29:40 <Heffalump> (well, it obviously is, since it can sudo, but apart from that... :-)
05:29:57 <Igloo> :-)
05:30:31 <Igloo> You didn't spot the configure script creating a SUID ganesh shell in /tmp then?  :-)
05:30:41 * shapr grins
05:30:44 * shapr laughs
05:33:00 <Heffalump> seems to be building fine
05:33:19 * Igloo is reading the make changelog
05:33:49 <Igloo> Hmmm, potential culprit spotted
05:34:46 <Igloo> Can you try upgrading munchkin to 3.79.1 please?
05:36:12 <Heffalump> errm.
05:36:26 <Igloo> ?
05:36:40 <Heffalump> well, it's running the standard RH6.x package
05:37:24 <Igloo> Is that a "not easily" then?
05:37:53 * Igloo just adds "make 3.79.1 required" to the README on the assumption I'm right  :-)
05:41:40 <Heffalump> well, I could, but I'd probably have to rebuild the SRPM
05:42:28 <Igloo> Doesn't matter too much
05:43:05 <Igloo> People with up-to-date distros can compile it anyway  :-)
05:57:19 * Igloo contemplates continuing my productivity streak by looking at GHC's build system
05:57:53 * shapr wants to get rid of this cold to get some productivity
06:00:13 <Igloo> :-(
06:00:40 <shapr> I'm happy to hear that you're productive :-)
06:00:48 <Igloo> :-)
06:49:16 <Igloo> Anyone know what this is?
06:49:16 <Igloo> # Include the front panel code?  Needs GTK+.
06:49:16 <Igloo> GhcRtsWithFrontPanel = NO
06:55:31 * shapr has no idea
06:57:09 * Igloo might find out once I've got my head round this
07:25:58 <shapr> I had a sudden idea for an interactive exploratory file format finder
07:26:08 <Igloo> Oh?
07:26:51 <shapr> if you could see a graphical representation of the various tree built by bzip2, pkzip, and other compression software on varying compression levels, you would quickly understand a lot about the structure of that file
07:27:07 <shapr> iirc, pkzip uses Shannon-Faro trees, dunno about bzip2
07:27:16 <shapr> is there already such an exploratory tool?
07:27:50 <Igloo> I'm not quite sure I understand
07:27:52 <Heffalump> bzip2 does the Burrows-Wheeler transform
07:27:56 <Igloo> bzip2 compresses a single file
07:28:11 <shapr> I've vaguely heard of that
07:28:38 <shapr> Igloo: part of the task of a file compressor is to find duplication and other patterns in the file
07:28:53 <shapr> if I could see a graphical representation of the patterns it finds, I could understand a file much faster.
07:28:54 <Igloo> Ah, OK, I think I see now
07:29:20 <shapr> do you think that would be a useful tool?
07:29:45 <shapr> sounds like something Haskell would be good at
07:32:54 <pesco> shapr: sounds interesting, can you go into more detail as to what exactly the program should accomplish?
07:34:05 <shapr> something like a cross between a spellchecker and file compressor
07:34:29 <shapr> look for duplicate structures, or off-by-one structures
07:34:53 <shapr> I would guess bzip2 and gzip already do all that
07:35:13 <pesco> I guess.
07:35:52 <shapr> I'd be perfectly happy with a graphical representation of the compress trees
07:37:22 <pesco> shapr: What do you mean by graphical representation of the compress trees?
07:37:47 <pesco> I know only about the Huffman-coding gzip uses.
07:39:11 <shapr> huffman looks for the most common char and encodes it with the fewest number of bits
07:39:29 <shapr> afaiu, LZW and better looks for mult-char patterns and encodes that with the fewest bits
07:39:58 <shapr> so "the" might be 0, and part of thespian, thebes, "the android", etc
07:40:24 <shapr> I don't know if LZW looks for patterns of dictionary tokens
07:41:58 <pesco> I don't quite see how seeing the tree would give insight into the structure of the file.
07:42:24 <sethk> LZW finds the longest dictionary entry that matches, starting at the current character.
07:42:31 <shapr> oh, neat
07:42:32 <shapr> hi sethk!
07:42:40 <sethk> shapr: Hi.
07:42:54 <sethk> shapr:  Then it makes that dictionary entry one character longer.
07:43:13 <shapr> I just thought that exploratory file format finding could be done by looking at a graphical file compress tree representation
07:43:18 <sethk> shapr:  There is a limit on the longest string and the overall dictionary size.
07:43:55 <sethk> shapr:  So, the tree would tell you a lot about the most frequently used phrases.
07:44:18 <shapr> I'm thinking of something like a refactoring browser, but for finding file formats.  it would be interactive, but hopefully automate some of the mind-numbing compare bits.
07:44:29 <Heffalump> any standard compression tool will first do dictionary based compression, then alphabet based stuff (like Huffman)
07:45:09 <sethk> Heffalump:  For purposes of examining the file structure, the Huffman phase would make things more difficult.
07:45:17 <shapr> right
07:45:31 <shapr> if I could see a gtop-style line showing token locations, that would help me
07:45:49 <Heffalump> sethk: true
07:45:55 <shapr> hopefully it could find field start and end delimiters if they exist
07:46:06 <Heffalump> since dictionary based compression tends to look for 3-4 character (or longer) strings, you might find quite a lot of bogus structure.
07:46:15 <sethk> Shapr:  I've got some pure LZW compression code written in C if that would help.  The code is old and kind of ugly, though...
07:46:40 <shapr> how many lines? I can read C, but I try to stay away from actually writing it.
07:46:52 <sethk> shapr:  I'll check the line count.  Hang on...
07:46:57 <shapr> thanks :-)
07:48:49 <shapr> I could just google for LZW compressors written in Haskell
07:48:51 * shapr tries that
07:49:06 <shapr> wow
07:50:02 <shapr> whoa cool paper: "Attack of the Mutant Suffix Trees"
07:50:21 <shapr> I wonder if suffix trees could be suited to format finding
07:50:25 <sethk> shapr:  The uncompress code is about 600 lines.
07:50:37 <sethk> shapr:  Looking for where I put the compress code...
07:51:14 <sethk> shapr:  Off hand I'd guess that prefix and suffix trees would reveal similar patterns...
07:51:38 <shapr> it took me awhile to realize how different the ration of loc vs complexity is in various languages.
07:51:50 <shapr> er, "ratio"
07:52:50 <shapr> months ago, I asked Heffalump to look at several pages of Haskell to do suffix trees, since I thought that was ten minutes reading
07:53:09 <shapr> in Python, that really is ten minutes reading.
07:53:59 <Heffalump> sorry?
07:54:55 <shapr> I asked you to look at some haskell source, and you said "sure, if it's short" and I thought ~ten pages of Haskell about suffix trees was ten minutes of reading
07:55:08 <shapr> this was many months ago :-)
07:55:33 <shapr> you and Igloo said "that could take hours to read"
07:55:34 <Heffalump> 10 pages of Python is 10 mins reading, then?
07:55:38 <shapr> and I was enlightened...
07:55:41 <shapr> yah sure
07:56:01 <Heffalump> wow
07:56:05 <shapr> not that Python is incredibly verbose, I think that Haskell can be incredibly concise
07:56:10 <sethk> shapr:  library (common to compress and uncompress) 441 lines
07:56:10 <sethk> compress main program:  134 lines
07:56:10 <sethk> uncompress main program:  129 lines
07:56:16 <Heffalump> I don't know any language I can read 10 pages of code of in 10 minutes
07:56:30 <shapr> maybe I just understand Python really well?
07:56:51 <shapr> sometimes I can think in Python better than in English ;-)
07:57:24 <shapr> sethk: could I have a copy? I'd like to read it, if you don't mind sharing it.
07:58:23 <sethk> Shapr:  You want me to email it or try to do DCC?
07:58:46 <shapr> my irc client doesn't have dcc yet
07:59:11 <sethk> shapr:  Then, email to where?
07:59:21 <shapr> did you get my privmsg?
07:59:29 <sethk> shapr:  checking...
07:59:40 <sethk> shapr: yes
07:59:45 <shapr> ok, cool
08:00:20 <shapr> Heffalump: python is very easy on the eyes, that might make some difference
08:00:37 <shapr> it has significant whitespace, but the structure is simpler than Haskell
08:05:45 <sethk> shapr:  Email sent.  Hopefully with all the files attached.... :)
08:12:54 <shapr> sethk: thanks!
09:16:09 <Igloo> I don't think I want to know why GHC's makefile has "PRINTER         = lpr" in
09:16:21 * shapr laughs
09:16:31 <Heffalump> :-)
09:16:45 <Heffalump> make printout
09:17:32 <Heffalump> obviously...
09:39:20 <andersca> hey hey Marvin--
09:42:31 <Marvin--> heyho
09:55:37 <Marvin--> Gah, the second assignment of the AFP still hasn't come up on the web page :(
09:55:43 <Marvin--> Now it's a week late :(
09:58:56 <andersca> ugh
10:06:01 <hdaume> morning
10:06:44 <Heffalump> evening
10:15:21 <Marvin--> /usr/lib/ghc-5.04/HSlang.o: unknown symbol `__stginit_Ix'
10:15:21 <Marvin--> hmm
10:16:06 <Heffalump> missing Ix class?
10:16:12 <Heffalump> </guess>
10:16:29 <Marvin--> I'm toying with plugins
10:16:36 <Igloo> plugins?
10:16:43 <Igloo> As in the dynamic loading thing I mentioned earlier?
10:17:15 <Marvin--> yes
10:17:22 <Marvin--> I suppose
10:17:24 <Marvin--> :)
10:17:36 <Marvin--> I'm looking at the TextFilter thingy
11:28:22 <engstad> Any good tutorial on the state monad somewhere?
11:32:37 <Marvin--> engstad: http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm is pretty good I think
11:35:41 <engstad> Marvin-- Thanks.
11:38:00 <engstad> Marvin--: Oh, VERY good intro. :-)
11:43:38 <Marvin--> engstad: Yeah, I think it was the first tutorial on monads I read :)
12:29:57 <engstad> Marvin--: Is the "ST" monad already defined somewhere, or do I just have to make my own?
12:32:18 <Marvin--> engstad: I don't know about hugs, but in ghc you can import Control.Monad.State and there's lots of goodies
12:33:31 <Marvin--> http://www.haskell.org/ghc/ for more docs on ghc
18:07:52 <sethk> hello, all, or anyone.
21:54:29 --- topic: 'ANNOUNCE: GHC version 5.04.1 released || ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || 2002 Haskell Workshop Programme http://www.cse.unsw.edu.au/~chak/hw2002/ || Try to get this topic to fill a whole screen | Don't use drugs, get high on hug'
21:54:29 --- topic: set by shapr on [Fri Sep 27 02:47:51 2002]
23:27:54 <sethk> Any c2hs mavens around?
