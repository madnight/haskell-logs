01:14:37 <shapr> hi
01:19:20 <sethk> Hello shapr
02:02:52 <sethk> Hello andersca
02:06:43 <Heffalump> shapr: you about?
02:39:21 <andersca> hey sethk, Marvin--
02:40:40 <Marvin--> morning
02:42:59 <Marvin--> anyone tried gtk2hs?
02:43:11 <andersca> I've just looked at the source code
02:43:39 <Marvin--> I seem to remember that gtk+hs was rather clunky to use, but gtk2hs is supposed to be a rewrite, right?
02:46:03 <Marvin--> I want to see if it's faster to use gtk2 than Koen's Yahu (Tk wrapper basically)
02:46:32 <Marvin--> right, this is going to take ages to compile I suppose
02:54:08 <Marvin--> argh, it failed
02:54:15 <andersca> where did you find gtk2hs?
02:54:28 <Heffalump> gtk2hs.sourceforge.net IIRC
02:54:32 <andersca> found it
02:55:20 <Marvin--> maybe I should send a patch
02:56:37 <Marvin--> andersca: you'll have to change the #ifdef __GLASGOW_HASKELL__ <= 502 to 504 instead, in gtk/general/UTFCForeign.hs ;)
02:56:48 <Marvin--> #if, that is, not #ifdef
02:59:09 <Marvin--> uh, where's the class Storable defined?
03:01:29 <Marvin--> gtk2hs tries to define a 'destruct' function that's not in the Storable class
03:04:50 <Marvin--> Ah, have to use CVS version for 5.04
03:05:53 * Marvin-- waits for another eternity :-)
03:38:51 <ernstB> Any clean users?
03:39:04 * Heffalump just had a shower
03:40:08 <ernstB> http://www.cs.kun.nl/~clean/
03:40:16 <Heffalump> I know :-)
03:40:21 <Heffalump> just being facetious
03:40:24 <Heffalump> sorry, I don't use it
03:44:55 <Marvin--> hmm, how weird, I get a libgtk2hs.a, but no libgtk2hs.so
04:17:08 <leander-> i'm new to haskell, which compiler/interpreter should i use under linux?
04:17:13 <leander-> hi btw :)
04:21:31 <ibid> depends on your needs
04:21:46 <ibid> ghc is a good choice for many needs
04:22:16 <Igloo> I would say ghc and hugs respectively in general
04:22:25 <leander-> ok, i'll dl it; just want to start with a hello world :)
04:22:53 <ibid> i see very little need for hugs when one can use ghci :-)
04:23:04 <ibid> about the only advantage of hugs is its portability
04:23:27 <Igloo> ghci doesn't have :e does it?
04:23:39 <Igloo> And having a different set of error messages can be useful
04:24:17 <Igloo> hugs scoping makes more sense in an interactive environment too I think
04:24:49 <ibid> i never used :e with hugs :-)
04:34:13 <Marvin--> I think the way ghci places you in an IO monad simply rocks :)
04:34:33 <Marvin--> it's very nifty being able to do let x = foo
04:37:04 <leander-> ghc doesn't want to build on mymachine :/
04:38:58 <Marvin--> apt-get install ghc5 :-)
04:39:04 <andersca> make rpm
04:39:13 <leander-> slackware ;)
04:39:14 <Marvin--> Debian - because you want someone else to compile it for you
04:39:51 <leander-> ghc/utils/genprimopcode/genprimopcode <- no such file/dir
04:48:18 <leander-> /bin/sh: test: too many arguments <- thats the first error, any1 know what is the problem?
04:53:31 <ChilliX> leander-: either .configure hasn't been run or it came up with an unexpected value on your machine (is my guess)
05:01:34 <leander-> meanwhile i found something out:
05:01:44 <leander-> ./ghc/compiler/Makefile:compiling_with_4xx = $(shell if (test $(GhcCanonVersion) -lt 500); then echo YES; else echo NO; fi)
05:02:02 <leander-> this seems to be the line priducing the error
05:02:12 <leander-> s/prid/prod/
05:02:29 <leander-> but i dunno what's wrong with that test
05:04:19 <leander-> (of course i ran ./configure)
05:04:23 <ChilliX> probably $(GhcCanonVersion) si the empty string
05:04:54 <ChilliX> or it is something different then just a number
05:05:02 <leander-> hm
05:05:14 <ChilliX> I'd assume, the thing is defined in fptools/mk/config.mk
05:05:28 <ChilliX> (which is being generated from fptools/mok/config.mk.in)
05:05:58 <ChilliX> anyway, a grep in fptools/mk/ should reveal the defining location
05:06:41 <leander-> bash-2.05# find . -name "fptools"
05:06:41 <leander-> bash-2.05# 
05:06:43 <leander-> ???
05:07:12 <ChilliX> sorry, fptools/ is how the root directory of GHC build tree is called in CVS
05:07:24 <ChilliX> in  the tar file it is being renamed to ghc-<version>/
05:07:33 * Igloo would advise against working as root
05:07:46 * ibid too
05:08:04 * ibid would not go to root even to install stuff locally
05:08:07 * ChilliX says, "Real men use root!" ;-)
05:08:08 <Igloo> Especially as something like rm -rf $(GHCROOT)/* before you have run configure could have bad sideeffects
05:08:12 <ibid> for that, there is the staff group :-)
05:08:38 * ChilliX realises that his statement is ambigious in English and blushes
05:08:52 <ChilliX> (well I am not a native speaker, after all...)
05:09:01 <ibid> ambiguous? how?
05:09:06 <Igloo> What are you a native of?
05:09:15 <ChilliX> I am German
05:09:46 <Igloo> Oh, right
05:10:27 <ibid> on an unrelated note...
05:10:38 * ibid thinks the ntg document classes are cool :-)
05:10:39 <leander-> seems that the var is simply the current version number, will try to modify the test; thx ChilliX
05:11:00 <Igloo> Have you run ./configure?
05:11:14 <leander-> yes
05:11:21 <ChilliX> leander-: current version number including dots?
05:11:21 <Igloo> Hmmm, OK
05:11:48 <leander-> ChilliX no, for integer comparision (commented in the config.mk.in)
05:11:53 <ChilliX> leander-: what does "ghc --version" say
05:12:16 <leander-> ChilliX eh, i'm trying to install it :)
05:12:29 <ChilliX> leander-: yes, I know tghat it should be the number for integer conversion
05:12:31 <ChilliX> ahhhh
05:12:38 <ChilliX> you haven't got ghc yet
05:12:45 <ChilliX> well, ghc needs itself to compile...
05:13:03 <ChilliX> so, I guess running ./configure failed
05:13:22 <ChilliX> (or are you installing from .hi files)
05:14:11 <leander-> hm, no, configure looks good
05:14:31 <leander-> i simply dl't the source bz2
05:14:41 <ChilliX> that can't work
05:14:51 <ChilliX> the sources are all in Haskell
05:14:59 <ChilliX> (GHC is implemented in Haskell itself)
05:15:07 <leander-> hm, so how can one do that..
05:15:12 <ChilliX> without a working Haskell compiler, you can't compile this
05:15:19 <ibid> or does leander- have some other haskell compiler? (hbc?)
05:15:22 <ChilliX> there is a bootstrap process
05:15:25 <leander-> yes, i understand
05:15:49 <ChilliX> which is based on C files that GHC generated from the Haskell files of itself
05:15:54 <ChilliX> these files have the ending .hc
05:16:06 <ChilliX> hence, this process is called installing from hc files
05:16:15 <leander-> hm
05:16:36 <ChilliX> this process was somewhat broken a while ago, I am not entirely sure whether it has been fixed again
05:16:57 <leander-> i'll look for an older ghc on my cd's...
05:18:45 <ChilliX> http://haskell.org/ghc/docs/latest/html/building/sec-porting-ghc.html
05:19:19 <ChilliX> if you have an older version somewhere, that would considerably simplify things
05:33:31 <leander-> so, the binary distro seemed to install very fine; thx guys
05:34:46 <ChilliX> Which version have you got now?
05:36:33 <leander-> the latest, 5.04.1
05:36:43 <ChilliX> ok, good
06:41:12 <leander-> hello world! :)
06:42:06 --- topic: set to 'ANNOUNCE: GHC version 5.04.1 released || ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/' by ChilliX
07:20:32 <leander-> hm, i cannot find a description of the difference between .lhs and .hs
07:21:47 <leander-> sry, i know it's a dump question
07:21:59 <ChilliX> lhs is a literate Haskell file
07:22:09 <ChilliX> it's described in the report in some appendix
07:22:23 <leander-> thx, will look for it..
07:23:49 <leander-> ah, found it :)
07:25:40 <ChilliX> 'night
07:26:08 <leander-> gn8
07:26:16 <leander-> ?
12:35:36 <leander-> damn, is haskell hard
12:36:22 <Igloo> No. Next question?
12:36:23 <Igloo> :-)
12:36:46 <leander-> since 1/2 hour i try to reverse and then print a string
12:37:04 <Igloo> What have you got so far?
12:37:25 <leander-> i :: String <- is this correct to make i a string variable?
12:37:49 <ibid> I/O is not the easiest think to try out as the first thing with Haskell :-)
12:37:51 <Igloo> That says that i has type String, which is probably what you want
12:38:04 <ibid> (but you don't have to say that:-)
12:38:11 <leander-> hm, but i get an 'not in scope' error
12:38:12 <Igloo> ibid: With do notation and no desire to learn about monads themselves it's not too bad
12:38:25 <Igloo> leander: It refers to the top level declaration of i
12:38:41 <Igloo> Haskell don't have variables in the way C et al do
12:38:48 <Igloo> Haskell doesn't, that is
12:38:52 <ibid> Igloo: i can remember my first tries.  the do notation has some surprises i learned to avoid only after i figured out monads
12:39:32 <leander-> i'll rtfm tomorrow, any hints for a good tutorial on the web?
12:40:56 <ibid> what's your programming background?
12:41:16 <leander-> c,basic,asm
12:41:24 <leander-> and java
12:41:25 <ibid> okay
12:41:37 <ibid> so you'll have some trouble adjusting to the right mindset :-)
12:41:47 <leander-> ;) i guessed it
12:42:23 <ibid> http://www.isi.edu/~hdaume/htut/tutorial.pdf looks good to me
12:43:15 <leander-> *save* thanks
12:44:23 <leander-> gn8
12:46:53 <dblack> anyone know how to see mail headers in outlook?
12:46:58 <dblack> whoops
12:46:58 <dblack> sorry
12:47:01 <dblack> wrong window :-)
12:47:04 <dblack> but you can answer anyway :-)
12:50:40 * ibid knows only mutt :-)
14:15:55 <olczyk> Soes someone know the history of Haskell?
14:16:10 <olczyk> I was wondering what it's relationship to Gofer and Miranda is.
14:16:14 <Heffalump> There's an introduction in the preface to the Haskell report
14:16:22 <Heffalump> Hugs grew out of Gofer
14:16:37 <Heffalump> which I think itself was developed because Miranda was commercial, TICBW
14:18:21 <olczyk> I pretty much understood about Gofer but someone told me it comes from Miranda.
14:19:46 <olczyk> Thompsons Haskell book was first written for Miranda.
14:20:49 <clausen> yeah, but what about the language?
14:20:55 <clausen> like, there were lots of conferences, right?
14:21:06 <clausen> haskell was designed by committee, right?
14:22:42 <ibid> yes
14:23:50 <ibid> i thought gofer was a dialect of haskell, but i guess i was wrong :-)
14:24:07 <Heffalump> it's very close, language-wise
14:24:16 <Heffalump> but it's not really a dialect
14:24:45 <ibid> i mean, historically a dialect
14:25:14 <ibid> but i'm off to bed. bbl
14:25:24 <olczyk> I believe gofer came first then Haskell came from that.
14:25:39 <olczyk> Several references I have seem to be gofer references not Haskell references.
14:42:43 <sethk> Gofer is the predecessor to Haskell.  Haskell isn't quite a superset (letrec, for example).
14:46:50 <Heffalump> Gofer had different guards too.
19:49:48 <sethk> If anyone is around, is there any way in ghci to look at variables in a data structure.  These would be undefined as soon as execution completes (they are in main) but perhaps ghci actually has the values?
20:51:05 <Pseudonym> I don't understand the question.  What is a variable in a data structure?
21:13:41 --- mode: card.freenode.net set +o ChanServ
21:35:42 <sethk> If it exists I'd like to view whatever state ghci keeps around after running a function.  Of course, it may not keep any.
21:36:30 <Pseudonym> Even if it could, you wouldn't understand the state.
21:36:38 <sethk> Most likely.
21:38:38 <Pseudonym> Can I ask what you want it for?
21:39:56 <sethk> Part curiosity.  I'm testing some things with HaXml and I want to see the results of parsing the XML file.  You can pretty print it, though, which is probably good enough.
21:41:25 <Pseudonym> Another thing is that there's really _no_ state, apart from CAFs.
21:41:58 <sethk> Even under the covers?
21:42:12 <Pseudonym> Not that can't be garbage collected.
21:42:42 <sethk> makes sense.
21:43:15 <Pseudonym> And, of course, if it's garbage, does it count as "state"?
21:45:51 <sethk> No, not really; state is by definition persistent.
21:46:29 <Pseudonym> Right.  And Haskell has no persistent state.  It has references, of course (e.g. IORef), but when the reference dies so does whatever it points to.
21:46:56 <clausen> hmmm
21:47:23 <clausen> if something is referenced all through the program, then it's persistant
21:48:26 <Pseudonym> Not really.  Persistent data doesn't go away when you forget about it.
21:48:41 <sethk> Clausen:  Of course, nothing is eternally persistent, so you have to specify your temporal domain to give meaning to persistent.
21:48:50 <Pseudonym> In Haskell, everything goes away when you forget about it.
21:49:14 <sethk> Pseudonym:  When you have no handle to it, really.
21:49:46 <Pseudonym> Right.
21:49:50 <sethk> Clausen:  I had asked about any internal stuff laying around after running ghci, so Pseudonym's answer is correct for the question I asked.
21:49:56 <Pseudonym> In that sense, no data in Haskell is "persistent".
21:50:31 <clausen> ah, the openprojects dropouts meant I missed stuff
21:50:59 <sethk> pseudonym:  You can persist the data by storing it someplace; in that sense all languages are alike once the power is turned off.
21:52:50 <Pseudonym> True. :-)
21:53:40 <sethk> I deployed my first Haskell program into a commercial environment today.  It processes 1,200,000 records in about five minutes.
21:53:47 <Pseudonym> Woohoo!
21:53:58 <Pseudonym> Is that good?
21:54:27 <sethk> I've discovered over the past few weeks that Haskell can perform quite nicely when programmed intelligently, and can be a real dog when programmed stupidly.
21:54:42 <Pseudonym> Like any powerful tool.
21:54:47 <sethk> You have to understand what is going on, which is not true for most languages (at least not as true).
21:55:16 <Pseudonym> Sort of.  I think a more correct way of putting it is that Haskell's performance model is not as obvious.
21:55:34 <Pseudonym> IOW, it's easier to work out what's going on in many other languages.
21:57:08 <sethk> That's probably true.  I'm thinking about whether your more "average" programmer could learn it; these are people who don't even understand what goes on in C++ or Java code that they write.
22:09:04 <clausen> sethk: do they do an equally bad job in C?
22:09:06 <clausen> dunno
22:09:16 <clausen> even skilled haskell programmers seem to have problems in haskell
22:09:25 <shapr> really?
22:10:07 <clausen> yeah, I've got a friend who's writing a haskell debugger
22:10:09 <Pseudonym> Yeah, but skilled C++ programmers have problems in C++, too.
22:10:21 <clausen> and he's constantly complaining about how difficult it is to analyse performance
22:10:22 * Pseudonym curses static initialisation and shared libraries
22:10:25 <clausen> like, you only need one reference
22:10:27 <shapr> hi Pseudonym
22:10:31 <clausen> for something to not be GCd
22:10:36 <Pseudonym> Oh, G'day.  How was Greece?
22:10:42 <clausen> and it's often hard to trace down what that reference is
22:10:42 <clausen> etc.
22:10:49 <shapr> greece was warm.
22:10:56 <sethk> Clausen:  They do an equally bad job, but it isn't as obvious in the performance.
22:12:10 <clausen> same goes wrt lazy evaluation
22:12:15 <clausen> it's only lazy if something isn't forcing it!
22:12:22 <clausen> it's often hard to track down what's forcing it
22:12:38 <clausen> s/something isn't/nothing is/
22:12:41 <Pseudonym> I have the opposite problem.
22:12:57 <Pseudonym> I know it needs to be forced, but demand analysis isn't clever enough to work that out.
22:13:10 <Pseudonym> My code contains seqs and bangs.
22:13:26 <Pseudonym> I've never had a problem with things not being GC'd, but it's probably that my style is different.
22:13:31 <clausen> btw, I think the literature calls "demand analysis" "strictness analysis"
22:13:43 <Pseudonym> Er, yes.
22:14:01 <clausen> demand analysis is a better name though
22:14:02 <clausen> hehe
22:14:42 <Pseudonym> Actually, no.
22:14:49 <clausen> why?
22:14:50 <Pseudonym> I meant demand analysis.
22:15:14 <Pseudonym> Strictness analysis infers that a function is strict in some argument.
22:15:15 <clausen> "strictness analysis" is about determining which (parts) of arguments of a function are actually used
22:15:18 <clausen> right
22:15:20 <Pseudonym> Right.
22:15:37 <clausen> which is used to determine which arguments must be evaluated
22:15:41 <Pseudonym> Demand analysis can infer that for all uses of some function, some argument is always evaluated.
22:15:52 <sethk> Well....it is about figuring out which should be forced immediately because they will definitely be used at some time during program execution.
22:15:54 <clausen> isn't that the same thing?
22:15:54 <Pseudonym> Let me explain.
22:16:07 <Pseudonym> f x y z = if x == 0 then y else z
22:16:12 <Pseudonym> f is strict in x.
22:16:14 <Pseudonym> Right?
22:16:17 <clausen> right
22:16:22 <Pseudonym> Now consider this:
22:16:57 <Pseudonym> let { f x y z = if x == 0 then y else z } in f x 1 2
22:17:12 <Pseudonym> At all call sites for f, the second and third arguments are already evaluated.
22:17:39 <Pseudonym> So f does not need to evaluate y or z internally.
22:17:53 <Pseudonym> That's demand analysis.
22:18:02 <clausen> aha
22:18:06 <Pseudonym> I think.,
22:18:12 <Pseudonym> I'm pretty sure that's how it works, anyway.
22:18:21 <clausen> hmmm
22:18:24 <clausen> that just gave me an idea
22:18:28 <clausen> (!!)
22:18:32 <clausen> although, I'm sure someone
22:18:35 <clausen> will have thought of it:
22:19:01 <clausen> you should make it easy (in machine language) to make function calls
22:19:05 <clausen> you should be able to do:
22:19:20 <clausen> movl func-call %edx, %eax
22:19:35 <clausen> or similar
22:19:44 * clausen wonders what the win is like
22:20:04 <Pseudonym> Eek.
22:20:53 <clausen> actually, wouldn't help ,uch
22:21:03 <Pseudonym> My first comment is that machine language isn't supposed to be easy, especially not nowadays.
22:21:06 * clausen should read about haskell's "cells"
22:21:15 <clausen> Pseudonym: I meant "space efficient"
22:21:39 <Pseudonym> Space efficiency doesn't matter nowadays.  RAM is cheap.
22:21:45 <clausen> wrong
22:21:49 <clausen> L1 cache is expensive
22:22:13 <clausen> L1 cache utilization is the bottleneck in most computation
22:22:17 <Pseudonym> Ah, but L1 instruction cache usage patterns is damn easy to predict.
22:22:27 <Pseudonym> It's the _data_ cache which is the bottleneck.
22:22:28 <clausen> yeah, the problem is it's too small
22:23:46 <Pseudonym> Unless you're writing self-modifying code, of course. :-)
22:24:01 <Chilli> point is that in most of todays applications pure computational efficiency is secondary
22:24:21 <Chilli> mass storeage acces, network access, and GUIs are much more of the bott;eneckj
22:24:40 <shapr> I think bosses are most of the bottleneck ;)
22:26:29 <Pseudonym> My desktop machine spends most of its time waiting for me to hit the next key.
22:26:54 <shapr> lapalme and rabhi's "Algorithms: A functional programming approach" includes two types of efficiency analysis for each algorithm
22:27:29 <shapr> it includes process and space usage analysis for each, and for some it also includes max temporary space usage.
22:28:01 <shapr> hi tmoertel,
22:28:03 <shapr> what's up?
22:28:25 <tmoertel> shapr: not too much. I've been busy the last few days (work & stuff), so I've missed out on #haskell fun.
22:28:38 <shapr> same here, I've been away for a week.
22:28:47 <tmoertel> greece?
22:29:38 <shapr> yup
22:30:25 <shapr> greece is an interesting place, I saw both good and bad sides of it while I was there.
22:30:40 <tmoertel> I hope nothing *too* bad.
22:31:15 <shapr> well, I open-mindedly went to a Communist Festival....
22:32:03 <Pseudonym> That could have been anywhere, of course, not just Greece.
22:32:08 <shapr> truly
22:33:48 <clausen> shapr: the "functional programming approach"  book is functional as in haskell?
22:33:55 * clausen never heard of it
22:33:59 <clausen> (should I have?)
22:34:19 <shapr> clausen: just a moment, I'll find the url.
22:34:46 <shapr> http://www.iro.umontreal.ca/~lapalme/Algorithms-functional.html
22:34:51 <shapr> I really like that book.
22:35:17 <clausen> have you read okasaki's book?
22:35:28 <shapr> nope, not yet.
22:35:50 <shapr> on the basis of the Amazon.com preview pages, I chose the lapalme book first.
22:36:30 <clausen> hmmm, this lapalme book looks like it talks about imperative algorithms in haskell
22:37:41 <shapr> it talks about lots of stuff.
22:38:17 <clausen> does it have hoode-melville queues in it, for example?
22:38:31 <Pseudonym> Ooh, handy.  I'm hacking Edison at the moment.  Some useful stuff in here.
22:38:32 <shapr> I haven't seen them yet.
22:39:00 * Pseudonym might lift some data structures
22:39:13 <clausen> the queue in that book is O(n) add-to-queue time!!!
22:39:14 <shapr> clausen: from what I've seen the point of that book is to teach basic algorithms from zero up
22:39:34 <clausen> you can do that in O(1) worst-case time, even in haskell
22:39:37 <shapr> clausen: it also has queues of O(1) add
22:39:41 <Pseudonym> ..and, presumably, show how to analyse them.
22:40:00 <clausen> where?
22:40:01 <shapr> and it has an extra nifty priority queue that was originally thought up by Bird
22:40:25 * clausen looking at the code on the website
22:40:25 * shapr looks for the page
22:40:27 <Pseudonym> Is it the swap-the-subtrees thingy?
22:40:56 <clausen> leftist heaps?
22:41:10 <clausen> ah, he does have hood-melville queues in there :)
22:41:25 <shapr> clausen: what is one?
22:41:50 <clausen> the pair-of-lists queue implementation is called "hood-melville"
22:41:53 <clausen> there are a few variations
22:42:03 <clausen> the variation he gave is O(1) amortized time, not worst case
22:42:07 <clausen> there is a worst-case version
22:42:44 <shapr> the second queue implementation is the extra cute one, seems it was proposed by Burton, not Bird
22:43:02 <shapr> it's the queue that uses two lists, one for the head and one for the tail
22:43:16 <clausen> isn't that hood-melville?
22:43:17 * clausen checks
22:43:37 <Pseudonym> The simple one is the Burton queue.
22:43:44 <Pseudonym> The trickier one is the Banker's queue.
22:43:45 <shapr> right
22:44:10 <Pseudonym> Hood-Melville queues are slightly different, I think.
22:44:10 * shapr looks up the references
22:44:27 <clausen> ah, hood-melville is the ultra-tricky one
22:45:07 <shapr> want me to type in the Burton reference?
22:45:21 <Pseudonym> Chris Okasaki came up with an even better one than Hood-Melville queues, though.
22:45:28 <Pseudonym> http://citeseer.nj.nec.com/okasaki95simple.html
22:45:37 <Pseudonym> It's ultra ultra tricky.
22:45:55 <shapr> wow, O(1) time in the worst case
22:47:46 <Pseudonym> Chris Okasaki's major, major contribution to the field is actually a very simple observation, BTW.
22:47:49 <clausen> yep, it's in his book :)
22:47:58 <shapr> what's the simple obs?
22:48:03 <Pseudonym> It's that lazy evaluation can turn an amortised complexity into a real complexity.
22:48:43 * clausen wants to use this idea to write a fast file system
22:49:27 <shapr> Pseudonym: can you explain that a little more? I think it went past me.
22:49:45 <Pseudonym> OK, consider the standard way to do quick sort in Haskell:
22:49:50 <Pseudonym> qsort [] = []
22:49:59 <Pseudonym> Hang on, scratch that.
22:50:10 <Pseudonym> qsort xs = qsort xs []
22:50:14 <Pseudonym> qsort xs = qsort' xs []
22:50:22 <Pseudonym> That's the one I want. :-)
22:50:27 <Pseudonym> qsort' [] = id
22:50:58 <Pseudonym> qsort' (x:xs) = qsort' [x' | x' <- xs; x' < x] . (x:) . qsort' [x' | x' <- xs, x' > x ]
22:51:01 <Pseudonym> Got that?>
22:51:17 * shapr reads
22:51:36 <shapr> ok, yah
22:52:04 <shapr> that's the simplest qsort in this book, iirc
22:52:09 * tmoertel wonders about the case when more than one element equals x
22:52:09 <Pseudonym> Yes.
22:52:24 <Pseudonym> Oops.  Change the last > to >=.
22:52:29 <Pseudonym> You know what I mean.
22:52:33 * tmoertel stops wondering
22:52:36 <shapr> yah, I get the idea
22:52:45 <shapr> tmoertel: what were you wondering?
22:53:04 <tmoertel> about the < and >, I expected one to be >=
22:53:27 <Pseudonym> OK.
22:53:41 <Pseudonym> If the partitioning is good, then this is O(n log n) in the length of the list.
22:54:06 <Pseudonym> However, and this is the tricky bit, if the partitioning is good, and you only evaluate the first k elements of the list, then this is O(k log n).
22:54:14 <Pseudonym> Er, O(n log k).
22:54:43 <shapr> ohhh
22:54:45 <shapr> I get it.
22:54:45 <Pseudonym> In particular, you could use it to find the minimum element of the list in O(n) time.
22:55:01 <Pseudonym> Or the k smallest elements in O(n log k) time, which is optimal.
22:55:42 <ibid> one of the top cs theorists in finland considers space efficiency the only selling point of quicksort - which is missed by the functional renderition
22:56:05 <Pseudonym> I understand his point, but I think that's a problem of quicksort itself.
22:56:20 <shapr> I was surprised to see that quicksort did not win the comparison in this algorithms book.
22:56:31 <Pseudonym> I figure if you can't afford the extra space to use merge sort, you shouldn't be sorting internally.
22:56:41 <Pseudonym> In many situations, anyway.
22:57:04 <ibid> Pseudonym: how is it a problem of quicksort?
22:57:46 <Pseudonym> Well, as the theorist said, quicksort's only selling point is space behaviour.
22:57:54 <Pseudonym> And as I said earlier, RAM is cheap.
22:57:59 <ibid> (of course, an efficient implementation of quicksort is very hard to write, according to him ["don't even think of it without extensive theoretical background"])
22:58:04 <Pseudonym> Ergo, quicksort is obsolete. :-)
22:58:05 <ibid> right
22:58:25 <ibid> yes
22:58:26 <Pseudonym> That's also true.  Get your sort out of a can if it's available.
22:58:31 <shapr> actually, another selling point of quicksort is extreme cuteness.
22:58:54 <shapr> not that my boss cares about that, of course :-)
22:59:00 <ibid> how is it cute?
22:59:25 <Pseudonym> Admittedly, quicksort also has not bad cache behaviour.
22:59:33 <Pseudonym> In principle, anyway.
22:59:36 <shapr> the recursive pivot thing is much flashier than something like insertion sort.
22:59:43 <Pseudonym> Accesses localise very quickly.
22:59:56 <ibid> shapr: isn't that true of merge sort as well
23:00:32 <ibid> (admittedly, i figured quicksort out only when i first saw the simple renderition in haskell...)
23:00:54 <shapr> in haskell, qsort is very cute
23:01:20 <ibid> but the cute version of qsort (in haskell) is a bad version of it
23:01:25 <Pseudonym> Yes.
23:01:32 <Pseudonym> The pivot in particular is chosen very poorly.
23:01:36 <shapr> yup
23:01:45 <Pseudonym> But then, quicksort on lists is going to be bad no matter what you do.
23:01:45 <ibid> bad choice of pivot, bad space efficiency etc
23:01:52 <ibid> true
23:02:05 <Pseudonym> Quicksort is designed for arrays.
23:02:20 <Pseudonym> Merge sort is probably the optimal approach for lists.
23:02:32 <ibid> and very easy to get right
23:02:37 <ibid> well, fairly easy
23:03:01 * tmoertel goes to bed
23:03:06 <tmoertel> night!
23:03:08 <shapr> g'night tmoertel
23:03:09 * ibid just woke up
23:03:15 <ibid> good morning :-)
23:03:26 * shapr woke up an hour ago
23:04:24 <ibid> well, actually i woke up two hours ago, but hey, you get the idea :-)
23:05:01 * shapr thinks waking up before noon is against nature
23:05:19 * ibid has to supervise a lab session at ten
23:05:48 <shapr> hey, is that the VM.hs and friends?
23:05:50 <shapr> how's that going?
23:06:00 <Pseudonym> http://drue.com/sleeplate/
23:06:01 <shapr> oh, school starts today, right?
23:07:59 <shapr> I like that guy.
23:20:33 <sethk> Anyone still here?  If so, have you played with any of the GUI libraries?
23:24:26 <shapr> I've used gtk+hs a bit
23:24:27 <shapr> it's nice
23:24:30 <ibid> shapr: yes, the second session
23:24:40 <ibid> shapr: http://www.mit.jyu.fi/antkaij/opetus/okp2002/demo/demo1/
23:24:55 <sethk> shapr:  I'm building gtk+hs now.  Have you used the "ih" part?
23:25:10 <shapr> no, I haven't
23:25:30 <shapr> featurewise the ih part sounds nifty, just haven't gotten to it yet.
23:26:06 <sethk> shapr:  It looks very interesting, and eliminates some state monads.
23:27:32 <sethk> Oops - it barfs with ghc-5.04.1.  Hopefully something trivial...
23:42:51 * shapr gives in and builds his own 5.04.1
23:43:22 <sethk> shapr:  gives in?
23:44:13 <dnm> hey shapr
23:49:50 <sethk> shapr:  I take it you haven't tried building gtk+hs for 5.04.1?
23:53:37 <Chilli> sethk: what's the problem?
23:54:37 <sethk> Chilli:  I'm getting, on GTypes.hs, "mismatched interface file versions:  expected 5041, found 5040".  I've rebuilt and reinstalled c2hs.
23:57:40 <Chilli> seems like an old 5.04 .hi file was still lying around
23:58:35 <sethk> Yes, sounds like it.  I've checked the obvious places.  I'll do a find on the whole drive.
23:59:40 <Chilli> did the error arise *while* compiling GTypes.hs
23:59:49 <Chilli> are did it complain baout the interface file of GTypes?
