04:53:47 * shapr blinks
04:54:18 <Heffalump> 'lo
05:03:57 <shapr> hiya
05:30:39 <shapr> I looked at Igloo's example, but it doesn't work.
05:31:28 * shapr looks at show and showList again
05:31:55 <Heffalump> what goes wrong?
05:31:58 <Heffalump> and did you try my idea?
05:32:03 <Heffalump> (which is fairly similar)
05:32:15 <shapr> with Igloo's idea, I still get overlapping declarations.
05:32:21 <shapr> hi cinema
05:32:35 <cinema> Hi everyone
05:33:17 <shapr> you have Haskell questions? or you're an experience Haskeller, and you've brought answers? :)
05:33:43 <shapr> wait, I've seen you here before.
05:33:45 * shapr thinks
05:34:13 <shapr> Heffalump: what was different abount your suggestion?
05:34:15 * shapr reads the logs
05:34:28 <cinema> Yes, I am working on an Hashell Firewall
05:34:35 <shapr> aha, I remember now.
05:35:04 <cinema> But thanks to suggestions in this channel, I am now working on Simon PJ paper about contracts evaluation
05:36:01 <Heffalump> working on it in what sense?
05:37:02 <cinema> The paper only gives general direction and hints. I am trying to implement it completely (without the financial models), and it is quite a bit of work
05:37:23 <Heffalump> have you asked the authors for the code?
05:38:12 <cinema> No. I suppose then don't want to give it away, because it has lead to a commercial product
05:38:50 <Heffalump> but they did publish about it
05:38:58 <Heffalump> try asking Simon PJ
05:39:13 <Heffalump> I think Eber is the one commercialising it so PJ might be more happy to give it away :-)
05:40:06 <cinema> Yes but if you want to implement it, you have to work ! And may be it can be given as a project for students
05:40:09 <Heffalump> it doesn't look that hard to implement, anyway - the combinators basically need to be constructors, so the valuation model can act on those constructors
05:40:13 <Heffalump> ah, ok
05:40:47 <Heffalump> maybe the combinators want to be smart constructors that do a bit of optimisation as you use them
05:41:21 <cinema> OK for the combinators (first layer). But then you have to implement abstract semantics (second layer) and evaluation (third layer)
05:42:06 <cinema> I am trying to implement the abstract semantics layer as type classes
05:42:11 <Heffalump> I thought the valuation model acts directly on the combinators?
05:43:07 <cinema> If I understand the paper correctly, the real valuation model is only the third layer
05:43:45 <cinema> I found this approach realy very interesting
05:49:25 <shapr> is he in fact using the type system to enforce correctness?
05:49:30 <shapr> what's the url to the paper?
05:49:55 <Heffalump> http://www.research.microsoft.com/Users/simonpj/Papers/contracts-icfp.ps.gz
05:50:20 * shapr downloads
05:51:15 <Heffalump> cinema: the evaluation semantics acts on the combinators, according to figures 4 and 5
05:53:57 <cinema> OK. Do you think it prevents implementing RandomVariable and Value Process as type classes, and then evaluation semantics as functions (evaluateContract & evaluateObservable)  
05:55:13 <cinema> My idea is to implement random variables as normal laws (giving it a variance and a means) and value processes as random variables with a time varying variance 
05:55:39 <cinema> (a linear time varying variance)
05:56:13 <cinema> But this implementation occurs only in the third layer
06:04:02 <shapr> hi pesco
06:04:10 <pesco> hey shapr.
06:04:26 * shapr reads the typeclass parts of the Haskell Report repeatedly
06:05:17 * pesco imagines his CD-ROM trying to read defective blocks.
06:05:21 <shapr> hah
06:05:25 <shapr> that's pretty much what's going on here.
06:05:33 <shapr> but I think the reader is the problem, not the media =)
06:06:39 <pesco> heheheh, maybe some moisture condensated inside your circutery? Try to keep yourself in a warm and dry place at all times.
06:07:01 <shapr> hah
06:07:16 <shapr> it's usually cold here.
06:07:37 <pesco> You're in Finland, right?
06:07:41 <shapr> yup
06:08:06 <shapr> why are these duplicate instance declarations?
06:08:07 <shapr> > class Bar a where {}
06:08:08 <shapr> > instance Foo a => Bar [a] where {}
06:08:08 <shapr> > instance FooString a => Bar [a] where {}
06:09:04 <pesco> Hm, appearently you can only give one instance declaration for Bar [a].
06:09:48 <Heffalump> there must be something which is a Foo and a FooString
06:09:51 <pesco> What you'd like to express is that [a] is a Bar if a is already a Foo or FooString.
06:12:05 <Igloo> No, the problem is that is you declare such a pair of instances in another module then the instance would overlap
06:14:16 <shapr> > class Bar a where {}
06:14:16 <shapr> > instance (FooString a,Foo a) => Bar [a] where {}
06:14:21 <shapr> that compiles at least
06:15:49 <pesco> But that has a different meaning.
06:16:10 <pesco> Igloo: What do you mean, I don't understand...
06:16:20 <shapr> %-P
06:16:28 * shapr smells smoke coming from his ears
06:17:09 <pesco> Heffalump: So it's usually ok to give instance declarations for the same type, only differing in their constraints?
06:17:30 <Heffalump> maybe it's not
06:17:35 <Heffalump> Igloo would know better than I
06:21:08 <Igloo> Suppose you have instance Foo a => Bar [a] and instance Baz a => Bar [a]. Now write a module which does instance Foo String, instance Baz String and imports the first module.
06:21:30 <Igloo> The problem being that instances of classes are implicitly global
06:21:59 <Igloo> AIUI, anyway. Does that make sense?
06:23:35 <shapr> hey, this compiles: "instance (BananaEncodable a,BananaEncodableString a) => BananaEncodable [a] where"
06:23:36 <shapr> shocking
06:24:21 <shapr> it doesn't complain about overlapping instance declarations
06:24:24 <shapr> wow
06:25:04 <Igloo> But it's not what you want
06:25:38 <Igloo> , means "and" in this case, so that inly defines an instance for things in both classes
06:31:57 <loom2> pesco: i finally implemented the message expansion recursivly :)
06:32:17 <pesco> loom2: Oh, you did!
06:32:25 <pesco> loom2: Show me the code!
06:32:33 <loom2> pesco: i will, just a second.
06:32:56 <Heffalump> message expansion?
06:33:23 <shapr> Igloo: how do I get what I want?
06:33:52 <loom2> heffalump: i'm trying to implement sha-1, it expands every sixteen 32 bit words to 80.
06:34:07 <Heffalump> oh, right
06:34:18 <Igloo> I don't think you can with Haskell's class system. I think you'll need to look at the showList method
06:34:30 <shapr> ok, cool
06:35:03 <Heffalump> showList means you don't get a function for [[a]], doesn't it?
06:35:10 * shapr dunno
06:35:13 <loom2> pesco: did you understand anything of it? :)
06:35:16 * Heffalump was asking Igloo mostly
06:35:21 <shapr> that's good  :)
06:35:48 <pesco> loom2: I'm still trying... ;)
06:36:14 <Igloo> I haven't looked at it; I'm not really sure what you mean, either
06:37:04 <Heffalump> loom2: are you doing this so you learn how to do it or because you need an implementation?
06:37:24 <loom2> heffalump: i just do it for practice
06:44:42 * shapr runs out of coffee
07:01:17 <shapr> oh, I think I understand
07:01:34 <shapr> > class BananaEncodable a where
07:01:34 <shapr> >     encode :: a -> String
07:01:34 <shapr> >     encodeList :: [a] -> String
07:01:44 <shapr> > instance Integer BananaEncodable where
07:01:44 <shapr> >     encode integer = undefined
07:01:44 <shapr> >     encodeList integers = map encode integers
07:01:51 <shapr> > instance Char BananaEncodable where
07:01:51 <shapr> >     encode char = encodeString [char]
07:01:51 <shapr> >     encodeList string = encodeString
07:02:25 <shapr> that looks close to the showList part of the Prelude
07:02:32 * pesco is away: Kaffetrinken
07:02:46 * shapr is away: Kaffemachen
07:03:58 <shapr> but
07:04:17 <shapr> that implementation doesn't really solve the problem.
07:04:36 <shapr> the problem is that I'd like to be able to have a typeclass that handles [Char] as a single type.
07:04:58 <shapr> I want one typeclass method, not two.
07:59:27 <shapr> maybe a single BananaEncode function that matches per type?
07:59:34 <shapr> then I can skip the typeclass thing entirely
08:26:46 * pesco is back (gone 01:24:15)
08:41:29 <buggs> hoi
08:44:54 <buggs> hoi sh
08:45:01 <shapr> y0 bu
08:45:02 <dblack> hi buggs, hi shapr
08:45:07 <shapr> hello dblack
08:45:19 <buggs> oh hoi dblack
08:46:01 <shapr> I have discovered that the hugs Prelude.hs has both "instance Show Char where" and "instance Show a => Show [a] where"
08:46:57 <shapr> and show works on "foo" and ['f','o','o'] as show "foo"
08:49:05 <pesco> shapr: So you suspect there must be a separete instance Show String?
08:49:17 * dblack is reminded of how much of thompson he hasn't read yet :-)
08:49:18 <shapr> there isn't
08:49:27 <shapr> I ran M-x occur on the buffer
08:49:33 <shapr> instance Show a => Show [a]  where
08:49:33 <shapr>     showsPrec p = showList
08:49:46 <shapr> I think that showList call is the secret ingredient
08:49:52 <shapr> I still don't quite understand it though.
08:50:13 <shapr> dblack: as long as you're enjoying yourself
08:50:18 <shapr> whether reading or not
08:50:30 <shapr> I've found I learn faster when I take half hour breaks to go play quake online =)
08:50:56 <shapr> blowing other people into smithereens somehow enhances my ability to absorb knowledge
08:51:05 <pesco> lol
08:51:13 * shapr grins
08:51:59 <pesco> shapr: But how would one go about implementing a showList function which works differently on Strings than on other stuff??
08:52:17 <shapr> I'm not sure yet
08:52:41 <shapr> I'm cutting out all of the instance Char and class Show stuff into a separate buffer
08:52:54 <shapr> maybe if I stare at only the pieces I need, I'll figure it out.
09:01:54 <pesco> shapr: There you go. /usr/share/hugs/lib/Prelude.hs line 510.
09:02:18 <shapr> yup
09:02:18 <pesco> The point is that there's an overidable list show function in class Show.
09:02:59 * shapr thinks
09:03:03 <shapr> so
09:03:16 <shapr> I think that means that for my purposes I would have:
09:03:32 <shapr> instance BananaEncodable [a] => BananaEncodable [a] where
09:03:49 <shapr>     encode item = encodeList item
09:04:11 <shapr> er, "instance BananaEncodable a => BananaEncodable [a] where"
09:04:17 <shapr> no square brackets on the first one
09:20:58 <pesco> shapr: right.
09:45:13 <shapr> so far, it all compiles.
09:53:56 <shapr> I have this in one of my functions:  myFunction _ = error "hit error pattern"
09:54:15 <shapr> and it get there... how can I see what it gets called with? or who called it?
09:55:31 <shapr> oh cool
09:55:46 <shapr> dispatchDecode x       = error $ "hit error pattern" ++ (show x)
09:55:58 <shapr> that works
09:56:50 <shapr> is there some way I can show the call stack?
09:57:48 * shapr doubts that
13:22:01 * shapr bounces
13:25:28 <shapr> ok, who is Ronald Legere?
13:35:42 <jadrian> hello
13:36:10 <jadrian> I just noticed I'm missing some documentation (5.04)
13:36:24 <hornby> shapr: fixed?
13:36:36 <jadrian> but there are no SuSE specific doc. packages
13:36:43 <jadrian> anyone else noticed that?
13:38:46 <jadrian> anyone here using RH rpms?
13:39:13 <jadrian> I'm thinking about installing the RH documentation rpm but I'd like to know where it is going to be installed
14:17:25 <jadrian> hey loom2
14:17:32 <loom2> good evening :)
14:17:38 <jadrian> hi :)
14:17:45 <jadrian> loom2: do you have 5.04 installed?
14:17:59 <jadrian> (ghc)
14:18:15 <loom2> no, not yet.
14:18:27 <jadrian> k 
14:18:32 * shapr yawns
14:18:34 <shapr> hornby: y0!
14:18:42 <loom2> shapr.
14:18:50 <shapr> yo loomy
14:18:52 <jadrian> hi shapr!
14:18:53 <shapr> wasssup?
14:18:55 <shapr> heya jadrian
14:19:04 <loom2> shapr: not much. i'm tired.
14:19:07 <jadrian> you do have ghc 5.04 right? :)
14:19:11 <shapr> loom2: me too
14:19:23 <shapr> I have to go to work tomorrow and write J2EE stuff
14:19:27 * shapr whines piteously
14:19:49 * loom2 pats shapr on the shoulder
14:19:54 <shapr> I have not persuaded my coworkers to try Python yet, much less Haskell :-)
14:20:14 <loom2> somehow i can't stand python.
14:20:21 <shapr> well, it works for me
14:20:30 <shapr> different people, different tools
14:20:35 * jadrian never tried python...
14:21:34 <jadrian> well do any of you have 5.04 installed
14:21:48 <jadrian> some documentation is missing here and I wanted to know if it was a distro specific thing
14:22:05 <shapr> jadrian: I have the source package...
14:22:10 <jadrian> cool
14:22:12 <shapr> I have it built in-place, but not installed
14:22:44 <jadrian> I think it should be easy to check the documentation dirs... right?
14:22:48 <shapr> sure
14:22:52 <jadrian> ghc/docs/
14:22:58 <jadrian> I have no base there
14:23:04 <jadrian> I have no "base" there
14:23:23 <jadrian> or "haskell98"
14:23:29 <shapr> hm
14:23:42 <jadrian> in the index file: ghc/docs/index.html there are links to:
14:23:56 <shapr> in debian, ghc5-doc and haskell-doc are separate packages
14:24:16 <jadrian> In SuSE they are the same...
14:24:25 <shapr> the contents of the ghc5-doc from debian's 5.02 matches the 5.04 docs/ dir
14:24:46 <jadrian> that's weird
14:25:00 <jadrian> 5.04 it's pretty different from 5.02 here 
14:25:05 <jadrian> let me check something
14:25:06 <shapr> well, haskell98 is the standard
14:25:11 <shapr> ghc5 is the implementation
14:25:43 <shapr> ghc5-doc and hugs-doc should be separate, but haskell-doc would be better as the standard haskell doc package
14:25:55 <shapr> well, in any case, time for me to sleep before tomorra
14:26:00 * shapr waves
14:26:02 <shapr> g'night all
14:26:04 <jadrian> bye
14:26:29 <loom2> bye shapr
