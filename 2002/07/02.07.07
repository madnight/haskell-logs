00:27:08 <engstad> How's the speed of the GHC compiled output? It must be really hard to optimize... How does it compare to OCaml?
00:48:34 <engstad> Quick q: Do you always have to write type anotations, i.e. head :: [a] -> a
00:48:44 <engstad> Or, will the compiler deduce it for you.
01:02:50 <clausen> the compiler will deduce
01:03:02 <clausen> it'll give you better error msg's if you specify
01:03:12 <clausen> because, it will know where the contradictions arise
01:14:30 <engstad> clausen: Thx!
01:15:17 <clausen> I suspect ghc is MUCH slower than ocaml, but I wouldn't know
01:15:23 <clausen> (I only use haskell for toy stuff)
01:15:53 <engstad> What do you use for "real" stuff?
01:16:45 <clausen> c mainly
01:17:09 <engstad> ah, I C.
01:17:12 <engstad> ;-)
01:17:16 <clausen> hehe
01:17:23 <clausen> how's this for a text book: "C how to program"
01:17:54 <engstad> I'm sick of C (and C++). OCaml is kewl though.
01:19:05 <engstad> However, the object system is wierd, and there's no overloading...
01:19:34 <clausen> I'm not sure if I like any programming language much, hehe
01:19:42 <clausen> but, I don't mind C, for all it's annoyances
01:19:51 <clausen> python is ok also
02:43:18 * xbill thinks C is a relatively crude and ugly language.
02:44:29 <xbill> Even for its intended purpose it's got quite a bit of cruft that could well be removed, syntactic and semantic.
02:48:18 <xbill> e.g. the postincrement and postdecrement operators create more problems than they supposedly address, the function typing synax is poor, the dangling else ambiguity is a result of poor design, implicit decay is evil, multidimensional arrays 
02:49:20 <xbill> are very awkward, there is no way to nail down precise byte orderings and bitfield semantics are only semi-usable due to various odd issues
02:50:07 <xbill> oh, and the macro facility is unhygienic and non-integrated so accurate error reporting is forbidden by the specification
02:50:41 <xbill> the standard library also leaves a bit to be desired
02:54:27 <xbill> the "module facility" as it were is also phenomenally crude
02:59:31 <xbill> ugh this royally sucks
02:59:45 <xbill> there's just not enough info in the STG machine paper to do any kind of useful translation
03:05:57 * hornby wonders if anyone knows any encyclopedic or "road map" computer science resources
03:06:19 <xbill> Knuth
03:28:42 <clausen> "CS is an ocean of knowledge a foot deep"
03:28:47 <clausen> that's the main problem, IMHO
03:37:46 <xbill> Something like that yes
03:44:04 <xbill> okay I started over by banging out a super-crippled x86 instr layer
04:19:00 <xbill> Hmm, okay, I must be missing something, how the heck is graph coloring register allocation supposed to come remotely close to working with 2-address code?
04:25:16 <xbill> ugh ugh ugh it looks like nothing can live longer than a single instruction
04:25:27 <xbill> and a fresh temporary is created for every reuse of a value
04:27:01 <Igloo> I'm not familiar with it, but if it works with 3 address code then you can trivially make it work less optimally with 2 address code by pretending each instruction also uses address 0
04:32:30 <xbill> 2-address code looks like it'll give rise to some really ugly interference graphs where nothing really connects.
04:33:35 <xbill> basically you have to split a temporary's live range every time its location moves, and since it has to get moved every time anything is done to it you basically get total crap
04:37:01 <xbill> There also appears to be approximately zero ways to figure out how to use addressing modes.
04:43:38 <xbill> hmm
04:43:46 <xbill> this CISC spilling stuff looks pretty interesting
04:45:18 <xbill> there seems to be something missing with respect to addressing modes and the possibilities that open up with variables being able to live in multiple locations simultaneously
04:46:23 <xbill> Linear programming seems to be an excellent way to go about it
04:47:48 <xbill> Either that or a graph algorithm explicitly connecting temporaries to both registers and stack locations.
04:53:22 <exa> hi
04:53:51 <exa> I'm writing a C++ parser with Parsec
04:54:00 <exa> Not as easy as I thought it'd be ;)
05:27:47 <le-chuck> Hi all
05:31:22 <exa> hi
05:31:44 <le-chuck> Oh, finally
05:31:53 <le-chuck> Someone on this channel :)
05:37:25 <le-chuck> Already gone away?
05:40:31 <exa> nope I'm here
05:41:01 <le-chuck> Oh, just wanted to hear someone on this channel, I've been trying since yesterday
05:41:09 <le-chuck> What are your timezones?
05:42:27 <Igloo> I think the way to hear people on this channel is to start interesting conversations  :-)
05:43:06 <le-chuck> Yeah but I must know they are here...
05:43:22 <le-chuck> Too many questions?
05:43:55 <Igloo> Huh?
05:44:32 <le-chuck> I mean, people do not use to answer since there are too many questions, or are they just busy?
05:46:36 <Igloo> Did you ever ask a question?
05:47:00 <le-chuck> No, I never did :) By the way, sorry I got a question but that is simple to answer if you know the answer... where on heart are the stg_... symbols defined? I can't find them anywhere, and can't compile gtk+hs programs. I've tried any other resource
05:47:15 <le-chuck> I only asked if there was someone
05:47:19 <Igloo> That sounds like GHC internals
05:47:26 <le-chuck> But I am not here to criticize anyway :)
05:47:50 <Igloo> People are more likely to talk if they see someone with a question or someone brings up an interesting subject IME
05:48:14 <Igloo> I've never played with gtk+hs...what command are you running to give that error?
05:49:40 <le-chuck> Hmm, linking gives me many undefined symbols, all prefixed with stg. The "T" in nm stands for defined and exported right?
05:49:46 <le-chuck> Maybe I've found'em
05:50:42 <le-chuck> in some .o in /usr/lib/ghc5
05:51:47 <elmex> hm, do i really have to study math to learn haskell programming?
05:52:11 <le-chuck> No
05:52:48 <elmex> really?
05:53:00 <le-chuck> Yes
05:53:07 <elmex> cool
05:53:14 <le-chuck> I am the psychoterapist. Expose your problem
05:53:17 <le-chuck> :))))))))))))
05:54:08 <elmex> ;)
05:54:31 <le-chuck> *f o u n d* * *em*
05:54:43 <le-chuck> libHSstd_cbits.a
05:54:44 <le-chuck> Ah
05:55:02 <le-chuck> Finally I can dedicate myself to think and not to make the compiler work
05:55:07 <le-chuck> :)
05:58:28 <elmex> what is a 'tuple'
05:59:10 <exa> There
05:59:14 <exa> I'm down to two errors
05:59:16 <exa> hehe
05:59:22 <exa> elmex: it's like (a,b,c)
05:59:41 <exa> A sequence of values
05:59:54 <exa> Written in parens and separated by commas :)
06:00:00 <exa> No maths ;)
06:00:06 <elmex> ah, pk
06:00:07 <elmex> ok
06:00:34 <exa> i guess i'll be able to test my C++ header parser soon ;)
06:01:02 <exa> Igloo: Why did we usually get the "cannot construct infinite type" errors?
06:01:40 <le-chuck> Oh guys what gui do you like for haskell?
06:03:24 <elmex> hm, i would like to have gtk bindings for hugs
06:04:18 <exa> anybody has experience with Parsec?
06:04:28 <le-chuck> What is Parsec?
06:04:28 <exa> CPlusPlusParser.hs:99:
06:04:28 <exa>     Occurs check: cannot construct the infinite type: a = [a]
06:04:29 <exa> 	Expected type: Parser a
06:04:29 <exa> 	Inferred type: Parser [a]
06:04:32 <elmex> whatis parsec?
06:04:40 <exa> Part of stdlib in ghc
06:04:44 <exa> package -text
06:04:53 <exa> a combinatorial parsing library
06:04:59 <Igloo> It means it has found something that has type [a] but it know from context that the type must be a
06:05:00 <exa> pretty cool stuff
06:05:16 <exa> Igloo: yea I guess so :(
06:05:25 <Igloo> Is the relevant code short?
06:05:51 <exa> Igloo: Short, but don't laugh at it
06:05:57 <Igloo> :-)
06:05:59 <exa> A couple of K
06:06:02 <exa> Wait a sec
06:06:04 <le-chuck> Oh what a strange thing, I have linked the relevant .a but it keeps on saying "undefined symbol"... 
06:06:13 <exa> My brain is totally fried so it might be a trivial thing
06:06:14 <Igloo> Oh, I meant a few lines (that you could paste here)
06:06:30 <Igloo> It should give you a line number and just that function should suffice
06:07:35 <le-chuck> I surrender... I am hungry :) 'll come back later and tell again... 
06:07:52 <le-chuck|eating> bye
06:09:47 <exa> Igloo: I'll just pack it
06:09:51 <exa> Igloo: Wait a sec
06:12:24 <exa> http://nebula.homeunix.net/~exa/drakon.tar.gz
06:13:32 <exa> just extract and type make
06:14:08 <elmex> exa: is it not protable?
06:14:15 <elmex> portable
06:14:16 <exa> portable?
06:14:19 <elmex> hugs ?
06:14:30 <exa> I don't use hugs
06:14:37 <exa> It's works with ghc I think
06:14:48 <exa> > ghc5.02
06:14:50 <elmex> only with ghc?
06:14:56 <exa> The debian version is fine
06:15:12 <elmex> so, it wont work with hugs?
06:15:15 <exa> Might work with hugs too
06:15:19 <exa> I didn't try
06:15:26 <exa> I'm not doing any fancy ghc-ism
06:15:41 <exa> This is the beginning of a fairly simple C++ parser
06:15:42 <exa> That's it
06:15:59 <elmex> ERROR "/opt/hugs98-dec01/share/hugs/lib/exts/ParsecToken.hs":58 - Syntax error in data type definition (unexpected `.')
06:18:16 <exa> try with ghc
06:18:56 <elmex> i dont have ghc
06:19:10 <exa> too bad ;)
06:19:18 <exa> Igloo: did you have a look?
06:20:17 * exa is lost in types
06:20:27 <exa> stack overflow here
06:22:41 <Igloo> If you narrow the problem down to a short function and paste it here I will have a look
06:23:16 <elmex> hehe, i am happy to compile happy ;)
06:24:06 <exa> Igloo: I guess my problem is that I can't do that :)
06:24:24 <Igloo> The error message give you a line number, right?
06:24:45 <exa> declarationList = semiSep1 extDeclaration
06:25:00 <exa> extDeclaration =
06:25:00 <exa>         do declSpec
06:25:01 <exa> 	   semi
06:25:01 <exa>     <|> do declSpec
06:25:02 <exa> 	   declaratorList
06:25:02 <exa> 	   semi
06:25:04 <exa>     <|> do declaratorList
06:25:06 <exa> 	   semi
06:25:08 <exa>     <|> funcDefinition
06:25:10 <exa>     <|> asmDeclaration
06:25:12 <exa>     <|> linkageSpec
06:25:26 <Igloo> Ewww, don't mix tabs and spaces
06:25:29 <exa> declaratorList = commaSep1 initDeclarator
06:25:33 <exa> I don't mix anything
06:25:40 <exa> I'm using emacs haskell mode :)
06:25:51 <Igloo> What you pasted above has a mixture of tabs and spaces
06:26:07 <exa> Well I just hit <TAB> to indent
06:26:21 <Igloo> Your emacs settings are stupid then
06:26:26 <exa> I think that haskell mode does it not my fault
06:26:28 <Igloo> Where was the error?
06:26:30 <exa> Welll
06:26:31 <exa> no
06:26:39 <exa> Because I don't have any TABs in my C++ source files
06:26:45 <exa> I don't like TABs either
06:26:54 <exa> It's just that the indentation code in haskell mode is fucked up
06:27:33 <Igloo> I got the impression emacs did that for all files as standard. It's definitely your fault, anyway, even if just because of poor choice of tools
06:27:40 <exa> ?
06:27:45 <exa> Do you use emacs Igloo?
06:27:47 <Igloo> No
06:27:54 <exa> Then you should know that it's not my fault
06:28:06 <exa> Because I use convert tabs -> spaces setting
06:28:11 <exa> Which works okay with all major modes
06:28:19 <exa> Except this stupid haskell mode which is not my fault
06:28:21 <exa> Got it?
06:28:43 <exa> Emacs doesn't spew in TABs as default, by the way
06:29:07 <Igloo> You could fix it or use another editor. If you want help with your problem then you'll need to tell me what line (and possibly expression) the error points too
06:29:26 <exa> CPlusPlusParser.hs:99:
06:29:35 <exa> declarationList = semiSep1 extDeclaration
06:29:43 <exa> That's the line
06:29:53 <exa> My brain stopped working I can't see the problem
06:30:00 <Igloo> OK, what do you think the type of declarationList, semiSep1 and extDeclaration should be
06:30:21 <exa> declarationList ought to be a list of something :)
06:30:36 <exa> the stupid thing is that I didn't add any semantics to the parser
06:30:40 <exa> It's just strings
06:30:41 <exa> Pfff
06:30:56 <exa> It would have to be something like [ String ] for declarationList
06:31:13 <exa> and prolly String for extDeclaration
06:31:24 <exa> Orrrrrr I should add types in proper to those functions to make sure
06:31:29 <exa> The inference there is perplexing me
06:31:33 <Igloo> Yes  :-)
06:31:44 <elmex> To compile Happy from source, you'll need GHC version 4.08 or later.
06:31:51 <elmex> but to compile GHC i need Happy
06:31:57 <Igloo> I'd have thought the type would be more like Parser String, but I've never really looked at parsec
06:32:39 <Igloo> elmex: Bootstrapping GHC is non-trivial. It's easiest to start from binaries and rebuild as you wish
06:33:19 <elmex> i bootstrap everything here ;)
06:33:22 <elmex> hugs was fine
06:33:42 <Igloo> exa: If you comment out anything giving an error you can use :t to see what ghci/hugs thinks the type is and, after checking you agree with it, put that in
06:34:01 <Igloo> (But it may be better for you to try and work it out yourself instead)
06:34:02 <exa> Igloo: Ah, yes. Thanks for reminding
06:34:12 <exa> Igloo: That works in practice, yes
06:36:00 <le-chuck|cooking> ok, it's my turn now :)
06:36:42 <Igloo> Most people cook before eating, ya know?  :-)
06:37:06 <le-chuck|cooking> Yes but I thought not to come back... then passed by :)
06:37:16 <le-chuck|cooking> And I am eating recursively
06:37:45 <elmex> f s@(x:xs) = x:s - what does s@ do?
06:37:51 <le-chuck|cooking> so i tried "eat >> cook" and cook was put on the stack
06:37:54 <le-chuck|cooking> :)
06:38:05 <Igloo> It makes an alias
06:38:15 <Igloo> So anywhere you might want to use (x:xs) you can just use s instead
06:38:27 <le-chuck|cooking> Like the let binding?
06:38:36 <Igloo> So that is equivalent to f (x:xs) = x:x:xs
06:38:49 <le-chuck|cooking> C2HSBase.o(.text+0x66): undefined reference to `stg_chk_1'
06:39:00 <Igloo> You could rewrite it as f (x:xs) = let s = x:xs in x:s
06:39:03 <elmex> ah, ok
06:39:38 <ChoJin> let is bad :)
06:39:45 <ChoJin> :)
06:39:45 <elmex> f elmex@(x:_) = elmex is f (x:_) = x ?
06:39:50 <ChoJin> I prefer where :)
06:40:30 <Igloo> But the thing before the @ doesn't have to be a single variableYou seomtimes need let, though, e.g., guard-local definitions
06:40:50 <elmex> huh?
06:40:51 <Igloo> No, elemx
06:41:15 <Igloo> Oh, ignore the first thing I started typing there - I realised it's rubbish  :-)
06:41:43 <Igloo> In your f above the elmex is an alias for the whole list
06:42:02 <elmex> ah, ok
06:42:10 <le-chuck|cooking> Anyone who has ever compiled a gtk+hs program? Ihaskell really...
06:42:18 <elmex> is f (elmex@x:xs) valid?
06:42:49 <ustenzel> le-chuck|cooking: Compiled -- yes.  Written a useful program -- no.
06:43:08 <Igloo> Yes, elmex
06:43:17 <elmex> ah, ok
06:44:03 <le-chuck|cooking> Oh, ustenzel, I got this error from ghc5: undefined reference to `stg_update_PAP' and other undefined stg_ references... got any ideas?
06:45:43 <ustenzel> le-chuck|cooking: No idea... did you forget some linking option?
06:46:34 <le-chuck|cooking> Maybe... but I have also tried to add `find /usr/lib/ghc5 -name *.a` to the compiler line... :) I am desperate
06:47:01 <le-chuck|cooking> And the symbols are defined in /usr/lib/ghc5/SOMETHING.a
06:47:11 <le-chuck|cooking> and in /usr/lib/ghc5/SOMETHING.o of course
06:48:51 <ustenzel> le-chuck|cooking: Did you use the configuration oracle?  `gtkhs-config --libs` should expand to a considerable list of libraries.
06:50:06 <le-chuck|cooking> Yes, just used it. Nothing. damn...
06:50:40 <ustenzel> You did link in all the libraries it lists?
06:51:27 <le-chuck|cooking> Yes... 
06:52:22 <le-chuck|cooking> And the error is about some symbol in ghc's
06:53:04 <ustenzel> I found stg_update_PAP in libHSrts.a.
06:53:22 <exa> haha
06:53:28 <exa> the base grammar I used plain sucked
06:53:32 <ustenzel> Shouldn't that get pullen in automatically?  Or by -package lang?
06:53:35 <exa> I'm gonna switch to TENDRA's C++ grammar now
06:55:03 <le-chuck|cooking> ustenzel, yes, but i have just tried -package rts and nothing
06:55:09 <le-chuck|cooking> OoOOOh
06:55:11 <le-chuck|cooking> stop
06:55:43 <le-chuck|cooking> -package gmp has done (almost) the trick. It now complains only about readline...
06:56:03 <le-chuck|cooking> apt-get install libreadline-dev 
06:57:31 <le-chuck|cooking> No i was wrong, just pressed ctrl+c too early... nothing works, undefined symbols are still there
06:57:34 <le-chuck|cooking> hmm 
06:57:41 <le-chuck|cooking> I go to eat thanks, come back later
06:57:59 <le-chuck|eat> bye
07:31:42 <shapr> mm, lotsa people heretoday
07:37:06 <le-chuck> Hi
07:37:16 <le-chuck> Your fault :)
07:37:26 <le-chuck> You put the channel in the wiki
09:39:02 <shapr> y0
10:05:40 * shapr sproings
10:12:30 <shapr> Igloo: you around?
10:18:10 * shapr wonders
10:18:26 * shapr reads HaskellWiki
10:19:19 <Heffalump> Igloo probably won't be around for a couple of hours
10:19:27 * Heffalump disappears in the general direction of a LUG meeting
10:20:13 <shapr> oh
10:20:17 <shapr> that's a good reason
10:22:45 * shapr sings and thinks
10:41:04 <shapr> is it possible to create a list that contains itself as an element?
10:42:32 <shapr> should be
10:42:43 <shapr> at least I could create a recursive algebraic datatype maybe?
11:12:18 <pertsa> just wondering... is the game of go popular among Haskell programmers?
11:12:32 <shapr> it seems so, why?
11:12:40 <pertsa> i was just curious
11:12:52 <shapr> hi pertsa, are you in school in Helsinki?
11:12:54 <pertsa> i have seen haskell & go mentioned together in some places
11:13:08 <pertsa> no. i'm still in Senior secondary school
11:13:13 <shapr> I'm in Tornio, what's the likelihood you live nearby? =)
11:13:21 * shapr is always looking for nearby programmers.
11:13:30 <pertsa> i am currently in Rovaniemi
11:13:35 <shapr> oh cool!
11:13:42 <shapr> you live there?
11:13:46 <pertsa> yes
11:13:48 <shapr> wow
11:13:54 <pertsa> but i study near Tampere
11:13:56 <shapr> oh
11:13:59 <pertsa> only holidays at home
11:14:06 <pertsa> what are you doing at Tornio
11:14:12 <pertsa> i lived there about 5 years ago
11:14:15 <shapr> I live here
11:14:18 <shapr> and I work here.
11:14:24 <shapr> I've been here about three years.
11:14:38 <pertsa> small planet :p
11:14:49 <shapr> yah, it's surprising to find another Haskell user nearby
11:15:02 <pertsa> is your work related to haskell/fp?
11:15:14 <shapr> no, though I would like that.
11:15:43 <shapr> I work for the Tornio office of widian.fi for three days a week, writing stuff for the 9210
11:15:49 <shapr> and server side J2EE stuff also
11:15:57 <shapr> and client-side Java also
11:15:59 <pertsa> ok.
11:16:13 <shapr> the other two days a week I'm a contract Zope website builder.
11:16:28 <pertsa> have you hear about Paivola (my school)
11:16:37 <shapr> I work for a german university, and I do some european project websites.
11:16:40 <shapr> no, I haven't
11:16:45 <pertsa> no surprise
11:16:56 <shapr> I moved here from Birmingham, Alabama...
11:16:57 <pertsa> but i think it is the geekiest secondary school in finland
11:17:00 <shapr> wow, cool!
11:17:14 <shapr> widian has a roi branch
11:17:35 <shapr> how did you get into Haskell?
11:17:40 <pertsa> long story...
11:17:54 <pertsa> but we had one teacher at my school
11:18:11 <pertsa> he was a former Paivola student
11:18:22 <pertsa> so he just mentioned me about Haskell after some Math lecture
11:18:30 <pertsa> he is also a go player
11:19:37 <pertsa> never heard of widian. it a big company?
11:19:41 <shapr> not really
11:19:49 <shapr> we have good connections with nokia, and that's nice.
11:20:02 <pertsa> how did you get here from Alabama?
11:20:03 <shapr> we got a 7650 in the Tornio office last week.
11:20:15 <shapr> I met a woman on icq....
11:20:19 <pertsa> :)
11:20:38 <shapr> she flew over to Birmingham to spend a month with me, it was so good I moved to Tornio, where she runs her own business.
11:20:55 <pertsa> sweet
11:21:07 <pertsa> you know, our school does co-operation w/ Nokia
11:21:18 <shapr> nice
11:21:22 <pertsa> all students have a part-time work at NRC Toijala
11:32:56 <shapr> hmo
11:33:07 <shapr> does where work like let?
11:33:12 <shapr> can I make multiple definitions?
11:34:00 <shapr> oh, I can
11:39:49 <shapr> time to watch a movie, bbl
11:56:46 <Igloo> shapr?
