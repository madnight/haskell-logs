01:42:45 * Chilli is away: Not at the machine...
04:29:08 <shapr> hey Jerub
04:29:11 <shapr> what's up?
04:29:32 <Jerub> hey shapr.
04:29:56 <Jerub> ''started'' my haskell course today.
04:30:03 <shapr> cool!
04:30:10 <shapr> how's it going so far?
04:30:11 <shapr> any questions?
04:32:32 <resolve> hey :)
04:33:05 <shapr> y0
04:33:13 <shapr> ok, so I was about to explain monads
04:33:23 <shapr> you understand referential transparency, yah?
04:33:33 <shapr> and you see how readLine won't work with that, yah?
04:34:14 <resolve> nope :-)
04:34:18 <shapr> one thing monads do is let readLine work the way you expect, and still maintain referential transparency.
04:34:24 <shapr> er, no to which part?
04:34:33 <resolve> i don't know what RT is yet
04:34:44 <shapr> oh
04:34:57 <resolve> the only io i've encountered so far is putStr :)
04:35:01 <shapr> ok
04:35:10 <shapr> you know a function can only return a result, right?
04:35:29 <Heffalump> what happened?
04:35:33 <shapr> the only  way a function can get input is by passing stuff directly to it
04:35:39 <shapr> Heffalump: netsplit
04:35:50 <Heffalump> ah
04:35:56 <resolve> shapr: yep
04:36:12 <shapr> resolve: and, the only way a function can return something useful is with its return value, yah?
04:36:23 <shapr> no side-effects allowed, no matter what.
04:36:41 <resolve> yep..
04:36:46 <shapr> the upside of that is that you can use a function much like a variable in an equation
04:37:09 <shapr> if your function is "addOne x = x + 1" then you only need to solve it once for each input
04:37:10 <resolve> yeah, so (foo f(x) f(x)) will return the same each time
04:37:23 <resolve> yep :)
04:37:27 <shapr> right, the result of a function can be substituted for a call to that function
04:37:37 <shapr> much like an equation.
04:37:50 * resolve nods
04:38:01 <shapr> so, what about a user input function like readLine ?
04:38:08 <shapr> is that going to satisfy those conditions?
04:38:18 <resolve> nope :)
04:38:48 <shapr> http://c2.com/cgi-bin/wiki?ReferentialTransparency
04:39:14 <shapr> that url just repeats what we've just gone over
04:39:32 <Jerub> shapr: My only problem at the moment is the lecturer doesn't explain stuff very well.
04:39:43 <shapr> monads are nifty things, and one thing they do is allow a function like readLine to work as you would expect, and still  maintain referential transparency.
04:39:43 <Jerub> and the entire course is set out in webbased material.
04:39:47 <shapr> Jerub: any questions I can help you with?
04:39:54 <resolve>  /whois jerub
04:39:56 <resolve> oops :)
04:39:58 <Heffalump> does anyone know what's up with the haskell.org wiki, btw?
04:39:59 <Jerub> shapr: not yet. I'm pretty good with it so far.
04:40:06 <resolve> jerub: was just checking to see if you went to the ANU :)
04:40:15 <shapr> Heffalump: someone needs to contact the maintainer, it's leaving locks
04:40:30 <Heffalump> why would that make all the pages empty?
04:40:31 <shapr> I *think* Heron is still the maintainer.
04:40:44 <shapr> because the wiki system they're using is stoopid.
04:40:53 <Heffalump> ah
04:41:03 <shapr> I suggested MoinMoin
04:41:08 <resolve> :)
04:41:17 <shapr> with the response, "if you'll port the old pages to the new format, we'll do it"
04:41:17 * resolve suggests emacs-wiki ;-)
04:41:28 <Heffalump> has it actually lost all the data, or just got a bit confused?
04:41:36 <shapr> it's just confused
04:41:38 <shapr> the data is still there
04:41:40 <Jerub> moinmoingood
04:41:54 <shapr> haskell-wiki used to crap out like that once a week or so
04:42:20 <Jerub> pottering off.
04:42:21 <Heffalump> ah, ok, I just never noticed before
04:42:22 <shapr> I wonder if I have time to port the pages...
04:42:38 <shapr> I'll email Heron and ask where I can download the current pages.
04:43:14 <shapr> resolve: monads are not easy to understand, but they're very cool once you do understand them.
04:43:25 <shapr> in one way, they're like throwing an exception...
04:43:55 <shapr> in python, an exception is somewhat priveleged, no other code gets executed once an exception is thrown, it jumps to a handler
04:44:17 <shapr> a monadic call can be that kind of call, except that you can make lots of these calls, each being a higher 'level'
04:44:41 <shapr> so effectively, readLine does always return the same value for that part of the program
04:44:44 <shapr> make sense?
04:45:05 <shapr> supposedly it's simpler to think of an implicit "world" being passed around, but I still don't get that part.
04:45:52 <resolve> okay. i understand the basic premise behind it, but i'll have to look into it closer as i progress through this book
04:46:07 <resolve> haskell is lots of fun though. :-) quicksort in two lines is pretty incredible :)
04:46:31 <Heffalump> type World = (String,String)
04:46:50 <Heffalump> putChar :: Char -> World -> World
04:47:07 <Heffalump> putChar c (ins,outs) = (ins,outs ++ "c")
04:47:15 <Heffalump> getChar :: World -> (Char,World)
04:47:26 <Heffalump> getChar (ins,outs) = (head ins,(tail ins,outs))
04:47:39 <Heffalump> there's a nice simple way of doing I/O with an explicit World
04:47:45 <resolve> ++ "c"?
04:47:55 <Heffalump> oops, sorry
04:47:57 <Heffalump> ++ [c]
04:48:00 <resolve> :)
04:48:07 * Heffalump looks suitably stupid
04:48:15 <resolve> heheh that's okay
04:48:19 * resolve attempts to  grok what's going on
04:48:45 <Heffalump> the World here consists of the currently unconsumed input and the output produced so far
04:48:53 <Heffalump> to produce more output, you just stick it on the end
04:49:01 <Heffalump> to get some input, you take it off the beginning of the input
04:49:24 <resolve> yep, that makes sense - i'm just wondering about the correspondance from that to the actual getChar function
04:49:40 <Heffalump> ok, so with the scheme I proposed above, you could imagine main having type World -> World
04:50:03 <Heffalump> and then the runtime system would just pass it some appropriate World and use the World it got back to actually do the I/O
04:50:16 <Heffalump> obviously it'd be a rather restricted form of I/O, but you get the general idea
04:51:04 <Heffalump> with me so far?
04:51:39 <Heffalump> ok, I need to go soon so I'll rush through the rest of this
04:51:51 <Heffalump> now, I'm going to make a small change to those type signatures and definitions above
04:52:08 <Heffalump> putChar :: Char -> World -> ((),World)
04:52:22 <Heffalump> putChar c (ins,outs) = ((),(ins,outs ++ "c"))
04:52:27 <Heffalump> getChar stays the same
04:52:34 <Heffalump> main gets type World -> ((),World)
04:52:51 <Heffalump> I haven't really changed anything, just added in a few unit types and values in strategic positions
04:52:56 <Heffalump> now, suppose we have
04:53:02 <Heffalump> type IO a = World -> (a,World)
04:53:14 <resolve> http://c2.com/cgi-bin/wiki?SynthesisOs looks interesting btw :)
04:53:17 <Heffalump> then we can replace the type signatures I've given so far with
04:53:27 <Heffalump> putChar :: Char -> IO ()
04:53:38 <Heffalump> getChar :: IO Char
04:53:41 <Heffalump> main :: IO ()
04:53:55 <Heffalump> and suddenly they miraculously have the type signatures you're used to from Haskell
04:54:10 <Heffalump> I've made the world implicit with my type synonym for IO
04:54:51 <Heffalump> the actual way IO and getChar/putChar are implemented is somewhat different (they're primitives rather than being defined in Haskell, for one thing), but that's the rough idea
04:55:16 <resolve> so they work based on an implicit extra "world" parameter?
04:55:23 <Heffalump> yep
04:55:56 <Heffalump> and because that parameter is in both the input and output of functions, it can be changed by them
04:57:04 <resolve> this is going to take a little while for me to properly grok, but thank you for your detailed explanation :)
04:58:41 <Heffalump> np
04:58:43 * Heffalump heads off
05:03:12 <resolve> bye :)
12:19:11 <shapr> boing!
12:21:17 * shapr boings
12:36:08 <shapr> I like this channel.
12:36:17 <shapr> it's either silent, or interesting.
12:36:17 <redcrosse> bong!
12:36:22 <shapr> #java is rarely either.
12:36:28 <shapr> hiii redcrosse!
12:36:33 <redcrosse> hello
12:36:45 <shapr> what's up?
12:36:55 <redcrosse> oh nothing much.
12:37:10 <shapr> doing any haskell lately?
12:37:13 <redcrosse> what're you up to?
12:37:17 <redcrosse> yeah
12:37:23 <shapr> oh, about 5 foot 10
12:37:24 <redcrosse> i checked out the haskell-mode
12:37:30 * shapr grins
12:37:34 <redcrosse> wow. got me beat.
12:38:02 <shapr> what are you up to?
12:38:16 <redcrosse> coding
12:38:17 <shapr> I'm down to 99 kilos, yay!
12:38:27 <shapr> whatcha writing?
12:38:37 * redcrosse doesn't know the conversion from kilos to pounds
12:38:43 <shapr> 2.2 * kilos
12:38:48 <redcrosse> thanks
12:39:00 <shapr> 217.8 lbs
12:39:03 <redcrosse> yeah
12:39:06 <redcrosse> work out?
12:39:12 <shapr> not so much...
12:39:14 <shapr> I don't have to
12:39:19 <shapr> my father played football...
12:39:21 <redcrosse> lucky ewe
12:39:29 <redcrosse> where at?
12:39:34 <shapr> auburn university
12:39:34 * Heffalump is about 120lbs
12:39:41 <shapr> Heffalump: seriously?
12:39:45 <Heffalump> yeah
12:39:47 <shapr> Heffalump: how tall are you?
12:39:48 <redcrosse> really?  my pops played at wisconsin
12:39:57 <Heffalump> 5'11" ish
12:40:05 <redcrosse> what?
12:40:08 <redcrosse> holy crap...
12:40:11 <shapr> yikes
12:40:23 <shapr> Heffalump: you don't look that skinny in your pictures :-)
12:40:37 <Heffalump> I am :-)
12:40:40 <shapr> wow
12:40:50 <shapr> doesn't Oege have a similar build?
12:41:11 <Heffalump> he's a lot taller than me
12:41:16 <Heffalump> I dunno how much he weighs
12:41:20 <shapr> wow
12:41:52 <shapr> it seems that according to the average functional programmer, I am short and fat.
12:42:00 * shapr snickers
12:42:03 <redcrosse> heh
12:42:21 <redcrosse> i'm 5'9" 150 lbs
12:42:26 <Heffalump> Igloo is quite skinny too, I dunno how much he weighs though
12:42:34 <Heffalump> he probably doesn't know either, though :-)
12:42:46 <shapr> redcrosse: that's a much more average height/weight ratio
12:43:04 * Heffalump has a body mass index of 17 or something, when 18-25 is considered normal
12:43:05 <redcrosse> that's me...mr. average
12:43:14 <shapr> heh
12:43:32 <shapr> redcrosse: if you hang out on #haskell and #emacs, you may not qualify ;-)
12:43:43 <shapr> Heffalump: how do I find out my body mass index?
12:43:47 <redcrosse> dang, that's true
12:44:00 <Heffalump> shapr: weight in kg / (height in m) ^ 2
12:44:06 <shapr> hmm
12:44:12 <shapr> I wonder what my height is in meters.
12:44:14 <shapr> lessee
12:44:19 * shapr does "man units"
12:44:39 <Heffalump> errm. 31.
12:44:44 <Heffalump> That can't be right.
12:44:48 <shapr> huh?
12:45:10 <Heffalump> I calculated yours from the figures you gave above
12:45:20 <Heffalump> oh, http://nhlbisupport.com/bmi/ can do it based on imperial units
12:45:47 <shapr> 31.6
12:46:04 <shapr> I swear, I really do look like an american football player.
12:46:19 <Heffalump> the classification on that page doesn't really take build into account
12:46:22 <redcrosse> what position did your dad play?
12:46:26 <Heffalump> I'm really thinly built, so I don't think I'm unhealthy
12:46:26 <shapr> redcrosse: I don't know...
12:46:27 <redcrosse> linebacker?
12:46:38 <shapr> sadly, football never interested me much.
12:46:51 <shapr> I have had great success in moshpits though.
12:46:52 <Heffalump> and if you're built like an american football player then calling 31.6 obese (like that page does) is probably rather unfair
12:47:17 <shapr> I'm not obese.
12:47:27 <redcrosse> yeah...i have a 22.1 with 5% body fat
12:47:31 <redcrosse> so...
12:47:32 <shapr> I don't even have much in the way of plump :-)
12:48:36 <shapr> redcrosse: what are you writing?
12:49:01 <redcrosse> reporting stuff
12:49:31 <shapr> in haskell? :-)
12:49:35 <redcrosse> i wish.
12:49:47 <redcrosse> that's what sucks about learning new languages
12:50:01 <redcrosse> you start saying "If I only had this feature..."
12:50:24 <shapr> which feature do you want in which language?
12:50:39 <redcrosse> writing in c#
12:50:44 <shapr> ouch
12:50:55 <redcrosse> yeah : (
12:51:49 <redcrosse> i'm hoping to get good enough in haskell to start using the hugs .net bridge
12:51:58 <redcrosse> or learn sml for sml.net
12:52:24 <redcrosse> or heck, ocaml for f#
12:53:23 <shapr> why are you doing .net stuff?
12:54:03 <redcrosse> well...my compatriots don't have the learning bug like i have, and they use vb/delphi
12:54:12 <Heffalump> SML is ok
12:54:35 --- topic: set to 'HOpenGL 1.03 released - http://haskell.org/HOpenGL || looking for team members for a #haskell ICFP contest entry, more info on http://purl.org/wiki/haskell/IcfpContest' by shapr
12:58:16 <shapr> everytime I try to read comp.lang.haskell
12:58:26 <shapr> my news server says something terrible to me.
12:59:23 <Heffalump> lol
12:59:48 <shapr> I suspect it will continue to say that terrible thing
12:59:55 <shapr> until comp.lang.haskell is actually voted into existence.
13:10:58 <dark_> Today I discovered the joys of the $ operator :)
13:11:28 <redcrosse> dark_: what does that do?
13:11:30 <Ctx> I definatively don't share your definition of joy ;)
13:12:38 <shapr> Ctx: you don't like $ ?
13:12:49 <dark_> redcrosse: I often end up with calls like (foo a b (bar c d (gnu e f) g)))
13:12:54 <shapr> redcrosse: $ means "loosely binding function application"
13:13:11 <dark_> redcrosse: That can be written as foo a b $ bar c d $ gnu e f $ g
13:13:16 <dark_> and nicely indented, too.
13:13:20 <redcrosse> gotcha
13:13:21 <redcrosse> thanks
13:13:31 <dark_> The foo bar gnu functions are usually operations on some immutable type.
13:13:38 <shapr> $ has another useful function, but I don't remember what it is
13:13:57 <Ctx> hm... well, it sure eases things... but "joy"... well... I just wanted to say sth too ;)
13:13:58 <dark_> A lot more library code is now comprehensible to me too :)
13:14:05 <shapr> hi Ctx
13:14:08 <shapr> what do you do with Haskell?
13:14:11 <dark_> Ctx: I'm easily joyed :-)
13:14:45 <dark_> Ctx: Especially by things that make code more readable.  I find it hard to make Haskell code easy to read.  I'm still not sure if $ adds to it or reduces it, because it does mean another idiom to learn :)
13:15:02 <Ctx> I mostly wrote (easy) functions... I'm informatic-student and it helped me understand algorithms
13:15:10 <Ctx> btree and such things
13:15:34 <shapr> dark_: things like let and where can make your haskell easier to read also
13:16:02 <dark_> shapr: How do you choose whether to use let or where?
13:16:11 <shapr> depends
13:16:13 <shapr> sometimes I use both
13:16:27 <shapr> just whatever combination decreases the conceptual complexity
13:16:35 <shapr> it's like writing a story,
13:16:37 <shapr> you set the stage with let
13:16:45 <shapr> you give the main plot with the central code
13:16:58 <shapr> and the epilog of "where" clears up any missing plot points
13:17:04 <dark_> Hmm
13:17:18 <redcrosse> interesting analogy
13:17:36 <shapr> redcrosse: good programmers usually can be good writers without much trouble
13:17:43 <shapr> imho, the skills are closely connected
13:18:38 <shapr> redcrosse: I think it's a fitting analogy
13:18:45 <shapr> good code can be read like reading a story
13:19:04 <shapr> sadly, there isn't much code like that.
13:19:09 * dark_ is not sure that a story about x86 disassembly can ever be easy to read :)
13:19:12 <redcrosse> too true
13:19:21 <Ctx> well, then microsoft should go and get stephen king for writing their code ;)
13:19:35 <redcrosse> ha
13:19:47 <shapr> dark_: it can..
13:31:20 <dark_> shapr: I guess it can, once I understand it completely myself :)
13:35:52 <shapr> I think so
13:42:59 <shapr> well
13:43:04 <shapr> it's time to work on Jelly.hs
13:48:51 * shapr seen an Igloo post to the zsh-users list he's subscribed to
13:48:53 <shapr> hm, cool
14:05:45 * shapr thinks about typing
14:14:22 <dark_> shapr: Haskell makes me think about typing all the time :)
14:14:26 <shapr> heh
14:14:27 <shapr> me too
14:14:43 * shapr pokes clog
14:14:50 <shapr> man, that clog guy *never* talks.
14:14:58 <shapr> what's up with that?
14:19:15 <dark_> Probably stuck in an infinite recursion.
14:19:32 <shapr> heh
14:19:34 <shapr> maybe so
14:19:54 <dark_> I have that sometimes.  I start a project and realize I need to first write another tool for it.  Repeat until interrupted by girlfriend :-)
14:21:20 <shapr> yah, me too
14:26:27 <shapr> you no longer under your normal score?
14:27:15 <dark> It was an abnormal score, actually :)
14:27:30 <shapr> ah I see
14:27:45 <dark> I've been "dark" here for years.  But one day my nickserv registration expired and someone else registered it.  Sigh.
14:30:10 <shapr> hey dblack, what's up?
14:30:16 <shapr> dark: that sucks :-(
14:30:17 <dblack> hi shapr
14:30:28 <dblack> i've been messing around with linux distros and wasting time
14:30:43 <shapr> hey, as long as you're having fun.
14:34:44 * shapr reads comp.software.extreme-programming
14:36:33 <dark> Hmm if I have a constant lookup table (Word8 -> Bool), what would be the most efficient way of writing it down?  (Does it matter?)
14:36:47 <dark> I mean runtime efficiency :)
14:36:56 <shapr> hi buggs
14:37:02 <buggs> hi shapr
14:37:06 <shapr> dark: FiniteMap
14:37:14 <shapr> buggs: what's up?
14:39:34 <Heffalump> dark: an array, I'd have thought
14:41:23 <smkl> array of 8 integers, handled as bit vector
14:43:35 <dark> Memory space is not a concern, execution speed is.  Array of boxed Bools?
14:44:17 <dark> shapr: FiniteMap seems to be tree-like, at least in GHC.
14:45:04 <dark> Actually I don't _really_ care if the array is constructed at compile-time.  As long as it's constructed only once :)  This program will do a lot of lookups in that table.
14:45:48 <smkl> perhaps a function with 256 cases is fastest
14:46:07 <dark> smkl: ghc is smart enough not to evaluate the cases linearly?
14:46:50 <smkl> dunno. anyway it's easy to replace the function with another one that does array lookup
14:54:02 <dark> Right, and then profile :)
15:01:34 <smkl> at least ocaml can optimize cases for integer values ok
15:12:28 <shapr> does a socket read block in ghc 5.04?
15:13:15 <smkl> most likely
15:16:32 <shapr> hm
15:19:54 <shapr> grr
15:20:02 <shapr> ghc5 doesn't have make uninstall.
15:22:15 <Heffalump> this is what RPMs and DEBs are for
15:22:20 <shapr> yah I know
15:22:26 <shapr> but I wanted newer spiffier stuff
15:22:29 <shapr> so I gave in to the dark side
15:22:36 <shapr> now that there are ghc5.04 debs
15:22:46 <shapr> I'm trying to fight my way back to light side.
15:23:07 <shapr> that would be easier if the deb for Hat weren't nhc98 specific >:-(
15:25:22 <shapr> happily, debian now has ghc5-hopengl
15:25:23 <shapr> yay!
15:36:50 * shapr tries to build a Banana parser with Parsec
15:43:34 <det> Is there such a thing as self-referential data structures in purely functional languages ?
15:43:45 <shapr> det: there can be, why?
15:44:10 <shapr> det: actually, no, but you can emulate them.
15:44:32 <det> shapr: it just occured to me that you can't reference an object before it's creation and and you can't modify them
15:44:36 <shapr> that's true.
15:44:51 <shapr> why do you ask?
15:45:16 <det> for instance how could you create a cons where the tail points to itself
15:45:24 <det> or even something that emulates that
15:45:24 <shapr> create it that way.
15:45:48 <shapr> lemme paste something that smkl showed me..
15:45:52 <det> how could you create it ?
15:46:02 <shapr> data Z = Z [Z]
15:46:04 <det> 'k
15:46:07 <shapr> x = [Z x]
15:46:15 <smkl> x = 1:x ...
15:46:16 <shapr> that's self-referential, right?
15:46:31 <det> ahh
15:46:46 <shapr> det: so, the hole is that something can be self-referential at creation time
15:46:58 <shapr> at least, that's the hole I'm trying to worm my way through.
15:47:05 <det> so take 10 from x would yeild 10 x's ?
15:47:35 <smkl> det: no, just ten 1's
15:47:43 <det> erm
15:47:44 <det> yes
15:47:50 <det> that's what I meant :)
15:48:48 <shapr> hi det, are you learning Haskell?
15:48:51 <det> but, it would seem that the compiler is doing mutable stuff in the background to do that
15:49:58 <det> shapr: I was looking at it a few months ago, that thought just crossed my head and I figured this was the best channe,l to ask it in :)
15:50:10 <smkl> laziness causes lots of mutability in the impl.
15:51:39 <det> shapr: I figure that I'll let functional languages lingre <sp> in the back of my head for a while and then design my own language :)
15:51:46 <shapr> "linger"
15:51:55 <shapr> well, it's fun to use them
15:52:26 <det> I was thinking about trying to write a 3d engine using HOpenGL, however :)
15:52:35 <shapr> haskell-mode needs bugfixing
15:52:43 <shapr> the ghci prompt has changed in ghc 5.04
15:52:53 <shapr> det: cool!
15:52:56 <det> emacs is for losers ..
15:52:59 * det hides
15:53:04 <shapr> det: someone is writing a game engine with HOpenGL
15:53:17 <shapr> he shows up here as le-chuck
15:53:31 <det> shapr: ahh, awsome
15:53:32 <shapr> Vincentio somebody
15:53:41 <shapr> det: look at the HOpenGL-users archives
15:53:48 <det> shapr, if not in haskell, maybe python
15:54:07 <shapr> as long as you're having fun
15:54:14 <det> yeah
15:54:18 <shapr> I hope I can get TwistedHaskell working sometime soon...
15:54:31 <det> TwistedHaskell ?
15:54:34 <shapr> yah
15:54:48 <shapr> I've got Banana.hs passing all my unit tests
15:54:52 <det> pb for haskell ?
15:54:55 <shapr> yup
15:55:02 <shapr> not really sure what to do with Jelly.hs
15:55:03 <det> ahh, awsome
15:55:21 <shapr> det: you know Haskell? wanna help? ;-)
15:55:41 <det> I don't know haskell :)
15:55:47 <shapr> ahh
15:55:49 <det> might be a fun way to learn it however
15:55:57 <shapr> yah, that's what I'm trying to do.
15:56:03 <det> I refuse to let evil dash deter me
15:56:16 <shapr> I screwed around with Haskell for several months, but wasn't really learning that much.
15:56:29 <shapr> so I figured I'd find something cool to write
15:56:41 <shapr> suddenly, I've learned much much more.
15:57:13 <det> if you are writing Jelly.hs, my self-referential question must have seemed extremely relavent :p
15:57:22 <shapr> yes, very much so.
15:57:42 <shapr> I just decided I should turn the jelly references into Haskell datatypes and be done with it.
15:57:56 <shapr> then I can construct self referential stuff smoothly
15:57:58 <shapr> (I hope)
15:58:22 <det> I am downloading  debian right now
15:58:27 <det> I should be up and running soon
15:58:28 <shapr> yay!
15:58:45 <det> it's been way too long without internet
15:58:52 <shapr> what happened?
15:59:24 <shapr> haven't seen you around for awhile.
15:59:57 <det> well
16:00:01 <det> a variety of things
16:00:07 <det> mostly money
16:00:13 <det> and then my computer just died
16:00:17 <shapr> suckage
16:00:23 <det> motherboard started on fire
16:00:27 <shapr> whoa
16:00:31 <shapr> did you get pix? =)
16:00:37 <shapr> tell me you had a digital camera handy!
16:00:46 <det> no :)
16:00:52 <shapr> awww
16:01:09 <det> besies, you could hardly see a flame beneath all of that smoke!
16:01:20 <shapr> wow, nifty
16:01:40 <det> I gotta go do some stuff
16:01:47 <det> brb in a couple hours
16:01:51 <shapr> cya
16:01:52 <det> see ya
16:17:39 <shapr> hrmm
16:17:52 <shapr> ghc5.04 docs appear to be incorrect about the GHCi prompt.
16:17:54 <shapr> weird
16:18:20 * shapr investigates further
16:43:57 <shapr> ibid: I sent you a haskell-mode bug report and fix
16:44:21 <shapr> I should file a bug against ghc5-doc
16:44:27 <shapr> hiya pesco
16:44:43 <pesco> Hey there!
16:44:56 <shapr> what's up?
16:45:31 <pesco> I'm learning about neural nets, skimming functional dependencies in the process.
16:45:49 <shapr> nifty
16:46:19 <pesco> Oh yes, I've trained my first TLU today... :)
16:46:32 <shapr> ?
16:46:35 <shapr> what's that stand for?
16:47:17 <pesco> Threshold Logic Units are appearently the things neural nets are built of.
16:48:36 <pesco> Why can't these Gentoo Linux people commit my GHC ebuilds in time?!
16:48:43 * pesco heads over to #gentoo
16:56:54 <pesco> shapr: What's the latest status on the ICFP team?
16:57:03 <pesco> shapr: And what happened to the Wiki pages?!
17:01:20 <shapr> pesco: the Haskell Wiki has flipped out...
17:01:24 <shapr> it does that sometimes
17:01:28 <shapr> they're using a crappy wiki system
17:01:33 <pesco> shapr: Yay! Cool.
17:01:54 <shapr> it has some kind of problem clearing locks
17:02:06 <shapr> afaiu, it happens when two people try to edit at the same time
17:02:08 <pesco> Heheh
17:02:49 <shapr> I asked about using MoinMoin, they asked if someone was willing to swap formats
17:03:07 <shapr> of course the correct solution is to write one in Haskell.
17:03:23 * shapr thinks about that
17:03:29 <shapr> hm, WASH-CGi
17:27:14 * shapr bounces
17:29:15 <shapr> yikes
17:29:17 <shapr> stack overflow with ghc
17:34:12 <shapr> specifically with WASH-CGI
17:34:26 <shapr> ghc --make CGI.hs seems to do it everytime.
17:34:32 * shapr increases stack size
17:36:05 <shapr> it's using 119mb and slowly growing.
17:36:32 <shapr> something must be wrong.
17:39:58 * Chilli is back (gone 15:57:13)
17:42:00 <shapr> bah
17:42:08 <shapr> I'll email Thiemann.
18:07:19 <dark> I'm still learning the effects of laziness :)
18:08:06 <dark> I have a module or expression trees.  I just realized that if the first thing I apply to a completed expression tree is the simplify function, then there's no reason to do ad-hoc simplifications in the expression node constructors.  Right?
18:08:30 <shapr> um
18:08:35 <shapr> my brain is already asleep
18:08:46 <shapr> maybe someone else is awake.
18:09:11 <dark> It's okay :)
18:10:23 <dark> Heh, I think that as soon as I have a working program, I should show it to someone well versed in Haskell.  And then run away.
18:10:36 * shapr grins
18:12:10 <det> when does icfp start ?
18:12:29 <Chilli> dark: depends on what simplify does, I guess
18:13:05 <Chilli> det: 4 Ocotober
18:13:18 <det> ohh
18:13:24 <det> organizing a bit early I see
18:14:07 <Chilli> hmm, do you mean ICFP the conference or the prgm contest?
18:14:26 <det> prgm contest
18:14:36 <Chilli> ok, sorry
18:14:40 <Chilli> I was talking about the conf
18:14:45 <det> I see
18:14:50 <Chilli> 30 August
18:15:18 <det> ahh
18:15:19 <det> hanks
18:15:26 <det> thanks too
18:15:43 <dark> Chilli: Stuff like recognizing that x + 0 is x
18:16:40 <dark> Hmm, I found an error in the Gentle Introduction.  It gives "import Prelude hiding length" as an example.  But ghc doesn't like that, and the syntax in the Report suggests it should be "import Prelude hiding (length)"
18:16:59 <Chilli> true
