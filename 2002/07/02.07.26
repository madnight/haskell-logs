01:05:33 * Chilli is away: Not at the machine...
03:03:45 * shapr awakens
03:07:35 <shapr> goood morning!
03:11:48 <jadrian> hello
03:11:54 <shapr> hi jadrian
03:12:02 <jadrian> hi shapr
03:12:03 <shapr> anything I can do for you?
03:12:18 <jadrian> I'm just reading ghc documentation
03:12:37 <jadrian> wait in fact I just remmbered something
03:12:42 <shapr> ?
03:12:44 <jadrian> I'm trying to use the Monoid class in ghci
03:12:51 <jadrian> I can load the Monad module
03:12:59 <jadrian> :module +Monoid
03:13:00 <jadrian> ops
03:13:03 <jadrian> :module +Monad
03:13:26 <jadrian> but I still can't use the Monoid class...
03:14:00 <jadrian> I tried :module +Monad.Monoid , :module +Control.Monad.Monoid 
03:14:20 * shapr looks
03:15:02 <jadrian> http://haskell.cs.yale.edu/ghc/docs/latest/html/base/Control.Monad.Monoid.html
03:15:22 <jadrian> mmmm maybe I need to start ghci with some flags...
03:15:35 <jadrian> it requires multi parameter classes...
03:16:46 <dark> Is everyone using ghc here?
03:16:49 <shapr> I use it.
03:16:56 <jadrian> I use it
03:17:02 <jadrian> I've been wanting to try nhc
03:17:16 <shapr> jadrian: I can't figure out where the module Control comes from.
03:17:23 <jadrian> I'v had some heap problems and I've heard that nhc is better when it comes to that...
03:17:45 <jadrian> shapr: me neither, I just wanted to check if the instances of the monoid class are what I think 
03:18:12 <jadrian> (too bad nhc doesn't have implicit parameters :(  I use that a lot)
03:18:47 <dark> jadrian: What are those?
03:19:45 <jadrian> dark: it is a ghc extension that alows you to "use some values implicitly"
03:20:09 <jadrian> dark: intead of declaring them in the type signature as usual, you put them ni th context declaration
03:20:18 <jadrian> s/ni/in
03:21:38 <jadrian> let me check something
03:22:54 <jadrian> dark: http://www.haskell.org/pipermail/haskell-cafe/2002-March/002912.html
03:24:10 <shapr> haddock looks cool
03:24:14 <shapr> I must try that
03:25:32 <jadrian> shapr: I though about using it, but I'm into literal programming
03:25:46 <shapr> literate?
03:26:08 <jadrian> mmm I thought it was literal...
03:26:11 <dark> jadrian: Thanks.
03:26:31 <jadrian> dark: no prob ;)
03:26:49 <jadrian> shapr: but I'm wrong, it's "literate" :)
03:27:48 <jadrian> I usually combine LaTeX and Haskell. In Xemacs I even binded F5 to haskell mode and F6 to LaTeX mode :)
03:27:54 <shapr> cool
03:27:59 <shapr> I like emacs
03:28:02 <shapr> it's even my irc client
03:28:03 <shapr> I'm using ERC 2.93 $Revision: 1.292 $ with XEmacs 21.4 (patch 8) "Honest Recruiter" XEmacs Lucid!
03:28:09 <jadrian> :)
03:28:33 <jadrian> I just wish the Haskell mode was better, have you ever checked out Proof General?
03:28:39 <shapr> nope
03:28:55 <jadrian> It has the most amazing Xemacs mode I'v eever seen
03:28:56 <shapr> that's a proof assistant app, yah?
03:29:29 <jadrian> kind off, it is a xemacs mode that works with several proof assistants like Isabelle, HOL etc
03:29:40 <shapr> oh, I have heard of that.
03:29:52 <shapr> I think I downloaded it once.
03:30:17 <jadrian> http://www.proofgeneral.org/screenshot
03:30:25 <jadrian> And the sceenshots could be better...
03:31:02 <jadrian> http://www.proofgeneral.org/images/pg-isar-screenshot.png <- in this one you can see non ascii charachters...
03:32:15 <jadrian>  It would be really nice to actually use greek letters in haskell, like I used with Isabell/Proof General
03:37:40 <jadrian> mmm "import Control.Monad.Monoid" in a file works
03:38:09 <shapr> doesn't work here
03:38:21 <shapr> did you have to give a -package setting?
03:38:22 <jadrian> Using 5.04?
03:38:26 <jadrian> oh yeah
03:38:30 <shapr> which package?
03:38:32 <jadrian>  -fglasgow-exts
03:38:39 <jadrian> not a package
03:38:43 <jadrian> but this flag
03:39:08 <shapr> still no go
03:39:12 <jadrian> but it works without it too
03:39:15 <shapr> but I am using 5.04
03:39:16 <jadrian> just tried 
03:39:19 <shapr> er 5.02
03:39:22 <jadrian> ah
03:47:59 <jadrian> I don't get this... why is monoid in the Monad 'subtree'?
04:01:23 <dark> jadrian: The ghc manual lists it as a bug that it doesn't accept Unicode source code :)
04:01:35 <dark> jadrian: Greek letters can't be far away.
04:01:54 <jadrian> dark: but I you wouldn't need that ;)
04:02:22 <jadrian> dark: what happens with that prof general module is that you type \<lambda>, it parses it, and displays a actual lambda
04:03:22 <dark> jadrian: Hmm... shouldn't be hard to do for Haskell.  Just replace \ with a textual prefix, then hide it everywhere except from the compiler :)
04:03:32 <dark> jadrian: I like Unicode though.  Despite its warts.
04:03:33 <jadrian> dark: even if ghc already supported unicode I'd still wanted some similar way to type Greek Letters, since my keyboard doesn't have them :)
04:04:24 <dark> jadrian: Actually... an emacs _text_ mode for unicode, which accepts such codes to actually generate greek letters when saving the files, would be neat.
04:05:03 <jadrian> dark: yeap it could probably be done from that module with some modifications from the proof general mode. But I know nothing about e-lisp...
04:05:04 <jadrian> :)
04:05:27 <dark> jadrian: And then you need to modify ghc :-)
04:05:33 <jadrian> dark: proof general has some other nice features like the menu buttons etc... it's the best mode I've seen
04:06:09 <jadrian> dark: nah, if it just displayed Grek letters but keept the file as ascii no ghc modification would be needed
04:08:08 <dark> jadrian: Well it would make error messages prettier :)
04:09:07 <jadrian> dark: not noly that, but imagine the type signatures, with betas and alphas, the foralls, the composite, etc... it would look *really* nice
04:09:15 <shapr> xemacs has x-symbol
04:09:26 <shapr> already lets you type any character the buffer can handle
04:09:36 <jadrian> shapr: yeap that module I'm talking about uses X-symbol
04:10:15 <jadrian> shapr: when working with isabell I'd type \<forall> and it would parse it and turn it into a "for all"
04:10:16 <jadrian> :))
04:11:21 <jadrian> Haskell would look really pretty like that, and it could probably be done from simple modifications of the Proof General Module... we'd just need someone who knows haskell, e-lisp and that's willing to do it...
04:15:54 <dark> ... and users who are willing to use emacs :-)
04:16:09 <jadrian> *X* emacs :)
04:16:18 <jadrian> you mean some people don't use it???
04:16:39 <dark> I generally use nvi.
04:16:48 <jadrian> n?
04:16:49 * delYsid uses GNU Emacs
04:17:02 <dark> jadrian: It's a small, fast vi.  Not bloated like vim :)
04:17:09 <jadrian> lol
04:17:27 <dark> I used to use emacs, but I got into the habit of using vi when I worked on a project that was on a machine with no emacs.  It sort of stuck.
04:19:10 <delYsid> hmmm
04:19:23 <delYsid> I still don't understand Monads.
04:20:03 <jadrian> what don't you understand about them?
04:20:42 <delYsid> well, I have a vague idea about them, but my book lacks a Monad chapter...
04:21:04 <jadrian> Have you tried this
04:21:19 <jadrian> http://www.dcs.gla.ac.uk/~nww/Monad.html
04:21:22 <dark> delYsid: Did you read the Monad chapter in the Gentle Introduction?
04:21:26 <jadrian> http://haskell.org/bookshelf/
04:27:01 <dark> jadrian: That's a good monad text :)
04:27:35 <jadrian> dark: yeap :)
04:28:39 <jadrian> Is there some 'advanced' Monad literature out there
04:29:07 <jadrian> I wanted to know the point of the MonadRWS class for instance...
04:29:11 <jadrian> some examples would be nice
04:31:59 <dark> That's a scary type definition.
05:13:47 <shapr> delYsid: so, you think you'll be proficient in time for the ICFP competition?
05:31:00 * dark wonders how "proficient" might be defined.
05:31:25 <dark> I know that with C it takes about a year to become "non-dangerous", "proficient" is a much longer way off :-)
05:31:36 <dark> s/about/at least/
05:33:02 <dark> Hmpf.  The Word types are supposed to wrap around the edges of their domains correctly, but the Ix instance doesn't reflect that.
05:34:30 <dark> Hmm, I guess it can't, since it represents a closed interfal.
05:35:12 * dark goes and defines an Interval class.
05:46:07 <dark> Gah.  My biggest problem with Haskell is that there are too many ways to do things :)
05:46:19 <shapr> heh
05:51:04 <dark>   load elf = loadELF elf
05:51:07 <dark> I'm slowly going mad here.
05:52:38 <shapr> ?
05:52:47 <shapr> sounds like you need to change your naming system
05:54:21 <dark> shapr: Well this is an ELF parser :-)
05:54:28 <shapr> even so
05:55:02 <dark> I figured out that "load = loadELF" works just as well and is clearer.  (This is in an instance declaration)
05:57:42 <dark> shapr: I'm not sure I have a naming system :)  I'm slowly moving from Javalike names to more Haskelllike names (as found in the prelude).  I hope I won't ever write things like "mapRWS f m = RWS $ \r s -> f (runRWS m r s)" though.
05:57:51 <shapr> yah, I agree with that.
05:58:08 <shapr> imho, significant names is very important to understanding your own code
05:58:28 <shapr> I first heard that idea in eXtreme Programming, I have learned how true it is through daily use.
05:58:44 <dark> There's a corollary of giving insignificant names to things that are insignificant, but some Haskell code seems to overdo it.
05:59:12 <dark> For example I'm perfectly happy with (p:ps) in a pattern, especially if there's a type signature above it that says [Point]
05:59:31 <shapr> http://c2.com/cgi-bin/wiki?MeaningfulNames
05:59:37 <shapr> yah, I agree with that.
06:00:11 <dark> shapr: I'm also an Extreme Programming fan.  That's why I started learning Java, actually.
06:00:22 <shapr> eh?
06:00:28 <shapr> XP is more tied to Smalltalk ;-)
06:00:45 <dark> shapr: Yeah but the Refactoring book was all about Java :)
06:00:54 <shapr> hmm
06:01:13 <shapr> the refactoring browser implementation thesis is more fun to read.
06:01:50 <shapr> I have the refactoring book, and it is nifty
06:02:19 <shapr> it feels slightly moronified though, since it's using Java.
06:02:24 <dark> Heh.
06:02:35 <shapr> there's a new project to refactor functional programs.
06:02:37 * shapr looks for the url
06:02:48 <dark> Interesting, I was wondering how refactoring would work in Haskell.
06:02:52 <shapr> http://www.cs.ukc.ac.uk/people/staff/sjt/Refactor/
06:02:57 <shapr> should work similarly
06:03:12 <shapr> I've been thinking of extrinsic vs intrinsic representations in Haskell
06:03:31 <shapr> ya know, everything in Haskell could describe itself as a set of S and K combinators
06:03:40 <shapr> that would be nifty for automated refactoring
06:04:30 <shapr> you too can fill out the haskell refactoring survey: http://www.cs.ukc.ac.uk/research/groups/tcs/fp/Refactor/surveys/haskell-editors-July-2002.txt
06:45:07 * shapr bounces
06:48:31 * shapr bounces furiously
06:49:14 <shapr> pertsa: hey, wassup?
07:08:00 <shapr> can someone explain to me what foo and foo' mean?
07:08:08 <shapr> does that mean the result of calling yourself?
07:10:24 <dark> shapr: In what context?
07:10:33 <shapr> um
07:11:04 * shapr finds an url
07:28:56 <shapr> http://alicorna.net/Factorial.hs
07:29:08 <shapr> in that case it appears to be an explicit thing
07:54:25 <PMode> re
07:54:47 <shapr> hi PMode
07:54:57 <PMode> how big is the time difference between Pacific Standard Time and GMT?
07:55:03 <shapr> -0800 I think
07:55:13 <shapr> I should post that on the IcfpContest page
07:55:19 <PMode> ;)
07:55:27 <PMode> that would be nice.
07:55:47 <PMode> that means, we had to start 9 o'clock
07:55:52 <PMode> thats fine.
07:56:00 <shapr> you want to join the team?
07:56:05 <PMode> nice time for nice work ;)
07:56:10 <shapr> yah, I agree.
07:56:14 <PMode> i think we start a own team her in germany
07:56:18 <shapr> ok.
07:56:28 <PMode> a doctor at our university has initiated this.
07:56:37 <shapr> who?
07:56:44 <PMode> Joe Waldmann
07:56:50 <PMode> Do you know him?
07:56:56 <shapr> sounds vaguely familiar.
07:57:09 <shapr> I may have seen him post to one of the haskell mailing lists.
07:57:17 <PMode> yes, i think so.
07:57:44 <PMode> i saw in a mailing list a posting to franTK and so one from him. 
07:57:56 <PMode> .oO( i should try to learn haskell )
07:58:15 <shapr> it's a gorgeous language.
07:58:38 <PMode> i find it very nice.
07:58:48 <PMode> it's a bit new for a java programmer.
07:58:54 <shapr> that's true.
07:59:01 <PMode> the direction of development starts with functions
07:59:30 <shapr> or maybe it starts with data types?
07:59:30 <PMode> i'd read an article at "lambda the ultimate" about haskell refactorings. is there a tool for doing such things?
07:59:38 <shapr> not that I'm aware of.
07:59:43 <PMode> yes, of course. you're right.
07:59:50 <shapr> there is a research project that's working on that.
07:59:56 <PMode> k
08:00:04 <shapr> http://www.cs.ukc.ac.uk/research/groups/tcs/fp/Refactor/
08:00:16 <shapr> PMode: actually, you can start with functions, or with datatypes, whatever works for you.
08:00:35 <PMode> yes, that's the link i've found at LtU
08:01:00 <PMode> i didn't read it to the end. so i don't know if there is a tool ;)
08:01:41 <shapr> not that I know of
08:01:58 <PMode> if you use IDEA (A java IDE with refactoring functions) you think, such a feature must be everywhere.
08:02:28 <shapr> refactoring functional programs is a bit different.
08:02:29 <PMode> what IDE do you use for Haskell? I'm currently using the haskell-mode in emacs.
08:02:33 <shapr> me too
08:02:36 <shapr> I like emacs.
08:02:45 <PMode> me too.
08:03:04 <PMode> but not for every job i'll use emacs.
08:03:15 <PMode> there are better tools for doing special work.
08:03:15 <shapr> like what?
08:03:22 <shapr> that's true.
08:03:23 <PMode> IDEA
08:04:03 <shapr> I haven't used it.
08:04:41 <shapr> do you have any questions about Haskell?
08:04:45 <PMode> yes.
08:04:56 <shapr> what are they?
08:04:58 <PMode> probably can you do a code review?
08:05:02 <shapr> maybe :-)
08:05:07 <PMode> http://pmode.dyndns.org/haskell/Definite.hs
08:05:07 <shapr> I'm still a newbie though :-)
08:06:06 * shapr reads
08:06:15 <PMode> oh, that's fine.
08:06:40 <shapr> a short read doesn't show anything obviously wrong :-)
08:07:04 <PMode> it works
08:07:20 <PMode> but i want to improve my style and get the tricks.
08:07:21 <PMode> ;)
08:07:37 <shapr> have you read the HaskellIdioms page on the HaskellWiki?
08:07:38 <PMode> the TODO passages are the one i don't know to do better.
08:07:42 <PMode> no
08:07:46 <shapr> http://purl.org/wiki/haskell/HaskellIdioms
08:08:03 <PMode> i didn't know HaskellWiki before. I'd read LtU and find the link at the bottom
08:08:10 <PMafk> shortly afk
08:12:51 <PMafk> shapr: the site you had given me is empty ;)
08:13:55 <shapr> whoops
08:13:58 * shapr looks again
08:14:23 <shapr> http://purl.org/wiki/haskell/CommonHaskellIdioms
08:14:56 <PMafk> oh thx, i'll work it through later
08:16:06 <shapr> ok
08:16:37 * shapr is tempted to write a haskell program to graphically display irc traffic on #haskell from clog logs
08:18:46 <PMafk> shapr: oh, cool. at our university many students use haskell because of Dr. Waldmann ;) 
08:19:28 <PMafk> he had done a seminar on haskell, the students use the language in the practical about functional programming language and so on...
08:19:45 <PMafk> so, we get familiar over the time with this.
08:20:25 <PMafk> but i'm in 4th semester of my studies and i hadn't programmed some stuff yet.
08:21:03 <shapr> I've never had computer classes.
08:21:06 <shapr> I'd like to try that sometime.
08:23:28 <PMafk> no, i study computer science here in germany ,)
08:50:43 <shapr> heya redcrosse
08:50:49 <redcrosse> hello
08:50:55 <shapr> redcrosse: how's the purely functional world treating you?
08:51:03 <redcrosse> shapr: sweet
08:51:15 <shapr> :-)
08:51:35 <redcrosse> hey, what's a good book after 'the craft of functional programming'?
08:51:57 <shapr> I'd suggest Hudak's School Of Expression
08:52:09 <redcrosse> thanks
08:52:22 <shapr> and then maybe Chris Okasaki's Functional Data Structures
08:52:43 <redcrosse> ooo.
08:53:00 <shapr> I want a copy of that book desperately
09:44:46 <PMode> shapr: have you any ideas to my code?
10:19:04 <PMode> why is the WorkerWrapper in the first example more efficient at http://haskell.org/wiki/wiki?WorkerWrapper
10:20:01 <PMode> i read that lists are not so performant, how are they stored internally? 
10:21:42 <PMode> they looked like LinkedLists in Java, but is there a ability to specify the implementation for a datatype? e.g. a) give the system a hint: the structure of my data is in this way, so choose this implementation or b) choose the implementation by your own?
10:22:09 <PMode> i didn't read something in this direction, but it would be a cool thing to do so.
10:23:07 <PMode> then you would have interfaces, the advantages of a typed functional language (adt's, polymorphism, etc.) and more performance
11:05:19 <PMode> nobody else here? all gone for lunch?
11:20:45 <smkl> datatypes should be stored quite efficiently. there are not really much choices
11:21:54 <PMode> smkl: okay, datatypes are fix. mmh, but i think, if haskell would know internal structure of my data it can profit from this through optimization.
11:24:33 <PMode> okay, to some simplier questions: Why is the WorkerWrapper in the first example more efficient at http://haskell.org/wiki/wiki?WorkerWrapper
11:27:42 <smkl> because the first one inserts to the end of list it's O(n^2)
11:31:00 <PMode> oh.
11:35:11 <PMode> how can i profile these functions?
11:36:18 <PMode> smkl: the first one is not O(n^2)
11:36:47 <PMode> only if you assume haskell uses lineare linked lists
11:40:50 <smkl> in hugs, try :set +s
11:42:07 <PMode> thx
11:42:23 <smkl> haskell lists are probably defined to be equivalent to data [a] = [] | a:[a]
11:43:40 <PMode> yes, that is defined in Prelude.hs
11:43:53 <smkl> and because the lists are functional, being doubly linked wouldn't help any (actually they would then be even less efficient)
11:44:02 <PMode> well, probably i'm not familar enough with these topics ;)
11:45:50 <PMode> i thought lists are only data and data x = ... <= are only constructors for datatypes
11:46:11 <PMode> what do you mean then with "lists are functional"
11:49:22 <smkl> lists cannot be mutated
11:49:39 <PMode> yes, all datatypes are immutable
11:50:13 <PMode> ah, you say: appending an object cannot modify the previous object?
11:51:09 <smkl> yes
11:51:35 <PMode> smkl: i'm understanding not so fast ;)
11:51:49 <PMode> is there an ability to define an object creation rule?
11:52:36 <smkl> what do you mean?
11:53:11 <PMode> for instance: if you store positions on an game board, you have many objects with the same state.
11:53:24 <PMode> this is something like the flyweight pattern [GoF]
11:54:01 <PMode> if you can define an object creation rule, you would be able to use a cache and return a object you've used bevor.
11:54:10 <PMode> s/bevor/before/
11:55:54 <PMode> you can apply functions as you've done before and can reuse objects
11:55:54 <smkl> you can just have a value x, and set all the objects in the list (or whatever) to be x. then x is shared until something is changed
11:56:48 <PMode> it should not be shared.
11:57:09 <smkl> it is immutable, that's why it can be shared
11:57:44 <PMode> the constructor or a function must be used to get a new object.
11:57:53 <PMode> after applying a function
11:58:41 <smkl> haskell only has immutable values, not objects
11:59:33 <PMode> the feature isn't available in java, but it would be a nice feature to safe memory 
11:59:57 <smkl> for example in the second, more efficient reverse, the end of the list can be shared because it won't be changed
12:00:34 <PMode> this is neccessary for pipelining
12:00:57 <PMode> primes [1..] <= or something like this
12:30:16 <PMode> hehe
12:30:23 <PMode> oh, wrong channel ;)
14:21:22 <PMode> ciao
23:24:31 <shapr> boing
23:24:49 <shapr> goood morning!
23:29:48 <shapr> well then.
