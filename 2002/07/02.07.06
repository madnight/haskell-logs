02:01:01 <shapr> w00
02:01:05 * shapr bounces into the channel
02:01:17 <shapr> good morning!
02:02:34 <hornby> goooooood morning
02:15:32 <hornby> Where does haskell.org come from. Is it "official?
02:21:50 * xbill nods. haskell.org is official
02:25:21 <shapr> hi xbill, haven't seen you around much... are you taking a break from kernel stuff?
02:25:23 <hornby> sanctioned by whom? 
02:25:43 <xbill> yep
02:25:50 <xbill> Sorely needed really.
02:26:03 <xbill> Week-long vacation, now entering its death throes.
02:26:11 <xbill> Won't touch the kernel 'til Monday though.
02:26:20 <xbill> Might take a few more potshots at the compiler.
02:26:42 <shapr> heh
02:38:49 <xbill> I was thinking I'd try to get into OGI considering I'm right next door.
02:39:58 <shapr> I suspect they'd be interested.
02:42:03 <xbill> The kernel is actually a nice place despite the C cruft.
02:43:06 <shapr> it seems that they allow people to have a "real" job and be faculty at the same time.
02:43:48 <shapr> I'd like to become familiar with the kernel at some point, but Haskell is much more interesting so far.
02:44:22 <shapr> I've been thinking about a kernel written in a purely functional language...
02:44:39 <shapr> FPLs have the potential to be transparently parallel, though it's never been implemented
02:44:53 <xbill> I thought GPH did so.
02:45:00 <shapr> it's not transparent.
02:45:16 <xbill> suckage
02:45:20 <shapr> yah really
02:45:42 <shapr> the GHC Concurrent module gives you threads, GPH runs on PVM
02:46:39 <xbill> camlp4 doesn't do that by itself but there are related modules for quotation of the appropriate bits and you can play with the syntax trees yourself before the back-end seees them (e.g. stuff antiquotations into the right places etc.)
02:47:33 <shapr> as much as I consider the Itanium a waste of money, I'd still like to write a GHC backend that output EPIC
02:47:56 <shapr> I wonder if EPIC would lend itself to asymmetric MP
02:48:06 <xbill> Functional languages along with Fortran are most likely to do so.
02:48:22 <xbill> the 870 chipset was supposed to support mixed cpu speeds IIRC
02:48:51 <shapr> cool, I'll read up on that.
02:50:06 <shapr> I read that the kernel has support for mixed cpu architectures also
02:50:43 <xbill> which kernel?
02:50:47 <xbill> Linux?
02:50:48 <shapr> Linux kernel
02:51:01 <xbill> Hmm, I'm not so sure about that.
02:51:02 <shapr> so it can do AMP with one 200MHz ARM and one 300MHz PPC, etc
02:51:32 <xbill> That's definitely not mainline.
02:51:33 <shapr> it does sound farfetched
02:52:09 <shapr> I'll look that up at some point...
02:52:49 <shapr> I vaguely recall that it was an embedded system using an ARM for general purpose stuff and something else for heavy duty flops
02:55:39 <Igloo> I've seen something with CPUs no a PCI card, but that was essentially multiple machines in one box IIRC
03:31:53 <elmex> fib             = 1 : 1 : [ a+b | (a,b) <- zip fib (tail fib) ]
03:31:56 <elmex> ouch
04:56:25 * shapr bounces
04:56:47 <shapr> Igloo: that's the x25 card?
05:03:11 <shapr> I remember reading about a PCI card with several strongarm chips for scientific computing
05:04:03 <shapr> the guy who designed forth came up with a card like that: http://www.colorforth.com/25x.html
05:47:03 * shapr thinks
06:27:21 <Igloo> Possibly - I have only hazty memories of a talk on it
08:34:59 * shapr grumbles
08:35:06 <shapr> my brain is not in the right mode today
08:40:49 <shapr> hm
08:41:01 <shapr> is there a StringS type?
09:21:38 <ChoJin> I have a non-haskell related question :) but dunno where to ask :)
09:21:47 <shapr> what's the q?
09:21:48 <ChoJin> (grammar)
09:21:50 <ChoJin>     {Segment "."}+           -> Hostname
09:22:00 <ChoJin> what means {} ?
09:22:08 <ChoJin> "OR" ?
09:22:21 <shapr> is that ebnf grammar?
09:22:36 <ChoJin> I know {foo,bar}, I know (foo bar)+ but {foo bar}+ I don't know :)
09:22:39 <ChoJin> yes
09:23:04 <shapr> I dunno, can I see the rest of the document? is it online somewhere?
09:23:52 <ChoJin> module MailAddress
09:23:52 <ChoJin> exports
09:23:52 <ChoJin>   syntax
09:23:52 <ChoJin>     Segment "@" Hostname     -> X
09:23:52 <ChoJin>     [A-Za-z][A-Za-z0-9\-\_]* -> Segment
09:23:53 <ChoJin>     {Segment "."}+           -> Hostname
09:23:59 <ChoJin> (SDF syntax :) )
09:24:06 <shapr> I've heard of SDF
09:24:14 <shapr> isn't that "scientific data format" ?
09:24:38 <ChoJin> no :)
09:24:40 <shapr> oh
09:24:49 <ChoJin> it's part of a fucking good grammar tool :)
09:24:53 <shapr> oh
09:24:57 <ChoJin> SGLR grammar
09:25:05 <shapr> is the sdf package in debian/unstable?
09:25:07 <ChoJin> # http://www.cwi.nl/projects/MetaEnv/meta/ 
09:25:12 <ChoJin> # http://www.stratego-language.org/ 
09:25:17 <ChoJin>     *
09:25:17 <ChoJin>           o http://www.program-transformation.org/twiki/bin/view/Tools/
09:25:24 <ChoJin> theses guy are near from god :)
09:25:29 <shapr> ha
09:25:31 <ChoJin> unfortunatly no
09:25:32 <ChoJin> :)
09:25:34 <shapr> I've heard of stratego-language
09:25:56 <ChoJin> I am playing with island grammer, but this {Segment "."}+ confused me
09:26:18 <shapr> it looks similar to regex syntax
09:26:31 <shapr> but {} obviously means something else in sdf
09:26:56 <shapr> I'd suggest you write a tiny example program that consists of only a single {foo "."}+ statement
09:27:00 <shapr> and play with that till you understand it
10:24:44 <le-chuck> Good morning sirs
10:25:42 <le-chuck> Is there anyone ? 
12:41:17 <le-chuck> Hi all
12:41:21 <le-chuck> is anyone awake?
13:54:13 <elmex> could anyone explain me this: fib = 1 : 1 : [ a+b | (a,b) <- zip fib (tail fib) ] 
13:54:42 <xbill> Try reducing take 10 fib to WHNF
13:55:26 <elmex> ?
13:55:34 <xbill> Weak Head Normal Form
13:56:09 <xbill> take 10 fib = 1 : take 9 (drop 1 fib)
13:56:19 <xbill> = 1 : 1 : take 8 (drop 2 fib)
13:56:32 <elmex> no clue
13:56:33 <xbill> = 1 : 1 : 2 : take 7 (drop 3 fib)
13:56:47 <xbill> = 1 : 1 : 2 : 3 : take 6 (drop 4 fib)
13:57:06 <xbill> = 1 : 1 : 2 : 3 : 5 : take 5 (drop 5 fib)
13:57:19 <xbill> = 1 : 1 : 2 : 3 : 5 : 8 : take 4 (drop 6 fib)
13:57:42 <xbill> = 1 : 1 : 2 : 3 : 5 : 8 : 13 : take 3 (drop 7 fib)
13:57:48 <elmex> wtf. is zip, tail, take, drop?
13:58:00 <xbill> = 1 : 1 : 2 : 3 : 5 : 8 : 13 : 21 : take 2 (drop 8 fib)
13:58:16 <xbill> = 1 : 1 : 2 : 3 : 5 : 8 : 13 : 21 : 34 : take 1 (drop 9 fib)
13:58:38 <xbill> = 1 : 1 : 2 : 3 : 5 : 8 : 13 : 21 : 34 : [55]
13:58:59 <elmex> ah, nice, and how does it work?
13:59:19 <xbill> zip ['a','b','c'] [1,2,3] = [('a',1),('b',2),('c',3)]
13:59:59 <xbill> tail [1,2,3] = [2,3]
14:00:11 <xbill> drop 2 [1,2,3,4,5] = [3,4,5]
14:00:21 <xbill> How's that look?
14:00:47 <elmex> hm
14:01:23 <xbill> zip pairs up correspondig list elements
14:01:39 <xbill> tail rips the first element off the list
14:01:49 <xbill> drop n rips the first n elements off the list
14:02:09 <elmex> yes
14:02:15 <xbill> 1 : [2,3] = [1,2,3]
14:02:17 <elmex> but what does this do:
14:02:20 <elmex> zip fib (tail fib) ?
14:02:23 <xbill> so (:) glues something on front of the list
14:02:39 <xbill> That pairs up the corresponding elements of the list fib and the list tail fib
14:03:12 <elmex> hm...
14:03:27 <xbill> so each element of fib is paired with the one after
14:03:46 <elmex> heh, i dont understand the algo...
14:03:54 <xbill> oh it's not tough
14:04:03 <elmex> i know, but i dont understand it..
14:04:25 <elmex> its 2-way recursive.. 
14:04:27 <xbill> well, you take an element of fib, the element after, add them together, and get the one after that
14:05:11 <elmex> but fib returns not only one value
14:05:13 <xbill> so for instance suppose we start from the beginning of the list [a + b | (a,b) <- zip fib (tail fib) ]
14:05:37 <xbill> fib = [1,1,...] where the ...'s are still unknown
14:05:55 <xbill> tail fib = [1,...] where ... is still unknown
14:06:07 <xbill> so zipping together the heads we have (1,1) as the first pair
14:06:14 <xbill> Now add them and we get the third element of fib
14:06:47 <elmex> hm, i think, i got it
14:06:50 <xbill> Now we know the 3rd element of fib as well as the second
14:07:12 <xbill> fib = [1,1,2,...] and tail fib = [1,2,...]
14:07:26 <xbill> the second element pair is (1,2)
14:07:33 <xbill> adding we get the fourth elem of fib is 3
14:07:45 <elmex> hm, ok
14:07:49 <xbill> it's easier to write as 1 : 1 : zipWith (+) fib (tail fib)
14:08:24 <elmex> got it... i am only scared about people who invent stuff like that... ;) (i couldn't do that...)
14:08:35 <xbill> zipWith f xs ys = [f x y | (x,y) <- zip xs ys] so it's the exact thing written as a list comprehension, just shorter and more standardized.
14:09:09 <xbill> There's nothing special to it really
14:09:31 <elmex> to take it as example for a introdution is quite heavy.. (for me ..)
14:10:00 <xbill> it's meant to "expand your mind", which means it will take effort to understand if you've not seen it before, but you're doing quite well.
14:10:22 <xbill> by the bye, every three-term recurrence with constant coefficients can be written thus
14:11:36 <elmex> hm, i am only a young student ;) who trys to learn haskell... i am not bad at math, but we haven't had such math in school yet...
14:11:55 <xbill> xs = x0 : x1 : zipWith (\xn xn1 -> a*xn + b*xn1 + c) xs (tail xs)
14:12:45 <elmex> thats pseudocode, isn't it ?
14:12:47 <xbill> four-term recurrences work too
14:12:49 <xbill> No it's not
14:13:20 <xbill> a, b, and c need to be defined as numbers but otherwise it is legitimate Haskell code
14:13:32 <xbill> Four-term recurrences work as well
14:13:40 <xbill> As do things involving n
14:13:52 <xbill> for instance 
14:14:20 <elmex> what is x0 and x1?
14:14:23 <xbill> oh
14:14:29 <xbill> they also need to be defined as numbers
14:14:35 <elmex> ah
14:15:14 <elmex> please, no more math ;) i am only learning a programming language. but thanks for the explanation
14:15:51 <xbill> xs = x0 : x1 : x2 : zipWith4 (\n xn xn1 xn2 -> p n * xn + q n * xn1 + r n * xn2 + s n) [3..] xs (drop 1 xs) (drop 2 xs)
14:16:11 <Igloo> You are possibly learning the programming language nearest to a solid mathematical theory that is used in teh real world
14:16:47 <elmex> heh, yes... but can't learn maths stuff and a prog. language at once
14:16:50 <xbill> Where x0, x1, and x2 need to be defined as constants and p, q, r, and s need to be defined as functions.
14:16:59 <Igloo> :-)
14:17:54 <xbill> Programming is math.
14:18:58 <elmex> i know ;) but my maths skills aren't very developed yet... i'm still going to school, and hope to study math's later
14:19:57 <xbill> If you're studying programming you're already studying math. Computability etc. etc.
14:20:11 <elmex> hnm
14:20:32 <elmex> atm. i only learn the syntax ;)
14:20:43 <xbill> You know what \ does?
14:20:59 <xbill> e.g. map (\x -> 2*x + 1) [1,2,3] ?
14:21:02 <elmex> yes, defining a anonymous function (that lambda stuff ;)
14:21:08 <xbill> that works
14:21:16 <elmex> jup
14:21:34 <elmex> [3, 5, ..]
14:21:35 <xbill> You understood zipWith and zipWith3 and zipWith4 right?
14:22:15 <elmex> hm
14:22:17 <elmex> partly
14:22:27 <xbill> well, you understood zip right?
14:22:32 <elmex> yes
14:22:42 <xbill> zip3 takes 3 lists and makes triples
14:22:53 <elmex> ah
14:22:58 <xbill> zipWith takes corresponding elements and uses them as arguments to a binary function
14:23:23 <xbill> zipWith3 and zipWith4 take corresponding elements of 3 and 4 lists respectively and use them as arguments to functions
14:24:07 <elmex> ok
14:24:20 <xbill> okay, what's the next question?
14:24:51 <xbill> foldr?
14:25:05 <xbill> Tell me what foldr (+) 0 does
14:25:10 <elmex> i am just at sect. 4..
14:25:18 <elmex> dunno foldr yet
14:25:19 <xbill> Section 4 of what?
14:25:23 <xbill> ah well that's easy
14:25:27 <xbill> there's a simple reduction rule
14:25:56 <xbill> foldr f y (x:xs) = f x y : foldr f y xs
14:26:24 <xbill> argh
14:27:15 <xbill> foldr f y (x:xs) = f (f x y) (foldr f y xs)
14:27:53 <xbill> foldr f y [] = y
14:28:05 <Igloo> Ermmm, not in my universe
14:28:22 <xbill> I'm having a massive brainfart sorry
14:28:25 <Igloo> foldr f y (x:xs) = f x (foldr f y xs)
14:28:42 <xbill> much better thank you
14:28:46 <Igloo> And foldr f y [] = y (as you had)
14:29:06 <elmex> ah, foldr calls a function with each element of a list
14:29:17 <elmex> with a special arguemtn
14:29:23 <Igloo> (although I'd have used e instead of y  :-)  )
14:29:33 <xbill> well
14:29:45 <xbill> it should work best when it's the identity of a monoid yes
14:30:02 <Igloo> It sounds like you are reading it as f x : (foldr f y xs), elmex
14:30:06 <Igloo> Note the extra :
14:30:28 <elmex> omg
14:30:39 <xbill> foldl goes the other way, something like foldl f y (x:xs) = foldl f (f x y) xs
14:30:41 <elmex> and the result of the tail-elements?
14:30:59 <elmex> waa... this phucks my brain
14:31:04 <Igloo> That sounds like you understand what's going on
14:31:21 <elmex> heh
14:31:43 <Igloo> Ths tail-elements line, not the next one  :-)
14:31:53 * Igloo afks for a bit again
14:32:18 <xbill> nm foldl
14:32:26 <elmex> hm, haskell will be quite helpful for maths later ...
14:32:31 <xbill> foldr (+) 0 [1,2,3] 
14:33:04 <xbill> we get now 1 + foldr (+) 0 [2,3]
14:33:19 <xbill> = 1 + 2 + foldr (+) 0 [3]
14:33:41 <xbill> = 1 + 2 + 3 + foldr (+) 0 []
14:33:49 <xbill> = 1 + 2 + 3 + 0
14:33:51 <elmex> MyModule> take 100 foldr (+) 0 [1..] 
14:33:52 <elmex> ERROR - Type error in application
14:33:52 <elmex> *** Expression     : take 100 foldr (+) 0 (enumFrom 1)
14:34:04 <elmex> i understand foldr
14:34:09 <xbill> try
14:34:21 <elmex> MyModule> foldr (+) 0 [1,2,3] 
14:34:21 <elmex> 6
14:34:22 <xbill> foldr (+) 0 (take 100 [1..])
14:34:28 <elmex> oh
14:34:28 <elmex> arg
14:34:33 <xbill> or 
14:34:41 <xbill> foldr (+) 0 [1..100]
14:34:53 <elmex> 5050 8)
14:35:03 <elmex> MyModule> foldr (+) 0 [1..100000]
14:35:04 <elmex> ERROR - Control stack overflow
14:35:05 <elmex> hm
14:35:20 <elmex> using recursion for such things isn't really effective
14:35:26 <xbill> You used too big a list there
14:35:44 <elmex> yes, but lets say, i want to calc that 
14:35:48 <xbill> try foldl
14:36:13 <elmex> ERROR - Garbage collection fails to reclaim sufficient space
14:36:25 <xbill> hmm, is this hugs or ghci?
14:36:29 <elmex> hugs
14:36:36 <xbill> ghci can handle foldl
14:36:42 <elmex> hm
14:36:52 <xbill> Looks like it handled foldr as well.
14:37:20 <elmex> foldl (+) 0 [1..10000] works without problems (foldr too)
14:37:22 <xbill> [1]  + continued  ghci
14:37:22 <xbill> foldl (+) 0 [1..100000]
14:37:22 <xbill> 5000050000
14:37:22 <xbill> Prelude> foldr (+) 0 [1..100000]
14:37:22 <xbill> 5000050000
14:37:27 <elmex> ?!
14:37:59 <xbill> want to try unfoldr?
14:38:52 <elmex> waht does it do?
14:39:03 <xbill> It's like the opposite of foldr
14:39:15 <elmex> ?!
14:39:25 <elmex> reverse ?
14:40:30 <xbill> Prelude> :type List.unfoldr
14:40:31 <xbill> forall b a. (b -> Maybe (a, b)) -> b -> [a]
14:40:31 <xbill> Prelude> List.unfoldr (\n -> if n < 10 then Just (n+1,n+1) else Nothing) 0
14:40:31 <xbill> [1,2,3,4,5,6,7,8,9,10]
14:41:25 <xbill> it keeps adding new things to a list until it sees Nothing
14:41:49 <xbill> It uses the first part of the pair returned as the next thing in the list, and the second part as an argument to the generator
14:42:30 <xbill> Prelude> List.unfoldr (\n -> if n < 10 then Just (2*n+1,n+1) else Nothing) 0
14:42:30 <xbill> [1,3,5,7,9,11,13,15,17,19]
14:43:08 <elmex> ERROR - Undefined variable "unfoldr"
14:43:14 <xbill> import List
14:43:25 <xbill> :e
14:43:39 <elmex> :load List ?
14:43:46 <elmex> ah, yes
14:43:47 <xbill> :l List should work too
14:44:36 <elmex> hm dont understand it..
14:44:44 <xbill> unfoldr is good for building up a list of things 
14:45:00 <xbill> basically
14:45:13 <xbill> you've got your f :: b -> Maybe (a,b) already
14:46:00 <xbill> if you built up a list of all the b's when you repeatedly apply f, like 
14:46:13 <xbill> Just (_, b1) = f b0
14:46:19 <xbill> Just (_, b2) = f b1
14:46:24 <xbill> Just (_, b3) = f b2
14:46:26 <xbill> ...
14:46:28 <elmex> what is Just? what is Maybe ?
14:46:33 <xbill> oic
14:46:55 <xbill> Maybe is a type that either holds something of another type, or has nothing
14:46:57 <elmex> i dont know anything about haskell yet, still reading the intro
14:47:05 <xbill> so you've got Just something or Nothing
14:47:17 <xbill> if x :: Maybe Int
14:47:52 <elmex> scary
14:47:55 <xbill> then case x of { Just n -> n + 1 ; Nothing -> 0 } gives you a function on it
14:48:33 <xbill> Where it increments it if there's a value or gives 0 if there isn't.
14:48:54 <xbill> You can pull out the pieces of the things
14:48:57 <xbill> But anyway
14:49:32 <xbill> Since the function passed to foldr returns either Just something or Nothing, it basically keeps pounding on the stuff wrapped up in a Just until it gets back a Nothing, and then it ends the list.
14:49:37 <xbill> unfoldr
14:50:08 <xbill> "Did I get an answer?"
14:50:14 <xbill> (A) if so, do it again
14:50:17 <xbill> (B) if not, stop
14:50:22 <xbill> that's the basic idea of unfoldr
14:50:28 <elmex> ah
14:50:57 <xbill> Then "What does it do with the answers?" is answered with "It strings them together into a list"
14:51:44 <elmex> ok
14:52:05 <xbill> there are uses for this but they're rare compared to map and foldr
14:53:38 <xbill> One of the more common uses is you have something you can't "dissect" very well but you can keep a position in it
14:54:04 <xbill> for instance, a search tree or a type owned by another module that's abstract in the one you're writing
14:55:22 <xbill> the second argument and starting value represent positions, you get access to the search structure from a scope above, and the answers come out in a list
14:55:44 <xbill> I wrote a linker for some bytecode this way.
14:56:25 <elmex> hm
14:56:45 <xbill> buildInitialHeap superCombs codeMap =
14:56:45 <xbill>                 (1 + last (map fst nodeAssocs), nodeAssocs)
14:56:45 <xbill>         where
14:56:45 <xbill>                 nodeAssocs = unfoldr buildNode (0, superCombs)
14:56:56 <xbill>                 buildNode (_, []) = Nothing
14:56:56 <xbill>                 buildNode (addr, (sc:scs)) = Just ( (addr, node), (succ addr, sc
14:56:56 <xbill> s) )
14:56:56 <xbill>                                         where
14:57:06 <xbill>                                                 (name, arity, _) = sc
14:57:06 <xbill>                                                 Just code = lookupFM codeMap nam
14:57:06 <xbill> e
14:57:06 <xbill>                                                 node = Global arity code
14:57:22 <elmex> ...
14:57:57 <xbill> looking at that I realize I've forgotten almost everything about the code I wrote
14:58:48 <elmex> i just dont understand it from the first token ;)
14:59:05 <elmex> as i dont know much about syntax and stuff
14:59:29 <xbill> but it's pretty easy to figure out, I'm apparently concerned about the position counter as the position and at each stage I find the next thing to put at the position 
15:00:39 <xbill> So basically I appear to be walking over a bag of nodes to find positions for and passing alongthe current position
15:00:49 <xbill> well you know the case syntax?
15:00:51 <xbill> do syntax?
15:00:53 <xbill> where syntax?
15:00:57 <xbill> let syntax?
15:01:00 <xbill> data syntax?
15:01:02 <xbill> type syntax?
15:01:22 <elmex> 4x nope ;) (data and type a bit..)
15:01:24 <xbill> let and where are probably the best places to start
15:01:38 <elmex> i am reading the intro...
15:01:43 <xbill> let x = 1 in x + 1
15:01:52 <xbill> let { x = 1 ; y = 2 } in x + y
15:01:59 <xbill> or
15:02:24 <xbill> let x = 1
15:02:33 <xbill>     y = 2
15:02:37 <xbill> in
15:02:40 <xbill>     x + y
15:02:43 <elmex> let me = read_intro in web ;)
15:02:46 <xbill> you can do indentation
15:02:55 <xbill> alrighty
15:03:07 <xbill> got a register allocator to write anyhow =)
15:03:44 <elmex> but, thanks for help ;)
15:50:52 <xbill> hrm I have to figure out how to get slightly lower level
15:51:05 <xbill> Without dropping too many levels at once
15:51:34 <xbill> Probably the best way is to start talking about how things move about the stacks or something.
15:52:25 <xbill> I need to unravel this stuff until I have machine code.
15:59:58 * xbill tries to come up with a lower-level language to express the stack manipulations or something.
16:06:19 * shaper thinks
17:04:14 <xbill> Okay I counted 32 transition rules from SPJ's tutorial but the transition rules are not entirely coherent.
17:06:59 <xbill> Maybe I'm better off with an STG machine, but in all honesty the last few tries I wasn't quite able to extract enough info from the STG papers to pull it off.
17:11:03 <shaper> spineless tagless G machine?
17:11:59 <xbill> yeah
17:12:34 <xbill> I'm trying to get some kind of stuff going to translate lazy G-machine code to native code
17:12:42 <xbill> With some semblance of register allocation going on.
17:12:51 <xbill> Without copping out and generating C.
17:14:09 <xbill> The register allocation can be really stupid so long as it's not the really really stupid kind
17:15:27 <xbill> the really really stupid kind being total macro expansion
18:04:29 * xbill needs something like gensym
18:04:35 * xbill hrms
18:09:15 <xbill> an infinite register language with stuff isn't entirely obvious how to use because it needs like 3 stacks
18:40:28 <engstad> Greets!
18:41:19 <engstad> I'm trying to learn functional languages. I've become fairly adept with OCaml. Now, Haskell. What's the best documents written for someone with previous functional languages?
18:53:03 <shaper> engstad: I'd suggest the gentle intro
18:53:22 <shaper> if you know OCaml, I suspect you'll pick up Haskell without much trouble.
18:54:03 <shaper> engstad: there are assorted intros linked from the haskell.org website.
18:58:31 <engstad> shaper: Do you recommend hugs, ghc or any other?
18:58:51 <clausen> I reckon hugs is good for beginning
18:58:53 <clausen> since it's an interpreter
18:58:58 <clausen> it's more "interactive"
18:59:01 <engstad> *nod*
18:59:04 <clausen> eg: you can interrogate types of things
18:59:15 <engstad> Yes, I'm used to a "listener".
18:59:23 <engstad> Scheme/Lisp.
19:00:24 <engstad> In ocaml, the type information is always outputted in the interpreter. Doesn't look like it in hugs?
19:00:41 <shaper> you can use :t
19:00:59 <shaper> for example ":t (5 :: Int)"
19:01:59 <engstad> Odd, I did: :t 5, and it gave me "5 :: Num a => a".
19:02:07 <clausen> yep
19:02:13 <clausen> that's because it can be more than one type, hehe
19:02:19 <shaper> yup
19:02:21 <engstad> => is a -> ?
19:02:35 <shaper> no, it means "limited to these types"
19:02:40 <shaper> er, classes?
19:02:40 <engstad> Ah, no it is the class types, right?
19:02:51 <shaper> I think so
19:02:56 <clausen> it reads as "the type a such that "a" is a number"
19:03:06 <clausen> yes, Num is a type class
19:03:31 <engstad> Cool, I'll experiment.
19:08:14 <xbill> hm
19:08:57 <xbill> in lazy G-machine code how do I tell procedure call boundaries
19:10:20 <xbill> hmm
19:17:46 <xbill> the spineless tagless G machine seems like something more interesting
19:17:53 <xbill> the G machine's interpretive unwind is sucky
20:44:39 <le-chuck> Anyone awake?
20:47:27 <xbill> sort of
21:29:08 <le-chuck> Oh... sorry I went away in a flame war... things like these.
21:29:12 <le-chuck> :)
21:29:20 <le-chuck> It was "haskell vs c"
21:29:24 <le-chuck> (jokin)
21:31:29 <le-chuck> Hi all
21:32:16 <le-chuck> Geee... I wanna talk about monads and gui's and those stuff... but no one talks to me... UAAAAAAA
21:36:57 <le-chuck||crying> Ok I understand no one is really there :) I go away so I don't scratch anyone's... but if someone can send a memo to me (le-chuck) telling me at what time do you usually chat and on what days of the week, I would appreciate... I've been trying to speak to you all the day... :(
