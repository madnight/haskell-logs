03:16:18 <shreya> wb andrew
03:21:12 <xbill> re
05:38:37 * shapr boings
09:27:52 <shapr> hi ChoJin
09:30:38 <shapr> hi tpck
09:30:39 <shapr> wassup?
10:09:42 * shapr bounces
10:09:55 <shapr> tpck: hey, did you mail me the lists that break?
16:42:28 <loom2> why is this overflowing the stack? main = putStrLn (show (head (drop 100000 (iterate id 1))))?
16:43:10 <loom2> (it is in ghc 4, ghc 5 and hugs.
16:43:12 <loom2> )
16:44:41 <Igloo> Because you are building a closure of id (id (id ... (id 1) ... )) that finally gets evaluated
16:50:32 <loom2> ok, but why is that so? wouldn't it be possible to evaluate id n times, calling the n'th with the n-1'th return value?
16:52:17 <Igloo> You need a stack of things you are going to apply to the result then
16:54:58 <loom2> of what would this stack consist?
16:55:13 <Igloo> The solution in general is to force the intermediate results to head normal form, but I don't think you'll be able to do that while using the prelude iterate
16:55:39 <Igloo> id multiple times, unless you were suggesting special case code for when all the functions are the same?
16:58:19 <loom2> igloo: sorry, i do not understand why this is so. why do i need to put the ids on a stack?
16:58:53 <Igloo> OK, Haskell is lazily evaluated, right?
16:58:59 <loom2> igloo: yes.
16:59:08 <Igloo> So you aren't actually going to evaluate anything until you have to
16:59:13 <loom2> igloo: yes.
16:59:46 <Igloo> This means by the time you start evaluating ids you have 100000 of them to evaluate
17:00:41 <Igloo> The (strict) expression you need to evaluate looks like "id foo", foo is "id bar" and so on
17:01:23 <Igloo> One way to evaluate this is to recursively evaluate the subexpressions. If you think of C code doing this it will use the C stack
17:02:15 <Igloo> I'm not an expert on how Haskell implementations work, but I believe in this situation they would do something similar
17:02:37 <Igloo> Does that make sense?
17:03:09 <loom2> igloo: a little bit.
17:03:58 <loom2> igloo: so if i have (iterate (+1) 0), the first value i get from it is 1.
17:04:34 <loom2> igloo: this value does only need one evaluation of (+1)
17:04:35 <Igloo> No, it's 0
17:04:56 <loom2> igloo: the second then :)
17:05:01 <Igloo> The second value is 1 and needs only 1 evaluation, yes
17:05:46 <loom2> igloo: the next iteration depends on that result as an input.
17:05:56 <Igloo> And because you have looked at this value before the 3rd value (i.e., you haven't dropped it) it requires only one more evaluation
17:06:11 <Igloo> (where it is the third value)
17:06:38 <loom2> igloo: ah, now i get it :)
17:07:08 <loom2> igloo: thank you!
17:07:11 <Igloo> Cool  :-)
17:07:14 <Igloo> np
17:07:49 <loom2> igloo: i'm still new to lazy evaluation, as you might have noticed ;)
17:08:06 <loom2> igloo: i'm used to program in c++.
