03:18:20 <shapr> goood morning!
03:19:27 <Heffalump> ugh
03:20:14 <shapr> ?
03:20:25 <shapr> what's up Heffalump ?
03:21:57 <Heffalump> morning :-)
03:22:08 <shapr> yah, mornings are exciting things.
03:22:10 <shapr> at least..
03:22:14 <Heffalump> hmmm.
03:22:16 <shapr> by afternoon they are
03:22:21 <Heffalump> mornings involve getting up
03:22:29 <shapr> yah, that's the hardest part of the day.
03:22:46 <shapr> the worst part of waking up is waking up.
03:23:11 <shapr> my woman awakens at 7:30am nearly every day.
03:23:28 <shapr> sometimes she sleeps late till 8:00am, or even 9:00am on hedonistic days.
03:23:45 <shapr> I can sleep till 3:00pm without much trouble.
03:28:58 * shapr yawns
03:29:17 <shapr> I want to read more nifty stuff on comp.lang.functional
04:02:41 <jml> hello
04:02:45 <shapr> yay! hiii!
04:03:09 <jml> I've always wanted to try doing crypto stuff in haskell, but alas no bit stuff 
04:03:22 <shapr> there is bit stuff
04:03:25 <shapr> if you use GHC
04:03:39 <jml> ah, ok.
04:03:49 <jml> only ever used hugs.
04:03:59 <shapr> I like ghc
04:04:18 <shapr> I recently wrote some bit fiddling code for GHC
04:04:27 <shapr> so I can help you with that kind of stuff if you want.
04:04:44 <shapr> Jerub: I'm glad you're learning Haskell, it's a powerful and beautiful language.
04:04:46 <jml> shapr: heh, thanks.. but it's probably going to be a while before I get back to it;.
04:05:07 <Jerub> shapr: actually our entire course is basically on the net, and its 1 semester, half haskell, half prolog
04:05:11 <shapr> jml: what do you get paid for?
04:05:15 <jml> haskell is very nice. very low level. well, it's close to the maths
04:05:25 <shapr> Jerub: wow cool, I'd like to have a course like that.
04:05:26 <jml> shapr: at the moment, writing if-then-else statements
04:05:33 <shapr> jml: really? it feels very high level to me.
04:05:38 <shapr> even higher level than Python
04:05:52 <jml> shapr: it depends on whether you think maths is on the top or the bottom :)
04:05:52 <Jerub> I consider 'low level' to be stuff like messing with hardware.
04:06:12 <jml> haskell strikes me as being very close to the maths
04:06:25 <shapr> I think that's true.
04:06:38 <Jerub> maths is kinda an arbitary feature of a language.
04:06:40 <shapr> Haskell is closer to math than any other language I've worked with.
04:06:57 <shapr> Jerub: you know about referential transparency?
04:06:58 <Jerub> of course, I don't think that when i code in C and have type casting maths problems after spending 6 months coding in matlab
04:07:14 <Jerub> shapr: no? google?
04:07:19 <jml> Jerub: that's slightly different. that's numeric computation :)
04:07:22 <shapr> nah, lemme get an url
04:08:09 <shapr> http://c2.com/cgi-bin/wiki?AdvantagesOfFp
04:08:46 <shapr> "purely functional" means "referential transparency" at least
04:08:50 <shapr> I'm not sure what else it covers.
04:09:35 <jml> the rest of the time, I get paid to design and build software systems .. which is pretty much the core business of the company I work for.
04:09:47 <shapr> sounds like fun
04:09:52 <shapr> I'm self-employed
04:10:01 <shapr> I was half-time salaried, but that's about to end
04:10:08 <shapr> I much prefer doing contract stuff
04:10:13 <jml> shapr: not at the moment, I've been contracted out to a govt position. 
04:10:41 <shapr> doing something nifty?
04:11:03 <jml> nope. building a website using Content Server. like I said if-then-else :)
04:11:07 <shapr> part of the fun of being self-employed contract is that I have a lot more fun.
04:11:32 <shapr> I'm not forced to take any crappy job my company gets money for...
04:11:44 <shapr> I can write web services in Haskell as long as it works for my client.
04:11:47 <jml> I know what you mean. 
04:11:57 <Jerub> ahh, the no side effects thing :)
04:12:17 <jml> Jerub: basically, no state
04:12:21 <shapr> Jerub: yah, you see how that's closer to an equation?
04:12:34 <shapr> x = x + 1 does *not* work in a purely FP language.
04:12:37 <Jerub> shapr: very much so.
04:12:38 <shapr> well, not really.
04:12:52 <jml> monads aside.
04:12:56 <shapr> right
04:13:17 <shapr> RT means you always know what's going on in your code, nothing happens "behind your back"
04:13:20 * jml very much wants to understand the mathematics of monads
04:13:37 <Jerub> shapr: I like the 'behind your back idea'.
04:13:38 <shapr> I don't understand the math, but I know a bit about how monads work.
04:13:58 <shapr> Jerub: how many times have you had to debug code that was doing something tricky you didn't know about?
04:14:04 <Jerub> considering at work I code in php, and I'm having a ''problem'' with testing webbased systems.
04:14:08 <shapr> right
04:14:19 <Jerub> that is, I don't like clicking in a web browser over and over.
04:14:23 <shapr> code testing in Haskell is a very different experience.
04:14:25 <jml> haskell would be good for web stuff I think.
04:14:37 <shapr> jml: I think so too, that's why I'm trying to make money with that :-)
04:14:52 <shapr> for example, look at QuickCheck...
04:14:53 <jml> heh
04:14:54 * shapr gets url
04:15:09 <shapr> http://www.cs.chalmers.se/~rjmh/QuickCheck/
04:15:12 <Jerub> shapr: I'm actually trying to work on some way of writing a system testing suite for a highly dynamic website.
04:15:21 <shapr> Jerub: it's doable.
04:15:28 <shapr> Jerub: I'd suggest httpunit at first
04:15:38 <shapr> but you could even use wget and a boring shell script
04:15:45 <Jerub> shapr: I looked at webunit (I think thats right) - it wasn't what I'm after.
04:15:50 * jml idly wonders if relational algebra fits better into functional programming
04:15:59 <shapr> jml: like what?
04:16:13 <shapr> if you guys get a chance to read the QuickCheck ICFP paper, it's fascinating...
04:16:24 <shapr> I'm test infected in a big way.
04:16:31 <shapr> so I've been using the xUnit stuff for years
04:16:32 <Jerub> shapr: My problem is, I need to know no errors are returned, that forms exist, are submittable, and when submitted, the 'Right' things happen, database entries are changed/updated/created, and the response is correct.
04:16:47 <shapr> I learned about Design By Contract about a year ago, though I haven't started using it yet.
04:16:55 <shapr> QuickCheck is something else entirely.
04:17:12 <shapr> Jerub: first, you need mock objects
04:17:17 <jml> shapr: I first read about XP in 2000 .. and I'm slowly becoming more and more test infected.
04:17:19 <shapr> at least, that's what I would do.
04:17:32 <jml> shapr: the python project I'm working on now is entirely test-first.
04:17:36 <shapr> yay!
04:17:39 <shapr> all of my code is test-first
04:17:43 <shapr> imho that's the only way to code.
04:17:52 <shapr> anything else is too scary now =)
04:18:01 <jml> I agree. But at work its hard when others don't agree.
04:18:02 <shapr> I realize how much of a safety net test-first gives me
04:18:04 * Jerub laughs
04:18:09 <Jerub> if only!
04:18:18 <shapr> yah, *no one* I work with does unit testing
04:18:32 <shapr> very few people I work with do CVS even...
04:18:34 <Jerub> shapr: Writing web applications test first would be sooo nice, but its such a problem just trying to get a specification!
04:18:46 <shapr> Jerub: yah, I totally agree.
04:18:56 <shapr> I have some ideas about that though...
04:19:07 <jml> shapr: also, the last project I wrote was in C++, and that was just such a pain for testing. cppunit is alright, but C++ code is much more resistant to change than say Java or Python
04:19:22 <Jerub> And when I work with anyone else (at work) I have to bear in mind, I'm going to get zero cooperation testwise, and my code could get altered at any time.
04:19:31 <shapr> in general, web apps are all about input & search of records in a database
04:19:42 <shapr> jml: yah, XP is all about speed of change.
04:19:43 <jml> shapr: I bully everyone I work with into using version control of some sort :)
04:19:54 <shapr> jml: I'm impressed, I've tried that without much success.
04:20:03 <shapr> Jerub: that muchly sucks
04:20:14 <Jerub> shapr: food chain, I tie with the plankton, but I've got the most formal computer science training.
04:20:19 <jml> shapr: .. it helps if you're the one who sets up the dev servers, build scripts etc
04:20:25 <shapr> Jerub: I have zero training, but I'm the biggest fish :-)
04:20:25 <Jerub> I use RCS where I see fit.
04:20:37 <Jerub> shapr: pfft, you've read the right books.
04:20:42 <shapr> jml: yah, being alpha geek helps :-)
04:20:47 <shapr> Jerub: some of them at least ;)
04:21:03 <jml> shapr: lol.. I've never thought about it like that 
04:21:03 <Jerub> shapr: My 'Boss' (I have 2, they share me) has a primary school teaching degree.
04:21:18 <shapr> Jerub: sounds like a cool boss
04:21:41 <shapr> I'm alpha geek, but I'm not willing to just lay down the law and force people to work my way.
04:21:44 <Jerub> yeah, until he gives you a specifciatino, which involves OO stuff, which should be shreded.
04:21:48 <Jerub> i.e.
04:22:12 <Jerub> Class A controls class B and C, C controls D, E (which controls F), and G.
04:22:24 <shapr> oboy
04:22:52 <Jerub> Class A will have to access F, so C is going to extend A so you don't have to $this->Cinstance->Einstance->Finstance.
04:23:06 <Jerub> just $this->Einstance->Finstance
04:23:11 <Jerub> or somethjing equally CRAP.
04:23:14 <Jerub> goddamn.
04:23:30 <Jerub> I got out from under that project and I'm doing some work with my other boss for the moment
04:23:48 <Jerub> pardon my php
04:24:19 * shapr laughs
04:24:34 <shapr> Jerub: since it's your project, can you persuade him to let you do it your way?
04:24:41 <shapr> since you're the *tech* guy?
04:24:49 <Jerub> shapr: its not my project.
04:24:55 <shapr> oh
04:25:02 <shapr> you get to be code monkey?
04:25:05 <Jerub> shapr: I'm not the '*tech*' guy, I'm just another programmer, and a casual at that.
04:25:22 <Jerub> I work around uni.
04:25:32 <Jerub> we're all programmers.
04:25:43 <jml> yes, my boss thinks extreme programming == pair programming and no process.
04:25:55 <jml> he thinks pair programming == watching me type while he dictates :)
04:25:57 <Jerub> jml: that sucks.
04:26:07 <shapr> ouch
04:26:19 <Jerub> 50% of my programming is code monkey coding.
04:26:19 <jml> needless to say, I avoid working with him on projects.
04:26:26 <shapr> I can see why.
04:26:43 <Jerub> 45% is me fixing other peoples crap and making it work with new specifications. 
04:26:45 <jml> also, he's from another generation, and I don't think really understands OO.
04:27:36 <Jerub> the remaining 5% is coding where I get a generalised spec, get told 'do it', and I do the most productive code I've ever done.
04:27:52 <shapr> yah, I like those setups
04:28:07 <shapr> I fell into my web programming job.
04:28:13 <Jerub> I got a 'talking to' when I managed to complete a large system even I predicted would take 3 weeks in 4 days. After spending 6 weeks on a project that should have taken 3.
04:28:32 <shapr> Jerub: eh?
04:28:38 <Jerub> the difference? I didn't have to work with other peoples crap.
04:28:46 <Jerub> they wanted to know why I was being so unproductive at other times.
04:28:50 * shapr laughs
04:28:59 <Jerub> I was being seriously unproductive.
04:29:10 <shapr> I'm having similar problems with some j2ee stuff right now.
04:29:23 <Jerub> then they gave me something fun, and I nailed it.
04:29:42 <shapr> my idea of how to best solve the problems is so different that I can't figure out how to integrate the code that was written before I got the project.
04:30:21 <Jerub> shapr: my gut reaction is to toss their code and write your own to replace it.
04:30:26 <Jerub> I've not acted on that before.
04:30:27 <shapr> yah, mine too
04:30:31 <shapr> I have.
04:30:39 <Jerub> I've always had that reaction validated after project completion
04:30:50 <jml> mine is to refactor mercilessly. rewrites tend to be a bit of a pain
04:31:21 <jml> heh, while we're swapping horror stories ....
04:31:24 <shapr> yah, but refactoring assumes unit tests
04:31:31 <shapr> yah, horror stories :-)
04:31:44 --- topic: set to 'GHC 5.04 released http://www.haskell.org/ghc/download_ghc_504.html || http://icfp2002.cs.brown.edu/ - looking for team members for a #haskell ICFP contest entry, more info on http://purl.org/wiki/haskell/IcfpContest || Welcome to Haskellers Anonymous || share your horror stories here' by shapr
04:31:53 <Jerub> ($foo[$bar[$i][0]][$j]) <-- not even beginning to describe some of the evil I've seen.
04:32:05 <jml> me & a colleague (who's really good) sat down and designed a component for a system that was already overdue.
04:32:31 <jml> we said it'd take 4 weeks, and that would leverage our existing framework in the project (exceptions, db layers etc)
04:32:51 <shapr> hi buggs
04:32:55 <jml> the reaction? 'What? That's too long. I'll do it'
04:32:57 <buggs> hi shapr
04:33:36 <jml> So, the would-be hero copies & pastes code from an old project and proceeds to modify. Ignores existing framework.
04:33:55 <jml> It's been two weeks, he's had help & they are still coding.
04:34:43 <jml> our initial estimate was padded for testing etc.
04:34:56 <shapr> uh oh
04:35:06 * Jerub laughs
04:35:13 * shapr grins
04:35:15 <Jerub> I can only laugh in those situations.
04:35:23 <shapr> yah, anything else is too painful.
04:35:30 <Jerub> and hope someone other than myself becomes just that little more expendable.
04:35:37 * shapr laughs
04:35:51 <jml> well, my colleague, who is still on the project, regularly fixes mem leaks etc behind this guys back
04:37:10 <jml> anyway, I need to finish this script.
04:37:50 <Jerub> shapr: what country are you in?
04:38:30 <shapr> finland
04:38:43 <shapr> born in Selma, Alabama though
04:38:52 <shapr> what about you guys?
04:39:15 <jml> I am Australian. Currently living in Canberra. Home in Hobart.
04:39:23 <Jerub> I'm in brisbane.
04:39:34 <shapr> nifty :-)
04:39:44 <Jerub> Born in india, raised in hong kong, my parents are austrailan
04:39:50 <shapr> really?
04:40:04 <shapr> you were born in india?
04:40:08 <shapr> do you speak mandarin?
04:40:15 <jml> cantonese, shapr :)
04:40:32 <Jerub> actually, my mandarin is better than my cantonese.
04:40:35 <shapr> oh
04:40:46 <shapr> doesn't cantonese have twelve tones, and mandarin four?
04:40:52 <jml> Jerub: how does that work?
04:40:57 <Jerub> we learnt mandarin in school.
04:41:05 <Jerub> shapr: yeap.
04:41:06 <shapr> wow, nifty
04:41:13 <shapr> I wish I could speak some mandarin
04:41:24 <jml> ni-hao
04:41:31 <shapr> I can say that, but not much more :-)
04:41:37 * jml went to Shanghai recently 
04:41:41 <Jerub> wo shi hen hao, ni ne ?
04:42:05 <shapr> uhh
04:42:12 <Jerub> I've gotta say tho, I was bottom of the class.
04:42:18 <Jerub> I got tutoring I was so bad.
04:42:21 <jml> errr... me Australia. Sydney. Olympics. I'll have more beer please. xie xie
04:42:30 <shapr> hah
04:43:17 <jml>  definitely want to learn mandarin.. a shame its so hard.
04:43:48 <Jerub> msot spoken language in the world.
04:44:08 <Jerub> and its something to learn if you want to save millions as a multinational corperation ;)
04:44:13 <shapr> yah, really
04:44:27 <Jerub> read an article recently about sourcing data entry to china.
04:44:45 <Jerub> s/about/about out/
04:45:14 <jml> most spoken in terms of ppl, not nations
04:45:31 <Jerub> forms scanned in sydney, emailed to china, double entered for $1/hour (as opposed to 13.5$/hour), then results emailed back.
04:47:52 <Jerub> oh well, I'm going to bed.
04:48:03 <Jerub> jml: you don't work for the ato do you?
04:48:56 <shapr> g'night Jerub  :-)
04:49:07 <shapr> nice to hear you're learning Haskell, I hope to see you around here.
04:49:12 <jml> Jerub: no, at the moment, I am working in centrelink offices
04:49:37 <jml> Jerub: but they are not my employer, nor even the company I am contracted out to.
04:50:28 <Jerub> shapr: #haskell made my autojoin list :)
04:50:31 <shapr> yay!
04:50:33 <Jerub> jml: evil evil evil.
04:50:40 <Jerub> centrelink computer systems are horrid.t
04:50:41 <jml> Jerub: yep.
04:50:57 <jml> I know. :( 
04:51:12 <shapr> I hope China picks up on the Linux meme, I bet there are some brilliant people hiding in that country.
04:51:16 <Jerub> they cut off my payments because I hadn't provided the TFN of my wife. but she's given my TFN to them, gets payments too, and our accounts are linked.
04:51:31 <Jerub> shapr: don't wish too hard, they get paid 10% of you.
04:51:57 <Jerub> sigh.
04:52:25 <shapr> TFN?
04:52:33 <Jerub> shapr: tax file number
04:52:33 <shapr> social security number in .au?
04:52:35 <shapr> ah
04:52:53 <Jerub> != ssn, TFN is needed so the ATO can track income tax.
04:53:15 <Jerub> Its possible to get through life without one, but you pay the max rate of tax ;)
04:53:30 <Jerub> ATO == austrlaian tax office.
04:53:42 <jml> Jerub: actually, you can reclaim that tax I think
04:53:50 <jml> or at least you could under pre-GST laws
04:53:55 <Jerub> jml: you need a TFN to reclaim it.
04:54:13 <jml> Jerub: oh, I didn't know.
04:54:28 * jml notes that ATO is a much more sensible name than IRS
04:54:30 <Jerub> jml: You can get through life only using your TFN in conjunction with the ATO :)
04:55:08 <Jerub> jml: I heard something proposed recently. A mvoe to give everyone tax refunds of a set amount, because it costs more to process tax returns than its worth.
04:55:32 <Jerub> for the ATO that is.
04:55:51 <jml> Jerub: i sincerely doubt it'll happen.
04:56:40 <Jerub> jml: safe bet.
04:56:43 <Jerub> okay, g'ngiht
04:56:56 <jml> g'night
04:57:14 * shapr waves
04:57:36 * shapr bounces
04:57:47 <shapr> jml: did you learn Haskell in college?
04:57:54 <jml> shapr: yeah, at uni
04:58:01 <shapr> which uni?
04:58:08 <jml> University of Tasmania.
04:58:15 <shapr> cool
04:58:25 <shapr> sounds like several unis in .au teach Haskell.
04:58:59 <jml> yeah, wouldn't surprise me ... it's pretty schweet, and not proprietary or anything so its cheaper.
04:59:26 <jml> also, it seems all the researcher types prefer it.
04:59:40 <shapr> yah
04:59:51 <shapr> I'm surprised it's not used in commercial software more
04:59:52 <jml> I still wouldn't mind doing something in lisp though.
04:59:53 <Heffalump> a lot of researchers use ML, though
05:00:21 <jml> Heffalump: that's true.
05:01:00 <shapr> I like Scheme, but most of lisp doesn't really appeal to me.
05:01:11 <shapr> it seems almost right, but not quite there.
05:01:39 <shapr> Haskell seems almost right.
05:02:02 <shapr> I still can't think in Haskell yet though.
05:04:03 <shapr> jml: written any Haskell recently?
05:04:32 <jml> shapr: written_haskell :: Boolean
05:04:38 <jml> written_haskell = false
05:04:42 <shapr> heh
05:04:43 <shapr> ok :-)
05:04:51 * jml knows his case is screwed
05:05:10 <shapr> False ?
05:05:10 <jml> shapr: i don't really know what to use it for.
05:05:24 <jml> dunno. not terribly important.
05:06:00 <jml> a lot of what I'm doing is gluing other bits of technology together, so haskell isn't that useful.
05:06:49 <shapr> how could it be more useful to you?
05:07:36 <shapr> what bits do you glue together?
05:07:40 <jml> shapr: I don't know. easier gui & db maybe
05:07:48 <shapr> hm
05:08:07 <shapr> I'd like to see HaskellDB support more backends
05:08:10 <jml> shapr: ummm.. well I'm working on Java bindings for subversion so I can use subversion in my favourite text editor ...
05:08:21 <shapr> ah, you've tried subversion?
05:08:41 <jml> shapr: I'm using it for a couple of projects actually
05:08:47 <jml> shapr: it's really nice.
05:08:59 <shapr> better than cvs?
05:09:21 <jml> hell yeah
05:09:30 <shapr> it became a deb recently
05:09:33 <shapr> I'll try it.
05:09:53 <jml> shapr: it's one of those things where the phrase 'next generation' might be justified.
05:10:00 <shapr> wow, high praise
05:10:17 <jml> shapr: checkout the website, http://subversion.tigris.org
05:10:31 <jml> it makes so much more sense than cvs.
05:11:00 <shapr> does it have emacs integration?
05:11:08 <shapr> I've been using emacs + cvs forever
05:11:20 <jml> shapr: yeah it does.
05:11:26 <shapr> awesome
05:11:35 <jml> shapr: a couple of hard core emacs users are on the dev team.
05:11:41 <shapr> excellent =)
05:11:46 * jml stopped using emacs a while ago.
05:12:20 <shapr> what do you use now?
05:12:31 <jml> use jEdit now. my street cred has probably suffered, but I much prefer it.
05:12:44 <jml> esp given that I have to use windows machines a lot of the time.
05:12:46 <shapr> whatever works best :-)
05:13:56 <jml> aahh, it's a personal thing. but if you are going to pair program seriously, then you need an editor that many ppl can be comfortable with
05:14:26 <shapr> yah
05:14:37 <shapr> I'm using a kinesis keyboard, with similar restrictions
05:14:45 <jml> alot of emacs configs, (my old one included), are  personally tailored enough to make that hard
05:14:47 <jml> kinesis?
05:15:24 <jml> jedit has standard windows key bindings for standard things (C-n for new, C-o for open etc)
05:15:46 <jml> of course, these are all fully configurable :) ... I am an ex-emacs user after all:)
05:18:54 <jml> anyway, I must go to sleep. Have a pleasant Sunday. 
05:20:08 <jml> good talking to you shapr.. if ever I'm in Finland, I'll look you up :)
05:27:57 <shapr> jml: g'night :-)
05:37:08 * shapr fights the type system
05:46:02 <shapr> modules aren't first class in Haskell
05:46:10 <shapr> has that changed in 5.04?
05:51:01 <Heffalump> I doubt it
05:51:08 <Heffalump> it's quite hard to make a language have first class modules
05:51:21 <shapr> oh
05:51:21 <shapr> ok
05:51:23 <Igloo> SPJ wrote a paper on it I think
05:52:15 <shapr> is FiniteMap the list of tuples that I would call a dictionary?
05:52:20 <shapr> key -> value pairs?
05:52:36 <Igloo> Yes
05:52:44 <shapr> ok, thanks.
05:53:01 <Igloo> Well, FiniteMap probably uses a tree internally
05:53:19 <shapr> does it enforce unique keys?
05:53:40 <shapr> I can probably the docs now that I know its name.
05:53:57 <Igloo> Depends which implementatino you are using
05:54:28 <Igloo> But you should probably be using unique keys, possibly with overwriting, anyway
05:57:56 <shapr> yah, I'm trying to emulate a Python dictionary.
06:30:07 <shapr> hi loom2, what's up?
06:54:57 <loom2> snapr: finishing up my c++ project, uopefully in time.
06:55:25 <loom2> shapr: i'll leave for vacation in four hours.
07:03:02 <shapr> yay vacation!
07:14:04 <jewel> So at lsat I have some time to do some practicing
07:20:55 <shapr> jewel: what do you want to practice with?
07:21:06 <jewel> mmm, no idea right now
07:21:13 <jewel> ahve you done any?
07:21:24 <shapr> nope, I haven't.
07:21:35 <shapr> do you remember the Pseudonym advice?
07:21:47 <jewel> no
07:22:26 <shapr> he said a good ICFP program strategy was to roughly solve a problem, and then improve that solution in iterations
07:22:36 <shapr> and kill the process after a certain time limit
07:22:43 <jewel> oh yes
07:22:53 <jewel> that's typical of these types of competitions
07:23:05 <jewel> where you're unlikely to find an exact solution
07:23:06 <shapr> yah, I've been thinking about that.
07:23:55 <shapr> I have to mow the lawn now, but I'll be back in an hour or two
07:24:01 <jewel> ok
07:24:05 <shapr> Pseudonym suggested implmenting this method:
07:24:10 <shapr> http://www.sosmath.com/calculus/diff/der07/der07.html
07:24:18 <shapr> he said it fit the type of problems
07:24:25 <shapr> bbl
07:47:18 <loom2> shapr: have you seen pesco lately?
07:47:43 <jewel> shapr is moving his lawn
07:47:58 <jewel> What can I use to a get millisecond clock tick?
07:48:20 <loom2> in haskell? no idea. check the ghc docs.
07:48:50 <loom2> or whatever compiler/interpreter you use.
07:58:19 <jewel> how I print out the result of epochTime ?
08:02:06 <jewel> Erm, how do I convert an integer into a string?
08:05:08 <dblack> jewel: int.to_s
08:05:28 <dblack> oh sorry
08:05:31 <dblack> wrong channel
08:05:33 <dblack> :-)
08:08:18 <jewel> hehe
08:08:50 <dblack> jewel: but if you ever need to do it in Ruby, that's how :-)
08:41:23 <loom2> jewel: show(that_integer) if you didn't figure it out already :)
08:55:48 <jewel> I knew about show
08:55:57 <jewel> but didn't have things in the right combination
09:53:03 <hennker> hiho
09:56:38 <hennker> how do i do network in haskell? do i need additional libraries for this?
09:57:13 <jewel> Are you using ghc?
09:58:36 <hennker> i just saw a wiki entry regarding ghc, no, atm i use hugs. but i think ghc would be needed for the program i wish to make, because of speed issues
09:58:55 <hennker> so, for ghc there exist a network lib?
09:59:38 <hennker> the link in the wiki is bad
10:10:45 <jewel> ghc has a networking API in the libraries
10:10:50 <jewel> I think hugs does too
10:24:38 <hennker> thanks
11:59:09 * shapr returns
12:04:57 <shapr> jewel: y0
12:10:18 * shapr bounces
12:10:19 <shapr> w00!
12:10:21 <shapr> it's evening!
12:10:28 <shapr> I mowed the grass well.
13:43:06 <shapr> y0
13:53:04 * shapr reads meijer's monadic parsing tutorial
13:53:06 <shapr> mmmm
13:53:13 <shapr> Igloo: excellent recommendation
13:53:45 <shapr> I've already realized that the easiest visualization of Banana stuff is with nested tuples, and this paper immediately says monads get around that.
13:55:21 --- topic: set to 'GHC 5.04 released http://www.haskell.org/ghc/download_ghc_504.html || http://icfp2002.cs.brown.edu/ - looking for team members for a #haskell ICFP contest entry, more info on http://purl.org/wiki/haskell/IcfpContest' by shapr
13:55:43 --- topic: set to 'GHC 5.04 released http://www.haskell.org/ghc/download_ghc_504.html || looking for team members for a #haskell ICFP contest entry, more info on http://purl.org/wiki/haskell/IcfpContest' by shapr
13:58:28 <shapr> hey, this is great.
13:58:43 <shapr> a singleton list denotes failure... this could clean up my Banana parsing very much
13:59:22 <shapr> wow
14:03:33 <Heffalump> a *singleton* list?
14:03:45 <shapr> empty list
14:03:59 <Heffalump> yeah :-)
14:04:04 <shapr> er, wait
14:04:07 <shapr> lemme read that again
14:04:14 <shapr> right
14:04:17 <shapr> empty list is failure
14:04:22 <shapr> singleton list is success
14:04:28 <shapr> that's an interesting way of looking it.
14:05:01 <Heffalump> it's like using the Maybe monad
14:05:18 <Heffalump> except that if you use lazy lists you get backtracking for free too
14:05:28 * shapr blinks cluelessy
14:05:31 <shapr> uh
14:05:37 <shapr> maybe I'll understand that after I finish this paper.
14:06:09 <shapr> I've run across the nested tuple problem, but I couldn't see a way out of it.
14:51:00 <rjljr> Greetings!
14:55:07 <rjljr> \list
15:01:26 <rjljr> Anyone awake here?
15:04:24 <rjljr> \me wonders
15:04:28 * rjljr wonders
15:05:16 <rjljr> hello dark
15:05:27 <dark> Greetings
15:07:10 <rjljr> see you later, going to eat :) 
16:01:24 <shapr> bonjour Pseudonym
16:33:39 <Pseudonym> G'day.
16:35:49 <Pseudonym> Anyone tried the CVS repository yet?
16:37:15 <shapr> I haven't yet. mostly because I forget my password.
16:37:21 * Pseudonym laughs
16:37:23 * shapr feels less than brilliant.
16:37:40 <Pseudonym> It doesn't need to be secure, so pick one that is easy to remember.
16:37:55 <shapr> :-)
16:38:10 <Pseudonym> The main reason why I have passwords on is so that I know who has an account and who hasn't.
16:38:19 <Pseudonym> Well obviously I don't know _everyone_ who hasn't.
16:38:28 <shapr> heh
16:38:29 <Pseudonym> That number is close to 6 billion at last count.
16:38:35 <shapr> and growing fast
16:38:39 <Pseudonym> Indeed.
16:40:34 <shapr> ok, I sent you another hash
16:41:42 <Pseudonym> Try now.
16:44:48 <shapr> I'm getting connection reset by peer
16:45:09 <Pseudonym> Any other messages?
16:45:31 <shapr> oh this time it worked
16:45:46 <shapr> cool
16:46:01 <Pseudonym> Suggestion:
16:46:09 <Pseudonym> If you want to check anything in, make a new directory.
16:46:29 <Pseudonym> We might want to make some rules on how the repository is laid out, actually.
16:46:57 <Pseudonym> My first suggestion is to make a "support" directory and check in a stable copy of HUnit and QuickCheck.
16:46:59 <shapr> sounds good, any suggestions?
16:47:04 <shapr> excellent idea
16:47:16 <Pseudonym> So we don't have problems with possibly incompatible versions.
16:47:59 <Pseudonym> Another suggestion is once we've come up with rules (or even before we've come up with rules), make a README.CVS file which lists the rules so far.
16:48:17 <Pseudonym> First, though, try modifying the SANDBOX file to make sure you can actually commit. :-)
16:48:28 <shapr> I think I already have.
16:49:19 <shapr> seems to have worked.
16:49:45 <shapr> I'll put the testing modules in tomorrow. It's time for me to sleep.
16:49:53 <shapr> thanks for changing my password :-)
16:50:00 <Pseudonym> Not a problem.  Enjoy.
17:41:49 * Chilli is back (gone 64:36:13)
19:17:12 <Pseudonym> Would someone care to proofread soemthing I just wrote?
19:17:43 <Pseudonym> http://haskell.org/wiki/wiki?TyingTheKnot
19:17:53 <Pseudonym> (I didn't write the first half.)
22:21:36 <Pseudonym> Reminder to all present: If you want to be on the ICFP team, join up to the mailing list.  http://alicorna.net/mailman/listinfo/icfp-team
