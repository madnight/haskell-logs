00:02:17 <hornby> sans instructions :(
00:02:44 <hornby> can I set a HASKELLPATH or something where all my compilers and intepreters will look for imports? 
00:18:36 <hornby> arg, nothing in the docs
00:21:28 * shapr boings
00:21:33 <shapr> hornby: does it work?
00:22:28 <hornby> shapr: um
00:22:35 <hornby> shapr: I'm trying to figure out where to stick HUnit. 
00:23:02 <hornby> shapr: something like PYTHONPATH, but for Haskell?
00:23:06 <shapr> I have it in the same directory
00:23:11 <shapr> yah there is
00:23:16 <shapr> but I don't remember the details
00:23:24 <shapr> and I'm at work, away from my haskell setup
00:23:27 <hornby> I've been combing the docs, but apparenyly I'm no good at it
00:23:39 <hornby> no biggie, i'll just put it in the same dir for now :)
00:23:44 <shapr> if you put all the *.hs and *.lhs files into the same dir
00:23:45 <shapr> right
00:23:54 <shapr> it's cheesy, but it'll work
00:23:57 <hornby> i was just looking for a cleaner solution :)
00:24:14 <shapr> I'm 95% sure there is one, I just don't remember it
00:24:23 <hornby> Yeah, I'll figure it out later :)
00:25:52 <hornby> hrm
00:25:57 <hornby> can't find module `Util'
00:25:58 <shapr> find it?
00:26:05 <shapr> try :set -package data
00:26:10 <shapr> ?
00:26:19 <hornby> ghci -package data Test_Banana.hs
00:26:27 <shapr> oh, that might be Util.hs from xbill
00:26:49 <hornby> oh, whats that?
00:26:55 <shapr> lemme get the url
00:27:08 <shapr> http://holomorphy.com/~wli/scripts/Util.hs
00:27:56 <hornby> mm looks complicated
00:28:54 * hornby watches it ... work ? ... a warning ... an illegal instance declaration
00:28:57 <hornby> doh
00:29:47 <hornby> line 69 of Banana.hs breaks something, apparently. 
00:30:37 <shapr> hm, you might need -fglasgow-exts
00:30:43 <hornby> Ah
00:31:03 <hornby> that should be standard
00:31:14 <hornby> yup that worked
00:31:18 <shapr> yay!
00:32:36 <shapr> hornby: so, do all the unit tests pass for you too?
00:33:41 <hornby> so yup :)
00:33:44 <hornby> er
00:33:53 <hornby> Cases: 15  Tried: 12  Errors: 0  Failures: 0
00:33:58 <hornby> *** Exception: Banana.hs:103: Non-exhaustive patterns in function dispatchDecode
00:34:03 <hornby> Wait, I guess not :)
00:34:45 <shapr> I get that too
00:34:48 <shapr> but all the tests pass :)
00:34:59 <hornby> But ... Cases: 15   Tried: 12
00:35:03 <shapr> er
00:35:05 <shapr> that's weird
00:35:09 <hornby> Yours is 15/15?
00:35:13 <shapr> I think so
00:36:10 <shapr> I thought it was, but I might have been too tired.
00:49:57 <hornby> hm
00:50:54 <shapr> found something?
00:53:18 <hornby> no
00:53:39 <hornby> do you work at work? ;)
00:54:45 <hornby> hrm, just thinking that is a strange exception
00:54:50 <hornby> Non-exhaustive patterns in function dispatchDecode
00:55:07 <shapr> yes, I do work at work :-)
00:55:12 <hornby> but the big otherwise should catch everything
00:55:26 <shapr> so what's it's talking about?
00:55:53 <hornby> Beats me
01:05:00 <hornby> I don't like this exception. It shouldn't happen. If you left off the otherwise, it would make sense. But the otherwise should catch all :(
01:06:40 <hornby> debugging sucks
01:07:54 <shapr> maybe if I put it into hugs
01:07:58 <shapr> I'd get a better error message
01:09:23 <hornby> hugs have the glasgow exts?
01:09:45 <shapr> nope
01:09:55 <hornby> so will it work?
01:10:00 <shapr> not all of it
01:10:06 <shapr> thing is, I don't know which parts won't work
01:12:24 <hornby> "non-exhaustive patterns" +haskell doesn't get much in google
01:23:54 * hornby wonders if the error is in the test
01:36:49 <hornby> HA!
01:49:39 <hornby> shapr: found the test that raises the exception
01:49:57 <hornby> shapr: testListDecode
02:08:15 <shapr> hm
02:08:17 <shapr> that's odd
02:24:33 <shapr> hornby: any idea why that raises the exception?
02:37:52 <hornby> nope :)
02:38:18 <shapr> thanks for finding which test raises the exception
02:38:23 <shapr> that'll save me some time when I get home
02:38:46 <hornby> wish I could help more
02:39:40 <shapr> hey, any contribution is good :-)
02:40:04 <hornby> I might poke at it some more, we'll see :)
02:40:52 <hornby> though its confusing
02:41:39 <shapr> any questions I can help with?
02:41:54 <shapr> if you need code reference, check out test_banana.py and banana.py from twisted.spread
02:42:08 * xbill hrms
02:42:19 <shapr> hi xbill, how the popcorn treating you?
02:42:50 <hornby> shapr: If there are, I'll ask. I'm just reading the HUnit docs :)
02:43:01 <shapr> hornby: yah, that's a good starting point.
02:47:06 <hornby> where'd ya get the encList? 
02:47:27 <shapr> I imported twisted.spread
02:49:03 <hornby> nod
02:49:03 <shapr> and manually typed in part of a unit test to set up the encoder
02:49:03 <shapr> then I took the encoded value and pasted it into Test_Banana.hs as a string.
02:49:03 <shapr> that's how I got the string values at the bottom of the file
02:49:55 <hornby> dir(twisted.spread) doesn't show much
02:50:32 <shapr> I looked at the setUp method in test_banana.py
02:50:44 <hornby> mm, thats what I'm doing now
02:50:51 <shapr> unit tests are handy that way
02:50:54 <shapr> they give usage examlpse
02:50:57 <shapr> "examples"
02:51:02 <hornby> :)
02:57:03 <hornby> muahha
02:57:28 <shapr> ?
02:57:51 <hornby> oh, no big result, just make this little thing work
03:12:58 <hornby> whoah
03:13:10 <hornby> it gave me a list like: 
03:13:25 <hornby> "E\x82[1, 2, [3, 4] ... ]
03:13:31 <hornby> Which doesn't seem very encoded
03:13:54 <shapr> that's the encoded string you got back from banana.py?
03:13:56 <hornby> ya
03:14:01 <shapr> hm, weird.
03:14:05 <hornby> which makes me think I set it up wrong
03:14:13 <hornby> But I thought I followed the test pretty closely
03:14:17 <shapr> \x82 is list I think
03:14:25 <hornby> ah
03:14:54 <hornby> can't be
03:15:00 <hornby> ah, list is string? 
03:15:12 <hornby> oh ..
03:15:30 <shapr> huh?
03:15:32 <hornby> heh, silly me
03:16:01 <hornby> I sent sendEncoded a string
03:16:10 <shapr> that sounds right
03:16:16 <shapr> then you look at io.getvalue()
03:16:19 <hornby> ya
03:16:36 <shapr> if you sent that list as a string, then it is correct
03:16:37 <hornby>  enc.sendEncoded([1, 2, [3, 4] ... ]) gives me something like yours
03:16:48 <shapr> did you put in the three dots?
03:16:57 <hornby> enc.sendEncoded("""[1, 2, [3, 4], ... ]""") gives me something else :)
03:17:01 <hornby> of course not :)
03:17:06 <shapr> ok, just checking :-)
03:17:13 <shapr> I was going to be very confused if you had
03:17:15 <hornby> heh
03:18:05 <hornby> Strange there is a \n in the encoded string
03:20:10 <shapr> does it decode correctly with banana.py?
03:20:18 <hornby> ah, good question 
03:20:49 <hornby> lemme figure out how to dec it :)
03:20:53 <shapr> awright
03:21:20 <hornby> hrm, apparenly banana doesn't decode anything? huh? 
03:21:29 <hornby> the test i mean
03:21:43 <shapr> it does
03:23:45 <hornby> hey, your test list is different from theirs. 
03:23:56 <hornby> theirs ends with an empty list, not [10]
03:24:04 <hornby> [1, 2, [3, 4], [30.5, 40.2], 5, ["six", "seven", ["eight", 9]], [10], []]
03:36:25 <shapr> does that make a difference?
03:37:04 <shapr> hornby: a better test would be a network loopback test where each of the implementations can be tested against the reference implementation
03:37:23 <shapr> no one has done that yet though
03:37:25 <hornby> shapr: that'd be cool :)
03:37:34 <shapr> yah it would
03:38:07 <shapr> how would you do it?
03:38:17 <hornby> poorly
03:38:21 <hornby> :) 
03:38:30 <shapr> hah
03:38:39 <hornby> Um ... well would you do it within twisted? 
03:38:50 <shapr> that how I would do it, yes
03:39:14 <shapr> but that doesn't cover any details
03:39:18 <hornby> Yah, I'd imagine that'd be the elegant way .. but  :) 
03:39:36 <hornby> I don't know twisted well enough
03:39:36 <shapr> what about something like the printer page tester?
03:39:43 <shapr> I don't either.
03:40:10 <shapr> what about a standard pattern like the printer test?
03:40:16 <hornby> you'd need to send data (encoded strings) to each implementation
03:40:31 <hornby> shapr: Well yeah, but how do you move the data? 
03:40:36 <shapr> via banana
03:40:46 <hornby> you don't need PB or anything? 
03:40:49 <shapr> I dunno
03:40:51 <shapr> do you?
03:41:08 <shapr> well, not for a raw tcp connection
03:41:16 <hornby> no :) I have no idea. :) Well true that
03:41:34 <shapr> so the lowest level of a test would be to send a banana encoded test pattern across a raw tcp connect
03:41:52 <hornby> why that seems like overkill even. why do you really need a tcp connection? why not just have everything on one machine?
03:42:07 <shapr> that sounds good to
03:42:10 <shapr> er "too"
03:42:18 <hornby> simpler. 
03:42:28 <hornby> a shell script? 
03:42:40 <shapr> the nice thing about using a tcp connection is that you could have the conformance test running on test.twistedmatrix.com
03:42:52 <hornby> whats test.tm.com?
03:42:58 <shapr> I just made it up :-)
03:43:03 <hornby> oh :) 
03:43:23 <hornby> You could query test.tm.com, have it send you random tests, you send replies, it tell you if you're correct
03:43:31 <shapr> right!
03:43:57 <shapr> since twisted is all about networks, it seems to fit the spirit
03:44:07 <hornby> pretty simple .. it'd be a simple twisted server on test.tm.com
03:44:14 <hornby> but you'd have to write a "client" Haskell program, for example
03:44:16 <shapr> yup
03:44:27 <shapr> and a client elisp, java, etc program
03:45:06 <hornby> unless you could use twisted ... have it send queries, accept strings ... and pass those down somehow
03:45:06 <shapr> like what?
03:45:06 <Heffalump> ooh, GHC 5.04
03:45:06 <hornby> which is sort of the idea behind spread in the first place, no ? :)
03:45:09 <shapr> Heffalump: out today?
03:45:14 <shapr> hornby: yup
03:47:09 <Heffalump> appears to be
03:47:09 <hornby> but you'd have to fully and flawless implement spread to test it, which seems .... insane
03:47:09 <shapr> that's why I think a raw tcp connection that does banana encoding is step one
03:47:09 <hornby> yeah, and a simple tcp connection that sends and receives strings is simple, even in Haskell? :)
03:47:09 <shapr> hornby: yup
03:47:14 <hornby> I'm not sure if its the most efficient way to test, but it might be fun
03:47:14 <shapr> ghc 5.04 isn't on the front page of haskell.org
03:47:34 <shapr> hornby: it's the smallest amount of remotely testable work I can think of
03:47:44 <shapr> unless you can make the test more finely grained
03:48:01 <hornby> how so?
03:48:06 <shapr> testZero = return bytes sent from the test.tm.com server
03:48:32 <shapr> testOne = return decoded string from sent banana encoded string
03:48:42 <shapr> testTwo = return decoded ... from test.tm.com
03:48:43 <shapr> etc
03:49:26 <shapr> what do you think?
03:49:39 <hornby> could be cool, you going to do it? :)
03:49:56 <shapr> I might, but I'd need some help ;-)
03:50:05 <shapr> yay, ghc 5.04: http://www.haskell.org/ghc/download_ghc_504.html
03:50:11 <hornby> I could be tempted to work on such a thing
03:50:28 --- topic: set to 'GHC 5.04 released http://www.haskell.org/ghc/download_ghc_504.html || http://icfp2002.cs.brown.edu/ - looking for net accessible cvs and team members for a #haskell ICFP entry (shapr)' by shapr
03:51:03 <shapr> yay, full support for MacOS X
03:51:11 <hornby> cool
03:52:00 <hornby> shapr: have you make Banana.hs decode a list successfully? any list
03:52:36 <shapr> I thought it did :-)
03:54:50 <hornby> I can't seem to make it. But I'll keep trying :)
03:54:50 <hornby> whats $ anyway?
03:54:50 <shapr> it means "bind loosely"
03:54:50 <hornby> for instance? 
03:54:50 <shapr> it's a lot like using parentheses
03:54:50 <Heffalump> $ is function application
03:54:50 <Heffalump> it just binds much more loosely than space
03:54:50 <Heffalump> so you can write foo $ bar $ baz x
03:54:50 <Heffalump> instead of foo (bar (baz x))
03:54:56 <hornby> ah
03:55:02 <shapr> otherwise foo will try to take bar as its first argument
03:55:05 <hornby> so (BananaList $ decodeAll element,rest)
03:55:09 <Heffalump> yep
03:55:18 <hornby> is just (BananaList (decodeAll element,rest))?
03:55:32 <shapr> actually (BananaList (decodeAll element),rest)
03:55:44 <hornby> oh
03:55:45 <Heffalump> what shapr said
03:56:03 <shapr> it means "construct a BananaList type with the result of "decodeAll element"
03:56:22 <hornby> right.
03:56:22 <shapr> "
03:56:31 * shapr fills in the missing quote
03:56:36 <hornby> ya, I understood what it meant, strangely, :)
03:56:49 <hornby> without knowing exactly how it worked. which is freaky. 
03:57:13 <shapr> I haven't quite figured out the similarities/differences tween $ and .
03:59:24 <Heffalump> . has a completely different type
03:59:37 <shapr> sometimes I can use . in place of $
03:59:39 <Heffalump> you could write my example above as (foo . bar . baz) x 
03:59:42 <hornby> heh, why "-- massive suckage" above decodeAll?
04:00:03 <shapr> hornby: cuz it's way ugly :-)
04:00:30 <hornby> oh. i thought maybe it was cuz it didn't work :) I think it looks cool :)
04:01:01 <shapr> It looks confusing and unclear to me
04:01:08 <shapr> decodeAll :: String -> [BananaType]
04:01:08 <shapr> decodeAll string = let result = decode string in
04:01:08 <shapr>                        if (snd result) == "" then [fst result] else (fst result) : (decodeAll (snd result))
04:01:20 <hornby> I thought it was pretty straightforward
04:01:32 <shapr> it also doesn't handle having crap at the end of the string
04:01:43 <hornby> oh, like what?
04:02:02 <shapr> for example, if you add some random chars to the end of an encoded string, it'll crap out
04:02:14 <shapr> because it assumes that the leftover string will be empty at some point
04:02:29 <shapr> I haven't figured out how parser combinators work yet, otherwise I'd use them.
04:02:31 <hornby> if (only one element) then [fst result] else (fst result) and so on
04:03:09 <hornby> ah
04:03:22 <shapr> I had to change decode to only decode the next BananaType and then return everything else in the string
04:04:32 <hornby> ahh
04:04:35 <shapr> decodeAll assumes that the string you give it is composed of concatenated BananaTypes, with no extra fluff at th e beginning or end, which sounds a bit fragile to me.
04:04:56 <hornby> shapr: maybe eh. but you can work on error checking later
04:05:02 <shapr> yup, I agree.
04:05:02 * hornby shoots something
04:05:09 <hornby> stupid  Non-exhaustive patterns in function dispatchDecode
04:05:19 <hornby> it just doesn't DO lists
04:05:27 <shapr> I don't understand why :-/
04:05:37 <hornby> did it before?
04:06:00 <hornby> !!
04:06:01 <hornby> wait a sec
04:06:04 <hornby> i ..... 
04:06:06 <hornby> hmmm
04:06:09 <shapr> no, it's always given that message to me
04:06:37 <shapr> it gave me that message even before I added the list test
04:06:47 <hornby> wierd?
04:06:51 <shapr> yes
04:06:53 <shapr> weird
04:06:53 <hornby> AHAHAHAHA!
04:07:03 <shapr> ?
04:07:08 <hornby>  but got: (BananaList [BananaInt 1,BananaInt 2,BananaList [BananaInt 3],BananaInt 4,BananaList [BananaDouble *** Exception: IEEEDouble.hs:48: Non-exhaustive patterns in function mantissaChars
04:07:15 <shapr> ohhh
04:07:17 <shapr> cool!
04:07:20 <shapr> how'd you get that?
04:07:23 <hornby> I threw a \x05 in front of your encList
04:07:29 <shapr> spiffage!
04:07:43 <hornby> Cuz .... well i dunno why
04:07:57 <hornby> it just broke something else though (
04:08:07 <hornby> oh, but I made this work:
04:08:11 <hornby> encList2 = "\x05\x01\x80\x01\x81"
04:08:17 <shapr> cool, I think I know how to fix that message.
04:08:27 <hornby> (BananaList [BananaInt 1],"")
04:08:28 <hornby> right?
04:08:38 <hornby> for a python: [1]
04:08:45 <shapr> looks right to me
04:09:59 <hornby> futher pokage required
04:10:47 <hornby> I rule
04:11:05 <hornby> [1,2,3] - > (BananaList [BananaInt 1,BananaInt 2,BananaInt 3],"")
04:11:10 <shapr> awesome :-)
04:11:12 <hornby> via "\x05\x03\x80\x01\x81\x02\x81\x03\x81"
04:13:33 <shapr> I dunno what it is
04:14:20 <hornby> what about \x07?
04:14:27 <shapr> the structure of a list or string in banana is:  length ++ typeByte ++ content
04:14:40 <shapr> lenght is encoded in base128, and typeByte are always > 128
04:15:50 <shapr> too much netsplits
04:15:50 <hornby> hm
04:16:03 <hornby> ya anoying
04:16:10 <hornby> hrm
04:16:22 <hornby> (BananaList [BananaInt 1,BananaInt 2,BananaList [BananaInt 3],BananaInt 4,BananaList [BananaDouble *** Exception: IEEEDouble.hs:48: Non-exhaustive patterns in function mantissaChars
04:16:32 <shapr> bah, I can fix that when I get home
04:16:37 <hornby> you know how? 
04:16:41 <shapr> yup
04:16:47 <hornby> then I think your problem is solved. :) 
04:16:55 <shapr> if you look at mantissaChars in IEEEDouble, you'll see it has only one case
04:17:03 <hornby> you just need to stick a \x05 on the beginning of everystring
04:17:04 <shapr> for an eight character string
04:17:18 <shapr> there must be something wrong with that
04:17:19 <hornby> er every encoded string
04:17:29 <hornby> mayhap :)
04:18:23 <shapr> hey xbill, your unique name problem is solved by ghc 5.04
04:18:31 <shapr> xbill: http://www.haskell.org/ghc/docs/5.04/html/users_guide/type-extensions.html#LINEAR-IMPLICIT-PARAMETERS
04:19:56 <shapr> hornby: that sounds like a bug in my code
04:20:18 <hornby> shapr: ya, but hopefully an easy one to fix :)
04:27:57 <hornby> shapr: mm. 
04:28:02 <hornby> shapr: you might want to see this
04:28:02 <shapr> ?
04:28:06 <shapr> what is it?
04:28:16 <hornby> (BananaList [BananaInt 1,BananaInt 2,BananaList [BananaInt 3],BananaInt 4,BananaList [BananaInt 30],BananaInt 40,BananaInt 5,BananaList [BananaString "s"],BananaString "seven\STX\128\ENQ.ight\t\129\SOH\128\n\129\NUL\128"],"")
04:28:25 <shapr> whoa suckage
04:28:38 <hornby> nod
04:28:38 <shapr> looks like a major bug
04:29:08 <shapr> can you email or commit those test cases?
04:29:08 <hornby> I can email them to you
04:29:30 <shapr> ok, cool
04:31:09 <hornby> I'll put together a few more
04:31:14 <shapr> excellent :-)
04:31:19 <shapr> thanks for testing Banana.hs, this is a great help
04:31:38 <hornby> np. its fun in a twisted sort of way
04:32:11 <shapr> hah, bad pun
04:32:18 <hornby> :")
04:32:20 <shapr> and funny :)
04:32:51 <hornby> in a twisted sort of way ........... (yuck)
04:32:55 * shapr grins
04:34:16 <hornby> where should I send these?
04:34:25 <shapr> shae-hornby@ScannedInAvian.com
04:34:39 <hornby> ok :)
05:06:37 <shapr> hi ChoJin, what's up?
05:16:11 <ChoJin> too much work :)
06:09:27 <hornby> shapr: I may have found the issue
06:09:35 <hornby> shapr: when closing a list, it closes ALL lists
06:11:42 <hornby> shapr: [1,[2,[3,4]]]<garbage> kind of thing, where it should be [1,[2,[3,4],5],6] say
06:11:42 <hornby> this is my hypothesis. 
06:23:02 <shapr> hm
06:23:09 <shapr> hornby: lemme look at that
06:23:45 <hornby> shapr: the above example doesn't actually work... it raises the exception
06:25:58 * shapr looks back and forth between hornby's example and the list decoder
06:27:36 <hornby> feels like there is something very wrong here
06:27:48 <shapr> I think you've found the center of the problem
06:27:55 <shapr> but I can't figure out where the code is broken
06:28:01 <hornby> somewhere between | x == listChar    = (BananaList $ decodeAll element,rest)
06:28:09 <hornby> and  if (snd result) == "" then [fst result] else (fst result) : (decodeAll (snd result))
06:28:17 <shapr> yah I agree
06:28:23 <shapr> but I'm not sure where exactly
06:28:23 <hornby> but I don't understand the code, honestly. 
06:28:35 <shapr> I'll think about it, thanks for pointing it out
06:28:48 <hornby> are you busy, or can I ask a quick question? 
06:29:02 <shapr> I am busy, and you can still ask
06:29:13 <hornby> :) I'm just wondering about result
06:29:17 <hornby> And where it comes from
06:29:32 <hornby> from decode string right .... but 
06:29:58 <hornby> maybe I don't get where rest goes
06:31:42 <shapr> should be (result :: (BananaType,String))
06:31:42 <hornby> rest being string? 
06:31:42 <shapr> uh
06:31:42 <shapr> if you have a tuple of size two, fst gets the first
06:31:42 <shapr> and snd gets the second
06:31:42 <hornby> right
06:31:46 <hornby> i just don't see how the data flows
06:31:46 <shapr> so snd result should be the remaining string
06:31:57 <shapr> and fst result should be the BananaType
06:32:10 <hornby> Here, I'll just get out a pencil and flow chart the thing to hell
06:32:12 <hornby> Go work :)
06:32:15 <shapr> hah
06:32:22 <shapr> I think you've found the problem btw :-)
06:32:27 <shapr> I just can't see it at the moment
06:32:45 <hornby> well, it'll come
06:32:50 <shapr> cool :-)
06:33:02 * shapr goes back to punishing himself with java 1.4
06:33:04 <hornby> I'll poke some more. I want to fix it before you get off work :)
07:18:48 <hornby> shapr: element = take lengthVal xs
07:18:56 <shapr> ?
07:19:00 <hornby> element = take 4 xs for example
07:19:24 <hornby> what does that take from a string like this :
07:19:25 <shapr> ?
07:19:46 <hornby> \x01\x81\x03\x82\two\x03\x81\x04\x82four
07:19:52 <hornby> (xs is that)
07:20:03 <hornby> \x01\x81\x03\x82? 
07:20:22 <shapr> well, \x01 should mean "length of 1"
07:20:27 <shapr> and \x81 is the type byte
07:22:00 <shapr> that's an int
07:22:00 <hornby> nono, assume we're parsing already
07:22:00 <shapr> oh
07:22:00 <hornby> and it started with \x04\x80
07:22:00 <hornby> a list, len 4
07:22:01 <shapr> ok, it should take the next four characters then
07:22:01 <shapr> so element would be \x01\x81\x03\x82
07:22:01 <hornby> \x01\x81\x03\x82 ? 
07:22:01 <shapr> right
07:22:01 <hornby> but ... it should take the whole list :)
07:22:12 <shapr> huh?
07:22:20 <hornby> the list is four elements
07:22:28 <shapr> OH
07:22:31 <shapr> I GET IT
07:22:32 <hornby> [1, "two", 3, "four"]
07:22:38 * shapr bangs head on desk
07:22:44 <hornby> but it takes something like [1, BOOM
07:23:04 <shapr> the length of the list is the number of items, NOT the number of characters
07:23:09 <shapr> DOH
07:23:09 <hornby> yup
07:23:26 <hornby> so maybe the number of instructions ... 
07:23:38 <hornby> Hrm, this is easier in an imperative language :)
07:24:07 <shapr> the correct solution then, is to return a list of BananaType, and take lengthVal returnedListOfBananaTypes
07:24:10 <hornby> The Python implementation has all those nice buffers and counters :) Anyway, I shall continue poking . I still resolve to fix it :)
07:24:47 <shapr> wow, excellent bughunting hornby!
07:24:48 <hornby> shapr: but only for x == listChar right?
07:24:53 <shapr> right
07:25:04 <hornby> shapr: I feel like i should have found it earlier. Okay, let me see what I can do :)
07:25:05 <shapr> that means that element isn't useful anymore
07:25:17 <hornby> its still used here: 
07:25:18 <shapr> the current 'element' only works for strings
07:25:21 <hornby> | x == stringChar  = (BananaString element,rest)
07:25:39 <shapr> I pulled out element to get rid of duplication
07:25:51 <hornby> nod. But now you might as well just put it back in
07:25:52 <shapr> if it's only used once, it's less distracting to inline it
07:25:54 <shapr> right
07:26:50 <hornby> okay, back to work then, for both of us :)
07:26:56 <shapr> yah
07:27:04 <shapr> it's nearing time for me to go home
07:27:13 <hornby> I better work fast then :)
07:27:17 <shapr> hah
07:50:37 <hornby> shapr: am beginning to think something else might be wrong
07:50:52 <hornby> for the previous example, I should (take 13 xs), I believe. 
07:50:58 <hornby> but that doesn't work
07:51:19 <shapr> you won't be able to figure out the amount of characters to take
07:51:26 <hornby> shapr: why not?
07:51:30 <shapr> you'll have to instead return a list of BananaType
07:51:51 <shapr> and then "take lengthVal" from that list
07:52:02 <hornby> what returns this list? 
07:52:08 <hornby> and whats in it? 
07:52:21 <shapr> um
07:52:40 <hornby> mm, well you seem to have a pretty good idea, you should probably just write it :) 
07:52:42 <shapr> hah
07:52:49 <hornby> Then I can read the code and go "Ahhh..."
07:53:07 <shapr> BananaList $ take lengthVal $ decodeAll
07:53:11 <shapr> that's the correct code
07:53:20 <hornby> thats ot
07:53:21 <hornby> er it?
07:53:24 <shapr> wellll
07:53:27 <shapr> not exactly
07:53:54 <shapr> that assumes that you send a bunch of stuff to decodeAll
07:53:58 <hornby> decodeAll has to be adjusted, yeah
07:54:03 <shapr> it returns a list of BananaType
07:54:19 <shapr> and you pull off the number of items that the BananaList needs
07:54:53 <hornby> decodeAll :: String -> ([BananaType], Int) ?
07:55:13 <shapr> problem is, those three functions were designed to return one decoded type, and then the rest of the string
07:55:39 <shapr> umm
07:55:39 <shapr> hmm
07:55:39 <shapr> hey
07:55:39 <shapr> maybe
07:55:48 <shapr> oh I got it
07:55:55 <hornby> I was thinking; just keep element and rest, but alter them? 
07:56:01 <shapr> a more general version of decodeAll that can take a number
07:57:25 <hornby> a number or a string?
07:57:26 <shapr> decode numItems string :: Num a => a -> String -> ([BananaType],String)
07:57:26 <shapr> something like that
07:57:26 <hornby> I stopped my flowchart when I hit the bug, so I have pieces missing 
07:57:26 <shapr> you'll have to teach me how to flowchart at some point =)
07:57:41 <hornby> great way to discover bugs
07:57:46 <hornby> in code like this
07:57:56 <shapr> I've seen flowcharts, but don't know anything about them.
07:58:10 <hornby> well, there are all kinds. I just draw lines, keep tables of data
07:59:59 <hornby> pretty informal. never got around to learning to use a computerized diagramming tool
08:00:00 <shapr> decodeN numItems string :: Num a => a -> String -> ([BananaType],String)
08:00:00 <hornby> looks cool
08:00:00 <shapr> er
08:00:00 <hornby> but ... what do you pass when x == listChar 
08:01:37 <shapr> x == listChar = (BananaList listElements,rest) where deN = decodeN lengthVal xs, listElements = fst deN, rest = snd deN
08:01:47 <shapr> yah?
08:02:06 <hornby> I read
08:03:14 <hornby> no $?
08:03:28 <hornby> oh, of course not
08:03:29 <shapr> don't need one that I can see
08:04:15 <shapr> decodeN 1 string = decode string
08:04:54 <hornby> ugh brain malfunction, one more moment please :)
08:05:50 <hornby> ya, looks good
08:05:58 <shapr> decodeN numItems string = elements ++ (decodeN (numItems - 1) rest)
08:06:01 <shapr> or something like that
08:06:13 <shapr> those two lines aren't passing the string around correctly
08:06:27 <shapr> but I think they're close
08:06:44 <hornby> where will elements and rest come from?
08:06:47 <shapr> oh right
08:07:18 <shapr> um
08:07:48 <shapr> elements is there to accumulate the listElements, rest is there to hold the leftover string bits
08:08:34 <shapr> so
08:08:43 <shapr> bah, I need to go home :-)
08:08:52 <hornby> nod
08:08:57 <hornby> you can think about it on the way :)
08:09:00 <shapr> I'll be back online in ~ 45 mins I think
08:09:03 <shapr> ok
08:09:07 <hornby> And watch in awe as I produce a solution
08:09:10 <hornby> (right)
08:09:11 <shapr> yah!!
08:09:21 <hornby> We'll see :) 
08:56:18 <shapr> boing!
08:56:42 <shapr> y0 hornby
08:56:46 <shapr> wassup?
08:57:32 <hornby> hey
08:57:38 <hornby> just bouncing my head off the wall
08:57:58 <hornby> mild headhush keeps me going I guess
08:58:01 <hornby> er rush
08:58:24 <hornby> decodeN numItems (x:xs) = [] ++ (decode (numItems -1) xs)
08:58:54 <hornby> the type is evil though. that gives [BananaType] Right? but what about the String part? ugh
09:00:13 <shapr> right
09:00:16 <shapr> gotta pass it around some
09:00:40 <hornby> I just dont see how to get a string on there though
09:02:03 * shapr writes decodeN
09:02:09 <hornby> whee
09:02:32 <shapr> oh
09:02:42 <shapr> decode returns (BananaType,String) right?
09:02:47 <hornby> yes
09:02:57 <shapr> ok
09:02:58 <hornby> ya, thats a problem too
09:03:06 <shapr> makes it easier I think :-)
09:03:10 <hornby> really? 
09:03:13 <shapr> I think so
09:03:18 <hornby> I can't wait to see this code :)
09:03:21 <shapr> that way we have something like an object or struct
09:03:28 <shapr> and we swap the pieces around
09:03:33 <shapr> soooo
09:03:55 <shapr> it's actually easier recursively
09:04:16 <shapr> think of getting a list of [(BananaType,String)]
09:04:22 <hornby> ya, I kept catching glimpses of neat things in my head, but I couldn't translate them to haskell
09:04:32 <shapr> but, each String contains all the rest of the BananaTypes, right?
09:04:39 <shapr> yah, I know that glimpse feeling :-)
09:04:41 <hornby> Sure
09:04:59 <shapr> so in fact, it's (BananaType,(BananaType,String))
09:05:04 <hornby> Hrm, I never thought of it that way
09:05:21 <shapr> and that is recursive until String is either empty, or invalid
09:05:29 <hornby> Ah. 
09:05:44 <shapr> so we write a function that takes a String, and return a (BananaType,String) tuple
09:05:49 <shapr> happily, we already have one, decode
09:06:11 <hornby> hmm 
09:06:24 <shapr> then we write a wrapper function that recurses through that
09:06:31 <hornby> decodeN?
09:06:34 <shapr> right
09:06:42 <shapr> decodeAll is a wrapper function also
09:06:53 <shapr> but we have different conditions for decodeN
09:06:56 <hornby> sure, but we don't use that at all, do we?
09:07:06 <shapr> hm, good point.
09:07:27 <shapr> er
09:07:32 <shapr> I think we'll need decodeAll later
09:07:38 <shapr> maybe
09:07:50 <hornby> maybe canabalize it
09:07:55 <shapr> yah, probably so
09:08:15 <shapr> decodeN is an extension of decode
09:08:30 <shapr> where we only decode a certain number of items
09:08:35 <hornby> nod
09:08:51 <shapr> decodeN :: Int -> String -> (BananaType,String)
09:09:05 <hornby> right
09:09:13 <shapr> er, ([BananaType],String)
09:09:15 <shapr> I think
09:09:19 <hornby> ah, ya :)
09:09:26 <shapr> and we hope String will be ""
09:09:34 <shapr> oh, no we don't
09:09:36 <shapr> whoops
09:09:41 <hornby> string will be lots more :)
09:09:43 <shapr> right
09:09:46 <shapr> it's everything else
09:09:57 <hornby> string will be everything else, yeah
09:10:21 <shapr> so we want it to turn (BananaType,String) into (BananaType,(BananaType,String)) N times
09:10:26 <shapr> how would you do that?
09:10:54 <hornby> do we have a (BananaType,String)? We just have a string?
09:11:10 <shapr> that's true.
09:11:23 <hornby> But we can do something like 
09:12:04 <hornby> decodeN numItems (x:xs) = | x == stringChar == (BananaString, xs)?
09:12:40 <hornby> or is that way not it
09:12:41 <shapr> you want to call decode inside decodeN
09:12:41 <shapr> because it already handles all that stuff
09:12:42 <hornby> well thats what I was trying to do before
09:12:58 <hornby> decode x xs?
09:13:23 <shapr> we know part of the call should be "decodeN (numItems - 1) string" right?
09:13:31 <hornby> ya
09:13:45 <hornby> hm
09:13:52 <shapr> and that string should be the String part of the result from a decode call
09:14:16 <hornby> decodeN(numItems -1) (snd (decide x xs))
09:14:23 <hornby> thats close :)
09:14:25 <hornby> er
09:14:27 <hornby> closer
09:14:30 <shapr> yah, that is close
09:14:49 <shapr> all you have left is some way to accumulate the BananaTypes into a list
09:15:11 <hornby> [] ++ ... ?
09:15:24 <hornby> but ... 
09:15:25 <shapr> I'd suggest ... : []
09:15:37 <hornby> : []? unfamiliar
09:15:48 <shapr> try "1 : []" in ghci/hugs
09:15:50 <hornby> oh
09:16:01 <hornby> yeah neat
09:16:10 <hornby> its the same sort of thing ... whats the difference?
09:16:27 <shapr> from what I've read, ++ is an expensive monadic operator
09:16:32 * hornby remembers his tutorials now: 1 : 2 : 3 : [] being the same as [1,2,3]
09:16:38 <shapr> right
09:16:39 <hornby> ah
09:16:46 <hornby> efficiency :) yay
09:17:13 <hornby> but this just gives us a list ... how do we return ([BananaList],String)?
09:18:39 <shapr> what result are we getting?
09:18:59 <hornby> hmm
09:19:43 <hornby> Lots of strings? huh?
09:20:09 <hornby> this thing doesn't stop either yet
09:20:24 <shapr> I've recently started using where and let to assign names to different pieces
09:20:39 <hornby> those are handy :)
09:21:28 <shapr> decodeN numItems string = let deResult = (decode string)
09:21:28 <shapr>                               thisType = fst deResult
09:21:28 <shapr>                               leftOver = snd deResult in
09:21:36 <shapr> where would you go from there?
09:22:16 * hornby thinks
09:22:39 <shapr> you've already come up with the code to deal with leftOver, right?
09:22:45 <hornby> yes
09:23:47 <hornby> leftOver seems to be in the wrong spot
09:23:52 <shapr> possibly so
09:24:24 <hornby> arg
09:24:27 <shapr> :-)
09:24:34 * hornby kicks his brain: "CLICK!"
09:24:58 <shapr> was that a "click into place" or a "kick the reboot button" ?
09:25:23 <hornby> I was thinking "click into place", but a nice reboot might do me good too :)
09:25:26 <shapr> hah
09:25:48 <hornby> I think the : [] is throwing me
09:25:57 <hornby> it stuff everything before it into the list right?
09:26:01 <hornby> like EVERYTHING
09:26:12 <shapr> actually, just the one thing before
09:26:24 <hornby> decodeN (numTimes-1) leftOver thisType : []
09:26:26 <shapr> 2 : 1 : [] makes [2,1]
09:26:38 <hornby> ah, so this is closer
09:27:01 <hornby> or is it : decodeN (numTimes-1) leftOver : thisType : []
09:28:16 <shapr> that's closer too
09:28:31 <shapr> but how do you pass the leftover string part out as well?
09:28:31 <hornby> does feel like there is something missing thoguh
09:29:13 <hornby> well, don't we only want to do that at the end?
09:29:37 <shapr> we need to return it from every decodeN call
09:30:04 <shapr> ok, I think I have an ugly solution, but I haven't tried it yet
09:30:06 <shapr> decodeN numItems string = let deResult = (decode string)
09:30:06 <shapr>                               thisType = fst deResult
09:30:06 <shapr>                               leftOver = snd deResult 
09:30:06 <shapr>                               recResults = decodeN (numItems - 1) leftOver
09:30:06 <shapr>                               nextTypes = fst recResults
09:30:07 <shapr>                               restString = snd recResults in 
09:30:09 <shapr>                               ([thisType] ++ nextTypes,restString)
09:30:39 <hornby> I tried something like that but I don't think it likes the (blah,String) notation
09:31:33 <shapr> that solution is also missing the "when to stop" logic
09:31:37 <hornby> ya
09:32:25 <hornby> decodeN 0 _ = 
09:37:20 <hornby> hm
09:38:38 <shapr> I gotta go buy beer for my boss :-)
09:38:43 <shapr> I'll be back later.
09:39:07 <hornby> okay
09:39:07 <shapr> maybe alcohol will encourage my thinking process (not)
09:39:10 <hornby> heh
09:39:16 <shapr> drunk code sucks :)
09:39:17 <hornby> I might take a nap
09:39:21 <hornby> shapr: but its fun :)
09:39:22 <shapr> ok, I'll bbl
09:39:26 <shapr> heh, it is :)
09:39:27 <hornby> cool
09:39:31 * shapr goes for beer
20:05:57 * hornby pokes shapr
