00:39:20 <ibid> bah, another black hole
01:15:02 <ChoJin> hi
02:28:44 * shapr bounces
02:30:14 <det> tisk tisk, what have I tol you about eating rubber
02:30:24 * shapr grins
02:30:30 <shapr> g'mornin det!
02:30:39 <det> indeed!
02:30:50 <shapr> how ar ya?
02:30:50 <det> 181/185MB of the potato netinst CD
02:30:54 <shapr> whoa
02:31:30 <det> I just hope that I can get the winmodem in this computer to work :(
02:32:27 <det> how goes jelly.h ?
02:32:47 <det> hs even
02:33:10 <shapr> not much progress
02:39:07 <shapr> at least, not since last night :-)
02:39:25 <det> what's wrong! not working in your sleep?
02:39:56 <shapr> not unless you count my waking hours in which I am glazed over.
02:40:22 <det> :)
02:40:49 <det> 2 meg to go
02:40:50 <det> yay
02:40:53 <shapr> yay
04:44:50 <shapr> boing!
04:45:42 <Jerub> shapr: haskell haskell
04:46:15 <shapr> yay!
04:47:47 <Jerub> shapr: working through the haskell introduction for my course.
04:47:48 <Jerub> it sucks.
04:48:09 <shapr> which intro are you using?
04:48:32 <Jerub> http://1cust178.tnt3.bne1.da.uu.net/~stephen/comp3400/fp_index.htm <-- that one.
04:49:56 * Jerub blinks.
04:50:02 <shapr> ?
04:50:21 <Jerub> I'm doing his problems myself, then looking at his solution, with my tiny knowledge of haskell.
04:50:29 <shapr> is it working?
04:50:40 <Jerub> I'm getting more efficent solutions.
04:50:54 <Jerub> at least, he's using less knowledge at this stage than I am.
04:51:14 <Jerub> ahh, I'll use map, ... code ... test ... works. what did he use? oh, recursion.
05:05:23 <Jerub> shapr: just looking for an elegent solution to this problem.
05:05:53 <Jerub> first_greater_than n l = first (filter (n<) l)
05:06:00 <Jerub> first h:t = h
05:06:17 <shapr> ?
05:06:22 <Jerub> that just seems evil to me, and doesn't work for some cases (first_greater_than 5 [2,3])
05:06:33 <shapr> oh
05:06:36 <Heffalump> first h:t = h
05:06:39 <Heffalump> wouldn't pass the parser
05:06:47 <Jerub> Heffalump: does in hugs.
05:06:48 <Heffalump> and there's a function called head that does exactly that
05:06:52 <Jerub> whoops, it doesn't
05:06:53 <ChilliX> and even if it would, it would not be type correct
05:06:56 <Jerub> first (h:t) = h
05:07:28 <Jerub> I have a programmers ability to fix parse errors without hitting a Brain IRQ.
05:08:17 <Heffalump> what would you expect first_greater_than 5 [2,3] to return?
05:08:54 <Jerub> Heffalump: I wish I knew, this is a construed example used in a teaching exercise.
05:08:59 <Jerub> that problem is left up to the reader.
05:09:39 <ChilliX> maybe, you mean something like   takeWhile (n<) l   ?
05:09:58 <Heffalump> chillix: filter would do just as well, given he only wants the first one, surely?
05:10:21 <Heffalump> jerub: seems like you have two options - live with the program error, or make the return type a Maybe
05:11:12 <ChilliX> Heffalump: I am nut sure what he wants to be honest
05:11:18 <ChilliX> nut = not
05:11:49 <Heffalump> oh, takeWhile does something different actually
05:12:06 <Heffalump> first_greater_than implies he wants the first element of the list bigger than the first parameter, surely?
05:12:21 <ChilliX> ok
05:12:25 <Jerub> Heffalump: thats the required behavior
05:12:38 <ChilliX> head . filter (n<)
05:12:47 <Jerub> Actually, the question I'm trying to find a good answer to is: whats the haskell way of implementing that.
05:12:49 <shapr> ah, that's simpler than what I was thinking of
05:12:57 <Heffalump> that's roughly what he said, albeit in a pointwise fashion :-)
05:13:08 <ChilliX> Jerub: what I just said is the Haskell way
05:13:09 <Jerub> as in, what do I do in the case of filter () returning the empty list.
05:13:10 <shapr> what about "head . dropUntil (n<)"
05:13:14 <shapr> wouldn't that be simpler?
05:13:22 <shapr> or is the filter going to be lazily called?
05:13:33 <Heffalump> shapr: it'll produce the same result, probably with the same performance
05:13:44 <shapr> interesting...
05:13:54 <shapr> I'm still not used to lazy calls being standard
05:13:58 <Heffalump> but I can't really be sure about the same performance
05:14:06 <ChilliX> shapr: it's lazy
05:14:10 <shapr> extra spiffy
05:14:26 <ChilliX> it's a partial function of course
05:14:29 <shapr> I think the idea of "filter" in my head works like the filter in Python
05:14:30 <Jerub> that doesn't seem to work in hugs.
05:14:32 <Heffalump> jerub: you need to decide whether just to allow there to be an error, or to change your result type to allow you to explicitly say "there aren't any"
05:14:46 <ChilliX> but unless the spec includes a special requirement for the case whree there is no such value, it's ok
05:15:12 <shapr> Jerub: question is, did you learn anything from this discussion? :-)
05:15:48 <Jerub> shapr: I'm always learning ;)
05:16:53 <Jerub> this doesn't work, I get a type error on parse
05:16:54 <Jerub> first_greater_than n l = head . filter (n<) l
05:18:20 <shapr> I switched the . to a $
05:20:24 <Heffalump> jerub: if you use ., leave out the l on each side of the definition
05:20:37 <shapr> ohhhh
05:20:41 <shapr> I seee
05:21:03 <Jerub> Heffalump: awesome.
05:21:19 <Jerub> I don't understand . or $, but I think that'll come with more reading.
05:21:20 <ChilliX> the Haskell was ist actually to leave the l out
05:21:48 <shapr> ich verstehe nicht
05:21:54 <shapr> was ist?
05:22:08 <ChilliX> fgt n l = head (filter (n <) l)
05:22:09 <ChilliX> and 
05:22:16 <ChilliX> fgt n = head . filter (n <)
05:22:18 <ChilliX> are synonym
05:22:21 <shapr> ah
05:22:27 <shapr> spaﬂ
05:22:38 <ChilliX> the former talks about non-functional values
05:22:44 <ChilliX> the latter about Funktions
05:22:54 <shapr> your spelling is nifty
05:22:57 <ChilliX> the latter says
05:23:05 <ChilliX> (shapr: you confused me ;-)
05:23:10 * shapr laughs
05:23:18 <ChilliX> the latter says
05:23:34 <ChilliX> the function "fgt n" ist the same
05:23:52 <ChilliX> as the composition of the two functions "head" and "filter (n<)"
05:24:03 <ChilliX> it doesn't talk about lists as such
05:24:08 <shapr> I've never noticed *any* germanicisms in your english.
05:24:22 <ChilliX> only about how these functions are related
05:24:31 <shapr> which surprises me
05:24:36 <ChilliX> shapr: glad to hear that :-)
05:25:00 <shapr> Bea, my fiancee, has been speaking english since she was 13, and she has a master's in english philology..
05:25:09 <ChilliX> Jerub: does this make sense?
05:25:18 <Jerub> ChilliX: yes.
05:25:23 <shapr> so I can usually pick on any germanicisms.
05:25:28 <ChilliX> good :-)
05:25:42 <ChilliX> shapr: can?  or can't?
05:25:49 <shapr> I can.
05:25:58 <ChilliX> ok
05:26:03 <shapr> how did you learn english?
05:26:15 <shapr> if you don't mind me asking :-)
05:26:21 <ChilliX> in theory, at school
05:26:32 <shapr> your english sounds native to me.
05:26:52 <ChilliX> in practice, I started learning it when I started to want to read about computer stuff for which there was no translation into .de
05:27:26 <Jerub> I've met quite a few esl people that have *extremely* good english. good enough to correct me (and I'm no hick).
05:27:27 <ChilliX> then, at uni in computing, a lot of stuff is in English
05:27:39 <shapr> esl?
05:27:45 <Jerub> English as a Second Language.
05:28:04 <shapr> oh
05:28:28 <ChilliX> I know I make mistakes sometimes
05:28:35 <shapr> Bea corrects me with s/less/fewer about once a week.
05:28:47 <shapr> that seems to be a southeast USA mistake.
05:28:52 <ChilliX> but one thing about esl (especially when you study it in .de) is that you learn a lot about grammar and stuff
05:29:51 <ChilliX> know in .au, they learn little grammar at school
05:30:04 <ChilliX> so, when I read project thesis and stuff, I often cringe
05:30:40 <Jerub> shapr: just saw a newsgroup post on the uni server - and I can't figure out the answer to the question.
05:30:53 <shapr> In Tenneessee, students seem to have a very high resistance to learning. I learned english grammar, seems no one else did.
05:30:55 <Jerub> hugs. how can you load two files, with the second file calling functions defined in the first?
05:31:00 <Heffalump> if you're a native speaker you don't really need to learn formal grammar as long as you read a fair bit
05:31:21 <Heffalump> jerub: at the beginning of each, do something like
05:31:25 <Heffalump> module Foo where
05:31:34 <ChilliX> Heffalump: wouldn't work in German, I am sure
05:31:44 <Heffalump> for different Foos, obviously, and it helps a lot if you name the files the same as the Foo
05:31:58 <Heffalump> then in the second file do import <name of first module> just after the module declaration
05:32:22 <Heffalump> chilli: you can't just look at something and tell if it's right or not, then?
05:32:26 <ChilliX> Jerub: or just use ghci ;-)
05:32:46 <Heffalump> chillix: how would ghci help solve the problem?
05:32:48 <ChilliX> Heffalump: not in complex sentences
05:33:02 <ChilliX> Heffalump: :a
05:33:11 <Heffalump> chillix: well, hugs has that too
05:33:21 <ChilliX> haven't used Hugs in ages
05:33:27 <Heffalump> but it doesn't help one module reference functions from a different module, afaik
05:33:28 <ChilliX> (I have to admit)
05:33:47 <ChilliX> are they exported or not
05:35:28 * Heffalump experiments
05:35:40 <Heffalump> hmm, ghci loads really slowly
05:35:45 * Heffalump remembers why he prefers hugs
05:35:55 <ChilliX> what machine do you have?
05:37:08 <Heffalump> ok, you definitely can't get one module to reference symbols in another module without an explicit import, even with :a (in hugs or ghci)
05:37:38 <Heffalump> ghci is running under VMware with 128MB ram on a PIII-700
05:37:43 <ChilliX> ok, but you *shouldn't* be getting one module to reference something in another one without an explicit import!
05:37:48 <Heffalump> well no
05:38:01 <ChilliX> strange
05:38:09 <Heffalump> I was just pointing out that your suggestion wasn't helpful :-p
05:38:11 <ChilliX> it's pretty fast for me ona similar machine
05:38:21 <ChilliX> Heffalump: fair enough :-)
05:38:21 <Heffalump> VMware may be making the difference
05:38:40 <Heffalump> it seems a lot faster when I run it directly under cygwin on the host machine
05:38:52 <ChilliX> ic
05:38:54 <Jerub> that import thingy, is it case senstive, and why?
05:39:10 <Heffalump> why what?
05:39:11 <Jerub> I mean, import Foo seems to work where import foo doesn't seem to work.
05:39:19 <Heffalump> module names need to start with capital letters
05:39:44 <Heffalump> can't remember why, it's similar to functions starting with small letters and data types and constructors starting with capital letters
05:39:52 <Jerub> okay.
05:39:54 <Jerub> cool.
05:40:00 <Jerub> and filenames have to follow the convention, correct?
05:40:09 <Heffalump> filenames can be any case you want, I think
05:40:25 <Heffalump> I have module Foo in foo.hs
05:40:36 <ibid> Heffalump: unix or windows?
05:40:55 <Heffalump> ibid: unix
05:41:07 <Jerub> hugs doesn't like that.
05:41:16 <ibid> Heffalump: strange
05:41:20 <Jerub> in unix
05:41:23 <Heffalump> oh, so it doesn't
05:41:27 * Heffalump withdraws that then
05:41:35 <Heffalump> sorry :-)
05:41:52 <pesco> *g*
05:42:10 <shapr> hi pesco
05:42:46 <pesco> Hey shapr.  Good morning Heffalump and Chilli.
05:43:08 <Jerub> thats alright.
05:43:23 <Jerub> Too bad we don't have RT with conversation
05:43:29 <Heffalump> RT?
05:43:41 <Jerub> Referencial Transparency.
05:43:59 * Heffalump fails to see how that applies to conversation
05:44:10 <shapr> well, it wouldn't...
05:44:12 <shapr> if it were RT
05:44:14 <ChilliX> Hi pesco
05:44:48 <pesco> Chiil: Nice to meet you in realtime.
05:45:04 <Jerub> solution p = ask heffa p || ask shapr p || ask self p
05:45:08 <shapr> heh
05:45:42 <Jerub> having heffa and shapr fail to give the correct solution, shouldn't affect any state when it comes around to me solving it myself
05:45:49 <Jerub> if we had RT.
05:45:52 * Jerub goes back to coding.
05:45:57 <shapr> ah
05:46:00 <Heffalump> ahhh.
05:46:07 <Heffalump> cunning :-)
05:46:18 <Heffalump> though what if we provide helpful hints (as opposed to unhelpful ones)
05:46:41 <Jerub> then maybe I can find the solution through the use of foldl.
05:46:44 <ChilliX> pesco: hmmm, I am sorry, but I am not sure where we have met in non-realtime...
05:46:48 <Jerub> (which I don't fully understand yet)
05:47:09 <shapr> shapr :: [Clothes] -> [FoldedClothes]
05:47:13 <Jerub> s/understand/grok/
05:47:29 <shapr> shapr LaundryBasket = foldl LaundryBasket
05:47:33 * Heffalump prefers foldr to foldl, even though I don't like cats
05:47:42 <shapr> I'm left-handed.
05:47:43 <shapr> sooo
05:47:51 * shapr grins
05:48:09 <shapr> I missed the cats reference.
05:48:35 <Heffalump> foldr is a catamorphism, if you like using long words to describe things
05:48:46 * shapr grins
05:48:48 <shapr> aha
05:49:31 <ChilliX> Heffalump: you are more into anas?
05:49:34 <shapr> hmmm
05:49:37 <pesco> ChilliX: Oh, sorry, doesn't this R
05:49:44 <shapr> it looks like Simonyi is starting his own company!
05:49:46 <Heffalump> my entire thesis was about turning things like h (foldr f e xs) into foldr f' e' xs, so I quite like foldrs.
05:49:48 <pesco> ChilliX: IRC client do whois?
05:49:49 <Heffalump> shapr: oh?
05:49:53 <Heffalump> chillix: nope :-)
05:49:56 <shapr> Heffalump: maybe that's what he meant in his email.
05:50:10 <Heffalump> shapr: what email?
05:50:13 <Heffalump> oh, the one he sent you
05:50:15 <shapr> the one he sent to me
05:50:27 <Heffalump> where's the news about his own company?
05:50:36 <shapr> on the tunes.org mailing list
05:50:39 <pesco> ChilliX: I talked to you via email some time ago, after bringing up the latest GHC license thread on the mailing list.
05:50:41 <Heffalump> is that archived?
05:50:51 <shapr> I think so.
05:51:02 <Heffalump> publicly?
05:51:06 <shapr> I don't know.
05:51:08 <shapr> probably.
05:51:12 * Heffalump --> look
05:51:18 <Heffalump> the main list?
05:51:24 <shapr> yup.
05:51:41 <ChilliX> pesco: ok, I see :-)
05:52:29 <Heffalump> hmmm
05:52:32 * Heffalump wonders who's involved in this
05:52:32 <shapr> ?
05:52:40 <shapr> sounds interesting, doesn't it?
05:53:00 <Heffalump> who is this Attila Lendvai guy?
05:53:08 <shapr> I dunon
05:53:21 <ChilliX> pesco: so, what are you up to?
05:55:35 <pesco> ChilliX: Let's see, I started with training TLU's, so I could get to neural nets soon.
05:56:06 <pesco> ChilliX: In the process I wanted to hack up a module for Vector arithmetic.
05:56:48 <ChilliX> ic
05:56:54 <pesco> ChilliX: Trying to do that, I stumbled across functional dependencies, which I'm now trying to use.
05:57:33 <pesco> ChilliX: Which I can't right now, because I got the wrong idea about my laptop's IP, on which my files are currently stored.
05:57:39 <ChilliX> yep, they are essential for muti-parameter classes
05:57:42 <pesco> That's about where I left off :)
05:57:51 <ChilliX> hehe :-)
05:58:08 <pesco> ChilliX: I'm not sure whether or how I can use them, yet, though.
05:58:53 <pesco> My idea was to make a class Vector which would be parameterized by the scalar type.
06:00:04 <pesco> But the scalar type might not always be determined from the vector type...
06:01:00 <pesco> But, let me just try it before I go on....
06:02:21 <ChilliX> I have been something a little bit similar (I think) for array stuff, so I think I know what you mean
06:02:35 <pesco> :) cool.
06:03:24 <Jerub> array != list ?
06:03:32 <pesco> True.
06:03:35 <Jerub> ack, going to bed.
06:03:43 <ChilliX> Jerub: indexing into lists is slow
06:03:50 <Jerub> ahh.
06:03:56 <Jerub> okay, well, I'mg oing to bed :)
06:04:03 <ChilliX> sleep well
06:12:32 <shapr> what are functional dependencies?
06:12:45 <pesco> ChilliX: Yay, it works. But not with functional dependencies.
06:13:38 <pesco> shapr: If you declare a type class with multiple parameters and state that some of the parameters uniquely determine some others, that's a functional dependency.
06:16:26 <shapr> hm
06:16:26 <pesco> ChilliX: Hah, I take it back, it work's half-way.
06:16:49 <pesco> Exactly as far as the scalar multiplication doesn't come in.. *grmpf*
06:17:54 <ChilliX> pesco: :-)
06:19:10 <pesco> OK, I must think about what exactly I'm trying to express.
06:20:49 <det> pesco: how can some paramaters uniquely determine others? example ?
06:21:09 <pesco> det: The example from the paper are containers.
06:21:50 <pesco> Or just imagine every vector type would only work with one specific scalar.
06:21:57 <pesco> But that's not true.
06:22:23 <pesco> eeek
06:22:53 <ChilliX> poor shapr
06:26:50 <pesco> How can I do this?
06:27:33 <ChilliX> ?
06:27:46 <pesco> I can't think of a way to make it work.
06:28:32 <pesco> I want to build the class of vector spaces.
06:29:53 <ChilliX> re: each vector type works only with one scalar: see http://www.cse.unsw.edu.au/~chak/nepal/#software
06:30:09 <ChilliX> this array library has exactly that property
06:30:22 <pesco> :)
06:30:39 <ChilliX> you can regard it as generic programming
06:30:59 <ChilliX> the element type of an array determines the representation of that array
06:32:05 <pesco> Can't one come up with a vector type that is not an array or similar?
06:32:43 <pesco> Hm, the URL appears to be wrong.
06:32:47 <ChilliX> sure, anything goes
06:33:04 <ChilliX> I pasted it from my web browser...
06:33:33 <pesco> Oh, now it works, strange, sorry.
06:37:22 <pesco> Ooh, three more papers to read on the bus!
06:40:20 <pesco> Hm, what is "the usual way" for accessing a custom lib with GHC?
06:40:38 <ChilliX> how do you mean that?
06:40:52 <ChilliX> -l<libname>
06:40:59 <ChilliX> like in a C compiler
06:41:03 <pesco> Ah, and -L<path>?
06:41:07 <ChilliX> yep
06:41:10 <pesco> Good.
06:41:15 <ChilliX> and -i<path> to find the .hi files
06:41:20 <pesco> Aahhh.
06:49:42 <pesco> What are segmented arrays?
06:50:22 <ChilliX> you represent something like
06:50:32 <ChilliX> [[1,2],[],[4,5,6]] as
06:50:41 <ChilliX> [1,2,4,5,6] and [2,0,3]
06:51:05 <pesco> Aha...
06:51:35 <ChilliX> http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/scandal/public/papers/CMU-CS-93-173.html
07:51:48 <ChilliX> g'nite
16:20:32 * shapr boings
16:20:58 <pesco> Hey shapr
16:21:18 * Jerub sgniob
16:21:23 <shapr> hiya pesco
16:21:27 <shapr> Jerub: what's that mean?
16:21:29 <shapr> oh
16:21:32 <shapr> backwards :-)
16:21:48 <shapr> hey, anyone else here has 5.04 and want to try to compile WASH-CGI?
16:21:55 <shapr> I'm having a problem....
16:22:24 <pesco> *TLU> map t chi == ans
16:22:25 <pesco> True
16:22:27 <pesco> Yay!
16:22:36 <Jerub> backwards [] = []
16:22:44 <shapr> Jerub: reverse ?
16:22:54 <Jerub> backwards (h:t) = backwards t ++ h
16:23:04 <pesco> reverse.
16:23:13 <shapr> whenever I try to compile the CGIInternals.hs part of WASH-CGI, I get a stack overflow.
16:23:23 <pesco> Oh :(
16:23:24 <Jerub> shapr: ppft, I'm still learning haskell, this is exercise for me.
16:23:27 <shapr> I emailed the author, he says it works for him or 5.02
16:23:38 <pesco> heh.
16:23:42 <shapr> Jerub: good point
16:24:18 <pesco> Jerub: Oh, I'm sorry, didn't mean to be rude.
16:24:22 <Heffalump> you've tried increasing the stack size?
16:24:30 * Jerub smiles.
16:24:45 <shapr> Heffalump: yah, it compiled for something like twenty minutes, and grew to 130MB or so
16:24:49 <Jerub> pesco: rude? now I know the bona fide library function for it ;)
16:24:59 <Jerub> I think I could do it with foldl too, but I'm not sure yet :)
16:25:01 <shapr> Heffalump: that sounded like suspicious behaviour to me.
16:25:41 * shapr tries it again
16:26:26 <pesco> Jerub: yes, try fold...
16:27:29 <shapr> I wonder if I have an old version of WASH-CGI
16:29:10 <shapr> nope, same version.
16:29:35 <pesco> Jerub: Do you know it?
16:31:45 <Jerub> pesco: I know the concept, not very good at using it yet.
16:32:05 <Jerub> I'm actually at work right now, so downloading+installing hugs wouldn't be the best thing to do.
16:32:24 <pesco> Aww, ok.
16:38:27 <Heffalump> shapr: hmm, yes :-)
16:39:11 <shapr> still compiling
16:48:38 <shapr> Heffalump: any ideas how I can track down the problem?
16:50:36 <pesco> Bed.
16:54:46 <shapr> same here
16:58:03 <Heffalump> shapr: sounds like a bug in GHC, probably simplest to report it
17:46:19 <Pseudonym> Anyone know what happened to the wiki?
18:58:53 <Heffalump> shapr said it happens quite a lot
18:58:57 <Heffalump> something to do with broken lock files
19:03:47 * Pseudonym nods
19:03:57 <Pseudonym> Just curious.
23:48:24 * Chilli is away: Not at the machine...
