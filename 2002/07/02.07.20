01:44:21 <pesco> Morning!
01:46:59 <pesco> brb
05:24:26 <dblack> hi
06:02:20 <shapr> hi dblack, what's up?
06:06:11 * shapr bounces
06:06:21 * shapr chortles merrily
06:06:27 * shapr decides to code later
07:54:40 <dblack> hi shapr
08:09:31 <shapr> hi dblack, how ar ya?
09:13:17 <dblack> hi shapr
09:13:30 <dblack> bye shapr :-)
09:16:43 <dblack> hi shapr
09:16:43 * shapr bounces into the channel
09:16:47 <shapr> hi dblack!
09:16:55 <shapr> how's the code?
09:16:59 <dblack> not bad
09:17:15 * dblack wrestles with flaky isp service....
09:18:07 <dblack> hmmm... well, it seems to be ok for now
09:18:09 <dblack> anyway....
09:18:14 <dblack> i have an actual haskell question
09:18:42 <dblack> shapr: are you on the pragprog yahoo group?  i emailed the question to that group
09:18:56 <shapr> I'm on the group, but I haven't seen the question.
09:19:00 <shapr> what is the question?
09:19:05 <dblack> it involves partial application
09:19:22 <shapr> ?
09:19:32 <dblack> hang on, i may have to cut and paste
09:19:50 <shapr> go for it
09:20:00 <dblack> i have a function:   func :: Eq a => Int -> [a] -> [a] -> Int
09:20:16 <dblack> and i want partial application:   partial = func 5
09:20:34 <dblack> so then i would go:  partial "string" "other string"
09:20:39 <dblack> however....
09:20:47 <dblack> it doesn't compile
09:21:00 <Heffalump> what's the error message?
09:21:23 <dblack>  ERROR /home/dblack/hacking/haskell/Partial.hs:13 - Unresolved
09:21:23 <dblack>   top-level overloading
09:21:23 <dblack>   *** Binding : part3
09:21:23 <dblack>   *** Outstanding context : Eq b
09:21:42 <dblack> (Hugs)
09:21:44 <Heffalump> what's on line 13?
09:21:58 <dblack> oh, sorry...
09:22:15 <dblack> it's the  "partial = func 5" line
09:22:40 <Heffalump> errm, are you sure the line does say part3 in it anywhere?
09:22:45 <Heffalump> s/does/doesn't/
09:22:48 <dblack> sorry
09:22:52 <dblack> i'm semi-cutting and pasting
09:22:58 <dblack> i changed the function names....
09:23:15 <dblack> let me start again:
09:23:17 <dblack> odule Partial where
09:23:17 <dblack> dummy :: Eq a => Int -> [a] -> [a] -> Bool
09:23:17 <dblack> dummy n x y = True
09:23:17 <dblack> part3 = dummy 100
09:23:24 <dblack>  
09:23:27 <dblack> well, Module, not odule
09:23:32 <Heffalump> ok, you've run into the monomorphism restriction
09:23:37 <Heffalump> it's annoying
09:23:50 <Heffalump> give part3 an explicit type
09:24:00 <Heffalump> part3 :: Eq a => [a] -> [a] -> Bool
09:24:07 <Heffalump> and all should be well again (I think)
09:24:24 <dblack> ok, yes, it does seem to like that
09:25:12 <dblack> also it didn't mind:  part2 = dummy 100 "string"
09:25:31 <Heffalump> yeah, cos having the "string" there resolved the overloading - it forced the type variable in the Eq constraint to be Char
09:25:32 <dblack> (where the type of the first [a] was determined, i guess)
09:26:11 <dblack> so it's not enough that [a] and [a] are (obviously) of the same type? 
09:26:59 <Heffalump> the monomorphism restriction stops you having definitions of the form "foo = ...." where foo ends up with a polymorphic type, without explicitly giving foo a type signature
09:27:12 <Heffalump> if your definition had been "foo x = .... x" or something like that it'd have been fine
09:27:19 <shapr> Heffalump: hey, mind if I add you to the list of possible ICFP participants?
09:27:39 <Heffalump> sure
09:27:48 <shapr> yay!
09:27:59 <shapr> er
09:28:05 <shapr> I think that was "yes, you can add me"
09:28:10 <Heffalump> it was
09:28:17 <shapr> I hate that "do you mind" bit, it's too easily confused.
09:28:20 <shapr> why do I use it? :)
09:28:28 <Heffalump> :-)
09:28:42 <dblack> Heffalump: thanks for the info on monomorphism
09:30:06 * shapr bounces furiously
09:30:30 <shapr> my woman went off to spend the night with a friend of ours...
09:30:40 <shapr> that's a great opportunity for a coding binge!
09:31:33 * shapr makes another pot of coffee while cackling evilly
09:31:34 * Heffalump is putting a desk together
09:31:49 <shapr> Heffalump: you need more desks for all your hardware, eh? :)
09:32:57 <Heffalump> something like that :-)
09:33:09 <Heffalump> (actually it's cos we just moved from a furnished to an unfurnished place)
09:37:03 <Heffalump> the only good thing ba
09:37:16 <Heffalump> s/ba/about putting furniture together is the hammering/
09:37:25 <shapr> hah!
09:37:45 <shapr> I wish my computers were tough enough to deal with my frustration... I just run around the house instead.
09:38:08 <shapr> two new computers showed up in my room yesterday, a 200MHz pentium, and a 233MHz pentium laptop
09:38:23 <shapr> two new debian and PVM servers to hook to my network =)
09:51:06 * shapr hooks up the laptop
09:54:34 <shapr> hi ig
10:06:51 * shapr bounces
10:14:15 <xbill> 8what's all this bouncing about again?
10:14:19 <jewel> hehe
10:16:22 <jewel> how many people do you have for IFCP now?
10:16:40 <xbill> don't count me as 100% probability of showing up?
10:16:45 <xbill> s/?//
10:35:54 <jewel> how many people do you have for IFCP now?
10:37:19 <shapr> four definite
10:37:33 <shapr> loom2, pesco, you, and me
10:37:58 <jewel> and ganesh?
10:39:01 <shapr> afaik, Heffalump is a maybe, did I put him in the wrong spot?
10:39:36 <shapr> Igloo and Heffalump are under the "maybe" section.
10:41:56 <jewel> cool stuff
10:42:08 <jewel> and ideas for practicing?
10:42:17 <shapr> not really
10:42:23 <shapr> I've been working on TwistedHaskell
10:42:34 <jewel> yeah I started looking at the twisted stuff
10:42:43 <jewel> not sure if I've grasped exactly what it is yet
10:42:49 <shapr> I'm still not perfectly comfortable with Haskell, I just hang up on some stuff.
10:44:17 <jewel> unforunately I have to go now
10:44:21 <shapr> bye!
10:44:27 <jewel> catch you later
10:44:28 * shapr bounces around
10:44:31 <shapr> have fun!
11:11:18 <buggs> hoi
11:11:27 <shapr> hoi, hoe gaat het met jou?
11:11:41 <shapr> gutentag, wie geht es?
11:11:55 <shapr> bonjour, comment ça va?
11:11:58 <buggs> i woas ned
11:12:12 <shapr> y0, wassup?
11:12:19 <buggs> mir geht's gut
11:12:27 <buggs> ca va bien
11:12:41 <shapr> hei, kuis kulkee
11:12:41 <buggs> wassup
11:12:46 <shapr> hah :-)
11:12:57 <shapr> we are so multi-lingual.
11:13:10 <buggs> which one was the finnish?
11:13:19 <shapr> that was the "hei, kuis kulkee"
11:13:27 <shapr> the first one was dutch
11:13:41 <shapr> I'm not actually that multi-lingual
11:13:45 <buggs> ah
11:13:47 <shapr> I can get by in french, but that's about all.
11:13:50 <shapr> and english.
11:14:00 <shapr> which is my native language.
11:14:09 <shapr> and Python is my native programming language.
11:14:15 <shapr> but I'm trying to become fluent in Haskell.
11:14:19 <shapr> it's a beautiful language.
11:14:25 <buggs> argh
11:14:25 <buggs> lol
11:14:40 <buggs> i heard that
11:14:46 <shapr> what about you? what's your native programming language?
11:14:57 <buggs> many of my frinds use it very much
11:15:39 <buggs> well i think i would feel most comfortable in perl since i have looked at the sources
11:15:57 <buggs> but some others too ruby java C
11:16:01 <shapr> are you a professional programmer?
11:16:28 <buggs> i am a student currently
11:16:37 <buggs> but have worked as a programmer before
11:17:26 <buggs> some stuff in Progress DB's 4GL too
11:18:21 <shapr> I've heard of that, but don't know anything about it.
11:18:28 <shapr> I'd like to be a CS student at some point.
11:18:32 <buggs> and you?
11:18:33 <shapr> have you installed Hugs or GHC?
11:18:48 <shapr> I'm a professional programmer, I get paid to do Java and Python
11:18:56 <buggs> ghc
11:19:12 <shapr> I build websites with Zope, I'm hoping to do it with Haskell.
11:20:17 <shapr> hugs gives friendlier error messages
11:20:27 <shapr> but ghci makes binaries, and has more features
11:20:34 <buggs> you will have too search a bit for a provider with Haskell preinstalled i guess
11:21:36 <shapr> I have my own servers :-)
11:21:54 <shapr> well, knid of
11:22:21 <shapr> at least, I have the root password for my clients' servers, and they don't care what kind of tech I use, as long as it works.
11:22:40 <Heffalump> how do you want to integrate Haskell and the webserver?
11:23:10 <buggs> the binaries would suffice
11:23:26 <shapr> Heffalump: the Twisted server framework uses twisted.spread for IPC and RPC, so TwistedHaskell should let haskell become a normal peer in Twisted
11:23:41 <shapr> though I'd love to hear about a better way to do it.
11:24:13 <Heffalump> well, I'd like a properly usable mod_haskell
11:24:15 <buggs> shapr, what is Twisted ?
11:24:25 <shapr> Twisted can run underneath Zope as the protocol layer, so that's a smooth upgrade path for me.
11:24:39 <shapr> since all of my client stuff is currently written in Zope.
11:24:59 <shapr> buggs: it's a tcp/ip network server framework written in Python. you can find details at twistedmatrix.com
11:25:25 <shapr> Heffalump: doesn't mod_haskell require runhugs or something?
11:25:49 <shapr> I'd be happier writing ghc binaries.
11:26:42 <buggs> shapr, you could use CGI
11:28:01 <buggs> CGI communication is mostly done via enviroment variables
11:28:29 <shapr> yah, I've used it.
11:28:31 <buggs> unless when a POST occurs, then you also get data via STDIN
11:28:40 <shapr> but it's cheesy to start up a new executable everytime
11:29:17 <shapr> iirc, there's good Haskell support for CGI...
11:29:31 <buggs> yes, but there is FastCGI to speed it up
11:29:33 <shapr> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
11:29:44 <shapr> doesn't FCGI require application specific support though?
11:30:06 <shapr> buggs: that's a good point, I'll investigate FCGI
11:30:43 <shapr> see haskell CGI demos here: http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/WASH-CGI-gallery.html
11:34:47 <Heffalump> that's why I said "properly usable"
11:46:40 <shapr> imho, Zope integration would be a powerful thing.
12:44:41 <shapr> whee
12:45:38 * shapr tries to emulate showList with BananaEncodable
12:47:29 * shapr thinks
12:47:37 <shapr> so, I change BananaEncodable by adding showList
12:48:04 <shapr> with type [a] -> String
12:48:07 * shapr thinks
12:56:13 * shapr is confused
12:57:50 <shapr> how do I compile .hs files to .o files for faster loading and use of ghci?
12:58:14 <shapr> it seems to take HUnit forever to compile, and it happens every time I start ghci
12:58:15 <Heffalump> ghc -c ?
12:58:39 * shapr looks
13:00:16 <shapr> spiffy
13:00:31 <shapr> is there a cute way to get it do that to the entire dependency tree?
13:00:37 <shapr> hm, maybe ghc --make -c ?
13:00:48 <shapr> nope
13:01:11 <shapr> well, ghc --make does seem to build .o files
13:02:20 <shapr> heya dblack, wassup?
13:03:30 * shapr wrestles with instance Char
13:12:36 <dblack> hi shapr
13:13:57 <shapr> y0
13:14:48 * shapr grumbles
13:14:56 <dblack> shapr: what's instance Char?
13:15:04 * dblack publicly displays his ignorance
13:15:18 <shapr> I'm writing a serialization module
13:15:25 <shapr> in Haskell, String is actually [Char]
13:15:29 <Heffalump> shouldn't the next thing after instance be a type class?
13:15:30 <shapr> it's not a separate type of its own.
13:15:37 <shapr> Heffalump: yes, it should
13:15:39 <shapr> it is actually
13:15:45 <Heffalump> good good :-)
13:15:56 <shapr> so, I want to treat [Char] as a separate type
13:16:12 <shapr> and yet, I'd also like to be able to encode lists of this typeclass
13:16:16 <shapr> and I can't figure out how to do it.
13:16:39 <shapr> chillix suggested that I look at the "class Show" in the Prelude, since it has show and showList
13:16:55 <shapr> but I don't really understand how to do that for my own purposes.
13:17:20 <shapr> Igloo suggested that I make Char a separate typeclass, and then instance lists of that typeclass
13:17:48 <shapr> since I can't figure out how to do the show/showList bit, I think I'll try it the Igloo way
13:18:28 <shapr> Heffalump: any handy advice?
13:18:45 <shapr> do you understand the show/showList bit chillix was talking about?
13:19:33 * Heffalump stops to read carefully
13:20:27 <Heffalump> right, so you want
13:20:33 <Heffalump> instance Foo [Char]
13:20:39 <Heffalump> and you also want instance Foo a => Foo [a]
13:20:39 <Heffalump> ?
13:20:44 <shapr> right
13:20:53 <shapr> and that causes overlapping instances
13:20:56 <Heffalump> hmm.
13:21:03 <Heffalump> you could just turn on the flag to allow them
13:21:07 <shapr> ?
13:21:16 <shapr> what's the flag?
13:21:18 <Heffalump> -fallow-overlapping-instances or something
13:21:29 <shapr> good name :)
13:21:34 <Heffalump> I'm not sure I understand either ChilliX or Igloo's suggestions
13:21:56 <Heffalump> and since Igloo doesn't live downstairs from me any more I can't go and ask him :-)
13:22:55 <shapr> ChilliX was talking about class Foo where show :: a -> String ; showList :: [a] -> String
13:23:09 <shapr> that's what the Prelude's class Show has
13:23:22 <Heffalump> oh, so make class Foo deal with a and [a] separately?
13:23:26 <shapr> right
13:23:44 <Heffalump> I suppose you could do that, with a default for the [a] function that you could override for Char
13:24:06 <shapr> I had "instance Foo String" and "instance Foo a => [Foo]"
13:24:38 <Heffalump> huh?
13:24:43 <shapr> so Igloo suggested that I do something like "instance FooString String" and then "instance Foo a, FooString a => [a]"
13:24:59 <Heffalump> instance Foo a => [Foo] doesn't make sense
13:24:59 <shapr> er, that should have been "instance Foo a => [a]"
13:25:05 <Heffalump> YM Foo [a].
13:25:05 <Heffalump> right.
13:25:06 <shapr> right, typo
13:25:33 <shapr> both of those make sense now?
13:25:44 <Heffalump> is igloo's suggestion that you have instance FooString String and instance Foo a, FooString a => Foo [a] ?
13:25:55 <shapr> right
13:25:58 <shapr> that one I understand
13:26:02 <Heffalump> or maybe FooString [a] on the RHS?
13:26:10 <shapr> huh?
13:26:33 <Heffalump> I don't quite see what it's trying to do
13:26:58 <shapr> thing is, String is a separate type in twisted.spread, and I need to be able to encode it.
13:27:08 <shapr> but, I also need to be able to encode lists of Encodable
13:27:44 <shapr> lemme upload the source
13:27:57 <Heffalump> ok, I don't have a huge amount of time to look though
13:28:17 <shapr> http://kungens.kemi.fi/~shae/haskell/Banana.hs
13:28:27 <shapr> no worries
13:28:56 <shapr> the discussion so far has helped me :-)
13:29:11 <shapr> I think I can do the Igloo process
13:30:45 <Heffalump> your instance of BananaEncodable for Char doesn't define encode
13:30:46 * shapr thinks about FooString [a] on RHS
13:30:56 <Heffalump> and you need a default method for encodeList in your BananaEncodable
13:30:57 <shapr> right, I don't know what do about encode there.
13:31:06 <shapr> I do?
13:31:11 <Heffalump> isn't there a way of encoding a char?
13:31:18 <shapr> sure, treat it like a one char string
13:31:23 <shapr> oh
13:31:33 <shapr> so I just call encodeList [char]
13:31:33 <Heffalump> ok, so you should implement that.
13:31:35 <Heffalump> Hmmm.
13:31:38 <Heffalump> yes
13:31:38 <shapr> nifty
13:31:51 <Heffalump> you could even provide that as a default implementation
13:32:09 <shapr> how do I provide default implementations?
13:32:18 <Heffalump> just put a body in the class definition
13:32:20 * shapr flips through handy haskell books
13:32:23 <shapr> I can do that?
13:32:27 <shapr> cool!
13:32:41 <shapr> oh I see!
13:32:46 <shapr> Prelude does that!
13:32:47 <shapr> coooooool!!
13:32:51 * shapr bounces happily
13:33:30 * shapr thinks
13:34:18 <shapr> aha
13:34:28 <shapr> default implementations are cool
13:35:06 <Heffalump> I think your
13:35:07 <Heffalump> instance BananaEncodable a => BananaEncodable [a] where
13:35:08 <Heffalump> is wrong
13:35:16 <shapr> that's the crux of the problem
13:35:31 <Heffalump> you should be defining encode there
13:35:37 <shapr> ?
13:35:46 <Heffalump> which would be trivial if encodeList is already done as a default method
13:36:00 <Heffalump> but anyway, I suppose you can't actually write that if you want to avoid the overlapping instance
13:36:04 <Heffalump> hmm.
13:36:17 <shapr> ?
13:36:36 <Heffalump> will you want to encode things of type [[a]] ?
13:36:46 <shapr> I don't think so
13:36:48 <shapr> but I'm not sure.
13:37:09 <Heffalump> hmm
13:37:18 <shapr> since String is an instance of BananaEncodable, a list of [BananaEncodable] might be that
13:37:41 <shapr> is there a different way to approach this problem?
13:37:56 <Heffalump> I don't really understand Igloo's solution yet
13:38:00 <shapr> for some reason a typeclass feels like it's not the most elegant way to do it.
13:38:08 <Heffalump> in the end, -fallow-overlappying-instances might be the way to go
13:38:14 <shapr> hm
13:38:15 <Heffalump> no, I think a type class is the right thing to do here
13:38:26 <Heffalump> well, I can't think of a better way, anyway
13:38:37 <shapr> ok, many thanks for your time :-)
13:39:04 <shapr> igloo solution is about cutting [Char] out of [BananaEncodable]
13:39:09 <shapr> then the instances don't overlap
13:39:28 <Heffalump> I sort of see that, but then I don't see how you can ever have a class that handles both [Char] and [a]
13:39:39 <Heffalump> oh, I see, possibly
13:39:42 <shapr> you do?
13:39:44 <shapr> tell me?
13:40:01 <Heffalump> basically you have class BananaEncodableNotChar ...
13:40:05 <shapr> right
13:40:07 <Heffalump> then you do
13:40:26 <Heffalump> instance BananaEncodableNotChar a => instance BananaEncodableNotChar [a]
13:40:38 <Heffalump> and instance BananaEncodableNotChar a => instance BananaEncodable a
13:40:45 <Heffalump> and instance BananaEncodable Char
13:40:50 <Heffalump> and instance BananaEncodable [Char]
13:41:04 <Heffalump> and of course instance BananaEncodableNotChar Int (etc)
13:41:04 <shapr> ?
13:41:24 <shapr> I think that instance Foo Char and instance Foo [Char] will always overlap.
13:41:26 <Heffalump> in fact possibly instance BananaEncodableNotChar [Char] is what you want
13:41:27 <shapr> am I missing something?
13:41:29 <Heffalump> no, they won't
13:41:38 <Heffalump> as long as you don't have instance Foo a => Foo [a]
13:42:13 <shapr> hm
13:42:48 <shapr> then how do I do instance BananaEncodable a => [a]  ?
13:42:57 * shapr thinks about that
13:43:33 <Heffalump> that'll come from instance BananaEncodableNotChar a => instance BananaEncodableNotChar [a] => instance BananaEncodeable [a]
13:43:58 <Heffalump> basically you have a typeclass for everything except Char.
13:46:30 <shapr> ok, I'll try it.
13:50:11 <buggs> when compiling ghc, does it really need libgmp.so.2 or is a symlink to libgmp.so.3 ok for it?
13:51:16 <Heffalump> libgmp.so.3 should be fine
13:51:22 <Heffalump> but what are you planning to symlink to .3?
13:51:31 <buggs> thx
13:51:43 <Heffalump> it should be looking at whatever the libgmp.so symlink is
13:51:46 <buggs> yes
13:51:54 <buggs> better way ?
13:52:11 <Heffalump> sorry?
13:52:20 <buggs> well i planned ln -s .3 .2
13:52:29 <Heffalump> hmm, don't do that
13:52:35 <Heffalump> what does libgmp.so point to?
13:52:52 <buggs> .3.1.1
13:53:24 <Heffalump> where did you install ghc from?
13:53:55 <buggs> the source tar.bz2
13:54:33 <buggs> there is an old 4.0 ghc already installed, hope it doesn't take hints from that
13:54:48 <buggs> because it is partly broken
13:54:51 <Heffalump> you're bootstrapping from hc files?
13:55:46 <buggs> i just downloaded and type ./configure && make
13:56:50 <Heffalump> you do realise you need GHC binaries to be able to build GHC?
13:56:59 <Heffalump> since it's written in itself
13:57:18 <buggs> ah
13:57:29 <buggs> then it probably takes the old one
13:57:35 <Heffalump> what version is that?
13:58:17 <buggs> 4.08.1
13:58:37 <buggs> is there a way to bootstrap without ghc binaries?
13:58:38 <Heffalump> hmm. I believe 4.08.2 is considered ok to compile GHC 5, but I'm not sure about 4.08.1
13:58:43 <Heffalump> yes, from .hc files
13:59:00 <Heffalump> it's really more effort than it's worth unless you're a real purist about compiling from source
13:59:08 <Heffalump> and even .hc files aren't really "source"
13:59:26 <Heffalump> they're the intermediate C output of compiling GHC with itself
13:59:36 <buggs> i'll get the binaries first then ;)
13:59:59 * buggs wonders how his ports system on freebsd does it
14:00:48 <pesco> buggs: From what I've heard, they download a minimal binary and compile with that.
14:00:57 <Heffalump> a "minimal" binary?
14:01:20 <buggs> yes i just saw that in the Makefile peso
14:01:30 <buggs> *pesco
14:01:55 <buggs> and the Maintainer is simonmar@microsoft.com
14:02:01 <pesco> Heffalump: Well, nothing more than needed. Probably no less than a usual compile without GHCi or so.
14:02:02 <buggs> :)
14:03:19 <buggs> microsoft helps fund the ghc developement ?
14:04:08 <Heffalump> they employ some of the top GHC developers (Simon Peyton-Jones and Simon Marlow in particular) at MS Research Cambridge
14:04:50 <buggs> interesting
14:05:55 <buggs> do they their own compiler for windows then ?
14:06:04 <buggs> *+have
14:06:40 <Heffalump> GHC has existed for Windows for a long time, I think
14:06:55 <Heffalump> maybe it gets a bit more attention now that they are at MSR-C, but I'm sure it was around before they moved there
14:07:05 <buggs> but they don't fork it ?
14:07:23 <Heffalump> why would they?
14:08:02 <buggs> well they do bad things sometimes
14:08:21 <Heffalump> they usually have a good (for them) reason to, though
14:08:24 <buggs> or good whatever your side of the fence is
14:09:51 <buggs> do they market it already?
14:10:00 <Heffalump> no, and I doubt they ever will
14:10:07 <Heffalump> it's a research compiler really
14:10:51 * buggs heard about industrial strength language that already is in use
14:11:32 <Heffalump> it's a pretty /good/ research compiler
14:11:48 <Heffalump> but essentially the spread of Haskell isn't enough that people would also pay for a compiler for it
14:11:52 <buggs> :)
14:13:26 <pesco> Unite freedom-loving coders, help Haskell despread!
14:14:01 <Heffalump> I think I'd rather have a good GHC that M$ help pay for than a mediocre one that was free of M$
14:14:15 <shapr> despread?
14:14:26 <Heffalump> it's BSD licence, so if M$ did at any point take it proprietary someone could just take it over from the last free release
14:14:34 <pesco> Yeah, we can still take up the fight should they really do bad things.
14:15:04 <buggs> well Heffalump until they would make it incompatibe :(
14:15:11 <buggs> see J++
14:15:27 <Heffalump> it wouldn't be a Haskell '98 compiler if they made it incompatible...
14:15:33 <Heffalump> people would just ignore it
14:15:40 <pesco> Do you really think so?
14:16:02 <buggs> ppl didn't ignore J++
14:16:27 <pesco> They would just introduce their proprietary extensions. Added value.
14:16:33 <Heffalump> I think if Haskell ever got as widely used as Java then any such problems would be well worth it
14:16:45 <Heffalump> GHC already has its own extensions, anyway
14:16:51 <pesco> Exactly the point.
14:16:59 <pesco> GHC is _now_ free.
14:17:19 <pesco> Which makes it ok that it has proprietary extensions, because everyone can have them for free.
14:17:35 <Heffalump> the fact that it's now mostly developed at MSR-C is irrelevant to this discussion, really
14:17:48 <pesco> That's true.
14:17:59 <Heffalump> it's the fact that it's under BSD licence that's the point
14:18:24 <pesco> Right, but doesn't MS have a good share of influence on the licensing? I'd think so.
14:18:24 <Heffalump> and I really don't want to get into a licence flamefest^Wdiscussion now :-)
14:18:39 <Heffalump> yes, but the current code is BSD licenced, and they can't retract that
14:18:39 <pesco> awww
14:19:01 <pesco> No I meant, did MS influence the decision for a BSD license in the first place?
14:19:12 <pesco> But you're correct, it's of little importance now.
14:19:14 <Heffalump> if they suddenly decide to tighten it up, it'd be no different to them suddenly hiring Simon Marlow and Simon PJ and taking it proprietary all at the same time
14:19:35 <Heffalump> as long as they keep releasing under BSD, where they work doesn't matter
14:19:45 <Heffalump> I'm not sure - I suspect it was BSD to begin with
14:19:53 <Heffalump> a lot of academic stuff is
14:20:28 <pesco> It all boils down to "I don't want MS to force me into buying their product".
14:20:58 <pesco> Unfortunately that's exactly their job. That's everybody's job in a capitalist society.
14:21:06 <Heffalump> neither do I, but it's just as much of a problem for FreeBSD as it is for GHC (leaving aside specific differences between BSD and Haskell)
14:21:21 <Heffalump> no, everybody's job should be to offer you a good choice of their product
14:21:28 <Heffalump> monopolistic behaviour is what makes capitalism fail
14:22:14 <pesco> You're exactly right.
14:22:28 <pesco> Everybody's job _should_ be to offer a good choice.
14:23:08 <pesco> Unfortunately their job actually _is_ to make money, capital. And that's what they do.
14:23:54 <Heffalump> the "capital" in capitalism actually refers to the fact that the market is driven by investment (which is what capital is)
14:24:12 <pesco> I see.
14:24:49 <pesco> So, can you restate the basic idea?
14:25:04 <Heffalump> >> capitalism \cap"i*tal*is`m\
14:25:04 <Heffalump> >> (k[a^]p"[i^]*tal*[i^]z`m), n.  An economic system
14:25:04 <Heffalump> >> based on predominantly private (individual  or
14:25:04 <Heffalump> >> corporate) investment in and ownership of the means
14:25:04 <Heffalump> >> of  production, distribution, and exchange of goods
14:25:06 <Heffalump> >> and wealth;  contrasted with socialism or especially
14:25:09 <Heffalump> >> communism, in  which the state has the predominant
14:25:11 <Heffalump> >> role in the economy.
14:27:01 <buggs> well capitalism doesn't mean you should screw ppl at all cost
14:27:14 <pesco> No, it means you do.
14:27:36 <pesco> Unless you have high morale and ethics.
14:27:56 <buggs> no and that's where the problem is
14:28:05 <buggs> you live in a society
14:28:13 <buggs> a community
14:28:37 <buggs> it is not good to live at the edges of the rules of the society
14:28:38 <Heffalump> the definition of capitalism doesn't say anything about what people should or shouldn't do
14:28:48 <buggs> not good for the society that is
14:29:03 <buggs> and you are part of the society, so you suffer too
14:29:19 <pesco> buggs: What do you mean by "live at the edges of the rules of the society"?
14:29:24 <Heffalump> you don't necessarily suffer.
14:30:18 <buggs> example, soon we will have strong laws against cybercrime
14:30:44 <buggs> those that do it will suffer, so will i (am not doing it btw)
14:31:38 <buggs> those laws the society will make to protect itslef, usually, make suffer all ppl
14:31:48 <Heffalump> Bill Gates has been very successful living at the edges of the rules (on monopolies)
14:32:06 <buggs> yes
14:32:50 <pesco> *giggle*
14:33:12 <pesco> Those who are punished suffer.
14:35:03 * buggs hurries up to install his free version of ghc ;)
16:35:49 <Igloo> Having played around briefly I'm not convinced my idea can work. I suspect this is a sideeffect of class instance exports being handled poorly by Haskell (IMO)
16:36:43 <Heffalump> what about my idea, which is me stating what I thought you meant (as communicated by shapr)?
16:37:45 <Heffalump> and if you reply to my email about ghc soon, I'll start it building before I go to bed
16:44:47 <Igloo> What I meant was something like http://c93.keble.ox.ac.uk/~ian/foo/foo.lhs   I didn't read what you wrote very well
16:45:15 <Igloo> I have no idea is the answer
16:45:31 <Heffalump> oh, ok, that's sort of similar
16:45:36 <Heffalump> but a bit different
16:45:39 <Heffalump> ok. I'll leave it out then.
16:46:31 <Igloo> OK, I'll try building Haskell2LaTeX at some point and see if tit breaks...not that I'm sure the current incarnation would anyway
17:04:18 * Heffalump remembers to actually start the build going
21:31:58 <vinicius> exit
