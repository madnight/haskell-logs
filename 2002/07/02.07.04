00:32:31 * shapr sproings
02:10:41 * shapr bounces
02:55:52 * shapr sproings
03:05:50 --- topic: set to 'http://icfp2002.cs.brown.edu/ - looking for net accessible cvs and team members for a #haskell ICFP entry (shapr)' by shapr
03:11:31 * Heffalump can provide net accessible CVS
03:11:37 <shapr> yay!
03:12:02 <Heffalump> at least I think I can
03:12:11 <Heffalump> need to check on the security of pserver with users
03:12:26 <shapr> using ssh?
03:12:54 * shapr tries to remember...
03:13:04 <shapr> "export CVS_RSH=ssh" I tihnk
03:13:06 <shapr> think
03:13:38 <Heffalump> yes, but that involves giving user accounts
03:13:42 <shapr> oh
03:13:51 <shapr> what about one haskell team login?
03:14:08 <shapr> either that or finalizing the team a week or so ahead of time
03:14:45 <Heffalump> do you know who the team will be at all?
03:14:51 <shapr> I've been thinking about a Code Blackboard for IRC
03:14:56 <shapr> nope, no clue.
03:15:14 <Heffalump> as a Wiki page?
03:15:37 <shapr> I'd like to use a code wiki, but I haven't thought of a good way to do that
03:16:03 <shapr> one thing I have thought of is a ghci bot, where you can dcc source to load
03:16:23 <shapr> obviously, you'd require User Mode Linux or so to get real security.
03:17:32 <shapr> Twisted has irc support, so once Perspective Broker is finished, I could publish a ghci instance as a Twisted service, and therefore, an irc bot. It'd be simple with PB.
03:17:53 * shapr thinks
03:18:10 * Igloo raises an eyebrow
03:18:11 <shapr> Twisted can run MoinMoin as a PB service also, so maybe a CodeWiki *would* work.
03:18:17 <shapr> hm!
03:19:08 <Igloo> My impression of wikis so far is they suck for simultaneous updates, which would make them a silly choice for a team of programmers with a tight schedule IMO
03:19:39 <shapr> iirc, moin can use cvs as a backend
03:20:11 <shapr> wikis don't support change merging
03:21:11 <shapr> I'd like to see an automatically updated unit test report for each commit.
03:21:55 <shapr> that would require unit tests to be written first, which I also like :-)
03:22:15 <Igloo> :-)
03:22:32 <shapr> I need to use QuickCheck enough to be comfortable with it.
03:22:49 * shapr considers adding QuickCheck tests to Banana.hs
03:23:01 <shapr> yah, I'll do that when I have time.
03:25:16 <shapr> partial application is powerful
03:26:02 <shapr> I need to learn more about transforming functions, that's something I've not been able to do in any other language.
03:26:45 <shapr> lifting a function effectively retypes it, can I generate a function with more specific type in a similar way?
03:27:22 <shapr> charType :: ([a] -> [a]) -> ([Char] -> [Char])
03:28:04 <Heffalump> you could write
03:28:18 <Heffalump> charType :: (Show a,Read a) => ([a] -> [a]) -> ([Char] -> [Char])
03:28:37 <shapr> why the class stuff?
03:28:53 <Heffalump> cos that's the only way you could convert [a] into [Char] and back that I can think of
03:30:41 <shapr> afaiu, giving a function a more specific type can make it faster, is that true?
03:30:54 <Heffalump> in certain cases with GHC, yes
03:30:56 <shapr> if it is true, would you get a faster function by retyping it as above?
03:31:04 <Heffalump> no chance
03:31:07 <shapr> oh
03:31:08 <shapr> hm
03:31:27 <Heffalump> the GHC stuff relates to it being able to unbox the types sometimes, IIRC
03:31:51 <shapr> oh well
03:48:54 <shapr> neel krishnaswami made an interesting post about speedy implementations of FPLs on comp.lang.functional
03:50:23 <shapr> specifically: Message-ID: <slrnai0dnq.75p.neelk@h00045a4799d6.ne.client2.attbi.com>
03:51:44 <shapr> afair, OCaml is considered the fastest FPL for compiled code
03:52:05 <Igloo> You can request that GHC build a specialised version with the SPECIALIZE pragma
03:52:13 <shapr> hm, nifty
03:52:30 <shapr> I haven't even started to use pragmas, though I've read a bit about them.
03:52:50 <shapr> does SPECIALIZE allow GHC to unbox the types?
03:53:08 <Igloo> You give it a type signature to specialise to
03:53:21 <shapr> cool
03:53:26 <Igloo> Something like {-# SPECIALIZE foo :: Char -> Char #-}
03:53:38 <Igloo> where foo :: a -> a is defined in the code
03:54:22 <Igloo> No particular reason to use pragmas when writing Haskell'98 - it can just improve the performance of your code
03:55:47 <shapr> pragmas seem a bit cheesy to me
03:56:04 <shapr>  I would think the time would be better spent reading the GHC source and looking for better overall optimizations.
03:56:11 <shapr> maybe I'm just being a purist :-)
04:12:15 <shapr> hi elmex
04:12:18 <elmex> hi
04:12:25 <shapr> how's the Haskell docs treating you so far?
04:12:35 <Igloo> Well, the bes approach is to write your code as you think best and then patch GHC to optimise this as well as possible
04:12:43 <elmex> i am read a bit of the gentle intro
04:12:46 <elmex> s/am//
04:13:03 <shapr> elmex: what do you think of the intro so far?
04:13:23 <elmex> shapr: hm, i still dont know how to code in haskell ;)
04:13:35 <shapr> elmex: have you tried some stuff in hugs?
04:13:56 <elmex> shapr: i took some look at the demos
04:14:52 <elmex> i will read the rest of the intro..
04:15:18 <shapr> ok, if you have any questions, feel free to ask.
04:17:15 <shapr> elmex: do you know Mandelbrot fractals?
04:17:57 <shapr> my first Haskell program was a fractal grapher with text output, in http://purl.org/net/shapr/haskell/
04:18:03 <elmex> shapr: heh, only how they look. but i am not as experiences in maths that i know of the algos behind them
04:21:21 <Igloo> text as in ASCII art?
04:21:24 <shapr> yup
04:21:29 <Igloo> Cool  :-)
04:21:34 <shapr> it's pretty simple
04:21:54 <shapr> I'd like to hook it into a gtk widget or something equally graphical at some point...
04:22:28 <Igloo> Should be very simple if it doesn't take any input
04:22:38 <shapr> it doesn't take any input
04:23:47 <shapr> it's a pretty straight up port of the source on this page: http://www.cygnus-software.com/theory/theory.htm
04:23:58 <shapr> so if you know already know C, you might find it useful to compare the two.
04:25:40 <Igloo> I think mapM_ would simplify your example execution
04:26:24 <shapr> mapM_ instead of "sequence_ $ map" ?
04:26:29 <Igloo> Yup
04:26:37 <shapr> ok, I'll put that in
04:26:42 <Igloo> Ah, and in printIt
04:27:56 <shapr> partial application makes writing the bail function much fun
04:27:59 <Igloo> Given what I know about fractals I'd have thought a pair of nested list comprehensions would be good for a more functional implementation, but my knowledge/memory could be off there
04:28:15 <shapr> it might be better
04:28:15 <Igloo> bail?
04:28:28 <shapr> bail tells you when to stop iterating on a point.
04:28:38 <shapr> short for "bail out"
04:28:40 <Igloo> Ah, right
04:28:47 <shapr> something I picked up living in california
04:29:08 <shapr> "dude, like, I had to totally bail out!"
04:29:21 <Igloo> itimesf doesn't seem to be used
04:29:27 <Igloo> :-)
04:29:30 <elmex> data Point a            = Pt a a - wtf. is: 'Pt' and 'a' ?
04:30:23 <shapr> Igloo: itimesf was so I would remember how to use fromIntegral
04:30:54 <Igloo> Ah  :-)
04:31:23 <shapr> elmex: it looks like a type constructor.
04:31:28 <Igloo> elmex: Pt is a data constructor and a is a type variable
04:31:42 <Igloo> So (Pt 5 8) is a value of type (Point Int)
04:31:45 <shapr> oh
04:31:45 <elmex> ah...
04:32:22 <elmex> rate of confusion increases while reading...
04:32:49 <shapr> elmex: I'd suggest trying the code you see in ghci or hugs
04:33:13 <shapr> and then trying to alter it to do something slightly different
04:33:15 <elmex> Prelude> data Point a = Point a a
04:33:15 <elmex> ERROR - Syntax error in expression (unexpected keyword "data")
04:33:28 <shapr> are you using hugs or ghci?
04:33:32 <elmex> hugs
04:33:40 <shapr> cool, good choice
04:33:52 <elmex> it was first in the list ;)
04:34:01 <Igloo> You'll need to put datatype definitions in a module and load that in hugs
04:34:08 <shapr> I think that "data" expressions can't be interactively input
04:34:13 <shapr> yah, what Igloo said
04:34:21 <elmex> ?! what is a module? what is loading? huh?
04:34:34 <shapr> elmex: have you used other programming languages?
04:34:42 <shapr> if so, which ones?
04:34:43 <elmex> heh, C, C++ and Perl
04:34:46 <shapr> ok, cool
04:35:04 <shapr> that way I can use familiar terminology :-)
04:35:15 <shapr> a module is a file containing source code
04:35:33 <shapr> and you can import it into another module
04:35:37 <shapr> so:
04:35:43 <shapr> module MyModule where
04:35:47 <shapr> import Char
04:35:51 <shapr> main = putStr "foo"
04:36:16 <shapr> that's a minimal example of a module
04:36:37 <shapr> if you have that saved as MyModule.hs
04:36:45 <elmex> MyModule> main
04:36:45 <elmex> foo
04:36:49 <shapr> you would type ":load MyModule.hs"
04:36:55 <shapr> ah, you already know how to load files
04:37:11 <elmex> hugs my.hs
04:37:13 <elmex> ;)
04:37:18 <shapr> the Prelude is implicitly imported into every module
04:37:18 <elmex> but :load works.. ah
04:37:43 <shapr> so all the Prelude code is already available
04:38:01 <shapr> I edit my source file and do :reload
04:38:05 <shapr> though I don't know if hugs has that
04:38:15 <elmex> :reload             repeat last load command
04:38:23 <elmex> MyModule> :browse MyModule
04:38:23 <elmex> module MyModule where
04:38:23 <elmex> main :: IO ()
04:38:24 <elmex> ah, nice
04:38:42 <shapr> you can also use ":t" and ":info" commands
04:38:57 <shapr> for example ":t main" or ":t map"
04:39:13 <shapr> or ":info map" or ":info main"
04:39:28 <shapr> ":?" shows you a list of commands
04:39:32 <shapr> and you can define your own
04:39:34 <elmex> yea
04:39:44 <elmex> map :: (a -> b) -> [a] -> [b] - what does that mean?
04:39:58 <shapr> that tells you what inputs it takes, and what output it gives
04:40:14 <shapr> so you could define a function like this:
04:40:14 <elmex> and what does it take?
04:40:19 <shapr> addZero :: Int -> Int
04:40:30 <shapr> addZero theNumber = 0 + theNumber
04:40:45 <shapr> that means that it takes an Int as input, and returns an Int as output
04:40:52 <elmex> addZero theNumber = "foo" would be invalid as its of type Int -> Int ?
04:41:04 <shapr> that's right
04:41:16 <elmex> ah, ok
04:41:25 <shapr> try typing the two lines of addZero into your source and :reload
04:41:39 <shapr> then you can do "addZero 1" at the hugs prompt
04:42:16 <elmex> ah
04:42:18 <shapr> in most cases, haskell can figure out the correct type signature for you
04:42:38 <shapr> for example, type "addOne myNumber = myNumber + 1" into your source file
04:42:43 <shapr> and then reload
04:42:53 <shapr> then try ":t addZero"
04:42:58 <shapr> and ":t addOne"
04:43:50 <elmex> ah, ok
04:43:51 <elmex> MyModule> :t addOne
04:43:51 <elmex> addOne :: Int -> Int
04:45:45 <shapr> Haskell has two major integer types, Int and Integer
04:46:09 <shapr> try typing "addOne (1 :: Integer)" at the hugs prompt
04:46:31 <shapr> in ghci, I can explicitly give a type to something with (value :: type)
04:46:36 <shapr> I think that works in hugs also, though I'm not sure.
04:46:44 <elmex> MyModule> addOne (3  :: Integer)
04:46:44 <elmex> ERROR - Type error in application
04:46:58 <shapr> do you know why it says that?
04:47:25 <elmex> Integer != Int ?
04:47:29 <shapr> correct!
04:48:05 <shapr> this is something that bites me pretty often
04:48:15 <shapr> I define half of my code to work with Int, and the other half to work with Integer
04:48:19 <shapr> and then I get a type error somewhere
04:48:26 <elmex> hhehe
04:48:29 <shapr> happily, it's very simple to turn one into the other
04:48:44 <elmex> addOne 10 = 255
04:48:45 <elmex> addOne num = addOne (num + 1)
04:48:45 <elmex> heh
04:49:28 <shapr> heh, nifty :-)
04:50:08 <shapr> do you know how you could get addOne to work with Integers and not Ints?
04:50:31 <elmex> addOne :: Integer -> Integer
04:50:41 <shapr> that's right.
04:51:05 <shapr> try ":t (+)"
04:51:13 <shapr> what type signature does that give you?
04:51:21 <elmex> hm, (+) :: Num a => a -> a -> a
04:51:30 <shapr> can you guess what that means?
04:51:57 <elmex> hm, nope. only that all Num-types are meant
04:51:58 <shapr> there are two separate new things there
04:52:03 <shapr> right, that's the first one
04:52:18 <shapr> "Foo a =>" means "anything that is a Foo"
04:52:49 <shapr> ok, write "add2Num x y = x + y" into your source file, reload, and look at its type.
04:53:18 <Igloo> Hmmm, it means "For any type a that is an instance of Foo;"
04:54:16 <elmex> ah
04:54:27 <elmex> why does add2Num :: Num -> Num not work?
04:54:58 <Igloo> First of all you mean Num -> Num -> Num. Secondly Num is a type class, not a type
04:55:09 <elmex> ah, oh
04:55:14 <elmex> what does -> mean ?
04:55:51 <Igloo> It builds a type out of two type
04:56:06 <Igloo> Int -> Int is a function that takes an Int and returns an Int
04:56:20 <Igloo> Int -> (Int -> Int) is a functino that takes an Int and returns something of the above type
04:56:23 <shapr> elmex: unlike C, you don't have to tell Haskell what type a function is
04:56:30 <shapr> it can guess what the type should be
04:56:31 <Igloo> Int -> Int -> Int is the same (-> is right associative)
04:57:18 <shapr> I often write my code with no type signature, and then later I come back and add a type signature when I know what should be there.
04:57:19 <elmex> but why 3 times Int -> ?
04:57:35 <Igloo> You want to add 2 numbers together right?
04:57:39 <elmex> yes
04:57:42 <shapr> because under the hood, every function in Haskell takes one argument, and returns one argument.
04:57:58 <Igloo> So first you take one number, say 5. Then you return a function that takes a number and returns 5 plus that number.
04:58:02 <shapr> so if you give one Int to add2Num, it returns a new function, of type Int -> Int
04:58:29 <Igloo> (5 +) is a Haskell function of type Int -> Int (give or take type classes)
04:58:37 <elmex> ERROR - Cannot find "show" function for:
04:58:37 <elmex> *** Expression : add2Num 4
04:58:37 <elmex> *** Of type    : Integer -> Integer
04:58:38 <elmex> ah, yea
04:58:51 <shapr> that's called partial application
04:59:00 <shapr> it's a powerful tool
04:59:20 <shapr> do you already know how map works?
04:59:41 <elmex> hm
04:59:47 <elmex> nope
04:59:57 <shapr> ok, we'll skip that for the moment then
05:00:18 <shapr> as for partial application, you can define a more general function, and then specify part of its arguments later
05:02:17 <shapr> well, keep reading through the gentle intro, try the code, and come back with questions
05:02:18 <elmex> i still dont understand the meaning of Int -> Int -> Int ...
05:02:33 <shapr> well, Int -> Int means, takes one Int, returns one Int
05:02:33 <shapr> right?
05:02:41 <elmex> yes
05:03:07 <shapr> if you write the other type more specifically, it's actually Int -> (Int -> Int)
05:03:23 <shapr> which means "takes one int, returns one function"
05:03:32 <shapr> and that function has type of Int -> Int
05:03:36 <elmex> ah
05:04:03 <shapr> that's what Igloo meant when he said it's right associative
05:04:10 <shapr> at least, I think that's what that means :-)
05:04:24 <elmex> hm, yes
05:04:39 <shapr> so you could define the addOne function another way as well
05:04:50 <shapr> "addOne = (1 +)"
05:05:32 <shapr> because the type of (+) is Int -> (Int -> Int)
05:06:00 <elmex> huh?
05:06:05 <shapr> so (1 +) fills in that first Int, and returns a new function that adds 1 to an Int that you give to it.
05:06:42 <shapr> in Haskell, a function is a variable or value just as much as a number is
05:07:01 <shapr> you can return new functions, change existing functions, all kinds of cool stuff like that.
05:07:37 <shapr> let's use the add2Num function
05:08:06 <shapr> under the hood, add2Num only takes one argument
05:08:12 <shapr> one Int
05:08:34 <shapr> what it returns is a new function that only takes one argument, a single Int
05:10:06 <shapr> elmex: still there?
05:10:11 <elmex> of course
05:10:15 <shapr> ok :-)
05:10:36 <shapr> do you understand?
05:11:01 <elmex> add2Num 0 x = x
05:11:01 <elmex> add2Num x y = add2Num 0 x + add2Num 0 y
05:11:04 <elmex> a bit...
05:11:44 <elmex> how can (1 +) be valid syntax?
05:11:44 <shapr> ok
05:11:53 <Heffalump> it just is
05:12:01 <Heffalump> it's equivalent to (+) 1
05:12:12 <shapr> because operators are normal functions just like any other function you define
05:13:49 <shapr> I really like the regularity/orthogonality of "everything is a function" in Haskell.
05:14:28 <elmex> Int -> Int -> Int - means, take a Int, return (Int -> Int) .. but what does haskell do with the Int -> Int ?
05:14:52 <shapr> huh?
05:14:55 <elmex> why does it evaluate the result (Int -> Int)
05:15:00 <shapr> it doesn't
05:15:10 <elmex> and not just return that function
05:15:13 <shapr> it does
05:15:43 <shapr> when you call it with "(+) 1 2" you first hand it the one, then it returns a new function
05:15:51 <shapr> then you pass the two the returned function.
05:16:00 <shapr> er "to the"
05:16:07 <shapr> see?
05:16:13 <elmex> ah
05:16:19 <elmex> ((+) 1) 2
05:16:23 <shapr> yes!
05:16:48 <shapr> part of the secret is that function application is the most tightly binding operation in Haskell
05:16:50 <elmex> arg.. that remids me a bit to lisp ;) i learned some parts of lisp last week
05:17:05 <shapr> lisp has its good points, but I prefer Haskell.
05:17:39 <elmex> add2Num :: Int -> Int -> Int
05:17:39 <elmex> add2Num x = ((+) x)
05:17:50 <elmex> hah, it works!
05:17:56 <elmex> i understand it !
05:17:59 <shapr> yay!
05:18:01 * shapr bounces
05:18:06 <elmex> heh
05:18:14 <shapr> understanding is a good thing.
05:18:24 <elmex> of course, it brings joy ;)
05:18:31 <shapr> well, to some people
05:19:18 <elmex> ok, i will go back to the intro and read on
05:19:25 <elmex> thanks ;) brb ;)
05:19:29 <shapr> sure!
05:19:55 * shapr goes back to writing Java, since that pays money.
06:06:37 * shapr sproings
06:07:33 * shapr tries to write referentially transparent java servlets
06:14:27 <shapr> hi ChoJin
06:14:30 <shapr> comment ca va?
06:15:32 <ChoJin> ca va
06:15:33 <ChoJin> :)
06:19:45 <shapr> elmex: more questions?
06:20:13 <elmex> just rereading the intro with the knowledge of functions as values and understanding it better ;)
06:20:19 <shapr> spiffy
06:20:29 <shapr> any interesting realizations?
06:21:44 <elmex> not yet
07:07:29 <shapr> hi shreya
07:16:59 * shapr wibbles
09:06:58 * shapr bounces
09:07:00 <shapr> hi ChoJin
09:44:24 * shapr bounces
09:45:11 <Igloo> Up to anything intreesting?
09:45:21 <shapr> not at the moment
09:45:33 <shapr> trying to get myself together to write some zope code
