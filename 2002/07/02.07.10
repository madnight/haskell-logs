00:52:48 <miph> hi all. anyone has a tip for me how to cross-compile haskell code on x86-linux for arm-linux?
01:10:04 <clausen> I don't think arm is supported by ghc
01:10:10 <clausen> (as a target)
01:10:56 <miph> i wanted to use gcc cross-compiler with ghc, but it just doesn't work. 
01:11:05 <miph> and I'm not too good in C :-(
01:11:33 <clausen> ah
01:11:49 * clausen never tried cross-compiling
01:11:58 <clausen> but, I think you do something like ./configure --arch=something
01:12:04 <miph> I think nhc has arm supported, but it didn't mention cross-compiling, and that's important for me, because I can't compile it on the iPaq ;)
01:12:08 <clausen> aha
01:12:47 <miph> never mind, I'll try some things and I just WILL make it work :-)
01:48:57 <shapr> hiya
01:59:27 <Heffalump> hi
02:56:57 * shapr returns from lunch
03:09:50 <shapr> hi Heffalump, what's up?
03:09:55 <shapr> still doing SML-NJ?
03:12:04 <Heffalump> we don't use SML-NJ much
03:12:37 <shapr> what are you working on?
03:12:43 <shapr> (if you don't mind me asking)
03:13:25 <Heffalump> "on" or "with"?
03:13:49 <shapr> e) all of the above
03:14:08 <shapr> last I heard you were doing IL rewritign
03:14:14 <shapr> "rewriting"
03:16:48 <Heffalump> yeah
03:16:54 <Heffalump> with Moscow ML/SML.NET mainly
03:17:00 <Heffalump> still doing the IL rewriting
03:17:05 <Heffalump> oh, and working on MAG a bit
03:17:13 <shapr> ah cool
04:10:19 <shapr> hi pertsa
04:21:28 <shapr> hello again pertsa
04:21:28 <shapr> kuis kulkee
04:21:51 * shapr enjoys reading comp.lang.functional
04:24:05 <shapr> wow, lotsa bouncing
04:35:47 <shapr> boing
04:37:18 <shapr> I wish bash had partial evaluation
04:37:44 <shapr> I have a tree of directories containing a bunch of java source code
04:38:08 <shapr> no makefile is included, so I have to just compile repeatedly in different directories to find the dependencies
04:38:34 <shapr> is there some way I can run a command in each subdir of the dir I'm in?
04:39:16 <shapr> aha
04:39:24 <shapr> duh
04:39:34 <shapr> I'm using zsh, so I can do javac **/*.java
05:01:47 <pertsa> hei vaan shapr. kuika hyvin osaat suomea?
05:02:43 <pertsa> (the finnish conspiracy)
05:02:54 <shapr> suomeani suksii =)
05:03:02 <pertsa> :)
05:04:06 * pertsa changes to finnish keyboard layout
05:04:32 <shapr> I use dvorak.
05:04:42 <shapr> truly, my finnish is crap
05:04:57 <pertsa> uhh, i tried drvorak yesterday
05:05:12 <pertsa> it was like learning to walk again :=
05:05:31 <shapr> hah
05:05:31 <shapr> I started using dvorak in 1992
05:05:33 * pertsa can not remember the palces of special symbols on the finnish keyboard
05:05:55 <shapr> right pinky finger :)
05:32:54 <pertsa> ekrpat ogjto S)
05:33:02 <shapr> ha
05:33:10 <pertsa> dan did not see the dot on his tie as he hid his tan hat
05:33:13 <shapr> dvorak
05:33:42 <shapr> sucks ?
05:33:51 <pertsa> f.o
05:33:57 <shapr> hah
05:34:09 <pertsa> no, not really
05:34:16 <shapr> I'm entertained :)
05:34:45 <shapr> if someone mistypes ? as L
05:34:47 <shapr> you know they're a dvorak user
05:35:06 <pertsa> :)
05:35:19 <pertsa> can you still use qwerty keyboard?
05:35:25 <shapr> sure
05:35:38 <shapr> I've never been able to touch type qwerty, but I can still use it
05:35:42 <shapr> I can touchtype dvorak though
05:36:06 <shapr> I use a kinesis-ergo keyboard about 97% of the time.
05:36:13 <pertsa> how well can one write code with dvorak?
05:36:24 <pertsa> it just pain w/ finnish layout
05:36:34 <pertsa> is
05:36:55 <shapr> it's nice with dvorak
05:37:02 <shapr> the symbols are closer
05:37:17 <shapr> instead of qwerty you have ',.py
05:37:37 * shapr looks for an example
05:38:23 <shapr> http://c2.com/cgi-bin/wiki?DvorakKeyboard
05:38:47 * Igloo appears for a bit in black and white
05:38:56 <shapr> I'm a contributor to that wiki page, and I created the matching DvorakKeyboardUsers page
05:39:03 <shapr> Igloo: using a public terminal?
05:39:20 <shapr> goggling into the metaverse without your own hardware? you must be deseperate ;)
05:39:25 <shapr> er "desperate"
05:40:03 <shapr> hiii Igloo
05:40:30 <Igloo> A friend's mac
05:40:38 <shapr> wow, nifty
05:41:00 <Igloo> "nifty telnet ssh" as it happens  :-I)
05:41:10 <shapr> good name
05:42:58 <shapr> I had a haskell question, wish I could remember what it was
05:43:13 <shapr> oh, I discovered last night that let and where both work like let* in elisp, not like let
05:43:31 <shapr> that means that all previously defined definitions are available in later definitions
05:44:43 <Igloo> Why would you not want that?
05:44:54 <shapr> I just didn't know it :)
05:45:05 <shapr> I was making sub let/in statements
05:45:14 <Igloo> I'm wondering why elisp wants a let command that behaves like that, though
05:45:28 <shapr> probably because it's simpler/faster/something
05:45:31 <pertsa> parallel execution?
05:45:37 <shapr> elisp is pretty cheesy
05:45:46 <shapr> no way, emacs is single threaded, and the elisp implementation is a MESS
05:45:54 <shapr> oh, hey...
05:46:17 <shapr> I found out that Michael Sperber (Mr Preprocessor) has implemented a translator from elisp to scheme
05:46:43 <shapr> supposedly it even outputs maintainable scheme source
05:46:47 <shapr> I'm tempted to rip it off for a Haskell implementation.
07:08:55 <|Fo|Ns> hi
07:09:26 <shapr> hiya
07:09:27 <shapr> what's up?
07:12:42 <shapr> hello |Fo|Ns, do you have any Haskell questions?
07:20:48 <|Fo|Ns> well, not now
07:20:55 <|Fo|Ns> thanks
07:21:12 <shapr> ok, if you have some, feel free to ask.
07:21:41 <|Fo|Ns> ok
07:22:30 * shapr continues working with Java, pain on every platform.
08:51:40 <loom2> hi, is there a better solution to delete an element from a list than delete n a = (take (n-1) a) ++ (drop n a)? i could not find one in the prelude.
08:52:55 <Igloo> Well,  you won't get more than a constant factor betgter efficiency
08:55:49 <loom2> igloo: ok, thanks.
08:58:38 * shapr bounces
08:59:27 <shapr> does Haskell have list slicing?
09:03:36 <Igloo> slice list = map (list !!) would be an inefficient implementation of it
09:03:45 <shapr> hm
09:04:02 <Igloo> If you wanted ranges you'd probably naturally go  with a more efficient, less concise version
10:34:11 * shapr bounces
11:36:58 * shapr bounces
11:53:52 <shapr> hi Dalroth
13:30:37 <shapr> yayyyy
13:30:39 <shapr> all unit tests are passing!
15:02:59 * shapr bounces
15:26:57 <shapr> yay, activity on haskell-libs-developers!
15:45:26 <hornby> ooh?
15:45:31 <hornby> shapr: All the tests are passing? 
15:45:37 <shapr> hornby: for Banana.hs
15:46:46 <hornby> awesome
15:46:52 <hornby_> hm
15:47:55 <hornby_> oh man, IRC from ICQ is a bad idea
15:48:20 <shapr> worked for me
15:49:13 <hornby> Anyway, so banana is done now? Thats awesome. :)
15:49:21 <hornby> jelly nexT?
15:49:32 <shapr> right!
15:49:37 <hornby> progress?
15:50:16 <shapr> not yet
15:50:53 <hornby> can I see banana? 
15:50:55 <hornby> and the tests/ :)
15:51:09 <shapr> sure
15:51:28 <shapr> the simplest way is to hit cvs.twistedmatrix.com and checkout the TwistedHaskell module
15:52:06 <shapr> or I can upload the latest versions to my website
15:54:52 <shapr> any preference?
16:15:18 <hornby> awesome
16:15:23 <hornby> doesn't matter
16:16:34 <shapr> http://kungens.kemi.fi/~shae/haskell/
16:28:25 <hornby> cool
16:33:52 <hornby> the htmls are really ugly with that neon green :)
16:37:17 <xbill> TwistedHaskell?
16:38:28 <hornby> shapr: I'm trying to run it in ghci, but it can't find some modules -- what packages do I need to use?
16:39:23 <hornby> can't find module `Util'
20:48:42 <hornby> shapr: come back :)
20:48:52 <hornby> shapr: make your Test_Banana.hs work
23:54:07 <shapr> hornby: you need to do :set -package data
23:54:11 <shapr> and you need to get HUnit
23:54:21 <hornby> shapr: oh
23:54:25 <hornby> Where do I get HUnit? : )
23:54:46 <shapr> sf.net/projects/hunit/
23:55:09 <hornby> cool
23:55:14 <shapr> I'm off to work
23:55:18 <hornby> later :) 
23:59:24 <hornby> ugh, now I just have to install HUnit. 
