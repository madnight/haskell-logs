02:49:36 <hennker> morning
05:46:50 <shreya> hi Khai
05:46:59 <Khai> hey shreya
05:47:21 <shreya> How are you?
05:47:33 <Khai> fantastic
05:49:11 <shreya> That's good to hear
06:59:20 <Heffalump> 'lo
07:32:17 <GnuVince_> Hi
07:33:05 <GnuVince_> Why is it that when I try to write a function in the top-level loop, I always get an error?
07:33:28 <GnuVince_> Prelude> inc n = n+1
07:33:29 <GnuVince_> <interactive>:1: parse error on input `='
07:33:29 <GnuVince_> Prelude>
07:33:57 <Igloo_> Because hugs doesn't let you do that
07:34:06 <Igloo_> Either put it in a module or a where clause
07:34:14 <GnuVince_> I'm using ghci
07:34:20 <Igloo_> e.g. inc 5 where inc n = n+1
07:34:52 <Igloo_> Same probably applies. In fact I think ghci is even more restrictive and won't even allow where clauses, so you'll need  let inc n = n + 1 in inc 5
07:35:53 <GnuVince_> OK
07:35:55 <GnuVince_> Thank you
07:36:47 * GnuVince_ finally decided to try Haskell
07:36:59 <GnuVince_> I'm hearing some very nice stuff about it
07:37:37 <Igloo_> Cool   :-)
07:38:11 <GnuVince_> Right now, I'm an O'Caml guy
07:38:25 <GnuVince_> but I felt it could help me to try a pure functional language
07:40:59 <GnuVince_> does GHC optyimize tail-recursion?
07:41:05 <GnuVince_> optimize
07:41:44 <Igloo_> I believe so, but I'm not an expert on the details of how the implementations work
07:41:57 <GnuVince_> ok
07:42:01 <Igloo_> I don't know if you'd need -O/-O2 for it to do so either
10:30:11 <pesco> GnuVince: GHCi treats its input as a sequence of IO Monads. That's why you can't use where.
10:31:59 <pesco> Gnu: let, however, does work. And also in the way you use it in do constructs.
10:32:15 <pesco> *Main> let a = "Hi"
10:32:24 <pesco> *Main> putStr a
10:32:38 <pesco> Hi
10:33:09 <pesco> Damn, he's left!
10:33:20 <pesco> No wonder X-Chat didn't complete his nick.
11:43:58 * shapr boings
11:46:49 <Igloo_> Hey shapr
11:46:53 <shapr> hi Igloo_!
11:46:56 <shapr> how are ya?
11:47:27 <Igloo> Not bad, but my connectivity could be better - that's the second Igloo_ I've fixed in the past 60 seconds  :-)
11:47:33 <shapr> wow, suckage
11:49:27 <Igloo> Probably actually OPN and Heff at fault in these 2 cases, though, and also probably one offs  :-)
11:49:39 <Igloo> How's life with you?
11:50:02 <shapr> I spent the day communing with nature.
11:50:05 <shapr> or something like that.
11:50:10 <Igloo> Oh?
11:50:17 <shapr> I have what feels like third degree sunburn :-)
11:50:44 <Igloo> :-/
11:51:00 <shapr> it was fun, since I only do that once every three years or so
11:51:49 <Igloo> Walking in mountains/forests with your girlfriend sort of thing?
11:52:38 <shapr> yah, something like that.
11:54:20 <pesco> "Oh heck, it's been another three years? Yah well, let's get it over with..."
11:54:31 <pesco> ;}
11:55:17 <shapr> I tried to check my email from the island we went to.. but we were out of range of all three bands my phone picks up.
11:55:35 <pesco> *giggle*
11:55:43 <shapr> I was getting d.t.'s from being out of reach of email :-)
11:55:56 <pesco> d.t.'s?
11:56:22 <shapr> delirium tremens, it's what addicts get when they can't get their drugs
11:56:37 <pesco> Ah, yes. :)
11:57:07 <pesco> Oh, see you later!
11:57:11 * pesco is away: Food!
11:58:32 * shapr starts up the code
11:59:06 <Igloo> Both good plans  :-)
12:57:45 * shapr reads Igloo's literate programming paper
13:20:22 * pesco is back (gone 01:23:11)
13:20:40 <pesco> Igloo: Oh, you have a paper on literate programming? URL?
13:22:10 <Igloo> Well, I'm not convinced shapr's description isn't a bit grand, but http://urchin.earth.li/~ian/Hetris/
13:23:25 <ibid> why does it state that literate programming was born in 1992? it's at least a decade off afaik
13:24:55 <Igloo> Because I took the date of publication of the collection, not the paper
13:25:07 * Igloo adds that to the pending fixes list  :-)
13:25:41 <ibid> knuth used lp in TeX82, and his WEB used in its writing is the first lp system to my knowledge
13:26:24 <xbill> anw/msg #haskell that's kind of odd
13:27:00 <ibid> xbill: ???
13:27:41 <xbill> That someone wouldn't have cited WEB as the 1st literate programming system.
13:28:00 <ibid> who wouldn't?
13:29:31 * xbill makes hyperdoctrine-related noises and moves along.
13:29:34 <Igloo> I gave the date of Knuth's book (1992) rather than the paper (1984) as I intended. Maybe 1982 would be a better date, though
13:32:24 <pesco> Igloo: Disregarding the LP-history issue, the document sounds really nice so far (first 3 chapters read).
13:33:24 <Igloo> Cool, thanks - I'm interested in any feedback (positive or negative)  :-)
13:33:59 <pesco> Especially it doesn't sound especially non-eloquent as you hint somewhere.
13:34:40 <pesco> Especially not like mine with its special tendency for tiring repetition.
13:35:09 <Igloo> Hmmm, maybe I'm too hard on myself. I'll see if anyone's still saying that when they reach the end  :-)
13:37:22 <pesco> :)
13:37:33 <pesco> How long did it take you to write it?
13:39:40 <pesco> Ah, a suggestion: Introduce the Data module in the Plan chapter along with all the other modules.
13:40:51 <Igloo> On June 27th I had something that used ncurses and the FFI but didn't really have much code (and no docs). I must have finished that snapshot on the 16th July
13:41:19 <pesco> I see.
13:41:36 <pesco> Are you using Green Card for the foreign functions?
13:41:43 <Igloo> Oh, good point
13:42:02 <Igloo> No, hsc2hs as it looked the simplest and powerful enough
13:42:25 <pesco> Ah, I haven't looked at that.
13:42:58 <Igloo> The code is all in the tarballs (they are identical but one has the binary that prettyprints the code)
13:43:44 <pesco> Ah?
13:44:00 <Igloo> "Ah?"?
13:44:28 <pesco> You pretty-print the code snippets?
13:45:07 <Igloo> Yes
13:45:09 <pesco> Ah, keywords are bold?
13:45:28 <pesco> Did you write the pretty-printer yourself as well?
13:45:29 <Igloo> Yeah, and -> is a proper arrow, that sort of thing
13:45:50 <pesco> Yeah, \rightarrow is really cool.
13:45:57 <pesco> Do you use proper \lambda's too?
13:47:28 <Igloo> Yup
13:47:49 <Igloo> Or I would do if there were any  :-)
13:47:59 <pesco> *g*
13:50:38 <pesco> I think it would be good to have a part talk about the actual process of producing the literal program.
13:51:43 <Igloo> Hmmm, I have my project writeup that does that
13:51:56 <pesco> Project writeup?
13:52:10 <Igloo> Haskell2LaTeX was my undergrad project
13:52:19 <pesco> Oic.
13:52:48 <Igloo> This is more frmo the point of view of the user of the literate system
13:53:15 <pesco> In that case I'd suggest a reference to it from the Hetris source.
13:53:23 <pesco> s/source/documentation/
13:53:51 <pesco> Where can I find Haskell2LaTeX if I want to use it myself?
13:54:08 <Igloo> Ah, good point. I need to put it somewhere first though, and that sort of implies polishing it off  :-)
13:54:20 <pesco> Oh. :(
13:55:21 <pesco> I'm quite fond of literate programming, but have constrained myself to doing it in ASCII, which yields surprisingly cute results, too, if you ask me...
13:55:43 <Igloo> Putting the code in verbatim you mean?
13:56:14 <pesco> No, I just write the document down as a plain ASCII text.
13:56:28 <Igloo> Oh, I see what you mean
13:56:33 <pesco> In a .lhs file along with the code, yes.
13:57:20 <pesco> Hm, the type Vector might be kind of misleading, one is tempted to suspect it to be a pair of Ints.
13:57:52 <Igloo> I don't like it either, but couldn't think of anything better
13:57:54 <pesco> I realize you must have spent some time already looking for a better name.
13:58:42 <pesco> And it's not wrong in the mathematical sense. But an explicit mention of the unusual meaning might be a good idea anyway.
13:59:14 <Igloo> *nod*
13:59:59 <pesco> Especially in respect to it being used to represent a position on a rectangular grid.
14:00:28 <Igloo> Yeah  :-)
14:01:02 <pesco> That almost feels as if indeed a 2D-vector would be justified.
14:02:04 <pesco> Why is the clock part of the UI?
14:03:10 <Igloo> Which page are you looking at?
14:03:16 <pesco> 6
14:03:25 <pesco> I stumbled over the Tick event.
14:03:50 <Igloo> Does it mention the UI on page 6?
14:04:07 <pesco> Not directly. It talks about the Event data type.
14:04:24 <Igloo> I don't understand what you mean, then
14:04:42 <pesco> Page 5 mentions the Event data type serving the purpose of communicating events from the UI to the Main module.
14:05:00 <Igloo> Timeouts happen in the UI module because the way they are done is dependent on the particular interface
14:05:16 <pesco> Yes, that's what I would have guessed.
14:05:48 <Igloo> e.g. they use the ncurses "timeout" function in the concrete module here
14:06:12 <pesco> But it's a system artifact which doesn't become appearent to the user from common sense.
14:06:35 <pesco> Would be nice to be able to isolate it, but I'm afraid there's no nice way to do it.
14:06:41 <Igloo> Oh, I see, the UI is mentioned at the bottom of page 5. Hmmm.
14:07:14 <pesco> Or can you think of a solution? You implemented the UI, I don't have so much experience with that.
14:07:41 * Igloo adds thinking about whether a sentence of explanation is warranted to TODO list
14:07:50 <Igloo> A solution for what?
14:08:10 <pesco> For the problem of isolating the "Game heartbeat" from the UI module.
14:08:54 <Igloo> I think the nicest solution is not to
14:09:03 <pesco> *shrug*
14:09:07 <Igloo> You might be able to do it with either threads or signals
14:09:34 <pesco> Hrm.
14:09:35 <Igloo> I'm not convinced you can, though
14:09:46 <Igloo> And I definitely don't think it would be nicer
14:10:46 <pesco> But what if my GUI system doesn't provide a timeout function? That's not really part of a GUI.
14:10:51 <pesco> conceptually.
14:12:01 <Igloo> If curses couldn't time out and wasn't reentrant (don't know if you can assume it is or not) then you are screwed
14:13:00 <Igloo> And if you could do it you'd have to mess around with MVars or something, which I'm not sure are even in Haskell'98. It's certainly rather missing the point of Haskell IMO
14:14:24 <pesco> Say my GUI is some abstract service running on my machine. I click buttons and it emits events. When do I emit the Tick event?
14:15:25 <Igloo> It doesn't emit events, it is asked for events. And when it is asked it is told how long to wait before giving up and returning a Tick event.
14:18:30 <pesco> I would have a real problem grasping the point of that if I were a GUI implementor. Polling for events makes sense. But emittung timeout ticks just feels as if it doesn't belong in the responsibility of the GUI.
14:19:52 <pesco> Oh, it's a blocking poll?
14:20:34 <pesco> In that case I'd suggest making the poll function return a Maybe Event.
14:21:20 <Igloo> In the case of ncurses it is necessarily blocking. As little as possible should be asumed for the abstract module.
14:21:50 <Igloo> Maybe Event would be confusing given None is an Event I think
14:22:05 <pesco> None could be changed to Unknown.
14:22:34 <Igloo> It's still nearer Nothing in actual meaning than Tick is I think
14:23:49 <pesco> But it means an actual user event.
14:24:36 <pesco> Whereas Tick is not caused by the user but just the reaction to a request from the Main module.
14:25:05 <Igloo> It's still an event IMO
14:26:29 <pesco> But isn't it clearer to state that the Events sent by the user interface are caused by the user operating his interface? 
14:29:04 <Igloo> I don't think so. Using Maybe also means you don't get a name for the event which I think is important for understandability
14:30:26 <pesco> OK, I'll read so I can judge on that...
14:32:20 <pesco> Oh, there's a typo on page 7, third paragraph, the constructor name should be Piece, not Pieces.
14:33:15 <Igloo> Aha, ta
14:34:51 <Igloo> (might be AFK for a bit)
14:36:48 <Igloo> (but I'm not)
14:46:55 <pesco> Another typo: p.9 in the middle of the page, the line above rotate_left :: Piece -> Piece: "so" instead of "do".
14:48:34 <Igloo> Ta
14:52:10 <pesco> Next one: p.16, chapter 9, second para: "no surprise" instead of "know surprise"
14:53:14 <Igloo> What's the chapter name?
14:54:49 <Igloo> Ah, abstract UI
14:54:53 <pesco> Yes.
14:55:16 <Igloo> Thanks
15:01:20 <pesco> OK, I'm off to bed now. Thanks for the nice read, Igloo.
15:16:02 <xbill> I wrote a script to do differential profiling...
15:16:27 <xbill> Or, rather, take two profile reports and do differential profiling.
15:17:15 <Igloo> Sounds cool - where is it?
17:05:55 * Chilli is back (gone 39:29:23)
22:44:52 <ibid> morning
