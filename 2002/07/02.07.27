02:44:07 <shapr> goood morning!
04:21:10 <shapr> hi
04:31:52 * shapr finds the bug in his program
04:31:56 <shapr> dam those boundary cases
05:13:49 <shapr> the humor of the "remove vowels from a string" thread on the haskell mailing list is *great*
05:14:21 <shapr> I think they've thoroughly confused the student who was trying to get his homework done by the list.
05:18:22 <shapr> stupid question about putting in string literals in ghci 5.02
05:18:30 <shapr> "\x82" gives me what I expect
05:18:37 <shapr> but "\x82e" gives me "."
05:18:39 <shapr> what's up with that?
05:20:03 <shapr> how should I be entering "\x82e" to get "\130e" ?
05:26:24 <Heffalump> you could try "\x82" ++ "e"
05:26:39 <Heffalump> (I dunno why it's doing that, but using ++ ought to fix it)
05:28:29 <shapr> I'm trying to paste in large string literals that way as reference info :-/
05:32:14 <liiwi> hey, it's a shapr
05:32:22 <shapr> y0 liiwi, wassup?
05:32:52 * shapr fights with ghci
05:32:53 <liiwi> met another developer today and walked around the town
05:33:01 <shapr> liiwi: cool, you're going to be most-signed
05:34:28 <shapr> where is the \xnn notation described?
05:34:50 * shapr looks on unicode.org
05:35:10 <shapr> Heffalump: "\x82s" works but "\x82e" tries to slurp up the "e" as hexadecimal.
05:35:26 <Heffalump> shapr: ah
05:36:44 <shapr> how many digits can one unicode character eat?
05:36:50 <liiwi> shapr: I'm considering generating bigger key.
05:36:59 <shapr> liiwi: that way more people can sign it, right?
05:38:17 <shapr> any number of leading zeroes give the same result.
05:38:57 <liiwi> shapr: no, it's just a new key without signatures
05:39:20 <shapr> :-)
05:40:25 <shapr> ahaaa
05:40:33 <shapr> "\x82\&e"
05:41:06 <shapr> truly that is a vertically fornicated syntax.
05:42:19 <Heffalump> :-)
05:42:44 <Heffalump> is that suitable for pasting in your large string literals?
05:43:08 <shapr> I still get to do hand editing, but at least I know how to fix them.
05:43:17 <shapr> that means that finally... all my unit tests pass for Banana.hs
05:43:27 <shapr> that string literal problem has been eluding me for weeks.
05:44:03 <Heffalump> is slurping up the e a bug, or is it because the \x82e might be UTF16?
05:44:10 <shapr> yes, the second
05:44:15 <shapr> makes me wonder how Python handles it.
05:44:16 <shapr> ohh
05:44:23 <shapr> Python has explicit unicode strings.
05:44:31 <shapr> u"foo" is not the same as "foo"
05:50:18 <shapr> for those of you who are bored with simple languages such as Haskell, and are also fond of Pterry Pratchett:
05:50:20 <shapr> http://www.dangermouse.net/esoteric/ook.html
06:51:39 <shapr> f00
06:52:18 <shapr> for Sockets in GHC, is there either select() or data received callbacks?
07:02:15 * shapr grumbles
07:03:00 <shapr> does a socket read block till data arrives?
07:10:49 * shapr find the GHC Commentary
07:10:50 <shapr> nifty
07:11:04 <shapr> http://www.cse.unsw.edu.au/~chak/haskell/ghc/comm/
07:11:14 <shapr> that's good to know about if you use GHC much.
07:15:12 <shapr> it looks like socket reads are blocking normally.
07:15:13 <shapr> hmm
07:15:35 <shapr> I wonder if there's a non-blocking lib available already?
09:50:33 * liiwi writes "Hello Monkey!" in ook and feels like eating a banana
09:53:07 * shapr laughs
09:53:36 <liiwi> I'm sure I can optimize it
09:53:57 <liiwi> it's currently 165 lines
09:54:10 <shapr> wow
09:54:12 <shapr> that's scary.
09:58:23 <liiwi> heh, longer lines would help :)
10:00:20 <shapr> I'm afraid to look at the source.
10:08:29 <liiwi> http://liiwi.hurmos.net/for_wastrel.ook
10:08:55 <shapr> that is extra cool.
12:00:58 * shapr bounces
12:22:03 <shapr> I realllly wish HUnit could do instrospection enough to find all of my test cases automagically.
12:22:39 <shapr> there must be a better way.
12:32:07 <Igloo> That's sounds like an intractable problem
12:32:15 <shapr> hi Igloo!
12:32:20 <Igloo> Hi  :-)
12:33:15 <shapr> I run my unit tests about every minute to five minutes.
12:33:22 <shapr> I'd like to find some way to make it easier.
12:35:13 <shapr> any ideas?
12:36:58 <Igloo> You could have a cron jobs do it
12:37:03 <shapr> heh
12:37:09 <Igloo> Or tinderbox or something may be generic enough to handle it
12:37:10 <shapr> hmm
12:37:39 <shapr> I wish I had some kind of reflective thingy like I do in Python.
12:38:09 <shapr> the more I use Haskell, the more I wish it had some reflective capabilities.
12:38:20 <shapr> on the other hand, I continue to like it more and more also.
12:40:58 <Igloo> I know what you mean
12:42:04 <shapr> what have you been doing with Haskell lately?
12:42:21 <shapr> or should I finish reading the Hetris paper before asking that question? =)
12:42:31 <Igloo> Well, I was intending to write a POSIX shell
12:43:01 <Igloo> But this has involved trying to work out what POSIX means more than writing Haskell
12:44:46 <shapr> heh
12:44:46 * Igloo isn't sure I'll get very far before I run out of free time  :-/
12:45:00 <shapr> did you start with Hsh?
12:45:23 <Igloo> No, with the POSIX spec
12:45:47 <Igloo> I did scan it briefly - your SIGINT handler is suboptimal, BTW - it makes a new thread each time you hit ^C
12:46:02 <shapr> I didn't write Hsh :-)
12:46:17 <shapr> plus, I found out that there's a separate current version in ghc/misc/examples/hsh
12:46:34 <shapr> I haven't compared them yet though.
12:46:36 <Igloo> Oh, OK, I assumed you'd developed it because of the various numbers
12:46:46 <shapr> nah, I updated it, that's all.
12:47:01 <shapr> I found Hsh.hs in a ghc-4.something state
12:47:05 <shapr> wouldn't even compile with ghc5
12:48:22 <shapr> I wish I knew enough to write that from the ground up.
12:49:27 <shapr> Igloo: how's the shell going?
12:49:35 <shapr> got any source online?
12:49:51 * Igloo can't remember how much it does - I think I was really just looking for how it handled SIGINT
12:50:52 <Igloo> Well, I started with a tokeniser. When I hit handling of double quotes I stopped and started reading the spec over and over and looking at what bash, ash, ksh and zsh do when invoked as sh
12:51:03 <Igloo> So I currently have stunningly little in terms of code
12:51:31 <Igloo> Oh, and I have something that reads lines and handles ^C in a loop
12:52:00 <shapr> cool :-)
12:53:21 <Igloo> I think I have lots of the logic worked out now, but the nesting is complex enough I think I will write some combinators before going back to the tokeniser
12:54:22 <shapr> I still can't think it terms of combinators.
12:55:52 <Igloo> I think I'm meant to suggest the tutorial on haskell.org at this point
12:55:57 <Igloo> Meifjer's, possibly
12:56:02 <Igloo> s/f//
12:59:18 * Igloo finishes eating
12:59:28 <Igloo> So, what have you been up to?
12:59:35 <Igloo> Practising for the ICFP?  :-)
12:59:50 <shapr> still working on the RPC layers actually
13:00:03 <Igloo> *nod*
13:00:16 <shapr> for example, how do I represent a self-referential list in Haskell?
13:00:21 <Igloo> How far have you got?
13:00:26 <Igloo> HDYM?
13:00:34 <shapr> I've finished the first and bottom layer.
13:00:41 <shapr> but it's sposedly the least complex :-)
13:00:56 <Igloo> Cool
13:00:59 <shapr> I feel like I can almost say I have a tiny amount of real world experience using Haskell.
13:01:09 <shapr> in Python, it's pretty easy to make a self referential list.
13:01:27 <shapr> x = []
13:01:30 <shapr> y = (x)
13:01:33 <Igloo> :-)
13:01:33 <shapr> y.append(y)
13:01:51 <Igloo> So you want to have a list xs which has xs as an element?
13:01:56 <shapr> right.
13:02:12 <shapr> I spoke to smkl about it a bit.
13:02:30 <shapr> he showed me how to do it, I think...
13:02:32 <Igloo> xs has type [a], right?
13:02:37 <shapr> but I didn't really understand what he said :-)
13:02:45 <shapr> sure
13:03:02 <Igloo> And if xs is an element of xs then elements of xs have type [a]
13:03:08 <shapr> ok
13:03:27 <Igloo> So xs is a list of things of type [a], and thus has type [[a]]
13:03:35 <shapr> ok
13:04:08 <Igloo> So [[a]] = [a], which can't be ... can't think of the word
13:04:11 <Igloo> unified
13:04:15 <shapr> ok
13:04:36 <shapr> I can make types with constructors that allow to be effectively self referential though, right?
13:04:45 <Igloo> If you want to do it you need to wrap the lists of things in a datatype
13:04:47 <Igloo> Yup
13:05:32 <Igloo> So you have a list of some other type, say Foo [a]
13:06:19 <shapr> ok
13:06:38 <shapr> in this case it'll be the oft-mentioned BananaEncodable :-)
13:06:43 <Igloo> :-)
13:07:39 <shapr> maybe I should read the algebraic types section once or twice
13:07:42 <shapr> that might help
13:12:19 <Igloo> Hmmm, I'm not sure I'm h
13:12:25 <Igloo> thinking straight
13:12:51 <Igloo> Maybe I am
13:13:09 <Igloo> ou may find this useful, anyway:
13:13:19 <Igloo> > data Foo = Foo [Foo] | Bar Int
13:13:19 <Igloo> > foo :: Foo
13:13:19 <Igloo> > foo = Foo [foo, Foo [Bar 1, Bar 2, Bar 3]]
13:16:52 * shapr thinks
13:17:11 <shapr> hm!
13:17:15 * shapr tries that
13:18:28 <shapr> wow
13:18:39 <shapr> that works.
13:20:44 <Igloo> :-)
13:23:49 * Igloo thinks about what I want my combinators to be able to do
13:25:37 <Igloo> Shopping is bad for the brain
13:25:42 <shapr> heh, why?
13:25:53 <shapr> you're thinking of things to get instead of things to make?
13:26:16 <Igloo> It's just worn me out
13:26:42 <Igloo> Bad for the legs too, but I don't need them to design and write code
13:26:49 <shapr> that's true.
13:27:25 <shapr> I think I'll go watch an episode of Star Trek and let those recursive types sizzle in the back of my head.
13:27:35 <Igloo> :-)
13:27:39 <shapr> thanks for the nifty code :-)
13:27:48 <Igloo> np  :-)
15:59:33 <shapr> mmm
15:59:49 <shapr> from ghc-users list:
15:59:50 <shapr> 6.00 is on the horizon though: it will probably include Template
15:59:50 <shapr> Haskell, possibly Optimistic Evaluation, and a redesign of parts of the
15:59:50 <shapr> RTS and evaluation model that Simon & I are working on.
16:00:07 <shapr> I wonder what Template Haskell and Optimistic Evaluation are...
16:00:18 <Heffalump> Template Haskell sounds like what Igloo will be doing for his PhD
16:00:47 * shapr imagines Igloo with a box of purely functional code stencils and a big paintbrush
16:01:14 <Heffalump> :-)
16:04:47 <shapr> mmm, homework: http://www.cs.nott.ac.uk/~gmh/funcwk1.pdf
16:05:12 <shapr> seems the homework for that course was due on March 15th, but I'm tempted to submit some anyway for the surprise factor.
16:05:58 * shapr goes to sleep
