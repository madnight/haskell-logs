02:37:20 --- topic: 'GHC 5.04 released http://www.haskell.org/ghc/download_ghc_504.html || http://icfp2002.cs.brown.edu/ - looking for net accessible cvs and team members for a #haskell ICFP entry (shapr)'
02:37:20 --- topic: set by shapr on [Thu Jul 11 03:50:27 2002]
04:01:53 * shapr bounces into the channel
04:02:09 <shapr> good morning oh spicy ones!
04:06:17 <shapr> hi ChilliX
04:06:28 <ChilliX> Hi!
04:06:39 <shapr> are you Manuel Chakravarty?
04:07:08 <ChilliX> I was wondering whether I should disguise my login before getting on... ;-)
04:07:15 <shapr> hah
04:07:31 <shapr> nice to meet you in real time.
04:07:44 * ChilliX bows gracefully.
04:08:21 <ChilliX> Just thought I'll pop in and see what's going on here
04:09:17 <shapr> it's been kind of quiet in the last few days
04:09:26 <shapr> sometimes we have good discussions here.
04:09:52 <ChilliX> maybe people are on vacation or so (would be this time of the year)
04:10:00 <shapr> yah, probably so.
04:10:14 <shapr> hi, I'm Shae Erisson
04:11:02 <shapr> there are some excellent haskellers here, but I'm still a newbie.
04:11:11 <ibid> ugh
04:11:22 <ibid> how does one debug a black hole?
04:11:29 <ChilliX> yep, I thought so, as you seem to have written the irc entry on the haskell.org wiki
04:11:51 <ChilliX> ibid: compile in ghc with profiling enabled
04:12:01 <ibid> that helps?
04:12:04 <ChilliX> then, there is a special option (-x maybe) to get a stack backtrace
04:12:21 <ibid> hm
04:14:10 <ChilliX> see -xc in http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html#RTS-OPTIONS-DEBUGGING
04:15:12 <ibid> hmm
04:15:32 <ChilliX> shapr: Openprojects.net doesn't have a user option for hostname cloaking?
04:17:53 <shapr> I don't know.
04:18:08 <shapr> nickserv will probably know "/msg nickserv help"
04:19:00 <ibid> "Fail: <<loop>>" does not seem to be an exception that'll trigger a backtrace
04:19:14 <ChilliX> it is
04:19:43 <ibid> i get nothing in stderr
04:21:31 <shapr> I thought the Ports library might fix for the HOpenGL threading problem, do you know if that's possible?
04:22:26 <ChilliX> ibid: strange; <<loop>> is definitely a normal exceptions
04:22:42 <ChilliX> ibid: sure you compiled everything with profiling and -auto-all
04:22:51 <ChilliX> ibid: and provided the right runtime options?
04:23:04 <ibid> 99 % sure
04:23:07 <ChilliX> shapr: did you write an email to me mentioning that?
04:23:14 <shapr> yup, sure did.
04:23:18 <ChilliX> ibid: which GHC version
04:23:27 <ChilliX> shapr: sorry that I didn't answer to that yet
04:24:06 <ibid> The Glorious Glasgow Haskell Compilation System, version 5.02.2, debian sid
04:24:10 <ChilliX> shapr: I didn't have a close look at the HOpenGL problem only skimmed the discussion, but it seemed to be a problem with the RTS implementation of threads
04:24:35 <ChilliX> and ports also just uses GHC threads; so, I am not too optimistic that it would work
04:24:51 <shapr> oh, I see.
04:25:08 <ChilliX> ibid: weird
04:27:02 * ibid has had lots of problems with the tools lately, some of them pilot errors, some apparently debian packaging bugs (reported) (and some weirdness i haven't been able to decipher, this with hat)
04:27:39 <shapr> I ended up compiling my own ghc on my debian/unstable box, because I wanted lots of unpackaged features.
04:27:58 <ChilliX> ibid: works for me in GHC 5.02.3
04:28:11 <ibid> for example, this program compiled with nhc for profiling segfaults... (could be my FFI routines, but...)
04:28:40 <ibid> ChilliX: can you give me a toy program with this fault i could try out?
04:28:48 <ChilliX> ibid: I vaguely remember that nhc profiling doesn't support the ffi yet
04:29:00 <ibid> right...
04:29:00 <ChilliX> foo :: Int -> Int
04:29:01 <ChilliX> foo x = let y = y + x
04:29:01 <ChilliX> 	in
04:29:01 <ChilliX> 	y
04:29:09 <ChilliX> that what I just used to check
04:29:19 <ibid> well, it's just readline interfacing, that i can get rid of...
04:29:25 <ibid> i'll try that
04:29:34 <ChilliX> when I run it, it says
04:29:41 <ChilliX> AttitudeAdjuster chak 52 (~/haskell): ./foo +RTS -xc
04:29:41 <ChilliX> Cost-Centre Stack: [MAIN,MAIN]->[CAF,Main]->[main,Main]->[foo,Main]
04:29:41 <ChilliX> Fail: <<loop>>
04:29:41 <ChilliX> AttitudeAdjuster chak 53 (~/haskell):
04:30:06 <ChilliX> which is a verbose way of saying, main called foo and foo died
04:31:57 <ibid> am i doing something wrong here?
04:32:08 <ibid> ghc -prof -auto-all -o foo foo.hs
04:32:16 <ibid> ./foo +RTS -xc -RTS
04:32:19 <ibid> and no such output
04:32:58 <ChilliX> no, seems ok
04:33:18 <ChilliX> certain profiling stuff was broken in some versions of GHC 5.02
04:33:24 <ibid> bah
04:33:26 <ChilliX> but I am not sure what and when
04:33:45 * ibid goes file a wishlist bug "package it already..."
04:34:46 <ChilliX> is there no 5.02.3 for debian?
04:34:47 <ibid> any other good ideas about finding out where this loop is?
04:35:23 <ChilliX> must be a circular definition like I had in foo
04:35:37 <ibid> 5.02.2-1
04:35:52 <shapr> ChilliX: do you know of any transparently parallel haskell? afaik, concurrent and GPH both require explicitly parallelism.
04:36:06 <ibid> that's the newest in sid afaics
04:36:38 <ChilliX> shapr: yes and no
04:37:07 <ChilliX> for data parallelism, there are promising approaches (eg, ours ;-)
04:37:08 <ibid> is that not statically detectable?
04:37:25 <ChilliX> for control parallelism: nothing but ideas (which I think won't work anyway)
04:38:09 <ChilliX> the point is that the goal of fully transparent parallelism is unattainable
04:38:29 <ChilliX> many algorithms are not suited for parallel exec
04:38:41 <ChilliX> so you need to choose the right algo, which requires programmer intervention
04:39:13 <ChilliX> if you use an algo from which you know it can be parallelised, you know what to run in parallel (and least potentially) and what not
04:39:25 <ChilliX> so, where is the harm in annotating this in the program
04:40:04 <ChilliX> the goal of the language must be to make this conveying of knowledge about the parallelisation oipportunities in a program painless
04:40:12 <ChilliX> that my opinion anyway
04:40:25 <ChilliX> that = that's
04:40:57 <shapr> imho, one major advantage of referential transparency is the potential for greater program optimization
04:41:04 <shapr> including transparent parallelism
04:41:51 <ChilliX> ref trans is great for parallelisation
04:42:11 <shapr> yah I agree.
04:42:22 <ChilliX> but that's orthogonal to the problem of finding out what makes sense to parallelise
04:42:31 <ChilliX> and to have a parallelisable algo in the first place
04:43:09 <ChilliX> simple example
04:43:16 <ChilliX> foldl (+) 0
04:43:26 <ChilliX> this is O(n) obviously
04:43:47 <ChilliX> and using lists also the parallel step complexity is O(n)
04:44:06 <ChilliX> but if you use a tree or an array, you can bring it down to O(log n) parallel step complexity
04:44:28 <ChilliX> whether to use a list, a tree, or an array is a decision that the programmer has to make
04:44:59 <ChilliX> a parallelising compiler doesn't help you there
04:45:32 <ibid> can strictness annotations cause this kind of a loop?
04:45:37 <ChilliX> See http://www.cse.unsw.edu.au/~chak/project/haskell+ndp/
04:45:57 <ChilliX> for the approach to parallel programming that I currently favour (data parallel programming anyway)
04:46:02 <ChilliX> ibid: yes
04:46:24 <ibid> hmm
04:46:37 * ibid debugged another problem, the strictness helped in that
04:47:46 <ibid> let's see...
04:48:08 <ibid> the funny thing is that i found nothing of use using google on this...
04:48:35 <ChilliX> on <<loop>> you mean?
04:48:53 <ibid> YES
04:48:58 <ibid> ugh
04:49:05 <ibid> sorry about that caps lock...
04:49:54 <ibid> hm, no effect from removing the strictness
04:50:50 <ChilliX> ibid: it's a stupid error message IMHO anyway
04:51:02 <ChilliX> but too many Haskell coding stuff is still undocumented
04:51:07 <ibid> yes
04:51:15 <ChilliX> and only in the heads of people
04:51:23 <ibid> and debugging haskell code for semantic errors is a pain anyway
04:51:33 <ChilliX> depends
04:51:38 <ibid> nice language anyway
04:52:03 <shapr> Haskell needs more online docs
04:52:08 <ibid> i never managed to make hat work for me... (stupid packaging being one of the reasons, perhaps)
04:52:14 <ibid> any docs, actually
04:52:16 <ChilliX> yeah, more online docs and more tools
04:52:22 <ibid> if there is a good book...
04:52:31 <shapr> doesn't work for my blind friend.
04:52:36 <ChilliX> all books are only on the beginner level
04:53:27 * ibid has read bird and rabhi&lapalme, reading hudak now
04:53:39 * shapr has read Thompson, reading hudak now
04:53:40 <ChilliX> all good books
04:53:57 <ibid> mostly not for my personal education  but for the remote chance that they could be useful for the teaching here...
04:54:00 <shapr> I'd like to get a copy of Chris Osaki's book. (sp?)
04:54:03 <ChilliX> (I am not too fond of Thompson, though)
04:54:16 <shapr> I prefer Thompson over hudak.
04:54:21 <ibid> shapr: i have that (the data structures book?)
04:54:25 <shapr> I haven't seen the bird book though.
04:54:29 <shapr> ibid: yup, that's the one.
04:54:41 <ChilliX> shapr: why do you prefer Bird over Thompson
04:55:23 <shapr> I prefer Thompson because I'm self-taught 100%, and my geometry is shaky.
04:55:37 <ibid> unfortunately, our programming classes are c++ and java and my functional programming course proposal was lost in the mist of the restructuring
04:55:42 <shapr> Hudak's book uses a lot of math, which distracts me from the Haskell involved.
04:55:47 <ChilliX> [Another plug] Here is why I prefer Hudak's book: http://www.cse.unsw.edu.au/~chak/papers/papers.html#teaching-prgm
04:56:02 <ibid> hudak looks like an excellent book for a fp course
04:56:05 <ChilliX> ibid: which uni are you?
04:56:14 <ibid> university of jyväskylä, finland
04:56:45 <shapr> I wish chalmers were closer to here. I'd love to attend some of Hughes' lectures
04:56:46 <ibid> The Pros and Cons of Teaching Purely Functional Programming in First Year - DRAFT?
04:57:21 <ibid> we just restructured the first two years...
04:57:33 <ChilliX> ibid: summarises some experience with teaching large first-year classes with Haskell
04:57:45 <ibid> right
04:58:06 <ChilliX> and you use C++ and Java?
04:58:06 * pesco is away: I'm busy
04:58:08 * pesco is back (gone 00:00:02)
04:58:27 <pesco> huh, hi anyway
04:58:37 <shapr> hi pesco
04:58:45 <ibid> ChilliX: actually, we used to use c++, we switch to java this fall
04:58:55 <shapr> I am unfond of java.
04:59:08 <ChilliX> we are doing: Haskell, C, Java (in that order)
04:59:17 <pesco> hey shapr, you're planning on entering the ICFP contest?
04:59:31 <shapr> pesco: I'd like to get a team together to enter. you want in?
04:59:40 <ChilliX> Java is no good for intro classes imho
04:59:42 <pesco> shapr: Do you have an idea yet?
04:59:48 <shapr> pesco: for what?
05:00:00 <ibid> for the first programming courses anyway, later ones use whatever the teacher pleases (c and delphi come to mind)
05:00:02 <ChilliX> for a start, too much voodoo programming needed to get started
05:00:07 <ibid> true
05:00:28 <pesco> shapr: Oh, right, sorry, there is a fixed problem. I've had too much demo coding ;)
05:01:04 <ibid> the choice was entirely out of my hands
05:01:08 <shapr> pesco: atm, my idea is "use cvs, use QuickCheck, use HUnit"
05:01:53 <shapr> Java feels like a straightjacket to me.
05:01:57 <pesco> What's quickcheck? I've never used HUnit.
05:02:01 <shapr> sadly, it's how I get more than 50% of my income.
05:02:04 <ibid> does nhc have any backtrace facility?
05:02:20 <ChilliX> ibid: don't think so
05:02:25 <ibid> argh
05:02:30 <shapr> pesco: John Hughes wrote QuickCheck, you can find HUnit on sf.net/projects/hunit/
05:02:39 <ibid> i have absolutely no idea where to look for this
05:02:48 <shapr> Dean Herington wrote HUnit as an xUnit for Haskell.
05:02:55 <ChilliX> ibid: but I think that some of the hat-related stuff does some bakctrace-ish features
05:03:21 <ChilliX> ibid: did you use good old trace yet to at least get an idea of where it is?
05:03:32 <ibid> yes, but hat just won't work for me (stupid packaging? at least my grave bug report hasn't been laughet at yet)
05:03:34 <pesco> shapr: The contest problem is not published yet, right?
05:03:47 <ibid> ChilliX: have't yet found a place where it does output anything
05:03:56 <ibid> i've used it in the past for other bugs
05:03:58 <pesco> Oh, they have a fixed time-frame too...
05:04:00 <ibid> hmm, that's an ida
05:04:03 <shapr> pesco: right, it gets published when the contest starts.
05:05:14 <ChilliX> you guys going to attend ICFP?
05:05:20 <ibid> well, that worked
05:05:29 <ChilliX> cool :-)
05:05:30 <ibid> ChilliX: don't think so
05:05:46 <ibid> still don't know where it is but now i can binary-search :-)
05:05:57 <ChilliX> :-)
05:07:00 <shapr> how much is ICFP?
05:07:09 <shapr> actually, I'm sure I'm too poor.
05:07:21 <pesco> I'm afraid I won't be able to come to the USA.
05:07:26 <pesco> No money :)
05:07:44 <shapr> this year at least, I'm flying to the US to visit my family rather than ICFP.
05:07:45 <ChilliX> ACM/SIG MemberUSD 310Non-MemberUSD 350Full-Time StudentUSD 150
05:09:29 * ibid has a problem with going to the USA for any reason
05:09:52 <shapr> I'm rather fond of the USA myself ;)
05:09:53 <ibid> i would have considered it otherwise (but still unlikely could have attended)
05:10:36 <shapr> for a complete change of subject, I'm quite surprised Haskell is so rarely used for commercial applications.
05:10:37 <ChilliX> ibid: ICFP is usually in the US and Europe in alternate years; so, next year should be EU again
05:10:40 <ibid> the judicial system scares me
05:10:45 <ibid> cool
05:11:08 <shapr> from my experience using Haskell, it seems far more suited to safe and sane commercial development practices than Java is.
05:11:19 <ChilliX> shapr: blame industry; until new PL technology enters the main stream it takes 20-30 years
05:11:29 <ibid> shapr: for commercial applications, you just can't tell what they used (unless you have a source license)
05:11:35 <ChilliX> Java is after all based on ideas developed in the 70s
05:11:40 <ibid> ... and it takes a huge amount of hyping
05:12:07 <shapr> ibid: imho, the USA problem is more about DMCA etc
05:12:16 <ibid> one guy told me in the ISC on 
05:12:16 <shapr> big corps screwing anyone who even thinks about cutting into their profits.
05:12:21 <ChilliX> and Java has brought quite a number of FPish technologies into the main stream
05:13:01 <shapr> In my other job, I'm developing websites for EU projects.
05:13:11 <ibid> ISC on generative programming that he can't use anything else besides C++ as the universities grow people who know c++, not people who know how to program...
05:13:12 <shapr> I'm using Zope right now, but I'd like to integrate Haskell into the process.
05:13:59 <ibid> shapr: my USA problem predates the DMCA, and for all fairness, the EU also has the DMCA (not yet adopted in the national legislation in most countries, but it's there)
05:17:02 <ChilliX> ibid: the people that can be hired surely present an adoption problem
05:17:29 <ChilliX> ibid: but FP is used in quite a number of unis these days => more programmers who can use that stuff
05:17:53 <ibid> the thing that scares me is that he's right... at least for what some of our unis do... including this one
05:18:49 <ibid> ChilliX: true. but for example, i know only one finnish university that uses a functional language in the programming classes, the rest usually have a principles of programming languages course and that's it
05:19:24 <shapr> ime, most programmers learn C++ and Java, because that's what pays.
05:19:42 <ibid> the problem is, they learn the language, not how to program
05:21:02 <ChilliX> shapr: ibid is right, you need to learn a couple of languages to be a good programmer
05:21:15 <ChilliX> I like our order of first teaching Haskell and then C very much
05:21:23 <ChilliX> partly, because it is such a contrast
05:22:00 <shapr> I'm more fond of Python than C as a beginning procedural language.
05:22:04 <ChilliX> if you know Haskell and C there are significantly fewer ways in which you can wrongly generalise about programming language features etc
05:22:29 <ChilliX> shapr: C not to learn just proc prog; it is good to learn about memory managament etc
05:22:41 <ChilliX> Python is too high-level for that
05:22:56 <ChilliX> in fact, for 3 years we taught first Haskell and then Java
05:23:20 <ChilliX> that was a disaster, because people didn't know about memory management anymore
05:23:27 <ChilliX> and failed the OS course in hordes
05:23:48 <ChilliX> that's one reason why we dumbed Java as the second language and went back to C
05:23:51 <ibid> they fear that here (with java only)
05:24:13 <ChilliX> ibid: they rightfully do
05:24:15 <ibid> there's a plan to have a short low-level programming in c course for the embedded people
05:24:18 <ChilliX> we went through this
05:24:33 <ibid> but it's not in the current list of courses
05:24:46 <ChilliX> it's going to be a problem, I am sure
05:25:35 <ChilliX> people use the "feel" for the machine
05:25:46 <ChilliX> which means they can never be good programmers
05:26:01 <ChilliX> use = lose
05:29:03 <ibid> all right, i've found the function that causes the loop
05:29:10 <ibid> strangest of places that
05:38:52 <ibid> yes!
05:38:55 <ibid> found the loop
05:39:04 <ibid> quite subtle
05:39:13 <ChilliX> :-)
05:39:19 <ChilliX> what did you do?
05:39:48 <ibid> traced it using binary search
05:40:01 <ChilliX> yeah, but what did you do wrong?
05:41:28 <ibid> i have a function that returns a variable that is free in the given formulae. it just happened that i had the result as part of one of those formulae...
05:42:17 <ibid> something like x = getFreeVar [a, b, c, d, x], but with one more level of indirection...
05:45:03 <ibid> actually
05:45:13 <ibid> ... that is not free in ...
05:45:17 <ibid> and getNonfreeVar
05:45:34 <ibid> (actually, findNewVar, but...)
05:48:45 <ChilliX> ibid: what are you implementing?  some kind of interpreter or compiler?
05:52:42 <ibid> ChilliX: a tool for a formal method, currently working on a simple prover
05:53:05 <ChilliX> cool
05:53:10 <ibid> works for predicate calculus currently (not much testing though)
05:53:22 <ibid> i'm trying to make it prove in set theory
05:53:51 <ChilliX> an automatic prover or an interactive one?
05:53:59 <ibid> and that's where this came from, the problem was in finding new variables for use in the AST versions of the axioms
05:54:09 <ibid> this one is automatic for the time being
05:54:15 <ibid> this is my MSc thesis project
05:54:37 <ChilliX> sounds like a good project
05:55:01 <ibid> yes, and my deadline is too soon (as usual...(
05:55:07 <ChilliX> when?
05:55:31 <ibid> ASAP, before the end of this month (then i need to start preparing for the fall teaching)
05:56:01 <ibid> i won't make it but hopefully it'll not be too much late...
05:56:25 <ibid> this is my third reimplementation attempt, the others were in C++ and collapsed under all the trivia
05:56:33 <ibid> this one is going quite well
05:57:03 <ChilliX> interesting
05:57:18 <ChilliX> are you going to write a comparison of how it went in C++ and how in Haskell up?
05:57:35 <ibid> actually, the second one might have worked given enough time
05:58:00 <ChilliX> (that's also something where there is way too little written info available)
05:58:23 <ibid> ChilliX: i don't know. i concentrated on different parts of it in the c++ versions, i'm way beyond them in the functionality with this but the frontend was much better in the c++ versions
05:58:50 <ChilliX> as in better parser etc (or better UI?)
05:59:15 <ibid> i think (sometime after i finish my thesis) i'll combine them, making the frontend in C++, unless i get an inspiration for redoing it in haskell
05:59:32 <ibid> ChilliX: better lexer (unicode instead of ascii, basically)
05:59:54 <ChilliX> ok
06:00:02 <ibid> but since the platform support for unicode is lacking in just about everything i had to implement my own editor for it
06:00:16 <ChilliX> oh, ic
06:00:49 <ibid> one problem i have with haskell (and many other uses of unicode) is that the unicode version supported is not documented
06:00:59 <ibid> nor is the level of support
06:01:18 <ChilliX> yeah
06:01:22 <ibid> i had this problem with Gtk+, had to write the editor in straight X
06:01:36 <ibid> Xt & athena
06:01:47 <ChilliX> *urgh*
06:01:55 <ibid> they didn't think they knew about unicode :-)
06:02:05 <ChilliX> with GTK+ 2.0 and Pango it should be better
06:02:11 <ibid> it isn't
06:02:19 <ChilliX> not?
06:02:21 <ibid> at least in the documentation issue
06:02:28 <ChilliX> ok, fair enough
06:02:31 <ibid> the Unicode version is nor documented
06:03:20 <ibid> and i didn't feel like going on a mailing list crusade
06:03:29 <ibid> (or trying to decipher the source)
06:03:51 <ibid> the problem is that i couldn't find a way to make sure it won't stand in my way when i need 3.2 features
06:04:05 <shapr> what's 3.2?
06:04:10 <ibid> unicode 3.2
06:04:10 <shapr> unicode 3.2?
06:04:28 * shapr needs to read about unicode
06:04:34 <ibid> includes lots of new mathematical characters that i need
06:04:52 <shapr> do you know if tolkien's tengwar is supported yet?
06:05:00 <ibid> many of them beyond the first 16 bits so any implementation based on UTF-16 is going to be lacking
06:05:10 <ibid> shapr: don't think so, but you can check
06:05:15 <shapr> ok
06:05:22 <ibid> they don't seem to like encoding fictional scripts
06:05:29 <ibid> they rejected Klingon, for example
06:05:44 <shapr> I'd like to use tengwar.
06:05:54 <ibid> you can use private use area
06:06:01 <ibid> that's where klingon is in linux
06:06:49 <ibid> http://std.dkuug.dk/jtc1/sc2/wg2/docs/n1641/n1641.htm
06:07:17 <shapr> nifty! thanks!
06:09:36 <shapr> can haskell accept unicode source?
06:09:50 <ChilliX> as per language definition, yes
06:10:00 <ChilliX> but compiler support is not good
06:10:05 <ChilliX> hbc supports it
06:10:13 <shapr> I mostly use ghc
06:10:29 <ibid> how big a task would it be to make ghc support unicode properly?
06:10:29 <ChilliX> ghc has got some things adjusted to support unicode
06:10:35 <ChilliX> but support is not complete
06:10:56 <ChilliX> (the guy who started it kind of got quite recently)
06:11:12 <ibid> wow, it proves some trivialities!
06:11:24 <ibid> (like, BIG is a member of the set { x | x = BIG })
06:11:26 <ChilliX> :-)
06:11:28 <shapr> got quiet?
06:11:51 <ChilliX> yeah, didn't see him on the lists lately, neither did he check stuff in
06:11:52 <ibid> ChilliX: proving trivialities is a big step for me
06:12:11 <ChilliX> ibid: that was an honest smiley
06:12:22 <ibid> i suspected that
06:12:39 <ChilliX> ibid: I know that quite a lot of things have to work to actually run simple proofs
06:16:43 <ibid> bah
06:16:50 <ibid> sloccount does not know haskell :-(
06:17:11 <ChilliX> extend it :-)
06:17:35 <ibid> bah
06:17:42 <ibid> 1767 lines of code currently
06:17:46 <ibid> (wc -l)
06:19:26 <ibid> includes some happy and alex code
06:44:35 <shapr> hi Igloo
06:49:10 * shapr bounces happily
06:57:17 <shapr> oxford 'net must be rough today.
07:06:53 * shapr sings
07:16:03 <ChilliX> Rather late in this part of the world already
07:16:03 <ChilliX> cu later
07:16:07 * ChilliX is away: Not at the machine...
08:50:58 * shapr springs into the channel
08:51:08 <shapr> hiya!
08:52:11 <ibid> hi
08:55:13 <shapr> hey ibid, how's it goin?
08:56:05 <ibid> i'm off duty :-)
08:56:10 <ibid> watching macgyver
08:56:42 <shapr> yay off duty!
08:56:45 <shapr> macgyver is cool
08:56:56 <ibid> subtv right now
08:56:57 <shapr> he was my 2nd best hero for years.
08:57:05 <ibid> and the best was?
08:57:14 <shapr> Michael Faraday
08:57:44 <shapr> what about you? who do you want to emulate?
08:58:05 <ibid> right now, nobody
08:58:14 <ibid> but give me a minute and i'll think about it
08:58:36 <shapr> :)
08:58:41 <shapr> hi pesco
08:58:46 <pesco> hey
08:58:52 <shapr> wassup?
09:00:00 <pesco> I'm thinking about joining you on the ICFP contest.
09:00:37 <pesco> I might enjoy a weekend of Haskell-coding...
09:01:31 <pesco> Do you know what the assignment was like last year?
09:01:58 <shapr> all of the past contests have their challenges and results online.
09:02:18 <shapr> I think last year it was a markup language
09:03:46 <shapr> tom moertel wrote a kuro5hin article about his experiences entering ICFP contest
09:05:00 <pesco> Ah, yes, I remember reading it, found the old web site, too.
09:05:13 <shapr> Igloo: you around?
09:05:19 <Igloo> Yup
09:05:52 <shapr> chak mentioned that all the Haskell books are beginner books...
09:06:08 <shapr> I realize I learned most about good Python style from reading code from others.
09:06:22 <shapr> do you know of any "good code" that you could suggest?
09:06:36 <shapr> something that I could peruse to learn better Haskell style, and more idioms perhaps?
09:07:47 <Igloo> I don't think I do OTTOMH, sorry  :-(
09:10:28 <shapr> no worries
09:10:40 <shapr> if you think of some good code, I'm interested :-)
09:15:22 * ibid learns best by writing lots of code
09:16:00 <shapr> for me, it's best to do one part writing code, two or three parts reading code.
09:22:04 <ibid> i've never learned the habit of reading code for pleasure
09:22:16 <ibid> it's usually /me wanting to fix or improve the code
10:40:53 <ibid> "some really wonderful headache generators", hehe :-)
10:41:06 <shapr> where's that quote from?
10:41:11 <shapr> oh
10:41:16 <shapr> comp.lang.functional article?
10:41:26 <ibid> yes
10:42:03 <shapr> I accidentally killed that thread in gnus :-/
10:42:14 <shapr> now I can't remember the headache generator articles.
10:42:42 <shapr> loom2: btw, why the number?
10:42:57 * shapr struggles with a weird recursive function
10:43:09 <shapr> y0 hornby!
10:43:13 <shapr> how ya doin?
10:43:13 <hornby> yo
10:43:17 <hornby> good
10:43:28 <loom2> shapr: loom by itself is taken in ircnet.
10:43:28 <shapr> I'm fixin that Banana thing right now
10:43:32 <hornby> well, in a sense. Sweet :)
10:43:49 * hornby is trying to get convince the university types to let him in
10:43:56 <hornby> well, back in
10:43:57 <shapr> hornby: why won't they?
10:44:13 <hornby> shapr: tis a long, sordid tale
10:44:25 * shapr grins
10:44:41 <hornby> Best not discussed in the fading light. Can I say "Thank you for your consideration"?
10:44:52 <hornby> shapr: So you have a fix for the bug in mind? 
10:45:51 <shapr> yup, the decodeN we discussed.
10:47:32 <hornby> so its just a matter of making it work :)
10:47:38 <shapr> I think so
10:57:02 * shapr grumbles
11:17:58 <shapr> I've made a BananaEncodable typeclass
11:18:06 <shapr> err
11:18:06 <shapr> um
11:18:22 <shapr> can I declare [BananaEncodable] as a instance of BananaEncodable?
11:19:27 * shapr tries
11:25:15 <shapr> ah crap
11:25:32 <shapr> it's pissy about that overlapping with BananaEncodable String
11:25:42 <shapr> bah
11:27:13 <shapr> I don't want to declare Char an instance, a String should be encoded as a single type.
11:29:01 * hornby rubs his brain 
11:29:47 <shapr> grr
12:21:46 <shapr> how do I handle [Char] separately from other BananaTypes
12:21:47 * shapr thinks
12:22:13 <shapr> I want to use instance BananaEncodable a => BananaEncodable [a] where
12:22:20 <shapr> but I already have instance BananaEncodable String
12:22:55 <shapr> overlapping instance declarations don't work.
12:25:09 <loom2> i'm looking for a good algorithm to check if a number is a square number. any ideas?
12:25:44 <shapr> nothing off the top of my head.
12:25:54 <shapr> you may want to look at mathworld.com, or one of the many algorithm sites
12:26:33 <loom2> i could factor it and see if every factor is there an even number of times
12:26:47 <shapr> that's true.
12:27:36 <loom2> what i'm currently doing is taking the square root and comparing it to it's floor. but it is too inaccurate for my application :(
12:28:19 <shapr> what about building a squaring table?
12:28:45 <shapr> if you combine a binary search and a lookup table it should be pretty fast
12:28:48 <loom2> yes, that's a good idea
12:29:58 <shapr> you could square every integer in steps of N until you find numbers both above and below your number, then drop the step size till you get to a step of 1
12:30:16 <loom2> thanks :)
12:30:19 <shapr> sure
12:30:33 <shapr> know anything about haskell typeclasses? :)
12:30:45 <loom2> not much. i'm a beginner.
12:30:49 <shapr> me too
12:48:23 <pesco> Ho!
12:49:11 <shapr> hi!
12:50:34 <pesco> loom2: Do you need the square number check for SHA-1?
12:52:16 <loom2> pesco: no, for a mathematical challenge someone gave me.
12:52:26 <loom2> pesco: just solved it :)
12:53:28 * shapr grrrs
12:55:01 <pesco> ok...
12:55:22 <shapr> I'm confused.
12:55:24 <shapr> this should work.
12:55:33 <shapr> Char is *not* an instance of BananaEncodable
12:55:37 <shapr> but [Char] is
12:55:53 <shapr> sooo
12:56:31 <shapr> I should be able to declare [BananaEncodable] an instance also, since [[Char]] would be the minimum that would satisfy that.
12:56:35 <shapr> right?
12:58:39 <pesco> Wait, what does [BananaEncodable] hove to do with [[Char]]?
12:58:45 <pesco> s/hove/have
13:03:48 <shapr> I've declared String as an instance of BananaEncodable
13:04:11 <shapr> and yet, ghc says I have overlapping instance declarations
13:04:33 * shapr gets frustrated
13:26:57 <ibid> BananaEncodable is a type class?
13:33:46 <holth> Hi, i just read about this channel on the haskell wiki page so a simply want to try it out...
13:57:00 <ibid> holth: welcome
13:59:28 <holth> ibid: hi
14:00:04 <holth> I'm the firts time here, there doesn't seam to be much traffic...
14:00:15 <ibid> not now
14:00:54 * ibid does not understand why people expect irc channels to be busy any time they join. in my experience, most don't, evem though they aren't dead
14:01:34 <holth> perhaps: chatting=continous speaking??
14:02:11 <holth> Anyhow, i am a newby for irc
14:03:35 <ibid> chatting, yes, but people need to sleep sometime...
14:03:39 <ibid> and work
14:03:49 <ibid> and make Haskell an even better language...
14:04:58 <holth> that is a good idea. The problem is, that one has to (company politics) work in java. 
14:28:42 <pesco> Yay, new GHC compilation time!
14:54:21 * shapr yawns
15:06:40 <Igloo> shapr?
15:11:40 <hornby> Some channels are always hopping
15:11:46 <hornby> like #debian or something. 
15:14:42 <kyookoo> the grass is always greener on the other side.
15:17:01 <pesco> Haskell programmers just don't like to type too much.
15:18:02 <kyookoo> anyone here know much about category theory?
15:18:14 <hornby> I guess everyone in here is just too busy being productive :)
15:18:31 <pesco> Not me. As in knowing about category theory.
15:18:39 <kyookoo> :/
15:18:57 <kyookoo> i almost got into haskell but i got stuck on them.
15:19:06 <kyookoo> categories.
15:19:29 <kyookoo> and higher dimensional algebra.
15:19:37 <kyookoo> its kinda hard.
15:19:53 <pesco> Hm. I have no clue what category theory is about. Tell me.
15:20:11 <kyookoo> well, you must know about monads right?
15:20:27 <pesco> Right.
15:20:48 <kyookoo> well, they're based on catagory theory.
15:20:52 <kyookoo> :I
15:21:08 <kyookoo> doesn't it mention that in ALL the haskell introductions?
15:21:45 <kyookoo> its best to stay away, anyway.
15:21:51 <kyookoo> it'll just depress you.
15:22:26 <hornby> depress?
15:22:45 <kyookoo> as in waste your time fruitlessly.
15:23:03 <pesco> I might have ignored it because I don't know about it. But MathWorld mentions a category as being a pair of a collection and an "arroy".
15:23:10 <pesco> arrow.
15:23:44 <kyookoo> well, it does get a bit harder than that pesco when you look into it.
15:24:04 <pesco> Now I'm interested. That's why John Hughes calls his "extended monads" arrows!
15:24:17 <kyookoo> <:-O
15:24:45 <kyookoo> i started reading stuff on 'john baez' site.
15:24:50 <kyookoo> then it all got too much.
15:25:07 <pesco> Oh, sorry, I got it wrong, a collection of arrows for each pair of objects.
15:29:12 <kyookoo> http://obswww.unige.ch/~lbartho/TWF/wgindex.html  <--- try typing in "n-category" here. see what you get. :/
15:29:16 <kyookoo> later
15:33:34 <hornby> neat site
15:57:05 <pesco> Yes, but hardly necessary to understand for learnig Haskell.
15:58:12 <pesco> I'll stick to MathWorld though, as I'm not too much into physics.
