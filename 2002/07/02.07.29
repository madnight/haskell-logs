00:33:24 * Chilli is away: Not at the machine...
01:20:07 <Heffalump> is it just me that sees a blank page on that wiki link pseudonym pasted?
01:26:01 <Igloo> TyingTheKnot looks blank to me
01:38:39 <Heffalump> actually the entire wiki appears to be blank.
01:39:02 <Heffalump> except for FrontPage
04:12:44 <jens> ChilliX: any ideas why i have trouble with c2hs with glibc-2.3pre?
04:13:51 <ChilliX> hmm, which version of c2hs?
04:14:16 <ChilliX> the latest source release 0.10.15?
04:14:38 <ChilliX> (most problems are due to the gcc people adding new extensions, which c2hs doesn't understand)
04:14:46 <jens> 0.10.11 from cvs apparently
04:15:01 <ChilliX> ok, then, it's the __extension__ keyword, I guess
04:16:11 <jens> btw i still can't access your cvs server anonymously...
04:16:32 <ChilliX> that's because it's dead
04:16:49 <ChilliX> (I thought, I mentioned that at some point, but maybe not on the list...hmmm)
04:17:04 <ChilliX> I have to look for a new one once the current chaos is over
04:17:19 <ChilliX> therefore, I have put 0.10.15 as a tar ball on the c2hs page
04:17:26 <jens> oh, really, perhaps i missed that
04:17:38 <ChilliX> (0.10.15 will probably also become the next binary release)
04:17:53 <ChilliX> (just haven't had the time to make the binaries yet)
04:18:27 <jens> ok, i'll grab the tarball then and seem if it helps
04:18:33 <jens> thanks
04:18:39 <ChilliX> sorry about the cvs
04:19:01 <ChilliX> problem is anonymous cvs isn't really a very secure service, so I can't put it on any of our main boxen
04:19:12 <ChilliX> so, I had it on a crappy old SPARC
04:19:15 <ChilliX> but that's gone now
04:19:37 <ChilliX> unfortunately, sourceforge doesn't support syncing of remote CVS archives
04:19:50 <ChilliX> (at least, they didn't when I checked last)
04:19:57 <jens> ok, np
04:20:02 <jens> btw the error i'll seeing is:
04:20:18 <jens> Fail: INTERNAL COMPILER ERROR:
04:20:19 <ChilliX> (I don't want to host the r/w archieve at sf, as it would be much slower for me)
04:20:20 <jens>   Lexers.>||<: Overlapping actions!
04:20:26 <ChilliX> *urgh*
04:20:47 <jens> doesn't occur with glibc-2.2 ;-)
04:20:51 <ChilliX> but, I vaguely remember that somebody else had that not too long ago
04:20:59 <jens> really
04:21:17 <ChilliX> please try whether 0.10.15 fixes it, or whether it is a different problem (the old problem I fixed)
04:21:35 <jens> ok, will do
04:21:36 <ChilliX> (was a bug in the grammar)
04:21:51 <ChilliX> thanks
04:41:35 <Heffalump> isn't anonymous CVS fairly secure, if you make sure it runs as nobody?
04:41:49 <Heffalump> (or a dedicated user)
04:43:02 <ChilliX> you have to be quite careful about the permissions of the cvs root directory, too
04:43:35 <ChilliX> and about the scripts executed in the various config files used in CVSROOT
04:44:35 <ChilliX> so, fairly secure is probably a fair assessment
04:44:58 <Heffalump> hmm. oops :-)
04:45:04 <ChilliX> only that in the core network of our School, they won't run anything that is just fairly secure
04:45:17 * Heffalump realises that his CVS anonymous user is in the group that can write to the CVSROOT directory
04:45:25 <ChilliX> and on the machines that I admin, I am not too keen on it either
05:24:27 * shapr bounces
05:41:59 <shapr> another mention of Template Haskell on the mailing list...
05:42:23 <ChilliX> Template Haskell is super cool!
05:42:32 <shapr> ah, obviously you know something about it
05:42:45 * shapr cannot resist googling for it
05:42:58 <ChilliX> the paper is one of the accepted ones for the Haskell Workshop
05:43:06 <ChilliX> and as PC Chair I had to read all papers :-)
05:43:28 <shapr> oh!
05:43:29 <shapr> good point
05:43:39 <Heffalump> how long does it take you to review a paper, OOI?
05:43:44 <ChilliX> http://research.microsoft.com/Users/simonpj/papers/meta-haskell/
05:43:58 <shapr> yah, I just found that url.
05:44:08 <shapr> google is worth at least fifty IQ points.
05:44:19 <Heffalump> ahah, it is Tim Sheard's design. cool.
05:44:42 <ChilliX> Heffalump: depends on the paper and how careful I review it (which again depends of what it is for)
05:45:02 <ChilliX> for workshops, I can do it sometimes in about 1.5h
05:45:15 <ChilliX> for a journal, it can take a day or two
05:45:54 <Heffalump> right
05:46:34 <shapr> soo, I'll finally be able to tell the CL weenies that Haskell has macros too.
05:46:48 * Heffalump reads the paper to see if they found a solution for the dependency analysis problem
05:46:49 <ChilliX> shapr: indeed :-)
05:47:26 <ChilliX> Heffalump: for the ICFP reviews this year, each of us had to review 20 papers this year
05:47:46 <ChilliX> and as many ICFP papers are technical rather dense and sophisticated that took ages
05:48:34 <ChilliX> (we of course were allowed to use subreviewers, but each PC member still had to at least read each of the assigned papers and do a brief review)
05:48:50 <Heffalump> right
05:49:02 <ChilliX> I like the quote at the start of the Template haskell paper
05:49:33 <shapr> about C++ templates?
05:49:41 <ChilliX> yep
05:50:17 <ChilliX> I clearly shows, whatever you do in the PL area, you ignore FP at your own peril
05:50:47 <shapr> hey.. I could use this to automatically build HUnit suites
05:50:48 <shapr> I think
05:50:59 <shapr> yes, I think so
05:51:43 <ChilliX> especially together with GHC rewrite rules, the possibilities of Template Haskell are endless
05:52:22 <shapr> wow, powerful stuff
05:52:41 <Heffalump> GHC rewrite rules being needed to clean up inefficiencies in the generated code?
05:52:43 <shapr> Heffalump: I think this could do the reflection you were thinking about
05:52:48 <Heffalump> shapr: yeah
05:52:54 <ChilliX> you see, there'll be some real good papers at the Haskell workshop
05:52:55 <Heffalump> oh, well sort of
05:52:55 <ChilliX> :-)
05:53:18 <Heffalump> the trouble is the reflection is all compile-time
05:53:33 <Heffalump> chillix: which is clearly due to the wonderful PC chair :-)
05:53:47 <ChilliX> noooooo
05:54:03 <ChilliX> it is due to all the great Haskell researchers!! ;-)
05:54:03 <shapr> even if the reflection happens at compile time, it's still available
05:54:33 <ChilliX> and with an acceptance rate of 9/26, you can pick the best
05:54:48 <Heffalump> shapr: yeah, but it doesn't make writing Haskell code that dynamically loads other Haskell code very feasible - but what ChilliX's student has done sounds like it would do the job nicely.
05:55:07 <shapr> oh
05:55:16 <shapr> right, reflection /= dynamic loading
05:55:47 <ChilliX> Heffalump: re rewrite rules + templates: as a compiler nut, I am of course thinking about better ways to extend GHC to do cool stuff, especially by way of source-to-source transformations
05:55:49 <Heffalump> you need reflection for dynamic loading (well, not 100%, but it helps a lot)
05:56:32 <Heffalump> chilli: right, and how would you envision rewrite rules and templates interacting?
05:57:40 <ChilliX> when you can do trafos via rewrite rules, you use them
05:57:57 <ChilliX> but some trafos have to look at lambda abstractions etc, those you could do with templates
05:57:58 <Heffalump> ah, so templates are just to deal with the cases where you can't?
05:58:00 <Heffalump> right.
05:58:26 <Heffalump> hmm, doing fusion with templates might be fun
05:58:28 <ChilliX> in a sense, rewrite rules are good for normalisation procedures
05:59:00 <ChilliX> but not all things can be expressed in this way, so you need a bigger hammer :-)
05:59:12 <Heffalump> heh
05:59:16 * Heffalump goes to have lunch, biaw
06:22:01 <shapr> this is a lot like Joy
06:23:41 <ChilliX> is it?
06:24:24 <shapr> well, the quasi-quotations seem to be
06:24:45 <shapr> lists in Joy are also quoted program fragments
06:24:52 <shapr> you can operate on them, and then execute them
06:25:35 <ChilliX> but that holds for lisp, too
06:25:56 <ChilliX> quasi-quotes are not new, I think
06:26:11 <ibid> quasi-quotes are in r5rs at least
06:27:02 <shapr> hi ibid
06:27:09 <ibid> hi
06:27:26 * ibid runs to the bus shortly
06:27:38 * Heffalump delunches
06:27:51 <ChilliX> delunching sounds messy...
06:28:26 * ibid considers writing a news client using haskell...
06:28:38 <shapr> yes!
06:29:03 <ibid> bus, now, bbl
06:29:07 * shapr waves
07:23:47 <ChilliX> g'nite
13:13:45 * shapr boings
13:17:03 * shapr snickers at the complex infix expression trick on haskell-cafe
13:18:26 <shapr> tribes of monadic grad students roam the campus!
13:20:07 <shapr> I've read all of c.l.functional, time to read more of Meijer's monadic parsing paper.
14:29:42 <buggs> someone here knows the programming language mercury?
14:32:02 <smkl> sorta
14:37:39 <buggs> is it more like haskell or more like prolog ?
14:44:27 <smkl> it's a bit more like prolog
17:23:46 * Chilli is back (gone 16:50:22)
17:24:22 <Heffalump> hi
17:25:40 <Chilli> Hi Heffalump
17:26:05 <Chilli> still hacking?
17:26:19 <Heffalump> a little
19:02:47 <dark> I switched to Haskell recently... I still have trouble switching mental gears.  I'm used to data-driven coding.  With Haskell I notice that that just leads to wasted code :)
19:04:36 <Chilli> Working from data structures is still good, but it pays to early on pay close attention to types and exploit the high expressiveness of the type system during initial modelling
19:05:59 <dark> Yeah I'm not really doing that yet.  I'm hoping to refactor later :)
19:07:24 <Chilli> one nice thing about the types-oriented approach is that you can make the compiler help you
19:07:32 <Chilli> you can always add functions of the form
19:07:38 <Chilli> foo :: <foo's type>
19:07:39 <dark> I'm having trouble with error reporting though.  I can't just spew warnings as I go along.  But I don't want to put everything in an IO type either.
19:07:41 <Chilli> foo = undefined
19:07:57 <Chilli> and then, run everything through the compiler and have it type check it
19:08:07 <Chilli> then, you can successively fill in the holes
19:08:11 <dark> Chilli: In order to get the types straight before coding?
19:08:39 <Chilli> what kind of warnings?
19:09:38 <dark> Well, consider the ELF parser.  I'd like to give a warning if a program segment tries to load into a memory area that's too small.  This is not fatal, I just truncate to (min filesz memsz), but it's unusual and should be reported.
19:10:49 <dark> However, the code that notices this is buried deeply in the segment loader, which is called by a function that takes an ELF and returns a memory image.
19:11:02 <Chilli> there are a couple of ways to do it
19:11:15 <Chilli> first of all it depends how you represent the memory image
19:11:32 <Chilli> if it is of type "Ptr", you'll need IO anyway to access that memory
19:11:48 <Chilli> is that the case?
19:12:01 <dark> No, it's a normal datatype.  This is all virtual, I might be parsing executables for a different platform entirely :)
19:13:12 <Chilli> ok, then the best thing to do is to associated with the result of that operation a bag of warnings etc
19:13:23 <Chilli> so, the question is hwo to maintain that bag
19:13:41 <Chilli> one way to do it is to actually use amonad, but not the IO monad, but a homemade one
19:13:52 <Chilli> that's the high-tech solution
19:14:03 <dark> Well I'd like to continue to be able to use foldl :)
19:14:07 <Chilli> the low-tech solution is to just pair the bag with the actuyal result
19:14:24 <dark> If I use a non-IO monad, will it still be evaluated lazilu?
19:14:37 <Chilli> sure, a monad is just an abstraction
19:14:48 <Chilli> it doesn't inherently imply side effects or anything else
19:14:59 <Chilli> a monad is a kind of ADT
19:15:17 <Chilli> whether it is lazy or not, depends on how you implement it
19:15:38 <Chilli> but maybe for the warnings, you just want to pair the result with the bag
19:16:18 <Chilli> you could define 
19:16:25 <dark> Hmm, and if I operate on (Memory, Warnings) pairs consistently, then I can still use all the list operators I'm using now, right?  I just need an accessor for the Memory part.
19:16:39 <Chilli> exactly
19:17:06 <Chilli> just define yourself some conveneince functiuons to operate on that pair
19:17:13 <Chilli> (eg projections)
19:17:26 <Chilli> and give it a name like
19:17:36 <Chilli> type LinkResult = (Memory, [Warning])
19:18:13 <Chilli> (rather LoadResult, I guess)
19:19:04 <Heffalump> would using a record make more sense?
19:19:51 * Heffalump often finds that types that are throughout the whole program have a habit of growing
19:19:53 <dark> I guess I could thread the warnings through all the stages that way, and have the main function print them.
19:20:12 <Chilli> right
19:20:21 <Chilli> the cool thing about that
19:20:42 <Chilli> is that if you every want to use threads or so, you don't have to worry about races and stuff
19:20:55 <dark> Because it's not IO?
19:20:58 <Chilli> because there are no side effects in yoru main functions
19:21:28 <Chilli> (this would btw even work if you build a custom monad)
19:22:03 <Chilli> the idea with IO in haskell is always to have a two layer design
19:22:17 <Chilli> top layer does all the IO and calls into the purely functional second layer
19:22:28 <dark> Hmm, there seems to be a Control.Monad.ST.Lazy library.
19:22:33 <Chilli> this has a number of benefits
19:23:05 <Chilli> that's for "local" side effects
19:23:19 <Chilli> eg, a function may use side effects internally, but never expose them to the outside
19:23:23 <Chilli> that's waht ST does
19:23:51 <Chilli> (and GHC type checker will actually guarantee you that it does only aaccept programs where the side effects are invisible from the outside)
19:26:31 <dark> Hmm but isn't that what is needed for Warnings?  For a sufficiently wide definition of "internally"
19:26:44 <dark> Or does it really have to be inside one function?
19:27:17 <Heffalump> the only problem with using it for warnings is that you're then stuck using monadic syntax (or explicit return and binds)
19:27:27 <Chilli> ST would be an overkill for the warnings
19:27:52 <Heffalump> how is ST implemented?
19:27:53 <Chilli> it's good if you need hashtables or so
19:27:58 <dark> Heffalump: Right... and I want to avoid that :)  Not much point in switching to Haskell if I end up writing in imperative style anyway.
19:28:07 <Chilli> in fact, IO is defined in terms of ST
19:28:32 <Heffalump> chilli: in GHC, or conceptually?
19:29:04 <Chilli> don't underestimate the do-Notation: it looks imperative, but it still is much more versatile than your average imperative language
19:29:07 <Chilli> Heffalump: in GHC
19:29:41 <Chilli> it is defined as a data type (which si a function type)
19:29:42 <Heffalump> so IO is just a particular state thread?
19:29:50 <dark> Hmm, what will be the effects of having main evaluate the Warnings list?  Will it cause the program to hunt down things to warn about?  I'd like it to only warn about problems that were encountered in the things it actually needed to parse in order to produce the end result.
19:29:51 <Chilli> and the monad ops coded on that type
19:30:08 <Chilli> Heffalump: exactly; the one where the state has type "World"
19:30:20 <dark> GHC.RealWorld or something :)
19:31:05 <Chilli> dark: if you want it to be lazy, you may have to be a bit varefula bout how you cod eit, but it generally should be ok
19:31:14 <Chilli> vareful = careful
19:31:17 <Heffalump> chilli: but an ST thread doesn't have a defined type for its state, does it?
19:31:52 * Heffalump has run into the "make it go looking for problems" thing before, but can't remember what he did about it
19:33:30 * dark wonders if [String]s is the plural of [String]
19:34:33 <Heffalump> [[String]] surely :-)
19:34:48 <dark> I am strongly tempted to do the warnings with unsafe IO :)  But I guess that then I won't have any control over the order in which they appear.
19:35:22 <Chilli> Heffalump: ST gets two arguments (like in "ST s r") where s ist the state type and are the result
19:35:27 <dark> Heffalump: Not necessarily, I think that ([String], [String]) contains two [String]s :-)
19:35:40 <Heffalump> dark: point :-)
19:35:58 <Heffalump> chilli: I thought ST in GHC was the one where runST :: (forall s . ST s a) -> a
19:36:51 <Chilli> exactly
19:37:04 <Chilli> but IO doesn't run via runST
19:37:09 <Heffalump> but then s isn't the state type, it's the fake type parameter to stop state threads being intermingled
19:37:13 <Chilli> because the s is not universally quantified
19:37:16 <Heffalump> ahhh.
19:37:50 <Heffalump> of course. Once you declare the type of runST as above, an implementation can run a state thread with any particular s it chooses
19:38:17 * Heffalump sees how it all fits together now. Cunning.
19:41:19 <dark> I still don't understand the difference between having an explicit forall and not having one.
19:41:35 <Heffalump> it's the bracketing that's cunning
19:41:54 <Heffalump> if it had type ST s a -> a, then it'd be equivalent to (forall s,a . ST s a -> a)
19:42:07 <Heffalump> but instead it's (forall a . (forall s . ST s a) -> a)
19:42:32 <Heffalump> the first type says that given any types s and a, runST will turn a ST s a into an a
19:42:53 <Heffalump> the second type says that given any type a, and an ST s a that is valid for *any* s, runST will produce an a
19:43:47 <Heffalump> and producing an ST s a that is valid for any s forces you as a programmer to write code in which side effects can't leak
19:44:36 * dark thinks hard.
19:44:58 <Heffalump> because the sideeffects are handled by things of type STRef s a, and if you tried to reference one of them outside the thing you were passing to runST, it'd cause there to be an extra constraint on the s, and so it wouldn't be forall s anymore
19:46:37 <dark> I think I see, but I can't restate it in different words than you've already used :)
19:47:26 <Heffalump> there's the original paper on it that probably explains it better than I can
19:47:55 <Chilli> lunch time
19:48:07 <dark> Heh, it's 6 am here -- almost breakfast time.
19:48:10 * Heffalump tries to find the reference
19:48:17 <Heffalump> it's nearly bedtime for me (nearly 4am)
19:49:21 <Heffalump> http://research.microsoft.com/Users/simonpj/Papers/papers.html#monads
19:49:25 <Chilli> "STate in Haskell" from Peyton Jones & Lunchbury is good
19:49:44 <Heffalump> yes, or the PLDI paper linked just below it
19:50:53 <dark> Heffalump: Thanks.  I'll just bookmark it now, it's the wrong time of day to be reading papers :)
19:51:17 * Heffalump has a look at the 50 page version to see why it is so long
19:54:35 <Heffalump> ah, typing rules and proofs
19:54:37 <dark> Heffalump: It has pictures :)
19:55:26 <dark> Interesting.  I've read this paper before, years ago.  I had forgotten :)
20:02:59 <Heffalump> hmm. I could be confused, but it looks like interleaveST is roughly what you want to generate warnings lazily
20:03:20 <Heffalump> (in a similar way to the unique supply stuff)
20:22:21 * Chilli is away: Doing stuff...
20:26:14 * Chilli is back (gone 00:03:53)
20:45:26 <dark> Heffalump: looks like interleaveST is essentially the same as what GHC calls unsafeInterleaveIO, with good reason :)
20:46:37 <dark> Anyway, it's definitely bedtime now.
