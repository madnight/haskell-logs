00:36:44 * shapr bounces
00:50:09 <shapr> hi Heffalump! ltns!
00:50:33 <shapr> Igloo: router fixed?
01:36:32 * Chilli is away: Not at the machine...
01:57:42 * Heffalump hopes our firewall is fixed.
01:57:47 <Heffalump> but I'm not really convinced
02:03:48 <shapr> so, who's interested in the ICFP weekend contest?
02:04:06 <shapr> pesco seemed interested, anyone else?
02:07:52 <Igloo> It hasn't broken since they swapped the RAM with another one
02:08:08 * Igloo is still only potentially interested I'm afraid
02:32:04 <shapr> the time is approaching
02:33:37 <Igloo> Unfortunately I don't know if I'll have a 'net connection at home or which city I'll be in at the time
02:33:48 <shapr> suckage :(
02:34:18 * Igloo should prod my supervisor about the latter
02:34:51 <shapr> if you think you might join, I'd suggest playing with HUnit and QuickCheck beforehand
02:35:12 * Igloo will have a look soonish to see what all the fuss is about  :-)
02:35:41 <shapr> that recommendation is coming straight from Tom Moertel's ICFP Haskell entry write-up
02:35:53 <shapr> I should email tmoertel and ask him if he wants to join a #haskell team.
03:48:10 <shapr> hi shreya
03:48:30 * shapr writes boring J2EE server-side Java code.
04:51:24 * Heffalump tries to remember the name for what kind of a type Either is
04:52:19 <shapr> unification?
04:52:29 <shapr> unified type?
04:52:40 <Heffalump> union type is I think the appropriate term
04:52:50 <shapr> ah
04:52:56 * Heffalump pokes Igloo for confirmation
04:53:41 <shapr> doesn't that give you cold finger?
04:54:16 <Igloo> It would be a union in C
04:54:28 <Igloo> I'm not sure I really understand the question, though
04:54:30 <Heffalump> maybe I mean a sum type
04:54:46 <shapr> data Seasons = Winter | Summer | Spring | Fall
04:54:47 <Heffalump> what's the term used to describe that kind of composition of types
04:55:03 <Heffalump> we discussed this a few days ago
04:55:14 <Heffalump> anyway, the moment where it would have been useful for me to know the answer has passed
04:55:25 <shapr> oh well
04:56:16 * Igloo doesn't remember
05:11:31 <shapr> hi ChilliX
05:11:38 <shapr> what does ChilliX mean?
05:11:41 <ChilliX> Hi shapr
05:11:54 <ChilliX> nothing really
05:12:08 <ChilliX> My main nick is Chilli
05:12:25 <ChilliX> when that is taken, eg, by my office machine, I use ChilliX
05:12:33 <shapr> sensible
05:15:19 <ChilliX> Do you have your own business, or working for a company?
05:15:38 <shapr> partly each
05:15:51 <ChilliX> ic
05:16:23 <shapr> I work for widian.fi three days a week, writing Java, some of J2EE server side, PJAE mobile apps, J2ME MIDlets, and your average boring applications
05:16:52 <shapr> the other three days a week I work for webwitches.com, where I'm head geek
05:17:34 <shapr> the two other people who work for webwitches are Bea, my fiancee, and her best friend.
05:18:29 <shapr> what about you? do you spend all your time in academic pursuits?
05:18:58 <ChilliX> I am working full time at the University of New South Wales
05:19:24 <ChilliX> so, essentially, lecturing and researching
05:19:44 <shapr> do you do any other for-pay work?
05:20:00 <ChilliX> I did as a student
05:20:14 <ChilliX> but now I am pretty booked out with my main job
05:20:20 <shapr> yah, I can see
05:20:26 <ChilliX> most CS departments are short on staff
05:20:29 <shapr> data parallel research looks like very much fun
05:20:47 <ChilliX> so, you spend more than the 30-40% of your time that you are supposed to teach
05:21:12 <ChilliX> on teaching => you have to do a lot of your research in your "spare" time
05:21:54 <shapr> it sounds like a great job
05:22:06 <shapr> I get the impression you have passion for both teaching and your research
05:22:17 <ChilliX> it's good
05:22:28 <ChilliX> only somtimes, I wish I would have a break
05:22:43 <shapr> can you have one?
05:22:52 <ChilliX> on paper, we have 20 days holidays/year
05:22:58 <shapr> off paper?
05:23:09 <ChilliX> in practise, I am happy, if I get 1.5 weeks
05:23:25 <shapr> I usually spend my vacation doing research for myself
05:23:35 <ChilliX> :-)
05:23:42 <shapr> what do you do with yours?
05:24:19 <ChilliX> depends
05:24:32 <ChilliX> I am in .au since 2.5 years now
05:24:39 <ChilliX> and haven't seen much of the country yet
05:25:04 <shapr> I'd love to vacation in .au
05:25:16 <ChilliX> it's a cool place
05:25:28 <shapr> as long as I had a decent laptop & solar cells I guess :)
05:25:32 <ChilliX> Sydney is a great place to live
05:26:40 <ChilliX> only problem, it's a bit far away from the rest of the world...
05:26:52 <shapr> yah, it seems so.
05:28:10 <shapr> happily, it's only microseconds away for data only stuff
05:29:01 <ChilliX> true :-)
05:30:04 <Igloo> Micro? Doesn't that mean your data is going faster than the speed of light?
05:31:02 <Igloo> At least I thought .au was more than a few km away  :-)
05:31:24 <shapr> Igloo: plural microseconds
05:31:36 <shapr> could be any number :)
05:32:24 <Igloo> Hmmm, true, but I think it is unusual to be talking about us when there are at least 10k of them  :-)
05:35:12 <ChilliX> Igloo: re your nullPtr question on the FFI list
05:35:42 <ChilliX> I think, it was always the intention that nullPtr corresponds to NULL
05:35:58 <ChilliX> but to be poerfectly honest, we are cheating a little bit in the pointer story anyway
05:36:22 <ChilliX> usually, we try to have this clean separation between language-independent
05:36:28 <ChilliX> and language-dependent FFI components
05:36:28 <Igloo> I'm sure it always will be in practise given how the world works, but it would be nice to have it explicitly OKed in the spec
05:36:46 <ChilliX> but with pointers, we are cheating a bit
05:37:00 <ChilliX> yeah, I agree
05:37:19 <ChilliX> the point is that because nullPtr is in the language independent section, we don;t say anything about C
05:37:36 <Igloo> You mean because you can malloc things in Haskell and get a Ptr a and you can also get a Ptr a from C?
05:37:43 <ChilliX> and because no pointer stuff is in the language-dependent section, neitehr is seid there
05:37:49 <Igloo> Ah, right
05:38:05 <ChilliX> we kind of assume all language handle pointer the same
05:38:11 <ChilliX> and we use C's model as the base line
05:38:26 <ChilliX> but anything else would be a lot of trouble
05:38:29 <ChilliX> for probably no gain
05:39:13 <ChilliX> but I agree with you, we should clarify this point
06:00:21 <shapr> Igloo: ok, I concede the point. .au is currently 0.2 seconds away from me.
06:08:05 <Igloo> :-)
06:09:38 <shapr> I didn't have time to read your paper last night :-(
06:09:57 <Igloo> No problem  :-)
06:10:58 <Igloo> No rush or anything, but I'd be inteested to hear your comments when you get round to it
06:42:17 <shapr> ChilliX: hey, the cloaked username got added in the last few hours
06:42:28 <shapr> hi loom2
06:42:31 <shapr> how are ya?
06:42:50 <loom2> fine, how are you?
06:43:08 <ChilliX> with +z ?
06:43:08 <shapr> doing pretty well, since I'm approaching the end of the work day
06:43:15 <Heffalump> +z?
06:43:42 <loom2> shapr: well, mine has just begun two hours ago...
06:44:19 <shapr> I'm looking forward to fun time where I can work on Haskell.
06:44:26 <ChilliX> +z: mode for cloaked user names
06:44:46 <ChilliX> (that's how they work on slashnet)
06:45:00 <shapr> I've asked for vacation around the ICFP contest date, I hope I can get some other people to join up!
06:45:23 <ChilliX> shapr: you seem to be really set on it (which is good!)
06:45:32 <ChilliX> I wonder what the task will be
06:45:49 <shapr> I dunno
06:45:51 <loom2> shapr: when will the contest be held?
06:45:58 <jewel> I'ld like to join, but I'm not really that good at haskell
06:46:02 <shapr> ChilliX: you want to join? :-)
06:46:27 <shapr> jewel: please join :-)
06:46:37 <shapr> the entry doesn't have to be purely in haskell
06:47:01 <shapr> jewel: plus, I know you can program well, and that's a language independant skill.
06:47:07 <ChilliX> I'd like to join, but I doubt that I have time for three days of pure fun hacking
06:47:29 <ChilliX> (it's in the middle of session, after all)
06:47:31 <shapr> what about the lightning entry? it's only 24 hours?
06:47:54 <shapr> assuming they do lightning entries again this year...
06:47:55 <ChilliX> Did they say yet whether there will be a lightning entry again?
06:48:05 <shapr> I haven't heard.
06:48:15 <shapr> I'll check it out and tell you what I find.
06:48:40 <shapr> loom2: august 30th to september 2nd
06:49:05 <shapr> loom2: the icfp url is in the channel topic if you want more info.
06:50:15 <loom2> shapr: great, maybe i'll join you too, if you don't mind :)
06:50:19 <shapr> yah sure!
06:50:59 <shapr> my recommendations are: get comfortable with HUnit and QuickCheck, and read Tom Moertel's article on kuro5hin.org about his ICFP Haskell entry.
06:51:51 <ChilliX> I'd also recommend checking GHC's exception handling out beforehand
06:52:17 <Heffalump> why is that important in particular?
06:52:19 <loom2> ok, i'll get into those.
06:52:33 <Heffalump> shapr: URL for the Moertel article?
06:52:42 <shapr> just a moment, I'll find it
06:52:43 <ChilliX> often, you can output something, which is at least legel instead of aborting on an exception
06:52:58 <Heffalump> ah, ok
06:52:58 <shapr> oh?
06:53:02 <ChilliX> better to have a non-optimal result on a test, than to fail
06:53:32 <Heffalump> GHC exception handling is basically "raise anywhere, catch in IO", isn't it?
06:53:42 <ChilliX> yep
06:54:24 <shapr> http://www.moertel.com/~thor/icfp2001/
06:54:35 <Heffalump> http://www.kuro5hin.org/story/2001/7/31/0102/11014
06:54:39 <Heffalump> oh, ok :-)
06:54:41 <shapr> that's the article archived on his homepage
06:57:07 <Heffalump> hmm
06:57:29 <shapr> ?
06:57:45 <Heffalump> just thinking about taking part
06:57:46 <shapr> I don't understand the exception handling stuff you guys are talking about, I'll put that on the top of my to read list.
06:57:50 <Heffalump> I think I'm in the same position as Igloo
06:57:58 <shapr> not sure where you'll be at that time?
06:58:02 <Heffalump> well, I'll probably be around, but I can't commit to doing it in advance
06:58:25 <shapr> that's cool
06:59:39 <Heffalump> the exception handling stuff is quite simple IIRC, there's a raise function of type Exception -> a, and a catch function of type IO a -> (Exception -> IO a) -> IO a
06:59:50 <Heffalump> s/raise/throw/
07:00:09 <Heffalump> basically it means you can raise an exception anywhere you like, but only code running under the IO monad can catch one
07:01:26 <pesco> Heffalump: Yes! Exceptions were one of the last things I was missing! Thank you. :)
07:01:44 <Heffalump> pesco: ??
07:02:33 <pesco> Heffalump: I just popped in and you stated how exceptions work in Haskell. Now I'm happy.
07:02:42 <Heffalump> errm, ok :-)
07:02:55 * Heffalump was aiming it at shapr, but if it's helped your day, so much the better
07:02:56 <pesco> loom2: Have you solved your sqrt problem?
07:03:10 <pesco> Exactly.
07:03:36 <loom2> pesco: yes!
07:03:47 <pesco> loom2: What was it?
07:04:29 <loom2> pesco: i was a bit too fast in pulling the interval together.
07:04:42 <pesco> loom2: Aha...
07:05:00 <ChilliX> time to sleep for me again - cu
07:05:03 * ChilliX is away: Not at the machine...
07:05:03 <shapr> loom2: cool, you did the interval search code?
07:05:09 <shapr> loom2: can I see?
07:05:21 <shapr> g'night Chilli
07:05:56 <loom2> shapr: yes, it was the last thing i coded monday, and so i slipped a bug into it :(
07:06:23 <loom2> shapr: i'll msg you the code, ok?
07:06:26 <pesco> loom2: As I couldn't follow your code yesterday, I'm not sure, but what it did was simply divide the interval in question in two until it hit, right?
07:06:28 <shapr> sure!
07:06:53 <shapr> loom2: or you could email it to me, if you find that simpler.
07:07:51 <loom2> pesco: yes. and i divided it into (l,l+n) and (l+n+1,r). the right interval should have been (l+n,r), though.
07:08:03 <pesco> loom2: I see. :)
07:08:11 <shapr> sounds like nifty code
07:08:22 <loom2> shapr: not really :)
07:08:42 <shapr> I'm not sure how I would write that in Haskell, so I'm interested in your implementation.
07:08:43 <pesco> loom2: However, the reason for my asking is this: I figured out why exactly it's called a square _root_.
07:08:59 <loom2> pesco: tell me :)
07:09:25 <pesco> (As usually engl. root = dt. Nullstelle)
07:10:10 <pesco> loom2: The square root of s is the positive root of \x->x^2-s .
07:12:02 <loom2> pesco: don't you mean \x->s^2-x?
07:12:19 <pesco> loom2: No.
07:12:34 * loom2 needs pen and paper :)
07:12:41 * shapr needs extra brain
07:13:02 <loom2> pesco: ok, i got it :)
07:13:06 <pesco> :)
07:13:30 <pesco> loom2: Now remember Newton's method!
07:13:55 <loom2> pesco: yes.
07:14:53 <jewel> shapr: ok I'm in
07:15:06 <shapr> jewel: w00!
07:15:09 <jewel> but I'll have to practice!
07:15:11 <shapr> much happiness!
07:15:15 * shapr bounces cheerfully
07:16:49 <pesco> loom2: The formula you wind up with is also given in Abelson and Sussman's book. :)
07:17:31 <shapr> jewel: I practice on weekends and some weekday evenings
07:17:43 <loom2> pesco: i did not apply the newton method - reading moeller's script at the moment.
07:18:13 <pesco> loom2: Oh, anything relevant to be found?
07:19:16 <loom2> pesco: it's actually a nice read :)
07:19:21 <pesco> Hrm.
07:20:19 <pesco> OK, I'll get back to F now, just wanted to point you to the Newton formula.
07:20:27 <shapr> F?
07:20:37 * pesco is away: dd if=F-Skript of=/dev/prain
07:20:52 <pesco> prain. :/
11:13:29 * jewel needs some trivial exercises to sharpen his haskell skills
11:13:45 <Heffalump> how trivial?
11:15:24 <pesco> How about the sieve of Eratosthenes?
11:15:46 <Heffalump> yeah, that's a nice one
11:15:53 <Heffalump> someone gave a really elegant solution to that here recently
11:16:03 <Heffalump> though I've forgotten what it was
11:16:34 <pesco> Oh, too bad I wasn't there. It's on my "implement this once more for memory refreshment" list.
11:16:50 * jewel surfs
11:17:51 <pesco> Heh, or factoring. MathWorld is such a nice source for programming exercises...
11:18:15 <shapr> hiya
11:18:34 <pesco> jewel: Or would you rather do monads? How about implementing a state transformer?
11:18:47 <pesco> shapr: hi there
11:18:55 <shapr> hi pesco, what's up?
11:19:03 <Heffalump> that's not exactly trivial
11:19:19 <pesco> Heffalump: That's true. But I found it highly instructive.
11:19:33 <shapr> hi Heffalump!
11:19:57 <Heffalump> my office is turning into a pile of hardware
11:20:07 <shapr> cool!
11:20:09 <jewel> not trivial  trivial
11:20:12 <jewel> just trivial
11:20:14 <xbill> Sounds like my apartment.
11:20:23 <shapr> hi jewel
11:20:25 <shapr> hi xbill
11:20:38 <xbill> I've got more sun4c hardware than I can shake a stick at
11:20:42 <jewel> hello
11:20:55 <jewel> I'm looking for simple problems to get going with haskell again
11:21:33 <shapr> jewel: is there anything you've implemented several times in different languages?
11:21:41 <shapr> I prefer mandelbrot fractal
11:21:52 <pesco> :) Try julia, too.
11:21:57 <Igloo> Raytracers seem to be another common one
11:22:29 <pesco> Ooh, yes, raytracing is on my to-do list as well...
11:22:44 <xbill> jewel: Automatically fixing up patches with fuzz and offsets. =)
11:22:45 <Heffalump> shapr: s'not that cool, it's not working yet
11:23:14 <shapr> Heffalump: I enjoy fixing hardware if I don't have to do it too often.
11:23:44 <xbill> jewel: There will likely be a horde of Linux ppl using the thing if you write it. Might be good publicity for Haskell. =)
11:23:46 <shapr> building a beowulf cluster in your office?
11:24:06 <pesco> Could anyone recommend a particular graphics library to use?
11:24:14 <jewel> You mean adjusting a patch for updated source
11:24:25 <pesco> I have yet to visualize my Julia fractals.. ;-)
11:24:43 <Heffalump> shapr: <aol>
11:24:47 <xbill> jewel: yes
11:24:54 <Igloo> I thought there was a tool that did that already
11:25:00 <xbill> There is?
11:25:11 <xbill> Igloo: What is it?
11:25:23 * jewel ponders, is there a diff or patch implementation in other languages, fp langs?
11:25:36 * shapr dunno
11:25:40 <shapr> Heffalump: aol?
11:25:54 <shapr> you're hosting aol in your office? :)
11:25:58 <Igloo> I could be misremembering - I'll see if I can find it easily
11:26:05 <pesco> I think I've seen at least a basic diff in Haskell already somewhere...
11:26:11 <xbill> diff, patch, procmail, and a number of other commonly-used utilities are totally unmaintainable and phenomenally ugly ona source level.
11:26:24 <Heffalump> <aol> = "me too"
11:28:18 <jewel> xbill: do you mean linux kernel people?
11:28:40 <loom2> shapr: did you get my mail?
11:28:52 <xbill> jewel: yes
11:28:56 <shapr> loom2: yes I did, I'll check out the source in just a few minutes, thanks!
11:29:31 <Igloo> Debian patchutils package contains "recountdiff recomputes counts and offsets in unified context diffs" and "rediff fixes offsets and counts of a hand-edited diff"; that may be what I'm thinking of
11:30:14 <xbill> I already took a stab at a very crude procmail-like thingie in Haskell.
11:32:25 <Heffalump> xbill: oooh.
11:32:32 <Heffalump> how good is it at correctly parsing incoming email?
11:33:20 <xbill> shapr: Was it you who took that over?
11:33:23 <Igloo> It wouldn't need to do much in the way of parsing would it?
11:33:42 <Heffalump> well, it needs to look at headers and stuff
11:33:46 <xbill> Heffalump: I was literally using it for some time as my primary means of getting email at work.
11:33:49 <Heffalump> oh, and it needs to be able to write to mboxes correctly :-)
11:33:57 <xbill> Igloo: It did some relatively braindead parsing.
11:34:20 <xbill> Heffalump: I just queued the stuff for local delivery by shoving it at localhost port 25.
11:34:22 <Igloo> Only to match regexps, and that's pretty much just lines, unlines and GHC's regexp library for an initial stab
11:34:34 <Igloo> I suppose there's line continuation too
11:34:59 <xbill> Igloo: Most of the work was case analysis for the different crap shoved in your face by the imap protocol.
11:35:11 <Igloo> It sounds like you mean fetchmail
11:35:12 <shapr> xbill: yah, I've got it.
11:35:26 <shapr> I haven't done anything with it yet.
11:35:28 <Heffalump> errm, in what way was it like procmail, then?
11:35:29 <xbill> Igloo: er, sorry, it was fetchmail not procmail, right.
11:35:33 <Heffalump> oh, right.
11:35:47 <xbill> It's ugly, but so is IMAP.
11:35:53 <Heffalump> pity, I need a decent procmail.
11:36:51 <xbill> procmail is legendary for its disgusting code 
11:36:58 <shapr> http://purl.org/wiki/haskell/IcfpContest
11:37:42 * Heffalump --> home (and no net access :( )
11:38:12 --- topic: set to 'GHC 5.04 released http://www.haskell.org/ghc/download_ghc_504.html || http://icfp2002.cs.brown.edu/ - looking for net accessible cvs and team members for a #haskell ICFP contest entry, more info on http://purl.org/wiki/haskell/IcfpContest' by shapr
11:38:14 <xbill> shapr: I'll see if I can get the day off on Friday.
11:38:19 <shapr> cool!
11:38:57 <shapr> I'm looking forward to this contest :-)
11:39:05 <xbill> shapr: hackers cannot code on the kernel alone =)
11:39:20 <shapr> yeah!
11:39:44 * shapr bounces
11:39:49 <Igloo> :-)
11:41:07 <xbill> shapr: oh
11:41:16 <xbill> shapr: Another good one:
11:41:25 <xbill> shapr: BPF -> i386 machine code translator.
11:41:39 * shapr googles for BPF
11:41:58 <xbill> shapr: with glue stubs to make it suitable for modprobing into the Linux kernel
11:42:05 <xbill> shapr; Berkeley Packet Filter
11:42:09 <shapr> ohh
11:42:15 <shapr> nifty
11:42:49 <xbill> shapr: It's a virtual machine designed for scripts that do packet filtering to compile to, and there are various in-kernel interpreters for it.
11:43:58 <shapr> hi ben4
11:44:02 <ben4> Hi there
11:44:10 <shapr> are you new to Haskell? or a long time user?
11:44:34 <shapr> got some questions you need answered?
11:44:35 <xbill> shapr: Haskell is good at parsing stuff & dealing with languages & translation so analyzing that stuff, hammering out decent machine code for it, and shoving it into the Linux kernel sounds good.
11:45:05 <ben4> I've used Haskell before as I'm a student at the University of Sheffield
11:45:16 <shapr> xbill: I agree, that would be a cool project.
11:45:28 <ben4> i'm wondering what |- means in logic
11:45:34 <Igloo> Which country, ben4?
11:46:10 <ben4> England
11:46:15 <Igloo> \Gamma |- foo means "foo holds in the system \Gamma" I think
11:46:31 <xbill> ben4: in judgments it's used to say (this set of assumptions) |- these conclusions hold
11:46:44 * Igloo tries to visualise it - yeah, that looks right. Although it might not be \Gamma.
11:47:18 <xbill> \Gamma |- N : \tau where \Gamma is an environment, \tau is a type, and N is a term
11:47:30 <xbill> is one of the more common uses
11:47:54 <ibid> in the books i've read, specifically, |- means "flip (is a syntactic consequence of)" :-)
11:48:16 <ibid> as opposed to semantic consequence
11:48:28 <xbill> ibid: Semantic being |=
11:48:35 <ibid> yes
11:49:09 <pesco> ibid, xbill: That's also my understanding. I'm taking an exam on these things just tomorrow. :)
11:49:10 <ibid> as in, syntactic -> theorem, semantic -> tautology (in the case of no assumptions)
11:49:29 * ibid is writing my msc thesis and this issue is related :-)
11:49:45 <ben4> ok I think I understand, I'm looking at resolution refutation
11:49:48 <ibid> bah, both haskell compilers are i386 only in debian
11:49:57 <xbill> I could use help on hyperdoctrines.
11:50:16 * Igloo bounces in an "exams finished" way, out of reach of pesco and ibid  :-)
11:50:25 <xbill> ben4: I'd have to go to the books for that one.
11:50:32 <shapr> ibid: you have another architecture in mind?
11:51:00 <ibid> shapr: just general wish to have my programs be available on all debian architectures :-)
11:51:14 <shapr> good point.
11:51:30 <Igloo> GHC would be infeasible. I don't know how easy nhc is to port in practise, but it's certainly supposed to be easier
11:51:57 * shapr looks for the page that says which arches GHC runs on
11:52:04 <ibid> Igloo: the only thing missing from my msc degree is the thesis... everything else is in place. so no exams until postgraduate studies :-)
11:52:12 <Igloo> It's arch/OS combinations that are important
11:52:29 <Igloo> Cool, ibid  :-)
11:52:36 <shapr> I'm fine with */Linux myself
11:52:38 * Igloo wonders what ibid's first degree was
11:53:00 <ibid> i took the bsc, but it's an optional intermediate stage here
11:53:14 <pesco> shapr: I'm fine with */Linux, too. Too bad PPC/Linux is included in that as well...
11:53:18 <Igloo> shapr: As in the existence of Sparc/Solaris doesn't necessarily mean Sparc/Linux will be easy
11:53:20 <ibid> Igloo: why do you think i have a first degree
11:53:28 <ibid> Igloo: in finland, most people go straight to msc
11:53:40 <Igloo> Because I live in England  :-)
11:53:45 <Igloo> Is that a 4 year course then?
11:54:09 <ibid> Igloo: it's whatever it takes. 5 years is the norm
11:54:13 <shapr> pesco: ghc does MacOSX at least
11:54:17 <ibid> Igloo: 160 credits, 320 ECTS
11:54:22 <Igloo> Right, OK
11:55:32 <ibid> Igloo: although i do know one who completed the msc in three years after matriculation
11:55:48 <ibid> Igloo: and seven or even nine years is not unheard-of
11:56:08 <Igloo> Hmmm, interesting
11:56:11 <ben4> what do you reckon to my degree, MComp 4 years?
11:56:44 <Igloo> I don't understand the question, ben4
11:57:01 <ibid> Igloo: students have lots of freedom and responsibility concerning their studies here
11:57:06 <shapr> sounded like "should a MSc for CS take four years?"
11:57:57 <ben4> Well you get bsc after three years and msc after an extra year
11:58:11 <shapr> bachelor's takes three years now?
11:58:20 <ibid> ben4: in some parts of the world :-)
11:58:40 <shapr> last I heard it takes four years in the USA
11:58:52 <shapr> I'd like to get a bachelor's from the Uni of Lulea in Sweden.
11:58:53 <ibid> there are plans in the eu to standardize to a 3+2 model (3 years to bsc and 2 years for msc)
11:59:01 <shapr> hm, nifty.
11:59:24 <Igloo> B* in the UK is 3 years, M* is 4 years, except when it's an MSc and it's 1 year after a B* or you'r at Oxbridge and it's an MA in which case it's 7 years after matriculation if you get a B*. There are probably more exceptions too.
11:59:34 * ibid knows because our teaching was just restructured to match that model...
12:00:05 <shapr> loom2: your code is nifty
12:00:25 <Igloo> See also: http://www.wadham.ox.ac.uk/~jstacey/FAQs/ox.FAQ.html#33
12:01:08 <ibid> shapr: weren't you in finland sometime?
12:01:18 <shapr> I am now.
12:01:23 <shapr> I live in Tornio, remember?
12:01:51 <shapr> I've only been here three years though, so I know very little about the educational system.
12:02:13 <ibid> no i don't :-)
12:02:17 <shapr> oh, ok :-)
12:02:22 * ibid just remembers that nick from #debian-fi
12:02:44 <shapr> yop, I started #debian-fi, though I passed foundership to liiwi since I'm moving to .se
12:03:19 <ibid> ok
12:03:28 <ibid> bah
12:03:31 <shapr> finland is a cool place :-)
12:03:38 <ibid> literally? :-)
12:03:43 <shapr> heh, that too!
12:03:49 <ibid> my laptop refuses to cooperate
12:06:10 <ibid> uh, actually i remember that you live in tornio. i just misread that as "toronto" for some very strange reason
12:11:33 <ben4> thanks for your help, i'm off. bye
12:15:08 <YveDeLarc> hi
12:15:12 <shapr> hi YveDeLarc
12:15:29 <shapr> looking for Haskell help? or comrades in code? ;)
12:15:41 <YveDeLarc> both ;)
12:15:56 <shapr> got any questions you need help with?
12:16:20 <YveDeLarc> My mind's in knots at the moment.. let's see if I can concisely describe what I would like to accomplish
12:19:00 <shapr> YveDeLarc: are you having trouble turning your ideas into code?
12:19:27 <YveDeLarc> I would like to implement an abstract TCP client. For this, I would like to have two functions (send :: String -> IO (), recv :: IO String) and something like withServer :: Handle -> IO a -> IO a which takes an IO action and executes in context of an open Handle to the server
12:19:59 <YveDeLarc> as far as I understand, the recommended approach for this would be to extend the IO Monad
12:20:44 * Igloo has such a thing deep in my TODO list  :-)
12:20:44 <YveDeLarc> of course, I could implement my own TcpClientMonad for this, but it would make it a lot harder to mix this behaviour with other monadic behaviours
12:21:20 <Igloo> Well, maybe what I was thinking of is more abstract, actually
12:21:31 <YveDeLarc> for a single server instance, there is also the possibility of an ugly hack with unsafePerformIO
12:22:24 <YveDeLarc> but it would neither be clean nor usable with more than one server in the same process
12:22:42 <YveDeLarc> Igloo: what's your goal?
12:23:33 <YveDeLarc> btw I'm impressed - last time I checked #haskell, almost nobody was here
12:23:49 <shapr> happily, we have mutable state :)
12:24:13 <YveDeLarc> shapr: could you elaborate on that, please?
12:24:19 <Igloo> I was thinking about something that gave a nice intreface to line-based protocols like SMTP. Haven't thought about any details, though.
12:24:43 <Igloo> mutable state?
12:24:48 * Igloo banishes shapr to #java  :-P
12:24:52 * shapr laughs
12:25:07 <shapr> that happens to me every workday already :-P
12:25:45 <shapr> movie time, bbl
12:25:59 <YveDeLarc> shapr: have fun
12:26:01 <Igloo> See ya
12:26:49 <YveDeLarc> Igloo: actually, what I'm doing right now could use that really well. Don't laugh, I'm working on an automagical recipe extractor with a NNTP interface.
12:27:25 <Igloo> Well I don't think I'll get around to writing it in the short term, sadly  :-/
12:27:50 <YveDeLarc> hmm.
12:28:46 * YveDeLarc digs a little deeper into Monad examples, the library and everything(tm)
14:19:33 <loom2> re
14:20:29 <shapr> y0
14:21:38 <pesco> re!
14:21:44 * pesco is away: I'm busy
14:21:48 * pesco is back (gone 00:00:03)
14:21:49 * shapr bounces
14:24:31 * pesco bounces
14:25:55 <pesco> shapr: Ok, looks like things are already way ahead of me on the ICFP contest. Count me in!
14:26:07 <shapr> cool! add yourself to the wiki page?
14:26:35 <pesco> Yes, will do.
14:27:39 <loom2> did i mention we also have a cvs? :)
14:27:45 <shapr> you do?
14:27:51 <pesco> *G*
14:27:56 <loom2> pesco and i, yes
14:28:03 <shapr> something you could let contest entry team members use?
14:28:25 <loom2> i think so, yes.
14:28:33 <pesco> Most probably.
14:28:47 <shapr> nifty!
14:29:17 <pesco> shapr: Do you have an URL for the Wiki page?
14:29:29 <loom2> pesco: it's in the topic
14:29:31 <shapr> it's in the channel topic
14:29:37 <pesco> Oh :)
14:31:27 <loom2> shapr: is the page supposed to be empty?
14:31:34 <shapr> um, no?
14:31:40 <shapr> http://haskell.org/wiki/wiki?IcfpContest
14:32:20 <loom2> shapr: ok, i appended a slash. now it looks much better.
14:34:49 <shapr> yay
14:37:54 <Igloo> Add me as possible if you want
14:38:10 <shapr> yay!
14:39:07 <Igloo> ? I've always said I'd be possible, haven't I?
14:39:39 <shapr> Igloo: yes, and it's still an encouraging thing to hear
14:39:47 <Igloo> :-)
14:42:25 <Igloo> Why do I have a hyperlinked ? rather than a hyperlinked name?
14:43:18 <shapr> because that page doesn't exist yet.
14:43:32 <Igloo> Ah
14:43:35 <shapr> you can click on the question mark to edit the non-existing page, and in the process create it.
14:43:58 <Igloo> I got confused because non-existant pages look the same as existant ones
14:44:42 <shapr> yah, only the system knows.
14:47:41 * Igloo looks at http://kungens.kemi.fi/~shae/haskell/Banana.hs...(128 :: Int) is shorter than oneTwoEightInt and equivalent, you know?
14:49:04 <Igloo> Hmmm, and you don't use it anyway
14:51:17 * Igloo giggles at comments like "-- massive suckage"  :-)
14:51:44 <pesco> :)
14:54:17 <shapr> hah
14:54:42 <shapr> Igloo: I'll go back and clean it up as soon as I fix the outstanding bug
14:55:18 <Igloo> *nod*  :-)
15:07:24 <pesco> OK, sleep, now. Goodbye all!
15:27:57 <shapr> well, it's 1:30am
15:28:06 <shapr> and I need to get up early tomorra
15:28:08 <shapr> hi malc
15:28:12 <shapr> g'nite malc  :-)
15:28:20 <loom2> night sharp
15:28:25 <loom2> shapr even :)
15:28:26 * shapr falls over asleep
15:29:31 <malc> ahem
15:31:43 * loom2 listens
15:34:38 <malc> there is hardly any point
15:38:17 <hennker> hiho
15:38:23 <hennker> anybody awake?
15:39:38 <malc> yes
15:40:17 <hennker> good :)
15:40:27 <hennker> i have a question concerning monads
15:41:14 <hennker> i have a class: Class Monad m => M m
15:41:26 <hennker> in this class there are several functions defined
15:41:44 <hennker> in one funtion i need to do I/O, getLine for example
15:41:59 <hennker> but this seems to change the type of the funtion to IO a
15:42:32 <hennker> is there a way to do I/O, while preserving my old Monad m type?
15:43:04 <malc> no idea, im here just out of sheer boredom
15:43:11 <hennker> lol
15:43:15 <hennker> ok
15:43:45 <malc> but getLine surely changes the type.. it needs IO monad after all
15:44:58 <hennker> IO really is not trivial to me in haskell :(
15:46:09 <malc> try something else then.. clean or something even more rebeleous
15:46:21 <hennker> hrhr
15:46:56 <hennker> well, i am restricted, because it`s a project at university, and i just have to fill up the code
15:47:09 <hennker> i am sitting here the whole night wondering how it could be solved
15:47:29 <malc> you shouldnt have skiped your classes in the first place
15:47:42 <hennker> skipped my classes?
15:48:08 <malc> otherwise you would have been thought how to solve this kind of problems, no?
15:48:26 <hennker> uhm, no. it`s more of teach yourself
15:48:52 <hennker> there was a quick tutorial to haskell first, but not too deep into it
15:50:07 <hennker> please, don`t think i am lazy. i think this is a problem mostly all in the class won`t solve alone. i hoped to finish it this night, but it looks like i have to ask my tutor tomorrow
15:51:29 <hennker> it`s an implementation of an abstract machine with stack and heap. we have to expand it with I/O, but i see no place, where this expansion would fit in
15:51:33 <hennker> weird
15:52:15 <malc> there is very little i can do here.. a) its 2:50 b) my CD is disconnected c) ghc is not installed and haskell is on cd's.. so duh
15:52:41 <hennker> hehe, no problem
15:52:55 <hennker> 0:50 here, not quite that late :)
15:53:03 <hennker> but thanks for your effort
15:53:04 <malc> but maybe some of the eggheads here(given that they woke up) will help
15:53:21 <malc> oh yeah it was enormous effort, left me completely exhausted
15:53:28 <hennker> hehe, but my head is aching. i think i`ll have to go to bed soon, too
15:53:33 <hennker> :P
15:53:49 <hennker> not meant as an offense
15:54:06 <hennker> you do much work with haskell?
15:54:12 <malc> shame actually... cause my collection of 'assigments made for other people' needs some new additions
15:54:31 <hennker> hrhr
15:54:40 <malc> i did a homework for some guy 2 years ago and wrote some simple stuff not so long and thats about it
15:55:06 <hennker> ic. this class is my first impression of haskell, and i must say i really am impressed
15:55:43 <malc> where do they teach this stuff btw?
15:55:49 <hennker> i had lisp as my first functional language, and i didn`t liked it at all
15:56:01 <hennker> at which university you mean?
15:56:06 <malc> yep
15:56:17 <malc> somewhere in .de i gather
15:56:24 <hennker> rwth aachen, in germany.
15:56:43 <hennker> it`s just a class, i could have visited another class with java or c or whatever
15:57:13 <malc> i think i can safely complement you for at least an "interesting" choice
15:57:41 <hennker> hehe, yep, that`s what i hoped it would be. and it turned out to be very interesting
15:59:22 <malc> good luck with in your monadic struggle, me im heading to bed.. tschuss
16:00:45 <hennker> got it! :)
16:15:19 * ChilliX is back (gone 00:08:24)
16:17:02 <xbill> I'll flag someone down wrt. hyperdoctrines later then.
20:02:35 <Mangler> i have a quick question (note:  haskell newbie),  i have an list of strings and I need to modify a single character in one of the strings in the list,  is there a simple way to do it ?
20:04:23 <ChilliX> if you want to replace "string1" by "string2", you could do
20:04:46 <ChilliX> [if s == "string1" then "string2" else s | s <- mystrings]
20:04:58 <ChilliX> (this replaces all "string1" by "string2")
20:05:33 <ChilliX> (it's also not terribly efficient; if you need to do very many of these ops, you might want to use something other than a list)
20:06:06 <Mangler> efficiency should be alright,  i won't be doing too many of them
