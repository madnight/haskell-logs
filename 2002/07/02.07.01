07:43:48 <shapr> hiii
07:43:53 <Heffalump> yo
07:44:00 <shapr> what's shaking?
07:44:15 <shapr> or maybe "curried any functions lately?"
07:44:39 <shapr> hi tpck
08:00:59 <Igloo> Nah, but I've uncurried some. Much more common in Haskell IME
08:01:15 <shapr> that's true.
08:01:25 <Heffalump> isn't currying them the process of partially applying them?
08:01:44 <Heffalump> or DYM turning a function that takes a tuple into one that doesn't?
08:01:51 <Igloo> I thought currying was taking a function of type (a, b) -> c and making a function of type a -> b -> c
08:02:04 <shapr> yah, what igloo said
08:02:14 <Heffalump> yeah, ok
08:02:17 <Igloo> I guess you could argue that you are implicitly currying functions when you write actual Haskell code
08:02:27 * shapr buys more curry sauce
08:02:52 <shapr> I introduced my brother to HP Sauce this last week.
08:03:01 <shapr> He's going to try to find some in Alabama.
08:03:22 <Igloo> Never been a fan myself
08:03:48 * Igloo realises I've been distracted (but in a good way) and gets on with what he came down here to do
09:11:20 * shapr hacks along with HUnit tests in hand
10:26:41 <shapr> crap
10:29:31 <shapr> I think I've found an error in the haskell 98 report.
10:29:33 <shapr> or ghc
10:30:18 <shapr> whoops
10:30:21 <shapr> user error
10:31:52 <shapr> how do I raise something to the -1 power?
10:31:56 * shapr is suddenly confused.
10:32:01 <shapr> oh
10:32:02 <shapr> duh
10:32:04 <shapr> never mind
11:00:55 * shapr is struck by inspiration
11:01:01 * shapr gets a bruise
11:01:11 <shapr> aha!
11:01:17 <shapr> euraka!
11:01:20 <shapr> but I can't smell you!
11:01:44 <Igloo> What are you inspired about? Banana?
11:01:50 <shapr> yup
11:02:02 <Igloo> Cool
11:02:19 <shapr> I just realized that "toRational (significand (x :: Double))" always gives x % 2048
12:04:51 * shapr thinks
12:25:33 <shapr> can I have guards inside a let statement?
12:32:26 <Heffalump> no
12:32:37 <shapr> hm
12:32:44 <Heffalump> well, I don't think so. What do you want to do?
12:32:53 <shapr> let foo = bar in
12:33:10 <shapr> | x == baz = blah foo
12:33:20 <shapr> | x == quux = blargh foo
12:33:29 <Heffalump> you can use a where clause, I think
12:33:35 <shapr> oh, good point
12:33:38 <Heffalump> Igloo would probably know for sure
12:44:17 <shapr> yes, where clause works for what I want
12:44:17 <shapr> thanks
12:51:15 <shapr> hey, ghc problem
12:51:30 <shapr> last two lines of http://www.haskell.org/onlinereport/basic.html
12:51:38 <shapr> claims that there's a fromRealFrac function
12:51:47 <shapr> I want to cast from Float to Double
12:51:52 <shapr> but I can't find fromRealFrac in ghc
12:52:08 <shapr> anyone else having that problem?
12:55:08 <shapr> it's not in hugs either.
12:55:17 <shapr> that appears to be an error in the Report
13:00:14 <Heffalump> it's more likely to be an error in ghc/hugs
13:00:20 <Heffalump> but if you're sure, email the list with it
13:01:13 <shapr> strangely, that fromRealFrac function is not mentioned in the function index either.
13:07:29 <shapr> hah, it's fixed in the latest draft
13:07:41 <shapr> it should be realToFrac
13:08:06 <shapr> only fixed on simonpj's homepage draft though
13:38:53 <Usul> hey all
13:39:09 <Usul> can i not do a 'where' within a guards section?
13:41:13 <Heffalump> within one? I doubt it
13:41:20 <Heffalump> did you try putting in brackets?
13:41:56 <Usul> no
13:42:01 <Usul> i was just wondering yet :)
13:43:24 <Igloo> where has scope across all guards of a function
13:43:31 <Igloo> You can use let inside a guard
13:43:46 <Heffalump> surely using where within brackets would be ok, though?
13:44:04 <Igloo> within brackets?
13:44:23 <Heffalump> foo == (bar where baz)
13:44:29 <Heffalump> with appropriate ;s if necessary
13:45:15 <Igloo> where clauses can only come after complete function definitions (and instance declarations etc)
13:47:28 <Igloo> Oh, except complete case statements can have them too
13:49:11 <Heffalump> ah, ok
