00:10:17 <delYsid> fac = foldl (*) 1 . enumFromTo 1 -- sweet!
00:14:16 <Jii> are you reading the evolution of haskell programmer text? ;-)
00:15:45 <delYsid> yeah :)
00:20:02 <jens> anyone using ghc's libraries with hugs?
00:20:27 * jens wants to use posix from hugs!
00:21:20 * jens tries asking again...
00:21:27 <jens> anyone using ghc's libraries with hugs?
00:21:37 * jens wants to use posix from hugs!
00:37:36 <delYsid> Does anyone have code for a lazy prime list?
00:39:52 <Heffalump> there's a one-line sieve of eratosthenes, IIRC
00:40:34 * Heffalump tries to work it out
00:42:07 <Heffalump> sieve (p:xs) = p : sieve [ x | x <- xs, x `mod` p > 0]
00:42:11 <Heffalump> primes = sieve [2..]
00:42:14 <Heffalump> ok, 2-line
00:42:19 <Heffalump> (/me googled for it)
00:51:47 <delYsid> ahh, nice.
00:51:54 <delYsid> Just found the same thing :)
00:53:58 <Jii> or you could go and implement the new algorithm for primality test that is guaranteed to go in deterministic polynomial time (link in slashdot, it's in pdf only though)
00:54:02 <Jii> ;-)
00:56:33 <delYsid> I wonder, can I express primes also as a kind of Enum datatype?
00:57:37 <delYsid> So that [3..11] would yield [3,5,7,11]?~
01:03:00 <Heffalump> hmm
01:04:33 <Heffalump> what would [3,7..11] do?
01:10:41 <delYsid> I suppose it should give [3,7,11]
01:11:06 <delYsid> and [4..11] should raise an error.
01:11:33 <delYsid> ahh, no!
01:11:38 <Heffalump> but 11 is the next prime after 7
01:11:51 <delYsid> hmm, it would give [3,7]
01:16:33 <Heffalump> http://urchin.earth.li/~ganesh/primes.hs
01:16:52 <Heffalump> code sucks efficiency-wise and there's no [3,7..11] or [3,7..] support
01:24:02 <delYsid> Heffalump: cool, tnx, that was quite helpful.
01:24:05 <delYsid> succ and pred...
01:33:49 <Heffalump> successor and predecessor
01:34:53 * shapr yawns
01:36:49 <Jerub> shapr: I kept thinking about the graphical thingy.
01:38:03 <Jerub> shapr: how do you feel about replacing {while, if, do/while, : ?, for, case} with a configurable widget?
01:56:26 <shapr> Jerub: I've never seen a non-clumsy replacement, but I'm always willing to try new things :-)
01:56:43 <Jerub> shapr: within a graphical enviroment.
01:57:10 <Jerub> it could work..
01:57:43 <shapr> it sounds interesting.
01:58:52 <Jerub> I mean, whats the difference between while and do while and if?
01:59:20 <Jerub> its where the expression is evaluated and how often to evaluate the statement.
02:00:11 <Jerub> you can configure all that with a simple interface to a standard widget.
02:01:53 <Jerub> Within a graphical enviroment I see 3 major things needed. This thingy, Grand Unified Control Structure for lack of a better name. The Function control structure (return being a part of this construct), and abitary function calls.
02:02:06 <Jerub> Am I missing something thats required in order to write a program?
02:03:06 <shapr> Jerub: have you seen the lego mindstorms graphical environment?
02:03:29 <Jerub> ooOoo - should I have a gander?
02:03:39 <Jerub> this is suddenly really really interesting to me. This whole area.
02:03:41 <shapr> it was pretty cute
02:04:27 <Jerub> is there a linux version?
02:04:33 <Jerub> or should I try to look for screenies
02:48:08 <shapr> hey this is useful:
02:48:22 <shapr> http://repetae.net/john/computer/haskell/main.html
02:49:11 <Jii> where did you find it from?
02:49:36 <shapr> I was downloading his Format.hs and UTF8.hs sources
02:49:48 <shapr> and I decided to explore his directory structure a bit more
02:51:37 <Jii> yah
02:59:32 * delYsid yawns
02:59:53 <delYsid> grrr, I'm growing older, night without sleep + work afterwards...
02:59:56 <delYsid> I'm tired!
03:00:59 <shapr> heh
03:01:02 <shapr> I have to sleep
03:01:20 <shapr> well, maybe I'm just too lazy to skip nights of sleep anymore.
03:03:06 <shapr> hei Jii
03:03:15 <delYsid> heh, I didnt plan to skip, but Absint had strange effects on me :)
03:03:24 * delYsid wonders if this is the correct enlgish word too.
03:03:31 <shapr> absinthe
03:03:37 <delYsid> yeah
03:03:45 <shapr> if it's the real thing, that has strange effects on everybody
03:03:57 <delYsid> yeah, it was the real thing
03:04:08 <delYsid> Just one glass, but thats enough...
03:04:15 <Jerub> ?
03:04:45 <delYsid> Jerub: Absinthe is 60% alcohol + Tholuon or however that is called.
03:04:57 <shapr> the real thing has wormwood in it...
03:05:34 <Jerub> ahh
03:05:43 <shapr> hey clausen, ltns
03:05:48 <clausen> hi
03:05:53 <clausen> ltns?
03:06:01 <shapr> delYsid: the real original absinthe was illegal for seventy or eighty years
03:06:08 <shapr> clausen: ltns == long time no see
03:06:10 <delYsid> Artemisia Absinthium, yeah, thats it
03:06:31 <shapr> that restriction has been lifted, but I'm still a bit wary of it :-)
03:06:32 <Jerub> shapr: why was it illegal?
03:06:43 <shapr> because it's a psychactive drug
03:06:49 <shapr> er "psychoactive"
03:06:52 * shapr can't type today
03:06:57 <shapr> meeting time....
03:06:58 <clausen> so's sugar
03:07:04 <Jerub> ah
03:07:20 <delYsid> well, absinthe is a nerve-po8ison basicly.
03:07:26 <delYsid> Like Nicotine and so on...
03:07:46 <Jerub> righto.
03:07:51 <clausen> delYsid: with a name like that, I trust you as being an expert (!)
03:08:04 <clausen> (delysid was a brand name for LSD when it was legal, right?)
03:08:05 <delYsid> Anyway, one glass resulted in a sleepless night... :)
03:08:11 <shapr> wow
03:08:13 <delYsid> clausen: haha, not many people recognize it :)
03:08:40 <delYsid> clausen: right, delysid, sold by Sandoz, CH
03:08:44 <clausen> absynth is legal in brazil
03:08:54 <clausen> it's fairly highly taxed though
03:09:01 <delYsid> clausen: It's also legal here, but not easy to get :)
03:09:13 <clausen> (it isn't legal here... .au)
03:09:17 <clausen> (but quite possible to get)
03:09:23 * clausen has tried neither LSD nor absynth
03:09:30 <clausen> (but has friends who have, hehe)
03:09:34 <Jerub> I've never done any illegal drugs.
03:09:38 * clausen neither
03:09:41 * clausen is pure
03:09:43 <delYsid> well, I wouldnt place them in the same category :]
03:09:51 * clausen doesn't even have a caffeine addiction!
03:09:52 <Jerub> I've known people who were 100% drugfucked.
03:10:11 <clausen> I don't
03:10:31 <clausen> but I know plenty of people who have problems with their lives that they probably otherwise wouldn't have had
03:11:03 <delYsid> well, thats true for women, food, alcohol, sports, whatever...
03:11:28 <clausen> delYsid: right... it's all a matter of "is it worth it?"
03:11:43 <delYsid> Or a matter of "personal decision"
03:12:01 <clausen> (the answer to my question is a personal decision)
03:12:07 <Jerub> delYsid: yeah well, I don't consider my wife a problem, food is a recurring need, but it doens't cost $100/meal fortunately, alcohol is nice - but I just like wine, so I'm clear there.
03:12:15 <Jerub> The only thing on that list thats every got me in trouble is sports.
03:12:34 <Jerub> I've had people threaten to beat the shit out of me because I don't give a shit about sport.
03:12:36 <clausen> in any case, I think "happiness" is extremely fragile, and since research on drugs is pretty thin, I'm not prepared to take risks
03:13:39 <delYsid> Drugs are only good for you if everything is fine...
03:13:53 <delYsid> As soon as ppl take it to get "more happy", its abuse.
03:13:57 <Jerub> Women are only good for you if everything is fine.
03:14:11 <delYsid> Jerub: YOu got the idea :)
03:14:14 <clausen> Jerub: but you still "get" them to become "more happy"!
03:14:54 <clausen> delYsid: why would you take (recreational) drugs for a reason other than to become "more happy"?
03:14:56 <Jerub> clausen: I also got mine to get me meals, make me cakes, and clean the house.
03:15:03 <clausen> Jerub: LOL
03:15:06 <Jerub> admitantly, I cook alot of meals and do my fair share of the cleaning.
03:15:30 <shapr> yah, my woman, my slave...
03:15:41 * shapr carefully looks around to make sure she's not listening
03:15:45 <shapr> whew
03:15:46 <delYsid> clausen: Ever read Doors of perception or something similar?
03:15:59 <clausen> delYsid: no
03:16:03 <shapr> y0 Chilli
03:16:06 <shapr> wassup?
03:16:11 <Jerub> shapr: *grin* - she's not my slave by any stretch of the imagination.
03:16:13 <Chilli> Moin shapr
03:16:17 <shapr> moin moin
03:16:36 <Jerub> moin chilli
03:16:38 <delYsid> clausen: Then "consciousness expandion" or some other buzzword will not really mean much to you I guess.
03:16:40 <Jii> chilli, there was some talk about your book, on whether it is published yet :)
03:16:42 <shapr> Jerub: yah, neither mine...
03:17:06 <Jerub> I should consider getting J2EE skillz
03:17:12 <clausen> you're wanting to argue that "consciousness expandion" isn't connected to "more happiness"?
03:17:12 <shapr> Jerub: noooo
03:17:15 <shapr> j2ee succccksss soo bad
03:17:22 <Chilli> Jii: the intro to computing book using Haskell?
03:17:28 <clausen> maybe I see everything in terms of happiness because I'm a hedonist, hehe
03:17:29 <Jii> chilli, yes, that
03:17:33 <shapr> Chilli: I'd like to order a copy too
03:17:37 <clausen> (new channel?  #drugs ?)
03:17:42 <Jerub> shapr: but every jjob I see is either ASP or J2EE
03:17:50 <delYsid> clausen: I'd say they are related, but not the same thing.
03:17:58 <shapr> Jerub: programmers are famous for making an asp of themselves
03:18:10 <clausen> shapr: ?!!
03:18:17 <shapr> bad joke :-)
03:18:20 * clausen wouldn't be seen dead with an ASP of himself
03:18:36 <clausen> that said, there are some .br script kiddies that could well be bots
03:18:53 <Chilli> the publisher is Pearson Education Australia: http://www.pearsoned.com.au/
03:18:57 <clausen> a very nerdy insult, hehe, writing a bot that impersonates someone, and applying the Turing Test...
03:19:04 <Jerub> In fact my only saleable poitns are : Held down part time programming job for 1/2 of 3 year degree, and 3 year degree.
03:19:50 <Chilli> they are at the moment mainly selling it to .au unis as it is published in what they call the Sprint Print series
03:20:27 <Chilli> which is a kind of quick turn around thing use for when people are about to turn their lecture notes into a book
03:20:42 <delYsid> It's a good book btw
03:20:49 <shapr> Jerub: the most marketable skill is the ability to learn what you need to get a job done.
03:20:50 <Chilli> thank you :-)
03:21:14 <Jerub> Chilli: Our lecturer teaches haskell+prolog from his own notes. They suck. 
03:21:28 <Jerub> s/Our/My/
03:21:48 <Jerub> shapr: I like that reasoning. How do I put that on a resume?
03:21:57 <Jii> the notes, not haskell and prolog? ;-)
03:22:04 <Jerub> yeah, the notes.
03:22:37 <Chilli> http://www.pearsoned.com.au/highered/titleDetails.asp?isbn=1740094042&DisciplineID=CS&DisciplineName=Computer%20Science&CourseCodeID=CS0612&CourseCodeName=Functional%20Programming
03:22:40 <Chilli> that's it
03:22:54 <Jerub> He glosses over so much. i.e. a -> a -> a type definitions are barely touched
03:23:06 <shapr> I think those are important
03:23:25 <shapr> I think it's especially important to mention that they're a -> (a -> a)
03:23:57 * Jerub shudders. Anchor tags on a 1 1/2 screen webpage.
03:24:10 <Jerub> shapr: he ''mentions'' all that, but doesn't explain it clearly.
03:24:21 <Chilli> Jerub: where is that?
03:24:45 <Jerub> Chilli: UQ, www.itee.uq.edu.au/~comp3400/ User/Pass = comp3400/lambda
03:24:50 <shapr> Jerub: I think you won't understand currying unless you realize that -> is right associative.. I may be wrong.
03:25:46 <Jerub> I'm not very appreciative of his notes and stuff, but I'm making the best of it. And the newsgroup helps (asking/answering questions caused by misconceptions)
03:26:08 <Chilli> The course that I am teaching this session is actually the one from the book
03:26:19 <Chilli> first time it is taught from the book actually
03:26:27 <Jerub> he's a prolog programmer, who's also teaching haskell.
03:26:28 <Heffalump> sad news, btw: Dijkstra died last night
03:26:33 <shapr> :-(
03:26:35 <Chilli> before, I had just lecture notes (ie, one PS file per week)
03:26:36 <Jerub> :(
03:26:39 <Chilli> oh
03:26:39 <Jii> uh, really?
03:26:50 <Chilli> I knew that he was quite sick...
03:26:58 <Heffalump> well, an email went round our department, and he was known to be quite sick
03:27:21 <Heffalump> so I believe the news
03:27:43 <Jerub> Heffalump: is there a url?
03:27:51 <Heffalump> no, just an email I got
03:28:08 <Jerub> (God, what a quick world we live in)
03:28:08 * shapr checks slashdot
03:28:20 <Chilli> hmm does recursion before types...strange
03:28:39 <Chilli> in my first lecture of the course after 10min I introduce types
03:28:42 <shapr> hei dark
03:28:43 <dark> Hello :)
03:28:45 <Jii> heffalump, just a notice, not any "explanation" or more verbose news?
03:29:09 <Heffalump> >> Edsger died at 11PM on Tuesday, August 6th, at his
03:29:09 <Heffalump> >> home in Neunen, the  Netherlands. The end came
03:29:09 <Heffalump> >> quietly; he simply stopped breathing. His  wife,
03:29:09 <Heffalump> >> Ria, and all his children were with him at the end.
03:29:15 <Jii> chilli, and "Hello, world" at the last lecture? ;-)
03:30:07 <Chilli> Jii: tsssss
03:30:13 <dark> Heffalump: Dijkstra?
03:30:18 <Heffalump> dark: yeah :(
03:30:35 <Chilli> our course web page is here http://www.cse.unsw.edu.au/~cs1011/
03:31:09 <dark> I didn't know he was close to death.  A great loss.
03:31:12 <Jii> heffalump, can i quote that anonymously (not mentioning your name)?
03:31:53 <shapr> lots of UTF8 traffic on the haskell mailing list today.
03:32:26 <shapr> Jii: btw, your programming book graph is very cool
03:32:30 <dark> "I mean, if 10 years from now, when you are doing something quick and dirty, you suddenly visualize that I am looking over your shoulders and say to yourself, "Dijkstra would not have liked this", well that would be enough immortality for me"
03:32:41 <Heffalump> it's gone to enough people that I don't think it's disrespectful to pass it around, so I'll forward you the email if you want
03:33:03 <Jii> heffalump, ok thanks jajvirta@cc.helsinki.fi
03:33:16 <Heffalump> anyone else?
03:33:19 <Jerub> Nope.
03:33:19 <Jii> shapr, oh, yeah, it's just that the amazon web api sucks (a bit at least :)
03:33:29 <shapr> Heffalump: shae@ScannedInAvian.com
03:33:54 <Jerub> I'll be surprised if I don't see a slashdot article in the next 6 hours.
03:34:07 * Heffalump too, but I'm certainly not submitting it
03:34:13 * delYsid feels stupid
03:34:16 <delYsid> Who is he?
03:34:22 <delYsid> er, was he... :(
03:34:47 <Jerub> CS guru. Did work with proving algorithms, iirc.
03:34:53 <Chilli> the guy who didn't like GOTO
03:35:15 <delYsid> There are more than just he :)
03:35:28 <Jerub> Chilli: Your book - is it available in a digital format?
03:35:53 <ibid> the guy who wrote "a discipline of programming".  what, haven't everybody read it? :-)
03:36:02 <dark> delysid: Yeah but he wrote the original "Go To Statement Considered Harmful" article :)
03:36:23 <Chilli> delYsid: and they guy from whom the quote at thye start of Chapter 9 is!
03:36:59 <dark> And, if my brain is not messed up, he did most of the groundwork for semaphores and other concurrent programming primitives.
03:37:04 <Chilli> Jerub: I am sorry, but at the moment the only format is the printed version from Pearson
03:37:17 <Chilli> dark: true
03:37:24 <Jerub> Chilli: Its a shame. I'm a student.
03:38:01 * Heffalump wonders about doing something about the idea of an electronic intermediate Haskell book
03:38:28 <Jii> and his turing award paper The humble programmer is great too
03:38:56 <Chilli> Jerub: your uni bookshop should be able to order it
03:39:30 <Chilli> Jerub: it's actually not very expensive (that's another advantage of the Sprint print series)
03:39:35 <Jerub> Chilli: Sorry, I meant "Its a shame : I'm a *student*". I can't afford textbooks.
03:39:42 <Chilli> Jerub: 30 something bucks australian
03:39:48 <Jerub> now THAT is a cheap text.
03:40:01 <Chilli> Jerub: I wanted it cheap, for my students
03:40:45 <Jerub> Chilli: I heard about one lecturer that taught out of his own book. He was rather bitter that it sold for $90 and he got .05$ or something equally insignificant.
03:40:56 <Jii> now i feel cheap for i had to mention about the death of dijkstra on web, but, still, it is significant and sad news
03:41:03 <Jerub> He gave the entire class free license to photocopy/pirate/whatever anything they needed.
03:41:28 <Jii> maybe i shouldn't, i don't know :)
03:41:32 <Jerub> Jii: I would feel honoured to be remembered on a mass scale like the internet.
03:41:37 <Chilli> and as I have many students (as in 450), the publisher could make a good price
03:41:49 <Jerub> oh good.
03:42:02 <Chilli> (this is 450 in one session; the other session, there are even more)
03:42:09 <Jerub> awesome.
03:42:09 <Heffalump> grrrrr typesetting Haskell is a pain
03:42:12 <ibid> hm
03:42:12 <Jii> jerub, yeah, true
03:42:18 <Jerub> I'd love to go to a nicely organised university. UQ is .. not.
03:42:34 <ibid> shapr: he was another hero of mine...
03:42:46 <Heffalump> Q?
03:42:48 <Jii> jerub, just have to make sure that his name gets spelled correctly :)
03:42:49 <Chilli> Jerub: not?
03:43:01 <Jerub> Jii ;)
03:43:02 <Chilli> Queensland
03:43:08 <Heffalump> he's not in .au is he?
03:43:14 <Chilli> who
03:43:19 <Heffalump> that was what I thought first
03:43:21 <Heffalump> Jerub
03:43:27 <Chilli> I think, he is
03:43:38 <Chilli> not?
03:43:52 <Heffalump> well, hostname suggests US, unless uu.net are in .au too
03:43:54 <Jerub> Chilli: The closest we come to school/student liason is when there are problems. Plagurism, dodgy internet connections and access fees for labs.
03:44:00 <Jerub> uu.net is ozemail.com.au
03:44:03 <Heffalump> ah, ok
03:44:12 <dark> The person who inspired me most about correctness and readability in programming happened to have the same initials :)  He was also E. Dijkstra.
03:44:37 <ibid> dark: but not E. W.?
03:44:50 <Chilli> Jerub: access fees for labs????
03:44:57 <Jii> have you read EWDs manuscripts? i think they are great although his hand writing style isn't the best
03:45:19 <Jerub> Chilli: I kid you not. It was $35, $15 for ''admin charge'' and $20 for swipecards (Which were free the semester before).
03:45:25 <Jerub> $20 deposit that is.
03:45:54 <Jerub> The $15 charge was ruled against policy (and law), so that was recinded, now we only have a $20 deposit for a $.50 swipcard.
03:46:11 <dark> ibid: Right, it was someone else :)
03:46:16 <Jerub> Its blatant extortion.
03:46:20 <ibid> dark: oh
03:46:47 <dark> ibid: Still, it made me more aware of any mention of Edsger Dijkstra.
03:47:26 <dark> ibid: Particularly because I had to stop and think which one of them it was :)  (I was used to seeing course material signed "E. Dijkstra")
03:47:44 <dark> It's a fairly common name in the north of the Netherlands.
03:49:11 <ibid> not related?
03:49:31 <dark> Hmm, I never asked.
03:49:34 <Jerub> anyhow.
03:49:41 <Jerub> I should consider cooking dinner for my lovely wife.
03:49:56 <Jerub> Chilli: It seems. Odd. To talk to a lecturer in an irc channel.
03:50:08 <dark> Lecturers are supposed to be a different species? :)
03:50:26 <Jerub> I've just never done it before I guess.
03:50:27 * dark used to MUD with one of the professors.
03:50:29 <Heffalump> yeah, definitely not human
03:50:33 <ibid> one course here was held entirely in IRC
03:50:38 <dark> You don't really know someone until you've killed orcs with them.
03:50:44 <Jerub> ahha
03:50:57 <Jerub> actually, I'd killed orcs with a guy who ended up becoming my lecturer.
03:51:01 <dark> He was also in our role-playing group :)
03:51:22 <Jerub> But those are the young ph.d guys.
03:52:03 <dark> Drat, now I'm starting to miss my university days again.
03:52:18 <dark> Maybe I should write some emails :-)
03:52:33 <dark> You know, the "Hello, I'm still alive" kind.
03:52:37 <Chilli> Jerub: I guess I am just a bit weird ;-)
03:53:19 <Jerub> Chilli: I'm sure you're perfectly normal.
03:53:39 <dark> "perfectly normal" -- in a Haskell channel.  Right.
03:53:47 <Jerub> dark: I AM perfectly normal.
03:53:57 <Jerub> Hey, I'm 20 now!
03:54:04 * Jerub runs around the channel being a 20 year old.
03:54:07 <dark> Jerub: Perfect normalcy... don't you think that's a bit weird right there?
03:54:10 <Jerub> Gotta try and get used to it.
03:54:22 <dark> Jerub: It's your first day of being 20?  Congratulations :)
03:54:37 <Chilli> Jerub: to be honest, I have been hanging out on irc since I got my first unix account at uni (as a student); why should I stop it just because some other uni was stupid enough to make me a lecturer?
03:55:49 <Jerub> dark: Well, I started the 20 thing yesterday, but I'm still sorta warming up the new numbers. 
03:56:03 <ibid> that means that Chilli could not have gotten his first unix account very long ago (1989 or later or so...) :-)
03:56:36 <Jerub> Chilli: Fair enough. I started ircing when I got my first unix account when I was 12, and that was our only way of connecting to the internet (14.4 modem to solaris server, pre-slip)
03:57:30 <dark> Jerub: It often takes me more than a year to get used to a new age :)
03:57:33 * Heffalump feels positively youthful in IRC terms
03:58:12 <Jerub> Heffalump: *Grin*
03:59:02 <dark> I started here in 1998 to visit the Debian hamm release party :)  I'm just by nature not an early adopter.
03:59:47 <Heffalump> I started IRCing off and on when I first got on the net, but that was less than 7 years ago
03:59:49 <Jerub> I think I have hamm on cd here somewhere
03:59:51 <dark> I haven't partaken of other irc networks unless forced to.
04:01:08 <ibid> when i started netting, irc was out of the question. you cannot irc offline like you can read news
04:01:09 <Jerub> dark: I've got my uni's irc network, openprojjects and austnet.
04:01:14 * dark coined the "We don't want green egcs in hamm" slogan.
04:01:15 <Jerub> austnet because I know people irl who hang there.
04:01:43 <Jerub> ibid: When I started netting, doing anything offline was out of the question
04:02:09 <dark> Yeah I also started in university labs.  Getting a line to a student room was too difficult :)
04:02:19 * ibid wasn't in university then :-)
04:02:27 <dark> As far as I know the area still doesn't have cable now.
04:02:34 <Jerub> I started mudding in university labs, with my highschool friends who were children of lecturers.
04:02:40 <dark> ibid: How is that relevant? :)  The question is whether there's a university nearby.
04:03:01 <Jerub> I can't wait for 802.11b meshing to take off.
04:03:06 <ibid> dark: my nature is not going to new places
04:03:25 <ibid> dark: it took me months to dare enter Camelot after i became a uni student
04:03:43 * dark remembers downloading linux dists on piles of floppies, and then coming home to find a single bad sector in one of them.
04:03:46 <ibid> (Camelot is the local lab with unices and linuxen)
04:04:14 <Jerub> I got access to the 2nd year unix lab before I started CS!
04:04:53 <Jerub> but then I'm strange.
04:04:58 <dark> *scratch* I seem to have easy access to every network-related dream I had back then.  So why am I not happy with it?
04:05:46 <delYsid> hehe
04:05:52 * delYsid knows that feeling :)
04:05:55 <ibid> dark: there's always another unfulfilled dream
04:06:43 <delYsid> yeah, a box with Sun IO, Alpfa CPUs, SGI design and Intel pricing :)
04:07:49 <dark> Presumably you intended to say "cheap" rather than "Intel pricing" :)
04:08:24 <delYsid> well, compared to Alpha/SGI/Sun, Intel *is* cheap
04:08:52 <dark> Well the last Intel thing I tried to buy was an Itanium, maybe that skewed my perceptions :)
04:09:45 * delYsid reads http://www.villainsupply.com/ and breaks down laughing
04:12:10 <Chilli> Jerub: I just got an opinion here on the lab fees that you mentioed at UQ, which is that it is quite likely that UQ would get into trouble if the goverment (specifically, DETYA) would know about these fees.
04:12:52 <ibid> what's DETYA?
04:12:55 <Heffalump> who pays for uni tuition in .au? Is it entirely the government?
04:15:18 <Chilli> http://www.detya.gov.au/
04:15:50 <Chilli> Heffalump: long story: http://www.hecs.gov.au/
04:16:48 <Chilli> Heffalump: short summary, not entirely the goverment and they try to cut it back (as everywhere)
04:18:59 <Jerub> Chilli: Yeah, but the ruling handed down (to the department from the administration) was that the deposit was legit (deposits are already on keys and swipecards in other departments) but the fees weren't.
04:19:20 <Jerub> but still, we're talking about a $20 deposit on a $0.50 swipecard.
04:19:24 <Jerub> its nuts
04:22:00 <Chilli> Jerub: but didn't you say anything about sysad fees?  have they then been abolished?
04:22:00 <Chilli> (or did I misread?)
04:22:06 <dark> Jerub: Yeah, but if you lose it, someone who's paid $20 an hour will have to spend an hour remonstrating you about it.
04:22:53 <Jii> btw does anyone know who administrates the haskell wiki?
04:22:53 <Chilli> swipecards on UG labs are too much hassle anyway
04:22:57 <Chilli> we don't use them
04:22:57 <dark> shapr: It seems that cgoban was confused because my NNGS prompt wasn't the default.  I have no idea how it changed from the default; I didn't set it, and it was a new account.
04:23:09 <dark> shapr: Logging in with telnet and typing "set prompt" fixed it.
04:25:37 <Jerub> <Jerub> The $15 charge was ruled against policy (and law), so that was recinded, now we only have a $20 deposit for a $.50 swipcard.
04:25:50 <Jerub> Chilli: Good onya.
04:26:31 <Jerub> Chilli: Right now we're going through a massive anti-plagurism campaign
04:27:02 <Jerub> Its nuts. The policy is such that I can't have a discussion about my assignment with someone else to the level to which its useful.
04:27:04 <Chilli> what does that entail?
04:27:06 <Jerub> i.e. worth having.
04:27:37 <Jerub> Chilli: Failing students who hand in copied assignments and projjects.
04:28:04 <Chilli> Jerub: I have to admit, I am taking plagiarism quite seriously myself (in the context of individual assignemnts that contribute significantly to the final mark)
04:28:06 <delYsid> www.cs.ou.edu/cs1323h/textbook/twoDznQ.ps
04:28:14 <delYsid> (Check this out)
04:30:08 <Chilli> discussion is fine (actually encouraged)
04:30:22 <Chilli> copying code for marked assignments is not
04:30:44 <Chilli> it's important to make the difference between the two clear
04:31:31 <Chilli> the feedback that we get from students on this is usually rather positive
04:31:33 <Jii> delysid, yes that is kind of nice :)
04:32:23 <Chilli> nobody wants to spent weekends coding up assignments and getting a CR and then somebody else just copies the stuff and gets a DN
04:33:07 <pesco> What are CR and DN?
04:33:23 <Chilli> CR = credit; DN = distinction
04:34:03 <pesco> "Distinction"? What exactly is that?
04:34:10 <Chilli> in my intro course, 50% of the course mark is by way of assignments, as I don't believe that you can properly assess programming skills in a written exam
04:34:29 <pesco> Chilli: I like your course. Where is it held? :)
04:34:32 <Chilli> the grading here is: HD (High Distinction), DN, CR, PS, FL
04:34:52 <pesco> oic
04:35:00 <Chilli> pesco: University of New South Wales (Sydney): http://www.cse.unsw.edu.au/~cs1011/
04:35:10 <Chilli> (PS - pass)
04:35:23 <pesco> Yah, right. Might be a long busride down to australia...
04:35:31 <Chilli> pesco: :-)
04:35:34 <dark> My university took it to extremes, though.  At one point they were reading the email between students.  For all I know, they still do.
04:35:54 <pesco> dark: Just go into open revolt. It'l be fun!
04:35:56 <Chilli> dark: that's *bad*
04:36:00 <dark> pesco: Nah I just left :)
04:36:11 <pesco> Or that way :)
04:36:27 <delYsid> so twoDozQ.ps is worth reading?
04:36:40 <Chilli> dark: privacy laws in .au are not what they should be, but I tdon't think the uni could get away with just screening student email
04:37:15 <dark> By the way... an article I read used functional queues (add on one side, remove from the other), and mentioned the "usual implementation" using two lists.  Anyone know what that might have meant?
04:37:22 <Chilli> dark: what uni was that?
04:37:38 <dark> Chilli: Groningen, NL
04:38:06 <Chilli> dark: ic
04:38:07 <pesco> dark: You have a "front" and "aft" list.
04:38:09 <dark> Chilli: I don't think it was legal there either :)  They just did it... and never went so far as to put that in print.
04:38:47 <Chilli> dark: pretty fucked up student-staff relationship, I would say
04:38:51 <pesco> dark: push is cons to front and pop is "decons" from aft.
04:39:09 <dark> Chilli: Definitely.  This wasn't even the worst part :)  But I don't want to dreg up bad memories.
04:39:23 <dark> pesco: How do elements get from one list to the other?
04:39:27 <pesco> dark: When aft is empty, front is converted by reversing it and making it the new aft.
04:39:36 <dark> pesco: Ohh... I see.
04:39:57 <dark> pesco: Hmm so the cost depends on how long the queue can get?
04:40:25 <pesco> Yah, I think so.
04:41:39 <Chilli> dark: why?
04:42:40 <dark> Chilli: Why what?  Sorry, I lost the context while getting chocolate milk :)
04:43:09 <pesco> The cost of a push is usually O(1), as is pop.
04:43:14 <Chilli> dark: why do you think it depends on the length of the lists?  reverse can be done in O(n)
04:43:41 <Chilli> as you have the same number of pushes as the length of the list, it is amortised
04:44:00 <pesco> What does "amortised" mean?
04:44:13 <dark> Chilli: Ah, I hadn't thought of that.  I was thinking of just one pop :)
04:44:37 <dark> pesco: It's an insurance term.
04:44:55 <Chilli> pesco: amortised means, it is covered by other costs when you just consider a whole set of operations (instead of justa  single one)
04:45:05 <Chilli> amortised cost is what is really relevant in practice
04:45:17 <pesco> What do you mean "covered by"?
04:45:21 <Chilli> (as opposed to benchmarks)
04:45:25 <dark> WordNet says it means "liquidate gradually"
04:45:47 <Chilli> pesco: covered by = the other stuff has costs in the same order of magnitude
04:45:54 <pesco> Hm.
04:46:02 <pesco> Or more? 
04:46:03 <dark> pesco: Popping one item can be O(n).  But pushing and popping n items (in any order) would also be O(n).
04:46:12 <Chilli> dark: amortised cost is a technical term in complexity theory
04:46:14 <Heffalump> chilli: well, if you don't need real-time guarantees or similar
04:46:23 <Chilli> Heffalump: true
04:46:49 <Heffalump> and assuming amortised performance can be dangerous if you go back to earlier versions of your data structure
04:48:49 <pesco> So "amortized" here means that the one-time cost of converting front to aft assumes that n items have been pushed, which makes O(n) performance already, so the one hit by reverse doesn't make a difference?
04:48:51 <Chilli> Heffalump: well you have to do your calculations correctly
04:48:51 <Chilli> Heffalump: if you need persistance, you need to take that into account
04:49:08 <Chilli> pesco: exactly
04:49:19 <pesco> Woohoo! Thanks.
04:49:26 <Chilli> :-)
04:50:08 <dark> Now I'll go look for places where I can use such queues :-)
04:51:10 <Heffalump> bah, SML needs extensible records
04:51:54 <dark> SML?  That's not some kind of non-haskell language, is it?  *suspicious*
04:52:21 <pesco> dark: It's in the family, don't worry.
04:55:40 * Heffalump looks guilty
04:55:47 <dark> pesco: family members are the ones to watch out for, you know.
04:57:28 <pesco> dark: *aside* You're right, keep an eye on the boy.
04:57:40 <ibid> dark: it's the eager one
05:02:01 <pesco> Yippie!
05:02:10 * pesco pulls his head out of the HOpenGL webpage.
05:05:55 <Jerub> Chilli: in context of 'plagurism' - i take the stance that I find it impossible to *not* contravine the 'code of conduct' for a student. the fact that I don't/can't get caught is irrelivent. I'm as guilty for discussing my assignment as those who steal/copy the whole thing.
05:06:52 <Jerub> where I refer to the UQ/ITEE department code of conduct 
05:08:02 <Jerub> I'm going to bed
05:08:15 <Chilli> Jer: night
05:09:24 <Chilli> Jer: plagiarism: if it is as you say, the rules are bad (but it doesn;'t have to be like that)
05:09:24 <Chilli> too slow...
06:11:25 * shapr bounces
07:48:07 <dark> Anyone up for a game of Go?
07:50:55 <Jii> is there a similar system like free (or non-free) chess-server for go?
07:51:56 <dark> Jii: I know of two, IGS and NNGS.  They're designed to be accessed with telnet, but graphical clients have been written for them.
07:53:10 <dark> Jii: I use cgoban on Debian.
07:53:52 <Jii> okay
08:14:07 <hornby> dark: I'll play
08:15:01 <Jii> i need to learn it first ;-)
08:15:26 <hornby> learn as you play :)
08:15:38 <hornby> what better way to learn than to lose?
08:15:52 <Jii> to win all the time!
08:15:54 <Jii> ;-)
08:16:10 <Jii> well, i do not quite know the rules even
08:16:28 <hornby> hrm
08:16:44 <hornby> IGS and NNGS seem to be missing 'seek'
08:17:04 <hornby> which is too bad
08:17:09 <hornby> seek is great for anonymous quickies
08:17:40 <Jii> 'seek and destroy'
08:23:29 <shapr> boing
08:25:27 <hornby> hey shap 
08:25:58 <shapr> y0
08:26:00 <shapr> wassup?
08:27:24 <hornby> not me, I think I'm still asleep
08:27:38 <hornby> but this is a strange dream then, so i must be awake. damn
08:27:47 <shapr> you appear to be typing to me...
08:28:44 <shapr> ah cool...
08:28:49 <shapr> http://www.cs.ukc.ac.uk/research/groups/tcs/fp/Refactor/surveys/haskell-editors-July-2002-summary.txt
08:28:58 <shapr> the summary of the haskell editing survey
08:29:00 <shapr> excellent
08:30:12 <hornby> hm
08:31:30 <Jii> coolness
08:34:57 <shapr> wow, these responses are enlightening
08:36:12 <shapr> anyone knows who runs HaskellWiki?
08:39:12 <shapr> hmmm
08:39:47 <shapr> looks like it's time to write up detailed docs about haskell-mode in emacs, and draft someone to do the same for vi
08:40:48 <pesco> I'm fighting emacs right now, trying to force it to forget about haskell-doc-mode.
08:40:57 <hornby> haskell wiki seems broken
08:41:28 <shapr> pesco: may I assist you?
08:41:40 <pesco> shapr: Well, surely.
08:41:40 <shapr> pesco: what flavor and version of emacs/haskell-mode etc?
08:41:55 * shapr is an emacs addict
08:41:56 <pesco> Xemacs 21.4
08:42:00 <shapr> I'm using ERC 2.93 $Revision: 1.294 $ with XEmacs 21.4 (patch 8) "Honest Recruiter" XEmacs Lucid!
08:42:03 <shapr> hey, me too
08:42:19 <pesco> Honest Recruiter sounds familiar... :)
08:42:25 <shapr> what version of haskell-mode?
08:42:30 <pesco> lemme check
08:42:38 <shapr> C-h v haskell-version
08:42:41 <shapr> will show you
08:42:52 <pesco> 1.43
08:43:16 <hornby> I feel like playing with emacs
08:43:16 <shapr> oh
08:43:47 <shapr> hornby: it's the best editor I know,
08:44:00 <hornby> shapr: I dunno
08:44:01 <shapr> still has many warts though.
08:44:04 <pesco> The problem is this: When entering haskell-doc-mode (which it does by default on new Haskell buffers) I get the following error message:
08:44:05 <hornby> many many warts
08:44:12 <pesco> (error/warning) Error in `post-command-hook' (setting hook to nil): (void-variable imenu--index-alist)
08:44:41 <shapr> hm
08:44:46 <pesco> So I figured I'd go the easy way by removing the turn-on-haskell-doc-mode entry from haskell-mode-hook.
08:45:13 <shapr> sound good to me
08:45:19 <pesco> But (remove-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode) in init.el appearently hasn't had the desired effect.
08:45:29 <hornby> shapr: do I want emacs or xemacs?
08:45:39 <shapr> hornby: imho, xemacs is easier to learn with
08:45:46 <hornby> shapr: what do you use? 
08:45:48 <shapr> xemacs
08:46:17 <shapr> delYsid and most other #emacs regulars will disagree with me, they prefer gnu emacs.
08:47:23 <ChoJin> xemacs powah :)
08:47:39 <hornby> I wonder if there are any up to date comparisons
08:47:52 <shapr> hornby: sure, look at Emacsology stuff on emacswiki.org
08:47:56 <pesco> GAH!
08:48:02 <ChoJin> emacs vs xemacs is an old troll :)
08:48:16 <pesco> I hate emacs. Emacs is a giant gaping asshole!
08:48:17 <dark> (sorry for disappearing... there was such a long silence after I asked that I went and had breakfast :)
08:48:24 <dark> ChoJin: Not compared to emacs vs vi :)
08:48:28 <ChoJin> :)
08:48:47 * pesco tries to calm down
08:48:52 <hornby> shapr: cool
08:48:53 <pesco> Where does this come from?
08:48:54 <ChoJin> I use xemacs because I work with one of the coder, thus when something is missing/going bad, he add/correct for me :)
08:49:03 <shapr> ChoJin: who?
08:49:04 <ChoJin> xemacs hotline at work :) usefull :)
08:49:07 <dark> "Followers of the Church of Emacs should remember that having to use vi is sufficient punishment even for vi users, and there is no need to make life even more miserable for them."
08:49:11 <ChoJin> shapr: Didier Verna
08:49:29 <dark> (from memory)
08:49:41 * Heffalump hates vile, so there.
08:49:43 <pesco> I do the (remove 'haskell-mode-hook 'turn-on-haskell-doc-mode) in init.el.
08:49:56 <dark> Heffalump: That's sort of implicit in the name, isn't it?
08:50:02 <pesco> I then load a Haskell script.
08:50:17 <Heffalump> vile is what I call vi, not the editor that's actually called vi
08:50:21 <Heffalump> le
08:50:56 <pesco> Looking at haskell-mode-hook again, there it is: turn-on-haskell-doc-mode. Right in front of my old haskell-mode-hook.
08:51:01 <shapr> pesco: I should know the answer to that problem, but it's not coming to mind... I'll think about it.
08:51:08 <hornby> vim is just so good though
08:51:08 <pesco> Where did it come from??!!
08:51:18 <shapr> pesco: you're only changing the hook local to the buffer you're in.
08:51:22 <shapr> you need to change it globally.
08:51:53 <pesco> shapr: Can't be, I also add something to the hook after the remove (setq indent-tabs-mode nil).
08:51:56 <pesco> That's still there.
08:51:57 <shapr> pesco: are you loading imenu in your startup files?
08:52:14 <pesco> What is imenu? I have no clue about that, so I guess I'm not.
08:52:35 <shapr> imenu builds a custom mode-specific index for a buffer
08:52:37 <shapr> or any buffer
08:53:03 <shapr> pesco: try loading imenu with M-x load-library imenu
08:53:13 <pesco> grmgrmgrm... ok
08:53:21 <shapr> and then open another haskell buffer and see if it's still broken.
08:53:25 <shapr> what linux distro are you using?
08:53:29 <pesco> Gentoo.
08:53:37 <shapr> oh, I don't know anything about it.
08:53:45 <ChoJin> gentoo :)
08:54:14 <ChoJin> haskell, gentoo ... seems you are one of the most crazy man in the world :)
08:54:15 <pesco> Yah well, there, now it works. But I'd still like to know how it got that turn-on-haskell-doc-mode back into the hook!
08:54:45 <pesco> ChJin: Oh if you say so, it must be right!
08:55:01 <shapr> pesco: because you only changed it in one buffer :-)
08:55:17 <pesco> shapr: No, can't be.
08:55:31 <pesco> shapr: Let me paste the two relevant lines from my init.el:
08:55:34 <shapr> ok..
08:55:44 <pesco> (remove-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
08:55:44 <pesco> (add-hook 'haskell-mode-hook (lambda () (setq indent-tabs-mode nil)))
08:56:09 <shapr> oh, I see
08:56:10 <ChoJin> M-x customize-variable
08:56:11 <ChoJin> :)
08:56:44 <pesco> After startup, haskell-mode-hook evaluates to:
08:56:51 <pesco> ((lambda nil (setq indent-tabs-mode nil)) turn-on-haskell-indent turn-on-haskell-decl-scan turn-on-haskell-font-lock)
08:57:26 <pesco> After loading TLU.lhs:
08:57:31 <pesco> (turn-on-haskell-doc-mode (lambda nil (setq indent-tabs-mode nil)) turn-on-haskell-indent turn-on-haskell-decl-scan turn-on-haskell-font-lock)
08:57:35 <pesco> This is outrageous!
08:57:53 <shapr> pesco: try switching to a separate buffer and checking haskell-mode-hook
08:58:18 <pesco> The same.
08:58:38 <shapr> same as the old correct value?
08:58:46 <pesco> No, the incorrect value.
08:59:05 <dark> Obviously you should be using an editor that does what you tell it to :)
08:59:16 <shapr> I suspect that will also be true after startup, and before you open a haskell file.
08:59:33 <pesco> Appearently emacs is suffering a heavy infection of indirectitis.
08:59:34 <shapr> if you switch to another buffer, I think haskell-mode-hook will be the incorrect value.
08:59:53 <dark> pesco: As in, "You can always add another layer of indirection"?
09:00:16 <pesco> I just did M-x eval haskell-mode-hook in the init.el buffer.
09:00:44 <pesco> dark: Yes, or cynically put, "You can always expect another layer of indirection to undermine your authority."
09:00:50 <hornby> 60 mb for a text editor isn't too bad, I suppose
09:01:25 <dark> hornby: What... you mean it edits text too??  Wow!
09:03:28 <hornby> i just don't see why I would want a web browser, news reader, and tetris inside what I use to code
09:03:54 <pesco> Well don't load the web browsing, newsreading, tetris playing stuff then.
09:04:05 <pesco> It's not like it loads all that at start-up or something.
09:04:24 <hornby> pesco: fair enough, but it still sits there, cluttering up my harddrive
09:04:55 <pesco> It's just that the thing is so darn programmable that you _can_ have all that crap. I don't think they would have made all that if it would have required stuff they didn't want for something important anyway.
09:05:48 <pesco> hornby: OK, I'm willing to pay the HD space, because I am used to emacs for coding.
09:06:08 * dark probably has more megabytes of changelog.Debian.gz than of emacs.
09:08:01 <pesco> But imenu is cool, thanks alot shapr!
09:09:13 <hornby> shapr: how do you make ion and xemacs get along?
09:10:47 <pesco> What's ion now?
09:12:51 <hornby> pesco: a window manager
09:13:00 * hornby shoots xemacs
09:13:07 <hornby> it could work at least, sheesh
09:13:31 <pesco> Ow, a window manager I don't know? Is it any good? Appearently it doesn't work well with emacs. What does it have to do with a text-editor??
09:13:58 <hornby> pesco: try it, its cool
09:14:13 <pesco> URL? What's cool about it?
09:14:24 <hornby> everything
09:14:31 <pesco> Yah well.
09:14:50 <hornby> http://www.students.tut.fi/~tuomov/ion/
09:14:54 <hornby> don't mind the screenshots, they suck
09:14:59 <pesco> Hrm.
09:16:10 <dark> So... anyone up for a game of Go now? :)
09:17:49 <hornby> sure
09:18:56 * hornby pokes dark viciously
09:19:03 <dark> Yeah I'm here :)
09:19:12 <hornby> on IGS?
09:19:33 <dark> Okay, I'm there :)
09:19:53 <hornby> er
09:21:11 <pesco> OK, let's see how well this ion thing really works...
09:21:46 <hornby> pesco: read the instructions first
09:21:57 <pesco> man ion?
09:22:18 <hornby> that'll do
09:23:10 <Heffalump> is that anything like a min-ion?
09:23:44 <hornby> Heffalump: ...... ?
09:23:47 <hornby> a minion?
09:23:53 <Heffalump> "man ion"
09:23:54 <pesco> Yah, no wonder emacs doesn't work if the WM reserves all kinds of Meta-keys.
09:23:58 <hornby> oh dear
09:24:02 * Heffalump ducks
09:24:09 <pesco> No way I'm using that.
09:24:10 <hornby> pesco: you can change the bindings
09:24:15 <pesco> Hrm...
09:26:47 <hornby> pesco:  neat eh? 
09:27:02 <pesco> I'm starting it now...
09:28:48 * hornby thinks go is too subtle for his chess playing ind
09:28:48 <hornby> mind
09:29:06 <pesco> Heh, especially the Gnome panels come out real nice :)
09:29:35 <pesco> And actually, I must take back my rant about the Meta-key. Of course, that's not Mod1 at all! (If you actually have a Meta key).
09:30:45 <hornby> pesco: its got a few quirks
09:30:49 <hornby> but i like them
09:30:49 <pesco> Woah, that's one giant Moaning Goat Meter!
09:30:53 <hornby> just don't try running gimp in it
09:31:07 <pesco> Hrm, then how am I supposed to use Gimp?
09:31:24 <hornby> I suggest setting up another desktop 
09:31:37 <hornby> and splitting up the screen 
09:32:03 <pesco> Hm, can't I have a virtual desktop of two screens in size?
09:32:18 <hornby> hm
09:32:23 <hornby> yes
09:32:28 <hornby> you can have multiple desktops
09:32:29 <pesco> How how?
09:32:38 * pesco bounces up and down.
09:32:54 <pesco> If that is true, this could become my all-time favourite window manager.
09:33:41 <hornby> peso f9
09:33:45 <hornby> create workspacce
09:33:54 <hornby> alt-1, alt-2 etc to switch between them
09:34:04 <hornby> alt-1 say is my main, with 6 panels
09:34:10 <hornby> alt-2 is one big panel for a web browser
09:35:13 <pesco> OK, can I put one workspace under the control of a different WM?
09:35:58 <hornby> pesco: I wish
09:36:04 <hornby> pesco: that would make it perfect
09:36:25 <hornby> pesco: or even if you could have workspaces react conventionally ... 
09:38:01 <pesco> Maybe one could have a setup with two distinct X servers?
09:38:50 <hornby> pesco: that seems ..
09:39:13 <hornby> trickty
09:39:17 <hornby> ovekrill
09:39:27 <pesco> Yes. overkill.
09:40:54 <hornby> someone will the proper skills could probably merge ion and something like blackbox
09:42:10 <pesco> Wouldn't it be possible to implement a kind of window-manager fork?
09:42:21 <hornby> be harder
09:42:32 <hornby> I've never seen anything like that ... but it might work
09:42:47 <hornby> it would be cool too, because then you could run as many wms are you wanted ...
09:43:39 <pesco> Yup.
09:45:53 <Jii> now it is in the LWN, the news that dijkstra died
09:46:11 <pesco> He died? How old was he?
09:48:18 <Heffalump> 70, I think
09:55:05 <hornby> dark whooped my go playing ass
09:55:26 <dark> Found some bugs in cgoban in the process :)
09:57:36 <dark> We accidentally played without handicap, though :)
10:56:03 <shapr> boing
10:56:57 <shapr> hornby: you still here?
10:57:30 <shapr> looks like t-dialin.net is having trouble today.
10:58:24 <shapr> hornby: I've edited my ~/.ion/bindings-default.conf for ion, I've moved all the ion keys under M-i
10:59:12 <pesco> Hrm, ion decided to start segfaulting, so it's gone now.
11:00:26 <shapr> oh
11:00:28 <shapr> I like ion
11:00:42 <shapr> of course, I use the debian package, and I know the package maintainer.
11:01:09 <shapr> actually, I think the package maintainer might know the author
11:01:55 <pesco> shapr: Does it do session management for you?
11:02:12 <shapr> um, no.
11:02:17 <pesco> :(
11:02:20 <hornby> shapr: ?
11:02:30 <shapr> what kind of session management do you want?
11:02:50 <hornby> shapr: tell the package maintainer to tell the author to do what pesco suggested
11:02:55 <pesco> Logout-Login-all-windows-back-where-they-were-before kind of session management
11:02:59 <shapr> emacs does session management, and I also run xmms and galeon, which both do their own session management also.
11:03:06 <hornby> pesco: yeah, it'll do that
11:03:09 <shapr> um, ion doesn't have window positioning.
11:03:12 <hornby> pesco: well, the frames will be in the same place
11:03:14 <shapr> so, yes :-)
11:03:15 * shapr grins
11:03:29 <pesco> hornby: Ok...
11:03:40 <shapr> hornby: huh?
11:03:46 <pesco> hornby: And it'll start all the clients up again, too?
11:03:48 <shapr> wait, what do you want to do with ion?
11:03:56 <hornby> pesco: it won't start the clients up, no ... 
11:04:01 <hornby> someone should add that option
11:04:02 <shapr> I have a shell script.
11:04:06 <pesco> Hm.
11:04:12 <shapr> batch file to the rescue!
11:04:27 <shapr> hornby: I can send you my ion key bindings if you like.
11:04:44 <pesco> shapr: How do you control which client goes into which window from within the script?
11:04:52 <shapr> good question
11:04:53 <shapr> I don't know
11:05:03 <shapr> I have a separate frame for emacs speedbar
11:05:09 <shapr> and that's about as fancy as I get
11:05:28 <shapr> but, I've also gotten a copy of the maintainer's keybindings...
11:05:33 <hornby> shapr: sure
11:05:33 <pesco> Hrm.
11:05:48 <hornby> i like my key bindings tohugh :(
11:05:57 <pesco> There is a module for session management, but well, the thing still segfaults on me.
11:06:09 <pesco> Programs that segfault smell bad.
11:06:19 <hornby> I use ALT ... does emacs use that? 
11:06:27 <shapr> yes
11:06:30 <shapr> well, sort of
11:06:41 <shapr> last I checked, gnome assumes Mod1 is Meta
11:06:51 <shapr> so do many other ill behaved X apss
11:07:03 <shapr> "X windows applications"
11:07:26 <shapr> hornby: if you have a windows key, that's probably set to Mod1 and Meta
11:07:51 <hornby> shapr: cool
11:08:00 <hornby> and emacs uses ctrl and meta right?
11:08:04 <shapr> yup
11:08:08 <hornby> so I should be okay
11:08:13 <shapr> and hyper and super in my case :-)
11:09:15 <shapr> the xkeycaps man page is a fountain of information about X window keybindings.
11:09:36 <hornby> hyper and super?
11:09:45 <hornby> ugh
11:09:52 <hornby> xemacs scrolls like half a page at a time
11:10:01 <shapr> you can change that
11:10:03 <shapr> with scroll-step
11:10:11 <hornby> permanently?
11:10:15 <shapr> yup
11:10:19 <pesco> In init.el :)
11:10:47 <hornby> I get errors just pressing buttons on the toolbar....
11:11:15 <shapr> hm, I haven't used the toolbar in... years.
11:11:28 <shapr> actually, I haven't even seen the toolbar in years.
11:11:36 <hornby> sounds like my vim
11:11:46 <pesco> Oh, heh, _that_ toolbar. I haven't seen that around either... :)
11:22:02 <shapr> the UTF8 thread on the haskell mailing list is quite nifty.
11:22:50 <shapr> since I've been bitten by the ascii/unicode duality in string literals, I agree with Ken Shan
11:24:16 <shapr> Since the majority of programmers probably neither know nor care about ISO-8859-1/UTF8/
11:24:16 <shapr> koi8/whatever I think you will find that if you don't do this, most of them will
11:24:16 <shapr> engineer their quick and dirty alternatives anyway.
11:24:25 <shapr> see, those last three lines look like total bullshit to me.
11:24:44 <shapr> I deal with 8859-*/utf*/koi8/etc regularly.
11:25:22 <shapr> anyone here who has never had to think about using iso-8859-1 instead of ASCII?
11:28:19 <dark> shapr: In what way, never had to think?
11:28:50 <dark> shapr: It annoys me that Haskell has a properly defined [Char], but no interface for specifying the charset of a file when reading it.  So of course ghc assumes latin-1.
11:29:04 <shapr> dark: would you say you "neither know nor care about ISO-8859-1/UTF8/" ?
11:29:15 <shapr> I know some, and care more.
11:29:25 <shapr> dark: are you subscribed to the haskell mailing list?
11:29:43 <shapr> there's a discussion about having [Char] and [CodePoint] options
11:30:00 <shapr> or [Char] becoming [CodePoint] and [CChar] being C character
11:31:58 <shapr> I'd vote for better or standard unicode support in any case
11:31:58 <Jii> i need to start make those python-dev summaries
11:32:09 <Jii> (oh, wrong channel)
11:32:24 <shapr> dark: good point about the charset stuff
11:32:27 <pesco> shapr: Why don't they let Char be a character, just that.
11:32:36 <pesco> Unicode of course.
11:32:42 <shapr> right
11:32:44 <pesco> Cuz we don't want to leave anyone out.
11:32:59 <shapr> but then someone said that would make interchange with C difficult
11:33:10 <shapr> or "how do you send ascii over a socket then?"
11:33:10 <pesco> Yah well, that's C's problem then.
11:33:13 <shapr> heh
11:33:24 <shapr> but we do want Haskell to be able to exchange data with other programs.
11:33:28 <shapr> right?
11:33:39 <pesco> Of course.
11:33:54 <shapr> I do prefer unicode.
11:34:00 <pesco> We're functional programmers, we just write a conversion function if the other end doesn't know what we're talking about.
11:34:06 <shapr> :-)
11:34:22 <shapr> I'd like for that to be in the standard library.
11:34:44 <pesco> Hasn't unicode addressed all this interoperability stuff?
11:34:52 <dark> shapr: I'm not subscribed to any haskell mailing list:)  But I know and care about character sets.
11:34:57 <dark> shapr: frustratingly so :)
11:35:15 <pesco> After all, isn't the lower bit of unicode equivalent to ASCII?
11:35:26 <dark> Well according to Haskell98, Char _is_ a unicode character.
11:35:46 <pesco> That's my understanding, too. Therefore I'm a bit puzzled by the strange discussion on the mailing list.
11:35:49 <dark> I don't see a point for [CChar] if we have [Word8] and [Int8]
11:36:07 <dark> pesco: It's because GHC IO functions return a list of bytes as a [Char] :)
11:36:15 <pesco> My understanding has also been, that char is _always_ 8 bit in standard C.
11:36:20 <dark> At least that's what I think would be the reason for a strange discussion.
11:36:25 <dark> pesco: No, there's a CHAR_BITS define.
11:36:33 <dark> It has to be at least 8, though.
11:36:40 <pesco> dark: God! Fix the GHC functions!
11:36:47 <shapr> ok, here's a question for you, what is the result of this: ['\x82','e'] == "\x82e"
11:37:32 <dark> shapr: From the top of my head, or can I consult the Report? :)
11:37:45 <pesco> I don't know how unicode escapes work.
11:37:50 <shapr> dark: have you tried it in ghc? :-)
11:37:54 <dark> shapr: Nope
11:38:00 <shapr> can you guess? :)
11:38:11 <dark> pesco: The usual way I've seen (inspired by Java, perhaps) is \u0000
11:38:20 <pesco> I remember that.
11:38:26 <dark> shapr: It's probably True in ghc :)
11:38:31 <shapr> it's false.
11:38:36 <pesco> So is 
11:38:43 <pesco> \x82 UTF-8 or something?
11:39:15 <shapr> compare and contrast: ['\x82','e'] == "\x82e"  and ['\x82','s'] == "\x82s"
11:39:19 <dark> So ghc does follow the Report in this?  Why did you ask, then? :)
11:39:23 <shapr> the first one is false, the second one is true.
11:39:31 <shapr> yah, it does follow the report.
11:39:43 <dark> pesco: No, \x just means a hex escape.
11:39:50 <pesco> dark: Ok.
11:40:04 <dark> The "max munch" means \82e is a 3-digit hex escape, and \82s is a 2-digit hex escape followed by an s :)
11:40:10 <pesco> Yup.
11:40:18 <shapr> that's right.
11:40:20 <dark> In C, \x82e would still be \82 e, I think.
11:40:39 <shapr> the correct representation is "\x82\&e"
11:41:07 <pesco> \& means "end this escape"?
11:41:10 <dark> Cool I didn't know about \& :)
11:41:18 <shapr> pesco: sort of...
11:41:33 <dark> Apparently it just means "nothing", sort of like {} in TeX
11:41:35 <shapr> \& is a null, it doesn't do anything except stop munching
11:42:14 <shapr> since I had copy'n'pasted some string literals from python into my haskell source for unit testing...
11:42:20 <dark> I don't think Haskell explicitly uses UTF-8 anywhere.  The operating system might use it, though, in which case I guess the IO functions should convert UTF-8 to Unicode.
11:42:27 <shapr> that problem took me a very long time to find.
11:44:50 <dark> Oh, there's already a CChar in the foreign function interface.  That makes sense.  CChar would be the _local_ C char, which might be 8 bits or more, and might or might not be signed.
11:45:15 <dark> Word8 and Int8 are much more definite :)  But they might not be proper for interfacing with C libraries.
11:45:39 <shapr> see, that's the discussion on the list
11:45:51 <shapr> you might enjoy reading the list.
11:45:52 <shapr> it's fun.
11:46:01 <dark> I don't understand why anyone would want CodePoint, though.  Except perhaps as type CodePoint = Char :-)
11:46:01 <shapr> well, there is one guy who makes me wonder...
11:46:26 <dark> shapr: Hmm.  I'm sort of resistant to the idea of yet another mailing list :)  What's its volume?  Is there an online archive I can check out first?
11:47:05 <shapr> er, I think so.
11:47:53 <shapr> doesn't have the stuff from today in the archive though
11:48:05 <shapr> http://www.mail-archive.com/haskell@haskell.org/
11:50:25 <dark> Ooh, I've been wrong.
11:50:30 <shapr> ??
11:50:36 <dark> Haskell98 says Char is 16 bits, and it's GHC that extended it to 20 bits.
11:51:01 <dark> So the Report sucks as badly as Java does, but fortunately it's easier to fix than with Java :-)
11:57:06 <Jii> shapr, you don't dig the pipermail-interface?
11:57:51 <shapr> I know I like mailman...
11:57:59 <shapr> is piper what mail-archive is using?
11:58:14 <Jii> wait
11:58:40 <Jii> no, look at http://haskell.org/pipermail/haskell-cafe/2002-July/thread.html for example
11:59:08 <shapr> oh, that doesn't bother me particularly.
12:38:09 <shapr> boing
12:45:34 * dark points shapr at the "no bouncing on the channel" sign.
12:49:07 <shapr> uh oh
12:52:42 <shapr> hmm
12:52:53 <shapr> I have the urge to write an elisp interpreter in haskell.
12:53:05 <delYsid`> masorchism?
12:53:16 <shapr> or something similary
12:53:32 <shapr> actually...
12:53:35 <shapr> it might be possible.
12:53:40 <shapr> scary, but possible.
12:53:47 <delYsid`> shapr: If it's about parsec, what about impl. Joy? :)
12:54:01 <shapr> ohhhh
12:54:05 <shapr> nifty idea!!!!
12:54:45 <delYsid`> well, I've found a second source (textbook) which contains functional TicTacToe with minimax algorithm...
12:54:52 <shapr> I was thinking more of hacking HScheme into an elisp interpreter, and hacking Michael Sperber's elisp -> Scheme code to elisp -> Haskell
12:54:57 <shapr> oh oh, where where?
12:55:26 <delYsid`> I dont have the url, only the file now...
12:55:34 <shapr> ok
12:55:47 <delYsid`> I pasted it with 'delYsid' some 6h ago or so... (logs)
12:56:26 <delYsid`> Actually, that's another book which can be used to learn haskell.  I never saw any reference to it till today...
12:56:58 <shapr> which book?
12:57:10 <shapr> nm, I'll read logs.
12:58:09 <delYsid`> "Two Dozen Short Lessons in Haskell
12:58:09 <delYsid`> a participatory textbook on functional programming
12:58:09 <delYsid`> by
12:58:09 <delYsid`> Rex Page
12:58:09 <delYsid`> School of Computer Science
12:58:11 <delYsid`> University of Oklahoma"
12:58:57 <shapr> never heard of it.
12:59:00 * shapr googles
12:59:32 <shapr> wow, fully available.
12:59:43 <delYsid`> exactly.
12:59:50 <delYsid`> methinks that should be linked on haskell.org
12:59:53 <shapr> truly
13:13:48 <shapr> hmm, a Joy implementation in Haskell that used Brent Kerby's basic combinators could do intrinsic function comparison.
13:14:01 <shapr> hmmmmm!
13:16:31 <shapr> I wish dennisb were here.
13:18:56 * shapr thinks about a stack monad
13:23:38 <shapr> delYsid: you've memed me.
13:25:06 <delYsid`> ahh, yeah. With a Stack state, it could eval during parsing
13:25:46 <shapr> not sure how to write a stack monad though.
13:26:26 <delYsid`> CharParser [Int] Int
13:26:44 <delYsid`> Shouldn't that be enough?
13:27:36 <shapr> uhh
13:27:37 <shapr> I don't know.
13:27:41 <delYsid`> er, no. Joy isn't only for integers.
13:29:12 <shapr> I thought the integers might be keys to a combinator lookup table ...
13:31:37 <shapr> delYsid: you gotta read this: http://tunes.org/~iepos/joy.html
13:31:43 <shapr> it's *very* cool.
13:32:18 <shapr> I wonder if I can port the Brute force Automated Construction Finder from Joy to Haskell.
13:32:51 <shapr> not quite up to dark's "never been done before" standards, but it could be very illuminating.
13:37:41 <dark> Well presumably uncompilers have been done before.  Just not as excellently as I'm going to do it :-)
13:39:11 <dark> shapr: stack monad?  Wouldn't you just use a list?
13:39:23 <shapr> um
13:39:29 <shapr> yes =)
13:39:30 * shapr blushes
13:44:16 <dark> You could monadize it of course :)  So you can use "do".  
13:44:23 <dark> return (x : xs) = x
13:45:54 <dark> Hmm, but what would the element type be?
13:47:22 <shapr> StackItem I guess.
13:47:25 * shapr thinks
13:47:58 <shapr> joy has about as much syntax as lisp does.
13:48:09 <shapr> and yet, it feels more elegant to me.
13:50:02 <hornby> joy?
13:51:10 <dark> Each stack element is a stack -> stack function, right?
13:52:19 <shapr> right
13:52:44 <shapr> hornby: http://www.latrobe.edu.au/philosophy/phimvt/joy.html
13:59:44 <dark> shapr: I can't figure out correct typing :)
14:00:29 --- topic: 'We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || HOpenGL 1.03 released - http://haskell.org/HOpenGL || looking for team members for a #haskell ICFP contest entry, more info when the HaskellWiki returns.'
14:00:29 --- topic: set by shapr on [Fri Aug 02 14:15:19 2002]
14:00:42 <dark> So maybe something other than List is needed.
14:01:02 <shapr> hmm
14:09:06 <dark> You know... this language doesn't actually use a stack :)
14:09:15 <dark> It uses rewrite rules, which can apply anywhere in the list.
14:09:29 <shapr> um
14:09:30 <shapr> hmm
14:09:33 <shapr> interesting way of looking at it.
14:09:53 <dark> Now it's starting to sound familiar... I think there was a FAQ entry about this sort of problem.
14:10:00 <shapr> really?
14:13:47 <dark> Bah, I can't remember where I saw it.
14:14:01 <shapr> can you remember any keywords about it?
14:17:08 <dark> No... I just remember this image of a list with rewrite rules, that was converted to a stack by applying the rewrite rules only on one side.
14:17:16 <dark> There was a note about types.
14:22:02 <dark> Well, time to eat :)
14:24:11 <smkl> just have: (f >>> g) x = g (f x), put x lst = (x,lst), dup (x,tl) = (x,(x,tl)), swap (x,(y,tl)) = (y,(x,tl)), lifts2 f (x,(y,tl)) = (f x y,tl)
14:24:23 <smkl> then you can have: (put 3 >>> put 4 >>> put 5 >>> lifts2 (+) >>> lifts2 (*)) ()
14:34:26 <shapr> that looks like it.
14:42:38 <dark> smkl: But then you don't have combinators on your stack?
14:45:43 <smkl> true
14:47:17 <smkl> but you can have: eval (f,(x,tl)) = f (x,tl) and use put (lifts2 (+)) etc.
14:52:31 <dark> So, yeah, the trick seems to be to explicitly encode how many arguments a combinator takes, and have an upper limit on that.
14:53:49 <shapr> hm
15:00:33 <shapr> who was doing SDF2 grammar stuff in Haskell here?
15:13:27 <shapr> hornby: hey
15:13:36 <shapr> I have another good reason for using xemacs
15:13:49 <shapr> hi dandelion-
15:13:58 <dandelion-> hello shapr
15:14:02 <shapr> what's up?
15:14:19 <ChoJin> shapr: is it you who is asking to speedblue about stratego,meta ... tools ? :)
15:14:29 <shapr> yes
15:14:34 <shapr> how did you know? :-)
15:14:36 * shapr grins
15:14:39 <ChoJin> I know speedblue :)
15:14:43 <shapr> ohh, excellent
15:14:46 <ChoJin> I asked to him to package these stuff :)
15:14:56 <shapr> awesome!
15:15:11 <shapr> I can barely wait till all of the metaenvironment arrives in debian/unstable
15:15:13 <ChoJin> he is a friend, and we are working with this in the laboratory where I am working in, so I asked to him :)
15:16:44 <ChoJin> shapr: I wrote a tut on stratego, xt etc ... if you want :)
15:16:49 <shapr> yes please!!
15:17:03 <ChoJin> http://www.lrde.epita.fr:800/~chojin/calc_tut.pdf
15:17:15 <ChoJin> you can find the link to the tar.gz at http://www.lrde.epita.fr:800/cgi-bin/twiki/view/Projects/TransformersTools
15:17:26 <ChoJin> (add :800 to the url, because we have some LS problem)
15:17:31 <shapr> LS?
15:17:41 <ChoJin> net :)
15:18:08 <ChoJin> btw you can often find speedblue and me on #happycoders :)
15:18:29 <ChoJin> btw you speak french iirc ?
15:18:39 <shapr> un peu
16:19:46 <shapr> this rocks.
16:22:53 <dandelion-> when is the next version of the haskell language definition to be expected?
16:23:03 <shapr> hi chilli
16:24:35 <Chilli> Hi shapr
16:25:00 <shapr> hey chilli, have you see the MetaEnvironment from cwi.nl ?
16:25:26 <shapr> it's a generic refactoring framework among other things.
16:25:29 <shapr> quite spiffy.
16:25:30 <Chilli> dandelion-: not anytime soon
16:25:48 <Chilli> shapr: for Haskell?
16:25:56 <shapr> generic
16:26:07 <shapr> it uses stratego language, ATerm ast lib
16:26:20 <shapr> cwi.nl's ToolBus to coordinate everything.
16:26:28 <Chilli> ok, I know some of the stratego stuff
16:26:32 <shapr> integration with xemacs, gvim, java, tcl/tk
16:26:57 <shapr> I wonder if the functional refactoring guys know about this.
16:27:11 * shapr sends an email to Claus
16:27:36 <Chilli> hmm, wonder what the ukc.ac.uk guys'll say about that
16:27:50 <shapr> that's what I meant :-)
16:27:56 <shapr> I'm sending an email to Claus Reinke right now.
16:28:10 <Chilli> yeah - I just didn't see you msg until I sent mine... :-)
16:28:43 <Chilli> seems to be a popular topic, then
16:28:45 <shapr> since MetaEnvironment is using SDF to build ASTs, it should make their lives *much* easier.
16:29:05 <shapr> I wonder if ME already integrates the HSX library....
16:32:54 <shapr> ME is coming to debian/unstable soon.
16:32:59 <shapr> yay
16:37:14 <shapr> extra yay: http://www.cwi.nl/htbin/sen1/twiki/bin/view/SEN1/HaskellATermLibrary
16:59:14 <Jerub> heya pesco.
16:59:42 <pesco> re Jerub
17:00:36 <shapr> Jerub: hey...
17:00:39 <shapr> Jerub:  I found it.
17:00:53 <shapr> Jerub: http://www.cwi.nl/htbin/sen1/twiki/bin/view/SEN1/MetaEnvironment
17:01:34 <pesco> shapr!
17:01:41 <shapr> pesco!
17:02:22 <Jerub> shapr: awesome
17:02:49 <shapr> Jerub: and, it'll be in debian/unstable soon
17:03:25 * Jerub grins.
17:03:42 <Jerub> I suppose modal/vi style editing isn't integrated... yet.
17:04:02 <shapr> actually, it's integrated with xemacs mostly, and beginning to integrate with gvim
17:04:30 <Jerub> *blink* I just read that.
17:04:34 * Jerub does a little dance
17:04:44 <shapr> yah, I danced too :-)
17:05:28 <Jerub> you a vi user?
17:05:48 <shapr> I'm using ERC 2.93 $Revision: 1.294 $ with XEmacs 21.4 (patch 8) "Honest Recruiter" XEmacs Lucid!
17:06:08 <shapr> emacs == irc,email,news,shell,coding
17:06:20 <pesco> *phew* Ashley Yakeley bent the Unicode discussion back in the right direction. Thanks!
17:06:32 <Jerub> utf8 is still going?
17:06:44 <shapr> Jerub: big unicode discussion on haskell@haskell.org
17:07:12 <pesco> Last message is from one hour ago or so.
17:07:27 * shapr decides to sleep
17:07:33 <shapr> g'night guys..
17:07:36 <pesco> Night
17:08:12 <Jerub> bye
17:24:19 <dark> \whois dark
17:24:55 <dark> Mixing up data and code... obviously a Haskell-inspired error :-)
22:32:49 <Jii> hi there
22:33:09 <Pseudonym> G'day.
22:33:22 <delYsid> morning guys
22:34:01 <Jerub> heya.
22:45:45 <delYsid> shapr: I think I'll start with TicTacToe :)
22:46:31 <Jii> delysid, instead of chess, that is? :-)
22:46:47 <delYsid> Jii: Yah.
22:47:30 <Pseudonym> TicTacToe is a good first case to try, only it's not really amenable to alpha-beta pruning.
22:48:03 <Pseudonym> It's so hard to come up with a static evaluation function when it's so easy to evaluate the whole game tree.
22:48:25 <delYsid> well, static for tic is easy.
22:48:38 <delYsid> 1 if I win, -1 if I loose, and 0 otherwise.
22:48:40 <Pseudonym> win = +1, lose = -1, otherwise = 0
22:48:41 <Pseudonym> Yes. :_)
22:48:58 <Pseudonym> But as I said, you can't really alpha-beta prune with that.
22:49:03 <delYsid> right
22:49:15 <Jii> it was fun to read speculations on the number of different possible games in go
22:49:22 <Jii> the numbers were huge :)
22:49:29 <Pseudonym> Othello is very pleasant.
22:49:30 <delYsid> > than the atoms in the universe...
22:49:48 <Jii> it is pretty difficult to calculate it
22:49:54 <Jerub> delYsid: What about that greek game.
22:49:59 <delYsid> ahh, yeah. we could write Go.hs based on AlphaBeta.hs...
22:50:25 <delYsid> Jerub: What greek game?
22:50:40 <Jerub> 3 rows of lines. 7, 5 and 3. You can cross off any number from only one row. The last person to cross off a line looses.
23:30:54 * Jerub can't stop thinking about a graphical programming language.
23:48:59 <Jii> what do you mean by graphical programming language?
23:57:21 <Jerub> Jii: Programming where text isn't the result. A graphical representation of the program is.
