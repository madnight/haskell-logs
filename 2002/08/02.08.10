00:48:08 <Jii> this is silly, i can't cope with the volume of haskell(/cafe)-lists although they definitely are not the highest volume mailing lists on earth
00:48:24 <Jii> i am not good at e-mails
01:28:23 <ChilliX> what mailer are you using?
01:28:36 <Jii> mutt
01:29:21 <Jii> i just get an uneasy feeling when i have lots of unread mail, even though the mail is "just" mailing list mail, similar to news articles
01:29:33 <ChilliX> ok ic
01:29:41 <ChilliX> that's something you have to get over
01:30:02 <ChilliX> I am getting 200-300 messages/day
01:30:33 <ChilliX> if I would always start to read email when new messages get in, I wouldn't be doing anythig else anymore
01:30:47 <ChilliX> what I do, I bulk read
01:31:16 <ChilliX> and during bulk reading file all email that I want to deal with eventually away into a todo folder
01:31:23 <ChilliX> everything else is deleted or refiled
01:31:45 <ChilliX> so the inbox is clean fast
01:35:07 <Heffalump> my mailing list mail goes somewhere else to my personal mail
01:35:22 <Heffalump> so I read my personal mail immediately and store up my mailing list mail
01:40:09 <Jii> heh, this peyton jones presentation is fun: "Plan of attack: 1. Find an application 2. Try to write it in Haskell 3. Fail 4. Figure out how to fix Haskell 5. Abstract key ideas, write a paper 6. Repeat from (2)"
01:41:35 <Jii> "Lazy functional programming for real"
03:53:44 <shapr> delYsid: programmerien entwicklung arbeiten
03:54:18 <delYsid> programmieren
03:54:33 <Jerub> shapr: *grr*
03:54:35 * delYsid just got lambdaTeX + .lhs (latex) working
03:54:35 <Jerub> twisted.web bugs :/
03:54:37 <delYsid> thats really cool
03:54:43 <shapr> delYsid: oh, thanks, my spelling sucks
04:09:18 * shapr downloads chess code
04:11:22 <shapr> hi pesco
04:11:31 <pesco> Moin shapr!
04:11:43 <shapr> wie geht es?
04:11:53 <pesco> Great, just woke up.
04:12:05 <shapr> I've been awake for hours...
04:12:07 <shapr> two exactly :-)
04:12:38 <pesco> Heh. I've only gone to bed 8 hours ago.
04:12:55 <shapr> relative of friends visiting us from Weisbaden (sp?) this weekend, they just flew back today.
04:13:17 <pesco> Wiesbaden :)
04:13:41 <shapr> one of the people visiting is a psychiatrist type,  she said that switched sleep schedules can be the sign of an oncoming psychotic episode.
04:13:56 <shapr> that probably means 98% of irc users are crazy ;-)
04:14:07 <pesco> Probably.
04:14:20 <shapr> I think sleep is boring.
04:14:26 <shapr> it's hard to program while sleeping.
04:14:43 <pesco> I like sleeping, because it's easy to program afterwards.
04:14:58 <shapr> heh, good point.
04:15:28 <pesco> Good ideas happend before getting out of bed, or under the shower. For me at least.
04:15:36 <pesco> s/happend/happen/
04:15:43 <shapr> yah, that's true.
04:16:06 <shapr> I figured out how alpha-beta game trees work while sleeping yesterday.
04:16:12 <shapr> at least, how I think they could work.
04:16:28 <pesco> What are alpha-beta game trees?
04:16:58 <shapr> as far as I understand it, a tree of possibilities
04:17:12 <pesco> OK, why "alpha-beta"?
04:17:15 <shapr> if you make one move, you go down this branch of the tree
04:17:21 <shapr> I'm not sure about that part yet :-)
04:17:25 <pesco> Heh.
04:18:05 <shapr> I think the code should assign a score to each branch, and choose the branch with the highest score.
04:18:14 <shapr> that way the computer can try to win.
04:18:54 <pesco> Heh, that's how the "difficulty" slider works :)
04:19:58 <shapr> I would guess difficulty gets adjusted by how deeply the computer searches the branches
04:20:17 <pesco> Yah, probably better.
05:02:50 <delYsid> shapr: http://lexx.delysid.org/Stunden.ps
05:07:06 <pesco> shapr: Are you still following the IO/Unicode discussion?
05:07:20 <JerubBaal> wasn't that discussion going on last week?
05:07:43 <pesco> JerubBaal: It has been going on since last week.
05:12:00 <shapr> pesco: I haven't read all of it, something interesting?
05:14:09 * shapr reads more of the unicode thread
05:26:03 <shapr> I like Alastair Reid's conclusion to the "text pedantry" thread.
06:19:58 <shapr> nvidia sucks.
06:31:54 <shapr> delYsid: YAHT is a bunch of .tex files
06:32:05 <shapr> couldn't it also be done with .lhs lambdaTeX ?
06:32:40 <delYsid> sure
06:32:59 <delYsid> It would looks quite pretty then, but the lambdaTeX output isn't really Haskell.
06:33:05 <delYsid> s/really/real/
06:33:07 <shapr> ?
06:33:16 <shapr> but .lhs files are real Haskell, right?
06:33:37 <delYsid> yeah
06:33:41 <delYsid> the source is...
06:33:48 <delYsid> the resulting ps and pdf files aren't really...
06:34:01 <delYsid> ahh, you mean to be able to execute the code too?
06:34:05 <shapr> right
06:34:07 <delYsid> That would be cool, a Yaht module
06:34:16 <shapr> hi standards
06:34:36 <shapr> it seems to me that lambdatex .lhs files have the best of all worlds...
06:34:38 <standards> hi shapr
06:34:54 <delYsid> shapr: right, highlighting without preprocessing.
06:34:56 <standards> never tried lambdatex
06:34:58 <delYsid> it's really cool.
06:35:04 <shapr> standards: are you new to Haskell? or very experienced?
06:35:09 <standards> I usually go for haskell.sty 
06:35:15 <standards> opss wait
06:35:19 <delYsid> I'd like to have a way to use \begin{code} with lambdaTeX too, but that should be easy methinks.
06:35:23 <shapr> standards == jadrian?
06:35:25 <jadrian> yeap
06:35:26 <shapr> aha, I thought so :-)
06:35:33 <jadrian> forgot to change it...
06:36:00 <jadrian> not a newbie 
06:36:22 <jadrian> but I don't think I classify as an haskell guru lol
06:36:25 <delYsid> The one haskell.sty I found required you to manually markup the code.
06:36:33 <shapr> we need to write up an advertisement for #haskell to post to the mailing list.
06:36:41 <delYsid> the other listed on haskell.org has a broken link, and I didnt manage to google it.
06:37:06 <jadrian> mmm I think lambda.tex needed to manually markup the code
06:37:10 <shapr> I wish the HaskellWiki would come back, I'd like to post all this useful info on it.
06:37:15 <shapr> :-(
06:37:29 <shapr> no one responded when I asked on the main list about the HaskellWiki
06:37:33 <delYsid> jadrian: lambdaTeX does a lexical analysis of your literate Haskell and marks it up automatically.
06:37:40 <delYsid> It's written in plain TeX
06:37:43 <shapr> maybe I should just ask for the content so I can port it to a MoinMoin wiki somewhere...
06:37:49 <jadrian> with Andrew Cookes haskell.sty I just use \begin{code} \end{code}
06:38:17 <jadrian> delYsid: do you have to sepcify the functions?
06:38:23 <delYsid> jadrian: right, where is that file?
06:38:37 <jadrian> delYsid: which one? haskell.sty?»
06:38:42 <shapr> delYsid: hey, I have access to the YAHT sources now, and I'm fixing a few bugs.
06:38:44 <delYsid> yep
06:39:18 <jadrian> http://www.andrewcooke.free-online.co.uk/jara/pancito/haskell.sty
06:39:29 <delYsid> well, that url is dead afaik
06:39:38 <jadrian> oh it is
06:39:40 <jadrian> I can send you mince
06:39:42 <jadrian> mine
06:39:47 <delYsid> please
06:39:50 <jadrian> k
06:39:53 <delYsid> mlang@delysid.org
06:40:16 <jadrian> you should edit it though... 
06:40:39 <jadrian> it shows the title of my next work on top of the page
06:40:54 <jadrian> (it showed Andrew Cooke before so you had to edit it anyway)
06:41:05 <delYsid> tnx
06:41:11 * delYsid will look at that.
06:41:25 <delYsid> Let's see what's better, haskell.sty or lambdaTeX
06:41:56 <jadrian> sent
06:42:08 <shapr> .sty is style, right?
06:42:12 <jadrian> yeap
06:43:01 <jadrian> just put it in one of your latex dirs containing the styles and then texhash
06:43:32 <pesco> TeX is nice and all, but ASCII-Art still has much more _style_!
06:43:38 <pesco> ;-)
06:43:39 <jadrian> lol
06:44:40 <pesco> I wonder if I could prepare some Uni course-work in ASCII, with lots of Art of course.
06:44:51 <jadrian> by the way, are you going to the funct. programming summer school too? (Oxford)
06:45:20 <pesco> Me? No, when is it held?
06:45:31 <Heffalump> next week :-)
06:45:32 <jadrian> 19 August
06:45:35 <jadrian> heya Heffalump
06:45:35 <Heffalump> well, the week after next
06:45:38 <Heffalump> hi there
06:46:03 <pesco> Oh.
06:46:21 * jadrian is trying to end his projects until then... 
06:46:47 <jadrian> argh...
06:56:45 <delYsid> ahh
06:56:47 <delYsid> that is cool.
06:57:00 <delYsid> haskell.sty based on listings.sty basicly does the same as lambdaTeX
06:57:05 <delYsid> but in 5% of code :)
06:58:25 <pesco> And how well does it interact with literate Haskell?
06:58:43 <delYsid> haskell.sty uses the \begin{code} stuff
06:58:46 <delYsid> so you can still use .lhs...
06:58:59 <delYsid> lambdaTeX really implements the > sign for literate haskell...
06:59:01 <pesco> But I have to explicitly mark it? That's inconvenient...
06:59:03 <delYsid> Thats the basic difference.
06:59:34 <pesco> But haskell.sty also pretty-prints?
06:59:43 <delYsid> nope
06:59:53 <delYsid> lambdaTeX doesnt do that either...
06:59:57 <delYsid> But it is planned.
06:59:57 <pesco> Oh, ok.
07:00:23 <pesco> What we need is a grand unified lhs typesetter.
07:00:28 <shapr> truly
07:00:35 <delYsid> In the lambdaTeX todolist is an item to align :: and = of function definitions e.g.
07:00:53 <delYsid> well, I think lambdaTeX is nearly there...
07:01:04 <delYsid> haskell.sty is a cute hack, but limited.
07:01:10 <pesco> I see.
07:01:30 <pesco> So all we need is take one of the existing pretty-printers and stuff it into lambdaTeX somehow...
07:01:50 <delYsid> I wouldnt like it to prettyprint my code
07:01:55 <pesco> No?
07:01:58 <delYsid> I usually know how far I want to indent
07:02:04 <delYsid> but align at certain places could be pretty
07:02:32 <Heffalump> Igloo has a nice LaTeX pretty printer for Haskell, but he hasn't released it yet
07:02:46 <pesco> I thought about cosmetics like converting arrows and greek letter ASCII art to real glyphs.
07:02:53 <Heffalump> he needs more poking to release it.
07:03:00 <pesco> Heheh.
07:04:38 <shapr> jadrian wrote a nifty emacs x-symbol thingy that sposedly lets you see the real lambda symbols and stuff in a haskell source buffer.
07:04:45 <shapr> I haven't it yet.
07:04:53 <pesco> Cool!
07:07:41 <pesco> Can any of the current Haskell systems handle Unicode source input?
07:08:05 <shapr> there was some discussion about that recently
07:08:39 <shapr> I think the answer is "the standard says yes, but no one does it. Ghc is planning to do that RSN."
07:09:39 <delYsid> oh, no
07:09:52 <delYsid> then I'll really need an un-utf8-haskell-minor-mode
07:10:06 <shapr> delYsid: yah, there needs to be some better solution there.
07:10:18 <pesco> I'd like that. I'd finally have a compelling reason
07:10:34 <delYsid> My display can't display those chars.
07:10:40 <delYsid> It's only 8^2
07:10:49 <delYsid> er, 2^8
07:10:52 <pesco> er, to investigate how to handle Unicode.
07:11:00 <pesco> delYsid: Ooh, :(
07:11:00 <shapr> delYsid: is there any solution?
07:11:08 <delYsid> no
07:11:16 <delYsid> not that I know one
07:11:18 <shapr> delYsid: add another row of dots?
07:11:24 <shapr> use two chars to display stuff?
07:11:33 <delYsid> yeah
07:11:39 <delYsid> map the arrow to <-
07:11:45 <delYsid> exactly that's what I'll need
07:11:49 <shapr> ?
07:12:08 <shapr> hmm
07:12:09 <delYsid> or lambda to \
07:12:14 <shapr> I see
07:12:16 <pesco> The screen reader would have to know unicode but translate it to Braille (sp?) Art  :)
07:12:29 <shapr> how will you be able to tell the difference between \ and lambda?
07:12:45 <delYsid> I will not be able to do that.
07:13:06 <shapr> there must be a solution...
07:13:13 <shapr> I'll think about it, and ask around.
07:13:24 <delYsid> well, the working solution sucks
07:13:44 <delYsid> if we map unicode chars to multiple chars, it will be hell to read.
07:13:47 <shapr> I agree.
07:13:57 <delYsid> We only can map back to iso
07:14:00 <shapr> imho, the best solution is to add another row and column
07:14:26 <delYsid> We dunno how japanese or chinese is done, but afaik, in Japan for instance, they dont even know that blind people *can* use a computer.
07:14:39 <shapr> that's not a good sign.
07:14:41 <pesco> *Oomph*
07:15:09 <shapr> delYsid: btw, bea found some cool swedish projects
07:15:26 <delYsid> yeah
07:15:30 <delYsid> have to really go now
07:15:31 <delYsid> cya
07:15:33 <shapr> cya
07:15:37 <pesco> Bye.
07:35:54 <jewel> hey guys
07:36:06 <shapr> hey jewel, what's up?
07:37:42 <jewel> recovering from last night
07:38:33 <shapr> had fun?
07:40:04 <jewel> erm ..  yeah I think so
07:40:16 <jewel> dublin can be weird
07:40:23 * shapr grins
07:40:36 <jewel> but I'm reading to do some haskell workout
07:40:40 <jewel> er, ready
07:40:50 <shapr> any specific in mind?
07:41:04 <jewel> no, probably some collaborative stuff
07:41:11 <shapr> I'm working on getting WASH-CGI working in ghc5.04
07:41:27 <shapr> but the idea of implementing Joy in Parsec has been nibbling at the edges of my mind.
07:43:09 <shapr> jewel: are you subscribed to the #haskell icfp list, and do you have access to the cvs tree?
07:43:24 <shapr> have you used QuickCheck or HUnit?
07:43:55 <jewel> just a sec
07:52:14 <jewel> talking about batteries and solar panels and access points
07:52:27 <shapr> cool stuff
07:52:29 <jewel> I'm subscribed to the list
07:52:32 <jewel> and I cvs access
07:52:43 <shapr> excellent
07:52:46 <jewel> I've never used QC or HUnit
07:52:57 <jewel> but I read the QC paper a while ago
07:52:58 <shapr> have you used one of the xUnit frameworks?
07:53:10 <shapr> JUnit, PyUnit, etc?
07:53:10 <jewel> only in passing
07:53:39 <shapr> ever tried test first development?
07:53:55 <jewel> Never in a big project
07:54:15 <jewel> Mostly the tests are I have are after the fact, more like system tests than unit tests
07:54:23 <shapr> yah, I understand.
07:54:34 <shapr> that's the curse of inheriting systems from other people.
07:54:44 <jewel> yeah
07:54:57 <jewel> so, let me go find quickcheck ...
07:55:03 <shapr> it's in the CVS tree
07:55:11 <shapr> it's also included with Hugs and GHC afaik
07:56:02 <shapr> what shall we practice with?
07:56:53 <jewel> hmm, what's the stuff with joy and parsec?
07:57:17 <shapr> well, Parsec is an impressive parser
07:57:33 <shapr> and it allows you to evaluate stuff while parsing.
07:57:53 <shapr> shall we try that?
07:58:22 <shapr> http://www.cs.uu.nl/~daan/parsec.html
07:58:58 <shapr> you may need to read Meijer's monadic parsing paper first, I'm not sure.
07:59:24 * gabor never worked with TeX, but really has no affinity to learn it
07:59:36 <shapr> hi gabor
07:59:41 <gabor> hi
07:59:56 <pesco> gabor: What do you use to typeset text?
08:00:07 <gabor> lout
08:00:37 <pesco> What's that?
08:00:58 <gabor> gimme a second...
08:01:45 <gabor> http://snark.ptc.spbu.ru/~uwe/lout/
08:02:13 <gabor> TeX: imperative, lout: functional (kindof)
08:02:48 <jewel> I'm reading his parsec documentation / paper
08:03:15 <shapr> jewel: cool :-)
08:17:55 <jewel> interesting stuff
08:18:34 <shapr> yah, I agree
08:18:35 <jewel> what's the sample joy program to parse?
08:19:03 <shapr> what about doing unit test first, and starting with something very basic.
08:19:22 <shapr> like "1 ." should build a stack, put 1 on it, and return 1, right?
08:20:10 <jewel> ok, I was thinking of playing with parsing first
08:20:13 <jewel> and an implementation later
08:32:29 <jewel> this joy code is difficult to understand after a long absence
08:39:32 <jewel> I thought I had CVS access ...
08:40:11 * shapr grumbles
08:40:20 <shapr> maybe this isn't a good time for me to practice after all.
08:40:52 <jewel> -d:pserver:jleuner@cvs.alicorna.net:/var/cvs
08:40:54 <jewel> tired?
08:41:02 <shapr> not tired
08:41:14 <shapr> visitors here
08:41:29 <jewel> how inconsiderate
08:41:31 <shapr> heh
08:41:33 * shapr grins
08:41:35 <jewel> ;-)
08:41:54 <jewel> is that the right cvs root?
08:41:58 <shapr> looks right
08:42:00 <shapr> lemme check mine
08:42:33 <shapr> yup, that's it.
08:42:37 <shapr> doesn't work?
08:44:24 <shapr> well, I'm off to be social, I'll bbl.
08:44:33 <jewel> I keep writing ifcp and not icfp
08:44:38 <jewel> bye
08:45:06 <jewel> probably because the Irish Film Centre == IFC
09:14:22 <gabor> I think so. The problem comes when inlined functions are called
09:19:37 * gabor confused channels one more time. Please ignore him :-)
09:25:45 <Jii> hmh, "Jocaml3", it seems to me that extending "ML" has finally gone too far (as far as the abbreviaton considered) ;-)
09:54:07 <Jii> has anyone studied the code of the web server written in haskell (afaik, there are some extensions to it too)
09:54:18 <Jii> (extentions to haskell, that is)
09:59:32 <Jii> (well, i am not even sure if it is available, though :)
12:10:47 <pesco> I don't fully comprehend the library report on the TimeDiff type.
12:11:03 <pesco> I want to implement a stop watch.
12:11:44 <pesco> To measure the time between start and stop I want to use getClockTime and diffClockTimes.
12:12:19 <pesco> From the result I'd like to produce the number of seconds as a Float.
12:12:21 <pesco> How?
12:17:05 <pesco> Uh, now I'm confused.
12:18:11 <pesco> Appearently, the different fields denote different units of measurement for the entire timespan.
12:18:49 <pesco> So if I wait three days, I should have tdDay=3, tdHour=24*3, tdMin=60*24*3, ...
12:19:20 <pesco> trying this in GHCi though, yields, after waiting about two minutes:
12:20:20 <pesco> tdMin=0, tdSec=139, tdPicosec=3272000000
12:20:44 <pesco> What's up with that?! This is totally inconsistent, or isn't it?
12:21:06 <pesco> And if it's meant to be that way, why doesn't the Report say anything about it?
12:21:24 <pesco> Well, tdMin=0 certainly _can't_ be meant to be that way.
12:21:36 <pesco> but tdSec=139 is actually quite what I want.
12:21:56 <pesco> tdPicosec to be modulo one second sounds reasonable as well.
12:23:19 <pesco> So probably it's meant to be as it is in GHC, but with the more significant fields filled in as well.
12:23:26 <pesco> *grumble*
12:27:48 <hornby> maybe tdMin + tdSec + tdPicosec = time passed?
12:28:14 <pesco> No.
12:29:20 <pesco> Probably tdX = time passed in Xs where X is Sec or higher
12:29:44 <pesco> and tdPicosec = time passed in picoseconds modulo one second.
12:29:55 <pesco> That makes sense.
12:30:01 <pesco> And the GHC implementation is incomplete.
12:30:25 <pesco> Luckily, I'm only interested in seconds...
16:39:36 <gabor> Hey buggs, you from D?
16:44:09 <buggs> yes
16:44:34 <gabor> from a university?
16:44:53 <buggs> yes
16:45:04 <buggs> and you?
16:45:18 <gabor> Nuremberg/Erlangen
16:45:29 <buggs> munich
16:45:36 <gabor> but uni is long done
16:45:51 <gabor> why haskell?
16:46:09 <buggs> actually because of loty 
16:46:20 <gabor> who's that?
16:46:31 <buggs> language of the year
16:46:41 <gabor> url?
16:47:40 <buggs> even a channel #loty
16:47:58 <gabor> i see
16:48:15 <gabor> is it functional (purely?)
16:48:49 <buggs> haskell ?
16:49:09 <gabor> loty
16:49:15 <buggs> http://www.pragmaticprogrammer.com/loty/
16:49:17 <jagular> heh
16:49:29 <buggs> it is just the language they learn this year ;)
16:49:37 * gabor goes looking
16:50:17 <buggs> and since a lot of ppl around me keep talking about haskell and then loty too
16:50:25 <buggs> i try to catch sth
16:51:05 <gabor> too late...
16:51:13 * gabor is joking
16:51:33 <buggs> so what got you to haskell ?
16:51:34 <gabor> haskell is cool
16:51:49 <gabor> category theory
16:52:07 <buggs> what's that?
16:52:11 <gabor> actually I am more active with dylan
16:52:19 <buggs> ah
16:52:32 <buggs> is apple related isn't it?
16:52:40 <gabor> type theory is built on c.t.
16:52:50 <gabor> not any more
16:53:16 <gabor> they stopped it when they run out of money 95
16:54:17 <buggs> any revival for os x?
16:54:41 <gabor> we are working on it: #dylan
16:59:07 <gabor> loty looks like a good idea
16:59:25 <gabor> most people have never ever heard of haskell
