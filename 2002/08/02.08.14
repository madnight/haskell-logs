00:37:05 <resolve> hey folks. what's wrong with this?
00:37:12 <resolve> all (= True) [True, False]
00:37:46 <resolve> i was trying to use the = operator as a partially applied func
00:38:09 <resolve> is there a 'name' equivalent?
00:39:52 <resolve> i'm a fool. nevermind. :-)
00:45:45 <clausen> you want "==" ?
00:46:39 <resolve> yep, that's the one i was after
00:47:10 <resolve> i was just writing a 'isMatrix' predicate:
00:47:11 <resolve> isMatrix :: [[Int]] -> Bool
00:47:12 <resolve> isMatrix [] = True
00:47:12 <resolve> isMatrix [x] = True
00:47:12 <resolve> isMatrix (x:xs) = all (== length x) [length l | l <- xs]
00:47:35 <resolve> i think that's right, anyway. :-)
00:54:10 <resolve> (it's for some uni work - alas we don't do much more with haskell for a while after this :-(
00:54:24 <resolve> i'm halfway through thompson's book though. i plan to keep reading
03:36:19 <delYsid> Can anyone explain Functors to me?
03:37:03 <shapr> Funky stuff
03:37:33 <shapr> http://www.wikipedia.com/wiki/Functor
03:37:57 <shapr> dunno if that helps any
03:38:50 <shapr> http://c2.com/cgi-bin/wiki?CurriedFunctor
03:38:52 <shapr> that might be better
03:44:15 <delYsid> Funktors are just partially evaluated functions?
03:44:23 <delYsid> But why is there a Funktor class then?
03:45:07 <Heffalump> no, Functors aren't partially evaluated functions
03:45:26 * delYsid reads the "State monads don't respect the monad laws in Haskell" thread
03:45:48 <delYsid> Heffalump: well, the last url shapr pasted seems to indicate that..
03:46:27 <shapr> Heffalump: what's the point or use of the Functor class?
03:47:30 <Heffalump> delysid: it's either confusing or wrong
03:47:36 * Heffalump isn't sure which
03:47:46 <Heffalump> shapr: there's not a huge amount of practical use, TBH
03:48:52 <Heffalump> a functor is a mapping from types to types, together with a mapping from functions on values of the source type to functions on values of the target type
03:49:07 <Heffalump> so for example, the list type constructor together with the map function is a functor
03:51:07 <resolve> 'together with'?
03:51:10 <clausen> likewise Maybe + just, IIRC
03:51:27 <clausen> s/just/Just/
03:51:39 <clausen> actually, in that case, the type-constructor is the same!
03:51:47 <clausen> (as the mapping function)
03:53:09 <Heffalump> clausen: not just, mapMaybe
03:53:34 <Heffalump> the mapping has to be from functions to functions
03:53:34 <Heffalump> delysid: which thread (re state monads)?
03:54:10 <delYsid> Heffalump: The thread with exactly the subject I quoted.
03:54:10 <Heffalump> oh, the old one
03:54:10 <Heffalump> right
03:54:11 <delYsid> Heffalump: hmm, I somehow get it, but still not really.
03:54:18 <delYsid> Any example on Functor usage somwhere?
03:54:37 <Heffalump> not really, though you can read the instances of Functor in the prelude
03:54:52 <delYsid> hmm
03:54:52 <Heffalump> like I said, I don't think they're actually much use in practice
03:54:53 <delYsid> ok
03:55:01 <delYsid> well, if it isn't used, I will not need it :)
03:56:18 <Heffalump> if you do need it at any point, you'll probably see the point of it then
03:56:42 <delYsid> most probably, yeah :)
04:09:01 <shapr> hi ChilliX, I see parr 0.1.0 escaped.
04:09:28 <ChilliX> yes, yesterday
04:09:38 <ChilliX> there is now also a draft of the lecture notes
04:09:45 <shapr> spiffy
04:11:00 <shapr> looks like Nepal is making progress.
04:12:09 <ChilliX> yeah, but it takes
04:12:49 <ChilliX> all this generic programming, multi-parameter type classes and functional dependencies will cost me my sanity at some point (*if* there is anything to loose, that is)
04:13:03 * shapr laughs
04:13:27 <shapr> you might reach a higher level of consciousness :-)
04:13:37 <ibid> argh
04:13:41 * ibid hates typed set theory
04:13:44 <ChilliX> I am always torn between absolutely admiring and hating type theory
04:13:45 <shapr> think of being able to understand Wadler the first time he says something =)
04:14:21 * ibid likes types in programming, but in set theory, they get in the way
04:14:45 <ChilliX> ibid: sets are boring anyway ;-)
04:14:54 <ibid> bah
04:15:00 <shapr> setgame.com is fun
04:15:04 <Heffalump> are the lecture notes going to be published in LNCS?
04:15:11 <ibid> sets are what i'm working on right now
04:15:29 <ChilliX> doing what?
04:15:36 <Heffalump> oh yes, the web page says they will
04:15:49 <ChilliX> Heffalump: yes, but only after the summer school (this is only a prelim draft so far)
04:16:01 <Heffalump> yeah, that's what happened with AFP3
04:16:25 <ibid> right now, trying to figure out iteration in a  version of wp calculus
04:17:56 <ChilliX> what version?
04:18:30 <ChilliX> now, I have to test parr on the Suns used for the summer school (I wish I would they would just use x86/Linux)
04:18:59 <shapr> ChilliX: are you using QuickCheck or HUnit?
04:18:59 <ibid> trying to define the opening of a generalized substitution without redoing a theory of fixed points in the context of generalized substitutions... set fixpoints are ok except that types get in the way
04:19:08 <shapr> or are they too high-level for testing parr?
04:19:22 <ibid> ChilliX: generalized substitutions from abrial with flavouring from steve dunne
04:19:25 <Heffalump> chillix: so do I :-)
04:19:53 <shapr> f00, I have to do paying work.
04:20:00 <Heffalump> do they have GHC 5 installed on them? The support staff tend to be horribly slow at getting recent versions of stuff installed.
04:20:00 <ChilliX> shapr: for the lib? planning to use QC, but didn;t get around to it yet
04:20:38 <ChilliX> Malcolm installed GHC
04:20:46 <ChilliX> under /fs/afp2002
04:20:53 <ChilliX> ibid: ok
04:21:14 <ChilliX> shapr: there'll be a QC paper in the Haskell workshop
04:21:22 <Heffalump> shapr went
04:21:27 <ChilliX> shapr: QC for monadic functions
04:21:32 <ChilliX> oh, oops
04:21:48 <Heffalump> great, that means it'll disappear again after the summer school is over, I suspect
04:21:58 <ChilliX> maybe
04:22:06 <ChilliX> Heffalump: are the sysads so slow?
04:22:19 <Heffalump> yes
04:22:33 <Heffalump> I'm sure some of the machines still have GHC 2 on them.
04:22:39 <Heffalump> though I can't remember which ones
04:22:48 <ChilliX> yeah, I saw this
04:22:53 <ChilliX> I was *really* amazed
04:23:03 <Heffalump> oh, and they run Solaris on Intel...
04:23:15 <ChilliX> we did that, too until a year ago
04:23:20 <ChilliX> really sucks
04:23:27 <ChilliX> now we have moved everything over to Linux
04:23:31 <Heffalump> yeah, at least you had the sense to switch...
04:23:49 <ChilliX> the sysads here are very pro-linux
04:24:00 <Heffalump> everytime I complain I get a lecture extolling the virtues of Solaris (well, I'm exaggerating, but it seems like that)
04:24:31 <ChilliX> in fact, one rewrote the whole NFS client side (or server side?) to make it better suitedf for our file servers
04:24:40 * Heffalump just ends up looking after some Linux boxes himself
04:25:04 <ChilliX> Solaris is crap except that it runs better on 16-way up servers
04:25:14 <Heffalump> like we have any of those...
04:25:14 <ChilliX> (I have been using Solaris for many years!)
04:25:58 <ChilliX> hehe, even Sun will sell their new x86 server with Linux by default
04:26:11 <ChilliX> so, x86/Solaris can't be that great
04:26:32 <ChilliX> (in fact, Sun actually planed to kill x86/Solaris off)
04:26:58 <ChilliX> (they backed off that plan after some complaints - probably also from your sysads ;-)
04:28:23 <ChilliX> the connection from Syndey -> Oxford sucks
04:28:42 <Heffalump> I thought Australia got some decent pipes recently?
04:28:58 <ChilliX> yeah, to the US
04:29:08 <Heffalump> our connection to the US is fairly good too, though
04:29:10 <ChilliX> I KNEW Solaris sucks:
04:29:15 <ChilliX> booth24[/auto/ecslab/demo60/parr]$ tar xzf parr-0.1.0.tar.gz 
04:29:15 <ChilliX> tar: z: unknown option
04:29:15 <ChilliX> Usage: tar {txruc@}[vfbFXhiBEelmopwnq[0-7]] [-k size] [tapefile] [blocksize] [exclude-file] [-I include-file] files ...
04:29:24 <Heffalump> yep...
04:29:29 <ChilliX> yeah, but it all adds up
04:29:33 <Heffalump> ps takes a whole different set of options too
04:29:41 <ChilliX> yeah, I remember
04:29:45 <Heffalump> (though I think it might at least have the same functionality)
04:29:51 <ChilliX> pretty annoying
04:30:03 <delYsid> ChilliX: Tru64 is the same there
04:30:07 <delYsid> They all usually dont know bout z
04:30:09 <delYsid> or j
04:30:12 <ChilliX> ok, at least they had the sense to install gtar
04:30:27 <Heffalump> you know about the package system, btw?
04:30:38 <ChilliX> delYsid: they should just use the GNU tools; they are better anyway
04:30:48 <ChilliX> Heffalump: yeah, it sucks big time
04:30:57 <Heffalump> actually, I quite like it
04:30:58 <delYsid> ChilliX: Well, thats problematic
04:31:07 <delYsid> ps -e and stuff was there before GNU came afaik
04:31:20 <resolve> australia might have a nice link to the US but we still pay through the roof for it. :(
04:31:21 <ChilliX> Heffalump: ah, ok, I think, we meant diffent things
04:31:23 <Heffalump> the GNU tools are still better :-)
04:31:35 <ChilliX> Heffalump: there is some binary package install system for Solaris, which is crap
04:31:38 <resolve> yes, GNU should be everywhere :)
04:31:39 <Heffalump> oh, right
04:31:48 <Heffalump> I meant the "use foo" system on the ECS/Comlab machines
04:32:08 <ChilliX> Heffalump: I know that I have to use "use gcc" before I can use it
04:32:17 <ChilliX> not sure what that helps me, but anyway
04:32:18 <delYsid> AIX and IRIX are also very different from GNU
04:32:23 <delYsid> I had to learn that the hard way
04:32:24 <Heffalump> yeah, and there's quite a lot of other things in the package system
04:32:25 <delYsid> Unix is not Unique!
04:32:41 <Heffalump> well, if they have multiple versions of gcc installed, you can do "use version gcc" to change versions
04:32:50 <ChilliX> delYsid: no, but the GNU tools are better than about any other Unix tool set I have come across
04:32:58 <Heffalump> (I don't have an account on the ECS machines any more so I can't check that myself)
04:33:03 <ChilliX> actually my worst experiences I had on Ultrix
04:33:17 <ChilliX> Heffalump: ic
04:33:18 <delYsid> well, Ultrix is dead, fortunately :)
04:33:37 <ChilliX> delYsid: I *hope* nobody ever resurrects it
04:33:43 <Heffalump> but it's a bit of a pain in that you don't realise stuff is installed because you have to "use" it before its in your path
04:34:15 <Heffalump> s/its/it's/
04:34:19 <ChilliX> yeah
04:43:53 <ChilliX> Heffalump: hmm, any idea whether I can get at the GNU linker somehow?
04:44:21 <ChilliX> Sun's one doesn't like some options
04:50:31 <Igloo> ECS has "2.95.2          default         new-1998.05.12  new-1999.10.29" if that's what you wanted to know
04:52:32 <ChilliX> thanks
06:05:00 <resolve> hmm, i'm guessing the where clause of a function is evaluated before guards, right?
06:05:23 <resolve> the problem is that i have a guard checking if the arguments passed in are valid, and a where clause which builds another variable based on the assumption the argument is the valid type
06:05:33 <resolve> what would you guys suggest?
06:07:42 <Igloo> That sounds like it should work if I understand correctly
06:07:52 <Igloo> Evaluation is done lazily
06:12:04 <resolve> ahh yes! :-) how cool
06:22:01 <delYsid> yeah, the where is only called if it is actually needed I think
06:22:52 <resolve> haskell is so fun!
06:23:07 <Igloo> :-)
06:32:40 <delYsid> resolve: wanna see my first prog?
06:33:15 <resolve> sure!
06:38:38 <delYsid> resolve: http://lexx.delysid.org/Stunden.ps
06:45:12 <resolve> i find the symbols like 'lambda' harder to read than the haskell notation delysid :-) but it looks interesting
06:45:25 <resolve> once i get this assignment finished (so i'm free of responsibilities), i'll take a closer look
06:55:24 * shreya does not like this new namechange
06:55:51 <shreya> freenode sounds.. well... sort of crap
06:56:05 <shreya> open projects had something more special about it
06:56:27 <shreya> freenode sounds like some place on the net to find shopping vouchers
06:57:17 <ChilliX> shreya: I completely agree
06:58:46 <resolve> so do i! when are they planning to change?
06:58:48 <resolve> silly :(
07:02:04 <delYsid> ugh, freenode?!
07:02:14 <delYsid> OPN!
07:08:32 <shreya> Exactly :/
07:09:22 <delYsid> well, I wish lilo all the best, but I fear a bit for the project.
07:09:40 <resolve> why's that?
07:09:51 <delYsid> hmm, I dont want to say that publicly.
07:09:52 <delYsid> not yet
07:09:56 <Heffalump> why has it changed?
07:25:04 <resolve> hmm, any idea what's wrong here? is there a better way?
07:25:05 <resolve> countElem :: (Eq a) => a -> [(a,b)] -> Int
07:25:05 <resolve> countElem e xs =
07:25:05 <resolve>     length (filter (== True) [e == a | (a,b) <- xs])
07:26:44 <Heffalump> you could just do filter (==e) [a | (a,b) <- xs]
07:27:00 <resolve> ahh, good point
07:27:31 <resolve> i've got a problem with inferred types though;
07:27:33 <resolve> ERROR - Illegal Haskell 98 class constraint in inferred type
07:27:34 <resolve> *** Expression : countElem 5 [1,2,5,2,6,5,2,5,1]
07:27:34 <resolve> *** Type       : (Num a, Num (a,b)) => Int
07:27:46 <Heffalump> you're not giving it a list of tuples
07:28:02 <resolve> *ding, the sound of a lightbulb*
07:28:10 <resolve> heheh thanks. :-) i'm silly.
07:30:32 <resolve> the error messages are a bit cryptic while i'm learning
07:30:42 <resolve> sorry for all the silly questions :/
07:30:48 <Heffalump> np
07:30:53 <Heffalump> that error message is definitely cryptic
07:31:10 <Heffalump> Haskell needs a beginners mode where integer literals are just treated as Int or Integer or something, instead of Num a => a
07:38:21 <resolve> why are they called guards? i've been using them mainly for error conditions or as an alternative to pattern matching
07:38:34 <Heffalump> why are what called guards?
07:38:48 <Heffalump> the things after the | in foo x | x > 5 = 3
07:38:48 <Heffalump> ?
07:39:24 <Heffalump> basically because they "guard" the code that follows them - it'll only be executed it the condition is true
07:39:29 <Heffalump> (I think, anyway)
07:42:05 <resolve> ahh okay, at first i was confused about why you'd want that and pattern matching, but i see they serve different tasks
07:42:22 <resolve> is there a function in prelude to return the index of an item in a list?
07:44:03 <resolve> ahh, 'lookup' looks interesting. i haven't encountered 'maybe' before though
07:46:35 <Heffalump> well, it needs some way to indicate failure
07:46:43 <Heffalump> if you are sure it won't fail, use fromJust on the result
07:47:49 <resolve> i don't seem to have fromjust in hugs' prelude. this seems to work, though:
07:47:56 <resolve> ffEq :: (Eq a, Eq b) => [(a,b)] -> [(a,b)] -> Bool
07:47:56 <resolve> ffEq f1 f2
07:47:56 <resolve>     | not ((isFunction f1) && (isFunction f2)) = error "Arg not a function"
07:47:56 <resolve>     | otherwise =
07:47:56 <resolve>         and [Just v == lookup d f2 | (d,v) <- f1]
07:48:05 <resolve> i'm a bit new to data constructors, only read about them the other day :-)
07:49:14 <Heffalump> what on earth does isFunction do?
07:49:52 <resolve> checks that the list of relations is a function - ie, (1,2) and (1,3) is not a valid function
07:50:06 <Heffalump> oh, right
07:50:25 <Heffalump> that's not a proper equality test, btw
07:50:31 <Heffalump> it only verifies that f1 is included in f2
07:50:54 <resolve> hmm, good point.
07:51:06 <resolve> i wonder if there's a more efficient way than invoking it with the reverse args as well
07:51:28 <Heffalump> if you can assume Ord a, then sort the two lists first
07:51:39 <Heffalump> then you just have to compare for equality
07:51:57 <resolve> wouldn't the sort cost more than something like:
07:52:16 <resolve>         and [Just v == lookup d f2 | (d,v) <- f1] &&
07:52:16 <Heffalump> sort is nlog n, your test is quadratic
07:52:17 <resolve>         and [Just v == lookup d f1 | (d,v) <- f2]
07:52:26 <Heffalump> lookup is linear time, remember
07:53:54 <resolve> good point- that'd be closer to 2n^2, wouldn't it?
07:54:20 <resolve> well, under that :)
07:55:45 <Heffalump> you ignore constant factors when talking about time complexity
07:56:21 <resolve> sorry, i'm still a computer scientist in training :)
07:57:25 <Heffalump> :-)
07:58:18 <Igloo> Bah, scons' latex builder doesn't cope with things like tables of contents
08:06:19 <resolve> hmm, how do i extract an element from a data object? ie, if it's constructed with 'Just 5', i know i can match it with == Just 5, but i don't know how to derive the 5
08:07:02 <Heffalump> use pattern matching
08:07:22 <resolve> do i need to write a separate function to do it, though?
08:07:25 <Heffalump> or in this case use fromJust (you need "import Maybe" to get it)
08:07:41 <Heffalump> possibly, it depends exactly how your code works
08:07:49 <resolve> cool, i'll do the import this time around, though i'm naturally curious
08:08:41 <Heffalump> remember that fromJust Nothing will return an error
08:08:49 <resolve> i'm just wondering if, given the return value from lookup, i can derive the 'just' value without requiring a separate function - that seems a bit convoluted (though in the long term it would probably be a good idea to handle Nothing etc)
08:08:53 <resolve> *nod*
08:09:07 <Heffalump> you can use case:
08:09:15 <Heffalump> case lookup d f of
08:09:22 <Heffalump>    Just n -> ....
08:09:25 <Heffalump>    Nothing -> ....
08:10:08 <resolve> ahh, that's nice
08:15:11 <resolve> excellent, this works :-) thanks for all the assistance. i'm going to try do a fair bit more reading before i get stuck into another coding session - always when learning a new language i find myself trying to do things which draw upon knowledge i don't yet have - i find it hard to stay within the bounds of what i already know :)
08:18:00 <resolve> this is my final function of the night :-)
08:18:02 <resolve> ffComp :: (Eq a) => [(a,a)] -> [(a,a)] -> [(a,a)]
08:18:03 <resolve> ffComp f1 f2
08:18:03 <resolve>     | not ((isFunction f1) && (isFunction f2)) = error "Arg not a function"
08:18:03 <resolve>     | otherwise =
08:18:03 <resolve>         [(a, (case lookup b f2 of
08:18:03 <resolve>               Just n -> n
08:18:05 <resolve>               Nothing -> error "f1's values don't map to f2's domain"))
08:18:07 <resolve>          | (a,b) <- f1]
08:18:15 <resolve> probably wouldn't win haskell style points :) but it's fun
08:19:23 <resolve> (criticisms welcome)
08:20:39 * resolve pokes shapr :-)
08:22:54 * resolve realises shapr's not here and pokes himself :)
08:24:28 <resolve> i think i'll get some sleep before i make more of a fool out of myself :-) thanks again for all the help, imight see you guys again soon
09:19:50 --- topic: 'We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.1.0 released http://www.cse.unsw.edu.au/~chak/nepal/ || looking for team members for a #haskell ICFP contest entry, more info if the HaskellWiki returns.'
09:19:50 --- topic: set by shapr on [Tue Aug 13 09:38:49 2002]
09:19:50 --- names: list (clog Dalroth ChilliX ChoJin shreya shreya_ dblack delYsid jens liiwi smkl Chilli jagular ibid arete Ig jewel Heffalump rozzin Igloo hornby Jii)
09:41:22 <dark> -.-.mip.-.mip.-.-
09:55:42 <Jii> hi there
10:14:57 <dark> "Hahahahaha!  All evil has been lifted and separated!"  -- Steroid
19:56:34 <lament> can I interactively define functions in Hugs?
19:57:35 <ChilliX> lament: no
19:57:40 <ChilliX> you can in GHCi
20:14:33 <lament> thanks.
20:29:06 <lament> grr. I can't compile it :(
21:36:43 * Pseudonym woohoos
21:37:51 <Jii> huh?
21:38:38 <Pseudonym> I'm doing a world record attempt.
21:39:06 <Pseudonym> Current record for number of terms in the simple continued fraction expansion of pi is 57 million.
21:39:18 <Pseudonym> I just did the first million and my machine barely broke a sweat.
21:39:57 <Pseudonym> OK, it took 2.5 hours of CPU time, but almost no memory.  I also have the profile, so I know where to speed it up.
21:41:26 <Jii> huh :)
21:41:55 <Jii> you did it in haskell? ;-)
21:42:04 <Pseudonym> No, I prototyped it in haskell, though.
21:42:12 <Pseudonym> And I'm interpreting the results in haskell.
21:43:25 <Pseudonym> The actual workhorse is about 150 lines of C.
21:43:25 <Pseudonym> Mostly to keep memory usage down.
21:43:30 <Jii> yah
21:44:44 <Pseudonym> The numbers are BIG.  I dumped the state at the end of the first run, and there are only four integers, but the file is 3.1Mb in size.
21:44:56 <Pseudonym> Decimal representation, but still.
21:45:51 <Jii> what's the practical use for such data btw? :)
21:46:16 <Pseudonym> Absolutely no practical use.
21:46:35 <Pseudonym> Nobody needs 60 million continued fraction coefficients of pi.
21:47:16 <Jii> :)
21:47:47 <Jii> yeah, that's good then :)
21:48:02 <Jii> the things that have no use are more fun usually
21:51:33 <Pseudonym> Exactly.
21:51:33 <Pseudonym> Woohoo!  The wiki has returned!
21:51:33 <Pseudonym> Well, some of it.
23:24:04 <Pseudonym>  assembled.
23:24:08 <Pseudonym>  
23:40:28 --- topic: 'We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.1.0 released http://www.cse.unsw.edu.au/~chak/nepal/ || looking for team members for a #haskell ICFP contest entry, more info if the HaskellWiki returns.'
23:40:28 --- topic: set by shapr on [Tue Aug 13 09:38:49 2002]
23:40:28 --- names: list (clog Jii ibid Chilli liiwi Pseudonym Heffalum1 hornby ChilliX shreya_ lament shreya dblack delYsid jens smkl jagular arete Ig jewel rozzin Igloo)
