01:43:47 <shapr> good morning
01:44:05 <shapr> Igloo: the icfp archives are fixed now, so I think you can subscribe also.
02:41:28 <pesco> Moin!
03:31:58 <jewel> hey pesco, shapr
03:33:10 <pesco> hey!
04:36:56 <dark> Blender Foundation is at 99336 :)
04:43:49 <shapr> hi jewel!
04:43:55 <shapr> what's blender foundation?
04:44:00 <shapr> hi pesco
04:47:42 * shapr bounces
04:57:16 <pesco> Ah, hi shapr.
04:57:34 <shapr> hiya!
04:57:44 <pesco> I'm trying QuickCheck on my UTF-8 codec. "Falsifiable, after 1 tests" *lol*
04:57:52 <shapr> heh :-)
04:58:32 <pesco> OK, caught it.
04:58:50 <pesco> Yippie1
04:58:59 <pesco> toUpper 1
04:59:03 <pesco> er
04:59:04 <pesco> no
05:07:00 <Igloo> Ta, shapr
05:07:44 <shapr> hiya Igloo
05:07:50 <Igloo> Hi  :-)
05:09:49 <shapr> Igloo: hey, have you subscribed to the list?
05:11:51 <Igloo> I've sent the ack again, I'll see if it's forgotten about me
05:16:39 <Igloo> Still looks broken
05:16:53 <Igloo> What's p*mumble*'s e-mail address?
05:17:11 <shapr> p mumble?
05:17:16 <shapr> heh :-)
05:17:25 * Igloo reads the error this time - looks like permission problems on /var/lib/mailman/lists/icfp-team/config.db
05:17:43 <Igloo> Whoever runs it. Someone beginning with p who isn't pesco isn't it?
05:18:02 <shapr> Pseudonym
05:18:13 <shapr> which makes it very funny that you said P*mumble*
05:18:22 <Igloo> Ah  :-)
05:19:16 <dandelion-> where is (&) defined? what is it part of?
05:19:54 <Igloo> It's not defined according to hugs
05:21:29 * Igloo thinks more about make
05:22:54 <dark> shapr: (just woke up) the Blender Foundation is raising funds to buy the sources of Blender 3D (a modeling program) from a bankruptcy estate, and publish them under the GPL.
05:22:56 <dandelion-> ah okay, i found it
05:23:44 <dark> shapr: They'll need 100k euros, they're almost there now in theory, but have about 11000 to go from people who signed up as members but didn't pay yet.
05:23:44 <Igloo> How evil is using $1 etc for patterns in the same place as $foo etc for variable substitutions?
05:24:19 <Igloo> Oh, interesting, dark
05:24:33 <dark> http://www.blender3d.com/ for more info :)
05:24:40 <dark> I haven't figured out yet why a non-profit is using a .com domain.
05:24:42 <pesco> Oh, gotta go. Bye
05:24:58 <shapr> Igloo: huh? what kind of patterns?
05:25:02 <shapr> oh
05:25:03 <shapr> I see.
05:25:30 <Igloo> I want to do $arch/$1.o where in make you might do $arch/%.o
05:25:38 <Igloo> $(arch) rather, but YKWIM
05:26:20 <shapr> yes, IKWYM
05:26:21 <Igloo> I can't think of a nice obvious syntax for patterns that can include /s vs those that can't either
05:26:42 <shapr> let arch = $(arch) in
05:26:44 * shapr grins
05:27:03 <Igloo> :-)
05:27:41 <Igloo> I guess I could do $-3 or something for patterns that can't include /. I don't think it should be very common.
05:28:36 <Igloo> I'll need to think about what $1/foo/$2 should do with something like /bar/foo/baz/foo/quux too
05:32:14 <dark> Igloo: It should probaly take the longest match for $1, otherwise you get surprising results if you're building your foo/quux package in a directory that happens to be mounted on /bar/foo/ today.
05:33:14 <Igloo> *nod*
05:33:19 <dark> Igloo: Actually, that's going to be a problem in any case, the $1/bar/$2 pattern might unexpectedly succeed.
05:33:22 <Igloo> Just checked and that's what cook does
05:33:55 <Igloo> And I think cook only allows %0 to have /s in so it hasn't got to worry about dependencies only being satisfiable one way
05:34:02 <dark> Igloo: You could get around that by being very careful where you use relative or absolute paths... but that's a pain and won't always be compatible with the stuff you want to build.
05:34:46 <Igloo> I think cook might have got that one right
05:35:19 <dark> Igloo: When you have build systems layered on top of one another, there's always at least one layer that thinks using absolute paths everywhere will simplify things :)
05:35:54 <Igloo> build systems layered on top of each other in what way?
05:36:24 <dark> Igloo: A simple example would be the debian/rules file, which is a build system layered on top of that of the package it builds (usually make)
05:36:33 <Igloo> Euch, these fans are driving me mad
05:37:09 <Igloo> Ah, right, I thought you meant something more directly applicable than that
05:37:21 <dark> Igloo: Another example would be automake, a layer designed to get in the way when you're trying to build things :)  [not the official purpose]
05:38:59 <dark> Igloo: I've seen systems with more than four layers... at some point it gets hard to count :)
05:39:00 <Igloo> Ah, but only having $0 match complete paths means I couldn't do   $0.o $1.p: $0/$1.q
05:39:12 <Igloo> But that looks like a nightmare anyway
05:39:36 <dark> I think you only get the absolute path problem if you have a path-matching wildcard on both ends.
05:39:49 <dark> Hmm... no, if you have more than one of them in one filename :)
05:40:10 <dark> You could do it so that the first wildcard in a filename will match paths, and the rest not.
05:40:43 * Igloo decides the above is a silly thing to want to do anyway so disallowing it is fine  :-)
05:43:23 <shapr> hey, I have a stupid question...
05:43:48 <Igloo> Don't be so hard on yourself, I'm sure you haev *lots* of them  :-)
05:43:56 * shapr laughs
05:44:05 <shapr> that one was so simple I answered it myself...
05:44:16 <Igloo> Ah...what was it OOI?
05:44:56 <shapr> trying to remember the full name of the K&R Ritchie
05:45:36 <Igloo> Ah
05:51:00 <dark> What does OOI stand for?
05:51:06 <Igloo> Out Of Interest
05:51:17 * Igloo ponders regexps over datatypes
05:51:29 <dark> In dutch it's a female sheep :)
05:51:37 <Igloo> Heh
05:52:29 <Igloo> Right, I should disappear
05:53:08 <dark> Well regexps are pretty much designed to work on lists.
05:53:22 <dark> I don't think we have a Haskell implementation of that yet :)
05:54:09 <dark> Though there's probably not much point, a full parser would be more powerful and just as easy to use.  
05:56:16 <dark> Hmm... a lazy regexp matcher that works on [Char] might be interesting.  Making it lazy is the only reason I can think of not to just interface to libpcre :)
06:02:39 <delYsid> heh! lazy regexp sounds cool :)
06:03:03 <dandelion-> what about the Regex module? how is it not what you want?
06:03:13 * dandelion- hopes that was not a stupid question
06:53:56 <dark> dandelion: I don't think the Regex module is lazy, it uses a C library for its matching.
12:38:28 <Verbophobe> Hey all.
12:40:00 <Heffalump> hi
12:40:48 <Verbophobe> How are you?
12:40:52 <Heffalump> not bad
12:44:20 <Verbophobe> Good, good...
12:44:26 <Heffalump> you?
12:44:37 <Verbophobe> I'm discussing math with people who think y = 0 is a function.
12:46:05 <Verbophobe> Idiots...
12:46:15 <Verbophobe> Define a mathimatical function.
12:46:20 <Verbophobe> Anyone can do this..
13:00:03 <dark> Um, y = 0 _is_ a function, in Haskell :)
13:00:10 <Verbophobe> ...
13:00:14 <Verbophobe> I'll give you that.
13:00:21 <Verbophobe> Hehe...
13:00:23 <Verbophobe> Jeez.
13:00:27 <dark> Or rather, it's a function definition.  I guess that makes y the function.
13:01:35 <dark> "a function of what?" the audience asks :)
13:01:57 <Verbophobe> Yeah, yeah...  Don't rub it in...  However, try to pass y=0 as a function to your math teacher, and he'll hunt you down and immolate you...
13:02:35 <Verbophobe> Oh...  I was talking about mathematical functions.
13:03:18 <dark> It's a perfectly reasonable function of y :)
13:03:36 <Verbophobe> A function is something that has only ONE value of y per value of x...
13:04:06 <Verbophobe> y = 0 makes every x have an infinite amount of ys.
13:06:31 <dark> I didn't mention x at all :)  I said it's a reasonable function of y.
13:06:48 <Verbophobe> ...
13:06:57 <Verbophobe> f(x) = o
13:07:12 <Verbophobe> 0*
13:07:12 <Verbophobe> How's that?
13:07:25 <dark> I don't get your notation.
13:07:36 <Verbophobe> It's standard math...
13:07:58 <Verbophobe> Like f(x) = ax^2 + bx + c
13:08:06 <Verbophobe> (Quadratic function)
13:08:14 <dark> Right, but what is "0*"?
13:08:40 <Verbophobe> That's me replacing the "o" (letter) with the number "0".  Typo.  Hehe...
13:08:45 <dark> Oh :)
13:08:52 <dark> Well, if you take y = 0 as a function of y, then you get f(y) = 0
13:10:37 <Verbophobe> Well, listen, I'm using the standard notation here...  If you want y to be the horizontal line, then y = 0 is correct.
13:10:48 <Verbophobe> However, f(y) = 0 still wouldn't be.
13:12:54 <dark> Okay, there are several things here.
13:13:27 <dark> y = 0 is an equation.  If you have two variables (let's call the other one x), then you can use this equation to plot a line.
13:13:44 <Verbophobe> Of course.
13:13:57 <Verbophobe> See, I'm only alluding to that functional notation..
13:14:09 <Verbophobe> I know it's incorrect.
13:14:20 <Verbophobe> I should have said that f(x) = 0 is not a function.
13:14:28 <dark> But you can also define x = f(y), and plot that.  And y=0 is a perfectly reasonable definition for f(y).
13:15:39 <Verbophobe> Of course, but if that were a case, it wouldn't be an actual function.
13:15:45 <Verbophobe> Actually, wait.
13:16:29 <Verbophobe> f(x) = 0 <--- Not good.  f(y) = 0 <---- Good, since, even though all the xs have the same value of y, they only have one.
13:16:36 <dark> I can meet you halfway :)  The line y=0 can't be expressed as a function of x.
13:16:46 <Verbophobe> There.
13:16:58 <dark> f(x)=0 is a function of x, though.
13:17:27 <Verbophobe> It's not...  Because, regardless of the value of x, the same thing is always returned...
13:17:44 <Verbophobe> Well, that, or my math teacher is an idiot, which he very well might be.
13:18:33 <dark> Um, wait.
13:18:48 <dark> y=0 would be plotted exactly on the X axis, right?
13:18:55 <Verbophobe> Yeah.
13:19:03 <dark> So the line y=0 would correspond to f(x)=0, if you're plotting y=f(x).
13:19:15 <dark> That has exactly one value for every value of x.
13:19:35 <dark> You're probably thinking of the line x=0, which you can't express as a function of x.
13:19:39 <dark> I had it wrong, earlier.
13:21:04 <Verbophobe> Nope.  Pull out your calculator...  x = 0 is a horizontal line, and every x has only one y, which is 0.  However, y = 0 is a vertical line, so there' only one value that is returned for any value of x, which is 0, so it's not a function.  Plus, x has an infinity of ys.
13:21:47 <dark> No, this is the mistake I just made :)  x=0 is the line where the displacement along the x axis is always 0, right?  So that's a line along the Y axis.  Vertical.
13:22:08 <Verbophobe> Wait, lemme draw soemthing up...
13:23:14 <dark> The normal way to draw a function is to have a horizontal x axis and a vertical y axis, and to plot y=f(x).  Right?
13:23:52 <pesco> What is all this about?
13:23:59 <dark> pesco: Getting definitions straight :)
13:25:45 <dark> pesco: It wasn't helped by me thinking of y=0 as a vertical line.
13:25:58 <Verbophobe> http://www.jewcrew.org/~verbophobe/math.png
13:26:12 <Verbophobe> Tell me if that helps.
13:26:39 <Verbophobe> Well, that's a little incorrect.
13:26:49 <dark> Verbophone: Yeah it makes it clear :)  You have your red and blue reversed.
13:26:53 <Verbophobe> Assume that the axises are at, like, -1...
13:27:11 <pesco> Verbophobe: Can you restate the problem?
13:27:32 <dark> pesco: I don't think we have stated it the first time yet :)
13:27:52 <Verbophobe> dark: Yeah, I do have 'em reversed...
13:27:55 <Verbophobe> Shit.
13:28:42 <Verbophobe> dark: Actually, I don't.
13:28:46 <Verbophobe> Wait..
13:28:47 <Verbophobe> I do.
13:28:50 <Verbophobe> Yeah
13:29:00 <Verbophobe> Now I'll go drink some mercury, care to join?
13:29:08 <dark> Verbophone: So, if we correct for this, then you started by saying "x=0 (a vertical line) does not represent a function".  And I said, "it does, if it's a function of y".
13:29:27 <Verbophobe> Yeah.
13:29:28 <dark> Verbophone: And all the confusion will never have happened :)
13:29:37 <Verbophobe> Hehe...
14:23:01 <dark> Hmm, I haven't coded in a whole week.  Maybe I have programmer's block.
14:24:03 <Verbophobe> Happens.  Do some bash.
14:24:15 <Verbophobe> Like, fuck around with sed. That's seriously fun.
14:24:22 <Verbophobe> And I'm not kidding.
14:24:29 <dark> Heh, that always reminds me of the Unix Hater's Handbook.
14:24:49 <Verbophobe> Never heard of it...  Have a link?
14:25:31 <dark> Hmm I googles for the quote just now, and it seems that the quote is actually older, and the Handbook garbled it a bit.
14:25:36 <dark> The real thing seems to be:
14:25:56 <dark> Some people, when confronted with a Unix problem, think "I know, I'll use sed." Now they have two problems.
14:26:18 <Verbophobe> Hehe.
14:26:29 <Verbophobe> I need a link to that handbook.
14:26:53 <dark> Anyway, I do a lot of bash stuff at work, I don't count it as coding :)
14:27:12 <dark> Actually that's sh stuff, because it's supposed to work on Solaris.
14:27:32 <dark> Verbophobe: Maybe you need a copy :)
14:27:54 <Verbophobe> Looks good!  I'm googling for it right now...
14:28:07 <dark> Verbophobe: Their example of the "sed" problem was silly, though, they came up with this four-line monster for something that can be done with a short pipe.
14:28:44 <dark> Verbophobe: I think the problem was "list every .el file in this directory that doesn't have a corresponding .elc file."
14:29:05 <Verbophobe> Hmmm..
14:33:31 <dark> It can be done with a four-stage pipeline, one of which is a sed with a single substitution :)
14:33:46 <Verbophobe> Crap, I gotta go.
14:33:57 <Verbophobe> I will check out their frivolous claims, however.
14:33:59 <Verbophobe> Later.
14:34:02 <dark> Have fun :)
15:11:06 <Heffalump> 'lo
15:11:17 <pesco> Yes.
15:11:23 <Heffalump> no?
15:11:27 <pesco> Why
15:11:48 <Heffalump> What
15:11:59 <pesco> What's up? Sorry.
15:12:07 <Heffalump> :-)
15:12:15 * Heffalump stops being silly
15:16:18 <pesco> I just read Ken Shan's remark about complex expressions as infix operators. That's the kind of stuff you want for a conversation over a nutricous breakfast.
15:16:36 <pesco> (The remark appeared on haskell@haskell.org)
16:24:45 <dandelion-> does anyone know of any attempt to program object-oriented style in haskell?
16:24:57 <dandelion-> i mean stateful objects, being treated with methods
16:25:17 <dandelion-> as in a world of different objects communicating with each other
16:25:35 <Heffalump> well, type classes provide a semi-OO type style
16:26:04 <dandelion-> Heffalump: do they? they provide inheritance, but i don't see how they provide anything like state
16:26:29 <dandelion-> i mean, i can't imagine object-oriented programming without state within objects
16:26:39 <Heffalump> they don't actually provide inheritance
16:26:44 <dandelion-> the object being "autonomous" in some sense
16:26:55 <dandelion-> well, you are right about that, i think
16:26:59 <dandelion-> they don't
16:27:10 <Heffalump> state is just the current value of the object
16:53:47 <Pseudonym> There's state and there's state.
16:54:24 <Heffalump> this is true.
16:54:34 <Pseudonym> Consider, for example, the usual Erlang idiom.
16:54:48 <Pseudonym> In Erlang, if you want an object, you spawn a thread.
16:54:59 <Pseudonym> The object's interface is all inter-thread communication.
16:55:16 <Pseudonym> And the "object state" is just passed around as a parameter in the message loop.
16:55:39 <Pseudonym> I should also point out that there's OO style and there's OO style.
16:56:02 <Pseudonym> Local state is only one part of OO design.
16:57:05 <Pseudonym> Haskell doesn't really support this paradigm yet.  You can do it, but it's not "safe" in that you can use old incarnations of an object.
16:57:18 <Pseudonym> For some, this is a good thing.  For others, it's not.
16:57:28 <Pseudonym> Haskell, IMO, really needs linear types.
16:57:41 <Heffalump> there's the ST monad
16:58:07 <Pseudonym> There is, but when you require a monad to use a data type, that dominates your code from then on.
16:58:35 <Heffalump> this is true
16:58:58 <Pseudonym> As it turns out, most nontrivial Haskell code is going to be monadic in style anyway, at least at the higher levels.
16:59:28 <Pseudonym> But data structures, I think, are sufficiently fundamental that it shouldn't be necessary to pass a state monad around.
16:59:49 <dandelion-> linear types? like in clean? or do you mean something else again?
16:59:56 <Pseudonym> Like in Clean, yes.
17:00:40 <Pseudonym> Linear types enforce the idea that once an object has been mutated, the "old" version is no longer valid.
17:01:12 <Heffalump> they enforce something stronger than that, don't they?
17:02:11 <Pseudonym> Yes, but for OO style, I think this is the key property you need.
17:02:23 * Pseudonym could be wrong on this
17:02:42 <Pseudonym> I think the difficulty with linear types, though, is putting them in another data structure.
17:03:01 <dandelion-> why haven't linear types been introduced in haskell if they are all good?
17:03:04 <Pseudonym> That's certainly the problem with Mercury's mode ssystem.
17:03:59 <Pseudonym> Well they might complicate other parts of the type system which are already there.
17:04:09 * Pseudonym isn't a type theorist
17:16:49 <dandelion-> thank you for your comments
23:31:13 * shapr bounces
23:32:04 <Jii> howdy-dowdy shapr
23:32:11 <shapr> hii jii
23:41:41 <hornby> hey shap
23:42:28 <shapr> hiya hornby
23:45:21 * SamB is away: sleep
23:54:44 <jens> hi, shapr
23:55:19 <jens> about a week until the contest starts!
23:57:16 <Pseudonym> Have you got enough people?
23:58:08 <jens> good question - well i dunno what is enough
23:58:35 <jens> there seems to be a handful of people showing interest, but let's you what happens :)
23:59:38 <jens> Pseudonym: do you have time to join in the fun?
23:59:44 <Pseudonym> I blame the wiki.  It seems like as good an excuse as any.
