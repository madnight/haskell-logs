01:57:22 <PMode> re
01:57:33 <PMode> how is it going on?
05:00:04 <Heffalump> hi
05:00:29 * shapr boings
05:00:41 <pesco> Hey, get back to work! ;-)
05:00:44 * shapr grins
05:02:27 <PMode> hi shapr 
05:02:29 <shapr> hi PMode
05:03:52 <PMode> *coding* ;)
05:17:21 <JC_freak> hey pplz
05:17:41 <shapr> hiya
05:18:00 <JC_freak> heffalump: do u have the log file from the other day?
05:18:58 <Heffalump> no
05:19:12 <Heffalump> but see the URL in the topic
05:19:30 <JC_freak> theres 2
05:19:41 <JC_freak> oh i c
05:19:47 <Heffalump> well, pick the one that makes sense for what you want
05:20:26 <JC_freak> yea i got it
05:20:43 <JC_freak> thanks
05:20:56 <JC_freak> how come there's no ops?
05:21:34 <shapr> don't need 'em
05:21:41 <shapr> freenode has services
05:21:56 --- mode: ChanServ set +o Heffalump
05:22:26 <Heffalump> wow, it opped me
05:22:30 <Heffalump> :-)
05:22:32 <JC_freak> oh
05:22:34 * shapr grins
05:22:53 <JC_freak> what did u do?
05:22:56 <JC_freak> indentify?
05:23:19 <shapr> Heffalump: you have access level 39 on #haskell
05:23:28 <Heffalump> cool. what's that mean? :-)
05:23:30 <smkl> to have ops, you need to pay $10 to lilo per month ... the secret of ops
05:23:44 <shapr> smkl: HEH
05:24:08 <shapr> Heffalump: means you can get ops, change channel modes, kick/ban/etc people, all that kind of stuff.
05:24:23 <shreya> I got some weird type error today on haskell
05:24:31 <shreya> if I did 1.0 / (2.0 * n + 1.0)
05:24:34 <shreya> it treated that as an int
05:24:40 <shreya> but if I did 1.0 / blah
05:24:53 <shreya> where blah = (2.0 * n) + 1.0
05:24:59 <shapr> on freenode, each channel has a founder, and that founder can give privs to other (responsible) people
05:25:00 <shreya> it treated it like a double
05:25:39 <shreya> *eww at the name freenode* :/
05:26:05 <shapr> I liked openprojects more because of the open source reference, but hey, whatever works.
05:30:34 <JC_freak> hey can haskell do multiline output?
05:31:45 <Heffalump> of course it can
05:32:38 <JC_freak> is it diff coding?
05:32:59 <Heffalump> no
05:36:43 <JC_freak> what would the command look like?
05:37:38 <Heffalump> go and read about the IO monad
05:37:49 <JC_freak> is that a function?
05:37:52 <Heffalump> no.
05:38:16 <JC_freak> hmm ok
05:38:31 <JC_freak> i was just wondering
05:40:29 <clinton_> how do I get ghc to increase the stack space allocated to a compiled program... when the stack fills, it exits and gives the message "Stack space overflow: current size 1048576 bytes. Use '+RTS -Ksize' to increase it". However, passing +RTS -Ksize to ghc only seems to effect its own stack space, not the stack space of the program it produces.
05:40:49 <shapr> clinton_: ghc 5.04 has a problem with that
05:40:57 <shapr> 5.04.1 should fix it
05:41:13 <Heffalump> you have to actually call the compiled program with the +RTS -Ksize thing
05:41:14 <shapr> for example, I can't compile Peter Thiemann's WASH-CGI with ghc5.04 for that reason
05:41:33 <Heffalump> shapr: I think he's asking a different question to the one you're answering
05:43:05 <clinton_> hmmm, would passing those options to the program work?
05:43:18 <Heffalump> clinton_: should do, yes
05:43:31 <Heffalump> any ghc compiled program takes RTS options like that, AIUI
05:43:58 <shapr> oh, oops
05:44:33 <clinton_> but, aside from the bug in ghc 5.04, ghc should also take options like that?
05:44:51 <Heffalump> yes
05:45:04 <Heffalump> and ignore the bug, AFAIK it only bites when compiling WASH-CGI
05:45:33 <shapr> Heffalump: nah, it's more general than that
05:45:47 <clinton_> it bites running my program.
05:45:51 <shapr> I forget the exact conditions, but ghc-users talks about it.
05:46:04 <Heffalump> shapr: is it just when compiling, or when running programs too?
05:46:12 <shapr> only when compiling
05:46:26 <shapr> therefore, it's not clinton_'s problem
05:46:26 <Heffalump> clinton_: ok, so the problem you have is /just/ that you don't have enough stack space :-)
05:46:29 <shapr> doh
05:47:32 <clinton_> doesn't the bug prevent me from changing the stack space?
05:47:45 <Heffalump> no.
05:47:48 <clinton_> during compliation.
05:48:09 <clinton_> or is there no way to change default stack space?
05:48:09 <Heffalump> the +RTS -K option to ghc changes the stack space GHC has available to compile your program with
05:48:18 <Heffalump> there isn't a way to change default stack space, AFAIK
05:48:29 <Heffalump> you have to make a wrapper script for your program that calls it that way
06:09:09 * Jerub just applied a smackdown to someone who decided haskell was being ''too clever by half'' for detecting a type inference of integer (she was using +) in a function she wrote.
06:09:34 <shapr> heh
06:09:36 <Heffalump> :-)
06:09:55 <shapr> imho, type inferencing is awesome
06:10:11 <shapr> it gives me all the advantages of static typing with all the advantages of Python
06:10:17 <shapr> I call it "dynamic static typing"
06:10:39 <Jerub> shapr: I pasted a java example of exactly the same thing public int foo(Object a, Object b) { return a + b; }
06:10:56 <shapr> yah, but there's a difference there
06:11:12 <Jerub> there is, but I wasn't going to go into it.
06:11:15 <shapr> ok :)
06:14:57 <Jerub> icfp looks tempting. but I've got other stuff I should be doing.
06:15:35 <shapr> we've been organizing our team for months, we have cvs, mailing-list, irc channel, and six? people on the team
06:16:03 * Jerub laughs.
06:16:13 <Heffalump> "organizing it for months" is putting it a bit strongly
06:16:25 <Jerub> no - not to actually enter anything. just have a gander, see what people are doing.
06:17:00 <shapr> Heffalump: well, I've been asking people to join the team once a week for what feels like months :-)
06:17:49 <Jerub> Its defaintely been months, I've been here for over 2 and the url was in the topic since day 1.
07:39:54 <delYsid> shapr: Are you using vi these days? :)
07:41:37 <shapr> delYsid: no way
07:41:56 <shapr> delYsid: hey hey, icfp is hopping =)
07:43:17 <delYsid> oh, I forgot, cool
07:43:23 <delYsid> Any url for me ?
07:43:54 <shapr> http://icfpcontest.cse.ogi.edu/index.html
07:46:49 <shapr> delYsid: we're hacking away on #haskell-icfp
07:46:49 <delYsid> ahh, I see, shortest path first :)
07:47:03 <shapr> yah, with some cute additions
08:11:45 <delYsid> hmm, yeah, I imagine one could implement cute tricks to drown the oponent robots
08:12:01 <delYsid> And one would need to prevent getting in a push-and-drown situation
08:12:59 <dark> Wrong channel :)
08:13:45 <shapr> delYsid: yah, that's the kind of stuff we've thought about
08:38:22 <shapr> sorry PMode, no impoliteness intendend
08:38:34 <shapr> we just don't want to violate any contest rules....
08:45:39 <dark> Heh, since the contest started this channel has gone completely silent, except for the occasional leaks from #haskell-icfp.
08:46:14 <shapr> #haskell-icfp has had 3344 lines of text go past since its creation
08:46:43 <shapr> that creation was yesterday, just a bit before the contest started.
09:03:12 <PMode> jewel: hi, what information do you want?
09:03:15 <PMode> jewel: is there a god? what is the sense of the life? are there aliens?... *g*
09:03:42 <dark> Oh, *easy* questions.
09:04:12 <Heffalump> :-)
09:04:19 <jewel> hehe
11:32:15 * shapr grumbles
11:32:26 <shapr> anyone done ghcprof stuff recently?
11:32:40 <shapr> does it work with daVinci 3.0?
11:32:44 <shapr> is there something better?
12:00:55 * shapr fights ghcprof
12:01:04 <Heffalump> bad timing...
12:01:11 <shapr> yah really :)
12:14:44 <shapr> any ghc profiling experts here?
12:14:58 <shapr> I can get +RTS -h to work
12:15:22 <shapr> but -p, -P, and -xc all leave empty .prof files
12:15:48 <Heffalump> did you compile for profiling?
12:16:00 <shapr> yup
12:16:24 <shapr> ghc -prof -auto-all --make
12:16:25 <shapr> right?
12:20:21 <Heffalump> think so
12:20:34 <shapr> yup, did that.
12:20:57 <shapr> I tried the profiling options with "+RTS $OPT" and with "+RTS $OPT -RTS"
12:21:02 <shapr> always behave the same way.
12:57:11 <PMode> re
12:57:49 <shapr> y0
12:58:05 <PMode> haskell isn't easy :)
12:58:30 <PMode> kilometres long parameter lists.
12:59:34 <PMode> ciao
13:06:55 <dark> Sheesh, leaving right after saying such hurtful things about Haskell.
13:07:22 <Heffalump> lol
13:08:44 <dark> Speaking of hurtful, ghc is telling me that there's no instance of Enum (Int, Int).
13:09:31 <dark> I don't know how to deal with my (Int, Int) array without that :)
13:10:29 <dark> Oh, cool, I should be using Ix's range function.
13:10:51 <dark> Hmm, there seems to be overlap between the concepts of Ix and Enum.
13:23:19 <dark> Ooh, I get to do actual algorithm design now :)
13:23:50 <dark> I have a terrain map with features, some of which are walls.  I'd like to use line-drawing characters for the walls, which means that each wall's glyph depends on the squares around it.
20:28:01 <shapr> g'night all
20:28:05 <Verbophobe> Night.
21:21:55 <toadx> yuck.
21:22:21 <Verbophobe> Yuk?
21:22:25 <Verbophobe> Yuck!
21:24:52 <toadx> I have a list ["Hi 50A", "Hi 60PL", "Hi 500V"] which I am trying to sort 'alphabetically',so technically, the list should then be ["Hi 50A", "Hi 500V", "Hi 60PL"]. But for readability, I think I want ["Hi 50A", "Hi 60PL", "Hi 500V"], because you are used to seeing numbers sorted numerically, not 'alphabetically'
21:25:18 <toadx> (that is, of course, a sample list, the real list has hundreds of entries)
21:26:04 <Heffalump> hmm, messy
21:26:34 <toadx> But doing the list the 'readable' way is not that easy because there are lots of special cases. So you would need someone with intelligence to do it 'perfectly'
21:27:09 <Heffalump> well, tokenize into strings and numbers
21:27:43 <Heffalump> so [["Hi ",50,"A"],["Hi ",60,"PL"],["Hi ",500,"V"]]
21:27:54 <Heffalump> but yeah, I can imagine there are more cases to worry about
21:27:56 <Heffalump> like spaces and so on
21:28:44 * Heffalump goes to bed
21:29:32 <toadx> actually, it does not look like there are that many special cases, maybe I will just tokenize it
21:30:35 <toadx> I think I want to make versions of '>' and '<' that do that
21:30:55 <toadx> Maybe someone has already done it for me ;)
21:50:43 <hornby> whoo, hows the contest going? 
