00:01:23 <xxPete> aren't we going to have to supply the nodes and probs to that function?
00:01:39 <Pseudonym> Sure.  We could put it in a where clause or something.
00:01:46 <xxPete> kk
00:01:49 <Pseudonym> We just need the probabilities, BTW, not the nodes.
00:02:18 <xxPete> k
00:02:32 <Pseudonym> So let's say we have probabilities :: [Float]
00:02:50 <xxPete> yep
00:03:12 <Pseudonym> And we need to make p :: Int -> Float where p i = sum (take (i+1) probabilities)
00:03:37 <Pseudonym> That's actually an implementation right there, but it's not the one I need to illustrate.
00:04:27 <Pseudonym> Let's make a list ps :: [Float] where ps = [ p i | i <- [0..length probabilities - 1]
00:04:56 <Pseudonym> then ps !! i = ps !! i-1 + probabilities !! i
00:04:58 <Pseudonym> Do you agree?
00:05:59 <Pseudonym> You know about the (!!) operator?
00:06:13 <xxPete> I haven't come across it before
00:06:21 <Pseudonym> [1,2,3] !! 0 == 1
00:06:26 <Pseudonym> [1,2,3] !! 1 == 2
00:06:31 <Pseudonym> It's the list subscript operator.
00:06:45 <Pseudonym> "Hello world" !! 4 == 'o'
00:07:16 <xxPete> ok, so ps !! i =  means element ps(i) =
00:07:51 <Pseudonym> It's the ith element of ps (starting at 0 because we're computer scientists and we start counting at 0).
00:08:12 <xxPete> yep, sort of like arrays in c and java
00:08:49 <Pseudonym> Right.
00:09:01 <Pseudonym> So you could actually write:
00:09:11 <xxPete> where in c I'd write ps[i] = ps[i-1] + probList[i];
00:09:18 <Pseudonym> Right.
00:09:23 <Pseudonym> In Haskell, you could write this;
00:09:41 <xxPete> won't that have issues when it tries to work out ps[0];
00:09:55 <Pseudonym> ps = [ p i | i <- [0..length probabilities - 1] ]
00:10:09 <Pseudonym>      where p 0 = probabilities !! 0
00:10:30 <Pseudonym>            p i = ps !! i-1 + probabilities !! i
00:10:41 <Pseudonym> Actually, make that:
00:10:45 <Pseudonym>            p i = ps !! (i-1) + probabilities !! i
00:10:56 <Pseudonym> Forgot my operator precedence for a moment.
00:12:25 <Pseudonym> Can you wrap your brain around that?
00:12:37 <xxPete> still working at it...
00:12:48 <Pseudonym> The key thing here is the mutual recursion.
00:12:58 <Pseudonym> ps is defined in terms of p, but p is defined in terms of ps.
00:14:27 <xxPete> my poor poor brain =(
00:15:37 <Pseudonym> Anyway, the reason this works is that the elements in ps aren't actually evaluated until you need them.
00:16:15 <Pseudonym> It's kinda tricky, but I have a feeling that it's this sort of way that they want you to solve the problem.
00:16:30 <xxPete> k
00:16:42 <Pseudonym> Fill in the table, where some elements of the table refer to other elements, then just extract one element.  Lazy evaluation does the rest.
00:17:57 <xxPete> What are the chances of getting you to run me through that again?
00:18:29 <Pseudonym> Look at the code:
00:18:34 <Pseudonym> ps = [ p i | i <- [0..length probabilities - 1] ]
00:18:39 <Pseudonym>      where p 0 = probabilities !! 0
00:18:45 <Pseudonym>            p i = ps !! (i-1) + probabilities !! i
00:19:12 <Pseudonym> I'm not advocating that you actually use list subscripts in your code, by the way.
00:19:34 <Pseudonym> Just look at the definition of p by itself.
00:19:36 <Pseudonym> Does that make sense?
00:21:21 <xxPete> ok probabilities is a list full of floats for the prob of nodes 0-n
00:21:27 <Pseudonym> Right.
00:22:00 <xxPete> aren't u setting i to be a list of probabilities?
00:22:16 <Pseudonym> No, that's a list comprehension,.
00:22:27 <xxPete> sorry.. like a for loop
00:22:28 <Pseudonym> i is "drawn from" the list
00:22:54 <Pseudonym> Basically, i means ps = [ p 0, p 1 ... p (length probabilities - 1) ]
00:23:02 <xxPete> kk, not exactly a for loop
00:23:12 <Pseudonym> No.  It's a comprehension
00:23:50 <Pseudonym> The closest thing to it in a conventional language is an "iterator", if you know what that means.  If not, don't bother.
00:24:04 <xxPete> I know what an iterator is =)
00:24:09 <Pseudonym> OK, cool.
00:24:29 <xxPete> that 0..length thing, is that actual haskell code?
00:24:37 <Pseudonym> Yes.
00:24:53 <Pseudonym> Try it in hugs/ghci/whatever you're using.  Type [0..5]
00:25:26 <xxPete> pretty neat
00:25:43 <xxPete> u would have to define length and probabilites elsewhere?
00:25:53 <Pseudonym> The length function is in the prelude.
00:26:01 <Pseudonym> Try: length [0..100]
00:27:16 <xxPete> ok so the c comparison would be for(int i = 0; i < probabilities.length() ; i++)
00:27:26 <Pseudonym> Kind of.
00:27:33 <xxPete> I know it's not a for loop.. but it will work like one because the list is all integers incremented by 1
00:27:52 <xxPete> and it should be length() -1
00:28:05 <Pseudonym> It's really that i iterates over the list [0..length probabilities-1]
00:28:07 <xxPete> is that right?
00:28:13 <Pseudonym> But you've got the general idea.
00:28:32 <Pseudonym> In fact it's completely unlike the C code, but I know what you mean.
00:28:46 <Pseudonym> :-)
00:28:59 <xxPete> I am much better in java and c then in haskell =)
00:29:16 <Pseudonym> How long have you been doing Haskell?
00:29:29 <xxPete> couple of weeks
00:29:29 <Pseudonym> ("Doing" makes it sound like an illicit pharmeceutical.)
00:29:46 <Pseudonym> Geez, they've really thrown you in at the deep end, haven't they?
00:30:12 <xxPete> yeah, I don't mind that though.  You learn faster if it's swim or drown
00:30:22 <Pseudonym> Is this one of those subjects where they give you a brief tour of a whole lot of languages without actually getting familiar with any of them?
00:30:42 <xxPete> nah, we are only doing Haskell
00:30:51 <xxPete> they've been rambling on about functional languages for a while
00:31:02 <xxPete> now they've got us playing with one
00:32:46 <Pseudonym> Anyway, the thing is you fill the list, ps, with these calls to p.
00:33:02 <Pseudonym> The calls aren't actually evaluated until you need an element of the list.
00:33:15 * Pseudonym assumes you've heard about lazy evaluation
00:33:29 <xxPete> Have now =)
00:33:52 <xxPete> Basically I have a list ps, the elements of which won't be set until I decide to have a gander at them
00:33:56 <Pseudonym> Right.
00:34:25 <Pseudonym> But the tricky bit is that each element refers to the list.
00:34:37 <Pseudonym> Because the function p inspects the elements in the list.
00:35:11 <Pseudonym> Or at least it inspects one element.
00:36:25 <xxPete> yup
00:36:52 <xxPete> so if I have a look at ps !! 4 it will define ps !! [0..3]   ??
00:37:05 <Pseudonym> Yup.  That will happen automagically.
00:37:45 <Pseudonym> Which means you won't have to re-evaluate them.
00:38:15 <Pseudonym> This is, basically, one way to implement dynamic programming.
00:38:29 <xxPete> with the where part
00:38:30 <Pseudonym> The difficulty for you is that you have a two dimensional problem.
00:38:48 <xxPete> I assume it will evaluate from the first where that matches the current conditions?
00:39:07 <Pseudonym> Erm... I don't understand what you just asked.
00:39:18 <xxPete> you've got >   where p 0 = probabilities !! 0
00:39:18 <xxPete> >   p i = ps !! (i-1) + probabilities !! i
00:39:24 <Pseudonym> Yes.
00:39:51 <Pseudonym> The where clause actually defines a function p.
00:40:33 <Pseudonym> p :: Int -> Float
00:40:38 <xxPete> could I wack >   p 3 = probabilities !! 2 in the middle without messing it up?
00:40:51 <xxPete> sorry
00:41:01 <xxPete> could I wack >   p 3 = ps !! 3 + probabilities !! 2 in the middle without messing it up?
00:41:05 <Pseudonym> Yes.
00:41:17 <Pseudonym> You could actually define p as:
00:41:22 <Pseudonym> p 0 = probabilities !! 0
00:41:31 <Pseudonym> p i = p (i-1) + probabilities !! i
00:41:53 <Pseudonym> However.  If you evaluated p 5 and then evaluated p 4, the second call would re-evaluate the sum.
00:42:05 <Pseudonym> Using the list, the value is cached.
00:42:55 <Pseudonym> Lazy evaluation is really trippy the first time you see it.
00:43:08 <Pseudonym> Your program is a huge cyclic graph with arcs pointing all over the place.
00:43:23 <Pseudonym> Running your program basically means modifying this graph.
00:43:59 <Pseudonym> Replacing a call to a function with the result of that call.
00:44:43 <xxPete> sounds kewl
00:44:45 <Pseudonym> I've gotta go.  And I suspect it's 5:45 where you are too.
00:44:48 <Pseudonym> :-)
00:45:01 <Pseudonym> Good luck with it.
00:45:05 <xxPete> Yup
00:45:09 <xxPete> thanks a lot for your help
00:45:12 <Pseudonym> No problem/
00:45:13 <xxPete> you've been a legend!
01:24:08 <xxPete> ne1 here?
02:46:22 <jens> gcc -DHAVE_CONFIG_H -I. -I. -I.. -I.. -I..\gmime -D_REENTRANT -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include       -O2 -mieee -I. -c `test -f 'gmime-message-part.c' || echo './'`gmime-message-part.c
02:46:23 <jens> gmime-message-part.c: In function `g_mime_message_part_class_init':
02:46:23 <jens> gmime-message-part.c:93: warning: assignment from incompatible pointer type
02:46:23 <jens> gmime-message-part.c: At top level:
02:46:23 <jens> gmime-message-part.c:182: conflicting types for `message_part_write_to_stream'
02:47:02 <jens> oooops, sorry about that paste...!
02:53:14 <Heffalump> morning
04:38:45 <Igloo> Interesting: "For fast execution we compile to native code, or to C, or (soon I hope) C--." </SPJ>
04:40:20 <Heffalump> I haven't heard anything about C-- recently
04:40:34 <Heffalump> I guess with the .NET byte code M$ might not have been too keen
04:41:52 <Igloo> Well that was 2 days ago
04:42:04 <Heffalump> oh, on the list?
04:42:11 <Heffalump> I should catch up with that
04:44:25 <jewel> what list is that?
04:44:41 <Igloo> glasgow-haskell-users
04:44:50 <Igloo> Thread "Hardware STG?"
04:48:32 <jewel> excuse my ignorance
04:48:35 <jewel> what is STG?
04:49:08 <Igloo> Spineless Tag Machine
04:49:15 <Igloo> Oh, that doesn't work
04:49:29 <ibid> spineless tagless g-machine
04:49:29 <Igloo> Maybe it's Spineless Tag G-Machine
04:49:41 <ibid> it's tagless
04:49:44 <Igloo> Oh well, close  :-)
04:53:28 <jewel> this is some kind of virtual machine / compiler target ?
04:54:11 <ibid> jagular: stg is the abstract machine for the intermediate code
04:54:55 <ibid> jewel: read spj's book :-) (although the book predates stg, it iirc does describe the original g-machine)
04:55:06 <ibid> s/jagular/jewel/
06:05:47 * jewel puts it on a list of things to read
09:02:37 --- topic: 'We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.2.3 released http://www.cse.unsw.edu.au/~chak/nepal/ || ICFP 2002 contest starts on Friday.'
09:02:37 --- topic: set by shapr on [Tue Aug 27 09:56:54 2002]
11:05:38 * shapr boings
11:06:22 * Igloo bounces
11:06:29 * redcrosse spins
11:06:42 <shapr> hi Igloo!
11:06:46 <shapr> hello redcrosse!
11:07:00 <loom2> hey shapr
11:07:01 <redcrosse> greetings and salutations
11:07:30 <shapr> hi loom2
11:07:34 * shapr bounces
11:07:37 <shapr> the contest approaches
11:07:54 <shapr> I am learning much from this functional Algorithms book
11:08:11 <loom2> shapr: say, where can i subscribe to the #haskell contest mailing list?
11:08:26 <loom2> shapr: which book is it?
11:08:32 <shapr> the mailing list is broken :-/
11:08:41 <loom2> shapr: oh no!
11:09:19 <shapr> I'll send another email to Pseudonym
11:09:31 <shapr> is today really thursday?
11:09:51 <loom2> shapr: yes. the contest is closing in on us.
11:10:39 <loom2> shapr: i haven't been here too often the last weeks. i also need cvs access. can you write that to him, too?
11:11:40 <shapr> contest starts in 25 hours, right?
11:12:26 <loom2> shapr: pesco thinks it's only 24 hours from now.
11:12:26 <shapr> I'll see what I can do
11:12:31 <shapr> hmm
11:13:05 <loom2> shapr: he's sitting next to me, we are preparing, too :)
11:13:10 <shapr> excellent :-)
11:13:18 <shapr> pesco has cvs access, right?
11:13:22 <loom2> yes.
11:13:42 <shapr> ok, if you can't get personal access in time, can you use his?
11:13:58 <loom2> i think so, yes.
11:14:26 <shapr> ok
11:15:39 <shapr> loom2: if you can /msg me your email, I'll forward you some of the icfp mailing list posts
11:15:49 <shapr> specifically, how to get CVS access
11:18:08 <loom2> ok
11:20:13 <shapr> sent
11:21:01 <shapr> The mailing list is broken. I haven't heard from Andrew the last few days, he's the guy who's hosting it. I do know he broke a bone recently, so he might not get to fix it before tomorrow.
11:21:18 <shapr> I wonder if we should set up a mailing list elsewhere?
11:27:08 <shapr> sauna time, bbl
11:27:09 <loom2> we probably should.
11:27:21 <shapr> loom2: any idea who can host the list?
11:27:26 <shapr> well, bbl.....
11:27:28 <loom2> my roommate can
11:27:38 <loom2> ok, see you
11:39:43 * Heffalump probably can
11:41:03 <Heffalump> is Andrew Pseudonym?
11:43:33 <loom2> that's what i heard
11:43:39 <Heffalump> he's been around
11:44:43 <loom2> good
12:22:29 <toadx> I have two lists 'a' and 'b'. I want to remove any elements that appear in list 'a' from list 'b'. I can almost do this: (filter (elem b) a)) except that elem is: elem :: a -> [a] -> Bool, and not elem :: [a] -> a -> Bool
12:22:48 <Heffalump> look at the function flip
12:25:43 <toadx> awesome
12:27:27 * toadx notes that is should be notElem instead of elem
12:27:39 <Heffalump> yeah :-)
12:42:34 <toadx> my program is very broken :)
12:42:43 <toadx> but I think it gets the "right" answer
14:16:14 * shapr bounces
14:22:20 * redcrosse does a 540 mctwist
14:22:32 <shapr> whoa, skater :-)
14:34:40 <dark> skater?
14:35:11 <redcrosse> skateboarder
15:55:35 <toadx> I have a recursive function which reads a tag out of several hundred files, and returns all the tags in a list
15:56:15 <toadx> but it dies because readFile and hGetContents are lazy, so I end up with several hundred open file handles, and then hit some OS imposed limit
15:57:02 <toadx> :(
16:08:30 <Heffalump> you could use seq or similar to force evaluation
16:13:47 <toadx> that did it. Thanks!
17:35:22 <shapr> hi dblack
17:42:45 <shapr> hi jens
17:43:53 <dark> mweep
17:47:17 <dark> The problem with writing a game is that I keep getting inspired to play similar games :)
17:47:27 <dark> Maybe that problem will become a feature once my game is playable.
17:55:17 <shapr> dark: is that your nethask clone?
17:58:00 <dark> shapr: Yeah.  Well, I wouldn't call it that :)
18:00:07 <Heffalump> 'lo
18:00:17 <Pseudonym> G'day.
18:01:05 <dark> My main worry is that I'll end up writing everything with the IO monad.
18:03:51 <Pseudonym> Have you looked at the MTL?
18:04:02 <dark> The what?
18:04:10 <Pseudonym> There's some really handy stuff in there to reduce our dependence on IO.
18:04:16 <Pseudonym> Monad Template Library
18:04:56 <Heffalump> where is it? the top google hit goes to a broken link
18:05:06 <Pseudonym> You're using GHC?
18:05:22 <Heffalump> what I use varies depending on what mood I'm in 
18:05:33 <Heffalump> I prefer to write code that works with GHC and Hugs, though if necessary I'll use just GHC
18:06:24 <Pseudonym> Oh, it comes with Hugs, too.
18:06:30 <Pseudonym> Just I don't think it comes with NHC.
18:07:58 <Pseudonym> I can't find the docs, but it's in -package lang under GHC.
18:09:16 <shapr> hey Pseudonym, the list is still broken.
18:09:26 <Pseudonym> Yes, I know. :-(
18:09:33 <Pseudonym> I may have to reinstall mailman.
18:09:37 <shapr> suckage
18:09:46 * Pseudonym will back up the mailing list first
18:09:56 * shapr realizes it's time to sleep
18:10:03 <shapr> g'night all, tomorrow is contest day!
18:10:06 <Pseudonym> I'll send an email when it works. :-)
18:10:11 <shapr> Pseudonym: cool :-)
18:10:16 * shapr goes to sleep
18:10:17 <Pseudonym> If you get it, it works.
18:10:19 <Pseudonym> Night.
18:11:15 <dark> Do you mean the stuff in Control.Monad?
18:12:52 <Pseudonym> No, I mean MonadCont, MonadRWS, MonadError and so on.
18:13:16 <Pseudonym> Oh, hmm.
18:13:32 <Pseudonym> Yes, I guess I do.
18:13:54 <dark> I have peered at those before, but they're incomprehensible without docs :)
18:15:20 <Pseudonym> Do you know about monad transformers?
18:17:21 <dark> Hmm, no.
18:18:32 <Pseudonym> Basically, monad transformers are monads which "piggyback" on other monads.
18:19:44 <Pseudonym> So if you need state and exceptions and IO, you can do that by piggybacking an exception monad on top of a state monad on top of an IO monad.
18:20:00 <Heffalump> this being rather pointless since IO provides the lot :-)
18:20:07 <Pseudonym> Well yes. :-)
18:20:19 <Heffalump> but piggybacking state and exceptions on lists can be useful
18:20:19 <Pseudonym> Though IORefs, IMO, aren't as useful as they're cracked up to be.
18:20:31 <Heffalump> but STtoIO exists :-)
18:20:43 <Heffalump> or do I mean the other way around
18:20:47 <Heffalump> whichever one is safe, anyway
18:20:53 <Pseudonym> I think it's the other way around.
18:21:02 <Pseudonym> Though you might be right.
18:21:07 <Pseudonym> I know what you mean, anyway.
18:21:08 <dark> Pseudonym: Interesting, last night I ended up hacking all IORefs out of a module :)
18:21:13 <Pseudonym> :-0
18:21:15 <Pseudonym> :-), too
18:21:27 <Pseudonym> IORefs should be members of Ord, IMO.
18:21:33 <Heffalump> could you stick me (ganesh@earth.li) on the ICFP contest list, btw?
18:21:48 <Heffalump> I'm still not sure if I'll have time to participate but I might
18:22:02 <Pseudonym> I'll /msg you my email address.  Send me a mail to remind me.
18:22:09 <Heffalump> 'k
18:22:24 <Pseudonym> The list is currently broken, and there's no point adding you until it isn't. :-)
18:22:32 <Heffalump> do you run the CVS server too?
18:22:36 <Pseudonym> Yes.
18:22:53 <Pseudonym> Send me your preferred user name and a Unix-crypted password.
18:23:08 <Heffalump> do you want the password to be strong?
18:23:24 <Pseudonym> http://alicorna.net/passwd_crypt will crypt it for you if you want it.
18:23:33 <Pseudonym> No, it need not be strong, especially since I'm going to see it.
18:23:47 <Pseudonym> It's mostly so that other teams don't get your code/
18:23:48 <Heffalump> well, I mean it'll be something that could be easily cracked, if that's ok
18:23:57 <Pseudonym> So it has to last the weekend. :-)
18:24:33 <Heffalump> ok :-)
18:24:50 <Heffalump> I can't see anyone trying seriously to break in
18:24:50 <Pseudonym> Even if I can't fix the mailing list and you guys have to use the IRC channel, at least you should have CVS access.
18:24:50 <dark> Hm.  If you mean the normal DES-based algorithm, then no password will last the weekend if the EFF is participating :)
18:25:00 * Pseudonym laughs
18:28:03 <Heffalump> you did mean a DES crypt not an MD5 one, didn't you?
18:28:18 <Pseudonym> Yes.  The standard salted DES crypt.
18:28:32 <Pseudonym> Grab http://alicorna.net/passwd_crypt if you like.
18:29:02 <Heffalump> it's ok, just checking
18:29:24 <Pseudonym> dark: http://citeseer.nj.nec.com/liang95monad.html
18:29:24 <Heffalump> perl -e'print crypt(...  IMF :-)
18:29:29 <Pseudonym> Excellent paper.
18:30:02 <Pseudonym> Right.  That's pretty much what the passwd_crypt script does, except it grabs the salt from /dev/random if it exists or rand() if it doesn't.
19:07:02 <Pseudonym> Who here is on the icfp-team mailing list?
19:09:17 <Heffalump> I am now :-)
19:10:41 <Pseudonym> Let me know when you get the test mail.
19:13:52 <Heffalump> got it
19:14:03 <Pseudonym> Cool.  Now for the CVS thingies. :-)
19:18:27 <Pseudonym> Done.  And now, lunch.
19:19:53 <Heffalump> your instructions are missing a get :-)
19:22:46 <Pseudonym> ?
19:23:08 <Pseudonym> Where?
19:25:38 <Heffalump> between cvs and icfp2002 on the second line
19:27:06 <Pseudonym> Oh. :-)  Missing a co.
19:27:14 <Pseudonym> Thanks.  Instructions updated.
19:27:21 <Pseudonym> Everyone seemed to work it out without that, though.
19:27:37 <Pseudonym> NOW lunch./
19:29:41 <Heffalump> enjoy
20:27:18 <Heffalump> hmm, RPMs of GHC don't lend themselves to clean installation of new packages
21:02:00 * Heffalump fixes this by building a HaXml RPM for ghc
