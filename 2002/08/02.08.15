01:07:28 <shreya_> lol I like that Nepal project
01:07:31 <shreya_> <-- born in Nepal
01:07:56 <shreya_> I don't have a clue what the ne--- parallel language is however :P
01:08:03 <shreya_> Can't even remember the first word :|
01:09:01 <pesco> nested?
01:11:50 <ChilliX> shreya_: nested parallel language as it features nested data-parallelism expressed by way of nested array expressions
01:12:07 <pesco> knew I'd heard it somewhere ;)
01:12:24 <shreya_> ChilliX, all that goes in one ear and out the other for me :P
01:12:34 <shreya_> I am not much of a programmer yet
01:12:56 <ChilliX> think somthing that looks a lot like nested lists in Haskell
01:13:06 <shreya_> ah ok I know what that is
01:13:15 <ChilliX> but with array-ish constant time access to elements
01:13:21 <shreya_> [[a]]!
01:13:22 <shreya_> lol
01:13:47 <ChilliX> and the operational constraint that collective operations on these things (eg, stuff like map) processes all elements in parallel
01:14:59 <pesco> ChilliX: I suppose the performance-hit on uniprocessor systems is pretty low (negligable usually)?
01:15:49 <ChilliX> preso: we actually found so far that the same approach leads to much faster code on uniprocessors, too (when compared to Haskell standard arrays or lists)
01:16:05 <pesco> Hooh! Do you know why that is?
01:16:11 <ChilliX> (faster as in several factors faster)
01:16:20 <pesco> *gulp*
01:16:33 <ChilliX> essentially because less intermediate data structures are used and caches are used more efficnetly
01:16:46 <ChilliX> look at it like this
01:17:11 <ChilliX> a distributed-memory parallel machine is just like a uniprocessor machine with one more level in the memory hierachy
01:17:25 <ChilliX> (ie, remote memory is even slower than local main memeory)
01:17:32 <pesco> Ah ok.
01:18:04 <ChilliX> conceptually, any technique that optimises for locallity in the extended mem hierachy will do so for the standard one, too
01:19:41 <pesco> Why can't the same optimization be achieved on standard arrays?
01:20:47 <ChilliX> two reasons
01:21:04 <ChilliX> the interface is inherently inefficient, as it defined arrays via lists
01:21:14 <pesco> hrm
01:21:39 <ChilliX> eg, the "array" function gets a list where the list elements are not necessarily in the order in which they appear in the array
01:21:48 <ChilliX> from a locality point of view, this is deadly
01:22:05 <ChilliX> secondly, standard arrays are lazy
01:22:24 <ChilliX> => they need to represent everything by way of boxed arrays
01:22:41 <ChilliX> for good performance in array codes you need unboxed arrays
01:22:57 <ChilliX> which implies a parallel evaluation semantics
01:23:10 <pesco> by "unboxed arrays" you mean arrays containing unboxed elements?
01:23:11 <ChilliX> ie, when you touch one element of an array, all of them will be evaluated
01:23:15 <ChilliX> yes
01:23:17 <pesco> ok.
01:23:32 <pesco> I see.
01:23:52 <ChilliX> in other words, standard array have a nice and semantically elegent interface
01:24:05 <ChilliX> but it has rather unfortunate operational implications
01:24:58 <pesco> So this means that I should use your cool parallel arrays whenever I discouver (so-far implicit) parallelism in my data?
01:25:09 <pesco> discover
01:26:09 <ChilliX> in array code written in a functional style, there is usually plenty of parallelism
01:26:26 <pesco> I guess.
01:26:26 <ChilliX> because you don't use elementwise updates, but collective ops like map, fold, and friends
01:27:07 <ChilliX> but it of course still depends on the concrete algorithm
01:28:33 <pesco> Can you give an example of a data-parallel algorithm for which standard arrays would be more suitable?
01:29:32 <ChilliX> standard arrays are needed only when you exploit laziness, like in some wavefront algorithms
01:29:53 <ChilliX> where array elements are defined in terms of other elements in the same array
01:30:14 <pesco> Ah, ok. What are wavefront algorithms?
01:30:34 <pesco> .oO(forget web-surfing, this is discussion-surfing!)
01:31:29 <ChilliX> see, eg, the "wavefront" function in http://www.haskell.org/tutorial/arrays.html
01:31:46 <pesco> Sending to GNOME URL handler... :)
04:35:00 <Igloo> Has anyone had any experience with DAGs in Haskell?
04:37:09 * Igloo is being unconvinced that FGL will be any good for them and is thinking an Array or two is the way forward
05:16:52 <Heffalum1> have you read the Launchbury and King paper about doing DFS in Haskell?
05:17:09 <Heffalum1> (obviously it depends what kind of traversals you actually need)
05:19:20 <Igloo> I think the FGL paper covers their algorithm, and I just scanned through that. I think actually building the DAG with their method would be very slow, though
05:20:11 <Heffalump> what do you need a DAG for, OOI?
05:20:36 <Heffalump> you could do it in ST and use STRefs, of course
05:21:48 <Igloo> I was just pondering a build tool in Haskell
05:22:05 <Igloo> But I've gone back to thinking about scons again now  :-)
05:46:16 <Jii> i have never used it, is it any good?
06:30:03 * pesco bounces!
06:30:33 <pesco> Woohoo, I have just discouvered the "gap" feature of Haskell string literals.
06:30:39 <pesco> This is extremely cool.
06:30:43 <Heffalump> the what?
06:31:06 <pesco> My error code will finally look the way I want it to.
06:31:23 <pesco> putStr "This is a \
06:31:32 <pesco>     \very long string."
06:31:56 <pesco> outputs "This is a very long string."
06:32:49 <pesco> In general, "blahblah\    <somewhitespace>    \moreblahblah" is equivalent to "blahblahmoreblahblah"
06:34:12 <pesco> Do you know whether it is ok to touch the still-working Haskell Wiki pages or whether that would just break those, too?
06:35:12 <Heffalump> how many of them work?
06:35:44 <pesco> Most, only the ICFP-related ones have been broken, I think.
06:37:42 <Heffalump> a lot of the links from the front page are empty for me
06:38:09 <pesco> Oh. :(
06:48:54 <pesco> Jesus H. particular Christ on a crutch, is that Wiki unusable!
06:49:27 <Jerub> its broke
06:49:28 <Jerub> as per topi
06:49:29 <Jerub> c
06:49:37 <Jerub> ''more info when wiki returns''
06:49:48 <pesco> I'm going back in time through the RecentChanges and there are dead pages everywhere!
06:50:22 <pesco> This will not require a mere one-time fix but a complete overhaul as the entire system seems to be broken in itself.
06:50:59 * Jerub laughs
06:51:04 <Jerub> welcome to wiki mismanagement 101
06:51:53 <pesco> "some lock-file problem..." This looks like the kind of really absolutely severe race-condition which is usually a reason to stamp a software package as "non-functional". And we're using it!
06:53:18 <pesco> I just hope, for the sake of all the valuable information that must have been on those pages, that the Wiki stores updates as diffs ore something.
06:53:54 <Heffalump> RCS
06:55:09 <pesco> *phew* yah, just saw "ReportingProblems".
09:03:46 <hdaume> hi all
09:03:50 <Heffalump> hi
09:04:37 <hdaume> do you know how to get emacs to insert spaces instead of tabs?
09:04:48 <Heffalump> hit space lots :-)
09:04:54 <hdaume> :)
09:05:49 * hdaume joins #emacs
09:13:10 <pesco> hdaume: (setq indent-tabs-mode nil)
09:13:39 <hdaume> got it :)
09:14:39 <pesco> Just in case all of #emacs was asleep, dead, or otherwise unavailable to answer your question.
09:14:48 <hdaume> thanks
09:15:15 <Heffalump> (e.g. they'd all been converted to using vi...)
09:16:39 <hdaume> hey...haskell question now...suppose module A exports main, module B imports A and reexports it; then i want to write a module Main that imports A...i can't "import A hiding (main)" because A doesn't explicitly export main...how do i get around this?
09:16:54 <Heffalump> you can't?
09:17:18 <hdaume> well...grr...A = General, B = Gtk, C = my gt2hs program
09:17:24 <Heffalump> and didn't you mean B, anyway?
09:17:31 <hdaume> yeah, i meant B
09:18:56 <hdaume> the weird thing is my Main program is "module Main(Main.main) where..." and ghc complains on line 1: Ambiguous occurrence 'main' It could refer to either 'Main.main' or 'General.main', but it's not really ambiguous, is it?
09:19:21 <Heffalump> module Foo(main) where
09:19:21 <Heffalump> main :: IO ()
09:19:21 <Heffalump> main  = return ()
09:19:28 <Heffalump> module Bar(module Foo) where
09:19:28 <Heffalump> import Foo
09:19:34 <Heffalump> module Baz where
09:19:35 <Heffalump> import Bar hiding (main)
09:19:35 <Heffalump> main :: IO ()
09:19:35 <Heffalump> main = return ()
09:19:37 <Heffalump> loads fine for me in hugs
09:19:47 <hdaume> what about ghci?
09:20:05 <Heffalump> yep (5.00.2)
09:20:13 <hdaume> i think it's a 5.04 thing :(
09:20:21 * Heffalump --> try on 5.04
09:20:49 <Heffalump> nope, fine in 5.04 too
09:20:56 <hdaume> weird
09:21:07 <hdaume> maybe it has to do with the fact that A and B are in a package???
09:21:13 <hdaume> lemme try over here
09:22:56 <hdaume> hrm...it works for me with your Foo/Bar/Baz example
09:24:50 <hdaume> well, importing qualified works...i suppose that's a solution
09:43:39 <ChoJin> hi
09:48:09 <hdaume> hi
14:33:40 <hdaume> hey...anyone here going to SSAFP?
14:34:51 <Heffalump> to what?
14:34:59 <Heffalump> oh, the summer school?
14:37:01 <hdaume> hey...anyone here going to SSAFP?
14:37:04 <hdaume> oops
14:37:08 <hdaume> i mean "yeah"
14:37:14 * hdaume accidentally hit "up"
14:37:56 <Heffalump> Igloo and I are helping with it
14:38:22 <hdaume> cool.  out of curiousity, what's appropriate dress?  is it dressy or casual?
14:45:37 <Heffalump> casual, I'd have thought
14:45:37 <Heffalump> it's a standard academic type thing
14:46:16 <Heffalump> (sorry, huge packet loss on my CM, I keep losing connection)
14:46:26 * Heffalump will certainly be casually dressed, as will Igloo
14:47:25 <hdaume> i was figuring casual, based on past expi erience...just didn't want to show up and embarass myself :)
14:47:35 <Heffalump> I guess the banquet might be a bit more formal, but I even that shouldn't matter much
14:48:14 <Heffalump> s/I even/even/
14:48:49 <Heffalump> I never bother taking anything smarter than a cfairly casual shirt to conferences and I'm never obviously underdressed
14:57:23 <pesco> In any case, what would be the point of a dresscode if everybody followed?
14:57:31 <Heffalump> :-)
15:01:04 <pesco> Hm, by brain refuses the idea of coding. I deduce that I need sleep. Have a good time everyone, see you in the morning.
15:01:14 * pesco waves
15:01:22 <Heffalump> are you going to SSAFP? :-)
15:01:41 <Heffalump> so far I know about hdaume, jadrian, ChilliX, Igloo and myself
15:01:48 <pesco> I'm afraid not. :(
15:02:52 <pesco> I just didn't consider it, because it's not "here". Now that I know I might get to meet you all there I get the feeling I should have spent a thought on it.
15:03:27 <Heffalump> well, I wouldn't bother going if it (a) wasn't here or (b) I wasn't getting in free because I'm helping
15:03:29 <pesco> Also I assume it would be well worth it knowledge-wise...
15:04:15 <pesco> Please give me the URL again.
15:04:50 <pesco> Well giving knowledge is even more rewarding than obtaining it.
15:08:00 <Heffalump> http://www.functional-programming.org/afp/afp4
15:08:16 <Heffalump> I'm not giving knowledge, just helping with registration and showing people around and stuff
15:08:26 <pesco> Oh.
15:09:26 <Heffalump> I was partially responsible for some giving of knowledge at AFP3 but that was several years ago :-)
15:09:53 <pesco> I see.
15:12:15 * Heffalump gives up on trying to IRC, the connection to the computer where my IRC client is has horrible packet loss
15:12:38 <pesco> That reminds me...
15:13:16 <pesco> die session die
18:24:19 * Chilli is away: Doing stuff...
18:24:21 * Chilli is back (gone 00:00:02)
22:59:19 <Chilli> The 2002 Haskell Workshop preliminary programme is out! http://www.cse.unsw.edu.au/~chak/hw2002/
