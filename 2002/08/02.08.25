02:51:46 --- topic: set to 'We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.1.0 released http://www.cse.unsw.edu.au/~chak/nepal/ || looking for team members for a #haskell ICFP contest entry, more info if the HaskellWiki returns.' by jewel
04:51:42 <pry> <Jerub@oftc> evening
04:54:53 <jewel> hello Jerub
04:57:11 <pry> <Jerub@oftc> jewel: I just managed to finish my haskell assignment (I started it about an hour and a half ago).
04:57:54 <pry> <Jerub@oftc> implementation of the sliding block puzzle for arbitary size board.
04:58:57 <pry> <Jerub@oftc> I'm afraid I used far too many 'let/in' and 'if/then/else' statements
05:00:41 <pry> <Jerub@oftc> shapr!
05:00:41 * shapr obunces
05:00:45 <shapr> f00
05:00:48 <shapr> hi Jerub, what's up?
05:01:29 <pry> <Jerub@oftc> shapr: I just finished my haskell assignment. Can you look at it for a second and tell me where I've done things that go against the haskell paradigm?
05:01:50 <jewel> shapr, have you been on your date?
05:02:07 <jewel> pry: you had to solve the problem
05:02:12 <jewel> pry: or just model the board
05:02:27 <jewel> yeah yeah
05:03:03 <pry> <Jerub@oftc> http://2Cust165.tnt5.bne1.da.uu.net/~stephen/assign1.hs
05:03:07 <shapr> hi jewel!
05:03:14 <pry> <Jerub@oftc> jewel: We had to model the board and provide interaction.
05:03:38 <shapr> jewel: nah, I haven't had my date yet, it is that time though.
05:04:38 <shapr> Jerub: very pythonic indentation
05:05:58 <pry> <Jerub@oftc> shapr: well. I figured if I did it like that the parser wouldn't get ocnfused.
05:07:23 <shapr> I like that indentation style
05:07:45 <shapr> looks good to me, dunno if I'm an expert :-)
05:08:15 <shapr> there are one or two function where it looks like you may not have a base case pattern match
05:08:29 <shapr> but I don't thoroughly understand the code, so I could be wrong.
05:08:38 <shapr> time for my date, I'll be back later.
05:08:40 <pry> <Jerub@oftc> I think you're right
05:08:52 <pry> <Jerub@oftc> but because of the way they're used, the base case can never happen.
05:08:55 <pry> <Jerub@oftc> but thats bad I guess.
05:09:01 <pry> <Jerub@oftc> shapr: have fun !
05:11:23 <jewel>  if (tail x == [empty]) && (xs == []) 
05:11:25 <jewel> what's this?
05:13:17 <pry> <Jerub@oftc> jewel: if the end of the row is the empty tile (i.e. [[1,2],[3,4]] - 4 represents the empty tile), and this is the last row.
05:13:37 <pry> <Jerub@oftc> jewel: Its probably the most unclear algorithm I've ever come up with that works.
05:14:02 <pry> <Jerub@oftc> hold on.
05:14:04 <pry> <Jerub@oftc> it doesn't work.
05:14:08 <pry> <Jerub@oftc> I'm going to have to rethink that.
05:17:55 <pry> <Jerub@oftc> solved board empty = (foldr (+) 0 $ zipWith (-) [1..] (foldr (++) [] board)) == 0 <-- new solution
05:18:09 <pry> <Jerub@oftc> I even get to ignore the 'empty' variable (thats part of the assignment spec
05:20:44 <pry> <Jerub@oftc> jewel: I hate 'tupleadd' and 'position'
05:27:44 <jewel> what's wrong with them?
05:29:21 <pry> <Jerub@oftc> jewel: tupleadd seems so.. hackish.
05:52:44 * hornby pushes shapr around a little
05:53:46 * hornby hrmphs, points shapr at #goo and googoogaga.com and goes to bed
05:53:50 <hornby> er .org
05:53:53 <hornby> ahem
05:53:59 * hornby runs away
06:42:08 <jewel> shapr: still mowing?
07:08:59 <shapr> jewel: I'll be ready to practice in about twenty minutes
07:17:47 <jewel> ok
07:23:18 <jewel> like now?
07:37:17 <shapr> like now
07:38:02 <shapr> jewel: je suis ici
07:38:05 <shapr> ik ben heer
07:39:24 <jewel> ok
07:39:34 <jewel> where were we
07:39:34 * shapr bounces
07:39:48 <jewel> ok, yes trying to turn attributes into child nodes
07:39:49 <shapr> I didn't check in changes to Test_Yaml.hs
07:42:04 <jewel> any reason why they shouldn't go in?
07:42:13 <jewel> Are these the interactive changes we made?
07:42:25 <shapr> I'll check 'em in
07:43:30 <shapr> ok
07:44:05 <jewel> ok
07:44:16 <jewel> so we need to figure out how to use the chip thing
07:44:22 <jewel> and select the attributes in the first place
07:44:26 <shapr> I wonder if I can manually construct a tag in ghci
07:48:54 <shapr> jewel: what do you suggest?
07:50:03 <shapr> hmm
07:50:16 <shapr> how do I construct a type of Either String Reference  with String?
07:50:58 <shapr> I should remember that.
07:51:07 <jewel> Either?
07:51:42 <shapr> it can be one of two possible types, that's what Either is for
07:51:54 <shapr> data Either a b = Left a | Right b
07:51:54 <jewel> do the children of an element include the attributes?
07:52:03 <shapr> doesn't look like it
07:52:19 <shapr> data Element = Elem Name [Attribute] [Content]
07:52:21 <shapr> that's from :i Element
07:52:36 <shapr> type Attribute = (Name, AttValue)
07:52:46 <shapr> I think children will be in [Content]
07:54:35 <shapr> hm
07:54:58 <shapr> this looks like it should be able to construct an element: Elem "elem_name" [("attrname",AttValue [Left "attrvalue"])]
07:55:05 <jewel> but we can the attribs from the element?
07:55:14 <shapr> we can pattern match it
07:55:42 <shapr> at least, I think we can.
07:56:12 <jewel> yeah it should work like  getContent does
07:56:29 <jewel> is Elem different from CElem?
07:56:44 <shapr> -- CElem is a data constructor
07:56:45 <shapr> CElem :: Element -> Content
07:56:52 <shapr> -- Elem is a data constructor
07:56:52 <shapr> Elem :: Name -> [Attribute] -> [Content] -> Element
07:57:21 <jewel> ok
07:57:36 <dark> I committed my usual sin, I started a new project after I got stuck on the old one :)
07:57:48 <shapr> oh, I left the [Content] part off, that's why it's not returning an Element
07:57:54 <shapr> hi dark, what's your new project?
07:58:06 <jewel> so getAttributes (Element _ attribs _) = attribs 
07:58:15 <shapr> yah, I think so
07:58:22 <dark> shapr: A roguelike game :)  I want to combine all the things I like about nethack, crawl, and omega, and put them in one game.  Written in a sane language :)
07:58:36 <dark> shapr: This is actually the other project I was using to learn Java.
07:58:40 <shapr> ick
07:59:00 <dark> shapr: The thing I'm wondering about now is how to sanely integrate everything-is-randomness into Haskell code.  I'm thinking of a Perhaps type :-)
07:59:06 <shapr> hah
07:59:14 <shapr> that's a cute idea :-)
07:59:19 <shapr> what's going to happen to uncc ?
07:59:24 <shapr> are you going to release the source?
07:59:29 <dark> shapr: What's ick, doing it in Java, or roguelike games?  I admit they're an acquired taste :)
07:59:38 <shapr> I'm not very fond of Java :-)
07:59:49 <dark> shapr: Well I'm hoping that starting this will unblock my programmer's block, so that I can work on both of them.
07:59:56 <shapr> ah, I see.
08:00:09 <shapr> releasing the source might also unblock you
08:00:10 <dark> shapr: uncc is still not even at the point where it can disassemble a whole program, it's still on the single-instruction level :)  Not very useful.
08:00:41 <dark> shapr: I guess I'm still embarrassed about the uncc source :-)
08:01:14 <shapr> I've been in that same situation, that's why I think releasing the source is good for unblocking
08:01:43 <shapr> I've written lots of code after looking at what I've written and thinking how other people would react to it
08:02:01 <shapr> my woman has returned, be back soon
08:02:05 <dark> shapr: okay :)
08:09:30 <dark> Hmm my design is going to have some datatypes with hundreds of mostly nullary constructors.  Does anyone know if ghc is happy with that?
08:12:11 <dark> (The haskell rule of variable naming: pick a random letter.  If it collides with another identifier, add an apostrophe.)
08:16:35 * shapr boings
08:19:26 <shapr> jewel: Elem "Baz" [("attrname",AttValue [Left "attrvalue"])] [CString False "foooo"]
08:19:34 <shapr> that works with the older XmlLib stuff in ghci
08:20:22 <jewel> what does that look like?
08:20:37 <shapr> that just makes one single Element
08:21:04 <shapr> which I think would look like <Baz attrname="attrvalue">foooo</Baz>
08:21:11 <jewel> <Baz attrname=attrvalue>foooo</Baz>
08:21:37 <jewel> Ok, and can you write code to show the attributes of elements in album.xml?
08:21:58 <shapr> I'll try it.
08:22:19 <dark> What are you two working on?
08:23:46 <shapr> trying to turn xml into yaml
08:23:47 <shapr> yaml.org
08:23:59 <shapr> practicing for next weekend's icfp contest
08:34:20 <jewel> what does the `o` operator do?
08:34:42 <shapr> it's called the irish operator, but it can be summarized by "of"
08:34:54 <shapr> the ibm HaXml article and the icfp99 paper explain it
08:35:10 <shapr> rows `o` hexagram or something like that
08:35:11 <jewel> yeah I've read that, but I don't get it
08:36:18 * shapr opens icfp99 paper
08:36:46 <dark> shapr: This is interesting.  Thanks for the reference.
08:36:49 <shapr> The most important and useful filter combinator is `o`. We call this operator Irish composition, for reasons which should be obvious.
08:36:55 <shapr> It plugs two filters together: the left filter is applied to the results of the right filter
08:37:10 <shapr> jewel: looks to me like filter composition
08:37:32 <jewel> I'm trying to compile the ibm article's code
08:37:36 <jewel> but I'm missing digitToInt
08:37:59 <shapr> hm
08:38:47 <shapr> you might be able to use fromIntegral
08:38:52 <shapr> sometimes that works :-)
08:38:56 <shapr> I'm sure there's a better solution though
08:39:09 <jewel>  No instance for (Integral Char)
08:39:39 <shapr>     text `o` children `o` tag "title" means ``only the plain-text children of the current element, provided the current element has the title tag name''
08:41:28 <shapr> what's the url to that article again?
08:41:38 <jewel> http://www-106.ibm.com/developerworks/xml/library/x-matters14.html
08:41:43 <jewel> why don't chr or ord work?
08:42:06 <shapr> have you imported Char ?
08:42:29 <shapr> you can explicitly use Char.ord and Char.chr, I think
08:42:38 <jewel> there we go
08:43:41 <jewel> ok, that works
08:43:50 <dark> Yeah, digitToInt seems to be in Data.Char
08:44:47 <shapr> jewel: can you check it in?
08:45:37 <jewel> Constructor `Element' should have 1 argument, but has been given 3
08:46:06 <shapr> jewel: type Element has constructor Elem
08:46:28 <shapr> at least, that's true in XmlLib
08:54:09 <jewel> ok, I'll commit it
08:54:45 <jewel> it's in
08:54:51 <shapr> cool
08:54:56 <jewel> My problem is that I see how the combinators work to filter stuff
08:55:05 <jewel> but I want to extract the attributes
08:55:24 <shapr> well, we already have attr n
08:55:32 <shapr> which takes the name of an attribute to filter by
09:01:17 <shapr> I wrote anyattr yesterday, I wonder if it works....
09:06:49 <jewel> I don't get how all the filters plug together
09:11:10 <shapr> ok, here's the most basic filter I can get to work:
09:11:18 <shapr> module Main where
09:11:18 <shapr> import Text.XML.HaXml.Wrappers
09:11:18 <shapr> import Text.XML.HaXml.Combinators
09:11:18 <shapr> main = processXmlWith (tag "album")
09:11:45 <shapr> then run the resulting binary with album.xml as an argument, and you get the entire <album> tag
09:16:24 <shapr> jewel: ok, I'm with you. I don't get it.
09:17:33 <shapr> I get this a lot: Fail: produced more than one output
09:17:44 <shapr> and then sometimes I get: Fail: produced no output
09:19:54 <jewel> Yeah
09:20:13 <jewel> comes from those lines in wrappers.hs
09:20:43 <jewel> I've been looking at the html combinators
09:20:57 <jewel> in src/Text/XML/HaXml/Html/Generate.hs
09:21:47 <jewel> html, hhead, htitle, hbody, h1, h2, h3, h4, hpara, hpre, hcentre,
09:21:47 <jewel>     hem, htt, hbold, htable, hrow, hcol, hdiv, hspan, margin
09:21:47 <jewel>        :: [CFilter] -> CFilter
09:21:58 <jewel> What does the type mean here
09:22:08 <jewel> They take a list of CFilters and return a CFilter?
09:23:45 <shapr> yup
09:25:12 <jewel> But for each of thes, there is no var name on the left
09:25:35 <jewel> which means it's implictly passed on ... ?
09:25:58 <shapr> nah, it just declares their type
09:26:05 <shapr> the actual function definition happens later
09:26:14 <jewel> yeah, look at them
09:26:53 <shapr> they're partially applied version of mkElem, whatever that is
09:27:31 <jewel> yes, it's the partial application I'm getting at
09:27:59 <shapr> hm
09:28:20 <Heffalump> is Pseudonym around?
09:28:27 * shapr looks
09:28:39 <shapr> doesn't seem to be
09:29:01 <Heffalump> are you two still practicing for next weekend?
09:29:06 <shapr> yup
09:29:22 <jewel> hey Heffalump
09:29:23 * Heffalump might join in in a bit once I've done some other random stuff that needs doing
09:29:31 <Heffalump> if that makes sense, anyway
09:29:38 <shapr> yah, it does :-)
09:29:58 <Heffalump> a bit = an hour or so, though
09:30:13 <shapr> ok
09:30:27 * shapr has no particular plan for this evening
09:31:43 <jewel> me neither
09:31:52 <jewel> just have to leave here in 1.5 hours
09:32:11 <shapr> ok
09:33:44 <jewel> ah hah!
09:33:48 <shapr> you got it?
09:33:54 <jewel> Didn't get it
09:34:09 <jewel> but I got some output
09:34:19 <shapr> what did you get? how did you get it?
09:34:36 <jewel> main = processXmlWith (getAttributes `o` tag "album")
09:34:36 <jewel> getAttributes = html [
09:34:36 <jewel>                       hhead [htitle [keep /> tag "title" /> txt] ],
09:34:36 <jewel>                       (mkElem "bird") [keep]
09:34:36 <jewel>                      ]
09:34:43 <jewel> this is in myprocessor.hs
09:35:05 <shapr> whoa spiffy
09:35:10 <jewel> it just copies the whole XML doc out into a tag called "bird"
09:35:25 <shapr> I found mkElem
09:35:33 <shapr> it's in Haskell2Xml
09:35:36 <shapr> mkElem x cs  = CElem (Elem (flat (toHType x) "") [] cs)
09:35:51 <shapr> there's also: mkElemC x cs = CElem (Elem x [] cs)
09:36:17 <jewel> In fact, this is more what I wanted: getAttributes = (mkElem "bird") [keep]
09:36:44 <jewel> so that last pair of [] is an empty list of attributes
09:37:39 <shapr> I hope that HaXml is like emacs, where once we understand it, we will be wizard of Xml
09:37:47 <shapr> er, "wizards"
09:38:04 <jewel> emacs is easier
09:38:06 <jewel> :-)
09:38:20 <jewel> I can see the power ... just steep learning curve
09:38:41 <shapr> I can't yet see the power
09:41:24 <jewel> where is the Attribute constructor?
09:42:00 <shapr> maybe in Types ?
09:42:51 <jewel> it says type, not data
09:42:55 <jewel> so is that just a tuple?
09:43:01 <shapr> yup
09:43:21 <shapr> iirc, you'll also need AttValue Left "foo"
09:43:26 <jewel> getAttributes = (mkElemAttr  "bird" [("yo","dude")]) [keep]
09:43:29 <jewel> that doesn't work
09:43:37 <shapr> it complains about AttValue, right?
09:43:45 <shapr> anElement = Elem "Baz" [("attrname",AttValue [Left "attrvalue"])] [CString False "foooo"]
09:44:02 <shapr> that's what I got from XmlLib
09:44:25 <shapr> hi andersca
09:44:32 <andersca> hey shapr
09:44:36 <shapr> looking for Haskell info?
09:44:47 <andersca> yeah, I'm having some trouble with happy
09:45:07 <shapr> I'll try to help, what's the problem?
09:45:08 <andersca> my grammar file compiles is processed fine but hugs refuses to load it
09:45:30 <shapr> what's the error?
09:45:43 <andersca> ERROR "grammar.hs":35 - Type error in explicitly typed binding
09:45:43 <andersca> *** Term           : action_3
09:45:43 <andersca> *** Type           : Int -> Int -> a -> HappyState a (HappyStk HappyAbsSyn -> Int -> [Token] -> b) -> [HappyState a (HappyStk HappyAbsSyn -> Int -> [Token] -> b)] -> HappyStk HappyAbsSyn -> Int -> [Token] -> b
09:45:43 <andersca> *** Does not match : Int -> HappyReduction
09:45:48 <andersca> I put up the grammar file at http://carbon.hemmet.chalmers.se/grammar.y
09:46:58 <shapr> I haven't used Happy before, so I don't think I can help you.
09:47:30 <shapr> I don't know if any Happy users are awake here, you may want to ask on the haskell mailing list.
09:47:47 <shapr> jewel: what imports do you have in myprocessor.hs ?
09:47:48 <jewel> hehe, got it to work (copied the code from the article)
09:47:58 <jewel> import XmlLib
09:47:58 <jewel> import Char
09:48:04 <jewel> getAttributes = (mkElemAttr "bird" [ ("yo",("value"!))]) [keep]
09:48:21 <shapr> andersca: have you tried it with nhc or ghc?
09:48:26 <andersca> shapr: yes
09:48:29 <andersca> (with ghc)
09:48:30 <shapr> same error?
09:49:07 <shapr> jewel: what's the postfix exclamation point? oh, I bet it's a shortcut...
09:49:14 <andersca> grammar.hs:50:
09:49:14 <andersca>     Couldn't match `Int' against `[b]'
09:49:14 <andersca>         Expected type: Int
09:49:14 <andersca>         Inferred type: [b]
09:49:55 <jewel> yeah, doesn't work without it
09:50:26 <shapr> andersca: maybe happyError is typed incorrectly?
09:50:47 <shapr> andersca: can you remove the explicit typing and see if that works?
09:51:07 <andersca> shapr: oh sorry, there are more errors
09:51:13 <andersca>    Couldn't match `Int' against `[Token]'
09:51:13 <andersca>         Expected type: Int
09:51:13 <andersca>                        -> Token
09:51:13 <andersca>                           -> HappyState
09:51:13 <andersca>                                  Token (HappyStk HappyAbsSyn -> [Token] -> HappyAbsSyn)
09:51:14 <andersca>                              -> [HappyState
09:51:16 <andersca>                                      Token (HappyStk HappyAbsSyn -> [Token] -> HappyAbsSyn)]
09:51:18 <andersca>                                 -> HappyStk HappyAbsSyn -> [Token] -> HappyAbsSyn
09:51:20 <andersca> (sorry for flooding)
09:51:43 <shapr> andersca: that's way over my head :-) I'd suggest you start with a working grammar.y and cut it down to something more basic.
09:52:04 <andersca> shapr: nod
09:52:19 <shapr> jewel: looks like there are some strange differences between the older and newer versions of HaXml
09:52:34 <jewel> really?
09:53:03 <jewel> hmake -package lang -package text -I/home/jewel/scratch/yaml/HaXml-1.07/src/ -I../HUnit myprocessor
09:53:07 <jewel> is my command to compile
09:53:46 <shapr> I'm trying it with import Text.XML.HaXml.{Html,Wrappers,Combinators} and it's failing... hm
09:54:00 <shapr> we should probably stick with one version or another of HaXml
09:54:16 <shapr> or at least, that would cut down on how confused I am.
09:54:29 <jewel> let me commit
09:55:11 <jewel> ok
09:57:08 <shapr> urk, emacs restart, brb
09:59:17 --- topic: set to 'We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || parr 0.1.0 released http://www.cse.unsw.edu.au/~chak/nepal/ || #haskell ICFP contest next weekend.' by shapr
10:00:19 <jewel> Mmm, I hope we can hand in a working solution next we
10:00:45 <shapr> me too
10:01:05 <shapr> if we hand in a working solution I will be satisfied.
10:01:14 <shapr> actuall
10:01:15 <shapr> y
10:01:20 <shapr> I would be thrilled :-)
10:02:08 <jewel> I'm guessing that we'll need a day to grok the problem statement
10:05:23 <shapr> that could be true
10:06:43 <jewel> do you understand the numbered combinator?
10:06:48 <jewel> and labelling stuff?
10:07:20 <shapr> numbered is just an index into an array I think
10:07:23 <shapr> labelling I dunno about
10:08:15 <jewel> no, position is the index selector
10:18:34 <jewel> I think I've got the big picture now
10:18:44 * shapr is still looking at one pixel
10:19:58 <jewel> The filter "framework" allows to filter xml and have it transformed to something else
10:20:11 <shapr> oh
10:20:17 <jewel> but we have to operate on the Document class returned from xmlParse
10:20:19 <shapr> so it's a full XSLT replacement
10:20:19 <jewel> to do what we want
10:20:49 <shapr> I gotta bail for today
10:20:59 <shapr> it was fun, thanks :-)
10:22:02 * shapr takes off
10:22:11 <Heffalump> hmm
11:49:33 <Heffalump> hi
11:53:50 <pesco> hi
14:33:01 <Igloo> Anyone around know how nhc98 packages work?
14:35:14 <dark> I'm around but I don't know :)
14:52:46 <pesco> recip . succ . exp . negate
14:53:03 <pesco> That has to be the coolest-sounding function I have come across to date.
16:08:59 <dark> Anyone here?
16:09:19 <loom2> yes
16:09:40 <Heffalump> yes
16:09:42 <pesco> yes
16:09:49 <dark> Wow :)
16:09:56 <loom2> pesco :)
16:10:02 <dark> Okay, I was just wondering if I should hang out here some more or go to bed :)
16:10:08 <pesco> loom2!
16:10:28 * Heffalump is just going to bed
16:14:22 <dark> Hmm does Haskell have an interface for something like a lazy list of random numbers?
16:14:37 <Heffalump> hmm.
16:14:43 <Heffalump> random number generation is in IO
16:14:45 <dark> Or would I be better off using my own pseudorandom (pure) function from a random seed?
16:15:01 * Heffalump --> read the interface
16:15:12 <Igloo> randoms will do that for you
16:15:21 <dark> Yeah I already looked at System.Random.  Didn't entirely understand it :)
16:15:35 <Igloo> Ermmm, you want Random.*
16:15:55 <Heffalump> ah, so it will
16:16:02 <Heffalump> Random.* ?
16:16:29 <Igloo> The functions in the Random module
16:16:36 <Igloo> As opposed to System.Random
16:16:36 <Heffalump> that is System.Random
16:16:49 <Igloo> Oh, is it re-exported?
16:16:55 <Igloo> Or am I just confused?
16:16:59 <Heffalump> yes
16:17:03 <Heffalump> (re-exported)
16:17:20 <Heffalump> well, in GHC anyway - http://haskell.cs.yale.edu/ghc/docs/latest/html/haskell98/Random.html
16:17:45 <dark> Okay, cool, it's what I need :)
16:17:54 <Igloo> It's not in the library report or hugs AFAICS
16:18:00 <Heffalump> what isn't?
16:18:10 <Igloo> Isn't re-exported
16:18:38 <dark> Now I just need a way to have two orthogonal random functions, so that I can use one series to generate seeds, which I can then pass to other functions which generate their own random lists from those.
16:19:08 <Heffalump> well, an implementation can choose how to do Random - ghc does it via System.Random, presumably
16:19:40 <Igloo> There's a splitting function, but its properties aren't well understood
16:19:46 <Heffalump> you could probably use mkStdGen
16:20:23 <Heffalump> though yeah, depending on how important real randomness is to you you should be careful
16:20:27 * Heffalump really goes to bed
16:20:32 <Igloo> But you shouldn't rely on System.Random existing if you are writing Haskell'98 code
16:20:40 <Igloo> Night
16:21:21 <dark> pseudorandomness is fine, but I need to make sure series aren't repeated :)
16:22:24 <dark> I wonder if simply using succ on the seeds will work well enough.
16:23:08 <Igloo> split probably ought to be better
16:27:09 <dark> Yeah, looks like split does the +1 with additional black magic :-)
16:28:03 <dark> And it's easily accessed with newStdGen.
16:38:00 <dark> Igloo: thanks for the help :)
16:39:11 <Igloo> np
