02:08:46 <shapr> re jewel 
02:50:45 <jewel> yo
02:50:55 <shapr> what's up?
02:51:52 <jewel> I'm pissed off with the immigration office, I went there to find out that people have been queueing since 1am for "tickets", once you get a ticket they tell you how many hours to wait
02:52:04 <shapr> yikes!
02:52:10 <shapr> that's terrifying
02:52:15 <jewel> it's Ireland
02:52:49 <shapr> here I walked into the local post office, Bea said "I'm an EU citizen, and he's my sigificant other."
02:53:21 <shapr> then we paid $15 USD and waited two weeks.
02:53:34 <shapr> and my 5 year residence and work permit arrived.
02:54:00 * Heffalump remembers that it's Norway and not Finland that isn't currently in the EU and unconfuses himself
02:54:42 <shapr> your circumstances are different, yes?
02:55:22 <Heffalump> whose, mine?
02:55:51 <shapr> er, jewel
02:55:53 <shapr> :)
02:56:11 <shapr> you, Heffalump told me that you've been living in .uk your whole life.
02:56:13 <Heffalump> right, just checking cos he didn't answer :-)
02:56:14 <Heffalump> yep.
02:56:39 <shapr> therefore, I suspect that you're a legal .uk citizen with all right, privs, obligations, etc
02:56:50 <jewel> shapr: do you have to be married for that?
02:56:55 <shapr> jewel: not in .fi
02:57:02 <shapr> 'life partner'
02:57:06 <jewel> but is that EU wide?
02:57:36 <jewel> are they allowed to have different policies in each state?
02:58:18 <shapr> er, I think so
02:58:56 <shapr> for example, 'life partner' in .fi includes gay and lesbian couples who have been only recently allowed to marry.
02:58:59 <jewel> Damn, that would make it much easier. Did you have to prove that you were 'significant'?
02:59:06 <shapr> no, not really.
02:59:12 <shapr> we have the same address
02:59:20 <shapr> still do
02:59:34 <shapr> I have to notify the immigration ppl when I move
02:59:42 <jewel> cool
02:59:50 <jewel> and if you didn't live together?
02:59:55 <shapr> I don't know
03:01:13 <shapr> Heffalump: are you familiar with Joy?
03:02:22 <shapr> I'm trying to find comparison info between Joy and Forth
03:06:18 <Heffalump> shapr: nope, sorry
08:43:03 * shapr chortles merrily
08:43:24 * Heffalump looks worried :-)
08:45:00 <shapr> ;)
08:45:31 <shapr> I'm playing with Joy
14:03:49 <shapr> hi
17:27:18 <shapr> f00 on a stick
17:32:49 <shapr> f00 I say
17:33:00 <jemfinch> shapr: you're into haskell now?
17:33:47 <shapr> yah sure
17:34:03 <shapr> I'm like a fun guy
17:34:18 <shapr> hard to stop my expansion ;)
17:34:22 <jemfinch> :)
17:34:25 <shapr> hey, you know something about Haskell?
17:34:32 <jemfinch> not much, nothing specific.
17:34:39 <jemfinch> I know of its general features, though.
17:34:42 <shapr> oh
17:34:55 <shapr> I'm trying to do something relatively convoluted
17:35:00 <shapr> splitY char tokens string = splitY char 
17:35:00 <shapr> 			    (tokens ++ [first_chunk char string]) 
17:35:00 <shapr> 			    (drop 1 (second_chunk char string))
17:35:03 <shapr> but it's not working
17:35:07 <shapr> first_chunk char string = (takeWhile (/= char) string)
17:35:15 <shapr> second_chunk char string = (dropWhile (/= char) string)
17:35:26 <jemfinch> what are you trying to do in english?
17:36:00 <shapr> string.split in python
17:36:11 <shapr> string.split('this is a test',' ')
17:36:24 <jemfinch> what's what you're trying to write in haskell?
17:36:38 <shapr> eh?
17:36:39 <jemfinch> s/what's/that's/
17:36:42 <shapr> yes
17:36:48 <shapr> and I realize it already exist
17:36:57 <shapr> and I know several other ways of doing it
17:37:00 <jemfinch> and you only want to be able to split on a character?
17:37:02 <shapr> PragDave showed one earlier
17:37:04 <shapr> right
17:37:11 * jemfinch has written it in O'Caml.
17:37:13 <shapr> and I want to fix *this* one
17:37:22 <jemfinch> conceptually, how are you trying to do this one?
17:37:35 * jemfinch can't read haskell incredibly well, especially in unformatted irc.
17:37:37 <shapr> you know takeWhile and dropWhile?
17:37:44 <jemfinch> can't say I do :(
17:38:22 <shapr> takeWhile testfun list
17:38:36 <jemfinch> it takes until testfun returns false?
17:38:39 <shapr> so each time it pulls a Char from the list, it tests that Char
17:38:40 <shapr> right
17:38:50 <shapr> it has an opposite number, dropWhile
17:38:57 <shapr> which is.. 
17:39:04 <shapr> obvious :)
17:39:07 <jemfinch> :)
17:39:15 <shapr> so
17:39:21 <jemfinch> what's the /= char do in this case?
17:39:24 <jemfinch> s/char/operator/
17:39:28 <shapr> means not equal
17:39:49 <shapr> so (/= ' ') means "not equal to a space character"
17:40:03 <jemfinch> I don't know if you can use an operator as a function just like that.
17:40:09 <shapr> you can
17:40:21 <jemfinch> that seems ambiguous.
17:40:25 <shapr> it's not
17:40:29 <jemfinch> I know functions can be used as operators with backticks...
17:40:41 <shapr> yah, but that's not my problem
17:40:50 <jemfinch> but how would "10 /= 10 45" be parsed?
17:41:06 <jemfinch> is that (10 (/= 10 45)) or ((10 /= 10) 45)?
17:41:09 <shapr> it would try to call the function true on 45
17:41:19 <shapr> space means function application in Haskell
17:41:27 <shapr> you'd get True 45
17:41:32 <shapr> and then it'd complain at you
17:41:34 <jemfinch> I know *that* :)
17:41:45 <jemfinch> remember, I program in O'Caml.
17:41:48 <shapr> do you have an interactive Haskell shell handy?
17:41:50 <shapr> I can show you.
17:42:06 <shapr> ghc is my preference, because I can do the let x = stuff there
17:42:23 <jemfinch> does ghc have a shell comparable to python's or O'Caml?
17:42:30 <shapr> dunno O'Caml
17:42:41 <jemfinch> well, is there an interactive shell like Python's?
17:42:50 <shapr> not quite that good, but decent
17:43:09 <jemfinch> what do I have to type to get it?
17:43:12 * jemfinch has ghc installed.
17:44:05 <shapr> ghci
17:44:24 <jemfinch> hmm, I don't have that.
17:44:44 <xbill> ghci rules
17:44:49 <shapr> you using debian?
17:44:49 * jemfinch doesn't have it.
17:44:52 <shapr> hi xbill!
17:44:57 <jemfinch> no, FreeBSD, installed ghc from ports.
17:45:00 <shapr> oh
17:45:02 <shapr> dunno about that
17:45:13 <shapr> hey xbill, any idea what my problem is?
17:45:39 <jemfinch> so does anyone here know about phantom types?
17:45:40 <shapr>     Cannot unify the type-signature variable `a' with the type `[a1]'
17:45:41 <shapr> 	Expected type: [a1]
17:45:41 <shapr> 	Inferred type: a
17:45:41 <shapr>     In the first argument of `(++)', namely `tokens'
17:45:41 <shapr>     In the second argument of `splitY', namely
17:45:44 <shapr> phantom?
17:46:29 <jemfinch> http://pauillac.inria.fr/bin/wilma_hiliter/caml-list/200109/msg00097.html?line=3#hilite
17:47:40 <shapr> no clue
17:47:42 <shapr> have you heard of Joy?
17:47:54 <jemfinch> what is it?
17:47:56 <jemfinch> (no, I haven't)
17:48:19 <shapr> it's a stack based concatenative functional lang
17:48:29 <jemfinch> wow, I've never heard of it.
17:49:06 <jemfinch> linkage?
17:49:06 <xbill> not that great though
17:49:07 <shapr> http://www.latrobe.edu.au/philosophy/phimvt/joy.html
17:49:07 <shapr> I like it
17:49:07 <shapr> it has a nice feel to it
17:49:07 <shapr> dash says it has some resemblance to Forth
17:49:16 <shapr> xbill: you know it?
17:49:24 * jemfinch never liked forth, it seemed forth focuses too much on being ugly.
17:49:27 <jemfinch> I liked the idea, though.
17:49:48 <jemfinch> shapr: more on phantom types: http://www.cs.uu.nl/~daan/papers/dsec.html
17:49:49 <shapr> xbill: the language is not that great? or its resemblance to Forth?
17:50:12 <xbill> the language is not that great
17:50:18 <shapr> oh
17:50:23 <shapr> what don't you like about it?
17:51:54 <jemfinch> is it strictly typed?
17:52:00 <shapr> In particular we apply this idea to implement Haskell/DB, a domain specific embdedded compiler that dynamically generates of SQL queries from monad comprehensions, which are then executed on an arbitrary ODBC database server.
17:52:02 * shapr grins
17:52:04 <shapr> cute
17:52:30 <shapr> I don't know what strictly typed means.
17:52:40 <jemfinch> shapr: it means that typechecking happens at compile time.
17:52:46 <jemfinch> and improperly typed programs can't be compiled.
17:52:59 <shapr> I don't think so
17:53:07 <jemfinch> it's one of the things that makes programming in languages like O'Caml and Haskell so safe.
17:53:27 <shapr> I'm not convinced that strict typing is useful.
17:53:33 <jemfinch> if you continue programming in haskell, you'll soon discover that when your program compiles, it has a much smaller set of possible runtime errors than your python programs.
17:53:45 * shapr shrugs
17:53:54 <shapr> I rarely ever have runtime errors in Python
17:54:05 <jemfinch> if only everyone was as good a programmer as you, shapr :)
17:54:33 <shapr> it has more to do with test first
17:54:33 <jemfinch> do you have runtime errors in testing?
17:54:45 <shapr> only purposeful ones
17:55:12 <jemfinch> well, think of strict typing as a kind of testing that does complete code coverage tests for certain classes of bugs.
17:55:21 <shapr> yah, I know what it is :)
17:55:29 <shapr> Python is by no means the only language I use.
17:55:44 * jemfinch checks what channel he's in.
17:55:45 <shapr> I'm still not convinced it has any advantages.
17:56:04 <jemfinch> shapr: there are certainly advantages.
17:56:04 <xbill> it has tons of advantages for optimizations
17:56:16 <shapr> ah, now *that* I can believe
17:56:24 <jemfinch> shapr: there are also disadvantages, and deciding whether they're worth it or not is *your* decision.
17:56:25 <shapr> but types can be inferred
17:56:38 <jemfinch> for me, the advantages of static typing far outweigh their disadvantages.
17:56:55 <shapr> right, I'm not sayng that *you* should you dynamically typed languages
17:57:02 <shapr> just talking about what works for me
17:57:07 <jemfinch> shapr: dynamically typed languages are almost invariably type inferring.  O'Caml and Haskell both are type inferring too, you know :)
17:57:17 <shapr> yup
17:57:19 <shapr> I like that
17:57:49 <shapr> though I am also aware there are situations where explicitly typing a function will greatly improve performance
17:57:50 <jemfinch> it's not that static typing doesn't have advantages, it's just that for you, the decreased flexibility might not be worth the extra safety.
17:58:23 <jemfinch> shapr: in O'Caml, there's not too much a difference in performance between polymorphic and specifically-typed functions, I don't think.
17:58:38 <jemfinch> shapr: I'm having trouble following which languages you're talking about when you're making statements about stuff :)
17:58:53 <shapr> yah, I can understand that.
17:59:19 <jemfinch> of course, strictly typed languages are less reflective than dynamically typed languages.
17:59:30 <jemfinch> but they're also faster, because they don't have to carry around type information.
18:00:44 <shapr> so maybe the solution is to write dynamically type languages in strictly typed languages
18:00:54 <shapr> and just use whatever level appeals to you at the moment.
18:00:58 <jemfinch> well, then you lose the safety of the strict typing.
18:01:33 <jemfinch> really, if you're comfortable enough to write a dynamic typesystem in a strictly typed language, you'll almost always feel more comfortable in the strictly typed language :)
18:01:46 <shapr> ?
18:01:59 <jemfinch> which part are you questioning?
18:02:22 <shapr> that sounds you're saying "if you wrote Python in C, you'll be more comfortable in C"
18:03:05 <jemfinch> shapr: you'd be at least as comfortable in C, definitely...now, there's a very large difference between the *level* of Python and C, though.
18:03:33 <jemfinch> at least in the case of O'Caml, there's not a significant difference in the level of the dynamic language and O'Caml itself.
18:03:58 <jemfinch> because O'Caml has almost all those facilities Python offers, sans the reflection.
18:04:00 <shapr> I suspect that depends on the language you write
18:04:25 <jemfinch> I suppose so, but to get much higher level than O'Caml, you'd probably have to restrict your language to a smaller domain.
18:04:36 * shapr disagrees
18:04:46 <shapr> I'm not saying I know of a better language
18:05:06 <shapr> I'm just saying that programming in general has a long way to go till we're past the assembly level stage
18:05:39 <jemfinch> shapr: my only point is that if you implemented Python in O'Caml, you really wouldn't gain any new capabilities -- you might make a few small decreases in LoC, but aside from that, you wouldn't have any really sigificant features that O'Caml doesn't have already.
18:06:10 <jemfinch> whereas with C, Python provides significant facilities that C doesn't -- resizeable lists, lots of cool string ops, etc.
18:10:25 <jemfinch> so no one here knows about phantom types much?
18:10:35 <shapr> not me
18:10:50 <xbill> C's a sugared assembler dressed up to look machine independent (which it isn't).
18:11:02 * shapr agrees
18:11:52 <shapr> hmm
18:12:01 <shapr> ghc compiles on linux and windows
18:12:11 <shapr> I wonder if it could compile binaries for the SymbianOS
18:12:16 <shapr> that runs on the Psion
18:42:43 <jsw> perhaps try an extra set of []' around [first_chunk char string] in your example.
18:43:37 <jsw> just guessing.  I think that ++ wants to add two lists toghether, but the rhs isn't the
18:43:44 <jsw> same kind of list as the lhs.
18:44:07 <jsw> s/[]'/[]'s/
19:12:03 <jsw> maybe someone can help me with a question?  Inspired by the conversation, I wrote a tail recursive split function like
19:12:10 <jsw> split :: Char -> String -> [String]
19:12:10 <jsw> split sep s = split_ s [] []
19:12:10 <jsw>   where
19:12:10 <jsw>     split_ :: String -> String -> [String] -> [String]
19:12:10 <jsw>     split_ []     hunk acc = reverse ((reverse hunk):acc)
19:12:10 <jsw>     split_ (x:xs) hunk acc
19:12:12 <jsw> 	| sep == x  = split_ xs []       ((reverse hunk):acc)
19:12:14 <jsw> 	| otherwise = split_ xs (x:hunk) acc
19:12:48 <jsw> but noticed that Prelude.lines does something similar, in a non-tail recursive way.
19:13:32 <jsw> the tail recursive method requires that the lists be re-scanned, but that seems to undo the advantages of the tail recursion.
19:14:00 <jsw> (re-scanned to do the reverse)
19:14:31 <jsw> but I was wondering which is usually the better way to go in a case like this?
22:15:15 <jemfinch> jsw: as long as you stay under the stack limit, the non-tail-recursive, non-reversing way is almost always faster.
22:38:50 <jemfinch> anyone here know about phantom types?
22:47:22 <jsw> thanks!
22:47:34 <jsw> bye for now
