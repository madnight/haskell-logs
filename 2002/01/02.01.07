02:48:11 <shapr> hi
02:48:19 <shapr> hi lodewijk
02:48:26 <shapr> I don't think I've seen you on here before
02:48:40 <shapr> are you learning Haskell? or already using it?
03:11:54 <shapr> hoi lodewijk, hoe gaat het met je?
03:28:24 <shapr> hi julien
03:28:25 <shapr> what's up?
03:36:12 <julien> hi shapr
03:36:18 <julien> happy New Year
03:36:59 <shapr> hi julien, happy new year to you too
03:37:19 <shapr> have you done any new haskell code?
03:37:29 <shapr> I stayed up late last night reading about type classes
03:37:34 <shapr> I think I understand them
03:37:42 <shapr> I'm not quite sure how to use them yet
03:37:46 <shapr> or maybe I do know.. I'm not sure
06:11:31 <shapr> hi teek
06:28:18 <shapr> hi
06:28:29 <shapr> aleksi: does mtv3.fi use haskell?
06:28:44 <aleksi> hello
06:28:54 <aleksi> shapr, I really don't know
06:29:03 <aleksi> I'd guess they don't but can't say for sure
06:29:07 <shapr> oh, I thought you worked for them or something :)
06:29:20 <aleksi> it's my home connection (adsl) going through their servers
06:29:24 <shapr> oh cool
06:29:29 <shapr> I watch mtv3.fi pretty often
06:29:29 <aleksi> but it surely would be cool
06:29:47 <aleksi> I ended up here through http://www.pragmaticprogrammer.com/loty/
06:29:49 <shapr> gah, "pretty often" is bad english
06:29:54 <shapr> oh! nice to see you!
06:29:54 <aleksi> in case you haven't heard about it before
06:30:04 <shapr> I heard about it last night for the first time
06:30:13 <shapr> I just joined the pragprog list on eGroups today
06:30:24 <shapr> I love the PragProg book
06:30:35 <aleksi> though I have had "had to learn some haskell" for couple of years now, first efforts during autumn
06:30:46 <shapr> then you may know more than I do
06:30:56 <shapr> I'm still learning
06:31:10 <aleksi> shapr, actually I haven't even started yet :)
06:31:32 <shapr> oh I see
06:31:35 <shapr> "had to learn"
06:31:37 <shapr> I get it
06:31:39 <aleksi> oh, you do some lojban too?
06:31:43 <shapr> yup
06:31:58 <teek> hi both of you, I've never heard of pragprog before. Is there large community behind that ?
06:32:00 <aleksi> for a long time?
06:32:10 <aleksi> are you finnish?
06:32:11 <shapr> aleksi: much like you and haskell ;)
06:32:19 <shapr> nope, I'm American, living in Tornio
06:32:27 <teek> i'm Finn, shapr's not 
06:32:29 <aleksi> teek, can't say if there's any community yet
06:32:31 <aleksi> but I guess it's getting bigger should there be one :)
06:32:41 <aleksi> shapr, oh, that's great! :)
06:32:42 <shapr> I spoke to chad and dblack last night on #loty
06:33:03 <aleksi> so funland populate this channel do they ?)
06:33:09 <shapr> sure, why not
06:33:22 <shapr> .fi is the hippest geeky country in the world, right? :)
06:33:22 <aleksi> shapr, I found out about today, so not much experience
06:33:31 <shapr> about lojban?
06:33:51 <shapr> or #haskell? or #loty?
06:33:56 * shapr has scoping problems
06:34:30 <aleksi> shapr, #loty I mean
06:34:34 <shapr> oh
06:34:47 <aleksi> I thought to learn a language two years ago, but then I choosed ruby
06:34:50 <shapr> I learned about it yesterday
06:35:03 <aleksi> last year was too busy, so this year it's time for #haskell
06:35:05 <shapr> I chose Scheme two years ago, but I didn't get very far into it.
06:35:14 <shapr> I've learned some elisp though
06:35:20 <aleksi> ocaml being a second contender
06:35:41 <shapr> I've heard good things about ocaml also
06:35:49 <aleksi> shapr, hmm.. I guess I should have said I tried a little lisp and ML last year, but didn't go very far, no coding almost
06:36:23 <teek> ocaml is pragmatic, but haskell is better, if the main purpose of learning is to think in new ways 
06:36:23 <shapr> I've actually done coding for Haskell
06:36:39 <shapr> for me, haskell is about learning new thought patterns
06:37:22 <shapr> I've only written one chunk of code so far though
06:37:44 <shapr> and it doesn't look much like a functional programmer wrote it.
06:37:53 <shapr> http://kungens.kemi.fi/~shae/Mandelbrot.hs
06:41:13 <aleksi> shapr, are you sure you're erisson ?=
06:41:14 <aleksi> )
06:41:46 <shapr> er, yes... why?
06:42:18 <aleksi> it's sounds just so swedish and they have it ericson :)
06:46:03 <shapr> well, it's not swedish...
06:46:09 <shapr> it's american ;)
06:46:56 <shapr> where did you pick up my last name? from my webpage?
06:51:38 <aleksi> shapr from the snippet you just posted
06:51:50 <aleksi> quite a lot of code, although to some extent quite clear
06:51:56 <aleksi> other parts, not too much
06:52:09 <shapr> oh
06:52:26 <shapr> I'd be happy to explain it if you wish :)
06:55:16 <aleksi> shapr, have you measured the speed of your program?
06:55:33 <shapr> nope
06:56:10 <shapr> dennisb profiled it for me once
06:56:10 <shapr> that was nifty
06:56:10 <shapr> If I need more speed, I know I can switch to using the Array module
06:59:09 <shapr> I'm using debian, and I think the ghc5.02.00 for debian was built without profiling enabled
08:09:21 <shapr> re
08:09:50 <shapr> did I miss anything exciting?
08:44:32 <jewel> uhuh
09:54:09 <shapr> hi!
09:55:38 <jewel> hey shapr
09:55:39 <shapr> anyone awake?
09:56:07 <shapr> hey jewel, what's up?
09:56:16 <jewel> I'm busy investigating Java bindings for sdl
09:56:45 <shapr> anything interesting?
09:57:07 <shapr> I'm investigating type classes in Haskell
09:57:21 <jewel> not yet
09:57:26 <jewel> what do you mean 'type classes'?
09:58:27 <shapr> it seems that part of programming in Haskell is creating your own types
09:58:51 <shapr> like when I wrote Mandelbrot.hs, xbill advised me to create a MandelData type
09:59:08 <shapr> so you can add a type to a 'class'
09:59:18 <shapr> but it works kind of like a java interface
09:59:23 <shapr> Eq is a 'class'
09:59:38 <shapr> and it requires the type to implement methods == and /= (equals and not equals)
10:00:04 <shapr> and Ord (ordered type) builds on Eq
10:00:19 <shapr> it extends it to include > < >= <= etc
10:00:45 <shapr> so I was thinking how I could create my own types, type classes, and what methods I would define on them
10:01:14 <shapr> oh, you can type your functions with Eq, Ord, and any other type class
10:01:41 <shapr> best thing I've been able to come up with is the Food type class, with methods, 'sucks' and 'nifty'
10:01:43 <shapr> :)
10:06:28 <jewel> hehe
10:06:50 <jewel> Yeah I think encountered classes somewhere when wanting to print out data
10:07:00 <jewel> I think there is a say method or something in some class
10:07:44 <shapr> I read about Show and Visible last night
10:07:48 <jewel> I was wondering last night when reading and working through my scheme books whether it is possible to create strucured data types with names (as in Java,C etc)
10:07:52 <jewel> Show, that's it
10:08:07 <shapr> what do you mean?
10:08:15 <shapr> strucured data types with names?
10:08:24 <shapr> like struct?
10:08:29 <shapr> 'complex' types?
10:08:29 <jewel> Types with fields that you can access by naming the field
10:08:31 <jewel> yeah
10:08:53 <jewel> in scheme (AFAIK) you have to define a method which does the relevant car (cdr (car (car ))) etc
10:09:03 * shapr thinks
10:09:11 <shapr> I'd bet you can use type classes to do that
10:09:37 <shapr> instead of implementing == just implement getValue
10:09:39 <shapr> stuff like that
10:09:53 * shapr tries it
10:10:14 * shapr gets out his book
10:12:30 * shapr turns up the music
10:17:00 * jewel is going to insert a hard disk and reboot (in some order)
10:18:13 <shapr> hrm
10:18:13 <shapr> I think I've got most of it
10:18:13 <shapr> ok, here's what I have so far:
10:18:13 <shapr> class NamedMethod a where
10:18:13 <shapr>     getX :: a
10:18:13 <shapr>     getY :: a
10:18:13 <shapr> instance NamedMethod a where
10:18:13 <shapr>     getX (x,y) = x
10:18:13 <shapr>     getY (x,y) = y
10:18:13 <shapr> but I got the instance part wrong
10:18:13 <shapr> I think I need to explicitly add certain types to the class NamedMethod
10:18:13 <shapr> is this what you were asking for?
10:27:00 <shapr> anybody with a greater clue than I here?
10:27:48 <shapr> I'd like to create a type class, NamedMethod
10:28:07 <shapr> I thought I'd have it be a two part tuple, with methods getX and getY
10:28:42 <shapr> oh
10:29:01 * shapr finds the problem
10:37:47 <shapr> re!
10:38:03 <jewel> hi
10:38:11 * jewel curses "modern hardware"
10:38:16 <shapr> it didn't work btw...
10:38:21 <shapr> I'm not exactly sure why not
10:38:25 <shapr> what's up with your hardware?
10:38:27 <jewel> what didn't?
10:38:35 <jewel> Just hard disks failing
10:38:44 <shapr> the type class I was trying to whip up
10:38:45 <jewel> but the issue I have is with how cumbersome the process is
10:39:03 <jewel> how do you determine white belt status?
10:39:23 <shapr> I wrote a program that worked ;)
10:39:28 <shapr> no matter how tiny
10:40:20 * shapr points to Mandelbrot.hs
10:40:20 <shapr> want me to add you to the list?
10:41:40 <jewel> sure
10:41:59 <jewel> But I think your program is more than one that "just works"
10:42:01 --- topic: set to 'Functional Programming, that's the opposite of Dysfunctional Programming (like VB) | we be loggin' http://tunes.org/~nef/logs/haskell/ | welcome to the Haskell Dojo | jewel, julien, and shapr are up to white belt!' by shapr
10:43:22 <shapr> well, close enough
10:43:43 <shapr> now if I could just figure out type classes
10:43:46 <shapr> hmmmm
10:43:50 * shapr reads it again
10:44:14 <shapr> maybe if I defined a firstItem method on a new type?
10:44:23 <shapr> oh wait, I could do the foods example
10:47:55 <shapr> hrm
10:48:55 * jewel tries to work on porting JRVM to classpath
10:49:21 <shapr> what's JRVM?
10:49:21 <shapr> ERC>java runtime virtual machine? 
10:49:33 <shapr> oh, classpath is the gnu java lib
10:50:56 * shapr reads the type class bit even more
10:51:18 <shapr> grrrr
10:51:44 <shapr> I wish I had a more flexible interactive interpreter for Haskell
10:51:50 <shapr> maybe I should switch to hugs
10:51:58 <jewel> jikes research virtual machine
10:52:04 <jewel> it's a compiler-driver IBM Java VM
10:52:07 <jewel> driven
10:52:26 <shapr> wow, sounds nifty
10:52:32 <shapr> jikes is the best javac I've seen yet
10:53:32 <shapr> sounds like having a gcj-jit-jvm... or something
10:54:03 <jewel> You can think of it as a JIT-only VM
10:54:17 <jewel> But it has dynamic optimising compilers like Hotspot
10:54:22 <shapr> ok, I can't use a type class to define a method on a complex type.. only a basic type, no synonyms
10:54:48 <shapr> hm
10:56:46 <shapr> nice
10:59:47 <shapr> ok, I don't really know what to do with type classes.
11:01:29 * shapr gives it up and moves on
11:01:49 <shapr> I think I might be able to do it another way
11:01:55 <shapr> you're thinking of something like naming a field in an object?
11:02:31 <shapr> bye teek!
11:02:39 <jewel> yes
11:02:49 <jewel> Like pair.first and pair.second
11:03:30 * shapr thinks
11:03:33 <shapr> hi teek!
11:04:58 <teek> hi shapr, just lurking... doing other things same time ... 
11:05:05 <shapr> hey jewel, have you registered your nick with nickserv?
11:06:05 <jewel> yes
11:06:08 * shapr puts out anti-lurk pellets ;)
11:07:05 <shapr> oh, of course, you're founder of one the channels I hang out on
11:07:09 * shapr tries to remember which one
11:10:07 <shapr> hm, nickserv won't tell me
11:10:57 <jewel> lojban?
11:11:28 <shapr> oh, of course :)
11:11:31 <shapr> go'i
11:11:45 * shapr duhs
11:16:12 <shapr> oh oh, maybe I could use an ST monad to save a state
11:16:50 <shapr> lesse, someone on #haskell once told me that there's a variety of ST monad that expands in size as you put more state into it...
11:44:34 <shapr> where do I find docs for the ST module?
11:45:04 <shapr> hm
11:56:41 * shapr plays with input and output
11:56:57 <shapr> do p <- getLine
11:57:02 <shapr>     putStrLn p
11:57:04 <shapr> nifty
11:57:40 * shapr skips chapter 13
11:57:45 <shapr> unlucky ;)
11:58:18 <shapr> aha
11:58:36 <shapr> I woner if algebraic types will do what you wanted from an objcet
11:58:39 <shapr> er, object
12:08:53 <shapr> wheeee
12:09:09 * shapr plays with algebraic types
12:21:11 * jewel is hungry
12:21:20 <jewel> time to go zdani
12:25:49 * shapr waves
12:32:23 * shapr finds C-c = in haskell-mode
12:34:12 <shapr> spiffy
13:04:21 <shapr> mmm, recursive polymorphic algebraic datatypes
15:48:18 <nodie> hi
15:50:32 <nodie> hi
15:50:36 <Slashdog> hi
15:50:46 <nodie> i'm learning haskell
15:50:54 * Slashdog is just passing by today :)
15:50:58 <Slashdog> great ;-)
15:51:07 <nodie> i see haskell in a function programming course in university
15:51:11 <nodie> but
15:51:17 <Slashdog> yes...
15:51:20 <nodie> i don't see is future
15:51:38 <nodie> why i must continuing learnig haskell?
15:51:52 <Slashdog> eh, not sure if you *must* :-)
15:52:19 <nodie> this is the cuestion
15:52:27 <Slashdog> that's a pretty hard question... lots of discussions about how usefull languages like haskell are, are always happening
15:52:37 <nodie> but
15:52:44 <nodie> investigation on haskell is big
15:52:48 <Slashdog> why don't you go to the archives of the comp.lang.functional newsgroup
15:52:51 <nodie> and microsoft is interesting....
15:52:55 <nodie> no
15:53:00 <nodie> news not...
15:53:06 <Slashdog> and search for past threads on that
15:53:07 <nodie> xD
15:53:14 <nodie> i want
15:53:33 <nodie> the opinion of someone who is in haskell world today
15:53:57 <Slashdog> well... it is pretty powerfull in the expressivness sense
15:53:58 <nodie> are companies injecting money in haskell investigation?
15:54:40 <Slashdog> that is... in a couple of lines you can code a program that would take *much* more code lines in an imperative or OO language
15:54:48 <nodie> but
15:54:59 <nodie> i saw big programs in haskell
15:55:04 <Slashdog> it's semantics makes it easier to prove correctness of programs
15:55:09 <nodie> and they look like unreadble!
15:55:35 <Slashdog> any language you don't know looks unreadable
15:56:30 <Slashdog> you got to learn it to appreciate it ;-)
15:56:49 <Slashdog> and I got to go cause I got lots of stuff to do :-)
15:56:53 <Slashdog> see ya!
15:56:58 <nodie> ok
15:57:02 <nodie> thx
17:05:05 <nodie> bye
