01:59:09 <shapr> good morning!
02:00:07 <shapr> hi kepler, I don't think I've seen you here before, are you learning haskell? or are you an experienced haskell programmer?
04:24:41 <shapr> whee
04:24:44 * shapr bounces
04:36:31 <jewel> hey shapr
04:40:42 <shapr> coi djul
04:40:44 <shapr> do mo
04:51:38 <jewel> working as usual
04:51:52 <jewel> this morning we came here to find all hell had broken loose in our nightly run
04:52:23 <jewel> very embarrassing (since the client found the problems)
04:53:24 <shapr> er, do you ship your code to the client before testing it?
05:41:22 <jewel> no, we work onsite
05:41:49 <jewel> but they have the scripts that examine the data in the database
05:42:00 <jewel> so we can only  find problems by looking for them manually
05:42:16 <jewel> kepler chatted to me once
05:42:30 <jewel> I think he would qualify several belts above white :-)
05:56:48 <jens> hi there
05:57:58 <shapr> hello
05:58:05 <jens> can anyone give me a hint, how to read command-line parameters in haskell programs ? :)
05:58:52 <jens> just point me to a snippet of documentation ;) - that would be enough 
06:02:04 <shapr> er, I don't know of any immediately
06:02:04 <shapr> I haven't gotten that far
06:02:05 <shapr> have you looked in the libary docs?
06:05:02 <teek> something like this, inside monad: [a1, a2] <- getArgs
06:05:15 <shapr> aha
06:05:27 <shapr> System.getArgs
06:05:50 <jens> ah - thanks - thats what i needed ;) - googling again :)
06:05:50 <teek> check IO module docs from Haskell web pages. getArgs is defined there
06:06:19 <teek> or was it in System ? shapr ? 
06:06:37 <jens> seems to be system
06:06:51 <jens> http://www.haskell.org/onlinelibrary/system.html
07:44:33 <shapr> whee
08:22:03 * shapr reads about Monads
08:33:23 * shapr thinks of Monads as rings on a string that can slide back and forth but not over each other
08:44:02 * shapr does not quite understand
08:49:18 <shapr> anyone awake who understands Monads?
09:12:52 <shapr> anyone here used the ST monad before?
14:14:43 <shapr> hi, anyone awake?
16:12:17 <xbill> anybody have a primality checker?
21:49:02 <gumleef> can someone tell me why i should learn haskell?
21:49:34 <gumleef> ie. its pros, cons, etc
21:50:45 <xbill> I just use it, I'm not an advocate.
21:51:55 <gumleef> well, how bout some of its features then
21:52:27 <xbill> it's a lazy functional language
21:52:39 <xbill> which means dealing with infinite structures is easier
21:53:13 <gumleef> so it would be good if i wanted to map out the universe...
21:53:20 <xbill> primes = 2:3:5:[ p | p <- [7,9..], all (\q -> p `mod` q /= 0) [q | q <- (takeWhile (<=(ceiling . sqrt . fromInteger $ p)) primes) ] ]
21:53:32 <xbill> that right there defines the list of all prime numbers
21:53:40 <gumleef> nice
21:53:44 <xbill> it's polymorphic and has type inference
21:53:57 <xbill> which means you get C++ templates with the convenience of not having to declare them
21:54:05 <xbill> it also has overloading
21:54:31 <xbill> which means you define a function on any type supporting a given interface
21:54:43 <gumleef> yup, i know what overloading is
21:55:12 <xbill> it has higher-order functions, which means you can create functions on the fly
21:57:25 <xbill> e.g. f n = (\ x -> x + n) is a function which takes a number n and returns the function that adds n to a number 
21:57:50 <xbill> it has user-definable operators
21:58:11 <xbill> anything made up of punctuation can be an operator
21:58:47 <gumleef> does it interact well with other languages?
21:59:07 <xbill> e.g f #$^&@* g = \x -> f (g x) defines a function #$^&*
21:59:16 <xbill> er an operator
21:59:42 <xbill> it works okay with C but I personally don't feel it is very strong with that
22:00:59 <gumleef> well, thanks for ur time. im off to read a tute!
22:48:57 <shapr> xbill: your "I just use it" talk is what we should give to every prospective user :)
23:04:34 <shapr> hi jsw
23:05:03 <jsw> hi
23:05:16 <shapr> looking for haskell info? or are you already a haskell programmer?
23:05:45 <jsw> just a beginning haskell programmer, sometimes I find interesting conversation here.
23:05:51 <jsw> not quite ready to start any yet.
23:06:36 <shapr> ok :)
23:25:40 <jsw> bye all
