00:22:52 <julien> hi all
00:22:56 <shapr> hi julien 
00:22:58 <shapr> what's up?
00:23:22 <julien> nothing special
00:23:54 <shapr> Heffalump helped me figure out QuickCheck yesterday
00:24:15 <shapr> it's for testing functions
00:24:17 <shapr> interesting stuff
00:24:18 <julien> what is QuickCheck ?
00:24:46 <shapr> the QuickCheck approach really shows how Haskell approaches programming from the mathematical perspective
00:26:04 <julien> is it an algorithme ?
00:26:45 <shapr> kind of
00:26:55 <shapr> you tell it the property to 'prove' for your code
00:27:10 <shapr> and the types your code can take, and then it generates X random cases of input
00:28:27 <julien> do you have bits of code about that ?
00:28:46 <shapr> not right here, but the ICFP paper about QuickCheck is very nifty
00:28:59 * shapr looks for the url
00:30:01 <shapr> http://www.cs.chalmers.se/~rjmh/QuickCheck/
00:30:08 <julien> k
00:30:14 <shapr> the manual is disappointing, but the ICFP paper is cool
00:35:48 <julien> One argument to use haskell at work :-)
00:35:53 <shapr> heck yeah
00:54:42 * teek is away: Odd. I've something to do.
04:22:36 <dmiles> http://www.volker-wysk.de/mysql-hs/index.html
04:23:14 <dmiles> Haskell MySQL interface
04:28:26 <shapr> cool, MySQL
04:28:55 <dmiles> i am going to hack that to make a Haskell calls SWI-Prolog
04:29:35 <shapr> nifty
04:29:42 <shapr> is there already a prolog mysql interface?
04:29:50 <dmiles> yes
04:30:09 <dmiles> but its only to mySQL OR MSSQL
04:30:19 <dmiles> not crossoplatform
04:31:05 <dmiles> my work commisioned me to spend a few days with Swi-Prolog to Java to add Java<->Any DB
04:31:28 <dmiles> * <-> Java anytyhing is pretty powerfull 
04:31:41 <dmiles> sicne java can arbitrate conversions in them
04:31:53 <dmiles> err btween two *'s
04:31:57 <shapr> who do you work for?
04:32:13 <dmiles> a university research company
04:32:18 <shapr> I wish I could persuade my work to let me do some Haskell
04:32:24 <shapr> I think I'd enjoy that
04:32:29 <dmiles> we specialize in defense dept applications
04:32:34 <shapr> oh
04:32:34 <shapr> wow
04:32:46 <shapr> I bet I'd love to read your project  list
04:33:22 <dmiles> i can show you tweo i work on (actually the only one working on :( )
04:33:35 <shapr> yah sure!
04:33:38 <dmiles> so irc keeps me less lonely
04:33:42 <shapr> I know about the massive inference engine
04:33:51 <shapr> dmiles: don't you work with anyone else? or only by yourself?
04:34:30 <dmiles> http://reliant.teknowledge.com/CPR/ http://reliant.teknowledge.com/RKF/ 
04:34:38 <dmiles> everyone else left
04:34:43 <shapr> why?
04:35:04 <dmiles> my projecrt mananfger is too demanding i guess
04:35:46 <dmiles> 2 have left becasue i work 24/7 and they say it makes them look lazy to him
04:36:15 <dmiles> but now i have a new helper .. who is a c++ guy.. i dont know what to think
04:36:44 <dmiles> at least he wont mess up my java and prolog parts of cvs ;P
04:37:33 <dmiles> HPKB -> CRP -> RKF -> DAML now
04:37:40 <dmiles> err CPR
04:37:49 <dmiles> you notice they all work off each other
04:38:35 <dmiles> actually CPR2 is more realivant
04:38:44 <dmiles> asll off base url
04:38:52 <dmiles> those are what the projects are
04:39:18 <dmiles> fun stuff 
04:39:29 <jewel> Is RKF focussing on biological weapons?
04:39:53 <dmiles> just database to wherehouse human knowledge like CYC
04:40:11 <dmiles> not targeted towards any final use case
04:40:43 <shapr> dmiles: I hope  you're paid more than $60,000 USD per year
04:40:47 <shapr> you deserve it
04:41:00 <dmiles> a little more stiull under $100
04:41:12 <dmiles> about inbetween to be exact
04:41:13 <shapr> $80,000 ?
04:41:16 <dmiles> hehe
04:41:17 <shapr> cool :)
04:41:28 <shapr> I get USD $36,000
04:41:33 <shapr> per year
04:41:38 <dmiles> buty that is not much money for it.. compared to insane wages other people make
04:41:50 <dmiles> and yours is livable
04:42:05 <dmiles> mine is surplus
04:42:52 <dmiles> some people in the industry make $140,000
04:43:05 <shapr> I'd like to make more money
04:43:15 <shapr> but I doubt it will happen where I live.
04:43:26 <shapr> and money really isn't that important to me
04:43:32 <shapr> knowledge is
04:44:03 <dmiles> yeah exactly
04:44:10 <dmiles> .. to me the mmore tools i can make, the better
04:44:14 <shapr> yup
04:44:28 <shapr> for me it's understanding I focus on
04:44:32 <shapr> I want to understand it all
04:44:48 <dmiles> i am working on mergingg some of the work into a online text advanture mud..
04:44:55 <jewel> but there's a lot of stuff in the document about BW
04:44:56 <shapr> for example, reading about the functional programming language Joy made many things about both Haskell and procedural programming come clear to me
04:45:02 <shapr> BW?
04:45:09 <shapr> oh
04:45:09 <jewel> Biological Weapons
04:45:10 <shapr> bio
04:45:12 <shapr> I see
04:45:13 <shapr> scary stuff
04:45:44 <dmiles> jewel, mainly gives scenario cases.. it was funded via fear of Bw ;P .. but goes much deeper
04:46:28 <jewel> it looks like a very ambitious project
04:46:47 <dmiles> so for example right now homeland security me fiund research.. but the researchers are not digging ort care to dig thru peoples trash cans
04:47:10 <dmiles> but we still mayuse it as examples
04:47:24 <jewel> Anthrax Bacillus Expert E just relocated from University F in City G to University H in city I where Doomsday Cult J is also located.  Can any associations be made between E and J, and what associations should analysts seek?
04:47:41 <jewel> Does this mean that the intelligence people are  watching people like this "expert E"?
04:48:40 <dmiles> possibly.. but i dont deal in 'spook' activities
04:48:56 <dmiles> i just care about making the data coolate
04:49:07 <dmiles> err colate
04:49:13 <shapr> scary stuff
04:49:25 <dmiles> i see more application in onluine roleplaying gqames
04:49:32 <jewel> did you do any textbook evaluations?
04:49:34 <shapr> I'd like to feed in Bill Gates and the Halloween documents
04:49:52 <shapr> dmiles: what rpg applications?
04:50:05 <jewel> but your employers aren't interested in rpgs?
04:50:28 <shapr> will you be releasing your code as lgpl?
04:50:35 <dmiles> one is this.. http://logicmoo.sourceforge.net/ <- its very old.. take MS COM/ActiveX and replace with java
04:50:42 <dmiles> yes
04:50:46 <shapr> spiffy
04:51:02 <dmiles> the data the gov uses of course is not lgpl ;:
04:51:08 <dmiles> but the engines will be
04:51:17 <shapr> no surprise about govt data
04:51:22 <shapr> I hope I'm not in their data
04:51:23 <xbill> re dmiles
04:51:24 <dmiles> then we corner thwe market for "who to fund" research
04:51:29 <xbill> how goes the battle?
04:51:33 <dmiles> good!
04:51:36 <shapr> xbill: we're winning!
04:51:42 <dmiles> i found some mistakes
04:51:56 <dmiles> i am allowiung it to searcgh for skolems...
04:52:01 <jewel> dmiles: you don't worry about being the creator of 'big brother' tools?
04:52:09 <dmiles> ionstead it never should serach.. only give
04:52:20 <xbill> oic
04:52:24 <dmiles> so all rules with skoklems in antecedant are being diabled
04:52:54 <dmiles> however skelems are valid constraints.. since they unify with rules that give them
04:53:29 <dmiles> so i was able to sut search space down by 50% .. speed up 33% by not using lists
04:53:42 <dmiles> that kicks ass
04:53:56 <dmiles> but now 'packaging' it up and finding bugs
04:54:02 <xbill> Mercury code runs etc.?
04:54:14 <dmiles> not yet investigated it further ;<
04:54:25 <dmiles> been having too much low hanguiing fruit
04:54:35 <dmiles> which is stuill a good thing
04:54:51 <dmiles> and i have not doene anything that cuts mercury out
04:55:17 <dmiles> i need to make a merk call/1 from java interface
04:55:31 <dmiles> i need to see a native prolog interpretor written in merc
04:55:35 <dmiles> that would kicjk ass
04:56:01 <dmiles> then i want to specialize backwards
04:56:39 <dmiles> thats probly the quickest path to solving my probelems
04:57:10 <dmiles> is that a possible .m program?
04:57:25 <dmiles> prolog_interp.m :)
04:57:26 <xbill> probably, not sure
04:57:39 <xbill> prolog_interp.m is quite possible.
04:58:16 <dmiles> thats something i should send to the list.. 
04:58:25 <dmiles> is a requesty to see something like it
04:59:31 <jewel> what is mercury?
05:00:08 <dmiles> its a very good declaritive/fucntional language to C generrator
05:00:27 <dmiles> looks a bit like prolog
05:00:57 <dmiles> adds some features that make your code seem more manangable as well
05:01:24 <dmiles> ig. adds some packaging features
05:01:41 <jewel> what makes it so fast?
05:02:00 <dmiles> meanly by forcing you into datatype boxes
05:02:10 <dmiles> and good code geenration
05:02:37 <dmiles> takes a functional programmer and makes them go from edenbrogh prolog to turbo prolog
05:02:55 <dmiles> turbo prolog is an old 'typed' prolog
05:03:22 <dmiles> that comes on 2 5.25" disks for a 386
05:03:44 <dmiles> hehe
05:04:03 <dmiles> but since its so fast and scaled up (mercury) you have to love it
05:04:13 <shapr> after Haskell
05:04:17 <shapr> I'll learn it
05:04:42 <shapr> are there already SUO-IEEE libs for Haskell?
05:05:03 <dmiles> hrrm needs to be!
05:05:06 <jewel> The compiler's type, mode and determinacy checkers have together prevented several hundred bugs in the compiler itself.
05:05:09 <dmiles> you should write some
05:05:15 <jewel> I don't know what hte last two are
05:05:54 <dmiles> i would love to see suo-ieee language impleentation in haskell
05:06:04 <shapr> dmiles: currently I'm going back and forth in the Thompson book till I understand what it has to say
05:06:19 <shapr> and hanging out in the "Learn Haskell" areas
05:06:27 <shapr> like here
05:06:50 <dmiles> hehe.. i hang here becasue xbill answers my questions.. and i want to learn Haskell ;P
05:06:55 <xbill> dmiles: Haskell is pretty =)
05:07:07 <shapr> xbill: have you seen Joy?
05:07:24 <shapr> I had this functional programming epiphany in the last four days...
05:07:33 <shapr> in Haskell, the space is pretty much an operator
05:07:38 <shapr> it means function application
05:07:54 <shapr> in Joy, the space is the same as . in Haskell
05:07:58 <shapr> function concatenation
05:08:42 <shapr> suddenly I got this big lightbulb over my head as I realized that every language has to have these kinds of built-in ideas about how the world works
05:09:25 <shapr> I asked a friend of mine about the equivalent stuff in the procedural world, he pointed out how Smalltalk and Self have the single call type 'message' no matter what they're addressing, data or method
05:09:50 <shapr> and he mentioned that K and J use monadic and dyadic operators
05:10:00 <shapr> (not that I have a clue what that one means)
05:10:21 <shapr> ok, I'm done with todays randomly interesting exposition.
05:11:29 <shapr> any comments or responses? similar or opposite thoughts?
05:12:08 <dmiles> yeah messaging stuff its a start towards a desing that bolsters awarness of agent oreineted programming (AO) as welol as OO
05:12:20 <shapr> desing?
05:12:27 <dmiles> designing
05:12:30 <shapr> ah
05:13:09 <shapr> I just hadn't yet noticed that *every* language has these built-in assumptions
05:13:28 <shapr> I'm beginning to realize that all of these structures are conventions, not basic rules about the world.
05:14:05 <dmiles> true
05:14:34 <shapr> for example, non-preemptive threads can be implemented as coroutines with continuations
05:15:07 <xbill> they are conventions true
05:15:08 <dmiles> so it seems a distruibuted computing system is somehow a final goal
05:15:09 <shapr> so call stacks and functions returning are conventions
05:15:26 <shapr> and I'd like to play outside the box
05:15:36 <shapr> but it's not always easy to find tools that let me
05:16:16 <xbill> shapr: imagine a language where a queueing discipline is used for procedure activation instead of a stack discipline. =)
05:16:46 <shapr> how is that different from coroutines?
05:16:51 * shapr thinks
05:17:17 <shapr> queueing discipline == scheduler I think
05:17:19 <xbill> shapr: very
05:17:29 <shapr> procedure activation == function calls?
05:17:35 <xbill> shapr: yes
05:17:48 <shapr> stack discipline == functions being required to both return and to unwind the stack
05:17:50 <shapr> I think
05:18:25 <shapr> if you use coroutines to implement that, you end up with a tree of calls I think
05:18:40 <shapr> each coroutine is the equivalent of an application
05:18:49 <xbill> shapr: it's how you search the tree
05:19:00 <shapr> a scheduled tree?
05:19:18 <shapr> I can only think of coroutines that each use a stack discipline
05:19:27 <shapr> hm
05:19:28 <shapr> cool
05:19:46 <shapr> a queueing discipline would let you do the software equivalent of clockless logic I think
05:20:13 <xbill> shapr: stack-based == DFS
05:20:45 <shapr> DFS == deterministic finite state automata?
05:20:57 <xbill> shapr: of course, you have to be able to issue a call and not wait for it to finish for this to be useful...
05:21:05 <shapr> that's not too hard
05:21:10 <xbill> shapr: Depth First Searth
05:21:15 <shapr> oh
05:21:17 <xbill> Search
05:21:24 <xbill> shapr: think prolog
05:21:31 <shapr> I don't know prolog
05:21:37 <shapr> but I understand your DFS description
05:21:39 <xbill> you can do it in Haskell too
05:21:43 <shapr> that's a nifty way of looking at it
05:21:48 <shapr> very nifty
05:22:03 <xbill> you can basically schedule which reductions to do on which parts of the graph
05:22:28 <shapr> you use terms that are unfamilar to me
05:22:29 <xbill> but Haskell is already lazy so there is no advantage
05:22:55 <shapr> I think I see what you're saying
05:27:31 <xbill> Prolog has an execution model where this makes sense.
05:31:29 <dmiles> i once found a book that explians how to take a normal prolog and convert it out to a parallel system
05:32:33 <dmiles> it genrates multiple files that are run simulatani\ously
05:33:09 <dmiles> swi-prolog uis mnow ready wityh its threading system to run such code in tandem inside one engine
05:38:25 <xbill> nice
05:38:59 <shapr> what's the relationship 'tween Mercury and Prolog?
05:40:31 <xbill> Mercury is a strongly typed strongly moded Prolog with type classes.
05:45:51 <shapr> does that include backwards compatibility to Prolog, or some kind of emulation?
05:49:19 <xbill> not much backward compatibility but some, Prolog-like syntax anyway
11:05:04 --- topic: 'Functional Programming, that's the opposite of Dysfunctional Programming (like VB) | we be loggin' http://tunes.org/~nef/logs/haskell/ | welcome to the Haskell Dojo | jewel, julien, and shapr are up to white belt!'
11:05:04 --- topic: set by shapr on [Mon Jan 07 10:42:01 2002]
11:06:30 <shapr> re clog ;)
13:16:13 <shapr> wheee
