05:44:21 <shapr> wheee
07:34:55 <shapr> aw, jemfinch is gone
07:35:08 <shapr> I was going to show him this bit of code that compiles and does not work.
09:11:44 <shapr> y0 djul
09:12:58 <djul> hello
09:13:02 <shapr> what's up?
09:13:12 <shapr> I didn't know you were a debian maintainer... 
09:13:13 <djul> not much, just at the (other) office surfing
09:13:21 <shapr> though something tells me I should know that
09:13:23 * shapr thinks
09:13:30 <djul> yes I am (not a very good one though)
09:13:38 <shapr> I want to become one
09:13:43 <shapr> I just need to figure out how to build debs ;)
09:13:46 <djul> it's not hard
09:14:08 <shapr> hm
09:14:14 <shapr> what packages do you maintain?
09:14:37 <djul> not much important, I maintain the antlr java compiler compiler
09:14:41 <shapr> oh, cool
09:14:47 <djul> my JVM kissme (and the classpath libs for that)
09:15:07 <djul> and one or two other silly things I've written but haven't finished yet
09:15:48 <djul> There might be haskell related packages that have been orphaned
09:16:14 <shapr> oh, I remember I'd looked up the possible names for your future packages
09:17:27 <djul> did you and mister toad figure out the tokenizer?
09:17:37 <shapr> not really
09:17:53 <shapr> actually, PragDave wrote one
09:18:04 <shapr> and I've thought of several other ways to write one
09:18:12 <shapr> but I want to know why that way doesn't work
09:18:19 * shapr imitates a bulldog
09:18:37 <djul> PragDave's way doesn't work?
09:18:43 <shapr> oh it does
09:18:45 <shapr> it works fine
09:18:50 <shapr> so do the other ways I thought of
09:18:57 <shapr> but I want to *why* this way doesn't work
09:19:24 <shapr> are you busy?
09:19:30 <shapr> wanna look at the code?
09:19:33 <shapr> it's five line
09:19:35 <shapr> s
09:20:54 <djul> sure, but I don't have haskell access here
09:21:14 <shapr> I suspect the problem with this code is obvious, but I've been staring at it too long
09:21:19 <shapr> first_chunk char string = (takeWhile (/= char) string)
09:21:20 <shapr> second_chunk char string = (drop 1 (dropWhile (/= char) string))
09:21:30 <shapr> splitY char tokens string = splitY char 
09:21:31 <shapr> 			    (tokens ++ (first_chunk char string)) 
09:21:31 <shapr> 			    (second_chunk char string)
09:21:33 <shapr> that's it.
09:21:46 <djul> I'm not familiar with that /= operator
09:21:51 <shapr> it means not equal to
09:22:27 <shapr> when I run that with splitY ' ' "this is a test"
09:22:38 <shapr> er
09:22:51 <shapr> splitY ' ' [] "this is a test"
09:23:15 <shapr> I expect to get ' ' ["this","is","a","test"] ""
09:23:17 <shapr> in return
09:24:12 <shapr> but it just runs forever
09:24:33 <djul> of course, there isn't a base case for the recursion?
09:24:40 <shapr> er
09:24:45 <shapr> I hadn't put one in
09:25:11 <djul> I assume when string is empty you want to stop
09:25:25 <shapr> true
09:25:58 <djul> splitY _ tokens "" = tokens
09:26:34 <shapr> whoa
09:26:55 <shapr> awesome
09:27:00 <shapr> thanks djul!
09:27:02 <shapr> that fixed it!
09:27:11 * shapr bounces happily
09:27:17 * djul grins
09:29:52 <shapr> cool, now I can go back to working through the Thompson book
09:30:18 <shapr> hey djul, do you read the ll1 list?
09:30:29 <djul> no, what's that?
09:30:38 <djul> a compiler list?
09:30:40 <shapr> kind of
09:30:48 <shapr> mit had a meeting called "little languages"
09:31:09 <shapr> http://ll1.mit.edu/
09:31:26 <shapr> there are two recent posts on the list that I'm thinking might be answered with Joy
09:31:37 <djul> lightweight?
09:32:05 <shapr> er, right :)
09:32:11 <shapr> not little
09:32:16 <shapr> same concept
09:32:27 <djul> which posts?
09:33:23 * shapr tries to find the urls
09:35:58 <shapr> http://www.ai.mit.edu/%7Egregs/ll1-discuss-archive-html/msg01312.html
09:36:01 <shapr> that's one of them
09:36:09 <shapr> but I can't find the message that is a response to
09:37:09 <shapr> ah, think this is the original: http://www.ai.mit.edu/%7Egregs/ll1-discuss-archive-html/msg01311.html
09:37:47 <shapr> as far as I understand functional programming, it means that the result of a function can always be directly substituted for its call
09:39:29 <shapr> doesn't that mean that a Joy implementation could simplify a program before executing it by knowing ahead of time that stuff like "1 2 swap swap + ." is the same as "1 2 + ." ?
09:39:42 <shapr> or am I missing something?
09:40:23 <shapr> I haven't sent anything to the list, because I'm not sure I understand Joy and FP (and their email) well enough to have much of a clue.
09:41:17 <shapr> as far as I understand functional programming, part of the power of referential transparency is that it lets you reason about a program as if it were an equation
09:41:53 <shapr> if you find two duplicate branches in the AST of the program, resolving one resolves both of them
09:43:01 <djul> yes
09:43:24 <shapr> so it sounds like Joy could do what they're asking for
09:44:02 <shapr> well, I'll send a private email to the posters and ask them if they agree
09:45:45 <djul> n
09:46:06 <djul> I have to go in a few minutes
09:46:13 * shapr waves
09:46:21 <shapr> have fun!
09:49:19 <djul> All of a sudden I'm lagged
09:49:33 <djul> I don't really get what they're after in those posts
09:49:51 <shapr> optimization of redundant calls I think
09:49:57 <djul> Something like a language which allows to express more properties for an interface (Than what we're used to)
09:50:09 <shapr> eh?
09:50:19 <djul> malformed english
09:50:36 <djul> A way to express more conditions for an interface
09:50:59 <djul> conditions about the actual execution versus the input and output parameters
09:53:02 <djul> now I'm leaving, see you on Monday
12:53:52 <Vutral> does haskell has database support ?
12:53:58 <shapr> yup
12:54:02 <shapr> odbc support is excellent
12:54:17 <shapr> I think there's also a postgres lib
12:54:19 <Vutral> on linux ?
12:54:20 <Vutral> :>
12:54:21 <shapr> that's all I've looked for :)
12:54:23 <Vutral> cool
15:34:51 <nodie> hi
16:01:20 <shapr> hi nodie 
16:02:28 <Heffalump> shapr: what databases talk ODBC?
16:02:42 <Heffalump> (/me appears, btw)
16:11:09 * shapr exclaims at the sudden appearance of a Heffalump 
16:11:17 <shapr> er, many databases speak ODBC
16:11:28 <shapr> 100% of win32 dbs
16:11:37 <shapr> and unixodbc
16:12:30 <Heffalump> ahah, ta
16:12:43 <Heffalump> there's a MySQL module for Haskell but it's horrible and I couldn't actually get it to work properly
16:13:17 <shapr> I'm not a great fan of MySQL
16:13:57 <Heffalump> yeah, it's a crappy basic database without proper relational facilities, I know :-)
16:14:06 <shapr> ok, just thought I'd mention that :)
16:14:07 <Heffalump> but it's nice and simple and does the job I need
16:14:25 <Heffalump> kind of like what C is as a programming language
16:14:43 <shapr> very close to nothing at all?
16:14:58 <Heffalump> yeah, but easy to use, ubiquitous, etc
16:15:11 <Heffalump> a good choice if you don't want to spend lots of time learning something better
16:15:27 <Heffalump> I care about programming languages so I spend time on them. I don't care about databases really so I don't.
16:17:34 <Heffalump> what do you use, HaskellDB or HaSQL?
16:18:40 <shapr> I haven't used anything yet :)
16:18:46 <shapr> I've just looked
16:19:12 <Heffalump> oh, right :-)
16:19:24 <shapr> I'd like to try it
16:19:26 <Heffalump> I thought the fact that you said it was "excellent" meant you'd tried it :-)
16:20:23 <shapr> no, what I thought was excellent is that the ODBC driver generates SQL
16:20:42 <shapr> I think it's silly to write SQL
16:20:45 <shapr> er
16:20:48 <shapr> maybe "too complicated"
16:20:54 <shapr> I've been doing it for years
16:21:18 <shapr> at the very least, there should be a standard Para-SQL that lets me use all of my knowledge the same way from DB to DB
16:21:28 <Heffalump> heh
16:21:38 <shapr> at this point it's like having twenty incompatible dialects of C to port my programs to
16:23:20 <shapr> have you done much SQL?
16:24:15 <Heffalump> not really
16:24:28 <Heffalump> just enough to implement a few small database backed systems in Perl
16:24:45 <Heffalump> I'd like to reimplement them in Haskell but when I looked at the MySQL stuff I wasn't very happy with it
16:35:16 <shapr> weird
16:35:46 <shapr> so many people think Haskell in unapproachable
16:36:08 <shapr> As I said, though, the barrier that these powerful functional tools 
16:36:18 <shapr> still have to surmount is that of approchability; if I could fully 
16:36:24 <shapr> "grok" Haskell or MetaSlang (the language used as Kestrel), I have 
16:36:31 <shapr> little doubt that I could do amazing things. Unfortunately, I'm forced 
16:36:36 <shapr> to "settle" for languages that mere mortals can use, with standard 
16:36:42 <shapr> libraries that cover a sufficient number of everyday programming tasks.
16:36:48 <shapr> weird, eh?
16:37:04 <shapr> similar reaction on #python when I asked people who tried to learn Haskell
16:37:11 <shapr> stuff like "my brain hurt too much."
16:37:14 * shapr sighs
16:51:44 <nodie> in future we will need meta-languages who let us manage the big complexity of future software
16:52:05 <nodie> this type of problems cant be solved with c for example
16:54:19 <nodie> good night
