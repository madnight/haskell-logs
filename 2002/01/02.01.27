00:02:49 <Logan> What's up?
00:28:37 <qbert> nadda
00:28:45 <qbert> sup with you
00:40:06 <Logan> Trying to figure out what I should do all night.
00:43:57 <qbert> hehe
00:44:01 <qbert> play qbert
00:44:44 <qbert> or you can help me with this program
00:56:22 <Logan> What is the program?
01:17:35 <qbert> this ftp server for windows, its comong along nicely now actualy
02:45:58 * shapr awakens
04:40:26 <shapr> w000
04:40:33 <shapr> * OK www.vialaponie.com IMAP4rev1 v10.234 server ready
04:40:35 <shapr> how dam!!
04:40:50 <shapr> ahem
04:40:54 <Heffalump> cool. no buffer overflows? :-)
04:40:57 <shapr> that was sposed to be "hot dam"
04:41:23 <shapr> just means I've successfully hacked xbill's code into something closer to release quality
04:41:33 <Heffalump> ah
04:41:54 <shapr> I *will* commit Imaplib.hs to haskell-libs cvs tree today.
04:43:22 <shapr> I'd like to get it hacked such that it's possible to do 'import Imaplib' and then imapConnect hostname login password
04:43:36 <shapr> hrm
04:43:40 <shapr> problems somewhere
04:44:34 <shapr> hi Heffalump 
04:44:35 <shapr> what's up?
04:46:00 <Heffalump> hiya
04:46:02 <Heffalump> not much
05:17:05 <shapr> something's wrong...
05:20:18 <shapr> can't login ...
05:21:29 * Logan considers trying to interface haskell with MySQL.
05:22:03 <shapr> there's a MySQL lib
05:22:05 <shapr> for haskell
05:22:11 <shapr> there's also an ODBC lib
05:24:04 * Logan nods.
05:24:07 <Logan> Working on installing it now.
05:24:26 * shapr adds debug code to Imap.hs
05:25:11 <Logan> How do you debug haskell? :P
05:25:19 <shapr> putstrln so far
05:25:27 <shapr> lots of 'em
05:25:51 <Logan> I've tried having the function I'm testing embed debugging information in the value it returns. :P
05:25:58 <Logan> But that only works well for functions that return strings.
05:26:51 <Igloo> trace can be useful for debugging pure stuff, but the evaluation order can confuse you
05:27:10 <shapr> what's trace?
05:28:04 <Logan> import Int?
05:28:07 <Igloo> trace foo exp == exp but, when evaluated, will print foo
05:28:11 <Logan> (trying to compile H/Direct)
05:28:46 <Igloo> It's something like unsafePerformIO (putStr foo) `seq` exp
05:28:58 <shapr> oh, interesting
05:29:30 <shapr> which module has it?
05:29:44 <Igloo> IOExts I think
05:29:50 * shapr checks that out
05:30:01 <shapr> aha
05:31:41 <shapr> hrm
05:33:19 <shapr> is there some way I can figure out which module a function is in?
05:33:28 <shapr> for example, words only splits at spaces
05:33:42 <shapr> so I'd like to know what more generic function it builds on
05:34:02 <Heffalump> it's in the Prelude
05:34:09 <Heffalump> but that's not a good general solution
05:34:26 <Heffalump> grep for it?
05:35:18 <Logan> Yeah, I'd love a good general split function.
05:36:30 <Logan> Just pass it a function that eats delimiters from the head of a list.
05:36:47 <Logan> If one doesn't already exist, it'd be trivial to write.
05:37:00 <Heffalump> looks like it's hard coded into the definition of words
05:38:04 <Logan> wordDelimEat xs(x:xs') = if Char.isSpace x then wordDelimEat xs' else xs or something like that.
05:38:27 <Logan> words = split wordDelimEat
05:39:06 <Logan> Hmm, I guess you need a function for taking the head up to a delimiter as well.
05:39:27 <Logan> I think I'll write this just for the fun of it. :P
05:40:59 <shapr> hrm, where did you find split?
05:41:28 <Logan> I didn't, I'm making it up. :P
05:41:31 <shapr> oh!
05:41:33 <Logan> Let me write it real quick.
05:41:57 <shapr> it should be something like the opposite of intersperse
05:41:59 <shapr> well, kind of
05:42:46 <shapr> actually, no
05:43:32 <shapr> ya know, I think unfoldr might be able to do that
05:43:44 <Logan> Hmm, let me look at it.
05:44:29 <shapr> foldr1 (++ " " ++) ["a","b","c"]
05:44:33 <shapr> is that sane looking?
05:44:41 <shapr> er
05:44:43 <Heffalump> yes
05:44:51 <Igloo> It is?
05:44:52 <Heffalump> well, not sure if the bit inside brackets will parse
05:44:54 <shapr> so can I unfoldr that?
05:44:57 <Heffalump> but the overall idea is
05:44:59 <Heffalump> umm
05:45:14 <Logan> Why not (" " ++) ?
05:45:24 <Logan> Oh.
05:45:30 <shapr> it barfs
05:45:34 <Logan> I'm not thinking.
05:45:35 <Heffalump> (\xs ys -> xs ++ " " ++ ys) is safe
05:45:43 <shapr> ah
05:45:45 <Logan> Yeah, I was going to suggest that. :P
05:45:51 <shapr> what's wrong with (++ " " ++) ?
05:46:09 <Heffalump> Igloo can probably tell you precisely
05:46:15 <shapr> obviously foldr1 (++) ["a","b","c"] works
05:46:17 <Heffalump> but it doesn't look like valid sectioned operator syntax to me
05:46:23 <shapr> eh?
05:46:23 <Igloo> It's not valid syntax
05:46:32 <Heffalump> (+5) is a sectioned operator
05:46:34 <Igloo> Haskell allows left and right sections
05:46:47 * shapr blinks
05:46:50 * shapr looks up
05:46:53 <Igloo> Not middle sections or whatever you want to call them
05:46:54 <shapr> that went over my head
05:47:00 <shapr> oh
05:47:01 <shapr> oh!
05:47:03 <shapr> I get it
05:47:44 <shapr> ok, this does work:
05:47:45 <shapr> foldr1 (\xs ys -> xs ++ " " ++ ys) ["a","b","c"]
05:47:46 <shapr> so...
05:47:48 <Heffalump> Igloo: aww, I was expecting you to quote the exact bits of the grammar that reject it
05:47:50 <shapr> can I unfoldr that?
05:47:51 <Heffalump> shapr: should do
05:47:56 <Heffalump> umm, wdym "unfoldr"?
05:48:05 <Igloo> Heff: No bit of grammar rejects it
05:48:10 <shapr> List.unfoldr
05:48:11 <Igloo> It's just that nothing accepts it
05:48:19 <Heffalump> shapr: errm, look at the type of it
05:48:23 <Heffalump> igloo: oh yes, doh
05:48:28 <Igloo> Well, I guess every bit of grammar rejects it. I could paste the whole thing if you'd like  :-)
05:48:45 <Heffalump> I doubt you could
05:49:03 <shapr> so..
05:49:08 <shapr> when is unfoldr useful?
05:49:11 <shapr> do you have an example?
05:49:20 <Heffalump> shapr: unfoldr does sort of do the reverse of foldr but it's not a direct translation
05:49:24 <shapr> hm
05:49:30 <Logan> If you fold with an invertible function? :P
05:49:37 <Heffalump> Logan: yeah
05:49:44 <Heffalump> roughly
05:49:48 <shapr> and what qualifies as invertible?
05:49:50 <Logan> Which I haven't thought about enough to understand what such a thing would be.
05:49:55 <shapr> right, same here
05:49:55 <Logan> f' $ f x = x
05:50:00 <Heffalump> shapr: something you can write an inverse for :-)
05:50:08 <shapr> oh
05:50:11 <shapr> so something like reverse
05:50:19 <Logan> Or f' . f = id or osmething like that.
05:50:19 <Heffalump> shapr: yeah
05:50:26 <Logan> I'm still shaky on these operators. :P
05:50:35 <shapr> basically, any function which when applied twice gives you the original input
05:50:38 <Heffalump> logan: a bit more complicated than that - look at the Maybe in the type of unfoldr
05:50:47 <Heffalump> shapr: roughly, but see what I said about Maybe
05:51:02 <Heffalump> logan: f' $ f x = x (for all x) is equivalent to f' . f = id
05:51:26 <shapr> what you said about Maybe doesn't even maybe make sense to me :)
05:51:29 <shapr> it's Just Nothing
05:51:37 * shapr makes really bad Haskell jokes
05:51:37 <Heffalump> sorry?
05:51:41 <Heffalump> aargh :-p
05:53:06 * shapr laughs
05:53:35 <shapr> seriously though
05:53:42 <shapr> I don't really understand what you mean
05:53:42 <Heffalump> ok, what Logan said about inverses is correct - if f' . f = id then f' is the inverse of f
05:53:53 <Heffalump> in otherwise, f' applied to (f x) will always give you x
05:54:07 <Heffalump> but f' needs to work on all values that have the correct type
05:54:23 <Heffalump> and there might be some values for which there is no possible x
05:54:37 <Heffalump> e.g. suppose that f :: Int -> Int
05:54:39 <Heffalump> and f x = 2 *x
05:54:53 <Heffalump> then 3 isn't f x for any x
05:55:11 <Heffalump> but f' 3 still needs to do *something*
05:55:27 <Heffalump> so that definition with Maybe means that f' 4 can be Just 2, but f' 3 can be Nothing
05:55:41 <shapr> prop_id :: a -> a -> Bool
05:55:57 <shapr> prop_id x = myFunction (myFunction x)
05:56:06 <shapr> that how you'd say it in QuickCheck I think
05:56:08 <Heffalump> you've lost a ' but yeah
05:56:54 * Heffalump puts on a Microsoft t-shirt just to be difficult and goes to drag people shopping
05:57:05 <shapr> aiee!
05:57:08 <shapr> not Microsoft!
05:57:30 * Igloo does it before realising words squashes multiple spaces, which will probably make it nicer
05:57:37 <Igloo> But for now shopping
05:58:08 <Logan> Cool, just wrote an ugly but general split function. :P
05:58:13 <Logan> I don't like how I did it though.
05:58:13 <shapr> yay!
05:58:15 <shapr> I wanna see it
05:58:28 <shapr> Igloo: you wrote one also?
05:58:30 <shapr> can I see it?
05:58:47 <Logan> http://www.loganh.com/haskell/Logan.hs
05:59:17 <Logan> Basically you provide a function that counts the length of the longest prefix of the given list composed entirely of a "delimiter" (whatever that might be).
05:59:20 <Igloo> > my_words = unfoldr (split ' ')
05:59:20 <Igloo> > split _ "" = Nothing
05:59:20 <Igloo> > split c xs = Just (split_on c xs)
05:59:20 <Igloo> > split_on c [] = ([], [])
05:59:20 <Igloo> > split_on c (x:xs) | c == x    = ([], xs)
05:59:22 <Igloo> >                   | otherwise = (x:ys, zs)
05:59:25 <Igloo> >   where (ys, zs) = split_on c xs
05:59:44 <Heffalump> split_on looks like a copy of a prelude function
05:59:50 <Heffalump> span or something
05:59:57 <Igloo> I thought the Prelude only has a splitAt
06:00:02 <Igloo> Oh, it might be actually
06:00:19 <Logan> What is the Just for?
06:00:24 <Igloo> It needs a dropWhile to remove the extra cs
06:00:35 <Logan> Mine is a little more general than Igloo's. :P
06:00:47 <Igloo> unfoldr :: (a -> Maybe (b,a)) -> a -> [b]
06:01:11 <Igloo> Maybe a = Just a | Nothing
06:01:22 <Igloo> Does yours allow prefixes of arbitrary length then?
06:01:26 <Logan> iglooSplit c xs = split (dropWhile (c ==)) xs    (I think)
06:01:58 <Logan> Oh, wait, that's not how I did it. :P
06:02:06 <Logan> Have to count how many c's are at the beginning of the string.
06:02:31 <Logan> iglooSplit c xs = split (length $ takeWhile (c ==)) xs   (maybe)
06:02:51 <Igloo> You mean /=
06:02:54 <Igloo> (I assume)
06:03:40 <Logan> Logan> let iglooSplit c xs = split (\x -> length $ takeWhile (c ==) x) xs
06:03:40 <Logan> Logan> iglooSplit ' ' "  This    is a   test "
06:03:40 <Logan> ["This","is","a","test"]
06:04:03 <Logan> Igloo: I have to take the prefix (rather than drop it) because the same function is responsible for identifying when a word _ends_ as well as begins.
06:04:15 <Logan> Which is why the function returns a length instead of a new list.
06:06:00 <shapr> hm, I wonder how I'd test that with QuickCheck
06:06:50 <Logan> QuickCheck?
06:07:06 <shapr> http://pragmaticprogrammer.com/cgi-local/pragprog?QuickCheck
06:08:56 <Logan> When does prop_RevUnit get used?
06:09:19 <Logan> Hmm...
06:09:36 <shapr> when you run quickCheck prop_RevUnit
06:09:55 <shapr> the reason I put in three tests, and demonstrated one of them
06:10:01 <shapr> is that only two of those tests work
06:10:09 <shapr> but I wasn't going to make that obvious :)
06:10:12 <Logan> Oh, I think I see what it's doing.
06:11:36 <Logan> shapr: The way you'd test this (since it consumes delimiters greedily) is to compare the "joined" list to the original list after extra delimiters in the joined list have been removed.
06:11:51 <Logan> Or you could just not test its ability to consume extra whitespace at all.
06:11:54 <Logan> Which makes it easier to test.
06:12:44 <Logan> Or you could do loganWords x == words x :P
06:14:53 <Logan> What else should I add to my burgeoning library? :P
06:41:05 <shapr> Imaplib.hs? ;)
06:44:12 * shapr continues hacking on Imap.hs
06:44:21 <shapr> hmmm
06:44:49 <shapr> urf
06:44:56 <shapr> a real imaplib will be complicated
06:46:27 <Logan> I haven't looked at the IMAP protocol much.
06:47:34 <oskie> hello
06:48:37 <Logan> Hi.
06:48:37 <oskie> I'm a real beginner with haskell .. I wonder, what's the AND operator in haskell called?
06:48:45 <Logan> && ?
06:49:16 <oskie> and operator for true & false I mean .. so true && true  yields true?
06:54:07 <Logan> Yes.
06:54:23 <shapr> Logan: imaplib.py is 1216 lines
06:54:33 <shapr> poplib.py is 336 lines
06:54:37 <oskie> ok that's weird.. is both true and True defined?
06:54:44 <shapr> I think I'm switching priorities
06:54:54 <shapr> nope
06:54:56 <shapr> True is what you want
06:55:01 <shapr> True is a datatype
06:55:04 <shapr> true would be a function
06:55:11 <oskie> hm ok
06:56:41 <shapr> hi oskie 
07:00:03 <oskie> anyone using hugs here?
07:00:55 <oskie> I can put something like "t = Eq foo bar" in a file and load it with :load
07:01:10 <shapr> eh?
07:01:17 <oskie> but is it possible to, from the command line, add that command to the database?
07:01:50 <oskie> if I do it from the command line, I get "ERROR - Syntax error in input (unexpected `=')"
07:03:45 <Logan> How about let t = Eq foo bar?
07:04:27 <oskie> ah
07:04:54 <oskie> weird .. now it says ERROR - Syntax error in expression (unexpected end of input)
07:11:48 <shapr> what are you trying to do?
07:12:03 <shapr> you want to test if foo and bar are both True?
07:12:35 <shapr> let t = foo && bar
07:12:54 * shapr goes off to have a finnish lesson
11:16:46 <atun> hi to all, i'm looking for a text editor to program in haskell (windows). Can anyone help me?? thx.
11:22:24 <dennisb> any text editor will do, use your favorite one, I use emacs (in windows and unix)
11:24:57 <shapr> hi atun 
11:25:00 <shapr> hi dennisb!!
11:25:05 <shapr> I haven't seen you in awhile
11:25:08 <shapr> what's up?
11:25:33 <dennisb> I've been here, but to busy getting to deep into discussions :-)
11:26:09 <dennisb> I seem to spend more and more of my life in irc, that's not a good sign..
11:26:12 <atun> yes, but i would like it to put some colors in my code. I don't remember the one we use at university and i'm using right now windows notepad which is much unconfortable
11:26:22 <dennisb> atun: emacs can do that
11:26:34 <atun> thx
11:26:40 <atun> i'll look for it
11:26:41 <shapr> dennisb: yah, same here
11:26:43 <Igloo> So can vim  :-)
11:26:49 <shapr> but I don't mind spending lots of time on irc
11:27:08 <dennisb> atun: if you were using unix at uni, then it was probably emacs you used
11:27:20 <atun> no, we use windows
11:27:31 <dennisb> Igloo: yes, and vim is a good editor too
11:27:37 <atun> we have a very cool text editor there
11:27:53 * dennisb don't want to get in the middle of an emacs - vim battle
11:28:00 <shapr> neither do I
11:28:26 <atun> hehe
11:28:53 * dennisb _knows_ emacs is best
11:29:05 <Igloo> I should get one of those thinkgeek t-shirts
11:30:21 <shapr> which one?
11:30:23 <shapr> the emacs one?
11:30:30 * shapr ducks the flying ice
11:31:00 <shapr> btw, why choose Igloo ?
11:31:28 <Igloo> For a nick do you mean?
11:31:31 <shapr> yup
11:31:49 <Igloo> The hiding from teh police one (specifically the one where the hiding people use vim)
11:31:53 <Igloo> IGL are my initials
11:31:57 <shapr> oh! cool!
11:32:04 <shapr> mine are sme
11:32:09 <shapr> so I sometimes sign my email with 'sme
11:32:11 <dennisb> i looked at the haskell page about editor modes, the only thing listed for windows is something for textpad
11:32:13 <dennisb> http://www.haskell.org/libraries/#editormodes
11:32:14 <Igloo> :-)
11:32:33 <Igloo> Why "shapr" then?
11:32:41 <shapr> that's actually short for synethesist
11:33:03 <dennisb> but i'm sure there would be more editors in windows where you can load som haskell-mode
11:33:04 <shapr> Shae is short for shapr
11:33:05 <shapr> ;)
11:33:10 <shapr> seriously
11:33:35 <Igloo> I'd have thought PFE could but I've never really used it
11:34:40 <shapr> Igloo: I changed my name a few years ago, so each part of the name I have now has all kinds of detail behind
11:35:27 <Igloo> Ah
11:37:16 <dennisb> i've been hacking C mostly the last weeks
12:14:53 <shapr> porting code from Python to Haskell is not a trivial task
12:15:02 <shapr> Haskel <-> Joy is much simpler
12:15:12 <shapr> er, Haskell
12:16:20 <xbill> python sucks anyway
12:16:28 <shapr> heh
12:16:30 <shapr> hi xbill 
12:16:41 <shapr> I'm fond of Python
12:17:02 <shapr> I wish Haskell were as interactive as Python
12:17:03 <xbill> okay it's not my favorite then
12:17:08 <shapr> ;)
12:17:38 <shapr> Imap.hs won't let me login to my server, and I can't figure out why....
12:17:48 <shapr> so I'm trying to figure out how to debug stuff
12:18:27 <xbill> Imap.hs polls the imap server and squirts it down the local sendmail pipe.
12:18:29 <dennisb> you could always do simple trace-calles
12:19:02 <shapr> I'm having a problem logging in, so I'm trying to persuade it to print the answer
12:19:10 <shapr> dennisb: how does a simple trace call work?
12:19:23 <xbill> it prints out everything anyway
12:19:30 <dennisb> you use the trace function!
12:20:31 * shapr figures out the trace function
12:20:31 <shapr> duhh
12:20:37 * shapr feels really dense
12:21:06 <dennisb> http://www.haskell.org/ghc/docs/latest/set/sec-ioexts.html#TRACE
12:21:16 <dennisb> (I guess that was what you read)
12:21:47 <dennisb> You simply use it to print some things during the program execution
12:21:49 <shapr> yup, thanks
12:22:40 <dennisb> it's not safe to use, and it can cause strange things to happen, but mostly it just works and can be effective to use for debugging
12:23:23 <dennisb> printf-debugging is not as bad as some people say
12:37:23 <xbill> um, Imap.hs dumps everything anyway
12:37:56 <shapr> I suspect it's user error (aka, I'm missing something obvious)
12:39:19 <dennisb> xbill: yes, you said it above (i haven't tried you program)
12:40:44 <dennisb> i'm trying to get mingw (gcc for windows) to link libraries statically, with no luck... it's not only haskell that gives people grey hairs..
12:41:09 <shapr> heh
12:43:40 <Logan> Whew it's hot.
12:48:22 <shapr> how hot is it there?
12:48:24 <dennisb> Logan: yes, it is. It's above zero, great. Maybe the snow will go away
12:49:12 <Logan> 64!
12:49:20 <Logan> Last weekend it snowed.
12:49:26 <Logan> The only substantial winter weather this winter.
12:49:29 <shapr> 64 C?
12:49:31 <Logan> F
12:49:31 <shapr> oh
12:49:33 <shapr> must be F
12:49:46 <Logan> 18 C
12:51:00 <shapr> that's pretty good
12:54:41 <Logan> Yeah.
12:54:44 <Logan> Pretty strange winter.
12:56:52 <Logan> Usually this time of year it gets up to 4 C during the day. :P
12:57:34 <shapr> and yet it's 18
12:57:35 <shapr> weird
12:57:41 * Logan nods.
12:57:56 <Logan> Which means it's very very stuffy in my room now.
12:58:07 * Logan whips up a permutation function in haskell really quick.
12:58:15 <Logan> It actually worked on the first try. :P
12:58:23 <shapr> cool, what does it do?
12:59:00 <Logan> Given a list, generates the list of all permutations of that list.
12:59:14 <Logan> Logan> permute "abc"
12:59:14 <Logan> ["abc","acb","bac","bca","cba","cab"]
12:59:24 <Logan> I should modify it so it follows a more predictable ordering.
13:00:00 <shapr> what's the function look like?
13:00:02 * shapr guesses 
13:00:04 <Logan> I.e., if the elements of the original list are in order, the permutation list should be in lexicographical order.
13:00:15 <Logan> permute :: [a] -> [[a]]
13:00:15 <Logan> permute [] = []
13:00:15 <Logan> permute [a] = [[a]]
13:00:15 <Logan> permute (x:xs') = permute' [] x xs'
13:00:15 <Logan> permute' :: [a] -> a -> [a] -> [[a]]
13:00:18 <Logan> permute' before x [] = map (x:) $ permute before
13:00:20 <Logan> permute' before x after@(a:after')
13:00:23 <Logan>     =   
13:00:25 <Logan>         (map (x:) $ permute (before ++ after)) ++ permute' (x : before) a after'
13:01:01 <Logan> If I append x to before in that last line, instead of adding it to the beginning, I'd probably get lexicographical order.
13:01:24 <Logan> Oops, that broke it entirely.
13:01:52 <Logan> Oh, nevermind, typo. *grin*
13:02:59 <Logan> Unfortunately it's a bit more inefficient to do it that way.
13:03:07 <Logan> I need a more powerful list type. :P
13:03:17 <shapr> unify stuff?
13:04:04 <Logan> Something that I can append to efficiently, etc.
13:04:23 <Logan> Though it's not a big deal.
13:04:35 <shapr> through stuff on the head and reverse it?
13:04:47 <Heffalump> data FastList a = FastList ([a] -> [a])
13:05:02 <Heffalump> then appending is just composition under the FastList constructor
13:06:02 <Heffalump> i.e. constant time
13:06:56 <Logan> Heh, I don't understand what that statement really does.
13:10:13 <Heffalump> it's a datatype of lists that makes it very easy to stick something on the end
13:12:12 <Heffalump> someone wrote a paper in the late 80s about this - I thought it was John Hughes but I can't find it
13:14:44 <Logan> Now to write a quick function for obtaining the maximal element in a list.
13:15:52 <Logan> I'm having fun generalizing some useful, simple algorithms. :P
13:15:54 <Heffalump> well, that has to be linear time, so there's not much you can do to make it quick
13:15:59 <Heffalump> unless your list is sorted, of course
13:16:08 <Logan> Quick in the sense of how long it'll take me to write it. :P
13:16:30 <Heffalump> ah :-)
13:16:30 <Logan> Though for very large lists there are things you can do to improve the constant of proportionality in a linear time solution. :P
13:16:51 <Heffalump> there's not a huge amount you could do in Haskell without intimate knowledge of how the compiler works
13:16:57 * Logan forgets what the number of comparisons for the most optimal general algorithm for obtaining the maximum value was.
13:17:12 <Logan> Well, you still have control over the number of comparisons.
13:17:40 <Heffalump> umm, surely n-1 for a list of length n, since you need to visit each element?
13:17:58 <Heffalump> and the obvious algorithm will only do n-1 anyway
13:18:12 <Logan> Maybe I'm thinking of the one to get the two maximum elements.
13:18:20 <Logan> Actually, I'm not sure what I'm thinking of. :P
13:18:30 <Heffalump> :-)
13:18:40 <Heffalump> hmm. 9 characters.
13:19:24 <Heffalump> oh. 7.
13:20:07 <Logan> Oh, it was for finding the maximum and minimum.
13:20:36 <Logan> Which can be done in about 3n/2 comparisons. :P
13:20:49 <Heffalump> is that average case or worst case?
13:21:16 <Logan> I think it's always about 3n/2.
13:21:28 <Heffalump> got a reference?
13:22:26 <Logan> Introduction to Algorithms: A Create Approach, Udi Manber
13:23:13 <Logan> It's kinda easy...
13:23:30 <Logan> Let's say you've already found the max and min of the first k numbers.
13:23:48 <shapr> hi qbert 
13:24:11 <Logan> You take the next two numbers, compare them to each other, them compare the greater one to the max and the lesser one to the min.
13:24:21 <Logan> 3 comparisons for every 2 numbers.
13:24:26 <shapr> em
13:24:29 <shapr> oops
13:25:08 <qbert> ;)
13:25:33 <Heffalump> ah, gotcha :-)
13:27:44 <Logan> Hmm, there's a PrelList.maximum
13:27:54 <xbill> yes
13:28:22 <Logan> But they don't take an ordering function.
13:28:30 <Logan> Then again, they just do a foldl
13:28:54 <Heffalump> it all comes from the Ord class
13:29:11 <Heffalump> type classes are *nice*
13:29:55 <Logan> Yeah.
13:30:12 <Logan> I'm deliberating over whether I want to go through the trouble to define an instance of Ord here or not.  I suppose it makes sense.
13:30:20 <Logan> If I can remember the syntax. *grin*
13:31:43 <Logan> I have to define all these functions?
13:35:14 <Igloo> Either that or live with your conscience
13:35:24 <Logan> Let's say I have some arbitrary data type, but I can map it to a Double for comparisons.
13:35:37 <Logan> Is there some easy way to reflect this mapping and make it an instance of Ord?
13:36:08 <Igloo> If it is trivially defined in terms of a Double then I think the revised report allows you to derive Ord
13:36:19 <Igloo> Otherwise you have to write all the mapping stuff for each function
13:36:35 <Logan> Hmm, that'd be a good place to improve the language, then. :P
13:36:55 <Logan> If I just convert my data to Double before passing to max, I lose all the information associated with it.
13:37:10 <Igloo> It has been to an extent with the deriving I just mentioned. I doubt more will be done before Haskell 2
13:37:39 <Logan> Oh, I misread.
13:37:50 <Logan> I don't know what you mean by "trivially defined".
13:38:04 <Heffalump> you only have to define one function to define Ord, btw
13:38:09 <Igloo> Something like newtype Foo = Foo Double or data Foo = Foo Double
13:38:20 <Logan> All I want to do is specify a function that is a -> Ord b in order to make a an instance of Ord.
13:38:40 <Heffalump> igloo: errm, how can you derive Ord from a trivial mapping to Double?
13:39:11 <Igloo> It might be GHC only
13:39:12 <Heffalump> sure if the datatype is defined like you say, but suppose the mapping is something like "toDouble (Foo a) = -a"
13:39:24 <Heffalump> igloo: if so, what does it have to do with the revised report?
13:39:35 <Igloo> I thought it was also in the report
13:39:46 <Heffalump> but how does it work?
13:40:11 <Igloo> data Foo = Foo Double deriving Ord does the obvious thing
13:40:32 <Heffalump> right. did it not before then?
13:41:43 <Igloo> Oh, am I thinking of user defined classes?
13:41:50 <Igloo> I think I might be
13:42:30 <Heffalump> right
14:25:08 <Logan> So who has a convex hull algorithm in haskell sitting around? :P
14:29:13 <Logan> Heh, so many ACM problems require graphs.
15:44:57 <Yurik> re
16:21:11 <qbert> yo
16:21:56 <Yurik> qbert hi
18:54:30 <qbert> what do haskell files end in ?
18:59:05 <zorb> hmm?
18:59:15 <zorb> the extension of the name? .hs or .lhs
18:59:18 <zorb> or .hi
18:59:55 <qbert> hasklefile.hi ?
18:59:59 <qbert> l
19:00:15 <zorb> .hi; interface file. generally generated by compiler. 
19:00:26 <zorb> (didnt know to what extent you meant)
19:01:00 <qbert> ah
19:01:00 <zorb> just haskellsourcefile.hs or litteratehaskellsourcefile.lhs
19:01:13 <zorb> s/tt/t/
19:01:18 <qbert> k cool
19:01:33 <qbert> i m going to learn haskell as soon as time permits, do you like it ?
19:01:59 <zorb> yeah
19:04:10 <qbert> why ?
19:04:14 <zorb> though one of its most interesting attributes can be annoying (lazyness)
19:05:08 <qbert> ahh like perl
19:05:28 <zorb> well, not really :)
19:05:31 <qbert> different sorts of lazy ?
19:05:35 <qbert> ;)
19:06:27 <zorb> you do realize that the way haskell generally evaluates expressions is in a "lazy" fashion, right?
19:07:07 <qbert> no i havent seen it at all
19:07:12 <qbert> can you paste an example ?
19:08:49 <zorb> i suppose its evaluation strategy could be said that it evaluates only what it needs an puts off the rest.
19:08:49 <zorb> this can be very efficient at times.
19:08:49 <zorb> ah..
19:08:49 <zorb> print (take 100 fibs) where fibs = [1..]
19:09:08 <zorb> wait.
19:09:14 <zorb> let me think of a better one.
19:09:21 <zorb> thats more simple.
19:10:17 <zorb> ok.
19:10:25 <qbert> whats a fib ?
19:11:08 <zorb> i was thinking of the fibbonacci sequence but instead i defined it differently
19:11:20 <qbert> ah
19:12:16 <zorb> [1....] is virtually the same as  list = 1: map (\x -> x+1) list
19:13:28 <zorb> I have defined list as a "infinite" list.
19:13:35 <zorb> um.
19:13:48 <zorb> say i take 3 list.
19:14:35 <zorb> erg. bad choice of name for variable.
19:14:55 <zorb> ok z = 1: map (\x -> x + 1) lsit
19:14:57 <zorb> asdklfjkl;f
19:15:03 <zorb> sorry
19:15:19 <qbert> hehe ok ;)
19:15:40 <zorb> z = 1 : (map (\x -> x + 1) z)
19:16:03 <zorb> same list.
19:16:14 <zorb> anyway, say i take 3 z
19:16:28 <zorb> or let q = take 3 z
19:17:54 <xbill> heh
19:18:04 <zorb> evaluate take 3 z haskell will evaluate the first element (which needs no evaluation) so it will then evaluate take 2 (map (\x -> x +1) z)
19:18:36 <xbill> take 2 commutes
19:18:48 <zorb> conceptually the list q at this stage is 1 : (take 2 map (\x-> x + 1)) ..
19:19:02 <zorb> hmm?
19:19:17 <zorb> oops missing z
19:19:20 <zorb> conceptually the list q at this stage is 1 : (take 2 map (\x-> x + 1) z) ..
19:19:22 <zorb> grr
19:19:35 <zorb> and a missing parenthesis set as well.
19:19:37 <zorb> geez
19:20:09 <zorb> I guess I wasn't very prepaired to be in a teaching mode tonight.
19:21:12 * zorb wonders if he scared qbert away
19:21:53 <zorb> I think its really not too hard to understand.
19:22:47 <zorb> I sometimes have a penchant for not explaining things very well.
19:23:13 <zorb> makeing the easy abstruse :(
19:23:16 <zorb> I could make addition scary!
19:24:10 <zorb> yeah, i'd be the one to invent roman numerals if I where back then in the day!
19:24:21 * zorb stops slamming self.
19:25:16 * zorb did scare qbert away!
19:29:11 <zorb> anyway, another way of explaining lazyness could be shown in let expressions.
19:30:24 <zorb> let x =some big expression; y = 5; z= 5*y in z - 3
19:31:15 <zorb> "some big expression" will never get evaluated because its not in the final expression following the "in"
19:31:23 <xbill> fib = 0 : 1 : zipWith (+) fib (tail fib)
19:32:52 <zorb> not bad, though i think your 0 introduced an unintentional bug :)
19:33:06 <zorb> me thinnks.
19:33:12 * zorb rahter
19:35:07 * zorb would thank xbill for thinking of a better example but that evaluates to 0:1:1:...
19:35:15 <zorb> whatever ... is.
19:35:36 <xbill> heh
19:35:43 <xbill> Fibonacci sequence
19:35:59 <zorb> doh
19:36:18 <zorb> my brain really isnt working tonight.
19:37:16 <zorb> its also been a while since ive tried to simulate haskell evaluation in my head :)
19:41:35 * zorb sees what's up at that haskell library project
19:51:36 <zorb> who's doing the smtplib?
19:54:45 * zorb heads out (check on logs later)
19:59:17 <xbill> smtplib?
22:59:35 <shapr> hi Yurik 
23:05:20 <Yurik> shapr hi
23:05:25 <shapr> what's up?
23:07:39 <Yurik> fine, thanks
23:09:03 <shapr> any code or questions?
23:10:55 <Yurik> well, now I have only one question :-) where I can read intelligible tutorial on monads? :-)
23:11:16 <shapr> aha
23:11:56 <shapr> the haskell.org website has a section on Monads
23:11:58 <Yurik> just smthing like for-the-beginners, then I'll be ready to read more complicated one
23:14:02 <xbill> heh
23:14:08 <xbill> monads are a pain
23:14:41 <shapr> good morning xbill 
23:15:01 <Yurik> anywhay, I understand the basics and would like to find out some more on how monads can be used. or the basic knowledge is enough?
23:15:09 <Yurik> s/anywhay/anyway/
23:15:22 <shapr> I think you should use them for awhile
23:16:58 <shapr> and you should read some of the papers on haskell.org
23:17:11 <shapr> but then, I'm not a monads expert, someone else may be able to recommend something better
23:17:54 <Yurik> ok, thanks
23:18:15 <Yurik> btw, what is the meaning of Maybe, in brief? (I mean in applience to Haskell, of course :-)
23:18:58 <shapr> as far as I understand it, it means " return a value, or return an error "
23:19:28 <Yurik> ok, thanks; that is what I thought
23:27:29 <juhp> not quite
23:27:39 <juhp> Maybe types have value
23:27:45 <juhp> Just <something>
23:27:48 <juhp> or
23:27:52 <juhp> Nothing
23:27:57 <juhp> they are useful for optional data
23:28:12 <juhp> say Nothing means use the default, otherwise use the <something>
23:28:20 <shapr> hi juhp!
23:28:25 <shapr> I like your software!
23:28:35 <juhp> thanks! :)
23:29:14 <juhp> i hope there will be much more one day....
23:29:53 <shapr> me too
23:29:53 <juhp> i was was really happy today, 'cos someone sent a binding to gtkmozembed to the gtk+hs list
23:29:57 <shapr> anything new you're working on?
23:30:15 <juhp> with a sample browser!
23:30:19 <shapr> coool!
23:30:25 * shapr subscribes to the gtk+hs list
23:30:27 <juhp> yeah!
23:30:47 <shapr> what do you think would make Haskell a more general purpose language?
23:31:16 <juhp> I starting to do various things, but haven't made much headway recently
23:31:35 <juhp> debugging popenhs took much of my haskell time last week...
23:31:46 <shapr> how do you debug Haskell?
23:31:57 <juhp> and i released 1.00 on Friday
23:32:02 <shapr> yah , have it :)
23:32:03 <juhp> strace ;-)
23:32:07 <shapr> ah, ok
23:32:20 <juhp> i wish for better tools
23:32:25 <shapr> me too
23:32:38 <shapr> Hat should be for ghc soon
23:32:44 <shapr> well, they say it will be
23:33:18 <juhp> yes, I think so.  Haven't tried it.
23:33:39 <shapr> I haven't either, it's only for nhc right now
23:33:51 <juhp> but for IO strace is well probably continue to rule i suppose
23:34:05 <juhp> s/is well/will/
23:34:06 <shapr> yah, probably so
23:35:07 <juhp> to make Haskell a more general purpose language, we need more libraries i think
23:35:11 <juhp> good ones!
23:35:12 <shapr> I think so too
23:35:20 <shapr> I started a sourceforge project to that effect
23:35:29 <juhp> tell me more
23:35:33 <shapr> sf.net/projects/haskell-libs/
23:35:39 <shapr> but it's just a baby project :)
23:35:41 <juhp> cool
23:35:51 * juhp goes to look
23:35:53 <shapr> do you want me to add you as a developer?
23:37:15 <shapr> so far the only code is Imap.hs, donated by xbill
23:37:53 <juhp> yeah, sure
23:38:08 <juhp> maybe popenhs could go in too?
23:38:22 <shapr> of course!
23:38:36 <juhp> good :)
23:38:49 <shapr> do you have a sourceforge id?
23:39:33 <shapr> juhp exists
23:41:25 <shapr> want me to use that one to add you?
23:47:08 * shapr does so
23:48:48 <juhp> thanks
23:52:44 * juhp does it take a while to reach the website
23:53:10 <shapr> I haven't uploaded a webpage, so haskell-libs.sf.net should give an empty directory
23:53:22 * juhp wonders if it takes a while to reach the website?
23:53:25 <shapr> but http://sf.net/projects/haskell-libs/ shouldn't take long
23:54:13 <shapr> one possibility I recently noticed: if you're logged into sourceforge, and your chosen theme is "extra-light" then the images take a long time to load in galeon
23:57:22 <shapr> juhp: I'd like for haskell-libs project to become a central place to find webpages and cvs trees for Haskell libraries.
23:57:44 <shapr> currently there isn't such a place outside of the Haskell website
