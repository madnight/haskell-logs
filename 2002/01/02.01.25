02:55:51 <shapr> good morning
03:20:42 <Logan> Hmm.
06:08:37 <shapr> https://sourceforge.net/survey/survey.php?group_id=44807&survey_id=12660
06:09:04 <shapr> that's the first survey for the haskell-libs project
06:09:58 <Igloo> It wants me to log in - can you summarise it?
06:10:08 <shapr> er, try it with http://
06:10:18 <shapr> I should have noticed that :)
06:10:27 <Igloo> Doesn't help
06:10:30 <shapr> hrm
06:10:57 <shapr> http://sf.net/projects/haskell-libs/
06:11:38 * Igloo contemplates finding out what my username is and joining
06:12:04 <Logan> Heh, I used haskell tonight to do some of my homework for me.
06:12:11 <shapr> Logan: cool! what did you do?
06:12:22 <Igloo> Oh, questions not results
06:12:44 <Logan> Had to generate some tedious parsetrees and left-derivations by hand, wrote a program to do it instead.
06:12:54 <Logan> Found a yacc-for-haskell program, too.
06:13:02 <Igloo> What subject and what level is this?
06:13:08 <Igloo> happy?
06:13:11 <shapr> Igloo: right, it's a question :)
06:13:15 <shapr> er, two questions
06:14:24 <Logan> Yes, happy.
06:14:34 <Logan> Programming languages homework.  Really basic stuff.
06:14:48 <Logan> I used some generic Tree code I coded the night before to represent the parse tree.
06:14:50 <Igloo> Undergraduate?
06:14:54 <Logan> Graduate.
06:14:58 <shapr> I've been assuming that network libs such as smtplib, imaplib, and poplib are the best things to start with
06:15:03 <Logan> Though the stuff done so far is the same as the undergraduate course I took.
06:15:04 <Igloo> Oh, cool
06:15:06 <shapr> but I don't know if anyone else agrees with me
06:15:10 <Logan> Probably the same exercises, I don't remember. :P
06:15:18 <Igloo> What sort of degree are you doing now then?
06:15:24 <Logan> M.S.
06:15:48 <Igloo> Right
06:15:55 <Igloo> Cool
06:15:57 <Igloo> In the US?
06:16:04 <shapr> Igloo: did you find a correct url?
06:16:07 <Logan> Yep.
06:16:10 <Igloo> shapr: Yeah
06:16:24 * Igloo wonders if it's at a uni I might have heard of
06:16:28 <Logan> http://www.loganh.com/class/current/programming-languages/hw1
06:16:32 <Logan> Virginia Tech
06:17:14 <Igloo> Hmmm, not w3m-friendly  :-)
06:18:11 <Logan> Well, that's just my working directory for the homework.  Not much you can do in w3m but browse the latex and browse the code in the code directory. :P
06:18:26 <Logan> Is there some form of show that doesn't quote things?
06:18:41 <Igloo> What are you trying to do?
06:20:59 <Logan> Well, my tree is defined as working with two polymorphic types, representing node labels and edge labels respectively.
06:21:01 <Igloo> id is the answer, but that won't work if you need it to be polymorphic
06:21:18 <Logan> And I have some functions that display trees, which exist for trees that work with Showable labels.
06:21:26 <Logan> And thus they use the show function to preserve polymorphism.
06:23:09 <Igloo> You could make a newtype MyString = MyString String and make it an instance of Show
06:23:23 <Logan> And make a show function for it that doesn't quote?
06:23:33 <Logan> I guess that would work, since it's the only thing I've observed quoted.
06:23:41 <Igloo> Yup, by using show on the string and chopping the ends off
06:24:13 <Logan> No, show quotes backslashes in the string too.
06:24:15 <Logan> And double quotes.
06:24:31 <Logan> It'd be better to just have a show = id for strings.
06:30:08 <Igloo> Presumably you are assuming you won't have things like ^G in the String then
06:31:12 <Logan> Hmm... maybe it would be better if I just had the calling function always provide the display function... basically generalize things more.
06:31:31 <Logan> It's really just a traversal anyway.
06:31:41 <Logan> And I already have code to do that with a general function.
06:32:35 <Logan> So what's a good networking library for haskell? :P
06:32:45 <shapr> import Socket
06:33:55 <Logan> Oh, didn't notice that in the ghc stuff.
06:35:10 <Logan> I should get some sleep today.
06:35:30 <shapr> g'night LoganZzZz 
06:35:43 <Igloo> Isn't it just becoming day in the US?
06:35:50 <shapr> yup
06:36:01 <shapr> 8 hours back
06:36:16 <Igloo> Virginia is?
06:36:40 * Igloo guesses 7 from the UK if it's 8 from Finland
06:37:05 * Igloo notices shapr is an emacs person...and you seemed like such a nice chap  :-)
06:37:13 <shapr> I'm using ERC 2.1 $Revision: 1.179 $ with Emacs 21.1.1!
06:37:36 <shapr> how did you notice I'm an emacs person?
06:37:49 <Igloo> I inferred it from you being on #emacs
06:37:53 <shapr> aha
06:37:54 <shapr> good point
06:38:08 <shapr> that also means I'm an interesting person.
06:38:53 <Igloo> Can emacs do cunning joint syntax highlighting like the TeX and Haskell highlighting on http://c93.keble.ox.ac.uk/~ian/haskell-vim/Demo.png out of interest?
06:39:11 <shapr> I saw your screenshot btw ;)
06:39:21 <shapr> earlier today when you posted about your spiffy vi mode
06:39:42 <Igloo> Right - I was just wondering if emacs has support for nested syntax highlighting too
06:39:47 <shapr> yup
06:39:57 <shapr> mmm-mode
06:40:02 <shapr> multi-major-mode
06:40:22 <shapr> it allows you to have one mode with 'submodes' for certain regions
06:40:33 <Igloo> There are an inconsistent number of 'm's there  :-)
06:40:38 <Igloo> OK, cool
06:40:40 <shapr> really?
06:40:48 <shapr> multi-major-mode-mode
06:41:03 <Igloo> Oh, I guess that does make sense actually
06:41:12 <shapr> I'm not going to say that emacs (or anything else I use) is inherently better than anything else.
06:41:20 <shapr> I'll just say those things are better for *me*
06:41:47 <shapr> and then I'll probably ask you silly vim questions when I get the urge to learn more about vim (which happens every two weeks or so)
06:41:55 <Igloo> :-)
06:42:06 <shapr> I'm a knowledge sponge.
06:42:54 <shapr> though at the moment, haskell is my main squeeze
06:43:14 <shapr> I'd really like to see Haskell become a mainstream programming language
06:44:17 <shapr> hm, I wonder how I set up a survey that doesn't require authenticated users
06:44:19 <Igloo> That's going to need some work on IO performance and better support for things like network stuff and shared libraries first I think
06:44:42 <Igloo> I did manage to get to the survey from the last link you posted
06:45:20 <shapr> I suspect performance is not really an issue
06:45:30 <shapr> time-to-market is
06:45:36 <shapr> whether that means open source or not
06:46:01 <Igloo> Depends on the application, but yeah
06:46:16 <shapr> that's why Python is so popular and powerful, because it's easy to plug a bunch of stable featureful libs together and tada, you have an application.
06:47:30 <shapr> imho, compiled Haskell is faster than Python
06:47:38 <shapr> Haskell is also more concise than Python, but not concise like Perl ;)
06:47:51 <Igloo> I'd be surprised if that was the case for a heavy IO application
06:48:25 <shapr> how can we test that?
06:48:30 <Igloo> I'm not sure how much better the new IO library is, but certainly older ghc5 releases really suffered from treating strings as lists of chars and the overheads incurred
06:49:18 <shapr> can you give me some specific instances where that ended up being really slow?
06:50:32 <shapr> or some Haskell code that illustrates it?
06:52:40 <Igloo> Can you give my some python that copies file1 to file2 by reading and writing?
06:54:21 <shapr> yah, just a moment
06:54:40 <shapr> any particular flavor? eg. all at once, line by line, what?
06:55:13 <Igloo> I don't know how perl compares to python, but 
06:55:19 <Igloo> [ian@urchin ian]$ time perl Q.pl 
06:55:19 <Igloo> real    0m1.358s
06:55:19 <Igloo> user    0m1.140s
06:55:19 <Igloo> sys     0m0.220s
06:55:22 <Igloo> [ian@urchin ian]$ time ./Q
06:55:22 <Igloo> real    0m9.698s
06:55:22 <Igloo> user    0m9.250s
06:55:24 <Igloo> sys     0m0.450s
06:55:32 <shapr> ah
06:55:37 <Igloo> Q.pl is
06:55:38 <Igloo> open IN, "< hugs1";
06:55:38 <Igloo> open OUT, "> hugs2";
06:55:38 <Igloo> while (<IN>) {
06:55:38 <Igloo>     print OUT;
06:55:38 <Igloo> }
06:55:40 <Igloo> close OUT;
06:55:42 <Igloo> close IN;
06:55:45 <shapr> can you profile both of them?
06:55:55 <shapr> that could be informative
06:55:57 <Igloo> And Q is ghc compiled (-O2)
06:55:58 <Igloo> > module Main where
06:55:59 <Igloo> > main :: IO()
06:55:59 <Igloo> > main = readFile "hugs1" >>= writeFile "hugs2"
06:56:21 <Igloo> ghc-5.02.2 to be precise
06:57:13 <shapr> the simplest equivalent python code:
06:57:16 <shapr> open('hugs2','w').write(open("hugs1").read())
06:57:28 <shapr> untested, but I bet it'll work fine
06:58:04 <Igloo> [ian@urchin ian]$ time python foo.py 
06:58:04 <Igloo> real    0m0.332s
06:58:04 <Igloo> user    0m0.020s
06:58:04 <Igloo> sys     0m0.300s
06:58:30 <Igloo> Faster than perl, but the perl was doing extra work to find the ends of lines
06:59:02 <shapr> yah, the python line reads and writes the entire file
06:59:23 <shapr> can you profile the ghc code?
07:00:03 <shapr> http://haskell.org/wiki/wiki?HaskellNiftyTricks
07:00:07 <shapr> tells how to do profiling
07:00:11 <shapr> though I bet you already know
07:00:38 <Igloo> perl is real    0m0.305s if I do undef $/; print OUT <IN>; instead
07:01:13 <shapr> perl is more optimized under the hood than Python
07:01:28 <shapr> fits the relative language philosophies I think :)
07:02:21 * Heffalump appears, skims scrollback, and notes that (1) Virginia is almost certainly 5 hours from the UK and (2) emacs users are wonderful people
07:02:28 <shapr> heh
07:02:43 <Igloo> Good afternoon Mr. pico  :-)
07:02:50 <Heffalump> I don't use that to edit code :-p
07:03:04 <Heffalump> and that's "Dr. pico -w" to you, I'll have you know.
07:03:14 <Igloo> Not yet it's not (is it?)
07:03:19 <Heffalump> ("almost Dr. pico -w") if you want to be pedantic
07:03:28 <shapr> crap, I can't get any profiling info :(
07:03:37 <Igloo> Hmmm, it's not very useful
07:03:55 <Igloo> It basically says it's all in main
07:04:01 <shapr> hm
07:04:09 <shapr> you're right
07:04:15 <shapr> that doesn't help much
07:04:36 <shapr> maybe gdb or one of those guys
07:04:40 <shapr> if I knew how to use them :)
07:05:20 <Igloo> I don't think there's an easy way to get more useful information
07:05:43 <shapr> .uinai
07:05:46 <shapr> (unhappiness)
07:06:29 <Igloo> Hmmm, I seem to hav got sidetracked again  :-)
07:06:45 <shapr> well, I'll ask on the haskell list
07:08:20 <shapr> thanks for the idea swapping btw ;)
07:08:37 <Igloo> np
07:18:20 <shapr> aha, nofib
07:19:11 <shapr> ya know, the most irritating thing about the Haskell community is that so many of the webpages and code samples are old, outdate, and unworking.
07:20:05 <Heffalump> this is one of the reasons Haskell 98 is a good thing
07:20:14 <Heffalump> people really ought to clearly document it when they go outside that
07:20:18 <shapr> I agree.
07:55:19 <shapr> hello kfl 
07:55:38 <shapr> kfl: have you been here before?
07:56:00 <kfl> hello shapr.
07:56:15 <kfl> No this is the first time I use IRC
07:56:24 <jewel> "BitchX has bite! (Just ask Mike Tyson!)"
07:56:31 <shapr> Welcome to IRC!
07:56:38 <shapr> jewel: scary :)
07:57:10 <shapr> kfl: Are you new to Haskell, or an experience programmer of Haskell?
07:57:39 <kfl> I'm quite experienced using SML
07:58:12 <kfl> But according to the Haskell Wiki I'm a Haskell black belt
07:58:32 <shapr> aha!
07:58:35 <shapr> that's excellent!
07:59:24 <kfl> I'm sorry I have to leave now, but I'm happy to have learned that #haskell is a nice place
07:59:30 <Igloo> Whereabouts in the Wiki is that?
07:59:37 <shapr> come back soon kfl!
07:59:45 <shapr> http://haskell.org/wiki/wiki?HaskellIrcChannel
08:00:02 <shapr> it all started with my calling the #emacs channel "The Emacs Dojo"
08:00:15 <shapr> and then this became The Haskell Dojo
08:00:16 <shapr> and then..
08:00:58 <Igloo> Ah
08:01:44 <shapr> I'd guess you also have a black belt in Haskell
08:02:23 <Igloo> Either brown or black - I haven't done enough with monads to know if I would counts a proficient
08:02:43 <shapr> well, add yourself where you think you fit
08:02:44 <shapr> :)
08:02:55 <Igloo> This is heading dangerously close to a Haskell purity test  :-)
08:03:00 <shapr> oh!
08:03:01 <shapr> good idea!!
08:03:13 <shapr> "Have you ever used unsafeIO?"
08:03:18 * shapr laughs
08:03:32 <shapr> "Have you ever generalized a Monad into an Arrow?"
08:03:40 <shapr> oh, I gotta start that wiki page
08:03:44 <shapr> unless you do it first
08:03:51 <Igloo> I don't do wikis
08:03:55 <shapr> why not?
08:04:08 <Igloo> My only experience was with the Haskell one and it was awful
08:04:23 <shapr> well, it is awful
08:04:24 <shapr> sadly :(
08:04:26 <Igloo> Conflict resolution was "Sorry, please do it yourself"
08:04:33 <shapr> yah, it has major problem
08:04:33 <shapr> s
08:04:40 <shapr> I suggested moin.sf.net
08:04:50 <shapr> but John Heron didn't want to convert all of the pages
08:04:57 <shapr> I should probably volunteer
08:05:04 <shapr> since I know how to do it
08:05:15 <Igloo> Perhaps we should write a beautiful wiki in Haskell  :-)
08:05:20 <shapr> I agreeeee!!!!!
08:05:44 <shapr> I desperately want a Haskell Wiki
08:06:13 <shapr> I've tried to get 
08:06:14 <shapr> oops
08:06:21 <shapr> http://haskell.org/wiki/wiki?HaskellWikiInHaskell
08:06:29 <Igloo> It's not really very functional unfortunately. You might be able to do something nicely functional for the diff/merge bit though
08:07:44 <shapr> I suspect it could be very functional
08:13:12 * shapr searches for any of the HaskellWiki prototypes
08:20:59 * shapr emails Marko Schuetz
08:28:46 * shapr meditates upon list comprehensions
08:29:03 <Igloo> For what purpose?
08:29:28 <shapr> I'm trying to figure out a good way to implement a pascal's triangle function
08:29:44 <shapr> I couldn't figure out how to do it with scan, but list comps might do it
08:29:58 <shapr> [ x | x <- [1] ]
08:30:04 <shapr> step 0
08:30:31 <shapr> I think it was Heffalump who told me that list comps are actually monads
08:30:55 <shapr> list comps are the multiple universes theory, but you get all outputs
08:31:02 <shapr> all legs of the Trousers Of Time
08:36:06 <Igloo> Are you trying to generate the whole triangle?
08:36:20 <shapr> I'd like to
08:36:43 <shapr> pascaltri 1 = 1
08:36:46 <Igloo> I'm not sure I can see how you're going to useful use list comprehensions or scanr without a dummy infinite list then
08:36:48 <shapr> pascaltri 2 = 1 1
08:36:52 <shapr> hmm
08:37:00 <Igloo> Oh, so you just want to get a given row?
08:37:04 <shapr> anything :)
08:37:49 <shapr> pascaltri n = [1] ++ (scanr (+) pascaltri (n-1)) ++ [1]
08:37:58 <shapr> that was my earliest stab at it
08:38:23 <shapr> there was some discussion here about 'sublists' recently
08:38:34 <shapr> I thought that would be a good use of scan
08:39:13 <shapr> I'm good at distracting you I think :)
08:39:24 <Igloo> Hmmm  :-)
08:39:52 * Igloo looks at what I've done and wonders about the efficiency
08:40:07 <shapr> bah, I'll go play with Joy and stop distracting you :)
08:40:28 <Igloo> Try doing it using iterate and a similar basic idea
08:40:37 <shapr> ok, I'll try that.
08:40:46 * shapr looks up iterate
08:50:22 * Igloo feels my next distraction getting closer as I yet again scp config files around and diff them
08:50:30 <shapr> uh oh
08:50:37 * shapr passes some Ritalin to Igloo
08:50:41 <shapr> I just got a new batch today ;)
08:51:01 <Igloo> How would that help?
08:51:15 <shapr> Ritalin is the ultimate cure for distraction.
08:51:47 <shapr> http://c2.com/cgi-bin/wiki?RitalinDrug
08:52:00 <Igloo> Ah, OK. I will ultimately be less efficient if I don't get distracted by things like config file propogation and syntax highlighting config writing, though  :-)
08:52:09 <Igloo> Aaargghh! More wikis!
08:52:15 * shapr cackles
08:52:20 <shapr> that's true
08:52:30 <shapr> always automate manual tasks
09:21:32 <Igloo> (if what I was hinting at with iterate isn't obvious I can expand on it)
09:22:45 <shapr> kind of you to offer, but at the moment I'm doing connected graphs in Joy..
09:22:49 <shapr> or at least trying...
09:23:11 <Igloo> OK  :-)
09:23:42 <Igloo> Is Joy something you'd recommend I have a look at?
09:23:49 <shapr> uh..
09:24:03 <shapr> if you like functional concatenative stack based programming languages
09:24:08 <shapr> I think it's drop dead sexy
09:24:18 <shapr> we're talking about it on #functional
12:06:53 <shapr> hi discobob 
12:07:06 <shapr> how's the disco ball?
12:26:21 <discobob> multi faceted
12:26:37 <shapr> awesome
12:30:58 <discobob> so, are we all pretty much haskell newbies here?
12:31:38 <shapr> er, I'm up to green belt
12:32:11 <shapr> http://haskell.org/wiki/wiki?HaskellIrcChannel
12:32:16 <shapr> do you have any questions?
12:32:22 <shapr> looking for a bunch of people to learn with?
12:33:28 <discobob> dunno, I've got 'Haskell: The Craft of Functional Programming' and 'The Haskell School of Expression' from my local uni library and am slowly making my way thru them.
12:33:39 <shapr> ah
12:33:42 <shapr> they're both nifty
12:33:50 <shapr> but I like Craft more
12:33:57 <shapr> how far have you gotten?
12:34:22 <discobob> a few chapters in Craft 
12:34:55 <discobob> my progress is  very slow since I have to divide my time with other things
12:35:09 <shapr> http://pragmaticprogrammer.com/loty/
12:35:12 <shapr> you should check that out
12:35:44 <discobob> looking
12:36:08 <discobob> can't seem to pull that up?
12:36:30 <discobob> here we go
12:37:31 <Igloo> Neither of you have looked at IFP then? </curious>
12:37:55 <discobob> Introduction to Functional Programming?
12:37:57 <discobob> no
12:38:08 <shapr> not me
12:55:38 <discobob> hmm, does 'show "hello world" qualify me for white belt?
12:55:58 <shapr> it requires that you have a) installed a Haskell interpreter/compiler
12:56:03 <shapr> b) learned how to operate it
12:56:12 <shapr> c) learned how to print in Haskell
12:56:26 <Igloo> You can probably qualify for a white belt without using the "show"  :-)
12:56:32 <discobob> I've got GHC and Hugs98 for windows
12:56:36 <Igloo> "print in Haskell"?
12:57:07 <discobob> currently playing around with Hugs98
12:57:10 <Igloo> That doesn't print in Haskell, it returns a value of type String. The implementatino then sticks it on the screen on the assumption you want to know what your program did
12:57:35 <shapr> heh
12:57:36 <shapr> ok
13:16:01 <discobob> From the Hugs docs "You cannot create new definitions at the command prompt---these must be placed in files and loaded, as described later. The definition of fib in the last example above is local to that expression and will not be remembered for later use. Also, the expressions entered must fit on a single line."
13:16:09 <discobob> That's kinda annoying
13:16:33 <shapr> yah it is
13:16:41 <shapr> but emacs helps
13:19:22 <Igloo> *cough*  :-P
13:19:27 * shapr grins
13:19:41 <shapr> unless you're Igloo, in which case it's vim
13:19:46 <discobob> heh
13:20:01 <shapr> haskell-mode in emacs lets me hit C-c C-l to load the file I'm editing into either ghci or hugs
13:20:12 <discobob> cool
13:20:22 <discobob> a pity I don't know emacs
13:20:31 <shapr> it's a whole project in itself
13:20:32 * discobob is a vim man as well
13:21:16 <Igloo> Ah, I use :e in hugs to load vim rather than that way round
13:21:36 <Igloo> Although I suspect you could do the equivalent in vim
17:28:27 <shapr> wheee
17:43:59 <shapr> well now
17:44:16 --- topic: set to 'Functional Programming, that's the opposite of Dysfunctional Programming (like VB) | we be loggin' http://tunes.org/~nef/logs/haskell/ | welcome to the Haskell Dojo | julien is up to white belt! jewel and shapr are up to green belt!' by shapr
18:08:29 <shapr> hi slevin 
18:08:49 <slevin> hello
18:09:13 <shapr> are you new to Haskell? or do you already know it?
18:09:24 <slevin> supernew
18:09:46 <shapr> are you looking for a group of people to learn Haskell with?
18:09:57 <shapr> or do you have some questions?
18:11:01 <slevin> no plans, I just thought I would see what was being discussed
18:12:14 <shapr> at the moment, the european is either asleep, or should be
18:12:25 <shapr> er, "european contingent"
18:13:18 <shapr> ok never mind then
22:51:57 <Logan> Hmm, can't figure out what's wrong with this:
22:51:58 <Logan> rowends :: [Int]
22:51:58 <Logan> rowends = map (\ x -> (x * (x + 1)) div 2) [1..] 
22:52:22 <Logan> I get:
22:52:23 <Logan> triver.hs:2:
22:52:23 <Logan>     No instance for (Num ((a -> a -> a) -> t -> Int))
22:52:23 <Logan>     arising from the literal `1' at triver.hs:2
22:52:23 <Logan>     In the second argument of `map', namely `[1 .. ]'
22:52:29 <Logan> (and several other errors)
23:20:39 <dennisb> it should be `div`
23:21:30 <Logan> Ohhhh.
23:21:36 <Logan> I'm so blind.
23:22:07 <Logan> Wow, that was the only compile error in over 100 lines.  A first!
23:22:13 <dennisb> nice
23:22:32 <Logan> Oh, wait, there were a few minor things before then, I guess I should count those as well.
23:22:35 <dennisb> it's very easy to do misstakes like that, everyone does it..
23:22:37 <Logan> Still, those were more like typos.
23:22:49 <Logan> I usually have a dozen errors that are caught by the type system.
23:23:17 <Logan> Now to fix the bugs.
23:23:27 <dennisb> that is something that usually decreases when one is used to haskell
23:23:40 <dennisb> (I assume you are not, but what do I know)
23:24:10 <dennisb> I get them even in C alltough i've written C for many years and the typesystem is simple
23:25:30 <Logan> Hmm, I've been writing C for far too long to notice.
23:27:07 <dennisb> but in C type errors are very simple to fix
23:28:12 <Logan> Well, type errors in haskell usually result from a mistake on my part regarding precedence or improperly formed expressions.
23:28:25 <Logan> Whereas in C I understand all the syntax.
