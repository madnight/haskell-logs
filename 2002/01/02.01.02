01:04:23 <shapr> hi
01:11:06 * xbill peeks.
02:42:14 <shapr> hi jewel !!
02:42:20 * shapr pokes
02:43:10 * shapr does LOAD 8,1
02:45:25 <xbill> LOAD 8,1 ?
02:45:48 <shapr> yah, I think that's how you load the first program from the tape of a Commodore 64
02:46:05 <shapr> didn't you ever do PEEK and POKE on the C64?
02:47:29 <shapr> that may not be the correct way to load the first program on the C64 tape drive
02:47:39 <shapr> I suspect there should be an asterisk in there somewhere
02:48:13 <xbill> I thought it was an interpreted bytecode like GInterp.hs
02:48:29 <shapr> nifty guess :)
02:48:56 <xbill> I should do something more with GInterp.hs some day.
02:49:06 <shapr> you said "xbill peeks" so I started thinking Commodore64 instructions
02:49:31 <shapr> iirc, PEEK and POKE let you read and write direct memory addresses
02:49:35 <xbill> /msg #kernel there is such a thing as a priority queue
02:49:50 <xbill> That's a bizarre assembly syntax.
02:50:12 <shapr> yah well, it was C64
02:50:28 <xbill> shapr: Actually, if you're interested in futzing with Haskell miscellania, c.f. http://holomorphy.com/~wli/grid/GInterp.hs
02:50:54 <shapr> it was the most powerful personal computer of its time
02:51:14 <shapr> I'll check it out, no promises of comprehension :)
02:51:30 <xbill> Just compile & run it. =)
02:51:39 * shapr quakes in his.... socks
02:51:53 <xbill> It's shorter than Hsh
02:52:20 <shapr> nah, it's a bit longer.
02:52:26 <xbill> okay, sorry, it's a little longer
02:52:35 <xbill> $ wc ~/public_html/grid/GInterp.hs ~/src/hsh/Hsh4.hs     
02:52:35 <xbill>     582    2673   15717 /home/wli/public_html/grid/GInterp.hs
02:52:35 <xbill>     306    1264    8494 /home/wli/src/hsh/Hsh4.hs
02:52:41 <shapr> plus your code is sometimes a bit above my conceptual level ;)
02:53:00 <shapr> hrm, it wants Readline
02:53:19 <xbill> there's probably a long list of -package things you'll need.
02:53:38 * shapr tries
02:53:55 <xbill> ghc -Wall -fasm -fglasgow-exts -fallow-overlapping-instances -fallow-undecid
02:54:13 <xbill> ghc -Wall -fasm -fglasgow-exts -fallow-overlapping-instances -fallow-undecidable-instances -fno-monomorphism-restriction -syslib data -syslib lang -syslib util --make
02:54:28 <xbill> There's a Main.hs there too
02:54:36 <xbill> It just does main = debug (compile gm0)
02:55:23 <shapr> hm, it loses putStr
02:55:30 <shapr> GInterp.hs:12: Variable not in scope: `Prelude.putStr'
02:55:37 <xbill> What?
02:56:11 <xbill> It shouldn't be losing it entirely...
02:56:17 <xbill> What ghc?
02:56:19 <shapr> it appears to have misplaced the Prelude
02:56:23 <shapr> 5.02.00
02:56:38 <shapr> it's probably a debian problem
02:56:46 <xbill> no it's not
02:56:57 <xbill> I do import Prelude hiding (putStrLn, putStr)
02:57:02 <shapr> ah
02:57:17 <xbill> I should be able to use them as qualified names.
02:57:53 <shapr> hm, weird.
02:58:17 <xbill> Well, it's going.
02:58:21 <shapr> is there a way I can rename functions as they're imported?
02:58:31 <xbill> Not sure
02:58:42 <xbill> I'm trying a little something right now.
02:59:07 <shapr> well, whatever it is, it looks very cool
02:59:19 <xbill> I don't think it gets errors, I'll send you a tarball you can just do "make" with.
02:59:35 <shapr> I'd guess it's either an interpreter of some kind, or a symbolic logic solver...
02:59:37 <shapr> or maybe both :)
02:59:38 <xbill> That is, as soon as ghc finishes running so I can clean things.
02:59:51 <xbill> an interpreter, no solving going on =)
02:59:57 <shapr> ok
03:00:16 <xbill> Okay, it's done.
03:00:24 <xbill> I'll DCC momentarily.
03:00:26 <shapr> this could take me weeks to puzzle through :)
03:00:34 <shapr> my client doesn't support dcc
03:00:47 <shapr> I'm curently at shae.erisson@widian.fi
03:01:02 <xbill> I'll send it as a MIME attachment.
03:01:24 <shapr> I'm surprised it's having problems with putStr & putStrLn
03:01:29 <shapr> it should work I think.
03:02:08 <xbill> it does work here
03:02:17 <shapr> what ghc?
03:02:49 <wli> The Glorious Glasgow Haskell Compilation System, version 5.00.2
03:02:55 <shapr> hm, I think I'll make it explicit in my local copy
03:03:01 <shapr> that was cool :)
03:03:10 <shapr> cameo appearance by wli
03:03:21 * xbill = wli
03:03:26 <shapr> I know :)
03:03:29 <xbill> heh
03:03:56 <shapr> I think of xbill as wli the kernel developer going incognito
03:04:56 * xbill thinks that's accurate.
03:06:38 <shapr> gah.. I expleted the putStrLn & putStr calls to GInterp.
03:06:45 <shapr> more problems.. hmm
03:06:47 <xbill> expleted?
03:07:01 <xbill> It doesn't work as-is with the tarball?
03:07:19 <shapr> expleted is a joke on "made explicit"
03:08:20 <shapr> hm, nope
03:08:24 <shapr> I ran "make" in that directory
03:08:51 <xbill> you ran make and it didn't work?
03:08:52 <shapr> same problem with shadowing
03:09:00 <shapr> GInterp.hs:12: Variable not in scope: `Prelude.putStr'
03:09:01 <shapr> right
03:09:11 <xbill> ii  ghc5           5.00.2-1       GHC - the Glasgow Haskell Compilation system
03:09:19 <xbill> Is that the same version you're running?
03:09:42 <shapr> ii  ghc5                                        5.02-1                                      GHC - the Glasgow Haskell Compilation system
03:09:51 <shapr> 5.02.00
03:09:59 <shapr> though I think 5.02.1 is out
03:10:06 <xbill> okay, I'm upgrading and installing right now
03:10:31 <xbill> And porting.
03:10:38 <shapr> heh :)
03:11:00 <xbill> You should at least have something runnable to play with
03:11:25 <shapr> I admit, I'd like to see this run
03:11:44 <xbill> there's another doc to look at 
03:11:50 <shapr> ?
03:11:58 <xbill> http://holomorphy.com/~wli/doc/student.pdf
03:12:10 <xbill> I think student.dvi and student.ps are also there
03:12:19 <xbill> They should help explain a bit of what's going on.
03:12:21 <shapr> I've been wondering how I can write stuff like "tr" as a straight up Haskell function, and have it work in a Haskell shell.
03:12:50 <xbill> Okay, I get the error now: GInterp.hs:12: Variable not in scope: `Prelude.putStr'
03:14:31 <shapr> wow, cool
03:14:40 <shapr> re: student.pdf 
03:15:37 <xbill> Okay, I fixed it.
03:15:40 <shapr> yay!
03:15:54 <xbill> I did import qualified Prelude as P
03:16:04 <xbill> In addition to the import Prelude hiding (...)
03:16:14 <xbill> And changed the Prelude.putStr etc. to P.putStr
03:18:03 <xbill> what's your email again?
03:18:04 <shapr> any other changes?
03:18:14 <xbill> none whatsoever
03:18:15 <shapr> shae.erisson@widian.fi during the day :)
03:18:18 <shapr> hm
03:18:34 <shapr> oh, those are just warnings
03:19:10 <xbill> resent
03:19:44 <xbill> fixing the warnings might be an interesting project
03:22:08 <xbill> http://holomorphy.com/~wli/grid/session.log
03:22:16 <xbill> That should give you an idea of what it does.
03:22:33 <xbill> also see newsession.log
03:23:02 <shapr> fascinating
03:24:21 <shapr> and probably applies to improving Hsh, as well as writing a lojban shell in Haskell
03:26:25 <shapr> hm, Miranda looks like Haskell
03:26:26 <xbill> improving the readline support might also help
03:28:23 <shapr> aha, I need to install libreadline4-dev
03:29:59 <shapr> mmm, nifty
03:30:17 <xbill> Did you see newsession.log and session.log ?
03:30:36 <shapr> yup, I'm trying those myself
03:30:51 <shapr> how could the readline support be improved? it appears to work flawlessly.
03:31:14 <xbill> allowing completion on command names
03:31:23 <shapr> ah!
03:31:23 <dennisb> xbill: did it not work to do import qualified Prelude as well as the hiding
03:31:25 <xbill> Did you get the B.1.3 from the page?
03:31:33 <dennisb> do you have to give it a new name
03:31:37 <dennisb> ?
03:31:47 <xbill> dennisb: What do you mean it didn't work to do that?
03:31:56 <dennisb> (but you can of course, since it's shorter)
03:32:06 <dennisb> <xbill> I did import qualified Prelude as P
03:32:08 <xbill> dennisb: AFAICT ghc5.02 accepts it without any trouble
03:32:17 <dennisb> did you need the "as P"?
03:32:25 <xbill> yes
03:32:26 <dennisb> or maybe you wanted the "as P"
03:32:40 <xbill> It was in addition to import Prelude hiding (...)
03:32:47 <dennisb> yes, that's for sure
03:32:53 <shapr> now I have B.1.3
03:32:57 <dennisb> that is another question
03:33:15 <xbill> import Prelude hiding (putStrLn, putStr)
03:33:15 <xbill> import qualified Prelude as P
03:33:23 <xbill> it compiles here ...
03:33:25 <dennisb> I tought:
03:33:32 <dennisb> import Prelude hiding (putStrLn, putStr)
03:33:32 <dennisb> import qualified Prelude
03:33:37 <dennisb> was enough
03:33:43 <xbill> no
03:33:56 <xbill> well, it might be
03:33:57 <dennisb> strange
03:34:04 <xbill> I'll try it and see.
03:36:00 <dennisb> But the standard say "The hiding clause only applies to unqualified names. In the previous example, the name M.C is brought into scope. A hiding clause has no effect in an import qualified declaration."
03:36:43 <dennisb> (the previous example is "import M hiding (C)"
03:38:16 <dennisb> But I remember I read something about this on the haskell list some month ago (but I didn't really read it)
03:46:20 <shapr> hm, I wonder if I could implement a lojban interpreter this way....
03:47:26 <xbill> Yes, you can interpret anything this way if you define it in terms of translations to progressively lower-level representations.
03:47:29 <shapr> I'd like to find some way I could use Haskell at work
03:49:33 <xbill> shapr: it's simple -- it's a "next generation scripting language"
03:49:59 <xbill> shapr: with a small bonuses of being compilable to machine code
03:50:07 <xbill> no need to be noisy about it
03:50:20 <xbill> When it comes to use perl for some random thing, use Haskell instead
03:50:25 <xbill> I do this regularly.
04:07:25 <dennisb> (me too)
04:15:52 <shapr> I don't know how to use it for a scripting language
04:15:52 <shapr> can you give me some examples?
04:22:18 <shapr> when I'm scripting something, it's usually a search and replace, or some kind of text transformation
04:22:20 <xbill> sure
04:22:28 <shapr> maybe I should investigate HaXml
04:23:15 <xbill> I can show you something I brewed up
04:23:25 <xbill> It probably won't work with many ghc versions
04:24:28 <xbill> There you go.
04:24:53 <shapr> ?
04:25:02 <xbill> did you get it?
04:25:14 <shapr> checking email
04:26:33 <shapr> my email server is lagging
04:28:35 <shapr> I got it
04:28:39 <shapr> and I think you should post it :)
04:28:48 <xbill> it's dirty
04:28:59 <shapr> it's cool
04:29:32 <xbill> the other trick is I don't want to maintain it =)
04:29:47 <shapr> I think that's understood :)
04:30:04 <shapr> much like I found Hsh.hs, and it was in a pre-ghc2.10 state
04:30:17 <shapr> it's *useful*
04:30:26 <shapr> immediately useful, and very hackable
04:30:36 <xbill> it's pretty much redundant with fetchmail
04:30:37 <shapr> unlike most of the Haskell source I see :-/
04:30:48 <shapr> yah, but that's part of what's cool about it
04:31:01 <xbill> OTOH ... if you care to do something with it you are quite free to take it over and so on
04:31:46 <shapr> yah, if you don't mind me hacking on it a bit and putting it online...
04:31:57 <xbill> by all means, please do
04:32:08 * shapr bounces cheerfully
04:32:09 <xbill> I'd much rather pass it on than maintain it myself.
04:32:10 <shapr> yay!
04:32:52 <shapr> my only special request is that you send me a version with some kind of license attachment, lgpl, gpl, public domain, whatever
04:33:22 <shapr> that way if it later makes it into a collection of nifty Haskell tidbits, people will be able to know whether they can stick it into a commercial product
04:34:05 <shapr> I've run into the problem that I'd like to use a bit of code I've found, but no license info is included, so my boss is wary
04:34:25 * shapr bounces cheerfully
04:34:54 <shapr> cool, now I have three pieces of Haskell code to play with.. Mandelbrot.hs, Hsh.hs, and Imap.hs
04:37:21 <shapr> hm, the not-clean-ness of this code shows the changes you've made... very enlightening...
04:39:05 <xbill> yes, it was very much a big hack.
04:39:25 <shapr> it's nice to see the progress
04:45:26 <shapr> I wonder if there's already a project to collect Haskell libs like Imap, Pop3, Smtp, etc
04:45:57 <shapr> one thing I've noticed is the lack of a single site with either links or mirrors to all the real stuff
04:46:22 <xbill> there should be
04:46:36 <shapr> the pages on haskell.org have broken links 
04:48:47 <xbill> total suckage
04:49:57 <shapr> I've considered whipping up a HaskellWiki page and updating it myself
04:51:43 <xbill> go for it dude
05:48:42 <shapr> I could *really* go for an ASN1 codec written in Haskell.
05:50:17 <xbill> what's asn1?
05:51:25 <shapr> abstract syntax notation one
05:51:43 <shapr> it's a BNF style bit level format specification language
05:52:16 <shapr> primarily designed for data interchange between very different systems, the first version of the standard is from 1988
05:52:50 <shapr> it's used in SNMP, GSM, and most any kind of public key crypto
05:53:12 <xbill> no idea
05:53:36 <shapr> it's quite evil... you're better off not knowing.
