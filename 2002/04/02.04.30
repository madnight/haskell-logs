04:27:30 * shapr wishes emacs were written in haskell
04:28:35 * clausen too
04:44:50 <Logan> Wow, I'm up to 700 lines of code doing this project.
04:45:20 <clausen> that's quite a lot for haskell
04:45:29 <clausen> in C, it's just getting warmed up, hehe
04:45:31 * Logan nods.
04:45:35 <Logan> It does a lot.
04:45:46 <Logan> A lot of things I wrote I ended up not needing later as I discarded some methods to try others.
04:46:01 <Logan> A few other things are ugly hacks.
04:46:20 <Logan> And some of the code is horrifyingly inefficient. :P
04:47:24 <Logan> Heh, in C I might write 1500 lines of code in one night...
04:47:32 <Logan> This is 700 lines of code that took 4 days that does far far more. :P
05:13:41 <shapr> code density in haskell is very high
05:13:55 <shapr> and yet it's *far* more readable than other high density langs (perl)
05:15:30 <clausen> it's harder to get right
05:15:31 <clausen> but once you do
05:15:33 <clausen> it's very very nice
05:15:37 <clausen> (and very reusable, etc.)
05:17:16 <shapr> yah, totally
05:17:28 <shapr> haskell has a much higher 'plateau' than the other langs I use.
05:17:33 <clausen> OTOH, I'm not sure what to make of persistent data structures
05:17:45 <clausen> (that haskell forces on you)
05:17:49 <shapr> ?
05:17:58 <shapr> whaddya mean?
05:18:07 <clausen> well, all values in haskell are persistent
05:18:08 <Igloo> Immutable, I think
05:18:12 <clausen> exactly
05:18:13 <clausen> (some thing)
05:18:15 <clausen> s/some/same/
05:18:39 <Igloo> I could be wrong but I think persistence implies being remembered between program executions
05:18:57 <clausen> Igloo: depends on context
05:19:07 <clausen> Igloo: okasaki's book uses "persistence" to mean immutable
05:19:58 <Logan> The proejct I was working on: http://aux.planetmath.org/logan/class/2002/spring/digital-picture-processing/prog3/blocks.pdf
05:20:04 <Logan> Kind of a lame solution I came up with.
05:20:36 <Logan> clausen: I've been making good use of mutable references and arrays in this project.
05:20:49 <clausen> Logan: that's Bad Karma TM
05:21:11 <Logan> I've only used it in contexts where appropriate.
05:21:20 <Logan> For instance, I came up with an algorithm this morning centered around a state machine.
05:21:33 <Logan> An ST thread containing a set of references was obvious.
05:21:40 <clausen> yep
05:21:54 <clausen> well, you can do state machines with transition functions, etc.
05:21:55 <Logan> Also, some of my functions build images.  It makes sense to build them as mutable arrays and then return a frozen version.
05:22:02 <Logan> Sure, and that's all the ST thread does.
05:22:05 <clausen> (i.e. do a while loop thingy)
05:22:18 <Logan> But the compiler can take advantage of what I mean by it and do things in-place.
05:22:44 <clausen> Logan: it should be able to (in theory) anyway
05:22:53 <Logan> Yes.  I assume it does. :P
05:23:09 <clausen> (without making it mutable, that is)
05:25:11 <Logan> Semantically it's immutable.
05:25:33 <Logan> But since in some cases mutability can be semantically equivalent, it's safe to do so.
05:25:54 <clausen> yeah, but the compiler should make that decision
05:25:56 <clausen> not the programmer
05:25:58 <clausen> (if possible)
05:26:20 <Logan> Well, I help the compiler recognize the situation (and help myself write more co ncise, readable code) by taking advantage of the ST monad.
05:27:07 * clausen thinks it's a bit ugly
05:28:10 <Logan> As opposed to explicitly returning tuples and creating one big long chain of functions?  (which is all the monad does anyway, provides a different syntax for expressing that)
05:28:32 <clausen> there are elegant ways of doing it
05:28:54 <Logan> I think the monad is elegant. *grin*
05:28:57 <Logan> How would you do it?
05:29:10 <clausen> want to see my project?
05:29:14 <clausen> (PDA simulator)
05:29:22 <clausen> (or NFS simulator... I have both...)
05:29:27 <clausen> s/nfs/nfa/
05:29:56 <Logan> If you have a PDA simulator, you automatically get NFAs and DFAs. :P
05:30:03 <Logan> I'd like to see it.
05:31:36 <clausen> okay...
05:31:45 <clausen> email?
05:31:50 <clausen> (or ctcp?)
05:33:28 <Logan> Email: logan@vt.edu
05:33:40 <Logan> I have to shower and go to class shortly, so I might not get to it until this afternoon.
05:34:15 <clausen> sent
05:34:15 <clausen> ok
05:34:29 <Logan> Thanks.
05:35:12 <Logan> Can the PDA be used to generate strings as well as accept them?
05:36:33 <clausen> no
05:36:36 <clausen> just accept
05:36:41 <clausen> it's a bit dodgey too
05:36:50 <clausen> like, it will fail on rules like
05:36:53 <clausen> empty, empty -> $
05:36:54 <clausen> say
05:37:06 <clausen> (not too hard fix, but a bit messy, and we don't have to fix that)
05:37:23 <Logan> Sounds like a fun project. :P
05:37:32 <Logan> I wrote some lame automaton entries on planetmath.org.
05:37:40 <clausen> yeah, it is quite fun :)
05:37:44 <clausen> but that bit isn't
05:37:52 <clausen> (it's just a matter of limiting the size of the stack
05:38:15 <clausen> to (length states) * (length string)
05:38:19 <clausen> )
05:38:31 <Logan> That empty, empty -> $ rule specified a lambda transition?
05:38:53 <clausen> lambda == empty? yes
05:39:04 <clausen> i.e. take nothing from input stream
05:39:06 <clausen> pop nothing from stack
05:39:09 <clausen> and push something on
05:39:14 <clausen> it will just go round in circles
05:39:14 * Logan nods.
05:39:26 <Logan> You don't execute the PDA nondeterministically?
05:39:43 <clausen> it is nondeterministic
05:39:51 <clausen> but, if it fails to match a string
05:39:54 <clausen> and there's a rule like that
05:39:58 <clausen> (i.e. a string isn't in the language)
05:40:02 <Logan> Ah.
05:40:12 <clausen> then it will keep trying all branches
05:40:15 <clausen> (it's like a BFS)
05:40:15 <Logan> So if the language is empty, you have no way of ever determining that.
05:40:21 <clausen> nonono
05:40:27 <clausen> it's only if there's one of these "circular" rules
05:40:37 <Logan> Er, yeah, in that particular case.
05:40:51 <clausen> the solution is to limit the size of the stack
05:41:24 <Logan> That's one way to deal with it.
05:41:44 <clausen> (only way?)
05:41:51 <Logan> I don't know, I'm thinking about it.
05:42:00 <Logan> But I've been up all night so it's not going to be quality thinking.
05:42:02 <Logan> I should go shower.
05:42:04 <Logan> BBL.
05:42:04 <clausen> hehe
05:42:05 <clausen> ok
05:42:06 <clausen> cya!
05:42:11 * clausen off to bed
05:46:36 <shapr> f00, what did I miss?
05:57:13 <Logan> Me finishing my last project of the semester. :P
06:55:11 <shapr> Logan: what do you do in your spare time?
06:55:33 <shapr> wi Logan
06:55:47 <shapr> whoops
06:56:04 <shapr> oh, virginia tech
07:00:09 <shapr> does Haskell have first class continuations?
09:26:03 <Logan> Whee.
09:26:17 <Logan> I'm done with classes for the semester (minus a couple of exams).
23:29:27 <Logan> I'm getting some strange behavior from IOExt.
23:29:36 <Logan> Some files I'm writing aren't coming out right.
23:40:59 <Logan> Ah, mistake on my end.
