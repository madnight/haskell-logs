00:00:06 <clausen> noz: no
00:00:08 <clausen> countLines :: String -> Int
00:00:12 <clausen> is just a type signature
00:00:12 <clausen> brb
00:00:48 <clausen> back
00:00:54 <clausen> you can't type-cast in haskell
00:01:43 <noz> can i read a file into string or strings?
00:01:45 <noz> not IO string?
00:02:05 <Logan> noz: You can convert any IO type into a regular type within a function, but that function will have to return an IO type.
00:02:21 <noz> hrm
00:02:27 <Logan> noz: Because the actions of that function are dependent upon something besides its arguments (the outside world).
00:02:37 <noz> i understand
00:02:38 <Logan> The IO keeps you honest.
00:02:50 <noz> i'm just stressed because i'm inexperienced at this :)
00:03:09 <Logan> Monads take a while to get used to, though the IO monad isn't too tough to learn.
00:03:11 <clausen> Logan: except for unsafePerformIO *evil grin*
00:03:19 <noz> i can't use Monads and do statements
00:03:22 <noz> it's not covered in my course
00:03:31 <Logan> noz: What is the exact spec of the problem?
00:03:31 <clausen> then, it looks like you don't need to read file
00:03:33 <clausen> files
00:03:42 <noz> but i do
00:03:43 <Logan> If you're just given a string, you're fine. :P
00:03:48 <Logan> If you're given a filename, you're not.
00:04:00 <noz> in my program i have submodules to read lines of a file
00:04:00 <Logan> Because you can't cover IO in your course without covering monads and do statements.
00:04:08 <noz> take a random number mod nolinesinfile
00:04:13 <noz> and then return a specific lind
00:04:15 <noz> line even
00:04:26 <Logan> What do those submodules look like?
00:04:33 <noz> nothing yet :)
00:04:50 <noz> 2 functions: noOfLines AND getALine
00:04:58 <noz> ...
00:05:47 <Logan> No code was provided to you?
00:06:01 <noz> Logan, clausen: can you recommend a good Haskell tutorial and reference book?
00:06:55 <clausen> not really
00:07:01 <clausen> I haven't been impressed by anything I've read
00:07:10 <clausen> the gentle introduction to haskell isn't too bad
00:07:15 <noz> ty for your help all the same guys
00:07:16 <noz> on the web?
00:07:26 <clausen> "Haskell: The craft of functional programming" isn't very good
00:07:29 <noz> nope no code
00:07:35 <noz> the spec is much larger than that
00:07:35 <clausen> (it starts out ok
00:07:40 <clausen> but doesn't explain very much)
00:07:43 <noz> but what i'm struggling with is those 2 functions
00:07:46 <noz> ok
00:07:51 <clausen> the gentle intro is on the web
00:08:03 <Logan> I haven't read any books, the gentle intro is probably the best I've seen.
00:08:05 <clausen> noz: read the source to the functions!
00:08:06 <Logan> There isn't much.
00:08:09 <clausen> read Prelude.hs
00:08:13 <clausen> it is very enlightening
00:08:18 <Logan> clausen: That's what I'm going through to write my documentation. :P
00:08:20 <clausen> noz: have you done programming before?
00:08:25 <noz> yeah
00:08:31 <Logan> All I want is a cross-referenced hyperlinked version of the prelude source.
00:08:38 <noz> and /me nods :) reading Prelude.hs is prolly a good idea
00:08:39 <Logan> Because my problem is not knowing what functions exist.
00:08:55 <clausen> yeah, you just need to memorize everything
00:08:56 <Logan> noz: And http://aux.planetmath.org//logan/haskell/ :P
00:08:56 <clausen> (or
00:09:00 <noz> i've done a fair bit of C
00:09:03 <clausen> get the feeling that a particular function should exist
00:09:05 <noz> but only Haskell for 8 weeks
00:09:08 <clausen> and look in the right place ;)
00:09:11 <clausen> noz: aha
00:09:51 <noz> thanks
00:09:51 <noz> ciao
01:19:09 <Logan> I just documented all of PreludeList!
02:31:25 * Igloo deduces Logan is looking at the non-revised report and suggests he works from http://research.microsoft.com/Users/simonpj/haskell98-revised/haskell98-report-html/index.html instead
02:55:40 <Logan> Heh.
02:55:47 <Logan> Haskell.org should link to that, then. :P
02:58:15 <Igloo> It does
02:59:01 <Logan> Oh, it does mention it offhand on the main Report page.
03:11:20 <DLid> need some help with this algorithm if anyone could help?
03:12:16 <DLid> i know what i want to do and can probably write the code, but i cant figure out the algorithm
03:14:15 <Logan> What is it?
03:14:55 <DLid> ok, ive got to define a function bools :: Int -> [[Bool]]
03:15:12 <DLid> it calculates a list of possible logical values of that length
03:15:16 <DLid> so if i say bools 2
03:15:35 <DLid> this would give, [F,F],[F,T],[T,F],[T,T]
03:15:39 <DLid> understand?
03:15:46 <Logan> Yes.
03:15:54 <DLid> now what i have noticed is...
03:16:02 <Logan> Here's one approach:  bools n = map intToBoolArray [0..n]
03:16:20 <Logan> Where intToBoolArray converts an integer to its binary representation. :P
03:16:26 <Logan> But that's kind of ugly in Haskell.
03:16:36 <DLid> the last column alternates by 1, the second column (if bools 2) alters by 2, the 3rd column(if bools 3) alters every 4
03:16:40 * Logan nods.
03:16:49 <Logan> Another approach is to just define your problem inductively.
03:16:54 <Logan> For instance, what is bools 1?
03:17:07 <DLid> bools 1 just gives F and T
03:17:14 <Logan> Right, and what is bools 2 in relation to bools 1?
03:17:21 <Logan> Or bools (n + 1) in relation to bools n?
03:17:26 <DLid> it contains bools 1
03:17:32 <DLid> that is the last column
03:17:44 * Logan nods.
03:17:51 <DLid> and also has a second column which the F and T changes every 2
03:18:32 <Logan> bools 0 = [] , bools n = concat ((map (False :) x) ++ (map (True :) x)) where x = bools (n - 1)
03:18:37 <Logan> Might work.
03:18:56 <DLid> ill have a look at that
03:18:57 <DLid> cheers
03:20:11 <DLid> no sorry
03:20:25 <Igloo> You don't want the concat and I'm fairly sure that would always give you the empty list anyway
03:20:31 <Logan> Yeah.
03:20:34 <DLid> yeah
03:20:39 <Logan> Igloo: I just realized both by coding it and running it. (;
03:20:49 * Logan refines it.
03:21:29 <Logan> bools :: Int -> [[Bool]]
03:21:29 <Logan> bools 0 = [[]]
03:21:29 <Logan> bools n = map (False :) x ++ map (True :) x
03:21:29 <Logan>           where x = bools (n - 1)
03:21:43 <Logan> I was close. :P
03:22:20 <Logan> Igloo: What is so evil about "n+k" patterns?
03:22:41 <Igloo> People don't like the asymmetry I think
03:22:57 <DLid> that works perfectly cheers
03:23:17 <Igloo> I'm a fan personally - it's a convenient shorthand for   foo n | n >= k   and often makes the RHS nicer too
03:23:19 <Logan> I got the impression that it was a design issue rather than a stylistic issue, but never saw any explanation.
03:23:23 <Logan> Yeah.
03:23:29 <Logan> I could've said bools n + 1 .... where x = bools n
03:23:35 <Logan> Er, bools (n+1)
03:23:54 <Logan> I haven't used it much.
03:24:18 <Igloo> Doesn't make much difference when there's only 1 use. It would mean that you function wasn't order dependent, though
03:24:31 <Logan> Order dependent?
03:24:34 <Igloo> (ignoring -ve numbers)
03:24:42 <Logan> Oh.
03:24:53 <Igloo> You could have the n+1 case before the 0 case and it would still work for non-negative numbers
03:24:54 <Logan> Good point.
03:25:07 <Logan> What happens if I give it a negative number?
03:25:41 <Igloo> Give what a negative number?
03:25:44 <Logan> Nevermind.
03:25:58 <Igloo> Your definition will diverge, the one with (n+1) will give an error
03:26:45 <Logan> I get non-exhaustive pattern error with a negative argument.
03:27:11 <Igloo> With the (n+1) code?
03:27:22 * Logan nods.
03:27:30 <Igloo> Sounds about right
03:28:04 <Logan> It can infer that, if I have a pattern like 0 and a (n+1) pattern, that n >= 0 must hold?
03:29:21 <Igloo> Well, it tries the forst one and finds 0 doesn't match -3. Then it finds n+1 doesn't match -3 (when n is positive). Then it finds it has run out of patterns so tells you so
03:31:42 <Logan> In other words, yes? :P
03:32:55 <Igloo> I doubt it infers that n >= 0 must hold, particularly as I suspect this isn't possible for arbitrary guards
03:33:51 <Igloo> Hmmm, although it does warn you if you turn -Wall on - I'm sure that must give either false positives or false negatives in complex situations
03:37:03 <Igloo> Ah, yes
03:37:07 <Igloo> > qq x | x == 1 = 0
03:37:07 <Igloo> >      | x /= 1 = 1
03:37:10 <Igloo> test.lhs:4: Warning: Pattern match(es) are non-exhaustive
03:37:10 <Igloo>     In the definition of `qq': Patterns not matched: _
03:37:57 <Igloo> Oh, actually, that'll need a type to be necessarily true
03:38:24 <Logan> Isn't the type (Num a) => a -> a ?
03:38:30 <Igloo> But it still does it with Int -> Int
03:38:48 <Logan> I guess the compiler really knows nothing about == and /=
03:38:55 <Logan> Or, rather, the laws they obey.
03:39:14 <Igloo> Yes, but for a given Num you could define == and /= so that not (a == b) doesn't imply a /= b
03:39:32 <Igloo> (and it's actually (Num a, Num b) => a -> b)
03:39:40 <Logan> Though it wouldn't be hard to hack the compiler to understand that, I suppose.
03:39:42 <Logan> Oh yeah.
03:40:01 <Logan> But I guess it has to know something about the nature of addition to implement n+k patterns in the first place.
03:41:51 <Igloo> I haven't looked at how it's defined, but my guess would be it uses n = i-k and first checks n >= 0
03:49:06 <DLid> sorry, just started looking at the code you gave me, could you explain how it works...
03:49:15 <DLid> i know map applies a function to every element in a list
03:49:21 <DLid> and say using bools 2...
03:49:40 <DLid> it goes map (False :) map (False :) bools 1 ++ etc and goes like that
03:49:55 <DLid> but i dont see how it comes up with FF, FT, TF, TT
03:50:02 <Logan> DLid: What I do is take x = bools (n - 1), ...
03:50:20 <Logan> DLid: And then I construct a new list by putting False at the front of every element in x
03:50:25 <Logan> DLid: And I make another by doing the same with True
03:50:32 <Logan> DLid: And concatenate those together with ++.
03:50:53 <Logan> So, the base case is a list containing only the empty list.
03:51:03 <DLid> yep, i get that
03:51:18 <DLid> but...
03:51:38 <Logan> For bools 1, you have x = bools 0 == [[]].  So you put False in front of every element of x, giving [[False]], and do the same with True, giving [[True]], and concatenate them to get [[False], [True]]
03:52:05 <DLid> ok, i understand that
03:56:03 <DLid> cheers
04:30:49 <Heffalump> ahah, someone helpfully posted the thing I was thinking of earlier to the list again
04:30:53 <Heffalump> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html
05:14:27 <Logan> Heffalump: That's more or less what I wanted, except not sorted categorically.
05:14:41 <Logan> Heffalump: Have you looked at my effort now?  I have automatic hyperlinks and all. (:
05:15:12 <Logan> I need to add a bunch of math I skipped over...
05:15:25 <Logan> And a lot of the modules provided in the standard library...
05:15:36 <Logan> And come up with a way of documenting data types and type classes.
05:28:52 <Igloo> Logan: You may be interested in http://www.haskell.org/~simonmar/haddock-example/Prelude.html (and the rest of the directory it's in)
05:34:25 <Logan> Heh.  Where were you guys when I first started learning Haskell? :P
05:34:57 <Logan> Too bad the source code link is broken.
05:35:41 <Igloo> Well that didn't exist last month  :-)
05:36:38 <Logan> Oh.
05:37:25 <Logan> What is Haddock?
05:37:48 <Igloo> A documentation generator
05:38:55 <Logan> My code for this is too ugly for release. :P
05:39:04 <Logan> It's sort of a hack.
05:53:07 <Heffalump> logan: could you repeat the URL?
05:54:10 <Logan> For mine?  http://aux.planetmath.org/logan/haskell/
06:08:10 <Logan> What's the difference between div and quot?
06:08:37 <Logan> How they deal with negative numbers?
06:14:49 <Logan> Ah, found it in the Report.
08:26:39 <DLid> i have to define a function substs :: Prop -> [Subst] where Subst is defined as [(Char,Bool)], that calculates all possible substitutions for the variables of a proposition, would i use pattern matching again?
08:47:24 <Logan> Whati s Prop?
08:48:08 <DLid> data Prop = Const Bool | Var Char | Not Prop | And Prop Prop etc
08:48:11 <Heffalump> you probably want to use the "vars" thing you defined before
08:48:26 <DLid> i thought about taking the clean function
08:48:51 <DLid> because i only want to produce values with one char A
08:49:13 <Logan> Maybe nub will be useful?
08:49:19 <DLid> nub?
08:49:24 <Heffalump> yes, use clean
08:49:34 * Logan is lacking context. :P
08:49:36 <Heffalump> (nub is a prelude function that does exactly what the clean you had to write does)
08:49:40 <DLid> should i use pattern matching again?
08:50:05 <DLid> is the best way i think
08:50:21 <Heffalump> I don't think so
08:50:29 <DLid> what should i use then?
08:51:02 <Heffalump> substs p = something that involves p
08:53:11 <DLid> what i need is, im thinking, take the Prop, say substs x, use vars to create a list of chars, then use clean on this, and then apply the bools function which returns the combinations of true and false
08:53:19 <DLid> what do you reckon?
08:53:23 <Heffalump> that sounds perfect
09:06:55 <DLid> i thought about using map to apply the bools function to every element in tht list produced by clean
09:07:11 <Heffalump> what does the bools function do?
09:07:16 <Heffalump> what's it's type, in particular?
09:07:17 <Logan> If you have a list of variables, that gives you the length of the argument to bools.
09:07:40 <Logan> Heffalump: Int -> [[Bool]]... generates all unique combinations of lists of boolean values of a given length.
09:07:43 * Logan remembers that part. :P
09:07:45 <DLid> bools is Int -> [[Bool]]
09:07:51 <DLid> :)
09:08:00 <Heffalump> ok, so you don't want to use map
09:08:05 <Logan> You need to take each element of bools n, where n is the number of variables, and zip it with your list of variables.
09:08:31 <Logan> E.g. zip varlist (bools (length varlist))
09:08:42 <Heffalump> logan: just do his coursework for him, why don't you? :-)
09:08:48 <Logan> Sorry. ):
09:09:00 <Logan> I'm not used to this haskell-as-coursework thing. :P
09:09:17 <DLid> i will try and do it differently!
09:09:29 <DLid> that person gave me some code yesterday which i didnt use!!
09:09:38 <DLid> best write it by myself
09:09:39 <Heffalump> dlid: there's not really many other ways to do it
09:09:48 <DLid> damn
09:09:56 <Logan> What you end up doing will be zip, whether you call it that or not.
09:10:04 <Heffalump> that's certainly the shortest way I can think of
09:10:22 <Logan> But recognizing what a zip is and how to apply it should be sufficient.
09:11:15 <DLid> ah yes, just reading my notes on the zip function!
09:11:52 <Logan> http://aux.planetmath.org//logan/haskell/PreludeList.html#zip
09:11:53 * Logan grins.
09:13:01 <DLid> *** Term           : substs
09:13:01 <DLid> *** Type           : Prop -> [(Char,[Bool])]
09:13:01 <DLid> *** Does not match : Prop -> [Subst]  
09:13:13 <DLid> SUbst is [(Char,Bool)]
09:13:19 <DLid> those [] brackets
09:13:31 <Heffalump> oh, what Logan said is actually wrong :-)
09:13:37 <DLid> :)
09:13:51 <DLid> becaus bools Int -> [[Bool]]
09:14:00 <Logan> Yeah, you need a map in there.
09:14:02 <Heffalump> bools will return a big bunch of lists of bools
09:14:09 <Logan> This time I won't give it away!
09:14:14 <DLid> :)
09:14:17 <Heffalump> and for each list of bools, you need to combine that with the list of variables
09:14:29 <DLid> so use map
09:14:36 <DLid> somewhere
09:14:37 <Heffalump> or a list comprehension
09:15:14 <Heffalump> you're lucky you don't go to Georgia Tech :-) (http://www.washingtonpost.com/wp-dyn/articles/A58274-2002Apr16.html)
09:15:24 <Logan> That the cheating article?
09:15:43 <DLid> [(x,y) | x <- something from char, y <- something from bools?
09:15:48 <Logan> My school is almost that bad -- or, rather, particular instructors are.
09:15:55 <Heffalump> logan: yeah
09:15:56 <Logan> Especially at the freshman level.
09:15:59 <Logan> It's really really stupid.
09:16:00 <Heffalump> dlid: not quite, no
09:16:10 <Logan> Some instructors are really petty and take pride in the number of people they "catch".
09:16:16 <Logan> Which makes me think they get a lot of false positives.
09:16:38 <Logan> It's funny, I always post all my homework answers online, though I don't usually advertise the fact.
09:16:41 <DLid> we have a plagarism checker running at nottingham
09:16:41 <Logan> I think of it as educational.
09:16:52 <DLid> it checks each students answers
09:16:57 <Heffalump> I've caught people copying coursework from each other almost entirely before, but asking for help is rather different
09:17:06 <DLid> and for one piece of coursework...
09:17:10 <DLid> we had to submit it by email...
09:17:20 <DLid> and instead of sending it to the marker...
09:17:34 <DLid> the idiot sent it to the whole of the CS department so we could see his work!!
09:17:48 <DLid> so we had to do another piece of work!
09:17:48 <Logan> I like to compare answers with, say, my roommate's, which is probably against some professors' rules, but I don't care; I still derive my answers myself and learn from that.
09:17:59 <DLid> eventhough the idiot that sent his work, got it completely wrong
09:18:10 <Logan> I really don't care about classes beyond what I learn by doing the work.
09:18:22 <pesco> Heheh
09:18:47 <Heffalump> dlid: what did they do to said idiot?
09:18:59 <DLid> dont know
09:19:13 <DLid> never found out
09:19:28 <Logan> Haha, it'd be fun to intentionally pretend to accidentally do that.
09:19:30 <DLid> they probably got some warning or something
09:19:58 <DLid> but the persons work was wrong, and for people to copy him, they would be cheating themselves anyway!!
09:20:51 <pesco> "We have been hearing much about cheating."
09:21:12 <pesco> Funny, I've never really heard that word (so far).
09:21:14 <Logan> I think grades are pointless, and that's reflected in the fact that the problem of cheating exists. :P
09:21:25 <pesco> But maybe I'm just not paying attention.
09:21:53 <Logan> pesco: It was in the context of the author's paper, I believe.
09:22:19 <DLid> hmm..
09:22:19 <DLid> *** Type           : Prop -> [(Char,Bool)]
09:22:19 <DLid> *** Does not match : Prop -> [Subst]    
09:22:26 <DLid> eventhough im sure thats right
09:22:51 <Logan> What is Subst?
09:23:05 <DLid> Substs -> [(Char,Bool)]
09:23:21 <Logan> [Subst] would be [[(Char,Bool)]] then?
09:23:46 <DLid> type Substs = [(Char,Bool)]
09:23:57 <Logan> Substs = [Subst] ?
09:24:23 <DLid> sorry, spelling
09:24:30 <DLid> type Subst = [(Char,Bool)]
09:24:38 <DLid> substs :: Prop -> [Subst]
09:24:42 <DLid> and i get the error...
09:24:47 <DLid> *** Term           : substs
09:24:48 <DLid> *** Type           : Prop -> [(Char,Bool)]
09:24:48 <DLid> *** Does not match : Prop -> [Subst]  
09:24:49 <Logan> What is Subst meant to represent?  A particular boolean value for a particular variable?
09:25:01 <DLid> yep
09:25:09 <Logan> Then you may want to refine how you define Subst.
09:25:25 <DLid> all ive been given is type Subst = [(Char,Bool)]
09:25:27 <Heffalump> he can't change that
09:25:35 <Logan> Ok.  Then Subst doesn't mean what you think it means.
09:25:35 <Heffalump> and that makes sense, anyway
09:25:53 <Logan> It's a set of variable/value pairs.
09:26:15 <Logan> So substs is supposed to return a list of sets of variable/value pairs.
09:26:55 <Logan> But you've apparently defined it so that it only returns a set of variable/value pairs.
09:28:56 <DLid> i know this code is kind of messy, but still i get the same problem, not sure if it even works cause i cant test it :(
09:28:57 <DLid> substs n = [(x,y) | x <- (clean (vars n)), y <- (bools (length (clean (vars n)))) ]
09:29:25 <Heffalump> that won't work
09:29:38 <Logan> That gets you [(Char, Bool)], not [[(Char, Bool)]]
09:29:49 <DLid> *** Type           : Prop -> [(Char,[Bool])]
09:29:50 <DLid> *** Does not match : Prop -> [Subst]  
09:29:52 <Heffalump> try doing the clean (vars n) outside the list comprehension
09:30:28 <DLid> what and ++ with the list comprehension?
09:30:40 <Heffalump> no, put it in a variable
09:30:47 <Heffalump> and use that variable inside the comprehension
09:31:00 <DLid> to neaten the code yes
09:31:06 <DLid> is that what you mean?
09:31:19 <Logan> Lack of neatness isn't the problem here. :P
09:31:22 <Heffalump> not just that, to make it work
09:32:12 <Logan> What do you intend to do with the values returned by bools?
09:33:09 <DLid> zip them with each element from clean (vars n))
09:34:43 <DLid> i cant work out the problem of it returning [(Char,[Bool])]
09:34:52 <DLid> cause im using zip
09:35:09 <DLid> cause bools return [[Bool]] as it is
09:35:33 <DLid> and i need to return [[(Char,Bool)]]
09:35:45 <Logan> What do the values returned by bools represent?
09:35:47 <DLid> so i shouldnt use zip
09:36:02 <Logan> zip fits into this problem somewhere, you just have to figure out in what way.
09:36:15 <Logan> Whenever you see lists of pairs, zip may be involved. :P
09:41:08 <DLid> creating the bools values returns me a value of [[Bool]] eg [[False,False],[False,True] etc]
09:41:59 <DLid> and i need to add in the variables so its [[('A',False),('B',False)] [ etc ]]
09:41:59 <DLid> so
09:42:39 <DLid> my clean method returns  list [a]
09:42:43 <Logan> So you need to get within that [[Bool]] and do something. :P
09:42:59 <DLid> within the bool and zip it with the clean method
09:43:21 <DLid> i understand the logic, its just writing the code ;)
09:43:26 <DLid> but dont help
09:43:34 <DLid> well no code
09:43:38 <Logan> Hehe.
09:43:50 <Logan> Once you understand clearly what you need to do, the code should just flow.
09:44:12 <Logan> So what does an action "within the [[Bool]]" mean?
09:45:16 <DLid> but i cant alter anything with (bools (length t))
09:45:24 <DLid> where t = clean (vars x)
09:46:04 <DLid> hmm
09:46:05 <Logan> You can transform values.
09:46:21 <DLid> what do you mean by that?
09:47:00 <Logan> Altering is simulated in haskell by transforming values into new values.
09:47:34 <DLid> ?
09:48:11 <Logan> Sorry, I've been awake a long time, so I may not be coherent.
09:49:48 <Logan> What tools do you think you need for the job so far?
09:49:58 <Logan> Maybe you can work out how to apply them from there.
09:50:00 <DLid> ok...
09:50:34 <DLid> ive got my code which returns the [[Bool]] values that i dont think i need to change
09:50:45 <DLid> but my code simply returns [[Bool values]]
09:50:47 <DLid> but...
09:51:33 <DLid> i know i need to get "inside" that and zip (variables) with these Bool Values so that the [[  ]] are on the outside, if you see what i mean
09:51:48 <Logan> Right.
09:51:55 <Logan> Well, how do you typically get "inside" a list?
09:52:00 <Logan> And do things? :P
09:52:57 <DLid> i can add single amounts to it just by :
09:53:30 <Heffalump> what will "[x | x <- xs]" give you?
09:53:48 <DLid> values of x from xs
09:54:03 <DLid> in a list
09:54:51 <Heffalump> i.e. just the same list xs
09:54:53 <Heffalump> right?
09:54:57 <DLid> yep
09:55:10 <Heffalump> ok, so what will "[(1,x) | x<-xs]" give you?
09:55:27 <DLid> are you saying to use a zip function inside my list comprehension?
09:55:45 <Heffalump> no, I'm just demonstrating ways you can mess around with values inside lists
09:55:52 <DLid> give me tuples of (1,x) where x is from xs inside a list
09:56:31 <Heffalump> yeah - so ['a','b','c'] would become [(1,'a'),(1,'b'),(1,'c')] for example
09:56:36 <DLid> yep
09:57:14 <Heffalump> right, now what bools (length t) gives you is a list of lists, right?
09:57:25 <DLid> [(x,y) | x <- variables, right so far?
09:57:33 <DLid> yep
09:58:05 <Heffalump> possibly, depends what you do next
09:58:12 <DLid> forget my code... continue im understanding
09:58:30 <Heffalump> ok. how would you write a list comprehension that took apart a list of lists element by element and put it back together
09:58:35 <Heffalump> like [x | x<-xs] does for a list
09:59:39 <jewel> use fold with : on xs?
09:59:56 <Heffalump> jewel: no.
10:00:07 <Heffalump> (it works, but it's not what I'm getting at here)
10:00:07 <jewel> why not?
10:00:23 <jewel> (I haven't been following above discussion)
10:00:29 <Heffalump> it won't help DLid solve his problem, really
10:01:29 <DLid> do i need to look at a function from the Prelude or not?
10:01:33 <Logan> It might help to note that there is a correspondence between each element of the list you're trying to generate and each element of what bools returns.
10:02:21 <Heffalump> dlid: not to do what I asked with list comprehensions, no
10:03:24 <DLid> stab in the dark, (dont see how this would work) but take the list and split it up by :
10:04:24 <DLid> what do you mean by putting it back together?
10:04:39 <Heffalump> the same way that [x | x <- xs] does
10:04:54 <DLid> the same way then
10:04:58 <Heffalump> the <- bit sort of takes apart the list xs and the overall list comprehension puts it back together
10:05:16 <Heffalump> ok, but looking at each individual element of the list of lists, not each list in that list of lists
10:05:34 <Heffalump> if xs was a list of lists, then x would be a list. I want the same thing done to that list as well, if that makes sense.
10:05:54 <DLid> so split it up twice
10:05:59 <DLid> i think i get what you mean
10:06:12 <Logan> You actually only need to do it once.
10:06:35 <Heffalump> split it up in two levels, rather than twice, really
10:06:42 <Heffalump> split it up into lists, and then split up each list into elements
10:06:57 <DLid> y <- (x <- xs)?
10:07:11 <Logan> Heh, that's not how I did it.
10:07:29 <DLid> would that work?
10:07:37 <Heffalump> no, 'fraid not
10:07:55 <DLid> x <- xs, z <- x ?
10:07:57 <Heffalump> you'll need two nested list comprehensions
10:08:08 <Heffalump> that would work if you wanted to stick all the lists together (like concat does)
10:08:31 <Logan> Heffalump: I don't think nested comprehensions actually solves this problem, does it?
10:09:03 <Heffalump> logan: I think it should
10:09:10 <DLid> [(x,y) | x <- variables, y <- another_list_comprehension  ] ?
10:09:10 <Heffalump> I'll message you what I'm think of
10:09:20 <Heffalump> dlid: no, you don't want to make tuples here
10:09:32 <Heffalump> (you will to solve you problem, but I'm trying to lead up to that slowly)
10:09:59 <DLid> you said to have a list comprehension inside another list comprehension
10:10:18 <Heffalump> logan: oh, duh, it won't
10:10:42 * Heffalump looks stupid. you can't write zip as a list comprehension, sorry...
10:11:22 <DLid> so which way now?
10:11:31 <Logan> You do need one list comprehension.
10:11:49 <DLid> for the bool values?
10:11:56 <DLid> please say yes!
10:11:57 <Logan> Because you need to do something for each list in the list returned by bools.
10:12:11 <Heffalump> suppose you have a [Bool]. What do you need to do with it to make a Subst?
10:12:34 <DLid> zip it with variables list
10:12:43 <Heffalump> yep.
10:12:50 <Logan> I think you have it now.
10:12:53 <Heffalump> how would you get a [Bool] using a list comprehension?
10:13:22 <DLid> use x <- xs, but i would need to do it twice
10:13:31 <Heffalump> dlid: why twice?
10:13:45 <Heffalump> if you have a [[Bool]], you can get a [Bool] by doing that once
10:13:52 <DLid> cause if i just do x <- xs, isnt that building it back up again?
10:14:16 <Heffalump> what you do before the | determines how it is built back up again
10:14:16 <DLid> [x | x <- [[Bool]] ] ?
10:14:17 <Logan> DLid: Maybe it'd help if you thought of bools as Int -> [ValueList] instead of Int -> [[Bool]]
10:14:32 <Logan> DLid: If you do something besides x before the |, you get something different.
10:14:38 <Heffalump> dlid: not [[Bool]], but t or whatever
10:14:49 <Logan> [ f x | x <- xs ] is equivalent to map f xs
10:14:55 <DLid> yeah, i know not [[Bool]], that was just example
10:15:09 <Heffalump> ok
10:15:10 <DLid> oh!
10:15:24 <DLid> i didnt realise you could put a function inside that
10:15:28 <Logan> You can.
10:15:34 <DLid> i think i get it
10:15:38 <DLid> lets see..
10:15:40 <Logan> Any expression, really.
10:18:26 <DLid> substs x = [ zip t xs | xs <- bools (length t) ]
10:18:27 <DLid> 	   where t = clean (vars x)
10:18:28 <DLid> ?
10:18:55 <Heffalump> yep.
10:18:59 <DLid> wahoo!!
10:19:16 <DLid> i know im a bit of a pain, but i learn a hell of a lot through you lot :)
10:19:22 <DLid> thankyou for the help once again :P
10:19:27 <Logan> DLid: Exactly what I was thinking of.
10:19:46 <Logan> I'm still trying to get comfortable with list comprehensions.
10:19:55 <Logan> I'm more comfortable just writing out maps initially. :P
10:20:05 <Logan> What's the difference between gofer and haskell?
10:20:16 <Heffalump> not a huge amount
10:20:20 <Heffalump> mostly syntax
10:20:26 <Heffalump> and IIRC gofer doesn't have type classes, though ICBW
10:21:08 <Heffalump> oh, it must have to make monad transformers work sanely
10:22:18 <Logan> So far the paper mentions "constructor classes" that exist in gofer and not haskell, making monad transformres possible.
10:23:26 <Heffalump> they do exist in Haskell
10:23:29 <Heffalump> (now)
10:23:43 <Heffalump> unless I'm really confused
10:24:56 <Logan> Well, this paper dates from 1995.
10:25:43 <Logan> Ok, I'm pretty sure that's in haskell.
10:27:37 <Logan> I'd better go home... won't be back online until I'm in Boston. :P
11:09:47 <jadrian> hi
11:27:45 <Muad_Dib> mornin all
11:29:57 <Muad_Dib> is there a library that has stuff to connect using sockets and so on?
11:30:06 <Muad_Dib> re: whats a library that has...
11:56:43 <Yurik> shapr: hi
11:56:59 <Muad_Dib> restart
12:13:53 <shapr> hi Yurik
12:13:55 <shapr> doh
12:14:39 <Muad_Dib> :P
12:42:41 <DLid> back for my guidance im afraid...
12:42:49 <DLid> i need in direction for the next function
12:43:15 <DLid> find :: Eq a => a -> [(a,b)] -> b
12:43:42 <DLid> you know the least created before [('A',True),('B',False)] well if they type find B
12:43:57 <DLid> this will search the (key,values) and return the Bool value
12:44:08 <DLid> so if they type B, it will return False
12:44:27 <DLid> im never sure as to which route to go down, list comprehension?
12:46:14 <DLid> if i have [('A',True),('B',False)], can i split this up into (x:xs) like normal lists?
12:47:32 <Heffalump> yes
12:48:07 <DLid> so, what would x become from this list?
12:48:12 <Heffalump> a tuple
12:48:22 <Heffalump> ('A',True)
12:48:26 <DLid> ok
12:48:40 <DLid> hmm
12:48:59 <Heffalump> you can do pattern matching on tuples too
12:49:00 <DLid> and somehow i could use `elem` to see if the first part = what had been entered
12:49:12 <Heffalump> you should use ==
12:49:15 <DLid> so you would recommend pattern matching?
12:49:18 <Heffalump> yes
12:56:55 <DLid> how can i just get the A in ('A',True) ?
12:57:36 <DLid> no sorry, forget that
13:01:54 <DLid> here is my code...
13:02:01 <DLid> find t [] = False
13:02:01 <DLid> find t (x:xs) | (t,False) == x = False
13:02:01 <DLid> 	      | (t,True) == x  = True
13:02:01 <DLid> 	      | otherwise = find t xs
13:02:07 <DLid> but i get errors...
13:02:14 <DLid> *** Expression    : find
13:02:14 <DLid> *** Expected type : Eq a => a -> [(a,b)] -> b
13:02:14 <DLid> *** Inferred type : Eq a => a -> [(a,Bool)] -> Bool 
13:02:19 <DLid> am i on the right track?
13:02:27 <DLid> or heading in completely the wrong direction?
13:02:38 <Heffalump> you're on the right track
13:02:44 <DLid> thats a relief
13:02:50 <DLid> is my base case right?
13:03:00 <Heffalump> do you have to write find with the type it said?
13:03:07 <DLid> yep
13:03:20 <DLid> find :: Eq a => a -> [(a,b)] -> b
13:03:49 <Heffalump> ok, then you can't assume you'll get a boolean in the second part of the tuple
13:04:45 <DLid> so i could write (t,b) == x = b where b = true || False ?
13:04:53 <DLid> could i do that?
13:10:19 <DLid> so what should i do if i dont know if its a boolean?
14:23:04 <Muad_Dib> anybody knows of a library that i can use to write clients with? :P
14:24:00 <clausen> "client"?
14:24:02 <clausen> in what sense?
14:24:18 <clausen> (networking?)
14:24:18 <Heffalump> sockets I think
14:24:18 <Muad_Dib> to connect to a server :P
14:24:25 <Muad_Dib> yeah, sockets
14:24:28 * clausen has no idea
14:24:41 <clausen> well, it's certainly been done
14:24:48 <clausen> since haskell is doing db stuff, etc.
14:24:50 <Heffalump> look at haskell.org
14:25:29 <Muad_Dib> well,
14:25:38 <Muad_Dib> i might be looking over it, but i didnt find what i sought :P
14:27:23 <Heffalump> look at the net package in hslibs
14:29:26 <Muad_Dib> k
14:40:36 <Muad_Dib> hslibs only for ghc?
14:42:10 <Igloo> Is the DB stuff actually using sockets or does it use FFI (or one of the other C interfaces)?
14:51:31 <Muad_Dib> no idea ;P
22:58:54 <arete> toEnum is suppose to be able to convert an int to a char isn't it?
