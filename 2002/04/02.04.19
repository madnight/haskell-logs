01:09:45 <Heffalump> not me :-)
03:07:54 <DLid> got to define a function eval :: Subst -> Prop -> Bool that evaluates to see if a proposition is logical or not, so [('A',True),('B',False)] p2 would be True
03:08:06 <DLid> where p2 = (A & B) <=> (B & A)
03:08:24 <DLid> however, i dont see how i can come to this answer
03:08:26 <Heffalump> wdym "if it's logical or not"?
03:08:36 <Heffalump> do you mean to evaluate a proposition?
03:08:39 <DLid> because surely it all depends on the truth table and the whole statement
03:08:47 <DLid> yes, to evaluate a proposition
03:08:56 <Heffalump> you have a Subst you can apply to the variables in the proposition
03:10:01 <DLid> so, i have to get the variable values, say A=True, B=False and put them into the prop p2?
03:10:09 <Heffalump> yes
03:10:12 <DLid> and then work out if the whole tautology is true
03:10:15 <Heffalump> yep
03:10:20 <Heffalump> YM proposition
03:10:36 <Heffalump> it's not a tautology unless it *is* true (for all possible substitutions, but I'm sure that'll be what the next question asks you to do...)
03:10:58 <DLid> so when i put the Bool values into the prop p2, will it automatically work out the line p2 = (A & B) <=> (B & A) ?
03:11:14 <Heffalump> not automatically, no, you need to define eval recursively so it does
03:11:20 <Heffalump> sort of like with vars
03:11:43 <DLid> hmm, ill have a go
03:11:48 <DLid> still not 100% clear
03:18:15 <DLid> do i somehow replace all Bool values from Subst into the variables of p2?
03:19:57 <Heffalump> think about writing this function recursively using pattern matching like you did with vars
03:21:18 <DLid> cause i dont understand how i get to the answer im struggling
03:22:48 <DLid> it will only return true if all variables are true
03:22:50 <Heffalump> what is "eval s (Const b)" ?
03:23:59 <DLid> False
03:24:21 <Heffalump> why?
03:24:33 <DLid> depends whats in Const b and s
03:25:31 <Heffalump> could you summarise what you think "eval" is supposed to do? (in terms of the results it produces, not how it does it)
03:26:52 <DLid> it says if a tautology is true or false
03:27:04 <DLid> based on the variables/Bools you give it
03:28:57 <Heffalump> I think you're confused about the meaning of the word "tautology"
03:29:14 <Heffalump> a tautology is a proposition that is always true, no matter what truth values the variables it contains have
03:29:31 <Heffalump> but if you replace tautology by proposition in what you just said, then yes
03:30:04 <DLid> yeah sorry i meant that
03:30:23 <DLid> and a prop is contradictory if it contains all False values
03:31:05 <DLid> else it is satisfiable
03:31:13 <Heffalump> yep
03:31:48 <Heffalump> ok. is the proposition "true" true or false, if you have the substitution [('A',False)] ?
03:32:20 <DLid> depends on your proposition :)
03:32:36 <Heffalump> yes, but I told you the proposition...
03:32:38 <DLid> oh proposition "tru"
03:32:48 <DLid> false
03:33:23 <Heffalump> why false?
03:33:46 <DLid> cause it doesnt match the proposition true therefore false
03:34:12 <Heffalump> so the proposition "true" is false??
03:34:23 <DLid> maybe not
03:34:30 <DLid> :)
03:34:44 <DLid> cause the true has nothing to do with the values you give it
03:34:48 <Heffalump> yeah.
03:34:56 <Heffalump> so now can you write the case for eval that deals with Const?
03:35:52 <DLid> ok
03:39:29 <DLid> so isnt it just the same for Var b ?
03:39:38 <DLid> no, cause it depends on a value
03:39:48 <DLid> answer my own question!
03:40:29 <Heffalump> :-)
03:40:47 <DLid> eval (x:xs) (Var y)   = x == (fst x) = snd x
03:40:51 <DLid> is that right?
03:40:56 <DLid> i mean y == 
03:41:13 <DLid> otherwise etc
03:41:49 <Heffalump> you're wasting effort if you do it this way - remember the "find" function you already wrote
03:49:57 <DLid> but wont the find function return [(a,b)] -> b and it wants Bool to be returned for eval?
03:50:42 <DLid> no, its worked out fine
03:50:48 <Heffalump> good good :-)
03:50:55 <DLid> eval x (Var y)   = find y x
03:51:00 <Heffalump> yep.
03:51:52 <DLid> eval x (Not y)   = eval y x ?
03:51:58 <DLid> hmm
03:52:04 <Heffalump> no.
03:52:15 <Heffalump> think about what should happen there
03:52:15 <DLid> have to account for Not
03:52:42 <DLid> opposite of what it wants
03:52:53 <Heffalump> yep.
03:53:30 <DLid> ill have to do the same eval y x but need to return the opposite answer
03:54:09 <Heffalump> yeah
03:54:12 <Heffalump> well, not eval y x
03:54:22 <Heffalump> think about the parameters eval takes (and in what order it takes them)
04:01:38 <DLid> what do you mean
04:01:43 <DLid> it takes Subst first
04:02:30 <DLid> dont i just need the opposite of what eval y x produces?
04:04:45 <DLid> how do i write logical negation?
04:05:51 <Heffalump> not
04:06:03 <Heffalump> yeah, it takes Subst first, and is y a Subst?
04:06:19 <DLid> no a prop
04:06:28 <DLid> or do i have to do eval x y
04:06:38 <DLid> because Not y is not just for one variable
04:06:48 <Heffalump> eval x y, yes
04:06:55 <Heffalump> yep, exactly
04:07:06 <DLid> but then i have to do the opposite of that answer dont i?
04:07:27 <Heffalump> yes, and that's what the Haskell function "not" will do for you
04:07:55 <DLid> so not(eval x y)
04:08:04 <Heffalump> yep.
04:09:42 <DLid> eval x (And y1 y2) = eval x y1 && eval x y2
04:11:58 <DLid> eval x (Or y1 y2)    = eval x y1 || eval x y2
04:12:01 <DLid> would that be right?
04:14:08 <Heffalump> yep
04:14:30 <DLid> eval x (Imply y1 y2) = eval x y1 => eval x y2
04:14:33 <DLid> it complains about =>
04:14:42 <Heffalump> that's not a Haskell operator
04:14:48 <Heffalump> you'll need to figure out how to implement that yourself
04:15:30 <DLid> hmm, ive been given a symbol table...
04:15:49 <DLid> and it says symbol =>, meaning constrains, typed =>
04:16:04 <DLid> amd also >>=, meaning bind, synbol >>=
04:16:20 <DLid> tyed >>=
04:17:08 <Heffalump> I don't remember there being a Haskell operator to do "Implies" - look up how that can be done in terms of other boolean operators
04:24:29 <DLid> well =>, if right side true its true, right side false its false unless left side also is false
04:24:43 <DLid> so i have to do all those three statements?
04:24:49 <Heffalump> you could do that
04:25:03 <DLid> what, is that a long way?
04:25:12 <Heffalump> yes, but I'm not telling you the short way :-)
04:25:14 <Heffalump> if you can work it out, fine
04:25:57 <DLid> :)
04:26:19 <DLid> some kind of implies functin or something!
04:26:40 <DLid> :)
04:27:42 <DLid> maybe not
14:37:27 <gene9> Yurik: hi
14:37:32 <Yurik> gene9: hi
14:38:05 <gene9> ;)
14:38:37 <Yurik> how are you ?
14:39:12 <gene9> oh, I'm tired :( those oracle BS...
14:39:17 <Yurik> heh
14:39:17 <gene9> and how are you?
14:39:20 * Yurik tired too
14:39:31 <Yurik> was searching for source of weird bug
14:39:48 <Yurik> for 5 hours or and finally found that it wasn't a bug (and even feature ;)
14:39:58 <gene9> wah
14:40:09 <gene9> ;)))
14:40:29 <Yurik> so i'm happy
14:40:46 <Yurik> but can't find where and whom with drink some beer after such kinda success ;)
14:41:23 <gene9> friday is a hard day. but it's last hard day in a week
14:41:24 <gene9> wah
14:41:30 <gene9> beer sucs ;)
14:41:33 <gene9> vodka!
14:41:35 <gene9> ;)
14:41:50 <Yurik> heh, vodka
14:41:59 <Yurik> it's harder to find smbdy to drink vodka
14:42:03 <Yurik> beering is easier ;)
14:42:10 <Yurik> (but /me wanna vodka too)
14:42:23 * gene9 cheers
14:43:08 <gene9> any news from openeas front?
14:43:30 * gene9 smoking
14:43:53 <Yurik> oh, /me envies gene9
14:44:00 <Yurik> he probably can smoke near computer ;)
14:44:32 <Yurik> yes, good news
14:44:39 <Yurik> very good news
14:45:16 * gene9 back
14:45:46 <gene9> and.. grammy goes to... what's up?
14:46:42 <Yurik> what's up in eas front?
14:46:44 <Yurik> or what
14:46:45 <Yurik> ?
14:47:20 <gene9> yeah, i'm talking about open eas
14:47:44 <Yurik> well,
14:48:01 <Yurik> i'm much closer for object db (framerd) support
14:48:17 <Yurik> i cano interoperate w/ it (mostly done, except choices and slotmaps)
14:48:40 <Yurik> also did a wrapper for XMerL (Erlang XML parser) to make XML traversing much easier
14:48:48 <Yurik> so starting importing objects from xml
14:49:01 <Yurik> also did some (i suppose) good decisions
14:49:14 <Yurik> and still thinking on some other decisions to make all the stuff really better
14:49:32 <gene9> wah, kinda exciting. go-go-go.. ;)
14:49:38 <Yurik> and of course, did a lot of misc small stuf ;)
14:49:43 <Yurik> :-))
14:49:45 <gene9> sure ;)
14:49:56 <Yurik> the problems that is still w/ me
14:50:08 <Yurik> is that i'm still alone ;-) so, e/as development is too slow
14:50:33 <Yurik> but anyway I plan zero milestone to august or so
14:50:45 <Yurik> at least hope that i'll fit my time to make milestone at august
14:52:54 * gene9 cd gcc-3.0.4 && ./configure && make
14:53:52 <Yurik> too new ;)
14:53:59 * Yurik still uses 2.95.*
14:54:03 <Yurik> too lazy to upgrade
14:54:57 <gene9> bored. "peremen trbujut nashi serdca" (c) tsoj ;)
14:55:10 * Yurik is eating ice-cream
14:55:15 <Yurik> yeah
14:55:34 * Yurik wanna drink-n-sleep and then may be life will go better
14:57:01 * gene9 ... it's unreal. dot. period. depression...
14:57:25 <Yurik> depression? what for?
14:58:06 <gene9> ah. avitaminoz & oracle full of bugz. ;)
14:58:19 <Yurik> ah
14:58:31 <Yurik> that's "handra", but not depression ;)
14:59:19 <gene9> time flies. soon i'll be healthy.
15:01:06 * gene9 is away: I'm busy
15:12:39 <gene9>  /join #ocaml
15:16:12 <Yurik> gene9: re
15:16:46 <gene9> Yurik: uff
15:51:54 <Yurik> re
19:44:43 <TwoII> Anyone alive ..?
19:48:41 <TwoII> hmm
19:49:00 <TwoII> ERROR "lex.hs":19 - Syntax error in input (unexpected `=')
19:49:28 <TwoII> oops
19:49:36 <TwoII> gotta have a space after the -- on a commented line
19:52:20 <TwoII> Program error: {jlex "hello"}
