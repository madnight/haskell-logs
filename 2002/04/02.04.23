01:58:10 <Igloo> Your code does an infinite loop
01:58:22 <Igloo> (well, recursion)
01:59:39 <Heffalump> how does that exception distinguish between an infinite loop and a program that just needs lots of stack?
02:01:34 <Heffalump> ah
02:01:39 <Heffalump> >> NonTermination The current thread is stuck in an
02:01:39 <Heffalump> >> infinite loop. This exception may or may not be
02:01:39 <Heffalump> >> thrown when the program is non-terminating.
02:01:42 <Igloo> I assume it looks to see if a program reaches an identical state to one it's been in before
02:02:15 <Heffalump> I was wondering which way the test was inaccurate, basically
02:02:26 <Igloo> Ah, right
02:02:55 <Heffalump> since 100% accuracy in both cases would be impressive :-)
02:03:03 <Igloo> Mmmm  :-)
07:26:20 <delYsid> can anyone tell me where I could learn haskell online?
07:26:28 <delYsid> I have no way of reading books.
07:26:36 <delYsid> so I'd need a online resource...
07:27:07 <delYsid> requests to haskell-book authors for electronic copies failed... (without even an reply)
07:29:12 <Heffalump> have you looked at www.haskell.org ?
07:47:56 <delYsid> yes, I did
07:49:18 <delYsid> I' d like to have some book-like things. Nearly each majro lang has such a thing, python....
07:49:27 <delYsid> but the haskell online resources arent enough for self-study imho
07:49:32 <delYsid> at least those I found so far.
07:52:46 <Heffalump> I'm afraid that's all there is
07:54:04 <delYsid> :(
07:54:26 <delYsid> I really dont wan to OCR a haskell book... with all the correction coplications that bring with programming books...
07:55:11 <Heffalump> what's the problem with reading it physically? eyesight?
07:55:47 <delYsid> yup
07:55:49 * delYsid is fully blind
07:56:20 <Heffalump> who did you email? and did you explain that?
07:56:36 <delYsid> shapr did for me.
07:56:40 <delYsid> maybe I should try again.
07:56:56 <delYsid> I dont remember whom exactly he mailed, it was one of the major haskell book authors.
07:57:01 <delYsid> and, we explained the situation
07:57:09 <delYsid>  but didnt get as much as even a reply... :(
07:57:10 <Heffalump> they might be restricted by copyright considerations, but they ought to at least say so
07:57:40 <delYsid> yes
07:57:45 <delYsid> a reply would be nice...
07:57:51 <delYsid> but I am more-or-less used to such reactions
07:59:04 <delYsid> sadly, oreilly doesnt have a haskell book.
07:59:13 <delYsid> They provide digital copies to blind individuals...
12:19:48 <Usul> what would be the easiest way to look if some string is in another string?
12:19:54 <Usul> like "aap" is in "blaataap" ?
12:22:02 <Logan> any (filter (isPrefixOf "aap") (tails "blaataap"))
12:22:11 <Logan> Er, not any, or
12:22:24 <Logan> And isPrefixOf and tails are in the List module (so import List)
12:23:44 <Usul> oi cool
12:24:25 <Logan> So: a `substring` b = or $ filter (isPrefixOf a) $ tails b
12:24:27 <Igloo> any (isPrefixOf "aap") (tails "blaataap")
12:24:51 <Logan> Oh yeah.
12:25:06 <Logan> I keep saying any and all when I mean or and and, and then forgetting how to actually use any and all. :P
12:25:22 <Logan> a `substring` b = any (isPrefixOf a) (tails b), then. :P
12:27:16 <Usul> hehe
12:50:05 <Logan> What would you call the >>= operator in English?
12:50:17 <Logan> I don't want to say greater-than-greater-than-equal.
12:56:01 <pesco> Monad sequencing, if that's the context you mean.
12:56:30 <pesco> Otherwise, I don't think that operator has any "standard" meaning, or does it?
13:00:36 <pesco> Eintritt koennen wir in Euro zahlen, ja? Die T-Shirts auch?
13:00:49 <pesco> Woops
13:00:57 <Logan> Yeah, monads are the context, in fact the IO monad.
13:01:20 <pesco> OK, than I'd just call it the monad sequencing operator. Why not?
13:02:01 <Logan> Or the IO sequencing operator.
13:02:07 <Logan> To clarify that its meaning depends on the monad.
13:02:26 <pesco> Hmm
13:02:39 * pesco wears wrinkles on his forehead
13:03:27 <pesco> It's denotational meaning is independent of the particular monad used.
13:03:51 <Logan> In the monad of lists it means something else entirely.
13:04:06 <Logan> In terms of the monad itself, it means the same thing, I guess.
13:06:27 <pesco> >>= for lists is concatenation? I don't remember exactly...
13:07:18 <pesco> But in general, a monad represents a computation, and a>>=b yields the sequenced computation of a and b.
13:07:32 <pesco> At least that's what I learned...
13:07:55 <Logan> m >>= k = concat (map k m)
13:08:44 <pesco> Oh, err, a>>=(\x->b) of course, sorry.
13:09:23 <pesco> Right, in the list case, the list is seen as a set of possible outcomes of a non-deterministic computation.
13:09:49 <Logan> True.
13:11:01 <pesco> So it makes sense. a>>=(\x->b) yields the list of possible outcomes if you apply the computation b to the result of a.
13:11:10 * Logan nods.
13:12:08 <pesco> I really find fun in the monad concept.
13:12:31 * pesco hugs his Haskell book.
13:12:40 <Logan> I do too.
13:12:42 <Logan> I need a haskell book.
13:13:05 <delYsid> I need a haskell online book
13:13:40 <Logan> I'm working on a hyperlinked function reference.
13:13:42 <pesco> I've just finished "The Craft of Functional Programming". I can recommend it.
13:13:46 <Logan> Not quite as good as a book, of course.
13:14:36 <pesco> delYsid: I don't think you'll find any reasonable substitute for a book online.
13:14:46 <delYsid> :(
13:14:52 <delYsid> so no haskell at all for me.
13:15:12 <pesco> delYsid: Why not visit your local library?
13:15:31 <delYsid> pesco: My eyes dont handle dead tree material.
13:15:41 * delYsid is blind
13:15:56 <pesco> delYsid: oic, that's bad.
13:16:03 * Logan can imagine that makes layout-based syntax difficult.
13:16:07 <delYsid> nah it isnt
13:16:34 <delYsid> but haskell not having good electronic learning material is a bit bad.
13:16:36 <Logan> What do you use for reading the screen?
13:16:52 <Logan> It's a relatively new, non-mainstream language.
13:17:10 <delYsid> Logan: braille display.
13:17:49 <Logan> Hmm, neat.  Is it just a big matrix of retractable pins?
13:18:21 <delYsid> 40 char line, each char has 8 dots, 2 by 4.
13:18:48 <Logan> So you can only "see" one short line at a time?
13:18:54 <delYsid> yup
13:19:36 <Logan> How fast can you read braille?
13:19:58 <arete> I'm reading Hudak's book
13:19:59 <delYsid> hmm, estimate 1/2 of normal eye sight reading speed.
13:20:04 <arete> the geometry is too much
13:20:29 <Logan> Geometry?
13:20:37 <Logan> I wonder if my school bookstore has some haskell books, probably not.
13:21:02 <arete> The Haskell School of expression, learning functional programming through multimedia
13:21:24 <arete> it has a lot of stuff like calculating area/diameter of shapes, drawing shapes, on the screen, etc
13:21:28 <arete> I regret not buying the other book
13:22:50 <Logan> arete: Woah, the bookstore next door has that book.
13:23:01 <Logan> It also has Haskell: THe Craft of Functional Programming
13:23:13 <Logan> Is that one good?
13:23:15 <arete> *nod* thats the one I probably should have got
13:23:25 <Logan> I'm going to go get it right now! :P
13:23:26 <arete> well it depends on how much you like geometry I guess =)
13:23:33 <arete> I haven't read it though
13:23:39 <Logan> I'll take a look at both.
13:23:42 <arete> *nod*
13:23:52 <arete> haskell is a neat language for sure
13:24:01 <Logan> I love it.
13:24:02 <arete> I'm new to fp 
13:24:29 <Logan> The combination of lazy evaluation, algebraic data types, type polymorphism, and monads are all totally new to me.
13:24:43 <Logan> I'm so used to new languages just being slight revamps of olld imperative languages. :P
13:24:50 <arete> heh
13:25:02 <arete> yeah the lazyness introduces a whole nother set of stuff too
13:25:11 <arete> probably be easier to learn fp via lisp or something
13:25:41 <pesco> I just love having infinite lists out of the box.
13:25:44 <Logan> I don't know... I think laziness seems most natural for fp, to me.
13:25:52 <Logan> Every expression truly becomes a function then.
13:26:08 <arete> well yeah its very nice
13:26:15 <arete> but hard getting used to from an imperative perspective
13:26:21 <Logan> It's when strictness is requested that computation actually occurs.
13:26:37 <Logan> And the style of programming it invokes is totally different (and in my opinion much better).
13:26:52 <Logan> Well, brb, off to the bookstore!
13:27:02 <pesco> delYsid: Maybe you could just email the author if he can point you somewhere to get the Book in electronic form?
13:27:33 <Logan> Except I don't know which bookstore these books are at.
