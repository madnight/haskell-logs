01:38:32 <jewel> what is it with French people wanting to download Haskell?
01:39:10 <Heffalump> I said that :-)
01:39:56 <jens> ?
01:40:22 <Heffalump> messages to the haskell list
01:59:33 <Logan> Heh.
01:59:47 * Logan just wrote 35 slides on asynchronous exceptions in concurrent haskell.
01:59:51 <Logan> Pretty neat paper.
02:52:17 <shapr> since I recently acquired an SMP machine, I'm very interested in concurrent haskell
02:52:58 <shapr> I just purchased a dual Athlon MP 1800+ =)
02:53:54 <Heffalump> nice...
02:54:09 <shapr> my tribes2 scores have increased dramatically.
02:54:25 <shapr> kernel tuning for smp is fun to learn also.
02:54:40 <shapr> Heffalump: what's up with you?
02:54:42 <shapr> hi jewel!
02:55:21 <jewel> coi coi
02:55:35 <shapr> coi djul . i do mo
02:55:36 <jewel> is that machine running hot?
02:55:50 <shapr> heats my office quite well.
02:56:33 <shapr> I think I'll add another fan in one of the extra fan slots
02:59:35 <Logan> Heh, I need money so I can get some cool hardware.
02:59:53 <shapr> I got this money from a Zope site I built.
03:02:20 <shapr> hi DLid
03:02:27 <DLid> hey!
03:02:34 <shapr> are you a Haskell programmer?
03:02:57 <DLid> uhm, ive been doing it for a couple of days now, so not really!!
03:03:13 <shapr> do you have any questions?
03:03:29 <DLid> how do i take a value from a list, say the nth number in a list?
03:03:39 <DLid> i know i can do [1,2,3,4,5] !! 2 at the prompt
03:03:47 <DLid> but how do i do it when defining functions?
03:03:50 <Logan> The prompt isn't special.
03:03:58 <Logan> You do it the same way.
03:04:06 <Logan> The !! operator is defined in the prelude, so it's always available to you.
03:05:43 <DLid> how would i write a function which takes the middle value of a list (odd length at the moment), i dont want the code, i just need it explaining cause i cant figure it out
03:06:05 <DLid> i thought about taking the length and dividing by 2, and then taking this nth element of the list
03:06:12 <shapr> sounds sensible to me.
03:06:37 <DLid> let me think about how to write this for a minute...
03:07:07 <DLid> yeah, pretty simple actually!!!
03:07:21 <Logan> There's several ways you can do it, but that's probably the most straight-forward and efficient.
03:07:30 <DLid> mid ms = ms !! (length ms `div` 2)
03:07:41 * Logan nods.
03:07:53 <Logan> You could even make it generate an error of the length is even.
03:07:59 <DLid> im never sure when to use ms or m, do i use ms when returning a list?
03:08:04 <DLid> how do i do this?
03:08:58 <Logan> mid ms | even len = error "mid: length of list is even!"
03:08:58 <Logan>        | otherwise = ms !! (length ms `div` 2)
03:08:58 <Logan>        where len = length ms
03:09:29 <DLid> oh right
03:09:29 <Logan> In this case, you haven't defined m, only ms, so of course you use ms. :P
03:10:03 <DLid> yes, but i thought if you a using lists you define it as, say mid ms, instead of mid m
03:11:33 <Igloo> ms etc for lists are only convention
03:11:47 <Igloo> And the "length ms" on the second line should be "len"
03:12:51 <DLid> but using convention, when do i distinguish to use ms or just m?
03:13:28 <Igloo> Use ms when you're using it as a list
03:13:56 <Igloo> Like you are here (e.g., by taking the length of it)
03:16:07 <Logan> Igloo: Yeah, I forgot and was just copying his code, though in theory that could be optimized out. :P
03:16:23 <Logan> DLid: The convention is to name a list something like "ms", to be read as "ems" (e.g., plural of "m").
03:16:52 <Logan> DLid: So when you decompose the list ms using a pattern, you might say ms@(m : ms'), meaning ms is composed of an m followed by ms-prime.
03:17:09 <Logan> Just call variables whatever you like. :P
06:55:00 * shapr bounces
06:57:05 <Igloo> Oh?
06:58:32 <shapr> yah, I'm happy :)
06:58:44 <shapr> how are you Igloo?
07:00:30 <Igloo> Also happy if you ignore the impending exams  :-)
07:00:50 <shapr> what exams do you have?
07:01:30 <Igloo> Finals - exams at the end of uni course
07:01:39 <shapr> what courses?
07:01:51 <Heffalump> big scary monsters of exams specifically designed to make life difficult for Igloos.
07:03:10 * shapr grins
07:04:19 <Igloo> Connunicating Sequential Processes and Distributed Systems, Operating Systems and Compilers, Programming Languages and Computer Architecture (I think I have those in the wrong permutation, but n/m), Formal Program Design, Data Structures and Algorithms, OOP, Computer Graphics, Splines and Computational Geometry
07:05:23 <shapr> wow, that sounds like more fun than is legal in one term =)
07:05:28 <shapr> geez, I'd never sleep.
07:05:51 <Igloo> It's 5 terms worth of lectures
07:05:59 <Igloo> In 1 or 2 weeks worth of exams
07:07:58 <shapr> how long is a term?
07:08:30 <Igloo> 8 weeks
07:08:49 <shapr> sounds like tremendous amounts of fun
07:08:59 <shapr> are the teachers actually interested in what they're teaching?
07:09:21 <Igloo> Yes, given they are researching it
07:09:33 <Igloo> But half of them aren't exactly great lecturers  :-(
07:10:10 <shapr> I'm not sure whether I'd prefer passion or ability to lecture
07:10:15 <shapr> I think probably passion
10:42:01 <jewel> Heffalump: around?
11:22:45 * Heffalump is aorund now, but wasn't then
12:03:59 <jewel> how do I execute an external process in haskell?
12:04:10 <jewel> is it easy to check the return code and parse output from the subprocess?
12:04:29 <jewel> (I'm using hugs)
21:45:13 <arete> f1 (f2 (*) [1, 2, 3, 4]) => [5, 10, 15, 20]
21:45:19 <arete> f2 should be map right? then what should f1 be?
21:45:27 <arete> oh... before the => there is a 5
21:49:35 <Logan> What language is this?
21:49:38 <Logan> Haskell?
21:49:48 <Logan> map (5 *) [1..4]
21:49:51 <arete> yes, from The Haskell School of Expression
21:50:03 <arete> its an exercise
21:50:20 <Logan> Heh, I was thinking this was a different channel, haha.
21:50:29 <arete> hehe
21:50:37 <Logan> map (*) list would generate a list of functions...
21:50:55 <arete> yeah, then what would apply that arg '5' to each of them?
21:50:58 <Logan> You'd want to apply each of these functions to 5...
21:51:07 <Logan> map (\ x -> x 5) function_list
21:51:19 <Logan> I'm not sure if there's a better looking way.
21:51:29 <arete> but I don't think I can modify the statement
21:51:30 <Logan> map (\ x -> x 5) $ map (*) [1..4]
21:51:32 <arete> just replace f1 and f2
21:51:41 <Logan> f1 = map (\ x -> x 5)
21:51:46 <Logan> f2 = map
21:51:52 <Logan> f1 (f2 (*) [1, 2, 3, 4])
21:51:59 <Logan> :P
21:52:01 <arete> hehe
21:52:14 <arete> they haven't tought me lambdas yet so that can't' be it
21:53:03 <Logan> I need to code up this cross-referenced haskell reference, so I can look up functions that might apply here. :P
21:53:22 <arete> hehe yeah
21:53:40 <Logan> So you were given: f1 (f2 (*) [1, 2, 3, 4])) 5 => [5, 10, 15, 20] ?
21:54:00 <arete> yup!
21:54:26 <arete> and it says "Given the higher order functions that we have now defined, fill in the two missing functions, f1 and f2"
21:54:37 <arete> but all i've learned is map, foldl, and foldr
21:55:00 <arete> I'm just a poor imperative programmer 
21:55:07 <arete> its too much for my puny mind
21:57:56 <Logan> Well, f1 can't be map, because 5 is not a list.
21:58:09 <arete> yeah
21:58:27 <Logan> And f2 can't be foldl or foldr, because [1, 2, 3, 4] can't be an argument of (*)
21:58:51 <Logan> So we'll presume f2 is map.  map (*) [1, 2, 3, 4] => [(1*), (2*), (3*), (4*), (5*)]
21:59:05 <Logan> So f1 [(1*), (2*), (3*), (4*), (5*)] 5 has to somehow yield [5, 10, 15, 20]?
21:59:13 <arete> right
21:59:50 <arete> I would think of some sort of 'apply' function that applies the 5 to each element in the list
22:00:16 <Logan> Sure, f1 x y = map (\z -> z y) x
22:01:19 <Logan> But if you're not supposed to know \ yet, I don't know. :P
22:01:23 <Logan> Maybe the question was ill-formed.
22:01:52 <arete> could be
22:02:00 <arete> nothing mentioned in the errata though
22:24:45 <arete> ahhhh
22:24:47 <arete> you were right
22:25:12 <arete> I was only suppose to be doing these in the recursive fashion becuase I wasn't' suppose to know how to use higher order functions with lambdas
