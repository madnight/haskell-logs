02:22:09 <DLid> Heffalump, i emailed Graham Hutton yesterday about the find function, and he said im slightly going down the wrong track
02:35:28 <Heffalump> with the | guards?
02:35:39 * shapr yells for the guards
02:35:42 <Heffalump> hi shapr
02:35:45 <Heffalump> :-)
02:36:35 <Heffalump> ah, I didn't notice your reply above to my suggestion that you can't assume you have a True or False
02:36:40 <shapr> hi Heffalump, what's up?
02:37:02 <Heffalump> hi shapr
02:37:05 <Heffalump> not much
02:38:01 <DLid> im thinking about using (x:xs) to split the list to get the first tuple x...
02:38:15 <DLid> and then using head on this and matching that element with the variable
02:38:32 <Heffalump> you can't use head on a tuple
02:38:35 <Heffalump> head is for lists
02:38:41 <DLid> hmm
02:38:47 <DLid> im running out of ideas
02:38:59 <Heffalump> but ((c,v):xs) is a valid pattern, if that helps
02:39:27 <Heffalump> also, the function "fst" does for tuples roughly what "head" does for lists
02:39:34 <Heffalump> (and there's also a function "snd")
02:40:20 <DLid> oh right
02:40:26 <DLid> just found it in the prelude
02:43:49 <DLid> i know this code is a bit ugly but i got...
02:43:49 <DLid> find t [] = False
02:43:49 <DLid> find t (x:xs) = if (t == (fst x)) then snd x else find t xs
02:44:00 <DLid> and it is still returning the same error as before about the Bool
02:45:05 <DLid> changed it to...
02:45:05 <DLid> find t (x:xs) | (t == (fst x)) = snd x
02:45:05 <DLid> 	      | otherwise = find t xs
02:45:08 <DLid> instead
02:45:18 <DLid> but its still complaining about...
02:45:27 <DLid> *** Expected type : Eq a => a -> [(a,b)] -> b
02:45:27 <DLid> *** Inferred type : Eq a => a -> [(a,Bool)] -> Bool 
02:45:53 * Heffalump looks confused
02:46:02 <Heffalump> those should both work
02:46:09 <DLid> ahh, its something to do with the base case
02:46:14 <Heffalump> oh, right
02:46:17 <DLid> when i deleted that, no errors
02:46:32 <Heffalump> oh yes, what is the find function supposed to do when it fails to find the value its looking for?
02:46:42 <Heffalump> s/its/it's/
02:46:51 <DLid> doesnt tell me, but i presume it should return false
02:47:43 <Heffalump> but it can't, if it's supposed to return a value of type "b"
02:47:49 <Heffalump> because that's not necessarily a Bool
02:48:04 <DLid> i agree
02:48:20 <Heffalump> I think the only thing it can do is report an error
02:48:32 <DLid> should i leave it out then?
02:48:35 <DLid> do you think
02:48:44 <Heffalump> it would be best to have a base case that just calls "error"
02:50:09 <DLid> one more function left to write!!!
22:09:58 <arete> anyone ever compile nhc98 on macosX?
