04:14:42 <pesco> Let me start a conversation:
04:15:16 <pesco> I want to implement a Perlin noise function.
04:16:08 <pesco> It should be parameterized by the RNG to use.
04:16:44 <pesco> The RNG is needed to construct an array of random gradient vectors.
04:18:53 <pesco> So I want something like this: perlin_noise:: RandomGen rng => rng -> (Double,Double) -> Double
04:20:08 <pesco> Next, I want to use it like this: my_noise_fun = perlin_noise my_rng
04:20:38 <ChoJin> you just want to generate a list of random number ?
04:21:22 <pesco> Not quite, I need an array of random vectors.
04:21:51 <pesco> This is to be generated from the random numbers the RNG provides.
04:22:36 <pesco> The point is, that I want this array to be calculated only once.
04:23:41 <pesco> Say, i calculate the array in a where-clause in the definition of perlin_noise.
04:24:15 <pesco> If I invoke the function my_noise_fun from above two times, will it calculate the array twice, once for each invocation?
04:25:18 <ChoJin> I don't know :) I am not enough experienced with functionnal compil
12:40:45 <pesco> Hm. I repeat my question from earlier this day:
12:41:52 <pesco> My function foo represents an algorithm which requires some large data structure (call it The List) to be built from the first parameter.
12:42:45 <pesco> I want to use foo alot of times with the same first parameter.
12:43:01 <pesco> So, in a where-clause I say bar = foo x.
12:43:09 <pesco> And invoke bar repeatedly.
12:43:55 <pesco> How do I ensure The List is not calculated on each invocation of bar?
12:45:48 <pesco> Will foo x = \y z -> something the_list blahlblah where the_list = mk_the_list x do what I want?
12:46:40 <smkl> probably
12:46:41 <pesco> I suppose foo x y z = something the_list blahblah where the_list = mk_the_list x will recompute the_list each time, even if I curry x, right?
12:47:40 <smkl> at least that would be true in strict languages, i'm not so sure about haskell
12:48:37 <pesco> OK, I'll run a test to see how it behaves. Just wanted to see whether someone jumped up with a definitive answer.
12:51:09 <Heffalump> I think it'll be recalculated each time
12:51:40 <Heffalump> each time you call the thing that has the where clause, that is
12:52:22 <Heffalump> do you know what x will be when you write the program?
12:57:08 <pesco> Yes, in my current case it will be a random number generator.
12:58:25 <pesco> Which where clause were you refering to? The one that defines bar = foo x?
13:00:36 <Heffalump> yeah
13:00:53 <pesco> OK, that's what I want.
13:02:20 <pesco> Is my statement above correct, that I need to define foo x = \y z -> ... instead of foo x y z?
13:02:49 <Heffalump> umm, I don't believe that should matter
13:02:59 <Heffalump> oh. yes, sorry.
13:03:08 <Heffalump> because then the where clause is outside the lambda
13:03:34 <pesco> :) Cool.
13:03:47 <Heffalump> hangon, actually I might be getting confused about what's what here - the body of foo has a where clause?
13:04:09 <pesco> Yes, in which the_list is defined.
13:04:24 <pesco> defined from x.
13:04:26 <Heffalump> right. so as long as that's outside the lambda it'll be fine
13:04:44 <pesco> Nice, I feel I've understood a fundamental concept... ;)
13:04:47 <Heffalump> you might want to use let ... in \y z -> to make it very obvious which order they're in
13:05:01 <pesco> Ahh, good idea.
14:30:11 <tinus> hello
14:30:22 <tinus> anyone has experience with the graphics lib in linux?
14:46:27 <donour> I know someone who does
14:46:51 <donour> what kind of graphic programming?
14:54:45 <tinus> well, just trying to make it work
14:54:52 <tinus> the standard install works fine
14:54:57 <tinus> but the testing segfaults
14:55:07 <tinus> root /usr/src/haskell # /usr/local/bin/runhugs -Pgraphics-2.0.4/lib/x11: graphics-2.0.4/demos/HelloWorld.hs
14:55:07 <tinus> Unexpected signal
14:55:14 <tinus> well, not segfault
14:58:38 <tinus> i don't get it
14:59:24 <gene9> !
14:59:33 <gene9> ups
15:01:43 <Heffalump> how quickly does the signal happen?
15:01:51 <Heffalump> and have you tried using gdb or strace to find out what it is?
15:02:00 <tinus> strace, yeah
15:02:41 <tinus> but gives nothing usefull
15:02:49 <Heffalump> what's the signal it gets?
15:03:00 <Heffalump> it should be the last thing in the strace before it exits, shouldn't it?
15:03:29 <tinus> mprotect(0x40529000, 8572, PROT_NONE)   = 0
15:03:29 <tinus> old_mmap(0x40529000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0x11000) = 0x40529000
15:03:29 <tinus> close(4)                                = 0
15:03:29 <tinus> --- SIGSEGV (Segmentation fault) ---
15:03:30 <tinus> write(2, "\nUnexpected signal\n", 19
15:03:32 <tinus> Unexpected signal
15:03:34 <tinus> )   = 19
15:03:35 <Heffalump> oh, so it is a segfault
15:03:36 <tinus> _exit(1)                                = ?
15:03:38 <tinus> yes
15:03:40 <tinus> yeah
15:03:59 <Heffalump> how quickly does it happen after you start running the program?
15:04:11 <tinus> nearly direct
15:04:24 <Heffalump> what version of hugs?
15:04:30 <tinus> in hugs (previous was runhugs) it errors out after parsing
15:04:36 <tinus> dec2000
15:04:47 <tinus> dec2001
15:04:49 <tinus> sorry
15:05:02 <Heffalump> what's the error from hugs?
15:05:27 <tinus> Prelude> :load HelloWorld.hs 
15:05:27 <tinus> Reading file "HelloWorld.hs":
15:05:27 <tinus> Reading file "/usr/local/share/hugs/lib/GraphicsUtils.hs":
15:05:29 <tinus> ...
15:05:33 <tinus> Reading file "/usr/local/share/hugs/lib/X.hs":
15:05:34 <tinus> Parsing
15:05:34 <tinus> Unexpected signal
15:05:43 <Heffalump> hmm.
15:05:51 <tinus> yeah, that's what i thought
15:05:54 <tinus> "hmm".
15:05:55 <Heffalump> what's the hugs command line, you used?
15:05:57 <Heffalump> :-)
15:06:05 <tinus> just load it
15:06:31 <tinus> :load
15:06:38 <Heffalump> sorry, IM from the shell to run hugs
15:06:48 <tinus> oh, just hugs
15:06:51 <tinus> nothing special
15:07:11 <Heffalump> how many files are there?
15:07:27 <Heffalump> haskell source files that is
15:07:30 <tinus> just one that loads the graphics libs
15:07:41 <tinus> it's the default "hello world" one
15:08:10 <Heffalump> oh, right
15:08:31 <tinus> hm, in winders itworks out-of-the-box :/
15:08:40 <tinus> windows, sorry
15:08:42 <Heffalump> it must be a library version issue or something
15:09:04 <tinus> well, i sent the author an email
15:09:08 <tinus> hope he replies
15:09:11 <tinus> thanks anyways
