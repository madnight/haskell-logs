02:16:20 <jewel> I was pondering on the bus this morning ... Java Virtual Machines (and class libraries) have to generate string representations of floats and doubles. The reference (SUN) JDK can be used to produce a string for any Java float or double. Is it feasible (or possible) to write a program that generates a variety of Java programs that take a double as input and produce a string as output, and which then varies and tests these programs until it achi
02:16:20 <jewel> ves the desired output? Obviously the program generating these programs would have to be able to generate conditional statements, looping and would have to use some arithmetic operators.
02:18:08 <Heffalump> that's what genetic programming does, isn't it?
02:19:01 <Heffalump> you define a measure of success, and a way of mixing two programs, then make lots of random programs and mix the successful ones lots until you get sufficiently close to the desired result
02:24:52 <jewel> I didn't think about a way of mixing programs
02:25:14 <jewel> But, yes, there have to be heuristics which trim down the search space and which get closer to the goal
02:25:52 <jewel> In this case I want an exact result, and the program must be shorter than, say, 500 lines
02:27:47 <jewel> I have read papers about stuff done at the uni of Utah where they wrote programs to 'discover' the architecture of a particular processor
02:28:10 <jewel> (ie to know which bits in the instructions change their behaviour)
02:31:55 <Heffalump> presumably you want the program to be more complicated than just printing out one specific result for one specific input?
02:32:07 <Heffalump> cos if it was just that, print "result" would be all it needed
02:45:18 <jewel> obviously
02:45:28 <jewel> but it takes one input and must output a string
02:46:06 <jewel> (it would end up generating a case for every test input and printing out a canned answer)
03:33:30 <jewel> mi pu viska le ninmu poi [was] klama le zarci ku'o
03:33:38 <jewel> urgh
03:33:38 <Heffalump> pardon?
03:33:41 <Heffalump> :-)
03:33:48 <jewel> wrong channel
04:43:22 <jewel> maybe it would be easier to generate a language other than java?
05:03:36 <Heffalump> were you thinking of generating Java source or java byte codes?
05:52:35 <jewel> Source at first
05:52:50 <jewel> but maybe source for the jasmin assembler (or other assembler) would be easier
05:53:57 <Heffalump> you'd be more likely to create invalid code if you targeted bytecode, I suspect
05:55:30 <Heffalump> but you might also get more chance of getting it to work, I'm not sure
05:56:58 <Logan> I've done that with jasmin before.
05:57:09 <Logan> Writing class files is a pain unless you have code to do it already.
05:57:16 <Heffalump> yeah
05:57:26 <Heffalump> the constant pool is a real nuisance
06:00:23 <jewel> Logan: what have you done with jasmin?
06:01:35 <Logan> Just played around with compiling a toy language to jasmin assembly, then using jasmin to create java class files.
06:01:56 <Logan> Never got to really complete it, though.
06:04:32 <Logan> For an independent study project, I helped this guy with creating an interpreter for a simplified version of C.  I wanted to target jasmin, but he wanted it interpreted (as in, the JVM interpreting code that interprets code :P).
06:04:45 <Logan> I think it would've been easier to just target jasmin.
06:04:59 <Logan> Because that takes care of your representation and execution simultaneously.
06:14:23 <jcore> hello
06:14:37 <jcore> I'm getting the following error...which is killing me (I can't figure out what it's telling me)
06:15:12 <jcore> "Instance of Num ([Vertex] -> Int) required for definition of convex
06:15:30 <jcore> do you need some context?
06:15:33 <Heffalump> yes
06:15:40 <Heffalump> you've probably forgotten a parameter somewhere
06:15:58 <Heffalump> it looks very much like you have some function that takes some parameters, the last of which is a list of Vertex
06:15:58 <jcore> ok, one sec
06:16:02 <Heffalump> and returns an Int
06:16:15 <jcore> convex (Polygon p)        = length p == abs turns p
06:16:15 <jcore>   where turns               :: [Vertex] -> Int
06:16:16 <Heffalump> and you've left out the last parameter somewhere, but are still trying to use it as an Int
06:16:25 <jcore>         turns (v1 : v2 : vs) = aux v1 v2 vs
06:16:25 <jcore>           where aux                 :: Vertex -> Vertex -> [Vertex] -> Int
06:16:25 <Heffalump> ah, brackets
06:16:29 <Heffalump> abs (turns p)
06:16:34 <jcore> woops
06:16:53 <jcore> oh my god...I can't believe that was it...
06:17:09 <jcore> I should know better, but this is my first haskell program
06:17:22 <Heffalump> beginning Haskell programmers always get that kind of thing wrong
06:17:41 <jcore> I thought that function application went after ...er...
06:17:43 <Logan> Yeah, it's impossible to know syntax fully and recognize what it means right off.
06:17:51 <jcore> oh well, thanks
06:17:55 <jcore> now to see if the function works
06:17:55 <Logan> I'm starting to get more fluent with it.
06:18:12 <jcore> Logan: cool ;)
06:18:28 <Logan> I've been pondering how haskell implements its parsing of expressions involving binary operators... I've been too lazy to just look at ghc's source code.
06:18:36 <jcore> haskell (and functional programming) seems to parallel paradigm shifts in mathematics...
06:18:52 <jcore> if the equivalence holds we'll probably look back at imperative programming and laugh
06:18:55 <jcore> "how quaint"
06:19:07 <Logan> I already do.
06:19:16 <jcore> heh
06:19:27 <Logan> When I see different languages bickering over the best way to represent the same tedious operations, I roll my eyes. :P
06:19:37 <Logan> Even though the majority of the code I write is imperative still.
06:20:46 <jcore> hot damn, the function's working
06:20:58 <jcore> which is really cool since I "proved" it by calculation yesterday
06:21:01 <shapr> hiya
06:21:03 <shapr> what's up?
06:21:09 <jcore> hey shapr
06:21:19 <shapr> hello jcore, how are ya?
06:21:25 <jcore> I'm doing pretty good now ;)
06:21:36 <shapr> cool!
06:21:40 <jcore> now if my internet connection will hold until this afternoon...
06:21:57 <shapr> I'm addicted to my internet.
06:22:07 <jcore> heh
06:22:08 <shapr> just gimme a 10baseT in my vein please.
06:22:19 <Logan> I haven't had internet in my house for a month.
06:22:22 <Heffalump> have you been reading userfriendly lately?
06:22:25 <Logan> Because our ISP tried to fuck us over.
06:22:26 <jcore> I just need to be able to ask questions and look up stuff...it kills me when I can't
06:22:32 <Logan> So now we have to wait another month just to get DSL again.
06:22:38 <Logan> So I basically live on campus now. ):
06:22:41 <shapr> Heffalump: not me, what's up on UF?
06:23:01 <shapr> yah, I moved my computer upstairs, and the DSL hub doesn't reach that far
06:23:03 <Logan> I can't do any work at home... my room's becoming a mess and I have no motivation to do things like laundry without internet to fall back on during the boring parts. :P
06:23:13 <shapr> and we don't own this house.. so I couldn't drill any holes.
06:23:26 <shapr> so I threw a cable  out the window and stuck in the downstairs office window :)
06:23:26 <jcore> that sucks
06:23:37 <jcore> heh heh heh
06:23:38 <shapr> that ugly hack will last till I purchase some 802.11b cards.
06:23:44 <shapr> which should take another week.
06:23:56 <shapr> hi Heffalump! what's up in your life? still doing SML?
06:23:58 <Logan> shapr: Wireless rules.
06:24:01 <Heffalump> shapr: read about the last week's worth of stuff
06:24:07 <Heffalump> s/stuff/comments/
06:24:09 <shapr> Logan: except for security =)
06:24:11 <Heffalump> shapr: yep :-)
06:24:12 <Logan> This wireless NIC in my laptop has saved me a lot of effort.
06:24:16 <Heffalump> wireless rocks
06:24:27 <jcore> ...unless you're concerned about security...
06:24:30 <shapr> Heffalump: last month worth of #haskell logs you mean?
06:24:34 <Logan> shapr: True, but no one cares about my LAN at home (and I have nothing sensitive there anyway), and I do everything over ssh on campus.
06:24:46 <Logan> Damn, better run to class.
06:24:53 <jcore> although I must admit that life will get interesting when I complete my wearable and universities start setting up 802.11b
06:24:56 <shapr> I'm curious about ad-hoc networks, I can't figure out if you really require a base station for 3+ cards to all talk to each other.
06:25:10 <Logan> My university has a few test networks up, one of them barely reaches one of my classrooms.
06:25:13 <shapr> anyone already knows here?
06:25:33 <Logan> shapr: My cards didn't work in ad-hoc mode in Linux when I got them, so I never tried.
06:25:36 <Logan> Later.
06:25:38 <Heffalump> shapr: no, UF
06:25:47 <Heffalump> shapr: no, you don't
06:25:50 <shapr> my friend who ran an ISP here was using 802.11b to get 2 kilometer 11Mbps connections to cover the entire town!
06:25:55 <Heffalump> (need a base station for three cards to talk to each other)
06:26:03 <jcore> shapr: went out of business?
06:26:11 <shapr> cool, thanks for the info
06:26:24 <Heffalump> logan: are they Lucent Wavelan cards?
06:26:29 <shapr> jcore, yah he sold his company to a larger firm for stock only, and then the larger company just died.
06:26:35 <shapr> they screwed him over :(
06:26:45 <jcore> is BeOS still downloadable?
06:26:56 * shapr dunno
06:27:00 <jcore> shapr: anything cool and innovative is doomed in the marketplace right now
06:27:13 <shapr> really?
06:27:16 <shapr> hm
06:28:03 <shapr> like what?
06:28:21 <shapr> Heffalump: ok, I'm starting with user comments from last tuesday.
06:28:23 <jcore> found it
06:28:36 <shapr> oh hey, check out this worthwhile recent quote from #python:
06:28:46 <shapr> <gt3> programming should be an adventure, those damn college courses make it so its like yer joining the navy seals so you can work at sea world as a whale feeder
06:28:49 <Heffalump> shapr: nono, I meant the cartoon itself
06:29:02 <Heffalump> it was just in response to [14:22] <shapr> just gimme a 10baseT in my vein please.
06:29:15 <shapr> ah!
06:29:33 <shapr> heh!
06:29:45 <shapr> that's his BRAIN!
06:31:16 <shapr> whoa, who's this cthulhu guy in UF?
06:31:51 <clausen> 10baseT is a kind of drug?
06:31:57 <jcore> does anyone know of a good wm that also doesn't bomb when using kinput2?
06:32:01 <shapr> clausen: sure is...
06:32:05 <jcore> I'm stuck with twm right now
06:32:09 <shapr> what's kinput2?
06:32:15 <shapr> I use sawfish mostly, but ion other times.
06:32:27 <jcore> Japanese input method
06:32:36 <shapr> clausen: 10baseT is the most common ethernet cable :)
06:32:51 <shapr> jcore /= juhp ?
06:33:03 <clausen> shapr: I know :p
06:33:25 <clausen> ("XXX in my vein" in pt_BR means "XXX *rocks*")
06:33:26 <shapr> clausen: ok, just checking... sometimes people miss things for years (like me, but let's not talk about it)
06:33:31 <clausen> hehe
06:34:41 --- topic: set to 'Haskell! (NerdBop) || and spiffy people! (shapr)' by shapr
06:35:15 <shapr> I'm getting more and more fond of Haskell the more I have to use Java =)
06:35:44 <clausen> the inverse is true as well, unfortunately :(
06:35:57 <clausen> (talking to ppl who use haskell in their day job...)
06:35:57 <shapr> huh?
06:36:02 <shapr> oh!
06:36:06 <shapr> yah, I wish.
06:36:08 <Heffalump> who are said people? :-)
06:36:16 <clausen> bernie pope
06:36:25 <clausen> guy at www.cs.mu.oz.au
06:36:27 <clausen> (my uni)
06:36:38 <clausen> he's writing a haskell debugger (phd)
06:36:56 <jcore> juhp?
06:36:57 <clausen> he finds haskell is really complicated
06:37:14 <clausen> like, it's hard to find out why your code is slow
06:37:20 <clausen> (lazy evaluation is complicated...)
06:37:31 <Heffalump> presumably he's looked at Stephen Jarvis' work?
06:37:41 <clausen> dunno... I guess so
06:37:55 * clausen never heard of stephen jarvis
06:38:19 <clausen> you read okasaki's book?
06:38:23 <clausen> (purely functional data structures)
06:38:31 <Heffalump> not read it, but know of it
06:38:36 <clausen> that stuff is really heavy magic
06:38:53 <clausen> you know what amortized data structures are?
06:39:02 <clausen> (well, it's a loose term...)
06:42:33 <Heffalump> amortized time complexity is probably what you mean
06:42:36 <Heffalump> and yeah
06:44:30 <clausen> no
06:44:51 <clausen> I'm talking about data structures that have amortized bounds
06:44:58 <Heffalump> bounds on what?
06:45:06 <clausen> but not (good) per-op bounds
06:45:09 <clausen> operations
06:45:22 <clausen> (runtime)
06:45:23 <Heffalump> yes, that's what I meant too
06:45:40 <clausen> amortized time complexity is a type of analysis
06:45:45 <clausen> amortized data structures is "slang"
06:45:55 <clausen> meaning a type of data structure
06:46:00 <clausen> anyway, a mere detail ;)
06:46:07 <jcore> what's the title of the book so that I can request my library to stock it?
06:46:24 <clausen> "Purely Functional Data Structures" by Chris Okasaki
06:46:29 <clausen> anyway...
06:46:30 <jcore> thanks
06:46:53 <clausen> 1 big problem with amortized data structures
06:46:56 <clausen> in haskell, is persistence
06:47:07 <clausen> i.e.
06:47:13 <clausen> s/i.e./e.g./
06:47:28 <clausen> when you do (x:xs)
06:47:31 <clausen> you are creating a new list
06:47:36 <clausen> *and* keeping the old one
06:47:48 <clausen> so, an assumption with amortizing
06:47:56 <clausen> is that the output of one op is the input of the next
06:47:59 <jcore> nope, my library doesn't have it...heh...time to make a request...
06:48:14 <clausen> i.e. that you don't pay for the expensive "fixups" many times
06:48:26 <clausen> so, hood-melville queues, for example
06:48:36 <clausen> (where you have two lists
06:48:43 <clausen> "front" and "back"
06:48:58 <clausen> items are added to the back list
06:49:02 <clausen> and removed from the front last
06:49:06 <jcore> has anyone read "Type Theory and Functional Programming" by Simon Thompson?
06:49:08 <clausen> (popped)
06:49:14 * clausen hasn't
06:49:19 <clausen> when the front list becomes empty
06:49:29 <clausen> the back list is "reversed" and becomes the front list
06:49:33 <clausen> (and the back list becomes empty)
06:49:37 <clausen> so, this is a problem:
06:49:49 <clausen> imagine you have ([], [1,2,3,4,5])
06:50:02 <clausen> and you keep popping an item off the original list
06:50:07 <jcore> hrm...
06:50:20 <clausen> (i.e. getting 5 every time)
06:50:29 <clausen> that means you are paying LOTS
06:50:48 <clausen> anyway, there are tricks around this, but they are nasty
06:51:01 <clausen> (and seem quite fragile...
06:51:05 <clausen> they depend on lazy evaluation)
06:51:35 * clausen has finished his rant, hehe
06:52:30 <jcore> interesting
06:52:35 <jcore> well, time to go to work
06:55:38 * clausen off to bed
09:13:38 <pesco> Yoohoo! *wave*
09:14:07 <Heffalump> hiya
09:14:14 <pesco> hey
09:15:09 <pesco> Any clue, when the next GHC release might arrive?
09:15:31 <Heffalump> the last one was a day or two ago, so not for a while, I imagine
09:15:42 <pesco> Ooh, I missed it!
09:16:01 <Heffalump> 5.02.3, so nothing major
09:16:09 <pesco> Oh
09:18:15 <pesco> Hrm, I want HOpenGL included in the standard distribution.
09:19:32 <Heffalump> what distro?
09:19:37 <pesco> ghc
09:19:37 <Heffalump> (assuming Linux here)
09:19:44 <Heffalump> IM what OS really
09:19:56 <pesco> Debian GNU/Linux.
09:20:02 <Heffalump> ah
09:20:19 <Heffalump> I was trying to build Debian packages of it with support for that in, but they never quite worked
09:20:28 <pesco> Aww.
09:20:34 <Heffalump> shapr was trying them out, but they were missing an important package that HOpenGL depends on
09:20:43 <Heffalump> and when I tried to build that too it failed, can't rmember why now
09:20:51 <pesco> Which package was it?
09:21:17 <Heffalump> can't quite remember. X I think.
09:21:28 <pesco> Heh, oh! :)
09:21:29 <Heffalump> I'm a bit busy atm or I'd have another go
09:21:37 <Heffalump> as in a package of stuff that talks to Xlib.
09:21:46 <pesco> Hm, GLUT?
09:21:58 <Heffalump> no, I really do mean something called X or similar
09:22:11 <pesco> HOpenGL should not depend on that!
09:22:23 <Heffalump> using it on a UNIX machine might
09:22:55 <pesco> On a UNIX, OpenGL and GLUT might. But HOpenGL just wraps those.
09:23:19 <Heffalump> hmm
09:24:17 <Heffalump> it's definitely the "xlib" package that was causing shapr a problem.
09:24:23 <Heffalump> cos it's that I tried to build.
09:24:28 <pesco> Hm.
09:24:33 <Heffalump> you'd have to ask him for more details though
09:28:05 <pesco> Ah, oh, hm, HOpenGL really does depend on X... You're right...
09:28:48 <shapr> xlibs
09:29:04 <pesco> Yes... why?
09:30:09 <shapr> seems normal to me.
09:30:19 <shapr> I also want HOpenGL in ghc5 debs btw
09:30:30 * Heffalump had noticed :-)
09:30:39 <pesco> If I thunk about it, a Haskell wrapper oround GL and GLUT should use:
09:30:52 <pesco> GreenCard
09:30:59 <pesco> GHC if it needs to
09:31:08 <pesco> GL
09:31:10 <pesco> GLUT
09:31:29 <pesco> Why X? That should be abstracted by GL and GLUT.
09:31:32 * Heffalump runs the build again to see where the error is
09:31:57 <pesco> This dependency means I can't build HOpenGL on 'doze.
09:32:08 <Heffalump> it's a usage dependency, not a build dependency
09:32:16 <Heffalump> I built it fine, but shapr couldn't run stuff, IIRC
09:32:28 <shapr> couldn't compile
09:32:28 <Heffalump> and he was obviously using it on Linux
09:32:31 <shapr> it wanted xlibs
09:32:37 <shapr> and I'm using Debian/sid
09:32:54 <Heffalump> hmm, but what if you wanted to compile the same program under 'doze?
09:32:56 <pesco> HOpenGL's configure.in mentions X in various places.
09:32:59 <Heffalump> what'd it require then?
09:33:15 <pesco> GL and GLUT.
09:33:19 <pesco> As usual.
09:33:53 <pesco> The only foreign functions HOpenGL should need to call are those from GL and GLUT.
09:34:13 <Heffalump> so how come shapr had that compile problem?
09:34:46 <pesco> Because for some obscure reason, HOpenGL links stuff against X I think...
09:34:47 <shapr> could be user error
09:34:56 <shapr> pesco: if you can get it work, tell me how!
09:35:01 <pesco> :)
09:35:03 <Heffalump> ah, ok
09:35:08 <pesco> I'm not sure I have time for that now... :(
09:35:12 <Heffalump> but xlib is a ghc package, I think.
09:35:28 <pesco> Huh?
09:35:30 <pesco> No.
09:35:58 <Heffalump> well, hslibs/xlib exists
09:36:04 <Heffalump> so a hslibs package, then
09:36:06 <pesco> Really?
09:36:22 <Heffalump> looks like it - seems to use greencard
09:37:43 <pesco> So it was that package it needed, not -lX11?
09:37:46 <shapr> right
09:37:48 <Heffalump> yeah.
09:37:53 <pesco> Hm...
09:40:43 <pesco> Strange... I might try it sometime.
