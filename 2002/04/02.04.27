03:49:17 <pesco> Can anybody tell me where to find the intermediate .hc files for bootstrapping GHC on unsupported Platforms?
03:49:33 <pesco> I'm trying to build it on my powerpc-apple-linux.
03:50:19 <Igloo> ISTR they are arch dependent, so there almost certainly won't be any
03:50:39 <pesco> whatis ISTR?
03:50:53 <Igloo> I Seem To Remember
03:51:11 <pesco> But then, how do I bootstrap the beast?
03:51:42 <pesco> They can't be arch dependent, or there would be no way of creating a new port!
03:51:45 <Igloo> With extreme difficulty last time I tried
03:52:02 <pesco> Oh, how did you do it?
03:52:19 <Igloo> I was trying to do x86/Solaris, so had the x86 hc files
03:54:10 * Igloo can't remember how bootstrappingit works now, but if you look at the mailing list archives you will find people doing so, so you could ask them. Or just ask for pointers on the list
03:54:44 <pesco> OK, I'm abit in a hurry, so I hoped to find an answere here. But I'll look at the archives, thanks.
03:55:31 <Igloo> Hmmm, IME porting GHC is not something to be attempted while "in a hurry", although it is probably better now
04:07:20 <pesco> Hm, yes, It's probably a quite naive idea of me, wanting to build an incomplete port at all.
04:08:55 <pesco> I have no idea how GHC (or any compiler) actually works.
04:21:43 <pesco> Although! powerpc-apple-darwin is supported.
04:22:40 <pesco> So will powerpc-unknown-linux require any patching to the compiler itself at all?
10:54:07 <|Fo|Ns> hi
10:54:23 <|Fo|Ns> did anyone play real time battle?
10:54:36 <|Fo|Ns> cause i would like to do it with haskell
10:54:41 <|Fo|Ns> but I dont know c++
10:54:51 <|Fo|Ns> and I cant understand the bot examples
12:21:54 <|Fo|Ns> hi again
12:21:57 <shapr> hi
12:22:19 <|Fo|Ns> anyone tried to play realtime battle with haskell?
12:22:42 <|Fo|Ns> I guess not
12:22:44 <|Fo|Ns> :(
12:23:21 <shapr> not that I've heard of
12:24:08 <|Fo|Ns> ok, didnt want to, but im forced to learn c++
12:24:12 <|Fo|Ns> :(
12:24:20 <|Fo|Ns> or c
12:25:01 <Igloo> Have you got a URL handy?
12:25:16 <|Fo|Ns> me?
12:26:32 <Igloo> Yup
12:26:58 <|Fo|Ns> http://www.lysator.liu.se/realtimebattle/
12:27:26 <|Fo|Ns> there are some bot examples written in c++
12:27:39 <|Fo|Ns> and I would need to understand them
12:27:51 <|Fo|Ns> cause documentation isnt good enought
12:29:38 <Igloo> Hmmm, pity there isn't a line based input method
12:30:19 <|Fo|Ns> Igloo: yes, in c++
12:30:30 <|Fo|Ns> there are some exmples in
12:30:38 <|Fo|Ns> java perl c++ c
12:30:53 <|Fo|Ns> but I only know haskell and ada
12:30:54 <|Fo|Ns> :(
12:30:55 <Igloo> I'm looking at http://www.lysator.liu.se/realtimebattle/Documentation/RealTimeBattle-4.html
12:31:15 <Igloo> Actually, reading further down it might be line based after all, in which case it should be easy with Haskell IO
12:31:17 <|Fo|Ns> yes ive read that many times
12:31:42 <|Fo|Ns> but I dont know hoe to process information while reading
12:32:18 <|Fo|Ns> thats the problem I have
12:32:48 <|Fo|Ns> If I only could understand an example....
12:33:52 <Igloo> do c < getContents; let c' = unlines c; mapM_ process_line c'  or similar ought to work
12:34:08 <Igloo> where process_line :: String -> IO()
12:34:42 <Igloo> Only more complex as you'll want to pass state around
12:35:14 * Igloo saves the URL for a better look post-exams
12:36:10 <|Fo|Ns> getContents?
12:36:16 <|Fo|Ns> never used that
13:16:22 <|Fo|Ns> and..
13:16:48 <|Fo|Ns> if the server sends a message while processing the information?
13:17:00 <|Fo|Ns> Igloo: ??
13:26:36 <Igloo> Then you will receive it when you have finished processing (in effect - the technicalities are slightly different due to laziness, bu tthe effect will be the same)
13:26:56 <Igloo> You could try playing with threads if that is an issue
13:28:11 <Igloo> Hmmm, which I guess it would be if you need to do multiple things between messages. So you'd probably need select or something similar, which ghc more than likely has
13:30:56 <Logan> ghc has select.
13:31:09 <Logan> http://www.haskell.org/ghc/docs/latest/set/select.html
13:31:11 <Logan> Threading is probably easier.
13:31:29 <Igloo> You need to do IPC somehow, though
13:31:42 <Logan> Concurrent Haskell provides MVars for communication between threads.
13:31:48 <Logan> And asynchronous exceptions. :P
13:32:06 <Igloo> OK - I haven't really looked at anything outside of H98
13:32:41 <Logan> Does elems on an Array return values sorted by indices?
13:33:01 <Logan> http://www.haskell.org/ghc/docs/latest/set/sec-concurrent.html
13:44:22 <Logan> Does anybody have an example of some MArray code?
13:51:08 <|Fo|Ns> thanks
13:52:30 <Logan> Or STArray
13:53:18 <|Fo|Ns> STArray is the type for mutable arays?
13:53:21 <|Fo|Ns> arrays
13:59:29 * Logan nods.
13:59:41 <Logan> I'm trying to use one as an accumulator.
13:59:53 <Logan> I have a list of index/value pairs from a normal array...
14:00:08 <Logan> And I want to build an array that maps values from the original array to the number of times they appear in the original array.
14:00:11 <Logan> But I'm not sure how to write it.
14:15:57 <|Fo|Ns> I think theres a funtion to transform a normal array to a STArray
14:17:00 <|Fo|Ns> if that helps
14:20:26 <Logan> I got it to work, after fuddling through it.
14:20:32 <Logan> Oooh, ghci segfaulted.
14:25:16 <Logan> ghc-5.02.2: fatal error: evacuate: strange closure type 11896                                                                                                 
14:27:36 <Logan> I guess my STArray code is bad.
14:30:31 <Logan> countValues :: (Num e, Ix a, Ix b, Bounded b) => Array a b -> Array b e
14:30:31 <Logan> countValues a = runST accumulator
14:30:31 <Logan>                 where lower = minBound `asTypeOf` (head . elems) a
14:30:31 <Logan>                       upper = maxBound `asTypeOf` lower
14:30:31 <Logan>                       accumulator = do x <- newSTArray (lower, upper) 0
14:30:34 <Logan>                                        mapM_ (increment x) $ elems a
14:30:37 <Logan>                                        freezeSTArray x
14:30:39 <Logan>                       increment x y = do v <- readSTArray x y
14:30:42 <Logan>                                          writeArray x y (v + 1)
15:02:18 * Logan wonders if this is a ghc bug or something.
15:08:07 <Logan> fatal error: evacuate: strange closure type 5072
15:08:18 <Logan> I have no idea what's wrong with my code.
15:12:26 <Logan> Oh, I bet it's trying to allocate too much memory or something.
15:14:59 <Logan> Yeah, that took care of it.
15:15:12 <Logan> I'll just have to make sure I never try to equalize images whose pixels consist of Ints. :P
15:41:30 * Heffalump randomly wonders if anyone is interested in being able to call into Perl from Haskell
15:41:46 <clausen> that would be seriously bad karma *grin*
15:41:56 <Heffalump> :_)
15:42:00 <Heffalump> s/_/-/
15:42:08 <Heffalump> I want to use CPAN modules, basically
17:07:49 <shapr> well, you can already call into the JVM
17:08:09 <shapr> maybe you can hack that into a generic Haskell<->$LANG interface
17:09:40 <Heffalump> most of the work is specific to the particular language
17:09:46 <Heffalump> e.g. marshalling internal types
17:23:35 <Logan> Heh.
