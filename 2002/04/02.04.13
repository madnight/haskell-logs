09:56:11 <SphinxxY> 04hey all
09:56:37 <SphinxxY> 0400can ne1 help me wid a question i've gotta do?
09:57:56 <SphinxxY> 00okay...
09:58:35 <pesco> Speak your question now or remain forever silent!
09:58:45 <SphinxxY> haha
09:59:02 <SphinxxY> given a list of Int, returns an Int which is the next number in that sequence. If you can't guess what the next number in the sequence is, your function should output 0; we will never test a numeric sequence in which a predicted value of 0 is a valid answer. Sequences can be: 
09:59:03 <SphinxxY>  
09:59:03 <SphinxxY> Arithmetic or geometric sequences (as defined in Task 2 and Task 3): 
09:59:03 <SphinxxY>  
09:59:04 <SphinxxY> Predict> predict [1, 2, 3, 4] 
09:59:06 <SphinxxY> 5 
09:59:08 <SphinxxY> Predict> predict [5, -10, 20, -40] 
09:59:10 <SphinxxY> 80 
09:59:12 <SphinxxY> Predict> predict [1, 2, 3, 5] 
09:59:14 <SphinxxY> 0 
09:59:16 <SphinxxY>  
09:59:39 <SphinxxY> hmm, i guess thats a bad thing, no one will b able 2 help
09:59:39 <SphinxxY> dun worri 
10:00:45 <SphinxxY> :(
10:03:00 * pesco shakes his head in amazement
13:34:44 <Logan> Heh, I coded that problem SphinxxY mentioned in Java a couple of weeks ago for a contest. :P
13:37:02 <shapr> ?
13:37:38 <Logan> Determine if a sequence is arithmetic, geometric, both, or neither, and in his case predict the next number in the sequence.
13:37:46 <shapr> oh, nifty
13:38:14 <Logan> It's not too hard once you define what arithmetic and geometric sequences are properly.
13:40:14 <Igloo> There should be a nice Haskell solution with tail, zipWith and checking the list for equality in all elements
13:41:46 <Logan> Well, for each type of sequence, you obtain a constant value that drives the sequence from the first two values.
13:42:00 <Logan> Then you check that constant against each remaining pair of adjacent values.
13:42:03 <Igloo> Although I can't think of a beautiful way of doing the last part
13:42:23 <Logan> Igloo: A fold?
13:42:32 <Igloo> That's not as nice, though (although possibly more efficient)
13:42:32 <pesco> I am severely suffering from my lack of a mathematics encyclopedia. Any mathematicians here? What is the exact definition of a Julia set?
13:43:00 <Logan> Hmm, it's not on planetmath yet, let me check MathWorld.
13:43:14 * pesco laughs
13:43:15 <Logan> http://mathworld.wolfram.com/JuliaSet.html
13:43:23 <pesco> I have the MathWorld definition here.
13:43:25 <Igloo> Logan: The problem with a fold is the result would have to be either a tuple (a, Bool) or Maybe a, whereas ideally you would have Bool
13:43:35 * Logan nods.
13:43:44 <Logan> I was thinking Maybe Int
13:44:02 <Logan> Where it's either Nothing or it's the value that has held for all previous elements.
13:44:16 <Logan> Then at the end it is True if the result is not Nothing.
13:44:19 <Igloo> Yeah, that's Maybe a with a specialised to Int
13:44:28 <Igloo> But it's not beatiful
13:44:32 <Logan> I thought you meant Maybe Bool. :P
13:45:11 <Igloo> Maybe Bool would have the slight problem of being unimplementable  :-)
13:45:19 <Logan> I think the way I would do it is with a single function, that takes the tail of a sequence and a constant value, which is either undefined or bound to a particular value.
13:45:46 <Logan> It obtains what the constant needs to be for the first two values of the list, compared to the given constant (comparison is true if it's unbound), and recurses if so.
13:46:07 <Logan> That will at least satisfy determining if a sequence is arithmetic/geometric.
13:46:22 <Logan> Could even make it return the next term directly.
13:47:15 <Igloo> all_equal $ zipWith (/) xs (tail xs) with a type forcing the use of Rational is a nicer solution IMO (assuming I haven't screwed up)
13:47:30 <Igloo> And similarly with (-) for arithmetic
13:47:33 * Logan nods.
13:47:40 <Logan> That seems pretty elegant.
13:47:48 <Heffalump> you need an ugly last to predict the next element, though
13:47:58 <Heffalump> well, ugly in the sense of rescanning the list
13:48:01 <Logan> Yeah, my function can do it all itself (soon as I write it).
13:48:37 <Igloo> Oh, yes, I wasn't thinking about that bit of it
13:49:56 <Heffalump> predict_arith diff prev [] = Just (diff+prev)
13:49:56 <Heffalump> predict_arith diff prev (x:xs) = if diff+prev=x 
13:49:56 <Heffalump>                                  then predict_arith diff x xs
13:49:56 <Heffalump>                                  else None
13:49:56 <Heffalump> predict [] = None
13:49:59 <Heffalump> predict [x] = None
13:50:01 <Heffalump> predict (x1:x2:xs) = predict_arith (x2-x1) x1 xs
13:50:10 <Heffalump> is my inelegant one-pass solution
13:50:33 <Heffalump> except I've been writing SML for too long and it doesn't even parse
13:50:57 <Heffalump> s/prev=x/prev==x/;s/None/Nothing/
13:51:22 <Heffalump> and it doesn't work, but apart from that...
13:51:28 <Igloo> You want x2 instead of x1
13:51:35 <Heffalump> ah, yes
13:51:49 <Heffalump> right
13:51:51 <Igloo> You see, writing SML rots your brain
13:51:53 * Heffalump tries to make it nicer
13:54:08 <pesco> Logan: My problem is, I've seen Julia sets mentioned of functions that were not of the type mentioned on MathWorld.
13:54:38 <Heffalump> hmm, allowing geometric sequences makes the results look ugly
13:55:10 <pesco> But I guess Eric Weisstein is more authorative than pretty much the rest of the Web, correct?
13:55:23 <Heffalump> anyway predict' is clearly a fold (after suitable reorganisation of arguments) but it's not particularly pretty
13:55:37 <Heffalump> (predict' being a general version of predict_arith)
13:57:42 <Logan> Hmm, I have some code now.
13:57:55 <Logan> nextSequence :: Eq a => (a -> a -> a) -> (Maybe a) -> [a] -> (Maybe a)
13:57:55 <Logan> nextSequence op c (x1:xs@(x2:_))
13:57:55 <Logan>     | c == Nothing || jc == c' = nextSequence op (Just c') xs
13:57:55 <Logan>     | otherwise = Nothing
13:57:55 <Logan>     where
13:57:57 <Logan>         c' = op x1 x2
13:58:00 <Logan>         (Just jc) = c
13:58:03 <Logan> nextSequence op (Just c) [x1] = Just (op x1 c)
13:58:05 <Logan> nextSequence _ Nothing [_] = Nothing
13:58:08 <Logan> nextArithmetic = nextSequence (-) (+) Nothing
13:58:10 <Logan> nextGeometric = nextSequence (/) (*) Nothing
13:58:13 <Logan> It doesn't work with a geometric series where the constant is 0.
13:58:29 <Logan> Unless it's given as [1, 0]. :P
13:58:46 <Heffalump> you appear to be calling nextSequence in a way that's incompatible with its definition
13:58:57 <Logan> Where?
13:58:58 <Logan> Oh.
13:59:01 <Logan> I forgot to fix that.
13:59:18 * Logan wonders why that compiled.
13:59:35 <Logan> nextArithmetic = nextSequence (-) Nothing
13:59:35 <Logan> nextGeometric = nextSequence (/) Nothing
13:59:39 <Logan> is what I meant. :P
13:59:53 <Heffalump> how do you predict the next element?
14:01:00 <Logan> nextSequence op (Just c) [x1] = Just (op x1 c)
14:01:04 <Logan> It's not very general, though.
14:01:33 * Heffalump confused
14:01:35 <Igloo> I'm surprised if that works - I'd have thought you'd need Just (head xs) as the second parameter
14:01:46 <Logan> It seems to work.
14:02:09 <Igloo> What does it say for [1, 2, 3, 8, 9, 10]?
14:02:37 <Logan> Nothing
14:02:44 <Logan> Because 2 - 3 != 3 - 8
14:02:55 <Logan> And 2 / 3 != 3 / 8
14:03:03 <Logan> Seq> nextArithmetic [1, 2, 3, 4]
14:03:03 <Logan> Just 5
14:03:03 <Logan> Seq> nextGeometric [5, -10, 20, -40]
14:03:03 <Logan> Just 80.0
14:03:13 <Igloo> Oh, it's not a fold
14:03:20 <Logan> No, no folding.
14:03:26 <Logan> It just iterates over the sequence.
14:03:43 <Logan> And when there is one element left and the constant is defined, it predicts the next, but it makes an assumption about the nature of the operator given to it.
14:04:06 <Logan> Initially I had an inverse operator passed, that might be necessary to be more general.
14:04:25 <Logan> For instance, nextSequence (^) Nothing seq won't do what you expect.
14:07:13 <Logan> We need a random problem every day or hour. :P
14:07:23 * Igloo decides   all $ zipWith (==) xs (tail xs)  is about as nice an all_equal as I can see
14:07:43 <Igloo> That'd be cool, but probably bad for my revision  :-)
14:07:46 <Heffalump> :-)
14:08:01 <Heffalump> you make far too many passes over the list :-)
14:08:22 * Heffalump likes his program, but it's not particularly clever in any way
14:09:11 <Igloo> Yes, but the code is beautiful, and that is the most important thing. My hypothetical compiler will optimise it to bits for me anyway  :-)
14:10:51 <Igloo> CSP seems much cooler once you know it has a "Catastrophe" event and operator
14:12:15 <Heffalump> operator?
14:12:50 <Igloo> P lightningbolt Q behaves like P until a catastrophe event at which point it acts like Q
14:13:17 <Logan> What glyph represents a lightningbolt?
14:13:49 <Logan> What is CSP?
14:13:54 <Igloo> It's a little picture of a lightning bolt
14:14:14 <Igloo> Concurrent Sequential processes, a language we learn about at uni here
14:14:29 <Heffalump> Communicating
14:14:32 <Igloo> Doh, yes
14:14:39 <Heffalump> oh, I've never heard of that
14:14:40 <Logan> Haha, I was thinking "Concurrent Sequential Programming", because I thought it'd be funny to put "concurrent" and "sequential" next to each other.
14:15:00 <Igloo> It wasn't in the course
14:15:34 <Igloo> I don't know if it's in the modern language or supported by the tools either
16:23:33 <arete> is there a print function that doesn't output a new line?
16:23:41 <arete> or conversely, how do you print out multiple things on the same line?
16:25:49 <Igloo> putStr, with appropriate use of show
16:26:37 <arete> thankee
20:59:24 <Logan> Who wants to help me create a good interactive Haskell reference? :P
21:03:47 <Logan> Is there any form of introspection for Haskell?
