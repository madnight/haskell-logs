00:52:39 <fullets> how do i use the sort function from Hugs without getting ERROR anagrams.hs:27 - Undefined variable "sort"
00:57:04 <fullets> hmm... by reading the docs, i guess :-) import is my friend
01:06:06 <Heffalump> is it in the List module?
01:06:16 <Heffalump> yes
05:36:25 <tinus> wow
05:36:29 <tinus> a haskell channel
05:36:35 <tinus> anyone around?
05:36:43 <clausen> yep
05:36:46 <tinus> hello
05:36:51 <clausen> hi :)
05:36:54 <tinus> could you help me with a minor problem
05:37:00 <clausen> perhaps... try me!
05:37:03 <tinus> thanks
05:37:11 <tinus> i have two [String]
05:37:21 <tinus> i need to grab the String they both contain
05:37:52 <tinus> common ["a", "b", "c", "d"] ["d", "e", "f"] 
05:37:55 <tinus> should return
05:37:57 <tinus> "d"
05:38:07 <clausen> hmmm
05:38:16 <clausen> you want it to be fast?
05:38:22 <clausen> will you could do:
05:38:22 <tinus> doesn't matter
05:38:30 <Igloo> Look at intersect in List
05:38:31 <clausen> union :: [String] -> [String] -> [String]
05:38:39 <clausen> that exists? /me has a bad memory
05:38:42 <clausen> anyway, to implement
05:38:50 <tinus> intersect? hmm
05:38:55 <clausen> oops
05:38:57 <clausen> intersect
05:38:59 * clausen half a sleep
05:39:03 <Igloo> Both intersect and union exist, but intersect is what he wants  :-)
05:39:15 <clausen> intersect a = filterBy (member a)
05:39:21 <tinus> wow
05:39:49 <tinus> great! thanks alot
05:41:15 <clausen> s/member/elem/
05:42:01 <tinus> i wonder if my teacher allows me to use it though
05:42:06 <tinus> lemme read up on the rules
05:44:15 * clausen off to sleep
05:45:25 <pesco> Heheh, "These exercises are too simple fo me, the solutions are all part of the Haskell Prelude!"
05:46:27 <Igloo> Have you done list comprehensions?
05:46:43 <tinus> pesco: yeah, exactly :)
05:46:54 <Heffalump> being able to find the right function from the Prelude, taking type signatures into account, is half the battle
05:47:40 <Heffalump> with any language learning the libraries is at least as hard as learning the language itself, IMO
05:47:40 <pesco> Right. You might not understand how the functions work exactly, but you'll be comfortable with type constraints.
05:48:08 <pesco> There's no way around memorizing your reference manual. ;)
05:49:00 <Igloo> There is, you just end up reimplementing half of it  :-)
05:49:10 <pesco> Hrm.
05:50:43 * Igloo wouldn't have thought a teacher wanted you to use intersect, but if you've done list comprehensions then there's a fairly simple implementation that's quite nice IMO
05:52:03 <tinus> yeah, my teacher -did- point out to list-comprehension
05:53:42 <pesco> Igloo: what do you have in mind?
05:53:56 <tinus> i was also wondering ...
05:55:52 <Igloo> Well, what you want to do is take each element of the first array, each element of the second and return the list of the ones where these 2 elements are equal
05:56:18 <tinus> hmm
05:57:18 <Igloo> And if I said much more than that I'd just be doing your homework for you  :-)
05:57:24 <Igloo> Anyway, gotta disappear for a bit
06:01:58 <pesco> tinus: I'd just do the mathematically obvious.
06:02:32 <tinus> well, he told me to take a look at List.hs 
06:02:34 <tinus> then again
06:02:41 <tinus> he also noted me to use list-comprehensions
06:02:49 <pesco> List.hs contains intersect.
06:02:53 <tinus> yeah
06:02:58 <tinus> that's why i am in doubt
06:03:24 <pesco> If you're unsure about whether intersect is ok, do it manually using list comprehension.
06:03:41 <tinus> yeah, i am reading up on how to use that
06:08:47 <pesco> Look at the implementation of intersect. ;)
06:28:33 <tinus> dang
06:28:36 <tinus> this is hard
06:38:33 <Igloo> What do you have?
06:38:55 <tinus> nothing, because i don't get howto use those comprehensions
06:39:03 <tinus> i am trying, but am not getting anywhere
06:39:08 <tinus> http://www.cs.uu.nl/docs/vakken/fp/bestanden/databases.html
06:39:16 <tinus> it is in Dutch, but you can get the idea
06:39:26 <Igloo> Have you got any list comprehension that does anything at all?
06:39:28 <tinus> lookat section "Combineren van tabellen"
06:39:39 <tinus> nope, no comprehensions so far
06:40:16 <Igloo> Ermmm, why are you looking at this site?
06:40:26 <tinus> this is my assignment :)
06:40:31 <pesco> tinus: Do you know set comprehensions from math?
06:40:46 <Igloo> OK
06:40:48 <tinus> pesco: yeah, i do get that part
06:40:56 <tinus> but i do noit get how they will help me here
06:40:59 <tinus> not*
06:41:38 <pesco> tinus: Oh, hm. Can you rephrase your problem?
06:42:00 <tinus> pesco: it's kinda hard to explain, but take a look at that url i gave
06:42:12 <pesco> No.
06:42:19 <tinus> ?
06:42:23 <Igloo> Try reading the list comprehension bit of http://research.microsoft.com/Users/simonpj/haskell98-revised/haskell98-report-html/exps.html
06:42:44 <pesco> tinus: It won't help _you_ if _I_ understand your homework.
06:43:08 <tinus> pesco: no, that was not my meaning either
06:43:13 <Igloo> Try writing a functino that uses a list comprehension that, given a list, returns the same list. Then try writing one that given 2 lists returns each element of each list paired with each element of the other list
06:43:53 <tinus> oh, and then try and build-in a condition
06:43:55 <tinus> hmm
06:43:56 <tinus> i see
06:44:44 <tinus> Igloo: one thing though:
06:44:51 <tinus> i have two [[String]]
06:44:57 <tinus> but one is larger than the other one
06:45:14 <tinus> now i need to compare echt [String] out of the [[String]]
06:45:21 <tinus> s/echt/each
06:45:42 <Igloo> Try writing the above list comprehensions first
06:46:49 <Igloo> (is this still the same problem? You said you had 2 [String] earlier)
06:47:16 <tinus> well, it neraly is
06:47:19 <tinus> nearly
06:47:30 <tinus> that [String] mentioned earlier is part of [[String]]
06:56:08 <Igloo> Any luck?
06:56:18 <tinus> not yet
06:56:55 <tinus> test xs ys - [(x,y) | x <- xs, y <- ys] should work, no?
06:57:10 <Igloo> With an = rather than a -, yes
06:57:18 <tinus> yeah
06:57:56 <Igloo> Does it not work, then?
06:58:58 <tinus> one sec, phone
07:07:29 <tinus> ok, back
07:07:32 <tinus> it works, yes
07:08:33 <Igloo> Right, so now you need a guard to select only the elements where x is equal to y
07:11:50 <tinus> uh huh
07:12:12 <tinus> [(x,y) | x <- xs, y <- ys, x == y]
07:12:46 <tinus> i am still not clear which way this helps me in selecting those lists
07:13:17 <Igloo> Right, and as x == y you can just write [x | x <- xs, y <- ys, x == y]
07:14:04 <Igloo> Now try test ["a", "b", "c", "d"] ["d", "e", "f"] and you should get ["d"] as you wanted
07:14:38 <tinus> ah yes
07:14:48 <tinus> and i see why, now, too
07:15:06 <Igloo> Cool  :-)
07:15:26 <tinus> thanks
07:15:32 <tinus> now for my 2nd part :/
07:16:42 <fullets> what is the Right Way to test two strings for equality - I assume there's something in List, but I can't find anything
07:16:58 <pesco> == ?
07:16:59 <Igloo> xs == ys
07:17:51 <pesco> Haskell doesn't distinguish different "depths" of equality, like LISP, say.
07:17:55 <fullets> i was hoping that it'd be harder than that so i wouldn't look quite so dumb...thanks
07:18:02 <Igloo> lol
07:18:06 <pesco> Heheh
07:18:30 <Igloo> You can use 'all (zipWith (==) xs ys)' if you want  :-)
07:18:40 <pesco> Lol
07:19:21 <Igloo> Oh, except that won't necessarily work if the lists are the same length
07:19:34 <Igloo> all (zipWith (==) xs ys) && length xs == length ys
07:21:50 <pesco> Igloo: Is there a function for shuffleing a list, do you know?
07:22:13 <Igloo> Do you mean making a random permutation?
07:22:20 <pesco> Exactly.
07:22:59 <Igloo> There isn't a function in the mathematical sense, no, as functions always produce the same result given the same input
07:23:34 <pesco> Ok.
07:24:23 <Igloo> A nice way to do it would be to make a functino that calculates all the permutations as a list and uses Random to pick a random element from the list...I wonder if that is efficient
07:24:43 <pesco> Neat idea.
07:25:32 <Igloo> I think it's going to end up evaluating the first n when you ask for the nth, though
07:25:59 <pesco> Probably, how do you get from one permutation to the next?
07:26:08 <fullets> Would it be possible instead to calculate the number of possible P's, randomly select that one, then just calculate that? or is my mathematical naivety showing?
07:27:03 <pesco> Oh, now I remember how to generate all the permutations...
07:29:44 <pesco> permutations xs = [ x:(permutations rest) | x <- xs ] where rest=xs\\x
07:30:05 <pesco> That's not correct, but you get the point.
07:31:10 <pesco> permutations xs = [ x:rest | x <- xs, rest = permutations (xs\\x) ]
07:31:38 <pesco> Is that correct?
07:33:40 <tinus> Igloo: thanks mate: join' xs ys = [union x y| x <- xs, y <- ys, (intersect x y) /= [] ]
07:33:44 <tinus> Igloo: it does all i want
07:33:51 <tinus> pesco: and thank you, too :)
07:34:32 <pesco> tinus: Ok, no problem.
07:35:20 <Igloo> Yeah, np  :-)
07:35:41 * Igloo stops being stupid and putting the concat i nthe wrong place
07:35:52 <Igloo> > p [] = [[]]
07:35:52 <Igloo> > p xs = concat [map (x:) ys | x <- xs, let ys = p (x `delete` xs) ]
07:37:06 <pesco> Er, yes.
07:37:36 <pesco> Forget what I said, forgot the map.
