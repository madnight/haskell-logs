07:47:41 <Usul> hey all
07:48:06 <Heffalump> hi
07:48:14 <Usul> sup?
07:53:19 <Usul> n'much i guess :P
07:54:19 <Heffalump> not really :-)
07:54:36 <Usul> :)
07:55:03 <Usul> So eh, you have time for a few questions? :)
07:55:16 <Heffalump> most likely, yes
07:55:25 <Usul> you happen to know SOEGraphics?
07:55:32 <Heffalump> 'fraid not
07:55:45 <Usul> then you cant help me with that :P 
07:56:00 <Logan> Whee, just did a presentation on a haskell paper.
07:56:02 <Usul> i was just wondering wtf it draws a line thicker when i give it a color :P
07:56:25 <Usul> cool Logan :)
07:57:00 <Igloo> Intensity equalising? </guess>
07:57:16 <Logan> It was fun.  You can get a lot of research mileage out of haskell.
07:57:24 <Logan> I should come up with some sort of thesis idea related to it.
07:58:28 <Heffalump> Haskell is almost entirely a research language atm anyway
07:58:37 * Logan nods.
07:58:57 <Logan> We went over a paper on asynchronous exceptions in Concurrent Haskell.
08:00:55 <Usul> we learn it at uni now :P
08:03:30 <Logan> I'd love to learn it well enough to be able to teach it.
08:04:52 <Heffalump> it's not hard
08:06:54 <Usul> grmbl
08:08:59 <Usul> you guys open for a problem?
08:09:32 <Heffalump> yep
08:10:04 <Usul> lets say i have this datatype:
08:10:04 <Usul> data Test   = Test | TestStart Int | TestEnd | TestList Int [Test]
08:10:15 <Heffalump> ok
08:10:32 <Usul> now i want function that from each TestStart to TestEnd makes a TestList
08:10:54 <Usul> so like [ Test, TestStart 3, Test, TestStart 5, Test, TestEnd, TestEnd, Test]
08:11:15 <Usul> becomes [Test, TestList 3 [ Test, TestList 5 [Test]]]
08:11:43 <Heffalump> nest [] = []
08:11:53 <Heffalump> nest (Test:ts) = Test:nest ts
08:12:06 <Heffalump> hmm, no, too simple
08:12:11 * Heffalump thinks about it a bit more
08:12:11 <Usul> :)
08:12:34 <Heffalump> nest' [] = ([],[])
08:12:55 <Heffalump> nest' (Test:ts) = let (nested,rest) = nest' ts in (Test:nested,rest)
08:14:05 <Heffalump> nest' (TestStart n:ts) = let (inside,rest) = nest' ts in let (nested,rest') = nest' rest in (TestList n inside:nested,rest')
08:14:22 <Heffalump> nest' (TestEnd:ts) = ([],ts)
08:14:34 <Heffalump> you might prefer those lets to be a where clause
08:14:40 <Heffalump> try that, completely untested :-)
08:15:20 <Heffalump> oh, and nest ts = let (result,rest) = nest' ts in if rest=[] then result else error "badly nested Test"
08:15:46 <Usul> j33t :)
08:15:49 <Usul> let me test it
08:17:48 <Heffalump> you might want a case for TestList on the left too, that should be just the same as for Test
08:19:19 <Usul> true
08:21:50 <Usul> or i just might place the Test case on the bottom and replace Test by t...so it catches anything that is not a TestStart or TestEnd? :P
08:22:10 <Heffalump> yeah
08:22:21 <Heffalump> does it work, then?
08:24:08 <Usul> yup
08:31:03 <Usul> is there a String to Int converter standard in the Prelude?
08:31:09 <Logan> read
08:31:45 <Usul> read? :P
08:31:55 <Heffalump> yes, in the Read class
08:32:00 <Igloo> Except you probably want to use reads
08:32:02 <Logan> read x :: Int
08:33:06 <Usul> hmm
08:33:26 <Usul> so i should be able to do read 10 ?
08:33:28 <Usul> err
08:33:31 <Usul> read "10" ?
08:33:40 <Heffalump> yes
08:33:52 <Igloo> If the type can be inferred
08:33:55 <Heffalump> but if you just have that on its own you'll need a type qualifier to say what result type you want
08:34:09 <Heffalump> cos read :: Read a => String -> a
08:34:11 <Igloo> But you really really probably want to use reads
08:34:34 <Usul> yeah i see..that was my problem :P
08:52:06 <Muad_UT> grmbl :P
08:56:26 <shapr> hi
09:02:00 <Guest1094345> now is this me or the stupid server? :P
11:19:14 <Logan> Damn, this article I want to read $20.
12:41:51 <|Fo|Ns> hi
12:42:26 <|Fo|Ns> anyone alive?
12:43:05 <smkl> ...
12:47:44 <Logan> Sure.
12:48:46 <|Fo|Ns> is there any kind of interrupts and signalling implemented in haskell?
12:51:10 <Logan> Yes.
12:51:28 <Logan> Look at Concurrent Haskell.
12:51:35 <Logan> And asynchronous exceptions.
12:51:44 <Logan> They're pretty straight-forward.
12:52:09 <Logan> http://www.haskell.org/ghc/docs/latest/set/sec-concurrent-libiface.html
12:52:22 <Logan> http://www.haskell.org/ghc/docs/latest/set/sec-concurrent.html might be better.
13:36:02 <|Fo|Ns> thanks
14:00:46 <Usul> heya all
14:02:27 <Usul> can i 'push' something in a tuple?
14:02:39 <clausen> what do you mean?
14:02:52 <clausen> (give an example of "before" and "after" perhaps?)
14:02:57 <Usul> like a i have a tuple of (a,b) and a var c, can i then easily place c before a and b?  like (c,a,b)
14:03:10 <clausen> well, the tuple (a,b) and (c,a,b) have a different type
14:03:38 <Usul> yeah :P
14:03:42 <clausen> but, you could do this, sure:
14:03:57 <clausen> growTuple (a, b) c = (c, a, b)
14:04:14 <Usul> i know.but there is no standard function for it? :P
14:04:24 <clausen> I doubt it
14:04:31 <clausen> it doesn't seem like a useful thing to do
14:04:45 <Usul> for me it is though ;)
14:04:54 <clausen> well, it's only one LOC...
14:05:10 <clausen> (BTW: why not use lists?)
14:06:55 <Usul> cause c, a and b are of different types
14:08:15 <clausen> it should be polymorphic though...
14:09:52 <|Fo|Ns> polymorphic lists?
14:10:17 <clausen> ah
14:10:26 <clausen> hmmm
14:10:43 <clausen> (that function should be polymorphic)
14:10:50 <clausen> anyway, that's an interesting problem
14:10:56 <Usul> hehe
14:10:56 <ChoJin> I am looking for a matrix/array library using monad (I need to update value inside the array)
14:11:04 <clausen> but, why do you want to have different types?
14:11:28 <clausen> ChoJin: monads aren't the only solution, BTW
14:11:43 <clausen> ChoJin: (you prolly know that)... you read "purely functional data structures"?
14:11:55 <clausen> anyway, I don't know where such a library is
14:12:12 <ChoJin> In fact I need to code a neural network, hence I need to update very frequently a Weight array (matrix)
14:12:56 * clausen hasn't tested out how fast persistent data structures are
14:13:00 * clausen a newbie in all this
14:13:01 <clausen> hehe
14:13:11 <ChoJin> so I am
14:13:19 <clausen> anyway, they'll never be as fast as "the monad way", I think
14:13:34 <clausen> so, are you likely to be updating the entire array?
14:13:43 <clausen> (are the arrays big?)
14:14:45 <ChoJin> well in neural networks they often are
14:15:28 <ChoJin> I cannot generate a new array
14:15:34 <ChoJin> it is really too slow
14:15:42 <clausen> hmmm, ok
14:15:50 <ChoJin> because I need to loop a lot to make the network converge
14:15:53 <clausen> a lot of this depends on how good the compiler is, etc.
14:16:01 <clausen> so, I don't have much practical knowledge here :/
14:16:09 <clausen> yep
14:21:18 <Usul> grmbl
14:22:24 <Usul> how can i easly sort a list of tuples of (Int,String,Int)? sorting by its first int , then string
14:23:53 * clausen doesn't understand why lists aren't polymorphic in haskell
14:24:12 <Usul> clausen, cause of it being a functional language probably :)
14:24:20 <clausen> well, it seems doable
14:24:24 <clausen> to implement them
14:24:26 <clausen> polymorphically
14:24:35 * clausen tries to implement lists manually, and see what happens...
14:28:18 * clausen runs into the same problem
14:28:39 <clausen> hmmm
14:28:44 <clausen> perhaps if I relax the constraints...
14:29:12 <clausen> doesn't let me! :(
14:33:27 <clausen> Usul: anyway, are there just two types?
14:33:34 <clausen> Usul: you could just define your own lists like this:
14:34:32 <clausen> data List = StringNode [Char] List | IntNode Int | Tail
14:34:40 <clausen> or, perhaps have a metatype
14:35:32 <Usul> :P
14:35:39 <Usul> thats the hard way i think :P
14:35:48 <clausen> data MetaType = MInt Integer | MChar Char
14:35:53 <clausen> no, it's simple
14:36:05 <clausen> then, you can define comparisons, etc. on MetaType
14:36:09 <clausen> and use the usual list functions
14:36:37 <clausen> (ugly as hell, but works!)
14:37:15 * clausen suspects a lot of the problems here are due to haskell trying to keep it's type-system "decidable"
14:37:42 <clausen> (i.e. having a deterministic algorithm to do type inference)
14:38:35 <clausen> come to think of it
14:38:41 <clausen> hmmm
14:38:45 * clausen thinks about functors for a bit
14:49:26 <ChoJin> what "i:=u" does in haskell ?
15:00:10 <|Fo|Ns> ChoJin: nothing
15:01:57 <ChoJin> ?? I read this in a paper
15:03:06 <clausen> I suspect it's a monadic op or something
15:03:13 * clausen doesn't really grok all this 
15:03:16 <clausen> for arrays
15:04:10 <ChoJin> http://www.cs.chalmers.se/~johnsson/Papers/lazy-monolithic-arrays.ps.gz
15:04:24 * clausen reads
15:06:02 <clausen> it explains in the intro
15:06:19 <clausen> ChoJin: i := w is an index-value pair
15:06:23 <clausen> (i is the index, w is the value)
15:07:05 <clausen> (it's the philosophy of creating an array out of a list of associations i to w)
15:07:16 <clausen> (or should I say, "i := w" ;)
15:08:30 <clausen> grrr, it doesn't have a date on it
15:08:54 * clausen is VERY surprised it doesn't site okasaki's work
15:09:09 <clausen> the complexity analysis looks a bit superficial
15:09:16 <clausen> in light of okasaki's whole
15:09:35 <clausen> "persistence and laziness == amortized data structure"
15:09:45 <clausen> (I don't know if that was his idea, or just him writing about it)
15:10:04 <ChoJin> yeah sorry I didn't see it :)
15:10:15 <clausen> ChoJin: no worries :)
15:10:32 <clausen> reading papers on Funky Stuff TM is often difficult because there's lots of new stuff floating around
15:10:44 <ChoJin> its a pain, I don't find good array library
15:11:06 <clausen> isn't it part of the standard?
15:11:09 * clausen checks in hugs
15:11:35 <clausen> there is Array.hs in hugs
15:12:09 <clausen> they don't look monadic though
15:12:30 <ChoJin> array exist in haskell but not in monadic way
15:12:43 <ChoJin> http://www.haskell.org/~simonmar/lib-hierarchy.html
15:12:50 <clausen> ah, ok
15:12:53 <ChoJin> lib hierarchy from where ???
15:12:57 * clausen googles "monadic array"
15:13:30 <ChoJin> look at the url, its wierd, there are a lot of library but I don't find them
15:14:42 <clausen> http://www.pms.informatik.uni-muenchen.de/mitarbeiter/panne/haskell_libs/Binary.html
15:14:42 <clausen> ?
15:16:11 <ChoJin> let me look
15:25:19 <ChoJin> well for the moment it doesn't seem to compil, but I am tired, I will look tomorow :)
