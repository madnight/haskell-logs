01:42:53 <Logan> tmoertel comes in here sometimes, doesn't he?
04:47:03 <ski> hi !
04:50:04 <Heffalump> hiya
04:50:19 <ski> hi Heffalump
04:51:04 <ski> no discussion here it seems .. :(
04:51:26 <pesco> No, just the usual flood of join/part messages.. :)
04:57:09 <ski> join #bummi
04:57:32 <ski> oops
04:59:37 <Yurik> gene9: hi
05:30:28 <tinus> hello
05:30:37 <tinus> anyone using hugs in linux here?
05:30:40 <clausen> yep
05:30:57 <tinus> does your up/down key work?
05:31:00 <tinus> and the backspace?
05:31:03 <clausen> yes
05:31:13 <tinus> hmm, mine returns the raw string
05:31:16 <clausen> if yours doesn't, you probably didn't compile with readline
05:31:21 <clausen> (or, your distro didn't compile it, or whatever)
05:31:31 <tinus> hmm, i see
05:31:36 <tinus> and what about the backspace?
05:31:46 <clausen> prolly the same thing
05:31:47 <tinus> it seems to work in an xterm though, hmm
05:31:47 <Heffalump> same thing, or a terminal problem possibly
05:31:57 <tinus> what $TERM are you using?
05:32:15 <Heffalump> xterm :-)
05:32:23 * Heffalump tries it on a console
05:32:33 <tinus> yeah, using xterm here, also
05:32:38 <Heffalump> works fine for me with "linux" too
05:32:41 <tinus> ok, lemme try recompiling it
05:33:37 <tinus> any other options that are needed or handy?
05:34:42 * Heffalump --> check what Debian compile it with
05:36:35 <Heffalump> apart from changing a few directories to comply with distro policy, Redhat and Debian both just use --with-readline
05:36:55 <tinus> hmmkay
05:37:50 <tinus> still the same :/
05:37:57 <tinus> maybe it's my termcap
05:38:21 <pesco> Ew, termcaps are ugly!
05:38:36 <tinus> i know :/
05:38:43 <tinus> but what else could it be?
05:39:04 <pesco> True, it does smell like a termcap/terminfo problem.
05:40:06 <pesco> I don't know how readline works, it probably uses libterminfo...
05:40:44 <tinus> -lncurses
05:41:02 <tinus> that's where it gets it's characters from
05:42:01 <pesco> Oh, ncurses already, ok.
05:42:40 <tinus> can one set the ncurses stuff?
05:42:46 <clausen> on conectiva, everything worked out of the box :)
05:42:49 <clausen> apt-get install hugs
05:42:51 <clausen> oh well...
07:02:07 <tinus> anyone good at cryptic errors?
07:02:23 <Igloo> What is it?
07:02:45 <Igloo> Getting the error from another implementation often helps
07:02:58 <tinus> another implementation?
07:03:15 <tinus> oh, hmm
07:03:21 <Igloo> ghc/hugs/nhc98
07:03:34 <tinus> well, see
07:03:35 <tinus> i have
07:03:38 <tinus> type Bedeling = [(String, Bool)]
07:03:39 <tinus> and
07:03:44 <tinus> createCombi :: [String] -> [Bedeling]
07:03:52 <tinus> now, when i try:
07:03:56 <tinus> equivalent p p2 = (evalueer p (createCombi (getElements p))) == (evalueer p2 (createCombi (getElements p2))) 
07:03:58 <tinus> i get
07:04:04 <tinus> ERROR "/home/tinus/practicum/haskell/prop.hs":18 - Type error in application
07:04:04 <tinus> *** Expression     : evalueer p2 (createCombi (getElements p2))
07:04:04 <tinus> *** Term           : createCombi (getElements p2)
07:04:04 <tinus> *** Type           : [Bedeling]
07:04:04 <tinus> *** Does not match : [([Char],Bool)]
07:04:16 <Heffalump> should Bedling really be a list of pairs, or just a pair?
07:04:26 <tinus> a list of pairs
07:04:27 <Heffalump> and if the former, then should the result type of createCombi be a list of Bedlings?
07:05:06 <tinus> well, createCombi does exactly what is it supposed to do
07:05:11 <tinus> and that one is not the problem
07:05:11 <Heffalump> basically, either the result type of createCombi or the type of the second argument of evalueer is wrong
07:05:30 <tinus> evalueer :: Prop -> Bedeling -> Bool
07:05:36 <Heffalump> cos evalueer is expecting a Bedeling, and createCombi is producing a [Bedeling]
07:05:41 <tinus> yeah
07:05:52 <tinus> hmm, ok
07:06:00 <tinus> now i see the problem i think
07:06:15 <Heffalump> either that or you need to do something to convert from the latter to the former
07:06:59 <tinus> yeah, i will try recursion on the [Bedeling] list
07:07:02 <tinus> thanks
12:26:51 <Heffalump> what is it with French people wanting to download Haskell?
