03:03:13 <Logan> What does seq do?
03:06:34 <jewel> returns its second argument?
03:08:41 <Logan> Yeah, but what else does it do?
03:08:56 * Logan is trying to make a browseable haskell reference. :P
03:10:20 <Heffalum1> forces its first argument to be evaluated to WHNF
03:10:37 <Heffalum1> hence the definition of 
03:10:43 <Heffalum1> f $! x = x `seq` f x
03:10:54 <Heffalum1> $! is supposed to be strict application, where the argument is first evaluated to WHNF
03:11:50 <Logan> Thanks.
03:11:51 <Logan> Hmm.
03:12:10 <Logan> I'm starting to understand this monad thing better now.
03:12:23 <Logan> I fixed up a monadic parser library and used it to do some parsing.
03:12:40 <Heffalum1> cool
03:12:42 <Heffalum1> which library?
03:12:43 <Logan> So I can extract documentation I write and generate html files from it.
03:12:53 <Logan> The filename was pearl.hs
03:13:24 <Logan> By Graham Hutton and Erik Meijer, it was associated with the paper "Monadic Parsing in Haskell"
03:13:24 <Heffalum1> where'd you get it?
03:13:34 <Logan> It's made for Haskell 1.3, I think.
03:13:45 <Heffalum1> ah, ok
03:13:47 <Logan> I had fun just retyping it all and changing some stuff into Haskell 98.
03:13:54 <Logan> And verifying that it worked.
03:13:58 <Heffalum1> there's more modern stuff around, but you probably don't really care
03:14:07 <Logan> Tonight is the first time I've seen comprehensions used for monads besides lists.
03:14:16 <Logan> More modern stuff might be overwhelming. :P
03:14:19 <Logan> I'll look into it eventually.
03:14:26 <Logan> I'm trying to do something practical with it.
03:14:39 <Logan> I'm generating som ehtml from my docs, eventually I want to make it cross-referenced and indexed.
03:14:48 <Logan> (like every mention of a function will become a hyperlink to its documentation)
03:14:54 <Heffalum1> ehtml?
03:14:59 <Heffalum1> that sounds pretty cool though
03:15:08 <Logan> som ehtml => some html :P
03:15:13 <Heffalum1> oh, duh :-)
03:15:16 <Logan> I've decided that Haskell documentation sucks.
03:15:22 <Heffalum1> I'd like to see a good way of laying out Haskell code in HTML
03:15:23 <Logan> I don't know 90% of the functions that exist.
03:15:32 <Logan> Pretty-printing?
03:15:39 <Logan> Is there any sort of introspection for Haskell?
03:15:56 <Heffalump> not really, no
03:16:03 <Logan> I remember seeing some paper titles that mentioned pretty-printing, I should look at them sometime.
03:16:14 <Logan> http://aux.planetmath.org//logan/haskell/Prelude.html
03:16:17 <Logan> My test file so far.
03:16:28 <Heffalump> pretty printing to text isn't a major problem, but doing it to HTML is tricky because of multiple possible browser widths
03:16:29 <Logan> All it does is pull out the data I have and do some very basic formatting.
03:16:57 <Logan> I've been manually pretty-printing my code. *grin*
03:17:01 <Heffalump> your definition of id is missing a line-break
03:17:28 <Heffalump> I'm sure I've seen something else that documented the prelude somewhere
03:17:35 <Logan> Thanks, forgot my <pre>
03:17:44 <Logan> Heffalump: If you remember where, I'd like to know. *grin*
03:17:49 * Heffalump just looking
03:17:57 <Logan> My work may become redundant. :P
03:18:33 <Logan> Eventually this will have categories and all sorts of modules (not just the prelude)...
03:18:38 <Logan> With a nice TOC and index.
03:19:03 <Heffalump> http://www.cse.unsw.edu.au/~paull/cs1011/inbuilt.html but it's not comprehensive
03:19:06 <Heffalump> and not the one I remember seeing
03:20:34 <Logan> This looks like a reference my progrmaming languages professor has for MPC++ (functional programming by abusing C++ templates, borrows some stuff from the Haskell prelude).
03:20:52 <Logan> It's not very comprehensive.
03:20:56 <Logan> I want _everything_. :P
03:42:28 <DLid> i was just wondering if somebody could explain how length = foldr (\x n -> 1+n) 0 works?
03:42:43 <DLid> i know about foldr and what it does...
03:42:54 <Heffalump> do you know about \... ?
03:43:01 <DLid> i just dont understand the n -> 1+n in brackets
03:43:11 <DLid> yeah i know what \x is
03:43:25 <Heffalump> ok, so \x n -> 1+n is shorthand for \x -> \n -> 1+n
03:43:51 <DLid> oh right
03:43:55 <DLid> i think i get it now
03:44:01 <DLid> cheers
03:52:21 <Logan> Or, another way... the second argument to foldr is a binary function, that takes a value from the list we're folding as first paramter and the accumulator as the second argument.
03:52:37 <Logan> And returns a new accumulated value.
12:05:42 <DLid> hey, is there anywhere where i can download haskell scripts?
12:07:15 <Heffalump> what kind of Haskell scripts?
12:07:26 <DLid> tautology checker
12:07:28 <Heffalump> that's kind of like asking if there's anywhere you can download C programs...
12:07:37 <Heffalump> is this homework? :-)
12:07:46 <DLid> coursework :))
12:08:10 <DLid> dont matter :)
12:08:18 <DLid> im not into copying
12:08:32 <DLid> its just things get a bit frustrating when you cant get it to work
12:08:40 * Heffalump is happy to help with fixing code
12:08:51 <DLid> and im looking for an easy solution which isnt going to fix the problems
12:09:09 <Heffalump> is this a tautology checker for propositions?
12:09:16 <DLid> yep
12:09:26 <Heffalump> what's the representation of propositions you're using?
12:09:56 <DLid> ok... i dont really want you to tell me the answer but i just need to know where to start for the first excercie...
12:10:21 <DLid> ive been given a data Prop = Const Bool | Var Char | Not Prop and others and also type Subst = [(Char,Bool)]
12:10:52 <Heffalump> ok
12:10:55 <DLid> now i have 4 propositions, one of them being A (and sign) (not sign)A
12:11:03 <DLid> and i need to define these values p1 :: Prop
12:11:24 <DLid> but im just confused where to start and whats going on
12:12:13 <Heffalump> so you have to define A ^ (!A) as a proposition?
12:12:30 <DLid> yeah
12:12:36 <Heffalump> ok, so how would you define A?
12:12:55 <DLid> Var Char?
12:13:18 <Heffalump> that's the bit of Prop you'll need, but that's not quite how you'd do it
12:13:28 <DLid> im unsure how to write it
12:13:49 <DLid> i think i get the logic, its just how to write it down
12:13:52 <Heffalump> ok, a data declaration defines a number of constructors and the types that go with it
12:13:57 <Heffalump> IM with them
12:14:11 <Heffalump> so Const Bool means that there's a constructor Const that takes a Bool as a parameter
12:14:28 <Heffalump> so if you wanted to write "true" as a Prop, you'd say Const True
12:14:48 <Heffalump> because True is the value of type Bool that represents true
12:14:56 <DLid> ok
12:15:24 <Heffalump> does that help work out what to do with Var Char?
12:15:40 <DLid> hmmmmm :)
12:16:11 <Heffalump> do you have hugs?
12:16:32 <DLid> Var 'A'?
12:16:36 <DLid> yeah, i have hugs
12:16:36 <Heffalump> yep.
12:16:47 <Heffalump> it's quite useful for looking at the types of things
12:16:55 <DLid> oh right, ill do the rest of the question, cheers
12:17:52 <DLid> so for that example i would have p1  = And Var 'A' Not Var 'A'?
12:18:03 <Heffalump> you'll need some brackets in there
12:18:06 <Heffalump> but apart from that, yep
12:18:10 <DLid> ok, cheers
12:32:41 <DLid> hmm, im having a bit of trouble with the 2nd part, ive written some code but it doesnt work, could you check it out?
12:33:09 <Heffalump> sure
12:33:25 <DLid> ok.. i have to define a function vars :: Prop [Char]
12:33:39 <DLid> this calculates the list of variables in a proposition so...
12:34:13 <DLid> if i have A ^ (!A) there are 2 variables, 2 A's
12:34:28 <DLid> and it should give ['A','A']
12:34:34 <DLid> this is the code i have written...
12:34:43 <DLid> vars (x:xs) | isAlpha x = x : vars xs
12:34:51 <DLid> | otherwise = vars xs
12:35:21 <DLid> and also a base case vars [] = []
12:35:32 <Heffalump> how's it supposed to work?
12:35:43 <Igloo_> Why do you think it has type Prop [Char]?
12:35:56 <DLid> thats what im trying to figure...
12:36:14 <DLid> i used isAlpha x to take the first element from Prop
12:36:32 <DLid> if it is do x : vars xs
12:36:40 <DLid> else it skips that element and just does vars xs
12:39:01 <Heffalump> where did you get the type of vars from?
12:39:32 <DLid> im told vars :: Prop -> [Char]
12:39:36 <DLid> so it has to be that
12:39:43 <Heffalump> ok, that's a bit different to what you said up there :-)
12:39:57 <DLid> sorry?
12:40:17 <Heffalump> [20:33] <DLid> ok.. i have to define a function vars :: Prop [Char]
12:40:26 <DLid> oh sorry
12:40:32 <DLid> missed ->
12:40:49 <Heffalump> anyway, the definition you've written for vars would make sense (in some way) if it took a list of things as an input
12:41:02 <DLid> but its not a list!
12:41:04 <DLid> damn
12:41:56 <Heffalump> you can do pattern matching on Prop like you can on lists
12:42:38 <DLid> how do you mean?
12:44:09 <DLid> how would i be able to go through each element of the Prop A ^ (!A) ??
12:44:42 <DLid> actually, how would i use Pattern Matching?
12:47:14 <Heffalump> you know like you can write definitions of functions on lists that do different things depending on whether the parameter is a : or a []
12:48:48 <DLid> not sure about how to write it
12:49:14 <Heffalump> var (Const b) = ...
12:49:16 <Heffalump> would be one of the cases
12:49:19 <Heffalump> sorry, vars
12:49:23 <Heffalump> and for appropriate ...
12:51:04 <DLid> sorry i really dont understand :(
12:51:16 <DLid> i think i know how to use pattern matching
12:51:25 <DLid> but how to implement it
12:51:55 <DLid> im rather lost :( sorry
12:52:06 <Heffalump> the above is how you implement it
12:55:08 <DLid> something like vars (Var _)     = ['_'] ??
12:55:24 <DLid> i tried to use the _ but im not sure if that would work with ['_']
12:56:27 <Heffalump> don't use _ as a parameter
12:56:46 <Heffalump> sorry, IM argument
12:56:56 <Heffalump> unless you don't want to use the value in question at all
12:57:58 <DLid> what so just use vars (Var any_variable) = [any_variable] ?
12:58:53 <DLid> this code is just to get the general idea of how its working :)
12:58:57 <Heffalump> that would work, yeah
12:59:36 <DLid> cause that code would only work for one variable
12:59:55 <DLid> how would i tell it to go through the whole of Prop?
13:00:07 <Heffalump> ok, so you need to deal with the other cases too
13:01:05 <DLid> do i have to write code for each Prop, surely not?
13:01:09 <Heffalump> yep.
13:01:26 <DLid> and how do i add it all to one [Char] at the end?
13:01:43 <Heffalump> you use ++ to stick together lists of characters
13:02:13 <Heffalump> you don't need to write code for each possible Prop, but you need one line of vars for each of the possible ways a Prop can be built up
13:02:22 <Heffalump> i.e. each of the cases in the data statement
13:06:35 <DLid> still dont get it, to test it i do vars (Var 'aletter') will return "A" at the moment
13:07:27 <DLid> vars (Var a)     = [a]
13:07:31 <DLid> thats all ive got at the moment
13:08:03 <Heffalump> sorry?
13:08:55 <DLid> all ive got at the moment is the code vars (Var variable) = [variable]
13:09:06 <Heffalump> ok, so how would you write the case for a Const
13:09:24 <Heffalump> ?
13:09:26 <DLid> vars (Const variable) = []
13:09:39 <Heffalump> yep
13:09:48 <DLid> but couldnt i use vars (_ variable) = [] ? so it would deal with all other values?
13:09:59 <DLid> or do i have to write out each one?
13:11:11 <Heffalump> you have to write out each one
13:11:17 <Heffalump> but you need to treat an And differently
13:11:45 <Heffalump> because an And might have variables inside it
13:12:59 <DLid> same for Or, Imply and Equiv
13:13:10 <Heffalump> yep.
13:14:17 <DLid> how would i go around doing this?
13:14:37 <DLid> i have two variables to check now
13:15:00 <Heffalump> ok, but you can check them each separately
13:15:09 <DLid> yep...
13:15:26 <DLid> do i have to do some crazy if else statements or can it easily be written?
13:15:31 <Heffalump> it's easy
13:17:44 <DLid> hmm, still dont know how to write it!
13:18:04 <pesco> DLid: A bit OT, what college (?) is it that lets you learn Haskell? Just interested.
13:18:09 <Heffalump> ok, so what's the first bit of the definition?
13:18:21 <Heffalump> pesco: it's in a lot of undergraduate courses, iME
13:18:46 <pesco> iME?
13:18:55 <DLid> im meant to come from a good university in England
13:19:00 <Heffalump> I meant "IME" - In my experience
13:19:06 <Heffalump> DLid: what uni, btw?
13:19:08 <pesco> Heffalump: Really? I feel left out!
13:19:16 <DLid> nottingham
13:19:19 <DLid> you heard of it?
13:19:22 <Heffalump> ohh :-)
13:19:37 <xbill> nice
13:19:44 <xbill> lots of haskellers here now
13:19:56 <Heffalump> well, universities with functional programmers on the faculty tend to do it more than others :-)
13:20:03 <Heffalump> dlid: what year?
13:20:08 <DLid> 1st
13:20:10 <pesco> I did Prolog and Scheme.
13:20:22 <DLid> you heard of Nottingham?
13:20:26 <Heffalump> me? yeah.
13:20:34 <Heffalump> used to know people who do CS there
13:20:40 <DLid> and? :)
13:20:40 <DLid> really
13:20:54 <Heffalump> (but they've all left)
13:20:56 <DLid> its a good university :)
13:21:07 <Heffalump> I know Graham Hutton and Roland Backhouse too
13:21:42 <DLid> Graham Hutton is my lecturer
13:21:48 <DLid> Heffalump, you know him well?
13:21:56 <DLid> ive written vars (And (Var a) (Var b)) = [a,b]
13:22:12 <Heffalump> not brilliantly, no
13:22:24 <DLid> how do you know him, or do you know of him?
13:22:36 <DLid> is what ive written right?
13:22:40 <pesco> DLid: You need to recurse into the And's "child propositions"
13:22:47 <Heffalump> I do FP research (well, I used to, not really any more)
13:23:40 <DLid> pesco> explain more, im VERY new to haskell :)
13:23:59 <DLid> also...
13:24:22 <DLid> for statements like True && True = True i can then right _ && _ = False for all others
13:24:24 <pesco> DLid: OK, you have a Proposition p from which to extract all variable names it contains.
13:24:34 <DLid> cant i apply anything like this for my other statements which are wrong?
13:24:50 <DLid> pesco> yep
13:25:23 <pesco> A proposition is either Const, Var, And, Or, Equiv, or Imply, or something similar.
13:25:36 <DLid> just those, yes
13:25:44 <pesco> You handle all these cases by means of pattern matching.
13:25:51 <DLid> well Not as well!
13:25:52 <pesco> Something like:
13:26:06 <pesco> vars (Const ...) = ...
13:26:12 <DLid> yep
13:26:13 <pesco> vars (Var ...) = ...
13:26:16 <pesco> and so on.
13:26:34 <pesco> The Const and Var cases are obvious.
13:26:47 <DLid> but its different for And and others which contain Props
13:26:54 <pesco> Exactly. Now for the operators.
13:27:09 <pesco> Lets start with the simplest: Not.
13:27:33 <pesco> We have a proposition of the form (Not p) where p is another proposition.
13:27:43 <DLid> yep
13:28:09 <DLid> so need to test to see if p contanins any Var Char
13:28:21 <pesco> Now assume you know which variables p contains.
13:28:29 <pesco> call that list vs3
13:28:35 <pesco> s/vs3/vs./
13:28:55 <pesco> Then what variables does (Not p) contain? The same.
13:29:18 <DLid> hold on...
13:29:19 <pesco> How do you find the variables in p? By calling vars on it.
13:29:27 <pesco> ok.
13:29:57 <DLid> what do you mean by assume you know which variables p contain?
13:30:16 <DLid> oh right, i think i get it
13:30:47 <DLid> im not sure if this is right but vars (Not (Var a)) = [a] ?
13:31:05 <DLid> that would be the case when it did have variables in a
13:31:17 <pesco> No, don't say anything about the structure of the p in (Not p).
13:31:45 <pesco> You only deal with one level of constructors at a time.
13:32:00 <pesco> For the next level, you call vars again, recursively.
13:32:34 <pesco> At one point it will reach a Var or a Const. That's where the recursion stops.
13:33:12 <pesco> vars (Not p) = vars p
13:33:42 <pesco> Maybe think of it as simplifying the problem by one step.
13:33:53 <DLid> oh ok, ill try the others
13:34:42 <pesco> You see a negation and decide to look only at what's "inside" it.
13:37:05 <DLid> i dont know how to test the And function... in hugs i type vars (And A B)
13:37:11 <DLid> but that doesnt work
13:37:30 <pesco> Because it doesn't know what you mean by A and B.
13:37:51 <pesco> You mean vars (And (Var A) (Var B))?
13:38:20 <DLid> so testing i use vars (And (Prop A) (Prop B))
13:38:33 <DLid> and they say nottingham students are meant to be clever!!!
13:38:44 <pesco> No, there is no such constructor as Prop.
13:38:55 <pesco> Prop is the name of the type.
13:39:04 <DLid> see what i mean!
13:39:05 <pesco> The constructors for Prop's are Const, Var, And, ...
13:39:37 <DLid> Main> vars (And (Var A) (Var B))
13:39:37 <DLid> ERROR - Undefined constructor function "B"  
13:39:59 <pesco> Oh, err, of course.
13:40:09 <pesco> It still can't make sense of A and B of course.
13:40:20 <pesco> How's the Var constructor defined?
13:40:44 <DLid> i havent been told to right one
13:40:56 <DLid> so i dont have one, which kind of stuffs things up
13:41:18 <pesco> Hm? They did provide you with the definition of the data type, I'm sure.
13:41:25 <pesco> That's all there is to it.
13:41:38 <pesco> as in Prop = ... | Var .. | ...
13:41:41 <DLid> data Prop = Const Bool | Var Char etc
13:41:46 <pesco> s/Prop/data Prop/
13:41:49 <DLid> deriving Show at the end
13:42:04 <DLid> i need 'A' and 'B'
13:42:06 <pesco> Ah there, the Var constructor: Var Char
13:42:11 <pesco> exactly.
13:43:14 <DLid> how do i do this, kind of reduction, when there is two variables as in the And Prop Prop
13:43:41 <DLid> i need to take the 2 Prop variables and use vars on them, i get that
13:43:56 <pesco> right.
13:44:14 <DLid> i tried just vars p1 ++ vars p2
13:44:39 <pesco> That's the idea.
13:44:46 <DLid> but it didnt work
13:44:58 <pesco> Error?
13:45:00 <DLid> maybe it did!
13:45:11 <DLid> its cause i typed it in wrong beforehand!
13:45:14 <pesco> *g*
13:46:55 <DLid> i have deriving Show at then, what does deriving do?
13:47:06 <DLid> sorry, i have deriving Show at the end of...
13:47:08 <DLid> data Prop = 
13:47:14 <Heffalump> means that a function "show" is defined for Prop automatically
13:47:24 <DLid> ok
13:52:01 <DLid> dont give me any code or anything, i want to try and work this one out :) but could you explain what kind of stuff i would need to include to do this next function
13:52:27 <DLid> the function is clean :: Eq a => [a] -> [a] and it removes any duplicates of variables
13:52:39 <DLid> so if you have "ABBA" it reduces to "AB"
13:53:49 <DLid> any pointers?
13:55:37 <pesco> recurse by hand or use a fold
13:56:05 <DLid> recurse first of all, as is much easier
13:56:15 <DLid> im using lists so i would use clean (x:xs)
13:56:40 <DLid> then i need to check if there are any other occurences of x in ns otherwise continue clean xs ?
13:56:48 <Heffalump> yep
13:56:56 <DLid> and if there are any other occurences, remove them from that list
13:57:09 <Heffalump> might be easier just to not include x in the list
13:57:14 <DLid> or is that a difficult way?
13:57:14 <Heffalump> though either works
13:57:29 <Heffalump> about the same, really
13:58:26 <pesco> Right. Again, the recurring (*g*) principle with recursion is finding how to reduce the problem by some amount, and then apply the same algorithm again for the rest.
14:01:39 <DLid> would i use map in my code?
14:02:00 <DLid> hmm, no actually, dont think i would need to
14:02:05 <Heffalump> no, you wouldn't
14:08:59 <DLid> how could i check, taking the first value as x from the list, the rest of the list xs if there was another occurence?
14:09:12 <DLid> argh, im weakening
14:09:23 <Heffalump> how would you write a function that checked whether x was in the list xs or not?
14:09:39 <DLid> yep
14:09:46 <DLid> to put it in better english!
14:09:48 <Heffalump> no, *how* would you do it? :-)
14:09:53 <DLid> :)
14:09:59 <DLid> thats what im trying to figure!!
14:10:09 <Heffalump> ok, what if xs was [] ?
14:10:34 <DLid> it wouldnt do anything
14:10:52 <DLid> so the base case is [] = []
14:11:03 <DLid> got that
14:11:14 <xbill> x `elem` [] = False
14:11:42 <xbill> x `elem` (y:ys) | x == y = True
14:12:03 <xbill> x `elem` (y:ys) | otherwise = x `elem` ys
14:12:08 <Heffalump> xbill: I know you can write it, but that's not really the point here... :-)
14:12:22 <DLid> tut tut
14:12:27 <xbill> or foldr (||) False $ map (==x) xs
14:12:29 <DLid> im learning, i need time!
14:13:10 <DLid> what is `elem`?
14:13:21 <DLid> cant find it in my prelude
14:13:42 <DLid> ah yes, here it is...
14:15:14 <xbill> hmm... so it's not a binary yes/no answer.
14:15:24 <Heffalump> xbill: huh?
14:20:29 <DLid> instead ive used this code... but it seems to have gone backwards...
14:20:38 <DLid> clean (y:ys) | y `elem` ys = clean ys
14:20:45 <DLid> 	     | otherwise   = [y] ++ clean ys
14:20:49 <DLid> with base case [] = []
14:20:52 <Heffalump> that should work
14:21:04 <Heffalump> [y] ++ clean ys is just y:clean ys
14:21:08 <DLid> it works but if i type in "ABBA" it returns "BA"
14:21:15 <DLid> oh yeah
14:21:17 <Heffalump> isn't that what it's supposed to?
14:21:33 <Heffalump> oh, does the specification say it should always remove the second or following duplicates?
14:21:59 <DLid> for "ABBA" its meant to return AB, but mine returns BA
14:22:07 <Heffalump> are you sure it's meant to return them like that?
14:22:13 <Heffalump> what does the specification say, exactly?
14:22:36 <DLid> hmm this is strange, check this out...
14:22:43 <DLid> if i type in ABBA it returns BA... but
14:23:02 <DLid> if i type ABBAAABB it returns AB
14:23:15 <DLid> ah, its cause...
14:23:17 <Heffalump> it'll always leave in the *last* occurrence of every duplicated element
14:23:24 <DLid> yep
14:24:09 <DLid> so how do i get around this?
14:24:31 <DLid> just add reverse
14:24:40 <Heffalump> no
14:24:52 <Heffalump> does it specifically say that they have to come in a particular order?
14:25:20 <DLid> well it doesnt say a specific order, but for his example he has said "ABBA" appears as "AB"
14:25:28 <Heffalump> hmm.
14:25:47 <DLid> you see he may ask to use this function later on
14:25:51 <DLid> ill just leave it for the moment
14:26:00 <Heffalump> if you definitely want that answer you'll need to do it the way you wanted to first - i.e. remove later occurrences of each element (sorry!)
14:36:03 <DLid> how would i print out the word False n number of times?
14:44:03 <DLid> the word replicate comes to mind
15:06:30 <xbill> mapM print $ take n (repeat "false")
15:06:48 <xbill> maybe mapM_
15:07:58 <Heffalump> take n (repeat x) = replicate n x
15:07:59 <Heffalump> I think
15:39:58 <DLid> anyone still awake?
20:52:29 <Logan> http://aux.planetmath.org//logan/haskell/function-index.html
20:52:40 <Logan> I love haskell... I just wrote a bunch of code, fixed it so it compiled, and it magically works.
22:00:42 <Logan> Awesome!  I have cross-references now!
22:24:49 <Logan> http://aux.planetmath.org//logan/haskell/Prelude.html to see how it looks.
22:24:58 <Logan> Lots of parsing hacks to clean up, soon as I read the Report. :P
23:28:06 <Logan> Hmm, found a typo in the prelude docs in the report.
23:28:12 <Logan> map :: (a -> b) -> [a] -> [a]
23:28:22 <Logan> I'm pretty sure that last [a] should be a [b]
23:28:46 <clausen> correct
23:41:59 <noz> howdy folks
23:42:21 <clausen> hi
23:42:35 <noz> :)
23:42:38 <clausen> another aussie!
23:42:47 <noz> there was a web page on the topic for custom Haskell libraries
23:43:08 <noz> are you a Melbournite?
23:43:17 <clausen> yeah
23:43:28 <noz> cool
23:43:32 <clausen> lots of haskell ppl in unsw?
23:43:35 <noz> been a while since I've been down there
23:43:36 <noz> lol
23:43:42 <clausen> (there's a few in cs.mu...)
23:43:48 <noz> it's the language for our COMP 1A class
23:44:01 <noz> so a few hundred people are doing it
23:44:02 <clausen> likewise
23:44:19 <noz> from browsing the web i've found it's really common in education
23:44:20 <Logan> I wish this school taught Haskell. :P
23:44:25 <noz> hehe
23:44:39 <noz> people in my tutorial are like: "If ONLY I have a while loop!"
23:44:53 <clausen> there is a while loop
23:45:01 <clausen> (until, IIRC)
23:45:04 <noz> i'm a beginner
23:45:06 <noz> i didn't know that :)
23:45:11 <clausen> but it's a bit different
23:45:15 <noz> we're concentrating on pure recursion and functionality
23:45:16 <clausen> it's a high order function...
23:45:24 <noz> i need help writing 2 functions
23:45:32 <noz> one to return an Int of the number of lines in a file
23:45:40 <noz> and another to retreive a specific line by number as a String
23:45:51 <clausen> well, you know how to read a file?
23:45:54 <noz> nope
23:46:02 <noz> i'm looking at the docco for IO lib now
23:46:17 <noz> getting some clases between functions between IO Strings and IO Handles and Handles
23:46:21 <clausen> IIRC do contents <- readFile "filename"
23:46:23 <noz> clashes
23:46:31 * clausen really should learn monads, etc. properly
23:46:44 <noz> what's a monad? :)
23:47:08 <clausen> how you do side-effects, etc.
23:47:14 <clausen> long story
23:47:23 <clausen> (and, since I don't know the whole story, I won't start it...)
23:47:24 <noz> and i need to write that as a function like countFile = contents (readFile "filename") ????
23:47:37 <clausen> well, once you have the contents
23:47:37 <noz> see i don't understand your bit of code at all
23:47:46 <Logan> Monads are incredible. :P
23:47:59 <clausen> it's just "length . lines"
23:48:08 <Logan> They are basically a model for representing many sorts of common computations.
23:48:23 <noz> so i read the file into a var 'contents'
23:48:26 <noz> and then 'length contents'?
23:48:43 <Logan> That'll give you the number of bites.
23:48:50 <noz> i need to fine the \n
23:48:57 <Logan> There is a lines function in Haskell, which takes a string and splits it into a list element at each newline.
23:49:10 <Logan> So (length . lines) contents may work.
23:49:12 <Logan> If you can get contents.
23:49:24 * Logan is putting together a Haskell function reference.
23:49:29 <Logan> Haven't gotten to lines yet.
23:49:37 <Logan> http://aux.planetmath.org//logan/haskell/
23:49:38 <noz> hehe
23:49:48 <noz> ok lines makes a list for each line
23:50:06 <Logan> It makes a list consisting of the lines that compose a string.
23:50:06 <noz> brb
23:50:08 <noz> give this a shot
23:50:20 <Logan> -- lines breaks a string up into a list of strings at newline characters.
23:50:20 <Logan> -- The resulting strings do not contain newlines.
23:50:41 <Logan> I'll probably get to adding documentation for lines et al. in about 15 minutes.
23:50:45 <Logan> I'm up at the folding functions now.
23:51:14 <noz> ok
23:56:02 <noz> i have:
23:56:14 <noz> where contents = (IO.readFile file)
23:56:16 <noz> and when i
23:56:20 <noz> lines contents
23:56:29 <noz> lines expects a String and it's getting an IO String ) :
23:57:13 <Logan> Yeah, you have to use monad constructs to deal with IO...
23:57:19 <Logan> For your purposes, this should work:
23:57:25 <Logan> do contents <- IO.readFile file
23:57:32 <Logan>    putStrLn (lines contents)
23:57:53 <noz> i'll try
23:58:03 <Logan> If you just want to return the number of lines, replace putStrLn with return
23:58:08 <Logan> But then your function will return IO Int
23:58:16 <Logan> (with the putStrLn, it returns IO () )
23:58:33 <noz> i can't use it then
23:59:17 <clausen> noz: you can't write a function that looks like:
23:59:23 <clausen> countLines :: String -> Int
23:59:31 <clausen> (where String is the file name)
23:59:36 * noz nods
23:59:40 <clausen> because reading from the disk is a side-effect
23:59:54 <noz> so that'll _force_ IO Int to Int?
23:59:55 <clausen> actually, there is unsafePerformIO
