04:05:10 <shapr> hei kaikille
04:07:53 <jewel> hei
04:11:30 <Usul> can i open a directory in haskell?
04:14:35 <shapr> coi djul
04:14:41 <shapr> Usul: yes..
04:14:51 <shapr> though I forget how.. lemme look at the library ref
04:15:59 <shapr> http://www.haskell.org/onlinelibrary/directory.html
04:16:09 <shapr> Usul: does that help?
04:16:37 <Usul> yup
04:16:38 <Usul> thankies
04:42:36 <jewel> coi
13:08:53 <Logan> How can I have mutable arrays with constant time lookup? :P
13:08:57 <Logan> (mutability is optional)
13:09:37 <Heffalump> IOArray?
13:09:48 <Logan> That in IOExts?
13:09:54 <Heffalump> think so
13:10:10 <Logan> Ok, thanks, I'll look at it.
13:10:46 <Logan> What I want is a list with constant-time indexing, primarily.
13:22:40 <Logan> Is there such a thing?
13:22:56 <Logan> Otherwise, I can't see any efficient way to compute the neighbors of a cell in a matrix.
13:23:02 <Logan> Unless I stored it as a graph. :P
13:23:12 <Logan> (which would require 5 times the memory)
13:23:15 <Heffalump> I thought IOArray does that
13:23:29 <Heffalump> ICBW
13:24:09 <Logan> Well, the documentation says nothing.
13:24:30 <Logan> I just presumed that since its polymorphic in the indexing type, constant time lookup would be difficult or impossible.
13:24:46 <Logan> Though I presume it'd be faster than list indexing, regardless.
13:27:02 <Logan> Also, I don't want to be constrained to the IO monad.
13:27:12 <Logan> I need a more generic state transformer.
13:28:02 <Logan> So I could make an efficient convolution function: convolve :: (Integral a) => [[a]] -> [[a]] -> [[a]], or something like that.
13:29:34 <Logan> There are some MArray and IArray types provided by ghc/hugs.
13:31:51 <Logan> Oh, I guess I see, there's no reason why Array itself can't be constant-time lookup, since Ix maps onto integers?
13:34:49 <Igloo> Does it? Looks like all you know is Ord is defined on an Ix
13:36:10 <Logan> It looks to me that an instance of Ix has to be mappable to integers.
13:36:32 <Igloo> Where are you getting that impression from?
13:36:39 <Logan> From its definition.
13:36:46 <Logan> Derived instance declarations for the class Ix are only possible for enumerations (i.e. datatypes having only nullary constructors) and single-constructor datatypes, including arbitrarily large tuples, whose constituent types are instances of Ix.
13:37:08 <Logan> Many (not all) enumerations map to integers.
13:37:32 <Igloo> That's just talking about derived instances though, isn't it?
13:37:57 <Logan> Yes, but look at this:
13:37:58 <Logan>     index b@(m,n) i
13:37:58 <Logan>         | inRange b i   =  i - m
13:37:58 <Logan>         | otherwise     =  error "Ix.index: Index out of range."
13:38:04 <Logan> That's the instance definition for Int.
13:38:43 <Logan> Which means that finding the kth value of an array indexed by Int _should_ be constant-time.
13:38:55 <Igloo> Ah, yes, OK, I hadn't looked at the type of index
13:38:56 <Logan> Since mapping that Int to k requires only some arithmetic.
13:39:09 <Logan> If you were indexing with Double, it'd be a different story, I guess.
13:39:35 <Logan> I'll try writing some image processing code, then.
14:32:02 <Logan> Hmm, this one approach I'm trying to read soething in will give me an IO [IO [a]]... what would make that an IO [[a]]?
14:32:34 <Logan> I guess I can apply an IO action to it.
14:35:42 <Igloo> sequence will help a bit, but I don't know of a standard function for m m a -> m a OTTOMH - you probably just want to use sequence or similar elsewhere in your code, though
14:36:09 <Logan> Yeah, I might have to do this a different way.
14:36:33 <Logan> But when reading a raw image, I need to map a function that reads a row of the image over the height of the image.
14:36:56 <Heffalump> you shouldn't end up with nested monads, really
14:37:08 <Logan> So that'll give me an [IO a]
14:37:16 <Heffalump> sequence will deal with [IO a]
14:37:16 <Igloo> Once you have the image data you can call a pue functino on it
14:37:18 <Logan> Er, [IO [a]]
14:37:30 <Logan> Ok, sequence makes that IO [[a]]?
14:37:42 <Logan> I got confused momentarily. :P
14:54:31 <jadrian> hi
16:12:14 <Logan> How can I convert a Word8 to an Int?
16:12:24 <Logan> Nvermind.
16:13:45 <Logan> Woah...
16:13:47 <Logan> Compiling Image            ( Image.hs, interpreted )
16:13:48 <Logan> *** Exception: coreSyn/Subst.lhs:387: Non-exhaustive patterns in function zip_ty_env
16:15:34 * Igloo sighs
16:17:00 <Heffalump> I think that's technically known as a bug in ghc
16:17:52 <Igloo> And YA good example of why warnings are a good thing and should be fixed  :-)
16:18:35 * Heffalump has a suspicion that in this case all that would mean is putting in a default error case
16:18:55 <Heffalump> since zip_ty_env seems like it's likely to be a function that does something relatively general
16:19:35 <Igloo> Just something that pointed at where in the source it was dealing with would make producing minimal test cases easier
16:20:09 <Heffalump> huh?
16:20:32 <Heffalump> OIC
16:20:39 <Igloo> Well, I guess whether that is sensible depends on what it does
16:20:49 <Heffalump> the proper solution to that is probably to handle that exception
16:21:27 <Igloo> You can't, can you?
16:21:37 <Logan> I got rid of that exception by replacing a t ype alias I had with what it was aliasing.
16:21:38 <Heffalump> depends how much of the compiler runs under IO
16:21:50 <Heffalump> what version of ghc?
16:22:06 <Logan> Ah, ok, it was a type that was supposed to be given an argument, I think I forgot the argument.
16:22:13 <Logan> 5.02-1
16:22:14 <Logan> (from Debian)
16:22:29 <Logan> yeah, I left off the argument.
16:23:06 <Igloo> Still shouldn't have broken like that  :-)
16:23:18 <Heffalump> that's old enough that it's reasonably likely to have been fixed by now
16:26:51 <Logan> Well, downloading 5.02.2-1
16:31:12 <Heffalump> anyone used hsc2hs?
16:36:55 <Igloo> I have, but I didn't do anything very interesting with it
16:37:41 <Heffalump> did you manage to use #def?
16:38:38 <Igloo> I think I just ran it on what the GHC tarball comes with
16:39:21 <Heffalump> ah
16:44:54 <Logan> Ok, I have a fun question:
16:44:58 * Heffalump gets hello world working
16:45:47 <Logan> clamp :: (Bounded b) =>  a -> b, where the value returned is the value of type a, constrained within the bounds defined by type b
16:46:05 <Logan> E.g., (clamp 300) :: Word8 should evaluate to 255
16:46:17 <Logan> (I'm trying to use the type system to my advantage)
16:46:24 <Logan> I can't figure out how to specify it, though.
16:46:49 <Logan> If the first argument gets converted to the result too soon, overflow will occur before I can clamp it.
16:46:59 <Igloo> Well it's unimplementable as specified AFAICS
16:47:25 <Igloo> Do you want an Integrable a, Integral b in there or something?
16:47:31 <Logan> Probably.
16:47:38 <Logan> Integrable?
16:47:52 <Igloo> That's my brain wanting to be in bed
16:47:58 <Logan> We can presume a and b will be Integral types.
16:48:09 <Logan> So I will probably have those constraints present.
16:48:44 <Igloo> I don't remember anything guaranteeing that truncation will work how you want automagically, and I'm fairly sure in Word16 -> Word8 for example it won't
16:49:42 <Logan> Yes... I know 300 :: Word8 will be 44
16:49:50 <Logan> Which is why I need to clamp before the conversion.
16:50:46 <Logan> I don't see a way to get the return type of the function, so I can make minBound and maxBound be of that type, before using those values to apply min and max to the input value before converting it to the return value type.
16:50:51 <Igloo> Well the obvious way to write clamp would be to use toInteger, compare against maxbound :: b and then fromInteger
16:51:17 <Logan> Yeah, but maxBound :: b means a different b than used in the type signature of the function, doesn't it?
16:51:31 <Logan> Actually, I'm just making assumptions about the scope of type expressions here.
16:53:07 <Igloo> Hmmm, you appear to be right
16:54:12 <Logan> So when I say minBound :: b in the function, it has no effect, so minBound then gets forced to type a when it's used in an expression involving the value of type a.
16:54:14 <Igloo> You could do something nasty like maxb = if True then maxBound else v   where v is the value returned
16:54:42 <Logan> Hmm...
16:54:47 <Logan> Well, I was tyinking of asTypeOf
16:55:06 <Logan> But I got     Occurs check: cannot construct the infinite type: a = a -> a                       
16:55:19 <Logan> I think because I have something circular going on...
16:55:25 <Logan> I say z is my return value.
16:55:33 <Logan> Then I say x and y are of z's type.
16:55:36 <Logan> THen I compute z from x and y.
16:55:40 <Logan> I don't know.
16:55:52 <Logan> Ohh.
16:56:10 <Logan> Haha, I fixed it. :P
16:56:17 <Logan> I'd made a different mistake with the last thing I tried.
16:56:35 <Logan> clamp :: (Ord b, Bounded b) => a -> b
16:56:35 <Logan> clamp x = z
16:56:35 <Logan>           where x = minBound `asTypeOf` z
16:56:35 <Logan>                 y = minBound `asTypeOf` z
16:56:38 <Logan>                 z = ((min x) . (max y)) x
16:56:44 * Igloo didn't know of the existence of asTypeOf
16:56:50 <Logan> Except I need to change a min to a max. :P
16:56:57 <Logan> Igloo: I didn't either, until I started typing up my function reference.
16:57:18 <Logan> http://aux.planetmath.org/logan/haskell/Prelude.html#asTypeOf
16:57:26 <Logan> It's cool.
16:57:31 <Logan> First time I've come up with a use for it.
16:57:51 <Logan> My revised definition:
16:57:51 <Logan> clamp :: (Ord b, Bounded b) => a -> b
16:57:52 <Logan> clamp x = z
16:57:52 <Logan>           where x = minBound `asTypeOf` z
16:57:52 <Logan>                 y = maxBound `asTypeOf` z
16:57:54 <Logan>                 z = ((max x) . (min y)) x
16:58:03 <Logan> I need to fix these other compile errors before I can test it, though.
16:59:19 <Igloo> My idea works anyway, so I'm happy  :-)
17:01:56 <Logan> I never understand what it means when I get "Inferred type is less polymorphic than expected"
17:02:42 <Logan> But I think my clamp definition doesn't work.
17:03:13 <Igloo> It means you told it that anything of some polymorphic type could be returned or taken as an argument, but when it infers the type of the function it finds it can't in some cases
17:04:02 <Logan> So it's sorta like when it tells you you need a Bounded b, except in this case it doesn't know what you need?
17:04:58 <Igloo> If you say foo :: a -> b   foo x = x   then you are claiming that if you give it an Int you can use the result somewhere a String is expected, but the inferred type (a -> a) doesn't allow that
17:05:11 <Igloo> And similarly with constraints
17:05:44 <Logan> Ok, hmm...
17:05:56 <Logan> There we go.
17:06:01 <Logan> Strategic placement of fromIntegral. (;
17:07:02 <Logan> I sitll get overflow with this definition.
17:08:01 <Igloo> You probably want   z = (fromInteger . max (toInteger x) . min (toInteger y) . toInteger) x
17:09:25 <Logan> Yeah.
17:09:29 <Logan> I got it to work. (:
17:09:34 <Logan> clamp :: (Integral a, Bounded b, Integral b) => a -> b
17:09:34 <Logan> clamp n = z
17:09:34 <Logan>           where x = fromIntegral (minBound `asTypeOf` z)
17:09:34 <Logan>                 y = fromIntegral (maxBound `asTypeOf` z)
17:09:37 <Logan>                 z = fromIntegral $ ((max x) . (min y)) n
17:09:46 <Logan> It's amazing how difficult that was to figure out. :P
17:09:52 <Logan> But now it makes sense.
17:09:59 <Logan> And is very useful!
17:10:50 <Igloo> Does that work if you do Word8 -> Word16?
17:11:13 <Logan> It shouldn't do anything (I hope) to the value...
17:11:34 <Logan> Image> clamp (128 :: Word8) :: Word16
17:11:36 <Logan> 128
17:11:55 <Logan> Image> clamp (1024 :: Word16) :: Word8
17:11:56 <Logan> 255
17:13:03 <Igloo> Hmmm, I'm not convinced it would work with Wordx where x isn't a power of 2, but that probably isn't an issue and I really should go to bed
17:13:39 <Igloo> Oh, that's not what I mean. Integers with range that isn't a power of 2
17:13:43 <Igloo> Anyway, night
17:13:50 <Logan> Why not?
17:14:04 <Logan> Let me try with an enum.
17:14:26 <Logan> Well, I'm not sure how useful that would be.
22:48:15 <TwoII> Hey.. Anyone alive ?
22:53:59 <clausen> yep
22:54:14 <clausen> coff's harbour, right?  (we've spoken already?)
22:54:33 <TwoII> er Probably .. :)
22:54:40 <TwoII> I haven't been in #haskell for weeks though
22:54:51 <clausen> it was a while ago, I think
22:55:02 <TwoII> Er, to define a function that takes 2 strings, and returns a bool ...
22:55:07 <TwoII> compareStrings :: String -> String -> Bool
22:55:22 <clausen> well, (==) should work
22:55:27 <clausen> compareStrings = (==)
22:55:28 <clausen> hehe
22:55:28 <TwoII> compareStrings (s,s1) = ...
22:55:34 <TwoII> heh
22:55:42 <clausen> you mean, manually?
22:55:42 <TwoII> no
22:55:44 <TwoII> compareStrings is a bad name for it :)
22:56:06 <TwoII> if i compare "abcd" with "ab", it should return True
22:56:17 <TwoII> if I compare "dabcd" with "ab" it should return false
22:56:23 <TwoII> (as examples)
22:56:33 <TwoII> anyway.. the problem is the logic of it
22:56:38 <TwoII> Its the definition of the function
22:56:43 <clausen> ah
22:56:48 <clausen> ok:
22:56:49 <TwoII> Term           : (s,s1)
22:56:55 <TwoII> Does not match : String -> String
22:57:00 <clausen> compare [] _ = True
22:57:03 <clausen> compare _ [] = True
22:57:05 <TwoII> sorry
22:57:10 <TwoII> The problem isn't the logic of it
22:57:12 <TwoII> ok
22:57:16 <clausen> compare (x:xs) (y:ys) = (x == y) and (compare xs ys)
22:57:17 <clausen> ?
22:57:20 <clausen> s/and/&&/
22:57:20 <TwoII> (typo i made)
22:57:55 <TwoII> compare [] _ = True
22:58:14 <TwoII> ah
22:58:17 <TwoII> I see
22:58:20 <TwoII> thanks :)
22:58:25 <clausen> :)
22:58:54 <TwoII> Is there a way to treat a string as a single er, "variable"
22:59:00 <TwoII> like compare x y = ...
22:59:38 <TwoII> using x,
22:59:41 <TwoII> rather than x:xs
23:00:09 <clausen> "parameter" is the word you want
23:00:13 <clausen> (or argument)
23:00:14 <TwoII> yeah
23:00:22 <clausen> anyway, "compare x y" is fine
23:00:33 <TwoII> compareStrings s s1 = ((take length(head(s)) tail(s)) == head(s))
23:00:47 <TwoII> I can see your solution is better, but just wondering why my old messy one didnt work
23:01:15 <clausen> hmmm
23:01:30 <clausen> well, you want (min (length s) (length s1))
23:01:34 <clausen> right?
23:01:43 <TwoII> min?
23:01:52 <TwoII> er
23:02:09 <TwoII> s1 is always equal or bigger than s :)
23:02:16 <clausen> why?
23:02:38 <clausen> anyway, the function you wrote is screwed
23:02:40 <clausen> it should ber:
23:03:08 <TwoII> please note, I am new to Haskell :)
23:03:10 <clausen> compareStrings s1 s2 = take l s1 == take l s2 where l = length s1
23:03:13 <clausen> something like that
23:03:23 <clausen> I'm not criticizing you, just your code ;)
23:03:28 <TwoII> :)
23:03:30 <TwoII> Thanks
23:04:25 <TwoII> Doing lexical analyiser for assignment.. Finished it except for keywords, which I tried to add using a little messy code at the end (that compareString function) :)
23:04:46 <clausen> aha
23:06:44 <TwoII> Recursion, except for simple applications, still gets rejected by my C-moulded brain :(
23:06:53 <clausen> hehe
23:07:08 * clausen has to force himself not to use recursion in C
23:11:35 <TwoII> I've been trying to learn Scheme to understand it.. But whenever I come to a hard problem (such as Permutations and Combinations)..
