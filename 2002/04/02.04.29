05:08:36 <tinus> hello
05:08:39 <clausen> hi
05:09:00 <tinus> is there an escape to prevent the error that i get when i do list !! 1, while list is only 1 element long?
05:09:19 <tinus> besides checking the list length
05:10:31 <clausen> hmmm
05:10:41 <clausen> you mean empty?
05:10:52 <clausen> I mean, !! 1 should work, if it has 1 element, right?
05:10:57 <clausen> (or does it count from 0?)
05:11:02 <tinus> counts from 0
05:11:30 <tinus> Prelude> ["test"] !! 0
05:11:30 <tinus> "test"
05:11:30 <tinus> Prelude> ["test"] !! 1
05:11:30 <tinus> "
05:11:30 <tinus> Program error: Prelude.!!: index too large
05:12:03 <Igloo> If I were you I'd write (!!!) :: [a] -> Int -> Maybe a
05:12:46 <tinus> Maybe a ?
05:13:21 <clausen> ah
05:13:31 <clausen> yeah, you could do that
05:13:33 <tinus> like:
05:13:34 <Igloo> Yes. See the library report for more details. Unfortunately I've got to go out now
05:13:42 <tinus> eerste = eerste'.words                                                                                                                            where eerste' (x:xs) = x                                                                                                                              eerste' []     = []                                                                                                                     
05:13:47 <tinus> eek, damn gpm
05:13:53 <clausen> it's obviously trivial to implement...
05:14:09 <clausen> (!!!) (x:_) 0 = x
05:14:11 <clausen> oops
05:14:21 <clausen> (!!!) (x:_) 0 = Just X
05:14:35 <clausen> (111) [] _ = Nothing
05:14:58 <clausen> (!!!) (x:xs) n = xs !!! (n-1)
05:15:49 <tinus> ah wow
05:16:54 <tinus> but then
05:17:13 <tinus> i get the error: Maybe [Char] does not match [Char]
05:17:28 <tinus> when doing: list !!! 1 == "test"
05:18:43 <clausen> what type signature did you use?
05:18:51 <clausen>  (!!!) :: [a] -> Int -> Maybe a
05:18:52 <clausen> ?
05:18:55 <tinus> yeah
05:19:09 <clausen> and how did you use !!!?
05:19:19 <clausen> (cut&paste your usage)
05:19:24 <clausen> (like, where did it complain?
05:19:28 <clausen> (there isn't any mention of char there!)
05:19:44 <tinus> color c | words c !!! 1 == "black" then ...
05:19:51 <clausen> ah
05:19:52 <tinus>      |otherwise ...
05:20:12 <clausen> you need to check if "c !!! 1" exists
05:20:19 * clausen no idea about precedence...
05:20:32 <tinus> dang, that's gonna downgrade my stuf :/
05:20:54 <clausen> hint: use "maybe"
05:20:55 <clausen> (a function)
05:21:00 <clausen> why don
05:21:03 <clausen> grr
05:21:09 <clausen> why don't you just check the length of the string?
05:21:23 <tinus> i am
05:21:24 <tinus> now
05:22:10 <tinus> can one nest guards?
05:22:40 <clausen> what do you mean?
05:22:43 <clausen> within a where clause?
05:22:50 <tinus> no, withing another guards
05:22:52 <tinus> no, withing another guard
05:22:56 * clausen thinks
05:23:07 <tinus> test c | length (words c) >1 | "bla"
05:23:16 <tinus>                         | otherwise ".."
05:23:22 <tinus>    | otherwise error ""
05:23:29 <tinus> like that, with the correct indenting :)
05:23:31 <clausen> dunno
05:23:34 <clausen> it looks ugly
05:23:35 <clausen> hehe
05:23:43 <tinus> better than if then clauses
05:24:06 <clausen> you should probably split up into several functions
05:24:12 <clausen> (what are you trying to do?)
05:24:44 <clausen> (BTW: you shouldn't need "otherwise error"...
05:24:53 <clausen> it will do that automatically, when it can't match anything)
05:25:51 * clausen off to sleep
05:25:52 <clausen> bye!
05:25:59 <tinus> bya
05:26:02 <tinus> and thanks
05:26:10 <clausen> :)
05:40:40 <Igloo> Huh?
05:40:53 <Igloo> You want xs !! 1 == Just "foo"
05:41:12 <Igloo> (probably)
05:42:23 <tinus> oh, well, i've defined my own !!! already
05:42:27 <tinus> this one works
05:42:36 <tinus> thanks anyways
05:43:10 <Igloo> I meant xs !!! 1 == Just "foo"
05:48:18 * Igloo disappears again
12:57:17 <Logan> !!!?
12:57:55 <Igloo> (!!!) :: [a] -> Int -> Maybe a, similar to (!!). See scrollback or logs for details
12:58:46 <Logan> Sorta of a !! that fails gracefully?
12:59:27 <Igloo> Yup
13:07:58 <Logan> I wrote this big image processing library in haskell.
13:08:00 <Logan> Well, not that big.
13:08:15 <Logan> It's kind of ugly in places and inefficient, but I might post it somewhre sometime.
13:10:46 <Igloo> What sort of image processing?
13:13:18 <Logan> Well, it can read and write PGMs and PBMs, and do a generalized Hough transform, and can do the Hough line transform and then plot the lines generated on an image.
13:13:28 <Logan> And some generic code in place for doing local operators, though I need to clean it up.
13:13:42 <Logan> And I tried implementing this edge-detection algorithm called SUSAN, which is partially in place.
13:15:08 <Igloo> What does a Hough transform do?
13:16:18 <Logan> I'm working on a good PlanetMath entry about it, but here's a good description: http://www.dai.ed.ac.uk/HIPR2/hough.htm
13:16:43 <Logan> Basically you parameterize some feature you're looking for (so, for an infinite line, you can describe it by rho and theta in a polar coordinate system)...
13:17:19 <Logan> You then iterate through each point you consider candidates for being part of that feature, and iterate th rough all but one of the parameters to solve for the last parameter, and then increment the value in your output image at the location described by those parameters.
13:17:23 <Logan> So the line transform generates a 2d image.
13:17:37 <Logan> Which is what those neat sinusoidal images are.
13:17:53 <Logan> Each point will generate a sinusoid when you iterate through all the possible angles for lines passing through it.
13:18:03 <Logan> If sinusoids intersect, they represent collinear points.
13:18:33 <Logan> So if you get really bright points in the transform image, you know that's a point whose coordinate gives the full description of a feature in the original image that contains lots of points.
13:19:09 <Logan> It's something cool I just learned the other day. :P
13:19:14 <Logan> For this project that's due tomorrow.
13:20:43 <Igloo> Cool
13:22:27 <Logan> I need to detect the edges of these blocks in this picture...
13:22:38 <Logan> And what would be perfect is a Hough transform for matching parallelograms. :P
13:22:57 <Logan> But that'd require 5 parameters, so I'd need an incredibly fast computer with tons of memory to actually perform that operation before tomorrow. :P
13:23:06 <Logan> And I wouldnt' even think of doing it in Haskell.
13:23:50 <Igloo> Why is it slow in Haskell OOI?
13:24:24 <Logan> Well, I don't know much about making things efficient in Haskell.
13:24:38 <Logan> I'm using mutable arrays when appropriate now, at least.
13:24:49 <Logan> But that's usually for building new images.
13:25:22 <Logan> But most C imge processing code consists of nasty pointer arithmetic tricks to rapidly look up values for functions and transform images.
14:15:34 <Logan> Damn, the Haskell wish list page doesn't work.
19:52:25 <Logan> ST exceptions are so uninformative.
