06:43:07 <shapr> hi guys
06:43:11 <Heffalump> 'lo
06:43:14 * shapr doubts there is a female on this channel
07:02:11 * jewel seconds that motion
07:02:32 <Heffalump> is having a motion about facts possible>
07:02:36 <Heffalump> s/>/?/
07:03:17 <jewel> is motion possible?
07:03:27 * jewel doubts that notion
07:03:31 <Heffalump> yes, it is
07:03:36 * Heffalump bounces. See, motion.
07:04:18 <jewel> didn't see it
07:04:34 <Heffalump> well you should look harder
07:05:15 * jewel examines the surface of the channel for any signs of female presence
07:08:45 * shapr laughs
07:08:56 <shapr> I like this channel.
07:19:47 * shapr bounces
08:11:25 <Heffalump> hmm, someone on the Haskell list seems to think having a Monad instance that doesn't satisfy the monad laws is a good idea
08:38:59 <shapr> I still don't know what the heck he's talking about
08:39:08 <shapr> but then, my monad grokking is only partial
09:14:21 <shapr> Heffalump: are you on TheWiki?
09:15:12 <shapr> guess not
09:15:21 * shapr creates a Heffalump page for the sheer evil of it
09:15:44 * shapr notes that Heffalump is already referenced at least once on TheWiki
09:21:21 <Heffalump> TheWiki?
09:21:57 <shapr> yah, TheWiki
09:22:02 <shapr> the original wiki
09:22:19 <shapr> http://c2.com/cgi-bin/wiki?IntentionalProgramming
09:22:31 <shapr> I ended up not creating a page for you, seemed impolite
09:23:51 <Heffalump> ah
09:24:42 * Heffalump tries to think about what he could put on a page about himself
09:25:22 <shapr> I could put stuff on your page.
09:25:24 <shapr> :)
09:25:33 <shapr> want me to?
09:25:41 <Heffalump> go on then, I can always fix it if I don't like it :-)
09:25:47 <shapr> yay!
09:28:24 <shapr> hm, that's all I can think of off the top of my head.
09:28:29 <shapr> I should put in your homepage url probably.
09:29:31 <shapr> this is the best one?
09:29:32 <shapr> http://web.comlab.ox.ac.uk/oucl/work/ganesh.sittampalam/
09:29:54 <shapr> oh, must mention your Erdos number... but you'll have to remind me what number it is.
09:29:57 <shapr> I keep forgetting.
09:31:54 <Heffalump> that's the best one for my work stuff
09:31:56 <Heffalump> 3
09:32:11 * Heffalump has fiddled a bit
09:32:12 <shapr> aha
09:32:27 <shapr> heh :)
09:32:28 <Heffalump> since I haven't worked *on* (as opposed to *with*) Haskell or SML
09:32:51 <shapr> ah, ok.
09:33:04 * shapr bounces
09:33:16 <shapr> yay, I get to add you to my list of "people I know on irc" on ShaeErisson
09:43:01 <shapr> now if I could only persuade Igloo to try using a wiki...
11:26:23 <Heffalump> 'lo
16:36:21 <clausen> jadrian: kra!
16:36:26 <jadrian> hi clause!
16:36:28 <jadrian> hi clausen
16:36:30 <jadrian> :)
16:37:06 <clausen> haskell na veia!
16:37:16 <jadrian> any of you as any experience with eveolutive (genetic preferably) programming
16:37:22 <jadrian> sim sempre
16:37:23 <jadrian> :)
16:37:37 <clausen> jadrian: a little, but I'm Young and Naive TM
16:38:19 <jadrian> clausen: I was thinking that F.L. seem appropriate for Gen. Programming (first order functions are pretty handy)
16:38:33 <clausen> hmmm
16:38:42 <jadrian> I was just thinking about how to handle non-terminating generated programms
16:38:43 <clausen> yeah, hadn't occurred to me before
16:39:05 <clausen> well, they obviously should have a low fitness
16:39:11 <clausen> but, you need to kill them
16:39:21 <jadrian> yes... but how do you assign fitness to them
16:39:24 <clausen> 0?
16:39:32 <jadrian> no not that
16:39:34 <clausen> like, "non-terminating" == "death"?
16:39:45 <clausen> you mean the bureaucracy?
16:39:51 <jadrian> nah
16:39:52 <clausen> like, actually killing the "process"?
16:39:56 <jadrian> here is what I was thinking
16:40:24 <jadrian> you could generate a population of programs and actually create code and compile it to test them
16:40:31 <jadrian> but why do that
16:41:05 <jadrian> in FL you can actually have a binary tree of functions
16:41:12 <jadrian> that defines your program
16:41:20 <clausen> hmmm
16:41:22 <jadrian> and you can apply does functions 
16:41:51 <jadrian> the 1st example I saw had something like, 
16:41:53 <jadrian> operators:
16:41:58 <jadrian> repeat
16:42:10 <jadrian> - takes one bolean and another operator
16:42:24 <jadrian> (in haskell it is simply the until function)
16:42:29 <clausen> (feel free to email/dcc me code)
16:42:35 <jadrian> you really have that operator...
16:42:36 <clausen> yep
16:42:40 <jadrian> clausen: don't have it
16:42:44 <clausen> ok
16:42:45 <jadrian> I was just brainstorming
16:42:48 <clausen> yep
16:42:49 <clausen> makes sense
16:43:04 <jadrian> well I thougth I'd make a binary tree with functions
16:43:08 <clausen> so, what's your question?
16:43:24 <clausen> like, are you worried about stopping a program that is running too long?
16:43:32 <jadrian> ok I have the programs defined as binary trees of functions
16:43:33 <clausen> or, you want to restrict your language
16:43:38 <clausen> to make it not-turing-complete
16:43:38 <jadrian> need to assing fitness
16:43:49 <clausen> and make it impossible to write a non-terminating program?
16:44:01 <jadrian> I *need* to know the fitness of each generated program
16:44:05 <jadrian> if they do not terminate
16:44:14 <clausen> well, if it doesn't terminate, isn't it unfit, by definition?
16:44:20 <jadrian> yes
16:44:25 <jadrian> of course
16:44:33 <clausen> so, you give it a deadline
16:44:38 <clausen> and if it takes too long, kill it
16:44:42 <clausen> and give it fitness 0
16:44:56 <clausen> (no idea if this is possible in haskell, but it seems like the right strategy...)
16:45:08 <jadrian> yes that is where I wanted to get to... if there was a typical way to do it
16:45:21 <jadrian> yes that was the first strategy I thought of
16:45:27 <jadrian> but you just can't do it
16:45:31 <clausen> hmmm
16:45:35 <jadrian> if your function is pure
16:45:44 <jadrian> how will you stop it...
16:45:45 <jadrian> ?
16:45:47 <clausen> probably some monad thing
16:45:55 * clausen still doesn't grok that whole thing properly
16:46:03 * clausen still teaching himself category theory first ;)
16:46:13 <jadrian> you don't really need it
16:46:17 <jadrian> (although I studied it)
16:46:22 <jadrian> (and liked it)
16:46:28 <clausen> well, I've heard that, just category theory looks so interesting anyway ;)
16:46:41 <clausen> and, it'll prolly make things make more sense in the end anyway
16:46:42 <jadrian> yes I really liked it
16:46:58 <clausen> anyway, I suspect you'd write a function looking like:
16:46:59 <jadrian> maybe I didn't study monads 
16:47:01 <jadrian> :)
16:47:32 <clausen> limitTime :: a -> (a -> b) -> IO (Maybe b)
16:47:32 <clausen> ?
16:47:45 <clausen> oops
16:47:48 <clausen> need a time limit ;)
16:47:51 <clausen> add an Int ;)
16:47:57 <jadrian> eh it could be constant
16:47:59 <jadrian> :)
16:48:06 <jadrian> anyway... I don't think it is that easy
16:48:24 <clausen> well, implementing that would be a bitch
16:48:28 <jadrian> yes
16:48:32 <jadrian> that is the prblem
16:48:37 <clausen> some ghc guru can prolly do it
16:48:46 <jadrian> if you actually call the non term function 
16:48:56 <jadrian> and the function is pure
16:49:02 <clausen> well, presumebly you use some OS thing
16:49:06 <jadrian> how will it be stoped
16:49:07 <clausen> to invoke a signal handler
16:49:15 <clausen> and then the signal handler plays with the stack, etc.
16:49:21 <clausen> and returns "Nothing"
16:49:22 <jadrian> ok if you are gona use OS thing it had to be a separate prcess
16:49:29 <clausen> (imagine in C: setlongjmp())
16:49:35 <clausen> why?
16:49:52 <jadrian> ah that way it would be just to complicated :)
16:50:18 <clausen> I disagree
16:50:23 <clausen> I think it's equivalent to any other way of doing it
16:50:29 <jadrian> maybe concurrency could work... but I don't know if that is feasable in haskell
16:50:36 <jadrian> I don't know...
16:50:39 <clausen> hmm
16:50:41 <clausen> maybe another option:
16:50:45 <clausen> you are building your language
16:50:49 <clausen> out of few constructors
16:50:51 <clausen> or whatever
16:51:00 <clausen> anyway, perhaps those constructors can check the time
16:51:07 <clausen> and if it's past expiry
16:51:09 <clausen> return some kind of dummy
16:51:14 <clausen> so, evaluation automagically stops
16:51:18 <jadrian> mmm could be...
16:51:38 <jadrian> but that means no pure functions
16:51:45 <clausen> right
16:51:51 <jadrian> (anyway I guess I won't be really able to use them)
16:51:56 <clausen> but, I'm sure it's possible to capture that nicely
16:52:15 <clausen> (well, I think so...)
16:52:20 <clausen> like, you're not actually 
16:52:23 <clausen> "using haskell"
16:52:27 <clausen> in your generated programs
16:52:54 <jadrian> anyway, I still need to read more about it...(Evolutive Prgramming)
16:52:59 <jadrian> got to get some sleep
16:53:09 <jadrian> <-tired
16:53:14 <jadrian> see ya!
16:53:27 <jadrian> thanks for the ideas
16:53:28 <jadrian> ;)
16:53:29 <clausen> cya!
16:53:33 <clausen> boa noite!
16:53:34 <clausen> hehe
16:53:38 <clausen> (pq a gente fala em inglês :p)
16:53:40 <clausen> ?
16:53:40 <jadrian> boa noite ;)
16:53:43 <jadrian> eh
16:53:49 <jadrian> sei lá!
16:53:50 <jadrian> :)
16:53:56 <clausen> hehe, falou!
16:54:12 <jadrian> <- vai para a cama
16:54:15 <clausen> sozinho?
