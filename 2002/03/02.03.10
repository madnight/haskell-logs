04:00:34 <DLid> hi, is anybody here?
04:04:42 <DLid> i could do with some help please
04:13:52 * Heffalump is sort of around
04:16:27 <DLid> heffalump> could you help please?
04:17:57 <Heffalump> just say your problem
04:18:02 <DLid> ok...
04:18:21 <DLid> im trying to make a chop8 :: [Bit] -> [Bit]
04:18:27 <DLid> where type Bit = Int
04:19:38 <DLid> what i want is to take a list and if it is longer than 8 chop it to 8, if it is equal to 8 leave it the same, and if its less than 8 to add 0's to the end of the list so that it euals 8
04:19:45 <DLid> this is my code at the moment...
04:19:55 <DLid> make8      :: [Bit]  -> [Bit]
04:19:56 <DLid> make8 ms   =  if length ms > 8 then
04:19:56 <DLid> 	       make8 (init ms)
04:19:56 <DLid>               else if length ms < 8 then
04:19:56 <DLid>                take (8 - length ms)(repeat 0)
04:19:56 <DLid>               else
04:19:58 <DLid> 	       ms
04:20:18 <DLid> however, the length ms < 8 is wrong
04:20:20 <Heffalump> yeah
04:20:27 <Heffalump> you need to stick ms at the beginning
04:20:35 <Heffalump> of the list
04:20:35 <DLid> before take?
04:21:10 <DLid> what do you mean?
04:21:22 <DLid> ms:take (8 - length ms)(repeat 0)
04:21:24 <DLid> ?
04:22:23 <DLid> i dont know what to put
04:22:38 <Heffalump> : takes an element and a list and sticks them together
04:22:41 <Heffalump> what you need is ++
04:22:48 <Heffalump> which takes two lists and sticks them together
04:23:06 <DLid> oh right, cheers
04:23:18 <DLid> also, what would the base case be?
04:23:57 <Heffalump> base case in what sense?
04:24:26 <DLid> well, would there be a base case
04:24:40 <DLid> i thought you had to have a base case with a recursive function?
04:25:20 <Igloo> The base case is the else part of the first if - the second if isn't necessary
04:25:59 <DLid> also, is there a better way to ride this code using foldr?
04:26:56 <Igloo> Not using foldr, but you could write a much more concise version with take, repeat and ++
04:27:16 <DLid> what would that be?
04:27:50 <Igloo> take (8 - length ms)(repeat 0) == replicate (8 - length ms) 0 incidentally
04:28:13 <Igloo> take 8 (ms ++ repeat 0)
04:30:53 <DLid> do i need the first line?
04:31:03 <DLid> or just use take 8 (ms ++ repeat 0)?
04:31:04 <Heffalump> no, that's the entire body then
04:31:08 <Heffalump> yep
04:31:17 <DLid> cause i tried take 8 (ms ++ repeat 0) and i get an error...
04:31:30 <DLid> ah no i dont!
04:32:52 <DLid> thx for your help, greatly appreciated
04:40:31 <DLid> last question, im trying to define a function encode :: String -> [Bit]
04:40:53 <DLid> it takes each letter of a string and turns it into an 8-bit number
04:41:00 <DLid> i thought about using the ord function]
04:41:10 <DLid> but how would i do this, im a bit confused by it all?
04:50:29 <Heffalump> use map
05:48:48 <DLid> i have another problem...
05:48:53 <DLid> this is my code...
05:48:53 <DLid> encode        :: String -> [Bit]
05:48:53 <DLid> encode []     =  []
05:48:53 <DLid> encode (e:es) =  make8 (nat2bin (ord e)) ++ encode es
05:49:23 <DLid> can anyone tell me whats wrong with this?
05:51:36 <DLid> Heffalump, you suggested to use map beforehand
05:51:45 <DLid> is that better than the code i have (which works)?
06:16:32 <Heffalump> not hugely, no
06:17:15 <DLid> Heffalump, im in a bit of bother with another function im trying to define and finding it difficult, see if you can advise me please...
06:17:57 <DLid> you know yesterday i created nat2bin which took a number and turned it into a list of 0 and 1's (binary number)
06:18:02 <DLid> well now i need to create bin2nat
06:18:22 <DLid> which takes a binary list [1,0,1,1] and converts it into a number
06:18:31 <DLid> how could i do this using foldr?
06:18:36 <DLid> do you know?
06:19:41 <Heffalump> you should be able to do it with either foldr or fold depending on which way round the list is
06:19:44 <DLid> so [1,0,1,1] should give back the number 13
06:19:58 <DLid> the list is back to front
06:20:00 <Heffalump> it's generally easiest to write a recursive definition first, then work out how to change that into a fold
06:20:26 <DLid> how would i write the recursive definition, i know i would need the zip function
06:20:31 <DLid> but im having trouble working it out
06:23:22 <Heffalump> you shouldn't need zip
06:23:40 <Heffalump> what would bin2nat [] be?
06:54:41 <DLid> that would just return 0
06:54:50 <DLid> this is what code i have so far...
06:55:03 <DLid> bin2nat bs     = zip bs [2^x | x <- [0..]]
06:55:19 <DLid> so if i do bin2nat [1,0,1] at the prompt
06:55:22 <DLid> it returns...
06:55:27 <DLid> [(1,1),(0,2),(1,4)]
06:55:39 <DLid> so how would i multiply each tuple together?
06:59:13 <Heffalump> use map?
06:59:24 <Heffalump> you don't really need to do that zip at all though
06:59:35 <DLid> what would be a better way?
07:01:30 <Heffalump> well, suppose you've already calculated what [1,0,1] is
07:01:57 <Heffalump> then you can get the value for [1,1,0,1] by multiplying the value for [1,0,1] by 2 and adding the first 1
07:02:28 <DLid> so how would i construct this into code?
07:02:43 <DLid> so you are saying to use a recursive method
07:03:43 <Heffalump> yes
07:03:56 <DLid> how do i write this!?
07:04:35 <Heffalump> you said you know what bin2nat [] is
07:04:55 <Heffalump> now write bin2nat (b:bs) as something that uses b and bin2nat bs
07:05:08 <DLid> bin2nat [] should be 1
07:05:47 <Heffalump> 0 surely?
07:05:53 <Heffalump> you said that yourself
07:06:01 <DLid> 2^0 is 1
07:06:13 <DLid> shouldnt it?
07:06:26 <Heffalump> yes, but 0 * 2^0 is 0
07:06:37 <DLid> hmm, suppose
07:07:14 <Heffalump> [b0,b1,b2,...,bn] is b0 * 2^0 + b1 * 2^1 + ... + bn 2^n
07:07:33 <Heffalump> and if there's nothing then it's just 0
07:07:37 <Heffalump> ski!
07:07:41 <DLid> im still unsure what the right code would be :(
07:07:48 <ski> hi Heffalump !
07:08:22 <Heffalump> dlid: suppose you know what bin2nat bs is - what is bin2nat (b:bs) ?
07:08:54 <DLid> the b in bin2nat takes the first element of the list
07:09:02 <DLid> and bs is the rest of the list
07:09:17 <Heffalump> yep
07:09:37 <Heffalump> so how do you calculate bin2nat (b:bs) given the value of bin2nat bs?
07:10:29 <DLid> you would have to multiply b by 2^some_number then do this to the rest of the list recursively
07:11:10 <Heffalump> no, because b is at the front of the list
07:11:22 <Heffalump> and you said it's in reverse order of the binary digits
07:11:44 <DLid> this is where im getting lost
07:11:58 <DLid> i dont know how i could change this
07:12:22 <ski> DLid : do you want to just get a solution or do you want to understand how it works, and in that case : a direct recursive function or using higher-order foldr ?
07:12:50 <DLid> both :)
07:13:06 <Heffalump> I've run out of ways to explain it, perhaps ski could try
07:13:45 <Igloo> I think what you are missing is that b0 * 2^0 + b1 * 2^1 + ... + bn 2^n == b0 + 2(b1 + 2(b2 + ... + 2(bn-1 + 2 bn)) ... ))
07:13:48 <ski> so you have a list of bits ?
07:14:22 <DLid> yep, a list of bits
07:14:33 <DLid> and need to turn it into an int number
07:14:37 <Igloo> So given you have b0 and the rest of the list, what do you need to do?
07:14:45 <ski> and it's reverse order, i.e. [0,1,0,1] = 1010 = ten ?
07:14:51 <DLid> yep
07:16:48 <ski> well if you have a list [b0,b1,b2 .. bn] = 2^n*bn + ... + 2^1 * b1 + 2^0 * b0
07:17:36 * ski i writting from within ssh from home so i have a little problem to write some chars (have to paste them), slow ..
07:18:21 <ski> so you want to multiple first bit with 1 , next with 2 , next with 4 , and so on ?
07:18:33 <DLid> yep
07:19:01 <DLid> so bin2nat (b:bs) using bin2nat [1,0,1,1] would give b the first 1
07:19:14 <ski> so if you write a plain recursive function you have to somehow compute the corresponding 1,2,4,8,.. for each bit ..
07:19:16 <DLid> and this needs to be multiplied by 0
07:19:26 <Heffalump> ski: huh?
07:19:36 <ski> no !  by 2^0 = 1 !
07:19:50 <ski> Heffalump : what ?
07:20:13 <DLid> 1,0,1,1 = 13
07:20:13 <Heffalump> >> [15:19] <ski> so if you write a plain recursive
07:20:13 <Heffalump> >> function you have to somehow  compute the
07:20:13 <Heffalump> >> corresponding 1,2,4,8,.. for each bit ..
07:20:22 <Heffalump> ohh.
07:20:32 <Heffalump> no, s/ohh.//
07:20:38 <DLid> i said that first of all, but then Heffalump you said there was an easier way
07:20:56 <ski> Heffalump : wasn't the list reversed from the "standard" bit order ?
07:21:10 <Heffalump> ski: yes, so the least significant bit will be at the front of the list
07:21:16 <Heffalump> [15:20] <DLid> 1,0,1,1 = 13
07:21:27 <DLid> backwards that is
07:21:39 <DLid> 1,0,1,1 = 1101 = 13
07:21:59 <ski> Heffalump : oh yes, of course. i was thinking of an accumulator containing 1,2,4,.. to multiply with ..
07:22:35 <DLid> so using bin2nat [1,0,1,1] the b would return the very first value of 1 in the list
07:22:49 <Heffalump> ski: yeah, that was DLid's original solution
07:23:02 <Heffalump> no, actually, he used a zip
07:23:06 <Heffalump> but it comes down to the same thing
07:23:38 <ski> so if you want to write this with an accumulator, then you make a help function and call that with the accumulator initialized to 1 and then double it on each recursive call. is this like what you wanted ?
07:24:02 <DLid> i just wanted the easiest way
07:24:17 <DLid> and then i was going to try and turn it into a high-order foldr funciton
07:25:25 <DLid> so i need b * 2^0 which would be 1*2^0 then 0*2^1 then 1*2^2 etc
07:25:36 <DLid> i understand how it works, but am unsure how to right this in haskell code
07:25:43 <Igloo> "easiest" is rather subjective
07:25:57 <ski> well : 2^0 * b0 + 2^1 * b1 + ... + 2^(n-1) * b(n-1) + 2^n * bn = b0 + 2 * (2^0 * b1 + 2^1 * b2 + ... + 2^(n-1) * n)  ok so far ?
07:26:17 <DLid> ok, yeah i got that
07:26:44 <DLid> so b0 would be the b in (b:bs)
07:27:11 <ski> and that is = b0 + 2*(b1 + 2*(b2 + ... 2*(bn) ... )) (IIRC)
07:28:14 <ski> = b0 + 2*(b1 + 2*(b2 + ... 2*(bn + 0) ... ))
07:28:57 <ski> = b0 + 2*(b1 + 2*(b2 + ... 2*(bn b0 + 2*(b1 + 2*(b2 + ... 2*(bn + 2*0) ... ))
07:29:01 <ski> oops
07:29:14 <ski> b0 + 2*(b1 + 2*(b2 + ... 2*(bn + 2*0) ... ))  i meant
07:30:22 <ski> so we start with 0 and multiple by two and add each bit, starting with the most significant bit (in this case the last)
07:32:22 <ski> so this explains  foldr (\bi sum -> bi + 2*sum) 0 bits
07:32:58 <ski> it starts with 0 and then for each bit (from right to left) multiplies the sum by 2 and adds the bit
07:33:06 <ski> ok ?
07:33:54 <ski> bin2nat = foldr (\bi sum -> bi + 2*sum) 0
07:34:52 <ski> is this sufficient ?
07:39:51 <ski> anyone still here ?
07:40:05 * Igloo is
07:40:41 <ski> DLid perchance is testing out his program ..
07:40:41 * Heffalump too
07:40:51 <Heffalump> but we knew that result anyway :-)
07:41:00 <Igloo> :-)
07:41:44 <ski> i wondered if the explanation was sufficient or if he wanted more elaboration or other ..
07:42:22 <ski> well, has there been many discussions here recently ?
07:43:10 * ski can't stay too long here. modem costs ..  and others want to use the phone :(
07:43:51 <Igloo> I'd have thought broadband would be sanely priced in Sweden - most of teh rest of Europe seems to tend to be better than here - am I wrong?
07:44:24 <Igloo> And I haven't noticed too much recently - a bit on functors a while back but that's about all I remember
07:44:33 <DLid> sorry, i was just discussing it with some friends
07:44:39 <DLid> ill have a read of what you wrote!
07:45:19 <ski> Igloo : sadly i haven't broadband at home :-( (yet at least)
07:45:40 <ski> DLid : no problem :)
07:45:45 <Igloo> :-(
07:52:51 <DLid> could you write the recursive function for me so i can then look at it and work it out please
07:53:04 <ski> ok :
07:53:08 <DLid> if thats not too much hassle
07:53:14 <DLid> thx
07:53:22 <ski> (you want the accumulator one ?)
07:53:38 <DLid> yes please
07:54:05 <ski> bit2nat bs = helper bs 1
07:54:07 <ski>   where
07:55:04 <ski>   helper [    ] a = 0
07:55:30 <ski>   helper (b:bs) a = a*b + helper bs (2*a)
07:55:37 <ski> or something like that
07:55:46 <DLid> ok ill have a look, thx
07:55:58 <ski> i think one could also accumulate the sum if one wants
07:56:30 <Igloo> I'd say it came from
07:56:33 <Igloo> bit2nat [] = 0
07:56:43 <Igloo> bit2nat (b:bs) = b + 2 * bit2nat bs
07:57:29 <ski> yes, thats a accumulator-free version, good ! (it's equivalent to the foldr one i think)
07:59:37 <Igloo> Yeah - looking at the last line of that and of the definition of foldr should help see why the function folded is the correct one
08:00:02 <ski> yes, indeed.
08:09:16 <ski> well, i think i have to go now, bye
08:45:24 <Igloo> Hmmm, can anyone think of a way of making this generic in any way? cons_5_2 y (x1, ys, x3, x4, x5) = (x1, y:ys, x3, x4, x5)
08:46:26 <Igloo> I don't think I can make cons_2 a class with the instance (,,,,) being that in Haskell as I don't think the type system can handle it
08:50:48 --- topic: 'Have a library you'd like to donate, or one you'd like to see? Talk to us at http://sf.net/projects/haskell-libs/ | we be loggin' http://tunes.org/~nef/logs/haskell/ | welcome to the Haskell Dojo | julien is up to white belt! jewel and shapr are up to green belt!'
08:50:48 --- topic: set by shapr on [Wed Jan 30 14:36:17 2002]
08:50:57 <DLid> im creating a chop8 :: [Bit] -> [[Bit]]
08:51:13 <DLid> which takes each 8 bits and puts them into a list inside a list
08:58:34 <DLid> how could i do this!?
09:06:52 <DLid> i have...
09:06:52 <DLid> chop8         :: [Bit] -> [[Bit]]
09:06:52 <DLid> chop8 cs       = [take 8(cs)]
09:07:01 <DLid> but how would i get the next 8 values?
13:59:49 * Heffalump appears
14:00:41 <clausen> Heffalump!
14:00:46 <Heffalump> clausen! :-)
15:37:43 <clausen> DLid: sorry, my ISP died for a bit
19:35:59 <Bill`> is there a place where I can see some sample code?   I'm talking like really easy stuff....
19:36:30 <juhp> hello Bill`
19:36:40 <Bill`> hi
19:36:42 <Bill`> :o)
19:36:48 <juhp> anything in particular in mind?
19:37:04 <Bill`> maybe some math stuff
19:37:17 <Bill`> ?
19:37:52 <juhp> have you looked around http://haskell.org?
19:38:28 <juhp> there's links there to lots of stuff
19:38:35 <Bill`> hmmm, k...
19:38:48 <juhp> reading the Haskell Report is a good starting place too
19:41:29 <Bill`> hmm.... what benefits does haskell have over a more mainstream language?
19:41:55 <Bill`> like java or c++?
19:42:08 <Bill`> or even perl/python?
19:42:55 <juhp> over java and C++, it's more modern and powerful, since it's a functional programming language
19:43:53 <juhp> over scripting language, well it's strongly typed for a start and there exist both an interpreter and compilers
19:44:40 <juhp> also Haskell is beautiful IMHO, in the sense of Mathematical beauty
19:44:46 <Bill`> having interpreters and compilers is cool.... but I don't see what you mean by ""modern and powerful"  ?
19:45:00 <LoganH> Haskell has a wonderful type s ystem.
19:45:12 <LoganH> And is the best language I've seen so far for generic programming.
19:50:59 <juhp> yes, static type checking is powerful, and helps greatly to find most bugs at compile time not runtime
