04:06:55 <shapr> http://simpsons.tvcentral.com.ar/lifeinhell/lih9.gif
04:08:24 <Igloo_> :-)
04:08:44 <shapr> that's one for the graduate students ;)
04:09:00 <shapr> actually, that's one for me also, since I am without degree, and really wish I had one
04:09:21 <Igloo_> So apply to do one?
04:11:54 <shapr> yup
04:17:48 <Igloo_> What's the phrase like "transitive closure" which means only the ones you reach when you go as far as possible?
04:20:53 <shapr> eh?
04:22:34 <Igloo_> If 1R2, 1R3, 1R4, 2R5, 2R6 then the transitive closure of R on 1 is {1,2,3,4,5,6}. I want the word for the operation that gives {3,4,5,6}
04:23:19 <shapr> I don't know
04:23:26 <shapr> I didn't get that far in math
04:23:50 <Igloo_> OK
04:24:43 <shapr> could it be upward closure?
04:24:56 <shapr> written as "<="
04:24:58 <shapr> ?
04:25:42 <Igloo_> Hmmm, not sure. I think I'll just write it another way
04:25:43 <shapr>   transitive
04:25:43 <shapr>      A relation R is transitive if x R y  &  y R z  =>  x R z.
04:25:43 <shapr>      Equivalence relations, pre-, partial and total orders are all
04:25:43 <shapr>      transitive
04:26:40 <shapr>      2. <theory> In {domain theory}, given a {partially ordered
04:26:40 <shapr>      set}, D and a subset, X of D, the upward closure of X in D is
04:26:40 <shapr>      the union over all x in X of the sets of all d in D such that
04:26:40 <shapr>      x <= d.  Thus the upward closure of X in D contains the
04:26:40 <shapr>      elements of X and any greater element of D.  A set is "upward
04:26:40 <Heffalump> there isn't a word for it that I know about
04:26:40 <shapr>      closed" if it is the same as its upward closure, i.e. any d
04:26:42 <shapr>      greater than an element is also an element.  The downward
04:26:44 <shapr>      closure (or "left closure") is similar but with d <= x.  A
04:26:46 <shapr>      downward closed set is one for which any d less than an
04:26:50 <shapr>      element is also an element.
04:26:52 <shapr>      ("<=" is written in {LaTeX} as {\subseteq} and the upward
04:26:54 <shapr>      closure of X in D is written \uparrow_\{D} X).
04:26:56 * shapr floods
04:28:01 <Heffalump> maybe you could talk about the maximal elements in the transitive closure
04:28:37 <Igloo_> upward closure is sort of what I want but not for the standard definition of <=
04:28:41 <shapr> hi Heffalump!
04:28:52 * Igloo_ has just explained it in words, anyway
04:28:59 <Heffalump> no, upward closure just gives the transitive closure on <=
04:29:25 <Igloo_> Ooops, I misread it then
04:29:48 <Heffalump> well, by the definition above it does, certainly
04:31:48 <pesco> Igloo_: Can you elaborate how you got the {3,4,5,6} in your example above?
04:32:54 <Igloo_> pesco: 1 -> {2,3,4}. 2 -> {5,6}. Thus by following the relation as far as possible we get {5,6,3,4}
04:33:22 <pesco> Oh, ok.
04:34:07 <pesco> Just call them leaves. :)
05:12:45 <LoganH> http://planetmath.org/ :P
05:13:16 <LoganH> A relation [$ \mathcal{R}$]  on [$ A$]  is transitive if and only if [$ \forall x,y,z \in A$] , [$ (x\mathcal{R}y \land y\mathcal{R}z) \rightarrow (x\mathcal{R}z)$] .
05:13:22 <LoganH> That's not the clearest of entries on there.
06:58:30 <pesco> Can someone explain me how to use the ST monad that ships with GHC and Hugs?
06:59:15 <pesco> Their documentation appears to be very minimal...
08:32:40 <Ganesh> pesco: what do you want to do with it?
08:33:11 <pesco> Implement RC4
08:33:16 <pesco> :)
08:33:30 <Ganesh> ok, at a slightly lower level, what are you having trouble with?
08:33:31 <Ganesh> :-)
08:33:39 <pesco> Let me think for a minute...
08:34:32 <pesco> I don't know how to use the STRef stuff.
08:35:05 <pesco> In partuicular, what do STRefs type arguments mean?
08:35:10 <pesco> data STRef s a
08:35:17 <pesco> What are s and a?
08:35:57 <pesco> Also, in ST s a, I assumed s would be the type of my state but I'm not sure anymore.
08:36:50 <pesco> What's more, I'm confused by the statement
08:36:54 <pesco> runST              :: forall a. (forall s. ST s a) -> a
08:37:04 <pesco> What do the forall's mean?
08:37:40 * Ganesh is suffering connectivity issues so might disappear randomly
08:37:51 <pesco> ok
08:38:05 <Ganesh> s is a "dummy" variable which ensures that you don't mix up two different state computations
08:38:20 <pesco> hm
08:38:21 <Ganesh> which is what the inner forall does too
08:38:53 <pesco> I've never seen such a forall, but I'll take it as that right now.
08:41:46 <Ganesh> the "a" in STRef s a is the type of the state
08:41:58 <pesco> I see
08:42:07 <Ganesh> you can just ignore the s, essentially
08:42:25 <Ganesh> if you mix up STRefs between two different state computations, the type checker will complain at you
08:42:47 <pesco> Aha.
08:43:32 <Heffalump> the "a" in ST s a is the type of the x you get if you have a "x <- (something of type ST s a)"
08:43:46 <pesco> Ok, I thought so.
08:44:06 <pesco> Let me try to produce a simple example...
08:45:19 <pesco> As state, I want an array of Ints, and two Counters, i and j.
08:46:28 <Ganesh> right
08:46:30 <pesco> do s <- newSTRef (listArray (0,255) [0..255])
08:46:48 <pesco>   i <- newSTRef 0
08:46:54 <pesco>    j <- newSTRef 0
08:47:00 <pesco> correct?
08:48:51 <Heffalump> looks good
08:49:05 * Heffalump wishes his internet connectivity would behave
08:50:05 <pesco> wonderful
08:51:21 <pesco> Now, to increment i, I would have to do
08:51:48 <pesco>    modifySTRef i (+1)
08:52:05 <Ganesh> assuming modifySTRef exists, that sounds good
08:52:35 <pesco> This is starting to be fun. Yes, modifySTRef is mentioned in the docs, so it better exist!
08:52:44 <Heffalump> cool :-)
08:53:23 <pesco> Are you looking at the documentation? They say 
08:53:24 <pesco> data STArray s ix elt -- mutable arrays in state thread s
08:53:30 <pesco>  -- indexed by values of type ix
08:53:34 <pesco>  -- containing values of type a.
08:53:35 <Ganesh> oh, that sounds useful
08:53:37 <Ganesh> no, I'm not
08:53:44 <Ganesh> probably means values of type elt
08:53:51 <pesco> Thank you.
08:53:52 <pesco> :)
08:54:10 <pesco> What would elt stand for?
08:54:16 <Ganesh> element
08:54:21 <pesco> oh, ok.
08:54:53 <pesco> Great, thank you alot, I'll see if I can write my program now.
08:55:16 * pesco runs off to his other desktop
10:23:49 <pesco> A new question: Is it safe to assume that (255::Word8)+1 == 0?
10:48:49 --- topic: 'Have a library you'd like to donate, or one you'd like to see? Talk to us at http://sf.net/projects/haskell-libs/ | we be loggin' http://tunes.org/~nef/logs/haskell/ | welcome to the Haskell Dojo | julien is up to white belt! jewel and shapr are up to green belt!'
10:48:49 --- topic: set by shapr on [Wed Jan 30 14:36:17 2002]
