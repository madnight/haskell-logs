04:00:48 <DLid> what would the code be for taking a huge list of numbers and arranging each 8 numbers into a new list of type chop8 :: [Bit] -> [[Bit]] ??
04:01:34 <clausen> have a look at groupBy
04:01:43 <clausen> (or is it partition)
04:02:16 <DLid> cant i right a simple recursion method without this
04:02:37 <clausen> yep
04:02:57 <DLid> which would be?
04:03:08 <DLid> take 8()
04:03:13 <clausen> dunno
04:03:18 <clausen> I'm looking for the elegant solution
04:03:18 <clausen> hehe
04:04:28 <clausen> chop8 [] = []
04:05:01 <clausen> chop8 xs = [take 8 xs]:(chop8 (drop 8 xs))
04:06:13 <Igloo> YM chop8 xs = take 8 xs:chop8 (drop 8 xs)
04:06:29 <DLid> yep, last one, thought so
04:06:39 <clausen> oops
04:06:45 <clausen> yeah, the [...] are wrong
04:07:04 <clausen> my eyes feel sore without the brackets, though
07:13:27 <DLid> im trying to define a function decode :: [Bit] -> String
07:13:43 <DLid> and need to use...
07:13:45 <DLid> bin2nat       :: [Bit]  -> Int
07:13:45 <DLid> bin2nat        = foldr (\b sum -> b + 2*sum) 0
07:13:52 <DLid> so, what i have is...
07:14:04 <DLid> decode []      = []
07:14:04 <DLid> decode ds      = chr (bin2nat ds) ++ decode ds
07:14:24 <DLid> however, this is returning [Char] when it needs Char
07:14:27 <DLid> could someone help please
07:14:44 <Heffalump> String is [Char], though
07:15:00 <Heffalump> you probably need : not ++
07:15:07 <DLid> well its returning this error...
07:15:07 <DLid> Type checking
07:15:08 <DLid> ERROR "C:\Program Files\Haskell\course.hs":37 - Type error in applic
07:15:08 <DLid> ation
07:15:08 <DLid> *** Expression     : chr (bin2nat ds) ++ decode ds
07:15:08 <DLid> *** Term           : chr (bin2nat ds)
07:15:09 <Heffalump> and decode ds on the left-hand side should probably be decode (d:ds)
07:15:10 <DLid> *** Type           : Char
07:15:12 <DLid> *** Does not match : [Char]  
07:15:23 <Heffalump> yeah, so that's returning Char when it needs to be [Char]
07:15:25 <DLid> i tried : but then it just keeps executing \r until i kill the process
07:15:42 <Heffalump> that's because you said decode ds = something : decode ds
07:15:49 <Heffalump> so it'll just go round in circles running decode ds
07:15:54 <DLid> ok, so the decode ds should be infront
07:16:29 <Heffalump> no, you need to remove the bits that bin2nat will deal with before calling decode again
07:16:43 <Heffalump> probably something like decode ds = chr (bin2nat ds) : decode (drop 8 ds)
07:17:26 <DLid> i get this error
07:17:26 <DLid> *** Expression     : decode ds (drop 8 ds)
07:17:26 <DLid> *** Term           : decode
07:17:26 <DLid> *** Type           : [Bit] -> String
07:17:26 <DLid> *** Does not match : a -> b -> c   
07:17:56 <Heffalump> that's because you have an extra ds in there.
07:18:44 <DLid> so the line  decode [1,0,1,1,1,1,1,1] 
07:18:47 <DLid> no outputs...
07:18:51 <DLid> now outputs
07:18:57 <DLid> "\253"
07:19:09 <Heffalump> that sounds right
07:20:33 <DLid> now i also have a transmit function to see if all my code is right
07:20:43 <DLid> ive written the code...
07:20:44 <DLid> transmit      :: String -> String
07:20:44 <DLid> transmit ts    = decode (encode ts)
07:20:53 <DLid> where decode...
07:20:58 <DLid> decode        :: [Bit] -> String
07:20:59 <DLid> decode []      = []
07:20:59 <DLid> decode ds      = chr (bin2nat ds) : decode (drop 8 ds)
07:21:01 <DLid> and encode is...
07:21:06 <DLid> encode        :: String -> [Bit]
07:21:07 <DLid> encode []      = []
07:21:07 <DLid> encode (e:es)  = make8 (nat2bin (ord e)) ++ encode es
07:21:13 <DLid> i thought this would work
07:21:17 <DLid> but it doesnt...
07:21:27 <DLid>  transmit "Hugs"
07:21:28 <DLid> Reading file "C:\Program Files\Haskell\course.hs":
07:21:28 <DLid> "
07:21:28 <DLid> Program error: {primIntToChar 1936160072} 
07:21:52 <DLid> what does this mean, do you know?
07:22:30 <Heffalump> I think it means that you tried to convert an integer that was too big to a character
07:22:54 <DLid> why is it doing this?
07:25:25 <Heffalump> can you email the entire program to ganesh@earth.li ?
07:25:39 <Heffalump> I can't see any reason why it would be off the top of my head
07:26:05 <DLid> could i post you it on Priv MSG?
07:26:17 <Heffalump> I'd have to paste it line by line into a file then
07:26:25 <DLid> ok...
07:26:34 <Heffalump> .t
07:26:35 <Heffalump> oops
07:26:57 <Heffalump> that was meant to be a no.
07:27:14 <Igloo> It's beause decode is missing a take 8
07:27:15 <Heffalump> as in *don't* send it to me by private msgs.
07:27:23 <Heffalump> ohhh. duh.
07:27:28 <Heffalump> yes
07:27:49 * Heffalump had forgotten the definition of bin2nat and was assuming it did that itself
07:29:44 <DLid> so it would be
07:29:47 <DLid> decode ds      = chr (bin2nat (take 8 ds)) : decode (drop 8 ds)
07:30:06 <Heffalump> yeah
07:30:16 <DLid> cheers!
13:14:11 <Logan> Heh, I love the "Rationale" section here: http://www.perldoc.com/cpan/Gimp.html
13:41:25 <jemfinch> Logan: that's a Perl programmer.
13:41:59 <jemfinch> Anyone who programs Perl and thinks "Scheme is the crappiest language ever" has seriously mental issues.
13:42:17 <Logan> Hey, I program perl and think Scheme is one of the crappiest languages ever. :P
13:42:28 <jemfinch> well...
13:42:30 <jemfinch> :)
13:43:23 <Logan> A language that goes so far out of its way to avoid syntax that it ends up introducing syntax in unorthogonal ways.
13:43:34 <jemfinch> how does scheme do that?
13:44:22 <jemfinch> syntax (or the lack thereof) is really the only thing I especially like about scheme :
13:44:26 <jemfinch> er, :)
13:48:48 <Logan> So much syntax is missing at the most intuitive level (no keywords, no operators, no structures at all, just s-expressions) that, in order to actually attain any level of expressability, there have to be non-orthogonal "special forms" to make up for it.
13:49:31 <jemfinch> like what?  And what makes the special forms any more non-orthogonal than keywords in other languages?
13:49:45 <jemfinch> (also, do you perchance know SML?)
13:50:05 <Logan> So you end up having to remember the special forms, which are just as much syntax as, say, knowing if <conditional> then <expr> else <expr> in haskell.
13:50:17 <Logan> I'm vaguely familiar with it, but most of that familiarity is through haskell, I suppose.
13:50:41 <jemfinch> I'm just on a search to find out what "abstype" does.
13:50:49 <Logan> I figure if there's going to be grammar that has to be learned anyway (which I consider a good thing), you might as well get rid of these stupid, over-simplified s-expressions.
13:51:35 <Logan> You need a certain amount of grammar to be able to express most concepts, and scheme (like lisp) has grammar, it's just mostly in its special forms. :P
13:52:09 <Logan> I also dislike how much knowledge of the imperative underpinnings of the language you need to know to do some things.
13:52:14 <Logan> And how impossible it is to debug.
13:52:26 <Logan> But I'm mostly venting because I had to do a scheme program for class this week. :P
13:52:28 <jemfinch> Logan: I don't really agree with you.  I think Scheme has one of the most orthogonal syntaxes around (special forms and all) and I think their macros are pretty interesting.
13:52:39 <jemfinch> what are you defining as "special forms"?
13:53:23 <Logan> From the MIT Scheme reference:
13:53:25 <Logan> A parenthesized expression that starts with a syntactic keyword is a special form. Each special form has its own syntax, which is described later in the manual. The following list contains all of the syntactic keywords that are defined when MIT Scheme is initialized:
13:54:19 <Logan> I'm not saying the particular syntax they choose is bad; I'm saying that obscuring it all under a layer of s-expressions is a pointless design.
13:54:37 <jemfinch> do you mean special forms like set!, or define?
13:54:41 <Logan> I mean all of them.
13:54:50 <Logan> All 37 in this list.
13:55:05 <Logan> I think haskell shows how it can be done cleanly in a more conventional grammar.
13:55:11 <Logan> A human-readable and human-writable grammar. :P
13:55:14 <jemfinch> why is that syntactically strange?  Those special forms are not any different than keywords...
13:55:37 <Logan> What is strange is the usage of parenthesized list expressions for everything.
13:55:41 <jemfinch> People can write lexers and parsers for scheme *loads* easier than they can do the same for Haskell :)
13:55:48 <Logan> Of course.
13:55:59 <Logan> That's true of assemblers as well. :P
13:56:05 <jemfinch> Logan: it's the whole code-is-data thing, and it's what lets Scheme (or Lisp) have such flexible macro systems.
13:56:24 <Logan> Well, I'm not too familiar with the macros.
13:56:32 <jemfinch> there are a lot of things to dislike about scheme, but I don't think syntax is one of them.
13:56:45 <Logan> I'm just expressing a stylistic opinion that a programming language should be more like a natural language than a machine language.
13:57:15 <Logan> Else you completely lose the features of readability and writability that a programming language is intended to offer.
13:57:54 <jemfinch> well, for what it's worth, I think the large majority of programmers knowing neither Scheme nor Haskell would have an easier time reading Scheme :)
13:58:07 <Logan> I disagree. :P
13:58:27 <Logan> Although haskell can be written so that it's obscure, it doesn't have to be.
13:58:34 <Logan> While on the other hand scheme has to be written obscurely.
13:58:59 <jemfinch> no, I really don't think that's true.
13:59:03 <Logan> Once you teach someone all there is to know about s-expressions and special forms, _then_ they can read or write scheme, if they put a bit of thought into it.
13:59:15 <jemfinch> Logan: you seem to think they're a lot to learn about special forms!
13:59:21 <Logan> Maybe if you used lets and such generously enough.
13:59:32 <Logan> Not really.
13:59:40 <Logan> It's no more of a burden than any other language.
13:59:51 <Logan> It's the readability of the expressions with which you have to express everything that is difficult.
14:00:12 <jemfinch> give me some examples of hard to read Scheme, if you don't mind.
14:03:54 <Logan> Let me see if I can find a good example.
14:03:58 <Logan> The problem is that I can read them. :P
14:04:20 <Logan> The problem with readability and writability occurs when thinsg get really nested.
14:04:32 <Logan> With cars and cdrs all over the place.
14:04:42 <Logan> Especially when you're trying to work with some sort of data structure.
14:06:33 <Logan> This little function I had to write for this project illustrates a few problems...
14:06:34 <Logan> (define (play-round p)
14:06:34 <Logan>     (let
14:06:34 <Logan>         (
14:06:34 <Logan>             (strategies (map car p))
14:06:36 <Logan>             (histories (map car p))
14:06:39 <Logan>         ) (let
14:06:42 <Logan>             (
14:06:44 <Logan>                 (results (map (lambda (x) (play-strategy strategies histories x)) player-combos))
14:06:46 <Logan>             ) (map (lambda (x y) update-player results x y) p results)
14:06:49 <Logan>         )
14:06:52 <Logan>     )
14:06:54 <Logan> )
14:06:57 <Logan> The first problem is the difficulty of representing data in scheme.
14:07:03 <jemfinch> that's *really* strange scheme style, btw.
14:07:07 <Logan> I'd have to include comments specifying the structure of p.
14:07:18 <Logan> I'm sure it is, I've not written much scheme code.
14:07:48 <Logan> The other problem (and maybe it's because I don't know enough scheme), is that there's nothing as convenient as partial function application in haskell, so I have all these lambdas.
14:08:22 <Logan> What's so strange about it?
14:08:59 <jemfinch> well, for one, no one ever puts parens on a line by themselves :)
14:10:51 * Logan shrugs.
14:10:54 <Logan> That was pretty arbitrary.
14:11:08 <Logan> I had a hard time reading lets... It was hard for me to distinguish the bindings from the actually expression they are used in.
14:11:53 <jemfinch> well, without macros, I suppose it's hard to see the beauty of Scheme.
14:12:10 <Logan> I'd probably lose points if I used macros. :P
14:12:14 <Logan> I'm not sure I've seen a macro.
14:12:52 <jemfinch> let me note now that I don't ever code in Scheme :)
14:13:05 <Logan> Haha.
14:13:09 <Logan> Why not?
14:24:15 <jemfinch> I like strict typing too much :)
14:24:41 <jemfinch> I like functional programming, with real strict typing, algebraic types, immutable data structures, and so on.
14:25:31 <jemfinch> Macros and syntax aren't really enough for me to truly use Scheme.
14:25:45 <jemfinch> What I would *love* to see is an ML with a scheme-like syntax, with macros and all.
14:25:48 <jemfinch> *that* would rock.
14:28:32 <Logan> What does algebraic type mean?
14:29:22 <jemfinch> Sum types...like, "type 'a list = Cons of 'a * 'a list | Nil"
14:31:38 <jemfinch> what data types does Haskell offer?
14:33:12 <Logan> Enumerated types, lists, tuples, records, type constructors, not really sure what to call it all.
14:33:46 <jemfinch> Sum types in ML are basically tagged unions.
14:34:06 <jemfinch> and then you match on them (case, in Haskell) to mess with the inside.
