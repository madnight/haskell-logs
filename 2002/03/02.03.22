01:04:49 * shapr awakens
01:04:57 <shapr> g'morning fokes
01:05:03 <clausen> seen The Light?
01:05:25 <shapr> clausen: yes, now I have shades.
01:06:02 <clausen> woooow
01:06:09 <shapr> ?
01:06:30 <clausen> hmmm, postgres or mysql?
01:06:34 <clausen> which is better for learning?
01:06:44 <shapr> mysql isn't that good imho
01:06:50 <shapr> postgres is a realy database
01:06:53 <shapr> er, "real"
01:07:07 <clausen> that was my impression too
01:07:28 <shapr> I'd suggest learning postgres, and only enough mysql to port existing apps from mysql to postgres
01:07:29 * clausen thinks haskell's list comprehensions would be a cool way of doing databases
01:07:42 <clausen> I'm only learning from theoretical interest
01:07:44 <shapr> actually, someone wrote a SQL interface in haskell
01:07:47 <clausen> ("how does the real world work?)
01:07:53 <shapr> but you don't need any haskell... 
01:07:55 <clausen> can you do list comprehensions?!
01:07:59 <shapr> er, don't need any SQL, sorry
01:08:04 <shapr> I'm just waking up :)
01:08:07 <clausen> ;)
01:08:19 * clausen suspects not
01:08:27 <clausen> that would require translating haskell to SQL
01:08:40 <clausen> (since you want the request to execute on the server)
01:09:01 <shapr> right
01:09:04 <shapr> and they do that
01:09:13 <shapr> in a very spiffy manner
01:09:16 <clausen> ?!
01:09:26 <clausen> that's scary!
01:09:33 <shapr> and it's very cool too
01:09:40 * clausen wonders how they deal with lazy evaluation, etc.
01:10:48 * Yurik is away: I'm busy
01:10:59 * Yurik is away: I'm busy
01:11:16 * Yurik is back
01:18:45 <clausen> bit messy for my liking
01:19:10 <clausen> ROFL: high-order typed == "HOT"
01:27:36 <Heffalump> shapr: who did that?
01:27:44 <Heffalump> (the Haskell to SQL translation)
01:28:16 <clausen> www.google.com  :p
01:34:52 <Heffalump> errm... :-)
01:53:04 <shapr> oh did anyone find it again?
01:55:37 <shapr> http://haskell.cs.yale.edu/haskellDB/doc.html
01:55:45 <Heffalump> oh, that's were clausen got the HOT quote
01:55:52 <shapr> specific embedded compiler that dynamically generates of SQL queries from monad comprehensions
01:56:46 <shapr> clausen: well, you asked for it :)
05:50:09 <shapr> wheee
06:13:13 <shapr> hello everyone
06:17:52 <Yurik> shapr: hi
06:18:48 <shapr> hello Yurik!
07:38:42 --- topic: 'Have a library you'd like to donate, or one you'd like to see? Talk to us at http://sf.net/projects/haskell-libs/ | we be loggin' http://tunes.org/~nef/logs/haskell/ | welcome to the Haskell Dojo | julien is up to white belt! jewel and shapr are up to green belt!'
07:38:42 --- topic: set by shapr on [Wed Jan 30 14:36:17 2002]
07:38:42 --- names: list (clog jlb smklsmkl Muad_Dib Heffalump shapr Yurik jens dennisb arete_ Jiriki Igloo jewel)
07:41:05 <Muad_Dib> :P
07:41:24 <Heffalump> who what which when?
07:42:22 <Muad_Dib> nobody nothing never
07:44:03 <Heffalump> that's ok then
07:44:59 <Muad_Dib> is it? :P
07:51:37 <Muad_Dib> u long time haskell coder?
07:53:41 <Heffalump> a bit less than 4 years
07:57:47 <Muad_Dib> cool
08:20:29 <jewel> hey guys
08:20:37 <Muad_Dib> hi jewel
08:20:47 <Heffalump> blah. I'm incompetent. Writing a simple functional language interpreter should be trivial.
08:20:49 <jewel> Muad_Dib: you live in the desert?
08:21:03 <jewel> Heffalump: what are you attempting?
08:21:11 <shapr> hi jewel
08:21:28 <jewel> hello
08:21:35 <Heffalump> writing an interpreter for a very simple untyped call-by-name function language
08:21:36 <shapr> what's up?
08:22:13 <Muad_Dib> jewel, hehe
08:31:17 <jewel> Heffalump: for fun?
08:31:24 <Heffalump> no, work
08:35:16 <jewel> to do what?
08:35:19 <Igloo> A simple interpretter or just a simple language?
08:35:35 <Heffalump> both
08:35:42 <jewel> to do what?
08:35:45 <Heffalump> jewel: a strategy language for applying program transformations
08:35:52 <jewel> cool
08:36:10 <jewel> what kind of transformations? what kind of programs?
08:36:20 <Heffalump> .NET IL programs
08:36:34 <jewel> er, what is an IL program?
08:36:36 <Heffalump> various kinds - tree rewrites, graph rewrites using prolog side-conditions
08:36:41 <Heffalump> sort of like Java bytecode
08:40:52 <jewel> But you're transforming programs ? Or are you transforming bytecode?
08:42:36 <Heffalump> bytecode
08:49:57 <shapr> well f00
08:50:07 <shapr> this code doesn't compile
08:50:13 <Heffalump> but bytecode programs are programs too! :-)
08:50:18 <Heffalump> shapr: :(
08:51:08 <shapr> Heffalump: mind if I paste the error?
08:51:29 <Heffalump> sure
08:51:33 <shapr> /home/shae/src/haskell/GKSuffixTree.hs:32:
08:51:34 <shapr>     Cannot unify the type-signature variable `alf'
08:51:34 <shapr> 	with the type `[alf1]'
08:51:34 <shapr> 	Expected type: alf -> alf -> STree alf
08:51:34 <shapr> 	Inferred type: [alf1] -> [alf1] -> STree alf1
08:51:34 <shapr>     In the application `lazyTree edge_ast'
08:51:36 <shapr>     In the definition of `lazy_ast': lazyTree edge_ast
08:51:50 <shapr> I can't figure out what's up with this.
08:51:57 <Heffalump> let's see the code
08:52:14 <shapr> http://purl.olg/net/shapr/GKSuffixTree.hs
08:52:18 <Heffalump> it looks like you have a list where you meant to have a single element
08:52:25 <Heffalump> I'm sure .olg isn't a valid TLD :-)
08:52:29 * Heffalump uses .org
08:52:39 <shapr> oh, so it probably is a typo in my transcription from the paper
08:52:42 <shapr> yes, .org it is ;)
08:53:13 <jewel> (Heffalump: yes, they are, I'm using 'program' in the traditional 'source' sense)
08:53:33 <Heffalump> one of the type signatures of lazy_ast and lazyTree must be wrong
08:53:48 <Heffalump> unless lazy_ast is supposed to do some wrapping and unwrapping
08:53:53 <shapr> well, I get the same error for all three of lazy_ast lazy_pst and lazy_cst
08:53:57 <Heffalump> jewel: well, IL is so easy to decompile it might as well be source :-
08:53:57 <Heffalump> )
08:54:28 * shapr checks lazyTree again
08:54:46 <Heffalump> from the definition, lazyTree seems right
08:55:14 <Heffalump> since lazy_ast isn't actually used, you can change the type signature to fix the compilation problem with this module
08:55:23 <Heffalump> whether that'll break other modules is a different matter
08:55:27 <shapr> yah, it matches the source in the paper
08:55:39 <Heffalump> lazy_ast :: (Eq alf) => [alf] -> [alf] -> STree alf
08:55:42 <Heffalump> should fix the problem
08:56:29 <shapr> doh
08:56:35 <shapr> that's what the paper says!
08:56:39 <Heffalump> oh :-)
08:56:45 <shapr> for all three of those functions :)
08:57:02 <shapr> you're good Heffalump ;)
08:57:10 <shapr> I didn't even have to show you the paper...
08:57:17 <shapr> thanks!
08:57:24 <shapr> yay! it compiles!
08:57:26 * shapr bounces happily
08:57:33 <shapr> now I get to play with it!
08:58:36 <shapr> I strongly suspect I'm going to hack some of these type aliases into newtype calls so I can stick a Show on them
08:58:44 <shapr> hm, maybe I can just derive it?
08:58:46 * shapr tries
08:59:04 <Heffalump> you can't derive instances for type aliases
08:59:16 <Heffalump> but you might be able to stick a deriving on the underlying type
08:59:35 <shapr> hmm
09:01:11 <jewel> Heffalump: does IL stand for 'intermediate language'?
09:01:25 <Heffalump> yep
09:06:12 * shapr looks forward to Heffalump's first release of the java bytecode to IL bytecode compile
09:06:13 <shapr> r
09:06:37 <Heffalump> microsoft have done a Java to IL compiler, so you could just decompile Java bytecode to Java then run that
09:06:48 <shapr> whoa, nifty :)
09:06:53 <shapr> does it go the other way as well?
09:07:30 <Heffalump> I don't know of any C# to JBC compilers
09:07:42 <Heffalump> decompiling IL to C# isn't hard, though I haven't seen anything out there that actually gets it right yet
09:36:26 <jewel> is that compiler available?
09:38:14 <Heffalump> it's J#
09:38:24 <Heffalump> I'm sure it's on their website somewhere
09:38:29 <Heffalump> assuming you mean the Java to IL compiler
10:23:30 <shapr> wheeeeeeeeeee
13:21:01 * Yurik is away: 5 min
13:25:39 * Yurik is back (gone 00:04:37)
