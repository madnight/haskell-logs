03:53:43 * clausen is reading okasaki's book (purely functional data structures)... good book :)
06:56:10 <pesco> I'm having a performance problem.
06:56:38 <pesco> I had a function which worked well.
06:56:58 <pesco> Now, I made it polymorphic and I run out of stack space.
06:57:11 <pesco> Might the function not be tail-recursive any more?
07:58:40 <Heffalump> polymorphic using a type class?
07:59:01 <pesco> This is the type declaration:
07:59:19 <pesco> crc :: (Bits a, Integral a) => [Byte] -> a -> a
07:59:59 <pesco> Before I had used this:
08:00:22 <pesco> crc32 :: [Byte] -> Word32 -> Word32
08:01:05 <pesco> Also, after giving GHC a SPECIALIZE pragma for Word32, it works as before.
08:01:49 <pesco> However I'm wondering why the polymorphic function behaves differently.
08:03:39 <Heffalump> type classes work by passing around a dictionary at runtime
08:03:51 <Heffalump> but that shouldn't affect the tail-recursiveness
08:04:02 <pesco> Please elaborate about that dictionary.
08:04:33 <Heffalump> when you declare a type class you say what functions things in that type class must implement, right
08:04:34 <Heffalump> ?
08:04:47 <pesco> Right.
08:05:10 <Heffalump> those functions are packaged up in a dictionary for that type and passed as a parameter to other functions that use the type class
08:05:14 <Heffalump> s/other//
08:05:21 <pesco> Ah.
08:06:03 <pesco> So by giving a constraint on crc, It gets passed a function dictionary for classes Bits and Integral?
08:06:41 <Heffalump> yeah
08:06:58 <Heffalump> but I don't see why it'd affect tail-recursiveness
08:07:05 <pesco> Me neither.
08:07:26 <pesco> However, I'm just _suspecting_ the function not to tail-recurse any more.
08:07:53 <pesco> But a stack overflow certainly looks like it. Or what else could eat up a few megs of stack space?
08:09:00 <Heffalump> the trouble is GHC does weird stuff to optimise programs, which could be quite fragile
08:09:06 <pesco> Is there an easy way to determine whether the function is tail-recursive?
08:09:07 <Heffalump> in that a random change might stop an optimisation applying
08:09:10 <Heffalump> nafaik
08:09:16 <pesco> :/
08:09:43 <pesco> Do you think another compiler might do better?
08:10:40 <Heffalump> I doubt it
08:10:48 <pesco> I see.
08:11:00 <Heffalump> a simpler compiler would be more predictable by not optimising it in either case :-)
08:11:08 <pesco> Heheh
08:17:09 <Igloo> Are you using optimisation with GHC?
08:18:22 <pesco> Yes.
