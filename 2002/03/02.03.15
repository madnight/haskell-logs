05:21:54 <pesco> Here's a new question concerning the use of the ST monad:
05:22:18 <pesco> Again, I'm implementing RC4.
05:22:56 <pesco> Thus I have a stream of text bytes bs which I'll XOR with a stream of key bytes ks.
05:24:00 <Heffalump> right
05:24:01 <pesco> The stream of key bytes is (theoretically) an infinite sequence of numbers calculated by repeated execution of a certain algorithm within a state.
05:25:01 <pesco> Is there a way to lazily define this infinite key stream by means of a state transformer program?
05:25:16 <Heffalump> I think you'll need to use a lazy state monad
05:25:24 <Heffalump> I *think* the GHC one defaults to being strict
05:25:29 <pesco> I see.
05:25:50 <pesco> I'm not too firm on the terminology strict<->lazy
05:26:29 <pesco> I didn't quite know what they meant by a _monad_ being strict/lazy.
05:26:31 <Heffalump> in this case, I think what it means is that if you do a state computation, a strict state monad will immediately evaluate it enough to work out it's effect on the state
05:26:38 <Heffalump> s/it's/its/
05:27:05 <pesco> Yes. And a lazy one will wait until the new state is actuelly needed.
05:27:27 <Heffalump> yeah
05:27:34 <Heffalump> (I *think*, I'm not 100% certain about this myself)
05:27:55 <pesco> It sounds reasonable to me.
05:28:05 <Heffalump> looks like GHC does have the LazyST monad, anyway
05:29:39 <pesco> Yeah, and it sounds as it's the one I want. Thanks alot...
05:34:46 <Heffalump> just be careful you never require the final state from that key stream.. :-)
05:43:04 <pesco> what do you mean by final state?
05:43:53 <pesco> I'm not trying to output it all, if that's what you mean... :)
05:44:41 <Heffalump> no, but you said generating each element of the key stream modifies some state, right?
05:44:52 <Heffalump> do you need that state for anything ever again after you've finished with that key stream?
05:47:06 <pesco> no.
05:47:11 <Heffalump> that's good :-)
05:47:17 <pesco> I see.
05:47:26 <Heffalump> cos if you did, laziness wouldn't help you
05:47:43 <pesco> Right. That's what you meant by final state, ok.
05:48:22 <pesco> It's just a computation that is supposed to be done once for each byte, yielding a key byte in each iteration.
05:49:07 <pesco> Aw, LazyST doesn't offer modifySTRef. Why not?
05:50:36 <Heffalump> no idea. Shouldn't be hard to write, though
05:51:02 <Heffalump> modifySTRef v f = do x <- readSTRef v
05:51:08 <Heffalump>                  writeSTRef v (f x)
05:51:23 <Heffalump> with the layout correct and arguments put in the appropriate positions if they aren't already there
05:52:33 <pesco> :) Just did that on the other desktop...
05:55:43 <pesco> Ahww, it doesn't work. But it leaks space! :)
05:57:12 <pesco> woohoo!
05:57:15 * pesco bounces
06:02:25 <pesco> Can modules be reopened, like namespaces in C++, so I can add my modifySTRef inside the LazyST module?
06:03:41 <Igloo_> You can write a module LazySTm (module LazyST, modifySTRef) where import LazyST; modifySTRef = ...
06:03:59 <pesco> Yes, sounds good enough.
06:04:12 <Igloo_> Calling the same name might lead to qualification ugliness unless it's a function in a class, though
06:04:36 <Igloo_> s/Calling/Calling it/ (refering to modifySTRef)
06:06:44 <pesco> Hm.
07:22:59 <Heffalump> Igloo_: same name as what? 
07:23:14 <Heffalump> it doesn't matter if it clashes with the one from ST, since he can't possible have both imported unqualified at the same time
07:23:26 <Heffalump> since things like readSTRef and writeSTRef etc would clash
07:26:36 <Igloo_> Oh, if there are already clashes then ignore that
07:27:03 * Igloo_ wonders why there isn't an ST class in that case
07:47:12 <pesco> This is great, I'm really beginning to like this language.
08:50:39 <shapr> whee?
08:51:10 <Heffalump> 'lo
11:40:07 * pesco is away: Saufen
11:54:52 <YveDeLarc> hi
12:53:04 <shapr> hello
12:53:49 <shapr> <beep> you've reached the irc channel for the Haskell Programming Language. No one is awake right, but if you'd like to leave a message, we'll get back to you.
12:53:50 <shapr> ;)
13:08:03 <samx> haskell interpreter is busy interpreting your message. please come back tomorrow for the answer
15:29:21 * YveDeLarc grins.
15:29:53 <YveDeLarc> greetTheOthers :: IO IrcAction
15:30:43 <YveDeLarc> well. I'll check back again sometime. Have a good time.
