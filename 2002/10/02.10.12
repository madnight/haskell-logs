02:33:18 <andersca> hey Marvin--
02:34:51 <Marvin--> hullo
02:35:17 <andersca> Marvin--: I think I've got it now wrt to the type system notation
02:35:22 <andersca> Marvin--: had to introduce some extra functions though
02:36:50 <Jii> umh, it seems that a shopping mall relatively near us got bombed, urgh
02:37:07 <andersca> Jii: yeah, it sucks :/
02:37:23 <andersca> Marvin--: I couldn't use a general composition function, I had to special-case them for almost all statements
02:39:14 <Marvin--> andersca: uh?
02:39:30 <andersca> Marvin--: G |P- (s -> G');ss  <= (G |P- s) & (G' |P- ss) -- Statement composition
02:40:37 <Marvin--> andersca: it's easier to make the |P- relation ternary, so it always "returns" a new state
02:40:48 <Marvin--> then composition becomes trivial
02:41:24 <andersca> I suppose that's what I've had in mind. What's the notation for it?
02:42:33 <Marvin--> I think it's in the lecture notes and/or exercises
02:43:16 <Marvin--> hmm, or maybe they don't say much about imperative languages
02:43:31 <andersca> not really :/
02:43:40 <andersca> only thing I can find is
02:44:08 <andersca> G |P- s; p: G'' <= G |P- s: G' && G' |P- ss: G''
02:44:11 <andersca> maybe that's it :)
02:44:26 <Marvin--> well, it does look ternary, doesn't it? ;)
02:44:41 <andersca> :)
02:44:48 <Marvin--> "In the type environment G, (s;p) is type correct and turns G into G'' IF ..."
02:45:05 * andersca ponders
02:45:06 <andersca> yeah
02:45:18 <ludde> hello
02:45:28 <ludde> Marvin--: was there any AFP lecture yesterday?
02:45:56 <Marvin--> yes
02:46:18 <ludde> oh 
02:46:39 <ludde> the schedule showed "..", so I didn't think there was any :(
02:47:00 <ludde> what did he do?
02:47:53 <Marvin--> mainly he gave us the chance of asking questions, but he also showed another approach at implementing concurrency (different to A Poor Man's Concurrency Monad) with fork-join instead of fork
02:48:34 <ludde> was there a lot of people that weren't there?
02:49:09 <Marvin--> yes
02:49:13 <ludde> bleh.. now i destroyed my no lecture skipping record :/
02:49:56 <ludde> stupid of koen to write ".." on the schedule
02:51:04 <Marvin--> which is why you *find out* if there's a lecture instead of *assuming* there is none... sheesh
02:51:25 <ludde> well, I asked my friends, and they said there was no lecture.
02:52:01 <ludde> anyway
02:52:13 <ludde> I'm trying to do something in haskell.
02:52:44 <ludde> a CGI script library (I chose the Wiki thing as my project)
02:53:00 <ludde> so basically I want it to look like:
02:53:00 <ludde> mainpage = page "Enter your name" $ do
02:53:00 <ludde>   text "Please enter your name and press ok:"
02:53:00 <ludde>   form $ do
02:53:00 <ludde>     name <- textinput
02:53:00 <ludde>     submit (enteredname name)
02:53:02 <ludde> enteredname name = page "Hello $ do
02:53:04 <ludde>   text $ "Hello " ++ name ++ "." 
02:53:21 <ludde> i.e. the submit button has a "callback" mechanism that will call enteredname when the submit button is pressed.
02:54:25 <ludde> so I need to store the state of the function invocation as a string and send it to the browser in some way i guess. since the web server is stateless.
02:54:59 <ludde> do you understand what my problem is? any idea how to approach it?
02:55:33 <Marvin--> yes, the problem is that http sucks for doing stateful things :-)
02:56:15 <ludde> yes :)
02:56:20 <andersca> cookies!
02:56:37 <ludde> andersca: that is not really the difficult part, it's good enough to store the string as INPUT TYPE=hidden
02:56:53 <andersca> G |P- ((while e do s);ss):G <= (G |E- e: Boolean) & (G |P- s) & (G |P- ss) -- While statement
02:56:58 <andersca> so this is how the while statement would look
02:57:11 <ludde> andersca: but what I don't know is how to serialize the "(enteredname name)" so I can invoke it when I get the request for the submit button being pressed.
02:57:52 <Marvin--> andersca: you don't have to special case it, you have one (ternary) rule for what the while statement does to the environment, and just one compositional rule
02:58:00 <Marvin--> andersca: that *should* be enough unless you're doing some really weird trickery
02:58:15 <andersca> Marvin--: well, since you can have variable declarations inside of blocks
02:58:23 <andersca> I want to show that they're only valid inside of the block
02:58:26 <andersca> so you could do something like
02:58:28 <andersca> andersca: Integer;
02:58:30 <andersca> doh
02:58:38 <andersca> while True do: a: Boolean; end
02:58:55 <Marvin--> andersca: yes, then you write  G |P- (while e do s) : G  which says "this doesn't change the environment"
02:59:07 <andersca> ah
02:59:08 <andersca> makes sense
02:59:36 <andersca> so I basically say "all statements can change the environment" and then say "well, except these of course"
03:00:13 <Marvin--> the ternery relation says "statements possibly change the environment"
03:00:20 <andersca> nod
03:05:37 <ludde> I went to the programspråk "övning" yesterday, but it was full, so i went to the computer room next door, and 1h30 minutes I realized that it was lab room L and not I or J
03:05:49 <ludde> övning=labbtid
03:06:19 <Marvin--> doh
03:06:40 <ludde> so I got no help :(
03:07:30 <ludde> is ++ left or right associative?
03:07:47 <ludde> right I suppose? otherwise it would hurt complexity
03:08:25 <Marvin--> definitely right
03:20:41 <andersca> I need to specify if statements "on the right side" change the environment too, right?
03:47:31 --- mode: card.freenode.net set +oo Heffalump ChanServ
03:47:49 <ludde> what's the name of the function you can use put in functions, to indicate that they are not implemented yet, but will allow the program to be compiled
03:47:51 <andersca> undefined? 
03:47:54 <ludde> oh yeah
03:47:55 <ludde> thanks
03:48:09 <Marvin--> undefined | False = undefined <- hugs' definition of undefined
03:48:12 * shapr uses that one for HUnit
03:48:28 <Marvin--> forall a . a <- ghc's definition of undefined
03:49:35 <ludde> okay
03:49:53 <Marvin--> both are scary :)
03:50:03 <ludde> is it possible to make a list that can contain any type of its elements, using forall ?
03:50:24 <ludde> newtype AnyType = forall a. AnyType a
03:50:28 <ludde> and then [AnyType]
03:52:00 <Marvin--> I think that would mean you can't instantiate it at all
03:52:16 <Marvin--> because you can't unify it with anything
03:52:27 <ludde> hmm, ok
03:52:45 <Marvin--> yup: Cannot unify the type-signature variable `a' with the type `Char'
03:53:23 <ibid> i think that would require existential typing
03:55:42 <Marvin--> yes
03:56:10 * shapr wonders how to make an existential Angst type
03:58:46 <ludde> is there any way to call a haskell function by name?
03:59:00 <shapr> what do you mean?
03:59:06 <shapr> eval ?
03:59:14 <shapr> read :: FunctionName?
04:00:16 <ludde> for example if I have two functions, fun1 and fun2, i would like to call them using ("fun" ++ show i)
04:01:18 <shapr> the read function wants a type to read
04:01:23 <ludde> what I really want to do is to encode a function call into a string, so I can call that function using the string.
04:01:34 <ludde> can I use read on functions?
04:01:40 <shapr> I'm not sure
04:01:42 <shapr> you could try it
04:03:20 <ludde> testme :: String -> (IO Int)
04:03:20 <ludde> testme s = read s
04:03:28 <ludde> ERROR "f:\hw.hs" (line 172): Instance of Read (IO Int) required for definition o
04:03:28 <ludde> f testme
04:03:38 <shapr> oh
04:03:39 <o3> ludde: you can't call functions by name, no
04:03:51 <o3> ... but you can if you use the RuntimeLoader :D
04:04:01 <shapr> hi o3
04:04:03 <shapr> wassup?
04:04:04 <o3> (i'll explain after i get back, brb)
04:04:07 <ludde> o3: ok
04:06:34 <JC_freak> hi
04:06:39 <shapr> hi JC_freak
04:06:49 <JC_freak> i some help on a sorting problem
04:06:59 <shapr> what's the problem?
04:07:18 <JC_freak> i've generated a list of coordinates (sorted)
04:07:21 <JC_freak> eg
04:07:56 <JC_freak> [(2,1),(2,2),(1,1),(1,2)]
04:08:10 <JC_freak> now i have another list
04:08:38 <JC_freak> [(_ (1,2)),(_ (2,1)) ... etc]
04:09:01 <JC_freak> so i need to check each element with each element of the sorted coordinate list
04:09:21 <JC_freak> so i can sort the 2nd list according to the coordinates
04:09:45 <JC_freak> i'm trying to use filter
04:09:57 <JC_freak> but i'm not sure how i can compare the 2 lists
04:10:15 <shapr> you could use a list comprehension
04:11:22 <JC_freak> u mean something like [(x,y)|x<-[4,3..1],y<-[1..3]]
04:11:55 <shapr> I think you can also compare list items inside the list comp
04:12:05 <shapr> though I may have that confused with Python
04:12:44 <JC_freak> hmmm
04:13:06 <JC_freak> well would there be a way to just sort the list without comparing it to the sorted list
04:13:36 <shapr> how would you sort a normal list?
04:14:16 <JC_freak> use something like quicksort
04:14:39 <shapr> have you written a quicksort in Haskell?
04:14:47 <JC_freak> well not really
04:14:56 <JC_freak> i know how it works kinda
04:15:06 <shapr> have you written any kind of list sorting function in Haskell?
04:15:23 <JC_freak> small ones yes
04:15:37 <JC_freak> like sort 3 numbers 
04:16:04 <shapr> can you modify one that you have written to sort a list of [(_ (1,2))] ?
04:16:37 <JC_freak> hmmm
04:16:54 <Marvin--> uh, sorting three numbers isn't sorting a list
04:17:15 <JC_freak> yea its not
04:17:23 <JC_freak> i'd have to restructure
04:18:26 <Marvin--> why not just import List and use sortBy?
04:18:54 <JC_freak> ohh 
04:19:06 * shapr wanders off to play counterstrike
04:19:07 <Marvin--> sortBy :: (a -> a -> Ordering) -> [a] -> [a] or something
04:19:24 <JC_freak> would u mind giving me an example of how it might work
04:20:22 <Marvin--> uh, for example if I want to sort a list of pairs by comparing only the second argument...  sortBy (\(_,x) (_,y) -> compare x y) xs
04:21:56 <JC_freak> would i be able to compare both arguments of the pairs at once
04:28:55 <Marvin--> uh, pairs are in Ord if their elements are in Ord...
04:28:59 <Marvin--> (1,2) < (2,3) for example
04:32:58 <JC_freak> so (1,2) and (2,1) is ambiguous?
04:39:14 <Marvin--> I think it only compares the second component if the firsts are equal
04:46:52 <JC_freak> i think i've found a way to do it now
04:47:02 <JC_freak> except i have one problem
04:47:31 <JC_freak> i need to use a data type that doesn't always have the same no. arguments
04:48:20 <JC_freak> for eg in a map theres Water Coord | Land Coord | Player ID Coord
04:49:04 <JC_freak> so far this is what i've written
04:49:12 <JC_freak> check :: [Tiles] -> Coord -> Tiles
04:49:12 <JC_freak> check [] = []
04:49:12 <JC_freak> check ((t coord):ts) xy | coord == xy = (t coord)
04:49:12 <JC_freak>                         | otherwise = check ts xy
04:49:33 <JC_freak> this would work if each tile only had one argument
04:49:52 <Igloo_> No it wouldn't
04:50:10 <JC_freak> really
04:50:30 <JC_freak> oh yea my base case is messed
04:50:56 <JC_freak> is that all?
04:51:18 <Igloo_> No, you can't pattern match in that way
04:51:33 <JC_freak> ohhh
04:51:58 <Igloo_> If you use records you can give the coords the same accessor name, though
04:53:03 <JC_freak> hmm would i have to do a seperata case for each different tile
04:53:24 <Igloo_> Not if you did what I just suggested...
04:53:39 <JC_freak> use records
04:53:42 <JC_freak> hmm
04:54:03 <JC_freak> so i need to define it as a record
04:56:20 <JC_freak> btw if i did have to do a seperate case for each
04:56:38 <JC_freak> would i still be able to use guards for each case
05:00:04 <ludde> is there any way to retrieve the name of a haskell function, as a String.
05:02:46 <Marvin--> ugh, I hope not
05:02:57 <andersca> sounds too pythonish to exist in haskell
05:04:04 <o3> ludde: you could modify each function so that they all return tuples, the second element of which is its name 8)
05:04:15 <o3> but you probably want to take a slightly different approach ...
05:04:21 <ludde> o3: yeah
05:04:28 <ludde> bleh
05:05:40 <ludde> hi Fingolfin :)
05:05:46 <Fingolfin> <g>
05:09:39 <JC_freak> is the data structure Maybe in prelude?
05:21:31 <ibid> why don't you check?
05:21:33 <ibid> yes it is
05:22:48 <JC_freak> yea i already did thanks
05:22:54 <JC_freak> just wasn;t sure
05:26:07 <ibid> when i have that kind of questions i jusually do a grep in the haskell report appendix that contains the prelude
05:26:16 <ibid> s/j//
06:21:52 <ludde> does the IO monad have any get/set methods, which let me get/set stuff?
06:25:31 <Marvin--> uh, what'd you want to set and get?
06:27:55 <ludde> I have a method, "build :: Html -> IO String", which needs to incrementing a counter each time I use a certain construct in Html. So a get/set method would spare me from piping along a lot of junk.
06:28:04 <ludde> junk = that counter.
06:28:21 <Marvin--> so use StateT?
06:28:23 <ludde> incrementing = increment.
06:28:33 <Marvin--> StateT Int IO or something
06:28:45 <Marvin--> (where were you on the lecture on monad transformers? :)
06:28:49 <ludde> hmm, i guess i could. ok
06:28:53 <ludde> i was there :)
06:29:13 <ludde> but i thought they were a bit confusing, and i usually prefer to make stuff myself, instead of reusing someone else's code.
06:29:19 <andersca> hmm
06:29:22 <andersca> that's not a very good attitude
06:29:50 <ludde> andersca: dislike against reusing code?
06:29:56 <andersca> yeah :)
06:30:22 <ludde> but i guess i could use a state transformer here.
06:30:37 <ludde> hmm, are they compatible with hugs.. hmm
06:31:47 <ludde> hrm
06:31:47 <ludde> ERROR "f:\hw.hs" (line 12): Haskell 98 does not support multiple parameter class
06:31:48 <ludde> es
06:32:04 <andersca> \\ ?
06:32:25 <ludde> what do you mean?
06:32:55 <andersca> you need to escape the backslash
06:33:18 <ludde> uhm, no :)
06:33:30 <ludde> it's not a string literal
06:33:33 <ludde> :l f:\hw.hs
06:34:15 <Marvin--> hugs -98 might work, but ghci is sooo much nicer anyway
06:35:13 <ludde> Marvin--: yeah, it works, thanks.
06:35:21 <ludde> Marvin--: ghci is so slow, and I don't have it installed.
06:41:16 <ludde> where can I read about data types that use named members (with { })
06:42:32 <ludde> hi ski
06:42:38 <ski> hi
06:45:16 <ski> (brb)
06:53:06 <ski> .
06:55:20 <ludde> hrm, I'm getting this error, but only when I use "get" in the StateT monad.
06:55:21 <ludde> ERROR "f:\hw.hs" (line 123): Cannot justify constraints in explicitly typed bind
06:55:21 <ludde> ing
06:55:21 <ludde> *** Expression    : build
06:55:21 <ludde> *** Type          : Html -> StateT BuildState IO String
06:55:21 <ludde> *** Given context : ()
06:55:23 <ludde> *** Constraints   : MonadState (StateT BuildState IO) a
06:55:40 <ludde> build looks like: build :: Html -> (StateT BuildState IO) String
06:58:06 <ski> what is your state type in above ?  or is it a ST-like state-monad ?
06:58:28 <ludde> StateT is the standard monad transformer by koen.
06:58:35 <ludde> state monad.
06:58:59 <ski> in MonadTrans.hs ?
06:59:36 <ludde> yeah, but i copied and pasted instead of including MonadTrans.hs.
07:00:06 <ski> ok, so BuildState is your state type here, right ?
07:00:34 <ludde> exactly.
07:00:42 <ludde> type BuildState = (String, Int)
07:01:08 <ski> then shouldn't the constraint be MonadState (StateT BuildState IO) BuildState  and not MonadState (StateT BuildState IO) a ?
07:04:57 <ludde> maybe. i don't really understand constrains. how could I fix it?
07:04:57 <ski> ludde ?
07:05:16 <Marvin--> by applying some studies to your brain ;) *ducks*
07:05:56 <ludde> do I need to tell get the type of the state ?
07:06:28 <ski> perhaps you have explicitely stated the constraint in the type error. if so, change the "a" to "BuildState". hopefully that should fix it ..
07:06:38 <ski> i'm not sure
07:08:40 <ludde> (a,_ :: Int) <- get
07:08:44 <ludde> I had to do it like that.
07:08:54 <ludde> build (GetScriptName c) = do
07:08:54 <ludde>   (a,_ :: Int) <- get
07:08:54 <ludde>   build $ c a
07:09:08 <ludde> silly
07:10:08 <ludde> that means I have to write:
07:10:08 <ludde> (e :: String, n :: Int) <- get
07:10:15 <ludde> whenever I want to access the state.
07:11:39 <Marvin--> Then you've done something wrong
07:13:57 <ludde> then maybe could enlighten me? :)
07:14:12 <ludde> type BuildState = (String, Int)
07:14:12 <ludde> build :: Html -> (StateT BuildState IO) String
07:14:16 <ludde> and the function code above.
07:25:06 <Marvin--> Don't you want to use runStateT and get IO String back? I'd only want to use the StateT in helper functions...
07:37:20 <Marvin--> Errr... How do I turn a Handle into a file descriptor so I can call waitForInput on it?
07:37:30 <Marvin--> sorry, threadWaitInput I mean
07:38:59 <andersca> xft has been committed to mozilla!
07:39:01 * andersca does the happy dance
07:42:46 <ludde> Marvin--: I'm using runStateT, in the function that calls build
07:44:00 <ski> Marvin-- : seems like http://haskell.cs.yale.edu/ghc/docs/latest/html/base/GHC.IOBase.html says a Handle can contain one (or two) Handle_ which in turn contains a haFD field. dunno if that's exported though (probably it is). can't find any specifically designated function to do this right now though
07:44:44 <Marvin--> ski: exactly
07:45:22 <Marvin--> otoh, maybe it doesn't matter... hPutBuf/hGetBuf probably do The Right Thing<tm> with regard to concurrency
07:45:28 <ski> Marvin-- : exactly what ?  hairy ?  probably non-portable/experimental feature ?
07:46:17 <ski> Marvin-- : you working on AFP lab 2 ?
07:46:22 <Marvin--> ski: no, the project
07:46:33 <ski> Marvin-- : ok
07:46:40 <Marvin--> I thought I'd look at "real" concurrent haskell
07:54:56 <Marvin--> castCCharToChar looks evil
07:55:59 <ski> why ?
07:56:23 <Marvin--> smells like an unsafePerformIO
07:56:55 <andersca> "Smells like unsafePerformIO"
07:56:59 <andersca> that sounds like a nirvana cover
07:57:15 <ski> i guess CChar is strict while Char can be a thunk ..
07:57:28 <Marvin--> I wonder if I can simply do  s <- peekArray k ptr; return (map castCCharToChar s)
07:57:44 <Marvin--> feels like if I get this wrong the program will segfault somewhere between here and tomorrow
08:00:10 <ski> think it should work
08:00:54 <ski> perhaps you'd feel better if they had called it coerceXToY instead of castXToY ?
08:02:41 <Marvin--> dunno
08:10:21 <ludde> is there some built-in function that converts a hex number (stored as a string) to an integer?
08:24:45 <ski> seems noone knows ..
08:34:38 <andersca> hmm
08:34:45 <andersca> writing one is really easy you know
08:38:10 <andersca> hex :: String -> Int
08:38:10 <andersca> hex "A" = 10
08:38:10 <andersca> hex "B" = 11
08:38:10 <andersca> hex "C" = 12
08:38:10 <andersca> hex "D" = 13
08:38:11 <andersca> hex "E" = 14
08:38:13 <andersca> hex "F" = 15
08:38:15 <andersca> hex [digit] = read [digit] 
08:38:17 <andersca> hex (first:rest) = (hex [first]) * 16 + (hex rest)
08:51:32 <Igloo_> read ("0x" ++ str) should do it
08:52:08 <andersca> cool
08:57:49 <ski> is there a standard function that tests if one list is a contiguous sublist of another ?
09:40:16 <ludde> andersca: I know it's easy :) but I prefer a built-in one when one exists.
09:42:16 <Marvin--> aren't you contradicting yourself now? ;)
09:42:22 <Marvin--> <ludde> i usually prefer to make stuff myself, instead of reusing someone else's code.
09:42:50 <andersca> haha
09:43:19 <ludde> Marvin--: yeah perhaps, but with that I meant that I prefer not to use someone else's huge libraries. but i don't mind using a function from a library which I already depend on (eg. Prelude)
14:44:09 * shapr bounces
14:44:35 <Igloo_> Hey shapr - what's new?
14:45:22 <shapr> thinking about arrows lately
14:45:36 <shapr> wondering if they'd help with network protocol modules
14:45:39 <shapr> what's new with you?
14:46:00 <Igloo_> Not much - running into brick walls mainly
14:46:51 <shapr> with what?
14:46:57 <shapr> still doing GUI stuff?
14:47:47 <Igloo_> Nah - ran into too main brick walls there  :-(
14:47:56 <shapr> that sucks
14:48:01 <shapr> what were you trying to do?
14:48:55 <Igloo_> What I was unable to do was do computation while the interface was active
14:49:19 <shapr> you needed concurrent, right?
14:49:49 <shapr> I've always had to do that in Java, spawn off a thread to do the GUI stuff.
14:50:05 <Igloo_> That might have done it - I might look at that some time. I'd rather not use it though
14:50:33 <shapr> for user interaction, I don't know of any other way.
14:51:23 <Igloo_> I guess if I'm going to be using TH I'll be outside H'98+FFI anyway, but even so minimising dependence would be nice
14:52:31 <shapr> I've seen people call their GUIs purely functional, does that mean there is a system where you don't need to spawn off a thread to do GUI stuff?
14:53:23 <Igloo_> I don't think so...I got the impressin fudgets couldn't do it either
14:54:06 * shapr looks for fudgets
14:54:46 * shapr reads
14:55:08 <shapr> hmm
14:58:22 <shapr> I can't tell
14:59:40 <shapr> has anyone done a survey of Haskell GUI stuff recently?
15:00:31 <liiwi> not me
15:00:42 <shapr> hi liiwi
15:00:44 <shapr> how's life?
15:00:52 <liiwi> swirly
15:01:16 <shapr> sounds good :-)
15:01:42 <graylensman> I use gtk+hs.  It works.
15:01:48 <shapr> hi graylensman
15:02:01 <shapr> do you need to spawn a separate thread to refresh the GUI?
15:03:01 * shapr pokes Logan
15:03:03 <graylensman> You register a callBack handler. It is called for you.  Another way of looking at it is you do not have an event loop in your program.
15:03:20 <shapr> graylensman: happen to have a demo somewhere?
15:04:15 <graylensman> There are examples in the download.  If you want to goto #flood I can paste an example I just wrote 10 mins ago.
15:04:32 <Igloo_> gray: Does the ThreadTest example work for you?
15:05:12 <graylensman> haven't tried it.
15:14:34 <shapr`> hmm
15:14:36 <shapr`> weird
15:16:14 <shapr`> igloo: I think yampa is probably your best bet
15:16:23 <shapr`> haskell.org/yampa
15:18:54 * Igloo_ will take a look some time, ta
15:25:27 <shapr> has anyone here tried Yampa?
15:25:44 <Igloo_> [23:18] * -> Igloo_ will take a look some time, ta
15:27:18 <shapr> ok
15:27:53 * shapr wonders whether runtime loading or network protocol modules would be more useful
15:29:11 <shapr> has anyone gotten HGL to work with ghc on Linux?
15:54:51 * shapr grumbles at HGL
15:56:33 * shapr is confused
15:59:44 <liiwi> confusion leads to frustration
16:00:11 <shapr> truly
16:00:20 <shapr> I have realized some useful facts though
16:00:22 <liiwi> frustration leads to game of truecombat
16:01:17 <shapr> really?
16:01:23 <shapr> I was thinking it led to games of counterstrike
16:02:13 <liiwi> counterstrike is for wussies
16:02:41 <shapr> hah, come play some with me
16:03:00 <liiwi> don't have it here
16:03:06 <graylensman> shapr: So far HGL is building clean... Let you know if I can get one of the examples working.
16:03:19 <shapr> I can't get HGL to build :-/
16:03:23 <shapr> always the same error
16:03:32 <shapr> Graphics_StdDIS.hs:39:
16:03:32 <shapr>     Module `Foreign' does not export `ForeignObj'
16:03:32 <shapr> Graphics_StdDIS.hs:39:
16:03:32 <shapr>     Module `Foreign' does not export `makeStablePtr'
16:03:32 <shapr> Graphics_StdDIS.hs:39:
16:03:32 <shapr>     Module `Foreign' does not export `makeForeignObj'
16:03:57 <shapr> maybe it just doesn't work with ghc5.04.1
16:04:00 <shapr> that would suck
16:04:43 <graylensman> More likely its GreenCard the ghc.  It requires a very recent release of GreenCard.
16:06:23 <shapr> I have 2.04
16:06:38 <shapr> just grabbed and built it
16:07:24 <shapr> same error with 2.03
16:07:25 * shapr just tried
16:19:00 <shapr> grr
16:33:02 <graylensman> shapr: I was afk.  But it installed fine for me on RH 7.2  I am running some fof the example programs. Very neat stuff.
23:01:52 <J35u5Fr34k> hi
23:03:27 <J35u5Fr34k> ...
23:03:37 <J35u5Fr34k> anyone here?
23:08:30 <dennisb> hi
23:09:05 <J35u5Fr34k> would u mind helping me out a bit
23:09:19 <dennisb> just ask the question
23:09:26 <dennisb> if anyone knows they will answere
23:09:38 <J35u5Fr34k> i'll show u wat i wrote and can u tell me if its ok
23:09:47 <dennisb> if it's not too long
23:10:00 <J35u5Fr34k> about 12 lines?
23:10:16 <dennisb> sure
23:10:21 <J35u5Fr34k> check [] xy = []
23:10:22 <J35u5Fr34k> check ((Wall coord):ts) xy | coord == xy = "#"
23:10:22 <J35u5Fr34k>                            | otherwise = check ts xy
23:10:22 <J35u5Fr34k> check ((Water coord):ts) xy | coord == xy = "~"
23:10:22 <J35u5Fr34k>                            | otherwise = check ts xy
23:10:22 <J35u5Fr34k> check ((PlayerIco i coord):ts) xy | coord == xy = lastDig i
23:10:24 <J35u5Fr34k>                            | otherwise = check ts xy
23:10:26 <J35u5Fr34k> check ((Base coord):ts) xy | coord == xy = "@"
23:10:28 <J35u5Fr34k>                            | otherwise = check ts xy
23:10:30 <J35u5Fr34k> check ((Land coord):ts) xy | coord == xy = "."
23:10:32 <J35u5Fr34k>                            | otherwise = check ts xy
23:10:44 <J35u5Fr34k> i know i could've probably used records
23:10:52 <J35u5Fr34k> bt i haven;t learn't to use records yet
23:11:25 <J35u5Fr34k> so can i do that with guards at each case
23:11:37 <dennisb> does every value have a Coord inside?
23:12:11 <J35u5Fr34k> yes
23:12:19 <dennisb> why not write a function Tile->Coord (if your type is called Tile)
23:12:26 <J35u5Fr34k> the only diff is that PlayerIco has one extra arg
23:12:58 <dennisb> Or maybe change the type to have the coord like: (Coord,Tile)
23:13:31 <dennisb> both should work, the function looks ugly as it is now if you ask me
23:13:31 <J35u5Fr34k> so change all the (tile coord) to (tile,coord)
23:13:51 <dennisb> you could do that. or just write a function to pick out the coord
23:14:16 <dennisb> that you can do no matter if PlayerIco have an extra parameter
23:14:35 <J35u5Fr34k> so i do the diff cases in that fucntion?
23:14:51 <dennisb> yes
23:14:58 <J35u5Fr34k> hmmm
23:14:59 <J35u5Fr34k> yea
23:15:26 <J35u5Fr34k> that would amke it neater
23:15:31 <dennisb> you can probably reuse such a function in other places also
23:15:51 <J35u5Fr34k> so is it actually ok to use guards for the diff cases
23:16:04 <dennisb> it works, doesn't it?
23:16:40 <dennisb> then it is a question of what it okay and what is not. I would rewrite it
23:16:59 <dennisb> I don't like the 5 equal otherwise cases
23:17:33 <J35u5Fr34k> yea
23:17:42 <J35u5Fr34k> i just got another idea
23:17:58 <J35u5Fr34k> thanks for your insights
23:30:53 <J35u5Fr34k> i've got another q
23:30:57 <J35u5Fr34k> let cmd = readCommand input
23:31:24 <J35u5Fr34k> if readCommand input returns a Maybe a
23:31:43 <J35u5Fr34k> is there anything wrong in doing 
23:31:51 <J35u5Fr34k> while cmd == Nothing
23:32:13 <J35u5Fr34k> because i'm getting a parse error when i try to compile
23:32:49 <J35u5Fr34k> and it says the error is where the while loop starts
23:33:04 <dennisb> but there are no while-loops in haskell...
23:33:21 <J35u5Fr34k> brb
23:42:20 <v1> sorry denisb
23:43:07 <v1> or whoever sed that while-loops don't exist in haskell
23:43:39 <v1> the consultation person must've got mixed up between languages
23:43:55 <v1> so is there an equivalent to while loops in haskell
23:55:47 <v1> ...
23:56:02 <v1> anybody?
23:56:15 <v1> don't rush in all at once
23:57:55 <dennisb> v1: you have recursion in haskell
23:58:16 <dennisb> and higher order functions that you can usually use instead of recursion
23:59:36 <v1> i thought so
