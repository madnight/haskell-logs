01:41:43 <ludde> hello
01:42:13 <norpan> hello ludde
01:42:13 <ludde> I have a problem with : instance Monad (Thread a) where
01:42:21 <ludde> Thread is: type Thread a = (a -> ThreadAction) -> ThreadAction
01:42:28 <ludde> nej norpan
01:42:49 <ludde> err, HEJ norpan menar jag ju ;)
01:43:01 <norpan> hej du
01:43:22 <norpan> instance Monad Thread where
01:43:22 <ludde> jag får iaf:
01:43:44 <ludde> Om jag enbart har Thread blir det:
01:43:44 <ludde> Type synonym `Thread' should have 1 argument, but has been given 0
01:43:44 <ludde>     In the instance declaration for `Monad Thread'
01:43:53 <Marvin--> ludde: låt mig gissa, du läser AFP
01:43:53 <norpan> gör som jag skrev
01:43:58 <ludde> Marvin--: ja
01:44:11 <Marvin--> norpan: hjälp honom inte för mycket ;)
01:44:16 <ludde> Marvin--: du rättade min programspråkslabb :)
01:44:30 <Marvin--> ludde: mycket möjligt
01:44:46 <norpan> Marvin--: det är väl inte att hjälpa för mycket att säga att man inte ska ha med "a" i instansdeklarationen
01:44:50 <ludde> Marvin--: du klagade på att in och out inte skulle vara funktionsanrop, för att det blev för generellt och jobbigt
01:45:10 <Marvin--> norpan: nä, jag menade mest framöver
01:45:20 <Marvin--> ludde: klagade och klagade, jag försökte bespara er från massa jobb!
01:45:37 <ludde> Marvin--: ja :) det var bra att du gjorde det.
01:46:08 <ludde> Marvin--: klagade = kommenterade.
01:46:21 <andersca> hmm
01:46:24 <norpan> ludde: man ska i alla fall inte ha med a
01:46:39 <ludde> norpan: iaf, om jag skriver "instance Monad Thread where" fick jag felet jag pastade ovan.
01:46:56 <norpan> aha, ditt problem är ju att Thread bara är en typsynonym
01:47:05 <norpan> man får inte göra instanser av såna, du måste använda newtype
01:47:40 <norpan> newtype Thread a = Thread ((a -> ThreadAction) -> ThreadAction)
01:47:42 <ludde> hmm, ok
01:47:50 <norpan> eller nåt sånt
01:48:31 <ludde> japp
01:48:45 <norpan> i gamla fina gofer fick man minsann göra instanser av typsynonymer :)
01:49:00 <Marvin--> norpan: :) men så hade väl inte gofer något vettigt typsystem heller? ;)
01:49:04 <Heffalump> eek, there's something wrong with my screen, lots of dots keep appearing in random places! :-)
01:49:05 <norpan> Marvin--: förvisso
01:49:11 <norpan> Heffalump: hehe, sorry
01:49:13 <Marvin--> Heffalump: sorry :)
01:49:19 <Heffalump> s'ok, carry on :-)
01:49:29 <norpan> bork bork
01:49:42 <Heffalump> I don't think it's specified anywhere this channel has to be in English
01:49:51 <andersca> norpan: is it the borker
01:49:58 <norpan> andersca: is it the lurker
01:50:03 <andersca> yes
01:50:06 <andersca> I wonder where dennis is
01:50:11 <andersca> norpan: lunch today perhaps
01:50:18 <norpan> andersca: where
01:50:22 <andersca> I dunno
01:50:22 <norpan> and with whom?
01:50:29 <andersca> with me and rhult
01:50:30 <andersca> and possibly dennis
01:50:39 <norpan> ok
01:50:41 * Marvin-- suggests Thai at MC ;)
01:50:43 <norpan> super mcfeast bacon?
01:50:58 <andersca> Marvin--: I tried that on saturday, it was pretty good
01:51:08 <Marvin--> andersca: yup, very nice place, and very nice prices
01:51:25 * Marvin-- tries to figure out which courses to take during spring
01:53:04 <norpan> Marvin--: does the tai place have a menu for spring already? :)
01:53:19 <andersca> doh
01:53:39 <Marvin--> norpan: duh
01:53:45 <norpan> i know
01:54:47 <Marvin--> doh, *now* I found select
01:55:28 <ludde> andersca = d00anca ?
01:56:15 <andersca> something like that
02:01:26 <ludde> I didn't know there was a haskell channel on openprojects :) Now I have a new channel to stay in :)
02:01:42 <Marvin--> Why isn't the 'util' package listed in the docs on www.haskell.org/ghc/? :(
02:01:51 <Marvin--> Is it deprecated or something?
02:02:23 <ludde> http://www.haskell.org/ghc/docs/latest/html/hslibs/sec-util.html 
02:02:56 <Marvin--> yes, but it's in the "(Old) Haskell Libraries" section
02:03:25 <Marvin--> aha, they haven't finished moving all the posix stuff yet
02:14:00 <ludde> finns det något effektivare alternativ till nub.concat ?
02:15:39 <Marvin--> för vaddå? union?
02:15:45 <ludde> ja
02:16:21 <ludde> foldr på union kanske är effektivare
02:16:42 <ludde> fast det kanske inte spelar så stor roll.
02:16:57 <Marvin--> union använder foldl och nub
02:17:52 <ludde> finns det något snabbt sätt att se implementationen av en funktion direkt i GHCi? eller måste man öppna modulfilen manuellt?
02:18:25 <ludde> :info kanske. hmm
02:18:28 <ludde> nej
03:05:31 <ludde> Marvin--: har du gjort labb 2 i AFP?
03:05:55 <ludde> Marvin--: jag har problem med hPutChunk, det verkar som om den har en intern buffer, så den skriver inte datan till andra sidan förrän bufferten är full.
03:06:04 <ludde> Marvin--: vet du hur man gör för att flusha den?
03:13:11 <norpan> ludde: hFlush kancke
03:13:12 <norpan> kanske
03:14:28 <ludde> nepp.
03:17:08 <Marvin--> ludde: vet ej, ska börja i eftermiddag
03:17:58 <Marvin--> ludde: men använder inte Chunk-prylen ickeblockerande I/O?
03:19:58 <ludde> hmm, det vet jag inte. men det är meningen att man skall använda select, och då får man ju reda på när det går att läsa och skriva utan att blocka.
03:23:07 <ludde> hPutChunk returnerar det som återstår att skriva
03:23:24 <ludde> så det är väl icke-blockerande då antar jag.
03:24:11 <Marvin--> låter rimligt
03:24:23 <andersca> hum hum
03:24:48 <Marvin--> hmm, jag har bara fått in 18 labbar, är ni inte fler än så, eller har Christoffer fått in många fler kanske?
03:26:40 <ludde> ls -al /users/mdstud/progs/lab_grupper | grep -v "Aug 22" | wc -l
03:26:40 <ludde>       47
03:26:58 <ludde> så 44 labbar borde du fått in
03:27:35 <Marvin--> minus 2, progs-{79,80} är våra testkonton :)
03:27:48 <ludde> aha :)
03:27:52 <ludde> jaja, skall gå nu.. cs
03:27:57 <ludde> (det är jag som sitter i rullstol)
03:28:01 <Marvin--> åhå
03:28:09 <Marvin--> då känner du Joel?
03:28:17 <ludde> ja, jolta menar du
03:28:26 <Marvin--> jaja, Jolta
03:28:38 <ludde> men jag måste gå nu.. cs
03:29:25 <Marvin--> oj vad klockan blev mycket och här sitter jag och äter lunch i godan ro
03:29:27 <Marvin--> *bråttom*
03:29:38 <andersca> hoho
03:29:52 <Marvin--> föreläsning om trekvart
05:39:53 --- mode: card.freenode.net set +o ChanServ
05:47:06 --- mode: card.freenode.net set +o ChanServ
06:50:36 --- mode: card.freenode.net set +o ChanServ
06:52:11 --- mode: card.freenode.net set +o ChanServ
07:53:00 * shapr boings
08:05:30 <shapr> ICFP contest results
08:05:33 <shapr> yay
08:05:36 <Heffalump> where?
08:05:49 <shapr> no, soon
08:05:56 <shapr> sorry, I left off the word soon
08:05:56 <Heffalump> YM at ICFP?
08:05:58 <shapr> right
08:06:00 <Heffalump> ok
08:06:04 * Heffalump has to get there first :-)
08:06:30 <shapr> my email just got scrud, so even if results showed up in my inbox I wouldn't know
08:07:15 <Heffalump> :(
08:07:17 <Heffalump> they haven't, though
08:07:43 <shapr> hi buggs
08:07:55 <buggs> hoi shapr
08:09:27 <shapr> buggs: what's up?
08:09:30 <shapr> written any cool code lately?
08:10:52 <buggs> no was playing with plan9
08:11:07 <buggs> got a few ideas into my head
08:11:34 <buggs> http://plan9.bell-labs.com
08:11:35 <shapr> like what?
08:11:38 <shapr> I've heard of plan9
08:12:08 <buggs> imagine you you could walk the web like a fileystem
08:12:52 <buggs> like: mkdir org/haskell/www; cat index.html
08:12:56 <Heffalump> how do you handle links?
08:13:02 <buggs> would be automatic bookmark
08:13:04 <Heffalump> ah, ok
08:13:14 <Heffalump> what about URLs with ?s ?
08:13:22 * Igloo thinks you mean cd
08:13:39 <buggs> ya insert a cd there
08:13:47 <Heffalump> but you need the mkdir too?
08:14:07 <buggs> ya i'd say you should have todo a mkdir
08:14:11 <Igloo> Well catting index.html won't be very interesting if you've only just created the directory  :-)
08:14:25 <Heffalump> well, mkdir might be saying "create this mapping"
08:14:28 <buggs> hmm
08:14:28 <shapr> buggs: have you seen gzigzag ?
08:14:32 <Igloo> Oh, I see what you mean
08:14:42 <Igloo> I thought you meant it should already exist
08:14:48 <shapr> yah, filesystems and stuff are just conventions
08:15:09 <buggs> but if you don't mkdir you have so many directories ...
08:15:42 <buggs> maybe: alias ls='cat index.html'
08:15:45 <shapr> I'm thinking more about NTFS and mac's HPFS that use separate file streams
08:16:03 <buggs> what is gzigzag
08:16:06 <buggs> ?
08:16:20 <shapr> http://gzigzag.sf.net
08:23:31 <shapr> buggs: gzigzag is a partial implementation of some of the Xanadu idea from Tim Berners-Lee
08:28:29 <buggs> it seems they call it gzz now
08:28:39 <shapr> oh
08:28:47 <shapr> I played with it once or twice, it's neat
08:28:59 <shapr> bpt from #tunes has some neat ideas about this kind of thing as well
08:29:21 <buggs> i read in a nutshell.html but i still don't know anything about it ;)
08:29:32 <shapr> hi hal
08:29:33 <hdaume> 'morning
08:29:35 <shapr> how's the code?
08:29:52 <hdaume> which code is that?  :)
08:30:02 <shapr> whatever you're working on :-)
08:30:18 <hdaume> well, the code is correct, but it's doing the wrong thing.  sigh.
08:30:24 <hdaume> brb...getting coffee
08:34:16 <Heffalump> hdaume: does that mean your specification is incorrect?
08:34:57 <shapr> jag ar american!
08:46:24 <hdaume> back
08:46:56 <hdaume> Heffalump: it's unsupervised learning, so it means my model is incorrect
08:47:04 <hdaume> or i just don't have enough data :)
08:47:18 <shapr> I do unsupervised learning all the time. is it still safe? ;-)
08:48:23 <hdaume> presumably you're slighly more intelligent than a ~6000line haskell program though
08:48:29 <shapr> sometimes I wonder ;-)
08:49:32 <buggs> Heffalump links would be soft links i guess
08:49:52 <Heffalump> oh, that'd make sense (for HTTP redirects)
12:05:19 * shapr blinks
12:08:07 <cleverdra> shapr?
12:08:13 <shapr> hi cleverdra
12:08:22 <shapr> I was just reading comp.lang.functional
12:08:30 <shapr> I advertised the parr library there
12:09:01 <engstad> Btw, anyone try out lambda-prolog?
12:09:18 <shapr> I've just barely heard of it
12:09:29 <cleverdra> shapr - why did you blink, though?
12:09:49 <shapr> actually, that was because of the positions offered article on c.l.f
12:10:07 <shapr> applications must be submitted by october 30th, 2000
12:10:29 * shapr considers emailing the guy and pointing out the typo
12:10:42 <cleverdra> He's probably inundated already =)
12:10:43 <shapr> the correct year is pretty obvious though
12:10:45 <shapr> yah, probably so
12:11:17 <shapr> well, in that case... maybe it's time for more counterstrike
12:11:22 <shapr> mmm, counterstrike...
12:34:06 <cleverdra> http://www.willamette.edu/~fruehr/haskell/evolution.html is just wonderful.
12:57:13 <cleverdra> hm hm hm.  What's a good Haskell GUI that I could use on Windows but (preferably) develop on Linux?
12:57:32 <cleverdra> GUI-toolkit.
12:58:10 <norpan> i'd say tk or gtk
12:58:57 <engstad> What is a "n+k-pattern"?
12:59:13 <cleverdra> Yeah, I guess those'd work.  I'll look at FranTk and TclHaskell
12:59:17 <Igloo> A pattern like (i+5)
13:00:03 <engstad> Oh, and why not simply substitute i' = i + 5?
13:00:54 <Igloo> Because that's more verbose
13:01:03 <cleverdra> engstad - the anti-"n+k-pattern" thing is a joke.
13:01:18 <engstad> ;-)
13:01:28 <Igloo> And you'd need a guard too
13:01:52 <Igloo> And in fact you'd need let i = i' - 5 in ...
13:01:58 <cleverdra> ooh, and HGL may work, too -- it's advertised as working under X11 and Win32
13:02:21 <engstad> Hehe, I like this one: fac n = snd (until ((>n) . fst) (\(i,m) -> (i+1, i*m)) (1,1))
13:50:40 <lament> (_|_)
13:51:56 <Igloo> What's that, a bottom?  :-)
13:52:18 <dark> And here I thought you were British :)
13:52:44 <Igloo> Who, me?
13:55:59 <Heffalump> lol
14:00:17 <engstad> Hehe... That's very cunning.
14:00:47 <lament> Is there an actual historical reason why bottom is denoted as _|_ ?
14:01:22 <engstad> Well, it looks like an upside-down T.
14:01:42 <engstad> T is "top", so _|_ is "bottom".
14:01:45 <lament> Hm.
14:01:49 <dark> I don't know how far back it goes, but it's a single symbol (low horizontal line with vertical bar sticking out) in predicate logic.
14:02:02 <dark> Hmm, I've never seen it as an actual upside-down T.
14:02:05 <lament> And "B" looks like an upside-down "B".
14:02:12 <lament> B is "bottom", so B should be "top" :P
14:02:16 <engstad> ;-)
14:02:16 <Igloo> FOLDOC says <theory> The least defined element in a given {domain}. Often used to represent a non-terminating computation. (In {LaTeX}, bottom is written as {\perp}, sometimes with the domain as a subscript).
14:02:38 <lament> |
14:02:55 <engstad> Hey, how did you type in that?
14:03:01 <lament> Underlined |
14:03:20 <engstad> Underlined?
14:03:37 <dark> Looks like a boldface | to me :)
14:03:41 <Igloo> I think there's a box drawing character of the right shape too, but that wouldn't be IRC friendly
14:03:54 <Igloo> You have an inferior terminal then, dark  :-)
14:04:13 <engstad> I'm on ircII over a telnet connection and I can see it.. :-)
14:04:19 <dark> Igloo: Watch it there, you're insulting the linux console!
14:04:55 * Heffalump looks forward to November
14:05:11 <dark> I'll be 30 in November.  That's when "old" starts.
14:05:25 <Heffalump> (if it was November, I could have replied to that with "well, he is sponsored by Microsoft, what do you expect?")
14:05:30 * Igloo tries...oh yeah
14:07:40 <Heffalump> btw, what/where are the most complete curses/ncurses bindings for Haskell about?
15:46:13 * toadx notes that compiling ghc takes forever
15:46:45 <Igloo> Twice. Grrr.
15:47:30 <Heffalump> anyone? curses/ncurses?
15:48:17 <toadx> my uncle is good at cursing
15:48:29 <Heffalump> bindings for Haskell :-p
15:49:28 * Igloo could give my usual response, but you're probably bored of it by now  :-)
15:49:45 <toadx> Igloo: what would that be?
15:50:58 <Igloo> http://urchin.earth.li/~ian/Hetris/Hetris-snapshot-noH2Lbinary.tar.gz in essence
15:54:03 <Heffalump> what was the usual response?
15:54:27 <Heffalump> oh, is that not actually useful to me?
15:54:56 <Igloo> Hmmm?
15:55:00 * Heffalump scps it anyway
15:55:12 <Igloo> Oh, actually, the one in Kaskell2LaTeX might be more up-to-date
15:55:47 <Heffalump> ta.
15:57:05 <Heffalump> googling for "Haskell curses" is remarkably unhelpful.
15:57:11 * Heffalump goes to bed.
15:57:30 <Igloo> Night
19:25:55 <sethk> Hi norpan
19:56:38 <engstad> "Type Theory and Functional Programming" available online. :-)
19:58:56 * Heffalump gets up
19:59:00 <Heffalump> I hate 4am.
19:59:14 <Pseudonym> Why are you up at 4am?
19:59:18 <Pseudonym> Does 4am exist?
19:59:29 <clausen> 4am is a good time to start hacking :)
19:59:43 <Pseudonym> If you've been up since 11am, yes.
20:00:04 <Heffalump> Pseudonym: leaving for PLI in an hour
20:00:05 * clausen often goes to sleep at ~9pm, and starts hacking at 4am
20:00:12 <engstad> 4 am?
20:00:17 <clausen> yep
20:00:31 <Igloo> Nothing wrong with 4am
20:00:35 <engstad> 8 pm here.
20:00:39 <Igloo> (he says heading off to bed)
20:00:51 <Pseudonym> Grrr... I hate linux pthreads.
20:00:55 <Pseudonym> Sorry, change of subject.
20:00:56 <engstad> I'm still at work. :-)
20:01:05 <Pseudonym> I've ranted about this before, I know.
20:01:13 * clausen writing a code generator in mercury
20:01:17 <clausen> (uni project)
20:01:21 <Pseudonym> What for?
20:01:23 * clausen wondering what the best way is to allocate variables
20:01:25 <Pseudonym> What language for?
20:01:28 <clausen> mercury
20:01:37 <Pseudonym> You're writing a code generator for mercury?
20:01:44 <Pseudonym> Uhm... that's hard.
20:01:59 <clausen> basically: we are given a representation of a type
20:02:05 <engstad> Allocate variables?
20:02:10 <clausen> and we have to generate 
20:02:12 <engstad> Register allocation?
20:02:15 <clausen> map and foldr
20:02:19 <Pseudonym> OK.
20:02:23 <clausen> engstad: nono, generating output mercury code
20:02:28 <Pseudonym> So you're constructing some HLDS?
20:02:30 <engstad> Ah, ok.
20:02:34 <Pseudonym> Oh, I see.
20:02:35 <clausen> Pseudonym: yep
20:02:48 <clausen> it's a PITA
20:02:55 <Pseudonym> So it needs to be mode analysed and everything.
20:02:57 * clausen can't think how to separate things cleanly
20:03:06 <clausen> huh?
20:03:14 <Pseudonym> Are you generating Mercury source or HLDS?
20:03:15 <clausen> we're given a data structure... no modes needed there
20:03:18 <clausen> ooops
20:03:22 <clausen> mercury source
20:03:24 <Pseudonym> OK.
20:03:27 <Pseudonym> Phew.
20:03:32 <Pseudonym> Generating HLDS is a nightmare.
20:03:39 <clausen> good, well I'm not doing it :)
20:03:42 <Pseudonym> Mode checking it is even worse.
20:04:00 <clausen> you still get nightmares about it?
20:04:07 <Pseudonym> No, I'm cured now.,
20:04:25 <clausen> so, I've been thinking about different stategies
20:04:37 <clausen> like, I'll have a list of paremeters to the type constructor
20:04:47 <clausen> and they'll need to be assigned symbols in the map/foldl clauses
20:04:49 <Pseudonym> Have you looked at the varset module?
20:04:53 <clausen> no
20:04:54 * clausen looks
20:05:20 <Pseudonym> In particular, varset__new_var.
20:05:53 <clausen> so, does this have magical side-effects?
20:05:58 <Pseudonym> No.
20:06:06 <Pseudonym> If you look, the varset/1 object is threaded through.
20:06:08 <clausen> (the comments at the start...)
20:06:22 <clausen> this looks very similar to code I wrote (surprise!)
20:06:30 <Pseudonym> :-)
20:06:39 <Pseudonym> You should also generate terms (in term.m).
20:06:48 <Pseudonym> Then you don't need to worry about input and output.
20:07:18 <clausen> I'm not sure if this solves all my problems (tell if I should go and read...)
20:07:22 <Pseudonym> Note term_io
20:07:28 <Pseudonym> No, not all of your problems.
20:07:41 <clausen> like, knowing which variable to reference when
20:07:41 <Pseudonym> But term.m and varset.m give you an internal data structure for free.
20:07:50 <Pseudonym> Then you write the code to manipulate that.
20:07:56 <clausen> connecting variables with their position in the type, etc.
20:08:02 <clausen> yep
20:10:55 <Pseudonym> BBIAB.
