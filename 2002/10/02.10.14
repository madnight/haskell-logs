03:23:50 <andersca> Marvin--: hey
04:08:34 * shapr boings
04:08:53 * liiwi sits
04:08:58 <shapr> hey liiwi
04:09:02 <shapr> how's life treating you?
05:02:47 <BlizzNL> I need to write some lambda expressions as an abstract syntax tree. Does anyone knows some good paper on the subject?
05:04:10 <andersca> hmm
05:04:14 <andersca> I'd just use something like
05:04:28 <andersca> ELambda String Expr
05:05:33 <BlizzNL> andersca: you can check sheet 3 of this : http://www.cs.uu.nl/groups/ST/twiki/pub/Ist/ProgramAnalysis/ist-2.pdf to see what I mean
05:06:09 <andersca> yes
05:09:23 <andersca> it still applies :)
05:10:47 <BlizzNL> great ;) but what do you mean with ELambda?
05:11:04 <andersca> for your syntax tree you hav expressions
05:11:05 <andersca> like
05:11:27 <BlizzNL> ok for example ((\y -> (\z -> z y)
05:11:39 <BlizzNL> forget the first (
05:11:40 <andersca> data Expr = EInt Int | EBool Bool
05:12:59 <BlizzNL> ahh ok now I know where the E comes from.. thnx
05:13:36 <andersca> so then you have 
05:13:40 <andersca> EApp Expr Expr
05:20:03 <J35u5Fr34k> hi
05:20:38 <J35u5Fr34k> does anyone know where i can find out more about breadth first search in Haskell
05:21:28 <BlizzNL> J35u5Fr34k: I don't any specific material but looking into the general material and applying it in Haskell ? ;)
05:22:42 <J35u5Fr34k> ok blizz can i see?
05:24:11 <BlizzNL> Well I have a 1000+ pages book by Luger & Stubblefield on the subject and I am no going to type it over ;)
05:24:26 <J35u5Fr34k> oh a book
05:24:28 <J35u5Fr34k> heh
05:24:31 <J35u5Fr34k> n/m
05:24:41 <J35u5Fr34k> are there any good sites?
05:24:45 <J35u5Fr34k> u noe of
05:25:14 * BlizzNL is checking bookmarks
05:26:58 <BlizzNL> http://www.cs.auc.dk/~luca/DATALG/alg00.html this site  has some interesting lecture notes on the subject.
05:27:31 <J35u5Fr34k> oh ok, i'll have a look, thanks
05:28:15 <BlizzNL> but this research area is covered for decades so far, there are tons of info on the web
05:29:02 <J35u5Fr34k> do u think i would be able to get an algorithm for bfs?
05:31:15 <BlizzNL> i think you should write one yourself because its a lot of fun
05:49:18 * BlizzNL hates being disconnected all the time
05:58:51 <J35u5Fr34k> would it be possible to do bfs with a list
05:59:08 <J35u5Fr34k> it probably is, but just take a lot longer than doing it witha tree huh
07:17:28 * shapr bounces
07:30:04 * shapr thinks about combinators
08:05:34 <shapr> so, anyone written any cool code lately?
08:06:16 <shapr> I've been trying to think of instances where arrows are better than monads so I can try to come up with my own.
08:06:44 <shapr> an arrow makes static properties of monads explicit, allowing for more optimization....
08:10:38 <Heffalump> they're strictly more powerful
08:11:07 <Heffalump> e.g. Swierstra/Duponcheel parser combinators (which gives the static properties benefit you mention), Functional Reactive Programming
08:11:24 <shapr> the SD parsers are perfectly clear from Hughes' paper
08:11:40 <shapr> but I haven't figured out how to generalize that to other instances
08:11:56 <shapr> I'll read up on Yampa next, they use arrows.
08:12:05 <shapr> good suggestion, thanks
08:13:29 <Heffalump> FRP is now called Yampa, sorry
08:14:05 <shapr> speaking of which, I can't get their hacked HGL to compile, and I can't subscribe to their mailing list either.
08:16:36 <shapr> I thought about trying to apply Arrows to network protocols, but I couldn't see an advantage there...
08:17:23 <shapr> can you think of some other instances or examples where arrows would be beneficial over monads?
08:18:31 <Heffalump> not off the top of my head, no
08:26:23 <shapr> is Yampa the same as Fruit?
08:26:42 <Heffalump> dunno what Fruit is
08:26:45 <shapr> I know Yampa used to be AFRP
08:26:55 <shapr> and that it's descenced from FRP and Fran
08:28:12 * shapr would like to get the final version of the Arrow paper
08:30:44 <Heffalump> it's in SCP, right?
08:30:56 <shapr> yup
08:31:03 <shapr> Generalising Monads to Arrows, in Science of Computer Programming 37, pp67-111, May 2000
08:31:04 <Heffalump> is that online?
08:31:09 * shapr didn't think of that
08:31:28 <Heffalump> if it is it's probably only available to subscribing institutions
08:31:51 <Heffalump> http://www.sciencedirect.com/science?_ob=MImg&_imagekey=B6V17-43FX0HF-4-2&_cdi=5667&_orig=browse&_coverDate=05%2F31%2F2000&_sk=999629998&wchp=dGLbVzz-lSzBV&_acct=C000010360&_version=1&_userid=126524&md5=7c61e162fecab2d699d3b966f4aad211&ie=f.pdf
08:31:59 <Heffalump> can you get that?
08:32:38 * shapr tries
08:32:46 <shapr> nah, wants login and password
08:32:54 <shapr> thirty bucks
08:33:01 <Heffalump> ouch
08:36:35 <shapr> hi hal, what's up?
08:37:01 <shapr> hey hal, have you read about arrows much?
08:37:12 <shapr> I've been trying to think of examples where arrows are preferable to monads
08:41:18 <hdaume> not much...no, not too much...in fact, pretty much all i know about them was from the FROB talk at the summer school...
08:41:36 <shapr> wow cool, I haven't this before: http://haskell.readscheme.org/index.html
08:42:10 <hdaume> cool!
08:42:19 <Heffalump> is that the bibliography of haskell?
08:42:44 <shapr> yah it is
08:55:11 <shapr> hasktags is sooo handy
08:55:57 <shapr> I'd like to see some demo server code that spawns a thread to listen on a socket
08:57:09 <hdaume> there's one of those on the language shootout page
08:57:21 <shapr> hm
08:57:22 * shapr looks
08:57:54 <shapr> http://www.bagley.org/~doug/shootout/bench/echo/echo.ghc
08:57:56 <shapr> spiffy!
08:58:00 <hdaume> :)
08:58:05 <shapr> thanks
09:06:52 <shapr> I want a PalmOS version of Unlambda
09:09:13 <hdaume> haha
09:12:13 <shapr> that would be great fun
09:25:21 <shapr> ?
09:26:20 <shapr> ?
09:26:23 <shapr> what's he doing
09:28:33 * shapr tries to figure out how to hack plugins into HWS
09:29:18 <hdaume> hws?
09:29:37 <shapr> Simon Marlowe wrote Haskell Web Server
09:29:43 <hdaume> ahhh
09:29:45 <hdaume> righ
09:29:46 <shapr> in... 2000 I thinkk
09:30:09 <shapr> I got it working with ghc5.04.1 recently
09:30:29 <shapr> I thought it would be neat to change some of its modules into apache-style runtime loadable modules.
09:31:42 <o3> shapr: you got it working with ghc5.04.1?
09:31:47 <o3> do you mind sending me a tarball of your work?
09:31:54 <o3> (so i don't have to redo it in a few weeks :)
09:32:04 <shapr> it's just a few patches, lemme get the url
09:32:14 <o3> swoit, thanks
09:32:21 <shapr> http://kungens.kemi.fi/~shae/src/haskell/hws.patch.gz
09:32:44 <shapr> hws looks like a good place to demo a real application of the ghc runtime loading
09:33:13 <Heffalump> yeah
09:33:28 <o3> shapr: i intend to do that
09:33:33 <shapr> spiffy :-)
09:33:33 <o3> after i actually start work on my thesis ;)
09:33:36 <shapr> ah, ok
09:33:37 <shapr> when is that?
09:33:56 <o3> well, i have a presentation to give next week which gives an outline of the timeline
09:34:21 <o3> hmm, i'm guessing i'll start it in about a month or two, when exams finish
09:34:34 <shapr> I was thinking about changing the hws AccessLogger module into a plugin...
09:35:28 <shapr> or maybe unifying the ErrorLogger and AccessLogger modules into a single plugin.
09:37:46 <o3> well, we'll see how i progress with that as my thesis draws nearer
09:37:51 <o3> but for now, i guess i should sleep -- 2:30am :)
09:37:53 <o3> night!
09:37:54 <shapr> g'night
09:38:51 <shapr> man, hws passes conf around everywhere... looks like a job for a confmonad or something.
09:42:45 <Heffalump> or an implicit parameter
09:45:03 <Heffalump> or unsafePerformIO :-)
09:45:18 <Heffalump> there was talk of making a "pure" one shot file reading function
09:45:28 <Heffalump> which might be ideal
09:48:38 <shapr> ?
09:49:06 <shapr> must be irc client probs
09:53:49 <Heffalump> from two different IPs?
09:54:24 <shapr> yah, it's the same guy.
09:55:36 <Heffalump> well yeah, it just seems strange that he'd have problems from two separate IPs
09:55:48 <shapr> that's true
09:57:55 <shapr> hrm, apache's API seems a bit weird.
10:02:09 <shapr> hws is nicely written
10:14:17 <shapr> hmm, this could be refactored....
10:14:45 <shapr> and will probably need to be for a plugin interface
11:27:14 <Marvin--> ludde?
11:27:22 <ludde> yeah
11:27:36 <Marvin--> -rw-------   1 progs-2  cthusers    4141 Oct 13 20:14 lab3/opsem.txt
11:27:41 <ludde> hrm
11:27:41 <Marvin--> would you mind g+r that one? :)'
11:27:44 <ludde> ok
11:27:48 <ludde> :)
11:27:56 <ludde> i wonder why it got those permissions
11:27:58 <ludde> i havn't changed it
11:28:30 <ludde> hrm
11:28:34 <ludde> everything has strange permissions
11:28:49 <ludde> anyway
11:28:52 <ludde> i noticed something
11:29:16 <ludde> in my compiler, i assume that C evaluates expressions from left to right (i compile to C)
11:29:38 <Marvin--> I thought it did
11:29:53 <ludde> "(x=1) + (x=2)" is unspecified in C, but my semantics say that x shall be 2
11:30:16 <ludde> in C, you're only allowed to modify an expression one time, between sequence points
11:30:22 <Marvin--> hmm, are you sure that it's unspecified in C99 too?
11:30:34 <ludde> i think so yeah
11:30:40 <Marvin--> sheesh, C is too complicated
11:30:47 <Marvin--> why that restriction?
11:30:55 <ludde> it leaves more room for the compiler
11:31:02 <ludde> it can implement it in the most efficient way
11:31:06 <ludde> implement=compile
11:31:11 <Marvin--> anyway, don't bother about it, I didn't know it anyway
11:31:16 <ludde> okay
11:34:09 <ludde> it's the same with parameter lists to functions, you don't know what order the arguments will be evaulated in.
11:57:22 <ludde> Marvin--: pollice verso ?
11:58:33 <Marvin--> qué?
11:58:47 <ludde> Translated into English, the phrase "pollice verso" is rendered as "thumbs down", indicating that the crowd has decided against sparing the life of the fallen gladiator. 
11:59:06 <Marvin--> oh
11:59:09 <ludde> i mean, did you find anything bad in the lab so far
11:59:09 <Marvin--> I haven't gotten to yours yet
11:59:12 <ludde> ah
11:59:15 <ludde> :)
11:59:21 <Heffalump> s/crowd/Emperor/ I thought
11:59:30 <ludde> Heffalump: hmm, maybe
11:59:40 <ludde> Heffalump: but that's the translation i found on the web :)
11:59:48 <Heffalump> :-)
11:59:56 <ludde> i don't know latin, just a few phrases :)
12:00:06 <Heffalump> the Emperor judged the mood of the crowd and made the final decision, I think
12:01:51 <BlizzNL> /me thinks this is a clear case of Quidquid latine dictum sit, altum sonatur.
12:03:46 <ludde> heh, yeah :)
12:14:57 <Marvin--> ludde: neat test program :-)
12:15:04 <ludde> heh :)
12:15:35 <ludde> it's the same test program i had for the other two labs, but i was hoping for you to notice it :)
12:15:48 <ludde> but this time i wrote out what it did :)
12:16:16 <Marvin--> heck I have barely tested code that looks good
12:16:20 <Marvin--> I know what to look for anyway
12:17:54 <ludde> true, it would take too much time otherwise, wouldn't it
12:19:39 <Marvin--> Often I know what to write to break things after just a few minutes looking at the specification
12:52:04 <ludde> ms: cool, great :)
12:52:11 <ludde> ms: typo, yeah
12:52:34 <Marvin--> phew, now I've corrected all hand-ins except for the ones today
12:53:29 <ludde> what's the percentage of failed ones? :)
12:53:39 <Marvin--> scary high
13:47:37 <BlizzNL> this is a dummy questoin I quess but I can't figure it out so I'll ask you guys: I have a function reading a file and it returns IO [Char] now i want to use the result with a function which expects a [Char] now hugs complains because the types are incorrect. What should I do to convert it to [Char] ?
13:48:13 <Logan> BlizzNL: Use a do statement.
13:48:53 <Logan> If the function that returns IO [Char] is called fun, and the one that takes [Char] is fun2, then you'd want: do { x <- fun; return (fun2 x) }
13:49:11 <Logan> If fun2 maps to type a, that do block will be of type IO a.
13:50:22 <BlizzNL> Logan: great thnx
13:51:33 <Logan> Basically, fun returns a value in the IO monad, so to work with that value you have to stay within the IO monad, which is what do lets you do.
14:29:31 <andersca> what does it mean when you've got data Foo = { foo::Int->Int }
14:29:35 <andersca> for example
14:48:56 <Logan> See http://haskell.org/tutorial/moretypes.html
14:48:57 <Logan> 6.2
14:49:21 <Marvin--> andersca: it's a record, they're cool
14:49:36 <andersca> cool
15:11:38 <BlizzNL> does haskell has a simple way to convert a String to an Int?
15:12:43 <andersca> read :: Int
15:12:44 <andersca> ?
15:12:59 <andersca> Prelude> read "123" :: Int
15:13:00 <andersca> 123
15:14:06 <BlizzNL> great I was already trying something like this : ctoi x = code x) - (code '0') .. old habits ;)
15:14:25 <Marvin--> read :: Read a => String -> a :-)
16:48:41 * shapr rebuilds parr
16:49:42 <shapr> hi Pseudonym
16:53:04 <Chilli> Moin
16:53:38 <shapr> hi Chilli, how's life?
16:54:19 <Chilli> ok, except that I need to prepare my lecture now, which is boring because the material is so basic
16:54:47 <shapr> ok then, could I ask you what I'm sposed to do with the parr/test/* files ?
16:55:16 <shapr> :-)
16:55:24 <Chilli> there are Makefiles in there
16:55:35 <Chilli> no, there aren;t
16:55:43 <Chilli> I went for a different Makefile struture this time
16:55:57 <Chilli> in the tioplevel Makefile, there are targets for the tests
16:56:13 <shapr> oh, ok...
16:56:28 <Chilli> the code in these directories should give you an idea how to use parr
16:56:38 <shapr> ok, thanks
16:59:09 <Chilli> so, what are you up to?  (except compiling parr)
16:59:33 <shapr> I read the "generalizing monads to arrows paper" about three times in the last week
17:00:04 <shapr> I'm finally getting a good idea of what mondas are ...
17:00:08 <shapr> strangely, arrows seem easier to understand.
17:00:37 <shapr> than monads, that is
17:00:50 <shapr> did you have fun at the ICFP?
17:00:51 <Chilli> you think so?
17:00:58 <Chilli> icfp was great
17:01:06 <Pseudonym> G'day.
17:01:09 <shapr> hi Pseudonym!
17:01:12 <Pseudonym> Sorry, afk briefly.
17:01:15 <Chilli> I like it a lot better than most other conferences actually
17:01:39 * Pseudonym still gets lost in arrows
17:01:47 <Pseudonym> I find monads much easier to understand, oddly enough.
17:02:03 <Pseudonym> Weird how these things work.
17:02:08 <shapr> yah it is...
17:02:29 <Heffalump> the HW was better than ICFP :-)
17:02:30 <shapr> on the other hand, I can't be sure I have arrows nailed down until I can think of some other places where they're useful.
17:02:40 <Heffalump> (and everyone I've talked to about it has said the same)
17:03:05 <Pseudonym> shapr: Exactly.  It's not until you independently develop a monad/arrow/whatever from scratch that you truly understand them.
17:03:54 <Igloo> HW?
17:04:01 <Heffalump> Haskell Workshop
17:04:09 <Igloo> Ah
17:04:33 <Chilli> Heffalump: :-)
17:08:55 * shapr proselytized NDP on other irc channels
17:09:01 <shapr> er, "proselytizes"
17:09:23 <Chilli> you did?
17:09:27 <shapr> yah sure..
17:09:42 <shapr> I even posted on comp.lang.functional and lambda the ultimate about Parr
17:09:50 <shapr> parr is cool stuff.
17:11:27 * Chilli is flattered.
17:11:44 <shapr> :-)
17:13:53 * shapr wants to think of new arrow applications
17:14:58 <Chilli> Did you read the FRP/Arrow-Paper that was at the HW?
17:15:08 <shapr> Yampa?
17:15:13 <shapr> no, I haven't read that one yet...
17:15:26 <shapr> I haven't been able to get the Yampa hacked version of HGL to compile either...
17:17:06 <Chilli> yes,the Yampa paper
17:25:14 <Pseudonym> Does anyone here know anything about differential geometry?
17:36:34 <Heffalump> yes, I know it scares me
17:37:18 <Chilli> :-)
17:37:27 <Pseudonym> :-)
17:38:30 <Pseudonym> I'm trying to find the points on a parametric surface where the principal curvatures are extremal.
17:38:44 <Pseudonym> Which is a problem, since I know very, very little about this stuff.
17:53:43 <shapr> hmm
18:11:45 <tez> Anyone awake?
18:12:39 <Pseudonym> No, but my boss thinks I'm working.
18:12:39 * shapr blinks
18:12:43 <shapr> heh
18:12:48 <shapr> my woman thinks I'm sleeping
18:12:56 <tez> :-)
18:12:58 <shapr> actually, she might be right....
18:13:07 <tez> Well, I just wanted to ask a (silly) question.
18:13:16 <Pseudonym> We live for silly questions.
18:13:20 <tez> What the hell are 'arrows' in this context?
18:13:27 <shapr> really sharp things...
18:13:30 <shapr> you shoot them at people.
18:13:32 <shapr> oh..
18:13:33 <Pseudonym> Time flies like them.
18:13:34 <tez> Ah, of course.
18:13:35 <shapr> this is #haskell
18:13:38 <shapr> never mind
18:13:45 * shapr grins
18:13:52 <tez> I thought it was just a F1 racing team.
18:13:58 <shapr> is it?
18:14:03 <tez> lol
18:14:10 <tez> I think they still are.
18:14:23 <shapr> Arrows are more general than Monads
18:14:47 <shapr> http://haskell.cs.yale.edu/arrows/
18:14:48 <tez> Is it a complex topic, or is there some web page that has a cursory intro?
18:14:52 <tez> Oh, cheers :-)
18:16:02 <tez> Is it a very new abstraction device in haskell - ie can I use these constructions on Hugs or GHC currently?
18:16:12 <shapr> afaik, you can already use them
18:16:29 <Pseudonym> You don't get pretty syntax like "do" notation.
18:16:32 <shapr> there are at least two apps/libs that use them.
18:16:59 <tez> Ok.
18:17:37 <tez> There just seemed to be a lot of discussion about arrows here recently.  Was it a topic at the icfp?
18:18:06 * shapr dunno
18:18:17 <shapr> I've been trying to sneak up on Arrows for about a year now...
18:18:43 <Chilli> tez: there was a paper about the use of arrows for Functional reactive Programming at the Haskell Workshop that was co-located with icfp
18:19:43 <Chilli> tez: think of arrows (like monads) as a particular way to structure the interfaces of a range of libraries (that met certain properties)
18:20:10 <tez> Ok
18:20:26 <Chilli> I guess to OO people would call it a design pattern
18:20:42 <Pseudonym> Uhm... not quite.
18:20:53 <Chilli> only that arrows are not just an ad hoc interface generalised from a handful of cases where they occured 
18:21:18 <Chilli> but are actually well motivated by mathematical structures
18:21:43 <Pseudonym> Arrows are not like design patterns because they are fundamental.
18:21:50 <Pseudonym> Design patterns are engineering experience codified.
18:21:56 <Chilli> Pseudonym: I know that it strictly speaking isn't a design pattern, but I think design patters are loosely enough defined 
18:22:21 <Chilli> I don't see a qualitative difference
18:22:28 <Pseudonym> Fair enough.  I've gotten annoyed in the past when Haskell people misunderstand design patterns. :-)
18:22:41 <Pseudonym> There's a lot of it going around on haskell-cafe.
18:22:58 <Chilli> I think I can justify my poiunt in two ways
18:23:14 <Pseudonym> I think the analogy is sufficient for the purpose of this IRC discussion.
18:23:18 <Pseudonym> For the record.
18:23:21 <Chilli> (1) in some areas, you don't have much fundamentals and so can't derive from first principles
18:23:43 <Chilli> so you generalise engineering ort other experience
18:24:07 <Chilli> the goals are similar, but the means a different
18:24:16 <Chilli> (so are some of the properties of the outcome)
18:24:34 <Chilli> (2) math is nothing but a formal codification of our experiences
18:24:44 <Chilli> (a very successful one)
18:24:50 <Pseudonym> I disagree with point (2).
18:25:02 <Chilli> why?
18:25:03 <Pseudonym> Most of the time, the maths comes first.
18:25:29 <Pseudonym> Very rarely are new areas of mathematics invented to solve real problems.
18:25:43 <Chilli> Early math very much came from physicists formnalising results of experiemnts
18:25:44 <Pseudonym> Generally, the maths is invented first, then someone notices that it has practical uses.
18:25:58 <Pseudonym> No, I disagree.  Greek mathematics was based on philosophy.
18:26:06 <Pseudonym> Roman mathematics was certainly practical.
18:26:26 <Chilli> even greek math was inspired by observations of eg geometric shapes etc
18:27:18 * Heffalump notes that there is a do-like syntax for arrows, but you have to use a pre-processor
18:27:22 <Pseudonym> Inspired, for sure, but it was still fundamentally a philosophical exercise.  Calling it a "formal codification of [...] experiences" is stretching it a bit.
18:27:30 <Heffalump> they're almost unusable without it, I think (though I've not used them either way)
18:27:46 <Chilli> Pseudonym: ok, I agree it is stretching it a bit
18:27:56 <Pseudonym> I do take your point, though.
18:28:05 <Heffalump> it's quite elegant, and it reduces to being equivalent to do syntax for arrows that are also monads
18:28:14 <Pseudonym> Ideally, programmers should work on the boundary of good theory and good practice.
18:28:24 <Chilli> agreed
18:28:27 <Pseudonym> Arrows, monads etc are good theory, design patterns are good practice.
18:29:12 <Heffalump> my take on design patterns is that they're a poor man's combinator library :-)
18:29:25 * Pseudonym accidentally sets fire to Heffalump
18:29:31 <Pseudonym> Oh, I am sorry.
18:29:52 <Heffalump> well, if you're using Java, you are a poor man :-)
18:30:03 * Pseudonym gets paid to use C++
18:30:10 <Chilli> IMHO the application of arrows and monads to programming very happened by people already getting close to the idea by coming from a purely practical/experimental approach
18:30:13 <Pseudonym> And I'm certainly not poor.
18:30:14 * Logan doesn't get paid for anything. ):
18:30:30 <Heffalump> I didn't mean poor in the sense of not rich :-)
18:30:37 <Chilli> and then somebody noticed the similarity between the abstract concept and the practical development
18:30:43 <Pseudonym> Chilli: Right.
18:30:48 <Logan> Heffalump: Yes you did. :P
18:30:58 <Chilli> and so shortened the emperical abstraction process dramatical
18:31:06 <Heffalump> No I didn't :-p
18:31:07 <Chilli> by falling back on a large body of existing theory
18:31:34 <Chilli> design patterns "suffer" from not (often) connecting to such existing theory
18:31:40 <Logan> I take it that you didn't mean rich or poor as in monetary wealth.
18:31:42 <Heffalump> didn't John Hughes only connect Arrows with the existing theory after he'd developed most of the details?
18:32:00 <Pseudonym> Chilli: Ah, but the converse is also true.  Just like hackers hate theory, mathematicians hate practice.
18:32:08 <Chilli> "suffer" here is, of course, from the point of an arrogant functional programmer
18:32:08 <Pseudonym> Over-generalising for a moment.
18:32:13 <Heffalump> logan: I meant it in the sense of "unfortunate", in which context I don't think "rich" is an appropriate antonym.
18:32:24 <Chilli> only that *real* hackers don't hate theory
18:32:37 <Heffalump> chilli: well, you would say that :-)
18:32:42 * Pseudonym laughs
18:32:48 <Pseudonym> Haskell hackers don't hate theory.
18:33:08 <Pseudonym> True Haskell hackers avoid it only when it gets in the way.
18:33:18 <Chilli> I am pretty sure that the archetypical MIT hacker didin't/doesn't hate theory either
18:33:37 <Pseudonym> I'm overgeneralising, of course.
18:34:10 <Chilli> in a sense, I think this is distinguishes many hackers from random coders
18:34:33 <Pseudonym> When I say "hacker", I'm not talking about visual basic script kiddies.
18:34:45 <tez> "Random coders"?  Sounds like something to do with a room full of monkeys...
18:34:50 <Chilli> sure, I didn't mean them either
18:34:53 <Pseudonym> Which is close to what I think you mean by "random coders".
18:34:59 <Chilli> tez: hehe
18:35:04 <Pseudonym> Or the Unix equivalent.
18:35:22 <o3> Pseudonym: perl script kiddies ;)
18:35:28 <Pseudonym> :-)
18:35:29 <Chilli> no, by random coders I mean...hmmm...uninspired (professional) programmers
18:35:33 <Pseudonym> Right.
18:35:53 <Chilli> scipt kiddies are script kiddies; nothing to do with coding
18:35:56 <Pseudonym> Random coders is what you get when you ignore design patterns. :-)
18:35:58 <Chilli> well, not much anyway
18:36:20 <Chilli> yes
18:36:24 <Pseudonym> Random coder == person + compiler - engineering
18:36:49 <Chilli> design patterns examplify the desire for general/abstract concepts
18:36:56 * Pseudonym nods
18:37:20 <Pseudonym> By "hacker" I'm referring to an engineer with a feel for the realities of the business.
18:37:24 <Pseudonym> Which may include deadlines.
18:37:27 <Chilli> only that in an FP language, you can go a step further due to the strong fundations of the language
18:37:58 <Chilli> hmm, hackers and deadlines often don't mix very well
18:38:04 <Chilli> most hackers are too idealistic
18:38:08 <Pseudonym> The hacker often has to follow the rule of "get it working then get it pretty" by necessity.
18:38:10 <Pseudonym> Oh, I know.
18:38:14 <Chilli> to care too much about deadlines
18:38:15 <Pseudonym> I'm way too idealistic.
18:38:21 <o3> Chilli: most deadlines are too idealistic, you mean :)
18:38:38 <Chilli> o3: definitely!
18:38:50 <Pseudonym> My boss (who is one of the best software engineers I've ever met) has warned be more than once not to write pretty code when it's not warranted.
18:39:09 <Pseudonym> Simply because it's more likely to work sooner, and we know it won't have to be maintained later.
18:39:40 <o3> Pseudonym: Sounds like a pragmatist
18:39:57 <Pseudonym> When you have to answer to bean counters, you'll be a pragmatist too.
18:41:20 <Pseudonym> It's kind of like how movies often push the disparity between "legal", "moral" and "right", all three of which occasionally have little to do with each other (especially in movie scenarios).
18:41:24 <o3> Pseudonym: I'm about as pragmatic as you can get
18:41:45 <o3> Thus my love for, say, Perl :)
18:42:10 <Pseudonym> I still like Perl.
18:42:30 * Pseudonym presented a paper at TPC a couple of years ago
18:42:30 <o3> On the topic of prgamatism, I think I'll just give up installing this 40MB printer driver, throw out this stupid Windows box, and get a Mac
18:43:24 <o3> Pseudonym: cool
18:43:24 <Chilli> eliminating windows boxen is surely a Good Thing
18:43:55 <o3> Chilli: all the next computers in this house are going to be macs.  i'm so sick of screwing around with PCs
18:43:56 <tez> 40MB printer driver?!?
18:44:04 <Pseudonym> I think, incidentally, this is why hackers tend to be funny.
18:44:13 <Pseudonym> They do say that behind every comedian is a frustrated idealist.
18:44:15 <tez> I hope it's either a really big printer, or a really small one.
18:44:20 <o3> tez: gotta love those all-in-one printer/faxes/scanner devices ;)
18:44:28 <tez> Ah, I've seen them.
18:44:48 <o3> anyway, i'm off
18:44:51 <o3> seizures
18:44:58 <Chilli> Pseudonym: hmm, interesting theory
18:45:02 <Pseudonym> Search and seizures?
18:45:25 <Pseudonym> Chilli: Thanks.  I just made it up.
18:55:11 <Pseudonym> Dunno what that was.
18:55:16 <Pseudonym> join linuxos
18:55:19 <Pseudonym> Whoops.
18:57:13 <tez> How is #linuxos different to #linux?
18:58:12 <Pseudonym> Dunno.  Never dropped into #linux.
18:58:25 <tez> I only go there for the noise.
18:58:37 <Pseudonym> No noise in #linuxos.  That's probably the difference, then.
18:58:59 <Pseudonym> Precious little traffic, too.
23:34:27 <Pseudonym> There's nothing wrong with these overlapping instances, dammit.
23:34:30 * Pseudonym sighs
