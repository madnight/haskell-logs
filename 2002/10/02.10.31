00:54:57 <andersca> hey Marvin--
00:55:13 <Marvin--> morning
00:55:22 <andersca> Marvin--: so your breakout talk got me inspired
00:55:29 <Marvin--> heh
00:55:30 <andersca> Marvin--: prolly doing a gameboy breakout for maskinnära programmering
00:59:20 * Marvin-- swears at wmaker+gtk
01:02:04 <galority> Marvin--: could you give me the link to your hws-wp please? I lost it and it isn't in the topic anymore.
01:02:33 <Marvin--> meh, stupid topic thingy
01:02:40 <Marvin--> http://www.dum.chalmers.se/~marvin/hws-wp/
01:03:02 <galority> Thanks.
01:03:08 <Marvin--> andersca: do you know if gtk(2) does weird things with window focusing?
01:03:33 <andersca> Marvin--: don't think it should be any different
01:03:36 <andersca> what's happening?
01:04:30 <Marvin--> andersca: say I have a gtk2 window (e.g. glade2) under a non-gtk2 window (e.g. mlterm) on a workspace
01:05:01 <Marvin--> andersca: sometimes (pretty damn often) when I switch to that workspace while having the mouse pointer over the area that both windows cover (but obviously, the mlterm window is on top), the gtk2 window gets focus instead
01:05:30 <andersca> weird, but I don't think gtk windows take focus without being asked to do so
01:06:21 <Marvin--> and another weird thing, when I start glade, it opens up three windows, and they *rapidly* switch focus between each other for a second or so, sorta fighting for focus, then one of them gets the focus and stays with it
01:06:48 <andersca> hmm, that's odd
01:07:09 <Marvin--> and hey, I just noticed that the focus-fighting happens when I have a gtk2 window over another gtk2 window and switches to that workspace while having the mouse pointer over them both
01:07:58 <Marvin--> I can't remember seeing this in gtk1, and I can't say I've seen it under wmaker with anything else than gtk2 windows, so there must be something creepy with the combination wmaker+gtk2
01:08:23 <andersca> yeah
01:09:04 <Marvin--> I'm fairly happy with wmaker, I've come to the conclusion that all window manager suck, one way or another, but at least wmaker sucks in ways I'm used to
01:09:24 <Marvin--> and wmaker is quite okay "standalone"
01:09:45 <andersca> nod
01:09:47 <Marvin--> but I really would love to use nautilus
01:10:15 <Marvin--> which means having the gnome panel I suppose, because the windowmaker menu gets hidden when you use nautilus for the desktop :-)
01:10:59 <Marvin--> but as long as there's the wmaker/gtk2 problem...brr...
01:11:32 <Marvin--> I don't see it most of the time because evolution, xchat, gabber and galeon in debian are still gtk1, but when the gtk2 versions are rolled out...
01:11:59 <andersca> I haven't heard anyone else having this problem either, nor any bugs reported about it
01:12:01 <Marvin--> maybe if sawfish gets better I can switch
01:12:11 <Marvin--> well I reported it on gnome-terminal which is where I found it first
01:12:30 <Marvin--> but after that I've seen it in several gtk2 programs
01:12:45 * andersca downloads WindowMaker
01:12:51 <andersca> lemme see if I can reproduce it in an Xnest window
01:13:51 <Heffalump> oh, some channel split put the topic back?
01:14:03 <Marvin--> Heffalump: or something, who knows
01:14:05 <andersca> Marvin--: what version are you using?
01:14:12 <Heffalump> or is ChanServ broken
01:14:21 <Marvin--> andersca: the latest version, 0.80.1
01:14:24 <andersca> ok
01:14:25 * andersca downloads
01:17:08 <Marvin--> eh, how do I use xnest?
01:17:53 <andersca> just run Xnest :1
01:18:56 <Marvin--> d'oh
01:20:26 <Marvin--> hmm, I started an xterm in it, but I can't type anything in it...
01:20:31 <Marvin--> err, odd, now I can
01:20:55 <andersca> you prolly need to start a wm too
01:21:41 <Marvin--> yeah
01:21:52 <Marvin--> heh, nesting wmaker in wmaker is a bit of a problem with key bindings ;)
01:27:42 <Marvin--> finding anything?
01:30:22 <andersca> hmm, I'm getting permission errors, can't connect to the display
01:30:42 <andersca> ah, -ac
01:31:19 <andersca> I'm getting bad drawable errors
01:37:24 <Marvin--> wow, I gotta rush
02:33:20 <LaSalle_> You have received a message!  
02:33:20 <LaSalle_> okok....i study la..bb
02:33:24 <LaSalle_> oops
02:33:25 <LaSalle_> sorry
02:34:02 <LaSalle_> can someone here help me with a thing that i wanna do ?
02:35:30 <LaSalle_> define a function applyAll that, given a list of functions [f1, f2, ...,fn] and a value v, returns the result f1(f2 (... (fn v)...))
02:35:30 <LaSalle_> eg
02:35:30 <LaSalle_> applyAll [simple 2 2, (+3)] 5 => 20
02:39:33 <Heffalump> what do you need it for?
02:39:47 <LaSalle_> just an exercise.... with high order functions...
02:40:08 <Heffalump> do you know about foldr?
02:40:09 <LaSalle_> i want to use foldr here...
02:40:13 <Heffalump> ok.
02:40:30 <LaSalle_> but i can't quite see how...as the list is now a list of functions...
02:40:34 <Heffalump> think about the definition of foldr
02:41:25 <Heffalump> and its type
02:42:50 <LaSalle_> apply list arg = foldr dunnowhattoputhere arg list
02:43:16 <Heffalump> ok.
02:43:27 <Heffalump> so remember the definition of foldr
02:43:31 <LaSalle_> probably need to create an annoymous function there?
02:43:39 <Heffalump> probably, yes
02:43:40 <LaSalle_> yep
02:43:55 <Heffalump> if the list is empty, what'll happen?
02:44:27 <LaSalle_> returns an empty list...
02:44:34 <LaSalle_> opos
02:44:38 <LaSalle_> return an error...
02:44:42 <Heffalump> no..
02:44:46 <Heffalump> think about the definition of foldr
02:45:23 * Heffalump has to go into work, back in 30 mins
02:45:24 <LaSalle_> i thought it depends on the function? and the init value?
02:45:29 <LaSalle_> alrite
02:45:36 <Heffalump> look carefully at the definition of foldr
02:45:41 <Heffalump> paste it here if that helps
02:45:47 <LaSalle_> hehe ok
02:46:03 * Heffalump disappears
02:46:33 <Heffalump> once you've worked out if it makes sense for the empty list, then look at what happens with (x:xs)
03:13:03 <LaSalle_> yea~
03:23:37 * Heffalump reappears
03:28:42 <o3> it's the reappearing heffalump!
03:30:38 <Heffalump> as if by magic!
03:30:57 <o3> any sufficient advanced technology ...
03:31:15 <Heffalump> hmm...
03:31:22 * Heffalump wouldn't call a bike all that advanced
03:31:35 <Heffalump> and I'd be impressed if it seemed like magic to you
04:25:13 * adept_ slaps LaSalle_ around a bit with a large trout
04:47:34 <dark> I think we have a bad case of creeping topic here :)
04:48:02 <o3> topic add "This space left intentionally blank"
04:48:11 <mgoetze> dark: feel free to evaluate it lazily
04:48:25 <o3> mgoetze: *groan* :)
04:48:28 <dark> mgoetze: I do everything lazily.  That is why I like Haskell so much :)
04:48:48 <mgoetze> myreadingfortoday = take 2 topic
04:48:59 <LaSalle> do you like curry? :P
04:49:49 <LaSalle> "curry"ing rather?
04:50:11 <mgoetze> i like my programming langauges spicy!
04:50:19 <LaSalle> ahha
04:50:32 <o3> now that's obscure
04:51:14 <dark> That's why all the numbers in my programs actually refer to sex positions.
04:51:56 <LaSalle> hahahahahah
06:36:14 * Igloo funally gets hold of Algorithms: A functional approach and wonders what I wanted it for
06:46:23 <Segora> re
06:51:09 <o3> ok, i have to ask.  can you _really_ do i/o in reverse order in haskell?
06:51:37 <cleverdra> reverse order?
06:51:47 <o3> yeah, just run the monad in reverse order
06:51:59 <o3> i've just never seen example code for such a thing
06:52:00 <cleverdra> reverse order?
06:52:29 <o3> erm.  hmm.
06:52:52 <o3> i think i'll just ask chilli, he was the guy who told me it was possible
06:52:56 <o3> (in a lecture)
06:53:07 <cleverdra> OK.
06:53:22 <o3> i was just trying to make heads and tails out of it :)
06:53:50 * cleverdra thinks about programs being turned inside-out and lambdas spinning around and effect leading to cause.
06:54:28 <o3> ah, here we go
06:54:31 <cleverdra> I suppose that you could run a program backwards after you run it forwards.
06:54:33 <o3> http://www.google.com/search?q=haskell+reverse+io+monad&hl=en&lr=&ie=UTF-8&start=10&sa=N
06:54:35 <o3> top link on that page
06:54:37 <cleverdra> err, just the IO.
06:54:42 <o3> Passing state backwards
06:54:43 <o3> How many calls of this function are left in the execution?
06:54:43 <o3> Just reverse passing of state in bind
06:54:43 <o3> Depends on lazy evaluation
07:24:53 <dark> You know, a couple of months ago, there was sometimes this big orange thing in the sky.  Often it was annoyingly bright, but still, I would like to have it back.  It was pleasant to be able to look outside and see something.
07:26:24 <cleverdra> dark - roof-mounted concert/car-sale -style floodlights?
07:28:21 <dark> Hmm, that would work.
07:28:53 <dark> Maybe I could have them triggered by my curtains and blinds, so that they turn on when I open them.
08:22:36 * Igloo lol at
08:22:37 <Igloo> ghc-5.05: panic! (the `impossible' happened, GHC version 5.05):
08:22:37 <Igloo>         what now?
08:22:53 <ludde> hi Marvin--
08:22:58 <Marvin--> hullo
08:23:09 <Marvin--> Igloo: it's impossible, so surely it didn't happen :)
08:23:15 <ludde> Marvin--: did you have the AFP exam today?
08:23:18 <Marvin--> ludde: yup
08:23:27 <ludde> Marvin--: what was it like+
08:23:28 <Igloo> The impossible often happens, but normally GHC tells you what sort of impossible thing it was  :-)
08:23:30 <dark> The impossible happening is known as "bottom"./
08:23:35 <cleverdra> Igloo - send the email, as requested.
08:23:55 <Marvin--> ludde: very relaxed, we just talked about my report a bit, he wanted some things clarified and so on
08:24:10 <dark> Marvin: Did the issue of access vs. auth come up at all?
08:24:26 <cleverdra> Igloo - curiously, did you just access a binding whose definition was interrupted (as with 'x <- getChar'?)
08:24:30 <Marvin--> A Swedish comedian did a wonderful monologue over probabilities and Harrisburg
08:24:41 <hdaume> hi all
08:24:44 <ludde> Marvin--: what kind of stuff did he ask?
08:24:48 <Marvin--> dark: no :) the dynamic loading and type safety were the interesting bits obviously
08:24:57 <Igloo> clev: Huh?
08:25:08 <Igloo> It was a compile time warning
08:25:17 <dark> Marvin: Did you have to defend your decision to live without type safety?
08:25:19 <cleverdra> Igloo - oh?  That's much worse, OK.
08:25:38 <Igloo> Oh, you can make them happen in numerous ways if you play with TH for 5 mins
08:26:12 <Marvin--> dark: not really, we mainly discussed how it could be improved, and reflected over what this meant for exporting/importing overloaded and polymorphic types
08:37:44 <Marvin--> andersca?
09:19:09 <Marvin--> bah, the #windowmaker people seemed to be upset about me calling windowmaker "the window manager that sucks the least"
09:19:54 <hdaume> hehe
09:21:31 <dark> Obviously they are uncultured barbarians.
09:21:50 <Marvin--> apparently they are working on netwm support, which would solve my gtk2 problems
09:23:54 * dark furtively removes morgue.txt from his source directory before committing.
09:24:33 <Marvin--> "The authors of this specification acknowledge that there is no standard method to allow the Window Manager to manage windows that are part of a Window-in-Window MDI application. Application authors are advised to use some other form of MDI, or to propose a mechanism to be included in a future revision of this specification."
09:24:35 <Marvin--> heh
09:24:59 <dark> MDI?
09:25:58 <Marvin--> multiple document interface or something like that
09:26:20 <Marvin--> the icky window-in-window thing that windows uses
09:26:52 <dark> I'm blessedly unaware of said icky thing :)
09:26:52 <hdaume> Marvin--: i rather like it ;); in fact, the lack of MDI is what i hate most about *nix development...i would much rather have an mdi system like VS ;)
09:28:19 <Marvin--> hdaume: to each his own, I suppose... I find it horribly irritating, but I don't remember what the usability experts say about it
09:28:34 <Marvin--> the only thing I can think of that it is good at is minimizing and restoring a group of windows
09:29:27 <hdaume> i like it because i no longer have to worry about rearranging my windows so i can see exactly what i want to see; the system does it for me.  
09:29:53 <hdaume> i dunno...i grew up programming like that and so it's what i'm used to :)
09:30:42 <dark> Hmm, is this like what the Borland IDE did?
09:30:43 <Marvin--> uh, I don't see why that can't be done without MDI...
09:30:54 <hdaume> dark: yeah
09:30:57 <Marvin--> Borland Delphi 1 didn't use MDI afaik
09:31:05 <hdaume> i never used delphi...
09:31:06 <dark> I think it worked with a text console... :-)
09:31:20 <hdaume> dark: do you mean for like Turbo Pascall, etc.
09:31:24 <dark> Yeah.
09:31:24 <hdaume> or Turbo C?
09:31:28 <hdaume> yeah, same thing
09:31:30 <dark> Weren't they similar?
09:31:36 <Marvin--> well, obviously, MDI is neat in text-mode, but I see no reason for it in a windowing system
09:31:37 <hdaume> they were pretty much identical
09:31:54 <dark> Anyway, I remember using that interface just like I would use tabbed windows, except that it used more screen space.
09:32:13 <dark> Except when debugging, when it helped to have a divided screen.
09:32:43 <Marvin--> anyhow, delphi 1 didn't use windows-in-windows, the windows were totally different... and I think that at least some version of VB that I've used (the horrors) was without MDI too
09:32:55 <hdaume> Marvin--:it's not that you can't do it with a non-MDI app...it's just that no one does...it seems to be in direct violation of the "i use unix => i must have 50 programs to do one thing => they must all be in different windows" philosophy
09:33:14 <hdaume> yea, VB pre 3.0 was non-mdi; 3.0 and beyond was MDI
09:33:26 * dark sees no reason to have multiple xterms in one window :-)
09:33:50 <Marvin--> how old is VB 3.0 though? *wonders what the usual version was four years go*
09:33:51 <Heffalump> tabs can be useful
09:34:11 <Marvin--> tabs yes, freeform windows... not really
09:34:14 <dark> Hmm I wonder how popular a tabbed terminal-emulator would be.
09:34:16 <Marvin--> they solve different problems
09:34:17 <hdaume> 3.0 is pretty old...let's see...sophomore year in highschool for me, which makes it...like 7 years old
09:34:18 <dark> Windows has one, doesn't it?
09:34:25 <Marvin--> dark: gnome-terminal does that
09:34:30 <dark> Marvin: Oh, ok :)
09:34:35 <Marvin--> dark: and konsole too I think
09:34:44 <hdaume> Marvin--: yup, konsole does also
09:34:46 <Marvin--> hdaume: hmm, then I must have a bad memory
09:35:04 <dark> I considered making a "leanterm" once, a terminal emulator that just emulates a terminal, and doesn't gobble up several megabytes to do it.
09:35:09 <dark> s/considered/started/
09:35:22 <dark> But I guess it's a lost cause these days.  No-one would use it :)
09:36:00 <Marvin--> *shrug* if you only have a few terms then it's not that useful saving one megabyte here or there
09:36:12 <dark> I often have more than a dozen open.
09:36:26 <dark> But these days I have enough memory for it :)
09:37:12 <dark> Usually it's an xterm running bash, which takes another 1.5 MB...
09:38:04 <Marvin--> currently I use mainly mlterm, but as soon as the wmaker/gtk2 issues are resolved, I'll be using mainly gnome-terminal
09:38:23 <Marvin--> sure, mlterm is a bit heavyweight, but it handles unicode beautifully
09:39:49 <Marvin--> --- Overfiend has changed the topic to: ChanServ is becoming annoying. (Jo-Con-El) | All hail OPN^WFreenode^WOPN!!! B35T 1RC N3TWURK 3VUR!!!!1111!!!!!!1!!
09:39:50 <Marvin--> hmm :)
10:20:59 * dark tries to remember if Haskell has octal numbers.
10:21:48 <hdaume> dark: i believe it does
10:21:55 <hdaume> \o012 or something...
10:22:54 <hdaume> ah...according to the report:
10:23:11 <hdaume> integer -> ... | 0o octal | 0O octal
10:23:30 <hdaume> where octal is (0-7)*
10:23:49 <cleverdra> Sigh.  Silly restrictive numerals.
10:29:36 <dark> Thanks :)
10:29:50 <dark> I tried with leading 0, didn't think of 0o.
10:30:58 <hdaume> remember: the report is your friend :)
10:31:10 <hdaume> though it is a bit obtuse at times *grin*
10:37:35 <cleverdra> radix _ 0 = 0
10:37:36 <cleverdra> radix b n = let (t,h) = n `divMod` 10 in h + radix' b t
10:37:36 <cleverdra>   where radix' _ 0 = 0
10:37:36 <cleverdra>         radix' b n = let (t,h) = n `divMod` 10 in h*b + radix' (b*b) t
10:38:10 <cleverdra> How can I put that more succinctly?  Given constant arguments, would that have any overhead over a literal?
10:38:39 <cleverdra> oh, but it's broken.
10:39:52 <cleverdra> change the last line in that paste to: radix' b' n = let (t,h) = n `divMod` 10 in h*b' + radix' (b'*b) t
10:53:14 <dark> cleverdra: I think you can get rid of radix' by calling b * radix b t instead
10:55:31 <dark> cleverdra: And ghc is pretty aggressive at inlining :)  You can add {-# INLINE radix #-} if you're worried.
10:55:56 <cleverdra> inlining is not no-runtime-overhead =)
10:56:40 <dark> If it gets inlined and constant-folded to a simple integer, I think it is.
10:57:16 <cleverdra> but thank you; I've actually decided that the whole idea was wrong -- I'm writing fromRadix :: Int -> [Char] -> Int
10:57:23 <cleverdra> Oh, OK.
10:57:40 <dark> [Char] to be able to write hex digits?
10:57:48 <cleverdra> To be able write base-26 digits
10:57:57 <dark> base-36, surely :-)
10:58:00 <cleverdra> the above radix only allows base-10 and sub.
10:58:07 <cleverdra> dark - err, yes, that's what I meant =)
10:58:17 <dark> In Swedish, you can go up to base-39!
11:00:13 <cleverdra> =)
11:00:18 <cleverdra> extCharToDigit c | and [c >= '0', c <= '9'] = ord c - ord '0'
11:00:19 <cleverdra>                  | and [c >= 'a', c <= 'z'] = ord c - ord 'a' + 10
11:00:19 <cleverdra> 		 | and [c >= 'A', c <= 'Z'] = ord c - ord 'A' + 10
11:00:37 <cleverdra> with proper indentation :-/
11:02:38 <dark> Hmm I don't know if ghc will still inline that :)
11:03:14 <dark> On the other hand, I've seen it do pretty persistent inlining and folding.  Did I tell you about how I had to add NOTINLINE pragmas to my test cases so that the algorithm would be run by my code instead of by the compiler?
11:03:31 <cleverdra> no, but that's interesting =)
11:04:12 <dark> It was a shortest-path search, which would already take half a minute with optimized code :)  Having the compiler do it took... well, I don't know, I killed it after five minutes.
11:04:49 <cleverdra> fromRadix :: Int -> [Char] -> Int
11:04:49 <cleverdra> fromRadix b s = let (d:ds) = reverse s in (extCharToDigit d) + fromRadix' b ds
11:04:49 <cleverdra>   where fromRadix' _ [] = 0
11:04:49 <cleverdra>         fromRadix' b' (d:ds) = (extCharToDigit d)*b' + fromRadix' (b'*b) ds
11:04:55 <cleverdra> That seems to work.
11:05:17 <dark> reverse?
11:05:20 <dark> Oh, yeah :)
11:08:00 <cleverdra> dark - I don't quite understand your anecdote.  'Having the compiler do it' means that GHC tried to do it at compile-time, right?  When you added NOTINLINE pragmas it took half a minute at runtime?
11:08:33 <dark> Hmm, haven't tested this version yet, but:
11:08:36 <dark> fromRadix b s = foldl 0 (\n d -> b * n + d) (map extCharToDigit s)
11:08:46 <dark> cleverdra: Right.
11:09:07 <dark> cleverdra: These were test cases, so all the data (large arrays) was defined as constants
11:10:31 <cleverdra> dark - your fromRadix seems to want four arguments
11:10:54 <dark> I put the 0 in the wrong place :)
11:10:57 <dark> fromRadix b s = foldl (\n d -> b * n + d) 0 (map extCharToDigit s)
11:11:05 <cleverdra> oops, right.
11:11:14 <dark> I always do that.
11:11:23 <dark> Maybe I should define my_foldl :-)
11:11:33 <dark> It seems to work here.
11:11:47 <cleverdra> Also here =)
11:12:00 <cleverdra> Thanks!
11:13:43 <cleverdra> (//) = fromRadix
11:13:46 <cleverdra> 16//"ff"
11:13:55 <cleverdra> How's that for syntax?
11:18:12 <cleverdra> (one-pass: fromRadix b s = foldl (\n d -> b * n + extCharToDigit d) 0 s)
11:33:00 * cleverdra waits impatiently.
15:15:56 --- topic: 'mo' nads than you || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS  0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || ICFP is over <Erwin> Your mother asked you to write COM program? Who are you, Dilbert? || Ganesh's HaskPerl challenge: make Haskell look like line noise too!'
15:15:56 --- topic: set by ChanServ on [Wed Oct 30 17:21:57 2002]
15:50:42 * Igloo thinks about Diplomacy and variants and HWS
15:58:09 <dark> I finally have a version of my tool that can fetch its own archive correctly, but it fails on my evil@wrong archive :)
15:59:03 <dark> The problem I keep running into is that I make bad assumptions about how larch does things.  It all stems from my unwillingness to study and grok 1000 lines of shell code :)
16:00:32 <Igloo> I was converting the zlib C code into Haskell fairly directly, but it started getting too ugly
16:00:47 <Igloo> I wish the RFC was better
16:01:27 <dark> Hmm, I think with zlib I'd follow the "link with, don't compete with" advice :)
16:01:42 <Pseudonym> I would too.
16:02:01 <Pseudonym> Note that bzip2 was written by a Haskeller.
16:02:27 <dark> Unfortunately, libz's C interface is really evil from a Haskell perspective.  You'd need a C wrapper for every function.
16:02:58 <Heffalump> a GHC hacker, no less
16:03:14 <Pseudonym> Indeed.
16:03:20 <Igloo> But everything in the world should be written in Haskell
16:03:21 <Pseudonym> Julian Seward, from memory.
16:03:36 <Pseudonym> Igloo: Yes.  COBOL compilers should be written in Haskell, even.
16:03:55 <Igloo> Part of the nastiness of zlib stems from the fact it needs to simulate laziness in C
16:04:43 <Igloo> But I've got code for that bit now, it's the decompressing of the various trees for the dynamic Huffman codes that's killing me
16:05:10 <Pseudonym> One of the bad design decisions for the deflate algorithm was not to go with canonical Huffman codes.
16:05:31 <Pseudonym> Much easier to decompress.  No trees required.
16:05:34 <Igloo> HDYM? There is a set of static huffman codes too
16:06:00 <Igloo> Which means I can inflate simple things
16:06:32 <Igloo> Bit big non-repetitive things (where big = about 50 chars or more) use dynamic ones
16:06:42 <Pseudonym> Canonical huffman codes are a scheme for assigning codes to symbols such that no trees are required to compress or decompress.
16:07:17 <dark> Pseudonym: Doesn't that get too close to the LZW patents, though?
16:07:18 <Pseudonym> And I believe it only takes space proportional to the length of the longest code if you order the symbols correctly.
16:07:22 <Pseudonym> Nope.
16:07:45 <Pseudonym> They don't do even close to the same thing.
16:08:13 <dark> Then why do the descriptions sound so similar? :)
16:08:16 <Pseudonym> http://www.arturocampos.com/ac_canonical_huffman.html
16:08:19 <Pseudonym> If you're curious.
16:08:40 <Pseudonym> LZW assigns the same length code to each symbol.
16:10:33 <dark> Oh, cool.
16:10:38 <dark> Now I understand what ARJ was doing :-)
16:10:43 <Pseudonym> :-)
16:10:59 <Pseudonym> Alistair Moffat was one of my lecturers.
16:11:03 <Pseudonym> We got all this drummed into us.
16:12:00 <Pseudonym> One of his students discovered an algorithm for producing minimum-entropy Huffman codes while limiting the code lengths to some number of bits (e.g. 32 bits) just so canonical Huffman coding would work efficiently.
16:12:09 <Pseudonym> Cute algorithm.
16:12:39 <Heffalump> errm, how can you get minimum entropy whilst limiting lengths?
16:12:50 <Pseudonym> Minimum entropy under that constraint.
16:12:52 <Heffalump> IM I'd have thought it was theoretically impossible
16:12:54 <Heffalump> oh, right.
16:13:23 <Pseudonym> When you consider how much faster it is to work with canonical Huffman codes when the length of the codes don't exceed your word size, it's well worth it.
16:13:40 <Pseudonym> And it usually doesn't harm your compression by much at all.
16:23:57 <dark> I ended up forking gzip :-)
16:25:21 <dark> Since input was usually from a file anyway, and the decompressed stream had to go to tar, there wasn't much point in decompressing in Haskell.  Maybe when we have hasktar :)
16:26:44 <Igloo> Tell you what, you give me Hakell code for inflate and I'll give you code for detar  :-)
16:27:00 <Igloo> Oh, or entar
16:27:01 <Pseudonym> Actually, deflate isn't too hard.
16:27:06 <Pseudonym> Inflate, on the other hand...
16:27:11 <Pseudonym> Oh, sorry.
16:27:13 <Pseudonym> You said that.
16:27:16 * Pseudonym needs caffeine
16:27:28 <dark> I'll need both, eventually :)
16:27:35 <Igloo> I mean the decompression one. I think that's inflate.
16:27:42 <Pseudonym> Yes.
16:27:42 <dark> Yeah I always get confused too.
16:27:51 <dark> "deflate" shouldn't be an undoing operation :)
16:27:57 <dark> Er, I got it wrong again.
16:28:05 <Pseudonym> Deflate means decreasing in size.
16:28:09 <Pseudonym> Inflate means increasing in size.
16:28:17 <dark> Yeah but it also looks and feels like an undoing operation.
16:28:27 <Pseudonym> For a compression algorithm, it should be obvious which is which.
16:28:27 <dark> "deflate" is something you do to something that has been flated :-)
16:28:36 <Pseudonym> I see what you mean.
16:28:49 <dark> I can figure out which is which but I always have to stop and think about it.
16:29:59 <Igloo> What I'd really like is the algorithm written down
16:32:06 <Pseudonym> I can explain it to you if you like.
16:32:47 <Igloo> Down to the bit level?
16:32:54 <Pseudonym> Almost down that far.
16:33:04 * Pseudonym has coded a deflater before
16:33:08 <Pseudonym> Not in Haskell.
16:33:15 <Igloo> What language?
16:33:17 <Pseudonym> C
16:33:22 <Igloo> Ah
16:33:27 <Pseudonym> Don't have the code any more.
16:33:39 <Igloo> Well, that definitely won't help then  :-)
16:33:52 <dark> What we need is a c2haskell script.
16:34:06 <Pseudonym> Yeah, then we can have pointer arithmetic in haskell.
16:34:20 <dark> Pseudonym: We have it, in Foreign.C :-)
16:34:38 <Pseudonym> :-)
16:34:44 <Pseudonym> That's really what you should be using, I think.
16:34:53 <dark> For libz?
16:34:56 <Pseudonym> Yes.
16:35:00 <Igloo> If you have time to sit down with me and talk me through a short example I can supply then that would be really useful, but this might take quite a lot of time so I won't be offended if you don't  :-)
16:35:10 <dark> But I don't think Foreign.C has any facilities for filling in fields of structs.
16:35:21 <dark> And that's what the libz interface wants, lots of it.
16:35:23 <Pseudonym> You'd need a think layer of C.
16:35:26 <Pseudonym> thin
16:36:10 <dark> create_libz_garbage(arg1, arg2, arg3, arg4, arg5, arg6, ...)
16:36:20 <Pseudonym> Not quite.
16:36:46 <Pseudonym> In fact, I don't believe the interface would need that.
16:36:49 <dark> defaultly_compress, then :-)
16:37:32 <dark> This reminds me that GHC.Handle didn't have any hooks where gzopen might be inserted.
16:37:57 <Pseudonym> This is a problem.
16:38:08 <dark> I'm kicking around plans for redoing IO based on Stream typeclasses.
16:38:11 <Pseudonym> I personally like Java's adapter-based IO model.
16:39:43 <dark> Still, even with the Handle model, it would be possible to put a filter on hGetContents output.  But I don't like hGetContents because it hides errors.
16:41:36 <dark> Hmm, I might have to replace readFile too, if I want to notice EIO.
16:42:42 <Pseudonym> I think what you want is something like ObjectIO.
16:42:58 <dark> For libz, Handles might be skipped entirely if there's an openGzFile function that just returns the contents.
16:43:37 <Pseudonym> Yeah, but you want to be able to do it on network connections and things too.
16:43:50 <Pseudonym> And then you'll want a binding to GSS or something,
16:44:02 <dark> Hmm, haven't looked at ObjectIO.  The Graphics.UI stuff scared me off :) 
16:44:38 <Pseudonym> Actually, you might want to try modelling streams with threads and channels/
16:48:01 <Pseudonym> I don't think that Clean's TCP interface has been ported to Haskell ObjectIO yet.
