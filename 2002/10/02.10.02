01:30:56 <andersca> hey Marvin--
01:32:43 <Marvin--> morning
01:41:39 <andersca> Marvin--: /pub tomorrow, right?
01:41:56 <Marvin--> yup, october fest
01:42:26 <andersca> nice
01:42:33 * andersca ponders wearing his new overall
01:43:36 <Marvin--> you got yourself an orange overall??
01:43:41 <andersca> no
01:43:42 <andersca> a red one
01:43:50 <Marvin--> eh? ffsex?
01:43:53 <Marvin--> or what?
01:43:58 <andersca> ReKo
01:44:01 <Marvin--> ooh
01:44:12 <Marvin--> cool, didn't know you'd joined ReKo
01:44:26 <Marvin--> I was hoping you'd join C.P.U. :/
01:44:35 <andersca> you should get polli to join CPU
01:45:55 <Marvin--> ugh, I'm swamped with work with the teaching and correcting assignments, plus doing my *own* assignments
01:46:01 <Marvin--> and now Strakt wants me to come work for a day or so
05:33:55 * shapr bounces
05:34:53 * shapr bounces more
05:36:36 <Igloo> Hey shapr
05:36:48 <shapr> hi Igloo, what's up?
05:37:46 <Igloo> Not much - just read the first few line of SICP and decided to put off tidying up the fptools make depend
05:37:53 <shapr> I had a strange dream last night about using Template Haskell and a genetic algorithm to do compile time burstall darlington transformations on any given source code.
05:38:20 <Igloo> burstall darlington transformations?
05:38:28 <shapr> er, I think that's the right name.
05:38:30 * shapr checks
05:38:37 <Igloo> Quite possibly, but it means nothing to me  :-)
05:39:12 <shapr> yah, it is the right name, lemme find urls
05:39:41 <Igloo> Ah, I'll google then  :-)
05:40:21 <shapr> http://citeseer.nj.nec.com/context/9391/0
05:40:55 <shapr> rabhi and lapalme in "Algorithms, A Functional Programming Approach" talk about it a lot.
05:41:07 <shapr> it's quite nifty.
05:41:39 <shapr> It's a somewhat systematic way to turn algorithms into more efficient equivalent algorithms.
05:42:00 <shapr> they turn multi-pass code into single-pass code about every ten pages.
05:42:16 <shapr> it's very useful stuff to have in your head.
05:42:53 <Igloo> Hmmm, OK
05:43:02 <Igloo> I wonder if our library has that
05:43:21 <shapr> imho, the rabhi lapalme book is enough.
05:43:34 <shapr> that's all I've read about it.
05:44:01 <shapr> They give references to more detailed and systematic description of the BDTS if you want me to look them up.
05:44:09 <Igloo> Hmmm, it does but someone has it out
05:44:52 * Igloo contemplates incurring the wrath of whoever has it out by requesting it
05:44:59 <shapr> I'm looking forward to getting Okasaki's book, I bet it'll follow naturally after this one.
05:45:09 <shapr> how long has it been out?
05:47:32 <Igloo> I'm just told the date its due back. Which I've just noticed is either in the past or American
05:47:45 <Igloo> "DUE BACK: 10/09/02"
05:48:27 <pesco> Why do so many people not get the pointlessness of such date notations?
05:48:27 <shapr> hah
05:48:53 * Igloo attempts to reserve it
05:50:11 * Igloo is somewhat confused by this stupid library system. I think I'll just see if it's already there when I go in
05:53:24 <Igloo> Right, time to go
07:32:12 <shapr> hi Chilli
07:33:58 <sethk> Igloo:  You can find papers with a lot of the same material onOkasaki's web page.
09:19:01 <ludde> i'm trying to parse directory parts, what's the simplest way to rewrite ["ludde","pudde",".."] into ["ludde"] and so on? (the ".." acts as a one directory up specifier)
09:20:26 <cleverdra> ["ludde","pudde",".."] is ludde/pudde/.. ?
09:20:33 <ludde> yeah
09:22:08 <cleverdra> simplify_path [x|".."|t] = simplify_path t
09:22:27 <cleverdra> simplify_path [x] = [x]
09:22:27 <ludde> hmm, is that haskell?
09:22:32 <cleverdra> simplify_path [] = []
09:22:45 <cleverdra> No, I think that I've got '|' wrong -- I've just returned to learning Haskell.
09:22:54 <ludde> that won't work if I have many .. in sequence, will it?
09:22:59 <cleverdra> err, and that should be [x,".."|t] anyway
09:23:18 <cleverdra> ludde - it should work fine.
09:23:23 <ludde> if I have ludde/skip/../.., it would put one of the .. in x and skip it
09:23:43 <ludde> ludde/pudde/../.. i mean
09:23:56 <cleverdra> hm, indeed.
09:24:21 <cleverdra> simplify_path ["ludde","skip","..",".."] => ["ludde",".."]
09:24:39 <ludde> yes
09:24:39 * cleverdra remembers that he has GHC on this silly windows computer.
09:24:51 <hdaume> you want:
09:24:56 <hdaume> simplifyPath [] = []
09:25:15 <hdaume> hrm.
09:25:21 <hdaume> i think it's easier if you reverse it first
09:25:27 <andersca> that's the simplest path...
09:25:35 <cleverdra> hdaume - oh, indeed!
09:25:39 <hdaume> so if you reverse the list first, you do something like:
09:26:23 <hdaume> simplifyPath ("..":xs) = let l = length (takeWhile (=="..") xs) + 1 in simplifyPath (drop (2*l) xs)
09:26:32 <cleverdra> ludde - what do you do in the case of foo/../.. ?
09:26:34 <hdaume> or something...i probalby have an off-by-one error in there, but you get the idea
09:27:01 <hdaume> (and obviously simplifyPath (x:xs) = x : simplifyPath xs as a fall-through
09:27:05 <ludde> cleverdra: i think standard behaviour is to treat it as an empty path
09:27:26 <ludde> hdaume: ok, thanks, i'll try it.
09:27:54 <hdaume> ludde: basically, if it starts with a "..", count how many ".."s there are and drop all those, plus the corresponding # of real paths
09:28:00 <hdaume> you'll then have to re-reverse the result, of course
09:28:31 <ludde> yeah
09:28:56 <ludde> hdaume: how will it treat /ludde/../.. though?
09:29:00 <ludde> won't drop give an error?
09:29:10 <hdaume> no...if you try to drop more than you have, it will return the empty list
09:29:15 <hdaume> it's not like tail
09:29:17 <ludde> ah,cool
09:29:34 <hdaume> as a bonus question, right a version using foldr or foldl :)
09:29:38 <hdaume> s/right/write
09:29:56 <ludde> a version of simplifyPath ?
09:30:00 <hdaume> yeah :)
09:30:38 <hdaume> if you use the right fold, you won't even have to reverse it
09:30:43 <ludde> cool
09:30:44 <hdaume> right as in correct
09:32:12 <ludde> is foldr the right fold?
09:32:27 * hdaume hasn't thought about it yet...lemme think :)
09:33:51 <cleverdra> hm, simplifyPath doesn't seem to work when there are disjoint ".." in the path
09:34:19 <cleverdra> hdaume's version.
09:34:19 <ludde> hmm, that's right
09:34:19 <ludde> :(
09:34:34 <ludde> seems to be a tough problem in a functional language :)it's a tough problem, heh
09:34:40 <hdaume> really?  ... me thinks it should
09:35:15 <ludde> .. .. ludde .. hej
09:35:35 <ludde> the two .. will drop both ludde and ..
09:35:47 <hdaume> aaah
09:36:10 <hdaume> so then you need to do a dropWhile/takeWhile combo :)
09:36:43 <hdaume> instead of drop (l*2) you need to drop up to l*2 but stop once you hit another ".."...
09:36:50 * hdaume is sad that his pretty version didn't work
09:37:11 <ludde> (this is a reversed list)
09:37:12 <ludde> complex
09:37:13 <cleverdra> That's not the only problem case:  see ["..","..","baz","bar","..","foo","home"]
09:37:15 <cleverdra> (simplifyPath) on that returns ["foo","home"]
09:37:24 <cleverdra> hdaume - thank you for it, anyway =)
09:37:57 <hdaume> reverse $ foldl (\pth p -> if p == ".." then drop 1 pth else p:pth) [] thepath seems to work
09:39:15 <cleverdra> indeed =)
09:42:05 <ludde> simpPath s = dropWhile (".."==) (foldr pss [] s)
09:42:05 <ludde>  where
09:42:05 <ludde>   pss ".." xs = "..":xs
09:42:05 <ludde>   pss x ("..":xs) = xs
09:42:05 <ludde>   pss x xs = x:xs
09:43:24 <hdaume> seems reasonable
09:43:29 <hdaume> but you can eta-reduce your defintion :)
09:43:40 <hdaume> simpPath = dropWhile (".."==) . foldr pss []
09:43:54 <ludde> oh
09:44:01 <ludde> i don't understand . fully
09:44:11 <ludde> I always get type errors when i use it
09:44:16 <hdaume> if you continue to use haskell you will learn to love it :)
09:44:32 <hdaume> it's definately hard to get used to
09:45:00 <hdaume> i think the best way to think about it is if you have a definition like:
09:45:01 <ludde> (dropWhile (".."==) . foldr) pss []  
09:45:06 <ludde> is not the same as dropWhile (".."==) . foldr pss []  
09:45:15 <hdaume> f x = g (h (i (j x)))
09:45:27 <ludde> (g.h.i.j)
09:45:31 <hdaume> then there's no real reason to have 'x' in there
09:45:34 <hdaume> right
09:45:40 <ludde> i know those simple cases
09:46:07 <ludde> but when g h i and j have more than one argument, it gets tricky.
09:46:24 <ludde> i don't quite understand the precendence rules either
09:46:27 <hdaume> yeah...so if they have more than one argument, you can only use '.' to "get rid" of the last argument
09:46:56 <ludde> what is "dropWhile (".."==) . foldr pss []" equal to if you write out the parantheses?
09:46:56 <cleverdra> (\x -> x-1) . (+1) . read $ "10" :: Int
09:47:04 <hdaume> so 'a1 a2 a3 . b1 b2 b3' is always '(a1 a2 a3) . (b1 b2 b3)'
09:47:12 <ludde> oh
09:47:36 <ludde> so "." has a very low priority?
09:47:44 <ludde> (precendence priority)
09:47:55 <hdaume> very high :)
09:47:59 <hdaume> it's precedence is 9
09:48:09 <ludde> oh
09:48:20 <hdaume> $ has very low (zero)
09:48:32 <hdaume> but function application always binds tighter than .
09:48:33 <ludde> $ is function application ?
09:48:40 <ludde> no
09:48:50 <ludde> $ is filter on both input and output ?
09:48:56 <hdaume> $ is function app
09:48:58 <cleverdra> What operators have higher precedence than function application?
09:49:01 <hdaume> f $ x = f x
09:49:11 <hdaume> cleverdra: none, i don't think....
09:49:16 <ludde> what's the need for $ then? why not simply remove it?
09:49:24 <hdaume> it enables you to get rid of parens
09:49:34 <hdaume> f (g (i (h x))) = f $ g $ i $ h x
09:49:46 <ludde> ah, so $ has lower priority than . ?
09:49:54 <hdaume> yes, much lower
09:49:59 <ludde> cool, thanks
09:50:03 <ludde> i really needed such a feature
09:50:19 <ludde> is it possible to specify operator precendence for home made operators?
09:50:24 <hdaume> yup
09:50:32 <cleverdra> ludde - yes.  You can even make infix operators =)
09:50:32 <hdaume> 'infix(l/r) operator 9'
09:50:46 <cleverdra> oh, wait, operators *are* infix.
09:53:10 <ludde> how can I simplify "buildFilename s = (concat (map ('/':) (simplifyPath s)))" using $ and .?
09:53:24 <hdaume> buildFilename = concat . map ('/':) . simplifyPath
09:53:29 <ludde> woo
09:54:04 <ludde> is that more efficient to execute, or will the haskell compiler optimize my original code?
09:54:07 <hdaume> note there is also a prelude function 'concatMap' so you could do 'buildFilename = concatMap ('/':) . simplifyPath'
09:54:11 <hdaume> it should optimize it
09:54:22 <hdaume> especially in a simple case like that one
09:54:53 <cleverdra> ludde - curiously, how are you splitting the pathstring?
09:55:41 <ludde> strtok :: (Char -> Bool) -> String -> [String]
09:55:41 <ludde> strtok f s = case (break f s) of
09:55:41 <ludde>   (a,"") -> [a]
09:55:41 <ludde>   (a,b:c) -> a : strtok f c 
09:55:49 <ludde> and then
09:55:49 <ludde> strtok ('/'==) s
09:56:40 <cleverdra> nifty.  Thanks.
09:57:13 <ludde> is there any way to rewrite that in a more efficient way, btw?
09:57:31 <hdaume> i'd probably do:
09:57:43 <hdaume> strtok f [] = []
09:57:48 <hdaume> strtok f (x:xs)
09:58:04 <hdaume> eh
09:58:08 <hdaume> this isn't going to be much better
09:58:17 <cleverdra> Would it be better to use an anonymous variable for 'f' in the first, hdaume?
09:58:31 <hdaume> i'd look at how 'words' is defined in the prelude and copy that
09:59:02 <ludde> hdaume: words doesn't work the same way, words treats multiple spaces as a single space.
09:59:19 <cleverdra> ludde - isn't that a sensible treatment of '/' in paths?
09:59:21 <hdaume> that is true...look at 'lines' then :)
09:59:55 <ludde> cleverdra: maybe, but I use strtok for parsing a whole http request, and then I want to be able to differentiate between http:// and http:/
10:00:11 <hdaume> ah, so lines is defined just as your strlok :)
10:00:22 <hdaume> almost
10:00:28 <ludde> cool
10:00:30 <hdaume> lines ""                =  []
10:00:30 <hdaume> lines s                 =  let (l, s') = break (== '\n') s
10:00:30 <hdaume>                            in  l : case s' of
10:00:30 <hdaume>                                         []      -> []
10:00:30 <hdaume>                                         (_:s'') -> lines s''
10:00:43 <hdaume> so instead of break (=='\n') you would use break f
10:00:48 <hdaume> but both should be equally efficient
10:00:53 <ludde> that's cool
10:00:59 <ludde> i didn't even look there :)
10:01:02 <hdaume> theirs is a bit more lazy, i beleive
10:04:32 <ludde> is there some way to rewrite this:
10:04:32 <ludde> put h (fromString ("Invalid request: " ++ r ++ " closing connection\n"))
10:04:51 <ludde> put h . (fromString "Invalid request: " ++ r ++ " closing connection\n")
10:04:59 <ludde> hmm
10:04:59 <hdaume> no, that won't work :)
10:05:00 <ludde> no
10:05:04 <ludde> put h . fromString ("Invalid request: " ++ r ++ " closing connection\n")
10:05:17 <hdaume> you could do that, but use $ not .
10:05:35 <hdaume> you only use . if the last function in the list is expecting an argument you haven't yet given it
10:05:55 <ludde> oh
10:06:08 <ludde> (put h . fromString) ("Invalid request: " ++ r ++ " closing connection\n")
10:06:10 <ludde> that would work?
10:06:39 <hdaume> yes
10:06:39 <cleverdra> put h . fromString $ "Invalid request: " ++ r ++ " closing connection\n"
10:06:45 <hdaume> that would also work :)
10:07:32 <ludde> woo
10:07:34 <hdaume> or even 'put h . fromString . (\r -> "Inv..." :: r ++ "...")'
10:07:37 <hdaume> but that's just ugly :)
10:07:39 <ludde> no thanks
10:08:26 <ludde> what are curry/uncurry useful for+
10:08:30 <ludde> ?
10:08:42 <hdaume> usually when you're doing function composition or something
10:08:53 <hdaume> for instance, you could write:
10:09:01 <hdaume>   zipWith (\a b -> a ++ b) l1 l2
10:09:02 <hdaume> as
10:09:08 <hdaume>   zipWith (uncurry (++)) l1 l2
10:09:32 <hdaume> or sometimes you have a function with type 'a -> b -> c'
10:09:37 <hdaume> and you want to map it across a list
10:09:45 <cleverdra> or just --> zipWith (++) l1 l2 <--, no?
10:09:59 <hdaume> arg, sorry...zipwith is a bad example
10:10:05 <hdaume> my example was wrong
10:10:20 <hdaume> so say you want to map a function a -> b -> c across a list of (a,b)s...
10:10:21 <hdaume> you could do
10:10:22 <ludde> so I can think of "a $ b" as "(a) (b)", where a and b are arbitrary expressions?
10:10:35 <ludde> hdaume: cool
10:10:36 <hdaume>   map (\ (a,b) -> f a b) l    or just map (uncurry f) l
10:10:49 <ludde> hdaume: i've needed that too
10:10:54 <hdaume> ludde: yes, re $
10:11:01 <hdaume> the defintion is:
10:11:02 <ludde> functional programming is really poweful if you know how to use it properly.
10:11:04 <hdaume>   f $ x = f x
10:11:27 <ludde> hdaume: yeah, but I mean that's the way I can remove parantheses
10:11:51 <ludde> if I have an expression like "(a) (b)" (with the parantheses in that way) I can usually rewrite it like a $ b
10:12:05 <ludde> food time, bbl
10:55:33 <andersca> hey Marvin--
10:56:19 <Marvin--> evening
10:57:58 <Marvin--> back to correcting assignments :(
10:58:46 <hdaume> hi
10:59:23 <ludde> hi Marvin--
10:59:47 <ludde> I have a question about lab 2. Is it okay to write the "informal" description of the type system using haskell code?
11:01:18 <Marvin--> ludde: uh, how will that be different from the implementation?
11:01:35 <ludde> Marvin--: they will be quite similar :)
11:01:40 <Marvin--> ludde: and an informal description is normally supposed to be in a natural language, that's what informal means!
11:02:07 <ludde> Marvin--: the description doesn't state that it has to be informal, but it says that it doesn't have to be formal.
11:02:08 <Marvin--> ludde: heck, an informal description of the type system doesn't have to be more than "well, duh, addition of ints give you ints" et.c.
11:02:29 <Marvin--> ludde: oh, I thought that (as for the syntax lab) you were supposed to hand in both informal and formal
11:02:30 <ludde> You should design a simple type system for your language. It will be used to do so-called static typing. You should begin by making a description of the type system. It doesn't have to be a formal description but it has to be complete. Complete means that it should cover all parts of the language.
11:03:01 <ludde> As far as I can tell, a haskell program qualifies for that description.
11:03:16 <ayrnieu> ludde - are you quoting someone?
11:03:18 <Marvin--> ludde: I wouldn't say that P describes P
11:03:33 <Marvin--> ayrnieu: from the assignment description
11:03:36 <ludde> Marvin--: how do you mean?
11:04:05 <Marvin--> ludde: why would you use the program as its own description? that's circular
11:04:33 <Marvin--> ludde: and besides, the formal notation for type system is more compact and expressive than fiddling around with haskell
11:04:34 <ludde> Marvin--: i'm describing the type system, not the actual program.
11:04:49 <Marvin--> ludde: well, the static type checker *implements* the type system, so in a sense, they are the same thing
11:05:21 <Marvin--> ludde: in any case, this is not something I can make a "pronouncement" on, you'd better mail to progs@mdstud and ask Marcin
11:05:32 <ludde> okay
11:06:34 <ludde> usually it's okay to use a haskell program as a denotational semantics, so i thought this was kind of the same thing.
11:06:53 <ludde> i mean, a haskell program as a description of a denotational semantics.
11:07:52 <ludde> I don't quite understand the formal syntax for type systems, that's why I thought it would be easier to write it in haskell.
11:08:10 <andersca> another thing would be to learn the formal syntax
11:08:16 <andersca> since it's probably good to know when doing the exam
11:08:42 <ludde> i guess you have a point there :)
11:08:47 <Marvin--> ludde: yes, but in this case they will be practically the same, so it doesn't tell us whether you've understood the important bits! :)
11:09:36 <ludde> if I am capable of writing a haskell program, doesn't that essentially mean that I understand the type system?
11:09:53 <Marvin--> That's why you were required to give us an informal description of your language syntax too, not only the formal grammar
11:09:55 <andersca> typing haskell in haskell!
11:10:04 <ludde> okay
11:10:42 <Marvin--> in my (not so humble) opinion, I think that a formal typesystem and an informal description of it should be mandatory for this assignment, but I haven't dared voice that
11:11:12 <andersca> so what's an informal description
11:11:27 <ludde> if a and b are ints, a + b will be an int 
11:11:27 <andersca> "the operator + takes two expressions that must be integer and returns an integer value"
11:12:05 <Marvin--> something like that, or even "the arithmetical operators +, -, ... take two integer expressions and give integers back" or something
11:12:12 <Marvin--> it doesn't have to be formal, that's what informal means ;)
11:12:17 <Marvin--> but formal is much easier
11:12:42 * andersca is still thinking about semantics and functions
11:12:59 <ludde> "G |E- a : int && G |E- b : int => G |E- a+b : int" <-- i don't understand what the G, and |E- means
11:13:13 <ludde> that's how he suggested that we should write the type system
11:13:26 <Marvin--> G is probably supposed to be a gamma :)
11:13:31 <Marvin--> or rather, Gamma
11:14:04 <Marvin--> it's the type environment, a set of variable-type pairs
11:14:07 <ludde> gamma? is that the letter that almost looks like an upside-down L 
11:14:11 <Marvin--> yes
11:14:40 <Marvin--> |E- pretty much means |- for expressions
11:15:14 <ludde> and what does |- mean ? in the environment?
11:15:27 <Marvin--> it's sort of an implication, the symbol comes from predicate logic
11:15:36 <ludde> ah
11:15:44 <Marvin--> if you'd gone to lectures and/or exercises you'd know this ;)
11:16:01 <ludde> i didn't really go to the exercises no
11:16:21 <Marvin--> "G |E- e: t" means, "Given the type context G, e has the type t"
11:16:26 <ludde> yeah
11:18:07 <ludde> so this would be valid as a variable declaration? "G |- int a => G (a:int) |-"
11:18:37 <slicks> whats recommended to learn haskell, a good book, or should online tutorials be fine?
11:18:44 <Marvin--> well, normally statements and expressions use different symbols (|E- vs |S-, or |D- if you want declarations separately)
11:19:24 <Marvin--> slicks: I always recommend good books :) Thompson's "The Craft of Functional Programming" is quite good
11:19:44 <slicks> Marvin--: is that based on haskell, or functional programming in general?
11:19:51 <Marvin--> slicks: It's a haskell book
11:20:22 <slicks> haskell looks intriguing to me (i'm used to C++)
11:20:40 <slicks> i' ve read some tutorials
11:20:47 <hdaume> slicks: which ones?
11:20:52 <Marvin--> ludde: so an expression *has* a type, whereas statements don't have types... So you'd usually say "the statement S is type-correct" and leave it at that
11:20:55 <slicks> the IBM one
11:21:01 <Marvin--> IBM haskell tutorial? *blank look*
11:21:09 <slicks> heh
11:21:10 <slicks> bad? :)
11:21:13 <hdaume> they had a few page thing a while back
11:21:15 <Marvin--> I don't know what it is
11:21:16 <slicks> which one would you recommend then?
11:21:16 <ludde> Marvin--: okay
11:21:18 <hdaume> it was pretty good, but didn't go into any depth
11:21:33 <Marvin--> ludde: and when talking of declarations you'd normally want to "return" the new type context
11:21:37 <slicks> some tutorials just explain every features
11:21:44 <slicks> i like trying some stuff on my own every time
11:21:46 <hdaume> slicks: i'm rather partial to mine: http://www.isi.edu/~hdaume/htut
11:21:55 <hdaume> slicks: it's not finished, but goes pretty far :)
11:21:58 <slicks> allright
11:22:03 <hdaume> (but "mine" i mean "mine and some other people's" :))
11:22:09 <slicks> hehe
11:22:09 <hdaume> s/but/by
11:22:17 <Marvin--> ludde: so if you couple declarations and statements (or if statements *can* change the type context), you want a ternary relation "G |S- s: G'"
11:22:41 <ludde> ah, cool
11:23:10 <slicks> hdaume: how much pages approx?
11:23:19 <slicks> (feeding the printer :)
11:23:20 <hdaume> 100
11:23:31 <slicks> ouch :)
11:23:34 <hdaume> yeah
11:23:35 <ludde> so "G |S- int a : (a,int) G"
11:23:40 <slicks> my printer wont do more than 1ppm 
11:23:47 <Marvin--> ludde: pretty much yes
11:23:54 <hdaume> slicks: haha...maybe just print the first 25 pages or so
11:24:04 <hdaume> slicks: and don't print the introduction, i guess
11:24:09 <Marvin--> slicks: 1ppm? Poor bastard! :)
11:24:54 <ludde> and then G |S- s1 : G' &&  G' |S- s2 : G''  => G |S- s1;s2 : G''
11:25:00 <Marvin--> yup
11:25:13 <ludde> is it okay to write s1;s2 even though I represent the statements as a list internally?
11:25:24 <Marvin--> as long as you make a note of it
11:25:48 <ludde> nice to have you here :)
11:26:01 <ludde> you are the tall red-haired one?
11:27:06 <Marvin--> nod
11:27:23 <Marvin--> if you have more questions, come to the supervision tomorrow so I'll get paid for answering ;)
11:27:31 <Marvin--> (no, really, I have to get back to correcting assignments)
11:27:37 <ludde> what time?
11:27:42 <Marvin--> 17-19
11:27:57 <andersca> Marvin--: when does the october fest start?
11:27:57 <andersca> 19
11:27:57 <andersca> ?
11:28:02 <ludde> hmm, doesn't fit very well into my schedule though
11:28:06 <ludde> but thanks for the help.
11:28:18 <Marvin--> andersca: yeah
11:29:32 <slicks> ok i'm stuck.. cant cancel a previous cups print job
11:36:58 <slicks> bon in CS is da nie zo duur zekers printen?
11:37:06 <slicks> oops sorry wrong chan
11:38:27 <slicks> hdaume: your examples page is a broken link
11:38:45 <hdaume> slicks: yeah, i knwo :)...the examples aren't available yet :)
11:39:19 <slicks> oh :)
11:39:31 <slicks> damn cups wont cancel this 86 page job
11:39:37 <hdaume> haha
11:39:58 * toadx would laugh, except he has to fix the cups print queue next week...
11:40:12 <slicks> i've even been messing in /var/spool/cups, but jobs are stored somewhere else too
11:42:07 <Marvin--> aaaargh, I can't read this code, it's fscking impossible
11:42:42 <hdaume> poor Marvin--...dont' you love grading
11:43:24 <Marvin--> hdaume: this group wrote their own parser in haskell. Without using a combinator library. Or anything else.
11:43:46 <Marvin--> three zillions of (uncommented!) obscure helper functions
11:44:07 <ludde> in what haskell module do I find "trace" ?
11:44:20 <hdaume> ludde: IOExts
11:44:39 <ludde> thanks
11:44:43 <hdaume> Marvin--: why would someone do that?
11:45:03 <hdaume> Marvin--: writing parsers from scratch isn't exactly my idea of a good time
11:45:09 <Marvin--> hdaume: that's what I'm asking myself too
11:45:30 <ludde> Marvin--: maybe they take the AFP course too? and they wanted to test Koen's parser idea :)
11:45:39 <Marvin--> it was hard enough to get people to understand that it was easier to use a monadic parser with do notation than obscure operator symbols
11:45:56 <Marvin--> ludde: ProgsParse *is* Koen's parser, with an extra layer around it
11:46:03 <ludde> oh
11:46:10 <Marvin--> ludde: and there's nothing structured about this, they use lists and tuples and tuples and lists and bools
11:48:00 <Marvin--> YES, found gronunds for returning the assignment without resorting to saying "your haskell code sucks"
11:49:26 <ludde> haha
11:49:34 <ludde> that's the spirit!
11:50:54 <Marvin--> oh, dang, I'm not supposed to be saying these things with my students present, right?
11:51:10 <ludde> who cares :P
11:54:13 <ludde> the $ operator is really wonderful, i can't believe how i've managed to live without it
11:54:30 <Marvin--> I said something like that when I discovered it too :)
11:54:39 <Marvin--> and again when I understood monads
11:57:03 <ludde> hehe :)
12:03:34 --- mode: card.freenode.net set +o ChanServ
12:08:50 <Igloo> Apologies for the off topic question, but could anyone recommend a good book on circuit simulation?
12:25:06 <ludde> I get this when trying to compile something with GHC. (Chunk.hs is a module in my project)
12:25:06 <ludde> I'm using the command line: ghc -O2 -package network -package util Thread2.hs Chunk.hs
12:25:06 <ludde>     failed to load interface for `Chunk':
12:25:06 <ludde>         Could not find interface file for `Chunk'
12:25:20 <ludde> What do I need to do?
12:28:30 <Igloo> ghc -O2 -package network -package util --make Thread2.hs -o Thread2    is what I'd guess you want
12:46:04 --- mode: card.freenode.net set +o ChanServ
13:06:42 <engstad> Greets.
13:08:26 <engstad> Any type theory gurus here? ;-) I can't get my head around the definition of the existenial quantifier, and how it relates to types.
13:09:12 <engstad> E.g., in the book I'm reading, it says, the introduction rule for \exists is:
13:09:29 <engstad> a : A    p : P[a/x] 
13:09:31 <engstad> ------------------
13:09:50 <engstad> (a, p) : (\exist x : A) . P
13:10:54 <engstad> So, what does it mean? 
13:11:11 <Marvin--> sorry :/ I'm not sure of the notation
13:12:09 <engstad> exists is the other quantifier (the other being "for all").
13:12:41 <Marvin--> doh, I know THAT :)
13:12:54 <engstad> :-) Just explaining. :-)
13:13:26 <Marvin--> but I don't understand the tuple notation and stuff in the conclusion
13:13:35 <engstad> Mee too. :-(
13:14:15 <Igloo> The way I'd read that it is wrong as the existential quantification should be outside of the --- so it scopes over the top line too
13:15:32 <engstad> Hmm.. hold on.
13:16:28 <engstad> It's from "Type Theory & Functional Programming" by Simon Thompson.
13:16:55 <Igloo> Does : mean "has type"?
13:17:19 <Igloo> No, that really makes no sense to me at all
13:17:39 <engstad> Yes, both "has type", and "is a proposition of" (duality).
13:18:08 <Marvin--> I still don't get the tuple thingy
13:18:25 <engstad> No, I was totally thrown off the tuple think as well.
13:18:28 <Marvin--> I can agree on "there exists an x of type A so that something-something has type P"
13:18:29 <Igloo> Or the "." or the last ":"
13:19:41 <engstad> Oh, the "." is just the composition thing. Like \lambda x . x
13:20:06 <Marvin--> isn't this basically typed propositional logic?
13:20:37 <engstad> Yes, it is.
13:20:49 <Igloo> Oh, I see
13:21:42 <Marvin--> Argh, is he a constructivist?
13:21:49 <engstad> Yes. :-)
13:22:07 <Marvin--> ugh
13:22:19 <Marvin--> the comp.sci. dept here is full of constructivists
13:22:30 <Marvin--> whereas the math dept is very analytic
13:22:31 <Igloo> So if a has type A and p has type "P with a substituted for x" then (a, p) has type P when x is bound to some value of type A. That makes sense if (a, p) should be p.
13:22:32 <Marvin--> the horror
13:22:57 * Marvin-- thinks constructivists are just silly
13:22:59 <engstad> *giggle*
13:23:15 <engstad> No, I think it's pretty useful, actually.
13:23:29 <engstad> Though you do seperate out a lot of really nice math.
13:24:02 <engstad> Igloo: I think it makes more sense now.
13:24:10 * Marvin-- doesn't know much constructive logics, sorry :/
13:24:27 <engstad> The book is online, you should read it.
13:24:31 <Marvin--> I took logics at a different department that wasn't full of constructivists :)
13:24:34 <Marvin--> I just downloaded it
13:26:56 * Marvin-- has started to realize that he has to become a graduate student to get to take interesting courses at the CS dept.
13:28:23 <engstad> Igloo: I think the notation (a, p) "is" p, insoasfar we are thinking. To prove (\exists a : A). P, one has to pick a withness object w : A, and a proof of P using w.
13:29:00 <engstad> Igloo: So, from the logic part, I understand - you simply specify that as (w, p).
13:29:35 <engstad> s/withness/witness/
13:30:15 <Marvin--> hmm
13:30:28 <Marvin--> and all-quantifiers is pretty much what functions are
13:30:36 <engstad> Marvin-: Enjoy your time, it's hard for me (working 8-12 hours a day) to do any fun stuff.
13:30:53 <Igloo> What are you now, Marvin?
13:31:16 <Marvin--> I'm studying CS, undergrad
13:31:28 <Igloo> eng: If you enjoyed your work you'd already be doing fun stuff 8-10 hours a day  :-)
13:31:42 <Marvin--> I'll have my MSc in one and a half year or so
13:31:44 <Igloo> How come you are marking things if you're an undergrad?
13:32:10 <Igloo> Oh, I'm thinking you are using a different system to us
13:32:21 <Marvin--> Because I'm a teaching assistant on an undergrad course that's even more "under" :)
13:32:49 <Igloo> :-)
13:33:02 <Marvin--> So I have exercise classes, lab supervision and lab assignment correcting
13:34:10 <Marvin--> Which is about 10 hours worth of work a week, plus the (supposedly) 40 hours for my own studies
13:35:39 <Marvin--> Is this the same Thompson who wrote TCoFP?
13:36:10 <engstad> Igloo: Well, I _am_ doing "fun" stuff, and it is challenging (I'm making computer games for the PlayStation 2), but by "fun" I mean doing theoretical stuff.
13:37:17 <Marvin--> heh, I have friends who would cut off their right arm (except for the fact that it makes it hard to code) to get paid to create games :)
13:38:53 <engstad> ;-)
13:39:17 <engstad> It is nice to program games, but it is also a lot of hard work. 
13:39:33 <Marvin--> yeah, I suspect it seems more glamorous than it actually is :)
13:39:45 <engstad> You bet.
13:40:05 <engstad> However, it is extremely challenging, which is what I like about it. 
13:40:47 <engstad> If you _thought_ you knew how to optimize, your head will spin if you ever work in a good games company.
13:41:12 <Marvin--> heh
13:41:25 * Marvin-- isn't much into games
13:41:31 <Marvin--> and definitely not console
13:41:43 <engstad> Me neither actually. :-)
13:41:57 <Marvin--> I do play the occasional *cough* game of Warcraft 3
13:42:04 <engstad> I did buy a PS2 a little while ago, but I haven't really played a game in ages.
13:42:08 <Igloo> I'd have thought more of the optimisation was being moved into the libraries like DirectX these days
13:42:21 <engstad> On the PC perhaps.
13:43:06 <Marvin--> I had a look at Pan the other day, man is it blazing fast (re: haskell + optimization)
13:43:23 <Igloo> I thought either DX or something else was available on some consoles too and was being pushed to make porting games between platforms easier
13:43:24 <engstad> But that's why the quality (graphical) on PS2 games seems to match the quality of Xbox/PC games. On PS2 you have direct contact with the hardware, which brings more optimization opportunites.
13:43:34 <Igloo> Pan?
13:43:49 <engstad> Pan?
13:43:57 <Marvin--> an embedded language (in haskell) for describing images
13:44:10 <Igloo> It could be the only console it's on is the XBox
13:44:15 <engstad> Ah. Yes I did read about that in a paper.
13:44:28 <engstad> *nod*
13:44:36 <Marvin--> the cool thing is that when you write a program (i.e. haskell code) what you're actually writing is a compiler :)
13:44:58 <engstad> If you don't care so much about the graphics, it might pay off to buy "middle-ware" or use things like directx.
13:45:03 <Marvin--> so the "haskell" code gets compiled to C
13:45:11 <engstad> If you do care, you have to do it yourself.
13:45:18 <Marvin--> you can for example create photoshop plugins in Pan :)
13:45:50 <Marvin--> engstad: too bad, I suspect that code reuse and sharing would make games cheaper
13:46:12 <engstad> Yes, but again, you lose optimization opportunites.
13:46:32 <Marvin--> then it's not general enough ;)
13:46:37 <engstad> But yes, optimization is _expensive_ (in man hours).
13:48:18 <engstad> I created an optimizer in Ocaml, actually. I need to make the absolute fastest inner loop. There's a lot of different interactions going on between the assembly instructions, and the register constraints have to be met. It runs _forever_ (meaning a week ..
13:48:47 <engstad> .. on a pentium4). And sometimes, it's not even giving me a good solution.
13:49:03 <Marvin--> ugh
13:49:25 <engstad> It's a huge combinatorial problem, and it's definitely NP-complete.
13:49:50 <engstad> Now, this is actually a compiler's job.
13:50:08 <Marvin--> you'd think there'd be a lot of research on this kind of optimization
13:50:11 <engstad> So, you can see - a compiler won't always be able to produce the optimized code a human can do.
13:50:36 <engstad> There is - I'm probably going to write a paper on it. Modulo-scheduling.
13:50:59 <Marvin--> isn't one of the problems with optimization on the assembly level that what is fast changes from version to version of processors? :)
13:51:17 <engstad> Well, on consoles you don't have that problem. ;-)
13:51:22 <Marvin--> true
13:51:40 <Marvin--> and I suppose that's the advantage of moving games to the console :/
13:52:08 <Marvin--> for the games I play, I want a keyboard and a mouse though, but if it's on a console on my TV or on my computer...doesn't really matter, as long as I can afford it
13:52:15 <engstad> Yupp. You can actually say: In this condition, we are using 110% of a frame, so what can we take out in order to make it run in frame.
13:52:16 <Marvin--> the advantage of PC games is that I already have a PC ;)
13:52:43 <engstad> On a PC, you couldn't do that.
13:52:45 <Marvin--> the disadvantage is that I have to run Windows on it :(
13:53:12 <Marvin--> are there any keyboard-and-mouse strategy games for console?
13:53:38 <Marvin--> (like Blizzard's games, or Civ3, or AoW(2), or ...)
13:54:25 <engstad> No, not yet, I believe.
13:54:37 <engstad> It might take a while. 
13:55:26 <Marvin--> I'm definitely not interested in joystick/gamepad type of games :)
13:55:36 <engstad> Sony's going to be pushing internet games for the PS2 soon, at least when PS3 comes out. Then you'll also probably see more keyboard/mouse type games for the platform.
13:56:00 <engstad> Btw, I am: http://www.naughtydog.com/kennel/palENGSTAD/pal_E.htm
13:56:51 <Marvin--> FF7? Cool
13:57:05 <engstad> Yeah, conversion from PSX.
13:57:33 <engstad> That's when I leart to hate DirectX. ;-)
13:57:39 <Marvin--> heh
13:57:39 <engstad> learnt rather
14:08:41 * Marvin-- sighs at the Swedish election
14:09:34 <Igloo> ?
14:10:45 <Marvin--> ah, it's just the general silliness
14:10:58 <Marvin--> I suppose I should be glad we didn't get right-extremists like "the rest" of Europe
14:11:22 <Marvin--> the left block (social democrats and left party) are just ONE seat in the parliament short of being in majority
14:11:41 <Marvin--> so the environmental party has enormous power
14:12:10 <Marvin--> and as always, one of the right parties moved for a vote of distrust, and this is the closest ever that it's gone through
14:16:47 <Marvin--> oh well, I should get to bed
14:17:08 <norpan> Marvin--: their power is greatly exaggerated
14:17:36 <Marvin--> norpan: well, yes, but I just find the whole thing silly
14:17:56 <norpan> perhaps, but that's parliamentarism
14:18:14 <Marvin--> I just dislike how they go around saying one thing then another and then yet another
14:18:33 <norpan> they have to negotiate to get the most out of their mandate
14:18:44 <Marvin--> they say "we can never be in a government with the christian democrats" then they have talks with the christian democrats and others to put pressure on the social democrats
14:18:50 <norpan> no different from other parties negotiating
14:19:21 <norpan> they also said they won't settle unless they get posts in the government
14:19:29 <Marvin--> which they gave up
14:19:34 <norpan> perhaps
14:19:59 <norpan> they didn't vote for the sitting government
14:20:07 <norpan> they abstained
14:20:21 <Marvin--> no, but they've also threatened to vote against the sitting government
14:20:29 <Marvin--> which they didn't
14:20:38 <norpan> well, they didn't see anything better perhaps
14:21:06 <norpan> and why risk being voted out of parliament in a new election
14:21:37 <norpan> too bad fp and s don't get along, they'd make great government
14:21:57 <Marvin--> perhaps
14:22:11 <Marvin--> but now I really should go to bed :)
14:22:17 <norpan> well, good nigt
23:25:28 * shapr bounces
23:25:33 <shapr> good morning!
23:43:09 <shapr> I saw a haskell reference about creating and dealing with cyclic data structures
23:43:17 <shapr> I can't find it at the moment...
23:44:13 <shapr> ah, got it: http://okmij.org/ftp/Haskell/misc.html
