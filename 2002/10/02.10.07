00:33:55 <norpan> anyone know when there will be a new ghc version without that annoying deriving bug?
01:47:41 <NeverTooLate> Should I be talking about SPL here or somewhere else?
03:14:46 <shapr> hiya
03:15:29 --- topic: set to 'ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || 2002 Haskell Workshop Programme http://www.cse.unsw.edu.au/~chak/hw2002/ || Try to get this topic to fill a whole screen | Don't use drugs, get high on hugs!' by shapr
03:18:27 <shapr> g'day pseudonym
05:19:20 <ayrnieu> http://www.tellmeastory.com/haskell/haskell.cfm
05:22:13 <norpan> ayrnieu: nice story
05:28:41 <shapr> ayrnieu: neato story
05:28:43 * shapr grins
05:29:31 <ski> heh
05:29:44 * ski grins too
05:29:44 <shapr> hi ski!
05:29:47 <shapr> what's up?
05:30:00 <ayrnieu> I thought it was cute =)
05:30:06 <shapr> truly it is
05:30:12 <ski> i'm fixing a laboration for AFP course (Advanced Functional Programming)
05:30:13 <shapr> especially if your nickname is cleverdra
05:30:29 * shapr always thought that was short for "cleverdragon"
05:30:40 <ayrnieu> sharp - it is =)
05:30:45 <ski> ayrnieu : yes, i think it is (though i have just skimmed it yet)
05:31:28 <ski> shapr : we should implement a turtle graphics embedded language in haskell
05:31:32 <shapr> yah!
05:31:34 <shapr> good idea!
05:31:51 <shapr> if it's really simple, it would be a good demo for DSLs in Haskell
05:32:03 <ski> shapr : but, the evil (just kidding) instructor failed my lab
05:32:08 <shapr> why?
05:32:11 <ayrnieu> DSLs?
05:32:18 <shapr> dsl = domain specific language
05:32:23 <shapr> I'd like to implement Joy in Haskell
05:32:40 <shapr> it's harder than I thought, since Parsec only has prefix and infix support built-in
05:32:43 <shapr> no postfix
05:33:35 <ski> because my parallel composition didn't mesh with sequential composition the way he thought it should (but, as far as i can tell, there isn't anything in the lab spec that disqualifies my solution)
05:33:44 <ayrnieu> post x f = f x -- =)
05:37:36 <ski> i wanted my parallel composition to be both commutative and associative.
05:37:58 <ski> i.e in my implementation
05:37:59 <ski> (p1 <|> p2) *> p3
05:38:04 <ayrnieu> (shapr - you might start with Forth, which is trivially 'parsed', and then just make it more functional.)
05:38:16 <ski> (where <|> is parallel and *> is sequential composition)
05:38:47 <ski> p1, p2 *and* p3 are all executed concurrently
05:39:08 <ski> he thought that p3 should wait for at least one of p1 and p2 ..
05:45:22 <ski> but to preserve commutativity and associativity, i'l of course have to wait for both. so i have to implement a simple barrier synchronisation ..
05:45:25 * cleverdra wishes that it was even merely difficult to google for COM, as in "haskell COM client", instead of impossible.
05:45:33 <ski> s/i'l/i'll/
05:46:25 <shapr> cleverdra: haskellscript
05:46:35 <shapr> it's a connection to Windows Scripting Host
05:46:47 <shapr> should let you do COM calls from inside Haskell
05:46:58 <cleverdra> ah.  Thank you.
05:47:07 <shapr> ski: I like yours better ;-)
05:48:06 <shapr> cleverdra: also, any VBScript calls should be just as accessible from HaskellScript (or JScript, PythonScript, etc, etc)
05:48:42 <shapr> so if you happen on some tutorial that say "automating MS Office with VBScript" they should apply equally to HaskellScript
05:48:57 <ski> shapr : my first idea ?
05:49:00 <cleverdra> OK =)
05:49:11 <shapr> ski: yah, why should they wait?
05:49:42 <shapr> ski: hey, have you tried Manuel Chakravarty's parr ?
05:54:06 <ski> parr = ?
05:54:48 <shapr> http://www.cse.unsw.edu.au/~chak/nepal/
05:55:23 <ski> well, i wanted no unncessecary assymetry, so i though it was easiest to implement the p1,p2,p3 all conurrent solution
05:56:20 <ski> (if i lifted the (personal) strive to symmetry, i think i could easily implement the "p3 waits on one of the parallel progs, but not the other")
05:56:55 <ski> but, now i force myself to implement the more hard one (barrier synchronisation) ;-)
05:57:12 <shapr> oh, I see
05:57:19 <shapr> I want to get paid to write Haskell.
05:58:37 <ski> o, nepal. i've looked at the page and at some of the papers a little, i think. i've even downloaded the files. But, alas, i don't have the latest GHC implementation at home (actually i haven't got around to install the non-latest version i've downloaded either :( )
05:59:19 <ski> quite interesting ideas in nepal i think, though
05:59:37 <shapr> yah, I agree
05:59:55 <shapr> especially since my desktop is SMP, and I have five other bootable computers in my room.
06:00:41 <shapr> parr does both SMP and MPI
06:00:52 <ski> SMP ? MPI ?
06:01:02 <shapr> smp = symettric multiprocessing
06:01:06 <ski> ok
06:01:10 <shapr> this computer is a dual athlon
06:01:21 <shapr> and I have several other weenie computers spread around my room.
06:01:51 <ski> (and does SMP mean something also ;-P)
06:02:34 <shapr> huh?
06:02:46 <shapr> oh
06:02:52 <shapr> MPI is Message Passing Interface
06:03:08 <shapr> Beowulf clusters usually use one or both of PVM or MPI
06:03:17 <shapr> PVM is Parallel Virtual Machine
06:03:44 <shapr> both of them require you to compile your executable with parallel stuff in mind, it's not at all transparent.
06:03:47 <cleverdra> "Scripting COM components in Haskell"  /me hugs Haskell-related academic papers.
06:03:47 <ski> i just wondered something about the differences of them, and what they do and so on. lowlevel stuff i suppose
06:04:02 <shapr> cleverdra: lucky you :-)
06:05:02 <shapr> I used to know the details of the differences between MPI and PVM, but I've mostly forgotten them. in the early 1990s PVM was far better. Nowadays I don't know. I do know that Manuel Chakravarty prefers MPI.
06:06:47 <shapr> of course, the general idea is to stick a bunch of small computers together and get them to pretend to be a Cray T3 or something
06:23:01 <shapr> hey Igloo, your nick isn't registered.
06:30:31 <Igloo> I can believe that
06:31:01 * Igloo could register it but it would probably just lapse due to me never identifying
06:31:30 * cleverdra wonders when his nick will lapse.
06:31:56 <Heffalump> you can automatically identify from a hostmask
06:33:01 <Igloo> Oh, cunning
06:33:47 <Heffalump> that's what I do
06:34:03 <Igloo> The services don't seem to want to talk to me or, in nickserv's case, exist though
06:34:53 <cleverdra> I see NickServ from here, Igloo.
06:35:37 <Igloo> Oh, it's because the whoises went to the message window. And irssi doesn't highlight window with notices sensibly
06:37:23 <shapr> my irc client autoidentifies when I connect
06:39:02 <Igloo> Is just adding a hostmask to the list sufficient or am I missing an option?
06:39:19 <shapr> huh?
06:39:36 <Igloo> Oh, I could just try it
06:40:23 <shapr> if your nick is registered, then when you connect it'll notify you with "this nick is registered, msg nickserv with your password if you're that person"
06:40:54 * Igloo guesses not
06:40:57 <shapr> ?
06:41:11 <shapr> -NickServ-            Nickname: Igloo 
06:41:11 <shapr> -NickServ-          Registered: 5 minutes 5 seconds ago
06:41:14 <shapr> cool
06:41:55 <Igloo> It's not auto identifying based on hostmask, though
06:42:02 <shapr> can it do that?
06:42:08 * shapr reads directions
06:42:12 <Igloo> < Heffalump> you can automatically identify from a hostmask
06:42:19 <shapr> wow
07:11:59 * shapr bounces
07:38:05 * shapr boings
07:40:24 <shapr> yay home
07:40:32 <shapr> munich is a nice place.
07:43:36 <shapr> I spent a week in munich last year.
07:44:11 <ayrnieu> I am so unhappy.  Earthlink is too aggressive about cutting 'idle' connections.
07:44:36 * ayrnieu appends to his "It'll all be over in two months" list.
07:44:37 <shapr> that does suck
07:45:04 <ayrnieu> It has horrible psychological effects.
07:45:39 <ayrnieu> I have to keep refreshing a web page.  I can't relax to read *anything*.  I program a little and the connection drops just as I realize that I need to get something.
07:46:04 <shapr> I'd switch instantly.
07:46:10 <shapr> or run gkrellkam
07:46:19 <ayrnieu> I've decided to settle with 28.8, because it takes several tries to get anything better and this speed at least keeps my downloads long -- saving me keep-alive efforts.
07:46:28 <shapr> why not get DSL?
07:46:34 <ayrnieu> gkrellkam?  I'll look at that.
07:46:47 <ayrnieu> This is my parent's system.  They used to have MSN, but changed to Earthlink recently.
07:46:53 <shapr> oh
07:47:01 <shapr> gkrellm is linux only I think
07:47:32 <ayrnieu> I'll see if a little python to repeatedly fetch HTML from google will work.
07:47:52 <shapr> should
07:48:43 * ayrnieu tries to recover state before the interruption.  What did he need to get?
07:50:00 <ayrnieu> anyway, HaskellScript seems to work nicely =)
07:50:29 <shapr> yay!
07:51:18 <liiwi> haskellscript? as in javascript? 
07:52:05 <shapr> nah
07:52:08 <shapr> as in VBScript
07:52:11 <shapr> hi liiwi!
07:52:28 <shapr> win32 has WSH = Windows Scripting Host
07:52:41 <ayrnieu> whost <- getHostItem "WScript"; word <- whost # whostCreateObject "Word.Application"
07:52:50 <shapr> JScript, VBScript, PythonScript, and HaskellScript all talk to WSH
07:52:56 <shapr> cool!
07:55:00 <ayrnieu> The way this works, I can put Haskell source in a .hash file and then just double-click on that file as for any windows program.
07:55:12 <shapr> coool!
07:55:13 <ayrnieu> No DOS window, for instance.
07:56:03 <ayrnieu> yes =)  I've gotten pretty far by just looking at one of the examples.  I'm just now getting GSView to read the documentation.
07:56:27 <shapr> that's good stuff
07:57:42 <ayrnieu> Thanks for pointing me to it =)
07:57:59 <shapr> sure, np
07:58:11 <shapr> I'm a great index for many things computer oriented
08:08:11 * shapr bounces happily
08:49:50 * shapr tries to write lazily evaluated Python code and fails miserably
08:53:08 <shapr> cleverdra: pseudonym was telling me about a really neat Haskell lazily evaluated trick
08:53:13 <shapr> though I've now forgotten it
08:53:44 <shapr> something about Okasaki turning delayed operations into more efficient structures..
08:53:47 * shapr tries to remember
08:54:09 <shapr> oh, dark told me a neat one
08:54:29 <shapr> he wanted to see if a list was at least N items long
08:54:37 <shapr> but the length function evaluates the whole list
08:54:56 <shapr> so he wrote a recursive atLeast function that only evaluates that many items
08:55:04 <cleverdra> So he used length . take ?
08:55:20 <shapr> no, he wrote his own, but your solution is better I think
08:55:24 <shapr> hi obraun!
08:55:45 <shapr> cleverdra: ok, that's now in my toolbox...
08:56:06 <obraun> hi shapr 
08:56:25 <shapr> how's munich?
08:56:51 <obraun> well fine, Oktoberfest is over!
08:57:19 <shapr> beer is not good for code... at least, not for me.
08:57:27 <dennisb> Antoher function on that theme would be compareLength :: [a] -> [b] -> Ordering that does not use length. I used that one yesterday
08:57:34 <obraun> for me too
08:57:36 <shapr> Birmingham Alabama has an Oktoberfest every year, I get zero code done then.
08:57:50 <obraun> ;o)
08:57:55 <shapr> dennisb: huh?
08:58:49 <dennisb> you want to know if list a is shorter then list b, you don't have to evaluate both lists to the end to do that
08:59:21 <dennisb> you just have to go as long as the shortest of the two lists
08:59:37 * cleverdra nods.
09:00:39 * dennisb goes back to work
09:00:54 <cleverdra> compareLength [] [] = Equal \n compareLength [] _ = GreaterThan \n compareLength _ [] = LessThan \n compareLength (_:xs) (_:ys) = compareLength xs ys
09:00:57 <cleverdra> Like that?
09:01:21 <cleverdra> err, except the LessThan and GreaterThan should be swapped.
09:02:19 <shapr> that's what I would have written
09:02:30 <dennisb> yes, except the haskell 98 type Ordering has values LT GT EQ
09:02:41 <cleverdra> ah, OK.
09:12:50 <cleverdra> OK.  Every thirty seconds I touch google.  I hope they don't mind.
09:18:57 * andersca just attended an interesting lecture
09:19:05 <shapr> what was the lecture about?
09:19:09 <andersca> fractals
09:19:12 <shapr> neato
09:19:14 <andersca> it was given by benoit mandelbrot
09:19:18 <shapr> wow.....
09:19:28 * Igloo has just been writing a mandelbrot generator in Haskell by complete coincidence
09:19:43 <shapr> first thing I wrote in Haskell was a mandelbrot generator
09:19:44 <Igloo> Cool
09:19:51 <shapr> mine needs memoising though
09:20:03 <Igloo> How much does memoising gain you?
09:20:15 <shapr> I dunno
09:20:21 <shapr> good question
09:20:59 * Igloo is hoping I can get a significant speedup by unrolling the main loop
09:21:12 <shapr> I want to rewrite mine using parr =)
09:21:34 <shapr> then run it on my dual Athlon 1800+ w/ SMP and across MPI with my 800MHz and 600MHz also
09:21:41 <Igloo> Unfortunately it takes an awful lot longer to run with Complex Rational than Complex Float
09:22:33 * Igloo might try seeing if I can get support to install a suitable version of GHC in the ECSlab here some time (50 odd machines)
09:22:43 <shapr> that would rock
09:23:14 <shapr> we could do all kinds of fun stuff with parr installed on all of those :-)
09:23:22 <Igloo> :-)
09:23:31 <Igloo> Is parr the same thing as gph?
09:23:41 <shapr> nah, gph != parr
09:24:14 <shapr> http://www.cse.unsw.edu.au/~chak/nepal/
09:24:23 <shapr>  Compilation of Nested Data Parallelism
09:24:37 <shapr> perfect for fractals
09:24:55 <shapr> chilli told me that parr is more about single program, multiple data
09:24:57 <shapr> SPMD
09:25:12 <shapr> nice thing is that it works with standard GHC
09:25:30 <shapr> afaik, gph and friends are all slightly non-standard
09:27:00 <Igloo> My vague memory of gph is that it has a `par` operator which would make it easy enough for fractals - just foldr1 `par` the list of coordinates to do
09:27:54 <Igloo> What did your mandelbrot generator do? Output in ASCII art or graphics of some kind?
09:27:59 <shapr> just ascii
09:28:01 <shapr> nothing exciting
09:28:17 <shapr> even so, it took me several days to figure out
09:29:03 * Igloo has it writing XPM files ATM but will hopefully switch to colour and PNG when I've read the PNG spec tonight or tomorrow
09:29:15 <shapr> I think there was some reason that parr was spiffier than gph or gum
09:29:21 <shapr> but I can't remember it right now
09:29:26 <Igloo> :-)
09:29:29 <shapr> nor can I find the paper on my drive
09:29:34 * Igloo has other distractions for now, anyway  :-)
09:29:54 <shapr> yah, me too
09:30:01 <shapr> unit testing in Zope is mine
09:30:26 <Igloo> You only have one!?  :-)
09:30:43 <shapr> only one that's paying me to work on it :-)
09:30:54 <Igloo> Heh
09:34:48 <Igloo> Bah, I think comparing length^2 of floats rather than length has introduced overflow
09:38:53 <shapr> I wish I had QuickCheck in Zope
09:39:51 * Igloo sighs...the Rational one has been running 15 mins and is just over 1/10 of the way there. The Float one completed in under 20 seconds.
09:39:58 <shapr> hm
09:40:50 <Igloo> It might be a bit better if I check magnitude after each iteration of course
09:41:08 <shapr> could help
09:43:03 * Igloo heads off for inductino type stuff, anyway
10:16:07 <shapr> hi erwin
10:16:20 <shapr> wassup?
10:18:05 <Erwin> Heh, the Thompson book is still lying on my desk at least, but I'm rather behind in the exercises. I have finally found an interesting job though, and am starting in 2 weeks (UNIX Systems Programmer at a large ISP here, FreeBSD stuff)
10:18:10 <shapr> yay!
10:23:00 <cleverdra> curiously, what books and tutorials and such have any of you used to learn Haskell?  I'm learning in something of an ad-hoc fashion, from various tutorials and academic papers.  The GHC-supplied documentation/examples are useful, but not to learn from :-/
10:23:00 <shapr> I used the Thompson book
10:23:00 <cleverdra> Is that the online one?  I haven't looked at it yet.
10:23:00 <shapr> I get a lot from #haskell as well
10:23:00 * ski too
10:23:00 <shapr> I got a tremendous amount from doing the icfp contest with the rest of the team
10:23:00 <Heffalump> are the detailed results up yet?
10:23:00 * shapr hasn't looked
10:23:00 <Heffalump> btw, I'm afraid I might not be able to do it next year
10:23:00 <cleverdra> They aren't as of a few hours ago.
10:23:00 <shapr> winners are online
10:23:06 <Heffalump> I know that, I heard the announcement :-)
10:23:12 <Heffalump> I guess the judges won't be home yet
10:31:34 <shapr> hi buggs
10:31:43 <buggs> hoi shapr
10:34:08 * shapr boings
10:46:29 <Marvin--> HOOD is damn cool
10:46:50 <ayrnieu> http://www.cs.ukc.ac.uk/pubs/1997/224/index.html
10:46:52 <ayrnieu> HOOD?
10:47:05 <Marvin--> Haskell Object Observation Debugger
10:47:34 <ayrnieu> Indeed.  And there's a GHOOD.
10:52:47 <ayrnieu> Does anyone here use nhc?  It seems nifty.
10:52:55 <Marvin--> I use mainly ghc
10:53:56 <ayrnieu> Me too, though I'll probably be using more of Hugs because of HaskellScript.
11:04:19 <cleverdra> http://compiler.kaist.ac.kr/~khchoi/fp.html is a good set of Haskell links.
11:27:23 <ayrnieu> unfortunately, nhc's ftp and cvs are both broken.
11:48:24 <cleverdra> http://www.elsevier.com/gej-ng//31/29/23/76/33/show/Products/notes/index.htt for more Haskell papers
13:08:01 <cleverdra> Sigh.  I have decided that heaven is this:  money.  How much money?  Enough money to be able to buy any book whenever you want it, when you want it, in such fashion that it is delivered within seconds of your desire.  I shall devote the rest of my life towards the aquirement of this amount of money.
13:08:31 <Marvin--> heh
13:10:29 <cleverdra> Heaven may also be a world-government that subsidizes the authors of CS/Programming books.
13:10:43 <cleverdra> But I'll take whichever comes first.
13:11:20 <Marvin--> I'd like a world where American CS/Math writers don't get paid by the thickness of their book, but the content :/
13:16:47 <andersca> what's the type of main when you're using runhugs?
13:16:51 <andersca> [String]->IO () ?
13:17:00 <Heffalump> IO ()
13:17:04 <ski> IO () i think
13:17:16 <Heffalump> you use getArgs to get the command line params
13:17:24 <andersca> ah ok
13:17:42 * shapr bounces
13:17:53 <andersca> it's not getargs
13:18:02 <Heffalump> getArgs ?
13:18:07 <Heffalump> System.getArgs ?
13:18:12 <cleverdra> no, it's getArgs
13:18:29 <ski> hugs also has an extension : IOExtensions.argv :: [String]
13:18:31 <Heffalump> Prelude> :t System.getArgs
13:18:34 <Heffalump> IO [String]
13:18:48 <Marvin--> ski: iiiiih
13:18:55 <cleverdra> in hugs, you may have to :load System.hs
13:19:06 <ski> Marvin-- : what ? :)
13:19:16 <Marvin--> ski: sounds unsafePerformIO-ish
13:19:46 <Heffalump> it might use it, but it's not unsafe
13:19:54 <ski> Marvin-- : well, the acual implementation i'm looking at right now here at school actually uses unsafePerformIO ... :)
13:19:55 <Heffalump> since it doesn't change during execution of the program
13:20:01 <ski> yes
13:20:11 <ski> (hopefully, i.e. :)
13:20:23 <Heffalump> people have been talking about having pure file reading in the same way (which never changes after the first time you read the file)
13:20:25 <Marvin--> sure, but I'm always wary of overuse of unsafePerformIO
13:20:44 <Heffalump> so is John Launchbury :-)
13:20:48 <ski> (but, what about transparent quitting and restarting of CGI programs ?)
13:20:50 <cleverdra> When do you use unsafePerformIO?
13:21:18 <Heffalump> you can view argv as a definition that is added at the top of your program before it's run
13:21:25 <Marvin--> sure
13:21:34 <Marvin--> but then it'd make more sense to have main :: [String] -> IO ()
13:22:36 <ludde> Marvin--: in the AFP quickcheck demo, he used the "why" function to get the cause of the failure. do you know how to save a state between commands like that, or did it use an external file perhaps?
13:22:47 <Marvin--> ludde: I have no idea
13:23:12 <shapr> hey, that was Heffalump's idea
13:23:19 <Heffalump> it'd be more consistent with other languages for main :: String -> IO Int
13:23:24 <Heffalump> what was?
13:23:31 <shapr> the quickcheck saving errors
13:23:39 <cleverdra> Heffalump - did you mean to say [String]?
13:23:42 <shapr> at least, I think we're talking about the same thing.
13:23:45 <Heffalump> I wanted it to save the data it caused the error with
13:23:47 <Heffalump> cleverdra: yes
13:23:52 * Marvin-- does  grep why *.hs  in the QuickCheck directory and gets no results
13:23:59 <ski> cleverdra : you can use it sometimes when you are interfacing with an imperative language (i.e. C) and don't wan't to do IO for reading in structures that you *know* you aren't changing (whew)
13:24:04 <ludde> I think the command was named "why"
13:24:04 <shapr> heffalump: right, so I emailed hughes about it, and he said it was a cool idea
13:24:16 <Marvin--> ludde: I think so too
13:24:18 <ski> cleverdra : e.g. http://www.cs.chalmers.se/Cs/Grundutb/Kurser/afp/Lab2/Chunk.hs  (hope you can read that)
13:24:38 <Heffalump> damn, I should have told him myself, I always feel really stupid when I have conversations with him :-)
13:24:42 <shapr> heffalump: and he said it's easy enough to just save the random number that was generated, and then you can get the actual item by mapping through the Gen monad for that datatype
13:24:43 * cleverdra saves it for the Massive File Transfer due in ... a few minutes.
13:24:43 <Marvin--> ski: heh, yeah, we're using that ;)
13:24:52 <shapr> Heffalump: me too :-)
13:25:03 <ludde> Heffalump: you know john hughes?
13:25:14 <Heffalump> yes, he was my external PhD examiner
13:25:42 <shapr> I should email hughes and ask him to show up here :-)
13:25:44 <ski> ludde : I suppose they used a top-level "global" (the horror :) variable obtained through unsafePerformIO
13:25:44 <ludde> oh, but you aren't in Gothenburg?
13:25:58 * Marvin-- is probably going to contact the FP research group about a MSc thesis related to FP
13:26:01 <Heffalump> no, Oxford
13:26:04 <ludde> ski: I see
13:26:06 <Heffalump> hence external
13:26:13 <shapr> hi Pseudonym!
13:26:21 <ludde> Heffalump: oh, ok.
13:27:06 <shapr> hm, I had a question for Pseudonym
13:27:09 <shapr> but I've forgotten it
13:27:13 <ludde> josef svenningson is never here? doesn't he like haskell a lot?
13:27:30 <Marvin--> "like haskell" != "hang out in #haskell" ;)
13:27:34 <Heffalump> he's probably on his way home from ICFP atm :-)
13:27:43 <Marvin--> maybe I should say /= ;)
13:28:02 <ski> Marvin-- : perhaps the "why" is a very recent addition to QuickCheck ..
13:28:10 <Marvin--> ski: perhaps so
13:28:29 * Marvin-- checks John's homepage
13:29:05 <Marvin--> it's not in the version on his homepage either
13:29:11 <Marvin--> hmm, I'll have to ask Koen tomorrow
13:29:42 <ludde> A new paper (May 2002) on testing monadic programs, especially in the ST monad. Describes a new version of QuickCheck (not yet online). 
13:30:07 <Heffalump> won't Koen be a bit jetlagged tomorrow? :-)
13:30:37 <Marvin--> ah, doh, it's Jan-Willem who holds tomorrow's lecture too
13:30:56 <ski> i thought so ...
13:31:08 <Heffalump> Jan-Willem who?
13:31:19 <Marvin--> Heffalump: a PhD student here, the assistant on the course
13:31:20 <ski> Jan-Willem Roorda (i think thats it)
13:31:24 <Marvin--> nod
13:31:34 <ludde> he's a PhD student i think
13:31:41 <Heffalump> ah
13:32:05 * Marvin-- could've been assistant to John if he had picked that course to teach in
13:32:36 <Marvin--> (John's course in functional programming that is, for those of you who had a hard time parsing that sentence)
13:33:07 * ludde has john and josef as project supervisors for the "D3-project" (which no one knows what it is)
13:33:51 <ludde> my group will have a meeting with them on friday :)
13:34:36 * Marvin-- has ludde for student ;)
13:34:36 <ski> i think i'll be leaving now, food calls :)
13:34:44 <ski> bye
13:35:02 <ludde> heh
13:35:03 <Heffalump> this channel is becoming very incestuous :-)
13:35:12 <ludde> haha
13:35:32 <Marvin--> bah, you don't know incest until you've listened to german power metal ;)
13:35:33 <ludde> yeah.. :)
13:35:46 <ludde> german power metal?
13:35:56 <Marvin--> "Oh, Kai Hansen plays on this album... and this, and that, and this too"
13:36:14 <Marvin--> or maybe it's mostly the symphonic metal
13:36:22 <Marvin--> Blind Guardian, Helloween, Gammaray et.c.
14:25:29 <shapr> this channel is becoming more knowing in-person that most channels I've seen.
14:25:51 <shapr> hi hal, how's the code?
14:26:06 <andersca> knowing in-person?
14:26:15 <shapr> rather than knowing "on-irc"
14:26:23 <shapr> there are very many knowing "in-person" connections here
14:26:27 <hdaume> not bad :)
14:26:32 <andersca> ah, right
14:26:41 <andersca> andersca -> dennisb -> norpan for example
14:26:58 <shapr> once I move to Boden, I'll have to travel to mecca, er, chalmers and hang out
14:27:08 <hdaume> hehe
14:27:12 <hdaume> when are you moving?
14:27:19 <shapr> halloween
14:27:34 <shapr> we're in the pre-pack process now
14:27:47 <shapr> we desperately need to do GC on the heap
14:28:34 * shapr suspects his room is the place that looks most like a heap
14:28:54 <hdaume> that does imply some order, though :)
14:29:02 <shapr> chronological
14:29:05 <hdaume> ah
14:29:06 <shapr> oldest stuff is on bottom :-)
14:29:30 * hdaume has been hacking too much java recently
14:29:34 <shapr> ouch
14:29:46 <Igloo> Are you moving back to America?
14:29:58 <shapr> igloo: in five years maybe
14:30:12 <Igloo> Oh, chalmers.se, of course
14:30:40 <shapr> right, home of Hughes, Claessen, and many people from #haskell
14:30:58 <Igloo> 2:20:17.30. Bah.
14:31:03 <shapr> ?
14:31:20 <Igloo> Time taken for the Rational mandelbrot generator to finish
14:31:24 <shapr> oh
14:34:13 * shapr builds lots of packages with 5.04.1
14:34:17 <shapr> igloo: is your code online?
14:35:07 <Heffalump> Rational?
14:35:32 <Igloo> Using Rationals rather than Floats to do the arithmetic
14:35:33 <Heffalump> ok, what bits of the topic are still "current"
14:35:44 <Igloo> It can be shapr, but it isn't great ATM
14:36:09 <shapr> I'd like to look at it, if you don't mind
14:36:19 <shapr> heffalump: go forth and clean the topic!
14:36:21 <Igloo> Compared to 19.583 for float. So 430 times slower then
14:36:32 <Marvin--> Igloo :)
14:36:58 * shapr wishes "make -j2" would work for haskell programs
14:37:14 <Igloo> Why won't it?
14:37:28 <shapr> most people haven't been very picky with their Makefile dependencies
14:37:34 <Igloo> If you have proper module dependencies, e.g. via the use of ghc -M, it should work fine
14:37:50 <Igloo> Oh, right, particular instances of Haskell programs
14:37:53 <shapr> right
14:37:57 <shapr> including ghc5 btw
14:38:14 * shapr needs to send the latest make -j2 bugreport in
14:38:25 <Igloo> http://chaos.earth.li/~ian/foo.lhs  (you can tell how unfinished it is - it's still called foo  :-)  )
14:38:34 <shapr> heh
14:38:44 * Marvin-- goes to bed
14:38:54 <shapr> g'nite marvin--
14:39:09 * Igloo mentions "Recursive Make Considered Harmful" http://aegis.sourceforge.net/auug97.pdf, probably not for the first time, too
14:39:22 <shapr> I don't know that doc...
14:40:20 <shapr> http://kungens.kemi.fi/~shae/src/haskell/Mandelbrot-0.2.hs
14:40:24 <shapr> dunno if it'll help you any though
14:40:51 <shapr> I wonder if I could fit hugs + linux on a floppy
14:40:54 <Igloo> I need to check what someone muttered about going outside 2 implying divergence
14:41:11 * shapr thinks of SPyLinux (single floppy of python + linux)
14:41:16 <shapr> it's thrue
14:41:17 <shapr> er, true
14:41:30 <shapr> look at the bail function I have
14:41:56 <shapr> grr
14:42:04 <shapr> gtk+hs Makefile needs help
14:42:38 <shapr> doesn't clean out the *.hi files
14:43:01 <Igloo> Does going above 2 imply it never goes below it again?
14:43:19 <shapr> yup
14:44:11 <Igloo> So you can't reach something like z=3, c=-10 then?
14:44:47 * Igloo tries to remember how magnitude changes when you multiply complex numbers
14:48:34 <shapr> oh, duh...
14:48:39 <shapr> I forgot to remake c2hs first
14:54:32 <Igloo> shapr: BTW, if you use the real Complex class and change the test to use magnitude > k then I think it looks right with Float
14:54:43 <Igloo> Otherwise the outer edges go black due to overflow
14:55:05 * Igloo tests and finds Double works fine either way
15:03:08 <shapr> hrm
15:03:20 <shapr> I think chilli already said that gtk+hs won't build with 5.04.1
15:09:52 <shapr> well, parr builds
15:09:53 <shapr> that's nice
15:10:29 <shapr> yay! WASH compiles!
15:11:04 <Igloo> Cool  :-)
15:11:14 * shapr bounces happily
15:12:32 <shapr> um, why don't I have a ghci with 5.04.1 ??
15:14:12 <Igloo> Because you have to build it twice, probably
15:14:51 * shapr blinks
15:14:55 <shapr> well
15:14:56 <shapr> ok
15:14:57 <shapr> I'll try that.
15:15:03 * shapr rebuilds
15:16:28 <shapr> I wish I could give it more memory or something in the configure script
15:17:07 <Igloo> By default it doesn't specify a maximum heap size does it?
15:17:15 * shapr dunno
15:17:32 <shapr> the build stuff scrolling by generally says 21M in use
15:17:51 <Igloo> I think that's just how much it needed though
15:17:56 <shapr> oh
15:18:28 <shapr> hm, it does appear to be building ghci this time
15:18:28 <shapr> nice
15:18:39 <shapr> sure does take long to build
15:18:48 <Igloo> Tell me about it
15:19:12 <shapr> I can build a 2.4.19 kernel and modules from source in almost exactly two minutes on this machine
15:19:14 <shapr> and ghc still takes forever
15:20:31 <Igloo> Took me about 8 hours per build I think. And I must have done around 10 of them in the last few weeks
15:20:51 <shapr> mine builds in less time than that
15:20:53 <shapr> happily :-)
15:21:02 <shapr> I should time it, I've forgotten
15:21:07 <shapr> I think it was about 2 hours
15:21:27 <shapr> I could cut that down even further if make -j2 would work
15:21:37 <shapr> of course, then I couldn't play games at the same time...
15:32:35 <shapr> bah, it crapped out
15:32:41 * shapr goes off to play counterstrike
15:51:43 <toadx> are there any haskell interfaces to MySQL?
16:08:44 <Igloo> I believe there are
16:08:48 <Igloo> Check out www.haskell.org
16:12:14 <toadx> the only MySQL listed there claims to be outdated and based on an outdated FFI tool :)
16:12:29 <toadx> but I though I heard someone talking about something better once
17:06:57 <Pseudonym> Greetings.
17:07:41 <hdaume> alas, haskell didn't win icfp :(
17:07:48 <hdaume> or rather, a haskell group
17:14:32 <buggs> isn't it fun that a "C, raw C" team made second place :)
17:17:42 <Pseudonym> Not in the lightning division.
17:18:48 <Pseudonym> I'm never surprised when an O'Caml team wins, incidentally.
17:18:56 <hdaume> nor i
17:19:06 <toadx> cuz there are so many O'Caml programmers?
17:19:21 <Pseudonym> I swear O'Caml was designed for winning programming competitions with.
17:19:28 <toadx> hehe
17:20:04 <Pseudonym> It's functional, it has impure features if you need a quick hack and it has a very, very fast implementation.
17:20:49 <toadx> i guess that is why its the tool of descriminating hackors
17:20:57 <Pseudonym> Indeed.
17:21:27 <Pseudonym> Haskell, being the tool of discriminating application developers, is far less suited to this task.
17:21:50 * toadx is replacing all his php code with haskell
17:22:21 <toadx> php is the tool of un-initiated web monkeys
17:23:09 <toadx> for 'web scripting language' it has horrible support for XML parsing and HTML generating
17:23:22 <toadx> and sessions
17:40:54 <Pseudonym> Absolutely.
17:41:05 <Pseudonym> I've written one serious project in PHP.  Never again.
17:41:12 <Pseudonym> It's not bad for quick hacks, though.
17:41:19 <Pseudonym> When you need something a little more powerful than SSI.
17:41:56 <toadx> yeah
17:42:14 <toadx> have you used WASH/CGI at all?
17:42:44 <Pseudonym> Nope.
17:43:43 <toadx> I am liking it a lot so far
17:48:03 <toadx> the only problem I am having so far is that fact that I run linux, but my webserver runs freebsd. So I think I need to install FreeBSD+build environment or get a new web host.
17:48:59 <toadx> or get ghc to compile in less than 30 seconds in 8 megs of ram ;)
17:55:11 * Pseudonym laughs
17:55:25 <Pseudonym> I used to use FastCGI some time ago.
17:55:43 <Pseudonym> Really what you need is mod_haskell.
17:55:52 <toadx> hehe
17:56:15 <Pseudonym> Trouble is that Haskell + DSOs == trouble.
17:56:36 <toadx> DSO?
17:56:53 <Pseudonym> Dynamically shared object.
17:56:59 <Pseudonym> .so, .dll, whatever your platform calls it.
17:57:05 <toadx> ah
17:58:09 <toadx> well, its time for me to go home, cya
23:44:14 <sethk> Hello, anybody home?
