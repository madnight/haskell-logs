02:01:47 <andersca> hey Marvin--
02:02:50 <Marvin--> morning
02:03:01 * andersca got his compiler working
02:03:08 <obraun> morning
02:08:08 * andersca is now ipv6 enabled
02:15:31 <obraun> andersca: kewl, do ou have  provider who provides *native* IPv6 or do yopu use a tunnel? 
02:15:58 <obraun> s/ou/you ; s/yopu/you/
02:16:21 <andersca> obraun: no idea ;)
02:16:40 <obraun> ???
02:17:04 <obraun> andersca: only your box is ipv6 enabled?
02:17:04 <andersca> I assume there's a tunnel to 6bone
02:17:10 <andersca> no, the router is too
02:17:25 <ludde> your own router?
02:17:27 <obraun> ok, I see
02:17:35 <andersca> ludde: no
02:17:54 <ludde> oh, so hemmet.chalmers.se is ipv6 enabled? that's cool
02:18:05 <andersca> eyah
02:18:20 <ludde> can you IRC through ipv6?
02:18:39 * obraun yould like to have a native IPv6 provider :(
02:18:47 <ludde> i guess you need to find an ipv6 compatible IRC server
02:18:54 * obraun s/yould/would/
02:19:08 * obraun cannot type anything today
02:20:59 <Marvin--> I think some of the OPN servers can do IPv6
02:21:11 * andersca checks
02:22:35 <andersca_> yay
02:22:37 <Marvin--> :)
02:23:07 * andersca_ notes that his identd server isn't ipv6 though
05:05:49 <shapr> boing
05:06:04 <shapr> so, what's up lately?
05:08:33 * shapr reads http://haskell.org/wiki/wiki?TyingTheKnot
05:11:26 * Igloo is eagerly awaiting the ICFP results  :-)
05:12:12 <shapr> when will we hear?
05:13:09 <Igloo> ("shortly" - 15 hours) or so
05:14:05 <shapr> cool
05:25:02 <ibid> which results?
05:26:46 <Igloo> http://icfpcontest.cse.ogi.edu/
05:26:58 <ibid> yes i know
05:27:14 <ibid> you are waiting for more detailed results?
05:27:31 <Igloo> Yes
05:27:39 <ibid> (to me "waiting for results" sounds like waiting for the winner announcement:-)
05:27:47 <Igloo> Like ones that tell us how well we did  :-)
05:27:53 <ibid> right :-)
05:45:18 * shapr tries to understand TyingTheKnot
10:44:51 * shapr bounces
10:52:42 <shapr> hi erwin
10:56:57 <shapr> is there some way I can change the type of an existing list?
10:57:03 * shapr thinks about that
10:57:33 <shapr> does haddock also output docs in info format?
10:57:41 <shapr> that would make browsing from within emacs easier
10:59:01 <obraun> shapr: no only html so far, I think
10:59:06 <shapr> oh well
11:03:20 <Igloo> Change the type of an existing list?
11:03:43 <shapr> igloo: I'm back to twistedhaskell...
11:03:43 <Igloo> You can map a conversion function across it
11:03:46 <andersca> yeah
11:04:07 <shapr> -- List: [1, 2] --> ['list', 1, 2]
11:04:24 <andersca> can't have different types
11:04:29 <andersca> although you could use Either
11:04:31 <andersca> right?
11:04:36 <shapr> hm
11:04:47 <andersca> or something like
11:04:51 <shapr> a -> Either a String ?
11:05:03 <andersca> data IntString = Int Integer | String String
11:05:04 <shapr> er, [a] -> [Either a String] ?
11:05:14 <shapr> is it possible to do that for any given list though?
11:05:40 * shapr reads up on Either
11:05:43 <andersca> why do you want a 'list' as the first element?
11:06:28 <shapr> because it's a protocol definition
11:06:38 <shapr> it's the standard
11:06:56 <andersca> can'd you do something like
11:06:57 <shapr> I wonder if it would be easier to have a thread that translates instead
11:07:02 <andersca> data Foo = List [a] | ...
11:07:04 <Igloo> Can't you put it in at the point of conversion to bytes?
11:07:14 <shapr> igloo: yah, I was thinking that might be simpler
11:08:25 <shapr> I couldn't think of a way to dynamically change the type of the list
11:15:48 * shapr wishes for template haskell
11:17:06 <Heffalump> it's in GHC CVS, AIUI
11:17:14 <Igloo> Was that wishing related?
11:17:19 <shapr> yah sure
11:17:28 <shapr> template haskell could change the type of a list
11:17:32 <Heffalump> how??
11:17:40 <Heffalump> DYM at runtime, or at compile time?
11:17:45 <shapr> compile time
11:18:02 <Igloo> I suspect you are confused
11:18:09 <shapr> I may be, wouldn't be the first time :-)
11:18:18 <Igloo> :-)
11:18:20 <Heffalump> then he's not confused.
11:18:30 <shapr> ?
11:18:33 <Heffalump> if it's at compile time.
11:18:50 <Igloo> Well, I don't understand how you can use it to change the type of a list
11:19:21 <Igloo> TH doesn't actually allow you to write any different programs, it just makes it easier to write them (by automating some of the writing)
11:19:29 <shapr> yes
11:20:18 <shapr> it wouldn't fix everything, but it would let me generate new types that have "This_list_type = String | <original type>"  kind of thing
11:20:43 <shapr> I think the "fix at encode-time" is a better solution
11:20:50 <Igloo> Ah, I see. But you just want Either a String and map Left, no?
11:21:08 <shapr> I guess so
11:21:15 * shapr is doing exploratory stuff
11:21:20 <Igloo> But encode-time sounds like a better idea anyway  :-)
11:21:20 <shapr> just looking for a good solution
11:21:24 <shapr> yah, I agree
11:21:35 <shapr> the less I have to muck about with weird types, the better
11:22:05 <shapr> plus it means programs that use this lib get to play with their lists natively, rather than having to know ahead of time that it's a JellyEncodedList
11:25:25 <andersca> hey Marvin--
11:25:39 <ludde> hi Marvin--
11:25:59 <shapr> hi marvin--
11:26:06 * shapr joins the chorus
11:27:50 <Marvin--> evening
11:28:16 <andersca> Marvin--: how informal should the description of the type system be?
11:28:39 <andersca> like "the operators ... take two boolean expressions and return a boolean expression"
11:29:12 <Marvin--> andersca: afaik you don't need to write an informal description if you have a formal one...
11:29:16 <andersca> oh
11:29:29 <andersca> it should include both a formal description and a description of the type system?
11:29:47 <Marvin--> "You should begin by making a description of the type system. It doesn't have to be a formal description but it has to be complete."
11:30:10 <andersca> so that's just a suggestion?
11:30:24 <Marvin--> nod
11:30:30 <andersca> ok
12:09:04 * shapr repeatedly reads http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm
12:09:25 <Marvin--> shapr: what?
12:09:48 <shapr> I still don't really grasp monads
12:09:51 <Heffalump> ahah, that's exactly the way I would explain them
12:09:56 <Marvin--> shapr: ah
12:10:02 <shapr> trying to drill them into my head
12:10:02 <Marvin--> Heffalump: yeah, that tutorial is *good*
12:10:13 <Marvin--> if you don't understand it you're probably too daft *ducks* ;)
12:10:14 <shapr> ok, silly question...
12:10:30 <shapr> why are all the args passed along?
12:10:42 <shapr> f1 w a = let (b, x) = g1 w a -- (State, a) do these just drop the passed around stuff?
12:10:42 <shapr>              (c, y) = h1 w x b -- (State, a) if below true, why's monad result second arg? it isn't
12:10:42 <shapr>              (d, z) = i1 w x y c -- (State, a) think is just a multi-param type "(Gen (Gen (Gen c)))"
12:10:42 <shapr>              in (d, z) -- is actually i1 :: a -> a -> a -> State -> (State, a)
12:11:10 <Marvin--> uh, that's the example when NOT using monads...
12:11:26 <shapr> yes, but
12:11:26 <Heffalump> it's explaining why monads are a good thing (TM)
12:11:39 <Marvin--> passing around a, b, c and d is meant to emulate global state
12:12:03 <shapr> ok, why the w and x in this call: "i1 w x y c"
12:12:08 <shapr> why do you need to carry them around with you?
12:12:18 <Marvin--> the w x y are just the normal arguments to the function
12:12:25 <Heffalump> because otherwise how do you keep track of the state?
12:12:35 <shapr> you have y and c
12:12:43 <shapr> c is a State, and y is a value
12:12:57 <Marvin--> w and x ain't state here... a..d are state, x, y, z are w are values
12:13:11 <shapr> yah, so why carry them with you?
12:13:20 <shapr> couldn't it equally be "i1 y c" ?
12:13:29 <Marvin--> because the i1 function takes such arguments?
12:13:34 <shapr> is it important to have the values from the earlier calls?
12:13:35 <Marvin--> it's an abstract example...
12:13:36 <shapr> oh, just because?
12:13:37 <shapr> ok
12:13:39 <shapr> that's cool
12:13:43 <Marvin--> g1, h1 and i1 are random functions :)
12:13:54 <shapr> fair enough
12:14:01 <andersca> the maybe monad is a good example of how monads work too
12:14:28 <Marvin--> the important business is that what you *want* are functions like a -> ... -> a, but you have to write them a -> ... -> State -> (State, a) if you want "global state"
12:14:39 <Marvin--> which is what you avoid with monads
12:14:50 <shapr> yes, what I want is functions of type a -> ... -> a
12:14:53 <shapr> that much I understand.
12:15:08 <Marvin--> so the compromise is to make it  Monad m => a -> ... -> m a  :-)
12:15:55 * shapr keeps reading
12:17:34 <Marvin--> shapr: Here's some lecture notes from the course Advanced Functional Programming that I'm taking: http://www.cs.chalmers.se/Cs/Grundutb/Kurser/afp/lec-20020906-1-Fri.html
12:18:30 <shapr> thanks, I'll read that when I get frustrated here :-)
12:29:26 <shapr> so, in this example, f1 :: t1 -> t -> (t2,t3) but, f :: (Monad m) => t -> m a
12:29:44 <shapr> cool, that gets rid of two arguments
12:42:40 <Marvin--> oof, what a run function I get
12:43:03 <Marvin--> runIdentity (runStateT (runStateT (runStateT (runStateT p []) []) []) [])
12:43:39 <ludde> heh
12:44:00 <Marvin--> that's what I get for using four monad transformers
12:44:23 <ludde> the AFP lab?
12:44:37 <Marvin--> no, the semantics course
12:44:41 <ludde> oh
12:45:03 <Marvin--> type TypeInfo = StateT (Mapping ClassName ClassRhs) (StateT (Mapping FieldName BaseType) (StateT (Mapping MethodName MethodType) (StateT ([Mapping LabelName (StackType, StackType)]) Identity)))
12:45:28 <ludde> urk :)
12:45:48 <Marvin--> lots of typing information
12:46:44 <ludde> yeah, but doesn't the code become quite unreadable when you use all this?
12:47:18 <ludde> lots of junk which is only there to lift between the different monad transformers?
12:47:27 <Marvin--> tsk, we have wrapper functions for the lifting of course
12:47:44 <Marvin--> getMethodType mname = do mapping <- lift $ lift get; lookupM mname mapping
12:50:05 <ludde> ok, anyway, another thing. if you use tail recursion at the end of a do clause, will the compiler be able to optimize that into constant stack space, or does it depend on how bind is implemented?
12:51:00 <Marvin--> I have no idea
12:51:31 <ludde> I use a recursive do clause in my AFP lab2 main server loop
12:51:42 <ludde> but it's not really a good idea if that eats stack space
12:52:43 <Marvin--> well how the heck would you do it otherwise? :)
12:52:47 <Marvin--> that's what our code looks like too
12:52:51 <ludde> no idea :)
12:53:06 <Marvin--> We just assume that it works and blames the compiler implementors if it doesn't :)
12:53:25 <ludde> okay, that's probably an OK thing to do then.
12:53:38 * andersca ponders doing type inference for lab4
12:53:43 <andersca> but then again, maybe not
12:54:18 <Marvin--> andersca: it's fun :)
12:54:33 <andersca> Marvin--: I need to come up with something like classes in haskell then 
12:55:05 <Marvin--> andersca: not necessarily, you can have type inference with a basic type system... Believe me, it's complicated enough
12:55:31 <andersca> Marvin--: it'd be good if I didn't have the equality operator
12:55:46 <andersca> since then I only have operators that only work with one type
12:56:04 <andersca> so if you wrote a function   foo x y = x == y
12:56:18 <andersca> it'd take general arguments
12:57:03 <Marvin--> andersca: nod nod... Since we wrote a functional language in lab4 I think we just stole Haskell's class mechanism (but only had pre-defined ones... Eq and Ord I think)
12:59:06 <andersca> nod
12:59:24 <andersca> did you have more types than booleans and integers?
13:00:46 <Marvin--> I think we had strings too
13:00:55 <andersca> ok
13:01:07 <andersca> since we don't do ordering for booleans I'd really only need the Eq class
13:01:10 * andersca ponders
17:59:22 <Pseudonym> Grrrr.  vi.recover didn't.
