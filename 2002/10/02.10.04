02:21:01 <ludde> hi Marvin--
02:21:45 <Marvin--> morning
02:22:11 <Marvin--> Have you managed to implement Thread.client while guaranteeing that socketToHandle is only called once?
02:22:34 <Marvin--> I'm quite at a loss
02:23:09 <ludde> i changed the interface :/
02:24:31 <ludde> basically I replaced Socket by (Socket,Handle) in the thread interface.
02:25:00 <ludde> it doesn't state that Socket has to be the Network.Socket , does it? :)
02:25:33 <Marvin--> ludde: duh
02:25:39 <Marvin--> ludde: That's what I did too :/
02:26:08 <Marvin--> and I really don't think that wait :: [IOHandle] -> Thread [IOHandle] makes sense
02:26:15 <Marvin--> mine is wait :: IOHandle -> Thread ()
02:26:54 <ludde> that works equally well for this lab yeah, but it's a little less generic.
02:27:03 <ludde> since each thread can only wait on one object at a time
02:28:47 <Marvin--> well, sure wait :: [IOHandle] -> Thread () is better
02:29:01 <Marvin--> hmm, right, the return value would be which are available
02:29:02 <ludde> but in that case you don't know which one of the handles that "got an event"
02:29:22 <ludde> one=ones
02:31:30 <ludde> but anyway, did you do exercise 4.2 ? (the +++ implementation). I don't know what I'm supposed to do, he says I should make both a shallow and a deep embedding, but how are those related to that particular problem?
02:31:57 <ludde> am I supposed to make some additional "layer" on top of Chunk, that adds +++ to the original Chunk ?
02:31:59 <Marvin--> I can't get to www.cs right now :/
02:35:34 <ludde> try http://194.236.61.3/stuff/ee.html
02:38:46 <Marvin--> hmm, good question
02:43:02 <Marvin--> damn, I think my datatype is too unflexible to handle this implementation of wait
02:44:27 <ludde> you're making a deep or shallow implementation of Thread ?
02:45:17 <ludde> or deep with continuation :)
02:45:32 <Marvin--> deep with continuation
02:45:39 <Marvin--> pretty much what's in Koen's paper
02:45:43 <ludde> yeah :)
02:45:44 <pesco> From wool, hemp, or what?
02:46:00 * Marvin-- smacks pesco
02:46:05 * pesco falls over.
02:46:08 <ludde> his scheduler is O(n), i wonder if i would gain some performance by rewriting it to O(1)
02:46:42 <ludde> maybe it's not really a problem unless you have a huge amount of threads
02:46:48 * pesco shakes his head.
02:46:48 <Marvin--> We use a queue instead of lists
02:46:59 <pesco> Marvin--: Which paper is that? I should read a paper on threads, I feel.
02:47:09 <ludde> you mean a queue implemented as two lists ?
02:47:23 <Marvin--> pesco: this isn't about "real" threading, it's a way of emulating concurrency with a monad transformer
02:47:36 <pesco> Sounds cool still.
02:47:37 <Marvin--> pesco: google for concurrency and Koen Claessen and you would probably find it
02:47:49 <pesco> Alright, ta.
02:48:10 <Marvin--> ludde: yeah, easiest way, so it's amortized O(1)
02:48:39 <Marvin--> I suppose one could do some trickery with arrays and stuff, but that's really not worth it
02:49:11 <ludde> did you implement the queue yourself or is there some module?
02:53:04 <Marvin--> we pretty much wrote down what we remembered from his quickcheck lecture ;)
02:53:13 <ludde> aha :)
02:54:40 <Marvin--> laziness == good :)
03:03:15 <Marvin--> ugh, this isn't getting pretty
03:04:25 <Marvin--> it's a bit of a jigsaw putting things back together after a hSelect call
03:15:29 <Marvin--> wtf
03:15:59 <Marvin--> this I don't understand
03:16:20 <Marvin--> I give my function a type signature, ghci complains about it... I remove the type signature and the type signature that ghci infers is the *same* as what I wrot!
03:16:23 <Marvin--> wrote even
03:38:52 <liiwi> hrmpf. no shapr
03:48:48 <pesco> Marvin: I'm reading Koen's paper right now. I have a question though: Why is it data Action m = Atom (m (Action m)) | ... instead of simply Atom m?
03:52:42 <pesco> Hm, nevermind for the moment....
04:24:29 * cleverdra emails a bug-report at GHC's request.
05:31:36 --- mode: card.freenode.net set +o ChanServ
05:33:10 --- mode: card.freenode.net set +o ChanServ
05:38:11 --- mode: card.freenode.net set +o ChanServ
07:35:58 <apm02> can someone tell me how to get e in haskell ?
07:36:09 <apm02> i couldn't find it in Prelude.hs
07:36:31 <Igloo> exp 1
07:37:03 <apm02> aaah, i should have seen that
07:37:09 <apm02> thanks dood
07:38:51 <Chilli> Moin
07:39:58 <Igloo> Hi - how's it going?
07:40:46 <Chilli> Good
07:40:58 <Chilli> Sitting in the first ICFP session just now :-)
07:41:03 <Chilli> we have wireless here 
07:41:24 <Igloo> Nice  :-)
07:41:41 <Chilli> yeah :-)
07:42:04 <Chilli> but the first invited talk wasn't really convincing
07:43:00 <Igloo> What was it on?
07:54:37 <Chilli> the title was Towards More Natural Functional Programming
07:55:12 <Chilli> but it was mostly a random collection of observations how people without previous programming experience express programming-like problems in natural language
07:55:42 <Chilli> plus not necessarily very justified consequences drawn from these observations
07:56:03 <Chilli> plus a demo of a system that allows children to program simple games
07:56:11 <Igloo> Are they working towards a StarTrek-esque interface?
07:56:46 <Chilli> yeah, expect that it won't scale
07:57:07 <cleverdra> Towards More Natural Communication Systems or What Babies Think Of 'Natural' Language
07:57:20 <Chilli> and I think stuff like Mindstorm isn't very far from what they did anyway
07:57:29 <Igloo> Heh
07:57:30 <Chilli> cleverdra: :-)
07:58:22 <Chilli> Heffalump: Are you listening in?
07:59:05 <Chilli> hmm, now he ran away
07:59:22 <Chilli> (he just sat behind me with his laptop...)
07:59:39 <o3> hello chilli!
07:59:51 <o3> first talk and you're bored already? :)
08:00:49 <Chilli> Hi o3!
08:00:50 <Chilli> :-)
08:01:04 <Chilli> well, I have been warned that it might be fishy
08:01:14 <Chilli> so, no big suprise
08:02:16 <o3> i see.  i guess you're having fun over there?  it's raining here right now :(
08:02:47 <Chilli> o3: it's quite warm here
08:03:02 <Chilli> but nsw really needed some rain...
08:03:06 <o3> not particularly warm here, but that might be because it's 1am :)
08:06:55 <Chilli> but the really (= not the invited, but reviewed talks) are cool
08:07:30 <o3> excellent
08:07:54 <o3> when are you coming back, btw?
08:08:28 <Chilli> flying off Tuesday (EDT), arriving Thursday morning (EST)
08:09:11 <o3> lucky you :)  wish i could join you guys over there!
08:10:40 <Chilli> next icfp is apparently in Sweden
08:10:50 <andersca> yay
08:10:56 <Chilli> (implying that the next Haskell Workshop will be there, too)
08:11:28 <o3> ooo
08:12:04 <andersca> ooo as in o3? :)
08:12:07 <o3> lots of beautiful women in sweden.  will double efforts to submit a paper for that!
08:12:18 <Igloo> lol
08:12:20 <o3> andersca: that too
08:30:52 <Igloo> Does anyone know anything about Modular Haskell Metric System?
08:39:44 <ludde> what is the definition of a shallow embedding?
08:40:09 * hdaume has no idea
08:42:18 <Heffalump> chilli: I wasn't reading :-)
08:42:43 <Chilli> ic :-)
08:42:46 * Heffalump was partly listening and partly coding
08:42:53 <Heffalump> I can't do all three at once
08:42:58 <Chilli> I was just wondering whether you are in #haskell ATM
08:43:06 <Chilli> fair enough
08:43:10 <Igloo> Naw, he's not
08:46:54 * Heffalump reads Chilli's opinion of the first talk and agrees
08:47:23 <Chilli> :-)
08:47:47 <ludde> hi Marvin--
08:47:47 <Heffalump> though making people think about such things is probably worthwhile
08:49:22 <Heffalump> I think the current talk (about monads for incremental computation) would have been better if he'd started off with some example Haskell code
08:49:35 <Heffalump> since that's what he achieves in the end
08:50:51 <Chilli> hmmm, yeah, might have been a better motivation
08:51:14 <Chilli> re the invited: it's good to get people thinking, but the way he did it might be counterproductive
08:51:54 <Chilli> as it is easy to find arguments against some of his statements, which leads one easily to disregarding the whole thing
08:52:06 <Chilli> here comes the example :-)
08:52:09 <Chilli> (it seems0
08:52:12 <Heffalump> true - the stuff about syntax, naming and error messages was worthwhile though
08:52:13 <Chilli> 0 = )
08:52:17 <Heffalump> well, we had a short one already :-)
08:52:44 <Chilli> not sure about the syntax stuff
08:52:49 <Heffalump> it was that I wanted to see at the beginning
08:53:06 <Chilli> observations about natural languages usually don't carry over to formal ones
08:53:19 <Chilli> (eg, the ramblings about "and")
08:53:48 <Heffalump> (S?)ML uses "andalso", which I think is nice
08:54:00 <Heffalump> makes short-circuiting explicit
08:54:25 <Chilli> I think Ada uses it, too
08:54:33 <Chilli> point is, a formal language is well defined
08:54:44 <Chilli> there is no ambiguity like in a natural language
08:54:57 <Chilli> if you don't know the def, you are stuffed anyway
08:55:47 <Marvin--> hello
08:57:00 <Heffalump> but the def could be closer to what people expect from natural language
08:57:10 <Heffalump> that means people have less to learn to get started
08:57:38 <Chilli> I am unconvinced for two reasons:
08:57:51 <Chilli> * these things are a very small part of what you need to learn
08:58:12 <hdaume> (would someone mind saying what the main point of the talk was?  :))
08:58:15 <Chilli> * due to lexical and syntactic constraints, you often enough need to make compromises
08:58:19 <Heffalump> remember he wasn't talking about professional programmers (though he only really said this at the end)
08:58:30 <Chilli> hdaume: there was none (which was one problem of the talk)
08:58:31 <Marvin--> you guys talking about ICFP?
08:58:32 <Heffalump> hdaume: that we should make programming languages easier to learn, basically
08:58:54 * hdaume doesn't think they're hard to learn at all
08:59:05 <Heffalump> http://www-2.cs.cmu.edu/~NatProg/ICFP02/index.html
08:59:07 * hdaume supposes that it probably has more to do with the type of person...
08:59:19 * Marvin-- wants to go to cool conferences too and stuff
08:59:22 <Heffalump> yes, so you want to make it easier for the "wrong" type of person
08:59:53 <Heffalump> the current talk is about an incremental computation library in Haskell
09:00:04 <Heffalump> unfortunately it only works for strict computations :(
09:00:55 <hdaume> curse him for not having a pdf versino of the ppt slides
09:01:59 <Chilli> hdaume: yes, and this guy was talking about usability...
09:02:04 <Heffalump> doesn't ppt2pdf exist somewhere?
09:02:12 <Heffalump> lol
09:02:17 <hdaume> haha
09:03:31 <hdaume> so this HANDS thing is basically glorified hypercard...
09:03:39 <Heffalump> ah, ppthtml exists, /me apt-gets
09:18:58 * Chilli suspends his machine looking forward to lunch...
09:20:35 <Heffalump> :-)
09:20:44 <o3> night!
09:21:07 <Heffalump> good plan
09:21:27 <o3> that was clever, i just spent half an hour chasing down a problem because i assumed that the function didn't return a value
09:21:30 * Marvin-- sighs and goes back to correcting assignments
09:48:32 <Marvin--> heh, this group actually went and looked up how to use foldM just to taunt me
09:52:24 <hdaume> :)
09:54:44 <Marvin--> checkP (Program n d s) = do { env <- foldM checkD [("in",DInt),("out",DInt),("eof",DBool)] d; mapM_ (checkS env) s }
10:01:13 <ludde> you've told them to use foldM previously?
10:01:48 <Marvin--> no, I just hinted at it at a class :)
10:02:43 <ludde> ah
10:03:23 <ludde> i went to the class in lv 1, and I didn't really think it was useful.
10:03:37 <ludde> wednesday 15-17
10:04:59 <ludde> all we were supposed to do was to write down answers to some simple general haskell questions, and then the supervisor picked people randomly that were supposed to write it down on the board
10:07:00 <Marvin--> well, that was the "let's rehearse some haskell since you've been coding too much Java lately" lesson
10:07:17 <Marvin--> and it wasn't meant for haskell gurus!
10:07:44 <ludde> maybe i should have attended the other lessons then
10:08:11 <andersca> I've found all the lessons to be very good
10:08:37 <ludde> andersca: what time did you go there?
10:08:39 <Marvin--> the exercise lessons are meant to complement the lectures
10:08:56 <andersca> 13-15
10:09:10 <Marvin--> ludde: he went to my lessons rather than Christoffer's, but I haven't heard any negative comments on his lessons either
10:09:34 <ludde> i can't really tell, since i've only visited once
10:09:45 <ludde> tell if they are bad or good
10:09:49 <andersca> his lectures are really nice though
10:10:18 <Marvin--> Marcin's lectures?
10:10:27 <andersca> yeah
10:10:34 <ludde> eh? you think they're nice?
10:10:48 <ludde> marcin should learn to stand still and not walk around
10:11:01 <andersca> I think they're nice, yes
10:11:56 <ludde> and his lectures are nothing else than reading right from the paper
10:12:14 <ludde> it's not often you hear something that isn't printed on the overheads
10:12:39 <andersca> ...and why is that bad?
10:13:09 <ludde> well, it would have been more interesting if he could say some spontaneous stuff every now and then
10:13:25 <ludde> i can read the overheads myself
10:13:30 <ludde> i don't need him to read them for me
10:15:22 <Marvin--> It would've been more useful if people asked questions
10:15:53 <Marvin--> instead of half a gazillion people asking Christoffer and me the questions and us having to return labs because people don't pay attention
10:16:53 <andersca> Marvin--: yeah
10:17:55 * Marvin-- is reading Andy Gill's paper on "Debugging Haskell by Observing Intermediate Data Structures" cool stuff!
10:21:37 <ludde> when a pattern match with a monad <- fails, is there some way to modify the parameter it gives to fail?
10:23:45 <Marvin--> afaik no
10:24:44 <ludde> http://www-bcs.mit.edu/people/adelson/demo_images/checkershadow-AB.jpg
10:24:45 <hdaume> you could embed the match in a catch block and modify it ther,e but that's a hassle
10:26:00 <Marvin--> ludde: hmm :)
10:26:26 <ludde> it's hard to believe, but it really is true :)
10:26:59 <Marvin--> "We automatically insert side-effecting functions in place of the labelled arrows in the diagram, which both return the correct result on the evaluation to weak head normal form, and also inform a (potentially offline) agent that the reduction has taken place." <- ouch
10:27:44 <ludde> heh, i thought it was someone's lab at first.
10:27:59 <cleverdra> matches (x:xs) = [x,xs]
10:28:09 <cleverdra> matches _ = []
10:28:20 <Marvin--> ludde: no :)
10:28:40 <cleverdra> test = do x <- someIO; y <- matches x
10:29:02 <ludde> hmm?
10:29:28 <Marvin--> cleverdra: eh, and what would the type of [x,xs] be?
10:29:36 <ludde> matches doesn't return a monad.
10:29:42 <ludde> or, it does probably, since a list is one
10:29:55 <ludde> but it doesn't return the right one
10:30:10 <cleverdra> er, indeed. x:xs
10:31:32 <cleverdra> yeah, and that.
10:54:01 <ludde> Marvin--: Do you correct labs as a FIFO queue?
10:55:48 <Marvin--> ludde: except for extremely hard-corrected labs
10:55:56 <ludde> heh, ok
10:57:13 <Marvin--> or when I get well-motivated requests for correcting someone's lab earlier
10:57:56 <ludde> my lab account is progs-2, i just handed in lab2 :)
10:58:08 <ludde> if you like, you could correct it earlier
10:58:56 <ludde> was that well motivated? :P
10:58:57 <Marvin--> See, "if you like" is not a well-motivated request ;)
10:59:01 <ludde> ah, ok
11:00:14 <Igloo> Now, sending chocolate...  :-)
11:02:52 * Marvin-- grumbles about giving 100% returns so far
11:03:21 <Igloo> What's a return?
11:03:41 <dennisb> they get to correct their misstakes and turn it in again
11:04:27 <Igloo> So ultimately everyone passes?
11:04:42 <dennisb> more or less, yes
11:04:45 <Marvin--> Igloo: in practice, yes, you've got three chances
11:04:53 <Heffalump> sounds like practicals in Oxford :-)
11:05:04 <dennisb> but there is an exam in the end
11:05:15 <Marvin--> hullo dennis
11:05:32 <andersca> hey dennisb
11:05:40 <Marvin--> This group can't have tested their code before handing it in... Their first example of "correct program" fails to pass their type checking
11:06:15 <dennisb> Marvin--: it's strange isn't it
11:06:20 <ludde> hehe, maybe it was by mistake tagged as a correct program?
11:06:51 <Marvin--> no, their type checker doesn't implement the type system they've constructed
11:07:00 <Marvin--> the programs are correct with respect to the type system
11:08:50 <Marvin--> why can't they put their example programs in separate files so I can load them with readFile? *whine*
11:09:58 <Igloo> Does the task description tell them to?
11:10:25 <Marvin--> No, probably not, but you'd think they would want to test them themselves
11:10:30 <ludde> Marvin--: because it says:
11:10:33 <ludde> In your report you should include a description of your type system, the implementation and examples of some (abstract) programs that are type correct and some that are not. 
11:10:55 * Marvin-- attacks the next lab in the queue and realizes he'll keep going at 100% returns for a while
11:11:07 <ludde> Marvin--: maybe progs-2 will make you happy?
11:11:28 <ludde> Marvin--: now, was that a good reason? ;)
11:11:31 <Marvin--> ludde: no
11:11:35 <ludde> haha, ok
11:12:36 <ludde> are you paid per hour or as a fixed sum?
11:13:28 <Marvin--> per hour, but the pay for correcting N labs is fixed
11:13:35 <Marvin--> I think they calculate on 3 labs an hour or something like that
11:13:49 <ludde> correcting N labs, or N submissions?
11:14:15 <dennisb> N labs, pass them directly and make more money per hour
11:14:27 <Marvin--> I think my morals is too high for that
11:14:33 <dennisb> mine too
11:14:52 <ludde> then they'd probably ban you from being lab corrector in the future
11:15:01 <Marvin--> and I think it lowers my chance of getting another teaching job ;)
11:20:16 <dennisb> I gave a lecture this week instead of John (that is at icfp), it was a funny lecture where we talked about binary search by ripping a telephone cataloge in pieces
11:20:28 <andersca> yeah
11:20:37 <andersca> I remember when john did that
11:20:40 <Marvin--> heh
11:20:43 <ludde> hehe, i remember that too :)
11:21:45 <Marvin--> bleh, correcting and giving 100% returns made me depressed
11:21:52 <andersca> suck :/
11:28:28 <Marvin--> argh, I'll have to return this one too
12:21:04 <andersca> ugh
12:21:10 <andersca> C# is weird
12:21:16 <ludde> in what way?
12:21:26 <andersca> some of the syntax is just odd
12:21:40 <Heffalump> how?
12:21:54 <andersca> 	foreach (MemberInfo mi in t.GetMethods ()) {
12:22:02 * Heffalump thinks it's quite nice (and not cos M$ paid for my research :-)
12:25:26 <ludde> it's nicer than having to write out ugly iterator code, i think.
12:27:40 <Heffalump> yes
12:28:43 <ludde> the @ string specifier is pretty nice to
12:28:46 <ludde> o
12:29:31 <ludde> but i really think imperative languages should have more powerful ways of generating source code dynamically at compile time.
12:29:45 <andersca> python...
12:29:57 <ludde> python has that?
12:31:04 <ayrnieu> has what?  What does 'more powerful' mean?
12:32:20 <ludde> it would have been nice if you could combine haskell's embedded language possibilities, for example parser combinators, with compile-time code generation, so when compiling, the compiler would run the haskell code and generate an efficient C parser out of it.
12:34:43 <andersca> >>> import compiler
12:34:43 <andersca> >>> b = compiler.parse ("print 1+2")
12:34:43 <andersca> >>> b
12:34:43 <andersca> Module(None, Stmt([Printnl([Add((Const(1), Const(2)))], None)]))
12:38:20 <ludde> yeah, but that's not quite the same thing..
13:05:38 <Chilli> re
13:07:00 <Heffalump> 'lo
13:07:11 <Chilli> :-)
13:20:13 <ludde> Marvin--: which group are you correcting currently?
15:22:11 <Marvin--> ludde: currently I've been drinkink lots of beer so I'm not correcting at all ;)
15:22:55 <ludde> ahha, that's probably good
