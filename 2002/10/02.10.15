00:11:11 <Jii> hum?
00:15:15 <Pseudonym> I forgot to specify -fallow-overlapping-instances. :-)
00:44:02 <Jii> i am still missing some crucial information here, but never mind ;-)
01:09:33 <ludde> hi
02:23:23 <ludde> is there some way to return some value indicating the complexity of an evaluated function in haskell?
04:32:09 <J35u5Fr34k> my friend is getting an error for undefined reference ....
04:33:46 * shapr bounces
04:36:01 <shapr> hi tez
04:37:11 <shapr> crap, I can't get to unsw.edu.au from .fi
04:37:39 <Jii> ville itälä has been cutting cables, then? ;-)
04:38:12 <shapr> hi Jii!
04:38:19 * shapr tries from a shell in texas
04:38:23 <shapr> aha
04:38:51 <shapr> I can get there from texas.
04:40:31 <Jii> hi there shae
04:40:43 <shapr> how's life in the sunny south?
04:41:12 <Jii> it's damn cold and gray and in general very depressing weather :)
04:41:35 <Jii> otherwise, everything's fine ;)
04:41:47 <Jii> how's your life
04:41:53 <shapr> doing well
04:41:59 <shapr> we're in the pre-move panic stage
04:42:22 * shapr downloads the SCL version of parr
04:43:03 <Jii> you're moving where?
04:43:10 <shapr> to Boden
04:43:15 <shapr> just outside of Lulea
04:43:18 <Jii> oh
04:43:23 <Jii> traitors!
04:43:24 <Jii> ;-)
04:43:37 <shapr> well you can still come visit us
04:43:43 <Jii> sure :)
04:44:09 <Jii> what's in lulea, or, what are going to do there?
04:44:44 <shapr> I'm going to continue doing contract work
04:45:00 <shapr> the other half of webwitches (Bea's company) lives there
04:45:31 <Jii> oh
04:50:31 <shapr> Jii: how's your writing going?
04:53:21 <Jii> just now, poorly, because i've few other things on my mind, but, in general, it's getting better ;-)
05:35:16 * shapr bounces
05:35:25 <shapr> hi ski
05:37:46 <ski> hi shapr
05:37:56 <shapr> feeling Funky?
05:38:16 <ski> Funky ?   Functional ? :)
05:38:22 <shapr> yes ;)
05:38:32 <shapr> in german it's funktion
05:38:36 <ski> yes, i think/guess so
05:38:56 <shapr> ski: do you know anything about arrows?
05:39:02 <ski> yes
05:39:20 <shapr> I think I understand them, but I haven't been able to apply them in ways other than what I've read about.
05:39:39 <shapr> for example, I couldn't figure out how to apply them to network protocols...
05:39:54 <shapr> do network protocols have static information?
05:39:57 <ski> we had some lectures here about FRP and AFPR ((Arrow) Functional Reactive Programming), which showed how to control robots
05:40:00 <shapr> or are they just fine as monads?
05:40:14 <shapr> I haven't been able to compile the HGL lib for Yampa
05:40:16 <ski> i'm not sure
05:40:34 <ski> i'm not familiar with that lib
05:40:47 <shapr> AFPR was renamed to Yampa
05:41:00 <ski> aha
05:41:08 <shapr> they use the SOEGraphics lib, aka Hugs Graphics Lib I think..
05:41:18 <shapr> this one: http://haskell.org/graphics/
05:41:24 <shapr> but Yampa has a hacked version to run with GHC
05:42:03 <shapr> I get these errors:
05:42:04 <shapr> Graphics_StdDIS.hs:39:
05:42:04 <shapr>     Module `Foreign' does not export `ForeignObj'
05:42:04 <shapr> Graphics_StdDIS.hs:39:
05:42:04 <shapr>     Module `Foreign' does not export `makeStablePtr'
05:42:04 <shapr> Graphics_StdDIS.hs:39:
05:42:05 <ski> the link to afpr i've seen was http://www.haskell.org/afrp
05:42:06 <shapr>     Module `Foreign' does not export `makeForeignObj'
05:42:08 <shapr> mean anything to you?
05:43:07 * shapr tries to subscribe to yampa-users
05:44:12 <ski> the hugs version at school (Febr2001) does export ForeignObj,makeStablePtr,makeForeignObj
05:44:14 <shapr> I thought AFPR was renamed to Yampa... maybe I'm wrong.
05:44:17 <shapr> oh
05:44:28 <shapr> hmm
05:44:57 <ski> i'll try to see if ghci exports it or not ..
05:46:45 <ski> i can't seem to load Foreign into ghci. but then i've never really understood/mastered ghc packages. probably Foreign is in another package
05:46:53 <shapr> hm
05:46:58 <shapr> well, thanks for looking at it :-)
05:47:11 <ski> (ghci version 5.02.2 btw)
05:47:17 <shapr> I'm using 5.04.1
05:48:10 <BlizzNL> does anyone know how to enable kind information in hugs?
05:48:26 * shapr thinks of :be nice
05:48:35 <shapr> or :be kind
05:48:49 <BlizzNL> shapr: ok thnx i'll look into it
05:48:54 <ski> the Foreign module is in the exts sub-dir of hugs/lib, so methinks it should be available in ghc also
05:49:20 <shapr> BlizzNL: I was joking =)
05:49:30 <BlizzNL> Yeah I know ;)
05:49:32 <shapr> whew
05:49:34 * shapr grins
05:49:41 <ski> BlizzNL : you mean kind information in error messages ?
05:50:16 <BlizzNL> ski: No I mean types of types (kinds) Int has kind *, (->) has kind *->*->* etc
05:51:59 <ski> but when do you want this setting to have any difference ? AFAIK it's already used internally. so when do you want to use this ?   when doing :t or :i ?  or do you want to be able to annotate your types with kind information in your program ?
05:52:09 <andersca> BlizzNL: reading typing haskell in haskell? :)
05:52:53 <BlizzNL> andersca: now I am working with Generic Haskell
05:53:33 <Heffalump> There's been some examples on the ML where being able to provide kind annotations would help.
05:53:35 <shapr> neat
05:54:20 <BlizzNL> andersca: But the paper by Jones you metioned is on my 'to read' list ;)
05:54:37 <ski> John Hughes also encountered some examples in haskell
05:59:50 * shapr bangs head on HGL
06:01:22 <shapr> the mailing list won't send me email either... hmm.
06:06:09 * shapr gives it up for awhile
06:17:49 <shapr> hey ayrnieu
06:17:51 <shapr> wassup?
06:18:25 <shapr> wow, good quote...
06:19:43 <cleverdra> shapr - oh, my mother is pleased with that COM program (which I ended up writing in Python).  I'm working on Haskell and (maybe) Erlang versions as well, as an exercise.  How are you?
06:20:26 <cleverdra> also, I discovered a bug in haskell-mode.el; it doesn't like '[' (it *does* like '\[', but *haskell* doesn't like that!)
06:21:03 <shapr> I'm meditating on arrows and monads, and trying to find a good Haskell base for a threading, sockets, and guis
06:21:11 <Erwin> Your mother asked you to write COM program? Who are you, Dilbert?
06:21:30 <andersca> haha
06:21:37 <shapr> can you give an example of the haskell-mode problem?
06:21:47 --- topic: set to 'ICFP 2002 Robot Analysis and Visualization Toolkit 0.9 http://tea.moertel.com/~thor/ravt/ || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || ICFP is over <Erwin> Your mother asked you to write COM program? Who are you, Dilbert?' by andersca
06:21:51 <cleverdra> Erwin - no, but my original program had a simple text interface and she couldn't remember how to use it.
06:22:07 <Igloo> Yay! I have a Haskell program that can decrypt (certain) openpgp symmetrically encrypted files
06:22:12 <shapr> wow, impressive
06:22:30 <shapr> did you use the asn.1 code from Dominic?
06:22:46 <Igloo> No - what's ASN.1 got to do with it?
06:23:08 <shapr> um, I thought openpgp used PKCS#11 keystore?
06:23:18 * Igloo finds AsN mentioned in the RFC
06:23:32 <Igloo> Looks like it might just be RSA that uses it
06:23:50 <shapr> how are openpgp files saved?
06:24:00 <Igloo> How do you mean?
06:24:04 <shapr> what file format?
06:24:15 <Igloo> openpgp defines the file format
06:24:21 <ayrnieu> shapr - foo = do '['; somethingElse -- where ; is replaced by a newline.  Haskell-mode gets confused about indentation.  The confusion doen't seem to last to the next definition, fortunately.
06:24:40 <shapr> hmm
06:24:57 <Igloo> It's essentially <old or new packet><length><packet type><data, format dependent on type>
06:25:15 <shapr> that sounds a bit like asn.1
06:26:01 <Igloo> The only mention of ASN in the RFC starts 'With RSA signatures, the hash value is encoded as described in PKCS-1 section 10.1.2, "Data encoding", producing an ASN.1 value of type DigestInfo'
06:26:09 * shapr shudders
06:26:33 <Igloo> It could all be ASN.1, but it is trivial to parse by hand anyway if so
06:26:40 <ayrnieu> shapr - what do you mean, you're looking for a base?  You're comparing alternative GUI systems for GHC?
06:26:46 * Igloo isn't familiar with ASN.1
06:26:53 <shapr> igloo: it's pure evil
06:27:11 * shapr did ASN.1 parsing in Java for six months
06:27:38 <Igloo> :-)
06:27:40 <shapr> ayrnieu: yah, trying to get threads, sockets, and GUI together in the same program... hopefully something I can compile on win32 as well.
06:28:01 * Igloo hasn't had to deal with OIDs like 1.2.840.113549.2.2, for example
06:28:22 * shapr knows how to look up that OID
06:28:57 <Igloo> Me too - look in RFC 2440  :-)
06:30:27 <shapr> afaik, GHCs threads and sockets work the same on win32 and unices
06:32:00 * shapr installs lam-mpi
06:42:20 <shapr> hi specialx
06:42:29 * shapr installs lam3-dev
06:43:17 <BlizzNL> I think the answer is very simple but I am encountering this problem and I can't figure it out. I have a user defined type like this (data MyType = CA Float | CB Float) now I know how to extract the Float by pattern matching but this time I need to extract it later because I have to match the whole MyType. I also don't want to use a function like this : getFloat :: MyType -> Float .. Anyone?
06:44:08 <Igloo> Huh?
06:45:29 <ski> can't you just use a case if you don't want to patternmatch immediately ?
06:45:38 <ayrnieu> case x of a@CA f -> "I got a CA: " ++ show a; a@CB f -> "I got a CB: " ++ show b
06:46:10 <ayrnieu> where (a::MyType) and (b::MyType)
06:46:30 <ayrnieu> (that's not part of the code)
06:48:03 <BlizzNL> ski I am using case on the MyType but I'll need the Float value in the implementation.. 
06:49:20 <ski> BlizzNL : i'm not sure i see your problem ..  try to explain more what you are trying to do and why it doesn't work (yet) ..
06:50:13 <BlizzNL> Ok..
06:52:54 <BlizzNL> I have a type like this (data Command = CLeft Float | CRight Float | CUp Float | CDown Float | CDontMove) I have a function which takes this Command as one of its arguments and use a case on this to see if it's a up, down, etc When it is a up for example I need the Float value to move my alien the amount of the float value. I need the Float value at this point.. 
06:53:08 <BlizzNL> I hop it's somewhat clearer now
06:53:51 <ski> so can't you use something like
06:54:00 <ski> case command of
06:54:17 <ski>   CLeft f -> code for "left"
06:54:26 <ski> CRight f -> code foe "right"
06:54:30 <ski> and so on ..
06:54:46 <BlizzNL> ofcourse. great thnx 
06:55:16 <ayrnieu> BlizzNL - what were you trying, before, that made this problem?
06:57:21 <BlizzNL> ayrnieu: I did something like case command of CLeft -> etc .. and wanted to extract the Float value from command
06:58:13 <ayrnieu> ah, and got obscure errors? =)
06:58:39 <ski> aha. no you have to pattermatch on both the constructor *and* on all arguments (which could be none, of course).
06:58:50 <BlizzNL> ayrnieu: what do you think ?? ;)
07:32:09 * shapr boings
08:34:51 <hdaume> hi all
08:36:27 <Zteef> need some help... I want to do a html filter for html files generated by MSWord in haskell
08:37:03 <hdaume> yuck
08:37:18 <Zteef> yeah I know
08:37:28 <Zteef> but I'm real stuck
08:37:36 <ayrnieu> stuck on what?
08:37:49 <Zteef> on how to solve the problem
08:38:45 <Zteef> I have tried some methods but they all suck
08:39:06 <Zteef> so I wonder if u smart guys have some idees
08:39:13 <hdaume> what sort of filter?
08:39:39 <ayrnieu> I might have ideas, but I'm not sure what my ideas should be about, yet =)
08:40:00 <Zteef> it should strip off all unnecesary code that word generate
08:40:26 <Zteef> if u have Word try and make a html file and u see what I mean
08:42:50 <ayrnieu> I don't see much in a simple 'hello world' HTML.  Do you want to remove the META tags?
08:44:34 <Zteef> for example yes
08:45:24 <Zteef> almost everything that word puts in the head is crap exept title
08:56:33 * shapr boings
08:57:02 <shapr> zteef: you could use the regex module
08:57:25 <Zteef> never heard of it
08:57:49 <shapr> you know about regular expressions?
08:58:15 <shapr> on the other hand, HaXml might be able to do it, I dunno about that.
08:58:24 <Zteef> no don't think so I'm a newbee to haskell
08:58:54 <shapr> well, regular expressions aren't unique to haskell
08:59:09 <Zteef> okej
08:59:50 <shapr> zteef: have you looked for html processing libs for Haskell?
09:00:29 <Zteef> shapr: it's an assigment in a basic course in haskell so I have to do the work my self...
09:00:38 <shapr> oh
09:00:57 <Zteef> but I don't know how...
09:01:19 <shapr> my top two suggestions would be, use regular expressions (cheesy but easy) or write a parser (spiffy but hard)
09:01:46 <shapr> you know how to write a parser?
09:02:12 <shapr> if you haven't ever written a parser before, regular expressions might be simpler.
09:02:32 <Zteef> thats what I have tried to do so far but it really sucks
09:02:44 <Zteef> the parser that is
09:02:53 <Zteef> how do I use reg exp?
09:04:33 <shapr> there are regular expression tutorials online. regexes are a bit cryptic
09:05:38 <ayrnieu> If you want to learn to use regular expressions in general, you might get perl, which has copious documentation.
09:05:55 <Zteef> so far I have read the html file into the program and then tried to decide what should be thrown away but it's so many cases and I want it to be pretty generic
09:08:50 <shapr> do you know which ones to throw away?
09:08:50 <ayrnieu> zteef - if you're only considering the HTML that word produces, I don't think you have to be very general.  You might either seperate the header from the body and then either A) remove META and like tags, or B) look for tags you want, such as TITLE, and then generate a new header by that.
09:09:12 <ayrnieu> zteef - you don't seem to need to worry about HTML 'comments', for isntance.
09:10:19 <Zteef> do you know if there is any reg exp module for hugs 98
09:16:32 <Zteef> if u are bored I'd be more than glad if u could make a example program for me, that sorts out some tags
09:18:37 <hdaume> what i'd do is just make a function that steps through the string and has a list of tags to remove.  if it encounters '<' followed by one of the tags, it finds the corresponding '>' and then begins again; otherwise, it outputs the '<' and recurses on the next character
09:18:41 <hdaume> seems pretty straightforward
09:20:03 <ayrnieu> IOW, write a state machine and feed it characters one-by-one until it gives you a header.
09:21:19 <ayrnieu> (I think this is also called a 'parser', except that some people have perverted the word to only apply to functions that generate 'parse trees'.)
09:21:38 <Zteef> hdaume thats the strategy I have tried but I dont get it to work, could u describe more in detial
09:21:50 <hdaume> something like:
09:22:49 <hdaume> strip badtags ('<':xs) = case lookupTag xs badtags of { Nothing -> '<' : strip badtags xs ; Just t -> strip badtags (dropWhile (/='>') xs) }
09:22:59 <hdaume> and then a function lookupTag which is something like:
09:23:05 <hdaume> lookupTag s [] = Nothing
09:23:16 <hdaume> lookupTag s (t:ts) | t `isPrefixOf` s = Just t
09:23:21 <hdaume>    | otherwise = lookupTag s ts
09:23:28 <hdaume> (you could do a fold for that, but i'm too lazy)
09:23:49 <hdaume> should work fine.  you'll need to mess around with case issues and stuff, but appropriate insertions of 'map toLower' should fix that
09:24:05 <hdaume> you'll also need to handle '</tag>' cases
09:24:24 <Zteef> cus I'm a newbie I don't understand much of that code...
09:25:03 <hdaume> okay...do you understand what lookupTag is doing?
09:25:06 <Zteef> should I read the whole file into one string
09:25:10 <hdaume> yeah
09:25:27 <Zteef> and then parse it char by char
09:25:38 <hdaume> really...lookuptag could just return 'False' instead of Nothing and 'True' instead of Just t...
09:28:59 <ludde> in what module do i find trace?
09:29:04 <hdaume> IOExts
09:29:31 <ludde> thanks, is there some other good way of debugging haskell programs?
09:29:39 <hdaume> hehe, not really
09:29:41 <hdaume> HAT
09:29:45 <ludde> HA?T
09:29:49 <hdaume> the haskell tracer
09:29:59 <hdaume> somewhat difficult to get used to
09:30:03 <hdaume> i always use trace
09:31:45 <Zteef> hdaume: now I have done a program that reads the html file into one string, and then I parse it char by char but what should I do when I find a <?
09:33:06 <hdaume> check to see if what follows the '<' is one of your "bad tags".  if it isn't, just continue.  if it is, skip to the end of the the tag
09:34:33 <Zteef> but I have my bad tags in a list of string, how can I match this to a bunch of chars?
09:34:48 <hdaume> using the lookuptag function i pasted in :)
09:35:12 <ludde> how can I find a substring of another string?
09:35:14 <hdaume> basically, you loop though each tag and check to see if it is a prefix of the 'bunch of chars'
09:35:31 <ludde> i.e. C's strstr
09:35:31 <hdaume> isPrefixOf x y = True <==> x is a prefix of y
09:35:52 <hdaume> ludde: i don't know what strstr does :)
09:35:55 <ludde> there is no more optimized way?
09:36:09 <ludde> it finds the first occurence of string A inside string B
09:36:33 <ludde> basically i need something like break, but instead it can take a substring instead of a function
09:36:42 <hdaume> ah...no, the simple approach is to just loop through and use isprefixof
09:37:03 <ludde> yeah, seems slow :)
09:37:13 <hdaume> you could implement something smarter if you want :)
09:37:15 <ayrnieu> ludde - the C version can't be much better.
09:37:45 <ludde> ayrnieu: nope
09:38:17 <ludde> but in fact, you can do some optimizations, if you start at the end of the substring you're looking for.
09:38:22 <ludde> i think
09:38:31 <ayrnieu> substr s1 s2 = if isPrefixOf s1 s2 then 0 else 1 + substr (tail s1) (tail s2) -- or some functionally-equivalent version with obvious optimizations.
09:38:57 <hdaume> erm...i don't think that will work :)
09:39:07 <hdaume> you want substr s1 (tail s2) :)
09:39:07 <ayrnieu> why won't it?
09:39:22 <ayrnieu> err, indeed.
09:39:34 <ayrnieu> ludde - please don't say 'nope' when you mean "you're wrong"; I get confused.
09:39:51 <ludde> ayrnieu: i didn't mean you're wrong
09:40:01 <hdaume> that also won't eally handle the case where the string doesn't exist at all
09:40:08 <ludde> ayrnieu: but right after i said nope i realized that you could perhaps do some optimizations
09:40:09 <ayrnieu> See?  I've no idea what you meant! =)
09:40:21 <ayrnieu> hdaume - indeed; another head is needed.
09:41:17 <ayrnieu> Well, if you are comparing English text you might look for infrequent characters in the possibly-substring and then scan by them in the possibly-superstring.
09:41:46 <ludde> if I'm searching for the string PQ in ABCDFE, i can start at B, then I see that B is not in PQ, so i can skip directly to D, etc
09:42:06 <hdaume> you probably want something like: substr s1 s2 = if isPrefixOf s1 s2 then Just 0 else if s2 == [] then Nothing else liftM (+1) (substr s1 (tail s2))
09:42:15 <ayrnieu> Oh, indeed!
09:45:07 <ludde> hdaume: that will give me the count though
09:45:40 <ludde> but i don't really need help with it, i just wanted to know if there was a built-in function
09:49:03 <hdaume> i think it'll give you the position...
09:49:10 <ludde> oh
09:49:24 <ludde> ok
09:49:36 <Zteef> hdaume: is there any funktion like isPrefixOf but that can find it in the middle of a string?
09:49:56 <hdaume> the function we were just discussing will do that :)
09:50:13 <Zteef> oh, okej I'll check
09:55:01 <ludde> how can I rewrite this into using constant stack space:
09:55:20 <ludde> substr :: String -> String -> (String,String)
09:55:20 <ludde> substr small big@(b:bs) | isPrefixOf small big = ("",big)
09:55:20 <ludde>                         | otherwise = let (s',b') = substr small bs
09:55:20 <ludde>                                           in (b:s',b')
09:55:20 <ludde> substr small [] = ("","")
09:56:12 <hdaume> use an accumulator?
09:56:31 <ludde> an additional argument?
09:56:44 <hdaume> yeah, something like
09:56:48 <ludde> but then i'd have to use s ++ [a], or?
09:56:54 <hdaume> substr small [] acc = ("",acc)
09:57:13 <hdaume> substr small big@(b:bs) acc | isPrefixOf small big = ("",big)
09:57:50 <hdaume>   | otherwise = substr small bs (b:acc)
09:58:00 <hdaume> and then stick a "reverse" around the whole thing : )
09:58:12 <hdaume> (won't be very lazy though :()
09:58:17 <Heffalump> make sure your implementation uses fast reverse :-)
09:58:21 <ludde> but reverse doesn't use constant stack space, does it?
09:58:37 <hdaume> no, i guess it uses linear...
09:58:50 <hdaume> eh, i dunno :)
09:58:53 <ludde> and that's what my old substr did too, so I didn't really gain anything :)
09:58:58 <Heffalump> fast reverse is tail recursive
09:59:08 <ludde> Heffalump: is the standard reverse fast?
09:59:11 <Heffalump> no idea
09:59:20 <hdaume> i think so...i think it's just foldl (:) []
09:59:49 <ludde> does foldl (:) [] reverse?
10:00:05 <hdaume> sorry...foldl (flip (:)) []
10:00:06 <hdaume> yeah
10:00:41 <hdaume> foldr (:) [] = id, so it makes sense that foldl (:) [] would reverse
10:01:10 <ludde> foldl uses constant stack space?
10:01:32 <ludde> i can't see how it could
10:01:38 <ludde> or hmm
10:01:40 <Heffalump> it's tail recursive
10:02:52 <ludde> but really, is it, in theory, possible to reverse a singly linked list in both O(1) stack space and O(n) time?
10:03:14 <ibid> Heffalump: even considering laziness?
10:03:16 <ludde> maybe it is?
10:03:22 <Heffalump> ibid: ah, hmm.
10:03:42 <Heffalump> ignoring laziness yes, you just go through reversing the links :-)
10:03:48 <ibid> ludde: sure
10:03:51 <ayrnieu> reverse = reverse' []
10:03:52 <ayrnieu>   where reverse' l [] = l
10:03:52 <ayrnieu>         reverse' l (x:xs) = reverse' x:l xs
10:04:05 <ludde> ayrnieu: ok
10:04:14 <ludde> ibid: okay
10:04:27 <ibid> ludde: at least in strict programming :-)
10:18:25 <ayrnieu> I like writing Haskell on paper for some reason.
10:43:49 <ludde> how can I detect if read failed?
10:43:59 <Igloo> Use readS
10:44:25 <ludde> in what library do I find it?
10:44:44 <Igloo> Oh, reads
10:49:37 <ludde> i don't quite understand how it works
10:50:02 <hdaume> it returns a list of all possible reads together with the corresponding remainder of the string
10:50:17 <ludde> hmm
10:50:26 <hdaume> you can write maybeRead as 'maybeRead s = case reads s of { (a,_):_ -> Just a ; _ -> Nothing }
10:50:55 <ludde> so the list has either 0 or 1 element?
10:51:01 <hdaume> no, it can have more
10:51:09 <ludde> oh
10:51:44 <Igloo> Is it allowed to have more than one?
10:52:05 <Igloo> You probably want to match against [(a, "")]
10:52:08 <hdaume> i would think so...otherwise why use a list...
10:52:39 <Igloo> As a way of representing failure - lists can be more convenient than Maybe sometimes I think
10:53:51 <hdaume> mebbe
10:56:45 <ludde> in an IO (Maybe a) function, what's a simple way of running several Maybe ?? computations and return (fail"") if any of the maybe's fail?
10:57:48 <hdaume> i don't think there is one
10:58:17 <ayrnieu> data Mebbe = Wha a | FoundSomethin a | DontSeeNothin
10:58:31 <hdaume> you could use a fold or something, and then make the list like [liftM (const ()) f1, liftM (const ()) f2, ...] or something to make the typechecker happy
10:59:21 <ludde> hrm?
10:59:21 <ludde> no..
10:59:21 <ludde> i can make an example.
10:59:27 <hdaume> i suppose [f1 >> return (), f2 >> return ()] would be cleaner
10:59:49 <hdaume> nevermind..i'm braindead...don't listen to me
11:12:26 --- mode: card.freenode.net set +oo Heffalump ChanServ
12:00:01 <ludde> How do I fix this (GHC):
12:00:02 <ludde> hw.hs:185:
12:00:03 <ludde>     No instance for (MonadState (StateT BuildState IO)
12:00:03 <ludde>                                 (t1, t2, t3, t4, Maybe a))
12:00:03 <ludde>     arising from use of `set' at hw.hs:185
12:00:03 <ludde>     In a 'do' expression pattern binding: set (a, b, c, 0, Nothing)
14:03:04 <|Fo|Ns> hi
14:03:31 <|Fo|Ns> Its the first time I use ghc (I usually use hugs)
14:03:45 <|Fo|Ns> and when trying to compile a file, I get this error
14:04:08 <|Fo|Ns> fons@SuSiTO:~/practicas/Haskell/FAC_Matemáticas$ ghc Pract10IO.hs 
14:04:09 <|Fo|Ns> Pract10IO.hs:2:
14:04:09 <|Fo|Ns>     failed to load interface for `Menu':
14:04:09 <|Fo|Ns> 	Could not find interface file for `Menu'
14:04:09 <|Fo|Ns> Pract10IO.hs:3:
14:04:10 <|Fo|Ns>     failed to load interface for `Pract10Array':
14:04:12 <|Fo|Ns> 	Could not find interface file for `Pract10Array'
14:04:14 <|Fo|Ns> Pract10IO.hs:5:
14:04:16 <|Fo|Ns>     failed to load interface for `IOExtensions':
14:04:18 <|Fo|Ns> 	Could not find interface file for `IOExtensions'
14:04:59 <|Fo|Ns> Pract10Array.hs  and Menu.hs are in the same directory
14:06:23 <Marvin--> ghc --make Pract10IO.hs
14:07:27 <|Fo|Ns> thanks a lot
14:27:47 <|Fo|Ns> Marvin--: and how can I include other files? -I doesnt work
14:28:18 <Marvin--> |Fo|Ns: You want to import files from other directories? -i
14:28:43 * Marvin-- has fallen in love with Control.Monad.Error
14:33:11 <|Fo|Ns> /usr/share/hugs98/lib/exts/IORef.lhs:25: Type signature given for an expression
14:33:11 <|Fo|Ns> fons@SuSiTO:~/practicas/Haskell/FAC_Matemáticas$ ghc --make Pract10IO.hs -i/usr/share/hugs98/lib/hugs:/usr/share/hugs98/lib/exts
14:33:11 <|Fo|Ns> ghc-5.04: chasing modules from: Pract10IO.hs
14:33:11 <|Fo|Ns> Compiling IORef            ( /usr/share/hugs98/lib/exts/IORef.lhs, /usr/share/hugs98/lib/exts/IORef.o )
14:33:11 <|Fo|Ns> /usr/share/hugs98/lib/exts/IORef.lhs:25: Type signature given for an expression
14:33:15 <|Fo|Ns> sorry
14:33:18 <|Fo|Ns> for the flood
14:33:46 <hdaume> you need to start hugs with -98, i beleieve
14:34:07 <|Fo|Ns> hdaume: Im trying to compile the file
14:34:13 <hdaume> then use -fglasgow-exts
14:34:22 <|Fo|Ns> thanks hdaume
14:35:26 <|Fo|Ns> hdaume: I get the same error
14:36:18 <hdaume> hrm...i don't know...i haven't used hugs in a looooong time
14:39:07 <Marvin--> |Fo|Ns: Err, don't use hugs libs with ghc...
14:39:40 <Marvin--> |Fo|Ns: IORef is in Data.IORef in ghc
14:41:17 <|Fo|Ns> and IOExtensions?
14:41:43 <hdaume> just 'IOExts'
14:44:41 <|Fo|Ns> ghc-5.04: can't find module `IOExts' (while processing "Pract10IO.hs")
14:49:10 <hdaume> use '-package lang'
16:28:47 <vtra238> hello
16:29:02 <vtra238> there seems to be a problem in my code
16:29:30 <vtra238> what does irrefutable pattern mean?
16:29:34 <vtra238> can some1 help plz
16:31:17 <hdaume> it basically means that pattern matching is lazy on the pattern
16:31:30 <hdaume> so 'f ~(x:xs) = ...'
16:31:36 <hdaume> will match any list, whether or not it is empty
16:31:43 <vtra238> ohh
16:31:46 <vtra238> ok
16:31:51 <vtra238> thanks
16:39:09 <ChilliX> one should probably add that if you later access x or xs *and* the matched list was indeed empty, you get a runtime error
16:39:29 <ChilliX> so, use irrefutable patterns only when you are sure that they will match (hence, the name)
16:42:01 <vtra238> ahh ok
16:42:04 <vtra238> thanks
16:46:54 <Pseudonym> G'day.
16:47:17 <tez> Hi
16:51:13 <andersca> hmm
16:51:27 <andersca> is there a function that takes a tuple (a, b) and returns it reversed (b, a)
16:51:50 <hdaume> nope, but you should call yours 'flip'...
16:51:54 <hdaume> :)
16:53:36 <Heffalump> no, swap
16:53:41 <Heffalump> flip f x y = f y x
16:53:48 <Heffalump> which is rather different :-)
16:53:52 <Heffalump> and flip is in the prelude
16:55:24 <Pseudonym> Or you could just spell it (\(a,b) -> (b,a))
16:56:49 <andersca> yeah
16:56:51 <andersca> that's what I did
16:57:19 <Pseudonym> Or even (\~(a,b) -> (b,a)) if that's what you want. :-)
16:57:22 <ChilliX> what you want is: flip (,)
16:57:41 <Pseudonym> ChilliX: That doesn't unpack the tuple.
16:58:25 <ChilliX> ok: uncurry (flip (,))
16:58:43 <Pseudonym> Right, but at that point, the lambda is looking much more clear.
16:59:04 <ChilliX> Depends who is looking :-)
16:59:42 <Pseudonym> IMO, uncurry is one of those legacy combinators.
17:00:05 <Pseudonym> Miranda had them, so adding them to Haskell seemed like a good idea at the time.
17:00:41 <Pseudonym> Kind of like the C++ built-in functional combinators.
17:00:44 <Igloo_> I use them a reasonable amount
17:00:56 <Igloo_> Often with things like folds I think
17:01:31 <ChilliX> curry and uncurry encode an important property; so, I don't think they are superflous
17:02:09 <Pseudonym> What property is that?
17:02:47 <ChilliX> the isomorphy between curried and uncurried functions
17:03:15 <Pseudonym> Well, the isomorphy between curried and uncurried functions of two arguments.
17:03:24 <ChilliX> (I think, in complexity theory, it is called the LMK lemma)
17:03:41 <ChilliX> apply repeatedly for multiple arguments
17:04:04 <ChilliX> (there is an argument for a family of curry and uncurry functions, though)
17:04:11 <Pseudonym> Yes.
17:04:22 <ChilliX> after all in a lazy language (a, (b, c)) =/= (a, b, c)
17:04:45 <Pseudonym> There's an argument for them if you want to attract ML or Clean programmers.
17:05:08 <ChilliX> We surely want that! :-)
17:05:11 <Pseudonym> :-)
17:05:35 <Pseudonym> Is there _anyone_ who speaks only Clean, though? :-)
17:06:02 <Pseudonym> The thing is, uncurried functions are foreign to Haskell.
17:06:19 <Pseudonym> At least at the source level.
17:06:37 <Pseudonym> The STG machine implements curried functions as uncurried functions for you.
17:06:56 <ChilliX> nothing hinders you to write a function
17:07:03 <ChilliX> foo :: (a, b) -> c
17:07:10 <ChilliX> foo (x, y) = e
17:07:14 <Pseudonym> Except that it's not the "Haskell way".
17:07:21 <Pseudonym> It's not impossible, but it is foreign.
17:07:47 <toadx> I used to only speak clean
17:08:14 <toadx> it was more like pigdeon clean though
17:08:15 <Pseudonym> toadx: OK, I stand corrected.  (But then, I used to only speak dirty.)
17:08:49 * Pseudonym notes that the old jokes are still old
17:09:11 <ChilliX> Glad you realise :-P
17:23:06 <andersca> is there any better way to write:
17:23:12 <andersca> getPrimType::String->Type
17:23:13 <andersca> getPrimType s = case lookup s primTypeList of Just t -> t
17:26:41 <Pseudonym> There's fromJust (lookup s primTypeList)
17:26:55 <Pseudonym> The fromJust function is in Data.Maybe
17:27:29 <Pseudonym> I think it should actually be called runMaybe rather than fromJust, because it emphasises the monad aspect.
17:27:52 <Pseudonym> Or perhaps it's probably better to make Control.Monad.Maybe
17:28:04 <Pseudonym> Ugh, that was a badly constructed sentence.
17:32:43 <andersca> Pseudonym: cool, thanks!
