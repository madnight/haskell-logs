07:13:18 <Zteef> what does @ mean in haskell
07:14:08 <cleverdra> in pattern matching, it names an object as well as the object's constituents.
07:14:26 <cleverdra> case x of a@(y:z) -> ...
07:14:40 <cleverdra> a==x, here.
07:15:14 <Zteef> okej, tanks
08:04:34 <shapr> hi guys
08:04:35 <shapr> what's up?
08:04:49 <shapr> excitement? niftiness? fascination?
08:05:04 <shapr> consciousness? ;-)
08:05:31 <cleverdra> More cryptology for me =)  How are you?
08:05:46 <shapr> I'm cheerful, though not very productive.
08:06:14 <cleverdra> Also, I posted a SGR-color-code system to clf.  I should see any responses by tomorrow or so.
08:06:24 <shapr> SGR?
08:06:33 <shapr> is that the Ansi.hs solution?
08:06:35 <cleverdra> So long as you're not unhappy and unproductive =)
08:07:04 <cleverdra> I don't yet know about Ansi.hs, but the question mentioned Ansi.hs if that's what you mean.
08:07:14 <shapr> yah, I just read the question...
08:07:25 <shapr> you posted the code in the reply?
08:07:35 <cleverdra> SGR codes control the terminal, also called ANSI codes (ANSI color codes, for instance) or terminal codes.  'man terminal_codes' on linux.
08:07:38 <shapr> oh, of course..
08:07:38 <cleverdra> Yes.
08:07:43 <shapr> cleverjulian
08:07:48 <shapr> duh, I should have made the connection :-)
08:08:26 <shapr> I wonder if there's a Haskell curses interface
08:08:34 <cleverdra> =)  It used to be 'cleverdragon'
08:08:42 <shapr> why did you change?
08:08:48 <shapr> I always thought ayrnieu was spiffy
08:09:38 <cleverdra> I actually don't remember.  I was away from IRC for a time.
08:10:12 <cleverdra> I keep having this poem trying to create itself, starting with 'Clever Dragon in a dry mountain cave', but that's new =)
08:14:30 <cleverdra> A lightweight terminal-control library would be easy enough; a little state machine to translate \ESC[A to UpArrow and like, a little function to understand the terminal's response to the question 'Where is the cursor right now?'; a little function to determine the size of the terminal through ioctl or hackery.
08:15:07 <cleverdra> A gigantic reentrant flexible readline-like system with at least four input methods.
08:15:55 <cleverdra> (should excess input scroll horizontally?  Vertically?  Should input be fixed at a certain length?  Should input scroll within a region smaller than the screen size?
08:17:52 <cleverdra> The rest of the magic is 'set-scrolling-region' and buffers.  The real optimizations of curses aren't anymore worth the trouble of its interface, IMO.
08:26:47 <hdaume2> hi all
08:27:52 <shapr> hi hal
08:28:42 <hdaume> much better :)
08:30:07 <shapr> I've heard of LL(1) and LALR(1) parsers, but what's a GLR parser?
08:30:59 <cleverdra> http://db.cwi.nl/rapporten/abstract.php?abstractnr=1154
08:31:42 <hdaume> it parses any cfg
08:31:48 <shapr> wow, neato
08:34:33 <shapr> I'd like to have the ability to write a Haskell parser for any binary or text format ...
08:34:46 <shapr> there are so many different Haskell parsers, it's hard to choose.
08:34:59 <shapr> I've gone through the Parsec tutorial, it was fun..
08:35:40 <shapr> any other suggestions for good parsing libs?
08:35:57 <shapr> is Parsec also good for parsing binary formats?
08:36:28 * Igloo_ wrote my own, partly because I felt I ought and partly because the ones my supervisor pointed me to only alllowed predictive grammars
08:36:42 <Igloo_> Well, parsec does also have try, but it didn't look pretty
08:36:47 <shapr> what's a predictive grammar?
08:36:56 <shapr> or should I just look that up?
08:37:09 <shapr> it seems I need to do an in-depth study of parsing.
08:37:45 <Igloo_> If you want a good answer you will need to look it up  :-)
08:37:54 <shapr> ok :-)
08:38:01 <Igloo_> But basically it means you can tell what sort of thing is coming next from the next input symbol available
08:38:26 <shapr> can Parsec do bit level parsing of image formats, etc?
08:39:00 <Igloo_> So you can't nicely do   integer = digits | '0' 'x' hexits | '0' 'o' octits | ...
08:39:23 <shapr> oh
08:39:25 <shapr> I see
08:39:42 <Igloo_> Don't see why not
08:40:15 <Igloo_> The advantage of that is guaranteed linear time parsing
08:40:41 <shapr> right, don't have to backtrack
08:41:14 <Igloo> Yeah, but I think I worked out that my parser was linear even with backtracking combinators. I'm sure I proved it for the lexer at least.
08:41:22 <shapr> wow
08:41:26 <shapr> cool
08:41:47 <shapr> it'd be nice to write parsers for various file formats.
08:42:01 <shapr> hm, an XPM parser would be a good place to start ;-)
08:42:22 * Igloo wouldn't use a PC library for that  :-)
08:42:58 <shapr> PC?
08:43:02 <Igloo> Parser Combinator
08:43:18 <shapr> oh
08:43:40 <shapr> I'm really beginning to get a feel for combinator programming, it's very cool
08:43:52 <Igloo> *nod*
08:44:07 <shapr> what kind of combinators are available?
08:44:13 <shapr> I've noticed that some libraries are combinators, and some aren't
08:44:25 <Igloo> Which aren't?
08:44:32 <Igloo> Oh, you mean in general, not just parsers?
08:44:35 <shapr> right
08:45:08 <Igloo> Parsers and prettyprinters are the only combinator ones that spring to mind
08:45:17 <Igloo> Although you could argue that >>= is a combinator for monads I guess
08:45:28 <shapr> BlizzNL mentioned that SimonPJ wrote the Financial combinators
08:45:42 <shapr> WASH has HTML generation combinators...
08:46:00 <shapr> HaXML has XML combinators I think.. I need to look at that again now that I understand combinators
08:46:28 <Igloo> HTML and XML are basically prettyprinters, though
08:46:35 <shapr> oh, good point.
08:46:38 <shapr> nifty generalization.
08:46:53 <shapr> and parsers are "pretty much" the opposite of prettyprinters
08:46:58 <cleverdra> When you say combinator, I think of the 'Y' combinator, which is just a function that passes a function to itself along with its arguments.  How does this expand to 'combinator libraries' and 'combinator programming'?  What is an 'XML combinator'?
08:46:59 <shapr> whoa, neat
08:47:36 <shapr> the way I understand combinator, it means a function that can be applied to either another combinator, or actual input.
08:47:40 <hdaume> cleverdra: i believe in this context, 'combinator' is synonymous with 'higher-order function'
08:47:59 <shapr> if applied to another combinator, you're plugging them together to make a new combinator
08:48:37 <shapr> that's how I understand the two functions in a Monad...
08:48:54 <shapr> I paraphrase them as "plug on another lego block" or "stop plugging stuff"
08:49:14 <shapr> like the flat smooth pieces on the top of lego buildings, yah? :-)
08:49:18 <Igloo> hdaume: I wouldn't say map was a combinator
08:50:01 <shapr> from what I understand of the "Generalizing Monads to Arrows" paper
08:50:01 * cleverdra has a suspicion that combinators are less easy in strict languages.
08:50:23 <cleverdra> Would you say that 'flip' was a combinator, Igloo?
08:50:25 <shapr> there used to be a lot of random combinator interfaces, and you never knew if your combinator libs would work with another lib
08:51:10 <Igloo> No
08:51:16 <shapr> so one of the great things about the two functions in the Monad 'interface' is that they are a superset of most (all?) the other interfaces
08:51:35 <shapr> and guarantee that you will be able to talk to other combinator libs.
08:51:47 <shapr> so, am I right? or am I confused?
08:52:29 <shapr> and, monads lets you do IO and State passing and other useful stuff like that
08:53:05 <shapr> I suspect most functional programmers saw Monads as a huge eureka idea that make pure FP worthwhile
08:53:48 <shapr> so now I'm curious... what kind of combinator libs are available? can they all be happily plugged together?
08:54:04 <shapr> is GHC just a bunch of parser and pretty printer combinators?
08:55:24 <shapr> hi teeku
08:55:38 * cleverdra finds http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?combinator
08:56:02 <teeku> hi
08:56:26 <shapr> what's up?
08:56:37 <shapr> do you use haskell in helsinki.fi
08:59:18 <teeku> shapr, i haven't used haskell for a while. Ocaml nowadays. But it's interesting to follow discussions
08:59:59 <hdaume> teeku: out of curiousity, why did you switch?
09:02:33 <teeku> Back in the days, I wrote machine vision and robotics software in C++. Ocaml seemed to be better alternative. 
09:03:19 <teeku> But it isn't big question for me. It just that instead of hacking with two languages for hobby projects, it's easier to stay in one language.
09:03:29 <hdaume> and not haskell because...?
09:03:50 <cleverdra> OCaml is certainly better than C++ =)  and I sympathize with the tendency toward one language.
09:04:46 <teeku> hdaume, not for any particular reason. Speed issues maybe. 
09:05:16 <hdaume> yeah.  i must admit i've been thinking of switching to ocaml for a while...i just find the syntax so unappealing :)
09:05:34 <hdaume> i spend a few weeks about 2 months ago and learned the basics (i came originally from SML, so it wasn't very hard)
09:05:42 <teeku> But as I see it, Haskell could be great glue-language, if you write speed-critical parts in some lower language
09:06:03 <hdaume> yeah, that's my current approach -- i write my low level libs in *gasp* C
09:06:29 <teeku> hdaume, yes, Ocaml syntax isn't that great, but part of reason for this is that we all know how great haskell syntax is. 
09:06:44 <hdaume> true :)
09:06:58 <teeku> So if one compares C++ and Ocaml, Ocaml wins in syntax 
09:07:08 <hdaume> quite
09:08:32 <teeku> But unfortunately, I just got new job, and it seems to that I have to write Symbian software in C++. Eek, it seems that even STL (only good thing in whole language) can't be used... 
09:08:56 <hdaume> yuck
09:09:21 <Segora> hi
09:09:31 <shapr> hi Segora
09:09:50 <shapr> who are you writing Symbian software for?
09:09:55 <teeku> I have been writing a little game lately in Ocaml/LablGtk, and it's been really pleasure for most of the time.
09:10:44 <Segora> hmm. symbian: annoying newsletter, dysfunctional unsubscribe. avoid.
09:11:24 <shapr> symbian: running the Nokia 9210, 9290, and 7650, with more models coming.
09:11:34 <shapr> started as the Psion operating system...
09:12:18 <shapr> I'd like to see Haskell support in SWIG
09:12:23 <shapr> that would make life sooo nice
09:13:21 <hdaume> what is SWIG?
09:13:33 <shapr> www.swig.org
09:13:37 <shapr> recently added OCaml support
09:15:30 <hdaume> ah
09:16:10 <shapr> hi BlizzNL
09:16:12 <shapr> wassup?
09:16:14 <BlizzNL> shapr: hi
09:16:34 <BlizzNL> shapr: nothing
09:16:53 <shapr> Segora: you learning Haskell?
09:17:07 <Segora> shapr: yes, for some time now.
09:17:20 <shapr> have any questions?
09:17:31 <Segora> shapr: not in the moment, thank you. :)
09:17:52 <shapr> I think SWIG support would help Haskell as a glue language.
09:18:00 <Segora> shapr: The questions I have may well be a little too complicate to clear up in IRC.
09:18:12 <shapr> ok
09:18:13 <Segora> s/complicate/complicated/
09:18:42 <BlizzNL> maybe it's not..
09:19:20 <Segora> BlizzNL: ok.
09:21:55 <Segora> BlizzNL: I would like to encapsulate server connections in a way that allows me to write something like this: do { s <- connectServer server_description; withServer s do { send "stuff"; xx <- getStuff; putStrLn xx }}
09:22:50 <shapr> hi ribbon
09:23:17 <BlizzNL> Segora: You want to put it in some monadic structure. Ok I'll agree it's too complicated for IRC ;)
09:23:18 <ribbon> hello shapr
09:23:24 <Segora> BlizzNL: *g*
09:24:33 <Segora> BlizzNL: I know a little about the Monad Template Library. The Problem is, I would like to construct an augmented IO monad, without the need to put lifts all over the place.
09:24:55 <Segora> .. and I don't know how to construct such a monad.
09:25:31 <shapr> ribbon: learning Haskell? long-time user?
09:25:46 <BlizzNL> Segora: I don't master the principle of Monads well enough to be your guide on this subject. 
09:26:18 <Segora> BlizzNL: anyway, thanks for offering you help in the first place :)
09:26:26 <Segora> s/you/your/
09:26:34 <BlizzNL> Segora: np
09:27:40 <ribbon> shapr: I've used it for about year - not used monads or such much
09:30:58 <shapr> have any questions?
09:31:27 <shapr> I've been using Haskell for about a year also, and only yesterday did I fully understand Monadic IO
09:33:48 <ribbon> I don't really have any questions
09:33:54 <shapr> ok
09:34:23 <ribbon> I know why IO is done monadically and have a vague idea as to idea of a monad
09:43:19 * shapr grumbles at HaskellWiki
09:45:30 <ayrnieu> What's wrong with it?
09:45:48 <shapr> some rcs locks are still hanging around, making for blank pages
09:46:18 <shapr> well, when o3 completes a HaskellWiki written in Haskell, then we'll port all the content.
09:59:32 * shapr tries to build the Yampa version of HGL again
09:59:57 <shapr> anyone else tried to build Hudak's SOEGraphics HGL for GHC?
10:00:00 <shapr> on Linux?
10:00:04 <shapr> with ghc5.04.1 ?
10:02:47 * shapr reads green-card docs
10:02:47 <Segora> what's SOEGraphics?
10:03:22 <ayrnieu> Sigh, what's wrong with the Wiki?  I get many pages with a (wiki) header and no body.
10:03:42 <Segora> <shapr> some rcs locks are still hanging around, making for blank pages
10:04:23 <shapr> Segora: SOEGraphics is the lib Paul Hudak wrote for his book, "School of Expression"
10:04:32 <ayrnieu> I don't know what that means.  A lock on reading?
10:04:35 <Segora> shapr: thx
10:04:47 <shapr> ah, full name of that book is "the haskell school of expression"
10:05:12 <shapr> whatever wiki system HaskellWiki is using has rcs on the backend to save versions
10:05:24 <shapr> sometimes the system just freaks out and all pages you visit are blank
10:05:45 <shapr> once the wiki gets fixed, every page you visited that was blank has a lock hanging around
10:05:46 <ayrnieu> except for the pages that aren't -- or perhaps that's in my cache.  /me checks
10:06:09 <shapr> if the page wasn't visited while the wiki was freaking, the lock isn't there, and you can still see it afterwards
10:06:22 <shapr> also, if the maintainer cleaned out the lock for that page, you can see it again.
10:06:47 <ayrnieu> Is this a frequent occurence for HaskellWiki?
10:06:53 <shapr> every few months
10:07:03 <shapr> several people complained
10:07:37 <shapr> someone once asked for volunteers to swap the content to a new flavor of wiki, but I didn't have time when they asked.
10:07:46 <shapr> now that I have time, I can't figure out who to ask...
10:07:58 <ayrnieu> haskell-cafe, perhaps
10:08:07 <shapr> yah, I'll ask again.
10:26:20 <shapr> hmm
10:26:37 <shapr> ghc5.04.1 doesn't seem to have Foreign.makeForeignObj at all
10:26:55 <ibid> shapr: it's probably in some hierarchical lib?
10:27:10 <shapr> maybe it's ghc5.02 ?
10:27:19 <shapr> did the FFI change recently?
10:27:26 * shapr looks for older docs online
10:28:02 <Segora> shapr: what's worse is that ghc now doesn't have a type for opaque foreign pointers.
10:28:44 <shapr> that means nothing to me, but I'll take your word for it
10:28:57 <shapr> I just want to compile HGL for Yampa :-)
10:28:59 <ibid> i mean, 5.04 moved a lot of libraries around
10:30:06 <shapr> hm
10:31:49 <Segora> makeForeignObj has already been deprecated in 5.02
10:32:04 <shapr> ah, that's good to know.
10:32:05 <shapr> thanks.
10:32:38 <Segora> Foreign.ForeignPtr may be your friend now.
10:33:58 <Segora> Foreign.Marshal.Utils seems even better
10:34:50 * shapr wonders whether he should hack this into usability or play with a webserver instead.
10:35:09 <Segora> bbl [vanishing behind a black wall embroidered with a tiny xlock logo]
10:35:15 <shapr> heh
10:35:22 <shapr> sometimes I wish we had desktop cams rather than webcams
10:35:34 <shapr> it's a lot more interesting to see what someone's desktop looks like.
10:35:55 <Segora> shapr: take a look at xtv [now really vanishing]
10:35:56 <shapr> people look like people, it's sometimes hard to see how cool those people really are
10:35:59 <shapr> hm
10:36:17 <shapr> neato
10:36:18 <shapr> thinks
10:36:21 <shapr> er, "thanks"
10:37:17 <ayrnieu> a desktop-cam would let you read all the things people never say =)
10:37:28 <ayrnieu> it would be like telepathy!
10:37:58 <shapr> one step closer at least...
10:38:31 <shapr> sometimes I retype an email six or seven times as I realize more of what I really want to say.
10:38:34 <ayrnieu> That could be a form of high entertainment, desktop-cams.
10:38:49 <shapr> this confuses my fiancee very much, she just writes emails and sends them.
10:39:14 <shapr> yah, it could be.
10:40:53 <ayrnieu> shapr - I wonder if that's gender-related.
10:41:02 <shapr> I don't know.
10:41:15 <shapr> probably not
10:41:34 <shapr> I haven't always had the property of "think before speaking"
10:42:28 <ayrnieu> shapr - you think she doesn't think?
10:42:38 <shapr> I'm almost sure of it ;-)
10:43:01 <shapr> it's a very french way of doing things.
10:43:53 * shapr goes off to play counterstrike
10:58:10 * Heffalump reappears from a netsplit
10:59:13 <ayrnieu> Welcome back, Heffalump.  It must've been terribly lonely for you.
10:59:32 <Heffalump> [18:57] <Heffalump> hmm.
10:59:32 <Heffalump> [18:57] <Heffalump> I feel all lonely
10:59:42 <Heffalump> (from when I realised I was sitting in the channel all on my own :-)
11:20:28 * ayrnieu nods solemnly
12:05:00 <|Fo|Ns> hi
12:26:24 <shapr> ayrnieu: any new realizations about combinators?
12:26:24 <ayrnieu> hello foins.
12:27:21 <ayrnieu> shapr - I've been looking at other things, so no -- not beyond that foldoc entry.
12:27:22 <ludde> hi Marvin--
12:27:41 <ludde> Marvin--: what AFP project are you doing? dynamic loading?
12:27:45 <ludde> Marvin--: what's that
12:33:26 <shapr> ayrnieu: this is interesting: http://www.math.chalmers.se/~hallgren/Thesis/1.html
12:33:58 <ayrnieu> ah, thanks.
12:34:19 <Marvin--> ludde: I'm working on a plugin-based webserver
12:34:41 <ludde> does haskell support dynamic loading of haskell code?
12:34:44 <ludde> ghc
12:34:46 <Marvin--> yup
12:35:18 <ludde> oh
12:36:14 <shapr> marvin--: hey, you're working on plugins for a webserver?
12:36:18 <shapr> are you using HWS?
12:36:40 <Marvin--> shapr: HWS? :) No I'm probably not using it ;)
12:37:02 <Marvin--> shapr: it's a very small project... both server and plugins are in haskell, and it's very primitive
12:37:03 <shapr> Simon Marlow wrote HWS, Haskell Web Server
12:37:37 <shapr> I think adding a plugin API to SimonMar's HWS, and porting his AccessLogger and ErrorLogger modules to plugins would take less than a week
12:38:08 <shapr> I updated HWS to work with ghc5.04.1 last week
12:38:17 <shapr> it was just a few minor bits
12:39:09 <shapr> interested?
12:39:22 <Marvin--> I'll definitely have a look at it
12:39:39 <Marvin--> but my plugin idea was just to have a plugin layer for handling requests
12:39:47 <Marvin--> not a general behaviour plugin system
12:39:53 <shapr> I've been trying to figure out how to make a decent plugin API
12:40:16 <shapr> I've been looking at Apache's plugin API, thought I'd steal it entirely
12:40:39 <shapr> one of the steps in the Apache api is handling the request.
12:40:43 <Marvin--> with apache's module system, can't you pretty much hook into anything? :)
12:40:57 <shapr> yah, you can
12:40:59 <shapr> well, sort of
12:41:22 <Marvin--> I think I saw a graph on which steps a module can intercept what apache does
12:41:27 <Marvin--> it was rather complicated ;)
12:41:37 <shapr> eight steps from what I read
12:41:42 <shapr> want me to paste 'em?
12:42:16 <shapr> have you seen SimonMar's HWS? it's pretty spiffy. He wrote a paper about it, says it approaches Apache for speed.
12:42:23 <Marvin--> I've read the paper
12:42:28 <shapr> ok :-)
12:43:31 <Marvin--> you got a URL handy for those eight steps?
12:44:03 <shapr> er, I just surfed to apache's site and looked at their plugin docs
12:44:07 <Marvin--> it'd be cool to extend a web server instead of implementing my own (even if I have a basic implementation to use from an assignment in the course)
12:44:10 * shapr looks
12:44:30 <Marvin--> right, I'll go surf too
12:44:49 <shapr> yah, extending HWS would be a good proof-of-spiffyness for o3's runtime loader
12:45:37 <shapr> I can paste those eight steps if you like
12:45:37 <Marvin--> What's the license on HWS?
12:45:44 <shapr> good question, I haven't checked
12:46:58 <Marvin--> yeah okay, paste on
12:47:16 <shapr> URI -> Filename translation
12:47:16 <shapr> Auth ID checking [is the user who they say they are?]
12:47:16 <shapr> Auth access checking [is the user authorized here?]
12:47:16 <shapr> Access checking other than auth
12:47:16 <shapr> Determining MIME type of the object requested
12:47:17 <shapr> "Fixups" - there aren't any of these yet, but the phase is intended as a hook for possible extensions like SetEnv, which don't really fit well elsewhere.
12:47:20 <shapr> Actually sending a response back to the client.
12:47:22 <shapr> Logging the request
12:48:19 <shapr> modpython docs have a longer list of directives: http://www.modpython.org/live/mod_python-2.7.8/doc-html/directives.html
12:48:30 * shapr looks for license on HWS
12:48:32 <Marvin--> here's a problem: I have to hold a presentation on my progress so far tomorrow ;)
12:48:40 <Marvin--> shapr: there doesn't seem to be a license in the code :/
12:48:45 <shapr> oh
12:48:50 <shapr> presentation tomorrow?
12:48:52 <shapr> hmm
12:49:53 <shapr> I think the HWS license was discussed on one of the mailing lists at some point.
12:51:30 * shapr tries to find the hws license
12:51:54 <shapr> well, assuming the license is something sane, (GPL, lGPL, etc)
12:52:19 <shapr> putting in a request handler plugin should be simple...
12:52:28 <shapr> of course, "should" has bitten me before
12:52:58 <Marvin--> I'll mail him about license
12:53:49 <shapr> ok
12:54:27 <shapr> I've put my patches up: http://kungens.kemi.fi/~shae/src/haskell/hws.patch.gz
12:54:49 <shapr> that's the first time I've ever made a patch file, so it might be broken
12:56:01 <shapr> apache lets plugins register for phases, and the plugins are each called with the phase input, the first plugin that offers to handel that phase gets it
12:56:21 <Marvin--> yup
12:56:43 <shapr> I was thinking about doing the same thing..
12:56:56 <shapr> any ideas for something better?
13:28:39 <shapr> cool, Yampa fixes for ghc5.04.1
13:31:13 <shapr> hi rap
13:31:21 <shapr> what's up?
13:31:27 <Marvin--> shapr: well, I sent a mail, let's see what he says
13:31:43 <raphael_> hi there
13:31:55 <shapr> Marvin--: I hope the license is something OSS compliant... anything else would suck.
13:32:13 * shapr builds HGL for Yampa
13:32:16 <shapr> yay, they fixed it!
13:32:47 <raphael_> anyone here know a little (a lot) about the implementation of lazy state threads in ghc ;)
13:32:56 <Marvin--> shapr: yeah
13:33:25 <shapr> w00, the tests work
13:36:58 * shapr builds more
13:37:38 <raphael_> *mumblemumble* why doesn't ghc do what not only *I* tell it to, but what John Launchbury and Simon Peyton Jones tells it to do ....
13:37:42 <shapr> hm, Arrow preprocessor... I wonder if Template Haskell could replace that.
13:37:53 <shapr> raphael_: what's your question?
13:38:47 <raphael_> well ... runST is supposed to have the type  (forall s. ST s a) -> a but ghc keeps telling me it expects  ST s a -> b
13:39:17 <raphael_> I even copied code directly from a SPJ paper after tearing my hair for awhile
13:40:03 <shapr> hm
13:40:14 <raphael_> more specifically, it says:  Inferred type is less polymorphic than expected
13:40:14 <raphael_> 	Quantified type variable `s' escapes
13:40:46 <raphael_> can't make heads or tails of it ....
13:40:47 <shapr> you're trying to use, or implement runST?
13:41:17 <raphael_> use
13:41:17 <shapr> I would guess that ghc is saying that the types of your input and output are different
13:41:40 <shapr> have you tried to explicitly type your in and out as the same thing?
13:43:07 <raphael_> well .. I tried fixing the state, but that didn't help much
13:43:33 <raphael_> I'm implementing DFS, so it's really only the dfs function itself that uses the ST monad
13:43:51 <shapr> have you used the ST monad before?
13:44:26 <raphael_> well ... sort of.  Not this explicitly.
13:45:06 <shapr> it sounds like your dfs function , with the ST monad, isn't putting in the same type as it is getting out
13:45:11 <shapr> I think that's what ghc is saying
13:45:59 <raphael_> hmm ... odd ...
13:46:03 <shapr> I would suggest that you write a small test module for the ST monad
13:46:25 <shapr> where you explicitly and statically try to make the ST monad do what you want it to do
13:47:14 <raphael_> will do *clatter clatter'
13:47:22 <shapr> :-)
13:48:10 <shapr> whenever I use a new thing that I'm not quite sure I understand, I write small programs that each have only one new concept or idea in them
13:48:46 <shapr> once those small programs work, I usually know enough to use the new ideas in larger programs.
13:49:32 <raphael_> yup ... there we go ... seems like the implementation has changed since SPJ's paper from 1994 :)
13:49:46 <Marvin--> raphael_: ivil
13:56:01 <raphael_> but the docs say it is supposed to be consistent with the '94 paper ... now i'm really confused ....
13:57:10 * raphael_ starts glancing at the IOArray with a mournful look to his eyes
13:58:42 * Marvin-- tries to conjure up something to say at the presentation tomorrow
14:00:01 <raphael_> I'm a monad, here's my bind and here's my return? (aaaggckkk ... that was bad)
14:00:35 * shapr laughs
14:00:49 <shapr> hey, I've got it...
14:01:06 <shapr> you can say "I've been prototyping the functionality to better understand how it all works"
14:01:35 <shapr> and then "I've emailed SimonMar to ask about the license of HWS, since making plugins for that would contribute positively to the Haskell community."
14:02:04 <Marvin--> heh
14:02:37 <shapr> of course, the monad bit might get a good laugh
14:03:06 <Marvin--> since Koen's usually defined at least one monad per lecture, maybe I should start with that :-)
14:03:27 * shapr grins
14:04:15 <Marvin--> I'm a bit confused wrt the apache docs... it speaks of both modules and handlers, and I'm not sure what's what
14:05:56 <shapr> as far as I understand...
14:05:57 <Marvin--> maybe module is just "foo.so that contains some handlers"
14:06:15 <shapr> you write a module, and it can contain handlers
14:06:29 <shapr> I think that's true
14:07:27 * shapr asks on #apache
14:10:19 <shapr> <RoUS> 1.3: modules have register interest in zero or more phases.  one of them is typically called the 'handler', and is responsible for actually sending the content of the response back to the client.
14:13:42 <Marvin--> I'm looking at mod_python.c right now
14:14:06 <Marvin--> there seems to be 10 phases
14:14:16 <shapr> hm
14:14:19 <shapr> that's confusing.
14:14:44 <shapr> twelve phases here --> http://www.modpython.org/live/mod_python-2.7.8/doc-html/directives.html
14:14:47 <shapr> even better.
14:15:03 <shapr> er, eleven?
14:15:23 <Marvin--> maybe they count initializer too?
14:15:44 <shapr> oh
14:15:46 <shapr> so they do
14:15:46 * raphael_ feels stupid .... damn arrays!
14:15:53 <shapr> ok, ten handlers
14:15:56 <shapr> er, phases
14:15:58 <shapr> whatever :-)
14:17:56 <Marvin--> whatever, I'm not trying to replicate apache exactly
14:18:08 <shapr> right
14:18:29 <shapr> it's good to see what phases they have just to know if you want to steal some of their structure
14:18:57 <Marvin--> *cough* ;)
14:19:25 <shapr> well, learning from others is the best way :-)
14:21:54 * shapr finds a makefile problem with Yampa
14:22:48 <shapr> yay, it's finally entirely compiled
14:22:53 * shapr wants to play robot soccer
14:23:14 <Marvin--> heh
14:23:47 <shapr> whoa, this is coool
14:23:53 * shapr watches the robots
14:24:50 <Marvin--> I wonder if that's the same thing that Jan-Willem was talking about
14:24:59 <Marvin--> soccer-playing robots coded with arrows
14:25:07 <shapr> yah, that's the one
14:25:11 <Marvin--> ok
14:25:27 <raphael_> now I'm REALLY confused ... I downloaded some examples using STArrays, and they are doing exactly what I was doing
14:25:42 <raphael_> only difference is that they work :S
14:26:17 <Marvin--> :)
14:26:38 <raphael_> argh?!"?=!?!?!
14:27:14 * Marvin-- wonders if raphael_ has read An AOL User's Diary
14:27:31 <raphael_> nope
14:27:38 <Marvin--> then google for it :)
14:29:05 <Marvin--> raphael_: I have a new enterprise ep., but maybe you already know
14:29:54 <shapr> ep?
14:30:01 <Marvin--> isode
14:30:05 <shapr> oh
14:30:10 <shapr> season two?
14:30:14 <Marvin--> yup
14:30:34 * shapr is addicted to Andromeda
14:30:45 <Marvin--> haven'y seen it
14:31:01 <Marvin--> haven't even, I suck at typing with just one hand
14:31:20 <shapr> I've only seen the first few episodes
14:31:31 <shapr> the acting is *really* bad in some parts
14:31:37 <shapr> and the sets are even worse in some parts
14:31:38 <Marvin--> heh
14:31:43 <Marvin--> somewhat like star trek :P
14:32:01 <shapr> but the social settings, the setup of the tensions among characters, that's really fascinating
14:32:13 <shapr> yah ST:TNG was awful the first season
14:32:19 <raphael_> even more? later than the ... eh whatever-with-the-ai-station
14:32:24 <shapr> wasn't till 3rd season it started to get better.
14:32:36 <shapr> oh don't tell me, I've only seen a few of 'em :-)
14:32:38 <Marvin--> last ST:VOY episode I saw was one of those swap-bodies-with-each-other episodes
14:32:47 <shapr> haven't seen that one.
14:33:03 <Marvin--> it could've been pretty good... if they were better actors ;)
14:33:04 <shapr> I'm still missing the last coupla seasons of ST:VOY
14:33:09 <Marvin--> raphael_: yup, A Night in Sickbay
14:33:17 <raphael_> andromeda ... who created that again?
14:33:28 <shapr> Majel Roddenberry hired some folks to do it
14:33:32 <Marvin--> shapr: oh, they're showing ST:VOY every Sunday in Sweden
14:33:33 <shapr> at least, I think that's true.
14:33:47 <shapr> Marvin--: cool, I can watch it when I get there ( ~ two weeks )
14:33:49 <raphael_> yeah, some Roddenberry is involved, that's what I've heard too
14:34:03 <Marvin--> shapr: I think we're down to the last season though
14:34:08 <shapr> Majel is exec producer in Andromeda
14:34:22 <shapr> Andromeda is way different, but I like it.
14:34:26 <raphael_> Marvin--: cool ... more ST ... sounds lika a bad one
14:34:37 <shapr> STtng monad
14:34:38 <shapr> hmm
14:34:51 <raphael_> yeah ... the ST Monad ....
14:34:55 <Marvin--> duhhh
14:34:56 <shapr> :)
14:35:11 <Marvin--> forall s . ST s VOY
14:35:14 * shapr laughs
14:35:16 <Marvin--> oh well
14:35:25 <raphael_> oh no *pop*
14:35:25 <shapr> extreme geekage ;-)
14:35:35 <raphael_> for real
14:35:48 <Marvin--> raphael_: I don't know, I kinda like the doctor in enterprise (too ;)) so we'll see
14:36:01 <shapr> that vulcan chick is nice
14:36:41 <raphael_> the n'th playboy/maxim model they've got on the show
14:36:44 <Marvin--> Hmm. What I *should* do is go to bed
14:36:55 <Marvin--> What I think I *will* do is have a glass of whisky and watch the enterprise ep
14:36:55 <raphael_> me too
14:36:58 <shapr> heh
14:37:05 <raphael_> oooooh ... whisky ....
14:37:10 <shapr> and I'll stop playing with useful stuff like arrows and go play counterstrike.
14:37:17 <Marvin--> shapr: haha
14:37:33 <Marvin--> raphael_: I bought a bottle of Cragganmore some time ago :-)
14:37:56 <raphael_> you cheat ;)
14:38:16 <Marvin--> gotta buy a new bottle of Laphroaig though
14:38:28 <raphael_> i prefer highland park, actually
14:38:34 <raphael_> developed a taste for it
14:38:35 <Marvin--> got that one
14:38:37 <Marvin--> 18 year old
14:38:51 <raphael_> of course ... Ben Nevis rules them all
14:38:56 <Marvin--> not that much left
14:39:34 <raphael_> (although at 15000skr a bottle for a 25yr i wouldn't buy one)
14:39:43 <shapr> I do energy drinks instead of alcohol
14:39:43 <Marvin--> :)
14:39:49 <Marvin--> well, ST it is
14:39:51 <Marvin--> *wave*
14:39:54 <shapr> bye!
14:40:01 <shapr> hm, I think I'll give it to CS
14:40:10 <shapr> even though these robots are very cool.
14:40:12 <raphael_> I'll follow suit and interrupt his viewing by d/l'ing
14:40:32 <raphael_> hehe >:)
14:41:09 <raphael_> bye
16:26:28 <Pseudonym> I propose we put in an entry for the communities report.
16:26:36 <Pseudonym> "We're still here and still chatting.  Mostly offtopic."
16:27:22 <clausen> LOL
16:27:47 <Heffalump> :-)
16:30:37 <Chilli> Moin
16:30:58 <Pseudonym> G'day.
16:31:07 <Chilli> Pseudonym: an entry into the communities report is a good idea, I think
16:31:39 <Pseudonym> Just to let people know where #haskell is?
16:32:15 <Chilli> Firtsly, many people don't know it exists
16:32:28 <Chilli> so, it is good to gets ome exposure
16:32:59 <Chilli> Secondly, to give an idea what it is about
16:33:01 <Pseudonym> True.
16:33:17 <Pseudonym> This does count as "community", I guess.
16:33:47 <Chilli> can't get more "community" as a chat channel, I'd say
16:34:03 * Pseudonym LOL
16:34:10 <Pseudonym> I just had a vision of a Haskell commune.
16:34:19 <Chilli> hehehe
16:35:20 <Pseudonym> That's quite a frightening thought, actually.
16:36:03 <clausen> it would be very clean, hehe
16:36:21 <Pseudonym> Yes.  Nobody would do anything unless they were convinced that it was theoretically pure.
16:36:22 <Chilli> basically effect free
16:36:49 <Igloo> And everything would be left until the last minute
16:37:00 <Chilli> well, I do that already!
16:37:11 <Heffalump> don't all good coders do that?
16:37:22 <Pseudonym> Oh, yes.  More than one lecturer has noticed that most undergrads work by lazy evaluation.
16:37:27 <Pseudonym> They do it just before it's required.
16:37:33 <Chilli> Heffalump: right, we create the language in our image
16:37:35 <clausen> err, I can't this semester :(
16:37:42 <Heffalump> I find a lot of things become unnecessary if left long enough.
16:37:45 <clausen> the idiots set me 4 projects, in one month
16:37:49 <clausen> big projects
16:37:52 <Igloo> All good coders right code while wearing only a towel.
16:38:08 <clausen> hahaha
16:38:09 <Igloo> s/right/write/
16:38:11 <Chilli> Heffalump: I agree; leave the unpleasant things "ripping" and some go away
16:38:20 <clausen> there's a good picture of marcelo tosatti coding in a pure white towel
16:38:48 <Chilli> ripening, that is
16:38:56 <clausen> (want it? hehe.  he's the linux 2.4.x guy)
16:38:59 <Heffalump> Admittedly many of the things involving housework go away because my girlfriend gets fed up and does them, but then maybe she should work on Eager Haskell.
16:39:28 <clausen> LOL
16:39:44 <Chilli> Heffalump: so, make sure she doesn't run away with Jan-Wilhelm
16:40:39 <Pseudonym> Has anyone else seen the SGI "No skinnyhacking" picture?
16:45:39 <tez> no, where?
16:45:51 <tez> "Skinny hacking"?
16:46:41 <clausen> skinny dipping == swimming without clothes on
16:46:47 <clausen> (without bathers too)
16:47:26 <tez> Yes, I know what skinny dipping ie
16:47:28 <tez> iw
16:47:29 <tez> is
16:47:43 <clausen> oh, you're from uk
16:47:52 * clausen didn't notice, sorry
16:48:02 <tez> But what's skinny hacking (if it's as literal as I think it is, I don't rea;;y want yo know!).
16:48:04 <tez> ?
16:48:06 <Pseudonym> http://www.angelfire.com/scifi/basement/jig1.html
16:48:17 <Pseudonym> It's not a good version
16:48:24 * Pseudonym saw it in SIGGRAPH many years ago
16:48:38 <tez> lol
16:49:27 <clausen> it's rather recursive
16:50:45 <tez> I'm till very confused, although that might be due to the fact that I'm quite drunk right now :-)
16:51:23 * clausen usually keeps a safe distance from his computer-machine when he's drunk
16:51:25 <tez> In fact, I shouldn't lower the tone here at #haskell.  I'll stick to #C riht now ;-)
16:51:35 <clausen> hahahaha
16:51:50 <tez> Shut up.
16:52:04 <Heffalump> ??
16:52:14 <tez> I have a very good anecdote about drunkeness and computer.
16:52:17 <Pseudonym> {- drunk.. fix later -}
16:52:27 <tez> computers.
16:53:15 <tez> My brother had an accident with spilt water and his wireless keyboard last night.
16:55:51 <Pseudonym> That's the story?
16:56:03 <Pseudonym> Kinda short, don't you think?
16:58:13 <clausen> heh, the fsf had an accident too
16:58:17 <clausen> their basement got flooded
16:58:22 <clausen> taking out their mail server :(
16:58:25 * clausen without mail
16:58:25 <Pseudonym> Eek.
16:58:37 <clausen> taking out their t1 to their office, rather
16:58:50 * Pseudonym has own server on third floor in centre of Melbourne
16:58:57 <Pseudonym> Flood not likely.
16:59:02 <clausen> :)
16:59:09 <Heffalump> burst water pipe?
16:59:13 <clausen> OTOH, the uplink?
16:59:15 <clausen> Heffalump: no idea
16:59:29 <Heffalump> IM that could flood Pseudonym's office
16:59:31 <Pseudonym> You don't work for them then?
17:00:08 <Pseudonym> Heffalump: Very very unlikely.  The building is ~130 years old, so all the pipes are on the outside.
17:00:12 <tez> Th story?
17:00:26 <Pseudonym> Or at least well hidden behind bluestone and sandstone.
17:00:35 <Pseudonym> tez: Yes, the story.
17:00:43 <tez> Well, he spilt the water on his table, and dripped into his cooling fan on the top of his computer.
17:01:29 <tez> I was trying to catch the water with my cupped hand, telling him to move the computer out of the way. He was too drunk to respond quikly enough.
17:02:37 * Pseudonym laughs
17:02:59 <Pseudonym> Did the machine survive?
17:03:23 <tez> Anyway, the omputer hung, and now he blames *any* slow-down of his 2.5GHz desktop on the spliiage.
17:03:31 <tez> Yeah, the computer is OK.
17:03:53 <tez> His wireless keyboard is *ahem* fucked.
17:04:00 <tez> :-)
17:06:01 <tez> Anyway, I think the lesson is "don't drink and derive".  Or something.
17:06:44 <Pseudonym> Mind if I add that to the quotes page?
17:08:06 <tez> Please!
17:08:25 <Pseudonym> http://haskell.org/wiki/wiki?QuotesPage
17:08:33 <Heffalump> is the wiki being reliable again?
17:08:44 <Pseudonym> That page is.
17:10:08 <tez> Oh my.  Now I'm just embarrased.
17:19:55 <tez> Alright, back to haskell. What does the "~" do?
17:21:18 <tez> I have a program with the line "main = do ~prgArgs <- getArgs" an I've forotten what "~" does.
17:21:51 <Igloo> Absolutely nothing
17:22:14 <tez> Oh.
17:22:33 <Igloo> In general it makes an irrefutable pattern, so both [1,2,3] and [] match ~(x:xs), but the latter will cause a runtime error if you use x or xs
17:22:42 <Igloo> but prgArgs matches anything anyway
17:22:53 <tez> I see.
17:23:29 <tez> So in the example I gave, there's no need for it.
17:23:53 <Igloo> Indeed
17:24:00 <Igloo> Unless I'm missing something at any rate  :-)
17:24:05 * Igloo goes off to bed
17:24:08 <tez> (since I have a case for [])
23:57:07 <sethk> Testing new IRC client (briefly)
