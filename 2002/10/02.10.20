04:40:43 * Marvin-- swears at ghc -O
05:02:10 <Marvin--> Err, where is the -O added in the jungle of fptools make files?
05:05:54 <Igloo> Try grep -- -O mk/* ghc/mk/*
05:07:49 <Marvin--> seems to be config.mk, but I can't find where it's included
05:08:26 <Igloo> By boilerplate probably
05:08:54 <Marvin--> oh, right
05:09:48 <Marvin--> weird bug with deriving Read
07:06:53 * Marvin-- abuses Haskell's type system a bit
07:07:59 <Igloo> Oh?
07:08:52 <Marvin--> stop = return (error "Don't evaluate this, dumbfuck")
07:09:19 <Marvin--> It's our assignment on turtle graphics
07:09:42 <Marvin--> We made the programs monadic so we could use the do notation, but in reality we don't *need* bind, we just need >>
07:10:08 <Marvin--> So when we had to implement continuing after parallelizing two turtles, the type system complained and whined
07:10:13 <Marvin--> This hack should solve it (ick)
07:10:55 <Marvin--> Parallel p1 p2 >>= f = Save (do f (error "Cannot evaluate"); stop) (Parallel p1 p2)
07:10:57 <Marvin--> (ick ick ick)
07:11:14 <Marvin--> maybe I should give the syntax rebinding a shot instead
07:11:44 <Heffalump> that return is superfluous, btw
07:11:56 <Marvin--> ?
07:12:06 <Marvin--> return (error..)?
07:12:07 <Heffalump> [15:08] <Marvin--> stop = return (error "Don't evaluate this, dumbfuck")
07:12:12 <Heffalump> yeah
07:12:21 <Marvin--> Heffalump: no no, we want to have return, but the user isn't allowed to evaluate the result :-)
07:12:29 <Heffalump> ahh
07:12:50 <Marvin--> and the Save construct takes a turtle program as argument, keeps running, and then runs the saved program
07:13:11 <Marvin--> so our interpretation of  (p1 <|> p2) >> p3  is  save p3 >> (p1 <|> p2)
07:13:56 <Marvin--> but I have to walk circles around the type system
07:14:07 <Marvin--> because we've defined it monadic while in reality there's no reason for it to be monadic
07:16:04 <Marvin--> (this is the part you're supposed to throw rotten tomatoes at me)
07:18:37 <Marvin--> hmm, syntax rebinding won't work, since muchos stuff is done in IO, damn
07:18:57 <Heffalump> syntax rebinding?
07:20:23 <Marvin--> The way I understood it, you can use do notation as long as you define >>=, and hide "old" definitions of it
07:20:30 <Marvin--> But maybe I understood it wrong
07:21:01 <Heffalump> I think you really have to be in the Monad class
07:21:48 <Igloo> I think it's literally syntactic sugar - it was discussed on the list a while back in teh alternative prelude threads
07:22:31 <Heffalump> I thought it was syntactic sugar that required the Monad class
07:26:02 <Marvin--> Not in recent versions of ghc I think
07:27:19 <Heffalump> fair enough
07:39:07 <Marvin--> Hmm, is it impossible to import operators qualified?
07:42:28 <Igloo> Shouldn't be, but you'll need to put parentheses around them
07:42:50 <Igloo> So maybe I mean "Yes, but you can import the corresponding functions qualified"  :-)
07:46:24 <Marvin--> :)
07:46:37 <Marvin--> aha, you still need kind * -> * when rebinding do
07:46:49 <Marvin--> damn :)
07:53:06 <Heffalump> do you mean "do", or ">>=" ?
07:53:42 <Marvin--> Couldn't match `t t1' against `P' .. In a 'do' expression pattern binding: forward 10
07:53:48 <Marvin--> I didn't even define >>=, I defined >>
08:10:02 * Marvin-- writes a long essay about why this solution is ugly
09:38:35 * shapr bounces
09:42:33 <shapr> goood evening #haskell!
09:43:40 * Heffalump worries
09:44:06 <shapr> ?
09:44:14 <shapr> what are you worrying?
09:45:10 <Heffalump> your enthusiasm, it's worrying :-)
09:46:54 <shapr> heh
09:47:00 <shapr> why is it worrying?
09:47:37 <shapr> I wrote some good code yesterday, and learned how to do threaded socket servers in Haskell
09:47:41 <shapr> that's a happy thing.
09:47:57 <Heffalump> cool.
09:50:37 <o3> hmm
09:50:40 <o3> morning
09:51:05 <o3> can anybody suggest a nice tagline for my haskell wiki named "hicky"?
09:51:28 * shapr thinks
09:51:30 <o3> something like "putting the love into haskell" (which isn't a serious attempt at a tagline :)
09:51:46 <shapr> hm
09:52:02 <shapr> you could steal the topic line "We put the Funk in Funktion"
09:52:03 <ibid> o3: see topic?
09:52:25 <ibid> of course, it works a little badly in english
09:52:28 <o3> ibid: i preferred "Monad off the port bow!" :)
09:52:31 <shapr> heh
09:52:44 <shapr> "designed by tribes of monadic grad students"
09:53:01 <o3> laugh
09:53:04 <o3> i'll find something :)
09:53:05 <shapr> "mo' nads than you"
09:53:11 <o3> oh god
09:53:15 * shapr laughs
09:53:25 <o3> now _that_ should be the topic
09:53:28 <shapr> "this hicky don't suck"  ?
09:53:55 --- topic: set to 'mo' nads than you || We put the Funk in Funktion || See logs @ http://tunes.org/~nef/logs/haskell/ || Gtk+HS 0.14.10 released http://www.cse.unsw.edu.au/~chak/haskell/gtk/ || ICFP is over <Erwin> Your mother asked you to write COM program? Who are you, Dilbert?' by shapr
09:54:28 * shapr thinks
09:54:30 <o3> crikey :)
09:55:40 <shapr> Pure Funk for Communal Collaboration
09:56:15 <o3> that's okay shapr, i'll think of something later when it's not 3am :)
09:56:19 * shapr grins
09:57:30 <shapr> well, if I think of something wonderful I'll send it to you.
09:57:56 <o3> merci beaucoup
09:58:04 <shapr> de rien
09:59:17 <shapr> Higher Order Collaboration... Highly Integrated Communal Kombinators for You
09:59:48 <shapr> Hicky Is Communal Kombinators, Yup
09:59:51 * shapr gives it up
10:00:09 <o3> 8)
10:02:09 <shapr> I really hope someone writes an arrow based path finding system and calls it "arrows from a to b"
10:03:03 * shapr goes back to the network server
10:03:56 <shapr> addDLL adds an .so file
10:04:00 <shapr> what loads .o files?
10:04:18 <shapr> I'd like to look at the ghci logic for replacing an existing .o file with a new version
10:04:35 <o3> shapr: loadModule
10:04:45 <shapr> that does reloading also?
10:04:47 * shapr looks
10:04:51 <o3> just do unloadModule, then loadModule again
10:05:05 <Heffalump> DYM arrows as in John Hughes' arrows? And if so, why would a path finding system require arrows?
10:05:35 <shapr> it wouldn't require them, just an extremely cheesy and recursive name
10:06:02 <shapr> I was in that cheesy mood, thought I'd inflict another one on the channel
10:06:07 <o3> but it does use them, they get bonus marks
10:06:32 <o3> if it does use them, i mean
10:07:26 <shapr> aha, thanks o3
10:07:33 <shapr> unloadObj in Linker.c
10:08:51 <o3> nod
10:09:43 <shapr> so if I load a type from a module, create one of those, then unload that module...
10:09:50 <shapr> are the created types in the heap?
10:10:18 * shapr needs to write some unit tests for RuntimeLoader to fully understand it
10:10:33 <o3> i think "probably" is your answer :)
10:10:41 <shapr> heh, ok :-)
10:11:30 <shapr> o3: have you integrated Marvin's "throw exception" code?
10:12:22 <o3> no, i'm not sure what code you speak of
10:12:45 <shapr> I know Marvin-- patched the runtime loader to throw exceptions
10:12:45 <o3> this is general exception throwing, or specifically for the runtimeloader?
10:12:53 <shapr> specifically for runtimeloader
10:13:01 <Marvin--> oh I haven't sent any code anywhere
10:13:05 <Marvin--> I'm just toying with it
10:13:06 <o3> oh, really?  if he sent me the patches, that'd be even better :)
10:13:16 <shapr> marvin--: me too, I want patches!
10:13:34 <shapr> o3: thanks for writing this loader, it's a cool tool
10:14:03 <o3> no prob, i think it's one of those things that would have happened eventually, it's just that i was the first person to get annoyed enough to actually do it
10:16:11 <shapr> I know haIDE will have a plugin API in their next release
10:16:21 <shapr> they're going to have a call for plugin writers
10:16:30 <Marvin--> http://193.11.232.159:8080/RuntimeLoader.hs.diff
10:16:57 <shapr> w00
10:17:00 * shapr grabs
10:17:32 <o3> Marvin--: great, thanks
10:17:45 <o3> woohoo, it's in diff -u format too :)
10:18:00 <Marvin--> I always use diff -u
10:18:24 * o3 learns about this neat "when" function :)
10:18:33 <Marvin--> heh
10:19:18 <o3> haskell has "unless" too, eh?
10:19:22 <o3> who says it's not like perl :)
10:19:34 <shapr> is that in perl? do they work the same way?
10:19:55 <o3> yeah, unless(x) == if(!x)
10:19:56 <shapr> I haven't used perl in years. most of what I knew about it has fallen out of my head.
10:20:04 <shapr> oh
10:20:20 <Marvin--> yeah, maybe the 'unless' part was a bit excessive *cough*
10:20:28 * Marvin-- is not even a fan of Perl
10:21:00 <Marvin--> maybe using a throwIf would be better
10:21:17 <shapr> does this mean TextFilter 1.3 will be out soon?
10:21:29 <o3> :)  why not, i'll do a release later today
10:21:34 <o3> thanks lots marvin!
10:21:42 <shapr> yay!
10:21:46 <o3> i presume ioerror throws the exception then
10:21:59 <Marvin--> yup, can be caught with 'catch'
10:22:03 <o3> (strangely-named function, but anyway :)
10:22:33 <Marvin--> well, throw is polymorphic, and shouldn't be used in the IO monad
10:22:56 <Marvin--> (or so I've understood it)
10:23:03 <shapr> why not?
10:23:06 <o3> Marvin--: what's the ~ thingie do in "ptr@(~(Ptr addr))"?
10:23:34 <Marvin--> o3: ;) something I learned but a few days ago, lazy pattern binding ;)
10:23:47 <Marvin--> It's probably not needed, as I suspect that Ptr is the only constructor
10:23:58 <o3> [scratches head]
10:24:16 <Marvin--> let x@(~(Just y)) = Nothing in isNothing x <- works
10:24:24 <Marvin--> let x@(Just y) = Nothing in isNothing x <- doesn't work
10:24:50 <o3> oh, i think i see
10:25:13 * shapr doesn't see
10:25:16 <Marvin--> But if Ptr is the only constructor, feel free to remove the tilde
10:25:25 <Marvin--> shapr: eh? weren't you here when we talked about it?
10:25:33 <shapr> yah, I was
10:25:42 <shapr> I thought I understood it then, guess not.
10:25:53 * shapr looks for ~ in the Report
10:26:45 <o3> Marvin--: ouch, hopefully i'll never have to use that in my life :)
10:27:24 <o3> (my haskell knowledge is very, very primitive compared to most people on this channel, i suspect)
10:27:35 <shapr> same here
10:27:47 <dark> I think it's more like conditioning than knowledge :-)
10:28:00 <shapr> and yet, I can already do so much with what I know...
10:28:09 <Marvin--> o3: I just found it cute :P
10:28:24 <o3> Marvin--: now haskell just needs a ^_^ operator, and we'll be set!
10:28:34 <Marvin--> o3: actually...
10:28:40 <shapr> is that like "top" the opposite of "bottom" ?
10:28:47 <o3> newsflash: south korea to use haskell to program future multiplayer games
10:28:54 <shapr> that's the operator that means "make this program do what I want it to" right?
10:29:19 <Marvin--> Koen's Yahu module has ^.^, ^-^ et.c. for packing
10:29:26 * shapr laughs
10:29:45 <shapr> now how do we define multi-line operators?
10:29:49 * shapr thinks of:
10:29:50 <shapr> ^.^
10:29:51 <Marvin--> heh
10:29:55 <shapr>  v
10:30:11 <o3> i suspect :-> and <-: operators are feasible
10:30:21 <shapr> =^.^=  <-- the meow operator
10:30:27 <Marvin--> haha
10:30:43 <dark> shapr: To replace ++ for catenation?
10:30:49 <shapr> HEH
10:30:52 * shapr falls over laughing
10:30:53 <Marvin--> LOL
10:31:04 <o3> oh dear
10:31:43 <Jii> are there any languages that support syntactically unicode?
10:31:57 <o3> java?
10:32:11 <o3> oh, cool, you don't get autokicked for saying java :)
10:32:28 <Marvin--> andersca was talking about creating one, I don't know if he was serious :-)
10:32:31 <o3> laugh
10:32:33 <o3> -   maybe_errmsg <- withCString modulePath $ \dll -> c_addDLL dll
10:32:33 <o3> +   maybe_errmsg <- withCString modulePath c_addDLL
10:32:38 <o3> *kicks self*
10:32:46 <o3> thanks for that fix marvin ;)
10:33:04 <Marvin--> actually, I looked in the ghci source, you've copied it straight from there ;)
10:33:15 <o3> oh
10:33:21 <o3> so it's not my fault.  it's all good, then
10:33:23 <Marvin--> but I just thought it looked very silly
10:33:26 <o3> *whistles*
10:33:44 <shapr> jii: Haskell claims to support unicode sources, but I don't think any implementations fully support that
10:33:56 <o3> yeah, it's that crappy marlow guy's fault
10:33:58 <shapr> ghc claims to partially support unicode source
10:34:04 <Marvin--> ooh, imagine the kind of operators we could create
10:34:12 <shapr> we could rewrite APL!
10:34:16 <Marvin--> yay!
10:34:19 <o3> or perl
10:34:23 <shapr> ow
10:34:33 <shapr> I could use tengwar operators
10:34:35 <Marvin--> "APL as an embedded language of Haskell"
10:34:41 * shapr laughs
10:34:48 <shapr> now that's a masters thesis waiting to happen
10:34:53 <o3> don't tempt me
10:35:03 <Marvin--> shapr: don't tell Koen or he'll have me do it ;)
10:35:11 * shapr snickers
10:35:30 <Jii> http://www.bluetail.com/~luke/misc/lambda.jpg
10:35:39 <shapr> Jii: yah, I've seen it :-)
10:35:44 <Marvin--> heh
10:35:44 <shapr> luke rocks
10:36:04 <o3> neat
10:36:06 <shapr> he learned some Haskell when he was in the LotY project for a bit
10:36:15 <shapr> jorge adriano has hacked up a version of that for Haskell
10:36:28 <shapr> I have it here somewhere
10:37:06 <shapr> actually, multi-line operators could be spiffy if it's the summation symbol (sigma?)
10:37:23 <Marvin--> yay, three-dimensional operators
10:37:27 <shapr> hmm
10:37:28 <Marvin--> or at least two-dimensional
10:37:30 <shapr> interesting thought
10:37:34 * shapr thinks
10:37:47 <shapr> actually, higher order operators would be neat
10:38:07 <shapr> jii: how would you use unicode in source?
10:38:19 <shapr> most languages don't let you freely define operators like Haskell does
10:38:30 <shapr> unicode sources could make for a terrifying plethora of ops
10:39:06 <shapr> the international phonetic alphabet is in unicode... spoken Haskell would be cool
10:40:14 <Jii> there are so many weird characters in unicode
10:40:18 <shapr> yah, truly
10:40:52 <shapr> I think programming languages are kind of confused, they don't really go left to right
10:41:11 <shapr> if you look at x = op1 3 op2 4
10:41:38 <shapr> it's actually left to right after the equals, and then right to left once the right hand side is solved
10:42:16 <shapr> hm, Okasaki's recent papers are related to that actually....
10:42:20 <o3> i disagree, the important part is what variable is being assigned to
10:42:36 <o3> and it should therefore appear first
10:42:36 <shapr> isn't that kind of like the direct object though?
10:43:06 <shapr> in spoken english the ingredients are first (subject) the operations next (verbs) and the result last (direct object)
10:43:35 <Jii> stupid unicode.org doesn't talk to me
10:43:40 <shapr> in german, it's often subject, direct object, verb
10:43:52 <shapr> in finnish, you have partial application, so it's just confusing.
10:44:11 <Heffalump> finnish has currying?
10:44:11 <o3> it depends if you say "assign op1 3 op2 4 to x" or "x becomes op1 3 op2 4", doesn't it?
10:44:45 <o3> i'd argue that x is the subject of that
10:44:45 * shapr thinks of what exactly currying is
10:44:59 <shapr> jii: would you say finnish has partial application?
10:45:07 <o3> Heffalump: i'm trying to think of how that would make sense in a spoken language :)
10:45:09 <shapr> it's an agglutinative language
10:45:28 <shapr> my sauna == "minun sauna" or "saunani"
10:45:54 <shapr> at the sauna == "saunassa"
10:46:09 <shapr> maybe that's just function concatenation....
10:46:18 <o3> i don't think that's currying, though
10:46:19 <shapr> or deforestation? ;-)
10:46:25 <Jii> http://www.cs.tut.fi/~jkorpela/Finnish.html :)
10:47:10 <shapr> yah, I think it's deforestation.. joining two functions into one...
10:47:15 * shapr still isn't quite sure.
10:47:40 <Heffalump> partial application is currying
10:47:50 <shapr> finnish is the niftiest spoken language, imho
10:48:04 <shapr> well, of the ones I've learned a bit about.
10:48:24 <shapr> actually, they're all really cool...
10:48:34 <shapr> "graag gedann"
10:49:00 <o3> all i remember of finland is (a) american accents, (b) oh my god, the clubbing and drinking, and (c) written text that looks like "yyyyy"
10:49:14 <shapr> hah
10:49:21 <shapr> american accents? where?
10:49:44 <o3> oh, and (d) unique sense of humour
10:50:00 <o3> all the finnish people i know who speak english do so with a fairly american accent
10:50:18 <shapr> yah, finns have a truly unique ... everything.
10:50:33 * shapr really likes this country
10:51:24 <Jii> and moving into the greatest enemy of finland, sweden! ;-)
10:51:27 <shapr> heh
10:51:46 <shapr> Boden/Lulea has finnish courses... I want to learn this language.
10:51:50 <Jii> it's funny country too, though
10:52:34 <o3> the drinking and clubbing.  hoo man, that was fun
10:52:40 <shapr> what I see as the greatest "hidden truth" of finland is that it's nearly as competitive as Japan in the hitech culture.
10:52:59 <shapr> the pressure to succeed technologically is massive.
10:59:25 <Marvin--> bah, northern Sweden is almost Finland anyway *grin*
10:59:39 <shapr> yah, lots of similarities
10:59:51 <shapr> southern swedish sounds really bouncy to me, northern swedish is more flat like finnish
11:06:05 <o3> rightio, 4am.  night!
11:06:11 <shapr> g'night andre!
11:12:57 * shapr bounces
11:13:14 * shapr is tempted to play counterstrike rather than play with code
11:20:32 <shapr> hey, I was thinking about the Yampa soccer demo
11:23:12 <shapr> seems to me that could be a neat way to make mobile agents
11:24:55 <Marvin--> "Before you criticize someone you should walka mile in their shoes. That way you're a mile away and have their shoes."
11:24:56 <Marvin--> hahaha
12:09:04 <Marvin--> any LyX users here who can tell me how to use haskell.sty with LyX?
12:10:56 <Igloo> You can edit the preamble via a menu
12:12:29 <Marvin--> oh
12:14:21 * Igloo would guess you just want a \usepackage{haskell.sty} in there, but can't remember how haskell.sty works
13:01:13 <nde> I just started to play with gtk2hs. Does anybody know a small example programm to begin with? ( Googled with no success... )
13:02:10 <Igloo> it comes with some examples
13:02:21 <Igloo> Actually, it's possibly only gtk+hs that does
13:03:42 <nde> there is only one small "one dialog" example. Really not much. I have seen the examples from gtk+hs. But it would be nice to have something working to play with.
13:04:31 <sethk> I know what gtk+hs is.  What is gtk2hs?
13:04:44 <Heffalump> gtk+hs for GTK 2
13:05:35 <nde> I just found 3 more examples in the gtk2hs CVS repository. I'll try them.
13:05:44 <sethk> Oh, right.  I think I just dropped it into my gtk+hs directory.
13:06:41 <sethk> nde:  Those might be th ih examples.
13:06:46 <sethk> s/th/the/
13:08:10 <nde> I hope they work with the non-CVS version of the libs. BTW: does anybody know of a debian package for gtk2hs? If not, i might try one sometime.
13:15:00 <Clase> hi
13:15:02 <Clase> i have a little doubt
13:15:29 <dark> Do you mean "question"?
13:15:37 <Clase> yes :)
13:15:54 <Clase> i need use a function eith a file
13:16:00 <Clase> i need use a function with a file
13:16:04 <dark> Lots of people seem to say "doubt" for "question", and I have been wondering if it might be a single bad dictionary that's widely used :)  Where did you get the word "doubt"?
13:16:22 <Clase> i am spanish my english is a bit poor
13:17:04 <Heffalump> dark: it's more likely to be a word in Spanish that can mean both
13:17:19 <dark> Heffalump: I've seen people from various countries do it, though :)
13:17:32 <Clase> no, in spanish doubt and question are different words
13:17:53 <Clase> however both can be used in a talk
13:18:18 <Clase> teh people understand both well
13:18:58 <Heffalump> well, it wouldn't be a single bad dictionary, then :-)
13:19:10 <dark> Anyway, I didn't mean to distract you from your question, I was just curious of where it comes from :)  (I used to get mildly offended when people mail me with doubts about my program...)
13:19:12 <Clase> maybe yes :)
13:20:02 <Clase> ok, i too do it with spanish peole
13:20:05 <Clase> xD
13:20:07 <Clase> well 
13:20:13 <Clase> my question
13:20:23 <Heffalump> dark: lol
13:20:32 <Clase> i must use a function with a file
13:20:44 <Clase> i must read all the files and apply a function over each one
13:20:52 <Clase> i must read all the lines of the file and apply a function over each one
13:20:58 <Heffalump> Is this your homework, btw?
13:21:21 <Clase> btw?
13:21:26 <ski_> by the way
13:21:45 <Clase> yes, something so :)
13:22:08 <Heffalump> ok
13:22:11 <Clase> i mst do it for finish it
13:22:21 <Marvin--> nde: I've been fiddling with making a debian package for it, but I haven't had time to work on it for a while
13:22:22 <Clase> teh fucntion header is
13:22:35 <Clase> runIt :: [Char] -> [Char]
13:23:09 <Clase> i have been tryng
13:23:12 <Clase> main = do
13:23:19 <Clase>    putStr "Entry file"
13:23:27 <Clase>    fentrada <- getLine
13:23:51 <Clase>       cad <- readFile fentrada
13:24:08 <Clase> writeFile fsalida (map runIt cad)
13:24:14 <Clase> sorry
13:24:27 <Clase>     putStr fsalida (map runIt cad)
13:24:34 <Clase>     putStr (map runIt cad)
13:24:39 <Heffalump> is that the indentation you actually have?
13:24:42 <Clase> sthg so
13:24:45 <Clase> no
13:24:53 <Clase> i have main=do at left
13:25:07 <Clase> and the rest 3 blanks at the left
13:25:13 <Clase> right
13:25:42 <Clase> the indent is no problem, but paste a code at IRC is a bit complex :)
13:26:04 <ski_> so you want to call runIt for each line in the file ?
13:26:13 <Clase> yes
13:26:35 <dark> Pasting into IRC is no problem in my superior environment :)  (bitchx, gpm, linux console)
13:26:41 <ski_> readFile gives you a string back (the whole file)
13:27:00 <ski_> you are trying to map runIt over each character in the file-string
13:27:08 <Clase> yes i hace read that, but i have not found a function that reads only a file
13:27:18 <Clase> only a line
13:27:33 <Clase> i am at windows, so paste is a problem
13:27:50 <ski_> lines :: String -> [String]  ?
13:28:16 <Clase> is that a function at prelude.hs?
13:28:20 <ski_> yes
13:28:27 <Heffalump> BitchX is not superior to anything :-)
13:28:50 <ski_> it finds the line splits in a string and splits that string into one string per line IIRC
13:29:15 <Clase> so i must write, lines fsalida (map runIt cad)
13:29:42 <ski_> umm, rather  map runIt (lines cad)  or something, i gather ..
13:29:43 <Heffalump> no, you want to apply lines to cad
13:29:49 <ski_> yes
13:30:04 <ski_> first you want to get all lines of the file
13:30:14 <ski_> then you want to call runIt on each line
13:30:26 <Clase> hmm
13:31:03 <Clase> so i must do a writefile and then a "do" with lines
13:32:10 <ski_> what is your fsalida ?  a filename of the file you want the result in ?
13:32:25 <Clase> yes
13:32:28 <ski_> ok
13:32:36 <Clase> fsalida -> fout
13:32:42 <Clase> salida is a spanish word
13:33:00 <ski_> so then you probably want to do the writeFile lastly
13:33:01 <ski_> ok
13:33:26 <Clase> really i do not need teh wrte file
13:33:36 <ski_> Clase : so i gather entrada is "in", eh ?
13:33:45 <Clase> because the function over each line sys me correct or incorrect
13:33:57 <Clase> yes in=entrada
13:33:58 <Clase> xD
13:34:10 <ski_> ok, but cad here is a string containing your file, ok
13:34:38 <ski_> so 
13:34:40 <Clase> so when the functions applys on each line it has a variable result with the word correct or incorrect
13:34:41 <ski_> lines cad
13:34:53 <Clase> so when the functions applys on each line it has a variable result with the word "correct" or "incorrect"
13:34:59 <ski_> um ?
13:35:37 <Clase> and i must execute the function over each line and the fucntion "runIt" says me "correct" or "incorrect" 
13:35:49 <Clase> correct and incorrect are stored in two vars
13:36:18 <dark> So you will end up writing a file with lines that say "correct" and "incorrect"?
13:36:34 <Clase> yes
13:36:38 <ski_> aha
13:36:53 <Clase> so i must read at teh console too
13:37:11 <ski_> well, "lines cad" is a list of all lines in your file then. isn't it so ?
13:37:15 <Clase> write it in a file it seems to me not necesary
13:37:21 <Clase> yes
13:37:38 <dark> Hmm, I need a kind of reverse map here: I have a list of functions and I want to apply them all to the same argument.  Is there a convenient notation for that?
13:37:49 <dark> (I want to end up with a list of results)
13:38:00 <Heffalump> dark: map (flip ($)) ?
13:38:12 <ski_> dark : map ($ x) fs
13:38:18 <Heffalump> oh, yes, sorry
13:38:35 <dark> Heh, cool :)  I hadn't thought of using $ that way, I tend to see it as syntax.
13:38:44 <dark> What's wrong with the flip version?
13:40:33 <Heffalump> it's wrong
13:40:39 <Heffalump> Prelude> :t map (flip ($))
13:40:39 <Heffalump> forall b a. [a] -> [(a -> b) -> b]
13:40:41 <ski_> the flip version doesn't seem to solve the same problem
13:40:45 <ski_> yes
13:40:56 <dark> I see, the argument is missing :)
13:40:59 <Heffalump> indeed :-)
13:42:18 <ski_> so the flip version maps each element into a function accepting a continuation which gets the element .. :)
13:42:45 <ski_> if i'm not mistaken by the type
13:42:48 <nde> dark: map (.) ?
13:43:11 <ski_> nde : map (.) :: [a -> b] -> [(c -> a) -> c -> b] 
13:43:27 <nde> sorry, was thinking about foldr.
13:43:56 <nde> :t foldr (.) id      forall a. [a -> a] -> a -> a
13:44:56 <ski_> i call that 'compose'
13:47:04 <ski_> also defineable as  flip (foldr ($))
13:50:11 <dark> This is all perverse.
13:50:27 <Heffalump> why? :-)
13:55:50 <ski_> ok, gotta go
13:56:19 <dark> When I was young, we applied functions to arguments, and that was that!
13:56:56 <Clase> hm...
13:56:57 <Heffalump> ;-)
13:56:59 <Heffalump> s/;/:/
13:57:09 <Clase> i'll wait
13:59:16 <Clase> hmm
13:59:18 <Clase> dark_
13:59:23 <Clase> 4[dark4] 1
14:02:30 <Clase> how mus i use the lines function
14:05:30 <dark> The lines function?  It's pretty simple: you give it a string, and it returns a list of strings.  You are aware that String is the same as [Char]?  So a list of strings is [String], same as [[Char]].
14:06:52 <Clase> so..
14:07:00 <Clase> cad <-readFile fin
14:07:18 <Clase> cad <- lines cad
14:07:23 <Clase> no?
14:08:17 <dark> No, because lines is not an IO action.
14:08:27 <Clase> aps
14:09:30 <Clase> :-$
14:09:44 <dark> Do you know how the "do" notation is converted to an expression?  Using >> and >>=?
14:10:55 <Clase> yes so i can concatenate functions
14:12:04 <Clase> cad <- readFile fin
14:12:49 <Clase> now i have n cad var all the file no?
14:12:49 <Clase> now i have in cad var all the file no?
14:12:57 <dark> Yes.
14:13:26 <Clase> so now i must aply the "lines" function over the cad var no?
14:15:39 <dark> Yes, but Haskell isn't step-by-step like that.  If you want to do something with the result of (lines cad), then you can just write (lines cad) where you need it.  If you want to give a name to the result of (lines cad), then you can use a "let" or "where" expression to do that.
14:16:29 <Clase> runIt (lines cad)  ?
14:16:48 <dark> What is the type of runIt?
14:17:05 <Clase> runIt :: [Char] -> [Char]
14:17:50 <dark> But (lines cad) is [[Char]].
14:18:57 <Clase> then i must convert lines cad into [Char]
14:21:25 <dark> Hmm... runIt expects to get a single line, right?
14:21:40 <Clase> yes
14:22:27 <Clase> i think that it is problem
14:22:46 <dark> Well, (lines cad) is a list of lines.
14:23:51 <dark> So you have a list of the kind of thing that runIt expects.
14:24:17 <Clase> if i could extract line by line and pas it to runIt it will be solved
14:26:27 <dark> In Haskell, you usually describe what you want instead of saying how to do it.  There is a standard way to say "I want the results of applying this function to this list of arguments".  Did they teach you that?
14:27:22 <Clase> yes i think that's in my notes
14:29:58 <Clase> map no?
14:30:42 <dark> Yes :)  How would you use it here?
14:31:08 <Clase> runIt (map lines cad)
14:33:21 <dark> No, that's not right.  It would run "lines" on each element of "cad".  But elements of cad are Char, and lines wants [Char].  So the types aren't right.
14:35:05 <sethk> map runIt (lines cad)
14:36:24 <Clase> hmm
14:36:38 <Clase> but i can not put that in main
14:36:50 <Clase> because it says me that is not an IO funciotn
14:37:14 <sethk> That means the type of main() is wrong.  There are a couple of ways around this...
14:37:26 <sethk> First, if you are using ghci, you can get away without defining main at all.
14:37:38 <sethk> Otherwise, you can do something like:
14:37:45 <sethk> return (map runIt (lines cad))
14:37:54 <sethk> But the types aren't right yet.
14:38:08 <sethk> lines actually does, I believe, [Char] -> [[Char]]
14:38:28 <sethk> That is, it takes one big string and turns it into a list of strings, each member of the list being a line
14:38:52 <sethk> What does runIt do?  (I connected in the middle of this conversation)
14:39:20 <Clase> runIt is a funciton that reads a line wich is composed of digits and numbers
14:39:43 <sethk> And does what to the line?
14:40:01 <Clase> then runIt makes an operattions on it and says if the operations over the line are correct or incorrect
14:40:11 <Clase> only one line is correct and the rest are incorrect
14:40:37 <sethk> OK.  What does runIt return?
14:40:56 <Clase> do you want the runIt header?
14:41:05 <Clase> runIt :: [Char] -> [Char]
14:41:16 <sethk> OK, it takes a string and returns a string.
14:41:46 <sethk> So, the list to use with map is a list of strings, which is what (lines xxxx) gives you.
14:41:56 <sethk> So, you might do something like:
14:42:53 <sethk> map putStrLn ( (map runIt (lines cad) ) )
14:43:18 <sethk> No, wait....
14:43:54 <sethk> map runIt (lines cad)
14:43:55 <sethk> is OK
14:44:26 <sethk> What do you need to do with each string that runIt produces?
14:44:56 <Clase> the mechanism is
14:45:21 <Clase> i must take a line
14:45:41 <Clase> runIt executes with the line as argument
14:45:51 <Clase> and runIt says if the line is correct or incorrect
14:46:05 <Clase> runIt has more internla operations inside
14:46:19 <sethk> Then runIt should probably return true or false
14:46:40 <sethk> Or, return a string or an empty string (empty meaning incorrect)
14:46:44 <Clase> i only konw that store the result in a var that contains the words "Success" or "Fail"
14:47:28 <sethk> OK, so that is a string.  Do you need at the end a list of strings, such as, ["success", "success", "fail", .... ]
14:47:57 <Clase> yes
14:48:00 <Clase> !
14:48:44 <sethk> OK.  So, you know how to get your input line list    (lines cad)
14:49:09 <sethk> Here is how I would probably do this (which isn't the only way):
14:49:43 <Clase> yes i enter it with a readFil efunction
14:49:43 <sethk> runItOnList :: [Char] -> [Char]
14:50:00 <Clase> i have probed your idea return (map runIt(lines cad))
14:50:04 <Clase> and it executes
14:50:08 <Clase> and i can see this
14:50:23 <Clase> ["","Failed","","","","","","Failed","","","","","","","","","","Failed","","Fai
14:50:24 <Clase> led","Failed","","Failed",
14:50:32 <Clase> .....
14:50:33 <Clase> "Failed","","Failed","","","","","","","Failed","","","","Failed","","
14:50:33 <Clase> ","","",""]  
14:51:04 <sethk> Then it appears that runIt returns either "Failed" or ""
14:51:13 <Clase> yes that seems
14:51:19 <Clase> but i can not see success
14:51:29 <Clase> and teorically only one line of the file os correct
14:51:32 <Clase> it is so strange
14:52:21 <sethk> Then runIt is probably not doing exactly what you think it is.  Is runIt a long function or can you send it?
14:52:28 <Clase> may be can be another error in the rest of teh code
14:52:39 <Clase> yes i can send you
14:53:04 <sethk> OK, let's see what it does...
14:53:08 <Clase> it is about 2KB
14:53:21 <Clase> there are two versions
14:53:33 <Clase> the first that has errors
14:53:44 <Clase> and the second reapir by me
14:54:00 <sethk> OK, can you email them to me?  Or use DCC to send them?
14:54:15 <Clase> what you prfer
14:54:35 <sethk> Try DCC.
14:54:44 <Clase> ok
14:55:43 <Clase> i already hace send it
14:56:37 <Clase> can't you receive it?
14:57:30 <Clase> the dcc seems not work
14:58:10 <sethk> I think I have one...
14:58:21 <Clase> fire?
14:58:27 <Clase> ok now yes
14:58:39 <Clase> have you receive now ?
14:58:53 <sethk> Clase:  One, let me see if I can get the second.
14:59:01 <Clase> ok 
14:59:10 <Clase> that's all
14:59:12 <sethk> Clase:  One 1267 bytes, the other 711 bytes?
14:59:28 <dark> Somehow I've never seen dcc go smoothly :)
14:59:33 <sethk> Clase:  No, the second 1422 bytes?
14:59:39 <Clase> second 1422
14:59:54 <Clase> first 1267
15:00:20 <Clase> now?
15:00:53 <sethk> Clase:  Which one has the error, first.hs or second.hs?
15:01:09 <Clase> first is incorrect
15:01:17 <Clase> i must correct it
15:01:18 <sethk> OK
15:01:36 <Clase> and my corrections are at the sencond file
15:01:44 <Clase> maybe my corrections are bad
15:02:32 <sethk> Look at function "result".  The second case doesn't look right.
15:03:46 <Clase> result ((x,xs):ys) = x?
15:04:02 <sethk> Now, one thing you can say, the second line of result is what you expect to return "success", and it isn't returning "success", it is returning ""
15:04:20 <sethk> The first line is returning "Failed" because we see it in the output list.
15:04:28 <Clase> yes
15:04:30 <Clase> all right
15:04:38 <sethk> So, x does not equal "Success"
15:04:43 <Clase> yes
15:05:14 <sethk> There is a library function called trace, which you can use to see the values of x, xs, and ys
15:05:27 <Clase> but the word succes makes it joining the words "Suc" "ss" "ce"
15:05:45 <sethk> Except that it isn't  :)
15:06:02 <Clase> that are in code2 code3 and code4  code5 functions
15:06:23 <Clase> code3 code4 and code5
15:07:15 <dark> Sounds like you need better function names, by the way :)
15:07:24 <sethk> Something doesn't contain what you think it does, so you need to look at these values.
15:07:31 <Clase> yes that too
15:07:43 <sethk> so try:
15:08:31 <sethk> result ((x,xs):ys) = trace (putStrLn ("x="++x++", xs="++(show xs)++", ys="++(show ys)) x
15:08:38 <Clase> wow
15:08:40 <Clase> xD
15:09:28 <sethk> you'll need also "import Debug.Trace"
15:11:05 <Clase> i have'nt that library
15:11:29 <Clase> ERROR "Debug.Trace" - Unable to open file "Debug.Trace"      
15:11:37 <sethk> Clase:  I made a mistake, you don't use putStrLn, it is implied by trace.  You do have it, it is part of the standard distribution
15:11:48 <sethk> hang on, let me check where it is...
15:12:27 <sethk> you need a -package flag.
15:12:36 <Clase> i think that i must find it
15:12:45 <Clase> yes but i have haskell98 for windows
15:13:06 <Clase> i supouse that i must search it
15:13:18 <Clase> well, i will search it and i will return
15:14:11 <Clase> now i must go to sleep at spain are 0:10 
15:14:12 <Clase> xD
15:14:37 <Clase> i will return as soon as i posible
15:14:43 <Clase> thx a lot for all
15:14:46 <Clase> bye
18:06:53 <dark> Tried to go to bed, then found a solutoin to a coding problem.  Now I can't sleep :)
18:07:30 <andersca> dark: been there, done that :)
18:07:53 <dark> Yeah but I'm not awake enough to do proper coding :)
18:10:36 <dark> I spend ten minutes staring at a task that I've already solved in a previous function.
18:17:27 <dark> Gah, I hate having to repeat ten lines of code.  But most of it involves status messages, which have to be subtly different.
18:26:23 <dark> Does anyone here have experience with internationalizing a Haskell program?
23:10:28 <Verbophobe> Mornin'.
23:22:02 <Chilli> WA: Can you tell Pat that TimL is aroudn again?
23:22:09 <Chilli> oops
23:22:14 <Chilli> wrong channel
23:42:02 * Heffalump gets up
