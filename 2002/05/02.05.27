05:20:20 <exa> hi
05:20:25 <exa> I was writing some code and got confused a bit
05:20:38 <exa> How do I declare the type of a function that takes no arguments?
05:21:00 <exa> like emptyX = ......
05:21:14 <Heffalump> depends if you want emptyX to be a value or a function
05:21:16 <Igloo> exmptyX :: whatever the type of the RHS is
05:21:20 <Heffalump> but if your declaration is emptyX = foo
05:21:25 <Heffalump> then what Igloo said
05:21:36 <Heffalump> if you *really* want a function then emptyX () = foo and emptyX :: () -> ...
05:22:13 <Igloo> What would you gain from that, apart from unsafe* possibly behavning differently?
05:22:22 <Heffalump> having a function?
05:22:31 <Heffalump> space usage
05:23:22 <exa> ah, okay
05:23:32 <Igloo> Hmmm
05:23:33 <exa> I tried () -> but then forgot to make it a real function
05:23:50 <exa> haskell errors can get confusing :P
05:24:58 <exa> anybody familiar with IOExts
05:25:21 <exa> I need to read a list of 11 CLLong's from a handle. How to do that best?
05:25:38 <exa> I thought using MarshallArray, but couldn't get it right
05:25:57 <exa> MarshalArray even
05:37:33 <exa> okay, anybody used newArray? how do I specify an array of CLLong's using that? It's kind of strange interface
05:43:14 <exa> c'mon no GHC gurus around?
06:22:21 <jewel> not right now apparently
06:22:31 <exa> heh :)
06:22:41 <exa> I need somebody from microsoft ;)
06:28:28 <jewel> sounds expensive
06:28:57 <exa> haha
06:29:06 <exa> at least they pay people to develop GPL'd software ;P
06:29:17 <exa> even :D
06:29:49 <exa> microsoft research rules
06:39:12 <exa> Prelude> :type MarshalUtils.new
06:39:13 <exa> forall a. (PrelStorable.Storable a) => a -> IO (PrelPtr.Ptr a)
06:39:52 <exa> Prelude> x <- MarshalUtils.new 0::CTypes.CLLong
06:39:58 <exa> any idea what I'm doing wrong?
06:40:27 <exa> shouldn't x receive IO (Ptr CLLong) ?
06:42:57 <exa> Prelude> :type (MarshalUtils.new 'c')
06:42:57 <exa> IO (PrelPtr.Ptr Char)
06:42:57 <exa> Prelude> :type (MarshalUtils.new 0)
06:42:57 <exa> forall a. (Num a, PrelStorable.Storable a) => IO (PrelPtr.Ptr a)
06:42:57 <exa> Prelude> :type (MarshalUtils.new 0::Int)
06:42:59 <exa> Couldn't match `Int' against `IO (PrelPtr.Ptr a)'
06:43:00 <exa>     Expected type: Int
06:43:02 <exa>     Inferred type: IO (PrelPtr.Ptr a)
06:45:12 <Igloo> Try x <- MarshalUtils.new (0::CTypes.CLLong)
06:47:34 <exa> Igloo: thanks
06:47:41 <exa> I hadn't used haskell for a while :)
08:51:37 <jewel> they do?
08:51:49 <jewel> MS pay people to develop GPL'ed software?
08:52:05 <Heffalump> GHC is BSD-licensed, isn't it?
08:52:15 <Heffalump> I don't think MS release anything GPLed.
08:53:47 <Igloo> I'd be surprised as I their lawyers would have a heart attack if anyone gave a patch for anything GPLed
09:04:36 <jewel> Yeah me too
13:44:23 <exa> hi
13:45:54 <exa>  It took me a day to read a binary database heh. Just two pages of code :)
13:46:03 <exa> Haskell can punch in your face when properly tuned ;)
13:56:19 <|Fo|Ns> hi
13:56:35 <exa> hi |Fo|Ns
13:56:41 <exa> weird nick ;)
14:02:20 <|Fo|Ns> y exa?
14:02:26 <exa> heh ;)
14:09:12 <exa> |Fo|Ns: This is eray, a phd student from cs dept., bilkent university, ankara turkey
14:09:37 <|Fo|Ns> Im, from madrid
14:09:44 <|Fo|Ns> spain
14:09:55 <|Fo|Ns> whats the time there?
14:10:04 <exa> 12:11 am
15:29:37 <|Fo|Ns> bye
