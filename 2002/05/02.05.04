04:48:04 * shapr blinks
04:48:11 <Heffalump> 'lo
04:49:05 <shapr> hi Heffalump, what's up?
04:49:27 <shapr> I just met Chris Ball on #emacs
04:50:25 <Heffalump> heh
04:56:16 <Igloo> Hmmm, heapsort isn't stable and mergesort has stack space problems. I should read a Haskell datastructures and algorithms book at some point and see how they do sorting.
04:56:38 <shapr> Heffalump: why did he say you're scary? :-)
04:59:06 <Heffalump> search me :-)
04:59:09 <Heffalump> I've only met him once
04:59:15 <shapr> you must have impressed him.
04:59:16 <Heffalump> igloo: quicksort?
04:59:29 <Igloo> I suppose I could zip the input with [1..]
04:59:35 <Igloo> But that's not n log n
04:59:45 <Heffalump> igloo: and it's not a sorting algorithm..
05:00:04 <Igloo> What isn't?
05:00:12 <Heffalump> zipping the input with [1..]
05:00:21 <Logan> Quicksort isn't stable.
05:00:37 <Igloo> I mean zip it with [1..] and then use heap sort so the stability worked out
05:00:50 <Igloo> GHC has a slightly modified variant which is
05:01:07 <Igloo> (The n log n comment was talking about quicksort, not zip)
05:01:16 <clausen> Heffalump: zipping input gives you stability
05:01:33 * Igloo just said that  :-)
05:01:44 <Logan> Sounds like a plan.
05:02:01 <Logan> Is their an actual quick quicksort implementation for Haskell?
05:02:40 <clausen> haskell is bad for "in-place" changes
05:02:51 <Igloo> quicksort isn't an overly well defined algorithm
05:02:58 <clausen> it's better for incremental changes
05:02:59 <Logan> Sure it is.
05:03:06 <clausen> (like tree operations)
05:03:18 <Logan> I suppose their are multiple ways to do the partitioning at each step.
05:03:20 <clausen> Logan: well, if you want to use Monads, etc.
05:03:25 <clausen> but, if you want "purity", hehe
05:03:26 <Logan> I like monads. :P
05:03:28 <Igloo> There are lots of slight variants which all tend to be called quicksort
05:03:47 <Logan> There are a lot of parameters to quicksort.
05:03:52 <Logan> The algorithm is essentially the same.
05:04:03 <Logan> Heapsort is my favorite sort algorithm. :P
05:04:19 * clausen likes mergesort
05:04:19 <Igloo> Some have a range of equal elements in the middle, for example, while others have them on one side and still others alternate which side they go on
05:04:57 <Logan> I think of mergesort as a meta-sort.
05:04:57 <clausen> there is a better approach:
05:05:14 <clausen> (a "best" quicksort implementation)
05:05:16 <clausen> where you partition
05:05:21 <clausen> ooops
05:05:24 * clausen getting confused
05:05:26 <clausen> forget that
12:12:11 <shapr> is there a haskell cookbook?
12:12:42 <shapr> some kind of task-directed documentation?
12:22:09 <Logan> shapr: You wish.
12:27:08 <shapr> heh
12:27:09 <shapr> yes I do.
12:27:17 <shapr> that would make my life much easier.
12:27:22 <shapr> I've tried to 'go native' with Haskell
12:27:31 <shapr> but I ended up snapping back to Python for daily tasks.
12:27:47 <shapr> maybe I should have been dumping questions to c.l.f at a furious rate.
12:43:57 <Logan> Heh, I'm writing PHP at the moment. :P
13:09:43 <shapr> ouch
16:13:28 <shapr> Chuck Moore on #forth, taking questions..
16:13:32 <shapr> interesting guy
