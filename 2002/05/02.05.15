07:58:58 <Jii> hello
08:01:08 <ski> Hello Jii
08:03:44 <ski> You wanted anything ? Any question ?
08:06:34 <Jii> heh, not yet
08:06:49 <Jii> just remember what was stopping me going haskelling
08:06:50 <ski> ok
08:06:59 <Jii> s/remember/remembered/
08:08:15 <ski> which was ?
08:08:19 <Jii> .. it's that the hugs binary on our departments linux machine wants to use libreadline.so.2 :)
08:08:27 <Jii> readline is evil
08:08:34 <ski> it is ?
08:09:30 <ski> don't you like history features and so on in hugs ?
08:10:22 <Jii> yes i do but libreadline had some weird license issues
08:11:06 <ski> hmm. i don't know about that. is it GPL:ed ?
08:13:25 <Jii> it's just that i've just found this for python interactive interpreter stuff: http://starship.python.net/crew/mwh/hacks/pyrepl.html 
08:15:11 <Jii> (don't take this all too seriously, i'm always half-joking btw ;)
08:15:15 <ski> oh, you miss line-continuations ??
08:15:31 <Jii> and tab-completion
08:15:46 <ski> (no prob, that is often the case w/ me also)
08:16:17 <Jii> ok :)
08:17:04 <ski> An ideal multi-line readline should of course admit alterations of previousvy entered lines
08:17:52 <ski> But do you want to have syntax-based detection of end of input
08:18:26 <ski> or do you want to have separate keys for "add new line" and "send all lines"
08:19:28 <Jii> don't get me wrong, i'll happily live with readline (that annoying dependency just reminded me that i don't like readline too much) :)
08:20:09 <ski> i was just trying to think up possible improvement directions .. :)
08:21:02 <Jii> well as a matter of fact i've not used haskell, i've read some papers on it and heard one short introduction talk about it
08:21:16 <Jii> so i'm not yet sure what i would want from it ;)
08:21:32 <ski> well, um
08:21:55 <ski> i use haskell for many small ideas and projects, etc
08:22:21 <ski> (haskell is currently my favourite functional language)
08:22:44 <Jii> i just decided that i'll have to give it try some day (well, shapr reminds me of it on #python from time to time) :)
08:23:15 <Jii> and alex martelli on comp.lang.python
08:23:21 <ski> do you know any functional language ?
08:23:23 <ski> :)
08:24:34 <Jii> i've skimmed through SICP and been generally interested in them, but i haven't done anything serious with functional languages, no :)
08:24:55 <ski> i.e. will learning haskell be yet another possible interesting functional language or haven't you yet grasped the paradigm (it's real nice :)
08:25:01 <ski> ok
08:26:39 <ski> So i guess shapr has already told you some about the similarities and differences of haskell respectively python ..
08:27:17 <Jii> well we haven't discussed about haskell per se, he just keeps mentioning haskell from time to time
08:27:36 <ski> ok
08:28:19 <Jii> but if get to do something i'm going to reflect it to python for sure :)
08:28:51 <ski> reflect ?  (do you mean rewrite/reimplement it in python ? :)
08:29:49 <Jii> no more like having it as a reference point or something :)
08:30:51 <ski> aha, to compare like : this feature in haskell is like this feture in python, but this feature in haskell isn't exactly like this feature in python, etc ..
08:31:46 <Jii> yeah, and in a bigger picture too
08:32:09 <Jii> i'm intrested in how a programming language affects software development (in small scale, mostly)
08:32:26 <ski> like comparing more abstract concepts and structuring tools ?
08:32:40 <Jii> yup
08:32:44 <ski> ok
08:33:13 <ski> like what styles of programming does this or that encourage and discourage
08:35:20 <Jii> yep all that sort of stuff
08:35:37 <Jii> okay now it segfaults, maybe i should try to make a local install
08:35:47 <ski> hugs ?
08:35:55 <ski> pyrepl ?
08:36:05 <Jii> hugs
08:37:38 <ski> you know how to use (at least simple) higher-order functions in python ?  (for-each,reduce or what it's called) ?
08:38:01 <ski> s/it's/they're/
08:38:37 <ski> or is higher-order functions also (mostly) new for you ?
08:39:47 <Jii> map/reduce/filter
08:39:50 <Jii> i've used them
08:39:59 <ski> ok, good.
08:41:25 <ski> so you first want to get a feel for the syntax and learn how to handle and use the type-system and then begin experiment with more advanced problems/topics .. ?
08:42:33 <Jii> yeah, but i first want to get it installed somewhere :)
08:42:43 <ski> of course ;)
08:43:56 <ski> IIRC it shouldn't be so hard to install, at least locally. (but perhaps you want to mess with it's readline also ..)
08:45:03 <Jii> yep, i don't expect it to be too difficult :)
08:46:43 <ski> when i use hugs, i mostly type much in a file, save, load in hugs, test some small things,more typing in editor, save,reload,test,etc  ..
08:50:22 <ski> so i don't implement anything in hugs, not even small test. actually one can't top-level define anything in hugs (but in ghci (and hbi) one can)
08:51:56 <ski> (though one can define small test functions in local let definitions)
08:54:05 <Jii> maybe i'll start with reading the gentle introduction
08:55:31 <ski> Beware though, some people think it's not so gentle. :(
08:56:31 <ski> Though you can of course try (I didn't read that when i was a haskell newbie, so i don't know what i would have though of it then)
08:58:07 <ski> Don't forget to ask questions (e.g. here) when you want more info/elaboration/whatever on something :D
08:59:13 <Jii> yeah, don't worry, i'll ask :)
10:58:04 <Jii> (i've got the interpreter running long ago ;)
11:13:13 <ski> Hmm, ok. i was occupied with reading news now, and now i'm going home so bye for now ..
12:27:32 <shapr> hi gene9
12:28:49 <gene9> shapr: hi
12:29:03 <shapr> learned anything cool lately?
12:30:31 <gene9> oh no =) too busy to learn =)
12:30:41 <shapr> heh
12:33:31 <Jii> shapr, i downloaded and installed hugs few hours ago, btw :)
12:33:46 <shapr> Jii: awesome!
12:34:10 <shapr> Jii: for a course? or learning Haskell for fun?
12:34:46 <Jii> for fun, mainly
12:34:58 <shapr> nifty
12:35:03 <shapr> it's a fun language...
12:36:38 <Jii> i sense certain dirtyness in both lisp and scheme (maybe not technology-wise) and i'm not going ML way right now, and i've decided to give a better try on functional programming
12:36:57 <shapr> I know what you mean...
12:37:03 <shapr> Haskell has lots of purity.
12:38:04 <shapr> many people complain that it's too pure even.
12:39:55 <shapr> I like it.
12:51:53 * shapr tries to figure out what's wrong with this code...
12:52:00 <shapr> user error.. but where :-)
12:54:41 <Jii> heh
