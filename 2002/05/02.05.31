08:06:10 <Yurik> shapr: hi
08:15:10 <shapr> hi Yurik, what's up?
08:16:28 * Yurik feels himself bad
08:16:45 <Yurik> not health, though
08:19:54 <Yurik> f*cking money problems... 
08:39:13 <shapr> seems many programmers are getting poor
08:39:22 <shapr> time to learn another skill maybe
08:41:12 <Yurik> yeah
08:41:14 <Yurik> :(
08:41:29 * Yurik has over $250 (may be even $300) of active debt and no own money now :(((
08:42:14 <shapr> that sucks
08:42:39 <Yurik> and previous employer still had not returned over $600 :-(
08:42:46 <shapr> I once lived with a chick who had $65,000 of debt on her credit cards....
08:42:47 <Yurik> more than year has passed
08:43:08 <shapr> can you go sit on your previous employers doorstep till he pays you?
08:43:35 <Yurik> heh... they willn't pay anyway, i think
08:43:40 <shapr> that sucks more
08:43:52 <Yurik> they promise, promise, promise..
08:44:46 <Yurik> may be it is really a time to change profession to more profitable one
08:45:46 <shapr> I try to keep at least two skills at a payable level at once.
08:45:57 * Yurik envies shapr
08:46:20 * Yurik 's skill is programming (most developed one)
08:47:25 <Yurik> and may be writing. but for writing nobody actually pays
08:47:26 <shapr> right now my two skills are programmer and web developer
08:47:36 <shapr> which aren't very separate :(
08:47:46 <Yurik> ah. i'm both programmer and web developer, too
08:47:58 <shapr> I used to do graphic design, I'm trying to keep that skill active.
08:48:05 <Yurik> and database programmer and so on
08:48:10 <shapr> yah, that too
08:48:27 <shapr> java, python, sql, javascript, html, xml
08:48:43 * Yurik envies his father who left Ukraine and work in Norway now. it's more profitable :)
08:49:06 <shapr> I left the US and now I work in Finland :)
08:49:15 <Yurik> i'm also ocaml and that other scripting languages (like perl), bit of smalltalk and so on
08:49:38 <shapr> I'd like to know Haskell well enough to do real work with it.
08:49:50 <Yurik> heh. fp rules :)
08:50:05 <shapr> yah, it's sexy
08:50:21 * Yurik is curious why shapr left US, theoretically it's more profitable to work there
08:50:25 <Yurik> or not?
08:50:43 <shapr> yah it is
08:50:56 <shapr> I found a wonderful woman in Finland.
08:51:05 <Yurik> ah :)
08:51:23 <Heffalump> knowing Haskell well enough is easy, finding real work to be done with it is hard
08:51:26 <shapr> money is not more important than the right woman to me :)
08:51:51 <shapr> Heffalump: some of my clients don't care how the problem is solved, just that it is...
08:52:06 <shapr> and I'm the only programmer they use for those projects, so compatibility is not an issue.
08:52:23 * Yurik thinks may be he is silly that didn't continued contacting that nice girl in Paris several years ago... :-))
08:52:34 * Yurik envies shapr again
08:52:36 <shapr> heh
08:52:48 <Igloo> Having a good enough "natural" understanding of heap usage and stack size issues seems hard
08:52:52 <shapr> you can't change the past, but you make your own future.
08:52:55 <Heffalump> shapr: Haskell is not often a good solution for real-world projects, IMO
08:53:09 <shapr> Heffalump: why?
08:53:28 <Yurik> may be because it is "pure"?
08:53:31 <Yurik> .)
08:53:31 <shapr> the only issue I've heard that sounds sigificant to me is low I/O speed
08:53:44 <shapr> but that's not so important for most of my projects.
08:54:15 * Yurik is trying to use OCaml for real-world project. however, not for profit now
08:54:27 <shapr> Igloo: we have profilers :)
08:54:49 <Yurik> so may be Haskell is applicable too, in most of projects
08:54:53 <Heffalump> being forced into the IO monad for most of your code removes some of the advantage over traditional languages, it's slow, space problems are /very/ hard to debug, time problems are hard to debug
08:54:56 <Igloo> Yes, but profilers only help you find problems you think might be there
08:55:06 <shapr> hm
08:55:57 <shapr> is there another purely functional way?
08:56:01 <Igloo> I don't think I've ever actually found a problem rather than confirming its existence with a profiler, actually
08:56:39 * Yurik actually thinks that mix of functional and imperative ways sometimes rocks. 
08:56:40 <Igloo> If you're using the IO monad it's not purely functional any more  :-)
08:57:32 * Yurik thinks that IO monad aren't simple as OCaml's way to do imperative programming ;)
08:58:04 <Heffalump> igloo: you build up a purely functional IO action
08:58:11 <Heffalump> so yes, it is purely functional.
08:58:17 <Heffalump> this is why monads are good.
08:58:37 <shapr> so why are monads bad?
08:58:58 <shapr> is there something that's better than the IO monad?
08:59:04 * Igloo thinks about that
08:59:17 <Heffalump> hard to understand, having to code in a monadic style does make the code look less elegant
08:59:32 <Igloo> Can you expand on "purely functional IO action"?
08:59:55 <Heffalump> sorry, I should have said "build up an IO action in a purely functional way"
09:01:05 <Igloo> Yes, OK, but if your program ever executes that action then your program is not purely functional
09:01:48 * Yurik is looking on this theological dispute .)
09:02:09 <shapr> afaiu, monads are like wormholes...
09:02:28 <Igloo> In what way?
09:02:45 <shapr> so the program can be purely functional and the IO stuff gets 'wormholed' in when everything that can be resolved, has been resolved
09:03:06 <Heffalump> igloo: but no Haskell code that doesn't use unsafePerformIO ever executes the action - it produces one and the runtime system around it does
09:03:15 <Heffalump> shapr: yep
09:04:30 <shapr> also, I think each monadic call is like an interrupt being called during an instant in the Magic The Gathering event hierarchy, but that's probably a bizzarre and trivial way of describing it
09:04:31 <Igloo> That sounds like saying C code doesn't do IO, the kernel does
09:05:19 <Heffalump> semantically, all a Haskell program does is produce a big IO action that someone else executes
09:05:38 <Heffalump> and (again semantically) you could view the Haskell program as finishing before the IO action is executed
09:05:50 <shapr> right, that's how I see it.
09:06:15 <shapr> still bends my brain a bit when I try to paste that idea onto interactive Haskell programs though :-)
09:06:45 <shapr> I think it's like movies or fiction, as long as the whole system is internally consistent, it works just fine.
09:07:40 <Heffalump> shapr: yeah :-)
09:07:46 <Heffalump> (re the interactiveness)
09:09:55 * Heffalump wants to have a good look at Eager Haskell
09:10:01 <shapr> I think that each monad call jumps out of the 'universe' of the current program much like throwing an exception in any other language
09:10:55 <Heffalump> hmm, remember most monads can be implemented functionally, though
09:11:14 <Igloo> Eager Haskell or that eager/lazy hybrid someone recently wrote a thesis on. Or are they one and the same?
09:11:22 <Heffalump> it's only monads that don't have a "run" function (of type m a -> a or similar) that you have to view as above
09:11:25 <Heffalump> igloo: one and the same
09:11:33 <Igloo> Ah, OK
09:11:43 <shapr> Heffalump: I'm lost on that one, I'll meditate on what you said.
09:12:01 <Heffalump> doesn't Haskell define lazy semantics to the extent of not evaluating bottom unless required to, for example?
09:12:08 <shapr> I'll at least revise my statement to "a monad call *can* jump out of the current universe"
09:12:20 <shapr> so monads can be a form of abstraction
09:12:40 <Heffalump> shapr: I still prefer to view it as "a monad can be used to create another universe for someone else to use"
09:13:10 <shapr> because you can establish different universes with different rules (just like a mathematical proof jumping through systems)
09:14:30 <shapr> Heffalump: yup, it's lazy to that point.
09:15:10 <shapr> iirc, you can define a list of ops, the second of which is a divide by zero, and happily use the first part of the list, and never touch the zero div error
09:16:04 <Heffalump> and the report specifies that behaviour?
09:17:06 <shapr> I think so
09:17:21 <shapr> I do not count myself as one with clue though.
09:17:37 <Heffalump> right, so if it does any eager implementation would have to be an eager/lazy hybrid to some extent
09:17:44 <Heffalump> s/eager/"eager"/
09:19:07 <Igloo> I can't remember it explicitly saying so, but I don't think I'd particularly remember it. There are various equivalences you'd have to make sure were valid, though
09:31:22 * Yurik is away: preparing to depart. home, sweet home. beer, sweet beer
20:17:35 <clausen> physarum: so, where do you live?
20:17:42 * clausen never seen eburwd2 before!
