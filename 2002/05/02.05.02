03:49:34 <GilbertBSD> what is haskell?
03:53:18 <Heffalump> a lazy functional programming language
03:54:12 <GilbertBSD> what is it used for?
03:54:13 <GilbertBSD> is it like scheme?
03:55:50 <Heffalump> sort of, but it has types
03:55:50 <Logan> And expressability. :P
03:55:50 <Logan> And it's lazy!
03:56:17 <GilbertBSD> what do you use it for?
03:56:17 <Logan> I used it to do am image processing project last weekend.
03:56:24 <Logan> It's meant to be a general purpose language.
03:56:34 * Heffalump uses it for lots of things, but mostly processing programming languages
03:56:39 <Logan> It's really good for writing reusable code.
03:56:53 <Logan> Probably it's biggest strength.
03:57:06 <GilbertBSD> how does one learn it?
03:57:30 <Logan> Have you browsed around haskell.org?
03:58:21 <GilbertBSD> yeah I have seen some haskell code.
03:58:27 <GilbertBSD> It seemed rather cumbersome.
03:59:33 <Logan> Really?  Was it code I wrote? :P
03:59:33 <GilbertBSD> heheh.
03:59:55 <Logan> http://www.kuro5hin.org/story/2002/4/23/104451/644 has some Haskell code posted in the messages.
03:59:59 <GilbertBSD> I was trying to learn how to program ... and since so much had been said about the dangers of learning C and such and then being restriced for a good long time, I tried my hands on haskell.
04:00:13 <Logan> Restricted?
04:00:13 <GilbertBSD> I did not get beyond the first 4 pages of the book i was using.
04:00:20 <Logan> Heh, at least you've got a book. :P
04:00:30 <GilbertBSD> I returned it to the library.
04:00:32 <Logan> I've been too lazy to order one.
04:00:47 <GilbertBSD> how did you learn haskell?
04:00:48 <Logan> What sort of programming experience do you have?
04:01:21 <GilbertBSD> I only have a superficial knowledge of a whole bunch of programming languages.
04:01:45 <GilbertBSD> but I taught python how to multiply yesterday
04:01:45 <Logan> GilbertBSD: I've got a lot more to learn, but basically I muddled through some tutorials on haskell.org (which aren't the best at teaching), did a lot of searching with google, read some papers, looked at some example code, etc.
04:01:45 <GilbertBSD> and I taught it how to divide as well :)
04:01:45 <Logan> And just tried to solve problems with it.
04:02:03 <GilbertBSD> yeah thats how I'm learning python as well...
04:02:05 <Logan> And it helps to come in here when I stumble on something.
04:02:08 <Logan> Provided somebody's awake.
04:02:11 <Logan> Damn Europeans.
04:02:15 <GilbertBSD> yeah.
04:02:31 <GilbertBSD> why are you learning haskell though?
04:03:24 <Logan> Because I really really like it.
04:03:24 <GilbertBSD> you weren't born liking it. 
04:03:24 <GilbertBSD> What prompted you to really really like it?
04:03:24 <Logan> I learned about it.
04:03:24 <Logan> I didn't know anything about it until a few months ago.
04:03:28 <Logan> Then I started reading through the tutorial on haskell.org, and immediately fell in love with a few concepts.
04:04:03 <Logan> For instance, I'd never used a lazy programming language before, that was probably the biggest hook.
04:04:03 <Logan> That might be my favorite thing about the language.
04:04:03 <GilbertBSD> but you knew how to program already?
04:04:11 <Logan> And I'd never encountered its type system before, which I also love.
04:04:12 <Logan> Yes.
04:04:20 <Logan> Though I never had much functional programming experience.
04:04:43 <GilbertBSD> see I don't know how to program properly at all.
04:04:49 <GilbertBSD> I have only solved toy problems thus far.
04:04:59 <Logan> Give it 10 years or so. :P
04:05:02 <Heffalump> I like functional programming mostly because of (a) inductive data types and (b) increased possibilities for code reuse
04:05:04 <GilbertBSD> yes Norvig.
04:05:22 <Logan> Heffalump: Is functional programming a necessary condition for (a)?
04:05:40 <Heffalump> logan: hmm, I'm not sure
04:05:49 <Logan> I'm still getting used to the idea.
04:05:50 <Heffalump> I've never seen inductive datatypes in a non-functional language
04:06:10 <Logan> I should look at how they are implemented.
04:06:15 <Heffalump> it would be interesting to add them to something like C
04:06:20 <Heffalump> logan: just a tagged union
04:07:19 <Logan> Is that similar to boxing?
04:07:19 <GilbertBSD> logan boxing?
04:07:19 <GilbertBSD> is that from j?
04:07:19 <Heffalump> boxing is to do with putting things on the heap rather than the stack
04:07:23 <Heffalump> so not directly
04:08:17 <Logan> I'm not too clear on what boxing is... is it related to thunks?
04:08:45 <GilbertBSD> are either of you familiar with j?
04:08:56 <Logan> No.
04:09:33 <Logan> Oh, wait, boxing has to do with types?
04:09:46 <Heffalump> logan: boxing is to do with putting values on the heap, that's all really
04:10:03 <Logan> Ok, I just think I've seen it in reference to polymorphic types.
04:15:26 <Logan> And then there are all these unboxed data structures that I see in libraries here and there.
04:15:26 <Igloo> Boxing and this tagging do essentially the same thing but at different levels presumably?
04:15:26 <Igloo> Boxing tags the type of the whole thing whereas tagging tags the internals with the subtype?
04:15:26 <Logan> Igloo: Makes sense to me.
04:15:26 <Logan> Or, actually, the impression I go twas just that boxing was having an indirect pointer.
04:15:26 <Heffalump> I'm not quite sure why you can only unbox monomorphic values, since I thought all polymorphism should be resolved at type checking time
04:15:26 <Igloo> Hmmm, I guess if you had a large data structure of non-polymorphic type you wouldn't need to tag it when boxing it
04:17:25 <Logan> Well, the contents of a list would have to be boxed.
04:18:14 <Logan> I think.
06:40:21 <Usul> hey all
06:40:35 <Usul> anybody knows a library to use sockets or something in Hugs in windows?
07:23:46 <Usul> another question :P
07:24:07 <Usul> mkPoints' :: ((Int,Int),(Int,Int)) -> [(Int,Int)]
07:24:14 <Usul> any idaes?
07:25:05 <Usul> ie: mkPoints' ((3,6),(5,8)) ==> [(3,6),(4,6),(5,6),(5,7),(5,8)]
07:25:15 <Usul> is the easiest just to do it with guards? :P
07:26:42 <Heffalump> what's it supposed to do?
07:26:48 <Heffalump> I suspect a list comprehension is what you want
07:27:36 <Usul> well, see (Int,Int) as a coordinate, and ((Int,Int),(Int,Int)) as a vector 
07:27:44 <Usul> now i need all coordinates on the vector :P
07:28:05 <Heffalump> but (4,6) isn't on the vector (3,6) -> (5,8)
07:28:29 <Heffalump> where vector is really line segment here
07:28:59 <Usul> vector is not the right word here i think
07:29:10 <Usul> and infact,
07:29:25 <pesco> I smell Bresenham's Line Algorithm.
07:29:25 <Usul> it is just horizontal and vertical vectors....
07:29:30 <Usul> so my example was wrong :P
07:29:51 <Heffalump> pesco: me too :-)
07:29:56 <Heffalump> usual: oh, right
07:30:13 <pesco> If I could just remember it from the top of my head...
07:30:15 <Heffalump> if you specify what you're supposed to do, and explain why you need to do it, I'm sure we can help
07:30:41 <Usul> well, i found guards might be easiest way....
07:30:46 <Usul> and its hard to explain :P
07:32:34 <Heffalump> hi shapr
07:32:51 <shapr> hi Heffalump! what's up?
07:33:07 <shapr> still doing SML?
07:33:13 * Heffalump has to write a talk on web programming in the next 4 hours or so
07:33:14 <Heffalump> yep
07:33:25 <shapr> need any help writing about web programming?
07:33:36 <shapr> I'm refactoring a Zope site right now....
07:33:56 <Heffalump> it's a fairly basic talk
07:34:02 <shapr> oh, ok
07:34:11 <shapr> I had an idea last week..
07:34:13 <Heffalump> I'm discussing the CGI interface, mod_perl, HTML::Mason, embperl and safeperl
07:34:31 <shapr> jdk1.4 supports GUI direct description via XML
07:35:13 <shapr> I was thinking that you could get around the problem with HTML not being a real layout method by dynamically generating GUI XML descriptions server side, and showing that XML as a GUI in an applet.
07:35:44 <shapr> something like cheesy web speak for "--display remotehost:0.0"
07:36:10 <shapr> oh, only perl?
07:36:23 <Heffalump> probably, yeah
07:36:31 <Heffalump> cos that's what I know most about and noone asked for anything else
07:36:41 <shapr> hm
07:37:10 <shapr> well, since I'm not part of your audience I won't say anything against it :~)
07:37:58 <Heffalump> :-)
07:38:05 <shapr> I would subversively suggest that you use a bit of Tom Moertels article about Perl, Haskell, and XSLT...
07:38:16 <Heffalump> heh
07:38:59 <shapr> I've been doing web programming for several years in various languages...
07:39:33 <shapr> Python, Java, and VBScript for server side stuff, lots of javascript for client-side stuff.
07:39:56 <Heffalump> I do almost no client-side stuff, and either Perl or Haskell for server-side stuff
07:40:33 <shapr> I'm not very fond of Perl myself, but that's mostly because the Perl programming culture allows unreadable code.
07:41:03 <Heffalump> yeah. It has lots of modules, though.
07:41:10 <shapr> that's true
07:41:19 <Heffalump> I started writing a way for Haskell to call into Perl so I can use the modules
07:41:22 <shapr> more than anything else I'm aware of
07:41:58 <shapr> Perl modules beat the crap of both Java and Python for sheer amount of standards/formats/etc supported.
07:42:22 <pesco> Heffalump: What will a call look like then? Haskell -> C -> Perl -> C -> Kernel?
07:42:40 <Heffalump> pesco: call of what?
07:42:58 <shapr> Heffalump: is it something like PyMacs? a simple remote call api?
07:43:17 <pesco> A call from Haskell into Perl, like you said.
07:43:35 <Heffalump> pesco: I don't understand the "Kernel" bit of what you said
07:45:47 <pesco> I was thinking of Perl modules which expose some system service which is exposed as a C library function which wraps system calls.
07:46:01 <Heffalump> oh, right. yes, that would be what happens
07:46:18 <Heffalump> all my interface can do at the moment is execute random bits of perl and pull integers and strings out of perl into Haskell
07:46:26 <shapr> sounds nice
07:46:36 <Heffalump> so it's not really much use for anything - I was trying to work out how to actually interface with CPAN modules nicely
