03:15:05 <shapr> wheeee
03:15:16 <shapr> the time is not @468.24
03:15:21 <shapr> er, "is now"
04:40:48 * shapr bounces
08:24:06 <shapr> wheeee
08:24:17 <Heffalump> whoooo
08:27:26 <shapr> whaaaa
08:27:41 <shapr> mmm, a kilo of spanish chocolate from barcelona
08:28:22 <Heffalump> you'll get fat :-)
08:28:33 <Heffalump> (well, you might already be for all I know, actually)
08:28:48 <shapr> well, I am a bit plump.
08:28:52 <shapr> but not much.
08:29:17 <shapr> I am surprisingly heavy though... 99 kilos
08:29:53 <shapr> see shae - http://purl.org/wiki/python/ShaeErisson
08:30:35 <Heffalump> ah, you don't look plump in that
08:30:40 <Heffalump> but it's not really a profile
08:30:48 <shapr> that's true.
08:31:11 <Heffalump> don't suppose you know anything about putting access controls on individual pages of a MoinMoin wiki, btw?
08:31:16 <shapr> hmmm
08:31:31 <shapr> I did
08:31:41 <shapr> I can't remember off the top of my head
08:32:04 <shapr> I'm co-organizing the PythonApplicationsTrack and the PythonLanguageTrack at EuroPython this year...
08:32:12 <shapr> and MoinMoin is one of our talk
08:32:13 <shapr> s
08:32:30 <shapr> Juergen Hermann is an interesting guy.
08:33:31 <shapr> moin 1.0 is out
08:33:47 * shapr looks for moin docs
08:34:52 <shapr> aha
08:35:02 <shapr> http://twistedmatrix.com/users/jh.twistd/moin/moin.cgi/HelpOnConfiguration_2fSecurityPolicy
08:36:37 <shapr> hey, have you seen Ashley Yakeley's HScheme he's writing?
08:36:48 <Heffalump> nope
08:36:49 <Heffalump> what is it?
08:37:02 <shapr> as he puts it "think guile for Haskell"
08:37:14 <shapr> embeddable scripting lang, or just scheme in Haskell
08:37:32 <Heffalump> hmm.
08:39:21 * shapr checks out moin cvs source
08:41:47 <shapr> Heffalump: what kind of access controls? edit and delete seem implemented, I don't see view or anything else though. I can ask him if you like.
08:43:15 <Heffalump> for individual pages? I couldn't see how to do that.
08:43:21 <Heffalump> anyway, view as well is needed in this case
08:43:33 <shapr> hm.
08:43:37 <Heffalump> s'not important, it just occurred to me when I saw your page
08:44:16 <shapr> well, I can figure it out if you decide you want it.
08:44:45 <Heffalump> well, I probably ought to learn to hack such things myself, I just thought you might know an easy answer
08:45:23 <shapr> not immediately, no.
08:45:35 <shapr> I do write a large amount of Python on a regular basis though.
08:45:53 <shapr> for general use, for Zope, for Jython
08:46:30 <shapr> interesting question on h-cafe just now...
08:46:42 <shapr> guy wants to go from "list = [(0,1),(1,0)]" to:
08:46:46 <shapr> f 0 = 1
08:46:46 <shapr> f 1 = 0
08:46:54 <shapr> he wants to generate the function.
08:48:30 <Heffalump> yeah
08:48:34 <Heffalump> I was thinking about that
08:48:43 <Heffalump> the solution with arrays works if we have Ix a
08:48:55 <Heffalump> but that's quite a strong requirement
08:49:10 <Heffalump> I'm not actually sure what the time complexity of the compiler-generated pattern matching *is*
08:49:20 <Heffalump> I suspect linear in the number of top-level constructors in patterns
08:50:50 <|Fo|Ns> hi
08:51:16 <|Fo|Ns> hi Logan
08:52:06 <Logan> Hello.
08:53:06 <Logan> In general can't you go from an array to a function by just using !!? :P
08:53:16 <Logan> f = (a !!)
08:53:51 <Heffalump> yes, but building the array in the first place is less trivial
08:59:21 <shapr> that's what I was thinking of...
08:59:58 <shapr> afaiu, the order of the patterns is important, yes?
09:00:07 <Heffalump> yes
09:00:25 <shapr> that's what you meant "Ix a" right?
09:00:38 <Heffalump> no, Ix a is that a is in class Ix
09:00:38 <shapr> the patterns have to be in the correct order in the list
09:00:42 <shapr> er, oh
09:00:46 <Heffalump> but yes, good point
09:00:48 <Heffalump> (if they overlap)
09:01:07 <Heffalump> but if you add them to the array in the right order that'd be ok
09:01:23 <shapr> is it easy to figure out the right order?
09:01:33 <Igloo> Doesn't he just want lookup? OAIC?
09:01:33 <shapr> from randomly ordered input?
09:01:45 <shapr> OAIC?
09:01:45 <Igloo> And is htaccess sufficient to do wiki access controls?
09:01:57 <Igloo> Or Am I Confused
09:02:00 <shapr> oh
09:02:08 <Heffalump> igloo: not to a specific page
09:02:17 <shapr> nah, htaccess is for static pages I think
09:02:18 <Heffalump> igloo: lookup in a finite map?
09:03:09 <Heffalump> htaccess can work on entire CGI scripts too
09:03:09 <shapr> oh
09:03:09 <Heffalump> but not individual query parameters AFAIK
09:03:09 <Igloo> f = lookup list ought to work if I understand the question correctly
09:03:17 <Heffalump> but he said he didn't want to do that each time...
09:03:31 <|Fo|Ns> you can do cgi's in haskell?
09:03:37 <shapr> |Fo|Ns: yes
09:03:59 <Heffalump> >> Is there a way to do this?  Note, I don't want to
09:03:59 <Heffalump> >> define a function that searches through the list
09:03:59 <Heffalump> >> each time it is invoked, I want to generate the
09:03:59 <Heffalump> >> function once and have it be as fast as the
09:03:59 <Heffalump> >> pattern-matcher can make it.
09:04:02 <Igloo> Ah, I'd missed the h-cafe bit
09:04:06 <shapr> afaiu, he wants staticFun :: [(a,b)] -> (a -> b)
09:04:12 <Heffalump> yeah.
09:04:19 <Heffalump> he needs reflection :-)
09:04:23 <Heffalump> or indeed meta-Haskell
09:04:32 <Heffalump> wonder who might be able to help with that ;-)
09:04:38 * shapr has no idea
09:04:44 <shapr> hm, it's @710
09:04:46 <shapr> time for dinner
09:04:54 <Logan> Can't you just build the Array from the list of tuples?
09:05:11 <Heffalump> logan: what if the first component of the tuple isn't a member of class Ix?
09:05:24 <Heffalump> you can't build an array that has that as an index then
09:05:25 * shapr will return later.
09:05:25 <Logan> The he's got a problem. :P
09:05:29 <Igloo> Well I assum the way functions get compiled it would be linear anyway
09:05:34 <Heffalump> I guess.
09:05:37 <Logan> So you need to also provide a function that maps the first component to a member of class Ix.
09:05:41 <Heffalump> that's what he said following up later
09:05:54 <Heffalump> meta-haskell is clearly the best solution :-)
09:05:57 * Heffalump disappears
09:06:04 <Logan> Yeah, I like introspection.
09:08:02 <Igloo> Where are you from, shapr?
09:09:49 * Igloo gets confused by "load images from current server only" again
11:52:45 <DLid> whats extremely briefly, the induction principle?
11:53:22 <DLid> whats it to do with?
11:54:12 <Igloo> Show f(zero) holds. Show f(x) => f(succ(x)) holds. Ergo f holds for everything at least zero.
11:56:07 <Logan> http://planetmath.org/encyclopedia/Induction.html
17:32:10 <matju> what is the name of the function that does like fold but gives all partial results?
17:33:55 <clausen> iterate?
17:34:08 <clausen> (a bit different, but...)
17:37:47 <matju> well, if i give it initial value 1, operator *, and the list 1,2,3,4,5,... it should return the list 1!,2!,3!,4!,5!,...
17:39:02 * clausen thinks how to implement nicely
17:41:04 <clausen> is there any reason you want a list?
17:41:12 <clausen> hmmm
17:41:12 <clausen> oops
17:41:13 <clausen> yes
17:41:35 * clausen hacks up an implementation, cool problem...
17:48:57 <clausen> errr, ugly
17:49:08 * clausen gives up... the solution is a mess! :(
18:05:54 <matju> clausen: fold(f,v,l) = fold(f,f(v,head(l)),tail(l))
18:06:33 <matju> clausen: pfold(f,v,l) = cons(f(v,head(l)),pfold(f,f(v,head(l)),tail(l)))
18:06:44 <matju> but i don't know haskell syntax
18:06:55 <matju> i only thought you guys would have a good name for that
18:07:10 <matju> you see, i'm working on a dataflow version of APL
18:07:16 <matju> and i wanted a good name for that operation
18:18:27 * clausen looks
18:18:49 <clausen> but, don't you want it to work on infinite lists?
18:27:53 <matju> GridFlow (my software) does not do lazy-eval
