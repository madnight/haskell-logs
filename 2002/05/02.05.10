00:00:17 <whizkid> mornin...
00:00:22 <whizkid> anybody awake?
00:06:39 <buggmuzzUNI> hey
00:06:41 <buggmuzzUNI> i am
00:06:56 <whizkid> hmm... can you show me some haskell code?
00:07:37 <whizkid> or some good tutorial? I'm VERY NEW to Haskell/functional programming
00:07:48 <buggmuzz> oh um, well
00:08:06 <buggmuzz> you can read the lecture notes from my uni course
00:08:12 <buggmuzz> they are freely available from the net
00:08:21 <whizkid> where?
00:08:27 <buggmuzz> they are in .pdf format though
00:08:42 <whizkid> damn... I don't use X
00:09:15 <buggmuzz> well try www.haskell.org
00:09:22 <buggmuzz> they should have documents link
00:09:23 <buggmuzz> from there
00:10:35 <whizkid> well.. I tried that....
00:11:45 <buggmuzz> ok um..
00:11:49 <buggmuzz> go here:
00:11:52 <buggmuzz> wait 1 second
00:12:24 <buggmuzz> http://undergraduate.cs.uwa.edu.au/units/230.123/
00:12:36 <buggmuzz> check out the Haskell docs link
00:12:45 <buggmuzz> might be something there
00:13:28 <whizkid> well... I can't find any Haskell links...
00:13:48 <whizkid> ooh.. wait...
00:14:33 <whizkid> damn.. it's all PDF
00:14:51 <buggmuzz> :(
00:15:42 <whizkid> nevermind... what do you think of haskell?
00:15:50 <buggmuzz> i think it's cool
00:15:59 <buggmuzz> lol
00:16:01 <whizkid> do you have any experience with C++?
00:16:05 <buggmuzz> basic
00:16:12 <buggmuzz> really little
00:16:16 <buggmuzz> im up to pointers
00:16:25 <buggmuzz> cos im learning c++ atm, have been for 4 days so far
00:16:26 <buggmuzz> :)
00:16:50 <whizkid> lol
03:50:17 <jewel> where can I find examples of simple Socket usage
03:50:26 <jewel> are the APIs compatible between ghc and hugs?
04:27:21 <jewel> how do I use the Socket API in hugs? I can import IO, but how do I get the Socket functions?
04:29:40 <Heffalump> I can't find any socket stuff in the standard hugs library
04:30:43 <jewel> In the ghc libraries page it says the ghc and hugs share the librar(ies)?
04:33:07 <jewel> If I try it in ghci 5.02.2, it says "can't find module `Socket'"
04:36:13 <Heffalump> did you do -package net ?
04:37:01 <jewel> er no, let me try that
04:37:52 <jewel> ah
06:48:01 <DLid> i got my parser to work... i just need some quick help on the syntax layout, cause i think its bad... could you help...
06:48:09 <DLid>                   xs <- getLine
06:48:29 <DLid> i have the following lines ... if (snd (head (papply prop xs)))
06:48:39 <DLid> and (isTaut (fst (head (papply prop xs))))
06:48:53 <DLid> but if you see, i use head (papply prop xs) twice
06:49:02 <DLid> is there anyway i can make this code cleaner?
06:49:26 <Igloo> You can insert    let foo = head (papply prop xs) after the first line
06:49:53 <Igloo> Or even   let (foo, bar) = head (papply prop xs)
06:50:25 <DLid> cheers
07:27:13 <jewel> How do I write a network long to a handle?
07:27:24 <shapr> hi jewel!
07:27:31 <shapr> whatcha writing?
07:27:42 <jewel> just fooling around with network stuff
07:28:26 <shapr> xbill sent me a fetchmail style "remote IMAP4 delivered to local SMTP" haskell script, would that help you?
07:30:10 <jewel> probably
07:30:17 <jewel> remember looking at that (or something similar)
07:31:28 <shapr> ok, sent
07:34:54 <jewel> Mmm, besides blowing goats ..
07:34:56 <jewel>    myPutLine imapH req
07:34:56 <jewel>                 ans     <-      myGetLine imapH
07:34:56 <jewel>                 let     ws      = words ans
07:34:56 <jewel>                         bytes :: Integer
07:34:56 <jewel>                         bytes   = read . unwrap $ ws !! 4
07:35:05 <jewel> is the only interesting thing I can see
07:35:11 <jewel> and I don't know what it does!
07:35:53 <shapr> the goats are cool.. I agree.
07:36:12 <shapr> lesse
07:36:26 <shapr> we make an Integer called bytes
07:36:47 <shapr> words splits the ans at whitespace
07:37:14 <shapr> ws !! 4 the fourth item in the array
07:37:19 <jewel> ah
07:37:24 <jewel> ok, not what I was thinking then
07:37:29 <shapr> unwrap I dunno about
07:37:49 <shapr> but I'm pretty sure read turns the string into an Integer
07:38:09 <shapr> I vaguely recall seeing stuff like readInt "24"
07:38:21 <shapr> that returns "Int :: 24"
07:39:17 * shapr looks at the docs
07:40:22 <shapr> what's a network long?
07:41:26 <jewel> a 4 byte integer with a specific byte ordering (big-endian)
07:41:39 <shapr> oh
07:41:51 * shapr wouldn't know an endian if one shot him with an arrow
07:42:25 <jewel> it's quite simple, most machines are big or little endian
07:42:28 <jewel> x86 is little-endian
07:42:31 <jewel> suns are big
07:42:38 <jewel> some processors can be both
07:42:39 <shapr> means which end is the most significant one?
07:42:45 <jewel> yes
07:43:04 <shapr> so...
07:44:08 <shapr> it sounds like one of those formats is not a smooth rise of significance, but instead chunks of higher values, where the most significant end inside each chunk is opposite from the most significant end of the entire sequence.
07:44:09 <shapr> is that true?
07:44:47 <shapr> so 123,456 in decimal would be 456,123 on one of those endians, yes?
07:45:02 <shapr> and 123,456,789 in decimal would be 789,456,123?
07:45:10 <jewel> yeah it's just the byte ordering, not the bit ordering
07:45:18 <jewel> I think
07:45:46 <shapr> so which one works like the decimal ordering that I'm used to?
07:45:52 <shapr> big or little endian?
07:46:03 <shapr> I could always google for it and stop distracting you ;-)
07:47:08 <jewel> well if your intel integer looked like b4b3b2b1 then you write to a socket as b1 b2 b3 b4
07:47:20 <Igloo> In memory it isn't so obvious which way is right
07:47:46 <jewel> Anyway, that doesn't really bother me now
07:47:46 <shapr> Igloo: why not?
07:47:51 <Igloo> But network order is the one that looks right I think
07:47:54 <jewel> how do I turn ints into bytes in haskell?
07:48:43 <Igloo> shapr: Because you don't care if addresses get more positive or more negative
07:49:06 <Igloo> Middle-endian is just silly, though (and does exist)
07:51:49 * shapr finds a deprecated ByteArray module
07:51:58 <ChoJin> what is the name of the function which take a function and reverse its two argument something like (a->b->c) -> (b->a->c)
07:52:07 <shapr> flip
07:52:10 <ChoJin> thx :)
07:52:13 <shapr> :)
07:53:18 <shapr> ByteArray points to MArray and IArray as replacements...
07:53:19 * shapr reads more
07:53:26 <jewel> ghc is written in haskell ...
07:54:14 <shapr> cool
07:54:32 <shapr> could be interesting for learning about functional shells
07:57:43 <jewel> i was thinking more of the backend having to be capable of low-level data manipulation
08:10:21 <shapr> jewel: maybe hPutBufBA from the IOExts module also works on Socket Handles?
08:58:19 <ChoJin> Main.hs:54:
08:58:19 <ChoJin>     Inferred type is less polymorphic than expected
08:58:19 <ChoJin> 	Quantified type variable `s_list' is unified with `(T, V)'
08:58:19 <ChoJin>     Signature type:     forall s_list. s_list
08:58:19 <ChoJin>     Type to generalise: (T, V)
08:58:20 <ChoJin>     When checking an expression type signature
08:58:22 <ChoJin>     In an expression with a type signature: s :: forall s_list. s_list
08:58:24 <ChoJin>     In the second argument of `unification', namely
08:58:26 <ChoJin> 	`(s :: forall s_list. s_list)'
08:58:29 <ChoJin>                             unification' (Nil, _) (t1, t2) s_list = [s]
08:58:30 <ChoJin>                             unification' s (t1, t2) s_list = unification (subst s t1, subst s t2) (s::s_list)
08:58:43 <ChoJin> any idea ?
08:59:17 <ChoJin> I don't understand the err msg
08:59:29 * shapr doesn't either
08:59:54 <Heffalump> are you trying to use ST?
08:59:58 <ChoJin> no
09:00:28 <Heffalump> I find the formatting of that unreadable - can you easily put it up on the web somewhere?
09:00:29 <ChoJin> s_list is [S] , S is type S = (T, V)
09:00:35 <Heffalump> (possibly with the source generating it)
09:00:53 <ChoJin> Heffalump: the last two lines (unification'....) are the source line which produce this
09:01:17 <Heffalump> oh, duh (told you it was hard to read :-)
09:01:43 <Heffalump> YM s:s_list
09:01:50 <Heffalump> not s::s_list
09:01:56 <Heffalump> you've been using ML too much, clearly :-)
09:02:00 <ChoJin> shit :)
09:02:12 <ChoJin> I knew I should never help ppl with ML :)
09:02:20 <ChoJin> I don't code in ML, but I often help ppl in OCaml :)
09:02:46 <ChoJin> thx work now :)
09:19:03 <ChoJin> is there a way with hugs for instance to trace ?
09:19:14 <Heffalump> yes, import Trace
09:19:15 <ChoJin> I dont remember where I read something to trace an haskell prog
09:19:17 <Heffalump> and use the trace function
09:19:26 <Heffalump> which has type String -> a -> a
09:19:38 <Heffalump> trace "foo" x prints out foo and evaluates to x
09:20:04 <ChoJin> k
09:20:05 <ChoJin> thx
15:47:15 <ChoJin> I have two list, I am looking for the best way (beautiful, fast, short ...) to merge these two list without introduce double value (i.e. [1,2,3] and [2,4,5] will produce [1,2,3,4,5]
15:47:53 <Heffalump> are they both sorted lists?
15:47:57 <ChoJin> no
15:48:04 <ChoJin> and it cannot
15:48:21 <Heffalump> and it cannot what?
15:48:21 <ChoJin> there are Eq on element, but not < or >
15:48:25 <Heffalump> ok
15:48:35 <ChoJin> no order I mean
15:48:40 <Heffalump> it'll have to be an O(NM) algorithm then
15:49:05 <Heffalump> can we assume no duplicates in either list to begin with?
15:49:14 <ChoJin> l1 ++ [x|x<-l2, x `notElem` l1] ?
15:49:17 <Heffalump> oh, nub (xs ++ ys) is the *shortest* way, btw
15:49:33 <ChoJin> yes, we know l1 have no duplicate and l2 neither
15:50:12 <ChoJin> do you have better way than l1 ++ [x|x<-l2, x `notElem` l1] ?
15:50:19 <Heffalump> l1 ++ filter (flip notElem l1) l2
15:50:27 <Heffalump> is equivalent
15:50:37 <ChoJin> equivalent in speed ?
15:50:41 <Heffalump> and effect
15:50:48 <ChoJin> k
15:50:55 <Heffalump> list comprehensions compile down to code involving filter, map and concat
15:52:24 <ChoJin> k, thx
17:22:23 <Igloo> ISTR union l1 l2 does what you want, ChoJin
17:22:49 <zorb> wow. I'm actually here when some people are around.
17:22:58 <ChoJin> Igloo: ISTR ?
17:23:07 <ChoJin> zorb: :)))
17:23:16 <Igloo> Well, I'm actually adding to a discussion that happened 1.5 hours ago and about to go to bed  :-)
17:23:24 <Igloo> I Seem To Remember
17:23:25 <zorb> heh
17:23:27 <ChoJin> zorb: there are always, but you have to ask question in order to obtain ppl speaking :)
17:23:38 <Igloo> Night all
17:23:48 <zorb> later Igloo
17:23:49 <ChoJin> Igloo: a function named "union" ? 
17:23:56 <Igloo> (oh, List.union)
17:24:19 * Igloo really goes  :-)
17:24:33 <ChoJin> I don't find it in the haskell report
17:24:53 <ChoJin> gn Igloo :)
17:25:15 <zorb> its in the haskell LIBRARy report
17:25:46 <zorb> different thing.
17:25:46 <ChoJin> excelent :)
17:27:07 * zorb ponders if union is really beautiful.
17:28:41 <ChoJin> better than  l1 ++ [x|x<-l2, x `notElem` l1]
17:28:42 <ChoJin> :)
17:29:10 <zorb> heh. yeah 
17:34:17 <ChoJin> well, good night folk
