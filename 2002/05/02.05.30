04:46:26 <waterm> http://developer.kde.org/language-bindings/index.html it would be nice to see haskell there :)
11:02:38 * Heffalump reads about Eager Haskell
12:09:44 <shapr> yay
12:12:40 <Igloo> yay?
12:58:59 <shapr> Igloo: yah, I'm happy cuz I finished my Zope stuff, and now I can play with haskell
12:59:04 <shapr> hi tmoertel
13:00:20 * tmoertel is on telephone . . .
13:00:50 <shapr> this may be a clueless question, but is there any relationship between lambda-calculus and pi-calculus?
13:01:02 * shapr readily admits to being clueless with regard to math
13:01:24 <shapr> afaiu, lambda-calculus is all about being able to decompose your language down to the S and K combinators, yes?
13:16:09 <Igloo> shapr: Cool, and a good reason to be happy  :-)
13:17:32 <Igloo> I am no expert, but I would say that lambda calculus is about lambda calculus and S/K combinators are a separate area of interest commonly explained using lambda calculus
13:19:00 <Igloo> And I've never seen anything to do with pi-calculus but I would imagine it has a rather different focus, although I can well imagine it being related to lambda calculus in the same way Haskell is
13:20:32 <oxford> hi, any unsw students?=
13:20:44 <shapr> uni of ?
13:20:51 <shapr> north south west? :)
13:20:58 <Igloo> New South Wales?
13:21:11 <oxford> yes
13:21:40 <shapr> never had the opportunity...
13:21:53 <shapr> oh well
13:22:05 <shapr> no Haskell chatter for that guy.
13:22:08 <Igloo> His loss
13:22:20 <shapr> yup
13:23:08 <shapr> are there more 'basic pieces' like S/K combinators?
13:23:55 <Igloo> I'm fairly sure there's another one, but can't remember why
13:24:09 <Igloo> Or maybe it's another 2 or 3.
13:26:32 * Igloo fails to spot anything other than I from a quick google - that's not very interesting if it's what I was thinking of
13:27:05 <shapr> I ?
13:27:08 * shapr looks
13:28:01 <Igloo> At least one site defines it as the identity function
13:28:05 <shapr> ah
13:28:34 <Igloo> It could be I was thinking of that as a short hand, though, as S and K are sufficient
13:29:59 <shapr> is there anything else like that?
13:30:15 <shapr> an independant set of 'basics' ?
13:31:37 <Igloo> I'm fairly sure there must be
13:31:57 <shapr> I haven't heard of any others.
13:32:30 <Igloo> I'm fiarly sure something like: Take S. Take a random other term. Find a term such that with it and the second you can make K but that isn't K.
13:32:43 <Igloo> s/.$/ would work./
13:32:53 <shapr> I was hoping for an entirely different system
13:32:55 <Igloo> (I'm guessing here)
13:33:08 <Igloo> I suspect S and K are just the simplest pair, or at least the simplest known
13:33:24 <shapr> I see what you mean.
13:33:49 <Igloo> Well, take any Turing complete language and remove instructions until there is nothing to remove without losing the ability to do something
13:34:14 <shapr> that's pretty much what I'm interested in.
13:34:27 <shapr> someone wrote a brute force program to do that in Joy recently.
13:34:54 <shapr> he ended up with two small combinators
13:34:58 <Igloo> There was quite a nice idea: an assembly language with a single instruction, subtract and branch if zero, which is Turing complete
13:35:12 <shapr> that's cool.
13:35:31 <Igloo> And hey, no overhead for opcodes needed (as there is only 1), so it must be efficient too  :-)
13:35:41 <shapr> ha
13:54:22 <dennisb> there is a kombinator usually called X which is the single one you need
13:54:44 <shapr> cool
13:55:00 <dennisb> then you can define S = X(XX) and K = (XX)X
13:55:06 <dennisb> (or the other way around)
13:55:14 <Igloo> I thought of X, but then that made me think there was a Y too, which is why I added the "2 or 3" line  :-)
13:55:20 <Igloo> Is there a Y?
13:55:49 <dennisb> There is a combinator called Y, yes
13:56:01 <dennisb> the fixpoint combinator
13:56:06 <Igloo> OK, and I is probably the 5th one I was thinking of
13:56:40 <dennisb> you usually talk about SKI together
13:56:48 <dennisb> i dont really know why
13:57:26 <dennisb> I think I have been talking about X here some time before...
14:03:29 * shapr is surprised that the protolambda language does not exist
14:03:39 <shapr> unlambda has S and K and application
14:03:56 <shapr> protolambda should have X
14:03:58 <shapr> and application
14:05:43 <dennisb> Hmm, i have a process that takes 100% cpu and that I can't kill. It have been running for 2h.. Time to reboot maybe.
14:06:14 <Igloo> Where are those names from? Anyway, you can trivially implement it in Haskell...
14:06:25 <dennisb> what names?
14:06:37 <Igloo> dennis: Under a UNIX-a-like? And kill -9 does nothing?
14:06:43 <Igloo> unlambda and protolambda
14:06:45 <dennisb> Igloo: yes, linux
14:07:01 <dennisb> Igloo: I have actually not heard about these at all..
14:07:01 <Igloo> Ah, not a good sign
14:07:44 <dennisb> No, rh73 is not a stable as my old system used to be. It's only 11 days uptime and time to reboot..
14:08:14 <Igloo> RH? Bah, you probably use emacs and all  :-P
14:09:05 <dennisb> Sure I do
14:09:29 <dennisb> I even run it in windows!
14:10:49 <shapr> Igloo: unlambda is:http://www.eleves.ens.fr:8080/home/madore/programs/unlambda/
14:11:26 <shapr> ?The effect of reading an Unlambda program is like habing your brains smashed out by a Lisp sexp wrapped around an ENIAC. You won't find anything like it west of Alpha Centauri.? The Hitch-Hacker's Guide to Programming
14:11:31 <shapr> that's a quote from the home page
14:12:58 * Igloo pushes it onto TODO list  :-)
14:13:02 * shapr grins
14:13:09 <dennisb> This is strange, I started to close down a lot of other programs and now the process terminated. There was no relation between these programs and the hung process, but maybe the kernel got in a better mode after 30-40 processes terminated. No need to reboot then. Well, it has nothing to do with haskell.
14:13:17 <dennisb> I'll check out that link instead
14:14:00 <shapr> dennisb: next time you may want to try running pstree
14:14:20 <shapr> and see if that process is waiting for a child process to terminate
14:15:14 <dennisb> the process was scp and it had been initiated from another computer, the compy was done but it was stuck here on my computer afterwards
14:15:27 <dennisb> s/compy/copy
14:15:27 <shapr> oh
14:15:39 <Igloo> AFAIK the only process that should be able to ignore kill -9 is a zombie, and zombies shouldn't use any CPU time
14:16:10 <dennisb> Well, it was just stuck for about 2 hours, then it died, and I'm happy again :-)
14:21:14 <dennisb> i looked up the definition of X, X = \t. t K S K
14:22:32 <dennisb> and K and S are the usual ones, K = \x y.x   S = \x y z.x z (y z)
14:23:31 <dennisb> then one can play with X(XX) and (XX)X and see what they are
14:24:10 <Igloo> And then one can scribble out half of what one has written for the 16th time and finally get the right answer  :-)
14:41:02 <shapr> does hiding no longer work in ghc?
14:41:52 <dennisb> it did the last time I tried
14:42:04 <shapr> I tried "import Prelude hiding (putStrLn)"
14:42:18 <shapr> and yet I still need to do Main.putStrLn
14:43:58 <dennisb> what's wrong?
14:45:01 <shapr> it says ambiguous occurence
14:45:14 <shapr> could refer to either Main.putStrLn or PrelIO.putStrLn
14:45:15 <shapr> oh
14:45:18 <shapr> duh.
14:45:19 <shapr> :)
14:45:40 <shapr> the error appears to be user induced.
14:45:53 <shapr> hm
14:45:54 <shapr> no
14:46:03 <shapr> I thought explicitly importing PrelIO with hiding would work
14:46:10 <Igloo> Are you using -fno-prelude or whatever it is?
14:46:17 <shapr> nope
14:46:19 <shapr> ghci
14:46:58 * shapr looks for no-prelude flags
14:47:08 <dennisb> ut works here
14:47:16 <dennisb> <interactive>:1: Variable not in scope: `putStrLn'
14:47:47 <shapr> hm
14:48:33 <dennisb> I just made a module that I loaded:
14:48:35 <dennisb> module Foo where
14:48:35 <dennisb> import Prelude hiding(putStrLn)
14:49:01 <shapr> yup, that works.
14:49:08 * shapr blinks
14:51:56 <shapr> oh
14:52:02 <shapr> I had "import IO"
14:52:03 <shapr> duh
14:52:17 <shapr> and that import PrelIO...
