04:54:59 --- topic: set to 'Haskell! (NerdBop) || and spiffy people! (shapr) || ? (gene9) || ! (shapr)' by shapr
09:04:25 * Yurik is away: beer
11:54:31 <|Fo|Ns> hi
11:54:39 <|Fo|Ns> whats Class functor?
11:54:47 <|Fo|Ns> and what is fmap?
12:03:10 <Logan> Do you know what a functor is?
12:04:31 <Logan> http://planetmath.org/encyclopedia/Functor.html for a really hard to read/understand definition. :P
12:04:49 <|Fo|Ns> and an easier one?
12:05:23 <Logan> I haven't studied this stuff formally, but I think it basically means that a monad M is a functor if there exists an fmap function that satisfies particular properties.
12:05:44 <Logan> fmap :: (a -> b) -> M a -> M b
12:06:23 <Logan> The properties are fmap id x = x and fmap (f . g) x = fmap f (fmap g)
12:06:25 <Logan> (I think)
12:06:56 <Logan> I shouldn't have said monad earlier.
12:07:03 <|Fo|Ns> I dont understand this
12:07:11 <|Fo|Ns> fmap :: (a -> b) -> (f a -> f b)
12:07:16 <Logan> But the list modifier is a functor, because the map function on lists satisfies these properties.
12:07:21 <|Fo|Ns> what are f a and f b?
12:07:27 <Logan> f is the functor.
12:07:50 <Logan> f by itself is meaningless... it has to be applied to some type.
12:08:48 <Logan> If we used the notation List a instead of [a], then you'd have: instance List of Functor where fmap :: (a -> b) -> (List a -> List b)
12:10:05 <Logan> Maybe some examples would help...
12:10:20 <Logan> Basically, you could probably make any container type an instance of class functor.
12:10:34 <Logan> For instance, let's say you had a type Tree a, which stores values of type a in some sort of tree structure.
12:11:06 <Logan> You could make a function tmap :: (a -> b) -> Tree a -> Tree b, which applies some function to each element in a tree, generating a new tree with the transformed values.
12:11:12 <Logan> (just like map, but for trees)
12:11:34 <Logan> You could then say that Tree was an instance of the class Functor, with fmap = tmap
12:12:31 <Logan> You could generalize functions that transform the data inside lists to work on all Functors.
12:12:50 <Logan> Anything that uses just just map to do things. :P
13:09:46 <|Fo|Ns> but.. Tree a is a type too, so map would works too
13:12:58 <|Fo|Ns> ok, ok got it
13:13:19 <|Fo|Ns> map is fmap for lists, isnt it?
13:13:49 <Heffalump> yes
13:13:54 <Heffalump> you don't have to be a monad to be a functor, btw
13:14:38 <|Fo|Ns> [Int] is the same as List a?
13:14:45 <|Fo|Ns> List Ints sorry
13:14:52 <|Fo|Ns> List Int
13:15:11 <Heffalump> yes
13:17:03 <|Fo|Ns> didnt know that
13:22:49 <Igloo> List a isn't actually defined in Haskell 98 is it?
13:26:47 <|Fo|Ns> are they going to make a new standart including cocurrent libraries, and ghc-hugs stuff?
13:34:27 <Igloo> Haskell 2 will probably come into existence at some point
13:38:06 <|Fo|Ns> Haskell 2, when?
13:38:12 <|Fo|Ns> and, another question
13:39:31 <|Fo|Ns>  ~ @ $ $!    what do this operators do
13:39:41 <Igloo> At some point. Probably.
13:40:22 * Igloo suggests you look at the documentation or (revised) report on www.haskell.org
13:40:58 <Heffalump> ~ = lazy pattern match
13:41:04 <Heffalump> @ = as pattern
13:41:14 <Heffalump> $ = weakly binding function application
13:41:24 <Heffalump> $! = strict function application
13:41:40 <Heffalump> but you want to read the report for an explanation
13:43:18 <|Fo|Ns> ok, thanks, Im reading it
13:43:53 <|Fo|Ns> what are n+k patterns?
13:47:57 <Heffalump> f 0 = 0
13:48:01 <Heffalump> f (n+1) = 1+f 0
13:48:09 <Heffalump> the (n+1) is an n+k pattern
13:51:00 <|Fo|Ns> and... what does that mean?
13:51:35 <Heffalump> normally you can only do pattern matching using datatype constructors
13:51:53 <Heffalump> + isn't a constructor, but you're still allowed to do pattern matching with it in this special case
13:51:54 <|Fo|Ns> you can do pattern matching with more functions?
13:52:17 <|Fo|Ns> than : 
13:54:58 <Heffalump> you can use any datatype constructor
13:55:03 <Heffalump> e.g.
13:55:07 <Heffalump> foo (Left x) = x
13:55:11 <Heffalump> foo (Right y) = y
17:41:41 <Logan> Heh, earlier I said monad when I meant something else (wasn't sure what term, though), but I quickly corrected myself. :P
22:33:33 <cmoline> how does one write a show function for seven tuples?
22:33:57 <clausen> read the source!
22:34:22 <cmoline> of the prelude??
22:35:12 <clausen> yeah
22:35:41 <clausen> anyway, "instance Show (a,b,c,d,e,f,g,h) where"
22:35:42 <clausen> etc.
22:36:19 <Logan> That's an 8-tuple! :P
22:36:30 <clausen> :p
22:36:48 <Logan> Wouldn't it have to be instance (Show a, Show b, Show c, ...) => Show (a,b,c,d,e,f,g) where or something like that?
22:37:03 <clausen> yeah, you're right
22:45:20 <cmoline> agg. i think ill just use a list. i dont know anything about classes
