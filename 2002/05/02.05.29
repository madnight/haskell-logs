04:03:37 <panoplos> how can i specify multiple line function defs in GHCi?
04:19:37 <panoplos_> another question: how in Haskell can i perform multiple functions in a function, where f x takes only the value of the last function?
04:20:32 <Igloo> huh?
04:22:49 <panoplos_> like: f x y | x >= y = y | otherwise f (x+1) y ... but i want to print the value if x in the otherwise guard
04:23:09 <Heffalump> you need to be in the IO monad to print out values
04:23:34 <panoplos_> in GHCi, isn't this already the case?
04:23:42 <panoplos_> print x
04:23:46 <Heffalump> oh, right
04:24:17 <panoplos_> so where should i put print x in the following?
04:24:48 <panoplos_> s/following/previous
04:24:53 * Heffalump doesn't use GHCi, sorry
04:25:09 <panoplos_> Heffalump: well, this is a general Haskell question
04:25:47 <Heffalump> ok, well if you're in the IO monad
04:26:06 <Heffalump> then: do { print x ; return y }
04:26:09 <Heffalump> is probably what you want
04:27:24 <panoplos_> so: f x y | x >= y = y | otherwise do { print x ; return f (x+1) y } ?
04:28:24 <panoplos_> hmm... doesn't work
04:28:44 <Heffalump> what are you expecting the type of f to be?
04:28:58 <Heffalump> you may need to change = y to = return y in the other guard
04:29:05 <panoplos_> f :: Int -> Int -> Int
04:29:14 <Heffalump> ok, so that's my point about the IO monad
04:29:33 <Heffalump> f would need to be Int -> Int -> IO Int to be able to do this
04:29:49 <Heffalump> oh, you could use trace though
04:29:56 <Heffalump> if you don't care about using "unsafe" features
04:30:12 <Heffalump> so trace (show x) (f (x+1) y) in the otherwise branch
04:31:39 <Heffalump> I did warn him trace is unsafe... :-)
04:32:34 <panoplos_> how can i just perform two unrelated function calls in the otherwise branch?
04:32:57 <Heffalump> what do you want to do with the results of each?
04:33:39 <panoplos_> discard the first and return the last
04:33:55 <Heffalump> and what's the type of the first?
04:34:50 <Heffalump> the thing about a pure functional language is that if you're just going to discard a value you may as well never have computed it, unless you're trying to deliberately slow down your program or increase its memory usage
04:36:13 <Heffalump> and since Haskell is lazy, if you ignore the result of something it'll never call the function in the first place, unless you force it to with strictness annotations
04:37:24 <panoplos_> then what does print x if x is type Int return?
04:37:33 <Heffalump> IO () I think
04:37:40 <Heffalump> Prelude> :t print
04:37:41 <Heffalump> print :: Show a => a -> IO ()
04:38:08 <Heffalump> the thing about something with an IO type is that for it to actually do anything, the resulting "IO action" needs to be executed
04:38:24 <Heffalump> so in an interactive system, the *top-level* type must have the IO in it for it to be run
04:38:37 <Heffalump> otherwise you need to mess around with strictness annotations and unsafePerformIO
04:38:48 <Heffalump> (which is roughly what trace does)
04:39:59 <panoplos_> so can you please translate the following c to haskell for me?
04:40:21 <panoplos_> #include <stdio.h>
04:40:53 <panoplos_> void main (int argv, char **argc){
04:41:37 <panoplos_> int i = 0; int uptoVal = 0;
04:42:55 <panoplos_> for (;i<=MAX;++i){
04:43:24 <panoplos_> printf("%d", i);
04:43:26 <panoplos_> }
04:43:28 <panoplos_> }
04:44:25 <panoplos_> that should be: for (uptoVal = 100; i<=uptoVal; ++i) 
04:45:17 <panoplos_> this leaves out user input intentionally, but i would like this to be in a function like printUpto(int val)
04:45:33 <Heffalump> printUpto :: Int -> IO ()
04:46:06 <Heffalump> printUpto n = sequence_ (mapM print [100..n])
04:46:19 <Heffalump> oops, not quite
04:46:44 <Heffalump> printUpto n = sequence_ (map print [100..n])
04:47:13 <Heffalump> oh, and your C doesn't actually put in newlines
04:47:26 <Heffalump> so if that's what you really want then
04:47:33 <Heffalump> printUpto n = sequence_ (map (putStr.show) [100..n])
04:47:43 <panoplos_> printUpto n x = map print [n..x] ?? 
04:47:52 <Igloo> I think you want mapM_
04:47:59 <Heffalump> igloo: oh, ok, didn't know about that
04:48:08 <Heffalump> yep.
04:48:20 <Heffalump> panoplos_: mapM_ print [n..x]
04:48:26 <Igloo> Not 100% sure it exists OTTOMH though  :-)
04:48:30 <Heffalump> it does in hugs
04:48:37 <panoplos_> what does mapM_ do?
04:48:49 <Heffalump> read the definition in the prelude
04:49:32 <Heffalump> print is a function that takes something and turns it into an IO action
04:49:57 <Heffalump> mapM_ takes a function (print in this case), a list of things, applies the function to the list of things, and then runs the resulting IO actions in sequence
04:50:43 <panoplos_> ok, so it's the "runs the resulting IO actions in sequence" that is new to me
04:50:53 <panoplos_> i guess i need to study monads
04:52:06 <Heffalump> yeah, 'fraid so
04:52:22 <Heffalump> languages like C are fundamentally imperative - you give a sequence of commands and they are implicitly executed
04:52:23 <panoplos_> well, that's not a Bad Thing (tm)
04:52:28 <Heffalump> :-)
04:53:04 <Heffalump> in Haskell, the concept of imperative actions is wrapped up into something more abstract, and the act of generating those actions and the act of running them is separated
04:53:09 <panoplos_> i haven't touched c in so long .. LOL
04:53:55 <panoplos_> been using Python and Ruby mostly, lately
04:54:13 <panoplos_> but i do use C++ at work
04:56:51 <panoplos_> question though.. what if i want to specify upto f x y :: (Int -> Int) -> Int -> Int to be able to use other functions without excluding IO()?
04:57:48 <Heffalump> wdym "other functions"?
04:58:27 <panoplos_> so that: function that i have designed
04:58:38 <panoplos_> functions
04:59:32 <Heffalump> ok, what do those functions do?
04:59:57 <panoplos_> so that - upto print 1 100 - would work, as well as - upto myFunc 1 100 -, where myFunc does not necessarily use the IO monad...
05:00:22 <Heffalump> ok, so upto print 1 100 would print out the numbers from 1 to 100?
05:00:25 <Heffalump> and what would myFunc do?
05:00:33 <panoplos_> anything
05:00:44 <Heffalump> give an example
05:00:56 <panoplos_> it could calculate, then print... or even just calculate
05:00:57 <Heffalump> essentially, if myFunc had a monadic type you could probably do it. If not, you probably can't.
05:01:52 <panoplos_> cann't upto be polymorphic in this sense
05:01:54 <panoplos_> ?
05:02:03 <panoplos_> s/cann't/can't
05:02:42 <panoplos_> i guess that i am thinking of passing in a closure
05:02:43 <Heffalump> only to a certain extent
05:03:02 <panoplos_> like blocks in SmallTalk or Ruby
05:03:14 <panoplos_> so i could:
05:03:23 <Heffalump> the trouble is that I think you want upto to be able to return either an IO () (in the case of print) or a [something] in the case of myFunc
05:03:25 <Heffalump> and it can't do both
05:03:56 <panoplos_> def upto(n,x)
05:05:18 <panoplos_> sorry..
05:05:43 <panoplos_> upto(1,100) {|x| print x}
05:05:50 <Heffalump> ok. so you can write something of type:
05:06:09 <Heffalump> upto :: Monad m => (Int -> m ()) -> Int -> Int -> m ()
05:06:09 <panoplos_> so that block {|x| print x} is called for all vals in n..x
05:08:00 <panoplos_> ok.. can you help me? what is a monad?
05:08:58 <Heffalump> do you understand type classes?
05:09:28 <Heffalump> hmm, lunchtime, biab
05:09:58 <panoplos_> yes i do
05:10:48 <Heffalump> class Monad a where
05:10:48 <Heffalump>   return :: b -> a b
05:10:48 <Heffalump>   (>>=) :: a b -> (b -> a c) -> a c
05:10:57 <Heffalump> that's fundamentally all a monad is
05:11:09 * Heffalump really goes, biab
05:11:15 <panoplos_> ok, thanks
05:58:47 <panoplos> test
06:12:53 * Heffalump reappears
06:19:24 <Heffalump> you still there?
09:14:58 <panoplos> man... OPN has been cutting the connection a lot recently
09:37:41 <dennisb> hello all!
16:40:36 <exa> hi
16:43:05 <Heffalump> hiya
16:46:04 <exa> hi Heffalump
16:46:13 <exa> I solved some of my problems thanks to dennisb
16:46:35 <exa> Making some datatype strick eliminated the space leakage
16:46:41 <exa> strict
16:48:00 <Heffalump> cool.
17:00:38 <exa> I've been able to preprocess my data
17:00:45 <exa> Not long until I can predict the stock market hehe
17:11:55 <Heffalump> :-)
17:12:19 <Heffalump> make sure you don't forget everyone who helped when you're a billionaire :-)
17:12:35 <exa> Hmm okay ;)
