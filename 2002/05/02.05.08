00:03:38 <Pseudonym> Would someone care to proofread something I wrote on fundeps for the wiki?
00:08:51 <Heffalump> sure
00:18:39 <Pseudonym> http://haskell.org/wiki/wiki?FunDeps
00:18:41 <Pseudonym> Thanks.
00:22:44 <Heffalump> say Haskell 98 not Haskell in "FunDeps are not standard Haskell"
00:22:56 <Pseudonym> Good point.
00:22:59 <Heffalump> Hugs has a spurious capital G in the same sentence
00:23:08 <Pseudonym> That's to make it a wiki link/.
00:23:18 <Heffalump> oh, it needs two capital letters?
00:23:30 <Pseudonym> Yup.
00:23:33 <Heffalump> could it be HugsInterpreter instead or something?
00:23:39 <Heffalump> it looks a bit silly like it is
00:23:48 <Pseudonym> I guess.  Others have used HuGs before, though.
00:24:01 <Pseudonym> It gets worse: http://haskell.org/wiki/wiki?HaskellImplementations
00:24:20 <Heffalump> ah
00:24:22 <Heffalump> oh well :-)
00:24:45 <Pseudonym> Was it /understandable/, I guess is the most important question.
00:24:51 <Heffalump> I think a bit more explanation of what's going on with the ambiguous type would help
00:25:13 * Pseudonym nods
00:25:30 <Heffalump> e.g. explaining that because instances can be added by anyone, someone could come along and define instance Mult Matrix Matrix Int
00:25:45 <Heffalump> and so Haskell really does have no way of knowing it's not going to turn out ambiguous
00:26:13 <Pseudonym> Reload.
00:26:15 <Heffalump> also giving the error message you get from Hugs or GHC might make things a bit more concrete
00:26:35 <Heffalump> looks good
00:26:51 <Pseudonym> Cool.  Thanks.
04:14:51 <buggmuzz> hey
04:14:54 <buggmuzz> :)
04:30:35 <ski> hello
04:32:46 <ski> you wanted anything ?
04:35:03 <buggmuzz> Well if you mean want help, I am fine for now, just came to talk/idle etc heh
04:35:10 <ski> Usul : Dune fan ?
04:35:18 <Usul> ski, yeah ;)
04:36:08 <ski> i read the 6 books not so long ago (well actually i read books 1 and 2 earlier)
04:36:54 <ski> You do know about the games Dune,Dune 2,Dune 2000, do you ?
04:37:08 <Usul> yeah :P
04:37:58 <ski> And that there are a CD with music also (bundled with some sales of Dune 1, IIRC)
04:39:27 <Usul> i dont know that :P
04:39:36 <Usul> but perhaps that is cause i'm not from US or UK or so :)
04:39:57 <ski> I'm not either. I've seen some info on it on the web
04:41:52 <ski> (Actually there are a few sites that have put mp3:s from it on the web, but i don't know if it's strictly legal (for some definition of legal) to use them (i don't know if the CD is still commercially available), so don't tell anyone ;)
04:42:51 <ski> The CD was named "Exxos - Spice Opera" or something like that (13 tracks IIRC)
04:43:39 <Usul> ah :P
04:44:47 <buggmuzz> Are there any GUI hugs editors for linux? I have downloaded Hugs 98 from the Haskell website, but I can only seem to get one that works from command line
04:45:27 <buggmuzz> I know there isn't really much of a difference but I am getting used to Hugs Lite on mac :)
04:46:30 <ski> hmm, WinHugs 98 is for windows. I don't know if something similar is available for Unixen (probably not), or perhaps one can take the WinHugs98 Source and modify it to use X or something ..
04:46:32 <Usul> a GUI Hugs editor?
04:46:39 <Usul> ah
04:46:40 <Usul> :P
04:46:49 <Usul> maybe winhugs in wine? ;p
04:46:58 <ski> could perhaps work
04:47:23 <buggmuzz> I'll try it, thanks
04:47:42 <buggmuzz> *gets help on wine* heh never used this before
04:47:48 <ski> so you are saying that Hugs Lite on Mac is with GUI ? (i don't use mac regulary)
05:00:55 <casaa> lo all!
05:01:28 <casaa> this is prolly a bit of a stretch but does anyone here have experience installing hugs on a powerpc linux machine ?
05:01:29 <casaa> :)
05:02:00 <casaa> it compiled fine or so it seems but when i run hugs it just seems to hang at 'Parsing...' and never loads the prelude
05:04:35 <ski> just so ?
05:04:44 <casaa> ?
05:04:57 <casaa> pardon ?
05:05:22 <ski> um, i meant, it just hangs there .. ?
05:05:30 <casaa> yeah ... so it seems
05:05:45 <casaa> i guess i could try leaving it for longer
05:06:05 <ski> it shouldn't take too long, i think
05:06:21 <casaa> no ... it shouldnt
05:06:58 <clausen> well, you could try gdb...
05:07:02 <Usul> it is parsing the prelude then?
05:07:03 <casaa> what is that ?
05:07:23 <ski> unfortunately i haven't (yet) installed linux at home so i can't compare (though i installed it on a friend machine (not PowerPC) and that seemed to work (don't remember if i compiled it from source or not))
05:07:43 <clausen> gdb is a debugger for gnu/linux
05:07:55 <casaa> i assume its parsing the prelude as it should when starting up and when i interupt the process it says failed to load prelude
05:08:03 <casaa> hmm
05:08:06 <clausen> casaa: you could also try running with strace
05:08:09 <clausen> strace hugs
05:08:16 <clausen> it will probably generate a lot of output
05:08:19 <clausen> so save it to a file
05:08:23 <clausen> strace hugs 2>strace.out
05:08:27 <clausen> it might be enlightening
05:08:29 <clausen> (or it might not...)
05:08:40 <clausen> anyway, it sounds like you're hunting for a bug
05:08:44 <casaa> hmmm ... dont have strace installed ...
05:08:57 <casaa> might give it a go
05:09:23 <casaa> compiling strace now
05:09:27 <casaa> i love gentoo :)
05:09:31 <clausen> hehe
05:09:42 * clausen prefers apt-get install strace
05:09:44 <ski> gentoo ?
05:10:22 <casaa> i was running debian ... is very nice and apt-get is surely much quicker ...
05:10:49 * clausen is running conectiva
05:10:57 <clausen> actually, what linux distro doesn't have apt nowadays?
05:11:04 * clausen isn't aware of any
05:11:25 <clausen> ski: gentoo is a linux distro, where it's easy to compile everything
05:11:42 <ski> ok
05:12:27 <casaa> actually its sort of compulsory to compile everything
05:13:47 <casaa> strace after a little bit just keeps printing this forever :
05:13:54 <casaa> read(3, "", 4096)                       = 0
05:13:55 <casaa> read(3, "", 4096)                       = 0
05:13:55 <casaa> read(3, "", 4096)                       = 0
05:14:00 <casaa> it just goes on and on and on
05:14:57 <ski> I'm looking for a paper about a "functional" syntax for type classes and instances, and class contexts ..
05:15:29 <ski> (but i can't seem to find it.. it isn't in my 808K bookmarks file :)
05:15:55 <ski> Anyone know where i can find it ? (Shall i elaborate a little more ?)
05:22:16 <casaa> well ... thanks for trying everyone ... i will keep looking for help elsewhere
05:22:25 <ski> good luck !
05:24:06 <casaa> buggmuzz: dont suppose you have experience with trying to install hugs and having it freeze when you execute it ... it just hangs on Parsing and doesnt do much else ... i just compiled under linux (powerpc)
05:26:54 <buggmuzz> um
05:27:20 <buggmuzz> did you download the rpm or the tarred one?
05:27:20 <casaa> :)
05:27:28 <casaa> from source 
05:27:53 <buggmuzz> oh lol, i wouldn't know sorry
05:31:56 <Usul> guys, i got a problem :P
05:32:09 <ski> all ears ..
05:32:38 <Usul> import Maybe
05:32:38 <Usul> type Queue a = [Q a]
05:32:38 <Usul> data Q a = Q a Prio deriving Show
05:32:38 <Usul> qHead :: Queue a -> Maybe a
05:32:38 <Usul> qHead ((Q a prio):queues) = Just a
05:32:38 <Usul> qHead [] = Nothing
05:32:59 <Usul> but when i do a qHead [] it gives me ERROR - Cannot find "show" function for:   
05:33:09 <Usul> *** Expression : qHead []
05:33:09 <Usul> *** Of type    : Maybe a        
05:33:50 <ski> try "qHead [] :: Maybe Int" e.g.
05:35:46 <Usul> bad layout :P
05:37:21 <ski> the problem seemed to me to be that the result was of type Maybe a and the system can't determine if a is in the Show class ..
05:38:05 <Usul> hmm
05:38:12 <ski> not clear ?
05:38:43 <Usul> yeah its clear
05:39:29 <Usul> although your solution keeps giving me an error 2 :P
05:39:59 <ski> soloution ? that was intended as an test expression in e.g. hugs or ghci ..
05:40:19 <ski> s/soloution/solution/
05:40:23 <Usul> lol yeah
05:41:00 <ski> so my example has an error .. ?
05:41:26 <Usul> no...i fsked the file before i tried your example
05:41:39 <Usul> qHead [] is of type Maybe a though
05:43:00 <Usul> now, i need to work to a real solution though :P
05:43:04 <ski> (shouldn't that be "fscked" ?)
05:44:20 <Usul> s/$anyspellingmistakemadebyme/$correctspelling{$anyspellingmistakemadebyme}/;
05:44:51 <ski> ;)
05:52:34 <buggmuzz> lol
05:52:41 <ski> hmm ?
05:53:11 <Heffalump> usul: what happens if you spell two different things wrong in the same way?
05:53:42 <Usul> Heffalump, the %correctspelling hash is that big and intelligent it will solve it itself
05:53:56 <buggmuzz> lol
05:54:16 <buggmuzz> yeah its the computers fault for making the typo then, not his :)
05:55:16 <Usul> :)
08:05:00 <casaa> heya
08:05:09 <ski> hello
08:05:09 <Heffalump> hi
08:05:29 <casaa> can someone gimme a crash course in cvs ... apparently getting latest code will solve my hugs prob
08:05:45 <casaa> how do i set the CVSROOT environment ?
08:07:22 <Heffalump> what shell?
08:07:32 <Heffalump> you can use cvs -d instead, though
08:07:39 <ski> i guess you do a "setenv CVS whatever" (in some shells at least)
08:07:51 <casaa> hmmm
08:08:01 <casaa> why doesnt setenv work in my shell ?
08:08:13 <Heffalump> probably cos you use bash
08:08:17 <Heffalump> try export CVSROOT=whatever
08:09:30 <casaa> cool
08:09:45 <casaa> what is setenv for ? which shell i mean 
08:10:06 <ski> csh and tcsh at least, i think
08:10:23 <Heffalump> yeah
08:10:28 <Heffalump> export works in bash and zsh
08:10:50 <Igloo> And sh
08:11:04 <Heffalump> I nearly said that, then thought that what sh is depends on your system
08:11:18 <Igloo> Are you sure?
08:11:22 <Heffalump> relatively
08:12:52 <Igloo> http://www.opengroup.org/onlinepubs/007904975/utilities/xcu_chap02.html#tag_02_05_03 says it is required
08:13:43 <Heffalump> does everything follow that standard, though?
08:14:20 <casaa> yes!
08:14:21 <Igloo> If it doesn't follow standards then `which bash` may be a copy of tcsh and vice versa
08:14:25 <casaa> working hugs :
08:14:26 <casaa> :)
08:14:49 <Heffalump> igloo: yeah, but it still wouldn't be bash
08:15:16 <Igloo> But you setenv-only-using shell wouldn't be sh either
08:16:17 <casaa> thanks heaps ... later all
08:16:31 * Heffalump decides that pedantic arguments with Igloo belong elsewhere and shuts up :-)
08:16:50 <Igloo> :-)
09:03:00 <ChoJin> data V = Va | Vb | Vc
09:03:05 <ChoJin> data T = V | [V]
09:03:08 <ChoJin> what is wrong ? :)
09:03:38 <ski> you forgot the constructor in front of [V] in definition of T
09:04:13 <ChoJin> which mean ? :)
09:04:27 <ski> and you probably don't wan't V as a constant constructor
09:04:32 <ski> look
09:04:46 <ski> data T = V | Vs [V]
09:04:54 <ChoJin> I just want to say, T is "a V" or "a list of V"
09:04:54 <ChoJin> :)
09:05:01 <ski> ok
09:05:05 <ski> then do :
09:05:20 <ski> data T = V V | Vs [V]
09:05:24 <ChoJin> k thx :)
09:05:35 <ski> the first V is the constructor, so is Vs
10:35:18 <ChoJin> I have data T = V V | T [T]
10:35:30 <ChoJin> now I want to code this function:
10:35:40 <ChoJin> subst::T->S->T
10:35:51 <ChoJin> and I want to specialise when T is "a V"
10:36:16 <ChoJin> for instance : subst v s = ... with v a V
10:37:41 <ChoJin> anyone ?
10:42:57 <pesco> ERROR /home/pesco/coding/lab/Haskell/Scratch.lhs:3 - Undefined type constructor "V"
10:44:56 <ChoJin> n/m I found I think :)
10:45:08 <ChoJin> V is a type of mine :)
10:45:29 <pesco> I see.
10:46:12 <ChoJin> data V = Char deriving Eq
10:46:12 <ChoJin> data T = Var V | Term [T]
10:46:12 <ChoJin> type S = (T, V)
10:46:14 <ski> what should subst do ?
10:46:23 <ChoJin> subst :: T -> S -> T
10:46:23 <ChoJin> subst (Var v) s | v == (snd s) = fst s
10:46:23 <ChoJin> subst t s = t
10:46:30 <ChoJin> t = (Var 'a')
10:46:31 <ChoJin> s = ((Var 'b'),'a')
10:46:31 <ChoJin> main = print $ subst t s
10:46:33 <ChoJin> doesnt work :(
10:46:59 <ChoJin> subst should subsitute a variable v with terme t 
10:47:04 <ski> ok
10:47:25 <ChoJin> Main.hs:18:
10:47:26 <ChoJin>     Couldn't match `V' against `Char'
10:47:26 <ChoJin>         Expected type: V
10:47:26 <ChoJin>         Inferred type: Char
10:47:26 <ChoJin>     In the first argument of `Var', namely 'a'
10:47:26 <ChoJin>     In the definition of `t': (Var 'a')
10:47:29 <ChoJin> etc ...
10:47:31 <ski> does it give an error, or does it not give what you want ?
10:47:47 <ski> aha !
10:47:49 <ChoJin> l18 is line : t = (Var 'a')
10:47:52 <ski> look
10:47:55 <ski> data V = Char deriving Eq
10:48:30 <ski> here you define a type V with a single (constant) constructor which happen to be named "Char"
10:48:40 <ChoJin> hooooo
10:48:43 <ChoJin> yes :)
10:48:51 <ChoJin> I should use type
10:48:56 <ski> probably you want type V = Char or data V = V Char deriving Eq
10:49:28 <ChoJin> cool
10:49:32 <ChoJin> It works :)
10:49:47 <ChoJin> thx :)
10:50:09 <ski> so this is some mini-interpreter, eh ?
10:50:32 <ski> (or part of)
10:51:15 <ChoJin> beginning of resolution algorithm
10:51:51 <ChoJin> for instance: socrate is humain; humans are mortal; proof of socrate is mortal
10:51:51 <ChoJin> :)
10:52:17 <ski> prolog-like, or other ?
10:53:31 <ChoJin> I just want to code the algorithm named "resolution algorithm", which is a extention of 'proof by cut'
10:54:39 <ski> ok, many (most ?) automatic theorem-provers (at least the not-so-sophisticated) is based on resolution
10:54:52 <ChoJin> yes :)
10:55:34 <ChoJin> student in my school have to code this in OCaml, I want to code the same in haskell in order to show how haskell is beautiful :)
10:56:03 <ski> ah :)
10:57:16 <ski> what does the Term constructor in type T denote ?
10:59:34 <ChoJin> Term can be a variable or a list of Term
11:01:07 <ski> but what does the list denote ? a list of premises/conclusion ? a list of Term ?
11:01:19 <ChoJin> well, in fact I just found it is stupid :)
11:02:45 <ski> but you ought to have some other possible structure of a T except Var, in other case you'd just use a Var and the subst definition becomes trivial
11:05:02 <ChoJin> for instance if f is unary function : a term can be this: f f a
11:05:05 <ChoJin> with a a variable
11:05:26 <ChoJin> or with g which takes 2 arg: g f a f f b
11:05:28 <ski> ok
11:05:41 <ski> is f and g variables here also ?
11:05:43 <ChoJin> I need to find a good type for term :)
11:06:02 <ChoJin> f and g are function
11:06:10 <ChoJin> f unary function and g takes 2 arguments
11:06:10 <ski> or are they constant "constructor" functions ?
11:06:44 <ChoJin> I should build a type UnaryFunction etc ... I think
11:07:41 <ChoJin> any idea ? :)
11:07:59 <ski> perhaps you want data T = Var V | App T T  , or you perhaps want something like data T = Var V | Constr V T  or  perhaps  data T = Var V | Constr V [T]
11:08:07 <ChoJin> a term can be: a; or f a; or g a b; or .... a lot of case :)
11:08:34 <ski> but can it be (f a) (g b)   (where f is sort of curried ?)
11:08:35 <ChoJin> but on thing is sure: it cannot be: a b
11:08:44 <ChoJin> no it cannot
11:08:47 <ski> ok
11:09:21 <ski> then ditch App, and use perhaps some Constr variant, or whatever you can come up with :)
11:10:29 <ski> if you have "f a", you could represent that by  Constr 'f' (Var 'a')
11:11:03 <ski> likewise "f (f a)" becomes Constr 'f' (Constr 'f' (Var 'a'))
11:11:26 <ski> (you may want to abbr. Constr further to Con)
11:11:56 <ski> Is this something like the way you want to go ?
11:12:26 <ChoJin> let me think :)
11:12:48 <ChoJin> what Constr is ?
11:13:07 <ski> data T = Var V | Constr V T  (if one-arg)
11:13:08 <ski> or
11:13:21 <ski> data T = Var V | Constr V [T]  (if multi-arg)
11:14:08 <ski> you have to decite if you want one-arg or multi-arg (probably multi-arg, cuz you ditched currying here ..)
11:14:17 <ski> s/decite/decide/
11:20:57 <ChoJin> g a b will become Constr 'g' (Var 'a') (Var 'b') ?
11:21:57 <ski> it will become Constr 'g' [Var 'a',Var 'b'] (assuming multi-arg, which is nessecary for this if you don't want currying)
11:22:08 <ski> well
11:22:15 <ski> you can of course make 
11:22:39 <ski> data T = Var V | Constr1 V T | Constr2 V T T  ...
11:23:11 <ChoJin> I think it is easier with Constr V [T] :)
11:23:22 <ski> if you can be satified with a finite number of possible argument numbers (+ you have do define and use them separately :( )
11:23:32 <ski> thought so :)
11:23:36 <ChoJin> well the first part for subst is easy:
11:23:38 <ChoJin> subst (Var v) s | v == (snd s) = fst s
11:23:38 <ChoJin>                 | otherwise = (Var v)
11:23:57 <ski> seems ok, yes
11:24:23 <ski> and the second ...    ?
11:24:27 <ChoJin> but for Constr ... as I am new with haskell, I am some problem :))
11:25:09 <ski> no shame, everybody has to be new at first. :) just try to explain
11:25:24 <ChoJin> I want to say: take the Constr, and recursively apply subst on all Term list :)
11:25:32 <ski> do you want some hints/starting-points ?
11:25:38 <ChoJin> so maybe a map will be ok :)
11:25:40 <ski> yes
11:25:44 <ski> yes
11:25:54 <ski> i think so indeed
11:25:55 <ChoJin> subst Constr ... = 
11:26:05 <ChoJin> I have problem with the part before the "=" :)
11:26:53 <ski> don't forget the paren around constructors with arguments (otherwise haskell thinks they are arguments to subst)
11:26:59 <ski> so you have
11:27:11 <ski> subst (Constr ...) ... =
11:27:26 <ski> now what is the second ... (easy)
11:27:50 <ChoJin> s :)
11:28:02 <ChoJin> subst (Constr v t) s = map
11:28:03 <ski> yesss !!!! (applause :)
11:28:05 <ChoJin> map ... :)
11:28:12 <ski> ok
11:28:14 <ChoJin> maybe I should switch the two arg
11:28:27 <ChoJin> to apply map of (subst s)
11:28:59 <ski> to subst ? if you want, but it's not strictly nessecary. but as you say it's easier to partially apply then
11:29:09 <ski> s/to/of/
11:30:16 <ski> so in the RHS you have  map (subst s) ...  (assuming swapped arguments to subst)
11:35:50 <ChoJin> subst s (Constr v t) = map (subst s) t
11:35:59 <ChoJin> Main.hs:16:
11:36:00 <ChoJin>     Couldn't match `T' against `[b]'
11:36:00 <ChoJin>         Expected type: T
11:36:00 <ChoJin>         Inferred type: [b]
11:36:00 <ChoJin>     In the application `map (subst s) t'
11:36:00 <ChoJin>     In the definition of `subst': map (subst s) t
11:36:34 <ski> hmm, map returns a list but subst wants to return a T
11:36:41 <ChoJin> ohh
11:36:51 <ChoJin> Constr v (map (subst s) t)
11:36:53 <ChoJin> maybe :)
11:36:56 <ski> so you want something around/outside the map expression in the RHS
11:37:20 <ChoJin> subst s (Constr v t) = Constr v (map (subst s) t)
11:37:23 <ChoJin> seems to compile
11:37:24 <ChoJin> :)
11:37:27 <ChoJin> now need to test :)
11:37:28 <ski> well, it seems reasonable, doesn't it
11:38:16 <ski> we would like the function symbol ('f','g',etc) to stay the same after a substitution, don't we :)
11:41:42 <ChoJin> Constr 'g' [Var 'c',Constr 'f' [Constr 'g' [Var 'a',Var 'a']]]
11:41:42 <ChoJin> Constr 'g' [Var 'c',Constr 'f' [Constr 'g' [Var 'b',Var 'b']]]
11:41:44 <ChoJin> seem to work
11:41:44 <ChoJin> :)
11:41:51 <ski> ok
11:41:58 <ChoJin> with subst a to b :)
11:42:22 <ski> nice !
11:42:48 <ChoJin> and subst 'f' to 'b' change nothing, so it is ok :)
11:43:48 <ChoJin> Constr 'g' [Var 'c',Constr 'f' [Constr 'g' [Var 'a',Var 'a']]]
11:43:48 <ChoJin> Constr 'g' [Var 'c',Constr 'f' [Constr 'g' [Constr 'h' [Var 'd'],Constr 'h' [Var 'd']]]]
11:44:00 <ChoJin> with s = (Constr 'h' [Var 'd'],'a')
11:44:03 <ChoJin> it is really fun :))
11:45:39 <|Fo|Ns> hi
11:45:49 <ski> |Fo|Ns : hi'
11:45:54 <|Fo|Ns> can anybody tell me any other languaje with high order types?
11:46:03 <|Fo|Ns> language
11:46:11 <|Fo|Ns> I love it
11:46:20 <|Fo|Ns> it makes the code much simpler
11:46:30 <ski> ChoJin : are you satisfied with you data type yet or do you want to extend it more ?
11:46:49 <ski> |Fo|Ns : you mean (parametric) polymorphism, or ?
11:48:04 <ski> |Fo|Ns : or perhaps you mean higher-order functions ?
11:48:35 <|Fo|Ns> high order function
11:48:46 <ChoJin> ski: seems ok :)
11:48:48 <ChoJin> thx :)
11:48:50 <ski> |Fo|Ns : in ditto functions then most functional languages have it (e.g. Haskell.SML,O'Caml,Lisp,Scheme,Erlang,Mercury,etc)
11:48:58 <ski> s/in/if/
11:49:06 <ChoJin> my girlfriend ask what "loutish" means :)
11:49:23 * ski doesn't know what "loutish" means
11:49:38 <|Fo|Ns> ski: any imperative or oo langage has it?
11:49:42 <ChoJin> ski: :)
11:50:39 <ski> |Fo|Ns : well, i assume you mean non-functional (O'Caml is both functional and OO. Common Lisp is multi-paradigm, etc)
11:51:08 <|Fo|Ns> yes, sorry
11:51:29 <ski> |Fo|Ns : i think python and ruby has it. possibly Perl also (not sure). Perhaps someone else who know this better can enlighten us ?
11:53:35 <smkl> python, perl and ruby have it, at least the latest versions
11:53:53 <|Fo|Ns> nice....
12:00:39 <ski> |Fo|Ns : so you like higher-order functions (including closures, i presume)
12:01:30 <ski> |Fo|Ns : if you don't care about closures, then even C and Pascal (partly) has higher-order-functions :)
12:02:12 <ski> |Fo|Ns : (not to mention hard/horrible syntax for using it in non-trivial ways ..)
12:04:30 <|Fo|Ns> but, Ive been thinking and type varibles are quite necesary if you use high order functions
12:04:49 <ski> only if you use static typing
12:05:05 <|Fo|Ns> static typing?
12:05:23 <ski> hmm, no. they aren't even nessecary then (but useful)
12:06:07 <ski> static typing is when the complier/interpreter/etc checks the program for type errors during compiling/file-loading
12:06:42 <ski> dynamic typing, OTOH, is when types are checked at runtime by functions
12:06:46 <ski> (more or less)
12:07:21 <ski> Lisp is (most often) dynamically typed
12:07:56 <ski> i.e. to function application (+ 1 2) checks that it's two arguments are numbers at run-time
12:09:04 <ski> so (+ 1 "abc") doesn't give a compile-/load-time type error, but rather more or less what corresponds to a pattern-matching failure in e.g. haskell
12:09:08 <ski> clear ?
12:09:31 <|Fo|Ns> yes
12:09:54 <ski> one can think on this as one big datatype :
12:09:58 <|Fo|Ns> but I can usefulness of that
12:10:01 <|Fo|Ns> cant
12:11:01 <ski> data LispValue = Int Int | String String | List [LispValue] | Bool Bool | Func (LispValue -> LispValue)
12:11:14 <ski> and so on
12:12:51 <ski> the dynamic type persons feel that this is more flexible with not letting a (static) type-system "getting in the way" or "programming the type-system instead of the code", etc
12:14:25 <ski> Previously, this was more true (think monomorphism a la Fortran,C,Pascal). But with the advent of polymorphic type-systems many of these issues are not a problem anymore (but some still is)
12:14:45 <ski> think about the function length
12:15:44 <ski> in C or Pascal one has to make a (essentially identical) version of this function for every (Linked-) List type one thinks one i gonna need
12:16:18 <|Fo|Ns> too difficult for me
12:16:20 <ski> (or in C use (void *) and casting, but that's often unsafe)
12:16:23 <|Fo|Ns> I only know haskell
12:16:24 <|Fo|Ns> and ada
12:16:32 <|Fo|Ns> sorry :(
12:17:06 <Logan> Ada has generics, I think.
12:17:11 <ski> ada works too. (I don't think ada has polymorphism... No, ada has generics and they serve a similar function)
12:17:19 <ski> yes
12:18:13 <ski> but in ada one has to explicitely instantiate a generic (and generics is strictly more powerful than polymorphic functions. E.g. ML has both polymorphism *and* generics)
12:18:41 <|Fo|Ns> dont know what generics are
12:18:43 <|Fo|Ns> sorry again
12:19:03 <|Fo|Ns> Im still begining with ada
12:19:05 <Heffalump> do you mean MLs functors for generics?
12:19:24 <ski> but think dynamic typed .. in lisp on would just write a function that gets a list and checks to see if it is an empty list (yielding 0) or if it is an constructed list (using recursion)
12:19:49 <ski> |Fo|Ns : sorry, I thought you write what I now see Logan wrote ..
12:20:44 <ski> Heffalump : more ore less. Can't they be compared to Ada generics ? I was under the impression that they was roughly the same ..
12:21:31 <ski> Heffalump : (perhaps ML functors is more powerful than Ada generics)
12:21:51 <ski> |Fo|Ns : ok
12:22:19 <ski> |Fo|Ns : so this length function just looks at the "spine" of the list and computes the length
12:23:18 <ski> it doesn't matter if it is a list of int or of bool or of whatever. Even a heterogenous list works (i.e. a list where the elements have different types !)
12:24:13 <Heffalump> I don't know anything about ada generics
12:24:26 <|Fo|Ns> yes, thats right
12:24:28 <Heffalump> you can't do heterogenous lists at all in ML
12:24:36 <|Fo|Ns> doesn matter the type of the list
12:24:41 <Heffalump> (without making an explicit tagged union)
12:24:46 <ski> Now what polymorphism does is to reduce the flexifility difference between static and dynamic typing (while still not giving up static typing :)
12:25:34 <ski> Heffalump : in haskell extensions and in mercury one can make heterogenous lists (of sorts anyway)
12:25:48 <ski> s/flexifility/flexibility/
12:27:41 <ski> |Fo|Ns : you know a single datatype in haskell can have multiple different constructors ? and one can use multiple types in one's program ?    (this is obvious, of course)
12:28:07 <Heffalump> ski: using existential types?
12:28:58 <ski> Heffalump : yes (I believe the new Clean version has a Dynamic type also. Roughtly similar to  exists a.a  i think ..)
12:29:57 <|Fo|Ns> is anybody going to IFL 2002 ???
12:30:02 <ski> Heffalump : (though one can typecase one it to see what type of thing (pun intended) it contains. IIRC mercury also has a univ type somewhat similar)
12:30:16 <ski> |Fo|Ns : IFL 2002 ?
12:30:27 <|Fo|Ns> International Workshop on the
12:30:27 <|Fo|Ns> Implementation of Functional Languages
12:30:38 <Heffalump> where is it?
12:30:46 <|Fo|Ns> spain
12:30:52 <ski> |Fo|Ns : When ? Where ?   (I probably can't go anyway :( )
12:31:48 <Logan> Isn't a link to it on haskell.org?
12:31:57 <ski> anyway, when in haskell one would use e.g. data Either a b = Left a | Right b
12:32:25 <ski> in scheme (a lisp dialect) one would use something like
12:32:48 <ski> (def-struct (left a))
12:32:59 <ski> (def-struct (right b))
12:33:12 <ski> i.e. two different struct (record) types !
12:33:47 <Logan> Ah, good ol purge.
12:33:48 <Heffalump> ski: that was what I meant by a tagged union
12:34:03 <ski> then if they at all think of this in types term, Either would be the (non-disjoint !) union type of left and right
12:34:31 <ski> so in haskell   fromLeft (Left x) = x
12:35:04 <ski> if one evaluates  fromLeft (Right 3)  one gets a pattern match failure
12:35:38 <ski> but using
12:35:46 <ski> mirror (Left x) = Right x
12:35:52 <Heffalump> ski: errm, Either is a disjoint union...
12:35:56 <ski> mirror (Right y) = Left y
12:36:33 <ski> if one evaluates  mirror True  one gets a type-error (at compile-/load-time !)
12:37:11 <ski> but in lisp (or scheme) if one evaluates the corresponding  (mirror #t)  one gets a pattern-matching failure !!
12:39:11 <ski> Heffalump : in haskell yes, but in scheme, we would have two struct-types left and right and the corresponding either type is not a disjoint-union of those (because the structs are already tagged and we don't want two levels of tags, do we ?)
12:40:10 <ski> Thusly Lisp can be considered to have exactly one type with very many constructors/tags (in static typing point of view)
12:40:30 <ski> do ye agree ?
12:41:40 <Heffalump> errm, I think so
12:42:12 <ski> (I think that the MrSpidey typing tools in MrScheme would define the type either as  (define-type either (union left right))  )
12:43:02 <ski> I.e. all values that con be considered to belong to the type left respectively right can also be considered to belog to either (no tagging !)
12:43:32 <ski> s/belog/belong/
12:44:47 <ski> (Please stop me if my rants get too boring ;)
12:45:58 <Heffalump> I'm sort of doing lots of other stuff so I'm not thinking about what you say too much :-)
12:46:14 <ski> no prob. :)
12:48:59 <ski> (Logan : what you meant by "purge" ?)
12:49:54 <Logan> ski: It was a mistake, my access to my IRC client froze (runnign remotely), it was meant to go to a different channel on a different server. :P
12:50:39 <ski> Logan : okeydekey
14:25:22 <ski> bye
16:36:15 * Heffalump reads the communities report
16:37:32 * Pseudonym thinks all Haskell researchers should be denied category theory for six months in order to make their papers more readable
16:37:56 <Heffalump> most Haskell researchers don't delve into category theory too much, do they?
16:38:26 <Pseudonym> Admittedly there are really only one or two particularly bad offenders.
16:38:43 <Heffalump> who, OOI?
16:39:03 <Pseudonym> I was thinking of John Hughes.
16:39:12 <Pseudonym> Arrows.  Enough said.
16:39:51 <Pseudonym> I also have a suspicion that parsing monads are to Haskell what string classes used to be to C++.
16:39:57 <Heffalump> his paper on arrows seemed very understandable to me, actually
16:40:02 <Heffalump> and Category Theory scares me
16:40:30 <Pseudonym> You're obviously more dedicated than me.
16:40:35 <Pseudonym> :-)
16:41:07 <Heffalump> well, a bunch of us read it together, which might have helped
16:41:12 <Pseudonym> I never understood arrows until I read haskell.org/arrows
16:41:17 <Pseudonym> The paper was completely unhelpful to me.
16:41:24 <Heffalump> but it still didn't seem that complicated - very little category theory
16:41:35 <Pseudonym> I think it was all the jargon.
16:42:17 <Heffalump> like what, OOI?
16:42:24 * Pseudonym still doesn't know how to pronounce Kleisli
16:42:54 * Heffalump tries to remember how to write things phonetically
16:43:25 <Pseudonym> I would have guessed Kl-eye-slee
16:43:30 <Heffalump> yep.
16:43:43 <Pseudonym> But then someone said Klee-slee.
16:43:56 <Heffalump> I've never heard it pronounced like that
16:44:05 <Heffalump> but I don't think it really matters, anyway :-)
16:44:08 <Pseudonym> And is the "s" pronounced soft or hard ("s" or "z")?
16:44:15 <Heffalump> soft
16:44:19 <Heffalump> again IME
16:44:24 * Pseudonym nods
16:44:31 <Igloo> I'd either say Kleye-slee or kleyez-lee I think
16:44:50 <Igloo> Not sure which
16:47:00 <Pseudonym> Still, some good stuff in the communities report.
16:47:30 <Heffalump> I hope arrows syntax gets into Haskell 2
16:48:07 * Pseudonym is a little more cautious
16:48:26 <Pseudonym> I remember when monads were specified by "unit", "map" and "join".
16:48:36 <Heffalump> map?
16:48:43 <Pseudonym> It was a little while before people realised that they weren't the best abstractions.
16:49:02 <Pseudonym> I think we need some engineering experience with arrows before codifying them.
16:49:09 <Pseudonym> map, yes
16:49:13 <Heffalump> some people are using Ross Paterson's translator, though
16:49:21 <Heffalump> why do you need map to specify a monad?
16:49:52 <Pseudonym> All monads are functors.
16:50:29 <Pseudonym> Basically, unit, map and join are one set of basis functions.  Unit (later renamed "return") and bind (spelled ">>=") are another.
16:50:31 <Heffalump> yeah, but you can get from join and unit to map, can't you?
16:50:39 <Heffalump> oh, ICBW
16:51:05 <Pseudonym> Join isn't bind.
16:51:18 <Pseudonym> (>>=) :: m a -> (a -> m b) -> m b
16:51:25 <Heffalump> join is m (m a) -> m a
16:51:26 <Heffalump> isn't it?
16:51:27 <Pseudonym> join :: m (m a) -> m a
16:51:29 <Pseudonym> Yes.
16:51:34 <Pseudonym> Like concat over lists.
16:51:51 <Heffalump> oh, yeah, there's no way you could get (a -> b) -> (m a -> m b) from that
16:52:09 <Pseudonym> No.  But you can get it from return and bind.
16:52:37 <Pseudonym> IMO, we'd be in a mess now if we were specifying monads in terms of join and map.
16:52:54 <Pseudonym> Similarly, I'd prefer to hold off on arrows until we have some experience.
16:52:58 <Heffalump> not really, since they're equivalent :-)
16:53:20 <Heffalump> and the difference is basically the category theory <-> programmer divide
16:53:33 <Heffalump> and John Hughes is definitely more of a programmer than a category theorist
16:53:44 <Pseudonym> That's true.
16:53:56 <Pseudonym> I know they're equivalent, but IMO bind is much more natural.
16:54:20 <Heffalump> but you can use type class defaulting to allow them to be specified in either way
16:54:58 <Heffalump> and a few people have written programs using arrows
16:55:30 <Pseudonym> That's true.  I'd like to see, though, something like the standard library rewritten to use arrows first.
16:55:46 <Pseudonym> I'd feel a bit more comfortable about it then.
16:55:47 <Heffalump> there's no need, though - nothing in that particularly needs arrows
16:56:04 <Heffalump> it's stuff like FRP, parsing combinators, etc that do
16:56:18 <Pseudonym> If every arrow is a monad, then many of the "standard" monads might be better expressed as arrows.
16:57:12 <Pseudonym> BTW, my concern about the basis operations for arrows actually don't really rule out arrow syntax.
16:57:35 <Pseudonym> The syntax will remain the same, probably.  It's only the translation rules which would differ.
16:57:49 <Heffalump> every monad is an arrow, not vice-versa
16:58:07 <Pseudonym> Ah, yes, you're right.
16:58:08 <Heffalump> arrows are more expressive than monads, that's why they're needed in some situations
16:58:16 <Pseudonym> Caffeine hasn't kicked in yet, sorry. :_)
16:59:06 <Pseudonym> What I'm holding out for is a standardised monad template library.
16:59:11 <Heffalump> in what sense?
16:59:26 <Pseudonym> Well, I think the MTL should be part of the standard library.
16:59:39 <Heffalump> is it in hslibs?
16:59:59 <Pseudonym> Yes.
17:00:12 <Pseudonym> hslibs/lang/monads
17:00:52 <Heffalump> why do you feel it should be in the standard library, then?
17:01:23 <Pseudonym> First off, so it's available anywhere.
17:01:49 <Pseudonym> Secondly, so the standard library can be made to conform a bit closer to the MTL.
17:02:01 <Heffalump> hmm, I guess
17:04:15 <Pseudonym> Things like the ST monad.  Should be a monad transformer version too.
17:07:49 <Heffalump> naah, forcing people to write their own makes them think about exactly what's going on when they do it :-)
17:11:40 * Pseudonym laughs
17:12:08 <Pseudonym> The other thing I want to see is something like Edison becoming standard.
17:13:17 <Heffalump> I don't remember what that does
17:13:28 <Heffalump> or is that Chris Okasaki's library?
17:13:40 <Pseudonym> It's cdo's library, yes.
17:13:52 <Pseudonym> Unfortunately for this wish, it isn't finished.
17:16:37 <Heffalump> yeah
17:24:59 <Logan> Is FiniteMap from Edison?
17:25:36 <Pseudonym> I don't think so.
17:25:47 <Pseudonym> Edison has its own signatures for dictionary data structures.
17:26:18 <Logan> Ok, I think I ran into information about Edison in the course of looking for documentation of FiniteMap, which is why I made that connection, I guess.
17:26:30 <Pseudonym> Sorry, "associative collections".
17:27:39 <Heffalump> there's various FiniteMap modules around
17:27:53 * Pseudonym nods
17:27:54 <Heffalump> one in hslibs, Manuel Chakravarty's, one in Edison, I think
17:28:03 <Heffalump> some or all of which might actually be the same thing :-)
17:29:14 <Pseudonym> They differ in performance.
17:29:19 <Pseudonym> Edison's finite maps are assoc lists.
