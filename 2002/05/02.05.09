00:22:39 <pesco> Huuuuh, GNOME 2.0 fuer mich, bitte!
00:22:59 <pesco> Oops, wrong channel, nevermind.
00:26:54 <Heffalump> :-)
04:14:42 <DLid> im writing a parser for my tautology checker and have logicparser :: IO ()
04:15:10 <DLid> it asks the user to input a proposition in a format, such as A&&B
04:15:48 <DLid> i have then written code to check whether the syntax is right, example A&&B would return True, A&&#B would return False
04:16:13 <DLid> if it returns true, i then want to use my isTaut function to see if A&&B is a tautology or not
04:16:22 <Heffalump> are you sure the parser should have type IO () ?
04:16:35 <clausen> shouldn't it just take a string?
04:16:56 <clausen> anyway, when parsing... you should probably do something like:
04:16:58 <DLid> not sure, but an example i was given used IO
04:17:04 <clausen> Maybe Expression
04:17:15 <clausen> where Expression is some representation of boolean expressions
04:17:21 <clausen> anyway, you might find this code I wrote useful...
04:17:27 <clausen> (I wrote a program to do much the same thing)
04:17:33 <clausen> email address?
04:17:40 <DLid> david.lid@ntlworld.com
04:17:58 <DLid> but my program works fine, i just want to take the string entered and use it in isTaut
04:18:02 <DLid> to see if its a tautology or not
04:18:15 <DLid> however...
04:18:24 <DLid> isTaut  :: Prop -> Bool
04:18:40 <clausen> so, you've written isTaut
04:18:46 <clausen> but want to go from String to Prop?
04:18:53 <DLid> but the string entered will not match Prop in isTaut
04:18:57 <DLid> yep
04:19:07 <DLid> isTaut x = and [ eval ys x | ys <- substs x ]
04:19:11 <DLid> thats my isTaut function
04:20:20 <DLid> so if i could change the String to Prop so that isTaut would work, thats all i would need
04:20:32 <clausen> so, you need to parse it
04:20:47 <clausen> someone wrote a paper on parsing in haskell
04:20:51 * clausen looks for it
04:20:59 <Heffalump> there's lots of work on parsing in Haskell
04:21:52 <DLid> clausen, your file is a little too complicated for me!!!
04:21:57 <clausen> http://citeseer.nj.nec.com/292531.html
04:21:58 <clausen> ?
04:22:15 <clausen> DLid: yeah, that code is using some heavy maths
04:22:20 <clausen> there is a paper on it
04:22:23 * clausen looks for the paper
04:22:42 <DLid> so how can i go around doing what i need to do?
04:24:04 <DLid> and logicparser :: IO () is definately the right way
04:24:14 <clausen> http://www.cs.mu.oz.au/~schachte/papers/acsc96.ps.gz
04:24:17 <clausen> possibly that
04:24:39 <clausen> anyway, read some papers on parsing in haskell
04:24:41 <clausen> google it ;)
04:24:43 <DLid> how do i read ps files?
04:24:56 <clausen> are you using gnu/linux?
04:25:01 <DLid> nope
04:25:11 <clausen> I don't know how to use windows, sorry
04:25:14 <clausen> macos x?
04:25:19 <DLid> windows
04:25:20 <clausen> (it's like gnu/linux, hehe)
04:26:03 <clausen> adobe acrobat might be able to read ps files
04:26:10 <DLid> its ok, converted it to pdf
04:26:35 <DLid> hmm, this seems way too complicated
04:26:41 <DLid> isnt there an easy solution?
04:27:01 <DLid> i have 2 days to complete it and am only 1st year at University
04:27:12 <clausen> ah, ok
04:27:23 <clausen> I thought you were serious about learning everything, not just trying to finish something ;)
04:27:49 <clausen> I'm surprised it's a first year project
04:28:02 <DLid> not learning everything, cause after my exam in a couple of weeks i wont be studying Haskell anymore
04:28:17 <clausen> well, it's still useful to know this stuff ;)
04:28:20 <clausen> (and interesting)
04:28:36 <DLid> i just want to learn enough so that i can get a good mark in the exam and in this coursework
04:28:36 <clausen> you are allowed to do things outside of uni :p
04:28:47 <DLid> :)
04:28:51 <DLid> if i have time
04:29:26 <clausen> anyway, I'd do an LL(1) parser....
04:29:31 <clausen> you want to split the string up into tokens
04:29:38 <DLid> for another piece of coursework i was asked to write a web-based bulletin board in perl, eventhough we have only been learning perl for about 4 months!!
04:29:38 <clausen> i.e.
04:30:07 <clausen> "a && b && c" -> ["a", "&&", "b", "&&", "c"]
04:30:36 <clausen> DLid: that doesn't sound very hard... but it is first year...
04:30:55 <DLid> well, if you have only been learning perl for 4 months!!
04:31:03 <clausen> 4 months is a very long time
04:31:09 <DLid> i didnt find it that hard, but i spent a lot of time getting it to work
04:31:20 <DLid> not if you only have 1 lecture a week on it
04:31:47 <clausen> you don't learn languages by going to lectures
04:31:50 <clausen> you learn them by practicing
04:32:04 * DLid agrees
04:32:15 <clausen> anyway, you want something like this:
04:32:24 <clausen> parseProp :: String -> Prop
04:32:34 <clausen> hmmm
04:32:40 <clausen> actually, the tokenizer could be written a bit better
04:32:45 <clausen> I'd do this:
04:33:17 <clausen> data Token = TkVar [Char] | TkAnd | TkOr
04:33:24 <clausen> (and perhaps brackets, etc.)
04:33:24 <DLid> i would also need equivalence <=> and implies =>
04:33:30 <clausen> well, add them in
04:33:34 <clausen> anyway, you'd get a list like:
04:33:47 <clausen> [TkVar "a", TkAnd, TkVar "b"], etc.
04:34:00 <clausen> so, your main function would be something like:
04:34:16 <clausen> (isTaut . parse . tokenize) input
04:34:34 <clausen> so, parse would be [Token] -> Prop
04:34:37 <clausen> make sense?
04:34:46 <DLid> yeah, i think i get it
04:35:02 <DLid> i understand it but wont be able to write it :)
04:35:08 <DLid> oh well, have to figure it out
04:35:14 <clausen> do you know how to write tokenize?
04:35:19 <DLid> nope
04:35:19 <clausen> (which bit don't you understand?)
04:35:23 <DLid> havent done that in haskell
04:35:49 <clausen> it's not that hard...
04:35:55 * clausen hacks up a quick version
04:35:55 <DLid> i think i will just have rewrite the entry format so that it matches Prop
04:36:07 <clausen> ?
04:37:57 <DLid> so if the write A&&B, it should be And A B
04:38:02 <DLid> or something stupid like that
04:38:41 <clausen> I doubt it makes it any easier
04:39:01 <DLid> hmm, probably not, and it would be a bad idea
04:40:30 <clausen> writing parsers is a bit of an art
04:40:37 <clausen> well, it's a well researched area of computer science
04:41:01 <clausen> but, it's not something first year students need to get into
04:41:08 <clausen> anyway, you need a solution...
04:41:18 <clausen> so, a tokenizer:
04:41:34 <clausen> well, I'd write:
04:41:43 <clausen> getToken :: String -> (Token, String)
04:42:04 <clausen> getToken str = if (isAlpha (head str)) then
04:42:33 <clausen>         (TkSymbol (takeWhile isAlpha (str)), dropWhile isAlpha str)
04:42:36 <clausen>      else
04:43:05 <clausen>           if (head str == '&') then
04:43:08 <clausen> etc.
04:43:08 <clausen> get it?
04:43:39 <DLid> ill have to look at, thx anyway
04:43:45 <DLid> i dont want to take up anymore of your time
04:44:04 <clausen> ok
04:44:07 <clausen> good luck
07:50:51 * shapr blinks
07:57:32 <shapr> hi buggmuzz
07:58:33 * shapr notes that Ashley Yakely has a livejournal
12:49:22 <d-bug> hi
18:48:58 <ChoJin> anyone here ?
18:49:49 <Pseudonym> Yes.
18:51:14 <ChoJin> I need to convert a numer to string :)
18:51:17 <ChoJin> number
18:51:32 <ChoJin> dont remember the function :)
18:51:47 <Pseudonym> read
18:51:53 <Pseudonym> Sorry, show.
18:51:57 <Pseudonym> Read is the other direction.
18:52:02 * Pseudonym needs caffeine
18:52:35 <ChoJin> stupid I am
18:52:39 <ChoJin> I tried Show
18:52:40 <ChoJin> ...
18:52:46 <ChoJin> I need caffeine too :)
19:18:25 <ChoJin> -- rename all variable of a term : concatenate "_n"
19:18:25 <ChoJin> separate :: Int -> T -> T
19:18:25 <ChoJin> separate n (Var v) = Var (v ++ "_" ++ (show n))
19:18:25 <ChoJin> separate n (Constr v t) = Constr v (map (separate n) t)
19:18:33 <ChoJin> -- separate all term
19:18:33 <ChoJin> separate_list :: [T] -> [T]
19:18:33 <ChoJin> separate_list l = zipWith (.) map_fun l
19:18:33 <ChoJin>     where
19:18:33 <ChoJin>     map_fun = map separate [0..]
19:18:49 <ChoJin> Main.hs:30:
19:18:50 <ChoJin>     Couldn't match `T' against `a -> c'
19:18:50 <ChoJin>         Expected type: (b -> c) -> (a -> b) -> T
19:18:50 <ChoJin>         Inferred type: (b -> c) -> (a -> b) -> a -> c
19:18:50 <ChoJin>     In the first argument of `zipWith', namely `(.)'
19:18:50 <ChoJin>     In the definition of `separate_list': zipWith (.) map_fun l
19:18:53 <ChoJin> anyidea ?
20:02:49 <Pseudonym> Try ($) instead of (.)
20:04:47 <ChoJin> thx :)))
20:07:35 <Pseudonym> Do you see why (.) is wrong?
20:08:23 <ChoJin> yes
20:08:34 <ChoJin> I replaced by \x -> \y -> x y
20:08:41 <ChoJin> I didn't know $ was this :)
20:08:55 <Pseudonym> You could also have used zipWith id
20:09:06 <ChoJin> by the way, do you have a better idea for the same thing ?
20:09:12 <ChoJin> zipWith id ?
20:09:15 <Pseudonym> Sure.
20:09:22 <ChoJin> what do you mean ?
20:09:34 <Pseudonym> zipWith id map_ful l
20:09:36 <Pseudonym> zipWith id map_fun l
20:09:40 <Pseudonym> not map_ful
20:09:46 <ChoJin> k
20:09:58 <ChoJin> but I mean, do you have a better idea than "zipWith" :)
20:10:23 <Pseudonym> zipWith == good for this purpose
20:10:26 <ChoJin> better is : easy to read, and faster at runtime :)
20:10:44 <Pseudonym> Speed shouldn't be your concern unless you actually run the program and find it too slow.
20:11:20 <ChoJin> Pseudonym: I try to learn which structure is faster than other :)
20:11:31 <ChoJin> and this program will be slow
20:11:33 <ChoJin> I know :)
20:11:45 <ChoJin> logic resolution algorithm ... so it has to be slow :)
20:11:56 <Pseudonym> Easy to read and fast are often incompatible.
20:12:28 <ChoJin> yeah I know, but sometime ppl say, we prefer foldl than foldr etc ...
20:13:13 <Pseudonym> Well foldl/foldr often do make a difference.  foldl is accumulator recursion, foldr isn't.
20:13:49 <Pseudonym> That means that often code using foldl can run in constant space.
20:15:27 <ChoJin> k
20:18:11 <Pseudonym> In this case there's nothing like that to worry about.
20:18:20 <Pseudonym> Not in this part of the code, anyway.
20:25:36 <ChoJin> I have a kind of tree:
20:25:47 <ChoJin> -- Term
20:25:47 <ChoJin> data T = Var V | Constr V [T] | Nil deriving Show
20:26:10 <ChoJin> I have a function which take 2 T, and should find the first difference
20:26:12 <ChoJin> example:
20:26:21 <ChoJin> discord (Var v1, Var v2) | v1 == v2 = (Nil, Nil)
20:26:21 <ChoJin>                          | otherwise = (Var v1, Var v2)
20:26:33 <ChoJin> but I don't want to code all possibility
20:27:00 <ChoJin> like (Var v1, Constr ....), (Constr ..., Var v2) , (Constr ...,Constr) ...
20:27:05 <ChoJin> do you have an idea ?
20:53:44 <ChoJin> discord :: (T,T) -> (D,D)
20:53:44 <ChoJin> discord (Var v1, Var v2) | v1 == v2 = (Nil, Nil)
20:53:44 <ChoJin> discord (Constr v1 t1, Constr v2 t2) | v1 == v2 = take_first $ map discord (zip t1 t2)
20:53:44 <ChoJin>                                      where
20:53:44 <ChoJin>                                      take_first [] = (Nil, Nil)
20:53:45 <ChoJin>                                      take_first (t:tail) | t /= (Nil, Nil) = t
20:53:47 <ChoJin>                                                        | otherwise = take_first tail
20:53:49 <ChoJin> discord (t1, t2) = (Term t1, Term t2)
20:53:56 <ChoJin> is there exist already a "take_first" ?
20:55:02 <Pseudonym> There's filter, and you can take the head of the result.
20:55:15 <ChoJin> ohh yes 
20:55:17 <ChoJin> good idea :)
20:55:43 <Pseudonym> Or, of course, you could express it as a list comprehension.
20:58:41 <ChoJin> head $ [x | x<-(map discord (zip t1 t2)), x /= (Nil, Nil) ] ? (but this is exactly what filter do)
20:59:09 <Pseudonym> Right.  Note that head will bail out with an error if the list is empty.
20:59:17 <Pseudonym> So you'll probably want:
20:59:28 <Pseudonym> case [ x | stuff ] of
20:59:36 <Pseudonym>    [] -> nothing_found
20:59:48 <Pseudonym>    (x:xs) -> x
21:00:15 <ChoJin> yeah
21:25:39 <ChoJin> thx, I go to sleep :)
23:40:03 <buggmuzzUNI> hey pesco
