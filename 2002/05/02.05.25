00:50:45 <dennisb> matju left, but the function that he wanted was scan, it's like fold but gives all the partial results
00:58:11 <Heffalump> yeah
00:58:18 <Heffalump> I was going to say that but then I realised he'd gone :-)
01:03:54 <pesco> Ugh, GHC takes forever to compile.
01:04:11 <pesco> (especially when you're doing a 3-stage bootstrap of course *scratchhead*)
01:04:16 <Heffalump> yeah, it's several times worse than a kernel
01:04:18 <Heffalump> 3-stage?
01:05:17 <pesco> 1) bootstrap 4.08 from HC files; 2) build 5.02.03 from that; 3) rebuild 5.02 with itself to get GHCi
01:05:28 <Heffalump> ah, right, yes
01:05:30 <Heffalump> what arch?
01:05:31 <pesco> My CPU hurts.
01:06:05 <pesco> Heffalump: x86, but Gentoo Linux
01:07:18 <Heffalump> ah :-)
01:07:25 <Heffalump> so you're just doing it for the hell of it :-)
01:07:36 <pesco> Exactly!
01:07:51 <pesco> (why is it that these Haskell people seem to understand me so well?)
01:08:17 <dennisb> if you to little memory then it can take ages to compile (instead of just weeks :-)
01:08:39 <pesco> Gentoo builds everything from source. And to do it all the way, I decided to do the complete bootstrap without downloading a single binary.
01:08:58 <pesco> I don't trust binaries not compiled on my machine... ;-)
01:09:21 <Heffalump> aren't there hc files for 5.02?
01:09:24 <Heffalump> and how'd you get GCC?
01:09:47 <dennisb> the question is where to stop, do you trust the hardware with all the hidden code that runs there?
01:09:55 <pesco> Heffalump: OK, you have to start somewhere. GHC is in binary on the boot CD-ROM. But it gets rebuilt as soon as possible :)
01:10:31 <pesco> dennisb: What are you refering to, exactly?
01:11:03 <pesco> Heffalump: unfortunately there are no HC files for 5.02, not as I can see from the download web page.
01:11:04 <dennisb> firmwere, bios, it's everywhere and can contain lots of strange stuff
01:11:35 <dennisb> it's hard to trust a computer even if you see the source if you are paranoid enough
01:12:09 <pesco> dennisb: Right, also, I don't audit the sources either, before generating the checksum.
01:13:13 <pesco> I just don't like the general attitude of distributing binaries for a selected set of platforms. So I take a radical position and live it as far as I can.
01:13:49 <pesco> Or should I say as far as reasonable? Is it reasonable to bootstrap GHC all the way from HC?
01:14:22 <pesco> I think so, even if it takes ages. Compared to the time we spend on other things, it should be more than possible to leave one's computer alone for a night.
01:14:29 <Heffalump> HC is pretty much equivalent to binary, really
01:14:38 <Heffalump> it's not like you ever could read it to understand what it does
01:15:10 <pesco> Heffalump: In that respect yes. But I don't want to read it, I just want it to be portable.
01:15:20 <Heffalump> ah, but it's not anyway
01:15:24 <pesco> Aha, HC is not platform-independent. But unreg HC should.
01:15:42 <Heffalump> s'not though, have you ever tried compiling on an unsupported architecture?
01:16:04 <Heffalump> I once managed to get a GHC binary on sparc linux, but it didn't run
01:16:25 <pesco> That's right. GHC must of course know the architecture.
01:16:40 <pesco> After all it's supposed to generate arch-specific code... duh.
01:16:53 <pesco> But I find that to be a seperate issue.
01:17:06 <Heffalump> I think it can generate everything via C
01:17:13 <Heffalump> but I still couldn't get it to work
01:17:48 <pesco> Hm... I'd have to dig up an email I got on haskell-users stating exactly what would need adjustment for a real port.
01:18:22 <pesco> But in theory I agree, it should be possible to compile a Haskell program to complete arch-independant C
01:20:20 <pesco> But then again, what do I know about how Haskell gets compiled? Ther could be tons of little details that are just not expressable in standard C...
01:46:20 <clausen> pesco: have a look at www.cminusminus.org
01:46:40 <clausen> "Ther could be tons of little details that are just not expressable in standard C..."
01:46:47 <clausen> obviously not, since both languages are (almost) turing complete
01:46:54 <clausen> but, wrt efficiency, yes, I agree
01:47:10 <clausen> (actually, haskell is turing complete, C isn't)
01:47:25 <Heffalump> C isn't? howso?
01:47:31 <clausen> no infinite address space
01:47:41 <clausen> s/no infinite/finite/ ;)
01:47:46 <pesco> clausen: OK, I'm not very far with the theory yet.
01:48:04 <pesco> So I don't know what Turing-Complete really means.
01:48:09 <Heffalump> can't you just use the stack as infinite address space?
01:48:19 <pesco> I suspect it means that the thing models a proper turing machine, correct?
01:48:21 <Heffalump> or a big array
01:48:24 <Heffalump> pesco: yep
01:48:29 <clausen> Heffalump: you have to be able to take the address of everything on the stack
01:48:35 <clausen> Heffalump: and pointers have a fixed size
01:48:52 <Heffalump> hmm, right, yes
01:49:18 <Heffalump> no, you could model it by writing stuff out to disk
01:49:26 <pesco> OK, now I must recall what a Turing machine is. Infinite input, infinite output, right? And inbetween?
01:49:34 <clausen> esco:
01:49:36 <clausen> pesco:
01:49:42 <clausen> a machine is turing complete
01:49:46 <clausen> if it can
01:49:54 <clausen> recognize (that is, answer yes or no)
01:50:05 <clausen> any language (that is, set of strings)
01:50:08 <clausen> that a turing machine can
01:50:12 <clausen> s/any/all/  whatever
01:50:26 <clausen> a turing machine is a finite state machine
01:50:28 <clausen> with a tape
01:50:52 <clausen> it has a start, accept and reject state
01:50:59 <pesco> Ah, finite state machine. That was the part I was missing.
01:51:07 <clausen> (well, there are lots of similar machines...
01:51:16 <clausen> ... that all have equivalent computing power)
01:51:34 <clausen> input is traditionally written onto the tape
01:51:40 <pesco> Is there just one tape? I thought I had heard one for input, and another for output
01:51:53 <clausen> both machines have equivalent computing power
01:51:59 <clausen> (there is no need for an extra tape)
01:52:02 <pesco> I see.
01:52:16 <pesco> OK, so in the simplest case, only one tape full of input.
01:52:25 <clausen> well, not "full" ;)
01:52:27 <clausen> it needs to be infinite
01:52:33 <pesco> Yes. ;)
01:52:35 <clausen> (with a finite amount of input ;)
01:52:43 <pesco> OK.
01:53:21 <pesco> Can the machine seek on the tape? Or would that just also yield an equivalent machine?
01:54:55 <clausen> there's a bit more to explain...
01:55:00 <clausen> the tape has an alphabet
01:55:05 <pesco> That I know.
01:55:10 <clausen> the input alphabet must be a struct subset of the tape alphabet
01:55:15 <clausen> (that is important)
01:55:21 <pesco> OK.
01:55:22 <clausen> anyway, the state machine
01:55:32 <pesco> (strict) ;)
01:55:53 <pesco> Hah, gotcha,  C  p r o g r a m m e r !
01:55:55 <clausen> has transitions that take symbol off the tape
01:56:02 <clausen> ?
01:56:09 <pesco> You said struct. Forget it.
01:56:13 <clausen> ah
01:56:14 <clausen> LOL
01:56:22 <clausen> yeah, I can't hide the truth
01:56:24 <clausen> I'm a C programmer
01:56:49 <clausen> anyway, a state transition is:
01:56:58 <clausen> transition function, if you prefer:
01:57:00 <pesco> Yes, I'm in the process of learning about finite state machines.
01:57:12 <clausen> f(input-symbol, output-symbol, {L, R})
01:57:13 <pesco> So I think I know what one is.
01:57:18 <clausen> oops
01:57:22 * clausen talking rubbish
01:57:53 <clausen> f(state, cur-tape-symbol) -> (new-state, new-tape-symbol, {left, right})
01:58:05 <clausen> (I'm using weird notation, but it should be clear...)
01:58:21 <pesco> Hm. what are left and right?
01:58:23 <clausen> tape-symbols can be "epsilon", which means "nothing"/"anythign"
01:58:29 <clausen> pesco: the direction to move the tape head
01:58:38 <pesco> I see.
02:00:01 <pesco> So, figuratively, after reading cur-tape-sym in state, the machine enters new-state, moves the tape head leaft or right, leaving it on new-tape-sym?
02:00:44 <pesco> Oh no, does it write new-tape-symbol out?
02:01:26 <clausen> it writes it out
02:01:33 <pesco> OK, then it's clear.
02:01:35 <clausen> (if it's epsilon, it doesn't write anything)
02:01:41 <pesco> OK.
02:02:55 <pesco> Now I must bridge the gap from C being turing-complete (or almost so?) to being able to address every hardware-specific thing the Haskell compiler might need.
02:03:42 <clausen> hmm, a naive haskell compiler
02:03:57 <pesco> If Haskell is Turing-complete, and C is also so, then a Haskell program must be expressible in C, right?
02:04:07 <clausen> right
02:04:24 <clausen> (but C isn't, but it isn't really a problem... just you limit the number of objects you can create in haskell
02:04:28 <clausen> it will just blow-up ;)
02:04:50 <clausen> (there is no difference in practice, except haskell is more portable)
02:05:19 <clausen> anyway: haskell is functional, so you need to represent partially applied functions, etc.
02:05:26 <clausen> (since it has lazy evaluation)
02:05:27 <pesco> Heh, imagine our universe destructing once someone discovers it's not infinite...
02:05:47 <clausen> hehe, yeah, it's impossible to construct a turing machine
02:05:58 <clausen> (if the universe is finite)
02:06:08 <clausen> (which a lot of ppl believe... I'm not sure what it means!)
02:06:13 <clausen> (is space discrete?)
02:06:30 <pesco> What do I know? My ruler is too inaccurate.
02:07:39 <pesco> Oh well, back to the question at hand: Why can't GHC make my Haskell program into portable C?
02:09:22 <pesco> ===fptools== Finished making `all' in lang concurrent posix util data text net hssource tools ...
02:09:25 <pesco> make[1]: Leaving directory `/var/tmp/portage/ghc-5.02.3/work/stage2-build/hslibs'
02:09:43 <pesco> Woohoo! Thank you clausen, for the insightful discussion.
02:10:22 <pesco> stage 2 complete, commencing stage 3
02:33:09 * Heffalump still thinks C is Turing complete because you can write bits of your tape out to disk
04:47:35 * shapr bounces
05:29:45 <shapr> hi Yurik
05:30:12 <Yurik> shapr: hi
05:30:20 <shapr> what's up?
05:30:22 <Yurik> shapr: how are you ?
05:30:28 <shapr> I'm doing well.
05:30:30 <Yurik> i'm fine :)
05:30:33 <shapr> not writing haskell though :-(
05:30:48 <Yurik> heh
05:30:50 <Yurik> python?
05:30:56 <shapr> yes
05:31:00 <shapr> that's most of what I write.
05:31:06 <shapr> What do you mostly write?
05:31:07 * Yurik is writing mostly Java for the employer and OCaml for open-source
05:31:11 <shapr> oh
05:31:22 <Heffalump> ocaml to do what?
05:31:26 <shapr> I get to do Jython for my other job.
05:31:33 <shapr> I prefer Jython over Java
05:31:44 <Yurik> Java is required for my development for employer
05:31:47 <Yurik> so...
05:31:55 <Yurik> actually, I like Pizza more than Java
05:32:00 <Yurik> if saying about Java
05:32:08 <Yurik> Pizza is a derivative of Java
05:32:12 <shapr> mine is too, but I can prototype the app in 25% of the time in Jython
05:32:16 <Yurik> with tasty features like pattern-matching
05:32:25 <shapr> yah, I've read about Pizza, but I haven't tried it.
05:32:29 <Yurik> HOF, anonymous funcs
05:33:36 <shapr> I'll have to look at it again.
05:34:09 <shapr> Jython compiles to Java source, and Java bytecode, but nothing I would want to maintain manually.
05:40:01 <Yurik> Pizza is nice by this reason too :)
05:40:21 <Yurik> but code sometimes is quite unreadable (for example, in case of HOF)
05:41:41 <Yurik> and /me likes OCaml w/ revised syntax :)
05:45:21 <shapr> silly question, how many haskell programmers prefer emacs as an editor? it seems that haskell programmer often implies emacs user in my experience.
05:45:30 <shapr> of course, there are some notable exception on this channel.
05:46:06 <Igloo> Did someone call?  :-)
05:46:07 <Yurik> i do not program haskell (i know it only a bit), but for OCaml I prefer xemacs w/ tuareg :)
05:46:16 * shapr laughs
05:46:21 <shapr> Igloo: yes, I was talking about you :-)
05:47:10 <shapr> emacs means both flavors to me
05:49:06 <Igloo> What we need is a Haskelly editor of course - I wonder how nicely you could replace regexps with HOF over [[Char]]
05:49:26 <shapr> I'd like a Haskelly editor.
05:49:48 <shapr> I'd very much like to see an elisp engine in Haskell. then I could forevermore extend my editor in Haskell.
05:49:59 <shapr> I would be very happy about that.
05:50:36 <Igloo> I think inputting functions rather than regexps would be too verbose
05:50:55 <Igloo> But it might be possible to have Haskell at the bottom and compile regexps to Haskell functions
05:51:06 <shapr> yah, that's what I'd like to see.
05:51:21 <shapr> Haskell already has regexp support...
05:51:23 <shapr> well, ghc does.
05:52:03 <Igloo> I haven't looked at it to see what it does
05:52:37 <shapr> I wonder if anyone has written a tiny editor in Haskell
05:54:47 <Igloo> I've vaguely wondered about writing a vimish editor, but I'd have to think more about whether the input is uniform enough that it could be done beautifully
05:55:19 <Igloo> But if you wanted an editor in which you could write vim scripts you'd probably want to start by hacking at hugs
05:55:23 <shapr> input is rarely uniform :-)
05:56:30 <Igloo> vi/vim do a reasonable approximation, e.g., the use of $ for end of line in many situations, repetition counts before any command
05:58:07 * Yurik will be back soon
08:55:26 <matju> delYsid: hi
08:55:45 <matju> delYsid: Mario Lang?
09:37:38 <delYsid> hey!
09:37:58 <delYsid> I fear I completely dropped that UI project, sorry.
09:38:06 <matju> no problem
09:38:11 <matju> i have too
09:38:43 <delYsid> hacking haskell these days?
09:38:48 <matju> no
09:39:26 <matju> i was only here because of a question i had
09:39:44 <delYsid> me neither, no good haskell books online...
09:39:47 <matju> and i don't remember why i added this channel to my permanent list...
09:40:05 <matju> i still program mostly in Ruby, C, jMax
09:40:23 <delYsid> I do alot of elisp these days.
09:40:52 <delYsid> Found out that Emacs is the only crossplatform UI toolkit which works under text-mode and graphics mode equally well.
09:41:16 <delYsid> so I thought, heck, why write it, if it exists :)
09:41:39 <matju> well i wanted something more than just emacs...
09:41:46 <matju> something more UI-ish
09:42:10 <delYsid> I can build dialog boxes with the emacs framework if I need to.
09:42:20 <matju> instead of a glorified text editor with a cult
09:42:26 <delYsid> And if I cared, I could even display images...
09:42:39 <delYsid> okok :)
09:45:56 <matju> i'm busy working on GridFlow and other things now
09:52:24 <Heffalump> matju: the answer to your question about intermediate results was "scan" (scanl or scanr corresponding to foldl or foldr)
10:03:07 <matju> Heffalump: thanks
12:57:20 <SunshineCloud> werd
