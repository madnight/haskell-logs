02:08:26 * Logan finds it annoying that Haskell doesn't accept commas after final elements in lists and other contexts.
02:09:11 <clausen> why?
02:18:54 <Logan> Code maintenance.
02:19:11 <Logan> Suppose I say module Blah where ( x, y, z ) ...
02:19:15 <Logan> And later I decide to remove z
02:19:24 <Logan> I have to remember to remove the comma on the y line as well.
02:19:35 <Logan> (assuming x, y, and z are each specified on separate lines)
02:19:40 <Logan> Same with lists.
02:20:12 <Logan> All the latest C/C++ standards allow the comma after the trailing element wherever commas are used to split things, as does perl and probably many other languages.
02:20:20 <Logan> Java too.  It's very convenient.
02:31:42 <Igloo> Haskell does in places - import and export lists I think. It does seem rather ad-hoc and I tend to agree with you
02:36:20 <Logan> I don't think it works in export lists.
02:36:53 <Logan> Oh, I guess it does.
02:36:57 <Logan> My mistake.
02:37:03 <Logan> I thought I ran into a compile error regarding that before.
02:37:34 <Logan> Since 90% of my need for that in haskell is in the export list anyway, it's good enough for me. :P
02:37:45 <Logan> Though it'd be useful for literal lists as well.
20:50:21 <arete> is there a "format" type function in the prelude?
20:57:01 <Logan> To do what?
20:57:27 <arete> I want to print out a line of text including the value of some variables
20:58:20 <Logan> The most basic tool is show.
21:02:25 <arete> ahh
21:02:37 <arete> so make a list of show calls and then use concat?
21:04:06 <Logan> Yeah, although I think there's another variant of show that's more efficient for that sort of thing.
21:04:19 <arete> thanks! =)
