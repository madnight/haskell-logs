00:36:58 <Cryptor> is there any way I can separtate a module's interface and implimentation in haskell?
01:58:35 <buggmuzzuni> c/lear
01:58:42 <buggmuzzuni> stupid fingers
04:15:51 <Yurik> gene9: hi
04:17:22 <gene9> Yurik: hi
04:20:31 <Cryptor> with "data Ordered = Ordered Integer deriving (Eq, Show, Ord)", how do I make Ordered abstract? 
04:24:13 <Igloo> Just export Ordered()
04:27:01 <Cryptor> Igloo: I do this, but I can still create 'Ordered' types using for example "Ordered 2".
06:10:47 <ChoJin> hi
07:42:39 <zorb> Cryptor, all really need is to export the functions that Create/Manipulate Ordered types, the type exportation should take care of itself, iirc.
07:44:14 <Igloo> You often want to have Ordered in a type signature, though, so you need to export the name
07:46:20 <zorb> I dunno, I have an example here that doen't make use of exporting the actual type name.
07:47:11 <zorb> >module MYLIST (myhead,mytail,addto,emptyLIST) where
07:47:21 <zorb> etc.
07:47:43 <zorb> (me consults HR98)
07:47:51 <Igloo> Does the module that uses MYLIST give type signatures for it's top leverl function definitions?
07:48:05 <zorb> um.
07:48:13 <Igloo> I'm not saying it's necessary, I'm saying that it's probably desirable
07:49:07 <zorb> I think I'd agree with that.
07:49:52 <zorb> This module doesnt, but that's because I created it a while ago to explore this issue :-)
07:55:18 <jcore> my library just stocked "Purely Functional Data Types" for me
07:56:34 <Heffalump> nice libraray
07:56:37 <Heffalump> s/ay/y/
07:57:00 <zorb> Data Types?
07:57:17 <zorb> s/Types/Structures/  ?
07:57:31 <jcore> erm...yeh
07:57:32 <jcore> woops
07:57:38 <zorb> heh
07:57:52 <jcore> I'm going down to check it out this morning ;)
07:58:16 <zorb> I need to read that, too.  I've only scanned that book.
07:58:40 * zorb 's very good at only reading parts of books.
07:58:45 <jcore> heh
07:58:58 <jcore> I need to learn functional programming, but heck, I figure I'll enjoy reading that book anyway
08:00:44 <zorb> I'm confused as to if the haskell report mentions a way to separate type constructors from names in the qvar space.
08:01:34 <zorb> qvars being normal vars, data constructors, etc, i think.
08:02:08 * zorb is looking at a obsolete version anyway. perhaps that's the problem.
08:02:30 <Igloo> Type constructors and type names have different name spaces
08:02:54 <zorb> yeah, but if you look at the export list syntax, is there a way to differentiate them?
08:03:04 <Igloo> And neither are qvars
08:03:19 <Igloo> Yes, constructors are in brackets after the type name
08:03:27 <zorb> ah.
08:05:17 <zorb> hmm. time to go.
08:05:23 <zorb> ttyl.
08:12:25 * adiabatic waves to shapr
