03:53:34 <shapr> hi
03:56:31 <Heffalump> morning
03:56:36 <shapr> what's up?
04:04:04 <Heffalump> not much, was up rather late last night playing Risk
04:14:46 <shapr> I was up late playing tribes2
04:33:21 <Yurik> re
17:03:30 <yusri> hi all
17:48:43 <yusri> Anyone help w/ a question?
17:48:49 <Logan> Sure.
17:48:57 <yusri> one sec- lemme organize it ;)
17:50:03 <yusri> ok- I figured most of it out-
17:50:08 <yusri> and perhaps this is a bit general
17:50:15 <yusri> but can you explain type classes?
17:50:27 <yusri> Im asumming Eq is one
17:50:29 <yusri> and Show is another
17:51:08 <yusri> I'm drawing a blank when it comes to the 'Eq a => a -> Bool' type
17:51:23 <yusri> Guess I don;t understand => (and what's to the left of it) ;)
17:51:31 <yusri> Sorry- sure that's a bit much ;)
18:00:07 <Logan> The left of the => is the "context".
18:00:30 <Logan> It means that the function can only be used if the type that gets plugged into "a" is an instance of the Eq type class.
18:00:49 <yusri> ah
18:01:20 <Logan> So, for instance, you could make: putObj :: Show a => a -> IO ()
18:01:55 <yusri> hmmm
18:02:00 <Logan> And do putObj x = putStr $ show x without working whether or not the show function works with x (because show is :: Show a => a -> String).
18:02:28 <yusri> hmmm
18:02:29 <yusri> ok-
18:02:49 <yusri> how about if I want to make a function that would readFile a file, then 'read' that
18:02:59 <yusri> something like:
18:03:10 <yusri> readIn file = read $ readFile file
18:03:24 <Logan> I believe there is a Read class, that requires a read :: Read a => String -> a to be defined for any type a in that class.
18:03:48 <yusri> right- how to define the type for that function, due to that?
18:03:52 <Logan> Prelude> :t read
18:03:52 <Logan> forall a. (Read a) => String -> a
18:03:56 <yusri> My prob is reconciling the two ;)
18:04:02 <Logan> Ok, let's say you have some type you created named X.
18:04:06 <yusri> ok
18:04:15 <Logan> You do:
18:04:20 <Logan> instance Read X where
18:04:31 <Logan>   read x :: String -> X
18:04:34 <Logan> Er
18:04:38 <Logan>   read :: String -> X
18:04:41 <Logan>   read x = ...
18:05:02 <Logan> That says X is an instance of class Read, and then implements the functions required for types in class Read.
18:05:13 <yusri> hmmm
18:05:43 <yusri> what if the obejct I'm attempting to 'read' from the file is of an unknown type?
18:05:52 <yusri> Is there a general way of defining?
18:08:48 <Logan> Hmm, I'm not sure.
18:09:16 <Logan> Usually read is expected to return a particular type in the context of your code.
18:10:22 <yusri> hmm- ok.  I'm trying to implement some type of primitive marshalling functions
18:10:35 <yusri> for data persistence
18:11:45 <yusri> my 'dump' function 'ice' is simply: ice file dta = writeFile file ( show dta )
18:11:48 <yusri> which works ok
18:11:57 <yusri> the 'load' function seems to be the problem
18:19:36 <Logan> Hmm, I don't know haskell well enough to comment regarding data inheritence.
18:19:44 <Logan> I'm only familiar with type inheritence. :P
18:20:27 <yusri> hehe- i just wish i knew some way to make data persistent
18:20:57 <yusri> The whole "can't reassign variables" is very, very foriegn to me
18:21:31 <Logan> What are you trying to do?
18:21:33 <yusri> If I have a datastucture acting as a 'database' of sorts, and functions I can w/ params 'modify' that datastucture- how do i change it
18:21:36 <yusri> ?
18:21:37 <yusri> sheesh.
18:21:45 <yusri> can=>call
18:22:16 <Logan> I'm still trying to understand how to do that sort of stuff myself.  You may want to read up on monads.
18:22:37 <yusri> That's about 300 pages down the road in Thompson
18:22:40 <yusri> ;)
18:22:53 <yusri> I need a 'monads for idiots' guide
18:23:04 <Logan> haskell.org has links to tons of monad papers.
18:24:00 <yusri> Right- maybe I can find one that defines 'monad' using less than 300 words
18:24:16 <Logan> Yeah, there are those.
18:24:25 <Logan> There's more to understanding a monad than knowing the definition.
18:24:31 <Logan> Hold on, let me find one in particular I found interesting...
18:24:54 <Logan> http://haskell.org/bookshelf/ has a whole "Using Monads" section...
18:25:09 <Logan> http://www.research.avayalabs.com/user/wadler/topics/monads.html
18:25:15 <Logan> A bunch of papers on monads from the same guy.
18:25:25 <Logan> Try "Comprehending Monads" on that page.
18:25:32 <Logan> I haven't read them all, so there may be better ones.
18:25:50 <Logan> But that one unifies list comprehensions and monads and provides a good theoretical background.
18:25:55 <Logan> And then shows some examples.
18:26:23 <yusri> great
18:26:28 <yusri> thanks much
19:04:53 <Logan> I need a good introduction to what "Hindley-Milner type system" means. :P
19:25:06 <zorb> Logan, if you truely want some kind of modifyable data structure in haskell I could show you something i wrote a while back,   But i must warn you, its kinda ugly and truely only half implemented.  I've been meaning to take another look at it and see if I could clean it up and make something out of it.
19:25:55 <Logan> zorb: I wouldn't mind taking a look.
19:26:25 <zorb> are you familar with IORefs and STRefs?
19:26:41 <zorb> because that's bascally what it uses..
19:26:52 <Logan> I'm familiar with IO and I suppose ST stands for state transformation?
19:27:01 <Logan> I'm a relative newbie when it comes to the application of monads.
19:27:07 <zorb> yeah.
19:28:06 <zorb> ST is great if you want to create a pure function but thread imperative bits together to create it.
19:29:05 <zorb> but, if you arent familiar with IORefs and STRefs and their usage, my code isnt going to make all that much sense to you.
19:29:15 * Logan nods.
19:29:22 <Logan> I'm trying to find stuff on STRef.
19:29:31 <zorb> alright.
19:29:40 <Logan> I found some ugly powerpoint slideshow that google can convert to html for me. :P
19:30:08 <zorb> heh
19:31:08 <zorb> also doc/user-guide/sec-st.html in your ghc user guide of course...
19:34:10 <zorb> State in Haskell by (John Launchbury and Simon P Jones) isnt to bad if you translate 'thenST' into '>>=' and notice they are talking about Lazy State Threads (but ST is actually strict! ghc apparently includes a lazyST module which i havent messed with)
19:36:07 <Logan> Cool, I'll print out and mull over that paper.
19:36:16 <Logan> I'd like to write myself a good graph representation.
19:36:59 <zorb> hee.  that paper has a depth first search function written using ST :)
19:37:08 <Logan> Cool.
22:47:38 <Logan> Awesome.
22:47:44 <Logan> I just implemented my own functional graph library.
22:47:56 <Logan> It may be inefficient in areas, and is missing some functionality, but it can do topological sorts! :P
22:48:09 <Logan> topologicalSort :: Ord a => Graph a b c -> [Vertex a b c]
22:48:09 <Logan> topologicalSort g = reverse $ postOrder' $ dfs g $ zeroIn g
22:48:15 * Logan grins.
