00:08:47 <Heffalump> logan: have you looked at King and Launchbury's paper on the subject?
00:17:05 <Logan> Let me see which paper on the subject I did read.
00:17:36 <Logan> Regarding the subject of functional graph implementations?
00:28:08 <Heffalump> yep
00:28:32 <Heffalump> "Structuring Depth-First Search Algorithms in Haskell"
00:29:14 <Logan> I read something by Erwig that was very interesting.
00:29:26 <Logan> And it was followed up with an implementation I never figured out how to compile with ghc. :P
00:30:31 <Heffalump> ah, I think I might have seen that
00:31:01 <Heffalump> how does your dfs work?
00:31:02 <Logan> Both ghc and hugs barf on: instance Eq a => Eq (LPath a) where
00:31:11 <Heffalump> ummm
00:31:18 <Heffalump> ohhh
00:31:33 <Heffalump> didn't I help someone fix that up a while ago on here?
00:31:39 <Heffalump> you could try searching for LPath in logs
00:31:48 <Logan> Heffalump: Well, I was hoping to figure out how to use a monad to thread state, but it was a little beyond me, so I pass a [Maybe Vertex] to a helper function...
00:31:57 <Logan> Oh, wait, no I don't.
00:32:01 <Heffalump> (I can't remember what was going on at all - have you tried "-98"?)
00:32:02 <Logan> I thread a FiniteMap throughout.
00:32:12 <Logan> And just remove elements I visit, and return the resulting FiniteMap.
00:32:16 <Heffalump> which you use to remember where you've been?
00:32:24 <Logan> (so the dfs helper function returns (FiniteMap, [Vertex])
00:32:28 * Logan nods.
00:32:36 <Heffalump> right
00:32:54 <Logan> This was more of an exercise to learn how to do this rather than do it exactly right. :P
00:32:57 <Logan> I'd prefer to use a monad.
00:33:10 <Heffalump> take a look at the paper I mentioned (http://www.dcs.gla.ac.uk/fp/authors/David_King/structuring-dfs.ps.gz was where it was a while back)
00:33:10 <Logan> But I wanted to have a working implementation before I messed with it.
00:33:27 <Logan> And regarding your helping someone before, I asked about it here before, but I must've missed the answer. :P
00:33:30 * Logan checks his logs.
00:33:45 <Heffalump> it was a while ago
00:35:24 <Logan> Hmm, well, you basically said they shouldn't be redefining Eq for what is essentially just a list.
00:35:56 <Logan> Haha, I thought I tried jsut commenting those instance declarations out before, but apparently not.
00:55:59 <Logan> My brain just exploded.
00:56:04 <Logan> (from ghc :P)
01:02:54 <Logan> I really need to be able to use monads. :P
01:04:47 <Heffalump> oh yes, LPath is a type synonum, that was the problem
01:05:00 <Heffalump> just commenting them out wouldn't work, it'd actually break the program
01:05:01 <shapr> heh
01:05:05 <shapr> synonum is a cool word
01:05:09 <Heffalump> oops :-)
01:05:11 <Heffalump> synonym
01:05:21 <shapr> it's like V and 5, they're synonums
01:05:38 <Heffalump> hmmm...
01:05:41 <Logan> Heffalump: I recently learned that I can string together output functions using something like sequence_ $ map putStr lines
01:05:45 <Logan> Heffalump: What is the analog for input?
01:05:54 <shapr> Logan: the $ is just like adding parens
01:06:01 <Logan> Heffalump: Commenting them out did work.
01:06:03 <shapr> $ is loosely bound function application
01:06:06 <Logan> shapr: Yeah. :P
01:06:13 <Logan> It's not a question about syntax.
01:06:39 <Logan> It's really about how I might easily read n lines into a list.
01:07:15 <Logan> Oh, figured it out.
01:07:26 <Logan> sequence is for stuff that returns stuff, sequence_ is for stuff that doesn't. :P
01:08:48 <Heffalump> logan: it'd make it compile in ghc/load in hugs, but you'll have a broken program
01:09:10 <Logan> Hmm.
01:09:11 <Heffalump> logan: what precisely do you want to do, input a bunch of lines?
01:09:18 <Heffalump> when do you want it to stop?
01:09:27 <Logan> I did sequence $ replicate n getLine
01:09:30 <Logan> And it seems to do what I want. :P
01:09:35 <Heffalump> ah, cool
01:16:58 * shapr bounces 
01:17:17 <jewel> hola
01:17:25 <shapr> hi jewel! what's up??
01:17:34 <jewel> monday morning
01:17:38 <jewel> and a wet dublin
01:17:47 <shapr> yah, mondays suck
01:17:53 <shapr> it's even raining here!
01:19:06 <jewel> do you know about http://www.fosdem.org/ ?
01:19:36 <shapr> no
01:19:37 * shapr looks
01:19:58 <shapr> nifty!
01:20:09 <shapr> much cheaper than NordU in Helsinki...
01:20:20 <jewel> I'm seriously thinking of going
01:20:35 <jewel> I was even planning to get up at 4am this morning to go register at the immigration office
01:20:40 <jewel> (but then it was raining ...)
01:20:56 <shapr> heh
01:26:13 * Logan needs to invert a FiniteMap.
01:33:25 <Heffalump> just do a fold over it?
01:33:31 <Heffalump> (inserting into a new one)
01:33:53 <Logan> I can think of several ways. :P
01:34:31 <Heffalump> I guess "listToFM $ map (\(a,b)->(b,a)) $ toListFM" is shortest
01:34:57 <Logan> I did something sorta like that.
01:35:35 <Logan> Except I didn't actually need the inverted FM, I just wanted the key associated with a particular value from the original FM (the FM I'm using has a one-to-one mapping).
01:36:02 <Heffalump> ah, right
01:36:36 <Heffalump> "lookup val $ map (\(a,b)->(b,a)) $ toListFM" then
01:37:52 <Logan> Can I export a type constructor from a module?
01:39:00 <Heffalump> yes
01:40:07 <Logan> Does it consist of more than simply putting the tyep constructor's identifier in the parenthesized list immediately following the module name?
01:41:19 <Heffalump> nope
01:41:39 <Heffalump> errm, well I don't think so, anyway
01:41:49 <Logan> Hmm.
01:42:05 <Heffalump> if that's not working, try putting Datatype(Constructor) in
01:42:23 <Heffalump> assuming your type is data Datatype = Constructor
01:42:28 <Logan> It is.
01:42:47 <Logan> Cool, that fixed it, thanks.
01:43:19 <jemfinch`> does anyone use nhc98?
01:44:06 <Heffalump> module Foo(G) where
01:44:06 <Heffalump> data F = G
01:44:09 <Heffalump> worked for me, btw
01:44:13 <Heffalump> jemfinch`: I do
01:44:24 <Heffalump> (usually only to test for Haskell '98 compliance though)
01:44:32 <jemfinch`> ah, ok.
01:44:39 <jemfinch`> ghc for final compilation?
01:44:54 <Heffalump> every so often I compile my code with nhc98 and check it works
01:45:15 <Heffalump> the final result is slow but adequate
01:45:21 <Heffalump> for testing purposes anyway
01:45:34 <Logan> circles.hs:36:
01:45:34 <Logan>     My brain just exploded.
01:45:38 <Logan> I love that error message. :P
01:46:32 <Logan>     I can't handle pattern bindings for existentially-quantified constructors.
01:46:37 <Logan> I don't even know what that means.
01:47:07 <Heffalump> is circles.hs your code?
01:47:22 * Heffalump heads into the office, back in a while
01:47:38 * Logan nods.
01:48:28 <Logan> I think I'll just rewrite this function.
02:01:02 <Logan> Buh, still getting the same complaint.
02:11:29 <Logan> Heh, I love haskell...
02:11:38 <Logan> Spend a few hours getting code to compile...
02:11:44 <Logan> But as soon as it compiles it works. :P
02:21:16 <Logan> Are there any matrix libraries for haskell?
02:21:34 <Logan> Something that could simply partition a matrix and calculate its transpose is all I need. :P
02:21:55 <Logan> Maybe Array can do it.
02:26:07 <Heffalump> partition a matrix in what sense?
02:26:20 <Heffalump> you could just implement something with lists of lists
02:42:25 <Logan> The transpose operation seems tricky (doing stuff with columns rather than rows in general seems tricky).
02:42:34 <Logan> Here's a tougher question...
02:42:43 <Logan> Why is haskell too dumb to parse ".1" as a Double? :P
02:43:28 <Heffalump> writing transpose is an exercise we give our undergraduates :-p
02:43:53 <Heffalump> logan: I guess because "." is composition too
02:44:11 <Heffalump> and making the grammar more ambiguous just makes everyone's lives harder
02:44:27 <Logan> I mean the read function itself.
02:44:33 <Logan> Or is the read function meant primarily for parsing haskell?
02:44:34 <Heffalump> OIC
02:44:37 <Heffalump> no, right
02:44:54 <Logan> I see a readFloat in Numeric, I'll try it.
02:50:34 <Logan> I guess a transpose function is trivial. :P
02:51:09 <Heffalump> it's not trivial
02:54:40 <shapr> Logan: what's a finite map?
02:55:14 <Heffalump> shapr: like a hash, basically
02:55:24 <Heffalump> it's a mapping from keys to values
02:55:36 <shapr> sounds simple enough
02:55:49 <Heffalump> the "finite" bit just refers to the fact that you can't put an infinite number of key -> value pairs into the map :-)
02:55:50 <shapr> what warrants a separate name?
02:55:53 <Logan> Heh, not quite as trivial as I thought.
02:55:56 <shapr> oh!
02:55:57 <Logan> transpose :: [[a]] -> [[a]]
02:55:57 <Logan> transpose x
02:55:57 <Logan>     =   
02:55:57 <Logan>         if length (head x) > 0
02:55:57 <Logan>             then map head x : (transpose $ map tail x)
02:55:59 <Logan>         else
02:56:02 <Logan>             []
02:56:10 <Heffalump> logan: looks good
02:56:22 * Logan flexes his muscles.
02:57:48 <shapr> brb
03:00:28 * Logan is baffled at why this logic isn't doing what I expect it to.
03:01:48 <Logan> Oh, because I'm dumb.
03:02:13 <Logan> Another program done!
04:10:43 <Logan> Heh, damn one-letter typos!
05:10:57 * shapr bounces
05:37:56 <shapr> aha, cool!
05:38:01 <shapr> http://ocamlnet.sourceforge.net/doc/goals/goals.html
05:38:07 <shapr> this is just what haskell-libs needs!
05:45:47 <shapr> re jewel!
05:45:58 <jewel> heya
05:46:05 <jewel> just set up xinerama with two 17 inchers
05:46:08 <shapr> coool!
05:46:44 <jewel> the wallpaper is stretched, but everything else looks good
05:46:54 <shapr> sounds nifty
05:47:06 <shapr> I'd ask for a screenshot, but I guess that wouldn't help much...
05:47:09 <Logan> Wow, it's snowing and really windy.
05:47:19 <Logan> Just 4 days ago it was like summertime.
05:48:06 <Logan> I'm glad I don't have to go out today.
05:50:28 <shapr> hi Yurik
05:50:46 <Yurik> shapr hi
06:19:07 <Logan> Ugh, this shortest-paths function doesn't work right, it seems.
06:19:19 <Logan> I can visually inspect the graph structure and see that there's a shorter path that it's missing.
06:22:42 <Heffalump> what kind of shortest path algorithm are you doing? based on distances, or just number of edges?
06:24:08 <Logan> Based on distances, using Erwig's implementation of Dijkstra's algorithm.
06:25:06 <Logan> I can clearyly see a path that is of less cost than the one it's finding.
06:26:42 <Heffalump> did you undo the change you made to the Eq instance of LPath?
06:27:18 <Logan> No. :P
06:27:27 <Logan> I'm not sure what I should do with that.
06:28:14 <Logan> That may be it... the file where that was changed I believe is used by these routines.
06:29:13 <Heffalump> if you leave that instance deleted, the code will be *broken*
06:29:19 <Heffalump> did you try with -98, instead?
06:31:04 <Logan> No, I haven't tried that.
06:31:23 <Logan> I understand what he's doing now, at least.
06:32:11 <Logan> That's not a ghci option, is it?
06:35:40 <Logan> I can't figure out how to fix this.
06:36:29 <shapr> Logan: I'd love to check it out, but I won't be home for a coupla hours
06:36:38 <shapr> will you put your code online somewhere?
06:36:50 <Heffalump> -98 should be a ghci option
06:37:02 <Heffalump> oh.
06:37:11 <Heffalump> ghci -fglasgow-exts
06:37:13 <Heffalump> sorry
06:39:24 <Logan> Hmm, I think I tried that.
06:40:08 <Logan> The error message changes to:
06:40:08 <Logan> Overlapping instance declarations:
06:40:08 <Logan>   RootPath.hs:17: Eq (LPath a)
06:40:08 <Logan>   /usr/lib/ghc-5.02/imports/std/PrelBase.hi:165: Eq [a]
06:44:39 <Heffalump> ok, -fallow-overlapping-instances
06:44:41 <Heffalump> or similar
06:44:51 * shapr boings
06:44:52 * Heffalump strongly suggests you actually fix up this code
06:45:00 <Heffalump> look for the type LPath a = [a]
06:45:08 <Heffalump> and change it to newtype LPath a = LPath [a]
06:45:16 <shapr> ah, unit-test-first rocks my world
06:45:16 <Heffalump> and then fix all the problems that causes
06:45:28 <Heffalump> that'll make it all Haskell 98 compliant again too
06:47:03 * shapr sings twinkle twinkle little bat
06:48:32 <Logan> Heh.
06:48:42 <Logan> I wonder how many problems it'll cause. :P
06:49:02 <Heffalump> quite a few, I suspect
06:49:22 <Heffalump> but they'll all be fixable by just adding the type constructor LPath where appropriate, almost certainly
07:02:01 <Logan> Yeah, I think it's all localized to RootPath.hs.
07:09:54 <Logan> I can't work this out at all.
07:39:14 <Logan> I can't believe this is so hard for me to figure out.
07:39:21 <Logan> I guess I've been awake too long. :P
07:40:56 <Logan> So newtype X = Y makes X so that it's constructed like Y, but is really treated like a different type?
07:41:51 <shapr> that what I understand, but I've only used it once :)
07:44:37 <Logan> So if I do newtype XType a = X [a], I can't pass a valueof type XType to any function that expects a list?
07:46:07 <shapr> I don't think so
07:46:20 <shapr> not unless you pass a value of type [XType]
07:53:14 * Logan nods.
07:53:18 <Logan> I'm finally making some progress.
07:53:22 <Logan> Fixed some errors, moved on to new ones.
07:55:10 <Heffalump> logan: yep
07:55:21 <Heffalump> logan: but you can first unwrap it, then pass the value
07:55:56 <Heffalump> so "foo xs" becomes "let X xs'=xs in foo xs'"
07:55:57 <Heffalump> for example
07:56:44 * Logan nods.
07:57:02 <Logan> The hard part is figuring out what some things s hould be in these concise functions.
08:28:29 <Logan> Woah, I finally have successful compilation. :P
08:28:29 <Logan> And it works!
08:28:29 * xbill =)
08:28:29 <Logan> So now I can go back to coding my own stuff.
08:28:29 <Logan> Though one good side effect is my latest program is now complete.
08:28:29 <Logan> http://www.ntnu.edu.tw/acm/ProblemSetArchive/A_FINALS/1996/Finals96html/index.html
08:28:29 <Logan> This morning I've done A, B, C, and E. :P
08:28:29 * shapr bookmarks that
08:28:43 <Logan> B was really really easy with that functional graph library. :P
08:28:56 <Logan> It consisted of input, constructing the graph, and calling the "scc" function to get the strongly connected components.
08:29:11 <Logan> Though I guess you had to know that that's what B is asking for in order to do it that way. :P
08:29:35 <Logan> F is a nice easy one.
08:31:12 * Logan is going to do D now... looks like it'll be interesting to do in Haskell.
09:01:08 <Logan> Um, how can I cast from Int to Double?
09:02:42 <Igloo> fromInt
09:03:39 <Logan> Is that defined outside of the prelude?
09:03:43 <Logan> I figured out fromIntegral.
09:04:33 <Igloo> Oh, yes, fromInt isn't standard
09:39:24 <Logan> Problem D done!
09:39:34 <shapr> yay!
09:39:45 <Logan> This is the most of a problem set I've done in haskell so far.
09:43:52 <Logan> Problem F will be fun.
09:43:57 <Logan> But it might have to wait until after I sleep.
09:44:13 * shapr checks to see who's subscribed to haskell-libs-dev
09:57:59 * shapr does loty homework
10:08:34 * shapr sings
11:07:14 <Yurik> shapr :-)
11:47:59 <Deo> Howdy
11:48:42 <Deo> Is there anyone here?
11:49:17 <Deo> hmmmm......
11:50:42 <Deo> I guess not....
13:01:32 <Vutr__> i am there
13:01:35 <Vutr__> ops
13:01:37 <Vutr__> a  bit too late
14:25:31 * shapr wurbles
14:27:39 * shapr bounces
15:36:45 <jemfinch> do they have hash tables for haskell?
16:39:22 <yusri> anyone up?
16:51:11 <jemfinch> I'm up.
16:55:59 <yusri> hey :)
16:56:08 <jemfinch> howdy
16:56:15 <yusri> Gave up on my Haskell 'pickle' idea
16:59:44 <jemfinch> why?
17:00:13 <jemfinch> can't you just define a type class "Serializable" that supports two operations, "pickle" and "unpickle"?
17:01:26 <jemfinch> you're not going to get a generic pickle like Python has, but then, not everything can be pickled (this is even true in Python)
17:02:13 <jemfinch> I don't code in Haskell, so I could be entirely offbase, but it seems to me that pickle would be relatively easy to implement.
17:11:33 <jemfinch> no comment?
17:21:56 <yusri> Well, you have to be even less general w/ haskell
17:23:04 <yusri> you have to define what type 'read' will turn the string into- that's the problem
17:23:21 <Logan> Good morning!
17:23:25 <yusri> I suppose, though, if you only pickle/unpickle one particular type, it'd work
17:23:28 <yusri> hey :)
17:23:42 <water> hi
17:23:45 <yusri> hey
17:24:01 <jemfinch> you can't specify an type class with two functions, pickle : 'a -> string, and unpickle : string -> 'a?
17:25:44 <Logan> I doubt you can make a single function that returns two different types.
17:26:26 <jemfinch> Haskell has parametric polymorphism.
17:26:42 <yusri> does that apply to type definitions?
17:26:48 * yusri looks around
17:26:50 <jemfinch> so in theory, you can have a function that takes "any type" ('a in ML terms) and returns a string.
17:27:14 <yusri> well, that's not the biggy
17:27:30 <yusri> the 'show' func does that (without any boundaries that i know of, at least)
17:27:31 <jemfinch> and aren't you able to restrict functions to certain "classes" of types?
17:27:40 * Logan nods.
17:27:47 <yusri> it's the 'read' funct that requires an explicit type to convert String -> a
17:28:08 <yusri> as in String -> Database, etc
17:28:32 <Logan> Maybe you could make a Serializable a => String -> a ?
17:28:33 <yusri> IMHO
17:28:41 <jemfinch> yeah, that's what I'm saying.
17:28:44 <Logan> Not that that's any different from Read.
17:29:27 <yusri> well, i suppose- if I could somehow define Serializable dependent on the type the instance is...
17:29:47 <yusri> as jemfinch said- I have no idea how to accomplish that, however
17:30:29 <yusri> Serializable could somehow define 'read'?  
17:30:35 * yusri is in over his head
17:30:38 <Logan> The problem is that it'll take on a type dependent on the context in which you use it in the code.
17:30:46 <yusri> right
17:30:49 <Logan> You'd have to make your own object structure.
17:30:59 <water> heh i can take pages of lisp but this stuff is a bit much :)
17:31:01 <Logan> And you'd probably have to develop your own object handling routines.
17:31:09 <yusri> right
17:31:12 <Logan> To mimic the sort of OO stuff other languages offer.
17:31:14 <jemfinch> Logan: that doesn't sound right.
17:31:38 <Logan> Haskell doesn't seem to be object-oriented, to me.  Just type classes.
17:31:53 <jemfinch> where's a haskell tutorial that covers type classes?
17:32:02 <Logan> http://www.haskell.org/tutorial ?
17:32:12 <Logan> Hmm, maybe you can do it.
17:32:35 <Logan> I think I can think of how to do single inheritence and so forth.
17:32:44 <Logan> But it may be a little to much for my current, paltry haskell skills.
17:32:55 <yusri> Mine are even more pathetic
17:33:15 <yusri> But, i'll have a go at creating a simple un/pickler for one particular type
17:33:24 <yusri> since that's all i need it for, anyhow
17:33:26 <yusri> ;)
17:34:36 <jemfinch> class Serializable a where
17:34:39 <Logan> Your object methods would correspond to functions available for particular type instances.
17:34:43 <jemfinch>   pickle :: a -> string
17:34:49 <jemfinch>   unpickle :: string -> a
17:34:51 <jemfinch>  
17:34:55 <jemfinch> that seems like what you'd want.
17:35:05 <yusri> hmmm.. lemme play w/ it
17:35:37 <Logan> The hardest part would be your unpickle function, which would have to determine the object by inspection.
17:35:43 <Logan> s/object/& type
17:35:59 <Logan> Somehow it'd have to know about every object type.
17:36:08 <jemfinch> Logan: no it wouldn't.
17:36:13 <Logan> I think java can get away with things like reflection.
17:36:27 <jemfinch> that's the point of type-classes -- you can write functions that operate on a single type and make them part of a typeclass.
17:36:27 <Logan> It'd either have to know about the object or know to pass on the data to some other function that does.
17:36:42 <jemfinch> Logan: oh, you might be right.
17:36:47 <Logan> jemfinch: But let's say you have a serialized object, but no idea what type in the object hierarchy it really is.
17:37:06 <jemfinch> yeah, you'd have to dispatch on a type-tag or something.
17:37:12 <Logan> This doesn't prevent you from doing OO, I just think it makes large, complex object hierarchies tedious, maybe.
17:37:22 <Logan> Because you have to chain together all your unpickles.
17:37:45 <Logan> Which means superclasses have to know about subclasses.
17:38:05 <Logan> Seems like it wouldn't take much to modify haskell to get around that, maybe.
17:39:53 <Logan> Also, I'm not sure if haskell supports real object polymorphism at all (like virtual method calls).
17:40:18 <Logan> Once you cast an object into the type of its superclass, you can no longer regain the information that's lost.
17:40:27 <Logan> Unless you store it in a particular manner.
17:40:31 <yusri> yeah, I'd still depend on read to convert it to an object, and to do that I have to supply a type to read, i beleive
17:40:38 <jemfinch> Logan: such a restriction is necessary for safety.
17:40:38 <Logan> I guess you could make it a FiniteMap or something.
17:42:43 <yusri> is there a way to define a type of a function dependent on certain params?
17:42:56 <yusri> via a guard, perhaps?
17:43:36 <yusri> or... merely another function- though i don't know if you can change the type of a function during runtime
17:43:41 <yusri> redefine, that is
17:44:28 <Logan> http://www.cs.chalmers.se/~nordland/ohaskell/
17:47:22 <_Luke> can anyone tell me why this doesn't typecheck:
17:47:27 <_Luke> data NineOp = Plus | Minus | Times | Divide | Negate deriving (Eq)
17:47:27 <_Luke> programs :: [NineOp]
17:47:27 <_Luke> programs = [(op : subprog) | op <- ops, subprog <- programs,
17:47:27 <_Luke>             op /= Negate || (head subprog) /= Negate]
17:47:27 <_Luke> ops :: [NineOp]
17:47:28 <_Luke> ops = [Plus, Minus, Times, Divide, Negate]
17:48:02 <Logan> Are you doing that nine problem? :P
17:48:17 <_Luke> yes :)
17:48:42 <_Luke> I hope this isn't spoiling it for anyone, I don't know if it will work but am stuck on the type error :)
17:48:55 <Logan> What is the error message?
17:49:13 <_Luke> ERROR "/home/luke/devel/haskell/Nines.hs":8 - Type error in application
17:49:13 <_Luke> *** Expression     : head subprog
17:49:13 <_Luke> *** Term           : subprog
17:49:13 <_Luke> *** Type           : NineOp
17:49:13 <_Luke> *** Does not match : [a]
17:49:38 <_Luke> er, actually... :)
17:49:55 <Logan> What is ops?
17:50:07 <_Luke> the whole thing is wrong, subprog should just be a call to programs, not being sucked out of a generator :)
17:50:15 <_Luke> its defined up there
17:50:19 <Logan> Oh.
17:50:30 <Logan> I'm not very good at using list comprehensions yet.
17:50:35 <Logan> So I tend to do things in a more verbose manner.
17:51:32 <_Luke> what I just said is quite wrong, too. :)
17:51:38 <_Luke> it's late, but I'm a victim of curiosity..
17:54:57 <Logan> I'd build all permutations of ops.
17:55:04 <Logan> Hmm.
17:55:46 <Logan> I would define perm n = map (perm n + 1) ops
17:56:05 <Logan> Well, something vaguely like that.
18:00:06 <_Luke> ERROR "/home/luke/devel/haskell/Nines.hs":22 - Instance of Fractional Integer required for definition of run
18:00:23 <_Luke> know what type it's fishing for? I tried e.g. "Fractional Integer => [Integer]" and other wild guesses, but none worfk
18:09:31 <_Luke> I got the types working, but I get a stack overflow evaluating 'programs'. I thuoght lazy evaluation would be ok there, even thuogh it's an infinite tree?
18:09:40 <_Luke> is there some "trick" i can do to make it "lazier"?
18:38:38 <yusri> ok- another question
18:38:53 <yusri> given: 
18:38:56 <yusri> type Database = [(String, String)]
18:39:44 <yusri> well- answered it myself. :)
18:40:13 <_Luke> be sure to fill in a performance review of yourself on the way out ;-0
18:42:05 <yusri> :-D
18:42:29 <yusri> It was one of the those dumb mistakes I didn't feel like sharing
18:44:19 <_Luke> I wrote my 9s program in haskell, ran it, got a stack overflow, and now I have _no idea_ what to do next. :)
18:46:01 <_Luke> it looks to me like a clever lazy evaluator should be able to pluck values from the top of my infinite tree, but I don't understand the haskell's order-of-ops semantics
23:52:05 <jemfinch> aha!
23:52:09 <jemfinch> Logan: you there?
