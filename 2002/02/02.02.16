02:03:48 <shapr> weird email that hit the haskell mailing list
02:05:10 <Heffalump> hmm, yes
02:05:39 <shapr> my first reaction is "he's trying to drum up a holy war so he can get free programmers"
02:05:54 <Heffalump> I'm not quite sure what he's on about
02:07:11 <shapr> goood morning Heffalump!
02:07:18 <Heffalump> morning :-)
02:07:22 <shapr> what's up?
02:08:06 <Heffalump> not much
02:09:35 <shapr> work is distracting me from fun code :-/
02:10:40 <Heffalump> :(
02:13:22 <shapr> oh hey
02:13:28 <shapr> I was going to ask you about those debs
02:13:45 <shapr> some weeks ago you said you have HOpenGL debs 
02:13:52 <shapr> and that they're 200MB or something
02:14:08 <shapr> if you don't mind sharing them, I'd love to try them out.
02:14:42 <Heffalump> oh, sure
02:14:48 * Heffalump tries to remember where he put them
02:15:02 <Heffalump> I haven't tested them at all
02:16:29 <shapr> I can test them.
02:16:34 <shapr> did you build them for debian/sid?
02:16:52 <Heffalump> woody
02:16:55 <shapr> oh
02:16:56 <Heffalump> Oh. I was a factor of 10 out
02:16:59 <Heffalump> they're only 20M :-)
02:17:06 <Heffalump> http://munchkin.comlab.ox.ac.uk/~ganesh/for_shapr/
02:17:10 <shapr> w00
02:17:25 * Heffalump . o O ( call myself a mathematician... )
02:17:26 * shapr slurps
02:17:55 <Heffalump> I didn't bump any version numbers or anything
02:21:14 * shapr bounces happily
02:21:28 <Heffalump> do they work then?
02:21:40 <shapr> I don't know yet
02:21:51 <shapr> I only have a 256k connection at home.
02:22:05 <shapr> and I really shouldn't play with them at all before mondey
02:22:08 <shapr> mondey
02:22:08 <Heffalump> :-)
02:22:10 <shapr> ack
02:22:13 <shapr> mondAy
02:22:49 <shapr> oh I saw your name online recently, attached to an IP paper.
02:22:56 <shapr> I think on lambda.weblogs.com
02:25:22 <Heffalump> which paper?
02:26:03 <shapr> I forget the title.
02:26:23 * shapr looks
02:28:23 * shapr finds a really big picture of Heffalump
02:28:50 <Heffalump> eeek!
02:28:56 <Heffalump> which one? :-)
02:29:28 <shapr> http://www.ox.compsoc.net/~ganesh/
02:29:30 <shapr> ;)
02:29:41 <Heffalump> ah.
02:29:51 <Heffalump> :-0
02:29:54 <Heffalump> s/0/)/
02:30:01 <shapr> is that anywhere close to recent?
02:30:12 <Heffalump> the one with the train isn't :-)
02:30:22 <Heffalump> the other two are about 3 years old
02:30:45 <shapr> heh
02:30:55 <shapr> I kind of guessed the train wasn't so recent
02:31:46 <shapr> it looks like your early passion for lego finally found full expression in functional programming.
02:32:11 <Heffalump> hrrm :-)
02:33:14 <world> hello
02:46:54 <shapr> hi ChoJin 
03:08:52 * shapr moxes fruvously
03:08:59 <ChoJin> hi
03:09:39 <shapr> hi snark
03:09:48 <Logan> Heh.
03:09:54 <shapr> frabjous, totally frabjous.
03:09:59 <shapr> calloh callay
03:10:06 <shapr> er, "calooh"
03:10:14 <shapr> hi Logan 
03:10:32 <Logan> Hi shapr.
03:11:40 <shapr> well
03:11:51 <shapr> I guess my frabjousness scared him off
06:24:29 <Yurik> re
06:25:09 <Heffalump> 'lo
07:06:18 <shapr> I sometimes wish Zope were written in Haskell
07:06:37 <shapr> I keep trying to write code as if it were
07:13:16 <shapr> when a line of code starts like this: map(reduce(filter(map(
07:13:22 <shapr> you know it's time to clean it up
07:15:44 <Heffalump> use some $ signs
07:15:49 <shapr> ok... filter runs one 'verb' across many 'nouns'
07:16:01 <shapr> but if I want to run many 'nouns' across one 'verb'
07:16:10 * shapr probably needs to take a break
07:16:29 <shapr> Heffalump: I'm writing Python code but thinking in Haskell, that's why my head is exploding ;)
07:17:09 <Heffalump> ah :-)
07:17:23 <shapr> but if I can figure it out in Haskell, I can probably write it in Python
07:17:33 <shapr> so...
07:17:42 <shapr> how would I run filter the other way?
07:18:01 <Heffalump> I don't understand what you mean
07:18:12 <shapr> if I have five conditions
07:18:15 <Heffalump> do you want to use lots of functions on one element?
07:18:18 <shapr> right!
07:18:51 <Heffalump> and what do you want to do with the results?
07:18:55 <shapr> just like filter
07:18:58 <shapr> return true or false
07:19:11 <Heffalump> but filter gives you a list of the things which true was returned on
07:19:19 <Heffalump> in this case, the thing will always be the same
07:19:37 <shapr> basically, I have a list of items, I have a list of conditions.
07:19:46 <shapr> I only want the items which satisfy all conditions.
07:20:02 <shapr> hmm
07:20:20 <shapr> could I use a cartesian product of filter?
07:20:47 <Heffalump> foldr filter xs fs
07:21:12 * shapr thinks about that
07:29:37 <smkl> you can also use something like (f /\ g) x = f x && g x to combine the conditions
07:30:52 <Heffalump> yes
07:33:29 <shapr> what does (f /\ g) do?
07:33:47 <smkl> "(f /\ g) x = f x && g x" defines it
07:34:32 <shapr> oh :)
07:34:45 <smkl> then you can do "filter (cond1 /\ cond2 /\ cond3) lst"
07:35:08 <Heffalump> or filter (foldr (/\) (const True) conds) lst
07:35:16 <Heffalump> if you don't know how many there'll be in advance
07:35:44 <shapr> hm, nifty
07:36:13 * Heffalump thinks his solution is shorter :-)
07:36:17 <Heffalump> my original one that is
07:36:48 <Heffalump> but the other one might be more space efficient
07:36:57 <Heffalump> or at least give the GC less work to do
07:43:53 <shapr> man I wish I had partial function resolution in Python
12:50:27 <Logan> Can you do partial function resolution in scheme?
12:51:15 <Logan> Oh, I guess with eval and quoting.
12:54:41 <smkl> do you mean partial application?
13:03:06 * Logan nods.
13:03:14 <Logan> I was mimicking shapr's word earlier.
13:03:15 <Logan> :P
13:03:56 <smkl> you can do partial application in both scheme and python. it's just cumbersome
