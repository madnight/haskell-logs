01:38:20 <Yurik> hiall
01:38:22 <Yurik> hi all
02:32:27 * shapr bounces
02:32:30 <shapr> hi Yurik 
02:32:54 <Yurik> shapr hi
02:33:16 <shapr> what's happening Yurik?
02:33:33 <shapr> did you think of a better application data exchange protocol?
02:34:08 <shapr> currently, I'm still covinced that lisp style syntax expressions (sexps) are the best overall 
02:39:57 <Yurik> nope, haven't found yet
02:40:58 <Yurik> the most complex thing that I should exchange Erlang modules with non-Erlang modules and reduce data to Erlang "data types
02:41:09 <Yurik> s/"data types/"datatypes"/
02:45:42 <shapr> the Twisted server framework from TwistedMatrix.com has a sexp exchanger
02:46:08 <shapr> currently it has modules for at least python, elisp, and java. I think I heard rumors of an erlang module
02:46:50 <Yurik> is it implemented in C and than wrapped for python,elisp and java?
02:47:58 <shapr> actually, I think it's implemented in Python, Elisp, and Java
02:48:11 <shapr> I think there's also a C version, but I don't know any details
02:48:13 <shapr> let me check
02:54:46 <shapr> hm
02:55:17 <shapr> Yurik: check it out: http://twistedmatrix.com/spread.epy
03:10:58 * Yurik is browsing
03:35:23 <ChoJin> hi
03:35:31 <shapr> hello ChoJin 
03:35:32 <shapr> what's up?
03:35:48 <ChoJin> anyone here ever coded a neuronal network in haskell ? :)
03:36:00 <shapr> not me
03:36:10 <ChoJin> I am a beginner in haskell, and I need to code this, I have some problem :)
03:36:12 <shapr> but there are several experience haskellers here
03:36:32 <ChoJin> I love haskell, I just need experience I guess :))
03:36:37 <shapr> me too
03:37:02 <shapr> for both :)
03:37:09 <ChoJin> I'm happy to find a haskell channel :)
03:37:18 <ChoJin> k brb in 10min, need to eat :)
03:37:49 <shapr> sure :)
03:48:50 <ChoJin> back :)
03:49:38 <ChoJin> ok I have a type neuron: type Neuron = (Value, [Value] -> Value), and I want to code a printNeuron
03:49:44 <shapr> oh
03:49:50 <shapr> well
03:50:00 <shapr> as far as I understand it, you have two choices
03:50:23 <shapr> you can either define a show instance for that type synonym
03:50:33 <shapr> or you can use newtype and make your own show instance for that
03:50:51 <ChoJin> how can I define a show instance for that type synonym ?
03:51:44 <Igloo> You can't make show instances for type synonyms. You'd need to use newtype
03:52:11 <Igloo> Or you could just write a function of another name that takes a Neuron
03:52:31 <Igloo> What should printNeuron do out of interest?
03:52:39 <ChoJin> debugging :)
03:52:50 <ChoJin> I build a list of neuron
03:52:56 <ChoJin> and I want to print the state
03:53:10 <Igloo> The state is the first value?
03:53:17 <ChoJin> yes
03:53:27 <Igloo> How is Value defined?
03:53:38 <ChoJin> type Value = Float
03:53:39 <ChoJin> :)
03:54:24 <ChoJin> atm I use this:  print $ buildLayer 5 42.0 sumNeurons
03:54:28 <ChoJin> but of course it doesn't work
03:54:35 <ChoJin> No instance for (Show ([Value] -> Value))
03:54:50 <Igloo> Right, you want a fst in there
03:55:02 <Igloo> (fst is defined as fst (x, y) = x)
03:55:06 <ChoJin> buildLayer just build a list of n neuron with value x and function sumNeurons :)
03:55:19 <ChoJin> k :)
03:55:30 <Igloo> Oh, if it's a list you'll need to map fst across it
03:55:57 <ChoJin> thx
03:55:59 <ChoJin> it works :)
03:56:38 <ChoJin> a problem I often have, is the library report doesn't seem to have all function inside
03:56:51 <ChoJin> I need a description of _all_ standard function
03:57:00 <shapr> ?
03:57:16 <shapr> http://haskell.org/onlinelibrary/
03:57:16 <shapr> ?
03:57:28 <ChoJin> http://www.haskell.org/definition/haskell98-library.ps.gz
03:57:32 <ChoJin> I read this :)
03:57:35 <Igloo> You're missing the prelude
03:57:43 <Igloo> In the language report
03:59:21 <ChoJin> Igloo: did you have ever coded a neuronal network ? :)
03:59:27 <ChoJin> (just in case ;) )
03:59:55 <Igloo> No
04:00:28 <Igloo> Sorry
04:02:56 <ChoJin> you dont have to be sorry :)))
04:03:12 <Igloo> Sorry  :-)
04:14:46 <ChoJin> where is fst in the onlinelibrary ?
06:48:46 <Igloo> http://research.microsoft.com/Users/simonpj/haskell98-revised/haskell98-report-html/standard-prelude.html#$vfst
07:51:35 <jewel> Where would I find examples of reading a file line-by-line in haskell?
11:49:23 <Logan> jewel: There are several ways...
11:49:31 <Logan> I've been meaning to try out the interact function.
11:49:40 <Logan> interact         ::  (String -> String) -> IO ()
11:49:40 <Logan> interact f       =  do s <- getContents
11:49:40 <Logan>                        putStr (f s)
11:49:55 <Logan> You can use the lines function to split a String at newlines.
11:51:43 * Logan goes to get food.
11:51:49 <jewel> bye
11:52:24 <Logan> jewel: I have whole bunch of programs that read data from file or stdin and process it and output results.
11:52:33 <Logan> jewel: I can put them up for you when I get back if you want.
11:52:38 <jewel> that would be kind
11:52:41 <Logan> They are more verbose than necessary, as I'm still learning.
11:53:52 <jewel> I won't critique :-)
11:56:12 <yusri> hmmm- I'd like to see those, too
11:59:43 <xbill> interact plays weirdly with a lot of stuff.
12:04:39 <Logan> http://loganh.com/haskell/20020209/
12:05:18 <Logan> The problems they solve are at http://www.ntnu.edu.tw/acm/ProblemSetArchive/A_FINALS/1996/Finals96html/
12:13:38 <ChoJin> still noone who ever coded a neuronal network ? :)
15:16:44 * shapr wrestles with regexes
15:30:00 <Logan> shapr: What about them?
20:43:59 * tmoertel just finished the 10-20-30 card game from the 1996 ACM programming comp
20:47:25 <Logan> tmoertel: Awesome!
20:50:01 <tmoertel> Link: http://www.moertel.com/~thor/pragprog/acm-contest-1996/
20:50:57 <Logan> tmoertel: Try the bicycle delivery problem (if you know your graph theory). :P
20:51:08 <Logan> Though that's hard if you haven't done any graphs in haskell and don't have a graph library.
20:51:23 <Logan> I found the trellis problem was really really easy.  And the prelim problem is even easier.
20:51:45 <tmoertel> I think that I solved the bicycle program while in the shower today.
20:53:53 <tmoertel> And, yes, looking at it like a graph problem rather than a geom search problem made the light bulb go off.
20:54:36 <tmoertel> When I get a few minutes I'll code up the solution w/ FGL.
20:55:37 * xbill notes graph algorithms always come back to haunt you.
20:56:21 <Logan> I've been emaning to test and fix my bicycle solution.  I can think of a way to break it. :P
20:56:30 <Logan> I'll have fun breaking people's submissions during practice on Sat.
20:56:40 <Logan> Yeah, FGL makes it easy (once you fix FGL so it compiles).
20:56:57 <tmoertel> What's on Sat?
20:58:34 <Logan> We have programming team practices.
20:58:40 <Logan> Practicing for the international in March in Hawaii.
20:58:53 <Logan> I'm assistant coaching (so I have to write test data for all these problems and do the judging during practice).
20:59:01 <Logan> For once I'm ahead of the game.  I only have one more problem to solve.
20:59:19 <tmoertel> Gotcha.
20:59:31 <Logan> How do you intend to do the bike one?
21:00:43 <tmoertel> Start with an empty graph.
21:00:53 <tmoertel> Add start and end points as verticies.
21:01:04 <tmoertel> Do the same with all points on the building-defining rectaingles.
21:01:48 <tmoertel> Add edges between all vertices whose respective points are connected by a line that doesn't intersect the interior of a building.
21:02:02 <tmoertel> Let the weights of the edges be the distance between the respective points.
21:02:12 <tmoertel> Find shortest path from start vertex to end vertex.
21:02:25 <tmoertel> At least, that's the approach I'm taking.
21:03:16 <Logan> Yep, that's how I did it.
21:03:23 <Logan> I made a list of line segments...
21:03:58 <Logan> Which are the line segments making up all rectangles, plus the diagonals of each rectangle (to prevent cutting through the rectangle, but I need to refine that a little).
22:50:29 * tmoertel goes to bed
