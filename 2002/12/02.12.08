00:49:15 * seth is away: I'm busy
00:50:21 * seth is back (gone 00:01:06)
04:58:49 <Marvin--> good god this is depressing
04:58:53 <andersca> d-i stuff?
04:59:00 <Marvin--> no, I've been marking assignments
04:59:05 <andersca> ah ok
04:59:09 <andersca> what course?
04:59:15 <Marvin--> data structures (D2)
04:59:21 <andersca> ah
04:59:25 <Marvin--> I was marking five returns
04:59:36 <Marvin--> out of which I had to return four of them again, on pretty much the same grounds as the first return
04:59:47 <Marvin--> which is very depressing
04:59:51 <andersca> yeah :/
04:59:53 <andersca> People are generally stupid(tm)
05:00:10 <Marvin--> the irony is that the group on which I had most comments was the group that had fixed everything, so I passed them
05:21:02 <Stewart002> hi all
05:21:40 <Stewart002> can someone help me understand the | conditional ?
05:24:30 <Marvin--> Stewart002: sure, ask away
05:24:43 <Stewart002> well, I have a function that won't run :P
05:25:33 <Stewart002> it's 5 lines long, can I paste it here?
05:25:48 <Marvin--> privmsg it instead
05:25:52 <Stewart002> k
05:26:35 <Marvin--> well, I see the syntactic problem right away
05:27:05 <Marvin--> the syntax is, for every line, '|' <bool-expr> '=' <expr>
05:27:39 <Marvin--> the first branch where the boolean expression evaluates to True will be chosen
05:27:44 <Marvin--> and 'otherwise' is just an alias for True
05:27:53 <Stewart002> oh, okay
05:28:00 <Stewart002> damn that book :P
05:28:06 <Marvin--> what book?
05:28:35 <Stewart002> I returned it since (was preordered) erm, something like foundations in functional programming?
05:28:49 <Marvin--> don't know that one
05:28:58 <Stewart002> I'll look for the title.
05:29:19 <Stewart002> meanwhile... so I swap otherwise for 'True' ?
05:32:05 <Stewart002> it still gives the same error.
05:32:40 <Marvin--> no, using otherwise is good
05:32:52 <Marvin--> but you don't have an = on the third line
05:33:17 <Marvin--> and having more guards after  | otherwise  = ...  is pointless, since otherwise evaluates to True, so it'll always pick that branch if none of the earlier branches have been picked
05:33:28 <Stewart002> I see.
05:33:30 <Marvin--> you can see it as the 'else' branch of an 'if ... else if ... else if ... else' chain
05:34:21 <Stewart002> okay, the next lines were based on if otherwise then run this if (see what I mean?)
05:35:06 <Stewart002> the book was (I think) "Haskell: The Craft of Functional Programming"
05:35:32 <Marvin--> that's a good book
05:35:54 <Marvin--> but why have an otherwise if you're going to continue testing?
05:36:01 <Stewart002> yea, I was understanding it, i just have this error. (and someone else booked it from the library)
05:36:28 <Marvin--> you can have several guards in a row
05:36:57 <Marvin--> I mean, you don't have to nest them :)
05:37:17 <Stewart002> still gives unexpected '|'
05:38:03 <Stewart002> definately on the first line with a guard
05:38:47 <Marvin--> oh, sorry
05:38:53 <Marvin--> that's because you shouldn't have an = before the guards
05:38:58 <Stewart002> ah
05:39:03 <Marvin--> foo | bexpr = xyz
05:39:49 <Stewart002> okay, now, unexpected . (code in privmsg)
05:40:41 <Stewart002> I'm possibly getting over complex there (x.xs)
05:41:37 <Marvin--> x:xs :)
05:42:07 <Stewart002> unexpected : :P
05:42:56 <Stewart002> woo
05:42:57 <Stewart002> got it
05:44:19 <Stewart002> lol
05:44:26 <Stewart002> unexpected ;
05:44:39 <Stewart002> there isn't a ; there!
05:45:20 <opet> maybe a layout thing with the guards?
05:45:52 <Stewart002> nope, they're all straight.
05:46:01 <Marvin--> no tabs?
05:46:12 <Stewart002> nope
05:46:13 <andersca> Marvin--: have you tried purify at mdstud?
05:46:30 <Stewart002> I assume [x] is usuable syntax?
05:46:34 <Marvin--> andersca: not for a long time
05:46:37 <Stewart002> as a list of x
05:46:41 <Marvin--> Stewart002: [x] means a list with a single element
05:46:58 <Marvin--> so if xs is a list, [xs] is a list of lists
05:47:08 <Stewart002> yes, I have to return [Record] so I make x into [x]
05:47:11 <Stewart002> ohhh.....
05:47:30 <Stewart002> still same error
05:47:41 <Marvin--> yes it shouldn't have anything to do with layout :)
05:47:55 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":121 - S
05:47:57 <Stewart002> yntax error in declaration (unexpected `;', possibly due to bad layout) 
05:48:07 <Marvin--> try moving the guards so they're on their own lines, like this:
05:48:09 <Marvin--> foo
05:48:10 <Stewart002> 121 is the first line in the function.
05:48:12 <Marvin-->   | ...
05:48:13 <Marvin-->   | ...
05:48:25 <andersca> wow
05:48:25 <Marvin--> then it may be the function before it
05:48:27 <andersca> it actually works
05:49:16 <Stewart002> I'll admit "| otherwise indirect3 (filterfrom destination x (filterprodep arrival x flights)) b" is a hell of a line.. but
05:49:29 <Marvin--> Stewart002:  | otherwise  = indirect3 ...
05:49:32 <Marvin--> Stewart002: you forgot the =
05:49:49 <Stewart002> lol, oh damn
05:56:07 <Stewart002> hmm
05:57:07 <Stewart002> filterOr destination x (filterProDep arrival x flights)           should equate to String -> [Record]   yes?
05:58:39 <Marvin--> what type does filterOr have?
05:59:15 <Stewart002> filterOr and filterProDep are String -> [Record]
05:59:15 <Marvin--> you probably need parentheses somewhere
05:59:39 <Marvin--> that means they should just take one argument, but currently you give them three arguments
05:59:43 <Stewart002> it's a mess, hold on.
05:59:46 <Marvin--> and destination?
05:59:58 <Stewart002> no, x is a record. destination x is a string.
06:00:35 <Marvin--> (destination x) is a String
06:00:41 <Marvin--> I'm not sure what you're trying to do
06:01:23 <Stewart002> filterProDep arrival x flights        takes all flights that depart after the flight arrival x arrives
06:02:01 <Marvin--> first of all you probably want (arrival x)
06:02:12 <Marvin--> and second, didn't you say filterProDep :: String -> [Record]
06:02:20 <Stewart002> yes
06:02:20 <Marvin--> or is it :: String -> [Record] -> [Record]?
06:02:30 <Stewart002> String -> [Record]
06:02:47 <Marvin--> String -> [Record] means it just takes one argument, a String, and returns a [Record]
06:02:49 <Stewart002> I think I have to change it to String -> [Record] -> [Record]
06:02:59 <Marvin--> but you're giving filterProDep two arguments, a String and a [Record]
06:03:04 <Stewart002> I had the function assuming to were searching all records.
06:03:16 <Stewart002> bah, I'll rework it. give me a minute
06:03:19 <Marvin--> (actually, you're giving it three arguments, but I assume you mean (arrival x) instead of arrival x)
06:03:50 <Stewart002> hey, at least I understand the problems I have now (better than a few weeks ago)
06:03:59 <Marvin--> :)
06:05:18 <Stewart002> filterOr :: String -> [Record] -> [Record]
06:05:19 <Stewart002> filterOr place = filter (from place) flights
06:05:23 <Stewart002> what goes after place
06:05:27 <Stewart002> [r] ?
06:05:38 <Stewart002> or r
06:07:31 <Marvin--> r, and replace flights with r
06:07:42 <Stewart002> yep, wan't sure on the []s
06:08:16 <Marvin--> [r] would only be matched by a list with exactly one element
06:09:09 <Marvin--> food
06:10:24 <opet> mmm...food
06:18:00 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":117 - I
06:18:01 <Stewart002> nstance of Eq Record required for definition of indirect2 
06:18:02 <Stewart002> ick
06:18:11 <Stewart002> I don't understand that one.
06:20:35 <Stewart002> anyone?
06:26:05 <Stewart002> Record is a data Record I made, what does Eq mean?
06:28:58 <Heffalum1> it means you need to define an equality test for Record
06:29:36 <Stewart002> and now the dummies guide to version?
06:29:46 <Heffalump> instance Eq Record where
06:30:15 <Heffalump>    Record {...} == Record {...} = ...
06:30:26 <andersca> yo Heffalump
06:31:00 <Stewart002> and ... is?
06:31:18 <andersca> you could prolly just use deriving Eq in your data declaration
06:31:24 <Heffalump> oh, good point
06:31:33 <Heffalump> ... would be the contents of the Record structure
06:34:19 <Stewart002> okay, it runs and does what I expected, now I have to make it do as it's told :P
06:37:22 <Stewart002> how to fly between a and b choosing what flights to take. It returns b (ick) :)
08:07:10 * seth is away: I'm busy
08:07:21 * seth is back (gone 00:00:02)
12:34:32 <whee> someone shoot me :|
12:34:44 <seth> Any particular reason?
12:34:47 <whee> anyone with basic Parsec experience?
12:35:05 <seth> Some, not a lot.
12:35:20 <whee> I'm having an amazingly hard time expressing something simple, I essentially want to reimplement the "words" Prelude function but using Parsec constructs
12:35:42 <seth> The parsec docs have an example of doing exactly that
12:36:55 <whee> hrm, doesn't seem to be what I need though
12:37:07 <seth> what needs to be different?
12:37:21 <whee> they're using explicit spaces, commas, etc. I'd like to seperate my words by anything that isn't a word
12:37:27 <whee> so that anything that isnt is just ignored
12:38:01 <seth> You want the termination character to be specified in a list of characters?
12:38:24 <whee> no
12:39:18 <whee> I'm having trouble getting it to seperate words based on characters that aren't words
12:39:52 <whee> I don't want to explicitly say what isn't a word and what should be used as a seperator, I want it to be anything that doesn't match being a word
12:40:28 <seth> Well, OK, so then a termination character is anything not in some variable that you'll pass in?
12:41:24 <whee> I define a word = many1 alphaNum, so a non-word is anything else (which will be ignored until the next alphaNum)
12:41:46 <seth> OK, that should be straightforward.
12:42:21 <seth> what is your code doing (instead of what you want it to do)?
12:43:02 <whee> not the right thing :)
12:43:34 <whee> I'm not sure what to do to get a list of words out of this, tried a many/skipMany combo, sepBy, manyTill
12:43:44 <seth> Hold on one second...
12:43:47 <whee> one of those ended up giving me a list of a single word
12:44:20 <whee> and then I was having problems because it would attempt to apply word to a non-word character and then die there
12:46:33 <seth> I have some code that I did this with a couple of months ago; let me see if I can find it.
12:57:09 <whee> manyTill almost does what I want actually, except it eats a character extra
12:58:39 <seth> I think you can push back the character, although that is obviously kludgy
12:59:12 <whee> this should be easy to do, I must be overlooking something
13:01:15 <seth> Yes, I vaguely remember being able to specify whether to consume the terminator, but I was comparing Parsec with the parser generator and I may be confusing the two.
13:08:12 <whee> heh got it to parse a single word :\
13:08:42 <seth> How?
13:09:32 <whee> word = many1 alphaNum; words = do { skipMany (notFollowedBy alphaNum); word }
13:10:16 <whee> which returns a single one, and wrapping a many around words there results in a runtime error of "combinator 'many' is applied to a parser that accepts an empty string." :|
13:11:12 <seth> Yes, that violates the type signature of the combinator.  But you can do it in a pattern, something in the Maybe A line.
13:15:38 <whee> no idea how to do that :P
13:23:53 <whee> did you find anything about this from previous things seth?
13:34:11 <whee> guess I could make this unnecessarily complicated and use happy, heh
13:45:04 <whee> I'm beginning to think that parsec can't even do this :p
13:46:19 <seth> I think that it probably can.  But note that in the docs they make a lexer similar to the one in Happy.
13:47:27 <whee> I really don't understand this runtime error
13:48:00 <Igloo> What are you trying to do?
13:48:31 <whee> I just want to implement Prelude's 'words' using Parsec
13:49:30 <whee> except not splitting on spaces, but anything that isn't an alphanumeric
13:51:08 <Igloo> Is there a function that takes a (Char -> Bool) and gives you a parser for a Char?
13:51:32 <whee> yes, I have a parser construct that correctly returns a word
13:51:45 <whee> my problem is getting all the words, not just the first one
13:52:11 <whee> I can't get it to skip over characters that aren't word characters
13:52:29 <Igloo> What is the function called?
13:52:35 <whee> which?
13:52:57 <whee> erm
13:53:09 <whee> satisfy
13:53:49 <whee> alphaNum is the parser that succeeds for alphanunmerics
13:55:04 <Igloo> Does this typecheck?
13:55:04 <Igloo> all_words = many one_word
13:55:04 <Igloo> one_word = do cs <- many (satisfy isAlpha)
13:55:04 <Igloo>               many (satisfy (not . isAlpha))
13:55:04 <Igloo>               return cs
13:55:18 <Igloo> *You'll probably need to import Char)
13:56:05 <whee> yes, it compiles
13:56:29 <Igloo> Probably works then
13:56:49 <whee> nope
13:56:54 <whee> Fail: Text.ParserCombinators.Parsec.Prim.many: combinator 'many' is applied to a parser that accepts an empty string.
13:56:55 <Igloo> Oh. Why not?
13:57:12 <Igloo> Ah, good point
13:57:23 <Igloo> Change them to many1
13:57:25 <whee> if I could figure that out I'm sure I could get something that works. But I have no idea what that means or how to fix it.
13:57:25 <whee> heh
13:57:32 <Igloo> But you'll need to do some fudging for the beginning and end
13:58:13 <Igloo> (or just rewrite it a bit to not use many for the spaces)
13:58:40 <whee> actually, it does work. heh
13:59:17 <whee> my problem was that I didn't want to define another parser for something that isn't alphanumeric
13:59:31 <whee> I was hoping there was a way to eat a character as long as it didn't match the alphaNum parser
13:59:34 <Igloo> If it works how I think it does you shouldn't have to
14:01:32 <Igloo> all_words = do cs <- many1 (satisfy isAlpha)
14:01:32 <Igloo>                rest <- all_words
14:01:32 <Igloo>                return (cs:rest)
14:01:32 <Igloo>         <|> do anyToken
14:01:32 <Igloo>                all_words
14:02:09 <Igloo> Oh, except you need a basecase
14:02:28 <Igloo> <|> return [] on the end will probably do it
14:02:41 <Igloo> And that oen ought to work nicely at beginnings and ends too
14:04:46 <whee> indeed
14:04:56 <whee> now the question is which one is faster. hmm. heh
14:05:08 <Igloo> Well, the second one is correct
14:06:08 <whee> and you are correct, I didn't test entirely :|
14:06:56 <dark> Ah, the old correctness vs. speed tradeoff :)
14:07:46 <Igloo> I suspect the first is very slightly faster, but not enough to be worth considering for most use
14:08:55 <dark> I wouldn't choose for speed reasons without first measuring, anyway.
14:09:18 <Igloo> Yeah - definitely not in this case
14:30:46 <dark> Bah, an underscore in a library name.
14:31:53 <Igloo> Why is that bad?
14:35:55 <Igloo> Hmmm, is there really no way of holding state in the IO monad in H98?
14:36:40 <Igloo> I guess I could use invisible GTK labels...
14:37:02 <Igloo> Or maybe something in the FFI spec, although now I think about it visible labels probably aren't a bad iade anyway
14:38:37 <dark> Igloo: Other than IORef?  If you need global state, there's the trick System.Random uses.
14:38:46 <dark> Either that or implicit parameters.
14:39:12 <Igloo> IORef isn't in the IO module?
14:39:17 <dark> Data.IORef
14:39:28 <Igloo> That's not H98
14:39:34 <dark> Oh :)
14:42:42 <dark> If you're using FFI, you could keep a Ptr to some state.
14:43:00 <dark> I think it's even garbage-collectible if you use a StablePtr.
14:43:28 <Igloo> Hmmm, yeah, although I think visible labels are probably the best idea anyway
14:44:02 <Igloo> Oh, and I will need to go non-N98 if I want to have any sort of concurrency too
14:45:43 <whee> hrm
14:47:05 <dark> I want hierarchical modules too much to stick to the Haskell98 ones :)
14:47:25 <dark> I rely on the libraries that come with GHC, but I don't use -fglasgow-exts.
14:47:32 <whee> Igloo: now what if I didn't want to build the list and just iterate through, instead of appending the word to the rest would I just use all_words instead of 'rest <- all_words;return blah blah'?
14:48:32 <Marvin--> anyone used Clean?
15:00:12 <Igloo> huh?
15:01:30 <whee> if I didn't want to build the list and instead wanted to get a word, do something with it, and repeat, how would the structure change?
15:02:52 <Igloo> You'd probably use it as is and map something across it, or possibly apply the function to cs in the return statement
15:05:43 <dark> I didn't see the original code, but I like using fmap on IO computations.
15:06:27 <dark> ls <- fmap lines getContents
15:07:00 <whee> hrmf trying to figure out how to avoid using an intermediate structure with parsing now
15:07:23 <Igloo> He's using parsec
15:07:26 <whee> I'm thinking a function that just gets the next word, does something, and recursese
15:07:42 <whee> something outside the actual parsing part
15:07:44 <Igloo> What is the type of the result you want?
15:08:20 <whee> I don't know, anything. heh
15:09:28 <whee> I'm not looking for a particular result, just trying to figure out how to do something like a stream for example, where I can get a token, do something, get another, do some more
15:10:11 <Igloo> What does "do something" mean?
15:10:30 <dark> whee: Lazy evaluation might do all that for you.
15:10:38 <dark> whee: It's one of the cases where it shines.
15:11:38 <whee> igloo: like, do something :)
18:06:29 <dark> Strange, no iterateM
18:12:54 <dark> Looks like foldM (\a _ -> animate_penguins screen background image a) penguins [1 .. 300] is what I need.
18:15:00 <Igloo> Euch
18:18:15 <dark> I improved it :)  I realized that there's no need for animate_penguins to return the next state, I can calculate that without using IO.
18:18:26 <dark>     let animation = take 300 (iterate (move_penguins ssize) penguins)
18:19:58 <dark>     mapM_ display_penguins animation
18:20:38 <dark> There's still something wrong.  My penguins don't bounce.
18:22:15 <Igloo> Not updating the screen?
18:23:10 <dark> They move, but they fall off the bottom and right edge instead of bouncing back :)
18:23:42 <dark> Okay, fixed it.  My bounce function was wrong.
18:23:51 <dark> At least I now know clipping works correctly :-)
18:24:34 <dark> 21 fps with 100 penguins.
18:25:14 <Igloo> How does that compare to C/C++?
18:25:40 <dark> The C version is also 21 fps with 100 penguins :)
18:25:53 <dark> Looks like most of the work is done in the SDL lib here.
18:26:33 <Igloo> Cool  :-)
18:30:17 <Igloo> Hmmm, I think I like GTK less the more I use it
18:34:04 <dark> That's not good.  What's the reason?
18:36:59 <Igloo> Messing about with GCs and things (probably equally bad in the equivalents), the passing around of widgets is irritating as is the existence of both Gtk and Gdk Window and Pixmaps
18:37:19 <dark> Adding various accelerations brought it up to 46 fps, with 47 fps for the C version.  Still looks good :)
18:37:45 <Igloo> :-)
18:37:58 <Chilli> Hi guys!
18:38:05 <Igloo> Hi Chilli
18:38:13 <dark> Igloo: Hmm, might still be better than the HOpenGL version, which has implicit GCs and windows.  Severely impure.
18:38:30 <Igloo> I have done some more bits and bobs of gtk+hs, but it's in an even worse state than the last lot ATM
18:38:59 <Chilli> Igloo: unhappy with GTK+?
18:39:21 <Igloo> Yeah
18:39:43 <Chilli> What's the prob?
18:40:19 <Igloo> The main problems are probably my lack of understanding of GCs and limitations of H98 to be honest  :-)
18:41:34 <Chilli> What are you doing with the GCs? (Except setting colours?)
18:41:34 <dark> Providing the modules from fptools might be easier than staying within H98 :)
18:41:59 <Igloo> I'm using the draw functions on pixmaps
18:42:56 <Igloo> Well, I as hoping to be. I appear to be generating assertion failures ATM  :-)
18:43:34 <dark> As long as it's not EUSUCK
18:47:42 <Igloo> Argle
18:47:48 <Chilli> and what's the H98 stuff you fight with?
18:48:32 <Igloo> I can't get a GdkWindow (to get the GC) before showing the window, but I can't create the button bar without it so I can't do the standard anti-flicker things
18:48:43 <Igloo> Well, I guess I could pass the window aruond all the time, but that's nasty
18:49:01 <Igloo> Chilli: Lack of IORef makes things pretty much impossible I think
18:49:29 <dark> My penguin animation had similar problems, several functions got "screen background image" parameters, or similar.
18:49:32 <Igloo> And if I want to have interactivity while doing computation I'll need concurrency stuff too
18:50:37 <Igloo> Global variables would make things a lot simpler, unfortunately
18:51:07 <Chilli> sure, you need IORef or MVars for any serious GUI programming with GTK+
18:51:37 <Chilli> that's simply because the Gtk+HS API is just the GTK+ API refelected into Haskell
18:51:49 <Chilli> and the original API relies very much on a stateful programming style
18:51:59 <Chilli> have you had a look at the Boolean editor?
18:52:16 <Chilli> I wrote it mainly to eomstrate what I think is the best way to use Gtk+HS
18:52:17 <Pseudonym> This is why I don't like GTK.
18:52:25 <Pseudonym> Well, it's one of the reasons.
18:52:33 <Chilli> This is not a problem with GTK+ par se
18:53:05 <Chilli> all fully-fledged GUI toolkits have a state-based API
18:53:19 <Pseudonym> It's still an OO model embedded in a language with no OO support.
18:53:26 <dark> I'm willing to believe that GTK+ is the toolkit that sucks the least :)
18:53:31 <Chilli> I view getting to a nice gUI API for HAskell as a two stage process
18:53:33 <Igloo> I have a feeling I stopped looking at it after finding it use a different style of naming to that used by the gtk+hs code...
18:53:45 <Chilli> (1) provide the statebased API in Haskell
18:53:51 <Chilli> (2) put something nicer on top
18:54:08 <Chilli> Gtk+HS solves (1)
18:54:10 <Pseudonym> Very possibly.
18:54:18 <Chilli> iHaskell is an attempt at (2)
18:54:28 <Pseudonym> I want ObjectIO for X.
18:54:32 <Chilli> unfortuantely, iH is rather unfinished
18:54:46 <Pseudonym> I don't care what toolkit it uses, either.
18:54:56 <Chilli> well I do care
18:55:03 <dark> What is ObjectIO currently for?
18:55:04 <Chilli> vanilla X is a pain to use
18:55:22 <Chilli> and I want tools like Glade to build my interface
18:55:47 <dark> The runtime part of glade might be easier to reimplement than to link to.
18:55:58 <dark> If you want to have a nice interface, that is.
18:56:58 <Chilli> dark: ?
18:57:07 <Chilli> Glade works fine with Gtk+HS already
18:57:28 <Pseudonym> Does Glade generate Haskell source?
18:57:42 <Pseudonym> Or is there a haskell adapter which reads the XML?
18:57:47 <clausen> glade can generate xml output
18:57:56 <clausen> (which it can parse on-the-fly)
18:58:00 <clausen> which might be a good solution
18:58:41 <Pseudonym> GTK and GTK+ really do rub me the wrong way for some unknown reason.
18:58:53 <Pseudonym> I'm not entirely sure why.
18:58:57 <Chilli> the Haskell binding used with Gtk+HS binds libglade, which reads the XML
18:59:12 <Chilli> (Glade cannot generate Haskell)
19:04:13 <Igloo> Right, I now have something that just about works. Time for bed.
19:08:18 <Chilli> 'night, Igloo
19:08:24 <dark> Hmm, I have an aesthetics question.
19:08:50 <dark> I'm defining an Event type for SDL.  One of them has a C struct that looks like this:
19:08:59 <dark> typedef struct {
19:08:59 <dark>         Uint8 type;     /* SDL_ACTIVEEVENT */
19:08:59 <dark>         Uint8 gain;     /* Whether given states were gained or lost (1/0) */
19:08:59 <dark>         Uint8 state;    /* A mask of the focus states */
19:08:59 <dark> } SDL_ActiveEvent;
19:09:33 <dark> I'm trying to decide between ActiveEvent Bool [AppState], and EventActiveGain [AppState] | EventActiveLose [AppState]
19:10:15 <dark> An even further mutation would be to split up the [AppState] and return [Event] with one AppState each.
19:10:41 <dark> (Either way there would be many other alternate constructors for the Event type)
19:11:14 <Pseudonym> What does this event mean?
19:11:22 <Chilli> hmm
19:11:41 <Pseudonym> I ask because the answer to this kind of question is almost always to put yourself in the shoes of the user.
19:11:56 <Pseudonym> As a user, what is most useful to you?
19:12:01 <Chilli> dark: depends a bit on how this struct is used
19:12:04 <dark> The event signals changes in status like "application has mouse focus", "application is active".  I'm not sure what the last one means, actually.
19:12:48 <Pseudonym> My guess is that the user will appreciate not having to write so many handlers.
19:12:53 <Pseudonym> Particularly if they want to ignore them.
19:13:51 <dark> Ignoring could be done separately, there's a function for filtering out events by type.
19:14:22 <dark> I expect that events will usually be handled via pattern matching, but I'm not sure since I've never done it in Haskell myself :)
19:14:58 <Pseudonym> In this case, I think it would be best to go for the literal translation.
19:15:06 <Pseudonym> Change it later if it turns out to be annoying.
19:16:10 <dark> I guess someone might want a FiniteMap EventType (Event -> IO ()) or something.
19:16:49 <dark> I'm already going to need a separate EventType type for the filtering function :)
20:11:36 <dark> Wow, SDL has support for multiple keyboards.
