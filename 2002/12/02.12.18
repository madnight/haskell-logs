01:51:13 * sethk is away: I'm busy
01:51:20 * sethk is back (gone 00:00:03)
02:03:32 * sethk is away: Don't say anything until I return.
02:03:49 <xkb> anything
02:27:55 <xkb> hmmz
02:50:32 <xkb_> What do continuations have to do with partial evaluation?
02:51:16 <lament> hmmm
02:51:25 <lament> nothing?
02:51:49 <xkb_> Thats my idea 2
02:51:59 <xkb_> some paper here refers to it
02:52:05 <xkb_> as though they are related
02:52:46 <xkb_> perhaps in the implementation of partial eval.
02:53:19 <lament> yes.
02:53:49 <xkb_> If I understand it correctly PE is source->source?
02:53:51 <lament> CPS makes partial eval. very simple, conceptually
02:55:17 <lament> PE is function - function :)
02:56:03 <xkb_> in functional terms yes :D
02:56:43 <xkb_> I thought it might help me in my "quest" for a good exception mechanism
02:56:46 <xkb_> but alas
03:01:59 <Akriel> Can someone help me pleas
03:02:00 <Akriel> e
03:02:08 <Akriel> With this code
03:14:56 <ludde> I have N random bit strings. Let k_i be the number of initial zeroes in string i. What is the average value of max(k_i, i=1..N) ?
03:17:14 <xkb_> isnt that 0..N?
03:18:49 <ludde> how do you mean? max should evaluate to a single number
03:19:42 <xkb_> the range should be over each bitstring I suppose? from the first (0) to-and-including the last N-1?
03:19:57 <xkb_> just a matter of choice
03:20:01 <ludde> yes
03:20:07 <ludde> well, with 1..N i mean all the N strings
03:20:11 <xkb_> k
03:21:30 <xkb_> Perhaps you should try to write the specification formally first
03:22:33 <ludde> how do you mean?
03:30:07 <xkb_> u can write it as a quantor
03:30:10 <xkb_> something like
03:30:47 <xkb_> <SUM i : i from string: max(i)>
03:30:48 <xkb_> etc
03:31:14 <ludde> i don't recognize that syntax
03:31:54 <xkb_> hmm.. Its a bit hard to explain over IRC
03:32:06 <xkb_> and if u dont recognize it.. dont use it :D
03:34:18 <ludde> ok
03:34:29 <ludde> but, there is no other way to solve the problem?
03:34:59 <xkb_> What have u got so far?
03:35:06 <xkb_> besides the spec.
03:35:12 <ludde> i have a C program that calculates the average value :)
03:35:22 <ludde> but i'd like to do it mathematically
03:35:26 <xkb_> aha.. new to functional programming?
03:35:34 <ludde> not really
03:36:11 <xkb_> then convert the C program :D
03:36:16 <ludde> it was simpler to do it in C.. i don't know any simple way to generate random numbers in haskell.
03:36:18 <ludde> but
03:36:33 <ludde> my problem is not how to convert it to haskell, but how to get a mathematical expression for the result
03:36:48 <xkb_> Random nr in haskell: look at the library report on Random
03:37:36 <xkb_> Do the bitsting represent numbers?
03:37:42 <xkb_> natural numbers?
03:37:53 <ludde> the bit string is a string of bits
03:38:11 <xkb_> so whats the max over a sting of bits?
03:38:31 <ludde> what do you mean?
03:40:26 <xkb_> the spec. says: Whats the average value of max(k_i,over all bitstrings)
03:41:06 <ludde> k_i is a number, k_i is the number of initial zeroes in bitstring i
03:41:47 <xkb_> so max k_i is defined as a single nr?
03:41:52 <ludde> yes
03:42:03 <ludde> k_i is a number, and max on a set of numbers is also a number
03:42:08 <xkb_> What does the average in the spec do then?
03:43:07 <ludde> since the bit strings are random, the average means what is the average value you get after trying with many bitstrings
03:43:15 <xkb_> aha
03:44:21 <xkb_> could u msg me the c-code? Im getting curious :D
03:48:08 <ludde> ok
06:14:33 * shapr rebounds
06:15:12 * shapr jumps over Igloo
06:15:37 * shapr slides on the icy surface
06:31:37 <whee> oh, nuts. slept through my vhdl class :)
06:31:46 <whee> (yes I'm happy about that one. heh)
06:32:41 <ibid> Igloo: ayh?
06:33:42 <whee> also, maybe someone knows an answer to my crazy question now. given 'data Blah = Bleh Integer | Bloop String' is it possible to write f :: Blah -> (whatever type the data constructor takes)
06:34:17 <Igloo> Yes
06:34:37 <ibid> Igloo: i have a problem with Haskell2LaTeX :-)
06:34:48 <Igloo> (having discovered I was scrolled up so missed being jumped over  :-)  )
06:34:50 <Igloo> Oh?
06:35:34 <Igloo> No, whee
06:35:43 <whee> not even with ghc's fancy extensions?
06:35:55 <Igloo> Don't know about them
06:36:45 <ibid> what about f :: Blahable a => Blah -> a ?
06:36:47 <ibid> :-)
06:37:01 <whee> heh, I guess that would work :P
06:37:18 <ibid> Igloo: Scanner finished with input still left at line 649, character 54
06:37:18 <ibid> Fail: Couldn't use all parsers
06:37:22 <Igloo> Oh, true
06:37:25 <ibid> Scanner finished with input still left at line 649, character 54
06:37:25 <ibid> Fail: Couldn't use all parsers
06:37:27 <ibid> argh
06:37:30 <Igloo> ibid: What is that line?
06:37:42 <ibid> input file is http://savannah.nongnu.org/cgi-bin/viewcvs/ebba/ebba-h/AbstractSyntax.hs (1.6)
06:38:06 <ibid>     show (e `CartesianProduct` f) = "(" ++ show e ++ "  " ++ show f ++ ")"
06:38:10 <ibid> that's the line
06:38:12 * Igloo looks confused at the above Blah line and gets confused again
06:43:19 <ibid> i suppose i need to \usepackage Haskell2LaTeX in the document?
06:43:32 <ibid> does it get installed?
06:44:19 <Igloo> What version do you have, ibid?
06:44:43 <Igloo> Yes, you do, and, errr, no, it appears not
06:44:59 <ibid> straight from http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Haskell2LaTeX/, downloaded today
06:45:12 <Igloo> And what command line are you running?
06:45:44 <ibid> Haskell2LaTeX AbstractSyntax.hs
06:45:44 <Igloo> Doh, I was using literate mode
06:46:20 <ibid> all the -s options seem to succeed
06:47:54 <Igloo> Ah, it's a D7, not an 'x'
06:48:37 <Igloo> You'll need to either alter the lexer to accept that or use \ddd in the string
06:49:39 <ibid> Igloo: it's that picky in strings??
06:49:52 <Igloo> For the former, add it to the list of things in lexc_graphic in Haskell2LaTeX-0.3.0/Haskell2LaTeX/Scanner.lhs
06:50:57 <ibid> Igloo: btw, packages should  \RequirePackage, not \usepackagew
06:50:58 <Igloo> It allows exactly what the report specifies except for the unicode stuff
06:51:08 <ibid> "except for the unicode stuff
06:51:10 <ibid> "
06:51:12 <Igloo> Ah, OK, ta
06:51:14 <ibid> this is latin 1 :-)
06:52:31 <Igloo> The report says "graphic -> small | large | symbol | digit | special | : | " | '" and "symbol ->  ascSymbol | uniSymbol (excluding a few special ones)". uniSymbol is what would allow D7.
06:52:54 <ibid> yeah :-)
06:52:55 <Igloo> ascSymbol is just a list of characters
06:56:00 <Igloo> I guess I could just declare characters 128-255 to be graphic
06:56:08 <ibid> if Haskell would support Unicode in real life too, then it would be fun to have constructors like :\/ (the latter depicts LOGICAL OR :-)
06:56:24 <Igloo> Yeah  :-)
06:56:30 <ibid> i mean, i used \/ to depict the Unicode character LOGICAL OR
06:56:39 <Igloo> *nod*
06:57:14 <ibid> anyway i excerpted the Predicate declaration and it looks wonderful :-)
07:08:38 <Igloo> Bah. OK, lazy IO sucks.
07:09:00 <inkedmn> 'morning guys
07:09:00 <ibid> the logo is, hmm, ...
07:09:09 <shapr> y0 inkedmn, wassup?
07:09:18 <inkedmn> not much, just workin'
07:09:24 * shapr suddenly realizes no one knows the founder password for #haskell
07:09:32 <Igloo> ibid: The Haskell2LaTeX logo?
07:09:36 <ibid> yeah
07:09:52 <Igloo> Hey, I do code, not graphics  :-)
07:09:59 <Igloo> Feel free to suggest a better one  :-)
07:13:18 <Heffalump> including shapr?
07:13:31 <shapr> Heffalump: correct
07:13:45 * shapr wanders off to fix that problem
07:13:56 <Heffalump> how can you fix it if you don't know it?
07:14:03 <shapr> go talk to an irc op
07:14:08 <shapr> er, server op
07:14:31 <Igloo> Oh, shapr, You'll be pleased to know I've been writing HUnit tests, BTW  :-)
07:14:57 * shapr cheers happily
07:15:01 * shapr bounces cheerfully
07:15:08 <shapr> yay!
07:29:42 * Marvin-- curses his students again
07:30:00 <Igloo> Oh?
07:30:02 <mgoetze> Marvin--: whatcha teaching?
07:30:13 * sethk is back (gone 05:26:40)
07:30:24 <Marvin--> not teaching, I'm a TA on a course on data structures
07:30:38 * Marvin-- is marking programming assignments
07:31:00 <mgoetze> Marvin--: ah... going for a dr.?
07:31:18 <Marvin--> I return the lab to them, saying "this and this and that doesn't work" and also ask some general questions about their implementation. Sure, they fixed the problems, but didn't comment on my questions
07:31:20 <Marvin--> #%#¤#&#"
07:31:37 <Marvin--> mgoetze: well, yes, but I'm just a regular student, we do this on a pay-per-hour basis, sorta
07:32:20 <Marvin--> hdaume: I was going to mail "tee" to you, but I see someone else already did :-)
07:32:39 <mgoetze> Marvin--: ah, right... :)
07:35:29 <Marvin--> haha, this is amusing, their implementation of Dijkstra was actually correct, it was the code for printing the result that had a bug
07:35:51 <shapr> ok, we have a founder password again.
07:36:03 <mgoetze> shapr: what is it? :)
07:36:34 <Marvin--> this group though, are going to hate me *sigh*
07:36:53 <shapr> mgoetze: :-P
07:37:08 <mgoetze> Marvin--: which semester are you in?
07:37:11 <shapr> mgoetze: you probably don't need it
07:37:20 <shapr> you got staff powerz
07:37:59 <mgoetze> nah, not enough staff powers :)
07:38:07 <Marvin--> mgoetze: fall semester? ;) this is my fourth year, I'm going to do my master project during spring
07:38:20 <shapr> speaking of which, have you decided on one?
07:38:54 <mgoetze> Marvin--: that would put you in your 7th or 8th semester according to german counting...
07:39:15 <Marvin--> mgoetze: yeah, it's the seventh :)
07:39:18 <mgoetze> Marvin--: is sweden completely bachelor-master-ized?
07:39:35 <Marvin--> mgoetze: we just normally count years, not semesters
07:40:09 <Marvin--> mgoetze: no, not really, bachelor and master are just the official ways we translate it, I have no idea how well it maps
07:41:16 <mgoetze> but you need, in any case, two different types of degrees before you qualify to try for a dr.? what are the swedish names?
07:41:18 <Marvin--> a bachelor project is a half-semester project that you can do after three years of studying, a master project is a full-semester project that you do after four years (or, rather, three and a half, the project is the last semester)
07:41:54 <kev> I think that's about the same as the UK
07:41:59 <Marvin--> well, you can do a bachelor (kandidat) first, and then do another half-semester project to sort of upgrade it to master (magister), but few do
07:42:17 <Marvin--> normally you do it in one go, so to speak
07:42:36 <mgoetze> ah
07:42:56 <Marvin--> PhD program is normally four years, and you take a "pseudo" degree, licentiate, after about two of those years
07:43:37 <Marvin--> normally, the licentiate is just one or two of your papers with a preface :)
07:43:38 <mgoetze> here in germany, you generally have the choice between enrolling for a bachelor (3 years) or a diploma (5 years) at the start, or you have to decide after your prediploma (2 years)
07:43:57 <Marvin--> wow
07:44:10 <Marvin--> after two years of studying, I still didn't know whether I wanted a degree in maths or CS
07:44:46 <mgoetze> except that it seems that the eu has already decided to abolish everything besides bachelor's and master's programs, without really telling anyone
07:44:55 <Marvin--> really? cool :P
07:45:00 <mgoetze> expect your university system to be different by 2012 :)
07:45:07 <mgoetze> no, it's not cool at all
07:45:26 <Marvin--> by 2012 I expect to be done with my master ;)
07:45:31 * mgoetze thinks the traditional german degree programs ensure a much higher standard of education.
07:45:53 <mgoetze> yes, well, i'm happy that i'll still be getting a good ol' german diploma
07:48:09 <Marvin--> *shrug* I don't really care one way or another, it'll always just be what you make of it anyway
07:49:51 <mgoetze> yeah, there are just some things that suck. e.g. at my uni, we get a lot of masters students from abroad, sometimes with a quite apalling lack of prerequisite knowledge, and then they have lectures together with people in the diploma programs, so that essentially a lot of what is taught is repetition for them
07:51:41 <Marvin--> we have this international masters program in Dependable Computing Systems or something, I think it's abbreviated DCS anyway, but I think that it's pretty well balanced
07:52:18 <Marvin--> was a bit odd the first half of the semester, when I was TA in one course that the DCS students took, and the other course they took, I took too
07:53:51 <mgoetze> heh
07:54:48 <Marvin--> both courses were on programming languages, so they were using stuff from the other course in the assignments I was marking
07:55:26 <mgoetze> so, i take it you decided for cs and against maths?
07:55:38 <Marvin--> yes ;)
07:56:00 <Marvin--> when marking, I wrote back comments like "Regarding your reference to Pitts' notes: The LFP only has bound
07:56:00 <Marvin--> variables, not free variables as your language has. That is, the only
07:56:00 <Marvin--> place where variables are introduced is lambda abstraction (:fn). And
07:56:00 <Marvin--> expressions like  \x.M ; \y.M'  aren't allowed, since  \x.M  doesn't
07:56:00 <Marvin--> have the type cmd. Instead, the LFP deals with locations, and has a
07:56:01 <Marvin--> "global" set of valid locations which can only contain integers.
07:56:03 <Marvin--> And regardless of what Pitts' does, your type system should match your
07:56:05 <Marvin--> implementation of it. ;-)"
07:56:09 <Marvin--> whoa
07:56:11 <Marvin--> sorry about that
07:56:29 <Marvin--> didn't think it was that many lines :/
07:56:56 <mgoetze> hm, some kind of TeX?
07:57:06 <Marvin--> no, \ stands for lambda :P
07:57:31 <mgoetze> i'm a poor 1st-semester student, be gentle with me :)
07:58:00 <mgoetze> actually, i was thinking about maybe switching to maths, but decided against quite easily since that means i would have to travel further every day :)
07:58:40 <Marvin--> heh
07:58:48 <Marvin--> the CS and maths institutions are in the same building here
08:00:02 <mgoetze> i would have to go to a different uni; i'm currently studying informatikingeniuerwesen (computers+engineering) at a technical university here in southern hamburg, for maths i would have to travel up to central hamburg (over the river) every day :)
08:00:52 <Marvin--> heh
08:04:06 <mgoetze> much better having the maths profs from the other uni come down here, really :)
08:04:21 <Marvin--> lazy sod! :)
08:04:52 <mgoetze> well, i'm sure the profs all have cars... i'd have to take the train :)
08:10:19 <Marvin--> thank god I live in a city where you can go by bike most of the interesting distances
08:12:09 <mgoetze> yeah, i've lived in that kind of city, too. in my experience, they generally have a lack of good symphony orchestras (as in, less than 3)... ;)
08:12:33 <Marvin--> LOL
08:12:38 <Marvin--> can I quote you on that? ;)
08:12:42 <mgoetze> sure :)
08:12:51 <Marvin--> yeah, Göteborg probably only have two good symphony orchestras
08:13:52 <Marvin--> Göteborgssymfonikerna and the orchestra at the opera
08:14:02 <mgoetze> hm, isn't that like the 2nd-largest city in sweden?
08:14:07 <Marvin--> yes
08:14:24 <mgoetze> bicycle nation :)
08:14:25 <Marvin--> we only have about 9 million people in total, okay? :)
08:14:54 <sethk> Marvin--: Two orchestras in a city the size of Goteborg is quite good, actually.
08:15:26 <mgoetze> i was in Malmoe this year, we asked some waitress what the one must-see tourist attraction in malmoe is. guess what she said :)
08:16:47 <Marvin--> uhmmm
08:16:51 * Marvin-- hasn't been to Malmö for ages
08:17:03 <mgoetze> the answer was "copenhagen" :)
08:17:33 <Marvin--> doh
08:17:45 <Marvin--> well, part of the reason I haven't been to Malmö for ages is that it's boring :P
08:18:25 <mgoetze> i thought it was nice enough, though i wasn't there for sightseeing...
08:18:50 <Marvin--> well it's a cozy city, but I'm not sure if there are any must-see:s
08:19:21 <mgoetze> yeah, seems like a nice place to retire :)
08:19:36 <shapr> our swedish book is all about some guy from malmö
08:20:15 <Marvin--> oh my, you're not learning Skånska, are you?
08:22:39 <shapr> I've heard of that...
08:22:45 * shapr tries to remember what it is
08:22:49 <shapr> some very strange swedish dialect
08:23:20 <Marvin--> it's the dialect they speak in Skåne, where e.g. Malmö is
08:23:38 <Marvin--> most people think it's almost as much gibberish as Danish
08:23:47 <mgoetze> lol
08:23:58 <Marvin--> but then, Skåne was part of Denmark for a long time, before we stole it
08:24:52 <mgoetze> i've seen danish, swedish and norwegian people talking with each other quite fluently, which had me rather perplexed, so i asked them and got an answer like "well, i just speak norwegian, and he speaks swedish, and we understand each other" :)
08:26:17 <Marvin--> yeah, it's not *really* a big difference
08:26:26 <Marvin--> but we like to poke fun at the southerners :P
08:26:53 <Marvin--> as long as we don't talk too fast, it's not really any problem
08:28:48 <mgoetze> yeah, i've noticed that people from scandinavian countries always like to talk about how much they despise people from the other scandinavian countries... :)
08:28:52 <sethk> There are people in Canada whose English I can't understand.  They use subtitles for them when they go on the TV.
08:29:37 <mgoetze> i wish there were subtitles on german tv when people started talking bavarian or koelsch :)
08:30:58 <sethk> I know what bavarian is.  What is koelsch?
08:31:19 <mgoetze> spoken by people in and around koeln (cologne)
08:32:00 <sethk> A dialect of German, or a different language?
08:32:32 <mgoetze> extremely hard-to-understand dialect
08:32:33 * Marvin-- decides to have another cup of coffee
08:32:47 <sethk> Later, all.
08:32:54 <mgoetze> cya
08:33:06 * mgoetze understands dutch better than koelsch... :)
08:33:09 * sethk is away: Don't say anything until I return.
08:33:15 <Marvin--> I had a beer once called Küppers Kölsch, man it sucked :P
08:38:54 <neniu> "length = foldr (+) 0 . map (const 1)". Any cleaner way to define length nonrecursively?
08:39:29 <Marvin--> sum (map (const 1))? ;)
08:39:33 <mgoetze> neniu: how dare you be on-topic? lol
08:43:08 <neniu> Marvin--: Good. And it doesn't overflow the stack in a list with 100000 elements.
08:44:24 <Marvin--> well, seeing as sum probably is defined as foldr (+) 0... :)
08:45:10 <mgoetze> Marvin--: which doesn't mean that, say, ghc won't actually implement it in a more efficient way... :)
08:46:02 <Marvin--> mgoetze: I've given up the hope of figuring out what the heck ghc spits out
08:46:51 <mgoetze> :)
09:11:10 <neniu> Problem: "f1 (f2 (*) [1,2,3,4]) 5" evaluates to [5,10,15,20]. Define 'f1' and 'f2'.
09:12:00 <andersca> f2 = id and f1 = (*) ?
09:12:05 <andersca> or hmm
09:12:14 <Heffalump> f2 = map
09:12:24 <Marvin--> f1 _ = [5,10,15,20]
09:12:28 <tez> lol
09:12:34 <Marvin--> sorry, f1 _ _ = [5,10,15,20]
09:12:54 <Heffalump> f1 xs y = map ($ y) xs
09:13:47 <Marvin--> if they don't write the questions better than that, they can damn well accept my solutions
09:13:58 <neniu> I've set 'f2 = map' and 'f1 a b = map (\f -> f b) a'.
09:14:18 <neniu> Heffalump: what does '$' mean?
09:14:35 <Marvin--> neniu: it's function application
09:14:37 <Heffalump> neniu: it comes down to the same as you (\f -> f b)
09:14:38 <Igloo> x $ y = x y
09:14:41 <Marvin--> f $ x = f x
09:14:48 <hdaume> anyone here built ghc from scratch?  how do you get it to build ghci too?
09:14:51 <neniu> Cool.
09:15:00 <Heffalump> hdaume: build it again with the newly compiled binary
09:15:01 <Igloo> hdaume: make bootstrap; make install stage=2
09:15:13 <Heffalump> oh, ok, what Igloo said, then
09:15:26 <Igloo> Oh, assuming you are using CVS at any rate
09:15:26 <hdaume> thanks
09:15:44 <Igloo> I don't know if 5.04.2 has that
09:16:02 <hdaume> i don't have to put anything special in build.mk or something...?
09:16:13 <Igloo> No
09:17:12 <Heffalump> building it twice is the recommended way to get ghci, anyway
09:17:17 <Heffalump> you shouldn't need to change anything, afaik
09:18:02 <Igloo> make bootstrap builds it twice for you
09:18:13 <Heffalump> ah, right
09:18:15 <Igloo> Except it doesn't waste time compiling the libraries and stuff twice
09:18:29 <Heffalump> does it install it somewhere in the middle, or use the binaries in the build tree?
09:18:47 * Heffalump remembers that our compute server /still/ hasn't turned up
09:19:04 <Igloo> It builds in stage1/ and stage2/ directories. It doesn't install in the middle
09:19:13 <Igloo> Hmmm  :-(
09:19:27 * Heffalump goes to hassle the obvious person about it despite the fact that he'll probably have gone home.
09:21:14 <Heffalump> as indeed he has
09:25:01 <Marvin--> haha
09:25:16 <Marvin--> "The URL to your quote book is too complicated, I'm giving you an A record on my domain"
09:25:27 <Marvin--> that guy obviously never heard of the bookmark concept
09:26:12 <mgoetze> Marvin--: is it a good domain? lol
09:26:44 <Marvin--> hoopyfroods.org
09:27:02 <Marvin--> my quote book is on marvin.hoopyfroods.org:8080/quotes/
09:27:34 * sethk is back (gone 00:54:24)
09:27:34 <mgoetze> hm, i'll have to think of something to hide behind a long url which will make him give me an A record too, then :)
09:27:45 <mgoetze> meanwhile, i'm off to play some go! yay!
09:27:50 <mgoetze> see you all tomorrow :)
09:28:02 <Marvin--> well, he's a friend of mine, that might've helped ;)
09:28:27 <mgoetze> :)
09:29:58 <Marvin--> yay, nissene på låven
09:31:16 <Heffalump> did he also provide a HTTP/1.1 virtual host and redirect, or what?
09:32:12 <Marvin--> ?
09:32:33 <Heffalump> what is the original URL for it?
09:32:48 <Marvin--> http://193.11.232.159:8080/quotes/ :P
09:32:59 <Heffalump> oh, right
09:33:04 <Heffalump> so only complicated cos of the IP :-)
09:33:17 <Heffalump> I assumed it was the path string that was
09:34:35 <Marvin--> yeah
09:34:48 <Marvin--> well, the fqdn is sjogren.ostkupan.studenthem.gu.se which isn't all that fun :)
09:35:53 <Igloo> It's probably fine if you speak Swedish  :-)
09:37:33 <Marvin--> well, he does know my last name, and if he has a halfway decent browser it does auto-completion :)
10:03:46 <neniu> ping
10:06:48 <tez> pong?
10:08:31 <shapr> whoa, I'm in Marvin--'s quote page
10:08:43 * shapr is surprised
10:09:04 <ludde> luckily i'm not on his quote page
10:09:05 <Marvin--> with all the time I spend here? :)
10:09:16 <Marvin--> ludde: no, I don't quote from lab code ;)
10:09:29 <ludde> ok, heh
10:09:35 <ludde> was there anything funny in my lab code?
10:09:45 <Marvin--> heck I don't remember :)
10:09:46 <shapr> cool, I'm in there twice!
10:09:49 <ludde> :)
10:10:04 <ludde> Marvin--: do you know why i havn't got any ladok-result from programspråk d yet?
10:10:26 * shapr injures himself laughing at a #haskell quote
10:10:47 <ludde> Marvin--: (i.e. a message that the course has been reported as completed and the 4p points given to me)
10:11:02 <ludde> maybe you don't know that kind of stuff
10:11:08 <Marvin--> ludde: er
10:11:12 <Marvin--> ludde: no
10:11:17 <ludde> :)
10:11:25 <Marvin--> ludde: which group were you in?
10:11:32 * shapr just discovered the difference between tyck and tänk today
10:11:40 <ludde> hmm, group? i'm a dtek student
10:11:55 <Marvin--> group number
10:12:06 <Marvin--> I was going to check the lab results...
10:12:11 <ludde> ah
10:12:13 <ludde> hmm
10:12:17 <ludde> wait
10:12:38 <ludde> progs-2
10:13:04 <Marvin--> well, you're in my stats anyway
10:13:09 <ludde> ok good
10:13:14 * shapr fails his savings throw versus swedish
10:13:25 * shapr is totally unable to read swedish irc quotes
10:13:26 <Marvin--> shapr: heh :)
10:13:36 <Marvin--> shapr: which one?
10:13:41 <shapr> e) all of the above
10:14:09 <Marvin--> shapr: :)
10:14:19 <Marvin--> ludde: well, allaslutgodkaenda has you ok:ed
10:14:30 <shapr> oh look! I read one!!
10:14:48 <ludde> good
10:14:49 <shapr> "godmorgon (hjälp!!!)"
10:14:51 <shapr> even I can read that
10:14:53 <Marvin--> heh
10:15:00 <Marvin--> not irc though
10:15:51 <shapr> aww
10:16:22 <Marvin--> it's not all irc, most of the best one are from uni :)
10:16:25 <Marvin--> (and parties, heh)
10:17:41 <Marvin--> or from the roleplaying ("Det var en +2-trappa!" = "It was a +2 staircase!")
10:17:49 <shapr> hah!!
10:17:57 <shapr> I guessed +2 anything was role-playing
10:18:07 <shapr> but I didn't know trappa
10:20:23 <Marvin--> "Om man lyfter upp dem, lyser de blåa?" = "If you pick them up, do they glow in blue?"  (same guy :P)
10:32:09 <aleksi> guys, tell me how haskell implements mutable datastructures?
10:32:34 <aleksi> or is it always copying when you want to alter anything?
10:34:24 <ibid> mutability is not available in standard haskell
10:34:29 <Heffalump> you can either copy when you want to change something, or use a state monad that is implemented with in-place update
10:34:47 <ibid> but there are extensions that allow monadic programming to use mutable state
10:35:05 <aleksi> ok
10:35:29 <ibid> you should first learn how not to use mutable state, however
10:35:46 <aleksi> so one can actually alter someone's addres in a gigantic address book without copying the entire thing
10:36:07 <ibid> aleksi: usually you'd use persistent data structures
10:36:20 <ibid> there "copying" is not O(n) but O(log n) usually
10:37:45 <ibid> (the trick is to use shared state intelligently)
10:37:57 <ibid> or rather, shared values
10:47:01 <SyntaxPolice> Has anyone ever used the FGL (FUnctional Graph Library)?
10:47:33 <Heffalump> I've looked at it very briefly IIRC
10:49:25 <hdaume> SyntaxPolice: I use it a lot
10:50:18 <SyntaxPolice> I'd like to store some strings in a graph, then find the predecessors (for instance) of the node corrosponding to a particular string.
10:50:41 <SyntaxPolice> but fgl gives pre :: Graph -> Node -> [Node]
10:50:47 <SyntaxPolice> (roughly)
10:51:21 <SyntaxPolice> but Node is an integer which seems more like an internal representation of the node, I don't have that integer, but the string.
10:51:46 <hdaume> then you can use lookupNode to get the context
10:52:03 <hdaume> so do '(_,_,val,_) = lookupNode graph nodeInt' and then 'val' will be your string
10:52:11 <shapr> are you building suffix trees?
10:53:29 <SyntaxPolice> hdaume: I'm afraid I don't find any function like lookupNode in the fgl, trying varients.
10:53:41 <SyntaxPolice> shapr: I'm grabbing superclasses of a subclass.
10:53:45 <shapr> oh
10:55:18 <hdaume> oooh, oops, that's for graphMs :)
10:55:20 <hdaume> hold on a sec
10:55:52 <hdaume> you want 'context'
10:56:04 <hdaume> so '(_,_,val,_) = context gr nodeid'
10:57:37 <SyntaxPolice> hdaume: the problem is that the nodeid is an integer representing the node, not the string that I have at this point.
10:58:38 <SyntaxPolice> I could use a function that gets the Node from the String, then use pre (or context)
10:59:05 <SyntaxPolice> or something like contextNode :: gr a b -> a -> Context a b
10:59:24 <hdaume> oh, no, the fgl doesn't provide functions like that.  you should keep your own finitemap or something
10:59:36 <hdaume> (i thought you wanted to go the other way)
10:59:40 <SyntaxPolice> OK. Thats what I was starting to think.
11:00:21 <SyntaxPolice> So do you think that the fgl may be a bad choice here? (I may be able to restructure the problem to do it w/ the IDs on the other hand)
11:00:28 <SyntaxPolice> You mentioned another library...
11:02:32 <hdaume> i dunno...i rather like FGL; it's served me very well.  i usually only need to go from 'a's to node ids at the very beginning/end of the algorithm, so storing a finitemap is not a problem.  ymmv though.
11:04:45 <SyntaxPolice> hdaume: OK.  Thanks for the advice.  I'm sort of suspecting that I can get rid of the strings altogether if I restructure this a bit, and that might be a good thing anyway.
11:34:44 <hdaume> if you have a large number of strings, that's probably wise anyway...they're very slow :)
11:53:32 <Marvin--> agh, now I have to read up on bisimulations again
12:00:01 <Igloo> Yay, test failures!
12:16:00 <xkb> ok
12:16:02 <xkb> is prima
12:16:05 <xkb> goed gedaan
12:16:19 <xkb> test
12:16:23 <xkb_> aaregh
12:16:25 <xkb_> sorry
12:16:31 <xkb_> Thought I was doing something else
12:16:33 <Igloo> Wrong channel?  :-)
12:16:48 <xkb_> yeah.. thought I had BitchX opening new windows for msg
12:16:51 <xkb_> app. not
12:16:52 <xkb_> bleh
12:49:59 <Marvin--> muahaha *nailed down another number theory problem*
12:59:03 * Igloo attempts to work out the reason for the failure of an automatically generated test of automaticallt generated code
13:01:19 * hdaume wants to go to richard's thing :(
13:01:27 <Igloo> Bird?
13:01:29 <hdaume> Igloo: that sounds like fun :)
13:01:30 <hdaume> yeah
13:01:45 <hdaume> did you get the email from jeremy?
13:01:51 * Igloo couldn't see a price announced
13:02:06 <Igloo> Yeah, he sent it to everyone at comlab
13:02:16 <Igloo> Did you get it through an AFP list or something?
13:02:32 <hdaume> types list
13:02:49 <Igloo> Oh, right
13:05:29 <hdaume> it's 100 pounds (-20 if you register early)
13:08:33 <Igloo> Ah, ta
13:13:38 <Heffalump> oh, someone ought to send it to the Haskell list
13:14:00 <Heffalump> so 80 quid, including a free copy of the book? not bad.
13:14:25 <Igloo> Hmmm, my tests seem to have found a bug in glibc rather than my code
13:15:33 <hdaume> Igloo: it's sometimes satisfying when that happens, but also equally frustrating
13:15:41 <hdaume> Heffalump: not if you live nearby *grin*
13:16:06 <Heffalump> hdaume: true :-)
13:16:16 * Heffalump is kind of assuming I'll get to go free, anyway
13:17:05 * Igloo doesn't think I will get the same luxury, unfortunately  :-)
13:17:39 <engstad> Marvin: What number theory problem?
13:17:42 <Marvin--> what the what with a what?
13:18:18 <Marvin--> engstad: "Show that given an odd prime p, there is an n < 1 + sqrt(p) such that x^2 = n (mod p) has no solutions"
13:18:41 <Heffalump> Marvin--: what what what?
13:18:56 <Igloo> hdaume: Whether it is satifying or not will depend on what happens when I report it  :-)
13:18:57 <Marvin--> Heffalump: what afp thingy, what book, et.c. :)
13:19:08 <Igloo> (assuming I don't convince myself I was wrong in the mean time)
13:19:44 <Heffalump> AFP = Advanced Functional Programming Summer School (number 4)
13:19:53 <Heffalump> which hdaume, Igloo and I all attended in Oxford over the summer
13:20:20 <Heffalump> book = The Fun of Programming, with chapters from various people about Haskellish stuff written in honour of Richard Bird's 60th birthday
13:20:34 <xkb> Heffalump : the one in oxford?
13:20:54 <Heffalump> event = the symposium to launch the book
13:20:56 <Marvin--> oh
13:21:41 <xkb> I have some of the "lecture notes" of AFP here
13:21:45 <xkb> some a really good
13:22:02 <xkb> s/a/are
13:22:21 <Heffalump> yes, both the ones I've been to (3 and 4) have been
13:22:56 <xkb> What is that book for Bird called?
13:23:10 <Heffalump> The Fun of Programming
13:23:14 <Heffalump> I just said that :-)
13:23:20 <xkb> ow.. sorry
13:23:24 <xkb> ill check my logs
13:23:29 <Heffalump> no, really just said that.
13:23:32 <Heffalump> at [21:20]
13:23:39 <xkb> ah
13:23:41 <Heffalump> (it now being [21:23]
13:23:42 <Marvin--> that's over an hour ago ;)
13:23:43 <xkb> The Fun of programming
13:24:01 <Heffalump> it's a bad pun
13:24:05 <xkb> Is it released yet?
13:24:06 <Marvin--> yes, indeed
13:24:08 <xkb> very bad!
13:24:18 <Heffalump> no, but you can preorder it from Amazon or Palgrave, AFAIK
13:24:20 <Marvin--> I'd love to go to some AFP, but I probably can't afford it
13:24:21 <xkb> k
13:24:24 <xkb> ill have a look
13:24:37 <Heffalump> it'll only be available after the symposium, I think (March 25th/26th)
13:25:04 <Heffalump> sorry, 24th/25th
13:25:25 <Heffalump> hands up if you want a copy of the announcement
13:25:34 <Heffalump> (wave your email address in your hand)
13:25:46 <xkb> sander[at]hypernation.net would do :D
13:26:19 <xkb> ah.. alot of those papers are very familliar
13:26:34 <Heffalump> Marvin--: I suspect Koen will be going, since he co-authored two chapters in it, btw
13:26:50 <Marvin--> Heffalump: well, good for him :P
13:27:00 <Heffalump> :-)
13:27:18 <Heffalump> xkb: sent
13:28:08 <Marvin--> Heffalump: I'm supposedly going to Finland once during spring, and Norway once during summer, I'm I don't think I can afford more trips than that
13:28:37 <Heffalump> :/
13:29:01 <Marvin--> especially not if I'm buying a laptop! :)
13:29:28 <Heffalump> heh
13:40:50 <xkb> Heffalump 
13:41:01 <Heffalump> xkb
13:41:03 <xkb> Heffalump : thanks for the FOP ann.
13:41:05 <Heffalump> np
13:41:14 <xkb> k
13:41:16 <xkb> :)
13:48:57 <ibid> ugh
13:49:07 * ibid is writing a "pretty please" to his professor
13:51:36 <Marvin--> with cherries on top?
13:52:35 * ibid does not get the reference, but yeah, probably
13:52:47 <ibid> "can i go, please please please" :-)
13:52:53 <Marvin--> :)
13:54:20 <ibid> i mean, i don't have the money to go without the support of the dept
13:54:35 * Marvin-- mutters something
13:54:43 <Marvin--> I wanna go to stuff too :/
13:55:43 <Marvin--> oh, I've got some time over, maybe I should go to the multi meeting tomorrow
13:57:35 <ibid> Marvin--: where in finland?
13:57:41 <ibid> not jyväskylä?
13:58:00 <Marvin--> I have no idea where jyväskylä is
13:58:19 <Marvin--> Otaniemi
13:58:23 <Marvin--> some time end of march
13:58:29 <Marvin--> 28-30 perhaps
13:58:30 <ibid> otaniemi is in Helsinki
13:58:34 <Marvin--> that's what I thought
13:58:41 <ibid> well, almost in helsinki
13:58:45 <ibid> the same area
13:58:55 <ibid> any special occasion?
13:58:59 <Marvin--> nuccc
13:59:19 <Marvin--> (nordic university computer club's conference)
13:59:23 <ibid> you take a train and sit in it for three or four hours to get from helsinki to jyväskylä
13:59:44 <Marvin--> question is if I have time for any side tracks :)
13:59:52 <ibid> hehe :-)
14:00:06 <ibid> i can meet you halfway, in tampere :-)
14:00:43 <Marvin--> heh
14:06:54 <ibid> Marvin--: this page has a rough map that places jyväskylä on the map :-) http://www.keskisuomi.net/main.html
14:08:41 <Marvin--> okay
14:09:16 <whee> hooray mind going blank for no good reason. I basically want to take the head of a list and iterate through the tail of the list with a function that deals with two elements of the list (the head, and each element in the tail)
14:09:51 <whee> then move to the next element in the list and do it all over again
14:10:06 <Marvin--> whee: er, foo f (x:xs) = map (f x) xs?
14:10:25 <whee> I suspect it contains map
14:11:01 <whee> okay, consider a list [1, 2, 3]; I'd like to end up returning [[f 1 2, f 1 2], [f 2 3]]
14:11:31 <whee> errr, that second f 1 2 should be f 1 3
14:12:45 <Marvin--> oh, hmm
14:13:01 <Marvin--> foo f (x:xs) = map (f x) xs : foo f xs?
14:23:02 <hdaume> foo f (x:xs) = map (f x) (inits xs)?
14:26:05 <whee> marvin's appears to work the way I want. hoorj
14:26:18 <inkedmn> hey guys
14:26:24 <inkedmn> howzitgoin
14:33:03 <Igloo> Has anyoen got the latest hugs installed?
14:35:28 <inkedmn> i've got Nov 2002
14:35:35 <inkedmn> dunno if that's the latest
14:35:55 <Igloo> What does 'take (-3) "foo"' give you?
14:36:15 <inkedmn> Prelude> take (-3) "foo"
14:36:15 <inkedmn> ""
14:36:20 <Igloo> Ta
14:36:44 <Heffalump> where is it different, OOI?
14:37:00 <Igloo> hugs February 2001
14:37:06 <Igloo> Program error: Prelude.take: negative argument
14:37:22 <inkedmn> time to update! :)
14:38:16 <Igloo> Yeah, I think I might install hugs and nhc98 from CVS after Christmas too
14:41:34 <Heffalump> you could do TH implementations for each :-)
14:41:48 <Heffalump> have you got access to the GHC repository yet, OOI?
14:41:57 <Igloo> Would I get a dPhil if I did that?  :-)
14:42:00 <Igloo> Yup
14:42:25 <Heffalump> hmm, I suspect not :-)
14:43:36 <Igloo> Yay, 450/450 tests passed
14:47:30 <hdaume> Heffalump: what is "OOI"?
14:48:25 <Heffalump> out of interest
14:48:43 <hdaume> ah
14:57:45 <inkedmn> bye all
15:19:02 <hdaume> why does ghc use split_objs when building the libraries?
15:22:51 <Igloo> I think it means you get reduced executable sizes without using strip, but I'm not sure
15:43:10 <whee> erm
15:44:49 <whee> do all arguments to the / operator need to be fractional?
15:45:16 <whee> or rational, I guess
15:46:52 <Igloo> :t (/)
15:46:53 <whee> either way I'd like to do (x - y) / z and get an integer, where x, y, and z are ints
15:47:02 <Igloo> You want `div` then
15:47:08 <whee> okay
15:48:03 <whee> is there a way to pad numbers? so 1 displays as 01 for example
15:49:33 <Igloo> let s = show i in replicate (2 - length s) 0 ++ s
15:49:48 <whee> oi, that's a big one :P
15:50:01 <Igloo> A big what?
15:50:10 <whee> expression
15:50:35 <Igloo> Well, if you have pad2 i = ... then you can use pad2  :-)
15:51:03 <Igloo> Alternatively, $(printf "%02"), but I haven't finished writing printf yet
15:51:13 <whee> heh
15:51:18 <Igloo> IM "%02d"
15:51:23 <whee> I hope TH catches on
15:59:01 <whee> fighting with layout is fun
15:59:20 <whee> something insanely odd going on with a let expression insode of a do
16:07:57 <whee> http://smaerty.ath.cx/halp.txt <- how do I lay this out so that it actually compiles? :|
16:08:37 <whee> it complains that the last statement in a do construct must be an expression in that form
16:09:08 <hdaume> whee: what was that url?
16:09:17 <whee> http://smaerty.ath.cx/halp.txt 
16:09:25 <whee> no matter how I indent the thing it doesn't want to work
16:09:41 <hdaume> what is .cx?
16:09:47 <whee> christmas islands
16:09:50 <whee> heh
16:09:54 <hdaume> lets inside of do doesn't have in
16:10:02 <hdaume> get rid of the in
16:10:21 <whee> oh.
16:10:24 <hdaume> :)
16:10:25 <whee> heh
16:10:30 <whee> thanks :|
16:10:39 <hdaume> np
16:10:54 <cmoline> i am curious. why does let in a do not have an in? i am a fan of consistency
16:11:18 <hdaume> cmoline: there's no need for it...it doesn't really make sense to have one
16:12:13 <hdaume> without layout, something like "do { x <- y ; let { z = f x } in g z ; h ()" doesn't make sense...is the h () part of the 'do' or not?
16:12:33 <engstad> Is there any way of capturing output from System.system other than piping the results to a file and then readFile it?
16:12:57 <hdaume> System.system "foo > foo.tmp" ; readFile "foo.tmp"
16:13:02 <Igloo> let is a statement, let ... in ... is an expression
16:13:07 <hdaume> or if you're on a posix system you could use the POpen library
16:13:37 <engstad> POpen.. pipes?
16:14:03 <hdaume> engstad: yeah
16:14:04 <Igloo> And the above is perfectly valid. The answer to your question depends on where the missing } is
16:14:12 <hdaume> Igloo: right :)
16:15:46 <engstad> What does the statement 'let' transform to (in the same way { x <- e; f } ==> { e >>= \x -> f }
16:15:49 <engstad> ?
16:17:08 <hdaume> engstad: for lets withing dos?
16:17:40 <engstad> Yes.
16:17:57 <hdaume> {let decls; es} becomes {let decls in do es}
16:18:46 <engstad> Hmm... so then why have the let-statement at all and not use let ... in ?
16:19:05 <hdaume> engstad: because then your code starts getting pushed off to the right by namy columns :)
16:19:11 <hdaume> s/namy/many
16:19:20 <Pseudonym> And it saves you typing "do" again.
16:19:21 <engstad> Hehe... is that all?
16:19:37 <hdaume> afaik
16:19:48 <Pseudonym> It's also cognate to list comprehension syntax.
16:20:18 <Pseudonym> [ y | x <- [1..5], let { y = x*x } ]
16:21:04 <Pseudonym> (Or should that be "cognate _with_"?)
16:22:14 <engstad> Pseudo: Can you clarify?
16:24:23 <whee> hooray for profiling. what's the quickest way to find out if two lists have any elements in common? I just need a Bool
16:24:37 <clausen> are the lists sorted?
16:24:55 <clausen> why do you want to use lists (as opposed to some representation) ?
16:25:00 <clausen> union-find is nice
16:25:01 <whee> in this case, yes, but it's not guaranteed
16:25:05 <Igloo> intersect is the easiest
16:25:15 <clausen> Igloo: and fastest?
16:25:23 <Igloo> To write, yes  :-)
16:25:31 <clausen> well, with lazy eval and alll
16:25:34 <clausen> I doubt you can do better
16:25:36 <whee> that's what I'm using now, but it's eating up the most time during execution
16:25:55 <Igloo> Sorting and comparing along the lists will have better worst case complexity
16:26:07 <clausen> intersect doesn't sort?
16:26:27 <engstad> Is the keys ints or strings?
16:27:00 <Igloo> No
16:29:06 <engstad> I suppose your lists are really sets. In Ocaml I would then use the Set module, which stores the data in a sorted tree. Then intersect is n * elem = n * log(n)
16:29:41 <whee> the lists are at most 7 elements long, though; I'm worried that using a set won't actually improve things
16:29:50 <Pseudonym> Sorry.  List comprehensions let you do lets.
16:29:54 <engstad> Ah. 7 elems?
16:30:02 <Pseudonym> So no reason why do expressions shouldn't either.
16:30:05 <engstad> Explicitely test them then?
16:30:29 <whee> right now I'm checking to see if the length of the intersection is zero
16:31:00 <engstad> *nod*
16:31:49 <engstad> Well, lazy eval should make sure it bails out on first success, but if the intersect is empty, it'll have to search the whole thing.
16:31:55 <Igloo> Ermmm, use null (intersection xs ys) instead
16:32:14 <Pseudonym> Igloo: Same problem.
16:32:25 * sethk is away: Don't say anything until I return.
16:32:32 * sethk is back (gone 00:00:02)
16:32:35 <engstad> Your elems are ints?
16:32:42 <engstad> Complex?
16:32:50 <whee> they're list of Day
16:32:52 <Igloo> Pseud: I was only trying to avoid calculating the length of the list
16:33:08 <Pseudonym> Igloo: Oh, I didn't realise he was using length.
16:33:15 <Pseudonym> Yes, null is better.
16:33:31 <Pseudonym> Day is an enum type?
16:33:34 <whee> yes
16:33:41 <engstad> Is the list sorted?
16:33:57 <whee> probably, but I don't explicitly do it
16:34:07 <whee> it'll most likely be sorted with the way this works
16:34:29 <engstad> First find: minA, maxA, minB and maxB and trivially reject.
16:34:59 <whee> using null actually made it slower
16:35:07 <engstad> If maxA < minB or maxB < minA then intersect is empty.
16:35:09 <Pseudonym> How long are the lists in general?
16:35:14 <engstad> < 8 elems.
16:35:54 <Pseudonym> Right.
16:36:25 <whee> wait, I take that back
16:36:29 <whee> is there a negation of null?
16:36:37 <whee> or should I just slap a not in front of that
16:37:02 <Pseudonym> Yes, there's not . null
16:37:21 <Pseudonym> Or there's case xs of { [] -> False ; _ -> True }
16:37:36 <engstad> How come the compiler doesn't optimize "length list == 0" to "null list" ?
16:38:18 <Igloo> It would change evaluation order and termination
16:38:25 <Pseudonym> Same reason it doesn't optimise sin x*sin x + cos x*cos x to 1.0.
16:38:42 <hdaume> and length (repeat 'a') == 0 is not the same as null (repeat 'a')
16:38:55 <hdaume> oh, that's what igloo said :)
16:39:05 <Pseudonym> To be honest, if you write "length list == 0" you kinda deserve what you get.
16:39:15 <whee> heh
16:39:33 <engstad> ;-)
16:39:34 <whee> I think I wrote this function around 2am this morning, so :)
16:40:03 <whee> using null did cut execution time in half :D
16:40:27 <engstad> But seriously, can't lazy evaluation deal with this? 
16:40:51 <Igloo> With what?
16:41:00 <engstad> The optimization.
16:41:03 * Igloo sometimes think a Nat type would be nice for this sort of thing
16:41:21 <engstad> Oh, length (repeat 'a') == 0 isn't the same as null list?
16:41:23 <Igloo> How would lazy evaluation deal with it?
16:41:23 <ibid> engstad: when you evaluate length list, you are demanding the evaluation of all elements of the list
16:41:41 <Igloo> No you aren't
16:41:41 <ibid> engstad: with null list, you aren't
16:41:53 <Igloo> length [undefined] == 1
16:41:53 <ibid> Igloo: no?
16:42:09 <ibid> ah yes, the evaluation of all list pairs, sorry
16:42:15 <Igloo> Huh?
16:42:21 <Pseudonym> whee: How time critical is this function?
16:42:25 <Igloo> You demand the evaluation of the structure of the whole list
16:42:35 <ibid> Igloo: you know, the cons cells (_:_)
16:42:44 <ibid> yeah, same thing
16:42:47 <Igloo> Right, yeah
16:43:01 <engstad> I suppose, I'm just thinking that since it is bound to a boolean expression it should be possible for it to terminate.
16:43:06 <whee> define time critical
16:43:16 <Pseudonym> I mean is this your inner loop or something?
16:43:23 <whee> yeah, it gets called a lot
16:43:36 <whee> ~200000 times on the average run
16:43:47 <engstad> whee: did you try finding min and max of the lists and use that?
16:43:54 <Pseudonym> OK.  There are several ways to speed it up.
16:44:16 <Pseudonym> Here's the version that uses lazy evaluation to its best effect:
16:44:27 <Pseudonym> incommon xs ys = incommon' ys
16:44:27 <Pseudonym>   where
16:44:28 <Pseudonym>     sun_xs = Sun `elem` xs
16:44:31 <Pseudonym>     {- etc -}
16:44:36 <Pseudonym>     incommon' [] = False
16:44:36 <Pseudonym>     incommon' (Sun:xs) = sun_xs || incommon' xs
16:44:39 <Pseudonym>     {- etc -}
16:45:07 <whee> Sun?
16:45:14 <engstad> Sunday. ;-)
16:45:14 <Pseudonym> I assume it's a day.
16:45:17 <Pseudonym> Like a day of the week.
16:45:21 <whee> oh, okay
16:45:23 <engstad> Hmm....
16:45:29 <Pseudonym> data Day = Sun | Mon | Tue | Wed | Thu | Fri | Sat
16:45:32 <Igloo> Hmmm, xs wasn't the best variable choice there IMO  :-)
16:45:42 <Pseudonym> Perhaps not.
16:46:09 <Pseudonym> Anyway, I think this does the best job of avoiding computation on short lists.
16:46:17 <whee> I'll try it
16:47:22 <ibid> Igloo: btw, it would be nice if the \begin{code}...\end{code} fragments could be used in middle of paragraph (use \@endparenv as the last command of the env)
16:48:40 <engstad> Are there any bit operations in Haskell?
16:48:43 <Igloo> How do you mean, ibid?
16:49:30 <Pseudonym> Now here's the one with the best complexity:
16:49:31 <ibid> Igloo: currently, any text after \end{code} is treated as starting a new paragraph regardless of whether there is a para break after it
16:49:35 <Pseudonym> incommon xs ys = incommon1 xs False False False False False False False
16:49:36 <Pseudonym>   where
16:49:36 <Pseudonym>     incommon1 (Sun:xs) sun_xs mon_xs tue_xs wed_xs thu_xs fri_xs sat_xs
16:49:36 <Pseudonym>       = incommon1 xs True mon_xs tue_xs wed_xs thu_xs fri_xs sat_xs
16:49:36 <Pseudonym>     {- etc -}
16:49:36 <Pseudonym>     incommon1 [] sun_xs mon_xs tue_xs wed_xs thu_xs fri_xs sat_xs
16:49:38 <Pseudonym>       = incommon2 ys
16:49:40 <Pseudonym>       where
16:49:51 <Pseudonym>         incommon2 [] = False
16:49:56 <Pseudonym>         incommon2 (Sun:ys) = sun_xs || incommon2 ys
16:49:59 <Pseudonym>         {- etc -}
16:50:03 <Igloo> Hmmm, OK
16:50:08 * Igloo adds it to TODO list
16:50:14 <Pseudonym> This one is uglier.
16:50:31 <ibid> Igloo: \@endparenv as the last command in the end section of the env will do the trick
16:50:43 <ibid> now i need to add \noindent to lots of places...
16:50:56 * ibid is abusing .lhs for writing this chapter of my thesis
16:50:57 <Pseudonym> It also exploits the peculiarities of the STG machine, so it may not be so efficient under NHC.
16:51:23 <Igloo> Well, you could just change the .sty  :-)
16:51:25 <ibid> (it's not a program nor a module, just a collection of small examples typeset using Haskell2LaTeX plus a lot of text that talks about other things)
16:51:40 * Igloo has abused it for my UG report on it and my talk slides on it  :-)
16:51:44 <ibid> Igloo: yeah, i hate to do that when i'm not its maintainer
16:51:52 <whee> I don't think this got faster
16:51:52 <ibid> yeah, i noticed
16:52:00 * Igloo makes ibid the maintainer. Sorted  :-)
16:52:05 <whee> oh, nevermind. I'm an idiot here
16:52:08 <ibid> Igloo: ugh
16:52:41 <Igloo> I seem to have ended up with 2 incompatible .stys, one which works for Hetris and one which works for Haskell2LaTeX. I need to sort that out at some point.
16:52:56 <ibid> Hetris?
16:53:16 <Igloo> http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Hetris/
16:53:28 <Igloo> Which shockingly doesn't abuse it  :-)
16:53:29 <ibid> Igloo: of course if you'd give me cvs write privs to the master repo :-) (move it to savannah if you like)
16:53:52 <Igloo> If it was in one I would
16:53:58 <ibid> well. start one
16:54:03 <ibid> move it to savannah :-)
16:54:09 <Igloo> If I made an arch repo, would you use that?
16:54:14 <ibid> depends
16:54:19 <Igloo> On?
16:54:19 <whee> Pseudonym: is that last one better than the previous?
16:54:26 <ibid> what does it require from me :-)
16:54:35 * ibid has never used arch
16:54:41 <Pseudonym> whee: It depends.
16:54:52 <Pseudonym> If the lists don't intersect, possibly.
16:54:59 <Pseudonym> On long lists, definitely.
16:55:01 <Igloo> Installing and learning arch...maybe I'll set up a CVS one at some point
16:55:05 <Pseudonym> On your data, dunno.
16:55:08 <whee> hmm, guess I'll test that too :P
16:55:19 <Pseudonym> How much faster was my first one?
16:55:21 <whee> the first one shaved off ~10% execution time
16:55:25 <Pseudonym> Right.
16:55:26 <whee> compared to the null version
16:55:34 * Igloo is very unlikely to do it before NY though for connectivity reasons
16:55:35 <Pseudonym> Are most of the lists disjoint?
16:56:01 <ibid> Igloo: savannah has the advantage that it is fairly easy to set up & i am comfortable with it :-) (they use cvs)
16:56:02 <whee> I'm not sure, possibly
16:56:27 <whee> there's probably more intersections than not actually
16:56:40 <Pseudonym> In that case, the first one may well be more efficient.
16:56:43 * Igloo will look at it - remind me in the NY if I've forgotten
16:56:51 <Pseudonym> Especially if the lists are almost sorted.
16:57:03 <Igloo> Yay, now I have 960 tests that pass
16:57:36 <ibid> okay
16:57:43 * ibid tries to remember
16:58:07 <ibid> of course, by that time my thesis is approved (hopefully) and i might not be looking at Haskell2LaTeX for a while
16:58:19 <Igloo> *nod*
16:58:21 <ibid> i expect to use it heavily for my next lecture notes, though
16:58:36 <ibid> it or something similar
16:58:43 <whee> $$#@ thanks a lot Pseudonym. did one more thing and execution time cut in half :P
16:59:01 <whee> it's almost twice as fast as my ocaml version now, heh
16:59:37 <Pseudonym> Woohoo!  We beat O'Caml!
16:59:47 <engstad> whee: If you have bit fiddling you can make it faster.
16:59:53 <Pseudonym> Yes.
16:59:56 <whee> yes, I thought of that :)
17:00:11 <engstad> I tried using Data.Bits (fglasgow).
17:00:19 <Pseudonym> Although this is pretty fast when it does the pass on the second list.
17:00:49 <whee> I don't thikn I can reasonably get much more out of this
17:00:57 <Pseudonym> Possibly with bit fiddling.
17:00:58 <ibid> Igloo: actually, i'd love to have a real literate programming facility for haskell :-)
17:01:08 <ibid> Igloo: Haskell2LaTeX might be a good starting point
17:01:15 <Igloo> "real" in what sense?
17:01:30 <ibid> Igloo: one that supports tangling
17:01:35 <ibid> as well as weaving
17:01:44 <ibid> i mean, code reorganization
17:01:49 <Igloo> Haskell2LaTeX could do with a better PPTeX.lhs, better .sty and also only works if entire functions are in code blocks
17:01:58 <Pseudonym> At the moment all you have is a syntax to make code harder to write than comments.
17:02:05 <Igloo> Well, you can order most of your code arbitrarily anyway
17:02:09 <ibid> sometimes it's better to 
17:02:13 <ibid> augh
17:02:16 <ibid> Igloo: no you can't
17:02:28 <ibid> Igloo: the module system imposes a limit
17:02:41 <Pseudonym> Igloo: There's also a limit to how far out of a where expression you can move code.
17:02:43 <Igloo> Eeep, you want to reorder across modules?
17:02:46 <ibid> Igloo: you can't describe the whole system in one document, producing many modules
17:02:49 <ibid> yes
17:02:59 <Igloo> I tend to go for the section/chapter per module approach myself
17:03:06 <engstad> In Ocaml it is easy to do some bit-fiddling, so I'd bet your ocaml solution could be quite faster.
17:03:14 <Igloo> Oh, you can. You just concat them all first
17:03:30 <whee> my ocaml version isn't the best. there's some things that are just easier to do with haskell's constructs 
17:03:45 <Pseudonym> And my code isn't one of them.
17:03:45 <engstad> interesting. like what?
17:03:58 <engstad> i find the module system very powerful.
17:04:00 <ibid> Igloo: actually, what i'd like more is the ability to prepare several modules from one literate source - very handy if you're writing lecture notes or a book that contains lots of small program examples
17:04:51 <ibid> Igloo: can i do it so that source file decomposition is independent from the module decomposition?
17:04:58 <whee> I was tearing my hair out trying to write a combinations function in ocaml; so that [[1, 2], [3, 4]] -> [[1, 3], [1, 4], [2, 3], [2, 4]]
17:05:01 <ibid> i mean \includes
17:05:20 <whee> whereas it's one line in haskell: combinations (x:xs) = [ (y:ys) | y <- x, ys <- combinations xs ] (found that on a newsgroup :))
17:05:29 <Pseudonym> In general you want both of them to be independent from document composition, I think.
17:05:36 <ibid> yaeh
17:05:39 <ibid> yeah
17:06:00 <whee> in general my ocaml version is less elegant than this
17:06:02 <Igloo> Fair enough. I haven't found that myself, but can see why you might want it
17:06:03 <Pseudonym> The format which is optimal for team development is different from the format which is optimal for lecture notes.
17:06:12 <engstad> whee: that's easy. just transform it from list comprehension to non-comprehension.
17:06:16 <ibid> Pseudonym: well, if you write latex, it's most convenient to break the source files by chapter (so that \include works properly)
17:06:19 <Igloo> Of course it would help if TeX didn't suck  :-)
17:06:22 <whee> engstand: easier said than done :P
17:06:23 <ibid> yeah
17:06:31 <Pseudonym> ibid: Yes, I realise that.
17:06:33 <Igloo> Maybe nonpareil will have sensible syntax and semantics
17:06:37 <engstad> whee: really? it's quite automatic.
17:06:48 <whee> I'm not familiar with the method
17:06:58 <Pseudonym> In general, though, I want to put the main algorithm in a chapter and the support code (from the same module) in an appendix, for example.
17:07:07 <ibid> Igloo: but would you object if i wanted to take Haskell2LaTeX in that direction? or would i need to do a fork?
17:07:14 <ibid> Pseudonym: yeah
17:07:37 <Pseudonym> Or I want to put unit tests in another document, perhaps.
17:08:06 <ibid> yeah
17:08:07 * Pseudonym is guessing here
17:08:53 <Igloo> ibid: I would be delighted, especially if it could be done in a separate phase
17:09:59 <ibid> well, the traditional way is to have tangling be a separate entry point (often separate executable)
17:10:21 * Pseudonym balks at the number of intermediate files we'll end up with here
17:10:26 <Pseudonym> More than Mercury, I reckon.
17:10:33 <ibid> Pseudonym: ?
17:10:56 <Pseudonym> The Mercury compiler used to (and still might) generate about 7 or 8 files per source file during compilation.
17:11:07 <ibid> heh
17:11:33 <Igloo> Oh, and depending on exactly what you're planning it should use LaTeX style commands that are defined to do nothing so it can be latexed without being preprocessed
17:11:34 <ibid> by "here" do you mean our planned tangler? or something else (what)?
17:11:40 <Pseudonym> There's the .o, the equivalent of the .hi, plus about three other interface-like files, plus the generated C...
17:11:49 <ibid> Igloo: yeah
17:12:31 * Igloo plans to add a --ffi and also the ability to have arbitrary text as an expression in pcode blocks
17:12:53 <ibid> pcode?
17:13:28 <Igloo> \begin{pcode}...\end{pcode} - basically so you can typeset things you don't want Haskell implementations to try and run
17:13:40 <ibid> ok, yeah
17:15:11 <ibid> which preposition: "common patterns of behaviour XXX derived constructs" (of? by? for?)
17:15:44 <Igloo> I'd say of
17:16:35 <ibid> the repetition bugs me
17:22:38 <Igloo> Either I've written non-terminating code or GHC is very slow
17:32:52 <sethk> Or both
17:33:33 <whee> mmm, /me wishes there were mod_haskell
17:33:48 <whee> oh, there is. bah. heh
17:43:02 <Pseudonym> Gotta go.  Office christmas party.
17:43:04 <Pseudonym> Farewell.
17:43:04 * ibid is in the flow. this is fun
17:44:14 <Igloo> Oh?
17:44:29 <ibid> there are only a few things distracting: first, if i get out of this office complex, i won't be able to get in again in two hours; second, all toilets are outside this office complex; third, it's 3:45 in the morning
17:44:41 <ibid> Igloo: finishing my MSc thesis as we speak :-)
17:44:46 <Igloo> Ah  :-)
17:44:55 <ibid> just a couple more of hours
17:44:59 <Igloo> Find a bucket  :-)
17:45:33 <ibid> ah yeah, fourth, i need to take a leak; and finally fifth, i'm hungry
17:46:10 <ibid> the earliest place selling food opens in 7:30
17:47:33 <Igloo> No vending machines?
17:49:36 <ibid> only for drinks, and they are also outside the complex
17:51:49 <Igloo> :-(
17:53:48 <ibid> there is a snack vending machine in a different building where i'll get access on 5:30
17:54:04 <ibid> but it's mostly chocolate and all that stuff that is not good for me
17:55:22 * whee sips his hot chocolate
17:55:43 <ibid> maybe i'll steal something from the coffee ring (i'm not a member)
17:55:55 <ibid> this is clearly an emergency :-)
17:57:18 <Igloo> :-)
17:57:20 <whee> sometimes I wish I could hire someone to follow me everywhere I go with fresh food and drinks
18:00:33 <ibid> i think i'll jam the door from closing on me while i visit the toilet...
18:07:18 <ibid> you know, a hardcopy of the unicode standard really comes handy in a situation like this ;-)
18:07:44 <Igloo> lol
18:07:56 <Igloo> Something very strange is going on here
18:07:59 <whee> :23
18:08:10 <ibid> Igloo: ?
18:08:14 <whee> bah, wrong window :(
18:08:30 <ibid> whee is a vi guy?
18:08:35 <whee> vim :P
18:08:44 <Igloo> I'm getting segfaults for no obvious reason
18:09:08 <ibid> the reason for segfaults is always obvious: it's a bug :-)
18:09:22 <ibid> however, the issue of where the bug is is an entirely different matter
18:16:54 <Igloo> Aha! Gotcha!
18:17:27 <ibid> is it retroactively obvious?
18:19:11 <Igloo> GHC was letting me use ++ on a Q Exp and a Q Exp if the contents of the second Exp was the empty list, but not if it was a non-empty list. If it just refused as it should have done then it would have been easier to track down
18:22:38 <ibid> what's Q Exp?
18:23:49 <Igloo> Q is the Quasi-Quotation monad, an Exp is a representation of a Haskell expression
18:26:17 <ibid> ah
18:26:42 <ibid> hm, now the restriction hits me. i need to typeset two modules in one .lhs!
18:26:45 <ibid> argh
18:27:08 <ibid> well, it can be worked around :-)
18:27:08 <Igloo> Huh? Why?
18:27:11 <Igloo> Right
18:27:37 <ibid> Igloo: i need to summarize a multi-module library...
18:28:08 <ibid> and the workaround is argh :-(
18:28:15 <ibid> but yeah, it can be done
18:29:10 <Igloo> I would have 3 files, one for the library, then one for each module
18:29:51 <ibid> yeah, i split it :-(
18:34:38 * ibid makes the summary a set of appendixes
18:37:03 <Igloo> Sheesh, this might end up taking longer to compile than GHC
18:39:13 <Igloo> Hmmm, it's already using more RAM
18:40:10 <Igloo> Grrrr, segfault after 11 mins
18:59:41 <ibid> Igloo: why would "data Decomp = NoDecomp" fail? (No such state at line 54, character 1)
19:00:02 <Igloo> What's the previous code line?
19:00:12 <Igloo> And does hugs or whatever accept it?
19:01:14 <ibid> bah
19:01:20 <ibid>   | ON  -- Other Neutrals
19:02:00 <Igloo> Dunno - can I see the file?
19:02:13 <ibid> yeah, hold on
19:02:23 * Igloo has another unexplained segfault  :-(
19:03:07 <ibid> http://www.mit.jyu.fi/antkaij/tmp/UnicodeDataDef.lhs
19:06:58 <Igloo> It's the comment on the ON line causing it
19:07:43 <ibid> Igloo: uh?
19:08:00 <ibid> why?
19:08:05 <Igloo> It's missing the start of the next line because of it I think
19:08:15 <ibid> ugh
19:08:17 <Igloo> Yeah
19:08:28 <ibid> well since the comments are not typeset, i might just as well remove it
19:08:39 <ibid> yeah, works
19:08:44 <Igloo> Putting in an explicit ; would also fix it
19:08:52 <Igloo> But would be visible in the typeset version
19:09:15 <ibid> typesetting inline comments would btw be occasionally useful
19:09:24 <ibid> compare to cweb, for example
19:09:32 <Igloo> Yeah, the problem is they can be all over the place
19:09:35 <Igloo> e.g.
19:09:40 <Igloo> ( -- hello
19:09:42 <ibid> one thing that bothers me
19:09:43 <Igloo> +)
19:10:08 <ibid> each code env is unbreakable. it makes ugly output on that file
19:11:00 <Igloo> Does it not even break between functions?
19:11:02 * Igloo forgets
19:11:15 <ibid> well, i have long data decls in that file
19:11:32 * ibid does not know anything beyond that
19:13:39 <Igloo> Ah, hmmm
19:14:37 <Igloo> Oh, of course, the comment is eating the newline
19:14:47 * Igloo thinks that might be a bug in the report
19:15:44 <ibid> ?
19:17:07 <Igloo> If you have     dec1 -- foo\ndec2    then "-- foo\n" is a comment, so no newline token is between the two decs, so the layout rule doesn't know there is a new line
19:18:25 <ibid> i mean, which report
19:18:33 <Igloo> Oh, the Haskell 98 one
19:18:42 * Igloo reads teh layout section to see exactly what it says
19:19:12 <Igloo> Ah, no, it talks about lines, not newline tokens
19:20:32 <Igloo> If you duplicate the rule for Newline in Haskell2LaTeX/Offside.lhs with (Comment _ _) it ought to fix it, I think
19:20:57 <ibid> well, i already worked around it :-)
19:21:12 <Igloo> Hmmm, by deleting comments  :-)
19:21:34 <ibid> yeah
19:21:44 <ibid> they don't typeset so there's no problem with that
19:22:02 <Igloo> Well, no, unless you want to use the code afterwards  :-)
19:22:03 <ibid> these .lhs's are for typesetting only, customized (i remove irrelevant implementation details)
19:22:07 <Igloo> Anyway, I should be in bed
19:22:14 <Igloo> Ah, right
19:22:17 <Igloo> G'night
19:22:20 <ibid> i have separate files for the actual code
19:22:35 <ibid> almost morning already :-)
19:22:44 <ibid> have a nice sleep period :-)
19:29:34 <whee> hmmm
19:30:14 <cmoline> well there we go. i now have a litle pickle boogieing aroung the screen
19:30:22 <cmoline> how does one spell boogieing
19:30:24 <whee> if I can figure out how to dynamically load functions at runtime with ghc then I'm going to have a fun time
19:30:25 <cmoline> ?
19:30:46 <cmoline> i dont think i will find it in the dict :)
19:31:36 <cmoline> my deep depression in having to use an imperative style has been offset by progress on my game :)
19:41:18 <neniu> cmoline: making a game, or playing a game?
19:45:36 <cmoline> making a clone to learn more about haskell and opengl
19:46:50 <cmoline> though i dont think using hopengl is going to help me master the finer points of functional programming :)
19:54:09 <neniu> and what are you cloning?
20:10:03 <cmoline> burgerspace
20:10:15 <cmoline> and burgerspace is a clone of burgertime
20:10:37 <cmoline> the famous aracade game ive never heard of
20:11:40 * cmoline just realized that neniu has left
20:12:08 <cmoline> ah well. you all want to know what i am doing right?
20:12:29 <cmoline> noone cares about me :(
20:12:30 <cmoline> :)
20:14:56 * ibid is just busy finishing my thesis
21:30:02 <cmoline> i need a datastructure to hold PixelDescriptors(pixmap data). i want to be able to select the appropriate descriptor with the direction that the sprite is going in and the current step of the animation
21:30:14 <cmoline> would a hash table be appropriate?
21:30:37 <cmoline> can an array take constructors as indices?
21:31:18 <cmoline> perhaps i could use an array hidden behind funs that know which indice to use?
21:31:46 <cmoline> ie pixelDescs[spriteLeft][1]
21:31:57 <cmoline> yah thats what ill do
21:32:01 <cmoline> sorry to bother
21:33:57 <engstad> Eh, pixelDescs[spriteLeft][1] sounds much like C.
21:34:25 <cmoline> what would you suggest?
21:34:32 <engstad> What language?
21:34:36 <cmoline> haskell
21:35:04 <engstad> Oh. 
21:35:27 <engstad> An Haskell array simply needs Ix in order to work as an index.
21:36:25 <engstad> But yes, that's probably what I would do. 
21:47:31 <cmoline> ive changed my idea a bit. i now have Array SpriteIx PixelDescriptor.
21:47:51 <cmoline> instead of doing a two dimensional array its now just a single dimension
21:48:07 <cmoline> ie pixelDescs[SpriteLeft 2]
21:48:13 <cmoline> is that better?
21:48:21 <cmoline> i like it. its cleaner
21:55:41 <engstad> Yes, I like that too.
22:36:30 <cmoline> i dont have much experience with classes so forgive my asking this please.
22:37:35 <cmoline> i just tried to compile my code and it says that it cant derive Ix automatically because my constructors are not nullary
22:37:41 <cmoline> so i was wondering ... 
22:38:29 <cmoline> if someone could point me to an example of how one made instances of ix with a type that has nonnullary constructors.
22:38:34 <cmoline> is this doable?
22:41:53 <cmoline> ill just go back to using a 2d array
22:51:43 <cmoline> doh! ! is the array accessor. id been using []
22:51:57 * cmoline smacks himself upside the head
22:52:41 <cmoline> no wonder i was getting these errors about pixelDescs e being applied to too many args
22:58:04 <cmoline> from now on i will compile more frequently so as to catch these dumb errors eariler on :)
22:58:13 <cmoline> anyway off to bed. good night
