00:39:51 * sethk is away: Don't say anything until I return.
02:14:33 <Marvin--> dennis
02:14:59 <Marvin--> how'd it go with the "firewall"?
02:16:14 <dennisb> Marvin--: it seems have fixed itself
02:17:00 <dennisb> or at least it's not bad all the time. I don't dare to call them again, then they will just break my connection all together just before the vacation
02:17:26 <Marvin--> heh
02:18:37 <dennisb> right now ping-times are 15ms and similar, much better then the 2s I had the other day
02:20:18 <Marvin--> speaking of vacation... *stresses around packing*
02:20:36 <dennisb> Going "home"?
02:20:49 <Marvin--> home-home as we call it, yeah
02:20:49 <dennisb> and where is home
02:20:54 <Marvin--> Skövde
02:21:02 <Marvin--> the bus leaves in about one and a half hour
02:21:11 <dennisb> plenty of time
02:21:34 <Marvin--> yeah, well, I have plenty to pack and worry about :)
02:22:04 <Marvin--> and I'm plenty tired too, saw TTT last night
02:28:10 <Marvin--> meh, SET seems to run only on Windows
02:28:27 <dennisb> I've not seen it yet. I'm going the 30:th of dec.
02:28:30 <dennisb> set?
02:36:40 <Marvin--> secure electronic transaction or something
02:36:48 <Marvin--> developed by ibm, visa, micros~1 and perhaps some others
02:37:15 <Marvin--> mastercard and netscape too apparently
02:46:22 <shapr> y0 dnm
03:02:39 <Marvin--> argh, this is getting heavy
03:03:04 <dnm> hey shapr
03:48:06 <shapr> dnm: you doing any Haskell lately?
04:22:46 * shapr bounces happily
04:29:34 <Igloo> What maketh shapr happy?
04:37:37 <dennisb> he is just waiting for Santa
04:46:13 <shapr> actually, I've been cleaning our flat...
04:46:19 <shapr> in preparation for Santa
04:47:41 <Igloo> Cleaning makes you happy? I have a cunning plan...
04:47:47 * shapr laughs
04:47:56 <shapr> I have to go back to cleaning right now ;-)
04:47:59 * shapr goes off with a scrubby
05:34:38 * shapr returns to read more FGL docs
05:52:08 * shapr writes HUnit tests
05:59:25 <shapr> anyone know the expected release date of TH?
06:00:30 <Igloo> TH isn't finalised, but I don't know when GHC 5.05 with what is currently implemented will be released
06:01:06 <shapr> is there a status report somewhere?
06:01:17 * shapr is wondering what part of TH aren't finished
06:02:55 <Igloo> Well, the design for starters  :-)
06:02:56 * shapr yet again wishes the last item in Haskell lists could have a following comma
06:02:58 <shapr> oh
06:04:03 <lament> can't they?
06:04:17 <shapr> I don't think so
06:04:17 <Igloo> No, only import and export lists can
06:04:21 <lament> oh
06:04:23 <lament> evil :(
06:04:46 <shapr> I wonder if they would consider changing that.. or if it would break some lexer rules
06:05:38 <lament> a stupid restriction indeed.
06:05:45 <Janni> hi
06:05:48 <shapr> hi Janni
06:06:00 <shapr> lament: maybe it's just an oversight
06:06:07 <Igloo> Unfortunately no-one asked Simon a few months ago
06:06:07 <shapr> or maybe they have a good reason for doing it that way
06:06:14 <lament> i doubt that
06:06:22 <shapr> lament: well, ask on the mailing list
06:06:25 <shapr> I'm interested
06:06:37 <lament> ask, then :)
06:06:40 * Igloo wants (5,) sections too, but they're a little more dodgy
06:06:42 <lament> i don't think i even subscribe to it
06:06:52 <shapr> Igloo: size 1 tuples?
06:06:54 <shapr> I'd like that.
06:07:02 <Igloo> No, (5,) == \x -> (5,x)
06:07:13 <shapr> ?
06:07:15 <Igloo> Why do you want size 1 tuples?
06:07:16 <lament> heh
06:07:31 <Igloo> Like how (5 +) == \x -> (5 + x)
06:07:36 <shapr> ohhh
06:07:43 <shapr> that makes perfect sense to me
06:07:48 <Igloo> And similarly (5,6,7,,8,9)
06:07:52 <lament> heh :)
06:08:16 <shapr> size one tuples seem sensible to me
06:08:21 <Igloo> For what?
06:08:27 <Igloo> And what syntax would you use?
06:08:39 <shapr> I was thinking (5,)
06:08:53 <shapr> now I'm not sure
06:09:08 <Janni> i think its quite cool
06:09:18 <shapr> Janni: what is?
06:09:37 <Janni> tuple-currying
06:10:29 <Janni> if there was this curry operator i suggested some time ago ('?') you could also use (2, ?, 3) :: Int -> (Int, Int, Int)
06:11:13 * shapr wants a unicode spice symbol
06:11:22 <Janni> spice?
06:11:28 <shapr> yah, curry is a spice
06:11:33 <shapr> like curried chicken
06:11:43 <Janni> well, i don't know a word "spice"
06:11:48 <shapr> then you could use the curry operator on the chicken datatype.
06:11:49 <Janni> and de-dict also doesnt
06:12:08 <shapr> curry, parsely, paprika, pepper, salt, etc
06:12:25 <Janni> aww...
06:12:52 <shapr> those are all spices
06:12:54 <Igloo> GewÃ¼rz possibly, if that uses more sensible characters for you
06:13:21 <Janni> shapr: i wonder why de-dict doesnt know that world...
06:13:30 <shapr> maybe it can find spices ?
06:13:31 <shapr> or spicy ?
06:13:40 <Janni> oh no, it was my error (typo)
06:14:34 <Igloo> Argle, I think I'm about to be hit by the DMR
06:14:42 <shapr> DMR?
06:14:49 <shapr> Department of Motor Revenue?
06:15:23 <Igloo> Dreaded Monomorphism Restriction
06:15:30 <shapr> ohh
06:15:49 * shapr hacks in one button HUnit testing
06:16:46 <Igloo> I think it will break referential transparency in piece-by-piece generation of code
08:05:06 <cinema> Hi, I have a question concerning the use of FFI in Haskell. I am trying to create a bindin for Berkeley DB (the model being the lisp binding)
08:06:43 <cinema> The question concerns side-effets in C function calls, i.e. something like DB **
08:08:44 <cinema> How do I convert the following function : int db_create (DB **, DB_ENV *, u_int32_t); (it has 2 results, an int and the DB *) ?
08:09:20 <Mr0z3k^> #pl-opers
08:09:20 <Mr0z3k^> #pl-opers
08:09:21 <Mr0z3k^> #pl-opers
08:09:21 <Mr0z3k^> #pl-opers
08:09:22 <Mr0z3k^> #pl-opers
08:09:23 <Mr0z3k^> #pl-opers
11:25:06 * Akriel is away: I'm in flordia as a best man in a wedding
15:50:10 <Janni> hi
15:53:51 <Heffalump> hi
19:17:02 <mgoetze> anyone alive? :)
19:17:42 <dark> Somewhat.
19:18:09 <mgoetze> dark: early, or late? :)
19:18:23 <dark> Late.  And I habe a gold.
19:18:32 <mgoetze> awww
19:18:40 <mgoetze> join #happyholidays, we'll cheer you up :)
19:20:21 <mgoetze> btw, i started my GoNads project! it can already represent a board internally and draw it on the screen. next i have to tell it what a legal move is :)
19:29:46 <dark> Cool :)
19:29:59 <dark> Determining what a legal move is could be very difficult, depending on the ruleset :)
19:30:43 <mgoetze> hm? main differences i know are in the scoring...
19:30:58 <dark> ko rules vary wildly.
19:30:59 <mgoetze> i thought the actual playing was the same everywhere
19:31:11 <mgoetze> well, i'll just take the japanese ones i'm used to :)
19:31:18 <dark> And there are some difference in suicide rules.
19:31:35 <mgoetze> oh, yeah, like in new zealand, suicide is allowed
19:31:41 <dark> mgoetze: Those must be different japanese ones than the ones I know about :)  The japanese ko rules are the most complicated.
19:31:47 * mgoetze doesn't quite see the point of allowing it, though
19:32:22 <mgoetze> dark: hm? well, my board is a list of White|Black|Empty|KoEmpty
19:32:43 <mgoetze> you can't set a stone into a KoEmpty field... simple, isn't it?
19:33:43 <dark> mgoetze: When does KoEmpty become Empty?
19:34:09 <mgoetze> after every move...
19:34:29 <dark> Then the game can still get into an endless cycle :)
19:35:30 <mgoetze> well, yeah, if players don't actually close the ko
19:35:30 <dark> http://www.britgo.org/rules/compare.html#rept has some comparisons.  It's a bit short about the japanese rules, though.
19:36:15 <dark> mgoetze: There can be more than one ko on the board.  Players could get into a cycle where the player who breaks the cycle loses the game.
19:36:36 <dark> (That's my definition of "endless cycle")
19:37:13 <dark> Hmm, I don't know what the #rept is for in that url.
19:37:16 <mgoetze> dark: bah, i was hoping to get the basics right first :)
19:46:12 <o3> suicide rules?  this sounds like a pretty hardcore game
19:47:05 <mgoetze> yeah
19:47:16 <mgoetze> it's the kind of game that makes kids drop out of school at age 10 :)
20:45:04 * sethk is back (gone 20:03:55)
20:45:17 <mgoetze> wb sethk 
20:45:36 <sethk> hello
20:45:58 <mgoetze> sup?
20:48:04 <sethk> Not much, yourself?
20:48:35 <mgoetze> wrecking my sleep cycle as soon as i possibly could :)
20:48:50 <sethk> It's 9:45 at night here.
20:48:53 <mgoetze> but at least we have a nice party going on in #happyholidays (hint, hint)
20:49:02 <mgoetze> it's 5:48 in the morning here :)
20:49:40 <sethk> Are you still up, or getting up at such an hour?
20:49:58 <sethk> I worked until 4:30 AM this morning, so I shouldn't talk.
20:50:06 <mgoetze> still up, since about noon
20:51:58 <sethk> I slept about five hours, which is about average for me.  But, if I am still awake when it gets light out, I'll never fall asleep until the following night.
20:52:57 <mgoetze> i usually fall asleep just when i think that i'll be able to hold out long enough to keep my appointments... lol
20:53:28 <sethk> I'm too old now to skip an entire night of sleep.
20:54:08 <mgoetze> i fear i am, too :)
20:54:13 <mgoetze> (and i'm only 19)
20:55:03 <sethk> Getting on in years?   :)  (I'm about 2.5 times older.)
20:55:56 <mgoetze> yeah, i feel older every day
20:56:06 <mgoetze> back aches, and stuff like that
20:56:37 <sethk> You are too young for all that.  I think you need to sleep more.  :)
20:57:40 <mgoetze> lol, prolly
22:14:59 <rogon> who #haskell
22:16:08 <sethk> who what?
22:16:08 <rogon> Greets. I'm reading a paper which includes an "easy" exercise, and I'm stuck.
22:16:11 <sethk> :)
22:16:15 <rogon> ;-)
22:17:03 <rogon> I'm wondering about newSTArray, readSTArray and writeSTArray.
22:17:15 <rogon> Those are hash-tables?
22:18:07 <sethk> I believe os.
22:18:11 <sethk> s/os/so/
22:18:26 <rogon> Specifically, I don't know what to put in the "bounds" parameter for newSTArray.
22:19:25 <rogon> The excersise is to put a list of strings into a function returning only unique strings out. So: nodups ["a","b","a","a","c"] = ["a","b","c"].
22:19:57 <sethk> OK...
22:20:49 <rogon> using the STArray monad.
22:21:58 <rogon> But, what would I put into the array?
22:22:36 <rogon> The position of the first encounter in the list?
22:23:20 <rogon> So: { "a" -> 0, "b" -> 1, "c" -> 4 } ?
22:23:34 <rogon> *sigh*
22:26:01 <sethk> Back up a bit.
22:26:18 <sethk> Why do we need a monad here at all?
22:27:41 <rogon> Oh, because of efficiency.
22:28:20 <rogon> The excersise says: "It is easy to write an inefficient version of nodups."
22:28:42 <rogon> Oh, and the result should be produced lazily.
22:29:31 <rogon> It's a really good paper though... I'm starting to grok monads.. :-
22:30:16 <rogon> "Monads and Effects" Benton, Hughes, Moggi, Sept. 5 2000.
22:33:01 <rogon> Hmm, I suppose I could just make a hash-function, so that the array is: int -> string.
22:38:29 <sethk> rogon: Yes, but you still have to find collisions.  You could also use some kind of trie structure.
22:40:49 <rogon> hold on.
22:54:51 <engstad> Still no luck, but I did manage to make a non-monadish nodups.
22:55:51 <engstad> nodups :: [String] -> [String]
22:55:51 <engstad> nodups strs = nodups' [] strs 
22:55:51 <engstad>     where nodups' old (x:xs) = if x `elem` old then nodups' old xs else x:(nodups' (x:old) xs)
22:55:51 <engstad>   nodups' old []     = []
22:56:20 <engstad> This one is lazy. 
23:00:28 <sethk> That looks reasonable...
23:01:44 <engstad> I don't understand to fit in the newSTArray (a,a) -> b -> ST c (STArray c a b)
23:02:14 <engstad> This will initialyze the hash, but - how do you initialize it to nothing?
23:02:29 <engstad> How do you make an "empty" array.
23:44:08 <engstad> Ah! I get it. :-)
23:44:30 <sethk> Tell me.
23:44:44 <engstad> Can I dump what I've got?
23:45:13 <engstad> ~20 lines of code
23:46:14 <engstad> First of all, the newSTArray works differently.
23:46:38 <engstad> The "range" is expected range.
23:47:00 <engstad> So, I made a simple hash function taking the first character of the string as hash.
23:47:28 <engstad> Doesn't really matter. Then the hash table is [ '\0' .. '\255' ] into String's.
23:47:44 <engstad> Sorry [String].
23:47:56 <engstad> Initialize them all to []'s. 
23:48:28 <engstad> Then for each new string, find the elems in that hashtable. 
23:48:45 <engstad> nodups' hsh []     = return []
23:48:46 <engstad> nodups' hsh (a:as) = do entries <- readSTArray hsh (hash a)
23:48:46 <engstad> if a `elem` entries 
23:48:46 <engstad>    then do res <- nodups' hsh as
23:48:46 <engstad>    return res
23:48:46 <engstad>    else do writeSTArray hsh (hash a) (a:entries)
23:48:48 <engstad>    res <- nodups' hsh as
23:48:50 <engstad>    return (a : res)
23:49:47 <engstad> And it works. :-)
23:59:04 <sethk> You can DCC it to me also if you like.
