00:18:21 * inkedmn 's is back
00:18:27 <inkedmn> er...
00:18:31 <inkedmn> n/m, i'm dumb
00:20:15 <seth> Hi
00:21:54 <inkedmn> seth: how's it going?
00:22:26 <seth> Not bad.  I'm fading out here (it's 1 AM) so I won't be here too long   :)
00:22:36 <seth> Are you making progress?
00:23:08 <inkedmn> well, i took a break to hang out with my wife for a bit, so after that last function definition, i boned out
00:23:15 <inkedmn> where are you (in the world)?
00:23:23 <seth> Arizona.  You?
00:23:36 <inkedmn> southern california
00:24:21 <inkedmn> (right near disneyland)
00:28:53 <seth> Got to go, I'm falling asleep.  :)
00:29:17 <inkedmn> heh, alright man :)
00:29:20 <inkedmn> g'nighgt
00:29:41 * seth is away: I'm busy
00:39:12 <inkedmn> later guys
01:33:45 * pesco is away: bbiab
01:48:30 <dark> Is hasdl an excessively silly name?
01:54:46 * pesco is back (gone 00:21:00)
06:19:17 <Janni> hi
06:26:39 <Janni> corecode_: have a look at http://people.brad-x.com/~kristopher/images/wallpapers/DIGITAL.jpg. i really like her :)
06:26:54 <Janni> (my wallpaper)
06:30:03 <Janni> sorry. wrong channel
06:59:03 <Janni> bbl
07:19:04 * seth is back (gone 06:49:23)
07:36:07 <Janni> re
08:29:49 <Janni> cu
10:22:35 <sl0th> hi, can someone help me with a question?
10:22:40 <sl0th> I can't make a function that adds two binary numbers
10:23:07 <sl0th> like... [1,1] is 3 and [1] is 1 , therefore, it should give [1,0,0]
10:27:45 <sl0th> hi again
10:27:46 <sl0th> sorry
10:28:02 <sl0th> anybody with that func that adds binarys?
10:28:12 <sl0th> i know i'm lame
10:28:18 <sl0th> but, i need that
10:28:33 <Heffalump> what for?
10:28:40 <sl0th> for a work
10:28:46 <andersca> Heffalump: school assignment? :)
10:28:49 <sl0th> i'm stuck with that question (function)
10:28:53 <Heffalump> andersca: my thoughts too :-)
10:28:54 <sl0th> andersca: sort of
10:29:27 <sl0th> oh, i can't switch from binary to integer , then sum, then switch it back
10:29:32 <sl0th> of course=)
10:29:34 * Heffalump suggests you look at using reverse, zipWith and foldr or foldl
10:29:38 <ibid> sl0th: you should be more specific. surely you have attempted something; what specifically isn't working
10:29:41 <sl0th> thanks
10:29:55 <sl0th> ibid: can i give you an example?
10:30:05 <ibid> depends on the example
10:30:09 <sl0th> ok
10:30:13 <sl0th> here it is
10:30:16 <sl0th> w8 just a sec
10:30:28 <ibid> (don't flood)
10:30:33 <sl0th> sure
10:30:42 <ibid> (if you have something long, post an url)
10:30:56 <sl0th> no, i'm just writing the example on-the-fly
10:31:15 <sl0th> uhm
10:31:19 <sl0th> for instance
10:31:41 <ibid> surely you have attempted something; why wing one on the fly?
10:31:48 <sl0th> suppose i have [One,One] and [One,One]
10:31:57 <ibid> i mean code
10:32:05 <sl0th> i could give it to you
10:32:15 <sl0th> is that ok
10:32:36 <ibid> depends on what you mean by give
10:32:41 <sl0th> send :)
10:32:52 <sl0th> dcc it to you
10:33:07 <ibid> dcc does not work for me, i'm behind a nat firewall
10:33:13 <sl0th> oh.
10:33:49 <ibid> and don't send to me only
10:33:56 * ibid does not do private helping
10:34:12 <ibid> if it's one or two lines, paste here, otherwise, paste an url
10:34:33 <sl0th> i can't really publish it
10:34:34 <sl0th> anyway
10:34:58 <sl0th> what's really getting me stuck is how i make it work when i have for example [One,One] + [One,One]
10:34:59 <ibid> if you can't publish it, i don't want to see it
10:35:16 <sl0th> how can i carry the One from One+One
10:35:34 <ibid> this is really a simple problem; if it is an exercise, we can hint you; otherwise, you should really be able to figure it out
10:36:00 <sl0th> i'd appreciate the hint :)
10:36:02 <ibid> if it's that you know the algorithm but can't translate it to haskell, then we might be able to help you
10:36:12 <ibid> but not if you can't talk about it publically
10:36:32 <ibid> sl0th: we can't help you if you don't show us where you currently are
10:36:46 <sl0th> what do you mean
10:36:57 <whee> he just wants to know that you've actually tried something and are't being lazy
10:37:00 <ibid> i mean what i'm saying
10:37:12 <sl0th> ah heh
10:37:14 <sl0th> sure
10:37:21 <ibid> what whee said, and also i want to help you along, not give you the full answer
10:37:41 <ibid> i can't do that if i don't know where you are currently
10:38:06 <sl0th> ok
10:38:35 <sl0th> binlistsum [] [] = []
10:38:35 <sl0th> binlistsum (x:xs) (y:ys) | (xs == [] && ys /= []) = (lolada x y)
10:38:35 <sl0th>                          | (xs /= [] && ys == []) = xs
10:38:35 <sl0th>                          | otherwise = (binsum x y):(binlistsum xs ys)
10:38:51 <sl0th> eek, lolada is binsum
10:38:53 <sl0th> sorry
10:39:03 <ibid> binlistsum, surely?
10:39:28 <ibid> um, your second line is dropping an x
10:39:31 <sl0th> binsum Zero Zero = Zero, binsum Um Um = Zero, binsum Um Zero = Um, etc.
10:39:40 <ibid> ah
10:39:45 <ibid> ok, then it isn't
10:39:59 <sl0th> btw, Um == One
10:40:04 <sl0th> (I'm portuguese :)
10:40:08 <ibid> heh
10:40:18 <sl0th> heh
10:40:41 <ibid> i suggest trying to handle the different cases by pattern matching, not by guards
10:41:04 <ibid> currently your program will fail for binlistsum [Um] [] :-)
10:41:06 <whee> I don't know how well that'll work, it doesn't seem to handle carrying
10:41:16 <sl0th> exactly
10:41:18 <sl0th> :)
10:41:25 <sl0th> and i want it to
10:41:25 <ibid> yeah
10:41:43 <ibid> sl0th: is the least significant bit the first or the last element of the list?
10:43:47 <whee> heh I can't even think of how to do carrying easily
10:44:11 <ibid> if the lsb is first, then it's just normal recursing afaict
10:44:14 <sl0th> oh
10:44:25 <ibid> if it's last, i'd reverse the list
10:44:51 <sl0th> the list that i take for parameter on the func is reversed
10:44:59 <sl0th> so it's more easy to understand the sum
10:45:03 <Janni> hi
10:45:12 <sl0th> so the least significant is the first piece
10:45:14 <ibid> in fact, if lsb is last then reversing is required anyways :-)
10:45:15 <sl0th> bit
10:45:20 <ibid> sl0th: so lsb is first?
10:45:24 <sl0th> yes
10:45:44 <ibid> ok
10:45:58 <ibid> you need to have a third parameter for binlistsum, for the carry bit
10:46:16 <sl0th> right
10:47:08 <sl0th> i'll work on that, thanks
10:47:53 <ibid> and as i said earlier, you need to work on how you detect the cases
10:48:00 <ibid> i suggest simple pattern matching
10:48:20 <sl0th> ok
10:48:20 <sl0th> =)
10:48:36 <sl0th> i'll get back to work
10:48:37 <sl0th> thanks=)
10:48:38 <ibid> the guards are overkill and are probably just making you think too complicatedly
10:49:08 <ibid> Janni: hi
11:15:52 <whee> hehh
11:16:03 * Marvin-- yawns
11:16:08 <whee> wrote my own version of that and it entirely sucks, giving up now :)
11:16:21 <whee> doesn't handle overflow properly and also needs lists of the same length
11:20:16 <dark> I sometimes find it frustrating when people come here with homework assignments that are actually fun and that I want to solve myself :-)
11:20:29 <dark> Then I can't discuss the solution with them here.
11:21:13 * Marvin-- has been working on the stupid d-i all day
11:22:43 <andersca> are you using python?
11:23:01 <Marvin--> no, C and sh, one of the design goals is to fit it on a floppy
11:23:12 <Marvin--> and that makes python a bit...cumbersome :)
11:29:10 <whee> woo, mine works now
11:29:16 <whee> did you try your own dark?
11:29:34 <jemfinch> my own dark?
11:29:46 <whee> dark is a person :)
11:30:08 <jemfinch> :)
12:08:47 <dark> whee: No, this was not one of them :)
12:09:52 <whee> damn
12:09:53 <whee> heh
12:10:06 <whee> my solution uses list reversals all over the place and I don't think that's good :)
12:11:05 <dark> You only need to reverse twice, no?
12:11:36 <whee> with the msb being the head of the list, you have to reverse both input lists, add, then reverse the result
12:11:39 <dark> Or only once if you keep them lsb first.  Then you only need to reverse when printing.
12:12:23 <whee> plus I have a reverse for when one of the input lists ran out of input
12:12:36 <whee> :|
12:13:00 <dark> Hmm.
12:15:32 <dark> You can probably fix that, but then you end up reversing as you go along.  It would probably be more complicated and not any faster.
12:15:44 <dark> Addition is simply a lsb-first activity :)
13:31:06 <dark> Hmm... "Programming Linux Games" begins using sdl-image very early in the book.  I guess I'll have to wrap it too.
15:07:05 <jemfinch> did I ever mention how stupid I think it is that arrays and vectors are completely different types?
15:08:10 <clausen> why is it stupid?
15:08:23 <clausen> (they don't implement common type-classes?)
15:08:27 <jemfinch> because vectors are subtypes of arrays.
15:08:43 <clausen> don't you mean the other way around?
15:08:53 * jemfinch is speaking mostly of ML, but is sure it's the same in Haskell, if Haskell even has mutable arrays.
15:08:56 <jemfinch> yeah, I do, sorry.
15:09:30 <jemfinch> they should use phantom types.
15:09:38 <clausen> pure haskell doesn't have mutable arrays
15:09:49 <clausen> (but, you can use monad-type-stuff)
15:09:54 <jemfinch> mind if I speak SML for a sec?
15:11:10 * clausen only knows ML from reading okasaki's book, hehe
15:11:35 <jemfinch> type ('a, 'b) vector = ARRAY of 'a array | VECTOR of 'a vector;
15:11:42 <jemfinch> well..
15:11:48 <jemfinch> make that 'a _vector to fix the name class.
15:11:51 <jemfinch> s/class/clash.
15:12:01 <jemfinch> geez, I'm making typos all over the place :)
15:12:34 <jemfinch> type ('a, 'b) vector = ARRAY of 'a array | VECTOR of 'a _vector (* where _vector is the underlying implementation of vectors *)
15:13:28 <jemfinch> type ro
15:13:28 <jemfinch> type rw
15:13:54 <jemfinch> did you get the "type ro" and "type rw" messages?
15:14:08 <opet> yeah
15:14:32 <jemfinch> then, from the user's perspective, what we now call "'a arrays" are ('a, rw) vectors, and what we now call "'a vectors" are ('a, ro) vectors.
15:15:36 <jemfinch> so you can write a function Array.copy that takes a ('a, 'b) vector, for instance, and it can operate on both arrays and vectors.  So you don't have to duplicate its functionality in copyVec or something.
15:17:25 <jemfinch> the difference between vectors and arrays should be encoded with a phantom type, that's what I'm saying.  Assuming, of course, the actual implementation of vectors and arrays is identical with the exception of their writability.
15:17:45 <dark> I have no idea how what you say maps to Haskell :)  
15:18:19 <jemfinch> hmm...remind me again what the "data" declaration for a list looks like in Haskell.
15:18:21 <dark> Haskell98 has nonmutable Arrays in its standard library, and no vectors unless you count tuples as such.
15:18:33 <jemfinch> nonmutable arrays are the same as vectors in SML.
15:18:40 <jemfinch> immutable, that is...
15:19:53 <dark> lists are built in, you can't write a data declaration for that syntax.  But you can do data List a = Empty | List a (List a)
15:23:10 <jemfinch> so that's the same as "data list a = Nil | Cons a (list a).
15:23:30 <dark> Well... except that type names have to start with capitals :)
15:24:16 <jemfinch> the "phantom types" pattern certainly maps to Haskell, but I don't think this particular example does because arrays are naturally mutable.
15:33:41 <dark> I don't know what it means in Haskell for two types to have identical implementation.
15:34:06 <dark> Usually you would capture the similarities between two types in a typeclass.
15:34:30 <dark> Unless you're already stuck with a published interface.  I hope Haskell 2 will allow retroactive typeclassing :)
15:34:30 <ibid> that's identical interface, not identical implementation :-)
15:34:48 <jemfinch> retroactive typeclassing?
15:34:49 <ibid> retroactive?
15:34:56 <ibid> what do you mean?
15:34:58 <dark> ibid: I'm trying to figure out what jemfinch means with these phantom types :)
15:35:16 <ibid> dark: what do you mean with retroactive typeclassing?
15:35:22 <jemfinch> dark: do you know socket programming in C?
15:35:26 <dark> ibid: I mean that for example once you define a class Sequential, you can redefine list operations as members of it.
15:35:47 <dark> Currently we have all sorts of hacks in the namespace to work around that :)
15:35:47 <ibid> ahh, for functions, not types
15:35:51 <dark> Yeah.
15:36:04 <dark> Retroactive typeclassing for types is done with "instance", I guess :)
15:36:04 <jemfinch> oooh.
15:36:12 <dark> jemfinch: Yep.
15:36:18 <ibid> dark: yeah, that's why i was confused :-)
15:36:38 <ibid> it's strange though that 2 > 98 :-)
15:36:40 <jemfinch> dark: so let's say you want to write a socket thing in a strictly typed language like SML.
15:37:00 <jemfinch> (or Haskell, either way, but I'll stick to what I know, especially since sockets are inherently mutable...)
15:37:05 <dark> ibid: Maybe it should be Haskell II
15:37:06 <jemfinch> not mutable as much as side-effecting.
15:37:07 <jemfinch> anyway...
15:37:18 <ibid> jemfinch: side-effects are the realm of monads in haskell
15:37:23 <ibid> jemfinch: and it has been done
15:37:40 <ibid> sockets in haskell i mean
15:37:42 <jemfinch> sockets are basically of two forms in C: read-write sockets (the most common kind) and server sockets, those accepting connections.
15:37:53 <jemfinch> ibid: I know.  I'm trying to show an example of phantom types.
15:38:32 <dark> jemfinch: I always wondered why those were treated so similarly.  I guess it's that for someone who has select(), everything looks like a file descriptor :)
15:38:33 <jemfinch> actually, because sockets would inherently have to go into monads, this probably isn't a good example.
15:38:55 <ibid> dark: on unices everything is a file
15:38:57 <ibid> sort of
15:39:05 <jemfinch> dark: yeah, they're underlyingly using the same implementation, but fundamentally they should be considered different types.
15:39:50 <jemfinch> that's the nice thing about the HM typesystem, though.  You can encode such an invariant into the types, so you can use the same underlying implementation with two different types.
15:40:06 <jemfinch> let's say your underlying representation is a _socket.
15:40:13 <jemfinch> so you define a type:
15:40:17 <jemfinch> type 'a socket = _socket;
15:40:26 <jemfinch> (note how the 'a doesn't appear on the right side of the type declaration)
15:40:35 <jemfinch> then you define two more types:
15:40:38 <jemfinch> type rw
15:40:41 <jemfinch> type accepting
15:40:59 <jemfinch> so you have a function newSocket that returns a 'a socket.
15:41:34 <jemfinch> and then you have all the standard functions on sockets, like bind, listen, accept, recv, send, setsockopt, etc.
15:42:14 <jemfinch> send/recv both take a rw socket.
15:42:31 <jemfinch> whereas listen takes only an accepting socket, and accept takes only an accepting socket.
15:42:54 <jemfinch> I was tempted to say that bind takes only an accepting socket, but iirc, you can bind to a port to use it as an outgoing port to another computer, so that can't be the case.
15:44:39 <jemfinch> I guess that wouldn't really work well, though, because then you couldn't put accepting sockets and rw sockets into a list together.
15:46:14 <dark> You could if you wrapped them in a Socket type.
15:46:35 <ibid> or used existential types?
15:47:04 <dark> Actually that's probably how I would do it in Haskell:  data Socket s = ReadWrite s | Accepting s
15:47:15 * ibid too
15:47:25 <dark> Oh, but then you can't use typechecking to make sure that accept only takes an accepting socket.
15:47:31 <ibid> but that does not give you static checking
15:47:40 <ibid> data PrimitiveSocket = ...
15:47:49 <dark> Can't have it both ways, I guess: if you can put them in the same list, then the typechecker knows nothing about which of them gets taken off the list.
15:47:55 <ibid> newtype ReadWriteSocket = RW PrimitiveSocket
15:48:06 <ibid> newype AcceptingSocket = A PrimitiveSocket
15:48:20 <dark> So accept (head ready_sockets) is going to be a problem.
15:48:28 <ibid> data Socket = SRW ReadWriteSocket
15:48:44 <ibid> | SA AcceptingSocket
15:48:56 <ibid> or just use existentials...
15:49:24 <dark> ibid: Can you give an example of that?
15:49:39 <ibid> dark: yeah, for the list one, static checking is not possible but for any other use, one would want to have it...
15:50:09 <ibid> then you'd have something like class Accepting a, instance Accepting AcceptingSocket, instance Accepting Socket etc
15:50:27 <ibid> the Accepting Socket instance would do dynamic checking...
15:50:32 <ibid> dark: no
15:50:39 <dark> The problem is that I can almost guarantee these sockets are going to share a list, because that's the natural interface to select() or poll() :)
15:50:48 <ibid> dark: i've never used existentials, but i think they would help here
15:50:59 <ibid> dark: separate lists?
15:51:08 <ibid> why not separate lists?
15:51:25 <dark> You have to select() on all at once.  I guess you could do low-level magic there.
15:51:39 <ibid> select [a] [b] :-)
15:51:48 <ibid> a rigged select, that is
15:52:30 <dark> That would be low-level magic :)  But presumably all socket types will have a get_file_descriptor member somewhere.
15:52:33 <ibid> select :: [forall a . Selectable a => a] or something (the syntax is probably wrong:-) but that does not give static checking...
15:54:04 <dark> Is this different from (Selectable a) => [a] ?
15:54:18 <ibid> yes, yours is a homogenous list
15:54:25 <ibid> the elements are all of the same type
15:55:13 <dark> This sounds unhaskellish to me :)
15:55:24 <ibid> well, it's not 98 :-)
15:55:38 <ibid> dark: btw, which sounds unhaskellish?
15:57:42 <dark> ibid: non-homogenous lists with dynamic typechecks.
15:57:56 <ibid> why not?
15:57:58 <dark> Of course, I have no problems with [Dynamic] :)
15:58:15 <ibid> well, yeah, the problem is that Dynamic is not extensible
15:58:57 <ibid> and btw, i may be getting existential typing wrong :-)
15:58:58 <dark> Because you can't use typeclasses to access it?
15:59:10 <ibid> because you can't extend it
15:59:27 <ibid> without changing the original def
15:59:35 <dark> I'm having a lot of fun with a FiniteMap String Dynamic in one program.
15:59:52 <ibid> you might want to read the ghc docs on existentials
16:00:13 <dark> ibid: What kind of extension do you mean?  I can store any type in a Dynamic.
16:00:46 <ibid> dark: extension in another module, for example
16:01:01 <dark> ... but that's exactly what I'm doing.
16:01:08 <ibid> you have the data declaration in one module, you can't add cases to it in another module
16:01:11 <ibid> dark: impossible
16:01:34 <ibid> we may be thinking of different things though
16:01:47 <dark> Hmm, are you takin "Dynamic" as an example name?  I meant specifically the one defined in ghc's Data.Dynamic.  It works by using a class Typeable, which assigns a unique id to typeable types.
16:02:18 * ibid did not know of Data.Dynamic
16:02:47 <ibid> Data.Dynamic sounds like it's existential types under the hood :-)
16:03:38 <dark> Aha... no, I'm checking :)  And it uses unsafeCoerce#
16:04:45 <dark> Accessing it is completely safe, though.  fromDynamic returns Maybe a, and returns a Just if the type matches and Nothing otherwise.
16:04:56 <dark> The caller can then make it unsafe by using fromJust, but oh well :)
16:06:01 <ibid> fromJust does not make it unsafe i believe
16:06:04 <dark> I'm using a FiniteMap String Dynamic in one program, and it works well: having a value of the wrong type is treated exactly like not having the value in the map.
16:06:23 <ibid> it is just fromJust (Just a) = a ; fromJust Nothing = undefined, is it not?
16:06:43 <ibid> at least i thought it was
16:07:03 <dark> Yeah, it is.  So it's safe as long as you don't actually evaluate it.
16:07:08 <ibid> anyway, Nothing does not carry a value
16:07:15 <ibid> uhm, how do you define unsafe?
16:07:28 <dark> ibid: Programs unexpectedly crashing is how I define unsafe :-)
16:07:31 * ibid defines it "things go bad without us noticing"
16:07:55 <ibid> Haskell programs crashing is safe behaviour :-)
16:08:00 <ibid> (unless it's a compiler bug)
16:08:26 <dark> I think that's only true for your own programs :)  Once other people start using them, they had better not crash.
16:08:28 <ibid> with your definition, a lot more than just unsafe* are unsafe
16:08:42 <dark> Yeah, like head and tail.  That bothers me.
16:08:47 <ibid> dark: no, i call programs that crash buggy, not unsafe
16:09:17 <dark> ibid: The main reason I use Haskell is for the type system to protect me against that kind of bugginess :)
16:09:27 <ibid> well, you are not getting it
16:10:03 <ibid> a type system cannot by definition protect you from all crashes, unless the language is unsafe
16:11:26 <dark> Well... that was exactly the goal of Newspeak :)
16:11:48 <ibid> newspeak is not turing complete
16:11:58 <ibid> at least the orwellian newspeak
16:12:08 <dark> There's a language for embedded systems that lives up to the name.
16:12:09 <ibid> if you are speaking of something else, you've lost me
16:12:50 <ibid> in that case, either the language is not turing complete or its compilation is undecidable :-)
16:12:57 <dark> For example, if you index an array in Newspeak, the compiler will try to verify that the index will be in range.  If it can't verify that, it reports an error.
16:13:16 <ibid> okay, not turing complete probably then
16:13:25 <ibid> yeah, and things like that do exist
16:13:46 <ibid> my plan for my phd work is to make a latter kind of a language :-)
16:14:05 <ibid> and make it practically useful...
16:14:29 <dark> Where compilation is undecideable?
16:14:34 <ibid> dark: you should probably look at ESC/Java and CCured
16:14:38 <ibid> dark: ?
16:14:50 <ibid> yeah
16:14:55 <dark> Never heard of those :)  I once started looking at Cyclone though.
16:15:01 <ibid> semidecidable actually
16:16:51 <dark> This reminds me of an article that described a computer built from billiard balls traveling over an interactive surface.
16:17:16 <ibid> a language where, if your program is not correct, the compiler may end up chasing its tail forever
16:17:36 <ibid> but if it is correct, the compiler will produce the binary
16:17:46 <ibid> eventually :-)
16:18:31 <dark> Er.  I mean, over a frictionless surface.  I wonder where I got "interactive" from.
16:18:43 <ibid> it sounded weird :-)
16:19:13 <dark> Sometimes such glitches are scary.  Makes me wonder if I'm buggy :)
16:19:29 <ibid> of course you are
16:19:45 <ibid> every creature of sufficient power will necessarily be buggy :-)
16:19:52 <ibid> (computing power)
16:20:13 <dark> ibid: Hmm, interesting statement in a theological context.
16:20:31 <ibid> anyway the bar downstairs has stopped feeding me unwanted live music
16:20:40 <ibid> so i'll go to bed
16:20:42 <ibid> finally
16:20:46 <dark> Okay :)
16:21:03 <dark> Do you have a name for your planned language?
16:21:14 <ibid> i've considered some names
16:21:30 <ibid> i had a wonderful name, let's see if i can remember it...
16:21:59 <ibid> no actually, this was for the language modelled after abadi and cardelli (sigma-lambda calculus)
16:22:13 <ibid> obfus (object-function system:-)
16:22:29 <dark> Heh.
16:23:04 <ibid> do you know any colloquial finnish?
16:23:10 <ibid> such as "relaa"
16:23:23 <dark> Nope.  Except maybe by accident :)
16:23:23 <ibid> that would make a nice name ("reliable language")
16:23:38 <ibid> relaa is approximately relax, very colloquial
16:24:40 <ibid> relaa is actually good imho
16:24:47 <ibid> just came up with it
16:24:59 <dark> Quick, write it down :)
16:25:10 <ibid> yeah
16:25:25 <ibid> and trademark it so you people can't steal my intellectual property
16:25:37 <ibid> (i need to wash my mouth with soap after saying that)
16:25:57 <dark> I think maybe we need to define a new term "spiritual property".  For all the things that should be mine, but aren't.
16:26:12 <ibid> freety
16:26:20 <ibid> or freeity
16:27:27 <ibid> but sleep...
16:27:28 <ibid> bbl
16:52:56 <inkedmn> evenying gentelmen :)
16:53:03 <inkedmn> (assuming you're both male, of course) :)
16:54:17 <lament> time of day, inkedmn.
16:55:07 <inkedmn> ah, it's 5pm where i am
16:55:22 <inkedmn> california, us
17:53:10 <inkedmn> ok, i wrote this function in a file:
17:53:10 <inkedmn> signum x =
17:53:11 <inkedmn>     if x < 0
17:53:11 <inkedmn>         then -1
17:53:11 <inkedmn>         else if x > 0
17:53:11 <inkedmn>             then 1
17:53:12 <inkedmn>             else 0
17:53:22 <inkedmn> copied it straight out of a tutorial i'm doing
17:53:32 <inkedmn> but when i pass it a negative number, i get a type error...
17:53:47 <lament> heh, what does it say?
17:53:48 <Igloo> You probably need parentheses around the number
17:54:07 <Igloo> signum -5 == signum - 5
17:54:20 <lament> ouch.
17:54:22 <inkedmn> lament: here:
17:54:23 <inkedmn> ERROR - Illegal Haskell 98 class constraint in inferred type
17:54:23 <inkedmn> *** Expression : signum - 2
17:54:23 <inkedmn> *** Type       : (Ord a, Num a, Num b, Num (a -> b)) => a -> b
17:54:35 <lament> oh. Igloo's right then.
17:54:57 <inkedmn> around the argument?
17:55:01 <Igloo> Yup
17:55:30 <inkedmn> ah, ok :)
17:55:32 <inkedmn> that worked
18:07:05 <ChoJin> signum x | x < 0 = -1
18:07:14 <ChoJin> ...
18:07:18 <ChoJin> why not using this ?
18:12:44 <TheOtherRainer> It puzzles me, why the library docu in GHC isn't sorted in a usefull way
18:12:57 <TheOtherRainer> appareantly
18:18:28 <inkedmn> man, haskell is seriously cool...
18:19:14 <TheOtherRainer> so cool, that it got mee interested in CS again
21:29:45 <inkedmn> ok, i'm trying to compile some code i copied from a tutorial...
21:29:49 <inkedmn> i'm getting this error:
21:29:51 <inkedmn> E:\haskell\code>ghc --make Name.hs -o name.exe
21:29:51 <inkedmn> ghc: chasing modules from: Name.hs
21:29:51 <inkedmn> Compiling Main             ( Name.hs, ./Name.o )
21:29:51 <inkedmn> Name.hs:7: Parse error in pattern
21:30:52 <inkedmn> here's line 7:
21:30:55 <inkedmn>     do hSetBuffering stdin LineBuffering
21:32:10 <inkedmn> hmm
21:32:28 <inkedmn> took off that leading 'h' on SetBuffering, now i get an error on another line
21:34:26 <seth> You want the h version with the explicit file descriptor.
21:34:35 <inkedmn> ah, ok
21:35:08 <seth> like printf/fprintf in C
21:35:11 <inkedmn> do you know why i'm getting that compiler error?
21:35:14 <inkedmn> ah, ok
21:35:39 <seth> No, not without seeing more.
21:35:54 <inkedmn> well, i can put the code here, it's about 5 lines
21:36:00 <inkedmn> if that would help
21:36:31 <inkedmn> here:
21:36:32 <inkedmn> main =
21:36:33 <inkedmn>     do hSetBuffering stdin LineBuffering
21:36:33 <inkedmn>         putStrLn "Enter your name: "
21:36:33 <inkedmn>         name <- getLine
21:36:33 <inkedmn>         putStrLn ("Hello " ++ name ++ ", you're a jackass!")
21:55:26 <inkedmn> any ideas?
22:09:36 <inkedmn> ok
22:09:40 <inkedmn> wts does this mean:
22:09:41 <inkedmn> Name.hs:11: The last statement in a 'do' construct must be an expression
22:22:11 <seth> Yes, it took me weeks to stop getting those.
22:32:48 <inkedmn> really?
22:33:07 <seth> I'm probably slow, though...
22:34:10 <inkedmn> please tell me how :)
22:34:18 <seth> I'm looking at it...
22:34:29 <inkedmn> hi i like cats
22:34:41 <inkedmn> meeeeyouw
22:34:53 <seth> The way I do this is as follows:
22:34:54 <inkedmn> that was my wife's cousin
22:34:59 <inkedmn> he's "special"
22:35:01 <inkedmn> ok
22:35:35 <seth> main =
22:37:13 <seth>     hSetBuffering stdin LineBuffering >> putStrLn "Enter your name: " >> getLine >>= \name -> putStrLn("Hello " ++ name ++ ", you're a jackass!")
23:35:18 <Rainer> I just grasped what monads really are: simply allowing to express state,side effects and sequencing of computations. They are simply libraries, the language itself doesn't need to provide any magic for it to work.
23:35:21 <Rainer> correct?
23:36:58 <Rainer> so any pure functional language is able to express state etc. just by defing the libs
23:37:03 <seth> Rainer:  Well, libraries and combinators.
23:37:32 <seth> Rainer: Yes, the monads to not violate the conditions defining purely functional.
23:37:33 <Rainer> combinators are libs too, aren't they?
23:37:36 <lament> sorry, what's a library?
23:37:38 <seth> s/to/do/
23:37:52 <seth> Rainer:  Well, they are code.
23:38:11 <seth> Rainer: But the compiler treats combinators a bit differently than other synatx.
23:38:52 <Rainer> um, i didn't grasp combinators yet fully. they are higer order functions, simply?
23:39:31 <seth> Rainer: Not entirely, because the define an order of execution.  No other purely functional construct defines an order of execution.
23:40:04 <seth> (in a lazy functional language)
23:40:39 <seth> Well, I take that back, because you can also force expressions to be evaluated strictly.
23:40:39 <Rainer> with the "seq" function (primitive?) ?
23:41:05 <seth> Rainer:  That refers I believe to a sequence of data, not a sequence of execution.
23:42:21 <Rainer> Ok, I think arrows and continations are other means of expressing state etc., just like monads. Correct?
23:43:01 <seth> I'm not sure that I _really_ understand continuations.
23:43:51 <Rainer> do you know about the clean language?
23:44:54 <Rainer> the langauge clean that is
23:45:19 <seth> I only know more or less what it is about, but not the language itself.
23:47:14 <Rainer> They have this uniqueness type feature for destructive update
23:47:40 <seth> I'll have to try it.
23:48:05 <lament> it's non-free isn't it
23:48:57 <Rainer> I don't think they have monads and I wonder why, since I now know they are only librarys (& combinators)
23:49:22 <Rainer> it used to be closed source, now it's open
23:49:51 <Rainer> don't konw about the license though
23:49:53 <seth> I didn't mean that monads are combinators, exactly, I meant that your statement about implementing stage applied to both monads and combinators.
23:50:02 <seth> s/stage/state/
23:50:08 <lament> it's not open source
23:50:44 <Rainer> stage=state?
23:51:02 <seth> Typo
23:51:21 <seth> I wrote "implementing stage" instead of "implementing state".
