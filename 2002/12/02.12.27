01:43:07 <hays> Is there anyone alive in here?
01:43:15 <hays> I have a question about CPS
01:44:12 <dennisb> hays: toUpper exists in ghc
01:44:15 <dennisb> in module Char
01:44:57 <dennisb> What about CPS? I'm about to leave but maybe I can give a short answere
01:45:14 <dennisb> It's always better to ask the question then to ask about asking a question
01:45:55 <hays> fact_cps2 0 k = k 1
01:45:56 <hays> fact_cps2 n k = fact_cps (n-1) (\v -> k (n*v))
01:46:14 <hays> I wrote the above... not sure if it is CPS..  Im confused about what CPS functions are supposed to finally return
01:46:30 <hays> this confusion is coming out when I try to do a CPS-style fibonacci function
01:48:14 <dennisb> my view of a continuation is simply that it is a function you pass in that you call with your result instead of returning it. I have a very simple view of these things
01:48:42 <dennisb> it returns whatever the continuation returns
01:49:00 <hays> i guess im not sure what you mean by that
01:49:28 <dennisb> the final result is what you get by calling the continuation with your intermediate result
01:49:55 <dennisb> maybe you can send in the identity function when you call the function above, you just want to return the result
01:50:52 <hays> hmm
01:51:23 <hays> so that function you pass in should be independent of the functions inside...   I will think about this...  makes sense.  I was wondering if that was the case
01:51:26 <hays> Thanks.
01:51:41 <dennisb> look at the second case above. k is what you want to continue with. But here you call fact_cps again with a smaller argument and a different cont. This new cont takes the result from the rec. call, mult with n and then calls k with is the old cont
01:52:16 <dennisb> the new cont do some work and then pass on the result to the old cont.
01:52:43 <dennisb> in the base case you just "continue" with 1 as the argument
01:52:56 <hays> fact2 n = fact_cps n (\v -> v)
01:53:04 <dennisb> migth work
01:53:06 <hays> so that function would "extract" the final value
01:53:23 <dennisb> just try it!
01:53:34 <hays> and that kind of cuntion would work for any cps-style
01:53:38 <hays> erm function
01:54:02 <dennisb> well, you must send in some start cont.
01:54:04 <hays> works with the cps factorial..  this gives me a standard to try the fib func
01:54:34 <dennisb> something to do when the function is done. Like showing and printing the result, or whatever really
01:56:12 * dennisb is gone, Bye!
01:56:16 <hays> thankis
06:42:08 <lament> Are functors homomorphisms?
06:44:43 * liiwi reads that repeatedly and fails to parse
06:47:46 * ibid parses it but does not know the answer
06:48:04 * ibid assumes lament is talking about category theory
06:48:12 <lament> yes
06:48:23 <lament> i'm reading the definition of a functor on planetmath.org
06:48:31 <ibid> url?
06:48:33 <lament> http://planetmath.org/?op=getobj&from=objects&name=Functor
06:49:44 <lament> I mean, they seem to be homomorphisms over morphisms in the category
06:49:47 <ibid> that definition is too abstract for me currently to grasp
06:49:49 <lament> (damn, that sounds disgusting)
06:50:55 <lament> If I understand everything correctly, functors convert both objects and morphisms
06:51:02 <lament> which is kinda weird
06:51:43 <lament> in programming they only convert objects...
06:52:09 <ibid> well, even a programmer's monad is not a categorist's monad :-)
06:52:23 <ibid> (remember the discussion from a few months back on haskell@)
06:52:44 <ibid> the IO monad is a monad "most of the time" :-)
06:52:50 <lament> hm.
06:52:59 <lament> I don't subscribe to the mailing list, so I wouldn't remember
06:53:23 <lament> I'm trying to understand the theory behind monads, and it's so damn confusing
06:54:09 <lament> (i.e. the question i'm interested in is not "how to use monads to hide state", but rather "why people came up with monads in the first place")
06:54:38 <ibid> in general, or in programming?
06:54:48 <lament> in general.
06:55:04 <ibid> and no, you don't hide state with monads, you make it explicit :-) (well, it does both)
06:55:17 <ibid> (depends on the pow)
06:56:32 <lament> Everyone says that monads are these weird obscure mathematic thingies that just _happened_ to be suited for pure functional programming.
06:57:51 <ibid> well yeah.  tensors just happened to be suited for general relativity :-)
06:58:12 <ibid> (i believe)
07:16:56 <lament> nngah stupid math books!
07:17:29 <lament> "I will assume only an elementary background in algebra, corresponding to an honors undergraduate algebra course"
07:17:48 <lament> Such a great definition of elementary :)
07:18:00 <ibid> but it is
07:18:22 <ibid> algebra is not taught at school
07:19:03 <lament> yes. Sad, really.
07:19:18 <lament> I can see that all this stuff is extremely simple
07:19:21 <lament> yet I don't understand it
07:19:23 <lament> :)
07:21:02 <ibid> it's abstract. that explains both :-)
07:21:56 <lament> exactly.
07:22:08 <lament> well
07:22:17 <lament> That explains the simplicity
07:22:39 <lament> And I can't understand it because there're no good explanations except by math freaks
07:22:41 <lament> :)
07:35:12 <lament> it's rather sad that all this stuff is taught in graduate courses.
07:35:18 <lament> I don't see why.
07:40:33 <ibid> the abstractness also explains why it is hard to understand
07:41:00 <ibid> most people need to know both the absraction and some important concretions before understanding
07:42:18 <lament> yes. And the math freaks don't usually provide the concretions
07:43:02 <ibid> even though it's how they themselves learned the stuff :-)
07:43:10 * ibid is a math freak in a sense :-)
07:44:30 <lament> yes, that's how they learned the stuff and that's why they only did so in graduate courses.
07:44:32 <lament> :)
07:44:43 <lament> I'm, well, planning to be a math freak :)
07:45:05 <lament> become, rather
13:03:03 <hays> Is CPS a style that must be consistent throughout functions (including the "insides" of them) ?  I ask because I am trying to convert a recursive function to CPS without abusing the stack or causing uneccesary calculations and I don't see how I can emulate iteration using CPS without doing that.
13:03:43 <hays> I have some code I'd like to show, of 2 factorial functions both done in CPS, one with an accumulator, the other without.
13:08:33 <hays> Another unrelated question:  Random access containers in Haskell.   Possible?  If so, how?
13:15:31 <ibid> see Data.FiniteMap in GHC
13:15:56 <ibid> and, if you are only interested in access, not update, standard Arrays work fine
13:17:05 <hays> Is there a way to build an array without the help of the compiler?
13:19:01 <ibid> what do you mean?
13:20:28 <hays> well (i'm probably wrong) but in Lisp the list is the fundamental data structure and I've not learned of a way to implement arrays from the ground up
13:22:21 <ibid> so?
13:22:52 <ibid> in lisp, cons cells are fundamental, not lists ;-)
13:23:05 <ibid> in haskell, algebraic types are fundamental
13:23:12 <ibid> but both of these are simplifications
13:23:33 <ibid> how do you implement arrays from the ground up in Pascal?
13:25:43 <hays> with the notion of a pointer I guess
13:27:15 <ibid> no you don't
13:27:32 <ibid> there is no pointer arithmetic in Pascaö
13:27:36 <ibid> Pascal
13:27:48 <ibid> anyway, look up the standard module Array
13:31:59 <hays> Is this the right place to find "good" info on Haskell? http://www.haskell.org/onlinelibrary/array.html
13:32:28 <hays> I'm reading the "Yet Another Haskell Tutorial" to learn Haskell right now.
13:32:54 <ibid> it's one of them
13:37:07 <hays> fact_cps 0 k = k 1
13:37:07 <hays> fact_cps n k = fact_cps (n-1) (\v -> k (n*v))
13:38:02 <hays> I converted this from Scheme (which I got on a webpage) to try to figure out CPS.   I'm doing the same thing with the fibonacci function and its unclear to me what to do with CPS when you have more than one thing "accumulating"
13:40:03 <hays> the CPS example I've found for fib is a nasty O(2^n) alg. :)
14:56:20 <jaredj> What's the function called where
14:56:27 <jaredj> fn :: Int -> Float
14:56:33 <jaredj> fn 1 = 1.0 (e.g.)
15:00:51 <Igloo> fromIntegral
15:01:16 <jaredj> ah.
15:01:22 <jaredj> thx. 
15:01:28 <jaredj> (fromInteger didn't work.)
