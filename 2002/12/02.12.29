04:55:35 <pokpok> (FA?)Q: is it possible to make a container for objects of some (pre-defined) type class?
04:59:09 <ibid> you mean a heterogenous container
04:59:24 <ibid> not in haskell 98, afaik
04:59:28 <pokpok> i don't know? (what is it) :)
04:59:34 <pokpok> propably
04:59:45 <ibid> but using the existential type extension it's possible
05:00:04 <pokpok> could you give an example?
05:00:19 <pokpok> or should i use some completely different approach
05:00:53 * ibid cannot give an example of using existential types, as i have never used them myself
05:01:13 <ibid> about a different approach... it depends on what you want to do... really
05:01:14 <pokpok> i'll tell what i am trying to do
05:01:24 <pokpok> simple stuff
05:01:37 <pokpok> i have a type class which defines some function
05:01:48 <pokpok> say class Foo a where funk :: a -> a
05:02:01 <pokpok> now i want to have a container foo
05:02:11 <pokpok> so that i can say for example: map funk foo
05:02:35 <pokpok> and foo should be able to take in any type which is a member of class FOo
05:02:58 <ibid> but the container can contain different types at the same time?
05:03:09 <ibid> (that's heterogenous container)
05:03:10 <pokpok> yes
05:04:08 <pokpok> os is there some other way to achieve the same functionality in Haskell
05:04:11 <pokpok> os -> so
05:04:32 <ibid> okay. another question: do you know the totality of the types that are instances of this class, or do you want to be able to give another instance without changing the definition of the container and the map function?
05:05:00 <pokpok> i would be nice to not no have to change the container definition
05:05:12 <pokpok> every time i come up with a new type
05:05:19 <ibid> okay, in that case existential types are your only option afaict
05:06:03 <pokpok> thanks.
05:06:18 <ibid> (well, in GHC there is a Data.Dynamic that can do this too, but it's not as type safe AFAIK)
05:10:25 <pokpok> well, what if I know all the types in advance?
05:11:39 <ibid> then you could define a data Combined = A Yourfirsttype | B Yoursecondtype and so on and use that with a homogenous container (such as Data.FiniteMap)
05:11:59 <ibid> that would be doable in 98
05:12:52 <pokpok> what about the "map funk foo" -part
05:13:08 <pokpok> i would need to write special cases for each type?
05:13:22 <ibid> yes
05:13:34 <ibid> hmm
05:13:57 <ibid> unless there is a derives Functor or some such
05:13:59 <ibid> let me see
05:15:07 <ibid> apparently not
05:15:51 <pokpok> but instead ...
05:15:55 <pokpok> (what?)
05:16:00 <ibid> ?
05:16:14 <pokpok> how can I avoid the special cases
05:17:09 <pokpok> sorry what were you referring to with "apparently not"
05:17:17 <ibid> 15:13 < ibid> unless there is a derives Functor or some such
12:17:14 <Janni> hi
12:19:18 <Heffalump> hi
15:18:54 <inkedmn> howdy friends
15:27:09 <Igloo> Howdy
15:27:23 <Igloo> Written any good code recently?
15:30:25 * Marvin-- sure hasn't *grumbles* I hate stack corruption *mutter*
15:32:04 <Igloo> What language were you trying to use?
15:32:17 <Marvin--> C
15:32:25 <Igloo> Ah, well...
15:32:29 <Marvin--> exactly :)
15:32:57 <Marvin--> unfortunately, I don't think writing debian-installer in haskell is acceptable
15:33:17 <Marvin--> .oO(libparted bindings for haskell...scary!)
15:34:26 <Igloo> You're right, a tad faster and smaller is far more important than being correct </flamebait  :-)  >
15:34:44 <Marvin--> seeing as one of the design goals is to fit it on a floppy, yes
15:53:51 <emu> forth!
15:53:54 * emu runs
15:54:01 * Marvin-- peers at emu
15:55:13 <emu> fits the small/fast category =) and there's precedent
15:56:38 <Marvin--> there's a slight drawback though
15:56:42 <Marvin--> I don't know any forth
21:27:53 <jaredj> dude - the HWS-WP and logs links in the subject appear to be broken.. ?
21:27:59 <jaredj> 404's
