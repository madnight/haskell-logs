02:22:49 <Akriel> -lilo/Wallops- Tired now, needing rest | Room in bed for my body | I'll go spelunking
02:22:54 <Akriel> wtf is this?
02:23:06 <Akriel> keep getting messages from him but he dont exsit
02:23:26 <Heffalump> the bloke who runs the network
02:23:36 <Akriel> o
02:23:37 <Heffalump> do /mode akriel -w
02:23:45 <Akriel> Whats that do?
02:23:54 <Heffalump> stops you getting wallops
02:24:06 <Akriel> what is a wallop?
02:24:17 <Akriel> messages from ops?
02:24:23 <Heffalump> yeah
02:24:26 <Akriel> ok
02:24:28 <Heffalump> random IRC op chat like that
02:55:39 * sethk is away: Don't say anything until I return.
03:36:01 * ibid will have been a msc since today
03:36:03 <ibid> :-(
03:37:19 <Heffalump> sorry?
03:40:21 * ibid would be an msc today except that the dean is out of reach
03:40:45 <Heffalump> ah.
03:41:00 <ibid> but they said they will indicate today as the day
03:42:13 <kev> ibid: so, feel a sense of academic power now you outrank all those bsc's?
03:42:56 * shapr bounces
03:44:52 * liiwi tackles shapr
03:44:59 * shapr falls over
03:45:15 <shapr> hi liiwi, how's life?
03:45:25 <shapr> it feel like forever since we had a beer together.
03:45:42 <liiwi> busy, and I'm finally starting to grok twisted
03:45:50 <shapr> yay!
03:46:11 <liiwi> writing an app against cvs stuff is evil, though.
03:46:33 <liiwi> requiring features which have not been implemented yet :)
03:46:39 <liiwi> makes life interesting, though.
03:46:48 <shapr> do you have code online?
03:47:57 <liiwi> not yet, but the core is not too far from issues/webrepo.py
03:48:45 <liiwi> dpkg-source: building samba in samba_3.0alpha22-0.1.tar.gz
03:48:54 <liiwi> talk about life on bleeding edge :P
04:01:52 <shapr> http://lambda.weblogs.com/discuss/msgReader$5344?mode=topic&y=2002&m=12&d=20
04:02:10 <shapr> that's a discussion thread on Hughes paper "Generalising Monads to Arrows"
06:04:48 * ibid is msc for real (they go the signatures)
06:04:49 <ibid> got
06:15:11 <Heffalump> ibid: congrats
06:33:23 <exa> hey there
06:42:01 <Igloo> Cool (is that starting one or been awarded one?)
06:48:53 <ibid> Igloo: /me just got my msc degree
06:49:03 <Igloo> Ah, congrats  :-)
06:49:38 * Igloo fails slightly more under-qualified  :-)
06:49:59 <Heffalump> DYM "feels"?
06:50:51 <Igloo> Yes
06:51:05 <ibid> Igloo: how so?
06:51:33 <Igloo> Because there are now n+1 people more qualified than me. Although technically you probably already were
06:51:51 <ibid> technically?
06:52:00 <Igloo> Did you have any degree before the MSc?
06:52:05 <ibid> bsc
06:52:23 <Igloo> Right, I don't have a BA yet AIUI
06:52:27 <ibid> anyway, my thesis got graded as laudatur
06:52:59 <Igloo> As who?
06:53:07 <ibid> who?
06:53:08 <Heffalump> it probably means something like "with praise"
06:53:16 <ibid> the highest possible grade
06:53:34 <Igloo> Ah, and is apparently spelt laudator, in English at least
06:53:44 <Igloo> (well, American)
06:54:17 <ibid> the grades are (from lowest passing): approbatur, lubenter approbatur, non sine laude approbatur, cum laude approbatur, magna cum laude approbatur, eximia cum laude approbatur, laudatur
06:54:22 <ibid> Igloo: no, it's latin
06:54:29 <Igloo> Ah, right
06:55:00 <Igloo> Would employers know that?
06:55:17 <xkb_away> so what was your thesis about?
06:55:17 <ibid> the diploma (is it the right word?) lists the grades
06:55:29 <ibid> i'll post the pdf, a second
06:55:40 * Igloo disappears off to a meeting
06:58:07 <ibid> http://www.mit.jyu.fi/antkaij/gradu.pdf
06:58:40 * ibid jumps on the bus, bbl
07:01:17 <xkb_away> hmm
07:01:20 <xkb_away> sounds interesting
07:01:31 <xkb_away> never really heard of the "B" method
07:01:54 <xkb_away> anyway.. I have a question regarding haskell 
07:01:57 <xkb_away> or rather hugs
07:02:37 <xkb_away> why does getRandomNr x y g = head $ randomRs (x,y) g sometimes report head of []?
07:02:49 <xkb_away> with g being some StdGen
07:04:23 <xkb_away> x,y are Ints
07:20:00 <xkb> no-one here?
07:22:01 <Heffalump> I don't know the answer, sorry
07:24:31 <Marvin--> http://www.urbanlegends.com/food/ode_to_lutefisk.html
07:24:33 <Marvin--> hahahaha
07:25:09 <Marvin--> lutefisk/lutfisk is a hideous dish eaten by Swedes and Norwegians (and possibly others) around christmas
07:47:57 <Janni> hi.
07:48:05 * sethk is back (gone 04:50:53)
07:48:30 <shapr> y0
07:48:40 <sethk> morning
07:48:49 <shapr> evening here :-)
07:50:02 <sethk> where?
07:50:17 <shapr> sweden
07:50:20 <shapr> where are you?
07:50:43 <sethk> Arizona
07:50:49 * Igloo bounces back
07:51:00 * shapr bounces forward
07:51:07 * shapr bounces in spirals
07:51:22 <ibid> Igloo: notice how i used your software :-)
07:51:33 * shapr is reading ibid's thesis
07:51:48 * Igloo dosnloads
07:52:46 * Igloo reads the Acks - cool, IRC should be in more papers  :-)
07:53:23 * shapr look forward to the anecdotal comparison of Haskell and C++
07:53:28 <Igloo> I think Heff wimpde out, though
07:54:55 <Heffalump> of actually mentioning IRC? yes.
07:55:13 <ibid> ugh
07:55:18 <ibid> did i leave that?
07:55:19 <ibid> argh
07:55:27 <Heffalump> If I had lots of friends I met in pubs or some other place, would I mention that place, or just the friends?
07:55:27 * Igloo gives ibid one of Ganesh' bananas
07:55:29 <Igloo> lol
07:55:30 <ibid> there is one, but it is fairly thin... very thin
07:55:38 <Marvin--> heh, I read "especially" as "except" first
07:56:03 <Marvin--> "I would like to thank the rest of the Department staff (except certain people -- you know who you are) for ..."
07:56:16 <ibid> hehe
07:56:23 <Igloo> :-)
07:56:58 <Igloo> Doh! The reason it was drawing each page so slowly is because it was running on the sun
07:57:06 <ibid> well. i read a novel that mentioned rec.arts.sf.composition in the first page
07:57:53 * Marvin-- grumbles about the pdf feeling bad in both gs and xpdf
07:58:22 <Igloo> ibid hasn't seen enough Free/OS rants  :-)
07:58:23 <ibid> there is a ps too
07:58:29 <ibid> Igloo: ?
07:58:37 <ibid> i was being polite :-)
07:58:43 <Heffalump> if you make the pdf from a ps file, make sure the ps file is created with the right fonts
07:58:50 <ibid> yeah
07:59:09 <ibid> it's -Ppdf and palatino & friends
07:59:48 <ibid> and actually, most pdf font problems are with acroread. adobe does not know how to implement its own specs
08:00:31 <Marvin--> er
08:00:41 <Marvin--> my gs seems to be b0rken
08:00:48 <Marvin--> GNU Ghostscript 7.05: Can't find initialization file gs_init.ps.
08:02:08 * Igloo looks tempted to print this out to read over xmas
08:03:01 * ibid takes that as a compliment :-)
08:03:14 * Marvin-- mutters and downloads a new gs deb from incoming
08:03:26 <Igloo> :-)
08:03:46 <Igloo> How easy to use did you find H2L, BTW? And did you spend much/any time rewriting your code to make it look nice?
08:04:35 * Igloo spots the tinyfied code
08:05:19 <ibid> Igloo: it uses too much vertical space :-(
08:05:31 <ibid> no, horizontal
08:05:35 <ibid> but yeah, verical too
08:05:38 <Igloo> What I meant by better output phase is things like wrapping before or after the = on the long line on p136
08:06:14 <ibid> yeah
08:06:33 <ibid> it was fairly easy. i already mentioned the hard parts earlier
08:06:37 <ibid> did you see my memo?
08:06:45 * Igloo isn't fluent enough in TeX to be able to do that in a reasonable amount of time, unfortunately  :-(
08:06:50 <Igloo> Which where?
08:06:54 <ibid> see memoserv
08:07:00 <Igloo> Oh, I don't know my password
08:07:04 <ibid> ugh
08:07:14 <ibid> talk to an irc op? :-)
08:07:16 <Igloo> I'll see messages as long as my client doesn't break, though
08:07:28 <ibid> did you see this one?
08:07:45 <Igloo> This what? Messages as in /msg Igloo ...
08:07:49 <ibid> ahh
08:07:54 <Igloo> Is the memo long or hard to reproduce then?
08:07:56 <ibid> no
08:08:12 <ibid> it's that h2t breaks if the input file contains tabs...
08:08:18 <ibid> i get strange error messages
08:08:23 <Igloo> Breaks?
08:08:38 <Igloo> Can you give me an example file?
08:08:44 <ibid> not anymore :-(
08:08:57 <ibid> i suspect it does not translate tabs to spaces correctly
08:09:16 <Igloo> The other problem I have is no way to give information to H2L, so for example data Bidi would be nicer without all the line breaks but data Predicate is better with them
08:09:36 <Igloo> I thought it did but could be wrong
08:12:22 <shapr> neat, this thesis talks about Peano, I've been curious about his stuff
08:13:14 <shapr> ok, I very much want to learn math now
08:15:03 <ibid> heh
08:15:09 <ibid> could not understand it? :-)
08:15:10 <Igloo> Are the closing braces in the PDF broken for everyone?
08:15:52 <shapr> ibid: I can almost understand it, which is even worse
08:16:16 <ibid> Igloo: paeg?
08:16:18 <ibid> page?
08:16:25 <shapr> it makes sense on a conceptual level, and I can begin to see connections between the pieces, but I don't know how to make a formal proof, so I don't know how to approach this.
08:17:30 <Igloo> 20, for example
08:17:43 <Marvin--> shapr: formal proof of what?
08:17:51 <ibid> broken in what way?
08:17:54 <Igloo> Oh, the page with 10 on the bottom
08:17:55 <shapr> Marvin--: anything
08:18:07 <Marvin--> heh
08:18:10 <Igloo> The top half of the braces is missing. Fine in the PS.
08:18:24 <shapr> I can see the braces, but I'm using acroread
08:18:35 <Igloo> This is xpdf
08:18:43 <ibid> works here with xpdf
08:19:00 <ibid> i think it is time for me to take my temporary leave now :-)
08:19:06 * ibid goes celebrate
08:19:10 <shapr> heh, have fun
08:19:14 * shapr keeps reading
08:19:14 <ibid> see you in a million years, ...
08:19:16 <ibid> or in a few days
08:20:09 <Igloo> In teh background of http://urchin.earth.li/~ian/foo.png
08:21:05 <shapr> that's broken
08:21:08 <shapr> the pic
08:21:17 <Igloo> Works for me
08:21:33 <Igloo> How is it broken?
08:22:28 <shapr> looks like some stepped on your curly braces
08:22:36 <Igloo> :-)
08:22:45 <Igloo> Oh, I thought you meant the picture itself was broken
08:23:11 <shapr> no, just the braces :-)
08:23:41 <Igloo> And the disjunctions
08:24:45 <Igloo> IM conjunctions
08:26:27 <exa> people
08:26:31 <shapr> where?
08:26:33 <exa> anybody tried eager haskell from mit?
08:27:15 <exa> i am yet to choose a programming language for my next generation machine learning code :)
08:30:13 <Heffalump> I haven't tried it, but it's just an implementation of Haskell 98 AFAIK (that uses a particular evaluation strategy to try to gain performance, with mixed results)
08:31:40 <exa> so it's not better than ghc?
08:31:56 <exa> i really like haskell's elegance but i need that edge of performance :)
08:31:58 <Heffalump> it'll get better performance sometimes
08:32:02 <Heffalump> but not by a massive factor
08:32:21 <exa> what about memory use?
08:32:53 * shapr makes it to chapter 4...
08:32:53 <shapr> whew
08:33:34 <exa> shapr: what're you reading?
08:33:38 <shapr> ibid's thesis
08:33:38 <Heffalump> exa: again not hugely better AFAIK
08:34:01 <exa> the sharpest book i read about haskell was the one which detailed writing lazy graph algorithms
08:34:03 <shapr> exa: if you need speed, why not just use the FFI to call some speedy C?
08:34:06 <exa> i think that was really neat
08:34:16 <shapr> which book is that?
08:34:17 <exa> shapr: uh?
08:34:33 <exa> shapr: why should I use C at all if this is a glorious programming language?
08:34:36 <exa> makes no sense
08:34:40 <shapr> sure it does
08:34:50 <shapr> I don't like C, but I do like Python.
08:34:59 <exa> shapr: it's "functional algorithms" or something like tha
08:35:00 <shapr> and yet, Python isn't very fast for doing stuff like OpenGL code
08:35:02 <exa> that
08:35:04 <Heffalump> exa: read the links from http://www.csg.lcs.mit.edu/~earwig/thesis.html (particularly the Haskell Workshop paper)
08:35:13 <shapr> oh, yeah, I recently read that book, it's great fun
08:35:16 <shapr> by Rabhi and LaPalme
08:35:25 <shapr> I really enjoyed that book.
08:35:27 <exa> Yes I think that Israeli guy
08:35:55 <exa> I actually implemented an optimization algorithm using it
08:36:07 <shapr> imho, there is no single programming language that can do everything
08:36:12 <exa> Some search algorithm
08:36:15 <Heffalump> machine code!
08:36:33 <shapr> speedy development is part of my everything ;-)
08:36:36 <exa> shapr: IMHO there should be such a thing as general purpose programming language
08:36:45 <shapr> oh I think there is
08:36:49 <shapr> and Haskell is one
08:37:01 <shapr> but I always seem end up with special purposes
08:38:30 <exa> Anyway, haskell isn't well suited to machine learning for that slight lack of performance
08:38:36 <exa> Otherwise it would be really great
08:38:52 <exa> Matter of factly, I would like to see a language that takes the best parts of ocaml and haskell :)
08:39:43 <sethk> exa:  Put some Cobol in there too ...   just kidding  :)
08:39:45 <exa> Who knows, maybe someday the weight falls upon my shoulders
08:40:14 <exa> I met one of the guys who designed Dylan, I think that's one of the cooler languages in the world
08:40:20 <exa> Like Haskell
08:41:08 <exa> The dream language would be as smart as FORTRAN when it comes to optimizations and as elegant and well designed as Haskell
08:42:01 <exa> Heffalump: Interesting abstract, makes a whole world of sense
08:42:20 <exa> Heffalump: Since that "common way of programming" still is the prominent way to think of, guess what ALGORITHMS!
08:43:40 <exa> Indeed, one would not want to sacrifice the ability to specify an algorithm that has great elegance in serial execution such as all-to-all shortest path algorithms
08:44:11 <exa> And whereas functional systems offer little value in parallelism, missing that ability is worse than unfortunate.
08:48:33 <shapr> exa: look at the Nepal project
08:49:03 <shapr> when parr has MPI support, Haskell will offer quite a bit of value in parallelism
08:49:22 * shapr reaches the part about Unicode not being effectively supported
08:49:29 <shapr> does GTK2 support Unicode 3.2 ?
08:49:48 <shapr> what about GHC? is it up to 3.2?
08:50:07 * shapr needs a unicode tutorial
08:54:59 <SyntaxPolice> Does anyone know: Is there a library function to split a list into a list of lists at a particular element, like perl's split
08:55:28 <SyntaxPolice> so "split (== '.') "foo.bar.bang" => ["foo", "bar", "bang"]"
08:56:02 <SyntaxPolice> I found break, which would give me ("foo", ".bar.bang") which could be useful to define my function.
09:01:21 <Igloo> There is a nice solution if the input string is infinite
09:08:44 <inkedmn> mornin' friends
09:09:57 <exa> shapr: Nepal?
09:11:51 <xkb> whaa
09:12:00 <xkb> apple site is saying weird things to me :D
09:13:44 <SyntaxPolice> I rolled my own, but I'd still prefer a library function :-)
09:14:00 <shapr> I've used break or span recursively
09:14:15 <shapr> exa: Manuel Chakravarty's Nepal project.
09:14:22 <shapr> g'morning inkedmn
09:51:18 <KoKkO> LO
09:51:29 <Heffalump> hi
09:55:44 <exa> shapr: synopsis?
09:56:12 <exa> nested data parallel
09:56:13 <exa> cool
09:56:21 <exa> i wonder if it's good at matrix ops
10:10:05 <whee> gah, I need to order The Fun of Programming, there's a chapter on functional hardware descriptions :D
10:11:50 <Marvin--> "The Bad Puns of Programming"
10:14:07 <whee> maybe I'll be cheap and try to get the library to buy it
10:30:20 <Marvin--> so long, I'm off to see TTT
11:19:17 <inkedmn> dark!
11:19:41 <exa> Dark!
11:19:53 <exa> Dark!
11:19:54 <dark> Er, hello.  Why such eagerness? :)
11:20:12 <exa> Welcome to the not-so-bright side of programming :>
11:20:23 <exa> dark: hello
11:20:24 <inkedmn> dark: i'm bored :)
11:20:32 <exa> I want some darkness in my life
11:20:55 <inkedmn> heh
11:21:02 <exa> Everybody is so freaking happy in xmas
11:21:09 * inkedmn will be attempting to code some more haskell this evening...
11:21:14 <exa> hehe
11:21:22 <inkedmn> if that doesn't work out, i'll do some java stuff for work
11:21:23 <exa> inkedmn: whacha gonna be cookin'?
11:21:30 <inkedmn> exa: dunno yet
11:21:38 <exa> need suggestions?
11:21:43 <inkedmn> only 5 days til i get my book though :)
11:21:46 <inkedmn> absolutely :)
11:22:00 <exa> inkedmn: is there any particular area  you are interested in?
11:22:09 <exa> inkedmn: like computer graphics, ai, etc.
11:22:17 <inkedmn> i'm just trying to get the basics down atm
11:22:42 <exa> hm
11:22:51 <exa> i mean in general
11:23:03 <dark> I'm generally fed up with christmas by the time it's actually time for it.
11:23:04 <exa> my first haskell program was a small sound synthesizer
11:23:54 <exa> inkedmn: i suggest you to do something which has visible/understandable results
11:24:22 <exa> inkedmn: like something that draws on the screen, or interacts in command line, etc.
11:24:39 <inkedmn> yeah, something really basic :)
11:25:11 <exa> inkedmn: haskell supposedly has some graphics capabilities, so maybe what you want to do is to draw, say, a fractal
11:25:15 <exa> that would be instructive
11:25:59 <exa> or if you can't get it to open a window and use a canvas, you can write it in a raw file format which you can view with a program like GIMP
11:26:36 <exa> Usually something that has a few mathematical-looking functions, or higher-order functions is a  good bet for functional programs
11:27:15 <exa> It's pretty easy to write something that works on text files, to
11:27:16 <exa> too
11:27:30 <exa> So maybe you can write something that deals with text files
11:34:55 <inkedmn> i've just been re-writing functions
11:34:58 <inkedmn> like map, fold, etc
11:35:08 <inkedmn> mostly list stuff
11:48:10 <exa> it's good to follow a book
11:48:20 <dark> ?? My books just sit there.
11:48:30 <exa> the craft of functional programming... seems to be nice
11:48:58 <tez> Really?  Defective book then.  Get it replaced, if it's still in warranty.
11:49:26 <exa> i also read "Functional Algorithms... blah blah" by Rabhi and LaPalme
11:49:36 <exa> It's got a nice introductory chapter
11:50:05 <exa> But if you can get hold of "the craft" ... I think it was originally written for Miranda, that looks like one hell of a book :)
11:50:08 <exa> bbl
14:13:12 <stepcut> anyone used the trex stuff?
16:27:16 <Janni> cu
16:30:32 * Igloo sighs and install nhc to get a third opinion on name clashes and suchlike
16:30:53 <dark> I found the First Rule of FFI: when in doubt, add fromIntegral.
17:13:00 <Igloo> Or would if it compiled.
17:28:45 * inkedmn is going to try to implement a bubblesort in haskell...
17:29:27 <inkedmn> er
17:29:34 <inkedmn> quicksort, not bubblesort
17:29:48 <dark> I was about to recommend insertionsort instead :)  It's in the Prelude.
17:30:10 <dark> Haskell is also an excellent language for implementing slowsort.
17:30:19 <lament> heh
17:30:20 <lament> yes
17:30:32 <lament> EVERY possible sorting algorithm is 'slowsort' in haskell!
17:30:46 <dark> slowsort xs = (head . slowsort . permutations) xs
17:30:55 <inkedmn> just to clarify, bubblesort is the one that takes two elements and compares them
17:31:05 <lament> dark: hahaha
17:31:37 <dark> A faster version is slowsort = minimum . permutations :)
17:31:41 <dark> But it's not as exciting.
17:32:07 <dark> Haskell is a bad language for quantumsort.
17:32:33 <dark> Hmm, maybe: quantumsort xs = filter is_sorted (repeat xs)
17:33:15 <Igloo> I think you want a head there
17:33:23 <dark> Oops, yes.
17:33:34 <dark> Almost had a broken quantumsort there :)
17:33:38 <lament> Real Languages (tm) have trick sort
17:33:58 <lament> it works by using multidimensional temporal folds, and it's O(1)
17:37:40 <dark> I always import Control.Monad to get bracket, and later remember that it's in Control.Exception.
17:38:00 <inkedmn> dude, tenacious d is hilarious...
17:38:43 * inkedmn is away: store
17:54:03 <Igloo> Oh, I made level 100 in xkobo, BTW, dark, so I'm having a break again  :-)
17:57:06 <dark> Igloo: I complained about xkobo on #debian-devel and they pointed me at kobo-deluxe :)  It has nicer graphics and sound, and it can run fullscreen.
17:57:53 <Igloo> I saw that mentioned a few weeks ago but haven't tried it properly yet
17:58:06 <Igloo> Does it basically play the same?
18:06:57 <dark> Yeah, it's the same game.  I'm even stuck at the same level :-)
18:07:47 <Igloo> :-)
18:07:53 <Igloo> Did you play through the early ones again?
18:08:36 <dark> Yep.
18:12:02 <dark> My most frequent cause of death is looking at the radar instead of at the screen.
18:12:30 <Igloo> *nod*
18:13:36 * inkedmn is back (gone 00:34:52)
18:16:52 <inkedmn> question...
18:17:06 <inkedmn> if i do something like:
18:18:04 <dark> Hmm, is there anyone around who can test hasdl's joystick support?
18:18:10 <dark> I don't have a joystick :-)
18:18:24 <inkedmn> fun n (x:y:xs) = y : x :  n xs
18:18:28 <lament> speaking of kobo deluxe, how do i play it?
18:18:36 <lament> the game won't start!
18:18:42 <dark> lament: kobodl?
18:18:46 <lament> yes
18:18:54 <dark> What do you mean, "won't start"?
18:18:55 <Igloo> xkobo is more likely to work
18:19:06 <lament> it asks for the name
18:19:23 <dark> You type your name and hit enter.
18:19:38 <dark> I think a proper unix program should use the login name, but well...
18:19:52 <lament> Yes. And nothing happens.
18:20:00 <dark> You don't get a "start game" button?
18:20:03 <lament> no.
18:20:17 * Igloo looks at inkedmn
18:20:31 * inkedmn looks at Igloo
18:20:56 <lament> and pressing any key makes the same menu pop up again
18:21:01 <lament> i.e. it asks for the name again
18:21:09 <inkedmn> just wondering if i can change the order in which x and y are positioned in the list
18:21:45 <Igloo> You can, but I don't know what you want the n xs to do
18:22:04 <Igloo> (well, you can build a new list with them in a different order)
18:22:09 <dark> lament: Might be a write permission problem.
18:22:10 <inkedmn> just calling the function n again
18:22:41 <lament> hmm
18:22:44 <lament> oh
18:22:45 <Igloo> Ah, you are trying to write caml, I think
18:22:47 <lament> maybe i should install it
18:23:01 <Janni> hi
18:23:01 <dark> I used to know the exact timing for hitting a bulb, then going offscreen, adjusting, and coming back to hit the next bulb.  But no longer.
18:23:21 <Igloo> You want    n (x:y:xs) = y : x : n xs
18:23:25 <Igloo> and    n xs = xs
18:23:37 <Igloo> (so it terminates)
18:23:48 <inkedmn> i'm trying to figure out how i can do a quicksort
18:24:41 <inkedmn> dammit, i mean bubblesort
18:25:34 <Igloo> Are you trying to write an efficient bubblesort?
18:26:29 <Igloo> Well, I guess worst case will be O(n^2) regardless
18:26:30 <inkedmn> not necessarily efficient, just something that works :)
18:30:23 <dark> bubblesort is very stateful.  Insertion sort would be much easier in haskell.
18:30:32 <dark> In fact, the Prelude does it in one line :-)
18:31:32 <inkedmn> i'm just trying to come up with something i can write for practice
18:32:46 <whee> inkedmn: what do you want to learn?
18:33:19 <inkedmn> how about this...
18:33:25 <inkedmn> how hard would a rot13 be?
18:33:38 <whee> probably fairly simple
18:34:38 * Igloo thinks about iterating something that does a cunning zip but can't quite make the one-liner happen
18:35:00 <whee> try to think of a smallish project you can work on for a bit
18:35:00 <inkedmn> would i have to build 2 lists and just take the appropriate index from the first and grab the char at the same index in the second?
18:36:09 <inkedmn> would the rot13 not be something like that?
18:37:44 <inkedmn> or should i do something simpler?
18:39:50 <inkedmn> seems like all i'd have to do is write a function that would return a letter's rot13 counterpart and map that function to a list
18:40:15 <whee> pretty much
18:41:36 <Janni> brb
18:43:46 <Janni> re
18:46:14 <whee> I'd try thinking of some sort of program you could write that would be useful to yourself in some way, inkedmn
18:46:24 <inkedmn> ok :)
18:46:29 <whee> so you'll have decent motivation to get a larger project done, and you'll learn quite a bit
18:46:45 <inkedmn> ok, just bear in mind that i know almost nothing :)
18:46:58 <whee> you'll figure it out as you go :P
18:46:59 <inkedmn> and, at this stage in my learning, i need the "wow" factor rather quickly :)
18:55:02 <dark> Igloo: one-liner bubblesort?
18:55:42 <lament> hm, kobo is evil
18:59:45 <Igloo> Yeah
19:00:03 <inkedmn> whee: any ideas? ;)
19:00:04 * Igloo isn't convinced it isn't possible, but hasn't got the time to think about it now
19:01:42 * inkedmn is watching Office Space
19:03:56 <whee> inkedmn: about?
19:04:16 <inkedmn> --> <whee> I'd try thinking of some sort of program you could write that would be useful to yourself in some way, inkedmn
19:04:31 <whee> what are your interests?
19:04:52 <inkedmn> networking, mainly
19:08:45 <whee> okay, hmf
19:09:36 <whee> write a daemon that simply accepts connections and displays a fortune :)
19:10:04 <whee> perhaps try using concurrency for handling connections and do the parsing of basic fortune files (usually fortunes seperated with a % on a blank line)
19:10:22 <whee> that seems to combine a bunch of things
19:10:32 <kev> write an irc bot?
19:10:50 <whee> funny you should say that one, heh
19:11:01 <whee> that's usually the first thing I do when I learn a new language; haven't done a haskell one yet :|
19:11:04 * kev tries to reproduce
19:11:23 <kev> how does haskell handle sockets btw?
19:11:29 <kev> if it's purely functional
19:11:31 * inkedmn is a bit daunted by that idea
19:11:42 <whee> kev: probably monads
19:11:54 <kev> ack, I still need to read about them
19:11:56 <kev> oh well
19:11:57 <whee> inkedmn: just break it down into small tasks
19:12:06 <kev> anyway, bedtime
19:12:07 <kev> night
19:12:14 <whee> perhaps read up on networking, get something that accepts a single connection, displays some predefined string, and gets the next
19:12:32 <whee> then try tacking on concurrency
19:12:53 <whee> then the fortune part could be an entirely separate project really
19:12:58 <whee> and later you can combine the two
19:15:10 <dark> kev: There's a networking package that provides the BSD socket interface as part of the IO monad.  It also lets you convert sockets to Handles.
19:15:37 <inkedmn> this is my frist functional language...
19:15:49 <whee> you have to learn somehow :P
19:16:12 <inkedmn> true, but i think the expression "biting off more than i can chew" applies here :)
19:17:12 <whee> don't look at the big picture, just work on each part
19:17:26 <whee> that's why there's modules
19:18:05 <dark> inkedmn: Maybe a text-only game?
19:18:39 <inkedmn> ok, how about this...
19:18:52 <dark> inkedmn: You could make a simple one in the "You are the pharaoh of egypt.  Feed your people and keep them happy" lines.
19:18:58 <dark> s/lines/genre/
19:19:05 <whee> write lemonade stand :)
19:19:09 * whee loved that game
19:19:13 <inkedmn> how about a word game
19:19:19 <dark> I have a book of BASIC games that would be nice to translate to Haskell :)
19:19:19 <inkedmn> like hangman
19:19:33 <whee> inkedmn: sounds good to me
19:19:41 <lament> basic to haskell? hmm :)
19:19:50 <dark> lament: I didn't mean automating it :)
19:20:11 <dark> A basic interpreter written in haskell would have a geekness factor, though.
19:20:49 <whee> dark: I'm tempted to do that now. heh
19:21:14 <dark> Or maybe a basic to C compiler :)
19:21:33 <dark> You'd have to do subroutine detection for that, though.  Unless you put everything in main() and use gotos.
19:21:51 <dark> Oh, some basics have computed gotos.  That could be tricky.
19:21:52 <inkedmn> the only problem is, i don't know how to create something that would maintain the word to be guessed
19:22:21 <dark> inkedmn: What do you mean with "maintain"?
19:22:43 <inkedmn> well, i'm assuming there would be functions that would check the input char against the secret word
19:23:09 <inkedmn> like, in java, i'd have an instance variable or something that would store the secret word value
19:23:30 <inkedmn> but i realize that functional programming approaches things very differently
19:24:58 <dark> I would make a hangman function that takes a secret word, the current guess, and the score.  It asks a letter and then either calls itself (for a new move), or exits (for win or lose)
19:25:05 <dark> It would be an IO function.
19:26:07 <dark> (current guess is the string with holes in it, i.e. "-a--e--"
19:26:15 <inkedmn> yeah
19:26:36 <whee> I'd probably end up writing a function that accepts the secret word and a character, and uses that callback style that I can't think of the name of
19:27:00 <dark> whee: continuations?
19:27:12 <whee> yes, that's it. CPS
19:33:47 <inkedmn> dark: the hangman function you referred to, would that be called from within another function?
19:48:24 <inkedmn> dammit, this is frustrating...
19:48:37 <inkedmn> i don't have the first freakin' clue where to begin...
19:51:27 <sethk> What's going on?  I just got here.
19:51:55 <inkedmn> dark suggested i write a simple text game in haskell to help me learn
19:52:06 <inkedmn> but i'm at a loss as to where to start
19:53:13 <inkedmn> not that i don't think it's a good idea, i'm just not sure i'm familiar enough with the language to do something like this
19:55:44 <dark> inkedmn: yes, you'd call it from main or something.
19:56:02 <dark> inkedmn: For testing, you can hardwire a secret word :) 
19:56:16 <dark> hangman "haskell" "-------" 0
19:57:43 <inkedmn> dark: would you mind kinda helping me get started?
19:58:28 <inkedmn> telling me how you would structure the fuctions, etc
20:00:15 <inkedmn> maybe i'll prototype it in python first...
20:01:44 <dark> inkedmn: It's 6 am here, I can't help :)
20:01:55 <inkedmn> heh
20:02:44 <inkedmn> maybe i'll start with the rot13 then
20:02:51 <inkedmn> seems like it's a bit more my speed
20:08:35 <whee> huag
20:08:46 <whee> I'm bored, what's up inkedmn?
20:09:01 <inkedmn> well, i've started my little rot13 thingie
20:09:10 <inkedmn> if i can get it working in the next 15 minutes, i'll try the game :)
20:09:18 <inkedmn> can i show you my code?
20:09:23 <inkedmn> 4 lines or so
20:09:23 <whee> sure
20:09:41 <inkedmn> exchangeChar :: Char -> Char
20:09:42 <inkedmn> exchangeChar c =
20:09:42 <inkedmn>     let l1 = "abcdefghijklmnopqrstuvwxyz"
20:09:42 <inkedmn>     let l2 = "nopqrstuvwxyzabcdefghijklm"
20:09:42 <inkedmn>     let i1 = elemIndex c l1
20:10:22 <Janni> inkedmn: have a look at the module Char and its functions ord and chr.
20:10:33 <whee> yes
20:10:38 <inkedmn> ok
20:10:45 <whee> you probably want to handle characters other than letters correctly
20:10:50 <whee> as well as capital and lowercase
20:10:54 <inkedmn> yeah
20:11:50 <inkedmn> well, ord and chr deal with the char's ascii value, yes?
20:12:31 <whee> ord is Char -> Int, chr is Int -> Char
20:12:53 <inkedmn> yeah
20:12:57 <Janni> inkedmn: i guess, you know the :t command in hugs
20:13:12 <inkedmn> python has the same functions
20:13:27 <Janni> and to read haskell source ($haskelldir/lib/hugs/Char.hs)
20:13:34 <inkedmn> so you're saying get the char's ascii value, increment it by 13, and get that numbers char value?
20:13:39 <inkedmn> (basicallY)
20:14:02 <whee> not exactly
20:14:09 <whee> you have to be careful to wrap around correctly
20:14:38 <inkedmn> true
20:14:55 <inkedmn> the ascii value of 'z' + 13 wouldn't be what i want :)
20:15:18 <Janni> you need to use the "mod" function
20:15:43 <Janni> it gives you the rest of an integral division
20:18:05 * inkedmn fires up a smoke
20:18:35 <Janni> cigarettes are not good for you, inkedmn!
20:18:42 <whee> indeed
20:18:50 <inkedmn> trust me, i know :)
20:18:55 <inkedmn> we're quitting soon
20:19:03 <inkedmn> once i get my health insurance at work
20:19:40 <inkedmn> it's really hard using these documents when you don't know how to read type signatures very well
20:21:20 <Janni> that shouldn't be too hard...
20:21:30 <inkedmn> i'm playing with the mod function
20:21:36 <inkedmn> it takes 2 int's
20:21:44 <inkedmn> but i'm not sure what it's doing exactly
20:22:00 <Janni> and gives you a third, which resembles the rest of the division of the first two ints
20:22:00 <whee> it returns the remainder of an integer division
20:22:20 <whee> 5 `mod` 2 == 1
20:22:26 <Janni> s/rest/remainder (this should be correct)
20:22:36 <inkedmn> so it's modulus
20:22:38 <inkedmn> ok
20:33:01 <whee> inkedmn: you know about the interact function?
20:33:11 <whee> you'll probably want to use that when testing
20:36:46 <inkedmn> whee: no, i don't
20:37:23 <whee> interact accepts a function which takes a string and returns a string
20:37:45 <whee> so if you had a function called rot13 which was Char -> Char, you could use 'main = interact $ map rot13'
20:38:07 <whee> then it'll accept input, run that function,and output the results
20:38:41 <whee> gah I wish I didn't break ghci again :(
20:40:23 <sethk> whee:  remember that the type of main is IO String
20:40:46 <whee> right, interact is probably returning IO () :P
20:42:00 <whee> that still doesn't change what I said. heh
20:44:02 <sethk> No, but if main has the wrong type the program won't compile, and the reason is sometimes not obvious.
21:37:13 <Janni> re
21:48:13 <sethk> re?
