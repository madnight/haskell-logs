06:56:29 <BlitzNL> I am trying to map this concrete syntax to abstract syntax but I am having some difficulties. I have for example a 'type Weight = (Float, CWeight)' and 'data CWeight = Kilo | Gram | Pound' (simplified). The thing is what I would like to do is something like 'Weight (12.0, Gram)' but this gives me an error : Does not match a => b .. I am doing something very wrong here but I don't seem to understand what it is  
06:57:11 <BlitzNL> s/=>/->
06:58:58 <Heffalump> you just want (12.0,Gram)
06:59:18 <Heffalump> if you want to be able to write Weight (...) you need newtype Weight = Weight (Float,CWeight)
07:00:47 <BlitzNL> Heffalump: Ahh ok, I'll look into the newtype. I never used it before. 
07:00:52 <BlitzNL> Heffalump: thnx
07:01:30 <Heffalump> as you've written it, Weight is just a type synomym for that tuple
07:01:43 <Heffalump> so any tuple with the type (Float,CWeight) will also have the type Weight
07:03:15 <BlitzNL> Heffalump: I used to think that newtype was just a optimized version of data with only 1 data constructor
07:03:58 <andersca> newtype is nice
07:04:25 <Heffalump> blizznl: it is almost, but it has slightly different strictness properties too
07:05:20 <Heffalump> it's best to think of it as like type but actually creating a separate type so you can make separate type class instances and also get more type safety
07:05:51 <Marvin--> Heffalump: what strictness properties? lazy/strict pattern matching?
07:06:10 * BlitzNL pressed the wrong button
07:06:27 <Heffalump> Marvin--: errm, I can't remember precisely, check the report or read the discussion from a few days ago in logs
07:06:44 <Marvin--> Heffalump: ok
07:10:15 <Marvin--> aha, so newtype T = T t is pretty much the same as data T = T !t
07:10:54 <Heffalump> no, not quite
07:11:06 <Heffalump> data T = T !t has a separate bottom value
07:11:21 <Heffalump> whereas for newtype T = T t, T _|_ is the only bottom value
07:12:45 <ibid> how do you distinguish between _|_ and T _|_ with data T = T !t?
07:13:21 <Heffalump> hmm
07:14:09 <Heffalump> I'm not sure if you can
07:14:13 <Marvin--> so in that respect, newtype T = T t behaves as if you'd written  foo (~(D _)) = 42  with an algebraic type?
07:14:35 <Marvin--> that is,  bar (T _)  is like  foo (~(D _))
07:14:46 <Heffalump> but pattern matching on Foo _ for a newtype always succeeds, whereas for data .. = .. !, it could fail 
07:14:50 * Heffalump disappears
07:15:32 <ibid> assuming there is only one constructor in T, how can it fail?
07:16:43 <Marvin--> you could always pass undefined to it
07:18:28 <ibid> yes
07:18:33 <BlitzNL> Unfortunately this 'newtype Weight = Weight (Float, CWeight)' introduces a new problem. I haven't told you that Weight is a kind of measurement ('data Measurement = Weight | Volume'). After changing type to newtype I get a 'repeated definition of constructor function "Weight" ..
07:18:34 <ibid> and that answers my question
07:18:43 <ibid> that's how you distinguish between them
07:19:22 <Marvin--> BlitzNL: then you probably want to define  data Measurement = Weight Float CWeight | Volume ...  instead...?
07:19:33 <ibid> BlitzNL: in data Measurement = Weight | Volume, Weight does not refer to the type Weight
07:19:41 <BlitzNL> Marvin--: yeah I am doing that right now
08:12:32 * Heffalump reappears
08:23:03 <ibid> *** Exception: Unicode.hs:108: Non-exhaustive patterns in record update
08:23:09 <ibid> anybody up to explaining that?
08:23:24 <ibid> do i really need to mention _all_ fields in an update?
08:34:47 <ibid> i think i got it
09:46:01 <shapr> aww, where's Igloo?
09:46:24 <liiwi> melting?
09:46:42 <shapr> I was gonna tell him that my preliminary data suggests that fractals iterations can be memoized across points.
09:46:46 <shapr> maybe so :-)
09:46:48 <shapr> hi liiwi!
09:47:25 <Heffalump> wdyhm?
09:47:28 <Heffalump> s/hm/m/
09:47:40 <Heffalump> Igloo is out playing Diplomacy or some similar game
09:48:42 <shapr> Heffalump: I hacked my Mandelbrot.hs to return a list of the values of z and c in each iteration
09:48:55 <shapr> then I looked for duplicates in that list, and there are lots
09:50:14 <shapr> I'm pretty sure I cut the fractal such that I only have half of the symmetrical part, so I think it's correct.
09:51:33 <Heffalump> oh, yes, it's almost certainly symmetrical in that sense
09:51:50 <Heffalump> but memoizing isn't really sensible for that
09:52:56 <shapr> right, but I'm memoizing for part of the calculation
09:53:41 <shapr> the idea being that any common z,c input values should always have the same set of iterations after that until they go out of bounds or hit max iters
09:55:03 <shapr> does that make sense?
09:56:00 <Heffalump> oh, I suppose so
10:15:02 * Marvin-- wants to play Diplomacy too :/
10:15:05 * shapr bounces
10:15:09 <shapr> hi marvin!
10:15:13 <Marvin--> hey shapr
10:15:19 * Heffalump likes Diplomacy, but I'm crap at it
10:15:38 * shapr doesn't know diplomacy
10:16:15 <Marvin--> shapr: it's a board game of plotting, alliances and deception :)
10:16:40 <Heffalump> a welcome counterpart for #haskell :-)
10:18:18 <Marvin--> shapr: you play the big powers of WW1, with very simplistic rules of movement, combat et.c., the interesting part of it is that a round of play consists of walking around talking and plotting with the other players for 15-20 minutes or so. After that, everybody write down their moves and they are performed simultaneously. And then the next round
10:18:37 <shapr> whoa, sounds cool
10:18:59 <Marvin--> So you'll usually have lots of outcries like "Gaah, what are YOU doing in the baltic ocean???" and "I thought you were going to assist me in that fight!" et.c. :)
10:19:44 <Marvin--> some lunatics take the plotting part extremely seriously and turn it into full-blown roleplaying
10:20:28 <shapr> heh, cool
10:20:35 <Marvin--> right now, though, I'm trying to figure out the rules for the A Game of Thrones CCG
10:21:37 <Marvin--> we're three George RR Martin fans here who have bought a starter each, going to be interesting to play :)
10:26:32 * shapr goes offline again, still waiting for the DSL
11:46:17 * Igloo looks insterested really loudly in the hope that shapr will hear him
11:47:21 <Marvin--> Igloo: all the way to Sweden?
11:48:29 <Igloo> Indeed
11:48:36 <Igloo> Oh, is he talking about sindividual points looping?
11:48:37 <Heffalump> interested in his memoisation experiment?
11:48:52 <Igloo> Yup
11:49:09 <Heffalump> I think he's saying that if you memoise the iteration function, then you discover that multiple starting points come to the same intermediate result
11:49:24 <Heffalump> and also you'll get the benefit of the symmetry without having to code it explicitly
11:50:25 <Igloo> But the x+yi will different so that doesn't hlep
11:51:28 <Heffalump> wdym?
11:51:50 <Heffalump> oh, right, yeah
11:52:00 <Heffalump> ok, it won't help with the symmetry thing
11:52:16 <Igloo> Hmmm, he says "memoized across points" though
14:05:36 <Igloo> Grrr, the GHC docs have the -ddump-* flags in alphabetical order
15:12:24 <andersca> Marvin--?
15:14:17 <Marvin--> yeah?
15:14:32 <andersca> Marvin--: what toolkit did you use for the afp lab1?
15:14:55 <Marvin--> andersca: Yahu, some tk wrapper written by Koen
15:15:30 <Marvin--> had I had more time, I would've tried gtk2hs
15:18:24 * Marvin-- is off to bed
18:01:06 <Vulpyne> Is there a normal interface to Unix select/poll?
18:40:38 <Pseudonym> I don't believe so.
18:40:57 <Pseudonym> Oh, hang on.
18:42:06 <Pseudonym> No. :-)
19:24:55 <Vulpyne> Doh.
19:26:15 <Vulpyne> What's the point of having a network library with no select/poll? :)
19:27:39 <Pseudonym> It's portable.
19:27:56 <Pseudonym> Seriously, select/poll is a bloody ugly interface.
19:28:14 <Pseudonym> IMO, this is one of the very few things that NT gets right which Unix does not.
19:28:20 <Pseudonym> Actually, it's probably the only thing.
19:32:27 <Pseudonym> Basically, GHC encourages you to use multi-threading instead.
19:32:49 <Pseudonym> Oh, hang on.
19:33:48 <Pseudonym> Oh, I was looking in the wrong place.
19:33:57 <Pseudonym> In -package util there's the Select module.
19:34:16 <Pseudonym> It hasn't been hierarchicalised yet.
19:34:22 <Pseudonym> Well, select() is still wrong.
19:58:55 <Pseudonym> Unfortunately, Unix gives you no way to wait on a file descriptor, and a signal, and a condition variable all at once.
