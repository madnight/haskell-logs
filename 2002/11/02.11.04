00:27:22 <bronaugh_> hmm.. more fun and games.
00:27:43 <bronaugh_> how does one access members of a defined type?
00:27:56 <bronaugh_> ie, I have an instance of this type, and I want to access the components of it.
00:37:49 <andersca> can't you pattern match?
00:42:05 <bronaugh_> trying to.
00:42:12 <bronaugh_> process ((length:stamps):t_list) =
00:42:14 <bronaugh_> yadda yadda
00:42:19 <bronaugh_> process :: [ProblemTuple] -> [String]
00:44:54 <ibid> ProblemTuple is defined as...?
00:45:04 <bronaugh_> type ProblemTuple = (Int, [Int])
00:45:32 <ibid> well, the colon is a list constructor
00:45:38 <ibid> not a tuple constructor
00:45:41 <ibid> try:
00:45:45 <bronaugh_> ok.
00:45:48 <ibid> process ((length,stamps):t_list) =
00:45:57 <bronaugh_> oh riiight.
00:45:58 <bronaugh_> forgot about that.
05:05:44 <ayrnieu> hello Marvin
05:05:51 <ibid> hello all
05:06:05 <mgoetze> yo yo
05:06:46 <Marvin--> 'ello
06:25:46 * ayrnieu wonders how shapr's move is going.
06:34:10 <ayrnieu> Has anyone managed to compile HOpenGL?  I get C-level errors, "GL_FOO is undefined".
09:03:53 * Igloo bounces
09:07:43 <cleverdra> What's up, Igloo?
09:09:04 <Igloo> Stuff working   :-)
09:14:09 <cleverdra> ah, good =)
11:01:04 <|Fo|Ns> hi
11:02:51 <Heffalump> hi
11:03:58 <|Fo|Ns> I want instace a type in class Rea, what opration is it supposed to have?
11:04:00 <|Fo|Ns> Read
11:04:29 <Heffalump> reads and readsPrec, IIRC
11:04:35 <Heffalump> oh, hangon, no
11:04:48 <Heffalump> readsPrec and readList
11:05:08 <|Fo|Ns> and what do those functions do?
11:05:39 <Heffalump> can't remember, sorry
11:05:49 <Heffalump> read the instances for standard types in the hugs Prelude
11:05:59 <|Fo|Ns> ok, thanks
11:39:29 <Marvin--> err
11:41:31 <Heffalump> err?
11:48:01 <Marvin--> what is the significance of a "header sentinel node" in a singly linked list?
11:50:09 <Marvin--> should the "list" point to the dummy item which points to the first item, and let dummy.next == null signify empty list rather than list == null?
11:51:36 <Heffalump> I think so, yes
11:51:54 <Heffalump> I find using doubly indirect pointers is a nice way to avoid needing that
11:54:42 <Marvin--> "Describe a linear-time algorithm that reverses a queue Q. To access the queue you are only allowed to use the operations of the queue ADT"
11:54:57 <Marvin--> uh, but I can use a stack for the actual act of reversing it, or...?
11:55:03 * Marvin-- curses vague problem descriptions
11:56:07 <Igloo> I'd have guessed they wanted a recursive solution
11:56:55 <Marvin--> oh dear
11:57:16 <ludde> queue ADT?
11:57:31 <ludde> ah, abstract data type
11:59:07 <|Fo|Ns> can anyone tell me what does readsPrec do ?
11:59:17 <|Fo|Ns> or is supposed to do
12:05:47 <ludde> Marvin--: do you know why you never have to write long lab reports at GU/Chalmers? In umeå, it seems like they have to write a report following the guidelines on the page i showed you, for each lab.
12:07:45 <Marvin--> ludde: because the labs here suck
12:08:16 <ludde> oh
12:08:24 <Marvin--> my guess is that they're too lazy to read and mark lots of reports
12:08:38 <Marvin--> or maybe they just don't feel that report writing is important enough *shrug*
12:09:27 <ludde> i see
12:10:08 <Marvin--> I can tell you that if I had to read and mark reports as well as the code, I'd demand more money than three labs per hour ;)
12:10:30 <ludde> yeah, obviously :)
12:10:50 <ludde> how much did people write for the last programspråk report?
12:13:11 <Marvin--> it was very varied
12:14:22 <Marvin--> argh, silly book, they use Java for all the examples, but the exercises are all "write pseudo code to ..."
12:14:34 <ludde> what course is that
12:16:05 <Marvin--> data structures D2
12:16:11 <Marvin--> not Budd, new book
12:16:25 <ludde> you're a handledare for that one?
12:16:34 <Marvin--> nod
12:16:37 <Marvin--> but I'm starting to regret it
12:16:41 <ludde> oh? :)
12:17:02 <ludde> i thought that course was pretty good
12:17:21 <ludde> niklas een was our supervisor
12:17:43 <ludde> he liked to talk about other nice algorithms in addition to the ones covered by the course
12:17:44 <Marvin--> well, for one, I haven't taken it myself, since I'm a GU student, so I'm feeling out of place
12:18:12 <ludde> s/algorithms/data structures/
12:19:53 <Marvin--> and it's all in freakin' Java :/
12:20:01 <ludde> :(
12:20:02 <Marvin--> at least our "corresponding" course was in both Haskell and Java
12:20:20 <ludde> the data structures are the same in java as in any other imperative language though
12:20:38 <ludde> is there any way to make an O(1) hash table in haskell?
12:21:15 <Marvin--> maybe using ST stuff, I dunno
12:21:40 <Heffalump> ST/IOarrays are O(1) I think
12:21:41 <Marvin--> the point of the course wasn't "haskell is worse than java because you can't implement O(1) hash tables" ;)
12:21:50 <Marvin--> Heffalump: yeah, but IOarrays aren't "in" haskell ;)
12:21:57 <Heffalump> true :-)
12:22:09 <ludde> Marvin--: no.. I just thought about that when you said that you had a course in haskell data structures.
12:23:34 <Marvin--> ludde: it was in both haskell and java
12:23:51 <Marvin--> we implemented AVL trees in haskell for example
12:24:39 <ludde> maybe they would appreciate if you mentioned some haskell stuff
12:25:26 <ludde> i would have thought that was cool
12:25:33 <ludde> but maybe they are not like me
12:27:54 <Marvin--> so far I've only gotten the obvious questions "why are there no answers to the exercises in the book?", "can you give us a list of all those mathematical tricks?", "how do you know what mathematical trick to use?" and "why does unix suck so much?"
12:28:10 <ludde> eheheh
12:28:19 <ludde> I like "why does unix suck so much?"
12:28:44 <ludde> why do they ask _you_ about that? :)
12:29:07 <Marvin--> (the "mathematical tricks" thing was from the class on big Oh notation when I proved that (n+1)^5 is O(n^5) and they were staring blankly at my usage of the binomial theorem)
12:29:20 <Marvin--> ludde: because I helped someone with the -classpath and -cp flags to javac and java
12:30:07 <ludde> :)
12:30:12 <Marvin--> I was going to argue that it isn't unix per se that sucks, but how the java and javac CLI interface sucks badly and that the unix systems we have at chalmers suck more than they have to
12:30:35 <Marvin--> but I thought better of it and said "well..." non-comittally and then went and talked to other people
12:30:51 <ludde> yeah, they won't probably understand what you mean anyway
12:31:03 <ludde> like
12:31:04 <cleverdra> 'mathematical trick'; gaah.
12:32:00 <Marvin--> cleverdra: what, didn't you know that the binomial theorem is a trick? :)
12:32:21 <Marvin--> I so hate the "how do we know what trick/method to use?" question
12:32:40 <Marvin--> I can't just shout "IT COMES WITH EXPERIENCE!" to them, can I?
12:33:05 <cleverdra> Tell them to buy "How to Solve It" =)
12:33:18 <ludde> but hmm
12:33:26 <ludde> can't you simply say that since n is large, 1 is small
12:33:27 <Marvin--> oh I like this exercise: "Provide the details of an array implementation of the list ADT"  ugh
12:33:29 * Heffalump tends to just say "you have to practice lots" for that sort of problem
12:33:48 <Marvin--> Heffalump: yeah, me too
12:34:07 <Marvin--> "with much knowledge comes much knowledge"
12:38:10 <Marvin--> uh, I wonder if this one is at trick question
12:39:13 <Marvin--> "give pseudo code for an operation that moves the element at position p of a sequence to the head of it, keeping the relative order of the other elements unchanged"
12:39:50 <dennisb> Marvin--: that sounds just like pseudo code to me!
12:39:59 <Marvin--> dennisb: exactly...
12:40:12 <Marvin--> I have a one-liner:  insertFirst(remove(p))  but I'm wondering if it's a trick question of some kind
12:40:56 <dennisb> In the field of partial evaluation there is something that is called "The Trick"
12:42:04 <dennisb> a trick to make more stuff known during compile time to enable more optimizations
12:42:10 <Marvin--> "your method should run in O(1) time if S is implemented with a doubly linked list"
12:42:48 <Heffalump> errm.
12:42:58 <Heffalump> is p a pointer, then?
12:43:11 <Marvin--> they make a difference between a "position" and a "rank"
12:43:18 <Marvin--> where position is abstract and rank is an int
12:43:23 <Marvin--> so, yes, I assume p is a pointer
12:43:41 <dennisb> Heffalump: it's pseudo code, it can be anything..
12:44:20 <Marvin--> dennisb: no, the book nails down what a 'sequence' and a 'position' is
12:44:33 <Heffalump> well, you can't do it in O(1) if p isn't the pointer...
12:46:02 <dennisb> Heffalump: obviously
12:46:22 <Marvin--> hear ye, hear ye, I decree that this book is silly
12:46:26 <Marvin--> though not as silly as Budd
12:46:54 * Marvin-- wonders if he should extend his "all window managers suck" to "all (window managers|books on data structures) suck"
13:29:16 <michaelw> there. happy? :)
13:29:21 <Marvin--> ;)
13:29:59 * Marvin-- should have picked the time to ask more carefully, when not everybody else were quiet as mice :)
13:30:24 <michaelw> heh
13:30:29 <Igloo> What am I missing? Another person from the same place?
13:31:33 <Marvin--> Igloo: michaelw is the Debian maintainer of ghc, and I asked him why he wasn't on #haskell
13:31:44 <Igloo> Ah, right
13:32:51 <Heffalump> :-)
13:32:58 <Igloo> Careful or I'll start dropping hints about daily snapshots  :-)
13:33:17 <michaelw> oh, feh :-p
13:33:18 <Igloo> (although actually that wouldn't be useful to me anyway)
13:33:20 <Marvin--> haha
13:33:57 <michaelw> i have packages for 5.04.2 ready, just waiting for the -O2 bug to be fixed and the release tag to be set.
13:34:14 <Marvin--> hot diggity damn!
13:34:23 <Igloo> Cool
13:36:26 <Heffalump> what bug id is that?
13:40:20 <michaelw> 630807
13:45:08 <michaelw> hmm, somebody knowledgeable with a recent hmake?
13:46:05 <michaelw> then again, it's maybe too complicated to ask.  forget it.
13:46:58 <Heffalump> is this Brent's bug?
13:47:09 <michaelw> yep
13:47:56 * Heffalump would have thought a /usr/lib/ghc symlink would be a better way of fixing it, but I don't use hmake much
13:48:28 <michaelw> nope.  you can have installed several versions of ghc
13:48:59 <michaelw> i didn't look to deep into this, but i think it's just hmake being stupid.
13:49:06 <Heffalump> /usr/lib/ghc5, then? Or do you think it makes sense to have multiple versions of ghc5?
13:49:21 <michaelw> it might, in the future.
13:49:41 <michaelw> symlinks are a kludge
13:50:25 <michaelw> why does hmake need to know the installed ghc version statically?
13:52:31 <Heffalump> no idea, sorry :-) I think it might just be that configuration file it builds.
13:53:08 <michaelw> well, i'll just wait and see what brent has to say about it
13:53:28 * michaelw is not keen on poking in hmake's code base... (knowing it from the past ;))
13:53:37 <Heffalump> heh
14:41:57 * Igloo tries to avoid using unsafePerformIO
14:42:15 <Heffalump> what for?
14:44:52 <Igloo> I have something with return type [Q D] where Q is a Monad and I need to do some IO, preferably without the asymmetry of picking a random QD to do it in. I have runQ :: Q a -> IO a and qIO :: IO a -> Q a
14:45:26 <Heffalump> Q is a particular monad?
14:45:37 <Heffalump> and if so, what kind of monad?
14:45:43 <Igloo> I think unsafePerformIO ( do myIO; return qds ) is safe, but I'd still rather not use it
14:45:55 <Igloo> It's the TH quotation monad
14:46:10 <Heffalump> ah, so turning it into a monad transformer isn't very feasible?
14:46:23 <Heffalump> it doesn't sound very safe to me
14:46:32 <Heffalump> is there an IO monad lurking somewhere inside it?
14:47:02 <Igloo> It guarantees the file written by myIO will be written if the value of qds is used, right?
14:47:09 <Igloo> Q == IO ATM
14:47:49 <Heffalump> that doesn't sound at all like a safe use of unsafePerformIO to me
14:47:59 <Heffalump> for example CSE might break it
14:48:04 <Igloo> CSE?
14:48:10 <Heffalump> common sub-expression removal
14:48:12 <Heffalump> as might inlining
14:48:22 <Heffalump> (where does the filename for myIO to write come from?)
14:48:30 <Igloo> Hardcoded
14:48:35 <Igloo> Which CS?
14:48:36 <Heffalump> to one particular filename?
14:48:41 <Igloo> Yup
14:48:54 <Heffalump> do you mind if it only gets written once in your entire program?
14:49:06 <Igloo> It will only get written once in my entire program
14:49:18 <Heffalump> do you mind if it gets written several times in your entire program?
14:49:28 <Igloo> No
14:49:37 <Heffalump> hmm, then it /might/ be safe
14:49:50 <Heffalump> but I'm not entirely convinced, given it really isn't referentially transparent
14:50:08 <Heffalump> what happens if two attempts to write it end up interleaved?
14:50:30 * Igloo was just thinking that through
14:51:04 <Heffalump> if Q is IO, what's the problem, anyway?
14:51:11 <Igloo> If I call System gcc and 2 get interleaved then I think it might break
14:51:38 <Igloo> I don't know that Q is IO (but I do have runQ and qIO)
14:52:10 <Igloo> Would that help given I don't want to be asymmetric?
14:52:28 <Heffalump> asymmetric in what sense?
14:52:38 <Heffalump> oh, hangon, you said you *have* runQ and qIO
14:52:41 <Heffalump> not you need them
14:52:43 <Igloo> Yes
14:52:48 <Heffalump> I'm sure you can do arbitrary IO inside Q then
14:53:07 <Heffalump> in fact you obviously can
14:53:15 * Heffalump fails to see any problem?
14:53:22 <Heffalump> s/?//
14:53:27 <Igloo> I currently have "map (return . imp) fs". To do IO I think I'd have to do special stuff for head fs and then cons it on to that mapped onto the tail, wouldn't I?
14:53:38 * Igloo goes to rescue pizza
14:54:10 <Heffalump> so you want something of type IO () -> [Q D] -> [Q D] ?
14:54:52 <Heffalump> if so, I withdraw what I said above, cos you can't do any IO if you have [] as input
14:54:57 <gdsx> hrm... how difficult would it be to learn haskell in a day? (not the whole language... just enough to be able to do relatively complicated stuff with it)
14:55:07 <Heffalump> gdsx: how complicated?
14:55:09 <Igloo> Right
14:55:19 <Heffalump> igloo: but is [Q D] really the output type you need in the end?
14:55:32 <Igloo> Yes
14:55:35 <Heffalump> why?
14:55:51 <gdsx> Heffalump: mostly some modeling
14:55:52 <Heffalump> given Q is really IO, at some point someone is going to run sequence or the equivalent on it, surely?
14:55:57 <Igloo> Because splice takes [Q D] and magically produces code
14:55:59 <Heffalump> gdsx: of what kind of thing?
14:56:32 <Heffalump> igloo: and splice does nothing if it gets [] ?
14:56:43 <gdsx> Heffalump: like modeling a moose pop'n given birth rate and death rate (and survival rate)
14:56:55 <gdsx> Heffalump: I previously did it in ruby...
14:57:07 <Heffalump> gdsx: that's quite easy, but I'm not sure how easily you could learn enough stuff in a day to be able to do it
14:57:15 <Igloo> I'd guess so
14:57:21 <Heffalump> cos you need to get to grips with (a) the syntax and (b) the type system
14:57:37 <Heffalump> and neither of those are particularly easy if you don't have experience of functional programming before
14:57:47 <Igloo> Wouldn't I need a null D for that to be useful, though?
14:57:55 <Heffalump> igloo: for what to be useful?
14:58:29 <Igloo> How were you going to yes the fact that splice [] does nothing?
14:58:44 <Heffalump> "yes" the fact?
14:58:51 <Igloo> use
14:58:59 <Heffalump> I wasn't, I was trying to understand it
14:59:03 <Igloo> Ah
14:59:34 <Heffalump> if splice [] does absolutely nothing but you still want to do some IO if you have [], then you're screwed
14:59:51 <gdsx> Heffalump: hrm... where might I find a jumping-off point? 8)
14:59:55 <Heffalump> and you really really should get the types fixed somewhere rather than using unsafePerformIO, unless you're just trying to debug something
15:00:03 <Igloo> Oh, I don't actually care about that case
15:00:05 <Heffalump> gdsx: try the gentle introduction to haskell (see haskell.org)
15:00:15 <gdsx> thx
15:00:17 <Igloo> get the types fixed?
15:00:18 <Heffalump> igloo: oh, ok, then you can just stick it into the head of the list, like you said
15:00:28 <Heffalump> igloo: yes, e.g. make splice return an IO or Q type
15:00:47 <Igloo> YM take...I wonder why it isn't already
15:01:11 <Igloo> Doing it in the head feels ugly, though
15:01:34 <Heffalump> "take"?
15:01:34 <Igloo> s/feels/feels and looks/
15:01:43 <Heffalump> what's the return type of splice?
15:02:29 <Igloo> Well, it's not a function, it's syntax. It takes [Q D] and code springs into existence
15:02:45 <Heffalump> OIC, this isn't in GHC internals, it's in a TH program.
15:02:57 * Heffalump thinks
15:03:00 <Igloo> Yes
15:03:17 <Heffalump> in that case you wanting to do IO is the broken thing.
15:03:21 * Igloo will ask Simon if there is a reason it can't be Q [D] though
15:03:26 <Igloo> lol
15:03:35 <Heffalump> hmm?
15:03:48 * Igloo is the end user, I am right by definition  :-)
15:03:50 <Igloo> hmm?
15:03:58 <Heffalump> why did you lol
15:04:12 <Heffalump> so if you want a function from IO a -> a, you're right by definition?
15:04:37 <Igloo> At < Heffalump> in that case you wanting to do IO is the broken thing.
15:04:56 <Igloo> I'm always right
15:05:15 * Heffalump looks unconvinced
15:05:54 <Igloo> :-)
17:08:00 * Igloo starts to think that finding a paper would be an easier way to work out how GHC's typechecker works than trying to understand the source
17:17:54 <Heffalump> I can explain Hindley-Milner to you if you want
17:18:04 <Heffalump> but I did that before, IIRC
17:18:55 <Igloo> I meant in a what functions do what sort of way rather than how the types are actually checked
17:19:09 <Heffalump> ah, I don't remember there being any papers about that
17:19:12 <Heffalump> TICBW
17:19:38 <Heffalump> is there anything in the notes on how GHC works?
17:19:42 <Igloo> I *might* have it now anyway
17:20:03 <Igloo> What notes?
17:20:03 <Igloo> Oh, ISWYM
17:20:07 <Igloo> Dunno, might have a look tomorrow
17:49:31 <Sydx> hi all!
17:49:47 <Sydx> guys, who has experience developing COMPILERS in Haskell for 68000?
17:49:53 <Sydx> (or pretty much anything)
17:50:02 <Sydx> i need some guidance for my project
17:50:13 <Sydx> ANY help would be most appreciated...
17:50:32 <Sydx> if it wasn't 68000, if it was TOY, Intel, whatever, please come to my rescue...
17:50:42 <Sydx> (a pint of beer is guaranteed...)
17:52:15 <Igloo> Simon Peyton-Jones has written a couple of books on it
17:52:31 <Sydx> there's no time for that, unfortunately :(
17:52:42 <Sydx> i've only got a few hours of this nite :)
17:52:53 <Sydx> (I know about the existence of the book)
17:53:04 <Sydx> I need some bread and butter stuff - I get stuck
17:53:32 <Sydx> it's a few conceptual things that need to be sorted
17:53:44 <Igloo> Yay, GHC patched and not segfaulting
17:54:03 <Igloo> Go on - I can try to help, but I've never actually done it (nor finished the book)
17:54:14 <Sydx> excellent
17:54:22 <Sydx> shall i do it here or go private?
17:54:27 <Igloo> Here
17:54:38 <Sydx> OK then
17:55:00 <Sydx> our program is represented by the following structure:
17:55:32 <Sydx> -- Abstract syntax tree data type:
17:55:34 <Sydx> type Name  = [Char]
17:55:34 <Sydx> type Label = Int
17:55:34 <Sydx> data Prog = Program [Decl] [Stat]
17:55:34 <Sydx> data Typedef = Integer |
17:55:34 <Sydx>                Array Int
17:55:34 <Sydx> data Decl = Declare Name Typedef
17:55:36 <Sydx> data Stat = Assign Lhs Expr |
17:55:38 <Sydx>             For Name Expr Expr [Stat]
17:55:40 <Sydx> data Lhs = Var Name |
17:55:42 <Sydx>            Arr Name Expr
17:55:44 <Sydx> data Expr = Const Int |
17:55:46 <Sydx>             Binop Binop Expr Expr |
17:55:48 <Sydx>             Ref Lhs
17:55:50 <Sydx> data Binop = Plus | Minus | Times | Divide | Max | Min
17:55:52 <Sydx> (SORRY!!)
17:55:54 <Sydx> I know, that was long, but it's separate things.
17:56:11 <Sydx> Basically, it's more or less self explanatory.
17:56:21 <Sydx> It begins with a Prog.
17:56:26 <Igloo> A subset would have given the idea, but go on...
17:56:37 <Sydx> Decl is declarations, Stat is statements...
17:56:51 <Sydx> Statements are limited to Assignments and For-loops.
17:57:05 <Sydx> There are no If-fy things or Goto's or whatever.
17:57:21 <Igloo> Oh, *in* Haskell, not *for* Haskell, right. I should probably know slightly more about that then  :-)
17:57:34 <Sydx> In Haskell :)
17:57:51 <Sydx> (Otherwise it would have been a hell of a lot of work!)
17:57:59 <Sydx> This is a very simplistic language.
17:58:10 <Sydx> Our TARGET is the following:
17:58:46 <Sydx> Guys, may I paste it? It's 10 lines... ?
17:59:18 <Igloo> Yeah, OK
17:59:35 <Sydx> Thanks, here's the instruction set:
17:59:51 <Sydx> data Instruction = 
17:59:54 <Sydx>                 Data | Text |
17:59:54 <Sydx>                 Comm [Char] Int |
17:59:54 <Sydx>                 Label [Char] |
17:59:54 <Sydx>                 Bra [Char] |
17:59:54 <Sydx>                 Blt [Char] |
17:59:55 <Sydx>                 Bgt [Char] |
17:59:57 <Sydx>                 Mov Operand Operand |
17:59:59 <Sydx>                 Add Operand Operand |
18:00:01 <Sydx>                 Sub Operand Operand |
18:00:03 <Sydx>                 Mul Operand Operand |
18:00:05 <Sydx>                 Div Operand Operand |
18:00:06 <Sydx>                 Cmp Operand Operand |
18:00:09 <Sydx>                 Halt
18:00:11 <Sydx>      deriving Show 
18:00:13 <Sydx> data Operand = Reg Register |
18:00:15 <Sydx>                Ind Register |
18:00:17 <Sydx>                Push | Pop |
18:00:19 <Sydx>                Abs [Char] |
18:00:21 <Sydx>                ImmNum Int |
18:00:23 <Sydx>                ImmName [Char]
18:00:25 <Sydx>      deriving (Eq, Show)
18:00:27 <Sydx> Well, Instruction is instruction, Operand is operand... :-)
18:00:29 <Sydx> The usual 68000 addressing modes apply.
18:00:29 <Igloo> That's rather more than 10 lines
18:00:53 <Sydx> (Sorry, I was not meant to paste Operand straight away - a typo :( )
18:01:23 <Igloo> So what's your problem?
18:01:37 <Sydx> On this system we've got 7 data registers + 1 stack pointer:
18:01:49 <Sydx> data Register = D Int | A7
18:01:49 <Sydx>      deriving (Eq, Ord)
18:01:49 <Sydx> OK!
18:01:49 <Sydx> The problem.
18:02:15 <Sydx> I'm trying to write a function
18:02:15 <Sydx> translateStat :: [Stat] -> [Register] -> Label -> ([Instruction], Label)
18:02:28 <Sydx> This gets a list of Statements, available registers, next available label,
18:02:47 <Sydx> and generates a list of 68000 instructions
18:03:00 <Sydx> (it also returns the next available label in a tuple)
18:03:11 <Sydx> i am just wondering how to approach it
18:03:27 <Sydx> it would be reasonable to write a separate translateExpr, say
18:03:46 <Sydx> that takes an expression and converts it to assembly
18:03:52 <Sydx> but
18:04:00 <Sydx> (1) i need to keep track of the registers
18:04:16 <Sydx> (2) when i run out of registers (i.e. end up with only one)
18:04:36 <Sydx>     i am meant to use that reg as an accumulator + use stack
18:04:38 <Igloo> Do you have to use the type of translateStat above?
18:04:50 <Sydx> that's suggested
18:04:54 <Igloo> Oh, OK
18:04:55 <Sydx> but i can use anything really
18:05:20 <Sydx> the point is, if i do it expression by expression,
18:05:29 <Sydx> how do i remember where the result goes?
18:05:39 <Sydx> in general, where do i put the result of an expression?
18:06:02 <Sydx> what if Expr is just a Const? i want to avoid using regs altogether
18:06:03 <Heffalump> you can either give it a name, or just use it
18:06:13 <Heffalump> oh, sorry
18:06:18 * Heffalump misunderstands the question
18:06:20 <Igloo> translateExpr would return something that either says Register n or MemoryAddress m (if you have memory, I forget)
18:06:24 <Sydx> then how do i put the result back
18:06:42 <Sydx> well, i do have memory,
18:06:51 <Sydx> but i think i had better use stack
18:07:04 <Sydx> so u think these should be returned by translateExpr?
18:07:33 <Heffalump> the stack is implicit in the opcodes, right?
18:08:14 <Sydx> I guess so...
18:08:20 <Sydx> it's a little bit strange:
18:08:30 <Heffalump> well, do any of them operate directly on values on the stack or leave values on it?
18:08:47 <Sydx> look at Operand for instance: data Operand = Reg Register | Ind Register | Push | Pop
18:08:49 <Sydx> ...
18:08:54 <Heffalump> ah.
18:09:00 <Sydx> What kind of operand is Pop?! or Push?!!!
18:09:09 <Heffalump> heh
18:09:30 <Sydx> I dunno, from what I know, 68000 does not. But I was given this data structure...
18:10:05 <Heffalump> what kind of instruction is Data or Text?
18:10:05 <Sydx> Aha!
18:10:26 <Sydx> print_operand (Push)      = "-(A7)"
18:10:28 <Sydx> print_operand (Pop)       = "(A7)+"
18:10:28 <Sydx> print_operand (Abs x)     = x
18:10:31 <Sydx> That's what they mean!
18:10:37 <Heffalump> huh?
18:10:41 <Heffalump> what's (A7)?
18:10:55 <Sydx> A7 is the stack pointer register.
18:11:21 <Sydx> So when I use it in the Operand structure, it is understood, that I really mean -(A7)...
18:11:32 <Sydx> I.e. reading from stack (or writing to stack)
18:11:38 <Sydx> That makes it clearer
18:12:43 <Heffalump> so does it really mean --(A7) and (A7)++, in C-ish notation?
18:13:24 <Sydx> Yeah
18:13:30 <Sydx> 68000 Asm understands that
18:13:41 <Sydx> it's A7 with pre decrement
18:13:43 <Sydx> and post increment
18:13:50 <Sydx> i.e. push/pop
18:13:51 <Igloo> --*A7 and *A7++
18:14:25 <Sydx> yep
18:14:33 <Sydx> it IS a pointer
18:15:49 <Heffalump> hmm
18:16:02 <Heffalump> igloo: YM *(--A7)
18:16:16 <Igloo> Ooops, yes  :-)
18:16:28 * Heffalump still doesn't understand where results of instructions go
18:16:49 <Sydx> me neither! :(
18:16:56 <Sydx> that's where i'm stuck
18:17:10 <Sydx> OK, we need
18:17:12 <Sydx> <Sydx> translateStat :: [Stat] -> [Register] -> Label -> ([Instruction], Label)
18:17:18 <Heffalump> are you sure Add doesn't take three arguments?
18:17:19 <Sydx> suppose we start like this:
18:17:33 <Sydx> translateExpr (Binop binop expr1 expr2) regs label
18:17:35 <Sydx>     = transExpr1 ++ transExpr2 ++ transBinop
18:17:35 <Sydx>     where
18:17:35 <Sydx>         transExpr1 = translateExpr expr1
18:17:35 <Sydx>         transExpr2 = translateExpr expr2
18:17:35 <Sydx>         transBinop = translateBinop binop
18:17:37 <Sydx> Nope
18:17:39 <Heffalump> oh, I suppose it could put the result into one of the operands
18:17:45 <Heffalump> but that'd be really silly if one of them was Pop
18:17:52 <Sydx> Basically it takes the first operand and adds it to the second
18:18:17 <Sydx> I don't think u can use pop as the target
18:18:24 <Sydx> u can prolly use it as the source
18:18:31 <Sydx> u need one reg at least
18:18:37 <Sydx> (to hold the result)
18:20:36 <Heffalump> ah.
18:20:37 <Heffalump> hmm.
18:20:38 <Sydx> this is so tough...
18:20:42 <Heffalump> this machine is silly
18:21:33 <Sydx> it is...
18:26:27 <Igloo> Yay!
18:26:32 * Igloo plays TH-enhanced Hetris
18:28:55 <Sydx> brb
18:38:27 <Heffalump> TH-enhanced how?
18:40:31 <Igloo> The bit in $( ... ) in urchin:~ian/hetris/Hetris-th/Hetris/Curses.hsc
18:49:51 * Igloo goes to stick a tarball on my webpage and e-mail everyone in sight  :-)
18:55:00 <Heffalump> nice.
19:00:48 <Heffalump> code that dynamically generates C during its own compilation is rather sick, though :-)
19:01:14 <Igloo> s/generates/generates and compiles/  :-)
19:03:41 <Heffalump> even worse :-p
19:04:29 <Igloo> What I need now is a way to execute GHC from cpp  :-)
19:37:47 * Igloo decides it must be bedtime by now and vanishes
