03:13:37 <BlitzNL> I have this datatype, data Maat = Aantal (Float, [CAantal]) | Volume (Float, CVolume) | Gewicht (Float, CGewicht), don't care about the names 'cause it's dutch ;) Well now I need to calc something with the floats, as you can see the structures of the types are the same. Now my code looks like this: case maat of Volume (x, _) -> x/2*i Gewicht (x, _) -> x/2*i Aantal (x, _) -> x/2*i  
03:14:52 <BlitzNL> Is it possible to make this calc more general and bring the x/2*i part back to 1 occurrence?
03:54:55 <andersca> write a separate functin that returns the volume?
03:54:58 <andersca> function even
03:54:59 <andersca> dho
05:13:34 <Muad_AFK> hey all
05:14:16 <Heffalump> hi
05:14:21 <Muad_AFK> ltns
05:14:22 <Muad_AFK> sup?
05:15:01 <Heffalump> not much
05:15:42 <Heffalump> you?
05:15:51 <Muad_AFK> started with haskell again for school
05:16:00 <Muad_AFK> though i do not think parsers particularly funny :P
05:18:21 * ayrnieu looks at 'ltns' for a while.
05:18:46 * Muad_AFK stares at ayrnieu
06:34:21 <Heffalump> was it someone here that told me what "nub" stood for a while back?
06:46:29 <o3> Heffalump: what does it stand for?
06:47:57 <Heffalump> I don't know
06:48:26 <Heffalump> someone somewhere told me (with historical believability too) but I can't remember what they said
07:41:56 <tinus> Recepten2> parse_result (actie "test de eieren")
07:41:56 <tinus> "zsh: 20012 segmentation fault  hugs Recepten2.hs
07:42:02 <tinus> hehe, "oops" :)
07:42:58 <Igloo> :-)
07:43:15 <Igloo> That's reasonably likely to be unbounded recursion
07:43:46 <tinus> yeah, i think it is
07:44:03 <tinus> i need to get rid of this many that results into a list of parsers
07:44:07 <tinus> instead of a single parser
07:44:37 <tinus> Recepten2> parse_result (actie "this is a test")
07:44:37 <tinus> "this is"
07:44:48 <tinus> i need the rest, too, heh
07:44:57 <tinus> actie = (\x y -> x++y) <$> identifier <*> option ((\x y -> x++y) <$> spaces <*> identifier) ""  
07:45:07 <tinus> ofcourse, i'd use 'many'
07:47:01 <ayrnieu> What 'many' are you dealing with that results in a list of parsers that you want to get rid of?
07:47:14 <Igloo> Does identifier successfully parse the empty string?
07:47:30 <tinus> Igloo: identifier stops at spaces
07:47:53 <Igloo> That's not what I asked
07:48:36 <tinus> oh, no, it does not
07:48:58 <Igloo> Ah, OK
07:49:41 <tinus> concatMap might work
07:52:20 <tinus> hmm
07:52:44 <tinus> ayrnieu: oh, btw:
07:52:47 <tinus> many    :: Parser s a  -> Parser s [a]
07:52:47 <tinus> many p  =  list <$> p <*> many p <|> succeed []
07:55:44 <ayrnieu> tinus - that's interesting, but I was mostly interested in "i need to get rid of this many that results into a list of parsers / instead of a single parser" and the following code (which did not use many).
07:56:10 <ayrnieu> (Actually, I think I'll stop responding to statements which aren't directed at me.)
07:56:35 <tinus> hmm, no
07:56:51 <tinus> it's prolly me not understanding the question :)
07:57:37 <tinus> actie = (\x y -> x++y) <$> identifier <*> many (option ((\x y -> x++y) <$> spaces <*> identifier) "")
07:57:41 <ayrnieu> Since I was only guessing at your question, the blame can't be all yours.
07:57:42 <tinus> this uses many
07:57:56 <ayrnieu> OK.
07:58:10 <tinus> but then the (\x y -> x++y) part is wrong
07:58:19 <tinus> since y is a list of Parsers
07:58:26 <tinus> instead of the value
07:58:32 <tinus> if i understand correctly
07:58:51 <ayrnieu> What do you want to do with the list of parsers?
07:59:01 <tinus> well
07:59:19 <tinus> the old one w/o using many:
07:59:20 <tinus> Recepten2> parse_result (actie "this is a test")
07:59:20 <tinus> "this is"
07:59:33 <tinus> i'd rather want "this is a test" as a result
07:59:44 <tinus> so i though i'd use many (option ...)
08:00:38 <tinus> sounds reasonable, no?
08:00:54 <ayrnieu> I don't know.  How does your desire correspond to a function upon the list of parsers?
08:01:35 <tinus> not sure what you mean
08:02:17 <tinus> but sine "this is a test" is an identifier <*> spaces <*> identifier <*> spaces <*> identifier
08:02:38 <ayrnieu> Oh, I see.
08:03:40 <ayrnieu> actie = ??? <$> many word where word = identifier <*> spaces -- somethinglike
08:05:16 <ayrnieu> I confess, I don't understand how your LHS of <$> relates to your RHS, except that the LHS seems to take as many arguments as the RHS has parsers.
08:05:31 <tinus> uh huh
08:06:47 <ayrnieu> foo = (\a -> a) <$> identifier; bar = (\a b -> a ++ b) <$> identifier <*> identifier
08:08:01 <ayrnieu> actie = (\xs -> concat xs) <$> many (identifier <*> spaces)
08:09:10 <ayrnieu> or: actie = (\x y -> x ++ concat y) <$> identifier <*> many (option ((\x y -> x++y) <$> spaces <*> identifier) "")
08:11:09 <tinus> the last one i figured, but doesn't work either
08:11:40 <ayrnieu> Oh?  That's too bad.
08:11:48 <tinus> neither does the rest ..
08:12:16 <tinus> hmm
08:28:33 <tinus> hmm, first f00d
13:07:15 <lament> hm
13:08:00 <lament> at least according to the Computer Language Shootout, ocaml is very fast (almost like C), and haskell (ghc) is very slow.
13:08:01 <Igloo> Hello
13:08:15 <lament> Is that a problem with GHC, or is there something about haskell that makes it inherently slower?
13:08:29 <Igloo> IO sucks in GHC
13:08:40 <Igloo> Laziness can cause speed problems
13:08:50 <lament> hmm
13:08:58 <lament> i thought it's supposed to speed things up :)
13:09:07 * Igloo remembers I was going to get some numbers for double arithmetic speed and goes to do so
13:09:25 <lament> indeed that's what haskell.org says
13:09:36 <Igloo> haskell.org says what?
13:09:57 <lament> hm, can't find it.
13:10:04 <lament> That laziness is supposed to speed things up.
13:10:23 <Igloo> Laziness will only give you a speedup if you write code that would otherwise calculate things you don't want
13:13:14 <lament> i.e. "laziness only helps if you write bad code"? :)
13:15:00 <ayrnieu> laziness only helps if you write code that laziness would help.
13:15:20 <lament> that's reasonable.
13:15:35 <ayrnieu> Interestingly enough, laziness helps all kinds of code.
13:15:56 <lament> GHC still fares badly on the Shootout tests :)
13:16:22 <Marvin--> ayrnieu: speaking in tautologies, are we? ;)
14:06:38 <TheOtherRainer> I'm trying to use overloading for this problem: the same identifier f for 2 different type cases a->[a]->[a] and [a]->[a]->[a]. I know a little about functor- and multi param classes, but it seems like "class X a b" and any functor class only fits for case 2.
14:09:55 <TheOtherRainer> All I want is being able to write e.g. f 'a' "xyz" and f "abc" "xyz" 
14:22:10 <Marvin--> TheOtherRainer: sounds tricky
14:22:31 <TheOtherRainer> do u understand what i mean? My english is clumsy
14:23:05 <Marvin--> I think I do
14:23:53 <Marvin--> the standard way to make overloading for list types is to have instance T a => T [a]
14:24:11 <Marvin--> so you'd define it for Char, and for generic lists
14:24:52 <Marvin--> the problem here is that you can't unify a -> [a] -> [a] with [a] -> [a] -> [a]
14:25:31 <tinus> damn, another segfault
14:25:53 <TheOtherRainer> any solution?
14:27:00 <Marvin--> TheOtherRainer: well, if you're only going to use it for strings anyway, you can have the type a -> String -> String
14:27:16 <Igloo> What does the function do differently?
14:28:03 <TheOtherRainer> At least I'm glad it's not just being stupid but a more harder problem:)
14:28:08 <Marvin--> TheOtherRainer: but why not just put the character c in brackets, like [c], on the single-character case? (Provided the two cases don't do vastly different things)
14:28:19 <TheOtherRainer> err: not me being
14:29:19 <TheOtherRainer> because thats not the same thing, im just trying to learn
14:29:51 <TheOtherRainer> I thought there would be an elegant solution
14:31:17 <TheOtherRainer> do u mean making the distinction of the cases in one and the same function?
14:31:49 <Marvin--> well, the way I see type classes, is that they don't solve a general overloading problem, they say something about a type (for example Eq a says that the type a can be compared for equality)
14:32:58 <TheOtherRainer> So you say their main goal is not for overloading?
14:40:07 <Marvin--> yes they are for overloading, but not arbitrary overloading :)
14:40:29 <TheOtherRainer> not arbitrary...damn, i see
14:45:03 <TheOtherRainer> Maybe I should carefully read the type extension docu in ghc, thx for the help.
14:57:08 <tinus> hah, the reason for my manyproblems was because one time my teacher uses , and the other time a . to note 0.5 ...
15:04:10 <Igloo> :-)
15:12:01 * tinus sends mail
15:12:07 <tinus> anyways, parser works fine now
15:12:15 <tinus> thanks for all the help, guys :)
15:59:33 * Igloo splutters as I hit upon the performance problem I had and go from 7 times slower than C to 5 times faster
16:00:16 <Heffalump> really???
16:00:21 <Heffalump> what was the problem?
16:00:33 <Igloo> Yeah - I suspect the unrolling is the cause of the speed increase
16:00:52 <Heffalump> oh, the C version isn't unrolled
16:01:01 <Heffalump> so what gave you a 35x factor?
16:01:05 <Igloo> Not entirely sure, going to narrow it down now
16:02:00 * Igloo still can't quite believe the results and is convinced I screwed something up  :-)
16:18:29 <Igloo> Wow, looks like a > x20 speedup for using z*z rather than z^(2 :: Int)
16:19:19 <Heffalump> ouch!
16:21:04 * Igloo suspects boxing could be the problem
17:08:33 <Heffalump> hiya
17:16:53 <Chilli> Hi Heffalump
17:16:59 <Heffalump> how's life?
17:17:39 <Chilli> Pretty chaotic: its end-of-session/exam time here
17:17:50 <Heffalump> ah :/
17:18:00 <Heffalump> we're in the penultimate week of term here
17:18:05 <Heffalump> but no exams
17:18:46 <Igloo> Hey Chilli
17:20:05 <Chilli> Hi Igloo
17:22:29 <Chilli> So, how is it going in Oxford?
17:22:59 <Igloo> In about 3 minutes it might be going very well indeed  :-)
17:23:04 <Heffalump> heh
17:23:30 <Heffalump> it's going ok
17:23:44 <Chilli> Igloo: ?
17:23:48 * Heffalump has to do admissions interviews (which are quite a big deal here) in three weeks time and I haven't done them before
17:24:21 <Igloo> If I'm lucky I'm about to build a Fraskell that's faster than my C
17:24:23 <Chilli> Heffalump: how many do you have to do?
17:24:29 <Heffalump> probably about 15
17:24:36 <Chilli> Igloo: that's cool!
17:24:48 <Igloo> I suspect I'll need to do the de-Complexifying too, though, which would be a PITA
17:24:53 <Chilli> Heffalump: so, the, that's going to take quite a while...
17:25:08 <Heffalump> chilli: well, 30 mins per interview, so not too bad
17:25:18 <Heffalump> my boss had to do 43 on his own last year over three days
17:25:27 <Chilli> urgg
17:25:39 <Chilli> that's Oege?
17:25:58 <Heffalump> no, different boss
17:26:03 <Chilli> ah
17:26:15 <Heffalump> Gavin Lowe, does security research
17:26:30 <Chilli> don't know him
17:26:31 <Igloo> Damn, I was right
17:26:35 <Heffalump> (Oege is my "research" boss, Gavin is my "teaching" boss a sense)
17:26:38 <Chilli> faster?
17:26:41 <Heffalump> igloo: it was too good to be true? :(
17:26:55 <Igloo> Need the de-Complifying too I think
17:27:02 <Heffalump> ah
17:33:25 <Chilli> Igloo: what do you mean by de-Compelxify? Explicitly use two scalars instead of values of type Complex?
17:36:04 <Igloo> Yup
17:36:29 <Chilli> hmm, GHC should be able to do that
17:37:00 <Chilli> but, I think, you need to use -O2 (to get constructor specialisation)
17:37:14 <Chilli> and make sure that everything is strict enough
17:37:45 <Igloo> I'm using that. It could be something else as my hand-optimised code is quite different to what I can generate. I'll experiment more.
18:09:08 <Igloo> Chilli, do you know why cvtd (Val (Pvar s) body ds) has been broken as a special case in ghc/compiler/hsSyn/Convert.lhs?
18:24:40 <Chilli> Igloo: hmm, having a look
18:27:42 <Igloo> Ta
18:32:02 <Chilli> The reason that it is special cased is due to the way GHC represents Haskell bindings internally
18:32:35 <Chilli> If you have a look at HsBinds.lhs and the comments at the constructor FunMonoBind
18:33:06 <Chilli> you'll see that it requires simple variable bindings to be represented as FunMonoBind, nto as a PatMonoBind
18:33:22 <Chilli> now, the second question is why the code in Convert just barfs on this case
18:34:02 <Igloo> Well, I don't see why it shouldn't work as a pattern, possibily inefficiently
18:34:16 <Igloo> I suspect it's because Simon never got round to writing code for it and has forgotten about it  :-)
18:34:18 <Chilli> my guess would be that it's some of Tim Sheard's code, which rather consistently seems to be fully of uncovered cases
18:35:04 <Chilli> it is essentially about the difference between Match and GRHS
18:35:04 <Igloo> Should be fairly easy, anyway, but I think I'll have gone to bed by the time this compile is done so it can wait until tomorrow  :-)
18:35:16 <Chilli> Match is more general
18:36:35 <Chilli> but I agree with you that it seems as if implementing it as a PatMonoBind should be ok, too
18:37:04 <Chilli> however, I am not sure whether the compiler somewhere downstream makes any assumptions about how simple variable bindings are represented
18:37:35 <Igloo> Hmmm, yeah
