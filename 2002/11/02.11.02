01:02:07 <jcore> hello, I know you probably get this a lot, but I'm new and I can't figure out why I'm getting this error...
01:02:24 <jcore> ERROR "cal.hs":17 - Syntax error in declaration (unexpected `;', possibly due to bad layout)
01:02:33 <jcore> http://arbornet.org/~jcore/code/kalendaro.hs
01:02:40 <jcore> any help would be appreciated
01:05:21 <ludde> what language is that?
01:05:42 <jcore> Esperanto
01:05:49 <jcore> sorry about that, I know it makes it a headache
01:06:03 <ludde> try `mod`
01:06:15 <ludde> esperanto, cool
01:06:23 <ludde> is that your native language?
01:06:56 <jcore> nah, English is my native language, but I'm trying to make my programs machine-translatable
01:07:05 <jcore> which is easier to do using Esperanto as a base ;)
01:07:05 <ludde> oh, esperanto is?
01:07:18 <jcore> not as good as some, like lojban
01:07:37 <jcore> but much better than using English
01:07:40 <ludde> ok :)
01:07:48 <ludde> you have
01:07:48 <ludde> jan1 j  = (365 * x + x `div` 4 - x `div` 100 + x `div` 400 + 1) mod 7
01:07:49 <ludde> that should be
01:07:53 <ludde> jan1 j  = (365 * x + x `div` 4 - x `div` 100 + x `div` 400 + 1) `mod` 7
01:07:54 <ludde> i think
01:07:56 <jcore> OH! I see it now
01:08:00 * jcore punches himself in the stomach
01:08:22 <jcore> crud, I did a lot of those wrong
01:08:30 <ludde> search'n'replace :)
01:08:35 <jcore> :)
01:08:42 <jcore> I shouldn't write code late at night, this always happens
01:08:50 <jcore> of course, second haskell program and all...
01:08:55 <ludde> :)
01:09:22 <ludde> your name is "Kricxjo Forno", or is that the esperando version of the name?
01:09:28 <ludde> esperanto
01:10:04 <jcore> it's the Esperanto version of Chris, the last name I left the same
01:10:15 <ludde> hehe, okay
01:10:28 <jcore> the x's are there instead of using circumflexed letters
01:10:36 <ludde> does the written esperante correspond exactly to how you pronounce it?
01:10:41 <jcore> yep
01:10:44 <ludde> gah, esperanto
01:10:48 <jcore> heh heh heh
01:11:00 <jcore> esperanto.net if you want to know more
01:11:10 <ludde> ok :)
01:11:19 <jcore> I found out about it a month or so ago and I'm a complete convert/believer/zealot/whathaveyou
01:11:22 <ludde> but i guess i'd rather fill my brain with more useful stuff than a new language
01:11:29 * jcore shrugs
01:11:47 <ludde> it's like spanish?
01:11:49 <jcore> I just decided to learn it so that I could stay at people's houses in other countries for free
01:12:08 <jcore> it has roots in latin, but it's completely regular, so it's about 5 times easier than Spanish
01:12:43 <jcore> argh, now I'm getting the same error on the next line, but I'm going to try and figure this out
01:13:00 <jcore> it's tough using a book that gives the example code in a stylized form
01:13:10 <jcore> and then trying to figure out how it should be typed
01:13:34 <ludde> esperanto is more widespread than lojban?
01:13:55 <jcore> yeh, about 2 million speakers
01:15:19 <jcore> once I know enough esperanto and haskell I'm going to try and work on text-to-speech and computer translation
01:15:55 <jcore> I think the text-to-speech should be pretty easy due to the regular pronunciation (including the same accents...second-to-last syllable of each word)
01:16:20 <ludde> hehe, okay
01:25:15 <ludde> esperanto pronounciation seems quite easy
01:25:27 <ludde> but i don't like to learn all words
01:30:43 * jcore shrugs
01:30:49 <jcore> they say there's about 800 base words
01:31:17 <jcore> I appreciate the help you've given so far...and I have another question...
01:32:26 <jcore> how do I define combinators?  what's the syntax?
01:32:39 <jcore> on line 47 on I just transcribed it straight from the book
01:32:45 <jcore> perhaps they also need backticks?
01:34:50 <dennisb> you need backticks for normal identifiers or use operator names like <+> that is allways infix
01:35:16 <jcore> ok
01:36:12 <dennisb> It would be hard to parse haskell otherwise
01:36:59 <jcore> I think I understand, hugs isn't complaining anymore, but I wonder why the book would have put them in bold like they were a keyword or operator
01:37:25 <dennisb> that is strange, what book is that?
01:38:27 <jcore> _Introduction to Functional Programming using Haskell_, second edition
01:40:39 <dennisb> I havn't read it, but I'am surprised that an introduction book would do that. It only confuses the beginner
01:42:03 <jcore> the book is very confusing, but I think maybe it's 20% the book and 80% my mind trying to fit itself around functional programming after years of imperative programming
01:42:36 <jcore> but it also seems like a very good book, strong in theory, I like it more than _The Haskell School of Expression_
02:02:53 <jcore> ok, I think I'm past the stupid errors
02:03:04 <jcore> but now I'm having a problem with the type system
02:03:16 <jcore> *** Type           : Alteco -> [(Int,Int,[[Char]])] -> (Int,Int,[[Char]])
02:03:16 <jcore> *** Does not match : Alteco -> [[Bildo]] -> Bildo
02:03:47 <jcore> I declared a type "type Bildo    = (Alteco, Largxeco, [[Char]])"
02:04:03 <jcore> and Alteco/Largxeco are type Int
02:08:29 <jcore> oh, I see the problem, sorry
02:08:37 <ludde> hrm
02:08:42 <dennisb> yes, double list in the second argument
02:08:54 <ludde> esperanto has both Aux and Ux
02:09:18 <ludde> so how do you know how to pronounce: hodiaux
02:10:19 <jcore> "ho" "dee" "ow", ux is not alone as far as I know
02:10:32 <ludde> Ux -- pronounced like the W in BROW. hodiaux, Euxropo 
02:10:36 <jcore> any vowel with ux following gets the ux sound
02:10:48 <ludde> ok
02:10:49 <jcore> ah to ew quickly I guess
02:10:57 <ludde> ?
02:10:59 <ludde> ah
02:11:32 <ludde> "ho" "dee" "ow"  v.s. morgaux = "mor" "gow"
02:11:44 <ludde> in hodiaux, you put the tone on the "i", right?
02:11:54 <jcore> maybe "ho" "dee" "a-ow" would fit better
02:12:08 <jcore> you know, that's a good question!
02:12:12 <ludde> http://www.webcom.com/~donh/ecourse/esounds/Ux-hodia.au
02:12:12 <jcore> I believe so
02:12:23 <ludde> but i is not next to last :)
02:12:29 <jcore> since the aux gets pronounced as once syllable
02:12:48 <ludde> heh, first exception :)
02:13:01 <jcore> yes, there are some exceptions I guess ;)
02:15:27 <jcore> stakigiPer a = foldr1 (o)
02:15:28 <jcore>                where p `o` q = p `super` (blanka (a, largxeco q) `super` q)
02:15:31 <jcore> is that allowable?
02:16:06 <jcore> the book uses a symbol that's a circle with a plus in it (variable operator it seems)
02:16:21 <ludde> (+)
02:16:22 <ludde> ?
02:16:27 <ludde> ah
02:16:58 <ludde> i don't think you can do it like that
02:17:05 <ludde> it should be "foldr1 o" i think
02:18:00 <jcore> ok, hrm, but it still doesn't fix the type error, I'm going to have to dig deeper
02:18:40 <dennisb> o and (o) are the same
02:18:44 <ludde> oh
02:19:20 <dennisb> if you put an operator (like +) inside () then it turns into a normal function
02:19:24 <dennisb> (+) 2 3
02:19:31 <jcore> yeh, I got that part
02:19:44 <jcore> I may have to work this one out on paper to find out where it's going wrong
02:25:29 <jcore> I think it's time to call it quits for the night, thanks for the help guys
05:47:32 <Igloo> Hmmm, my modified GHC segfaults trying to compile something. I'm confused.
06:47:09 <Segora> re
06:50:57 <dark> There.  I made a Util.Posoid module that wraps Posix and gives reasonable error messages :)
08:49:28 <dark> I just calculated, I've been doing 75 lines per day this past week :)
08:50:52 <dark> But it's 170 lines per day since the start of the project.
08:55:51 <ludde> 75 lines per day? how many hours is a day?
08:56:44 <dark> I'm not sure :)
08:57:21 <dark> I didn't do anything else those days, though, except occasional gaming when I got frustrated, and girlfriend-related activities.
10:23:53 <jadrian> hello
10:27:16 <jcore> %sigh%, I don't think Richard Bird even proof-read some of his examples :/
10:28:06 <jadrian> tell him that :P
10:28:30 <jcore> what, he's here? ;)
10:28:38 <jcore> I'm too lazy to email someone
10:28:45 <jcore> and I'm still afraid I'd be wrong somehow
10:28:53 <jadrian> lol
10:28:55 <jadrian> :)
10:29:09 * jadrian is thinking about ST and ST Lazy...
10:29:37 <jadrian> hmmmm
10:30:29 <jadrian> brb
10:52:54 <jadrian> hmmm
10:53:50 <jadrian> so a strict ST maintains an evaluated state and a Lazy ST an unevaluated state right...
10:54:25 <jadrian> I got to go thing about space leaks
11:00:23 <dark> heap profiling is your friend :-)
11:02:55 <jadrian> mmm nah
11:03:21 <jadrian> I have not coded the algorithm yet
11:03:30 <jadrian> so I can't really use heap profiling at this stage
11:03:32 <jadrian> ;)
11:03:44 <jadrian> right now I'm thinking about the most adequate way to code it...
11:05:14 <jadrian> and I'm having a hard time deciding what's best...
11:06:11 <jadrian> I want to generate a list with the status of the algorithm in each step
11:06:39 <jadrian> I was thinking about maintainging that status in an STRef 
11:07:13 <jadrian> but that way, I cannot use streaming
11:07:32 <jadrian> I think
11:07:34 <jadrian> argh
11:07:37 <jadrian> brb
11:07:39 <jadrian> or bbl
11:41:56 <dark> nullfd = unsafePerformIO (openFd "/dev/null" ReadOnly Nothing defaultFileFlags)
11:42:03 <dark> I wonder if this is Evil, or just evil.
13:56:35 <dark> Gah, the Posix module lists all access modes except S_ISVTX.  And FileMode is exported abstract.
15:53:10 <tez>  /quit
17:09:45 <jadrian> hi all
17:10:08 <dark> Greetings
17:10:19 <jadrian> hey dark
17:10:38 <jadrian> dark, are you experienced with manidc algorithms?
17:10:47 <jadrian> monadic even
17:10:55 <jadrian> keeping track of state
17:11:11 <jadrian> handling side effects
17:11:12 <jadrian> etc
17:12:12 <jadrian> I'd like to talk to someone more experienced than me...
17:12:33 <dark> Depends on how you mean :)  I use them a lot, but I've made only one monad myself.
17:12:54 <jadrian> well I got lots of questions in my mind, but it all starts like this
17:13:32 <jadrian> In situations where I want a complete trace of some programe of mine, I usually go for streaming
17:13:49 <jadrian> that is, I generate an infinite list with all iterations
17:14:10 <jadrian> I consume the pice I want
17:14:33 <jadrian> that's quite nice...
17:15:13 <jadrian> Using lazy evaluation I can just generate the list and then write the result to some file
17:15:38 <jadrian> and the actuall sequence is iterate, write, iterate, write
17:15:39 <jadrian> ok
17:15:44 <jadrian> now I'm using a monad
17:16:14 <jadrian> so the best I can have is a list of [ST Something]
17:16:55 <jadrian> wait, not a good choice...
17:17:17 <jadrian> cause I could simply runST
17:17:19 <jadrian> mmm
17:17:24 <jadrian> so the best I can have is a list of [IO Something]
17:17:25 <jadrian> :)
17:17:52 <jadrian> can I still work that way?
17:18:05 <jadrian> ok now I want to takeWhile something
17:18:17 <jadrian> I'd need to define my own takeWhileM
17:19:00 <jadrian> m Bool->[m a]->[m a]
17:19:18 <jadrian> is this a usuall pattern?
17:19:27 <jadrian> do people 'do' this kind of stuff
17:19:38 <jadrian> I'm just afraid I'm going the wrong path
17:20:21 <jadrian> ....
17:20:25 <jadrian> ok another doubt
17:20:50 <jadrian> I was thinking about mainataining my state using  ST/IO Refs
17:20:57 <dark> Sorry for the delay, I was off writing a changelog entry :)
17:21:01 <jadrian> I'd use them as implicit parameters
17:21:09 <jadrian> dark: no prob ;)
17:21:31 <dark> Are you asking how to run a [IO a] list?
17:21:42 <jadrian> no
17:21:47 <jadrian> I know about sequence_
17:21:56 <jadrian> I don't want to run it
17:22:01 <jadrian> I want to run part of it
17:22:05 <dark> Hmm, one trick I've seen with IORefs, but I don't know how portable it is, is in GHC's System.Random.
17:22:25 <jadrian> I don't care about portability, but that IORefs stuff is a separate question
17:22:38 <jadrian> the thing is, you know that streaming srtategy right?
17:22:59 <jadrian> in imperative languages you write stuff to a file as you calculate it
17:23:15 <jadrian> in here you just generate the whole trace and 'then' write it
17:23:23 <dark> theStdGen uses unsafePerformIO to create a single IORef that's visible on the top-level, and access to it is then wrapped in setStdGen and getStdGen.  Result: global variable.
17:23:43 <jadrian> so it only calculates it when you need to write it, do to lazy eval
17:23:48 <jadrian> dark: I don't like that
17:23:54 <jadrian> but that's not a problem 
17:24:06 <jadrian> I would use IORefs as implicit parameters
17:24:22 <dark> jadrian: Ah, and sequence_ evaluates its whole list.
17:24:27 <jadrian> yes
17:24:34 <jadrian> so my point is
17:24:45 <jadrian> I could generate a [IO something]
17:24:57 <jadrian> and write myself some takeWhileM
17:25:07 <jadrian> but my point is
17:25:12 <jadrian> am I on the write track?
17:25:35 <jadrian> do people do this
17:26:07 <jadrian> is there a better way to get the trace of my program?
17:26:27 <dark> Hmm... I've done something similar once, with a firstJustM.  It would take a list of [IO (Maybe a)], and evaluate elements until it found the first (Just a).
17:27:09 <jadrian> yeap it's the same...
17:27:22 <jadrian> I find it weird that there are no 
17:27:24 <dark> How important is this trace?  Is it the main point of running the program, or is it just a little side-effect so you can keep your eye on its progress?
17:27:25 <jadrian> repeatM
17:27:44 <jadrian> dark: ah! nice question
17:28:19 <dark> foldM loops, but it's not conditional :)
17:28:53 <jadrian> well this is kind of a search algorithm
17:29:23 <jadrian> so you usually just wanto to start somewhere and end up elsewhere
17:29:30 <jadrian> but I want to get all the moves
17:29:43 <jadrian> to analize the algorithm
17:29:58 <jadrian> imagine something like printing all the info as it runs
17:30:07 <jadrian> I usually do that streaming
17:30:55 <dark> Hmm... one alternative is to use Debug.Trace and its "trace" function.  It's not in IO, and it doesn't interfere with strictness much.  I've found it helpful for finding out what's going on inside my algorithm and why is it taking half an hour :)
17:31:00 <jadrian> no no no
17:31:17 <jadrian> it's far more complicated that that :)
17:31:23 <jadrian> I'm simplifying things
17:31:31 <jadrian> I wouldn't like to do that...
17:32:06 <dark> If your algorithm itself related to IO, or do you only need IO to do the printing?
17:32:35 <jadrian> well right now I want to keep it simple... it will have a state, and no outter world effects
17:32:54 <jadrian> It would be nice if I could send info in run time, to change the algorithm behaviour though
17:33:01 <jadrian> (at a much more advanced stage)
17:33:08 <dark> And you can't simply return the list you want as part of the result?
17:33:53 <jadrian> you mean:
17:34:08 <jadrian> l<- sequence myresult
17:34:17 <jadrian> takeWhile something l
17:34:17 <jadrian> ?
17:35:01 <dark> Oh, yeah, your algorithm itself has state and is monadic :)
17:35:15 <dark> Hmm, there _is_ a lazy version of ST.
17:35:23 <jadrian> I know...
17:35:27 <jadrian> but I might need IO
17:35:30 <dark> I use the State monad myself (from Control.Monad.State), I think it's also lazy.
17:35:33 <jadrian> so I don't want to rely on that
17:35:47 <dark> And in one program I use StateT World IO everywhere :)
17:35:47 <jadrian> I thought about using State
17:35:58 <jadrian> StateT
17:35:59 <jadrian> ?
17:36:02 <jadrian> I don't know that
17:36:32 <jadrian> I've thought about using state... but I don't know if it is a good idea...
17:36:47 <jadrian> cause I'll have two separate entities running
17:36:51 <jadrian> and they'll interact
17:36:54 <dark> jadrian: StateT is a monad transformer.  You can put it on top of another monad to add the state operations (get, set, modify) to it.
17:37:02 <jadrian> ah
17:37:04 <jadrian> let me see
17:37:10 <dark> It's also defined in Control.Monad.State.  Monad transformers are cool :)  You can stack as many as you want.
17:37:15 <jadrian> (I've ran away from monad transformers so far)
17:37:16 <jadrian> :)
17:37:41 <jadrian> hmmm but is StateT in the ghc libs?
17:38:01 <dark> jadrian: Yep, at least I have it here in ghc 5.04
17:38:20 <jadrian> dark: I have 5.04
17:38:35 <jadrian> yeap it is
17:38:59 <jadrian> argh... I've been trying to avoid this :)
17:39:02 <dark> You can use liftIO to access the IO functions from it.  (Or just lift if you have StateT directly on I)
17:39:09 <dark> Nah, monad transformers are fun :)
17:39:16 <jadrian> no they're not! :)
17:39:56 <dark> Anyway, it's not the only way :)
17:40:27 <jadrian> I still have some issues with analizing state
17:40:31 <dark> Your takeWhileM approach sounds like it'll work, but you might lose some laziness if you keep your state in an IORef.
17:40:51 <jadrian> ah
17:40:57 <jadrian> I was going to talk about that
17:40:59 <jadrian> well, no
17:41:23 <jadrian> the thing I was going to talk about now is really something that is *not* in a refernce
17:41:26 <jadrian> imagine this
17:41:35 <jadrian> iterate f p0
17:41:48 <jadrian> my problem is:
17:41:53 <jadrian> f is monadic
17:42:23 <jadrian> now I have another problem
17:42:36 <jadrian> one thing are the values of all the iterations
17:42:39 <jadrian> p0
17:42:42 <jadrian> f p0
17:42:47 <jadrian> f (f p0)
17:42:48 <jadrian> etc
17:43:17 <jadrian> another thing (and I didn't want to mix things), are other things I want to keep track of
17:43:48 <jadrian> I could simply pair my results with those other things, but I don't like that
17:44:15 <jadrian> I thought about keeping track of that in a ST/IORef, but seems like a terrible idea... :(
17:45:00 <dark> Hmm, this sounds like the same problem that Parsec needs to solve, to return a parse tree but also return warnings.
17:45:15 <dark> When I was faced with such a problem the only thing I new was to pair the result with a warnings list :)
17:45:22 <jadrian> ah, seems similar...
17:45:30 <jadrian> and this is just the top of the iceberg
17:45:45 <jadrian> I would love to be able to change my algorithms behaveour in run time
17:45:55 <jadrian> that's why I was going for IORefs
17:46:21 <jadrian> I wanted to see if I could, some way, send info to my program
17:46:46 <jadrian> change some parameters in run time
17:47:32 <dark> Hmm.. I think Heffalump was talking about that yesterday, regarding a mandelbrot program.
17:48:14 <dark> One way to handle it might be to use Concurrent Haskell, and run the calculations in one thread, and have it store side information in MVars, which are inspected and displayed by another thread :) 
17:48:43 <jadrian> Hmmm that could be slightly different (Heffalumps program)
17:48:59 <jadrian> hmm an dmaybe not...
17:49:00 <dark> Yeah, but he wanted to be able to move and zoom :)
17:49:07 <jadrian> yes I see...
17:49:14 <jadrian> yes it is close to what I want
17:49:31 <jadrian> MVars
17:49:33 <dark> I think he's using Concurrent Haskell, that's why I thought of it.
17:49:59 <dark> GHC.Handle has some example uses of MVars, to implement Handles :)
17:50:23 <dark> But it might be too hairy code to be a good example.  It's all mixed up with low-level IO.
17:50:49 <jadrian> ah this could be it... I think
17:51:13 <jadrian> so it would inspect the MVar
17:51:17 <jadrian> and if it had info
17:51:26 <jadrian> it would change the parameters in the IORef
17:51:27 <jadrian> right?
17:53:20 <jadrian> in fact
17:53:30 <jadrian> my program should use Concurrency...
17:54:02 <jadrian> but I want to keep things simple now
17:54:30 <dark> Hmm, I think an MVar is like an IORef itself.
17:55:18 <dark> Your function could put temporary results into it and then forget about them, and another thread can then do something with those results.  
17:55:31 <jadrian> yes exactly
17:55:54 <dark> Then an MVar designed for the other direction can be used to inform the big function about changed parameters.
17:56:08 <dark> And the big function could check it at certain times, at "stopping points" in the calculation.
17:56:40 <jadrian> yeap
17:56:52 <dark> So the only problem is that you'll have to write a multithreaded program :-)
17:57:02 <jadrian> and I'm using those parameters as global variables
17:57:07 <dark> It's probably not difficult, but I haven't looked at that part of Haskell yet.
17:57:17 <jadrian> and I obtain that using IORefs in implicit parameters
17:57:28 <jadrian> well like I said I should actually use concurrency
17:57:34 <jadrian> but I want to keep it simple now
17:58:09 <jadrian> Thanks for putting up with my dark!
17:58:16 <jadrian> got to rest 
17:58:19 <jadrian> 2am
17:58:20 <jadrian> :(
17:58:26 <jadrian> s/my/me
17:58:52 <jadrian> bye!
17:59:14 <dark> It's 4 am here :)
17:59:18 <dark> I should go to bed too.
17:59:19 <jadrian> wow!
17:59:22 <jadrian> :)
17:59:40 <jadrian> maybe... ;)
17:59:41 <jadrian> see ya
22:47:38 <bronaugh> hmm.
22:47:44 <bronaugh> q: how do you comment stuff out in Haskell?
23:00:04 <bronaugh> better question: why doesn't this code work, and how can it be made to work as intended?
23:00:07 <bronaugh> max_consec:: [Int] -> Int
23:00:08 <bronaugh> max_consec(x:xs)
23:00:13 <bronaugh>   | x == xs = max_consec xs
23:00:22 <bronaugh>   | otherwise = x
23:00:49 <dennisb> bronaugh: I guess you found the comments, it's -- ......  or multiline {- ........ -}
23:01:11 <dennisb> what should the code do?
23:01:34 <bronaugh> in the way it's written there, it's meaningless.
23:01:43 <dennisb> Well, I see a type error in it
23:01:46 <bronaugh> change x to x + 1, and it should return the last number of a consecuritev series.
23:01:54 <bronaugh> yeah, there's a glaring type error in it.
23:02:00 <bronaugh> I'm just not sure how the hell to write it.
23:02:40 <dennisb> well, I don't understand exactly what it should do. But you can not compare x == xs, x is an element and xs is a list
23:03:08 <bronaugh> yeah, I realized that.
23:03:35 <bronaugh> could I somehow compare just the data in the head nodes of each of those lists?
23:04:17 <dennisb> there is only one list
23:04:58 <bronaugh> x is a singleton list.
23:05:03 <dennisb> no
23:05:09 <dennisb> x is an Int
23:05:36 <bronaugh> ahh
23:05:43 <bronaugh> ok, I understand one way I could do this.
23:06:14 <bronaugh> I could pass in the previous head as a parameter.
23:06:17 <bronaugh> but that's not very nice
23:06:40 <bronaugh> I could also use !!
23:06:54 <bronaugh> but I imagine there's a nicer way to just extract the head of the list...
23:07:37 <dennisb> to get the first element of a list you could use the function head, or pattern match in an other way
23:07:54 <bronaugh> pattern match in another way?
23:08:29 <dennisb> here is a pattern that matches lists with two elements (a:b:xs)
23:08:43 <bronaugh> ohH!
23:08:45 <bronaugh> neat
23:09:10 <bronaugh> but then the recursion will break, yes or no?
23:09:30 <dennisb> well, you might need another basecase perhaps
23:10:13 <bronaugh> sorry, it's going to take a while to get my head out of imperative-land...
23:10:58 <dennisb> btw, when I said "matches lists with two elements" above I should have said at least two elements 
23:11:12 <bronaugh> yeah.
23:11:13 <dennisb> Here is a pattern that matches exactly two elements [x,y]
23:12:17 <bronaugh> is there anything particularly wrong with using head in this case?
23:13:07 <dennisb> no
23:13:24 <bronaugh> alrighty.
23:13:27 <dennisb> but I still don't know exactly what the function should do, I just answere in a general way :-)
23:13:27 <bronaugh> that's how it ends up nice.
23:13:45 <bronaugh> here, I'll paste code.
23:13:46 <dennisb> head you can only use if you know that the list is non-empty
23:13:50 <bronaugh> | x + 1 == head xs = max_consec xs
23:13:54 <bronaugh> | otherwise = x
23:14:13 <bronaugh> I guess I should have a case for an empty list too
23:14:55 <bronaugh> how could I test for an empty list?
23:15:03 <dennisb> I guess so, the pattern is not up there
23:15:12 <dennisb> pattermatch with the patter []
23:15:22 <dennisb> or use the null function
23:15:28 <bronaugh> dennisb: sorry for being clueless, but how would I do that?
23:15:31 <bronaugh> pattern matching
23:16:02 <dennisb> it's usually more beautiful to solve this with patternmatching then lot's of if-expressions with funtions like null
23:16:19 <bronaugh> | null xs = x
23:16:24 <bronaugh> that's the clause I added.
23:16:32 <dennisb> what you pasted above has no pattern matching at all, you missed a bit
23:16:42 <dennisb> what's the first line of the function
23:16:50 <bronaugh> max_consec:: [Int] -> Int
23:16:50 <bronaugh> max_consec(x:xs)
23:17:03 <dennisb> Aha, there is a pattern, (x:xs)
23:17:06 <bronaugh> ahh.
23:17:13 <bronaugh> so we'd match on a bunch of stuff then.
23:17:53 <dennisb> That matches lists with at least one element, the guard null xs tells me that you probably also want a pattern [x] that matches exactly one element
23:18:11 <dennisb> the pattern [x] can also be written (x:[])
23:19:17 <bronaugh> hmm.
23:19:32 <bronaugh> when I pass in a list of consecutive ints I now get:
23:19:33 <bronaugh> Program error: {head []}
23:19:39 <bronaugh> but..
23:19:40 <bronaugh> I have this:
23:19:42 <bronaugh> max_consec (x:[]) = x
23:19:51 <dennisb> yes, you can only use head when the list is not empty
23:19:59 <dennisb> maybe the patterns are in the wrong order
23:20:10 <bronaugh> order matters eh... 
23:20:14 <bronaugh> which should go first then?
23:20:22 <dennisb> it matches from the top to the bottom
23:20:33 <bronaugh> ok.
23:20:36 <bronaugh> rearranged and it works.
23:20:45 <bronaugh> another q
23:20:59 <bronaugh> is there any sensible way to do things if someone passes in an empty list?
23:21:05 <dennisb> in the first case when you call the function with for example (5:[]) then the pattern (x:xs) matches that where x=5 and xs=[]
23:21:07 <bronaugh> because no return value is going to be sensible.
23:21:38 <dennisb> there is the function error :: String -> a that can be used to abort the whole program
23:21:48 <bronaugh> I think I'll use that here then.
23:21:56 <dennisb> or maybe you could change the type
23:22:52 <dennisb> If you return not just the Int you could return something that tells you if you got a result or not
23:23:01 <bronaugh> ahh.
23:23:04 <bronaugh> beautiful :)
23:23:35 <bronaugh> actually, termination is the only logical thing to do when passed an empty list for this IMO.
23:23:38 <dennisb> For example a function of this very beautiful type: [Int] -> Maybe Int
23:23:58 <dennisb> A function that maybe returns an Int
23:24:12 <bronaugh> yeah.
23:24:12 * dennisb really like types like that
23:24:40 <bronaugh> dennisb: btw, thanks a lot for the help :)
23:25:04 <dennisb> sure, I'll answere questions but I won't solve your whole homework!
23:27:13 <bronaugh> lol
23:27:17 <bronaugh> yeah, I'm not asking for that at all.
23:30:27 <dennisb> no worries
