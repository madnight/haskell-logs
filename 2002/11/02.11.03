00:47:49 <bronaugh> hmm..
00:48:02 <bronaugh> ERROR "test.hs":31 - Type error in explicitly typed binding
00:48:02 <bronaugh> *** Term           : (last,[])
00:48:02 <bronaugh> *** Type           : (a,[b])
00:48:02 <bronaugh> *** Does not match : Int
00:48:19 <bronaugh> ideas?
01:00:35 <dennisb> yes, just what it says
01:00:44 <dennisb> (last,[]) does not have type Int
01:01:22 <bronaugh> ok, how do I check for a list of type int of size 0 then?
01:04:04 <dennisb> do you want to get the length of the list?
01:05:11 <bronaugh> I'd rather be able to do it cleanly.
01:05:39 <dennisb> I didn't understand the question
01:05:51 <dennisb> are we talking pattern matching?
01:05:55 <bronaugh> yeah.
01:06:03 <bronaugh> we're talking about pattern matching.
01:06:08 <dennisb> this is the pattern for an empty list: []
01:06:16 <bronaugh> yeah.
01:06:25 <bronaugh> but it's a _generic_ empty list, which it's complaining about.
01:06:39 <bronaugh> uniq2:: Int -> [Int] -> [Int]
01:06:40 <dennisb> I don't think that is what he complains about
01:06:53 <bronaugh> uniq2 (last, []) = []
01:06:54 <bronaugh> uniq2 (last, (x:xs))
01:06:57 <bronaugh>     | x == last = uniq2(x, xs)
01:06:58 <bronaugh>     | otherwise = [x] ++ uniq2(x, xs)
01:07:02 <dennisb> you use a pair somewhere in the program where he thinks it should be an Int
01:07:26 <dennisb> yes, your function pattern matches with a pair as the first argument
01:07:33 <bronaugh> hmm.
01:07:40 <bronaugh> so would (_:_) work here then?
01:07:57 <dennisb> you want to have a function of two arguments
01:08:07 <dennisb> your just takes one, which is a pair
01:08:25 <dennisb> you maybe should have something like uniq2 last [] = []
01:08:28 <bronaugh> no, it takes two arguments.
01:08:34 <dennisb> no, it takes one
01:08:39 <bronaugh> oh crap.
01:08:44 <bronaugh> because I'm passing it as a tuple.
01:08:44 <dennisb> the type says to, but function just takes one
01:08:46 <dennisb> yes
01:08:53 <dennisb> that is one value
01:09:30 <dennisb> and the error you got was that he expected and Int as the first argument but it was a pair
01:10:11 <bronaugh> yeah.
01:11:57 <bronaugh> ERROR "test.hs":33 - Type error in application
01:11:57 <bronaugh> *** Expression     : uniq2 (x,xs)
01:11:57 <bronaugh> *** Term           : (x,xs)
01:11:57 <bronaugh> *** Type           : (Int,[Int])
01:11:57 <bronaugh> *** Does not match : Int
01:12:08 <bronaugh> oh god.
01:12:09 <bronaugh> more fun.
01:12:18 <bronaugh> more passing as tuples.
01:12:39 <dennisb> that is not so strange
01:13:33 <dennisb> you could define the function type to be (Int,[Int]) -> [Int] but that would not be what a normal haskell programmer would do
01:15:10 <bronaugh> I fixed it.
01:15:14 <bronaugh> I was passing everything as tuples...
01:15:17 <bronaugh> too much C experience.
01:15:18 <bronaugh> :(
01:15:38 <bronaugh> now I'm curious about something.
01:15:49 <bronaugh> what if I want to call a function with the result of another function
01:16:14 <dennisb> no problem
01:16:19 <dennisb> it should just work
01:16:46 <bronaugh> oh wow.
01:16:47 <bronaugh> ok.
01:16:53 <bronaugh> now hugs accepts it.
01:19:10 <dennisb> great
01:19:23 <bronaugh> looks like most of my functions work.
01:21:53 <bronaugh> hmm nice.
01:21:55 <bronaugh> almost works.
01:21:58 <bronaugh> only forgot one detail.
01:22:19 <bronaugh> actually, this might be a good question.
01:22:29 <bronaugh> hmm or not.
01:22:33 <bronaugh> I'll try it myself.
01:23:26 <bronaugh> hm
01:23:30 <bronaugh> ok, now I _do_ have a question.
01:23:57 <bronaugh> I need to compute some stuff, then concatenate it to the result of it passed into a function.
01:27:56 <bronaugh> nm, did it another way.
01:27:59 <bronaugh> and it gets the right answer.
01:28:01 <bronaugh> which is insane.
01:29:56 <dennisb> show me the code and I might say something about it
01:30:03 <bronaugh> haha
01:30:06 <bronaugh> you'll probably say it's crap.
01:30:11 <bronaugh> it runs slower than molasses.
01:30:52 <dennisb> well, you probably concatenate lists in the wrong order then
01:31:13 <dennisb> lists in haskell are just linked lists, it's expensive to add stuff to the end
01:31:26 <bronaugh> ahh
01:31:31 <bronaugh> that could be part of it.
01:32:06 <bronaugh> http://bronaugh.linuxboxen.org/stamps.hs
01:34:32 <bronaugh> that's the cdoe
01:34:34 <bronaugh> code.
01:35:32 <dennisb> Hard for me to really see what is the slow part, sorry
01:35:47 <bronaugh> it's a nasty factorial-time algorithm
01:35:50 <bronaugh> that's most of the problem.
01:36:28 <dennisb> hugs is just an interpreter, you could always compile it with ghc
01:36:54 <bronaugh> yeah, I even have ghc kicking around.
01:37:15 <dennisb> but I guess that it will not make the program fly anyway
01:37:20 <bronaugh> btw, is there any way to manually invoke garbage collection?
01:37:51 <dennisb> there is, at least when you compile the program with ghc (but probably in hugs to)
01:38:00 <dennisb> but i'm pretty sure that is not your problem here
01:38:14 <bronaugh> hmm.
01:38:41 <bronaugh> well, so long as it takes less than 5 minutes to solve the worst case that's OK.
01:38:48 <dennisb> btw, have you seen the function map
01:38:50 <dennisb> ?
01:39:09 <bronaugh> yeah.
01:39:15 <dennisb> you function add seams like a typical case where one could use map
01:39:18 <bronaugh> and I should have used it here in places I suppose.
01:40:28 <dennisb> uniq2 looks like a typical case of filter
01:40:35 <bronaugh> hmm
01:40:49 <dennisb> it will not make the program faster but it will make it cooler
01:40:55 <bronaugh> true enough.
01:42:50 <bronaugh> ok, this is the nastiest case.
01:43:02 <bronaugh> almost 4 mins CPU time.
01:45:54 <bronaugh> way over 5 mins.
01:58:43 <dennisb> Hmm, he left. I had a question for him...
04:06:06 <dark> I miss shapr.  I wonder when he will be back.
04:27:56 <liiwi> few days to couple weeks
04:28:26 <liiwi> I guess he'll get analog if not dsl or cable soon
08:27:40 <ludde> hi Marvin--
11:11:05 <jadrian> hello
13:45:18 * jadrian steps in
13:52:59 <Segora> hi jadrian
13:53:06 <jadrian> hi Segora
13:53:11 <Segora> so, what's up?
13:53:33 <jadrian> Ah not much, just looking at some code... making some stuff...
13:53:59 <jadrian> what about you?
13:54:06 <Segora> business as usual ;)
13:54:12 <Segora> (which means: just about the same)
13:54:15 <jadrian> nice ;)
13:54:34 <Segora> in fact, my back hurts a little bit and i'm thinking about going home.
13:54:35 <jadrian> what kind of nusiness?
13:54:53 <jadrian> ah my back hurts to, but I'm at home already :)
13:54:58 <Segora> designing a backup solution for a large company
13:55:06 <jadrian> ah
13:55:27 <Segora> fortunately, one of the goals is to open source it eventually
13:55:40 <jadrian> that is cool :)
13:55:50 <jadrian> linux user too huh? ;)
13:55:56 <Segora> yes.
13:56:19 <Segora> but i'm less of a zealot these days
13:56:47 <Segora> even though at first, my only reason for switching to the x86 platform in '92 was linux ;)
13:57:09 <jadrian> I'm not one either, but I try to avoid windows at all cost... just because I'm really not used to it anymore 
13:57:55 <Segora> I never really got used to windows. I can cope with it when I need, but that isn't the case too often.
13:58:50 <jadrian> I was used to it once...
13:58:54 <jadrian> I got over it :)
13:58:59 <Segora> Some time ago, I stumbled in a project (the usual "we're late and need you to fix it") which had to be on WinNT because of third-party software not being available on other platforms.
13:59:59 <Segora> Hadn't done any windows programming before. I finished the project in time anyway. The customer was overflowing with happiness (maybe because I saved him about a quarter million. just maybe *g*)
14:00:13 <jadrian> lol :)
14:00:45 <jadrian> I programmed a lil bit in windows. Used turbo pascal and turbo C
14:01:02 <jadrian> whenever I had a seg. fault (in C) my 486 would reboot 
14:01:17 <jadrian> bad memories...
14:01:30 <Segora> well, just like kernel development ;)
14:01:37 <jadrian> lol :)
14:01:58 <jadrian> in fact, some months ago I crashed SuSE with an haskell program
14:02:06 <jadrian> I had a space leak on it
14:02:11 <Segora> ah. memory.
14:02:14 <jadrian> yeap
14:02:17 <dark> SuSE seems distressingly easy to crash.  It's giving linux a bad name.
14:02:27 <Segora> funny that it's still a problem these days.
14:02:30 <jadrian> SuSE 7.3, still had kernel 2.4.10 on it
14:02:52 <Segora> I thought 2.4.10 already had code in place to kill processes in memory-tight situations
14:02:54 <dark> One thing that can easily bring a linux box down is if you get the X server to allocate lots of memory.  It runs as root.
14:03:22 <Segora> shouldn't be.
14:03:28 <jadrian> that was not really the case, no X and regular user
14:03:36 <jadrian> but it did crash
14:03:47 <Segora> hmm.
14:03:50 <jadrian> I upgraded the kernel and didn't happen with 2.4.16
14:03:55 <jadrian> by the way
14:04:03 <jadrian> today I created a space leak on purpose
14:04:04 <dark> See?  It's SuSE's fault :)
14:04:24 <jadrian> I wanted to find a simple example where a certain problem would arise
14:04:36 <jadrian> so I ran the program and did a "top"
14:04:48 <jadrian> in a couple of secs it was using over 150Mb
14:05:00 <jadrian> I killed it... but then ran it again to check something
14:05:01 <Segora> I like user-mode-linux for tests like these
14:05:05 <dark> Hmm, how come the RTS settings didn't kick in and kill it?
14:05:10 <jadrian> then I forgot to kill it!! :)
14:05:34 <jadrian> no idea...
14:05:49 <Segora> easier measures like ulimit are also nice.
14:07:21 <jadrian> hey 22h 
14:07:49 <jadrian> did you know that 2 guys are trying to break a world record in hipnoses here in Portugal
14:08:24 <jadrian> keeping some guys under hypnosis for 75 hours in a row
14:08:43 <jadrian> (yes that was totally OT :)
14:08:46 <dark> So how do you know the guy isn't faking?
14:08:47 <Segora> interesting
14:09:10 <jadrian> well the short answer is, "you can never be sure"
14:09:13 <Segora> are there any measurable signs of the state (alpha wave activity etc.)?
14:09:18 <jadrian> yeap
14:09:37 <jadrian> a few hours ago he just used a needle in a girl
14:09:48 <jadrian> not cunpuncture needle
14:09:53 <jadrian> acunpuncture
14:10:03 <dark> "used a needle in a girl"?  Is this getting kinky?
14:10:07 <jadrian> lol
14:10:16 <jadrian> na not really S&M :)
14:10:37 <jadrian> it actually crossed from one side to the other of her arm
14:10:48 <jadrian> not just skin
14:10:54 <jadrian> the guys are pretty good
14:11:21 <ludde> eh? a needle through the arm??
14:11:41 <jadrian> well not in the middle of the arm
14:11:55 <jadrian> but it went from one side to the other
14:12:02 <ludde> isn't that dangerous?
14:12:03 <jadrian> and not just throgh her skin
14:12:04 <ludde> what if you hit a nerve
14:12:13 <jadrian> ask them :)
14:12:21 <dark> Then you get another girl, duh.
14:12:28 <jadrian> she said nothing, didn't even blinked
14:12:36 <ludde> seems strange
14:12:36 <jadrian> and she was standing
14:12:47 <jadrian> and the host removed the needle
14:12:52 <jadrian> so it was no trick
14:13:23 <jadrian> (the host is also known to be *very* skeptik(sp?) and he is really impressed with them)
14:15:41 <jadrian> ok something on topic now...
14:15:49 <jadrian> did you see my msg in kde-cafe?
14:17:20 <dark> No, and I wonder how that could be on topic :)
14:17:39 <jadrian> opss
14:17:51 <jadrian> haskell-cafe
14:17:51 <jadrian> lol
14:19:19 <jadrian> streams :: (Int->Bool, Int->Bool)->(Int, Int)->([Int],[Int])
14:19:20 <jadrian> streams (p,q) (x,y) = (xs',ys')
14:19:20 <jadrian>     where 
14:19:20 <jadrian>     (xs,ys) = streams (p,q) ((x+y),(y-x))
14:19:20 <jadrian>     xs' = if p x then x:xs else xs
14:19:20 <jadrian>     ys' = if q y then y:xs else ys
14:19:35 <jadrian> I didn't send this, but it illustrates my point
14:19:52 <jadrian> one functions, returns two lists
14:20:03 <jadrian> one list depends on the other
14:20:20 <jadrian> you want to write them both to separate files
14:20:23 <jadrian> how do you do?
14:21:20 <jadrian> problem is, if you write one then the other, you'll evaluate both and just consume one
14:22:00 <jadrian> even if you alternate between both you may have problems
14:23:04 <jadrian> requesting the next element of one of the lists may eventually cause a big prtion of the other list to be evaluated
14:23:08 <jadrian> so what do you do?
14:23:15 <jadrian> concurrency?
14:24:04 <jadrian> fuse that "streams" function with the "consumer functions" (really ugly solution)...
14:25:31 <jadrian> ok ok... lets forget about haskell... :P
16:24:14 <bronaugh> hmm, can you use a where clause with a function of this form?
16:24:18 <bronaugh> cov_level level stamps denoms = my_list ++ cov_level (level - 1) stamps my_list
16:24:23 <bronaugh>   where my_list = qsort_u (compute_perms stamps denoms)
16:25:12 <Heffalump> yes, why wouldn't you be able to?
16:26:09 <bronaugh> it doesn't seem to work for some reason.
16:26:19 <Heffalump> what goes wrong?
16:26:39 <bronaugh> I don't think it recurses properly in the above example
16:27:31 <Heffalump> in what way?
16:27:52 <bronaugh> in other words, I don't think cov_level gets called, or it gets called with an empty list.
16:28:04 <bronaugh> empty list denoms
16:28:32 <Heffalump> well, it's not a problem with your use of the keyword "where"
16:28:54 <bronaugh> I restructured the code to include where. no other changes, and this happens.. hmm.
16:28:55 * bronaugh digs.
16:30:21 <bronaugh> hm, can't figure out why it'd screw up.
16:30:32 <Igloo> Do you have the working code too?
16:30:46 <bronaugh> yeah, I'm just going to rewrite it out.
16:31:01 <bronaugh> oh god.
16:31:02 <bronaugh> nm.
16:31:34 <bronaugh> found the prob.
16:35:09 <dark> Entertain us :)
16:35:38 <bronaugh> heh
16:35:45 <bronaugh> I forgot to quicksort the result :(
16:35:54 <bronaugh> or rather, use my modified quicksort on it.
16:36:10 <dark> But you're already quicksorting at every level... this looks rather complicated :)
16:36:41 <bronaugh> oh.
16:36:46 <bronaugh> I didn't quicksort the merged list.
16:36:47 <bronaugh> right.
16:37:38 <Pseudonym> My brain hurts.  Reading a book on the Risch symbolic integration algorithm.
16:37:58 * Pseudonym thinks . o O ( Expect half-working incomplete Haskell implementation soon )
16:38:11 <dark> half-working algorithms, yum.
16:38:15 <Pseudonym> Indeed.
16:38:17 <Igloo> Oh, cool
16:38:21 <Pseudonym> The curious thing is that I actually understand it.
16:38:25 * Igloo keeps meaning to read up on how that sort of thing is done
16:38:27 <Pseudonym> Not the proofs of how it works, of course.
16:38:37 <Pseudonym> There's some deep, deep maths in there.
16:39:24 <Pseudonym> At least I understand the transcendental case (rational polynomials, exp, log and trig functions).
16:39:32 <Pseudonym> The algebraic case looks even deeper.
16:40:00 <Igloo> As in integrating infinite sums and things?
16:40:38 <bronaugh> ahh.
16:40:48 <bronaugh> thanks actually, you guys encouraged me to clean up my algorithm a bit.
16:41:57 <Pseudonym> Not infinite sums, no.
16:41:59 <Pseudonym> Uhm...
16:44:05 <Pseudonym> Trying to think of a good example of an algebraic function.
16:46:22 <Pseudonym> Basically, an algebraic function is a solution of a polynomial.
16:47:28 <Pseudonym> So elliptic functions are algebraic, for example.
16:48:41 <Igloo> Ah, OK
16:49:03 <Pseudonym> The algorithm is actually very straightforward.
16:49:17 <Pseudonym> The devil is in the details. :-)
16:49:48 <Pseudonym> Most of the trickiness is in not introducing more field extensions than necessary.
16:51:14 <Pseudonym> So, for example, you could represent cos(x) = 1/2 * (exp(i*x) + exp(-i*x))
16:51:17 <Pseudonym> But that introduces i.
16:51:51 <Pseudonym> So you solve a complicated coupled differential system just so you don't have to introduce i.
16:55:57 <Pseudonym> Igloo, I haven't forgotten about your inflation stuff.
16:58:56 <Igloo> No rush - I have other walls against which I can bang my head too  :-)
17:00:33 * Igloo should look back at the zlib source to see how that compares with the e-mail I sent you too
18:14:16 <dark> I have a troll berserker with elvish vampiric longsword.  I luv crawl :-)
