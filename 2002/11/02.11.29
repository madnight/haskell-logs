01:46:46 * sethk is away: I'm busy
03:56:00 <dark> Hm.  The LegalStuff section in libraries/GLUT/Graphics/UI/GLUT.hs shows a clear problem.
03:56:58 <dark> " The original documentation, on which this one is very heavily based, is Copyright (c) 1994, 1995, 1996 by Mark J. Kilgard, Silicon Graphics, Inc., and is available at <http://www.opengl.org/developers/documentation/glut/>. No part of this documentation may be reproduced, in any form or by any means, without permission in writing from the original author."
03:57:07 <dark> I wonder how anyone can write that down and not stop to think about it.
03:58:10 <Heffalump> maybe s/he has permission?
03:58:17 <dark> Maybe; but Debian doesn't, for example.
04:09:26 <dark> http://www.haskell.org/pipermail/cvs-libraries/2002-May/000124.html
04:09:31 <dark> GLUT.hs author didn't have it either.
04:46:47 * shapr bounces furiously
04:47:26 * Igloo harnesses shapr's energy to power his PC
04:48:12 * shapr laughs
04:48:20 <shapr> you'd only need thermocouples..
04:48:29 <shapr> for some reason I produce lots of body heat... always have.
04:48:34 <shapr> this is good in north sweden.
04:48:35 <Igloo> So, written any good code recently?
04:48:37 <Igloo> :-)
04:48:39 <shapr> it was not good in Birmingham
04:48:46 <Igloo> How's banana coming along?
04:48:59 <shapr> I haven't written any Haskell in a coupla weeks :-(
04:49:00 <Igloo> Birmingham UK?
04:49:04 <Igloo> :-(
04:49:05 <shapr> nay, the other Birmingham
04:49:14 <Igloo> Where's that then?
04:49:18 <shapr> Alabama
04:49:36 <shapr> that's where I spent most of my life
04:50:03 <shapr> I've been trying to find decent timesheet apps lately
04:50:29 <shapr> I've found two separate flavors, but I'd like one app with both sets of features.
04:50:36 <shapr> aka, both estimated and actual time
04:51:04 <shapr> Igloo: have you written any cool code lately?
04:51:31 <Igloo> *nod*
04:51:37 <shapr> what have you written?
04:51:40 <Igloo> Ermm, just more Fraskell stuff
04:52:01 * Igloo now has it faster than unrolled C and displaying in a GTK window
04:52:03 <shapr> cool, what have you changed?
04:52:07 <shapr> wow
04:52:13 <shapr> how did you get it faster than unrolled C???
04:52:29 <Igloo> The Haskell is unrolled, hence the speedup
04:53:05 <shapr> I thought Haskell was slower than C?
04:53:14 <Igloo> The reason it was 10 times slower was that (^) is non-strict in its first argument (as _^0 = 1), and x^2 wasn't being optimised
04:53:32 <shapr> hm, wow
04:53:49 <Igloo> Well, the inner loop is just arithmetic which can be compiled to the C you'd write very easily
04:54:59 * Igloo needs to finish off all the cases in all the libraries, the documentation and make a nice user interface now
04:56:45 <shapr> so many fun things to do, so little spare time....
04:57:54 <Igloo> Indeed  :-(
05:14:37 <dark> Hmm, which gtk-in-haskell bindings would you recommend the most?
05:14:50 <Heffalump> I don't understand how you managed to go faster than C, if the C was unrolled too
05:16:27 <ayrnieu> Well, you can always compare machine code.  Perhaps the Haskell does clever memory-speed tradeoffs.
05:17:37 <ayrnieu> shapr - http://www.crusaders.no/members/joker/temperature.txt
05:18:29 <Igloo> Ooops, I meant not-unrolled C
05:18:33 <Igloo> Sorry, too many negatives
05:18:47 <Igloo> dark: gtk+hs on teh grounds that it is the one that compiled  :-)
05:19:38 <shapr> ayrnieu: cute
05:20:09 <Heffalump> ahh
05:41:10 <dark> Igloo: I think the interesting question now is whether the Haskell version is more readable than the C version :)
05:41:23 <shapr> suddenly it occurs to me that we need alt.comp.lang.haskell, and *especially* alt.comp.lang.haskell.sources
05:41:41 <ayrnieu> .
05:41:44 <shapr> ,
05:41:48 * shapr makes a really big semicolon
05:42:27 <ayrnieu> Sorry; I didn't mean to enter that.
05:42:45 <shapr> it wasn't evil
05:43:26 <dark> shapr: Wouldn't a website for haskell sources be just as nice? 
05:43:30 <Heffalump> the Haskell itself should be more readable, the TH code that specialises isn't very readable at all
05:43:33 <dark> And it would have less spam :)
05:43:35 <ayrnieu> Has anyone here played with the K language?  I'm curious as to what you think of its expressivity, versus Haskell.
05:43:48 <ayrnieu> A good Haskell wiki would be nice.
05:43:51 <Heffalump> the mod_haskell people had a nice Haskell code formatter for HTML
05:44:04 <shapr> dark: well, haskell.sources would be a place where people could drop snippets
05:44:16 <shapr> and it would probably get archived
05:44:18 <dark> Like random useful functions?
05:44:21 <shapr> right
05:44:27 <shapr> the HaskellWiki isn't being maintained
05:44:41 <dark> Like finally figuring out that uniq can be written as uniq = map head . group? :-)
05:44:49 <shapr> ?
05:44:54 * shapr looks up group
05:46:20 <shapr> what does group do?
05:46:34 <dark> It groups adjacent equal elements into sublists.
05:46:50 <dark> group [1, 2, 2, 3] = [[1], [2, 2], [3]]
05:46:59 <shapr> ohhh
05:47:00 <shapr> neat
05:47:31 <shapr> that is very much worthy of a snippet
05:47:55 <dark> It's already on the haskell list, though :)
06:37:07 <ayrnieu> .
06:37:49 <lament> ,
06:38:51 <Heffalump> ;
06:40:15 * shapr grins
06:40:46 <ayrnieu> . $ # -- common Haskell function-application operators
06:41:19 <lament> common haskell? Is that sorta like common lisp? :)
06:45:16 <ayrnieu> no.
06:54:05 <shapr> ewww
06:54:22 <shapr> the scariest thing I know about CL is rahul
06:54:26 <lament> heh
06:54:41 <shapr> that right there is enough to put me off of CL for life.
07:00:30 <Heffalump> YAY!
07:00:53 <Heffalump> (Haskell report copyright not being changed)
07:01:58 <shapr> yay!
07:06:52 <ayrnieu> shapr - how did rahul scare you?
07:07:33 <ayrnieu> Why are you happy about the copyright?
07:08:49 <Heffalump> read the list
07:09:00 <Heffalump> basically the report isn't being made non-free
07:10:06 <ayrnieu> Well, that's nice.  Making it non-free would shift Haskell from just-barely-documented to not-documented-at-all.
07:14:52 * shapr bounces
07:18:47 * shapr reads alt.discordia
07:18:52 <shapr> mmmm, my favorite flavor.
07:19:54 <ayrnieu`> http://groups.google.com/groups?selm=8r8j22%248tl%241%40news.panix.com (the quote)
07:21:32 <ayrnieu`> (IIRC, Smallpox is the greatest killer of humans, ever.  (Thank God for presumptuous men? =))
07:27:17 <Igloo> Woohoo!
07:28:04 <ayrnieu`> ?
07:28:18 <Igloo> Subject: The Haskell 98 Report
07:28:21 <Igloo> To: <hakell@haskell.org> [sic]
07:28:29 <shapr> I once read a pagan article on how to pray to Eris. I wondered who would be stupid enough to pray to Eris. If she even noticed, she'd probably turn you into a teapot. Or maybe flood your oven with mandarin literature.
07:29:01 <Igloo> Am I right in thinking that CUP don't actually need the letter?
07:29:48 <ayrnieu`> CUP?
07:30:05 <Igloo> Cambridge University Press
07:30:16 <Igloo> The people publishing the H98 report physically
07:34:34 <Heffalump> igloo: I believe so, yes
08:47:48 * shapr looks at perl source... after five years of not doing so... EW
08:50:56 <Igloo_> Meaning you looked at it 5 years ago or you have resisted for 5 years?
08:51:09 <shapr> I have resisted for 5 years.
08:51:28 <shapr> I dislike perl.... or maybe I just dislike the common coding standards in the Perl community.
08:51:42 <ayrnieu`> shapr - what coding standards are those?
08:51:55 <Heffalump> oh, source code written in perl, not the source code of perl itself?
08:51:59 <shapr> right
08:52:46 <Igloo> Oh, right
08:53:27 <ayrnieu`> (in the Perl community, "Perl" is the language and "perl" is the implementation)
08:53:47 <shapr> oh, I see
08:53:55 <shapr> I've stayed out of it as much as possible.
08:54:09 <shapr> I've seen beautiful perl source, but only once or twice.
08:55:45 <ayrnieu`> Could you paste a little of this perl you just looked at?
08:56:19 <shapr>     $year += 1900;
08:56:33 * ayrnieu` flees.
08:56:38 <ayrnieu`> What, are you looking at MSA?
08:56:47 <shapr> nah, a debian package... onshore-timesheet
08:57:01 <shapr> I want a decent timesheet program that talks to emacs, there's onshore-timesheet-el
08:57:59 <shapr> I've set my postgresql local to eu dates, and this frickin program has US date format hardcoded...
08:58:08 <shapr> so I'm fixing that.
08:59:23 <shapr> lots of inline if statements and other random stuff happening here...
08:59:27 * shapr sighs
08:59:57 <shapr> date format is specified in at least three places.... grrr
09:01:22 <shapr> hi tetryl
09:06:17 <shapr> yay, I can still fix perl code
09:11:14 * ayrnieu` looks at REXX code for the first time.
09:11:35 <shapr> I vaguely recall the REXX is pretty spiffy
09:29:23 <Marvin--> gah, Koen wants me to pick a project before mid-december
09:30:41 <shapr> what do you have in mind?
09:31:32 <Marvin--> I don't know!
09:31:47 <Marvin--> I'm going to do my master project during spring, and I don't know what to do
09:31:49 <shapr> as I always say, start by cutting out the bits you don't want to do...
09:32:16 <shapr> graphics? compilers? editors? type theory?
09:32:24 <shapr> category theory?
09:32:33 <Heffalump> what did he suggest apart from quickcheck+thm proving?
09:32:49 <shapr> thm? template haskell something?
09:32:54 <Marvin--> theorem proving
09:32:54 <Heffalump> theorem
09:32:57 <shapr> ah
09:33:54 <Marvin--> he basically said that he could supervise pretty much anything that was related to functional programming, but it would be more fun if it was in one of his areas
09:34:06 <Marvin--> I'm going to go talk to some other people too
09:35:28 <Marvin--> (ironic that Koen talked about the Clean people as "crazy dutch people"
09:35:32 <shapr> heh
09:35:40 <shapr> you could port ObjectIO to gtk :-)
09:35:48 <Heffalump> hehe
09:36:00 <Heffalump> he's gone native
09:36:24 <shapr> Marvin--: what kind of stuff do you enjoy working on?
09:37:27 <Marvin--> I'm kinda theoretical, apart from functional programming in general, I'm interested in formal languages and semantics et.c.
09:37:59 <shapr> hmm
09:38:03 <shapr> Arrows with Yampa?
09:38:08 <Marvin--> Yampa?
09:38:11 <Heffalump> AFRP
09:38:22 <Marvin--> oh, no, I'm not that interested in AFRP
09:38:49 <Heffalump> are you aiming for a PhD place after your Masters?
09:39:04 <shapr> good point, do you want a research idea you can extend?
09:39:37 <Marvin--> I'm aiming for a PhD place, yes, but I'm not sure if it's necessary to pick a master project that can be extended like that
09:39:56 <Heffalump> no, but you should pick something that is research-y rather than implementation-y, if possible
09:40:21 <shapr> you could mix the fp-refactor idea with Lava, and come up with a hardware refactoring tool... you'd be rich =)
09:40:34 <Marvin--> Heffalump: yes, that's already on my mind
09:41:07 * shapr doesn't know much theory
09:41:18 * Heffalump doesn't know as much as he should
09:41:22 <shapr> use Lava to come up with a hardware STG? ;)
09:41:33 <shapr> I'd buy a Haskell coprocessor PCI card ;)
09:42:08 <Marvin--> I'm not interested in hardware :P
09:42:24 <shapr> yah, I'm too focussed on applications and implementations :-/
09:43:28 <shapr> arrows for automatic paralellization?
09:43:32 <Marvin--> I mean, the quickcheck + theorem proving thing is a cool idea, I'm just afraid that I don't know enough about it to be able to do anything with it
09:43:45 <shapr> that would be a superset of koen's parallel parsing draft
09:44:02 <Igloo> Oege said he'd worry about me if I wrote an OS in Haskell and seemed quite unimpressed with the idea of Haskell hardware
09:44:26 <shapr> hm
09:44:46 <shapr> HaskellOS + Nepal would be nice
09:45:02 <shapr> if you wrote everything as array ops, you'd get free data parallelization.
09:45:53 <shapr> the QC+thm thing would be like implementing the ideas from the banana,lenses,etc paper with QuickCheck?
09:46:12 <shapr> break out recursion into a QC property?
09:46:47 <Marvin--> the what paper? :)
09:47:09 <shapr> meijer and others, "bananas,lenses, barbed wire, ..."
09:47:19 <shapr> it's about proving properties that involve recursion
09:47:33 <shapr> he breaks it down into hylo- cata- ana- morphisms
09:47:59 <shapr> my math is nearly zero, so I didn't get so much out of that paper.
09:48:15 <Marvin--> I think the idea with QC+thm is that you could partially prove correctness and test the rest, or something
09:48:15 <shapr> I need a proof tutorial.
09:48:40 <shapr> hm
09:48:42 <shapr> interesting.
09:49:02 <Heffalump> people have tried to make JVM hardware but it never really took off
09:49:13 <shapr> of course, the jvm sucks....
09:49:14 <Heffalump> I can't see STG hardware having much hope, therefore
09:49:37 <shapr> yah, that's true
09:50:41 <shapr> extend QC to check Arrow properties as well as Monadic?
09:51:00 * shapr thinks of Arrodic (spoken "erratic") properties
09:52:04 <Marvin--> I don't think I know enough about arrows, nor interested enough in them to do that...
09:52:17 <shapr> It could be interesting to see what flavor of type system is required for QC to be useful
09:52:19 <shapr> I've wondered that myself
09:52:27 <shapr> why can't I make a worthwhile QC in Python?
09:52:40 <shapr> that would be theory
09:52:57 <shapr> generative testing and type theory..
09:53:46 <lament> What's QC?
09:53:49 <Marvin--> QuickCheck
09:53:50 <shapr> quick check
09:53:53 <shapr> an extra spiffy testing tool
09:54:18 <shapr> maybe extend QC to work with Core also rather than Haskell source?
09:54:22 <Heffalump> QC in a language without referential transparency would be messy, I think
09:54:31 <shapr> that would make proving properties about the Haskell source code much simpler
09:54:45 <Heffalump> shapr: how?
09:54:48 * sethk is back (gone 08:08:00)
09:55:27 <shapr> Heffalump: I would assume the Core output from GHC would be much simpler to work proof wise than the Haskell source
09:55:31 <shapr> is that wrong?
09:55:46 <Heffalump> oh, I guess, yeah
09:56:02 <Heffalump> you could just do the theorem proving on Core and the QCing on source, though
09:56:12 <shapr> yah, good point
09:56:31 <Marvin--> anyhow, I'm off to eat some dinner :P
09:56:37 <shapr> me too
15:36:50 <shapr> good dinner
17:11:45 * Igloo decides it's too late to be trying to word concise accurate descriptions of why list comprehensions work and goes to bed instead
17:12:21 <dark> What do you mean "why" they work?
17:12:45 <Igloo> Why they return everythign they're supposed to, nothing more and don't diverge
17:13:06 <Igloo> A particular one rather than list comprehensions in general
17:13:13 <dark> Oh, I see :)
17:15:04 <Heffalump> they diverge if and only if one of the generators has an infinite list, surely?
17:16:21 <dark> Heffalump: Whether a list is infinite might be apparent only at run time :)
17:17:02 <Igloo> Ermmm
17:17:28 <Igloo> Would you say [1..] diverges?
17:18:45 <dark> I don't really know what it means for a list to diverge.  I thought it was a property of things like summations.
17:20:42 <Igloo> The relevant definition is
17:20:42 <Igloo>      The {reduction} of some term under some {evaluation strategy}
17:20:43 <Igloo>      diverges if it does not reach a {normal form} after a finite
17:20:43 <Igloo>      number of reductions.
17:21:22 <Igloo> Ah, and that won't actually reach a normal form, only head normal form, so diverge isn't actually the word I want
17:23:03 * Igloo means where each element of the list can be evaluated to HNF, but will really go to bed now rather than searching for the correct term  :-)
17:23:15 <dark> Heh.
17:23:35 <dark> Is this true for [1..] though?  You can't actually do it in finite time.
17:24:46 <Igloo> Oh, and no - what's important is whether the lists you use as generators diverge, not whether or not they are infinite (e.g. [[1..]] has length 1 but diverges)
17:25:03 <Igloo> Yes, so [1..] diverges
17:25:09 <Igloo> *gone*
17:38:12 * Heffalump realises that there are list comprehensions that can diverge in the sense of taking infinite time to produce a single element
