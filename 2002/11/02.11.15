00:31:17 <o3> hullo
00:32:58 <Heffalump> hi
00:36:50 * ibid reiterates
00:36:57 <ibid> problem was solved
00:37:08 <o3> hey heffalump.  i'm playing around with hopengl.  it's fantastic :)
00:41:13 <Heffalump> cool :-)
00:41:33 <Heffalump> ibid: why would giving an explicit type signature cause the monomorphism restriction to kick in?
00:42:09 <ibid> Heffalump: no, the signatureless version triggered the restriction
00:42:27 <ibid> Heffalump: usually you just add an explicit type signature, but that failed in this case
00:44:14 <Heffalump> because the signature you needed was polymorphic?
00:44:46 <ibid> because i couldn't come up with one that would satisfy ghc
00:44:59 <Heffalump> hang on, I thought the restriction only applied to value bindings, not function bindings?
00:45:49 <ibid> afaicr it has to do with function recursion and the ability to change type there...
00:46:34 <Heffalump> that's not the monomorphism restriction, it's about polymorphic recursion
00:46:56 <Heffalump> which requires explicit type signatures because type inference is undecidable
00:47:40 <ibid> well, name wrong, right diagnosis?
00:47:57 <Heffalump> errm, I can't see any polymorphic recursion in the definition you gave above either
00:48:26 <ibid> which?
00:48:27 <Heffalump> what was calling itself recursively?
00:48:30 <Heffalump> ifix
00:48:38 <ibid> mutual recursion between ifix and rec
00:49:03 <Heffalump> ah, ok
00:49:16 <ibid> anyway, it works now (i removed the polymorphism by using a sum type)
00:49:16 <Heffalump> so what type did the recursive call to ifix end up having?
00:49:24 <ibid> don't know...
01:47:33 <Fractal> Hey, all. How would I put an array into a data declaration?
01:48:27 <Fractal> Ok... Array a b  is apparently the type for an array...
02:41:58 <Heffalump> hi
02:47:26 <Fractal> Hey Heffalump.
02:52:29 <Heffalump> hi
02:52:48 <Fractal> How's it going?
02:53:30 <Fractal> Any idea how to include an array in a data definition?
02:54:48 <Heffalump> data Foo = Foo (Array Baz Blat) ?
02:55:02 <Heffalump> where Array = whatever array you really want
02:56:20 <Fractal> Are there other types of arrays?
02:56:40 <Heffalump> yeah
02:56:48 <Heffalump> have a look in the GHC docs
02:57:11 <Fractal> No, no... Regular arrays will be fine, I suppose...
03:00:53 <Fractal> Ok, I don't quite understand this. In the type "Array a b", what do a and b represent?
03:01:47 <Fractal> For instance, I can create an array with array (0,1) [(0,1),(1,1)]
03:01:49 <Heffalump> index and element types
03:01:55 <Fractal> And that returns Array a b
03:03:25 <Fractal> So is b something like [(index, value)]  ?
03:03:35 <Heffalump> no
03:03:50 <Fractal> Oh.
03:04:03 <Heffalump> array :: Ix a => (a,a) -> [(a,b)] -> Array a b
03:04:11 <Heffalump> b is just value
03:04:30 <Heffalump> array takes a list of bounds and a list of (index,value) pairs, it would appear
03:04:39 <Heffalump> s/a list of //
03:06:09 <Fractal> Ah, I see. The type Array a b has nothing to do with the actual values contained in the array. Duh.
03:06:26 <Heffalump> huh?
03:06:30 <Heffalump> b is the type of the values in the array
03:06:48 <Fractal> Ok, I understand, I think.
03:07:18 <Fractal> And a is the type of the index that you are using?
03:07:30 <Heffalump> yep
03:08:03 <Fractal> Why would you use anything other than Integer?
03:08:09 <Fractal> For the index, I mean.
03:08:57 <Heffalump> well, you might prefer to use Int
03:09:02 <Heffalump> or a tuple
03:09:30 <Fractal> Oh, ok. You'd use a tuple for higher dimension arrays?
03:09:53 <Heffalump> well, possibly
03:11:30 <Fractal> Ya, ok. I can understand that. Thanks. Later.
04:34:38 <ibid> arrays indexed by enums are sometimes useful
05:16:45 <lament> What's wrong with my expression?
05:16:56 <lament> *** Term           : if and [x /= ' ',head xs == ' '] then 1 + numwords xs else numwords xs
05:16:56 <lament> *** Type           : Integer
05:16:56 <lament> *** Does not match : Bool
05:17:21 <lament> The type of the whole if-then-else should be Integer.
05:18:07 <Igloo> It is, but you are using it as a Bool
05:18:22 <lament> Where?
05:18:32 <Igloo> No idea, but that's what the error says
05:18:46 <lament> No, the if-then-else must return an Integer
05:18:55 <Igloo> Which it does
05:19:09 <ibid> lament: look at the context where you use the if
05:19:25 <lament> As I said, it must return an Integer
05:19:46 <lament> If i just change then and else to True, I get an error for the whole function that the if is from
05:20:18 <ibid> lament: you do not give enough context for us to pinpoint the error
05:20:38 <ibid> lament: the if *does* return Integer, but you are using it in a Bool context
05:22:18 <lament> numwords []     = 0
05:22:18 <lament> numwords (x:xs) | xs == []  = x /= ' '
05:22:18 <lament>                 | otherwise = if (and [x /= ' ', head xs == ' '])
05:22:18 <lament>                                 then (1 + numwords xs)
05:22:18 <lament>                                 else (numwords xs)
05:22:35 <ibid> indeed
05:22:39 <ibid> numwords (x:xs) | xs == []  = x /= ' '
05:22:43 <ibid> returns boolean
05:22:46 <ibid> Bool
05:23:00 <lament> whoops
05:23:14 <lament> how come i didn't get an error message there?
05:23:29 <ibid> lament: because you didn't give an explicit type signature
05:23:33 <lament> Yes, I did
05:23:39 <lament> numwords :: [Char] -> Integer
05:23:40 <ibid> and the compiler cannot know which is the erroring version
05:23:47 <ibid> ah, you didn't show it :-)
05:23:52 <ibid> a good question, then
05:24:16 <lament> (by the way, is there a less stupid way to find a number of words in a string?)
05:24:50 <ibid> length . words?
05:24:51 <Vulpyne> Maybe using lex?
05:26:11 <lament> hm, a less stupid way where everything is still done by hand
05:26:46 <Vulpyne> Everything?
05:27:06 <lament> wow, my function actually works! Neat.
05:27:50 <ibid> lament: write length and words yourself and use length . words?
05:28:34 <lament> hm, i should try that.
05:33:21 * lament stares in awe at the Prelude's definition of words
06:04:00 <ibid> is there a library function to concatenating the elements of a string list, with comma separation?
06:04:18 <Igloo> concat . intersperse ","
06:04:37 <ibid> thanks
08:14:22 --- topic: '["mo' nads than you", "We put the Funk in Funktion", "See logs @ http://tunes.org/~nef/logs/haskell/", "Gtk+HS 0.14.10: http://www.cse.unsw.edu.au/~chak/haskell/gtk/", "HWS-WP: http://www.dum.chalmers.se/~marvin/hws-wp/"]'
08:14:22 --- topic: set by Marvin-- on [Fri Nov 08 06:42:42 2002]
09:17:37 --- topic: '["mo' nads than you", "We put the Funk in Funktion", "See logs @ http://tunes.org/~nef/logs/haskell/", "Gtk+HS 0.14.10: http://www.cse.unsw.edu.au/~chak/haskell/gtk/", "HWS-WP: http://www.dum.chalmers.se/~marvin/hws-wp/"]'
09:17:37 --- topic: set by Marvin-- on [Fri Nov 08 06:42:42 2002]
10:54:14 <ayrnieu> I've been following the "OO is (not) about objects" thread, and one question has been persistent:  What on earth does "OT" mean?  Object-something-or-other is as far as I or any of my searches have gotten.
10:54:24 <ayrnieu> (the context precludes "Off Topic")
10:54:55 <sethk> Object technology?
10:55:03 <sethk> Object trash?
10:55:16 <sethk> ObjectTionable?
10:55:21 <ayrnieu> Possibly the first, but I don't understand why "OOP" isn't used.
10:55:51 <sethk> I don't know either    :)
11:03:52 <ayrnieu> Seeing as the person who mentions OT every other line doesn't seem to understand the concept of a function, I'm not too bothered.
