02:09:35 --- topic: '["mo' nads than you", "We put the Funk in Funktion", "See logs @ http://tunes.org/~nef/logs/haskell/", "Gtk+HS 0.14.10: http://www.cse.unsw.edu.au/~chak/haskell/gtk/", "HWS-WP: http://www.dum.chalmers.se/~marvin/hws-wp/"]'
02:09:35 --- topic: set by Marvin-- on [Fri Nov 08 06:42:42 2002]
06:05:35 <bas__> i get these "ERROR - Control stack overflow" while designing this function with hugs. is it possible to get a more detailed description of the problem, so i can locate the source of this problem?
06:06:06 <bas__> i guess stack overflow has something to do with never ending recursive functions, right?
06:19:21 <Marvin--> normally, yes :)
06:19:56 <bas__> Marvin--: this function is head sacking me for a few hours now...
06:20:25 <bas__> Marvin--: "need to 'think' functional" i keep repeating to myself... ;-(
06:21:12 <Marvin--> heh, what are you trying to do?
06:21:55 <bas__> Marvin--: i need to make a function which computes the so called optimal alignment of two strings...
06:22:38 <Marvin--> riiight, I don't know what that is
06:22:42 <bas__> Marvin--: it is really easy
06:22:59 <Marvin--> do you compute a LCS or something?
06:23:22 <bas__> LCS?
06:23:33 <Cryptor> bas__: optimal alignment of two strings?
06:23:52 <Marvin--> bas__: longest common substring
06:24:24 <bas__> for example when you have two strings:
06:24:35 <bas__> 'haskell' and 'pascal'
06:24:51 <bas__> then the optimal alignment of the string can be made by adding spaced in them
06:25:00 <bas__> like this:
06:25:01 <bas__>  H A S K E L L
06:25:01 <bas__> P A S C A - L
06:25:16 <bas__> without the space in front of haskell...
06:25:35 <bas__> now there are 3 matches of the letters A, S and L
06:25:38 <Marvin--> you want to insert spaces so that they become equal length and have as many matching letters as possible?
06:26:05 <Marvin--> can you only insert spaces in the shortest string, or in both?
06:26:12 <bas__> well the question is how good an alignment is really...
06:26:39 <bas__> there are 3 factors: the number of equal letters, number of unequal letters and the alignments with a space
06:26:40 <Cryptor> bas__: didn't they have optimal alignment before the adding of the spaces?
06:27:19 <bas__> Cryptor: it's counted the same way... there need to be a space added after 'pascal'...
06:27:38 <bas__> Cryptor: so there is more than one possible answer
06:27:46 <Cryptor> bas__: does the most optional alignment have the most equal letters?
06:28:10 <bas__> Cryptor: depends on what kind of 'scores' you give to the 3 factors...
06:28:24 <bas__> right now i use:
06:28:25 <bas__>  scoreMatch = 1
06:28:25 <bas__> scoreMismatch = -1
06:28:25 <bas__> scoreSpace = -2
06:28:44 <bas__> so the score of the example above would be -2
06:29:18 <bas__> btw, this theory is used in molecular biology for analyzing and comparing genetic material...
06:30:48 <Cryptor> hmmm, tricky...
06:31:49 <bas__> actually it's a assignment i have to do, and its cut in parts, so i first need to make function a then b, etc... so it isn't this hard...
06:32:51 <Cryptor> the best I can think of is a tree search.
06:33:14 <Cryptor> that prunes itself when its score gets low.
06:34:07 <Cryptor> the branches of the tree prune themselves, that is.
06:35:47 <bas__> i don't generate a tree at the moment, i just have a function score :: Char -> Char -> Int ... and i get the maximum for the score of a string with a function which calls itself... f (x:xs) (y:ys) = max ((f xs ys), (f (x:xs) ys), (f xs (y:ys))) but with the scores to do the 'max' computation... where the 'max' function is altered as well...
06:43:50 <Cryptor> the best I can think of is a tree search where you prune when the score gets so low such that its not going to be the great score.
07:36:23 <shreya> yes but fractal what about if key is an empty list
07:36:38 <shreya> ahh, stupid disconnections
08:54:07 <Stewart002> hi all
08:55:57 <Stewart002> can anyone help me with parsing a sentace to run specific functions?
09:01:11 <Stewart002> anyone?
09:07:48 <Igloo> What do you mean?
09:08:47 <Stewart002> I think I have it.
09:08:57 <Stewart002> how do I add single elements to a record?
09:09:30 <Stewart002> case str of
09:09:30 <Stewart002>              "Flight Number" -> query = {required = "fno"}
09:09:32 <Stewart002> like that?
09:09:45 <Igloo> Just drop the first =
09:09:50 <Stewart002> thanks
09:10:11 <Stewart002> ick, I'm going the wrong way, nm
09:10:12 <Stewart002> meh
09:11:13 <Stewart002> damn I'm lost
09:12:03 <Stewart002> I need some way of the user saying "I want the flight number from a flight to London" but in a command for ease, like Flight_No To London
09:12:14 <Stewart002> is there a way of breaking a string into words?
09:13:57 <Igloo> words  :-)
09:14:22 <Stewart002> I need each third of that command broken down
09:14:32 <Stewart002> this is my code for the UI so far.
09:14:33 <Stewart002> main :: IO ()
09:14:34 <Stewart002> main =  do putStr "What data element do you require? "
09:14:34 <Stewart002>            str <- getLine
09:14:34 <Stewart002>            case str of
09:14:34 <Stewart002>              "Flight Number" -> map fno ()
09:14:51 <Stewart002> between the brackets is the info they have.
09:15:03 <Stewart002> e.g. map fno (filterTo "London")
09:16:44 <Stewart002> there are 8 elements to my record, I don;t want to write 64 lines deciding what functions to run.
09:27:11 <Stewart002> anyone help?
09:28:13 <Stewart002> ERROR - Undefined variable "flight_No"
09:29:15 <Igloo> Well, is it defined?
09:30:11 <Stewart002> I figured that one out.
09:30:14 <Stewart002> now I got...
09:30:14 <Stewart002> main :: IO ()
09:30:15 <Stewart002> main =  do putStr "What data do you require? "
09:30:15 <Stewart002>            str <- getLine
09:30:15 <Stewart002>            case str of
09:30:15 <Stewart002>              "flight_No" -> print(filterTo "London")
09:30:16 <Stewart002> ick
09:30:21 <Stewart002> Program error: {main_v1510 "flight_No"}
09:31:01 <Stewart002> I wasn't running main before
09:31:55 <Stewart002> figured it, no space after print
09:32:54 <Stewart002> okay, it works with some info assumed, I now need the user to input all info.
09:37:36 <Stewart002> ho do you make a function just return a string?
09:37:43 <Stewart002> query 2 :: IO ()
09:37:44 <Stewart002> query2 = do putStr "What data do you know? "
09:37:44 <Stewart002>            str <- getLine
09:47:21 <Stewart002> anyone?
09:47:23 <Stewart002> query 2 :: IO ()
09:47:23 <Stewart002> query2 = do putStr "What data do you know? "
09:47:23 <Stewart002>            str <- getLine
09:47:23 <Stewart002>            print str
09:47:30 <Stewart002> *** Term           : query1
09:47:30 <Stewart002> *** Type           : IO [Record]
09:47:30 <Stewart002> *** Does not match : IO ()
09:47:49 <Stewart002> meh, my pasting skill is getting seriously bad
09:52:40 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":41 - Type error in final generator
09:52:40 <Stewart002> *** Term           : case str2 of {...}
09:52:40 <Stewart002> *** Type           : [Record]
09:52:40 <Stewart002> *** Does not match : IO a 
09:53:10 <Stewart002> query1 :: IO () -> Record
09:53:11 <Stewart002> query1 = do putStr "What type of data do you know? "
09:53:11 <Stewart002>             str2 <- getLine
09:53:11 <Stewart002>             case str2 of
09:53:11 <Stewart002>               "Destination" -> filterTo "London"
09:55:48 <Stewart002> meh
10:39:54 <Stewart002> anyone about now?
10:40:21 <ibid> ?
10:40:42 <Stewart002> I was here a short while ago
10:41:10 <ibid> so?
10:41:39 <Stewart002> I have a problem with nested IO functions
10:41:52 <ibid> yes?
10:42:24 <Stewart002> can I post it here?
10:42:37 <ibid> depends on its length
10:42:43 <Stewart002> 3 short functions
10:42:58 <ibid> line count?
10:43:15 <ibid> anything bigger than five lines is definitely too much
10:43:17 <Stewart002> 16
10:43:21 <Stewart002> okay
10:43:25 <Stewart002> I'll do it a function at a time
10:43:31 <ibid> put it on the web and post the url
10:43:32 <ibid> don't
10:43:37 <Stewart002> okay
10:44:09 <Stewart002> http://www.starwars-csa.com/haskell.hs
10:44:35 <ibid> what is the problem, specifically?
10:45:15 <ibid> haskell.hs:44: Variable not in scope: `query3'
10:45:21 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":44 - Undefined variable "query3"
10:45:31 <Stewart002> I'm using hugs
10:45:46 <ibid> isn't it obvious from the error message?
10:45:55 <Marvin--> Stewart002: uh, you don't have a query3 function?
10:46:21 <Stewart002> ick, hold on
10:46:28 <Stewart002> meant query2
10:46:45 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":47 - Type error in explicitly typed binding
10:46:45 <Stewart002> *** Term           : query2
10:46:45 <Stewart002> *** Type           : IO [Char]
10:46:45 <Stewart002> *** Does not match : IO () 
10:46:56 <Stewart002> btw: hi marvin
10:47:22 <ibid> Stewart002: it's like having a return statement in a void function in C :-)
10:47:41 <Stewart002> do you see what I'm trying to do?
10:47:41 <ibid> Stewart002: you are using "return" in a function that should not return a value (IO ())
10:47:45 <ibid> no
10:48:17 * ibid is just responding to your questions, i'm not taking the time to *think* about the program more than necessary
10:48:22 <ibid> so ask specific questions
10:48:31 <Igloo> Ermmm, you need to use return though (return () in particular)
10:48:48 <ibid> in that case yes
10:49:00 <Igloo> ibid: Looking at haskell-doc as we speak, BTW
10:49:02 <ibid> but it seems strange to read a line and discard it
10:49:06 <ibid> Igloo: great
10:49:31 <ibid> Stewart002: maybe the type should be IO String, not IO ()
10:50:05 <Igloo> ibid: Do you want to be left as an Uploader when I/we take it over, BTW?
10:50:18 * Igloo guesses not as it'll probably be debhelpered
10:50:32 <ibid> i don't think i'll be doing anything to it :-)
10:50:40 <Igloo> OK  :-)
10:50:42 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":44 - Type error in application
10:50:43 <Stewart002> *** Expression     : filterTo query2
10:50:43 <Stewart002> *** Term           : query2
10:50:43 <Stewart002> *** Type           : IO String
10:50:43 <Stewart002> *** Does not match : [Char] 
10:50:43 <ibid> but it's really your decision
10:50:44 <Marvin--> Igloo: heh
10:51:02 <ibid> Igloo: the difference is, do you want my possible uploads to be MU's or NMU's
10:51:26 <Marvin--> yay, party time
10:51:27 * Marvin-- leaves
10:51:43 <Igloo> Oh, actually, NMUs would make sense as you probably wouldn't be using the arch repository if you made any
10:52:04 <ibid> Stewart002: where is that?
10:52:14 <Stewart002> query1 :: IO String
10:52:15 <Stewart002> query1 = do putStr "What type of data do you know? "
10:52:15 <Stewart002>             str2 <- getLine
10:52:15 <Stewart002>             case str2 of
10:52:15 <Stewart002>               "Destination" -> filterTo (query2)
10:52:43 <ibid> Stewart002: change filterTo (query2) to query2 >>= filterTo
10:53:21 <Stewart002> same error excet Does not match :[[Char]]
10:53:39 <ibid> where?
10:53:47 <Stewart002> same line
10:53:47 <ibid> (don't post the lines, just give the line number)
10:53:59 <ibid> okay, let's see what filterTo wants...
10:54:14 <ibid> you have a logic problem there
10:54:28 <ibid> you are trying to treat a string as a list of strings
10:54:36 <ibid> the solution depends on what you want to do
10:55:14 <Stewart002> can you explain what you mean (list of string?)
10:55:51 <ibid> what specifically do you not undestand?
10:56:03 <Stewart002> where is the list of strings?
10:56:29 <ibid> filterTo expects a list of strings
10:56:35 <ibid> you give it a string
10:57:20 <Stewart002> hmm
10:58:02 <Stewart002> you mean that filter expects a list of strings? filterTo shouldn't.
10:58:13 <ibid> filterTo does, because filter does
10:58:19 <Stewart002> I see
10:58:24 <ibid> maybe you should try adding type signatures to all functions
10:58:34 <ibid> it may help understanding the problem
10:58:47 <ibid> and may help getting more accurate error messages
10:59:36 <Stewart002> filterTo :: [String] -> [Record] then?
11:01:00 <ibid> Stewart002: filter :: (a -> Bool) -> [a] -> [a]
11:01:16 <ibid> Stewart002: so filterTo cannot have different types in parameter and argument
11:01:55 <ibid> Stewart002: filterTo :: [String] -> [String]
11:01:59 <ibid> afaict
11:02:19 <ibid> that's what it is now. if that's not what you want, you need to change the code
11:02:29 <ibid> hmm, sorry
11:02:37 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":63 - Type error in application 
11:02:39 * ibid is talking nonsense
11:03:49 <ibid> ghci is giving lots of error messages in your original file with the >>= change
11:04:57 <ibid> filterTo seems to be :: String -> [Record]
11:05:08 <ibid> so my original diagnosis was wrong
11:06:05 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":44 - Type error in application 
11:06:13 <Stewart002> IO String not [[Char]]
11:06:37 <Stewart002> thats the >>= bit
11:06:54 <ibid> yes
11:07:12 <ibid> add the signature filterTo :: String -> [Record]
11:07:15 <ibid> see what it says
11:07:31 <Stewart002> I did.
11:07:46 <ibid> please update the web version
11:07:51 <Stewart002> okay
11:08:17 <Stewart002> uploaded
11:08:44 <ibid> hmm
11:08:47 <ibid> okay
11:10:05 <ibid> my problem is that i'm suggesting blind changes, let me see what's the big picture
11:10:30 <ibid> what are query1 and query2?
11:10:41 <ibid> ahh, sorry
11:10:42 <ibid> yes
11:10:45 <ibid> i think i got it
11:11:08 <Stewart002> I didn;t know of a way to split strings to get individual words so I made 3 functions
11:11:17 <Stewart002> brb (drink)
11:11:26 <ibid> a function that returns an IO value cannot be composed in the ordinary way so anything like map fno (query1) will fail
11:11:41 <ibid> Stewart002: use the "words" prelude function
11:12:13 <ibid> Stewart002: in the case expressions, you need to start new do's
11:12:20 <ibid> in the following style:
11:12:49 <ibid> "Destination" -> do qr <- query2
11:13:03 <ibid>                     filterTo qr
11:14:22 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":44 - Type error in final generator
11:14:22 <Stewart002> *** Term           : filterTo qr
11:14:22 <Stewart002> *** Type           : [Record]
11:14:22 <Stewart002> *** Does not match : IO a 
11:15:03 <ibid> and yes, since filterTo is not an IO action, you need to use return there
11:15:08 <ibid> so return $ filterTo qr
11:15:38 <ibid> but then you will get an error about query1's type
11:15:52 <ibid> because you claim it returns a string, and now it will return a list of records
11:16:11 <ibid> (you need to make similar changes elsewhere too)
11:16:21 <Stewart002> I changed the type signature to query1 :: IO [Record]
11:16:22 <ibid> in main, specifically
11:16:34 <ibid> i mean the do change
11:16:40 <Stewart002> k
11:18:48 <Stewart002> I'll reupload to see what you think?
11:19:09 <Stewart002> uploaded
11:22:12 <Stewart002> I get a new error now lower down.
11:22:14 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":73 - Type error in application
11:22:14 <Stewart002> *** Expression     : filter befdeparture flights
11:22:14 <Stewart002> *** Term           : befdeparture
11:22:14 <Stewart002> *** Type           : Float -> Record -> Bool
11:22:14 <Stewart002> *** Does not match : Record -> Bool
11:26:27 <Stewart002> oops, missed out 'time' it comiles now.
11:26:31 <Stewart002> compiles rather
11:54:46 <Stewart002> darn isp
11:56:24 <Stewart002> is there a command to take in a float (similar to getLine)
12:02:52 <Stewart002> I just wrote a function to take in a float and it's still giving an error.
12:05:12 <Heffalump> you could just use read
12:05:59 <Stewart002> this is what I'm trying to do
12:06:00 <Stewart002> query2b :: IO Float
12:06:00 <Stewart002> query2b = do putStr "What data do you know? "
12:06:00 <Stewart002>             fl1 <- getFloat
12:06:00 <Stewart002>             return (fl1)
12:09:45 <Stewart002> I just get
12:09:46 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":82 - Syntax error in input (unexpected symbol "fl1")
12:10:34 <tez> Check your indentation
12:10:56 <Stewart002> meh, you were right :)
12:12:08 <Stewart002> so how the hell am I going to input a Float?
12:12:30 * Heffalump suggests you use the "read" function.
12:12:40 * Stewart002 doesn't know how to.
12:13:02 <Stewart002> I tried the obvious but it gave errors
12:13:12 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":81 - Type error in generator
12:13:13 <Stewart002> *** Term           : read
12:13:13 <Stewart002> *** Type           : String -> b
12:13:13 <Stewart002> *** Does not match : IO a 
12:13:15 <ibid> Stewart002: getFloat :: IO Float     getFloat = getLine >>= read
12:13:19 <ibid> :-)
12:13:27 <ibid> hi dark
12:13:31 <dark> Hello
12:14:16 <Stewart002> :(
12:14:18 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":86 - Instance of Read (IO Float) required for definition of getFloat
12:15:00 <Heffalump> getFloat = do str <- getLine
12:15:06 <Heffalump>           return (read str)
12:15:09 <Heffalump> (correctly indented)
12:15:11 <Heffalump> or similar
12:16:03 <Stewart002> that doesn't return a Float
12:16:15 <Heffalump> what doesn't?
12:16:24 <Heffalump> oh, and put in an explicit type somewhere
12:16:24 <Stewart002> <Heffalump> getFloat = do str <- getLine
12:16:24 <Stewart002> <Heffalump>           return (read str)
12:16:30 <Heffalump> e.g. getFloat :: IO Float
12:16:40 <Stewart002> that's there too.
12:16:44 <Heffalump> and what goes wrong?
12:16:53 <Stewart002> [Char]
12:16:56 <Stewart002> returns
12:17:05 <Heffalump> str :: [Char]
12:17:08 <Heffalump> read str :: Float
12:18:02 <ibid> yeah, right, getFloat = getline >>= \s -> return $ (read s)::Float
12:19:55 <Stewart002> I think that worked (it either made a new error or solved that one)
12:21:49 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":86 - Syntax error in input (unexpected `=')
12:22:02 <ibid> line 86 is?
12:22:20 <Stewart002> trying to find out now
12:22:50 <Stewart002> getFloat = getFloat = getline >>= \s -> return $ (read s)::Float
12:23:04 <Stewart002> oops
12:23:10 <ibid> uhm, isn't the problem obvious?
12:23:20 <Stewart002> I'm being stupid, sorry
12:23:26 <Stewart002> I didn't see that (paste error)
12:24:05 <Stewart002> okay, same line
12:24:07 <Stewart002> ERROR "C:\My Documents\University work\programming paradigms\haskell.hs":86 - Type error in type annotation
12:24:07 <Stewart002> *** Term           : return $ read s
12:24:07 <Stewart002> *** Type           : a b
12:24:07 <Stewart002> *** Does not match : Float 
12:24:28 <ibid> ok, ((read s) :: Float)?
12:25:38 <Stewart002> now it returns a [Char]
12:26:25 <Stewart002> no, hold on.
12:26:29 * Stewart002 is soo stupid
12:29:02 * Stewart002 has it working now (just some similar functions to add for the same thing to different data and I'm done)
12:29:30 * Stewart002 promises that after December 10th he'll never haunt you guys again. :)
12:32:04 * Stewart002 goes to play ut2003 to clear his head, meh
14:20:36 <bas__> what's the haskell function to repeat some value n times? like f 'a' 5 would produce "aaaaa", where f is the function i am looking for...
14:22:05 <ibid> take 5 (cycle ['a']) is one possibility
14:24:09 <Igloo> replicate n
14:24:14 <bas__> replicate!
14:24:30 <Igloo> So technically f = flip replicate  :-)
14:24:56 <bas__> i actually forgot what it was called
14:25:27 * ibid usually does a visual grep of the report prelude in that situation...
14:27:20 <bas__> ibid: like... how!?
14:28:23 <ibid> look for visual grep in the jargon file :-)
14:29:26 <bas__> ibid: what/where is the jargon file?
14:29:46 <ibid> www.jargon.org
14:30:27 <ibid> sorry, vgrep
17:37:40 <bas__> how do i 'cast'(?) an Int to a String? just doing a concatenation doesn't seem to convert the type...
17:37:46 <bas__> like in "There are " ++ (length result)
17:38:05 <bas__> length result is of type Int and should become [Char]
17:39:28 <bas__> oh wait.. show seems to work... why isn't it called automagically in hugs?
17:44:01 <bas__> hmmm... i am talking to myself here :)
17:44:44 <Igloo> Because Haskell doesn't do type coercion
17:44:45 <Heffalump> hugs does call it automagically afaik
17:44:55 <Heffalump> (at the top-level interpreter)
17:45:06 <Igloo> It would make debugging a complete nightmare, even compared to now
17:45:10 <bas__> anyone know how to 'expand' a string? i want to transform a string "abc" to "a b c"... i tried:  foldr1 g str   where g c1 c2 = c1 ++ " " ++ c2 ... which doesn't work
17:45:44 <bas__> Heffalump: i tried it without show... no success!
17:45:50 <Heffalump> interesting
17:46:02 <Igloo> intersperse ' ' will do it
17:46:26 <bas__> intersperse!?
17:46:29 <bas__> never heard of it!
17:46:32 <Igloo> To understand why your fold doesn't work consider the types
17:46:33 <Heffalump> you have now :-)
17:47:01 <bas__> hmm.. Undefined variable "intersperse"
17:47:07 <bas__> is it in the std prelude?
17:47:21 <Igloo> Try importing List
17:47:42 <bas__> Igloo: yep, worked :)
17:48:04 <bas__> and i really wonder why my foldr1 didn't work!
17:50:09 <Igloo> What is the type of foldr1 (a) in general and (b) in this case?
17:50:22 <bas__> foldr1 :: (a -> a -> a) -> [a] -> a
17:50:23 <bas__> foldr1 :: (a -> a -> a) -> [a] -> a
17:50:30 <bas__> that's twice...
17:50:38 <bas__> i tried a   f (s1, s2) = (foldr1 g s1) ++ "\n" ++ s2 ++ "\n"
17:50:57 <bas__> where g is:
17:50:58 <bas__>   g c1 c2 = c1 ++ " " ++ c2
17:51:43 <Igloo> So you would expect your function to work on a list of elements of any type?
17:52:09 <bas__> no.... maybe that's the problem :)
17:52:22 <bas__> but anyway i like this intersperse... good code reuse!
17:52:27 <bas__> thanks for the tip
17:54:29 <Igloo> Then the type of the foldr1 in this case isn't going to be (a -> a -> a) -> [a] -> a
17:54:32 <Igloo> np
