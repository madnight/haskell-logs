01:32:44 <Fractal> Get your Blowfish in haskell, hot off the press: http://www.hcsw.org/haskell/blowfish.hs
01:43:15 <dnm> neat!
02:00:56 <dnm> Fractal: Is that your site? <http://www.hcsw.org/haskell/>
03:53:07 <andersca> hey shapr
03:53:28 <shapr> hi andersca
03:53:40 <dnm> hey shapr!
03:54:00 <shapr> hi dnm, ltns, how's life?
03:56:30 * shapr lags horribly
03:58:23 <dnm> not bad
03:58:24 <dnm> you?
03:59:22 <shapr> dnm: I'm fine, getting started on business here in Sweden.
03:59:47 <shapr> Since Haskell is more common in Sweden than most other places, maybe I can get some purely functional jobs here :-)
04:05:41 * shapr bounces
04:09:03 <dnm> heh
04:09:07 <dnm> so you moved?
04:09:14 <dnm> where are you now?
04:10:46 <shapr> now I live in Boden, Sweden... not so far away from codefactory.se
04:13:01 <dnm> oh wow
04:13:12 <dnm> Swedish BEEP dudes
04:13:48 <dnm> you and bea up and moved why again?
04:14:02 <shapr> yah, they did MrProject as well
04:15:11 <shapr> We moved into the same town as our two closest friends in europe. These two friends also own their own business, so we're trying to get a collaboration going. Ove runs an ISP, and Beate does translation, EU project management, etc
04:16:03 <shapr> dnm: how's your employment and fun situation? didn't you move to the west of north america recently?
04:16:06 <dnm> Ah
04:16:10 <dnm> Yeah, I'm in SF.
04:16:12 <dnm> Working.
04:17:26 <dnm> Wanting to visit Ireland and other places in the EU with friends a lot lately.
04:17:56 <shapr> feel free to come to Boden if you wish :-)
04:18:22 <shapr> I can give you a place to sleep for a few days.
04:18:28 <dnm> heh, that would be cool. won't be for a while, if at all, but i'll keep you posted. what's your canonical email?
04:19:08 <shapr> right now, shae at ScannedInAvian dot com
04:19:25 <dnm> hah hah
04:19:55 <shapr> :-)
04:35:35 <dnm> So shapr.
04:35:40 <dnm> What are you working on in Haskell?
04:35:41 <shapr> yes?
04:35:57 <shapr> various projects... CurryAttack is a Crack-Attack clone
04:36:28 <shapr> I'd like to write an xmlrpc plugin for HWS-WP, but I'm still investigating that
04:36:43 <dnm> I couldn't load the HWS-WP earlier. What is it?
04:36:56 <shapr> haskell web server with plugins
04:37:08 <shapr> it uses the runtime loader from o3 ( Andre Pang )
04:37:35 <shapr> the webserver plugin system is based on apache's plugin system
04:37:38 <shapr> it's quite spiffy
04:39:46 <dnm> interesting
04:40:26 <shapr> I'm quite interested in the runtime loader
04:41:09 <shapr> I'd like to see if it's possible to do erlang style runtime upgrading
04:42:32 <ayrnieu> shapr - can you have code from the latest and the last version of code loaded at the same time, so that Concurrent Haskell processes could be running the code of one version or the other?
04:43:04 <shapr> ayrnieu: I dunno... that's the kind of stuff I'd like to find out.
04:43:14 <ayrnieu> shapr - oh, OK.
04:47:48 <shapr> ayrnieu: I suspect a runtime upgrader is possible, just need to write the logic as a wrapper around the basic runtime loader
04:50:44 <dnm> going to attempt sleep. later everyone.
04:50:52 <shapr> g'night dnm
04:55:53 <shapr> hi RixiM
04:55:58 <RixiM> hi
04:56:17 <shapr> do you have any haskell questions?
04:56:41 <RixiM> well, i have no idea what it is really :)
04:56:49 <RixiM> i'm looking it up now
04:57:33 <shapr> Haskell is a purely functional programming language.
04:58:23 <RixiM> yeah i've gotten that far :)
04:58:32 <shapr> are you a programmer?
04:58:36 <RixiM> it's interesting because i'm reading up on self as well...
04:58:39 <RixiM> yes.
04:58:43 <shapr> ah, Self is extracool
04:58:47 <shapr> for a variety of reasons
04:59:00 <RixiM> it seems like they are the two extremes...
04:59:09 <shapr> hmm
04:59:20 * shapr thinks about that
04:59:35 <shapr> I guess that's true if you think about typed and untyped messages
04:59:44 <ayrnieu> Rixi - two extremes on what dimension?
05:00:11 <shapr> un/typed messages?
05:00:18 <RixiM> well, one being purely functional the other being really heavy on the objects.
05:00:22 <shapr> everything is a message in Self, but everything is very strongly typed in Haskell?
05:00:38 <shapr> Self doesn't have objects ;-)
05:00:42 <shapr> it only has prototypes/instances
05:01:39 <shapr> the most common idea of "objects" require the dual hierarchy of class and instance
05:01:58 <shapr> I think the single hierarchy of instances + delegation is much more orthogonal.
05:02:31 <ayrnieu> rixi - the problem with your polarization is that there are more than two poles (logical programming), and that the poles you've set up can coincide (O'Haskell, &c).
05:02:45 <shapr> truly
05:02:48 <shapr> there are many poles
05:02:57 <shapr> sometimes it's hard to get them all straight in my head.
05:03:20 <RixiM> hmm.
05:03:38 <shapr> records in Haskell are a lot like objects
05:03:41 <RixiM> how is prototype/instance different from class/object?
05:03:48 <shapr> types can work like objects also
05:04:00 <shapr> in Self, you only have instances
05:04:17 <shapr> you know class and instance?
05:04:21 <shapr> what languages do you use now?
05:04:23 <RixiM> yes.
05:04:30 <RixiM> well, i've learned a little about a lot.
05:04:31 <RixiM> lisp
05:04:32 <RixiM> C
05:04:34 <RixiM> java
05:04:37 <RixiM> prolog
05:04:44 <shapr> ok, we'll go with Java
05:04:54 <shapr> no matter how stupid it is ;-)
05:05:13 <ayrnieu> rixi - in class/object OO systems, you have a defined set of classes -- which are not objects in themselves, and only from which you can derive new classes or objects.  In Self, AFAICT, you have prototype/instance (which is not a dichotomy).
05:05:29 <shapr> right prototype ~= instance
05:05:53 <shapr> (I think this is true) in the genesis of Self, they had only one instance
05:06:10 <shapr> they created a 'sub-instance' which was then a duplicate of the parent instance.
05:06:34 <shapr> in fact, the sub-instance was nothing more than a transparent redirector to the parent instance
05:06:38 <shapr> that's called "delegation"
05:06:39 <RixiM> ah
05:06:40 <RixiM> ok
05:06:44 <RixiM> that helped a lot.
05:06:56 <shapr> then they changed the child instance so that it handled some messages by itself
05:07:10 <shapr> everything that it didn't handle got sent to the parent instance for handling
05:07:11 <RixiM> the transparent redirector thing makes sense.
05:07:21 <ayrnieu> Ruby is capable of very Self-like programming, I think.
05:07:37 <shapr> yah Kragen wrote Self.py for python
05:07:52 <shapr> metaclasses in Python should let you do Self-like programming very simply
05:08:06 <RixiM> hmm...
05:08:41 <shapr> personally, I'd like to use a language that gives me the option of doing it either way
05:08:49 <RixiM> i'm interested implementing  
05:08:49 <RixiM>  a language in hardware that will easily let me 
05:09:07 <RixiM> write other langauges in it.
05:09:13 <ayrnieu> rixi - Forth or Lisp.
05:09:23 <shapr> I'd also like to use a language that gives me the option of using continuations instead of function calls and threads, since continuations are a superset of both
05:09:39 <RixiM> hmm
05:09:54 <RixiM> wouldn't lisp be sort of hard to impement in hardware though?
05:10:07 <ayrnieu> rixi - no, it wouldn't.
05:10:18 <shapr> it's already been done with the LispM
05:10:36 <ayrnieu> rixi - you're probably thinking of CL and thinking (hey, that language is *huge*)
05:10:48 * shapr agrees, CL is *huge*
05:10:54 <RixiM> well, i know that at the core it's very small...
05:11:02 <RixiM> but i don't really know how small...
05:11:37 <ayrnieu> rixi - since there's no defined core of CL, it doesn't much matter.  Obviously you should look toward the Lisp machine and the literature on the subject.
05:11:52 <RixiM> indeed...
05:12:24 <RixiM> but haven't people stopped using lisp machines because of their price preformance when compared to risc processors?
05:13:04 <ayrnieu> rixi - I've no idea why people stoppped using lisp machines.
05:13:15 <RixiM> ok, i'm reading up on it.
05:13:52 * ayrnieu wonders if rixi automatically accepted the assertion that Forth would also be a good choice.
05:16:08 <RixiM> umm sort of.
05:16:26 <RixiM> i've never used forth at all, but if i recall it's stack based and has a small instruction set...
05:16:58 <RixiM> i don't really want to bootstrap all the stuff i want to do in forth and it's already written in lisp...
05:17:16 * ayrnieu shrugs.
05:18:38 <shapr> check out miasma :-)
05:20:23 <RixiM> what is that?
05:21:18 <shapr> http://www.accesscom.com/~darius/software/miasma/index.html
05:48:08 <shapr> hi shreya
07:36:39 <tinus> hmm
07:37:28 <mgoetze> tinus: i agree
07:40:15 <tinus> thank you
07:40:23 <tinus> what can i do about this:
07:40:28 <tinus> ERROR - Cannot find "show" function for:
07:40:38 <Heffalump> for what?
07:40:50 <Heffalump> the generic answer is to make a Show instance for the appropriate type
07:40:54 <tinus> hmm, i'll paste the whole tinhf
07:40:58 <tinus> Recepten2> parse_result (gewicht_eenheid "test")
07:40:58 <tinus> ERROR - Cannot find "show" function for:
07:40:58 <tinus> *** Expression : parse_result (gewicht_eenheid "test")
07:40:58 <tinus> *** Of type    : Gewicht_eenheid
07:41:10 <Heffalump> what is a Gewicht_eenheid?
07:41:21 <tinus> data Gewicht_eenheid =  Gram | Ons | Pond | Kilo
07:41:27 <tinus> just units
07:41:46 <tinus> i get the fact that it cannot display that
07:41:54 <mgoetze> tinus: the easy way out is to make Gewicht_eenheid a string type
07:41:58 <Heffalump> stick "deriving Show" at the end of the data declaration
07:42:01 <tinus> mgoetze: no can do
07:42:10 <ayrnieu> data Gewicht_eenheid =  Gram | Ons | Pond | Kilo deriving (Show)
07:42:37 <tinus> ayrnieu: oh, hmm
07:42:53 <ayrnieu> show Gram => "Gram"
07:43:14 <tinus> ah yes, thanks alot
07:43:24 <Heffalump> mgoetze|away: that's horrible!
07:43:31 <Heffalump> especially given deriving Show exists and is easy
07:44:00 <ayrnieu> also:  instance (Show Gewicht_eenheid) where show Gram = "Ons"; show Ons = "Pond"; show Pond = "Kilo"; show Kilo = "Gram" -- but you can't use this with 'deriving Show'
07:44:34 <Heffalump> it's equivalent to what deriving Show would do, but you can then change things as you wish
07:48:32 <tinus> now all i need to do is make a valid parser for it, which seems hard
07:49:27 <ayrnieu> You might look at Parsec.
07:50:03 <tinus> hey, made by a teacher of mine
07:52:01 <tinus> we already have a sortalike parser-lib we need to use
07:52:18 <tinus> but i am not sure howto handle these data types
07:54:43 <ayrnieu> That's too bad.  I'm sure that you'll figure it out.
07:55:09 <tinus> i hope so :)
08:03:25 <tinus> hmm
08:03:33 <tinus> i have this string: "100 gr"
08:03:41 <tinus> and want to parse it like this:
08:03:45 <tinus> gewicht :: Parser Char Gewicht_type
08:03:45 <tinus> gewicht = (\x y z -> (x,z)) <$> hoeveelheid <*> spaces <*> gewicht_eenheid
08:03:59 <tinus> where gewicht takes the 100, and gewicht_eenheid takes the gr
08:04:24 <tinus> gewicht_eenheid gives a Gram data type if the string equals "gr"
08:04:33 <tinus> any idea howto put this into a parser?
08:04:35 <Igloo> Does the parser library have a <* operator?
08:04:48 <tinus> <* ?
08:05:10 <Igloo> Ignores teh result to its right
08:05:23 <tinus> hmm, not that I know of
08:05:35 <tinus> ERROR "Recepten2.hs":179 - Undefined variable "<*"
08:05:46 <Igloo> OK, not important
08:05:53 <Igloo> I don't think I understand your question
08:06:11 <tinus> that's prolly because i am not quite sure what i need
08:06:33 <Igloo> Oh, you are having trouble writing gewicht_eenheid?
08:06:57 * Heffalump is having trouble reading gewicht_eenheid :-)
08:06:58 <tinus> i want to parse a string like "100 gr" into [(100,Gram)]
08:07:03 <Igloo> :-)
08:07:12 <tinus> it's like this:
08:07:14 <tinus> type Gewicht_type    =  (Hoeveelheid, Gewicht_eenheid)
08:07:18 <tinus> data Gewicht_eenheid =  Gram | Ons | Pond | Kilo deriving (Show)
08:07:27 <Igloo> And which bit are you currently trying to write?
08:07:38 <tinus> the parser
08:07:58 <Igloo> Given what you have above I'm expecting either hoeveelheid, spaces or gewicht_eenheid
08:08:27 <tinus> oh, gewicht_eenheid
08:08:33 <ayrnieu> instance (Read Gewicht_eenheid) where read Gram = "gr"; read Ons = ...
08:08:38 <tinus> i think i can do hoeveelheid
08:08:54 <Igloo> OK, so can you write a parser that returns Gram if the input is "gr"?
08:08:55 <Marvin--> ayrnieu: err, I thought you had to define readsPrec...
08:09:01 <tinus> Igloo: right
08:09:15 <tinus> Igloo: i need that, but not sure howto do it
08:09:19 <ayrnieu> let [a,b] = words "100 gr" in [read a :: Integer, read b :: Gewicht_eenheid]
08:09:38 <ayrnieu> Marvin - I've never actually defined an instance of Read.
08:09:40 <tinus> ayrnieu: that does not fit in my current parser library
08:09:48 <tinus> http://www.cs.uu.nl/docs/vakken/gont/2002/praktikum/opgave3/ParseLib.hs
08:10:09 <Igloo> tinus: OK, what's a parser that just matches the input "tr"?
08:10:14 <Marvin--> tinus: Fokker?
08:10:25 <tinus> Marvin--: nope, Johan Jeuring
08:10:31 <Marvin--> okay
08:10:51 <tinus> Fokker gives Imperatic Programming
08:10:54 <tinus> Impertiv
08:10:56 <tinus> e
08:10:59 <ayrnieu> tinus - you might read the parsec documentation, as it seems close to what you want.
08:11:25 <tinus> hmm, ok
08:11:27 <Marvin--> tinus: well, he's also written a Haskell parse lib ;)
08:11:40 <tinus> Marvin--: he did? hmm
08:11:54 <Marvin--> tinus: if we're talking about Jeroen Fokker (modulo spelling, I'm not Dutch :P)
08:12:13 <Marvin--> I have no idea how common the name Fokker is
08:12:16 <tinus> i know Arjan van IJzerdoorn is making an interpreter
08:12:17 <Igloo> tinus: Do you know how to write a parser that just matches "gr"?
08:12:22 <tinus> Marvin--: yeah, Jeroen
08:12:36 <tinus> Igloo: no, that is the problem
08:13:16 <tinus> hoeveelheid = (\x -> fromInt x::Float) <$> newdigit
08:13:22 <tinus> that would be correct afaik
08:13:33 <tinus> so the hoeveelheid bit is done
08:14:07 <Heffalump> errm, I thought Daan Leijen wrote Parsec?
08:14:24 <Igloo> Ermmm, do you know how to write one that matches 'g'?
08:14:29 <tinus> Heffalump: they might co-operate, since they both work at the same dept
08:15:18 <tinus> Igloo: yeah: parse = (\x -> x) <$> symbol 'g'
08:15:49 <Igloo> OK, so how about one that matches 'g' followed by 'r' and returns the pair of values?
08:16:33 <tinus> parse = (\x y -> (x,y)) <$> symbol 'g' <*> symbol 'r'  ?
08:16:53 <Igloo> Right, so one that matches 'g' followed by 'r' and returns Gram?
08:17:24 <tinus> euhm
08:17:50 <tinus> not sure ...
08:18:25 <ayrnieu> parse = Gram <$> symbol 'g' <*> symbol 'r' -- ?
08:18:42 <ayrnieu> (\x y -> Gram)
08:18:45 <tinus> just like that?
08:19:21 <ayrnieu> I wouldn't know, tinus.
08:19:31 <tinus> Recepten2> parse_result (gewicht_eenheid "gr")
08:19:32 <tinus> Gram
08:19:35 <tinus> so yes, that works :)
08:19:37 <tinus> thanks
08:19:49 <Igloo> Think about what the function does and it will hopefully become clear
08:20:12 <tinus> i think i understand
08:20:18 <tinus> but now i only covered Gram
08:20:46 <Igloo> Presumably you have a <|> operator or similar?
08:20:53 <tinus> yeah, i do
08:21:00 <ayrnieu> Do you know how to right a parser that matches either "gr" or whatever-the-string-of-Ons-is?
08:21:13 <ayrnieu> (write, even)
08:21:34 <ayrnieu> (you might right the parser if it had been wronged)
08:21:45 <tinus> heh
08:22:36 <tinus> i don't think i do know
08:22:58 <tinus> gewicht_eenheid = (\x y -> Gram) <$> symbol 'g' <*> symbol 'r'
08:22:59 <tinus>                   <|> (\x y z-> Ons) <$> symbol 'o' <*> symbol 'n' <*> symbol 's'
08:23:01 <tinus> seems to work
08:23:39 <tinus> is there an other way to do "symbol 'o' <*> symbol 'n' <*> symbol 's'" ?
08:23:47 <ayrnieu> gewicht_eenheid = matchGr <|> matchOns where ...
08:23:58 <tinus> ayrnieu: good one
08:24:02 <ayrnieu> tinus - you might write a 'symbols' parser
08:24:31 <ayrnieu> symbols (x:xs) = symbol x <*> symbols xs
08:24:56 <ayrnieu> well, probably better to match the list-of-one-element first, and then the list-of-multiple-elements.
08:27:04 <tinus> hmm, ok
08:27:10 <tinus> i'll fiddle around
08:27:13 <tinus> thanks alot :)
08:27:22 <Igloo> You'll want to apply something to the front of that
08:27:40 <ayrnieu> symbols = foldl1 symbol
08:28:09 <ayrnieu> err, no.
08:28:12 <Igloo> Symbol doesn't combine things...
08:28:18 <Igloo> s/S/s/
08:28:18 <tinus> *** Type           : a -> Parser a a
08:28:18 <tinus> *** Does not match : [(a,[a])] -> [(a,[a])] -> [(a,[a])]
08:28:45 <ayrnieu> symbols = foldl1 (\a b -> symbol a <*> b) -- ?
08:29:05 <tinus> nope
08:29:16 <tinus> type error
08:29:22 <Igloo> foldl1 won't allow a flexible enough type - you'll ned foldl (or foldr)
08:29:24 <ayrnieu> OK.
08:29:44 <Igloo> And you'll still want to apply something sensible at the front
08:30:02 <Igloo> (or in fact build a list all the way through, probably)
08:30:05 <ayrnieu> I suppose that 'symbols [x] = symbol x; symbols (x:xs) = symbol x <*> symbols xs' is the best, then.
08:31:02 <ayrnieu> Oh, for the return value.  I assumed that that would be done at the caller.
08:31:27 <ayrnieu> (\a b c -> Ons) <$> symbols "ons"
08:31:39 <Igloo> They are left-associative operators
08:32:12 <Igloo> (at least I'd be amazed if they weren't)
08:32:22 <tinus> ayrnieu: your last one doesn't work though
08:32:27 <tinus> *** Type           : [a] -> [(a,[a])]
08:32:27 <tinus> *** Does not match : [a] -> [(a -> b,[a])]
08:32:27 <tinus> *** Because        : unification would give infinite type
08:35:00 * ayrnieu shrugs.
08:47:15 <Igloo> Euch, I want to be able to declare instances of tuples and lists of particular types
08:51:42 <tinus> deriving Show only works on datas?
08:51:50 <tinus> hmm
08:52:17 <Heffalump> if you want to use it on a type, make it a newtype instead
08:53:49 <tinus> newtype?
08:53:54 <tinus> haven't heard that one befoer
08:55:36 <ayrnieu> tinus - think of it as a typechecked 'type'
08:59:36 <tinus> the use of it in this case is not clear to me
09:00:23 <tinus> it cannot find the "Show" function for my type
09:00:38 <ayrnieu> tinus - a 'type' assertion just lets the compiler know that you will occasionally refer to some type by another name.
09:00:50 <ayrnieu> tinus - yes, you have to create one (through deriving or otherwise)
09:04:07 <tinus> i see
09:13:17 <tinus> if only that damned symbols thing would work
09:14:28 <ayrnieu> The parsec documentation defines it.
09:14:48 <ayrnieu> Maybe analogously.
09:23:35 <tinus> hmm, nope
09:24:58 <ayrnieu> I've read something that I've classified as 'parsec documentation' which defines it.
09:25:27 <ayrnieu> Only the documentation called it 'string', or such.
09:28:01 <ayrnieu> yes, parsec.ps has 'word'
09:28:13 <ayrnieu> word :: Parser String
09:28:46 <ayrnieu> word = do { c <- letter; do { cs <- word; return (c:cs) } <|> return [c] }
09:29:04 <tinus> ah yes
09:29:10 <ayrnieu> I don't suppose you find that very useful, though.
09:29:40 <tinus> i think i do
09:30:54 <tinus> mm, first i need f00d
09:32:18 <Heffalump> f00d!
09:32:23 * Heffalump just had a little
09:56:38 * shapr sighs
10:01:55 <Igloo_> Re ADSL, shapr?
10:03:34 <shapr> yah, I have ADSL now, that's good
10:03:42 <shapr> it's 512k, which is nice
10:03:52 <shapr> otoh, it has other flaws I was not aware of...
10:04:44 <shapr> the DSL modem is doing ethernet bridging, and I'm sposed to have one box on this side of the bridge doing DHCP
10:05:27 <shapr> in actuality, I have five boxen on this side of the bridge, but I can only get a DHCP Offer for one of them...
10:08:23 <Igloo_> Oh, that's normal for cheap deals - just masquerade the rest
10:13:16 <shapr> I wonder if I can bind a 192.168 addy at the same time as the DHCP addy
10:13:40 <Heffalump> get a router instead of a bridge?
10:15:01 <shapr> I wonder if I can convince my dsl modem to do the dhcp request and then pass out dhcp addys to the internal lan...
10:15:25 <Heffalump> having two DHCP servers on the same net serving different ranges is a recipe for disaster
10:16:39 <shapr> if my dsl modem NATs it'll work
10:16:47 * shapr goes off to try that
10:32:28 <tinus> gah
10:42:45 <tinus> ayrnieu: you still here?
10:43:58 <ayrnieu> tinus - yes.
10:44:16 <tinus> this word/symbols thing still isn;t working
10:44:28 <tinus> i keep getting errors
10:44:44 <tinus> you happen to have another hint/clue/idea?
10:45:24 <ayrnieu> What code do you have?  What errors do you get?
10:45:35 <tinus> symbols [x]    = symbol x
10:45:35 <tinus> symbols (x:xs) = symbol x <*> symbols xs
10:45:38 <tinus> reults into:
10:45:42 <tinus> ERROR "Recepten2.hs":156 - Type error in application
10:45:42 <tinus> *** Expression     : symbol x <*> symbols xs
10:45:42 <tinus> *** Term           : symbol x
10:45:42 <tinus> *** Type           : [a] -> [(a,[a])]
10:45:42 <tinus> *** Does not match : [a] -> [(a -> b,[a])]
10:45:43 <tinus> *** Because        : unification would give infinite type
10:46:39 <Heffalump> what's the type of <*> ?
10:47:26 <ayrnieu> :t (<*>)
10:47:43 <tinus> sec
10:47:52 <tinus> Recepten2> :t (<*>)
10:47:52 <tinus> (<*>) :: Parser a (b -> c) -> Parser a b -> Parser a c
10:48:20 <Heffalump> is there something that makes a tuple?
10:48:28 <ayrnieu> What is the definition of 'Parser'?
10:49:00 <Heffalump> is there a <$>, and what's its type, if so?
10:49:21 <Heffalump> I suspect you want (:) <$> symbol x <*> symbols xs
10:49:27 <tinus> Recepten2> :t (<$>)
10:49:27 <tinus> (<$>) :: (a -> b) -> Parser c a -> Parser c b
10:49:38 <Heffalump> ok, that's what you want then
10:49:58 <tinus> nearly:
10:50:03 <tinus> ERROR "Recepten2.hs":156 - Type error in application
10:50:03 <tinus> *** Expression     : (:) <$> symbol x <*> symbols xs
10:50:03 <tinus> *** Term           : (:) <$> symbol x
10:50:03 <tinus> *** Type           : [a] -> [([a] -> [a],[a])]
10:50:03 <tinus> *** Does not match : [a] -> [(a -> [a],[a])]
10:50:03 <tinus> *** Because        : unification would give infinite type
10:50:04 <Heffalump> and symbols [x]  = (\e -> [e]) <$> ...
10:50:21 <tinus> right on
10:50:31 <tinus> now lemme see wht you did
10:50:58 <Heffalump> being lazy, I'll let you work it out for yourself or someone else explain it :-)
10:53:14 <tinus> but now i cannot use it this way:
10:53:31 <tinus> symbol 'd' <*> symbol 'l' -> symbols "dl"
10:53:43 <tinus> *** Type           : [Char] -> [(a -> Volume_eenheid,[Char])]
10:53:44 <tinus> *** Does not match : [Char] -> [(Volume_eenheid,[Char])]
10:54:08 <Heffalump> you can't really mean -> in the middle of that, can you?
10:54:18 <tinus> no, i mean
10:54:19 <ayrnieu> if you meant {symbol 'd' <*> symbol 'l' <*> symbols "dl"}, how is 'symbol' defined?
10:54:42 <tinus> rewrite "symbol 'd' <*> symbol 'l'" with "symbols "dl""
10:54:58 <tinus> since that is the reason why i am writing symbols
10:55:12 <Heffalump> what does symbol 'd' actually do?
10:55:12 <ayrnieu> how is 'symbol' defined?
10:55:30 <Heffalump> what's its type, in particular?
10:56:24 <tinus> Recepten2> :t symbol
10:56:24 <tinus> symbol :: Eq a => a -> Parser a a
10:56:36 <tinus> defined as:
10:56:37 <tinus> symbol a []                  =  []
10:56:37 <tinus> symbol a (x:xs) | x == a     =  [(x,xs)]
10:56:37 <tinus>                 | otherwise  =  [] 
10:56:52 <Heffalump> right
10:57:13 <Heffalump> I don't understand how "symbol 'd' <*> symbol 'a'" typechecks then.
10:57:52 <Igloo_> Because it's the RHS of a <$>
10:57:55 <tinus> nm, got it!
10:57:57 <tinus> stupid me
10:58:12 <Igloo_> Or rather it isn't because it's all left assoc
10:58:24 <Heffalump> ahh :-)
10:59:00 <tinus> thanks tons, guys
11:45:40 <hdaume> is it just me or has fptools gotten unreasonably large recently?
11:48:24 <Igloo_> How do you mean?
11:49:00 <Igloo_> SM sent a message to a list saying more libraries should be held outside and the implementations should provide better support for it
11:51:48 <hdaume> i dunno...i just did a fresh cvs co for fptools and it downloaded a whole heck of a lot more than it used to (mostly regressing testing stuff, i think)
11:52:12 <Igloo> I hadn't noticed a recent huge growth
11:52:32 <Igloo> But new tests are continually added
11:52:59 <ChoJin> hi
11:53:08 <hdaume> maybe...i haven't checked it out in like a month
11:55:24 <Marvin--> tests good
12:47:33 <ibid> upload noticed :-)
12:47:46 <Heffalump> :-)
14:22:12 <Fractal> K
14:22:30 <Heffalump> L
14:22:38 <ibid> M
14:24:20 <andersca> N?
14:25:38 <Fractal> Er, you should probably ignore the "K". :)
14:25:51 <Heffalump> too late.
14:25:55 <Heffalump> you've unleashed a monster.
14:26:27 <ibid> O
14:26:47 <Fractal> Heh.
14:26:50 * ibid just watched the world is not enough, so M and Q sound most appropriate :-)
14:27:19 <Heffalump> :-)
15:32:31 <tinus> i have another (yes, another) q about parsing
15:32:57 <tinus> how can i define a data where an empty list is part of?
15:33:16 <tinus> like, when i parse, it might but doesn't need to have a result
15:33:29 <tinus> if it does, save the result, if not, save an empty list
15:33:41 <tinus> should i use Maybe?
15:33:44 <Heffalump> there's probably a "always succeed" parser
15:33:53 <tinus> oh, right
15:33:57 <tinus> lemme see
15:34:58 <tinus> succeed       :: a -> Parser s a
15:34:58 <tinus> succeed r xs  =  [(r,xs)]
15:36:40 <Heffalump> ok, so foo <|> succeed []
15:36:42 <Heffalump> is what you want
15:37:04 <Igloo> foo `opt` [] might be equivalent
15:41:17 <tinus> hmm, damn errors, heh
16:00:36 <andersca> isn't there a list partitioning function?
16:00:54 <Heffalump> partition
16:01:05 <andersca> that's what I though :)
16:03:43 <Igloo> It's probably in List rather than Prelude if that's what's confusing you
16:04:54 <andersca> Igloo: nah, I got a syntax error in hugs and then the prelude won't be read
16:04:59 <andersca> so :t partition didn't work
16:07:15 <andersca> so, if I have a list of Either values
16:07:26 <andersca> and I want to divide it into two lists with Left and Right values
16:08:10 <andersca> what's the easiest way to do that?
16:11:59 <Igloo> Defining {is,from}{Left,Right} and using filter/map would be one way
16:12:43 <Igloo> Or define a pair of functions to use with foldr, one for Left and one for Right
16:12:52 <Igloo> Or just write 2 recursive functions
16:14:41 <andersca> nod
16:14:43 <andersca> thanks
16:16:47 <andersca> lefts = map (\(Left h) -> h) (filter isLeft xs)
16:16:48 <andersca> rights = map (\(Right h) -> h) (filter (not . isLeft) xs)
16:16:48 <andersca> 		   isLeft (Left _) = True
16:16:48 <andersca> 		   isLeft _ = False
16:16:49 <andersca> this is what I did
16:25:00 <tinus> this succeed thing doesn't work either
16:25:37 <tinus> "foo <|> succeed []" complains about incorrect types
16:26:00 <tinus> but that;s right, because [] is not part of the data that foo results
16:26:24 <tinus> *** Type           : [Char] -> [([b],[Char])]
16:26:24 <tinus> *** Does not match : [Char] -> [([Char] -> a,[Char])]
16:26:53 <tinus> i don't get it ...
16:29:56 <Igloo> What is the type of foo?
16:30:03 <tinus> data Maat           =  Gewicht Gewicht_type | Volume Volume_type | Aantal Aantal_type deriving (Show)
16:30:08 <tinus> foo = Maat
16:30:18 <Igloo> Huh?
16:30:29 <tinus> well
16:30:34 <tinus> maat :: Parser Char Maat
16:30:40 <tinus> foo == maat
16:30:41 <tinus> then
16:30:45 <Igloo> Right, OK
16:31:00 <Igloo> I suspect your definition of maat is wrong
16:31:00 <tinus> so [] is not part of Maat
16:31:11 <Igloo> Oh, but you have given is an explicit type?
16:31:42 <tinus> well, see:
16:31:46 <tinus> type Ingredient     =  ([Maat],Waar)
16:31:50 <tinus> and then:
16:31:51 <Igloo> maat <|> succeed [] doesn't make sense, anyway, as you say. What are you trying to achieve?
16:31:53 <tinus> ingredient :: Parser Char Ingredient
16:31:53 <tinus> ingredient = (\x y z -> ([x], z)) <$> option maat [] <*> spaces <*> waar
16:32:08 <tinus> so ingredient is a parser for Ingredient
16:32:35 <tinus> and i need Ingredients like: ([],Waar) to be possible
16:32:36 <Igloo> Right, so you want the choice of a singleton list of Maats or []?
16:32:48 <tinus> right
16:33:06 <tinus> and option      :: Parser s a -> a -> Parser s a
16:33:09 <Igloo> So you need to do the listifying on maat, not outside of option
16:33:27 <tinus> hmm?
16:33:47 <Igloo> option should return [a]
16:33:58 <Igloo> (well, Parser s [a])
16:34:12 <tinus> oh, is that the problem?
16:34:34 <tinus> but i am already doing: (\x y z -> ([x], z))
16:34:56 <tinus> thats not good enough?
16:35:34 <Igloo> Well look at the option maat [] bit
16:35:49 <Igloo> The result of that has to be either a maat or somethign else, right?
16:35:55 <tinus> yeah
16:36:01 <Igloo> And the way you are representing that is singleton list or empty list, right?
16:36:14 <tinus> hmm, yes
16:36:28 <Igloo> So you must do it at that point or you lose the information
16:36:56 <tinus> doing "option maat (Aantal (0.0,[]))" works fine
16:37:04 <tinus> it's just the [] that breaks stuff
16:37:09 <tinus> since [] is not part of Maat
16:37:30 <tinus> get my point?
16:37:58 <Igloo> Try defining    option :: Parser s a -> :: Parser s [a]
16:39:30 <tinus> huh?
16:39:34 <tinus> what would that help?
16:42:09 <Igloo> Well, alternatively use the definition you have but write something else to make the result of maat a singleton list
16:43:19 <tinus> but that still doesnt solve the issue, does it?
16:43:46 <tinus> i think the problem is that Ingredient cannot have an empty list at the [MAat] bit
16:43:46 <Igloo> Why do you say that?
16:43:53 <tinus> type Ingredient     =  ([Maat],Waar)
16:43:55 <Igloo> It can
16:44:03 <tinus> can an instance be ([],Waar) ?
16:44:13 <Igloo> Yes (if Waar is a value of type Waar)
16:44:39 <Igloo> The problem, as you said earlier, is that option maat [] needs a == Maat and a == [b]
16:44:49 <Igloo> Which can't be unified
16:45:55 <tinus> hmm, ok
16:46:25 <tinus> so i need to change (\x y z -> ([x], z))
16:46:43 <tinus> since the making of a singleton is happening here
16:46:46 <Igloo> Yup
16:47:03 <tinus> got an idea howto  rewrite it then?
16:47:51 <Igloo> Yes, but I don't plan on doing your homework for you  :-)
16:48:09 <tinus> hehe, fair enough :)
16:50:51 <tinus> hmm
16:55:14 <tinus> got it :D
16:57:01 <Pseudonym> andersca: Here's a tricky solution.
16:57:10 <tinus> thanks Igloo 
16:57:16 <Pseudonym> leftrights xys = leftrights' (:[]) (:[]) xys
16:57:22 <Igloo> np  :-)
16:57:32 <Pseudonym> Oh, hang on.
16:58:06 * tinus listens to Kraftwerk
16:59:16 <Pseudonym> leftrights xys = let (xs,ys) = leftrights' id id xys in (xs [], ys [])
16:59:17 <Pseudonym> leftrights' xs ys [] = (xs, ys)
16:59:17 <Pseudonym> leftrights' xs ys (Left  x:xys) = leftrights' ((x:).xs) ys xys
16:59:19 <Pseudonym> leftrights' xs ys (Right x:xys) = leftrights' xs ((y:).ys) xys
16:59:20 <Pseudonym> There you go.
17:00:41 <Pseudonym> Sorry, THIS one works:
17:00:42 <Pseudonym> leftrights xys = let (xs,ys) = leftrights' id id xys in (xs [], ys [])
17:00:42 <Pseudonym> leftrights' xs ys [] = (xs, ys)
17:00:42 <Pseudonym> leftrights' xs ys (Left  x:xys) = leftrights' (xs.(x:)) ys xys
17:00:42 <Pseudonym> leftrights' xs ys (Right y:xys) = leftrights' xs (ys.(y:)) xys
17:00:59 * Pseudonym learns to debug before posting
17:01:08 <andersca> oh man
17:01:29 <andersca> yeah, it makes sense
17:01:33 <Igloo> You could write that as foldr f ([], []) where f is, ermmm  f (Left x) (xs, ys) = (x:xs, ys) and similarly for Right
17:01:50 <Pseudonym> Yes, but there's a lot of packing and unpacking in there.
17:01:56 <Pseudonym> And it's not lazy.
17:02:09 <Pseudonym> Erm... OK, mine isn't either.
17:02:09 <tinus> i am wondering, what doyou guys use Haskell for?
17:02:09 <Igloo> How is it not lazy?
17:02:17 <tinus> like, for what kind of projects?
17:02:32 * Igloo was going for clear code rather than optimal code
17:02:36 <Pseudonym> Sure.
17:02:45 <Pseudonym> I'm trying to work out if it will work on infinite lists or not.\
17:02:50 <Igloo> tinus: Everything possible  :-)
17:03:04 <hdaume> tinus: i used to use it for everything i write (mostly statistical natural language processing), but i'm moved some of my more time-critical code over to ocaml (unfortunately)
17:03:05 <Igloo> foldr (:) [] works on infinite lists, and mine is essentially the same
17:03:11 <Pseudonym> True.
17:03:25 <Pseudonym> OK, you win.
17:03:30 <tinus> ah, i see
17:03:41 <Pseudonym> tinus: There's a joke that Haskell is optimised for writing Haskell compilers.
17:04:12 <Pseudonym> I mostly use it for prototyping, personally.
17:04:19 <tinus> yeah, that seems to say my thought in the right words
17:04:20 <andersca> hmm, does the io monad support mutable state?
17:04:26 <Pseudonym> That's because I get paid to hack in something else.
17:04:29 * Igloo wonders why it doesn't in fact work
17:04:31 <tinus> i can see loads of purposes of Haskell,though
17:04:49 <tinus> but I am just wondering how often it is used in "real life", if you know what i mean ...
17:05:27 <Igloo> Oh, because pattern matching of tuples isn't lazy
17:05:48 <Igloo> But a ~ in the right place (x2) fixes it
17:07:39 <hdaume> tinus: for most definitions of "real life": never
17:08:23 <Pseudonym> There's "real life" and there's "real life".
17:08:30 <tinus> hdaume: no production projects or anything?
17:08:45 <Pseudonym> Once again, there's "production" and there's "production".
17:08:51 <tinus> Pseudonym: blah :P
17:09:11 <Pseudonym> Lots of research projects, some consultantcy stuff.  No shrinkwrap so far if that's what you mean.
17:09:24 <Igloo> Perhaps everyone will use harc if Dark gets it finished
17:09:33 <tinus> harc?
17:10:07 <Igloo> Or hgpg if I get it finished (hello Pseudonym!) - but I hope not as Haskell can't lock bits of memory  :-)
17:10:31 <Igloo> A Haskell reimplementation of arch/larch, a CVS replacement
17:10:37 <Pseudonym> :-)
17:11:32 <tinus> ah
17:11:36 <tinus> hmm, getting late
17:11:41 <tinus> 2:10am
17:11:47 <tinus> i'd better sleep now
17:11:51 <tinus> night.
17:12:14 <Igloo> Night
