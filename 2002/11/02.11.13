02:18:10 <tinus> hello
02:18:17 <tinus> how do i get a String from a Float?
02:18:26 <Heffalump> show
02:18:54 <tinus> ah yes, thanks :)
04:09:51 <tinus> hmm
04:09:55 <tinus> i have this type:
04:09:58 <tinus> type Aantal_type     =  (Hoeveelheid, [Aantal_eenheid])
04:10:02 <tinus> data Aantal_eenheid  =  Eetlepel | Zakje | Blikje | Blokje | Sneetje 
04:10:13 <tinus> but [Aantal_eenheid] can also be [] (empty)
04:10:37 <tinus> how would I include that in:
04:10:38 <tinus>     where f Eetlepel = "eetlepel"
04:10:38 <tinus>           f Zakje    = "zakje"
04:10:38 <tinus>           f Blikje   = "blikje"
04:10:38 <tinus>           f Blokje   = "blokje"
04:10:38 <tinus>           f Sneetje  = "sneetje"
04:10:47 <tinus> because i cannot put f []       = "" there
04:10:57 <Heffalump> concat (map f ...) ?
04:11:10 <Heffalump> if you only want it to be a list of 0 or 1 elements, then use Maybe instead
04:11:44 <tinus> yeah, i was thinking of Maybe, but this assignment tells me Maybe has not been used in this course, so won't be used at all
04:12:01 <tinus> but I think i rather will
04:12:35 <tinus> how does one use Maybe?
04:12:35 <justme84> where do you need that "f"?
04:12:46 <justme84> maybe you don't have to make a case for empty lists
04:13:01 <tinus> yeah, but i cannot put that in the f list
04:13:22 <tinus> ERROR "/home/tinus/uni/gont/Recepten1.hs":119 - Type error in function binding
04:13:22 <tinus> *** Term           : f
04:13:22 <tinus> *** Type           : [a] -> String
04:13:22 <tinus> *** Does not match : Aantal_eenheid -> String
04:13:22 <justme84> what list?
04:13:27 <tinus> the list above
04:13:30 <justme84> ah
04:13:31 <tinus> which defines f
04:13:48 <justme84> well you can use concat and map, as Heffalump said
04:13:50 <justme84> can't you?
04:14:23 <justme84> anyway, to use Maybe you just have a type Maybe Aantal_eenheid and use that
04:14:41 <justme84> f would look like f Just Zakje = "zakje" and so on
04:14:41 <Heffalump> you just put Maybe Aantal... instead of [Aantal...]
04:14:42 <justme84> and f Nothing = ""
04:14:47 <Heffalump> f (Just Zakje)
04:14:56 <justme84> yes, that precedence always gets me
04:14:57 <Heffalump> the brackets are important
04:15:13 <tinus> ah yes
04:15:20 <tinus> well, concat/map works fine
04:15:26 <tinus> but breaks my other thing
04:15:35 <tinus> but thats ok, i can easily fix that
04:15:46 <tinus> using Maybe is kind of prohibited by my teacher
04:18:27 <tinus> thanks guys
05:20:52 <andersca> yo Marvin--
05:22:42 <Marvin--> yo
08:15:04 <dark> It's annoying that "default" is a reserved word.  Especially when it does so little.
08:16:37 <Heffalump> what does it do?
08:17:17 <dark> It selects the type for unadorned numbers in the source, if there's no other type information.
08:18:28 <Heffalump> in Haskell 98?
08:19:06 <dark> Yep.
08:19:31 <dark> See?  It's hardly ever used :)
08:19:48 <Heffalump> heh
08:19:56 <dark> And now I have to go with either the too-short "def" or too-long "default_value" in my code.
08:20:02 <dark> I use default values a lot when playing with Maybe types.
08:21:08 <Vulpyne> How about another word that means default?
08:21:14 <Vulpyne> Like "fallback".
08:35:56 <hdaume> hi all
09:00:32 <ibid> dark: is default a keyword? if not, you can hide it
09:00:42 <hdaume> default is a keyword
09:01:48 <ibid> yes, just looked at the report
09:17:42 <ibid> Igloo etc, have you people ita'd the package yet?
09:17:47 <Heffalump> nope.
09:17:57 <Heffalump> (what does ita stand for?)
09:17:59 <ibid> better do soon
09:18:04 <ibid> intent to adopy
09:18:07 <ibid> adopt
09:18:12 <Heffalump> right
09:18:16 <Heffalump> what's the rush?
09:18:37 <Heffalump> presumably Igloo needs to do it since he's a developer
09:18:44 <Heffalump> (he's away until later today)
09:18:44 <ibid> see http://www.debian.org/devel/wnpp/
09:19:00 <ibid> Heffalump: as long as it's listed as rfa, i can get new offers :-)
09:19:38 <ibid> and i've already consented to a couple of people taking it over but they have done nothing about it. ita'ing would make it clear that the package is being adopted
09:19:39 <Heffalump> ah
09:19:51 <Heffalump> how soon after ITAing should we upload?
09:21:08 <ibid> as soon as possible
09:21:24 <ibid> but as long as i know you are working on it, it's not a big problem
09:21:29 <Heffalump> well, I think the timing of our ITA will be determined by the time we expect to be able to upload in, rather than vice-versa
09:21:51 <Heffalump> tell you what, we'll ITA once we actually do something (apart from installing arch, which is what we've done so far)
09:21:56 <ibid> heh
09:22:13 <ibid> well, i'll retract the rfa and upload a version with igloo in uploaders
09:22:23 <ibid> i think that's a reasonable way to signal...
09:22:31 <ibid> i'll also fix the builddep problem
09:22:48 <Heffalump> ok, if you're happy with doing that before we actually do anything
09:23:05 <Heffalump> I think Igloo said he might not have time to do anything for a week from Monday or whenever it was we discussed it
09:23:37 <ibid> Heffalump: i'll still keep myself as the head maintainer, though, as long as you are not ready
09:23:56 <ibid> Heffalump: but the uploaders thing will allow igloo to make authorized maintainer uploads
09:23:59 <Heffalump> ah, right
09:25:30 <ibid> just remember to sync your repo with my uploads :-)
09:27:00 <Heffalump> yeah :-)
09:27:38 <ibid> there is only one rule: as long as i'm the head maintainer, the package uses my build system
09:27:52 <ibid> you get to debhelperize or whatever only after the real adoption :-)
09:29:03 <Heffalump> right :-)
09:29:11 <Heffalump> so we have to do one upload using your build system?
09:29:52 <ibid> well, you can do the adoption upload and the change in the same upload
09:30:08 <ibid> but any upload which has me as the head maintainer has my build system
09:40:32 <dark> Yup, default is a keyword.
11:01:54 <ibid> haskell-doc_19991028-2_i386.changes
11:01:54 <ibid> ACCEPT
11:02:00 <ibid> (simulation)
12:10:03 <SyntaxPolice> hello.  I'm writing a parser and frequently find myself in a situation where I have to put together a "data" object piecewise, so I have code that looks like this:  fun (P _ b c d) a' = (P a' b c d)
12:10:18 <SyntaxPolice> I think in ML there's an operator to do somethign like that by position
12:10:38 <SyntaxPolice> is there any such function or operator in Haskell, or is that the best way to do it?
12:12:19 <justme84> I remember seeing something like non-destructive update
12:12:26 <justme84> but I don't remember if it was in Clean or in Haskell :)
12:12:55 <justme84> and you'd have to create a type out of a, b, c and d then
12:29:43 <dark> Hmm, is ghc smart enough to switch between (+ 1) and (1 +) if one of them is better?
12:33:57 <hdaume> no
12:34:51 <hdaume> because what if (+) isn't commutative?
12:43:45 <dark> hdaume: But if it knows it's Int?
13:05:53 <hdaume> SyntaxPolice: you could use named fields
13:06:00 <Rainer> SyntaxPolice: non destructive updates by name in haskell goes like
13:06:01 <hdaume> dark: probably it could, but i doubt it does
13:06:35 <Rainer> "if p is a point, then p {point=2} is a point with the same pointy as p ...
13:06:37 <hdaume> dark: though in the case of int, i don't see why it would matter
13:07:00 <Marvin--> pointy hats?
13:07:09 <Rainer> ...but with pointx replaced by 2" p.29, Gentle Intro
13:07:17 * Marvin-- plays a gnome in D&D
13:08:20 <Rainer> err ...{pointx=2}...
13:11:53 <SyntaxPolice> Raier, hdaume cool.  I happen to already have named fields even :)
13:12:51 <SyntaxPolice> has anyone had trouble w/ using the --make flag in ghc and having seg faults?
13:13:09 <SyntaxPolice> if I delete all the .o files and rebuild (with the --make flag) I get no seg faults.
13:13:31 <SyntaxPolice> I should be more clear...
13:13:36 <SyntaxPolice> ghc doesn't seg fault, my program does.
13:13:36 <dark> SyntaxPolice: Did you build with --make from the beginning?
13:14:57 <SyntaxPolice> dark: not sure what you mean.  If I build with --make, it works.  THen I alter a file, rebuild with --make, then my program segfaultrs
13:15:05 <SyntaxPolice> if I remove all .o files, rebuild with --make, then it works.
13:15:21 <Rainer> H
13:16:14 <dark> SyntaxPolice: That's odd, I never had that.
13:16:56 <hdaume> SyntaxPolice: you're not building sometimes with profiling on, sometimes not, right?
13:18:05 <SyntaxPolice> right. in fact very little has changed int he meantime :).  It is possible that this only happens when I regenerate a Happy source file.
13:18:09 <SyntaxPolice> I'll test some more.
13:20:20 <dark> I actually build sometimes with profiling on, and sometimes not, and it goes fine.  ghc --make realizes that it needs to rebuild everything if I change the profiling flag.
13:33:09 <hdaume> dark: really?  that's new behavior to me
13:33:23 <hdaume> dark: doesn't really matter since i name my profiled objects/his differently anyway, but nice to know
14:10:03 <jadrian> hello
14:10:15 <Rainer> hi
14:10:21 <jadrian> hi rainer
14:13:07 <jadrian> so what's up in here?
14:13:37 <Rainer> dunno, just discover this channel today
14:13:56 <jadrian> ah
14:13:58 <Rainer> from the communities report
14:14:19 <jadrian> sometimes it is kind of quiet
14:14:31 <dark> When we're all coding, for example :-)
14:14:33 <Rainer> i figured that i think:)
14:14:39 <jadrian> :)
14:15:17 <dark> I'm hacking up a function that takes a list of items, and a list of preference funtions, and finds the permutation of the list of items that satisfies the most preferences.
14:15:35 <dark> I notice that there used to be a "permutations" function in Haskell 1.3 but it's not in Haskell 98.
14:15:37 <jadrian> yeap
14:15:46 <dark> I wonder if I can just copy its definition from the Haskell 1.3 Prelude :-0
14:16:13 <jadrian> I had lot's of permutations functions I did for fun
14:16:28 <jadrian> I think I have them in a zip at my office though
14:16:35 <dark> (I know it sounds expensive, but the list of items has a max length of 6 :-)
14:16:49 <jadrian> :)
14:17:35 <jadrian> hmm maybe it's here
14:18:32 <jadrian> yeap
14:18:49 <jadrian> dark: you want it?
14:19:13 <dark> jadrian: Yeah :)
14:20:03 <jadrian> hmm what's that command you use to copy something from your account when you dont have an ftp server runing?
14:20:22 <jadrian> they changed the ftp proxy... 
14:20:32 <jadrian> and I need to get it from my account...
14:22:03 <jadrian> I know, I'll just mutt it to me :)
14:23:36 <dark> I'd use scp :)
14:23:48 <jadrian> I just used "mail" :)
14:23:55 <jadrian> I did that a long time ago...
14:24:02 <jadrian> and the comments are in portuguese :)
14:24:06 <jadrian> but it should do
14:24:17 <dark> Hmm the dcc failed :)
14:24:31 <jadrian> it is still waiting here...
14:24:47 <jadrian> want me to mail it?
14:24:57 <dark> That would be nice.  I never figured out dcc.
14:25:17 <jadrian> where should I send it too?
14:25:25 <dark> dark@xs4all.nl
14:25:53 <jadrian> sent 
14:25:57 <dark> Okay, thanks :-)
14:26:02 <jadrian> also I just noticed I got some comments like
14:26:04 <jadrian> -------------
14:26:10 <jadrian> I don't know if ghci likes that
14:26:18 <jadrian> (hugs didn't mind by then)
14:26:26 <dark> Why wouldn't it, though?
14:26:31 <jadrian> I think you might have to change it to -- ------
14:26:34 <dark> Oh :)
14:26:44 <dark> Well I have "----" at the end of my license blurb, that works fine.
14:26:54 <jadrian> must be ok then
14:27:00 <jadrian> I know that --> doesn't work
14:27:29 * jadrian has got to go and figure out what to do with is state problem :(
14:28:05 <dark> Is it okay if I take some of your functions and put them in code that has this license? :
14:28:06 <dark> You may freely use, modify, and distribute this software, as well as
14:28:06 <dark> modified versions and derived works of this software, but at your own
14:28:06 <dark> risk.  NO WARRANTY is given; not even the implied warranty of
14:28:06 <dark> merchantability or fitness for a particular purpose.
14:28:21 <jadrian> it's ok :)
14:28:26 <dark> Ok, thanks :)
14:28:49 <jadrian> I remember some of the functions were pretty crazy, but some even ended up beeing quite efficient
14:29:15 <dark> I'm happy with functions that look good :)  I'll worry about efficiency after I have enough code to start profiling.
14:29:18 <jadrian> After doing permuattions in ways that seemed intuitive
14:29:34 <jadrian> I wanted to do some ways of finding permutations that were kind of crazy
14:29:38 <jadrian> check them out :)
14:29:45 <dark> The Haskell 1.3 Prelude version looked pretty slow to me, though.
14:31:10 * dark exercises his portuguese :-)
14:31:15 <jadrian> dark: opss I just noticed I have the portuguese version of the F word there (with some * and %...)
14:31:25 <jadrian> dark: but you might want to change that :)
14:32:09 <jadrian> dark: it was something like f*** this looks good :)
14:32:16 <dark> What's "evito"?
14:32:35 <jadrian> eu evito = I avoid 
14:34:09 * jadrian has got to go and think :((((
14:34:15 <dark> Hmm, in that case your speed effect might have been from deforestation, if you were using interpreters that actually generated temporary lists when using map.
14:34:50 <jadrian> yeap
14:35:27 <dark> Hmm, I wonder if I could adapt some of these strategies for permuting 6-tuples instead of lists :)
14:35:30 <jadrian> It was a long time ago, I didn't know much about efficiency back then...
14:35:42 <jadrian> yeap it's easy
14:36:01 <jadrian> list2touple.perm.touple2list
14:36:02 <dark> jadrian: I don't know much about efficiency now, I just complain here sometimes and people give me advice :)
14:36:28 <jadrian> dark: I know the feeling, I think I knwo more about it now
14:36:46 * pk5 is away: zzz
14:37:08 <dark> The thing is that the preference functions would be happier with a directly addressable structure (tuple or array), while the permutation functions would (so far) be happier with a list.
14:37:33 <dark> Since I'll be doing this 720 times per base list, I'd like to avoid extra conversions :)
14:37:38 <jadrian> hmmmmm
14:38:03 <dark> Then again, maybe my computer will do my 720 operations in an eyeblink and still have time left over for a quiet game of chess.
14:38:08 <jadrian> You could probably make good algorithms with arrays too
14:38:21 <jadrian> but current arrays implementation suck
14:38:32 <dark> jadrian: ghc has UArray which probably sucks less.
14:38:34 <jadrian> I really looking forward to Manuel C. fast arrays
14:38:46 <dark> jadrian: It's an array with strict, unboxed elements.
14:39:00 <jadrian> dark: I know, but you don't have nice manipulation functions
14:39:08 <jadrian> dark: and stuff ends up looking pretty bad
14:39:29 <dark> Yeah, I don't like the way arrays are constructed, at least.
14:39:38 <jadrian> yeap
14:39:40 <dark> You have to create this list of pairs and hope it gets optimized away :)
14:39:59 * jadrian has got to go, got to take care of my poor algorithm... :(((
14:40:05 <jadrian> oh well...
14:40:30 <jadrian> see ya dark!
14:59:31 <Igloo> ibid?
15:38:32 * Pseudonym lives
15:38:59 <Igloo> Hiya
15:39:05 <Pseudonym> G'day.
15:51:55 <Heffalump> 'lo
15:52:45 * Igloo wonders if I should prod Pseud about inflate or take his silence as disinterest/lack of time  :-)
15:58:21 <Pseudonym> So far, lack of time. :_)
15:58:28 * Pseudonym still intends to do that, though
15:58:41 <Pseudonym> If you have some spare tuits...
16:01:15 <Igloo> Only square ones
17:15:11 <jadrian> hello
17:15:44 <Igloo> Hi
17:15:50 <jadrian> hi Igloo
17:16:13 <jadrian> Igloo: still playing with template haskell
17:16:16 <jadrian> ?
17:16:56 <Igloo> Yes (although I probably won't have a working compiler again for a few days  :-/)
17:17:39 <jadrian> CVS problems?
17:18:49 <Igloo> My build try broke, possibly due to Simon Marlow altering the build system. I will hopefully have access to cvs.haskell.org RSN, so waiting to check that out before rebuilding would make sense, plus I am unlikely to have time to play much until Monday anyway
17:18:54 <Igloo> s/try/tree/
17:19:20 <jadrian> I'd like to play around with it too, but I'm not much of a CVS guy
17:19:29 <jadrian> I need a working compiler :)
17:20:12 <Igloo> It's not too difficult, and there are easy instructions on teh GHC website
17:20:37 <Igloo> Only thing is I'm not sure what make install does after Simon M's last changes
17:20:45 <jadrian> got to try it out sometime...
17:21:19 <Igloo> It's probably enabled in the snapshots on www.haskell.org, actually
17:22:33 <jadrian> what is enabled?
17:22:48 <Igloo> Template Haskell
17:23:05 <jadrian> ah in the snapshots, yes maybe
17:24:00 <jadrian> I still have generics to play around with
17:24:25 <jadrian> In fact they could probably be useful to me right now...
17:31:02 <jadrian> hmm it just ocurred me... can you define records of records, without explicitly defining the inner records? No right?
17:31:12 <jadrian> oh wait
17:31:30 <jadrian> ah nah...
17:31:54 <Igloo> Right
17:32:08 <jadrian> it would be nice though
17:32:27 * Igloo looks unconvinced
17:33:47 <jadrian> well it would just be a type without a name...
17:34:20 <Igloo> And why would it be useful? To simplify pattern matching?
17:34:56 <jadrian> you mean, useful not having to declare the type, or to have records of records?
17:35:12 <Igloo> records of records
17:35:20 <jadrian> good question
17:35:35 <jadrian> give me a sec and I'll tell you wether it is usefull or not, k?
17:35:36 <jadrian> :)
17:35:56 <Igloo> :-)
17:39:45 <jadrian> hmmmmm
17:39:50 <jadrian> 1st part ok
17:39:55 <jadrian> Igloo: just one more sec
17:41:55 <jadrian> nope
17:41:58 <jadrian> not useful
17:42:00 <jadrian> :(
17:42:30 <jadrian> was just trying to hack something, I'm getting this really weird error...
17:43:07 <jadrian> And I was looking for a workaround. Didn't work.
19:46:59 <Dr3n> can I use ur topic in another channel pleasE?
19:49:30 <Pseudonym> ?
21:35:48 <ibid> Igloo: ?
23:58:01 <lament> damn, I love haskell
23:58:05 <lament> And I don't even know it
