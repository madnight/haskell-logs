09:02:22 <moxx> hi
09:02:50 <ayrnieu> Hello moxx.
11:08:12 <Heffalump> hi
11:08:18 <dark> Greetings
11:20:00 <andersca> dennisb?
11:39:51 <Igloo> Euch, what's the nicest way to write \x -> x - 1?
11:40:16 <ayrnieu> (flip (-) 1)
11:40:53 <Igloo> Hmmm, not convinced that's nicer
11:41:41 <ayrnieu> Um, hack GHC to redefine unary minus as ~ and use - only as binary subtraction.
11:41:47 <ayrnieu> (-1)
11:42:07 <Igloo> Hmmm  :-)
11:42:49 <Igloo> Aha, I can negate it at the beginning and then use (1 +)
11:43:32 <ayrnieu> (+(-1)), but OK
11:43:49 <ayrnieu> pred x = x-1
13:26:12 <ludde-> men talk 2% of the time. women talk 8% of the time. There are 50 men and 50 women. What is the probability that exactly N persons talk at the same time?
13:26:47 <Heffalump> why are you asking us? :-)
13:27:00 <ludde-> maybe you know? :)
13:27:21 <Heffalump> well, I don't want to do your homework for you :-)
13:27:26 <Heffalump> (if that's what it is)
13:27:46 <ludde-> yep. or actually a modified version of the homework.
13:28:12 <Heffalump> it's just the sum of two binomial distributions, isn't it?
13:28:23 <Igloo> You're assuming independence
13:28:32 <ludde-> uhm maybe.. this is not a statistics course.. but a course in digital communications.
13:28:54 <Heffalump> igloo: well, if that's all the information there is, then without independence it's not possible to get an answer
13:29:24 <Igloo> I never said it was soluble if you didn't make that (or some other) assumption  :-)
13:29:29 <Heffalump> and it's usually a reasonable assumption (especially if you assume this is really an abstract problem and ignore the obvious social factors)
13:29:42 <ludde-> independence is a valid assumption.
13:30:07 <dark> "Let's assume a spherical cow..."
13:31:09 <ludde-> any idea how to approach the problem?
13:31:44 <Heffalump> yes, see above :-)
13:31:51 <Heffalump> do you know how to solve it if it's just the men?
13:32:16 <ludde-> (1-0.02)^n*0.02^(50-n)
13:32:24 <Heffalump> not quite.
13:32:27 <ludde-> oh?
13:32:30 <ludde-> err
13:32:36 <ludde-> (1-0.02)^(50-n)*0.02^n
13:32:40 <ludde-> err
13:32:41 <ludde-> yeah
13:32:46 <Heffalump> no
13:32:47 <ludde-> is that wrong?
13:32:54 <ludde-> in that case I don't know
13:33:00 <Heffalump> that's the probability that a *particular* set of n people will be the only ones talking
13:33:11 <Heffalump> you need to consider the fact that it could be any set of n people
13:33:19 <ludde-> oh
13:33:47 <dark> I never found a clean way to generalize this to <= n.
13:33:59 <dark> Then again, I slept through most statistics courses :-)
13:34:07 <ludde-> i've never taken any statistics course.
13:34:48 <ludde-> the lecturer in digital communications seems to believe that everyone alredy knows about this kind of stuff
13:34:48 <ludde-> so he hasn't talked about it.
13:34:48 <ludde-> err
13:34:48 <ludde-> she
13:36:21 <Heffalump> dark: there isn't one, you just have to take the sum
13:36:34 <Heffalump> ludde-: ah, it's in the A-level maths syllabus in this country
13:36:43 <Heffalump> ludde-: look up binomial distributions in Google or something
13:37:10 <Heffalump> but basically there's 50!/(n! * (50-n)!) ways of choosing n people from 50 people, so you have to multiply the probability above by that factor
13:37:30 <ludde-> yeah, that's n over 50
13:37:35 <ludde-> or, 50 over n
13:37:48 <ludde-> what do you call it?
13:39:03 <Heffalump> 50 choose n, if I'm speaking it out loud
13:39:15 <Heffalump> in writing, sometimes superscript 50 C subscript n
13:39:22 <Heffalump> or sometimes 50 above n, all in brackets
13:39:48 <ludde-> ok
13:39:58 <ludde-> anyway
13:40:56 <ludde-> 50!/(n! * (50-n)!) * (1-0.02)^(50-n)*0.02^n then
13:41:21 <Heffalump> yeah
13:41:33 <Heffalump> and simiarly what's the probability that m women will be talking?
13:41:44 <ludde-> 50!/(n! * (50-n)!) * (1-0.08)^(50-n)*0.08^n
13:41:56 <Heffalump> note the m in my question
13:42:03 <ludde-> 50!/(m! * (50-m)!) * (1-0.08)^(50-m)*0.08^m
13:42:25 <Heffalump> ok, so what's the probability that precisely n men and m women are talking?
13:42:25 <ludde-> but i need to combine these in some way.
13:42:46 <ludde-> 50!/(n! * (50-n)!) * (1-0.02)^(50-n)*0.02^n * 50!/(m! * (50-m)!) * (1-0.08)^(50-m)*0.08^m
13:43:09 <Heffalump> ok, so now you just need to add these values up for all n and m that add up to N
13:43:18 <ludde-> ohh
13:43:28 <Marvin--> we solved the damn series with \phi(n) :-)
13:43:38 <Heffalump> Marvin--: wossat?
13:43:38 <dark> I still think it's a silly question in the first place.
13:43:41 <ludde-> \phi(n) ?
13:44:00 <Heffalump> dark: why, cos everyone knows women talk far more than 8% of the time?
13:44:17 <Marvin--> Heffalump: number theory, we had a series n goes from 1 to \inf of \phi(n)*x^n/(1-x^n)  and had to prove that it was equal to x/(1-x)^2
13:45:01 <Marvin--> ludde-: Euler's phi function
13:46:42 <Marvin--> I think we soon have solved all nine problems we have to hand in on monday *mutter*
15:15:13 <esap> What is your opinion on the great debate on OO vs functional on comp.lang.functional? :-)
15:16:57 <Pseudonym> My opinion is to stay well away from it.
15:17:38 <esap> heh, agreed :-) But also I think there were some good points on the relation between algebraic data types and OO.
15:17:59 * Pseudonym hasn't read it
15:18:03 <Pseudonym> Just trolling.
15:18:49 <Pseudonym> Without reading the thread, my general opinion is that OO and FP have identified the same problem with traditional languages, namely global state.
15:19:00 <Pseudonym> OO's solution is to partition it into a lot of local states.
15:19:15 <Pseudonym> FP's solution is to get rid of state altogether.
15:19:28 <Pseudonym> (And simulate it if you find you really needed it after all.)
15:19:50 <esap> hmm... interesting. There is a third alternative: Distribute the state....
15:20:01 <Pseudonym> Right, which is the Erlang solution.
15:20:18 <Pseudonym> Also the DCOM/CORBA solution.
15:20:40 <esap> hmm... I think CORBA is actually the OO solution.
15:20:56 <Pseudonym> Also: When you need algebraic data types, objects will not do.  When you need objects, algebraic data types will not do.
15:21:12 <Pseudonym> Though there is a lot of area in the middle where either will do.
15:21:35 <Pseudonym> CORBA and DCOM are very similar in philosophy.
15:22:04 <esap> I think the most important difference is in extensibility. In OO, you implement new subtypes. In algebraic data types, you implement more functions. Bot both leave the other side inflexible.
15:22:13 <jadrian> hi
15:22:19 <Pseudonym> G'day, jadrian.
15:22:23 <jadrian> hi Pseudonym
15:22:41 <Pseudonym> esap: Ah, but type classes are extensible in yet another way which traditional OO doesn't support.
15:22:42 <jadrian> by the way, yes I was right about beeing wrong yesterday
15:22:46 <jadrian> :)
15:23:05 <jadrian> I knew I was missing something and I had even thought about it before
15:23:28 <esap> pseudonym: yes, type classes are really quite interesting concept.
15:24:06 <jadrian> a mapM' :: (Monad m) => (a -> b) -> [m a] -> [m b] is just a map of a lifted function...
15:25:10 <Pseudonym> esap: The really nice thing about type classes is that you can extend a type with a new interface at any time.
15:25:28 <Pseudonym> There is only one thing missing from typeclasses, IMO.
15:25:37 <Pseudonym> That's the ability to downcast an interface.
15:25:47 <esap> pseudonym: I think that actually comes always when you have proper interface.
15:25:48 <Pseudonym> jadrian: Yes.  mapM' = fmap
15:26:02 <jadrian> downcast?
15:26:06 <Pseudonym> Yes.
15:26:10 <Pseudonym> Here's the problem:
15:26:12 <esap> pseudonym: there is no need for downcast.
15:26:21 <Pseudonym> class (Foo a) => Bar a where { stuff }
15:26:24 <Pseudonym> Now you have:
15:26:54 <Pseudonym> Now if you have something that has a Foo interface, you want to know at runtime if it also has a Bar interface.
15:27:09 <Pseudonym> esap: The problem is extensibility.
15:27:19 <esap> pseudonym: type classes are not intended for run-time type information.
15:27:32 <Pseudonym> Absolutely.
15:27:54 <esap> pseudonym: you should be using existential types in that case anyway.
15:27:54 <Pseudonym> All I'm saying is that this is the one feature which IMO is missing from typeclasses.
15:28:01 <Pseudonym> Existential types don't help.
15:28:12 <esap> why?
15:28:35 <Pseudonym> Well how would you do this with existential types
15:28:36 <Pseudonym> ?
15:29:19 <Heffalump> Pseudonym: but after type checking you'll know the type, so you'll know if the object is of type Bar or not
15:29:22 <jadrian> hmmm do you think that should be 'standard' haskell? it seems like met programming
15:29:29 <jadrian> s/met/meta
15:29:33 <esap> data Foo = forall a. Foo { stuff }
15:29:57 <Pseudonym> Heffalump: Not in the kind of cases I'm thinking of.
15:30:27 <Heffalump> well, give me an example of the code you'd like to write
15:30:39 <Pseudonym> OK.  First off, I want heterogeneous containers.
15:30:41 <esap> pseudonym: data Bar = forall a. Bar { x :: Foo ; stuff2 }
15:30:42 <Pseudonym> tThat's easy.
15:30:49 <Heffalump> well, with existential types
15:30:56 <Pseudonym> data FOO = forall a. (Foo a) => FOO a
15:31:16 <Pseudonym> Now if I'm given a FOO, I want to know if it also has a Bar interface.
15:31:38 <Pseudonym> I want something sort of like this:
15:31:56 <Pseudonym> fooToBar :: (Foo a) => a -> (forall b. Bar b => b)
15:32:00 <Pseudonym> Sorry.
15:32:05 <Pseudonym> fooToBar :: (Foo a) => a -> Maybe (forall b. Bar b => b)
15:32:15 <Pseudonym> The issue is that it's basically unimplementable.
15:32:35 <Pseudonym> Compilers are allowed to optimise away unused instances.
15:32:59 <Pseudonym> You potentially need to keep all instances for all types around in the executable, and provide some way to query them.
15:33:03 <esap> Hmm.. could you use pattern matching on the constructor for this?
15:33:28 <Pseudonym> esap: No.  What if the instances are Foo Int and Bar Int?
15:33:40 <Pseudonym> What constructor would you pattern match on?
15:34:25 <esap> I mean, you should then probably use data X a = forall m. m a.
15:35:15 <esap> hmm.. uh oh, you do need a constructor for it anyway :-)
15:35:36 <Pseudonym> The only way around this as far as I can tell is to put cast methods in the superclass.
15:35:57 <esap> data X a = forall m. (F m) => X (m a)
15:36:20 <Pseudonym> Which is a common enough technique, but it's precisely what you don't want for maintainability.
15:36:22 <esap> then add a type class that provides the casting.
15:36:32 <Pseudonym> You don't want to have to modify the superclass every time you add a new subclass.
15:37:07 <Pseudonym> If you add a new type class for that, then you shift the problem from maintaining the superclass to maintaining the special type casting class.
15:37:12 <Pseudonym> Same difference, really.
15:38:02 <Pseudonym> It's not actually such a big deal.
15:38:15 <Pseudonym> Most OO programs rarely need downcasting.
15:38:19 <Heffalump> Pseudonym: can you give an example o fwhat you'd do with this knowledge?
15:38:21 <esap> ok, another idea: Maybe you can use fold and Rec for it?
15:38:47 <Pseudonym> Heffalump: OK.  Are you familiar with your OO design patterns?
15:38:52 <Heffalump> not really
15:38:55 <Heffalump> which pattern?
15:39:01 <Pseudonym> Composite.
15:39:03 <Heffalump> no
15:39:14 <Pseudonym> OK, here's a better example then: GUI widgets.
15:39:38 <Pseudonym> Uhm... OK, maybe not a good example.
15:39:53 <Heffalump> hmm, I'm going to bed shortly, so make it quick :-)
15:40:27 <esap> maybe it's really that existential types might actually need the downcast operation. [what would be the analogue in universal quantification side?]
15:41:01 <Pseudonym> Heffalump: I suggest you go to bed and ask me again tomorrow. :-)
15:41:06 <Pseudonym> Or when you get up if I'm still around.
15:41:08 <Heffalump> ok :-)
15:41:30 <Pseudonym> I have to think up a succinct example which doesn't require a lot of OO baggage.
15:41:54 <Pseudonym> esap: How could you use fold and Rec?
15:43:03 <esap> data Rec f = In (f (Rec f)). fold :: Functor f => (f a -> a) -> Rec f -> a; fold phi (In x) = phi (fmap (fold phi) x).
15:43:20 <Pseudonym> Yes, with you so far.
15:44:36 <esap> Then you provide an existential type that you provide the fold operation. You can use that you transform the encapsulated data structure to other similar structures (where you need not have encapsulation for the elements).
15:45:00 <esap> that is, you implement the Functor interface for it.
15:45:06 <Pseudonym> Right.
15:45:29 <esap> would this not solve the problem of heterogeneous data structures?
15:46:13 <esap> In particular, you can use fold and unfold for constructing and destroying such encapsulated structures.
15:46:15 <Pseudonym> OK, so let's say you have a bunch of data structures which, say, serialise themselves to XML.
15:46:39 <Pseudonym> class XMLDump a where { xmlDump :: a -> String }
15:46:42 <Pseudonym> OK/
15:46:44 <Pseudonym> OK?
15:46:55 <esap> ok.
15:47:15 <Pseudonym> Now you want to make a container class which has a list of objects all of which support the XMLDump interface.
15:47:22 <esap> hmm.. actually, that would be something that elements of the data structure implement.
15:47:38 <esap> right.
15:47:40 <Pseudonym> Where "list" could be any sequence.  Doesn't have to be a Haskell list.
15:48:13 <Pseudonym> (By which I mean, Rec/fold works better over some other type, we should use that instead.)
15:48:32 <Pseudonym> OK.  Now how can I represent this?
15:51:15 <esap> data Obj f = Functor f => forall a. (XMLDump a) => f a
15:51:21 <Pseudonym> OK.
15:52:12 <esap> Then have another data type that is used for constructing those.
15:52:35 <esap> data ObjRep f a = ObjRep (f a)
15:53:33 <Pseudonym> With you so far.
15:53:44 <esap> Then provide a function: construct :: Functor f => a -> ObjRep f a. You could also use a more specific f.
15:54:26 <esap> The idea is that this can be used to encapsulate an object with type a.
15:54:35 <esap> in a particular data structure.
15:55:22 <esap> and provide other methods for constructing this data structure. You end up with objects with type ObjRep X A with a specific X and A that contain your data.
15:55:58 <esap> But then, to build the polymorphic structure, you fold this structure and unfold it into (Obj X).
15:57:51 <esap> using a function with signatures: destroy :: (ObjRep X a -> a), construct_poly :: f a -> Obj f
15:59:17 <esap> now you can see that Obj f is like Rec f, so you should be able to write a function transform_poly : Rec f -> Obj f.
15:59:34 <esap> maybe have additional arguments for it.
15:59:44 <Pseudonym> My issue with all this is that there's already a simple solution.
16:00:07 <Pseudonym> Namely: data XMLDUMP = forall a. XMLDump a => XMLDUMP a
16:00:32 <Pseudonym> Then you can just make a list:
16:00:40 <Pseudonym> xs :: [XMLDUMP]
16:00:53 <Pseudonym> xs = [XMLDUMP 1, XMLDUMP 'a']
16:01:14 <esap> yes, but you cannot extend the interface for that.
16:01:29 <Pseudonym> I'm trying to work out the minimal extension.
16:02:16 <Pseudonym> I sort of get what you're saying here, incidentally, but it might be useful if there were a concrete example.  Is there a paper or something on applying this to a real world example?
16:03:24 <esap> well I'm not sure, I haven't read many papers on existential types [but the bananas in space paper is a great for the fold/rec stuff]
16:03:31 <Pseudonym> Sure.
16:03:47 <Pseudonym> I read a bit about bananas some time ago, and I found them not so useful at the time.
16:04:11 <Pseudonym> My goal in life, incidentally, is to turn Haskell into a language of choice for discriminating hackers.
16:04:17 <Pseudonym> As opposed to type theorists. :-)
16:04:20 <esap> Yea, took some time to understand it fully. You really do need some exposure to category theory to understand it.
16:04:37 <jadrian> lol! 
16:04:41 <jadrian> :)
16:05:04 <jadrian> (lol @ to turn Haskell into a language of choice for discriminating hackers :)
16:05:40 <Pseudonym> Well, Haskell already has a lot of features suitable for real world software development.
16:06:13 <Pseudonym> I've discovered a lot of nice hacks which work particularly well.
16:07:01 <esap> There are some good papers actually about the relationship between OO and algebraic data types by Erik Poll that I think illuminate the existential type problem.
16:07:08 <jadrian> esap: my I ask you if you recommend a book on cathegory theory + 'applications' in functional languages?
16:07:47 <esap> hmm.. wait a sec, I'll look up a good paper that explains the basics + applications.
16:07:59 <jadrian> esap: I do have cathegory theory knowladge
16:08:13 <jadrian> (a lil bit forgotten but I did study quite a bit)
16:08:45 <esap> oh ok, so you'd like something with category theory specifically for functional programming? Categories for Types is one of the good books about that.
16:09:09 <jadrian> yes, an be more than functional programming, but that also.
16:09:30 <jadrian> I studied using mostly "cathegory theory for the working mathmatitian"
16:09:56 <jadrian> esap: thanks :)
16:10:19 <esap> But for some category theory things, I can recommend Fokkinga: Adjunctions. Sorensen: Lectures on the Curry-Howard isomorphism, Hillman: What is a concept and Crolard: Subtractive logic.
16:10:45 <jadrian> cool, let me copy/paste that
16:11:12 <esap> oh and of course Hillman: A Categorical primer.
16:11:45 <jadrian> are all these books or online papers?
16:12:05 <esap> all but the categories for types can be found from citeseer.
16:12:16 <jadrian> nice :)
16:13:12 <esap> Also see: http://www.cs.kun.nl/~erikpoll/publications/, especially the "Subtyping and inheritance" papers.
16:13:48 <jadrian> ok, I think this will keep me busy for a while :)
16:14:03 <esap> heh :-)
16:14:40 <esap> I would also recommend Pitts: Categorical Logic, but it took me half a year to understand that :-)
16:14:55 <jadrian> lol 
16:15:18 <jadrian> I studied a lil bit of Topos(?)
16:15:32 <jadrian> (don't know if that's the english name for it)
16:15:47 <esap> I've been trying to understand duality and adjunctions. I think it's actually possible to design a programming language solely using adjunctions (and one or two primitives).
16:16:27 <jadrian> I have know idea what's the relation between adjunctions and program designs...
16:16:30 <esap> yes, I have read some Topos theory.
16:16:31 <jadrian> s/know/no
16:17:15 <esap> well here's one: _ \/ _ -| Delta(_) -| _ /\ _ , Delta(X) = X,X.
16:18:00 <esap> The counit and unit of those adjunctions are normal operations on products and coproducts.
16:18:21 <esap> Use those for the programming language and you already have half of the language :-)
16:18:55 <jadrian> ah I think got it 
16:19:38 <esap> Then A /\ _ -| A => _  produces functions and _ \\ A -| A \/ _ produces control operations.
16:20:27 <esap> exists -| subst -| forall produces universal and existential quantification.
16:20:39 <Pseudonym> Does anyone here know how H/Direct works?
16:21:12 <esap> and subst is the same as function composition, so you get a category just by having substitution and identity function in the language :-)
16:21:12 <jadrian> esap: I think I get the idea... I got to re-read quite a bit though...
16:21:38 <jadrian> Pseudonym: never used it...
16:22:00 <jadrian> Pseudonym: just one thing (I didn't want to interrupt you a while ago)
16:22:07 <jadrian> <jadrian> a mapM' :: (Monad m) => (a -> b) -> [m a] -> [m b] is just a map of a lifted function...
16:22:11 <jadrian> <Pseudonym> jadrian: Yes.  mapM' = fmap
16:22:18 <jadrian> Pseudonym: not quite...
16:22:30 <Pseudonym> Yes, I know.
16:22:37 <Pseudonym> It isn't quite.
16:22:50 <jadrian> mapM'= map.liftM   and liftM=fmap in that context
16:22:59 <Pseudonym> Right.
16:23:05 <jadrian> so mapM' = map.fmap  right?
16:23:11 * Pseudonym spotted that after he said it
16:23:13 <jadrian> (mapM' = fmap.fmap)
16:23:18 <Pseudonym> But the conversation went another way.
16:23:22 <jadrian> yeap
16:23:40 <jadrian> just making sure I'm not missing something :)
16:23:41 <Pseudonym> You're absolutely right.
16:24:04 <jadrian> k :)
16:27:13 * jadrian is going to get some sleep
16:27:15 <jadrian> bye!!
16:33:35 <esap> hmm.. gotta get some sleep also.
16:33:51 <Pseudonym> Night.
17:11:40 <dark> Pseudonym: The problem you described is also something I ran into when dreaming up a Streams interface.  I would have loved to have a SeekableStream class, but that would make it impossible to do seeking as a runtime optimization for operations that could be implemented with or without.
17:12:37 <Pseudonym> Right.
17:12:41 <Pseudonym> There you go. :-)
17:12:52 <Pseudonym> It occurred to me that H/Direct solves a similar problem.
17:13:01 <Pseudonym> Implementing QueryInterface.
17:13:10 <Pseudonym> However, I think it does this by escaping to C.
17:16:58 <dark> I think I'm not even close to hitting Haskell's limits, though :)
