03:01:29 <Marvin--> galority: coming or going?
03:02:11 <galority> now I am staying a little bit. I have configured my irssi a little bit. Sorry.
03:02:37 <Marvin--> :)
03:03:19 <galority> Marvin--: Perhaps (if I can find some time) I would like do make an FreeBSD port for hws-wp. What do you think about it?
03:04:13 <Marvin--> heh, cool
03:04:21 <Marvin--> what parts of it doesn't work on freebsd?
03:05:43 <galority> Marvin--: sorry, brb, my wife is waiting with the dinner. ttyl
03:05:55 <Marvin--> it works fine on linux and solaris
03:06:20 <galority> s/dinner/lunch/ ;o)
09:26:17 <cleverdra> ah, ghc-bug explains why I've never been able to build ghc.
09:26:26 <Igloo> Oh?
09:26:41 * Igloo has built it far too much these past few days  :-)
09:28:46 <cleverdra> It seems to be gcc 3.*-related.
09:29:05 <cleverdra> Summary: ghc fail build with gcc 3.1
09:29:26 <cleverdra> Initial Comment: ghc will fail to build with newer gcc if -O is given to ghc. Comfirmed with gcc 3.1, and most probably the upcoming 3.2 as well.
09:30:09 <cleverdra> but the bug seems to be fixed =)
09:30:26 <cleverdra> Why have you built it so much, Igloo?
09:30:28 <Igloo> Oh, right, yeah, there have been a number of gcc3 problems reported recently
09:30:53 * Igloo has been playing with TH and is still getting to know the build system
09:36:17 <cleverdra> hm, what is a 'dozen number'?  where dozen 1020 = 2
09:36:44 <Igloo> I don't think anyone here knew, but I might have missed it
09:39:19 * Heffalump appears
09:39:33 <cleverdra> hello Heffalump
10:13:34 <Marvin--> hullo folks
10:13:47 <ludde> hi Marvin--
10:13:52 <Heffalump> hi all
10:23:13 * Marvin-- grins as he reads the scenario he's supposed to GM
10:24:22 <cleverdra> 'GM'?
10:24:23 <Marvin--> (a humorous spoof on FotR)
10:24:34 <Marvin--> or storytell, whichever you prefer
10:24:48 <Marvin--> game master, roleplaying
10:24:54 <cleverdra> ah, OK.
10:28:03 * Igloo remembers the problem with pipelines, "| tee" and checking return codes
11:40:03 * Marvin-- is toying with the FFI
11:41:02 <Marvin--> admittedly, it would be simpler to implement this protocol directly in Haskell than going via the FFI
11:46:21 <Igloo> Which protocol?
11:47:14 <Marvin--> debconf
11:47:46 <Igloo> The protocol used by the front and back ends to communicate?
11:47:53 <Marvin--> yeah
11:48:19 <Marvin--> or more specifically, the protocol between the back ends and debconf
11:48:32 <Marvin--> I'm not sure if it's passed through directly to the front end or what happens in between
11:49:05 <Marvin--> (not that they'll let me write backends in Haskell in d-i anyway... :)
11:49:06 <Igloo> Right
11:49:34 <dark> Small executable size is not one of Haskell's features :)
11:49:43 <Igloo> Well, given the minimum compiled size is something like 500k and this might end up on floppies it seems unlikely  :-)
11:49:51 <Marvin--> exactly
11:50:07 <Marvin--> good politics in using a haskell postinst for a python module package though? ;)
11:50:24 <Marvin--> nah, there's a big BWC factor on this toying
11:50:49 <Igloo> Does it pop up a "I notice you are using a package written in python. Have you considered rewriting it in Haskell?" message box?  :-)
11:51:03 <Igloo> BWC?
11:51:04 <Marvin--> heh, no
11:51:08 <Marvin--> Because We Can
11:51:11 <Igloo> Ah
11:51:21 <Marvin--> common phenomenon ;)
11:51:42 <Igloo> We could have a vspj that does what vrms does for non-free for non-Haskell
11:52:01 <Marvin--> haha
11:54:47 <Marvin--> I suppose it's pretty hard to use functions with ... directly via the FFI? :)
11:55:07 <Igloo> Hmmm, hadn't thought about that
11:55:38 <Igloo> In theory you could use a list, but I don't know if the appropriate magic is done
11:55:48 <Igloo> s/done/specified to be done/
11:56:15 <Marvin--> yeah, well, you usually want a sentinel at the end too...
11:56:32 <dark> Not necessarily, printf doesn't need one.
11:56:32 <Marvin--> but maybe if you make it  b -> [a] -> a -> IO c
11:56:42 <Marvin--> dark: make it 'often' then, sheesh :)
11:57:04 <Igloo> C doesn't allow a sentinel at the end does it?
11:57:05 <dark> Problem is that varargs functions can take arguments of different types :)
11:57:14 <Igloo> I'm fairly sure ... has to be at the end of the argument list
11:57:24 <Marvin--> Igloo: well, what I mean is that I don't want to put the "terminating" NULL in the list *shrug*
11:57:26 <Igloo> Otherwise it wouldn't know what to assign to the variables following it
11:57:44 <Marvin--> but it's rather easy to say  foo 42 ["bar", "baz", nullPtr]
11:57:47 <cleverdra> dark - C-type constructors?
11:58:09 <dark> Well, with the calling convention for ..., you can always add a NULL argument whether it needs to be there or not.
11:58:22 <Marvin--> dark: oh? I didn't know that
11:58:27 <cleverdra> Marvin - AFAIK varargs takes a number of arguments, which are placed on the stack; there's no sentinel.
11:58:33 <Marvin--> otoh, sometimes you want the sentinel to be -1
11:58:43 <Marvin--> I'm talking about application-layer sentinel!
11:58:45 <Marvin--> :)
11:58:50 <dark> Marvin: Then it becomes -1, NULL :-)  But since the callee stops at -1, it will never notice.
11:59:28 * Marvin-- waits for someone to show up and fix bugs in cdebconf so I can commit some stuff
11:59:29 <cleverdra> ["bar", "baz", nullPtr] can be simplified to ["bar", "baz"] if you want an application-layer sentinel... but I possibly don't understand what you want.
12:00:09 <Marvin--> I mean that in e.g. cdebconf, the cdebconf->command function expects the list of arguments to be terminated by a NULL
12:00:28 <Marvin--> whereas I know some stuff in gtk expects a list of arguments to be terminated by -1
12:00:44 <dark> (void *)(-1) or something sick like that?
12:01:06 <cleverdra> Marvin - so?  Does a Haskell list correspond to what cdebconf wants, anyway? -- oh, nevermind.
12:01:06 <Marvin--> no, you can put whatever you like in the ... arguments
12:01:44 <Marvin--> cleverdra: I'm just thinking aloud on how you could do ... stuff with the FFI
12:01:59 <dark> Marvin: It still matters, though.  The callee must know what type to expect.
12:02:07 <Marvin--> dark: of course
12:02:16 <Marvin--> it's not very type safe :-)
12:02:28 <dark> Marvin: If the arguments are strings, then it will be parsing (char *) arguments, so it's going to hit (char *)(-1), which is sick.
12:02:40 <Marvin--> dark: -1 was gtk, not debconf!
12:02:52 <Marvin--> and in the gtk functions, it was expecting ints
12:03:01 <dark> Marvin: Ah, then it makes sense :)
12:03:51 <Marvin--> it would be nice to say e.g.  db_get cli t = debconf_command cli [t]; db_input cli pri t = debconf_command cli [pri,t]; ...
12:04:06 <Marvin--> now I have to do lots of withCString and stuff like that :)
12:04:13 <Marvin--> (not to mention wrapper functions in C)
12:05:09 <Marvin--> bah, I should pay more attention to the TV, the story's lost on me
12:05:30 <Marvin--> (they're showing Don Juan from the royal swedish opera)
12:06:58 <Marvin--> whoa, pr0n
12:14:40 <engstad> Pr0n?
12:16:19 <Marvin--> a scene where most of a woman' clothes are torn off
12:16:21 <Marvin--> including the bra
12:16:56 <Marvin--> I suppose it's something you're used to in movies, but it's a bit different on a big scene in front of big audience...
12:36:16 <ayrnieu> (erc-track-modified-channels)
12:36:22 <ayrnieu> err, excuse me.
12:56:41 <dark> Hmm, I wonder if Unicode has color codes somewhere.
13:13:19 <engstad> Nope.
13:13:46 <engstad> Where would you stop? 
13:14:37 <Igloo> That implies there is an order, which in turn implies Klingon is more important than colour codes
13:20:57 <engstad> Hehe. ;-)
13:51:38 <dark> Unicode already has formatting codes and structuring codes and language codes and display direction codes... I don't see why color would be off-limits :)
14:03:40 <hdaume> perhaps simply because to encode (for instance) an RGB value you'd need 24 bits and that's too heavy?
14:17:15 <galority> Marvin--: arround?
14:18:17 <Marvin--> nod
14:19:46 <galority> Marvin--: I wanted to tell you about FreeBSD ports.
14:20:10 <galority> The FreeBSD ports system is a kind of packaging system
14:20:37 <Marvin--> oh, yeah, I know what ports is
14:20:47 <Marvin--> I thought you said you wanted to port it to freebsd :)
14:21:26 <galority> A ok. This was a misunderstanding ;o)
14:22:12 <galority> If I have some free time I am going to check hws-wp on FreeBSD and try to make it a port.
14:22:43 <dark> Hmm, I just noticed that the Debian ghc5 package is only compiled for i386.
14:22:52 <galority> But please don't expect it the next days.
14:23:00 <dark> This is particularly ironic considering that nhc98 is about to be pulled for errors on m68k.
14:23:23 <galority> ghc runs also only on FreeBSD i386 :-(
14:24:15 <Marvin--> hmm, odd
14:24:27 <Marvin--> Architecture: i386
14:24:40 <Marvin--> I thought policy said that you shouldn't have anything else than 'all' or 'any'?
14:24:41 <galority> yes it is.
14:25:25 <galority> I don't understand what you mean!
14:25:45 <Marvin--> galority: debian talk
14:26:03 <galority> ah, ok. Wake me up for FreeBSD talk ;o)
14:26:09 <Marvin--> :)
14:27:27 <dark> If I had something other than an x86 I might try my hand at porting it :)
14:27:49 <dark> Last summer I almost bought an ia64 but it was too expensive.
14:28:05 <Marvin--> use the debian machines?
14:28:53 <dark> Not nearly as much fun as tinkering with a machine I own :)
14:29:38 <Marvin--> heh
14:29:59 <Marvin--> *shrug* I think the best course of action is to change it to Architecture: any and see what buildd says
14:30:38 <Igloo> You mean all, and it'll fail to build it because it beuild depends on itself
14:31:03 <dark> Not all, any.
14:31:06 <Igloo> Nothing wrong with Arch: i386 - I suspect lilo does so, for example
14:31:09 <Marvin--> any
14:31:11 <dark> all is for binary-independent packages.
14:31:17 <Marvin--> well lilo is specifically written for i386
14:31:24 <Igloo> Oh, I'm the one confused then  :-)
14:31:29 <Igloo> But the rest still stands
14:31:36 <dark> Igloo: Weren't you the one who said that everything should be written in Haskell? :)
14:31:56 <Igloo> GHC is specific to i386 (and a few others) too
14:32:15 <Igloo> dark: Probably, but I think I'm missing your point
14:32:46 <Marvin--> But can't ghc do code generation with gcc?
14:33:10 <dark> 4.18.4 of the users guide shows that it's designed to work on more than i386.
14:33:40 <dark> Igloo: The point is that if I write something in Haskell I want to be able to provide Debian packages for all architectures.
14:34:07 * Igloo hasn't looked at the details, but I have got the impression that it takes special porting for each architecture. This could just be for acceptable speed, though
14:34:53 <Igloo> dark: OK, I agree, but that doesn't mean the buildds will manage to build GHC  :-)
14:34:56 <hdaume> Marvin--: yeah, but i think the mangler is architecture specific
14:35:01 <dark> Igloo: Right, they need a push :)
14:35:34 <dark> I remember ghc working on hppa, if it works on that it should work on anything :-)
14:36:03 <dark> And that was when ghc still munged the assembly files after compilation.
14:36:20 <Igloo> Right, but the buildds won't tell you anything useful (as marvin suggested) as GHC needs GHC to build
14:36:30 <dark> Indeed.
14:36:52 <Marvin--> yeah, there is that :P
14:36:54 <dark> I think they can be bootstrapped by uploading a hand-build ghc package, though.
14:37:15 <dark> Then with the next release they can install that and use it.
14:37:33 <Igloo> I never disagreed with that  :-)
14:37:46 <dark> Does ghc normally do a double bootstrap, by the way?  Or is every package built with the previous version? :)
14:38:11 <Igloo> For GHCi, TH and something else you need to do a 2 stage build
14:38:35 <Igloo> (I've heard people mention 3 stage builds but I don't know why that is necessary. It might just be to check your new compiler works)
14:39:12 <dark> Yeah, gcc does a 3-stage build.  Its only purpose is to check that the output from stages 2 and 3 is identical.
14:39:40 <dark> This is a significant purpose, though, given the average quality of native C compilers :) 
14:39:41 <Igloo> Why does GCC need stage 2?
14:39:50 <Igloo> :-)
14:39:54 <dark> GCC uses some of its own extensions.
14:40:08 <dark> And, well, its maintainers don't want to have crap workarounds everywhere :)
14:40:19 <Igloo> Oh, right, but GCC x to GCC x+1 would only need a single stage and then a check stage?
14:40:42 <dark> "Compiler foo crashes if the second macro argument is exactly as long as the third.  Compiler bar doesn't like defined(), use lots of #ifdef instead."  etc etc etc.  I've seen the nethack code :)
14:41:26 <dark> Igloo: Hmm... presumably.  I don't know if it takes advantage of that, though.
14:41:35 * Marvin-- yawns and leaves
14:41:40 <dark> Igloo: From what I remember of the build process, you just turn it on and have coffee :)
14:42:22 <dark> Igloo: Oh, wait: that won't work, the check stage will fail if the previous version was built with a different compiler. 
14:44:40 <dark> What's a MFTL, anyway?
14:45:53 <Igloo> Oh, good point
14:46:10 <Igloo> No idea
14:49:03 <dark> It's mentioned in bug#52794 which is about the porting issue.
14:49:18 <dark> "Haskell can't evolve past a MFTL until it's got a native compiler under every major architecture."
14:49:53 <hdaume> ??toy language?
14:50:24 <engstad> mega fine toy language??
14:51:03 <dark> "dict mftl" to the rescue :)
14:51:07 <dark> My Favorite Toy Language
14:52:09 <dark> "He cornered me about type resolution in his MFTL."
14:54:30 <engstad> I think the main problem with a lot of academic languages is due to: Poor performance.
14:54:53 <engstad> Notice how Ocaml is getting more and more followers.
14:55:29 <engstad> And Ocaml's syntax is wierd.
14:58:48 <dark> The most popular languages all have weird syntax.  It must be important in some way.
14:59:43 <engstad> Hehe...
14:59:49 <dark> I think performance is more a result than a cause.  Perl wasn't all that fast when it became popular, but it was so popular that improving it was worth the effort.
14:59:56 <engstad> I _really_ like Haskell's syntax for some reason.
15:00:15 <dark> I still have fights with it sometimes :)
15:00:22 <dark> But I like the no-fuss data declarations.
15:00:53 <engstad> Hmm, yes, I have some problems with unStructure-ing things. :-)
15:01:01 <dark> I still don't really understand what it means to declare a data element strict, though.
15:01:41 <hdaume> it means that if you ever store bottom in that element, then the entire structure becomes bottom
15:02:40 <dark> Comments like "declare these strict because they're strict anyway" puzzle me.
15:03:11 <Heffalump> does that mean they're never used non-strictly?
15:03:26 <Heffalump> i.e. relying on the fact that Foo _|_ /= _|_
15:04:44 <dark> How can you ever rely on that?
15:04:53 <dark> Oh, /= :)
15:06:01 <Heffalump> so if your code never relies on that, then you can declare it strict
15:06:19 * Heffalump decides he should know the Haskell report better, and goes to read it
15:06:53 <dark> This would make most one-argument constructors strict, I think.
15:07:15 <Heffalump> what would?
15:07:59 <Igloo> Hmmm, that would mean newtype Foo = Bar Baz was indistinguishable from data Foo = Bar !Baz wouldn't it?
15:08:12 <dark> Hmm... I mean that it's pretty rare for a one-argument constructor to be used without using its value.
15:08:24 <Heffalump> igloo: isn't it?
15:08:51 <dark> I guess sometimes you could make a decision based only on the constructor.
15:09:17 <dark> newtypes are always strict?
15:09:33 <Igloo> I don't know, but it would make newtype seem fairly pointless to me
15:09:38 <Igloo> I guess it reads slightly nicer
15:09:54 <Heffalump> hmm, no it's not equivalent
15:09:59 * Heffalump tries to understand the report
15:10:24 <dark> I wonder if gcc analyzes this on its own :)
15:10:45 <dark> Maybe for local types.  It would be pretty hard for exported types.
15:12:46 <dark> Er, I mean ghc of course.
15:18:33 <dark> Oh, cool -- I just remembered that I'll soon have a powerpc to play with.
15:18:44 <dark> Currently I can only communicate with it via serial port :)
15:19:14 <dark> I don't know if it'll be able to handle ghc at all though.  It has 32MB RAM and 32MB flash.
15:20:48 <dark> Gah, ghc binary is 8 MB :)
15:21:57 <dark> But filesystem space is not necessarily a problem, if I set up NFS or something.
15:22:13 <Heffalump> ok, stupid question...
15:22:20 <Heffalump> oh, no
15:25:27 <dark> I wonder if it's possible to have a remote swapfile :)
15:28:13 <clausen> linux doesn't like it
15:28:18 <clausen> (it permits it, but you can get deadlocks)
15:28:31 <clausen> eg: what happens if you need to allocate a page to handle an NFS request?
15:38:56 <Heffalump> hmm, I think I understand the difference
15:39:30 <Heffalump> for both data D = D !Int and newtype D = D Int, D _|_ = _|_
15:39:44 <Heffalump> but you get different behaviour when pattern matching
15:44:54 <Igloo> How so?
15:45:02 <Igloo> (maybe I should reread the relevant bit)
15:46:23 <Heffalump> foo (D n) = 42
15:46:40 <Heffalump> returns 42 for the newtype but _|_ for the data
15:47:25 <Heffalump> cos the data version has two elements, but the newtype version only has 1
15:48:41 <Igloo> Doesn't work for me
15:48:52 <Igloo> Program error: {undefined} for the data one
15:50:17 <Igloo> Oh, it's the other way round
15:50:45 <Igloo> Which is what you'd expect, because the newtype one ought to be the same as just not having the constructor
15:52:52 <Heffalump> yeah.
17:23:16 <dark> Is there ever a reason to have data instead of newtype in this kind of declaration?
17:27:14 <dark> GHC users guide strongly advises using newtype.
17:27:28 <dark> This makes me wonder if what "newtype" does shouldn't simply be a compiler optimization.
17:27:39 <dark> Instead of complicating the language :)
17:28:05 <Heffalump> YM in the data Foo = Foo !Int declaration?
17:28:39 <Heffalump> well, you may want the different semantics, though I can't see an obvious example of why
17:29:20 <Heffalump> but remember that newtype can only be used to "optimise" a data declaration with one constructor which has one strict argument
17:29:45 <Heffalump> but in doing so it does change the semantics
17:30:17 <Heffalump> if you have data Foo = Foo !Int !Int and you remove one of the !Ints you don't want the semantics randomly changing on you (or vice-versa)
17:36:52 <dark> Yeah, I can see the versa part.  It would violate the principle of least surprise when adding a new constructor or that second !Int.
17:37:12 <dark> By the way, I keep reading that as "not Int" because of my C habits :)
17:37:31 <dark> I guess the ! was inspired by Prolog?
17:47:36 <Heffalump> don't see why it would have been
17:47:47 <Heffalump> i.e. I don't see much connection between strictness and cuts
17:52:51 <dark> Both mean "do magic stuff to make my program faster" :-)
18:51:11 <dark> Hmm... I occasionally have a list of functions that I want to map over a single element.
18:53:11 <Heffalump> map ($ x) fs
18:57:05 <dark> Ah, thanks :)
18:57:35 <dark> You know, I think you told me that before.  I seem to have a blindness for $ as an operator, I see it as syntax.
18:59:05 <Heffalump> I think the last time you (or someone else) asked I suggested map (flip ($)) fs, which is just wrong
18:59:11 <Heffalump> but someone else gave the right solution
18:59:54 <Heffalump> I was probably thinking of map (uncurry ($)) fs, which takes a list of function,value pairs and gives the list of results of applying the function to its corresponding value
19:01:19 <dark> Hmm, that could be useful.
19:01:31 <dark> Though I'd be more likely to end up with something perverse like zipWith $
19:01:39 <dark> Er, zipWith ($)
19:02:36 <dark> Actually, I'm on my fourth rewrite of the same module now (and getting tired of it :), and I seem to have gradually replaced all tuples with named datatypes.
19:03:10 <Heffalump> zipWith takes two separate lists
19:03:26 <Heffalump> zipWith f == map (uncurry f) . zip
19:03:37 <Heffalump> sorry, no
19:03:48 <Heffalump> zipWith f xs ys == map (uncurry f) (zip xs ys)
19:07:33 <dark> Hmm, what's the difference?
19:07:46 <dark> Oh, I see :)
19:08:01 <dark> Er, no, I don't see.
19:12:55 <Heffalump> the difference between the one with and without .?
19:13:19 <Heffalump> just the standard f (g x y) /= (f.g) x y thing
19:13:50 <Heffalump> [definition of . : (f.g) x = f (g x), so (f.g) x y = f (g x) y /= f (g x y)]
19:14:02 <Heffalump> catches almost everyone out until you think about it
19:17:36 <dark> It caught me out :)
19:26:09 <Heffalump> well, me too :-)
