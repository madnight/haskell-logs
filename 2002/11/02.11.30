04:10:24 <lament> hi
04:31:28 <Heffalump> hi
05:01:26 <tetryl> hi
05:12:40 <Igloo> That's the sense I meant, Heff
05:13:32 <Heffalump> right, yeah
05:13:46 <Heffalump> I'd forgotten you can do arbitrary computation inside them
05:15:51 <Igloo> Oh, maybe I don't mean quite what you meant then. I meant in the way prolog tends to diverge, i.e. to work out the first element you need to find the first element of a generator which depends on the first element
05:16:14 <Heffalump> ah, right
05:16:25 <Heffalump> foo = [x | x<-foo]
05:17:11 <Igloo> Yeah, but that one's fairly obvious. multiperms' xs = []:[ (x:ys) | ys <- multiperms' xs, x <- xs ] is less so IMO
05:17:22 <Igloo> It should be easy enough to explain by induction on list lengths, though
05:18:23 <Heffalump> right, that diverges for non-empty xs because every element produced causes another one
05:19:46 <Igloo> Yes, but (multiperms' xs) !! i for any (non-negative) i doesn't diverge (if the elements of xs don't), which is what I really meant
05:20:00 <Heffalump> sorry, I meant it's infinite
05:20:00 <Heffalump> duh
05:20:22 <Igloo> Well, all infinite lists diverge by FOLDOC's definition
05:20:47 <Heffalump> I'd rather use a CSP-type view of divergence
05:21:46 <Igloo> OK, so you've changed definitions since "< Heffalump> they diverge if and only if one of the generators has an infinite list, surely?"?
05:22:46 <Heffalump> yes
10:07:40 <aquacable> hey
10:07:43 <aquacable> anyone alive?
10:08:09 <Heffalump> me
10:08:17 <aquacable> you any good in haskell
10:08:24 <aquacable> I'm trying to read a file
10:08:33 <aquacable> but I get IO String out of it
10:08:37 <aquacable> I want a string
10:08:42 <aquacable> so I can words it
10:09:10 <aquacable> is there any function to convert it from io string to string?
10:09:14 <Heffalump> nope
10:09:27 <aquacable> so how do I manupilate data from a file?
10:09:44 <Heffalump> but there are functions to take a function from String -> Foo to one from IO String -> IO Foo
10:10:25 <aquacable> Heffalump: like?
10:10:43 <Heffalump> well, liftM
10:11:00 <Heffalump> but in general you should be using do syntax
10:11:33 <aquacable> do you have an example?
10:11:42 <aquacable> I don't follow you that good...
10:12:03 <aquacable> do <- Mlift("inpute file")
10:12:11 <aquacable> do x <-
10:17:12 <aquacable> Heffalump: ?
10:23:11 <Heffalump> do str <- readFile foo
10:23:29 <Heffalump>    putStr (concat (words str))
10:23:36 <Heffalump> is an example of what you can do
10:24:37 <aquacable> thanks
10:27:46 <Heffalump> sorry, I'm not explaining this well. Tired and doing other things too.
10:29:27 <aquacable> it's not working :(
10:29:29 <Heffalump> there's a good explanation of this in the Haskell wiki, but I can't find it
10:29:31 <Heffalump> what goes wrong?
10:30:15 <Heffalump> http://www.haskell.org/tutorial/io.html should be useful, btw
10:31:24 <aquacable> I was trying to read that
10:32:11 <aquacable> p.s. what's the diff between readFile and getCOntents? they both give an io string back...
10:33:38 <Heffalump> do they have the same types?
10:33:59 <Heffalump> I think getContents is lazy, in that it'll only actually do the read when the data is required
10:35:00 <aquacable> p.s. where do the words come out in your example?
10:35:02 <Marvin--> isn't readFile lazy too? I thought both used hGetContents?
10:35:26 <Marvin--> getContents reads from standard input, iirc?
10:36:40 <aquacable> I don't get it...
10:36:57 <aquacable> all I want to do is read a file and get a string....
10:37:52 <Marvin--> readFile should do that, but you should be aware of that the string won't actually be read here and now and then the file will be closed, it will read every now and then, as you use the stuff from the string
10:47:59 <aquacable> Marvin--: can you explain something to me
10:48:00 <aquacable> module Main where
10:48:01 <aquacable> import IO
10:48:01 <aquacable> main
10:48:01 <aquacable>  =do x <- readFile "invoer.txt"
10:48:01 <aquacable>      putStr (x)
10:48:15 <aquacable> how does this differ from 
10:48:16 <aquacable> module Main where
10:48:16 <aquacable> import IO
10:48:16 <aquacable> main
10:48:16 <aquacable>  =do x <- hGetContents "invoer.txt" ReadMode
10:48:16 <aquacable>      putStr (x)
10:48:44 <aquacable> the latter one doesn't work
10:49:10 <Marvin--> er, doesn't work as in doesn't compile or as in what?
10:49:25 <aquacable> ERROR "opdr1.hs":4 - Type error in application
10:49:25 <aquacable> *** Expression     : hGetContents "invoer.txt" ReadMode
10:49:25 <aquacable> *** Term           : hGetContents
10:49:25 <aquacable> *** Type           : Handle -> IO String
10:49:25 <aquacable> *** Does not match : a -> b -> c
10:49:28 <aquacable> IO> 
10:49:35 <aquacable> I get that as error when I try to load it
10:49:36 <Igloo> hGetContents doesn't take a String as its first argument
10:49:52 <aquacable> huh...
10:50:07 <Igloo> You've attempted to merge openFile and hGtContents into one
10:50:13 <Marvin--> aquacable: well, the error message says it actually... the 'h' in hGetContents means it wants a Handle, and Strings aren't the same thing as Handle :)
10:51:04 <aquacable> http://www.zvon.org/other/haskell/Outputio/hGetContents_f.html
10:51:09 <aquacable> they do the same there
10:51:23 <aquacable> oeps
10:51:25 <aquacable> sorry
10:51:27 <aquacable> openfile...
10:51:59 <aquacable> thanks
10:52:06 <aquacable> still gives an error though
10:52:11 <aquacable> ERROR "opdr1.hs":4 - Type error in application
10:52:11 <aquacable> *** Expression     : hGetContents openFile "invoer.txt" ReadMode
10:52:11 <aquacable> *** Term           : hGetContents
10:52:11 <aquacable> *** Type           : Handle -> IO String
10:52:11 <aquacable> *** Does not match : a -> b -> c -> d
10:54:41 <aquacable> nevermind :)
10:59:59 <aquacable> argh...
11:02:06 <aquacable> module Main where
11:02:07 <aquacable> import IO
11:02:07 <aquacable> main
11:02:07 <aquacable>  =do x <- openFile "invoer.txt" ReadMode
11:02:07 <aquacable>      y <- hGetContents x
11:02:07 <aquacable>      putStr (concat (lines y))
11:02:09 <aquacable> that works
11:02:18 <aquacable> but I wantone without concat...
11:02:52 <Igloo> You need to give putStr a String
11:03:14 <Igloo> And lines y doesn't have type String
11:03:43 <aquacable> so it would work if I 'words' it?
11:04:15 <Igloo> words what?
11:04:24 <aquacable> I dunno
11:04:30 <aquacable> ooh
11:04:35 <aquacable> that's what you mean
11:05:16 <Marvin--> aquacable: what are you trying to do? :)
11:05:35 <aquacable> read a file
11:05:40 <aquacable> get the lines
11:06:15 <aquacable> and modify the lines
11:06:21 <aquacable> and then write it back to some file
11:06:50 <Marvin--> then you probably want to have a function that takes a String and gives a new String, and call that function for every line in the file, right?
11:07:10 <aquacable> yes
11:07:12 <aquacable> that would work
11:08:53 <aquacable> Marvin--: ?
11:09:12 <Marvin--> well, then you'd better look that up :P
11:09:16 <aquacable> :)
11:09:17 <aquacable> okay
11:09:21 <aquacable> so it was a clue :)
11:09:26 <aquacable> not an inquery :P
11:11:20 <Marvin--> yes you could call it a clue ;)
11:47:23 <aquacable> YAY :)
12:02:27 <Marvin--> heh
12:07:43 <aquacable> I think I'm startng to understand haskell...
12:08:00 <aquacable> now, how to get a number from a line...
12:08:01 <lament> yay
12:08:05 <aquacable> :)
12:08:11 <aquacable> I found a function list
12:10:55 <lament> how would a function list help you understand haskell?
12:11:50 <aquacable> somehow it does :)
12:14:22 <lament> hmm, good luck trying to understand monads and type classes with a function list... :)
12:14:34 <aquacable> 1 step at a time :)
12:17:52 <aquacable> okay.. stuck again...
12:18:55 <aquacable> transform (lines (x:xs)) = x <- why doesn't this work?
12:19:26 <aquacable> nevermind
12:19:33 <aquacable> I know what's wrong :)
12:19:39 <aquacable> now how to write it down...
12:19:48 <aquacable> input = x
12:19:59 <aquacable> y = lines x
12:20:11 <aquacable> y = q:qs
12:20:15 <aquacable> output = q
12:22:30 <lament> hmm :)
12:22:35 <lament> that doesn't look nice
12:22:48 <lament> What are you trying to do?
12:23:07 <aquacable> transform x =  concat.head.(lines x)
12:23:19 <aquacable> I read a file
12:23:23 <aquacable> that would be x
12:23:37 <aquacable> so I think x = of type [[[string]]]
12:23:50 <aquacable> I'm trying to get the lines out of the x
12:24:02 <aquacable> so it would be [string]
12:24:04 <aquacable> oeps
12:24:11 <aquacable> put 2 brackets to much up there
12:24:23 <aquacable> anyways
12:24:32 <aquacable> I want the first word of [string]
12:24:39 <aquacable> and cast it to an int...
12:24:42 <aquacable> or something
12:24:47 <aquacable> like that
12:25:04 <aquacable> I'm really starting to wonder why they developped langueages like haskell
12:25:21 <aquacable> java or c would have been easier :)
12:26:17 <lament> hm, lines is a function that returns the lines of a file?
12:26:23 <aquacable> yes
12:29:50 <Marvin--> lines splits a string into a list of its lines
12:30:06 <lament> well, to get the first word you would use (head.words.lines)x
12:31:52 <aquacable> heay..
12:31:57 <aquacable> aah
12:32:02 <aquacable> that's how you write it
12:34:08 <lament> I don't know how to convert it to integer, though
12:37:56 <aquacable> *** Type           : String -> [String]
12:37:56 <aquacable> *** Does not match : [[String]] -> [String]
12:37:59 <aquacable> which is which?
12:38:12 <aquacable> Type is the one I told him he's gonna get/give?
12:38:22 <aquacable> and does not match the one I actually gave
12:38:27 <aquacable> or the other way around?
12:59:51 <aquacable> how do I make a word out f chars?
13:04:19 <aquacable> I'm giving up for now
13:04:21 <aquacable> laters
13:46:27 <aquacable> anyone alive??
13:47:21 <aquacable> what is the type of contents after contents <- hGetContents somefilethathasbeenopened
13:48:07 <Marvin--> it should be a String
13:49:14 <aquacable> not a [[[string]]]?
13:50:00 <Marvin--> uh, no :) hGetContents should give you a lazy string of the entire file
13:50:28 <aquacable> aah...
13:50:30 <aquacable> :)
13:50:45 <aquacable> that's why nothing worked
13:50:59 <Marvin--> whatever gave you the idea that it would be [[[String]]]?
13:52:23 <aquacable> I thought you had strings(words)
13:52:28 <aquacable> to make a word you need lines
13:52:35 <aquacable> that would be [string]
13:52:49 <aquacable> and to have a file you need a few lines
13:52:58 <aquacable> so you also make an array of lines
13:53:03 <aquacable> that would be [[string]]
13:53:08 <aquacable> darn
13:53:14 <aquacable> i always put to much brackets :)
13:55:14 <lament> strings can contain newlines
13:56:38 <Marvin--> and they can definitely contain spaces :)
13:56:41 <aquacable> yeah, I just thought of  tthat when Marvin-- said it's just one string
13:58:00 <aquacable> Marvin--: is there some tut somewhere where I can see how to make a local variable
13:58:28 <Marvin--> aquacable: there's no such thing as local variables in Haskell, variables don't change
13:58:57 <aquacable> Marvin--: I want to take the first 3 words of the strng
13:58:59 <Marvin--> aquacable: but if you need handy abbreviation, look at 'let ... in ...' and '... where ...'
13:59:20 <aquacable> okay
13:59:26 <aquacable> I'll do that
13:59:51 <Marvin--> http://www.haskell.org/tutorial/
14:06:48 <aquacable> Marvin--: so say I wanted to make a function transform
14:07:05 <aquacable> transform x = x
14:07:09 <aquacable> that would work
14:07:19 <aquacable> but I want to save the words of the string
14:07:24 <aquacable> and then modify it
14:08:14 <aquacable> can I x <- words(x)
14:08:31 <aquacable> and then take the first 3 words
14:08:34 <aquacable> modify them etc
14:08:47 <aquacable> and then give that as awnser to transform?
14:08:53 <aquacable> nevermind
14:08:55 <aquacable> found it
14:23:23 <spank> hi
14:24:23 <lament> hi
14:25:22 <spank> invert (x:xs) = invert xs ++ [x] purez
17:58:08 <Heffalump> 'lo
18:09:01 * Igloo realises I'm making assumptions about type defaulting. Grrrrr.
23:19:11 * aquacable realizes haskell isn't THAT easy
23:33:19 <tez> Well, it's different.
23:38:49 <aquacable> yeah, I noticed :)
23:39:12 <aquacable> any idea where I can find some source code?
23:39:49 <tez> Source code for what?
23:47:48 <aquacable> just haskell source code
23:48:41 <tez> Well you might find interesting apps at www.haskell.org.  I'm not really sure where you find useful learning examples.
23:49:17 <aquacable> thanks
23:51:23 <aquacable> I found a c 2 haskell...
23:51:30 <aquacable> I wonder if I may do that :)
23:51:57 <aquacable> nah
23:52:03 <aquacable> it wouldn't learn me anything
23:56:56 <tez> How have you been learning Haskell up till now?  Online tutorial?  A book?
