00:00:09 <creature> Back.
00:14:11 <Vulpyne> We missed you.
01:07:12 <Fractal> OK, in a monad can I create a binding from a function that doesn't return IO a ?
01:07:21 <Fractal> Like, say, it just returned String
01:09:11 <tez> Yeah
01:09:17 <tez> Just use return
01:09:42 <Fractal> Oh, ok. So   my_binding <- return myStringFunc  ?
01:09:50 <tez> Exactly
01:10:01 <Fractal> Thanks a bundle.
01:10:05 <tez> np
02:02:36 <andersca> hey Marvin--
02:03:29 <Marvin--> hullo
02:03:44 * Marvin-- just talked to Koen about master projects
02:03:53 <andersca> oh?
02:04:08 <Marvin--> he had waaay too many suggestions :P
02:06:48 <andersca> cool
02:06:49 <andersca> like? :)
02:09:08 <Marvin--> like combining quickcheck with a theorem prover
02:09:36 <andersca> interesting
02:09:42 <Marvin--> very!
06:45:05 * shapr bounces
07:03:19 * shapr bounces
07:03:43 * shapr bounces
07:08:29 <mgoetze> shapr: yes, we got it the first time :)
07:08:49 <shapr> ah, but did you know I bounced twice? ;-)
07:09:42 <mgoetze> shapr: oh, no. did you hit the roof?
07:10:09 <shapr> no, high ceilings in this room.
07:10:11 <shapr> I tried though.
07:10:27 <shapr> hi mgoetze, what do you do with Haskell?
07:14:14 <mgoetze> uuuuuuuuuhm
07:14:30 <mgoetze> i try to write little programs in it :)
07:14:40 <mgoetze> hoping to one day understand it's beauty fully
07:17:51 <shapr> hm, sounds like me.
07:18:32 <mgoetze> :)
07:26:49 <shapr> is there some way I can have template haskell installed beside a stable GHC?
07:27:05 * mgoetze doesn't know.
07:28:24 <lament> mgoetze: You don't need to write programs to understand the beauty; indeed, it might make it harder :)
07:30:52 <mgoetze> heh
07:31:17 <mgoetze> do i need to know what a monad is, to understand the beauty?
07:31:25 <shapr> it makes it easier
07:31:57 <lament> mgoetze: yes
07:32:08 <mgoetze> lament: well, i'll have to work on that, then :)
07:32:18 <lament> the beautiful things about haskell are laziness, type system, and monads.
07:32:22 <shapr> I think monads are not required to see the beauty
07:32:32 <shapr> I think referential transparency is also beautiful
07:32:46 <lament> well, yes.
07:33:15 <mgoetze> what about the pattern matching? :)
07:33:27 <lament> That's a part of the type system
07:34:47 <mgoetze> i think that something like 'fac 1 = 1; fac n = n*fac(n-1)' is much prettier than, say, '(define (fac n) (if (n < 2) 1 (* n (fac (- n 1)))))'
07:35:04 <Heffalump> it's not exactly hard to get prettier than that :-)
07:35:08 <lament> Have you looked at the factorial page?
07:35:12 <Heffalump> pattern matching does make things very nice, though
07:35:29 <Heffalump> shapr: yes, if you compile from source (re TH)
07:35:48 <lament> The supposedly best definition on the factorial page is simply
07:35:51 <shapr> how do I make a side-by-side install?
07:35:56 <lament> fac n = product [1..n]
07:36:11 <Heffalump> tell configure you want GHC to go somewhere else
07:36:47 <shapr> hm, excellent point ;-)
07:37:14 <mgoetze> lament: yeah, that's good too
07:39:34 <lament> But then, factorial looks pretty in most languages
07:40:34 * mgoetze likes fib in haskell :)
07:40:47 <lament> Yes, fib is evil
07:41:00 <Heffalump> if you have fib defined by fib 0 = 0, fib 1 = 1, fib (n+2) = fib n + fib (n+1)
07:41:11 <Heffalump> and fibs defined by fibs = 0:1:zipWith (+) fibs (tail fibs)
07:41:21 <Heffalump> then prove that fibs = map fib [0..]
07:42:43 <lament> that would be a fairly boring proof
07:42:54 <mgoetze> Heffalump: maybe once i'm done the proof for my math course...
07:43:06 <Heffalump> lament: it's actually quite hard
07:43:37 <mgoetze> is [0..] valid haskell?
07:44:11 <Igloo> Yes
07:44:40 <lament> hm, it doesn't look hard
07:44:49 <lament> provided you have the semantics for zipWith
07:45:12 <Heffalump> well, it has a standard definition
07:47:45 <mgoetze> i need to prove that (a+b<a'+b' or (a+b=a'+b' and a<=a')) or (a'+b'<a+b or (a'+b'=a+b and a'<=a)) for all natural numbers a,b,a',b' :)
07:47:57 <mgoetze> once i'm done that i'll think about proving your fibonacci thingo
07:49:14 <lament> proving obvious things sucks :(
07:50:30 <Heffalump> (I do know how to prove it btw, I'm just raising it as an interesting exercise)
07:53:53 <lament> it seems like the only problem with the proof is to express the obvious in a proper mathematical way
07:54:07 <lament> i don't like things like that :(
07:54:32 <Heffalump> well, it's needed, cos occasionally "obvious" things turn out not to be true
07:55:26 <lament> Hey, there's a difference between seemingly obvious and *THE* obvious :)
07:56:28 <mgoetze> lament: in which category is the axiom that you can pick out one element from an infinite set? :)
07:57:20 <lament> mgoetze: That's an axiom
07:57:44 <mgoetze> lament: yeah, but is it seemingly obvious and/or *THE* obvious? :)
07:57:59 <lament> mgoetze: It's neither. It's an axiom.
07:58:16 <mgoetze> lament: some people say it's obvious
07:58:24 <lament> mgoetze: An axiom can be as obvious or as obviously wrong as desired
07:58:47 <lament> however obvious axioms tend to lead to obvious theorems :)
07:59:00 <mgoetze> lament: yes... so, how obvious or obviously wrong is this particular axiom? :)
07:59:10 <lament> mgoetze: How can an axiom be wrong?
07:59:38 <mgoetze> lament: 'An axiom can be as obvious or as obviously wrong as desired'
07:59:57 <lament> There's a difference between the real world and mathematics.
08:00:16 <lament> Being able to pick one element from in infinite set seems more common-sense
08:00:21 <lament> s/in/an
08:01:26 <lament> Hm. bbl
08:46:28 <Igloo> Grrr, not only do I still not have access to cvs.haskell.org but now the anonymous server won't let me check out a tree
08:46:46 <dark> Maybe because you're not anonymous? :-)
08:46:58 <dark> "Go away, I know you!"
08:47:03 <mgoetze> lol
08:47:12 <Heffalump> :-)
08:47:25 * Igloo is anonymous, that's the first problem
08:47:58 <Igloo> Hmmm, it works from another machine
08:48:19 <Igloo> It should't have problems with NAT, should it?
08:49:07 <Heffalump> it's a simple stream protocol AFAIK
08:49:41 <Igloo> Oh, works now. Only thing I changed was to export CVS_RSH=ssh, which I'm sure it shouldn't use
08:50:03 <dark> What does your repository spec look like?
08:50:18 <Heffalump> pserver ones will say pserver explicitly
08:50:28 <Igloo> CVSROOT=:pserver:anoncvs@glass.cse.ogi.edu:/cvs
08:50:35 <Heffalump> bizarre
08:51:10 <Igloo> I did also redo all teh commands, so it's possible I screwed up, but unlikely given authentication seemed to work
08:51:11 <dark> And it's exported?
08:51:27 <Igloo> Yup
10:10:16 * sethk is away: I'm busy
11:53:21 * sethk is back (gone 01:43:05)
13:46:35 <|Fo|Ns> hi
13:46:58 <|Fo|Ns> where can I get information about declarative debuggers?
13:50:15 <sethk> Sorry, I don't know the answer.
13:55:12 <Marvin--> |Fo|Ns: google? :)
14:53:42 * sethk is away: I'm busy
15:11:19 * shapr bounces
15:27:40 <tinus> hmm
15:27:49 <tinus> Python actually is nice
15:28:07 <tinus> it does alot Haskell does so nicely
15:28:25 <Igloo> Are you trying to start an argument?  :-)
15:28:42 <tinus> heh :)
15:28:59 <tinus> you tried it?
15:29:01 <Igloo> It doesn't have things like static types or lazy evaluation AIUI, though
15:29:02 <Igloo> No
15:29:23 <tinus> well, this lazy evaluation is something i keep hearing, but never knew what it was ...
15:29:34 <andersca> take 2 [1..]
15:29:38 <andersca> that's lazy evaluation :)
15:29:42 <tinus> oh, ok
15:29:44 <Igloo> It may provide higher order functions and better performance (for a given amount of time coding at least) than Haskell
15:30:22 <tinus> well, it's more near the imperative languages, while it still brings alot of functional features
15:30:31 <tinus> that's like -the- language for me, i suppose
15:30:43 <Igloo> To understand why languages supporting lazy evaluation is good one need only try to understand the zlib code that emulates it in C  :-)
15:31:08 <Heffalump> doing lazy stuff in SML isn't too bad
15:33:24 <Heffalump> but demand driven execution really makes no sense at all without a functional language underneath
15:33:42 <Heffalump> so I can imagine trying to do the right thing in C would be really rather painful
15:34:54 * Igloo can't remember the details now, but it has functions that allow you to add a bit more input, to ask for more output and something strange about flushing for when you've got to the end of the stream
15:35:23 <dark> With funky buffering too.
15:35:43 <dark> (funky because you can't actually know ahead of time how much space you need for the uncompressed data)
15:36:02 <Igloo> Should be nice and straightforward in Haskell if I can work out the Huffman trees bit etc  :-)
15:36:48 <Igloo> Oh, yes, and it passes around function pointers for allocate and free functions which gets all the more confusing when you don't understand what's going on  :-)
15:37:10 <tinus> pointers
15:37:12 * tinus shivers
15:37:23 <tinus> they can be cool, but i'd rather not work with them
15:37:28 <dark> Those are nice for embedded work, though.
15:39:53 <Igloo> How do you mean?
15:40:21 <dark> Well, it's always annoying when library functions go and do their own mallocing, if you have to keep careful track of memory.
15:40:50 <Igloo> Ah, I see
15:42:31 * Igloo sends Chilli the rather pitifully small patch for the bit of GdkRGB I think I need
15:43:22 <tinus> "is it a bug? call it a feature ..."
18:11:27 <Igloo> I can't believe there isn't an elegant way to write f :: [[a]] -> [(Int, Int, a)] where the Ints are the "coordinates" of the a
18:24:42 <Heffalump> couple of zips and a concat, surely?
18:28:40 <Igloo> Won't that have tuply bits in the wrong places?
18:30:43 <Heffalump> map (\(a,xs) -> zip (map (\b -> (a,b)) [0..]) xs) (zip [0..] xss)
18:30:47 <Heffalump> is most of what you want, I think
18:31:48 <Igloo> Are you claiming that that is elegant?
18:32:48 <Heffalump> yes :-p
18:33:21 <Heffalump> ok, how about
18:33:49 <Heffalump> coords = [[(x,y) | x <- [0..]] | y <- [0..]]
18:34:14 <Heffalump> f xss = zipWith (zipWith (\(x,y) e -> (x,y,e))) coords xss
18:36:59 <Igloo> Hmmm, better, thanks
18:37:29 <Heffalump> still not elegant enough for you?
18:37:51 <Igloo> Oh, actually, I can probably do it nicer with partial application of what I actually want to call
18:38:03 <Igloo> Which also means I don't have to worry about uncurrying
20:03:32 <tetryl> is there good references for the amortization and amortized analysis?
20:05:48 <Pseudonym> I think that "Introduction to Algorithms" by Cormen, Leiserson and Rivest has a chapter on it.
20:14:04 <tetryl> thx. I'll buy it
20:15:12 <tetryl> amortization is very difficult..
20:17:12 <Pseudonym> If you're at a university, chances are your library has a copy.
20:17:33 <Pseudonym> Personally, I don't find amortisation difficult unless I have to do it for a complex algorithm.
20:17:43 <Pseudonym> Understanding it is fairly straightforward, at least to me.
20:18:16 <Pseudonym> It's also well worth having a read of Knuth, Graham & Patashnik's "Concrete Mathematics".
20:20:39 <Pseudonym> It doesn't have anything about this specifically, but it is full of techniques for analysis of algorithms.
20:29:30 <tetryl> i didn't know that books.
20:29:38 <tetryl> i must read them
20:30:18 <Pseudonym> Yes, it's brilliant.  It's one of the first textbooks I've seen which has notes in the margin from students who actually did the course.
20:40:06 <tetryl> I'd do it, too
20:41:49 <Pseudonym> Especially of Don Knuth were teaching, which he's not any more. :-)
20:46:06 <tetryl> that's true. i just read the table of contents.
21:07:04 * sethk is back (gone 06:13:21)
22:50:25 <Pseudonym> Bye all.
