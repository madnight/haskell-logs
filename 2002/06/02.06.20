02:53:51 * shapr awakens
03:25:23 <shapr> w000
05:13:29 <shapr> Heffalump: hey, you got a minute to talk about the Ports library and the multithreading problem with HOpenGL?
05:13:36 <Heffalump> not really, sorry
05:13:46 <shapr> ok..
10:25:52 * shapr bounces
12:47:41 * shapr bounces
12:49:43 <Heffalump> hiya
12:49:48 <shapr> hii Heffalump
12:49:52 <shapr> how are ya?
12:50:25 <shapr> me bounces
12:50:28 <shapr> oops
12:50:55 <hornby> oops?
12:51:23 <shapr> I forgot the slash
12:51:39 <hornby> oh :)
12:52:26 <hornby> This channel is too quiet
12:52:35 <shapr> quick, say something!
12:52:44 * Heffalump is ok, but rather busy
12:53:04 <shapr> I wish I had more time to put into haskell
12:53:09 <shapr> but it doesn't pay any bills yet.
12:54:56 <hornby> ya
12:55:08 <shapr> hornby: hey, have you looked at banana.py?
12:55:46 <hornby> shapr: Uh, sort of :)
12:56:04 <shapr> what do you think?
12:57:05 <hornby> I think I didn't think enough about it to say what I think :)
12:57:10 <shapr> heh, good answer.
12:57:55 <hornby> Hopefully I'll get time to look at it more closely
12:58:00 * Heffalump tries to work out how good Haskell has been at for paying bills for him
12:58:18 <shapr> I wanna hear about that.
12:58:49 <hornby> Heffalump: You've found work with Haskell?
12:59:59 <Heffalump> only cos I work in a university :-)
13:00:08 <hornby> ahh :)
13:00:18 <Heffalump> and most of the money I've got that way has been my PhD stipend
13:00:36 <hornby> What's your PhD on? 
13:00:44 <Heffalump> though I probably got about £400 out of teaching a class on Haskell too
13:00:48 <shapr> nice
13:00:51 <hornby> sweet
13:00:54 <Heffalump> Higher-order matching for program transformation
13:01:45 <Heffalump> at the moment I get paid to work with SML, which is almost as good but not quite :-)
13:02:18 <hornby> hrm, don't know it
13:03:45 <Heffalump> which, higher-order matching, or SML?
13:04:59 <hornby> Eh? Both :)
13:05:38 <Heffalump> SML is standard ML, a strict functional programming language
13:05:40 <hornby> Don't know much, thats why I'm here. 
13:05:57 <hornby> Heffalump: I've heard of it -- I may even have seen a code snippet or two, but thats about ti :)
13:06:16 <Heffalump> http://www.standardml.org/ is as good an intro as any to that
13:07:05 <Heffalump> if you really want to know what higher-order matching is about, read the first chapter of my thesis :-) (linked from http://web.comlab.ox.ac.uk/oucl/work/ganesh.sittampalam/)
13:07:34 <hornby> Will it blow my mind with advanced mathematics?
13:07:57 <Heffalump> I hope not
13:08:10 <Heffalump> I get confused by advanced mathematics and/or logic so I try to keep it to a minimum
13:08:11 <hornby> Well, I'll give it a look anyway :)
13:08:29 <Heffalump> but that said, I was a mathematician in a former life so I can't help sneaking some mathematical type stuff in :-)
13:08:35 <hornby> heh
13:08:45 <hornby> Ooh, Oxford
13:11:27 <hornby> Sorry, which one am I reading here?
13:11:50 <Heffalump> the D.Phil. thesis
13:12:00 <Heffalump> sorry, should have said that's the same as a PhD :-)
13:12:22 <Heffalump> well, just the first chapter, unless you've really got lots and lots of time to spare
13:12:44 <hornby> That's probably all that I will be able to fit in my brain anyawy :)
13:13:30 <shapr> Heffalump: you know anything about lyapunov exponents?
13:15:06 <Heffalump> I've heard of them, but that's all
13:15:10 <shapr> ok
13:25:30 <hornby> this is cool, I haven't hit a single equation yet :)
14:25:21 * shapr bounces
14:25:35 <hornby> Sucess?
14:25:49 <shapr> actually, I returning to start on the next part.
14:26:06 <shapr> I have 1.5 hours, let's see if I can encode a string in Banana.hs
14:27:05 <hornby> cool :) good luck
14:27:32 * Igloo wonders what shapr is doing
14:27:54 <shapr> Igloo: I'm writing a Haskell implementation of the twisted.spread part of the Twisted server framework
14:28:05 <shapr> from http://twistedmatrix.com
14:28:29 <shapr> this part specifically: http://www.twistedmatrix.com/products/spread
14:29:29 * Igloo raises an eyebrow
14:29:56 <shapr> twisted.spread has three layers, banana at the bottom, jelly above that, and pb on top
14:30:08 <shapr> it already has implementations in Python, Java, and elisp.
14:30:19 <shapr> and there an Oz implemention that's out of date.
14:31:27 <shapr> awesome, I just got an email from Thomas Kuehne on where to download a copy of his thesis:
14:31:35 <shapr> "Functional Pattern System"
14:34:25 <hornby> who?
14:34:37 <hornby> oh, he's in the wiki
14:34:50 <shapr> http://c2.com/cgi/wiki?ThomasKuehne
14:34:53 <shapr> yes he is
14:36:21 <hornby> He seems cool
14:36:28 <shapr> yah he does
14:50:03 <shapr> so, I'm trying to make a encode and decode functions that will have different implementations for different types
14:50:29 <shapr> in Python, I just dispath on type(obj)
14:50:57 <shapr> I assume in Haskell, the simplest thing is to make a type class, and declare different types as instances with their specific implementations?
14:51:00 <shapr> seems right.
14:51:27 <Igloo> Sounds good from your description
14:51:32 <shapr> cool :-)
14:51:38 <shapr> any other options that might be better?
14:52:53 <Igloo> Well, if you don't really mean "type" in the Haskell sense then you probably want to use a case statement (or just different lines of a function)
14:54:06 <shapr> the 'types' in banana.py are list, int, longint, longneg, float, vocab, and string
14:54:21 <shapr> so I think I do mean types in a Haskell sense.
14:55:20 <Igloo> You might have data BananaType = BList ... | BInt ... etc
14:55:37 * shapr thinks about that
14:55:43 <Igloo> What's longneg?
14:56:00 <shapr> long integer with a negative sign
14:56:24 <Igloo> Are longint and longneg signed and unsigned longs respectively?
14:57:12 <shapr> in a nutshell, s-expressions are turned into base 128 (seven bit safe) and sent across the wire.
14:57:26 <shapr> so it's one byte of type, one byte of length, and then the actual content.
14:57:45 <shapr> no negative numbers are directly encoded, they have a separate type.
14:57:48 <shapr> dunno why
14:58:36 <shapr> I'm not sure what to do with a union type.
14:58:53 * shapr looks for examples in the Thompson book
14:59:59 <shapr> hm
15:00:01 <Igloo> You might want something like Either depending on exactly what you need to achieve
15:00:18 <shapr> I think I understand what you mean about the case statement.
15:00:42 <shapr> declare a union type, then switch inside a function that's BananaType -> String or
15:00:47 <shapr> something close to that
15:01:09 <Igloo> Yup
15:01:40 <shapr> can pattern matching do different types entirely?
15:01:44 <shapr> I've never thought of that.
15:01:47 * shapr tries
15:02:12 <shapr> actually, I don't know how that would work.
15:02:13 <shapr> hmm.
15:02:46 * shapr reads about Either
15:03:33 <shapr> oh that's what Either is good for
15:04:47 <shapr> nifty!!
15:05:41 <hornby> Whats Either?
15:05:53 <Heffalump> data Either a b = Left a | Right b
15:07:38 <shapr> can Either work for many types?
15:08:35 <shapr> doesn't look like it.
15:08:43 <Heffalump> yes, like any polymorphic datatype
15:08:54 <shapr> hm
15:08:59 <Igloo> Only a pair oftypes
15:09:10 <Heffalump> well, ok
15:09:29 <shapr> is there an "Any" for any number of types?
15:09:44 <Igloo> No
15:09:48 <shapr> oh well.
15:10:11 <Heffalump> but you can define your own
15:10:22 <Heffalump> well, for any particular number of types
15:10:40 <shapr> hm
15:10:54 <shapr> maybe I should go with typeclasses for the moment.
15:12:31 <shapr> since I understand them better than Either.
15:13:08 <Heffalump> do you understand List?
15:13:13 <shapr> sure
15:13:16 <shapr> err
15:13:16 <Igloo> I brought up either WRT union types
15:13:20 <shapr> I think so.
15:13:30 <Heffalump> Either isn't much more complicated, if at all
15:15:21 <shapr> Is Maybe a specialization of Either?
15:15:38 <Heffalump> no, it's a separate datatype
15:15:47 <shapr> colud it be?
15:15:52 <Heffalump> errm, sort of
15:15:57 <hornby> Can Haskell use Curses?
15:16:03 <Heffalump> you could write type Maybe a = Either a ()
15:16:06 <Igloo> Maybe is roughly Either a (), give or take Right _|_
15:16:18 <Heffalump> and then Just foo would be Left foo, and Nothing would be Right ()
15:16:21 <shapr> cool, that fits with my mental model then, thanks
15:16:29 <shapr> excellent
15:16:37 <Heffalump> don't worry about _|_ for now :-)
15:16:50 <shapr> it's called "bottom" I think.
15:17:01 <shapr> well, I'll skip it for the moment.
15:23:15 <hornby> Anyone? Haskell with curses? 
15:23:35 <shapr> hornby: I don't know, have you looked on haskell.org? or googled for it?
15:24:28 <hornby> shapr: Yeah, but I haven't found much
15:24:58 <hornby> shapr: just this http://qrczak.ids.net.pl/Curses.hs
15:25:19 <shapr> hm, looks like it.
15:25:35 <hornby> But Hugs won't run it. Complains about not finding ByteArary
15:25:51 <shapr> I think that's a ghc thing, but I'm not sure.
15:25:57 <hornby> Which is a ghc only thing? But ghc won't compile it... can't find module Int
15:26:23 <shapr> did you try "ghc -package data --make Curses.hs" ?
15:26:45 <hornby> shapr: ah, not with -package data
15:27:05 <hornby> shapr: Cool. It went further. Now it just does: Curses.hs:42: parse error on input ``'
15:27:55 <shapr> hm
15:28:33 <shapr> I got a strange error
15:28:37 <shapr> *** Exception: ghci/ByteCodeGen.lhs:1060: Non-exhaustive patterns in case
15:29:00 <Heffalump> oops...
15:29:24 <Heffalump> hehe, that ` is caused by emacs being too clever for its own good, I bet
15:29:44 <Heffalump> Curses.hs:46: parse error on input `import'
15:29:48 <Heffalump> how did you get past that?
15:29:53 <shapr> ?
15:30:02 <hornby> Heffalump: Uh, I never had that :)
15:30:05 <shapr> neither did I
15:30:05 <Heffalump> hmm.
15:30:10 <Heffalump> maybe it just doesn't like me
15:30:42 <shapr> wow, it segfaulted.
15:30:43 <shapr> cool
15:30:52 <shapr> *** Exception: ghci/ByteCodeGen.lhs:1060: 
15:30:52 <shapr> Process ghci segmentation fault
15:31:04 * Heffalump gets the import parse error with ghc-5.00.2 and ghc-5.02.2
15:31:17 <shapr> hm
15:31:30 <shapr> GHC Interactive, version 5.02.3, for Haskell 98.
15:31:40 <shapr> maybe 5.02.3 makes a difference?
15:31:42 <shapr> it shouldn't
15:31:56 <hornby> I'm using The Glorious Glasgow Haskell Compilation System, version 5.02.2
15:32:49 <hornby> What does stdScr = ``stdscr'' mean?
15:32:54 <shapr> I have no clue.
15:32:59 <Heffalump> it means emacs got too clever for its own good
15:33:04 <Heffalump> change the `` and '' to " "
15:33:24 <hornby> okay
15:33:29 <Heffalump> I can't get past ghc complaining about forign imports, on three different machines
15:33:35 <Heffalump> and using ghc and ghci.
15:33:43 <Heffalump> I'm sure there's an easy fix to that, but I should go home and go to bed.
15:33:43 <shapr> I just get the ByteCodeGen.lhs problem.
15:33:43 <hornby> Curses.hs:46: parse error on input `import'
15:33:48 <Heffalump> yeah. that.
15:33:59 <Heffalump> oh, /me realises something
15:34:01 <hornby> `' again? 
15:34:02 <shapr> what?
15:34:17 <Heffalump> do ghc -fglasgow-exts
15:34:19 <Heffalump> (...)
15:34:38 <hornby> HA!
15:34:40 <hornby> Whoah. 
15:34:42 <Heffalump> oh.
15:34:50 <Heffalump> and I withdraw everything I said about emacs and " "
15:34:55 <Heffalump> change it back to the `` ''
15:34:58 <hornby> hehe
15:35:04 <shapr> it segfaulted
15:35:10 * Heffalump wonders what `` '' do
15:35:15 <Heffalump> ghc-5.00.2: panic! (the `impossible' happened, GHC version 5.00.2):
15:35:16 <Heffalump>         native code generator can't compile lit-lits, use -fvia-C
15:35:21 <hornby> heh, same here
15:35:26 * Heffalump tries that
15:35:39 <shapr> very strange.
15:35:49 <shapr> ohh cool
15:35:52 <Heffalump> sorted.
15:36:04 <hornby> Uh ... wow? Lots of warnings, but it seems to have worked
15:36:09 <shapr> if I try to load that file three times in a row, it segfaults.
15:36:22 * Heffalump has got a .o file from it too
15:36:29 <Heffalump> you'll need to write some client code to actually use it though
15:36:38 <shapr> not me.
15:36:43 <hornby> Awesome
15:36:45 <Heffalump> no, hornby.
15:36:53 <Heffalump> how far did you get with my thesis, OOI? :-)
15:36:58 <shapr> no, I mean I haven't gotten a .o file
15:37:14 <hornby> Heffalump: The abstract was pretty good ...
15:37:14 <Heffalump> oh
15:37:21 <Heffalump> shapr: but you're using ghci, right?
15:37:24 <Heffalump> hornby: :-)
15:37:32 <shapr> same with ghc
15:37:34 <Heffalump> ghc -fglasgow-exts -fvia-C -package data --make Curses.hs
15:37:34 <hornby> Heffalump: And I read part of the first chapter :) I like it. The theory. The math was over my head
15:37:36 <Heffalump> gives me a .o file
15:37:43 <hornby> Heffalump: Ditto. Thanks :)
15:37:44 * shapr tries that
15:38:13 <hornby> Now I just have to figure out how this thing works
15:38:21 <Heffalump> heh
15:38:25 <shapr> wow, I got some nifty warnings, but I did get a .o file
15:38:38 * Heffalump didn't think there was any math in the first chapter, just some Haskell code
15:38:52 <Heffalump> which is admittedly quite like maths, but still :-)
15:39:03 <hornby> Heffalump: Well a lot of it was pseudocode
15:39:15 <hornby> Heffalump: (+) makes an apperance. 
15:39:27 <Heffalump> only to make the Haskell easier to read
15:39:51 <hornby> Heffalump: Anyway, I think the idea is neat, but I don't claim to be able to understand how you actually DO it
15:40:00 <Heffalump> heh :-)
15:40:18 * Heffalump spent three years learning how to do it and writing about it :-)
15:40:22 <hornby> Heffalump: I'll look at it again when I know more :)
15:40:29 <hornby> Heffalump: :)
15:41:50 * shapr suddenly realizes that decode can't be in a typeclass
15:41:58 <shapr> it'll have to return a union type.
15:42:04 <shapr> and switch internally.
15:42:06 <shapr> ah...
15:42:23 <Igloo> Why can't it?
15:43:00 <Igloo> It's essentially the same as fromInteger, for exmaple, which is in a class
15:43:15 * shapr thinks about that
15:43:32 <Heffalump> shapr: in a sense, union types are the runtime version of type classes
15:43:36 <shapr> decoding gives you a string, and the first byte is a type byte, so how can you know ahead of time?
15:43:54 <Heffalump> if which thing something is should be workable out at compile time, then a type class is probably the solution, otherwise a union type is
15:44:07 <Heffalump> shapr: you can't, you would need a union type there
15:44:10 <shapr> right
15:44:16 <shapr> that's what I was saying.
15:44:33 <Igloo> decoding gives you a string?
15:44:35 <shapr> but encode can be in a type class, because you're sticking haskell types into the encode method.
15:44:37 <Heffalump> so you can point and laugh at Igloo for being wrong, or something :-)
15:44:48 <shapr> Igloo: you decode from a string to a something.
15:44:58 <Heffalump> you /might/ be able to do something with existential types, but I doubt it
15:45:01 <Igloo> Right, so it takes a String
15:45:03 <shapr> the string has type ++ length ++ content
15:45:22 <shapr> since I don't know what one of those is... I'll pass for now :-)
15:45:25 <Igloo> Why can you not write decode :: (BT a) => String -> a?
15:45:25 <Heffalump> what you really need is something like Cayenne to be able to give a proper type to your decode function (without having to resort to union types)
15:45:41 <shapr> ok...
15:45:42 <shapr> I'll bite.
15:45:46 <shapr> what's Cayenne?
15:45:48 * shapr googles
15:45:50 <Heffalump> igloo: how do you expect the type-checker to know which it'll turn out to be at compile-time?
15:45:53 <Igloo> Oh, but without the context as it would be in the class definition
15:46:00 <shapr> huh?
15:46:12 <Igloo> Oh, of course, OK
15:46:28 <shapr> you guys talk over my head most of the time :-)
15:46:30 <shapr> but it's fun.
15:46:46 <shapr> I like knowing there's much further to go.
15:46:49 * Heffalump really goes home to sleep
15:46:52 <shapr> g'night Heffalump!
15:46:55 <Igloo> So you want to use case to match on teh first byte and then use the above then
15:47:24 <shapr> oh
15:47:32 <shapr> good point!
15:47:39 <shapr> err
15:47:47 <Igloo> Possibly anyway
15:47:52 <shapr> right!
15:47:57 <shapr> yes, I got it now :-)
15:48:10 <shapr> I think..
15:48:14 * Igloo looks unconvinced and decides this is a sign I should be in bed too
15:48:18 <shapr> heh
15:48:39 <Igloo> Night all
15:48:45 <shapr> g'night Igloo !
15:49:06 <hornby> Hm. 
15:49:28 <hornby> import Curses and a simple loop to take a character and print it is 300k 
15:49:42 <shapr> well, you get a nice runtime system along with it :-)
15:49:51 <hornby> shapr: Can I strip it down some?
15:49:58 <shapr> probably.
15:50:21 <hornby> Well, its not important now. I'll get it working first, then optimize :)
15:50:22 <shapr> read the ghc user's guide about creating smaller executables.
15:50:27 <shapr> yah, I agree.
15:51:38 <hornby> cool
15:58:32 <hornby> Hrm, I don't suppose I can make Hugs use Curses.o or anything?
15:58:39 <shapr> I don't know...
15:58:55 <shapr> I'm pretty sure you can persuade ghci to use it.
15:59:56 <hornby> !!!! It works!
16:00:11 <hornby> And its simple too
16:00:29 <shapr> yay!
16:00:47 <shapr> I want to seem some demo code when you have some
16:01:12 <hornby> I've got a hello world 
16:01:20 <shapr> cool, show me?
16:01:39 <hornby> import Curses
16:01:39 <hornby> main :: IO ()
16:01:39 <hornby> main = do initCurses; addStr "Hello, world!"; getCh; endWin;
16:01:42 <hornby> Simple as pie
16:02:46 <hornby> the addStr NEEDS a ; after it, which I find odd
16:03:03 <shapr> that is odd
16:03:18 <hornby> or else it tries to use getCh as an argument
16:03:27 <hornby> must be the way the function is written, I dunno
16:03:34 <shapr> try ":t addStr"
16:04:09 <hornby> shapr: where?
16:04:17 <shapr> in ghci
16:04:26 <shapr> if you can get Curses into ghci
16:04:27 <hornby> let me see if it'll work in ghci
16:04:47 <hornby> Prelude> import Curses
16:04:47 <hornby> <interactive>:1: parse error on input `import'
16:05:02 <hornby> Prelude> import Curses
16:05:02 <hornby> <interactive>:1: parse error on input `import'
16:05:12 <hornby> er, sry. I mean: addStr :: String -> IO Int 
16:09:07 <shapr> actually, if you :load Foo.hs
16:09:18 <shapr> and Foo.hs has "module Foo where import Curses"
16:09:21 <shapr> that might work
16:09:53 <hornby> Prelude> :load useCurses.hs
16:09:53 <hornby> can't find module `Int'
16:10:03 <shapr> :set -package data
16:10:16 <hornby> nice
16:10:34 <hornby> Main> :type addStr
16:10:35 <hornby> String -> IO Int
16:10:50 <hornby> Awesome that it works though!
16:11:12 <hornby> AWESOME! I can just do Main> main and have it work
16:11:22 <shapr> cool :-)
16:16:09 <Heffalump> cool.
16:16:31 <hornby> Very
16:16:53 <hornby> Whats Curses.hi? It happens when I compile
16:17:02 <Heffalump> it's the "interface" file
16:17:14 <Heffalump> it's needed for other modules that depend on it
16:17:17 <hornby> hm. like a .h? or ? 
16:17:32 <Heffalump> not exactly, since it's compiler-generated
16:17:57 <hornby> Hrm, this information couldn't be extracted from the .o?
16:18:07 <Heffalump> no, it's more detailed stuff
16:18:29 <hornby> ok :) neat. 
16:18:31 <Heffalump> the .o file is restricted to interface information on the same level as C functions
16:18:52 <hornby> So to import Curses.o I need Curses.hi
16:19:35 <Heffalump> you don't import a .o file really, you import a module
16:19:58 <Heffalump> and it just happens that ghc will require the .hi file to do the import and the .o file to link the final executable
16:20:52 <Heffalump> whereas if you were using hugs it'd just require the .hs or .lhs file to do the import
16:21:05 <hornby> hm
16:22:59 <hornby> I like how Haskell can use C functions so easily
16:23:30 <Heffalump> it's not /that/ easy - you need to fiddle around with marshalling and unmarshalling quite a bit to do it nicely
16:23:31 * shapr tries to figure out how to do dispatching
16:28:16 <hornby> Looks easy
16:28:25 <hornby> foreign import "initscr" unsafe initScr :: IO ()
16:28:56 <shapr> anything that says "unsafe" makes me nervous :-)
16:29:08 <Heffalump> that's fine if initscr is of type "void foo()"
16:29:08 <hornby> :)
16:29:18 <Heffalump> but for stuff of type "int foo(int x)" for example
16:29:35 <Heffalump> you have to worry about converting the C ints into Haskell Ints or whatever
16:29:49 <Heffalump> and when you have arrays or more complex data structures you have to do yet more work
16:30:13 <hornby> ah I guess. 
16:30:23 <hornby> Hrm, like getCh
16:30:47 <Heffalump> the thing is that C types and Haskell types don't match up perfectly, so you have to do some thinking to convert between them
16:31:28 <hornby> I guess the curses library is more straightforward than most. Most of it is void :)
16:32:59 <hornby> brb, burrito
16:33:50 <Heffalump> are you at uni in Toronto, btw?
16:34:54 <hornby> Heffalump: no, I wish
16:35:26 <hornby> Heffalump: I'm a little tiny place called Trent. 
16:37:46 <Heffalump> ah
16:39:04 <Heffalump> right. bedtime
16:39:11 * Heffalump wonders if he'll make it out of bed in time for the football
16:39:15 <Heffalump> <gone>
16:39:17 <hornby> night. thanks for the help :)
16:40:09 <hornby> main :: IO ()
16:40:09 <hornby> main = do initialize; addStr "Hello, World"; getCh; finish;
16:40:26 <hornby> So I've got that. I want to move the addStr and getCh to its own function
16:40:46 <hornby> but something like helloWorld :: IO ()
16:41:01 <hornby> helloWorld = stuff (or even do stuff) doesn't work
16:42:24 <hornby> Am I misunderstanding something?
16:42:39 <shapr> huh?
16:42:51 <shapr> ohh
16:43:21 <shapr> throw them into a function without an explicit type
16:43:35 <shapr> then load the file and use :t on the function
16:43:42 <shapr> haskell can infer the most general type most of the time
16:44:13 <hornby> okay
16:44:20 <hornby> hey, it compiled. cool :)
16:44:31 <shapr> sometimes the most general type is waaaay too general
16:44:41 <shapr> and will make your program slow, or not work like you want it to
16:44:48 <shapr> then you can explicity type it a certain way
16:44:55 <hornby> hm
16:45:30 <hornby> <interactive>:1: Variable not in scope: `helloWorld'
16:46:28 <hornby> only :t main works, none of my other functions 
16:46:39 <shapr> that's odd
16:47:04 <shapr> time for me to go to sleep
16:47:09 <shapr> I have to paying work tomorrow
16:47:43 <hornby> okay :)
16:47:45 <hornby> Thanks
16:47:48 <hornby> g'night
16:48:01 <shapr> hey, if you write more cool code, put it online somewhere
16:48:15 <shapr> I read irc logs :-)
16:48:18 <hornby> ok :)
17:46:54 <hornby> Anyone familiar with HaXmL?
17:47:26 <hornby> like, how the hell to install it? 
17:54:47 <hornby> hmake: Sorry, I do not know about your installation of ghc << Suggestions on how to fix this?
18:15:48 <xbill> it's twisty
18:16:07 <xbill> What version of ghc?
18:37:56 <hornby> Uh The Glorious Glasgow Haskell Compilation System, version 5.02.2
18:38:24 <hornby> Are there instructions somewhere or something?
18:38:41 <hornby> brb
18:52:17 <hornby> xbill: thoughts?
18:55:48 <xbill> 5.02 broke some backward compatibility stuff, tried with a ghc4-based version?
18:57:00 <hornby> xbill: ugh. no. 
18:57:37 <hornby> Worth a shot I guess
19:02:27 <xbill> there were a bunch of things I had a real hard time with when ghc5 cam eout
19:03:03 <hornby> my problem is that hmake just doesn't work
19:03:13 <hornby> Or I don't know how to work it
19:03:49 <hornby> arg, laundry. try again later
21:28:17 <hornby> Maybe I can compile this by hand .. what a pain
21:31:35 <hornby> Unless someone knows how to get hmake to work on Debian?
21:38:16 <hornby> I was pleasantly surprised to learn that '-package text' 
21:38:17 <hornby> was all I needed to use HaXmL.
21:39:00 <hornby> << from fa.haskell ... Does this mean that I don't need to compile HaXmL -- it comes with ghc? 
21:42:24 <hornby> oh god, it does too
21:42:38 <hornby> well, that saves some time, at least :) ha
22:58:38 <hornby_> {-# OPTIONS -package text #-} why can't I do that? :(
23:54:03 <hornby> the main HaXmL paper needs to be corrected. hcola to hcol. hcenter to hcentre. hlist to god knows what. you think they could try to compile something before they publish it
