03:11:47 <shapr> w000
03:11:54 * shapr springs into the channel
03:13:19 <shapr> gooood morning!
03:15:23 * shapr bounces
03:17:37 * shapr downloads haddock
03:17:52 <shapr> Cry Haddock, and Let Loose the Docs of War!
05:47:05 <shapr> is there some way I can get the bit level representation of a Double?
05:49:25 <Igloo> How would you know what the bits meant if you could?
05:50:08 <shapr> it seems that ghc keeps Double in an ieee754 representation
05:50:22 <Igloo> Are you talking about GHC or Haskell?
05:50:30 <shapr> well, ghc atm
05:50:55 <Igloo> In that case I wouldn't be surprised if the answer was yes, but I don't know how
05:51:11 <shapr> I suspect I'm missing something, it would seem likely to me that there would be a bit formatting module for putting stuff onto a socket connection.
05:51:42 * shapr investigates PackedString
05:52:22 <Igloo> I'm not aware of any standard bit representation for Double in Haskell - I'm not even sure the precision and/or range are fixed
05:52:28 <shapr> hm
05:52:47 <shapr> this banana.py uses struct.pack("!d",myFloat)
05:53:09 <shapr> reading the C source for struct implies that it's a floating point number in C double precision format.
05:53:33 <shapr> is there already a Haskell module for going from Double to C double precision that you know of?
05:54:14 <shapr> I googled for it, but the only thing I found was some MachOps stuff in ghc itself.
05:54:21 <shapr> and I can't figure out how to use those.
06:06:34 <shapr> Thomas Kuehne is cool
06:22:16 <shapr> http://c2.com/cgi-bin/wiki?FunctionalPatternSystemForObjectOrientedDesign
06:38:11 <shapr> f00
07:39:18 <rev> yop
07:39:19 <rev> er, yo
07:39:21 <shapr> hi rev
07:39:22 <shapr> what's up?
07:39:32 <shapr> looking for fellow haskellers?
07:39:39 <shapr> or want to learn the language?
07:39:41 <rev> not too much, just thinkingabout learning haskell to the point of it being useful for evil plans and such
07:39:51 <rev> i know it a bit already, not a working knowledge tho
07:40:06 <shapr> I'm striving for that working knowledge myself.
07:40:09 * rev nods
07:40:13 <shapr> I've made some progress in that direction.
07:40:26 <shapr> there are several very knowledgable haskellers on here though.
07:40:51 <shapr> do you have any questions? anything I can help you with?
07:41:00 <rev> i do most of my work out of squeak, but since i've switched to linux, i decided i'd like to know one lang/environment/gui-toolkit combo for creating vaguely native looking apps
07:41:03 <rev> nah, not yet
07:41:09 <rev> just coming around to absorb knowledge
07:41:18 <shapr> ok
07:41:22 <rev> going to try installing fudgets here
07:41:32 <shapr> cool, I haven't tried fudgets yet.
07:41:44 <rev> i've tried the remote-display demo on my x-screen
07:41:45 <Igloo> Remind me, is that a GUI?
07:41:52 <rev> which is pretty slick, never seen a page with that feature. :P
07:41:54 <rev> Igloo: yup
07:42:04 <rev> a from-scratch gui-toolkit, rather than bindings to tk or gtk
07:42:15 <shapr> http://www.cs.chalmers.se/ComputingScience/Research/Functional/Fudgets/
07:42:16 <Igloo> Cool - I should take a look at all the available GUIs at some point and see if any of them are usable
07:42:23 <rev> i wonder how much is in haskell, prolly lots
07:42:43 <shapr> haskell has support for gtk and gtk2
07:42:53 <shapr> I haven't used them though.
07:42:53 <rev> yup
07:42:59 <shapr> not from haskell at least.
07:43:06 <rev> yeah
07:43:42 <shapr> rev: Smalltalk is one of the languages I want to learn, but I haven't gotten to it yet.
07:43:54 <Igloo> My GTK experience is pretty much limited to a small amount of playing in perl. I stopped when I found it was leaking memory every time I made and destroyed a button
07:43:57 <rev> shapr: i'm a huge fan of smalltalk, perhaps even a little irrationally
07:44:12 <shapr> rev: I fit into the same category with Python :-)
07:44:24 <rev> shapr: we're discussing gtk bindings on the list, so i may not have to learn haskell (not that i'm adverse to that)
07:44:49 <shapr> haskell is a nice language, though very different from Python or Smalltalk.
07:44:52 <rev> i've done playing with any gtk bindings, some tk tho
07:44:55 <rev> shapr: indeed
07:45:01 <rev> shapr: which is why i'm attracted to it
07:45:17 <rev> shapr: i'm also a fan of lisp, but a) no decent guis here, and b) it's not as out-there as haskell
07:45:18 <shapr> the significant whitespace got me to visit Haskell-land
07:45:33 <shapr> the purity and the power got me to stay.
07:45:42 <rev> well, i'm not a fan nor a non-fan of the whitespace, just a thing
07:45:43 <rev> indeed
07:46:02 <rev> i'm also interested in a language with this kind of power (e.g., on par with CL and smalltalk) yet with a real-live compiler
07:46:29 <shapr> I'm getting used to making binaries myself.
07:46:32 <shapr> it feels weird at first.
07:46:41 <rev> heh, i bet
07:46:56 <rev> i like the way smalltalk does things, but just in case i need to write something numerical. :)
07:47:03 <rev> good to have an option other than C :/
07:47:39 <shapr> yah I agree.
07:48:25 <shapr> I wonder how likely it is I could write Haskell applications in Linux and get them to run on Windows just as easily.
07:48:30 <shapr> any idea how well win32 supports gtk?
07:48:50 <rev> not sure about question 1
07:48:59 <rev> i think it does it decently, develoepd actively 
07:49:12 <rev> i've only used gimp and xchat under win32, but they both work swell
07:49:46 <shapr> from what I've heard Haskell runs fine on windows, as long as you have decent bindings.
07:49:55 <shapr> HOpenGL runs on both win32 and Linux
07:50:32 <rev> heh, make your own widget set using GLUT. ;P
07:50:40 <shapr> scary thought
07:50:51 <rev> big time
07:51:45 * shapr wrestles with manual Float to ieee 754 double conversion
08:00:19 <rev> hrmm, ./configure for ghc doesn't like my platform
08:00:25 <rev> 'unrecognised'
08:00:33 <shapr> what's your platform?
08:00:50 <rev> debian 3.0 / ppc
08:01:43 <shapr> hm
08:01:56 <shapr> I've seen a MacOS X version on haskell.org/ghc
08:02:03 <rev> yup, saw it too
08:02:26 <rev> i bet it'd compile if it would quit with the unrecognised
08:02:56 <rev> it sees me as powerpc-unknown-linux-gnu ... wonder how i could trick it with --host?
08:03:07 <shapr> I'd suggest either googling for the ghc/ppc or look at the archives of ghc-users
08:03:20 <shapr> I know something was discussed about it at one point, but I don't remember what.
08:03:32 <rev> spiff, thanks for the pointer
08:14:14 <shapr> hm
08:14:37 <shapr> I wonder if PackedString does ieee 754 double
10:06:05 <shapr> arggggg
10:06:40 <shapr> the only reference implementation I can find of floating point number -> ieee 754 is written in JAVASCRIPT.
10:21:29 * rev is away: out
10:21:34 <shapr> ahaaaaa
10:21:44 <shapr> rfc1832 has the answer!!
10:21:58 <shapr> awesome
10:43:23 <shapr> hmmmm
10:44:26 <Igloo> One way to do it would be to have the type be the component parts and do the maths yourself (making it an instance of Num etc)
10:44:54 <shapr> well
10:45:00 <shapr> I found CDouble in CTypes
10:45:08 <Igloo> Although the standards are quite possibly non-free
10:45:35 <shapr> rfc1832 has a formula for calculating the number from the parts
10:46:00 <shapr> but I'm not sure about going the other direction...
10:46:09 <shapr> how do I normalize a mantissa?
10:46:16 <Igloo> You need to know how you round when you add, multiply etc too
10:46:30 <shapr> oh
10:46:37 <Igloo> I was told at one point but it's not the sort of thing one remembers  :-)
10:47:08 <shapr> I only need a -> ieee 754 double precision and double -> a
10:47:30 <shapr> it seems that CDouble in CTypes is a member of
10:47:33 <shapr> Eq, Ord, Num, Read, Show, Enum, Typeable, Storable, Real, Fractional, Floating, RealFrac, and RealFloat
10:47:55 <shapr> question is, do any of those classes let me get a bit level representation of that number?
10:48:16 * shapr looks up the details of each of those classes
10:48:53 <Igloo> Storable is the most likely, possibly Typeable, I'd be very surprised if any of the others did. And even then I thin it would be compiler specific
10:49:16 <shapr> for the moment, that's ok
10:49:20 <shapr> I just want it to work first
10:49:36 <shapr> then I can make it happen in nhc and Hugs
10:49:54 * shapr looks up Storable
10:54:06 <shapr> yoikes
10:59:14 <shapr> Storable is for reading and writing values of primitive types to and from raw memory
10:59:27 <shapr> that implies that I can just grab the value of a CDouble
11:00:46 <Igloo> Gtk+HS uses an older version of GTK than Gtk2HS, right?
11:00:55 <shapr> right
11:01:30 <shapr> Igloo: doing some gui stuff?
11:01:47 <Igloo> If GUI stuff is nice then I may do some of it
11:02:43 <shapr> hm, peek takes a Ptr a
11:02:51 <shapr> and it returns IO a
11:03:02 <shapr> hey, that could mean it actually gives the bit level value
11:03:17 <shapr> so, how to get a Ptr from CDouble?
11:03:42 <shapr> hm
11:43:32 <shapr> well crap
11:50:38 <Igloo> ?
11:51:10 <shapr> I can't figure out how to get from a Storable to a Ptr
11:51:36 <shapr> I probably shouldn't be mucking around it GHC's FFI anyway.
11:51:44 <Igloo> Ah, no idea
11:52:26 <shapr> is there some way I can ask if a type is an instance of a class in ghci?
11:52:50 <shapr> or even better, type classes and their accompanying methods are defined  for that type?
11:54:06 <shapr> oho
11:54:27 <shapr> hhmmm
11:57:28 <shapr> bah
11:57:34 <shapr> forget this
11:57:44 <shapr> I'll do it manually.
12:00:28 <shapr> wish I could search the mailing list archives
12:23:51 <shapr> geez
12:24:00 <shapr> I wish there were more examples
12:56:41 <hornby> shapr: I know exactly what you mean
12:57:22 <shapr> sure is frustrating
12:57:38 <shapr> FFI or Dynamic Types can probably do what I want
12:57:43 <shapr> but how do I use them?
12:57:46 <hornby> heh
12:57:57 <hornby> Its frustrating
13:00:26 <hornby> Hrm, I'm going to have to read up on classes. I don't see how they fit 
13:00:49 <shapr> they specify names and type signatures of certain operations
13:01:16 <shapr> here's something I whipped up for fun:
13:01:19 <shapr> class CharExts a where
13:01:19 <shapr>     isVowel     :: a -> Bool
13:01:19 <shapr>     isConsonant :: a -> Bool
13:01:25 <shapr> instance CharExts Char where
13:01:25 <shapr>     isVowel a     = elem a "aeiouAEIOU"
13:01:25 <shapr>     isConsonant a = elem a (filter (not . isVowel) ['A'..'Z'] ++ ['a'..'z'])
13:01:59 <hornby> hmm
13:02:14 <shapr> make sense?
13:02:21 <hornby> okay. yeah, it does, cool thanks :)
13:02:39 <Igloo> Is there some reason for using a class there OOI?
13:03:00 <shapr> Igloo: CharExts was specifically written for me to figure out type classes
13:08:11 <shapr> woops
14:34:17 <shapr> well now
14:34:21 <shapr> that was exciting
15:05:17 <shapr> btw.
15:05:27 <shapr> I found out how to solve my problem.
15:06:57 <Igloo> The Double -> Bits one?
15:07:02 <shapr> yup.
15:07:06 <Igloo> Go on?
15:07:18 <shapr> decodeFloat (0.0 :: Double)
15:07:27 <shapr> part of the Prelude
15:07:35 <Igloo> Really? Cool
15:07:37 <shapr> RealFloat class even
15:07:48 <shapr> works correctly for Float, Double, etc etc etc
15:08:07 <shapr> I had to go away for a coupla hours after finding that.
15:08:25 <Igloo> It never ceases to amaze me the number of functions I've forgotten from the Prelude
15:08:27 <Igloo> :-)
15:08:41 <shapr> I really need to read the entire Prelude at least twice before doing more development.
15:08:56 * Igloo tries to find a description of it
15:12:28 <Igloo> Hmmm, I can't remember how doubles are defined. Oh well.
15:12:36 <shapr> huh?
15:12:46 <Igloo> By IEEE I mean
15:13:06 <shapr> I can give you about sixty pages of pasted info
15:13:15 <shapr> in short, it's 64 bits
15:13:17 <shapr> 1 bit of sign,
15:13:24 <shapr> 52 bits of mantissa
15:13:29 <shapr> and 11 bits of exponent
15:15:33 <Igloo> I'd guess the restrictions match those on http://www.haskell.org/onlinereport/basic.html (at the bottom)
15:16:11 <shapr> amusingly, Float, Double, and friends, all have isIEEE as part of their typeclass methods
15:16:20 <shapr> what do you call functions that are part of a typeclass? methods?
15:16:52 <Igloo> I can't remember what the report calls them
15:17:01 <shapr> well, in any case...
15:17:18 <shapr> now I just need to stitch those numbers together into a single 64 string.
15:17:48 * shapr rereads docs for Bits module
15:18:18 <shapr> if I can get this working, I think all of my unit tests for Banana.hs will pass!
15:18:22 * shapr bounces merrily
15:18:32 <Igloo> :-)
15:18:45 <shapr> and that'll finish off the bottom layer of the three that I'm writing.
15:18:58 <shapr> banana at the bottom, jelly in the middle, perspective broker at the top.
15:19:01 * shapr bounces excitedly
15:24:47 * shapr thinks
15:25:08 <shapr> hmm
15:27:18 * shapr thinks
15:27:43 <shapr> I need to chop a string up with single bit resolution
15:27:50 <shapr> for decoding
15:29:15 <shapr> Bits module is Num a =>
15:29:39 <shapr> so, string to integer
17:41:54 <shapr> wheee
19:55:55 <shapr> what's up with ShowS ?
19:56:08 <shapr> how do I show one of them?
20:57:54 <shapr> is there a Prelude function to turn a tuple into a list?
20:58:02 <shapr> or the other way around?
20:58:29 <shapr> probably not
21:41:15 * shapr finally goes to sleep
