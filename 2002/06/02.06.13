02:33:58 <shapr> boing boing
02:34:00 <shapr> goood morning
04:28:18 * Yurik is back (gone 17:35:30)
04:33:37 * shapr bounces
05:10:02 * shapr sings
05:10:57 * Igloo scratches head
05:11:55 <shapr> hi Igloo
05:11:57 <shapr> how's life?
05:12:08 <Igloo> Not bad - and with you?
05:12:43 <shapr> pretty good
05:12:46 <shapr> doin zope stuff
05:13:12 <Igloo> Ah, never looked at that myself. Maybe I should some time
05:13:28 <shapr> it's nice
05:13:43 <shapr> imho more powerful than the J2EE equivalent.
06:42:33 <shapr> where does FilePath come from?
06:43:53 <shapr> is there some way ghci can show me the methods of a typeclass?
06:46:25 <shapr> hm
06:46:32 <shapr> :info FilePath isn't quite enough
06:55:39 <shapr> cool, I got a ghc panic
07:05:35 <shapr> hrm
07:05:44 <shapr> if ... then must have an else
07:20:56 * shapr grumbles
07:21:04 <shapr> hasContent     :: String -> IO Bool
07:21:04 <shapr> hasContent dir = and [doesDirectoryExist dir,doesFileExist (dir ++ "/content_file")]
07:21:41 <shapr> it seems that one of those returns a Bool, not an IO Bool, and I can't figure out how to lift it.
07:21:45 <Igloo> Why grumbles? And won't the second of those do the first for you?
07:22:24 <shapr> I get a dir, I want to find all subdirs of that dir that contain the file named "content_file"
07:22:35 <shapr> contentFolders     :: String -> IO [FilePath]
07:22:35 <shapr> contentFolders dir = if (doesDirectoryExist (openFile dir)) then (filter hasContent (getDirectoryContents (openFile dir))) else "foo"
07:23:07 * shapr thinks
07:23:16 * Igloo thinks you're confused
07:23:21 <shapr> I know I am :-)
07:23:31 <Igloo> Is doesDirectoryExist a function of your own making?
07:23:39 <shapr> nah, it's from the Directory module
07:24:03 <Igloo> Is that standard?
07:24:05 <shapr> yup
07:24:41 <shapr> what confuses me is why one of the two parts of that list should return Bool rather that IO Bool
07:24:45 <Igloo> So it is...I wonder why hugs doesn't know about it
07:24:51 <shapr> afaiu, they should both return IO Bool
07:25:07 <Igloo> They do
07:25:17 <Igloo> But and takes a list of Bool, not IO Bool
07:25:25 <shapr> ohhhh
07:25:37 <shapr> hm
07:26:48 <dennisb> hi!
07:27:15 <Igloo> So you could either get Bools with lots of <- (well, 2) or rewrite and with foldM I guess
07:27:32 <Igloo> Oh, actually, liftM should be your friend
07:27:49 <shapr> I've just heard of those, don't really know what to do with them
07:27:57 <shapr> I'll try the 2 * <- first
07:28:00 <Igloo> Oh, no, I'm talkig rubbish
07:28:10 <Igloo> (re liftM)
07:28:24 * dennisb brain is not working today
07:28:33 <shapr> hi dennisb
07:28:42 <shapr> dennisb: that's ok, it's good to take some days off.
07:28:43 <Igloo> Ah, you want liftM and sequence, actually
07:28:48 * shapr blinks
07:28:57 <shapr> actually, the two <- isn't working...
07:29:04 <shapr> though I strongly suspect user error
07:29:06 <Igloo> Something like
07:29:14 <Igloo> do de <- directoryExists foo
07:29:17 <Igloo>    fe <- ...
07:29:28 <Igloo>    return (de && fe)
07:29:29 <dennisb> liftM is easy, just look at the type
07:29:29 <Igloo> should work
07:29:44 <dennisb> I've not yet read the rest in the backlog
07:30:04 <Igloo> But yeah, sequence and liftM will give a cleaner solution
07:30:08 <shapr> hasContent     :: String -> Bool
07:30:08 <shapr> hasContent dir = do isDir <- doesDirectoryExist dir
07:30:08 <shapr>                     hasContent <- doesFileExist (dir ++ "/content_file")
07:30:08 <shapr>                     return (isDir && hasContent)
07:30:20 <shapr> Couldn't match `Bool' against `t t1'
07:30:39 <Igloo> Where?
07:30:45 <Igloo> Oh, it returns IO Bool
07:32:12 <dennisb> yes, the type String -> Bool is wrong, this function returns an IO-action that when run will produce a Bool
07:32:25 <shapr> yah, that fixed it
07:32:32 <shapr> cool
07:33:28 <dennisb> shapr: do you really need to test if the dir exist?
07:33:54 <dennisb> is it not enough to just test for the file?
07:40:15 <shapr> dennisb: my input is a single directory
07:40:29 <shapr> and I want to look into each subdirectory for the "content_file"
07:41:02 <dennisb> don't doesFileExist (dir ++ "/content_file") give the same result anyway?
07:41:05 <shapr> so I'm actually testing every file in my input dir to see if it's a directory
07:41:10 <shapr> I don't know.
07:41:14 <shapr> good point though :-)
07:41:27 <dennisb> id the dir does not exist the file probably don't exist
07:41:30 <shapr> that is much simpler
07:42:10 <shapr> yah, I originally had it as "and [doesDirectoryExist dir, doesFileExist (dir ++ "/content_file")"
07:42:27 <shapr> and I was assuming that would skip the second test if the first one failed
07:43:05 <shapr> I could add a sub-do
07:43:44 <dennisb> you could create an andM that works like that (even though checking for the dir seams pointless in this case)
07:45:04 <shapr> I would guess that liftM or the other somethingM takes the and function?
07:45:10 <dennisb> yes
07:45:29 <dennisb> sequence and a lifted and
07:45:52 <shapr> umm
07:45:59 <dennisb> I think I saw something about it in the backlog but i'm to lazy to check :-)
07:47:49 <shapr> something like this:
07:47:51 <shapr> sequence [(liftM and),doesDirectoryExist dir,doesFileExist (dir ++ "/content_file")]
07:47:52 <shapr> ?
07:52:09 <dennisb> addM = liftM and . sequence
07:52:49 <dennisb> your list is strange, the elements don
07:52:52 <shapr> hasContent2     :: String -> IO Bool
07:52:52 <shapr> hasContent2 dir = (liftM and) (sequence [(doesDirectoryExist dir),(doesFileExist (dir ++ "/content_file"))])
07:52:55 <dennisb> 't have the same type
07:53:06 <shapr> I just figured that out
07:53:07 <dennisb> yes, looks better
07:54:33 <shapr> nifty
07:55:28 <dennisb> hmm, i'm not sure what will happend with the lazyness though (i have to use my brain for that :-)
07:55:32 <shapr> heh
07:56:07 <dennisb> maybe one should write an recursive function to make it lazy in the sence that it does not run all the commands
07:59:10 <dennisb> But it's very easy to write such an function (and I think it's needed to stop sequence from puting all the IO-actions together)
08:00:27 <shapr> it looks like sequence 'factors out' the IO action
08:03:04 <dennisb> This should work:
08:03:10 <dennisb> andM [] = return True 
08:03:10 <dennisb> andM (x:xs) = do { b <- x; if b then andM xs else return False }
08:14:37 <shapr> that andM is cute
08:16:14 <phoenix`> hi
08:16:20 <shreya> hehe, never even knew there was a return function
08:16:23 <shreya> hey phoenix
08:18:34 <shapr> wow, suddenly more people
08:18:42 <topdawg> it la popular
08:18:53 <shapr> eighteen people, I wonder if that's the most we've had.
08:18:56 <phoenix`> lol
08:19:00 <phoenix`> theres 17
08:19:13 <topdawg> tell me now whats great about haskell?
08:19:21 <topdawg> real question
08:19:50 <shapr> topdawg: I think it's more orthogonal
08:20:02 <topdawg> lol
08:20:14 <shapr> higher order functions, domain specific languages, combinators
08:20:23 <shapr> on-demand processing is the default
08:20:29 <dennisb> Knowing Haskell makes you a better programmer in any language!
08:20:31 <Igloo> I think there's a paper "Why FP?" by John Hughes that I never quite got around to reading
08:20:43 <shapr> partial resolution allows you to make more generic functions than you can in other languages
08:20:44 <Dalroth> what's great?  Every time I try to write something with it I have to force myself to learn something new to accomplish the task :)
08:20:58 <dennisb> That is a good paper, "Why functional programming matters"
08:21:08 <shapr> Dalroth: 'twas the same for me, when I first started learning procedural programming
08:21:16 <shapr> I suspect it will be the same again when I learn logic programming.
08:21:46 <topdawg> yes
08:21:53 <topdawg> logic programming sounds fun :/
08:22:12 <topdawg> lisp and all
08:22:23 <shapr> I was thinking more of Prolog and Mercury :-)
08:22:42 <topdawg> ah heh prolog
08:22:51 <topdawg> did some of that :/
08:22:59 <dennisb> lisp is old fashion functional programming, haskell is much more fun
08:23:22 <topdawg> hehe maybe im old fashioned then nothing is more fun to me then c :/
08:23:32 <shapr> referential transparency makes programmatic program transformations much simpler
08:23:36 <topdawg> well shreya over there keeps telling me to do haskell
08:23:54 <shapr> it allows for deforestatin, transparent parallelization, cool stuff like that.
08:24:17 <dennisb> topdawg: most of us here know C very well I guess, I've used C for 15 years
08:24:18 <topdawg> sounds fun :P
08:24:28 <shapr> I saw some C code once :-P
08:24:33 <topdawg> hehe
08:25:05 <shapr> I really haven't C much, but I have gone through the white book, and edited my kernel to fix the ide chipset support for my motherboard.
08:25:05 <topdawg> dennisb, well im a youngin then :/
08:25:07 <dennisb> The first years was not very succesfull though, slow computer without harddisk
08:25:48 <dennisb> It's possible to like both C and other languages!
08:25:54 <shapr> yup
08:25:54 <topdawg> yes i know lol
08:26:00 <shapr> I like Python and Haskell very much.
08:26:08 <topdawg> i luv perl!
08:26:25 <dennisb> haskell is so far from perl you can get :-)
08:26:29 <shapr> topdawg: so, have you tried writing a Haskell program?
08:26:47 <topdawg> ive gotten as far as going to the haskell website :/
08:26:51 <Igloo> What's the white book? K&R?
08:26:56 <shapr> Igloo: yup
08:27:16 <topdawg> but seems like i shall be doing some
08:27:20 <Dalroth> What's the white book like, I guess I have the non-white book (blue book?)
08:27:45 <shapr> Dalroth: it's short, and to the point.
08:27:48 <shapr> I like that.
08:28:03 <shapr> I prefer to learn from working source examples.
08:28:04 <shreya> yeah same
08:28:09 <Dalroth> Ok, the one I have is "The Craft of Functional Programming"
08:28:25 <shapr> Dalroth: imho, that's the best choice for learning Haskell
08:28:26 <Dalroth> so are you guys referring to the Haskel School of Expression or another one?
08:29:31 <shapr> oh, no...
08:29:44 <shapr> the "White Book" is the Kernighan&Ritchie book
08:29:56 <shapr> "The C Programming Language"
08:30:10 <Dalroth> ooooh :)
08:30:19 <Dalroth> ok, I have no interest in it then :P
08:30:30 <shapr> I think Craft should be called The Rainbow Book because it has the many colors on the front...
08:30:38 <shapr> looks like a picture of a slit hologram
08:32:18 <shapr> soon I will have time to try the haskell CGI stuff...
08:32:21 <shapr> I *will* make a HaskellWiki
08:32:28 <topdawg> haskell cgi!
08:32:32 <topdawg> ok that i got to try :/
08:32:36 <shapr> it's quite spiffy
08:33:12 <shapr> google for wash-cgi haskell
08:33:47 <topdawg> yep
08:33:52 <topdawg> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
08:33:56 <shapr> that's it
08:33:56 <topdawg> seems to be it :/
08:34:06 <shapr> I love that logo
08:35:27 <topdawg> haha
08:39:00 <dennisb> i'm on the highscorelist: http://nakalele.informatik.uni-freiburg.de/cgi/WASH/GuessNumberNoCheating.cgi
08:39:27 <shapr> dennisb: ha, I'm above you!!
08:39:31 <shapr> I'm Shae Erisson :-)
08:39:36 <dennisb> damn
08:40:03 * shapr dances the "I may not know haskell, but I can guess numbers" victory dance
08:40:17 <dennisb> hoho
08:40:21 <shapr> of the two skills, I think I'd prefer knowing haskell though...
08:40:51 <dennisb> I can still beat you
08:40:58 <shapr> go for it :-)
08:41:18 <dennisb> na, i don't want to sit there with 34 places in the highscorelist :-)
08:41:28 <shapr> haha
08:41:35 <shapr> that's understandable...
08:41:40 <dennisb> that would make me the looser of the year
08:41:44 <shapr> heh
08:42:08 <dennisb> We lost him back to the C-world
08:42:11 <shapr> oh well
08:42:21 <shapr> wash/cgi is surprisingly simple
08:42:34 <dennisb> I agree, and cool
08:43:04 <shapr> I'm moving to sweden, I hope the dsl they have there offers a public IP
08:43:09 <shapr> then I can write my website in wash/cgi
08:43:28 <dennisb> public, yes
08:43:36 <shapr> mmm, spiffy
08:43:41 <dennisb> I even have a static IP
08:43:46 <shapr> sonera has me double nat'ed
08:43:58 <shapr> that's what I want, public static void
08:43:59 <shapr> er, no
08:44:05 <shapr> just public static
08:44:19 <dennisb> most have dynamic, but public
08:44:30 <dennisb> the prices is going up in sweden though
08:44:38 <shapr> I'm willing to pay extra for static public
08:45:03 <dennisb> I pay 249SEK ($25) for 2.4MBit, static IP
08:45:08 <shapr> yikes
08:45:16 <dennisb> but now they change to 449SEK
08:45:30 <shapr> we're paying $100 for 256k DSL doubly nat'ed
08:45:39 <shapr> or maybe it's $150, I forget.
08:45:50 <dennisb> The start fee is $250
08:45:56 <shapr> we purchased the first DSL connection in this town
08:46:06 <shapr> our start fee was painful
08:46:51 <dennisb> i've had mine for about 2 years at the same price, and I still have. They only raised the price for new customers so far
08:47:01 <dennisb> maybe we should get back to haskell :-)
08:47:15 * Yurik pays about 1c per minute for dialup :)
08:47:22 <shapr> well, I don't think we're stealing other people's bandwidth...
08:47:25 <shapr> oh, maybe we are.
08:47:34 <dennisb> I used to pay for dialup, I know the feeling
08:47:50 <shapr> we paid for ISDN dialup here before DSL arrived.
08:48:02 <dennisb> I could never feel free when the money ticked away
08:48:09 <shapr> yah, same here
08:48:32 <dennisb> even though the sum maybe was not that high anyway
08:49:04 <shapr> flat rate is better
08:49:40 <dennisb> oooh yes, I don't even care about the speed (even if it's nice to have of course)
08:50:00 <shapr> the 24 hour connection is the best part
08:51:08 <shapr> well, back to zoping for me...
08:51:17 <dennisb> what is zope?
08:51:47 <shapr> it's a content management system / web application server written in Python
08:51:48 <dennisb> found it on google
08:52:01 <shapr> it's much like the java server side stuff, but for Python
08:52:29 <shapr> as with any comparison of that style, that one is inaccurate, but gets the basic idea across
08:52:48 <shapr> since I can do active web stuff really fast in Zope, it pays well.
10:03:14 <dennisb> shapr: where are you moving to?
10:39:17 <shapr> dennisb: moving to Boden
10:39:25 <shapr> dennisb: iirc, you're in Gotheburg, right?
10:39:33 <phoenix`> hi
10:39:37 <shapr> hi phoenix`
12:46:17 * shapr bounces
12:46:37 <phoenix`> :/
12:47:07 <shapr> ya know, the potential for transparent parallelism in Haskell could be really useful for the Itanium since it has EPIC
12:47:35 <phoenix`> you talk big words for me :(
12:47:53 <phoenix`> i just started doing haskell now
12:47:56 <phoenix`> from perl
12:47:57 <shapr> cool!
12:48:03 <shapr> it's quite a step from perl
12:48:05 <shapr> but worth it
12:48:09 <phoenix`> step?
12:48:13 <shapr> do you have any haskell books?
12:48:17 <phoenix`> this is easier heh?
12:48:22 <phoenix`> um
12:48:28 <phoenix`> lecuture thingy's
12:48:38 <phoenix`> i print out the lectutes
12:48:43 <phoenix`> from a freinds uni
12:48:51 <phoenix`> Fri Jun 14 03:48:49 2002
12:48:53 <shapr> I would suggest purchasing "The Craft of Functional Programming" by Simon Thompson
12:49:03 <phoenix`> where do you live?
12:49:07 <shapr> (15624 63230 103147)
12:49:09 <phoenix`> i might
12:49:16 <shapr> I live in Finland. Where do you live?
12:49:17 <phoenix`> i wish i could download it :(
12:49:25 <phoenix`> Perth, Australia
12:49:34 <phoenix`> how old are you?
12:49:41 <shapr> I'm 30, how old are you?
12:49:43 <phoenix`> 17
12:49:58 <shapr> I don't think Thompson has made his book available online.
12:50:08 <phoenix`> yeah :(
12:50:23 <phoenix`> i just came to this server
12:50:28 <phoenix`> well started to
12:50:33 <phoenix`> i am from austnet :/
12:50:40 <phoenix`> so is shreya
12:50:43 <phoenix`> and topdawg
12:52:13 <phoenix`> And it goes quiet again.. :(
13:11:30 <shapr> well, you gotta ask questions :-)
13:12:27 <shapr> phoenix`: what have you done with haskell so far?
13:13:05 <phoenix`> i started yesterday!
13:13:09 <shapr> cool!
13:13:09 <phoenix`> just read the intro!
13:13:15 <phoenix`> lol
13:13:16 <shapr> what have you tried so far?
13:13:21 <phoenix`> so i have 0 knowledge
13:13:29 <phoenix`> ahah nothing
13:13:36 <phoenix`> :(
13:13:40 <shapr> have you installed a haskell compiler or interpreter?
13:13:46 <phoenix`> im gonna do some in the minute though
13:14:05 <phoenix`> ah today 
13:14:11 <phoenix`> i will install all that
13:14:18 <phoenix`> just doing some reading first
13:15:40 <shapr> ok
13:15:48 <shapr> well, ask when you have questions.
13:15:51 <shapr> I'm still working.
13:16:12 <phoenix`> ah ok will do :)
13:58:07 * Heffalump appears
