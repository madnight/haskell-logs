04:27:48 <shapr> hiya
04:27:54 <shapr> what can I do with a ShowS ?
04:29:08 <Heffalump> what do you mean?
04:29:18 <shapr> how do I get a string out of it?
04:29:27 * Heffalump reads the prelude
04:29:50 <Heffalump> oh, just pass it "" should do
04:30:10 <shapr> oh
04:30:29 <shapr> aha!!
04:30:31 <shapr> thanks much!
04:30:49 * shapr moxes fruvously
04:31:47 <shapr> does haskell allow binary literals?
04:31:57 <shapr> I know it does hexadecimal and octal
04:32:05 <Heffalump> OIC, the point of ShowS is cat-elimination
04:32:14 <Heffalump> no idea, try the appropriate C escape sequence for one
04:32:27 <shapr> is that 0b11
04:32:31 <shapr> ?
04:32:33 <Heffalump> dunno
04:32:35 <Heffalump> sorry
04:32:35 <shapr> ok
04:32:37 <shapr> no worries
04:32:49 <shapr> that's probably a good sign, means you don't have to use C :-)
04:33:08 <Heffalump> I use it sometimes, but I've never written a binary literal that I can remember
05:08:35 * Yurik has finished his dinner
05:18:06 * Heffalump thinks it might be lunchtime
06:44:02 <shapr> hi pertsa
06:44:22 <shapr> hvy‰‰ huomenta
06:45:05 <shapr> min‰ olen amerikalainen.
06:46:07 * shapr bounces
07:54:51 <pertsa> hi. how should i do this in haskell: (\x f -> f x f)
07:55:05 <pertsa> (I'm new to FP)
07:56:11 <Heffalump> wdym "how should I do it in Haskell"?
07:56:24 <Heffalump> what you said is valid Haskell syntax, though it looks to me like it wouldn't typecheck
07:56:33 <pertsa> yes. that's the problem.
07:56:46 <Heffalump> well, what are you actually trying to do?
07:56:48 <pertsa> i could not explain the function otherwise.
07:56:56 <pertsa> something like this:
07:57:26 <pertsa> (\x f -> f x f) 4 (\x f -> if x == 0 then 1 else (x * (f (x-1) f)))
07:57:35 <pertsa> comupte the factorial of 4
07:58:05 <Heffalump> Haskell does have implicit fixed points, btw
07:58:18 <pertsa> ok.
07:58:31 <Heffalump> but otherwise you could use fix to do what you want
07:58:56 <pertsa> fix?
07:59:08 <Heffalump> oh, it's not in the prelude
07:59:32 <Heffalump> define it with fix f = f (fix f)
08:00:33 <Heffalump> (let fix f = f (fix f) in fix (\f x -> if x==0 then 1 else (x* (f (x-1))))) 4
08:01:12 <pertsa> sorry. i need time to parse that.
08:02:35 <Heffalump> I define a fixpoint combinator fix, then use it to define factorial using explicit fixpoints
08:02:43 <Heffalump> of course you can just define it with
08:02:59 <Heffalump> let fact x = if x == 0 then 1 else x * fact (x-1) in fact 4
08:03:30 <pertsa> yes. i know that. i was just experimenting.
08:04:05 <o3> Heffalump: laugh
08:04:09 <o3> i've got an exam on that in two days :)
08:04:17 <o3> lambda calculus is destroying my poor brain
08:05:17 <Heffalump> heh, don't blame you
08:05:40 * Heffalump can just about cope with the Church-Rosser theorem but my head hurts when it starts to get more complicated
08:05:45 <o3> so far, i've managed to reduce
08:05:46 <o3> let { x = 1:y ; y = 2:x } in take 10 (zip x y)
08:05:47 <o3> to
08:05:54 <o3> let xy = fix ( \xy -> (1:(snd (fst xy, snd xy)),2:(fst (fst xy, snd xy))) ) in (take 10 (zip (fst (fst xy, snd xy)) (snd (fst xy, snd xy))))
08:06:03 <o3> then i decided that taking a break would be a good idea :)
08:06:38 <Heffalump> what's with the repeated fst and snds in the body?
08:07:04 <Heffalump> and in the let xy bit for that matter
08:07:34 <o3> if you look at the original statement, the let bindings are mutually recursive
08:07:49 <Heffalump> yeah
08:08:10 <Heffalump> I see why you have to make the tuple, but not why you end up with things like snd (fst xy,snd xy)
08:09:00 <o3> that's just the way that i expanded it out
08:09:07 <o3> the first step that i did was to expand it to
08:09:11 <o3> let xy = fix ( \xy -> let { x = fst xy; y = snd xy } in (1:y,2:x) ) in let { x = fst xy; y = snd xy } in (take 10 (zip x y))
08:09:28 <o3> which seems to a "normal" way of doing the mutually recursive expansion
08:10:12 <o3> after you do some beta reductions and substitutions on that, you get (well, i get)
08:10:13 <o3> let xy = fix ( \xy -> let { x = fst xy; y = snd xy } in (1:y,2:x) ) in (take 10 (zip (fst (fst xy, snd xy)) (snd (fst xy, snd xy))))
08:10:45 <o3> because you expand the second let
08:11:07 <o3> all i know is that it works when i run it in hugs :D
08:11:11 <Heffalump> but that still should just replace the x by fst xy and the y by snd xy
08:11:16 <Heffalump> oh, it works, but it just seems OTT
08:12:50 <o3> no, i think because the second let clause (the let {x = foo ; y = bar}) to pull the stuff out of xy
08:13:09 <o3> and the first let clause is there because it's part of the fixed-point definition
08:13:43 <Heffalump> but each let clause has different scopes
08:14:06 <o3> yep ... the first one splits xy into x and y for the recursive bindings
08:14:17 <o3> and the second splits xy for the expression
08:14:27 <Heffalump> yep, so I still don't see why you end up with fst (fst xy,snd xy) for x
08:15:38 <o3> if you're really interested i'll paste you the steps which i've done so far
08:15:48 <Heffalump> ok
08:16:02 <o3> oh, okay :)  incoming!
08:16:07 <o3> let { x = 1:y ; y = 2:x } in take 10 (zip x y)
08:16:10 <o3> so that's the original
08:16:15 <o3> let xy = fix ( \xy -> let { x = fst xy; y = snd xy } in (1:y,2:x) ) in let { x = fst xy; y = snd xy } in (take 10 (zip x y))
08:16:26 <o3> is that okay?
08:17:53 <Heffalump> yep, that all makes sense
08:18:09 <o3> okay, next step ... expand the second let clause to the non-recursive lambda form
08:18:15 <o3> which should give
08:18:16 <o3> let xy = fix ( \xy -> let { x = fst xy; y = snd xy } in (1:y,2:x) ) in (\xy -> (\x -> \y -> (take 10 (zip x y))) (fst xy) (snd xy)) (fst xy, snd xy)
08:18:53 <Heffalump> ah, I see.
08:19:12 <o3> yeah, i can't explain it :)
08:19:29 <o3> but i can follow rules 8)
08:19:38 <Heffalump> actually, no, that doesn't look right to me
08:20:00 <Heffalump> there's no need for the outermost (\xy -> ... ) (fst xy,snd xy) in your new beta-redex
08:20:21 <Heffalump> oh.
08:20:29 <Heffalump> right, I get it.
08:21:02 <o3> hmm
08:21:09 <o3> now that you've said that, i'm wondering whether you can avoid it
08:21:16 <Heffalump> it depends on exactly what the rules are
08:21:28 <Heffalump> if you had some rules about dealing with lets that happen to be non-recursive you probably can
08:21:38 <Heffalump> but if you have to treat every let as recursive then you probably can't
08:21:47 <o3> no, i don't have to
08:22:18 <o3> i should just be able to say "\x -> \y -> (take 10 ...) (fst xy) (snd xy)", right?
08:22:35 <Heffalump> yeah
08:23:28 <o3> yeah, i've got this rule here ...
08:23:28 <o3>    let { x=e, y=f in g }  =>  (\xy -> (\x -> \y -> g) (fst xy) (snd xy)) (e, f) (LET2)
08:23:38 <o3> and now that i think of it, that seems very complicated
08:23:50 <o3> and that's a non-recursive rule
08:24:38 <Heffalump> hmm
08:24:54 <Heffalump> you're sure it's non-recursive?
08:25:03 <Heffalump> oh yes, no "fix".
08:25:21 <o3> yeah.  i got it off a lambda calc webpage ...
08:25:32 <Heffalump> let { x=e, y=f in g } => (\x -> \y -> g) e f
08:25:38 <Heffalump> would seem adequate to me
08:25:59 <o3> yes, that sounds much neater :)
08:26:00 <Heffalump> given that the RHS of the above rule seems to reduce to that without causing any problems (to me)
08:26:12 <o3> hmm, thanks!
08:26:25 <o3> you probably just saved me about 1 hour of needless work in my coming exam :)
08:28:50 <Heffalump> :)
08:29:04 <o3> thanks a lot!
08:31:58 <o3> ah
08:32:07 <o3> my lecturer just explained to me why the more complex reduction may be needed
08:32:27 <o3> if x appears in f, then "(\x -> \y -> g) e f" won't work
08:33:20 <o3> or rather, if y appears in e
08:33:22 <Heffalump> ah, yes
08:33:28 <Heffalump> no, either
08:33:56 * Heffalump tries to work out how the more complex one helps there, though
08:34:35 <Heffalump> I don't think it does, because the lambda-bindings for x and y still aren't in scope in (e,f)
08:34:46 <Heffalump> which is the fundamental problem
08:35:36 <o3> but if you're doing it lazily, that's okay
08:36:06 <Heffalump> it's not an evaluation order issue, it's a scoping issue
08:36:42 <Heffalump> the only place in the expanded expression that x and y are in scope is in g
08:38:42 <o3> [brain attempting to think]
08:39:12 <Heffalump> you know about avoiding name-capture during beta-reduction, right?
08:39:38 <o3> no :(  i don't know what name-capture means
08:44:06 <Heffalump> suppose you're reducing
08:44:34 <Heffalump> (\x y -> x+y) y
08:44:37 <Heffalump> what do you do?
08:47:36 <o3> sorry, was seeing a friend out
08:50:08 <o3> hmm
08:50:26 <o3> call me dumb ... i don't get "\x y"
08:50:58 <o3> i thought that if you had a lambda expression, it had to be of the form "\x -> ..."
08:51:31 <Heffalump> oh, it's shorthand for
08:51:35 <Heffalump> (\x -> \y -> x+y) y
08:51:46 <o3> ah, right
08:51:51 <o3> (i'm a real newbie at this)
08:53:28 <o3> my best guess at that is
08:53:35 <o3> \y -> y+y
08:53:41 <o3> although i get the feeling that i'm going wrong? :)
08:54:38 <Heffalump> yeah
08:54:48 <Heffalump> the trouble is that the two ys are different
08:55:05 <o3> ah
08:55:17 <Heffalump> like if you write (let x = 3 in x+x) * (let x=4 in x+x)
08:55:17 <o3> so you should do ... alpha conversion?  first?
08:55:21 <Heffalump> the two xs are different
08:55:22 <Heffalump> yep.
08:55:40 <o3> so you change that to, say
08:55:46 <o3> (\x -> \z -> x+z) y
08:55:47 <o3> and then do
08:55:54 <Heffalump> exactly
08:55:56 <o3> \z -> y+z
08:56:13 <Heffalump> so the same principle would apply in the case we were talking about before
08:56:37 <Heffalump> even if x appeared in f or y appeared in e, when you substituted them in you'd have to rename the bound x and y first
08:57:31 <o3> is that completely necessary?  don't the scoping rules come into play?
08:59:34 <Heffalump> yes, that's why it's necessary
09:02:10 <o3> ah, i understand now
09:04:04 <o3> okay
09:04:16 <o3> now i'm beginning to think that the more complex rule holds no advantages over the simpler rule
09:05:02 <o3> you have to use the recursive rule whenever x appears in f, or y appears in e, or both
09:05:58 * Heffalump would have thought you could write a rule that involved removing non-recursive bindings from a let one at a time
09:06:42 <shapr> yay, nineteen users
09:06:42 * shapr bounces
09:06:42 <Heffalump> something like let { x=f, ...} in g becomes (\x->g) f, so long as none of the other variables in the ... occur inside f
09:06:59 <Heffalump> if they do, rearrange the bindings until you find one for which that isn't true - if you can't do that then it really is recursive and you have to use the rule for that
09:07:03 <o3> yes, if you define something like
09:07:15 <Heffalump> sorry, I've lost the rest of the ... in the rule
09:07:24 <Heffalump> try (\x -> let { ... } in g) f
09:07:28 <o3> "let { x=e, y=f, ... }" to mean "let x=e in let y=f in ..."
09:07:30 <o3> then i think it would be okay
09:07:37 <o3> since you can expand stuff to
09:07:46 <o3> (\x -> (\y -> g) f) e
09:07:47 <Heffalump> indeed, though that equivalence isn't true if y occurs in e.
09:07:51 <o3> yep
09:08:21 <o3> otherwise do as you said, and re-arrange it
09:09:01 <o3> although semantically i thought you would have to define a specific order for it and choose that order all the the time
09:09:12 <o3> i.e. you can't just re-arrange the bindings as you please
09:09:27 <o3> (it would be very nice if you could :)
09:09:59 <Heffalump> you can rearrange bindings in the same binding group freely
09:10:14 <o3> oh
09:10:23 <o3> that's a handy tip!
09:11:48 <Heffalump> so let {x = e, y=f} in g is equivalent to let {y=f,x=e} in g
09:12:02 <Heffalump> but let x=e in let y=f in g is not equivalent to let y=f in let x=e in g
09:12:23 * Heffalump pokes Igloo, as the local expert on the Haskell report, to confirm that I'm not forgetting anything important here
09:13:11 <o3> so is it legal to rewrite let { x=e;y=f } as let { y=f;x=e } and then rewrite that as "let y=f in let x=e in ..."?
09:14:24 <Igloo> Looks right to me, apart from the comma/semicolon thing
09:15:13 <Igloo> Only if you know e doesn't have a free occurence of y, o3
09:15:34 <Igloo> Oh, and e can't haev a free occurence of x either
09:15:41 <o3> right
09:15:54 <o3> wow, thanks all
09:16:16 <Heffalump> e having a free occurrence of x would be fine, surely?
09:16:33 <Heffalump> and similarly e having a free y would be fine
09:16:36 <Heffalump> it's f having a free x that would be broken
09:16:42 <Igloo> I meant f
09:16:45 <Igloo> Yup
09:17:21 <o3> i think my brain is reconfiguring in order to cope with all this
09:18:50 <Heffalump> ok. so to be precise, let {x=e;y=f} is equivalent to let {y=f;x=e} under all circumstances
09:19:06 <Heffalump> and if x doesn't occur free in f, then this is also equivalent to let y=f in x=e
11:32:16 <o3> http://www.algorithm.com.au/wiki/hacking/haskell
11:45:46 <Lunar_fr> Hi
12:26:37 <Heffalump> hi
12:28:06 <Heffalump> o3: do you want help with the error, or what?
12:28:42 <o3> Heffalump: heh, no, i was just amused by it :)
12:29:16 <Heffalump> :-)
12:29:26 <Heffalump> it seems to be a failing of functional programming languages in general
12:29:37 <o3> Heffalump: something else you could help me with, though ...
12:29:46 <o3> i got that error because i'm mucking around with lambda calculus stuff, yet again
12:29:46 <Heffalump> yep?
12:29:56 <o3> so anyway, i'm trying to construct lists in terms of lambda calculus
12:30:04 <o3> and that seems okay
12:30:17 <o3> Ex2> hd (cons 5 6)
12:30:17 <o3> 5
12:30:20 <Heffalump> hmm, I can barely remember the Church numerals
12:30:27 <o3> Ex2> tl (cons 5 6)
12:30:28 <o3> 6
12:30:41 <Heffalump> cons 5 6 seems badly typed
12:30:49 <Heffalump> I'd expect cons 5 (cons 6 nil)
12:30:59 <o3> yeah
12:31:12 <o3> that's related to this problem
12:31:21 <o3> well, quite highly related actually
12:31:58 <o3> let's ignore that for the minute, though
12:32:25 <o3> there's another function, ifNull, which outputs its last argument if its first arg is a list
12:32:27 <o3> Ex2> ifNull (cons 5 6) 7 8
12:32:27 <o3> 8
12:32:46 <o3> and its second arg, if the first arg is nil
12:32:46 <o3> Ex2> ifNull nil 7 8
12:32:46 <o3> 7
12:32:47 <o3> so that's okay
12:33:10 <o3> the challenge is to build the map function from ifNull, cons, head, tail, nil
12:33:17 <Heffalump> YM a non-nil list in the first case, do you?
12:33:30 <o3> YM?
12:33:45 <Heffalump> you mean
12:33:54 <o3> oh, yes
12:33:56 <o3> sorry
12:34:05 <Heffalump> are you allowed to use fix?
12:34:23 <o3> let's say we are :)
12:34:28 <o3> i was trying to use it
12:34:35 <o3> but i couldn't quite see how
12:34:56 <o3> my latest attempt was
12:34:56 <o3> mp = \mymap -> \f -> \l -> ifNull l nil ( cons (f (hd l)) (mymap f (tl l)) )
12:35:12 <o3> which looks okay to me, but gives rise to an infinite type
12:35:17 <Heffalump> that looks roughly like what I'd expect
12:35:20 * Heffalump looks closely
12:35:21 <o3> and i think i understand why, but i have nooo idea how to fix it
12:35:34 <Heffalump> you probably ought to fix your cons function first
12:35:49 <Heffalump> then see if it goes away or not
12:36:17 <o3> okay, i'll try that
12:38:56 <Rathnor> familiar looking topic
12:39:26 <o3> indeed
12:39:55 <Rathnor> hello, btw :-)
12:41:59 <Heffalump> hi
12:42:15 <o3> Heffalump: Rathnor and i have the same problem
12:44:32 <Rathnor> fancy that
12:45:18 <Rathnor> i dont see how we can fix cons without just moving our infinite type into it :-)
12:45:26 <Rathnor> which doesnt achieve much
12:45:42 <o3> well, i've managed to make cons typesafe now i think
12:45:46 <o3> but that hasn't helped.  d'oh
12:45:49 <Rathnor> hehe
12:45:55 <Rathnor> you think :)
12:46:05 <Rathnor> i gave it a type sig
12:46:11 <Rathnor> which theoretically made it typesafe
12:46:19 <Rathnor> but it still didnt really force the second arg to be a list
12:46:26 <o3> mine does, i think
12:46:33 <Rathnor> and if I expand the type of the second arg further, I start hitting the infinite type issue
12:46:37 <Rathnor> how?
12:46:40 <o3> Ex2> hd (cons 5 nil)
12:46:41 <o3> 5
12:46:41 <o3> Ex2> hd (cons 5 6)  
12:46:41 <o3> <interactive>:1:
12:46:41 <o3>     No instance for (Num (t2 -> t -> (t2 -> t2 -> t2 -> t1) -> t1))
12:46:43 <o3>     arising from the literal `6' at <interactive>:1
12:46:45 <o3>     In the second argument of `cons', namely `6'
12:46:48 <o3>     In the first argument of `hd', namely `(cons 5 6)'
12:46:51 <o3> Ex2> 
12:47:00 <Heffalump> hmm.
12:47:16 <Rathnor> mine s more general than yours
12:47:22 <Rathnor> I dont restrict myself to Num's
12:47:35 <o3> i don't either
12:47:39 <o3> it's because 5 is the head
12:47:46 <o3> cons :: t12 -> (t2 -> t -> (t2 -> t2 -> t2 -> t1) -> t1) -> t10 -> t14 -> (t12 -> (t2 -> t -> (t2 -> t2 -> t2 -> t1) -> t1) -> t14 -> t11) -> t11
12:47:48 <o3> ;)
12:47:54 * Heffalump 's head hurts :-)
12:47:58 <Heffalump> what goes wrong with map now?
12:48:12 <o3> mp = \mymap -> \f -> \l -> ifNull l nil ( cons (f (hd l)) (mymap f (tl l)) )
12:48:17 <o3> okay, given that for map
12:48:28 <o3> then
12:48:37 <o3> oh, hang on
12:49:00 <Rathnor> hmmm, your cons is more complicated than mine
12:49:01 <o3> "mp mp (+1) (cons 5 nil)" throws up a type error
12:49:13 <o3> oh wait
12:49:15 <o3> i can't read
12:49:17 * Rathnor subtracts an mp
12:49:17 <o3> argharghagrrh
12:49:44 <Heffalump> what you want is fix mp (+1) (cons 5 nil)
12:49:54 <Heffalump> or define mp = fix (\mymap ... )
12:50:17 <o3> that doesn't seem to work either
12:50:27 <Heffalump> type error?
12:50:33 <Rathnor> whoa
12:50:37 <Rathnor> thats a scary error
12:50:58 <o3> hmm, not quite ... ambigious type variable in use of 'print'
12:51:00 <o3> which looks positive
12:51:12 <Heffalump> yeah
12:52:34 <o3> is there any reason why
12:52:37 <o3> mp = \f -> \l -> ifNull l nil ( cons (f (hd l)) (mp f (tl l)) )
12:52:39 <o3> shouldn't work?
12:52:55 <Rathnor> tail type doesnt match
12:52:59 <Rathnor> with list type
12:53:06 <Rathnor> it'll always be one less
12:53:19 <Rathnor> thats my thought anyway
12:55:00 <o3> Rathnor: you know what sucks about this?  we'll ask chak about it and he'll solve it in 15 seconds, give or take a few seconds :)
12:55:18 <o3> or say "oh, you can't do that in a typed system"
12:55:19 <Rathnor> yeah
12:55:28 <o3> at which point we slay him :)
12:55:28 <Rathnor> i'm thinking i should get sleep so i'll be able to wake up sometime 
12:55:36 <Rathnor> i am meant to be at a meeting at 11:30
12:55:41 <o3> oh, yikes
12:55:42 <Rathnor> hehe
12:55:49 <Rathnor> wow, 6am
12:55:58 <Rathnor> where did that time go
12:56:14 <Rathnor> got sucked down an infinite type
12:56:18 <Rathnor> thingy
12:56:25 <o3> Rathnor: it's a recursive time loop, dude
12:56:46 <o3> time has been fixed to a point!
12:56:47 <Rathnor> whats the bet theres an exam question like "why cant you do this: mymap = ..."
12:57:08 <o3> Rathnor: ooh, please! :)
12:57:45 <o3> Rathnor: he'll give full marks if you (a) use monads, or (b) say that you can do it in inferior languages like lisp
12:58:09 <Rathnor> i think i'd better get some sleep
12:58:23 <o3> ok, night!  sleep tight :)
12:58:29 <o3> don't dream about lambdas or anything
13:25:47 <o3> Heffalump: thanks for all your help ... i'm heading off to bed
13:25:56 <o3> doing lambda calc until 6:30am can't be healthy :)
13:34:59 <Heffalump> :-)
14:32:33 --- topic: set to 'Monad off the port bow! Red Alert! || http://purl.org/wiki/haskell/HaskellIrcChannel || <Rathnor> familiar looking topic' by shapr
17:53:30 <Igloo> Can anyone confirm I'm going to have to do some work if I want to know how many milliseconds elapsed between 2 points in the IO monad (using Haskell '98 only)
17:53:59 <Heffalump> there's no built-in for getting the current unixtime?
17:54:58 <Igloo> AFAICS only in the POSIX module
17:55:16 <Heffalump> oh, by Haskell '98 ym libraries too?
17:55:22 <Igloo> Yup
17:55:32 <Igloo> Of which POSIX is not one
17:56:20 <Igloo> I can get a TimeDiff {tdYear, tdMonth, tdDay, tdHour, tdMin, tdSec :: Int, tdPicosec :: Integer} fairly easily, but that seems rather silly
