03:25:07 <shapr> hiya
03:29:45 <hornby> morning
03:42:02 <shapr> hi hornby, what's up?
08:20:23 <shapr> wheee
08:29:15 * shapr bounces
12:49:21 --- topic: set to 'please take a look at http://haskell.org/wiki/wiki?HaskellIrcChannelMove and record your views on the subject there || http://icfp2002.cs.brown.edu/ - get ready!' by shapr
13:18:21 <hornby> icfp2002 looks over my head. 
13:19:14 <shapr> the programming contest part is where you and your friends get together and try to write a program in two days or so
13:19:27 <hornby> That sounds fun :) 
13:19:37 <hornby> They have archives from past years?
13:19:49 <hornby> Or has it run past years?
13:19:54 <shapr> yup, google will tell you
13:20:00 <shapr> several years at least
13:21:02 <hornby> huh, Perl was included? odd
13:21:05 * shapr grumbles about ieee754
13:21:14 <hornby> I didn't know Perl was functional
13:21:22 <shapr> hornby: the idea is to give all languages equal opportunity
13:21:40 <hornby> Oh, I see C up there too. Hm. I wonder who won :)
13:21:56 <hornby> cilk, hm
13:21:59 <shapr> part of the reason for the ICFP contest is so functional programmers can show that FPLs really are as good or better than procedural langs :-)
13:22:34 <hornby> hrm, C kinda cleaned up
13:22:45 <hornby> at least in '98
13:23:37 <hornby> Course there were more C/C++ entries than the rest combined. Whats ieee754? 
13:23:46 <shapr> hornby: so, you gonna be a Haskell expert in time to be part of the #haskell team? :-)
13:24:05 <shapr> actually, I won't be a Haskell expert for at least another year
13:24:18 <hornby> shapr: Yeah, maybe ICFP 2003 :)
13:24:26 <shapr> ieee754 is the floating point encoding standard I've been banging my head against for a coupla weeks.
13:24:29 <hornby> shapr: Or 2004. Or 2005. 
13:24:32 <shapr> hah
13:24:32 <shapr> me too
13:25:01 <hornby> shapr: why the head banging? complex? obscure? 
13:25:23 <shapr> complex
13:25:27 <shapr> somewhat obscure also
13:25:52 <hornby> Rotten. This is for the banana, ya?
13:26:01 <shapr> yup
13:26:13 <shapr> I've figured out parts of it
13:26:20 <shapr> I'm still missing something though
13:28:17 <hornby> mm, the floating point bits?
13:28:47 <shapr> the exponent
13:29:12 <shapr> if you have a copy of rfc1832 handy
13:29:25 <shapr> you can look at section 3.7
13:29:39 <shapr> that shows you how to decode double precision
13:29:52 <hornby> sounds fun :)
13:30:17 <shapr> and I think that it should be a short step from the output of "decodeFloat (3.0 :: Double)" to that encoding
13:30:20 <shapr> but I'm not making that step.
13:30:34 <hornby> rfcs are cool
13:31:01 <shapr> and fun to read
13:31:03 <shapr> sometimes :-)
13:31:07 <hornby> sometimes :)
13:32:11 <hornby> wow, Prelude> decodeFloat (3 :: Double)
13:32:11 <hornby> (6755399441055744,-51)
13:32:24 <hornby> That seems overly complex. 
13:32:52 <shapr> it's that complex so that it can also represent really large and really small numbers.
13:33:36 <hornby> oh right :)
13:34:20 <shapr> hornby: so here you can see a javascript converter: http://babbage.cs.qc.edu/courses/cs341/IEEE-754.html
13:34:50 <shapr> python uses struct.pack("!d",3.0) to output a string representation of all the bits.
13:35:28 <shapr> the double has three pieces, the sign bit, the mantissa, and the exponent
13:35:39 <shapr> sign tells you if it's a negative number
13:35:47 <shapr> mantissa is the 'content'
13:36:04 <hornby> and the exponent/ 
13:36:06 <shapr> it's multiplied times 2^exponent
13:36:22 <hornby> wierd. 
13:36:30 <hornby> what a strange way to represent a number?
13:36:39 <shapr> so, 2^-51 * 6755399441055744 should equal 3
13:36:48 <shapr> that's from your example above
13:37:14 <hornby> crazy. I shall test
13:37:47 <shapr> er
13:38:04 <shapr> something is wrong about that
13:38:05 <hornby> wow, no ..
13:38:07 <hornby> yah :)
13:38:15 * shapr looks at his notes again
13:39:17 <hornby> (-1)**S * 2**(E-Bias) * 1.F ?
13:39:20 <shapr> check the very bottom of this page: http://www.haskell.org/onlinereport/basic.html
13:39:30 <hornby> oh, thats not haskell though, okay
13:39:38 <shapr> about halfway through section 6.4.6
13:40:35 <shapr> that's where the report talks about decodeFloat and the others
13:40:39 <hornby> got it
13:40:55 <shapr> I think I should be able to connect the rfc1832 stuff with that part of the paragraph
13:41:03 <shapr> but I haven't been able to figure it out.
13:41:20 <hornby> hm
13:41:46 <shapr> any thoughts or ideas?
13:42:18 <shapr> some weird stuff that confuses me:
13:42:51 <shapr> ieee754 double precision has 52 bits in the mantissa, so why does ghc return 53 from "floatDigits (3.0 :: Double)" ?
13:42:59 <hornby> hm, I want to take a look, but I've got company coming, ack
13:43:06 <shapr> ok, have fun
13:43:25 <hornby> Maybe I'll get a chance in a minute. Or later. :)
13:43:27 <hornby> Good luck though :)
13:43:51 <shapr> thanks, I'll need it :-)
16:07:06 * shapr grumbles
16:20:34 <shapr> is there some kind of list slicing notation?
16:20:41 <shapr> or should I just make some up?
16:21:14 <shapr> hm, I can use take and drop, doh
18:00:17 <shapr> hi Dalroth
18:02:57 * Heffalump appears
18:03:10 <shapr> hi Heffalump, how are ya?
18:03:20 <shapr> I'm approaching time to sleep.
18:03:25 <Heffalump> if you really care about efficiency you should write something that does take and drop at the same time and returns a tuple
18:03:28 <Heffalump> not bad
18:03:46 <shapr> I might get picky about efficiency later, but not at the moment.
18:03:57 <Heffalump> right :-)
19:42:35 <shapr> hi casaa
19:47:14 * Yurik is back to xchat
