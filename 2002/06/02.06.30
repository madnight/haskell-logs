07:40:40 <cinema> Hi ! If I define a datatype "data Var = MkIPAddress IPAddress | MkNetAddress NetAddress", and I have "var1, var2 :: Var", how can I test if var1 and var2 have the same subtype (ie IPAddress or Net Address or the others if I have more subtypes) ?
08:00:39 <Heffalump> foo (MkIPAddress _) (MkIPAddress _) = True
08:00:46 <Heffalump> foo (MkNetAddress _) (MkNetAddress _) = True
08:00:48 <Heffalump> foo _ _ = False
08:13:23 <cinema> Yes, it works but is there a way to capture the type of the constructor in a generic way ? (using some haskell extensions)
08:13:59 <Heffalump> you might want to have a look at Generic Haskell
08:14:29 <Heffalump> http://www.generic-haskell.org/
08:15:42 <cinema> Thanks. I'm doing it now
08:29:50 <Usul> hey all
08:30:08 <Heffalump> hi
08:30:46 <Usul> sup here?
08:30:52 <Heffalump> not much
08:31:22 <Usul> :P
08:33:49 <Usul> hmpf....its been a long while since i done haskell :P
08:34:06 <Usul> and that while its such a beautifull thing :P
08:54:01 <Usul> hmm
08:54:26 <Usul> function  :: String -> (a,a) is not possible?
09:00:58 <Heffalump> yeah, f s = (error s,error s)
09:01:02 <Heffalump> s/f/function/
09:01:06 <Heffalump> not sure how useful it'd be, though..
09:03:51 <Usul> well, i was looking for something like this:
09:04:19 <Usul> f "a = b" = ("a","b"), and f "1 = 2" = (1,2)
09:05:52 <Heffalump> would you want any other result types than String and Int?
09:08:48 <Usul> bool
10:02:14 <Heffalump> I suppose you could make a type class for a
13:12:41 <Igloo> Read is the class you want surely?
13:14:51 <Usul> huh? :P
13:16:26 <Igloo> Well, presumably you are extracting the values by using read or readS or something
13:20:00 <shapr> y0
13:20:07 <Heffalump> hiya
13:20:11 <shapr> what's up?
13:20:54 <shapr> my recent conclusions are:
13:20:55 <shapr> if I'm not unit testing all the code I do, I'm wasting my time.
13:20:58 <shapr> and:
13:21:26 <shapr> the best way to learn something is to try do accomplish a task with it.
13:21:52 <shapr> my weeks of struggling with Haskell are noticeably paying off when I read haskell-cafe posts
13:23:03 <shapr> hi ustenzel, I haven't seen you here before.
13:23:43 <ustenzel> shapr: Right.  I have never been here before.
13:23:50 <shapr> ustenzel: nice to meet you!
13:24:04 <shapr> ustenzel: are you new to Haskell, or a great expert?
13:24:06 <ustenzel> actually, I'm quite new to Haskell (about one year since my first contact), but already addicted :)
13:24:31 <Heffalump> hmm, the whole OPN politics thing seems to be calming down
13:24:33 <shapr> it's been less than a year since I started Haskell, but I am equally addicted.
13:24:37 <shapr> Heffalump: that's good to hear.
13:24:57 <Heffalump> yeah, though in a way it'd be nice if it had reached a proper resolution
13:25:06 <shapr> ustenzel: do you have any questions? looking for any info on Haskell?
13:26:30 <ustenzel> shapr: haskell.org is a rich resource.  There is still much to read for me.
13:27:23 <shapr> if you come up with some questions, feel free to ask away
13:27:36 <shapr> oh I have a question
13:28:04 <shapr> I want to declare Floating as an instance of a typeclass, but that doesn't work
13:28:17 <Heffalump> Floating is a typeclass, isn't it?
13:28:26 <shapr> yah it is.
13:28:32 <Igloo> You can do instance (Floating a) => a where IIRC
13:28:33 <Heffalump> so what you 
13:28:44 <Heffalump> YM instance Floating a => Foo a where ...
13:28:54 <Igloo> Sorry, yes
13:28:54 <shapr> hmm
13:29:00 <shapr> good point, thanks!
13:32:53 <ChoJin> Heffalump: hmm, the whole OPN politics thing seems to be calming down => what do you mean ?
13:35:21 <Heffalump> well, #brits is unjuped
13:36:57 <ChoJin> #brits ?
13:40:32 <Heffalump> the channel that got juped :-)
14:13:57 <shapr> hi cinema
14:14:15 <shapr> cinema: looking for Haskell information? or a long time user?
14:28:11 <cinema> I have been studying Haskell by myself for a year, and I am now writing a real program with it, a functional firewall generator
14:28:19 <shapr> cool!
14:28:21 <Heffalump> ooh, cool.
14:28:44 * Heffalump want
14:28:44 <Igloo> Presumably you are the person who's posted to haskell@ or haskell-cafe@ a couple of times?
14:29:30 <cinema> I did once a few days ago
14:29:58 <shapr> cinema: do you have any code online that I could look at?
14:30:44 <cinema> Not now. But I shall be happy to have my code reviewed soon
14:31:09 <shapr> I don't think I know enough to review Haskell code, but I'd be interested in trying it out.
14:33:27 <cinema> The problem with generating a firewall is to decide what part will be compiled, and what other part will be generated at run-time. The run-time generated code has less type checks of course, but it can be put in only one module, so the final user can modify it
14:33:48 <shapr> sounds nifty to me
14:34:22 <Igloo> You're generating Haskell code at runtime? OAIC?
14:34:33 <shapr> I'm porting the RPC layer of the Twisted server framework from twistedmatrix.com from Python to Haskell.
14:36:10 <cinema> In fact I am generating rules at run-time, and then transforming the rules (after optimization, if possible) in 'iptables' statements
14:36:57 <Igloo> OK, I didn't understand what you said before then
14:40:35 <cinema> If my rules are in a strict form, Haskell type-checker will check them. On the other hand I can have a set of loose rules (eg. everything is a String) and produce run-time errors when converting these strings to IP addresses, protocols...
14:40:54 <shapr> sounds nifty
14:41:03 <shapr> sounds like the stuff Simon PJ did for the Enron case
14:41:15 <shapr> I've been thinking of something like that for TCP/IP in general
14:41:53 <shapr> basically, can you use a type system to prove certain qualities of a model, for example, can you find holes in IPv6 with a type expressed model?
14:44:04 <cinema> well, my idea is simpler, it is : 1) describe every protocols (http, dhcp...) 2) choose the one used in one's case 3) give dynamic parameters (IP Address assigned by the provider) 4) generate the iptables/ipchains statements
15:40:34 <Heffalump> shapr: the stuff Simon PJ did for Enron was a piss-take :-)
15:41:00 <Heffalump> (though one inspired by some real research on modelling financial contracts, admittedly)
16:05:59 <shapr> oh
