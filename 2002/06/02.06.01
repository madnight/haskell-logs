04:07:51 <buggler> hi
04:45:56 * Yurik is back (gone 19:14:30)
08:31:25 <dandelion-> hello. has someone among you used gtk2hs?
08:39:39 <dennisb> why do people leave so soon after asking a question...
08:40:20 <dennisb> I've not used gtk2hs very much, but I have used both haskell and gtk2 (and gtk1) very much
09:07:32 <dennisb> dandelion-: i've not used gtk2hs except for some small example, but i've used both haskell and gtk1, gtk2 very much.
09:07:36 <dennisb> maybe I can help
09:07:54 <dandelion-> hello
09:08:03 <dennisb> hi!
09:08:22 <dandelion-> if you used haskell and gtk but not with gtk2hs, then how did you do it?
09:08:29 <dennisb> c and c++
09:08:34 <dandelion-> ah, ok
09:08:59 <dennisb> I know the toolkit and I know haskell, but I don't know gtk2hs very much
09:09:01 <dandelion-> i can't view the gtk2hs website, it doesn't load for me
09:09:15 <dennisb> http://gtk2hs.sourceforge.net/ works for me
09:09:53 <dandelion-> oops... now it does for me, too
09:09:54 <dandelion-> thank you
09:10:38 <dennisb> glad I could help! It was a lot of work :-)
09:37:00 <dennisb> it takes some time to compile gtk2hs...
09:37:11 <dandelion-> well...
09:37:16 <dandelion-> i don't have the means to do it
09:37:26 <dandelion-> because i using debian stable *cough*
09:37:29 <dandelion-> say... 
09:37:38 <dennisb> And I always creates rpm-files that I install so I have to recompile it again :-)
09:37:59 <dennisb> well, I don't know much about debian besides that I want to try it sometime
09:38:26 <dandelion-> i am looking for a good linux distro (freebsd didn't work well for me) . which one do you use?
09:38:37 <dennisb> I use redhat 7.3
09:38:49 <dandelion-> ok
09:39:00 <dennisb> but which is best is a question about religion, not quality
09:39:26 <dandelion-> do you know how many floppies i need for the installation of redhat?
09:39:36 <dennisb> one or two
09:39:56 <dennisb> there are some drivers on the second disc that is probably not needed
09:40:32 <dandelion-> have you encountered any bugs in redhat?
09:40:43 <dennisb> I just boot from the cd-rom and everything works
09:40:51 <dandelion-> oh, well
09:41:33 <dennisb> dandelion-: there are always bug, there are a lot of programs. But I think it is very stable
09:42:41 <exa> hi
09:42:48 <dennisb> hello!
09:42:59 <exa> hi dennisb, thanks for your help last time
09:43:08 <dandelion-> i can't use redhat because i can't download 3 CD-images with my modem connection
09:43:09 <dennisb> glad to help
09:43:14 <exa> i must confess i'm rather frustrated with imperative programming using haskell :)
09:43:21 <exa> it looks ocaml was a better bet for that
09:43:36 <dennisb> dandelion-: i'm lucky enough to have a fast connection
09:43:39 <exa> i don't know if i can read float's and double's or 64 bits in ocaml though
09:43:49 <dennisb> exa: might be, ocaml is a nice system
09:44:03 <exa> i like the module system in particular
09:44:07 <exa> Functor is brilliant in ocaml
09:44:10 <exa> Just the way it ought to be
09:44:25 <exa> It is closer to the category theoretical concept than in haskell
09:44:50 <dennisb> i've not used it very much, but i've heard that comment before from people
09:44:57 <exa> I wonder how the eager haskell compiler will be :)
09:45:00 <dennisb> I guess there is some truth in it
09:45:07 <exa> dennisb: do you know what it is like?
09:45:21 <exa> it's basically a function from a Module to another Module in haskell terms
09:45:34 <dennisb> i've used standard ML like 10 years ago, and it had functors
09:45:36 <exa> There is something called structure that is akin to haskell module
09:45:37 <dennisb> yes
09:45:50 <exa> that part i liked
09:46:08 <exa> of course the functional semantics is not as rigid when it comes to functions with side effects hmm :)
09:46:17 <exa> but then again programmers aren't exactly semantics people :)
09:46:18 <dennisb> It looks like the functors I remember in ML, I remember there was signatures also
09:46:29 <dennisb> of course they are!
09:46:32 <exa> it's a win for us when there is something like "while" and "for" to do loops
09:46:57 <exa> dennisb: yes, there are signatures
09:47:12 <exa> but i must admit haskell is fancier
09:47:17 <exa> there is one thing that bothers me with haskell
09:47:28 <dennisb> You just have to make things strict in haskell for it to be fast
09:47:28 <exa> the most important feature of haskell is lazy evaluation
09:47:34 <exa> yet everybody's telling you how to avoid it!
09:47:52 <exa> that's a contradiction obviously. i don't like it too much.
09:48:09 <exa> if I write in haskell I must be able to write it in a lazy-style yet get all the efficiency
09:48:17 <exa> like with infinite search trees and such
09:48:36 <exa> or you can't work on any real problems using that style
09:49:15 <dennisb> it must be implementable also. And lazyness is implemented with pointers to closures that are rewritten once it is calculated
09:49:15 <exa> dennisb: yes I think I learnt the use of strictness the hard way :)
09:49:31 <exa> hmm yes
09:50:40 <dennisb> if every value is referenced via a pointer then it is going to be slow. But I claim that you can make the speed-critical parts strict and unboxed and then you have the best of two worlds
09:50:44 <dennisb> (well :-)
09:52:07 <dennisb> lazyness lets you write things in a way that is very simple to understand and still be efficient when run, if you implement it in the same way in a strict language you have to make sure the calculation order is efficient
09:52:57 <dennisb> In many cases I prefere simple code instead of dead fast execution. When I need it I will optimize, or maybe implement it in C 
09:53:53 <dennisb> Many people use haskell as a prototype language, some people claim that every program have to be rewritten at least once, then make the first version fast to write and the second version efficent
09:54:26 * dennisb is in the used-car-salesman-mode
09:55:35 <dennisb> If I want to get the smallest value from a list, then I can sort it and pick out the first element. Lazy evaluation makes that fast
09:57:40 * dennisb is goint to write some small program in haskell using i gtk2
09:57:45 <exa> hmmm
09:58:38 <dennisb> hmm, the installation-phase of gtk2hs had an error, the compilation worked like a charm
09:58:45 <exa> yea that's right sometimes you have to rewrite stuff
09:59:36 <exa> i'm a kde guy :)
09:59:41 <exa> i don't like gtk at all :P
09:59:42 <dennisb> I think there was some wellknown person that said something like that, "every program is rewritten ...". I just don't know who it was
09:59:54 <exa> i wanna write some haskell bindings for qt one day
10:00:13 <exa> would be better if i could just rewrite it over time :)
10:00:21 <exa> rather than starting from scratch
10:01:33 <dennisb> well, it's just some comments. I think ocaml is cool, it has a reputation of being a very good compiler producing fast code. I've planned to use it some time
10:01:57 <dennisb> I've already written lots of ML-code back then so it should not be so hard
10:02:30 <exa> dennisb: what do you do now? having written lost of ml code is unusual :)
10:02:39 <exa> i mean your occupation
10:02:56 <dennisb> i'm at the university here in gothenburg
10:03:12 <exa> i'm at bilkent university, ankara
10:03:18 <exa> i'm about to drop out of phd :)
10:03:25 <exa> it's become too boring
10:03:31 <dennisb> ML was the first language they thought us as freshmen
10:03:36 <exa> that's cool
10:03:40 <exa> we learnt pascal :P
10:03:41 <dennisb> exa: that is a problem
10:03:51 <exa> do you do phd, too?
10:03:52 <dennisb> the second was modula-II
10:03:54 <dennisb> exa: yes
10:04:03 <exa> module-ii is a nice lang
10:04:09 <exa> dennisb: what're you working on?
10:04:16 <dennisb> not bad, never used it after that course
10:04:17 <exa> i've been working on parallel data mining
10:04:27 <dennisb> partial evaluation
10:04:40 <exa> what is that? :)
10:05:18 <dennisb> take a program and some of it's input and produce a new specialised program that works extra fast now
10:05:36 <exa> ah, interesting
10:05:49 <exa> so it analyses what the input values are in general?
10:06:05 <exa> in specific, sorry :P
10:06:20 <dennisb> yes (i guess)
10:06:40 <exa> do you use haskell for that?
10:06:49 <dennisb> you supply some values, when it knows them it can start evaluating parts of the program directly
10:07:01 <dennisb> I implement stuff in haskell yes
10:07:23 <exa> nice work
10:07:32 <exa> i found a job in US and i'm moving there
10:07:36 <dennisb> but i work with a small language, a subset of haskell (lambda calculus plus some parts)
10:08:15 <dennisb> exa: well, i've more of a programmer then a researcher myself
10:08:25 <exa> nobody is interested in new parallel algorithms, it frustrates me
10:08:35 <dennisb> i just love to program no matter what language
10:08:37 <dennisb> :-)
10:08:42 <exa> heh cool
10:08:54 <exa> i was wishing to make a raelly cool parallel language one day ;)
10:08:59 <exa> really cool even
10:09:30 <dennisb> it's fun to make new languages
10:09:53 <dennisb> well, now I have to debug why gtk2hs does not install as it should..
10:10:03 <dennisb> it says: you don't have permission to modify the package configuration file
10:10:26 <dennisb> I guess ghc have one master-file for that
10:11:05 <dennisb> I want to install it as a normal user in my home directory..
10:11:28 <exa> do you use debian? :)
10:11:32 <dennisb> no
10:11:37 <exa> i saw that error many months ago?
10:11:48 <exa> there is no provision for installing as a user it seems
10:12:00 <dennisb> then that should be fixed!
10:12:54 <exa> you're hotter on that subject, write a mail to haskell telling what might be fixed
10:13:27 <dennisb> i'll look into the problem first, but then yes
10:22:05 <exa> it's not easy to make shared libs using haskell
10:22:07 <exa> that's a pity
10:22:15 <exa> i mean is it possible at all? :)
10:22:23 <exa> yea it should be
10:22:33 <exa> but you have to install the package and I couldn't manage it
10:22:39 <exa> I had to have all sources in one directory to do it
10:23:01 <exa> I was trying to use that Binary library, which is pretty cool but doesn't work
10:25:22 <dennisb> i've never made a shared lib with haskell
18:49:14 <buggler> hey
18:50:06 <buggler> i've been looking for a function in the prelude, and list
18:50:21 <clausen> what function?
18:50:38 <buggler> it maps a list of functions
18:50:41 <buggler> onto another list
18:51:08 <exa> it applies them how?
18:51:34 <buggler> like [(a->b)] -> [a] -> [b]
18:52:03 <exa> a function for each element in [a] ?
18:52:14 <exa> that's what i'm asking :)
18:52:21 <buggler> yeah
18:52:22 <buggler> :)
18:53:16 <buggler> I couldn't find anything, but maybe there is something similiar to a function like that?
18:53:36 <exa> no
18:53:45 <exa> but don't you think it's rather easy to write
18:53:50 <clausen> no
18:54:01 <clausen> what if the size of the two lists are different?
18:54:17 <buggler> it would just leave the remainder of a unchanged then
18:54:27 <clausen> that is a strange function
18:54:34 <clausen> I'm not surprised it isn't in the prelude
18:54:39 <exa> mapfuns (f:frest) (l:lrest) = (f(l):mapfuns frest lrest)
18:54:44 <exa> mapfuns [] [] = []
18:54:46 <exa> okay?
18:54:47 <clausen> you can prolly do it easier than that
18:54:56 <exa> just using map?
18:55:00 * clausen thinking
18:55:08 <clausen> probably zip
18:55:08 <buggler> ok i'll give it a go, thanks exa.
18:55:14 <exa> okay zipping then
18:55:16 <exa> ummm
18:55:28 <clausen> then you have tuples, and apply fst to snd
18:55:29 <clausen> (via map)
18:55:48 <exa> map (\(x y) -> x y)) (zip (f l))
18:55:50 <exa> cool?
18:55:52 <exa> :)
18:55:53 <buggler> oh yeah i could make the function again
18:55:59 <clausen> (x, y)
18:56:02 <exa> clausen is that right?
18:56:04 <exa> :P
18:56:11 <exa> hey tmoertel is around
18:56:16 <exa> tmoertel: hi buddy
18:56:18 <clausen> what's f 1?
18:56:24 <exa> f 1?
18:56:24 <clausen> ah, right
18:56:27 <clausen> f l
18:56:33 <clausen> (I've got a new font here)
18:56:44 <exa> let's rewrite it correctly
18:56:47 <exa> who to do first? ;)
18:57:03 <exa> mapfuns f l =  map (\(x y) -> x y)) (zip (f l))
18:57:18 <exa> i'll give a candie to who does shorter ;)
18:57:45 <exa> zip rules
18:57:49 <exa> i use it a lot too :P
18:57:58 <buggler> lol, nice
18:58:04 <buggler> i don't even understand how that one works
18:58:22 <exa> it's rather simple
18:58:34 <exa> suppose you have two lists [f1,f2] and [i1,i2]
18:58:38 <buggler> yeah but i haven't learn what that \ etc stuff are
18:58:51 <exa> call them f1 and f2 are
18:58:56 <exa> call them f and l
18:59:03 <exa> btw, the one i wrote above should be wrong
18:59:19 * exa fires up ghci
18:59:51 <clausen> mapfuns :: [(a -> b)] -> [a] -> [b]
18:59:51 <clausen> mapfuns f =  map (\(x, y) -> x y) . zip f
19:00:39 <clausen> Main> mapfuns [(*) 2, (+) 3, (-) 1] [1..3]
19:00:39 <clausen> [2,5,-2]
19:00:47 <exa> Prelude> let f = [(* 2), (/ 2)]
19:00:47 <exa> Prelude> let l = [8,16]
19:00:51 <exa> Prelude> let x = zip f l
19:01:00 * clausen wins!  :p
19:02:04 <exa> Prelude> let f = [(* 2), (\x -> div x 2)]
19:02:05 <exa> Prelude> mapfuns f l
19:02:05 <exa> [16,8]
19:02:10 <exa> anyway to show how it works
19:02:28 <exa> clausen: hey you cheated!
19:02:29 <exa> :)
19:02:33 <clausen> how?
19:02:36 * exa hands clausen a candie ;)
19:02:36 <buggler> lol
19:02:59 <exa> yea using composition gets more elegant
19:03:24 <clausen> :)
19:03:28 <exa> the first functional language i learnt was lisp. heh
19:03:30 <buggler> well, the problem i was using it for was this function we have to make
19:03:39 <buggler> i can do it with a recursive function
19:03:40 <exa> it's harder for me to find the non-lisp-style function
19:03:51 <buggler> however our lecturer says we lose marks for using recursion in this function
19:04:04 <buggler> so i was trying to use a mapfuns sort of function
19:04:05 <exa> buggler: ummm
19:04:20 <clausen> well, as you can see, it's trivial to implement :)
19:04:20 <exa> buggler: okay, just don't have us do your whole homework :P
19:04:31 <exa> yea it's rather trivial but you have to get used to the idea
19:04:32 <buggler> lol, nah that question wasn't my homework 
19:04:37 <exa> of using functional composition and stuff
19:04:53 <buggler> that was the way i was going to try solve my homework
19:05:08 <buggler> may i ask what \(x y) mean
19:05:11 <exa> the prelude is cool but it doesn't have everything
19:05:14 <buggler> means even
19:05:20 <exa> buggler: it's function abstraction
19:05:29 <exa> buggler: also known as LAMBDA :P
19:05:42 <exa> buggler: go and read the relevant part in gentle introduction
19:05:46 <exa> lemme give you a synopsis
19:05:51 <exa> it's an anonymous function
19:05:56 <exa> with arguments following \
19:05:56 <buggler> oh i see
19:06:03 <exa> so \x -> x**2
19:06:15 <exa> is a function, a nameless function, that takes a power of 2
19:06:28 <exa> it takes a single argument x
19:06:39 <buggler> ok
19:06:40 <exa> \(x y ) -> x * y
19:07:00 <exa> takes as input a pair and multiplies the members of the tuple
19:07:14 <buggler> ok
19:07:24 <exa> you can use anonymous functions wherever you could use an ordinary function, it's very useful
19:07:36 <exa> a better writing style in many cases is using where and let
19:07:37 <exa> like this
19:08:24 <exa> function reallycomplex a l = map difficultFun l where difficultFun=....
19:08:26 <buggler> we haven't learnt "let" yet, only where
19:08:41 <exa> use where, it's useful
19:08:54 <exa> use anonymous functions when it would be better to do so
19:09:14 <exa> it's not a good style to overuse them I think, don't know what clausen thinks
19:09:26 <exa> in the question you asked it seemed easier to just use lambda
19:09:34 <buggler> ok
19:09:48 * clausen doesn't use anonymous functions much
19:10:08 <clausen> buggler: there was lots of currying and subtle stuff going on in my code above
19:10:22 <clausen> buggler: understanding it should help you understand haskell :)
19:10:46 * buggler gets confused about now
19:10:58 <clausen> currying, partial application, anonymous functions, hehe
19:11:12 <buggler> hang on, let me look at it more closely
19:11:15 <buggler> brb!
19:12:29 <buggler> hm i think i get it
19:12:51 <buggler> it zips the functions with the list
19:13:02 <buggler> then it maps that general function thing
19:13:09 <buggler> to turn all tuples (x, y)
19:13:12 <buggler> into x y
19:13:19 <clausen> x y means "apply x to y"
19:13:20 <buggler> so you'll have a list of [f y]
19:13:22 <buggler> yeah
19:13:42 <buggler> ok, i think i understand that lambda thing now
19:14:45 <buggler> clausen, could i ask you a question, not doing my assignment or anything for me, but do you think you could point me in how to do it without recursion?
19:14:46 <clausen> :)
19:15:14 <buggler> i've managed to do it successfully with recursive defintion
19:15:19 <buggler> it's a fairly small question
19:17:54 <buggler> or is this not a help channel? :/ don't worry, i'll figure it out, i have all day
19:18:17 <clausen> feel free to ask, but perhaps no-one will answer
19:19:32 <exa> re
19:19:42 <buggler> ok i'll ask, probably in vain though hehe
19:20:06 <clausen> buggler: if it's an interesting problem, someone will probably answer
19:20:10 <clausen> the last one was interesting ;)
19:20:10 <buggler> oh i see
19:20:13 <buggler> :)
19:20:37 <exa> it's fun to think of a good way to implement such things
19:21:31 <buggler> could i just have one minute, need to open a different irc client
19:22:21 <buggmuzz> hehe hi.
19:22:21 <clausen> ah, you're from .au :)
19:22:23 <clausen> where?
19:22:27 <buggler> perth
19:22:33 <clausen> ah, long way from me
19:22:37 * clausen melbourne
19:22:41 <buggmuzz> oh i see
19:22:44 * clausen should visit perth one day
19:22:53 <buggmuzz> i'm going there end of the year
19:22:53 <buggmuzz> :)
19:22:54 <exa> um
19:22:56 <exa> i'm from turkey
19:23:02 <exa> ankara
19:23:10 <clausen> that's a fair bit further :p
19:23:14 <exa> yea
19:23:21 <exa> :)
19:23:26 <buggmuzz> oh ok, i think i was going to go to istanbul as part of this trip
19:23:44 <buggmuzz> but i'm not sure, they say we get to stop off and quite a few cities
19:23:46 <buggmuzz> hehe
19:24:48 <buggmuzz> anyway, this is the problem. define a function occurrences that takes two lists and counts how much one list occurs in the second list
19:25:07 <buggmuzz> ie) occurrences "xs" "xsskjfsklsdfjxs" = 2 and occurrences "aa" "aaaa" = 3
19:25:24 <buggmuzz> i managed to do a recursive definition like so:
19:25:42 <buggmuzz> occurrences :: Eq a => [a] -> [a] -> Int
19:25:42 <buggmuzz> occurrences xs [] = 0
19:25:42 <buggmuzz> occurrences [] ys = 0
19:25:42 <buggmuzz> occurrences xs ys | isMatchText = next + 1
19:25:42 <buggmuzz>                   | not isMatchText = next
19:25:42 <buggmuzz>                     where next = occurrences xs (tail ys)
19:25:44 <buggmuzz>                           isMatchText = isPrefixOf xs ys
19:26:21 <exa> try using map and such to do it now
19:26:38 <exa> you can write it in a different style i'm sure
19:27:03 <buggmuzz> yeah i was planning on mapping isPrefixOf to a list of [drop 1 xs, drop 2 xs...] etc
19:27:34 <exa> something like that yea
19:27:44 <exa> try to characterize what's going on mathematically
19:28:07 <buggmuzz> ok.
19:32:02 <buggmuzz> the part i am having trouble with is making the drop 1 xs, drop 2 xs bit, is there any recommended way in particular i should try make that list?
19:33:08 <Logan> tails ?
19:33:17 <Logan> tail $ tails xs
19:34:08 <Logan> tail $ List.tails [ 1, 2, 3, 4 ] => [ [2, 3, 4], [3, 4], [4], [] ]
19:34:37 <buggmuzz> whoah, thanks logan, that function is great, hehe
19:34:55 <Logan> Yeah, the problem with learning Haskell is learning all of the functions that are available. :P
19:35:39 <Logan> I started a project documenting them at http://aux.planetmath.org/logan/haskell/ , but I only got the basic prelude functionality.
19:35:47 <Logan> So it wouldn't have helped with tails. ):
19:36:18 <exa> also look at the zvon reference
19:36:23 <exa> go to dmoz haskell category now
19:36:29 <exa> google.com, directories
19:36:34 <exa> and then search haskell
19:36:44 <exa> or www.zvon.org :P
19:36:48 <buggmuzz> lol
19:40:24 <buggmuzz> ok now i have a simple challenge, counting up the number of trues in a [Bool]
19:40:26 <buggmuzz> :)
19:40:44 <buggmuzz> thanks everyone
19:44:38 <Logan> buggmuzz: length $ filter id ?
19:45:29 <buggmuzz> yeah i used length and filter :)
19:45:40 <buggmuzz> what's the $ symbol mean?
19:47:15 <buggmuzz> damn, can't work out how to use grep to search for [Bool] without doing some regular expression search
19:50:57 <buggmuzz> got it!
19:55:31 <Logan> buggmuzz: Low-precedence function application.
19:55:41 <Logan> f g x is equivalent to (f g) x
19:55:45 <Logan> f $ g x is equivalent to f (g x)
19:56:10 <Logan> f $ g $ h x is equivalent to f (g (h x))
19:56:20 <Logan> $ is right-associative, normal function application is left-associative.
20:02:33 <buggmuzz> oh i see
20:02:52 <buggmuzz> hehe so it is sort of like f . g . h ?
20:03:08 <buggmuzz> hey gtg, thanks cya
20:03:13 * buggmuzz is away: lunch
21:14:00 <dennisb> here is a fun function for you: zipWith ($)
