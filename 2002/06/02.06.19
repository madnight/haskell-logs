00:18:04 <Heffalump> hornby: I think the list comprehension version will be turned into the version with map by the system anyway
00:29:19 * shapr bounces
01:25:49 * shapr sneaks quietly into the channel.
01:26:08 <shapr> that way joining the channel has no side effects you see.
01:39:18 <Heffalump> but you've altered the state of my IRC window
01:39:35 <shapr> happily, it was a monadic join
01:40:03 <shapr> joinHaskellChanell :: shapr -> M shapr
01:40:04 <shapr> or something like that.
01:40:35 <shapr> I've heard rumors that jens has thought of how to write an irc client in haskell.
01:50:44 <jens> who told you that, shapr! ;-)
01:50:59 <shapr> jens: actually you did :-)
01:51:13 <jens> i heard a rumour that he wants to write an editor in haskell too!
01:51:20 <jens> ;-)
01:51:36 <shapr> how hard would it be to write an elisp emulator in haskell?
01:52:02 <jens> of course wanting to and doing are not quite the same thing
01:52:09 <shapr> yah well...
01:52:23 <shapr> emacs is awesome, powerful, and single threaded.
01:52:28 <shapr> and I'm not very fond of elisp.
01:52:30 <jens> dunno, but for me the whole point is to escape from elisp!
01:52:34 <shapr> yah, agreed.
01:52:41 <jens> used to like it
01:52:48 <shapr> I'm a regular contributor to emacswiki.org
01:52:57 <jens> and make it threaded of course
01:53:07 <shapr> yes
01:53:38 <jens> my plan is to start from gtk2 GtkTextView widget and see how far that can take me
01:53:41 <shapr> I've also noticed that the different APIs cause friction on #emacs
01:53:55 <jens> XEmacs?
01:54:02 <shapr> I was thinking of approaching from the elisp emulation side.
01:54:20 <shapr> that way you can replace your existing emacs piece by piece and still have the same functionality.
01:54:35 <shapr> at least... that sounds good :-)
01:54:39 <o3> jens: ah, you're the guy who gave a talk about emacs in haskell?
01:54:49 <shapr> I use gnumacs at work and xemacs at home.
01:55:00 <jens> in the beginning elisp emulation would be good, but not so sure in the long term
01:55:11 <jens> o3: it's true
01:55:27 <shapr> jens: many people would continue using gnumacs and xemacs, being able to use their code would be good.
01:55:29 <o3> jens: my lecturer (Manuel Chakravarty) was talking about you ;)
01:55:42 <shapr> Chakravarty is your lecturer? wow!
01:55:45 <jens> really!
01:55:48 <o3> nod
01:55:57 <o3> he's very, very, very good
01:56:02 <shapr> yes he is.
01:56:13 <shapr> though he still hasn't replied to my latest email ;-)
01:56:17 <o3> goodness (Chak) = "very " ++ goodness (Chak)
01:56:26 <jens> and a very nice guy too
01:56:31 <o3> shapr: hehh, he's a pretty busy man
01:56:37 <shapr> yah I know he is...
01:56:45 <shapr> that's how stuff like gtk+hs happens :-)
01:56:51 <shapr> and iHaskell
01:56:56 <o3> jens: indeed
01:57:12 <o3> shapr: heh, ihaskell was written by a friend of mine 8)  It's not written by Manuel, AFAIK
01:57:17 <shapr> oh!
01:57:36 <o3> at least i think that's right
01:57:43 <o3> i might be messing up my facts
01:57:46 <jens> i thought chak started it
01:58:21 <shapr> http://www.cse.unsw.edu.au/~chak/software.html
01:58:27 <o3> i think so, although the actual work was done by a student here (Haoran Un)
01:58:38 <o3> or perhaps he just contributed a very large part of it
01:58:52 <shapr> it doesn't say one way or the other
01:59:28 <o3> ah, yeah, maybe Haoran just worked on it, and manuel is the main author
01:59:29 <shapr> cvs lists chak as the author
01:59:29 <o3> that'd make sense
01:59:47 <o3> (although i do know that haoran worked on it, since he spent an entire session talking about it :)
02:00:11 <jens> is haoran's work all in cvs?
02:00:19 <shapr> hey, do you know if the Ports library would fix the threading + OpenGL problem with HOpenGL?
02:00:22 <o3> it should be, yeah
02:00:33 <jens> i haven't looked at ihaskell for a while
02:00:52 <o3> shapr: i have noooo idea.  (i think i deleted all of that thread :)
02:01:39 <shapr> I don't really understand what Ports does, but I think it's possible it could fix that problem.
02:01:58 <shapr> there seems to be wailing and gnashing of teeth on the HOpenGL list about the threading problem.
03:35:44 <shapr> it's pretty easy to write obfuscated code in haskell
05:07:19 * shapr boings
05:31:29 <shapr> so... anything exciting happening?
06:07:28 <shapr> is there some way to dynamically load Haskell modules at run time?
06:09:56 <Heffalump> nope.
06:10:02 * Heffalump would like to make one
06:10:15 <Heffalump> I did try to persuade Hugs to do it, but it didn't appreciate it.
06:10:20 <shapr> how would it work?
06:10:25 <Heffalump> ghci does it, though, so something that incorporated ghci might be able to
06:10:26 <shapr> obviously ghci can do it...
06:10:32 <Heffalump> it'd have to do some kind of reflection
06:10:37 <shapr> any idea how ghci does it?
06:10:58 <Heffalump> well, it just loads them up into memory, looks at the types and then runs them, roughl
06:11:00 <Heffalump> y
06:17:18 <shapr> sounds easy enough
06:17:35 <shapr> I wonder if it's generic enough to let other programs take advantage of the same functionality.
06:18:07 <Igloo> What can ghci do that hugs can't?
06:18:35 <Heffalump> it's written in Haskell
06:18:37 <Heffalump> hugs is written in C
06:19:18 <Igloo> Oh, I misunderstood what you meant a few lines up
06:22:26 <shapr> Heffalump: have you checked out the ghci sources?
06:23:02 <Heffalump> a bit, yes
06:23:24 <shapr> learned anything?
06:23:30 <Heffalump> what I said above
06:23:33 <shapr> oh :)
06:23:49 <Heffalump> I was thinking about writing something to do exactly that
06:23:58 <Heffalump> but it'd take a while to do and I don't have time
06:50:59 <shapr> hm, someone called Haskell on OOPL on c.l.f
09:53:04 <hornby> Haskell is "even more Perlish than Perl"?
09:53:09 <Heffalump> nooo!
09:53:15 <hornby> What a strange statement
10:06:58 <shapr> hi
10:07:46 <shapr> cool, the latest happy *can* be built with make -j2, and it works!
10:07:58 <shapr> now let's see if that's true of hat 2.0
10:09:07 <hornby>  Haskell is "even more Perlish than Perl"
10:09:50 <shapr> why do you think that?
10:10:42 <shapr> do you mean it has a greater ability to write inscrutable code?
10:12:03 <hornby> shapr: I don't think it, someone said it
10:13:18 <hornby> I don't see a similarity at all
10:13:30 <hornby> Haskell code seems mostly consistent. 
10:14:35 <shapr> yah, I agree.
10:15:41 <shapr> yay! my first set of unit tests runs!
10:15:52 <shapr> I've successfully ported twelve lines of Python to Haskell!
10:15:58 <hornby> !?!?!?
10:16:10 <hornby> Oh
10:16:24 <hornby> Can I see?
10:16:31 <shapr> sure
10:18:00 <shapr> http://purl.org/net/shapr/Test_Banana.hs and http://purl.org/net/shapr/Banana.hs
10:18:22 <hornby> Banana, heh ocol
10:18:32 <hornby> (f . g . h) x is cool
10:18:45 <shapr> I'm working on porting the network communication stuff from the Twisted server framework to Python.
10:19:34 <hornby> To Python? You mean to Haskell?
10:19:38 <shapr> right.
10:19:39 <shapr> from Python
10:19:44 <hornby> Right. 
10:19:50 <hornby> Um, to what end?
10:20:05 <shapr> so that Haskell programs can talk to the Twisted server framework via PB.
10:20:16 <shapr> lemme find the url...
10:20:16 <hornby> Will that really work?
10:20:28 <shapr> sure, why not?
10:20:34 <hornby> Would you then be able to write Twisted apps in Haskell?
10:20:59 <shapr> well, as long as those apps use PB to communicate, sure.
10:21:15 <shapr> http://twistedmatrix.com/products/spread
10:22:30 <shapr> currently, PB has implementations for Python, Java, elisp, and Oz
10:23:19 <hornby> Oz? 
10:23:39 <shapr> Mozart-Oz
10:23:46 <hornby> Mm, vaguely familar. 
10:23:50 <shapr> I just asked on #twisted, seems that one hasn't been maintained.
14:23:49 <shapr> ?
14:24:07 <shapr> SnArFl3d00f: ??
14:24:50 <SnArFl3d00f> just harassing a friend, it's a combination fo Snarf from the thundercats, Narf which pinky says, and Doofus which is what my friend is... why?  I don't know, probably the long term exposure to drugs or something :P
14:25:04 <shapr> um. ok :-)
14:25:10 <shapr> cheetarah was fine btw
17:40:48 <hornby> Is the Haskell 98 Report readable? 
17:46:15 <clausen> I remember it being a fairly boring read, mainly covering unimportant details
17:46:18 <clausen> but, that was a while ago...
17:46:19 <hornby> Wait wait, the Haskel report says that EXPERIMENTAL version of Haskell support exceptions, pattern guards, etc? 
17:46:35 <clausen> all implementations I know of have those features
17:46:38 <hornby> clausen: But details that can't be found elsewhere? 
17:46:46 <clausen> hornby: I'm not sure
17:46:47 <hornby> clausen: So does that mean the report doesn't cover them? 
17:46:52 <clausen> hornby: what do you want to know?
17:47:00 <hornby> clausen: Uh, everything? :)
17:47:07 <clausen> (why do you want to know everything?)
17:47:17 <hornby> clausen: Uh ... 
17:47:19 <clausen> I'm no haskell language lawyer, by any means
17:47:27 <hornby> Not EVERYTHING, just as much as the next guy :)
17:47:47 <clausen> I think reading the prelude in hugs is a good way to get a grip on the language
17:47:54 <clausen> (and playing with it)
17:47:54 <hornby> Hm. 
17:48:10 <clausen> (prelude == "the default header that is always included", kind of thing)
17:48:21 <clausen> (hugs is a haskell interpreter)
17:48:22 <hornby> Right, I know its defined in the report 
17:48:28 <hornby> But the hugs one might be better
17:48:38 <clausen> well, it has the implementation of everything
17:48:54 <clausen> it's a very enlightening read
17:48:56 <hornby> That's cool. 
17:49:10 <hornby> I've been looking for some nice code to sink my teeth into -- practical examples
17:49:50 <clausen> well, I'd start with the prelude, for sure!
17:50:24 <hornby> Sweet. Okay, now if I can find it ..
17:50:33 <clausen> well, just look for hugs
17:50:38 <clausen> (google "hugs haskell")
17:50:39 <hornby> Isn't it Prelude.xs or something? 
17:50:42 <hornby> I have hugs :)
17:50:43 <clausen> Prelude.hs
17:50:46 <clausen> ah, ok
17:50:52 <clausen> unix or windows?
17:50:56 <hornby> Why .hs? Debian
17:51:03 <clausen> hs == haskell
17:51:09 <clausen> ok, "locate Prelude.hs" ;)
17:51:16 <hornby> /usr/share/hugs98/lib/Prelude.hs
17:51:28 <clausen> very good :)
17:51:39 <hornby> Yeah, I'm not stupid :)
17:51:43 <clausen> :p
17:51:48 <hornby> Just because I don't know Haskell ... :)
17:52:45 <hornby> Whew, 1703 sweet sweet lines of Haskell
17:52:52 <hornby> That'll keep me busy awhile
17:53:18 <clausen> ;)
17:57:26 * clausen off to "study" with a "friend"
17:57:27 <clausen> cya
17:57:55 <arete> mmmm sex with coeds, yumm
18:00:54 <hornby> arete?
18:01:49 <arete> =P he said he was off to "study" with a "friend"
18:06:34 <hornby> oooooooh
18:06:41 <hornby> bastard
21:34:17 <tetryl> I just bought the book "Haskell: The Craft of Functional Programming"!
21:34:34 <tetryl> It is hot, cool..
21:43:28 * xbill =)
21:48:50 <hornby> tetryl: cool
21:49:07 <hornby> Trying to get it from the library
