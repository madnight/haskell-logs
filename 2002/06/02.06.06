03:03:10 <buggmuzz> hey clausen
03:03:14 <buggmuzz> :)
03:27:22 <clausen> hi buggmuzz
04:03:32 * buggmuzz is back (gone 01:20:32)
04:03:36 <buggmuzz> back
04:03:46 <buggmuzz> handed in my assignment today
04:04:01 <clausen> :)
04:04:03 <buggmuzz> and now im getting paranoid :(
04:04:26 <buggmuzz> i should have emailed my self a copy of the final one i submitted in, just to make sure at home
04:04:34 <buggmuzz> oh well, it's only an assignment
04:05:32 <clausen> indeed, I wouldn't worry
04:06:15 <buggmuzz> lol, woot, last class of uni tomorrow, then first semester over
04:06:18 <buggmuzz> 10% of uni completed
04:06:34 <buggmuzz> well, less than 10 considering i'll probably do some post graduate degree
04:10:03 * clausen about 80% complete
04:10:40 * Heffalump all done, except for printing out and binding a final copy of his thesis
04:11:39 <clausen> phd?
04:11:45 <clausen> (/me talking about undergrad...)
04:12:56 <buggmuzz> hehe /me loses it's effect in brackets :(
04:13:11 <Heffalump> yeah
04:13:20 <Heffalump> hence really all done, since there's no more degrees I can do :-)
04:13:56 <clausen> you could do a doctor of science, hehe
04:14:15 <clausen> (but, 99.9% of ppl don't bother)
04:14:21 * clausen doesn't know anyone who has one!
04:14:24 <Heffalump> I thought those are only awarded as honorary degrees
04:14:29 <clausen> no
04:14:38 <clausen> they are similar to PhD's, except you have more examiners
04:14:42 <clausen> and they are anonymous
04:14:49 <clausen> (usually on the other side of the world...)
04:14:54 <clausen> I don't really see the point of it
04:15:06 <buggmuzz> lol, i'm probably just going to leave it at engineering and computer science
04:15:39 <buggmuzz> i don't think i have the money to do any more
04:16:30 <clausen> it's relatively easy to get postgrad scholarships in .au
04:16:53 <clausen> it's good to start a PhD, anyway... you'll get lots of job offers ;)
04:16:53 <buggmuzz> yeh it seems that way
04:16:59 <buggmuzz> it's more of a choice then an award
04:17:03 <clausen> (and become unemployable if you actually finish, hehehe)
04:17:22 <clausen> well, PhD students are doing research for the department
04:17:25 <clausen> which gives the dept kudos
04:17:34 <clausen> like, PhD students are effectively employees of the dept
04:17:49 <clausen> that's why they're generous with postgrad scholarships
04:18:24 <buggmuzz> yeah
05:19:24 <buggmuzz> lol
05:19:25 <buggmuzz> damn
05:19:33 <buggmuzz> i just read my assignment
05:19:35 <buggmuzz> and i have
05:20:20 <buggmuzz> blah p = splitBy ',' (loseWhitespace (beforeLast ':' p))
05:20:43 <buggmuzz> when i could just have blah = splitBy ',' . loseWhitespace . beforeLast ':'
07:31:42 --- topic: set to 'Haskell! (NerdBop) || and spiffy people! (shapr) || ? (gene9) || ! (shapr) || . (Yurik)' by Yurik
07:49:25 <J0hn> hi
07:49:42 <J0hn> I'd need an example program that reads a text file and prints its content
07:49:48 <J0hn> is it easy?
07:51:29 <J0hn> nobody can help me?
07:51:30 <J0hn> :)
07:51:53 <Yurik> look at std libs
07:51:53 <Yurik> i don't remember how exactly, but nothing complex
07:55:25 <J0hn> ok
08:03:07 <J0hn> it doesn't work
08:03:08 <J0hn> :/
08:14:40 <J0hn> yurik: plz, look at this:
08:14:44 <J0hn> runIt :: String -> String
08:15:40 <Yurik> and what?
08:15:47 <J0hn> main = do linea <- getLine
08:15:47 <J0hn>           veamos <- runIt linea
08:15:47 <J0hn>           print veamos
08:15:47 <J0hn>           main
08:15:57 <J0hn> Type checking
08:15:57 <J0hn> ERROR "znadul":9 - Type error in generator
08:15:57 <J0hn> *** Term           : runIt linea
08:15:57 <J0hn> *** Type           : [Char]
08:15:57 <J0hn> *** Does not match : IO a
08:16:29 <J0hn> I want to read several lines of text, process each line using runIt and print the result
08:16:42 <J0hn> It seems simple
08:16:52 <J0hn> but I cannot get it to work
08:18:56 <J0hn> Any idea?
08:21:15 <J0hn> yurik? dennisb? :)
08:22:15 <Yurik> sorry, actually i'm not haskell programmer... just a bit interested.. so can't help you prolly
08:22:27 <dennisb> the types does not match, thats for sure
08:22:42 <dennisb> a function with type runIt :: String -> String kan not read files
08:23:11 <dennisb> Ok
08:23:24 <dennisb> in your main-function you should call runit
08:23:35 <dennisb> after you hav read the file, and so on
08:23:59 <dennisb> but I have to leave, I have a car waiting for me outside. Bye
08:24:05 <dennisb> some other time
08:24:19 <J0hn> thanks anyway
08:24:31 <J0hn> <J0hn> main = do linea <- getLine
08:24:31 <J0hn> <J0hn>           veamos <- runIt linea
08:24:31 <J0hn> <J0hn>           print veamos
08:24:31 <J0hn> <J0hn>           main
08:24:38 <J0hn> That was my main.
09:42:08 <shapr> nice topic
09:49:05 <shapr> I wonder if there are obfuscated Haskell contests.
09:49:54 <shapr> WASH is great fun btw.
09:51:25 <J0hn> hi
09:51:44 <J0hn> somebody knows howto convert a IO to a String??
09:52:03 <Heffalump> why do you want to do that?
09:52:38 <J0hn> I need to parse lines of text
09:52:48 <Heffalump> http://haskell.org/wiki/wiki?ThatAnnoyingIoType
09:52:48 <J0hn> read from a stding or a file
09:55:58 * Heffalump doesn't help people by messages unless they ask permission to do so first
09:56:41 <Heffalump> especially not when they paste several lines of code at me without asking first
09:57:43 * Heffalump suggests J0hn look at using "let"
09:58:02 <J0hn> :?
09:58:20 <J0hn> <J0hn> main = do linea <- getLine
09:58:20 <J0hn> <J0hn>           runIt linea
09:58:20 <J0hn> <J0hn>           main
09:58:20 <J0hn> <J0hn> runIt :: String -> String
09:58:20 <J0hn> <J0hn> I have this
09:58:20 <J0hn> <J0hn> what should I have to insert for the runIT linea to work?
10:14:30 * Heffalump suggests J0hn look at using "let"
10:15:36 <shapr> hi Heffalump!
10:15:38 * shapr bounces
10:15:59 <shapr> Heffalump: hey, I played with HTML generation using Thiemann's WASH yesterday, it's fun!
10:16:32 <Igloo> Cool  :-)
10:16:45 <Igloo> What were you writing?
10:17:02 <shapr> Igloo: just generated a homepage, nothing exciting
10:17:06 <shapr> Igloo: I haven't gotten to the CGI part yet
10:17:19 <shapr> though of course, I'd like to write a Wiki in Haskell at some point.
10:17:48 <Igloo> *nod*. I'll be very interested if you do anything databasey
10:18:12 <shapr> I wish HaskellDB had postgresql support
10:18:26 <Igloo> What does it support? MySQL?
10:18:29 <shapr> yup
10:18:39 <Igloo> Hmmm, that's a shame
10:18:42 <shapr> yah it is
10:19:13 <shapr> long ago I wished for a "parasql" module where I could just map the transforms once per database, and all of my code would be portable then
10:19:22 <Heffalump> shapr: cool
10:19:36 <Heffalump> HaskellDB is apparently hugs only, according to the mailing list
10:19:45 <shapr> oh yeah
10:19:48 <shapr> TREX support
10:19:49 <shapr> I forgot
10:19:53 <shapr> well, nm then
10:20:01 <J0hn> shapr, could you please help me in fixing this:
10:20:02 <J0hn> <J0hn> <J0hn> main = do linea <- getLine
10:20:02 <J0hn> <J0hn> <J0hn>           runIt linea
10:20:02 <J0hn> <J0hn> <J0hn>           main
10:20:02 <J0hn> <J0hn> <J0hn> runIt :: String -> String
10:20:02 <J0hn> <J0hn> <J0hn> I have this
10:20:04 <J0hn> <J0hn> <J0hn> what should I have to insert for the runIT linea to work?
10:20:23 <J0hn> i don't get it to work
10:20:48 <shapr> J0hn: do you have a textbook for your class?
10:21:04 <J0hn> no
10:21:13 <Heffalump> look, I've told you twice to have a look at the "let" construct.
10:21:14 <J0hn> I've been reading some tutorials
10:21:32 <Heffalump> Why don't you go and do that instead of repeatedly pasting the same bit of code?
10:21:43 <J0hn> Heff, i've looked at this and I don't see how to use "let" to solve my problem
10:22:00 <Heffalump> ok, well what have you tried?
10:22:03 <J0hn> Heff: <shapr> ask on the channel
10:22:14 <J0hn> <J0hn> i asked on the channel but nobody answered
10:22:15 <J0hn> <J0hn> and I don't want to disturb all channel
10:22:15 <J0hn> <J0hn> :/
10:22:22 <Heffalump> I *did* answer.
10:22:32 <shapr> J0hn: it looks like you want us to do it for you, rather than listen to our advice.
10:22:53 <shapr> well, Heffalumps advice, I haven't said anything useful.
10:23:00 <J0hn> shapr: i'm in a hurry.
10:23:04 <shapr> why?
10:23:19 <shapr> is this a class assignment?
10:23:38 <J0hn> :?
10:25:49 * shapr reads the WASH CGI Examples
10:26:16 <shapr> the WASH-CGI demos are *cool*
10:27:31 <shapr> main WASH page is at http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
10:27:40 <shapr> wash has a very cool logo
10:27:58 <shapr> here's a link to the demos: http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/WASH-CGI-gallery.html
10:28:41 <shapr> hey, I have the second best score on the GuessNumberNotCheating demo, think you beat it? :-)
10:29:41 <Heffalump> how does the Persistent stuff work?
10:29:43 <shapr> the calculator is very spiffy, the haskell source is tiny:
10:29:46 <shapr> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/Calculator.hs
10:30:44 <shapr> I suspect he's using a session, but I'm not sure.
10:31:05 <Heffalump> the impression I had of the way it works is that it passes everything around via the client
10:31:05 <shapr> I do know that sessions support was added in the last version or so
10:31:09 <Heffalump> which is no good for security, obviously
10:31:12 <shapr> right
10:33:32 * shapr tries to figure it out
10:33:57 <Igloo> In the worst case you could pass around a random number and use that to index a database or file yourself
10:34:11 <shapr> which is pretty much how a session works
10:34:28 <shapr> either encoded into the urls on the page, or by setting a cookie
10:35:41 <Igloo> Yeah, but it would be nice if it could do it for you, a la Apache::Session
10:36:24 <shapr> it probably can
10:36:36 <shapr> it should be simple to do something like the state monad
10:36:57 <shapr> where the one piece of state is a session identifier, and it's all transparent
10:37:42 <shapr> of course, everything is simple for the man who does not do it himself...
10:37:53 <shapr> it wouldn't be so simple for me to write it :-)
10:38:03 <Igloo> :-)
10:38:22 <shapr> oh, btw
10:38:38 <shapr> I'm still not doing homework for that guy, no matter what he says.
10:38:48 <Heffalump> heh
10:39:01 <shapr> I put :set -fglasgow-exts in my .ghci
10:39:02 <Heffalump> I wonder why his function was String -> String
10:39:14 <Heffalump> cos I can't see what his code could have done with the result string
10:39:18 <Heffalump> maybe it needed to print it
10:39:20 <shapr> he was trying to build a Haskell interpreter
10:39:25 <shapr> at least, I think so
10:39:32 <shapr> something like that
10:39:33 <Heffalump> errm, right.
10:39:40 <Heffalump> he had a hope...
10:39:42 <Igloo> He had a print a bit earlier
10:39:47 <shapr> but he had not a clue
10:39:49 <shapr> oh well
10:40:11 <shapr> so after adding glasgow-exts to my .ghci, which WASH requires,
10:40:30 <shapr> then trying to import the WASH stuff into ghci uses LOTS of memory
10:40:45 <shapr> like, it ran past 700mb before I killed it.
10:41:16 <Heffalump> oh dear
10:41:17 <shapr> otoh, if I do :set -fglasgow-exts from inside ghci, and then load the WASH stuff, it's all fine.
10:41:30 <Heffalump> interesting...
10:41:40 <shapr> so, I'm guessing it tried to apply all the glasgow-exts to the Prelude and other stuff like that.
10:41:53 <shapr> but I'm not sure.
10:42:17 <Heffalump> even so
10:43:14 <shapr> I'll try it again.
10:43:16 <shapr> 100mb
10:43:23 <shapr> 200mb
10:43:36 <shapr> 400mb
10:44:23 <shapr> whew
10:44:35 <shapr> killed it
10:44:48 <Heffalump> :-)
10:45:27 <shapr> oh wait, this could be user erro
10:45:29 <shapr> r
10:45:31 * shapr tries something
10:45:42 <shapr> yup
10:45:44 * Heffalump adds shapr to the list of people who would be dangerous having an account on my box (the list initially comprising Igloo :-)
10:45:45 <shapr> user error it is
10:45:53 <shapr> heh :-)
10:46:06 <shapr> happily, I have 512mb of ram and a gigabyte of swap
10:46:18 <shapr> and two cpus, of which ghc only uses one
10:46:19 <Igloo> Heff: You aren't on it?  :-)
10:46:25 <shapr> heh!
10:46:36 <Heffalump> I've never killed urchin with OOM :-p
10:46:49 <Heffalump> http://urchin.earth.li/uptime.html - the end of the second highest uptime is all Igloo's fault :-)
10:47:22 <shapr> well, the problem is that I added :set -i/home/shae/src/haskell to my ~/.ghci
10:47:46 <shapr> works fine without glasgow-ext though
10:48:01 <shapr> why would that cause a problem? I don't get it.
10:48:10 <Heffalump> no idea
10:48:13 <Heffalump> are you running the latest version?
10:48:17 <shapr> latest deb
10:48:23 <shapr> 5.02.2
10:48:48 <shapr> I'd use the cvs version if I could figure out how to compile it myself.
10:49:07 <shapr> my box can compile linux kernel 2.4.18 in two minutes ten seconds :-)
10:49:19 <Heffalump> wow
10:50:03 <shapr> I also need to add more case fans :-/
10:50:15 <shapr> three extra fans isn't enough to keep it from crashing.
10:55:28 * shapr reads ghc for dummies
11:53:21 <shapr> oh
11:54:59 <shapr> I think lndir screwed up
11:58:01 <shapr> oh, no it didn't
12:09:11 <shapr> aha
12:11:08 <shapr> hm
12:12:13 <shapr> ah, ld -lbfd requires binutils-dev
12:14:04 <shapr> wow, this uses quite a bit of cpu
12:16:42 <shapr> not much ram though
12:22:10 <shapr> hm, I can't build hlibs
12:23:26 <shapr> weird
12:29:12 <shapr> oops
12:31:00 <shapr> hey, do you guys have CONTRIB directory in your fptools cvs checkout, or does that mean I'm trying to check out the whole repository?
12:39:57 <shapr> well crap
12:57:21 * shapr burbles viscously
13:26:03 <shapr> I'm getting an error in hslibs/lang
13:26:16 <shapr> dependency `base' doesn't exist
13:49:40 * Yurik is away: wine!
14:14:55 --- topic: set to 'Haskell! (NerdBop) || and spiffy people! (shapr) || ? (gene9) || ! (shapr)' by ChanServ
