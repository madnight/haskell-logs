02:28:00 <shapr> hey, I'm trying to build ghc
02:28:04 <shapr> from cvs
02:35:13 <shapr> I seem to be able to build the compiler itself
02:35:18 <shapr> but not the hslibs part
02:35:25 <shapr> ../../ghc/utils/ghc-pkg/ghc-pkg-inplace --update-package <lang.conf.inplace
02:35:25 <shapr> Reading package info from stdin... done.
02:35:25 <shapr> Expanding embedded variables...done.
02:35:25 <shapr> dependency `base' doesn't exist
02:35:36 <shapr> does that mean anything to anyone here?
03:12:38 <shapr> I do have ghc-inplace, so that's a step in the right direction.
04:56:08 <shapr> f00
05:07:49 <shapr> f0000
05:22:59 <shapr> hrm
05:23:47 * Heffalump has never had the problem you describe, that I can remember
05:23:52 <Heffalump> but I'm not sure I've ever built it from CVS
05:23:59 <shapr> it's probably user error
05:24:18 <shapr> most of my problems with Haskell are
05:34:58 <buggmuzzuni> i can't seem to work out how to use that error function
05:35:06 <buggmuzzuni> it says String -> a
05:35:17 <buggmuzzuni> so i try error "test" and get some weird error
06:44:29 <buggmuzzuni> hey exa
06:46:20 <Heffalump> what's the error?
06:47:00 <buggmuzzuni> well, i don't really understand how i am meant to use it
07:01:44 <exa> hi buggmuzzuni
07:01:57 <Heffalump> you just put error "foo" anywhere you like
07:02:07 <Heffalump> and if it ever gets evaluated your program will abort with that error
07:02:18 <buggmuzzuni> oh so you can't just enter it in hugs?
07:02:25 <Logan> buggmuzzuni: In terms of compilation, error is a value of any type, but if you ever actually try to get the value of it, you'll get an error. :P
07:02:28 <Heffalump> you can, yes
07:02:39 <Heffalump> oh, you need to give it a type then
07:02:45 <Heffalump> Prelude> error "foo" :: Int
07:02:45 <Heffalump> Program error: foo
07:02:53 <buggmuzzuni> ah
07:02:55 <buggmuzzuni> hehe
07:02:55 <Heffalump> if you don't you have an overloading problem first :-)
07:06:19 * shapr feels overloaded
07:06:29 <shapr> Heffalump: how do you build ghc then?
07:06:48 <shapr> I ended up checking out the whole repository and trying it again
07:06:50 <shapr> still didn't help.
07:07:29 <shapr> afaiu, I should drop into fptools-build run lndir ../fptools-original, then "autoconf ; ./configure && make"
07:08:18 <shapr> make boot runs first, it succeeds in ghc, but fails in hslibs/lang
07:08:38 <Heffalump> download release tarballs
07:08:45 <shapr> ok ok :-)
07:08:50 <Heffalump> but I generally build it using the Redhat/Debian source packages
07:08:54 <shapr> oh
07:08:54 <shapr> hm
07:09:12 <shapr> I was hoping to build in support for HOpenGL and hat for ghc
07:09:13 <Heffalump> but I've had goes at building from the source tarballs too and I don't recall any particular problems with the basic build
07:09:23 <shapr> it's probably user error.
07:09:38 <shapr> I've probably screwed build.mk or something.
07:10:37 <buggmuzzuni> i really need to learn how to make haskell executables
07:10:49 <buggmuzzuni> i can't be bothered learning shell scripting or perl
07:10:59 <buggmuzzuni> or anything else
07:11:05 <shapr> buggmuzzuni: ghc --make MyModule.hs
07:11:08 <shapr> that's pretty much it.
07:11:24 <Logan> hat - The nhc98 HAT source-level tracer ?
07:11:39 <shapr> Logan: it's not just for nhc, but the debian package is just for nhc
07:12:08 <shapr> I want a ghc-sumo or whatever you'd call it
07:12:18 <Logan> So it seems... also requires a jvm for some reason.
07:12:26 <Logan> sumo?
07:13:10 <shapr> a sumo tarball of something includes everything you ever thought you might want
07:13:25 <shapr> fog
07:13:39 <shapr> along the lines of folk, functionally overloaded linux kernel
07:13:45 <shapr> functionally overloaded ghc :-)
07:14:38 <Logan> I like having extension packages.
07:14:43 <shapr> ?
07:14:44 <Logan> Like php, php-mysql, php-xslt, etc.
07:14:59 <Logan> The base package just gives the bare functionality, you can customize with additional packages.
07:15:06 <shapr> I prefer that also
07:15:17 <shapr> debian has few haskell extensions though
07:15:30 <shapr> I guess I should become a debian developer and fix that.
07:15:34 <shapr> it *is* open source.
08:17:13 * shapr bounces
10:08:59 <shapr> wheee
10:10:56 <shapr> wheee
17:15:34 * shapr sighs
18:05:06 * shapr sighs again
22:13:53 <Cryptor> does a structure such as 'let x a = a : x ( a + 1 )' have some sort of memory?
22:39:43 <dennisb> Cryptor: yes
22:40:24 <dennisb> Cryptor: but I don't really understand what you want to know
22:45:14 <Cryptor> so, would it be right to say that the data structure changes internally, but from externally it is immutable?
22:47:43 <Cryptor> and how do I impliment a abstract data type myself that has similar properties, that is it changes internally but stays the say externally, if you know what I mean...
22:57:58 <dennisb> Cryptor: well, you have to create the value all at once and let lazy evaluation exapnd it on demand
22:59:09 <dennisb> the above works because haskell only calculates something when it needs it
22:59:53 <dennisb> so you can have an infinite list of numbers as long as you only use a finite part of it. All values and datatype has this property, it's nothing you have to do
23:01:51 <dennisb> I agree with the view that it changes internally, parts of the value are closures that have not been evaluated (aka not been forced).
23:13:41 <Cryptor> ok, lets say I want to create a abstract data type x. Internally, it contains a list. Then I have a function, f, which returns a function on the internal list (median for example). But when I apply this function a second time, I want it to use the previous result.
23:13:59 <Cryptor> how could I impliment something like that?
23:26:13 <dennisb> Cryptor: you have to bind the value to a variable and use that twice
23:28:26 <dennisb> the fun part is that if you bind it to a variable and never use the variable at all it will not be calculated at all. So just run the function even if you might not need the value
23:30:58 <dennisb> in practice if you apply a function twice it will be calculated twice, you could use memoization (hmm, spelling?) where the function will remember values it have been called with an reuse the result.
23:32:59 <dennisb> there is nothing magical with lazy evaluation, haskell uses closures so when you have let x = 2+4 in x+x then x will first be a closure containing the expression 2+4, when you use x for the first time it will perform the calculation and replace the expression with the value, then all the next uses of x will get this value directly.
23:34:07 <dennisb> (in this case the compiler will optimize of course, but that is not the important thing)
