00:29:35 <shapr> gooood morning oh ye of little side effects
01:11:10 <shapr> hi jen
01:11:12 <shapr> er, jens
01:11:34 <jens> shapr!
01:11:54 <jens> how's it going?
01:12:30 <shapr> I've reached monadic I/O, which I'm slowly assimilating
01:12:32 <shapr> what's up with you?
01:13:09 <jens> i broke a toe at the end of may... /:
01:13:11 <shapr> I see that popen is gaining popularity
01:13:14 <shapr> oh, that sucks
01:13:19 <shapr> does that mean you had more programming time?
01:13:51 <jens> well, been working from a home a couple of weeks
01:14:07 <jens> which is not bad
01:14:22 <jens> would be better if my adsl line was more stable...
01:14:42 <jens> i guess speed has it7s prices ;)
01:15:37 <jens> so i wasted time writing an adsl modem status monitor
01:15:56 <jens> (uses HTTP.hs and HaXmL fwiw)
01:16:04 <jens> ;-)
01:17:35 <jens> not sure about popen's popularity
01:17:46 <jens> need to do some more work on it
01:18:12 <jens> been meaning to fold in SubProcess.hs to, but didn't get round to it yet
01:18:34 <jens> to it, even
01:20:06 <shapr> didn't you have a gtk+hs net connection monitor project on freshmeat?
01:20:07 * shapr looks
01:20:28 <shapr> I think it was a gnome-panel applet even
01:20:58 <jens> linkchk?
01:21:05 <shapr> er, yah that sounds like it.
01:21:55 <shapr> oh, I was thinking about HsClock
01:22:18 <jens> yeah, it's a kind of gtk applet (not a real gnome panel applet though)
01:22:32 <shapr> wow, haskell does ipv6?
01:22:48 <jens> hsclock is a gtk "applet" too
01:23:02 <jens> it does? :)
01:23:02 <shapr> aha -> http://freshmeat.net/projects/linkchk/?topic_id=152
01:23:18 <shapr> I don't know, but linkchk supports ipv6
01:23:35 <jens> ah, but i cheat: it just uses ping6 !
01:23:41 <shapr> aha :-)
01:24:10 <shapr> I got gtk+hs and gtk2hs both working recently at home
01:24:37 <jens> want to make it ping natively in haskell one day though
01:24:39 <jens> cool
01:24:47 <shapr> but I'm still struggling to wrap my head around I/O, so I haven't gotten to try them yet.
01:25:10 <shapr> does haskell support ipv6?
01:25:14 <jens> i've been playing some with gtk2hs
01:25:31 <shapr> found anything nifty?
01:25:35 <jens> shapr: not afaik
01:26:06 <shapr> are you on the HOpenGL list? did you hear that it fails miserably with --enable-threaded-rts ?
01:26:06 <jens> gtk2hs is nice, but building it is a pain
01:26:37 <shapr> I found it pretty easy to build, but then my box compiles stuff *fast*
01:26:45 <shapr> I can compile 2.4.18 in two minutes ten seconds
01:27:06 <shapr> though my box isn't so fast with Haskell because make -j2 has failed for every project >:(
01:27:34 <shapr> Heffalump suggested that the dependencies need to be tighter for SMP compilation.
01:27:58 <shapr> so is linkchk your adsl modem status monitor?
01:29:38 <shapr> sounds like a different thing entirely
01:29:51 <shapr> I'd like to see some example HaXml code
01:30:06 * shapr looks for examples
01:31:10 <jens> no, i wrote linkchk to monitor my isdn ppp connection, which was also pretty unstable :-\
01:31:23 <shapr> sounds rough
01:32:24 <shapr> does that mean linkchk2 will soon be released? :)
01:33:07 <jens> dunno, i fear i'm working on too many fronts and many too slow progress on them
01:33:15 <shapr> yah, I understand that.
01:33:25 <shapr> maybe just a source dump on a website?
01:34:49 <jens> the problem with the adsl status monitor is that the parse of the status page is of course dependent on my modem's status page html output
01:34:56 <shapr> oh
01:35:01 <jens> parsing evem
01:35:04 <jens> even
01:37:21 <jens> ideally that part should be abstracted out and made configurable in some way for it to be useful on other modems
01:37:37 <shapr> yah, I was just thinking that my home adsl modem has a 3com status page
01:37:43 <shapr> and the one here at work has a cisco status page
01:38:24 <shapr> actually, the one here at work has a finger server that's the best way to get info
01:38:47 <jens> sounds nice
01:41:10 <shapr> do you understand what DrIFT is good for?
01:41:25 <jens> well, if you want to send me some html output and the path of the url needed to get it, i could try to see what i can do
01:41:44 <jens> for learning HaXmL there's several papers on the homepage i think
01:42:08 <shapr> I heard that HaXml doesn't work interactively.
01:43:13 <jens> haven't used drift, but isn't it for automatically deriving classes
01:43:30 <shapr> yah, but I'm not quite sure what that's good for.
01:44:27 <jens> it's a little messy but you can use HaXmL inside ghci
01:44:48 <shapr> oh, I didn't know that.
01:45:06 <jens> at the other end there's Xtract
01:45:43 <jens> HaXmL is included with ghc these days
01:46:53 <shapr> hmm, I'll have to try the interactive HaXml bit then...
01:47:56 <jens> though you'll probably have to peruse the source a bit to do that
01:54:52 <shapr> I've been thinking about the HOpenGL problem
01:55:11 <shapr> and I wonder, could Manuel Chakravarty's iHaskell be applied to it?
01:55:25 <shreya_> lol
01:55:42 <shreya_> Prelude> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 0.7
01:55:44 <shreya_> False
01:55:44 <shapr> the HOpenGL problem is that GLUT expects to be called by the same OS thread that started it
01:56:00 <shreya_> bloody floating point numbers :(
01:56:29 <shapr> shreya_: did you try "map (+) replicate 0.7" ?
01:56:30 <shapr> err
01:56:32 <shapr> foldr1
01:57:22 <shreya_> what does foldr1 do?
01:57:42 <shreya_> i looked at the definition
01:57:43 <shapr> you know what [1..9] does?
01:57:48 <shreya_> yeah
01:58:13 <shapr> try "foldr1 (+) [1..9]"
01:58:18 <shapr> can you guess what is does?
01:58:39 <shreya_> makes a bunch of functions
01:58:43 <shreya_> (+ 1), etc?
01:59:02 <shreya_> [(+1),(+2)...(+9)]
01:59:08 <shapr> not exactly :-)
01:59:11 <shreya_> ok :(
01:59:14 <shreya_> wait
01:59:17 <shreya_> let me open hugs
01:59:20 <shapr> you're thinking in the right direction though ;-)
01:59:46 <shreya_> ah, it adds them all
01:59:47 <shreya_> hehe
01:59:51 <shreya_> couldn't i just use sum
01:59:57 <shapr> sure you could
02:00:07 <shapr> but foldr1 is more general
02:00:10 <shreya_> k
02:00:18 <shreya_> so that means
02:00:22 <shreya_> the function has to be
02:00:28 <shreya_> a -> a -> a
02:00:52 <shapr> correct
02:01:10 <shapr> have you looked at ":t foldr1" ?
02:01:19 <shreya_> i think i can predict it
02:01:22 <shreya_> would it be
02:01:33 <shreya_> (a -> a -> a) -> [a] -> a
02:01:43 <shapr> correct!
02:01:46 <shreya_> woot
02:01:49 <shapr> wow, you're picking this up fast
02:02:23 <shreya_> replicate 0.7? 
02:02:29 <shapr> err, sorry typo
02:02:43 <shapr> replicate 7 0.1
02:02:49 <shreya_> ah
02:03:06 <shapr> it's cheesy shorthand, but I enjoy it :)
02:03:12 <shreya_> lol
02:03:32 <shapr> foldr1 (+) [1..9] can be rewritten with foldr
02:03:44 <shapr> like this: foldr (+) 1 [2..9]
02:04:14 <shapr> foldr1 is a foldr where you take the initial argument from the beginning of the list.
02:04:25 <dennisb> it almost the same at least
02:04:42 <shapr> dennisb: are there differences?
02:04:51 <dennisb> the order of the additions :-)
02:05:02 <shapr> really?
02:05:06 * shapr thinks about that
02:05:07 <dennisb> it will add the 1 last
02:05:09 <Heffalump> yeah, you should take the initial argument from the tail of the list
02:05:17 <shapr> ohhh
02:05:18 <Heffalump> or rather the last element
02:05:20 <shapr> ohhhh!
02:05:22 <shapr> I see I see
02:05:33 <dennisb> but it is integers so the result will be the same
02:05:41 <shapr> that relates to the foldM discussion on haskell-cafe recently
02:05:44 <dennisb> Float would make a difference
02:05:49 <shapr> I see
02:06:25 <shapr> iirc, foldr builds up calls to the right, but 'resolves' to the left
02:06:31 <shapr> err
02:06:34 <shapr> I think that's right...
02:06:36 <shapr> yah it is.
02:06:50 <shapr> I think so..
02:06:54 <dennisb> resolves to the left?
02:07:01 <shreya_> haskell-cafe?
02:07:15 <shapr> shreya_: yah! you should subscribe to the haskell mailing lists, they're cool!
02:07:33 <dennisb> it calculates (1+(2+(3+(...(8+9)...)))
02:07:37 <shapr> right!
02:07:39 <dennisb> it's right-accosiative
02:07:42 <dennisb> hmm :-)
02:07:48 <shapr> associative?
02:07:56 <dennisb> even I could tell the spelling was wrong:-)
02:08:00 <shapr> heh :)
02:08:04 <shreya_> is there a setting to show how haskell evaluates something
02:08:25 <dennisb> no, but you could use Hat
02:08:49 <dennisb> it will record how it calculates and you can examine it after
02:09:04 <shapr> oh, good idea
02:09:11 <shreya_> is that something in hugs, or another program
02:09:20 <shapr> it's another program
02:09:32 <shapr> originally developed with nhc I think
02:09:42 <dennisb> with Hat you can look at the result, say it's a string. then you can se how the string is produced, what function calls was used and so on, back to main
02:09:49 <shapr> nifty
02:09:50 <dennisb> shapr: yes
02:09:52 <shapr> I want that!
02:10:11 <Heffalump> apparently Hat is going to work with GHC too soon (or maybe even now)
02:10:16 <dennisb> i've never used it, but i've seen a demonstration of if. It looked very cool
02:10:18 <dennisb> yes, now
02:10:57 <shapr> that's good, since I prefer ghc...
02:11:01 <shreya_> btw, what's all this alt.stuff
02:11:07 <dennisb> but the log files it saves are bug, run the program for a couple of seconds and you have maybe 30M och logs
02:11:10 <shreya_> something about usenet
02:11:22 <shreya_> i always hear people talk about it, but i never understand what they are talking about
02:11:25 <dennisb> shreya_: what? where? who?
02:11:31 <dennisb> it's newsgroups
02:11:56 <dennisb> use a newsreader and connect to a news server
02:12:18 <shreya_> what'd be a good newsreader
02:12:29 <dennisb> it's sort of out of fashion the last 5 years or so, but the oldtimes might use it still :-)
02:12:39 <dennisb> maybe pan
02:12:44 <shapr> usenet is out of fashion?
02:12:44 <shapr> really?
02:13:03 <shreya_> ok
02:13:06 <shreya_> downloading pan now
02:13:06 <dennisb> shapr: well, mailinglists took over most of the serious stuff
02:13:12 <shapr> hm.
02:13:17 <shapr> comp.lang.functional is still lots of fun
02:13:26 <shapr> so is comp.lang.python
02:13:44 <shapr> I've found good stuff on comp.os.linux.announce
02:13:46 <dennisb> and for some other areas (warez, porn, ...) I guess it's used a lot still
02:13:57 <shapr> I have a huge usenet subscription list.
02:14:15 <shapr> gnus makes it easy to find good stuff
02:14:19 <shapr> and to get rid of the crap
02:14:33 <dennisb> shapr: At least my impression is that it was much more usual to read news 5-10 years ago
02:14:40 <shapr> hm, maybe so
02:15:00 <shapr> I got on the 'net in 1989 or so
02:15:05 <shapr> that may explain it
02:15:32 <dennisb> I spent my youth on the FidoNet talking about fun topics, then on the net '93 I think reading news, and now mostly mailinglists
02:15:56 <dennisb> (and irc)
02:18:14 <dennisb> FidoNet was great. I used a really good programs there, i've yet to see anything as good as I had on my amiga reading FidoNet. I learnt a lot about programming talking with people there. The good old days .-)
02:18:56 <shapr> I'd suggest gnus if you're looking for a powerful mail and news reader.
02:19:01 <shapr> gnus is amazing.
02:19:15 <shreya_> damnit i just got pan
02:19:16 <shreya_> lol
02:19:28 <shapr> I'd suggest you start with pan
02:19:34 <shapr> gnus is part of emacs...
02:20:07 <dennisb> I've used emacs since 93 but I never really liked reading mail or news in emacs
02:20:36 <shapr> have you tried gnus?
02:20:51 <shapr> I've only been using emacs for a coupla years or so.
02:20:57 <dennisb> No, but I did try the mailreader for some time. But it was a long time ago
02:20:58 <shapr> I'm such a newbie =)
02:21:01 <dennisb> don't remember the name
02:21:08 <shapr> gnus is nice
02:24:37 <shapr> emacs is the best editor I've ever used, but it definitely has its limitations.
02:25:26 <dennisb> I just like the reindent on tab, but the haskell mode (I use) could need some fixing
02:25:34 <shapr> which one do you use?
02:25:42 <dennisb> things like let in a do is always a problem for me
02:25:51 <dennisb> shapr: good question, I don't know
02:26:55 <shapr> what does M-x haskell-version give you?
02:27:14 <shapr> I have version 1.41 of the Simon Marlow, Graeme E Moss, and Tommy Thorn
02:27:19 <dennisb> haskell-mode version 1.2
02:27:28 <dennisb> I should upgrade then
02:27:34 <shapr> yah I agree.
02:27:36 <dennisb> If you do:
02:27:38 <dennisb> main = do
02:27:38 <dennisb>   let r = 3
02:27:51 <dennisb> can you tab on the next line and get under the let?
02:27:53 * shapr checks
02:28:21 <dennisb> for me is goes to the left edge or under the "r"
02:28:30 <shapr> it indents under the 3 for me
02:28:44 <dennisb> press tab several times
02:28:51 <dennisb> you can cycle between the positions
02:28:54 <shapr> the next two indent cycles jump under the r, and then under the "l" in let
02:29:04 <dennisb> Aah, I should upgrade. Great.
02:29:35 <shapr> and then under the space after "main" and the next one types "main " at the beginning of the line for pattern matching stuff
02:30:46 <dennisb> I assume you know tab reindent previously written lines, that is the single one feature that I have always loved in emacs, and hated in haskell-mode for some cases
02:31:29 <shapr> well, haskell mode has larger challenges for indentation :-)
02:31:36 <shapr> the largest of any language I know in fact....
02:31:54 <dennisb> haskell compilers even have problem with haskell :-)
02:32:14 <dennisb> I don't like the layout rule as specified
02:32:49 <dennisb> it's hard to implement, i've done it once and it was no fun and I don't even know if I got it working right
02:32:50 <shapr> I fell in love with significant whitespace in Python, and I love it in Haskell
02:33:01 <dennisb> I like to use it
02:33:07 <shapr> I don't mind if they change the layout rules as long as they keep significant whitespace.
02:33:32 <shapr> dennisb: are you no the HOpenGL list?
02:33:39 <dennisb> no
02:33:39 <shapr> er "on"
02:34:00 <shapr> they have a threading problem, and I wonder if iHaskell might fix it...
02:34:27 <shapr> but I'm well aware I don't understand everything involved.
02:34:49 <shapr> so I was hoping you might have a better understanding :-)
02:35:16 <shapr> in short: GLUT expects to be passed data or called or something by the same OS thread that started it,
02:35:41 <shapr> but --enable-threaded-rts uses anonymous os threads to run whatever Haskell thread needs to do something at the moment.
02:36:05 <shapr> so I wondered if Manuel Chakravarty's iHaskell would get around that:
02:36:10 <shapr> http://www.cse.ogi.edu/~jl/wg2.8/Packwood.html#chakravarty
02:36:12 <shapr> what do you think?
02:38:56 <dennisb> I read a little in the archive and the people discussing knows more then me about the subject
02:39:53 <dennisb> I don't see how iHaskell would help
02:43:00 <dennisb> I actually don't understand why it is a problem to run the opengl in just one thread
02:43:53 <dennisb> even concurrent haskell programs (ghc) run in just one thread doing cooperative multitasking (sort of),
02:44:05 <dennisb> I simply don't know enough about his
02:44:07 <dennisb> this
02:46:18 <shapr> neither do I...
02:46:51 <shapr> in the list they were trying to find some way of having just one thread sending the opengl commands
02:47:27 <shapr> my first thought was to write a separate Haskell program that isn't threaded, and it talks to the threaded program
02:47:49 <shapr> then I wondered if you could combine that into a single binary
02:48:39 <shapr> I wonder if the Ports interface could do it
02:49:06 <shapr> maybe I should email Manuel and ask him.
02:51:31 <shapr> has anyone here tried hIDE?
02:52:00 <shapr> it's the haskell ide here: http://www.dtek.chalmers.se/~d99josve/hide/
03:00:35 <ChoJin> hi
03:00:49 <shapr> hi ChoJin, what's up?
03:04:17 <ChoJin> nothing :) studing, working ... the life ;)
03:04:27 <shapr> sounds good
03:05:24 <shapr> cool, eighteen users on #haskell
03:05:30 <shapr> maybe we'll hit twenty this week :-)
03:16:33 <ChoJin> lol
03:16:47 <shapr> ok guys, invite your friends =)
03:20:55 <shreya_> lol
04:27:30 * shapr bounces
04:54:50 <shapr> the more I work with Java, the more I like Haskell.
04:55:53 <Heffalump> :-)
04:56:36 <shapr> so many times I see stuff like "if you want to do X several times in a row, you should create the instance once, and reuse it for all the items"
04:56:54 <shapr> but then in some other places it says "you need a new instance each time you do this because ...."
06:01:45 <tetryl> i can't understand Monad.. it's very difficult.
06:02:14 <shapr> tetryl: do you have any specific questions about Monads?
06:04:24 <tetryl> not yet, i know the Monad recently.
06:04:49 <shapr> I have a book "The Craft of Functional Programming" by Simon Thompson
06:05:12 <shapr> that's the best beginning Haskell book for me.
06:05:59 <shapr> I had to read about Monads several times to understand them.
06:06:59 <shapr> The only Monads I understand right now are IO actions, I haven't looked very hard at others.
06:08:03 <tetryl> hmm.
06:11:51 <tetryl> between functional and imperative.
06:12:13 <tetryl> that is just Monads?
06:12:23 <shapr> hmm
06:12:43 <shapr> I think that is part of what they are.
06:13:06 <tetryl> oh
06:13:47 <shapr> Monads let you represent and sequence your imperative actions in a program.
06:15:43 <shapr> "in a purely functional program" even
06:16:47 <tetryl> Monads are not necessary if I am going to do IO actions?
06:21:34 <tetryl> I would learn about Monads little more.
06:21:41 <tetryl> thx
06:24:59 <shapr> you will need to use Monads to do IO actions, but you do not need to fully understand them to use them.
10:18:06 * shapr SPRINGs into the channel
10:18:39 <shapr> gooood evening!
10:18:51 <shapr> what did I miss?
10:19:30 <jewel> nothing
10:19:34 <shapr> oh
10:19:36 <shapr> well then.
10:19:49 <jewel> :-)
10:19:58 <shapr> hii jewel!
10:20:06 <jewel> hello
10:20:16 <shapr> what's up?
10:23:17 <jewel> helping my friend clamp some components together for a wireless antenna he's making
10:23:37 <shapr> 802.11 ?
10:24:01 <jewel> yeah
10:24:21 <jewel> He's made a few out of coffee can's and some wire
10:24:32 <jewel> this one looks more sophisticated
10:24:39 <shapr> sounds cool :-)
10:24:54 <jewel> yeah it's good fun
10:25:08 <jewel> I'm trying to set up a ppp over ssh here in the office so I can use my latop wirelessly
10:25:19 <shapr> that sounds cooler
10:25:48 <jewel> it would be nice if I got it working
10:34:29 * shapr bounces
11:47:39 <shapr> can I display numbers in different bases? up to base 128 maybe? :-)
11:48:16 <Igloo> You can write code to display numbers in different bases, yes  :-)
11:48:23 * shapr thinks about that.
11:48:28 <Igloo> I think there is showHex and showOct but not a generic one
11:48:46 <shapr> cool, I'll see how those were written.
11:48:48 <shapr> thanks
11:49:41 <Igloo> Hmmm, maybe I was thinking of readHex et al
11:49:54 <shapr> hrm
11:50:02 <Igloo> Anyway, you can do it with divMod of the base and !! on a list of digits
11:50:31 <shapr> oh, showHex does exist :-)
11:50:41 <shapr> NumExts
11:51:39 <shapr> wow, divMod is much smoother
11:52:48 <Igloo> Ah, non-standard evilness presumably then
18:04:16 <hornby> Hey, whats faster? map inc [0..100] or [inc x | x <- [1..100]]?
18:54:43 <hornby> \x looks funny
18:55:06 <hornby> everything else is so pretty, but lambda bad
19:01:59 <hornby> okay, so I can define my own infix operators. Can I also then do "operator overloading" -- rewrite + say?
20:15:48 <hornby> This is the coolest thing: 
20:16:06 <hornby> fib = 1 : 1 : [a+b | (a,b) <- zip fib (tail fib)]
