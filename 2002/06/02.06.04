00:07:05 <shapr> Heffalump: hey, I got a reply
00:08:36 <shapr> he said:
00:08:45 <shapr> Dear Shae,
00:08:46 <shapr> Please stand by. Things will be all right.
00:08:46 <shapr> B-rgrds c
00:08:56 * shapr feels very cool.
00:27:25 <Yurik> shapr: hi
00:27:32 <shapr> hi Yurik
00:27:32 <shapr> what's up?
00:41:47 <Yurik> shapr: i'm quite well, instead of common problems :)
00:42:00 <shapr> you have money? :)
00:42:28 <Yurik> shapr: nope :(
00:43:58 <Yurik> shapr: and how are you ?
00:44:18 <shapr> I'm awake, though not working.
00:44:40 <shapr> reading research literature...
00:44:47 <Yurik> heh
00:44:54 <Yurik> you're lucky
01:03:50 * Heffalump gets up
01:04:11 <shapr> hm, is GPH usable?
01:07:50 <shapr> an IP like system would skip the whole problem of tracking classes refactored from one file to another.
01:07:53 * shapr sighs
01:14:27 <shapr> what's up with glasgow parallel haskell? is it still actively developed?
01:15:30 * Heffalump has never used it, sorry
01:15:35 <shapr> hrm
01:16:07 <shapr> since I have an SMP system at home, I'm trying to find out how to get Haskell to talk to it.
01:16:32 <Heffalump> well, you can write threaded programs with GHC
01:16:51 <shapr> yah, I guess that's the best method.
01:17:04 <shapr> I was hoping that the threads of transparent parallelism were being realized.
01:17:10 <shapr> er "threats"
01:18:05 <Heffalump> :-)
01:18:14 <Heffalump> doesn't look like GPH does it transparently either
01:18:36 <shapr> By "parallel" we mean using implicit parallelism to gain performance
01:18:45 <shapr> that's from the GPH summary,
01:19:31 <Heffalump> URL?
01:19:51 <shapr> http://haskell.org/ghc/features.html#Parallelism
01:21:06 <Heffalump> oh, cos the page it links to talks about using an explicit parallel combinator
01:21:45 * shapr looks
01:22:00 <shapr> yup
01:22:02 <shapr> that bites
01:24:42 <shapr> do any implicitly parallel FP lang implementations exist?
01:24:46 <shapr> I bet google knows.
01:25:03 <shapr> I've been following up on http://c2.com/cgi-bin/wiki?AdvantagesOfFp
02:26:33 <shapr> someone just asked me if monads are like a value object in Java
02:26:37 <shapr> I think that's pretty close.
02:29:02 <Logan> A value object?
02:37:00 <shapr> yah, http://c2.com/cgi-bin/wiki?ValueObject
02:37:22 <shapr> Logan: do you grok monads?
02:38:02 <shapr> btw, is the next version of xmms-shell going to allow me to ask for shuffle state and repeat state as part of status or extended status or something? :)
02:38:15 <Heffalump> I don't see what the two have to do with each other at all
02:38:27 <shapr> uh oh
02:38:41 <shapr> um
02:38:59 <shapr> the wormhole effect
02:39:21 <shapr> a value of type M a represents a computation
02:39:31 <Heffalump> in Java?
02:39:38 <Heffalump> oh, sorry
02:39:42 <Heffalump> right, yes
02:39:44 <shapr> which will at some point be able to give you a value of type a
02:40:01 <Heffalump> which will give you a value of type a if you execute
02:40:04 <shapr> right
02:40:29 <shapr> a ValueObject in Java is an object encapsulating a value
02:40:36 <shapr> that seems really similar to me.
02:41:10 * Heffalump completely disagrees
02:41:16 <shapr> tell me more :)
02:41:36 <Heffalump> I just don't see any similarity
02:41:54 <shapr> they both hold a value, right?
02:42:07 <shapr> in the case of a monad, it's the value is a computation
02:42:16 <Heffalump> no, a monadic computation is a computation that if executed returns a value
02:42:26 <Heffalump> errm, yes, but almost anything holds a value in that sense
02:42:34 <shapr> hrm
02:43:18 <shapr> so...
02:43:43 <shapr> well
02:43:52 <shapr> maybe I should go read about monads again then.
02:47:38 <shapr> hi kensanata
02:48:36 <shapr> a value of type M a (monad applied to any type a) represents a computation, which when executed
02:48:49 <shapr> returns a value
02:48:50 <shapr> hrm
02:49:01 <kensanata> hi.  reading http://c2.com/cgi-bin/wiki?OnMonads i got the impression that either a monad is a value object, or a lambda expression.  not sure yet.
02:49:06 <Logan> shapr: It's easy to add.
02:49:14 <kensanata> so what you say now reminds me of a lambda expression.
02:49:23 <kensanata> perhaps generic (depending on parameter type?)
02:49:53 <shapr> the way I see them is like wormholes
02:50:04 <kensanata> shapr: hehe, just saw that you added the question to wards wiki...
02:50:07 <shapr> a monad can 'wormhole' the data to you from a side effect
02:50:17 <shapr> kensanata: yah, seems like a good question :)
02:50:40 <kensanata> what does wormhole/side effect mean in non-jargon?  :)
02:50:49 <shapr> seriously just that
02:50:59 <shapr> a wormhole like in star trek :)
02:51:07 <kensanata> wormhole means nothing to me...
02:51:15 <shapr> it's a transporter.
02:51:17 <kensanata> black holes and all that.
02:51:19 <shapr> bzzzt, tada
02:51:19 <kensanata> ?
02:51:22 <shapr> the value arrives.
02:51:28 <kensanata> i see the light...
02:51:40 <Heffalump> shapr: the algebraic answer to your question would be "how do you implement the monad operations on a ValueObject"
02:51:45 <kensanata> now i suddenly understand!  monads!  bzzzt!  tada!  the value arrives!
02:51:46 <kensanata> :)
02:52:00 <shapr> my technical explanations rock don't they? ;-)
02:52:02 * shapr grins
02:52:09 <kensanata> hehe
02:52:24 <Logan> My very basic understanding of what a monad is doesn't seem to relate to value objects at all.
02:52:33 <shapr> Logan: can you explain what you know?
02:52:36 <Logan> I think you're conflating one of the uses of a monad with what it really is.
02:52:44 <shapr> I believe you.
02:52:47 <Logan> Eh, I don't really know basic category theory.
02:52:53 <Logan> So I confuse the terms a lot.
02:52:53 <kensanata> example: an output stream takes any object and prints them.  this is some sort of action applicable to lots of objects.  is that a monad?
02:53:02 <Logan> And I keep forgetting what a functor is.
02:53:12 <Logan> kensanata: Is what a monad? :P
02:53:15 <Logan> Is an output stream a monad?
02:53:16 <kensanata> i dunno what a functor is, not what conflating is.
02:53:22 <Heffalump> a functor is something that takes types to types, and functions over types to functions over types
02:53:39 <Logan> Conflation is mixing things up.
02:53:48 <shapr> a function to process functions is a functor?
02:53:51 <Heffalump> so the functor F takes the type a to F a, b to F b etc. And it takes functions from a -> b to functions from F a -> F b
02:53:59 <Logan> And a monad is a functor and the two natural transformations?
02:53:59 <kensanata> well i guess then that means i just give up because an idea that takes that long to explain is probably beyond me at this point in time.
02:54:22 <Heffalump> are all monads functors? I can never remember.
02:54:23 <Logan> There are some technical definitions on planetmath.org, but they aren't very enlightening.
02:54:52 <kensanata> anyway, it doesn't seem like anything i'd understand the need for atm.
02:54:59 <Logan> Heffalump: The technical definition I typed up (should've put down my reference) states a monad as a triple of an endofunctor and two natural transformations.
02:55:10 <shapr> kensanata: it's awesome in a purely functional language.
02:55:24 <Heffalump> oh, good point
02:55:29 <shapr> kensanata: Haskell has only single-assignment variables, and recursion is used for loops.
02:55:50 <kensanata> that i understand.
02:55:55 <kensanata> :)
02:55:55 <shapr> kensanata: since you can't have side effects, you effectively can't do input and output
02:56:04 <kensanata> yes.
02:56:11 <shapr> but monads let you do it anyway, and still be purely functional.
02:56:11 <Logan> I've seen monads referred to as triples before.
02:56:40 <Logan> shapr: You can do it without monads too.
02:56:55 <kensanata> shapr: to me that explanation just says that output can be made to look functional in the code, but essentially it is outside of the language (ie. provided by some primitives)
02:56:58 <Logan> It's just a monadic treatment of side-effects seems to be a nicer design.
02:57:44 <shapr> kensanata: I think that's true, input/output does really happen outside of the purely functional bit.
02:57:50 <shapr> that's why I think of wormholes
02:57:55 <shapr> bzzt, tada, there you go.
02:58:00 <Heffalump> shapr: it's not exctly "single assignment", variables are either in scope and have a value or not in scope
02:58:04 <shapr> like microwave pizza or something.
02:58:23 <Heffalump> kensanata: yep (re it being outside the language)
02:58:41 <Logan> Variables are placeholders you can bind values to. :P
02:58:55 <Logan> shapr: You love black boxes. :P
02:59:00 <shapr> I do?
02:59:05 <Logan> Bzzt, tada.
02:59:08 <shapr> oh.. :)
02:59:23 <shapr> I'm just trying to wrap my head around it....
02:59:30 <Heffalump> logan: not really, because there's never a situation where a variable is in scope without a value being bound to it
02:59:34 <Heffalump> (even if that value is bottom)
02:59:35 <kensanata> how do you write new monads then, when the only one we talked about until now is provided as a primitive?
02:59:39 <Logan> Monadic programs don't seem like black boxes to me.
02:59:48 <shapr> Logan: lucky you.
02:59:51 <Heffalump> kensanata: things like the IO monad are provided by primitives
02:59:56 <shapr> I'm a Cargo Cult Monadeer.
03:00:01 <kensanata> haha
03:00:07 <Heffalump> other monads can be implemented purely in the language (e.g. a state monad)
03:00:12 <Logan> I couldn't write a program using any monad until I understand how the monad works.
03:00:26 <Logan> Which means I only know how to use state transformers and this one parser monad I found. :P
03:00:34 <kensanata> Heffalump: how is a state monad different from a value object?
03:00:46 <Logan> A value object is just a container.
03:00:49 <kensanata> yes.
03:00:51 <Heffalump> kensanata: well, a state monad wraps up a piece of mutable state
03:00:54 <Logan> A monad is not really a container.
03:00:58 <Heffalump> a value object doesn't.
03:00:58 <Logan> At least, not for just values.
03:01:07 <shapr> for those who don't know CargoCult : http://c2.com/cgi-bin/wiki?CargoCult
03:01:16 * Heffalump disappears, biab
03:01:21 <Logan> I guess you can think of a state transformer as a container of states.
03:01:45 <kensanata> shapr: i read about the cargo cult in an ethnology encyclopedia a few weeks back.  from 1974...  cool pics!
03:01:51 <shapr> from the the explanation I saw about state monads,
03:02:12 <shapr> it's a way of automating the state passing parameter.
03:02:23 <kensanata> what is a "mutable state"?  sounds like a closure to me...
03:02:24 <shapr> kensanata: I've never seen pix, that sounds nifty.
03:02:37 <shapr> it's just a variable.
03:02:41 <Heffalump> mutable state is just like an imperative variable
03:02:45 <Heffalump> that you can assign to multiple times
03:02:49 * Heffalump really gone
03:03:02 <kensanata> shapr: if it is a variable, then it is a value object.  there must be more to it.
03:03:37 <shapr> yah, it's a purely functional variable
03:03:57 <shapr> the "real" way that state works in Haskell is by explicit passing.
03:04:03 <kensanata> if it encapsulates behaviour ("a transformation") then it is a function.  if it is both, a traditional object.  my problem is i do not see the light.  :)
03:04:19 <shapr> so you pass in the state, and usually get back a state,result pair
03:04:23 <Logan> A state transformer maps a state to a tuple of a state and a value.
03:04:27 <shapr> right
03:04:39 <kensanata> what is the benefit of that?
03:04:44 <kensanata> building state machines?
03:04:55 <Logan> So, out of convenience, you might make an operator <<=, which takes the state and value returned by one state transformer, and passes it to another transformer, thus sequencing them.
03:05:07 <shapr> kensanata: read the arrows explanation here: http://haskell.cs.yale.edu/arrows/biblio.html
03:05:14 <shapr> if you can understand it, you're a smarter man than I
03:05:15 <Logan> Then you realize that your definition of <<= satisfies some monad laws.
03:05:47 <Logan> Er, >>=
03:05:52 <Logan> I always type those the wrong way. :P
03:06:00 <kensanata> shapr: reading the free pdf version
03:06:46 <shapr> kensanata: my brain comes out my ears around the third monad example.
03:07:08 <kensanata> Logan: ok, sequencing state transformation i think i understand.  you could build that using closures, but it is not exactly the same thing.
03:08:28 <shapr> I should really take some math classes some time.
03:20:47 <Logan> I tried that, but I didn't have time or the background to keep up, so I did horribly.
03:21:50 <shapr> aren't you still a student?
03:22:50 <Logan> Yeah.
03:23:15 <shapr> what kind of background do you need to understand category theory?
03:24:02 <shapr> kensanata: can you understand what's going on in the arrows paper?
03:26:39 <Logan> I don't know.
03:26:54 <Logan> Some algebra, I guess.
04:29:07 <kensanata> shapr: went to lunch, came back, stuff is printed now, will read at home...  :)
04:29:13 <shapr> ok :)
04:29:27 <shapr> I'm looking forward to your reactions
04:31:04 <Heffalump> kensanata: most things are built on closures, btw
04:31:09 <Heffalump> (in functional programming)
04:31:21 <Heffalump> so it's not really saying much to say that something could be built using closures
04:32:10 <kensanata> heh, in emacs lisp there are no closures, nor in java, as far as i know.  that's what i am working with.
04:33:48 <Heffalump> you can simulate them in java using inner classes, IIRC
04:39:18 <shapr> not really
04:39:36 <shapr> inner classes can only read final variables
04:39:54 <shapr> I tried it, but it sucks.
04:40:19 <ChoJin> hi
04:40:30 <shapr> hi ChoJin
04:40:32 <shapr> what's up?
04:41:47 <shapr> aha!
04:41:51 <shapr> http://c2.com/cgi-bin/wiki?ClosuresThatWorkAroundFinalLimitation
04:41:54 <shapr> nifty!
04:41:58 <ChoJin> nothing :)
05:13:25 <kensanata> shapr: started reading the first three pages.  the code is hard to grok for me, being a non-haskeller...
05:14:10 <shapr> kensanata: I can explain the code to you pretty simply...
05:14:18 <shapr> at least, I think so :)
05:14:48 <shapr> if you look at page 2
05:15:01 <shapr> hrm
05:15:11 <shapr> add :: Int -> Int -> Int
05:15:23 <shapr> add x y = x + y
05:16:41 <shapr> on the first line, add is the name of the function
05:16:46 <shapr> (types begin with a capital letter)
05:17:28 <shapr> that function takes definition naively takes two Int in and returns one.
05:17:43 <shapr> that's your basic Haskell function
05:17:54 <kensanata> ok.
05:18:01 <shapr> next, classes
05:18:17 <shapr> you make your basic type alias with "type"
05:18:22 <shapr> er, I think that's right
05:18:33 <shapr> right, it is
05:18:50 <shapr> so "type Foo = Int" means you've made an alias
05:18:59 <shapr> it's really just an Int, but now it has a more significant name
05:19:12 <shapr> a class in Haskell is like an interface in Java
05:19:31 <Heffalump> (with some crucial differences that aren't too important right now)
05:19:57 <shapr> but for reasons I don't really understand, you can't define new interfaces for a type alias, you have to use newtype or the other thing that I've forgotten.
05:20:20 <shapr> some useful classes are "Eq" which is for equality
05:20:27 <shapr> and "Ord" for orderable
05:20:37 <shapr> I think Ord is a subclass of Eq btw... not sure about that.
05:20:42 <shapr> in any case..
05:20:43 <Heffalump> yes, it is
05:21:02 <shapr> for my own entertainment I made a Letter class with methods isVowel and isConsonant
05:21:13 <shapr> took me about six lines of code I think
05:21:33 <shapr> that's basically what classes are all about.
05:22:09 <shapr> once you've defined a new class and its methods names and type signatures, then you do instance declarations where you actually define the 'methods' that fill in the 'interface'
05:22:27 <shapr> um, I think that's all you need to know to understand the Haskellisms in that paper.
05:22:31 <kensanata> maybe we should stick to the code example on page 2: how do i "parse" the class Monad m where.... stuff
05:22:46 <Heffalump> that's declaring a type class called Monad
05:22:52 <kensanata> a new type Monad, whose constructor takes a thing called m.
05:22:55 <shapr> it's just like making a class Letter, with methods isVowel and isConsonant
05:23:09 <Heffalump> what it means is that a type "m" is in class "Monad" if you can declare the following functions for type "m"
05:23:16 <kensanata> it provides a method called return, with a parameter a, and calls m (of the constructor) on a.
05:23:21 <kensanata> ?
05:23:35 <kensanata> hm.
05:24:09 <shapr> afaik, yes
05:24:28 <shapr> Monad a gives you a monadized type
05:24:30 <kensanata> so i imagine m to be a function, because in the declaration of return, you call function m with parameter a.  ?
05:25:19 <kensanata> shapr: that last sentence i do not understand.  looks like an endless loop to me.  :)
05:25:23 <shapr> actually, I think it's a type constructor, but I'm not sure how much difference that makes.
05:25:38 <shapr> I wrote a Mandelbrot generator
05:25:40 <kensanata> shapr: ok, now to the >>= "method"
05:25:47 <kensanata> it takes no arguments
05:25:51 <kensanata> what are the brackets for?
05:26:04 <kensanata> the return type -- how is it computed?
05:26:14 <shapr> hm
05:26:18 <shapr> look at the add function above
05:26:23 <kensanata> is this some dereferencing or so?
05:26:29 <shapr> it takes two Ints, and return one Int
05:26:38 <kensanata> yes
05:26:38 <shapr> add :: Int -> Int -> Int
05:27:15 <Heffalump> bah, I can't find my copy of Hughes' paper
05:27:23 <shapr> so a -> m a means "takes something of type a, returns something of type m a"
05:27:30 <shapr> Heffalump: it's online, and free :)
05:27:32 <shapr> want url?
05:27:36 <Heffalump> yeah, but it's quite big to print out again
05:27:44 <Heffalump> and I know I had it
05:27:52 <shapr> oh, I'm using the acrobat version
05:28:05 * Heffalump could do that I guess
05:28:19 <Heffalump> I have more desk space than screen space, though :-)
05:28:19 <shapr> http://haskell.cs.yale.edu/arrows/biblio.html
05:28:23 <shapr> heh
05:28:27 <shapr> I don't use paper.
05:29:17 <Heffalump> and that's not the SCP version
05:29:23 <shapr> the what version?
05:29:52 <Heffalump> Science of Computer Programming, i.e. the final journal version rather than an earlier draft
05:30:14 <shapr> kensanata: afaiu, (>>=) defines a method, and there's no real difference between function and operator in Haskell
05:30:25 <Heffalump> there's none at all
05:30:28 <shapr> er, sorry, (>>=) means the method name is in the parens
05:30:31 <Heffalump> except syntax
05:30:55 * Heffalump starts dying of hunger and goes to find some lunch
05:31:52 <shapr> kensanata: so that means, method of name ">>=" that takes parameters of "m a" and "(a -> m b)"
05:32:28 <shapr> btw, type "(a -> m b)" is a function that takes type "a" and returns type "m b"
05:34:41 <shapr> so the method >>= returns type "m b"
05:35:10 <kensanata> shapr: ah.
05:35:14 <kensanata> interesting
05:36:09 <shapr> more questions?
05:36:38 <kensanata> no more haskell syntax at least...  let me work it out, now.  :)
05:36:41 <shapr> ok :)
05:39:19 <shapr> man I wish I could write this powerpoint thing in Haskell.
05:41:53 * Logan does his slides in latex.
05:42:13 <shapr> no, I mean this presentation builder I'm writing.
06:49:51 <buggmuzz> what the
06:49:54 <buggmuzz> :(
06:49:57 <buggmuzz> that was me
07:02:29 <ChoJin> latex rox
07:02:30 <ChoJin> :)
07:02:40 <ChoJin> a good package to make slide is "foiltex"
07:06:03 <shapr> I'm making a very simple slide builder kind of app
07:06:05 <shapr> writing it in Java
07:06:11 <shapr> wish I could do it in Haskell instead.
07:06:20 <ChoJin> :)
07:06:38 <ChoJin> why are you writting this ?
07:06:57 <shapr> my boss said "write this"
07:07:02 <shapr> so...
07:07:02 <shapr> I'm writing.
07:07:53 <ChoJin> :))
07:08:45 <kensanata> think of the money...
07:09:15 <shapr> I am thinking of the money.
07:09:21 <shapr> but it's not helping ;-)
07:11:56 <ChoJin> ask women instead of money ;)
07:12:50 <Logan> ChoJin: That's what I use.
07:13:16 <Logan> Money doesn't motivate me as much as I'd wish it would. ):
07:13:50 <Logan> But I'm starting to find a bit of ambition for reputation. :P
07:16:27 <ChoJin> Logan: are you the same logan from efnet ? :)
07:19:37 <Logan> No, I don't spend much time on efnet because it's a pain in the ass.
07:20:42 <ChoJin> :)
07:21:50 <shapr> Logan: programming gets you women??
07:22:16 <shapr> this I gotta hear
07:25:22 <Logan> Where'd women get into this conversation?
07:36:44 <buggmuzz> lol.
07:44:59 <shapr> oh, reputation
07:45:00 <shapr> not women
08:00:19 * shapr bounces
18:19:15 <zNaDuL> hi
18:19:52 <zNaDuL> somepeople here?
18:21:20 <clausen> yep
18:21:36 <zNaDuL> hi
18:22:06 <psychopc> hi
18:22:07 <zNaDuL> seras mamon XD
18:22:10 <psychopc> XDDD
18:22:19 <zNaDuL> bueno tu k tu dominas
18:22:21 <zNaDuL> pregunta
18:22:27 <psychopc> lol
18:23:08 <clausen> lo que es "mamon"?
18:23:22 <psychopc> can somebody help us with a simple haskell program?
18:23:29 <clausen> probably...
18:23:30 <clausen> ask~
18:23:30 <clausen> !
18:23:39 <psychopc> mamon is like asshole
18:23:44 <psychopc> ;-)
18:24:11 <clausen> hehe
18:24:16 * clausen looks for his es dictionary
18:24:57 <psychopc> well the first thing is after a do sentence this return is invalid?
18:25:04 <psychopc> return (q : "ss") 
18:25:14 <psychopc> is an ok return sentence?
18:26:01 <clausen> I think so... depends on the type of course
18:26:22 <psychopc> do you mind if i paste 6 lines of code in private ?
18:26:51 <zNaDuL> plz take ftp://80.24.82.41/upyours.hs
18:27:00 <zNaDuL> is the program
18:27:02 <psychopc> lol
18:27:12 <psychopc> lazy guy
18:30:24 <clausen> what's Parser?
18:30:28 <clausen> (got a URL?)
18:30:42 <zNaDuL> type in ParseLib i think
18:30:52 <zNaDuL> i dont know
18:31:11 <zNaDuL> is for university practice
18:31:22 <zNaDuL> and we are too greens ;)
18:31:24 <psychopc> from parselib: newtype Parser a   = P (String -> [(a,String)])
18:31:45 <clausen> hmmm, so there aren't any monads at all
18:31:51 <clausen> you don't use "return"
18:32:21 <psychopc> code4 :: Parser
18:32:22 <psychopc> code4 = do dd <- code3
18:32:22 <psychopc>            do dde <- code3
18:32:22 <psychopc>                digit
18:32:22 <psychopc>                ddd <- many (do digit)
18:32:22 <psychopc> 	       q <- code5
18:32:24 <psychopc> 	       return (q : "ss") 
18:32:25 <clausen> oops, P might be...
18:32:27 <psychopc> sorry 
18:32:34 * clausen didn't notice that
18:32:37 <clausen> what's the definition for P?
18:32:39 <psychopc> ;-)
18:33:03 <clausen> I don't really know much about that stuff... I shoud though ;)
18:34:03 <psychopc> hehe
18:34:15 <psychopc> at least you understand monads
18:35:09 <psychopc> the error i get now, i have fixed some thing on the file you got, is in the code i pasted
18:35:17 <psychopc> y think is the return or something
18:35:28 <psychopc> mm
18:36:03 <psychopc> it says the do must finish with an expression
18:36:36 <clausen> what's the type of your nested do?
18:36:50 <clausen> (what are you nesting the do?)
18:38:12 <psychopc> mm i dont know if i understand you but we are reading and maniputating characters from a strig
18:39:16 <clausen> it doesn't make any sense to nest "do"
18:39:37 <clausen> on the third line of cut&paste...
18:39:48 <clausen> (when I say type, I mean "type signature")
18:40:21 <psychopc> i have tryed that
18:40:30 <psychopc> same error
18:40:59 <clausen> huh?  I didn't give you a suggestion, I was asking you a question
18:41:27 <psychopc> the code is intentionally bad coded
18:41:40 <psychopc> i dont know what it makes
18:41:46 <psychopc> i have only to fix it
18:41:47 <psychopc> lol
18:42:31 <psychopc> sorry if i cant explain myself better i have dicovered this language just an hour ago
18:42:40 <clausen> ah, ok
18:42:45 <clausen> that's REALLY heavy!
18:42:52 <psychopc> lol
18:42:53 <clausen> I mean, this is non-trivial stuff, monads...
18:43:20 <psychopc> i now iknow i tied to understand the monads but i failed
18:43:23 <psychopc> so i came here
18:43:25 <psychopc> hehehe
18:44:03 <clausen> anyway, it's a mess
18:44:04 * clausen looks
18:44:31 <clausen> try removing the "do"
18:44:39 <clausen> and re-indenting
18:44:44 <clausen> i.e. making everything line-up
18:44:58 <clausen> (indentation is important in haskell)
18:45:57 <psychopc> same error
18:46:21 <psychopc> error on: ddd <- many (do digit)
18:46:40 <psychopc> The last statement in a 'do' construct must be an expression
18:51:05 <clausen> which function?
18:51:17 <clausen> ah
18:51:18 * clausen rewrites
18:51:56 <clausen> code4 :: Parser
18:51:57 <clausen> code4 = do dd <- code3
18:51:57 <clausen>            dde <- code3
18:51:57 <clausen>            digit
18:51:57 <clausen>            ddd <- many (do digit)
18:51:57 <clausen>            q <- code5
18:51:59 <clausen>            return (q : "ss")
18:53:33 <psychopc> mm what is the meaning of (q : "ss") ?
18:53:47 <psychopc> q++"ss" ?
18:54:21 <clausen> [q] ++ "ss"
18:54:26 <clausen> q has to be a character
18:54:27 <psychopc> ok
18:54:30 <psychopc> yes
18:54:45 <clausen> basically, strings are [Char]
18:55:02 <clausen> : is the list constructor
18:55:14 <clausen> (well, : and [] are the two lis constructors)
18:55:34 <clausen> think of it like this:
18:55:45 <clausen> List a = a : (List a) | []
18:56:06 <clausen> or perhaps:
18:56:09 <clausen> [a] = a : (List a) | []
18:56:16 <clausen> data [a] = a : (List a) | []
18:56:50 <psychopc> lol, thin language has a very diferent notattion of all the languages i have seen before
18:57:09 <psychopc> thin =this 
18:57:14 <psychopc> =)
18:57:48 <clausen> yeah, haskell is quite different from most languages
18:57:57 <clausen> that's why I'm surprised you've been given such a tough assignment
18:58:07 <clausen> I think it's cool stuff, but there's a learning curve...
18:58:50 <psychopc> yes, i know i am reading the tutorials on the net
18:59:30 <psychopc> and i have to read some paragraphs three times
18:59:34 <psychopc> hehehe
