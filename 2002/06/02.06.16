00:04:58 <hornby> Hrmph. 
05:51:26 <shapr> hiya
05:51:34 <Heffalump> hi there
05:51:41 <shapr> anything exciting happen while I was gone?
05:51:54 <Heffalump> when did you go?
05:51:59 <shapr> :-P
05:52:03 <Heffalump> my computer broke
05:52:07 <shapr> oh, that sucks
05:52:08 <Heffalump> which was fun
05:52:08 <shapr> what happened?
05:52:22 <Heffalump> not sure. I think the PSU conked out, and possibly the mobo with it.
05:52:42 <shapr> ouch
05:52:47 <Heffalump> I've resurrected it by moving the hard disks into a spare system unit my girlfriend has but wasn't using
05:52:57 <shapr> cool :-)
05:53:03 <shapr> you borrowed hardware from your woman
05:59:51 <shapr> I did that for years
05:59:56 <shapr> until I could afford my own.
06:00:41 <shapr> so the reason I thought HOpenGL was broken was that I expected it to work in ghci
06:00:50 <shapr> but alas, it's a compile only kind of thing
06:00:56 <shapr> :-(
06:01:05 <shapr> I've heard the same is true of HaXML
06:07:26 <shapr> I'd like to write a "consumeUntil" function that works like takeWhile, except it takes one more
06:07:47 <shapr> and I want it to work the same on lists and IO streams
06:07:50 <shapr> is that possible?
06:08:38 <shapr> obviously consumeUntil is possible
06:08:49 <shapr> but what about something that works the same way on lists and IO streams?
06:09:03 <Igloo> What do you mean by an IO stream?
06:09:06 <shapr> I want it to work on lists because I'm trying to do unit test first stuff
06:09:16 <shapr> an IO stream like a socket or a file
06:09:37 <shapr> this is my first real attempt to do something useful with Haskell, so I could be *way* off with my thinking
06:09:58 <Igloo> I think you should be able to write a list version and then use liftM to use it on the IO stream
06:10:05 <shapr> ok
06:10:33 <shapr> is there a better way to fake an IO stream for testing purposes?
06:10:52 <Igloo> Or just do foo <- getContents; whibble (consumeUntil whatever foo) inside a do
06:10:55 <shapr> in Python I have StringIO, which lets me pretend a string is a file or socket, etc
06:11:05 <Igloo> foo :: IO String
06:11:20 <Igloo> foo = return"whatever"
06:12:00 <shapr> that brings me to a basic question...
06:12:36 <shapr> I tried to write consumeUntil as (\condition list -> takeWhile condition list ++ take 1 list)
06:12:57 <shapr> and with consumeUntil (==5) [1..9]
06:13:00 <Igloo> But that will give you the original head
06:13:03 <shapr> right
06:13:06 <shapr> so
06:15:39 * shapr thinks
06:15:39 <Igloo> Try using break and getting the rest from the snd
06:15:39 * shapr looks up break
06:15:39 <Igloo> It has a dual and I may have told you the illogical one to use
06:15:39 <Igloo> But I can't remember the name of the other one
06:15:39 <Igloo> Oh, span maybe
06:15:39 <shapr> yah, they seem to be opposites
06:15:39 <shapr> or something like that
06:15:39 <shapr> does break work with infinite lists?
06:15:45 <shapr> and with IO streams?
06:15:48 <shapr> is there a better name for IO streams?
06:15:56 <shapr> what do you call them in the Haskell world?
06:16:26 * shapr tests
06:17:29 <shapr> cool, break is the right one, and it works fine with infinite lists
06:17:31 <Igloo> It works with infinite lists, yes, but not directly on IO streams
06:17:44 <shapr> right, I'll have to lift it
06:17:48 <Igloo> And dunno - IO [a] if I was typing it
06:19:13 <shapr> good point, it makes more sense to describe things by their type in the Haskell world
06:26:38 <shapr> I was thinking there should be a Reversible type class
06:27:13 <shapr> so you could do stuff like unapply :: Reversible => (a -> b) -> [c]
06:28:18 <shapr> or unmap
06:28:28 <shapr> does that already exist?
06:32:39 <Heffalump> (a -> b) -> [c] makes no sense to me
06:32:45 <Heffalump> where did c come from?
06:32:53 <Heffalump> and what was a member of Reversible?
06:37:44 <shapr> err
06:38:01 <shapr> reverse :-)
06:39:02 * shapr thinks about that type signature again
06:40:10 <shapr> the function to undo reverse is itself
06:41:23 <Heffalump> and what's the function to undo tail?
06:41:32 <shapr> I don't think there is one
06:41:42 <Heffalump> yet it has the same type signature as reverse
06:42:05 <Heffalump> so any type class based definition of "reversible" is going to be in trouble
06:42:18 * shapr thinks about that
06:44:24 <shapr> seems that there would be derived type classes, AutoReversible and Reversible
06:44:43 <shapr> AutoReversible would mean the function applied twice undoes itself
06:45:18 <shapr> Reversible would mean there is a separate function that undoes it
06:45:51 <Heffalump> ok, and where would this function fit in? 
06:45:57 <Heffalump> rotate [] = []
06:45:58 <shapr> I'm thinking about that :-)
06:46:07 <Heffalump> rotate (x:xs) = xs ++ [x]
06:47:07 <shapr> unrotate xs = last xs ++ init xs
06:48:04 <Heffalump> sure, but what type class would it go in? Reversible, presumably?
06:49:11 <Heffalump> and what will the definition of Reversible look like?
06:51:25 * shapr thinks
06:54:58 <shapr> you can only add types to classes not specific functions.
06:55:01 <shapr> I see.
06:56:20 <shapr> that sucks :-)
06:56:26 <shapr> there must be some way to do this
06:59:09 <shapr> I could probably cheese my way around it with a newtype definition that requires the apply and unapply functions to be given in the constructor
06:59:16 <shapr> I wonder if that would work
07:00:08 <Heffalump> well, then they wouldn't need to be in the constructor, they could be in an instance declaration
07:00:24 <Heffalump> you could have class Reversible a b where 
07:00:29 <Heffalump> apply :: a -> b
07:00:32 <Heffalump> unapply :: b -> a
07:00:45 <Heffalump> and then newtype Reverse a = [a]
07:01:01 <Heffalump> instance Reversible [a] (ReverseList a)
07:01:09 <Heffalump> s/Reverse/ReverseList/ above
07:01:14 <Heffalump> where 
07:01:17 <Heffalump> apply = reverse
07:01:20 <Heffalump> unapply = reverse
07:01:28 <shapr> oh cool
07:01:29 <shapr> I see
07:01:30 <Heffalump> oh, with the appropriate constructor wrapping and unwrapping
07:01:39 <Heffalump> and a constructor in that newtype above
07:04:41 <shapr> now I'm not sure when it would be useful....
07:04:53 * Heffalump neither, TBH :-)
07:04:58 * shapr laughs
07:05:08 <Heffalump> possibly as part of a larger GUI system that supported undos
07:05:12 <shapr> fun thought experiment though
07:05:13 <shapr> oh!
07:05:16 <shapr> that's true!
07:05:40 <shapr> you could even compose large chunks of reversible actions and be sure that they could be undone
07:05:44 <shapr> also..
07:06:08 <shapr> you could derive Reversible instances manually by just saving the input before it's transformed
07:06:16 <shapr> like the undo stack in emacs
07:07:08 <Heffalump> you'd have to use unsafePerformIO to do that
07:07:14 <Heffalump> unless you changed the type class to be
07:07:41 <Heffalump> something like
07:07:45 <Heffalump> apply :: a -> m b
07:07:50 <Heffalump> unapply :: b -> m a
07:07:59 <shapr> why?
07:08:02 <Heffalump> where m was some monad, perhaps specified globally or added to the the type class parameteres
07:08:06 <Heffalump> s/eres/
07:08:17 <Heffalump> well, where would you store the input otherwise?
07:09:17 <shapr> oh
07:09:18 <shapr> of course
07:17:21 <shapr> well, grocery time
07:17:39 <shapr> j'ai besoin de manger
07:18:19 <hornby> J'ai en a besoin a manger? 
07:18:47 <hornby> no thats sounds horrible
07:19:23 <hornby> Heh, that looked like happily :: a -> m b , unhappily a -> m b
07:39:32 * Heffalump fails to translate "j'ai en a besoin a manger" - something like "I need to something to eat" but obviously not quite that
07:57:50 <shapr> s'okay, my french is pretty bad
07:58:34 <shapr> oh, I realized while I was shopping that the second type class is not Reversible, it's Undoable, which is derived from Reversible.
08:30:11 <shreya> what's life like in finland
08:30:13 * shreya wonders
08:30:21 <shreya> is world cup like really big over there?
08:30:39 <Heffalump> it's big here :-)
08:31:58 <shreya> ahh
08:32:00 <shreya> hehe
08:32:03 <shreya> im going for england too!
08:33:04 <Heffalump> cricket's going well for us for once too :-)
08:34:31 <dennisb> ...sweden lost today...
08:35:49 <shreya> yeah, defeated by senegal, pretty exciting match
08:36:07 <shreya> that first goal
08:36:08 <Heffalump> serves you right for coming top in the group :-)
08:36:09 <shreya> was so good
08:36:39 <dennisb> well, the match was not so good, after the goal sweden stoped to play.. It's a sad day
08:37:08 <Heffalump> we didn't really deserve to beat Denmark 3-0, I'm fairly sure we'll get thrashed by Brazil
08:37:17 <shapr> shreya: life in finland is a lot like life in the US, except that the World Cup isn't so popular in the US
08:37:49 <shapr> the major differences I've seen is that scandinavian cultures come from a different branch of the cultures tree
08:37:58 <shapr> so the basic social assumptions are far different
08:38:37 <dennisb> well, finland didn't make it to the world cup while usa did
08:38:40 <shapr> what's life like in .au?
08:38:48 <shapr> hah, another difference between .fi and .us
08:39:30 <dennisb> still, it's more popular in finland even without a team competing
08:39:39 <shapr> I'm not much of a sports fan myself, of any kind.
08:40:14 <shapr> well, I like participating, but watching doesn't interest me so much.
08:46:37 <shapr> from what I've read and heard about .au, the australian sarcasm is often offensive in other cultures.
08:47:05 <shapr> it's perceived as being way too truthful in a polite social situation.
08:47:15 <shapr> shreya: you know anything about that?
08:53:32 <Heffalump> English sarcasm tends to be more subtle than Australian sarcasm
08:53:42 <Heffalump> if anything I'd say Australians tend to be blunt rather than sarcastic
08:53:57 <shapr> maybe it looks like sarcasm from my American viewpoint.
08:54:25 <Heffalump> I was about to say that it's generally Americans who find Australians hardest to deal with :-)
08:54:30 <jewel> ireland lost to spain
08:54:37 <Heffalump> jewel: yeah :(
08:54:41 <shapr> Heffalump: really? I think aussies are great fun to hang out with.
08:54:41 <jewel> which is good
08:54:46 <jewel> less jubilation to deal with
08:54:50 <Heffalump> shapr: but IME Americans aren't very good at dealing with any culture other than their own
08:54:59 <shapr> though I've been accused of being more European than American.
08:55:14 <shapr> Heffalump: I think that's true.
08:55:17 * Heffalump tends to separate Americans into two categories - typical and intelligent :-)
08:55:20 <shapr> hah!
08:55:36 <jewel> hehe
08:55:36 <shapr> I think every country/place/etc  has those two categories.
08:55:45 <Heffalump> hmm, possibly actually :-)
08:55:59 <shapr> I spent most of my spare time in college either at my computer, or at the international house...
08:56:42 <shapr> since I was usually the token american at the ihouse, I was not impressed by the friendliness of the other million people in that city.
08:57:29 <shapr> it was great fun, I learned a few words and some basic structure of many different languages
08:58:33 <shapr> I got to see a representation of Ganesh and friends in a temple
08:58:36 <shapr> that was impressive.
08:59:40 <shapr> Heffalump: I have wondered in the past if your irc nick is related to your first name in that manner.
09:00:21 <shapr> ah well, back to work.
09:15:13 <Heffalump> it is sort of, yes
09:15:27 <shapr> cool
09:32:06 <shapr> hm, how do I cast Int to Integer?
09:32:14 <Igloo> fromIntegral
09:32:28 <shapr> ohh
09:32:29 <shapr> right
09:32:35 <Igloo> Or toInteger, in fact
09:32:44 <shapr> really?
09:32:44 <shapr> cool
09:32:51 <Igloo> Given I suspect fromIntegral = toInteger . fromInteger  :-)
09:33:05 <shapr> hmm
09:33:13 <Igloo> (all from memory - I hope these are all in H98)
09:33:37 <shapr> is there some way to compare functions for equal behaviour other than test cases?
09:34:13 <shapr> basically, can I ask for define 'subfunctions' of a given function?
09:34:16 <Igloo> No, provably
09:34:31 * Igloo didn't follow that
09:34:32 <shapr> something like "decompose fromIntegral" to get toInteger and fromInteger ?
09:35:02 <Igloo> Nope
09:35:31 <shapr> hm
09:36:44 <Igloo> What type would you want it to have, OOI? (a -> b) -> ((a -> c), (c -> b))?
09:37:23 <shapr> hm
09:37:44 <shapr> I'm thinking about the introspective abilities of Haskell
09:38:23 <Heffalump> ah, what you want for that is reflection.
09:38:29 <Heffalump> Which Haskell doesn't have but IMO sorely needs.
09:38:36 <shapr> yah, I also think so.
09:39:57 <Heffalump> it's a bit tricky though, since it's (generally) a compiled language
09:40:20 <shapr> if there's some way to compare behaviour or functionality, I'd like to see each of the prelude functions as "vocabulary" and ask for a function defined in terms of Prelude functions
09:40:32 <shapr> does that make sense?
09:41:48 <Igloo> Equivalence of functionality of lambdas is undecidable
09:42:08 <shapr> unless you decompose it down to S and K, and compare it there
09:42:43 <shapr> well, dennisb said S and K can be built from X
09:42:44 <shapr> so...
09:42:46 <Igloo> But there are multiple ways of writing the same function
09:42:50 <shapr> so get the simplest
09:43:04 <Igloo> How do you do that?
09:43:25 <shapr> there are multiple ways of compiling each program, how do you find the simplest?
09:43:39 <Igloo> huh?
09:44:20 <Heffalump> igloo: what's the simplest proof that equality of functions is undecidable?
09:44:52 <shapr> I think equality of functions is decidable in a purely functional language
09:45:07 <shapr> that is, if it's true that you can decompose everything down to the X combinator
09:45:21 <Igloo> I suspect it involves (\x -> x x x) (\x -> x x x)
09:45:56 <Igloo> and possibly normal forms
09:46:47 <Igloo> But the lambda calculus course was aaages ago  :-)
09:47:33 <shapr> can Haskell really be expressed entirely in terms of the X combinator?
09:47:51 <Igloo> Well, it's Turing complete...
09:48:06 <shapr> if so, are there combinations of X that cannot be compared for equality?
09:48:19 <shapr> geez I need to take a math course sometime.
09:48:34 <shapr> I'm scared to think of how many years of math I'd have to take to get to the interesting stuff though.
09:48:51 <shapr> I think I will register for a math degree in Lulea rather than a CS degree.
09:48:56 <Igloo> You could not define a function that would always, in finite time, tell you if 2 given inputs were equivalent
09:49:21 <shapr> sounds fair to me, but can you define one that would do it most of the time?
09:49:55 <Igloo> You could make one that would do it for all functions that had a normal form I suspect
09:50:26 <shapr> can you easily find the existence or lack of a normal form of a function?
09:50:36 <Igloo> No, that's undecidable
09:50:47 <shapr> that sounds like the important point then.
09:51:03 <shapr> if you define a function in Haskell, is that a normal form?
09:51:16 <Igloo> If you think about the function above you never know if reducing it one more time is going to result in something that can not be reduced further
09:51:24 <Igloo> No
09:51:56 <Igloo> A normal form in this sense is a lambda expression that can't be simplified
09:52:21 <Igloo> (someone shout if I start talking rubbish)
09:52:39 <shapr> not like I have any idea whether you're talking rubbish or not :-)
09:52:57 <Igloo> :-)
09:57:31 <shapr> are we talking about term reducing logic?
09:58:02 <Igloo> Dunno
09:58:22 <shapr> someone wrote an atom finder in Joy in the last coupla months
09:58:27 <shapr> er, no, last six months
09:58:48 <shapr> he said it's a brute force function decomposer
09:59:17 <shapr> he found several sets of two combinators that can be used to write the rest of Joy
10:00:18 <shapr> It occurred to me that I'd like to write a language in terms of the single combinator X, and also give it the ability to replace certain combinations of logic with binary supercombinators written in C or something
10:00:47 <shapr> that way you could port the language to new hardware/software/etc as fast as you can rewrite X
10:01:12 <shapr> and you can still make it as fast as you want with binary replacements for bits that need to be fast.
10:04:47 <shapr> I wonder if that would work.
11:32:46 <shapr> hm
15:00:43 * shapr sighs
