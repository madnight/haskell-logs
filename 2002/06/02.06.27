00:02:19 <toomas> shapr, that /page didnt work, so i popped by to say hi :)
01:46:45 <shapr> whoops
01:48:05 <shapr> goood morning!
03:17:26 * shapr bounces
03:17:56 <Heffalump> morning
03:22:45 <shapr> hi Heffalump
03:22:46 <shapr> what's up?
03:27:47 <Heffalump> not much
03:28:03 <shapr> I'm still doing bit twiddling
03:32:39 <shapr> isn't there a way to do lazy composition?
03:46:43 * shapr boings
04:02:04 <Heffalump> lazy composition??
05:12:23 <pertsa> can every C (imperative language) algorithm be implemented in Haskell (functional language) without affecting the asymptotic running time?
05:12:37 <Igloo> No
05:12:42 <pertsa> :(
05:13:04 <pertsa> is there some upper bound for the ratio of the running times?
05:13:15 <Igloo> Well, possibly, if you allow yourself to use Arrays
05:13:37 <pertsa> so the answer is no in general, but yes in haskell?
05:13:48 <Igloo> It might be log n - interesting question
05:14:02 <Igloo> I would have to think about that
05:14:57 <Igloo> Oh, yes, if you can use arrays you can interpret C as asymptotically fast as hardware
05:15:35 <pertsa> thanks. i haven't reached the chapter 13 (Arrays) yet :)
05:15:38 <Igloo> Which would mean log n is right for the upper bound of the ratio too
05:15:55 * Igloo wonders if Heff agrees with this
05:16:40 <pertsa> is the idea to emulate arrays with some binary-tree structure?
05:16:48 <Heffalump> http://web.comlab.ox.ac.uk/oucl/work/oege.demoor/papers/jfphaste.ps.gz is of some relevance to the question
05:16:49 <Igloo> Yup
05:16:59 <Heffalump> igloo: makes sense to me
05:17:52 <Heffalump> I'm not sure that anyone's found an example of something that must be asymptotically slower in a /lazy/ pure functional language than an imperative one, though
05:20:20 <Heffalump> but I'd strongly suspect things do exist
05:49:10 * shapr thinks about lazy composition
05:50:01 <shapr> I'm reading the haskell report, section 6.2 about strict evaluation
05:50:18 <shapr> they say that the $ operator may appear redundant, but is not
05:50:50 <shapr> they say that it can be substituted for parentheses in certain situations, which I understand
05:51:06 <shapr> but they also mention "useful in higher order situations"
05:51:16 <shapr> "It is also useful in higher-order situations, such as map ($ 0) xs, or zipWith ($) fs xs"
05:51:30 <shapr> that I don't understand.
06:05:20 <Heffalump> $ acts as an operator in a way that space doesn't
06:05:40 <Heffalump> zipWith ($) fs xs applies the first element of fs to the first element of xs, etc
06:05:44 <shapr> ohhh
06:05:49 <Heffalump> you couldn't write zipWith ( ) fs xs, it wouldn't make sense
06:05:50 <shapr> I think I get that
06:05:59 <shapr> it's an explicit apply operator
06:06:02 <Heffalump> yep.
06:06:08 <shapr> like the built-in apply() in python
06:06:17 <shapr> but you don't have that in Haskell because a space means apply
06:06:25 <shapr> whereas, in Joy, a space means concatenate
06:07:08 <shapr> in Joy, the period means apply, and usually touches off a cascade of operations.
06:07:21 <shapr> Joy has improved my understanding of Haskell.
06:20:12 <shapr> I can't figure out how to use maxBound
06:20:19 <shapr> I realize I'm missing something obvious....
06:20:52 <Heffalump> it's just a value
06:21:20 <shapr> for some reason I can't get it to Show in ghci
06:26:49 <shapr> Heffalump: famous last words
06:31:26 <shapr> sometimes, this picky type system gets frustrating
06:32:12 <Heffalump> it's not really picky, it's stopping you doing things that don't make sense
06:32:22 <shapr> yah, I agree.
06:32:26 <Heffalump> there are cases where it does stop you doing things that actually are useful, but I don't think you're running into any of them atm
06:32:29 <shapr> it's just sometimes frustrating.
06:33:41 <shapr> with the NumExts ghc module, I can turn any Int into a 'bitstring' with: showIntAtBase 256 chr myInt ""
06:33:48 <shapr> thing is, it doesn't work with Integer
06:33:59 <shapr> I think that's because chr only takes Int
06:34:16 <shapr> strangely, chr 4096 gives '\4096' which I find surprising.
06:34:27 <shapr> has that something to do with unicode?
06:36:14 <Heffalump> no idea, sorry
06:36:31 <Heffalump> hugs gives an error if you try
06:37:03 <shapr> I've noticed programming works fine when I really know what I want to do.
06:37:22 <shapr> much of the development process is just getting to the point of really understanding what I want to do.
06:41:04 <Igloo> Given linx-gw1.ja.net is on my (successful) traceroutes I doubt LINX has completely died
06:41:27 <Heffalump> no, but it appeared to have at the time I said that
06:43:01 <Igloo> Ah, OK
06:51:18 <shapr> is there some way I can make sure a function only gets eight character strings as input?
06:51:27 <shapr> or does that mean I'm thinking procedurally? :-)
06:51:52 <Igloo> You could pattern match with [a,b,c,d,e,f,g,h]
06:52:02 <shapr> good point
06:52:09 <Igloo> (and preferably have another case foo _ = error "Not 8 chars")
06:52:27 <shapr> thanks, I'll try that.
06:52:27 <Igloo> Or you could use a guard  foo s | length s == 8 = whatever
06:52:49 <shapr> hm, I like that one.
06:52:49 <Igloo> But that has performance inssues if you have a really long String
06:53:06 <Igloo> (Haskell needs a Nat type)
06:53:12 <shapr> at the momemt, functionality is topmost in my mind.
06:53:18 <shapr> performance comes after everything works
07:18:51 <Heffalump> igloo: pattern matching would have performance issues too
07:18:55 <Heffalump> it doesn't work by magic, you know :-)
07:19:29 <Igloo> It would only evaluate the list structure up to the 8th level
07:19:32 <Igloo> 9th level
07:20:24 <Heffalump> oic.
07:20:28 <Heffalump> point
07:20:53 <Heffalump> I was thinking that you meant if 8 was changed to a large number
07:22:25 <Igloo> The second one will always be worse, particularly if you pass it an infinite list  :-)
07:22:38 <Igloo> lengthAtMost would be easy to write, though
07:22:52 <Igloo> Ermmm, or even lengthExactly, which is what is wanted
07:23:31 <Heffalump> igloo: :-)
07:23:37 <Heffalump> yeah.
08:16:43 * shapr grumbles
08:18:08 <Igloo> No, shapr bounces
08:18:20 <shapr> at the moment, grumbly
08:18:25 <Igloo> :-(  Wassup?
08:18:32 <shapr> I've finally discovered the sticking point here
08:18:33 <Heffalump> has anyone ever actually tested whether shapr really does bounce?
08:18:54 <shapr> Heffalump: I've had the nickname Tigger from people who hang out with me IRL
08:18:55 <Igloo> I will investigate if you provide me with suitable transportation
08:19:03 <shapr> hah :-)
08:19:09 <Heffalump> hmm, I think we'll just take shapr's word for it :-)
08:19:19 * Heffalump calls upon Igloo to confirm that Heffalump does bounce, though
08:19:20 <shapr> well, next time I'm in .uk
08:19:35 <Igloo> Heffalump bounces.
08:19:43 <shapr> the sticking point that I've found is that "floatDigits (1.0 :: Double)" returns 53
08:19:52 <shapr> ieee754 mantissa has 52 bits
08:20:10 <Heffalump> Prelude> floatDigits (1.0 :: Double)
08:20:10 <Heffalump> 24
08:20:14 <Heffalump> (in hugs)
08:20:22 <shapr> that's odd
08:20:32 <shapr> very odd
08:20:44 <Heffalump> I think the numeric support in hugs might be known to violate the standard, actually
08:20:47 <shapr> what does decodeFloat (1.0 :: Double) give you?
08:21:01 <Heffalump> Prelude> decodeFloat (1.0 :: Double)
08:21:01 <Heffalump> (8388608,-23)
08:21:07 <Igloo> Float and Double are the same in hugs IIRC - can't remember which they are, though
08:21:24 <shapr> sounds like they're not double precision
08:21:28 <shapr> in any case,
08:21:54 <shapr> it looks like ghc is sticking the sign bit into the mantissa somewhere
08:22:00 <shapr> since the exponent appears to be correct
08:22:45 <shapr> so I've cast bit strings from both Python and GHC into int lists
08:22:53 <shapr> ([7,116,0,0,0,0,0],[23,116,0,0,0,0,0])
08:23:48 <shapr> if you do: showBin 23 ""
08:24:15 <shapr> that 53rd bit is on, and at the the front of the Integer
08:24:19 <shapr> dunno why.
08:24:43 <shapr> I would think it's an included sign bit, except that it's on for positive numbers.
08:25:17 * shapr goes off to shower and think about it
08:25:45 <shapr> showers usually give inspiration to get around brick walls in programs :-)
11:57:31 <Igloo> Which do people prefer, "IO()" or "IO ()"?
12:02:10 <hornby> I like IO ()
12:02:12 <hornby> But thats just me
12:03:16 <Igloo> I think I agree, but my hands seem to prefer typing IO()
12:07:13 <hornby> then do that, and do a giant s// at the end
12:08:08 <Igloo> :-)
12:08:39 <Igloo> I've just decided I ought to pick one to standardise on as which I use depends on whether I'm thinking or just typing
12:09:06 <hornby> Hm. 
12:09:31 <hornby> I would hope that when you were writing code, you'd always be thinking :)
12:36:05 <Dalroth> man, I'm only a green! :(
12:36:06 <Dalroth> http://home.nc.rr.com/muppetsongs/songs/bein_green
13:10:50 * Heffalump likes IO ()
13:11:13 <Heffalump> because a space is normal for applications
13:11:56 <Igloo> *nod*
13:12:31 <Igloo> Hmmm, there's no way to make a datatype you never make an instance of without getting warnings, is there?
13:12:53 <Igloo> (well, without not using -Wall)
13:13:59 <Heffalump> why do you have such a datatype?
13:16:00 <Igloo> It's an ncurses thing I pass around
13:16:00 <Igloo> And the LINX (probably) just broke again
13:16:28 <Igloo> Ah, better now
13:18:12 <Heffalump> "pass around"?
13:19:21 <Igloo> It returns them when you make windows and you pass it to other functions to tell them what window to operate on
13:20:47 <Heffalump> OIC, it warns that you never make an instance of it even if you make use of it in other ways?
13:21:27 <Igloo> It's warning me the data constructor is never used
13:21:34 <Heffalump> right
13:21:40 <Heffalump> so how do you get objects of the type?
13:21:50 <Igloo> I ask ncurses for them
13:22:06 <Heffalump> and that puts in the constructor too?
13:23:43 <Igloo> It's just a Ptr to something - the value is irrelevant. The only reason for the datatype is so the typechecker can keep an eye on things
13:24:14 <Heffalump> so do you end up with a value that if you ever tried to pattern-match on would break things?
13:26:37 <Igloo> I suspect the impossible would happen
13:26:52 <Igloo> But it's not exported so you can't do that
