00:08:39 <shapr> ok, so I fixed that part
00:09:07 <shapr> I wrote a Python script to link all the *.o files in each subdir, and then link all the *.o files in this dir
00:09:24 <shapr> so, now I have a massive .o file, and I'm not sure where to put it.
00:10:31 <shapr> wow
00:10:35 <shapr> I got ghci to explode.
00:10:41 <shapr> nifty
01:20:08 <shapr> well, gtk2hs compiles and runs happily
01:20:45 <shapr> aha
01:21:06 <shapr> HOpenGL does work!
01:22:40 <shapr> awesome
01:37:06 <shapr> cool, haskell gtk+hs can embed mozilla
01:39:55 * shapr bounces
01:40:52 <shapr> arg, nearly every haskell thing craps out with make -j2
01:42:54 <Heffalump> shapr: really? coool. (re embedding mozilla)
01:43:08 <shapr> yah, gotta try that :-)
01:43:31 <shapr> well so far, I have HOpenGL and Gtk2Hs compiled and working
01:43:46 <shapr> I'm building c2hs right now so I can build gtk+hs
01:48:38 <shapr> hrm
01:48:54 <shapr> checking for library containing glEnd... no
01:48:54 <shapr> configure: error: GL library not found!
01:48:56 <shapr> what's that mean?
01:50:21 <Heffalump> errm, what do you think it means?
01:51:01 <shapr> well, it seems somewhat obvious, I admit.
01:51:12 <shapr> and yet, I have libgtkglarea5-dev installed...
01:51:12 <shapr> hmm
01:51:27 <Heffalump> it probably just can't find it
01:51:33 * shapr installs the C++ files
01:51:49 <Heffalump> look in ./configure --help for a parameter to tell it explicitly where the library lives
01:52:02 <shapr> seems I can't
01:53:58 <shapr> ohh
01:59:21 <shapr> bah, I'll skip gtkglarea for the moment
01:59:42 <shapr> make -j2 always fails :-(
02:11:25 <Heffalump> on anything GHC related, or anything at all?
02:11:52 <shapr> anything ghc related
02:12:13 <Heffalump> I guess the makefiles just assume it'll all get built in serial
02:12:22 <shapr> yah, I think so.
03:20:04 <shapr> isn't there a BitOps module or something?
03:20:12 <shapr> I want to rotate Integers and useful stuff like that
03:20:16 <shapr> apply bitmasks, etc
03:32:32 <shapr> aha, import Bits
03:32:40 <shapr> part of the lang package for GHC
03:38:54 <shapr> ok...
03:39:01 <shapr> how do I use the Bits package?
03:39:21 <shapr> hm
03:40:10 <shapr> no, that's not it
03:40:59 <shapr> class Num a => Bits a where
03:40:59 <shapr> ...
03:41:17 <shapr> shift :: a -> Int -> a
03:41:44 <shapr> and always I get ambiguous type variable
04:44:52 <shapr> I get ambiguous type variable for some demo type classes I defined long ago also
04:45:01 <shapr> since they worked them, I suspect user error
04:48:42 <shapr> oh, they do work.
04:53:18 <jewel> can you show us an example?
04:53:28 <shapr> sure
04:53:56 <shapr> just a moment
04:54:37 <shapr> module Main where
04:54:37 <shapr> import Bits
04:54:37 <shapr> x = shift 1 1
04:54:51 <shapr> that gives me an ambiguous type variable
04:55:50 <shapr> Main> :t shift
04:55:50 <shapr> forall a. (Bits a) => a -> Int -> a
04:56:09 <shapr> in the definition of the Bits module:
04:56:14 <shapr> instance Bits Int
04:56:14 <shapr> instance Bits Integer
04:56:19 <shapr> so what am I doing wrong?
04:56:28 <shapr> is it something obvious?
04:57:17 <shapr> oh. I think I found it.
04:57:19 <shapr> doh
04:57:39 <shapr> when I type an expression into ghci, numbers are *always* Integer
04:57:45 <shapr> never Int unless explicitly cast as such
04:57:49 * shapr dohs
04:58:12 <shapr> x :: Int 
04:58:12 <shapr> x = 1
04:58:12 <shapr> y = shift x x
04:58:21 <shapr> those three lines work!
04:59:50 <jewel> how do I start ghci? (what options)
05:00:02 <shapr> run ghci
05:00:20 <shapr> and then ":set -package data" will import lots of useful stuff
05:00:29 <shapr> and then :load filename
05:00:47 <shapr> I use emacs, it's really easy to load and diagnose
05:01:01 <shapr> compared to manually loading stuff at least
05:01:26 * Igloo appears from a modem...ah, the memories
05:01:33 <shapr> hi Igloo!
05:01:37 <jewel> is that a left shift?
05:01:47 <shapr> I dunno
05:01:50 <shapr> it has shiftL
05:01:53 <shapr> and shiftR
05:02:00 <Igloo> Numbers you type in are actually (Integral a) => a, but type defaulting will resolve a as Integer in the absence of other constraints
05:02:27 <jewel> yeah it's a left shift
05:02:56 <shapr> isn't there a max value method for Num ?
05:02:59 <shapr> hmm
05:03:14 <shapr> is there some way I can list the methods for a type class from inside ghci?
05:03:48 <jewel> shiftR works too
05:03:55 <jewel> cool, now I can fix my RPC stuff
05:04:05 <shapr> heh, nifty :-)
05:04:09 <Igloo> Num? There is maxBound r similar for bounded types
05:04:15 <shapr> oh
05:04:25 <shapr> jewel: Bits may be ghc specific
05:05:09 <shapr> er, how do I use maxBound ?
05:05:56 <shapr> oh
05:06:35 <Igloo> You'll need to give it enough info to infer the type - :: Int if interactive
05:06:47 <shapr> aha
05:06:49 <shapr> cool
05:07:01 <shapr> I didn't know I could interactively type stuff
05:07:48 <shapr> that's handy
05:08:35 <jewel> Does ghc compile to powerpc?
05:08:43 <shapr> hm
05:08:46 * shapr looks
05:10:18 <shapr> it's not obvious from look at the source
05:10:40 <shapr> oh, I think it does
05:10:43 <shapr> http://www.haskell.org/ghc/
05:10:53 <shapr> 25 March 2002  Binary snapshot for MacOS/X released
05:24:20 <shapr> jewel: what kind of RPC thing are you doing?
05:37:58 <shapr> mmm, haskell is nifty
06:20:35 <shapr> hrm, how do I explicitly cast from Integer to Int?
06:22:10 <shapr> aha
06:22:22 <shapr> :t buildInt
06:22:25 <shapr> whoops
10:47:26 <shapr> hmm
10:47:35 <shapr> lambdas rock
10:47:39 <shapr> takeUntil = (\test seq1 -> takeWhile (not . test) seq1)
10:47:59 <shapr> next question is...
10:48:14 <shapr> I want to takeUntil but include the one that meets the condition.
10:48:15 <shapr> for example,
10:49:05 <shapr> let stream = [1..] in takeWhile (<5) stream ++ take 1 stream
10:49:11 <shapr> hmm
10:49:19 <shapr> that gives [1,2,3,4,1]
10:49:32 <shapr> which makes sense, but how do I include the matching item?
10:49:36 <shapr> er
10:49:36 <shapr> oh
10:49:39 <shapr> duh
10:49:43 <shapr> no wait
10:49:43 <shapr> hm
10:50:14 <shapr> hm
10:51:33 <shapr> I should probably write my own tail recursive take
11:43:35 <Igloo> I think you could just say takeUntil = takeWhile . not. You should certainly be able to drop the seq1s
11:45:20 * Igloo didn't folow the rest
11:55:25 <megacz> Anybody know of a Haskell interpreter I can embed in a Java program (ie Haskell interpreter written in Java)?
17:52:49 <jkl> where is a nice tutor for haskell?
17:57:43 <clausen> looked on haskell.org? there's lots of links...
18:02:45 <jkl> ok, thanks.
18:08:13 <hornby> jkl: I like the devworks one
18:21:55 <jkl> anyone here utilize lisp?
18:23:16 <jkl> hornby, thanks.
18:23:31 <hornby> #lisp is better )
18:23:32 <hornby> :)
18:32:41 <hornby> And np
18:32:41 <jkl> I want to compare the two languages. :)
18:36:52 <jkl> Well.
18:36:52 <jkl> I can't even read that tutorial.
18:36:52 <clausen> haskell is quite different to lisp
18:36:52 <clausen> it is statically typed, etc.
18:38:56 <hornby> Why can't you read it?
18:39:15 <hornby> Not registered? Just register, you don't even have to give a real email address -- no verification
18:39:17 <jkl> The examples overwrite the text.
18:39:26 <hornby> jkl: Get the pdf
18:39:32 <hornby> jkl: The HTML is horrible
18:39:35 <jkl> Even would you read it in html.
18:39:42 <jkl> same with pdf. :(
18:39:48 <hornby> Same with the PDF? No? 
18:39:52 <jkl> I'm using version (5.0).
18:40:04 <hornby> Platform?
18:41:27 <jkl> ie 6.0.
18:43:24 <hornby> er
18:43:50 <hornby> I have no the skill to fix ie 
18:44:00 <hornby> er not
18:44:13 <hornby> Very strange. Get the ps?
18:47:19 <jkl> What platform are you on?
18:48:41 <jkl> It must be the different fonts I'm using.
18:48:46 <jkl> In windows.
18:49:36 <jkl> Whichever document I get has to very gentle.
18:54:17 <jkl> yes.
18:54:19 <jkl> I got it.
18:54:30 <jkl> The version I was using was different.
19:08:23 <jkl> thanks bye.
