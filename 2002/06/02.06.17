01:49:47 <ElmerFudd> hmmmm haskell
02:01:16 * shapr bounces
02:03:32 <shapr> so, did I miss anything?
02:41:42 <shapr> hi clausen
02:42:47 <andrew__> hi shapr
02:42:53 <shapr> what's up?
02:42:58 <shapr> written any haskell lately?
02:43:03 <clausen> hmmm, a little
02:43:19 <clausen> nothing interesting
02:43:27 <clausen> I've put my name down to tutor the haskell subject next semester, hehe
02:43:34 <shapr> I found a cool bit of code on c.l.functional
02:43:54 <shapr> > main = do contents <- getContents
02:43:54 <shapr> >           mapM_ putStrLn (map myFunction (lines contents))
02:44:03 <shapr> I've been looking for something like that.
02:45:42 <clausen> mapM_ ?
02:46:06 <shapr> I assume it a variation of mapM :-)
02:46:48 <shapr> :t mapM_
02:46:48 <shapr> forall a m b. (Monad m) => (a -> m b) -> [a] -> m ()
02:47:05 <shapr> :t mapM
02:47:06 <shapr> forall a m b. (Monad m) => (a -> m b) -> [a] -> m [b]
02:47:25 <clausen> ah
02:47:51 <shapr> looks like mapM_ is when you just want the M to do something, but the result is not important.
02:48:19 <shapr> I need to look at ghci
02:48:48 <shapr> I'd like to hack up this Hsh.hs to be able to use functions as shell commands that you can pipe files through
02:49:13 <Igloo> Morning
02:49:26 <shapr> hi Igloo, what's up?
02:49:58 <Igloo> Me, but only just
02:50:01 <shapr> ha
02:50:09 <shapr> lucky you, I was awake at 7:30am
02:51:45 <shapr> lunchtime...
04:31:57 * shapr bounces
04:55:15 * shapr blinks
05:20:32 <shapr> sadly, GPH seems to be running with version 4 of ghc
05:33:00 <dennisb> gph?
05:33:40 <shapr> glasgow parallel haskell
05:34:04 <shapr> it has seq and par combinators to signify that something can be parallelized or not
05:35:06 <shapr> I'd like to run Haskell programs on both my CPUs at the same time.
05:35:34 <dennisb> aha
05:36:16 <dennisb> What do you need the combinators for?
05:41:49 <shapr> the page paraphrased says "transparent parallelization is possible, but has never been implemented, and is a big deal, but ours works right now."
05:45:55 <shapr> hi Yurik
05:46:05 <Yurik> shapr hi
05:46:40 <shapr> what's up?
05:47:42 <Yurik> bad :( gf got bodily injuries in Moscow... I'll depart to Moscow shortly
05:47:51 <dennisb> shapr: do these combinators change the samantics of the program or is it just a hint that the compiler should put things on different processors?
05:48:17 <dennisb> Yurik: ouch
06:00:15 <shapr> Yurik: :-(
06:00:57 <shapr> dennisb: I don't know. the bit I read implied that they don't change the actual semantics though.
06:05:31 * shapr bounces
06:48:05 * shapr BOUNCES
06:48:46 <dennisb> BOING (shapr lands after a big bounce)
06:48:51 <shapr> ha
09:34:43 <shapr> ahem
09:34:48 <shapr> hiiiiiii
09:35:56 <shapr> this may be a stupid question, but... why can't I do "(1::Int) ** (5::Int)" ?
09:36:49 <Heffalump> it would appear that (**) is Floating a => a -> a -> a
09:37:02 <Heffalump> and since Int isn't in Floating, you can't
09:37:10 <shapr> hm
09:37:18 <Igloo> (^) has a different type
09:37:27 <shapr> oh
09:38:06 <shapr> thanks :-)
09:38:10 <shapr> I didn't know about ^
10:16:45 <shapr> hi dnk
10:17:09 <shapr> are you an experienced haskeller? or looking for info on Haskell?
10:20:46 <dnk> hi shapr
10:20:46 <dnk> most likely, neither here, nor there
10:20:46 <dnk> somewhere in the middle
10:20:46 <shapr> do you have any specific questions?
10:20:46 <dnk> shapr: no, just idle curiosity right now
10:20:46 <shapr> ok, if you think of any questions, I'll try to help you.
10:20:46 <dnk> shapr: 10x!
10:20:46 <dnk> glad to see it's already an active channel
10:21:29 <shapr> yah, we have some activity.
10:21:29 <dnk> :)
10:21:29 <shapr> there's also logs of the channel
10:21:29 <dnk> where?
10:21:34 <shapr> http://tunes.org/~nef/logs/haskell/
10:21:49 <dnk> 10x, i'll have a look...
10:21:57 <shapr> yah, we have some good discussion.
10:24:11 * shapr thinks
10:24:54 <shapr> oh duh
10:24:55 <shapr> typo
10:25:39 * shapr tries to get HUnit working happily
10:41:27 <shapr>  ya know, (^) is far more useful than (**)
10:41:36 <shapr> I wonder why there's a difference.
10:42:56 * shapr puts that on the list of open haskell questions
10:46:45 <Igloo> Because (**) can raise to non-integral powers
10:47:10 <shapr> oh
10:47:14 <shapr> good point :-)
11:15:13 <shapr> hm, what's the list function that duplicates one item a bunch of times?
11:15:31 <shapr> repeat is infinite...
11:15:36 <shapr> so that's not what I want.
11:15:44 <shapr> oh, it wil work
11:15:54 <shapr> take 5 repeat myThing
11:15:57 <shapr> cool
11:16:34 <shapr> aha
11:24:50 <shapr> anyone else used HUnit?
11:29:36 <Igloo> replicate
11:31:45 <shapr> ah, thanks :-)
11:31:54 <shapr> as cool as HUnit is, it's way verbose.
11:32:23 <shapr> must fix
14:13:06 <shapr> hi tom
14:13:08 <shapr> what's up?
14:13:22 * shapr yawns
14:15:29 <shapr> oh, that reminds me, I want to look at HaXML
14:16:46 <shapr> tmoertel: written any cool code lately?
21:07:05 <horby> Why is [Char] and String different? : )
21:13:27 <horby> What args does flip take? I don't get it
21:17:06 <o3> horby: [Char] and String are exactly the same
21:17:07 <o3> (always)
21:17:23 <horby> oh ok
21:17:33 <horby> So why two names?
21:17:47 <o3> String is just a convenient alias
21:18:09 <o3> but any function which requires a String type can take in [Char], and vice versa
21:18:33 <o3> (as far as the type checker is concerned, they are _exactly_ the same)
21:18:39 <o3> as for flip
21:18:44 <o3> normally you do something like
21:18:54 <o3> elem 5 [1..10]
21:19:08 <o3> flip allows you to reverse the arguments of any function which takes in two args
21:19:09 <o3> so you can do
21:19:16 <o3> flip elem [1..10] 5
21:19:23 <o3> flip elem [1..10] 5 == elem 5 [1..10]
21:19:25 <horby> oh... 
21:19:35 <horby> Why is that useful? 
21:19:39 <o3> it probably seems a bit useless until you start dealing with higher-order functions
21:19:52 <horby> mm okay
21:20:04 <o3> do you know about, say, map?
21:20:16 <horby> In, say, Python :)
21:20:25 <o3> same deal in haskell
21:20:33 <o3> map (+ 5) [1..10] == [6..15]
21:21:02 <horby> huh, interesting
21:22:00 <o3> (trying to find an example where flip is useful :)
21:26:06 <o3> ah
21:26:15 <o3> okay, you can do something like this normally
21:26:44 <o3> map (elem 5) [ [1..6], [1..10], [1..4] ]
21:26:50 <o3> that basically does:
21:26:53 <o3> elem 5 [1..6]
21:26:54 <o3> elem 5 [1..10]
21:26:56 <o3> elem 5 [1..4]
21:27:01 <o3> i.e. it will return [True, True, False]
21:27:55 <o3> but what if you wanted to the reverse; i.e. find out whether a bunch of numbers exist in one list?
21:28:13 <o3> you can't do
21:28:19 <o3> map (elem [1..10] [1,2,4,12]
21:28:24 <o3> map (elem [1..10]) [1,2,4,12]
21:28:25 <o3> even
21:28:34 <o3> because elem requires that you take in the list first
21:28:38 <o3> because elem requires that you take in the number first
21:28:41 <o3> (smacks self)
21:29:06 <o3> so you do
21:29:15 <o3> map (flip elem [1..10]) [1,2,4,12]
21:29:17 <o3> which solves the problem
21:30:15 <horby> hm
21:30:21 <o3> although it think most haskell hackers would use lambdas instead
21:30:29 <o3> but i won't introduce you to them since that'll just confuse you :)
21:30:52 <horby> lambdas seems simple today
21:31:03 <o3> well, another way of doing the map stuff is
21:31:12 <o3> map (\num -> elem num [1..10]) [1,2,4,12]
21:31:16 <o3> which is probably clearer :)
21:31:22 <o3> or you can use list comprehensions:
21:31:32 <o3> [ elem num [1..10] | num <- [1,2,4,12] ]
21:31:51 <horby> i like that one
21:32:03 <o3> yeah, i used them a lot when i first started on haskell
21:32:09 <horby> no longer? 
21:32:21 <horby> It just looks simpler
21:32:27 <o3> not as much ... you find that after a while, map becomes easier to read
21:32:36 <o3> because you see the word 'map', you instantly know that it's doing something to every elemtn
21:32:48 <o3> whereas the apperance of list comprehensions is more ambigious
21:32:55 <o3> (since they can do both mapping and filtering)
21:32:59 <horby> hmm
21:33:11 <o3> but compared to the lambda map above, i'd use the list comprehension
21:33:22 <o3> (you find that almost all the maps you do don't involve lambdas :)
21:33:30 <o3> because something like
21:33:32 <o3> map (+ 5) [1..10]
21:33:38 <o3> is much easier to understand at a glance than
21:33:43 <o3> [ n + 5 | n <- [1..10] ]
21:33:56 <o3> although it kinda reverses once you need to play around with the arguments
21:34:06 <horby> Actually, I still like the list comprehension there :)
21:34:12 <o3> 8)
21:34:17 <o3> i guess it's just something that you get used to
21:34:23 <horby> But yeah, the map is simple too
21:34:42 <o3> but in the perl way -- TMTOWTDI
21:34:43 <horby> its just I immediately see n + 5 where n is 1 .. 10
21:34:51 <o3> right
21:35:01 <o3> and python has list comprehensions too, i guess (although it has map as well)
21:35:14 <horby> yeah. 
21:35:30 <horby> I understand map, it just always take that little bit more of concentration
21:35:42 <horby> Because I don't use it much 
21:35:42 <o3> yeah, same with me at first
21:35:58 <o3> although as map starts infiltrating your brain, you'll find that it's easier to read
21:36:02 <horby> :)
21:36:02 <o3> just takes time :)
21:36:26 <horby> I wish I had more code to read. 
21:36:41 <horby> I should search out actual code. Most of it is too complex for me right now though
21:37:01 <o3> yeah, one of the biggest problems with haskell is that a lot of it isn't newbie-friendly
21:37:31 <o3> i guess that comes from having hardcore type theorists and mathematicians forming the basis of the language 8)  (i'm sure somebody will shoot me down for saying that)
21:37:41 <horby> I've glanced at it before, awhile ago now, but there never was any simple documentation. Now at least there is SOME
21:38:14 <horby> It's just a littl awkward in that its different and has its own conventions 
21:38:17 <o3> if you know some functional programming, "a gentle introduction to haskell 98" isn't too bad
21:38:46 <horby> I know a little bit. I'm going to give it a shot eventually :) 
21:39:12 <horby> But where do you go from there? Practice?
21:39:35 <o3> you might want to check out
21:39:36 <o3> http://haskell.org/wiki/wiki?CommonHaskellIdioms
21:39:49 <o3> that has some basic introductions to higher-order-functions, etc
21:39:55 <o3> yeah, mostly practice
21:40:24 <o3> i just sat down and starting building real programs with it ... i went from knowing a little bit to knowing a _lot_ more now
21:41:02 <horby> What sort of real programs? :)
21:41:13 <o3> have a look at
21:41:14 <o3> http://www-105.ibm.com/developerworks/education.nsf/linux-onlinecourse-bytitle/9A31A3C4A0CE683E86256AD400822942?open&t=grl,l=805,t=haskell
21:41:15 <o3> too
21:41:23 <o3> a meta-markup language
21:41:30 <horby> Yeah, I've read that. 
21:41:30 <o3> i.e. a markup language which translates to HTML, latex, etc
21:41:53 <horby> hmm neat
21:42:15 <horby> those seem popular lately :)
21:42:25 <o3> nod
21:42:29 <o3> although mine's the best, of course ;)
21:42:45 <o3> our uni has good lecture notes and exercises
21:42:49 <o3> with solutions
21:43:05 <o3> check out the lecture notes and lab exercises:
21:43:11 <o3> http://www.cse.unsw.edu.au/~cs1011
21:43:35 <horby> I don't think my uni has ever heard of Haskell
21:44:15 <o3> it's the first thing taught at our uni to comp students
21:44:29 <horby> thats pretty cool :) 
21:44:36 <o3> good and bad ... good because they inherit a startlingly high amount of design concepts from it
21:44:48 <o3> and bad because they think it's just some toy language, unlike C
21:45:23 <horby> It would be interesting to see a course where both were taught simultaneously
21:46:21 <o3> well, here, computing 1A is haskell, computing 1B is C
21:47:19 <horby> Strange contrast
21:50:50 <horby> o3: So what do you do at your university? 
21:51:12 <o3> almost finished my undergrad now
21:51:29 <horby> nice
21:51:46 <o3> although i'm doing advanced functional programming this session, and wow, once you know it, haskell is so nice
21:52:13 <horby> Use Haskell in that class? Or a variety of languages?
21:52:26 <o3> haskell only
21:52:47 <horby> So are you in school right now? No summer break? 
21:52:57 <o3> people's eyes boggle when you tell them you can do pointer manipulation, threads, etc in haskell
21:53:04 <o3> it's not summer here 8)
21:53:10 <horby> Oh, good point 
21:53:21 <horby> Pointer manipulation? I don't see how that makes any sense
21:53:38 <o3> haskell can use C libraries
21:53:48 <o3> so you need to deal with pointers
21:53:57 <horby> ahh
21:54:12 <horby> Haskell is pretty cool. Definately not a toy
21:54:35 <dennisb> At chalmers in my town (gothenburg, sweden) it's haskell first and then Java second for the new students
21:54:55 <horby> You guys are so lucky
21:55:08 <horby> We do 2 semesters of C
21:56:24 <horby> That's pretty standard around here. Actually Java is more common ... sigh
21:56:39 <dennisb> Well, I don't think C is the best first language, but everyoner needs to know C sooner or later
21:57:07 <horby> Implementing linked lists was fun
21:57:25 <horby> queues and stacks ... everything else was stupid
22:02:33 <horby> Hey wow, I just learned enough to write any program 
22:07:04 <horby> I think I have problem with axiomatic systems. They are never quite pure. They claim to define everything you need to know, but they never do -- they always assume ... and I can never tell the difference between what I'm just supposed to take for granted, and what they actually define
22:07:45 <dennisb> hmm...
22:08:00 <dennisb> give an example
22:08:35 <o3> horby: sounds like you're approaching godel's theorem of incompleteness
22:08:38 <horby> I can't think of anything offhand... its just that rules are always left out
22:08:56 <o3> if you want to get hardcore, read this paper:
22:08:58 <o3> http://www-2.cs.cmu.edu/~rwh/papers/unreasonable/basl.ps
22:09:08 <o3> bunch of nutbag CompSci people who decided that maths wasn't pure enough
22:09:12 <o3> so they decided to reinvent it
22:09:15 <horby> o3: Hrm, I never thought of it that way. 
22:09:41 <horby> o3: Thats a neat idea though :)
22:09:47 <o3> horby: heh
22:10:17 <o3> horby: well, the history of the lambda calculus (which most (all?) FP programs use, as well as LISP) is that it was invented by a bunch of guys who didn't think the basics of math were "good enough"
22:10:26 <o3> so they went and invented the lambda calculus
22:10:32 <o3> crazy hippies
22:11:11 <horby> I like that title: On the Unreasonable Effectiveness of Mathematics in the Natural Sciences. :)
22:11:13 <dennisb> Then. what is assumed and unpure with lambda calculus?
22:12:09 <o3> dennisb: not much, although i'm no expert in it
22:12:15 <o3> although i think there are only four operations
22:12:39 <dennisb> in one way or another mathematics is all about convincing other people that you are correct
22:13:17 <dennisb> You just have to go to the depth where you convince everyone, and that is an axiom
22:13:51 <horby> :)
22:14:01 <o3> dennisb: true, although it does actually apply to real life, so it's typically easy to believe
22:14:03 <horby> Axiom: Undisputed truth?
22:14:25 <o3> i mean, if you say there's a cliff at 50m, and then you say that if you walk 100m, you will die, the majority of people will probably believe you :)
22:14:44 <o3> and the people who don't believe you deserve to be culled from the gene pool anyway ;)
22:15:17 <horby> the philosophy of math is so goddamn interesting, why does arithmetic have to be so incredibly dull?
22:17:50 <dennisb> I think there is some truth in what I say, but it's not the only view of axioms
22:18:00 <horby> This paper was great until it hit the first Let
22:18:13 <o3> horby: it's hardcore :)
22:18:21 <horby> o3: I, sadly, am not. 
22:18:30 <horby> My mathematics foundation is shameful
22:19:47 <o3> ditto
22:19:55 <horby> Jesus, I don't even recognize that symbol
22:20:02 <o3> i read the first paragraph of that article and thought "not for me"
22:20:04 <horby> |x| sort of
22:20:28 <horby> hahaha
22:20:30 <horby> WTF
22:20:40 <horby> Let me TRY to transcribe this
22:21:24 <horby> pi_drinker [-frequences |x| pi_bar (o'_beer=Bass-(serves))]
22:21:32 <horby> _ being sub, - superscript
22:22:03 <horby> frequents rather. 
22:22:05 <horby> Is that a joke? 
22:22:42 <dennisb> sounds like it, what is it that you read?
22:23:04 <o3> damn mathematicians' humour
22:23:46 <horby> dennisb: What am I reading? No clue
23:34:30 * shapr bounces
