00:29:04 --- mode: carter.openprojects.net set +n
00:31:21 --- topic: set to 'Haskell! (NerdBop) || and spiffy people! (shapr) || ? (gene9) || ! (shapr)' by ChanServ
02:58:09 <shapr> boink
02:58:15 <shapr> hi tetryl
09:49:21 <shapr> hiiiii
09:53:26 <Igloo> Hello  :-)
09:53:41 <shapr> hey Igloo, what's up?
09:53:43 <shapr> oh oh
09:53:56 <shapr> I had an enlightening Monad moment, I think I dig it
09:54:07 <Igloo> Lots of things. htaccess files right now
09:54:14 <Igloo> Cool   :-)
09:54:15 <shapr> yay
09:54:19 <shapr> oh I had to tell you
09:54:21 <shapr> I think I get it
09:54:32 <shapr> getLine *is* referentially transparent
09:54:32 <Igloo> Congrats  :-)
09:54:47 <shapr> but you have scoping...
09:55:13 <shapr> so between each set of >>= ops, getLine or whatever is always the same value
09:55:20 <Heffalump> what's Igloo up to with htaccess, OOI?
09:55:36 <Igloo> Ah, you mean if you take the "world" variable hidden in the IO monad as an argument then it is a pure function?
09:56:02 <Igloo> Heff: I want to say "use the module Foo which is in the same directory as the .htaccess file"
09:56:11 <Heffalump> it's better to think of a "world" parameter
09:56:14 <Heffalump> module in what sense?
09:56:19 <Heffalump> than to think of it in terms of scoping
09:56:19 <shapr> I dunno about that, but there are separate referentially transparant programs that are divided by the >>= op
09:56:36 <Igloo> Sorry, variable was the wrong word
09:56:44 <shapr> yah I see what you mean, but it's hard to make that jump at first
09:57:12 <shapr> that's why <- is special I think, because it's actually returning a value from another universe.
09:57:23 <shapr> see, monads ARE wormholes!
09:57:34 <Igloo> Well I have "PerlHandler Foo", but it looks for Foo in @INC and, even though . is in @INC, I think . is taken as the working directory of the httpd process which is /
09:57:55 --- topic: set to 'Haskell! (NerdBop) || and spiffy people! (shapr) || ? (gene9) || Monad off the port bow! Red Alert!' by shapr
09:59:14 <shapr> I still don't totally understand it, but I do understand it well enough to be able to use it.
09:59:43 * Igloo could use it before I had any real idea of what was going on at all I think
10:00:07 <shapr> I still have a problem with "do" though...
10:00:12 <shapr> when I write:
10:00:17 <shapr> do putStr "foo"
10:00:26 <shapr>    input <- getLine
10:00:34 <shapr> then the "foo" seems to be printed after the putStr
10:00:54 <shapr> but, if I put a "\n" at the end of the string, it gets printed before.
10:00:59 <Igloo> DYM getLine? Your problem may well be buffering
10:01:14 <shapr> er, yes
10:01:14 <Igloo> Yeah, it'll probably be line buffered by default
10:01:15 <shapr> oh
10:01:18 <shapr> how do I change that?
10:01:30 <Igloo> hSetBuffering stdout NoBuffering or similar
10:01:46 <shapr> confusing...
10:02:11 <Igloo> Same as lots of languages I think
10:02:49 <dennisb> shapr: John Hughes have a nice example he uses to explain IO-actions. He draws a picture of a man standing on a high wall. Then the function returns the IO-action "take a stepp backwards" and points out that this is the thing that is returned each time, but the effect when executed can be quite different depending on the state of the world (will the man fall down or not)
10:02:51 <shapr> I was pretty pissed off, cause I'd been doing Thompson IO exercises on paper for six hours on the bus
10:03:34 <shapr> dennisb: hm, interesting.
10:04:44 <shapr> I understand that explanation just fine...
10:04:53 <shapr> it matches exactly what Thompson says
10:05:11 <shapr> but for some reason it doesn't tell me how IO really works in Haskell
10:05:31 <shapr> the "divided programs" thing works better for me
10:07:28 <shapr> at least in terms of understanding how to actually write code that does something useful.
10:07:58 <dennisb> well, most people used to other languages have the illusion that putStr "sfds" actually outputs something
10:08:04 <shapr> ha
10:08:43 <dennisb> it's god to point out the difference between returning an action and performing an action
10:08:53 <shapr> yah, that's true.
10:08:57 <dennisb> good even
10:09:31 <shapr> I'm happy to see HTTP.hs
10:09:57 * dennisb is lost
10:10:10 <shapr> on the mailing lists, someone submitted an HTTP client
10:10:29 <shapr> I have to try it after I've played with WASH-CGI some
10:11:14 * Yurik is away: home
10:12:13 <shapr> has anyone written any cool Haskell code lately?
10:21:37 <Igloo> No, but mod_haskell gets progressively more tempting  :-)
10:26:38 <Heffalump> make it support GHC, you know you want to
10:27:05 <Heffalump> and get it to do some kind of dynamic loading
10:27:51 <Igloo> "support GHC"?
10:29:02 <Heffalump> well, currently it integrates hugs with Apache.
10:29:23 <Heffalump> It'd be nice if it integrated ghci with Apache, or allowed GHC-compiled modules to be made into Apache modules.
10:29:50 <Igloo> Ah
10:40:29 <shapr> WASH-CGI + mod_haskell could be spiffy!
10:40:43 <shapr> er, whichever one does the html generation
11:45:14 * shapr bounces furiously
11:50:39 <Igloo> Oh?  :-)
14:09:36 <shapr> hrm
14:45:39 <shapr> Igloo: I can't find it...
14:45:52 <shapr> the unbuffer call
14:45:56 <Igloo> Can't find what?
14:45:59 <Igloo> Ah
14:46:16 <shapr> and the Prelude is really distracting too, lots of cool stuff I haven't see before.
14:46:24 <Igloo> :-)
14:46:52 <Igloo> http://research.microsoft.com/Users/simonpj/haskell98-revised/haskell98-library-html/io.html
22:36:34 <Khmar> In John Backus' paper..
22:36:38 <Khmar> his turing award one
22:36:47 <Khmar> what does he mean by "word by word programming style" ?
